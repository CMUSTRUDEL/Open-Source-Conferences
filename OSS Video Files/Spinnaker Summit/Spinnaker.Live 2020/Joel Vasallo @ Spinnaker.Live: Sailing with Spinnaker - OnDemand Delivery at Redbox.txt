Title: Joel Vasallo @ Spinnaker.Live: Sailing with Spinnaker - OnDemand Delivery at Redbox
Publication date: 2020-06-20
Playlist: Spinnaker.Live 2020
Description: 
	In the past year, Redbox's engineering team was tasked with building a Multi-Region On Demand platform from the ground up. From backend to frontend, from source to delivery, there were a lot of things in motion. Instead of building an in-house delivery platform, we chose to use the popular continuous delivery platform: Spinnaker! Using Spinnaker, Redbox's delivery engineers were able to focus on solving the delivery challenges specific to their technology stack.

In this session, we will recap and share how Redbox built on the concepts of paved road delivery to empower their developers to rapidly deliver software safely and securely to multiple regions. In addition, we will share how we used Spinnaker to build our On Demand platform at Redbox; from 10s to 1000s of deployments a month. Finally, we will share some strategies and lessons learned along the way when building/extending Spinnaker for both applications and Istio.
Captions: 
	00:00:07,200 --> 00:00:09,360
hey everybody

00:00:08,080 --> 00:00:11,440
thanks so much for attending spinnaker

00:00:09,360 --> 00:00:13,599
live today um i hope you had a chance to

00:00:11,440 --> 00:00:15,120
check out those main stage sessions uh

00:00:13,599 --> 00:00:16,400
look some pretty cool talks from a lot

00:00:15,120 --> 00:00:18,000
of great tech leaders so be sure to

00:00:16,400 --> 00:00:19,760
check those out

00:00:18,000 --> 00:00:21,760
first off i just want to welcome

00:00:19,760 --> 00:00:23,439
everyone to the spinnaker community

00:00:21,760 --> 00:00:24,800
whether you are a spinnaker veteran or

00:00:23,439 --> 00:00:25,840
just someone checking out spinnaker for

00:00:24,800 --> 00:00:28,560
the first time

00:00:25,840 --> 00:00:30,880
thank you and welcome to spinnaker live

00:00:28,560 --> 00:00:33,280
it's just great to see everyone today

00:00:30,880 --> 00:00:34,480
um some housekeeping notes uh throughout

00:00:33,280 --> 00:00:35,840
the presentation um

00:00:34,480 --> 00:00:37,440
there's gonna be a lot of content today

00:00:35,840 --> 00:00:38,879
probably a lot of questions too make

00:00:37,440 --> 00:00:40,320
sure you type those up in the chat

00:00:38,879 --> 00:00:42,239
um and we'll be able to answer them

00:00:40,320 --> 00:00:43,840
throughout the day and you know build

00:00:42,239 --> 00:00:45,200
and learn from one another

00:00:43,840 --> 00:00:47,200
because ultimately this is a community

00:00:45,200 --> 00:00:48,719
event so even after the session

00:00:47,200 --> 00:00:50,559
through the portal engage with one

00:00:48,719 --> 00:00:52,559
another let's have a chat let's have a

00:00:50,559 --> 00:00:54,239
discussion

00:00:52,559 --> 00:00:56,160
and i think even after every breakout

00:00:54,239 --> 00:00:57,920
we're doing like little prizes and

00:00:56,160 --> 00:00:59,039
giveaways too so make sure you check out

00:00:57,920 --> 00:01:00,399
the main channel

00:00:59,039 --> 00:01:02,480
for games and prizes throughout the

00:01:00,399 --> 00:01:04,320
break

00:01:02,480 --> 00:01:06,479
uh so without further ado let's get

00:01:04,320 --> 00:01:08,240
started uh the talk is called

00:01:06,479 --> 00:01:10,799
sailing with spinnaker on-demand

00:01:08,240 --> 00:01:12,479
delivery at redbox

00:01:10,799 --> 00:01:14,320
a little bit about myself my name is

00:01:12,479 --> 00:01:15,680
joel vasalo i'm the manager of cloud

00:01:14,320 --> 00:01:17,200
devops at redbox

00:01:15,680 --> 00:01:18,799
um there's my twitter tag if you want to

00:01:17,200 --> 00:01:20,000
shoot me a tweet or send me a message

00:01:18,799 --> 00:01:20,880
any questions you may have throughout

00:01:20,000 --> 00:01:23,119
the day

00:01:20,880 --> 00:01:23,920
but also i'm a geg organizer a google

00:01:23,119 --> 00:01:26,240
developer group

00:01:23,920 --> 00:01:27,920
organizer out of chicago running events

00:01:26,240 --> 00:01:29,520
for the local chicago community around

00:01:27,920 --> 00:01:30,799
technology the cloud

00:01:29,520 --> 00:01:33,600
and just building and growing a

00:01:30,799 --> 00:01:33,600
community there

00:01:34,159 --> 00:01:37,840
a little bit about redbox we rent and

00:01:35,920 --> 00:01:41,040
sell physical dvds and blu-rays at over

00:01:37,840 --> 00:01:42,159
41 000 kiosks across america

00:01:41,040 --> 00:01:44,560
you can find us at your convenience

00:01:42,159 --> 00:01:45,840
store your grocery store every tuesday

00:01:44,560 --> 00:01:49,680
we get new titles

00:01:45,840 --> 00:01:51,680
um available to you our customers

00:01:49,680 --> 00:01:53,439
a lot of people may not know this but we

00:01:51,680 --> 00:01:55,439
also have an on demand platform

00:01:53,439 --> 00:01:56,960
so we can provide you movies in the

00:01:55,439 --> 00:01:57,680
comforts of your home whether you're on

00:01:56,960 --> 00:01:59,360
your laptop

00:01:57,680 --> 00:02:01,280
on your phone or on your tv and your

00:01:59,360 --> 00:02:03,520
set-top devices

00:02:01,280 --> 00:02:06,159
we're there for you whether you are a

00:02:03,520 --> 00:02:07,759
kiosk customer or an on-demand customer

00:02:06,159 --> 00:02:09,520
we are really happy to have you in the

00:02:07,759 --> 00:02:13,440
red box family and thank you so much

00:02:09,520 --> 00:02:13,440
for uh your support and your business

00:02:14,640 --> 00:02:20,319
um this presentation is going to be a

00:02:16,640 --> 00:02:22,720
story about us modernizing our platform

00:02:20,319 --> 00:02:24,400
and ultimately building our on-demand

00:02:22,720 --> 00:02:27,520
platform as you know it today

00:02:24,400 --> 00:02:29,200
uh so with that being said there's

00:02:27,520 --> 00:02:31,599
always a day zero you had to start

00:02:29,200 --> 00:02:31,599
somewhere

00:02:31,680 --> 00:02:37,120
so the field of dreams was kicked off in

00:02:34,640 --> 00:02:39,040
middle of 2018 we committed to a mission

00:02:37,120 --> 00:02:40,800
of digital transformation you know the

00:02:39,040 --> 00:02:42,000
term digital transformation we hear that

00:02:40,800 --> 00:02:43,280
a lot today

00:02:42,000 --> 00:02:44,959
uh but what does that mean for every

00:02:43,280 --> 00:02:45,440
organization and for us it was three

00:02:44,959 --> 00:02:47,200
things

00:02:45,440 --> 00:02:49,360
we wanted to improve how we deliver

00:02:47,200 --> 00:02:50,080
software and our software delivery

00:02:49,360 --> 00:02:53,519
processes

00:02:50,080 --> 00:02:56,000
and as in general two we wanted to

00:02:53,519 --> 00:02:58,720
migrate to cloud native architectures

00:02:56,000 --> 00:02:59,840
right a lot of the cloud is doing a lot

00:02:58,720 --> 00:03:01,920
of heavy lifting

00:02:59,840 --> 00:03:03,120
uh for a lot of probably complex

00:03:01,920 --> 00:03:05,280
workloads that may

00:03:03,120 --> 00:03:06,319
have existed in the past but are now

00:03:05,280 --> 00:03:09,760
services such as

00:03:06,319 --> 00:03:12,800
s3 um kubernetes uh

00:03:09,760 --> 00:03:14,239
ec2 lambda functions right there's a lot

00:03:12,800 --> 00:03:15,519
of things that you can do to modernize

00:03:14,239 --> 00:03:18,080
your architecture that you have to

00:03:15,519 --> 00:03:20,319
consider when rewriting your software

00:03:18,080 --> 00:03:21,840
and ultimately modernize those legacy

00:03:20,319 --> 00:03:23,599
applications so we can build

00:03:21,840 --> 00:03:26,080
better and faster applications for our

00:03:23,599 --> 00:03:28,080
customers

00:03:26,080 --> 00:03:29,680
we also wanted to do a mission of

00:03:28,080 --> 00:03:31,360
empowering our developers to build

00:03:29,680 --> 00:03:32,799
deploy and maintain their applications

00:03:31,360 --> 00:03:35,680
and we'll touch on that

00:03:32,799 --> 00:03:35,680
but how do you do that

00:03:36,159 --> 00:03:39,360
if you're kind of been in the spinnaker

00:03:37,760 --> 00:03:40,720
community for a while or you may have

00:03:39,360 --> 00:03:43,360
heard the term of

00:03:40,720 --> 00:03:45,840
building a paved road netflix has been

00:03:43,360 --> 00:03:48,080
really popularizing this idea of

00:03:45,840 --> 00:03:50,799
building best common practice delivery

00:03:48,080 --> 00:03:53,599
methods to deploy to the cloud

00:03:50,799 --> 00:03:54,159
the benefit of this is as more people

00:03:53,599 --> 00:03:56,080
deploy

00:03:54,159 --> 00:03:57,840
down this common lane of how to get

00:03:56,080 --> 00:03:59,680
software out the door

00:03:57,840 --> 00:04:01,920
you all the new features that you add to

00:03:59,680 --> 00:04:04,080
this everyone in the organization

00:04:01,920 --> 00:04:05,519
can benefit from it whether you added

00:04:04,080 --> 00:04:06,879
multi-region support

00:04:05,519 --> 00:04:09,280
whether you added support for how to

00:04:06,879 --> 00:04:12,400
deploy to s3 whether you added

00:04:09,280 --> 00:04:14,239
a way to do lambda deployments

00:04:12,400 --> 00:04:16,320
into a pipeline everyone in the

00:04:14,239 --> 00:04:18,400
organization now has a menu of what they

00:04:16,320 --> 00:04:20,239
can use to deploy to the cloud

00:04:18,400 --> 00:04:22,560
the best part of it all is within your

00:04:20,239 --> 00:04:24,560
organization it's well defined

00:04:22,560 --> 00:04:26,639
and it's well understood that even

00:04:24,560 --> 00:04:28,560
developers on a completely separate dev

00:04:26,639 --> 00:04:29,840
team can go to another dev team and

00:04:28,560 --> 00:04:32,639
share their expertise

00:04:29,840 --> 00:04:34,320
or help that team get up to speed again

00:04:32,639 --> 00:04:35,759
building that concept of

00:04:34,320 --> 00:04:38,080
self-knowledge and self-growth with

00:04:35,759 --> 00:04:41,120
organization

00:04:38,080 --> 00:04:43,040
uh that all sounds well and good right

00:04:41,120 --> 00:04:44,639
but where do we start where do we start

00:04:43,040 --> 00:04:45,520
building that paved road because for a

00:04:44,639 --> 00:04:47,360
lot of us

00:04:45,520 --> 00:04:48,960
it could just be kind of this is where

00:04:47,360 --> 00:04:49,919
we feel red we're like we want to get

00:04:48,960 --> 00:04:51,680
there of course

00:04:49,919 --> 00:04:53,360
look at these great giants doing this

00:04:51,680 --> 00:04:54,880
how do we get there

00:04:53,360 --> 00:04:57,040
and we'll kind of talk on how we did

00:04:54,880 --> 00:04:59,440
that ourselves

00:04:57,040 --> 00:05:00,080
we knew where we wanted to start we

00:04:59,440 --> 00:05:02,400
wanted

00:05:00,080 --> 00:05:03,840
a pretty cool language in net core we

00:05:02,400 --> 00:05:05,520
wanted to run in containers come on

00:05:03,840 --> 00:05:06,000
containers are cool docker yeah let's do

00:05:05,520 --> 00:05:08,400
it

00:05:06,000 --> 00:05:10,000
kubernetes i i mean at this point i get

00:05:08,400 --> 00:05:13,520
a kubernetes email every single

00:05:10,000 --> 00:05:15,919
day uh i think it's here to stay

00:05:13,520 --> 00:05:17,680
the cloud right it's it's tremendous

00:05:15,919 --> 00:05:19,520
growth we wanted to be highly we wanted

00:05:17,680 --> 00:05:20,800
to move to the cloud to ultimately be in

00:05:19,520 --> 00:05:22,800
multiple regions

00:05:20,800 --> 00:05:26,080
to service our customers where they are

00:05:22,800 --> 00:05:28,720
at and provide them resilient services

00:05:26,080 --> 00:05:29,680
but take a step back we had to realize

00:05:28,720 --> 00:05:32,479
we were at

00:05:29,680 --> 00:05:33,199
we had a lot of net expertise but not as

00:05:32,479 --> 00:05:35,440
much in the

00:05:33,199 --> 00:05:36,560
net core landscape we had to build that

00:05:35,440 --> 00:05:38,960
we had a lot of

00:05:36,560 --> 00:05:40,800
experience in hardcore computing but not

00:05:38,960 --> 00:05:43,039
so much in containerization

00:05:40,800 --> 00:05:43,919
we wanted to do the cloud but we've

00:05:43,039 --> 00:05:45,919
never done

00:05:43,919 --> 00:05:47,759
a cloud environment before what are some

00:05:45,919 --> 00:05:49,680
of the best practices there

00:05:47,759 --> 00:05:51,440
um there was a lot of education and

00:05:49,680 --> 00:05:52,320
growth that had to happen in order for

00:05:51,440 --> 00:05:55,600
this to

00:05:52,320 --> 00:05:57,120
start but before we

00:05:55,600 --> 00:05:59,120
kind of get that there we have to kind

00:05:57,120 --> 00:06:01,039
of figure out

00:05:59,120 --> 00:06:02,479
we need to actually try and do something

00:06:01,039 --> 00:06:03,120
and actually start building right so

00:06:02,479 --> 00:06:04,479
let's

00:06:03,120 --> 00:06:06,319
let's get started what are we what are

00:06:04,479 --> 00:06:10,000
we we know where we want to be

00:06:06,319 --> 00:06:11,600
let's get started we have to take a look

00:06:10,000 --> 00:06:13,759
at our current delivery pipeline what

00:06:11,600 --> 00:06:17,120
does it mean to get code from a laptop

00:06:13,759 --> 00:06:18,880
all the way out to production um and

00:06:17,120 --> 00:06:20,160
ultimately from there we're able to take

00:06:18,880 --> 00:06:22,800
each individual component

00:06:20,160 --> 00:06:24,240
of hey someone commits code something

00:06:22,800 --> 00:06:26,560
happens to that code maybe it gets

00:06:24,240 --> 00:06:29,199
scanned by a quality job of sorts

00:06:26,560 --> 00:06:30,319
maybe gets linted after that it goes to

00:06:29,199 --> 00:06:33,680
an operations

00:06:30,319 --> 00:06:34,639
uh script or whatever to deploy it to a

00:06:33,680 --> 00:06:37,280
vm

00:06:34,639 --> 00:06:38,080
from there does you know everything is

00:06:37,280 --> 00:06:39,840
going to be different for every

00:06:38,080 --> 00:06:41,440
organization but label steps

00:06:39,840 --> 00:06:43,120
out so you know what you have to

00:06:41,440 --> 00:06:45,680
automate

00:06:43,120 --> 00:06:47,600
but when i say this is really lay it out

00:06:45,680 --> 00:06:50,479
no one really understands your business

00:06:47,600 --> 00:06:52,560
like you do like your engineers do

00:06:50,479 --> 00:06:53,360
figure out what is truly needed and make

00:06:52,560 --> 00:06:55,440
sure that you

00:06:53,360 --> 00:06:56,479
justify why everything exists a lot of

00:06:55,440 --> 00:06:58,479
things in a pipeline

00:06:56,479 --> 00:07:00,160
exist for a very good reason they've

00:06:58,479 --> 00:07:02,080
probably been there from day one

00:07:00,160 --> 00:07:03,440
and maybe they still need to exist but

00:07:02,080 --> 00:07:06,000
understand why they do

00:07:03,440 --> 00:07:07,039
um and and ultimately reiterate the fact

00:07:06,000 --> 00:07:08,639
that this is something that's still

00:07:07,039 --> 00:07:09,919
truly needed because a lot of things at

00:07:08,639 --> 00:07:11,520
the pace of technology

00:07:09,919 --> 00:07:14,160
changes every day there's better ways of

00:07:11,520 --> 00:07:14,160
doing things

00:07:14,960 --> 00:07:18,319
i always like to say that an effective

00:07:16,479 --> 00:07:19,199
delivery pipeline does not start at

00:07:18,319 --> 00:07:21,599
delivery

00:07:19,199 --> 00:07:23,120
um what did we mean by that at red box

00:07:21,599 --> 00:07:26,240
we had three core principles

00:07:23,120 --> 00:07:28,240
in our digital transformation journey

00:07:26,240 --> 00:07:30,319
the first of which was empowering our

00:07:28,240 --> 00:07:32,319
engineers we wanted to build a culture

00:07:30,319 --> 00:07:34,319
in which we empower engineers

00:07:32,319 --> 00:07:36,000
to build deploy and own their

00:07:34,319 --> 00:07:38,080
applications and to end

00:07:36,000 --> 00:07:39,120
now this is where i have to stop and say

00:07:38,080 --> 00:07:41,199
we're not just giving

00:07:39,120 --> 00:07:42,560
developers pseudo access on all the

00:07:41,199 --> 00:07:44,879
boxes and say here you go

00:07:42,560 --> 00:07:46,000
good luck deploy the docker container no

00:07:44,879 --> 00:07:47,599
no no no

00:07:46,000 --> 00:07:49,440
each individual team has to build

00:07:47,599 --> 00:07:52,240
compelling solutions to

00:07:49,440 --> 00:07:54,240
alleviate the stress of how do i run a

00:07:52,240 --> 00:07:57,280
linux container how do i

00:07:54,240 --> 00:07:59,520
use net core within the concepts of aws

00:07:57,280 --> 00:08:00,639
build common solutions so developers

00:07:59,520 --> 00:08:01,599
don't have to worry about all that and

00:08:00,639 --> 00:08:04,960
they can just focus

00:08:01,599 --> 00:08:07,280
on their code with that being said

00:08:04,960 --> 00:08:08,720
we also had to make deployments boring

00:08:07,280 --> 00:08:10,400
deployments should no longer be this

00:08:08,720 --> 00:08:11,199
grandstanding event where we're just

00:08:10,400 --> 00:08:13,039
there

00:08:11,199 --> 00:08:14,800
you know is everything checked okay cool

00:08:13,039 --> 00:08:17,199
hit the button and then

00:08:14,800 --> 00:08:18,080
everything blows up no we had to find a

00:08:17,199 --> 00:08:20,319
way that

00:08:18,080 --> 00:08:21,120
changes on a daily basis are common i'm

00:08:20,319 --> 00:08:23,039
not saying

00:08:21,120 --> 00:08:24,240
the releases or the big projects should

00:08:23,039 --> 00:08:25,759
not be celebrated

00:08:24,240 --> 00:08:27,520
i'm saying that day to day changes

00:08:25,759 --> 00:08:29,199
things change all the time right

00:08:27,520 --> 00:08:32,159
we should be able to deploy at any time

00:08:29,199 --> 00:08:33,599
of the day with little to no impact

00:08:32,159 --> 00:08:35,279
and the last thing is something that we

00:08:33,599 --> 00:08:37,360
centralized was we wanted everything to

00:08:35,279 --> 00:08:39,360
be done with a click of a button

00:08:37,360 --> 00:08:41,440
yes i want this in prod no i don't want

00:08:39,360 --> 00:08:43,200
this in prime i want to roll back this

00:08:41,440 --> 00:08:44,080
everything has to be a click of the

00:08:43,200 --> 00:08:46,320
button

00:08:44,080 --> 00:08:49,680
to ultimately developers don't have to

00:08:46,320 --> 00:08:51,760
know the implementation details

00:08:49,680 --> 00:08:52,959
so for us we chose to centralize the

00:08:51,760 --> 00:08:55,839
common platform

00:08:52,959 --> 00:08:55,839
that was spinnaker

00:08:56,160 --> 00:09:00,240
so why spinnaker it started as a netflix

00:08:58,880 --> 00:09:03,040
open source project

00:09:00,240 --> 00:09:04,959
in late 2015 it's still an open and

00:09:03,040 --> 00:09:06,560
active and growing community today and

00:09:04,959 --> 00:09:08,000
now the best part of it it's part of the

00:09:06,560 --> 00:09:10,000
continuous delivery foundation

00:09:08,000 --> 00:09:11,360
in a neutral space so a lot of great

00:09:10,000 --> 00:09:13,279
companies are behind it

00:09:11,360 --> 00:09:14,959
whether you are a user spinnaker a

00:09:13,279 --> 00:09:16,399
developer spinnaker hey some of the core

00:09:14,959 --> 00:09:19,440
contributors attending

00:09:16,399 --> 00:09:21,040
um it's every day it's just growing it's

00:09:19,440 --> 00:09:22,560
it's it's it's crazy and if you haven't

00:09:21,040 --> 00:09:24,560
had a chance to check out the slack it's

00:09:22,560 --> 00:09:26,800
just a great spot to get started and ask

00:09:24,560 --> 00:09:28,320
your questions

00:09:26,800 --> 00:09:30,480
best part of spinnaker is it provides a

00:09:28,320 --> 00:09:31,920
singular interface for our various

00:09:30,480 --> 00:09:33,920
various cloud providers whether you're

00:09:31,920 --> 00:09:35,519
in aws whether you're in google cloud

00:09:33,920 --> 00:09:37,040
whether you're using kubernetes

00:09:35,519 --> 00:09:39,360
it's available to you you don't have to

00:09:37,040 --> 00:09:41,120
worry about building custom interfaces

00:09:39,360 --> 00:09:41,839
for each of these you just use spinnaker

00:09:41,120 --> 00:09:43,760
as your end

00:09:41,839 --> 00:09:45,120
is your entry point and it can branch

00:09:43,760 --> 00:09:48,320
out into all these

00:09:45,120 --> 00:09:50,160
various providers um i mentioned it but

00:09:48,320 --> 00:09:51,839
it supports kubernetes and the best part

00:09:50,160 --> 00:09:53,519
is it's not just gke

00:09:51,839 --> 00:09:55,519
so whether you're running kubernetes in

00:09:53,519 --> 00:09:58,000
aws in gcp

00:09:55,519 --> 00:10:00,399
um in azure as long as it supports

00:09:58,000 --> 00:10:02,880
kubernetes native apis it should just

00:10:00,399 --> 00:10:04,000
work there's some pretty cool things

00:10:02,880 --> 00:10:06,240
being added too

00:10:04,000 --> 00:10:07,279
um automated canary analysis that could

00:10:06,240 --> 00:10:10,079
take months

00:10:07,279 --> 00:10:11,680
uh to build within an organization it's

00:10:10,079 --> 00:10:12,800
built into spinnaker obviously there's

00:10:11,680 --> 00:10:14,800
some work for it

00:10:12,800 --> 00:10:15,839
but uh you get that benefit because

00:10:14,800 --> 00:10:18,240
other people

00:10:15,839 --> 00:10:19,440
again kind of like the paved road have

00:10:18,240 --> 00:10:21,040
found a way a feature

00:10:19,440 --> 00:10:23,839
added it to spinnaker and that you get

00:10:21,040 --> 00:10:23,839
the benefits of it

00:10:24,320 --> 00:10:27,680
um anytime you're doing something with

00:10:26,000 --> 00:10:28,320
an organization you want to make sure it

00:10:27,680 --> 00:10:30,240
has a large

00:10:28,320 --> 00:10:32,000
custom user base and an excellent

00:10:30,240 --> 00:10:33,760
community there's a lot of folks behind

00:10:32,000 --> 00:10:34,959
spinnaker and if you're a contributor

00:10:33,760 --> 00:10:37,279
thank you so much for everything you do

00:10:34,959 --> 00:10:39,200
in the day to day

00:10:37,279 --> 00:10:40,320
um multi-account multi-region and

00:10:39,200 --> 00:10:42,240
multi-cloud

00:10:40,320 --> 00:10:43,519
um it's kind of see in the background

00:10:42,240 --> 00:10:45,440
here we can visualize

00:10:43,519 --> 00:10:48,079
everything in one spot whether your app

00:10:45,440 --> 00:10:50,160
is in kubernetes or your app is in aws

00:10:48,079 --> 00:10:51,760
you can visualize that in one spot which

00:10:50,160 --> 00:10:53,920
is awesome there's no longer you have to

00:10:51,760 --> 00:10:55,600
put multiple lenses on to see everything

00:10:53,920 --> 00:10:57,040
you can see your entire application end

00:10:55,600 --> 00:11:00,800
to end in one spot

00:10:57,040 --> 00:11:03,040
and that's invaluable

00:11:00,800 --> 00:11:04,800
ultimately uh spinnaker allows you to

00:11:03,040 --> 00:11:07,279
visualize your delivery

00:11:04,800 --> 00:11:08,399
uh take basically i mean the way i like

00:11:07,279 --> 00:11:09,839
to describe it is

00:11:08,399 --> 00:11:11,519
you can build a software delivery

00:11:09,839 --> 00:11:13,120
pipeline but it also is

00:11:11,519 --> 00:11:14,880
like a business process pipeline like

00:11:13,120 --> 00:11:17,040
hey the first thing we need to do is

00:11:14,880 --> 00:11:18,160
verify the commit was done by someone

00:11:17,040 --> 00:11:21,040
that's trusted

00:11:18,160 --> 00:11:22,000
um we have to run a automated canary

00:11:21,040 --> 00:11:24,320
scan or something

00:11:22,000 --> 00:11:25,839
after we deploy a quality scan after we

00:11:24,320 --> 00:11:27,519
deploy

00:11:25,839 --> 00:11:29,360
we want to make sure that when we deploy

00:11:27,519 --> 00:11:31,519
it to stage it only has two servers and

00:11:29,360 --> 00:11:33,200
when it goes to prod it has three

00:11:31,519 --> 00:11:34,640
we got all that out of spinnaker right

00:11:33,200 --> 00:11:35,200
out of the box and the best part is it

00:11:34,640 --> 00:11:37,920
was

00:11:35,200 --> 00:11:38,320
click and drop and name some fields and

00:11:37,920 --> 00:11:40,560
boom

00:11:38,320 --> 00:11:42,480
we got it after we all uh connected all

00:11:40,560 --> 00:11:46,000
our accounts together

00:11:42,480 --> 00:11:49,360
so to start we did docker compose

00:11:46,000 --> 00:11:50,480
on ec2 and aws now it's not going to be

00:11:49,360 --> 00:11:51,440
one of those talks where you're going to

00:11:50,480 --> 00:11:53,040
see it like a

00:11:51,440 --> 00:11:54,959
reinvent of sorts of like look at how

00:11:53,040 --> 00:11:56,959
they revolutionize the internet

00:11:54,959 --> 00:11:58,880
no but guess what at the end of the day

00:11:56,959 --> 00:11:59,200
it worked it worked it worked it worked

00:11:58,880 --> 00:12:02,160
and

00:11:59,200 --> 00:12:03,600
it enabled us to slowly build expertise

00:12:02,160 --> 00:12:06,560
in the course of a year

00:12:03,600 --> 00:12:07,839
hey let's what is new in that net core

00:12:06,560 --> 00:12:11,120
hey what is a container

00:12:07,839 --> 00:12:12,720
oh i learned how to do a container and i

00:12:11,120 --> 00:12:13,600
know how to set limits on that container

00:12:12,720 --> 00:12:15,200
now too

00:12:13,600 --> 00:12:17,040
also that's how you pass an environment

00:12:15,200 --> 00:12:18,880
variable got it okay

00:12:17,040 --> 00:12:20,399
that expertise and growth now you're

00:12:18,880 --> 00:12:21,680
becoming subject matter experts and you

00:12:20,399 --> 00:12:22,720
can help build that within your

00:12:21,680 --> 00:12:24,560
organization

00:12:22,720 --> 00:12:26,000
so things like our search and catalog

00:12:24,560 --> 00:12:26,720
we're one of our first pioneers on the

00:12:26,000 --> 00:12:29,200
platform

00:12:26,720 --> 00:12:29,920
a lot of learning a lot of tests on our

00:12:29,200 --> 00:12:31,839
tools

00:12:29,920 --> 00:12:33,680
uh our reels and emails campaign that

00:12:31,839 --> 00:12:36,560
you see on redbox

00:12:33,680 --> 00:12:38,399
were done using this pipeline but the

00:12:36,560 --> 00:12:39,760
best part of it is even extended past

00:12:38,399 --> 00:12:41,120
that to other parts of the organization

00:12:39,760 --> 00:12:44,000
like the data teams

00:12:41,120 --> 00:12:44,320
um and even some of our cdn efforts were

00:12:44,000 --> 00:12:47,279
done

00:12:44,320 --> 00:12:48,399
through spinnaker which is pretty cool

00:12:47,279 --> 00:12:50,320
um

00:12:48,399 --> 00:12:52,000
i did a lot of this talking at spinnaker

00:12:50,320 --> 00:12:53,279
summit 2019 uh

00:12:52,000 --> 00:12:55,360
go ahead and check that talk out but

00:12:53,279 --> 00:12:57,600
basically it looks something like this

00:12:55,360 --> 00:12:58,800
git goes to some ci tool docker

00:12:57,600 --> 00:13:01,839
container gets built

00:12:58,800 --> 00:13:03,760
spinnaker does it and it goes to aws but

00:13:01,839 --> 00:13:05,519
something i do want to mention is

00:13:03,760 --> 00:13:06,000
spinnaker is not only great at doing its

00:13:05,519 --> 00:13:09,440
job well

00:13:06,000 --> 00:13:11,200
it's very extensible and for us

00:13:09,440 --> 00:13:13,519
we use a tool called formats it's an

00:13:11,200 --> 00:13:15,920
open source tool that kind of does two

00:13:13,519 --> 00:13:19,120
things it enables you to

00:13:15,920 --> 00:13:20,800
codify your pipelines as well as gives

00:13:19,120 --> 00:13:22,480
you a way to recreate those pipelines in

00:13:20,800 --> 00:13:24,079
the event of a disaster right if a

00:13:22,480 --> 00:13:25,760
pipeline gets deleted by

00:13:24,079 --> 00:13:27,440
i hate using this example the intern

00:13:25,760 --> 00:13:28,720
right you can go and delete the pipe i

00:13:27,440 --> 00:13:31,279
don't know why they would

00:13:28,720 --> 00:13:33,200
they uh you can recreate that and no

00:13:31,279 --> 00:13:34,959
harm no foul

00:13:33,200 --> 00:13:37,519
in addition to that it also allows you

00:13:34,959 --> 00:13:39,199
to build best practices infrastructure

00:13:37,519 --> 00:13:41,120
with safe defaults remember that concept

00:13:39,199 --> 00:13:44,240
of guardrails not gates that

00:13:41,120 --> 00:13:46,000
you may have been hearing today um

00:13:44,240 --> 00:13:48,000
it comes with built-in guardrails for

00:13:46,000 --> 00:13:50,959
example in stage you may want to say

00:13:48,000 --> 00:13:52,800
i want to have 50 servers well staging

00:13:50,959 --> 00:13:53,440
doesn't need 50 servers it barely uses

00:13:52,800 --> 00:13:56,560
two

00:13:53,440 --> 00:13:58,720
maybe five in load testing right

00:13:56,560 --> 00:14:00,240
uh so it'll kind of put you within

00:13:58,720 --> 00:14:01,199
bounds and provide you that message of

00:14:00,240 --> 00:14:03,279
like hey

00:14:01,199 --> 00:14:04,720
we've adjusted these few parameters this

00:14:03,279 --> 00:14:06,720
is what it's going to do

00:14:04,720 --> 00:14:09,040
but the best part of it is it allows

00:14:06,720 --> 00:14:11,839
engineers to specify what they want

00:14:09,040 --> 00:14:13,040
it allows our delivery teams to specify

00:14:11,839 --> 00:14:15,519
the best practices

00:14:13,040 --> 00:14:16,079
templates take those two together and

00:14:15,519 --> 00:14:17,680
generate

00:14:16,079 --> 00:14:19,519
something that we as a company and as an

00:14:17,680 --> 00:14:21,760
organization understand as

00:14:19,519 --> 00:14:23,120
this is how we deploy this is how

00:14:21,760 --> 00:14:24,880
infrastructure is created

00:14:23,120 --> 00:14:26,240
this is how dns records are created how

00:14:24,880 --> 00:14:27,920
load balancers are created here are the

00:14:26,240 --> 00:14:29,680
options available to you

00:14:27,920 --> 00:14:31,440
um and it's kind of it's kind of nice it

00:14:29,680 --> 00:14:32,639
gives everyone a little bit of piece of

00:14:31,440 --> 00:14:34,240
a pie and it opens the room for

00:14:32,639 --> 00:14:35,519
conversation which is the most important

00:14:34,240 --> 00:14:37,440
part of the entire thing

00:14:35,519 --> 00:14:39,519
why can't i deploy to prod in this

00:14:37,440 --> 00:14:40,720
fashion well you don't meet availability

00:14:39,519 --> 00:14:41,199
targets if you're going to deploy the

00:14:40,720 --> 00:14:43,040
prod

00:14:41,199 --> 00:14:45,760
you better have at least two servers

00:14:43,040 --> 00:14:47,440
because regions go down all the time

00:14:45,760 --> 00:14:50,000
right so things like that can be

00:14:47,440 --> 00:14:51,440
introduced with this

00:14:50,000 --> 00:14:52,959
a lot of these concepts are being done

00:14:51,440 --> 00:14:54,240
with the concept of managed delivery i

00:14:52,959 --> 00:14:55,600
encourage you to check out a talk from

00:14:54,240 --> 00:14:56,880
spinnaker summit 2019

00:14:55,600 --> 00:14:59,199
or just go to the manage delivery

00:14:56,880 --> 00:15:00,639
website um kind of building under the

00:14:59,199 --> 00:15:02,399
this is the official effort of the

00:15:00,639 --> 00:15:04,079
spinnaker community and i think it's

00:15:02,399 --> 00:15:05,279
it's every day it's amazing the efforts

00:15:04,079 --> 00:15:08,000
they're doing on this so definitely

00:15:05,279 --> 00:15:10,480
definitely check this out

00:15:08,000 --> 00:15:11,760
so here we are we did aws we got a few

00:15:10,480 --> 00:15:14,079
apps behind our pipeline we've got

00:15:11,760 --> 00:15:17,199
everyone turning here

00:15:14,079 --> 00:15:19,440
but there's still more

00:15:17,199 --> 00:15:21,199
the mission came down is hey we have one

00:15:19,440 --> 00:15:23,519
year to build

00:15:21,199 --> 00:15:24,399
test and deploy our own on demand

00:15:23,519 --> 00:15:26,160
platform

00:15:24,399 --> 00:15:27,440
and migrate away from an existing white

00:15:26,160 --> 00:15:29,440
label solution

00:15:27,440 --> 00:15:30,720
one had to scale to customer demand and

00:15:29,440 --> 00:15:33,120
be highly available

00:15:30,720 --> 00:15:35,120
so top down multi-region there's no room

00:15:33,120 --> 00:15:36,720
for failure there

00:15:35,120 --> 00:15:38,399
provide a reliable and extensible

00:15:36,720 --> 00:15:39,519
service service communications so all

00:15:38,399 --> 00:15:41,920
the great things you hear

00:15:39,519 --> 00:15:43,440
these talks of we want a canary test we

00:15:41,920 --> 00:15:44,560
want to have controlled rollouts we have

00:15:43,440 --> 00:15:48,480
circuit breakers

00:15:44,560 --> 00:15:50,320
i'm not doing a canary demo don't worry

00:15:48,480 --> 00:15:51,759
we wanted to have that in our platform

00:15:50,320 --> 00:15:52,320
obviously a lot of people are using it

00:15:51,759 --> 00:15:53,759
it's

00:15:52,320 --> 00:15:56,399
it's obviously working for others we

00:15:53,759 --> 00:15:58,240
want to have a piece of that pie too

00:15:56,399 --> 00:16:00,240
and ultimately we wanted to still

00:15:58,240 --> 00:16:01,519
maintain that same concept of empowering

00:16:00,240 --> 00:16:03,440
our engineers to

00:16:01,519 --> 00:16:05,040
have that fast turnaround on features

00:16:03,440 --> 00:16:06,959
and bug fixes again

00:16:05,040 --> 00:16:08,079
provide them the guardrails to do the

00:16:06,959 --> 00:16:10,160
right thing but

00:16:08,079 --> 00:16:11,120
not limit them right the gate is it's

00:16:10,160 --> 00:16:12,480
not really a gate

00:16:11,120 --> 00:16:14,079
it's a rail and if you want to talk

00:16:12,480 --> 00:16:15,440
about it hey let's see what we can do

00:16:14,079 --> 00:16:16,480
like how can we build this and extend

00:16:15,440 --> 00:16:19,920
this platform

00:16:16,480 --> 00:16:23,040
for us as an organization so

00:16:19,920 --> 00:16:24,320
um we just basically decided to move to

00:16:23,040 --> 00:16:26,720
kubernetes for this

00:16:24,320 --> 00:16:28,320
again where we wanted to be we spent a

00:16:26,720 --> 00:16:29,279
lot of time building expertise within

00:16:28,320 --> 00:16:31,839
containers and

00:16:29,279 --> 00:16:32,800
net uh we have a solidified delivery

00:16:31,839 --> 00:16:35,279
platform

00:16:32,800 --> 00:16:37,360
um we added support for kubernetes

00:16:35,279 --> 00:16:40,639
within google cloud

00:16:37,360 --> 00:16:42,079
so day one may and june we're like hey i

00:16:40,639 --> 00:16:45,360
think we got this

00:16:42,079 --> 00:16:47,360
uh yeah we're learning there's probably

00:16:45,360 --> 00:16:49,199
a few typos here and there and

00:16:47,360 --> 00:16:50,959
replicas maybe have been missing or

00:16:49,199 --> 00:16:52,480
specs may have been out of date because

00:16:50,959 --> 00:16:54,160
there's a lot of information out there

00:16:52,480 --> 00:16:55,839
again the organization has never seen

00:16:54,160 --> 00:16:58,480
kubernetes as many of us have

00:16:55,839 --> 00:17:00,240
we all have to start somewhere so you

00:16:58,480 --> 00:17:02,079
know first two months or it's fine

00:17:00,240 --> 00:17:04,240
it's a yaml file deploy the three

00:17:02,079 --> 00:17:05,679
services who cares three services yaml

00:17:04,240 --> 00:17:08,799
cube ctl applied

00:17:05,679 --> 00:17:10,319
good to go and

00:17:08,799 --> 00:17:12,319
we kind of said this is good this is a

00:17:10,319 --> 00:17:14,000
good start we were still able to focus

00:17:12,319 --> 00:17:15,280
on delivering features as a whole for

00:17:14,000 --> 00:17:16,480
the organization

00:17:15,280 --> 00:17:18,799
we weren't really wrestling on the

00:17:16,480 --> 00:17:20,240
laurels but uh we were able to kind of

00:17:18,799 --> 00:17:21,520
say all right we have built this

00:17:20,240 --> 00:17:23,039
infrastructure we could kind of go from

00:17:21,520 --> 00:17:26,160
there but then our

00:17:23,039 --> 00:17:26,559
lovely uh leader fearless leader said

00:17:26,160 --> 00:17:29,039
hey

00:17:26,559 --> 00:17:30,080
hey hey wait we got kubernetes but we're

00:17:29,039 --> 00:17:31,520
not done

00:17:30,080 --> 00:17:32,720
well how do we do that service to

00:17:31,520 --> 00:17:34,080
service stuff that canary stuff that

00:17:32,720 --> 00:17:36,240
we've been talking about

00:17:34,080 --> 00:17:37,679
and for us we looked at a tool called uh

00:17:36,240 --> 00:17:39,440
istio it's a service mesh

00:17:37,679 --> 00:17:41,760
it enables you to do traffic routing

00:17:39,440 --> 00:17:45,200
security observability extensibility

00:17:41,760 --> 00:17:45,200
best part no code

00:17:45,760 --> 00:17:50,400
so like why is ceo um we a colleague of

00:17:48,559 --> 00:17:51,440
mine lynn and myself we presented this

00:17:50,400 --> 00:17:52,880
at a meet up uh

00:17:51,440 --> 00:17:54,960
i'll share this as well after the

00:17:52,880 --> 00:17:56,960
session i'm not gonna go too much into

00:17:54,960 --> 00:17:58,400
how istio works but the best part is is

00:17:56,960 --> 00:17:59,120
that it gave us fine green control of

00:17:58,400 --> 00:18:00,320
traffic

00:17:59,120 --> 00:18:02,400
we're able to do routing rules and

00:18:00,320 --> 00:18:04,320
retries and failovers

00:18:02,400 --> 00:18:06,480
there's a policy layer we could do rate

00:18:04,320 --> 00:18:07,360
limits uh service to service

00:18:06,480 --> 00:18:10,160
communication

00:18:07,360 --> 00:18:11,919
was done via proxies so the best part of

00:18:10,160 --> 00:18:13,360
it it gives you observability so things

00:18:11,919 --> 00:18:14,960
like open tracing

00:18:13,360 --> 00:18:16,720
logs you don't have to write that

00:18:14,960 --> 00:18:17,280
anymore i mean you can still extend on

00:18:16,720 --> 00:18:20,080
it

00:18:17,280 --> 00:18:21,679
obviously but it is out of the box and

00:18:20,080 --> 00:18:24,080
you can grow and build your application

00:18:21,679 --> 00:18:25,919
expertise like that over time

00:18:24,080 --> 00:18:27,200
so we had it all right we had kubernetes

00:18:25,919 --> 00:18:28,000
we added a seo we're able to do the

00:18:27,200 --> 00:18:30,320
canary the demo

00:18:28,000 --> 00:18:31,120
that we all see then the question came

00:18:30,320 --> 00:18:34,080
out and say hey

00:18:31,120 --> 00:18:36,000
hey hey hey cool canaries i've seen the

00:18:34,080 --> 00:18:37,919
youtube video i got that

00:18:36,000 --> 00:18:39,919
what about multi-region wait wait

00:18:37,919 --> 00:18:41,360
customers are in the east coast and the

00:18:39,919 --> 00:18:42,720
west coast and they're central

00:18:41,360 --> 00:18:44,720
how do we get them to have a fast

00:18:42,720 --> 00:18:45,840
response to our platform well you know

00:18:44,720 --> 00:18:46,960
this is where we kind of look we're like

00:18:45,840 --> 00:18:48,559
yeah

00:18:46,960 --> 00:18:50,240
istio added some yaml it's getting a

00:18:48,559 --> 00:18:52,240
little annoying

00:18:50,240 --> 00:18:54,000
oh wait wait wait two clusters how do we

00:18:52,240 --> 00:18:56,080
do this

00:18:54,000 --> 00:18:57,280
um and for that we basically turned to

00:18:56,080 --> 00:18:59,679
spinnaker again

00:18:57,280 --> 00:19:00,320
making deployments boring again we took

00:18:59,679 --> 00:19:02,880
a

00:19:00,320 --> 00:19:04,799
git commit we bake a template and helm

00:19:02,880 --> 00:19:06,720
container gets built spinnaker sees this

00:19:04,799 --> 00:19:09,679
and ultimately deploys that to an

00:19:06,720 --> 00:19:10,880
uh east cluster and a west cluster um

00:19:09,679 --> 00:19:13,840
it's a little boring but

00:19:10,880 --> 00:19:15,520
that's what it is and it works um so

00:19:13,840 --> 00:19:17,200
basically a better part of the remainder

00:19:15,520 --> 00:19:18,240
of the year was spent on pipeline tuning

00:19:17,200 --> 00:19:20,240
and templates

00:19:18,240 --> 00:19:21,919
so we wanted to create pipelines per

00:19:20,240 --> 00:19:23,120
region so you can deploy to each region

00:19:21,919 --> 00:19:25,120
individually

00:19:23,120 --> 00:19:26,960
we wanted to take all the ammo and break

00:19:25,120 --> 00:19:29,120
it down into individual steps

00:19:26,960 --> 00:19:30,480
this step is doing istio this step is

00:19:29,120 --> 00:19:32,799
deploying this step is running

00:19:30,480 --> 00:19:34,640
integration tests

00:19:32,799 --> 00:19:36,240
we wanted to tr we added ability to

00:19:34,640 --> 00:19:36,960
trace changes all the way down to git

00:19:36,240 --> 00:19:39,200
commits

00:19:36,960 --> 00:19:40,640
that is awesome there's there's been

00:19:39,200 --> 00:19:41,360
countless times that we've been able to

00:19:40,640 --> 00:19:43,440
find

00:19:41,360 --> 00:19:44,880
where exactly down to the line of code

00:19:43,440 --> 00:19:45,600
has introduced a regression in our

00:19:44,880 --> 00:19:46,960
system

00:19:45,600 --> 00:19:48,400
why does this call go up to 10

00:19:46,960 --> 00:19:50,160
milliseconds well it looks like we're

00:19:48,400 --> 00:19:52,799
not cashing that redis call

00:19:50,160 --> 00:19:53,919
well let's go ahead and re-add that back

00:19:52,799 --> 00:19:56,559
um

00:19:53,919 --> 00:19:57,120
visualization and changes spinnaker

00:19:56,559 --> 00:19:58,799
again

00:19:57,120 --> 00:20:00,400
spinnaker provides you the ability to

00:19:58,799 --> 00:20:01,760
view your entire infrastructure we

00:20:00,400 --> 00:20:03,280
extended a lot of this

00:20:01,760 --> 00:20:04,640
via formats again not going to talk

00:20:03,280 --> 00:20:06,720
about it here but definitely check out

00:20:04,640 --> 00:20:08,480
the project

00:20:06,720 --> 00:20:09,840
it eliminated that guessing game there's

00:20:08,480 --> 00:20:12,000
no more how do we deploy as an

00:20:09,840 --> 00:20:15,360
organization there was no more

00:20:12,000 --> 00:20:18,000
cube ctl apply start thank you please uh

00:20:15,360 --> 00:20:18,640
east versus west we simplified a lot of

00:20:18,000 --> 00:20:20,320
this because

00:20:18,640 --> 00:20:21,600
developers don't really should care

00:20:20,320 --> 00:20:22,880
about those details not because they

00:20:21,600 --> 00:20:24,000
don't understand it or they won't

00:20:22,880 --> 00:20:26,159
understand it but really

00:20:24,000 --> 00:20:27,440
they shouldn't need to an engineer would

00:20:26,159 --> 00:20:27,919
love the day where they could just

00:20:27,440 --> 00:20:30,000
commit

00:20:27,919 --> 00:20:32,000
code and hit a button and it's out the

00:20:30,000 --> 00:20:33,600
door that's what we wanted to deliver

00:20:32,000 --> 00:20:35,679
you kind of see that on the screenshot

00:20:33,600 --> 00:20:38,000
here on the left

00:20:35,679 --> 00:20:39,679
and the results is after all this we

00:20:38,000 --> 00:20:41,760
nearly doubled our deployments within

00:20:39,679 --> 00:20:43,200
spinnaker uh you can see here in june to

00:20:41,760 --> 00:20:45,280
basically october

00:20:43,200 --> 00:20:47,520
uh the conversations also slowly shifted

00:20:45,280 --> 00:20:48,080
to how do we deploy how was this tested

00:20:47,520 --> 00:20:49,360
to

00:20:48,080 --> 00:20:50,880
how can we add that new feature how do

00:20:49,360 --> 00:20:52,720
we fix that regression that spinnaker

00:20:50,880 --> 00:20:54,159
caught like through the automated tests

00:20:52,720 --> 00:20:55,360
which is actually pretty cool it's uh

00:20:54,159 --> 00:20:56,559
it's pretty cool to see in the

00:20:55,360 --> 00:20:57,840
transformation seeing this

00:20:56,559 --> 00:20:59,919
happen in front of your eyes so the

00:20:57,840 --> 00:21:01,760
results of your work

00:20:59,919 --> 00:21:03,440
it allowed us to focus back on core

00:21:01,760 --> 00:21:04,240
requirements so we were able to invest

00:21:03,440 --> 00:21:06,000
in things like

00:21:04,240 --> 00:21:07,520
a global load balancer we knew our

00:21:06,000 --> 00:21:09,600
customers had to be in multiple regions

00:21:07,520 --> 00:21:11,840
and we wanted to build that solution

00:21:09,600 --> 00:21:12,640
we were able to do things like test

00:21:11,840 --> 00:21:14,960
fail-over

00:21:12,640 --> 00:21:16,559
destroy the east region and destroy the

00:21:14,960 --> 00:21:18,480
central region and let's

00:21:16,559 --> 00:21:19,840
shift all the traffic to the west uh you

00:21:18,480 --> 00:21:20,720
see a lot of great demos from all the

00:21:19,840 --> 00:21:22,640
great companies

00:21:20,720 --> 00:21:24,320
but being able to do this and invest in

00:21:22,640 --> 00:21:24,960
things that are not so much tied to the

00:21:24,320 --> 00:21:26,720
deployment

00:21:24,960 --> 00:21:29,360
but rather delivering value to our

00:21:26,720 --> 00:21:31,840
customer um and happy to say that

00:21:29,360 --> 00:21:33,440
it did work in october it was like our

00:21:31,840 --> 00:21:36,000
first internal demo of

00:21:33,440 --> 00:21:36,720
yes our multi-region infrastructure and

00:21:36,000 --> 00:21:38,559
everything is

00:21:36,720 --> 00:21:40,080
works uh and we're really happy and

00:21:38,559 --> 00:21:40,960
that's kind of a some of the team

00:21:40,080 --> 00:21:44,400
members involved

00:21:40,960 --> 00:21:46,799
and me and the red in the back um

00:21:44,400 --> 00:21:48,480
so we had so we got it we have spinnaker

00:21:46,799 --> 00:21:50,240
we have developer driven ci cd we're

00:21:48,480 --> 00:21:52,080
done right

00:21:50,240 --> 00:21:54,240
wait how do we actually cut over how do

00:21:52,080 --> 00:21:56,720
we monitor this stuff

00:21:54,240 --> 00:21:58,400
so in january through february uh we had

00:21:56,720 --> 00:21:59,760
to build a custom routing later

00:21:58,400 --> 00:22:01,280
because again we're moving from a wet

00:21:59,760 --> 00:22:03,360
label solution but we're not just gonna

00:22:01,280 --> 00:22:05,360
up and lift and move away from it

00:22:03,360 --> 00:22:07,440
we had to build that custom layer to

00:22:05,360 --> 00:22:09,440
ensure availability of multiple regions

00:22:07,440 --> 00:22:10,960
we had to make sure we had stability we

00:22:09,440 --> 00:22:12,480
had to route traffic to our platform

00:22:10,960 --> 00:22:14,880
versus the white label solution

00:22:12,480 --> 00:22:16,480
safe and gradual rollouts we wanted to

00:22:14,880 --> 00:22:17,919
canary within our deployments right it

00:22:16,480 --> 00:22:19,919
wasn't so much just a and b

00:22:17,919 --> 00:22:21,280
it was a and b and then within our

00:22:19,919 --> 00:22:22,799
platform a and b

00:22:21,280 --> 00:22:24,400
as well like hey does the new deployment

00:22:22,799 --> 00:22:26,000
work better or worse

00:22:24,400 --> 00:22:27,440
and ultimately we have to sync customer

00:22:26,000 --> 00:22:29,120
data we don't want them to

00:22:27,440 --> 00:22:30,799
even know that we're cutting over which

00:22:29,120 --> 00:22:32,559
the customer shouldn't care that we move

00:22:30,799 --> 00:22:34,320
their back end

00:22:32,559 --> 00:22:35,840
um this is just kind of a quick slide

00:22:34,320 --> 00:22:37,760
but basically some of the complexities

00:22:35,840 --> 00:22:39,679
we had the global data back in there

00:22:37,760 --> 00:22:41,760
we had to worry about whether to go the

00:22:39,679 --> 00:22:43,520
white label solution or our platform

00:22:41,760 --> 00:22:45,280
a lot of things in syncing data as you

00:22:43,520 --> 00:22:47,200
can imagine so definitely a lot of work

00:22:45,280 --> 00:22:49,120
involved in that short window

00:22:47,200 --> 00:22:50,480
february through march we spent a lot of

00:22:49,120 --> 00:22:52,000
time doing things like grifano

00:22:50,480 --> 00:22:53,679
prometheus and thanos that wasn't to say

00:22:52,000 --> 00:22:55,600
they weren't there from the beginning

00:22:53,679 --> 00:22:57,679
but investing in that and making sure we

00:22:55,600 --> 00:22:59,280
tuned because we got a lot of load

00:22:57,679 --> 00:23:00,640
uh through the recent circumstances we

00:22:59,280 --> 00:23:02,320
wanted to make sure that our metrics and

00:23:00,640 --> 00:23:04,320
everything kept upstairs

00:23:02,320 --> 00:23:06,159
we invested in things like open tracing

00:23:04,320 --> 00:23:07,120
open tracing is awesome and if you have

00:23:06,159 --> 00:23:09,360
not

00:23:07,120 --> 00:23:11,039
used it yet consider it being able to

00:23:09,360 --> 00:23:12,400
trace a call going into your system and

00:23:11,039 --> 00:23:15,280
going out of your system is

00:23:12,400 --> 00:23:17,120
awesome it's great logs loki and

00:23:15,280 --> 00:23:18,720
stackdriver and the best part is a lot

00:23:17,120 --> 00:23:19,520
of this is open source we wanted just

00:23:18,720 --> 00:23:21,600
how we want to have an

00:23:19,520 --> 00:23:23,360
open source culture inside the company

00:23:21,600 --> 00:23:26,799
we love using and supporting open source

00:23:23,360 --> 00:23:29,440
tools within the company as well

00:23:26,799 --> 00:23:30,880
and then april through may 2020 we had

00:23:29,440 --> 00:23:32,799
our tuning and cut over

00:23:30,880 --> 00:23:35,280
two systems were running in parallel a b

00:23:32,799 --> 00:23:37,039
testing as i mentioned earlier

00:23:35,280 --> 00:23:38,720
we had things like increased load due to

00:23:37,039 --> 00:23:40,240
the circumstances i mentioned this but

00:23:38,720 --> 00:23:42,159
five percent of traffic of our normal

00:23:40,240 --> 00:23:43,279
traffic quickly became 10 to 15 percent

00:23:42,159 --> 00:23:44,799
of our traffic

00:23:43,279 --> 00:23:47,279
because more people are at home watching

00:23:44,799 --> 00:23:49,039
movies um and ultimately it was a lot of

00:23:47,279 --> 00:23:50,960
under the gun capacity tuning and

00:23:49,039 --> 00:23:52,400
resources and planning and through the

00:23:50,960 --> 00:23:55,679
there was a lot of hard deadlines

00:23:52,400 --> 00:23:57,039
contractually but

00:23:55,679 --> 00:23:58,400
all in all i don't have a good picture

00:23:57,039 --> 00:24:00,640
because we're all at home and doing this

00:23:58,400 --> 00:24:02,240
work but we did it and mission success

00:24:00,640 --> 00:24:04,640
in may 2020 and it would not have been

00:24:02,240 --> 00:24:08,000
possible without spinnaker

00:24:04,640 --> 00:24:09,600
so in summary does it work i'll let the

00:24:08,000 --> 00:24:11,760
numbers do the details there

00:24:09,600 --> 00:24:13,520
over 1800 deployments a month it's

00:24:11,760 --> 00:24:15,600
pretty cool

00:24:13,520 --> 00:24:17,600
takeaways are build a culture of

00:24:15,600 --> 00:24:20,000
empowering engineers to own their code

00:24:17,600 --> 00:24:21,279
you build it you run it don't let

00:24:20,000 --> 00:24:23,520
perfect be the enemy a good

00:24:21,279 --> 00:24:24,960
start small and iterate as you go the

00:24:23,520 --> 00:24:28,000
journey is more important

00:24:24,960 --> 00:24:30,080
building that expertise and growth is

00:24:28,000 --> 00:24:32,080
more important

00:24:30,080 --> 00:24:34,080
automation does not mean compromising

00:24:32,080 --> 00:24:36,080
availability and quality security

00:24:34,080 --> 00:24:37,440
provide your developers guard rails to

00:24:36,080 --> 00:24:40,720
do what they want

00:24:37,440 --> 00:24:42,559
don't lock them into this into gates

00:24:40,720 --> 00:24:44,400
give them safe defaults and enforce

00:24:42,559 --> 00:24:46,320
standards and ultimately

00:24:44,400 --> 00:24:47,600
out of this talk i hope you can see that

00:24:46,320 --> 00:24:49,039
spinnaker is pretty cool and pretty

00:24:47,600 --> 00:24:51,039
awesome

00:24:49,039 --> 00:24:53,120
um with that being said i do want to

00:24:51,039 --> 00:24:54,559
shoot a shout out to our tech blog

00:24:53,120 --> 00:24:56,640
we post from there from time to time so

00:24:54,559 --> 00:24:58,880
feel free to check that out

00:24:56,640 --> 00:25:00,240
and thank you so much again there's my

00:24:58,880 --> 00:25:03,279
contact details

00:25:00,240 --> 00:25:04,799
um i think we'll have a trivia slide so

00:25:03,279 --> 00:25:06,640
put your answer in the chat function

00:25:04,799 --> 00:25:08,559
here in a second uh make sure you

00:25:06,640 --> 00:25:10,000
connect the funds via slack and twitter

00:25:08,559 --> 00:25:11,279
and ultimately thank you so much for

00:25:10,000 --> 00:25:12,720
attending my talk i know there's a lot

00:25:11,279 --> 00:25:13,120
of things you can do for your time so i

00:25:12,720 --> 00:25:14,960
do

00:25:13,120 --> 00:25:16,240
truly appreciate that and i hope that

00:25:14,960 --> 00:25:17,679
you enjoyed the spinnaker

00:25:16,240 --> 00:25:21,440
uh the rest of the spinnaker live event

00:25:17,679 --> 00:25:21,440
today and have a great one

00:25:26,840 --> 00:25:29,840
bye

00:25:34,320 --> 00:25:36,400

YouTube URL: https://www.youtube.com/watch?v=Mj1i_yqmrLM


