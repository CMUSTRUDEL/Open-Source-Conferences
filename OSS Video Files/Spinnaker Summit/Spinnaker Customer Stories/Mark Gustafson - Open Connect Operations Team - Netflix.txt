Title: Mark Gustafson - Open Connect Operations Team - Netflix
Publication date: 2018-11-15
Playlist: Spinnaker Customer Stories
Description: 
	Discuss how the open connect operations team uses Spinnaker within Netflix.
Captions: 
	00:00:01,919 --> 00:00:06,790
it's Jody a sea of armory I'm here with

00:00:04,779 --> 00:00:08,559
mark introduce yourself I'm mark

00:00:06,790 --> 00:00:11,860
gustafson I work on the open connect

00:00:08,559 --> 00:00:13,690
operations team within Netflix so we've

00:00:11,860 --> 00:00:15,610
got a very interesting use case for

00:00:13,690 --> 00:00:17,410
spinnaker mate maybe you can just kind

00:00:15,610 --> 00:00:18,550
of set the stage a little bit you're not

00:00:17,410 --> 00:00:20,080
actually on the team developing

00:00:18,550 --> 00:00:21,160
spinnaker you're usually replicating

00:00:20,080 --> 00:00:23,320
that that's correct

00:00:21,160 --> 00:00:26,560
so we we work with the spinnaker team

00:00:23,320 --> 00:00:29,380
obviously inside of Netflix and what my

00:00:26,560 --> 00:00:31,570
team does is we operate manage the

00:00:29,380 --> 00:00:33,700
thousands of open connect appliance is

00:00:31,570 --> 00:00:35,620
which are caching servers that actually

00:00:33,700 --> 00:00:37,600
support the video delivery and we have

00:00:35,620 --> 00:00:39,550
that as distributed as we possibly can

00:00:37,600 --> 00:00:41,320
around the world because we want to get

00:00:39,550 --> 00:00:42,970
as close to all the end-user devices as

00:00:41,320 --> 00:00:45,790
we possibly can so this is a

00:00:42,970 --> 00:00:47,740
tremendously distributed network very

00:00:45,790 --> 00:00:49,510
dense in some places very sparse in

00:00:47,740 --> 00:00:51,520
others because again some of the actual

00:00:49,510 --> 00:00:55,239
networks that we reach into are very

00:00:51,520 --> 00:00:57,820
very you know basically the tail end of

00:00:55,239 --> 00:00:59,680
density as you approach here and our net

00:00:57,820 --> 00:01:01,090
connections so in some cases we do have

00:00:59,680 --> 00:01:04,150
places that are having very few even

00:01:01,090 --> 00:01:06,250
down to just one single appliance that

00:01:04,150 --> 00:01:07,510
is closest now there's never a single

00:01:06,250 --> 00:01:09,490
point of failure in terminating you've

00:01:07,510 --> 00:01:12,460
got multiple options but you'll have

00:01:09,490 --> 00:01:14,110
that best single optimal appliance and

00:01:12,460 --> 00:01:15,820
so how we manage that physical

00:01:14,110 --> 00:01:17,830
infrastructure obviously is very

00:01:15,820 --> 00:01:20,710
different than how we manage our very

00:01:17,830 --> 00:01:24,010
fungible virtual instances inside of AWS

00:01:20,710 --> 00:01:25,780
so extending spinnaker to do that was

00:01:24,010 --> 00:01:27,790
definitely an interesting challenge and

00:01:25,780 --> 00:01:29,680
that's what we worked with the spinnaker

00:01:27,790 --> 00:01:33,430
team to take that on over the last year

00:01:29,680 --> 00:01:35,380
and we felt that being able to again

00:01:33,430 --> 00:01:37,869
move on to a platform because we've been

00:01:35,380 --> 00:01:40,150
managing the open connect infrastructure

00:01:37,869 --> 00:01:42,640
at scale for a number of years already

00:01:40,150 --> 00:01:44,799
but as we continue to scale up we could

00:01:42,640 --> 00:01:46,360
see that the complexity of managing and

00:01:44,799 --> 00:01:49,030
continuing to basically own that code

00:01:46,360 --> 00:01:50,110
inside of our own team was simply going

00:01:49,030 --> 00:01:51,550
to be

00:01:50,110 --> 00:01:53,320
more and more challenges it would

00:01:51,550 --> 00:01:55,360
require more and more maintenance effort

00:01:53,320 --> 00:01:57,640
and especially we were looking at having

00:01:55,360 --> 00:02:01,150
to go through migration efforts from

00:01:57,640 --> 00:02:04,060
some of our legacy API sets to whole new

00:02:01,150 --> 00:02:05,440
sets of api's and at that point again we

00:02:04,060 --> 00:02:07,330
were talking to the spinnaker team and

00:02:05,440 --> 00:02:09,010
it was very obvious that spinnaker

00:02:07,330 --> 00:02:11,200
obviously gets a lot of support and has

00:02:09,010 --> 00:02:12,970
taken on a great amount of momentum both

00:02:11,200 --> 00:02:15,160
inside Netflix and in the broader

00:02:12,970 --> 00:02:17,590
community and so we were gonna get a lot

00:02:15,160 --> 00:02:19,870
of benefit by if we were going to change

00:02:17,590 --> 00:02:21,150
our foundation to move to a foundation

00:02:19,870 --> 00:02:23,290
that was going to get a lot of great

00:02:21,150 --> 00:02:25,480
added bang for the buck right out the

00:02:23,290 --> 00:02:28,360
gate and do nothing but help us grow

00:02:25,480 --> 00:02:30,430
over time without a ton of our own

00:02:28,360 --> 00:02:33,100
development effort so this is a very

00:02:30,430 --> 00:02:34,360
very interesting use case that for those

00:02:33,100 --> 00:02:36,700
watching that are not as familiar with

00:02:34,360 --> 00:02:38,620
spinnaker just gonna kind of play back

00:02:36,700 --> 00:02:41,020
what I when I heard you say so

00:02:38,620 --> 00:02:42,790
spinnaker typically has cloud drivers to

00:02:41,020 --> 00:02:46,480
be able to deploy out to its AWS with

00:02:42,790 --> 00:02:48,340
UCP days etc within Netflix you have

00:02:46,480 --> 00:02:50,440
actually created a deployment target

00:02:48,340 --> 00:02:54,040
with these fiscal boxes that are yes

00:02:50,440 --> 00:02:55,750
your CDN basically for you and you're

00:02:54,040 --> 00:02:59,140
using spinnaker to actually deploy

00:02:55,750 --> 00:03:01,660
software onto those boxes yes and and

00:02:59,140 --> 00:03:03,990
how much work was it for you to create

00:03:01,660 --> 00:03:06,660
that that deployment target and

00:03:03,990 --> 00:03:08,400
and who did that work most of that work

00:03:06,660 --> 00:03:10,200
actually was done within the spinnaker

00:03:08,400 --> 00:03:12,960
development team it was basically about

00:03:10,200 --> 00:03:15,120
a quarters worth of work in the q1 of

00:03:12,960 --> 00:03:16,470
this year we helped to define the

00:03:15,120 --> 00:03:19,820
requirements and obviously we've done

00:03:16,470 --> 00:03:22,560
the testing and things since then we did

00:03:19,820 --> 00:03:25,650
part of the migration also was migrating

00:03:22,560 --> 00:03:27,540
underlying API data sets that again we

00:03:25,650 --> 00:03:29,790
had to synchronize them up in terms of I

00:03:27,540 --> 00:03:32,700
heard you away from a legacy API set to

00:03:29,790 --> 00:03:35,040
the new API set so that has created some

00:03:32,700 --> 00:03:37,770
delay in terms of what was ready for us

00:03:35,040 --> 00:03:39,720
to to call within the spinnaker

00:03:37,770 --> 00:03:42,120
infrastructure but basically it was

00:03:39,720 --> 00:03:44,460
effectively you know an engineer for

00:03:42,120 --> 00:03:46,830
again I'm not sure exactly how many dev

00:03:44,460 --> 00:03:49,560
weeks they were spent on it but it'd be

00:03:46,830 --> 00:03:51,000
something less than 10 yeah less than 10

00:03:49,560 --> 00:03:52,980
deaf weeks in terms of doing the

00:03:51,000 --> 00:03:54,870
extension and the integration and

00:03:52,980 --> 00:03:57,360
obviously now where you continue to go

00:03:54,870 --> 00:03:58,860
on through testing and you know a few

00:03:57,360 --> 00:04:00,180
minor feature changes from your on out

00:03:58,860 --> 00:04:02,880
it's amazing and now you're getting all

00:04:00,180 --> 00:04:04,530
the benefits of spinnaker absolutely

00:04:02,880 --> 00:04:06,480
that's right and we're looking forward

00:04:04,530 --> 00:04:09,300
to you being able to retire our again

00:04:06,480 --> 00:04:10,830
very vast mesh of Python scripts and

00:04:09,300 --> 00:04:14,700
everything like that is good polishing

00:04:10,830 --> 00:04:16,470
tape it's a yes is much easier as an

00:04:14,700 --> 00:04:17,970
operator and as an engineer in terms of

00:04:16,470 --> 00:04:19,980
understanding exactly what's happening

00:04:17,970 --> 00:04:22,140
through our firmware rollouts it's a

00:04:19,980 --> 00:04:23,640
much improved experience in terms of

00:04:22,140 --> 00:04:25,200
again understanding the state and your

00:04:23,640 --> 00:04:27,750
fate the state of all your patches all

00:04:25,200 --> 00:04:29,700
your stages visualize the infrastructure

00:04:27,750 --> 00:04:30,960
I can imagine that yeah and again these

00:04:29,700 --> 00:04:32,910
are all things that were possible

00:04:30,960 --> 00:04:35,220
already in terms of you know we'd be

00:04:32,910 --> 00:04:36,240
logging all of our actions etc etc but

00:04:35,220 --> 00:04:38,250
you'd have to be going back and

00:04:36,240 --> 00:04:40,680
effectively doing your own research and

00:04:38,250 --> 00:04:42,180
analysis based on logs as opposed to all

00:04:40,680 --> 00:04:45,420
the events being tracked in spinnaker

00:04:42,180 --> 00:04:46,900
and available to expose trivially and so

00:04:45,420 --> 00:04:49,120
does Netflix

00:04:46,900 --> 00:04:52,120
mandates that you use this tool or not

00:04:49,120 --> 00:04:54,850
at all so this is where again we had our

00:04:52,120 --> 00:04:57,070
own tools or many groups within Netflix

00:04:54,850 --> 00:04:59,259
that may still use some of their own

00:04:57,070 --> 00:05:01,180
homegrown scripts for a variety of use

00:04:59,259 --> 00:05:03,940
cases again they're kind of off the

00:05:01,180 --> 00:05:06,669
beaten path but we do have this concept

00:05:03,940 --> 00:05:09,039
of paved path which is you know this is

00:05:06,669 --> 00:05:12,310
something that has a lot of support

00:05:09,039 --> 00:05:14,830
again it's well traveled and you know if

00:05:12,310 --> 00:05:16,600
you choose to use the paper path you're

00:05:14,830 --> 00:05:18,370
gonna basically get a lot of people

00:05:16,600 --> 00:05:19,990
pulling with you and we definitely

00:05:18,370 --> 00:05:26,500
didn't feel like that was worth it but

00:05:19,990 --> 00:05:29,729
it's the function of must fit round peg

00:05:26,500 --> 00:05:33,220
in a square hole it's a matter of

00:05:29,729 --> 00:05:35,320
basically why not use it number one and

00:05:33,220 --> 00:05:36,940
a number two when is when is the right

00:05:35,320 --> 00:05:39,430
point to a donkey which again we could

00:05:36,940 --> 00:05:41,440
have had this conversation even three

00:05:39,430 --> 00:05:43,389
years ago and again it might have been

00:05:41,440 --> 00:05:44,860
premature at that point but at this

00:05:43,389 --> 00:05:47,470
point in terms of both the evolution of

00:05:44,860 --> 00:05:50,169
spinnaker itself and also our evolution

00:05:47,470 --> 00:05:52,419
in terms of what we had to do to shift

00:05:50,169 --> 00:05:54,220
the way we do for we're updates it

00:05:52,419 --> 00:05:56,139
really came together and basically

00:05:54,220 --> 00:05:58,510
that's the right thing to do at the

00:05:56,139 --> 00:06:00,729
right time so if I'm the cloud architect

00:05:58,510 --> 00:06:02,470
maybe I'm responsible for for the cloud

00:06:00,729 --> 00:06:05,590
transformation journey of a company and

00:06:02,470 --> 00:06:06,919
I have a non-standard target maybe it's

00:06:05,590 --> 00:06:09,650
to be able to

00:06:06,919 --> 00:06:11,659
right you know what migrate out of data

00:06:09,650 --> 00:06:14,379
centers into the cloud and I want to

00:06:11,659 --> 00:06:15,699
actually build some kind of a

00:06:14,379 --> 00:06:17,930
non-standard

00:06:15,699 --> 00:06:19,370
interfacing what right what are some of

00:06:17,930 --> 00:06:21,979
the things that I should be thinking

00:06:19,370 --> 00:06:23,870
about or any lessons learned or pro tips

00:06:21,979 --> 00:06:26,210
or best practices there well definitely

00:06:23,870 --> 00:06:28,219
you know get an opinion on what your use

00:06:26,210 --> 00:06:30,680
case is if if your targets are not

00:06:28,219 --> 00:06:32,449
purely virtual machines then again you

00:06:30,680 --> 00:06:34,879
will have a lot of considerations around

00:06:32,449 --> 00:06:37,639
your stateful transitions whether you do

00:06:34,879 --> 00:06:39,319
actually have physical impacts of you

00:06:37,639 --> 00:06:41,300
know getting a non-responsive piece of

00:06:39,319 --> 00:06:42,919
infrastructure it's very different from

00:06:41,300 --> 00:06:46,550
a virtual machine that did I just kid

00:06:42,919 --> 00:06:48,680
exactly and so having that layer of

00:06:46,550 --> 00:06:50,360
checking and redundancy and again phased

00:06:48,680 --> 00:06:53,569
rollout and all of those types of things

00:06:50,360 --> 00:06:54,590
become that much more important all

00:06:53,569 --> 00:06:57,480
right with that thank you for the time

00:06:54,590 --> 00:07:01,759
it's a very insane use case thank you

00:06:57,480 --> 00:07:01,759

YouTube URL: https://www.youtube.com/watch?v=LxwKTXUq3Hg


