Title: Raji Chokaiyan, Capital One
Publication date: 2018-10-27
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:04,890
how is everyone this morning awesome

00:00:03,240 --> 00:00:07,350
I will try to make it less painful

00:00:04,890 --> 00:00:10,110
because it's about complains and how we

00:00:07,350 --> 00:00:14,160
are achieving complaints gates in

00:00:10,110 --> 00:00:16,529
Capital One every story has a why how

00:00:14,160 --> 00:00:19,410
and start that is Simon's Magic Circle

00:00:16,529 --> 00:00:21,600
isn't it and ours do too and today I'm

00:00:19,410 --> 00:00:24,420
going to share with you our story in

00:00:21,600 --> 00:00:26,779
which we achieved the full potential of

00:00:24,420 --> 00:00:31,520
an engineering organization through

00:00:26,779 --> 00:00:34,860
automated and compliant deployments and

00:00:31,520 --> 00:00:37,290
I'm Raja choken thanks for the very nice

00:00:34,860 --> 00:00:39,180
introduction Pete I am director of

00:00:37,290 --> 00:00:41,520
software engineering in Capital One I

00:00:39,180 --> 00:00:43,320
lead cloud platform tools and I'm very

00:00:41,520 --> 00:00:47,700
very humbled to be here amongst this

00:00:43,320 --> 00:00:50,010
wonderful brains and developers thank

00:00:47,700 --> 00:00:54,719
you for this opportunity let's talk

00:00:50,010 --> 00:00:57,480
about why have you guys scared of

00:00:54,719 --> 00:01:00,030
Conway's law how many of you know about

00:00:57,480 --> 00:01:03,030
Conway's law of course the devil DevOps

00:01:00,030 --> 00:01:10,080
Ummat right so I'm going to let you read

00:01:03,030 --> 00:01:13,110
it for a minute in simpler terms any

00:01:10,080 --> 00:01:16,530
software reflects the organizational

00:01:13,110 --> 00:01:19,020
structure that produces it in 1968

00:01:16,530 --> 00:01:21,360
Melvin Conway in his thesis talks about

00:01:19,020 --> 00:01:23,880
how organizational structure and the

00:01:21,360 --> 00:01:26,070
communication between the team's impact

00:01:23,880 --> 00:01:30,299
the software that produced that gets

00:01:26,070 --> 00:01:33,840
produced fire decades later I do have

00:01:30,299 --> 00:01:37,170
real-life example in my own space where

00:01:33,840 --> 00:01:39,720
I have two products apart from spinnaker

00:01:37,170 --> 00:01:41,600
my my team supports two of the other

00:01:39,720 --> 00:01:44,610
products one is an infrastructure

00:01:41,600 --> 00:01:47,220
provisioning tool the other one is chaos

00:01:44,610 --> 00:01:49,020
engineering - just for the record it is

00:01:47,220 --> 00:01:51,450
not the customized version of chaos

00:01:49,020 --> 00:01:53,549
monkey it's our own homegrown case

00:01:51,450 --> 00:01:55,890
engineering solution so the

00:01:53,549 --> 00:01:59,700
infrastructure provisioning tool is

00:01:55,890 --> 00:02:02,130
built by the team my own team they are

00:01:59,700 --> 00:02:05,159
all SMEs they knew how the

00:02:02,130 --> 00:02:07,409
infrastructure works in and out of tech

00:02:05,159 --> 00:02:10,379
in Capital One how everything is laid

00:02:07,409 --> 00:02:12,420
out the team dynamics what is needed

00:02:10,379 --> 00:02:15,380
across the organization

00:02:12,420 --> 00:02:19,080
knew it so they built this awesome tool

00:02:15,380 --> 00:02:22,260
and it is adopted across the

00:02:19,080 --> 00:02:24,540
organization by 700 teams in two years

00:02:22,260 --> 00:02:27,450
that option skyrocketed now two years

00:02:24,540 --> 00:02:30,090
later we are looking at it because the

00:02:27,450 --> 00:02:32,640
support always grows us as their option

00:02:30,090 --> 00:02:34,739
grows right and we are trying to remove

00:02:32,640 --> 00:02:37,920
the bottleneck and we are trying to see

00:02:34,739 --> 00:02:40,860
how we can make it more pluggable more

00:02:37,920 --> 00:02:43,880
maintainable and refactor it what we are

00:02:40,860 --> 00:02:48,300
finding out is it is just a very fancy

00:02:43,880 --> 00:02:52,140
monolith because the developers exactly

00:02:48,300 --> 00:02:55,080
knew how the interactions worked what is

00:02:52,140 --> 00:02:57,600
needed we made decisions on the behalf

00:02:55,080 --> 00:03:00,150
of our clients and then we deployed a

00:02:57,600 --> 00:03:03,150
solution that worked right that that is

00:03:00,150 --> 00:03:05,459
completely used by the teams across the

00:03:03,150 --> 00:03:07,440
organization but still it is not

00:03:05,459 --> 00:03:09,900
flexible enough it's not plug a

00:03:07,440 --> 00:03:12,180
pluggable enough now the chaos

00:03:09,900 --> 00:03:15,720
engineering solution we call that as a

00:03:12,180 --> 00:03:20,910
cloud dieter in in capital one it is

00:03:15,720 --> 00:03:23,459
developed by one team member but 27

00:03:20,910 --> 00:03:27,180
contributors across the organization

00:03:23,459 --> 00:03:30,390
added functionalities the adoption is a

00:03:27,180 --> 00:03:32,130
different story but that that deserves

00:03:30,390 --> 00:03:34,709
it won't talk if you want to know more

00:03:32,130 --> 00:03:37,560
about it please come find me we can we

00:03:34,709 --> 00:03:39,870
can sit and talk about it the the

00:03:37,560 --> 00:03:42,840
solution the ends end product of the

00:03:39,870 --> 00:03:46,260
chaos engineering solution was is a very

00:03:42,840 --> 00:03:48,359
flexible pluggable if a disruption is

00:03:46,260 --> 00:03:50,700
not available that is needed by a team

00:03:48,359 --> 00:03:52,769
they just create this cute little lambda

00:03:50,700 --> 00:03:55,709
function and contributed back right so

00:03:52,769 --> 00:04:00,060
it was it was such a easy solution for

00:03:55,709 --> 00:04:01,670
someone to adopt and use now extending

00:04:00,060 --> 00:04:04,760
this thought process of how

00:04:01,670 --> 00:04:07,380
communication between the teams and

00:04:04,760 --> 00:04:09,480
organizational structure impact the

00:04:07,380 --> 00:04:12,090
software extending this thought process

00:04:09,480 --> 00:04:14,430
beyond just these two elements means

00:04:12,090 --> 00:04:17,100
that having the right technology and

00:04:14,430 --> 00:04:19,889
talent is not just you know for the

00:04:17,100 --> 00:04:22,919
sustained success of any smart company

00:04:19,889 --> 00:04:24,760
it has to be married with greater

00:04:22,919 --> 00:04:29,080
engineering practice

00:04:24,760 --> 00:04:32,270
and that is why we developed a strategy

00:04:29,080 --> 00:04:34,690
and established a strategy this strategy

00:04:32,270 --> 00:04:36,650
is called engineering excellence

00:04:34,690 --> 00:04:41,150
officially called as should for the

00:04:36,650 --> 00:04:45,170
Stars led to a movement a vision in

00:04:41,150 --> 00:04:48,440
which the focus was on reduced software

00:04:45,170 --> 00:04:51,110
development lifecycle improved quality

00:04:48,440 --> 00:04:53,720
improved performance and reduced mean

00:04:51,110 --> 00:04:56,840
time to recover when the software fails

00:04:53,720 --> 00:04:58,330
and this hyper efficiency became our

00:04:56,840 --> 00:05:01,550
North Star

00:04:58,330 --> 00:05:04,130
now we established a strategy vev even

00:05:01,550 --> 00:05:07,040
have a very cool name for it and we also

00:05:04,130 --> 00:05:09,290
know how our end goal looks like looks

00:05:07,040 --> 00:05:12,890
like and how do we get from here to

00:05:09,290 --> 00:05:16,790
there three critical things were

00:05:12,890 --> 00:05:18,770
identified slay the monolith and from my

00:05:16,790 --> 00:05:22,100
discussions to many with many of you

00:05:18,770 --> 00:05:24,830
guys for the past day and today this is

00:05:22,100 --> 00:05:28,580
a common problem that everyone in here

00:05:24,830 --> 00:05:31,700
is trying to solve right so we said any

00:05:28,580 --> 00:05:34,430
new application or any modernization of

00:05:31,700 --> 00:05:36,890
legacy application has to be built as

00:05:34,430 --> 00:05:38,860
micro service it is easier said than

00:05:36,890 --> 00:05:43,070
done we are still working through that

00:05:38,860 --> 00:05:45,920
we came up with a set of definitions of

00:05:43,070 --> 00:05:50,600
what a micro service looks like in a

00:05:45,920 --> 00:05:52,850
capital capital 1 environment and that

00:05:50,600 --> 00:05:54,860
includes the fact that each microservice

00:05:52,850 --> 00:05:57,890
should be an independently deployable

00:05:54,860 --> 00:06:00,470
unit and the second one is automate

00:05:57,890 --> 00:06:03,500
everything automate everything from code

00:06:00,470 --> 00:06:06,050
to test to infrastructure and to

00:06:03,500 --> 00:06:08,420
deployment this is a very scary thought

00:06:06,050 --> 00:06:11,690
as we are a FinTech company that means

00:06:08,420 --> 00:06:14,390
complaints in a very bowl letter so we

00:06:11,690 --> 00:06:17,840
came up with some basic principles for

00:06:14,390 --> 00:06:21,500
automating these things are automating

00:06:17,840 --> 00:06:25,930
the stages as well as in capital when we

00:06:21,500 --> 00:06:28,430
have to adhere to strict management of

00:06:25,930 --> 00:06:31,130
financial data and financial reporting

00:06:28,430 --> 00:06:32,960
and we all we always had rigorous

00:06:31,130 --> 00:06:35,860
internal controls when it comes to Sox

00:06:32,960 --> 00:06:37,760
sarbanes-oxley fee are familiar with it

00:06:35,860 --> 00:06:40,220
that applies

00:06:37,760 --> 00:06:43,100
both software delivery as well as

00:06:40,220 --> 00:06:46,100
business processes and socks also has

00:06:43,100 --> 00:06:49,130
very strict guidelines on software

00:06:46,100 --> 00:06:51,370
delivery as then no one can introduce a

00:06:49,130 --> 00:06:54,950
change in production and therefore

00:06:51,370 --> 00:06:58,430
impact the financial reporting without

00:06:54,950 --> 00:07:01,340
any proper oversight control and audit

00:06:58,430 --> 00:07:04,040
trails this segregation of duties gets

00:07:01,340 --> 00:07:06,830
directly translated to pipeline

00:07:04,040 --> 00:07:09,050
automation and execution and then the

00:07:06,830 --> 00:07:11,030
third one is entry and ownership that is

00:07:09,050 --> 00:07:14,090
not new to anyone in this room it's

00:07:11,030 --> 00:07:16,640
basically operating in a DevOps model

00:07:14,090 --> 00:07:18,350
each individual software team they have

00:07:16,640 --> 00:07:21,050
entry in warner ship to the code that

00:07:18,350 --> 00:07:25,670
produced from development to support and

00:07:21,050 --> 00:07:28,790
maintenance now we have a strategy and

00:07:25,670 --> 00:07:32,470
we everyone clearly understood the value

00:07:28,790 --> 00:07:35,510
of it but implementing this across the

00:07:32,470 --> 00:07:38,690
five thousand plus developers in the

00:07:35,510 --> 00:07:41,720
organization in practices is no easy

00:07:38,690 --> 00:07:44,690
cake so our engineering excellence team

00:07:41,720 --> 00:07:46,880
came up with some basic principles and

00:07:44,690 --> 00:07:49,550
we also realized that automating

00:07:46,880 --> 00:07:52,310
everything that second imperative is a

00:07:49,550 --> 00:07:54,680
success for the rest of the to technical

00:07:52,310 --> 00:07:57,440
imperatives that we identified so we

00:07:54,680 --> 00:08:00,080
focused on that first that would lead us

00:07:57,440 --> 00:08:05,020
to the path for the rest of the two

00:08:00,080 --> 00:08:08,120
imperatives and these basic principles

00:08:05,020 --> 00:08:10,880
became our stage gates in pipeline

00:08:08,120 --> 00:08:13,820
automation number one is source control

00:08:10,880 --> 00:08:16,220
mechanisms that is also and not new to

00:08:13,820 --> 00:08:19,940
anyone in this room everyone in here do

00:08:16,220 --> 00:08:23,960
this in some shape or form we do LG TM

00:08:19,940 --> 00:08:26,870
and the second one is secure state

00:08:23,960 --> 00:08:30,260
storage of application binary this stage

00:08:26,870 --> 00:08:33,080
gate ensures that the binary the

00:08:30,260 --> 00:08:36,020
versioned and immutable binary is

00:08:33,080 --> 00:08:38,360
promoted published and promoted only

00:08:36,020 --> 00:08:40,640
through automated deployment process no

00:08:38,360 --> 00:08:43,070
one can manually access these binary you

00:08:40,640 --> 00:08:46,730
manually change it and push it into

00:08:43,070 --> 00:08:51,290
production without any proper insight

00:08:46,730 --> 00:08:54,860
and then quality checks this talks about

00:08:51,290 --> 00:08:57,230
my meeting my code coverage I'm a

00:08:54,860 --> 00:09:01,009
passing all the functional test cases

00:08:57,230 --> 00:09:05,720
and and also um is my code performing

00:09:01,009 --> 00:09:08,089
and meeting SLO and under peak load we

00:09:05,720 --> 00:09:11,180
are big we are one of the biggest open

00:09:08,089 --> 00:09:13,850
source enthusiasts and our our teams

00:09:11,180 --> 00:09:17,209
many of our teams contribute and use

00:09:13,850 --> 00:09:19,639
heavily the open source code that this

00:09:17,209 --> 00:09:21,829
stage gate ensures that the code that we

00:09:19,639 --> 00:09:24,949
use from open source community is

00:09:21,829 --> 00:09:28,250
meeting all the security standards and

00:09:24,949 --> 00:09:31,790
also licensing requirement and the final

00:09:28,250 --> 00:09:34,250
one is we wanted to make sure that not

00:09:31,790 --> 00:09:36,550
just the code we deploy in production is

00:09:34,250 --> 00:09:40,250
not impacting the production environment

00:09:36,550 --> 00:09:43,850
adversely the deployment process itself

00:09:40,250 --> 00:09:46,190
is is versioned so any change to the

00:09:43,850 --> 00:09:49,430
build script has to be tested in pre pod

00:09:46,190 --> 00:09:51,829
before it gets used in in production

00:09:49,430 --> 00:09:55,430
environment this also ensures that no

00:09:51,829 --> 00:09:58,519
one can accidentally access from pre

00:09:55,430 --> 00:10:01,639
prod to prod and vice-versa so each of

00:09:58,519 --> 00:10:09,350
these environments are access controlled

00:10:01,639 --> 00:10:12,139
heavily you guys with me so far i know

00:10:09,350 --> 00:10:15,170
i'm going to blame it on conference for

00:10:12,139 --> 00:10:20,120
such an animated presentation so bear

00:10:15,170 --> 00:10:23,240
with me now so because of the wide

00:10:20,120 --> 00:10:28,250
variety of platforms and products that

00:10:23,240 --> 00:10:31,069
we operate in the how part is defined

00:10:28,250 --> 00:10:35,240
this is what we are all we all need to

00:10:31,069 --> 00:10:37,790
meet to deploy our deploy our

00:10:35,240 --> 00:10:40,970
application to production automatically

00:10:37,790 --> 00:10:43,370
but the word part is left up to the

00:10:40,970 --> 00:10:46,760
teams the implementation part is left up

00:10:43,370 --> 00:10:48,709
to the team my team has been supporting

00:10:46,760 --> 00:10:51,439
pipelines built off of spinnaker for a

00:10:48,709 --> 00:10:56,480
while now even before these stage gates

00:10:51,439 --> 00:10:58,550
are put in place we our customized

00:10:56,480 --> 00:11:01,220
version of spinnaker is called the cloud

00:10:58,550 --> 00:11:02,810
one view aka Co and we have a booth over

00:11:01,220 --> 00:11:04,400
there if you have any questions please

00:11:02,810 --> 00:11:09,200
stop by this

00:11:04,400 --> 00:11:11,930
um when when this came into picture that

00:11:09,200 --> 00:11:15,380
we have to automate all these stage

00:11:11,930 --> 00:11:18,920
gates within within the pipeline the

00:11:15,380 --> 00:11:21,440
very obvious option for us is to go with

00:11:18,920 --> 00:11:23,510
the declarative pipeline model before I

00:11:21,440 --> 00:11:25,700
go in there I wanted to mention couple

00:11:23,510 --> 00:11:29,960
of other things when they came up with

00:11:25,700 --> 00:11:33,020
me with these basic principles we came

00:11:29,960 --> 00:11:36,860
up with the concept called pre approved

00:11:33,020 --> 00:11:39,680
releases the idea is this when an

00:11:36,860 --> 00:11:42,170
application team makes sure that hey I

00:11:39,680 --> 00:11:44,290
am meeting all these stage gates I'm

00:11:42,170 --> 00:11:46,730
doing so source control versioning I

00:11:44,290 --> 00:11:49,100
make I'm meeting all these quality

00:11:46,730 --> 00:11:51,620
checks I'm meeting all these security

00:11:49,100 --> 00:11:53,900
checks so they collect evidences of

00:11:51,620 --> 00:11:55,690
their application and they submit those

00:11:53,900 --> 00:11:58,730
evidences to our compliance team

00:11:55,690 --> 00:12:00,680
manually and my our compliance team

00:11:58,730 --> 00:12:02,750
actually go through these evidences and

00:12:00,680 --> 00:12:05,000
they make sure that okay you are meeting

00:12:02,750 --> 00:12:08,030
all those standards and then they put a

00:12:05,000 --> 00:12:10,000
stamp that you are pre-approved to

00:12:08,030 --> 00:12:11,840
release your code to production

00:12:10,000 --> 00:12:13,880
automatically so that means

00:12:11,840 --> 00:12:16,390
automatically creating change order as

00:12:13,880 --> 00:12:19,730
soon I as soon as I check in my code I

00:12:16,390 --> 00:12:21,980
my pipeline gets executed and then the

00:12:19,730 --> 00:12:24,110
automatically see what gets created and

00:12:21,980 --> 00:12:26,690
it gets deployed to production now the

00:12:24,110 --> 00:12:31,220
problem with this is this certification

00:12:26,690 --> 00:12:34,340
process was very manual and it became a

00:12:31,220 --> 00:12:36,080
bottleneck that everyone lines up that

00:12:34,340 --> 00:12:38,030
here is here are my evidences and it's

00:12:36,080 --> 00:12:40,820
all manual and validating those

00:12:38,030 --> 00:12:43,400
evidences were also manual then we

00:12:40,820 --> 00:12:45,920
realized okay we need to automate that

00:12:43,400 --> 00:12:47,840
process as well the complaints the

00:12:45,920 --> 00:12:50,450
governance aspect of the pipeline

00:12:47,840 --> 00:12:55,460
execution as well not just the quality

00:12:50,450 --> 00:12:57,800
gates so we we we were looking at what

00:12:55,460 --> 00:13:00,980
are all the options available for us we

00:12:57,800 --> 00:13:04,220
chose the managed template temp managed

00:13:00,980 --> 00:13:08,840
pipeline options and then we went with

00:13:04,220 --> 00:13:11,990
templates of spinnaker we also wanted

00:13:08,840 --> 00:13:14,480
this solution to be very very simple for

00:13:11,990 --> 00:13:17,810
our developers to use so we set some

00:13:14,480 --> 00:13:17,990
goals one the certified template with

00:13:17,810 --> 00:13:22,100
the

00:13:17,990 --> 00:13:25,100
mutable stages what that means is any we

00:13:22,100 --> 00:13:28,279
will certify our template with all these

00:13:25,100 --> 00:13:31,610
mandated stage gates with our compliance

00:13:28,279 --> 00:13:33,890
team and any application that onwards to

00:13:31,610 --> 00:13:36,430
on to spinnaker and goes through this

00:13:33,890 --> 00:13:39,399
pipeline gets automatically certified

00:13:36,430 --> 00:13:41,779
rather than they submit those evidences

00:13:39,399 --> 00:13:44,420
separately and then they go through it

00:13:41,779 --> 00:13:48,670
they approve it so that process gets

00:13:44,420 --> 00:13:52,700
plugged in with with our template model

00:13:48,670 --> 00:13:54,770
now that also involved our compliance

00:13:52,700 --> 00:13:56,750
team automating their governance process

00:13:54,770 --> 00:13:59,600
so they had to work on api's they

00:13:56,750 --> 00:14:02,180
publish those ApS with us and each stage

00:13:59,600 --> 00:14:06,020
we collected the evidence from our teams

00:14:02,180 --> 00:14:07,910
and submitted those evidences to to the

00:14:06,020 --> 00:14:10,220
compliance team that way they can

00:14:07,910 --> 00:14:12,529
approve they can validate in each

00:14:10,220 --> 00:14:15,770
pipeline execution we are meeting all

00:14:12,529 --> 00:14:20,630
those standards and requirements the

00:14:15,770 --> 00:14:23,779
second goal was flexible enough to add

00:14:20,630 --> 00:14:25,700
implementation we know for sure that our

00:14:23,779 --> 00:14:29,060
stages are immutable

00:14:25,700 --> 00:14:33,500
no one can add or remove any stage from

00:14:29,060 --> 00:14:35,329
this that is also to make sure that we

00:14:33,500 --> 00:14:38,899
are meeting all those stage gates right

00:14:35,329 --> 00:14:41,270
but the implementation of it can be any

00:14:38,899 --> 00:14:43,940
any in number of implementation I can

00:14:41,270 --> 00:14:47,270
provide a bill script for Java or golang

00:14:43,940 --> 00:14:49,130
are no js' within the same template so

00:14:47,270 --> 00:14:52,250
that I don't have to go back and again

00:14:49,130 --> 00:14:54,050
and ask for certification so that we

00:14:52,250 --> 00:14:55,579
wanted to make sure we need to make it

00:14:54,050 --> 00:14:57,560
flexible enough to add any

00:14:55,579 --> 00:15:00,829
implementation to an existing template

00:14:57,560 --> 00:15:03,560
the third one as we are big on inner

00:15:00,829 --> 00:15:06,709
sourcing we wanted to make sure that any

00:15:03,560 --> 00:15:09,910
framework that we develop enable people

00:15:06,709 --> 00:15:13,700
to contribute back to these templates

00:15:09,910 --> 00:15:17,420
and if you already are using spinnaker

00:15:13,700 --> 00:15:19,610
templates my sincere apologies for for

00:15:17,420 --> 00:15:22,990
the redundant information here as you

00:15:19,610 --> 00:15:25,100
see here the abstract template amel

00:15:22,990 --> 00:15:28,190
combined with the concrete

00:15:25,100 --> 00:15:29,939
implementation of stages with variable

00:15:28,190 --> 00:15:32,849
binding produces the

00:15:29,939 --> 00:15:36,089
pipelined JSON file that we are very

00:15:32,849 --> 00:15:39,149
familiar with but we did do couple of

00:15:36,089 --> 00:15:41,909
customizations to meet our needs and the

00:15:39,149 --> 00:15:44,069
and we wanted to contribute back as well

00:15:41,909 --> 00:15:47,099
these customizations one customization

00:15:44,069 --> 00:15:51,179
is the stage the type of the variable

00:15:47,099 --> 00:15:55,199
stage type is made as as a parameter

00:15:51,179 --> 00:15:58,249
that we can get from the developer

00:15:55,199 --> 00:16:01,319
the second customization is instead of

00:15:58,249 --> 00:16:05,749
adding all the partials implementations

00:16:01,319 --> 00:16:08,819
within same template file we created

00:16:05,749 --> 00:16:12,209
each partial as a separate template file

00:16:08,819 --> 00:16:15,739
we did it for two different reasons one

00:16:12,209 --> 00:16:18,389
for simplicity we had so many stages and

00:16:15,739 --> 00:16:21,299
adding all those stages in one file

00:16:18,389 --> 00:16:23,879
became very unreadable and

00:16:21,299 --> 00:16:25,799
unmaintainable the second reason is if

00:16:23,879 --> 00:16:29,189
someone wants to contribute that one

00:16:25,799 --> 00:16:32,369
implementation partial back they can do

00:16:29,189 --> 00:16:37,859
it easily without impacting any existing

00:16:32,369 --> 00:16:40,409
templates now with these two easy steps

00:16:37,859 --> 00:16:43,589
once the customer onwards when the

00:16:40,409 --> 00:16:45,389
developer onwards they choose their

00:16:43,589 --> 00:16:47,159
environment and they choose the

00:16:45,389 --> 00:16:49,589
implementation that they want to use

00:16:47,159 --> 00:16:54,979
within that environment and it resulted

00:16:49,589 --> 00:16:58,889
in the entry and pipeline in each stage

00:16:54,979 --> 00:17:02,519
like for example build stage here it

00:16:58,889 --> 00:17:06,329
makes sure that we are the code is peer

00:17:02,519 --> 00:17:09,569
reviewed and it passes all the static

00:17:06,329 --> 00:17:13,019
code checks like it is passing the

00:17:09,569 --> 00:17:14,909
threshold of code coverage and security

00:17:13,019 --> 00:17:17,339
standards and licensing requirements

00:17:14,909 --> 00:17:21,000
that information is collected and sent

00:17:17,339 --> 00:17:25,350
to our compliance team for their audit

00:17:21,000 --> 00:17:28,679
trails and records now this is one way

00:17:25,350 --> 00:17:30,679
of doing automated deployments and we

00:17:28,679 --> 00:17:33,360
have other jenkins pipe pipelines across

00:17:30,679 --> 00:17:35,639
the organization in different lines of

00:17:33,360 --> 00:17:40,039
businesses doing the very similar thing

00:17:35,639 --> 00:17:42,799
we have started seeing a huge benefit of

00:17:40,039 --> 00:17:45,590
doing automated and come

00:17:42,799 --> 00:17:51,150
deployments and what you see here is our

00:17:45,590 --> 00:17:53,730
2017 number the the teams who do

00:17:51,150 --> 00:17:56,970
complaint automated deployment compared

00:17:53,730 --> 00:18:00,270
to the ones that don't they tend to

00:17:56,970 --> 00:18:02,580
release more often their average number

00:18:00,270 --> 00:18:06,390
of deployments per month has increased

00:18:02,580 --> 00:18:08,730
by 95% and their average number of

00:18:06,390 --> 00:18:11,220
production impacting incidents has

00:18:08,730 --> 00:18:14,580
reduced by 90% in the mean time to

00:18:11,220 --> 00:18:19,230
recover has reduced by half over the

00:18:14,580 --> 00:18:21,470
year our goal is to have all of 100% of

00:18:19,230 --> 00:18:25,410
our applications go through these

00:18:21,470 --> 00:18:29,730
template manage templates and automated

00:18:25,410 --> 00:18:32,580
compliant deployments I want to leave

00:18:29,730 --> 00:18:34,650
you all with one final thought have you

00:18:32,580 --> 00:18:38,910
guys all read any of you read this

00:18:34,650 --> 00:18:41,640
awesome book accelerate awesome awesome

00:18:38,910 --> 00:18:44,309
yeah this my boss gave it to me couple

00:18:41,640 --> 00:18:47,460
of weeks ago so I had to read it but I'm

00:18:44,309 --> 00:18:49,890
glad I did it was such a wonderful book

00:18:47,460 --> 00:18:54,480
highly recommend it to anyone who wants

00:18:49,890 --> 00:18:56,580
to start a CA CD a DevOps culture I'm

00:18:54,480 --> 00:18:59,580
not talking about technology are a

00:18:56,580 --> 00:19:02,100
talent but the culture itself the

00:18:59,580 --> 00:19:05,360
authors of this book summarized the best

00:19:02,100 --> 00:19:10,220
practices metrics and principles to

00:19:05,360 --> 00:19:15,030
improve software delivery and software

00:19:10,220 --> 00:19:18,240
any digital product experience based on

00:19:15,030 --> 00:19:20,370
their well documented research years of

00:19:18,240 --> 00:19:23,760
well documented research and statistical

00:19:20,370 --> 00:19:25,980
analysis they found out that from their

00:19:23,760 --> 00:19:29,549
research that the software delivery

00:19:25,980 --> 00:19:31,950
improvement performance directly impacts

00:19:29,549 --> 00:19:34,320
the organizational performance in terms

00:19:31,950 --> 00:19:36,570
of ROI also the non-commercial

00:19:34,320 --> 00:19:38,070
performance is like customer

00:19:36,570 --> 00:19:41,790
satisfaction and employee satisfaction

00:19:38,070 --> 00:19:44,340
and if you look at this graph as the

00:19:41,790 --> 00:19:47,730
organizing organization grows to the

00:19:44,340 --> 00:19:52,100
right the high-performing teams tend to

00:19:47,730 --> 00:19:56,090
deploy more frequently compared to their

00:19:52,100 --> 00:19:57,919
medium and the lower performers in fact

00:19:56,090 --> 00:20:00,910
there is not much difference between

00:19:57,919 --> 00:20:03,340
middle level and the lower performers

00:20:00,910 --> 00:20:07,640
what they found out is also

00:20:03,340 --> 00:20:11,120
high-performing team use right levers to

00:20:07,640 --> 00:20:14,059
accelerate their development frequency

00:20:11,120 --> 00:20:17,210
without compromising quality and that is

00:20:14,059 --> 00:20:20,390
the key right in Capital One our levers

00:20:17,210 --> 00:20:22,549
are compliance gates for automated

00:20:20,390 --> 00:20:24,860
deployment and take a moment to think

00:20:22,549 --> 00:20:26,900
about what your levers are to accelerate

00:20:24,860 --> 00:20:29,570
your engineering excellence journey

00:20:26,900 --> 00:20:35,079
thank you for the opportunity

00:20:29,570 --> 00:20:35,079
[Applause]

00:20:35,590 --> 00:20:37,650

YouTube URL: https://www.youtube.com/watch?v=xCi7lQnZ0sg


