Title: Boris Renski Keynote Spinnaker Summit
Publication date: 2018-10-19
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,550 --> 00:00:10,200
all right thank you guys first of all

00:00:06,080 --> 00:00:11,759
thank you Netflix and Thank You Pete I'd

00:00:10,200 --> 00:00:14,340
like to thank you guys for giving me the

00:00:11,759 --> 00:00:16,920
opportunity to uh speak and most

00:00:14,340 --> 00:00:21,390
importantly I wanted to thank all of you

00:00:16,920 --> 00:00:24,720
guys for getting up at 8:30 to listen to

00:00:21,390 --> 00:00:29,880
this talk which is pretty ambitious

00:00:24,720 --> 00:00:32,520
crazy endeavor on a second day so we're

00:00:29,880 --> 00:00:34,800
gonna talk about what would it take for

00:00:32,520 --> 00:00:36,600
spinnaker to become the standard in

00:00:34,800 --> 00:00:40,320
continuous delivery and they split the

00:00:36,600 --> 00:00:42,960
talk into four parts first I wanted to

00:00:40,320 --> 00:00:47,430
touch really quickly on Weimer antis

00:00:42,960 --> 00:00:50,670
cares about spinnaker at all why do I

00:00:47,430 --> 00:00:52,649
think it's important for spinnaker to

00:00:50,670 --> 00:00:56,129
become a standard why standards matter

00:00:52,649 --> 00:00:57,870
in general what's the alternative to

00:00:56,129 --> 00:01:02,600
spinnaker and other winds kind of

00:00:57,870 --> 00:01:07,229
blowing against its path to domination

00:01:02,600 --> 00:01:11,040
and how do we circumvent those obstacles

00:01:07,229 --> 00:01:15,030
that are there diving into the first

00:01:11,040 --> 00:01:18,150
part I wonder how many of you guys have

00:01:15,030 --> 00:01:21,170
heard of marina so know what we do can

00:01:18,150 --> 00:01:24,240
you raise your hand if you know so it's

00:01:21,170 --> 00:01:27,509
maybe like thirty percent so we've

00:01:24,240 --> 00:01:29,520
actually been around for quite a while

00:01:27,509 --> 00:01:31,140
and a fairly well-known in the

00:01:29,520 --> 00:01:33,689
infrastructure space but we're fairly

00:01:31,140 --> 00:01:38,009
new to VR kind of a DevOps continuous

00:01:33,689 --> 00:01:39,240
delivery crowd and walking the floor a

00:01:38,009 --> 00:01:41,430
lot of the times I get the question

00:01:39,240 --> 00:01:43,439
asked of like you know what is myranda's

00:01:41,430 --> 00:01:45,930
but most importantly from the people

00:01:43,439 --> 00:01:49,799
that know us it's like why does neuron

00:01:45,930 --> 00:01:51,600
tiss get involved with spinnaker I put

00:01:49,799 --> 00:01:55,320
together this graphic that I think

00:01:51,600 --> 00:01:57,540
explains the reasoning for it and also

00:01:55,320 --> 00:02:00,030
it's a good representation of the

00:01:57,540 --> 00:02:03,630
relationship of the layers in the stack

00:02:00,030 --> 00:02:08,099
so we started in the infrastructure

00:02:03,630 --> 00:02:11,009
space as via basically company helping

00:02:08,099 --> 00:02:13,890
enterprises build OpenStack clouds so

00:02:11,009 --> 00:02:16,319
and today this is really the core of

00:02:13,890 --> 00:02:18,750
business so we're the guys right there

00:02:16,319 --> 00:02:23,010
on the bottom covered with all the crap

00:02:18,750 --> 00:02:25,470
and we're hoping that the embrace of

00:02:23,010 --> 00:02:28,459
spinnaker will give us the opportunity

00:02:25,470 --> 00:02:32,570
to become that bird on the top there so

00:02:28,459 --> 00:02:36,810
this is you know part true part joke but

00:02:32,570 --> 00:02:40,470
the real story also is the fact that our

00:02:36,810 --> 00:02:43,470
customers who are the basically you know

00:02:40,470 --> 00:02:45,870
guys that run IT infrastructure have

00:02:43,470 --> 00:02:48,930
been evolving their role has been

00:02:45,870 --> 00:02:53,190
evolving within the organization and

00:02:48,930 --> 00:02:55,980
when we started out back in 2008 the

00:02:53,190 --> 00:02:57,810
role of a guy that's running IT

00:02:55,980 --> 00:02:59,760
infrastructure was primarily literally

00:02:57,810 --> 00:03:04,110
running like physical IT infrastructure

00:02:59,760 --> 00:03:07,140
and needed virtualization as Amazon

00:03:04,110 --> 00:03:11,760
started taking off other clouds started

00:03:07,140 --> 00:03:13,950
taking off the role has evolved to less

00:03:11,760 --> 00:03:17,030
just managing a physical infrastructure

00:03:13,950 --> 00:03:19,920
and more about actually you know

00:03:17,030 --> 00:03:22,410
providing easy self-service access to

00:03:19,920 --> 00:03:25,410
that infrastructure and I believe that

00:03:22,410 --> 00:03:27,150
going forward and this is really what

00:03:25,410 --> 00:03:29,310
we're seeing from the customers that

00:03:27,150 --> 00:03:33,420
we're working with us but their role is

00:03:29,310 --> 00:03:34,980
evolving further away from much anything

00:03:33,420 --> 00:03:36,920
to do with infrastructure and more

00:03:34,980 --> 00:03:40,320
towards actually helping developers

00:03:36,920 --> 00:03:43,440
deploy their apps across a variety of

00:03:40,320 --> 00:03:45,090
infrastructure targets so we will turn

00:03:43,440 --> 00:03:47,989
to our customers who want to be relevant

00:03:45,090 --> 00:03:52,820
to our customers and we believe that

00:03:47,989 --> 00:03:56,360
spinnaker is a good solution to their

00:03:52,820 --> 00:04:00,329
new oncoming problems

00:03:56,360 --> 00:04:03,480
so why standards matter in open source

00:04:00,329 --> 00:04:04,829
so you know we could argue that you know

00:04:03,480 --> 00:04:09,690
we're good community a lot of people

00:04:04,829 --> 00:04:11,190
here we're all having fun solving

00:04:09,690 --> 00:04:12,750
problems for each other why does it

00:04:11,190 --> 00:04:16,400
matter of spinnaker as a standard maybe

00:04:12,750 --> 00:04:20,370
we don't need to be a standard so I

00:04:16,400 --> 00:04:22,740
wanted to kind of explain it and also

00:04:20,370 --> 00:04:24,710
explain the reason why that neuron tests

00:04:22,740 --> 00:04:28,400
were very strongly believed in

00:04:24,710 --> 00:04:31,340
standards by sharing a story of how we

00:04:28,400 --> 00:04:33,289
have you know evolved as a company i've

00:04:31,340 --> 00:04:36,979
actually been around as just a

00:04:33,289 --> 00:04:41,030
professional services company since 2001

00:04:36,979 --> 00:04:43,819
and 2010 was a very pivotal year for us

00:04:41,030 --> 00:04:46,759
when we decided that we're gonna become

00:04:43,819 --> 00:04:49,490
much more focused and we knew that we

00:04:46,759 --> 00:04:52,160
wanted to focus on open source

00:04:49,490 --> 00:04:57,789
infrastructure but who weren't sure what

00:04:52,160 --> 00:05:00,289
what what what to pick and at the time

00:04:57,789 --> 00:05:01,759
Amazon was very popular and a whole

00:05:00,289 --> 00:05:04,820
bunch of our kind of open source

00:05:01,759 --> 00:05:07,280
alternatives emerge there was cloud

00:05:04,820 --> 00:05:10,550
stack it was OpenStack eucalyptus open

00:05:07,280 --> 00:05:12,440
nebula a bunch of stuff and we looked at

00:05:10,550 --> 00:05:14,300
all the stuff and of course our

00:05:12,440 --> 00:05:17,259
engineers chimed in and you know they

00:05:14,300 --> 00:05:20,419
said ah you know we should definitely do

00:05:17,259 --> 00:05:23,150
anything but OpenStack because its total

00:05:20,419 --> 00:05:26,150
crap it's written in Python it doesn't

00:05:23,150 --> 00:05:28,550
work there's no usage most likely best

00:05:26,150 --> 00:05:31,909
candidate let's do cloud stack it's Java

00:05:28,550 --> 00:05:34,789
it's very good interface 200 plus users

00:05:31,909 --> 00:05:37,880
it's got everything going for it really

00:05:34,789 --> 00:05:42,699
good elegant code let's do that so you

00:05:37,880 --> 00:05:46,219
know we kind of weighed but ultimately

00:05:42,699 --> 00:05:48,080
figured that maybe you know betting on

00:05:46,219 --> 00:05:49,639
the community would be important and we

00:05:48,080 --> 00:05:51,979
decided to put our eggs on the OpenStack

00:05:49,639 --> 00:05:56,090
basket and in the next two years the

00:05:51,979 --> 00:05:58,240
following happens and today you know you

00:05:56,090 --> 00:06:01,310
can argue indefinitely whether or not

00:05:58,240 --> 00:06:04,310
OpenStack is crap and whether or not you

00:06:01,310 --> 00:06:06,560
know it's working well or not but if you

00:06:04,310 --> 00:06:09,340
want to build an open-source private

00:06:06,560 --> 00:06:12,440
cloud where you're castrating VMs and

00:06:09,340 --> 00:06:13,940
you want to hire people that will be

00:06:12,440 --> 00:06:16,280
able to do that or will be able to

00:06:13,940 --> 00:06:18,320
support that good luck trying to hire

00:06:16,280 --> 00:06:21,139
people that will support cloud stack or

00:06:18,320 --> 00:06:23,810
open nebula or eucalyptus all of these

00:06:21,139 --> 00:06:28,789
things today a largely gone and for that

00:06:23,810 --> 00:06:31,940
specific use case we have OpenStack fast

00:06:28,789 --> 00:06:34,940
forward maybe three four years from that

00:06:31,940 --> 00:06:38,330
date and again we are kind of in the

00:06:34,940 --> 00:06:40,189
same situation where docker

00:06:38,330 --> 00:06:42,199
the immutable infrastructure and of

00:06:40,189 --> 00:06:47,000
becoming a thing and now our team is

00:06:42,199 --> 00:06:50,030
building kind of a new architecture for

00:06:47,000 --> 00:06:51,560
delivering OpenStack and the idea is

00:06:50,030 --> 00:06:53,990
that we want to contain rise all of the

00:06:51,560 --> 00:06:56,569
services deliver them in the mutable

00:06:53,990 --> 00:06:58,639
containers therefore greatly simplify

00:06:56,569 --> 00:07:01,699
the lifecycle management of it and we're

00:06:58,639 --> 00:07:05,050
thinking of what campaigner schedule or

00:07:01,699 --> 00:07:07,460
substrate should we use to actually

00:07:05,050 --> 00:07:10,430
reaaargh attacked our OpenStack

00:07:07,460 --> 00:07:13,819
distribution again same exercise of

00:07:10,430 --> 00:07:16,759
course the one that's been around at

00:07:13,819 --> 00:07:18,860
that point for a while is mezzos but

00:07:16,759 --> 00:07:22,940
swarm is kind of you know also popular

00:07:18,860 --> 00:07:24,800
among developers so and just recently

00:07:22,940 --> 00:07:26,719
what kubernetes is released and it's

00:07:24,800 --> 00:07:27,979
been a toy that came out of Google

00:07:26,719 --> 00:07:30,020
nobody knows what it is

00:07:27,979 --> 00:07:32,779
great so of course our developers look

00:07:30,020 --> 00:07:36,199
the code nez was really solid written in

00:07:32,779 --> 00:07:39,169
C++ been around for ten years scales to

00:07:36,199 --> 00:07:41,810
thousands of nodes very good to layer

00:07:39,169 --> 00:07:44,779
scheduling everything's awesome right

00:07:41,810 --> 00:07:47,500
kubernetes like yeah what is this crap

00:07:44,779 --> 00:07:50,300
but again from a community standpoint

00:07:47,500 --> 00:07:53,449
the dynamic looks like it was back then

00:07:50,300 --> 00:07:55,580
already in favor of kubernetes so we

00:07:53,449 --> 00:07:59,120
made a choice in favor of kubernetes at

00:07:55,580 --> 00:08:02,870
that time again and of course this is

00:07:59,120 --> 00:08:06,469
how things have played out up to today

00:08:02,870 --> 00:08:11,240
and again if you are doing anything of

00:08:06,469 --> 00:08:14,060
container scheduling I would argue if

00:08:11,240 --> 00:08:17,719
you chose mezzos and I know that Netflix

00:08:14,060 --> 00:08:21,349
uses mesos but hiring people to maintain

00:08:17,719 --> 00:08:23,810
anything mezzos based is a much bigger

00:08:21,349 --> 00:08:29,419
challenge than if it was based on

00:08:23,810 --> 00:08:31,009
kubernetes so ultimately the key point I

00:08:29,419 --> 00:08:34,399
wanted to make is that a lot of people

00:08:31,009 --> 00:08:38,899
see open-source as like a licensing

00:08:34,399 --> 00:08:41,120
model or like a model for developing

00:08:38,899 --> 00:08:42,789
software even but what's very important

00:08:41,120 --> 00:08:45,620
about open source in my view is that

00:08:42,789 --> 00:08:48,350
it's a it's a framework for achieving

00:08:45,620 --> 00:08:51,170
consensus on a solution to a broad

00:08:48,350 --> 00:08:52,070
problem so when we're trying to get into

00:08:51,170 --> 00:08:53,720
like the

00:08:52,070 --> 00:08:55,610
one source seen in the beginning most of

00:08:53,720 --> 00:08:57,530
our engineers really just hated it and

00:08:55,610 --> 00:09:00,410
the reason why they hate it is because

00:08:57,530 --> 00:09:02,180
no you go in and you say that here I'm

00:09:00,410 --> 00:09:04,520
gonna you know I wrote this code please

00:09:02,180 --> 00:09:06,590
merge it for me and then you know some

00:09:04,520 --> 00:09:08,420
idiot on the mailing list comes out and

00:09:06,590 --> 00:09:09,860
says and you wrote it wrong you have to

00:09:08,420 --> 00:09:12,140
do it differently like ah he doesn't

00:09:09,860 --> 00:09:14,990
know and all this arguing so it's so

00:09:12,140 --> 00:09:16,790
slow and I'd rather just do it myself

00:09:14,990 --> 00:09:18,890
forget about all of these open-source

00:09:16,790 --> 00:09:21,770
people and it'll be the best solution

00:09:18,890 --> 00:09:23,410
ever now the problem is that when it

00:09:21,770 --> 00:09:26,450
comes to this kind of generic solutions

00:09:23,410 --> 00:09:28,910
this consensus has to be reached at some

00:09:26,450 --> 00:09:31,640
point so either I take it and I write it

00:09:28,910 --> 00:09:33,770
as my proprietary solution and then

00:09:31,640 --> 00:09:36,560
after it's there I have to go and

00:09:33,770 --> 00:09:38,660
convince other users and that might be

00:09:36,560 --> 00:09:41,000
pre sales people sales people marketing

00:09:38,660 --> 00:09:42,410
people maybe developers to sue to

00:09:41,000 --> 00:09:44,660
explain that this is a solution is good

00:09:42,410 --> 00:09:47,450
or I can do it on the front end there is

00:09:44,660 --> 00:09:50,150
no way around it you have to get the

00:09:47,450 --> 00:09:51,890
broad buy-in around the solution that

00:09:50,150 --> 00:09:54,170
you've developed and this is an open

00:09:51,890 --> 00:09:57,050
source world you get that buy-in ahead

00:09:54,170 --> 00:10:00,110
of time so it takes maybe a little bit

00:09:57,050 --> 00:10:02,300
slower and longer but ultimately the

00:10:00,110 --> 00:10:04,700
product of it is better it's kind of

00:10:02,300 --> 00:10:07,220
like you know you can build a house

00:10:04,700 --> 00:10:08,870
really fast without you know going to an

00:10:07,220 --> 00:10:11,720
architect or spending any time on

00:10:08,870 --> 00:10:13,130
permits but then this house not going to

00:10:11,720 --> 00:10:14,930
be great it's a Sara Lee it's the same

00:10:13,130 --> 00:10:19,420
thing exact thing of open-source in my

00:10:14,930 --> 00:10:24,260
view so now let's talk a little bit

00:10:19,420 --> 00:10:26,110
about the competition or I don't know if

00:10:24,260 --> 00:10:29,750
it's in competition it's more like

00:10:26,110 --> 00:10:32,540
alternatives or there is other solutions

00:10:29,750 --> 00:10:35,030
that can stifle spinnaker from becoming

00:10:32,540 --> 00:10:36,770
a de facto standard and by the way you

00:10:35,030 --> 00:10:38,180
know I wanted to point some of these

00:10:36,770 --> 00:10:39,830
things out because I think that it's

00:10:38,180 --> 00:10:41,810
important for us as a community to be

00:10:39,830 --> 00:10:45,500
aware of all of the things that are out

00:10:41,810 --> 00:10:47,180
there like walking the floor of course

00:10:45,500 --> 00:10:50,270
we're all living in the spinnaker bubble

00:10:47,180 --> 00:10:52,250
including myself to some extent and I

00:10:50,270 --> 00:10:54,560
hear some people saying like oh yes

00:10:52,250 --> 00:10:56,330
Vinick already one that says like me you

00:10:54,560 --> 00:10:58,790
know continues the we are V standard for

00:10:56,330 --> 00:11:01,790
continuous delivery I'm not convinced

00:10:58,790 --> 00:11:03,590
that it's yet the case and I think that

00:11:01,790 --> 00:11:05,059
it's important to kind of like open our

00:11:03,590 --> 00:11:09,079
eyes

00:11:05,059 --> 00:11:10,759
as to maybe why not so the first and I

00:11:09,079 --> 00:11:14,869
split everything into the categories a

00:11:10,759 --> 00:11:16,989
broad categories of like I would say

00:11:14,869 --> 00:11:21,139
spinnaker alternatives or competitors

00:11:16,989 --> 00:11:23,319
the first and biggest one that based on

00:11:21,139 --> 00:11:27,049
the conversations we've had with our

00:11:23,319 --> 00:11:28,639
customers is basically Jenkins paws DIY

00:11:27,049 --> 00:11:31,309
doesn't have to be Jenkins but usually

00:11:28,639 --> 00:11:33,949
DIY in a space very heavily revolves

00:11:31,309 --> 00:11:37,009
around Jenkins and this is a quote from

00:11:33,949 --> 00:11:39,469
Citibank that is like one among many

00:11:37,009 --> 00:11:42,259
that has invested a lot into their own

00:11:39,469 --> 00:11:44,839
release management based on Jenkins and

00:11:42,259 --> 00:11:46,669
it's very hard to displace but I wanted

00:11:44,839 --> 00:11:48,199
to talk a little bit more about why I

00:11:46,669 --> 00:11:50,329
think it's a real competitor because you

00:11:48,199 --> 00:11:52,519
can say that you know like Oh DIY is

00:11:50,329 --> 00:11:55,129
always a temporary phenomenon it doesn't

00:11:52,519 --> 00:11:58,219
last it can go away is historically it's

00:11:55,129 --> 00:12:01,459
been kind of the case but I think that

00:11:58,219 --> 00:12:03,589
Jenkins was DIY when it comes to CD is

00:12:01,459 --> 00:12:06,559
particularly sticky and the reason why

00:12:03,589 --> 00:12:08,359
is particularly sticky it's because of

00:12:06,559 --> 00:12:10,399
this kind of value scale so you can take

00:12:08,359 --> 00:12:14,089
any software you can put it anywhere on

00:12:10,399 --> 00:12:16,279
this value scale over there where on one

00:12:14,089 --> 00:12:17,929
hand one side you have you know the

00:12:16,279 --> 00:12:20,059
software it's a lot of value in the code

00:12:17,929 --> 00:12:22,069
and on the other side you have a

00:12:20,059 --> 00:12:26,289
software's a lot of value is actually in

00:12:22,069 --> 00:12:30,049
the best practices and on the left side

00:12:26,289 --> 00:12:32,419
where yeah the left side for you the

00:12:30,049 --> 00:12:35,169
examples like you know linux android

00:12:32,419 --> 00:12:37,819
mysql there's a lot of value in a code

00:12:35,169 --> 00:12:39,489
but on the right side you have solutions

00:12:37,819 --> 00:12:42,979
that are more of like you know business

00:12:39,489 --> 00:12:45,169
applications crm supply chain management

00:12:42,979 --> 00:12:47,779
ITSM they are tied into the business

00:12:45,169 --> 00:12:50,569
process and you can put any piece of

00:12:47,779 --> 00:12:52,549
software on that scale anywhere and

00:12:50,569 --> 00:12:57,379
depending on where it is on that scale

00:12:52,549 --> 00:13:00,679
you know the ease or you know how hard

00:12:57,379 --> 00:13:02,589
it is to displace the incumbent you know

00:13:00,679 --> 00:13:04,759
requires different dynamics so if you

00:13:02,589 --> 00:13:06,619
put spinnaker I would argue that

00:13:04,759 --> 00:13:08,749
spinnaker and not just spinnaker but can

00:13:06,619 --> 00:13:11,989
anything continues delivery related is

00:13:08,749 --> 00:13:16,609
probably you know somewhere a little

00:13:11,989 --> 00:13:18,390
closer to the the part where the values

00:13:16,609 --> 00:13:20,160
and best practices because

00:13:18,390 --> 00:13:21,960
a lot of the things that you do were

00:13:20,160 --> 00:13:23,730
related to deployment is actually tying

00:13:21,960 --> 00:13:25,950
your business process into how the

00:13:23,730 --> 00:13:28,680
deployment works and it's really hard to

00:13:25,950 --> 00:13:31,650
displace that investment that you've

00:13:28,680 --> 00:13:33,270
done so you know like try to think of

00:13:31,650 --> 00:13:34,740
like you've you've you know you build

00:13:33,270 --> 00:13:35,880
something with spinnaker like imagine

00:13:34,740 --> 00:13:37,470
somebody comes in and says I have

00:13:35,880 --> 00:13:40,230
something much better you know it's

00:13:37,470 --> 00:13:41,910
gonna be probably try to go tell India

00:13:40,230 --> 00:13:43,560
you know go throw away spinnaker go use

00:13:41,910 --> 00:13:45,210
some other standards probably not gonna

00:13:43,560 --> 00:13:48,710
happen ever

00:13:45,210 --> 00:13:52,470
Jenkins DIY kind of in the same bucket

00:13:48,710 --> 00:13:56,450
so another big important bucket that I

00:13:52,470 --> 00:13:59,790
think it's important to be aware of is

00:13:56,450 --> 00:14:03,420
this thing called application release

00:13:59,790 --> 00:14:09,420
orchestration which even has a Gartner

00:14:03,420 --> 00:14:12,360
Magic Quadrant attached to it there is a

00:14:09,420 --> 00:14:14,220
lot of players there what they don't

00:14:12,360 --> 00:14:17,970
have going for them is that most of them

00:14:14,220 --> 00:14:21,060
were not built in a cloud native first

00:14:17,970 --> 00:14:23,520
fashion which spinnaker was their more

00:14:21,060 --> 00:14:24,900
kind of an extensions of you know how do

00:14:23,520 --> 00:14:28,890
you build your business process an

00:14:24,900 --> 00:14:31,440
extension of CI but they have been

00:14:28,890 --> 00:14:33,540
around for a long time they all know

00:14:31,440 --> 00:14:35,400
that continuous delivery and cloud

00:14:33,540 --> 00:14:37,530
native continuous delivery is the thing

00:14:35,400 --> 00:14:40,230
and most of these guys have repositioned

00:14:37,530 --> 00:14:43,230
themselves as now continuous delivery

00:14:40,230 --> 00:14:44,880
guys and are doing something that one

00:14:43,230 --> 00:14:47,370
way or the other intersects with

00:14:44,880 --> 00:14:49,530
continuous delivery space and you can

00:14:47,370 --> 00:14:51,540
really split all of these guys into two

00:14:49,530 --> 00:14:54,410
categories at least kind of my

00:14:51,540 --> 00:14:58,170
subjective way to split them one is a

00:14:54,410 --> 00:14:59,880
release process centric arrow and

00:14:58,170 --> 00:15:01,710
everyone is orchestration centric and

00:14:59,880 --> 00:15:04,800
the orchestration centric are they you

00:15:01,710 --> 00:15:06,480
know the guys that were in configuration

00:15:04,800 --> 00:15:07,920
management space but they have built

00:15:06,480 --> 00:15:10,140
some sort of continuous delivery

00:15:07,920 --> 00:15:12,800
functionality on the top so puppet has

00:15:10,140 --> 00:15:16,050
puppet pipelines chef has chef automate

00:15:12,800 --> 00:15:17,400
Red Hat has ansible Tower and open shift

00:15:16,050 --> 00:15:20,220
all of them are kind of doubling in a

00:15:17,400 --> 00:15:25,230
space and then finally the third

00:15:20,220 --> 00:15:27,810
category that is also fairly credible is

00:15:25,230 --> 00:15:29,910
CD as a service and CD as a service is

00:15:27,810 --> 00:15:32,000
split into two buckets there is a CD as

00:15:29,910 --> 00:15:34,579
a service but as part of some IAEA's

00:15:32,000 --> 00:15:38,209
so google cloud build or AWS code deploy

00:15:34,579 --> 00:15:40,519
or there's pure-play guys like bamboo

00:15:38,209 --> 00:15:43,899
circle CI which people say you know it's

00:15:40,519 --> 00:15:47,800
CI but not really they also do CD

00:15:43,899 --> 00:15:51,949
harness which are here a pure play

00:15:47,800 --> 00:15:53,930
hosted CD platforms so now if you try to

00:15:51,949 --> 00:15:55,730
put all together right I try to this is

00:15:53,930 --> 00:15:57,649
my subjective read and I don't know a

00:15:55,730 --> 00:16:00,980
bit curious to hear if you guys agree on

00:15:57,649 --> 00:16:03,709
it or not like where you know how much a

00:16:00,980 --> 00:16:07,040
solution is used today and how likely it

00:16:03,709 --> 00:16:10,970
is to be used in the future and map that

00:16:07,040 --> 00:16:13,519
to some sort of characteristics so if

00:16:10,970 --> 00:16:15,860
you look at jenkins DIY it's very common

00:16:13,519 --> 00:16:19,279
Jenkins's everywhere there's some sort

00:16:15,860 --> 00:16:22,910
of DIY around it will it be used forever

00:16:19,279 --> 00:16:24,949
in the future I think somewhat but I

00:16:22,910 --> 00:16:27,379
don't think it's gonna be the thing I

00:16:24,949 --> 00:16:29,509
don't think that I think a continuous

00:16:27,379 --> 00:16:32,060
delivery space in general is complicated

00:16:29,509 --> 00:16:36,680
enough and big enough that there's gonna

00:16:32,060 --> 00:16:38,389
be substantial value in wrapping

00:16:36,680 --> 00:16:40,910
yourself around some sort of

00:16:38,389 --> 00:16:43,730
out-of-the-box standard approach rather

00:16:40,910 --> 00:16:44,750
than just DIY it so while it is still

00:16:43,730 --> 00:16:46,209
there today I don't think it's gonna

00:16:44,750 --> 00:16:48,709
stay like that forever

00:16:46,209 --> 00:16:51,800
second is configuration management

00:16:48,709 --> 00:16:55,189
centric Aero application release

00:16:51,800 --> 00:16:57,439
orchestration so it she have deploy a

00:16:55,189 --> 00:16:58,699
puppet pipelines so I think that you

00:16:57,439 --> 00:17:00,170
know these guys are everywhere that

00:16:58,699 --> 00:17:03,860
everybody uses configuration management

00:17:00,170 --> 00:17:07,329
some capacity as far as going into the

00:17:03,860 --> 00:17:10,459
continuous delivery space I'm not sure

00:17:07,329 --> 00:17:14,329
because most continuous delivery

00:17:10,459 --> 00:17:16,429
solutions will not be using a single

00:17:14,329 --> 00:17:17,900
configuration management stack most

00:17:16,429 --> 00:17:19,400
likely you'll have parts of the

00:17:17,900 --> 00:17:21,829
organization that's share parts of

00:17:19,400 --> 00:17:23,689
occasions puppet parts something else so

00:17:21,829 --> 00:17:25,659
because of that I don't think that going

00:17:23,689 --> 00:17:29,600
into the future is gonna be the thing

00:17:25,659 --> 00:17:31,549
next is a pipeline centric orchestration

00:17:29,600 --> 00:17:35,929
centric a release management software

00:17:31,549 --> 00:17:38,030
from that Magic Quadrant so according to

00:17:35,929 --> 00:17:40,970
Gartner it's used by 20% of the people

00:17:38,030 --> 00:17:43,130
today 20% of the enterprises 80% they

00:17:40,970 --> 00:17:45,590
project in 2023 I don't know how you can

00:17:43,130 --> 00:17:46,350
exactly believe these numbers but I do

00:17:45,590 --> 00:17:48,930
believe

00:17:46,350 --> 00:17:52,170
and I think that popularity of spinnaker

00:17:48,930 --> 00:17:54,660
itself shows that having a very good

00:17:52,170 --> 00:17:58,620
flexible sophisticated pipeline engine

00:17:54,660 --> 00:18:01,890
to kind of a embed your release business

00:17:58,620 --> 00:18:04,050
logic into it has a lot of value so that

00:18:01,890 --> 00:18:07,260
part going into the future I think is

00:18:04,050 --> 00:18:10,170
going to be very important hosted by two

00:18:07,260 --> 00:18:11,910
IAF's I don't know I mean they're kinda

00:18:10,170 --> 00:18:13,320
used but not too much and I don't think

00:18:11,910 --> 00:18:18,420
it's gonna be used it's gonna be the

00:18:13,320 --> 00:18:20,040
standard simply because you know you

00:18:18,420 --> 00:18:22,380
want to be deploying across multiple

00:18:20,040 --> 00:18:24,810
cloud targets most people will not be

00:18:22,380 --> 00:18:27,030
just doing Amazon or just doing Google

00:18:24,810 --> 00:18:28,320
so there's camp fair that says that it's

00:18:27,030 --> 00:18:31,590
just gonna be only one I don't think

00:18:28,320 --> 00:18:33,600
it's gonna be only one and as such I

00:18:31,590 --> 00:18:37,290
think that continuous delivery has to

00:18:33,600 --> 00:18:39,750
sit above the deployment target and

00:18:37,290 --> 00:18:41,390
finally hast hosted pure-play I think

00:18:39,750 --> 00:18:44,190
that probably is going to be used a lot

00:18:41,390 --> 00:18:45,960
and it does have a shot at the coming

00:18:44,190 --> 00:18:50,070
standard simply because kind of the

00:18:45,960 --> 00:18:53,160
hosted model as a delivery model you

00:18:50,070 --> 00:18:55,980
know is historically been improving self

00:18:53,160 --> 00:19:00,270
out as sv way to go across all layers of

00:18:55,980 --> 00:19:02,400
the stack and pure-play is important for

00:19:00,270 --> 00:19:04,320
all the reasons they ascribe so if you

00:19:02,400 --> 00:19:06,150
look at kind of a you know this graph

00:19:04,320 --> 00:19:07,950
like where do you want to be and how the

00:19:06,150 --> 00:19:11,250
spinnaker map today

00:19:07,950 --> 00:19:14,730
I think spinnaker has a lot going for it

00:19:11,250 --> 00:19:18,480
to actually you know be right there so

00:19:14,730 --> 00:19:20,550
it is cloud agnostic its configuration

00:19:18,480 --> 00:19:23,550
management for the Gnostic and it does

00:19:20,550 --> 00:19:27,540
have very powerful pipeline and workflow

00:19:23,550 --> 00:19:29,490
so it's got a lot going now let's talk a

00:19:27,540 --> 00:19:33,210
little bit about some of the things that

00:19:29,490 --> 00:19:34,740
I think we could improve on and some of

00:19:33,210 --> 00:19:40,760
you have you know obstacles of threats

00:19:34,740 --> 00:19:43,260
so to speak the first one is a

00:19:40,760 --> 00:19:45,030
kubernetes and all of the solutions that

00:19:43,260 --> 00:19:48,690
are doing continuous delivery around

00:19:45,030 --> 00:19:52,020
kubernetes now the reason why that's a

00:19:48,690 --> 00:19:54,750
threat is because like I said when I was

00:19:52,020 --> 00:19:56,310
talking about you know Jenkins DIY big

00:19:54,750 --> 00:19:58,020
in big biggest competitor and being hard

00:19:56,310 --> 00:19:59,430
to displace because it's tied into the

00:19:58,020 --> 00:20:01,320
business process

00:19:59,430 --> 00:20:03,590
one of the ways that you displace to be

00:20:01,320 --> 00:20:07,200
incumbent is when there is a new

00:20:03,590 --> 00:20:08,940
deployment substrate out there so the

00:20:07,200 --> 00:20:10,860
reason why spinnaker became popular

00:20:08,940 --> 00:20:13,110
among you know I stopped to buncha

00:20:10,860 --> 00:20:14,580
spinnaker customers because you need to

00:20:13,110 --> 00:20:16,290
deploy it a cloud right we never

00:20:14,580 --> 00:20:18,360
deployed to cloud before so how do you

00:20:16,290 --> 00:20:21,000
do that well we have this new tool ok

00:20:18,360 --> 00:20:22,770
let's do that with kubernetes is kind of

00:20:21,000 --> 00:20:24,570
the same thing kubernetes is becoming a

00:20:22,770 --> 00:20:25,920
very popular deployment substrate and

00:20:24,570 --> 00:20:28,530
there's a bunch of guys that are just

00:20:25,920 --> 00:20:31,860
squarely focusing on doing continuous

00:20:28,530 --> 00:20:34,470
delivery for kubernetes not to mention

00:20:31,860 --> 00:20:38,540
that kubernetes itself is also building

00:20:34,470 --> 00:20:40,520
its native tooling and API objects for

00:20:38,540 --> 00:20:46,350
handling ever more sophisticated

00:20:40,520 --> 00:20:48,600
deployments so what a spinnaker lack to

00:20:46,350 --> 00:20:50,490
be one of these guys on the left there

00:20:48,600 --> 00:20:54,300
that are actually becoming V kubernetes

00:20:50,490 --> 00:20:56,100
deployment tools so I think that these

00:20:54,300 --> 00:20:59,490
are the three areas that all of these

00:20:56,100 --> 00:21:02,040
guys on the left have that spinnaker has

00:20:59,490 --> 00:21:04,650
to a varying degree so you have to be

00:21:02,040 --> 00:21:06,030
lightweight if you want to be you know

00:21:04,650 --> 00:21:08,940
developer friendly but I liked weight I

00:21:06,030 --> 00:21:10,830
mean like a developer can take this

00:21:08,940 --> 00:21:12,390
thing set it up really quickly

00:21:10,830 --> 00:21:14,790
and start playing with it and try it out

00:21:12,390 --> 00:21:17,280
so if you talk to novice guys this is

00:21:14,790 --> 00:21:18,780
completely not relevant because a I just

00:21:17,280 --> 00:21:20,790
you know it's my ops team is running

00:21:18,780 --> 00:21:23,780
spinnaker why does developer care

00:21:20,790 --> 00:21:26,640
well developers have a lot of influence

00:21:23,780 --> 00:21:28,830
when it comes to making decisions around

00:21:26,640 --> 00:21:31,020
tooling when it comes to Greenfield

00:21:28,830 --> 00:21:32,730
initiatives so if they've never touched

00:21:31,020 --> 00:21:34,470
something like spinnaker I've never seen

00:21:32,730 --> 00:21:36,300
it and they can't even do it

00:21:34,470 --> 00:21:38,910
they're not gonna recommend that as we

00:21:36,300 --> 00:21:40,500
saying to deploy to kubernetes and if

00:21:38,910 --> 00:21:42,180
they can't download it if it's not

00:21:40,500 --> 00:21:44,130
lightweight enough it can play with it

00:21:42,180 --> 00:21:45,900
it probably will never have seen it and

00:21:44,130 --> 00:21:47,910
I bet you anything but if you go to

00:21:45,900 --> 00:21:49,260
kubernetes cube con and you ask people

00:21:47,910 --> 00:21:52,890
what are we doing for deploying to

00:21:49,260 --> 00:21:54,060
kubernetes not so many of them today are

00:21:52,890 --> 00:21:58,260
gonna tell you that we are using

00:21:54,060 --> 00:22:02,550
spinnaker pickup centric so making some

00:21:58,260 --> 00:22:05,280
progress with a declarative delivery but

00:22:02,550 --> 00:22:07,770
again I think that historically a

00:22:05,280 --> 00:22:09,060
spinnaker was built to you know it's

00:22:07,770 --> 00:22:10,890
kind of both for benefit in the curves

00:22:09,060 --> 00:22:12,780
but very kind of UI heavy and make it

00:22:10,890 --> 00:22:14,520
very simple and out of the box

00:22:12,780 --> 00:22:16,500
and was lacking a little bit in the

00:22:14,520 --> 00:22:19,890
get-ups and declared of delivery space

00:22:16,500 --> 00:22:22,980
which now is being remedied and finally

00:22:19,890 --> 00:22:26,730
kind of kubernetes centricity so we have

00:22:22,980 --> 00:22:28,560
you know v1 provider which clearly was

00:22:26,730 --> 00:22:30,150
not very welcomed by the kubernetes

00:22:28,560 --> 00:22:32,100
community simply because you can't use

00:22:30,150 --> 00:22:35,160
kubernetes primitives and now I have a

00:22:32,100 --> 00:22:36,600
v2 provider which I feel kind of swings

00:22:35,160 --> 00:22:41,460
almost like all the way in the other

00:22:36,600 --> 00:22:43,920
direction where you can do anything but

00:22:41,460 --> 00:22:45,570
to some extent it heals a lot of value

00:22:43,920 --> 00:22:47,760
and simplification abstraction that

00:22:45,570 --> 00:22:49,740
spinnaker brings to the table so I think

00:22:47,760 --> 00:22:52,470
about going forward probably some tuning

00:22:49,740 --> 00:22:54,810
still needs to happen in the spinnaker

00:22:52,470 --> 00:22:58,770
community by the spinnaker users to get

00:22:54,810 --> 00:23:00,960
that right now the one big thing that

00:22:58,770 --> 00:23:03,690
spinnaker has going for it against

00:23:00,960 --> 00:23:08,580
anybody in that you know we are VCD for

00:23:03,690 --> 00:23:10,830
kubernetes camp is that it's natively

00:23:08,580 --> 00:23:12,990
designed to be working with multiple

00:23:10,830 --> 00:23:15,210
deployment targets so the big know-how

00:23:12,990 --> 00:23:17,280
in continuous delivery that spinnaker

00:23:15,210 --> 00:23:20,040
brings to the table and my view is this

00:23:17,280 --> 00:23:21,930
marriage between sophisticated pipeline

00:23:20,040 --> 00:23:25,020
engine to build to kind of embed your

00:23:21,930 --> 00:23:27,600
deployment logic and awareness of the

00:23:25,020 --> 00:23:29,640
deployment target which is you know

00:23:27,600 --> 00:23:31,920
today is implemented for cloud driver

00:23:29,640 --> 00:23:33,660
marrying these two together and being

00:23:31,920 --> 00:23:35,940
able to orchestrate the deployment

00:23:33,660 --> 00:23:37,500
target and with the understanding of the

00:23:35,940 --> 00:23:40,080
deployment logic that's that's basically

00:23:37,500 --> 00:23:42,450
the the cool stuff of the continuous

00:23:40,080 --> 00:23:45,540
delivery and you'll never be deploying

00:23:42,450 --> 00:23:48,770
to a single deployment target the world

00:23:45,540 --> 00:23:51,570
is not going to be all on kubernetes so

00:23:48,770 --> 00:23:54,570
that Spinnaker's got going for it out of

00:23:51,570 --> 00:23:57,720
the box but now that we're on this topic

00:23:54,570 --> 00:23:59,670
I wanted to touch on you know the

00:23:57,720 --> 00:24:02,130
deployment targets and the whole notion

00:23:59,670 --> 00:24:04,530
of plugg ability in spinnaker which i

00:24:02,130 --> 00:24:07,020
think is another potential obstacle that

00:24:04,530 --> 00:24:11,580
we as a community should focus on and

00:24:07,020 --> 00:24:13,590
and work on improving so you know

00:24:11,580 --> 00:24:16,500
multiple deployment targets is very

00:24:13,590 --> 00:24:19,470
important and we all agree and you know

00:24:16,500 --> 00:24:20,880
I think that if you listen to angel

00:24:19,470 --> 00:24:22,620
speak or if you talk to anybody in the

00:24:20,880 --> 00:24:24,270
community everybody agrees that like one

00:24:22,620 --> 00:24:26,759
of the core architectural tenants of

00:24:24,270 --> 00:24:29,459
spinnaker today and going forward is

00:24:26,759 --> 00:24:31,829
ability yet if you look into certain

00:24:29,459 --> 00:24:34,019
spaces into certain kind of areas of how

00:24:31,829 --> 00:24:37,079
this plug ability is implemented I think

00:24:34,019 --> 00:24:38,820
it's still imperfect if you go to you

00:24:37,079 --> 00:24:40,589
know the spinnaker documentation is how

00:24:38,820 --> 00:24:42,509
do I build my own cloud driver that's

00:24:40,589 --> 00:24:44,369
literally what's there like on the

00:24:42,509 --> 00:24:46,889
website it's very hard to do

00:24:44,369 --> 00:24:49,199
don't try it unless you're experts which

00:24:46,889 --> 00:24:51,299
is true because building a new cloud

00:24:49,199 --> 00:24:53,190
driver or changing cloud driver like the

00:24:51,299 --> 00:24:57,029
plug ability concept that we have today

00:24:53,190 --> 00:24:59,190
means really forking spinnaker changing

00:24:57,029 --> 00:25:01,259
some of the components than merging them

00:24:59,190 --> 00:25:03,389
back there isn't really an

00:25:01,259 --> 00:25:05,219
out-of-the-box plug-in mechanism I can't

00:25:03,389 --> 00:25:07,440
write my plug-in and have my cloud

00:25:05,219 --> 00:25:09,959
driver and spinnaker will naturally just

00:25:07,440 --> 00:25:11,940
take it right like I can write my Yama

00:25:09,959 --> 00:25:14,429
file for the kubernetes deployment

00:25:11,940 --> 00:25:18,209
object for instance so that's never

00:25:14,429 --> 00:25:23,249
saying that I think we in the community

00:25:18,209 --> 00:25:26,879
need to work on and finally and this was

00:25:23,249 --> 00:25:28,409
an absolutely kind of pivotal I think

00:25:26,879 --> 00:25:33,440
conference and that spinnaker has

00:25:28,409 --> 00:25:35,909
adopted finally a formal governance and

00:25:33,440 --> 00:25:37,979
I think that we started solving this

00:25:35,909 --> 00:25:39,569
problem already but I think that still

00:25:37,979 --> 00:25:43,289
have a ways to go if you look at the

00:25:39,569 --> 00:25:44,819
number of vendors contributing to an

00:25:43,289 --> 00:25:49,379
open-source project and you compare for

00:25:44,819 --> 00:25:53,729
example kubernetes to spinnaker 133 for

00:25:49,379 --> 00:25:56,999
kubernetes 16 for spinnaker and you can

00:25:53,729 --> 00:25:59,339
argue that actually is great you have so

00:25:56,999 --> 00:26:02,039
many contributors there are users Wessel

00:25:59,339 --> 00:26:04,349
only users contribute but I think that

00:26:02,039 --> 00:26:06,269
for an open source project to become a

00:26:04,349 --> 00:26:07,949
standard you absolutely need multiple

00:26:06,269 --> 00:26:10,829
vendors involved and the reason why is

00:26:07,949 --> 00:26:14,699
because people using they are only

00:26:10,829 --> 00:26:18,209
willing and able to take on certain kind

00:26:14,699 --> 00:26:20,459
of solving certain tactical problems so

00:26:18,209 --> 00:26:22,229
if I am a company using spinnaker for my

00:26:20,459 --> 00:26:25,199
specific use case I'm not going to be

00:26:22,229 --> 00:26:28,079
putting ten people to you know build a

00:26:25,199 --> 00:26:30,239
plug ability framework for spinnaker or

00:26:28,079 --> 00:26:31,769
you know build a lightweight version so

00:26:30,239 --> 00:26:35,129
the developers like I don't care about

00:26:31,769 --> 00:26:37,210
that but the enders absolutely are able

00:26:35,129 --> 00:26:39,580
to tackle long term roadmap

00:26:37,210 --> 00:26:42,700
items and today are the big vendors

00:26:39,580 --> 00:26:44,409
really capable of a muscle to tackle

00:26:42,700 --> 00:26:47,200
long term roadmap items we have Google

00:26:44,409 --> 00:26:53,500
and Netflix it would be good if we had

00:26:47,200 --> 00:26:56,799
more so now just to sum it all up this

00:26:53,500 --> 00:27:01,720
is kind of like where we are in my view

00:26:56,799 --> 00:27:03,669
and cloud agnostic yes everybody agrees

00:27:01,720 --> 00:27:05,470
that we are but I think that from the

00:27:03,669 --> 00:27:08,890
standpoint of actually turning that

00:27:05,470 --> 00:27:10,690
cloud agnosticism into practical code we

00:27:08,890 --> 00:27:12,909
could probably introduce some

00:27:10,690 --> 00:27:15,100
improvements config management agnostic

00:27:12,909 --> 00:27:16,480
and powerful workflow engine absolutely

00:27:15,100 --> 00:27:19,929
we are leaps and bounds ahead of

00:27:16,480 --> 00:27:21,789
everyone there developer-friendly not

00:27:19,929 --> 00:27:24,190
right now I don't know there is a easy

00:27:21,789 --> 00:27:26,799
way to solve this maybe something like

00:27:24,190 --> 00:27:28,270
the Jenkins X guys are doing like but I

00:27:26,799 --> 00:27:32,620
don't have like an out-of-the-box

00:27:28,270 --> 00:27:35,169
suggestion easy to write plugins I mean

00:27:32,620 --> 00:27:36,820
you can there is documentation on how to

00:27:35,169 --> 00:27:39,429
do it but it's not like there's a plug

00:27:36,820 --> 00:27:40,870
ability framework for doing it

00:27:39,429 --> 00:27:43,360
and finally the commercial vendor

00:27:40,870 --> 00:27:45,039
community is still fairly limited

00:27:43,360 --> 00:27:46,630
compared to the projects that our

00:27:45,039 --> 00:27:49,690
standards look at the comparison actor

00:27:46,630 --> 00:27:51,580
to Linux or kubernetes or even OpenStack

00:27:49,690 --> 00:27:54,340
which I know most people don't like very

00:27:51,580 --> 00:27:55,779
much the vendor behind that the

00:27:54,340 --> 00:27:59,860
community of vendors investing in it

00:27:55,779 --> 00:28:02,830
it's not quite there for spinnaker but I

00:27:59,860 --> 00:28:08,649
want to end on a positive note and I

00:28:02,830 --> 00:28:11,110
want to say that in my view software can

00:28:08,649 --> 00:28:13,240
always be changed it's easier it's I

00:28:11,110 --> 00:28:16,029
mean it's not easy but it's it's doable

00:28:13,240 --> 00:28:19,149
what's very unique and what you cannot

00:28:16,029 --> 00:28:21,070
predict and you cannot kind of build a

00:28:19,149 --> 00:28:23,020
formula for and continue doing

00:28:21,070 --> 00:28:25,179
replicable is actually building

00:28:23,020 --> 00:28:27,279
communities so you can't just say can

00:28:25,179 --> 00:28:28,929
you can build the best possible

00:28:27,279 --> 00:28:30,789
continuous delivery piece of software

00:28:28,929 --> 00:28:33,039
out there put an open source and nobody

00:28:30,789 --> 00:28:35,440
will care with spinnaker that's not the

00:28:33,039 --> 00:28:38,559
case we're all here we have already a

00:28:35,440 --> 00:28:41,049
big community and 350 people have come

00:28:38,559 --> 00:28:42,850
here today to actually collaborate and

00:28:41,049 --> 00:28:45,610
figure out how we take this forward this

00:28:42,850 --> 00:28:48,070
is a unique aspect that nobody has in

00:28:45,610 --> 00:28:51,040
the continuous delivery space today that

00:28:48,070 --> 00:28:53,470
I think we have to absolutely cap

00:28:51,040 --> 00:28:56,200
zone and do our best to navigate some of

00:28:53,470 --> 00:28:57,180
his obstacles that's all I had

00:28:56,200 --> 00:29:02,809
thank you

00:28:57,180 --> 00:29:02,809

YouTube URL: https://www.youtube.com/watch?v=dKD0vVdkHNA


