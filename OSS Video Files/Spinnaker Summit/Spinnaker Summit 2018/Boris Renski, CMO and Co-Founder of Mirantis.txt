Title: Boris Renski, CMO and Co-Founder of Mirantis
Publication date: 2018-10-27
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:05,430
2010 was a very pivotal year for us when

00:00:03,149 --> 00:00:08,189
we decided that we're gonna become much

00:00:05,430 --> 00:00:11,340
more focused and we knew that we wanted

00:00:08,189 --> 00:00:14,490
to focus on open source infrastructure

00:00:11,340 --> 00:00:19,070
but we weren't sure what what what what

00:00:14,490 --> 00:00:21,570
to pick and at the time

00:00:19,070 --> 00:00:23,010
Amazon was very popular and a whole

00:00:21,570 --> 00:00:26,099
bunch of our kind of open source

00:00:23,010 --> 00:00:28,560
alternatives emerged there was cloud

00:00:26,099 --> 00:00:31,830
stack it was OpenStack eucalyptus open

00:00:28,560 --> 00:00:33,719
nebula a bunch of stuff and we looked at

00:00:31,830 --> 00:00:35,610
all the stuff and of course our

00:00:33,719 --> 00:00:38,570
engineers chimed in and you know they

00:00:35,610 --> 00:00:41,700
said ah you know we should definitely do

00:00:38,570 --> 00:00:44,430
anything but OpenStack because its total

00:00:41,700 --> 00:00:47,430
crap it's written in Python it doesn't

00:00:44,430 --> 00:00:49,860
work there's no usage most likely best

00:00:47,430 --> 00:00:53,219
candidate let's do cloud stack it's Java

00:00:49,860 --> 00:00:56,100
it's very good interface 200 plus users

00:00:53,219 --> 00:00:59,219
it's got everything going for it really

00:00:56,100 --> 00:01:04,010
good elegant code let's do that so you

00:00:59,219 --> 00:01:07,530
know we kind of weighed but ultimately

00:01:04,010 --> 00:01:09,390
figured that maybe you know betting on

00:01:07,530 --> 00:01:10,950
the community would be important and we

00:01:09,390 --> 00:01:13,320
decided to put our eggs on the OpenStack

00:01:10,950 --> 00:01:17,430
basket and in the next two years the

00:01:13,320 --> 00:01:19,549
following happens and today you know you

00:01:17,430 --> 00:01:22,619
can argue indefinitely whether or not

00:01:19,549 --> 00:01:25,650
OpenStack is crap and whether or not you

00:01:22,619 --> 00:01:27,869
know it's working well or not but if you

00:01:25,650 --> 00:01:30,650
want to build an open-source private

00:01:27,869 --> 00:01:33,750
cloud where you're castrating VMs and

00:01:30,650 --> 00:01:35,250
you want to hire people that will be

00:01:33,750 --> 00:01:37,590
able to do that or will be able to

00:01:35,250 --> 00:01:39,600
support that good luck trying to hire

00:01:37,590 --> 00:01:42,450
people that will support cloud stack or

00:01:39,600 --> 00:01:45,149
open nebula or eucalyptus all of these

00:01:42,450 --> 00:01:50,130
things today a largely gone and for that

00:01:45,149 --> 00:01:53,250
specific use case we have OpenStack fast

00:01:50,130 --> 00:01:56,250
forward maybe three four years from that

00:01:53,250 --> 00:01:59,479
date and again we are kind of in the

00:01:56,250 --> 00:02:02,040
same situation where docker and

00:01:59,479 --> 00:02:05,759
immutable infrastructure now becoming a

00:02:02,040 --> 00:02:08,879
thing and our team is building kind of a

00:02:05,759 --> 00:02:11,790
new architecture for delivering

00:02:08,879 --> 00:02:13,860
OpenStack and the idea is that we want

00:02:11,790 --> 00:02:15,930
to contain rise all of the services

00:02:13,860 --> 00:02:18,810
deliver them in the mutable containers

00:02:15,930 --> 00:02:20,520
therefore greatly simplify the lifecycle

00:02:18,810 --> 00:02:23,640
management of it and we're thinking of

00:02:20,520 --> 00:02:27,360
what container scheduler substrate

00:02:23,640 --> 00:02:29,420
should we use to actually reaaargh

00:02:27,360 --> 00:02:33,360
attacked our OpenStack distribution

00:02:29,420 --> 00:02:35,880
again same exercise of course the one

00:02:33,360 --> 00:02:39,300
that's been around at that point for a

00:02:35,880 --> 00:02:41,880
while is mezzos but swarm is kind of you

00:02:39,300 --> 00:02:45,540
know also popular among developers so

00:02:41,880 --> 00:02:47,040
and just recently what kubernetes is

00:02:45,540 --> 00:02:48,930
released and it's just an a toy that

00:02:47,040 --> 00:02:49,320
came out of Google nobody knows what it

00:02:48,930 --> 00:02:51,360
is

00:02:49,320 --> 00:02:54,030
right so of course our developers look

00:02:51,360 --> 00:02:57,180
at the code nez was really solid written

00:02:54,030 --> 00:03:00,480
in C++ been around for ten years scales

00:02:57,180 --> 00:03:03,150
to thousands of nodes very good to layer

00:03:00,480 --> 00:03:05,600
scheduling everything's awesome right

00:03:03,150 --> 00:03:08,810
kubernetes like yeah what is this crap

00:03:05,600 --> 00:03:11,610
but again from a community standpoint

00:03:08,810 --> 00:03:14,790
the dynamic looks like it was back then

00:03:11,610 --> 00:03:16,890
already in favor of kubernetes so we

00:03:14,790 --> 00:03:20,430
made a choice in favor of kubernetes at

00:03:16,890 --> 00:03:24,209
that time again and of course this is

00:03:20,430 --> 00:03:27,810
how things have played out up to today

00:03:24,209 --> 00:03:32,580
and again if you are doing anything of

00:03:27,810 --> 00:03:35,400
container scheduling I would argue if

00:03:32,580 --> 00:03:38,850
you chose mezzos and I know that Netflix

00:03:35,400 --> 00:03:42,420
uses mezzos but hiring people to

00:03:38,850 --> 00:03:45,120
maintain anything mesos based is a much

00:03:42,420 --> 00:03:50,760
bigger challenge than if it was based on

00:03:45,120 --> 00:03:52,320
kubernetes so ultimately the key point I

00:03:50,760 --> 00:03:55,709
wanted to make is that a lot of people

00:03:52,320 --> 00:04:00,239
see open-source as like a licensing

00:03:55,709 --> 00:04:02,430
model or like a model for developing

00:04:00,239 --> 00:04:04,100
software even but what's very important

00:04:02,430 --> 00:04:07,080
about open-source in my view is that

00:04:04,100 --> 00:04:09,660
it's a it's a framework for achieving

00:04:07,080 --> 00:04:12,570
consensus on a solution to a broad

00:04:09,660 --> 00:04:14,220
problem so when we're trying to get into

00:04:12,570 --> 00:04:15,930
like the open source scene in the

00:04:14,220 --> 00:04:18,030
beginning most of our engineers whereas

00:04:15,930 --> 00:04:20,970
we just hated it and the reason why they

00:04:18,030 --> 00:04:22,710
hate it is because no you go in and you

00:04:20,970 --> 00:04:24,790
say that here I'm gonna you know I wrote

00:04:22,710 --> 00:04:26,920
this code please merge it for me and

00:04:24,790 --> 00:04:29,080
you know some idiot on the mailing list

00:04:26,920 --> 00:04:30,670
comes out and says and it you wrote it

00:04:29,080 --> 00:04:32,650
wrong you have to do it differently like

00:04:30,670 --> 00:04:36,010
ah he doesn't know and all this arguing

00:04:32,650 --> 00:04:37,600
so it's so slow and I'd rather just do

00:04:36,010 --> 00:04:39,970
it myself forget about all of these

00:04:37,600 --> 00:04:42,820
open-source people and it'll be the best

00:04:39,970 --> 00:04:44,080
solution ever now the problem is that

00:04:42,820 --> 00:04:47,050
when it comes to this kind of generic

00:04:44,080 --> 00:04:49,090
solutions this consensus has to be

00:04:47,050 --> 00:04:51,340
reached at some point so either I take

00:04:49,090 --> 00:04:54,160
it and I write it as my proprietary

00:04:51,340 --> 00:04:56,590
solution and then after it's there I

00:04:54,160 --> 00:04:59,140
have to go and convince other users and

00:04:56,590 --> 00:05:01,240
that might be pre sales people sales

00:04:59,140 --> 00:05:03,520
people marketing people maybe developers

00:05:01,240 --> 00:05:05,200
just to explain that this is a solution

00:05:03,520 --> 00:05:07,930
is good or I can do it on the front end

00:05:05,200 --> 00:05:11,260
there is no way around it you have to

00:05:07,930 --> 00:05:12,940
get the broad buy-in around the solution

00:05:11,260 --> 00:05:14,590
that you've developed and this is an

00:05:12,940 --> 00:05:18,250
open source world you get that buy-in

00:05:14,590 --> 00:05:21,400
ahead of time so it takes maybe a little

00:05:18,250 --> 00:05:23,620
bit slower and longer but ultimately the

00:05:21,400 --> 00:05:25,990
product of it is better it's kind of

00:05:23,620 --> 00:05:28,540
like you know you can build a house

00:05:25,990 --> 00:05:30,160
really fast without you know going to an

00:05:28,540 --> 00:05:33,040
architect or spending any time on

00:05:30,160 --> 00:05:34,450
permits but then this house not going to

00:05:33,040 --> 00:05:36,220
be great in so Sara Lee it's the same

00:05:34,450 --> 00:05:40,710
thing exact thing of open-source in my

00:05:36,220 --> 00:05:45,550
view so now let's talk a little bit

00:05:40,710 --> 00:05:47,400
about the competition or I don't know if

00:05:45,550 --> 00:05:51,070
it's in competition it's more like

00:05:47,400 --> 00:05:53,860
alternatives or various other solutions

00:05:51,070 --> 00:05:56,320
that can stifle spinnaker from becoming

00:05:53,860 --> 00:05:58,090
a de-facto standard and by the way you

00:05:56,320 --> 00:05:59,500
know I wanted to point some of these

00:05:58,090 --> 00:06:01,060
things out because I think that it's

00:05:59,500 --> 00:06:03,100
important for us as a community to be

00:06:01,060 --> 00:06:06,790
aware of all of the things that are out

00:06:03,100 --> 00:06:08,470
there like walking the floor of course

00:06:06,790 --> 00:06:11,590
we're all living in a spinnaker bubble

00:06:08,470 --> 00:06:13,600
including myself to some extent and I

00:06:11,590 --> 00:06:15,550
hear some people saying like oh yes

00:06:13,600 --> 00:06:17,500
spinnaker already won that's it like via

00:06:15,550 --> 00:06:19,570
you know continues the we are V standard

00:06:17,500 --> 00:06:22,780
for continuous delivery I'm not

00:06:19,570 --> 00:06:24,220
convinced with us yet the case and I

00:06:22,780 --> 00:06:28,650
think that it's important to kind of

00:06:24,220 --> 00:06:31,330
like open our eyes as to maybe why not

00:06:28,650 --> 00:06:33,640
so the first and I split everything into

00:06:31,330 --> 00:06:37,600
the categories broad categories of like

00:06:33,640 --> 00:06:38,310
I would say spinnaker alternatives or

00:06:37,600 --> 00:06:42,430
competitor

00:06:38,310 --> 00:06:44,610
the first and biggest one that based on

00:06:42,430 --> 00:06:48,340
the conversations we've had with our

00:06:44,610 --> 00:06:49,960
customers is basically Jenkins Plus DIY

00:06:48,340 --> 00:06:52,600
doesn't have to be Jenkins but usually

00:06:49,960 --> 00:06:55,270
DIY in a space very heavily revolves

00:06:52,600 --> 00:06:58,390
around Jenkins and this is a quote from

00:06:55,270 --> 00:07:00,790
Citibank that is like one among many

00:06:58,390 --> 00:07:03,580
that has invested a lot into their own

00:07:00,790 --> 00:07:06,160
release management based on Jenkins and

00:07:03,580 --> 00:07:07,960
it's very hard to displace but I wanted

00:07:06,160 --> 00:07:09,490
to talk a little bit more about why I

00:07:07,960 --> 00:07:11,650
think it's a real competitor because you

00:07:09,490 --> 00:07:13,810
can say that you know like Oh DIY is

00:07:11,650 --> 00:07:16,300
always a temporary phenomenon it doesn't

00:07:13,810 --> 00:07:19,330
last it can go away I this historically

00:07:16,300 --> 00:07:21,970
it's been kind of the case but I think

00:07:19,330 --> 00:07:24,700
that Jenkins Plus DIY when it comes to

00:07:21,970 --> 00:07:27,880
CD is particularly sticky and the reason

00:07:24,700 --> 00:07:29,650
why is particularly sticky is because of

00:07:27,880 --> 00:07:31,720
this kind of value scale so you can take

00:07:29,650 --> 00:07:35,410
any software you can put it anywhere on

00:07:31,720 --> 00:07:37,570
this value scale over there where on one

00:07:35,410 --> 00:07:39,250
hand one side you have you know the

00:07:37,570 --> 00:07:41,350
software is a lot of value in the code

00:07:39,250 --> 00:07:43,360
and on the other side you have a

00:07:41,350 --> 00:07:47,580
software's a lot of value is actually in

00:07:43,360 --> 00:07:51,340
the best practices and on the left side

00:07:47,580 --> 00:07:53,710
where yeah the left side for you the

00:07:51,340 --> 00:07:56,520
examples like you know Linux Android

00:07:53,710 --> 00:07:59,110
MySQL there's a lot of value in a code

00:07:56,520 --> 00:08:00,810
but on the right side you have solutions

00:07:59,110 --> 00:08:04,300
that are more of like you know business

00:08:00,810 --> 00:08:06,460
applications CRM supply chain management

00:08:04,300 --> 00:08:08,950
ITSM they are tied into the business

00:08:06,460 --> 00:08:11,860
process and you can put any piece of

00:08:08,950 --> 00:08:13,870
software on that scale anywhere and

00:08:11,860 --> 00:08:18,700
depending on where it is on that scale

00:08:13,870 --> 00:08:22,000
you know the ease or you know how hard

00:08:18,700 --> 00:08:23,880
it is to displace the incumbent you know

00:08:22,000 --> 00:08:26,050
requires different dynamics so if you

00:08:23,880 --> 00:08:27,940
put spinnaker I would argue that

00:08:26,050 --> 00:08:30,160
spinnaker and not just spinnaker but can

00:08:27,940 --> 00:08:33,310
anything continues delivery related is

00:08:30,160 --> 00:08:37,930
probably you know somewhere a little

00:08:33,310 --> 00:08:40,630
closer to the the part where the values

00:08:37,930 --> 00:08:42,310
and best practices because a lot of the

00:08:40,630 --> 00:08:44,500
things that you do related to deployment

00:08:42,310 --> 00:08:46,570
is actually tying your business process

00:08:44,500 --> 00:08:49,690
into how the deployment works and it's

00:08:46,570 --> 00:08:51,990
really hard to displace that investment

00:08:49,690 --> 00:08:53,970
that you've done so you know like

00:08:51,990 --> 00:08:55,470
try to think of like you view you know

00:08:53,970 --> 00:08:57,000
if you've built something with spinnaker

00:08:55,470 --> 00:08:58,320
like imagine somebody comes in and says

00:08:57,000 --> 00:09:01,170
I have something much better you know

00:08:58,320 --> 00:09:02,850
it's going to be probably try to go tell

00:09:01,170 --> 00:09:04,680
India you know go throw away spinnaker

00:09:02,850 --> 00:09:06,540
go use some other standards probably not

00:09:04,680 --> 00:09:10,040
going to happen ever

00:09:06,540 --> 00:09:13,800
Jenkins DIY kind of in the same bucket

00:09:10,040 --> 00:09:17,690
so another big important bucket that I

00:09:13,800 --> 00:09:21,120
think it's important to be aware of is

00:09:17,690 --> 00:09:24,750
this thing called application release

00:09:21,120 --> 00:09:30,750
orchestration which even has a Gartner

00:09:24,750 --> 00:09:33,839
Magic Quadrant attached to it there is a

00:09:30,750 --> 00:09:36,270
lot of players there what we don't have

00:09:33,839 --> 00:09:39,270
going for them is that most of them were

00:09:36,270 --> 00:09:42,390
not built in a cloud native first

00:09:39,270 --> 00:09:44,850
fashion which spinnaker was their more

00:09:42,390 --> 00:09:46,230
kind of an extensions of you know how do

00:09:44,850 --> 00:09:50,220
you build your business process and

00:09:46,230 --> 00:09:52,770
extension of CI but they have been

00:09:50,220 --> 00:09:54,870
around for a long time they all know

00:09:52,770 --> 00:09:56,730
that continuous delivery and cloud

00:09:54,870 --> 00:09:58,860
native continuous delivery is the thing

00:09:56,730 --> 00:10:01,560
and most of these guys every position

00:09:58,860 --> 00:10:04,560
themselves as now continuous delivery

00:10:01,560 --> 00:10:06,209
guys and are doing something that one

00:10:04,560 --> 00:10:08,580
way or the other intersects of a

00:10:06,209 --> 00:10:10,380
continuous delivery space and you can

00:10:08,580 --> 00:10:12,870
really you know split all of these guys

00:10:10,380 --> 00:10:15,709
into two categories it's just kind of my

00:10:12,870 --> 00:10:19,470
subjective way to split them one is a

00:10:15,709 --> 00:10:21,270
release process centric arrow and

00:10:19,470 --> 00:10:23,010
everyone is orchestration centric and

00:10:21,270 --> 00:10:26,100
the orchestration centric are the you

00:10:23,010 --> 00:10:27,810
know the guys that were in configuration

00:10:26,100 --> 00:10:29,220
management space but they have built

00:10:27,810 --> 00:10:31,440
some sort of continuous delivery

00:10:29,220 --> 00:10:34,130
functionality on the top so puppet has

00:10:31,440 --> 00:10:37,380
puppet pipelines chef has chef automate

00:10:34,130 --> 00:10:38,730
Red Hat has ansible tower and openshift

00:10:37,380 --> 00:10:41,550
all of them are kind of dabbling in a

00:10:38,730 --> 00:10:46,560
space and then finally the third

00:10:41,550 --> 00:10:49,140
category that is also fairly credible is

00:10:46,560 --> 00:10:51,240
a CD as a service and CD is a service is

00:10:49,140 --> 00:10:53,610
split into two buckets there is a CD as

00:10:51,240 --> 00:10:55,980
a service that is part of some IAEA's so

00:10:53,610 --> 00:10:59,520
Google Cloud build or AWS called deploy

00:10:55,980 --> 00:11:01,980
or there's pure play guys like bamboo

00:10:59,520 --> 00:11:05,530
circle CI which people say you know it's

00:11:01,980 --> 00:11:09,120
CI but not really they also do CD

00:11:05,530 --> 00:11:13,030
harness which are here a pure-play

00:11:09,120 --> 00:11:14,920
hosted CD platforms so now if you're

00:11:13,030 --> 00:11:16,780
trying to put all together right I try

00:11:14,920 --> 00:11:18,370
to this is my subjective read and I

00:11:16,780 --> 00:11:21,340
don't know a bit curious to hear if you

00:11:18,370 --> 00:11:23,290
guys agree on it or not like where you

00:11:21,340 --> 00:11:26,350
know how much a solution is used today

00:11:23,290 --> 00:11:29,260
and how likely it is to be used in the

00:11:26,350 --> 00:11:32,890
future and map that to some sort of

00:11:29,260 --> 00:11:34,960
characteristics so if you look at

00:11:32,890 --> 00:11:37,150
Jenkins DIY it's very common

00:11:34,960 --> 00:11:40,600
Jenkins is everywhere there's some sort

00:11:37,150 --> 00:11:44,230
of DIY around it will it be used forever

00:11:40,600 --> 00:11:46,240
in the future I think somewhat but I

00:11:44,230 --> 00:11:48,700
don't think it's gonna be the thing I

00:11:46,240 --> 00:11:50,830
don't think that I think that continuous

00:11:48,700 --> 00:11:53,380
delivery space in general is complicated

00:11:50,830 --> 00:11:58,000
enough and big enough that there's gonna

00:11:53,380 --> 00:11:59,710
be substantial value in wrapping

00:11:58,000 --> 00:12:02,200
yourself around some sort of

00:11:59,710 --> 00:12:04,870
out-of-the-box standard approach rather

00:12:02,200 --> 00:12:06,070
than just DIY it so while it is still

00:12:04,870 --> 00:12:07,530
there today I don't think it's gonna

00:12:06,070 --> 00:12:10,030
stay like that forever

00:12:07,530 --> 00:12:13,120
second is configuration management

00:12:10,030 --> 00:12:16,510
centric Aero application release

00:12:13,120 --> 00:12:18,760
orchestration so it she have deploy a

00:12:16,510 --> 00:12:20,020
puppet pipelines so I think that you

00:12:18,760 --> 00:12:21,490
know these guys are everywhere that

00:12:20,020 --> 00:12:25,180
everybody uses configuration management

00:12:21,490 --> 00:12:28,440
some capacity as far as going into the

00:12:25,180 --> 00:12:31,780
continuous delivery space I'm not sure

00:12:28,440 --> 00:12:35,620
because most continuous delivery

00:12:31,780 --> 00:12:37,750
solutions will not be using a single

00:12:35,620 --> 00:12:39,220
configuration management stack most

00:12:37,750 --> 00:12:40,720
likely you'll have parts of the

00:12:39,220 --> 00:12:43,150
organization that's share parts of

00:12:40,720 --> 00:12:44,980
occasions puppet parts something else so

00:12:43,150 --> 00:12:47,190
because of that I don't think that going

00:12:44,980 --> 00:12:50,920
into the future is gonna be the thing

00:12:47,190 --> 00:12:52,840
next is a pipeline centric orchestration

00:12:50,920 --> 00:12:57,250
centric a release management software

00:12:52,840 --> 00:12:59,500
from that Magic Quadrant so according to

00:12:57,250 --> 00:13:02,290
Gartner it's used by 20% of the people

00:12:59,500 --> 00:13:04,420
today 20% of the enterprises 80% they

00:13:02,290 --> 00:13:06,550
project in 2023 I don't know how you can

00:13:04,420 --> 00:13:09,280
exactly believe these numbers but I do

00:13:06,550 --> 00:13:12,430
believe and I think that popularity of

00:13:09,280 --> 00:13:14,590
spinnaker itself shows that having a

00:13:12,430 --> 00:13:17,500
very good flexible sophisticated

00:13:14,590 --> 00:13:20,470
pipeline engine to kind of

00:13:17,500 --> 00:13:23,830
in bed your release business logic into

00:13:20,470 --> 00:13:25,270
it has a lot of value so that part going

00:13:23,830 --> 00:13:29,890
into the future I think is going to be

00:13:25,270 --> 00:13:31,690
very important host a tie to IAS I don't

00:13:29,890 --> 00:13:33,130
know I mean they're kind of used but not

00:13:31,690 --> 00:13:35,710
too much and I don't think it's gonna be

00:13:33,130 --> 00:13:40,000
used it's gonna be V standard simply

00:13:35,710 --> 00:13:42,040
because you know you want to be

00:13:40,000 --> 00:13:44,260
deploying across multiple cloud targets

00:13:42,040 --> 00:13:46,090
most people will not be just doing

00:13:44,260 --> 00:13:48,250
Amazon or just doing Google

00:13:46,090 --> 00:13:49,420
so there's camp fair that says that it's

00:13:48,250 --> 00:13:52,780
just gonna be only one I don't think

00:13:49,420 --> 00:13:54,670
it's gonna be only one and as such I

00:13:52,780 --> 00:13:58,510
think that that continuous delivery has

00:13:54,670 --> 00:14:00,670
to sit above the deployment target and

00:13:58,510 --> 00:14:02,610
finally hast hosted pure play I think

00:14:00,670 --> 00:14:05,380
that probably is going to be used a lot

00:14:02,610 --> 00:14:07,600
and it does have a shot at the coming

00:14:05,380 --> 00:14:11,910
standard simply because kind of a hosted

00:14:07,600 --> 00:14:14,590
model as a delivery model you know is

00:14:11,910 --> 00:14:17,470
historically been improving itself out

00:14:14,590 --> 00:14:21,580
as V way to go across all layers of a

00:14:17,470 --> 00:14:23,860
stack and pure play is important for all

00:14:21,580 --> 00:14:26,080
the reasons I described so if you look

00:14:23,860 --> 00:14:27,550
at kind of a you know this graph like

00:14:26,080 --> 00:14:29,350
where do you want to be and how the

00:14:27,550 --> 00:14:32,620
spinnaker map today

00:14:29,350 --> 00:14:36,100
I think spinnaker has a lot going for it

00:14:32,620 --> 00:14:39,670
to actually you know be right there so

00:14:36,100 --> 00:14:42,220
it is cloud agnostic it is configuration

00:14:39,670 --> 00:14:45,730
management agnostic and it does have

00:14:42,220 --> 00:14:48,850
very powerful pipeline on workflow so

00:14:45,730 --> 00:14:50,620
it's got a lot going now let's talk a

00:14:48,850 --> 00:14:54,520
little bit about some of the things that

00:14:50,620 --> 00:14:56,470
I think we could improve on and some of

00:14:54,520 --> 00:15:03,100
the if you know obstacles of threats so

00:14:56,470 --> 00:15:05,170
to speak the first one is a kubernetes

00:15:03,100 --> 00:15:06,900
and all of the solutions that are doing

00:15:05,170 --> 00:15:10,450
continuous delivery around kubernetes

00:15:06,900 --> 00:15:13,570
now the reason why that's a threat is

00:15:10,450 --> 00:15:16,300
because like I said when I was talking

00:15:13,570 --> 00:15:17,710
about you know Jenkins DIY big in big

00:15:16,300 --> 00:15:19,330
biggest competitor and being hard to

00:15:17,710 --> 00:15:21,700
displace because it's tied into the

00:15:19,330 --> 00:15:23,950
business process one of the ways that

00:15:21,700 --> 00:15:27,010
you displace to be incumbent is when

00:15:23,950 --> 00:15:29,740
there is a new deployment substrate out

00:15:27,010 --> 00:15:30,880
there so the reason why spinnaker became

00:15:29,740 --> 00:15:32,530
popular among

00:15:30,880 --> 00:15:34,870
you know I stopped to buncha spinnaker

00:15:32,530 --> 00:15:36,610
customers because you need to deploy the

00:15:34,870 --> 00:15:38,650
cloud right we never deployed to cloud

00:15:36,610 --> 00:15:41,380
before so how do you do that well we

00:15:38,650 --> 00:15:42,880
have this new tool ok let's do that with

00:15:41,380 --> 00:15:44,830
kubernetes is kind of the same thing

00:15:42,880 --> 00:15:46,330
kubernetes is becoming a very popular

00:15:44,830 --> 00:15:48,400
deployment substrate and there's a bunch

00:15:46,330 --> 00:15:50,740
of guys that are just squarely focusing

00:15:48,400 --> 00:15:53,470
on doing continuous delivery for

00:15:50,740 --> 00:15:55,960
kubernetes not to mention that

00:15:53,470 --> 00:15:59,850
kubernetes itself is also building its

00:15:55,960 --> 00:16:01,860
native tooling and API objects for

00:15:59,850 --> 00:16:07,690
handling ever more sophisticated

00:16:01,860 --> 00:16:09,940
deployments so what a spinnaker lack to

00:16:07,690 --> 00:16:11,800
be one of these guys on the left there

00:16:09,940 --> 00:16:15,640
that are actually becoming V kubernetes

00:16:11,800 --> 00:16:17,410
deployment tools so I think that these

00:16:15,640 --> 00:16:20,830
are the three areas that all of these

00:16:17,410 --> 00:16:23,350
guys on the Left have that spinnaker has

00:16:20,830 --> 00:16:25,990
to varying degree so you have to be

00:16:23,350 --> 00:16:27,370
lightweight if you want to be you know

00:16:25,990 --> 00:16:30,250
developer friendly but I like to wait I

00:16:27,370 --> 00:16:32,710
mean like a developer can take this

00:16:30,250 --> 00:16:34,990
thing set it up really quickly and start

00:16:32,710 --> 00:16:36,490
playing with it and try it out so if you

00:16:34,990 --> 00:16:38,830
talk to knobs guys this is completely

00:16:36,490 --> 00:16:40,090
not relevant because they I just you

00:16:38,830 --> 00:16:43,230
know it's my ops team is running

00:16:40,090 --> 00:16:46,120
spinnaker why does developer care well

00:16:43,230 --> 00:16:47,980
developers have a lot of influence when

00:16:46,120 --> 00:16:50,140
it comes to making decisions around

00:16:47,980 --> 00:16:52,360
tooling when it comes to Greenfield

00:16:50,140 --> 00:16:54,040
initiatives so if they've never touched

00:16:52,360 --> 00:16:55,780
something like spinnaker I've never seen

00:16:54,040 --> 00:16:57,610
it and they can't even do it

00:16:55,780 --> 00:17:00,220
they're not gonna recommend it as we

00:16:57,610 --> 00:17:01,810
think to deploy to kubernetes and if

00:17:00,220 --> 00:17:03,490
they can't download it if it's not

00:17:01,810 --> 00:17:05,439
lightweight enough we can play with it

00:17:03,490 --> 00:17:07,209
it probably will never have seen it and

00:17:05,439 --> 00:17:09,220
I bet you anything but if you go to

00:17:07,209 --> 00:17:10,540
kubernetes cube con and you ask people

00:17:09,220 --> 00:17:14,170
what are we doing for deploy into

00:17:10,540 --> 00:17:15,370
kubernetes not so many of them today are

00:17:14,170 --> 00:17:19,569
gonna tell you that we are using

00:17:15,370 --> 00:17:23,860
spinnaker github centric so making some

00:17:19,569 --> 00:17:26,589
progress with a declarative delivery but

00:17:23,860 --> 00:17:29,110
again I think that historically a

00:17:26,589 --> 00:17:30,580
spinnaker was built of you know it's

00:17:29,110 --> 00:17:32,350
kind of both a benefit and a curse but

00:17:30,580 --> 00:17:34,570
very kind of UI heavy and make it very

00:17:32,350 --> 00:17:36,670
simple and out of the box and was

00:17:34,570 --> 00:17:38,440
lacking a little bit in the get-ups and

00:17:36,670 --> 00:17:41,440
declarative delivery space which now is

00:17:38,440 --> 00:17:43,820
being remedied and finally kind of

00:17:41,440 --> 00:17:46,130
kubernetes centricity so

00:17:43,820 --> 00:17:49,340
we have you know v1 provider which

00:17:46,130 --> 00:17:51,140
clearly was not very welcomed by the

00:17:49,340 --> 00:17:53,120
kubernetes community simply because it

00:17:51,140 --> 00:17:56,030
can't use kubernetes primitives and now

00:17:53,120 --> 00:17:57,890
I have a v2 provider which I feel kind

00:17:56,030 --> 00:18:00,350
of swings almost like all the way in the

00:17:57,890 --> 00:18:04,430
other direction where you can do

00:18:00,350 --> 00:18:05,900
anything but to some extent it heals a

00:18:04,430 --> 00:18:07,850
lot of a value and simplification

00:18:05,900 --> 00:18:09,950
abstraction that spinnaker brings to the

00:18:07,850 --> 00:18:11,690
table so I think that going forward

00:18:09,950 --> 00:18:14,510
probably some tuning still needs to

00:18:11,690 --> 00:18:19,070
happen in the spinnaker community by the

00:18:14,510 --> 00:18:21,170
spinnaker users to get that right now

00:18:19,070 --> 00:18:23,690
the one big thing that spinnaker has

00:18:21,170 --> 00:18:27,290
going for it against anybody in that you

00:18:23,690 --> 00:18:30,890
know we are VCD for kubernetes camp is

00:18:27,290 --> 00:18:33,170
that it's natively designed to be

00:18:30,890 --> 00:18:35,450
working with multiple deployment targets

00:18:33,170 --> 00:18:37,010
so the big know-how in continuous

00:18:35,450 --> 00:18:38,990
delivery that spinnaker brings to the

00:18:37,010 --> 00:18:41,960
table and my view is this marriage

00:18:38,990 --> 00:18:43,760
between sophisticated pipeline engine to

00:18:41,960 --> 00:18:46,670
build to kind of embed your deployment

00:18:43,760 --> 00:18:49,730
logic and awareness of the deployment

00:18:46,670 --> 00:18:51,890
target which is you know today is

00:18:49,730 --> 00:18:53,660
implemented for cloud driver marrying

00:18:51,890 --> 00:18:55,640
these two together and being able to

00:18:53,660 --> 00:18:57,530
orchestrate the deployment target and

00:18:55,640 --> 00:18:59,960
with the understanding of the deployment

00:18:57,530 --> 00:19:01,550
logic that's that's basically the the

00:18:59,960 --> 00:19:04,010
cool stuff of the continuous delivery

00:19:01,550 --> 00:19:07,040
and you'll never be deploying to a

00:19:04,010 --> 00:19:10,090
single deployment target the world is

00:19:07,040 --> 00:19:12,890
not going to be all on kubernetes so

00:19:10,090 --> 00:19:15,890
that Spinnaker's got going for it out of

00:19:12,890 --> 00:19:19,040
the box but now that we're on this topic

00:19:15,890 --> 00:19:20,990
I wanted to touch on you know the

00:19:19,040 --> 00:19:23,360
deployment targets and the whole notion

00:19:20,990 --> 00:19:25,790
of plugg ability in spinnaker which i

00:19:23,360 --> 00:19:28,340
think is another potential obstacle that

00:19:25,790 --> 00:19:33,110
we as a community should focus on and

00:19:28,340 --> 00:19:35,690
work on improving so you know multiple

00:19:33,110 --> 00:19:38,510
deployment targets is very important and

00:19:35,690 --> 00:19:41,420
we all agree and you know I think that

00:19:38,510 --> 00:19:42,260
if you listen to angel speak or if you

00:19:41,420 --> 00:19:44,120
talk to anybody in the community

00:19:42,260 --> 00:19:46,070
everybody agrees that like one of the

00:19:44,120 --> 00:19:48,590
core architectural tenets of spinnaker

00:19:46,070 --> 00:19:51,680
today and going forward is plug ability

00:19:48,590 --> 00:19:53,540
yet if you look into certain spaces into

00:19:51,680 --> 00:19:55,460
certain kind of areas of how this plug

00:19:53,540 --> 00:19:57,290
ability is implemented I think it's

00:19:55,460 --> 00:19:58,940
still imperfect

00:19:57,290 --> 00:20:00,740
if you go to you know the spinnaker

00:19:58,940 --> 00:20:02,690
documentation is how do I build my own

00:20:00,740 --> 00:20:05,150
cloud driver that's literally what's

00:20:02,690 --> 00:20:05,660
there like on the website it's very hard

00:20:05,150 --> 00:20:08,180
to do

00:20:05,660 --> 00:20:10,520
don't try it unless you're expert which

00:20:08,180 --> 00:20:12,590
is true because building a new cloud

00:20:10,520 --> 00:20:14,480
driver or changing cloud driver like the

00:20:12,590 --> 00:20:18,320
plug ability concept that we have today

00:20:14,480 --> 00:20:20,480
means really forking spinnaker changing

00:20:18,320 --> 00:20:23,090
some of the components then merging them

00:20:20,480 --> 00:20:24,920
back there isn't really an out of the

00:20:23,090 --> 00:20:27,230
box plug-in mechanism I can't write my

00:20:24,920 --> 00:20:29,060
plug-in and have my cloud driver and

00:20:27,230 --> 00:20:32,210
spinnaker will naturally just take it

00:20:29,060 --> 00:20:33,740
right like I can write my Yama file for

00:20:32,210 --> 00:20:36,320
the kubernetes deployment object for

00:20:33,740 --> 00:20:39,980
instance so that's another thing that I

00:20:36,320 --> 00:20:44,960
think we in the community need to work

00:20:39,980 --> 00:20:48,170
on and finally and this was an

00:20:44,960 --> 00:20:49,730
absolutely a kind of pivotal I think

00:20:48,170 --> 00:20:55,760
conference and that spinnaker has

00:20:49,730 --> 00:20:57,230
adopted finally formal governance and I

00:20:55,760 --> 00:20:59,300
think that we started solving this

00:20:57,230 --> 00:21:00,890
problem already but I think that still

00:20:59,300 --> 00:21:04,610
have a ways to go if you look at the

00:21:00,890 --> 00:21:06,140
number of vendors contributing to an

00:21:04,610 --> 00:21:10,700
open-source project and you compare for

00:21:06,140 --> 00:21:15,050
example kubernetes to spinnaker 133 for

00:21:10,700 --> 00:21:18,320
kubernetes 16 for spinnaker and you can

00:21:15,050 --> 00:21:20,510
argue that actually is great you have so

00:21:18,320 --> 00:21:23,090
many contributors there are users let's

00:21:20,510 --> 00:21:25,400
have only users contribute but I think

00:21:23,090 --> 00:21:27,080
that for an open-source project to

00:21:25,400 --> 00:21:28,760
become a standard you absolutely need

00:21:27,080 --> 00:21:31,910
multiple vendors involved and the reason

00:21:28,760 --> 00:21:35,720
why is because people using they are

00:21:31,910 --> 00:21:38,150
only willing and able to take on certain

00:21:35,720 --> 00:21:41,060
kind of solving certain tactical

00:21:38,150 --> 00:21:43,040
problems so if I am a company using

00:21:41,060 --> 00:21:45,860
spinnaker for my specific use case I'm

00:21:43,040 --> 00:21:47,990
not going to be putting 10 people to you

00:21:45,860 --> 00:21:50,480
know build a plug ability framework for

00:21:47,990 --> 00:21:52,160
spinnaker or you know build a

00:21:50,480 --> 00:21:55,220
lightweight version so the developers

00:21:52,160 --> 00:21:57,740
like I don't care about that but vendors

00:21:55,220 --> 00:22:00,500
absolutely are able to tackle long term

00:21:57,740 --> 00:22:03,380
roadmap items and today are the big

00:22:00,500 --> 00:22:05,450
vendors really capable of a mussel to

00:22:03,380 --> 00:22:08,270
tackle long term roadmap items we have

00:22:05,450 --> 00:22:10,250
Google and Netflix it would be good if

00:22:08,270 --> 00:22:15,000
we had more

00:22:10,250 --> 00:22:19,400
so now just to sum it all up this is

00:22:15,000 --> 00:22:23,100
kind of like where we are in my view and

00:22:19,400 --> 00:22:25,080
cloud agnostic yes everybody agrees that

00:22:23,100 --> 00:22:26,820
we are but I think that from the

00:22:25,080 --> 00:22:30,240
standpoint of actually turning that

00:22:26,820 --> 00:22:32,040
cloud agnosticism into practical code we

00:22:30,240 --> 00:22:34,230
could probably introduce some

00:22:32,040 --> 00:22:36,420
improvements config management agnostic

00:22:34,230 --> 00:22:37,710
and powerful workflow engine absolutely

00:22:36,420 --> 00:22:40,350
we are leaps and bounds ahead of

00:22:37,710 --> 00:22:42,810
everyone there developer-friendly

00:22:40,350 --> 00:22:45,390
not right now I don't know there is a

00:22:42,810 --> 00:22:47,460
easy way to solve this maybe something

00:22:45,390 --> 00:22:49,140
like the Jenkins X guys are doing like

00:22:47,460 --> 00:22:51,960
but that I don't have like an

00:22:49,140 --> 00:22:55,470
out-of-the-box suggestion easy to write

00:22:51,960 --> 00:22:57,390
plugins I mean you can there is

00:22:55,470 --> 00:22:58,560
documentation on how to do it but it's

00:22:57,390 --> 00:23:01,530
not like there's a plug ability

00:22:58,560 --> 00:23:03,480
framework for doing it and finally the

00:23:01,530 --> 00:23:06,030
commercial vendor community is still

00:23:03,480 --> 00:23:07,530
fairly limited compared to the projects

00:23:06,030 --> 00:23:10,500
that are standards ok the compare

00:23:07,530 --> 00:23:12,420
spinnaker to Linux or kubernetes or even

00:23:10,500 --> 00:23:15,570
OpenStack which I know most people don't

00:23:12,420 --> 00:23:17,130
like very much the vendor behind that

00:23:15,570 --> 00:23:21,210
the community of vendors investing in it

00:23:17,130 --> 00:23:24,060
is not quite there for spinnaker but I

00:23:21,210 --> 00:23:30,000
want to end on a positive note and I

00:23:24,060 --> 00:23:32,490
want to say that in my view software can

00:23:30,000 --> 00:23:34,590
always be changed it's easier it's I

00:23:32,490 --> 00:23:37,380
mean it's not easy but it's it's doable

00:23:34,590 --> 00:23:40,470
what's very unique and what you cannot

00:23:37,380 --> 00:23:42,840
predict and you cannot kind of build a

00:23:40,470 --> 00:23:44,880
formula for and continue doing replicas

00:23:42,840 --> 00:23:46,770
bleah is actually building communities

00:23:44,880 --> 00:23:49,260
so you can't just say you can you can

00:23:46,770 --> 00:23:50,760
build the best possible continuous

00:23:49,260 --> 00:23:53,460
delivery piece of software out there put

00:23:50,760 --> 00:23:55,200
an open source and nobody will hear with

00:23:53,460 --> 00:23:58,190
spinnaker that's not the case we're all

00:23:55,200 --> 00:24:00,870
here we have already a big community and

00:23:58,190 --> 00:24:02,910
350 people have come here today to

00:24:00,870 --> 00:24:04,800
actually collaborate and figure out how

00:24:02,910 --> 00:24:07,800
we take this forward this is a unique

00:24:04,800 --> 00:24:10,860
aspect that nobody has in the continuous

00:24:07,800 --> 00:24:13,560
delivery space today that I think we

00:24:10,860 --> 00:24:14,940
have to absolutely capitalize on and do

00:24:13,560 --> 00:24:17,550
our best to navigate some of these

00:24:14,940 --> 00:24:18,420
obstacles that's all I had

00:24:17,550 --> 00:24:24,459
thank you

00:24:18,420 --> 00:24:24,459

YouTube URL: https://www.youtube.com/watch?v=XyMX5b7QACI


