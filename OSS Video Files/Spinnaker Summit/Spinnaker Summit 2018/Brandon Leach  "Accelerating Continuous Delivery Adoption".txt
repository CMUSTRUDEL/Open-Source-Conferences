Title: Brandon Leach  "Accelerating Continuous Delivery Adoption"
Publication date: 2018-10-24
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,270 --> 00:00:05,390
[Music]

00:00:09,780 --> 00:00:13,270
[Music]

00:00:16,580 --> 00:00:21,840
today I'm going to talk about how

00:00:18,869 --> 00:00:23,760
Lookout achieve continuous delivery you

00:00:21,840 --> 00:00:25,650
know I'm kind of kind of start with a

00:00:23,760 --> 00:00:27,900
little bit of history about where we

00:00:25,650 --> 00:00:29,699
were and then talk about how we

00:00:27,900 --> 00:00:31,439
navigated the decisions around our

00:00:29,699 --> 00:00:32,399
implementation and then towards the end

00:00:31,439 --> 00:00:35,510
I'm going to talk a little bit about

00:00:32,399 --> 00:00:38,670
where we're kind of headed in the future

00:00:35,510 --> 00:00:41,129
so yeah a little bit of about me I'm

00:00:38,670 --> 00:00:43,890
Brandon I manage platform engineering at

00:00:41,129 --> 00:00:46,079
lookout been working in technology for

00:00:43,890 --> 00:00:51,300
about 15 years and I've been at lookout

00:00:46,079 --> 00:00:54,000
for seven so first like a little bit

00:00:51,300 --> 00:00:55,710
about lookout right we were founded with

00:00:54,000 --> 00:00:58,230
the mission of making the world more

00:00:55,710 --> 00:01:01,649
secure as it became more connected by

00:00:58,230 --> 00:01:04,890
mobile devices our main focus is mobile

00:01:01,649 --> 00:01:06,390
endpoint security and we have a personal

00:01:04,890 --> 00:01:12,110
and enterprise product for Android and

00:01:06,390 --> 00:01:12,110
iOS right a little bit about our scale

00:01:14,960 --> 00:01:21,150
we've registered over a hundred million

00:01:17,909 --> 00:01:24,479
devices we acquire and analyze about

00:01:21,150 --> 00:01:28,320
90,000 mobile applications daily right

00:01:24,479 --> 00:01:31,700
we currently have about a hundred one

00:01:28,320 --> 00:01:35,220
hundred services and about you know

00:01:31,700 --> 00:01:38,040
2,500 ec2 instances we utilize a lot of

00:01:35,220 --> 00:01:41,600
like many AWS services like RDS DynamoDB

00:01:38,040 --> 00:01:44,220
simple workflow etc pretty standard you

00:01:41,600 --> 00:01:45,810
know first a little history to give a

00:01:44,220 --> 00:01:47,280
little bit more context is look out to

00:01:45,810 --> 00:01:50,610
infrastructure was originally born in

00:01:47,280 --> 00:01:52,170
the data center you know when we we

00:01:50,610 --> 00:01:55,530
eventually had about a thousand servers

00:01:52,170 --> 00:01:59,280
in 365 Maine about five years ago we

00:01:55,530 --> 00:02:01,770
started the process of migrating or

00:01:59,280 --> 00:02:04,920
launching services in AWS and we kind of

00:02:01,770 --> 00:02:09,989
ran in a hybrid AWS data center model

00:02:04,920 --> 00:02:11,910
for a while and and three years ago my

00:02:09,989 --> 00:02:13,530
team kicked off an effort to migrate us

00:02:11,910 --> 00:02:15,510
all to a device move everything to

00:02:13,530 --> 00:02:21,690
us and we've since shut down our

00:02:15,510 --> 00:02:23,430
datacenter so like lookout we've

00:02:21,690 --> 00:02:26,850
attempted and failed at achieving

00:02:23,430 --> 00:02:28,380
continuous delivery many times you know

00:02:26,850 --> 00:02:29,880
ever since I've been at lookout one of

00:02:28,380 --> 00:02:31,709
our biggest pain points has always been

00:02:29,880 --> 00:02:34,770
we need to speed up the deployment of

00:02:31,709 --> 00:02:37,530
features services bug fixes you know

00:02:34,770 --> 00:02:39,239
when I first got there we have doing

00:02:37,530 --> 00:02:41,640
we had a monolith and we were doing

00:02:39,239 --> 00:02:44,280
weekly releases right very painful

00:02:41,640 --> 00:02:46,769
weekly releases then we moved it to

00:02:44,280 --> 00:02:49,880
daily right and and then we started

00:02:46,769 --> 00:02:54,680
trying to achieve continuous delivery

00:02:49,880 --> 00:02:57,810
you know coinciding with our move to AWS

00:02:54,680 --> 00:03:00,870
we've struggled to build our own custom

00:02:57,810 --> 00:03:02,459
in-house CD tooling right and so I'd

00:03:00,870 --> 00:03:05,090
like to kind of just for a moment kind

00:03:02,459 --> 00:03:08,700
of take a look at some of those efforts

00:03:05,090 --> 00:03:09,840
so you know I spent a while trying to

00:03:08,700 --> 00:03:12,600
remember them all

00:03:09,840 --> 00:03:13,739
you know anybody here that were to look

00:03:12,600 --> 00:03:16,170
out would recognize some of these names

00:03:13,739 --> 00:03:19,320
birds probably recognizes some of them

00:03:16,170 --> 00:03:22,110
you know there there is a chef repo CK

00:03:19,320 --> 00:03:24,600
one ignitor Blackbird that was my

00:03:22,110 --> 00:03:26,220
attempt you know Nicks

00:03:24,600 --> 00:03:27,560
it was funny I was thinking about it one

00:03:26,220 --> 00:03:29,459
of these teams the other day I was I

00:03:27,560 --> 00:03:30,510
went to kind of check on and see how

00:03:29,459 --> 00:03:32,130
they were doing I said what are you guys

00:03:30,510 --> 00:03:34,560
doing they're like well we're building

00:03:32,130 --> 00:03:38,730
something like terraform in Haskell I

00:03:34,560 --> 00:03:43,769
was like oh wow cool yeah I'll check

00:03:38,730 --> 00:03:45,239
back later so yeah yeah so we you know

00:03:43,769 --> 00:03:46,890
all these attempts were made by really

00:03:45,239 --> 00:03:49,140
smart people right with really good

00:03:46,890 --> 00:03:52,950
intentions they they all ultimately

00:03:49,140 --> 00:03:55,290
ended in failure so let's take a closer

00:03:52,950 --> 00:03:56,880
look at some of these right and like

00:03:55,290 --> 00:03:59,370
kind of the technologies they used right

00:03:56,880 --> 00:04:02,540
see chef Capistrano

00:03:59,370 --> 00:04:05,970
Bato terraform docker ansible Nix

00:04:02,540 --> 00:04:07,530
Beanstalk you know maybe if we would

00:04:05,970 --> 00:04:10,760
have added salt stack and puppet we

00:04:07,530 --> 00:04:10,760
could have claimed we tried everything

00:04:10,829 --> 00:04:15,030
you know some of these projects died

00:04:12,690 --> 00:04:16,859
without onboarding a single service and

00:04:15,030 --> 00:04:18,030
others succeeded in onboarding

00:04:16,859 --> 00:04:22,530
significant portions of our

00:04:18,030 --> 00:04:24,570
infrastructure so eventually this is

00:04:22,530 --> 00:04:25,470
this is kind of like what we ended up at

00:04:24,570 --> 00:04:27,270
right

00:04:25,470 --> 00:04:32,069
48% blackbird

00:04:27,270 --> 00:04:35,039
mine 26% chef repo 15% Knicks 10%

00:04:32,069 --> 00:04:36,840
igniter right so we were left with like

00:04:35,039 --> 00:04:38,940
fragmented deployment methodologies

00:04:36,840 --> 00:04:40,620
which all were unsatisfactory and all

00:04:38,940 --> 00:04:43,860
fell short of our original continuous

00:04:40,620 --> 00:04:45,539
delivery goals almost all these tools

00:04:43,860 --> 00:04:47,340
were against some kind of state of like

00:04:45,539 --> 00:04:49,860
being abandoned and customers were

00:04:47,340 --> 00:04:51,690
frustrated and unsupported you know

00:04:49,860 --> 00:04:54,569
there wasn't a clear path forward like

00:04:51,690 --> 00:04:56,789
for net new services and and service

00:04:54,569 --> 00:04:59,099
owners were beginning to fragment

00:04:56,789 --> 00:05:00,960
further and and explored their own right

00:04:59,099 --> 00:05:03,870
so the situation was kind of getting out

00:05:00,960 --> 00:05:05,569
of control right our business simply

00:05:03,870 --> 00:05:07,949
needed to deliver features and services

00:05:05,569 --> 00:05:13,860
faster than our deployment tooling would

00:05:07,949 --> 00:05:15,539
allow us to so our leadership decided to

00:05:13,860 --> 00:05:18,150
reboot the service delivery efforts and

00:05:15,539 --> 00:05:19,819
and create a new yet another dedicated

00:05:18,150 --> 00:05:22,050
team to solve this issue

00:05:19,819 --> 00:05:23,969
you know I founded this team with the

00:05:22,050 --> 00:05:25,409
mission of like kind of of turning

00:05:23,969 --> 00:05:27,090
service delivery into a competitive

00:05:25,409 --> 00:05:28,409
advantage for lookout right that was

00:05:27,090 --> 00:05:30,509
kind of a that was my mission statement

00:05:28,409 --> 00:05:32,069
right if we if we could deliver features

00:05:30,509 --> 00:05:33,150
and services faster than the competition

00:05:32,069 --> 00:05:39,210
right

00:05:33,150 --> 00:05:40,919
we'll win so we call it SDP of which

00:05:39,210 --> 00:05:45,300
spinnaker is a huge part of it but I'm

00:05:40,919 --> 00:05:47,069
gonna mention that that many times in

00:05:45,300 --> 00:05:55,080
this presentation stands for service

00:05:47,069 --> 00:05:58,259
delivery platform so you know before

00:05:55,080 --> 00:06:00,990
before we started we wanted to look at

00:05:58,259 --> 00:06:04,650
past efforts kind of understand like try

00:06:00,990 --> 00:06:06,210
to understand why they failed you know

00:06:04,650 --> 00:06:07,529
and what were we gonna do different

00:06:06,210 --> 00:06:10,199
right what are we gonna do different

00:06:07,529 --> 00:06:12,419
than all these other people did so first

00:06:10,199 --> 00:06:15,330
we decided to treat SDP as an internal

00:06:12,419 --> 00:06:17,159
product previous attempts really had

00:06:15,330 --> 00:06:19,590
failed to engage their customers right

00:06:17,159 --> 00:06:22,199
they hadn't sought out their customers

00:06:19,590 --> 00:06:25,110
feedback or experiences you know to help

00:06:22,199 --> 00:06:26,639
guide direction you know rather than

00:06:25,110 --> 00:06:29,669
coming to our solutions with a solution

00:06:26,639 --> 00:06:30,960
that dictated their workflow we spent

00:06:29,669 --> 00:06:32,430
time trying to understand what our

00:06:30,960 --> 00:06:34,440
customers wanted you know their

00:06:32,430 --> 00:06:36,630
requirements their pain points you know

00:06:34,440 --> 00:06:38,940
we really spent a long time listening

00:06:36,630 --> 00:06:40,020
intently to their feedback until we were

00:06:38,940 --> 00:06:42,840
confident we understood

00:06:40,020 --> 00:06:44,720
how they viewed their situation right

00:06:42,840 --> 00:06:47,699
you know

00:06:44,720 --> 00:06:49,110
another another key thing is that we we

00:06:47,699 --> 00:06:51,900
were not building a solution that we'd

00:06:49,110 --> 00:06:53,159
help service owners operate like with

00:06:51,900 --> 00:06:55,319
them we wanted to give them full

00:06:53,159 --> 00:06:56,879
autonomy

00:06:55,319 --> 00:06:58,680
another thing we did different is we

00:06:56,879 --> 00:07:00,210
used off-the-shelf tooling right like

00:06:58,680 --> 00:07:02,099
again like I said that all the past

00:07:00,210 --> 00:07:03,870
attempts had in common was like glue

00:07:02,099 --> 00:07:05,460
code that tied together a bunch of

00:07:03,870 --> 00:07:09,240
different tools to craft a custom

00:07:05,460 --> 00:07:11,270
solution you know we asked ourselves so

00:07:09,240 --> 00:07:14,039
we looked at all these things we're like

00:07:11,270 --> 00:07:15,449
would any of these things survive as an

00:07:14,039 --> 00:07:18,479
open-source project and the answer was

00:07:15,449 --> 00:07:21,060
like no for all of them right so you

00:07:18,479 --> 00:07:22,860
know so instead we'd instead we decided

00:07:21,060 --> 00:07:24,419
to follow the community and leverage

00:07:22,860 --> 00:07:27,900
industry standard tooling and not

00:07:24,419 --> 00:07:30,139
reinvent the wheel right and then

00:07:27,900 --> 00:07:32,729
finally I think this is important but

00:07:30,139 --> 00:07:34,650
it's may be obvious but but I think it

00:07:32,729 --> 00:07:36,780
is important you know we embraced

00:07:34,650 --> 00:07:38,729
iteration right rather than going into

00:07:36,780 --> 00:07:40,590
the lab and coming out when we thought

00:07:38,729 --> 00:07:42,599
we had like crafted it perfect into in

00:07:40,590 --> 00:07:43,889
solution we sought to get something in

00:07:42,599 --> 00:07:46,590
our customers hands as quickly as

00:07:43,889 --> 00:07:46,969
possible and iterate based on their

00:07:46,590 --> 00:07:49,590
feedback

00:07:46,969 --> 00:07:51,870
you know we embraced imperfection and

00:07:49,590 --> 00:07:57,060
and tried to actually learn from our for

00:07:51,870 --> 00:07:58,169
them actually using our product so we

00:07:57,060 --> 00:07:59,639
wanted to make sure we were solving the

00:07:58,169 --> 00:08:01,710
most important problems for our

00:07:59,639 --> 00:08:03,210
customers we started by sending out a

00:08:01,710 --> 00:08:04,979
survey to all of our customers asking

00:08:03,210 --> 00:08:07,289
for the feedback an internal survey

00:08:04,979 --> 00:08:09,150
we've got a lot of varied responses but

00:08:07,289 --> 00:08:11,400
we were able to categorize and stack

00:08:09,150 --> 00:08:13,289
rank them here so here's the results

00:08:11,400 --> 00:08:15,060
right number one was unsupported non

00:08:13,289 --> 00:08:17,039
standard deployment tooling right this

00:08:15,060 --> 00:08:18,270
is the most reported issue many of our

00:08:17,039 --> 00:08:20,969
customers tooling was no longer

00:08:18,270 --> 00:08:23,819
supported internally or externally by a

00:08:20,969 --> 00:08:26,310
large larger community new service

00:08:23,819 --> 00:08:28,139
deployment is difficult right it simply

00:08:26,310 --> 00:08:30,779
took too much time and effort to launch

00:08:28,139 --> 00:08:33,360
new services duplication of

00:08:30,779 --> 00:08:35,610
infrastructure code creating and

00:08:33,360 --> 00:08:37,200
managing services often required copying

00:08:35,610 --> 00:08:39,690
around a bunch of boil it boil air plate

00:08:37,200 --> 00:08:41,610
code everywhere you know deployments are

00:08:39,690 --> 00:08:42,990
manual and failure prone right there's

00:08:41,610 --> 00:08:44,490
there's too many manual steps in the

00:08:42,990 --> 00:08:46,860
deployments which introduce the

00:08:44,490 --> 00:08:48,600
possibility of human error this was this

00:08:46,860 --> 00:08:50,790
was often the root cause of many of our

00:08:48,600 --> 00:08:53,490
incidents production incidents that look

00:08:50,790 --> 00:08:53,970
out access permissions and limits this

00:08:53,490 --> 00:08:57,800
is really

00:08:53,970 --> 00:09:00,509
kind of a symptom of the larger problem

00:08:57,800 --> 00:09:01,769
but it was people like struggled with

00:09:00,509 --> 00:09:03,600
like do I have the right I am

00:09:01,769 --> 00:09:07,470
permissions to do what I need to do in

00:09:03,600 --> 00:09:09,389
AWS right we decided to like you know

00:09:07,470 --> 00:09:11,790
just kind of remove their need to be

00:09:09,389 --> 00:09:13,470
able to reach and touch AWS api's it's

00:09:11,790 --> 00:09:16,759
like if our engineers are having to

00:09:13,470 --> 00:09:20,459
actually do that we're failing right

00:09:16,759 --> 00:09:22,560
see I instability right people thought

00:09:20,459 --> 00:09:25,040
Jenkins was slow people thought it was

00:09:22,560 --> 00:09:27,329
unstable they're right

00:09:25,040 --> 00:09:29,790
secrets management right our secrets

00:09:27,329 --> 00:09:31,290
managers remit workflow had mini manual

00:09:29,790 --> 00:09:33,959
steps that it was very difficult to

00:09:31,290 --> 00:09:35,970
automate and local test environments

00:09:33,959 --> 00:09:37,920
right some engineers were like really

00:09:35,970 --> 00:09:39,959
struggling to create reproducible

00:09:37,920 --> 00:09:43,439
reliable development environments for

00:09:39,959 --> 00:09:44,250
their local services so yeah so when we

00:09:43,439 --> 00:09:45,209
when we thought we had a good

00:09:44,250 --> 00:09:47,399
understanding of our customer

00:09:45,209 --> 00:09:49,050
requirements and pain points we started

00:09:47,399 --> 00:09:51,329
we started to set out on building a POC

00:09:49,050 --> 00:09:56,509
right to see if we could solve some of

00:09:51,329 --> 00:09:58,500
these issues so we had previously

00:09:56,509 --> 00:10:02,519
experimented with spinnaker at Lookout

00:09:58,500 --> 00:10:05,250
and and I had experience using Asgard at

00:10:02,519 --> 00:10:08,250
a previous job which is another Netflix

00:10:05,250 --> 00:10:09,209
service delivery tool as we can see

00:10:08,250 --> 00:10:10,889
spinnaker is out of the box

00:10:09,209 --> 00:10:13,889
functionality would solve many of our

00:10:10,889 --> 00:10:15,269
customers pain points so we decided hey

00:10:13,889 --> 00:10:18,329
look we're gonna we're gonna build this

00:10:15,269 --> 00:10:19,379
POC around spinnaker here's some of the

00:10:18,329 --> 00:10:21,779
other factors that went into our

00:10:19,379 --> 00:10:23,910
decision right you know there's many

00:10:21,779 --> 00:10:25,769
companies supporting spinnaker right on

00:10:23,910 --> 00:10:27,839
Netflix obviously right but you have

00:10:25,769 --> 00:10:29,759
Google Microsoft pivotal Target Veritas

00:10:27,839 --> 00:10:33,600
like all these companies have engineers

00:10:29,759 --> 00:10:35,610
they pay to work on spinnaker there's

00:10:33,600 --> 00:10:37,319
also many other companies that already

00:10:35,610 --> 00:10:39,480
had successful implementations people

00:10:37,319 --> 00:10:41,309
that I knew right in the community Adobe

00:10:39,480 --> 00:10:43,019
cloudera Symantec Twitch lithium route

00:10:41,309 --> 00:10:44,449
Reuters Go Go err like all these

00:10:43,019 --> 00:10:46,339
companies that successfully deployed

00:10:44,449 --> 00:10:51,029
spinnaker and we're using it production

00:10:46,339 --> 00:10:52,889
and so finally and some of our legacy

00:10:51,029 --> 00:10:55,410
tooling was actually set up in a way

00:10:52,889 --> 00:10:57,959
which would make an incision two

00:10:55,410 --> 00:11:00,300
immutable am i's deployments fairly easy

00:10:57,959 --> 00:11:02,040
so once we decided to like build our

00:11:00,300 --> 00:11:03,870
solution around spinnaker we're like

00:11:02,040 --> 00:11:06,829
okay how can we do this how can we get

00:11:03,870 --> 00:11:06,829
this off the ground really fast

00:11:07,410 --> 00:11:12,959
so we met armory pretty like soon after

00:11:11,910 --> 00:11:14,959
we made this decision

00:11:12,959 --> 00:11:17,549
we were actually their first customer

00:11:14,959 --> 00:11:19,709
you know that this project had high

00:11:17,549 --> 00:11:22,049
visibility with executive sponsorship

00:11:19,709 --> 00:11:23,699
and and it was important to show quick

00:11:22,049 --> 00:11:25,139
progress it wasn't like look you need to

00:11:23,699 --> 00:11:29,129
figure this out it was like you need to

00:11:25,139 --> 00:11:30,389
figure this out now right so you know

00:11:29,129 --> 00:11:32,519
armory helped us get off the ground

00:11:30,389 --> 00:11:34,229
really quickly and and and and

00:11:32,519 --> 00:11:36,209
demonstrate value to our customers

00:11:34,229 --> 00:11:37,859
almost immediately you know they came in

00:11:36,209 --> 00:11:39,619
they set up they operation

00:11:37,859 --> 00:11:43,289
operationalize spinnaker our environment

00:11:39,619 --> 00:11:49,889
so my team could just focus on working

00:11:43,289 --> 00:11:50,789
with our initial customers so spinnaker

00:11:49,889 --> 00:11:53,099
didn't actually solve all of our

00:11:50,789 --> 00:11:54,749
problems right there there are many

00:11:53,099 --> 00:11:57,749
other issues we had to navigate to

00:11:54,749 --> 00:11:59,639
deliver SDP 1.0 and I'm gonna quickly go

00:11:57,749 --> 00:12:02,039
over some of these and and how we solved

00:11:59,639 --> 00:12:04,349
them I think I mentioned before like

00:12:02,039 --> 00:12:07,079
secrets was a huge pain point right we

00:12:04,349 --> 00:12:09,929
we use chef to manage secrets this

00:12:07,079 --> 00:12:11,489
implementation had many problems which I

00:12:09,929 --> 00:12:13,649
don't really need to go into detail but

00:12:11,489 --> 00:12:17,729
suffice to say we needed to completely

00:12:13,649 --> 00:12:20,689
rethink how we were doing this we ended

00:12:17,729 --> 00:12:24,119
up choosing Cerberus to solve this issue

00:12:20,689 --> 00:12:27,859
we actually can encounter nike Cerberus

00:12:24,119 --> 00:12:30,029
at reinvent 2016 when Nike announced it

00:12:27,859 --> 00:12:32,789
had a lot of features we liked right

00:12:30,029 --> 00:12:34,589
first it was open source you know we

00:12:32,789 --> 00:12:37,199
we've been in contact with the Nike team

00:12:34,589 --> 00:12:39,600
and they're like super useful and and

00:12:37,199 --> 00:12:42,749
super helpful so that was that was a big

00:12:39,600 --> 00:12:44,549
plus you know secure I like the security

00:12:42,749 --> 00:12:46,350
model it stores encrypted secrets and

00:12:44,549 --> 00:12:50,339
provides role based authorization based

00:12:46,350 --> 00:12:53,069
on IM roles which is really nice it's

00:12:50,339 --> 00:12:54,569
easy to use in self-service it allows

00:12:53,069 --> 00:12:56,549
our customers to manage their secrets

00:12:54,569 --> 00:12:58,470
themselves with their like self-service

00:12:56,549 --> 00:13:01,889
UI and it has octa integration for

00:12:58,470 --> 00:13:04,289
authorization its fault-tolerant right

00:13:01,889 --> 00:13:06,329
it's it's architected has tons of

00:13:04,289 --> 00:13:08,579
self-healing components and robust

00:13:06,329 --> 00:13:10,229
automated backups so yeah we've been

00:13:08,579 --> 00:13:11,789
really happy with service and really

00:13:10,229 --> 00:13:18,119
have enjoyed working with the Nike team

00:13:11,789 --> 00:13:20,339
as well so service discovery yeah when

00:13:18,119 --> 00:13:21,300
we started this project service

00:13:20,339 --> 00:13:24,320
discovery at Lookout

00:13:21,300 --> 00:13:26,670
was was was complicated and cumbersome

00:13:24,320 --> 00:13:29,700
which is actually my fault because I

00:13:26,670 --> 00:13:34,769
built it a couple of years previous

00:13:29,700 --> 00:13:36,779
right so the service discovery was done

00:13:34,769 --> 00:13:38,579
with like a console H a proxy

00:13:36,779 --> 00:13:40,740
configuration right which was tightly

00:13:38,579 --> 00:13:44,430
coupled to chef cookbooks and a lot of

00:13:40,740 --> 00:13:46,769
in-house built libraries you know we

00:13:44,430 --> 00:13:48,810
decided to just greatly simplify service

00:13:46,769 --> 00:13:51,089
discovery and just went with DNS naming

00:13:48,810 --> 00:13:52,589
conventions right which when someone

00:13:51,089 --> 00:13:55,220
mentioned this this pattern to me I was

00:13:52,589 --> 00:13:57,390
like wow that's like really obvious why

00:13:55,220 --> 00:13:59,279
you know it fits nicely with spinnaker

00:13:57,390 --> 00:14:00,450
right because vo bees health chat

00:13:59,279 --> 00:14:03,029
becomes the source of truth about

00:14:00,450 --> 00:14:05,630
everything you know it fits the blue

00:14:03,029 --> 00:14:07,890
green or red black deployment model

00:14:05,630 --> 00:14:09,839
spinnaker right so if you wanted to talk

00:14:07,890 --> 00:14:13,370
to service a and staging you just say

00:14:09,839 --> 00:14:15,959
service a staging dot yourdomain.com

00:14:13,370 --> 00:14:18,870
although this is like the the this was a

00:14:15,959 --> 00:14:23,130
simplification later in the migration it

00:14:18,870 --> 00:14:24,839
it was it caused us some complications

00:14:23,130 --> 00:14:26,670
because if you updated moved one service

00:14:24,839 --> 00:14:28,680
to spinnaker you had to go change all

00:14:26,670 --> 00:14:32,959
the client services right to talk to

00:14:28,680 --> 00:14:36,360
that to use the new service discovery so

00:14:32,959 --> 00:14:38,160
so application configuration right all

00:14:36,360 --> 00:14:42,170
of our application configuration I know

00:14:38,160 --> 00:14:45,420
most all cases was managed with chef

00:14:42,170 --> 00:14:47,130
initially we tried to keep chef for our

00:14:45,420 --> 00:14:50,279
application in mid-water middleware

00:14:47,130 --> 00:14:52,079
configuration you know each service

00:14:50,279 --> 00:14:53,520
would converge chef code which would

00:14:52,079 --> 00:14:56,880
pull in the service artifact and then

00:14:53,520 --> 00:14:58,740
Packer would bacon ami to be used by

00:14:56,880 --> 00:15:02,990
Skinner spinnaker but this ended up

00:14:58,740 --> 00:15:05,670
being cumbersome and failure prone I

00:15:02,990 --> 00:15:06,959
think armory was like you guys are crazy

00:15:05,670 --> 00:15:10,589
I remember Isaac being like why are you

00:15:06,959 --> 00:15:12,839
doing this yeah so we ended up moving

00:15:10,589 --> 00:15:14,699
away from chef entirely right we moved

00:15:12,839 --> 00:15:16,440
to environment specific application can

00:15:14,699 --> 00:15:18,510
feet moved all the environment specific

00:15:16,440 --> 00:15:21,300
application configuration into the

00:15:18,510 --> 00:15:23,699
service repos themselves and used a

00:15:21,300 --> 00:15:25,649
Gradle plug-in called nebula which is

00:15:23,699 --> 00:15:29,250
actually a Netflix tool to build and

00:15:25,649 --> 00:15:30,720
manage Debian packages each package go

00:15:29,250 --> 00:15:32,850
contain the service artifact and its

00:15:30,720 --> 00:15:35,040
dependency right this that this enabled

00:15:32,850 --> 00:15:36,389
us to store all the app

00:15:35,040 --> 00:15:38,070
location code and OS middleware

00:15:36,389 --> 00:15:45,930
configuration in the same repo and

00:15:38,070 --> 00:15:46,980
greatly simplified our a my big step so

00:15:45,930 --> 00:15:48,779
since we were building this new platform

00:15:46,980 --> 00:15:51,660
we wanted to build a new way to measure

00:15:48,779 --> 00:15:53,850
and report its availability as well so

00:15:51,660 --> 00:15:57,060
you know we created this tool called

00:15:53,850 --> 00:15:58,709
Slayer and Slayer is a simple service we

00:15:57,060 --> 00:16:01,560
built which was basically a wrapper

00:15:58,709 --> 00:16:03,240
around the data dog agent it allows you

00:16:01,560 --> 00:16:05,310
to create services and define checks

00:16:03,240 --> 00:16:09,420
which then are used to calculate that

00:16:05,310 --> 00:16:11,399
services SLA yeah then it creates the

00:16:09,420 --> 00:16:13,980
data dog dashboard and SLA calculations

00:16:11,399 --> 00:16:15,720
for each service or product right so you

00:16:13,980 --> 00:16:19,920
know here you can kind of see what the

00:16:15,720 --> 00:16:21,120
output of Slayer is you know github get

00:16:19,920 --> 00:16:22,980
we say github ZUP

00:16:21,120 --> 00:16:25,079
if Slayer can log in clone a repo and

00:16:22,980 --> 00:16:26,430
push a commit right artifact thérèse up

00:16:25,079 --> 00:16:29,339
if you can log in push artifacts

00:16:26,430 --> 00:16:31,920
download artifacts etc I mean my real

00:16:29,339 --> 00:16:34,019
goal here was just to provide

00:16:31,920 --> 00:16:37,139
transparency to our customers about our

00:16:34,019 --> 00:16:38,490
availability and stability we actually

00:16:37,139 --> 00:16:41,790
we initially have work to actually

00:16:38,490 --> 00:16:43,699
expand Slayer and rewrite it and open it

00:16:41,790 --> 00:16:45,899
up to all service teams that look out

00:16:43,699 --> 00:16:47,459
but it doesn't actually seem like that's

00:16:45,899 --> 00:16:49,399
gonna happen anymore

00:16:47,459 --> 00:16:52,740
one of the engineers on one of my teams

00:16:49,399 --> 00:16:54,690
Bruno at one of our hackathons created

00:16:52,740 --> 00:16:58,010
something called slap and I think that

00:16:54,690 --> 00:16:58,010
that's going to end up replacing Slayer

00:16:58,160 --> 00:17:03,600
so yeah this is kind of like what our

00:17:00,209 --> 00:17:06,240
first implementation of our of SDP 1.0

00:17:03,600 --> 00:17:07,740
it looked like right any push to get

00:17:06,240 --> 00:17:10,199
triggers of Jenkins job which creates a

00:17:07,740 --> 00:17:12,240
Debian artifact pushes the artifactory

00:17:10,199 --> 00:17:14,130
the end of your job your spinnaker

00:17:12,240 --> 00:17:20,790
pipeline is updated and triggered right

00:17:14,130 --> 00:17:24,240
all pretty standard so here was our

00:17:20,790 --> 00:17:27,659
timeline for for the project right by

00:17:24,240 --> 00:17:29,520
mid November 2016 we'd identified a POC

00:17:27,659 --> 00:17:31,980
service and we aim to have it fully

00:17:29,520 --> 00:17:33,659
deployed by spinnaker on December 30th

00:17:31,980 --> 00:17:35,750
right we were able to hit that at that

00:17:33,659 --> 00:17:39,090
date so we had one service in production

00:17:35,750 --> 00:17:41,429
after completion of our POC we moved on

00:17:39,090 --> 00:17:44,540
to a beta phase right and our goal with

00:17:41,429 --> 00:17:47,040
beta was to onboard five more services

00:17:44,540 --> 00:17:48,809
and have an initial draft of our

00:17:47,040 --> 00:17:51,090
onboarding guide

00:17:48,809 --> 00:17:53,129
On February 28th we we actually hit that

00:17:51,090 --> 00:17:55,490
milestone and we had five services

00:17:53,129 --> 00:17:58,080
deployed to production with spinnaker

00:17:55,490 --> 00:18:00,210
after beta we took a we took a step back

00:17:58,080 --> 00:18:04,440
and kind of took some time to kind of

00:18:00,210 --> 00:18:06,299
process what we learned and set a set

00:18:04,440 --> 00:18:08,730
out on the goal of being able like to go

00:18:06,299 --> 00:18:10,350
to for general availability where we

00:18:08,730 --> 00:18:12,570
support 80 percent of services at

00:18:10,350 --> 00:18:15,690
Lookout and 80 percent of services was

00:18:12,570 --> 00:18:17,039
actually it was important because there

00:18:15,690 --> 00:18:19,110
was a lot of services that look out that

00:18:17,039 --> 00:18:22,080
had like some really weird technologies

00:18:19,110 --> 00:18:24,749
and some really weird requirements and

00:18:22,080 --> 00:18:26,039
you know I I just kind of decided like

00:18:24,749 --> 00:18:27,330
well we're not going to try to support

00:18:26,039 --> 00:18:29,070
those services initially right we're

00:18:27,330 --> 00:18:29,999
gonna try to help the greater the

00:18:29,070 --> 00:18:31,320
greater good and it's funny because

00:18:29,999 --> 00:18:33,179
someone has said well what percentage of

00:18:31,320 --> 00:18:35,850
the services will you support and I said

00:18:33,179 --> 00:18:37,889
eighty and then when I actually did the

00:18:35,850 --> 00:18:41,299
calculation it was eighty one point

00:18:37,889 --> 00:18:43,889
three so my guesstimate was pretty good

00:18:41,299 --> 00:18:45,450
after after we completed beta we

00:18:43,889 --> 00:18:48,330
gathered some metrics on before and

00:18:45,450 --> 00:18:51,539
after spinnaker right we evaluated five

00:18:48,330 --> 00:18:54,899
success metrics first was steps to

00:18:51,539 --> 00:18:57,690
deploy went from 25 to 1/3 depending on

00:18:54,899 --> 00:18:59,789
the pipeline design I guess so

00:18:57,690 --> 00:19:02,309
this is the number of manual steps it

00:18:59,789 --> 00:19:03,990
takes including validation to deploy a

00:19:02,309 --> 00:19:06,899
service through all staging environments

00:19:03,990 --> 00:19:08,340
to production each manual step again

00:19:06,899 --> 00:19:10,860
like you know kind of introduces the

00:19:08,340 --> 00:19:12,360
potential for human error and which was

00:19:10,860 --> 00:19:13,919
responsible for many of our deployment

00:19:12,360 --> 00:19:17,279
failures and service outages that

00:19:13,919 --> 00:19:18,929
look-out engineering time to deploy went

00:19:17,279 --> 00:19:20,970
from 60 minutes to less than a minute

00:19:18,929 --> 00:19:23,190
right and this is the amount of time it

00:19:20,970 --> 00:19:24,749
takes on average for an engineer to

00:19:23,190 --> 00:19:26,789
deploy from staging to production

00:19:24,749 --> 00:19:28,409
through staging to production this

00:19:26,789 --> 00:19:32,970
represents a massive increase in

00:19:28,409 --> 00:19:34,409
engineering productivity automation time

00:19:32,970 --> 00:19:36,570
to deploy this is just the amount of

00:19:34,409 --> 00:19:38,429
time it takes to deploy regardless of

00:19:36,570 --> 00:19:41,129
the engineer went from 60 minutes to 31

00:19:38,429 --> 00:19:42,600
minutes and finally onboarding time went

00:19:41,129 --> 00:19:43,889
from like three plus days to thirty

00:19:42,600 --> 00:19:46,710
minutes right and this is the amount of

00:19:43,889 --> 00:19:48,960
time it takes for a new engineer to be

00:19:46,710 --> 00:19:53,389
comfortable deploying code to production

00:19:48,960 --> 00:19:55,350
so these metrics you know showed a very

00:19:53,389 --> 00:19:59,100
significant increase in engineering

00:19:55,350 --> 00:20:02,070
efficiency and the the order was given

00:19:59,100 --> 00:20:03,900
like move all services to spinnaker now

00:20:02,070 --> 00:20:10,710
right that was kind of came down from on

00:20:03,900 --> 00:20:13,400
high so this migration effort of moving

00:20:10,710 --> 00:20:16,560
all services was was pretty enlightening

00:20:13,400 --> 00:20:18,990
we learned a lot during this process and

00:20:16,560 --> 00:20:25,380
I'm gonna go over some of the things we

00:20:18,990 --> 00:20:27,120
learned so like the CD continuous

00:20:25,380 --> 00:20:30,330
delivery is a people problem as much as

00:20:27,120 --> 00:20:32,130
it is a technology problem we quickly

00:20:30,330 --> 00:20:34,770
realize that you know some of our

00:20:32,130 --> 00:20:36,840
customers didn't understand CD

00:20:34,770 --> 00:20:38,640
principles and concepts or even if the

00:20:36,840 --> 00:20:41,580
some did understand them they didn't see

00:20:38,640 --> 00:20:45,960
value in them they didn't understand why

00:20:41,580 --> 00:20:48,240
they should adopt this new new the adopt

00:20:45,960 --> 00:20:50,460
continuous delivery you know the CD

00:20:48,240 --> 00:20:52,290
workflow is very different from manual

00:20:50,460 --> 00:20:54,660
or traditional deployment methodologies

00:20:52,290 --> 00:20:55,980
and it's really important that service

00:20:54,660 --> 00:20:59,760
owners understand these differences

00:20:55,980 --> 00:21:02,160
before they move to spinnaker so yeah we

00:20:59,760 --> 00:21:03,900
kind of took a top-down approach right

00:21:02,160 --> 00:21:05,760
we started by getting buy-in from our

00:21:03,900 --> 00:21:08,460
chief development officer and her direct

00:21:05,760 --> 00:21:09,960
staff and then we moved to a meeting

00:21:08,460 --> 00:21:11,730
with all engineering managers where I

00:21:09,960 --> 00:21:13,770
was like and where they had like she had

00:21:11,730 --> 00:21:15,540
a slide in the presentation right so it

00:21:13,770 --> 00:21:18,150
was it was her actually give him part of

00:21:15,540 --> 00:21:20,510
the presentation and then from there you

00:21:18,150 --> 00:21:22,590
know we set up we set up after we do

00:21:20,510 --> 00:21:24,090
engineering all engineering managers we

00:21:22,590 --> 00:21:25,740
went all directly to engineering I mean

00:21:24,090 --> 00:21:29,310
basically we ran like a little internal

00:21:25,740 --> 00:21:30,810
marketing campaign right you know once

00:21:29,310 --> 00:21:32,700
we had everybody on the same page about

00:21:30,810 --> 00:21:35,100
where we were headed and there was like

00:21:32,700 --> 00:21:39,390
a shared vision about where we wanted to

00:21:35,100 --> 00:21:40,920
be things went a lot smoother one thing

00:21:39,390 --> 00:21:42,960
we also did is you know we picked key

00:21:40,920 --> 00:21:44,730
influential leaders and like high

00:21:42,960 --> 00:21:46,830
visibility services to be our initial

00:21:44,730 --> 00:21:51,360
customers right to just to demonstrate

00:21:46,830 --> 00:21:53,310
success I mean I guess this is obvious I

00:21:51,360 --> 00:21:54,570
don't know but all the previous attempts

00:21:53,310 --> 00:21:56,070
had really failed at this but it was

00:21:54,570 --> 00:21:57,570
very important for us to build alliances

00:21:56,070 --> 00:22:00,300
and partnerships with all of our

00:21:57,570 --> 00:22:05,220
customers to be able to execute this

00:22:00,300 --> 00:22:06,450
migration so like land and expand this

00:22:05,220 --> 00:22:09,060
is actually a new term that I learned

00:22:06,450 --> 00:22:12,570
from our CEO he Healy he talks about it

00:22:09,060 --> 00:22:14,790
like relatives like SAS sales but I

00:22:12,570 --> 00:22:16,169
think it's relative to what we did it or

00:22:14,790 --> 00:22:17,789
it describes what we did as well

00:22:16,169 --> 00:22:19,980
you know we had we had about 20

00:22:17,789 --> 00:22:22,139
engineering teams and roughly 120

00:22:19,980 --> 00:22:25,440
engineers and about a hundred services

00:22:22,139 --> 00:22:28,619
to migrate and CD team was liked by

00:22:25,440 --> 00:22:30,389
people right so you know we'd already

00:22:28,619 --> 00:22:32,580
implemented into in service ownership

00:22:30,389 --> 00:22:34,230
right at Lookout right so we needed to

00:22:32,580 --> 00:22:36,659
figure out how to support service owners

00:22:34,230 --> 00:22:38,279
effort to migrate their own services

00:22:36,659 --> 00:22:45,210
this was not something that we were

00:22:38,279 --> 00:22:47,220
gonna do for them right so it was

00:22:45,210 --> 00:22:48,690
interesting too because our chief

00:22:47,220 --> 00:22:50,519
development officer again made this the

00:22:48,690 --> 00:22:53,070
number one engineering internal

00:22:50,519 --> 00:22:55,080
engineering priority right so this was

00:22:53,070 --> 00:22:59,609
like this trumped everything else on our

00:22:55,080 --> 00:23:01,409
internal roadmap so how do we prepare

00:22:59,609 --> 00:23:02,879
ourselves for this like stampeding herd

00:23:01,409 --> 00:23:06,480
of people right they're gonna start

00:23:02,879 --> 00:23:09,059
trying to - on board you know there's a

00:23:06,480 --> 00:23:12,509
there's a steep learning curve - cloud

00:23:09,059 --> 00:23:14,369
technologies in general you know the

00:23:12,509 --> 00:23:15,690
immutable models kind of difficult for

00:23:14,369 --> 00:23:17,489
people to wrap their head around like I

00:23:15,690 --> 00:23:19,200
had one guy being like why you deleting

00:23:17,489 --> 00:23:20,759
my servers I don't want them deleted

00:23:19,200 --> 00:23:22,649
right like where are they going right so

00:23:20,759 --> 00:23:24,119
it's like you know like so there's like

00:23:22,649 --> 00:23:26,940
you know there's a lot of Education that

00:23:24,119 --> 00:23:29,039
needed to go on right so the learning

00:23:26,940 --> 00:23:32,340
curve was pretty steep for for some

00:23:29,039 --> 00:23:34,649
teams right but we knew that like once

00:23:32,340 --> 00:23:36,509
we had like if we could get one engineer

00:23:34,649 --> 00:23:38,039
and every team that knew how to do it we

00:23:36,509 --> 00:23:39,989
could just get him initially like get

00:23:38,039 --> 00:23:42,929
him to onboard a service then he could

00:23:39,989 --> 00:23:44,669
help his other team members right so

00:23:42,929 --> 00:23:46,440
this is I guess a little bit obvious but

00:23:44,669 --> 00:23:48,659
this is kind of how we set it up right

00:23:46,440 --> 00:23:50,340
we're like we these initial two sprints

00:23:48,659 --> 00:23:51,659
we would only support for services and

00:23:50,340 --> 00:23:52,980
pursue print but we were really

00:23:51,659 --> 00:23:54,299
strategic about the people that we

00:23:52,980 --> 00:23:55,769
picked and made sure that we had it

00:23:54,299 --> 00:23:58,799
distributed across key people and all

00:23:55,769 --> 00:24:02,639
the teams and then expanded kept

00:23:58,799 --> 00:24:03,809
expanding sprint over Sprint and this

00:24:02,639 --> 00:24:05,460
really kind of allowed us to be

00:24:03,809 --> 00:24:12,299
strategic about knowledge propagation

00:24:05,460 --> 00:24:15,600
across all the teams so I mean I guess

00:24:12,299 --> 00:24:17,009
this is kind of obvious - but the CD

00:24:15,600 --> 00:24:19,200
team did a really good job of keeping

00:24:17,009 --> 00:24:21,690
track of all internal customer requests

00:24:19,200 --> 00:24:23,279
for the onboarding process and we

00:24:21,690 --> 00:24:24,899
constantly asked herself we reviewed

00:24:23,279 --> 00:24:27,090
them every week and we're like how could

00:24:24,899 --> 00:24:29,040
this customer request be automated or

00:24:27,090 --> 00:24:30,980
made self-service

00:24:29,040 --> 00:24:34,910
so this whole process actually paid off

00:24:30,980 --> 00:24:38,100
and reap a lot of results later because

00:24:34,910 --> 00:24:40,260
we as we improve this engineers were

00:24:38,100 --> 00:24:43,310
able to like onboard about five times

00:24:40,260 --> 00:24:47,360
faster than they were when they started

00:24:43,310 --> 00:24:49,860
so we spent the last four quarters

00:24:47,360 --> 00:24:52,310
working on migrating all services that

00:24:49,860 --> 00:24:55,140
look at the spinnaker right it's been a

00:24:52,310 --> 00:24:57,510
organizational wide effort it's finally

00:24:55,140 --> 00:25:00,930
coming to a close I think they're about

00:24:57,510 --> 00:25:02,160
five out of 100 which are still needed

00:25:00,930 --> 00:25:03,420
to migrate to spinnaker and it's funny

00:25:02,160 --> 00:25:05,460
because I was I was in quarterly

00:25:03,420 --> 00:25:06,330
planning and like I realized those five

00:25:05,460 --> 00:25:07,830
weren't gonna make it

00:25:06,330 --> 00:25:10,070
and I was like man I'm gonna have to go

00:25:07,830 --> 00:25:12,120
to the spinnaker summit and that was my

00:25:10,070 --> 00:25:14,030
abstract says we've already moved all

00:25:12,120 --> 00:25:17,030
services don't make a liar out of me but

00:25:14,030 --> 00:25:19,770
yeah there's the there's about five left

00:25:17,030 --> 00:25:23,580
it's been a lot of work and significant

00:25:19,770 --> 00:25:25,320
investment right but as we started to

00:25:23,580 --> 00:25:27,330
get a critical mass of services in

00:25:25,320 --> 00:25:33,510
spinnaker we started to see a lot of

00:25:27,330 --> 00:25:35,910
results and one of our All Hands not

00:25:33,510 --> 00:25:38,550
that long ago a couple weeks ago our CEO

00:25:35,910 --> 00:25:40,380
asked like why is engineering like

00:25:38,550 --> 00:25:42,120
developing all like their product their

00:25:40,380 --> 00:25:44,370
velocity of delivering new services and

00:25:42,120 --> 00:25:48,660
features is like you know off the charts

00:25:44,370 --> 00:25:52,800
what's going on right so this is this is

00:25:48,660 --> 00:25:54,420
a little snippet from a quarterly retro

00:25:52,800 --> 00:25:56,910
that our chief development officer just

00:25:54,420 --> 00:25:58,710
gave to engineering and the first reason

00:25:56,910 --> 00:26:02,250
for this increase in service velocity

00:25:58,710 --> 00:26:04,530
was the adoption of SDP I mean to be

00:26:02,250 --> 00:26:05,840
clear hue wasn't the only reason but it

00:26:04,530 --> 00:26:08,820
was one of the main reasons right

00:26:05,840 --> 00:26:10,920
engineers were like simply happier more

00:26:08,820 --> 00:26:13,320
productive they were like spending less

00:26:10,920 --> 00:26:15,570
time dealing with code deployments and

00:26:13,320 --> 00:26:20,430
more time creating value for loop for

00:26:15,570 --> 00:26:23,040
the company so like victory right you

00:26:20,430 --> 00:26:25,740
know I mean a certain way it was right

00:26:23,040 --> 00:26:27,750
it was pretty satisfying we know we had

00:26:25,740 --> 00:26:29,730
taken a weakness at lookout and turn it

00:26:27,750 --> 00:26:32,670
into a strength right we solved the

00:26:29,730 --> 00:26:34,580
service delivery problem and we led the

00:26:32,670 --> 00:26:37,320
organization through a massive change

00:26:34,580 --> 00:26:40,170
that the greatly increased productivity

00:26:37,320 --> 00:26:41,910
right but this is really just kind of

00:26:40,170 --> 00:26:42,780
only the beginning right because because

00:26:41,910 --> 00:26:44,850
now that we have everyone

00:26:42,780 --> 00:26:46,710
on the same platform we can build new

00:26:44,850 --> 00:26:48,630
capabilities and offer them to our

00:26:46,710 --> 00:26:52,260
customers and a very highly leveraged

00:26:48,630 --> 00:26:55,560
fashion so I like to I like to think of

00:26:52,260 --> 00:26:57,390
SDP as like a paved highway that gets

00:26:55,560 --> 00:26:58,890
our customers from where they need to go

00:26:57,390 --> 00:27:01,740
get to get some where they need to go

00:26:58,890 --> 00:27:03,780
like quickly and safely you know now we

00:27:01,740 --> 00:27:05,520
can add a new capability to the platform

00:27:03,780 --> 00:27:07,380
and since everybody's on the same

00:27:05,520 --> 00:27:12,540
platform everybody gets it for free

00:27:07,380 --> 00:27:14,340
right so we've been using the platform

00:27:12,540 --> 00:27:16,170
to leveraging the platform to deliver

00:27:14,340 --> 00:27:18,150
new features which increase cost

00:27:16,170 --> 00:27:21,540
efficiency developer productivity and

00:27:18,150 --> 00:27:23,990
security of our services so now I'm

00:27:21,540 --> 00:27:26,370
going to switch gears a little bit and

00:27:23,990 --> 00:27:28,140
talk about the new capabilities that

00:27:26,370 --> 00:27:33,990
we've been able to offer our customers

00:27:28,140 --> 00:27:36,690
who have adopted spinnaker so one-click

00:27:33,990 --> 00:27:38,790
project creation you remember like in

00:27:36,690 --> 00:27:40,170
the customer survey we did earlier one

00:27:38,790 --> 00:27:43,650
of the main pain points that people

00:27:40,170 --> 00:27:47,130
called out was that it took too long to

00:27:43,650 --> 00:27:49,080
create new services right like literally

00:27:47,130 --> 00:27:53,400
like some people were like saying I I

00:27:49,080 --> 00:27:55,350
allocate two weeks right to create a

00:27:53,400 --> 00:27:57,360
launch a new service right

00:27:55,350 --> 00:27:58,800
that's not development time that's just

00:27:57,360 --> 00:28:02,010
like getting it in staging a production

00:27:58,800 --> 00:28:05,100
right I mean like many companies

00:28:02,010 --> 00:28:07,880
lookouts agents eyes we've had to

00:28:05,100 --> 00:28:10,140
overcome a significant amount of debt

00:28:07,880 --> 00:28:12,710
much as much of this tech debt is in the

00:28:10,140 --> 00:28:15,330
form of like legacy monolithic services

00:28:12,710 --> 00:28:19,680
which were you know difficult and costly

00:28:15,330 --> 00:28:21,570
to to maintain Lookout has spent a

00:28:19,680 --> 00:28:23,370
significant resources to eliminate this

00:28:21,570 --> 00:28:27,260
tech debt by replacing these monolithic

00:28:23,370 --> 00:28:31,500
services with micro service architecture

00:28:27,260 --> 00:28:34,020
but you know what if what if what if in

00:28:31,500 --> 00:28:37,380
replacing these large monolithic piles

00:28:34,020 --> 00:28:39,450
of tech debt you you replace them with

00:28:37,380 --> 00:28:40,350
the multitude of services that all have

00:28:39,450 --> 00:28:43,110
their own little snowflake

00:28:40,350 --> 00:28:46,980
implementation right this this is a type

00:28:43,110 --> 00:28:48,720
of tech debt in and of itself you know

00:28:46,980 --> 00:28:50,430
even though these micro services will

00:28:48,720 --> 00:28:52,710
say all be deployed with spinnaker we

00:28:50,430 --> 00:28:57,460
wanted to ensure that all other aspects

00:28:52,710 --> 00:28:59,720
of them were unified as well you know

00:28:57,460 --> 00:29:02,840
yeah so and another pattern that we saw

00:28:59,720 --> 00:29:04,490
before is that you know if there's a

00:29:02,840 --> 00:29:07,999
significant friction to creating new

00:29:04,490 --> 00:29:10,610
services teams are more likely to add

00:29:07,999 --> 00:29:11,990
new features to an existing service

00:29:10,610 --> 00:29:13,669
right like whoa I'll just add this API

00:29:11,990 --> 00:29:15,559
to another service that maybe that's not

00:29:13,669 --> 00:29:17,629
the best architecture right and so you

00:29:15,559 --> 00:29:20,919
start getting this like like little mini

00:29:17,629 --> 00:29:27,619
monoliths like like sprouting up again

00:29:20,919 --> 00:29:29,559
yeah so to solve this problem my team

00:29:27,619 --> 00:29:32,179
built a service called one-click project

00:29:29,559 --> 00:29:33,769
with one click customers are able to

00:29:32,179 --> 00:29:37,279
create a new service and have it

00:29:33,769 --> 00:29:38,619
deployed to production with in about 10

00:29:37,279 --> 00:29:40,909
minutes

00:29:38,619 --> 00:29:42,799
so one click you get a service that

00:29:40,909 --> 00:29:46,730
incorporates all the best practices and

00:29:42,799 --> 00:29:49,190
look out SDP capabilities so like here's

00:29:46,730 --> 00:29:50,600
a screen shot they we actually first

00:29:49,190 --> 00:29:56,539
time we built this we actually built it

00:29:50,600 --> 00:29:58,369
with a web application but we really hey

00:29:56,539 --> 00:30:01,179
actually should be a genius job so

00:29:58,369 --> 00:30:03,619
here's a screenshot of the Jenkins job

00:30:01,179 --> 00:30:07,490
as you can see you just specify the

00:30:03,619 --> 00:30:09,049
service name the product team tag select

00:30:07,490 --> 00:30:12,200
the framework you want like on our case

00:30:09,049 --> 00:30:14,799
we've standardized on Java and Scala for

00:30:12,200 --> 00:30:16,970
the Play Framework the github org

00:30:14,799 --> 00:30:19,820
whether or not you want to use Garrett

00:30:16,970 --> 00:30:21,769
or github for code reviews and in about

00:30:19,820 --> 00:30:23,480
10 minutes you have a Hello servers

00:30:21,769 --> 00:30:28,129
HelloWorld service deployed all the way

00:30:23,480 --> 00:30:31,220
to staging you know it creates your your

00:30:28,129 --> 00:30:34,610
git repository from a template you know

00:30:31,220 --> 00:30:37,519
create your CI and build jobs and it

00:30:34,610 --> 00:30:39,230
creates your spinnaker pipeline and and

00:30:37,519 --> 00:30:42,019
it deploys your HelloWorld service all

00:30:39,230 --> 00:30:43,340
the way to staging you can see the

00:30:42,019 --> 00:30:45,230
pipeline there is like stopped at

00:30:43,340 --> 00:30:47,059
staging right so we have a manual manual

00:30:45,230 --> 00:30:48,529
judgment if you just click the manual

00:30:47,059 --> 00:30:51,769
judgment your HelloWorld service would

00:30:48,529 --> 00:30:54,080
be deployed to production and all all

00:30:51,769 --> 00:30:55,700
engineers have to do our customers have

00:30:54,080 --> 00:31:00,889
to do now is start committing code to

00:30:55,700 --> 00:31:03,040
master and it's continuously deployed so

00:31:00,889 --> 00:31:05,710
containers

00:31:03,040 --> 00:31:07,330
a lot of people asked me why we didn't

00:31:05,710 --> 00:31:09,880
start container izing our services

00:31:07,330 --> 00:31:11,770
initially when we started migrating to

00:31:09,880 --> 00:31:12,640
spinnaker right and I think it's a

00:31:11,770 --> 00:31:15,700
really good question we actually

00:31:12,640 --> 00:31:18,670
considered it discussed it a lot one of

00:31:15,700 --> 00:31:21,970
the main reasons was that all of our

00:31:18,670 --> 00:31:24,280
security and compliance tools were built

00:31:21,970 --> 00:31:25,570
to work with VMs and they needed to be

00:31:24,280 --> 00:31:28,060
updated to work with the containers

00:31:25,570 --> 00:31:31,050
right so we didn't want that like that

00:31:28,060 --> 00:31:32,680
development or fixing that to stop our

00:31:31,050 --> 00:31:35,770
implementation of continuous delivery

00:31:32,680 --> 00:31:37,630
right now we're addressing that problem

00:31:35,770 --> 00:31:42,220
and when we're working on adding a

00:31:37,630 --> 00:31:43,990
containers capability to SDP so with

00:31:42,220 --> 00:31:46,390
containers you know we're looking to

00:31:43,990 --> 00:31:48,040
increase developer productivity by

00:31:46,390 --> 00:31:49,810
speeding up pipeline execution times

00:31:48,040 --> 00:31:52,930
right as well as you remember that

00:31:49,810 --> 00:31:54,280
survey of like hey I don't have a real

00:31:52,930 --> 00:31:56,290
good way of doing local development

00:31:54,280 --> 00:31:57,760
environments I always kind of knew in

00:31:56,290 --> 00:31:59,830
the back of my mind that like well we're

00:31:57,760 --> 00:32:01,510
gonna solve that problem when we are be

00:31:59,830 --> 00:32:05,680
able to offer a story around that when

00:32:01,510 --> 00:32:07,960
we move to containers right and like

00:32:05,680 --> 00:32:10,510
containers also puts us on the path to

00:32:07,960 --> 00:32:12,490
cost optimization with faster

00:32:10,510 --> 00:32:14,610
auto-scaling resource utilization

00:32:12,490 --> 00:32:21,190
I'm sure all of you know this but yeah

00:32:14,610 --> 00:32:23,860
so so look how it's completely in AWS so

00:32:21,190 --> 00:32:25,150
you know we begin to evaluate like okay

00:32:23,860 --> 00:32:26,410
what are we gonna do for our container

00:32:25,150 --> 00:32:30,450
orchestration are we gonna use

00:32:26,410 --> 00:32:33,430
kubernetes we're gonna lose amazon's ECS

00:32:30,450 --> 00:32:35,470
I think that this president is this

00:32:33,430 --> 00:32:38,590
decision analysis could be its own

00:32:35,470 --> 00:32:40,180
presentation but I'll just kind of go

00:32:38,590 --> 00:32:44,950
into some of the factors that went into

00:32:40,180 --> 00:32:47,530
our decision so we were in an

00:32:44,950 --> 00:32:48,940
interesting position right because by

00:32:47,530 --> 00:32:55,240
kubernetes already had a spinnaker

00:32:48,940 --> 00:32:57,610
driver right ECS did not right and this

00:32:55,240 --> 00:33:02,170
this the kubernetes driver was you know

00:32:57,610 --> 00:33:03,400
battle-tested and stable the downside at

00:33:02,170 --> 00:33:08,020
that time was that we would have to run

00:33:03,400 --> 00:33:10,000
kubernetes on ec2 so the fundamental

00:33:08,020 --> 00:33:12,580
decision came down for us is do I want

00:33:10,000 --> 00:33:15,220
to build a team to manage kubernetes or

00:33:12,580 --> 00:33:16,269
do I want to build a cloud driver for

00:33:15,220 --> 00:33:22,269
ECS

00:33:16,269 --> 00:33:22,570
I yeah so there's also some other things

00:33:22,269 --> 00:33:26,799
that

00:33:22,570 --> 00:33:29,769
ECS has very tight integrations with all

00:33:26,799 --> 00:33:31,479
the rest of the AWS ecosystem it's funny

00:33:29,769 --> 00:33:33,729
because like right where I was I was

00:33:31,479 --> 00:33:36,479
actually in in Mexico scuba diving and

00:33:33,729 --> 00:33:38,289
my boss called me and was like you know

00:33:36,479 --> 00:33:39,940
Amazon just joined the cloud native

00:33:38,289 --> 00:33:41,619
foundation right and I was like oh

00:33:39,940 --> 00:33:44,019
they're building a hosted kubernetes

00:33:41,619 --> 00:33:45,489
right and like so I got that we we

00:33:44,019 --> 00:33:48,159
called them and we got the guy who runs

00:33:45,489 --> 00:33:49,359
product for ECS on the phone right and

00:33:48,159 --> 00:33:50,799
kind of like went over this decision

00:33:49,359 --> 00:33:52,559
with him his take on it was actually

00:33:50,799 --> 00:33:55,629
pretty interesting

00:33:52,559 --> 00:33:57,519
but anyways in the end we decided that

00:33:55,629 --> 00:33:58,989
we'd rather build an EC s cloud driver

00:33:57,519 --> 00:34:01,359
like I said then build a team to manage

00:33:58,989 --> 00:34:03,089
kubernetes I announced that we're gonna

00:34:01,359 --> 00:34:06,070
build this at the last spinnaker summit

00:34:03,089 --> 00:34:08,889
and we've since release the CCS cloud

00:34:06,070 --> 00:34:10,829
driver to the community this this was

00:34:08,889 --> 00:34:12,940
also the CD team's first big

00:34:10,829 --> 00:34:15,549
contribution to the spinnaker community

00:34:12,940 --> 00:34:18,909
you know we're closely watching the

00:34:15,549 --> 00:34:20,139
evolution of eks under and I think it'll

00:34:18,909 --> 00:34:23,760
be very interesting to see how this

00:34:20,139 --> 00:34:23,760
decision plays out over the next year

00:34:24,539 --> 00:34:32,230
Canaries right so once we once we

00:34:29,319 --> 00:34:33,700
implemented continuous delivery we kind

00:34:32,230 --> 00:34:35,319
of set our eyes on on continuous

00:34:33,700 --> 00:34:37,869
deployment like how are we going to

00:34:35,319 --> 00:34:39,579
achieve that right we knew that one key

00:34:37,869 --> 00:34:42,490
component of that would be metric based

00:34:39,579 --> 00:34:44,289
Canaries we'd been talking with our

00:34:42,490 --> 00:34:46,389
murray from from the get-go about like

00:34:44,289 --> 00:34:49,510
how we want how this is a capability we

00:34:46,389 --> 00:34:52,690
wanted and we had heard all the stories

00:34:49,510 --> 00:34:56,109
about how netflix had implemented this

00:34:52,690 --> 00:34:58,270
with great success so I mean our Murray

00:34:56,109 --> 00:34:59,619
actually really kind of stepped up with

00:34:58,270 --> 00:35:00,520
us here and like was like okay let's

00:34:59,619 --> 00:35:02,970
solve this problem together

00:35:00,520 --> 00:35:05,650
right so they put together a hackathon

00:35:02,970 --> 00:35:06,970
where look out is the customer and our

00:35:05,650 --> 00:35:10,000
Murray came together and tried to solve

00:35:06,970 --> 00:35:12,730
this problem you know we brought our our

00:35:10,000 --> 00:35:15,010
services or use cases requirements and

00:35:12,730 --> 00:35:16,630
and laid the foundation for an automated

00:35:15,010 --> 00:35:21,190
metric based canary platform it's

00:35:16,630 --> 00:35:24,670
vinegar the eventual outcome of this was

00:35:21,190 --> 00:35:26,170
our me barometer our me barometer is

00:35:24,670 --> 00:35:28,420
service that integrates with spinnaker

00:35:26,170 --> 00:35:29,840
it'll take time series data and do

00:35:28,420 --> 00:35:31,610
metric base can deploy

00:35:29,840 --> 00:35:36,800
it's based on your time series data

00:35:31,610 --> 00:35:38,690
which is in our cases like data dog so

00:35:36,800 --> 00:35:41,870
yeah you can see how this works in a

00:35:38,690 --> 00:35:43,400
little bit more detail but the way we

00:35:41,870 --> 00:35:47,000
had it implemented is basically if you

00:35:43,400 --> 00:35:48,860
had like release a or release one it

00:35:47,000 --> 00:35:50,810
would take two more server groups of

00:35:48,860 --> 00:35:52,610
release one and one of them release to

00:35:50,810 --> 00:35:56,540
tag the metrics that were going into

00:35:52,610 --> 00:36:02,600
data dog and and and look for deviation

00:35:56,540 --> 00:36:04,550
and in the two metrics so yeah so yeah

00:36:02,600 --> 00:36:07,310
you can configure your canary to watch

00:36:04,550 --> 00:36:08,750
any system or application based metrics

00:36:07,310 --> 00:36:10,760
here you can see like we're looking at

00:36:08,750 --> 00:36:14,960
response codes other application metrics

00:36:10,760 --> 00:36:16,970
system level metrics and here's a

00:36:14,960 --> 00:36:20,600
pipeline where where the canary has

00:36:16,970 --> 00:36:22,400
succeeded and one where it has failed

00:36:20,600 --> 00:36:23,720
and if you'll see down there one of the

00:36:22,400 --> 00:36:25,670
features I really liked about it is that

00:36:23,720 --> 00:36:27,740
it it created a data dog dashboard that

00:36:25,670 --> 00:36:29,540
showed you all the metrics that failed

00:36:27,740 --> 00:36:35,840
your canary which is actually really

00:36:29,540 --> 00:36:37,520
useful and I mean obviously you know one

00:36:35,840 --> 00:36:40,070
more notice that barometer feel don't

00:36:37,520 --> 00:36:42,140
need for us for a while but you know

00:36:40,070 --> 00:36:43,970
Google and Netflix I think it's pretty

00:36:42,140 --> 00:36:46,580
well known they collaborated sharing

00:36:43,970 --> 00:36:48,680
their knowledge about metric based

00:36:46,580 --> 00:36:52,250
Canaries and built a platform called

00:36:48,680 --> 00:36:54,410
canta which is now the future of this

00:36:52,250 --> 00:36:56,630
and so we're in the process of moving

00:36:54,410 --> 00:36:59,030
all our stuff off barometer and into

00:36:56,630 --> 00:37:01,250
kyaaa but I will say it is one of the

00:36:59,030 --> 00:37:04,100
coolest things about using spinnaker as

00:37:01,250 --> 00:37:05,780
CD platform is that you you know you can

00:37:04,100 --> 00:37:09,560
leverage contributions from people like

00:37:05,780 --> 00:37:12,670
Google and Netflix and start yeah you

00:37:09,560 --> 00:37:12,670
can leverage all their contributions

00:37:13,960 --> 00:37:16,020

YouTube URL: https://www.youtube.com/watch?v=23AsXp_ea9A


