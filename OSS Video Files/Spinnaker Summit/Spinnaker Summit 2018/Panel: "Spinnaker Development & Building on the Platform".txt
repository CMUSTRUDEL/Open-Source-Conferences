Title: Panel: "Spinnaker Development & Building on the Platform"
Publication date: 2018-10-27
Playlist: Spinnaker Summit 2018
Description: 
	Ethan Rogers / Cam Dang / Steven Basgall / Boris Renski
Captions: 
	00:00:01,190 --> 00:00:14,400
[Music]

00:00:16,070 --> 00:00:21,960
I'm Stephen basketball senior DevOps

00:00:19,170 --> 00:00:23,970
engineer with gogo hammer we've been

00:00:21,960 --> 00:00:28,500
using spinnaker since it was open

00:00:23,970 --> 00:00:31,769
sourced and as part before that Brittany

00:00:28,500 --> 00:00:43,530
Jenkins stages web of stages echo

00:00:31,769 --> 00:00:44,879
integrations in order to alright so any

00:00:43,530 --> 00:00:48,480
time if any of you guys have questions

00:00:44,879 --> 00:00:52,469
please help me out by raising your hand

00:00:48,480 --> 00:00:55,710
on asking a question but since we're

00:00:52,469 --> 00:00:58,920
talking about building or spinnaker and

00:00:55,710 --> 00:01:03,449
doing integrations of spinnaker we can

00:00:58,920 --> 00:01:08,790
maybe dive in right into the topical

00:01:03,449 --> 00:01:10,799
cloud driver so I'm curious if well

00:01:08,790 --> 00:01:12,960
again I guess even begin to share your

00:01:10,799 --> 00:01:16,380
thoughts but one question addressed to

00:01:12,960 --> 00:01:20,430
the users you guys use the cloud driver

00:01:16,380 --> 00:01:22,770
at all functionality in spinnaker and if

00:01:20,430 --> 00:01:24,659
so then what the plymouth targets you

00:01:22,770 --> 00:01:28,470
deploy to and what does any

00:01:24,659 --> 00:01:31,439
customizations you have to do I can try

00:01:28,470 --> 00:01:33,810
and answer that McHale one we have many

00:01:31,439 --> 00:01:36,360
of beans as far as deployment to link

00:01:33,810 --> 00:01:38,950
those providers have been occur there

00:01:36,360 --> 00:01:41,920
has been a significant investment in

00:01:38,950 --> 00:01:48,729
tooling such as terraform information

00:01:41,920 --> 00:01:51,729
template as well as library 3 said we

00:01:48,729 --> 00:01:57,810
want to integrate with such as the

00:01:51,729 --> 00:01:57,810
tooling with lesser effort or focused in

00:01:57,899 --> 00:02:02,830
so as far as clothes dryer goes we

00:02:00,640 --> 00:02:04,920
really have not embraced its both

00:02:02,830 --> 00:02:08,920
potential and obviously speaking

00:02:04,920 --> 00:02:11,350
certainly as the future is ahead of us a

00:02:08,920 --> 00:02:14,350
saying in that space we definitely want

00:02:11,350 --> 00:02:17,049
to explore the best further in in its

00:02:14,350 --> 00:02:20,170
kind of strength in the coop in any

00:02:17,049 --> 00:02:23,049
driver capability but certainly in

00:02:20,170 --> 00:02:25,090
current state our implementation of the

00:02:23,049 --> 00:02:27,910
Cloud Drive is really for me grooming

00:02:25,090 --> 00:02:30,760
our cloud resources perspective it has

00:02:27,910 --> 00:02:33,700
the necessary vehicle for us to identify

00:02:30,760 --> 00:02:36,040
what has been deployed in our

00:02:33,700 --> 00:02:43,600
environment and to be able to articulate

00:02:36,040 --> 00:02:45,579
or a nalty what's okay well I have a

00:02:43,600 --> 00:02:48,930
couple more questions to that but maybe

00:02:45,579 --> 00:02:53,320
a Steven can comment on it too

00:02:48,930 --> 00:02:56,410
we use AWS ec2 as our deployment target

00:02:53,320 --> 00:03:02,530
through cloud driver we're doing it to

00:02:56,410 --> 00:03:04,989
the AWS accounts right now new 16 DPC's

00:03:02,530 --> 00:03:08,650
roughly some multi-region for each

00:03:04,989 --> 00:03:12,609
account and then we have we have drivers

00:03:08,650 --> 00:03:16,420
up with read-only cluster and then the

00:03:12,609 --> 00:03:21,220
right clusters and we have we've

00:03:16,420 --> 00:03:22,750
separated out by a small cloud driver of

00:03:21,220 --> 00:03:25,540
cluster and each handling like two

00:03:22,750 --> 00:03:26,910
accounts split up because the number of

00:03:25,540 --> 00:03:29,790
resources we had

00:03:26,910 --> 00:03:31,830
count was driving car drivers

00:03:29,790 --> 00:03:35,910
performance into the ground a little bit

00:03:31,830 --> 00:03:40,710
yeah okay all right

00:03:35,910 --> 00:03:44,340
so that may be a follow-on question to

00:03:40,710 --> 00:03:46,950
you guys and we can comment from kind of

00:03:44,340 --> 00:03:48,360
ideal then their perspective so the

00:03:46,950 --> 00:03:50,790
reason reason why I asked about the

00:03:48,360 --> 00:03:51,930
driver to make your move is because you

00:03:50,790 --> 00:03:55,680
know one of the first things we did

00:03:51,930 --> 00:03:57,690
parentis when we were exploring getting

00:03:55,680 --> 00:03:59,280
into spinnaker as we went ahead and

00:03:57,690 --> 00:04:01,710
talked to a bunch of users we found a

00:03:59,280 --> 00:04:05,580
pattern of quite a few users not using

00:04:01,710 --> 00:04:08,220
the cloud driver which in my opinion is

00:04:05,580 --> 00:04:12,240
kind of interesting because the core

00:04:08,220 --> 00:04:14,850
value of spinnaker as we saw it is kind

00:04:12,240 --> 00:04:17,250
of in this marriage between the

00:04:14,850 --> 00:04:19,709
deployment target and the application of

00:04:17,250 --> 00:04:21,090
deployment logic and if you do a window

00:04:19,709 --> 00:04:23,520
the cloud driver and substitute of

00:04:21,090 --> 00:04:26,190
something else you just use the pipeline

00:04:23,520 --> 00:04:29,550
engine which kind of makes dinner for a

00:04:26,190 --> 00:04:33,630
whole different beast so I guess the

00:04:29,550 --> 00:04:35,370
question to you is why did you not what

00:04:33,630 --> 00:04:37,590
why do you not use quad driver and what

00:04:35,370 --> 00:04:39,660
do you use instead so how do you you

00:04:37,590 --> 00:04:42,120
know how do you put four spinnaker to

00:04:39,660 --> 00:04:45,060
deploy you'll have to actually you know

00:04:42,120 --> 00:04:47,490
religion in environment in AWS I guess

00:04:45,060 --> 00:04:50,340
in your case or anywhere else so what do

00:04:47,490 --> 00:04:53,550
you use on who is responsible for doing

00:04:50,340 --> 00:04:58,580
that part right so and as chair earlier

00:04:53,550 --> 00:05:01,530
we had significant investment across our

00:04:58,580 --> 00:05:03,810
development community within Capital One

00:05:01,530 --> 00:05:05,129
on the existing tools that such as

00:05:03,810 --> 00:05:07,830
terraforming

00:05:05,129 --> 00:05:10,559
templates and I was a library so they

00:05:07,830 --> 00:05:12,389
weren't given any user whom other

00:05:10,559 --> 00:05:14,429
development teams aren't giving up what

00:05:12,389 --> 00:05:18,029
they have invested so hard on just right

00:05:14,429 --> 00:05:20,459
off the bat and to be able to sell to do

00:05:18,029 --> 00:05:22,489
that that cloud driving place what they

00:05:20,459 --> 00:05:26,039
have it's an uphill battle

00:05:22,489 --> 00:05:29,519
honestly speaking it also goes down to

00:05:26,039 --> 00:05:31,800
sort of light resource availability and

00:05:29,519 --> 00:05:36,499
what's on the fence strength right so

00:05:31,800 --> 00:05:39,990
generally speaking the market is more

00:05:36,499 --> 00:05:42,779
acceptable and friendly to a terraform

00:05:39,990 --> 00:05:46,139
and my class scripting then a cloud

00:05:42,779 --> 00:05:48,779
driver niche so there are some black box

00:05:46,139 --> 00:05:51,629
in a space of learning I thought a

00:05:48,779 --> 00:06:02,579
driver implementation that is hard to

00:05:51,629 --> 00:06:07,499
argue against the general on I mean so

00:06:02,579 --> 00:06:09,689
and then I guess is I know that you'll

00:06:07,499 --> 00:06:11,550
encounter some problems right as you

00:06:09,689 --> 00:06:15,949
mentioned so yes either way you're

00:06:11,550 --> 00:06:20,610
watching everything okay thank God okay

00:06:15,949 --> 00:06:24,569
so now with me I guess swish my ears on

00:06:20,610 --> 00:06:29,129
ask even you know I know that you're

00:06:24,569 --> 00:06:31,169
probably like the community guy so I go

00:06:29,129 --> 00:06:32,639
into swag and I participate in some of

00:06:31,169 --> 00:06:35,339
the meetings and you're one of the most

00:06:32,639 --> 00:06:38,069
active and most helpful people I think

00:06:35,339 --> 00:06:41,849
in the spinnaker community today so I'm

00:06:38,069 --> 00:06:44,610
curious first of all if you know this

00:06:41,849 --> 00:06:45,899
cloud drivers thing that you know we're

00:06:44,610 --> 00:06:48,839
talking about here is more like a

00:06:45,899 --> 00:06:52,769
pattern or if it's an isolated case and

00:06:48,839 --> 00:06:54,360
more importantly you know how do you

00:06:52,769 --> 00:06:56,579
vote how do you see this whole situation

00:06:54,360 --> 00:06:58,619
involving meaning like do you think that

00:06:56,579 --> 00:07:00,959
a spinnaker becomes more mainstream

00:06:58,619 --> 00:07:02,610
people will just you know forget the

00:07:00,959 --> 00:07:05,249
cloud driver altogether and just use

00:07:02,610 --> 00:07:06,990
existing tools like terraform or there's

00:07:05,249 --> 00:07:09,269
going to be some evolution to the cloud

00:07:06,990 --> 00:07:10,470
driver in spinnaker that will make it

00:07:09,269 --> 00:07:15,770
easier to plug in

00:07:10,470 --> 00:07:19,350
some things that are there so I think

00:07:15,770 --> 00:07:20,790
that cloud driver kind of it has it it

00:07:19,350 --> 00:07:24,930
has its place and it does what it does

00:07:20,790 --> 00:07:27,540
well I don't think that cloud driver

00:07:24,930 --> 00:07:30,270
could be seen kind of as a total

00:07:27,540 --> 00:07:32,190
replacement because it does really it

00:07:30,270 --> 00:07:33,600
does what it does for for server groups

00:07:32,190 --> 00:07:36,120
and for actually like the point those

00:07:33,600 --> 00:07:38,910
are burgers but I think that there's

00:07:36,120 --> 00:07:41,280
still a lot of room to be able to not

00:07:38,910 --> 00:07:45,630
only deploy like the ends in containers

00:07:41,280 --> 00:07:47,190
but also be able to deploy more static

00:07:45,630 --> 00:07:48,330
infrastructure I think and I think

00:07:47,190 --> 00:07:51,420
that's where terraforming CloudFormation

00:07:48,330 --> 00:07:54,090
come in so I think if you want to look

00:07:51,420 --> 00:07:56,130
at it from the perspective of the

00:07:54,090 --> 00:08:00,420
project growing that's a one big area

00:07:56,130 --> 00:08:02,669
that can that can be focused on growing

00:08:00,420 --> 00:08:04,680
in you know even then that may not be

00:08:02,669 --> 00:08:08,160
built directly in a cloud driver it may

00:08:04,680 --> 00:08:10,260
be the case that that work is done

00:08:08,160 --> 00:08:12,510
somewhere else it's a new service or

00:08:10,260 --> 00:08:15,750
some existing service but I think that

00:08:12,510 --> 00:08:17,070
from from a development perspective that

00:08:15,750 --> 00:08:19,910
that's kind of the beauty of spinnaker

00:08:17,070 --> 00:08:22,500
where we can we can extract a lot of a

00:08:19,910 --> 00:08:24,300
lot of those tasks that you need sub

00:08:22,500 --> 00:08:26,580
service or the new service or whatever

00:08:24,300 --> 00:08:28,320
we want to add but the interface is

00:08:26,580 --> 00:08:29,700
still the same we're still we're

00:08:28,320 --> 00:08:30,260
constraining all of these things work

00:08:29,700 --> 00:08:32,460
out

00:08:30,260 --> 00:08:35,120
communicating kind of throughout the

00:08:32,460 --> 00:08:35,120
entire system

00:08:36,260 --> 00:08:42,350
okay thank you all right so maybe yeah

00:08:40,130 --> 00:08:44,290
any cloud rather related comments of

00:08:42,350 --> 00:08:52,850
questions from the audience I'm curious

00:08:44,290 --> 00:08:55,160
to see what do you mean by how big are

00:08:52,850 --> 00:08:58,060
your thumbs and what it is already

00:08:55,160 --> 00:09:01,250
maybe two minutes we ask for an increase

00:08:58,060 --> 00:09:02,720
is the short answer but there are some

00:09:01,250 --> 00:09:05,210
things you can dilute the cloud driver

00:09:02,720 --> 00:09:08,510
configuration to set rate limiting

00:09:05,210 --> 00:09:11,300
eternally and it's by specific API call

00:09:08,510 --> 00:09:13,970
so that's really helpful you can limit

00:09:11,300 --> 00:09:16,100
whatever the exact API is getting the

00:09:13,970 --> 00:09:18,260
minute you can restrict that without

00:09:16,100 --> 00:09:23,120
necessarily blanket restricting every

00:09:18,260 --> 00:09:26,930
API calls these are accounts with maybe

00:09:23,120 --> 00:09:29,390
400 clusters 300 clusters around there

00:09:26,930 --> 00:09:31,510
and then other things other than you're

00:09:29,390 --> 00:09:34,100
running infrastructure the cloud driver

00:09:31,510 --> 00:09:36,820
indexes like your basic images and

00:09:34,100 --> 00:09:39,290
things like that I think we got to

00:09:36,820 --> 00:09:41,240
40,000 based images at one point and

00:09:39,290 --> 00:09:44,420
cloud driver would take ten minutes to

00:09:41,240 --> 00:09:47,150
start so we started making sure to clean

00:09:44,420 --> 00:09:48,020
those up but a few little bumps in in

00:09:47,150 --> 00:09:50,950
the road like that

00:09:48,020 --> 00:09:55,010
so for rate-limiting specifically

00:09:50,950 --> 00:09:58,330
working with AWS to explain why we

00:09:55,010 --> 00:10:01,460
require an increase and then using

00:09:58,330 --> 00:10:04,040
what's available in cloud driver to set

00:10:01,460 --> 00:10:06,730
limits on any of the API calls that are

00:10:04,040 --> 00:10:06,730
hitting the limit

00:10:10,440 --> 00:10:23,920
best practice in terms of architecture

00:10:14,310 --> 00:10:25,630
like sometimes like so as you dream

00:10:23,920 --> 00:10:26,920
ironmans grow of having a calendar on a

00:10:25,630 --> 00:10:31,990
centralized system you're sitting

00:10:26,920 --> 00:10:34,260
separated yep that's what was

00:10:31,990 --> 00:10:37,210
recommended to us when we got started

00:10:34,260 --> 00:10:40,170
initially we had a read-only crossed

00:10:37,210 --> 00:10:42,910
cluster and then the right cluster

00:10:40,170 --> 00:10:44,740
eventually the performance in the key

00:10:42,910 --> 00:10:47,470
net to so many different accounts was

00:10:44,740 --> 00:10:50,200
too slow so we haven't broken it down to

00:10:47,470 --> 00:10:52,810
one to one the point cloud driver per

00:10:50,200 --> 00:10:58,089
account the debt might be that might be

00:10:52,810 --> 00:10:59,650
the next step so I'm interested to hear

00:10:58,089 --> 00:11:01,779
you know you mentioned that I kept one

00:10:59,650 --> 00:11:03,310
you guys are using terraforming

00:11:01,779 --> 00:11:05,230
CloudFormation actually we'll stuff out

00:11:03,310 --> 00:11:07,390
what you're using spinnaker is kind of a

00:11:05,230 --> 00:11:10,000
single pane of glass right to show you

00:11:07,390 --> 00:11:11,589
what's actually out there since this is

00:11:10,000 --> 00:11:13,420
a this is a panel about kind of

00:11:11,589 --> 00:11:15,250
developing on the platform I'm

00:11:13,420 --> 00:11:18,100
interested to hear kind of two things

00:11:15,250 --> 00:11:21,130
one have you guys actually made any

00:11:18,100 --> 00:11:25,930
changes or in it spinnaker in a way to

00:11:21,130 --> 00:11:30,580
support that internally and whatever but

00:11:25,930 --> 00:11:33,790
also what kind of difficulty did you run

00:11:30,580 --> 00:11:36,400
into during that process if any for

00:11:33,790 --> 00:11:36,850
actually extending the yeah good

00:11:36,400 --> 00:11:40,529
question

00:11:36,850 --> 00:11:40,529
we did that such journey

00:11:54,040 --> 00:12:42,529
we're also considering - all right so

00:12:38,300 --> 00:12:44,959
since the last last thing on the driver

00:12:42,529 --> 00:12:47,449
along suppose I'm curious in the

00:12:44,959 --> 00:12:49,189
audience if you guys come in you are

00:12:47,449 --> 00:12:51,589
actually the consumers of spinnaker you

00:12:49,189 --> 00:12:59,809
work for an organization that's doing

00:12:51,589 --> 00:13:04,100
something with 60 70 percent of you okay

00:12:59,809 --> 00:13:06,019
and you guys how many I using 12 driver

00:13:04,100 --> 00:13:08,240
versus how many using something else

00:13:06,019 --> 00:13:15,790
like get one race weekend of using Club

00:13:08,240 --> 00:13:19,250
though so it's mostly together okay okay

00:13:15,790 --> 00:13:23,470
all right so then I guess we'll move on

00:13:19,250 --> 00:13:25,250
from from this topic a little bit

00:13:23,470 --> 00:13:27,529
looking though right

00:13:25,250 --> 00:13:30,379
really deepens with very specific things

00:13:27,529 --> 00:13:31,819
so well a little bit I'll talk about no

00:13:30,379 --> 00:13:35,839
developing for the platform of

00:13:31,819 --> 00:13:41,959
livability and maybe enhance most guys

00:13:35,839 --> 00:13:44,230
are working on so I know there is a you

00:13:41,959 --> 00:13:47,660
know one of the kind of core tenets for

00:13:44,230 --> 00:13:49,690
any CG solution on spinnaker

00:13:47,660 --> 00:13:52,690
specifically this blood

00:13:49,690 --> 00:13:56,530
you know the other components that are

00:13:52,690 --> 00:13:59,320
in you know SDLC we've been an

00:13:56,530 --> 00:14:02,230
enterprise and possibly the deployment

00:13:59,320 --> 00:14:07,380
drug diplom plug-ins like the cloud

00:14:02,230 --> 00:14:10,450
driver is one one in the state of it so

00:14:07,380 --> 00:14:12,970
you know when we started digging a

00:14:10,450 --> 00:14:17,800
little bit under the cover what we

00:14:12,970 --> 00:14:19,600
realized is that today across many areas

00:14:17,800 --> 00:14:23,140
of spinnaker like Club driver for

00:14:19,600 --> 00:14:25,930
instance there isn't really a very

00:14:23,140 --> 00:14:29,170
straight forward path or you know

00:14:25,930 --> 00:14:31,780
writing plugins such as you know adding

00:14:29,170 --> 00:14:33,520
modifying little driver or writing like

00:14:31,780 --> 00:14:36,640
a new version of web driver that can

00:14:33,520 --> 00:14:40,030
work for instance with OpenStack so you

00:14:36,640 --> 00:14:42,040
know writing a plug-in requires you to

00:14:40,030 --> 00:14:44,560
know pretty much all of the components

00:14:42,040 --> 00:14:47,890
and it's basically about you know 14 the

00:14:44,560 --> 00:14:52,840
code changing a bunch of stuff merging

00:14:47,890 --> 00:14:55,600
it back in and I'm curious what you guys

00:14:52,840 --> 00:15:00,280
think about it in terms of you know

00:14:55,600 --> 00:15:02,950
going forward going forward trends and

00:15:00,280 --> 00:15:07,090
the importance of changing that and

00:15:02,950 --> 00:15:09,730
introducing more reputable plug-in

00:15:07,090 --> 00:15:12,880
mechanisms around certain areas such as

00:15:09,730 --> 00:15:23,640
cloud driver matters doesn't matter

00:15:12,880 --> 00:15:28,600
should you know community focus on it a

00:15:23,640 --> 00:15:31,330
lot over the last year kind of first off

00:15:28,600 --> 00:15:34,060
you know you I think you have a couple

00:15:31,330 --> 00:15:39,070
options I think first off you can extend

00:15:34,060 --> 00:15:41,230
spinnaker and what armory does is we we

00:15:39,070 --> 00:15:44,320
do what kind of Netflix does already and

00:15:41,230 --> 00:15:46,060
we extend it we lay our functionality

00:15:44,320 --> 00:15:49,450
and we don't go as far as like adding a

00:15:46,060 --> 00:15:51,880
new cloud provider car driver but that's

00:15:49,450 --> 00:15:53,110
one option you have I also think that

00:15:51,880 --> 00:15:56,440
one of the really interesting things

00:15:53,110 --> 00:15:58,940
about this vinegar platform and the

00:15:56,440 --> 00:16:00,860
architecture is that

00:15:58,940 --> 00:16:03,350
it's you know it's just micro-services

00:16:00,860 --> 00:16:05,900
and so as long as you understand the

00:16:03,350 --> 00:16:10,550
contract that the service that you're

00:16:05,900 --> 00:16:11,840
trying to to modify or interact with as

00:16:10,550 --> 00:16:14,600
long as you understand that contract

00:16:11,840 --> 00:16:16,550
then you can kind of fake it right or

00:16:14,600 --> 00:16:18,370
you can you can actually I think there's

00:16:16,550 --> 00:16:21,290
a there's a real possibility to actually

00:16:18,370 --> 00:16:23,510
implement your cloud provider in some

00:16:21,290 --> 00:16:25,430
other language or some other API some

00:16:23,510 --> 00:16:28,040
other service and have a routing layer

00:16:25,430 --> 00:16:29,450
on top right so you say if it's going to

00:16:28,040 --> 00:16:31,190
cloud provider like the tariff on a

00:16:29,450 --> 00:16:33,440
cloud provider or something you just

00:16:31,190 --> 00:16:35,690
have a routing layer and route it to a

00:16:33,440 --> 00:16:38,270
different service so you're still

00:16:35,690 --> 00:16:40,100
talking many still talking to the top

00:16:38,270 --> 00:16:51,320
driver you karela what you're doing

00:16:40,100 --> 00:16:53,660
really is proxy but plug-ins I think

00:16:51,320 --> 00:16:55,820
what we've seen is Jenkins community has

00:16:53,660 --> 00:16:57,950
seen a lot of successful plugins but I

00:16:55,820 --> 00:17:00,500
think that the story around plugins and

00:16:57,950 --> 00:17:03,140
defining what that looks like in our our

00:17:00,500 --> 00:17:07,940
community and our project there's still

00:17:03,140 --> 00:17:10,220
a lot of conversation I kept one we are

00:17:07,940 --> 00:17:12,400
definitely a little bit conservative in

00:17:10,220 --> 00:17:19,190
our experimentation of the cloud driver

00:17:12,400 --> 00:17:24,190
we though taken much further along our

00:17:19,190 --> 00:17:24,190
evolution with the other layers of

00:17:26,860 --> 00:17:33,230
significant change I mean add-ons the

00:17:29,210 --> 00:17:35,690
front 50 as we have backends that the by

00:17:33,230 --> 00:17:39,680
additional capability that we evolved in

00:17:35,690 --> 00:17:46,160
ego inclusive front of the particulate

00:17:39,680 --> 00:17:47,070
II we enable a much more robust i io per

00:17:46,160 --> 00:17:50,940
se

00:17:47,070 --> 00:17:54,270
time and runtime data of the pipeline

00:17:50,940 --> 00:18:00,930
execution and ego or we extended to

00:17:54,270 --> 00:18:03,960
include a get up di enumeration touch

00:18:00,930 --> 00:18:07,590
upon get up media integration because in

00:18:03,960 --> 00:18:10,170
terms of enabling control environment

00:18:07,590 --> 00:18:13,050
and they can't black original statement

00:18:10,170 --> 00:18:14,880
between of a decorative like white

00:18:13,050 --> 00:18:18,960
implementation to where we're actually

00:18:14,880 --> 00:18:22,370
storing the equivalence how to get up

00:18:18,960 --> 00:18:27,140
surfing as our source control and

00:18:22,370 --> 00:18:34,620
rendering of the pipeline is you know

00:18:27,140 --> 00:18:36,150
and so any update to the UI and so we

00:18:34,620 --> 00:18:37,710
have this kind of option when it says

00:18:36,150 --> 00:18:40,260
love kings of my former student

00:18:37,710 --> 00:18:42,510
providing such needs to be able to have

00:18:40,260 --> 00:18:45,360
a account again collaboration model the

00:18:42,510 --> 00:18:48,780
review process to enable addictive

00:18:45,360 --> 00:18:52,890
recognize both wall and various things

00:18:48,780 --> 00:18:56,360
on top of equal reiteration also

00:18:52,890 --> 00:19:02,070
includes hope into

00:18:56,360 --> 00:19:06,210
Jenkins so and possibly overseeing as

00:19:02,070 --> 00:19:08,610
well but much of the catalyze the

00:19:06,210 --> 00:19:12,570
implementation and investment has been

00:19:08,610 --> 00:19:17,870
on Jenkins so being able to extend me or

00:19:12,570 --> 00:19:17,870
to have a full coverage of all

00:19:28,080 --> 00:19:33,420
go go we haven't done any modifications

00:19:31,110 --> 00:19:36,300
to claw driver directly or even really

00:19:33,420 --> 00:19:39,060
considered it and other parts vinegar

00:19:36,300 --> 00:19:41,190
anything else yeah what I was gonna

00:19:39,060 --> 00:19:44,700
mention we like most people have a need

00:19:41,190 --> 00:19:46,770
for terraform of formation especially

00:19:44,700 --> 00:19:50,390
managers really want to see something

00:19:46,770 --> 00:19:53,550
like that what we ended up doing was

00:19:50,390 --> 00:19:56,520
deploying an easy to instance that

00:19:53,550 --> 00:19:59,430
triggers often s3 bucket notification

00:19:56,520 --> 00:20:02,610
and we drop the cloud formation template

00:19:59,430 --> 00:20:04,320
in s3 bucket and this instance applies

00:20:02,610 --> 00:20:06,750
it so we don't get these from

00:20:04,320 --> 00:20:09,510
infrastructure view we don't get some of

00:20:06,750 --> 00:20:12,930
the other value adds and spinnaker but

00:20:09,510 --> 00:20:16,620
we do still get our pipeline stages for

00:20:12,930 --> 00:20:18,570
things like change management you know

00:20:16,620 --> 00:20:19,560
those kinds of things for gobos business

00:20:18,570 --> 00:20:24,870
it's still going to go through those

00:20:19,560 --> 00:20:27,750
pipeline stages that we did to work

00:20:24,870 --> 00:20:29,790
around it thank you

00:20:27,750 --> 00:20:31,350
anybody from the audience you guys

00:20:29,790 --> 00:20:34,140
anybody want to volunteer any

00:20:31,350 --> 00:20:35,940
interesting with education done just

00:20:34,140 --> 00:20:50,550
vinegar or any blogging special Roman

00:20:35,940 --> 00:20:58,160
experience was has anybody anything well

00:20:50,550 --> 00:21:02,910
I guess the reason because I feel that

00:20:58,160 --> 00:21:07,770
in general a clean development mechanism

00:21:02,910 --> 00:21:10,650
is very important especially when it

00:21:07,770 --> 00:21:15,420
comes to trying to build like a bigger

00:21:10,650 --> 00:21:17,550
community and if you are dealing with

00:21:15,420 --> 00:21:19,980
any project where you have to understand

00:21:17,550 --> 00:21:22,290
all components all dependencies and

00:21:19,980 --> 00:21:26,460
potentially be changing some of a poor

00:21:22,290 --> 00:21:30,660
stuff too for example attachment well

00:21:26,460 --> 00:21:38,700
resource if it does stifle adoption and

00:21:30,660 --> 00:21:39,900
it's not good it might my comment and I

00:21:38,700 --> 00:21:42,960
personally think that that should be a

00:21:39,900 --> 00:21:46,170
focus for for spinnaker going forward as

00:21:42,960 --> 00:21:48,360
it revolves beyond being just a tool

00:21:46,170 --> 00:21:53,690
that is used by a few little offenders

00:21:48,360 --> 00:21:53,690
to it broadly and develop against I

00:21:53,929 --> 00:22:02,280
guess maybe let's try to shift gears a

00:21:58,350 --> 00:22:07,500
little bit and talk about maybe it's

00:22:02,280 --> 00:22:09,570
vinegar to the woman's so this multiple

00:22:07,500 --> 00:22:15,810
ways to the deployment now halyard is

00:22:09,570 --> 00:22:19,710
the prescribed way so one comment they

00:22:15,810 --> 00:22:22,679
can make from myself halyard related and

00:22:19,710 --> 00:22:27,660
I'd like to see what your thoughts are

00:22:22,679 --> 00:22:29,520
on it is we found that on one hand

00:22:27,660 --> 00:22:31,890
that's definitely the most mature and

00:22:29,520 --> 00:22:34,770
developed way to do lifecycle management

00:22:31,890 --> 00:22:36,450
for spinnaker but what we've also found

00:22:34,770 --> 00:22:38,429
is about a lot of people that have to

00:22:36,450 --> 00:22:40,050
manage spinnaker in the typical

00:22:38,429 --> 00:22:43,290
organization for manage just spinnaker

00:22:40,050 --> 00:22:45,990
they manage other things and Haley art

00:22:43,290 --> 00:22:47,970
is a very kind of a you know it's a

00:22:45,990 --> 00:22:50,340
spinnaker specific opinionated thing

00:22:47,970 --> 00:22:52,860
that does a great job managing spinnaker

00:22:50,340 --> 00:22:54,270
but you have to again have learn we'll

00:22:52,860 --> 00:22:56,880
have a healthier primitives to do that

00:22:54,270 --> 00:22:59,130
and I know that the prescribed approach

00:22:56,880 --> 00:23:01,840
in the community is to kind of stick

00:22:59,130 --> 00:23:04,090
with Hell yard but you know

00:23:01,840 --> 00:23:06,940
world is you know oftentimes using

00:23:04,090 --> 00:23:08,679
different approach so I'm curious what

00:23:06,940 --> 00:23:12,010
you guys thoughts are if you use Hellyer

00:23:08,679 --> 00:23:13,570
to begin with and again how you think if

00:23:12,010 --> 00:23:16,419
you have a project like you know five

00:23:13,570 --> 00:23:19,270
years album imagine spinnaker community

00:23:16,419 --> 00:23:21,370
of this way 5,000 people at the summit

00:23:19,270 --> 00:23:23,020
is everybody going to be just using hell

00:23:21,370 --> 00:23:30,010
your doors with them involved in some

00:23:23,020 --> 00:23:32,440
way I can start ok we have not kind of

00:23:30,010 --> 00:23:37,360
taken the journey to exploring to let me

00:23:32,440 --> 00:23:42,159
tell you more particularly because we

00:23:37,360 --> 00:23:48,419
invested in ansible and so terraform is

00:23:42,159 --> 00:23:48,419
being leveraged to provision just to

00:23:49,080 --> 00:23:57,940
temper form is luggage to provision most

00:23:52,179 --> 00:24:02,110
n of the asu as well we essentially do

00:23:57,940 --> 00:24:05,620
90 frying the initialization finalize

00:24:02,110 --> 00:24:07,830
goes being able to talk in place any

00:24:05,620 --> 00:24:12,930
configuration that is environments

00:24:07,830 --> 00:24:18,380
certainly when we bake our rpm

00:24:12,930 --> 00:24:22,950
that is needed by I asked for - Bo -

00:24:18,380 --> 00:24:27,030
bootstrapping and of course the ability

00:24:22,950 --> 00:24:31,860
to leverage terraform is really by a

00:24:27,030 --> 00:24:36,570
connect CLI model and so our foreman

00:24:31,860 --> 00:24:56,040
spinnaker is very much in himself

00:24:36,570 --> 00:24:58,440
CLI driven and so and to your point

00:24:56,040 --> 00:25:01,140
about kind of higher being the first

00:24:58,440 --> 00:25:03,150
craft way managing lifecycle is vinegar

00:25:01,140 --> 00:25:05,730
I think there's really like two there's

00:25:03,150 --> 00:25:07,590
two aspects of how so the first one is

00:25:05,730 --> 00:25:10,160
managing the lifecycle of spinnaker it's

00:25:07,590 --> 00:25:14,310
managing how those services get rotated

00:25:10,160 --> 00:25:16,110
how they actually get into kubernetes or

00:25:14,310 --> 00:25:19,170
onto the machine that they're deploying

00:25:16,110 --> 00:25:21,420
to but there's also what I think one of

00:25:19,170 --> 00:25:24,660
the biggest advantages and this anyone I

00:25:21,420 --> 00:25:27,590
think can take advantage of this is the

00:25:24,660 --> 00:25:32,490
fact that it's a configuration manager

00:25:27,590 --> 00:25:34,880
configuration generator and one of the

00:25:32,490 --> 00:25:37,560
problems that we had a couple years ago

00:25:34,880 --> 00:25:41,040
was like there's so much vinegar

00:25:37,560 --> 00:25:43,530
configuration that communicating that

00:25:41,040 --> 00:25:46,830
and telling everyone hey you can

00:25:43,530 --> 00:25:48,960
configure this and this is doing was

00:25:46,830 --> 00:25:51,390
extremely difficult and there were a lot

00:25:48,960 --> 00:25:53,910
of times where you had one specific

00:25:51,390 --> 00:25:55,350
configuration in order to take advantage

00:25:53,910 --> 00:25:57,990
of that you've had to change something

00:25:55,350 --> 00:25:59,340
in a different in a different area and

00:25:57,990 --> 00:26:01,890
so one of the things that how your does

00:25:59,340 --> 00:26:04,230
is it codifies a lot of those when I

00:26:01,890 --> 00:26:06,240
like to call it tribal knowledge the

00:26:04,230 --> 00:26:09,450
knowledge that comes with working on the

00:26:06,240 --> 00:26:12,330
platform to make it more accessible so I

00:26:09,450 --> 00:26:14,340
think that there's you know there's an

00:26:12,330 --> 00:26:16,740
opportunity for the cap wind and the

00:26:14,340 --> 00:26:19,530
go-go's who are not using how you today

00:26:16,740 --> 00:26:21,570
to still take advantage of some of the

00:26:19,530 --> 00:26:23,460
offerings which is getting the

00:26:21,570 --> 00:26:27,140
configuration right and then you deploy

00:26:23,460 --> 00:26:27,140
services the kind of the way you refer

00:26:29,780 --> 00:26:36,450
started out building images with ansible

00:26:34,560 --> 00:26:38,760
and then deploying them and terraform

00:26:36,450 --> 00:26:41,670
for our spinnaker infrastructure

00:26:38,760 --> 00:26:45,390
currently we deploy spinnaker services

00:26:41,670 --> 00:26:49,190
through that may not be for everyone

00:26:45,390 --> 00:26:51,840
there's we've had good success with it

00:26:49,190 --> 00:26:55,800
we have an encountered a situation where

00:26:51,840 --> 00:26:58,170
that has caused an issue with us we do

00:26:55,800 --> 00:27:01,260
have a test environment that things

00:26:58,170 --> 00:27:03,630
first before we do that and like you

00:27:01,260 --> 00:27:06,000
said we do use how your to prevent new

00:27:03,630 --> 00:27:07,950
configuration files and to understand

00:27:06,000 --> 00:27:10,950
what the Bill of Materials vs. benefit

00:27:07,950 --> 00:27:11,730
releases it's a good source of truth for

00:27:10,950 --> 00:27:14,880
that information

00:27:11,730 --> 00:27:17,820
so as we upgrade services often we'll go

00:27:14,880 --> 00:27:20,250
and look at changes to the halyard

00:27:17,820 --> 00:27:22,350
configuration output to see what new

00:27:20,250 --> 00:27:23,730
parameters may have come out in that

00:27:22,350 --> 00:27:25,500
version when you configure our

00:27:23,730 --> 00:27:27,270
configuration options are there because

00:27:25,500 --> 00:27:29,940
there isn't right now that's probably

00:27:27,270 --> 00:27:32,100
the easiest most accessible source of

00:27:29,940 --> 00:27:37,020
information is it's how you're printing

00:27:32,100 --> 00:27:38,280
configuration bugs and as far as the

00:27:37,020 --> 00:27:40,820
audience is from circular reasoning

00:27:38,280 --> 00:27:45,140
anthony is l-ard

00:27:40,820 --> 00:27:45,140
and praising having to do something else

00:27:46,520 --> 00:27:54,950
okay I got any comments or questions

00:27:50,480 --> 00:27:58,610
from the audience on the prescribed way

00:27:54,950 --> 00:27:59,510
of deploying spinnaker okay a bunch of

00:27:58,610 --> 00:28:02,740
questions okay

00:27:59,510 --> 00:28:02,740
well people let's start over there

00:28:21,010 --> 00:28:27,070
yeah so that's actually something we do

00:28:23,230 --> 00:28:29,470
and armoring so we actually recently

00:28:27,070 --> 00:28:31,860
just started extending how your because

00:28:29,470 --> 00:28:34,360
we have a couple services that we deploy

00:28:31,860 --> 00:28:37,150
that are like artillery to spinnaker and

00:28:34,360 --> 00:28:38,610
we deployed those through higher so we

00:28:37,150 --> 00:28:43,390
actually have a custom build materials

00:28:38,610 --> 00:28:44,650
where that we host that how your takes

00:28:43,390 --> 00:28:46,780
advantage oh we actually added a

00:28:44,650 --> 00:28:52,390
configuration option to the morning

00:28:46,780 --> 00:28:55,900
our specific bucket but essentially what

00:28:52,390 --> 00:28:57,520
we do is we we based our our releases on

00:28:55,900 --> 00:28:59,679
the stable releases and we lay our

00:28:57,520 --> 00:29:02,500
patches or our extensions on top of that

00:28:59,679 --> 00:29:04,540
and then we distribute that custom build

00:29:02,500 --> 00:29:10,290
materials with that point to a different

00:29:04,540 --> 00:29:10,290
doctor registered with our custom

00:29:13,910 --> 00:29:17,620
so I I think the intention

00:29:27,520 --> 00:29:33,030
because if we do our own custom packages

00:29:30,490 --> 00:29:33,030
for everyday

00:29:34,590 --> 00:29:40,780
everything possible vinegar and whenever

00:29:39,610 --> 00:29:44,770
wanting different situation we're happy

00:29:40,780 --> 00:29:46,000
important more code more unique code

00:29:44,770 --> 00:29:47,860
than is necessary so if there are

00:29:46,000 --> 00:29:49,900
situations where you think this would be

00:29:47,860 --> 00:29:53,250
a nice extension point because I need to

00:29:49,900 --> 00:29:53,250
plug in some different behavior

00:29:58,030 --> 00:30:07,720
they're layered built because our

00:30:05,800 --> 00:30:09,490
internal use as a bunch of addition is

00:30:07,720 --> 00:30:12,910
to grab driver which we can open source

00:30:09,490 --> 00:30:14,380
and our build process is very different

00:30:12,910 --> 00:30:16,090
for actual spinnaker than this for open

00:30:14,380 --> 00:30:19,110
source pedigree we're trying to reify

00:30:16,090 --> 00:30:19,110
that process

00:30:20,650 --> 00:30:28,500
yeah would like to learn how I got to be

00:30:23,500 --> 00:30:28,500
useful where the other person stops

00:30:32,090 --> 00:30:37,490
it's a question how to use Hellyer to

00:30:35,060 --> 00:30:40,520
deploy spinnaker our part of the Danish

00:30:37,490 --> 00:30:43,580
configuration how we can use this

00:30:40,520 --> 00:30:53,690
hanging out to manage or deploy custom

00:30:43,580 --> 00:30:55,340
watching yeah so the how you're kind of

00:30:53,690 --> 00:30:56,540
the core of it is like the whole

00:30:55,340 --> 00:30:58,610
material is right and that tells you

00:30:56,540 --> 00:31:03,410
what your what your version is it says

00:30:58,610 --> 00:31:05,960
I'm gonna use this version okay so

00:31:03,410 --> 00:31:07,310
without kind of extending it for any

00:31:05,960 --> 00:31:09,140
custom services you have you actually

00:31:07,310 --> 00:31:11,180
have the ability to change with that

00:31:09,140 --> 00:31:13,460
bill of materials is so if you have a

00:31:11,180 --> 00:31:16,130
custom extension of cloud driver all you

00:31:13,460 --> 00:31:19,160
need to do is update the version and

00:31:16,130 --> 00:31:21,380
like for us we do doc revenues so we

00:31:19,160 --> 00:31:22,910
just specify our our marina or registry

00:31:21,380 --> 00:31:27,050
and then we distribute that to our

00:31:22,910 --> 00:31:29,480
customer so in much the same way if you

00:31:27,050 --> 00:31:32,360
have to extend out driver or gate you

00:31:29,480 --> 00:31:35,300
can also extend halyard and provide like

00:31:32,360 --> 00:31:37,100
a custom bill where so for us we've

00:31:35,300 --> 00:31:40,970
actually we had a service that we had to

00:31:37,100 --> 00:31:43,280
have we added it we basically filled in

00:31:40,970 --> 00:31:45,920
all the points right so we made sure

00:31:43,280 --> 00:31:47,360
that it was deployed in the same way and

00:31:45,920 --> 00:31:49,190
the code was the same for other services

00:31:47,360 --> 00:31:53,290
then we just added that to our build

00:31:49,190 --> 00:31:56,390
materials and then whenever it's enabled

00:31:53,290 --> 00:31:59,540
so I'm happy to talk to you a little bit

00:31:56,390 --> 00:32:02,180
more outward - sure you can I've also

00:31:59,540 --> 00:32:05,390
seen like halyard part of the defender

00:32:02,180 --> 00:32:08,900
version schemed and get up so how they

00:32:05,390 --> 00:32:17,750
manage like what is what I'm going to

00:32:08,900 --> 00:32:19,530
pass that one off to either water to not

00:32:17,750 --> 00:32:22,590
require need upgrade time

00:32:19,530 --> 00:32:24,390
banker there are times though for

00:32:22,590 --> 00:32:26,130
example in that coat lease there is a

00:32:24,390 --> 00:32:28,380
config property change introduced by the

00:32:26,130 --> 00:32:30,180
media member which breaks existing

00:32:28,380 --> 00:32:32,340
configuration of spinnaker but higher is

00:32:30,180 --> 00:32:33,630
aware of that and upgrades itself to get

00:32:32,340 --> 00:32:36,240
the latest version so in the Bill of

00:32:33,630 --> 00:32:37,920
Materials in top-level versions tracking

00:32:36,240 --> 00:32:39,360
compliant which says for this version of

00:32:37,920 --> 00:32:41,010
spinnaker you need at least this version

00:32:39,360 --> 00:32:42,270
of halyard but most of the time you

00:32:41,010 --> 00:32:44,690
actually don't have to upgrade to avoid

00:32:42,270 --> 00:32:44,690
the hassle

00:32:51,620 --> 00:32:58,890
they're looking at like Citroen securing

00:32:56,250 --> 00:33:01,620
our deployment of speaker and looking at

00:32:58,890 --> 00:33:04,080
probably the origins of it like a it

00:33:01,620 --> 00:33:06,059
seems that it used to be separate fleets

00:33:04,080 --> 00:33:08,370
most like in separate instance groups

00:33:06,059 --> 00:33:11,010
and deny its cold eggs in the same

00:33:08,370 --> 00:33:13,260
basket on the same company's cluster

00:33:11,010 --> 00:33:14,909
like what's the it might just be me

00:33:13,260 --> 00:33:17,370
being too new to it it's like what's the

00:33:14,909 --> 00:33:19,470
thinking in terms of spreading it in

00:33:17,370 --> 00:33:23,220
trust own so that once this deck is not

00:33:19,470 --> 00:33:36,539
hosted without driver things like that

00:33:23,220 --> 00:33:37,919
because that that doesn't make is what

00:33:36,539 --> 00:33:39,330
you're trying to do you separate

00:33:37,919 --> 00:33:43,220
different components that's been

00:33:39,330 --> 00:33:43,220
occurred in two different networks

00:33:48,440 --> 00:33:53,220
relying on the committee's secrets which

00:33:50,700 --> 00:33:55,260
are super hard to well try not really

00:33:53,220 --> 00:33:56,970
the best thing about Davis secrets and

00:33:55,260 --> 00:33:59,400
that are also accessible from anywhere

00:33:56,970 --> 00:34:01,020
within the same company's cluster so

00:33:59,400 --> 00:34:02,520
essentially relying more on and good

00:34:01,020 --> 00:34:09,399
credentials from the club provider I

00:34:02,520 --> 00:34:12,999
would UCP or AWS like both either side

00:34:09,399 --> 00:34:32,470
sure are you talking for user logins or

00:34:12,999 --> 00:34:34,179
API access to key I can speak extra to

00:34:32,470 --> 00:34:36,309
that from an AWS perspective and

00:34:34,179 --> 00:34:40,419
hopefully that's helpful

00:34:36,309 --> 00:34:42,789
the only other than accessing s3 storage

00:34:40,419 --> 00:34:46,450
or something like that the only service

00:34:42,789 --> 00:34:50,369
that deeds I am privileges is cloud

00:34:46,450 --> 00:34:54,339
driver so you would give cloud driver

00:34:50,369 --> 00:34:56,460
specific access to NWS I am and none of

00:34:54,339 --> 00:34:59,829
the other none of the other services

00:34:56,460 --> 00:35:01,930
needed at all except if they use s3 is a

00:34:59,829 --> 00:35:03,839
storage back-end for example for their

00:35:01,930 --> 00:35:06,519
own for their own information

00:35:03,839 --> 00:35:11,890
mimin for my kubernetes perspectives

00:35:06,519 --> 00:35:16,180
someone could help me out here so just

00:35:11,890 --> 00:35:17,980
so I understand it's more if one of the

00:35:16,180 --> 00:35:24,730
particular services is compromised you

00:35:17,980 --> 00:35:28,329
basically if deck is compromised you you

00:35:24,730 --> 00:35:33,549
don't want to somebody to have the same

00:35:28,329 --> 00:35:36,460
access right I would then I guess I

00:35:33,549 --> 00:35:40,619
would kind of ask how would you do that

00:35:36,460 --> 00:35:40,619
for for like your internal application

00:35:47,940 --> 00:35:55,140
instance or service account can you see

00:35:50,950 --> 00:35:58,190
by the way that can only do the storage

00:35:55,140 --> 00:35:59,960
and then I would have cloud driver

00:35:58,190 --> 00:36:03,200
with the rest of the permissions on a

00:35:59,960 --> 00:36:07,030
separate fleet has that also NBC and

00:36:03,200 --> 00:36:09,500
completely bypass something yet so I

00:36:07,030 --> 00:36:35,930
think the answer to your question is

00:36:09,500 --> 00:36:37,579
cubed I am so you could use maybe it's

00:36:35,930 --> 00:36:45,740
not necessarily I mean spinning really

00:36:37,579 --> 00:36:47,000
shouldn't require I mean you can have

00:36:45,740 --> 00:36:55,130
requested that has several Commission's

00:36:47,000 --> 00:36:57,109
just a matter of setting up those really

00:36:55,130 --> 00:36:59,059
anything actually does have some

00:36:57,109 --> 00:37:00,020
proposal for better I am integrations

00:36:59,059 --> 00:37:12,529
that what you're running on a certain

00:37:00,020 --> 00:37:14,299
pod so we have I think five minutes left

00:37:12,529 --> 00:37:18,740
before we have to break but they wanted

00:37:14,299 --> 00:37:22,990
to touch one more point that kind of as

00:37:18,740 --> 00:37:26,900
close to my heart and that is actually

00:37:22,990 --> 00:37:28,609
the self-service functionality or like

00:37:26,900 --> 00:37:31,880
the ability like a finally develop on

00:37:28,609 --> 00:37:34,760
the team and I want to go ahead and add

00:37:31,880 --> 00:37:37,160
like a new kubernetes cluster but I for

00:37:34,760 --> 00:37:40,789
instance like instantiate us in that gke

00:37:37,160 --> 00:37:43,819
or something like this from what I

00:37:40,789 --> 00:37:45,829
understand there isn't really a way to

00:37:43,819 --> 00:37:48,410
do it other than Lord of y'all's team

00:37:45,829 --> 00:37:51,090
until them to like pudding with Pradesh

00:37:48,410 --> 00:37:55,770
basically reboots an affair so they can

00:37:51,090 --> 00:37:57,990
dig up a new configuration which is not

00:37:55,770 --> 00:38:02,220
ideal and I think that community is

00:37:57,990 --> 00:38:04,980
aware of it but I'm curious if you guys

00:38:02,220 --> 00:38:08,910
have the same problem and maybe Ethernet

00:38:04,980 --> 00:38:10,830
eekum comments on what's happening as

00:38:08,910 --> 00:38:18,660
far as the different options for solving

00:38:10,830 --> 00:38:21,240
that the answer may not be specific to a

00:38:18,660 --> 00:38:22,859
club in any event in general say you

00:38:21,240 --> 00:38:26,040
know one for bolt on a new cloud driver

00:38:22,859 --> 00:38:27,990
instance right whether it's something

00:38:26,040 --> 00:38:32,850
that you want to do in a hot deployed or

00:38:27,990 --> 00:38:36,300
leading a cold in my humble opinion I

00:38:32,850 --> 00:38:39,180
tend to believe that to avoid rate

00:38:36,300 --> 00:39:28,140
limiting spending rating so you have to

00:38:39,180 --> 00:39:30,960
provide oversight and that is - like I

00:39:28,140 --> 00:39:33,359
have a new you know account and set

00:39:30,960 --> 00:39:36,859
credentials to log in the new pool of

00:39:33,359 --> 00:39:41,609
you know ec2 instances for instance

00:39:36,859 --> 00:39:43,170
right just some degree used - and you're

00:39:41,609 --> 00:39:45,690
still introducing additional traffic

00:39:43,170 --> 00:39:48,990
flow so so the answer I guess is about

00:39:45,690 --> 00:39:50,430
that's like a design decision and that

00:39:48,990 --> 00:39:51,050
is something that is actually one of the

00:39:50,430 --> 00:39:53,540
best prize

00:39:51,050 --> 00:40:05,240
that's your state is what I'm caring in

00:39:53,540 --> 00:40:07,400
you which end in this okay for example

00:40:05,240 --> 00:40:09,140
every time a cluster arrives at a new

00:40:07,400 --> 00:40:10,640
account your behalf noted one delete it

00:40:09,140 --> 00:40:12,560
delete the account all of its resources

00:40:10,640 --> 00:40:14,630
in spinnaker I think it's really likely

00:40:12,560 --> 00:40:17,120
the account concept mapped over well for

00:40:14,630 --> 00:40:18,830
me WS to GC but for more wonderful

00:40:17,120 --> 00:40:20,000
environments in places where you can

00:40:18,830 --> 00:40:21,380
really quickly spend for pennies

00:40:20,000 --> 00:40:23,150
clusters it doesn't make so much sense

00:40:21,380 --> 00:40:25,670
staff to go in and read good crowd River

00:40:23,150 --> 00:40:27,350
every time you make a change so if we

00:40:25,670 --> 00:40:29,030
implement that sub smoking questions a

00:40:27,350 --> 00:40:35,180
little chop it around that should really

00:40:29,030 --> 00:40:46,520
make this okay any final thoughts or

00:40:35,180 --> 00:40:49,190
comments or questions on the world

00:40:46,520 --> 00:40:52,640
account factories and ephemeral accounts

00:40:49,190 --> 00:40:56,510
and deployment accounts are things that

00:40:52,640 --> 00:40:59,360
are being invested so those kind of

00:40:56,510 --> 00:41:01,040
features will be wanted even for an AWS

00:40:59,360 --> 00:41:03,590
provider by some organization say

00:41:01,040 --> 00:41:04,970
exactly yeah right now we since we

00:41:03,590 --> 00:41:06,770
deploy spinnaker with spinnaker it's

00:41:04,970 --> 00:41:09,380
pretty easy we can just change the

00:41:06,770 --> 00:41:11,120
config and click deploy everything and

00:41:09,380 --> 00:41:13,310
come back a little later and it's done

00:41:11,120 --> 00:41:15,650
and it's not a lot of actual work but

00:41:13,310 --> 00:41:16,790
that that isn't a good design still

00:41:15,650 --> 00:41:21,080
probably that's not the ultimate

00:41:16,790 --> 00:41:23,360
pinnacle of what can be done okay

00:41:21,080 --> 00:41:27,020
all right well thank you everyone I

00:41:23,360 --> 00:41:31,210
think that we can keep going forever but

00:41:27,020 --> 00:41:31,210
we're at the time so thanks

00:41:31,360 --> 00:41:36,710
[Applause]

00:41:34,650 --> 00:41:36,710

YouTube URL: https://www.youtube.com/watch?v=yAEXNaSGol0


