Title: Isaac Mosquera "Database Migrations with Spinnaker"
Publication date: 2018-10-24
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,270 --> 00:00:05,380
[Music]

00:00:09,820 --> 00:00:13,259
[Music]

00:00:16,190 --> 00:00:24,539
and here about database migration this

00:00:19,710 --> 00:00:27,150
vinegar bag when you chat about a little

00:00:24,539 --> 00:00:30,960
bit about me I am co-founder and

00:00:27,150 --> 00:00:34,110
engineering at our marine armory serves

00:00:30,960 --> 00:00:37,020
to buy spinnaker at scale from the

00:00:34,110 --> 00:00:38,940
enterprise I've been a spinnaker

00:00:37,020 --> 00:00:42,930
contributor for the last couple years I

00:00:38,940 --> 00:00:44,100
worked in the communities Monica or

00:00:42,930 --> 00:00:48,230
partner codebase

00:00:44,100 --> 00:00:50,420
I also fix a lot of the community plugs

00:00:48,230 --> 00:00:55,379
definitely on top of my list

00:00:50,420 --> 00:00:56,789
you can find me on Twitter and I'm gonna

00:00:55,379 --> 00:00:59,969
name the language era and I want

00:00:56,789 --> 00:01:03,210
spinnaker slap so who's not I joined

00:00:59,969 --> 00:01:06,360
spinnaker slack who's not so in favor

00:01:03,210 --> 00:01:08,640
sighs everyone's in spin your side yeah

00:01:06,360 --> 00:01:11,189
okay so I'm heading back there make sure

00:01:08,640 --> 00:01:15,180
you join spinnaker slack is a really

00:01:11,189 --> 00:01:18,270
great community I'm there holding it in

00:01:15,180 --> 00:01:19,880
there if you run into any issues you

00:01:18,270 --> 00:01:23,010
have a whole team of people

00:01:19,880 --> 00:01:25,140
the best community I've ever been a part

00:01:23,010 --> 00:01:28,860
of so absolutely make certain you're

00:01:25,140 --> 00:01:30,840
part of a lot so it's a common problem

00:01:28,860 --> 00:01:33,570
talking about speakers like actually

00:01:30,840 --> 00:01:35,820
pull this up this morning this was the

00:01:33,570 --> 00:01:37,590
first message in the general channel of

00:01:35,820 --> 00:01:39,750
Spinnaker's laughs what's the best way

00:01:37,590 --> 00:01:43,170
to run a DB vibration this comes up a

00:01:39,750 --> 00:01:44,640
lot it's a very common problem within

00:01:43,170 --> 00:01:51,140
Hispanic community in terms of

00:01:44,640 --> 00:01:54,750
employment database it is a fairly

00:01:51,140 --> 00:01:56,580
complex a full application you have to

00:01:54,750 --> 00:02:00,060
understand deeply about what's going on

00:01:56,580 --> 00:02:03,690
in the internals before you start making

00:02:00,060 --> 00:02:07,020
any changes to it so this is the

00:02:03,690 --> 00:02:08,970
simplest use case button over here I

00:02:07,020 --> 00:02:11,039
asked I didn't think up an application a

00:02:08,970 --> 00:02:13,170
mask my style but I should call it he

00:02:11,039 --> 00:02:15,239
said the loop application and I didn't

00:02:13,170 --> 00:02:17,580
want to say food for 45 minutes I'm just

00:02:15,239 --> 00:02:19,590
going to call it a stinky application so

00:02:17,580 --> 00:02:24,299
this is like a pretty simple East he's

00:02:19,590 --> 00:02:25,829
on at six years old so this is a pretty

00:02:24,299 --> 00:02:27,900
simple application and pretty simple

00:02:25,829 --> 00:02:30,239
setup with a database one application

00:02:27,900 --> 00:02:33,000
connections with database very common

00:02:30,239 --> 00:02:35,280
but in real life it's actually more like

00:02:33,000 --> 00:02:38,940
this you have the least and Emily both

00:02:35,280 --> 00:02:41,370
iterating on features on the schema

00:02:38,940 --> 00:02:44,519
changes data migrations and push that

00:02:41,370 --> 00:02:48,560
out the staging NCQA and then just

00:02:44,519 --> 00:02:51,299
production there's really just a flow

00:02:48,560 --> 00:02:54,360
development and the problem is how do we

00:02:51,299 --> 00:02:56,100
get this from one person

00:02:54,360 --> 00:02:57,780
into a production environment and what

00:02:56,100 --> 00:02:59,790
makes it even harder is that the

00:02:57,780 --> 00:03:04,590
database that to quality development

00:02:59,790 --> 00:03:06,390
environment you know I hate sir not

00:03:04,590 --> 00:03:07,800
distributed look lightly it's going to

00:03:06,390 --> 00:03:11,340
be distributed by the time to get into

00:03:07,800 --> 00:03:14,040
production so why is it harder we've

00:03:11,340 --> 00:03:16,890
solved all these problems were for the

00:03:14,040 --> 00:03:18,870
application so we have version control

00:03:16,890 --> 00:03:21,660
again we can reproduce build you can go

00:03:18,870 --> 00:03:23,880
back to previous versions of our

00:03:21,660 --> 00:03:26,130
application and get the same bill he

00:03:23,880 --> 00:03:28,530
mostly have well at the time do these

00:03:26,130 --> 00:03:30,030
processes although I know that's the

00:03:28,530 --> 00:03:33,480
case for everybody we have a patient

00:03:30,030 --> 00:03:37,140
side but what's really difficult with a

00:03:33,480 --> 00:03:39,390
database is what's his current state who

00:03:37,140 --> 00:03:42,300
was the last person to apply changes to

00:03:39,390 --> 00:03:44,370
it the data and the schema are important

00:03:42,300 --> 00:03:47,010
and they go together how you reproduce

00:03:44,370 --> 00:03:48,770
that data different environments right

00:03:47,010 --> 00:03:51,930
so there's a lot more complex than just

00:03:48,770 --> 00:03:53,910
building a java application and how do

00:03:51,930 --> 00:03:56,520
we consistently updated right so that

00:03:53,910 --> 00:03:58,920
when I would have to play a change and

00:03:56,520 --> 00:04:01,650
somebody else wants to know what's going

00:03:58,920 --> 00:04:03,810
on they're able to see that I'm you

00:04:01,650 --> 00:04:08,550
could play the change in this was the

00:04:03,810 --> 00:04:11,230
dip I mean this is this is actually the

00:04:08,550 --> 00:04:13,780
crux of the entire poverty left

00:04:11,230 --> 00:04:17,139
slide like you just took away this

00:04:13,780 --> 00:04:18,760
that's like that's the whole thing

00:04:17,139 --> 00:04:20,680
the rest is just kind of adding and

00:04:18,760 --> 00:04:23,590
building on top of it but every change

00:04:20,680 --> 00:04:26,620
must be backwards compatible for you

00:04:23,590 --> 00:04:29,919
something the consequences where you go

00:04:26,620 --> 00:04:32,110
to deploy something and your application

00:04:29,919 --> 00:04:34,060
can't breathe instinct and all of a

00:04:32,110 --> 00:04:36,190
sudden the whole system is down and

00:04:34,060 --> 00:04:39,760
reverting from that state sometimes can

00:04:36,190 --> 00:04:43,060
be hours or even days depending on the

00:04:39,760 --> 00:04:45,160
severity of the change so one way of

00:04:43,060 --> 00:04:48,190
thinking about it is like seeing your

00:04:45,160 --> 00:04:49,660
database as an isolated service right we

00:04:48,190 --> 00:04:51,850
think about this but we think about

00:04:49,660 --> 00:04:54,340
application development and our API

00:04:51,850 --> 00:04:55,750
right we always make those members no

00:04:54,340 --> 00:04:58,570
matter what we know that there are

00:04:55,750 --> 00:05:02,710
clients using our API and we have to

00:04:58,570 --> 00:05:05,020
guarantee that that the API is even as

00:05:02,710 --> 00:05:08,470
we iterate on them are additive not so

00:05:05,020 --> 00:05:10,510
not removing particular parts of a API

00:05:08,470 --> 00:05:12,789
so if we just take that concept and

00:05:10,510 --> 00:05:14,710
really apply it to the database you'll

00:05:12,789 --> 00:05:17,800
get you'll get a lot of what you need

00:05:14,710 --> 00:05:20,080
out of deployments for migration if I do

00:05:17,800 --> 00:05:24,099
the exact same thing it does make it

00:05:20,080 --> 00:05:26,190
more complicated but in order to have no

00:05:24,099 --> 00:05:31,190
time I'm the Clement

00:05:26,190 --> 00:05:33,690
to do so there's really two types of

00:05:31,190 --> 00:05:36,630
vibrations there's an anti-vibration an

00:05:33,690 --> 00:05:40,280
eskimo vibration see you hydration is

00:05:36,630 --> 00:05:43,920
adding a column column table but having

00:05:40,280 --> 00:05:46,770
all those type of DML operations and

00:05:43,920 --> 00:05:50,220
then a migration is you know moving data

00:05:46,770 --> 00:05:52,350
from tables from one table to the net

00:05:50,220 --> 00:05:53,700
and the reason I'm really doing this I'm

00:05:52,350 --> 00:05:56,370
what you think mostly you guys are

00:05:53,700 --> 00:05:59,310
probably aware of this is that it does

00:05:56,370 --> 00:06:01,140
affect the way that you think about

00:05:59,310 --> 00:06:04,380
doing your deployments because the

00:06:01,140 --> 00:06:04,830
schema migration typically doesn't take

00:06:04,380 --> 00:06:07,530
very long

00:06:04,830 --> 00:06:10,200
where a data migration takes hours they

00:06:07,530 --> 00:06:12,330
walk in order to get one day that's

00:06:10,200 --> 00:06:14,850
moved from one column or one table to

00:06:12,330 --> 00:06:18,020
the next or maybe you're changing it in

00:06:14,850 --> 00:06:21,210
supersized or from an integer is unique

00:06:18,020 --> 00:06:23,790
and the other thing too if you think

00:06:21,210 --> 00:06:25,050
about those people all of those people

00:06:23,790 --> 00:06:28,590
changes are really just being a

00:06:25,050 --> 00:06:31,320
migration so let's walk through a fairly

00:06:28,590 --> 00:06:33,450
complicated an example of a novela kind

00:06:31,320 --> 00:06:36,750
of equipment or enough sequel database

00:06:33,450 --> 00:06:39,270
and what needs to get done so the first

00:06:36,750 --> 00:06:41,790
thing we want to do is well the boldest

00:06:39,270 --> 00:06:43,680
add an odd multiple column design in the

00:06:41,790 --> 00:06:46,320
database so the first thing that we do

00:06:43,680 --> 00:06:47,160
is we make the schema change to employ

00:06:46,320 --> 00:06:49,950
that out

00:06:47,160 --> 00:06:53,010
well then update the software to write

00:06:49,950 --> 00:06:54,450
to that column and handle and all on

00:06:53,010 --> 00:06:57,780
reading so that's an application change

00:06:54,450 --> 00:07:00,570
and now we have schema application the

00:06:57,780 --> 00:07:04,620
third thing is a data migration actually

00:07:00,570 --> 00:07:06,890
handle and update the no column with the

00:07:04,620 --> 00:07:09,960
actual Parag data

00:07:06,890 --> 00:07:11,610
the fourth step is another schema change

00:07:09,960 --> 00:07:15,480
and then the fifth in an application

00:07:11,610 --> 00:07:17,820
chair so you see the complexity and the

00:07:15,480 --> 00:07:21,780
orchestration that we've come to do in

00:07:17,820 --> 00:07:23,730
order to have a Valentine migration and

00:07:21,780 --> 00:07:27,960
you can instantly see the complexity

00:07:23,730 --> 00:07:30,990
here so why why spinnaker for migration

00:07:27,960 --> 00:07:33,900
so the first thing is just spinnaker has

00:07:30,990 --> 00:07:35,940
an excellent organization system and in

00:07:33,900 --> 00:07:38,039
order to accomplish that previous step

00:07:35,940 --> 00:07:40,229
for that previous migration that I

00:07:38,039 --> 00:07:42,510
outlined to you you're going to need to

00:07:40,229 --> 00:07:44,940
have something be able to show you and

00:07:42,510 --> 00:07:48,900
orchestrate what without the door and

00:07:44,940 --> 00:07:50,580
those are very complex in a sense the

00:07:48,900 --> 00:07:54,090
second thing that we really want to do

00:07:50,580 --> 00:07:57,270
is keep your database changes as code

00:07:54,090 --> 00:08:00,150
and if you're using spinnaker to deploy

00:07:57,270 --> 00:08:01,919
your other code you should use it too

00:08:00,150 --> 00:08:06,020
it's also deploy your hand of a stranger

00:08:01,919 --> 00:08:09,270
so a little bit and then the last piece

00:08:06,020 --> 00:08:12,840
visualization right it's very very

00:08:09,270 --> 00:08:14,190
difficult to make future vibrations if

00:08:12,840 --> 00:08:16,410
you don't know what the past vibrations

00:08:14,190 --> 00:08:18,330
are so using spinnaker to actually

00:08:16,410 --> 00:08:21,060
visualize what has been changed by a

00:08:18,330 --> 00:08:22,650
 and we treat it as code we should

00:08:21,060 --> 00:08:24,870
be able to take it all the way back to

00:08:22,650 --> 00:08:27,330
implement and be able to see exactly

00:08:24,870 --> 00:08:28,979
what's been changed so we're gonna go

00:08:27,330 --> 00:08:31,860
into different approaches with spinnaker

00:08:28,979 --> 00:08:33,599
so if you remember my first slide but

00:08:31,860 --> 00:08:36,780
what that particular gentleman was

00:08:33,599 --> 00:08:39,270
asking about was AWS vibration these are

00:08:36,780 --> 00:08:41,820
different than kubernetes and other

00:08:39,270 --> 00:08:44,700
another system so a show of hands who's

00:08:41,820 --> 00:08:48,540
using a container system like the burn

00:08:44,700 --> 00:08:50,190
any introduction with spinnaker okay and

00:08:48,540 --> 00:08:55,080
then what about who's going to be using

00:08:50,190 --> 00:08:57,540
spinnaker with VMs so roughly roughly 50

00:08:55,080 --> 00:08:58,230
pitches he'll walk you through both of

00:08:57,540 --> 00:09:03,000
those

00:08:58,230 --> 00:09:08,339
I reason that I sell the first one which

00:09:03,000 --> 00:09:11,000
is the simplest case and you know using

00:09:08,339 --> 00:09:11,000
chicken

00:09:11,850 --> 00:09:17,100
so you think Jenkins as a stage to run

00:09:14,880 --> 00:09:19,110
your migration in this case you're not

00:09:17,100 --> 00:09:21,420
spinning up a new VM or spinning up a

00:09:19,110 --> 00:09:24,029
detainer it's a very very simple waiting

00:09:21,420 --> 00:09:26,699
to just kind of run a database migration

00:09:24,029 --> 00:09:30,240
from jr. but the problem with that is

00:09:26,699 --> 00:09:32,040
that there's real security concerns to

00:09:30,240 --> 00:09:34,769
be had especially if you're dealing in a

00:09:32,040 --> 00:09:36,180
large environment your Jenkins system

00:09:34,769 --> 00:09:37,620
typically doesn't have access to

00:09:36,180 --> 00:09:39,959
production over that's not always the

00:09:37,620 --> 00:09:43,410
case depends on a company by company

00:09:39,959 --> 00:09:45,120
basis so it is a bit less secure but

00:09:43,410 --> 00:09:46,740
when you get a return if you guys can

00:09:45,120 --> 00:09:49,889
easily start tomorrow we'll get that

00:09:46,740 --> 00:09:51,329
going you get to see the logs and the

00:09:49,889 --> 00:09:56,990
exactly what's happening on migration

00:09:51,329 --> 00:09:59,880
very simple on the DMV's appointment

00:09:56,990 --> 00:10:04,019
what we're going to do actually spin up

00:09:59,880 --> 00:10:06,660
a VM and run the migration on that VM

00:10:04,019 --> 00:10:07,920
that gives a little trick okay so the

00:10:06,660 --> 00:10:11,100
trick is we're going to instead of

00:10:07,920 --> 00:10:13,440
running the application where we would

00:10:11,100 --> 00:10:15,089
normally say you know server up we're

00:10:13,440 --> 00:10:16,199
actually going to run that migration and

00:10:15,089 --> 00:10:19,290
it's the same codebase in this

00:10:16,199 --> 00:10:21,870
particular example and then what we

00:10:19,290 --> 00:10:23,910
would at the end of that is is a script

00:10:21,870 --> 00:10:25,980
called bundle time and that health check

00:10:23,910 --> 00:10:27,089
is going to do is it's going to report

00:10:25,980 --> 00:10:30,120
back to the eld

00:10:27,089 --> 00:10:33,570
that this process has completed and it's

00:10:30,120 --> 00:10:34,420
okay right so part of this is a horse

00:10:33,570 --> 00:10:37,630
happiness

00:10:34,420 --> 00:10:39,910
so if you have migrations you want that

00:10:37,630 --> 00:10:41,710
don't run very long this is a good way

00:10:39,910 --> 00:10:45,340
of doing it and you're able to actually

00:10:41,710 --> 00:10:48,570
use Spinnaker's health check kind of

00:10:45,340 --> 00:10:52,210
process with inside of the eld to move

00:10:48,570 --> 00:10:55,780
along the process and then the last one

00:10:52,210 --> 00:10:57,340
the kubernetes is the simplest I don't

00:10:55,780 --> 00:10:59,890
know how many cons that I'm sure so many

00:10:57,340 --> 00:11:01,570
good things with one you think you think

00:10:59,890 --> 00:11:03,580
you really need is a really nice way of

00:11:01,570 --> 00:11:06,430
doing it because then this concept of a

00:11:03,580 --> 00:11:08,530
job which is perfect and it runs inside

00:11:06,430 --> 00:11:10,810
of the cluster which is great too

00:11:08,530 --> 00:11:12,940
because it gets us close to our

00:11:10,810 --> 00:11:15,460
production environment and when that job

00:11:12,940 --> 00:11:17,680
is done kubernetes will actually clean

00:11:15,460 --> 00:11:20,710
it up work so here we'll give it the

00:11:17,680 --> 00:11:21,760
command stink Yap and migrate it'll

00:11:20,710 --> 00:11:24,570
actually go run through the migration

00:11:21,760 --> 00:11:28,330
and when it's done it'll just shut down

00:11:24,570 --> 00:11:30,340
so in all of these cases by the way but

00:11:28,330 --> 00:11:33,940
what we're doing is having an

00:11:30,340 --> 00:11:37,300
application code in the migration live

00:11:33,940 --> 00:11:39,760
together so that you have a history in

00:11:37,300 --> 00:11:41,200
your code base of all the different

00:11:39,760 --> 00:11:42,940
kinds of migrations that you've done it

00:11:41,200 --> 00:11:45,010
ought to give things and if I were to

00:11:42,940 --> 00:11:47,320
grab that code base tomorrow I can

00:11:45,010 --> 00:11:49,810
easily apply it for new database and it

00:11:47,320 --> 00:11:52,300
would look very similar to the

00:11:49,810 --> 00:11:55,660
production database - of course you know

00:11:52,300 --> 00:11:57,820
a lot of the data so what would it be in

00:11:55,660 --> 00:12:02,170
pipeline look like inside of like

00:11:57,820 --> 00:12:04,769
spinnaker so first we'll deploy the data

00:12:02,170 --> 00:12:06,420
migration doing that

00:12:04,769 --> 00:12:08,369
that we did before listen to the VM

00:12:06,420 --> 00:12:10,170
slide where we're going to inject user

00:12:08,369 --> 00:12:13,679
data to run the migration and not

00:12:10,170 --> 00:12:15,559
actually brought in a server once that's

00:12:13,679 --> 00:12:18,089
done we actually have to scale it down

00:12:15,559 --> 00:12:20,610
really good resources hanging around

00:12:18,089 --> 00:12:23,670
they will deploy in the dev application

00:12:20,610 --> 00:12:26,850
run to the manual QA staff which is

00:12:23,670 --> 00:12:29,339
really validating that our equipment and

00:12:26,850 --> 00:12:32,639
migration and the previous steps we're

00:12:29,339 --> 00:12:34,290
good ones I've been able to do the same

00:12:32,639 --> 00:12:37,049
thing for production and then remember

00:12:34,290 --> 00:12:38,939
it's scaling down again so the company's

00:12:37,049 --> 00:12:40,619
biggest one is actually simpler we don't

00:12:38,939 --> 00:12:43,319
have to scale down resources because

00:12:40,619 --> 00:12:44,790
kubernetes will handle that for us and

00:12:43,319 --> 00:12:48,600
so what we're doing is we're running a

00:12:44,790 --> 00:12:50,730
migration deploying the dad in the QA

00:12:48,600 --> 00:12:52,860
and then moving on and this one by the

00:12:50,730 --> 00:12:55,049
way looks the same for Jenkins

00:12:52,860 --> 00:12:57,679
we'll just take off the ticket job go

00:12:55,049 --> 00:13:01,489
run it and then move on to the next step

00:12:57,679 --> 00:13:04,230
so one of the problems that we see as

00:13:01,489 --> 00:13:07,199
your applications start to scale and

00:13:04,230 --> 00:13:09,299
more importantly the number of people

00:13:07,199 --> 00:13:11,699
working on the validation start to scale

00:13:09,299 --> 00:13:15,389
is that you really want to start

00:13:11,699 --> 00:13:17,779
separating out into two tokens a very at

00:13:15,389 --> 00:13:20,549
the very beginning it's fairly simple an

00:13:17,779 --> 00:13:23,100
easy way to get started by just having a

00:13:20,549 --> 00:13:25,100
good days there's not really very many

00:13:23,100 --> 00:13:28,139
problems with the exception that each

00:13:25,100 --> 00:13:30,089
migration change will require an

00:13:28,139 --> 00:13:34,470
application deployment so that they stay

00:13:30,089 --> 00:13:35,820
in sync but as you grow you're going to

00:13:34,470 --> 00:13:38,160
want to separate those out

00:13:35,820 --> 00:13:40,860
don't want your application to the

00:13:38,160 --> 00:13:42,870
employer migrations around it also

00:13:40,860 --> 00:13:44,760
encourages developers the states their

00:13:42,870 --> 00:13:46,170
commission deployments by separating

00:13:44,760 --> 00:13:48,390
them out there but developers know that

00:13:46,170 --> 00:13:51,300
you're going to be able to deploy them

00:13:48,390 --> 00:13:53,220
your spaceman separately and then locked

00:13:51,300 --> 00:13:54,750
piece of course doesn't require to point

00:13:53,220 --> 00:14:01,580
over the application it's only a TV

00:13:54,750 --> 00:14:04,800
migration so going use a database for us

00:14:01,580 --> 00:14:06,690
so every schema change that you make

00:14:04,800 --> 00:14:11,700
should only be accompanied with

00:14:06,690 --> 00:14:14,010
something on your back but sometimes

00:14:11,700 --> 00:14:16,920
there's no good rollback action right so

00:14:14,010 --> 00:14:18,750
this is like dropping upon when there's

00:14:16,920 --> 00:14:21,840
eight of it there's no way to get that

00:14:18,750 --> 00:14:25,110
aid of that you have to be extremely

00:14:21,840 --> 00:14:27,450
careful with those and instead focused

00:14:25,110 --> 00:14:29,760
on application rollbacks instead of the

00:14:27,450 --> 00:14:31,530
innovation or so really trying to make

00:14:29,760 --> 00:14:33,840
sure that all of your allocate our

00:14:31,530 --> 00:14:35,520
database changes are added it right here

00:14:33,840 --> 00:14:37,230
you're adding adding problems instead of

00:14:35,520 --> 00:14:41,790
dropping them or making modifications

00:14:37,230 --> 00:14:45,150
rain can fall back so some of the best

00:14:41,790 --> 00:14:47,460
practices one of the things that we see

00:14:45,150 --> 00:14:49,200
we're going across all of our customers

00:14:47,460 --> 00:14:51,420
in fact when there's a bunch of

00:14:49,200 --> 00:14:54,720
application developers working on our

00:14:51,420 --> 00:14:56,790
code base it tends to lead to the

00:14:54,720 --> 00:14:58,500
coupling of the database changes with

00:14:56,790 --> 00:15:00,660
the application changes and both of

00:14:58,500 --> 00:15:02,910
those things going out together and that

00:15:00,660 --> 00:15:04,170
and not only just for one feature now

00:15:02,910 --> 00:15:05,700
you have to do it for four or five

00:15:04,170 --> 00:15:07,380
features right when you're when you're

00:15:05,700 --> 00:15:08,940
having a release training where you have

00:15:07,380 --> 00:15:11,250
version

00:15:08,940 --> 00:15:13,320
and with ten different features it's

00:15:11,250 --> 00:15:15,720
very very difficult to all that database

00:15:13,320 --> 00:15:17,910
changes when you have ten it's funnier

00:15:15,720 --> 00:15:19,710
than going out of one time and only one

00:15:17,910 --> 00:15:22,650
of them breaks be the rollback of the

00:15:19,710 --> 00:15:24,390
whole database in the applications so

00:15:22,650 --> 00:15:27,300
making sure that you can feature flexing

00:15:24,390 --> 00:15:29,730
and least incremental e will actually

00:15:27,300 --> 00:15:33,840
reduce the impact that you have on how

00:15:29,730 --> 00:15:34,800
you will have your database canopy so

00:15:33,840 --> 00:15:37,770
the other thing that I think is

00:15:34,800 --> 00:15:40,500
absolutely critical is just leverage of

00:15:37,770 --> 00:15:42,510
Rhema you can build it yourself there's

00:15:40,500 --> 00:15:44,790
so many people without they're here just

00:15:42,510 --> 00:15:46,970
a couple to name a few it will help you

00:15:44,790 --> 00:15:49,440
just keep your data make changes or code

00:15:46,970 --> 00:15:49,950
when you bring new developers onto the

00:15:49,440 --> 00:15:51,470
team

00:15:49,950 --> 00:15:53,520
they'll clearly be able to see

00:15:51,470 --> 00:15:56,400
documentation about how migrations

00:15:53,520 --> 00:15:59,760
change you absolutely don't want to have

00:15:56,400 --> 00:16:01,350
is it's really you know people working

00:15:59,760 --> 00:16:03,810
around and you have a favorite you might

00:16:01,350 --> 00:16:06,300
have a bill that is homegrown and also

00:16:03,810 --> 00:16:08,700
making changes specifically schema

00:16:06,300 --> 00:16:10,410
changes directly on the database they

00:16:08,700 --> 00:16:12,600
are getting back to that visualization

00:16:10,410 --> 00:16:14,820
and being able to understand who's

00:16:12,600 --> 00:16:17,550
changing things in production databases

00:16:14,820 --> 00:16:19,530
is critical the problems arise or even

00:16:17,550 --> 00:16:24,090
what you want to walk over the database

00:16:19,530 --> 00:16:26,250
to its next game - dropping columns

00:16:24,090 --> 00:16:29,750
again you got to be extremely careful

00:16:26,250 --> 00:16:32,279
with dropping collins typically we have

00:16:29,750 --> 00:16:35,550
kind of a notation

00:16:32,279 --> 00:16:38,310
colleges so make sure that no melting in

00:16:35,550 --> 00:16:40,800
their code base is actually left using

00:16:38,310 --> 00:16:43,610
those columns wait for major application

00:16:40,800 --> 00:16:43,610
changes to the week

00:16:48,410 --> 00:16:55,400
so the other thing that we see too is

00:16:50,990 --> 00:16:58,820
having two obligations actually manage

00:16:55,400 --> 00:17:01,990
the model of the database and the

00:16:58,820 --> 00:17:04,640
problem here isn't so much from a

00:17:01,990 --> 00:17:08,750
technical problem there's more of a

00:17:04,640 --> 00:17:10,160
process in which now we went out with

00:17:08,750 --> 00:17:12,380
these we changing the model you have

00:17:10,160 --> 00:17:13,910
another application also changing model

00:17:12,380 --> 00:17:15,920
you have to deploy both of them at the

00:17:13,910 --> 00:17:18,850
same time because one of them is

00:17:15,920 --> 00:17:21,589
changing the state of the model and

00:17:18,850 --> 00:17:25,760
you'll get yourself in a really really

00:17:21,589 --> 00:17:29,480
difficult against deployment pipeline

00:17:25,760 --> 00:17:31,570
problem and in really if you're going to

00:17:29,480 --> 00:17:34,670
have this type of management of

00:17:31,570 --> 00:17:36,140
economies that it probably best just to

00:17:34,670 --> 00:17:38,240
combine the visual marker with an

00:17:36,140 --> 00:17:40,100
dinosaur moment when breaking things

00:17:38,240 --> 00:17:42,680
down into micro-service well the whole

00:17:40,100 --> 00:17:44,480
idea behind it is to have independent

00:17:42,680 --> 00:17:47,090
services that grab independently from

00:17:44,480 --> 00:17:50,170
each other they're steep but their model

00:17:47,090 --> 00:17:54,700
is encapsulated exposed to foreign API

00:17:50,170 --> 00:17:54,700
but when you do this you get yourself

00:17:58,780 --> 00:18:07,550
relaxed it were for hiring the first

00:18:03,200 --> 00:18:09,050
ball team of seven people looking for a

00:18:07,550 --> 00:18:11,530
new opportunity a new culture work

00:18:09,050 --> 00:18:15,160
please come where's that already

00:18:11,530 --> 00:18:15,160
probably seen by the

00:18:17,280 --> 00:18:19,340

YouTube URL: https://www.youtube.com/watch?v=IkEOM9d1QtY


