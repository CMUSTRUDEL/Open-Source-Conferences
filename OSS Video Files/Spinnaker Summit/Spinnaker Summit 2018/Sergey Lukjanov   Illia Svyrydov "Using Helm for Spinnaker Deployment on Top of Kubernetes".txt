Title: Sergey Lukjanov   Illia Svyrydov "Using Helm for Spinnaker Deployment on Top of Kubernetes"
Publication date: 2018-11-03
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,190 --> 00:00:14,400
[Music]

00:00:15,670 --> 00:00:22,490
so my name is Ilya and I'm working for

00:00:19,669 --> 00:00:25,489
NGOs and recently on a spinnaker as well

00:00:22,490 --> 00:00:28,009
so we are going to like show you some

00:00:25,489 --> 00:00:32,360
kind of our experience with a helmet

00:00:28,009 --> 00:00:34,730
with the deployment of spinnaker and my

00:00:32,360 --> 00:00:36,830
name is Fiona from Development Manager

00:00:34,730 --> 00:00:39,230
at Marion tests and I Ryan team working

00:00:36,830 --> 00:00:41,540
on the application platform including

00:00:39,230 --> 00:00:44,180
the spinnaker part so focused on the

00:00:41,540 --> 00:00:50,150
workloads primarily interval of public

00:00:44,180 --> 00:00:52,400
clouds and cover lenses okay so if

00:00:50,150 --> 00:00:54,710
anybody looked tried to deploy spinnaker

00:00:52,400 --> 00:00:59,510
recently or probably like lost half a

00:00:54,710 --> 00:01:01,040
year it was me okay so it's probably

00:00:59,510 --> 00:01:02,590
going to be interesting for others as

00:01:01,040 --> 00:01:06,920
well

00:01:02,590 --> 00:01:11,920
so like agenda for our talk yes

00:01:06,920 --> 00:01:15,710
so we will take a look at halyard and I

00:01:11,920 --> 00:01:18,320
was good a bit like compared to the helm

00:01:15,710 --> 00:01:20,630
approach and we will dive into the

00:01:18,320 --> 00:01:24,310
morontia supplication platform where we

00:01:20,630 --> 00:01:28,370
have faced this situation like sort out

00:01:24,310 --> 00:01:33,530
find some found some some workarounds

00:01:28,370 --> 00:01:36,770
and yeah we will see and a and an in

00:01:33,530 --> 00:01:44,720
details the approach of the deployment

00:01:36,770 --> 00:01:47,479
spinnaker in a map so Hillyard it is

00:01:44,720 --> 00:01:48,860
actually the like recommended tools for

00:01:47,479 --> 00:01:51,710
the deployment of the spinnaker

00:01:48,860 --> 00:01:54,350
spinnaker it consists from the a lot of

00:01:51,710 --> 00:01:57,049
the services and it's quite difficult to

00:01:54,350 --> 00:01:59,000
deploy it to manage objects or all the

00:01:57,049 --> 00:02:00,439
configs say I recall that my first

00:01:59,000 --> 00:02:02,659
experience with a with the deploying

00:02:00,439 --> 00:02:06,890
spinnaker it was just a screen sessions

00:02:02,659 --> 00:02:10,880
and one or just one open running process

00:02:06,890 --> 00:02:13,910
of gradual for every screen and you know

00:02:10,880 --> 00:02:15,230
it was quite like comfortable to use it

00:02:13,910 --> 00:02:16,220
because you can see at least all the

00:02:15,230 --> 00:02:20,060
walks you know

00:02:16,220 --> 00:02:24,160
in one place and like visible with a

00:02:20,060 --> 00:02:26,600
volume of the of the approached the

00:02:24,160 --> 00:02:30,170
community suggested that suggestion as

00:02:26,600 --> 00:02:34,150
the Holly art and it's not on the

00:02:30,170 --> 00:02:37,730
deployment tool but it's also like

00:02:34,150 --> 00:02:40,250
covering some of the life cycle of the

00:02:37,730 --> 00:02:42,590
spinnaker like managing configuration

00:02:40,250 --> 00:02:49,070
like changing configurations samso

00:02:42,590 --> 00:02:52,760
exists you know also from my experience

00:02:49,070 --> 00:02:54,560
it's not always easy to feed this some

00:02:52,760 --> 00:02:59,360
like spinnaker components with a proper

00:02:54,560 --> 00:03:00,860
config file it's like so and like the

00:02:59,360 --> 00:03:04,670
side effect of who they are you can

00:03:00,860 --> 00:03:07,670
always use it for generations the config

00:03:04,670 --> 00:03:10,790
file modifying it and like likelihood it

00:03:07,670 --> 00:03:12,470
would work when like compared to the

00:03:10,790 --> 00:03:18,350
other way when you're just writing from

00:03:12,470 --> 00:03:20,989
the scratch so like should every of the

00:03:18,350 --> 00:03:28,340
end of the architecture it is basically

00:03:20,989 --> 00:03:31,220
the diamond and CLI and how the art

00:03:28,340 --> 00:03:34,000
could deploy spinnaker for you on top of

00:03:31,220 --> 00:03:37,160
kubernetes on top of Debian Ubuntu

00:03:34,000 --> 00:03:42,430
actually is in the same virtual machine

00:03:37,160 --> 00:03:45,620
and all the state is stored on this

00:03:42,430 --> 00:03:48,830
artist demon demon or under the VMware

00:03:45,620 --> 00:03:52,840
it's Iranian and it's available like a

00:03:48,830 --> 00:03:57,440
very specific port is a predefined port

00:03:52,840 --> 00:04:01,040
and like in order to deploy a spinnaker

00:03:57,440 --> 00:04:04,100
with Holly art you have to first of all

00:04:01,040 --> 00:04:06,530
you have to define the components you

00:04:04,100 --> 00:04:11,360
want to see there and the versions and

00:04:06,530 --> 00:04:14,150
dependencies which is like what the

00:04:11,360 --> 00:04:16,010
deployment would consist of and here is

00:04:14,150 --> 00:04:19,760
the concept of like Bill of Materials

00:04:16,010 --> 00:04:22,040
it's some kind of a file

00:04:19,760 --> 00:04:24,890
what like describes describe such as

00:04:22,040 --> 00:04:28,160
dependencies and like according to the

00:04:24,890 --> 00:04:29,719
combination it's like it's it's all

00:04:28,160 --> 00:04:31,369
needed only

00:04:29,719 --> 00:04:37,489
during the deployment and installation

00:04:31,369 --> 00:04:40,969
stages okay and yeah so here let's just

00:04:37,489 --> 00:04:45,289
take a look as like common scenario of

00:04:40,969 --> 00:04:46,429
the using of the halyard it is quite

00:04:45,289 --> 00:04:49,189
imperative approach

00:04:46,429 --> 00:04:52,009
so you're Colin like executing some

00:04:49,189 --> 00:04:55,969
comments and achieving the state you

00:04:52,009 --> 00:04:58,819
like you I decide and like eventually

00:04:55,969 --> 00:05:03,439
will help working working the spinnaker

00:04:58,819 --> 00:05:06,860
so he can see that first of all we are

00:05:03,439 --> 00:05:10,639
like defining the storage back-end for

00:05:06,860 --> 00:05:13,610
there for our for our spinnaker

00:05:10,639 --> 00:05:16,759
configuration files and enabling the

00:05:13,610 --> 00:05:19,089
provider in this case it is kubernetes

00:05:16,759 --> 00:05:19,089
and

00:05:20,379 --> 00:05:25,599
next we can just edit the config file

00:05:23,179 --> 00:05:30,619
the configuration of the spinnaker and

00:05:25,599 --> 00:05:32,629
the idea is you shouldn't store any

00:05:30,619 --> 00:05:34,610
config file on your local file on the

00:05:32,629 --> 00:05:37,879
local file system and you're doing

00:05:34,610 --> 00:05:42,860
anything with it like throw the call in

00:05:37,879 --> 00:05:46,489
the hull comment and yeah and eventually

00:05:42,860 --> 00:05:50,539
we call L deploy apply and yeah you're

00:05:46,489 --> 00:05:57,379
going to have a spinnaker it was just it

00:05:50,539 --> 00:05:59,179
was like one approach and but next way

00:05:57,379 --> 00:06:02,209
how we can do it we can do it with a

00:05:59,179 --> 00:06:05,029
helm like using a helm as a package

00:06:02,209 --> 00:06:07,189
manager for kubernetes there are lot

00:06:05,029 --> 00:06:11,779
manifests available for the spinnaker

00:06:07,189 --> 00:06:16,249
and actually mantas was working on own

00:06:11,779 --> 00:06:18,289
version of them and it was likes to go a

00:06:16,249 --> 00:06:21,999
couple stages what I noticed with

00:06:18,289 --> 00:06:26,360
evolution of stages of helm charts and

00:06:21,999 --> 00:06:28,999
so previously the idea was just playing

00:06:26,360 --> 00:06:32,300
helm chart so we have a list of values

00:06:28,999 --> 00:06:35,419
some kind of templates and they're like

00:06:32,300 --> 00:06:39,709
render it to the end deployed into on

00:06:35,419 --> 00:06:43,320
top of kubernetes and with like with

00:06:39,709 --> 00:06:46,020
this approach we have some like sort of

00:06:43,320 --> 00:06:50,060
early package management like not too

00:06:46,020 --> 00:06:52,890
much logic within it however like the

00:06:50,060 --> 00:06:56,370
disadvantage of such approaches we we

00:06:52,890 --> 00:06:58,380
were going to on every change like you

00:06:56,370 --> 00:07:00,300
can imagine that like I'll just add in

00:06:58,380 --> 00:07:04,530
some additional account or add in

00:07:00,300 --> 00:07:06,030
another Jenkins to your spinnaker o or

00:07:04,530 --> 00:07:09,390
whatever you want you have to just

00:07:06,030 --> 00:07:15,570
redeploy your your installation we still

00:07:09,390 --> 00:07:19,740
held on great so and like the next stage

00:07:15,570 --> 00:07:23,760
of like changing it what what was

00:07:19,740 --> 00:07:27,080
changed actually there are now two

00:07:23,760 --> 00:07:33,140
stages so we are deploying Holly art and

00:07:27,080 --> 00:07:37,820
after this just having a chance what

00:07:33,140 --> 00:07:40,980
technically just call the Holly art and

00:07:37,820 --> 00:07:45,210
it's it looks like much much smarter and

00:07:40,980 --> 00:07:47,820
the actual it is so we can have like

00:07:45,210 --> 00:07:50,940
more complex things inside but we are

00:07:47,820 --> 00:07:56,250
also adding their more logic more

00:07:50,940 --> 00:07:59,550
execution like nature to your charts and

00:07:56,250 --> 00:08:02,310
yeah like you know it's not very easy to

00:07:59,550 --> 00:08:04,920
debug deployment of ham charts

00:08:02,310 --> 00:08:08,610
especially if you have some some kind of

00:08:04,920 --> 00:08:12,920
logic inside anyhow so it's all mostly

00:08:08,610 --> 00:08:17,610
based on the hooks of the charts and

00:08:12,920 --> 00:08:20,340
there is a mechanism when you can define

00:08:17,610 --> 00:08:23,310
some sort of custom behavior for your

00:08:20,340 --> 00:08:25,110
charts for deployment specifically like

00:08:23,310 --> 00:08:29,880
there is like interface via

00:08:25,110 --> 00:08:32,070
configuration maps so you can pass

00:08:29,880 --> 00:08:35,430
specific parameter and pass as they're

00:08:32,070 --> 00:08:38,310
like bash script into the config map so

00:08:35,430 --> 00:08:44,070
it it will be executed on the in on the

00:08:38,310 --> 00:08:46,680
install stage of the shirt so let us

00:08:44,070 --> 00:08:50,360
talk about the pros and cons of this

00:08:46,680 --> 00:08:53,490
approach so first of all we have some

00:08:50,360 --> 00:08:55,800
sort of benefits from dock fujian so we

00:08:53,490 --> 00:08:56,690
have some sort of consistency across the

00:08:55,800 --> 00:08:59,089
tools

00:08:56,690 --> 00:09:02,870
like there is a component let's call

00:08:59,089 --> 00:09:06,259
Orca it has some like some form of some

00:09:02,870 --> 00:09:09,110
sort of config file and having this like

00:09:06,259 --> 00:09:11,209
integrate it all together so it means

00:09:09,110 --> 00:09:14,269
okay halyard should support this config

00:09:11,209 --> 00:09:17,990
it should be able to render it to deploy

00:09:14,269 --> 00:09:21,529
with it and it's some kind of internal

00:09:17,990 --> 00:09:26,389
reuse it and like internal improving the

00:09:21,529 --> 00:09:29,089
things we are using and yeah but from

00:09:26,389 --> 00:09:32,779
like other side is a mention already it

00:09:29,089 --> 00:09:35,600
becomes a lot more complex and like it's

00:09:32,779 --> 00:09:38,660
something like we are like moving a bit

00:09:35,600 --> 00:09:40,970
out from the idea of immutable

00:09:38,660 --> 00:09:42,620
infrastructure because we have like some

00:09:40,970 --> 00:09:49,810
some sort of configuration management

00:09:42,620 --> 00:09:54,649
inside okay so I think like continue

00:09:49,810 --> 00:09:57,079
okay so before continuing just want to I

00:09:54,649 --> 00:09:58,790
think in towards from rice so basically

00:09:57,079 --> 00:10:01,189
for deploying spinning clear we have

00:09:58,790 --> 00:10:03,889
Hillier that is a visual tool that can

00:10:01,189 --> 00:10:06,589
do spinnaker deployment on top of just

00:10:03,889 --> 00:10:09,980
util machines kubernetes using the

00:10:06,589 --> 00:10:13,130
native cloud drivers and there is a like

00:10:09,980 --> 00:10:15,019
long on time exists in the ground chart

00:10:13,130 --> 00:10:17,870
that was initially with a pure manifest

00:10:15,019 --> 00:10:21,620
and now just wrapping around the alert

00:10:17,870 --> 00:10:25,839
so the way how I want to talk about the

00:10:21,620 --> 00:10:29,149
like benefits and issues that you can

00:10:25,839 --> 00:10:31,490
face during the using account for the

00:10:29,149 --> 00:10:33,920
spinnaker deployment I want to just go

00:10:31,490 --> 00:10:37,759
through our journey internally at my

00:10:33,920 --> 00:10:41,870
ranches and like Pacific cover what we

00:10:37,759 --> 00:10:43,790
saw do the spinnaker deployment and our

00:10:41,870 --> 00:10:47,569
journey started around at two years ago

00:10:43,790 --> 00:10:50,209
we spinnaker and at that time there were

00:10:47,569 --> 00:10:52,970
no Hillard and basic you know how much

00:10:50,209 --> 00:10:56,839
art for it so it was a pretty new space

00:10:52,970 --> 00:11:00,589
for like deploying spinnaker so just

00:10:56,839 --> 00:11:03,079
just to share it be to make it clear why

00:11:00,589 --> 00:11:04,850
why we doing a spinning here our primary

00:11:03,079 --> 00:11:06,439
business is focused around the OpenStack

00:11:04,850 --> 00:11:09,709
and kubernetes for providing the

00:11:06,439 --> 00:11:11,529
infrastructure and we now extend in

00:11:09,709 --> 00:11:14,089
like offering for our customers to

00:11:11,529 --> 00:11:16,480
provide application platform and the

00:11:14,089 --> 00:11:20,869
spinnaker used as part of it

00:11:16,480 --> 00:11:23,600
so just in a few words the main idea

00:11:20,869 --> 00:11:25,759
that it's deployed on top of kubernetes

00:11:23,600 --> 00:11:28,249
so we using converges abstraction layer

00:11:25,759 --> 00:11:30,589
to make it working on top of bare-metal

00:11:28,249 --> 00:11:33,740
public and private clouds and that's

00:11:30,589 --> 00:11:36,230
that's a key point for us and we run in

00:11:33,740 --> 00:11:38,619
lots of services other than spinnaker so

00:11:36,230 --> 00:11:42,529
it was very important for us not only

00:11:38,619 --> 00:11:44,540
have spinnaker as a base but you support

00:11:42,529 --> 00:11:47,389
many other tooling that needed for

00:11:44,540 --> 00:11:51,649
application delivery and there are a

00:11:47,389 --> 00:11:56,990
couple of like a key ideas under the

00:11:51,649 --> 00:12:00,040
hood of our project for example it's

00:11:56,990 --> 00:12:01,790
like applications pipeline concept so we

00:12:00,040 --> 00:12:05,240
integrated all the application

00:12:01,790 --> 00:12:07,459
definitions into the pipelines and it's

00:12:05,240 --> 00:12:10,220
all defined as cords so that was like

00:12:07,459 --> 00:12:12,649
the key point for us to have ability to

00:12:10,220 --> 00:12:19,249
define the system and platform itself as

00:12:12,649 --> 00:12:22,670
God it was applications okay so let me

00:12:19,249 --> 00:12:25,699
start with a set of requirements for the

00:12:22,670 --> 00:12:28,569
spinnaker deployment that we faced

00:12:25,699 --> 00:12:31,129
during our initial investigations and

00:12:28,569 --> 00:12:33,620
with the case I said that it should be

00:12:31,129 --> 00:12:36,110
deployment of kubernetes and we were not

00:12:33,620 --> 00:12:40,790
interested in any other tools I mean any

00:12:36,110 --> 00:12:43,309
energy deployment targets as I had a

00:12:40,790 --> 00:12:45,139
previous slide the concretion and the

00:12:43,309 --> 00:12:48,139
Bill of Materials should be defined as

00:12:45,139 --> 00:12:52,189
code another very important scene that

00:12:48,139 --> 00:12:55,040
we faced initially vangor trying to use

00:12:52,189 --> 00:12:58,569
Hillard earlier this year is that

00:12:55,040 --> 00:13:01,939
configuration and deployment approaches

00:12:58,569 --> 00:13:05,420
for all the components should be as

00:13:01,939 --> 00:13:07,779
similar as possible otherwise you end up

00:13:05,420 --> 00:13:10,610
with lots of integrations between the

00:13:07,779 --> 00:13:12,649
deployment tools instead of getting the

00:13:10,610 --> 00:13:16,160
profit from from working together

00:13:12,649 --> 00:13:18,230
components the support for offline

00:13:16,160 --> 00:13:20,860
deployment is probably a bit out of

00:13:18,230 --> 00:13:23,240
topic and it could be done in all

00:13:20,860 --> 00:13:25,550
approaches int require some

00:13:23,240 --> 00:13:29,779
work in some of them but in general it's

00:13:25,550 --> 00:13:31,940
doable or always doable if I said the

00:13:29,779 --> 00:13:34,940
important part was integrating with

00:13:31,940 --> 00:13:38,029
multiple external tools such as Jenkins

00:13:34,940 --> 00:13:41,779
garret etc and some external to the

00:13:38,029 --> 00:13:43,880
system tools like the cloud cloud

00:13:41,779 --> 00:13:46,790
providers in imbuing systems and

00:13:43,880 --> 00:13:50,930
external clouds and that requires more

00:13:46,790 --> 00:13:54,279
configuration in the more like for us it

00:13:50,930 --> 00:13:58,040
was meaning to have as possible as

00:13:54,279 --> 00:14:01,160
called approach for configs and there

00:13:58,040 --> 00:14:03,680
are two just like very technical

00:14:01,160 --> 00:14:05,450
requirements to have end-to-end

00:14:03,680 --> 00:14:07,600
encryption for the internal

00:14:05,450 --> 00:14:12,100
communication for the end-user

00:14:07,600 --> 00:14:15,130
communication for spinnaker and Dinah's

00:14:12,100 --> 00:14:20,660
management through their claws

00:14:15,130 --> 00:14:25,430
integrations so so initially we started

00:14:20,660 --> 00:14:27,680
with our own home chart and then in in

00:14:25,430 --> 00:14:30,230
upstream there was another ham chart

00:14:27,680 --> 00:14:38,240
created based on just pure crisis

00:14:30,230 --> 00:14:41,180
manifests and the very very important

00:14:38,240 --> 00:14:43,040
part here that we decided that we want

00:14:41,180 --> 00:14:46,760
to manage all the components for the

00:14:43,040 --> 00:14:51,290
system with account charts so we really

00:14:46,760 --> 00:14:53,779
had a ham charter component and some

00:14:51,290 --> 00:14:55,940
some parts of all the syncing and

00:14:53,779 --> 00:14:58,040
findings was that spinnaker itself is

00:14:55,940 --> 00:15:01,010
not very difficult to manage in a parade

00:14:58,040 --> 00:15:04,100
because it's it's heavenly Microsoft's

00:15:01,010 --> 00:15:07,550
architecture in Seoul most stateless so

00:15:04,100 --> 00:15:10,730
you can easily upgrade it and there are

00:15:07,550 --> 00:15:12,950
usually no issues with LCM itself while

00:15:10,730 --> 00:15:17,470
other components of a system were

00:15:12,950 --> 00:15:20,060
requiring much more work sometimes and

00:15:17,470 --> 00:15:22,399
like another reason for for choosing

00:15:20,060 --> 00:15:24,380
hell was that it's it's a default

00:15:22,399 --> 00:15:27,230
packaging tool for kubernetes and we

00:15:24,380 --> 00:15:30,310
historically had big registry of helm

00:15:27,230 --> 00:15:36,710
based applications in our like internal

00:15:30,310 --> 00:15:38,690
catalog so so it beats about

00:15:36,710 --> 00:15:41,900
we ended up with with spinnaker

00:15:38,690 --> 00:15:43,550
deployment so we using the like a master

00:15:41,900 --> 00:15:46,220
chart that connects all components

00:15:43,550 --> 00:15:48,740
together and provide some shareable

00:15:46,220 --> 00:15:50,150
global configuration so basically we

00:15:48,740 --> 00:15:52,880
still have the spinnaker chart

00:15:50,150 --> 00:15:56,240
separately but the whole platform

00:15:52,880 --> 00:15:59,060
installed using the master chart so it

00:15:56,240 --> 00:16:04,610
allows to share some configuration like

00:15:59,060 --> 00:16:07,490
airbag controls TLS and etc across all

00:16:04,610 --> 00:16:11,540
the components and configure the

00:16:07,490 --> 00:16:13,700
persistence and the way how service was

00:16:11,540 --> 00:16:17,030
exposed to the end-user in the same way

00:16:13,700 --> 00:16:19,610
and as I said we have helm charts brake

00:16:17,030 --> 00:16:22,460
components and today there are more than

00:16:19,610 --> 00:16:24,560
20 in total including the core

00:16:22,460 --> 00:16:28,940
components X pinnacle Jenkins Gerrit and

00:16:24,560 --> 00:16:31,280
their dependencies and some optional

00:16:28,940 --> 00:16:34,340
components like caress Claire

00:16:31,280 --> 00:16:38,270
artifactory Walton etc so basically it

00:16:34,340 --> 00:16:41,570
means that we have a big big register of

00:16:38,270 --> 00:16:43,430
our tooling that could be integrated

00:16:41,570 --> 00:16:46,820
with spinnaker and could be installed

00:16:43,430 --> 00:16:50,930
and using the master chart to to rule

00:16:46,820 --> 00:16:52,760
the whole installation so from from a

00:16:50,930 --> 00:16:55,520
configuration point of view we decided

00:16:52,760 --> 00:16:57,560
to expose all the configurations that

00:16:55,520 --> 00:17:01,070
could be changed by the user into the

00:16:57,560 --> 00:17:02,390
value CMO file in a master chart so it

00:17:01,070 --> 00:17:04,130
means that there are a single place

00:17:02,390 --> 00:17:06,650
where you can define as called all the

00:17:04,130 --> 00:17:08,360
configuration the way how all the

00:17:06,650 --> 00:17:10,130
components will be deployed and you can

00:17:08,360 --> 00:17:13,550
easily commit it in the git repository

00:17:10,130 --> 00:17:15,140
and manage it is called way and they're

00:17:13,550 --> 00:17:18,740
all sensitive data stores incremental

00:17:15,140 --> 00:17:23,330
secrets so we we don't have to commit

00:17:18,740 --> 00:17:25,160
the data for the LCM using the helm

00:17:23,330 --> 00:17:29,180
hooks that are enough for managing

00:17:25,160 --> 00:17:35,000
spinnaker and basically it's usually

00:17:29,180 --> 00:17:38,870
about very small additional commands

00:17:35,000 --> 00:17:41,930
during the upgrades for for enforcing

00:17:38,870 --> 00:17:45,140
the zero downtime upgrade over of some

00:17:41,930 --> 00:17:47,210
components and like important parts that

00:17:45,140 --> 00:17:49,250
we use in the Eldar for all services we

00:17:47,210 --> 00:17:51,410
ended up with just

00:17:49,250 --> 00:17:55,490
probably simplest approach of enable

00:17:51,410 --> 00:17:59,350
nailed up there and for the TLS were

00:17:55,490 --> 00:18:01,610
using the some parts of Eastern that can

00:17:59,350 --> 00:18:04,730
automatically manage all the

00:18:01,610 --> 00:18:07,100
configuration of TLS and rotation of the

00:18:04,730 --> 00:18:10,040
keys and a service to service

00:18:07,100 --> 00:18:13,970
communication is well end-user to best

00:18:10,040 --> 00:18:16,370
spinnaker communication and for Dinah's

00:18:13,970 --> 00:18:19,460
there is an external DNS product in

00:18:16,370 --> 00:18:20,780
kubernetes that is used so it's it's

00:18:19,460 --> 00:18:23,890
covering our requirements for the

00:18:20,780 --> 00:18:28,150
automatically configuring Dinah's part

00:18:23,890 --> 00:18:31,580
so so now i want to just go through some

00:18:28,150 --> 00:18:34,820
comparison of what what we currently do

00:18:31,580 --> 00:18:37,940
in our own home chart and how it's done

00:18:34,820 --> 00:18:40,430
in a like hallerton upstream charts and

00:18:37,940 --> 00:18:42,650
when that thing i will be sharing some

00:18:40,430 --> 00:18:46,040
examples of like what we faced during

00:18:42,650 --> 00:18:48,460
during this journey so thought was

00:18:46,040 --> 00:18:55,070
gathered i think that probably the most

00:18:48,460 --> 00:18:56,540
important plus of using LRT that most of

00:18:55,070 --> 00:18:58,160
all of the implemented features in

00:18:56,540 --> 00:19:01,130
spinnaker are immediately going to be

00:18:58,160 --> 00:19:03,910
available through the hill art like the

00:19:01,130 --> 00:19:07,340
good example is like canary analysis

00:19:03,910 --> 00:19:10,240
initially when it was added it was not

00:19:07,340 --> 00:19:13,010
very easy to deploy it manually and the

00:19:10,240 --> 00:19:16,460
only way to configure it in the right

00:19:13,010 --> 00:19:21,350
way was to enable it with alert and it

00:19:16,460 --> 00:19:24,110
was close to single comment for show

00:19:21,350 --> 00:19:28,160
it's it's officially supported to that

00:19:24,110 --> 00:19:31,070
part of a spinnaker community so there

00:19:28,160 --> 00:19:33,500
is no no need to like support it from

00:19:31,070 --> 00:19:36,140
scratch and dogfooding part is very

00:19:33,500 --> 00:19:39,320
important as well because is Elia

00:19:36,140 --> 00:19:41,240
mentioned Hillard internally using some

00:19:39,320 --> 00:19:43,520
parts of a spinnaker for deployment so

00:19:41,240 --> 00:19:47,900
basically it's a spinnaker deployed

00:19:43,520 --> 00:19:52,640
using spinnaker at that converts

00:19:47,900 --> 00:19:54,920
actually to the big issue that with this

00:19:52,640 --> 00:19:56,210
approach it's very difficult to tune the

00:19:54,920 --> 00:19:58,190
spinnaker deployment on top of

00:19:56,210 --> 00:20:01,970
kubernetes and if you want to run

00:19:58,190 --> 00:20:03,290
spinnaker like using all the commences

00:20:01,970 --> 00:20:07,940
features like

00:20:03,290 --> 00:20:10,190
like ingress TLS through Easter probably

00:20:07,940 --> 00:20:13,300
is some some more tuned resistant

00:20:10,190 --> 00:20:16,220
volumes you'll need to provide much more

00:20:13,300 --> 00:20:18,620
like annotations and additional objects

00:20:16,220 --> 00:20:21,590
in kubernetes that are not supported out

00:20:18,620 --> 00:20:26,420
of the box in a v1 grant is provided it

00:20:21,590 --> 00:20:28,220
is used by Hillard there is a plan to to

00:20:26,420 --> 00:20:30,620
switch to the v2 commands provider that

00:20:28,220 --> 00:20:33,950
will allow to define additional

00:20:30,620 --> 00:20:36,650
manifests but it still will be a bit

00:20:33,950 --> 00:20:41,590
more customized from the officially

00:20:36,650 --> 00:20:41,590
supported version so it will probably

00:20:42,790 --> 00:20:49,040
not not so not so supported by community

00:20:46,460 --> 00:20:50,840
if you're going to like override the way

00:20:49,040 --> 00:20:55,940
how how the subjects deployed in a

00:20:50,840 --> 00:20:58,490
kubernetes another another issue we

00:20:55,940 --> 00:21:03,860
faced when he was it using Hillard the

00:20:58,490 --> 00:21:06,560
the approach you of using needs isn't

00:21:03,860 --> 00:21:09,050
always as cord and you intended to

00:21:06,560 --> 00:21:11,060
create the configuration and manage

00:21:09,050 --> 00:21:13,940
configuration usually by running the

00:21:11,060 --> 00:21:16,430
he'll comment and the whole idea like in

00:21:13,940 --> 00:21:19,220
the most of the benefits of alert are

00:21:16,430 --> 00:21:21,320
around simplifying the separations by

00:21:19,220 --> 00:21:24,140
the he'll comment that makes it more

00:21:21,320 --> 00:21:30,320
imperative instead of our declared to be

00:21:24,140 --> 00:21:33,050
defined escort and because of Hillard

00:21:30,320 --> 00:21:36,710
providing the bill of materials by its

00:21:33,050 --> 00:21:42,680
own and managing configurations in you

00:21:36,710 --> 00:21:47,600
know own configuration files in a folder

00:21:42,680 --> 00:21:50,650
you basically cannot directly integrated

00:21:47,600 --> 00:21:54,230
with other external orchestration and

00:21:50,650 --> 00:21:56,930
even if you have like most of your

00:21:54,230 --> 00:21:59,390
services deployed using helm for example

00:21:56,930 --> 00:22:01,240
if you start using alert you basically

00:21:59,390 --> 00:22:03,680
end up with a completely separate

00:22:01,240 --> 00:22:06,740
orchestration tool with own approaches

00:22:03,680 --> 00:22:12,230
and the own way to configure and you

00:22:06,740 --> 00:22:14,630
need to manage to - waste of deploying

00:22:12,230 --> 00:22:16,190
the software and then if you want them

00:22:14,630 --> 00:22:17,810
to work together

00:22:16,190 --> 00:22:22,040
it's ended up with a much more

00:22:17,810 --> 00:22:24,530
integration cord than you want so it was

00:22:22,040 --> 00:22:28,070
probably one of the main reasons because

00:22:24,530 --> 00:22:30,350
we decided not to use Hillard at the

00:22:28,070 --> 00:22:34,670
beginning

00:22:30,350 --> 00:22:37,370
so if we talk about the initial upstream

00:22:34,670 --> 00:22:41,540
helm chart that was based on a pure co-

00:22:37,370 --> 00:22:46,360
manifests that is that is a way that we

00:22:41,540 --> 00:22:50,600
used for our current spinnaker chart and

00:22:46,360 --> 00:22:53,240
the main differences I already told

00:22:50,600 --> 00:22:56,630
about all of them but the idea is that

00:22:53,240 --> 00:22:59,060
we made it more open aided and more

00:22:56,630 --> 00:23:04,000
integrated with commences features than

00:22:59,060 --> 00:23:06,410
it was done in upstream with with some

00:23:04,000 --> 00:23:08,690
some stuff like LDAP support that is

00:23:06,410 --> 00:23:15,890
questionable it should be enabled by

00:23:08,690 --> 00:23:19,400
default but for us it works fine oh and

00:23:15,890 --> 00:23:22,160
a very important thing for us was to to

00:23:19,400 --> 00:23:24,680
provide the configurability through the

00:23:22,160 --> 00:23:25,940
value CMO so it was missing in an

00:23:24,680 --> 00:23:30,950
upstream home chart

00:23:25,940 --> 00:23:33,890
it was just intended to pass the

00:23:30,950 --> 00:23:37,370
spinnaker configuration files through

00:23:33,890 --> 00:23:41,240
the values value CMO and it was not very

00:23:37,370 --> 00:23:45,110
easy to manage because you basically had

00:23:41,240 --> 00:23:47,660
a nest of the ml files with without the

00:23:45,110 --> 00:23:52,760
way to validate this files before

00:23:47,660 --> 00:23:54,800
deploying the spinnaker itself so if

00:23:52,760 --> 00:23:57,440
you're talking about the current version

00:23:54,800 --> 00:24:01,820
of a option key on chart it was a switch

00:23:57,440 --> 00:24:04,220
to to use hilbert under the hood and as

00:24:01,820 --> 00:24:09,980
i said it was our first attempt to do

00:24:04,220 --> 00:24:16,190
and it was not enough configurable as

00:24:09,980 --> 00:24:17,930
cord and it wasn't able to attune the

00:24:16,190 --> 00:24:21,170
way how spinning clear deploy it into

00:24:17,930 --> 00:24:23,000
the kubernetes and right now what is

00:24:21,170 --> 00:24:25,370
implemented in an upstream chart it's

00:24:23,000 --> 00:24:30,020
defined as stable in in the helm

00:24:25,370 --> 00:24:32,030
repository so if you if you need

00:24:30,020 --> 00:24:34,220
spinnaker on top of kubernetes you can

00:24:32,030 --> 00:24:36,800
just pick up this chart and in the use

00:24:34,220 --> 00:24:38,690
for deployments but if you will need to

00:24:36,800 --> 00:24:40,790
customize it

00:24:38,690 --> 00:24:43,550
you'll probably face with a couple of

00:24:40,790 --> 00:24:45,920
issues the first one that you cannot

00:24:43,550 --> 00:24:49,430
configure spinnaker a lot through the

00:24:45,920 --> 00:24:52,160
value CMO so you will need to write the

00:24:49,430 --> 00:24:55,670
hell commands and create a config map

00:24:52,160 --> 00:24:58,940
and mark in and basically write the hell

00:24:55,670 --> 00:25:01,280
commands into that and it will be the

00:24:58,940 --> 00:25:03,500
part that basically means that you

00:25:01,280 --> 00:25:05,870
separate in some configuration that is

00:25:03,500 --> 00:25:08,000
supported into the value CMO in the code

00:25:05,870 --> 00:25:10,970
way and the some of the configuration

00:25:08,000 --> 00:25:12,620
that is not supported will go in an

00:25:10,970 --> 00:25:15,980
imperative way in the separated place

00:25:12,620 --> 00:25:19,610
that could be very error-prone and could

00:25:15,980 --> 00:25:22,970
add much more issues with integration

00:25:19,610 --> 00:25:25,910
with other services on the on the good

00:25:22,970 --> 00:25:29,780
side that it's I would say it's more

00:25:25,910 --> 00:25:34,520
less actively developing right now in in

00:25:29,780 --> 00:25:38,240
upstream and I think that from our side

00:25:34,520 --> 00:25:41,870
we kind of plan to reevaluate the hell

00:25:38,240 --> 00:25:44,000
earth usage under the hood and propose

00:25:41,870 --> 00:25:48,050
better configuration for the boss

00:25:44,000 --> 00:25:51,460
Hillard and in a helmet art so we right

00:25:48,050 --> 00:25:55,460
now we wait and using the hell out with

00:25:51,460 --> 00:25:57,320
with a bit more extended way of

00:25:55,460 --> 00:26:01,010
configuration so we have our internal

00:25:57,320 --> 00:26:03,800
Fork and like preparing some proposals

00:26:01,010 --> 00:26:07,850
to to do the configurability through

00:26:03,800 --> 00:26:11,840
there through the escort approach other

00:26:07,850 --> 00:26:13,910
than the hell commands runs and we

00:26:11,840 --> 00:26:16,580
preparing to open source our charts as

00:26:13,910 --> 00:26:20,360
well we unfortunately had lots of the

00:26:16,580 --> 00:26:22,310
panties on our internal to him but like

00:26:20,360 --> 00:26:25,760
right now it's almost cleaned up to be

00:26:22,310 --> 00:26:28,700
open source so a bit more words about

00:26:25,760 --> 00:26:32,800
the current state of a chart basically

00:26:28,700 --> 00:26:35,270
if you want to use spinnaker with only

00:26:32,800 --> 00:26:37,970
kubernetes as a deployment target you

00:26:35,270 --> 00:26:41,090
can do it with a song chart without any

00:26:37,970 --> 00:26:43,789
issues because this value CMO support

00:26:41,090 --> 00:26:45,590
edge new branches is a deployment target

00:26:43,789 --> 00:26:49,789
the configuring docker registry so it's

00:26:45,590 --> 00:26:51,379
like almost all you need to start

00:26:49,789 --> 00:26:55,509
deploying with spinnaker into kubernetes

00:26:51,379 --> 00:26:58,429
but if you if you want to support other

00:26:55,509 --> 00:27:03,220
deployment targets like probably AWS or

00:26:58,429 --> 00:27:07,580
GCP you will need to go and start it and

00:27:03,220 --> 00:27:10,429
the hell commands instead of just

00:27:07,580 --> 00:27:12,789
putting some data into the until well

00:27:10,429 --> 00:27:12,789

YouTube URL: https://www.youtube.com/watch?v=tSfaq9j6fdU


