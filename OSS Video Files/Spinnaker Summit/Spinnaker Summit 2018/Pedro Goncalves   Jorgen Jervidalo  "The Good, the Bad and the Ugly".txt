Title: Pedro Goncalves   Jorgen Jervidalo  "The Good, the Bad and the Ugly"
Publication date: 2018-10-24
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,270 --> 00:00:05,380
[Music]

00:00:09,820 --> 00:00:13,259
[Music]

00:00:16,279 --> 00:00:24,359
welcome it's great to be here in Seattle

00:00:20,420 --> 00:00:26,430
and I'm glad so many of you have taken

00:00:24,359 --> 00:00:31,439
your time to come come here and listen

00:00:26,430 --> 00:00:33,570
just talk about an old movie actually

00:00:31,439 --> 00:00:39,350
this talk isn't about that movie so if

00:00:33,570 --> 00:00:42,210
anyone thought so they may leave now

00:00:39,350 --> 00:00:45,510
thanks okay

00:00:42,210 --> 00:00:48,030
my name is Jorgen and this is Pedro and

00:00:45,510 --> 00:00:53,719
we are working in the delivery team in a

00:00:48,030 --> 00:00:58,379
norwegian company called ships that and

00:00:53,719 --> 00:00:59,699
ships that I'm gonna just shortly tell

00:00:58,379 --> 00:01:06,420
you a bit about the company

00:00:59,699 --> 00:01:09,540
it's an region multinational company it

00:01:06,420 --> 00:01:12,390
has about seven a half thousand

00:01:09,540 --> 00:01:18,720
employees spread all around the Europe

00:01:12,390 --> 00:01:21,270
and southern America mostly in the

00:01:18,720 --> 00:01:26,070
Nordics its most most been known for

00:01:21,270 --> 00:01:27,420
owning a couple of newspapers and in the

00:01:26,070 --> 00:01:34,610
rest of the world we are used

00:01:27,420 --> 00:01:37,400
we are owning online marketplaces like

00:01:34,610 --> 00:01:43,680
we are not owned in crisis but similar

00:01:37,400 --> 00:01:46,890
almond market places like that we have a

00:01:43,680 --> 00:01:50,130
rich in in northern Sweden about 70% of

00:01:46,890 --> 00:01:52,759
the population each day so it's actually

00:01:50,130 --> 00:01:58,590
bigger than Facebook in that regard and

00:01:52,759 --> 00:02:00,570
we have 300 almost 300 engineers that

00:01:58,590 --> 00:02:04,229
are using spinnaker internally in the

00:02:00,570 --> 00:02:06,060
company and we are at the we are a team

00:02:04,229 --> 00:02:09,920
of four people that are managing and

00:02:06,060 --> 00:02:15,480
contributing to the spinnaker codebase

00:02:09,920 --> 00:02:19,109
so that's chips that I'm gonna go

00:02:15,480 --> 00:02:23,359
through some history about the spinnaker

00:02:19,109 --> 00:02:29,040
in ships dead so we started using

00:02:23,359 --> 00:02:32,189
testing spinnaker in 2015 and we rolled

00:02:29,040 --> 00:02:36,269
it out for our you our users in the

00:02:32,189 --> 00:02:39,209
first half of 2016 I believe and their

00:02:36,269 --> 00:02:41,250
reception was really good amazing really

00:02:39,209 --> 00:02:43,280
but as we own boarded more and more

00:02:41,250 --> 00:02:47,549
teams we started experiencing some

00:02:43,280 --> 00:02:50,189
growing pains and while we try to

00:02:47,549 --> 00:02:51,870
provide guidelines for best practices

00:02:50,189 --> 00:02:55,379
and stuff like that we didn't enforce

00:02:51,870 --> 00:02:57,900
anything and our users there created a

00:02:55,379 --> 00:03:05,780
lot of pipelines that ranged from really

00:02:57,900 --> 00:03:05,780
really cool to frankly pretty bizarre so

00:03:07,969 --> 00:03:13,590
we as the dead man the team that are

00:03:11,129 --> 00:03:20,209
managing spinnaker we really saw a need

00:03:13,590 --> 00:03:22,889
for having some kind of control and

00:03:20,209 --> 00:03:25,139
declarative pipelines was one way of

00:03:22,889 --> 00:03:27,569
doing that and at the same time that was

00:03:25,139 --> 00:03:30,659
also the number one requested feature by

00:03:27,569 --> 00:03:33,120
our users and it actually got to the

00:03:30,659 --> 00:03:36,060
point that because spinnaker didn't have

00:03:33,120 --> 00:03:38,120
this feature engineers in working in

00:03:36,060 --> 00:03:40,889
other parts of ships that they started

00:03:38,120 --> 00:03:43,430
doing this themselves they created sea

00:03:40,889 --> 00:03:48,239
lies and they started abusing the

00:03:43,430 --> 00:03:50,790
spinnaker API in ways that was not

00:03:48,239 --> 00:03:52,739
endorsed by us and without any

00:03:50,790 --> 00:03:58,199
safeguards at all so it was kind of

00:03:52,739 --> 00:04:02,759
messy and not really good so at a time

00:03:58,199 --> 00:04:05,729
when the DC D or the declarative

00:04:02,759 --> 00:04:07,829
continuous delivery or the managed

00:04:05,729 --> 00:04:09,780
Python templates feature was announced

00:04:07,829 --> 00:04:13,709
we were early adopters in our company

00:04:09,780 --> 00:04:16,859
and that has been a really bumpy ride

00:04:13,709 --> 00:04:19,109
with steep learning curve and in this

00:04:16,859 --> 00:04:20,459
presentation we will talk about what we

00:04:19,109 --> 00:04:26,550
have learned

00:04:20,459 --> 00:04:30,630
so short about managed pipeline

00:04:26,550 --> 00:04:32,550
templates it goes by name any names but

00:04:30,630 --> 00:04:34,410
it actually means the same thing

00:04:32,550 --> 00:04:37,020
it's declarative continuous delivery

00:04:34,410 --> 00:04:39,919
managed pipeline templates Python as

00:04:37,020 --> 00:04:46,740
code based look at the same thing and

00:04:39,919 --> 00:04:49,560
I'm not sure we are going to be I'm sure

00:04:46,740 --> 00:04:52,289
I'm gonna switch autumn of the terminal

00:04:49,560 --> 00:04:56,090
terminology in this presentation so bear

00:04:52,289 --> 00:05:02,060
with me sorry

00:04:56,090 --> 00:05:06,449
so I'm not sure if all of you have been

00:05:02,060 --> 00:05:08,430
have been introduced to these popular

00:05:06,449 --> 00:05:14,940
templates but on the left here you can

00:05:08,430 --> 00:05:17,729
see a very minimal template it's at the

00:05:14,940 --> 00:05:19,710
top it's just some boilerplate naming

00:05:17,729 --> 00:05:22,400
descriptions and stuff like that then

00:05:19,710 --> 00:05:27,120
there in the middle there it declares

00:05:22,400 --> 00:05:29,940
one variable and at the bottom you I can

00:05:27,120 --> 00:05:34,110
see a single stage which is a weight

00:05:29,940 --> 00:05:37,710
stage so and that uses the parameter you

00:05:34,110 --> 00:05:40,229
have defined in the middle so really

00:05:37,710 --> 00:05:44,370
really simple you can see that it's

00:05:40,229 --> 00:05:47,400
llamó so all pipelines are declared in

00:05:44,370 --> 00:05:49,470
llamó all the templates I mean are

00:05:47,400 --> 00:05:52,650
declared in llamó and the structure is

00:05:49,470 --> 00:05:55,289
similar but not identical to the interne

00:05:52,650 --> 00:06:00,900
Chasen structure you can find in in

00:05:55,289 --> 00:06:04,530
spinnaker it supports templating by

00:06:00,900 --> 00:06:06,300
using Jinja and that's the one you can

00:06:04,530 --> 00:06:07,980
see at the bottom where you see the wait

00:06:06,300 --> 00:06:11,130
time

00:06:07,980 --> 00:06:14,660
and these double curly braces this is

00:06:11,130 --> 00:06:22,890
ginger and it will just replace that

00:06:14,660 --> 00:06:26,940
with with the value of wait time it also

00:06:22,890 --> 00:06:28,410
supports the spell which is the eye we

00:06:26,940 --> 00:06:30,450
have written spinnaker expression

00:06:28,410 --> 00:06:32,610
language but is it's actually the spring

00:06:30,450 --> 00:06:37,440
expression language with some added

00:06:32,610 --> 00:06:40,760
bells or whistles and if you see the

00:06:37,440 --> 00:06:43,560
default value here almost at the bottom

00:06:40,760 --> 00:06:51,780
that's spell so you're probably familiar

00:06:43,560 --> 00:06:54,090
with that from from spinnaker okay I'm

00:06:51,780 --> 00:06:57,210
going to leave the word to Petro is

00:06:54,090 --> 00:07:01,560
going to talk about the first part which

00:06:57,210 --> 00:07:01,740
we have called the good alright thank

00:07:01,560 --> 00:07:04,710
you

00:07:01,740 --> 00:07:08,040
jörgen so as you probably noticed by the

00:07:04,710 --> 00:07:11,190
title of our presentation it's the good

00:07:08,040 --> 00:07:15,030
and then there's the bad and the ugly

00:07:11,190 --> 00:07:17,360
and your convention we add the log we

00:07:15,030 --> 00:07:20,820
had some experience with the declarative

00:07:17,360 --> 00:07:24,780
pipelines a lot of it it's a good and

00:07:20,820 --> 00:07:29,130
very positive but steeping learning

00:07:24,780 --> 00:07:30,930
curve so let's start with a good this

00:07:29,130 --> 00:07:33,990
pipeline that you're seeing there it's

00:07:30,930 --> 00:07:39,210
actually a full-fledged pipeline that a

00:07:33,990 --> 00:07:41,970
lot of our users can use and you

00:07:39,210 --> 00:07:45,150
probably see that it's quite minimal and

00:07:41,970 --> 00:07:47,580
that's because we love inheritance so

00:07:45,150 --> 00:07:52,500
noticed is a little part here the source

00:07:47,580 --> 00:07:54,750
its inheriting from master the template

00:07:52,500 --> 00:07:57,420
pipeline that we the spinnaker team

00:07:54,750 --> 00:07:59,340
maintained and that's because creating

00:07:57,420 --> 00:08:01,800
in the creative pipelines that these

00:07:59,340 --> 00:08:03,720
templates can be quite complex and

00:08:01,800 --> 00:08:06,330
difficult so we come up with a strategy

00:08:03,720 --> 00:08:11,580
where we abstract all that complexity

00:08:06,330 --> 00:08:13,950
from the user and we just tell the users

00:08:11,580 --> 00:08:18,630
to create child pipelines that inherit

00:08:13,950 --> 00:08:21,460
from this parent pipeline and it we try

00:08:18,630 --> 00:08:23,800
to solve the typical eighty percent

00:08:21,460 --> 00:08:25,600
of the cases that say that most of the

00:08:23,800 --> 00:08:28,479
users most most of the deployments of

00:08:25,600 --> 00:08:30,910
applications they are fairly similar so

00:08:28,479 --> 00:08:35,279
we created a parenting pipeline that

00:08:30,910 --> 00:08:39,070
kind of mimics that sort of traditional

00:08:35,279 --> 00:08:44,620
pipelines and we allowed our end users

00:08:39,070 --> 00:08:47,589
to replace some of the variables giving

00:08:44,620 --> 00:08:51,010
more behavior to their child pipelines

00:08:47,589 --> 00:08:53,230
this one is a very basic one

00:08:51,010 --> 00:08:55,560
it's the minimal possible for in our set

00:08:53,230 --> 00:08:59,459
up and what this will do it will create

00:08:55,560 --> 00:09:01,750
pipeline with three stages deploy to

00:08:59,459 --> 00:09:03,779
development deploy to prep for the

00:09:01,750 --> 00:09:07,390
pre-production and deploy to production

00:09:03,779 --> 00:09:10,360
all these three deployments with pretty

00:09:07,390 --> 00:09:12,160
much what seven eight nine lines of code

00:09:10,360 --> 00:09:15,010
the only thing that we actually needed

00:09:12,160 --> 00:09:18,160
to specify is the namespace and this is

00:09:15,010 --> 00:09:20,440
the namespace for the kubernetes because

00:09:18,160 --> 00:09:24,279
this is a deployment to coordinators the

00:09:20,440 --> 00:09:26,709
namespace of your kubernetes right so

00:09:24,279 --> 00:09:30,010
let's continue a little bit more as you

00:09:26,709 --> 00:09:34,089
can see this parent pipeline it will

00:09:30,010 --> 00:09:36,880
unfold into three hundred lines of code

00:09:34,089 --> 00:09:40,240
of this parent pipeline that we the

00:09:36,880 --> 00:09:43,209
spinnaker team maintain and that's of

00:09:40,240 --> 00:09:44,950
that complexity is all hidden from the

00:09:43,209 --> 00:09:49,779
end-user it doesn't really need to know

00:09:44,950 --> 00:09:55,450
much about it okay we can see in here

00:09:49,779 --> 00:09:58,120
how this minimal template wants one

00:09:55,450 --> 00:10:01,089
execution start with with the pipeline

00:09:58,120 --> 00:10:04,630
this is how it will look like deploy to

00:10:01,089 --> 00:10:07,170
pre deploy to pro to prepare the

00:10:04,630 --> 00:10:11,500
pre-production and deploy to production

00:10:07,170 --> 00:10:14,980
and these stages they actually unfold

00:10:11,500 --> 00:10:16,630
into three sub stages this is because of

00:10:14,980 --> 00:10:18,450
a particular particularity of our

00:10:16,630 --> 00:10:20,740
deployments to kubernetes where we use

00:10:18,450 --> 00:10:23,980
abstraction tooling to in top of

00:10:20,740 --> 00:10:26,950
kubernetes and then in our parent

00:10:23,980 --> 00:10:30,760
pipeline we actually do this unfolding

00:10:26,950 --> 00:10:35,110
using the the power of partials in the

00:10:30,760 --> 00:10:35,900
pipeline template let's see a case with

00:10:35,110 --> 00:10:38,750
the

00:10:35,900 --> 00:10:43,580
a little bit more of the behavior pretty

00:10:38,750 --> 00:10:45,800
much the same thing we added a variable

00:10:43,580 --> 00:10:47,600
here where I say deploy to

00:10:45,800 --> 00:10:50,120
pre-production well it's false

00:10:47,600 --> 00:10:52,970
I don't care about the pre-production

00:10:50,120 --> 00:10:55,490
environment I don't have used for it so

00:10:52,970 --> 00:10:58,970
let's just skip it and as you can see

00:10:55,490 --> 00:11:02,180
only two stages deploy to dev deploy to

00:10:58,970 --> 00:11:04,700
pro all of these with just simple

00:11:02,180 --> 00:11:06,860
override of a variable there's also

00:11:04,700 --> 00:11:09,470
other thing in here where you can see

00:11:06,860 --> 00:11:12,980
some of our users like to run jobs

00:11:09,470 --> 00:11:15,530
either before or after deploying to a

00:11:12,980 --> 00:11:18,220
certain environment so in this case

00:11:15,530 --> 00:11:22,250
let's say the user wanted to run a job

00:11:18,220 --> 00:11:25,070
script in Travis to run some behavior

00:11:22,250 --> 00:11:29,390
before deploying to death you can do it

00:11:25,070 --> 00:11:32,360
very simply with just these overeaten

00:11:29,390 --> 00:11:34,510
giving saying run this Travis job give

00:11:32,360 --> 00:11:37,190
it some parameter and as you can see

00:11:34,510 --> 00:11:40,040
there's a hook that we'll call a Travis

00:11:37,190 --> 00:11:43,280
job and then after these hooks so

00:11:40,040 --> 00:11:45,530
succeeded it will deploy to to dev

00:11:43,280 --> 00:11:48,110
typically this is mostly use it after

00:11:45,530 --> 00:11:51,230
deploying to run some integration tests

00:11:48,110 --> 00:11:56,030
smoke tests whatever the user farms is

00:11:51,230 --> 00:11:59,930
to use right another thing we use

00:11:56,030 --> 00:12:02,480
artifact for everything and this

00:11:59,930 --> 00:12:07,280
actually includes the pipe the

00:12:02,480 --> 00:12:09,620
declarative pipeline itself so for this

00:12:07,280 --> 00:12:13,730
we added a small customization in Dec

00:12:09,620 --> 00:12:16,280
that we use intern internally and which

00:12:13,730 --> 00:12:18,560
is when the user is initially setting up

00:12:16,280 --> 00:12:20,690
the pipeline it will give the the name

00:12:18,560 --> 00:12:22,520
of the pipeline and you are quite

00:12:20,690 --> 00:12:25,450
familiar with this but then it will say

00:12:22,520 --> 00:12:29,030
the declarative pipeline will come as a

00:12:25,450 --> 00:12:31,700
artifact and this is the type of the

00:12:29,030 --> 00:12:34,340
artifact spinnaker pack which stands for

00:12:31,700 --> 00:12:36,320
pipeline is code and then the artifact

00:12:34,340 --> 00:12:39,110
name typically it will be a pipeline

00:12:36,320 --> 00:12:44,420
dottie animal file so with the name will

00:12:39,110 --> 00:12:46,430
be pipeline what these does and for the

00:12:44,420 --> 00:12:47,379
ones that are curious about what it does

00:12:46,430 --> 00:12:49,539
in the

00:12:47,379 --> 00:12:52,439
the wood is just modified the JSON of

00:12:49,539 --> 00:12:55,629
the pipeline to search for the specific

00:12:52,439 --> 00:12:58,209
artifact and add it as a source these

00:12:55,629 --> 00:12:59,949
the user doesn't see but for all of you

00:12:58,209 --> 00:13:03,879
that might be curious to see what

00:12:59,949 --> 00:13:07,539
happens under the wood this is the JSON

00:13:03,879 --> 00:13:10,539
of the Declaration of the pipeline and

00:13:07,539 --> 00:13:13,089
what this does we can see here one

00:13:10,539 --> 00:13:15,970
execution of the pipeline here are the

00:13:13,089 --> 00:13:17,499
artifacts being used the docker

00:13:15,970 --> 00:13:18,849
container which is the application

00:13:17,499 --> 00:13:21,729
actually being deployed the kubernetes

00:13:18,849 --> 00:13:23,859
of course the path file as I mentioned

00:13:21,729 --> 00:13:27,879
our abstraction on top of your net

00:13:23,859 --> 00:13:30,549
communities and the pipeline itself the

00:13:27,879 --> 00:13:34,329
declarative pipeline right and what this

00:13:30,549 --> 00:13:37,119
allows is to have very simple rollback

00:13:34,329 --> 00:13:39,220
where if you change the pipeline the

00:13:37,119 --> 00:13:42,009
declarative pipeline and somehow you

00:13:39,220 --> 00:13:44,799
messed up you can very easily rollback

00:13:42,009 --> 00:13:47,319
by triggering a manual execution with

00:13:44,799 --> 00:13:49,599
the previous build and you get all the

00:13:47,319 --> 00:13:52,239
artifact because everything is versioned

00:13:49,599 --> 00:13:54,429
and the application comes together with

00:13:52,239 --> 00:13:56,649
the path obstruction file and with the

00:13:54,429 --> 00:14:00,609
part with the collective pipeline so

00:13:56,649 --> 00:14:03,389
everything goes hand-in-hand right full

00:14:00,609 --> 00:14:06,519
traceability and rollback capabilities

00:14:03,389 --> 00:14:10,419
for the application and the pipeline

00:14:06,519 --> 00:14:12,399
itself alright so if you have been in

00:14:10,419 --> 00:14:15,039
the game of declarative pipelines for

00:14:12,399 --> 00:14:18,759
for a while you probably have heard

00:14:15,039 --> 00:14:21,489
about roar it's a great tool but we

00:14:18,759 --> 00:14:23,799
don't use it to start with when we

00:14:21,489 --> 00:14:26,139
initially start using the declarative

00:14:23,799 --> 00:14:29,409
pipelines it was really early stages and

00:14:26,139 --> 00:14:32,019
there wasn't no roar so we just went

00:14:29,409 --> 00:14:34,299
along in a different path and we

00:14:32,019 --> 00:14:38,049
actually came up with this idea of using

00:14:34,299 --> 00:14:39,879
the decorative pipelines as artifacts so

00:14:38,049 --> 00:14:42,399
then when roar come come onboard we

00:14:39,879 --> 00:14:44,499
evaluated it it was pretty cool but it

00:14:42,399 --> 00:14:46,679
didn't fulfill our needs so we just

00:14:44,499 --> 00:14:51,489
choose it not to use it

00:14:46,679 --> 00:14:54,849
so version control support rower not

00:14:51,489 --> 00:14:57,489
really and as we use the pipeline

00:14:54,849 --> 00:14:59,769
templates as artifacts yes it has full

00:14:57,489 --> 00:15:01,220
traceability within github you can see

00:14:59,769 --> 00:15:02,779
when the pipeline the declaration

00:15:01,220 --> 00:15:04,879
pipeline with changes because the

00:15:02,779 --> 00:15:08,560
declarative pipeline is just together

00:15:04,879 --> 00:15:12,170
with the code of your application

00:15:08,560 --> 00:15:15,110
namespace supports so in Rover if you

00:15:12,170 --> 00:15:17,720
update a pipeline a declarative pipeline

00:15:15,110 --> 00:15:19,790
it will be visible for for for everyone

00:15:17,720 --> 00:15:22,040
anyone can use that pipeline or even

00:15:19,790 --> 00:15:25,850
actually change that pipeline which

00:15:22,040 --> 00:15:28,459
might not be great in our case no such

00:15:25,850 --> 00:15:30,980
thing the pipeline lives together with

00:15:28,459 --> 00:15:33,560
the application in in github we don't

00:15:30,980 --> 00:15:36,079
support in our the way that we work we

00:15:33,560 --> 00:15:38,120
don't support pipeline validation that's

00:15:36,079 --> 00:15:39,829
a cool thing for Rover but we have been

00:15:38,120 --> 00:15:44,959
looking into that and how we can add

00:15:39,829 --> 00:15:47,149
that to our to our workflow so shout out

00:15:44,959 --> 00:15:48,889
to Fiat this is our abstraction on top

00:15:47,149 --> 00:15:52,279
of kubernetes

00:15:48,889 --> 00:15:55,850
it has helped us to quite a bit in

00:15:52,279 --> 00:15:58,129
simplifying them the deployment but

00:15:55,850 --> 00:16:00,620
again what we are talking about the way

00:15:58,129 --> 00:16:03,430
we use declarative pipelines can can be

00:16:00,620 --> 00:16:06,290
used with the vanilla deployment

00:16:03,430 --> 00:16:07,819
kubernetes deployment manifests but

00:16:06,290 --> 00:16:10,339
these tools that we have been using

00:16:07,819 --> 00:16:18,920
internally it's open sourced and it

00:16:10,339 --> 00:16:22,189
simplifies quite a bit our work alright

00:16:18,920 --> 00:16:24,500
so presented you the good and I live up

00:16:22,189 --> 00:16:33,110
to your gun to give you some insights

00:16:24,500 --> 00:16:35,180
about what's not so good yeah turns out

00:16:33,110 --> 00:16:37,430
that creating a new DSL with full

00:16:35,180 --> 00:16:40,459
templating support and inheritance and

00:16:37,430 --> 00:16:44,870
composition is hard actually

00:16:40,459 --> 00:16:49,699
it's very hard and while large parts of

00:16:44,870 --> 00:16:52,160
the specification of the DCD or the MPT

00:16:49,699 --> 00:16:55,930
feature has been implemented there are

00:16:52,160 --> 00:16:57,860
still unemployment features and even

00:16:55,930 --> 00:17:01,309
though they are mentioned in the

00:16:57,860 --> 00:17:03,350
documentation so it's usually clear

00:17:01,309 --> 00:17:06,280
which parts that are not implemented for

00:17:03,350 --> 00:17:08,539
instance the configuration stanza it's

00:17:06,280 --> 00:17:11,059
documented were pretty well that it's

00:17:08,539 --> 00:17:13,220
not supported but that is not always the

00:17:11,059 --> 00:17:14,280
case so it's a bit of trying and failing

00:17:13,220 --> 00:17:20,760
to figure

00:17:14,280 --> 00:17:22,020
how to use this and in the way that MPT

00:17:20,760 --> 00:17:23,520
is implemented

00:17:22,020 --> 00:17:27,390
there are also some bugs that are

00:17:23,520 --> 00:17:32,070
impossible to solve there's a good issue

00:17:27,390 --> 00:17:35,010
for instance on on the specific case

00:17:32,070 --> 00:17:41,190
where a user wanted this string true to

00:17:35,010 --> 00:17:43,620
be outfitted in in the in the Jason but

00:17:41,190 --> 00:17:46,350
you can't because gene Java will turn

00:17:43,620 --> 00:17:48,390
that into the boolean true no matter

00:17:46,350 --> 00:17:52,350
what and there is no way of getting

00:17:48,390 --> 00:17:55,880
around that so there's a lot of stuff

00:17:52,350 --> 00:17:55,880
like this going on and

00:17:57,420 --> 00:18:06,700
you can mostly work around it but it's

00:18:01,030 --> 00:18:12,940
something to be aware of there's also

00:18:06,700 --> 00:18:17,140
some just counterintuitive stuff so on

00:18:12,940 --> 00:18:26,740
the left there you will see a very

00:18:17,140 --> 00:18:30,040
simple example it's it's just a variable

00:18:26,740 --> 00:18:33,220
which is a map with two key and value

00:18:30,040 --> 00:18:38,580
pairs and in the stages we are trying to

00:18:33,220 --> 00:18:42,580
use or print this in the in the as the

00:18:38,580 --> 00:18:44,410
value of whatever and let's have a

00:18:42,580 --> 00:18:49,150
little quiz shall we

00:18:44,410 --> 00:18:51,630
what we'll render here anyone want to

00:18:49,150 --> 00:18:51,630
give it a go

00:18:55,110 --> 00:19:00,809
if I would guess I would say it should

00:18:57,899 --> 00:19:07,619
render foo colon value and then a new

00:19:00,809 --> 00:19:19,440
line and bar colon value right any one

00:19:07,619 --> 00:19:21,899
of you guessed this no yeah this is a

00:19:19,440 --> 00:19:24,179
peculiarity of Jin Java

00:19:21,899 --> 00:19:29,179
I think or ginger it doesn't know that

00:19:24,179 --> 00:19:33,359
you want llamo it's only a it's only

00:19:29,179 --> 00:19:36,960
taking an input string and and massaging

00:19:33,359 --> 00:19:39,600
it and creating an output string so you

00:19:36,960 --> 00:19:43,519
have to tell it that you want llamo and

00:19:39,600 --> 00:19:46,980
here you have it has somehow fed have

00:19:43,519 --> 00:19:50,009
you have a map into two string and ended

00:19:46,980 --> 00:19:53,419
up with this in some way it's a rabbit

00:19:50,009 --> 00:19:53,419
hole I've been there don't go there

00:19:53,570 --> 00:19:59,690
there is no the the simple workaround

00:19:56,789 --> 00:20:02,639
for this is that you can just pipe this

00:19:59,690 --> 00:20:07,470
variable to the Jason filter which is

00:20:02,639 --> 00:20:10,859
provided by ginger or spinnaker I'm not

00:20:07,470 --> 00:20:16,139
sure because it turns out that Jason

00:20:10,859 --> 00:20:18,320
maps are also valid llamo so that works

00:20:16,139 --> 00:20:18,320
great

00:20:19,540 --> 00:20:26,990
so this is a nice beach why did we put

00:20:23,180 --> 00:20:31,370
this in the bad section because this is

00:20:26,990 --> 00:20:33,590
really nice right I think Pete said

00:20:31,370 --> 00:20:35,510
something about he wanted suggestions

00:20:33,590 --> 00:20:41,060
for the next spinnaker summit so I think

00:20:35,510 --> 00:20:43,640
we should probably go here but seriously

00:20:41,060 --> 00:20:46,610
this what we are meaning to illustrate

00:20:43,640 --> 00:20:49,370
by this is that the current

00:20:46,610 --> 00:20:52,580
implementation of MPT or managed Python

00:20:49,370 --> 00:20:56,030
templates is deprecated and discontinued

00:20:52,580 --> 00:21:00,050
and it will not receive any fixes or new

00:20:56,030 --> 00:21:03,410
features so what does this even mean

00:21:00,050 --> 00:21:05,960
will be going away

00:21:03,410 --> 00:21:07,880
we're told that it will still be around

00:21:05,960 --> 00:21:11,260
for a while but it has been decided that

00:21:07,880 --> 00:21:14,480
the current implementation is so

00:21:11,260 --> 00:21:17,480
error-prone and hard to fix and it's not

00:21:14,480 --> 00:21:23,330
worth investing more time in so should

00:21:17,480 --> 00:21:27,110
you not use it well if you are like on

00:21:23,330 --> 00:21:30,440
the have a use case where you can solve

00:21:27,110 --> 00:21:32,060
maybe 80% of the use cases in because

00:21:30,440 --> 00:21:35,420
everything is really similar

00:21:32,060 --> 00:21:37,640
maybe you should but it's worth noting

00:21:35,420 --> 00:21:41,540
that the the current implementation

00:21:37,640 --> 00:21:45,160
isn't going to be any better but is

00:21:41,540 --> 00:21:52,970
there any hope in a horizon yes it is

00:21:45,160 --> 00:21:55,730
look it will be replaced by MPT version

00:21:52,970 --> 00:21:59,980
2 and this will be a fresh take on the

00:21:55,730 --> 00:22:03,230
MPT or the managed part on templates and

00:21:59,980 --> 00:22:05,030
they are trying to do stuff the right

00:22:03,230 --> 00:22:08,510
way using lessons learned in the

00:22:05,030 --> 00:22:10,250
implementation of version 1 and it's

00:22:08,510 --> 00:22:12,890
currently in design phase and we will

00:22:10,250 --> 00:22:16,330
take a look at this very brief look at

00:22:12,890 --> 00:22:16,330
it later in the presentation

00:22:18,070 --> 00:22:26,210
so Pedro will take us through the ugly

00:22:20,930 --> 00:22:30,920
parts alright because it couldn't get

00:22:26,210 --> 00:22:34,100
worse or maybe good here we go

00:22:30,920 --> 00:22:38,870
so yeah ginger and spinnaker expression

00:22:34,100 --> 00:22:43,070
languages within the same file it can

00:22:38,870 --> 00:22:44,870
render spooky results and I mean

00:22:43,070 --> 00:22:48,050
spinnaker expression language it's a

00:22:44,870 --> 00:22:50,930
beast on its own so now add the gene

00:22:48,050 --> 00:22:54,320
Java variables to the middle of it and

00:22:50,930 --> 00:22:57,680
it's well it's it's great yeah great

00:22:54,320 --> 00:23:00,110
stuff but here's an example and this is

00:22:57,680 --> 00:23:03,200
actually not too bad we have seen

00:23:00,110 --> 00:23:08,930
probably worse but it's a complicated

00:23:03,200 --> 00:23:11,270
because the ginger rendering happens at

00:23:08,930 --> 00:23:14,660
a different phase at the evaluation of

00:23:11,270 --> 00:23:17,150
the spinnaker expressions so gened the

00:23:14,660 --> 00:23:19,220
ginger rendering it happens before the

00:23:17,150 --> 00:23:21,170
pipeline starts when the pipeline is

00:23:19,220 --> 00:23:23,360
rendered by Orca before the execution

00:23:21,170 --> 00:23:27,850
and the expiry expression language is

00:23:23,360 --> 00:23:30,470
during the execution of the pipeline so

00:23:27,850 --> 00:23:34,480
there's a lot of things that can happen

00:23:30,470 --> 00:23:35,690
for but there's one thing which is

00:23:34,480 --> 00:23:39,860
interesting

00:23:35,690 --> 00:23:42,430
so another quiz what will render in

00:23:39,860 --> 00:23:42,430
there

00:23:45,530 --> 00:23:54,320
no but it's it's it's a good gift

00:23:50,360 --> 00:23:56,890
because we have been there also but I

00:23:54,320 --> 00:24:02,870
mean this looks a quite straightforward

00:23:56,890 --> 00:24:04,670
spinnaker expression right dollar sign

00:24:02,870 --> 00:24:06,380
curly braces

00:24:04,670 --> 00:24:08,690
give me the stage which is called

00:24:06,380 --> 00:24:12,590
deployment environment that's evaluated

00:24:08,690 --> 00:24:15,380
at before execution but yeah should give

00:24:12,590 --> 00:24:20,840
me that variable right no it will give

00:24:15,380 --> 00:24:25,550
me the dollar sign what yeah

00:24:20,840 --> 00:24:27,860
funny stuff right because these curly

00:24:25,550 --> 00:24:31,400
braces and hash tag is actually the

00:24:27,860 --> 00:24:34,190
commenting kind of thing for for ginger

00:24:31,400 --> 00:24:36,050
so everything that after that it's gone

00:24:34,190 --> 00:24:39,860
ginge is like yeah that's a comment nice

00:24:36,050 --> 00:24:41,870
I'll keep it to myself so yeah then just

00:24:39,860 --> 00:24:45,280
like after a few hours you'll probably

00:24:41,870 --> 00:24:48,020
figure out what to do what you did wrong

00:24:45,280 --> 00:24:50,330
the work area the workaround is not here

00:24:48,020 --> 00:24:52,010
but the workaround is just add the space

00:24:50,330 --> 00:24:56,390
between the curly braces and the hash

00:24:52,010 --> 00:24:58,910
tag it will work fine and ginger will

00:24:56,390 --> 00:25:00,200
not care about it anymore spinnaker

00:24:58,910 --> 00:25:03,340
expression language it will work just

00:25:00,200 --> 00:25:06,230
fine yeah its place in there because

00:25:03,340 --> 00:25:11,230
sometimes you change the manage the

00:25:06,230 --> 00:25:15,650
pipeline you pull the trigger and what

00:25:11,230 --> 00:25:17,660
nothing happens yeah so you like I

00:25:15,650 --> 00:25:19,490
probably messed up if you are a

00:25:17,660 --> 00:25:21,950
spinnaker developer and you have access

00:25:19,490 --> 00:25:24,020
to the Orca logs you are in luck because

00:25:21,950 --> 00:25:26,360
you can just go and check the Orca logs

00:25:24,020 --> 00:25:29,150
Orca logs and you'll probably see a huge

00:25:26,360 --> 00:25:30,890
stack trace maybe the structures will

00:25:29,150 --> 00:25:34,640
give you a good indication of what's

00:25:30,890 --> 00:25:36,950
wrong maybe it won't if you are just the

00:25:34,640 --> 00:25:40,720
end user of spinnaker you probably don't

00:25:36,950 --> 00:25:45,590
have access to the Orca logs tough luck

00:25:40,720 --> 00:25:46,820
or sometimes this can happen well it's

00:25:45,590 --> 00:25:49,640
better than the previous one

00:25:46,820 --> 00:25:53,420
clearly it gives you that the pipeline

00:25:49,640 --> 00:25:56,720
couldn't render it's an invalid so well

00:25:53,420 --> 00:25:59,120
that's better you click on the source

00:25:56,720 --> 00:26:00,980
you maybe expect to have some method

00:25:59,120 --> 00:26:03,350
just in there that can give you a good

00:26:00,980 --> 00:26:05,420
indication what's wrong no tough luck

00:26:03,350 --> 00:26:07,370
probably nothing will be there so again

00:26:05,420 --> 00:26:12,380
you're gonna need access to the Orca

00:26:07,370 --> 00:26:17,320
logs and sometimes to debug this kind of

00:26:12,380 --> 00:26:20,240
stuff we resort to breakpoint debugging

00:26:17,320 --> 00:26:22,940
what we do we go to we fire up IntelliJ

00:26:20,240 --> 00:26:26,240
open the Orca project create a very

00:26:22,940 --> 00:26:29,990
small unit test pass it whatever

00:26:26,240 --> 00:26:32,720
template we are working on run the test

00:26:29,990 --> 00:26:34,520
and then put a nice breakpoint in here

00:26:32,720 --> 00:26:37,309
where we actually process the template

00:26:34,520 --> 00:26:39,500
and then go deep into breakpoint in

00:26:37,309 --> 00:26:43,000
breakpoint in bar breakpoint hopefully

00:26:39,500 --> 00:26:46,700
you will realize what it you did wrong

00:26:43,000 --> 00:26:48,860
it might take minutes half an hour one

00:26:46,700 --> 00:26:54,920
hour but yeah we will eventually get

00:26:48,860 --> 00:26:56,780
there but it's still cumbersome right so

00:26:54,920 --> 00:26:58,550
if you are creating a pipeline from the

00:26:56,780 --> 00:27:02,179
scratch or if you're actually modifying

00:26:58,550 --> 00:27:03,740
a fairly complex pipeline complex or not

00:27:02,179 --> 00:27:07,730
sometimes trivial pipelines it's the

00:27:03,740 --> 00:27:11,750
it's yeah funny stuff so you should have

00:27:07,730 --> 00:27:14,300
issued like no Yama easy PC for most for

00:27:11,750 --> 00:27:16,030
the most part you should have access to

00:27:14,300 --> 00:27:22,640
the declarative continuous delivery

00:27:16,030 --> 00:27:24,260
specification it's a huge help you

00:27:22,640 --> 00:27:28,309
probably will need access to the Orca

00:27:24,260 --> 00:27:31,640
code open source so easy PC access to

00:27:28,309 --> 00:27:33,590
the orthologues not everyone is lucky

00:27:31,640 --> 00:27:35,929
enough to have that in your production

00:27:33,590 --> 00:27:39,260
environment for sure and you're gonna

00:27:35,929 --> 00:27:41,860
need time and patience a lot of it of

00:27:39,260 --> 00:27:44,929
both of them

00:27:41,860 --> 00:27:47,960
so as we mentioned like in the good part

00:27:44,929 --> 00:27:52,429
for our end users we have that little

00:27:47,960 --> 00:27:55,070
nice small declarative pipeline which we

00:27:52,429 --> 00:27:57,320
call the beauty and it's simple easy to

00:27:55,070 --> 00:27:59,780
maintain but for us the spin orchid

00:27:57,320 --> 00:28:05,350
spinnaker team we maintain the beast

00:27:59,780 --> 00:28:05,350
that 300 line of code template

00:28:06,900 --> 00:28:12,300
so let's talk a bit about the future

00:28:13,240 --> 00:28:24,250
I mentioned MP t version 2 and that's

00:28:21,880 --> 00:28:25,750
clearly the way forward but it's

00:28:24,250 --> 00:28:31,360
currently in the design phase so it's

00:28:25,750 --> 00:28:34,300
not done yet and but we don't know

00:28:31,360 --> 00:28:36,280
everything about this because but what

00:28:34,300 --> 00:28:44,170
we have picked up is that it will be

00:28:36,280 --> 00:28:48,790
based on Jason net which is third party

00:28:44,170 --> 00:28:51,700
Jason templating language and that has

00:28:48,790 --> 00:28:56,160
support for for inheritance and

00:28:51,700 --> 00:29:01,540
composition built-in so no need to like

00:28:56,160 --> 00:29:04,440
reven reinvent the wheel and that will

00:29:01,540 --> 00:29:10,240
replace Jinja and hopefully make

00:29:04,440 --> 00:29:12,130
everything a lot easier to understand it

00:29:10,240 --> 00:29:16,840
will have a clear migration path from

00:29:12,130 --> 00:29:20,320
version one to version two how that will

00:29:16,840 --> 00:29:22,960
work isn't clear yet it will have Fiat

00:29:20,320 --> 00:29:27,150
authorisation built in which is great so

00:29:22,960 --> 00:29:30,730
that you can overwrite another template

00:29:27,150 --> 00:29:34,300
or and you can also protect your

00:29:30,730 --> 00:29:42,090
pipelines if if you are if you want to

00:29:34,300 --> 00:29:46,030
do that so do we have any takeaways it's

00:29:42,090 --> 00:29:49,240
managed template time managed by plan

00:29:46,030 --> 00:29:53,770
templates are solving a lot of problems

00:29:49,240 --> 00:29:57,940
worse it's great but it's really hard to

00:29:53,770 --> 00:30:00,970
get right and I wouldn't I wouldn't

00:29:57,940 --> 00:30:03,429
recommend it if you aren't willing to

00:30:00,970 --> 00:30:05,140
invest a lot of time in it and you

00:30:03,429 --> 00:30:09,960
should probably still the end users from

00:30:05,140 --> 00:30:09,960
from the nitty gritty details

00:30:12,400 --> 00:30:17,990
but it's great when you have a likely

00:30:15,650 --> 00:30:22,100
that all the we talked about earlier if

00:30:17,990 --> 00:30:25,870
you have this 80% fits all case it's

00:30:22,100 --> 00:30:25,870
it's really good

00:30:26,119 --> 00:30:28,179

YouTube URL: https://www.youtube.com/watch?v=xYtfOR6v0F0


