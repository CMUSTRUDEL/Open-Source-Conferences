Title: Lars Wander   Andrew Phillips  "CI CD Patterns for Kubernetes with Spinnaker"
Publication date: 2018-10-24
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,270 --> 00:00:05,380
[Music]

00:00:09,820 --> 00:00:13,259
[Music]

00:00:16,580 --> 00:00:24,119
thanks a lot for coming to this talk we

00:00:21,930 --> 00:00:27,449
have a huge amount of material really

00:00:24,119 --> 00:00:29,550
for an hour and an hour's a long kind of

00:00:27,449 --> 00:00:31,410
conference talk anyway his brain I mean

00:00:29,550 --> 00:00:32,520
whenever you say the word these brains

00:00:31,410 --> 00:00:34,410
start to fill up quite quickly

00:00:32,520 --> 00:00:37,200
understandably because there's a lot of

00:00:34,410 --> 00:00:39,210
complicated nonsense going on there I'll

00:00:37,200 --> 00:00:41,790
try to speak slowly and yet go through a

00:00:39,210 --> 00:00:46,800
whole bunch of material as we go through

00:00:41,790 --> 00:00:49,530
see ICD patents just can't see from here

00:00:46,800 --> 00:00:51,030
so I'm the one on the left and then much

00:00:49,530 --> 00:00:53,850
younger version before I have the gray

00:00:51,030 --> 00:00:55,949
hair and my beer my name's Andrew

00:00:53,850 --> 00:00:57,660
Phillips I'm basically I've suffered all

00:00:55,949 --> 00:00:59,460
the way around the software development

00:00:57,660 --> 00:01:01,140
chain I've told other people what to do

00:00:59,460 --> 00:01:04,379
I built the stuff I've tried to deploy

00:01:01,140 --> 00:01:06,360
fail all that kind of stuff do a bunch

00:01:04,379 --> 00:01:08,189
of open source work as well although

00:01:06,360 --> 00:01:09,900
largely my open source contributions

00:01:08,189 --> 00:01:12,090
nowadays with all around making slide

00:01:09,900 --> 00:01:16,010
decks and pitching things to conferences

00:01:12,090 --> 00:01:16,010
a lot of lawyers introduce itself

00:01:29,640 --> 00:01:34,680
good luck yes I think I will need it so

00:01:32,390 --> 00:01:36,330
I'll talk a little bit about what we're

00:01:34,680 --> 00:01:39,780
going to try to cover it in the time

00:01:36,330 --> 00:01:41,730
here but before I do that let's have a

00:01:39,780 --> 00:01:45,330
little bit of a short so the show of

00:01:41,730 --> 00:01:49,290
hands of kubernetes expertise also a

00:01:45,330 --> 00:01:51,900
good exercise heard of kubernetes using

00:01:49,290 --> 00:01:54,390
kubernetes and tests using cumin is in

00:01:51,900 --> 00:01:56,760
production more than two years of

00:01:54,390 --> 00:01:59,820
kubernetes experience rip yellow and

00:01:56,760 --> 00:02:00,840
Ciardi all right so yeah okay well so

00:01:59,820 --> 00:02:03,229
interesting that there's an interesting

00:02:00,840 --> 00:02:05,430
mix between some of those all right so

00:02:03,229 --> 00:02:07,800
let's start by talking a little bit

00:02:05,430 --> 00:02:10,979
about what we're trying to cover I think

00:02:07,800 --> 00:02:13,020
the first thing introducing a topic that

00:02:10,979 --> 00:02:15,090
talks about CICU patents for kubernetes

00:02:13,020 --> 00:02:17,550
is why why are we even talking about it

00:02:15,090 --> 00:02:20,190
why is it an issue I think that's

00:02:17,550 --> 00:02:21,630
hopefully a no-brainer to some but I'd

00:02:20,190 --> 00:02:23,760
like to talk about some of the

00:02:21,630 --> 00:02:25,290
challenges we see the members of the

00:02:23,760 --> 00:02:28,440
community face and obviously members

00:02:25,290 --> 00:02:30,000
outside the spinnaker committee members

00:02:28,440 --> 00:02:33,750
outside the spinnaker community as well

00:02:30,000 --> 00:02:36,090
faced then I'd like to start by talking

00:02:33,750 --> 00:02:37,890
a little bit about what we actually do

00:02:36,090 --> 00:02:39,269
in software delivery today I mean I

00:02:37,890 --> 00:02:40,860
think one of the anti-patterns is that

00:02:39,269 --> 00:02:43,110
we always try to reinvent the same wheel

00:02:40,860 --> 00:02:44,670
over and over again and one of the

00:02:43,110 --> 00:02:46,200
challenges is figuring out what

00:02:44,670 --> 00:02:48,480
interesting things we can keep some

00:02:46,200 --> 00:02:50,340
other things we need to change which

00:02:48,480 --> 00:02:52,320
brings us up to this with a third bullet

00:02:50,340 --> 00:02:54,209
point which is ok what does Cooper that

00:02:52,320 --> 00:02:56,489
he's actually added to the mix what's

00:02:54,209 --> 00:02:59,100
genuinely new about this technology and

00:02:56,489 --> 00:03:02,030
the ecosystem that we have to kind of

00:02:59,100 --> 00:03:04,530
incorporate into our own mental model

00:03:02,030 --> 00:03:06,330
and then once once we understand that

00:03:04,530 --> 00:03:09,170
both what we have and what we want to

00:03:06,330 --> 00:03:12,209
add it hopefully we can come up to a

00:03:09,170 --> 00:03:13,709
kind of set of patterns of model that

00:03:12,209 --> 00:03:16,049
allows us to understand what we really

00:03:13,709 --> 00:03:16,870
want to do if we integrate spending or

00:03:16,049 --> 00:03:18,879
any other tool

00:03:16,870 --> 00:03:19,780
Nettie's and then most importantly

00:03:18,879 --> 00:03:22,030
because there's never a

00:03:19,780 --> 00:03:24,610
one-size-fits-all solution to a software

00:03:22,030 --> 00:03:25,989
delivery if we understand the concepts

00:03:24,610 --> 00:03:29,440
we're trying to implement that gives us

00:03:25,989 --> 00:03:32,260
flexibility and freedom to deviate if

00:03:29,440 --> 00:03:34,329
you like from the storm and that we're

00:03:32,260 --> 00:03:35,709
going to present here in whatever

00:03:34,329 --> 00:03:37,750
direction makes most sense for your

00:03:35,709 --> 00:03:39,040
organization this is the whole classic

00:03:37,750 --> 00:03:41,110
when they've had John the name only

00:03:39,040 --> 00:03:43,060
develops a name only kubernetes a name

00:03:41,110 --> 00:03:45,430
on the ante pattern where you follow

00:03:43,060 --> 00:03:47,440
some blog post because you read it and

00:03:45,430 --> 00:03:48,879
then you have all the stickies and

00:03:47,440 --> 00:03:50,440
everybody stands up every morning if

00:03:48,879 --> 00:03:51,879
you're doing a job or whatever but

00:03:50,440 --> 00:03:54,099
nobody really understands what the

00:03:51,879 --> 00:03:56,109
underlying concept is and thus it makes

00:03:54,099 --> 00:03:59,440
it very hard for you to adapt the model

00:03:56,109 --> 00:04:01,720
to match what you actually do with your

00:03:59,440 --> 00:04:03,609
organization and so from my perspective

00:04:01,720 --> 00:04:06,430
if you come out of here with an idea of

00:04:03,609 --> 00:04:08,290
what a good mental model is to have and

00:04:06,430 --> 00:04:10,120
how you can potentially both implement

00:04:08,290 --> 00:04:12,069
this mental model in spinnaker but also

00:04:10,120 --> 00:04:13,870
how you can tweak it to match your own

00:04:12,069 --> 00:04:14,890
requirements I think that we've done a

00:04:13,870 --> 00:04:17,769
really really good job

00:04:14,890 --> 00:04:19,690
with this presentation I should add

00:04:17,769 --> 00:04:22,450
incidentally that due to an unfortunate

00:04:19,690 --> 00:04:24,700
scheduling conflict really you would all

00:04:22,450 --> 00:04:27,190
want to be in both this and the topic

00:04:24,700 --> 00:04:28,960
next door at the same time we're one of

00:04:27,190 --> 00:04:31,360
our colleagues from Google's SRE team is

00:04:28,960 --> 00:04:34,360
talking about many of the same lessons

00:04:31,360 --> 00:04:36,099
that have taken us to the way Google

00:04:34,360 --> 00:04:37,630
implements things internally which are

00:04:36,099 --> 00:04:39,280
obviously somewhat similar to what the

00:04:37,630 --> 00:04:41,860
kubernetes community is doing but also

00:04:39,280 --> 00:04:44,320
interestingly different and so on how

00:04:41,860 --> 00:04:46,360
you recommend once that once the

00:04:44,320 --> 00:04:47,919
recordings are up that you go through it

00:04:46,360 --> 00:04:49,930
watch it at double speed I think they

00:04:47,919 --> 00:04:51,490
only said they have like 35 minutes of

00:04:49,930 --> 00:04:54,849
talk so you should be able to go through

00:04:51,490 --> 00:04:56,770
it pretty quickly all right so I kind of

00:04:54,849 --> 00:04:59,289
warmed up to this already basically

00:04:56,770 --> 00:05:00,970
what's happening right now and you could

00:04:59,289 --> 00:05:01,910
replace kubernetes with any runtime

00:05:00,970 --> 00:05:03,950
whenever

00:05:01,910 --> 00:05:06,080
run-time was the same with mobile it was

00:05:03,950 --> 00:05:07,700
the same with webbed was the same I'm

00:05:06,080 --> 00:05:09,470
sure with mainframe when they came out

00:05:07,700 --> 00:05:11,420
because a lot of people looking at this

00:05:09,470 --> 00:05:15,050
new technology and that includes a lot

00:05:11,420 --> 00:05:17,120
of spinnaker users so you have one

00:05:15,050 --> 00:05:18,590
vector of change you're trying to

00:05:17,120 --> 00:05:20,930
understand the new technology and then

00:05:18,590 --> 00:05:22,970
of course when people embark on one of

00:05:20,930 --> 00:05:25,220
these beat adoptions you know I want to

00:05:22,970 --> 00:05:28,190
adult micro-services I wanted to agile I

00:05:25,220 --> 00:05:30,470
wanted to kubernetes that's often an

00:05:28,190 --> 00:05:32,120
opportunity companies take to clean up

00:05:30,470 --> 00:05:34,370
stuff and to do things better this time

00:05:32,120 --> 00:05:37,100
especially around the software delivery

00:05:34,370 --> 00:05:38,750
the ICT like I usually joke that

00:05:37,100 --> 00:05:40,160
software delivery is the kind of thing

00:05:38,750 --> 00:05:41,330
when everybody says yeah yeah we know

00:05:40,160 --> 00:05:43,970
what we're doing right now it was great

00:05:41,330 --> 00:05:46,130
we'll do it better next time

00:05:43,970 --> 00:05:47,360
and so the question is that you've got

00:05:46,130 --> 00:05:49,940
two things that you want to do at the

00:05:47,360 --> 00:05:52,190
same time you want to adopt kubernetes

00:05:49,940 --> 00:05:54,610
and you also want to clean up it's the

00:05:52,190 --> 00:05:56,780
old junk and cruft and duct tape and

00:05:54,610 --> 00:05:59,540
processes and you have to reboot every

00:05:56,780 --> 00:06:01,130
hour on the problem whatever and so then

00:05:59,540 --> 00:06:04,760
you ask the question okay how do we do

00:06:01,130 --> 00:06:07,250
this the right way and so there's a

00:06:04,760 --> 00:06:10,940
bunch of challenges that stand in the

00:06:07,250 --> 00:06:12,380
way of doing this easily first is that

00:06:10,940 --> 00:06:14,270
you have to understand this whole new

00:06:12,380 --> 00:06:15,470
technology that you're adopting Cooper

00:06:14,270 --> 00:06:17,240
that is the first time you look at it

00:06:15,470 --> 00:06:18,860
especially something like kubernetes if

00:06:17,240 --> 00:06:22,430
you prepare to say who wrote the order

00:06:18,860 --> 00:06:24,440
has an enormous amount of flexibility

00:06:22,430 --> 00:06:27,740
complexity and concepts that you have to

00:06:24,440 --> 00:06:30,590
try to wrap your head around and then

00:06:27,740 --> 00:06:33,100
what happens in any new space kubernetes

00:06:30,590 --> 00:06:35,419
obviously the current example of that

00:06:33,100 --> 00:06:37,190
because of these concepts in you and

00:06:35,419 --> 00:06:40,460
they're rapidly evolving nobody's really

00:06:37,190 --> 00:06:42,290
figured it out yet how to do right so

00:06:40,460 --> 00:06:43,880
you know you can read 10 blog posts and

00:06:42,290 --> 00:06:46,010
I'll give you ten different opinions

00:06:43,880 --> 00:06:47,390
about what the bright practices and

00:06:46,010 --> 00:06:48,350
depending on the age of the blog post

00:06:47,390 --> 00:06:51,560
you can build these interesting

00:06:48,350 --> 00:06:53,300
timelines and so what you're faced with

00:06:51,560 --> 00:06:53,750
is you're faced with two challenges that

00:06:53,300 --> 00:06:55,130
the same

00:06:53,750 --> 00:06:57,380
I'm trying to understand this new

00:06:55,130 --> 00:06:59,750
underlying runtime and you're trying to

00:06:57,380 --> 00:07:01,310
figure out in a world where best

00:06:59,750 --> 00:07:03,500
practices are still in flux what the

00:07:01,310 --> 00:07:05,270
right way is to do it so of course you

00:07:03,500 --> 00:07:07,040
can read tons of blog posts about get up

00:07:05,270 --> 00:07:10,880
so whatever and try to figure out what

00:07:07,040 --> 00:07:12,890
they mean but going from a blog post

00:07:10,880 --> 00:07:14,600
that says hey we have one developer and

00:07:12,890 --> 00:07:17,300
one repository and one HelloWorld

00:07:14,600 --> 00:07:19,970
application to making this work across

00:07:17,300 --> 00:07:21,890
15 development teams with 10 clusters

00:07:19,970 --> 00:07:23,330
and all kinds of regulated requirements

00:07:21,890 --> 00:07:27,169
and so on and so forth it's just really

00:07:23,330 --> 00:07:28,550
really hard and then remembering that we

00:07:27,169 --> 00:07:30,890
shouldn't really always throw out the

00:07:28,550 --> 00:07:32,990
baby with the bathwater integrating all

00:07:30,890 --> 00:07:34,690
this new stuff this brave new world type

00:07:32,990 --> 00:07:37,070
concept with what we've actually learned

00:07:34,690 --> 00:07:40,600
about how to do self or delivery over

00:07:37,070 --> 00:07:42,710
time is itself a triple lining challenge

00:07:40,600 --> 00:07:46,190
and so obviously we hear there's no

00:07:42,710 --> 00:07:47,840
that's been a wrong way we hear about

00:07:46,190 --> 00:07:49,520
this regularly from people in the

00:07:47,840 --> 00:07:51,860
spinnaker community from people we speak

00:07:49,520 --> 00:07:53,990
to at Google from people I run into at

00:07:51,860 --> 00:07:55,340
meetups and so on so one of the things

00:07:53,990 --> 00:07:58,940
we tried to do is to think about this

00:07:55,340 --> 00:08:00,800
and provide some guidance in space so so

00:07:58,940 --> 00:08:02,060
the at a high level and I sketch this

00:08:00,800 --> 00:08:04,760
out in the beginning what we're trying

00:08:02,060 --> 00:08:06,500
to do here is as follows start out by

00:08:04,760 --> 00:08:08,180
talking about what are good practices

00:08:06,500 --> 00:08:09,860
that we actually want to retain that we

00:08:08,180 --> 00:08:12,590
don't want to throw out but we want to

00:08:09,860 --> 00:08:13,580
incorporate into what we're doing look

00:08:12,590 --> 00:08:16,460
at what kubernetes

00:08:13,580 --> 00:08:18,680
adds and see what we need to incorporate

00:08:16,460 --> 00:08:22,040
into this existing model to build a

00:08:18,680 --> 00:08:25,460
first kind of scroll man implementation

00:08:22,040 --> 00:08:27,380
of the CICU pipeline then understand

00:08:25,460 --> 00:08:29,690
what's really going on in that straw man

00:08:27,380 --> 00:08:31,880
build an appropriate mental model to

00:08:29,690 --> 00:08:34,430
understand why we set things up the way

00:08:31,880 --> 00:08:36,650
they are and that mental model gives us

00:08:34,430 --> 00:08:39,860
the capability to make trade-offs and

00:08:36,650 --> 00:08:41,510
tweak things around to make things

00:08:39,860 --> 00:08:42,979
better for ourselves so to give a really

00:08:41,510 --> 00:08:45,650
concrete example this is very abstract

00:08:42,979 --> 00:08:47,420
you'll see in the scroll man model that

00:08:45,650 --> 00:08:50,870
we're basically using one environment

00:08:47,420 --> 00:08:52,970
repository with a couple of branches and

00:08:50,870 --> 00:08:54,290
in many situations you might will say

00:08:52,970 --> 00:08:55,550
well maybe an environment or closer

00:08:54,290 --> 00:08:56,330
using the right thing maybe more the

00:08:55,550 --> 00:08:58,450
blobstore

00:08:56,330 --> 00:09:00,140
maybe we want one repository per

00:08:58,450 --> 00:09:01,850
environment plus

00:09:00,140 --> 00:09:04,670
whatever these are all trade offs that

00:09:01,850 --> 00:09:06,079
are perfectly reasonable but they're

00:09:04,670 --> 00:09:07,970
easier to make once you understand what

00:09:06,079 --> 00:09:09,769
the purpose is and then of course the

00:09:07,970 --> 00:09:11,930
final part of the game is once you build

00:09:09,769 --> 00:09:13,430
up mental model once you build the set

00:09:11,930 --> 00:09:14,810
up the works for your own environment

00:09:13,430 --> 00:09:16,970
then you have to implement it and

00:09:14,810 --> 00:09:18,079
unsurprisingly the spinnaker summit

00:09:16,970 --> 00:09:19,610
we're going to be talking about the

00:09:18,079 --> 00:09:21,800
implementers wood spinnaker and a few

00:09:19,610 --> 00:09:23,149
things largely but I think it's

00:09:21,800 --> 00:09:24,980
important to say that there are

00:09:23,149 --> 00:09:28,399
obviously plenty of other tools with

00:09:24,980 --> 00:09:29,779
which you would implement it and being

00:09:28,399 --> 00:09:31,700
able to separate the tooling from the

00:09:29,779 --> 00:09:33,920
model gives you the ability to choose

00:09:31,700 --> 00:09:35,420
the right to move to the task I think it

00:09:33,920 --> 00:09:38,149
being an anti-pattern the classic cargo

00:09:35,420 --> 00:09:45,380
cult I hear is that food tool solve CIC

00:09:38,149 --> 00:09:48,680
for kubernetes all right do it pretty

00:09:45,380 --> 00:09:50,480
well good speed here so let's go over

00:09:48,680 --> 00:09:53,750
some of the things that we want to

00:09:50,480 --> 00:09:55,430
retain a lot of these are ancient they

00:09:53,750 --> 00:09:56,720
should come as no surprise to anyone who

00:09:55,430 --> 00:09:59,810
kind of works professionally in the

00:09:56,720 --> 00:10:03,380
software delivery space I'm setting up

00:09:59,810 --> 00:10:05,209
the first two largely as an allergies so

00:10:03,380 --> 00:10:08,720
the first one is that you know if you

00:10:05,209 --> 00:10:11,300
have at some point in Europe in your

00:10:08,720 --> 00:10:13,490
software delivery pipeline you have

00:10:11,300 --> 00:10:14,779
built a particular thing you want to be

00:10:13,490 --> 00:10:15,949
in a state where you can always rebuild

00:10:14,779 --> 00:10:17,480
that thing where you have all the

00:10:15,949 --> 00:10:19,760
ingredients that are necessary to do

00:10:17,480 --> 00:10:21,709
this so this fairly common probably we

00:10:19,760 --> 00:10:23,779
do this all the time but an interesting

00:10:21,709 --> 00:10:25,970
lesson that we've learned when we talk

00:10:23,779 --> 00:10:28,339
about building code building binaries

00:10:25,970 --> 00:10:30,440
for instance humans theory you should

00:10:28,339 --> 00:10:32,720
never have to store your actual runtime

00:10:30,440 --> 00:10:34,670
Bibles because after all if you have a

00:10:32,720 --> 00:10:36,290
fully reproducible build you should

00:10:34,670 --> 00:10:38,870
always be able to rebuild that binary

00:10:36,290 --> 00:10:40,370
whenever you want course reality has

00:10:38,870 --> 00:10:42,649
told us that this really isn't the case

00:10:40,370 --> 00:10:44,300
often it's really hard to really use

00:10:42,649 --> 00:10:45,380
builds from ten years ago when the

00:10:44,300 --> 00:10:48,829
version of maybe that you've been using

00:10:45,380 --> 00:10:50,310
exists or whatever and so what we do in

00:10:48,829 --> 00:10:52,770
regular software delivery

00:10:50,310 --> 00:10:56,250
we keep both the source and the stuff

00:10:52,770 --> 00:10:58,290
that we build from the source separately

00:10:56,250 --> 00:11:00,480
and that's useful not just because it's

00:10:58,290 --> 00:11:01,950
gather but also because there are some

00:11:00,480 --> 00:11:04,080
information that we like to store about

00:11:01,950 --> 00:11:05,400
the derived other fact that just doesn't

00:11:04,080 --> 00:11:07,140
apply to the source for instance if

00:11:05,400 --> 00:11:09,330
you've done a vulnerability scan on a VM

00:11:07,140 --> 00:11:11,610
or a container image that is a piece of

00:11:09,330 --> 00:11:14,820
data that applies to them they're binary

00:11:11,610 --> 00:11:16,290
not the source code this all sounds very

00:11:14,820 --> 00:11:17,670
I mean I'm setting this up because of

00:11:16,290 --> 00:11:20,160
course once you replace the word source

00:11:17,670 --> 00:11:21,720
with config with manifests you will

00:11:20,160 --> 00:11:24,210
start to see some interesting analogous

00:11:21,720 --> 00:11:25,980
commodities we've always tried to

00:11:24,210 --> 00:11:28,050
minimize duplication we all know that

00:11:25,980 --> 00:11:29,940
crazy oh I've got five Java properties

00:11:28,050 --> 00:11:31,320
policy have dumb properties staging your

00:11:29,940 --> 00:11:35,339
properties act up problems whatever

00:11:31,320 --> 00:11:37,080
they're all 95% the same and so when I

00:11:35,339 --> 00:11:38,610
remember to add this new config flag oh

00:11:37,080 --> 00:11:40,910
I forgot to do it in staging or

00:11:38,610 --> 00:11:44,160
hopefully not in production etc etc so

00:11:40,910 --> 00:11:45,210
that's something we wanted to do and I

00:11:44,160 --> 00:11:50,010
think that's a good thing to try to

00:11:45,210 --> 00:11:51,360
retain and then I'll show a diagram that

00:11:50,010 --> 00:11:55,500
tries to make the next thing a bit more

00:11:51,360 --> 00:11:57,630
concrete I think one useful thing to

00:11:55,500 --> 00:11:59,610
take away is that if you think of an

00:11:57,630 --> 00:12:02,339
sort of software delivery pipeline the

00:11:59,610 --> 00:12:03,960
deployment process it's a couple of

00:12:02,339 --> 00:12:05,760
things it's both a technical process

00:12:03,960 --> 00:12:07,890
like must update database before we

00:12:05,760 --> 00:12:10,020
start a server and so on but it's also a

00:12:07,890 --> 00:12:12,060
business process must review must

00:12:10,020 --> 00:12:16,110
approve before I can go to a staging or

00:12:12,060 --> 00:12:18,150
production or whatever and a lot of

00:12:16,110 --> 00:12:20,480
times this is a battle between

00:12:18,150 --> 00:12:23,010
declarative imperative I think that's a

00:12:20,480 --> 00:12:24,630
not very useful way of framing this I

00:12:23,010 --> 00:12:25,720
think understanding that the business

00:12:24,630 --> 00:12:27,610
process is almost quite

00:12:25,720 --> 00:12:30,129
initiative heritage and that the

00:12:27,610 --> 00:12:31,930
environments the stuff you actually do

00:12:30,129 --> 00:12:33,579
in a single technical environment you

00:12:31,930 --> 00:12:35,920
want to have robust and declarative is a

00:12:33,579 --> 00:12:37,540
really good level for that he's more

00:12:35,920 --> 00:12:39,430
useful so I'll talk about the four

00:12:37,540 --> 00:12:42,189
processes in a second I'd like to call

00:12:39,430 --> 00:12:44,259
on the final point which is that if you

00:12:42,189 --> 00:12:45,759
think of a pipeline typically you're

00:12:44,259 --> 00:12:47,259
thinking about making a change to code

00:12:45,759 --> 00:12:50,079
and then you roll that out through dev

00:12:47,259 --> 00:12:51,459
tasks staging production and so on but

00:12:50,079 --> 00:12:52,959
there are definitely cases where you

00:12:51,459 --> 00:12:56,019
want to make changes that are applied to

00:12:52,959 --> 00:12:58,240
one environment only so I want to know

00:12:56,019 --> 00:12:59,800
what my production log settings to trace

00:12:58,240 --> 00:13:02,199
or key box is I'm troubleshooting a

00:12:59,800 --> 00:13:03,879
problem it seems kind of weird that we

00:13:02,199 --> 00:13:06,160
have to run an entire pipeline through

00:13:03,879 --> 00:13:09,490
four different environments just to set

00:13:06,160 --> 00:13:11,800
a production law Center so we really

00:13:09,490 --> 00:13:13,779
want to be able to typically have both

00:13:11,800 --> 00:13:15,399
application updates and environment

00:13:13,779 --> 00:13:16,839
specific updates and we'd like to drive

00:13:15,399 --> 00:13:18,819
those through the same stuff let me just

00:13:16,839 --> 00:13:21,850
get to these kind of this is what I was

00:13:18,819 --> 00:13:22,959
just talking about around the difference

00:13:21,850 --> 00:13:24,939
between the business process that

00:13:22,959 --> 00:13:27,100
typically goes across environments and

00:13:24,939 --> 00:13:29,889
what you're doing in each individual

00:13:27,100 --> 00:13:32,290
environment and I think this is a nice

00:13:29,889 --> 00:13:33,790
framing to think about the difference

00:13:32,290 --> 00:13:35,379
between the declarative and imperative

00:13:33,790 --> 00:13:36,819
stuff but of course for Cooper Nettie's

00:13:35,379 --> 00:13:39,370
this is very relevant because there's a

00:13:36,819 --> 00:13:41,139
big emphasis on declarative and I

00:13:39,370 --> 00:13:43,750
certainly think that what we do in an

00:13:41,139 --> 00:13:45,579
individual environment could be totally

00:13:43,750 --> 00:13:47,379
declarative and you know this goes

00:13:45,579 --> 00:13:49,420
beyond kubernetes terraformers trying to

00:13:47,379 --> 00:13:51,759
do this lots of tools have tried to do

00:13:49,420 --> 00:13:53,889
this in different spaces but I think

00:13:51,759 --> 00:13:55,180
having a business process on top where

00:13:53,889 --> 00:13:56,740
you can say you know I want to wait

00:13:55,180 --> 00:13:59,680
three days before I can play canary

00:13:56,740 --> 00:14:00,970
whatever that's really an imperative

00:13:59,680 --> 00:14:02,610
process and I think we should try to

00:14:00,970 --> 00:14:06,459
retain them

00:14:02,610 --> 00:14:08,620
so I spoken about four processes that we

00:14:06,459 --> 00:14:10,120
really would like to combine this is

00:14:08,620 --> 00:14:12,670
again there's no proven any specific

00:14:10,120 --> 00:14:15,189
this is nothing new but I think it's

00:14:12,670 --> 00:14:16,449
useful to remember them because very

00:14:15,189 --> 00:14:18,279
often when we talk about self care

00:14:16,449 --> 00:14:21,790
delivery pipelines we focus largely on

00:14:18,279 --> 00:14:23,570
the app update thing code repo somewhere

00:14:21,790 --> 00:14:26,750
or maybe multiple if I'm doing a spin

00:14:23,570 --> 00:14:29,000
first i'll microservice thing and I wish

00:14:26,750 --> 00:14:30,620
some change in their or validate that I

00:14:29,000 --> 00:14:32,959
want to ultimately roll it out through

00:14:30,620 --> 00:14:34,880
to production I already mentioned the

00:14:32,959 --> 00:14:36,470
second example which is well actually if

00:14:34,880 --> 00:14:38,810
I'm only changing config in one

00:14:36,470 --> 00:14:41,180
environment I probably don't want to run

00:14:38,810 --> 00:14:42,800
through this entire pipeline and so

00:14:41,180 --> 00:14:45,440
those of you who you know have held in a

00:14:42,800 --> 00:14:48,019
repo and then orchestrate that will

00:14:45,440 --> 00:14:49,370
notice that it's non-trivial to do this

00:14:48,019 --> 00:14:50,750
if that's your kind of setup so there's

00:14:49,370 --> 00:14:52,880
some trade-offs we have to setup here

00:14:50,750 --> 00:14:54,589
but there's a few other things that the

00:14:52,880 --> 00:14:56,779
very common operationally they're not

00:14:54,589 --> 00:14:58,240
really software delivery related but

00:14:56,779 --> 00:15:02,029
that we definitely want to try to do

00:14:58,240 --> 00:15:03,620
with the data that we have what is what

00:15:02,029 --> 00:15:05,329
my environment goes down I want to be

00:15:03,620 --> 00:15:07,130
able to recreate it where I want to be

00:15:05,329 --> 00:15:09,829
able to revert my environment to a

00:15:07,130 --> 00:15:11,569
particular point in time that's often

00:15:09,829 --> 00:15:13,009
considered an operational thing but I

00:15:11,569 --> 00:15:14,569
think if we could do it with the same

00:15:13,009 --> 00:15:17,870
data set we're really in a good place

00:15:14,569 --> 00:15:19,279
and then the final one is why isn't

00:15:17,870 --> 00:15:20,269
there working in production what's the

00:15:19,279 --> 00:15:21,620
difference between staging and

00:15:20,269 --> 00:15:24,470
production kind of thing where I want to

00:15:21,620 --> 00:15:26,029
be able to dip the actual state of these

00:15:24,470 --> 00:15:27,079
environments and you know you can take

00:15:26,029 --> 00:15:28,459
other step further

00:15:27,079 --> 00:15:30,230
I might not just want to dip them I

00:15:28,459 --> 00:15:32,360
might also want to be able to stomp on

00:15:30,230 --> 00:15:35,000
the changes that show up the classic

00:15:32,360 --> 00:15:36,889
puppet chef type model and that's

00:15:35,000 --> 00:15:38,510
another process it's really operational

00:15:36,889 --> 00:15:40,160
or that's how people talk about it but

00:15:38,510 --> 00:15:42,529
if we can do it from the same data set I

00:15:40,160 --> 00:15:44,329
think we're in a good place all right

00:15:42,529 --> 00:15:47,540
what does kubernetes add into the mix

00:15:44,329 --> 00:15:49,130
speed up here after all so I think the

00:15:47,540 --> 00:15:51,019
biggest and most important thing that

00:15:49,130 --> 00:15:52,790
Cooper Deniz adds into the mix and again

00:15:51,019 --> 00:15:54,740
it's not unique but it's very much a

00:15:52,790 --> 00:15:58,639
focus of how you work with kubernetes is

00:15:54,740 --> 00:16:00,709
that there is this well-defined way of

00:15:58,639 --> 00:16:03,649
define describing what an environment

00:16:00,709 --> 00:16:06,079
should look like in first code is

00:16:03,649 --> 00:16:07,519
nothing new we took like a description

00:16:06,079 --> 00:16:09,470
for what a service should look like in a

00:16:07,519 --> 00:16:12,350
repository for a long time but if you

00:16:09,470 --> 00:16:13,910
think about it first code works you have

00:16:12,350 --> 00:16:15,380
essentially a template description of a

00:16:13,910 --> 00:16:17,170
server and then you run that through

00:16:15,380 --> 00:16:18,879
terraform or deployment manager

00:16:17,170 --> 00:16:21,369
or whatever and now you have a thousand

00:16:18,879 --> 00:16:24,549
servers what you don't do typically is

00:16:21,369 --> 00:16:27,309
to store each of those thousand servers

00:16:24,549 --> 00:16:29,410
as a piece of individual to feed what we

00:16:27,309 --> 00:16:31,059
do is with kubernetes is different and

00:16:29,410 --> 00:16:33,790
interesting where we say not only do we

00:16:31,059 --> 00:16:35,739
have like the wrong template config but

00:16:33,790 --> 00:16:37,629
as we create a staging environment or a

00:16:35,739 --> 00:16:40,419
production environment or something it's

00:16:37,629 --> 00:16:42,160
worth storing that output memo as a

00:16:40,419 --> 00:16:44,230
separate thing and so this is what I

00:16:42,160 --> 00:16:44,769
call along in first open environments is

00:16:44,230 --> 00:16:47,319
code

00:16:44,769 --> 00:16:49,600
I think that's genuinely a not

00:16:47,319 --> 00:16:51,519
technically novel but definitely

00:16:49,600 --> 00:16:52,989
something that's new that we make is

00:16:51,519 --> 00:16:55,480
very explicitly into our software

00:16:52,989 --> 00:16:57,730
delivery setup another thing that's

00:16:55,480 --> 00:16:59,470
quite popular in the kubernetes space

00:16:57,730 --> 00:17:01,569
although I think it's debatable whether

00:16:59,470 --> 00:17:03,129
it's really the right choice is this

00:17:01,569 --> 00:17:04,870
idea that once you have this environment

00:17:03,129 --> 00:17:07,899
config you've got to figure out a way to

00:17:04,870 --> 00:17:09,789
make it real and so as with any of these

00:17:07,899 --> 00:17:11,649
approaches you've got two main ways of

00:17:09,789 --> 00:17:13,209
doing it you've got a push model I'm

00:17:11,649 --> 00:17:15,130
going to look at the config and push it

00:17:13,209 --> 00:17:17,139
into the runtime or you put a pool

00:17:15,130 --> 00:17:18,490
bubble where you have something running

00:17:17,139 --> 00:17:21,189
in your runtime that consistently

00:17:18,490 --> 00:17:23,500
watches the config and multiplies it

00:17:21,189 --> 00:17:25,959
once four tries to apply it on going

00:17:23,500 --> 00:17:27,519
basis right we have some talk

00:17:25,959 --> 00:17:28,779
discussions about that and then of

00:17:27,519 --> 00:17:30,340
course one thing Cobra denny's does

00:17:28,779 --> 00:17:31,840
which we have to figure out how to

00:17:30,340 --> 00:17:34,360
integrate is it has some out-of-the-box

00:17:31,840 --> 00:17:37,929
support for certain types of deployments

00:17:34,360 --> 00:17:39,610
and this is tricky because if you read a

00:17:37,929 --> 00:17:41,110
bunch of blog posts you will get the

00:17:39,610 --> 00:17:42,250
idea that kubernetes already solves

00:17:41,110 --> 00:17:44,380
deployments because it has the

00:17:42,250 --> 00:17:46,960
deployment object once you start digging

00:17:44,380 --> 00:17:48,820
into more complex use cases you know

00:17:46,960 --> 00:17:49,740
multistage traffic rollouts being their

00:17:48,820 --> 00:17:50,940
classic example

00:17:49,740 --> 00:17:54,000
thank you pretty hard to get this right

00:17:50,940 --> 00:17:55,440
and so having a good understanding of

00:17:54,000 --> 00:17:57,929
when the deployment object works and

00:17:55,440 --> 00:18:01,650
when it doesn't is the important kind of

00:17:57,929 --> 00:18:04,590
takeaway um I'm not gonna mention the

00:18:01,650 --> 00:18:07,710
get-ups work very much but I think just

00:18:04,590 --> 00:18:09,480
an initial step if you think about it as

00:18:07,710 --> 00:18:12,660
being a combination of environments as

00:18:09,480 --> 00:18:15,330
code plus asynchronous watching of the

00:18:12,660 --> 00:18:17,010
code and then using repositories is the

00:18:15,330 --> 00:18:18,600
kind of business process to define how

00:18:17,010 --> 00:18:20,400
to get the dev to test the staging to

00:18:18,600 --> 00:18:22,559
production I think you have a very

00:18:20,400 --> 00:18:23,600
valuable deconstruction I think we're

00:18:22,559 --> 00:18:27,120
going to talk about each of these

00:18:23,600 --> 00:18:29,040
components a little bit all right so no

00:18:27,120 --> 00:18:30,390
two slides of a few slides ago we have

00:18:29,040 --> 00:18:31,500
this thing which is the old-fashioned

00:18:30,390 --> 00:18:34,410
way of doing things here's the big

00:18:31,500 --> 00:18:36,330
difference like this environments is in

00:18:34,410 --> 00:18:38,880
the middle I think largely speaking

00:18:36,330 --> 00:18:41,730
that's the sort of state of the art that

00:18:38,880 --> 00:18:43,740
we have with kubernetes day and you know

00:18:41,730 --> 00:18:45,600
what's going on in the top next door is

00:18:43,740 --> 00:18:48,059
our calling to describing how we use a

00:18:45,600 --> 00:18:49,350
very similar approach of Google but for

00:18:48,059 --> 00:18:52,800
all kinds of technologies not just

00:18:49,350 --> 00:18:55,260
Cooperman all right moving on

00:18:52,800 --> 00:18:57,720
okay so what did we say get an

00:18:55,260 --> 00:18:59,730
understanding of what's good practice

00:18:57,720 --> 00:19:01,380
what we want to keep what Cooper than

00:18:59,730 --> 00:19:03,120
these ads into the mix and now let's

00:19:01,380 --> 00:19:04,650
start building a scroll man for how this

00:19:03,120 --> 00:19:05,640
would look like in practice and then

00:19:04,650 --> 00:19:10,950
we'll look at how some of these

00:19:05,640 --> 00:19:14,220
processes work so set up here as if it

00:19:10,950 --> 00:19:15,960
as follows you've got two teams they

00:19:14,220 --> 00:19:17,460
have a couple of environments you know

00:19:15,960 --> 00:19:19,800
they've got their code which is a

00:19:17,460 --> 00:19:23,070
monster and they've got some staging and

00:19:19,800 --> 00:19:25,440
production environments and you have to

00:19:23,070 --> 00:19:27,030
you have two clusters but they could be

00:19:25,440 --> 00:19:28,530
namespaces we're not going to talk a lot

00:19:27,030 --> 00:19:31,170
about what the best way is to split up a

00:19:28,530 --> 00:19:32,790
kubernetes environment so they're

00:19:31,170 --> 00:19:33,740
staging a production again and they live

00:19:32,790 --> 00:19:36,409
in a separate

00:19:33,740 --> 00:19:37,820
again it's a straw man we might split

00:19:36,409 --> 00:19:39,830
this repo up we might use totally

00:19:37,820 --> 00:19:43,580
different things for that if it is a

00:19:39,830 --> 00:19:45,909
starting point so I've deliberately

00:19:43,580 --> 00:19:48,649
chosen the way the teams set out their

00:19:45,909 --> 00:19:50,330
their repos or set up what's in them in

00:19:48,649 --> 00:19:52,039
a slightly different way because that's

00:19:50,330 --> 00:19:53,899
part of the trade-off that we can think

00:19:52,039 --> 00:19:57,440
about through so in the first example

00:19:53,899 --> 00:19:59,059
team one has some config definitions

00:19:57,440 --> 00:20:00,909
that we want to know environments in

00:19:59,059 --> 00:20:02,899
their master run so with their app code

00:20:00,909 --> 00:20:04,309
large we'll talk a little bit about the

00:20:02,899 --> 00:20:06,200
difference between that in the second

00:20:04,309 --> 00:20:08,659
scenario they have a service definition

00:20:06,200 --> 00:20:10,039
in there presumably also being that they

00:20:08,659 --> 00:20:12,289
want the service to be the same in all

00:20:10,039 --> 00:20:13,940
environments but then for staging and

00:20:12,289 --> 00:20:16,700
production they have different

00:20:13,940 --> 00:20:18,679
deployment definitions which is

00:20:16,700 --> 00:20:20,779
basically saying that I want to be able

00:20:18,679 --> 00:20:22,220
to tweak say the replicas are the amount

00:20:20,779 --> 00:20:23,840
of replicas or the replicas seller will

00:20:22,220 --> 00:20:25,669
never separately independently from each

00:20:23,840 --> 00:20:28,159
other team two has a slightly different

00:20:25,669 --> 00:20:30,919
set up where they're using some entirely

00:20:28,159 --> 00:20:32,179
custom definition for their app we'll

00:20:30,919 --> 00:20:34,130
look at that in a second and then they

00:20:32,179 --> 00:20:36,380
have separate can fake the stadium

00:20:34,130 --> 00:20:38,179
production before we start they have

00:20:36,380 --> 00:20:39,529
nobody's deployed anything our

00:20:38,179 --> 00:20:41,390
environment representative because

00:20:39,529 --> 00:20:43,820
there's nothing going on so let's look

00:20:41,390 --> 00:20:46,850
at what happens as an example when team

00:20:43,820 --> 00:20:48,320
one tries to change their application so

00:20:46,850 --> 00:20:51,020
they built their service definition in

00:20:48,320 --> 00:20:53,419
their repo and they decide to go from

00:20:51,020 --> 00:20:54,700
four eighty to eighty eighty and this is

00:20:53,419 --> 00:20:57,020
roughly what that could look like

00:20:54,700 --> 00:20:58,820
obviously we have long debates about the

00:20:57,020 --> 00:21:00,190
right way to template the bottom but the

00:20:58,820 --> 00:21:03,020
point is that that environment

00:21:00,190 --> 00:21:05,000
placeholder is intended to be a template

00:21:03,020 --> 00:21:06,380
model so this is a recognition that what

00:21:05,000 --> 00:21:08,809
you have in this master branch will

00:21:06,380 --> 00:21:10,880
change across your environments so the

00:21:08,809 --> 00:21:12,860
first step is that we're going to the

00:21:10,880 --> 00:21:15,169
staging environment and that means we

00:21:12,860 --> 00:21:17,179
generated from the template we generate

00:21:15,169 --> 00:21:19,159
this full thing like we take the config

00:21:17,179 --> 00:21:21,020
and we take the environment this is

00:21:19,159 --> 00:21:23,090
roughly what it look like if we want to

00:21:21,020 --> 00:21:25,370
we can review and approve it and then we

00:21:23,090 --> 00:21:26,090
say go and we will deploy that and so on

00:21:25,370 --> 00:21:28,640
and so forth

00:21:26,090 --> 00:21:30,529
when we're happy with that we move on to

00:21:28,640 --> 00:21:32,570
production which looks very similar

00:21:30,529 --> 00:21:34,130
except that of course the environment

00:21:32,570 --> 00:21:36,860
was different because we're now

00:21:34,130 --> 00:21:39,280
deploying to production so that would be

00:21:36,860 --> 00:21:40,810
a kind of two space

00:21:39,280 --> 00:21:43,960
then we do production and as you notice

00:21:40,810 --> 00:21:45,700
let me just go back here as we do this

00:21:43,960 --> 00:21:49,180
we end up with a an environment

00:21:45,700 --> 00:21:52,360
repository that has two young goals or

00:21:49,180 --> 00:21:54,970
application or one for each version in

00:21:52,360 --> 00:21:56,050
it both one features we have they got

00:21:54,970 --> 00:21:59,860
more for that application each

00:21:56,050 --> 00:22:01,390
particular environment okay so now

00:21:59,860 --> 00:22:03,820
application team two comes along and

00:22:01,390 --> 00:22:05,380
they also want to make a change and so

00:22:03,820 --> 00:22:07,030
notice here one of the nice things about

00:22:05,380 --> 00:22:10,090
kubernetes if you think about this

00:22:07,030 --> 00:22:11,940
process that we just went through up you

00:22:10,090 --> 00:22:14,800
know we talked about source code

00:22:11,940 --> 00:22:17,740
compiled code think of this is source

00:22:14,800 --> 00:22:19,840
config and compile cafee like in my view

00:22:17,740 --> 00:22:22,000
gamal is like assembly language it's a

00:22:19,840 --> 00:22:23,590
really low level underlying definition

00:22:22,000 --> 00:22:25,810
of course you can get all your teams to

00:22:23,590 --> 00:22:27,520
program in assembly if you want to but

00:22:25,810 --> 00:22:28,990
the nice thing about kubernetes is that

00:22:27,520 --> 00:22:31,660
you could just like maker make your

00:22:28,990 --> 00:22:34,270
equipment c++ you can use a higher-level

00:22:31,660 --> 00:22:35,590
language to describe the config and a

00:22:34,270 --> 00:22:38,050
lot of companies do that because it

00:22:35,590 --> 00:22:39,970
allows you to restrict what teams can do

00:22:38,050 --> 00:22:42,400
inside kubernetes and apply standards

00:22:39,970 --> 00:22:45,340
and so on so here but this team is

00:22:42,400 --> 00:22:47,350
chosen for a very limited kind of

00:22:45,340 --> 00:22:49,630
template format which is just a version

00:22:47,350 --> 00:22:51,700
some port number and the image that they

00:22:49,630 --> 00:22:53,770
want to deploy and that gets compiled if

00:22:51,700 --> 00:22:56,680
you like together with the staging can

00:22:53,770 --> 00:22:59,110
fit into a full deployment object with

00:22:56,680 --> 00:23:02,470
that image injected in and so on and so

00:22:59,110 --> 00:23:05,020
forth and then you obviously have the

00:23:02,470 --> 00:23:06,940
but I think we got the app version which

00:23:05,020 --> 00:23:08,590
is specific now it's turning into two

00:23:06,940 --> 00:23:10,060
files I'll show you why in a second

00:23:08,590 --> 00:23:13,840
and then there's a second step same

00:23:10,060 --> 00:23:17,620
again you compile that source config and

00:23:13,840 --> 00:23:19,810
the custom settings into a demo file and

00:23:17,620 --> 00:23:22,420
an environment specific gamble and then

00:23:19,810 --> 00:23:23,500
you deploy that out so you now have two

00:23:22,420 --> 00:23:25,750
teams have a version of their

00:23:23,500 --> 00:23:29,290
application running both in staging and

00:23:25,750 --> 00:23:31,090
production and now team two says oh we

00:23:29,290 --> 00:23:34,420
have a production issue we would like to

00:23:31,090 --> 00:23:36,520
change the config so though our debug

00:23:34,420 --> 00:23:39,550
our trace logging or a logging goes from

00:23:36,520 --> 00:23:41,290
info to trace for example so if we look

00:23:39,550 --> 00:23:44,260
back at team one where the configuration

00:23:41,290 --> 00:23:44,900
only lives in monster they'd be stuck in

00:23:44,260 --> 00:23:46,630
fact

00:23:44,900 --> 00:23:49,580
with having to say I'm gonna change the

00:23:46,630 --> 00:23:50,990
variable for this thing because you want

00:23:49,580 --> 00:23:53,210
different debug settings for different

00:23:50,990 --> 00:23:54,980
environments but I have to run the full

00:23:53,210 --> 00:23:57,410
pipeline I have to go to stage a

00:23:54,980 --> 00:23:58,790
basically do a no op deployment who can

00:23:57,410 --> 00:24:03,200
I this is kind of nice about that and

00:23:58,790 --> 00:24:05,090
then I have to go to production but what

00:24:03,200 --> 00:24:06,680
I could do with this setup here is the

00:24:05,090 --> 00:24:08,630
second team can they can make a change

00:24:06,680 --> 00:24:10,760
to this config map which lives in their

00:24:08,630 --> 00:24:12,800
production brush and that could trigger

00:24:10,760 --> 00:24:14,390
a different type of automation which

00:24:12,800 --> 00:24:16,220
doesn't try to run the whole pipeline at

00:24:14,390 --> 00:24:18,320
all it goes directly into the production

00:24:16,220 --> 00:24:21,410
environment and says I'm gonna change

00:24:18,320 --> 00:24:23,240
the configure live notice also that you

00:24:21,410 --> 00:24:24,980
can trigger this config change without

00:24:23,240 --> 00:24:26,960
ever having to build a new version of

00:24:24,980 --> 00:24:28,460
your application so one of the problems

00:24:26,960 --> 00:24:29,720
with routing an app pipeline over time

00:24:28,460 --> 00:24:31,760
is you typically have to run through a

00:24:29,720 --> 00:24:34,100
full container build which can take a

00:24:31,760 --> 00:24:35,930
really long time to update your

00:24:34,100 --> 00:24:37,370
container just to make a config sentence

00:24:35,930 --> 00:24:41,620
change in what environment is real

00:24:37,370 --> 00:24:44,500
weirdest right let's speed up more so

00:24:41,620 --> 00:24:46,280
I've only large time for demo I

00:24:44,500 --> 00:24:48,530
recognize there's a lot of dense

00:24:46,280 --> 00:24:50,840
material in here so I'm happy to talk in

00:24:48,530 --> 00:24:52,280
one of our office hours or whatever why

00:24:50,840 --> 00:24:54,470
don't we just show what are the key

00:24:52,280 --> 00:24:57,140
pieces of this stroll man so I think the

00:24:54,470 --> 00:24:59,090
first is that we've had the same way we

00:24:57,140 --> 00:25:02,090
have source code and could think oh by

00:24:59,090 --> 00:25:04,430
the compiled code in a regular pipeline

00:25:02,090 --> 00:25:07,010
here we have source config and complot

00:25:04,430 --> 00:25:10,580
compiled config and we store them both

00:25:07,010 --> 00:25:13,010
separately for each other in this moment

00:25:10,580 --> 00:25:14,870
we have one repository per team where

00:25:13,010 --> 00:25:17,000
the team stores their stuff the stuff

00:25:14,870 --> 00:25:19,400
they control but the environments that

00:25:17,000 --> 00:25:20,840
you like the compiled config lives in

00:25:19,400 --> 00:25:23,030
the shared place because if you have

00:25:20,840 --> 00:25:24,680
each team having their own environment

00:25:23,030 --> 00:25:27,260
then understanding the state of your

00:25:24,680 --> 00:25:28,910
environment requires joining 50 red

00:25:27,260 --> 00:25:33,260
poles together which is a really hard

00:25:28,910 --> 00:25:35,480
operation I tended to use branches here

00:25:33,260 --> 00:25:38,480
versus different repositories or

00:25:35,480 --> 00:25:39,980
different or folders because branches

00:25:38,480 --> 00:25:40,800
have their separate commit history so

00:25:39,980 --> 00:25:42,540
you're not mixed

00:25:40,800 --> 00:25:44,670
commits from staging versus production

00:25:42,540 --> 00:25:48,030
for example but it's much easier to

00:25:44,670 --> 00:25:50,490
compare branches then comparing repos

00:25:48,030 --> 00:25:51,750
for instance there are problems too

00:25:50,490 --> 00:25:53,310
because especially you're on access

00:25:51,750 --> 00:25:54,930
control and so on so we can get into

00:25:53,310 --> 00:25:58,110
those a little bit later

00:25:54,930 --> 00:25:58,650
and then a lot of laws talk about the

00:25:58,110 --> 00:26:00,120
next one

00:25:58,650 --> 00:26:02,730
which is kind of interesting which is to

00:26:00,120 --> 00:26:05,160
you know if you put your config in your

00:26:02,730 --> 00:26:07,140
replication repository you don't have

00:26:05,160 --> 00:26:09,120
that much duplication because you just

00:26:07,140 --> 00:26:11,280
have a placeholder somewhere that

00:26:09,120 --> 00:26:14,340
changes for environment if you have them

00:26:11,280 --> 00:26:15,450
on each branch as we do in the case of

00:26:14,340 --> 00:26:18,120
team to here

00:26:15,450 --> 00:26:19,470
those things are very duplication

00:26:18,120 --> 00:26:20,910
duplication really there's a lot of

00:26:19,470 --> 00:26:22,860
duplication in those which is not great

00:26:20,910 --> 00:26:24,840
remember we said the best practices to

00:26:22,860 --> 00:26:26,790
try to reduce duplication so there's a

00:26:24,840 --> 00:26:29,010
trade-off here between do I need to

00:26:26,790 --> 00:26:30,990
change the setting independently or can

00:26:29,010 --> 00:26:32,490
I get away with just running an entire

00:26:30,990 --> 00:26:35,460
pipeline if I want to make this change

00:26:32,490 --> 00:26:37,770
and then the final one is that again as

00:26:35,460 --> 00:26:39,780
in the teams to team to case I think

00:26:37,770 --> 00:26:42,120
it's totally legitimate to think about

00:26:39,780 --> 00:26:44,790
not using raw looper then easy animal as

00:26:42,120 --> 00:26:46,040
their level of abstraction of course

00:26:44,790 --> 00:26:48,420
there's different ways to implement that

00:26:46,040 --> 00:26:50,550
see our DS might be one you want to do

00:26:48,420 --> 00:26:53,100
personally I think having effectively

00:26:50,550 --> 00:26:57,140
your parser which is what a CRD

00:26:53,100 --> 00:26:57,140
controller is linked in your runtime

00:27:04,260 --> 00:27:07,710
first I'll go into a little bit of

00:27:05,970 --> 00:27:10,020
detail about how we actually reason

00:27:07,710 --> 00:27:11,340
about these changes separate when Andrew

00:27:10,020 --> 00:27:14,200
is talking about and then relate that

00:27:11,340 --> 00:27:16,810
back to his for later processing

00:27:14,200 --> 00:27:18,370
showing us and then demo but these

00:27:16,810 --> 00:27:20,410
actually look like it's vinegar some of

00:27:18,370 --> 00:27:22,810
its not exactly word once if you get its

00:27:20,410 --> 00:27:25,680
vinegar there's features excel with that

00:27:22,810 --> 00:27:27,580
so explain around that and then finally

00:27:25,680 --> 00:27:30,010
demonstrate what this could look like in

00:27:27,580 --> 00:27:32,620
your environments at home so to begin

00:27:30,010 --> 00:27:34,350
with the typical push something to

00:27:32,620 --> 00:27:38,260
production pipeline simply looks like

00:27:34,350 --> 00:27:41,470
you do see I which is you build validate

00:27:38,260 --> 00:27:46,180
and then CD does deploy to staging and

00:27:41,470 --> 00:27:47,800
promotion how can we find this it's an

00:27:46,180 --> 00:27:49,570
oversimplification there's actually more

00:27:47,800 --> 00:27:52,990
ways their changes can make it into

00:27:49,570 --> 00:27:57,850
production and we'll take a look at this

00:27:52,990 --> 00:27:59,320
across two dimensions here so I look at

00:27:57,850 --> 00:28:02,710
these dimensions are small so we can

00:27:59,320 --> 00:28:06,040
draw a nice little quadrant so we have

00:28:02,710 --> 00:28:07,990
changes that are dependent on version of

00:28:06,040 --> 00:28:10,060
the application therein and independent

00:28:07,990 --> 00:28:11,170
from the version as well as changes that

00:28:10,060 --> 00:28:13,480
are depending on the environment they're

00:28:11,170 --> 00:28:15,700
in and changes that are independent in

00:28:13,480 --> 00:28:18,250
their environment I'm so the first point

00:28:15,700 --> 00:28:21,520
which is arguably the most common is you

00:28:18,250 --> 00:28:24,130
make a code change you remove it all the

00:28:21,520 --> 00:28:28,690
way through to production same with a

00:28:24,130 --> 00:28:30,310
pic change and ultimately all your

00:28:28,690 --> 00:28:31,630
environments look the same but the

00:28:30,310 --> 00:28:32,800
change actually is dependent on the

00:28:31,630 --> 00:28:34,900
version of the application material

00:28:32,800 --> 00:28:40,780
forward or back that change appears or

00:28:34,900 --> 00:28:42,010
disappears similarly we have changes we

00:28:40,780 --> 00:28:44,230
make a change like andrew is saying

00:28:42,010 --> 00:28:45,730
maybe we had to bug like a mist aging to

00:28:44,230 --> 00:28:47,660
change you make only to one environment

00:28:45,730 --> 00:28:49,100
and again it's something that actually

00:28:47,660 --> 00:28:50,750
depends on the version of the

00:28:49,100 --> 00:28:52,760
application that were running you're

00:28:50,750 --> 00:28:55,910
both ordered back the change appears it

00:28:52,760 --> 00:28:59,300
disappears but we're making this only to

00:28:55,910 --> 00:29:01,190
one environment that time the work gets

00:28:59,300 --> 00:29:02,600
a little weird is where we have changes

00:29:01,190 --> 00:29:03,860
that are actually independent from the

00:29:02,600 --> 00:29:05,710
version of the application of they're

00:29:03,860 --> 00:29:09,530
running in I was gonna see for example

00:29:05,710 --> 00:29:11,060
your database management team rotates

00:29:09,530 --> 00:29:12,650
their provincials every week and

00:29:11,060 --> 00:29:17,800
tomorrow they're rotating credentials

00:29:12,650 --> 00:29:19,370
you make change you coded or you a

00:29:17,800 --> 00:29:20,960
couple of days version of your

00:29:19,370 --> 00:29:22,790
application if you're all back to

00:29:20,960 --> 00:29:24,560
today's code in two days you'll be in

00:29:22,790 --> 00:29:26,240
trouble because the credential stopped

00:29:24,560 --> 00:29:27,320
working so you also have these kinds of

00:29:26,240 --> 00:29:28,760
changes which you have to be aware of

00:29:27,320 --> 00:29:30,980
which actually aren't coupled with the

00:29:28,760 --> 00:29:32,660
version of your application this last

00:29:30,980 --> 00:29:35,780
quadrant is a bit of a weird one but we

00:29:32,660 --> 00:29:39,290
have it in here so take for example even

00:29:35,780 --> 00:29:42,770
have a jar license dependency that has

00:29:39,290 --> 00:29:44,120
to be kind is about and violation of the

00:29:42,770 --> 00:29:46,370
code you're running and you have to

00:29:44,120 --> 00:29:49,490
update this across all environments and

00:29:46,370 --> 00:29:52,670
all versions of the code you monotron so

00:29:49,490 --> 00:29:54,710
a brief recap your Andrew support

00:29:52,670 --> 00:29:56,750
related processes I will actually dive

00:29:54,710 --> 00:30:01,820
into these in detail here in the form of

00:29:56,750 --> 00:30:04,230
some spinnaker pipelines so we have a

00:30:01,820 --> 00:30:05,500
little application here we're running

00:30:04,230 --> 00:30:08,840
[Music]

00:30:05,500 --> 00:30:12,350
tango app we have some manifests these

00:30:08,840 --> 00:30:16,160
have overrides for environments we have

00:30:12,350 --> 00:30:17,990
a source directory which has a little go

00:30:16,160 --> 00:30:21,470
far limit and we're managing the updates

00:30:17,990 --> 00:30:23,860
with some spinnaker pack lines so let's

00:30:21,470 --> 00:30:23,860
see

00:30:25,610 --> 00:30:30,620
there we go so here's spinnaker and like

00:30:29,660 --> 00:30:32,450
Angie was saying we're not going to go

00:30:30,620 --> 00:30:34,070
into detail about how we actually want

00:30:32,450 --> 00:30:36,050
to structure state chambers production

00:30:34,070 --> 00:30:37,310
we're using namespaces we lump your

00:30:36,050 --> 00:30:38,920
granny's posterior could very well be

00:30:37,310 --> 00:30:41,150
many that are split across environments

00:30:38,920 --> 00:30:43,340
but here you see how the deployment

00:30:41,150 --> 00:30:45,830
object is staging the deployment object

00:30:43,340 --> 00:30:47,660
in production and they're both running

00:30:45,830 --> 00:30:49,700
it looks like to be the same version of

00:30:47,660 --> 00:30:51,440
our application we also have a publicly

00:30:49,700 --> 00:30:52,490
reaching a reachable endpoint it looks

00:30:51,440 --> 00:30:54,860
like right now the background screen

00:30:52,490 --> 00:30:56,960
it's kind of hard to read but we have

00:30:54,860 --> 00:30:59,120
some environment only configuration and

00:30:56,960 --> 00:31:01,430
some application level configuration so

00:30:59,120 --> 00:31:03,710
first thing we have here is a deployed

00:31:01,430 --> 00:31:06,350
of staging pipeline we jump into

00:31:03,710 --> 00:31:08,180
configuration we say we can trigger

00:31:06,350 --> 00:31:10,790
either off changes in GCS which is very

00:31:08,180 --> 00:31:13,310
steady manifests or changes in GCR which

00:31:10,790 --> 00:31:14,480
is where we store our images and an

00:31:13,310 --> 00:31:16,010
artifacts for one of those doesn't

00:31:14,480 --> 00:31:19,160
arrive we use whatever arrived from the

00:31:16,010 --> 00:31:21,610
prior execution of this pipeline looks

00:31:19,160 --> 00:31:24,080
like kicked off first thing we do is we

00:31:21,610 --> 00:31:26,090
beak our staging manifest which means we

00:31:24,080 --> 00:31:28,010
say ok I'm going to bake a hunk chart it

00:31:26,090 --> 00:31:29,540
has some templates in there and we're

00:31:28,010 --> 00:31:30,920
gonna override it with some staging

00:31:29,540 --> 00:31:33,020
specific values these are things that

00:31:30,920 --> 00:31:36,350
only appear in your staging environment

00:31:33,020 --> 00:31:37,910
and we deployed we validate and we do a

00:31:36,350 --> 00:31:40,130
snapshot operation where we actually

00:31:37,910 --> 00:31:42,050
push this back into a repo this looks ok

00:31:40,130 --> 00:31:44,750
this is gonna run and actually push

00:31:42,050 --> 00:31:48,910
those manifests bucket that we have

00:31:44,750 --> 00:31:48,910
right here so that's

00:31:49,460 --> 00:31:53,450
so here we have a Floyd folder and again

00:31:51,980 --> 00:31:55,760
this is an agent detail of how these

00:31:53,450 --> 00:31:57,620
things are structured and we push as it

00:31:55,760 --> 00:32:00,830
finishes a new version of this manifest

00:31:57,620 --> 00:32:02,810
file and then just bucket right here so

00:32:00,830 --> 00:32:06,910
if we're not very interesting but the

00:32:02,810 --> 00:32:06,910
pipeline quickly

00:32:11,570 --> 00:32:15,900
looks like it's saving this time as that

00:32:14,820 --> 00:32:17,100
goes to talk about the production of

00:32:15,900 --> 00:32:19,410
headphones this one's actually a little

00:32:17,100 --> 00:32:20,550
more interesting this one because we're

00:32:19,410 --> 00:32:22,080
trying to push something and make it the

00:32:20,550 --> 00:32:23,700
same across all environments just

00:32:22,080 --> 00:32:25,770
triggered all of our staging pipeline so

00:32:23,700 --> 00:32:27,420
here we say whatever comes from the

00:32:25,770 --> 00:32:29,280
deployed staging pipeline take that and

00:32:27,420 --> 00:32:31,650
from that also inherit the artifact

00:32:29,280 --> 00:32:33,290
study consume their - the staging

00:32:31,650 --> 00:32:36,050
specific values so we take that same

00:32:33,290 --> 00:32:39,240
helm file that helm chart that we baked

00:32:36,050 --> 00:32:40,680
and we take take take that same image

00:32:39,240 --> 00:32:42,900
the same one that we deployed to staging

00:32:40,680 --> 00:32:44,300
and we use those as inputs to this this

00:32:42,900 --> 00:32:46,620
pipeline that's gonna run right here

00:32:44,300 --> 00:32:48,480
first thing we do is we make again looks

00:32:46,620 --> 00:32:49,620
very similar but now we actually do

00:32:48,480 --> 00:32:52,500
something interesting and we're gonna

00:32:49,620 --> 00:32:54,030
run the manual diff of what we have

00:32:52,500 --> 00:32:56,370
running in production and what we're

00:32:54,030 --> 00:32:57,540
about to deploy to production this right

00:32:56,370 --> 00:32:59,400
here it's a bit of a hack for writing a

00:32:57,540 --> 00:33:00,900
job we want to make this better we

00:32:59,400 --> 00:33:02,610
actually want to do a 3-way jib between

00:33:00,900 --> 00:33:04,500
what you have running what you're trying

00:33:02,610 --> 00:33:07,320
to apply and what was apply the last

00:33:04,500 --> 00:33:08,280
time that this pipeline ran so it looks

00:33:07,320 --> 00:33:11,420
like this is running and it's gonna

00:33:08,280 --> 00:33:15,990
actually ask us to look at that diff

00:33:11,420 --> 00:33:17,040
console here and some of the stuff in

00:33:15,990 --> 00:33:19,170
here is annoying because spinnaker

00:33:17,040 --> 00:33:21,030
applies annotations but as we refine

00:33:19,170 --> 00:33:23,070
this you'll hopefully only see things

00:33:21,030 --> 00:33:24,360
change that you want to change so if you

00:33:23,070 --> 00:33:26,250
made a change only to the production

00:33:24,360 --> 00:33:27,540
environment you can see like the

00:33:26,250 --> 00:33:29,850
complete level change we just see that

00:33:27,540 --> 00:33:33,260
should see the docker digest change on

00:33:29,850 --> 00:33:36,990
that image right there so let's say okay

00:33:33,260 --> 00:33:38,100
so so we made a change across some

00:33:36,990 --> 00:33:41,790
environments let's talk with making a

00:33:38,100 --> 00:33:43,440
change to one environment only and we're

00:33:41,790 --> 00:33:46,950
gonna use that example get earlier about

00:33:43,440 --> 00:33:51,840
database credentials being rotated so so

00:33:46,950 --> 00:33:54,620
that's a production and they should

00:33:51,840 --> 00:33:54,620
automatically trigger

00:33:54,880 --> 00:33:58,960
update to production environment I

00:33:57,100 --> 00:34:00,310
playing and this again it's not very

00:33:58,960 --> 00:34:02,410
interesting as a pipeline minute of

00:34:00,310 --> 00:34:05,740
itself all that really does is listen to

00:34:02,410 --> 00:34:07,300
changes for that file and GCS bucket and

00:34:05,740 --> 00:34:11,350
when it arrives it deploys it as a

00:34:07,300 --> 00:34:13,660
config map so like Andrew is saying here

00:34:11,350 --> 00:34:15,070
we also have like an environment backup

00:34:13,660 --> 00:34:17,350
or restore it's typically what you would

00:34:15,070 --> 00:34:19,900
use for a role of rollback but it's also

00:34:17,350 --> 00:34:21,400
really handy for things like spinning up

00:34:19,900 --> 00:34:23,290
a new cluster and saying I have a known

00:34:21,400 --> 00:34:26,970
good version I want to start running

00:34:23,290 --> 00:34:31,120
this again so let's take a look here we

00:34:26,970 --> 00:34:33,220
have this historic production from

00:34:31,120 --> 00:34:35,110
backup pipeline and again inherently the

00:34:33,220 --> 00:34:42,340
pipeline isn't very interesting but

00:34:35,110 --> 00:34:45,640
what's doing here we could say I want to

00:34:42,340 --> 00:34:46,930
restore from GCSE revision and XYZ and

00:34:45,640 --> 00:34:48,490
again this is something we can service

00:34:46,930 --> 00:34:50,110
better than spinnaker anything a craft

00:34:48,490 --> 00:34:51,490
unavailable or had a better integration

00:34:50,110 --> 00:34:53,200
either with get for your stronger

00:34:51,490 --> 00:34:55,330
manifests or is DCS first during your

00:34:53,200 --> 00:34:57,370
manifests and allow you to say okay I

00:34:55,330 --> 00:34:58,690
want to go back and all that's doing is

00:34:57,370 --> 00:35:00,430
it's taking those same manifests that

00:34:58,690 --> 00:35:04,029
snapshotted after a grand the production

00:35:00,430 --> 00:35:08,920
of that point and now be applying them

00:35:04,029 --> 00:35:12,910
last one here like interesting we also

00:35:08,920 --> 00:35:14,109
have mr. Bertie demoed this by showing

00:35:12,910 --> 00:35:16,029
the dispatch we know it was running a

00:35:14,109 --> 00:35:17,440
production and we're about to deploy we

00:35:16,029 --> 00:35:20,380
can apply the same technique to actual

00:35:17,440 --> 00:35:23,109
dips between various environments so we

00:35:20,380 --> 00:35:24,880
have a pipeline in here which again does

00:35:23,109 --> 00:35:25,779
a manual diff by running a job but it's

00:35:24,880 --> 00:35:31,140
something that they want to do better in

00:35:25,779 --> 00:35:31,140
spinnaker and kicks off that job for us

00:35:32,460 --> 00:35:38,109
see what it says and here we can see the

00:35:36,430 --> 00:35:39,489
actual differences between the

00:35:38,109 --> 00:35:42,160
production and staging environment sir

00:35:39,489 --> 00:35:44,559
we have debugging and staging info on

00:35:42,160 --> 00:35:46,440
production we were deployed to different

00:35:44,559 --> 00:35:48,640
locations Hispanic or seasoned

00:35:46,440 --> 00:35:53,499
namespaces are different and of the

00:35:48,640 --> 00:35:58,089
changes contained here let's talk

00:35:53,499 --> 00:35:59,380
briefly about the mental model 81 so

00:35:58,089 --> 00:36:00,999
like andrew saying it's really the

00:35:59,380 --> 00:36:02,950
Africa that's crowding the appointment

00:36:00,999 --> 00:36:03,400
this is the thing that has your source

00:36:02,950 --> 00:36:06,160
code

00:36:03,400 --> 00:36:07,180
it has your potential your manifests or

00:36:06,160 --> 00:36:09,219
your template start where you're storing

00:36:07,180 --> 00:36:11,109
those and it's the environment repo

00:36:09,219 --> 00:36:14,589
that's snapshotting the clusters date

00:36:11,109 --> 00:36:16,809
the little analogy here is source code

00:36:14,589 --> 00:36:19,029
github is the build docker image in the

00:36:16,809 --> 00:36:20,380
registry in the same way that the

00:36:19,029 --> 00:36:22,390
template in a crate but that you have

00:36:20,380 --> 00:36:25,089
stored is the manifest in your

00:36:22,390 --> 00:36:26,559
environment Rico the environment Rico

00:36:25,089 --> 00:36:29,349
really is just a checkpoint on your

00:36:26,559 --> 00:36:30,640
cluster can and will involve all the

00:36:29,349 --> 00:36:34,329
changes in a couple of different ways

00:36:30,640 --> 00:36:35,710
the most obvious one is you have proven

00:36:34,329 --> 00:36:37,869
IDs always applying changes link submit

00:36:35,710 --> 00:36:39,369
manifests so for example if you have

00:36:37,869 --> 00:36:41,349
this queue enabled and you deploy

00:36:39,369 --> 00:36:42,789
something you will immediately get a

00:36:41,349 --> 00:36:43,440
sidecar attached to that there's always

00:36:42,789 --> 00:36:46,530
changes

00:36:43,440 --> 00:36:48,480
a factory that easy the other one is he

00:36:46,530 --> 00:36:50,250
have a multi-stage rollout that's being

00:36:48,480 --> 00:36:52,280
orchestrated by something that's not

00:36:50,250 --> 00:36:54,030
kubernetes you're gonna have multiple

00:36:52,280 --> 00:36:55,860
intermediate states that have to be

00:36:54,030 --> 00:36:57,810
captured somehow in that environment

00:36:55,860 --> 00:36:59,070
Rico so for example will you deploy a

00:36:57,810 --> 00:37:01,020
canary when that Canaries that are

00:36:59,070 --> 00:37:03,770
briefly collecting traffic that might

00:37:01,020 --> 00:37:05,520
show up in your environment Rico

00:37:03,770 --> 00:37:07,640
similarly and it's something that you

00:37:05,520 --> 00:37:10,530
have to ask yourself questions about is

00:37:07,640 --> 00:37:12,390
rollback and the environment restore

00:37:10,530 --> 00:37:15,810
really doesn't have like a silver bullet

00:37:12,390 --> 00:37:16,950
so to speak it's very possible that your

00:37:15,810 --> 00:37:20,820
repellant success metric isn't

00:37:16,950 --> 00:37:23,040
successful and when you go to roll back

00:37:20,820 --> 00:37:27,600
some things can still go wrong the last

00:37:23,040 --> 00:37:28,860
thing we we point out here is something

00:37:27,600 --> 00:37:30,900
that's kind of tricky for spinnaker and

00:37:28,860 --> 00:37:33,510
tools like it which is where if you're

00:37:30,900 --> 00:37:36,150
always submitting a subset of your

00:37:33,510 --> 00:37:38,910
manifests it's not always clear to the

00:37:36,150 --> 00:37:40,200
tool if a manifest was deleted or if

00:37:38,910 --> 00:37:43,050
you're simply not making the change to

00:37:40,200 --> 00:37:44,880
it and money gets deployed that's not

00:37:43,050 --> 00:37:46,410
necessarily a problem but when you go to

00:37:44,880 --> 00:37:47,670
restore and you've actually deleted

00:37:46,410 --> 00:37:50,610
something about the tool in that renew

00:37:47,670 --> 00:37:51,840
to delete it in the first place only

00:37:50,610 --> 00:37:54,800
when you go to restore is that thing

00:37:51,840 --> 00:37:54,800
actually show this program

00:37:57,619 --> 00:38:03,410
okay so again like andrew is saying you

00:38:02,039 --> 00:38:06,029
do want to build some level of

00:38:03,410 --> 00:38:09,059
abstraction on top of your hades the big

00:38:06,029 --> 00:38:10,289
question is really how much do you need

00:38:09,059 --> 00:38:11,609
to extract and if you build an

00:38:10,289 --> 00:38:13,079
abstraction

00:38:11,609 --> 00:38:14,400
what does that look like is it a

00:38:13,079 --> 00:38:16,710
template is it something like a help

00:38:14,400 --> 00:38:18,359
chart is it a CR D which is like

00:38:16,710 --> 00:38:19,890
first-class or whether the first-class

00:38:18,359 --> 00:38:21,839
way to build their party extensions of

00:38:19,890 --> 00:38:23,520
your Vanetta B's or is it an in the

00:38:21,839 --> 00:38:25,770
automation flow which is something that

00:38:23,520 --> 00:38:28,020
the spinnaker would be one provider

00:38:25,770 --> 00:38:30,180
relied on great heavily if you do two

00:38:28,020 --> 00:38:32,670
templating there's two general

00:38:30,180 --> 00:38:33,900
approaches that we see the first one is

00:38:32,670 --> 00:38:36,750
like a token replacement which is

00:38:33,900 --> 00:38:40,049
helmand the the ghost substitution or do

00:38:36,750 --> 00:38:43,440
you use over on its meaning do you have

00:38:40,049 --> 00:38:45,210
a template they submit and they even

00:38:43,440 --> 00:38:48,359
have a series of paths and values that

00:38:45,210 --> 00:38:50,250
you've overwrite in there again and it's

00:38:48,359 --> 00:38:51,779
something we were leading to earlier if

00:38:50,250 --> 00:38:53,339
you do have this environment repo when

00:38:51,779 --> 00:38:55,559
you actually published it is it after

00:38:53,339 --> 00:38:57,210
urban Eddie says everything's okay is it

00:38:55,559 --> 00:38:58,470
after you've done a very long rollout

00:38:57,210 --> 00:39:00,569
and everything looks good

00:38:58,470 --> 00:39:01,829
do you have canary that's gating these

00:39:00,569 --> 00:39:03,630
publishers to the environment repo

00:39:01,829 --> 00:39:05,490
there's a number of ways to do this and

00:39:03,630 --> 00:39:09,119
it's really up to you to structure when

00:39:05,490 --> 00:39:12,180
and where to publish to the that repo

00:39:09,119 --> 00:39:14,579
next question so how do you actually

00:39:12,180 --> 00:39:16,500
structured repos that you publish to if

00:39:14,579 --> 00:39:19,109
you go and try and implement the very

00:39:16,500 --> 00:39:20,849
vanilla hop style approach you'll

00:39:19,109 --> 00:39:22,200
realize quickly that it can be kind of

00:39:20,849 --> 00:39:24,990
painful and get to that would be access

00:39:22,200 --> 00:39:26,670
controller provides to make sure that

00:39:24,990 --> 00:39:29,700
only certain users can read from certain

00:39:26,670 --> 00:39:32,460
environments in certain branches in this

00:39:29,700 --> 00:39:33,750
case it's actually many times easier to

00:39:32,460 --> 00:39:35,220
use something like a blobster for the

00:39:33,750 --> 00:39:37,500
environment repo but that's something

00:39:35,220 --> 00:39:42,720
you have to ask yourself the last thing

00:39:37,500 --> 00:39:44,309
we point out here is we often see people

00:39:42,720 --> 00:39:46,040
turn towards help they're templating

00:39:44,309 --> 00:39:48,770
helm as a tool

00:39:46,040 --> 00:39:50,390
was really built for distributing sense

00:39:48,770 --> 00:39:52,970
of manifest it's not necessarily made

00:39:50,390 --> 00:39:54,860
for deploying changes over and over

00:39:52,970 --> 00:39:58,190
again who said of manifest they are

00:39:54,860 --> 00:39:59,570
continually developing against but again

00:39:58,190 --> 00:40:01,310
the templating in helmet is very

00:39:59,570 --> 00:40:05,330
powerful and that's why we supported the

00:40:01,310 --> 00:40:07,460
spinnaker in the first place so just to

00:40:05,330 --> 00:40:09,080
recap to figure out what your storage

00:40:07,460 --> 00:40:11,960
application is for that entry poke do

00:40:09,080 --> 00:40:13,820
you use GCS bucket with folder with

00:40:11,960 --> 00:40:15,520
folders do you use a bunch of getting

00:40:13,820 --> 00:40:20,060
every bit of the branches or with

00:40:15,520 --> 00:40:22,430
different orgs or repositories once you

00:40:20,060 --> 00:40:23,780
know how you start crank that figure out

00:40:22,430 --> 00:40:25,460
what's the kind of abstraction that you

00:40:23,780 --> 00:40:28,010
want to expose your developers to are

00:40:25,460 --> 00:40:30,710
they overriding things in templates are

00:40:28,010 --> 00:40:32,240
they writing out Ciara these by hand or

00:40:30,710 --> 00:40:33,530
are they relying on their automation

00:40:32,240 --> 00:40:37,130
tool to provide that abstraction for

00:40:33,530 --> 00:40:39,020
them here and obviously the spanker plug

00:40:37,130 --> 00:40:41,090
is choose the flexible automation tool

00:40:39,020 --> 00:40:42,470
for your business practice it's

00:40:41,090 --> 00:40:45,200
something that provides you with the

00:40:42,470 --> 00:40:46,610
deployment needs that we have and then

00:40:45,200 --> 00:40:49,040
going back to what we're saying earlier

00:40:46,610 --> 00:40:50,480
is figure out when and where you can

00:40:49,040 --> 00:40:53,120
actually have a successful deployment

00:40:50,480 --> 00:40:54,980
the Egan's store and snapshot and

00:40:53,120 --> 00:40:58,220
restore to layer when you publish about

00:40:54,980 --> 00:41:01,670
the environment repo we showcase for

00:40:58,220 --> 00:41:03,110
processes these aren't all necessary if

00:41:01,670 --> 00:41:08,120
you have a very simple application that

00:41:03,110 --> 00:41:09,920
a CI CD building validate deploy staging

00:41:08,120 --> 00:41:11,720
equate production sometimes all you need

00:41:09,920 --> 00:41:14,690
but as your needs for a more complex

00:41:11,720 --> 00:41:17,650
it's good to have and understand how

00:41:14,690 --> 00:41:21,920
these work so you can go meant easier so

00:41:17,650 --> 00:41:23,720
that's it I would if you want to

00:41:21,920 --> 00:41:27,110
actually try this out soon the code

00:41:23,720 --> 00:41:28,640
we're showing here it's all in a big

00:41:27,110 --> 00:41:29,720
target we can send it to you you can

00:41:28,640 --> 00:41:30,260
play with it play with the spinnaker

00:41:29,720 --> 00:41:33,180
pipelines

00:41:30,260 --> 00:41:36,089
it sends for how they work

00:41:33,180 --> 00:41:37,410
famous for a sample we have a safety net

00:41:36,089 --> 00:41:40,170
ease channel on slag which is pretty

00:41:37,410 --> 00:41:41,430
active and talks more about how to use

00:41:40,170 --> 00:41:43,470
the group names provider rather than

00:41:41,430 --> 00:41:45,720
asking more of the setup related

00:41:43,470 --> 00:41:47,490
questions we have a spanker kubernetes

00:41:45,720 --> 00:41:48,960
think that talks about these things were

00:41:47,490 --> 00:41:50,190
meeting tomorrow during the recruitment

00:41:48,960 --> 00:41:52,549
annex office hours today that's

00:41:50,190 --> 00:41:55,500
interested and then finally if you want

00:41:52,549 --> 00:41:58,039
suggest new spanker features that would

00:41:55,500 --> 00:41:58,039

YouTube URL: https://www.youtube.com/watch?v=hXrFYs3v-hw


