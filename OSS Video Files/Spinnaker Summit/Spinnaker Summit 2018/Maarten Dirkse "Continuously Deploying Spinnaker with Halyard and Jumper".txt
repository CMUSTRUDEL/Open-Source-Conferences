Title: Maarten Dirkse "Continuously Deploying Spinnaker with Halyard and Jumper"
Publication date: 2018-10-24
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,270 --> 00:00:05,380
[Music]

00:00:09,820 --> 00:00:13,259
[Music]

00:00:17,190 --> 00:00:21,180
thanks for coming my name is Martin

00:00:19,380 --> 00:00:23,550
diksa I'm gonna be talking about a

00:00:21,180 --> 00:00:27,510
service we wrote in the house to manage

00:00:23,550 --> 00:00:28,730
a spinnaker called jumper so let's get

00:00:27,510 --> 00:00:30,599
started

00:00:28,730 --> 00:00:31,800
that's what I'm talking about today

00:00:30,599 --> 00:00:34,050
first I'll tell you but a little bit

00:00:31,800 --> 00:00:35,910
about bullet calm my employer and myself

00:00:34,050 --> 00:00:39,660
then I'll tell you a bit about how we

00:00:35,910 --> 00:00:42,870
got to be using spinnaker and the

00:00:39,660 --> 00:00:46,230
kubernetes setup that we have and then

00:00:42,870 --> 00:00:48,539
why we needed jumper and then we'll have

00:00:46,230 --> 00:00:51,570
a short demo and I'll tell you a bit

00:00:48,539 --> 00:00:54,600
about next steps and some some findings

00:00:51,570 --> 00:00:57,539
that we we had while running it so let's

00:00:54,600 --> 00:01:00,120
get started about my company

00:00:57,539 --> 00:01:02,460
Bullock um is the more or less the Dutch

00:01:00,120 --> 00:01:03,780
Amazon without the AWS part we're the

00:01:02,460 --> 00:01:05,909
largest online retailer in the

00:01:03,780 --> 00:01:09,659
Netherlands and the dutch-speaking part

00:01:05,909 --> 00:01:11,729
of belgium we have 8 million customers

00:01:09,659 --> 00:01:15,630
and close to a million 18 million

00:01:11,729 --> 00:01:19,350
products at them and Counting and our IT

00:01:15,630 --> 00:01:21,210
organization is 400 plus engineers 350

00:01:19,350 --> 00:01:21,540
plus applications and about 60 scrum

00:01:21,210 --> 00:01:26,509
teams

00:01:21,540 --> 00:01:29,340
fun fact when I the IT organization now

00:01:26,509 --> 00:01:32,009
as a as a part of the company as a whole

00:01:29,340 --> 00:01:33,570
is just as big as the company in this

00:01:32,009 --> 00:01:37,650
entirety was when I joined six years ago

00:01:33,570 --> 00:01:42,270
so we're growing pretty fast and about

00:01:37,650 --> 00:01:45,329
me you can find me on Twitter I'm I work

00:01:42,270 --> 00:01:47,729
at ball as a cloud advocate means I make

00:01:45,329 --> 00:01:49,200
people inside the company enthusiastic

00:01:47,729 --> 00:01:51,509
about our transition to the Google cloud

00:01:49,200 --> 00:01:53,670
and I make people outside the company

00:01:51,509 --> 00:01:57,149
enthusiastic about what we're doing

00:01:53,670 --> 00:01:59,460
during that transition I started out as

00:01:57,149 --> 00:02:01,680
a Java developer and spent a fair few

00:01:59,460 --> 00:02:04,979
years working on the CI cd2 inside the

00:02:01,680 --> 00:02:09,989
company so I have a special fondness for

00:02:04,979 --> 00:02:11,129
CI CD and for containers and finally I'm

00:02:09,989 --> 00:02:13,110
a football enthusiast

00:02:11,129 --> 00:02:14,730
and the real football in case I name

00:02:13,110 --> 00:02:17,310
our consider were wondering which one I

00:02:14,730 --> 00:02:21,690
was talking about sorry I had to get

00:02:17,310 --> 00:02:24,720
that dig in so how did we get to use

00:02:21,690 --> 00:02:28,770
spinnaker well it all started during May

00:02:24,720 --> 00:02:30,840
so scone in 2016 Amsterdam of all places

00:02:28,770 --> 00:02:32,250
where I attended a talk called the

00:02:30,840 --> 00:02:34,230
evolution of deploy tooling at Twitter

00:02:32,250 --> 00:02:36,540
by Twitter engineer called David

00:02:34,230 --> 00:02:39,000
mcLaughlin it was a really interesting

00:02:36,540 --> 00:02:41,310
talk he spoke about internal tooling

00:02:39,000 --> 00:02:42,950
that they were using to to do all kinds

00:02:41,310 --> 00:02:45,660
of different deployment techniques and

00:02:42,950 --> 00:02:47,550
it just sounded it sounded great so at

00:02:45,660 --> 00:02:49,290
the end of the talk I was pretty excited

00:02:47,550 --> 00:02:50,459
and so were a lot of other people in the

00:02:49,290 --> 00:02:52,860
room and someone raised her hand and

00:02:50,459 --> 00:02:54,390
asked well David this sounds awesome

00:02:52,860 --> 00:02:58,140
when are you gonna open source this tool

00:02:54,390 --> 00:03:00,209
and he said well we won't for various

00:02:58,140 --> 00:03:02,400
reasons but if you want to if you want

00:03:00,209 --> 00:03:04,440
to have access something that does more

00:03:02,400 --> 00:03:05,700
or less the same thing right now there

00:03:04,440 --> 00:03:09,660
is a tool called spinnaker out there

00:03:05,700 --> 00:03:11,100
which you can use so I thought great we

00:03:09,660 --> 00:03:13,530
can we can start using spinnaker but at

00:03:11,100 --> 00:03:15,540
the time we were running or and we still

00:03:13,530 --> 00:03:18,239
are to a large degree running in our own

00:03:15,540 --> 00:03:21,510
data center we have most raps rather

00:03:18,239 --> 00:03:23,459
than VMware virtual machines at a

00:03:21,510 --> 00:03:26,549
platform which is not really targeted by

00:03:23,459 --> 00:03:30,150
by spinnaker so at the time it wasn't

00:03:26,549 --> 00:03:32,160
really an option to start using it so

00:03:30,150 --> 00:03:33,510
the the stack so I call this occurrence

00:03:32,160 --> 00:03:35,220
I got the current second or data centers

00:03:33,510 --> 00:03:36,930
we have Jenkins that does the builds

00:03:35,220 --> 00:03:38,190
artifactory that stores the artifacts

00:03:36,930 --> 00:03:39,390
and then we have run deck and puppet

00:03:38,190 --> 00:03:41,160
which actually you're responsible for

00:03:39,390 --> 00:03:44,040
getting those artifacts out to the

00:03:41,160 --> 00:03:47,900
virtual machines and making sure that

00:03:44,040 --> 00:03:51,840
the software runs as it should and then

00:03:47,900 --> 00:03:54,090
during the the summer of 2017 so last

00:03:51,840 --> 00:03:56,489
year we decided as a company that we're

00:03:54,090 --> 00:03:58,860
going to move to the cloud to the Google

00:03:56,489 --> 00:04:00,239
thought to be precise and so this gave

00:03:58,860 --> 00:04:02,880
us an opportunity to kind of re-evaluate

00:04:00,239 --> 00:04:06,180
the stack and see if if we could do

00:04:02,880 --> 00:04:08,430
better in the in the sort of cloud

00:04:06,180 --> 00:04:10,430
native world that we are going to so

00:04:08,430 --> 00:04:13,590
there's a bunch of drawbacks with this

00:04:10,430 --> 00:04:15,870
Jenkins had become maintenance nightmare

00:04:13,590 --> 00:04:17,280
for us we really didn't want to be

00:04:15,870 --> 00:04:18,870
running it anymore we wanted to move to

00:04:17,280 --> 00:04:21,930
something like the Travis CI model where

00:04:18,870 --> 00:04:23,370
users just organize their CI themselves

00:04:21,930 --> 00:04:24,390
and and don't really come bother the

00:04:23,370 --> 00:04:28,010
team that's running the tool because

00:04:24,390 --> 00:04:28,010
they can do everything by themselves

00:04:28,110 --> 00:04:31,180
artifactory we were we knew we were

00:04:30,129 --> 00:04:32,949
going to go to the cloud and base

00:04:31,180 --> 00:04:35,050
everything on gke on kubernetes

00:04:32,949 --> 00:04:36,639
artifactory isn't really a great docker

00:04:35,050 --> 00:04:40,389
registry I mean it works as a docker

00:04:36,639 --> 00:04:41,800
registry but it's you have to arrange

00:04:40,389 --> 00:04:43,479
your own storage and there's not all

00:04:41,800 --> 00:04:45,960
these fancy integrations that you get

00:04:43,479 --> 00:04:48,460
with other daca registries like GC are

00:04:45,960 --> 00:04:51,340
we used to run deck to do orchestration

00:04:48,460 --> 00:04:52,740
of rpm builds running is not a

00:04:51,340 --> 00:04:54,729
deployment tool run Nick as a

00:04:52,740 --> 00:04:55,780
more-or-less a distributed the script

00:04:54,729 --> 00:04:57,400
Runner

00:04:55,780 --> 00:04:59,379
so that was an ideally there and then

00:04:57,400 --> 00:05:01,810
finally we use puppets actually roll out

00:04:59,379 --> 00:05:03,250
the stuff on the VMS and obviously that

00:05:01,810 --> 00:05:04,599
is not immutable infrastructure and

00:05:03,250 --> 00:05:08,439
immutable infrastructure was something

00:05:04,599 --> 00:05:11,169
that we wanted so the team that I was on

00:05:08,439 --> 00:05:13,000
the CI CD team said about sort of

00:05:11,169 --> 00:05:16,120
figuring out what the new stack should

00:05:13,000 --> 00:05:18,789
be and this is what we settled on we use

00:05:16,120 --> 00:05:21,250
Gil app CI 2 to build software and built

00:05:18,789 --> 00:05:25,979
docker images and the nice thing about

00:05:21,250 --> 00:05:28,689
Gila FCI is that it is has completely

00:05:25,979 --> 00:05:30,580
it's completely self-service in terms of

00:05:28,689 --> 00:05:33,490
what users can do in their pipelines so

00:05:30,580 --> 00:05:35,919
more developer control and less dpi

00:05:33,490 --> 00:05:39,729
maintenance dpi is the team that does

00:05:35,919 --> 00:05:41,589
maintains the CI CD infrastructure then

00:05:39,729 --> 00:05:44,379
we just Google container registry to

00:05:41,589 --> 00:05:45,580
actually store the docker images and so

00:05:44,379 --> 00:05:46,690
that's really great because Google

00:05:45,580 --> 00:05:47,919
handles all of that we don't need to

00:05:46,690 --> 00:05:49,389
worry about any of that we don't need to

00:05:47,919 --> 00:05:50,610
worry about like is our storage full

00:05:49,389 --> 00:05:54,099
because we're storing too many docker

00:05:50,610 --> 00:05:59,219
images is it up that sort of thing it's

00:05:54,099 --> 00:06:01,839
all Google's concern so and then we use

00:05:59,219 --> 00:06:03,219
spinnaker which we can finally we could

00:06:01,839 --> 00:06:06,189
finally use because we were moving to

00:06:03,219 --> 00:06:07,629
kubernetes to gke and spinnaker as you

00:06:06,189 --> 00:06:10,089
know is an actual deployment tool as

00:06:07,629 --> 00:06:11,589
opposed to Jenkins as opposed to run

00:06:10,089 --> 00:06:13,569
Nick as opposed to whatever else you

00:06:11,589 --> 00:06:14,860
might name so that's really nice to use

00:06:13,569 --> 00:06:17,789
an actual deployment tool to do your

00:06:14,860 --> 00:06:20,830
deployments and then finally kubernetes

00:06:17,789 --> 00:06:22,449
if the way the way it runs stuff

00:06:20,830 --> 00:06:25,449
facilitates the mutable infrastructure

00:06:22,449 --> 00:06:28,870
which was really great as well so that

00:06:25,449 --> 00:06:32,349
allowed us to to dive into spinnaker but

00:06:28,870 --> 00:06:35,020
we had a we had a kind of quirk in the

00:06:32,349 --> 00:06:36,819
way well quirk we had we had our own

00:06:35,020 --> 00:06:38,560
ideas about how we wanted to set up

00:06:36,819 --> 00:06:39,889
kubernetes I obviously wanted to set up

00:06:38,560 --> 00:06:42,879
gke

00:06:39,889 --> 00:06:45,740
that is what I call service

00:06:42,879 --> 00:06:46,819
compartmentalization should have

00:06:45,740 --> 00:06:50,029
practiced at a few times for the

00:06:46,819 --> 00:06:52,669
presentation probably or I shouldn't

00:06:50,029 --> 00:06:55,460
just make up terms so service

00:06:52,669 --> 00:06:56,779
compartment compartmentalization I'm

00:06:55,460 --> 00:07:00,110
gonna get that right sometime in the

00:06:56,779 --> 00:07:03,680
next half-hour essentially what we want

00:07:00,110 --> 00:07:06,469
to do is what we wanted to do is make

00:07:03,680 --> 00:07:09,860
sure that every service runs in its own

00:07:06,469 --> 00:07:12,199
namespace in kubernetes and we want to

00:07:09,860 --> 00:07:16,969
do this because it facilitates isolation

00:07:12,199 --> 00:07:18,139
it facilitates all kinds of benefits

00:07:16,969 --> 00:07:20,029
that you get from making sure that

00:07:18,139 --> 00:07:21,620
services can't step on each other's toes

00:07:20,029 --> 00:07:24,979
because of the namespace limits that you

00:07:21,620 --> 00:07:28,189
impose and it also facilitates a

00:07:24,979 --> 00:07:30,110
security model whereby teams can deploy

00:07:28,189 --> 00:07:31,939
to the namespaces of the apps that they

00:07:30,110 --> 00:07:34,159
own but they can't deploy to namespaces

00:07:31,939 --> 00:07:37,699
of other apps and so this is in contrast

00:07:34,159 --> 00:07:39,919
to what you often hear about as a as a

00:07:37,699 --> 00:07:42,229
model where you have a gke instance or a

00:07:39,919 --> 00:07:43,909
kubernetes instance where you have one

00:07:42,229 --> 00:07:46,460
big namespace for production for

00:07:43,909 --> 00:07:49,969
instance or one big namespace for the

00:07:46,460 --> 00:07:52,939
for a team or our other other kinds of

00:07:49,969 --> 00:07:54,620
cross-cutting ways to to manage your

00:07:52,939 --> 00:07:57,020
namespaces which aren't down to the

00:07:54,620 --> 00:07:58,969
service level so we wanted to really

00:07:57,020 --> 00:08:00,710
isolate everything to make sure that if

00:07:58,969 --> 00:08:03,319
anything goes wrong the blast radius is

00:08:00,710 --> 00:08:04,909
really limited and you know if any

00:08:03,319 --> 00:08:07,189
accounts are compromised and you can

00:08:04,909 --> 00:08:09,139
only access the one namespace etc etc so

00:08:07,189 --> 00:08:10,969
we wanted we wanted to chop up our

00:08:09,139 --> 00:08:16,339
kubernetes namespace according to

00:08:10,969 --> 00:08:18,439
services so the way we do this is we

00:08:16,339 --> 00:08:21,409
have a homegrown management tool which

00:08:18,439 --> 00:08:23,120
is a layer across basically puppet and

00:08:21,409 --> 00:08:25,629
terraform which actually goes out in

00:08:23,120 --> 00:08:28,819
provision stuff for us and in this case

00:08:25,629 --> 00:08:32,269
gke Nate or kubernetes names places

00:08:28,819 --> 00:08:34,250
within gke we have different kubernetes

00:08:32,269 --> 00:08:36,229
clusters for staging and production so

00:08:34,250 --> 00:08:38,380
every application has a namespace inside

00:08:36,229 --> 00:08:40,279
the staging and the production cluster

00:08:38,380 --> 00:08:42,320
we didn't want to use any godmode

00:08:40,279 --> 00:08:43,669
accounts so we didn't want to have all

00:08:42,320 --> 00:08:44,690
these namespaces with and still have

00:08:43,669 --> 00:08:46,820
these service accounts that can

00:08:44,690 --> 00:08:48,740
basically deploy anywhere we wanted to

00:08:46,820 --> 00:08:51,680
keep that restricted as well to the

00:08:48,740 --> 00:08:53,630
services and so we have the namespace

00:08:51,680 --> 00:08:55,880
and the GCR we repo

00:08:53,630 --> 00:08:58,910
which is also relevant for the spinnaker

00:08:55,880 --> 00:09:00,410
use case for application per cluster so

00:08:58,910 --> 00:09:02,570
like I said isolation resource

00:09:00,410 --> 00:09:03,950
management billing limited breast blast

00:09:02,570 --> 00:09:05,420
radius all these all this stuff is

00:09:03,950 --> 00:09:08,210
facilitated by the fact that we chop it

00:09:05,420 --> 00:09:10,340
up by service and the other important

00:09:08,210 --> 00:09:13,670
point is that everything should be self

00:09:10,340 --> 00:09:15,380
service so we like to joke on the on the

00:09:13,670 --> 00:09:17,360
CI CD team that we really don't want to

00:09:15,380 --> 00:09:19,150
talk to our users and if we're doing our

00:09:17,360 --> 00:09:21,200
job right then we we don't have to

00:09:19,150 --> 00:09:23,840
because I can arrange for everything

00:09:21,200 --> 00:09:25,160
themselves and they don't need us to do

00:09:23,840 --> 00:09:27,410
anything for them that's the ideal

00:09:25,160 --> 00:09:28,250
situation so everything should team

00:09:27,410 --> 00:09:29,450
should be able to do everything

00:09:28,250 --> 00:09:33,980
themselves they shouldn't need to come

00:09:29,450 --> 00:09:35,870
to us to to you know create some custom

00:09:33,980 --> 00:09:42,100
configure or something to be able to

00:09:35,870 --> 00:09:42,100
deploy to kubernetes with spinnaker so

00:09:43,810 --> 00:09:49,850
the the setup that we have of kubernetes

00:09:46,490 --> 00:09:51,730
means that a team can create a new

00:09:49,850 --> 00:09:54,140
application using our homegrown

00:09:51,730 --> 00:09:56,630
provisioning tool which will then go out

00:09:54,140 --> 00:09:57,860
and create a namespace and then you you

00:09:56,630 --> 00:10:00,080
want to be able to deploy to that

00:09:57,860 --> 00:10:02,090
namespace using spinnaker so how do you

00:10:00,080 --> 00:10:03,220
configure access namespaces and

00:10:02,090 --> 00:10:05,720
spinnaker well you configure a

00:10:03,220 --> 00:10:08,660
kubernetes account you you have to

00:10:05,720 --> 00:10:10,310
configure a set of credentials not only

00:10:08,660 --> 00:10:12,400
for the namespace of the cluster and the

00:10:10,310 --> 00:10:14,360
namespace but also for the the GCR

00:10:12,400 --> 00:10:18,290
repository in which the docker

00:10:14,360 --> 00:10:20,780
containers live so how do you do that

00:10:18,290 --> 00:10:24,920
well the usual way to do that is to

00:10:20,780 --> 00:10:26,030
configure it in halyard but we read we

00:10:24,920 --> 00:10:27,530
didn't really want to do that we didn't

00:10:26,030 --> 00:10:31,460
want to have to like run halyard every

00:10:27,530 --> 00:10:32,570
time by hand that that user created a

00:10:31,460 --> 00:10:35,120
new native space because that wouldn't

00:10:32,570 --> 00:10:37,820
scale so at first we thought well we can

00:10:35,120 --> 00:10:39,170
just go to to gate and there must be

00:10:37,820 --> 00:10:42,770
some sort of post command for the

00:10:39,170 --> 00:10:44,570
credentials and there isn't and for

00:10:42,770 --> 00:10:46,100
those of you thinking there might be on

00:10:44,570 --> 00:10:49,070
the actual cloud driver service there

00:10:46,100 --> 00:10:51,020
isn't either I we went on the slack when

00:10:49,070 --> 00:10:53,470
we asked like can we do this using the

00:10:51,020 --> 00:10:56,570
API and the answer was basically no and

00:10:53,470 --> 00:10:58,100
making that possible so so creating a

00:10:56,570 --> 00:11:00,170
patch that would make that possible to

00:10:58,100 --> 00:11:01,730
do by API would basically entail

00:11:00,170 --> 00:11:03,650
rewriting the whole of cloud driver in

00:11:01,730 --> 00:11:06,010
some way so that wasn't really feasible

00:11:03,650 --> 00:11:06,010
either

00:11:06,930 --> 00:11:14,670
so so that wasn't gonna work and then we

00:11:12,360 --> 00:11:16,589
figured well you know you can use

00:11:14,670 --> 00:11:18,420
halyard to add those accounts and how it

00:11:16,589 --> 00:11:20,399
actually knows how to do seamless

00:11:18,420 --> 00:11:24,270
redeployments of cloud driver because it

00:11:20,399 --> 00:11:26,430
halyard uses a kind of special version

00:11:24,270 --> 00:11:28,200
of spinnaker that it deploys and then

00:11:26,430 --> 00:11:29,880
what's called the bootstrap version of

00:11:28,200 --> 00:11:32,510
spinnaker and then it uses that

00:11:29,880 --> 00:11:34,830
spinnaker to deploy the actual spinnaker

00:11:32,510 --> 00:11:37,520
using the the usual sort of zero

00:11:34,830 --> 00:11:39,959
downtime techniques at spinnaker enables

00:11:37,520 --> 00:11:41,959
so we thought well halyard can do this

00:11:39,959 --> 00:11:44,250
for us but we really don't want to be

00:11:41,959 --> 00:11:46,320
issuing those halyard commands all the

00:11:44,250 --> 00:11:49,800
time by hand we want to automate that

00:11:46,320 --> 00:11:51,959
some way and also the way that halyard

00:11:49,800 --> 00:11:52,920
is usually run at least at the time we

00:11:51,959 --> 00:11:54,420
were trying to figure this out we

00:11:52,920 --> 00:11:55,920
actually went on slack again and asked

00:11:54,420 --> 00:11:57,779
like so how do how do people usually run

00:11:55,920 --> 00:11:59,670
halyard and the answer was well they

00:11:57,779 --> 00:12:02,250
sped up a vm and you know whatever cloud

00:11:59,670 --> 00:12:04,290
provider that they use and then the

00:12:02,250 --> 00:12:07,470
halyard runs there and then actually

00:12:04,290 --> 00:12:10,500
provisions into kubernetes or versions

00:12:07,470 --> 00:12:13,140
into AWS or whatever and that was an

00:12:10,500 --> 00:12:14,400
ideal either because from the very

00:12:13,140 --> 00:12:16,350
beginning of our whole cloud migration

00:12:14,400 --> 00:12:19,980
we had decided that we wanted to run

00:12:16,350 --> 00:12:21,390
everything as containers so the the

00:12:19,980 --> 00:12:22,709
provisioning guys they were at the end

00:12:21,390 --> 00:12:24,390
they would they would repeat this mantra

00:12:22,709 --> 00:12:27,390
like everything must run in the

00:12:24,390 --> 00:12:28,770
container and then we said well we got

00:12:27,390 --> 00:12:31,110
this tool called halyard and usually

00:12:28,770 --> 00:12:32,400
people you know deploy it on a VM and

00:12:31,110 --> 00:12:33,630
then they run it from there and then

00:12:32,400 --> 00:12:35,760
they were like everything was to run as

00:12:33,630 --> 00:12:36,810
a container so we said fine we'll try to

00:12:35,760 --> 00:12:40,709
figure out if we can run it as a

00:12:36,810 --> 00:12:50,579
container and then at the same time we

00:12:40,709 --> 00:12:52,440
wanted to instrumentalism ounce in some

00:12:50,579 --> 00:12:56,100
way so that we didn't have to babysit

00:12:52,440 --> 00:12:57,480
the the tool and that teams crucially

00:12:56,100 --> 00:12:58,709
wouldn't be dependent on us doing some

00:12:57,480 --> 00:13:03,450
manual action before they could use

00:12:58,709 --> 00:13:06,720
spinnaker so we created a service called

00:13:03,450 --> 00:13:10,500
jumper and as you might expect a jumper

00:13:06,720 --> 00:13:13,529
has a nice sailing themed definition so

00:13:10,500 --> 00:13:14,970
jumping sweating the halyard jumping the

00:13:13,529 --> 00:13:16,740
halyard is a technique used to raise a

00:13:14,970 --> 00:13:18,360
large seal quickly by employing a few

00:13:16,740 --> 00:13:19,880
crew members to work simultaneously on

00:13:18,360 --> 00:13:22,010
the halyard

00:13:19,880 --> 00:13:24,650
as you may or may not know halyard is a

00:13:22,010 --> 00:13:26,390
rope used to raise a sale and spinnaker

00:13:24,650 --> 00:13:29,630
is a kind of sale so it all works quite

00:13:26,390 --> 00:13:31,250
nicely so we called the service jumper

00:13:29,630 --> 00:13:33,680
because that's what it does it uses how

00:13:31,250 --> 00:13:38,230
you're to quickly set up a stuff in

00:13:33,680 --> 00:13:43,040
spinnaker so how does it work

00:13:38,230 --> 00:13:47,390
right so let me let me walk you through

00:13:43,040 --> 00:13:49,940
this this diagram so we have r2d2 which

00:13:47,390 --> 00:13:52,550
is our internal provisioning tool that

00:13:49,940 --> 00:13:54,230
runs based on Yama files so if you want

00:13:52,550 --> 00:13:55,430
to change something about the if you

00:13:54,230 --> 00:13:56,330
want to create a project or change

00:13:55,430 --> 00:13:59,420
something about your project

00:13:56,330 --> 00:14:02,680
infrastructure you feed your your

00:13:59,420 --> 00:14:05,090
project llamó to r2d2 and it then runs

00:14:02,680 --> 00:14:06,650
and creates all the infrastructure you

00:14:05,090 --> 00:14:08,630
need like your kubernetes namespace you

00:14:06,650 --> 00:14:11,420
know buckets whatever but what it also

00:14:08,630 --> 00:14:13,610
does is it it takes the service counts

00:14:11,420 --> 00:14:17,570
which give access to the namespace and

00:14:13,610 --> 00:14:21,170
access to the to the Google container

00:14:17,570 --> 00:14:25,630
registry and puts them in a conflict map

00:14:21,170 --> 00:14:30,290
in kubernetes and then we have jumper

00:14:25,630 --> 00:14:32,270
which periodically scans these conflict

00:14:30,290 --> 00:14:34,670
maps for the entire cluster pulls them

00:14:32,270 --> 00:14:37,730
all in and uses those credentials to

00:14:34,670 --> 00:14:39,830
write out a halyard config file so we

00:14:37,730 --> 00:14:42,170
skip the CLI we don't we don't actually

00:14:39,830 --> 00:14:43,730
use the CLI to to build the comic wall

00:14:42,170 --> 00:14:48,170
we just use a template and build it

00:14:43,730 --> 00:14:51,380
directly and then when the conflict file

00:14:48,170 --> 00:14:53,450
is built we then use the CLI to to kick

00:14:51,380 --> 00:14:55,160
off the halyard daemon which then takes

00:14:53,450 --> 00:15:00,910
the config file and uses it to deploy

00:14:55,160 --> 00:15:04,610
spinnaker so the steps are the r2d2 tool

00:15:00,910 --> 00:15:06,350
uploads the credentials jumper ingests

00:15:04,610 --> 00:15:08,540
those credentials from the cluster and

00:15:06,350 --> 00:15:09,740
then feeds them to halyard essentially

00:15:08,540 --> 00:15:12,220
and how everything goes out and and

00:15:09,740 --> 00:15:17,260
configure spinnaker with the accounts

00:15:12,220 --> 00:15:17,260
that make sense right

00:15:17,669 --> 00:15:24,759
so the implementation how did we how do

00:15:21,339 --> 00:15:26,559
we go about actually doing this well the

00:15:24,759 --> 00:15:28,149
first the first thing we learned quite

00:15:26,559 --> 00:15:29,739
quickly is that you only whenever you're

00:15:28,149 --> 00:15:32,259
really playing a very small part of

00:15:29,739 --> 00:15:34,809
spinnaker a namely only cloud driver

00:15:32,259 --> 00:15:36,519
because if you want if you if you do

00:15:34,809 --> 00:15:39,819
redeploy the whole thing it can easily

00:15:36,519 --> 00:15:41,589
take up to 20 minutes and having to wait

00:15:39,819 --> 00:15:43,329
20 minutes before your account appears

00:15:41,589 --> 00:15:45,129
and before you can actually deploy stuff

00:15:43,329 --> 00:15:46,899
is not a great user experience for teams

00:15:45,129 --> 00:15:48,399
that want to you know get set up and

00:15:46,899 --> 00:15:50,709
running quickly with deploying new

00:15:48,399 --> 00:15:52,809
applications so you can actually tell

00:15:50,709 --> 00:15:54,129
heylia cho how you're totally redeploy a

00:15:52,809 --> 00:15:56,410
very small part of spinnaker cloud

00:15:54,129 --> 00:16:00,639
driver and that speeds up the process a

00:15:56,410 --> 00:16:05,350
lot 20 minutes down to three or four

00:16:00,639 --> 00:16:07,199
minutes something like that but you

00:16:05,350 --> 00:16:10,869
still want to enable a full redeploy if

00:16:07,199 --> 00:16:12,879
if you for whatever reason want to

00:16:10,869 --> 00:16:15,790
change some configuration that is not

00:16:12,879 --> 00:16:18,279
account related so what how what jumper

00:16:15,790 --> 00:16:19,419
also does is it has these config Maps

00:16:18,279 --> 00:16:20,799
for all the different account

00:16:19,419 --> 00:16:22,239
credentials but it also has a

00:16:20,799 --> 00:16:24,489
configuration map for the more general

00:16:22,239 --> 00:16:27,069
settings in spinnaker like what's what

00:16:24,489 --> 00:16:28,660
the URL of gate is what the URL of of

00:16:27,069 --> 00:16:30,100
the front-end should be all these

00:16:28,660 --> 00:16:31,839
general settings that have nothing to do

00:16:30,100 --> 00:16:33,699
with the account specifics there's a

00:16:31,839 --> 00:16:35,410
configuration map for that as well if we

00:16:33,699 --> 00:16:37,419
update that we want to be able to do a

00:16:35,410 --> 00:16:38,829
full redeploy so that those those

00:16:37,419 --> 00:16:41,379
settings are propagated to whatever

00:16:38,829 --> 00:16:44,350
services need them so we have a switch

00:16:41,379 --> 00:16:45,879
in jumper that says you know force a

00:16:44,350 --> 00:16:47,949
full redeploy just go out and get all

00:16:45,879 --> 00:16:49,600
the configuration and deploy redeploy

00:16:47,949 --> 00:16:53,739
every single spinnaker service that's

00:16:49,600 --> 00:16:56,139
out there like I said we didn't use the

00:16:53,739 --> 00:16:58,059
CLI we could have we could have written

00:16:56,139 --> 00:17:00,129
Jumper in a way that for every single

00:16:58,059 --> 00:17:03,549
account it went out and did this you

00:17:00,129 --> 00:17:05,740
know halyard ad account actual CLI

00:17:03,549 --> 00:17:10,269
command but those tend to take quite a

00:17:05,740 --> 00:17:12,100
long time and if you want to do 65 of

00:17:10,269 --> 00:17:14,199
them or in the future 100 something of

00:17:12,100 --> 00:17:16,480
them and then for two environments that

00:17:14,199 --> 00:17:18,339
would have added many minutes to the

00:17:16,480 --> 00:17:22,360
total runtime of generating the config

00:17:18,339 --> 00:17:24,130
so we didn't do that but then the

00:17:22,360 --> 00:17:26,769
problem is the halyard config file has

00:17:24,130 --> 00:17:27,129
no defined spec at least none that we

00:17:26,769 --> 00:17:29,110
know of

00:17:27,129 --> 00:17:30,100
it's kind of an implementation detail of

00:17:29,110 --> 00:17:33,190
halyard so you

00:17:30,100 --> 00:17:34,660
we have to kind of keep up with you know

00:17:33,190 --> 00:17:36,220
what the what the latest conflict file

00:17:34,660 --> 00:17:39,430
looks like and new versions of spinnaker

00:17:36,220 --> 00:17:41,620
make sure that we you know we adhere to

00:17:39,430 --> 00:17:44,440
that standard and as far as you can call

00:17:41,620 --> 00:17:49,570
it a standard so that how you can still

00:17:44,440 --> 00:17:52,060
understand what we're feeding it we get

00:17:49,570 --> 00:17:54,430
the account configuration from encrypted

00:17:52,060 --> 00:17:56,890
configuration maps so what the the

00:17:54,430 --> 00:17:59,110
deployment tool uses a public key to

00:17:56,890 --> 00:18:01,420
encrypt the information and stick it

00:17:59,110 --> 00:18:03,820
into a configuration map and then jumper

00:18:01,420 --> 00:18:07,270
has the private key which can then D

00:18:03,820 --> 00:18:08,650
encrypt so that's not really ideal at

00:18:07,270 --> 00:18:10,420
first we thought well we're gonna use

00:18:08,650 --> 00:18:11,560
kubernetes secrets because that sounds

00:18:10,420 --> 00:18:13,870
like you know that's what they're for

00:18:11,560 --> 00:18:16,300
using it using them for secrets and then

00:18:13,870 --> 00:18:17,590
turn out that you actually can't go out

00:18:16,300 --> 00:18:19,540
and scrape all the secrets from a

00:18:17,590 --> 00:18:20,800
cluster or at least when we when we

00:18:19,540 --> 00:18:22,450
first built the service that wasn't

00:18:20,800 --> 00:18:24,430
something that kubernetes supported

00:18:22,450 --> 00:18:26,440
whereas you can do that with

00:18:24,430 --> 00:18:27,730
configuration maps so you can't go out

00:18:26,440 --> 00:18:30,010
and say give me all the secrets that

00:18:27,730 --> 00:18:32,490
have label jumper for instance but you

00:18:30,010 --> 00:18:34,210
can do that with configuration maps so

00:18:32,490 --> 00:18:36,310
that was the reason we offer

00:18:34,210 --> 00:18:38,290
configuration Maps as soon as we we did

00:18:36,310 --> 00:18:40,330
that we knew we had to encrypt the the

00:18:38,290 --> 00:18:42,100
information somehow so that it wasn't

00:18:40,330 --> 00:18:44,650
sort of readily available to anybody

00:18:42,100 --> 00:18:46,480
with access to the cluster in the

00:18:44,650 --> 00:18:50,280
initial version we did polling on a kind

00:18:46,480 --> 00:18:52,030
of 3-4 minute basis if I'm not mistaken

00:18:50,280 --> 00:18:53,410
but you don't want to be really

00:18:52,030 --> 00:18:55,750
deploying when you don't have to so you

00:18:53,410 --> 00:18:57,910
you want a mechanism or we built in a

00:18:55,750 --> 00:18:59,650
mechanism that actually doesn't check

00:18:57,910 --> 00:19:01,180
some of the template and then figures

00:18:59,650 --> 00:19:05,650
out whether or not things have actually

00:19:01,180 --> 00:19:07,240
changed and to add to the polling we

00:19:05,650 --> 00:19:09,190
also listen to conflict map change

00:19:07,240 --> 00:19:11,680
events so we hook into kubernetes and

00:19:09,190 --> 00:19:13,000
listen to these events that come in when

00:19:11,680 --> 00:19:15,280
something actually changes in the config

00:19:13,000 --> 00:19:16,990
map and then when we do that we go out

00:19:15,280 --> 00:19:20,500
and we scrape the entire cluster and

00:19:16,990 --> 00:19:22,540
rebuild the the config file a couple of

00:19:20,500 --> 00:19:26,440
findings that we had while while running

00:19:22,540 --> 00:19:28,750
this stuff so first of all as Remco said

00:19:26,440 --> 00:19:30,040
the cloud a cloud driver redeployed

00:19:28,750 --> 00:19:33,100
duration can be really really

00:19:30,040 --> 00:19:35,560
unpredictable and it's kind of hard to

00:19:33,100 --> 00:19:39,390
get a handle on that because it's all

00:19:35,560 --> 00:19:42,700
sort of tucked away in the bootstrap

00:19:39,390 --> 00:19:43,789
Orca and the bootstrap cloud driver that

00:19:42,700 --> 00:19:46,100
actually do

00:19:43,789 --> 00:19:49,820
redeploy of the the real cloud drive for

00:19:46,100 --> 00:19:52,190
so to speak and it can take ten minutes

00:19:49,820 --> 00:19:54,470
it can take three minutes it can take

00:19:52,190 --> 00:19:57,769
two minutes and there's really no

00:19:54,470 --> 00:19:58,940
telling how long it'll take when you run

00:19:57,769 --> 00:20:00,919
it beforehand and it's really hard to

00:19:58,940 --> 00:20:03,440
get a handle on why there's such a huge

00:20:00,919 --> 00:20:05,359
variation and how long it takes so

00:20:03,440 --> 00:20:08,539
sometimes you know the cash updates will

00:20:05,359 --> 00:20:10,190
take longer sometimes yeah sometimes

00:20:08,539 --> 00:20:12,139
deploying will take longer sometimes

00:20:10,190 --> 00:20:13,460
startup times will be will be longer and

00:20:12,139 --> 00:20:17,779
it's really really difficult to figure

00:20:13,460 --> 00:20:19,519
out exactly why that is keeping up to

00:20:17,779 --> 00:20:22,009
date with a hired convict file format is

00:20:19,519 --> 00:20:24,229
a challenge so essentially because it's

00:20:22,009 --> 00:20:25,460
not specified anywhere or at least not

00:20:24,229 --> 00:20:27,409
that we know of

00:20:25,460 --> 00:20:28,940
besides the code you you kind of have to

00:20:27,409 --> 00:20:30,979
go out and when there's a new version of

00:20:28,940 --> 00:20:32,720
hire just sort of run some commands that

00:20:30,979 --> 00:20:34,759
you know you'll be you'll be needing and

00:20:32,720 --> 00:20:39,099
then look at the output and then update

00:20:34,759 --> 00:20:39,099
your template to to match the output

00:20:40,599 --> 00:20:45,950
yeah so I've crushed showed you the

00:20:43,399 --> 00:20:48,499
HipChat notification users really want

00:20:45,950 --> 00:20:50,149
to know that that their problem is being

00:20:48,499 --> 00:20:51,379
worked on so to speak so they can go to

00:20:50,149 --> 00:20:53,989
the channel and see like okay we're

00:20:51,379 --> 00:20:55,759
redeploying spinnaker so I just push my

00:20:53,989 --> 00:20:58,129
I just created a new account or I

00:20:55,759 --> 00:20:59,779
created a new application and the

00:20:58,129 --> 00:21:01,759
redeploy happened after that so I know

00:20:59,779 --> 00:21:03,590
that my account will be available when

00:21:01,759 --> 00:21:04,820
the redeploy is finished otherwise

00:21:03,590 --> 00:21:07,639
they're kind of in a dark and they're

00:21:04,820 --> 00:21:09,830
constantly sort of pressing f5 on

00:21:07,639 --> 00:21:14,779
spinnaker and wondering why they can't

00:21:09,830 --> 00:21:17,029
see their application and so checking if

00:21:14,779 --> 00:21:21,979
if the config actually changed can be a

00:21:17,029 --> 00:21:23,989
little bit tricky so what we do which is

00:21:21,979 --> 00:21:26,809
kind of the bare minimum is to look at

00:21:23,989 --> 00:21:28,549
the actual file that we produce and then

00:21:26,809 --> 00:21:30,889
compare that to the last version that we

00:21:28,549 --> 00:21:33,109
produced and and if there's any changes

00:21:30,889 --> 00:21:36,049
then we know they're theirs that we need

00:21:33,109 --> 00:21:38,679
to redeploy the config but because the

00:21:36,049 --> 00:21:40,909
the halyard file contains all sorts of

00:21:38,679 --> 00:21:43,820
references to the credential files

00:21:40,909 --> 00:21:46,669
themselves so the the halyard file

00:21:43,820 --> 00:21:47,779
creates essentially has a file path to

00:21:46,669 --> 00:21:49,369
the Koran show files that you need it

00:21:47,779 --> 00:21:52,399
doesn't actually contain the credentials

00:21:49,369 --> 00:21:54,320
so ideally you would go out and check

00:21:52,399 --> 00:21:56,239
all those files as well to see if any of

00:21:54,320 --> 00:21:57,059
the credential have change because they

00:21:56,239 --> 00:21:59,490
can

00:21:57,059 --> 00:22:02,490
that can happen so service accounts can

00:21:59,490 --> 00:22:04,620
sort of update their credentials and if

00:22:02,490 --> 00:22:06,960
that happens and the actual halyard file

00:22:04,620 --> 00:22:08,340
won't change but your configuration will

00:22:06,960 --> 00:22:10,740
have changed and something will break if

00:22:08,340 --> 00:22:12,749
you don't really apply so that's we're

00:22:10,740 --> 00:22:16,259
trying to figure out exactly sort of how

00:22:12,749 --> 00:22:17,580
to how to do that but there is some

00:22:16,259 --> 00:22:20,549
there are some things that we still want

00:22:17,580 --> 00:22:22,830
to want to do there notably artifact

00:22:20,549 --> 00:22:25,259
accounts so artifacts are becoming a

00:22:22,830 --> 00:22:29,480
pretty big feature of spinnaker we want

00:22:25,259 --> 00:22:32,309
to enable the whole kubernetes v2

00:22:29,480 --> 00:22:33,629
artifact workflow including the helm

00:22:32,309 --> 00:22:36,299
stuff as well and for that you need

00:22:33,629 --> 00:22:40,499
artifact accounts artifact accounts are

00:22:36,299 --> 00:22:42,029
are in no way secured so they don't they

00:22:40,499 --> 00:22:45,330
don't they are coupled to Fiat so

00:22:42,029 --> 00:22:48,029
anybody can can use them which means

00:22:45,330 --> 00:22:51,779
that we will have to create for example

00:22:48,029 --> 00:22:53,549
GCS buckets per application in which

00:22:51,779 --> 00:22:55,619
people can store their artifacts so that

00:22:53,549 --> 00:22:58,200
they can't be overwritten by other teams

00:22:55,619 --> 00:22:59,820
and we need to work that into into

00:22:58,200 --> 00:23:00,860
jumper as well so that those artifact

00:22:59,820 --> 00:23:03,090
accounts are automatically configured

00:23:00,860 --> 00:23:08,360
some people can use them without having

00:23:03,090 --> 00:23:10,289
to do any extra work and what I

00:23:08,360 --> 00:23:11,309
personally really like to do but I have

00:23:10,289 --> 00:23:13,019
to discuss this with the team that

00:23:11,309 --> 00:23:14,399
actually runs the service is to

00:23:13,019 --> 00:23:17,600
open-source this because it might be

00:23:14,399 --> 00:23:17,600
useful to other people as well

00:23:17,820 --> 00:23:19,880

YouTube URL: https://www.youtube.com/watch?v=3GMxzYVqISo


