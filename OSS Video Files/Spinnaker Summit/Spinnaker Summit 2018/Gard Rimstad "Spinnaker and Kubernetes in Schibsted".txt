Title: Gard Rimstad "Spinnaker and Kubernetes in Schibsted"
Publication date: 2018-10-24
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,270 --> 00:00:05,390
[Music]

00:00:09,780 --> 00:00:13,270
[Music]

00:00:15,949 --> 00:00:21,449
hello I'm good I'm I'm working in a

00:00:20,580 --> 00:00:25,920
company named

00:00:21,449 --> 00:00:29,340
shipstead which is a European company we

00:00:25,920 --> 00:00:32,340
have several new sites and marketplaces

00:00:29,340 --> 00:00:36,270
all across Europe and in southern

00:00:32,340 --> 00:00:38,940
America we're quite a big player in

00:00:36,270 --> 00:00:42,210
Europe especially in the Nordics in

00:00:38,940 --> 00:00:44,670
Norway and Sweden we reach more than 70%

00:00:42,210 --> 00:00:50,370
of the population on a daily basis

00:00:44,670 --> 00:00:53,160
so that's quite impressive numbers we

00:00:50,370 --> 00:00:56,250
have been we started out playing with

00:00:53,160 --> 00:01:02,219
spinnaker in 2015 and we launched it in

00:00:56,250 --> 00:01:04,680
production in 2016 we have about 300

00:01:02,219 --> 00:01:06,860
active users in spinnaker developers

00:01:04,680 --> 00:01:11,070
doing deployments and stuff like that

00:01:06,860 --> 00:01:13,560
and we are for engineers in the pipeline

00:01:11,070 --> 00:01:17,159
team at ships that and all of them are

00:01:13,560 --> 00:01:21,619
here so in this table we have the rest

00:01:17,159 --> 00:01:25,080
of the team so what's our mission our

00:01:21,619 --> 00:01:29,869
mission is to promote CD and build

00:01:25,080 --> 00:01:33,329
infrastructure to support it so it's

00:01:29,869 --> 00:01:36,180
established fact that if you have small

00:01:33,329 --> 00:01:38,579
deployment Delta's it's easier to debug

00:01:36,180 --> 00:01:40,770
errors in production and bugs in

00:01:38,579 --> 00:01:43,799
production because you can easily

00:01:40,770 --> 00:01:46,770
identify what's wrong so we want to keep

00:01:43,799 --> 00:01:49,590
the deltas as small as possible we want

00:01:46,770 --> 00:01:52,290
to give the users quick bootstrapping of

00:01:49,590 --> 00:01:56,909
their applications and quic is kind of

00:01:52,290 --> 00:02:00,149
two things it's it's it's fast and it's

00:01:56,909 --> 00:02:03,540
also kind of a quick mental exercise so

00:02:00,149 --> 00:02:06,719
shouldn't be you shouldn't be needed to

00:02:03,540 --> 00:02:10,709
read ten thousand documents in order to

00:02:06,719 --> 00:02:13,410
be able to do it quickly and we want to

00:02:10,709 --> 00:02:15,210
have a cheap maintenance so

00:02:13,410 --> 00:02:17,760
we should handle everything that can be

00:02:15,210 --> 00:02:20,340
handled centrally centrally so that all

00:02:17,760 --> 00:02:23,730
the developers don't need to care about

00:02:20,340 --> 00:02:26,960
nitty gritty details about how pipelines

00:02:23,730 --> 00:02:29,490
are created and how like how we're

00:02:26,960 --> 00:02:31,500
involving the platform they should be

00:02:29,490 --> 00:02:36,000
concerned about writing application

00:02:31,500 --> 00:02:38,330
logic so a consequence of this or a

00:02:36,000 --> 00:02:40,890
driver for this is a standardized

00:02:38,330 --> 00:02:45,240
infrastructure footprint if we want to

00:02:40,890 --> 00:02:47,330
centrally make it easier and more like a

00:02:45,240 --> 00:02:50,220
product feeling we need to have a

00:02:47,330 --> 00:02:52,140
standardized footprint from all the

00:02:50,220 --> 00:02:54,120
applications so that we can do central

00:02:52,140 --> 00:02:55,850
changes and not kind of work with

00:02:54,120 --> 00:02:58,980
unicorns all day long

00:02:55,850 --> 00:03:02,670
and we want transparency we want to be

00:02:58,980 --> 00:03:05,280
able to see who deployed with what where

00:03:02,670 --> 00:03:07,980
when oh my god

00:03:05,280 --> 00:03:11,550
and we also want to be able to navigate

00:03:07,980 --> 00:03:13,830
like from the git system or from the

00:03:11,550 --> 00:03:15,840
queue control clusters into spinnaker

00:03:13,830 --> 00:03:18,120
and the other way around so we want to

00:03:15,840 --> 00:03:20,850
be able to go like navigate from the

00:03:18,120 --> 00:03:26,940
different parts of the ecosystem and

00:03:20,850 --> 00:03:29,790
between the tools so keeping the

00:03:26,940 --> 00:03:34,080
deployed out test was possible I touched

00:03:29,790 --> 00:03:37,050
upon the the bug fixing part make it

00:03:34,080 --> 00:03:41,190
easy and fast to fix bugs but there's

00:03:37,050 --> 00:03:43,230
also a kind of very boring part which is

00:03:41,190 --> 00:03:45,750
the business side and if you're

00:03:43,230 --> 00:03:48,150
developing a feature it's mostly because

00:03:45,750 --> 00:03:50,700
you want to make the organization more

00:03:48,150 --> 00:03:53,100
efficient so you earn more money or make

00:03:50,700 --> 00:03:56,850
more money or save more money and also

00:03:53,100 --> 00:03:59,550
features that actually bring in money so

00:03:56,850 --> 00:04:03,690
if you're deploying all the time every

00:03:59,550 --> 00:04:06,450
commit and you do changes that helps the

00:04:03,690 --> 00:04:08,600
company earn more money the time from

00:04:06,450 --> 00:04:11,220
the commit being done until it's in

00:04:08,600 --> 00:04:13,260
production is a holding cost so you

00:04:11,220 --> 00:04:16,340
basically want to leverage the new

00:04:13,260 --> 00:04:19,770
development as fast as possible so

00:04:16,340 --> 00:04:22,440
that's why we believe that continuous

00:04:19,770 --> 00:04:25,630
delivery is critical to be competitive

00:04:22,440 --> 00:04:27,880
and get a lot of moment

00:04:25,630 --> 00:04:30,430
a consequence of doing this is of course

00:04:27,880 --> 00:04:33,520
small deployment Delta's which makes it

00:04:30,430 --> 00:04:38,080
easier to maintain whatever we have we

00:04:33,520 --> 00:04:40,080
measure this quite quite well because if

00:04:38,080 --> 00:04:42,880
we look at how many deployments

00:04:40,080 --> 00:04:45,160
spinnaker does in our environment in a

00:04:42,880 --> 00:04:48,700
weekly basis we see that it's roughly

00:04:45,160 --> 00:04:52,540
3,000 deployments a week four hundred

00:04:48,700 --> 00:04:54,940
out of those are to production a typical

00:04:52,540 --> 00:04:58,210
application has three environments debit

00:04:54,940 --> 00:05:00,730
pre and pro so we want to have one third

00:04:58,210 --> 00:05:04,030
of the deployments to be a production

00:05:00,730 --> 00:05:08,380
deployment but when you take 3,000 and

00:05:04,030 --> 00:05:10,060
you divide it on 400 or do some math

00:05:08,380 --> 00:05:12,670
there you see that it's not one or two

00:05:10,060 --> 00:05:15,360
three so currently we are basically

00:05:12,670 --> 00:05:17,920
roughly around one out of eight

00:05:15,360 --> 00:05:20,890
deployments goes to production and this

00:05:17,920 --> 00:05:22,960
means that one out of three commits goes

00:05:20,890 --> 00:05:24,790
out to production and ships that through

00:05:22,960 --> 00:05:26,440
a spinnaker right now this is a

00:05:24,790 --> 00:05:30,370
indicator that we think is quite

00:05:26,440 --> 00:05:32,590
interesting to measure the deployment

00:05:30,370 --> 00:05:36,720
Delta so one deployment to production

00:05:32,590 --> 00:05:44,800
ships that right now probably contains

00:05:36,720 --> 00:05:47,230
in average three commits I talked about

00:05:44,800 --> 00:05:51,640
how we want a uniform platform in order

00:05:47,230 --> 00:05:53,200
to to provide tooling and help to the

00:05:51,640 --> 00:05:55,270
developers so that they don't need to

00:05:53,200 --> 00:05:58,600
concern about all the nitty-gritty

00:05:55,270 --> 00:06:02,530
details so our current stack or golden

00:05:58,600 --> 00:06:05,470
path consists of these tools many of

00:06:02,530 --> 00:06:09,670
them are quite familiar to you guys

00:06:05,470 --> 00:06:12,760
except the guy with on the right upper

00:06:09,670 --> 00:06:16,900
right corner there so it's gate we use

00:06:12,760 --> 00:06:19,570
gate for VCS Travis for CI or factory

00:06:16,900 --> 00:06:22,720
for our tracks spinnaker for deployments

00:06:19,570 --> 00:06:26,530
we have this crazy guy on the right

00:06:22,720 --> 00:06:30,790
corner which is our past solution it's

00:06:26,530 --> 00:06:32,770
basically a layer that gives a small

00:06:30,790 --> 00:06:36,280
contract for the users to be able to

00:06:32,770 --> 00:06:38,650
deploy it to kubernetes I'm gonna touch

00:06:36,280 --> 00:06:39,370
more upon that later but here I think

00:06:38,650 --> 00:06:42,190
all of

00:06:39,370 --> 00:06:48,790
has just got one unknown here which is

00:06:42,190 --> 00:06:54,639
that Eri so what this fears it's

00:06:48,790 --> 00:06:56,800
basically a system that gives you a very

00:06:54,639 --> 00:06:58,810
small footprint against the

00:06:56,800 --> 00:07:01,720
infrastructure so it's driven by

00:06:58,810 --> 00:07:04,150
defaults and given that you're following

00:07:01,720 --> 00:07:06,340
all the defaults your manifest for

00:07:04,150 --> 00:07:10,930
deploying the application is basically a

00:07:06,340 --> 00:07:13,780
version field then then you can get your

00:07:10,930 --> 00:07:15,850
application out and and it will run but

00:07:13,780 --> 00:07:18,790
this means that your docking container

00:07:15,850 --> 00:07:21,340
starts with the port that is the default

00:07:18,790 --> 00:07:23,440
port and we the health checks are

00:07:21,340 --> 00:07:27,550
available at the default health check

00:07:23,440 --> 00:07:30,430
URL and that your Prometheus metrics are

00:07:27,550 --> 00:07:32,889
available in the default path but given

00:07:30,430 --> 00:07:34,690
that you have this we will create DNS

00:07:32,889 --> 00:07:38,380
name based on the application name and

00:07:34,690 --> 00:07:40,750
we'll scrape Prometheus and health

00:07:38,380 --> 00:07:46,389
checks will be Auto generated and

00:07:40,750 --> 00:07:48,160
everything so feos takes this the

00:07:46,389 --> 00:07:51,580
example here is a little bit more than

00:07:48,160 --> 00:07:55,810
the version field but it takes this this

00:07:51,580 --> 00:07:59,880
data then expands it into horizontal

00:07:55,810 --> 00:08:05,560
Pablo to scalers deployment objects

00:07:59,880 --> 00:08:07,450
services ingress object and deploys it

00:08:05,560 --> 00:08:09,729
for you so if you look at the red boxes

00:08:07,450 --> 00:08:13,870
there you have the input on the left

00:08:09,729 --> 00:08:16,060
side which is a little bit of data and

00:08:13,870 --> 00:08:18,520
on the right side you have the expanded

00:08:16,060 --> 00:08:22,510
and hydrated kubernetes manifest that we

00:08:18,520 --> 00:08:25,930
deploy so if you want to know more about

00:08:22,510 --> 00:08:28,810
how we do this and and how this stuff

00:08:25,930 --> 00:08:31,539
work you can reach out to any of us from

00:08:28,810 --> 00:08:34,510
shipstead after a talk or you can also

00:08:31,539 --> 00:08:38,229
go into the git repository there and

00:08:34,510 --> 00:08:40,150
have a look yeah I forgot to say in the

00:08:38,229 --> 00:08:43,620
beginning you feel free to stop me in

00:08:40,150 --> 00:08:46,620
the presentation and ask me questions

00:08:43,620 --> 00:08:46,620
okay

00:08:47,320 --> 00:08:54,160
so if you

00:08:49,880 --> 00:08:58,720
helps us have a small DSL to create

00:08:54,160 --> 00:09:02,120
create the cube Annette's objects write

00:08:58,720 --> 00:09:03,830
what you need to run this is like in the

00:09:02,120 --> 00:09:04,370
CI system you need to upload the doclet

00:09:03,830 --> 00:09:05,779
container

00:09:04,370 --> 00:09:08,720
you need to build the docker container

00:09:05,779 --> 00:09:12,279
you need to upload some pipelines as

00:09:08,720 --> 00:09:16,070
code then and the past phosphide and

00:09:12,279 --> 00:09:19,700
we've created helper methods in RCS CI

00:09:16,070 --> 00:09:23,930
system to provide all those scripts and

00:09:19,700 --> 00:09:27,070
hacks get this out and application a

00:09:23,930 --> 00:09:31,250
java application in this case has it's

00:09:27,070 --> 00:09:34,130
kind of unique Gradle command to produce

00:09:31,250 --> 00:09:35,959
the jar files you need to have in order

00:09:34,130 --> 00:09:38,029
to build the docker container and then

00:09:35,959 --> 00:09:41,330
we just run the post upload command

00:09:38,029 --> 00:09:48,740
which is taking care of all these common

00:09:41,330 --> 00:09:51,680
nitty-gritty details this is the docker

00:09:48,740 --> 00:09:55,970
example so when when when you run the

00:09:51,680 --> 00:09:57,620
pulse app load command we build the docq

00:09:55,970 --> 00:09:59,810
container based on the DR file you have

00:09:57,620 --> 00:10:03,020
in the repository and we tag it

00:09:59,810 --> 00:10:07,130
automatically so this tag is quite neat

00:10:03,020 --> 00:10:11,899
so we inject the docq registry and then

00:10:07,130 --> 00:10:13,880
we set the doctor doctor name for the

00:10:11,899 --> 00:10:19,790
container the name for the container is

00:10:13,880 --> 00:10:22,640
the full repository URL so in this case

00:10:19,790 --> 00:10:26,050
that the libre team is is the github

00:10:22,640 --> 00:10:29,630
organization and some service is the

00:10:26,050 --> 00:10:32,050
service name or application name this

00:10:29,630 --> 00:10:34,550
gives us kind of bi-directional

00:10:32,050 --> 00:10:36,970
visibility as well if we go into our

00:10:34,550 --> 00:10:41,990
doctor registry and we spend a lot of

00:10:36,970 --> 00:10:44,630
disk on one kind of doctor container

00:10:41,990 --> 00:10:46,880
it's easy to see which repository is

00:10:44,630 --> 00:10:49,339
producing these docker containers and

00:10:46,880 --> 00:10:52,550
kind of navigate back to github and find

00:10:49,339 --> 00:10:54,980
the owners and this kind of stuff we

00:10:52,550 --> 00:10:58,040
also set the doctor tag automatically

00:10:54,980 --> 00:11:00,560
it's just get Shaw and the timestamp at

00:10:58,040 --> 00:11:03,590
the end but this kind of removes the

00:11:00,560 --> 00:11:07,370
need of creating 250

00:11:03,590 --> 00:11:09,770
millions ways of making doctor tags

00:11:07,370 --> 00:11:14,180
unique and and that stuff it's just

00:11:09,770 --> 00:11:16,130
provided in the helper scripts we're

00:11:14,180 --> 00:11:19,220
kind of doing the same for our llamo

00:11:16,130 --> 00:11:21,200
files llamo files is a little bit

00:11:19,220 --> 00:11:24,110
different than doctor and maven

00:11:21,200 --> 00:11:25,880
artifacts or or jar files and this kind

00:11:24,110 --> 00:11:28,040
of stuff because you don't have the

00:11:25,880 --> 00:11:31,940
default kind of packet management tool

00:11:28,040 --> 00:11:33,410
for llamó files so what we what we saw

00:11:31,940 --> 00:11:35,240
in the early days is that when you're

00:11:33,410 --> 00:11:37,640
uploading it yeah move out to your

00:11:35,240 --> 00:11:40,520
factory or whatever store you're doing

00:11:37,640 --> 00:11:42,590
it's easy to upload it's hard to do the

00:11:40,520 --> 00:11:44,780
other handling and everything and if you

00:11:42,590 --> 00:11:49,270
do that in every repository it's kind of

00:11:44,780 --> 00:11:52,190
bloated so we our helper methods upload

00:11:49,270 --> 00:11:55,790
uploads the llamo files automatically

00:11:52,190 --> 00:11:58,850
and they're doing the about the same

00:11:55,790 --> 00:12:02,540
thing as the docker docker naming that

00:11:58,850 --> 00:12:05,810
we're doing so we're taking the path the

00:12:02,540 --> 00:12:09,440
repository organ repository project and

00:12:05,810 --> 00:12:11,750
then on that path we upload the artifact

00:12:09,440 --> 00:12:15,350
as the file name and then we add

00:12:11,750 --> 00:12:17,210
versions like we're using semantic

00:12:15,350 --> 00:12:19,850
versioning on this because it doesn't

00:12:17,210 --> 00:12:21,530
make sense with shah's and this country

00:12:19,850 --> 00:12:24,080
from the mo files so we're using the

00:12:21,530 --> 00:12:28,220
Travis build number and Travis job ID as

00:12:24,080 --> 00:12:31,360
versions so and we have the added

00:12:28,220 --> 00:12:33,890
handling and they stuff covered here

00:12:31,360 --> 00:12:36,710
that means that the developers doesn't

00:12:33,890 --> 00:12:42,530
need to care about how to get the yeah

00:12:36,710 --> 00:12:44,840
mo files uploaded it's provided then we

00:12:42,530 --> 00:12:47,300
have the declarative pipelines I talked

00:12:44,840 --> 00:12:50,900
about how we do the kubernetes objects

00:12:47,300 --> 00:12:56,210
or the past manifests and upload the

00:12:50,900 --> 00:13:01,310
files but we also yeah so so when we

00:12:56,210 --> 00:13:03,800
have the pipelines as mo we resolve them

00:13:01,310 --> 00:13:06,380
we as I said earlier a flow them as

00:13:03,800 --> 00:13:10,340
artifacts to our factory which means we

00:13:06,380 --> 00:13:12,500
are not targeting the the VCS system or

00:13:10,340 --> 00:13:14,240
pipelines that are living inside

00:13:12,500 --> 00:13:17,230
spinnaker they're living inside our

00:13:14,240 --> 00:13:20,320
factory with unique versions so

00:13:17,230 --> 00:13:22,600
we're fetching from the sea I build the

00:13:20,320 --> 00:13:24,850
information about which concrete version

00:13:22,600 --> 00:13:28,330
of the pipeline that was exploded in

00:13:24,850 --> 00:13:30,490
that bill and and they're using that to

00:13:28,330 --> 00:13:34,060
do the execution this means that when we

00:13:30,490 --> 00:13:35,770
roll back we will use the previous CI

00:13:34,060 --> 00:13:38,680
build and we'll derive the right

00:13:35,770 --> 00:13:41,020
pipeline definition from that so we can

00:13:38,680 --> 00:13:44,110
always roll back and it will be the same

00:13:41,020 --> 00:13:47,860
pipeline that is executed so we added

00:13:44,110 --> 00:13:51,490
some stuff to deck we have our own deck

00:13:47,860 --> 00:13:53,950
which is extending based on the load

00:13:51,490 --> 00:13:56,260
modules that are provided by spinnaker

00:13:53,950 --> 00:13:58,390
upstream and we have some a few

00:13:56,260 --> 00:14:01,090
modifications one of them is to create

00:13:58,390 --> 00:14:05,110
pipeline step where we can select to

00:14:01,090 --> 00:14:07,630
resolve the pipeline from the CI build

00:14:05,110 --> 00:14:11,580
and we have to put in what artifact type

00:14:07,630 --> 00:14:14,350
an artifact name it is for that pipeline

00:14:11,580 --> 00:14:19,240
we could probably skip the artifact type

00:14:14,350 --> 00:14:23,170
because that's always the same this is

00:14:19,240 --> 00:14:26,440
our pipelines s code as a user this is

00:14:23,170 --> 00:14:28,990
what you do if you have to have this

00:14:26,440 --> 00:14:31,450
file which references parent template

00:14:28,990 --> 00:14:34,390
which is provided by the pipeline team

00:14:31,450 --> 00:14:36,850
if any of you were in the talk yesterday

00:14:34,390 --> 00:14:40,080
that paid Ronnie Reagan had you you'd

00:14:36,850 --> 00:14:43,120
see more about what this parent pipeline

00:14:40,080 --> 00:14:46,000
looks like and how it works and as a

00:14:43,120 --> 00:14:48,790
user there's no problem using this it

00:14:46,000 --> 00:14:54,130
just works right so to us it's really

00:14:48,790 --> 00:14:55,840
convenient we we have basically got four

00:14:54,130 --> 00:15:00,790
unique fields here that you need to fill

00:14:55,840 --> 00:15:05,520
in which is firstly the name of the

00:15:00,790 --> 00:15:08,380
pipeline the owner which is an email and

00:15:05,520 --> 00:15:11,350
then it's the variables we need to know

00:15:08,380 --> 00:15:14,740
what team you're in and we generate

00:15:11,350 --> 00:15:17,860
kubernetes namespaces based on teams so

00:15:14,740 --> 00:15:21,850
when you put in the livery there as the

00:15:17,860 --> 00:15:24,640
team or namespace prefix you

00:15:21,850 --> 00:15:28,120
automatically get deployed to delivery

00:15:24,640 --> 00:15:30,340
dev delivery - pre and delivery - pro so

00:15:28,120 --> 00:15:30,790
so that's how we do that because there's

00:15:30,340 --> 00:15:34,290
no need

00:15:30,790 --> 00:15:37,060
to define it three times when it's

00:15:34,290 --> 00:15:40,540
always having the Deb pre and Pro

00:15:37,060 --> 00:15:44,110
surface and then we have the field for

00:15:40,540 --> 00:15:51,670
enabling or disabling the the include

00:15:44,110 --> 00:15:54,640
manual judgment and there is a lot more

00:15:51,670 --> 00:15:57,160
overrides that you can use but this is

00:15:54,640 --> 00:16:00,790
the kind of typical example of how the

00:15:57,160 --> 00:16:03,970
pipeline is Tom this pipeline expands

00:16:00,790 --> 00:16:07,270
into four stages deploys to Deb deploys

00:16:03,970 --> 00:16:11,530
to pre manual judgment and then deploy

00:16:07,270 --> 00:16:13,870
to production the deployment stages

00:16:11,530 --> 00:16:18,490
because we're using this internal to

00:16:13,870 --> 00:16:21,220
ofyours it's not a typical way of

00:16:18,490 --> 00:16:24,820
deploying in spinnaker so what we're

00:16:21,220 --> 00:16:28,660
doing is to way that we have a service

00:16:24,820 --> 00:16:31,510
called Moss mast which binds spinnaker

00:16:28,660 --> 00:16:34,620
to us and this is very funny to us

00:16:31,510 --> 00:16:36,820
because spinnaker is a sale and

00:16:34,620 --> 00:16:40,180
kubernetes is the boat and we need

00:16:36,820 --> 00:16:43,600
something that connects the sail to the

00:16:40,180 --> 00:16:46,090
boat and that this mast so this is the

00:16:43,600 --> 00:16:51,010
only kind of abstract service name that

00:16:46,090 --> 00:16:54,130
I like actually and what we we do in

00:16:51,010 --> 00:16:56,950
this generate stage is that we send in

00:16:54,130 --> 00:17:00,820
the artifact reference for the policy MO

00:16:56,950 --> 00:17:03,400
and also a lot of metadata from

00:17:00,820 --> 00:17:07,480
spinnaker like what commit triggered

00:17:03,400 --> 00:17:10,750
this pipeline what what the pipeline

00:17:07,480 --> 00:17:11,650
execution idea is this which user

00:17:10,750 --> 00:17:14,140
triggered it

00:17:11,650 --> 00:17:17,970
what CI build and all kinds of metadata

00:17:14,140 --> 00:17:20,380
that gets been binding to this

00:17:17,970 --> 00:17:29,800
kubernetes manifest that comes out of

00:17:20,380 --> 00:17:32,620
this most generate stage then we have a

00:17:29,800 --> 00:17:34,780
stage here where spinnaker uploads the

00:17:32,620 --> 00:17:37,780
manifest so we we get from the web book

00:17:34,780 --> 00:17:39,850
stage here we get a manifest ready to

00:17:37,780 --> 00:17:42,910
deploy with spinnaker and we're using

00:17:39,850 --> 00:17:45,220
the v2 provider why are we using the b2

00:17:42,910 --> 00:17:49,030
provider here might be

00:17:45,220 --> 00:17:51,429
a bit strange but spinnaker has the

00:17:49,030 --> 00:17:54,669
tracking and error handling of a

00:17:51,429 --> 00:17:57,760
floating kubernetes manifest and also it

00:17:54,669 --> 00:18:00,280
has the security parts like this team is

00:17:57,760 --> 00:18:04,000
allowed to deploy to this namespace so

00:18:00,280 --> 00:18:05,799
by doing this this must service can be

00:18:04,000 --> 00:18:08,590
very simple and just be concerned about

00:18:05,799 --> 00:18:11,440
generating the manifests well the

00:18:08,590 --> 00:18:14,740
spinnaker kubernetes integration takes

00:18:11,440 --> 00:18:17,380
care of the authorization part of this

00:18:14,740 --> 00:18:20,830
which is and also that if there's an

00:18:17,380 --> 00:18:24,730
invalid manifest generated so this this

00:18:20,830 --> 00:18:27,600
gives us value and then we have the last

00:18:24,730 --> 00:18:30,940
stage here which is also web backstage

00:18:27,600 --> 00:18:34,000
which calls the most mast service to

00:18:30,940 --> 00:18:36,669
look at the status of the deployment

00:18:34,000 --> 00:18:40,809
because the manifest we send in with

00:18:36,669 --> 00:18:43,840
spinnaker is CRD or TPR depending on the

00:18:40,809 --> 00:18:46,390
cluster and then the FIA's deployment

00:18:43,840 --> 00:18:48,789
system takes over much like Google had

00:18:46,390 --> 00:18:52,590
several kinds of deployment systems we

00:18:48,789 --> 00:18:55,450
have our own of course as well and and

00:18:52,590 --> 00:18:59,049
masts this binding spinnaker to the

00:18:55,450 --> 00:19:02,230
status of that deployment yes

00:18:59,049 --> 00:19:05,020
so I mentioned that we're injecting all

00:19:02,230 --> 00:19:09,400
kinds of annotations into the kubernetes

00:19:05,020 --> 00:19:10,780
manifests in the most stage and on the

00:19:09,400 --> 00:19:13,510
right here you can see that we have

00:19:10,780 --> 00:19:16,840
customized the spinnaker UI a little bit

00:19:13,510 --> 00:19:20,950
so we've added our own logo so if it's a

00:19:16,840 --> 00:19:22,390
fierce application we have this I don't

00:19:20,950 --> 00:19:25,059
know how to say it in English but the

00:19:22,390 --> 00:19:29,140
captain of the ship or something like

00:19:25,059 --> 00:19:31,750
that and we have a section here called

00:19:29,140 --> 00:19:34,090
fuse and here you can see that we have a

00:19:31,750 --> 00:19:37,480
deployment ID this is internal to the

00:19:34,090 --> 00:19:39,909
pass system then we have we have a

00:19:37,480 --> 00:19:43,179
pipeline it's not easy for you to read

00:19:39,909 --> 00:19:47,320
either a pipeline that's the link to the

00:19:43,179 --> 00:19:50,710
pipeline that ployed this version of the

00:19:47,320 --> 00:19:54,250
system we have a link to the commit so

00:19:50,710 --> 00:19:56,500
if you press that you go in to get and

00:19:54,250 --> 00:19:58,600
you see the commit that was deployed you

00:19:56,500 --> 00:19:59,080
have a compare URL that's where you see

00:19:58,600 --> 00:20:03,519
that

00:19:59,080 --> 00:20:06,130
commits that you asked about but that's

00:20:03,519 --> 00:20:08,019
not relevant to the previous deployment

00:20:06,130 --> 00:20:11,830
actually it's relevant to the PR or

00:20:08,019 --> 00:20:15,549
whatever that and then we have a link to

00:20:11,830 --> 00:20:16,659
the CI build reports that's called the

00:20:15,549 --> 00:20:18,850
gate are called

00:20:16,659 --> 00:20:22,600
quality measurement tool so you get a

00:20:18,850 --> 00:20:24,940
link to see how this application

00:20:22,600 --> 00:20:27,250
affected code quality know this commit

00:20:24,940 --> 00:20:30,850
affected the cold cold day and we have

00:20:27,250 --> 00:20:33,549
links to metrics and we're saying that

00:20:30,850 --> 00:20:34,059
it's permit is there but that's not very

00:20:33,549 --> 00:20:39,519
accurate

00:20:34,059 --> 00:20:41,139
it's Reforma so I'm a bit annoyed and we

00:20:39,519 --> 00:20:43,480
have links to the documentation so you

00:20:41,139 --> 00:20:46,120
see we have fewest dogs so that gives

00:20:43,480 --> 00:20:50,049
you the like pass how do I work with the

00:20:46,120 --> 00:20:52,690
past information and FAQ so our

00:20:50,049 --> 00:20:54,639
frequently asked questions and the Help

00:20:52,690 --> 00:20:56,679
Center if you want to race a ticket or

00:20:54,639 --> 00:21:04,350
you have some kind of problem you press

00:20:56,679 --> 00:21:09,669
that link so here I've just done a cube

00:21:04,350 --> 00:21:11,559
cube control and got object and I just

00:21:09,669 --> 00:21:15,250
include this to show the annotations

00:21:11,559 --> 00:21:16,779
that we're setting when I read it like

00:21:15,250 --> 00:21:20,980
this I think we can do a better job

00:21:16,779 --> 00:21:24,149
because we have the pipeline execution

00:21:20,980 --> 00:21:28,029
ID for instance but the bi-directional

00:21:24,149 --> 00:21:31,889
traceability is not so easy to do like

00:21:28,029 --> 00:21:34,450
use that ID and get back into spinnaker

00:21:31,889 --> 00:21:37,539
you need to know how spinnaker works so

00:21:34,450 --> 00:21:38,950
I think we'll have to go and change this

00:21:37,539 --> 00:21:42,190
a little bit so that you can actually

00:21:38,950 --> 00:21:46,450
get the link that you can press to go

00:21:42,190 --> 00:21:48,940
back but this is some of the data when I

00:21:46,450 --> 00:21:51,720
try to include more data it got even

00:21:48,940 --> 00:21:53,679
less readable so I just kept it here to

00:21:51,720 --> 00:21:58,179
kind of make it look good

00:21:53,679 --> 00:22:01,240
we have traced building gate so recently

00:21:58,179 --> 00:22:03,850
we we had some hackathons and all backed

00:22:01,240 --> 00:22:08,230
on my team he started playing with

00:22:03,850 --> 00:22:10,899
status check saying it eventually he

00:22:08,230 --> 00:22:12,880
created the support for this in echo and

00:22:10,899 --> 00:22:16,030
this is a condom

00:22:12,880 --> 00:22:20,640
so we can have all the stages or

00:22:16,030 --> 00:22:24,550
pipelines report status is back to get

00:22:20,640 --> 00:22:27,070
and this works just like a slack

00:22:24,550 --> 00:22:28,600
integration or the other integrations

00:22:27,070 --> 00:22:34,330
that we have for notifications in

00:22:28,600 --> 00:22:37,300
spinnaker and I love this it's because

00:22:34,330 --> 00:22:39,370
I'm a pipeline nerd probably but I think

00:22:37,300 --> 00:22:41,680
it's quite useful as well because you

00:22:39,370 --> 00:22:43,750
can looking it see what commits has been

00:22:41,680 --> 00:22:46,750
deployed to production and you can also

00:22:43,750 --> 00:22:49,240
go into the the link there the details

00:22:46,750 --> 00:22:53,380
link is a link into spinnaker so you get

00:22:49,240 --> 00:22:57,250
into that concrete execution of of your

00:22:53,380 --> 00:23:02,050
pipeline what do we currently like about

00:22:57,250 --> 00:23:04,420
our solution we like the declarative

00:23:02,050 --> 00:23:07,420
pipelines it makes it convenient for the

00:23:04,420 --> 00:23:10,210
users to create pipelines and we we've

00:23:07,420 --> 00:23:12,760
gotten a lot of feedback like it was the

00:23:10,210 --> 00:23:16,090
most requested thing to have the

00:23:12,760 --> 00:23:17,560
pipeline's iscope so that's one thing

00:23:16,090 --> 00:23:19,690
and and there has been a lot of

00:23:17,560 --> 00:23:21,640
complaints like it doesn't really feel

00:23:19,690 --> 00:23:22,060
good when your wiring at the pipeline by

00:23:21,640 --> 00:23:24,340
hand

00:23:22,060 --> 00:23:26,800
it looks very quick when I do it because

00:23:24,340 --> 00:23:28,540
I read donate ten thousand times but

00:23:26,800 --> 00:23:32,920
when the end user tries to do it and

00:23:28,540 --> 00:23:36,760
select 15 different fields in in the

00:23:32,920 --> 00:23:41,740
deployment stage kind of creates a lot

00:23:36,760 --> 00:23:46,540
of confusion this has helped a lot on

00:23:41,740 --> 00:23:48,340
that that part we also at least me

00:23:46,540 --> 00:23:49,870
personally I love the traceability I

00:23:48,340 --> 00:23:52,270
think it's super cool to be able to

00:23:49,870 --> 00:23:54,850
navigate from system to system and have

00:23:52,270 --> 00:23:57,390
this transparent though this this

00:23:54,850 --> 00:24:01,380
linking between systems everywhere and

00:23:57,390 --> 00:24:03,670
as a kind of large organization and

00:24:01,380 --> 00:24:05,590
distributed organization with many tools

00:24:03,670 --> 00:24:09,450
it's really convenient to be able to

00:24:05,590 --> 00:24:12,190
bind them together so I think I think

00:24:09,450 --> 00:24:15,940
this is something we'll focus on for a

00:24:12,190 --> 00:24:20,110
long time to kind of have the direct

00:24:15,940 --> 00:24:21,730
traffic to the various tools because

00:24:20,110 --> 00:24:26,850
it's hard to be aware of all the tools

00:24:21,730 --> 00:24:26,850
that is available in a in organization

00:24:27,330 --> 00:24:35,530
another thing that we really like is the

00:24:30,340 --> 00:24:38,260
kubernetes b2 provider it has been a

00:24:35,530 --> 00:24:42,280
pain to take the kubernetes journey

00:24:38,260 --> 00:24:44,860
prior to having that provider we got a

00:24:42,280 --> 00:24:46,960
lot of kickback on the kubernetes

00:24:44,860 --> 00:24:51,340
deployments using the BB bomb provider

00:24:46,960 --> 00:24:53,920
and I didn't trust it like I knew that

00:24:51,340 --> 00:24:55,870
we would have many cabinets clusters at

00:24:53,920 --> 00:24:58,180
different versions and I didn't believe

00:24:55,870 --> 00:25:00,280
that the v1 provided with a job our

00:24:58,180 --> 00:25:02,620
library handling the integration could

00:25:00,280 --> 00:25:04,480
support all of these but with the b2

00:25:02,620 --> 00:25:08,800
provider I'm not afraid at all I can

00:25:04,480 --> 00:25:12,130
sleep well at night because Jesus cubed

00:25:08,800 --> 00:25:14,410
control and when aks came out we were

00:25:12,130 --> 00:25:17,710
able to just set up a vanilla cube

00:25:14,410 --> 00:25:22,390
config file and make spinnaker index and

00:25:17,710 --> 00:25:25,960
work against the AKS twister so I think

00:25:22,390 --> 00:25:28,660
I think that's a really great thing that

00:25:25,960 --> 00:25:31,180
has come out recently and also

00:25:28,660 --> 00:25:33,690
leveraging the authorization part is

00:25:31,180 --> 00:25:39,400
really good because I know it's kind of

00:25:33,690 --> 00:25:45,970
enterprise friendly so what do we want

00:25:39,400 --> 00:25:48,910
to improve we want to improve our kind

00:25:45,970 --> 00:25:51,580
of debugging of failed deployments right

00:25:48,910 --> 00:25:56,440
now it's a big stage that just gives you

00:25:51,580 --> 00:25:59,410
a door it's red and then good luck Chuck

00:25:56,440 --> 00:26:01,720
we want to provide logs so the user can

00:25:59,410 --> 00:26:07,660
actually see what's wrong and linting

00:26:01,720 --> 00:26:10,120
and kind of proper feedback we want to

00:26:07,660 --> 00:26:13,060
include config maps to our Golden Path

00:26:10,120 --> 00:26:15,700
currently if you have a config map you

00:26:13,060 --> 00:26:17,320
need to do some manual stuff too to kind

00:26:15,700 --> 00:26:20,530
of include it in your pipeline you can

00:26:17,320 --> 00:26:22,420
hook in with pre pre stages and inject

00:26:20,530 --> 00:26:26,020
stages with declarative pipelines but

00:26:22,420 --> 00:26:28,900
it's very hard you need to be a domain

00:26:26,020 --> 00:26:34,200
expert in spinnaker to do it and we want

00:26:28,900 --> 00:26:38,290
to just make that easy for the user and

00:26:34,200 --> 00:26:39,730
we are we want to improve the automation

00:26:38,290 --> 00:26:44,260
of all the wiring we have

00:26:39,730 --> 00:26:46,630
this nice fine

00:26:44,260 --> 00:26:50,320
helper tools in CI and everything but

00:26:46,630 --> 00:26:52,360
and you have this nice UI - VAR you wrap

00:26:50,320 --> 00:26:54,310
the pipe lines in spinnaker but the user

00:26:52,360 --> 00:26:57,790
still needs to know about all these nice

00:26:54,310 --> 00:26:59,530
things and that's a problem because the

00:26:57,790 --> 00:27:02,050
user shouldn't need to care about those

00:26:59,530 --> 00:27:04,750
things so currently we are in the

00:27:02,050 --> 00:27:08,080
project where we are automating the flow

00:27:04,750 --> 00:27:11,650
from I have a repository - I have a

00:27:08,080 --> 00:27:14,110
walking skeleton running in kubernetes

00:27:11,650 --> 00:27:18,520
with with declarative pipelines and

00:27:14,110 --> 00:27:21,510
everything so at this point in time the

00:27:18,520 --> 00:27:24,280
solution works for enabling Travis

00:27:21,510 --> 00:27:27,730
quality in code called the

00:27:24,280 --> 00:27:31,120
instrumentation and the spinnaker part

00:27:27,730 --> 00:27:34,210
we have a service that automates this

00:27:31,120 --> 00:27:36,010
but we haven't still wired the glue

00:27:34,210 --> 00:27:39,430
together so that it's part of the same

00:27:36,010 --> 00:27:44,530
flow but we're finishing that as we

00:27:39,430 --> 00:27:49,480
speak and the interface for this is

00:27:44,530 --> 00:27:52,180
currently slack so then we have

00:27:49,480 --> 00:27:54,700
something called product pitches where

00:27:52,180 --> 00:27:57,730
we have to say how this will look so

00:27:54,700 --> 00:28:01,600
I've taken a screenshot from our product

00:27:57,730 --> 00:28:07,540
pitch err Pedro has requested our

00:28:01,600 --> 00:28:11,140
onboarding and this this automation kind

00:28:07,540 --> 00:28:12,280
of gives Pedro slack messages back on

00:28:11,140 --> 00:28:15,100
what's going on

00:28:12,280 --> 00:28:17,230
it creates PRS with the new files and

00:28:15,100 --> 00:28:22,420
everything you need to get things wired

00:28:17,230 --> 00:28:24,370
up and then it also wires up spinnaker

00:28:22,420 --> 00:28:26,410
and creates the application and gives

00:28:24,370 --> 00:28:29,050
you links to where your application and

00:28:26,410 --> 00:28:32,640
pipelines are in spinnaker and it also

00:28:29,050 --> 00:28:37,530
automatically merges the PRS if the PR

00:28:32,640 --> 00:28:42,370
deployment is successful so at the end

00:28:37,530 --> 00:28:45,850
you've been able to follow this trail on

00:28:42,370 --> 00:28:50,770
slack and when it's finished you get

00:28:45,850 --> 00:28:52,630
email with a report on this I think

00:28:50,770 --> 00:28:53,690
maybe it's a little bit strange that we

00:28:52,630 --> 00:28:56,540
were using slack

00:28:53,690 --> 00:28:59,320
this but chat ups is kind of big thing

00:28:56,540 --> 00:29:03,500
nowadays and a lot of people won't step

00:28:59,320 --> 00:29:06,290
but the solution we've built should like

00:29:03,500 --> 00:29:08,690
we get the email and we can create a web

00:29:06,290 --> 00:29:10,940
interface or whatever the important

00:29:08,690 --> 00:29:15,110
thing is that we are able to kind of

00:29:10,940 --> 00:29:18,680
automate this part I'm done now

00:29:15,110 --> 00:29:21,890
thank you is there if there's any

00:29:18,680 --> 00:29:24,260
questions or anything I reach me on the

00:29:21,890 --> 00:29:27,460
spinnaker slack don't ask them here no

00:29:24,260 --> 00:29:27,460
you can ask them here

00:29:27,990 --> 00:29:30,050

YouTube URL: https://www.youtube.com/watch?v=znYmjsJCSzk


