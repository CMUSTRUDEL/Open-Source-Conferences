Title: Ethan Rogers  "Application First Delivery: Why Moving Fast Requires Focused Tools"
Publication date: 2018-10-24
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,270 --> 00:00:05,380
[Music]

00:00:09,820 --> 00:00:13,259
[Music]

00:00:15,949 --> 00:00:25,170
so I guess we'll go ahead and get kicked

00:00:19,800 --> 00:00:26,789
off so as the title says my talk is

00:00:25,170 --> 00:00:28,890
about why moving fast requires focused

00:00:26,789 --> 00:00:32,940
tools if you've somehow found yourself

00:00:28,890 --> 00:00:35,430
in the wrong room this is Seattle 1 my

00:00:32,940 --> 00:00:36,989
name is Ethan Rogers so thanks for

00:00:35,430 --> 00:00:39,329
thanks for coming to hang out today I

00:00:36,989 --> 00:00:43,230
just want to take a quick second to say

00:00:39,329 --> 00:00:44,820
thanks to everyone who's here who had

00:00:43,230 --> 00:00:46,770
either joined us last year for the

00:00:44,820 --> 00:00:49,710
spinnaker summit or this is your first

00:00:46,770 --> 00:00:51,149
time the the involvement of the

00:00:49,710 --> 00:00:53,910
community like really helps out the

00:00:51,149 --> 00:00:55,530
project and you know Andy Glover says

00:00:53,910 --> 00:00:57,180
this a lot but the more innovations we

00:00:55,530 --> 00:01:00,149
get from more people who are involved

00:00:57,180 --> 00:01:02,039
the better the project gets so I just

00:01:00,149 --> 00:01:06,240
wanted to you know thank everybody for

00:01:02,039 --> 00:01:08,580
coming out so just real quick a little

00:01:06,240 --> 00:01:10,880
bit about myself my name is Ethan Rogers

00:01:08,580 --> 00:01:13,380
I'm a senior software engineer at armory

00:01:10,880 --> 00:01:15,390
I'm also a spinnaker core contributor so

00:01:13,380 --> 00:01:17,130
I've been working on the project in

00:01:15,390 --> 00:01:19,890
various aspects for the last couple

00:01:17,130 --> 00:01:22,170
years most of my focus has been around

00:01:19,890 --> 00:01:25,020
kubernetes I did a lot of work on the v1

00:01:22,170 --> 00:01:27,869
provider I've done a lot of you know

00:01:25,020 --> 00:01:29,880
kind of thinking about the v2 provider

00:01:27,869 --> 00:01:32,009
and in helping people start to adopt it

00:01:29,880 --> 00:01:33,630
so if you have any questions about about

00:01:32,009 --> 00:01:35,939
spinnaker or the kubernetes provider

00:01:33,630 --> 00:01:39,030
just come come hang out with me and it

00:01:35,939 --> 00:01:42,840
will talk you can find me on Twitter at

00:01:39,030 --> 00:01:46,520
E underscore F Rogers not Froggers and

00:01:42,840 --> 00:01:49,619
Ethan F Rogers on slack and github so

00:01:46,520 --> 00:01:51,570
yeah so let's uh let's dive in a little

00:01:49,619 --> 00:01:54,210
bit so what we're going to talk about

00:01:51,570 --> 00:01:55,350
today is just is a couple things so the

00:01:54,210 --> 00:01:58,799
first thing I want to talk about is

00:01:55,350 --> 00:02:01,049
moving fast this is a concept that I've

00:01:58,799 --> 00:02:02,490
really learned a lot about lately I've

00:02:01,049 --> 00:02:04,200
actually worked for companies we're

00:02:02,490 --> 00:02:07,110
moving fast was not a very important

00:02:04,200 --> 00:02:09,300
thing and so what I found and talking to

00:02:07,110 --> 00:02:11,250
a lot of engineers it had smaller

00:02:09,300 --> 00:02:13,690
companies companies that are moving as

00:02:11,250 --> 00:02:16,240
quickly as some other companies is that

00:02:13,690 --> 00:02:18,400
it's not really talked about so that's

00:02:16,240 --> 00:02:19,720
why I wanted to cover that and then

00:02:18,400 --> 00:02:22,270
we're going to talk about application

00:02:19,720 --> 00:02:23,830
focus tooling so this moving fast plays

00:02:22,270 --> 00:02:25,810
in Intuit

00:02:23,830 --> 00:02:27,160
the tools that you use need to be

00:02:25,810 --> 00:02:29,830
efficient they need to actually help

00:02:27,160 --> 00:02:31,300
support you in moving fast and so that's

00:02:29,830 --> 00:02:32,740
one thing that we're going to talk about

00:02:31,300 --> 00:02:34,420
then we're going to look at some

00:02:32,740 --> 00:02:37,720
different applications out there that we

00:02:34,420 --> 00:02:39,940
all use every day and and look at how

00:02:37,720 --> 00:02:41,290
these applications are actually using

00:02:39,940 --> 00:02:43,960
some of the principles that we'll talk

00:02:41,290 --> 00:02:45,550
about in the previous two points to make

00:02:43,960 --> 00:02:49,060
that a little bit better and to make

00:02:45,550 --> 00:02:51,310
your experience more efficient so like I

00:02:49,060 --> 00:02:55,000
said I just wanted to kind of give this

00:02:51,310 --> 00:02:58,000
talk to kind of promote the idea of

00:02:55,000 --> 00:03:00,520
moving fast and how and explore a little

00:02:58,000 --> 00:03:04,330
bit about how we can build that into the

00:03:00,520 --> 00:03:06,130
tools that we're building so just so I

00:03:04,330 --> 00:03:08,260
know about what you know what our

00:03:06,130 --> 00:03:10,090
audience is today how many of you would

00:03:08,260 --> 00:03:13,450
consider yourself like ops folks like

00:03:10,090 --> 00:03:16,030
infrastructure monitoring maybe even

00:03:13,450 --> 00:03:17,590
backends okay what about like

00:03:16,030 --> 00:03:19,780
application engineers people that are

00:03:17,590 --> 00:03:23,590
actually working on product that's being

00:03:19,780 --> 00:03:25,209
used by non developers okay I mean what

00:03:23,590 --> 00:03:30,040
about DevOps so you kind of play both

00:03:25,209 --> 00:03:31,930
sides of the role all right so the I

00:03:30,040 --> 00:03:35,020
think the thing about this talk is that

00:03:31,930 --> 00:03:38,830
each one of these three areas can take a

00:03:35,020 --> 00:03:40,540
lot from it so infrastructure folks can

00:03:38,830 --> 00:03:42,430
think about the tooling that they're

00:03:40,540 --> 00:03:43,920
building for infrastructure and how that

00:03:42,430 --> 00:03:45,970
affects application engineers

00:03:43,920 --> 00:03:47,410
application engineers can look at

00:03:45,970 --> 00:03:50,830
tooling that's coming out of these

00:03:47,410 --> 00:03:52,570
organizations and and say this is either

00:03:50,830 --> 00:03:55,630
making them more efficient or it's not

00:03:52,570 --> 00:03:58,060
helping me at all and so that you can

00:03:55,630 --> 00:04:00,459
kind of get a sense for what you need to

00:03:58,060 --> 00:04:02,200
do your job well and then DevOps folks

00:04:00,459 --> 00:04:05,110
really play both sides of the line so

00:04:02,200 --> 00:04:07,300
you know the the tools that you use

00:04:05,110 --> 00:04:10,540
every day you probably have a have an

00:04:07,300 --> 00:04:13,510
impact on so you can you can really look

00:04:10,540 --> 00:04:17,890
at what you're building and and start to

00:04:13,510 --> 00:04:21,100
build that into your applications so you

00:04:17,890 --> 00:04:23,830
know as an industry adopting DevOps we

00:04:21,100 --> 00:04:26,050
really see kind of a sliding scale and

00:04:23,830 --> 00:04:27,260
the reason that I wanted to see how many

00:04:26,050 --> 00:04:29,420
people considered themselves

00:04:27,260 --> 00:04:31,820
ops folks versus vs. application

00:04:29,420 --> 00:04:33,410
developers it was because I think even

00:04:31,820 --> 00:04:34,550
though we're doing small focused teams

00:04:33,410 --> 00:04:36,110
with DevOps

00:04:34,550 --> 00:04:40,610
we have people that kind of sit on both

00:04:36,110 --> 00:04:41,870
sides of the line and so the people who

00:04:40,610 --> 00:04:43,070
are doing infrastructure know the

00:04:41,870 --> 00:04:44,960
infrastructure tools and they're

00:04:43,070 --> 00:04:46,820
familiar with that but people who are

00:04:44,960 --> 00:04:49,040
actually working on applications may not

00:04:46,820 --> 00:04:51,860
be familiar with those tools so I think

00:04:49,040 --> 00:04:52,900
we need to find a common ground with the

00:04:51,860 --> 00:04:58,790
tooling that we're building

00:04:52,900 --> 00:04:59,780
so moving moving right along so the

00:04:58,790 --> 00:05:01,310
first thing I want to talk about is

00:04:59,780 --> 00:05:03,310
moving fast I wanted to define that I

00:05:01,310 --> 00:05:05,930
wanted to dig into what that looks like

00:05:03,310 --> 00:05:09,290
from kind of a development team

00:05:05,930 --> 00:05:11,360
organization perspective so this first

00:05:09,290 --> 00:05:12,830
slide here is something that you

00:05:11,360 --> 00:05:16,510
probably are all familiar with this is

00:05:12,830 --> 00:05:20,150
the software development lifecycle and

00:05:16,510 --> 00:05:21,650
it kind of defines a few stages that we

00:05:20,150 --> 00:05:26,330
go through when we're actually working

00:05:21,650 --> 00:05:28,070
on software you may kind of merge some

00:05:26,330 --> 00:05:30,350
of these stages together so one through

00:05:28,070 --> 00:05:32,360
three might be one you know entire part

00:05:30,350 --> 00:05:34,700
of the process for you four three five

00:05:32,360 --> 00:05:37,670
may be another part but this really kind

00:05:34,700 --> 00:05:40,340
of defines what we're doing every single

00:05:37,670 --> 00:05:43,130
day as we start looking at applications

00:05:40,340 --> 00:05:45,560
so the first little chunk would be

00:05:43,130 --> 00:05:47,750
planning an analysis and that's kind of

00:05:45,560 --> 00:05:49,490
one through three this is where we take

00:05:47,750 --> 00:05:51,350
requirements from users we start

00:05:49,490 --> 00:05:53,930
defining what our application looks like

00:05:51,350 --> 00:05:56,420
what our project looks like and we start

00:05:53,930 --> 00:05:59,720
really like honing in on where we're

00:05:56,420 --> 00:06:01,700
going the second part is implementation

00:05:59,720 --> 00:06:03,290
which is really captured in parts four

00:06:01,700 --> 00:06:06,350
and five so you're doing implementation

00:06:03,290 --> 00:06:09,320
testing integration and stuff like that

00:06:06,350 --> 00:06:10,520
and so that part is where we've taken

00:06:09,320 --> 00:06:13,280
the requirements and we've started

00:06:10,520 --> 00:06:14,600
building and then the last part is is

00:06:13,280 --> 00:06:15,920
maintenance

00:06:14,600 --> 00:06:18,770
it says maintenance on there but that's

00:06:15,920 --> 00:06:21,830
really getting getting feedback from

00:06:18,770 --> 00:06:23,030
users getting real data coming in to

00:06:21,830 --> 00:06:26,060
influence the product that we're

00:06:23,030 --> 00:06:28,430
actually working on so one of the goals

00:06:26,060 --> 00:06:31,700
of moving fast is we want to make this

00:06:28,430 --> 00:06:33,470
cycle as small as possible so we want to

00:06:31,700 --> 00:06:36,050
be able to get through from point one to

00:06:33,470 --> 00:06:38,120
point six as quickly as we can because

00:06:36,050 --> 00:06:39,800
the real data that we care about the

00:06:38,120 --> 00:06:40,710
data that actually helps our customers

00:06:39,800 --> 00:06:43,620
and our users

00:06:40,710 --> 00:06:45,660
is at point six and everywhere on this

00:06:43,620 --> 00:06:47,730
on this slide where we're not getting

00:06:45,660 --> 00:06:48,900
data is we're not moving fast

00:06:47,730 --> 00:06:52,590
we're not innovating and we're not

00:06:48,900 --> 00:06:55,530
capturing the value that our customers

00:06:52,590 --> 00:06:58,320
actually have so when I say moving fast

00:06:55,530 --> 00:07:00,420
what I mean is as an engineering team in

00:06:58,320 --> 00:07:02,700
everything that we do we want to have

00:07:00,420 --> 00:07:07,050
the tooling in place to help us get

00:07:02,700 --> 00:07:08,670
there so like I was saying moving fast

00:07:07,050 --> 00:07:10,290
is getting through the SDLC as quickly

00:07:08,670 --> 00:07:15,600
as possible

00:07:10,290 --> 00:07:17,370
and and I think you know smaller teams

00:07:15,600 --> 00:07:20,340
and larger teams can kind of move fast

00:07:17,370 --> 00:07:22,310
moving fast is really dependent on your

00:07:20,340 --> 00:07:25,110
organization in your size so small

00:07:22,310 --> 00:07:26,790
DevOps team sauceman focus teams maybe

00:07:25,110 --> 00:07:28,830
at a start-up can move through that

00:07:26,790 --> 00:07:30,300
process really quick because there's you

00:07:28,830 --> 00:07:32,430
know they're building a product they're

00:07:30,300 --> 00:07:34,830
iterating quickly and learning about

00:07:32,430 --> 00:07:37,170
their customer very fast compare that to

00:07:34,830 --> 00:07:42,000
an organization like in who here has

00:07:37,170 --> 00:07:43,140
read the Phoenix project alright so for

00:07:42,000 --> 00:07:46,590
those of you who aren't familiar it's

00:07:43,140 --> 00:07:48,090
about an imaginary company that uh that

00:07:46,590 --> 00:07:51,000
is having a lot of internal IT

00:07:48,090 --> 00:07:52,530
difficulties it was really kind of it's

00:07:51,000 --> 00:07:55,470
a fictional story about kind of the

00:07:52,530 --> 00:07:57,780
birth of DevOps at an organization but

00:07:55,470 --> 00:07:59,700
we can look at large organizations like

00:07:57,780 --> 00:08:01,680
this and we see teams that want to move

00:07:59,700 --> 00:08:03,990
fast but there's a lot of process and a

00:08:01,680 --> 00:08:05,040
lot of fat that needs to be trimmed away

00:08:03,990 --> 00:08:08,460
in order to make that happen

00:08:05,040 --> 00:08:10,590
so but that's not to say that only

00:08:08,460 --> 00:08:13,920
startups can move fast in that large

00:08:10,590 --> 00:08:18,150
organizations can anybody can move move

00:08:13,920 --> 00:08:20,010
quickly the goal is to make your tooling

00:08:18,150 --> 00:08:22,140
and your processes as efficient as

00:08:20,010 --> 00:08:24,420
possible to get through that and get all

00:08:22,140 --> 00:08:26,370
the way back to customer feedback and

00:08:24,420 --> 00:08:28,500
then how you do that is largely

00:08:26,370 --> 00:08:30,060
dependent on kind of the requirements or

00:08:28,500 --> 00:08:32,370
some of the restrictions within your org

00:08:30,060 --> 00:08:35,550
but just so you know it is still

00:08:32,370 --> 00:08:38,910
possible and really this is kind of the

00:08:35,550 --> 00:08:42,600
the the birth of DevOps and kind of the

00:08:38,910 --> 00:08:45,510
way agile has taken hold over the last I

00:08:42,600 --> 00:08:47,880
don't know ten years this is really the

00:08:45,510 --> 00:08:50,760
goal we have processes like agile we

00:08:47,880 --> 00:08:54,570
have cultures like DevOps to make this a

00:08:50,760 --> 00:08:57,900
reality so a lot of you are probably

00:08:54,570 --> 00:08:59,640
seeing these things today so let's take

00:08:57,900 --> 00:09:02,610
a look at this this definition of DevOps

00:08:59,640 --> 00:09:04,200
I think this really embodies kind of the

00:09:02,610 --> 00:09:07,620
spirit of what we're here talking about

00:09:04,200 --> 00:09:09,690
today DevOps is a combination of

00:09:07,620 --> 00:09:11,700
cultural philosophies practices and

00:09:09,690 --> 00:09:13,380
tools that increase an organization's

00:09:11,700 --> 00:09:16,560
ability to deliver applications and

00:09:13,380 --> 00:09:19,650
services at high velocity velocity is

00:09:16,560 --> 00:09:24,000
key what we want to be able to do is

00:09:19,650 --> 00:09:26,430
produce product and do our work as

00:09:24,000 --> 00:09:29,610
efficiently and as fast as possible and

00:09:26,430 --> 00:09:31,980
that's one thing that DevOps promotes so

00:09:29,610 --> 00:09:33,000
I think one of the most important things

00:09:31,980 --> 00:09:34,820
that we can talk about when we talk

00:09:33,000 --> 00:09:37,500
about moving fast and we talk about

00:09:34,820 --> 00:09:40,260
trying to build cases for building out

00:09:37,500 --> 00:09:42,720
efficient tooling and in dev tooling is

00:09:40,260 --> 00:09:46,140
why the business cares really we're all

00:09:42,720 --> 00:09:48,000
here under the banner of our business

00:09:46,140 --> 00:09:50,850
we're all working on producing product

00:09:48,000 --> 00:09:53,250
for some company that may be like I said

00:09:50,850 --> 00:09:54,870
that may be tools that just normal

00:09:53,250 --> 00:09:57,570
customers are using or your customers

00:09:54,870 --> 00:09:59,040
may be developers but at some level you

00:09:57,570 --> 00:10:01,920
have to build a business business case

00:09:59,040 --> 00:10:03,600
so in order to kind of build a business

00:10:01,920 --> 00:10:05,850
case of why we want to actually move

00:10:03,600 --> 00:10:08,370
fast there are a few points so the first

00:10:05,850 --> 00:10:10,920
one is decreased time to value so time

00:10:08,370 --> 00:10:13,170
to value is really the measure of how

00:10:10,920 --> 00:10:15,690
quickly your customer finds value in

00:10:13,170 --> 00:10:17,910
your tooling for an engineer if we're

00:10:15,690 --> 00:10:20,670
talking about dev tooling the value is

00:10:17,910 --> 00:10:22,710
really how fast and how efficient I can

00:10:20,670 --> 00:10:24,270
do my job if I can find the information

00:10:22,710 --> 00:10:26,310
I need when I need it

00:10:24,270 --> 00:10:28,170
then that's value and what we want to do

00:10:26,310 --> 00:10:29,850
is we don't want to get bogged down in

00:10:28,170 --> 00:10:31,880
in the inefficiencies of the tool

00:10:29,850 --> 00:10:35,910
because that's not a fast time to value

00:10:31,880 --> 00:10:38,220
so we want to have low time to value so

00:10:35,910 --> 00:10:40,080
our customers can get as much out of our

00:10:38,220 --> 00:10:41,880
tools became the other point is

00:10:40,080 --> 00:10:47,190
competitive advantage and that kind of

00:10:41,880 --> 00:10:49,560
plays into into time to value because if

00:10:47,190 --> 00:10:51,240
we're if we're iterating and our product

00:10:49,560 --> 00:10:54,810
teams and our tooling teams are

00:10:51,240 --> 00:10:56,490
iterating quickly what we can what we

00:10:54,810 --> 00:10:58,800
can get is we can actually get a product

00:10:56,490 --> 00:11:00,180
out to the customer faster if we can get

00:10:58,800 --> 00:11:02,430
a product out to the customer more

00:11:00,180 --> 00:11:04,770
quickly then that customer is more

00:11:02,430 --> 00:11:06,660
likely to have what they need so I'm

00:11:04,770 --> 00:11:08,400
sure a lot of you have had times where

00:11:06,660 --> 00:11:11,550
your customers have come to you and said

00:11:08,400 --> 00:11:14,070
I need feature XYZ and you've said

00:11:11,550 --> 00:11:16,290
alright that's gonna be three months of

00:11:14,070 --> 00:11:17,880
development probably a month while I

00:11:16,290 --> 00:11:20,250
wait on a release train to get this out

00:11:17,880 --> 00:11:23,580
so you're looking at four months in that

00:11:20,250 --> 00:11:25,170
four months your competitors could be

00:11:23,580 --> 00:11:27,570
producing that feature more if they're

00:11:25,170 --> 00:11:29,310
moving more quickly then that feature is

00:11:27,570 --> 00:11:31,230
going to land more quickly and so what

00:11:29,310 --> 00:11:34,110
happens is your business actually loses

00:11:31,230 --> 00:11:36,120
revenue they lose the opportunity to

00:11:34,110 --> 00:11:38,400
help that customer and so by moving

00:11:36,120 --> 00:11:40,290
quickly by having tools that help us

00:11:38,400 --> 00:11:42,990
move quickly then we can have more

00:11:40,290 --> 00:11:43,980
competitive advantage the other one and

00:11:42,990 --> 00:11:48,000
this is actually something that I

00:11:43,980 --> 00:11:50,460
learned when when I joined Armory but if

00:11:48,000 --> 00:11:52,320
we move quick and we can iterate fast

00:11:50,460 --> 00:11:55,230
and we can get things into our customers

00:11:52,320 --> 00:11:56,610
hands we actually reduce the risk of the

00:11:55,230 --> 00:12:00,680
investment in the time that we're

00:11:56,610 --> 00:12:03,030
putting into developing a product

00:12:00,680 --> 00:12:04,500
believe it or not the time that you

00:12:03,030 --> 00:12:05,850
spend working on something is an

00:12:04,500 --> 00:12:07,350
investment for someone it's an

00:12:05,850 --> 00:12:09,540
investment for you it's an investment

00:12:07,350 --> 00:12:11,390
for your company and so what we want to

00:12:09,540 --> 00:12:13,830
do is we want to decrease what we call

00:12:11,390 --> 00:12:16,890
inventory we want to get as much code

00:12:13,830 --> 00:12:17,970
out of the development process and into

00:12:16,890 --> 00:12:20,460
the hands of the users where it's

00:12:17,970 --> 00:12:22,680
valuable and so by doing that we can

00:12:20,460 --> 00:12:26,310
reduce the risk that something will not

00:12:22,680 --> 00:12:28,620
pay off but why do you care

00:12:26,310 --> 00:12:31,140
you know you probably are listening to

00:12:28,620 --> 00:12:33,170
me talk about how the business is really

00:12:31,140 --> 00:12:36,690
the one benefiting from you moving fast

00:12:33,170 --> 00:12:38,460
but it all of us in here are engineers

00:12:36,690 --> 00:12:40,200
and all of us in here love writing code

00:12:38,460 --> 00:12:42,120
and actually the feeling we get when

00:12:40,200 --> 00:12:45,630
somebody had finds value and what we've

00:12:42,120 --> 00:12:47,640
done so the what I was saying earlier

00:12:45,630 --> 00:12:50,820
the smaller feedback loops are actually

00:12:47,640 --> 00:12:52,560
beneficial to you as well because you

00:12:50,820 --> 00:12:57,660
can get that input from your customer

00:12:52,560 --> 00:12:59,850
you can start developing quickly the the

00:12:57,660 --> 00:13:01,290
features that you want to work on if a

00:12:59,850 --> 00:13:03,990
customer is telling you that that a

00:13:01,290 --> 00:13:06,690
feature that you've worked on is not

00:13:03,990 --> 00:13:08,910
valuable you want to do sorry what we

00:13:06,690 --> 00:13:11,310
want to do is we want to be able to help

00:13:08,910 --> 00:13:14,610
that customer and a smaller feedback

00:13:11,310 --> 00:13:17,130
loop really gets us there continued

00:13:14,610 --> 00:13:19,740
experimentation is another is another

00:13:17,130 --> 00:13:21,540
point of why we want to move quick if we

00:13:19,740 --> 00:13:22,089
can if we can take that feedback and we

00:13:21,540 --> 00:13:25,180
can actually

00:13:22,089 --> 00:13:27,819
the experiment with that and say is this

00:13:25,180 --> 00:13:30,100
valuable to you are you finding a reason

00:13:27,819 --> 00:13:31,959
to use this feature or this product we

00:13:30,100 --> 00:13:34,149
can can just continue like performing

00:13:31,959 --> 00:13:37,120
experiments and experiments don't really

00:13:34,149 --> 00:13:41,110
work unless you can quickly react to

00:13:37,120 --> 00:13:43,660
them so if you make a change to feature

00:13:41,110 --> 00:13:45,430
X Y Z and then your customers start

00:13:43,660 --> 00:13:47,350
complaining about it maybe it's a small

00:13:45,430 --> 00:13:50,559
fix if that small fix is what it takes

00:13:47,350 --> 00:13:52,480
to actually win win the feature and win

00:13:50,559 --> 00:13:54,670
the customer being able to get that in

00:13:52,480 --> 00:13:57,660
their hands quickly is actually super

00:13:54,670 --> 00:14:00,790
valuable so that's what we want to do

00:13:57,660 --> 00:14:02,949
and kind of along the similar line of

00:14:00,790 --> 00:14:05,889
DevOps we want to have focused efforts

00:14:02,949 --> 00:14:08,009
so if we have small teams that are

00:14:05,889 --> 00:14:11,279
moving quickly they can iterate on

00:14:08,009 --> 00:14:13,779
smaller individual chunks and features

00:14:11,279 --> 00:14:16,569
without actually getting into the cycle

00:14:13,779 --> 00:14:18,819
of I've done X Y Z let's wait for it to

00:14:16,569 --> 00:14:20,860
release and then move on to something

00:14:18,819 --> 00:14:27,579
else in this point it's actually about

00:14:20,860 --> 00:14:30,459
context so is does anyone here have have

00:14:27,579 --> 00:14:32,410
a release trainer they have to wait to

00:14:30,459 --> 00:14:34,269
push something out to production maybe

00:14:32,410 --> 00:14:38,110
it takes a couple months maybe it takes

00:14:34,269 --> 00:14:40,059
a couple weeks couple days what what

00:14:38,110 --> 00:14:42,220
I've found actually in my experience and

00:14:40,059 --> 00:14:45,040
working at companies that kind of have

00:14:42,220 --> 00:14:47,319
that is when I've actually finished a

00:14:45,040 --> 00:14:49,300
problem I have to wait for that thing to

00:14:47,319 --> 00:14:50,740
ship so if there are any problems with

00:14:49,300 --> 00:14:52,089
that a month down the road

00:14:50,740 --> 00:14:54,759
I've already started working on

00:14:52,089 --> 00:14:56,620
something else so I don't have the

00:14:54,759 --> 00:14:58,990
context that I need to debug the issue

00:14:56,620 --> 00:15:03,220
because I because I wasn't moving fast I

00:14:58,990 --> 00:15:05,949
wasn't moving quickly so having focused

00:15:03,220 --> 00:15:09,220
efforts is really something that we can

00:15:05,949 --> 00:15:10,689
get when we move quickly so what can we

00:15:09,220 --> 00:15:12,819
do about it you know I've talked about

00:15:10,689 --> 00:15:14,139
moving fast I've talked about the

00:15:12,819 --> 00:15:17,649
reasons why you might want to move fast

00:15:14,139 --> 00:15:20,199
but what can we do this this whole talk

00:15:17,649 --> 00:15:22,899
is about building tooling that helps us

00:15:20,199 --> 00:15:24,579
achieve that as developers one of the

00:15:22,899 --> 00:15:27,240
most important things that we can we can

00:15:24,579 --> 00:15:30,699
have is tools that help us do our jobs

00:15:27,240 --> 00:15:33,730
so we're going to talk a little bit

00:15:30,699 --> 00:15:35,379
about application focus tooling so this

00:15:33,730 --> 00:15:36,160
is kind of this is another view of the

00:15:35,379 --> 00:15:37,899
this off

00:15:36,160 --> 00:15:40,540
and lifecycle is actually what I would

00:15:37,899 --> 00:15:42,519
consider the implementation and kind of

00:15:40,540 --> 00:15:45,160
the testing phase so over here on the

00:15:42,519 --> 00:15:47,350
left you have what I call like

00:15:45,160 --> 00:15:51,100
development exercises and this is stuff

00:15:47,350 --> 00:15:52,720
that happens when you start coding on

00:15:51,100 --> 00:15:54,310
something you start pulling stories out

00:15:52,720 --> 00:15:57,300
of JIRA and you start actually making

00:15:54,310 --> 00:15:59,529
commits you know you have things like

00:15:57,300 --> 00:16:01,810
you have tickets and you have a code

00:15:59,529 --> 00:16:03,610
repo and you have artifact storage and

00:16:01,810 --> 00:16:06,819
all of these different things and then

00:16:03,610 --> 00:16:08,379
in on the right you have kind of what

00:16:06,819 --> 00:16:10,480
would be more traditionally considered

00:16:08,379 --> 00:16:13,569
ops focused activities things like

00:16:10,480 --> 00:16:15,339
monitoring things like logging and then

00:16:13,569 --> 00:16:18,759
in the middle we have we have delivery

00:16:15,339 --> 00:16:20,680
in hopefully we're all here using

00:16:18,759 --> 00:16:23,319
spinnaker or interested in Spanier so

00:16:20,680 --> 00:16:26,709
this is really kind of where I think

00:16:23,319 --> 00:16:28,720
naturally the line Falls because we have

00:16:26,709 --> 00:16:30,550
a lot of things that engineers are

00:16:28,720 --> 00:16:32,259
working on on the Left we have things

00:16:30,550 --> 00:16:34,060
that operations and infrastructure folks

00:16:32,259 --> 00:16:36,670
are working on the right and what we've

00:16:34,060 --> 00:16:38,529
actually found at armory and what I've

00:16:36,670 --> 00:16:42,750
actually found at add another at other

00:16:38,529 --> 00:16:45,009
companies is that we lose so much

00:16:42,750 --> 00:16:47,110
important information at that middle

00:16:45,009 --> 00:16:48,759
line we actually lose all the

00:16:47,110 --> 00:16:50,319
information about the JIRA tickets all

00:16:48,759 --> 00:16:52,660
the commits that are actually going out

00:16:50,319 --> 00:16:55,360
and it's actually really hard to even

00:16:52,660 --> 00:16:57,279
make that come into the middle it's even

00:16:55,360 --> 00:17:00,699
more difficult what I from what I've

00:16:57,279 --> 00:17:02,439
seen to bring it into the right and so

00:17:00,699 --> 00:17:05,679
when I say application focused tooling

00:17:02,439 --> 00:17:08,100
what I mean is that we want we want

00:17:05,679 --> 00:17:12,750
tools that capture this entire process

00:17:08,100 --> 00:17:14,770
and we do that in a couple ways so

00:17:12,750 --> 00:17:16,539
before we talk about that though let's

00:17:14,770 --> 00:17:18,100
talk about some of the traditional tools

00:17:16,539 --> 00:17:22,270
can I get how many people are using

00:17:18,100 --> 00:17:24,520
Jenkins a lot yeah how many people who

00:17:22,270 --> 00:17:27,010
are not using spinnaker are using the

00:17:24,520 --> 00:17:31,690
AWS console to figure out what's

00:17:27,010 --> 00:17:33,429
actually running good no one but but

00:17:31,690 --> 00:17:34,480
these tools are really kind of they what

00:17:33,429 --> 00:17:37,990
I like to call they're built for the

00:17:34,480 --> 00:17:40,059
monolith Jenkins is kind of really built

00:17:37,990 --> 00:17:42,940
the organ it like the way you're gonna

00:17:40,059 --> 00:17:45,520
organize projects and jobs as is built

00:17:42,940 --> 00:17:47,140
for single applications maybe those

00:17:45,520 --> 00:17:49,630
single applications are only deployed in

00:17:47,140 --> 00:17:50,049
one region AWS the console could

00:17:49,630 --> 00:17:52,149
probably

00:17:50,049 --> 00:17:54,580
we considered that for example because

00:17:52,149 --> 00:17:57,850
you can't get a holistic view of what's

00:17:54,580 --> 00:17:59,470
going on so you know you may have

00:17:57,850 --> 00:18:02,080
applications that want it run on one

00:17:59,470 --> 00:18:04,600
server but most of these tools are

00:18:02,080 --> 00:18:06,429
actually focused on a single slice of

00:18:04,600 --> 00:18:08,739
that that graph that I showed you

00:18:06,429 --> 00:18:10,659
earlier they are focused on artifact

00:18:08,739 --> 00:18:12,190
storage or they're focused on code

00:18:10,659 --> 00:18:13,299
repositories or they're focused on

00:18:12,190 --> 00:18:16,419
logging and they're focused on

00:18:13,299 --> 00:18:19,539
monitoring and what I think has happened

00:18:16,419 --> 00:18:23,440
is that we've kind of as we've gone into

00:18:19,539 --> 00:18:25,570
this more DevOps focused kind of culture

00:18:23,440 --> 00:18:27,399
and we have this ecosystem that's

00:18:25,570 --> 00:18:29,619
evolving around micro-services we've

00:18:27,399 --> 00:18:32,649
lost a lot of what we need when we try

00:18:29,619 --> 00:18:37,090
to fit modern things into traditional

00:18:32,649 --> 00:18:40,869
tools so focus tooling has a couple

00:18:37,090 --> 00:18:43,359
attributes that will help us get to get

00:18:40,869 --> 00:18:45,549
this kind of flywheel moving and we can

00:18:43,359 --> 00:18:50,440
start moving fast the first thing is it

00:18:45,549 --> 00:18:52,210
shifts context so when we talk about

00:18:50,440 --> 00:18:54,639
shifting context the most important

00:18:52,210 --> 00:18:58,539
thing to remember is that we want to

00:18:54,639 --> 00:19:00,789
focus on the single bit of product that

00:18:58,539 --> 00:19:03,909
we're working on now that may be your

00:19:00,789 --> 00:19:05,169
application that may be it may be

00:19:03,909 --> 00:19:07,480
something else that you're working on

00:19:05,169 --> 00:19:09,580
but when we think about focus tooling we

00:19:07,480 --> 00:19:11,289
need to think about the problem we need

00:19:09,580 --> 00:19:13,809
to think about the information that we

00:19:11,289 --> 00:19:19,869
need in the context of what we're trying

00:19:13,809 --> 00:19:23,080
to solve and so you know when we think

00:19:19,869 --> 00:19:25,960
about it an imagine a situation for like

00:19:23,080 --> 00:19:27,759
an outage if your specific service or

00:19:25,960 --> 00:19:31,090
your application is having a having some

00:19:27,759 --> 00:19:33,070
downtime it's when you look at the

00:19:31,090 --> 00:19:34,960
application you want to be able to trace

00:19:33,070 --> 00:19:36,730
all of the different bits of that

00:19:34,960 --> 00:19:38,679
application that are happening through

00:19:36,730 --> 00:19:40,869
the SDLC so you want to be able to

00:19:38,679 --> 00:19:42,429
determine what the commit was that

00:19:40,869 --> 00:19:45,129
possibly caused the outage you need to

00:19:42,429 --> 00:19:48,429
see logs for that application kind of

00:19:45,129 --> 00:19:50,139
bucketed in that way and so that's we

00:19:48,429 --> 00:19:51,639
want to shift our context away from kind

00:19:50,139 --> 00:19:53,649
of more traditional tools more

00:19:51,639 --> 00:19:55,419
infrastructure related things and start

00:19:53,649 --> 00:19:57,399
thinking about the application like I

00:19:55,419 --> 00:20:00,369
said as developers the application is

00:19:57,399 --> 00:20:01,929
what we care about second we need

00:20:00,369 --> 00:20:03,590
something that reduces cognitive

00:20:01,929 --> 00:20:04,730
overhead and this is a this is a

00:20:03,590 --> 00:20:07,309
a problem that I'm really passionate

00:20:04,730 --> 00:20:10,070
about because I've worked I've worked

00:20:07,309 --> 00:20:12,679
with with infrastructure engineers who

00:20:10,070 --> 00:20:14,360
are providing tooling to developers that

00:20:12,679 --> 00:20:16,990
are actually being asked to take on a

00:20:14,360 --> 00:20:19,220
lot more responsibility these days and

00:20:16,990 --> 00:20:21,140
making the mental leap having to

00:20:19,220 --> 00:20:22,820
understand the application that you're

00:20:21,140 --> 00:20:24,860
working on and then having to jump into

00:20:22,820 --> 00:20:26,960
some infrastructure stuff that may not

00:20:24,860 --> 00:20:30,140
make sense to you is very difficult and

00:20:26,960 --> 00:20:32,179
the barrier to entry is really high so

00:20:30,140 --> 00:20:34,580
what we want to do is we want to bring

00:20:32,179 --> 00:20:36,559
these tools down that a provide enough

00:20:34,580 --> 00:20:39,590
functionality and provide enough context

00:20:36,559 --> 00:20:43,460
for what we need but also make it easy

00:20:39,590 --> 00:20:45,289
for them to do these more complex tasks

00:20:43,460 --> 00:20:46,640
that they may not be familiar with so

00:20:45,289 --> 00:20:48,440
the second point is we reduce the

00:20:46,640 --> 00:20:52,880
cognitive overhead and make it more easy

00:20:48,440 --> 00:20:55,460
to to adopt finally it's holistic and

00:20:52,880 --> 00:20:56,870
this you know the application that

00:20:55,460 --> 00:20:59,360
you're using to do these tools doesn't

00:20:56,870 --> 00:21:01,190
need to do everything but what we want

00:20:59,360 --> 00:21:02,990
to do is we want to capture every piece

00:21:01,190 --> 00:21:06,679
of that sdlc every piece of that

00:21:02,990 --> 00:21:08,870
development process in a tool or suite

00:21:06,679 --> 00:21:10,730
of tools where everything carries over

00:21:08,870 --> 00:21:13,760
so we want to be able to get a high

00:21:10,730 --> 00:21:17,600
level picture of what we want and so

00:21:13,760 --> 00:21:22,070
focus tools really focus on every piece

00:21:17,600 --> 00:21:24,080
of the sdlc so let's what I wanted to do

00:21:22,070 --> 00:21:26,059
now is kind of take a look at some tools

00:21:24,080 --> 00:21:29,570
that that apply these principles what I

00:21:26,059 --> 00:21:31,789
consider kind of good tools or good

00:21:29,570 --> 00:21:34,220
examples of tools that do this so the

00:21:31,789 --> 00:21:36,470
first one is github this is really where

00:21:34,220 --> 00:21:38,720
it starts the the development effort

00:21:36,470 --> 00:21:42,770
starts at the get that git repository

00:21:38,720 --> 00:21:45,250
these days and so when we you know this

00:21:42,770 --> 00:21:47,630
is a this is kind of the principle of

00:21:45,250 --> 00:21:49,820
shifting context we can shift our focus

00:21:47,630 --> 00:21:54,289
to our application and it starts here

00:21:49,820 --> 00:21:55,760
the this.get is the source of truth and

00:21:54,289 --> 00:21:57,529
when we think about our application and

00:21:55,760 --> 00:21:59,600
we think about moving quickly and and

00:21:57,529 --> 00:22:03,740
iterating on our application we started

00:21:59,600 --> 00:22:07,190
github now one thing that I think is

00:22:03,740 --> 00:22:09,140
really it it's a contrived example and

00:22:07,190 --> 00:22:12,380
it's very simple but if we think about

00:22:09,140 --> 00:22:14,120
it it really demonstrates what we're

00:22:12,380 --> 00:22:15,950
trying to get at the poor request in

00:22:14,120 --> 00:22:18,049
github is actually a really great

00:22:15,950 --> 00:22:19,789
example of this its focus

00:22:18,049 --> 00:22:21,320
it's focused on the application it's

00:22:19,789 --> 00:22:23,779
actually focused on the individual

00:22:21,320 --> 00:22:25,580
change when we're talking about the

00:22:23,779 --> 00:22:29,480
change we're talking about it in context

00:22:25,580 --> 00:22:33,049
of our application and so by providing a

00:22:29,480 --> 00:22:35,659
very focused way to to interact with

00:22:33,049 --> 00:22:37,100
this github is actually helping us move

00:22:35,659 --> 00:22:39,200
move quickly because we're not

00:22:37,100 --> 00:22:42,769
distracted by the noise that is kind of

00:22:39,200 --> 00:22:44,119
the rest of what's happening another

00:22:42,769 --> 00:22:46,730
tool that I think most of us are

00:22:44,119 --> 00:22:48,559
familiar with is Travis CI Travis is

00:22:46,730 --> 00:22:51,169
very focused as well

00:22:48,559 --> 00:22:53,119
when you submit a pull request to github

00:22:51,169 --> 00:22:56,480
Travis picks up on that and it will

00:22:53,119 --> 00:22:58,429
build it it's also even even more

00:22:56,480 --> 00:23:00,110
focused on the application because it

00:22:58,429 --> 00:23:02,210
kind of links directly into your github

00:23:00,110 --> 00:23:05,090
repositories so the builds that are

00:23:02,210 --> 00:23:06,559
happening at github are the PRS that are

00:23:05,090 --> 00:23:08,389
being submitted to github where we're

00:23:06,559 --> 00:23:11,659
focused on the application are getting

00:23:08,389 --> 00:23:12,679
picked up in Travis and so we if you

00:23:11,659 --> 00:23:14,960
know if you look at that we can see

00:23:12,679 --> 00:23:17,059
we're starting to create a band of focus

00:23:14,960 --> 00:23:19,460
these tools are providing different

00:23:17,059 --> 00:23:23,179
functionality but when we look at a PR

00:23:19,460 --> 00:23:26,840
we got the context for that PR in in

00:23:23,179 --> 00:23:27,950
Travis so we can follow that line but

00:23:26,840 --> 00:23:29,509
one way that you can start thinking

00:23:27,950 --> 00:23:32,389
about your tooling is how do we provide

00:23:29,509 --> 00:23:34,279
hooks from other systems to make that to

00:23:32,389 --> 00:23:36,049
carry that band of context across and

00:23:34,279 --> 00:23:40,279
github is a good example of that as well

00:23:36,049 --> 00:23:43,100
because they provide hooks for Travis to

00:23:40,279 --> 00:23:45,230
update so and it's not just Travis it's

00:23:43,100 --> 00:23:47,960
other systems we can actually start to

00:23:45,230 --> 00:23:50,119
feed back into github some of the

00:23:47,960 --> 00:23:52,700
information that makes this valuable now

00:23:50,119 --> 00:23:55,249
how does this relate to moving fast I'm

00:23:52,700 --> 00:23:59,629
sure most of us have been trying to

00:23:55,249 --> 00:24:02,720
review a PR and really relied on this to

00:23:59,629 --> 00:24:04,399
tell if that PR can be merged if this

00:24:02,720 --> 00:24:05,929
type of thing didn't exist we would

00:24:04,399 --> 00:24:08,059
actually have to go into Travis we'd

00:24:05,929 --> 00:24:10,549
have to find that particular PR and we'd

00:24:08,059 --> 00:24:12,529
have to review the laws but here we're

00:24:10,549 --> 00:24:14,600
actually being more efficient because

00:24:12,529 --> 00:24:16,789
Travis is updating github and telling it

00:24:14,600 --> 00:24:19,730
the builds good you don't need to look

00:24:16,789 --> 00:24:24,279
at it so that's just kind of one way

00:24:19,730 --> 00:24:24,279
these two tools play into each other

00:24:24,350 --> 00:24:30,889
so again we're here for spinnaker so

00:24:28,220 --> 00:24:31,760
spinnaker actually changed a lot of the

00:24:30,889 --> 00:24:33,440
way that I start think

00:24:31,760 --> 00:24:35,360
about my tooling and influenced a lot of

00:24:33,440 --> 00:24:38,270
this talk so I want to talk a little bit

00:24:35,360 --> 00:24:40,640
about how how spinnaker is helping us

00:24:38,270 --> 00:24:44,660
focus on the application and focus on

00:24:40,640 --> 00:24:47,630
our tooling so first off we just have we

00:24:44,660 --> 00:24:49,700
have an application here this is when I

00:24:47,630 --> 00:24:51,080
talk about a holistic view you'll hear a

00:24:49,700 --> 00:24:53,000
lot of us talk about spinnaker as a

00:24:51,080 --> 00:24:56,090
single pane of glass and that's exactly

00:24:53,000 --> 00:24:57,530
what it is it's got this holistic view

00:24:56,090 --> 00:25:00,560
of the world what's running in

00:24:57,530 --> 00:25:02,750
kubernetes what's running in Amazon when

00:25:00,560 --> 00:25:04,460
we look at it we look at it in the

00:25:02,750 --> 00:25:07,640
context of our application of our

00:25:04,460 --> 00:25:08,840
service and then we look at what bits of

00:25:07,640 --> 00:25:11,750
that service are running

00:25:08,840 --> 00:25:13,400
wherever we need to know so one of the

00:25:11,750 --> 00:25:15,260
really great things about spinnaker is

00:25:13,400 --> 00:25:19,220
if we have an outage we have one place

00:25:15,260 --> 00:25:21,080
to go we only need to go to spinnaker to

00:25:19,220 --> 00:25:24,230
figure out okay what's going on and this

00:25:21,080 --> 00:25:26,780
is generally where we start we saw both

00:25:24,230 --> 00:25:30,920
of those sides on that one slide where

00:25:26,780 --> 00:25:33,740
dev operations happen to the middle ops

00:25:30,920 --> 00:25:37,070
stuff happens to the right and then we

00:25:33,740 --> 00:25:40,280
have we have spinnaker in the middle and

00:25:37,070 --> 00:25:42,200
so this is kind of where we need to

00:25:40,280 --> 00:25:45,200
start I think we need to start picking

00:25:42,200 --> 00:25:46,580
up some of that context because we have

00:25:45,200 --> 00:25:48,080
we have things like github and we have

00:25:46,580 --> 00:25:50,590
things like Travis that are on the Left

00:25:48,080 --> 00:25:52,910
where we're already getting that context

00:25:50,590 --> 00:25:55,250
but spinnaker is where we need to start

00:25:52,910 --> 00:25:57,020
pulling context in from the right we

00:25:55,250 --> 00:25:59,690
want to feed as much in on the left and

00:25:57,020 --> 00:26:02,390
we want to bring stuff on the right but

00:25:59,690 --> 00:26:03,890
you know spinnaker helps us move fast

00:26:02,390 --> 00:26:07,970
because we only have to go to one place

00:26:03,890 --> 00:26:10,640
to figure out what we need but you know

00:26:07,970 --> 00:26:12,200
we're like I was saying earlier we're

00:26:10,640 --> 00:26:15,170
feeding things in on the right so this

00:26:12,200 --> 00:26:16,430
is a screenshot of a build actually

00:26:15,170 --> 00:26:18,470
being triggered by Jenkins and what

00:26:16,430 --> 00:26:19,820
you'll notice is that we can go directly

00:26:18,470 --> 00:26:22,100
to the build that triggered the

00:26:19,820 --> 00:26:24,260
deployment so not only within the

00:26:22,100 --> 00:26:25,910
context of the code change within the

00:26:24,260 --> 00:26:27,140
context of the application can we see

00:26:25,910 --> 00:26:29,600
what happened but we're actually

00:26:27,140 --> 00:26:31,010
starting to get that into our deployment

00:26:29,600 --> 00:26:32,660
what happens after something's been

00:26:31,010 --> 00:26:34,430
built what happens after a PR gets

00:26:32,660 --> 00:26:37,250
merged and so that's what we're showing

00:26:34,430 --> 00:26:39,230
here we're saying this build

00:26:37,250 --> 00:26:41,900
specifically triggered this we can jump

00:26:39,230 --> 00:26:44,360
directly into it so like I was saying

00:26:41,900 --> 00:26:44,730
earlier it's not one system that does

00:26:44,360 --> 00:26:47,280
every

00:26:44,730 --> 00:26:48,570
but if we can if we can plug enough

00:26:47,280 --> 00:26:51,059
context in from all of these different

00:26:48,570 --> 00:26:52,799
systems then we can be efficient when we

00:26:51,059 --> 00:26:55,290
actually need to go find this

00:26:52,799 --> 00:26:57,900
information we can go directly from

00:26:55,290 --> 00:26:59,970
spinnaker we can go from github as long

00:26:57,900 --> 00:27:02,190
as we're you know creating that band of

00:26:59,970 --> 00:27:06,600
context across our tools we can move

00:27:02,190 --> 00:27:09,000
fast as engineers what's one way that we

00:27:06,600 --> 00:27:10,440
can improve on this this is actually

00:27:09,000 --> 00:27:13,049
something that I've kind of been I've

00:27:10,440 --> 00:27:15,240
thought about a lot in the past but if

00:27:13,049 --> 00:27:16,770
we look at how github allows us to up

00:27:15,240 --> 00:27:19,950
bring in this context from other systems

00:27:16,770 --> 00:27:24,240
we want to bring in we want to create

00:27:19,950 --> 00:27:27,540
that band of context what if not instead

00:27:24,240 --> 00:27:29,400
of having our CI systems up to github

00:27:27,540 --> 00:27:30,000
what if we start having spinnaker update

00:27:29,400 --> 00:27:33,570
github

00:27:30,000 --> 00:27:35,040
what if we could annotate the artifacts

00:27:33,570 --> 00:27:40,140
that are being deployed out of github

00:27:35,040 --> 00:27:42,120
and we start telling github hey this

00:27:40,140 --> 00:27:43,500
commit has been deployed to Deb it's

00:27:42,120 --> 00:27:46,679
been deployed to stage it's been

00:27:43,500 --> 00:27:49,980
deployed to pry in and what if we could

00:27:46,679 --> 00:27:52,290
look at a production system and or we

00:27:49,980 --> 00:27:54,570
can we can do maybe like a get bisect we

00:27:52,290 --> 00:27:56,040
can track the commits that maybe broke

00:27:54,570 --> 00:28:00,620
something and then we can look directly

00:27:56,040 --> 00:28:03,120
at github for the context that tells us

00:28:00,620 --> 00:28:05,850
what systems what environments is this

00:28:03,120 --> 00:28:07,470
actually affecting so that's I think

00:28:05,850 --> 00:28:09,240
that's one waking that we can improve on

00:28:07,470 --> 00:28:11,400
that we can start pushing the context

00:28:09,240 --> 00:28:13,230
all around doesn't have to go left to

00:28:11,400 --> 00:28:16,110
right it's it's feeding everything's

00:28:13,230 --> 00:28:18,240
feeding into everything another thing

00:28:16,110 --> 00:28:19,620
that I think can actually start helping

00:28:18,240 --> 00:28:21,390
us bring this context I don't have a

00:28:19,620 --> 00:28:24,299
demo of this but this annotation driven

00:28:21,390 --> 00:28:25,380
UI for the kubernetes v2 provider what

00:28:24,299 --> 00:28:28,380
this allows us to do is actually

00:28:25,380 --> 00:28:31,940
annotate kubernetes resources and render

00:28:28,380 --> 00:28:34,410
things in the UI so we could annotate

00:28:31,940 --> 00:28:36,809
kubernetes with a link to our logging

00:28:34,410 --> 00:28:39,540
platform and then automatically we have

00:28:36,809 --> 00:28:41,490
a link directly into that system on the

00:28:39,540 --> 00:28:42,840
right we've done what we've done is

00:28:41,490 --> 00:28:45,150
we've pulled context from the write

00:28:42,840 --> 00:28:47,929
right into the middle right into

00:28:45,150 --> 00:28:51,000
spinnaker so that we can easily jump to

00:28:47,929 --> 00:28:54,179
the logs or we may jump into our

00:28:51,000 --> 00:28:56,280
monitoring service but the the value

00:28:54,179 --> 00:28:58,530
there is that we can do that directly

00:28:56,280 --> 00:29:00,210
from a single place or

00:28:58,530 --> 00:29:02,810
a couple places but we're starting to

00:29:00,210 --> 00:29:04,980
see how this band of context is is

00:29:02,810 --> 00:29:07,040
created when we just start plugging

00:29:04,980 --> 00:29:09,600
information in from these other systems

00:29:07,040 --> 00:29:13,200
so when you think about the tooling that

00:29:09,600 --> 00:29:14,730
you built that you build what we need

00:29:13,200 --> 00:29:18,330
what we what I really want to kind of

00:29:14,730 --> 00:29:20,300
get across is how can we pull what let

00:29:18,330 --> 00:29:22,950
take a look at what information you need

00:29:20,300 --> 00:29:24,210
from all of these external systems all

00:29:22,950 --> 00:29:27,180
of the systems that you use every day

00:29:24,210 --> 00:29:29,460
and look at how you can actually provide

00:29:27,180 --> 00:29:32,100
a way to bring that into other platforms

00:29:29,460 --> 00:29:33,900
I think there have been a lot of times

00:29:32,100 --> 00:29:35,850
where I've been sitting in one system

00:29:33,900 --> 00:29:38,330
and need information from another but I

00:29:35,850 --> 00:29:40,410
go spend 30 40 minutes trying to find it

00:29:38,330 --> 00:29:42,150
one of the problems that spinnaker

00:29:40,410 --> 00:29:44,730
actually helped me solve was it took me

00:29:42,150 --> 00:29:47,010
forever to figure out what build was

00:29:44,730 --> 00:29:48,750
actually deployed because I would have

00:29:47,010 --> 00:29:49,770
to like go into kubernetes and figure

00:29:48,750 --> 00:29:53,610
out okay

00:29:49,770 --> 00:29:54,900
you know Jenkins ran this this apply but

00:29:53,610 --> 00:29:57,420
I don't know what image is actually out

00:29:54,900 --> 00:29:59,940
there spinnaker brings that in from the

00:29:57,420 --> 00:30:04,440
environment and tells me what was

00:29:59,940 --> 00:30:06,240
actually deployed so really all of that

00:30:04,440 --> 00:30:09,600
is you know to say is that we should

00:30:06,240 --> 00:30:12,420
just build smarter tools to move fast we

00:30:09,600 --> 00:30:13,980
need tools that that know more about our

00:30:12,420 --> 00:30:17,580
environment they need to know more about

00:30:13,980 --> 00:30:19,230
our processes and our workflows so we

00:30:17,580 --> 00:30:21,570
want to just build really smart tools

00:30:19,230 --> 00:30:27,810
that allow you to bring that context in

00:30:21,570 --> 00:30:30,780
to be efficient so that is kind of wraps

00:30:27,810 --> 00:30:32,910
up what I had prepared before I open for

00:30:30,780 --> 00:30:35,010
questions I'll just say I work for

00:30:32,910 --> 00:30:36,270
armory we're hiring we're actually doing

00:30:35,010 --> 00:30:38,460
some really cool things with spinnaker

00:30:36,270 --> 00:30:41,610
we're working with a lot of customers to

00:30:38,460 --> 00:30:44,160
help drive a lot of this this moving

00:30:41,610 --> 00:30:46,440
quickly and we see a lot of people who

00:30:44,160 --> 00:30:48,669
want this they want the tools that that

00:30:46,440 --> 00:30:50,730
create that band of context

00:30:48,669 --> 00:30:50,730

YouTube URL: https://www.youtube.com/watch?v=4I5La7uuhPk


