Title: Matt Burdan   Sohail Ahmed "Setting Sail: A Year with Spinnaker at Sail"
Publication date: 2018-10-24
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,270 --> 00:00:05,380
[Music]

00:00:09,820 --> 00:00:13,259
[Music]

00:00:22,170 --> 00:00:27,150
all right a little bit about meal soft

00:00:24,660 --> 00:00:30,390
so meal soft was studing a started as an

00:00:27,150 --> 00:00:32,940
open source project with the mission to

00:00:30,390 --> 00:00:35,370
help organizations change and innovate

00:00:32,940 --> 00:00:38,730
faster making it easier to connect

00:00:35,370 --> 00:00:40,470
applications data and devices this is

00:00:38,730 --> 00:00:43,910
why we love to choose open source tools

00:00:40,470 --> 00:00:46,739
that allow us to help out developers

00:00:43,910 --> 00:00:48,559
innovate faster so that we can live to

00:00:46,739 --> 00:00:51,510
this mission statement for our customers

00:00:48,559 --> 00:00:53,790
so a little bit about some of the scale

00:00:51,510 --> 00:00:55,739
that we're dealing with a meal soft in

00:00:53,790 --> 00:00:58,080
our largest AWS production account we

00:00:55,739 --> 00:00:59,640
were running 15,000 plus 10 census

00:00:58,080 --> 00:01:02,100
because we're actually running a lot of

00:00:59,640 --> 00:01:04,489
our customer code there we have 20 plus

00:01:02,100 --> 00:01:07,380
AWS accounts that we need to deploy into

00:01:04,489 --> 00:01:10,560
we're deployed globally into pretty much

00:01:07,380 --> 00:01:12,960
every region within AWS and we're also

00:01:10,560 --> 00:01:16,350
in environments such as gov cloud we've

00:01:12,960 --> 00:01:20,460
got an EU platform and we also provide

00:01:16,350 --> 00:01:23,100
an on-premise product we have many

00:01:20,460 --> 00:01:27,539
services because we operate on a very

00:01:23,100 --> 00:01:29,640
micro service type of architecture and

00:01:27,539 --> 00:01:32,729
with spinnaker we're doing about we're

00:01:29,640 --> 00:01:34,320
doing hundreds of bakes a day so this is

00:01:32,729 --> 00:01:36,719
just a little bit of a view of our

00:01:34,320 --> 00:01:39,149
platform everything in black is our

00:01:36,719 --> 00:01:40,979
management plane which manages all about

00:01:39,149 --> 00:01:44,070
the mule runtime which is our customer

00:01:40,979 --> 00:01:45,929
code spinnaker is powering all the

00:01:44,070 --> 00:01:49,640
management plane and we have some new

00:01:45,929 --> 00:01:49,640
services right now running in kubernetes

00:01:52,249 --> 00:02:01,070
so just to give you like a little taste

00:01:56,369 --> 00:02:04,469
of like what life was before spinnaker

00:02:01,070 --> 00:02:06,390
we had we had a deployment platform

00:02:04,469 --> 00:02:08,729
basically that was developed before Matt

00:02:06,390 --> 00:02:12,510
and I joined the company it was run by

00:02:08,729 --> 00:02:15,200
the DevOps team and basically the

00:02:12,510 --> 00:02:18,060
pipelines were built all around Jenkins

00:02:15,200 --> 00:02:20,010
we would the pipeline would consist of

00:02:18,060 --> 00:02:22,800
terraform of course everyone uses

00:02:20,010 --> 00:02:24,660
terraform to manage artifacts in a TAS

00:02:22,800 --> 00:02:26,160
but it would be everything like it would

00:02:24,660 --> 00:02:27,720
be not just a network infrastructure not

00:02:26,160 --> 00:02:30,180
just the staple services but also they

00:02:27,720 --> 00:02:33,180
would deploy the instances using

00:02:30,180 --> 00:02:34,349
terraform as well and the way that would

00:02:33,180 --> 00:02:35,990
work was basically they would be

00:02:34,349 --> 00:02:38,630
deploying the base ami that

00:02:35,990 --> 00:02:40,790
he would bake and then they would use a

00:02:38,630 --> 00:02:43,550
salt roll and salt stack to provision

00:02:40,790 --> 00:02:47,240
those instances based on the salt roll

00:02:43,550 --> 00:02:48,980
applied to those machines so instances

00:02:47,240 --> 00:02:50,990
would basically be all the same it

00:02:48,980 --> 00:02:52,970
booted up they would talk to salt

00:02:50,990 --> 00:02:55,580
figured out what their role was pull

00:02:52,970 --> 00:02:57,680
down the the required application tar

00:02:55,580 --> 00:02:59,570
balls pulled down their configuration

00:02:57,680 --> 00:03:03,920
and then get their secrets from the salt

00:02:59,570 --> 00:03:06,830
pillars and we had saw a sort of like a

00:03:03,920 --> 00:03:09,130
blue-green deployment strategy it was

00:03:06,830 --> 00:03:12,590
kind of a Jenkins pipeline that used

00:03:09,130 --> 00:03:14,990
you'll be helped Jax and it was it

00:03:12,590 --> 00:03:16,670
worked but it was not you know not to

00:03:14,990 --> 00:03:20,390
the level of like what's what's bender

00:03:16,670 --> 00:03:22,250
Kirk provided us another kind of like

00:03:20,390 --> 00:03:23,240
pain point we had was developers didn't

00:03:22,250 --> 00:03:27,230
really have a good way of getting

00:03:23,240 --> 00:03:30,830
secrets into the salt pillars so DevOps

00:03:27,230 --> 00:03:33,740
was like very handhold they were kind of

00:03:30,830 --> 00:03:34,970
there to basically take secrets from the

00:03:33,740 --> 00:03:37,670
service owners put them where they

00:03:34,970 --> 00:03:39,920
needed to be and so getting your

00:03:37,670 --> 00:03:41,540
application deployed in this old method

00:03:39,920 --> 00:03:44,360
of deploy in this kind of like legacy

00:03:41,540 --> 00:03:49,610
deployment method was like very a very

00:03:44,360 --> 00:03:54,350
involved process so when Matt and I

00:03:49,610 --> 00:03:56,210
joined the company we were put on the

00:03:54,350 --> 00:04:00,800
core platform team but we were actually

00:03:56,210 --> 00:04:03,410
given the task to improve the legacy

00:04:00,800 --> 00:04:05,120
deployments and so what we did was we

00:04:03,410 --> 00:04:06,890
worked with some people from DevOps we

00:04:05,120 --> 00:04:10,010
worked from with some of our software

00:04:06,890 --> 00:04:11,810
architects and what we decided to do was

00:04:10,010 --> 00:04:13,100
set up like a problem statement of what

00:04:11,810 --> 00:04:16,280
was wrong with our deployments at the

00:04:13,100 --> 00:04:19,340
time so just adjust of what was was

00:04:16,280 --> 00:04:22,100
going on was that our our deployment

00:04:19,340 --> 00:04:23,180
workflow was focused on it was focused

00:04:22,100 --> 00:04:24,770
on configuration management and

00:04:23,180 --> 00:04:27,470
software-defined infrastructure which

00:04:24,770 --> 00:04:30,230
were good things but it was lacking in

00:04:27,470 --> 00:04:33,500
like in being able to be a highly

00:04:30,230 --> 00:04:36,650
available deployment workflow so like

00:04:33,500 --> 00:04:42,050
our blue green two plays were not not

00:04:36,650 --> 00:04:43,520
very mature and they weren't you still

00:04:42,050 --> 00:04:46,910
had to be like there to handhold and

00:04:43,520 --> 00:04:49,790
make sure everything went well we had

00:04:46,910 --> 00:04:52,040
our biggest thing was we had

00:04:49,790 --> 00:04:54,340
we only did Saturday deploys so we had

00:04:52,040 --> 00:04:56,360
very strict SLA s with our customers and

00:04:54,340 --> 00:04:58,250
due to the like the fact that our

00:04:56,360 --> 00:05:03,050
application and deployment workflow was

00:04:58,250 --> 00:05:04,430
not that mature that the we were kind of

00:05:03,050 --> 00:05:05,960
forced to do Saturday deploys and that

00:05:04,430 --> 00:05:08,630
was basically a full day of full

00:05:05,960 --> 00:05:10,820
Saturday with a lot of coordination a

00:05:08,630 --> 00:05:14,090
lot of teams basically not just DevOps

00:05:10,820 --> 00:05:16,780
teams but also the software teams

00:05:14,090 --> 00:05:20,240
themselves had to be there to to kind of

00:05:16,780 --> 00:05:26,540
coordinate and go through all the all

00:05:20,240 --> 00:05:28,240
the different deploys so we had this

00:05:26,540 --> 00:05:30,590
part we had the problem statement and

00:05:28,240 --> 00:05:34,940
luckily we were able to get in touch

00:05:30,590 --> 00:05:38,270
with the guys at armored they knew our

00:05:34,940 --> 00:05:41,090
director of IT or director of personnel

00:05:38,270 --> 00:05:43,640
infrastructure from a previous

00:05:41,090 --> 00:05:45,770
relationship and they kind of came along

00:05:43,640 --> 00:05:46,970
and they said hey you know we understand

00:05:45,770 --> 00:05:49,640
your pain points we've helped all these

00:05:46,970 --> 00:05:51,560
other customers before we want introduce

00:05:49,640 --> 00:05:53,390
you guys to spinnaker why don't we do a

00:05:51,560 --> 00:05:56,360
proof-of-concept show you how it works

00:05:53,390 --> 00:06:00,260
and you can try deploying your ami base

00:05:56,360 --> 00:06:02,600
deploys using spinnaker so they came and

00:06:00,260 --> 00:06:04,820
they basically promised us you know 24/7

00:06:02,600 --> 00:06:08,330
support of the the spinnaker platform

00:06:04,820 --> 00:06:09,890
that they deployed provided a consistent

00:06:08,330 --> 00:06:12,290
release cadence of their version of

00:06:09,890 --> 00:06:13,370
spinnaker and then they also promised to

00:06:12,290 --> 00:06:16,220
help build out some of the feature

00:06:13,370 --> 00:06:19,520
requests that we had namely new relic

00:06:16,220 --> 00:06:22,520
integration JIRA integration and then we

00:06:19,520 --> 00:06:24,470
were hoping to we also wanted to this

00:06:22,520 --> 00:06:26,030
was about a year ago so we were still

00:06:24,470 --> 00:06:28,280
waiting on kubernetes and helm support

00:06:26,030 --> 00:06:31,550
proper communities and home support from

00:06:28,280 --> 00:06:34,790
spinnaker to possibly handle our

00:06:31,550 --> 00:06:36,530
kubernetes workloads and then kind of

00:06:34,790 --> 00:06:38,000
like from our problem statement we this

00:06:36,530 --> 00:06:39,980
is kind of what we hope to get out of it

00:06:38,000 --> 00:06:41,450
was like our eventual outcome was that

00:06:39,980 --> 00:06:44,180
developers would no longer be dependent

00:06:41,450 --> 00:06:46,330
on cloud apps or DevOps to build and

00:06:44,180 --> 00:06:48,260
deploy their application packages

00:06:46,330 --> 00:06:50,750
spinnaker would remove those barriers

00:06:48,260 --> 00:06:52,550
that kind of prevented that kind of

00:06:50,750 --> 00:06:54,530
enforced us to have Saturday deploys

00:06:52,550 --> 00:06:57,560
that was like our number one metric was

00:06:54,530 --> 00:06:59,120
how many Saturday deploys or how many

00:06:57,560 --> 00:07:01,639
people are working on Saturday

00:06:59,120 --> 00:07:05,870
because DevOps was sick and tired of it

00:07:01,639 --> 00:07:07,760
and you know it's like everyone's on

00:07:05,870 --> 00:07:10,370
call on Saturday everyone so it was like

00:07:07,760 --> 00:07:12,169
a big deal on our and we had weekly ever

00:07:10,370 --> 00:07:13,850
it's like bi-weekly Saturday deploys

00:07:12,169 --> 00:07:16,310
which pretty much we deployed every

00:07:13,850 --> 00:07:19,340
single application so it's like you know

00:07:16,310 --> 00:07:23,240
hundreds of app of services every other

00:07:19,340 --> 00:07:24,800
Saturday so at a high level our

00:07:23,240 --> 00:07:27,320
deployment pipelines will gain it will

00:07:24,800 --> 00:07:31,100
have like opinionated pipelines easy

00:07:27,320 --> 00:07:32,270
integration to our test Suites and with

00:07:31,100 --> 00:07:33,680
the eventual hope that we would get

00:07:32,270 --> 00:07:37,699
automated approvals from those test

00:07:33,680 --> 00:07:40,190
Suites several deployment models so not

00:07:37,699 --> 00:07:44,020
just red black or blue green but also

00:07:40,190 --> 00:07:46,820
canary deploys and then we were hoping

00:07:44,020 --> 00:07:48,800
you know am eyes to be our mutable

00:07:46,820 --> 00:07:52,100
deployment artifacts and not you know

00:07:48,800 --> 00:07:53,690
before we had like a base ami and and

00:07:52,100 --> 00:07:55,910
that was not even in me because it was

00:07:53,690 --> 00:07:59,419
like downloading and reconfiguring on

00:07:55,910 --> 00:08:02,210
boot so yeah that was our eventual

00:07:59,419 --> 00:08:03,860
outcome so now we're going to talk about

00:08:02,210 --> 00:08:06,770
a little bit on how we unbolted the

00:08:03,860 --> 00:08:08,300
services because pretty much within a

00:08:06,770 --> 00:08:10,700
year we were able to onboard every

00:08:08,300 --> 00:08:15,440
single state stateless service at mule

00:08:10,700 --> 00:08:17,210
soft on to spinnaker so who so it

00:08:15,440 --> 00:08:19,280
required two teams of a team of two

00:08:17,210 --> 00:08:21,289
engineers which is Sohail and I that we

00:08:19,280 --> 00:08:25,460
brought up the hosts the infrastructure

00:08:21,289 --> 00:08:28,699
we managed the caching we earned all the

00:08:25,460 --> 00:08:32,510
configuration within github we developed

00:08:28,699 --> 00:08:34,729
Packer configurations base am eyes for

00:08:32,510 --> 00:08:38,479
our developers to be able to use

00:08:34,729 --> 00:08:40,459
spinnaker very quickly and then we had

00:08:38,479 --> 00:08:42,440
help from the two DevOps engineers to

00:08:40,459 --> 00:08:44,810
manage the Sol configuration and secrets

00:08:42,440 --> 00:08:46,820
management which we ended up going with

00:08:44,810 --> 00:08:49,130
vault within our build environment but

00:08:46,820 --> 00:08:51,800
then we're still using salt for secrets

00:08:49,130 --> 00:08:55,400
within every other environment just

00:08:51,800 --> 00:08:57,410
because of the legacy we also had to

00:08:55,400 --> 00:09:00,350
adjust our build scripts that we have

00:08:57,410 --> 00:09:02,300
provided for our engineers and that

00:09:00,350 --> 00:09:04,540
would simply create their out of fact

00:09:02,300 --> 00:09:10,520
which was rpms because we're running on

00:09:04,540 --> 00:09:11,990
Amazon Linux what so we had a hundred

00:09:10,520 --> 00:09:13,209
plus services that we needed to be

00:09:11,990 --> 00:09:15,490
unbolted within a year

00:09:13,209 --> 00:09:18,579
it was a pretty big mandate the entire

00:09:15,490 --> 00:09:20,439
company was involved from the top down

00:09:18,579 --> 00:09:22,480
it was basically let's get this done

00:09:20,439 --> 00:09:25,809
let's get some maturity into a

00:09:22,480 --> 00:09:28,059
development workflow we needed it to be

00:09:25,809 --> 00:09:30,939
in every major environment including gov

00:09:28,059 --> 00:09:33,129
cloud so we have quite a few

00:09:30,939 --> 00:09:37,029
environments for testing performance QA

00:09:33,129 --> 00:09:39,759
etc we moved to an ami based

00:09:37,029 --> 00:09:42,399
installation baked instead of pulling

00:09:39,759 --> 00:09:46,029
down tables or using salt to mutate the

00:09:42,399 --> 00:09:48,939
state we thought rpm based was perfectly

00:09:46,029 --> 00:09:51,550
fine and we used the nebula plugin from

00:09:48,939 --> 00:09:58,449
Netflix which allowed it to be built

00:09:51,550 --> 00:10:00,670
into our Gradle tools so why deployments

00:09:58,449 --> 00:10:03,069
were very involved limited to deployment

00:10:00,670 --> 00:10:05,649
windows certain applications weren't

00:10:03,069 --> 00:10:07,179
mature enough to move to see ICD but the

00:10:05,649 --> 00:10:09,819
workflows were actually not ready to

00:10:07,179 --> 00:10:12,009
handle it service owners lacked

00:10:09,819 --> 00:10:15,399
ownership and visibility into their

00:10:12,009 --> 00:10:17,470
deployments a lot of time was also spent

00:10:15,399 --> 00:10:19,449
by the DevOps team maintaining and

00:10:17,470 --> 00:10:21,819
firefighting all this infrastructure so

00:10:19,449 --> 00:10:23,879
there was no real time to improve any of

00:10:21,819 --> 00:10:26,439
the processes that we had in place

00:10:23,879 --> 00:10:29,290
testing and roll backs were also

00:10:26,439 --> 00:10:31,779
something that didn't exist while

00:10:29,290 --> 00:10:34,480
testing was did exist but it was done by

00:10:31,779 --> 00:10:36,749
hand by Jenkins and roll backs were

00:10:34,480 --> 00:10:38,740
difficult and it off and just required

00:10:36,749 --> 00:10:43,329
extending the maintenance window or

00:10:38,740 --> 00:10:45,670
declaring an incident so how we started

00:10:43,329 --> 00:10:48,009
with the we just started with two teams

00:10:45,670 --> 00:10:51,249
in the POC phase that allowed us to

00:10:48,009 --> 00:10:53,470
tweak out packer configuration refined

00:10:51,249 --> 00:10:55,299
pipelines through deployments and

00:10:53,470 --> 00:10:58,240
configure proper permissions and

00:10:55,299 --> 00:11:01,029
controls as we're deploying to some of

00:10:58,240 --> 00:11:04,689
these environments such as gov cloud and

00:11:01,029 --> 00:11:07,629
now on premise info ii compliance are

00:11:04,689 --> 00:11:09,220
always involved so having a good are

00:11:07,629 --> 00:11:12,459
back model within the tool that we're

00:11:09,220 --> 00:11:13,959
using is is very important we developed

00:11:12,459 --> 00:11:16,089
our own internal onboarding

00:11:13,959 --> 00:11:18,850
documentation I'm just using a get

00:11:16,089 --> 00:11:21,730
booked it was actually deployed via

00:11:18,850 --> 00:11:23,439
spinnaker and it still is and the the

00:11:21,730 --> 00:11:25,240
step by step project guides were

00:11:23,439 --> 00:11:26,500
actually based on the spinnaker doc so

00:11:25,240 --> 00:11:28,680
that the teams could actually

00:11:26,500 --> 00:11:30,820
and use the application that they were

00:11:28,680 --> 00:11:33,970
that they were learning how to build

00:11:30,820 --> 00:11:36,430
their their spinnaker pipelines from we

00:11:33,970 --> 00:11:39,310
also did try a docker based deploy where

00:11:36,430 --> 00:11:42,640
we would pull down a docker image on the

00:11:39,310 --> 00:11:44,710
bake instead of using rpm

00:11:42,640 --> 00:11:47,350
we only got a few services using that

00:11:44,710 --> 00:11:48,940
due to we we didn't invest too much time

00:11:47,350 --> 00:11:51,670
into it

00:11:48,940 --> 00:11:54,640
pipeline templates there wasn't really a

00:11:51,670 --> 00:11:57,790
big story around this at the time and we

00:11:54,640 --> 00:12:00,490
were unsure about the open source sort

00:11:57,790 --> 00:12:02,470
of future of it because DCD and other

00:12:00,490 --> 00:12:04,810
tools there was always discussion about

00:12:02,470 --> 00:12:06,520
well the next one was going to be so we

00:12:04,810 --> 00:12:08,910
actually wrote out our little Python

00:12:06,520 --> 00:12:11,950
tool that would convert llamó

00:12:08,910 --> 00:12:14,250
and take in best practices that we

00:12:11,950 --> 00:12:17,140
thought and create the pipelines for ow

00:12:14,250 --> 00:12:19,180
for our engineers and then we developed

00:12:17,140 --> 00:12:20,770
a production checklist that we would

00:12:19,180 --> 00:12:23,620
have to go through with InfoSec

00:12:20,770 --> 00:12:25,360
compliance and the heads of their teams

00:12:23,620 --> 00:12:29,890
to just make sure that they were ready

00:12:25,360 --> 00:12:33,430
to go into production with spinnaker so

00:12:29,890 --> 00:12:35,500
now like after after kind of the changes

00:12:33,430 --> 00:12:38,650
that we had implemented and after kind

00:12:35,500 --> 00:12:40,960
of onboarding a bunch of the services

00:12:38,650 --> 00:12:42,880
onto the spinnaker this is kind of like

00:12:40,960 --> 00:12:47,800
a view as to like this is our build

00:12:42,880 --> 00:12:49,330
workflow now so the the practice of

00:12:47,800 --> 00:12:51,220
fundamentals of it that are still the

00:12:49,330 --> 00:12:53,620
same like git commits leads to a build

00:12:51,220 --> 00:12:59,890
in Jenkins and we run the unit test in

00:12:53,620 --> 00:13:02,610
Jenkins and then that triggers that then

00:12:59,890 --> 00:13:05,200
triggers spinnaker to start its pipeline

00:13:02,610 --> 00:13:07,360
this thing this image shows kind of some

00:13:05,200 --> 00:13:09,120
other like another test coverage section

00:13:07,360 --> 00:13:12,370
that is actually triggered later in our

00:13:09,120 --> 00:13:15,100
spinnaker pipeline and then we have some

00:13:12,370 --> 00:13:16,810
artifact repositories that not only do

00:13:15,100 --> 00:13:20,440
like our image scanning but like

00:13:16,810 --> 00:13:24,370
vulnerability scanning and and some

00:13:20,440 --> 00:13:25,840
other compliance related scanning so

00:13:24,370 --> 00:13:29,500
then our actual like spinnaker pipeline

00:13:25,840 --> 00:13:33,100
is comes from the Jenkins trigger we

00:13:29,500 --> 00:13:34,360
bacon ami and then we kind of go through

00:13:33,100 --> 00:13:37,720
our different environments so we have

00:13:34,360 --> 00:13:39,480
like dev we go to development and then

00:13:37,720 --> 00:13:41,160
we have like our QA and

00:13:39,480 --> 00:13:42,930
put like a dot dot staging because we

00:13:41,160 --> 00:13:46,019
have like different performance

00:13:42,930 --> 00:13:48,899
environments and I guess the one

00:13:46,019 --> 00:13:52,740
difference between a lot of teens

00:13:48,899 --> 00:13:55,470
pipelines would be just the order or

00:13:52,740 --> 00:13:59,240
kind of hierarchy of how they promote

00:13:55,470 --> 00:14:01,680
their builds so some teams are not

00:13:59,240 --> 00:14:02,970
mature enough to have like to go through

00:14:01,680 --> 00:14:04,230
performance testing so they don't go

00:14:02,970 --> 00:14:07,110
through performance testing but they'll

00:14:04,230 --> 00:14:08,760
go like development QA staging and then

00:14:07,110 --> 00:14:15,240
staging and production are pretty much

00:14:08,760 --> 00:14:16,980
mirrored accounts we do have block we do

00:14:15,240 --> 00:14:20,730
a lot of we use a lot of the stages in

00:14:16,980 --> 00:14:23,670
spinnaker for kind of not just manual

00:14:20,730 --> 00:14:27,899
judgment not just like having art like

00:14:23,670 --> 00:14:30,029
our backer approvals but like we do we

00:14:27,899 --> 00:14:33,620
do gate a lot of the promotions based on

00:14:30,029 --> 00:14:35,880
how integration tests run in Jenkins and

00:14:33,620 --> 00:14:40,100
and how they're promoted through the

00:14:35,880 --> 00:14:41,970
different pipelines we do also we have

00:14:40,100 --> 00:14:44,100
different deployment models for

00:14:41,970 --> 00:14:46,459
different services so only a few

00:14:44,100 --> 00:14:48,269
services right now do canary deployments

00:14:46,459 --> 00:14:51,899
but that's something that we want to

00:14:48,269 --> 00:14:54,139
improve and and kind of promote to two

00:14:51,899 --> 00:14:58,370
more and that's manual Canaries we're

00:14:54,139 --> 00:14:58,370
investigating Kai answer right now yeah

00:15:00,199 --> 00:15:04,769
so some of the most I guess such one

00:15:03,449 --> 00:15:06,720
touch on some like the most useful

00:15:04,769 --> 00:15:09,000
features that we find from spinnaker is

00:15:06,720 --> 00:15:10,500
like number one is like you know we're

00:15:09,000 --> 00:15:12,480
constantly tweaking spinnaker and the

00:15:10,500 --> 00:15:15,660
faculty just the fact that spinnaker is

00:15:12,480 --> 00:15:17,610
deploying itself is it's just kind of

00:15:15,660 --> 00:15:21,329
nice like every time we make changes to

00:15:17,610 --> 00:15:23,910
the to the repo every every new Packer

00:15:21,329 --> 00:15:26,130
configuration every new configuration or

00:15:23,910 --> 00:15:28,410
every new update or feature that comes

00:15:26,130 --> 00:15:30,000
out and we want to enable it it's pretty

00:15:28,410 --> 00:15:32,730
straightforward on how we can get that

00:15:30,000 --> 00:15:36,930
those changes up to production our build

00:15:32,730 --> 00:15:41,160
production quickly notifications so our

00:15:36,930 --> 00:15:43,589
slack notifications are our clutch and a

00:15:41,160 --> 00:15:44,880
lot of teams are really happy with like

00:15:43,589 --> 00:15:47,399
the amount of information that they get

00:15:44,880 --> 00:15:48,870
from spinnaker the nice thing is like

00:15:47,399 --> 00:15:52,350
when you walk around our office now is

00:15:48,870 --> 00:15:53,310
like almost every developer screen like

00:15:52,350 --> 00:15:55,829
you know you got to monitor

00:15:53,310 --> 00:15:59,009
once one monitor has you know spinnaker

00:15:55,829 --> 00:16:04,139
open which is like a year ago it's just

00:15:59,009 --> 00:16:07,050
crazy how that's totally changed custom

00:16:04,139 --> 00:16:08,899
web hooks pipe light maybe you should

00:16:07,050 --> 00:16:12,029
yeah yeah I can speak a little bit more

00:16:08,899 --> 00:16:16,290
to this manual judgments we actually use

00:16:12,029 --> 00:16:17,970
a lot because of the Saturday

00:16:16,290 --> 00:16:20,220
deployments that we still have to do for

00:16:17,970 --> 00:16:23,160
most of our services manual judgments

00:16:20,220 --> 00:16:26,040
come in handy for getting out out effect

00:16:23,160 --> 00:16:28,110
right up to the to the manual judgment

00:16:26,040 --> 00:16:29,550
and then it can sit there and we can

00:16:28,110 --> 00:16:31,139
just wait till the release window and

00:16:29,550 --> 00:16:34,259
then all the teams have to do is go in

00:16:31,139 --> 00:16:35,670
and prove it which is fantastic by the

00:16:34,259 --> 00:16:37,470
custom web hooks what we're actually

00:16:35,670 --> 00:16:39,870
using this for now is is to actually

00:16:37,470 --> 00:16:43,589
send our monitoring tools such as New

00:16:39,870 --> 00:16:45,689
Relic and others deployment stats and

00:16:43,589 --> 00:16:48,660
information from the deployment whether

00:16:45,689 --> 00:16:50,309
it succeeds past so there's a new

00:16:48,660 --> 00:16:52,019
feature that you can actually do global

00:16:50,309 --> 00:16:55,439
web hooks so it basically creates a

00:16:52,019 --> 00:16:57,329
stage for the other teams to consume so

00:16:55,439 --> 00:16:59,519
all they have to do is now next to their

00:16:57,329 --> 00:17:02,189
bake or deploy they can do a drop-down

00:16:59,519 --> 00:17:03,750
box and say send you relic the

00:17:02,189 --> 00:17:06,659
deployment information so we've

00:17:03,750 --> 00:17:09,209
abstracted that away and it's all baked

00:17:06,659 --> 00:17:10,890
into the same configuration that Sohail

00:17:09,209 --> 00:17:13,079
was just talking about pipeline

00:17:10,890 --> 00:17:15,750
expressions this is how we handle our

00:17:13,079 --> 00:17:17,549
automatic roll backs right now so we'll

00:17:15,750 --> 00:17:20,699
run out testing suites after a deploy

00:17:17,549 --> 00:17:22,439
and it'll look at the the Jenkins job or

00:17:20,699 --> 00:17:25,649
the all the results from the testing and

00:17:22,439 --> 00:17:28,250
based on the pass/fail of that will

00:17:25,649 --> 00:17:32,010
actually roll back or we'll leave it

00:17:28,250 --> 00:17:33,630
then with our own pipelines as code it

00:17:32,010 --> 00:17:37,559
was really nice to have the ability to

00:17:33,630 --> 00:17:39,990
lock the pipeline's within the UI this

00:17:37,559 --> 00:17:42,360
allowed the teams to just store and

00:17:39,990 --> 00:17:45,510
mutate their pipeline within their repo

00:17:42,360 --> 00:17:49,110
but not accidentally touch a edit

00:17:45,510 --> 00:17:52,440
something within the pipeline so we

00:17:49,110 --> 00:17:54,870
touched a little bit on kubernetes as we

00:17:52,440 --> 00:17:56,510
run an on-prem product big focus right

00:17:54,870 --> 00:17:59,460
now is to move everything to kubernetes

00:17:56,510 --> 00:18:03,929
so we can deploy it an entire platform

00:17:59,460 --> 00:18:05,700
wherever bare metal cloud we are

00:18:03,929 --> 00:18:07,230
investigating using spinnaker for it

00:18:05,700 --> 00:18:10,289
we've had a look

00:18:07,230 --> 00:18:12,299
the v2 provider we had a look when it

00:18:10,289 --> 00:18:14,519
was in early alpha we're waiting for the

00:18:12,299 --> 00:18:17,309
beta update which will be really nice to

00:18:14,519 --> 00:18:20,279
tests so the good that we found on it it

00:18:17,309 --> 00:18:22,169
provides developers a dashboard view

00:18:20,279 --> 00:18:24,330
that they're used to with their ami base

00:18:22,169 --> 00:18:26,789
deployments running in our kubernetes

00:18:24,330 --> 00:18:28,769
cluster and it abstract sit away in the

00:18:26,789 --> 00:18:31,409
same in server groups in their

00:18:28,769 --> 00:18:33,809
infrastructure view cluster view and

00:18:31,409 --> 00:18:35,850
they they really they've really grown to

00:18:33,809 --> 00:18:37,679
love the UI and it does provide them a

00:18:35,850 --> 00:18:39,149
way that they can get a lot of

00:18:37,679 --> 00:18:41,779
information without having to look

00:18:39,149 --> 00:18:45,179
elsewhere such as the Amazon console

00:18:41,779 --> 00:18:47,760
actually another thing is like you know

00:18:45,179 --> 00:18:50,909
previously everyone had access to AWS

00:18:47,760 --> 00:18:53,820
they do yes console and like you know we

00:18:50,909 --> 00:18:56,909
do we have implemented stuff like using

00:18:53,820 --> 00:18:59,639
like key cloak and and or at least using

00:18:56,909 --> 00:19:03,029
I guess LDAP the role assumption to like

00:18:59,639 --> 00:19:04,799
basically limit who can see what and in

00:19:03,029 --> 00:19:07,110
these atavistic counts but really what

00:19:04,799 --> 00:19:08,789
we want is to kind of totally abstract

00:19:07,110 --> 00:19:12,720
all that we don't need that many people

00:19:08,789 --> 00:19:14,279
in any of us we just need people they

00:19:12,720 --> 00:19:15,480
just all they only need to see what they

00:19:14,279 --> 00:19:16,799
care about they don't need to see the

00:19:15,480 --> 00:19:18,360
whole picture they just need to worry

00:19:16,799 --> 00:19:21,720
about their deployments their

00:19:18,360 --> 00:19:23,309
applications you know the the the

00:19:21,720 --> 00:19:25,649
information that they need to know about

00:19:23,309 --> 00:19:28,500
you know you know DNS endpoints where to

00:19:25,649 --> 00:19:31,730
test where to it's all available for

00:19:28,500 --> 00:19:34,169
them the deployments are treated as a

00:19:31,730 --> 00:19:36,570
unified version so one of the really

00:19:34,169 --> 00:19:39,990
cool things that spinnaker does with the

00:19:36,570 --> 00:19:41,730
kubernetes v2 provider is that it will

00:19:39,990 --> 00:19:44,789
actually package up your configuration

00:19:41,730 --> 00:19:46,590
and your container all as one sort of

00:19:44,789 --> 00:19:48,389
artifact so it's very easy to roll

00:19:46,590 --> 00:19:50,279
forward and roll back

00:19:48,389 --> 00:19:54,179
with the configuration changes that

00:19:50,279 --> 00:19:55,799
you've made previously it wasn't like

00:19:54,179 --> 00:19:58,950
that so you're updating like it's

00:19:55,799 --> 00:20:00,510
sending all the manifests out and it's

00:19:58,950 --> 00:20:05,130
really hard to work out which ones

00:20:00,510 --> 00:20:07,049
actually causing the issue easily emit

00:20:05,130 --> 00:20:10,080
manifest changes and events to an audit

00:20:07,049 --> 00:20:11,940
log we have all spinnaker logs pipeline

00:20:10,080 --> 00:20:13,289
logs going to our logging

00:20:11,940 --> 00:20:16,200
infrastructures so it's great to have

00:20:13,289 --> 00:20:19,620
that that nice view of it and then

00:20:16,200 --> 00:20:20,370
annotation driven UI basically you can

00:20:19,620 --> 00:20:22,080
add annotation

00:20:20,370 --> 00:20:24,240
to your manifest to make spinnaker do

00:20:22,080 --> 00:20:27,450
all sorts of things with it especially

00:20:24,240 --> 00:20:28,770
just for kubernetes and it's it's good

00:20:27,450 --> 00:20:31,860
to see that they're following the model

00:20:28,770 --> 00:20:35,520
that that kubernetes is is set forward

00:20:31,860 --> 00:20:38,130
and it's really really powerful so the

00:20:35,520 --> 00:20:40,710
bad that we saw at first ad lacks

00:20:38,130 --> 00:20:44,280
support for home templating all our

00:20:40,710 --> 00:20:45,960
kubernetes stuff was home templated so

00:20:44,280 --> 00:20:47,970
this was a little bit of a blow because

00:20:45,960 --> 00:20:50,580
it would have made a when it didn't

00:20:47,970 --> 00:20:53,580
exist we would have had to basically

00:20:50,580 --> 00:20:56,670
rewrite all of our manifests secret

00:20:53,580 --> 00:20:59,330
hydration right now it's sort of limited

00:20:56,670 --> 00:21:02,640
where it's get or s3 for storing

00:20:59,330 --> 00:21:05,790
configuration and secrets and then our

00:21:02,640 --> 00:21:09,179
biggest well my biggest issue with it is

00:21:05,790 --> 00:21:11,250
that it renders every manifest that you

00:21:09,179 --> 00:21:12,809
deploy to kubernetes into the UI which

00:21:11,250 --> 00:21:15,179
includes secrets which if you're

00:21:12,809 --> 00:21:18,090
familiar is just a base64 encoded value

00:21:15,179 --> 00:21:20,929
which means anyone with read access to

00:21:18,090 --> 00:21:23,760
that pipeline can see all those secrets

00:21:20,929 --> 00:21:25,740
there is no dynamic configuration for

00:21:23,760 --> 00:21:27,900
new clusters right now or for existing

00:21:25,740 --> 00:21:32,429
clusters we use temp Rito khun's that

00:21:27,900 --> 00:21:34,230
expire it requires a full restart of

00:21:32,429 --> 00:21:36,720
cloud driver to read in the new coop

00:21:34,230 --> 00:21:37,890
config which is really frustrating

00:21:36,720 --> 00:21:40,740
because we don't want to have to roll

00:21:37,890 --> 00:21:44,190
over cloud driver every you know every

00:21:40,740 --> 00:21:45,450
six hours or something and then and I

00:21:44,190 --> 00:21:49,290
I'm not sure if this is still true but

00:21:45,450 --> 00:21:50,970
are back for namespaces there are back

00:21:49,290 --> 00:21:53,970
model and spinnaker is quite nice where

00:21:50,970 --> 00:21:55,620
you can limit it per AWS account but now

00:21:53,970 --> 00:21:58,410
that we're dealing with namespaces in a

00:21:55,620 --> 00:22:00,720
single cluster we we're looking forward

00:21:58,410 --> 00:22:05,040
to if that gets included where you'll be

00:22:00,720 --> 00:22:06,390
able to isolate teams to a namespace so

00:22:05,040 --> 00:22:09,420
yes I'll just give like a little

00:22:06,390 --> 00:22:11,820
retrospective unlike kind of the like

00:22:09,420 --> 00:22:13,740
how we view spinnaker and and what we've

00:22:11,820 --> 00:22:16,260
kind of learned over the over the past

00:22:13,740 --> 00:22:19,550
year so the and this is kind of that

00:22:16,260 --> 00:22:21,870
same format good bad okay so the good

00:22:19,550 --> 00:22:24,330
single pane of glass view like we really

00:22:21,870 --> 00:22:26,190
love the UI we love how it organizes

00:22:24,330 --> 00:22:28,260
your product and your applications

00:22:26,190 --> 00:22:29,429
within that product we love the

00:22:28,260 --> 00:22:31,290
infrastructure view that gives people

00:22:29,429 --> 00:22:33,390
information about their server groups

00:22:31,290 --> 00:22:35,049
their elby's their instance data like

00:22:33,390 --> 00:22:37,240
user

00:22:35,049 --> 00:22:39,250
and we loved that it removed the need

00:22:37,240 --> 00:22:43,450
for everyone to have access to the 80

00:22:39,250 --> 00:22:45,279
best console teams have ownership and

00:22:43,450 --> 00:22:48,610
confidence over their deployments so

00:22:45,279 --> 00:22:49,720
they you know one of the things that

00:22:48,610 --> 00:22:52,750
maybe we didn't touch on during

00:22:49,720 --> 00:22:54,820
onboarding was that when we initially

00:22:52,750 --> 00:22:55,929
did when we initially started onboarding

00:22:54,820 --> 00:22:57,909
a lot of these applications

00:22:55,929 --> 00:22:59,559
it was very hand hand holding and like

00:22:57,909 --> 00:23:02,889
you know we started with only one or two

00:22:59,559 --> 00:23:04,029
teams and we were kind of and it was it

00:23:02,889 --> 00:23:07,330
was interesting because we were building

00:23:04,029 --> 00:23:08,889
the documentation and and and learning

00:23:07,330 --> 00:23:11,289
from each team like what information

00:23:08,889 --> 00:23:15,399
teams needed to be able to successfully

00:23:11,289 --> 00:23:17,289
onboard themselves but once we had that

00:23:15,399 --> 00:23:20,320
documentation once we had that maturity

00:23:17,289 --> 00:23:21,850
you know within our team to like kind of

00:23:20,320 --> 00:23:24,100
hand over just a little bit of

00:23:21,850 --> 00:23:27,429
information to the teams they started

00:23:24,100 --> 00:23:29,950
onboarding themselves so there was we

00:23:27,429 --> 00:23:32,909
have a slack channel called spinnaker

00:23:29,950 --> 00:23:35,769
and you know it was interesting because

00:23:32,909 --> 00:23:37,750
after a week or two we just started

00:23:35,769 --> 00:23:39,460
getting pings and requests from teams

00:23:37,750 --> 00:23:42,190
that we didn't even we weren't even on

00:23:39,460 --> 00:23:43,690
our plan for you know onboarding and

00:23:42,190 --> 00:23:45,070
they were just getting on spinnaker

00:23:43,690 --> 00:23:46,179
themselves they were they were just

00:23:45,070 --> 00:23:48,370
heard they heard about it from other

00:23:46,179 --> 00:23:50,230
teams and they were they were just

00:23:48,370 --> 00:23:51,850
jumping the gun and they were being able

00:23:50,230 --> 00:23:54,970
to onboard themselves maybe they run

00:23:51,850 --> 00:23:57,809
into an issue here there but the cool

00:23:54,970 --> 00:24:00,669
thing was it was kind of like I think

00:23:57,809 --> 00:24:02,980
Brandon had used this term in his talk

00:24:00,669 --> 00:24:05,940
but it was like it was land and expand

00:24:02,980 --> 00:24:08,649
so he was like we landed it and then

00:24:05,940 --> 00:24:11,500
just everyone just started jumping on

00:24:08,649 --> 00:24:13,120
and so our you know what seemed like a

00:24:11,500 --> 00:24:15,580
daunting task of one year to onboard

00:24:13,120 --> 00:24:19,059
like so many different services actually

00:24:15,580 --> 00:24:22,360
we met that goal because a lot of teams

00:24:19,059 --> 00:24:25,389
were kind of insistent on on moving onto

00:24:22,360 --> 00:24:30,100
that platform as I said earlier

00:24:25,389 --> 00:24:32,350
spinnaker deploying spinnaker the other

00:24:30,100 --> 00:24:34,240
things like teams are now able to focus

00:24:32,350 --> 00:24:37,450
more on development and not on dealing

00:24:34,240 --> 00:24:39,010
with Saturday deploys and also the

00:24:37,450 --> 00:24:41,559
well-defined powerful API that we've

00:24:39,010 --> 00:24:43,480
been like learning to to kind of

00:24:41,559 --> 00:24:45,970
interact with like Matt had written his

00:24:43,480 --> 00:24:48,169
own Concours resource

00:24:45,970 --> 00:24:49,370
and if you want tech for that yeah

00:24:48,169 --> 00:24:50,990
basically we were able to write a

00:24:49,370 --> 00:24:57,049
concourse resource to extend it to

00:24:50,990 --> 00:24:59,030
support that CI there really simple and

00:24:57,049 --> 00:25:01,190
it's also we were able to write

00:24:59,030 --> 00:25:02,720
integration tests basically we would

00:25:01,190 --> 00:25:05,270
have a Jenkins job that runs when we're

00:25:02,720 --> 00:25:07,039
deploying spinnaker itself it would call

00:25:05,270 --> 00:25:12,799
out and we would have a pipeline as code

00:25:07,039 --> 00:25:14,450
and it would run our pipeline and that

00:25:12,799 --> 00:25:20,659
was actually that was our motto at our

00:25:14,450 --> 00:25:22,789
armory first some of the bad stuffs we

00:25:20,659 --> 00:25:26,600
had we found we were like you know we

00:25:22,789 --> 00:25:28,250
did that like because the spinnaker is

00:25:26,600 --> 00:25:29,480
so powerful and there's like so many

00:25:28,250 --> 00:25:36,049
different ways that you can set up your

00:25:29,480 --> 00:25:37,640
pipeline you do end up with just totally

00:25:36,049 --> 00:25:41,330
different pipelines so like some teams

00:25:37,640 --> 00:25:43,820
will have because some people I guess

00:25:41,330 --> 00:25:45,440
like people have a because you can make

00:25:43,820 --> 00:25:49,429
it so powerful you can end up with a

00:25:45,440 --> 00:25:51,440
pipeline that is like you know 30 steps

00:25:49,429 --> 00:25:52,850
and different and split up into

00:25:51,440 --> 00:25:55,789
different pieces and then you kind of

00:25:52,850 --> 00:25:57,200
have to kind of navigate to kind of

00:25:55,789 --> 00:25:59,480
figure out what that developer was

00:25:57,200 --> 00:26:02,150
trying to do so that was kind of a

00:25:59,480 --> 00:26:04,340
little bit of our fault in terms of like

00:26:02,150 --> 00:26:06,710
being able to enforce standard standard

00:26:04,340 --> 00:26:09,860
kind of pipelines or using the the

00:26:06,710 --> 00:26:13,010
pipeline templates early because some

00:26:09,860 --> 00:26:14,270
teams kind of they wanted to when they

00:26:13,010 --> 00:26:15,799
were on boarding on the spinnaker they

00:26:14,270 --> 00:26:17,360
kind of felt that that also meant that

00:26:15,799 --> 00:26:18,980
they were gonna still do things the way

00:26:17,360 --> 00:26:21,740
they did before just using a different

00:26:18,980 --> 00:26:25,390
tool so it ended up in like kind of very

00:26:21,740 --> 00:26:31,880
complex very you know snake-like

00:26:25,390 --> 00:26:35,210
pipelines the are back authorization

00:26:31,880 --> 00:26:37,490
like the we we like on the are back in

00:26:35,210 --> 00:26:39,500
spinnaker but there are some things that

00:26:37,490 --> 00:26:40,909
I noticed we did notice some stuff that

00:26:39,500 --> 00:26:43,220
like we do want it

00:26:40,909 --> 00:26:46,940
want some maybe a little bit more

00:26:43,220 --> 00:26:50,659
granular control over the permissions

00:26:46,940 --> 00:26:54,140
model model to be able to like not view

00:26:50,659 --> 00:26:56,560
and edit or be able to see pipelines and

00:26:54,140 --> 00:27:02,410
edit pipeline so maybe not execute them

00:26:56,560 --> 00:27:06,130
so some things along that we have a our

00:27:02,410 --> 00:27:09,160
production account has so many instances

00:27:06,130 --> 00:27:13,210
that you can't even load it in the 80s

00:27:09,160 --> 00:27:15,220
console like it it's it's it's like your

00:27:13,210 --> 00:27:18,970
UI gets rate limited just trying to load

00:27:15,220 --> 00:27:21,400
our account and so spinnaker definitely

00:27:18,970 --> 00:27:26,290
feels that we had a lot of issues with

00:27:21,400 --> 00:27:28,450
with Redis and and and also just like

00:27:26,290 --> 00:27:33,580
spinnaker itself being rate limited like

00:27:28,450 --> 00:27:35,350
crazy bye-bye AWS and then just like

00:27:33,580 --> 00:27:37,390
some small Nets who are like you know a

00:27:35,350 --> 00:27:38,740
lot of Packer bills being left like left

00:27:37,390 --> 00:27:40,270
around are your best account we had some

00:27:38,740 --> 00:27:42,130
lambda functions to clean it up but it's

00:27:40,270 --> 00:27:44,200
like there's like random things that

00:27:42,130 --> 00:27:45,460
you'll see like maybe like SSH key or

00:27:44,200 --> 00:27:46,900
key pairs that you don't even think

00:27:45,460 --> 00:27:49,120
about then we got like millions of key

00:27:46,900 --> 00:27:50,980
pairs that are generated by Packer in

00:27:49,120 --> 00:27:54,460
there and we didn't even think to clean

00:27:50,980 --> 00:27:56,230
those up but and then like you know

00:27:54,460 --> 00:27:57,870
updates sometimes we when we're trying

00:27:56,230 --> 00:28:01,630
to jump to the latest version of

00:27:57,870 --> 00:28:03,760
spinnaker it would break then we'd have

00:28:01,630 --> 00:28:05,560
to roll back and then and because so

00:28:03,760 --> 00:28:07,300
many people are using spinnaker now it's

00:28:05,560 --> 00:28:10,540
like we needed a proper SLA for

00:28:07,300 --> 00:28:15,430
spinnaker because everyone's so relying

00:28:10,540 --> 00:28:16,690
on it and just like I guess maybe with

00:28:15,430 --> 00:28:18,850
the way that we're deploying spinnaker

00:28:16,690 --> 00:28:20,800
it was a little resource heavy but we

00:28:18,850 --> 00:28:23,500
plan on moving spinnaker over to our

00:28:20,800 --> 00:28:24,700
communities build cluster and that'll

00:28:23,500 --> 00:28:26,230
give us a little bit more granular

00:28:24,700 --> 00:28:27,850
control on like how we control the

00:28:26,230 --> 00:28:31,000
replicas counts of the different

00:28:27,850 --> 00:28:32,680
services and scale up only the the the

00:28:31,000 --> 00:28:37,720
parts of spinnaker that we need you know

00:28:32,680 --> 00:28:39,820
more resources on and then just some of

00:28:37,720 --> 00:28:43,990
the ugly was like and it's kind of a

00:28:39,820 --> 00:28:46,450
mixture of like spinnaker is not exactly

00:28:43,990 --> 00:28:48,010
built for like our deployment lifecycle

00:28:46,450 --> 00:28:51,190
like we feel like spinnaker is really

00:28:48,010 --> 00:28:53,770
really great for production but like a

00:28:51,190 --> 00:28:57,640
lot of our teams use very interesting

00:28:53,770 --> 00:28:59,350
like branching strategies and one thing

00:28:57,640 --> 00:29:02,350
we have with spinnaker is like the the

00:28:59,350 --> 00:29:04,960
like wildcard branches or being able to

00:29:02,350 --> 00:29:07,090
follow like different branch branches in

00:29:04,960 --> 00:29:10,560
github we were looking for maybe some

00:29:07,090 --> 00:29:10,560
some support around that

00:29:11,170 --> 00:29:15,260
the fact that we do need to read the

00:29:13,400 --> 00:29:16,730
pushpin occur a lot of time to when

00:29:15,260 --> 00:29:18,920
we're changing configuration and I know

00:29:16,730 --> 00:29:22,880
some of that starting to change but but

00:29:18,920 --> 00:29:25,610
that was kind of like a pain point one

00:29:22,880 --> 00:29:26,900
of the things we had was like if the one

00:29:25,610 --> 00:29:29,300
thing one thing that we would really

00:29:26,900 --> 00:29:32,510
like is like maybe a terraform stage in

00:29:29,300 --> 00:29:34,910
spinnaker because now it's like we have

00:29:32,510 --> 00:29:36,470
state that applications need but that's

00:29:34,910 --> 00:29:38,810
managing a different that's managed by a

00:29:36,470 --> 00:29:40,370
different platform by Jenkins in the

00:29:38,810 --> 00:29:42,140
state stored somewhere else which maybe

00:29:40,370 --> 00:29:44,720
is not a huge hill but at least there is

00:29:42,140 --> 00:29:46,640
states stored somewhere but just the

00:29:44,720 --> 00:29:48,920
fact that it still kind of decoupled

00:29:46,640 --> 00:29:50,840
from you need to set up a lot of

00:29:48,920 --> 00:29:53,000
infrastructure for spinnaker to find

00:29:50,840 --> 00:29:54,920
like the e/l bees and understand that

00:29:53,000 --> 00:29:57,980
that's this is an application and then

00:29:54,920 --> 00:30:01,940
and then move forward with with kind of

00:29:57,980 --> 00:30:03,380
like deploying that application and yeah

00:30:01,940 --> 00:30:04,850
so like creating dummy projects for

00:30:03,380 --> 00:30:06,110
spinning a girl able to find if your

00:30:04,850 --> 00:30:08,960
load bouncers don't match the same

00:30:06,110 --> 00:30:11,120
naming scheme stuff like that

00:30:08,960 --> 00:30:12,500
and then some stuff we had raised

00:30:11,120 --> 00:30:15,950
earlier

00:30:12,500 --> 00:30:18,620
props to armory because I feel like open

00:30:15,950 --> 00:30:21,650
source documentation is not it needs to

00:30:18,620 --> 00:30:23,180
be kind of brought up and we luckily we

00:30:21,650 --> 00:30:25,460
had some stuff from armory and then also

00:30:23,180 --> 00:30:28,970
we just got it got dirty and went into

00:30:25,460 --> 00:30:31,310
the code thoughts for the future so just

00:30:28,970 --> 00:30:33,260
a we just wanted a few things that we've

00:30:31,310 --> 00:30:35,360
been thinking about and maybe like

00:30:33,260 --> 00:30:37,160
modular components such as a vault

00:30:35,360 --> 00:30:40,130
extension would be really nice to your

00:30:37,160 --> 00:30:43,280
hydrate secrets if they can solve it not

00:30:40,130 --> 00:30:44,780
rendering in the UI some stages we

00:30:43,280 --> 00:30:47,210
mentioned terraform and I know that's

00:30:44,780 --> 00:30:50,270
being worked on as well as lambda

00:30:47,210 --> 00:30:52,910
functions also one thing that we were

00:30:50,270 --> 00:30:54,800
really hoping and now compliance team is

00:30:52,910 --> 00:30:58,730
maybe a security check for out of facts

00:30:54,800 --> 00:31:02,960
is your is your rpm signs as your docker

00:30:58,730 --> 00:31:05,360
image signed maybe reach out to Nexus IQ

00:31:02,960 --> 00:31:08,150
where and and find out the results and

00:31:05,360 --> 00:31:11,630
catch it before it's sort of on the host

00:31:08,150 --> 00:31:14,180
because you know it's really easy to

00:31:11,630 --> 00:31:16,060
remove the GPG check and a young repo

00:31:14,180 --> 00:31:18,980
just from the user data so having this

00:31:16,060 --> 00:31:21,320
gating off applications before they're

00:31:18,980 --> 00:31:23,370
deployed would be fantastic and then

00:31:21,320 --> 00:31:26,700
more deployment metrics

00:31:23,370 --> 00:31:29,010
I don't know of anyone that's actually

00:31:26,700 --> 00:31:30,810
put a nice console within the spinnaker

00:31:29,010 --> 00:31:32,640
UI that that would allow us to see

00:31:30,810 --> 00:31:34,440
deployment metrics because I know that

00:31:32,640 --> 00:31:38,910
data is there so just would just be

00:31:34,440 --> 00:31:40,980
fantastic to have a good view so yeah we

00:31:38,910 --> 00:31:44,730
just love spinnaker for production

00:31:40,980 --> 00:31:47,010
workflows and it needs work for like

00:31:44,730 --> 00:31:49,440
kind of our iterative deployment

00:31:47,010 --> 00:31:51,600
workflows and that's something that like

00:31:49,440 --> 00:31:54,450
we'd like to provide feedback and like

00:31:51,600 --> 00:31:57,330
maybe work with the community to like to

00:31:54,450 --> 00:32:01,320
give to kind of help help them help us

00:31:57,330 --> 00:32:03,110
in a sense yeah thanks for listening

00:32:01,320 --> 00:32:08,429
cool thank you

00:32:03,110 --> 00:32:10,490
[Applause]

00:32:08,429 --> 00:32:10,490

YouTube URL: https://www.youtube.com/watch?v=ChxX_CAaODo


