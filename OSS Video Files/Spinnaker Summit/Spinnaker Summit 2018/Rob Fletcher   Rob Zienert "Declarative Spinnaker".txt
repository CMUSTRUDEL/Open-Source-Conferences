Title: Rob Fletcher   Rob Zienert "Declarative Spinnaker"
Publication date: 2018-10-27
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,270 --> 00:00:05,390
[Music]

00:00:09,780 --> 00:00:13,270
[Music]

00:00:17,070 --> 00:00:26,490
this is later presented to you by the

00:00:22,050 --> 00:00:27,990
Council of Rob's which is us here for

00:00:26,490 --> 00:00:30,869
Council

00:00:27,990 --> 00:00:33,930
I'm Ramsey on a software engineer at

00:00:30,869 --> 00:00:38,840
Netflix working on spinnaker and Robin

00:00:33,930 --> 00:00:40,920
Fletcher also on the spinnaker team

00:00:38,840 --> 00:00:44,520
let's hear what we're going to talk

00:00:40,920 --> 00:00:48,329
about today is just a brief history of

00:00:44,520 --> 00:00:50,370
spinnaker why it is the way it is why

00:00:48,329 --> 00:00:54,600
we're interested in declarative in

00:00:50,370 --> 00:00:59,760
general the landscape of declarative and

00:00:54,600 --> 00:01:02,280
open source you know you guys read keel

00:00:59,760 --> 00:01:07,560
and then the future and finally well

00:01:02,280 --> 00:01:10,740
we'll finish with some Q&A so get a

00:01:07,560 --> 00:01:12,720
little boring stuff out of the way in

00:01:10,740 --> 00:01:14,430
case you guys aren't totally aware of

00:01:12,720 --> 00:01:18,060
the difference between declared an

00:01:14,430 --> 00:01:20,520
imperative imperative is really defining

00:01:18,060 --> 00:01:24,450
how you want to get to your desire to

00:01:20,520 --> 00:01:26,220
state and declarative is I want my state

00:01:24,450 --> 00:01:29,360
to look like this and please get me

00:01:26,220 --> 00:01:29,360
there as literally as possible

00:01:29,670 --> 00:01:35,939
you know when you're doing imperative

00:01:32,220 --> 00:01:37,680
you have to define how you're going to

00:01:35,939 --> 00:01:41,159
be validating that a particular asset

00:01:37,680 --> 00:01:44,880
has been released correctly you need to

00:01:41,159 --> 00:01:47,700
be able to define if in case any part of

00:01:44,880 --> 00:01:51,570
that release process goes wrong how to

00:01:47,700 --> 00:01:55,020
recover and rollback whereas declarative

00:01:51,570 --> 00:01:58,080
if something goes wrong you can just set

00:01:55,020 --> 00:02:03,960
the version back and they will

00:01:58,080 --> 00:02:07,770
reconverge back designers so spinnaker

00:02:03,960 --> 00:02:11,370
is today entirely imperative and that's

00:02:07,770 --> 00:02:16,370
primarily because of asgaard the system

00:02:11,370 --> 00:02:19,140
that predates spinnaker at Netflix was a

00:02:16,370 --> 00:02:21,750
system that everyone used and it was a

00:02:19,140 --> 00:02:25,500
lot of knobs quite like this actually

00:02:21,750 --> 00:02:29,340
looked exactly like that a lot of manual

00:02:25,500 --> 00:02:31,170
imperative toil lots of knobs everyone

00:02:29,340 --> 00:02:33,690
was able to kind of do exactly what they

00:02:31,170 --> 00:02:37,470
wanted to interpret mostly from

00:02:33,690 --> 00:02:41,810
customers knowing exactly what they need

00:02:37,470 --> 00:02:43,890
for a deployment and they know best and

00:02:41,810 --> 00:02:47,549
imperative also allows a lot of

00:02:43,890 --> 00:02:51,269
flexibility we're able to develop a

00:02:47,549 --> 00:02:54,060
single feature like say a deploy stage

00:02:51,269 --> 00:02:55,890
and then people can implement it with

00:02:54,060 --> 00:02:59,070
different strategies and that kind of

00:02:55,890 --> 00:03:01,470
thing to kind of fine tune it for their

00:02:59,070 --> 00:03:03,870
needs so that allowed us to get a very

00:03:01,470 --> 00:03:06,750
wide adoption and very quickly with not

00:03:03,870 --> 00:03:08,609
a whole lot of effort from our side and

00:03:06,750 --> 00:03:14,660
people were able to kind of self

00:03:08,609 --> 00:03:14,660
discover what best practices or delivery

00:03:14,900 --> 00:03:19,560
we're out there so we didn't have to

00:03:17,430 --> 00:03:21,329
actually dictate to anyone you should

00:03:19,560 --> 00:03:26,220
deploy your software in such and such a

00:03:21,329 --> 00:03:33,660
way so why declare that all I don't have

00:03:26,220 --> 00:03:35,100
any super cats so speaking of toil a lot

00:03:33,660 --> 00:03:38,280
of people are now getting to the point

00:03:35,100 --> 00:03:42,360
where they don't really care about all

00:03:38,280 --> 00:03:44,220
the knobs they don't care about the

00:03:42,360 --> 00:03:45,659
specifics of getting their software its

00:03:44,220 --> 00:03:48,629
introduction they just want to get to

00:03:45,659 --> 00:03:49,409
production in the safest and fastest way

00:03:48,629 --> 00:03:52,470
possible

00:03:49,409 --> 00:03:55,049
so in a declarative way if you say I

00:03:52,470 --> 00:03:57,450
want to have my production system look

00:03:55,049 --> 00:04:00,480
like this with this version we can

00:03:57,450 --> 00:04:02,549
introduce best practices behind the

00:04:00,480 --> 00:04:04,500
scenes without people necessarily having

00:04:02,549 --> 00:04:07,080
to concern themselves one of the biggest

00:04:04,500 --> 00:04:11,730
problems that's what today is

00:04:07,080 --> 00:04:13,890
we are continually iterating on what is

00:04:11,730 --> 00:04:16,620
the best way to deploy the production

00:04:13,890 --> 00:04:18,690
maybe we do canary and then we introduce

00:04:16,620 --> 00:04:22,680
something like squeeze testing to figure

00:04:18,690 --> 00:04:25,590
out what right-sizing instance sizes in

00:04:22,680 --> 00:04:26,940
order for people to kind of stay on

00:04:25,590 --> 00:04:31,350
track with that it's a lot of cat

00:04:26,940 --> 00:04:33,150
wrangling and you know it it's really

00:04:31,350 --> 00:04:34,980
hard to do that coordinating across

00:04:33,150 --> 00:04:38,010
thousands of developers that kind of

00:04:34,980 --> 00:04:39,810
thing and you know people just kind of

00:04:38,010 --> 00:04:43,140
get fatigued with it and eventually

00:04:39,810 --> 00:04:45,780
don't do it so by defining and things of

00:04:43,140 --> 00:04:49,140
just I have had this desired state we're

00:04:45,780 --> 00:04:53,030
able to have a central team iterate for

00:04:49,140 --> 00:04:56,940
people what the best practices are and

00:04:53,030 --> 00:04:58,950
it also gives a a better world backstory

00:04:56,940 --> 00:05:01,230
because we ran the store hermetic State

00:04:58,950 --> 00:05:02,850
and when we want to go back to the

00:05:01,230 --> 00:05:08,850
previous version we know exactly what

00:05:02,850 --> 00:05:10,860
that was and we just so the declared

00:05:08,850 --> 00:05:14,190
landscape today there's more than this

00:05:10,860 --> 00:05:16,950
obviously but confirmation and

00:05:14,190 --> 00:05:19,290
kubernetes are for spinnaker kind of

00:05:16,950 --> 00:05:21,300
non-starters because they're called

00:05:19,290 --> 00:05:24,720
specific we can't really use

00:05:21,300 --> 00:05:26,250
confirmation internally for spinning

00:05:24,720 --> 00:05:29,100
that because you know not everyone's on

00:05:26,250 --> 00:05:31,620
AWS similarly not everyone sees and

00:05:29,100 --> 00:05:35,260
kubernetes we don't use the other night

00:05:31,620 --> 00:05:37,420
but with like kubernetes here bees and I

00:05:35,260 --> 00:05:41,350
think there are some affordances for

00:05:37,420 --> 00:05:46,000
being able to share that was there and

00:05:41,350 --> 00:05:49,240
then terraform is obviously the most

00:05:46,000 --> 00:05:51,850
popular player out there it's got a good

00:05:49,240 --> 00:05:57,850
DSL it's got great documentation like

00:05:51,850 --> 00:05:59,980
provider support but it has to kind of

00:05:57,850 --> 00:06:02,140
cons one is the three-way state

00:05:59,980 --> 00:06:04,030
management so you have this TF state

00:06:02,140 --> 00:06:07,690
file that you have to keep around and if

00:06:04,030 --> 00:06:10,270
you lose it then they're kind of in a

00:06:07,690 --> 00:06:11,710
bad spot and then the other one is that

00:06:10,270 --> 00:06:13,840
it's permitted Illinois so you're

00:06:11,710 --> 00:06:15,730
there's no higher level abstractions

00:06:13,840 --> 00:06:18,010
there's no best practices it's just

00:06:15,730 --> 00:06:20,680
those crud operations and there's

00:06:18,010 --> 00:06:24,430
nothing to kind of help along with them

00:06:20,680 --> 00:06:30,270
a red-black scenario or any of that kind

00:06:24,430 --> 00:06:34,440
of thing so did anyone we could go to

00:06:30,270 --> 00:06:38,420
him talk about declarative yesterday

00:06:34,440 --> 00:06:44,520
vinegar for board yeah Emily

00:06:38,420 --> 00:06:47,390
so if you guys are interested in what

00:06:44,520 --> 00:06:51,630
they are doing there's this Andy little

00:06:47,390 --> 00:06:54,090
survey but basically we've been

00:06:51,630 --> 00:06:59,190
collaborating on what declared it means

00:06:54,090 --> 00:07:03,930
for for spinnaker and you'd be very

00:06:59,190 --> 00:07:06,990
interested and continued support our

00:07:03,930 --> 00:07:12,000
doable it's been phenomenally helpful

00:07:06,990 --> 00:07:13,380
for us to kind of learn from from what

00:07:12,000 --> 00:07:15,210
Google's been doing and they've been

00:07:13,380 --> 00:07:17,400
doing declarative for a very very long

00:07:15,210 --> 00:07:19,440
time whereas it's relatively new for

00:07:17,400 --> 00:07:21,480
spinnaker so being able to kind of get a

00:07:19,440 --> 00:07:23,240
jump start with everything that they

00:07:21,480 --> 00:07:28,590
have known

00:07:23,240 --> 00:07:31,110
phenomenally useful so

00:07:28,590 --> 00:07:35,030
now I'll pass it off to rob who will

00:07:31,110 --> 00:07:36,750
talk about far more interesting things

00:07:35,030 --> 00:07:38,639
hi

00:07:36,750 --> 00:07:39,990
yes Akhil is the declarative

00:07:38,639 --> 00:07:42,230
microservice that we're building right

00:07:39,990 --> 00:07:45,300
now for the spinnaker this is our

00:07:42,230 --> 00:07:47,610
implementation of a declarative delivery

00:07:45,300 --> 00:07:49,770
system you can already look at it on on

00:07:47,610 --> 00:07:54,169
github it's it's already part of the

00:07:49,770 --> 00:07:57,150
spinnaker open source organization I

00:07:54,169 --> 00:07:58,830
want to talk a little bit about our kind

00:07:57,150 --> 00:08:01,889
of design goals around that and then

00:07:58,830 --> 00:08:03,300
dive into some specifics at a fairly

00:08:01,889 --> 00:08:06,620
high level about how it works and then

00:08:03,300 --> 00:08:09,030
we're we're taking it from from here so

00:08:06,620 --> 00:08:12,180
the design design decisions we've made

00:08:09,030 --> 00:08:18,330
so far are it's gonna be a plug-in model

00:08:12,180 --> 00:08:20,580
based system what this means is that the

00:08:18,330 --> 00:08:22,950
very the fine-grained details of how

00:08:20,580 --> 00:08:25,710
assets are modeled are opaque to the

00:08:22,950 --> 00:08:28,620
central annealing service it doesn't

00:08:25,710 --> 00:08:30,419
know or care about how a security group

00:08:28,620 --> 00:08:32,550
is defined or how a cluster is defined

00:08:30,419 --> 00:08:33,990
or how a subversion of software being

00:08:32,550 --> 00:08:37,380
delivered to a server group is is

00:08:33,990 --> 00:08:40,020
defined all it knows is does this thing

00:08:37,380 --> 00:08:45,510
have a hash equally to the existing

00:08:40,020 --> 00:08:48,870
state if not I need to update it we

00:08:45,510 --> 00:08:52,350
would like to use G RPC for transport

00:08:48,870 --> 00:08:55,350
and protobuf for our api's and

00:08:52,350 --> 00:08:57,120
representing the state internally the

00:08:55,350 --> 00:08:59,520
reasons reasons for making that decision

00:08:57,120 --> 00:09:01,350
are I don't know if anyone hopefully

00:08:59,520 --> 00:09:03,300
around her Boras former antis talked

00:09:01,350 --> 00:09:04,710
this morning about about spinnaker in

00:09:03,300 --> 00:09:06,410
his keynote and he have raised a very

00:09:04,710 --> 00:09:08,460
good point about

00:09:06,410 --> 00:09:12,990
Spinnaker's plug abilities maybe it's

00:09:08,460 --> 00:09:14,970
not best non its best feature today we

00:09:12,990 --> 00:09:18,839
are trying to address that concern

00:09:14,970 --> 00:09:20,430
somewhat with with with keel and with

00:09:18,839 --> 00:09:22,920
the hope that we can develop something

00:09:20,430 --> 00:09:27,089
that we can broaden out to other areas

00:09:22,920 --> 00:09:30,180
of spinnaker as we go forward internally

00:09:27,089 --> 00:09:33,959
in Netflix we have G RPC is quite a big

00:09:30,180 --> 00:09:35,760
thing in our platform these days we also

00:09:33,959 --> 00:09:38,190
have a lot of teams that are not using

00:09:35,760 --> 00:09:41,130
the JVM stack we're a spinnaker itself

00:09:38,190 --> 00:09:41,820
is a JVM application most of it's

00:09:41,130 --> 00:09:43,980
written in

00:09:41,820 --> 00:09:47,970
Java or groovy qu'il is written in

00:09:43,980 --> 00:09:50,310
Kotlin but not everyone at Netflix uses

00:09:47,970 --> 00:09:53,490
the JVM we have an awful lot of Python

00:09:50,310 --> 00:09:55,140
for example G RPC gives us a kind of

00:09:53,490 --> 00:09:56,280
language agnostic or protobuf

00:09:55,140 --> 00:09:57,840
specifically gives us a language

00:09:56,280 --> 00:10:00,120
agnostic way of modeling things and a

00:09:57,840 --> 00:10:02,820
and you know we can export an APO

00:10:00,120 --> 00:10:05,190
strongly typed API as opposed to the

00:10:02,820 --> 00:10:07,910
kind of random jumble of JSON that a lot

00:10:05,190 --> 00:10:10,830
of the existing spinnaker API is use

00:10:07,910 --> 00:10:13,190
that can be consumed by people using

00:10:10,830 --> 00:10:16,890
various different languages JVM go

00:10:13,190 --> 00:10:18,120
Python just about anything out there oh

00:10:16,890 --> 00:10:21,030
please

00:10:18,120 --> 00:10:23,160
many people in spit in netflix are using

00:10:21,030 --> 00:10:24,750
G RPC already increasingly like the

00:10:23,160 --> 00:10:32,130
tightest API is completely based around

00:10:24,750 --> 00:10:34,710
G RPC so you know we this if this looks

00:10:32,130 --> 00:10:36,810
familiar from from pin slides yesterday

00:10:34,710 --> 00:10:39,690
there's a reason for that we we there

00:10:36,810 --> 00:10:43,470
was an early implementation of Kiel that

00:10:39,690 --> 00:10:45,120
that was making good progress but didn't

00:10:43,470 --> 00:10:46,980
embody a lot of these design constraints

00:10:45,120 --> 00:10:47,940
these design decisions and we we kind of

00:10:46,980 --> 00:10:49,560
went back to the drawing board a little

00:10:47,940 --> 00:10:51,690
bit after some really good in-depth

00:10:49,560 --> 00:10:53,250
discussions with with Pam and we were

00:10:51,690 --> 00:10:55,500
and we're driving on forward on on a

00:10:53,250 --> 00:10:59,640
kind of v2 of Kiel that's that's very

00:10:55,500 --> 00:11:00,780
inspired by the stuff he's been doing so

00:10:59,640 --> 00:11:02,040
let's take a look at how it actually

00:11:00,780 --> 00:11:04,110
works in theory

00:11:02,040 --> 00:11:09,060
so the annealing engine is the kind of

00:11:04,110 --> 00:11:12,060
core of Kiel it takes assets in over G

00:11:09,060 --> 00:11:14,610
RPC so on asset could be a piece of

00:11:12,060 --> 00:11:17,520
infrastructure a version of software

00:11:14,610 --> 00:11:20,580
that you want to go down to your cluster

00:11:17,520 --> 00:11:21,600
it could be you know a low balance all

00:11:20,580 --> 00:11:23,610
these all these kind of things that

00:11:21,600 --> 00:11:24,930
there's a very wide spectrum of things

00:11:23,610 --> 00:11:28,050
it could be we're gonna we're gonna

00:11:24,930 --> 00:11:30,320
import that by G RPC store into into a

00:11:28,050 --> 00:11:34,860
repository of desired State

00:11:30,320 --> 00:11:36,870
then we are you know where can the asset

00:11:34,860 --> 00:11:39,240
come from it could come directly we

00:11:36,870 --> 00:11:41,250
don't I don't really think asking people

00:11:39,240 --> 00:11:45,810
to write protobuf stuff directly is

00:11:41,250 --> 00:11:48,240
ideal so we want it to be pluggable at

00:11:45,810 --> 00:11:50,070
the front end so we're going to put a

00:11:48,240 --> 00:11:51,360
REST API in front of it we imagine a lot

00:11:50,070 --> 00:11:54,480
of people will be scripting against this

00:11:51,360 --> 00:11:55,170
API hopefully I think Newt integration

00:11:54,480 --> 00:11:56,430
is

00:11:55,170 --> 00:11:57,860
really strong possibility if anyone

00:11:56,430 --> 00:12:00,810
doesn't know what need is it's never

00:11:57,860 --> 00:12:03,300
Netflix I can't even understand the

00:12:00,810 --> 00:12:05,760
workflow toolkit so a lot of people in

00:12:03,300 --> 00:12:09,779
Netflix use this to kind of bootstrap

00:12:05,760 --> 00:12:12,779
their applications I think if that we

00:12:09,779 --> 00:12:16,050
can have that thing generating the

00:12:12,779 --> 00:12:17,820
assets that will get pushed into Kiel

00:12:16,050 --> 00:12:19,529
that makes an awful lot of sense for

00:12:17,820 --> 00:12:22,399
people because one of the issues we're

00:12:19,529 --> 00:12:24,690
trying to scratch initially is around

00:12:22,399 --> 00:12:25,920
initial setup of applications which

00:12:24,690 --> 00:12:28,800
spinnaker doesn't have a great story

00:12:25,920 --> 00:12:30,870
around today if you if you have

00:12:28,800 --> 00:12:34,589
homogenous applications which increasing

00:12:30,870 --> 00:12:35,940
numbers of teams at Netflix do around

00:12:34,589 --> 00:12:37,620
kind of setting all of them up to look

00:12:35,940 --> 00:12:39,000
the same and especially replicating that

00:12:37,620 --> 00:12:41,730
into different regions into different

00:12:39,000 --> 00:12:43,440
AWS accounts and you know when I do

00:12:41,730 --> 00:12:47,399
on-call rotations one of the frequent

00:12:43,440 --> 00:12:48,630
problems that comes up is Oh something

00:12:47,399 --> 00:12:50,070
doesn't connect properly in this

00:12:48,630 --> 00:12:51,480
particular environment and when you dig

00:12:50,070 --> 00:12:52,470
into it it's because you know ingress

00:12:51,480 --> 00:12:54,389
rules are configured slightly

00:12:52,470 --> 00:12:55,769
differently on security groups or that

00:12:54,389 --> 00:12:57,300
kind of thing whereas if we can if we

00:12:55,769 --> 00:12:59,730
can standardize that and allow people to

00:12:57,300 --> 00:13:01,730
have a homogenous rollout across as many

00:12:59,730 --> 00:13:04,610
accounts and regions as they need to

00:13:01,730 --> 00:13:09,870
that that kind of problem disappears

00:13:04,610 --> 00:13:11,010
hopefully so we'd like it to be

00:13:09,870 --> 00:13:13,800
pluggable at the front end for getting

00:13:11,010 --> 00:13:16,260
the data in there you know if that means

00:13:13,800 --> 00:13:18,360
we're reading llaman files out of you'll

00:13:16,260 --> 00:13:18,870
get repository at some point that that

00:13:18,360 --> 00:13:21,750
would be a really interesting

00:13:18,870 --> 00:13:24,570
possibility but the key thing as I

00:13:21,750 --> 00:13:26,399
talked about earlier is that you know

00:13:24,570 --> 00:13:28,320
those assets are composed of two parts

00:13:26,399 --> 00:13:31,199
the metadata which says what type of

00:13:28,320 --> 00:13:34,199
asset is what other assets it depends on

00:13:31,199 --> 00:13:36,930
and the asset spec itself which is

00:13:34,199 --> 00:13:38,670
completely opaque to the annealing

00:13:36,930 --> 00:13:41,970
engine it just treats that as a blob of

00:13:38,670 --> 00:13:45,029
binary data that it will be able to

00:13:41,970 --> 00:13:46,709
compare hashes of fingerprints of but

00:13:45,029 --> 00:13:50,160
nothing beyond that it doesn't

00:13:46,709 --> 00:13:52,740
introspect that data at all and then you

00:13:50,160 --> 00:13:55,290
know when it detects a difference it

00:13:52,740 --> 00:13:56,970
will talk to plugins designed to

00:13:55,290 --> 00:14:01,649
communicate with with different clouds

00:13:56,970 --> 00:14:03,149
or different you know whatever you can

00:14:01,649 --> 00:14:07,140
imagine the primary ones we're working

00:14:03,149 --> 00:14:08,970
obviously Europe our ec2 and Titus so it

00:14:07,140 --> 00:14:13,080
will be able to instruct though

00:14:08,970 --> 00:14:15,600
to get the current state of of this

00:14:13,080 --> 00:14:19,290
particular asset or go makes this the

00:14:15,600 --> 00:14:19,800
asset look like this we also have a

00:14:19,290 --> 00:14:21,480
concept

00:14:19,800 --> 00:14:22,860
oh and those things under the hood you

00:14:21,480 --> 00:14:24,180
know that the existing ones are working

00:14:22,860 --> 00:14:24,780
right now we'll be just talking to walk

00:14:24,180 --> 00:14:26,790
on Cloud Drive

00:14:24,780 --> 00:14:28,830
so for reading the state they will be

00:14:26,790 --> 00:14:30,930
speaking to the cloud driver API

00:14:28,830 --> 00:14:33,030
fetching the state by that because you

00:14:30,930 --> 00:14:36,780
know this is a solved problem to some

00:14:33,030 --> 00:14:37,890
extent we have a lot of tooling around

00:14:36,780 --> 00:14:40,200
that already with there's no need to

00:14:37,890 --> 00:14:42,660
reinvent the wheel and also talking to

00:14:40,200 --> 00:14:45,030
Orca to actually actuate those those

00:14:42,660 --> 00:14:48,420
convergence operations so you'll be able

00:14:45,030 --> 00:14:50,100
to see he'll doing things in your tasks

00:14:48,420 --> 00:14:51,360
view of your application in Orca much as

00:14:50,100 --> 00:14:53,280
you can if you're using chaos monkey

00:14:51,360 --> 00:14:54,810
right now you'll you can you can see

00:14:53,280 --> 00:14:56,520
cows monkey killing your instances in

00:14:54,810 --> 00:14:58,560
that same view in the same way so you'll

00:14:56,520 --> 00:15:01,470
see top tasks appearing there which is

00:14:58,560 --> 00:15:05,340
Kiel operating on your converging your

00:15:01,470 --> 00:15:08,280
desired state another concept we have is

00:15:05,340 --> 00:15:10,470
veto plugins so the idea is here very

00:15:08,280 --> 00:15:12,810
similar to something pin as where it's

00:15:10,470 --> 00:15:16,170
where it's you know a bunch of plugins

00:15:12,810 --> 00:15:18,690
that can various reasons give you yes no

00:15:16,170 --> 00:15:20,070
go ahead go no-go decisions about about

00:15:18,690 --> 00:15:21,420
a convergence so that could be for a

00:15:20,070 --> 00:15:24,240
variety of reasons one of the obvious

00:15:21,420 --> 00:15:26,850
ones would be well somebody else has

00:15:24,240 --> 00:15:28,800
messed with this resource and it doesn't

00:15:26,850 --> 00:15:31,350
look like what it looked like the last

00:15:28,800 --> 00:15:34,520
time Kiel knew about it so we should

00:15:31,350 --> 00:15:36,540
probably not go stomping on that

00:15:34,520 --> 00:15:38,640
stomping on that existing resource

00:15:36,540 --> 00:15:41,250
another could be well this team only

00:15:38,640 --> 00:15:43,740
wants to roll out changes during work

00:15:41,250 --> 00:15:45,060
hours not on weekends not know in the

00:15:43,740 --> 00:15:46,980
middle of the night when there's nobody

00:15:45,060 --> 00:15:50,790
available to to deal with pages or

00:15:46,980 --> 00:15:52,530
nobody that wants to deal with pages so

00:15:50,790 --> 00:15:54,420
execution windows like you kind of have

00:15:52,530 --> 00:15:57,390
in deployment stages right now in in

00:15:54,420 --> 00:15:59,070
spinnaker applications may want to just

00:15:57,390 --> 00:16:01,230
turn this off would be another obvious

00:15:59,070 --> 00:16:03,089
example and say actually you know for

00:16:01,230 --> 00:16:05,040
the next foreseeable period we don't

00:16:03,089 --> 00:16:06,810
want anything converged we we have a

00:16:05,040 --> 00:16:08,580
critical problem we're dealing with and

00:16:06,810 --> 00:16:11,400
we just we'd want to manage it

00:16:08,580 --> 00:16:14,700
imperatively a variety of other things

00:16:11,400 --> 00:16:15,839
so that could be anything so keep

00:16:14,700 --> 00:16:17,580
forgetting my clickers and actually

00:16:15,839 --> 00:16:19,200
plugged in so let's look at how that

00:16:17,580 --> 00:16:22,620
annealing engine actually goes around

00:16:19,200 --> 00:16:26,770
goes about doing its work

00:16:22,620 --> 00:16:30,070
so it'll read all the assets out of that

00:16:26,770 --> 00:16:32,650
repository what what is the current

00:16:30,070 --> 00:16:34,780
state of that asset for which it'll talk

00:16:32,650 --> 00:16:36,100
to a specific kind of plug-in in no you

00:16:34,780 --> 00:16:37,720
know one of the pieces of metadata it

00:16:36,100 --> 00:16:39,670
can read about that asset is what type

00:16:37,720 --> 00:16:40,870
of asset is this and what plugin is

00:16:39,670 --> 00:16:42,820
responsible for dealing with that type

00:16:40,870 --> 00:16:44,200
of asset so we'll go to talk it'll go

00:16:42,820 --> 00:16:47,230
and talk to the asset and say fetch me

00:16:44,200 --> 00:16:48,160
the current state does this match the

00:16:47,230 --> 00:16:51,030
desired State

00:16:48,160 --> 00:16:54,370
if so fine let's move on to the next one

00:16:51,030 --> 00:16:56,320
if not let's go ask all of the veto

00:16:54,370 --> 00:17:00,130
plugins am I allowed to update this

00:16:56,320 --> 00:17:04,150
right now if not go back to the next

00:17:00,130 --> 00:17:06,130
asset if so let's converge the state and

00:17:04,150 --> 00:17:09,190
for that we'll talk to the same asset

00:17:06,130 --> 00:17:12,100
plug-in again the same ones over here so

00:17:09,190 --> 00:17:13,720
pretty straightforward I think and we're

00:17:12,100 --> 00:17:16,180
just going to run this on a schedule so

00:17:13,720 --> 00:17:16,990
I'll check every every so often we I

00:17:16,180 --> 00:17:18,490
don't think we've really pin down

00:17:16,990 --> 00:17:20,080
exactly how often we'll need it to check

00:17:18,490 --> 00:17:22,570
right now we might get some more

00:17:20,080 --> 00:17:23,770
sophisticated scheduling involved later

00:17:22,570 --> 00:17:26,950
but there's no need right now I don't

00:17:23,770 --> 00:17:28,360
think so that's kind of how it works so

00:17:26,950 --> 00:17:30,010
what's what does this mean for the

00:17:28,360 --> 00:17:31,990
future of spinnaker I think the key

00:17:30,010 --> 00:17:33,850
point to make here is this is not

00:17:31,990 --> 00:17:37,810
intended to replace the imperative

00:17:33,850 --> 00:17:40,510
spinnaker that you know right now it's

00:17:37,810 --> 00:17:42,520
intended to be complementary to it we

00:17:40,510 --> 00:17:44,710
are trying to as I said the first ditch

00:17:42,520 --> 00:17:46,300
we're trying to scratch is that initial

00:17:44,710 --> 00:17:47,980
that infrastructure set up so that so

00:17:46,300 --> 00:17:50,170
one of the first things we want to do is

00:17:47,980 --> 00:17:52,560
dog food this within the spinnaker team

00:17:50,170 --> 00:17:56,220
itself for setting up aerial B's and our

00:17:52,560 --> 00:17:59,470
security groups and that kind of thing

00:17:56,220 --> 00:18:00,700
because right now that's kind of a pain

00:17:59,470 --> 00:18:02,860
point for people we have increasing

00:18:00,700 --> 00:18:04,870
numbers of teams who manage a whole

00:18:02,860 --> 00:18:07,720
bunch of apps at once and they want them

00:18:04,870 --> 00:18:09,250
to pretty much look and behave the same

00:18:07,720 --> 00:18:10,570
way or be configured in the same way and

00:18:09,250 --> 00:18:11,800
right now that means a lot of clicking

00:18:10,570 --> 00:18:14,290
back and forth between apps and the

00:18:11,800 --> 00:18:16,420
spinnaker UI and configuring things

00:18:14,290 --> 00:18:18,250
manually potentially a lot of copy and

00:18:16,420 --> 00:18:22,690
paste of JSON which is which is nobody's

00:18:18,250 --> 00:18:24,250
idea of a good time we there is a big

00:18:22,690 --> 00:18:26,020
push within Netflix right now to broaden

00:18:24,250 --> 00:18:27,700
the number of AWS accounts were using

00:18:26,020 --> 00:18:29,200
for security reasons you know

00:18:27,700 --> 00:18:31,150
traditionally we had like prod and test

00:18:29,200 --> 00:18:32,470
accounts on a and a separate account for

00:18:31,150 --> 00:18:35,110
billing related things that they're

00:18:32,470 --> 00:18:37,090
under regulatory restrictions but

00:18:35,110 --> 00:18:38,679
our security guys want to broaden this

00:18:37,090 --> 00:18:40,210
out some there are more dedicated

00:18:38,679 --> 00:18:42,159
accounts for different applications and

00:18:40,210 --> 00:18:46,419
difficult different application groups

00:18:42,159 --> 00:18:48,669
and areas so this need for let's roll

00:18:46,419 --> 00:18:50,679
out something homogenous into a bunch of

00:18:48,669 --> 00:18:53,590
different places at once he's increasing

00:18:50,679 --> 00:18:55,179
there's also potentially as Netflix has

00:18:53,590 --> 00:18:56,830
gone global over the last couple of

00:18:55,179 --> 00:18:59,019
years per tent potentially we might be

00:18:56,830 --> 00:19:01,330
looking at new 80s regions at some point

00:18:59,019 --> 00:19:03,700
right now we use three of them but there

00:19:01,330 --> 00:19:08,649
there is every chance we could expand

00:19:03,700 --> 00:19:11,260
that at some point in the future we

00:19:08,649 --> 00:19:13,809
already have the managed pipeline

00:19:11,260 --> 00:19:17,289
template system that that manages some

00:19:13,809 --> 00:19:19,539
kind of homogenous management of

00:19:17,289 --> 00:19:22,659
delivery of of things but it's still

00:19:19,539 --> 00:19:25,600
fundamentally in an imperative system

00:19:22,659 --> 00:19:28,450
that in which you describe how you want

00:19:25,600 --> 00:19:30,510
things to be delivered so this is a it

00:19:28,450 --> 00:19:33,850
feels like a natural fit in some ways

00:19:30,510 --> 00:19:35,169
but this is not doing away with manage

00:19:33,850 --> 00:19:36,490
pipeline templates manage pipeline

00:19:35,169 --> 00:19:38,350
templates will absolutely still be a

00:19:36,490 --> 00:19:41,639
thing this is complementary to that as

00:19:38,350 --> 00:19:45,389
well what I really would like to see is

00:19:41,639 --> 00:19:48,370
more opinionated options for delivery

00:19:45,389 --> 00:19:49,630
delivered via Keele so right now we have

00:19:48,370 --> 00:19:51,519
you know the standard options of red

00:19:49,630 --> 00:19:54,429
black and Highlander and we have custom

00:19:51,519 --> 00:19:56,049
strategies for delivering a pipeline but

00:19:54,429 --> 00:19:58,809
it's kind of very restricted to the

00:19:56,049 --> 00:20:00,159
scope of what do you do around creating

00:19:58,809 --> 00:20:01,539
and enabling your name server group

00:20:00,159 --> 00:20:03,970
there's only so far you can take that

00:20:01,539 --> 00:20:06,250
I'd like to see things like Canaries

00:20:03,970 --> 00:20:10,000
being brought in there so if you if you

00:20:06,250 --> 00:20:11,320
want to have a canary before you deploy

00:20:10,000 --> 00:20:12,190
your new software let's just have that

00:20:11,320 --> 00:20:14,529
be a convention over configuration

00:20:12,190 --> 00:20:16,419
option in kiel where you don't have to

00:20:14,529 --> 00:20:20,049
think too much about anything except I

00:20:16,419 --> 00:20:21,429
want to use these couple of metrics Rob

00:20:20,049 --> 00:20:23,019
mentioned squeeze testing as well that's

00:20:21,429 --> 00:20:25,450
like that's a really interesting option

00:20:23,019 --> 00:20:27,700
where we can try and help teams make

00:20:25,450 --> 00:20:31,720
decisions around right sizing or you

00:20:27,700 --> 00:20:33,370
know in in collaboration with the

00:20:31,720 --> 00:20:34,870
traffic team at Netflix we can help

00:20:33,370 --> 00:20:37,389
people make decisions around the right

00:20:34,870 --> 00:20:38,980
sizing the their server groups so we're

00:20:37,389 --> 00:20:41,110
not spending more money than we need to

00:20:38,980 --> 00:20:44,590
unrunnable in instances and we're not at

00:20:41,110 --> 00:20:45,840
risk of things falling over due to due

00:20:44,590 --> 00:20:48,739
to load

00:20:45,840 --> 00:20:51,090
so I'd like I'd like to see kind of more

00:20:48,739 --> 00:20:52,559
opinionated options around that at the

00:20:51,090 --> 00:20:55,739
at the front end which is why we're

00:20:52,559 --> 00:20:58,499
looking at this this pluggable model at

00:20:55,739 --> 00:20:59,969
the front end you know keel itself would

00:20:58,499 --> 00:21:03,299
be storing extremely fine-grained

00:20:59,969 --> 00:21:06,899
details of how everything needs to look

00:21:03,299 --> 00:21:08,309
but I that shouldn't be what the user

00:21:06,899 --> 00:21:10,019
needs to worry about unless they have

00:21:08,309 --> 00:21:14,219
very specific requirements that are like

00:21:10,019 --> 00:21:16,590
outside of the 80% use case so we'd like

00:21:14,219 --> 00:21:20,009
to layer a lot of opinions on top of the

00:21:16,590 --> 00:21:21,929
declarative system there is obviously

00:21:20,009 --> 00:21:23,729
talking of the future there is a lot of

00:21:21,929 --> 00:21:25,919
potential synergy with what him and

00:21:23,729 --> 00:21:27,629
Google are doing here if they do make

00:21:25,919 --> 00:21:30,389
the decision to open-source I can see us

00:21:27,629 --> 00:21:33,149
adopting some of what he's building in

00:21:30,389 --> 00:21:37,739
order to help us build declarative and

00:21:33,149 --> 00:21:40,710
spinnaker so this is this looks

00:21:37,739 --> 00:21:42,419
interesting when can you use it our

00:21:40,710 --> 00:21:44,849
approaches that we're taking things

00:21:42,419 --> 00:21:46,859
fairly slowly we want a good robust

00:21:44,849 --> 00:21:48,809
solution here and not like the quickest

00:21:46,859 --> 00:21:51,059
thing we can build out there with a

00:21:48,809 --> 00:21:54,239
horrible API that we then come can't

00:21:51,059 --> 00:21:56,549
make changes to easily like I said our

00:21:54,239 --> 00:22:00,269
first goal is let's get spinnaker itself

00:21:56,549 --> 00:22:01,499
dogfooding this we also have some where

00:22:00,269 --> 00:22:03,179
we're aiming for security groups and

00:22:01,499 --> 00:22:06,359
load balancers very soon in to be

00:22:03,179 --> 00:22:08,729
managed by this in spinnaker itself we

00:22:06,359 --> 00:22:10,499
also have some teams that wanting in

00:22:08,729 --> 00:22:12,059
particular in Netflix's that's really

00:22:10,499 --> 00:22:14,399
interested in scaling policy management

00:22:12,059 --> 00:22:15,719
they do this as a centralized service

00:22:14,399 --> 00:22:17,489
for other teams and help other teams

00:22:15,719 --> 00:22:20,129
make decisions about scaling policies

00:22:17,489 --> 00:22:21,299
and metric tracking and there's no great

00:22:20,129 --> 00:22:22,859
story around that in the spinnaker you

00:22:21,299 --> 00:22:24,779
ISO declarative seems to be a really

00:22:22,859 --> 00:22:26,279
good fit for let's build some way of

00:22:24,779 --> 00:22:30,119
managing scaling policies in a

00:22:26,279 --> 00:22:31,889
declarative way we have a team using an

00:22:30,119 --> 00:22:33,119
older declarative system called Atlas

00:22:31,889 --> 00:22:35,759
deploy and we'd really like to bring

00:22:33,119 --> 00:22:37,379
them under Spinnaker's wing they want to

00:22:35,759 --> 00:22:40,219
be delivering things in a declarative

00:22:37,379 --> 00:22:42,149
way so we need to do some work on

00:22:40,219 --> 00:22:45,029
current making sure we're hitting their

00:22:42,149 --> 00:22:48,229
use cases and giving them an adequate

00:22:45,029 --> 00:22:50,549
replacement for that existing system

00:22:48,229 --> 00:22:53,159
declarative is going to be a major push

00:22:50,549 --> 00:22:55,409
for spinnaker as a whole throughout 2019

00:22:53,159 --> 00:22:57,139
I anticipate a lot of work being done on

00:22:55,409 --> 00:22:59,460
that we'll see a lot of evolution of it

00:22:57,139 --> 00:23:01,649
I don't want to make

00:22:59,460 --> 00:23:03,179
many promises about timing but you know

00:23:01,649 --> 00:23:07,140
keep an eye on the there's a there's a

00:23:03,179 --> 00:23:10,470
slack channel in the spinnaker the

00:23:07,140 --> 00:23:12,000
spinnaker open source slack hmm please

00:23:10,470 --> 00:23:15,210
reach out to us on that if you have

00:23:12,000 --> 00:23:17,610
thoughts input you know reasons why this

00:23:15,210 --> 00:23:22,020
what we're doing is done or wouldn't

00:23:17,610 --> 00:23:23,789
work for you and with that I'm going to

00:23:22,020 --> 00:23:25,970
wrap things up so and we'll open up for

00:23:23,789 --> 00:23:25,970

YouTube URL: https://www.youtube.com/watch?v=KqU1cnUcQaQ


