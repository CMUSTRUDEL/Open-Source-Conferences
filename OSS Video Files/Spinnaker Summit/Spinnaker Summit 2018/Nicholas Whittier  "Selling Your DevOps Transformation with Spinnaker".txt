Title: Nicholas Whittier  "Selling Your DevOps Transformation with Spinnaker"
Publication date: 2018-10-24
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,270 --> 00:00:05,380
[Music]

00:00:09,820 --> 00:00:13,259
[Music]

00:00:16,130 --> 00:00:22,230
I'm Nick I'm from hello Sciences up here

00:00:19,529 --> 00:00:25,439
this session is selling your DevOps

00:00:22,230 --> 00:00:27,539
transformation with spinnaker if you're

00:00:25,439 --> 00:00:28,800
in the wrong place now is a better time

00:00:27,539 --> 00:00:31,250
to leave them when I'm trying to say

00:00:28,800 --> 00:00:33,329
things in just a couple of minutes I

00:00:31,250 --> 00:00:35,160
think this is the interesting one to

00:00:33,329 --> 00:00:37,050
come to but I admit there were a lot of

00:00:35,160 --> 00:00:38,910
interesting talks in this session and in

00:00:37,050 --> 00:00:40,460
all of the sessions I won't be hurt

00:00:38,910 --> 00:00:42,149
it'll be recorded you can view it later

00:00:40,460 --> 00:00:44,670
but this is what we're gonna be talking

00:00:42,149 --> 00:00:47,460
about for the next few minutes it's a

00:00:44,670 --> 00:00:49,230
key concept around the software skills

00:00:47,460 --> 00:00:50,820
and the software implementation to

00:00:49,230 --> 00:00:53,280
moving forward with this DevOps

00:00:50,820 --> 00:00:55,530
transformation and a lot about how

00:00:53,280 --> 00:00:58,530
spinnaker can make it easy for you and

00:00:55,530 --> 00:01:01,039
the aspects of it that are important for

00:00:58,530 --> 00:01:03,480
you to keep in mind and consider so

00:01:01,039 --> 00:01:05,670
strictly speaking the the agenda the

00:01:03,480 --> 00:01:08,010
flow that we can expect to walk through

00:01:05,670 --> 00:01:10,320
during this discussion will do a little

00:01:08,010 --> 00:01:12,270
bit of marketing advertisement for

00:01:10,320 --> 00:01:14,310
hellosign because they graciously sent

00:01:12,270 --> 00:01:15,930
me here that's my company they pay me

00:01:14,310 --> 00:01:19,259
money to do this kind of thing and I

00:01:15,930 --> 00:01:21,540
appreciate it we won't go too much

00:01:19,259 --> 00:01:23,490
further in depth into hellosign other

00:01:21,540 --> 00:01:26,280
than to create a baseline for where

00:01:23,490 --> 00:01:28,110
hellosign was and where hellosign is

00:01:26,280 --> 00:01:31,500
today and how spinnaker kind of helped

00:01:28,110 --> 00:01:34,290
us to get there this is not so that you

00:01:31,500 --> 00:01:36,930
can directly compare your organization

00:01:34,290 --> 00:01:39,420
but so that we can work with a framework

00:01:36,930 --> 00:01:41,700
or a consistent understanding about the

00:01:39,420 --> 00:01:43,200
hellosign starting point and how we move

00:01:41,700 --> 00:01:45,210
forward that way you can think about how

00:01:43,200 --> 00:01:46,799
this can apply to your organization and

00:01:45,210 --> 00:01:48,320
to the teams that you're working with

00:01:46,799 --> 00:01:50,579
and the interest of trying to promote

00:01:48,320 --> 00:01:53,189
DevOps transformation trying to sell

00:01:50,579 --> 00:01:55,799
spinnaker or trying to sell sea icd in

00:01:53,189 --> 00:01:57,180
general in terms of getting team buy-in

00:01:55,799 --> 00:01:59,759
and making sure that everyone is

00:01:57,180 --> 00:02:01,380
interested in the same end goal of kind

00:01:59,759 --> 00:02:03,270
of a high-performing team and a high

00:02:01,380 --> 00:02:06,329
release velocity and those sorts of

00:02:03,270 --> 00:02:08,220
capabilities and the interest of that

00:02:06,329 --> 00:02:09,750
effort will move from where hellosign is

00:02:08,220 --> 00:02:11,039
to why we're selling a devops

00:02:09,750 --> 00:02:13,799
transformation

00:02:11,039 --> 00:02:15,420
what it is loosely I'm not gonna go to

00:02:13,799 --> 00:02:17,730
great depths to define things like

00:02:15,420 --> 00:02:19,469
DevOps that nobody understands or the

00:02:17,730 --> 00:02:21,959
DevOps transformation that's gonna be

00:02:19,469 --> 00:02:23,519
fairly unique to each organization

00:02:21,959 --> 00:02:25,890
that's involved but I'm gonna try to

00:02:23,519 --> 00:02:28,530
shape why it's important and what the

00:02:25,890 --> 00:02:31,370
motivations can be and we'll talk about

00:02:28,530 --> 00:02:33,930
spinnaker features that will help us

00:02:31,370 --> 00:02:36,840
specifically and detail kind of a

00:02:33,930 --> 00:02:39,180
demonstrative project that we put

00:02:36,840 --> 00:02:41,639
together that allows you to make this

00:02:39,180 --> 00:02:43,260
case or make this sell to the team

00:02:41,639 --> 00:02:44,700
members that you're working with or to

00:02:43,260 --> 00:02:47,849
the other members of the organization

00:02:44,700 --> 00:02:50,639
that you want to buy into this and we'll

00:02:47,849 --> 00:02:52,169
talk about this concept of kind of

00:02:50,639 --> 00:02:54,659
delivery as a service and software

00:02:52,169 --> 00:02:57,269
delivery as a service or spinnaker as a

00:02:54,659 --> 00:03:00,180
service and creating a really consistent

00:02:57,269 --> 00:03:01,169
framework for deployment within your

00:03:00,180 --> 00:03:03,599
organization

00:03:01,169 --> 00:03:05,069
I think spinnaker does a really great

00:03:03,599 --> 00:03:07,049
job of supporting this because it's so

00:03:05,069 --> 00:03:10,079
extensible you can take a lot of those

00:03:07,049 --> 00:03:12,090
legacy applications those one-off kind

00:03:10,079 --> 00:03:14,280
of deploy techniques and you can simply

00:03:12,090 --> 00:03:16,859
wrap them and embed them in a spinnaker

00:03:14,280 --> 00:03:19,169
pipeline and create a level of

00:03:16,859 --> 00:03:21,840
consistency even where that consistency

00:03:19,169 --> 00:03:23,489
may not properly exist because you can

00:03:21,840 --> 00:03:25,829
take these scripts or these one-off

00:03:23,489 --> 00:03:27,419
deployments and just wrap it in all the

00:03:25,829 --> 00:03:30,449
same controls or all the same pipeline

00:03:27,419 --> 00:03:32,909
concepts by the end of this discussion

00:03:30,449 --> 00:03:35,010
I'm hoping that will be to a point where

00:03:32,909 --> 00:03:36,720
we can see a little bit more about what

00:03:35,010 --> 00:03:39,419
the DevOps transformation can be for

00:03:36,720 --> 00:03:41,489
your org and why getting through all of

00:03:39,419 --> 00:03:43,049
these steps and selling spinnaker to the

00:03:41,489 --> 00:03:45,150
various team members in the various

00:03:43,049 --> 00:03:47,669
individuals involved will actually have

00:03:45,150 --> 00:03:54,060
you well on your way to what people are

00:03:47,669 --> 00:03:54,689
selling as a DevOps transformation so

00:03:54,060 --> 00:03:57,000
hello

00:03:54,689 --> 00:03:59,430
sign this is the obligatory marketing

00:03:57,000 --> 00:04:01,290
slide that I mentioned we have a small

00:03:59,430 --> 00:04:03,000
suite of products that are designed

00:04:01,290 --> 00:04:06,569
around automating and managing your

00:04:03,000 --> 00:04:08,909
business transactions if you're using

00:04:06,569 --> 00:04:11,639
signatures for anything you should be

00:04:08,909 --> 00:04:13,530
using an API if you're using an API to

00:04:11,639 --> 00:04:16,829
support your electronic signature needs

00:04:13,530 --> 00:04:18,239
and it's not hello sign I'm here to tell

00:04:16,829 --> 00:04:21,229
you that you should investigate hello

00:04:18,239 --> 00:04:23,669
sign because it's better I have no bias

00:04:21,229 --> 00:04:24,700
hello fax is a service that allows you

00:04:23,669 --> 00:04:26,770
to do similar things

00:04:24,700 --> 00:04:29,110
with facts events that you need to

00:04:26,770 --> 00:04:31,720
process and hello works is a mechanism

00:04:29,110 --> 00:04:34,210
that we offer for using a highly API

00:04:31,720 --> 00:04:36,780
driven implementation to manage your

00:04:34,210 --> 00:04:40,060
entire document lifecycle and workflow

00:04:36,780 --> 00:04:42,190
these are tools that are here to

00:04:40,060 --> 00:04:44,170
highlight to you that if you need them

00:04:42,190 --> 00:04:46,120
you should investigate them but more

00:04:44,170 --> 00:04:48,130
importantly that these are business

00:04:46,120 --> 00:04:51,480
oriented tools this is kind of a

00:04:48,130 --> 00:04:54,870
business-to-business sort of company and

00:04:51,480 --> 00:04:58,420
compliance and audit and controls and

00:04:54,870 --> 00:05:00,460
consistency and quality and uptime are

00:04:58,420 --> 00:05:04,030
all very important to us

00:05:00,460 --> 00:05:06,910
see ICD isn't something that you can't

00:05:04,030 --> 00:05:07,870
do because compliance it might be

00:05:06,910 --> 00:05:09,970
something that you need to do

00:05:07,870 --> 00:05:12,490
differently it might be something that

00:05:09,970 --> 00:05:16,300
has more considerations or unique

00:05:12,490 --> 00:05:20,200
challenges but it's important to scope

00:05:16,300 --> 00:05:23,170
your see ICD planning appropriately to

00:05:20,200 --> 00:05:26,290
your organization and not simply avoid

00:05:23,170 --> 00:05:29,140
the task because you require compliance

00:05:26,290 --> 00:05:32,830
or because you're paying customers won't

00:05:29,140 --> 00:05:34,900
stand for downtime that's the point of

00:05:32,830 --> 00:05:35,850
this effort in this transformation is to

00:05:34,900 --> 00:05:39,130
make sure that you're doing things

00:05:35,850 --> 00:05:41,380
correctly as your business requires it

00:05:39,130 --> 00:05:44,080
and doing it more efficiently and I

00:05:41,380 --> 00:05:46,450
think spinnaker and see ICD processes in

00:05:44,080 --> 00:05:48,280
general will give you a lot of leverage

00:05:46,450 --> 00:05:51,430
and capability there that you could

00:05:48,280 --> 00:05:53,590
otherwise be missing out on in addition

00:05:51,430 --> 00:05:57,040
in terms of spelling out where hellosign

00:05:53,590 --> 00:05:59,590
is we're a smallish company that's

00:05:57,040 --> 00:06:05,350
growing rapidly we're kind of in the 1

00:05:59,590 --> 00:06:08,170
to 250 count range see ICD and spinnaker

00:06:05,350 --> 00:06:11,620
and this this transformational effort

00:06:08,170 --> 00:06:13,420
are challenging in a growth environment

00:06:11,620 --> 00:06:14,650
because you have new people coming in

00:06:13,420 --> 00:06:16,510
you've got new teams that you're

00:06:14,650 --> 00:06:19,090
spawning you're kind of trial and error

00:06:16,510 --> 00:06:20,230
running these implementations but at the

00:06:19,090 --> 00:06:22,510
same time you're bringing in new

00:06:20,230 --> 00:06:24,640
individuals who don't have all of the

00:06:22,510 --> 00:06:26,950
legacy expectation or all of the

00:06:24,640 --> 00:06:29,800
familiarity with your legacy products

00:06:26,950 --> 00:06:32,500
and process so it can kind of be a

00:06:29,800 --> 00:06:35,050
double-edged sword in that way if you

00:06:32,500 --> 00:06:37,930
are a team that is not experiencing

00:06:35,050 --> 00:06:38,350
growth or a team that is experiencing

00:06:37,930 --> 00:06:40,660
growth

00:06:38,350 --> 00:06:42,250
think spinnaker and these enhancements

00:06:40,660 --> 00:06:45,340
can still be productive but it's an

00:06:42,250 --> 00:06:48,670
important consideration about the way

00:06:45,340 --> 00:06:51,390
that you pose this this new technique in

00:06:48,670 --> 00:06:54,070
these new deployment methodologies

00:06:51,390 --> 00:06:55,990
because it needs to be tailored for your

00:06:54,070 --> 00:06:58,000
organization as you grow maybe you're

00:06:55,990 --> 00:06:59,350
using you teams to deploy it

00:06:58,000 --> 00:07:01,720
maybe you're deploying with old teams

00:06:59,350 --> 00:07:03,220
who can then transition new teams over

00:07:01,720 --> 00:07:06,760
to it those will be unique to your

00:07:03,220 --> 00:07:10,000
organization and it's something that I

00:07:06,760 --> 00:07:12,580
think you can learn from the ways that

00:07:10,000 --> 00:07:14,020
hellosign has tried it the things that

00:07:12,580 --> 00:07:16,510
have worked in things that haven't and

00:07:14,020 --> 00:07:18,010
like I said tailor it for the scenario

00:07:16,510 --> 00:07:23,080
that you're actually walking through

00:07:18,010 --> 00:07:27,430
right now one final point we have a

00:07:23,080 --> 00:07:29,680
monolith if you have a monolith you may

00:07:27,430 --> 00:07:31,840
be a little concerned about things like

00:07:29,680 --> 00:07:33,850
continuous deployment you might have a

00:07:31,840 --> 00:07:37,620
little knee-jerk kind of reaction when

00:07:33,850 --> 00:07:40,360
people say things like kubernetes

00:07:37,620 --> 00:07:45,220
because it can be a challenge to convert

00:07:40,360 --> 00:07:48,030
these sorts of older legacy applications

00:07:45,220 --> 00:07:50,560
over to containers for the sake of CI CD

00:07:48,030 --> 00:07:52,720
that was a problem for us one of the key

00:07:50,560 --> 00:07:55,570
features that we like in spinnaker is

00:07:52,720 --> 00:07:57,120
the ability to ship a virtual machine

00:07:55,570 --> 00:07:59,980
image or an Amazon machine image

00:07:57,120 --> 00:08:04,780
something that's a little I'll say

00:07:59,980 --> 00:08:06,220
bulkier than a container we have a lot

00:08:04,780 --> 00:08:08,080
of services that I think can fit into

00:08:06,220 --> 00:08:11,020
the container paradigm but for the most

00:08:08,080 --> 00:08:12,700
part in my opinion is that if I stand up

00:08:11,020 --> 00:08:14,800
here and tell you about all of the

00:08:12,700 --> 00:08:18,280
benefits that spinnaker can offer you in

00:08:14,800 --> 00:08:20,920
an Amazon machine image or some really

00:08:18,280 --> 00:08:22,780
fat monolithic snapshot of something

00:08:20,920 --> 00:08:24,040
that if you're a container fan you'll

00:08:22,780 --> 00:08:26,710
know you can do that with a container

00:08:24,040 --> 00:08:28,870
and I don't think that that works in the

00:08:26,710 --> 00:08:32,200
opposite direction because there's

00:08:28,870 --> 00:08:34,030
somebody out there with 15 jars that are

00:08:32,200 --> 00:08:35,830
all in random versions that nobody knows

00:08:34,030 --> 00:08:38,260
which one works with the other and it's

00:08:35,830 --> 00:08:40,120
running on some bare metal server

00:08:38,260 --> 00:08:41,800
somewhere that's been up for three and a

00:08:40,120 --> 00:08:43,300
half years and nobody touches it because

00:08:41,800 --> 00:08:45,640
it will break as soon as you try to

00:08:43,300 --> 00:08:47,320
restart anything that's the scenario

00:08:45,640 --> 00:08:48,750
where I think containers are just

00:08:47,320 --> 00:08:51,129
announced

00:08:48,750 --> 00:08:52,899
if you want to go through the effort of

00:08:51,129 --> 00:08:55,930
moving everything over I think that's

00:08:52,899 --> 00:08:57,339
noble and I think it's worthwhile but

00:08:55,930 --> 00:08:57,819
cutting the transition in a more

00:08:57,339 --> 00:09:00,279
piecemeal

00:08:57,819 --> 00:09:02,740
way was something that made for an

00:09:00,279 --> 00:09:04,000
easier sell at least a Hello sign-in as

00:09:02,740 --> 00:09:05,860
we were trying to make this

00:09:04,000 --> 00:09:08,680
implementation and move over to

00:09:05,860 --> 00:09:13,029
something more structured in our CI CD

00:09:08,680 --> 00:09:16,300
planning in terms of history as we were

00:09:13,029 --> 00:09:18,610
approaching spinnaker specifically I

00:09:16,300 --> 00:09:22,689
talked about that monolith it's also in

00:09:18,610 --> 00:09:25,540
PHP you can cheer cringe whatever the

00:09:22,689 --> 00:09:27,160
fact of the matter is PHP is functional

00:09:25,540 --> 00:09:31,000
it has been for a long time it will

00:09:27,160 --> 00:09:32,649
continue to be I'm not in a position and

00:09:31,000 --> 00:09:34,930
I don't think any of you are in a

00:09:32,649 --> 00:09:36,370
position to approach an engineering team

00:09:34,930 --> 00:09:38,019
and tell them that they need to change

00:09:36,370 --> 00:09:39,819
their language of choice for their

00:09:38,019 --> 00:09:42,370
framework that they're currently using

00:09:39,819 --> 00:09:45,310
they're working implementation just to

00:09:42,370 --> 00:09:48,790
support better see ICD this is an area

00:09:45,310 --> 00:09:50,050
where if you want to sell see ICD if you

00:09:48,790 --> 00:09:53,050
want to sell spinnaker if you want to

00:09:50,050 --> 00:09:55,839
sell anything you need to work with

00:09:53,050 --> 00:09:58,660
what's already there so in our case that

00:09:55,839 --> 00:10:02,050
was making sure that whatever we had to

00:09:58,660 --> 00:10:06,449
do to support this legacy and relatively

00:10:02,050 --> 00:10:10,420
large PHP application we had to do that

00:10:06,449 --> 00:10:13,329
in order to support that we made the

00:10:10,420 --> 00:10:16,720
decision to do things like not go for

00:10:13,329 --> 00:10:19,959
containers or like using puppet and

00:10:16,720 --> 00:10:22,029
packer and vagrant to simply grab PHP

00:10:19,959 --> 00:10:24,269
files and create a deployable artifact

00:10:22,029 --> 00:10:26,259
in our case an Amazon machine image

00:10:24,269 --> 00:10:28,389
which was something that came naturally

00:10:26,259 --> 00:10:32,439
because we've been in Amazon Web

00:10:28,389 --> 00:10:36,339
Services for all of our life which gives

00:10:32,439 --> 00:10:39,550
us a particular edge in some regard but

00:10:36,339 --> 00:10:43,389
that said when we originally began this

00:10:39,550 --> 00:10:46,240
transition we went from what's referred

00:10:43,389 --> 00:10:48,850
to I think as a golden ami kind of

00:10:46,240 --> 00:10:51,579
standard where we had this magical

00:10:48,850 --> 00:10:53,649
production ami that was using auto

00:10:51,579 --> 00:10:54,819
scaling groups in Amazon Web Services

00:10:53,649 --> 00:10:56,559
and we would update the launch

00:10:54,819 --> 00:10:59,649
configuration in order to make sure that

00:10:56,559 --> 00:11:00,850
things were spinning up properly when we

00:10:59,649 --> 00:11:04,500
needed to scale

00:11:00,850 --> 00:11:04,500
but when we needed to make a change

00:11:06,180 --> 00:11:11,440
somebody connected over SSH and made a

00:11:09,280 --> 00:11:13,270
change and then we made a new AMI and

00:11:11,440 --> 00:11:18,460
then we updated the launch configuration

00:11:13,270 --> 00:11:20,950
and that's how it worked I mocked that

00:11:18,460 --> 00:11:24,100
it's not a terrible situation it's

00:11:20,950 --> 00:11:26,920
fairly close to something that's cloud

00:11:24,100 --> 00:11:29,080
appropriate but you can see how that's

00:11:26,920 --> 00:11:32,020
probably not the best way to do things

00:11:29,080 --> 00:11:34,420
you get historical croft detritus you

00:11:32,020 --> 00:11:36,100
get old binaries on there that aren't in

00:11:34,420 --> 00:11:39,010
use anymore old services that are

00:11:36,100 --> 00:11:40,990
starting that nobody's actually using it

00:11:39,010 --> 00:11:43,360
just lends itself to what ultimately

00:11:40,990 --> 00:11:45,490
results in a dirty image as opposed to a

00:11:43,360 --> 00:11:49,030
clean and current representation of what

00:11:45,490 --> 00:11:51,730
you're trying to do but it put us into a

00:11:49,030 --> 00:11:53,470
comfortable position to enhance that and

00:11:51,730 --> 00:11:56,950
to simply start with a clean image every

00:11:53,470 --> 00:12:00,760
time and at this point we generated

00:11:56,950 --> 00:12:03,250
these Amazon machine images using an ass

00:12:00,760 --> 00:12:05,320
guard inspired deploy mechanism does

00:12:03,250 --> 00:12:09,210
anybody know eschar the predecessor to

00:12:05,320 --> 00:12:11,710
spinnaker the convenient thing there is

00:12:09,210 --> 00:12:13,090
very consistent with what spinnaker is

00:12:11,710 --> 00:12:14,620
doing if you have a bunch of

00:12:13,090 --> 00:12:16,270
infrastructure that was launched and

00:12:14,620 --> 00:12:18,880
maintained in-house guard spinnaker can

00:12:16,270 --> 00:12:20,230
kind of start up and just manipulate it

00:12:18,880 --> 00:12:22,870
and know a lot about what's going on

00:12:20,230 --> 00:12:25,660
because of naming conventions but most

00:12:22,870 --> 00:12:27,130
importantly this concept of bacon ami

00:12:25,660 --> 00:12:27,700
deploy an ami if you need to make a

00:12:27,130 --> 00:12:30,220
change

00:12:27,700 --> 00:12:33,400
bacon ami deploy an ami was something

00:12:30,220 --> 00:12:36,970
that was familiar and part of the

00:12:33,400 --> 00:12:39,100
current implementation so there's a

00:12:36,970 --> 00:12:41,460
little bit about kind of where where we

00:12:39,100 --> 00:12:44,560
were as we were approaching this

00:12:41,460 --> 00:12:46,990
maneuver into a world where spinnaker

00:12:44,560 --> 00:12:48,670
can be a more integral part of our

00:12:46,990 --> 00:12:52,360
process in our software delivery

00:12:48,670 --> 00:12:55,330
mechanism since that was five slides

00:12:52,360 --> 00:12:59,050
full of text there's a picture to look

00:12:55,330 --> 00:13:00,550
at this is a lot of information it's a

00:12:59,050 --> 00:13:02,950
lot of background it's a lot of history

00:13:00,550 --> 00:13:05,590
but ultimately it's really to shape a

00:13:02,950 --> 00:13:08,260
little bit about where hellosign is as a

00:13:05,590 --> 00:13:09,850
business again to compare where you are

00:13:08,260 --> 00:13:12,920
and what might be important to you in

00:13:09,850 --> 00:13:14,779
terms of takeaway and it's also

00:13:12,920 --> 00:13:17,540
as I hinted it's just to highlight that

00:13:14,779 --> 00:13:21,589
I'm not gonna talk about containers in

00:13:17,540 --> 00:13:24,110
this talk I don't know hopefully that's

00:13:21,589 --> 00:13:25,760
not an offensive picture but I think

00:13:24,110 --> 00:13:28,850
containers can work like I said I think

00:13:25,760 --> 00:13:31,160
they're a great technology and they are

00:13:28,850 --> 00:13:33,470
useful for a lot of people I don't think

00:13:31,160 --> 00:13:35,690
that they fit the needs of every

00:13:33,470 --> 00:13:37,670
organization though I think that it's

00:13:35,690 --> 00:13:41,180
more likely that you can get your stuff

00:13:37,670 --> 00:13:43,370
to work in a VM today without having to

00:13:41,180 --> 00:13:45,800
deal with challenges around shared file

00:13:43,370 --> 00:13:47,690
systems or how you're gonna manage DNS

00:13:45,800 --> 00:13:49,370
and networking or what's gonna

00:13:47,690 --> 00:13:52,160
orchestrate things and and yes

00:13:49,370 --> 00:13:53,240
kubernetes does a lot of this sto can

00:13:52,160 --> 00:13:54,589
help and there are a lot of

00:13:53,240 --> 00:13:56,630
implementations that can get it to work

00:13:54,589 --> 00:13:58,910
but when I launch an Amazon machine

00:13:56,630 --> 00:14:01,730
image into an auto scaling group I've

00:13:58,910 --> 00:14:03,920
put a load balancer in front of it it's

00:14:01,730 --> 00:14:06,019
just the old-school implementation load

00:14:03,920 --> 00:14:08,420
balancer communicates with some server

00:14:06,019 --> 00:14:10,959
somewhere doing something and being able

00:14:08,420 --> 00:14:13,670
to control that is just a slightly more

00:14:10,959 --> 00:14:15,740
rudimentary implementation that I think

00:14:13,670 --> 00:14:18,140
everyone is able to grasp latch on to

00:14:15,740 --> 00:14:18,890
and understand kind of the direction

00:14:18,140 --> 00:14:20,930
that you're going

00:14:18,890 --> 00:14:22,640
and that's important here because we

00:14:20,930 --> 00:14:24,500
want to reduce as much friction as

00:14:22,640 --> 00:14:30,470
possible you don't want to have to try

00:14:24,500 --> 00:14:31,670
to sell spinnaker and kubernetes I don't

00:14:30,470 --> 00:14:33,680
want to try to sell spinnaker and

00:14:31,670 --> 00:14:35,720
containers in general if I'm trying to

00:14:33,680 --> 00:14:37,970
use something that's not kubernetes I

00:14:35,720 --> 00:14:40,279
just want to sell ci CD and I want to

00:14:37,970 --> 00:14:43,399
map it to exactly what we're doing

00:14:40,279 --> 00:14:45,980
already as closely as I possibly can in

00:14:43,399 --> 00:14:48,079
that interest for hellosign that meant

00:14:45,980 --> 00:14:50,300
we're gonna use github like we always

00:14:48,079 --> 00:14:52,339
have and continue to and will continue

00:14:50,300 --> 00:14:54,680
to do so for the foreseeable future it

00:14:52,339 --> 00:14:56,660
means that we're gonna keep using

00:14:54,680 --> 00:14:59,930
Jenkins because that's our CI tool of

00:14:56,660 --> 00:15:02,990
choice those both also happen to have a

00:14:59,930 --> 00:15:04,640
very prominent presence in the spinnaker

00:15:02,990 --> 00:15:07,430
community and in terms of spinnaker

00:15:04,640 --> 00:15:10,250
support which is convenient and good it

00:15:07,430 --> 00:15:13,610
doesn't mean that you're not Jenkins

00:15:10,250 --> 00:15:16,339
CI server or you're not github hosting

00:15:13,610 --> 00:15:17,870
solution will not work it just means

00:15:16,339 --> 00:15:19,850
that it's a consideration that needs to

00:15:17,870 --> 00:15:21,769
be accommodated in any demo or any

00:15:19,850 --> 00:15:25,340
discussion that you're having again we

00:15:21,769 --> 00:15:28,640
need to remove those variables and those

00:15:25,340 --> 00:15:30,950
kind of question prompting issues from

00:15:28,640 --> 00:15:33,140
it this needs to be just adding CI to

00:15:30,950 --> 00:15:34,550
what you already have going we already

00:15:33,140 --> 00:15:37,220
touched on the fact that we're on AWS

00:15:34,550 --> 00:15:42,710
and we'll be using Amazon machine images

00:15:37,220 --> 00:15:44,990
for our unit of deployment that's the

00:15:42,710 --> 00:15:48,440
background sets up kind of where where

00:15:44,990 --> 00:15:50,600
we are moving into why you might need to

00:15:48,440 --> 00:15:53,720
sell a DevOps transformation or why you

00:15:50,600 --> 00:15:55,790
want to sell a DevOps transformation I

00:15:53,720 --> 00:15:58,190
think that in general the people in this

00:15:55,790 --> 00:16:00,980
room are in this room because they have

00:15:58,190 --> 00:16:03,650
an appreciation for this because you

00:16:00,980 --> 00:16:05,840
know that whatever a DevOps

00:16:03,650 --> 00:16:09,080
transformation is or however someone

00:16:05,840 --> 00:16:11,210
might define it it has positive impact

00:16:09,080 --> 00:16:12,710
you want to be that high-performing

00:16:11,210 --> 00:16:15,260
organization you want to be able to

00:16:12,710 --> 00:16:18,710
release every minute you want to be able

00:16:15,260 --> 00:16:21,620
to push 17 different projects from one

00:16:18,710 --> 00:16:24,620
team wherever you want into every cloud

00:16:21,620 --> 00:16:27,110
at every minute of the day and DevOps

00:16:24,620 --> 00:16:30,770
transformation magically makes you do

00:16:27,110 --> 00:16:32,960
this it doesn't that was extremely

00:16:30,770 --> 00:16:35,000
hyperbolic but it will put you in a

00:16:32,960 --> 00:16:37,070
position where you can increase your

00:16:35,000 --> 00:16:39,580
throughput and make sure that things are

00:16:37,070 --> 00:16:41,510
doing what they need to do in general

00:16:39,580 --> 00:16:43,850
since again I'm running on the

00:16:41,510 --> 00:16:46,730
assumption that this is kind of a known

00:16:43,850 --> 00:16:49,010
postulate in this room I'll just say

00:16:46,730 --> 00:16:50,930
there are a couple of recent state of

00:16:49,010 --> 00:16:53,330
DevOps reports there's a lot of good

00:16:50,930 --> 00:16:55,700
information and it can help you gauge

00:16:53,330 --> 00:16:57,710
where you are in this DevOps

00:16:55,700 --> 00:16:59,780
transformation scheme if we were gonna

00:16:57,710 --> 00:17:02,000
put together a giant spectrum of where

00:16:59,780 --> 00:17:04,220
all of the organization's live and you

00:17:02,000 --> 00:17:06,170
can think about what your next next step

00:17:04,220 --> 00:17:08,540
should be or you should be focusing your

00:17:06,170 --> 00:17:10,370
efforts I'm not gonna go into great

00:17:08,540 --> 00:17:14,780
detail on what they are I will highlight

00:17:10,370 --> 00:17:17,060
just a few important parts this is sort

00:17:14,780 --> 00:17:18,680
of a technical sandwich with some

00:17:17,060 --> 00:17:21,410
cultural aspects on the top and the

00:17:18,680 --> 00:17:22,810
bottom I think that spinnaker handles

00:17:21,410 --> 00:17:25,990
the middle bits

00:17:22,810 --> 00:17:29,290
doing the cloud right forcing you to use

00:17:25,990 --> 00:17:31,700
cloud services that can be abstracted

00:17:29,290 --> 00:17:33,260
focusing on immutable infrastructure

00:17:31,700 --> 00:17:34,760
making sure that your state is stored

00:17:33,260 --> 00:17:37,400
somewhere where states should be stored

00:17:34,760 --> 00:17:39,370
such that you can deploy your code in

00:17:37,400 --> 00:17:42,560
mutable fashion and really roll through

00:17:39,370 --> 00:17:44,540
these updates in in a way that is

00:17:42,560 --> 00:17:47,960
streamlined for software delivery and

00:17:44,540 --> 00:17:51,230
fully functional and and optimized for a

00:17:47,960 --> 00:17:53,960
cloud setting software delivery in

00:17:51,230 --> 00:17:55,340
general is an important part of any kind

00:17:53,960 --> 00:17:58,250
of organization that's gonna be

00:17:55,340 --> 00:18:00,890
considered high-performing by these

00:17:58,250 --> 00:18:03,530
state of DevOps reports and by analysts

00:18:00,890 --> 00:18:05,750
and Industry and anecdotally by most

00:18:03,530 --> 00:18:09,800
individuals you will encounter if it

00:18:05,750 --> 00:18:12,740
takes months to deploy a code update I

00:18:09,800 --> 00:18:15,380
can guarantee that your engineers you

00:18:12,740 --> 00:18:18,350
developers your your engineers and test

00:18:15,380 --> 00:18:20,540
your security crew they're not gonna

00:18:18,350 --> 00:18:23,210
call your organization a high-performing

00:18:20,540 --> 00:18:25,550
organization just by definition those

00:18:23,210 --> 00:18:28,310
heavy delays in software delivery are

00:18:25,550 --> 00:18:30,800
going to be a meaningful and impactful

00:18:28,310 --> 00:18:33,680
aspect of personal assessment and

00:18:30,800 --> 00:18:36,230
external assessment likewise good

00:18:33,680 --> 00:18:38,210
technical habits and practices kind of

00:18:36,230 --> 00:18:40,310
go hand in hand with delivery speed if

00:18:38,210 --> 00:18:42,980
you have high delivery speed it's highly

00:18:40,310 --> 00:18:44,600
likely that your team has managed to put

00:18:42,980 --> 00:18:46,580
together some good technical practice

00:18:44,600 --> 00:18:50,390
and it's sort of doing things in a way

00:18:46,580 --> 00:18:52,220
that they approve of so your developers

00:18:50,390 --> 00:18:54,200
are feeling confident in your processes

00:18:52,220 --> 00:18:56,930
they're feeling like the process is

00:18:54,200 --> 00:18:58,790
there to allow them to do their job not

00:18:56,930 --> 00:19:00,110
putting up blockers and keeping them

00:18:58,790 --> 00:19:00,620
from accomplishing what they need to

00:19:00,110 --> 00:19:05,530
accomplish

00:19:00,620 --> 00:19:08,780
I think spinnaker either directly

00:19:05,530 --> 00:19:10,730
implements these or is really set up

00:19:08,780 --> 00:19:15,260
around a structure for your pipelines

00:19:10,730 --> 00:19:17,300
that will force you to perform the

00:19:15,260 --> 00:19:19,220
better technical practices and make sure

00:19:17,300 --> 00:19:22,420
that you're using the cloud correctly

00:19:19,220 --> 00:19:25,970
and just do a lot of this work for you

00:19:22,420 --> 00:19:30,350
the harder parts in my opinion are those

00:19:25,970 --> 00:19:33,020
more cultural aspects in Reverse going

00:19:30,350 --> 00:19:34,820
back to the top leadership is important

00:19:33,020 --> 00:19:37,430
if you don't have buy-in from your

00:19:34,820 --> 00:19:40,070
organization's leadership it's certainly

00:19:37,430 --> 00:19:42,110
not going to be an impossibility to

00:19:40,070 --> 00:19:44,840
deploy spinnaker or to proceed forward

00:19:42,110 --> 00:19:47,690
with a DevOps transformation but they

00:19:44,840 --> 00:19:50,480
can definitely make it harder if

00:19:47,690 --> 00:19:53,779
but is constantly discussing these

00:19:50,480 --> 00:19:55,879
manual checks that you know are slowing

00:19:53,779 --> 00:19:58,909
everything down if someone can't quite

00:19:55,879 --> 00:20:01,820
get behind the validity of tests or

00:19:58,909 --> 00:20:04,279
trusting your CI mechanism someone's not

00:20:01,820 --> 00:20:05,600
on board who can simply make decisions

00:20:04,279 --> 00:20:07,220
that are going to impact all of the

00:20:05,600 --> 00:20:10,940
teams that are working underneath them

00:20:07,220 --> 00:20:13,639
they will make it really difficult I've

00:20:10,940 --> 00:20:16,789
seen this happen a few times but

00:20:13,639 --> 00:20:18,139
generally you can sell leadership on

00:20:16,789 --> 00:20:20,899
things if you're willing to take

00:20:18,139 --> 00:20:23,029
ownership for their validity that's a

00:20:20,899 --> 00:20:25,220
challenging position to be in but if

00:20:23,029 --> 00:20:27,019
your leadership is not behind this there

00:20:25,220 --> 00:20:29,330
should be an early target of this this

00:20:27,019 --> 00:20:30,980
cell you need to sell them on this

00:20:29,330 --> 00:20:33,200
transformation in order to make sure

00:20:30,980 --> 00:20:36,860
that you can get to moving with selling

00:20:33,200 --> 00:20:40,029
everyone else at the bottom there which

00:20:36,860 --> 00:20:43,549
is tightly linked is this concept that

00:20:40,029 --> 00:20:47,059
culture is critical here if all of your

00:20:43,549 --> 00:20:50,889
teams are sufficiently siloed working

00:20:47,059 --> 00:20:53,149
within their own confines day-in day-out

00:20:50,889 --> 00:20:55,240
finishing their cue finishing their

00:20:53,149 --> 00:20:57,799
tasks not interfacing with anyone else

00:20:55,240 --> 00:20:59,509
that's the culture that needs to change

00:20:57,799 --> 00:21:01,970
that's part of what this transformation

00:20:59,509 --> 00:21:04,519
is trying to make sure that they have

00:21:01,970 --> 00:21:07,220
not only a mechanism for discussion

00:21:04,519 --> 00:21:10,399
discussion across teams but also an

00:21:07,220 --> 00:21:14,419
impetus and an interest in doing so is

00:21:10,399 --> 00:21:16,549
is a key consideration here to making

00:21:14,419 --> 00:21:19,129
sure that you can start working with

00:21:16,549 --> 00:21:21,590
with spinnaker and addressing those

00:21:19,129 --> 00:21:25,909
those middle parts that are more

00:21:21,590 --> 00:21:28,039
technical using that deployment that see

00:21:25,909 --> 00:21:30,259
ICD implementation as a mechanism to

00:21:28,039 --> 00:21:32,919
start also driving this cultural shift

00:21:30,259 --> 00:21:35,389
that can make sure that your users are

00:21:32,919 --> 00:21:38,929
communicating effectively and working

00:21:35,389 --> 00:21:43,840
hard to enhance any process that they

00:21:38,929 --> 00:21:45,019
happen to be touching rewording that

00:21:43,840 --> 00:21:50,480
ever-so-slightly

00:21:45,019 --> 00:21:54,620
why sell the DevOps transformation I

00:21:50,480 --> 00:21:56,570
think this goes hand-in-hand with the

00:21:54,620 --> 00:21:58,669
fact that we're in what I would consider

00:21:56,570 --> 00:22:01,010
to be an echo chamber here the same

00:21:58,669 --> 00:22:02,810
reason I didn't feel like I needed to

00:22:01,010 --> 00:22:06,110
you on what a DevOps transformation is

00:22:02,810 --> 00:22:08,630
and why it's important but notice that

00:22:06,110 --> 00:22:10,910
everyone on your team probably isn't in

00:22:08,630 --> 00:22:13,580
this room everyone who would touch a

00:22:10,910 --> 00:22:16,550
delivery pipeline is not here with you

00:22:13,580 --> 00:22:18,680
they're not necessarily against this but

00:22:16,550 --> 00:22:20,510
they're not fully bought in because it's

00:22:18,680 --> 00:22:23,260
just not part of what they're doing

00:22:20,510 --> 00:22:26,330
day-in day-out it might make it easier

00:22:23,260 --> 00:22:29,630
but it can be difficult to appreciate

00:22:26,330 --> 00:22:31,190
that enhancement when you've got a giant

00:22:29,630 --> 00:22:36,500
queue of things that just need to be

00:22:31,190 --> 00:22:38,390
validated and qaid or 700c bees just

00:22:36,500 --> 00:22:42,080
came out we need to figure out if those

00:22:38,390 --> 00:22:43,940
have any impact on any of our 500

00:22:42,080 --> 00:22:45,980
servers and services that are running on

00:22:43,940 --> 00:22:48,650
all of those servers or there's a

00:22:45,980 --> 00:22:50,570
release next week and it doesn't matter

00:22:48,650 --> 00:22:53,090
if this would make releases faster I

00:22:50,570 --> 00:22:54,560
have a release next week and I have to

00:22:53,090 --> 00:22:57,140
do the things that need to be completed

00:22:54,560 --> 00:22:59,270
in order to make that release happen and

00:22:57,140 --> 00:23:04,520
I don't have time for this these other

00:22:59,270 --> 00:23:06,500
aspects of it so I think that in that in

00:23:04,520 --> 00:23:08,990
that scoping it's important to remember

00:23:06,500 --> 00:23:10,250
that even if we want to drive this if we

00:23:08,990 --> 00:23:12,470
want to say that this is going to

00:23:10,250 --> 00:23:14,990
productively impact your organization as

00:23:12,470 --> 00:23:17,750
a whole and increase your organization's

00:23:14,990 --> 00:23:20,180
ability to sort of categorize yourselves

00:23:17,750 --> 00:23:23,480
higher on this high performer or elite

00:23:20,180 --> 00:23:25,010
performer sort of status it's still

00:23:23,480 --> 00:23:26,270
something that you're gonna need to get

00:23:25,010 --> 00:23:29,090
everyone bought into and you're gonna

00:23:26,270 --> 00:23:30,970
need to sell it to them I think this

00:23:29,090 --> 00:23:33,290
goes hand-in-hand with converting

00:23:30,970 --> 00:23:35,720
deployment and delivery to something

00:23:33,290 --> 00:23:38,960
that functions as its own product this

00:23:35,720 --> 00:23:41,060
deployment as a service concept and I

00:23:38,960 --> 00:23:43,100
think that it can be an internal product

00:23:41,060 --> 00:23:45,110
this isn't a money sale this is a

00:23:43,100 --> 00:23:47,000
concept cell that we need to standardize

00:23:45,110 --> 00:23:48,800
on these things and make sure that

00:23:47,000 --> 00:23:52,250
everyone sees how it's going to benefit

00:23:48,800 --> 00:23:55,970
their team benefit them as an individual

00:23:52,250 --> 00:23:59,180
and simply be worth the investment time

00:23:55,970 --> 00:24:01,310
that they need to make and be a positive

00:23:59,180 --> 00:24:03,230
net payout for them how long is it gonna

00:24:01,310 --> 00:24:04,400
take to implement how much work is it

00:24:03,230 --> 00:24:07,010
gonna take for me and what's it gonna

00:24:04,400 --> 00:24:11,090
save me in the future I know from

00:24:07,010 --> 00:24:15,800
experience that I've tried to sell this

00:24:11,090 --> 00:24:18,260
in a different way and I also know from

00:24:15,800 --> 00:24:21,170
experience that it has failed many many

00:24:18,260 --> 00:24:22,940
times we'll walk through a couple of

00:24:21,170 --> 00:24:25,610
scenarios and hopefully you can learn

00:24:22,940 --> 00:24:28,760
from my mistakes and and figure out ways

00:24:25,610 --> 00:24:30,830
that maybe aren't well suited to every

00:24:28,760 --> 00:24:34,370
organization maybe we're just terrible

00:24:30,830 --> 00:24:40,220
mistakes let's say it's the the former

00:24:34,370 --> 00:24:43,550
just so I look a little bit better has

00:24:40,220 --> 00:24:47,140
anybody done this I mean I have I've

00:24:43,550 --> 00:24:49,340
basically just come out swinging

00:24:47,140 --> 00:24:50,480
we need to use spinnaker because it's

00:24:49,340 --> 00:24:59,090
awesome it'll take care of everything

00:24:50,480 --> 00:25:00,440
you can do roll backs and stuff yeah it

00:24:59,090 --> 00:25:03,440
doesn't work

00:25:00,440 --> 00:25:05,540
I mean people appreciate it

00:25:03,440 --> 00:25:07,790
anyone that is technical and has an

00:25:05,540 --> 00:25:10,160
appreciation for software delivery they

00:25:07,790 --> 00:25:12,470
enjoy this concept of automating

00:25:10,160 --> 00:25:14,510
everything automate all the things you

00:25:12,470 --> 00:25:18,430
know hyperbole and a half the meme that

00:25:14,510 --> 00:25:21,620
never dies I think in general everyone

00:25:18,430 --> 00:25:22,910
appreciates that but you can appreciate

00:25:21,620 --> 00:25:24,770
something and you can see it as

00:25:22,910 --> 00:25:26,840
technically superior it doesn't mean

00:25:24,770 --> 00:25:28,550
it's the right decision we talked about

00:25:26,840 --> 00:25:31,220
how the PHP code works

00:25:28,550 --> 00:25:35,000
the monolith works like what's the real

00:25:31,220 --> 00:25:36,650
impetus to use go microservices for

00:25:35,000 --> 00:25:39,980
everything and scrap all that stuff that

00:25:36,650 --> 00:25:42,650
works I don't know I don't have a cell

00:25:39,980 --> 00:25:45,130
for that I can't commit to that being a

00:25:42,650 --> 00:25:48,020
productive change for any organization

00:25:45,130 --> 00:25:50,960
for spinnaker for DevOps transformation

00:25:48,020 --> 00:25:52,910
for enhancing your release deployment

00:25:50,960 --> 00:25:55,070
pipeline I think there's generally a

00:25:52,910 --> 00:25:56,510
positive case to be made that the amount

00:25:55,070 --> 00:25:58,850
of investment time that you're gonna put

00:25:56,510 --> 00:26:01,070
in will pay off and it will pay off

00:25:58,850 --> 00:26:03,410
quickly and it will pay off in a really

00:26:01,070 --> 00:26:05,690
meaningful way and that's part of what

00:26:03,410 --> 00:26:07,760
what needs to happen is that that

00:26:05,690 --> 00:26:09,800
balance and figuring out how you sell

00:26:07,760 --> 00:26:12,860
this to the individuals who are going to

00:26:09,800 --> 00:26:16,430
use it in that way where they can't just

00:26:12,860 --> 00:26:18,950
say what's in it for me how is this

00:26:16,430 --> 00:26:23,090
gonna be productive for me

00:26:18,950 --> 00:26:26,239
and so you can start to implement this

00:26:23,090 --> 00:26:28,879
DevOps transformation those of you in

00:26:26,239 --> 00:26:31,009
this room you might lead the DevOps

00:26:28,879 --> 00:26:33,889
transformation at an organization or

00:26:31,009 --> 00:26:36,679
within your your team but but like I

00:26:33,889 --> 00:26:38,269
said this isn't gonna be one person

00:26:36,679 --> 00:26:40,009
making this decision because it's not

00:26:38,269 --> 00:26:43,850
gonna work even if you get buy-in from

00:26:40,009 --> 00:26:45,769
one or two people based on just pushing

00:26:43,850 --> 00:26:48,019
this agenda and this transformation as

00:26:45,769 --> 00:26:50,779
one person I don't think that it's gonna

00:26:48,019 --> 00:26:54,429
naturally just spread like the plague

00:26:50,779 --> 00:26:57,739
across your organization if you're a

00:26:54,429 --> 00:27:00,529
c-level if you're a team lead senior

00:26:57,739 --> 00:27:03,379
manager you don't get to just rain down

00:27:00,529 --> 00:27:06,799
DevOps from above it doesn't work you

00:27:03,379 --> 00:27:09,019
can't create a DevOps team and check a

00:27:06,799 --> 00:27:11,419
box and have the DevOps transformation

00:27:09,019 --> 00:27:13,749
in place and we're awesome we deliver

00:27:11,419 --> 00:27:16,159
fast now because we have a DevOps team

00:27:13,749 --> 00:27:17,869
those just don't work it doesn't it

00:27:16,159 --> 00:27:20,359
doesn't complete anything it might offer

00:27:17,869 --> 00:27:22,100
you minor enhancements but it's not

00:27:20,359 --> 00:27:24,169
gonna be the devops transformation that

00:27:22,100 --> 00:27:25,850
will most productively impact your team

00:27:24,169 --> 00:27:28,730
that's gonna be something that has to be

00:27:25,850 --> 00:27:33,519
more of an organizational wide change

00:27:28,730 --> 00:27:36,649
it's gotta have motivated individuals on

00:27:33,519 --> 00:27:38,480
your project team if you have diverse

00:27:36,649 --> 00:27:41,659
project teams it's got to have motivated

00:27:38,480 --> 00:27:44,359
individuals in QA and security and

00:27:41,659 --> 00:27:46,730
release in DevOps whatever your team

00:27:44,359 --> 00:27:48,619
structure or org structure is everyone's

00:27:46,730 --> 00:27:50,359
gonna touch this release everyone that's

00:27:48,619 --> 00:27:52,820
gonna be involved in this pipeline or

00:27:50,359 --> 00:27:54,230
interested in this pipeline needs to

00:27:52,820 --> 00:27:57,350
understand how it's going to benefit

00:27:54,230 --> 00:27:59,779
them so that they can help you push for

00:27:57,350 --> 00:28:01,909
this change so they can help drive and

00:27:59,779 --> 00:28:04,580
keep the momentum behind this DevOps

00:28:01,909 --> 00:28:06,379
transformation your customer support

00:28:04,580 --> 00:28:08,869
teams or customer success teams they

00:28:06,379 --> 00:28:12,289
should be interested in what's happening

00:28:08,869 --> 00:28:14,029
in deploys they should be able to look

00:28:12,289 --> 00:28:16,340
quickly and see what the state of a

00:28:14,029 --> 00:28:18,109
given environment is they should want to

00:28:16,340 --> 00:28:21,529
do that they should want that feature if

00:28:18,109 --> 00:28:23,269
someone is some influx of bug reports

00:28:21,529 --> 00:28:25,429
are coming in from customers and it's a

00:28:23,269 --> 00:28:27,320
panic moment and your customer support

00:28:25,429 --> 00:28:30,380
team can see that a deploy happened

00:28:27,320 --> 00:28:32,630
right before these complaints

00:28:30,380 --> 00:28:34,190
coming in then you can make a smart

00:28:32,630 --> 00:28:37,220
decision about whether or not to roll

00:28:34,190 --> 00:28:40,940
back or to huh fix or patch this this

00:28:37,220 --> 00:28:42,530
issue and that's a feature that not many

00:28:40,940 --> 00:28:45,140
of the customer support teams that I've

00:28:42,530 --> 00:28:47,150
worked with have had direct access to

00:28:45,140 --> 00:28:49,370
it's something that they had to go and

00:28:47,150 --> 00:28:50,900
ask somebody else about what what just

00:28:49,370 --> 00:28:52,640
happened when did the deploy go out what

00:28:50,900 --> 00:28:54,350
was included in the deploy they might

00:28:52,640 --> 00:28:56,590
have gotten release notes but who reads

00:28:54,350 --> 00:28:59,960
release notes for internal products I

00:28:56,590 --> 00:29:02,270
don't I don't know maybe the rest of you

00:28:59,960 --> 00:29:04,700
are more diligent about it than me but a

00:29:02,270 --> 00:29:06,560
lot of times this kind of come in and go

00:29:04,700 --> 00:29:10,040
out and I don't really process what's

00:29:06,560 --> 00:29:14,270
actually changing I think fundamentally

00:29:10,040 --> 00:29:16,220
as you're looking towards the CI CD

00:29:14,270 --> 00:29:18,470
implementation as you're looking for

00:29:16,220 --> 00:29:20,690
solutions here as you're looking to

00:29:18,470 --> 00:29:23,240
develop this DevOps transformation it

00:29:20,690 --> 00:29:24,980
needs to be about changing the team

00:29:23,240 --> 00:29:27,620
changing the culture and making sure

00:29:24,980 --> 00:29:30,950
that in addition to automating things

00:29:27,620 --> 00:29:33,170
and moderating things and changing based

00:29:30,950 --> 00:29:34,220
on that automation and that monitoring

00:29:33,170 --> 00:29:36,350
and those discussions

00:29:34,220 --> 00:29:39,620
you need that sharing aspect you need

00:29:36,350 --> 00:29:41,660
that discussion you need those cross

00:29:39,620 --> 00:29:46,580
team integrations that are gonna let you

00:29:41,660 --> 00:29:49,040
really figure out what your path to

00:29:46,580 --> 00:29:50,480
delivery can look like and where the

00:29:49,040 --> 00:29:51,920
gates need to be and what the

00:29:50,480 --> 00:29:54,980
requirements need to be to make sure

00:29:51,920 --> 00:29:57,110
that everyone's comfortable with it and

00:29:54,980 --> 00:29:59,870
again that's all just to say that this

00:29:57,110 --> 00:30:02,180
isn't it's not one person it's not it's

00:29:59,870 --> 00:30:03,740
not you or me standing on the sidelines

00:30:02,180 --> 00:30:06,410
saying I stood up spinnaker it's awesome

00:30:03,740 --> 00:30:08,510
I I deployed these six features with it

00:30:06,410 --> 00:30:11,780
on this project and that project and we

00:30:08,510 --> 00:30:14,150
should convert everything it's it's

00:30:11,780 --> 00:30:15,950
interesting but that that doesn't make

00:30:14,150 --> 00:30:18,830
me want to change my project right here

00:30:15,950 --> 00:30:20,420
right now and if you say everybody's

00:30:18,830 --> 00:30:23,060
changing to it then that's gonna drive

00:30:20,420 --> 00:30:25,340
me to wrap my stuff and not touch it or

00:30:23,060 --> 00:30:27,590
figure out a way to get the spinnaker

00:30:25,340 --> 00:30:29,390
pipeline to send a web hook out to

00:30:27,590 --> 00:30:30,590
Jenkins where Jenkins will actually do

00:30:29,390 --> 00:30:33,380
the deploy and then report back

00:30:30,590 --> 00:30:35,420
something silly like that because every

00:30:33,380 --> 00:30:37,490
time you implement something and force

00:30:35,420 --> 00:30:39,530
people into it you end up with these

00:30:37,490 --> 00:30:42,179
crazy workarounds because somebody knows

00:30:39,530 --> 00:30:44,820
how to do it better and they might

00:30:42,179 --> 00:30:46,889
but it reduces consistency and in some

00:30:44,820 --> 00:30:48,929
cases this consistency and working

00:30:46,889 --> 00:30:51,389
within the confines of a consistent

00:30:48,929 --> 00:30:53,429
platform are productive for the team and

00:30:51,389 --> 00:30:55,409
making sure that everyone is bought into

00:30:53,429 --> 00:30:57,330
that and participating in it can help

00:30:55,409 --> 00:31:02,070
with actually moving forward and DevOps

00:30:57,330 --> 00:31:03,840
transformation so the the long version

00:31:02,070 --> 00:31:05,700
of don't just say that spinnaker is

00:31:03,840 --> 00:31:09,779
awesome because DevOps are because I

00:31:05,700 --> 00:31:12,389
sorry or because I said so you need to

00:31:09,779 --> 00:31:15,539
you need to found this another direction

00:31:12,389 --> 00:31:19,710
that you can go is something more like

00:31:15,539 --> 00:31:21,480
marketing copy I mean this is this is

00:31:19,710 --> 00:31:23,610
from the spinnaker IO site spinnaker is

00:31:21,480 --> 00:31:25,919
an open source multi-cloud continuous

00:31:23,610 --> 00:31:27,360
delivery platform for releasing software

00:31:25,919 --> 00:31:31,860
changes with high velocity and

00:31:27,360 --> 00:31:35,009
confidence it does say a lot and it says

00:31:31,860 --> 00:31:36,899
a lot and not that many words but if you

00:31:35,009 --> 00:31:40,619
don't know much about spinnaker if you

00:31:36,899 --> 00:31:42,149
don't know much about sea ICD if you

00:31:40,619 --> 00:31:45,869
don't know what the cloud is like this

00:31:42,149 --> 00:31:48,389
is nonsense this isn't gonna sell

00:31:45,869 --> 00:31:51,110
spinnaker this isn't gonna sell a DevOps

00:31:48,389 --> 00:31:55,080
transformation this isn't gonna sell

00:31:51,110 --> 00:31:57,539
anything to someone who's not already

00:31:55,080 --> 00:32:00,480
involved this is more echo-chamber this

00:31:57,539 --> 00:32:02,309
is reaching out to you and to me to say

00:32:00,480 --> 00:32:04,320
that we should investigate spinnaker but

00:32:02,309 --> 00:32:06,029
then figure out how to sell it to other

00:32:04,320 --> 00:32:09,840
people make sure that your team is

00:32:06,029 --> 00:32:12,559
interested in what's going on because

00:32:09,840 --> 00:32:15,119
this is what they're gonna say to that

00:32:12,559 --> 00:32:17,999
because it doesn't impact them again

00:32:15,119 --> 00:32:19,019
this is an unsuccessful sell because

00:32:17,999 --> 00:32:21,029
you're trying to sell them something

00:32:19,019 --> 00:32:22,529
that doesn't immediately pay out it it

00:32:21,029 --> 00:32:25,590
doesn't detail what the payout is gonna

00:32:22,529 --> 00:32:27,869
be you can follow up you can talk about

00:32:25,590 --> 00:32:29,700
one-click deploys you can talk about

00:32:27,869 --> 00:32:31,799
rollback you can talk about audit you

00:32:29,700 --> 00:32:35,309
can talk about consistency you can talk

00:32:31,799 --> 00:32:37,320
about all of these things that are

00:32:35,309 --> 00:32:39,990
listed on the bullet points on the

00:32:37,320 --> 00:32:42,869
spinnaker website that we know make our

00:32:39,990 --> 00:32:44,639
lives easier in terms of being able to

00:32:42,869 --> 00:32:46,799
deploy things and monitor what's going

00:32:44,639 --> 00:32:48,559
on in environments maybe a release

00:32:46,799 --> 00:32:51,119
manager would appreciate these things

00:32:48,559 --> 00:32:53,600
there are a couple of items you can

00:32:51,119 --> 00:32:55,730
cherry-pick out that some different

00:32:53,600 --> 00:32:56,960
groups are organizations are teams

00:32:55,730 --> 00:33:00,020
within your organization might

00:32:56,960 --> 00:33:02,330
appreciate but ultimately at this point

00:33:00,020 --> 00:33:05,210
you've got this giant list of things you

00:33:02,330 --> 00:33:08,510
got this early copy and everybody else

00:33:05,210 --> 00:33:11,120
just has stuff to do you've got a queue

00:33:08,510 --> 00:33:14,510
of bugs to fix gotta fix the bugs you

00:33:11,120 --> 00:33:17,350
got to ship the code or you've got three

00:33:14,510 --> 00:33:20,150
new feature requests that need QA or

00:33:17,350 --> 00:33:21,980
whatever you've got seven deploys queued

00:33:20,150 --> 00:33:26,890
up for the old system and this isn't

00:33:21,980 --> 00:33:29,720
gonna solve my problem today yet another

00:33:26,890 --> 00:33:32,150
technique that we can try that I've

00:33:29,720 --> 00:33:34,010
tried in terms of bullet lists and

00:33:32,150 --> 00:33:36,650
featureless and trying to convince

00:33:34,010 --> 00:33:39,250
people that some number of features that

00:33:36,650 --> 00:33:41,150
are productive that count to N

00:33:39,250 --> 00:33:43,490
automatically means you should love this

00:33:41,150 --> 00:33:48,470
it just doesn't work that way in

00:33:43,490 --> 00:33:50,960
practice the takeaway that that I have

00:33:48,470 --> 00:33:53,419
here the this kind of motivates for me

00:33:50,960 --> 00:33:59,090
is that there's no I in

00:33:53,419 --> 00:34:01,580
DevOps trance form Eitan because I took

00:33:59,090 --> 00:34:05,169
it out but I think that conceptually

00:34:01,580 --> 00:34:07,700
this is important and I hope that my

00:34:05,169 --> 00:34:10,669
intentional I'll say and hopefully

00:34:07,700 --> 00:34:13,190
you'll believe me typos is something

00:34:10,669 --> 00:34:15,710
that can be meaningful and help remind

00:34:13,190 --> 00:34:17,929
everyone and remind me that this isn't

00:34:15,710 --> 00:34:20,270
about you it's not about me it's not

00:34:17,929 --> 00:34:22,730
about one person in any organization

00:34:20,270 --> 00:34:25,550
it's about changing your culture and

00:34:22,730 --> 00:34:27,830
your organization as a whole this is

00:34:25,550 --> 00:34:31,940
something that is just not gonna work if

00:34:27,830 --> 00:34:34,490
it's purely motivated by one person I've

00:34:31,940 --> 00:34:36,859
seen it time and time again in my

00:34:34,490 --> 00:34:39,169
attempts to do this it just doesn't work

00:34:36,859 --> 00:34:41,510
it needs to be a cultural shift that's

00:34:39,169 --> 00:34:43,010
gonna impact multiple teams and be a

00:34:41,510 --> 00:34:45,320
group effort and it's gonna be more

00:34:43,010 --> 00:34:47,840
productive it's gonna stick better it's

00:34:45,320 --> 00:34:50,480
gonna make things faster and better as

00:34:47,840 --> 00:34:54,250
long as you are keeping the entire group

00:34:50,480 --> 00:34:57,740
involved to the greatest possible degree

00:34:54,250 --> 00:35:00,410
how does spinnaker do this for you I

00:34:57,740 --> 00:35:01,730
think that we've touched on a lot of the

00:35:00,410 --> 00:35:03,680
features there been a lot of great talks

00:35:01,730 --> 00:35:05,760
already there are a lot of great talks

00:35:03,680 --> 00:35:07,230
for the rest of today and tomorrow

00:35:05,760 --> 00:35:10,380
highlight a lot of the key technical

00:35:07,230 --> 00:35:13,320
features they can get this cell and this

00:35:10,380 --> 00:35:15,840
meaningful these meaningful feature sets

00:35:13,320 --> 00:35:20,640
out to inspire the other members of your

00:35:15,840 --> 00:35:23,490
organization here's a demonstration

00:35:20,640 --> 00:35:26,190
project that I put together that's on

00:35:23,490 --> 00:35:27,150
github there's a blog post about what's

00:35:26,190 --> 00:35:29,190
going on here

00:35:27,150 --> 00:35:31,230
but I think that that baseline

00:35:29,190 --> 00:35:34,290
implementation those feature sets that

00:35:31,230 --> 00:35:36,780
everyone needs and that example that you

00:35:34,290 --> 00:35:39,960
can give to try to sell individuals on

00:35:36,780 --> 00:35:43,380
this concept is dependent upon spinnaker

00:35:39,960 --> 00:35:46,050
and the tools that you use for us that

00:35:43,380 --> 00:35:47,370
looked like a Jenkins pipeline in order

00:35:46,050 --> 00:35:49,530
to generate some kind of deployable

00:35:47,370 --> 00:35:52,110
artifact it looked like a spinnaker

00:35:49,530 --> 00:35:55,770
pipeline that could deploy it to some

00:35:52,110 --> 00:35:58,320
place and it involves some stray Jenkins

00:35:55,770 --> 00:36:00,300
jobs that are gonna do additional tests

00:35:58,320 --> 00:36:03,030
in a way that's reliable and predictable

00:36:00,300 --> 00:36:04,560
and can integrate with the Jenkins

00:36:03,030 --> 00:36:09,690
pipeline itself or the spinnaker

00:36:04,560 --> 00:36:14,130
deployment pipeline again that's these

00:36:09,690 --> 00:36:17,070
simple solutions and players in this

00:36:14,130 --> 00:36:17,910
deployment flow we use github we use

00:36:17,070 --> 00:36:19,830
Jenkins

00:36:17,910 --> 00:36:22,260
we're on AWS that's what spinnaker is

00:36:19,830 --> 00:36:23,910
deploying to but as you've seen in our

00:36:22,260 --> 00:36:25,860
familiar spinnaker is pretty cloud

00:36:23,910 --> 00:36:28,080
agnostic if you're on one of the major

00:36:25,860 --> 00:36:30,660
public clouds it'll pretty much do

00:36:28,080 --> 00:36:33,960
something for you that's productive an

00:36:30,660 --> 00:36:36,570
additional aspect of the the deployment

00:36:33,960 --> 00:36:39,270
pipeline at least for us was making

00:36:36,570 --> 00:36:41,040
Debian format packages so that we could

00:36:39,270 --> 00:36:42,960
deploy via operating system-level

00:36:41,040 --> 00:36:45,690
package and manage some dependencies

00:36:42,960 --> 00:36:46,980
there that's an interesting discussion

00:36:45,690 --> 00:36:49,680
point we'll talk a little bit more about

00:36:46,980 --> 00:36:51,210
that later but fundamentally I don't

00:36:49,680 --> 00:36:54,000
think this is a huge shift from what we

00:36:51,210 --> 00:36:55,950
were doing before which is a key aspect

00:36:54,000 --> 00:36:57,510
to the implementation trying to keep it

00:36:55,950 --> 00:37:00,720
as close to what you were doing before

00:36:57,510 --> 00:37:02,580
as you can so that there's just the

00:37:00,720 --> 00:37:06,470
least possible friction in terms of

00:37:02,580 --> 00:37:08,700
making this change happen there's some

00:37:06,470 --> 00:37:11,100
software development life cycle kind of

00:37:08,700 --> 00:37:15,840
considerations I think that it's

00:37:11,100 --> 00:37:17,970
important to be as open to unique

00:37:15,840 --> 00:37:18,930
software development practices as is

00:37:17,970 --> 00:37:21,690
possible

00:37:18,930 --> 00:37:24,900
I I think where you can you should not

00:37:21,690 --> 00:37:27,420
care what kind of get workflow a team or

00:37:24,900 --> 00:37:29,400
project is using as long as they can

00:37:27,420 --> 00:37:32,069
commit and kind of have a contract with

00:37:29,400 --> 00:37:35,880
you about where a meaningful and ready

00:37:32,069 --> 00:37:38,069
artifact is gonna emit in the case of

00:37:35,880 --> 00:37:40,980
this demonstration that's in the master

00:37:38,069 --> 00:37:44,339
branch and I put branch protection in

00:37:40,980 --> 00:37:46,020
place just to make sure that my security

00:37:44,339 --> 00:37:48,930
compliance crew were pretty pumped about

00:37:46,020 --> 00:37:50,609
what was going on in general if you're

00:37:48,930 --> 00:37:54,839
not already using that that's kind of a

00:37:50,609 --> 00:37:57,000
separate tool in terms of spinnaker but

00:37:54,839 --> 00:37:59,040
branch protection is an easy win in

00:37:57,000 --> 00:38:01,829
terms of your compliance needs and in

00:37:59,040 --> 00:38:03,660
terms of just creating a quality gate or

00:38:01,829 --> 00:38:09,210
a human gate around what's getting

00:38:03,660 --> 00:38:10,920
merged to a meaningful branch the checks

00:38:09,210 --> 00:38:13,770
that are gonna happen here this is uh

00:38:10,920 --> 00:38:17,790
just a pretty generic pipeline in

00:38:13,770 --> 00:38:19,859
Jenkins using a jenkins file you can see

00:38:17,790 --> 00:38:22,260
that some run in parallel it pretends to

00:38:19,859 --> 00:38:23,640
do static code analysis it pretends to

00:38:22,260 --> 00:38:27,510
run some integration tests in a

00:38:23,640 --> 00:38:29,160
particular environment has a section for

00:38:27,510 --> 00:38:32,190
performance and load tests this is all

00:38:29,160 --> 00:38:34,619
just stubbed out in the demonstration

00:38:32,190 --> 00:38:36,960
repo so that there's this jenkins file

00:38:34,619 --> 00:38:40,440
that's gonna exhibit these places where

00:38:36,960 --> 00:38:42,150
people can run tests the motivation is

00:38:40,440 --> 00:38:44,730
not to ensure that the simple

00:38:42,150 --> 00:38:48,020
demonstration is successful it's just a

00:38:44,730 --> 00:38:50,609
webpage that we wrap in a debian package

00:38:48,020 --> 00:38:54,030
but it's to get people thinking about

00:38:50,609 --> 00:38:58,349
things like should we run static code

00:38:54,030 --> 00:39:01,410
analysis pre merge or should we do

00:38:58,349 --> 00:39:03,660
performance tests in Jenkins in the CI

00:39:01,410 --> 00:39:07,290
environment before it gets merged to a

00:39:03,660 --> 00:39:09,510
meaningful branch how long do our tests

00:39:07,290 --> 00:39:11,849
take how long are we willing to wait for

00:39:09,510 --> 00:39:14,400
a PR to be successfully checked and

00:39:11,849 --> 00:39:16,230
validated and what ramifications does

00:39:14,400 --> 00:39:20,030
that have on the structure of our test

00:39:16,230 --> 00:39:22,859
suite inspiring that discussion I think

00:39:20,030 --> 00:39:26,170
it starts the ball roll it gets us

00:39:22,859 --> 00:39:28,450
moving in a direction that's productive

00:39:26,170 --> 00:39:31,060
I mentioned that we're treating master

00:39:28,450 --> 00:39:32,950
as the important branch that's just a

00:39:31,060 --> 00:39:33,670
snippet that's actually a little small

00:39:32,950 --> 00:39:36,100
sorry about that

00:39:33,670 --> 00:39:37,270
from the Jenkins file and it's really

00:39:36,100 --> 00:39:38,710
just highlighting that we're using a

00:39:37,270 --> 00:39:41,230
condition to say that we're only

00:39:38,710 --> 00:39:44,620
building from master the key to this is

00:39:41,230 --> 00:39:47,260
it finalizes the project side of the

00:39:44,620 --> 00:39:50,320
contract in terms of giving Jenkins

00:39:47,260 --> 00:39:52,300
a reliable place to build an artifact

00:39:50,320 --> 00:39:55,420
which in turn gives us a reliable

00:39:52,300 --> 00:39:58,360
trigger to use to motivate our

00:39:55,420 --> 00:40:00,970
deployment pipelines start so when the

00:39:58,360 --> 00:40:03,160
master branch test is finished building

00:40:00,970 --> 00:40:06,010
we can use that to go ahead and trigger

00:40:03,160 --> 00:40:08,020
a spinnaker deployment because we know

00:40:06,010 --> 00:40:09,790
that when master is tested it runs

00:40:08,020 --> 00:40:12,160
through in this case that same test

00:40:09,790 --> 00:40:13,450
suite and then builds this is another

00:40:12,160 --> 00:40:15,190
point where you can have an interesting

00:40:13,450 --> 00:40:17,560
discussion about the productivity of

00:40:15,190 --> 00:40:19,300
repeating your test suite probably not

00:40:17,560 --> 00:40:21,070
that great of an idea maybe it is I

00:40:19,300 --> 00:40:23,140
don't know you might want to change this

00:40:21,070 --> 00:40:26,350
up entirely you might want to run a

00:40:23,140 --> 00:40:28,120
superset subset and pre-merger or post

00:40:26,350 --> 00:40:30,190
merge you might want to have an entirely

00:40:28,120 --> 00:40:33,390
different software development life

00:40:30,190 --> 00:40:35,920
cycle and get workflow implementation

00:40:33,390 --> 00:40:37,870
you can shape this around whatever works

00:40:35,920 --> 00:40:39,340
best for selling it to your teams

00:40:37,870 --> 00:40:42,550
whatever implementation they're

00:40:39,340 --> 00:40:44,470
currently using should be easy to

00:40:42,550 --> 00:40:46,180
abstract from what's going on in this

00:40:44,470 --> 00:40:48,610
demonstration in order to make sure that

00:40:46,180 --> 00:40:51,220
they know we're just gonna do what

00:40:48,610 --> 00:40:52,960
you're already doing and try and really

00:40:51,220 --> 00:40:54,580
enhance it by confining it to these

00:40:52,960 --> 00:40:56,890
well-structured pipelines that are gonna

00:40:54,580 --> 00:40:58,720
give us proper definition proper audit

00:40:56,890 --> 00:41:01,480
and control and consistency and just

00:40:58,720 --> 00:41:04,660
enhance confidence in the process and

00:41:01,480 --> 00:41:07,090
take any kind of human steps that really

00:41:04,660 --> 00:41:11,410
don't need to be human steps out of the

00:41:07,090 --> 00:41:14,620
process we've seen lots of these slides

00:41:11,410 --> 00:41:17,080
with deployments I'm not gonna get into

00:41:14,620 --> 00:41:19,150
the technical details ourselves spinning

00:41:17,080 --> 00:41:21,460
or spinnaker in general but just

00:41:19,150 --> 00:41:24,070
highlight that in this case within the

00:41:21,460 --> 00:41:25,900
scope of this demo we've triggered a

00:41:24,070 --> 00:41:28,890
deployment pipeline you can see it's

00:41:25,900 --> 00:41:35,250
gonna go ahead and bake and deploy and

00:41:28,890 --> 00:41:38,100
voila the magical sea ICD now

00:41:35,250 --> 00:41:42,480
I can stand here and say that that was

00:41:38,100 --> 00:41:44,370
great and again this might be a scenario

00:41:42,480 --> 00:41:45,810
where where everyone feels pretty

00:41:44,370 --> 00:41:48,330
comfortable with this and likes this

00:41:45,810 --> 00:41:50,310
direction but I didn't mention that I

00:41:48,330 --> 00:41:52,680
was going to talk about at least three

00:41:50,310 --> 00:41:55,410
mistakes that I made I think and this is

00:41:52,680 --> 00:41:57,540
kind of the third I detailed a lot about

00:41:55,410 --> 00:42:00,870
that process but I didn't really talk

00:41:57,540 --> 00:42:02,730
much about how it was gonna benefit

00:42:00,870 --> 00:42:04,890
others other than to maybe open their

00:42:02,730 --> 00:42:07,470
eyes to places where they could enhance

00:42:04,890 --> 00:42:09,810
it while that's productive I don't think

00:42:07,470 --> 00:42:12,570
that that necessarily is gonna make your

00:42:09,810 --> 00:42:13,830
full-on sale to the various individuals

00:42:12,570 --> 00:42:15,960
in your org and make sure that that

00:42:13,830 --> 00:42:18,630
DevOps transformation is sufficiently

00:42:15,960 --> 00:42:20,120
started and actively working within your

00:42:18,630 --> 00:42:22,350
organization

00:42:20,120 --> 00:42:24,480
that's where delivering delivery comes

00:42:22,350 --> 00:42:27,690
in when you start treating this concept

00:42:24,480 --> 00:42:29,910
as not just a service or a project

00:42:27,690 --> 00:42:31,620
within your organization but a product

00:42:29,910 --> 00:42:33,660
that you're providing your you're

00:42:31,620 --> 00:42:36,690
delivering this concept of software

00:42:33,660 --> 00:42:39,270
delivery however you want to brand it

00:42:36,690 --> 00:42:42,740
but that means that what you really need

00:42:39,270 --> 00:42:45,830
to be doing is creating this sell

00:42:42,740 --> 00:42:50,010
because at the end of that last demo

00:42:45,830 --> 00:42:52,230
this is where a lot of people are it's

00:42:50,010 --> 00:42:55,560
it's the end moment it's the how does

00:42:52,230 --> 00:42:59,910
this help me it's the okay you deployed

00:42:55,560 --> 00:43:04,320
I kind of missed it how is this better

00:42:59,910 --> 00:43:06,840
a developer who pushes code reviews code

00:43:04,320 --> 00:43:11,370
merges it and then a release engineer or

00:43:06,840 --> 00:43:14,490
a release manager or an SRE or whomever

00:43:11,370 --> 00:43:16,850
runs the deploy later how's vinegar

00:43:14,490 --> 00:43:20,310
different from that developer simply

00:43:16,850 --> 00:43:22,410
pushing code it's fundamentally not it's

00:43:20,310 --> 00:43:24,690
the same scenario I push code and it

00:43:22,410 --> 00:43:26,760
gets deployed whether spinnaker magic

00:43:24,690 --> 00:43:30,360
does it or some human in the other room

00:43:26,760 --> 00:43:32,040
does it is not of great consequence so

00:43:30,360 --> 00:43:34,860
we can highlight these things we can we

00:43:32,040 --> 00:43:37,500
can show that this is simple and that it

00:43:34,860 --> 00:43:39,990
saves maybe me time so I don't have to

00:43:37,500 --> 00:43:42,210
deploy but again it's still important

00:43:39,990 --> 00:43:44,930
why that helps the organization as a

00:43:42,210 --> 00:43:46,710
whole and why it's not just helping me I

00:43:44,930 --> 00:43:48,180
certainly don't want to deploy

00:43:46,710 --> 00:43:48,990
everybody's code I don't want to deploy

00:43:48,180 --> 00:43:52,380
every project

00:43:48,990 --> 00:43:54,450
they don't want to click that button but

00:43:52,380 --> 00:43:56,730
I don't really care what other people

00:43:54,450 --> 00:43:58,680
are doing with their time I don't care

00:43:56,730 --> 00:44:00,660
if it takes a lot of someone else's time

00:43:58,680 --> 00:44:03,300
to get it release to happen it's it's

00:44:00,660 --> 00:44:04,980
not a matter of just moving the

00:44:03,300 --> 00:44:07,530
obligation from one place to another and

00:44:04,980 --> 00:44:08,880
it's not a matter of saving me time it's

00:44:07,530 --> 00:44:11,760
a matter of trying to create and

00:44:08,880 --> 00:44:14,070
cultivate this pipeline and mechanism

00:44:11,760 --> 00:44:16,110
that others can participate in and

00:44:14,070 --> 00:44:18,660
enhance and that gets to that bit that

00:44:16,110 --> 00:44:20,730
we touched on where we think kind of

00:44:18,660 --> 00:44:23,280
critically about what the test should

00:44:20,730 --> 00:44:25,080
look like in the project the project's

00:44:23,280 --> 00:44:27,030
should determine its own tests and they

00:44:25,080 --> 00:44:28,980
should be able to determine what the

00:44:27,030 --> 00:44:31,290
scope of the tests are pre merged post

00:44:28,980 --> 00:44:32,520
merge in this branch or in that branch

00:44:31,290 --> 00:44:35,190
and they should be able to determine

00:44:32,520 --> 00:44:36,930
where a deploy ends up going when it

00:44:35,190 --> 00:44:39,330
creates an artifact if you build in

00:44:36,930 --> 00:44:41,400
maybe you have a develop branch or an

00:44:39,330 --> 00:44:42,750
integration branch or a staging or pre

00:44:41,400 --> 00:44:45,840
prod branch and those need to go to

00:44:42,750 --> 00:44:47,880
those particular environments within

00:44:45,840 --> 00:44:49,890
your infrastructure maybe you don't

00:44:47,880 --> 00:44:51,900
maybe this is kind of staging only

00:44:49,890 --> 00:44:53,430
solution for whatever reason and you

00:44:51,900 --> 00:44:55,710
need to build out a master and deployed

00:44:53,430 --> 00:44:57,630
a staging if you create these hard

00:44:55,710 --> 00:45:00,180
confines and expect everyone to

00:44:57,630 --> 00:45:02,790
participate in everything it starts to

00:45:00,180 --> 00:45:05,780
become problematic it becomes a concern

00:45:02,790 --> 00:45:08,820
that it's not flexible enough so I think

00:45:05,780 --> 00:45:12,119
again taking a few steps back and really

00:45:08,820 --> 00:45:16,380
really walking through things step by

00:45:12,119 --> 00:45:18,240
step in real time with an active demo is

00:45:16,380 --> 00:45:20,550
something that will will be productive

00:45:18,240 --> 00:45:23,070
and in my experience has really managed

00:45:20,550 --> 00:45:25,170
to motivate individuals to participate

00:45:23,070 --> 00:45:27,869
in the pipeline enhancement and this

00:45:25,170 --> 00:45:29,670
transformation in an active way and take

00:45:27,869 --> 00:45:32,780
an interest in what's going on in these

00:45:29,670 --> 00:45:36,930
deployments and this delivery pipeline I

00:45:32,780 --> 00:45:39,750
think that it doesn't need to be a long

00:45:36,930 --> 00:45:42,000
session you shouldn't bore people or try

00:45:39,750 --> 00:45:43,680
to get an entire team into an hour and a

00:45:42,000 --> 00:45:45,900
half demonstration that covers all of

00:45:43,680 --> 00:45:49,140
the cases but instead take a demo that's

00:45:45,900 --> 00:45:50,820
like the one we detailed slightly and

00:45:49,140 --> 00:45:52,440
kind of tailor it to the individuals in

00:45:50,820 --> 00:45:54,600
question or the small group that's at

00:45:52,440 --> 00:45:56,430
hand if if this is a group who's

00:45:54,600 --> 00:45:58,880
interested in security maybe you spend a

00:45:56,430 --> 00:46:00,880
ton of time talking about things like a

00:45:58,880 --> 00:46:02,260
base am I

00:46:00,880 --> 00:46:05,200
where it comes from and what you know

00:46:02,260 --> 00:46:07,030
about it if this is a QA group maybe you

00:46:05,200 --> 00:46:09,370
skip a lot of the software development

00:46:07,030 --> 00:46:11,710
like psycho concepts and talk a lot

00:46:09,370 --> 00:46:13,810
about what happens when it gets deployed

00:46:11,710 --> 00:46:15,640
to some environment whether that's a QA

00:46:13,810 --> 00:46:17,710
or an integration environment or

00:46:15,640 --> 00:46:20,560
whatever it happens to be called within

00:46:17,710 --> 00:46:22,810
your organization and it should be a

00:46:20,560 --> 00:46:25,510
live demo that I won't do here because

00:46:22,810 --> 00:46:27,580
the Wi-Fi is not awesome

00:46:25,510 --> 00:46:30,040
but that in general when you're in your

00:46:27,580 --> 00:46:32,740
own network and in your own area and

00:46:30,040 --> 00:46:34,660
have control over those things is safe

00:46:32,740 --> 00:46:36,460
to do and should be safe to do with a

00:46:34,660 --> 00:46:38,170
spinnaker implementation that you can

00:46:36,460 --> 00:46:41,340
spin up and make sure that people can

00:46:38,170 --> 00:46:46,390
watch as it goes and just to hit that

00:46:41,340 --> 00:46:48,970
more in a more targeted way this is a

00:46:46,390 --> 00:46:50,710
little bit of text bomb that's a little

00:46:48,970 --> 00:46:52,510
small but in general this is just making

00:46:50,710 --> 00:46:54,850
a change to an index.html file

00:46:52,510 --> 00:46:56,260
committing it and pushing this should be

00:46:54,850 --> 00:46:57,880
something that's really familiar to your

00:46:56,260 --> 00:46:59,500
developers they should understand this

00:46:57,880 --> 00:47:02,380
and appreciate it you could even make

00:46:59,500 --> 00:47:05,440
them do it themselves but once it's out

00:47:02,380 --> 00:47:07,210
there then you can highlight all right

00:47:05,440 --> 00:47:09,820
here's a pull request that I'm gonna

00:47:07,210 --> 00:47:11,830
make we've pushed a commit we've made a

00:47:09,820 --> 00:47:15,550
pull request I can see my checks are

00:47:11,830 --> 00:47:17,080
successful we can go ahead and go back

00:47:15,550 --> 00:47:20,620
to these these checks you can talk about

00:47:17,080 --> 00:47:22,060
what they are and you can relay how they

00:47:20,620 --> 00:47:23,770
could be changed how long they take

00:47:22,060 --> 00:47:26,850
enhance that discussion that we already

00:47:23,770 --> 00:47:30,250
touched on then you can go ahead and

00:47:26,850 --> 00:47:31,720
merge like no one's watching because

00:47:30,250 --> 00:47:33,550
your checks have passed because you have

00:47:31,720 --> 00:47:36,940
that confidence in what's going on in

00:47:33,550 --> 00:47:38,860
your software development process such

00:47:36,940 --> 00:47:41,140
that these these checks have passed and

00:47:38,860 --> 00:47:42,940
yes now this is fine to merge to

00:47:41,140 --> 00:47:45,040
whatever my target branch was because by

00:47:42,940 --> 00:47:47,740
definition the checks that were required

00:47:45,040 --> 00:47:51,220
are done they have been completed and

00:47:47,740 --> 00:47:53,680
that's part of what the contract that we

00:47:51,220 --> 00:47:57,280
detailed before sets out and stipulates

00:47:53,680 --> 00:47:59,650
that once we get to that master branch

00:47:57,280 --> 00:48:01,330
in this case things are good to build

00:47:59,650 --> 00:48:03,490
and if they build successfully things

00:48:01,330 --> 00:48:04,900
are good to deploy and as long as you

00:48:03,490 --> 00:48:07,330
can get people behind the concept that

00:48:04,900 --> 00:48:11,860
that's the consideration and the concern

00:48:07,330 --> 00:48:13,450
that we have and once you can get the

00:48:11,860 --> 00:48:14,859
implementation in place that's actually

00:48:13,450 --> 00:48:16,690
going to deploy

00:48:14,859 --> 00:48:18,099
then all of a sudden you have people who

00:48:16,690 --> 00:48:20,349
are interested in figuring out why the

00:48:18,099 --> 00:48:22,210
test takes so long or why that flaky

00:48:20,349 --> 00:48:24,509
test needs to be rerun three times

00:48:22,210 --> 00:48:26,859
almost every time in order to pass

00:48:24,509 --> 00:48:28,210
because all of a sudden that is a deal

00:48:26,859 --> 00:48:31,029
breaker for them and it's causing

00:48:28,210 --> 00:48:33,430
problems in their workflow and it stands

00:48:31,029 --> 00:48:35,349
to make a positive impact on their

00:48:33,430 --> 00:48:37,150
deployment process so they make those

00:48:35,349 --> 00:48:38,559
changes and they have that invested

00:48:37,150 --> 00:48:42,910
interest in this process and those

00:48:38,559 --> 00:48:47,079
enhancements once we merge that again

00:48:42,910 --> 00:48:49,390
it's gonna fire off a jenkins test based

00:48:47,079 --> 00:48:51,640
on configuration run the tests that are

00:48:49,390 --> 00:48:53,650
configured we can walk through what's

00:48:51,640 --> 00:48:54,789
going on and make sure that we're

00:48:53,650 --> 00:48:56,440
comfortable with the tests that are

00:48:54,789 --> 00:48:59,440
happening or that we make changes to

00:48:56,440 --> 00:49:03,279
accommodate our merge to master such

00:48:59,440 --> 00:49:04,930
that we can be happy about what's

00:49:03,279 --> 00:49:08,380
happening in each environment and in

00:49:04,930 --> 00:49:10,150
each stage along the way and we can

00:49:08,380 --> 00:49:12,160
again show off what's going on in

00:49:10,150 --> 00:49:14,950
spinnaker and how that's triggered by

00:49:12,160 --> 00:49:17,259
the artifact generation and in a

00:49:14,950 --> 00:49:20,349
step-by-step fashion you can pause in

00:49:17,259 --> 00:49:22,029
each of these locations and simply ask

00:49:20,349 --> 00:49:23,680
for questions detail things talk about

00:49:22,029 --> 00:49:24,819
what's going on in the background or

00:49:23,680 --> 00:49:28,269
highlight the things that can be

00:49:24,819 --> 00:49:30,130
injected if you need to run AWS

00:49:28,269 --> 00:49:33,700
inspector or you need to run some

00:49:30,130 --> 00:49:35,349
dynamic application test or pen test if

00:49:33,700 --> 00:49:38,319
you need to make sure that there's a

00:49:35,349 --> 00:49:39,809
manual judgment gate we have that

00:49:38,319 --> 00:49:44,950
highlighted here in this particular

00:49:39,809 --> 00:49:47,710
pipeline to show that once we deploy we

00:49:44,950 --> 00:49:49,539
run a Jenkins job for our integrations

00:49:47,710 --> 00:49:51,160
tests we run a Jenkins job for some

00:49:49,539 --> 00:49:53,200
additional performance checks and then

00:49:51,160 --> 00:49:55,329
there's a manual judgment pass your QA

00:49:53,200 --> 00:49:57,039
team might might love this they might

00:49:55,329 --> 00:49:59,650
like the concept of having direct

00:49:57,039 --> 00:50:01,809
control over an environment and knowing

00:49:59,650 --> 00:50:04,059
that they're testing what they think

00:50:01,809 --> 00:50:06,329
they should be testing and not spending

00:50:04,059 --> 00:50:08,469
an hour trying to replicate something

00:50:06,329 --> 00:50:10,150
rejecting the bug and then finding out

00:50:08,469 --> 00:50:11,650
that someone else had deployed to that

00:50:10,150 --> 00:50:14,200
environment and they weren't testing the

00:50:11,650 --> 00:50:15,759
latest code if we have this kind of

00:50:14,200 --> 00:50:18,369
gatekeeper concept in this manual

00:50:15,759 --> 00:50:21,770
judgment in place for QA then that

00:50:18,369 --> 00:50:25,790
problem that wasted time never happens

00:50:21,770 --> 00:50:28,100
if we have output when we bake an ami we

00:50:25,790 --> 00:50:29,960
can highlight how that output can show

00:50:28,100 --> 00:50:32,330
the packages that are installed on a

00:50:29,960 --> 00:50:33,980
given ami and give our security team all

00:50:32,330 --> 00:50:37,040
the information that they need to

00:50:33,980 --> 00:50:39,490
determine where a CV impacts us or if it

00:50:37,040 --> 00:50:41,780
impacts us at all there are lots of

00:50:39,490 --> 00:50:44,330
pluggable injection points in these two

00:50:41,780 --> 00:50:46,310
pipelines that can really serve to offer

00:50:44,330 --> 00:50:48,080
an enhancement to all the different

00:50:46,310 --> 00:50:49,610
members of your team if we take the time

00:50:48,080 --> 00:50:54,170
to call attention to what they are and

00:50:49,610 --> 00:50:57,680
how we can leverage them one other point

00:50:54,170 --> 00:50:59,300
that compliance security your your QA

00:50:57,680 --> 00:51:01,430
team your development team should like

00:50:59,300 --> 00:51:03,320
is the confidence and consistency that

00:51:01,430 --> 00:51:06,710
we get in terms of what's actually being

00:51:03,320 --> 00:51:08,690
deployed you can see we're in build 10

00:51:06,710 --> 00:51:11,450
we could link out to the Jenkins build

00:51:08,690 --> 00:51:14,000
10 we can note the version that we're

00:51:11,450 --> 00:51:16,490
releasing I stuck the commit hash on the

00:51:14,000 --> 00:51:19,700
end of that zero 1 1

00:51:16,490 --> 00:51:21,260
we can watch the Packer process spit out

00:51:19,700 --> 00:51:23,480
what version it's installing and see

00:51:21,260 --> 00:51:25,130
that it's all consistent we know exactly

00:51:23,480 --> 00:51:27,830
what version we're releasing we know

00:51:25,130 --> 00:51:30,650
exactly what code to expect when this is

00:51:27,830 --> 00:51:32,150
deployed and we have this full pipeline

00:51:30,650 --> 00:51:34,310
of data from an audit and compliance

00:51:32,150 --> 00:51:36,230
perspective in terms of who deployed it

00:51:34,310 --> 00:51:39,110
and what was deployed what code was

00:51:36,230 --> 00:51:41,570
tested and reviewed by whom and that

00:51:39,110 --> 00:51:43,570
that compliance win can be huge if

00:51:41,570 --> 00:51:48,590
that's an important aspect of your

00:51:43,570 --> 00:51:49,970
organization CI CD needs while we were

00:51:48,590 --> 00:51:53,240
going through those it's highly likely

00:51:49,970 --> 00:51:56,770
that in this demonstration the deploy

00:51:53,240 --> 00:51:58,970
already happened this is kind of

00:51:56,770 --> 00:52:03,410
intentional because we can highlight

00:51:58,970 --> 00:52:06,410
that as we were discussing this the

00:52:03,410 --> 00:52:10,250
deploy happened as we were discussing

00:52:06,410 --> 00:52:12,200
this we didn't deploy it somebody else

00:52:10,250 --> 00:52:14,170
didn't deploy it the deploy just

00:52:12,200 --> 00:52:16,400
happened and this is a spot where some

00:52:14,170 --> 00:52:19,030
individuals that I've discussed this

00:52:16,400 --> 00:52:21,590
process and these enhancements with

00:52:19,030 --> 00:52:23,450
develop some strange appreciation the

00:52:21,590 --> 00:52:26,270
fact that you were able to do something

00:52:23,450 --> 00:52:28,730
else while this was happening and have

00:52:26,270 --> 00:52:29,990
the deploy go on successfully and just

00:52:28,730 --> 00:52:32,960
be sitting there kind of waiting for

00:52:29,990 --> 00:52:34,160
manual judgment or fully cut over and

00:52:32,960 --> 00:52:37,060
destroy the old group

00:52:34,160 --> 00:52:39,710
is a big sell for a lot of individuals

00:52:37,060 --> 00:52:41,860
means simply like I said this is a just

00:52:39,710 --> 00:52:45,410
a webpage wrapped in a debian package

00:52:41,860 --> 00:52:47,930
you can see that move to 0 1 1 that same

00:52:45,410 --> 00:52:50,780
to 1e commit hash it was just a page

00:52:47,930 --> 00:52:53,750
refresh which is simple it's meant to

00:52:50,780 --> 00:52:57,800
allow maybe less technical users to make

00:52:53,750 --> 00:53:00,980
a change in see it very easily when they

00:52:57,800 --> 00:53:02,660
just refresh the page then we can go

00:53:00,980 --> 00:53:05,480
back I had a manual judgment in there

00:53:02,660 --> 00:53:07,370
and you can highlight the rollback

00:53:05,480 --> 00:53:09,290
capability these are just technical

00:53:07,370 --> 00:53:11,480
features that spinnaker offers us they

00:53:09,290 --> 00:53:15,320
can make this easy those are additional

00:53:11,480 --> 00:53:17,270
selling points I think that we can just

00:53:15,320 --> 00:53:19,520
use in leverage as a mechanism for

00:53:17,270 --> 00:53:25,640
getting others involved and inspired

00:53:19,520 --> 00:53:27,080
here but now you can you can do this you

00:53:25,640 --> 00:53:29,030
can sit back at the end of this

00:53:27,080 --> 00:53:32,300
demonstration and it's worked for me

00:53:29,030 --> 00:53:35,240
multiple times where you get to that

00:53:32,300 --> 00:53:36,800
point the deploy has happened and your

00:53:35,240 --> 00:53:39,020
users are able to see it and interact

00:53:36,800 --> 00:53:40,040
with it and you can watch as they sit

00:53:39,020 --> 00:53:42,530
back and think about what the

00:53:40,040 --> 00:53:44,000
ramifications might be and you can you

00:53:42,530 --> 00:53:47,570
can poke and prod them and think about

00:53:44,000 --> 00:53:50,300
things like well what would you test

00:53:47,570 --> 00:53:53,870
before this went into some environment

00:53:50,300 --> 00:53:55,580
or what dependencies does your package

00:53:53,870 --> 00:53:58,880
need to maintain or what help do you

00:53:55,580 --> 00:54:02,810
need to manage that package generation

00:53:58,880 --> 00:54:04,460
or what team needs to create a test that

00:54:02,810 --> 00:54:06,440
could go into this pipeline and be

00:54:04,460 --> 00:54:08,840
automated to make sure that we don't

00:54:06,440 --> 00:54:10,490
need human involvement mean as these

00:54:08,840 --> 00:54:12,530
sort of prodding questions to think

00:54:10,490 --> 00:54:14,240
about where this can go and how this can

00:54:12,530 --> 00:54:17,180
directly benefit your organization as a

00:54:14,240 --> 00:54:19,960
whole and I think that's the that's the

00:54:17,180 --> 00:54:21,950
spot where your transformation is

00:54:19,960 --> 00:54:25,100
successfully started that's the place

00:54:21,950 --> 00:54:28,190
where your QA team is starting to think

00:54:25,100 --> 00:54:31,040
about how their selenium tests can be

00:54:28,190 --> 00:54:33,740
structured in a way that will increase

00:54:31,040 --> 00:54:35,810
release velocity and not seem to slow it

00:54:33,740 --> 00:54:38,000
down because they take so longer because

00:54:35,810 --> 00:54:39,620
they only run after some human starts it

00:54:38,000 --> 00:54:42,710
after it's been deployed by a different

00:54:39,620 --> 00:54:44,520
human and a ticket was created or your

00:54:42,710 --> 00:54:46,650
security team is thinking about

00:54:44,520 --> 00:54:49,290
things like the inspect run that they

00:54:46,650 --> 00:54:51,030
want to spit out when we pack and wear

00:54:49,290 --> 00:54:52,890
the data about the packages that are

00:54:51,030 --> 00:54:55,170
installed on an ami needs to go so that

00:54:52,890 --> 00:54:57,720
we can easily run our audit output and

00:54:55,170 --> 00:54:59,520
how we figure out who did what and

00:54:57,720 --> 00:55:01,980
whether or not we should export it to

00:54:59,520 --> 00:55:04,170
JIRA or our logging mechanism in order

00:55:01,980 --> 00:55:05,570
to have that data handy and everyone's

00:55:04,170 --> 00:55:07,950
thinking about these things

00:55:05,570 --> 00:55:09,810
they're asking these questions you have

00:55:07,950 --> 00:55:11,490
people that are concerned about making a

00:55:09,810 --> 00:55:14,040
debian package coz making Debian

00:55:11,490 --> 00:55:16,740
packages sucks but you can talk about

00:55:14,040 --> 00:55:18,960
the fact that now guess what you want to

00:55:16,740 --> 00:55:22,410
update your language you want to update

00:55:18,960 --> 00:55:26,220
your framework you need some random XML

00:55:22,410 --> 00:55:27,960
processing library for who knows why you

00:55:26,220 --> 00:55:30,330
can commit that it can be in your

00:55:27,960 --> 00:55:33,270
control file as you build the package

00:55:30,330 --> 00:55:36,060
you get it it's associated with that

00:55:33,270 --> 00:55:37,800
branch with that feature set and it's

00:55:36,060 --> 00:55:39,690
not polluting the current releases

00:55:37,800 --> 00:55:42,480
you're not sitting there waiting to

00:55:39,690 --> 00:55:44,850
deploy because some ops person needs to

00:55:42,480 --> 00:55:46,440
install that silly XML package to get

00:55:44,850 --> 00:55:50,690
everything ready for your new release

00:55:46,440 --> 00:55:53,190
it's simply a part of your project

00:55:50,690 --> 00:55:55,080
manual judgments another aspect lots of

00:55:53,190 --> 00:55:58,040
people like it want it if we can get rid

00:55:55,080 --> 00:56:00,570
of it that would be great but I think

00:55:58,040 --> 00:56:02,970
the the biggest one the biggest question

00:56:00,570 --> 00:56:05,340
and the most meaningful question that

00:56:02,970 --> 00:56:06,930
that I've had that came out of this is

00:56:05,340 --> 00:56:08,400
when talking to people that are involved

00:56:06,930 --> 00:56:10,410
in release management or release

00:56:08,400 --> 00:56:12,240
engineering and they start to think

00:56:10,410 --> 00:56:13,920
about how they get workflow is

00:56:12,240 --> 00:56:19,740
structured and how long it takes to

00:56:13,920 --> 00:56:22,650
release and they go we could release

00:56:19,740 --> 00:56:26,550
every day and if you're not doing that

00:56:22,650 --> 00:56:28,740
already that is epic that is the best

00:56:26,550 --> 00:56:31,590
possible response you can get how

00:56:28,740 --> 00:56:33,570
quickly can we release how much faster

00:56:31,590 --> 00:56:35,790
can this make our velocity that's

00:56:33,570 --> 00:56:37,440
exactly what we want exactly what we

00:56:35,790 --> 00:56:38,970
wanted to do and that's the best

00:56:37,440 --> 00:56:41,400
possible response that you could get

00:56:38,970 --> 00:56:42,900
after detailing the savings and the

00:56:41,400 --> 00:56:44,820
efficiency and the confidence that you

00:56:42,900 --> 00:56:47,370
can gain from spinnaker and that's the

00:56:44,820 --> 00:56:49,680
spot where I think your transformation

00:56:47,370 --> 00:56:51,720
has certainly started and it's because

00:56:49,680 --> 00:56:53,910
when you look at these questions how do

00:56:51,720 --> 00:56:56,160
I build a debian package who's

00:56:53,910 --> 00:56:57,180
maintaining this random Jenkins job what

00:56:56,160 --> 00:56:59,400
are these manual judge

00:56:57,180 --> 00:57:01,470
it's doing where can I put this test all

00:56:59,400 --> 00:57:03,890
of these you know meaningful and

00:57:01,470 --> 00:57:06,900
interesting questions

00:57:03,890 --> 00:57:09,809
they're only appropriate if spinnaker is

00:57:06,900 --> 00:57:11,790
there those questions mean nothing if

00:57:09,809 --> 00:57:13,740
Jenkins pipeline doesn't generate an

00:57:11,790 --> 00:57:16,230
artifact and if spinnaker doesn't fire

00:57:13,740 --> 00:57:17,490
off a deployment based on that without

00:57:16,230 --> 00:57:19,410
spinnaker being there none of those

00:57:17,490 --> 00:57:21,270
questions matter you already have people

00:57:19,410 --> 00:57:23,910
thinking about a future in a scenario

00:57:21,270 --> 00:57:26,130
where spinnaker is in place and your CI

00:57:23,910 --> 00:57:28,260
CD is enhanced and that's the spot where

00:57:26,130 --> 00:57:30,900
you have all of these people who aren't

00:57:28,260 --> 00:57:33,059
just dealing with Spinnaker's deployment

00:57:30,900 --> 00:57:34,500
but are interested in the enhancements

00:57:33,059 --> 00:57:35,849
that it's going to offer them and I

00:57:34,500 --> 00:57:37,530
think that's the spot where we need to

00:57:35,849 --> 00:57:39,210
be targeting and that's the direction

00:57:37,530 --> 00:57:42,450
that we need to be searching because

00:57:39,210 --> 00:57:44,520
then you have a dozen people who want

00:57:42,450 --> 00:57:45,990
spinnaker who want to help you with it

00:57:44,520 --> 00:57:47,670
who are trying to figure out when they

00:57:45,990 --> 00:57:50,540
can put in the time to get it where it

00:57:47,670 --> 00:57:53,280
needs to be so that it can be deployed

00:57:50,540 --> 00:57:55,200
that's how I think you can sell

00:57:53,280 --> 00:57:58,220
successfully your DevOps trance I'm

00:57:55,200 --> 00:58:00,180
gonna go with format on with spinnaker

00:57:58,220 --> 00:58:03,270
I'm Nick as I said at the beginning

00:58:00,180 --> 00:58:05,160
there's some contact info hello Simon is

00:58:03,270 --> 00:58:06,900
of course hiring if you like spinnaker

00:58:05,160 --> 00:58:08,960
and think it's neat you should get in

00:58:06,900 --> 00:58:11,119
touch with me and just remember that

00:58:08,960 --> 00:58:14,069
starting this transformation is

00:58:11,119 --> 00:58:16,829
important appealing Spinnaker's a great

00:58:14,069 --> 00:58:19,380
technology to bring this transformation

00:58:16,829 --> 00:58:21,839
forward and inspire it within others and

00:58:19,380 --> 00:58:24,030
hopefully you can take some of this

00:58:21,839 --> 00:58:26,339
information use that demo it's entirely

00:58:24,030 --> 00:58:26,790
generic you can you can launch it and

00:58:26,339 --> 00:58:28,680
run it

00:58:26,790 --> 00:58:31,940
it needs kind of a beefy machine but

00:58:28,680 --> 00:58:31,940

YouTube URL: https://www.youtube.com/watch?v=ezFEC04LcYo


