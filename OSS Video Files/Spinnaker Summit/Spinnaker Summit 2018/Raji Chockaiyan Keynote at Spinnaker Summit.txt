Title: Raji Chockaiyan Keynote at Spinnaker Summit
Publication date: 2018-10-19
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:05,879
can you hear me okay morning how is

00:00:03,149 --> 00:00:07,560
everyone this morning awesome

00:00:05,879 --> 00:00:09,990
I will try to make it less painful

00:00:07,560 --> 00:00:12,780
because it's about complains and how we

00:00:09,990 --> 00:00:16,859
are achieving complaints gates in

00:00:12,780 --> 00:00:19,260
Capital One every story has a why how

00:00:16,859 --> 00:00:22,109
and start that assignments Magic Circle

00:00:19,260 --> 00:00:24,330
isn't it and ours do too and today I'm

00:00:22,109 --> 00:00:27,180
going to share with you our story in

00:00:24,330 --> 00:00:29,480
which we achieved the full potential of

00:00:27,180 --> 00:00:34,219
an engineering organization through

00:00:29,480 --> 00:00:36,239
automated and compliant deployments and

00:00:34,219 --> 00:00:37,980
I'm Rajee jokin

00:00:36,239 --> 00:00:40,320
thanks for the very nice introduction

00:00:37,980 --> 00:00:42,600
Pete I am director of software

00:00:40,320 --> 00:00:44,969
engineering in Capital One I lead cloud

00:00:42,600 --> 00:00:48,030
platform tools and I'm very very humbled

00:00:44,969 --> 00:00:50,789
to be here amongst this wonderful brains

00:00:48,030 --> 00:00:56,789
and developers thank you for this

00:00:50,789 --> 00:00:59,430
opportunity let's talk about why have

00:00:56,789 --> 00:01:01,590
you guys scared of Conway's law how many

00:00:59,430 --> 00:01:04,739
of you know about Conway's law of course

00:01:01,590 --> 00:01:10,409
for double row of summit right so I'm

00:01:04,739 --> 00:01:15,090
going to let you read it for a minute in

00:01:10,409 --> 00:01:17,460
simpler terms any software reflects the

00:01:15,090 --> 00:01:21,150
organizational structure that produces

00:01:17,460 --> 00:01:23,759
it in 1968 Melvin Conway in his thesis

00:01:21,150 --> 00:01:25,710
talks about how organizational structure

00:01:23,759 --> 00:01:28,500
and the communication between the teams

00:01:25,710 --> 00:01:32,040
in fact the software that produced that

00:01:28,500 --> 00:01:35,130
gets produced higher decades later

00:01:32,040 --> 00:01:39,299
I do have real-life example in my own

00:01:35,130 --> 00:01:42,030
space where I have two products apart

00:01:39,299 --> 00:01:43,649
from spinnaker my my team supports two

00:01:42,030 --> 00:01:46,409
of the other products one is an

00:01:43,649 --> 00:01:48,899
infrastructure provisioning tool the

00:01:46,409 --> 00:01:51,030
other one is chaos engineering - at this

00:01:48,899 --> 00:01:53,040
for the record it is not the customized

00:01:51,030 --> 00:01:55,920
version of chaos monkey it's our own

00:01:53,040 --> 00:01:58,469
homegrown chaos engineering solution so

00:01:55,920 --> 00:02:02,460
the infrastructure provisioning tool is

00:01:58,469 --> 00:02:04,890
built by the team my own team they are

00:02:02,460 --> 00:02:08,429
all SMEs they knew how the

00:02:04,890 --> 00:02:10,530
infrastructure works in and out of a in

00:02:08,429 --> 00:02:13,390
capital one how everything is laid out

00:02:10,530 --> 00:02:16,150
the Team Dynamics what is need

00:02:13,390 --> 00:02:19,560
across the organization they knew it so

00:02:16,150 --> 00:02:23,620
they built this awesome tool and it is

00:02:19,560 --> 00:02:25,540
adopted across the organization by 700

00:02:23,620 --> 00:02:28,450
teams in two years that option

00:02:25,540 --> 00:02:30,910
skyrocketed now two years later we are

00:02:28,450 --> 00:02:34,360
looking at it because the support always

00:02:30,910 --> 00:02:36,160
grows us as their option grows right and

00:02:34,360 --> 00:02:39,250
we are trying to remove the bottleneck

00:02:36,160 --> 00:02:41,500
and we are trying to see how we can make

00:02:39,250 --> 00:02:44,770
it more pluggable more maintainable and

00:02:41,500 --> 00:02:48,880
refactor it what we are finding out is

00:02:44,770 --> 00:02:52,870
it is just a very fancy monolith because

00:02:48,880 --> 00:02:55,930
the developers exactly knew how the

00:02:52,870 --> 00:02:58,630
interactions worked what is needed we

00:02:55,930 --> 00:03:01,000
made decisions on the behalf our of our

00:02:58,630 --> 00:03:03,040
clients and then we deployed a solution

00:03:01,000 --> 00:03:05,890
that worked right that that is

00:03:03,040 --> 00:03:08,470
completely used by the teams across the

00:03:05,890 --> 00:03:10,180
organization but still it is not

00:03:08,470 --> 00:03:12,640
flexible enough it's not plugged

00:03:10,180 --> 00:03:14,920
pluggable enough now the chaos

00:03:12,640 --> 00:03:18,489
engineering solution we call that as a

00:03:14,920 --> 00:03:23,650
cloud dieter in in Capital One it is

00:03:18,489 --> 00:03:26,230
developed by one team member but 27

00:03:23,650 --> 00:03:29,950
contributors across the organization

00:03:26,230 --> 00:03:31,030
added functionalities the adoption is a

00:03:29,950 --> 00:03:34,060
different story

00:03:31,030 --> 00:03:35,590
but that that deserves its won't talk if

00:03:34,060 --> 00:03:37,959
you want to know more about it please

00:03:35,590 --> 00:03:41,590
come find me we can we can sit and talk

00:03:37,959 --> 00:03:43,450
about it the the solution the aims end

00:03:41,590 --> 00:03:46,650
product of the chaos engineering

00:03:43,450 --> 00:03:49,180
solution was is a very flexible

00:03:46,650 --> 00:03:51,700
pluggable if a disruption is not

00:03:49,180 --> 00:03:53,470
available that is needed by a team they

00:03:51,700 --> 00:03:55,540
just create this cute little lambda

00:03:53,470 --> 00:03:58,480
function and contributed back right so

00:03:55,540 --> 00:04:02,830
it was it was such a easy solution for

00:03:58,480 --> 00:04:04,440
someone to adopt and use now extending

00:04:02,830 --> 00:04:07,560
this thought process of how

00:04:04,440 --> 00:04:10,150
communication between the teams and

00:04:07,560 --> 00:04:12,250
organizational structure impact the

00:04:10,150 --> 00:04:14,860
software extending this thought process

00:04:12,250 --> 00:04:17,350
beyond just these two elements means

00:04:14,860 --> 00:04:19,870
that having the right technology and

00:04:17,350 --> 00:04:22,660
talent is not just you know for the

00:04:19,870 --> 00:04:25,690
sustained success of any smart company

00:04:22,660 --> 00:04:27,490
it has to be married with greater

00:04:25,690 --> 00:04:32,100
engineering practice

00:04:27,490 --> 00:04:35,050
and that is why we developed a strategy

00:04:32,100 --> 00:04:37,440
and established a strategy this strategy

00:04:35,050 --> 00:04:39,930
is called engineering excellence

00:04:37,440 --> 00:04:44,980
officially called as shoot for the stars

00:04:39,930 --> 00:04:47,920
led to a movement a vision in which the

00:04:44,980 --> 00:04:51,190
focus was on reduced software

00:04:47,920 --> 00:04:53,890
development lifecycle improved quality

00:04:51,190 --> 00:04:56,470
improved performance and reduced mean

00:04:53,890 --> 00:04:59,950
time to recover when the software fails

00:04:56,470 --> 00:05:03,700
and this hyper efficiency became our not

00:04:59,950 --> 00:05:06,250
star now be establish the strategy me

00:05:03,700 --> 00:05:08,620
you even have a very cool name for it

00:05:06,250 --> 00:05:11,470
and we also know how every end goal

00:05:08,620 --> 00:05:15,400
looks like looks like and how do we get

00:05:11,470 --> 00:05:18,460
from here to there three critical things

00:05:15,400 --> 00:05:21,370
were identified slay the monolith and

00:05:18,460 --> 00:05:24,580
from my discussions to many with many of

00:05:21,370 --> 00:05:27,310
you guys for the past day and today this

00:05:24,580 --> 00:05:30,580
is a common problem that everyone in

00:05:27,310 --> 00:05:34,330
here is trying to solve right so we said

00:05:30,580 --> 00:05:37,230
any new application or any modernization

00:05:34,330 --> 00:05:39,670
of legacy application has to be built as

00:05:37,230 --> 00:05:41,680
micro-service it is easier said than

00:05:39,670 --> 00:05:45,820
done we are still working through that

00:05:41,680 --> 00:05:48,670
we came up with a set of definitions of

00:05:45,820 --> 00:05:53,380
bottom mic reservists looks like in a

00:05:48,670 --> 00:05:55,240
capital Capital One environment and that

00:05:53,380 --> 00:05:57,370
includes the fact that each micro

00:05:55,240 --> 00:06:00,250
service should be an independently

00:05:57,370 --> 00:06:02,290
deployable unit and the second one is

00:06:00,250 --> 00:06:06,130
automate everything automate everything

00:06:02,290 --> 00:06:08,500
from code to tests to infrastructure and

00:06:06,130 --> 00:06:10,360
to deployment this is a very scary

00:06:08,500 --> 00:06:12,580
thought as we are a fin tech company

00:06:10,360 --> 00:06:16,390
that means complaints in a very bold

00:06:12,580 --> 00:06:19,660
letter so we came up with some basic

00:06:16,390 --> 00:06:23,410
principles for automating these things

00:06:19,660 --> 00:06:26,640
automating the stages as well as in

00:06:23,410 --> 00:06:30,190
capital when we have to adhere to strict

00:06:26,640 --> 00:06:33,100
management of financial data and

00:06:30,190 --> 00:06:35,080
financial reporting and we all we always

00:06:33,100 --> 00:06:37,150
had rigorous internal controls when it

00:06:35,080 --> 00:06:40,320
comes to socks sarbanes-oxley few are

00:06:37,150 --> 00:06:42,990
familiar with it that apply

00:06:40,320 --> 00:06:45,870
to both software delivery as well as

00:06:42,990 --> 00:06:48,930
business processes and socks also has

00:06:45,870 --> 00:06:51,900
very strict guidelines on software

00:06:48,930 --> 00:06:54,140
delivery as then no one can introduce a

00:06:51,900 --> 00:06:57,690
change in production and therefore

00:06:54,140 --> 00:07:01,200
impact the financial reporting without

00:06:57,690 --> 00:07:04,110
any proper oversight control and audit

00:07:01,200 --> 00:07:06,810
trails this segregation of duties gets

00:07:04,110 --> 00:07:09,600
directly translated to pipeline

00:07:06,810 --> 00:07:11,970
automation and execution and then the

00:07:09,600 --> 00:07:13,800
third one is entry and ownership that is

00:07:11,970 --> 00:07:16,860
not new to anyone in this room it's

00:07:13,800 --> 00:07:19,380
basically operating in a DevOps model

00:07:16,860 --> 00:07:20,850
each individual software team they have

00:07:19,380 --> 00:07:23,790
entry and ownership to the code that

00:07:20,850 --> 00:07:28,410
produced from development to support and

00:07:23,790 --> 00:07:31,530
maintenance now we have a strategy and

00:07:28,410 --> 00:07:35,180
we everyone clearly understood the value

00:07:31,530 --> 00:07:38,220
of it but implementing this across the

00:07:35,180 --> 00:07:41,580
five thousand plus developers in the

00:07:38,220 --> 00:07:44,460
organization in practice there's no easy

00:07:41,580 --> 00:07:47,340
cake so our engineering excellence team

00:07:44,460 --> 00:07:49,620
came up with some basic principles and

00:07:47,340 --> 00:07:52,290
we also realized that automating

00:07:49,620 --> 00:07:55,020
everything that second imperative is a

00:07:52,290 --> 00:07:57,420
success for the rest of the to technical

00:07:55,020 --> 00:08:00,180
imperatives that we identified so we

00:07:57,420 --> 00:08:02,820
focused on that first that would lead us

00:08:00,180 --> 00:08:07,760
to the path for the rest of the two

00:08:02,820 --> 00:08:10,860
imperatives and these basic principles

00:08:07,760 --> 00:08:11,700
became our stage gates in pipeline

00:08:10,860 --> 00:08:14,490
automation

00:08:11,700 --> 00:08:17,040
number one is source control mechanisms

00:08:14,490 --> 00:08:19,530
that is also and not new to anyone in

00:08:17,040 --> 00:08:21,000
this room everyone in here do this in

00:08:19,530 --> 00:08:25,110
some shape or form

00:08:21,000 --> 00:08:28,200
we'd be do LG TM and the second one is

00:08:25,110 --> 00:08:31,920
the secure state storage of application

00:08:28,200 --> 00:08:34,200
binary this stage gate ensures that the

00:08:31,920 --> 00:08:37,800
binary the versioned and immutable

00:08:34,200 --> 00:08:39,539
binary is promoted published and

00:08:37,800 --> 00:08:42,030
promoted only through automated

00:08:39,539 --> 00:08:44,370
deployment process no one can manually

00:08:42,030 --> 00:08:48,030
access these binary manually change it

00:08:44,370 --> 00:08:52,140
and push it to production without any

00:08:48,030 --> 00:08:54,030
proper insight and then quality checks

00:08:52,140 --> 00:08:57,600
this talks about

00:08:54,030 --> 00:08:59,970
my meeting my code coverage I'm a

00:08:57,600 --> 00:09:03,930
passing all the functional test cases

00:08:59,970 --> 00:09:08,490
and also um is my court performing and

00:09:03,930 --> 00:09:10,830
meeting SLO and under peak load we are

00:09:08,490 --> 00:09:13,920
big we are one of the biggest open

00:09:10,830 --> 00:09:16,620
source enthusiasts and our our teams

00:09:13,920 --> 00:09:19,950
many of our teams contribute and use

00:09:16,620 --> 00:09:22,380
heavily the open source code that this

00:09:19,950 --> 00:09:24,780
stage gate ensures that the code that we

00:09:22,380 --> 00:09:27,690
we use from open source community is

00:09:24,780 --> 00:09:31,020
meeting all the security standards and

00:09:27,690 --> 00:09:34,560
also licensing requirement and the final

00:09:31,020 --> 00:09:36,990
one is we wanted to make sure that not

00:09:34,560 --> 00:09:39,290
just the code we deploy in production is

00:09:36,990 --> 00:09:42,990
not impacting the production environment

00:09:39,290 --> 00:09:47,100
adversely the deployment process itself

00:09:42,990 --> 00:09:48,960
is a version so any change to the bill

00:09:47,100 --> 00:09:52,170
script has to be tested in pre prod

00:09:48,960 --> 00:09:54,600
before it gets used in in production

00:09:52,170 --> 00:09:58,200
environment this also ensures that no

00:09:54,600 --> 00:10:01,290
one can accidentally access from pre

00:09:58,200 --> 00:10:04,410
prod to prod and vice-versa so each of

00:10:01,290 --> 00:10:10,710
these environments are access controlled

00:10:04,410 --> 00:10:13,950
heavily you guys with me so far

00:10:10,710 --> 00:10:15,950
I know I'm going to blame it on

00:10:13,950 --> 00:10:19,260
complains for such an animated

00:10:15,950 --> 00:10:23,730
presentation so bear with me

00:10:19,260 --> 00:10:26,370
now so because of the wide variety of

00:10:23,730 --> 00:10:31,980
platforms and products that we operate

00:10:26,370 --> 00:10:36,150
in the how part is defined this is what

00:10:31,980 --> 00:10:39,530
we are all we all need to meet to deploy

00:10:36,150 --> 00:10:42,840
our deploy our application to production

00:10:39,530 --> 00:10:45,480
automatically but the word part is left

00:10:42,840 --> 00:10:48,660
up to the teams the implementation part

00:10:45,480 --> 00:10:50,580
is left up to the team my team has been

00:10:48,660 --> 00:10:52,650
supporting pipelines built off of

00:10:50,580 --> 00:10:58,050
spinnaker for a while now even before

00:10:52,650 --> 00:11:00,510
these stage gates are put in place we

00:10:58,050 --> 00:11:03,150
our customized version of spinnaker is

00:11:00,510 --> 00:11:04,830
called the cloud one view aka coke and

00:11:03,150 --> 00:11:08,670
we have a booth over there if you have

00:11:04,830 --> 00:11:12,420
any questions please stop by this

00:11:08,670 --> 00:11:15,089
when when this came into picture that we

00:11:12,420 --> 00:11:18,389
have to automate all these stage gates

00:11:15,089 --> 00:11:21,779
within within the pipeline the very

00:11:18,389 --> 00:11:24,540
obvious option for us is to go with the

00:11:21,779 --> 00:11:26,339
declarative pipeline model before I go

00:11:24,540 --> 00:11:28,470
in there I wanted to mention couple of

00:11:26,339 --> 00:11:33,410
other things when they came up with

00:11:28,470 --> 00:11:36,529
these basic principles we came up with

00:11:33,410 --> 00:11:40,050
the concept called pre approved releases

00:11:36,529 --> 00:11:43,470
the idea is this when an application

00:11:40,050 --> 00:11:45,839
team makes sure that hey I am meeting

00:11:43,470 --> 00:11:48,629
all these stage gates I'm doing source

00:11:45,839 --> 00:11:50,429
control versioning I make I'm meeting

00:11:48,629 --> 00:11:53,100
all these quality checks I am meeting

00:11:50,429 --> 00:11:55,470
all these security checks so they

00:11:53,100 --> 00:11:57,480
collect evidences of their application

00:11:55,470 --> 00:12:00,689
and they submit those evidences to our

00:11:57,480 --> 00:12:02,279
compliance team manually and my our

00:12:00,689 --> 00:12:04,290
compliance team actually go through

00:12:02,279 --> 00:12:06,540
these evidences and they make sure that

00:12:04,290 --> 00:12:09,360
okay you are meeting all those standards

00:12:06,540 --> 00:12:11,939
and then they put a stamp that you are

00:12:09,360 --> 00:12:14,579
pre-approved to release your code to

00:12:11,939 --> 00:12:16,649
production automatically so that means

00:12:14,579 --> 00:12:19,129
automatically creating change order as

00:12:16,649 --> 00:12:22,470
soon I as soon as I check in my code I

00:12:19,129 --> 00:12:24,929
my pipeline gets executed and then the

00:12:22,470 --> 00:12:26,879
automatically Sewall gets created and it

00:12:24,929 --> 00:12:29,790
gets deployed to production now the

00:12:26,879 --> 00:12:33,959
problem with this is this certification

00:12:29,790 --> 00:12:36,959
process was very manual and it became a

00:12:33,959 --> 00:12:38,850
bottleneck that everyone lines up that

00:12:36,959 --> 00:12:40,800
here is here are my evidences and it's

00:12:38,850 --> 00:12:43,589
all manual and validating those

00:12:40,800 --> 00:12:46,170
evidences were also manual then we

00:12:43,589 --> 00:12:48,660
realized okay we need to automate that

00:12:46,170 --> 00:12:50,579
process as well the complaints the

00:12:48,660 --> 00:12:53,459
governance aspect of the pipeline

00:12:50,579 --> 00:12:58,199
execution as well not just the quality

00:12:53,459 --> 00:13:00,569
gates so be we we were looking at what

00:12:58,199 --> 00:13:03,749
are all the options available for us we

00:13:00,569 --> 00:13:06,990
chose the managed template temp managed

00:13:03,749 --> 00:13:11,579
pipeline options and then we went with

00:13:06,990 --> 00:13:14,490
templates of spinnaker we also wanted

00:13:11,579 --> 00:13:17,220
this solution to be very very simple for

00:13:14,490 --> 00:13:20,579
our developers to use so we set some

00:13:17,220 --> 00:13:21,209
goals one the certified template with

00:13:20,579 --> 00:13:24,990
the immutable

00:13:21,209 --> 00:13:27,839
stages what that means is we will

00:13:24,990 --> 00:13:31,199
certify our template with all these

00:13:27,839 --> 00:13:34,170
mandated stage gates with our compliance

00:13:31,199 --> 00:13:36,660
team and any application that on boards

00:13:34,170 --> 00:13:39,199
to onto spinnaker and goes through this

00:13:36,660 --> 00:13:42,170
pipeline gets automatically certified

00:13:39,199 --> 00:13:44,550
rather than they submit those evidences

00:13:42,170 --> 00:13:47,160
separately and then they go through it

00:13:44,550 --> 00:13:51,569
they approve it so that process gets

00:13:47,160 --> 00:13:55,319
plugged in with with our template model

00:13:51,569 --> 00:13:57,540
now that also involved our compliance

00:13:55,319 --> 00:13:59,519
team automating their governance process

00:13:57,540 --> 00:14:01,889
so they had to work on api's they

00:13:59,519 --> 00:14:04,499
publish those ApS with this and each

00:14:01,889 --> 00:14:07,639
stage we collected the evidence from our

00:14:04,499 --> 00:14:10,679
teams and submitted those evidences to

00:14:07,639 --> 00:14:12,990
to the compliance team that way they can

00:14:10,679 --> 00:14:15,300
approve they can validate in each

00:14:12,990 --> 00:14:18,540
pipeline execution we are meeting all

00:14:15,300 --> 00:14:23,399
those standards and requirements the

00:14:18,540 --> 00:14:26,519
second goal was flexible enough to add

00:14:23,399 --> 00:14:28,470
implementation we know for sure that our

00:14:26,519 --> 00:14:31,829
stages are immutable

00:14:28,470 --> 00:14:36,269
no one can add or remove any stage from

00:14:31,829 --> 00:14:38,100
this that is also to make sure that we

00:14:36,269 --> 00:14:41,670
are meeting all those stage gates right

00:14:38,100 --> 00:14:44,040
but the implementation of it can be any

00:14:41,670 --> 00:14:46,679
any in number of implementation I can

00:14:44,040 --> 00:14:50,040
provide a bill script for Java or gulang

00:14:46,679 --> 00:14:51,899
are no js' within the same template so

00:14:50,040 --> 00:14:55,019
that I don't have to go back and again

00:14:51,899 --> 00:14:56,819
and ask for certification so that we

00:14:55,019 --> 00:14:58,379
wanted to make sure we need to make it

00:14:56,819 --> 00:15:00,329
flexible enough to add any

00:14:58,379 --> 00:15:03,600
implementation to an existing template

00:15:00,329 --> 00:15:06,329
the third one as we are big an inner

00:15:03,600 --> 00:15:09,480
sourcing we wanted to make sure that any

00:15:06,329 --> 00:15:12,299
framework that we develop enable people

00:15:09,480 --> 00:15:16,470
to contribute back to these templates

00:15:12,299 --> 00:15:20,160
and if you already are using spinnaker

00:15:16,470 --> 00:15:22,379
templates my sincere apologies for for

00:15:20,160 --> 00:15:25,759
the redundant information here as you

00:15:22,379 --> 00:15:27,869
see here the abstract template amel

00:15:25,759 --> 00:15:30,959
combined with the concrete

00:15:27,869 --> 00:15:33,509
implementation of stages with variable

00:15:30,959 --> 00:15:36,209
binding produces the well-known pipeline

00:15:33,509 --> 00:15:39,809
JSON file that we are very familiar with

00:15:36,209 --> 00:15:42,870
but we did do couple of customizations

00:15:39,809 --> 00:15:44,850
to meet our needs and and we wanted to

00:15:42,870 --> 00:15:47,610
contribute back as well these

00:15:44,850 --> 00:15:50,459
customizations one customization is the

00:15:47,610 --> 00:15:54,329
stage the type of the variable stage

00:15:50,459 --> 00:15:58,939
type is made as as a parameter that we

00:15:54,329 --> 00:16:02,249
can get from the developer the second

00:15:58,939 --> 00:16:05,540
customization is instead of adding all

00:16:02,249 --> 00:16:10,470
the partial implementations within same

00:16:05,540 --> 00:16:13,110
template file we created each partial as

00:16:10,470 --> 00:16:16,410
a separate template file we did it for

00:16:13,110 --> 00:16:19,799
two different reasons one for simplicity

00:16:16,410 --> 00:16:23,249
we had so many stages and adding all

00:16:19,799 --> 00:16:25,139
those stages in one file became very

00:16:23,249 --> 00:16:27,569
unreadable and unmaintainable

00:16:25,139 --> 00:16:29,040
the second reason is if someone wants to

00:16:27,569 --> 00:16:32,519
contribute that one implementation

00:16:29,040 --> 00:16:37,699
partial back they can do it easily

00:16:32,519 --> 00:16:37,699
without impacting any existing templates

00:16:38,119 --> 00:16:43,740
now with these two easy steps once the

00:16:41,910 --> 00:16:47,160
customer onwards when the developer

00:16:43,740 --> 00:16:49,169
onwards they choose their environment

00:16:47,160 --> 00:16:51,179
and they choose the implementation that

00:16:49,169 --> 00:16:54,809
they want to use within that environment

00:16:51,179 --> 00:16:59,160
and it resulted in the entry and

00:16:54,809 --> 00:17:03,689
pipeline and each stage like for example

00:16:59,160 --> 00:17:07,139
build stage here it makes sure that we

00:17:03,689 --> 00:17:09,959
are the code is peer reviewed and it

00:17:07,139 --> 00:17:13,740
passes all the static code checks like

00:17:09,959 --> 00:17:16,500
it is passing the threshold of code

00:17:13,740 --> 00:17:18,720
coverage and security standards and

00:17:16,500 --> 00:17:22,230
licensing requirements that information

00:17:18,720 --> 00:17:25,970
is collected and sent to our compliance

00:17:22,230 --> 00:17:30,169
team for their audit trails and records

00:17:25,970 --> 00:17:32,429
now this is one way of doing automated

00:17:30,169 --> 00:17:35,340
deployments and we have other Jenkins

00:17:32,429 --> 00:17:37,289
pipelines across the organization in

00:17:35,340 --> 00:17:40,260
different lines of businesses doing this

00:17:37,289 --> 00:17:44,520
very similar thing we have started

00:17:40,260 --> 00:17:45,240
seeing a huge benefit of doing automated

00:17:44,520 --> 00:17:48,150
and come

00:17:45,240 --> 00:17:53,970
and deployments and what you see here is

00:17:48,150 --> 00:17:56,520
our 2017 number the the teams who do

00:17:53,970 --> 00:17:59,760
complaint automated deployment compared

00:17:56,520 --> 00:18:03,059
to the ones that don't they tend to

00:17:59,760 --> 00:18:05,400
release more often their average number

00:18:03,059 --> 00:18:09,150
of deployments per month has increased

00:18:05,400 --> 00:18:11,520
by 95 percent and their average number

00:18:09,150 --> 00:18:14,010
of production impacting incidents has

00:18:11,520 --> 00:18:17,370
reduced by 90% in the mean time to

00:18:14,010 --> 00:18:21,450
recover has reduced by half over the

00:18:17,370 --> 00:18:23,940
year our goal is to have all of hundred

00:18:21,450 --> 00:18:27,240
percent of our applications go through

00:18:23,940 --> 00:18:32,070
these template manage templates and

00:18:27,240 --> 00:18:34,220
automated compliant deployments I want

00:18:32,070 --> 00:18:37,200
to leave you all with one final thought

00:18:34,220 --> 00:18:41,010
have you guys all read any of you read

00:18:37,200 --> 00:18:44,130
this awesome book accelerate awesome

00:18:41,010 --> 00:18:46,230
awesome yeah this my boss gave it to me

00:18:44,130 --> 00:18:49,380
couple of weeks ago so I had to read it

00:18:46,230 --> 00:18:51,690
but I'm glad I did it was such a

00:18:49,380 --> 00:18:56,010
wonderful book highly recommended to

00:18:51,690 --> 00:18:57,960
anyone who wants to start a CA Sidney a

00:18:56,010 --> 00:19:01,080
DevOps culture I'm not talking about

00:18:57,960 --> 00:19:03,510
technology are a talent but the culture

00:19:01,080 --> 00:19:06,270
itself the authors of this book

00:19:03,510 --> 00:19:10,679
summarized the best practices metrics

00:19:06,270 --> 00:19:14,550
and principles to improve software

00:19:10,679 --> 00:19:18,690
delivery and software any digital

00:19:14,550 --> 00:19:21,030
product experience based on their well

00:19:18,690 --> 00:19:23,130
documented research years of

00:19:21,030 --> 00:19:26,280
well-documented research and statistical

00:19:23,130 --> 00:19:28,290
analysis and they found out that from

00:19:26,280 --> 00:19:30,590
their research that the software

00:19:28,290 --> 00:19:33,720
delivery improvement performance

00:19:30,590 --> 00:19:36,510
directly impacts their organizational

00:19:33,720 --> 00:19:38,330
performance in terms of ROI also the

00:19:36,510 --> 00:19:40,470
non-commercial performance is like

00:19:38,330 --> 00:19:42,809
customer satisfaction and employee

00:19:40,470 --> 00:19:46,110
satisfaction and if you look at this

00:19:42,809 --> 00:19:49,230
graph as the organizing organization

00:19:46,110 --> 00:19:52,850
grows to the right the high-performing

00:19:49,230 --> 00:19:56,120
teams tend to deploy more frequently

00:19:52,850 --> 00:19:59,010
compared to their medium and the lower

00:19:56,120 --> 00:20:01,620
performers in fact

00:19:59,010 --> 00:20:04,830
is not a much difference between middle

00:20:01,620 --> 00:20:07,380
level and the lower performers what we

00:20:04,830 --> 00:20:11,940
found out is also high-performing team

00:20:07,380 --> 00:20:14,820
use right levers to accelerate their

00:20:11,940 --> 00:20:17,310
development frequency without

00:20:14,820 --> 00:20:20,660
compromising quality and that is the key

00:20:17,310 --> 00:20:23,160
right in capital one our levers are

00:20:20,660 --> 00:20:25,320
compliance gates for automated

00:20:23,160 --> 00:20:27,630
deployment and take a moment to think

00:20:25,320 --> 00:20:29,670
about what your levers are to accelerate

00:20:27,630 --> 00:20:37,770
your engineering excellence journey

00:20:29,670 --> 00:20:41,790
thank you for the opportunity Thank You

00:20:37,770 --> 00:20:44,970
Raji fantastic great book recommendation

00:20:41,790 --> 00:20:50,070
- all right so we are getting ready for

00:20:44,970 --> 00:20:51,650
our next sessions breakouts start in 15

00:20:50,070 --> 00:20:54,540
minutes so grab yourself a cup of coffee

00:20:51,650 --> 00:20:56,160
and make your way to the breakout rooms

00:20:54,540 --> 00:20:57,240
and we'll see you soon

00:20:56,160 --> 00:21:00,510
I think there's some lightning talks

00:20:57,240 --> 00:21:02,040
starting in this stage as well oh by the

00:21:00,510 --> 00:21:04,770
way quick quick quick announcement sorry

00:21:02,040 --> 00:21:06,840
about this we have three open spots this

00:21:04,770 --> 00:21:08,370
afternoon at 1:30 in the breakout rooms

00:21:06,840 --> 00:21:11,000
if anybody wants to give a talk

00:21:08,370 --> 00:21:11,000

YouTube URL: https://www.youtube.com/watch?v=6iSkjCeD8I4


