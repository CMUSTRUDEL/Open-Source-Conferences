Title: Lars Wander   Emily Burns "We Want YOU to Contribute  Seattle"
Publication date: 2018-10-24
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,270 --> 00:00:05,380
[Music]

00:00:09,820 --> 00:00:13,259
[Music]

00:00:18,439 --> 00:00:25,170
hello everyone we are here to talk about

00:00:23,010 --> 00:00:28,160
contributing hopefully you're here to

00:00:25,170 --> 00:00:31,289
get started contributing fingers crossed

00:00:28,160 --> 00:00:33,480
my name is Emily burns I work at Netflix

00:00:31,289 --> 00:00:35,100
I'm a senior software engineer on the

00:00:33,480 --> 00:00:37,020
delivery engineering team and we run and

00:00:35,100 --> 00:00:40,170
operate its beniker and builds vinegar

00:00:37,020 --> 00:00:41,399
and this is Lars he works at Google also

00:00:40,170 --> 00:00:45,920
wants vinegar and heads up the

00:00:41,399 --> 00:00:49,260
open-source portion of their team so

00:00:45,920 --> 00:00:52,559
today we're gonna give you a walkthrough

00:00:49,260 --> 00:00:54,210
of the spinnaker architecture um like an

00:00:52,559 --> 00:00:56,910
overview of what the micro services do

00:00:54,210 --> 00:00:59,160
and then a specific walkthrough for a

00:00:56,910 --> 00:01:01,350
scenario that you might see and then

00:00:59,160 --> 00:01:04,320
we're going to talk about how to develop

00:01:01,350 --> 00:01:06,990
locally then we're gonna do some live

00:01:04,320 --> 00:01:09,500
demos of changes which will go amazingly

00:01:06,990 --> 00:01:11,549
and then we're going to talk about

00:01:09,500 --> 00:01:13,590
beginner-friendly starting points and

00:01:11,549 --> 00:01:15,720
becoming a contributor and we'll take

00:01:13,590 --> 00:01:17,400
questions about that so if at any point

00:01:15,720 --> 00:01:18,570
you have like a clarifying question or

00:01:17,400 --> 00:01:20,430
you want more detail about a specific

00:01:18,570 --> 00:01:23,189
slide feel free to stop me or stop Lars

00:01:20,430 --> 00:01:24,720
and and ask and then if you want to talk

00:01:23,189 --> 00:01:28,790
about more general things that we don't

00:01:24,720 --> 00:01:28,790
cover we'll do questions at the end so

00:01:29,689 --> 00:01:35,189
spinnaker architecture spinnaker is made

00:01:32,880 --> 00:01:38,310
up of a bunch of micro services and they

00:01:35,189 --> 00:01:39,960
all have specific roles and some are

00:01:38,310 --> 00:01:42,540
super critical to the functionality of

00:01:39,960 --> 00:01:44,790
spinnaker and some provide more edge

00:01:42,540 --> 00:01:46,920
functionality that's maybe not Michigan

00:01:44,790 --> 00:01:48,990
mission-critical and so this is the

00:01:46,920 --> 00:01:50,340
architecture diagram that is from the

00:01:48,990 --> 00:01:51,810
spinnaker i/o website that you might

00:01:50,340 --> 00:01:55,200
have seen before we're going to walk

00:01:51,810 --> 00:01:57,869
through that so the top level the green

00:01:55,200 --> 00:01:59,430
boxes with the people next to them those

00:01:57,869 --> 00:02:02,159
are what you might interact with as a

00:01:59,430 --> 00:02:05,280
customer user a spinnaker so deck is the

00:02:02,159 --> 00:02:08,129
micro service that's the UI and it is

00:02:05,280 --> 00:02:11,580
built in a combination of angular and

00:02:08,129 --> 00:02:12,520
react but all new code we would love to

00:02:11,580 --> 00:02:18,790
be submitted and

00:02:12,520 --> 00:02:21,190
act if possible and then custom script

00:02:18,790 --> 00:02:22,930
or API caller would not usually interact

00:02:21,190 --> 00:02:23,950
with deck but that's another entry point

00:02:22,930 --> 00:02:26,230
and just monicker

00:02:23,950 --> 00:02:27,490
so it's called out as a box here because

00:02:26,230 --> 00:02:30,880
we have a lot of people at Netflix that

00:02:27,490 --> 00:02:32,560
do that so those arrows point to gate

00:02:30,880 --> 00:02:35,770
which is the micro service that is the

00:02:32,560 --> 00:02:37,900
API gateway and so this exposes all the

00:02:35,770 --> 00:02:41,710
functionality of spinnaker through one

00:02:37,900 --> 00:02:43,150
point and we have a swagger and point

00:02:41,710 --> 00:02:45,210
that when you stand up gate you'll see

00:02:43,150 --> 00:02:47,740
and so you can play around with the

00:02:45,210 --> 00:02:52,270
endpoints and get data that way and see

00:02:47,740 --> 00:02:53,830
how to custom script from gate sends all

00:02:52,270 --> 00:02:59,260
the traffic to all the other services

00:02:53,830 --> 00:03:02,260
and so the next big thing is Orca Orca

00:02:59,260 --> 00:03:04,420
is the orchestration engine so far these

00:03:02,260 --> 00:03:06,130
are named pretty pretty much to make

00:03:04,420 --> 00:03:08,320
sense hopefully

00:03:06,130 --> 00:03:11,050
and so Orca does all of the

00:03:08,320 --> 00:03:12,760
orchestration of pipelines and tasks and

00:03:11,050 --> 00:03:15,520
coordinating the sequence in which

00:03:12,760 --> 00:03:18,670
things happen and monitoring all of

00:03:15,520 --> 00:03:21,520
those Orca talks to cloud driver and

00:03:18,670 --> 00:03:24,340
cloud driver is the micro service that

00:03:21,520 --> 00:03:26,320
talks to the specific cloud pieces so

00:03:24,340 --> 00:03:28,510
all of the logic that deals with a

00:03:26,320 --> 00:03:29,550
kawthar kubernetes are actually talking

00:03:28,510 --> 00:03:33,280
to the cloud actually making changes

00:03:29,550 --> 00:03:34,720
happens in cloud driver so that's kind

00:03:33,280 --> 00:03:36,490
of the core flow for what you would

00:03:34,720 --> 00:03:38,410
think in what you'd understand with

00:03:36,490 --> 00:03:42,130
actions so there are some other services

00:03:38,410 --> 00:03:43,209
as well let's see starting from the

00:03:42,130 --> 00:03:47,110
right here

00:03:43,209 --> 00:03:51,340
Igor talks to Jenkins and the docker

00:03:47,110 --> 00:03:53,650
registry and does indexing there and

00:03:51,340 --> 00:03:56,470
publishes events to echo when new things

00:03:53,650 --> 00:03:59,320
happen echo is the eventing service

00:03:56,470 --> 00:04:02,860
which takes events from inside spinnaker

00:03:59,320 --> 00:04:05,080
and puts them outside spinnaker so echo

00:04:02,860 --> 00:04:07,900
will send events to slack things like

00:04:05,080 --> 00:04:11,200
that front fifty is the persistent data

00:04:07,900 --> 00:04:13,660
micro service which is backed by Amazon

00:04:11,200 --> 00:04:18,250
four which was backed by s3 for Amazon

00:04:13,660 --> 00:04:20,350
and she GCS for Google and there are

00:04:18,250 --> 00:04:22,630
some other backings too this is where

00:04:20,350 --> 00:04:24,010
all of the application data is stored

00:04:22,630 --> 00:04:25,780
but not

00:04:24,010 --> 00:04:29,520
we're like the task history or execution

00:04:25,780 --> 00:04:33,550
history is stored Fiat is author

00:04:29,520 --> 00:04:36,070
authorization and so that that's a newer

00:04:33,550 --> 00:04:37,960
service and it deals with access control

00:04:36,070 --> 00:04:41,290
for accounts and pipelines on a more

00:04:37,960 --> 00:04:45,850
granule granular level Brasco is the

00:04:41,290 --> 00:04:48,730
bakery it's based on Packer and then

00:04:45,850 --> 00:04:49,630
Kayenta is the canary analysis tool

00:04:48,730 --> 00:04:53,440
which there have been a bunch of other

00:04:49,630 --> 00:04:54,880
talks about cai anta is not yeah you

00:04:53,440 --> 00:04:58,270
don't to run panting you don't need

00:04:54,880 --> 00:05:02,380
spinnaker but it uses orca as the way it

00:04:58,270 --> 00:05:04,780
orchestrates but a separate Orca so

00:05:02,380 --> 00:05:06,910
there's a summary of that all that on

00:05:04,780 --> 00:05:10,150
the side too so now we're going to walk

00:05:06,910 --> 00:05:12,940
through a specific event and how that

00:05:10,150 --> 00:05:15,910
flows through spinnaker so we're going

00:05:12,940 --> 00:05:18,160
to talk about a docker trigger and what

00:05:15,910 --> 00:05:19,420
happens from when the doctor event is

00:05:18,160 --> 00:05:21,190
published all the way to the end of the

00:05:19,420 --> 00:05:24,580
pipeline so you can see how the micro

00:05:21,190 --> 00:05:25,720
services interact and all of the files

00:05:24,580 --> 00:05:27,550
that I referenced are linked at the

00:05:25,720 --> 00:05:29,140
bottom and our slides will be published

00:05:27,550 --> 00:05:32,560
so you can like follow along if you want

00:05:29,140 --> 00:05:34,960
or explore later so the first thing that

00:05:32,560 --> 00:05:37,630
happens when you have a docker trigger

00:05:34,960 --> 00:05:40,900
as you upload a new docker version so a

00:05:37,630 --> 00:05:42,790
new tag and Igor is the one that deals

00:05:40,900 --> 00:05:47,980
with that and indexing docker and so

00:05:42,790 --> 00:05:51,490
when it sees a new tag it publishes an

00:05:47,980 --> 00:05:56,310
event to echo that says hey there's been

00:05:51,490 --> 00:06:02,170
a new docker tag echo takes that event

00:05:56,310 --> 00:06:04,780
and it knows what to do with it so echo

00:06:02,170 --> 00:06:07,720
is periodically pulling front pipelines

00:06:04,780 --> 00:06:11,140
from front 50 and it will refresh those

00:06:07,720 --> 00:06:12,760
several times a minute and it looks

00:06:11,140 --> 00:06:15,100
through all those pipelines and it

00:06:12,760 --> 00:06:17,590
decides if this event matches the

00:06:15,100 --> 00:06:20,230
specific trigger that anyone has defined

00:06:17,590 --> 00:06:24,340
on their pipeline so it looks at like

00:06:20,230 --> 00:06:25,570
the rig X for the name of the tag and

00:06:24,340 --> 00:06:30,010
different things like that whether the

00:06:25,570 --> 00:06:31,840
pipeline is enabled or disabled and then

00:06:30,010 --> 00:06:34,870
if it determines there is a match or

00:06:31,840 --> 00:06:35,560
many matches for this new event then it

00:06:34,870 --> 00:06:41,370
sends in a

00:06:35,560 --> 00:06:44,830
then to Orca to start the pipeline so

00:06:41,370 --> 00:06:46,990
Orca does the actual work Orca pulls the

00:06:44,830 --> 00:06:49,030
pipeline again from front 50 make sure

00:06:46,990 --> 00:06:53,230
it has the most up-to-date copy of the

00:06:49,030 --> 00:06:55,660
pipeline and then it runs all the stages

00:06:53,230 --> 00:06:57,760
that are defined in the pipeline and it

00:06:55,660 --> 00:06:59,950
might reach out to different services

00:06:57,760 --> 00:07:01,780
like if it's a pipeline that has a

00:06:59,950 --> 00:07:05,169
canary in it it might reach out to Fanta

00:07:01,780 --> 00:07:06,970
if it has needs to bake something it

00:07:05,169 --> 00:07:08,620
might reach out to Rosco if it needs to

00:07:06,970 --> 00:07:10,270
change the cloud it might reach out to

00:07:08,620 --> 00:07:11,830
cloud driver you get the idea it

00:07:10,270 --> 00:07:14,050
communicates with these micro surfaces

00:07:11,830 --> 00:07:20,770
it monitors those tasks and these are

00:07:14,050 --> 00:07:24,130
all defined in stages in Orca events for

00:07:20,770 --> 00:07:26,080
each pipeline stage are sent to echo -

00:07:24,130 --> 00:07:27,700
maybe propagate out into sac events so

00:07:26,080 --> 00:07:30,010
you've seen your pipeline start slack

00:07:27,700 --> 00:07:34,780
white linen slack event and that goes

00:07:30,010 --> 00:07:37,090
back your echo and then once the

00:07:34,780 --> 00:07:39,880
pipeline as the pipeline is running and

00:07:37,090 --> 00:07:42,669
once it's finished its persisted in a

00:07:39,880 --> 00:07:46,180
database so Redis has been the primary

00:07:42,669 --> 00:07:49,300
database for a long time but we've just

00:07:46,180 --> 00:07:52,210
recently added support for SQL as a

00:07:49,300 --> 00:07:54,250
backing store for Orca because a lot of

00:07:52,210 --> 00:07:57,190
people like it when their pipeline

00:07:54,250 --> 00:07:58,660
execution history doesn't go away and so

00:07:57,190 --> 00:08:01,479
we've been taking we've been making

00:07:58,660 --> 00:08:03,250
effort to make that more reliable okay

00:08:01,479 --> 00:08:05,139
so before we actually make a demo or do

00:08:03,250 --> 00:08:07,300
a demo and I'm sure this stuff works I

00:08:05,139 --> 00:08:08,950
will talk briefly about halyard is

00:08:07,300 --> 00:08:11,760
everyone heard of halyard before anyone

00:08:08,950 --> 00:08:13,870
not heard of halyard who's use halyard I

00:08:11,760 --> 00:08:15,840
will explain what halyard it is that's

00:08:13,870 --> 00:08:19,330
great it's the best service in spinnaker

00:08:15,840 --> 00:08:21,360
so who's used hollard actually to

00:08:19,330 --> 00:08:23,650
configure their spinnaker cool awesome

00:08:21,360 --> 00:08:27,130
it's good oh thank you that's all I

00:08:23,650 --> 00:08:29,380
needed here okay so we use it we built

00:08:27,130 --> 00:08:30,460
it with the open source I launched a

00:08:29,380 --> 00:08:32,650
spinnaker to make configuring and

00:08:30,460 --> 00:08:34,300
installing spinnaker easier spinnaker is

00:08:32,650 --> 00:08:36,849
like 10 micro services like you saw each

00:08:34,300 --> 00:08:39,010
of them has dozens to hundreds it's

00:08:36,849 --> 00:08:40,630
gonna take properties and in fact

00:08:39,010 --> 00:08:42,700
actually a link right here and this is

00:08:40,630 --> 00:08:44,860
just the stuff but halyard exposes the

00:08:42,700 --> 00:08:46,150
table of contents is massive and this is

00:08:44,860 --> 00:08:48,430
mostly added by the community

00:08:46,150 --> 00:08:48,970
it's like codified configuration for

00:08:48,430 --> 00:08:52,990
spending

00:08:48,970 --> 00:08:54,339
it goes on for pages and pages so we

00:08:52,990 --> 00:08:57,279
need some way basically to make that

00:08:54,339 --> 00:08:58,480
stuff documental and make sure it stays

00:08:57,279 --> 00:09:01,689
up to date with various versions of

00:08:58,480 --> 00:09:04,420
spinnaker it's we use it all over the

00:09:01,689 --> 00:09:06,519
place it's um it's what drives the

00:09:04,420 --> 00:09:07,959
deployment in the helm chart our

00:09:06,519 --> 00:09:10,569
internal spinnaker deployments are

00:09:07,959 --> 00:09:12,009
deployed by by halyard we do it for code

00:09:10,569 --> 00:09:13,870
that provisioning if a bunch of big

00:09:12,009 --> 00:09:15,670
customers using it it's all over the

00:09:13,870 --> 00:09:18,910
place but one thing that was missing up

00:09:15,670 --> 00:09:21,339
until six months ago was using halyard

00:09:18,910 --> 00:09:22,930
for development so say for example you

00:09:21,339 --> 00:09:24,550
have spinnaker in production you're

00:09:22,930 --> 00:09:26,100
running spinnaker something's wrong and

00:09:24,550 --> 00:09:28,720
you want to make a code change

00:09:26,100 --> 00:09:30,490
- exactly reproduce that issue and

00:09:28,720 --> 00:09:32,500
insert some like debugger or whatever

00:09:30,490 --> 00:09:33,670
you can take halyard take that exact

00:09:32,500 --> 00:09:35,259
same configuration you have for your

00:09:33,670 --> 00:09:37,269
production spinnaker have it cloned

00:09:35,259 --> 00:09:38,680
those services from source run the mate

00:09:37,269 --> 00:09:40,750
at the exact same commits that we built

00:09:38,680 --> 00:09:43,360
those services from and then hopefully

00:09:40,750 --> 00:09:44,589
troubleshoot a little easier so this was

00:09:43,360 --> 00:09:46,930
added by Brandon Nelson he's on the

00:09:44,589 --> 00:09:48,550
Google team he joined a couple months

00:09:46,930 --> 00:09:51,040
ago this was the the back end he added

00:09:48,550 --> 00:09:52,209
for halyard and Scott see reduce the

00:09:51,040 --> 00:09:53,410
audience back there wrote a great

00:09:52,209 --> 00:09:55,300
getting started guide that actually

00:09:53,410 --> 00:09:57,790
makes this really easy to walk through

00:09:55,300 --> 00:09:59,350
and get get set up all of our new

00:09:57,790 --> 00:10:01,389
engineers are using this to develop

00:09:59,350 --> 00:10:03,459
spinnaker um all of our Devi M's that we

00:10:01,389 --> 00:10:06,160
have running are managed by halyard and

00:10:03,459 --> 00:10:08,649
that's exactly right so to talk a little

00:10:06,160 --> 00:10:11,439
bit about the local get back-end that

00:10:08,649 --> 00:10:13,180
was added a couple months ago before we

00:10:11,439 --> 00:10:15,069
actually jump into it so basically what

00:10:13,180 --> 00:10:16,600
it does is you say I want to deploy

00:10:15,069 --> 00:10:19,209
spinning or locally you give it a

00:10:16,600 --> 00:10:20,920
configurable repo sorry folder that I

00:10:19,209 --> 00:10:22,240
cloned stuff into in this case we say

00:10:20,920 --> 00:10:23,649
it's gonna go into Def spinnaker and

00:10:22,240 --> 00:10:24,970
like Emily said we have all these

00:10:23,649 --> 00:10:26,699
different components they each get their

00:10:24,970 --> 00:10:29,019
own directory they each get their own

00:10:26,699 --> 00:10:31,660
lifecycle scripts they each get logs

00:10:29,019 --> 00:10:33,309
written out into a separate folder and

00:10:31,660 --> 00:10:35,079
then you can run the typical halyard

00:10:33,309 --> 00:10:36,939
commands to manage the lifecycle the

00:10:35,079 --> 00:10:38,379
same way you do for any other spinnaker

00:10:36,939 --> 00:10:40,839
deployment whether it's to kubernetes or

00:10:38,379 --> 00:10:42,189
to your local machine the big difference

00:10:40,839 --> 00:10:45,360
though is that you can also instead of

00:10:42,189 --> 00:10:48,339
just assigning it fixed versions say

00:10:45,360 --> 00:10:50,589
clone for me the upstream master branch

00:10:48,339 --> 00:10:52,089
and run that across all services or for

00:10:50,589 --> 00:10:54,990
this subset of services that I want to

00:10:52,089 --> 00:10:57,790
have pointing at certain branches

00:10:54,990 --> 00:10:59,470
big call-out right here is the first

00:10:57,790 --> 00:11:00,970
time you do this it downloads basically

00:10:59,470 --> 00:11:02,830
half the Internet in terms of Gradle

00:11:00,970 --> 00:11:05,320
dependencies so it takes like

00:11:02,830 --> 00:11:06,820
45 minutes to start luckily we have

00:11:05,320 --> 00:11:08,680
someone on our team trying to split that

00:11:06,820 --> 00:11:10,510
out and you can maybe somewhat prune

00:11:08,680 --> 00:11:11,860
down the dependencies but if you go home

00:11:10,510 --> 00:11:13,830
and run this it'll take forever the

00:11:11,860 --> 00:11:19,360
first time you run it don't be alarmed

00:11:13,830 --> 00:11:21,160
okay so Emily found a great thing we're

00:11:19,360 --> 00:11:24,820
going to fix in spinnaker it's an issue

00:11:21,160 --> 00:11:26,260
right now and namely so you run the web

00:11:24,820 --> 00:11:28,089
book stage the stage and spinnaker that

00:11:26,260 --> 00:11:31,240
lets you call out to some third party

00:11:28,089 --> 00:11:32,709
service issue is you don't know what the

00:11:31,240 --> 00:11:35,019
status code is that you get back you get

00:11:32,709 --> 00:11:36,880
like a status code message but not the

00:11:35,019 --> 00:11:38,860
status code number and we're gonna add

00:11:36,880 --> 00:11:40,089
that and spinnaker right now so there's

00:11:38,860 --> 00:11:42,190
a couple beginner-friendly

00:11:40,089 --> 00:11:44,170
starting points if you don't actually

00:11:42,190 --> 00:11:46,149
want to write code necessarily and you

00:11:44,170 --> 00:11:48,430
just want to help the community out you

00:11:46,149 --> 00:11:49,810
could start by triaging an issue we

00:11:48,430 --> 00:11:52,630
actually use these labels very heavily

00:11:49,810 --> 00:11:54,040
and the github project I know though for

00:11:52,630 --> 00:11:55,720
some reason github doesn't actually let

00:11:54,040 --> 00:11:57,040
you add labels unless you're you have

00:11:55,720 --> 00:11:59,410
commit privileges which is kind of odd

00:11:57,040 --> 00:12:01,000
so we have the spinnaker bot which

00:11:59,410 --> 00:12:02,560
watches a repos for us and you can use

00:12:01,000 --> 00:12:05,410
these kinds of commands like add label

00:12:02,560 --> 00:12:07,000
remove label to tag things so you either

00:12:05,410 --> 00:12:08,680
if you're filing a new issue or you see

00:12:07,000 --> 00:12:10,060
something that's not been tagged and if

00:12:08,680 --> 00:12:14,320
you add some tags that helps out quite a

00:12:10,060 --> 00:12:16,149
bit if you're looking at the docs and

00:12:14,320 --> 00:12:17,560
you see there's a typo or something's

00:12:16,149 --> 00:12:19,329
not quite right or doesn't it doesn't

00:12:17,560 --> 00:12:20,709
make sense if you have in the top right

00:12:19,329 --> 00:12:22,029
actually for every page this little

00:12:20,709 --> 00:12:24,130
suggest an edit button you can just

00:12:22,029 --> 00:12:25,899
click on that it brings you right to the

00:12:24,130 --> 00:12:27,339
web editor in github and you can make a

00:12:25,899 --> 00:12:30,640
change and it'll let you commit it right

00:12:27,339 --> 00:12:32,709
back or open a PR if you actually want

00:12:30,640 --> 00:12:36,339
to write code we have this beginner

00:12:32,709 --> 00:12:38,079
friendly label here which we rely on or

00:12:36,339 --> 00:12:40,360
will add to issues when we think they're

00:12:38,079 --> 00:12:42,970
very easy to add actually funny story I

00:12:40,360 --> 00:12:45,640
was looking for an example to take a

00:12:42,970 --> 00:12:47,290
screenshot of and then I think Michaels

00:12:45,640 --> 00:12:49,089
in the audience right now it was really

00:12:47,290 --> 00:12:52,449
great and actually responded to one of

00:12:49,089 --> 00:12:56,020
these and then I closed the issue fixed

00:12:52,449 --> 00:12:57,910
it and kind of like the perfect story

00:12:56,020 --> 00:12:59,649
but so typically if someone has this

00:12:57,910 --> 00:13:02,019
label that means they know that it's

00:12:59,649 --> 00:13:03,490
easy to contribute and they'll be able

00:13:02,019 --> 00:13:05,350
to coach you through it as well too so

00:13:03,490 --> 00:13:08,970
and they're typically added to things

00:13:05,350 --> 00:13:08,970
that are pretty easy to fix and close

00:13:09,060 --> 00:13:12,520
finally if you have an idea for like a

00:13:11,050 --> 00:13:14,380
very big contribution like you want to

00:13:12,520 --> 00:13:16,339
add a new stage you want to add a new

00:13:14,380 --> 00:13:17,930
provider it would you

00:13:16,339 --> 00:13:19,879
really helpful if you're a design doc it

00:13:17,930 --> 00:13:22,550
doesn't have to be very formal but the

00:13:19,879 --> 00:13:24,620
idea is that the reviewer is kind of one

00:13:22,550 --> 00:13:26,360
I understand what your goals are how

00:13:24,620 --> 00:13:27,860
you're gonna split this up and they'll

00:13:26,360 --> 00:13:29,779
also be able to provide you feedback on

00:13:27,860 --> 00:13:31,819
how to implement this within the context

00:13:29,779 --> 00:13:33,019
of what the other people in the

00:13:31,819 --> 00:13:35,059
spinnaker community are doing

00:13:33,019 --> 00:13:36,980
you should try and hit a couple of key

00:13:35,059 --> 00:13:39,410
points so one motivations why are you

00:13:36,980 --> 00:13:41,779
doing it to implementation details

00:13:39,410 --> 00:13:43,339
roughly what change you plan to make it

00:13:41,779 --> 00:13:44,480
doesn't have to be pointing out lines in

00:13:43,339 --> 00:13:46,100
code and showing exactly how you're

00:13:44,480 --> 00:13:47,749
gonna implement it but the very least

00:13:46,100 --> 00:13:50,660
give us an idea of the change you're

00:13:47,749 --> 00:13:52,519
making milestones help us quite a bit it

00:13:50,660 --> 00:13:54,499
helps us put things into that roadmap

00:13:52,519 --> 00:13:56,480
doc so we can say here's when certain

00:13:54,499 --> 00:13:58,910
features are arriving and it also helps

00:13:56,480 --> 00:14:01,399
us plan the work that we're doing on the

00:13:58,910 --> 00:14:05,959
project and then finally if there's some

00:14:01,399 --> 00:14:07,850
sort of alternative easily thought of

00:14:05,959 --> 00:14:09,379
solution that you don't think makes

00:14:07,850 --> 00:14:10,759
sense put it into some sort of

00:14:09,379 --> 00:14:11,809
alternatives considered section a

00:14:10,759 --> 00:14:14,240
section at the end of the talk because

00:14:11,809 --> 00:14:16,430
people typically will wind up asking

00:14:14,240 --> 00:14:19,790
those questions with that I'm gonna hand

00:14:16,430 --> 00:14:22,459
it back to Emily so we don't we talk

00:14:19,790 --> 00:14:25,519
about becoming a committer as well and

00:14:22,459 --> 00:14:27,709
you talked about governance and so this

00:14:25,519 --> 00:14:29,329
past summer we've really formalized like

00:14:27,709 --> 00:14:32,059
the question of how do you get commit

00:14:29,329 --> 00:14:34,429
privileges who can do things do you have

00:14:32,059 --> 00:14:39,290
to be buddy-buddy with someone the

00:14:34,429 --> 00:14:41,300
answer is now no so a great place to

00:14:39,290 --> 00:14:44,899
start and to show your involvement in

00:14:41,300 --> 00:14:49,399
the community is to comment on issues

00:14:44,899 --> 00:14:52,279
and PRS and so reproduce issues comment

00:14:49,399 --> 00:14:53,959
on PRS and understand them and say when

00:14:52,279 --> 00:14:56,120
you know function is not clear or too

00:14:53,959 --> 00:14:58,009
big or should be broken up enforce the

00:14:56,120 --> 00:15:02,870
style guidelines that are on the

00:14:58,009 --> 00:15:05,509
contributing submitting thing and you

00:15:02,870 --> 00:15:08,720
know test to make sure a PR fixes a bug

00:15:05,509 --> 00:15:11,779
though that's all really helpful and it

00:15:08,720 --> 00:15:13,009
is it helps to show activity for you

00:15:11,779 --> 00:15:15,439
that you're invested in the community

00:15:13,009 --> 00:15:21,309
your understanding the things and your

00:15:15,439 --> 00:15:24,019
you're helping out when you'd like to

00:15:21,309 --> 00:15:26,720
fix the bug or build a future we have

00:15:24,019 --> 00:15:29,360
conventions there here linked and so you

00:15:26,720 --> 00:15:29,910
can open a PR and then if you don't get

00:15:29,360 --> 00:15:32,070
timely

00:15:29,910 --> 00:15:33,870
there's a couple things to do you can

00:15:32,070 --> 00:15:36,300
mention spinnaker or viewers which

00:15:33,870 --> 00:15:38,490
emails us you can reach out in the

00:15:36,300 --> 00:15:39,960
appropriate flack channel that's like

00:15:38,490 --> 00:15:42,450
the kubernetes slack or the how your

00:15:39,960 --> 00:15:46,500
check depending on which feature you're

00:15:42,450 --> 00:15:48,390
dealing with and then if you're in the

00:15:46,500 --> 00:15:49,440
community you probably know who has a

00:15:48,390 --> 00:15:50,910
lot of stake in the feature and who

00:15:49,440 --> 00:15:53,520
cares about it so you can also talk to

00:15:50,910 --> 00:15:59,910
them directly which is less preferred

00:15:53,520 --> 00:16:04,230
but more successful so the details are

00:15:59,910 --> 00:16:06,360
here so on how to become a committer you

00:16:04,230 --> 00:16:08,700
kind of move through the flow that Andy

00:16:06,360 --> 00:16:10,430
talked about yesterday so we're looking

00:16:08,700 --> 00:16:14,040
for you to be involved in the community

00:16:10,430 --> 00:16:16,680
contributing several smaller features

00:16:14,040 --> 00:16:18,090
have some PRS closed we're looking for

00:16:16,680 --> 00:16:21,030
you to have been involved in the

00:16:18,090 --> 00:16:23,910
community for a while and then ideally

00:16:21,030 --> 00:16:26,160
you we want you to have some stake in

00:16:23,910 --> 00:16:28,380
spinnaker so like your company is using

00:16:26,160 --> 00:16:31,170
it and you care about the future and

00:16:28,380 --> 00:16:35,210
where it goes and you want to help us on

00:16:31,170 --> 00:16:38,340
this journey any questions about that

00:16:35,210 --> 00:16:39,840
additionally Oktoberfest is going on

00:16:38,340 --> 00:16:41,720
right now I don't know if you guys heard

00:16:39,840 --> 00:16:44,730
of it it's put on by digital ocean

00:16:41,720 --> 00:16:48,330
thinking so if you sign up with them and

00:16:44,730 --> 00:16:50,160
you have five PRS merged in October they

00:16:48,330 --> 00:16:54,480
will send you a free t-shirt and some

00:16:50,160 --> 00:16:57,540
stickers so you can do any of the things

00:16:54,480 --> 00:17:01,490
we talked about today to help your help

00:16:57,540 --> 00:17:01,490
you win a another free t-shirt

00:17:02,660 --> 00:17:04,720

YouTube URL: https://www.youtube.com/watch?v=jh6HhRKLInU


