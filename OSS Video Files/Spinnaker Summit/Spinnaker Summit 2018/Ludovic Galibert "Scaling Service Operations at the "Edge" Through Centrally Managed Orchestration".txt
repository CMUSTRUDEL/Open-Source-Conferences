Title: Ludovic Galibert "Scaling Service Operations at the "Edge" Through Centrally Managed Orchestration"
Publication date: 2018-10-24
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,270 --> 00:00:05,380
[Music]

00:00:09,820 --> 00:00:13,259
[Music]

00:00:15,980 --> 00:00:21,060
so today we'll will talk about scaling

00:00:19,080 --> 00:00:24,980
service operation at VA true centrally

00:00:21,060 --> 00:00:27,920
managed orchestration I'll start with

00:00:24,980 --> 00:00:31,710
explaining what I mean with edge and

00:00:27,920 --> 00:00:36,059
then I'll go into the operations model

00:00:31,710 --> 00:00:38,520
that we deal with an edge which

00:00:36,059 --> 00:00:40,710
challenges we faced while doing with

00:00:38,520 --> 00:00:45,809
with these two operations model dealing

00:00:40,710 --> 00:00:47,940
with service operations and I'll explain

00:00:45,809 --> 00:00:50,809
how manage part line templates helped us

00:00:47,940 --> 00:00:54,000
overcome these challenges and finally

00:00:50,809 --> 00:00:59,280
I'll sum it up by talking about the

00:00:54,000 --> 00:01:00,809
learnings from our journey but first a

00:00:59,280 --> 00:01:03,890
little bit about myself let me introduce

00:01:00,809 --> 00:01:07,500
myself briefly my name is Vivek le bear

00:01:03,890 --> 00:01:13,740
you can call me Ludo it's usually easier

00:01:07,500 --> 00:01:15,330
to to pronounce and to retain this is my

00:01:13,740 --> 00:01:17,490
professional picture if you look me up

00:01:15,330 --> 00:01:21,540
on slack I actually more look more like

00:01:17,490 --> 00:01:25,080
this so any scuba diver in the room yes

00:01:21,540 --> 00:01:26,369
if you go for those who didn't raise

00:01:25,080 --> 00:01:29,130
their hand you should definitely try it

00:01:26,369 --> 00:01:30,900
out it's awesome so I've been for years

00:01:29,130 --> 00:01:32,400
on Netflix although I actually cheated

00:01:30,900 --> 00:01:34,680
technically it will be at the end of

00:01:32,400 --> 00:01:36,930
this week and I work on the edge

00:01:34,680 --> 00:01:39,090
developer productivity team so we write

00:01:36,930 --> 00:01:42,420
tools and services for all versions

00:01:39,090 --> 00:01:45,930
engineers at Netflix in edge and client

00:01:42,420 --> 00:01:48,810
teams to enable them to innovate move

00:01:45,930 --> 00:01:51,780
fast and yet not break things so we want

00:01:48,810 --> 00:01:54,240
to provide them a rapid scalable way to

00:01:51,780 --> 00:01:57,689
move their ideas from concept tuned to

00:01:54,240 --> 00:02:01,439
production and operate them with minimal

00:01:57,689 --> 00:02:05,100
overhead so you've heard this edge word

00:02:01,439 --> 00:02:09,160
twice already so what is that edges for

00:02:05,100 --> 00:02:11,440
stands for edge engineering we

00:02:09,160 --> 00:02:13,600
edge engineering and Compass's with

00:02:11,440 --> 00:02:16,720
services from Netflix but our frontline

00:02:13,600 --> 00:02:19,000
to the net fix ecosystem we operate the

00:02:16,720 --> 00:02:21,970
majority of mission-critical Tier one

00:02:19,000 --> 00:02:25,000
services responsible for the sign up

00:02:21,970 --> 00:02:26,500
discovery and playback experiences this

00:02:25,000 --> 00:02:28,870
is an overview of the edge architecture

00:02:26,500 --> 00:02:32,500
so you have billions of requests going

00:02:28,870 --> 00:02:35,020
to from devices every day going to Zul

00:02:32,500 --> 00:02:38,890
being funneled down to the micro

00:02:35,020 --> 00:02:40,480
services that we own and if any of these

00:02:38,890 --> 00:02:43,800
services go down we don't have a

00:02:40,480 --> 00:02:46,180
fallback if any of these services is

00:02:43,800 --> 00:02:48,730
broken then your Netflix experience

00:02:46,180 --> 00:02:51,040
infer is broken you might not be able to

00:02:48,730 --> 00:02:53,860
sign up for the service or look for

00:02:51,040 --> 00:02:56,380
titles and the worst case is you will

00:02:53,860 --> 00:02:57,700
not be able to play back a title which

00:02:56,380 --> 00:03:01,830
would be horrible with that weather

00:02:57,700 --> 00:03:01,830
outside if you couldn't stream Netflix

00:03:03,480 --> 00:03:11,260
so a little bit about Netflix we're now

00:03:07,060 --> 00:03:16,360
in over 190 markets we have over 130

00:03:11,260 --> 00:03:17,980
million global members and the number of

00:03:16,360 --> 00:03:19,810
members keeps growing as you can see

00:03:17,980 --> 00:03:23,080
from the last few years we have a steady

00:03:19,810 --> 00:03:24,460
growth of users and these are typically

00:03:23,080 --> 00:03:27,880
the numbers that you see when we're

00:03:24,460 --> 00:03:31,630
talking about Netflix but what about

00:03:27,880 --> 00:03:33,580
micro or nano services growth how

00:03:31,630 --> 00:03:35,890
engineers keep improving our systems

00:03:33,580 --> 00:03:38,890
making them more resilient adding

00:03:35,890 --> 00:03:40,720
features and all about to provide the

00:03:38,890 --> 00:03:44,290
best experience possible to our members

00:03:40,720 --> 00:03:47,740
and that entails creating services over

00:03:44,290 --> 00:03:50,380
time more and more services and that

00:03:47,740 --> 00:03:52,360
looks more like this the team size are

00:03:50,380 --> 00:03:54,970
growing sub linearly to the number of

00:03:52,360 --> 00:03:56,740
services that they're operating just as

00:03:54,970 --> 00:03:59,230
an example in edge we have so many

00:03:56,740 --> 00:04:02,020
services that we now have an average

00:03:59,230 --> 00:04:07,450
about 1.5 engineer per service it's not

00:04:02,020 --> 00:04:11,370
a lot so what are the operations models

00:04:07,450 --> 00:04:11,370
we have an edge engineering

00:04:12,700 --> 00:04:19,989
we have to to operations models mostly

00:04:17,620 --> 00:04:21,790
the full cycle developers which Greg

00:04:19,989 --> 00:04:23,139
talked about this morning and if you

00:04:21,790 --> 00:04:24,760
didn't get a chance to attend his talk

00:04:23,139 --> 00:04:27,370
you might have another chance at Keuka

00:04:24,760 --> 00:04:29,020
on SF in November or you can read the

00:04:27,370 --> 00:04:31,600
blog post online on the Netflix tech

00:04:29,020 --> 00:04:34,930
blog so this is a prevalent modeling

00:04:31,600 --> 00:04:36,639
edge but we also have another another

00:04:34,930 --> 00:04:38,139
operations model which we call

00:04:36,639 --> 00:04:41,889
centralized operations so I'll talk a

00:04:38,139 --> 00:04:44,740
little bit about this later for full

00:04:41,889 --> 00:04:47,139
cycle developers the model is operate

00:04:44,740 --> 00:04:52,090
what you build it's mostly for server

00:04:47,139 --> 00:04:55,990
engineers so the edge engineers develop

00:04:52,090 --> 00:04:58,120
those mission-critical services and they

00:04:55,990 --> 00:05:00,550
move them all along to production so

00:04:58,120 --> 00:05:02,590
then don't just develop code but they

00:05:00,550 --> 00:05:04,540
are responsible for everything they're

00:05:02,590 --> 00:05:05,950
they manage the orchestration but they

00:05:04,540 --> 00:05:07,210
need for their service be a manager be

00:05:05,950 --> 00:05:08,970
infrastructure they need to make sure

00:05:07,210 --> 00:05:10,900
that their services provision

00:05:08,970 --> 00:05:13,419
sufficiently to handle production

00:05:10,900 --> 00:05:14,680
traffic so in the end they're

00:05:13,419 --> 00:05:19,150
responsible for the whole software

00:05:14,680 --> 00:05:21,400
development lifecycle and on the other

00:05:19,150 --> 00:05:24,820
side we have centralized operations so

00:05:21,400 --> 00:05:29,770
this is a bit of a special case with an

00:05:24,820 --> 00:05:34,960
edge and this is related to the fact

00:05:29,770 --> 00:05:37,169
that we provide a platform that is based

00:05:34,960 --> 00:05:39,729
upon the backend for front-end framework

00:05:37,169 --> 00:05:43,000
so what is the backend from front end

00:05:39,729 --> 00:05:44,380
for front-end frameworks alright if you

00:05:43,000 --> 00:05:46,300
look at all these devices and you think

00:05:44,380 --> 00:05:48,850
about it they're all they all provide

00:05:46,300 --> 00:05:51,039
you different experiences so your iPhone

00:05:48,850 --> 00:05:54,310
might show you when you look for tiles

00:05:51,039 --> 00:05:57,280
you will see two tiles two per row and

00:05:54,310 --> 00:06:00,700
then maybe four O's the TV will show you

00:05:57,280 --> 00:06:02,080
maybe for five to six titles per ov and

00:06:00,700 --> 00:06:04,780
four to five roles so they have

00:06:02,080 --> 00:06:06,820
completely different experiences and the

00:06:04,780 --> 00:06:08,470
client teams want to provide you the

00:06:06,820 --> 00:06:10,840
best experience as possible so they will

00:06:08,470 --> 00:06:13,630
want to tailor that the requests what

00:06:10,840 --> 00:06:16,570
we're doing to get the data to very

00:06:13,630 --> 00:06:18,690
experienced so instead of you can't do

00:06:16,570 --> 00:06:21,490
that within it one size fits all API

00:06:18,690 --> 00:06:24,340
they need to be able to get the exact

00:06:21,490 --> 00:06:26,020
data that they need and not more

00:06:24,340 --> 00:06:27,910
so that's what we have those back ends

00:06:26,020 --> 00:06:30,070
were on it instead of calling wanting an

00:06:27,910 --> 00:06:32,770
API but everyone uses they can define

00:06:30,070 --> 00:06:35,620
their own api's so in bien they operate

00:06:32,770 --> 00:06:40,380
a back-end service for each of their own

00:06:35,620 --> 00:06:40,380
client that's what we call nano services

00:06:41,880 --> 00:06:47,680
so we have that back-end from for

00:06:44,200 --> 00:06:50,890
Frenette framework but typically client

00:06:47,680 --> 00:06:54,100
teams therefore want to focus on feature

00:06:50,890 --> 00:06:55,900
development very interested in getting

00:06:54,100 --> 00:06:57,610
new features out in their client they

00:06:55,900 --> 00:06:59,410
want they'll have to write their api's

00:06:57,610 --> 00:07:03,790
but then they want to iterate quickly

00:06:59,410 --> 00:07:05,650
and move features to production in the

00:07:03,790 --> 00:07:08,860
app they are not so much interested in

00:07:05,650 --> 00:07:10,000
what's required for orchestration set up

00:07:08,860 --> 00:07:11,140
their infrastructure and make sure

00:07:10,000 --> 00:07:14,350
everything is provisioned correctly

00:07:11,140 --> 00:07:16,300
that's not their core concern and that's

00:07:14,350 --> 00:07:17,620
why so we provide with that platform

00:07:16,300 --> 00:07:18,240
will provide the orchestration all the

00:07:17,620 --> 00:07:20,470
pipeline's

00:07:18,240 --> 00:07:25,030
defined by us and they don't need to

00:07:20,470 --> 00:07:27,910
care about that and the centralized

00:07:25,030 --> 00:07:29,890
operations team handles the operations

00:07:27,910 --> 00:07:31,600
for them so not just to be operational

00:07:29,890 --> 00:07:32,710
also the deployments they need to make

00:07:31,600 --> 00:07:37,180
sure that everything is provisioning

00:07:32,710 --> 00:07:38,800
correctly so to recap when you look at

00:07:37,180 --> 00:07:40,660
the software development lifecycle this

00:07:38,800 --> 00:07:43,120
is a simplified view of the aspects we

00:07:40,660 --> 00:07:46,590
are mostly interested in the full cycle

00:07:43,120 --> 00:07:49,330
developers cover cover the whole SDLC

00:07:46,590 --> 00:07:51,610
while the centralized operations team is

00:07:49,330 --> 00:07:53,470
mostly focused on the latter part we

00:07:51,610 --> 00:07:55,120
deploy integrate and just for

00:07:53,470 --> 00:07:56,800
completeness I added also client

00:07:55,120 --> 00:07:58,690
developers which are mostly care about

00:07:56,800 --> 00:08:03,970
developing picture and making testing

00:07:58,690 --> 00:08:05,440
then making sure everything is fine so

00:08:03,970 --> 00:08:10,780
what challenges did we encounter along

00:08:05,440 --> 00:08:13,540
the way with these two models so first

00:08:10,780 --> 00:08:15,220
let's take it a step back you joining

00:08:13,540 --> 00:08:17,020
Netflix you joined the net the edge

00:08:15,220 --> 00:08:18,430
engineering team and you want to develop

00:08:17,020 --> 00:08:20,950
your first service and push it out to

00:08:18,430 --> 00:08:23,320
production so you start coding and this

00:08:20,950 --> 00:08:24,700
is my photo for coding I picked this one

00:08:23,320 --> 00:08:28,570
because it could look like one of my

00:08:24,700 --> 00:08:31,990
spinnaker expressions so you start

00:08:28,570 --> 00:08:33,910
coding your code is ready now you want

00:08:31,990 --> 00:08:35,890
to push it to production so first you

00:08:33,910 --> 00:08:37,010
test it it's ready you want to push it

00:08:35,890 --> 00:08:39,770
out to production so that's what

00:08:37,010 --> 00:08:41,240
you create your spinnaker pipelines and

00:08:39,770 --> 00:08:42,430
because we're talking about spinnaker I

00:08:41,240 --> 00:08:43,880
have to put a photo of a sailboat

00:08:42,430 --> 00:08:46,130
unfortunately it doesn't have a

00:08:43,880 --> 00:08:48,320
spinnaker but pick this one because it's

00:08:46,130 --> 00:08:53,090
in Seattle and you might have noticed

00:08:48,320 --> 00:08:55,520
that we're actually in this building so

00:08:53,090 --> 00:08:57,340
you have your spinner your pub lines in

00:08:55,520 --> 00:09:01,520
place you can keep iterating on your app

00:08:57,340 --> 00:09:03,020
you you find bugs you fix them or you

00:09:01,520 --> 00:09:05,120
have new features and you can roll them

00:09:03,020 --> 00:09:08,150
out quickly thanks to your CI so you set

00:09:05,120 --> 00:09:09,770
up in spinnaker and now fast for its six

00:09:08,150 --> 00:09:13,670
months from now you want to add a second

00:09:09,770 --> 00:09:15,800
or third service or even more and so you

00:09:13,670 --> 00:09:17,810
will have to manage multiple services

00:09:15,800 --> 00:09:22,580
and multiple pipelines and this is when

00:09:17,810 --> 00:09:24,380
your headaches start so currently

00:09:22,580 --> 00:09:28,570
there's no first-class way in spinnaker

00:09:24,380 --> 00:09:31,760
to take a nap take all its pipelines and

00:09:28,570 --> 00:09:33,860
clone it and have all these pipelines in

00:09:31,760 --> 00:09:36,680
a second of the way to do it right now

00:09:33,860 --> 00:09:39,350
is you go to your first stop you edit

00:09:36,680 --> 00:09:41,120
your pipeline you copy with Jason you go

00:09:39,350 --> 00:09:43,610
in your new app you create your pipeline

00:09:41,120 --> 00:09:46,250
you paid your JC so you can wrap tooling

00:09:43,610 --> 00:09:48,560
around this but it's not very convenient

00:09:46,250 --> 00:09:50,390
and that's for the easy case the more

00:09:48,560 --> 00:09:53,000
complicated cases you have a pipeline

00:09:50,390 --> 00:09:55,790
that executes another pipeline and

00:09:53,000 --> 00:09:58,100
invitation this pipeline is referenced

00:09:55,790 --> 00:10:00,350
by the it's not referenced by name so

00:09:58,100 --> 00:10:01,940
when you copy it and you want to paste

00:10:00,350 --> 00:10:03,740
it you need to make sure that the

00:10:01,940 --> 00:10:06,410
pipeline ID reflects the new pipeline

00:10:03,740 --> 00:10:07,580
your new application and then it's a big

00:10:06,410 --> 00:10:08,930
headache because you need to make sure

00:10:07,580 --> 00:10:12,170
the order in which you create your

00:10:08,930 --> 00:10:13,820
pipelines and now I'm just talking about

00:10:12,170 --> 00:10:16,580
one pipeline into maybe two or three

00:10:13,820 --> 00:10:18,200
apps now I imagine you have five

00:10:16,580 --> 00:10:19,730
applications and you have sixteen

00:10:18,200 --> 00:10:25,400
pipelines that's not going to be a lot

00:10:19,730 --> 00:10:28,970
of fun so that's one of the bigger

00:10:25,400 --> 00:10:31,430
concerns we had so we had slightly

00:10:28,970 --> 00:10:36,470
different sets of issues with challenges

00:10:31,430 --> 00:10:40,670
with the two operations models for full

00:10:36,470 --> 00:10:43,190
cycle developers because the the teams

00:10:40,670 --> 00:10:46,460
deal with all the orchestration and all

00:10:43,190 --> 00:10:47,770
the infrastructure and they deal with a

00:10:46,460 --> 00:10:50,170
lot of services

00:10:47,770 --> 00:10:53,350
the biggest challenge for them was the

00:10:50,170 --> 00:10:55,810
toil of managing pipelines there's if

00:10:53,350 --> 00:10:57,670
you have two maybe three applications

00:10:55,810 --> 00:10:59,350
might not be too bad but when you start

00:10:57,670 --> 00:11:01,300
getting more and more services when it's

00:10:59,350 --> 00:11:05,260
it's a big toll on teams to keep

00:11:01,300 --> 00:11:07,300
maintaining those pipelines and then

00:11:05,260 --> 00:11:10,180
eventually it might lead to drifts over

00:11:07,300 --> 00:11:12,280
time between services let's say you have

00:11:10,180 --> 00:11:14,680
a new instance type coming out new AWS

00:11:12,280 --> 00:11:16,390
instance type then you need to change

00:11:14,680 --> 00:11:18,010
all your deploy pipelines to users and

00:11:16,390 --> 00:11:20,830
your instance type because it's cheaper

00:11:18,010 --> 00:11:22,060
and it's faster it's more powerful and

00:11:20,830 --> 00:11:23,770
then you're changing your first up your

00:11:22,060 --> 00:11:25,660
second output you forgot in your fur tab

00:11:23,770 --> 00:11:30,160
so eventually you'll start seeing drifts

00:11:25,660 --> 00:11:34,450
in your pipelines and then as a result

00:11:30,160 --> 00:11:36,730
of that you will not see best practices

00:11:34,450 --> 00:11:38,860
use consistently across services because

00:11:36,730 --> 00:11:40,630
you might add best serve best practices

00:11:38,860 --> 00:11:43,630
in most of your apps but again you

00:11:40,630 --> 00:11:44,770
forget it in one app and then you don't

00:11:43,630 --> 00:11:46,720
have your best practice in place for

00:11:44,770 --> 00:11:48,370
instance you would not want someone to

00:11:46,720 --> 00:11:50,260
push the production on a Friday at 6

00:11:48,370 --> 00:11:53,220
p.m. when everyone's at happy hour

00:11:50,260 --> 00:11:55,960
not that might not be great on the

00:11:53,220 --> 00:11:57,580
centralized operation side you have a

00:11:55,960 --> 00:12:00,190
slightly different we have a slightly

00:11:57,580 --> 00:12:02,080
different set of challenges the upside

00:12:00,190 --> 00:12:04,660
bad we had is we provided the platform

00:12:02,080 --> 00:12:06,610
and we provided the orchestration and we

00:12:04,660 --> 00:12:10,270
were only dealing with a small set of

00:12:06,610 --> 00:12:13,810
pipelines about a handful so that makes

00:12:10,270 --> 00:12:17,920
things easier but we still run into a

00:12:13,810 --> 00:12:19,810
problem that pipelines need to be cloned

00:12:17,920 --> 00:12:20,620
across applications so we get back to

00:12:19,810 --> 00:12:21,460
the same problem that I mentioned

00:12:20,620 --> 00:12:23,530
earlier

00:12:21,460 --> 00:12:25,120
you got your pipelines you get a new

00:12:23,530 --> 00:12:26,650
service on board and you need to make

00:12:25,120 --> 00:12:27,970
sure that this service also gets a new

00:12:26,650 --> 00:12:30,640
pipeline so maybe we need to clone them

00:12:27,970 --> 00:12:35,380
so again we can use tooling but it's a

00:12:30,640 --> 00:12:37,360
little inconvenient and then that

00:12:35,380 --> 00:12:40,510
platform is still in active development

00:12:37,360 --> 00:12:42,400
and we're onboarding new teams on it so

00:12:40,510 --> 00:12:44,560
we we find issues along the way in our

00:12:42,400 --> 00:12:46,480
pipelines and we need to fix them or we

00:12:44,560 --> 00:12:48,640
need to add new features for instance a

00:12:46,480 --> 00:12:51,640
few months back we added auto scaling

00:12:48,640 --> 00:12:54,130
support to our containers and we needed

00:12:51,640 --> 00:12:55,630
to get to get that rollout to every

00:12:54,130 --> 00:12:58,210
single application and we're when you're

00:12:55,630 --> 00:12:59,750
talking about dozens of applications it

00:12:58,210 --> 00:13:05,120
you want to make sure that every

00:12:59,750 --> 00:13:06,830
one gets about update now that's when

00:13:05,120 --> 00:13:07,370
match poplin templates came to the

00:13:06,830 --> 00:13:10,820
rescue

00:13:07,370 --> 00:13:14,060
so we're fairly early adopters of MVT

00:13:10,820 --> 00:13:15,230
within Netflix and luckily the spinnaker

00:13:14,060 --> 00:13:19,280
team helped us a lot

00:13:15,230 --> 00:13:22,250
deal with or helped us a lot go on to

00:13:19,280 --> 00:13:23,930
manage poplin templates and make it so

00:13:22,250 --> 00:13:26,420
that we could implement our use cases

00:13:23,930 --> 00:13:30,500
and you can ask rob synergy will tell

00:13:26,420 --> 00:13:31,610
you that I him quite a lot so

00:13:30,500 --> 00:13:34,700
what are you getting with manage public

00:13:31,610 --> 00:13:37,340
templates first and foremost you can

00:13:34,700 --> 00:13:38,600
define your templates just once and

00:13:37,340 --> 00:13:41,270
reuse them across all your applications

00:13:38,600 --> 00:13:43,790
so instead of having one deploy pipeline

00:13:41,270 --> 00:13:47,360
but you are going to have to clone and

00:13:43,790 --> 00:13:50,270
in five applications that means you have

00:13:47,360 --> 00:13:51,920
to do to manage five to five pipelines

00:13:50,270 --> 00:13:54,110
which are essentially the same but there

00:13:51,920 --> 00:13:56,060
are different Jason blocks in different

00:13:54,110 --> 00:13:57,710
applications now you have one single

00:13:56,060 --> 00:14:00,680
template that you can use in this five

00:13:57,710 --> 00:14:03,380
applications so that central place will

00:14:00,680 --> 00:14:05,140
be using all these pipelines so when you

00:14:03,380 --> 00:14:09,280
do a change in your template all

00:14:05,140 --> 00:14:09,280
applications will get the benefits of it

00:14:10,690 --> 00:14:16,700
there's also a handy CLI to convert your

00:14:13,940 --> 00:14:18,770
existing pipelines into templates if you

00:14:16,700 --> 00:14:20,630
want to use about you don't have to

00:14:18,770 --> 00:14:22,100
create your templates from scratch you

00:14:20,630 --> 00:14:23,570
can use your current pipelines and just

00:14:22,100 --> 00:14:26,750
convert them into templates you will get

00:14:23,570 --> 00:14:29,050
a llamó file which is what templates are

00:14:26,750 --> 00:14:29,050
defining

00:14:31,370 --> 00:14:37,580
there are concepts of inheritance

00:14:33,920 --> 00:14:39,260
modules and partials inheritance pretty

00:14:37,580 --> 00:14:42,230
straightforward you can define a

00:14:39,260 --> 00:14:44,270
template and that connects another

00:14:42,230 --> 00:14:45,650
template can inherit from it so it can

00:14:44,270 --> 00:14:48,740
use anything that is defined in my

00:14:45,650 --> 00:14:51,110
template modules you can think of them

00:14:48,740 --> 00:14:52,850
like single stages that are

00:14:51,110 --> 00:14:56,240
parameterised and that you can use

00:14:52,850 --> 00:14:59,870
within templates and partials are like

00:14:56,240 --> 00:15:03,650
sets of stages I'm going to show you a

00:14:59,870 --> 00:15:05,089
quick example I collapse the code to

00:15:03,650 --> 00:15:06,500
hide a bit of the details because

00:15:05,089 --> 00:15:09,110
they're not so interesting but at the

00:15:06,500 --> 00:15:12,110
top you can see the partial which

00:15:09,110 --> 00:15:14,000
defines three stages which is

00:15:12,110 --> 00:15:16,540
configuring the auto scaling metrics

00:15:14,000 --> 00:15:19,040
which is forwarding to cloud watch and

00:15:16,540 --> 00:15:20,690
then it creates two scanning policies a

00:15:19,040 --> 00:15:22,820
target tracking force getting up and a

00:15:20,690 --> 00:15:25,730
stat scaling for scaling down and at the

00:15:22,820 --> 00:15:28,010
bottom you see with modules which are

00:15:25,730 --> 00:15:30,200
basically the the single stages but we

00:15:28,010 --> 00:15:31,850
define so deploying a cluster training

00:15:30,200 --> 00:15:34,910
bus that metric forwarding to cloud

00:15:31,850 --> 00:15:37,220
watch target tracking and step scaling

00:15:34,910 --> 00:15:39,800
as you can see in that partial we

00:15:37,220 --> 00:15:43,270
reference the module from but we defined

00:15:39,800 --> 00:15:43,270
below create metric forward

00:15:48,460 --> 00:15:53,589
there's also a more advanced way to to

00:15:51,850 --> 00:15:56,320
have conditional stages so you might be

00:15:53,589 --> 00:15:58,029
familiar with having conditional stages

00:15:56,320 --> 00:16:01,000
where we define an expression and then

00:15:58,029 --> 00:16:03,250
the execution is skipped but you still

00:16:01,000 --> 00:16:05,680
see that stage in the graph what we've

00:16:03,250 --> 00:16:07,300
matched pipeline templates you can you

00:16:05,680 --> 00:16:09,100
can actually have that stage completely

00:16:07,300 --> 00:16:12,550
removed out of a graph so when you have

00:16:09,100 --> 00:16:14,320
complex pipelines or very big pipelines

00:16:12,550 --> 00:16:16,209
but it makes it easier to reason about

00:16:14,320 --> 00:16:17,920
the whole pipeline execution if you

00:16:16,209 --> 00:16:22,959
remove the stages but are not relevant

00:16:17,920 --> 00:16:25,390
to that execution you can also use

00:16:22,959 --> 00:16:26,950
variables optionally type so it's kind

00:16:25,390 --> 00:16:32,220
of like parameters but they mostly come

00:16:26,950 --> 00:16:35,290
into place with modules and partials and

00:16:32,220 --> 00:16:39,100
you also get a very powerful expressions

00:16:35,290 --> 00:16:40,839
language which is Jinja you can do so

00:16:39,100 --> 00:16:43,320
I'll show you an example a little later

00:16:40,839 --> 00:16:49,300
but you can craft really really complex

00:16:43,320 --> 00:16:52,959
pipelines with that and now we'll do

00:16:49,300 --> 00:16:54,790
demo so here's a simple application you

00:16:52,959 --> 00:16:56,980
want to deploy to adjust it deploying a

00:16:54,790 --> 00:16:59,520
service to production has nothing fancy

00:16:56,980 --> 00:17:01,930
just one stage deployed to us missed one

00:16:59,520 --> 00:17:05,470
but now let's say once you are auto

00:17:01,930 --> 00:17:10,179
scaling to that pipeline so we're going

00:17:05,470 --> 00:17:11,860
to go in the invent mplet llamo this is

00:17:10,179 --> 00:17:14,470
the template I showed you earlier it's a

00:17:11,860 --> 00:17:17,559
little snippet of it the auto scaling is

00:17:14,470 --> 00:17:20,290
commented out so we're gonna enable the

00:17:17,559 --> 00:17:22,780
auto scaling in the template commented

00:17:20,290 --> 00:17:25,150
in and now we're going to publish my

00:17:22,780 --> 00:17:30,090
template so we wrote a handy little CLI

00:17:25,150 --> 00:17:33,070
tool to publish the template hit enter

00:17:30,090 --> 00:17:34,510
and we're gonna publish it and you can

00:17:33,070 --> 00:17:36,220
see it's already published a spinnaker

00:17:34,510 --> 00:17:37,720
and now it's available to all

00:17:36,220 --> 00:17:40,300
applications that are using better

00:17:37,720 --> 00:17:44,670
referencing but template ID so now let's

00:17:40,300 --> 00:17:44,670
go back to spinnaker reload the pipeline

00:17:44,760 --> 00:17:49,690
and now you can see that we added both

00:17:47,440 --> 00:17:51,940
free auto scaling stages so creating the

00:17:49,690 --> 00:17:54,269
metric forwarding and the scaling

00:17:51,940 --> 00:17:55,799
policies

00:17:54,269 --> 00:17:58,349
but now we want to do a little more

00:17:55,799 --> 00:18:01,349
right now we don't have any restriction

00:17:58,349 --> 00:18:04,649
time window windows for deployment and

00:18:01,349 --> 00:18:07,159
we want to add that best practice so

00:18:04,649 --> 00:18:15,330
we're going to go back to the template

00:18:07,159 --> 00:18:17,669
in a second and we're going to uncomment

00:18:15,330 --> 00:18:19,440
that restriction time windows and set it

00:18:17,669 --> 00:18:22,440
from 10:00 a.m. to 2:00 p.m. which is

00:18:19,440 --> 00:18:27,259
before peaking us missed one so we save

00:18:22,440 --> 00:18:30,709
the template we publish it to spinnaker

00:18:27,259 --> 00:18:33,479
and again it's fairly quick

00:18:30,709 --> 00:18:38,219
now it's published we can go back to our

00:18:33,479 --> 00:18:42,119
application we reload the pipeline and

00:18:38,219 --> 00:18:44,339
now you can see shortly that we have the

00:18:42,119 --> 00:18:48,029
time restriction window enabled for this

00:18:44,339 --> 00:18:50,899
pipeline which is from 10:00 a.m. to

00:18:48,029 --> 00:18:50,899
2:00 p.m. on weekdays

00:18:57,179 --> 00:19:04,019
so what did we learn on our journey to

00:18:59,429 --> 00:19:09,359
using manage pop line templates we got a

00:19:04,019 --> 00:19:10,799
lot of benefits from them going back to

00:19:09,359 --> 00:19:13,830
what I said earlier and the challenges

00:19:10,799 --> 00:19:15,690
that we faced we have now fewer pipeline

00:19:13,830 --> 00:19:17,519
implementations to maintain so the toil

00:19:15,690 --> 00:19:18,119
of managing pipeline is drastically

00:19:17,519 --> 00:19:20,729
reduced

00:19:18,119 --> 00:19:23,070
instead of having again let's say ten

00:19:20,729 --> 00:19:24,690
different pipelines that are technically

00:19:23,070 --> 00:19:26,369
the same but there are different JSON

00:19:24,690 --> 00:19:27,839
blobs and I just have one single

00:19:26,369 --> 00:19:34,289
template and you're reusing it across

00:19:27,839 --> 00:19:36,299
your ten applications now pop line are

00:19:34,289 --> 00:19:37,979
also consistent across services because

00:19:36,299 --> 00:19:39,799
if they all reference that one template

00:19:37,979 --> 00:19:41,849
as soon as you publish your template

00:19:39,799 --> 00:19:43,440
when it's available to all the

00:19:41,849 --> 00:19:45,830
applications and there's no drift

00:19:43,440 --> 00:19:45,830
anymore

00:19:48,960 --> 00:19:53,520
and there's a lot about you can reuse

00:19:51,000 --> 00:19:58,200
your best practices across multiple

00:19:53,520 --> 00:20:00,630
applications it's much easier to to to

00:19:58,200 --> 00:20:02,370
use back best practices across multiple

00:20:00,630 --> 00:20:04,320
services and across multiple teams

00:20:02,370 --> 00:20:06,480
because we can put them in both central

00:20:04,320 --> 00:20:08,940
places and everyone uses them so we can

00:20:06,480 --> 00:20:13,830
add those restriction windows or we can

00:20:08,940 --> 00:20:15,600
add those this auto-scaling and we can

00:20:13,830 --> 00:20:18,510
also define common workflows we have a

00:20:15,600 --> 00:20:20,820
canary analysis template or you have a

00:20:18,510 --> 00:20:22,500
CI template and we they can be reused

00:20:20,820 --> 00:20:23,700
across different teams rather than

00:20:22,500 --> 00:20:32,340
having every team to find their own

00:20:23,700 --> 00:20:34,200
templates their own pipelines again very

00:20:32,340 --> 00:20:37,800
powerful expression languages you can

00:20:34,200 --> 00:20:39,300
combine so you get Jinja with with match

00:20:37,800 --> 00:20:40,950
pipeline templates but you can also

00:20:39,300 --> 00:20:43,050
combine that with a spring expression

00:20:40,950 --> 00:20:45,060
language from spinnaker and if you

00:20:43,050 --> 00:20:47,610
combine both you can have very very

00:20:45,060 --> 00:20:49,980
powerful and very complex and dynamic

00:20:47,610 --> 00:20:54,090
pipelines again I'll show you an example

00:20:49,980 --> 00:20:58,350
shortly that helped us solve a lot of

00:20:54,090 --> 00:21:00,600
our use cases also get better

00:20:58,350 --> 00:21:03,150
collaboration on the on pipeline

00:21:00,600 --> 00:21:05,280
templates so for that platform that I

00:21:03,150 --> 00:21:07,980
mentioned we started that original set

00:21:05,280 --> 00:21:10,680
of pipelines for the platform that teams

00:21:07,980 --> 00:21:13,290
or client teams are using but the team

00:21:10,680 --> 00:21:15,630
that is operating that platform also

00:21:13,290 --> 00:21:17,430
contributed to adding features to the

00:21:15,630 --> 00:21:19,410
pipeline templates also figuring out

00:21:17,430 --> 00:21:21,600
bugs and fixing them because we had but

00:21:19,410 --> 00:21:23,070
one central place where everyone could

00:21:21,600 --> 00:21:24,840
work on a template on the pipeline

00:21:23,070 --> 00:21:32,790
template and then we could grow it out

00:21:24,840 --> 00:21:35,370
to users what's best and as you can see

00:21:32,790 --> 00:21:39,120
earlier from the demo the great thing

00:21:35,370 --> 00:21:40,770
you get with that it's very easy to very

00:21:39,120 --> 00:21:43,020
easy and very fast to roll out your

00:21:40,770 --> 00:21:44,940
changes so you want to test out a fix or

00:21:43,020 --> 00:21:47,460
push out a fix or add a new feature

00:21:44,940 --> 00:21:50,010
quickly you just publish your template

00:21:47,460 --> 00:21:51,930
and it's available to everyone and on

00:21:50,010 --> 00:21:54,120
the flip side of that if you break

00:21:51,930 --> 00:21:58,490
something for some reason then you can

00:21:54,120 --> 00:21:58,490
quickly roll back and unblock everyone

00:21:58,980 --> 00:22:05,080
but of course it was not all rosy we

00:22:01,960 --> 00:22:10,270
also came across across a few

00:22:05,080 --> 00:22:12,940
shortcomings along the way so there's no

00:22:10,270 --> 00:22:15,280
notion of there's no first-class notion

00:22:12,940 --> 00:22:18,220
of versioning or status type what I mean

00:22:15,280 --> 00:22:19,870
by that is that there's no visioning

00:22:18,220 --> 00:22:22,060
when you publish a template you

00:22:19,870 --> 00:22:24,310
overwrite your previous version and you

00:22:22,060 --> 00:22:26,220
can you can go back but you can't go

00:22:24,310 --> 00:22:28,690
back as a first-class thing in spinnaker

00:22:26,220 --> 00:22:31,090
or if there's no Status tab you don't

00:22:28,690 --> 00:22:34,630
have a notion of snap short or candidate

00:22:31,090 --> 00:22:36,880
or release so what we did for that is

00:22:34,630 --> 00:22:39,100
that we build custom versioning in the

00:22:36,880 --> 00:22:41,800
template ID so we have tooling an

00:22:39,100 --> 00:22:43,510
orchestration that will notice that

00:22:41,800 --> 00:22:47,170
there's a change in the pipeline and we

00:22:43,510 --> 00:22:50,500
can wrap up the patch version and we go

00:22:47,170 --> 00:22:53,080
to all the applications and change the

00:22:50,500 --> 00:22:55,660
version that is the suffix to that

00:22:53,080 --> 00:22:58,300
pipeline ID you can see here the pub

00:22:55,660 --> 00:23:00,370
line IDs spinnaker summit 1:02 if you

00:22:58,300 --> 00:23:01,570
need it you have your patch for that we

00:23:00,370 --> 00:23:02,710
have the tooling and orchestration in

00:23:01,570 --> 00:23:05,020
place that we're going all these

00:23:02,710 --> 00:23:08,680
pipeline configurations and we'll change

00:23:05,020 --> 00:23:10,870
the ID from 1 0 2 to 1 0 3 and then

00:23:08,680 --> 00:23:14,710
these pipeline these pipelines will get

00:23:10,870 --> 00:23:16,840
that update another shortcoming was that

00:23:14,710 --> 00:23:19,690
there is no first-class notion for

00:23:16,840 --> 00:23:20,680
configuration of the rights what do I

00:23:19,690 --> 00:23:23,950
mean that that's a little more

00:23:20,680 --> 00:23:25,990
complicated so you have two apps they do

00:23:23,950 --> 00:23:27,580
different things one is just basically

00:23:25,990 --> 00:23:28,990
let's say it's just a cache and the

00:23:27,580 --> 00:23:31,900
other thing is doing very computing

00:23:28,990 --> 00:23:33,970
conceived intensive workloads so you

00:23:31,900 --> 00:23:35,650
don't you can reuse the same template

00:23:33,970 --> 00:23:38,560
but inherently they won't have the same

00:23:35,650 --> 00:23:40,780
requirements you can the first app might

00:23:38,560 --> 00:23:43,510
just need 10 instances and it's fine

00:23:40,780 --> 00:23:45,910
with 2 CPUs but the second app needs 100

00:23:43,510 --> 00:23:47,350
instances and 8 CPUs and you can't put

00:23:45,910 --> 00:23:50,260
that in your template because everyone

00:23:47,350 --> 00:23:53,110
gets it so you have to put in your

00:23:50,260 --> 00:23:56,130
pipeline configuration but then we add

00:23:53,110 --> 00:23:59,110
the extra use case that we wanted to say

00:23:56,130 --> 00:24:00,880
we want to you we provide defaults but

00:23:59,110 --> 00:24:04,300
you can use or you can specify your own

00:24:00,880 --> 00:24:06,220
overrides but we wanted to say also if

00:24:04,300 --> 00:24:08,500
you need to change something at runtime

00:24:06,220 --> 00:24:10,119
say you want to deploy instead of you

00:24:08,500 --> 00:24:12,309
specify their hundred instances but

00:24:10,119 --> 00:24:14,799
want to deploy 150 instances for some

00:24:12,309 --> 00:24:19,179
reason then we want you to be able to do

00:24:14,799 --> 00:24:19,989
that and how that looks like is so for

00:24:19,179 --> 00:24:23,229
that sorry

00:24:19,989 --> 00:24:25,899
we built custom over or custom built we

00:24:23,229 --> 00:24:27,489
build custom overrides as variables in

00:24:25,899 --> 00:24:30,549
pipeline configurations so that looks

00:24:27,489 --> 00:24:33,309
like this so this is an expression to

00:24:30,549 --> 00:24:35,409
get the number of instances so as you

00:24:33,309 --> 00:24:39,329
can see we first look at the trigger

00:24:35,409 --> 00:24:41,979
parameters of a parameter called

00:24:39,329 --> 00:24:45,339
instances if that is defined we will use

00:24:41,979 --> 00:24:47,079
that value otherwise we'll take a look

00:24:45,339 --> 00:24:48,999
at the resource over rice but you define

00:24:47,079 --> 00:24:51,489
for your app and we'll use that instead

00:24:48,999 --> 00:24:53,589
and if you didn't specify anything so

00:24:51,489 --> 00:24:55,539
you didn't pass in instances as a

00:24:53,589 --> 00:24:57,099
parameter or define overrides when you

00:24:55,539 --> 00:24:59,319
will use the defaults but we provide in

00:24:57,099 --> 00:25:00,669
the template and how about how that

00:24:59,319 --> 00:25:02,829
looks like you know the pipeline config

00:25:00,669 --> 00:25:05,379
is something like this when you define

00:25:02,829 --> 00:25:07,599
your variables and you can create your

00:25:05,379 --> 00:25:09,519
resource overrides and say exactly what

00:25:07,599 --> 00:25:17,169
you want here's the instance counts and

00:25:09,519 --> 00:25:20,679
the CPU count so one of the tricky

00:25:17,169 --> 00:25:24,509
things with MPT was that well it's very

00:25:20,679 --> 00:25:24,509
powerful it's also harder to debug

00:25:24,629 --> 00:25:30,069
so I mentioned we have you have the

00:25:27,999 --> 00:25:31,959
ability to combine Jinja and spell and

00:25:30,069 --> 00:25:34,479
it's great you can do very complex

00:25:31,959 --> 00:25:37,119
pipelines and and solve a lot of your

00:25:34,479 --> 00:25:39,459
use cases but they are also very hard to

00:25:37,119 --> 00:25:41,019
read and spotting errors in those

00:25:39,459 --> 00:25:42,249
expressions can be very tricky

00:25:41,019 --> 00:25:44,169
it almost looks like the code I showed

00:25:42,249 --> 00:25:46,839
you earlier phoner when you were

00:25:44,169 --> 00:25:50,199
developing application so we were we had

00:25:46,839 --> 00:25:52,659
cases where we were missing a bracket

00:25:50,199 --> 00:25:54,939
somewhere and it was really hard to spot

00:25:52,659 --> 00:25:56,589
where and sometimes were valid when you

00:25:54,939 --> 00:25:59,259
combine ginger and spell the validation

00:25:56,589 --> 00:26:01,659
does in some cases didn't work or it

00:25:59,259 --> 00:26:03,009
validated the pipeline but the pipeline

00:26:01,659 --> 00:26:05,109
was in fact broken and it took us a

00:26:03,009 --> 00:26:08,009
while to figure out where exactly the

00:26:05,109 --> 00:26:08,009
bracket was missing

00:26:09,930 --> 00:26:14,590
so errormsgs wasn't we're not always

00:26:12,700 --> 00:26:19,210
helpful more specifically in about one

00:26:14,590 --> 00:26:21,010
case where we had an error and he told

00:26:19,210 --> 00:26:22,630
us the template was invalid but we had a

00:26:21,010 --> 00:26:25,300
hard time finding where exactly in the

00:26:22,630 --> 00:26:27,750
template where info change V air was

00:26:25,300 --> 00:26:27,750
wrong

00:26:28,170 --> 00:26:34,450
and now you're not dealing with

00:26:32,020 --> 00:26:36,010
pipelines as Jason you can do if you

00:26:34,450 --> 00:26:37,540
need to change something and test it

00:26:36,010 --> 00:26:39,940
quickly you can't just go in the

00:26:37,540 --> 00:26:41,950
pipeline out of stage in the UI or edit

00:26:39,940 --> 00:26:44,830
with Jason you now have to go to your

00:26:41,950 --> 00:26:47,560
template definition and publish it and

00:26:44,830 --> 00:26:48,910
make sure that you and you need to be

00:26:47,560 --> 00:26:52,360
aware about when you publish it it gets

00:26:48,910 --> 00:26:55,510
available to everyone so which brings me

00:26:52,360 --> 00:26:58,780
to the next clip so first this is one of

00:26:55,510 --> 00:27:00,370
the expressions of a combines ginger and

00:26:58,780 --> 00:27:02,650
spat expression this one is not too bad

00:27:00,370 --> 00:27:04,150
this is just to resolve a server group

00:27:02,650 --> 00:27:08,110
name but we can use to create the

00:27:04,150 --> 00:27:09,490
auto-scaling configs and have way worse

00:27:08,110 --> 00:27:16,690
expressions but i'm not going to show

00:27:09,490 --> 00:27:20,650
them today so testing is tricky again as

00:27:16,690 --> 00:27:22,660
mentioned you can when you publish a

00:27:20,650 --> 00:27:25,510
template it's it's available to everyone

00:27:22,660 --> 00:27:27,640
you override the previous version so you

00:27:25,510 --> 00:27:30,130
need to be aware but you can break

00:27:27,640 --> 00:27:34,210
things so make sure you put a good

00:27:30,130 --> 00:27:36,040
testing methodology in place ideally

00:27:34,210 --> 00:27:38,740
you'll have some orchestration that

00:27:36,040 --> 00:27:41,140
we'll look at so you have ideally you

00:27:38,740 --> 00:27:43,300
have your templates in in gates

00:27:41,140 --> 00:27:44,860
somewhere in version control so you can

00:27:43,300 --> 00:27:47,170
roll back to a previous known version

00:27:44,860 --> 00:27:49,690
and you have orchestration in place that

00:27:47,170 --> 00:27:52,660
will on a good trigger will take the

00:27:49,690 --> 00:27:54,280
template push it out change its template

00:27:52,660 --> 00:27:58,450
ID push it out to something like -

00:27:54,280 --> 00:28:00,700
snapshot and you have integration tests

00:27:58,450 --> 00:28:02,680
in place that run against those snapshot

00:28:00,700 --> 00:28:05,160
templates and that can verify that your

00:28:02,680 --> 00:28:07,660
pipeline executions are still fine

00:28:05,160 --> 00:28:09,250
so we have such an integration test and

00:28:07,660 --> 00:28:11,590
when we see one of these tests breaking

00:28:09,250 --> 00:28:14,850
the pipeline is not running then we see

00:28:11,590 --> 00:28:14,850
we can see that we broke something

00:28:17,160 --> 00:28:24,490
and again you can when you push

00:28:20,980 --> 00:28:26,860
something everyone gets you update so if

00:28:24,490 --> 00:28:29,590
you are doing critical changes think

00:28:26,860 --> 00:28:31,150
about a strategy for slow robots one of

00:28:29,590 --> 00:28:33,850
the things we did was adding the

00:28:31,150 --> 00:28:35,560
versioning where we could slowly change

00:28:33,850 --> 00:28:37,480
our version for a few apps and if we

00:28:35,560 --> 00:28:40,930
notice but we didn't break anyone then

00:28:37,480 --> 00:28:43,360
we could just ramp up via option for

00:28:40,930 --> 00:28:45,970
everyone and the same thing make sure

00:28:43,360 --> 00:28:47,740
that if all your tests for some reason

00:28:45,970 --> 00:28:49,240
don't catch and you don't catch errors

00:28:47,740 --> 00:28:52,030
but you're introduced with your new

00:28:49,240 --> 00:28:53,560
template version then make sure you have

00:28:52,030 --> 00:28:55,060
a good way to rollback that you can go

00:28:53,560 --> 00:28:57,430
back to a previous version hopefully in

00:28:55,060 --> 00:28:59,290
source control or some other way but you

00:28:57,430 --> 00:29:05,830
need to be able to unblock your users

00:28:59,290 --> 00:29:07,540
quickly and finally be aware that you

00:29:05,830 --> 00:29:09,220
can break everyone and make people very

00:29:07,540 --> 00:29:12,010
angry because their problems are no

00:29:09,220 --> 00:29:14,500
longer working so this has really

00:29:12,010 --> 00:29:17,920
happened but we very occasionally we've

00:29:14,500 --> 00:29:19,870
broken some templates and it blocked

00:29:17,920 --> 00:29:22,030
some users luckily not that long because

00:29:19,870 --> 00:29:24,030
we were able to roll that quickly we're

00:29:22,030 --> 00:29:26,290
able to detect the problem quickly and

00:29:24,030 --> 00:29:27,820
even though some users were trying to

00:29:26,290 --> 00:29:29,680
run it at the same time as we detected

00:29:27,820 --> 00:29:31,840
the problem we could do a quick rollback

00:29:29,680 --> 00:29:37,690
and I'd block every one so if I didn't

00:29:31,840 --> 00:29:40,060
come at us with a Punisher so overall

00:29:37,690 --> 00:29:43,710
the benefits we got from manage pipeline

00:29:40,060 --> 00:29:45,700
templates greatly outweigh the

00:29:43,710 --> 00:29:48,190
shortcomings that we found along the way

00:29:45,700 --> 00:29:53,140
and the spiracle team was very helpful

00:29:48,190 --> 00:29:56,110
in getting us to to put our all our use

00:29:53,140 --> 00:29:58,030
cases in place so we're very exciting to

00:29:56,110 --> 00:30:01,210
see where manage pop line templates are

00:29:58,030 --> 00:30:03,070
going to go very excited about the

00:30:01,210 --> 00:30:04,780
declarative spinnaker but it's coming

00:30:03,070 --> 00:30:08,290
and tomorrow will be a talk by the to

00:30:04,780 --> 00:30:10,480
Rob's that 10:45 I think so I highly

00:30:08,290 --> 00:30:13,830
encourage you to attend it I'll be there

00:30:10,480 --> 00:30:16,510
I hope you learned something today that

00:30:13,830 --> 00:30:19,600
some of the experiences we had resonated

00:30:16,510 --> 00:30:20,640
with you and on that note thank you very

00:30:19,600 --> 00:30:26,110
much

00:30:20,640 --> 00:30:28,170
[Applause]

00:30:26,110 --> 00:30:28,170

YouTube URL: https://www.youtube.com/watch?v=b26i7jP_pBE


