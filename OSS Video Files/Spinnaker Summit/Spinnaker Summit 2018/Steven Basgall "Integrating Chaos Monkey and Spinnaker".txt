Title: Steven Basgall "Integrating Chaos Monkey and Spinnaker"
Publication date: 2018-10-27
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,270 --> 00:00:05,380
[Music]

00:00:09,820 --> 00:00:13,259
[Music]

00:00:16,789 --> 00:00:22,560
cool thank you all so much for coming

00:00:20,400 --> 00:00:25,949
my name is Stephen Bosco I'm a senior

00:00:22,560 --> 00:00:29,070
DevOps engineer at koko air we've been

00:00:25,949 --> 00:00:32,009
using spinnaker since it was open

00:00:29,070 --> 00:00:35,399
sourced so that's when I started this

00:00:32,009 --> 00:00:37,770
journey we kind of all learned AWS at

00:00:35,399 --> 00:00:39,629
the same time so I'm sure there's a lot

00:00:37,770 --> 00:00:45,660
of people here who are in a similar

00:00:39,629 --> 00:00:49,050
situation now Pete mentioned when the

00:00:45,660 --> 00:00:51,539
conference opened about community and

00:00:49,050 --> 00:00:55,829
what we can what we can give and give to

00:00:51,539 --> 00:00:57,480
each other and all that so I created my

00:00:55,829 --> 00:01:00,030
Twitter account in 2009 and I've

00:00:57,480 --> 00:01:02,250
actually never tweeted but this morning

00:01:00,030 --> 00:01:06,180
this morning I I went and reset the

00:01:02,250 --> 00:01:07,530
password and and logged in because the

00:01:06,180 --> 00:01:10,200
spinnaker community has helped me out so

00:01:07,530 --> 00:01:12,960
much I want to be available to help out

00:01:10,200 --> 00:01:14,490
other people so if if you want to tell

00:01:12,960 --> 00:01:15,659
me how I did or anything at all

00:01:14,490 --> 00:01:17,790
afterwards

00:01:15,659 --> 00:01:19,200
I guess I don't know how it works I

00:01:17,790 --> 00:01:23,939
guess you can send it to that and I'll

00:01:19,200 --> 00:01:29,490
see it somehow so so please I'd love to

00:01:23,939 --> 00:01:31,020
hear from people we're gonna talk today

00:01:29,490 --> 00:01:35,430
about integrating chaos monkey in

00:01:31,020 --> 00:01:37,860
spinnaker this was upgraded from in

00:01:35,430 --> 00:01:40,619
office hours talk in a lightning talk to

00:01:37,860 --> 00:01:42,030
this full session because of the

00:01:40,619 --> 00:01:45,060
interest so thank you

00:01:42,030 --> 00:01:47,970
it's great to see the conference

00:01:45,060 --> 00:01:50,520
organizers continuously adapting like

00:01:47,970 --> 00:01:53,130
what rooms based on demand things things

00:01:50,520 --> 00:01:55,560
are in so so the most people can have

00:01:53,130 --> 00:01:57,899
the opportunity to see the sessions they

00:01:55,560 --> 00:02:01,649
want so so thanks to the organizers for

00:01:57,899 --> 00:02:03,360
that too you may see in the description

00:02:01,649 --> 00:02:04,770
for this it mentions docker compose that

00:02:03,360 --> 00:02:07,229
was kind of something specifically for

00:02:04,770 --> 00:02:09,239
office hours I'm not going to talk about

00:02:07,229 --> 00:02:12,950
it too much we will discuss docker a

00:02:09,239 --> 00:02:16,010
little bit but I'm happy to

00:02:12,950 --> 00:02:20,359
explain that afterwards if anyone has

00:02:16,010 --> 00:02:21,829
any questions so this is basically we're

00:02:20,359 --> 00:02:24,230
going to cover today a really quick

00:02:21,829 --> 00:02:28,040
practical overview of chaos engineering

00:02:24,230 --> 00:02:30,859
the requirements to run chaos monkey how

00:02:28,040 --> 00:02:32,930
to configure chaos monkey what happens

00:02:30,859 --> 00:02:35,870
during the determination cycle when

00:02:32,930 --> 00:02:37,700
these chaos events are scheduled some

00:02:35,870 --> 00:02:40,579
ways to get started with observation and

00:02:37,700 --> 00:02:42,439
safety and then some alternate

00:02:40,579 --> 00:02:44,720
configurations other than what's

00:02:42,439 --> 00:02:48,579
suggested by the chaos monkey team as

00:02:44,720 --> 00:02:48,579
far as the deployment for chaos monkey

00:02:49,419 --> 00:02:55,609
so a quick raise of hands who it's it's

00:02:53,900 --> 00:02:57,560
a lot more popular now who's heard the

00:02:55,609 --> 00:03:02,900
term chaos engineering who's familiar

00:02:57,560 --> 00:03:04,669
with that so it's not everyone it's

00:03:02,900 --> 00:03:06,650
something that's been going on for a

00:03:04,669 --> 00:03:09,950
long time it's not a new thing it's

00:03:06,650 --> 00:03:15,260
basically failure analysis in this cloud

00:03:09,950 --> 00:03:18,919
world it it's it's helpful to determine

00:03:15,260 --> 00:03:20,389
that the state of a lot of the services

00:03:18,919 --> 00:03:24,769
you have deployed if you have complex

00:03:20,389 --> 00:03:28,010
complex services so if you've ever been

00:03:24,769 --> 00:03:30,470
akia sometimes they have like a

00:03:28,010 --> 00:03:33,379
demonstration of how they stress test

00:03:30,470 --> 00:03:36,079
their furniture so it's the same kind of

00:03:33,379 --> 00:03:37,220
idea they put it through cycles they put

00:03:36,079 --> 00:03:39,319
it through things that they expect to

00:03:37,220 --> 00:03:42,199
break it and they see how how strong it

00:03:39,319 --> 00:03:44,030
is automobile crash tests is something

00:03:42,199 --> 00:03:46,849
everyone's familiar with is the same

00:03:44,030 --> 00:03:49,759
kind of idea to they they take that car

00:03:46,849 --> 00:03:51,560
and terminate it and record record what

00:03:49,759 --> 00:03:54,620
happens and lots of instrumentation in

00:03:51,560 --> 00:03:57,590
there so they don't do that in

00:03:54,620 --> 00:03:59,419
production but they're they're required

00:03:57,590 --> 00:04:05,599
to do it even to sell cars that's how

00:03:59,419 --> 00:04:09,889
important it is so there's a few basic

00:04:05,599 --> 00:04:13,040
types of chaos exercises that can be

00:04:09,889 --> 00:04:15,349
done in a web services environment you

00:04:13,040 --> 00:04:17,329
have things like system loss which would

00:04:15,349 --> 00:04:19,849
just be a system disappearing kernel

00:04:17,329 --> 00:04:22,190
panic something like that a network

00:04:19,849 --> 00:04:24,830
partition you know maybe part of your

00:04:22,190 --> 00:04:25,820
network topology is unavailable and you

00:04:24,830 --> 00:04:27,850
want to make sure

00:04:25,820 --> 00:04:31,580
your applications can still be resilient

00:04:27,850 --> 00:04:34,910
things like disk failure extreme network

00:04:31,580 --> 00:04:39,320
or i/o latency these are all exercises

00:04:34,910 --> 00:04:44,180
that we can run applications through to

00:04:39,320 --> 00:04:46,700
see what happens so you have a lot of

00:04:44,180 --> 00:04:51,080
observation opportunities when you run

00:04:46,700 --> 00:04:54,140
these exercises you can see the behavior

00:04:51,080 --> 00:04:56,270
of other systems other than the one

00:04:54,140 --> 00:04:58,970
you're terminating and see if they had

00:04:56,270 --> 00:05:01,640
any adverse reaction to that termination

00:04:58,970 --> 00:05:04,100
event you can test your automatic

00:05:01,640 --> 00:05:06,130
service recovery there's the potential

00:05:04,100 --> 00:05:08,890
discover unknown or undocumented

00:05:06,130 --> 00:05:12,290
dependencies that will arise when

00:05:08,890 --> 00:05:15,020
services go down you have a chance to

00:05:12,290 --> 00:05:16,730
observe cascading failures and make sure

00:05:15,020 --> 00:05:19,420
that one service going down doesn't

00:05:16,730 --> 00:05:24,980
trigger everyone else's health check to

00:05:19,420 --> 00:05:26,630
also go down and then failure signatures

00:05:24,980 --> 00:05:28,880
which is something that's really

00:05:26,630 --> 00:05:32,180
important for like a knock or a sari or

00:05:28,880 --> 00:05:35,180
operations team just to know what what

00:05:32,180 --> 00:05:37,010
the log messages are for NOC what their

00:05:35,180 --> 00:05:39,680
what their environment looks like during

00:05:37,010 --> 00:05:42,050
an outage is fart visually to help them

00:05:39,680 --> 00:05:44,780
classify what's going on and respond

00:05:42,050 --> 00:05:47,060
faster and then you can tune alerting to

00:05:44,780 --> 00:05:48,980
so you know the exact time there's a

00:05:47,060 --> 00:05:52,070
record of the exact time this chaos

00:05:48,980 --> 00:05:54,560
termination was performed and you can

00:05:52,070 --> 00:05:56,900
see the the delay between your alert and

00:05:54,560 --> 00:05:59,600
how long it took and in work on the

00:05:56,900 --> 00:06:01,190
performance of that if you need to some

00:05:59,600 --> 00:06:02,840
ecommerce companies you know if you're

00:06:01,190 --> 00:06:04,790
if you're selling a million dollars a

00:06:02,840 --> 00:06:07,850
minute and you can shave a minute off

00:06:04,790 --> 00:06:10,070
that response time it could be worth

00:06:07,850 --> 00:06:16,090
trying to drive that alerting is as

00:06:10,070 --> 00:06:18,530
tightly as possible so you can begin by

00:06:16,090 --> 00:06:20,330
system losses is a great place to start

00:06:18,530 --> 00:06:22,970
because it kind of crudely covers all

00:06:20,330 --> 00:06:25,310
those other failure types and you can

00:06:22,970 --> 00:06:27,410
start as simply as manually terminating

00:06:25,310 --> 00:06:29,600
an instance right like you just go in

00:06:27,410 --> 00:06:31,580
and into your dev environment and you'll

00:06:29,600 --> 00:06:33,620
terminate an instance and then observe

00:06:31,580 --> 00:06:35,180
what happens and that's kind of like the

00:06:33,620 --> 00:06:38,570
first step that's the most primitive

00:06:35,180 --> 00:06:41,210
form form of doing it

00:06:38,570 --> 00:06:42,770
the next step after that is where chaos

00:06:41,210 --> 00:06:45,080
monkey can be really helpful and it's

00:06:42,770 --> 00:06:51,290
very easy to set up and gives you a

00:06:45,080 --> 00:06:55,250
quick quick value in this area so this

00:06:51,290 --> 00:06:59,930
is a diagram of hypothetical micro

00:06:55,250 --> 00:07:04,160
services some company might have this

00:06:59,930 --> 00:07:05,420
isn't my company just to be clear you

00:07:04,160 --> 00:07:07,580
know say you're sitting at your desk one

00:07:05,420 --> 00:07:10,940
day and the CTO comes up to you and

00:07:07,580 --> 00:07:12,920
shows you this diagram and they ask you

00:07:10,940 --> 00:07:15,560
to identify the risk of losing each

00:07:12,920 --> 00:07:18,350
service you can see there's there's a

00:07:15,560 --> 00:07:20,180
lot of services there right let's say

00:07:18,350 --> 00:07:22,810
the applications are written by a dozen

00:07:20,180 --> 00:07:26,150
teams some of them are written by

00:07:22,810 --> 00:07:31,850
contractors four years ago it could be a

00:07:26,150 --> 00:07:32,900
total of millions of lines of code how

00:07:31,850 --> 00:07:34,690
are you going to do it what are you are

00:07:32,900 --> 00:07:37,910
you gonna are you gonna tell the CTO

00:07:34,690 --> 00:07:40,820
this is impossible are you gonna tell

00:07:37,910 --> 00:07:43,160
the CTO it'll take 12 months or 24

00:07:40,820 --> 00:07:45,560
months or are you gonna say you need a

00:07:43,160 --> 00:07:49,010
resource on each team to answer code

00:07:45,560 --> 00:07:52,340
level questions about everything you

00:07:49,010 --> 00:07:56,480
know though those are some options I I

00:07:52,340 --> 00:07:58,850
think that with the discipline of chaos

00:07:56,480 --> 00:08:01,160
exercises you can get that information

00:07:58,850 --> 00:08:06,500
without having to deal with any of that

00:08:01,160 --> 00:08:09,320
stuff it will allow you to identify

00:08:06,500 --> 00:08:10,960
where defensive design needs to be added

00:08:09,320 --> 00:08:15,320
if one of these services would go down

00:08:10,960 --> 00:08:18,050
things like caching retries testing

00:08:15,320 --> 00:08:21,460
shields up and disabling non-essential

00:08:18,050 --> 00:08:23,870
features as a coping strategy to

00:08:21,460 --> 00:08:26,540
whatever turbulence they're experiencing

00:08:23,870 --> 00:08:28,700
in their environment once you start

00:08:26,540 --> 00:08:31,100
doing that you can iterate in tune that

00:08:28,700 --> 00:08:34,700
defensive design looking at things like

00:08:31,100 --> 00:08:39,740
timeouts retry logic fallback settings

00:08:34,700 --> 00:08:44,990
to try to remedy any service outage that

00:08:39,740 --> 00:08:48,770
these terminations cause so this is

00:08:44,990 --> 00:08:51,080
where chaos monkey comes in it provides

00:08:48,770 --> 00:08:51,860
a way to automate system loss in a

00:08:51,080 --> 00:08:55,579
low-friction

00:08:51,860 --> 00:09:00,290
in self-service way Netflix released

00:08:55,579 --> 00:09:02,540
chaos monkey won in 2011 it supported

00:09:00,290 --> 00:09:06,019
more failure types than just system loss

00:09:02,540 --> 00:09:07,640
or system termination and it was written

00:09:06,019 --> 00:09:10,610
in Java and part of a larger suite

00:09:07,640 --> 00:09:12,230
called called the simian army it

00:09:10,610 --> 00:09:14,149
included things like chaos gorilla that

00:09:12,230 --> 00:09:18,620
would even simulate the loss of an

00:09:14,149 --> 00:09:21,560
entire availability zone so not too long

00:09:18,620 --> 00:09:24,320
ago chaos monkey 2 was rewritten and go

00:09:21,560 --> 00:09:26,930
from a spinnaker perspective only

00:09:24,320 --> 00:09:30,230
instance termination is supported as far

00:09:26,930 --> 00:09:32,480
as the failure types but spinnaker

00:09:30,230 --> 00:09:35,329
integration was added and it supports a

00:09:32,480 --> 00:09:38,000
self-service model so I think that's

00:09:35,329 --> 00:09:41,300
more valuable than having 20 different

00:09:38,000 --> 00:09:42,920
you know chaos exercises to pick from

00:09:41,300 --> 00:09:45,490
and in trying to come up with your own

00:09:42,920 --> 00:09:48,500
way to decide who participates in that

00:09:45,490 --> 00:09:50,839
so like I mentioned before that system

00:09:48,500 --> 00:09:57,320
loss event really crudely replicates

00:09:50,839 --> 00:10:01,790
those other events to the requirements

00:09:57,320 --> 00:10:06,079
for chaos monkey are the go binary

00:10:01,790 --> 00:10:08,240
installed on an ec2 instance a my sequel

00:10:06,079 --> 00:10:12,290
database that's accessible to the

00:10:08,240 --> 00:10:14,180
instance where the termination

00:10:12,290 --> 00:10:18,680
scheduling in termination history are

00:10:14,180 --> 00:10:21,680
stored and then the chaos monkey

00:10:18,680 --> 00:10:26,690
instance needs network access to gates

00:10:21,680 --> 00:10:31,579
API so all all all the actions it does

00:10:26,690 --> 00:10:33,740
go through gate one thing to note here

00:10:31,579 --> 00:10:35,930
is that if you're thinking of taking

00:10:33,740 --> 00:10:38,449
chaos monkey and adding other failure

00:10:35,930 --> 00:10:42,199
types to it I know a lot of the other

00:10:38,449 --> 00:10:44,269
patterns out there have will use SSH or

00:10:42,199 --> 00:10:46,760
some kind of network connectivity to

00:10:44,269 --> 00:10:48,170
trigger that event you may not have

00:10:46,760 --> 00:10:50,449
network connectivity to your actual

00:10:48,170 --> 00:10:52,339
running applications from the chaos

00:10:50,449 --> 00:10:54,500
monkey instance itself if it's in some

00:10:52,339 --> 00:10:56,990
some other account so it's going to

00:10:54,500 --> 00:10:58,850
access gate and perform those operations

00:10:56,990 --> 00:11:01,339
like that so it's just something to

00:10:58,850 --> 00:11:04,010
consider if you're seeing this and

00:11:01,339 --> 00:11:04,830
interested in more than just termination

00:11:04,010 --> 00:11:13,170
events as

00:11:04,830 --> 00:11:16,980
as a Cass exercise the configuration is

00:11:13,170 --> 00:11:19,680
really simple you can pick its state

00:11:16,980 --> 00:11:22,710
which is leashed or Unleashed leashed is

00:11:19,680 --> 00:11:25,320
really helpful for debugging before you

00:11:22,710 --> 00:11:27,030
go live to make sure that chaos monkey

00:11:25,320 --> 00:11:28,530
is behaving like you think it's

00:11:27,030 --> 00:11:30,240
basically a dry run mode it will

00:11:28,530 --> 00:11:31,710
simulate what it's done and tell you

00:11:30,240 --> 00:11:33,510
what it would have done but not

00:11:31,710 --> 00:11:36,840
terminate not actually terminate the

00:11:33,510 --> 00:11:38,790
instances so Unleashed is the

00:11:36,840 --> 00:11:42,770
configuration state that will let chaos

00:11:38,790 --> 00:11:45,480
monkey do its full terminations and

00:11:42,770 --> 00:11:48,030
that's where you know you need to do

00:11:45,480 --> 00:11:49,500
that to get it to work you'll you'll

00:11:48,030 --> 00:11:51,030
need to configure your accounts - these

00:11:49,500 --> 00:11:54,090
are just the spinnaker names for your

00:11:51,030 --> 00:11:55,830
accounts you know certain in my case

00:11:54,090 --> 00:12:00,030
it's just it's things like dev stage

00:11:55,830 --> 00:12:02,720
prod like that and then you'll need your

00:12:00,030 --> 00:12:04,920
gate URL an authentication type for gate

00:12:02,720 --> 00:12:07,020
probably different people authenticate

00:12:04,920 --> 00:12:12,210
with gate in different ways

00:12:07,020 --> 00:12:14,780
it supports x.509 it supports as far as

00:12:12,210 --> 00:12:17,940
I know all of the authorization types

00:12:14,780 --> 00:12:21,090
the dead gate has and then you'll need

00:12:17,940 --> 00:12:24,330
the SQL database name or endpoint and

00:12:21,090 --> 00:12:25,680
the credentials for that so you don't

00:12:24,330 --> 00:12:27,810
need a whole lot to get started these

00:12:25,680 --> 00:12:30,660
are really simple things the chaos

00:12:27,810 --> 00:12:33,150
monkey instance itself can run on a t2

00:12:30,660 --> 00:12:35,250
small t2 micro it doesn't need it's not

00:12:33,150 --> 00:12:37,140
doing a whole lot so it doesn't need a

00:12:35,250 --> 00:12:43,800
lot of power behind it so the

00:12:37,140 --> 00:12:46,950
infrastructure is very inexpensive once

00:12:43,800 --> 00:12:50,370
you fill out the configuration file and

00:12:46,950 --> 00:12:52,620
you're testing the chaos monkey binary

00:12:50,370 --> 00:12:55,740
from the command line chaos monkey

00:12:52,620 --> 00:12:57,180
config is gonna let you know that chaos

00:12:55,740 --> 00:13:00,060
monkey is reading that configuration

00:12:57,180 --> 00:13:02,520
file and understanding what's in it so

00:13:00,060 --> 00:13:04,350
these are the same values that we just

00:13:02,520 --> 00:13:07,110
talked about in the configuration file

00:13:04,350 --> 00:13:09,720
and this chaos monkey will print this

00:13:07,110 --> 00:13:11,490
when you run the config command if you

00:13:09,720 --> 00:13:14,040
run the config command with an

00:13:11,490 --> 00:13:16,380
application name as an argument it'll

00:13:14,040 --> 00:13:18,180
show you the application configuration

00:13:16,380 --> 00:13:20,730
object for a chaos monkey

00:13:18,180 --> 00:13:23,390
and we'll see in a second just how

00:13:20,730 --> 00:13:23,390
that's created

00:13:24,529 --> 00:13:33,029
so once chaos monkeys user interface is

00:13:29,910 --> 00:13:35,970
enabled index settings j/s any

00:13:33,029 --> 00:13:40,020
application can opt in from the

00:13:35,970 --> 00:13:42,180
applications configuration page I it may

00:13:40,020 --> 00:13:44,850
even just be uncommenting a line in that

00:13:42,180 --> 00:13:49,100
file I haven't done it lately and we we

00:13:44,850 --> 00:13:51,330
treat that file in a C ICD process so

00:13:49,100 --> 00:13:53,149
I'm not positive what that looks like

00:13:51,330 --> 00:13:57,779
but it's the one line change to

00:13:53,149 --> 00:13:59,670
JavaScript settings file in in Dec you

00:13:57,779 --> 00:14:02,970
can see this is what developers will see

00:13:59,670 --> 00:14:06,690
or whoever is opting in applications

00:14:02,970 --> 00:14:09,750
will see when they go to their chaos

00:14:06,690 --> 00:14:11,370
monkey configuration and they're going

00:14:09,750 --> 00:14:14,580
to be able to set criteria in here

00:14:11,370 --> 00:14:16,500
whether they're opted in what

00:14:14,580 --> 00:14:19,320
environments that they want to

00:14:16,500 --> 00:14:20,820
participate in and it'll enumerate all

00:14:19,320 --> 00:14:23,310
the environments even if you don't have

00:14:20,820 --> 00:14:25,709
them configured in chaos monkey it will

00:14:23,310 --> 00:14:27,420
show them here but there's no chance the

00:14:25,709 --> 00:14:29,550
lever there's no chance of terminations

00:14:27,420 --> 00:14:33,209
will ever occur on the ones that aren't

00:14:29,550 --> 00:14:35,010
in the configuration file other things

00:14:33,209 --> 00:14:38,760
like you know the account name region

00:14:35,010 --> 00:14:41,760
stack if you want a specific cluster the

00:14:38,760 --> 00:14:44,790
detail and then the minimum time between

00:14:41,760 --> 00:14:46,140
termination in days so you don't you may

00:14:44,790 --> 00:14:48,510
not want to getting terminated every day

00:14:46,140 --> 00:14:50,700
or every other day or even every week

00:14:48,510 --> 00:14:52,860
and you can you can supply that

00:14:50,700 --> 00:14:56,450
information and chaos monkey will use it

00:14:52,860 --> 00:14:56,450
when it's making a termination decision

00:14:58,940 --> 00:15:08,370
so how the termination cycle works is

00:15:03,560 --> 00:15:11,130
every morning chaos monkey will run the

00:15:08,370 --> 00:15:12,900
schedule command the default

00:15:11,130 --> 00:15:16,290
installation has cron orchestrate that

00:15:12,900 --> 00:15:18,779
so every morning before your termination

00:15:16,290 --> 00:15:20,820
window comes it will schedule the

00:15:18,779 --> 00:15:23,610
terminations for that day what that

00:15:20,820 --> 00:15:25,950
schedule command does is it it it

00:15:23,610 --> 00:15:29,190
queries the gate API to list all the

00:15:25,950 --> 00:15:31,830
applications it determines the ones that

00:15:29,190 --> 00:15:34,620
have chaos monkey enabled

00:15:31,830 --> 00:15:37,350
in addition on those it will go in and

00:15:34,620 --> 00:15:38,760
retrieve some metadata about it just so

00:15:37,350 --> 00:15:41,940
happens to be the exact same thing that

00:15:38,760 --> 00:15:44,760
you you supplied in that in that UI so

00:15:41,940 --> 00:15:51,600
account cluster it gets all that and

00:15:44,760 --> 00:15:53,190
incorporates it into its decision once a

00:15:51,600 --> 00:15:57,180
decision has been made and the

00:15:53,190 --> 00:16:00,450
scheduling is complete it will make a

00:15:57,180 --> 00:16:03,630
decision on each one and if they qualify

00:16:00,450 --> 00:16:06,180
for chaos it will write them into a new

00:16:03,630 --> 00:16:10,170
cron file so chaos monkey is going to

00:16:06,180 --> 00:16:12,120
use your systems cron capabilities to

00:16:10,170 --> 00:16:15,060
actually drive these terminations and

00:16:12,120 --> 00:16:18,180
its default configuration you can see

00:16:15,060 --> 00:16:23,360
here what the what the cron file looks

00:16:18,180 --> 00:16:28,020
like it's picking some times it random

00:16:23,360 --> 00:16:30,150
all those yeah at random and to do the

00:16:28,020 --> 00:16:32,640
terminations it's calling a shell script

00:16:30,150 --> 00:16:35,340
and then it's providing some extra

00:16:32,640 --> 00:16:39,330
details which is name of application

00:16:35,340 --> 00:16:42,510
environment cluster region and those get

00:16:39,330 --> 00:16:45,510
passed to chaos monkey terminate shell

00:16:42,510 --> 00:16:48,420
script which then just runs runs the

00:16:45,510 --> 00:16:54,330
binary supplies that information and and

00:16:48,420 --> 00:16:56,130
saves a log so when that's run you know

00:16:54,330 --> 00:16:58,950
for each of these times it's going to

00:16:56,130 --> 00:17:02,160
run and it's it's going to write to that

00:16:58,950 --> 00:17:04,980
log terminate the instance write to your

00:17:02,160 --> 00:17:08,900
database and and move on and just wait

00:17:04,980 --> 00:17:14,570
for the next termination order to come

00:17:08,900 --> 00:17:17,460
so at this point the default

00:17:14,570 --> 00:17:19,860
configurations of chaos monkey are just

00:17:17,460 --> 00:17:22,380
just about completely explored what's

00:17:19,860 --> 00:17:24,690
going to happen is it will be running

00:17:22,380 --> 00:17:26,520
every day Monday through Friday and the

00:17:24,690 --> 00:17:28,050
default configuration running that

00:17:26,520 --> 00:17:29,700
schedule command preparing the

00:17:28,050 --> 00:17:32,100
terminations for the day and then as the

00:17:29,700 --> 00:17:36,420
day goes along it's going to terminate

00:17:32,100 --> 00:17:38,100
instances that are on that list that's

00:17:36,420 --> 00:17:41,400
great but what you don't have is a way

00:17:38,100 --> 00:17:43,260
to know notify that it's happened or

00:17:41,400 --> 00:17:45,059
kind of what what's going on in the

00:17:43,260 --> 00:17:48,090
background so

00:17:45,059 --> 00:17:49,559
they provide a great way to take care of

00:17:48,090 --> 00:17:53,039
that in a way that's appropriate for

00:17:49,559 --> 00:17:56,669
your business and organization there is

00:17:53,039 --> 00:18:00,450
a tracker interface that's unimplemented

00:17:56,669 --> 00:18:03,779
and instead of relying on email or

00:18:00,450 --> 00:18:06,059
guessing when terminations occur every

00:18:03,779 --> 00:18:10,409
termination event will call this tracker

00:18:06,059 --> 00:18:13,440
interface so I made one I left out the

00:18:10,409 --> 00:18:16,139
boring parts I mean it's all boring I

00:18:13,440 --> 00:18:18,659
suppose the extra boring parts aren't

00:18:16,139 --> 00:18:20,129
there and what this does is every time

00:18:18,659 --> 00:18:23,759
there's a termination it's just gonna

00:18:20,129 --> 00:18:26,100
post a message in slack the termination

00:18:23,759 --> 00:18:28,049
objects includes all that metadata that

00:18:26,100 --> 00:18:31,470
we've talked about previously and you

00:18:28,049 --> 00:18:35,240
can arrange that in the slack message in

00:18:31,470 --> 00:18:35,240
a way that's meaningful for your company

00:18:36,049 --> 00:18:41,340
this was my first the first go I ever

00:18:38,730 --> 00:18:44,429
wrote was this interface so it's very

00:18:41,340 --> 00:18:45,749
approachable if anyone's ever struggled

00:18:44,429 --> 00:18:48,360
or been intimidated looking at the

00:18:45,749 --> 00:18:50,999
spinnaker codebase this is this is much

00:18:48,360 --> 00:18:53,749
more bite-sized and accessible and easy

00:18:50,999 --> 00:18:53,749
to understand

00:18:54,980 --> 00:18:59,159
using that tracker interface you know we

00:18:57,659 --> 00:19:02,029
talked about announcing two teams and

00:18:59,159 --> 00:19:05,309
that would be you know that would be a

00:19:02,029 --> 00:19:08,519
slap chat message where some team is

00:19:05,309 --> 00:19:10,619
notified that a termination event

00:19:08,519 --> 00:19:12,659
occurred that could be the development

00:19:10,619 --> 00:19:16,019
team it could be an Operations team it

00:19:12,659 --> 00:19:18,600
could be the CEO it could be you know

00:19:16,019 --> 00:19:20,340
anyone you want in the company and

00:19:18,600 --> 00:19:21,840
that's a great way to get started it's a

00:19:20,340 --> 00:19:25,259
really low friction way to get started

00:19:21,840 --> 00:19:27,360
but ultimately the usefulness of it you

00:19:25,259 --> 00:19:29,249
know as as you scale this practice in

00:19:27,360 --> 00:19:31,919
your organization that it's going to get

00:19:29,249 --> 00:19:34,830
a little of much and hard to make sure

00:19:31,919 --> 00:19:38,759
that you're doing all your observations

00:19:34,830 --> 00:19:41,820
and checking in and everything so the

00:19:38,759 --> 00:19:44,129
next step up from that to me would be

00:19:41,820 --> 00:19:47,369
graph on ax for example allows you to

00:19:44,129 --> 00:19:51,809
pass the start time of the graph you're

00:19:47,369 --> 00:19:54,059
looking at as an HTTP parameter you you

00:19:51,809 --> 00:19:57,269
know that start time as part of the

00:19:54,059 --> 00:19:58,960
termination object so what that slack

00:19:57,269 --> 00:20:01,210
post thing can do

00:19:58,960 --> 00:20:04,330
is actually create a link directly to

00:20:01,210 --> 00:20:07,659
your dashboard at the exact moment that

00:20:04,330 --> 00:20:10,450
that that this happened the end time is

00:20:07,659 --> 00:20:12,220
much much harder to establish but the

00:20:10,450 --> 00:20:16,779
beginning time is the most important

00:20:12,220 --> 00:20:18,279
piece as far as observing this event the

00:20:16,779 --> 00:20:19,779
next step up from there would be to use

00:20:18,279 --> 00:20:22,649
this tracker to create and add

00:20:19,779 --> 00:20:25,750
annotation if you have a company-wide

00:20:22,649 --> 00:20:28,570
metric system time series database

00:20:25,750 --> 00:20:31,330
information that's shown you can create

00:20:28,570 --> 00:20:33,460
an annotation for the event give it an

00:20:31,330 --> 00:20:36,399
ID and share it with every team and with

00:20:33,460 --> 00:20:39,669
them overlay that annotation onto their

00:20:36,399 --> 00:20:41,649
own application graphs and then finally

00:20:39,669 --> 00:20:43,750
I think if you have if you've gotten to

00:20:41,649 --> 00:20:45,909
the point where you have many people

00:20:43,750 --> 00:20:49,299
wanting to do many different things and

00:20:45,909 --> 00:20:52,750
kick off new workflows based on these

00:20:49,299 --> 00:20:55,630
termination events the pub/sub method is

00:20:52,750 --> 00:20:57,580
probably good if you have a more

00:20:55,630 --> 00:21:00,039
advanced networking capability at your

00:20:57,580 --> 00:21:02,559
company and you can have a cluster

00:21:00,039 --> 00:21:03,940
that's running one or two percent you

00:21:02,559 --> 00:21:05,980
can have that as your target in

00:21:03,940 --> 00:21:09,549
production or in an SLA stage

00:21:05,980 --> 00:21:12,070
environment to do your observations it's

00:21:09,549 --> 00:21:15,870
not going to be one-to-one but it will

00:21:12,070 --> 00:21:18,460
give you a chance to do it potentially

00:21:15,870 --> 00:21:20,980
you can be selective about which

00:21:18,460 --> 00:21:26,820
applications qualify establish a

00:21:20,980 --> 00:21:28,870
criteria for candidates for this and

00:21:26,820 --> 00:21:31,539
it's going to be different for every

00:21:28,870 --> 00:21:33,850
application in every company but a good

00:21:31,539 --> 00:21:36,669
way to start is in in the development

00:21:33,850 --> 00:21:38,890
and non prada environments seeing

00:21:36,669 --> 00:21:40,899
success there you probably want to see

00:21:38,890 --> 00:21:45,309
success there before you start trying it

00:21:40,899 --> 00:21:47,230
in in stage for example using safe time

00:21:45,309 --> 00:21:49,299
windows is also an option maybe for

00:21:47,230 --> 00:21:51,490
whatever reason this is becoming more

00:21:49,299 --> 00:21:54,700
and more rare right as the years goes on

00:21:51,490 --> 00:21:57,490
but you have a one-hour window that

00:21:54,700 --> 00:21:59,110
doesn't violate your SLA where people

00:21:57,490 --> 00:22:01,210
are still using your service but it's

00:21:59,110 --> 00:22:03,010
kind of no guarantee at that time maybe

00:22:01,210 --> 00:22:04,830
you have that once a month you can

00:22:03,010 --> 00:22:06,820
restrict it to that time window

00:22:04,830 --> 00:22:08,110
obviously if you have a lot of services

00:22:06,820 --> 00:22:09,330
and you restrict them in that time

00:22:08,110 --> 00:22:11,350
window and they all get terminated

00:22:09,330 --> 00:22:11,680
probably everything will be terminated

00:22:11,350 --> 00:22:14,470
the same

00:22:11,680 --> 00:22:16,420
time it's like an hour but if there's

00:22:14,470 --> 00:22:19,420
something if you have a hypothesis you

00:22:16,420 --> 00:22:23,130
want to figure out or observe behavior

00:22:19,420 --> 00:22:25,690
of something it's it's one option and

00:22:23,130 --> 00:22:27,940
the final thing they're kind of the most

00:22:25,690 --> 00:22:30,580
interesting thing to me and this could

00:22:27,940 --> 00:22:33,790
be the subject of a whole other talk is

00:22:30,580 --> 00:22:39,580
using an outage beacon to ensure safety

00:22:33,790 --> 00:22:41,920
in in production in in theory if your

00:22:39,580 --> 00:22:43,390
stage environment is exactly the same as

00:22:41,920 --> 00:22:46,090
your production environment you may not

00:22:43,390 --> 00:22:49,180
need you know you may feel that it's

00:22:46,090 --> 00:22:51,840
good enough and that can be true but

00:22:49,180 --> 00:22:54,100
often in the data plane network topology

00:22:51,840 --> 00:22:56,050
request volume and characterization

00:22:54,100 --> 00:22:58,150
there's going to still be differences

00:22:56,050 --> 00:23:00,940
between stage and production unless you

00:22:58,150 --> 00:23:06,270
work really hard and invest a lot into

00:23:00,940 --> 00:23:09,490
making that stage environment identical

00:23:06,270 --> 00:23:13,090
so chaos monkey has another

00:23:09,490 --> 00:23:15,040
unimplemented interface to assess the

00:23:13,090 --> 00:23:18,220
status of an outage beacon before it

00:23:15,040 --> 00:23:20,050
performs termination an outage beacon is

00:23:18,220 --> 00:23:21,910
just an idea that something somewhere

00:23:20,050 --> 00:23:25,720
can tell you if you're having an outage

00:23:21,910 --> 00:23:28,000
or not a simple way to do that is just

00:23:25,720 --> 00:23:30,250
to have a simulate an HTTP health check

00:23:28,000 --> 00:23:33,100
and just have a service out there that

00:23:30,250 --> 00:23:36,670
when it returns 200 okay that means no

00:23:33,100 --> 00:23:38,830
outage anything else is an outage so

00:23:36,670 --> 00:23:42,490
chaos monkey can reach out to this

00:23:38,830 --> 00:23:44,290
beacon at termination time and in cancel

00:23:42,490 --> 00:23:47,290
skip the termination if that if that

00:23:44,290 --> 00:23:49,960
outage beacon is lit so if you're

00:23:47,290 --> 00:23:51,880
experiencing some other outage or some

00:23:49,960 --> 00:23:54,070
other diminished capacity if this beacon

00:23:51,880 --> 00:23:58,720
is lit you know that chaos monkey will

00:23:54,070 --> 00:24:00,880
not be active as long as it's lit it has

00:23:58,720 --> 00:24:02,980
other uses as well I'm not gonna get in

00:24:00,880 --> 00:24:05,170
to much because it's outside of the

00:24:02,980 --> 00:24:07,120
scope of this presentation but you can

00:24:05,170 --> 00:24:09,090
use it to assume a defensive posture in

00:24:07,120 --> 00:24:11,710
your applications during outages

00:24:09,090 --> 00:24:15,460
coordinate outage responses in a

00:24:11,710 --> 00:24:17,110
programmatic way there's there's a lot

00:24:15,460 --> 00:24:19,030
that you can do with these outage

00:24:17,110 --> 00:24:22,690
beacons use them to drive your status

00:24:19,030 --> 00:24:23,860
page trigger them from a status page so

00:24:22,690 --> 00:24:25,170
once you have it

00:24:23,860 --> 00:24:26,700
assuming chaos

00:24:25,170 --> 00:24:29,760
the only thing using it you have a lot

00:24:26,700 --> 00:24:32,700
of opportunity to break this beacon as

00:24:29,760 --> 00:24:34,800
you're making it so once everything is

00:24:32,700 --> 00:24:36,600
kind of watching it you know if that if

00:24:34,800 --> 00:24:38,760
that turns false if that indicates an

00:24:36,600 --> 00:24:39,120
outage it's probably going to be a long

00:24:38,760 --> 00:24:42,450
night

00:24:39,120 --> 00:24:45,000
so I think the steps of maturity for

00:24:42,450 --> 00:24:47,340
working with this beacon is it could be

00:24:45,000 --> 00:24:48,440
even manually activated from incident

00:24:47,340 --> 00:24:50,790
responders

00:24:48,440 --> 00:24:52,560
you can trigger it if you have a system

00:24:50,790 --> 00:24:54,360
like like ever bridge or an incident

00:24:52,560 --> 00:24:56,880
response system a lot of those are able

00:24:54,360 --> 00:24:59,700
to fire off web hooks as they create

00:24:56,880 --> 00:25:01,590
incidents or declare outages so you can

00:24:59,700 --> 00:25:04,020
trigger the beacon off of that and they

00:25:01,590 --> 00:25:07,680
have close times to so you can you know

00:25:04,020 --> 00:25:09,920
unlight it you know finally it can be

00:25:07,680 --> 00:25:12,840
triggered automatically if you have

00:25:09,920 --> 00:25:14,550
advanced incident detection systems and

00:25:12,840 --> 00:25:17,340
you have a lot of confidence in them you

00:25:14,550 --> 00:25:19,020
can wire them up to an outage beacon I'm

00:25:17,340 --> 00:25:20,730
guessing if you have these systems

00:25:19,020 --> 00:25:23,370
already you probably already have an

00:25:20,730 --> 00:25:27,950
outage beacon but if not definitely add

00:25:23,370 --> 00:25:31,850
one so we talked about the ec2

00:25:27,950 --> 00:25:35,970
deployment what's needed for that

00:25:31,850 --> 00:25:37,620
there's some alternate designs to chaos

00:25:35,970 --> 00:25:41,010
monkey basically sits there all day and

00:25:37,620 --> 00:25:42,930
just does a few things so almost all the

00:25:41,010 --> 00:25:46,230
time it's not running or doing anything

00:25:42,930 --> 00:25:50,610
only when these processes are invoked by

00:25:46,230 --> 00:25:52,800
cron to go and do this or that you may

00:25:50,610 --> 00:25:56,550
want to run it in ways where that ec2

00:25:52,800 --> 00:25:58,410
isn't just going to waste all day so the

00:25:56,550 --> 00:26:00,660
server requirements are so low this

00:25:58,410 --> 00:26:02,580
isn't a good money-saving technique I

00:26:00,660 --> 00:26:05,880
think you could probably run this for 20

00:26:02,580 --> 00:26:07,950
bucks a month on a server it's more for

00:26:05,880 --> 00:26:11,610
if you're an engineer and you can't help

00:26:07,950 --> 00:26:13,290
yourself and the inefficiency is just

00:26:11,610 --> 00:26:15,480
driving you crazy

00:26:13,290 --> 00:26:20,430
there's there some paths you can explore

00:26:15,480 --> 00:26:23,670
to to run it in a different design the

00:26:20,430 --> 00:26:26,070
concepts used to do this conversion from

00:26:23,670 --> 00:26:28,860
the kind of provided easy to

00:26:26,070 --> 00:26:32,370
installation instructions to serverless

00:26:28,860 --> 00:26:33,750
or containerized deployments are going

00:26:32,370 --> 00:26:35,610
to be useful and you may be able to

00:26:33,750 --> 00:26:37,260
apply those to your business

00:26:35,610 --> 00:26:37,800
applications as well if they're going

00:26:37,260 --> 00:26:43,350
through this

00:26:37,800 --> 00:26:46,010
transformation so so this isn't required

00:26:43,350 --> 00:26:48,570
but you can get a lot out of this

00:26:46,010 --> 00:26:50,460
basically you four containers you just

00:26:48,570 --> 00:26:53,310
need a container that has the entry

00:26:50,460 --> 00:26:55,980
point of the binary and it'll let you

00:26:53,310 --> 00:26:58,140
execute all the different commands a

00:26:55,980 --> 00:27:01,890
container schedule is also very helpful

00:26:58,140 --> 00:27:04,680
because you need to replace cron with a

00:27:01,890 --> 00:27:07,710
container schedule basically so instead

00:27:04,680 --> 00:27:11,190
of running that batch script that runs

00:27:07,710 --> 00:27:14,040
the chaos monkey terminate you can run a

00:27:11,190 --> 00:27:16,680
docker container with the chaos monkey

00:27:14,040 --> 00:27:18,570
binary on it and through the entry point

00:27:16,680 --> 00:27:21,900
pass in terminate and all the conditions

00:27:18,570 --> 00:27:28,160
there you know all of a sudden that ec2

00:27:21,900 --> 00:27:32,040
instance is not as required to do this

00:27:28,160 --> 00:27:34,440
we have to bypass cron that cron

00:27:32,040 --> 00:27:36,030
installation is very stateful it's only

00:27:34,440 --> 00:27:38,280
needed for a day so you don't need to

00:27:36,030 --> 00:27:40,470
back it up or anything like that but in

00:27:38,280 --> 00:27:44,520
it can in a containerized and server

00:27:40,470 --> 00:27:47,820
this world crimes not adequate to fire

00:27:44,520 --> 00:27:50,370
these events so you can read the

00:27:47,820 --> 00:27:51,630
database directly it shouldn't be too

00:27:50,370 --> 00:27:55,620
complicated read the database directly

00:27:51,630 --> 00:27:57,180
and then use that to put things in your

00:27:55,620 --> 00:27:59,850
container schedule that will do the

00:27:57,180 --> 00:28:03,720
termination events instead of reading it

00:27:59,850 --> 00:28:05,460
from the cron file as far as lambda I've

00:28:03,720 --> 00:28:07,920
gone further down the container route

00:28:05,460 --> 00:28:10,380
then I have with the server this route

00:28:07,920 --> 00:28:13,200
but they're similar I've taken

00:28:10,380 --> 00:28:15,090
command-line utilities from other ones

00:28:13,200 --> 00:28:18,420
and been able to turn them into

00:28:15,090 --> 00:28:20,700
serverless functions to replace periodic

00:28:18,420 --> 00:28:22,290
execution of you know running them in

00:28:20,700 --> 00:28:24,450
jenkins every four hours or something

00:28:22,290 --> 00:28:26,910
like that you can just run a server list

00:28:24,450 --> 00:28:29,070
and it's a lot easier to manage there's

00:28:26,910 --> 00:28:32,910
a lot of benefits to that so I suspect

00:28:29,070 --> 00:28:35,610
it's possible with chaos monkey as well

00:28:32,910 --> 00:28:38,250
I'm looking forward being you to go

00:28:35,610 --> 00:28:39,900
golang i'm looking forward to playing

00:28:38,250 --> 00:28:42,290
around with that and seeing seeing what

00:28:39,900 --> 00:28:42,290
I can do

00:28:44,970 --> 00:28:52,710
so there's a few resources I'd like to

00:28:47,910 --> 00:28:55,320
point out last year at reinvent Norah

00:28:52,710 --> 00:28:58,560
Jones from Netflix gave a great keynote

00:28:55,320 --> 00:29:00,930
about why you should use chaos monkey I

00:28:58,560 --> 00:29:02,160
tried not to overlap that because I'm

00:29:00,930 --> 00:29:03,540
not gonna be able to say it as good as

00:29:02,160 --> 00:29:06,210
her and I'm kind of telling you how to

00:29:03,540 --> 00:29:07,470
use it but I'd highly suggest you watch

00:29:06,210 --> 00:29:10,260
that especially if you're in a position

00:29:07,470 --> 00:29:13,110
where you have to sell this to your

00:29:10,260 --> 00:29:14,460
company or your leadership it's it's

00:29:13,110 --> 00:29:17,340
going to be very beneficial to watch

00:29:14,460 --> 00:29:19,590
that there's a free ebook published by

00:29:17,340 --> 00:29:22,740
the Chaos engineering team at Netflix

00:29:19,590 --> 00:29:25,310
that isn't it's super focused on chaos

00:29:22,740 --> 00:29:27,720
monkey but chaos engineering in general

00:29:25,310 --> 00:29:29,760
definitely check that out and the

00:29:27,720 --> 00:29:32,460
documentation is actually quite good for

00:29:29,760 --> 00:29:36,990
chaos monkey so that's that's a great

00:29:32,460 --> 00:29:39,510
reference to so this is just the

00:29:36,990 --> 00:29:42,030
beginning of Spinnaker's chaos story

00:29:39,510 --> 00:29:45,870
Andy mentioned in the in the keynote on

00:29:42,030 --> 00:29:49,080
on Monday that gremlin Io is interested

00:29:45,870 --> 00:29:50,820
in working with spinnaker and they seem

00:29:49,080 --> 00:29:54,300
to me to be one of the leading providers

00:29:50,820 --> 00:29:55,640
of chaos as a service also I'd invite

00:29:54,300 --> 00:29:58,830
you to think for a moment about

00:29:55,640 --> 00:30:02,790
automated canary analysis and how that

00:29:58,830 --> 00:30:04,890
overlaps with chaos observation they're

00:30:02,790 --> 00:30:06,870
not exactly the same but they have a lot

00:30:04,890 --> 00:30:09,330
of the same steps and a lot of the same

00:30:06,870 --> 00:30:11,430
requirements to do automated chaos

00:30:09,330 --> 00:30:14,030
observation as automatic canary

00:30:11,430 --> 00:30:14,030
deployments

00:30:15,660 --> 00:30:17,720

YouTube URL: https://www.youtube.com/watch?v=JigvvK4AIfo


