Title: Panel: "Spinnaker for Borg"
Publication date: 2018-10-24
Playlist: Spinnaker Summit 2018
Description: 
	Pim Van Pelt/Dan Peach/Jarrod Todd
Captions: 
	00:00:01,190 --> 00:00:14,400
[Music]

00:00:16,460 --> 00:00:26,250
all right so welcome my name is Seb him

00:00:23,070 --> 00:00:27,420
with me are Jared and Dan we will

00:00:26,250 --> 00:00:29,369
introduce ourselves a little bit more

00:00:27,420 --> 00:00:32,009
later and we wanted to share a little

00:00:29,369 --> 00:00:35,100
bit about how we are applying spinnaker

00:00:32,009 --> 00:00:38,280
to the internal cluster management

00:00:35,100 --> 00:00:42,090
system at Google called Borg

00:00:38,280 --> 00:00:46,379
it's a foray into something completely

00:00:42,090 --> 00:00:48,539
unrelated to spinnaker and then an

00:00:46,379 --> 00:00:50,640
advancement to spinnaker itself we'll

00:00:48,539 --> 00:00:52,770
talk about how we're using it for

00:00:50,640 --> 00:00:55,559
internal workloads and at the end of it

00:00:52,770 --> 00:00:57,149
there's a little slide that has a stick

00:00:55,559 --> 00:00:58,649
puppet saying why should I care

00:00:57,149 --> 00:01:00,570
you're just humble bragging about all

00:00:58,649 --> 00:01:02,910
the things you have at Google that we

00:01:00,570 --> 00:01:08,659
don't actually have externally and then

00:01:02,910 --> 00:01:12,930
there's a pop quiz at the end so we have

00:01:08,659 --> 00:01:15,600
this perennial balance between

00:01:12,930 --> 00:01:18,570
declarative systems which you know the

00:01:15,600 --> 00:01:20,159
kubernetes community would like to let

00:01:18,570 --> 00:01:23,460
you believe are awesome and solve all

00:01:20,159 --> 00:01:25,200
world problems and imperative ones which

00:01:23,460 --> 00:01:27,930
at least most users that I'm familiar

00:01:25,200 --> 00:01:30,479
with internally at Google prefer because

00:01:27,930 --> 00:01:33,119
they can predict what's going to be the

00:01:30,479 --> 00:01:35,579
next step and visualize this rather than

00:01:33,119 --> 00:01:38,310
declaring this intent and magically

00:01:35,579 --> 00:01:40,220
seeing their system converge to it it is

00:01:38,310 --> 00:01:42,420
my opinion that we actually need both

00:01:40,220 --> 00:01:44,460
strictly so we will not be able to do

00:01:42,420 --> 00:01:48,920
one or the other combination of both I

00:01:44,460 --> 00:01:52,229
think is a winning concept then we have

00:01:48,920 --> 00:01:53,909
a little Show and Tell on declarative

00:01:52,229 --> 00:01:58,320
rollouts with the tool that is not

00:01:53,909 --> 00:02:00,090
spinnaker against kubernetes then we

00:01:58,320 --> 00:02:02,520
talk about sort of the spinnaker

00:02:00,090 --> 00:02:05,040
imperative workflow systems that we

00:02:02,520 --> 00:02:07,950
apply internally at Google and then

00:02:05,040 --> 00:02:11,400
hopefully show that we advance the state

00:02:07,950 --> 00:02:15,629
of the art within Google from 2016 to 2

00:02:11,400 --> 00:02:18,500
now so grab some mics gents I would like

00:02:15,629 --> 00:02:18,500
you to introduce yourself

00:02:21,500 --> 00:02:26,000
I'm Jared Todd I work in Kirkland

00:02:24,110 --> 00:02:28,580
Washington just across the lake I'm a

00:02:26,000 --> 00:02:31,130
necessary at Google I work on spinnaker

00:02:28,580 --> 00:02:34,990
and I also when I have spare time work

00:02:31,130 --> 00:02:38,780
on Google's canary analysis service yeah

00:02:34,990 --> 00:02:42,890
I'm Dan I'm a sweet software engineer on

00:02:38,780 --> 00:02:45,590
the spinnaker team in New York I work

00:02:42,890 --> 00:02:48,410
primarily on this spinnaker for Borg and

00:02:45,590 --> 00:02:51,770
one 1/2 spare time I work on Kayenta

00:02:48,410 --> 00:02:53,750
which is Spinnaker's Canary service all

00:02:51,770 --> 00:02:56,390
right and I'm a PIM I hail from the

00:02:53,750 --> 00:02:58,490
Zurich office I am an SRE there working

00:02:56,390 --> 00:03:00,590
on sort of a reimagine a ssin of the

00:02:58,490 --> 00:03:05,390
Google internal production control plane

00:03:00,590 --> 00:03:07,310
called production 2020 we're not here

00:03:05,390 --> 00:03:09,170
alone we actually have quite an extended

00:03:07,310 --> 00:03:10,880
team there's a bunch of countries we

00:03:09,170 --> 00:03:14,270
hang out with dan and his team in New

00:03:10,880 --> 00:03:15,950
York Jared and his team in Seattle but

00:03:14,270 --> 00:03:18,110
we have a sister team of that in Dublin

00:03:15,950 --> 00:03:19,930
as well and then the system modeling

00:03:18,110 --> 00:03:24,050
team that I work on is split between

00:03:19,930 --> 00:03:30,050
Cambridge which is Boston not England

00:03:24,050 --> 00:03:33,560
and Zurich so the state of the art of

00:03:30,050 --> 00:03:35,960
Google production at the end of 2016

00:03:33,560 --> 00:03:39,380
I think the TLDR is it was a complex

00:03:35,960 --> 00:03:42,950
space as Google built their services

00:03:39,380 --> 00:03:46,010
initially you know back in 2005 or six

00:03:42,950 --> 00:03:47,720
they each had their s3 teams that would

00:03:46,010 --> 00:03:48,980
go take problems and solve them and so

00:03:47,720 --> 00:03:51,290
we ended up with a bunch of rollout

00:03:48,980 --> 00:03:53,180
tools and monitoring tools capacity

00:03:51,290 --> 00:03:56,300
planning tools emergency response tools

00:03:53,180 --> 00:03:57,800
essentially one for each team pretty

00:03:56,300 --> 00:03:59,000
much some would share but there was a

00:03:57,800 --> 00:04:01,250
lot of diversity out there it was really

00:03:59,000 --> 00:04:03,110
cool to have that diversity because you

00:04:01,250 --> 00:04:05,450
can choose some really good patterns and

00:04:03,110 --> 00:04:08,270
winners and sort of converge on the

00:04:05,450 --> 00:04:10,280
stronger denizens in some problem space

00:04:08,270 --> 00:04:12,050
and it was also very expensive because

00:04:10,280 --> 00:04:15,320
each team essentially had to roll their

00:04:12,050 --> 00:04:18,410
own and maintain their own particularly

00:04:15,320 --> 00:04:19,790
worth calling out we are Borg based I

00:04:18,410 --> 00:04:21,350
think people in the industry can

00:04:19,790 --> 00:04:23,540
chastise Google every now and again for

00:04:21,350 --> 00:04:25,070
not running on our own cloud I would

00:04:23,540 --> 00:04:28,220
joke around and say actually we do

00:04:25,070 --> 00:04:29,930
because Borg is our cloud and it runs a

00:04:28,220 --> 00:04:31,520
bunch of services like Gmail and maps

00:04:29,930 --> 00:04:33,320
and web search and whatnot but it also

00:04:31,520 --> 00:04:36,130
runs our cloud offering

00:04:33,320 --> 00:04:39,290
so we run our VMs in containers on board

00:04:36,130 --> 00:04:40,820
however I think GCP is advancing and the

00:04:39,290 --> 00:04:42,410
industry is advancing much faster than

00:04:40,820 --> 00:04:43,729
the Borg ecosystem are and so it is a

00:04:42,410 --> 00:04:46,370
good idea for us to actually pay

00:04:43,729 --> 00:04:47,660
attention and converge with it lest we

00:04:46,370 --> 00:04:49,790
have our beautiful little island called

00:04:47,660 --> 00:04:52,820
Borg and the other millions of people

00:04:49,790 --> 00:04:54,820
are using cloud providers natively and

00:04:52,820 --> 00:04:58,010
it was very expensive for us to roll

00:04:54,820 --> 00:05:00,290
binary zout across our fleet a lot of

00:04:58,010 --> 00:05:02,900
people spent time sort of tinkering with

00:05:00,290 --> 00:05:06,139
their rollout pipelines refactoring

00:05:02,900 --> 00:05:08,870
their code doing you know advancements

00:05:06,139 --> 00:05:11,450
of their local solutions the incumbent

00:05:08,870 --> 00:05:13,160
one is called Sisyphus which is that

00:05:11,450 --> 00:05:15,110
Greek dude who kept on pushing boulders

00:05:13,160 --> 00:05:16,850
up the hill to just see them roll back

00:05:15,110 --> 00:05:18,680
down again and you have to start that's

00:05:16,850 --> 00:05:19,910
kind of indicative of both the rollouts

00:05:18,680 --> 00:05:24,350
as well as maintaining the rollout

00:05:19,910 --> 00:05:26,690
systems and we had sort of several bugs

00:05:24,350 --> 00:05:28,789
as we always do that were really hard to

00:05:26,690 --> 00:05:30,110
actually address and fix because we had

00:05:28,789 --> 00:05:32,570
thousands and thousands of these

00:05:30,110 --> 00:05:35,720
Sisyphus instances you know hanging out

00:05:32,570 --> 00:05:40,940
in production so we thought we would

00:05:35,720 --> 00:05:44,240
maybe fix that one thing that I think

00:05:40,940 --> 00:05:49,400
everyone here would would agree with or

00:05:44,240 --> 00:05:52,520
some feel is adopting spinnaker gives us

00:05:49,400 --> 00:05:56,360
a lot of perks in terms of developer

00:05:52,520 --> 00:05:59,389
velocity people will know it as they

00:05:56,360 --> 00:06:02,120
maybe you know work on a cloud project

00:05:59,389 --> 00:06:04,729
or a Google project or we hire them they

00:06:02,120 --> 00:06:06,169
may have some experience already which

00:06:04,729 --> 00:06:08,270
is good because you know Google's

00:06:06,169 --> 00:06:10,240
internal tools are internal after all it

00:06:08,270 --> 00:06:12,500
will take a lot of time to learn them

00:06:10,240 --> 00:06:15,080
even if you were to move between teams

00:06:12,500 --> 00:06:16,940
you know all no 2015/16 you would

00:06:15,080 --> 00:06:18,530
essentially learn a new version of the

00:06:16,940 --> 00:06:21,410
rollout tool even if it was based on

00:06:18,530 --> 00:06:25,550
Sisyphus multi-cloud I don't think this

00:06:21,410 --> 00:06:27,560
is a sales you know concept at all

00:06:25,550 --> 00:06:29,690
we are multi-cloud within Google we

00:06:27,560 --> 00:06:31,729
obviously have kubernetes and GCE and we

00:06:29,690 --> 00:06:33,320
have Borg and so it'd be nice for us to

00:06:31,729 --> 00:06:35,990
be able to use the same type of tooling

00:06:33,320 --> 00:06:38,870
across all of those and it's pretty

00:06:35,990 --> 00:06:40,430
comprehensive compared to the internal

00:06:38,870 --> 00:06:43,460
sequencers that we have at Google and we

00:06:40,430 --> 00:06:44,540
have quite a few specifically I'm very

00:06:43,460 --> 00:06:47,690
in love with work

00:06:44,540 --> 00:06:50,080
and how you can bend it to your will to

00:06:47,690 --> 00:06:51,860
execute rather complex nested workflows

00:06:50,080 --> 00:06:53,540
most of the other ones we have

00:06:51,860 --> 00:06:54,800
internally are quite static you tell it

00:06:53,540 --> 00:06:56,570
what to do and it will do exactly that

00:06:54,800 --> 00:06:58,190
thing and if in the middle you decided

00:06:56,570 --> 00:07:00,940
you want to do something else well

00:06:58,190 --> 00:07:00,940
you're kind of out of luck

00:07:00,950 --> 00:07:05,810
also there is growth if you cuz Andy was

00:07:03,770 --> 00:07:08,660
saying this morning you know the amount

00:07:05,810 --> 00:07:11,030
of commuters is grown by 50% or so in

00:07:08,660 --> 00:07:12,530
the last year year and a half that's

00:07:11,030 --> 00:07:14,120
gonna grow even further and it's just a

00:07:12,530 --> 00:07:16,450
matter of time before these open source

00:07:14,120 --> 00:07:19,190
systems like say kubernetes or spinnaker

00:07:16,450 --> 00:07:21,140
will have more people more eyes and more

00:07:19,190 --> 00:07:22,940
keyboards attached to them and make more

00:07:21,140 --> 00:07:24,320
progress than I would even if I hired a

00:07:22,940 --> 00:07:28,280
hundred people to work on the internal

00:07:24,320 --> 00:07:30,230
tool so this sharing of code currently

00:07:28,280 --> 00:07:33,620
is more of a one-way street we took code

00:07:30,230 --> 00:07:35,720
from the open source sort of community

00:07:33,620 --> 00:07:39,550
but we should also be able to make this

00:07:35,720 --> 00:07:39,550
a bi-directional path and give some back

00:07:40,030 --> 00:07:45,580
so there's one thing that I wanted to

00:07:42,110 --> 00:07:48,500
obsess about because I have had

00:07:45,580 --> 00:07:50,600
year-long discussions with teams within

00:07:48,500 --> 00:07:52,700
Google around the philosophical

00:07:50,600 --> 00:07:55,520
differences between declarative rollout

00:07:52,700 --> 00:07:58,010
systems and imperative ones lots of

00:07:55,520 --> 00:07:59,870
folks will be in a religious church camp

00:07:58,010 --> 00:08:01,160
saying that you should absolutely use

00:07:59,870 --> 00:08:03,110
declarative because declarative is

00:08:01,160 --> 00:08:05,840
awesome and then other people will say

00:08:03,110 --> 00:08:08,060
declarative sucks because I like to sort

00:08:05,840 --> 00:08:12,170
of determine the orders and steps that

00:08:08,060 --> 00:08:15,320
my workflow is going to take my position

00:08:12,170 --> 00:08:16,940
and and that of our team is we need both

00:08:15,320 --> 00:08:19,310
so you may be able to do some things

00:08:16,940 --> 00:08:21,170
declaratively really nicely you may be

00:08:19,310 --> 00:08:23,630
able to do some things imperative ly and

00:08:21,170 --> 00:08:25,520
so we're looking for a marriage of these

00:08:23,630 --> 00:08:27,440
two worlds so that they don't have to

00:08:25,520 --> 00:08:30,410
compete but they can complement and

00:08:27,440 --> 00:08:32,900
complete each other so in particular

00:08:30,410 --> 00:08:35,870
some pro and con lists around you know

00:08:32,900 --> 00:08:38,060
declarative and imperative workflows I

00:08:35,870 --> 00:08:40,360
see them more the imperative ones as

00:08:38,060 --> 00:08:44,980
business logic you know around

00:08:40,360 --> 00:08:48,500
compliance testing ensuring that we have

00:08:44,980 --> 00:08:50,510
enough introspection on the direction

00:08:48,500 --> 00:08:52,430
that our rollouts are taking and the

00:08:50,510 --> 00:08:55,160
declarative ones are kind of rather

00:08:52,430 --> 00:08:57,230
obviously here's a script and what I

00:08:55,160 --> 00:08:57,450
want you to do please go ahead and do

00:08:57,230 --> 00:08:59,190
the

00:08:57,450 --> 00:09:02,970
and don't bother me with the details and

00:08:59,190 --> 00:09:06,480
how you get there some person next door

00:09:02,970 --> 00:09:09,120
called Andrew gave me a really nice sort

00:09:06,480 --> 00:09:11,430
of mental analogy between these two when

00:09:09,120 --> 00:09:13,710
you punch in an address on your GPS in

00:09:11,430 --> 00:09:16,440
your car it gives you a route to that

00:09:13,710 --> 00:09:19,860
place and you don't pay it no mind if it

00:09:16,440 --> 00:09:21,780
takes 101 or 280 in terms of the San

00:09:19,860 --> 00:09:23,130
Francisco Bay Area you'll just trust it

00:09:21,780 --> 00:09:25,230
because it knows what it's doing for

00:09:23,130 --> 00:09:28,290
some reason we think that's perfectly

00:09:25,230 --> 00:09:30,060
normal but then for at the same token we

00:09:28,290 --> 00:09:31,890
do not want to just declare we want this

00:09:30,060 --> 00:09:34,110
container to run please just run it

00:09:31,890 --> 00:09:36,660
somewhere you know launch it over to 80

00:09:34,110 --> 00:09:38,670
or 101 no no it has to be 101 because

00:09:36,660 --> 00:09:42,090
it's really silly that people do not

00:09:38,670 --> 00:09:44,880
make the mental leap between trusting a

00:09:42,090 --> 00:09:47,970
GPS sat-nav and trusting a declarative

00:09:44,880 --> 00:09:50,190
rollout system if you are in such a camp

00:09:47,970 --> 00:09:52,080
that not that doesn't trust it this line

00:09:50,190 --> 00:09:53,700
here actually gives you a little bit of

00:09:52,080 --> 00:09:55,560
comfort because you could be fully

00:09:53,700 --> 00:09:57,090
imperative if you wish and determine

00:09:55,560 --> 00:09:58,620
each step along the way and when you get

00:09:57,090 --> 00:10:00,450
more trust in this system maybe offload

00:09:58,620 --> 00:10:02,430
some of the steps to a declarative

00:10:00,450 --> 00:10:07,980
engine which is why I definitely think

00:10:02,430 --> 00:10:10,050
we would need both I'm going to now

00:10:07,980 --> 00:10:12,390
foray into something completely foreign

00:10:10,050 --> 00:10:15,150
to all of you because we've never talked

00:10:12,390 --> 00:10:16,920
about it publicly before and it is a

00:10:15,150 --> 00:10:21,300
declarative rollout engine that we use

00:10:16,920 --> 00:10:23,580
in Google production I think you'll note

00:10:21,300 --> 00:10:24,750
there's a lot of parallels with

00:10:23,580 --> 00:10:27,180
kubernetes and that's fully

00:10:24,750 --> 00:10:29,990
unintentional we started our system

00:10:27,180 --> 00:10:32,760
slightly before the kubernetes team

00:10:29,990 --> 00:10:34,440
developed theirs but for some reason or

00:10:32,760 --> 00:10:38,880
other independently we both came up with

00:10:34,440 --> 00:10:40,770
very similar models we call it SMA

00:10:38,880 --> 00:10:42,540
internally it stands for systems

00:10:40,770 --> 00:10:44,280
modeling and actuation which is

00:10:42,540 --> 00:10:47,010
essentially an intent database where you

00:10:44,280 --> 00:10:49,110
put the shape of your services in called

00:10:47,010 --> 00:10:50,720
prod spec prod spec has a data model

00:10:49,110 --> 00:10:53,070
language and it has a storage system

00:10:50,720 --> 00:10:55,260
that you could compare with say a

00:10:53,070 --> 00:10:57,510
kubernetes api server an etsy D where

00:10:55,260 --> 00:10:58,740
you put in a bunch of resources and it

00:10:57,510 --> 00:11:00,420
has a controller stack that is

00:10:58,740 --> 00:11:02,160
constantly scanning production as well

00:11:00,420 --> 00:11:03,420
as the model and is reconciling

00:11:02,160 --> 00:11:04,520
production to look like what you

00:11:03,420 --> 00:11:07,459
intended

00:11:04,520 --> 00:11:10,370
if you have a couple of extra sort of

00:11:07,459 --> 00:11:12,260
tidbits that we accrued along the way in

00:11:10,370 --> 00:11:15,560
particular we have a thing called policy

00:11:12,260 --> 00:11:17,180
based rollouts is essentially a policy

00:11:15,560 --> 00:11:20,360
engine that determines under which

00:11:17,180 --> 00:11:22,670
circumstances should actuate occur as an

00:11:20,360 --> 00:11:25,130
example you might think of a calendar

00:11:22,670 --> 00:11:27,470
that blocks off pushes between you know

00:11:25,130 --> 00:11:29,300
Friday and Monday and so even if you had

00:11:27,470 --> 00:11:31,279
an intent change over the weekend that

00:11:29,300 --> 00:11:33,260
policy would forbid it to go out or

00:11:31,279 --> 00:11:35,390
another such policy might be hey if I'm

00:11:33,260 --> 00:11:37,190
moving a cell around you know for one

00:11:35,390 --> 00:11:39,200
place to the other I might want to bring

00:11:37,190 --> 00:11:39,740
up my new cell before I destroy my old

00:11:39,200 --> 00:11:41,690
one

00:11:39,740 --> 00:11:43,190
lest I run out of capacity things like

00:11:41,690 --> 00:11:44,990
that you can you can model as well

00:11:43,190 --> 00:11:49,100
declaratively and the engine takes it

00:11:44,990 --> 00:11:53,630
into account so how is this intent been

00:11:49,100 --> 00:11:55,760
expressed so we have three major sort of

00:11:53,630 --> 00:11:57,830
elements of this one is a partition and

00:11:55,760 --> 00:12:00,470
the other is of you and the third is an

00:11:57,830 --> 00:12:01,970
incarnation and partitions are

00:12:00,470 --> 00:12:05,450
administrative domains say they belong

00:12:01,970 --> 00:12:08,450
to a team or a service intents are views

00:12:05,450 --> 00:12:11,360
upon the data and incarnations are

00:12:08,450 --> 00:12:13,010
snapshots of how your sources of truth

00:12:11,360 --> 00:12:15,140
would look like at a certain point in

00:12:13,010 --> 00:12:17,240
time we use Piper internally at Google

00:12:15,140 --> 00:12:19,010
and so ours are CL based you could

00:12:17,240 --> 00:12:22,820
easily replace that with say github

00:12:19,010 --> 00:12:26,630
digests of emerge every time that

00:12:22,820 --> 00:12:31,360
happens this system will create these

00:12:26,630 --> 00:12:33,980
resources within the the incarnation

00:12:31,360 --> 00:12:36,470
model them with references amongst

00:12:33,980 --> 00:12:38,120
themselves you know this front end needs

00:12:36,470 --> 00:12:40,279
this back end and this back end needs

00:12:38,120 --> 00:12:42,820
this quote si or the other way around

00:12:40,279 --> 00:12:45,490
this quote uh provides - this front end

00:12:42,820 --> 00:12:47,959
directionality is not very important and

00:12:45,490 --> 00:12:49,250
this model is created by generators so

00:12:47,959 --> 00:12:51,230
there's not people that are tinkering

00:12:49,250 --> 00:12:52,970
you know with this model by hand they

00:12:51,230 --> 00:12:55,070
typically run a generator based on their

00:12:52,970 --> 00:12:58,760
sources of truth in piper ingots and

00:12:55,070 --> 00:13:00,440
they roll it into a complete snapshot of

00:12:58,760 --> 00:13:02,060
how production would look like at that

00:13:00,440 --> 00:13:04,100
point in time and put it in this

00:13:02,060 --> 00:13:05,750
incarnation and it gives us some really

00:13:04,100 --> 00:13:06,950
nice properties the incarnation is

00:13:05,750 --> 00:13:08,839
immutable so it's not that we're working

00:13:06,950 --> 00:13:11,000
at heads say as you would a Nakuru

00:13:08,839 --> 00:13:12,680
Nettie's api server we take snapshots of

00:13:11,000 --> 00:13:14,630
how the resources are supposed to look

00:13:12,680 --> 00:13:17,450
like at this point in time and this is

00:13:14,630 --> 00:13:20,300
sort of a hermetic and immutable

00:13:17,450 --> 00:13:23,900
a set of data everything we need to

00:13:20,300 --> 00:13:26,870
build that service on Borg or our other

00:13:23,900 --> 00:13:28,640
clouds at that point in time it makes

00:13:26,870 --> 00:13:31,430
rollbacks really convenience if you know

00:13:28,640 --> 00:13:33,950
that CL one one five seven was golden

00:13:31,430 --> 00:13:35,720
and Cl one two three four is not you can

00:13:33,950 --> 00:13:37,940
simply tell the kneeling please advance

00:13:35,720 --> 00:13:39,230
to one one five seven it will have

00:13:37,940 --> 00:13:43,640
everything it needs to build a service

00:13:39,230 --> 00:13:46,970
at that point in time so one of these

00:13:43,640 --> 00:13:48,800
services may look like a board job a

00:13:46,970 --> 00:13:50,840
front end that's talking to some

00:13:48,800 --> 00:13:53,660
back-end both of those board jobs new

00:13:50,840 --> 00:13:55,940
board quota to run in our in our cloud

00:13:53,660 --> 00:13:57,260
provider and we may have a big table

00:13:55,940 --> 00:14:00,020
which then in turn needs a big table

00:13:57,260 --> 00:14:02,720
quota to run as well these arrows are

00:14:00,020 --> 00:14:05,150
actually an important part of of this

00:14:02,720 --> 00:14:06,650
system it allows us to determine the

00:14:05,150 --> 00:14:08,600
order in which we have to actually

00:14:06,650 --> 00:14:11,690
things if we have multiple changes in a

00:14:08,600 --> 00:14:13,430
model at any given time so how does that

00:14:11,690 --> 00:14:15,980
actually work let us say that we take

00:14:13,430 --> 00:14:19,520
this intent that I just described and we

00:14:15,980 --> 00:14:22,160
compare it against production we have a

00:14:19,520 --> 00:14:25,670
bunch of assets resources that have a

00:14:22,160 --> 00:14:27,890
diff then we know the relationship

00:14:25,670 --> 00:14:31,160
between those resources and we can

00:14:27,890 --> 00:14:33,470
compute a dag on which we execute in

00:14:31,160 --> 00:14:35,270
this case the to the big table the

00:14:33,470 --> 00:14:37,820
orange box and the bore quota are the

00:14:35,270 --> 00:14:40,760
things that have changed depth first in

00:14:37,820 --> 00:14:43,790
the in the dag and so we know how to

00:14:40,760 --> 00:14:45,470
make those changes go away and then we

00:14:43,790 --> 00:14:46,640
rinse and repeat this is relatively

00:14:45,470 --> 00:14:49,160
straightforward for a reconciliation

00:14:46,640 --> 00:14:51,350
engine I guess so next time we compare

00:14:49,160 --> 00:14:53,240
it to prod that orange and red box are

00:14:51,350 --> 00:14:55,130
now good they have been pushed and they

00:14:53,240 --> 00:14:57,650
are at the intended State and so we see

00:14:55,130 --> 00:14:59,720
these two blue boxes and the green box

00:14:57,650 --> 00:15:02,450
left over and because there is again

00:14:59,720 --> 00:15:05,360
this ordering and dependency mapping we

00:15:02,450 --> 00:15:06,530
know that the bottom blue box would have

00:15:05,360 --> 00:15:08,090
to go next

00:15:06,530 --> 00:15:10,430
bottom flow box being some back-end

00:15:08,090 --> 00:15:14,349
board jobs somewhere so we go and push

00:15:10,430 --> 00:15:19,279
that and then you know rinse and repeat

00:15:14,349 --> 00:15:20,809
so this is going to be a little xkcd

00:15:19,279 --> 00:15:24,129
stick puppet that's attempting science

00:15:20,809 --> 00:15:26,419
and it models for the architecture of

00:15:24,129 --> 00:15:28,879
this reconciliation engine called

00:15:26,419 --> 00:15:31,729
annealing so the components involved

00:15:28,879 --> 00:15:33,799
here is users manipulate these sources

00:15:31,729 --> 00:15:36,979
of truth essentially pull requests right

00:15:33,799 --> 00:15:38,929
on get sore Peiper change lists to tell

00:15:36,979 --> 00:15:40,909
the system what they would like to have

00:15:38,929 --> 00:15:43,099
production look like and they store

00:15:40,909 --> 00:15:44,479
these in piper and there's other sources

00:15:43,099 --> 00:15:46,759
of truth as well that live outside of

00:15:44,479 --> 00:15:49,539
piper but let's for simplicity sake say

00:15:46,759 --> 00:15:52,729
piper is the place where we store the

00:15:49,539 --> 00:15:54,499
production state at any given time these

00:15:52,729 --> 00:15:56,299
are picked up by a generator which reads

00:15:54,499 --> 00:16:00,259
them and maps the dependencies between

00:15:56,299 --> 00:16:01,429
systems and emits a prod spec and that's

00:16:00,259 --> 00:16:05,239
that little diagram that I showed

00:16:01,429 --> 00:16:06,859
earlier so this diagram here is an

00:16:05,239 --> 00:16:08,839
incarnation at a certain point in time

00:16:06,859 --> 00:16:10,699
which is fully hermetic and all the

00:16:08,839 --> 00:16:12,559
information we need to be able to build

00:16:10,699 --> 00:16:16,249
that entire service from scratch at that

00:16:12,559 --> 00:16:18,919
point in time this is watched by an

00:16:16,249 --> 00:16:21,579
agent called annealing and annealing is

00:16:18,919 --> 00:16:25,009
continuously running a diff between

00:16:21,579 --> 00:16:29,449
production and the the state that is

00:16:25,009 --> 00:16:31,489
modeled in prod spec so it does this

00:16:29,449 --> 00:16:34,429
first by calling for each type of

00:16:31,489 --> 00:16:36,199
resource and assets plug-in it knows how

00:16:34,429 --> 00:16:38,599
to handle resources of that type say the

00:16:36,199 --> 00:16:40,069
board job or the big table which exposes

00:16:38,599 --> 00:16:42,409
a diff semantics if you've used

00:16:40,069 --> 00:16:44,329
terraform much like terraform has a diff

00:16:42,409 --> 00:16:47,209
semantics to see the difference between

00:16:44,329 --> 00:16:50,269
what I want and what is actually in in

00:16:47,209 --> 00:16:52,309
the runtime if no tips are found that's

00:16:50,269 --> 00:16:54,199
fine this asset is considered settled

00:16:52,309 --> 00:16:58,669
and stable so we advanced to maybe other

00:16:54,199 --> 00:17:04,009
assets that do have tips and in

00:16:58,669 --> 00:17:07,189
particular if we see a set of diffs then

00:17:04,009 --> 00:17:08,839
we'll ask a dag solver to create an

00:17:07,189 --> 00:17:12,019
ordering of changes that we would like

00:17:08,839 --> 00:17:14,779
to now apply so solvers job is to give

00:17:12,019 --> 00:17:17,139
us that dag we might have multiple Dax

00:17:14,779 --> 00:17:19,159
normally only four relationships of

00:17:17,139 --> 00:17:21,289
dependencies like I need this thing to

00:17:19,159 --> 00:17:23,480
exist but you can also imagine version

00:17:21,289 --> 00:17:25,939
dependencies I need this version to be

00:17:23,480 --> 00:17:26,720
at least X or at most Y sort of like

00:17:25,939 --> 00:17:31,070
apps might

00:17:26,720 --> 00:17:33,500
in package management solver assumes the

00:17:31,070 --> 00:17:37,460
responsibility of giving me the ordered

00:17:33,500 --> 00:17:40,970
dag to execute then when we have all of

00:17:37,460 --> 00:17:43,549
these dips that we want to get rid of we

00:17:40,970 --> 00:17:46,009
are going to ask a policy server hey can

00:17:43,549 --> 00:17:47,090
I get rid of this diff right now as I

00:17:46,009 --> 00:17:49,820
mentioned earlier you may have a

00:17:47,090 --> 00:17:51,350
calendar plugin that avoids pushing over

00:17:49,820 --> 00:17:53,169
the weekend or maybe over a holiday or

00:17:51,350 --> 00:17:56,450
like Black Friday or something like that

00:17:53,169 --> 00:17:58,549
or you may have none at all in which

00:17:56,450 --> 00:17:59,179
case annealing will happily make this

00:17:58,549 --> 00:18:01,639
difficult

00:17:59,179 --> 00:18:04,039
by simply calling a push semantics on

00:18:01,639 --> 00:18:05,779
the asset plugin we've now validated

00:18:04,039 --> 00:18:07,519
that this thing is ready to go and so

00:18:05,779 --> 00:18:10,100
we're now going to actually actuate it

00:18:07,519 --> 00:18:12,649
by updating the production state in the

00:18:10,100 --> 00:18:15,470
in the cloud provider in Borg or other

00:18:12,649 --> 00:18:17,210
types of resources and then we have many

00:18:15,470 --> 00:18:19,549
of these asset plug-ins essentially each

00:18:17,210 --> 00:18:21,230
resource type has one and provided they

00:18:19,549 --> 00:18:24,529
give us the diff and the push semantics

00:18:21,230 --> 00:18:28,340
we can add them to kneeling just fine

00:18:24,529 --> 00:18:30,379
and before I switch to maybe a little

00:18:28,340 --> 00:18:33,620
video I wanted to point out that

00:18:30,379 --> 00:18:35,659
annealing itself has no interest or

00:18:33,620 --> 00:18:37,820
desire to inspect the payload of the

00:18:35,659 --> 00:18:39,830
resources that it is handling what I

00:18:37,820 --> 00:18:41,779
mean with this is it doesn't look at

00:18:39,830 --> 00:18:43,490
what you're defining in your Borg job or

00:18:41,779 --> 00:18:45,110
in your kubernetes deployment it only

00:18:43,490 --> 00:18:47,779
looks at the relationship between them

00:18:45,110 --> 00:18:50,539
and it operates its dag and its policies

00:18:47,779 --> 00:18:52,309
exclusively on that mobile model in

00:18:50,539 --> 00:18:55,220
prospect without having to do deep

00:18:52,309 --> 00:18:57,470
inspection of the resources and that has

00:18:55,220 --> 00:18:58,970
a really positive benefit and also has

00:18:57,470 --> 00:19:00,350
some downsides the downsides are

00:18:58,970 --> 00:19:01,639
obviously you can make a little bit

00:19:00,350 --> 00:19:05,179
better decisions if you were to

00:19:01,639 --> 00:19:07,879
introspect the the asset payloads the

00:19:05,179 --> 00:19:10,250
actual resource definitions but the

00:19:07,879 --> 00:19:13,070
positive news is we can apply this thing

00:19:10,250 --> 00:19:15,110
to essentially any type of resource so

00:19:13,070 --> 00:19:19,370
we thought maybe we would run one for

00:19:15,110 --> 00:19:21,649
kubernetes it was about 2,000 lines of

00:19:19,370 --> 00:19:25,070
code to people spend maybe a week and a

00:19:21,649 --> 00:19:27,139
half writing it all right so this was a

00:19:25,070 --> 00:19:28,580
modest introduction to like four years

00:19:27,139 --> 00:19:30,950
of engineering work with a bunch of

00:19:28,580 --> 00:19:32,330
people in the SMA team that shows hey we

00:19:30,950 --> 00:19:35,179
can actually do pushes against

00:19:32,330 --> 00:19:36,710
kubernetes and perhaps also other clouds

00:19:35,179 --> 00:19:39,220
if we were to have these plugins that

00:19:36,710 --> 00:19:41,919
expose the push and if semantics again

00:19:39,220 --> 00:19:43,419
down stream API however as I mentioned

00:19:41,919 --> 00:19:45,520
before I really don't think fully

00:19:43,419 --> 00:19:48,370
declarative is the right model for all

00:19:45,520 --> 00:19:50,440
types of changes so we also call for an

00:19:48,370 --> 00:19:53,590
imperative workflow system that

00:19:50,440 --> 00:19:55,330
interacts with this thing and last year

00:19:53,590 --> 00:19:57,610
at the spinnaker conference we were just

00:19:55,330 --> 00:19:58,480
about to decide that spinnaker was that

00:19:57,610 --> 00:20:00,460
thing

00:19:58,480 --> 00:20:02,950
we made the decision shortly after the

00:20:00,460 --> 00:20:04,480
the one in Los Gatos and then we started

00:20:02,950 --> 00:20:07,090
actually implementing all this code so

00:20:04,480 --> 00:20:14,020
over to the people who did that dan and

00:20:07,090 --> 00:20:15,909
Jared yeah so as Ben said like we

00:20:14,020 --> 00:20:17,799
realized a need for a imperative

00:20:15,909 --> 00:20:19,960
sequencer spinnaker seemed to fit that

00:20:17,799 --> 00:20:22,780
need nicely so we said about the

00:20:19,960 --> 00:20:26,590
spinnaker for Borg project this slide

00:20:22,780 --> 00:20:28,450
shows you the stack of you know how we

00:20:26,590 --> 00:20:31,090
do our our deployment stack basically

00:20:28,450 --> 00:20:32,860
our mission and all this project was to

00:20:31,090 --> 00:20:37,090
make configs and binary deployments

00:20:32,860 --> 00:20:39,970
shaft safe fast easy reliable across

00:20:37,090 --> 00:20:41,770
both Borg and GCP that was a big selling

00:20:39,970 --> 00:20:43,539
point for us was it spinnaker if we

00:20:41,770 --> 00:20:45,159
could get it to talk to Borg could get

00:20:43,539 --> 00:20:48,970
us both any cloud we wanted that

00:20:45,159 --> 00:20:52,390
spinnaker could talk to you right now we

00:20:48,970 --> 00:20:53,620
are using spinnaker I'll let Dan talk

00:20:52,390 --> 00:20:55,960
about the modifications you made it's

00:20:53,620 --> 00:20:58,210
mostly vanilla I'll call it mostly

00:20:55,960 --> 00:21:00,039
vanilla we've made some changes to it

00:20:58,210 --> 00:21:03,159
obviously we are using the spinnaker you

00:21:00,039 --> 00:21:07,360
I native with some minor UI tweaks but

00:21:03,159 --> 00:21:09,510
nothing nothing major this shows where

00:21:07,360 --> 00:21:13,030
spinnaker fits in the stack we have our

00:21:09,510 --> 00:21:15,429
production platforms which anybody can

00:21:13,030 --> 00:21:17,230
use to define how they want to manage

00:21:15,429 --> 00:21:18,730
their deployments Spinnaker's double-o

00:21:17,230 --> 00:21:20,860
that releases in rollouts is the team I

00:21:18,730 --> 00:21:24,370
work on we manage releases and rollouts

00:21:20,860 --> 00:21:27,039
across all of Google and then SMA below

00:21:24,370 --> 00:21:28,990
that because SMA as PIM just showed does

00:21:27,039 --> 00:21:31,539
deployments really well and then we have

00:21:28,990 --> 00:21:35,010
our clouds below that that we can we

00:21:31,539 --> 00:21:35,010
have all our extra resources in

00:21:35,790 --> 00:21:40,590
so this is talking more specifically

00:21:38,370 --> 00:21:43,049
about the technologies we're using in

00:21:40,590 --> 00:21:45,870
this stack at the top here we have

00:21:43,049 --> 00:21:48,270
spinnaker our sequencer it's imperative

00:21:45,870 --> 00:21:52,049
it's do this then this then this as the

00:21:48,270 --> 00:21:53,340
ABC to do that we employ a couple of

00:21:52,049 --> 00:21:55,020
other services that we've written inside

00:21:53,340 --> 00:21:57,210
Google one of them is called target

00:21:55,020 --> 00:21:59,460
selection another one's called rollout

00:21:57,210 --> 00:22:02,580
analysis and then we have robot

00:21:59,460 --> 00:22:04,710
capabilities through another system and

00:22:02,580 --> 00:22:06,090
all spinnaker controls the imperative

00:22:04,710 --> 00:22:11,510
steps we push down declarative

00:22:06,090 --> 00:22:14,190
operations down to SMA this allows us to

00:22:11,510 --> 00:22:16,500
bridge the gap between spinnaker and our

00:22:14,190 --> 00:22:20,460
other declarative systems and the clouds

00:22:16,500 --> 00:22:23,179
they run on a little about each of these

00:22:20,460 --> 00:22:25,860
target selection kind of obviously named

00:22:23,179 --> 00:22:28,140
spinnaker gives it a set of things I

00:22:25,860 --> 00:22:30,179
want to do in target selection based on

00:22:28,140 --> 00:22:32,220
some configured policies says you can do

00:22:30,179 --> 00:22:33,330
this one and then spinnaker does that

00:22:32,220 --> 00:22:34,650
one and then when that's done it says

00:22:33,330 --> 00:22:36,000
okay now I've done that when I want to

00:22:34,650 --> 00:22:37,410
do these other ones and based on the

00:22:36,000 --> 00:22:41,820
policies target selection okay you can

00:22:37,410 --> 00:22:43,559
do that one again all through SMA rolled

00:22:41,820 --> 00:22:45,780
out analysis allows us to analyze each

00:22:43,559 --> 00:22:47,940
step you could do it after the first

00:22:45,780 --> 00:22:49,130
canary stage you could do it anywhere

00:22:47,940 --> 00:22:53,299
you want really in the pipeline

00:22:49,130 --> 00:22:53,299
typically we use it after canary

00:22:54,740 --> 00:22:59,130
rollback basically we can roll back

00:22:56,700 --> 00:23:02,640
everything like Pym said in a unit

00:22:59,130 --> 00:23:04,530
because we're using SMA makes it nice to

00:23:02,640 --> 00:23:08,730
for users to figure out how they can go

00:23:04,530 --> 00:23:10,260
backwards safely and I'm gonna turn it

00:23:08,730 --> 00:23:13,110
over to Dan to talk about specific

00:23:10,260 --> 00:23:15,840
implementation stuff okay great so how

00:23:13,110 --> 00:23:17,970
does this actually work so the red here

00:23:15,840 --> 00:23:20,340
are the modified spinnaker components

00:23:17,970 --> 00:23:23,549
not all spinnaker components are shown

00:23:20,340 --> 00:23:27,990
here Green is a single sort of API layer

00:23:23,549 --> 00:23:30,660
between spinnaker internal services and

00:23:27,990 --> 00:23:32,490
the yellow our internal Google services

00:23:30,660 --> 00:23:35,460
so in some cases spinnaker is just

00:23:32,490 --> 00:23:38,309
talking directly through a proxy to an

00:23:35,460 --> 00:23:40,530
acolyte abase canary analysis and target

00:23:38,309 --> 00:23:41,940
selection Jared's gonna be talking about

00:23:40,530 --> 00:23:43,740
target selection and canary analysis a

00:23:41,940 --> 00:23:45,780
little bit more in a second but the

00:23:43,740 --> 00:23:48,190
interesting component here is the

00:23:45,780 --> 00:23:54,539
kubernetes bridge

00:23:48,190 --> 00:23:54,539
which spinnaker uses to speak with SMA

00:23:55,630 --> 00:24:00,550
so what is this this kubernetes bridge

00:23:57,490 --> 00:24:04,060
that we've implanted so we have a coupon

00:24:00,550 --> 00:24:05,800
IDs compatible API with like custom

00:24:04,060 --> 00:24:08,590
resource definitions that is like

00:24:05,800 --> 00:24:10,750
kubernetes kinds that are work jobs

00:24:08,590 --> 00:24:12,760
spanner database target selection

00:24:10,750 --> 00:24:17,380
strategies and then controllers that

00:24:12,760 --> 00:24:19,240
that in turn actuate those resources and

00:24:17,380 --> 00:24:22,150
there's a lot of benefits here so

00:24:19,240 --> 00:24:26,650
kubernetes tools just work so cube CTL

00:24:22,150 --> 00:24:28,750
and of course spinnaker so this isn't

00:24:26,650 --> 00:24:30,430
exactly what we did because we've we've

00:24:28,750 --> 00:24:32,380
done a lot of work to make for jobs sort

00:24:30,430 --> 00:24:33,780
of native and first-class resources in

00:24:32,380 --> 00:24:37,600
spinnaker but as a first approximation

00:24:33,780 --> 00:24:39,640
spinnaker like takes kubernetes c RDS

00:24:37,600 --> 00:24:41,590
and applies read and write operations on

00:24:39,640 --> 00:24:44,020
them and so you can build up like

00:24:41,590 --> 00:24:46,210
sequencing like deployment rollouts of

00:24:44,020 --> 00:24:47,680
kubernetes CR DS without writing any

00:24:46,210 --> 00:24:48,910
code and so that's really a first

00:24:47,680 --> 00:24:52,080
approximation of what we did and then

00:24:48,910 --> 00:24:52,080
we've made it more native over time

00:24:55,240 --> 00:25:00,020
usually this on target selection so as I

00:24:58,580 --> 00:25:02,800
mentioned target selection is the thing

00:25:00,020 --> 00:25:05,270
that controls what should happen next

00:25:02,800 --> 00:25:08,180
this is an example of a target selection

00:25:05,270 --> 00:25:10,690
config this actually lives in praat spec

00:25:08,180 --> 00:25:15,890
this is a comes from a source of truth

00:25:10,690 --> 00:25:17,330
and so in this simple config you have

00:25:15,890 --> 00:25:19,040
filters and you have constraints right

00:25:17,330 --> 00:25:20,030
the filters filter out candidates and

00:25:19,040 --> 00:25:22,160
the constraints are what they have to

00:25:20,030 --> 00:25:23,750
meet to be a valuable answer and the

00:25:22,160 --> 00:25:24,950
filters in this case or I don't want to

00:25:23,750 --> 00:25:26,720
go anywhere where I'm doing maintenance

00:25:24,950 --> 00:25:29,030
I don't want to go anywhere that doesn't

00:25:26,720 --> 00:25:30,770
get any traffic and I don't want to go

00:25:29,030 --> 00:25:32,900
anywhere where the cell is not getting

00:25:30,770 --> 00:25:34,280
or is currently paging someone because

00:25:32,900 --> 00:25:37,460
it's probably not a good candidate for a

00:25:34,280 --> 00:25:38,900
canary and again this is very simple it

00:25:37,460 --> 00:25:40,250
has to be get getting at least ten

00:25:38,900 --> 00:25:42,530
percent of my growth global traffic

00:25:40,250 --> 00:25:44,420
right this is a this is the policy we

00:25:42,530 --> 00:25:45,740
use for doing our canary our first push

00:25:44,420 --> 00:25:48,380
so we want to make sure we get a

00:25:45,740 --> 00:25:51,440
somewhat representative canary for our

00:25:48,380 --> 00:25:53,030
first sale and we only want one of them

00:25:51,440 --> 00:26:00,290
the constraint is we only want one sale

00:25:53,030 --> 00:26:02,570
to come back when spinnaker is calling

00:26:00,290 --> 00:26:04,430
target selection it's getting the list

00:26:02,570 --> 00:26:07,700
of things that it wants to update again

00:26:04,430 --> 00:26:09,590
from prot spec and given for a given

00:26:07,700 --> 00:26:11,990
pipeline it knows these are the things

00:26:09,590 --> 00:26:13,310
that are affected by this pipeline these

00:26:11,990 --> 00:26:14,920
are the things I want to do next and

00:26:13,310 --> 00:26:18,080
target selection is given that list and

00:26:14,920 --> 00:26:19,820
responds appropriately this process just

00:26:18,080 --> 00:26:21,530
repeats it's not just for the canary

00:26:19,820 --> 00:26:24,380
step right we have a different target

00:26:21,530 --> 00:26:27,710
selection policy for the post canary

00:26:24,380 --> 00:26:29,300
steps and you can do you know I want to

00:26:27,710 --> 00:26:31,940
do one cell at a time I want to do a

00:26:29,300 --> 00:26:32,900
linear progression I want to do exploit

00:26:31,940 --> 00:26:34,340
exponential progression

00:26:32,900 --> 00:26:36,620
you can configure target selection to

00:26:34,340 --> 00:26:39,440
return anything you'd like basically and

00:26:36,620 --> 00:26:40,760
a lot of those spinnaker to declare the

00:26:39,440 --> 00:26:42,920
sequence of events while allowing they

00:26:40,760 --> 00:26:45,700
pushes to be declarative which is a

00:26:42,920 --> 00:26:47,840
pretty nice marriage of the two concepts

00:26:45,700 --> 00:26:51,110
we haven't mentioned any time you hear

00:26:47,840 --> 00:26:53,690
cell substitute yes sorry I my board

00:26:51,110 --> 00:26:55,550
concepts come in yeah so just make this

00:26:53,690 --> 00:26:57,650
a little more concrete so we're in per

00:26:55,550 --> 00:26:59,600
spinnaker board we don't use Spinnaker's

00:26:57,650 --> 00:27:02,990
native deploy step we use something we

00:26:59,600 --> 00:27:04,700
call a dynamic deploy that uses target

00:27:02,990 --> 00:27:06,179
selection so spinnaker doesn't know

00:27:04,700 --> 00:27:08,309
until runtime like

00:27:06,179 --> 00:27:10,169
which job is gonna be pushed where it's

00:27:08,309 --> 00:27:13,289
gonna be pushing them in like how it

00:27:10,169 --> 00:27:14,610
what order and how quickly so in

00:27:13,289 --> 00:27:17,700
practice that looks like something like

00:27:14,610 --> 00:27:20,309
giving me a canary cell spinnaker

00:27:17,700 --> 00:27:22,950
deploys in that cell then asked does a

00:27:20,309 --> 00:27:24,809
canary analysis and then comes back to

00:27:22,950 --> 00:27:26,850
target selection and says like what

00:27:24,809 --> 00:27:28,830
should I do next and like should I push

00:27:26,850 --> 00:27:31,080
the remaining of the cells or some of

00:27:28,830 --> 00:27:33,539
the cells and then target selection

00:27:31,080 --> 00:27:36,200
tells its beniker which jobs and which

00:27:33,539 --> 00:27:36,200
cells to push in

00:27:40,250 --> 00:27:45,590
and yeah as Dan mentioned we have a

00:27:42,799 --> 00:27:48,409
stage that does canary analysis Kayenta

00:27:45,590 --> 00:27:50,450
is the spinnaker concept this one is

00:27:48,409 --> 00:27:52,400
actually not Cayenne to proper because

00:27:50,450 --> 00:27:55,070
the metrics that we use are not

00:27:52,400 --> 00:27:57,380
available to spinnaker and so this

00:27:55,070 --> 00:27:58,909
actually uses our internal canary

00:27:57,380 --> 00:28:00,710
analysis service that we've had for

00:27:58,909 --> 00:28:02,600
years at Google but it's the same

00:28:00,710 --> 00:28:03,830
concept if you use Kayenta or any kind

00:28:02,600 --> 00:28:07,520
of canary analysis you're familiar with

00:28:03,830 --> 00:28:08,870
what this does you give it a one set of

00:28:07,520 --> 00:28:10,460
targets which is your experiment and

00:28:08,870 --> 00:28:13,730
another set of targets which is your

00:28:10,460 --> 00:28:15,350
control you may give it some custom

00:28:13,730 --> 00:28:17,330
metrics that you've defined that are

00:28:15,350 --> 00:28:19,909
specific to your application that define

00:28:17,330 --> 00:28:22,669
the health of your canary you may not

00:28:19,909 --> 00:28:24,559
like canary analysis internally we know

00:28:22,669 --> 00:28:26,600
a lot about the binaries we can learn a

00:28:24,559 --> 00:28:28,580
lot about them actually and so we have a

00:28:26,600 --> 00:28:31,010
bunch of default checks that come for

00:28:28,580 --> 00:28:32,270
free like crashes right we can we can

00:28:31,010 --> 00:28:34,010
detect for free without the user having

00:28:32,270 --> 00:28:37,700
to tell us that a crashing binaries bad

00:28:34,010 --> 00:28:39,110
that are crashing binaries bad and so

00:28:37,700 --> 00:28:41,210
there are a bunch of other checks you

00:28:39,110 --> 00:28:42,740
know some serving errors is never a good

00:28:41,210 --> 00:28:44,990
thing so that's automatically a default

00:28:42,740 --> 00:28:47,960
check but a user might want to configure

00:28:44,990 --> 00:28:49,520
other things for the application so when

00:28:47,960 --> 00:28:52,630
canary or when spinnaker has done this

00:28:49,520 --> 00:28:54,830
canary push via target selection it then

00:28:52,630 --> 00:28:57,530
calls canary analysis and says I've

00:28:54,830 --> 00:28:58,970
pushed this this cell compared to this

00:28:57,530 --> 00:29:02,360
other cell that's not pushed and give me

00:28:58,970 --> 00:29:03,860
a verdict and this graph is just an

00:29:02,360 --> 00:29:05,929
example of what a crash this is

00:29:03,860 --> 00:29:08,000
obviously bad push the red line if you

00:29:05,929 --> 00:29:09,559
the spiky line if you're have color

00:29:08,000 --> 00:29:12,530
blindness that could spike in line as a

00:29:09,559 --> 00:29:14,030
canary it's bad it's crashing and canary

00:29:12,530 --> 00:29:16,640
analysis correctly failed this and said

00:29:14,030 --> 00:29:18,049
you shouldn't proceed it which spinnaker

00:29:16,640 --> 00:29:19,400
would have stopped and would have thrown

00:29:18,049 --> 00:29:22,429
an error saying carry analysis didn't

00:29:19,400 --> 00:29:26,789
pass for this pipeline

00:29:22,429 --> 00:29:28,470
so xkcd lady here is saying that's great

00:29:26,789 --> 00:29:30,780
your humble bragging on all the stuff

00:29:28,470 --> 00:29:33,000
that you have at Google internally that

00:29:30,780 --> 00:29:36,720
is obviously all not available to us at

00:29:33,000 --> 00:29:38,850
all so why should I even care there is a

00:29:36,720 --> 00:29:39,990
16th answer to this we're actually

00:29:38,850 --> 00:29:42,840
interested in sharing this stuff a

00:29:39,990 --> 00:29:46,110
little bit more broadly we talked today

00:29:42,840 --> 00:29:48,390
about you know spinnaker and the

00:29:46,110 --> 00:29:49,799
internal google canary analysis service

00:29:48,390 --> 00:29:52,679
its kind of sort of looks like kantha

00:29:49,799 --> 00:29:54,720
but is a little bit different caz itself

00:29:52,679 --> 00:29:56,850
is not super inherent or specific to

00:29:54,720 --> 00:29:59,250
Google we like to use it with monarch

00:29:56,850 --> 00:30:02,669
but it might also very well use other

00:29:59,250 --> 00:30:07,140
time series you know stores data dog or

00:30:02,669 --> 00:30:09,870
Prometheus or Atlas or what have you I

00:30:07,140 --> 00:30:12,809
think it's a pretty good Canali a canary

00:30:09,870 --> 00:30:15,179
analysis service in terms of fidelity we

00:30:12,809 --> 00:30:17,039
have these dynamic stages right that we

00:30:15,179 --> 00:30:18,330
showed I like them a lot because it

00:30:17,039 --> 00:30:20,220
means we don't have to actually tinker

00:30:18,330 --> 00:30:22,140
with pipeline that much the pipeline has

00:30:20,220 --> 00:30:24,270
a stage that says rollout - canary and

00:30:22,140 --> 00:30:27,299
what to actually select to roll out -

00:30:24,270 --> 00:30:29,190
canary is done dynamically even if the

00:30:27,299 --> 00:30:32,850
prospect were to add cells or remove

00:30:29,190 --> 00:30:34,559
cells with cells I mean clusters then we

00:30:32,850 --> 00:30:37,640
have SMA annealing essentially this

00:30:34,559 --> 00:30:40,140
declarative engine that takes the model

00:30:37,640 --> 00:30:43,010
representation of intents and goes in

00:30:40,140 --> 00:30:45,900
wheels over production to get you there

00:30:43,010 --> 00:30:48,870
we currently use prod spec internally

00:30:45,900 --> 00:30:52,230
with proto based approach mostly because

00:30:48,870 --> 00:30:54,210
we started a long time ago I'm working

00:30:52,230 --> 00:30:56,549
on a demo internally to change that to

00:30:54,210 --> 00:30:58,710
be kubernetes CR DS instead which would

00:30:56,549 --> 00:31:01,950
be really nice I think because it's more

00:30:58,710 --> 00:31:03,630
idiomatic for most cloud users when I

00:31:01,950 --> 00:31:05,370
say kubernetes there I obviously mean

00:31:03,630 --> 00:31:07,289
the API machinery not the cluster

00:31:05,370 --> 00:31:09,179
management stuff so you might model

00:31:07,289 --> 00:31:10,909
board jobs in the kubernetes api server

00:31:09,179 --> 00:31:14,010
just as well as you might model

00:31:10,909 --> 00:31:15,450
kubernetes deployments in there we have

00:31:14,010 --> 00:31:18,179
target selection which is I think a

00:31:15,450 --> 00:31:19,679
really nice way to declare how you would

00:31:18,179 --> 00:31:22,049
like the rollout to look like not the

00:31:19,679 --> 00:31:23,610
specific order of places where you would

00:31:22,049 --> 00:31:25,320
like it to go and then we have that

00:31:23,610 --> 00:31:27,240
policy based rollouts which I didn't

00:31:25,320 --> 00:31:28,980
really talk about that much but is this

00:31:27,240 --> 00:31:31,020
component that you know shows us under

00:31:28,980 --> 00:31:33,270
which conditions should we actually do

00:31:31,020 --> 00:31:35,909
the actuation even if we determine that

00:31:33,270 --> 00:31:39,959
you're next should we be whacking this

00:31:35,909 --> 00:31:43,199
cluster now or maybe not I guess that's

00:31:39,959 --> 00:31:47,879
kind of all what we had I'm genuinely

00:31:43,199 --> 00:31:51,719
interested in this this question do you

00:31:47,879 --> 00:31:56,039
care about this at all I is you maybe

00:31:51,719 --> 00:31:58,409
you might maybe you don't we think it

00:31:56,039 --> 00:32:02,489
has a lot of Merit particularly between

00:31:58,409 --> 00:32:04,379
you know larger deployments of resources

00:32:02,489 --> 00:32:08,249
across many clusters or different types

00:32:04,379 --> 00:32:10,469
of of cloud providers and I would I

00:32:08,249 --> 00:32:13,649
would love it to be able to share more I

00:32:10,469 --> 00:32:15,299
have a mini survey it is one page I

00:32:13,649 --> 00:32:18,119
swear and all of the questions are

00:32:15,299 --> 00:32:20,369
optional you may want to take a look at

00:32:18,119 --> 00:32:25,440
it I'll narrate it as well it's Guji l

00:32:20,369 --> 00:32:27,690
capital S J capital X LF v it's a useful

00:32:25,440 --> 00:32:29,759
signal for me so please all take your

00:32:27,690 --> 00:32:32,129
cell phones out and tweet this because I

00:32:29,759 --> 00:32:35,029
don't have Twitter as we already

00:32:32,129 --> 00:32:35,029
established this morning

00:32:35,340 --> 00:32:37,400

YouTube URL: https://www.youtube.com/watch?v=b4PFHj9s5F8


