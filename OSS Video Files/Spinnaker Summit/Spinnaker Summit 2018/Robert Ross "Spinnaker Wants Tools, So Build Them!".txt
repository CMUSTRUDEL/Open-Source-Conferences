Title: Robert Ross "Spinnaker Wants Tools, So Build Them!"
Publication date: 2018-10-27
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,270 --> 00:00:05,380
[Music]

00:00:09,820 --> 00:00:13,259
[Music]

00:00:24,440 --> 00:00:26,500
you

00:00:27,190 --> 00:00:32,970
so but this is a story about namely we

00:00:30,550 --> 00:00:35,530
are an HR payroll and benefits company

00:00:32,970 --> 00:00:38,200
software-as-a-service we move about 1

00:00:35,530 --> 00:00:40,420
billion in payroll monthly we have

00:00:38,200 --> 00:00:42,010
around 100 engineering employees and we

00:00:40,420 --> 00:00:45,250
are moving to micro services for the

00:00:42,010 --> 00:00:48,820
past couple of years it's a very very

00:00:45,250 --> 00:00:51,010
slow process so our infrastructure we

00:00:48,820 --> 00:00:53,140
are running on kerbin a 1.9 we have been

00:00:51,010 --> 00:00:54,910
operating kubernetes in production for

00:00:53,140 --> 00:00:57,820
two and a half years so we're pretty

00:00:54,910 --> 00:00:59,980
avid with with the technology kubernetes

00:00:57,820 --> 00:01:03,309
1-9 for a little over a year now and

00:00:59,980 --> 00:01:05,619
we're slowly going to 112 jenkins fortes

00:01:03,309 --> 00:01:08,170
spinnaker using the v2 provider we did

00:01:05,619 --> 00:01:09,280
recently update from v1 where you're

00:01:08,170 --> 00:01:10,960
using Amazon for all of our

00:01:09,280 --> 00:01:16,360
infrastructure for kubernetes

00:01:10,960 --> 00:01:18,460
environments SEO 1.0 2g RPC and almost

00:01:16,360 --> 00:01:20,560
every single language available so if

00:01:18,460 --> 00:01:23,289
you can't tell we are very bleeding-edge

00:01:20,560 --> 00:01:25,119
we are we've we've had a lot of problems

00:01:23,289 --> 00:01:26,410
with all these technologies and one of

00:01:25,119 --> 00:01:29,830
the things to solve these problems is

00:01:26,410 --> 00:01:31,390
just to build your own tools so a little

00:01:29,830 --> 00:01:33,759
bit of background we did have two

00:01:31,390 --> 00:01:37,030
services and then now we have too many

00:01:33,759 --> 00:01:39,520
so we had rails monolith and a dotnet

00:01:37,030 --> 00:01:41,950
monolith so we had and now what we have

00:01:39,520 --> 00:01:43,300
is we have three dozen and slowly but

00:01:41,950 --> 00:01:45,970
surely climbing services in our

00:01:43,300 --> 00:01:48,640
architecture mostly all new services are

00:01:45,970 --> 00:01:51,610
being written in go or dotnet core

00:01:48,640 --> 00:01:52,690
actually dotnet core 2.1 so we also

00:01:51,610 --> 00:01:54,250
found ourselves with the improper

00:01:52,690 --> 00:01:56,349
tooling when we started doing this

00:01:54,250 --> 00:01:57,910
transition here has gone to micro

00:01:56,349 --> 00:01:59,709
services if you don't have the right

00:01:57,910 --> 00:02:03,160
tooling it's just more painful than just

00:01:59,709 --> 00:02:05,140
at latching on to your monolith right so

00:02:03,160 --> 00:02:06,670
this causes a lot of problems when you

00:02:05,140 --> 00:02:09,489
don't have these right tools to deploy

00:02:06,670 --> 00:02:12,940
because now you have this okay I have 36

00:02:09,489 --> 00:02:15,430
problems now instead of two so sre was

00:02:12,940 --> 00:02:16,989
responsible for all deploys so I'm on

00:02:15,430 --> 00:02:18,640
the SRU team at namely so you can

00:02:16,989 --> 00:02:21,190
imagine one of my Jobs was to literally

00:02:18,640 --> 00:02:23,459
run keep CTL apply locally from my

00:02:21,190 --> 00:02:26,410
machine to deploy code to our clusters

00:02:23,459 --> 00:02:28,870
that's not a good scenario right so not

00:02:26,410 --> 00:02:30,160
not exactly the right way to do things

00:02:28,870 --> 00:02:31,209
and the other problem with this is you

00:02:30,160 --> 00:02:33,760
don't really have a standard on how

00:02:31,209 --> 00:02:35,500
things deploy when and and who it's it's

00:02:33,760 --> 00:02:36,880
kind of an interesting problem when you

00:02:35,500 --> 00:02:40,000
don't have a deployment tool like

00:02:36,880 --> 00:02:40,690
spinnaker so how do you improve that

00:02:40,000 --> 00:02:42,400
that's

00:02:40,690 --> 00:02:44,710
that's a really like daunting thing okay

00:02:42,400 --> 00:02:48,220
you can't just say spinnaker right

00:02:44,710 --> 00:02:50,920
that's not a solution so our new initial

00:02:48,220 --> 00:02:55,000
solution was deploy from Jenkins

00:02:50,920 --> 00:02:57,460
why not it works has plug-ins for it so

00:02:55,000 --> 00:03:00,370
here's a hero's are a great idea we'll

00:02:57,460 --> 00:03:02,650
write a cubed - deployed Sh file and

00:03:00,370 --> 00:03:04,990
we'll add it to every single project

00:03:02,650 --> 00:03:07,150
that deploys and then we'll modify the

00:03:04,990 --> 00:03:09,430
Jenkins file to run this file will open

00:03:07,150 --> 00:03:10,570
30 + 4 requests to do this because you

00:03:09,430 --> 00:03:12,190
know we don't want to just give it to

00:03:10,570 --> 00:03:14,880
every project on the Jenkins node and

00:03:12,190 --> 00:03:19,110
boom we have continuous deployment right

00:03:14,880 --> 00:03:22,360
here's here's a part of it

00:03:19,110 --> 00:03:23,680
yeah this was not great this was running

00:03:22,360 --> 00:03:26,170
from Jenkins we had to give all of our

00:03:23,680 --> 00:03:27,970
Jenkins nodes kubernetes credentials you

00:03:26,170 --> 00:03:29,590
can see all types of fun stuff in here

00:03:27,970 --> 00:03:31,510
where it's like waiting for the deployed

00:03:29,590 --> 00:03:33,250
update that's actually doing SEDs and

00:03:31,510 --> 00:03:35,950
aux just to figure out what the current

00:03:33,250 --> 00:03:39,550
desired state is not not that good

00:03:35,950 --> 00:03:43,600
technology so it was about a few weeks

00:03:39,550 --> 00:03:46,060
into this at this moment we knew we had

00:03:43,600 --> 00:03:47,920
F done it was bad for app only took a

00:03:46,060 --> 00:03:51,690
couple of weeks to realize this and then

00:03:47,920 --> 00:03:53,800
we started to introduce spinnaker so I

00:03:51,690 --> 00:03:55,420
have a co-worker his name is Ray

00:03:53,800 --> 00:04:01,320
couldn't make it and he said yeah I can

00:03:55,420 --> 00:04:05,380
install it in three weeks hands-free I

00:04:01,320 --> 00:04:05,770
don't believe you why don't I believe

00:04:05,380 --> 00:04:07,630
you

00:04:05,770 --> 00:04:10,239
so I think open-source is one third of

00:04:07,630 --> 00:04:11,769
the problem - any business problem

00:04:10,239 --> 00:04:13,420
you're never gonna be able to install

00:04:11,769 --> 00:04:14,830
open source and boom solve a business

00:04:13,420 --> 00:04:16,780
problems just it just doesn't happen

00:04:14,830 --> 00:04:18,760
that way so installing and configuring

00:04:16,780 --> 00:04:19,390
tools like spinnaker is actually the

00:04:18,760 --> 00:04:21,190
easy part

00:04:19,390 --> 00:04:22,810
it might suck in the moment but that's

00:04:21,190 --> 00:04:24,720
the easiest part that you're gonna deal

00:04:22,810 --> 00:04:27,400
with when installing these tools

00:04:24,720 --> 00:04:29,080
educating documenting production Eliza

00:04:27,400 --> 00:04:31,780
what happens when it goes down who's on

00:04:29,080 --> 00:04:34,150
call all of that is is the hard part

00:04:31,780 --> 00:04:38,230
that's the that's the - and third part

00:04:34,150 --> 00:04:40,900
of this so we at namely we used a design

00:04:38,230 --> 00:04:42,370
doc I don't know process if you're

00:04:40,900 --> 00:04:44,350
familiar with like Google does this and

00:04:42,370 --> 00:04:46,090
basically we spend a lot of time

00:04:44,350 --> 00:04:48,280
sharpening the axe before we try to chop

00:04:46,090 --> 00:04:51,190
down the tree so our chief architect

00:04:48,280 --> 00:04:52,870
this is like his just he just says this

00:04:51,190 --> 00:04:55,150
we'd like bring up ideas and he's like

00:04:52,870 --> 00:04:57,370
write a design doc that's all he says

00:04:55,150 --> 00:04:59,260
so we had to come up with rules and

00:04:57,370 --> 00:05:00,699
requirements what is what do what are we

00:04:59,260 --> 00:05:03,490
trying to achieve and what are the like

00:05:00,699 --> 00:05:05,380
how are we gonna achieve it so pipeline

00:05:03,490 --> 00:05:07,360
configurations must have a source of

00:05:05,380 --> 00:05:08,650
truth that is versioned and get if

00:05:07,360 --> 00:05:09,960
you're using spinnaker right now this

00:05:08,650 --> 00:05:12,130
doesn't exist

00:05:09,960 --> 00:05:13,389
pipelines must automatically update in

00:05:12,130 --> 00:05:16,080
spinnaker when changes are pushed to

00:05:13,389 --> 00:05:18,100
github also something that did not exist

00:05:16,080 --> 00:05:20,410
releases must be recorded for all

00:05:18,100 --> 00:05:22,090
environments for every single project so

00:05:20,410 --> 00:05:23,740
these were pretty like we're looking at

00:05:22,090 --> 00:05:26,710
spinnaker and we're looking for these

00:05:23,740 --> 00:05:28,270
requirements and they don't exist the

00:05:26,710 --> 00:05:30,220
spinnaker just doesn't support these

00:05:28,270 --> 00:05:34,030
things out of the box and the way that

00:05:30,220 --> 00:05:38,110
we wanted to use it so part one pipeline

00:05:34,030 --> 00:05:39,940
config so what is a pipeline if you're

00:05:38,110 --> 00:05:41,289
using spinnaker you probably know this

00:05:39,940 --> 00:05:43,210
but we didn't want to use spinnaker

00:05:41,289 --> 00:05:45,310
pipelines for all of our deployments no

00:05:43,210 --> 00:05:47,139
ifs ands or buts that had to be had to

00:05:45,310 --> 00:05:49,030
be the case however spinnaker didn't

00:05:47,139 --> 00:05:52,270
have a tool for codifying at what a

00:05:49,030 --> 00:05:54,250
pipeline is that's sucks because we

00:05:52,270 --> 00:05:56,560
don't want our engineers managing their

00:05:54,250 --> 00:05:58,930
pipelines from the UI that's it's very

00:05:56,560 --> 00:06:01,120
error-prone it's you can't like create

00:05:58,930 --> 00:06:02,590
standards and you also you're gonna have

00:06:01,120 --> 00:06:03,669
drift if you have one application over

00:06:02,590 --> 00:06:05,229
here another one over here

00:06:03,669 --> 00:06:06,460
all of a sudden two months later this

00:06:05,229 --> 00:06:07,840
one's deploying completely differently

00:06:06,460 --> 00:06:10,360
than this one and nobody knows what's

00:06:07,840 --> 00:06:11,860
going on Sonne also not ideal so our

00:06:10,360 --> 00:06:14,680
decision was to actually just build this

00:06:11,860 --> 00:06:17,410
missing tool so where to start um

00:06:14,680 --> 00:06:19,030
spinnaker has a really neat feature of

00:06:17,410 --> 00:06:21,039
the pipeline UI where you can actually

00:06:19,030 --> 00:06:22,750
click Edit as JSON and you can see

00:06:21,039 --> 00:06:25,690
everything that spinnaker actually

00:06:22,750 --> 00:06:28,090
stores for its pipeline config it's a

00:06:25,690 --> 00:06:30,460
gigantic JSON blob but you can go ahead

00:06:28,090 --> 00:06:32,680
and just look at it which is great so we

00:06:30,460 --> 00:06:35,020
actually configured pipelines by hand

00:06:32,680 --> 00:06:37,810
first and then what we did is we would

00:06:35,020 --> 00:06:41,349
click Edit as JSON and we would get a

00:06:37,810 --> 00:06:46,000
giant blob of JSON for a configured

00:06:41,349 --> 00:06:48,070
project so what we did from there is we

00:06:46,000 --> 00:06:50,380
would actually create concrete go

00:06:48,070 --> 00:06:51,849
structs to represent this JSON so that

00:06:50,380 --> 00:06:55,389
was kind of the first step how can we

00:06:51,849 --> 00:06:57,280
represent a pipeline in go strokes and

00:06:55,389 --> 00:07:01,120
this tool actually became K its pipeline

00:06:57,280 --> 00:07:02,650
er so K its pipeline er has a ton of

00:07:01,120 --> 00:07:04,270
ghost trucks in it that actually

00:07:02,650 --> 00:07:06,130
represent what a spinnaker pipeline is

00:07:04,270 --> 00:07:09,009
and it doesn't even like scratch the

00:07:06,130 --> 00:07:10,869
surface of what spinnaker can do so this

00:07:09,009 --> 00:07:11,979
project is open-source it's on I should

00:07:10,869 --> 00:07:15,099
probably throw a link on here at some

00:07:11,979 --> 00:07:18,309
point it is a github.com slash namely /

00:07:15,099 --> 00:07:20,110
k8 stash pipeliner and you can actually

00:07:18,309 --> 00:07:23,889
use it for deploying to kubernetes and

00:07:20,110 --> 00:07:25,449
codifying your pipelines great but the

00:07:23,889 --> 00:07:28,059
reason that creating these strikes is

00:07:25,449 --> 00:07:29,830
valuable is because what you can do is

00:07:28,059 --> 00:07:31,719
now you can start to add attach behavior

00:07:29,830 --> 00:07:33,159
beyond the pipeline what if you want to

00:07:31,719 --> 00:07:35,259
inject things what if you want to

00:07:33,159 --> 00:07:37,749
actually do linting on your pipeline's

00:07:35,259 --> 00:07:39,580
how do you lint that the names are you

00:07:37,749 --> 00:07:41,110
know lowercase Dasher eyes you don't

00:07:39,580 --> 00:07:44,860
really have that option until you have

00:07:41,110 --> 00:07:47,050
something like this so now what we just

00:07:44,860 --> 00:07:49,749
need is now that we can represent a what

00:07:47,050 --> 00:07:51,009
a pipeline is to spinnaker we need to

00:07:49,749 --> 00:07:53,830
create something that represents a

00:07:51,009 --> 00:07:57,159
pipeline - namely so we need a pipeline

00:07:53,830 --> 00:07:59,379
config kind of definition so we had to

00:07:57,159 --> 00:08:01,599
make this up ourselves so it does

00:07:59,379 --> 00:08:03,520
include a set of pipeline config objects

00:08:01,599 --> 00:08:05,740
and these values are what compose a

00:08:03,520 --> 00:08:07,300
pipeline yeah mol file and this is what

00:08:05,740 --> 00:08:10,389
we use at namely for every single

00:08:07,300 --> 00:08:14,830
project you actually define your flow

00:08:10,389 --> 00:08:16,120
for your pipeline in the CMO file so it

00:08:14,830 --> 00:08:18,009
looks like this you can actually see

00:08:16,120 --> 00:08:20,020
that we actually we have a name

00:08:18,009 --> 00:08:21,789
application all of the triggers that you

00:08:20,020 --> 00:08:24,580
may want to have stages image

00:08:21,789 --> 00:08:26,110
descriptions which is if we use docker

00:08:24,580 --> 00:08:27,479
for everything so you know we're

00:08:26,110 --> 00:08:29,949
describing what an image might look like

00:08:27,479 --> 00:08:31,899
etc etc notifications parameters and

00:08:29,949 --> 00:08:34,690
there is a typo in there but it still

00:08:31,899 --> 00:08:36,370
works I promise okay so that's great and

00:08:34,690 --> 00:08:38,050
it actually allows us to do this that

00:08:36,370 --> 00:08:39,849
Ghost wreck means that we can create a

00:08:38,050 --> 00:08:42,250
pipeline demo file that looks just like

00:08:39,849 --> 00:08:43,959
this so you can see it's the name of the

00:08:42,250 --> 00:08:46,089
pipeline the application that it

00:08:43,959 --> 00:08:47,410
attaches to some of the triggers so we

00:08:46,089 --> 00:08:49,600
actually support Jenkins and webhook

00:08:47,410 --> 00:08:51,550
triggers that name Lee and then image

00:08:49,600 --> 00:08:52,839
descriptions basically describing what

00:08:51,550 --> 00:08:55,180
the docker images that we have to

00:08:52,839 --> 00:08:57,459
actually shove into this this pipeline

00:08:55,180 --> 00:08:59,529
at the end and then all of your stages

00:08:57,459 --> 00:09:01,750
so migrating a container deploying a

00:08:59,529 --> 00:09:03,730
container all of those fun pieces of a

00:09:01,750 --> 00:09:07,269
crew Benes pipeline that we we do it

00:09:03,730 --> 00:09:08,860
namely so what one of the key things

00:09:07,269 --> 00:09:11,019
here is that we wanted to find pipeline

00:09:08,860 --> 00:09:14,199
flow not specifics and what I mean by

00:09:11,019 --> 00:09:16,089
that is our pipeline is just deploying

00:09:14,199 --> 00:09:18,579
artifacts as deploying containers and

00:09:16,089 --> 00:09:20,380
crew Bay's manifests but the flow of

00:09:18,579 --> 00:09:21,430
that is really what we care about we

00:09:20,380 --> 00:09:23,110
care that we want

00:09:21,430 --> 00:09:24,520
migrated database first and then we want

00:09:23,110 --> 00:09:26,529
to deploy code and then we want to

00:09:24,520 --> 00:09:28,810
migrate and notify somebody that this

00:09:26,529 --> 00:09:30,279
happened that's the flow of a pipeline

00:09:28,810 --> 00:09:32,020
that's what spinnaker is really good at

00:09:30,279 --> 00:09:35,050
doing but what we don't want to define

00:09:32,020 --> 00:09:37,360
is what is getting deployed so for

00:09:35,050 --> 00:09:40,120
example we don't want it to find all of

00:09:37,360 --> 00:09:41,890
the pod specific container things so

00:09:40,120 --> 00:09:43,870
like the the registry that it attached

00:09:41,890 --> 00:09:45,670
that it's coming from environment

00:09:43,870 --> 00:09:47,560
variables the command that it needs to

00:09:45,670 --> 00:09:49,270
run all of all of those pieces that's

00:09:47,560 --> 00:09:50,410
the what is being deployed so we don't

00:09:49,270 --> 00:09:51,640
want to we don't we don't want to

00:09:50,410 --> 00:09:53,980
actually define that in our pipeline

00:09:51,640 --> 00:09:56,020
that animal instead what we do is we

00:09:53,980 --> 00:09:59,649
actually reference just kubernetes

00:09:56,020 --> 00:10:00,940
manifests out of the box so down here at

00:09:59,649 --> 00:10:02,380
the very bottom you can see that we're

00:10:00,940 --> 00:10:04,330
actually just referencing a crew

00:10:02,380 --> 00:10:06,459
beninese manifest file and this is

00:10:04,330 --> 00:10:08,050
awesome because if you're running on

00:10:06,459 --> 00:10:10,330
kubernetes right now and you want to

00:10:08,050 --> 00:10:12,580
move to spinnaker you can export this

00:10:10,330 --> 00:10:15,760
file as yeah Mille just do a get

00:10:12,580 --> 00:10:17,589
deployed oh yeah Mille and now you can

00:10:15,760 --> 00:10:19,330
put it in a pipeline that a mole file

00:10:17,589 --> 00:10:21,370
and you can deployed it with spinnaker

00:10:19,330 --> 00:10:23,140
that's awesome so that was what we did

00:10:21,370 --> 00:10:25,180
we actually just brought down all of

00:10:23,140 --> 00:10:27,760
these files and reference them in our

00:10:25,180 --> 00:10:29,950
tool and then what we can do is we can

00:10:27,760 --> 00:10:32,380
actually render a pipeline using using

00:10:29,950 --> 00:10:34,300
just that manifest one problem though

00:10:32,380 --> 00:10:37,630
who here is using the crew Bernays be

00:10:34,300 --> 00:10:39,100
one provider few of us has anyone

00:10:37,630 --> 00:10:41,170
switched to the v2 providers have been

00:10:39,100 --> 00:10:42,400
using that one so those the people that

00:10:41,170 --> 00:10:44,709
just raised their hands are much happier

00:10:42,400 --> 00:10:46,800
than people with that previously raised

00:10:44,709 --> 00:10:49,930
their hands and the reason is is because

00:10:46,800 --> 00:10:52,870
spinnaker I don't know the history here

00:10:49,930 --> 00:10:56,650
I'm not on the team but it had its own

00:10:52,870 --> 00:10:59,140
flavor of what a kubernetes object is as

00:10:56,650 --> 00:11:02,620
JSON so that meant that we had to

00:10:59,140 --> 00:11:04,450
basically recreate kubernetes objects in

00:11:02,620 --> 00:11:06,610
ghosts trucks because they're slightly

00:11:04,450 --> 00:11:08,380
different for the v1 provider than they

00:11:06,610 --> 00:11:12,190
are in the actual v2 provider because v2

00:11:08,380 --> 00:11:13,930
just uses the actual spec and that

00:11:12,190 --> 00:11:16,540
caused a lot of problems for us because

00:11:13,930 --> 00:11:18,579
we would discover that oh we wanted to

00:11:16,540 --> 00:11:20,649
use like a different type of container

00:11:18,579 --> 00:11:22,899
end so we actually had to create

00:11:20,649 --> 00:11:26,050
recreate all of these go strikes for

00:11:22,899 --> 00:11:27,940
every part of a container we can deploy

00:11:26,050 --> 00:11:30,430
a via spinnaker and then we had a

00:11:27,940 --> 00:11:32,440
problem like oh it we don't have pod

00:11:30,430 --> 00:11:34,089
security context so we just had to do

00:11:32,440 --> 00:11:34,780
this and we just we just gave up on

00:11:34,089 --> 00:11:36,670
trying to like

00:11:34,780 --> 00:11:38,110
Search and Destroy and we just anytime

00:11:36,670 --> 00:11:41,050
we found it we would just open a new

00:11:38,110 --> 00:11:43,120
pork so if you look at Kade's pipeliner

00:11:41,050 --> 00:11:45,130
it looks like it had a lot of pull

00:11:43,120 --> 00:11:46,930
requests like a lot of activity half of

00:11:45,130 --> 00:11:48,400
them they're just this it's because we

00:11:46,930 --> 00:11:49,450
were just we are finding problems that

00:11:48,400 --> 00:11:54,940
it just didn't support something like

00:11:49,450 --> 00:11:56,980
host path so while that process was a

00:11:54,940 --> 00:11:58,870
long time took like two months to get to

00:11:56,980 --> 00:12:00,970
a point where we actually had the proper

00:11:58,870 --> 00:12:03,220
JSON we did eventually get what we want

00:12:00,970 --> 00:12:05,890
so you can see up here running Cades

00:12:03,220 --> 00:12:07,480
pipeline or create test pipeline piping

00:12:05,890 --> 00:12:09,810
in a JQ to get pretty format and you can

00:12:07,480 --> 00:12:11,980
actually see that this is spinnaker JSON

00:12:09,810 --> 00:12:15,190
for v2 but I didn't have a better

00:12:11,980 --> 00:12:17,200
screenshot so we got spinnaker pipeline

00:12:15,190 --> 00:12:20,020
JSON that's great because now what we

00:12:17,200 --> 00:12:21,640
can do is remember that edit as JSON we

00:12:20,020 --> 00:12:24,700
can actually just go back to that UI

00:12:21,640 --> 00:12:27,640
click edit as JSON and we have a new

00:12:24,700 --> 00:12:30,610
pipeline so and then boom I have a

00:12:27,640 --> 00:12:32,140
pipeline I have I don't know it's like

00:12:30,610 --> 00:12:33,760
seven stages in there that's a pipeline

00:12:32,140 --> 00:12:37,030
for in staging and production deploys

00:12:33,760 --> 00:12:39,760
from a like a hundred line long yell

00:12:37,030 --> 00:12:42,310
file so pretty sweet right really easy

00:12:39,760 --> 00:12:44,050
to create a pipeline from just manifest

00:12:42,310 --> 00:12:48,550
files that you already probably have in

00:12:44,050 --> 00:12:51,190
kerbin at ease so what are the winds

00:12:48,550 --> 00:12:52,930
here never manage the via the UI with

00:12:51,190 --> 00:12:55,420
the exception of you know going and

00:12:52,930 --> 00:12:57,400
clicking at it as JSON all of our

00:12:55,420 --> 00:12:58,840
pipeline ml files are in get now so

00:12:57,400 --> 00:13:00,910
we're at version control that means that

00:12:58,840 --> 00:13:02,290
we can actually revert pipelines if you

00:13:00,910 --> 00:13:05,110
make a change to the spinnaker pipeline

00:13:02,290 --> 00:13:07,300
via the UI and you break something good

00:13:05,110 --> 00:13:08,950
luck but if you are using this kind of

00:13:07,300 --> 00:13:10,660
technique you can actually you know

00:13:08,950 --> 00:13:13,630
revert the commit regenerate the

00:13:10,660 --> 00:13:15,880
pipeline JSON and you're good to go so

00:13:13,630 --> 00:13:17,830
revert stew and then a track record of

00:13:15,880 --> 00:13:19,060
changed this as well another thing in

00:13:17,830 --> 00:13:20,770
spinnaker doesn't do very well as an

00:13:19,060 --> 00:13:22,630
audit log of who's changing pipelines so

00:13:20,770 --> 00:13:24,580
now since this isn't get wheat and we

00:13:22,630 --> 00:13:26,200
know who changed it and everything okay

00:13:24,580 --> 00:13:26,980
so alternatives considered we could have

00:13:26,200 --> 00:13:28,120
been enabled

00:13:26,980 --> 00:13:29,860
we could have configured every project

00:13:28,120 --> 00:13:31,870
manually and rolled that out without

00:13:29,860 --> 00:13:34,120
version control we could or with s3 it

00:13:31,870 --> 00:13:36,280
sounds like we could also let teams own

00:13:34,120 --> 00:13:37,930
their own process but the long term

00:13:36,280 --> 00:13:40,060
spend of that is pretty enormous because

00:13:37,930 --> 00:13:41,620
you're configuring the UI is tedious and

00:13:40,060 --> 00:13:42,670
pretty error-prone and a lot in a lot of

00:13:41,620 --> 00:13:44,380
scenarios

00:13:42,670 --> 00:13:46,690
linear scale of time spent as we add

00:13:44,380 --> 00:13:48,820
more applications to to our project so

00:13:46,690 --> 00:13:51,560
not ideal

00:13:48,820 --> 00:13:53,060
so one of the things that I really like

00:13:51,560 --> 00:13:55,250
I really like this quote from Kent Beck

00:13:53,060 --> 00:13:57,170
was make the change easy and then make

00:13:55,250 --> 00:13:59,720
the easy change so we could have just

00:13:57,170 --> 00:14:02,089
you know said here's spinnaker go and

00:13:59,720 --> 00:14:04,040
configure everything but instead we said

00:14:02,089 --> 00:14:05,899
let's spend the time upfront let's make

00:14:04,040 --> 00:14:08,209
this an easy transition to go to

00:14:05,899 --> 00:14:10,519
kubernetes and on spinnaker let's make

00:14:08,209 --> 00:14:13,370
it easy to just do that one step and

00:14:10,519 --> 00:14:14,420
we'll do all the legwork upfront when

00:14:13,370 --> 00:14:16,279
that's what kubernetes pipeliner

00:14:14,420 --> 00:14:17,839
actually did for us so by creating these

00:14:16,279 --> 00:14:20,540
concrete types we can represent a

00:14:17,839 --> 00:14:22,160
spinnaker pipeline very easily and then

00:14:20,540 --> 00:14:23,600
what we can do is move on to other

00:14:22,160 --> 00:14:25,910
things now that we have these defined

00:14:23,600 --> 00:14:30,500
types and processes to do other really

00:14:25,910 --> 00:14:35,209
cool things part two automatic pipeline

00:14:30,500 --> 00:14:37,160
updates so avoiding the UI is a service

00:14:35,209 --> 00:14:38,779
and these are my personal opinions

00:14:37,160 --> 00:14:41,209
I love spinnaker we use for every

00:14:38,779 --> 00:14:43,339
project but for the UX for managing

00:14:41,209 --> 00:14:45,889
pipelines is a little clunky in my

00:14:43,339 --> 00:14:46,699
opinion UI but it's it's for a good

00:14:45,889 --> 00:14:49,160
reason

00:14:46,699 --> 00:14:51,769
UI UX is is really hard to do when

00:14:49,160 --> 00:14:54,260
something can do so much a good example

00:14:51,769 --> 00:14:56,870
is anyone here use Amazon Web Services I

00:14:54,260 --> 00:14:58,639
mean it's just the UI is it's kind of

00:14:56,870 --> 00:15:00,589
crazy right because it can just do so

00:14:58,639 --> 00:15:03,709
much it's so powerful and that's a great

00:15:00,589 --> 00:15:05,120
problem to have but for us we didn't

00:15:03,709 --> 00:15:07,910
really want to you know deal with this

00:15:05,120 --> 00:15:10,190
problem so our ideal flow then becomes

00:15:07,910 --> 00:15:12,440
instead of pasting JSON into a text

00:15:10,190 --> 00:15:15,110
field we want this to actually be

00:15:12,440 --> 00:15:16,970
automatic so whatever emerge is actually

00:15:15,110 --> 00:15:18,410
performed on github what we want to do

00:15:16,970 --> 00:15:21,110
is we want to update the relevant

00:15:18,410 --> 00:15:24,769
spinnaker pipeline for the pipeline to

00:15:21,110 --> 00:15:26,180
animal that exists in that project so we

00:15:24,769 --> 00:15:27,680
clone the project down run a case

00:15:26,180 --> 00:15:31,160
pipeline or automatically and then paste

00:15:27,680 --> 00:15:34,399
it to Spinnaker's gate API so we have a

00:15:31,160 --> 00:15:36,290
project called estuary so here's the

00:15:34,399 --> 00:15:38,930
flow get howl get web hook goes to

00:15:36,290 --> 00:15:40,850
estuary estuary does they get clone runs

00:15:38,930 --> 00:15:43,339
Kate's pipe liner and then posts it to

00:15:40,850 --> 00:15:46,430
spinnaker gate so this is something that

00:15:43,339 --> 00:15:48,500
we've built internally preemptively it's

00:15:46,430 --> 00:15:50,060
not open source right now I started

00:15:48,500 --> 00:15:53,689
looking at open sourcing it last night

00:15:50,060 --> 00:15:55,250
but there's a lot of things that I would

00:15:53,689 --> 00:15:58,370
embarrass myself so we're not just gonna

00:15:55,250 --> 00:16:00,410
we're not gonna do that yet so but

00:15:58,370 --> 00:16:01,910
estuary is pretty simple it's a HTTP

00:16:00,410 --> 00:16:03,650
server written in go

00:16:01,910 --> 00:16:06,470
receives good of WebEx built pipeline

00:16:03,650 --> 00:16:08,450
config and then updates spinnaker so the

00:16:06,470 --> 00:16:09,950
nice thing looking back right this Cades

00:16:08,450 --> 00:16:12,410
pipeline or tool because we have this

00:16:09,950 --> 00:16:14,900
tool that allows us to codify pipelines

00:16:12,410 --> 00:16:16,400
we can actually just import that because

00:16:14,900 --> 00:16:18,440
we wrote it and go so now we have this

00:16:16,400 --> 00:16:20,510
this great package they import it into

00:16:18,440 --> 00:16:23,420
our estuary go server and now we can

00:16:20,510 --> 00:16:24,650
build pipelines pretty easily and then

00:16:23,420 --> 00:16:26,390
the other really nice thing about this

00:16:24,650 --> 00:16:28,880
as well is that every project that

00:16:26,390 --> 00:16:30,320
namely gets gets config automatically

00:16:28,880 --> 00:16:32,600
without adding it to their project

00:16:30,320 --> 00:16:34,250
because we have the ability to to

00:16:32,600 --> 00:16:35,690
actually clone this in in run case

00:16:34,250 --> 00:16:38,690
pipeline it we can actually modify the

00:16:35,690 --> 00:16:40,840
pipeline in memory first and inject

00:16:38,690 --> 00:16:43,070
things like a global config map variable

00:16:40,840 --> 00:16:45,050
something like a secret a secret

00:16:43,070 --> 00:16:46,610
reference that doesn't exist in your

00:16:45,050 --> 00:16:48,200
manifest but we know you're gonna need

00:16:46,610 --> 00:16:50,180
it based on like some annotation in your

00:16:48,200 --> 00:16:53,450
project really really cool things that

00:16:50,180 --> 00:16:55,910
we can get away with one of the problems

00:16:53,450 --> 00:16:57,770
though is we we try to configure gate to

00:16:55,910 --> 00:16:59,480
authenticate we have I'm sorry we've

00:16:57,770 --> 00:17:02,180
configured gates authenticate via github

00:16:59,480 --> 00:17:05,420
and an x.509 certificate I say gate

00:17:02,180 --> 00:17:08,950
really what I mean is just spinnaker so

00:17:05,420 --> 00:17:08,950
using the x.509 syrup

00:17:08,959 --> 00:17:14,510
to to spinnaker without you know a login

00:17:11,209 --> 00:17:17,300
which is great and we can update from

00:17:14,510 --> 00:17:20,660
estuary but what this request actually

00:17:17,300 --> 00:17:23,020
looked like we didn't really know so

00:17:20,660 --> 00:17:25,940
spinnaker has a swagger file for its API

00:17:23,020 --> 00:17:28,370
we did just find it easier to just look

00:17:25,940 --> 00:17:30,590
at the request though because it is an

00:17:28,370 --> 00:17:33,170
angular app we just what we did is we

00:17:30,590 --> 00:17:35,030
went into the UI and we updated the

00:17:33,170 --> 00:17:37,370
config we opened up chrome developer

00:17:35,030 --> 00:17:39,020
tools hit submit and we just copied what

00:17:37,370 --> 00:17:40,940
that request looked like it was a little

00:17:39,020 --> 00:17:42,290
bit easier for us the swagger thing

00:17:40,940 --> 00:17:43,580
there was there's a website that was

00:17:42,290 --> 00:17:45,800
hosting the swagger file but it didn't

00:17:43,580 --> 00:17:47,810
it seemed a little broken so this is the

00:17:45,800 --> 00:17:49,160
approach that we took but once we

00:17:47,810 --> 00:17:52,610
figured it out we can actually easily

00:17:49,160 --> 00:17:54,890
update the pipeline so here's what we're

00:17:52,610 --> 00:17:56,870
gonna see I'm not a fan of live demos

00:17:54,890 --> 00:17:59,120
they never go well for me so you're

00:17:56,870 --> 00:18:01,100
gonna see a simple pipeline ml file get

00:17:59,120 --> 00:18:02,420
updated you're gonna see and then

00:18:01,100 --> 00:18:03,980
estuary in the background is actually

00:18:02,420 --> 00:18:05,660
going to receive a github webhook

00:18:03,980 --> 00:18:07,120
and then estuary is actually going to

00:18:05,660 --> 00:18:11,720
clone and update this pipeline

00:18:07,120 --> 00:18:13,940
automatically release logs so this is

00:18:11,720 --> 00:18:16,250
something that we really wanted

00:18:13,940 --> 00:18:18,049
I'm sure we could do this vs3 as well

00:18:16,250 --> 00:18:21,590
but we had a few other requirements that

00:18:18,049 --> 00:18:23,480
we wanted on our release logs so what is

00:18:21,590 --> 00:18:25,279
it release log very simple structured

00:18:23,480 --> 00:18:27,500
entry of what was deployed when and

00:18:25,279 --> 00:18:29,620
maybe some other simple metadata maybe a

00:18:27,500 --> 00:18:32,269
JIRA ticket that was associated with it

00:18:29,620 --> 00:18:34,610
stored forever most recent first in our

00:18:32,269 --> 00:18:36,409
case can be used for identifying what

00:18:34,610 --> 00:18:38,330
release broke what which is something

00:18:36,409 --> 00:18:39,799
that we you know anytime we deploy

00:18:38,330 --> 00:18:41,320
sometimes something might break so

00:18:39,799 --> 00:18:44,539
knowing what was just deployed is great

00:18:41,320 --> 00:18:46,070
metrics so we can actually query when do

00:18:44,539 --> 00:18:47,659
we deploy and when two things break who

00:18:46,070 --> 00:18:49,029
deploys the most give out maybe an

00:18:47,659 --> 00:18:51,860
Amazon gift card or something like that

00:18:49,029 --> 00:18:53,840
and release managers love it so you know

00:18:51,860 --> 00:18:57,110
you got to have it so how do you create

00:18:53,840 --> 00:19:00,110
these Long's so spinnaker has a module

00:18:57,110 --> 00:19:02,779
called echo that can send webhook

00:19:00,110 --> 00:19:04,370
requests on task events so what we've

00:19:02,779 --> 00:19:06,169
done is we've configured a code to send

00:19:04,370 --> 00:19:08,809
webhooks to our release management

00:19:06,169 --> 00:19:11,059
software and release management service

00:19:08,809 --> 00:19:12,649
parses the web hook and creates log

00:19:11,059 --> 00:19:15,200
entries when pipeline stages are

00:19:12,649 --> 00:19:17,659
complete so this is something that we've

00:19:15,200 --> 00:19:19,490
we've done so spinnaker echo to the

00:19:17,659 --> 00:19:22,399
release management service and then

00:19:19,490 --> 00:19:28,680
storage so what should we use for

00:19:22,399 --> 00:19:34,770
storage Google sheets

00:19:28,680 --> 00:19:37,350
oh yeah no I'm not kidding hmm oh yeah

00:19:34,770 --> 00:19:38,760
so here's what we do you can see in here

00:19:37,350 --> 00:19:40,590
it is a little bit small up there sorry

00:19:38,760 --> 00:19:42,450
but we actually what the release

00:19:40,590 --> 00:19:45,390
management service does is it's actually

00:19:42,450 --> 00:19:47,010
gonna read some of the spinnaker trigger

00:19:45,390 --> 00:19:48,240
metadata so we actually send like the

00:19:47,010 --> 00:19:49,830
current commit the project and

00:19:48,240 --> 00:19:51,510
everything like that and then what the

00:19:49,830 --> 00:19:53,100
release management service does is hits

00:19:51,510 --> 00:19:55,080
all these different api's and will

00:19:53,100 --> 00:19:58,050
actually create like the github diff

00:19:55,080 --> 00:20:00,780
link maybe a JIRA tickets um summary

00:19:58,050 --> 00:20:03,240
that's XYZ and then every everything

00:20:00,780 --> 00:20:04,710
just gets dumped into this and you can

00:20:03,240 --> 00:20:06,660
see at the very bottom down there that's

00:20:04,710 --> 00:20:07,680
theirs in stage in productions so if you

00:20:06,660 --> 00:20:09,240
want to know which environment just

00:20:07,680 --> 00:20:11,100
switch the sheep that you're looking at

00:20:09,240 --> 00:20:12,930
and you know this actually works pretty

00:20:11,100 --> 00:20:14,430
well so how do you even get started with

00:20:12,930 --> 00:20:16,650
this payload so this is something that

00:20:14,430 --> 00:20:19,020
we and maybe this isn't another

00:20:16,650 --> 00:20:21,240
oversight on our point but we could not

00:20:19,020 --> 00:20:24,630
really find what this payload looked

00:20:21,240 --> 00:20:26,370
like there was there's like one small

00:20:24,630 --> 00:20:29,580
example but it doesn't cover the whole

00:20:26,370 --> 00:20:32,310
thing so little did we know that I also

00:20:29,580 --> 00:20:33,360
that these payloads are enormous they're

00:20:32,310 --> 00:20:35,610
gigantic

00:20:33,360 --> 00:20:37,890
so we tried using a couple services we

00:20:35,610 --> 00:20:39,780
used request bin and request Benton was

00:20:37,890 --> 00:20:41,610
truncating is like hell no we can't use

00:20:39,780 --> 00:20:43,080
this and then requests been shut down

00:20:41,610 --> 00:20:46,260
probably because we sent all of our

00:20:43,080 --> 00:20:47,790
spinnaker vents to it and so what we

00:20:46,260 --> 00:20:49,170
ended up doing we found this awesome one

00:20:47,790 --> 00:20:52,110
we actually found a web hook on site

00:20:49,170 --> 00:20:53,490
really really cool I recommend if you're

00:20:52,110 --> 00:20:57,210
building something with web pics this is

00:20:53,490 --> 00:20:59,190
a really really awesome tool and but and

00:20:57,210 --> 00:21:00,990
it was able to handle these payloads so

00:20:59,190 --> 00:21:03,600
that was actually the biggest benefit of

00:21:00,990 --> 00:21:05,850
this so you know you just go to buy that

00:21:03,600 --> 00:21:07,320
site it creates a URL and you can see at

00:21:05,850 --> 00:21:11,130
the top right there you get a nice

00:21:07,320 --> 00:21:13,020
little you know UUID URL so then what we

00:21:11,130 --> 00:21:15,210
did is we just took that URL with web

00:21:13,020 --> 00:21:17,640
hook site gave us we modified the echo

00:21:15,210 --> 00:21:19,880
config to send all of our payloads to it

00:21:17,640 --> 00:21:21,900
and then kick off the pipeline's

00:21:19,880 --> 00:21:23,400
preferably something without sensitive

00:21:21,900 --> 00:21:24,960
data because you know we don't own what

00:21:23,400 --> 00:21:26,460
like that site we don't know we just we

00:21:24,960 --> 00:21:27,960
just kind of care about like just seeing

00:21:26,460 --> 00:21:29,400
the structure so don't kick off a

00:21:27,960 --> 00:21:31,290
pipeline that's deploying secrets or

00:21:29,400 --> 00:21:33,480
something like that and then we just

00:21:31,290 --> 00:21:34,860
watched web hooks site dot fill up so I

00:21:33,480 --> 00:21:37,500
don't have a video for this but you can

00:21:34,860 --> 00:21:41,480
just imagine web hooks site getting 12

00:21:37,500 --> 00:21:43,700
requests in a split second the amount of

00:21:41,480 --> 00:21:44,960
don't write this in something don't

00:21:43,700 --> 00:21:47,809
write something that's gonna receive

00:21:44,960 --> 00:21:51,230
echo webhooks that's not performant

00:21:47,809 --> 00:21:54,470
it sends a lot of webhooks very quickly

00:21:51,230 --> 00:21:57,140
in there very big so naturally release

00:21:54,470 --> 00:21:59,750
management service was written in go for

00:21:57,140 --> 00:22:02,960
us so but once we had this payload that

00:21:59,750 --> 00:22:04,400
we looked at website we were able to

00:22:02,960 --> 00:22:06,020
kind of create these strikes us

00:22:04,400 --> 00:22:07,400
following the same pattern that we did

00:22:06,020 --> 00:22:09,559
for Cades pipeline and really just doing

00:22:07,400 --> 00:22:11,210
some introspection of what Spinnaker's

00:22:09,559 --> 00:22:13,820
is really doing under the hood with its

00:22:11,210 --> 00:22:15,770
it's JSON payloads so we can see here

00:22:13,820 --> 00:22:18,559
spinnaker event details content event ID

00:22:15,770 --> 00:22:20,750
and this is a very very very bare-bones

00:22:18,559 --> 00:22:23,150
interpretation of a spinnaker event it

00:22:20,750 --> 00:22:26,540
does a lot more but for our purposes

00:22:23,150 --> 00:22:30,890
this is all we really needed so when we

00:22:26,540 --> 00:22:32,600
do release Google sheets as a service

00:22:30,890 --> 00:22:34,669
you know maybe we can ask for some

00:22:32,600 --> 00:22:36,860
contributions on this as well but it

00:22:34,669 --> 00:22:39,620
does it does allow us to do some cool

00:22:36,860 --> 00:22:42,020
things were able to actually we're able

00:22:39,620 --> 00:22:45,980
to actually you know send all of that

00:22:42,020 --> 00:22:48,200
data to Google sheets and so thank you

00:22:45,980 --> 00:22:51,520
so much for everyone to come for coming

00:22:48,200 --> 00:22:51,520
and have a nice day

00:22:54,590 --> 00:22:56,650

YouTube URL: https://www.youtube.com/watch?v=U8D_srP2lw4


