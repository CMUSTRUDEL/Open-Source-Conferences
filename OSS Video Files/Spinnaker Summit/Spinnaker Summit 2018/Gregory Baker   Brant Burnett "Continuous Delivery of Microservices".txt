Title: Gregory Baker   Brant Burnett "Continuous Delivery of Microservices"
Publication date: 2018-10-24
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,270 --> 00:00:05,380
[Music]

00:00:09,820 --> 00:00:13,259
[Music]

00:00:15,890 --> 00:00:22,410
so first a bit of an introduction Center

00:00:18,990 --> 00:00:24,600
age software it was founded in 2004 it's

00:00:22,410 --> 00:00:26,010
based out of Roxboro North Carolina so

00:00:24,600 --> 00:00:28,140
we're over from the east coast Raleigh

00:00:26,010 --> 00:00:31,140
Durham area for those of you might be

00:00:28,140 --> 00:00:34,230
familiar my body's like wanting to shut

00:00:31,140 --> 00:00:37,290
down so hard right now the day is almost

00:00:34,230 --> 00:00:38,940
done my brain keeps telling me but we

00:00:37,290 --> 00:00:40,559
provide software solutions for

00:00:38,940 --> 00:00:42,059
entertainment industry family

00:00:40,559 --> 00:00:43,739
entertainment centers these are like

00:00:42,059 --> 00:00:47,180
multi-use facilities we might have

00:00:43,739 --> 00:00:50,520
bowling go-cart centers many golf

00:00:47,180 --> 00:00:53,160
arcades restaurants things like that and

00:00:50,520 --> 00:00:56,820
we support a point of sale that supports

00:00:53,160 --> 00:00:58,590
all those applications it's a difficult

00:00:56,820 --> 00:01:00,480
market to be in because like a lot of

00:00:58,590 --> 00:01:02,670
point-of-sale systems very narrow and

00:01:00,480 --> 00:01:04,439
targeted and so to have a point-of-sale

00:01:02,670 --> 00:01:08,189
system allows you to run an entire

00:01:04,439 --> 00:01:10,260
facility all with different verticals

00:01:08,189 --> 00:01:12,479
really with different needs and to

00:01:10,260 --> 00:01:14,100
incorporate that into one platform is a

00:01:12,479 --> 00:01:17,460
real challenge and one that we tackle

00:01:14,100 --> 00:01:19,740
and what we're doing now is we have some

00:01:17,460 --> 00:01:23,759
on elliptic applications that taking a

00:01:19,740 --> 00:01:28,530
really focused approach at transitioning

00:01:23,759 --> 00:01:30,180
those to the cloud so a bit of an

00:01:28,530 --> 00:01:32,579
introduction on who we are as

00:01:30,180 --> 00:01:35,430
individuals Greg Baker on the software

00:01:32,579 --> 00:01:37,520
managers Center edge my background prior

00:01:35,430 --> 00:01:39,390
to the entertainment system

00:01:37,520 --> 00:01:41,280
entertainment feels really finance

00:01:39,390 --> 00:01:43,530
healthcare pharmaceuticals things like

00:01:41,280 --> 00:01:45,210
that and wasn't really heavily involved

00:01:43,530 --> 00:01:48,149
in real time data and high availability

00:01:45,210 --> 00:01:51,270
software and a radiology private

00:01:48,149 --> 00:01:53,080
radiology practice and I'll let Brandt

00:01:51,270 --> 00:01:56,420
introduce himself

00:01:53,080 --> 00:01:58,190
so I'm Brandt brunette I'm the systems

00:01:56,420 --> 00:02:01,990
architect at Center edge I've been there

00:01:58,190 --> 00:02:04,610
since 2004 so I have seen the move from

00:02:01,990 --> 00:02:07,010
on-premise applications that did nothing

00:02:04,610 --> 00:02:09,020
on the web to some integrations with web

00:02:07,010 --> 00:02:11,090
do more and more operations on the web -

00:02:09,020 --> 00:02:12,790
now moving into micro-services

00:02:11,090 --> 00:02:16,580
architectures with continuous delivery

00:02:12,790 --> 00:02:17,930
I'm also a big couch based guy I do a

00:02:16,580 --> 00:02:18,140
lot of stuff with couch space all the

00:02:17,930 --> 00:02:20,540
time

00:02:18,140 --> 00:02:23,810
that's our no sequel solution that we

00:02:20,540 --> 00:02:25,880
use and then I also do a lot of open

00:02:23,810 --> 00:02:28,580
source work - when I can find time

00:02:25,880 --> 00:02:30,890
including a couple of pull requests in

00:02:28,580 --> 00:02:35,360
the spinnaker but not many because I'm

00:02:30,890 --> 00:02:37,250
not a java groovy guy and then I can be

00:02:35,360 --> 00:02:40,220
regional twitter at BT Burnett 3 if

00:02:37,250 --> 00:02:41,630
anybody wants to reach me so the next

00:02:40,220 --> 00:02:44,480
thing I want to do is just to help frame

00:02:41,630 --> 00:02:46,340
the rest of the conversation its kind of

00:02:44,480 --> 00:02:47,720
talk about what our basic architecture

00:02:46,340 --> 00:02:51,019
for our modern micro services

00:02:47,720 --> 00:02:54,440
architecture looks like so first of all

00:02:51,019 --> 00:02:57,230
everything is coming in - through a load

00:02:54,440 --> 00:03:00,620
balancer that is defined by an ingress

00:02:57,230 --> 00:03:03,530
in kubernetes and then that's actually

00:03:00,620 --> 00:03:06,049
an AWS application load balancer that is

00:03:03,530 --> 00:03:09,890
being created by that ingress which then

00:03:06,049 --> 00:03:11,930
is routing the traffic either to our UI

00:03:09,890 --> 00:03:14,630
service which is distributing an angular

00:03:11,930 --> 00:03:18,079
UI which is then getting its static

00:03:14,630 --> 00:03:21,200
resources out of an s3 bucket through a

00:03:18,079 --> 00:03:22,459
CDN or it's going to our API gateway

00:03:21,200 --> 00:03:25,880
that we run internally which we call

00:03:22,459 --> 00:03:28,100
mash tub because we like bourbon and so

00:03:25,880 --> 00:03:30,470
that is then mashing those API requests

00:03:28,100 --> 00:03:31,820
up into multiple requests out as needed

00:03:30,470 --> 00:03:34,190
to different micro services within

00:03:31,820 --> 00:03:35,870
kubernetes correlating them back

00:03:34,190 --> 00:03:39,170
together and returning responses back

00:03:35,870 --> 00:03:41,239
and then our backplane is behind the

00:03:39,170 --> 00:03:43,420
micro services as a primarily Couchbase

00:03:41,239 --> 00:03:46,510
and rabbit in queue as our message bus

00:03:43,420 --> 00:03:48,950
that we do have the option to pick other

00:03:46,510 --> 00:03:51,200
services as needed for any given micro

00:03:48,950 --> 00:03:54,610
service whatever the best fit is but

00:03:51,200 --> 00:03:54,610
that's primarily what we use there

00:03:56,310 --> 00:04:02,530
so let's talk about kind of where you

00:04:00,310 --> 00:04:05,860
start from when you're doing a CIS CV

00:04:02,530 --> 00:04:08,490
pipeline just about everybody's done CI

00:04:05,860 --> 00:04:10,930
so the beginning of this flow will be

00:04:08,490 --> 00:04:11,920
pretty self-explanatory so the first

00:04:10,930 --> 00:04:15,480
thing you start off with is you've got

00:04:11,920 --> 00:04:18,579
your code you're doing merges in github

00:04:15,480 --> 00:04:20,170
so you got pull requests going out code

00:04:18,579 --> 00:04:22,570
review happens it gets merged into the

00:04:20,170 --> 00:04:24,100
master branch so then what do you do

00:04:22,570 --> 00:04:25,210
with it from there well the very first

00:04:24,100 --> 00:04:27,820
thing you do when you're writing in a

00:04:25,210 --> 00:04:29,410
new application is you just build it

00:04:27,820 --> 00:04:31,680
locally on your machine you deploy it

00:04:29,410 --> 00:04:34,690
into kubernetes using Hamill files and

00:04:31,680 --> 00:04:36,580
hey my applications running that works

00:04:34,690 --> 00:04:39,730
great the first time or two or three but

00:04:36,580 --> 00:04:42,370
it starts getting old so your next step

00:04:39,730 --> 00:04:44,500
then is to add continuous integration to

00:04:42,370 --> 00:04:47,260
the process so now we have Jenkins or

00:04:44,500 --> 00:04:48,850
some other CI platform it's actually

00:04:47,260 --> 00:04:52,000
building your application for you in

00:04:48,850 --> 00:04:53,830
creating your artifacts this is where a

00:04:52,000 --> 00:04:58,810
lot of people have been for a lot of

00:04:53,830 --> 00:05:01,690
years then so our next step after that

00:04:58,810 --> 00:05:04,630
was we added spinnaker to the mix so we

00:05:01,690 --> 00:05:08,710
had a spinnaker pipeline which is

00:05:04,630 --> 00:05:10,840
triggered by the publishing of the

00:05:08,710 --> 00:05:12,820
docker image to the docker registry then

00:05:10,840 --> 00:05:15,880
triggers the spinnaker pipeline and so

00:05:12,820 --> 00:05:19,960
now we actually have a full pipeline

00:05:15,880 --> 00:05:22,390
going out into kubernetes without manual

00:05:19,960 --> 00:05:25,720
intervention kind of our next step after

00:05:22,390 --> 00:05:27,400
that is to handle configuration within

00:05:25,720 --> 00:05:29,560
our different environments using config

00:05:27,400 --> 00:05:31,620
Maps and secrets within kubernetes to

00:05:29,560 --> 00:05:35,350
help inject environment specific

00:05:31,620 --> 00:05:36,669
configuration into there so I'm going to

00:05:35,350 --> 00:05:38,560
go through these different steps in a

00:05:36,669 --> 00:05:40,479
little more detail and then we'll pass

00:05:38,560 --> 00:05:43,810
it over to Greg to go over some of the

00:05:40,479 --> 00:05:46,360
really cool stuff we do with it so the

00:05:43,810 --> 00:05:48,400
first thing is our branching strategy we

00:05:46,360 --> 00:05:50,430
very specifically regularly merge

00:05:48,400 --> 00:05:53,229
everything into the master branch

00:05:50,430 --> 00:05:55,570
meaning no long live feature branches

00:05:53,229 --> 00:05:58,300
our goal is to merge any work you do

00:05:55,570 --> 00:05:59,860
within a day and so we're gonna use a

00:05:58,300 --> 00:06:01,690
lot of tricks to help support that such

00:05:59,860 --> 00:06:03,430
as feature flags I know I actually saw

00:06:01,690 --> 00:06:05,500
some guys here from launch Darkly today

00:06:03,430 --> 00:06:08,139
we started using them recently to manage

00:06:05,500 --> 00:06:12,070
our feature flags for us

00:06:08,139 --> 00:06:13,930
and then also and that allows us to have

00:06:12,070 --> 00:06:15,490
parsley complete work this stable and

00:06:13,930 --> 00:06:17,260
functional that's not going to affect

00:06:15,490 --> 00:06:19,720
everybody constantly going into master

00:06:17,260 --> 00:06:21,130
so that we don't have like we used to a

00:06:19,720 --> 00:06:23,080
feature branch and lived out there for

00:06:21,130 --> 00:06:25,180
three months and cannot help you when it

00:06:23,080 --> 00:06:26,260
comes time to merge that back in then

00:06:25,180 --> 00:06:28,180
you'll have merged conflicts everywhere

00:06:26,260 --> 00:06:30,880
so we try to constantly merge into

00:06:28,180 --> 00:06:32,290
master and the next thing is how we

00:06:30,880 --> 00:06:34,780
handle version numbers this is an

00:06:32,290 --> 00:06:36,010
example of how people used to handle

00:06:34,780 --> 00:06:38,110
version numbers back in the day with all

00:06:36,010 --> 00:06:41,050
these different segments and dots for

00:06:38,110 --> 00:06:43,479
our micro services we don't do that our

00:06:41,050 --> 00:06:45,370
version number of a micro service is the

00:06:43,479 --> 00:06:47,889
Jenkins build number from the master

00:06:45,370 --> 00:06:49,690
branch so every single time we merge

00:06:47,889 --> 00:06:52,240
into master that's a new version that's

00:06:49,690 --> 00:06:54,460
the version number of it which just

00:06:52,240 --> 00:06:59,979
greatly simplifies tracking and dealing

00:06:54,460 --> 00:07:01,539
with the the versioning of it so the

00:06:59,979 --> 00:07:03,300
next piece is kind of continuous

00:07:01,539 --> 00:07:05,949
integration what are we doing in Jenkins

00:07:03,300 --> 00:07:07,449
and I don't know what the formal

00:07:05,949 --> 00:07:08,770
definition is but the way I think of it

00:07:07,449 --> 00:07:11,050
in my head for continuous integration

00:07:08,770 --> 00:07:13,450
versus continuous delivery continuous

00:07:11,050 --> 00:07:14,830
integration is the part this building

00:07:13,450 --> 00:07:16,389
and creating artifacts continuous

00:07:14,830 --> 00:07:20,050
delivery is getting those artifacts to

00:07:16,389 --> 00:07:21,669
production so that's kind of where I'm

00:07:20,050 --> 00:07:23,650
drawing the line for this presentation

00:07:21,669 --> 00:07:25,570
anyway so we are outputting our

00:07:23,650 --> 00:07:29,770
container artifacts artifacts to a

00:07:25,570 --> 00:07:32,770
private docker registry we are

00:07:29,770 --> 00:07:37,389
outputting the static content meaning

00:07:32,770 --> 00:07:38,860
our CSS JavaScript files images anything

00:07:37,389 --> 00:07:41,650
like that that's coming off of our UI

00:07:38,860 --> 00:07:43,570
layer into s3 and then we actually make

00:07:41,650 --> 00:07:46,139
a separate folder inside our s3 bucket

00:07:43,570 --> 00:07:48,580
for every single build so then any given

00:07:46,139 --> 00:07:51,520
version of the server can reference the

00:07:48,580 --> 00:07:54,820
exact same static content off of our CDN

00:07:51,520 --> 00:07:57,190
that goes with that particular build on

00:07:54,820 --> 00:07:58,599
the server side and so we end up with

00:07:57,190 --> 00:08:00,610
lots and lots of copies of our static

00:07:58,599 --> 00:08:04,470
content but it really streamlines the

00:08:00,610 --> 00:08:06,520
process for us and the next thing is

00:08:04,470 --> 00:08:08,410
this is something that should be obvious

00:08:06,520 --> 00:08:10,720
but it's amazing how often you run into

00:08:08,410 --> 00:08:13,300
people who notice all of our credentials

00:08:10,720 --> 00:08:15,640
are stored in Jenkins not in our code

00:08:13,300 --> 00:08:16,630
base you don't want your credential

00:08:15,640 --> 00:08:19,360
sitting there in

00:08:16,630 --> 00:08:20,650
and get where they can leak out and

00:08:19,360 --> 00:08:21,910
things like that so we store the

00:08:20,650 --> 00:08:24,640
credentials in Jenkins and just

00:08:21,910 --> 00:08:26,920
reference them from within our bill pop

00:08:24,640 --> 00:08:28,090
wines is the environment variables or

00:08:26,920 --> 00:08:32,650
other tricks like that to get the

00:08:28,090 --> 00:08:35,020
credentials own and then we have what I

00:08:32,650 --> 00:08:36,789
consider the really special sauce that

00:08:35,020 --> 00:08:39,940
really starts kicking this up to the

00:08:36,789 --> 00:08:42,190
next level in either the CI part first

00:08:39,940 --> 00:08:44,680
of all we're doing all of the work that

00:08:42,190 --> 00:08:48,070
requires any kind of tool inside docker

00:08:44,680 --> 00:08:51,310
containers so our build agents for

00:08:48,070 --> 00:08:52,840
Jenkins have get docker and docker

00:08:51,310 --> 00:08:55,030
compose on them that's all this

00:08:52,840 --> 00:08:56,680
installed on our build agents every

00:08:55,030 --> 00:08:58,060
single tool that it needs to do anything

00:08:56,680 --> 00:08:59,410
is actually running inside of a

00:08:58,060 --> 00:09:01,150
container and what this allows us to do

00:08:59,410 --> 00:09:02,680
is not have to worry about versions you

00:09:01,150 --> 00:09:04,840
don't have to worry about what version

00:09:02,680 --> 00:09:06,880
of node is installed on this agent

00:09:04,840 --> 00:09:08,290
versus that agent or using tools that

00:09:06,880 --> 00:09:11,590
switch versions of node that you're

00:09:08,290 --> 00:09:14,830
running in or versions of the.net core

00:09:11,590 --> 00:09:16,030
command-line SDK or what you don't worry

00:09:14,830 --> 00:09:17,830
about it you just have build agents

00:09:16,030 --> 00:09:19,900
there doing their work do everything

00:09:17,830 --> 00:09:22,000
inside docker and pull the right image

00:09:19,900 --> 00:09:25,900
out of docker hub that they need to do

00:09:22,000 --> 00:09:28,600
their work the second thing is we use

00:09:25,900 --> 00:09:30,160
the Jenkins file pipelines that are

00:09:28,600 --> 00:09:33,700
decorative pipelines that you right

00:09:30,160 --> 00:09:35,410
inside your git repository we certainly

00:09:33,700 --> 00:09:37,060
have used other CI tools in the past

00:09:35,410 --> 00:09:39,970
where you have to define all the steps

00:09:37,060 --> 00:09:41,890
of your build in the CI tool but then

00:09:39,970 --> 00:09:43,540
that quickly gets into a mess as soon as

00:09:41,890 --> 00:09:45,580
you're making a change to your system

00:09:43,540 --> 00:09:48,520
that requires a change to the pipeline

00:09:45,580 --> 00:09:49,930
and the build steps because then okay

00:09:48,520 --> 00:09:52,960
now I've got a pull request that makes a

00:09:49,930 --> 00:09:54,790
change but then I need to make a change

00:09:52,960 --> 00:09:56,020
to my build steps but if I think the

00:09:54,790 --> 00:09:58,600
change the build steps first I'm

00:09:56,020 --> 00:10:00,820
breaking all the other builds if I make

00:09:58,600 --> 00:10:02,170
it second then it won't not build a fill

00:10:00,820 --> 00:10:04,570
and i merge this way your pull request

00:10:02,170 --> 00:10:06,160
that requires build changes has those

00:10:04,570 --> 00:10:08,650
step changes as part of that pull

00:10:06,160 --> 00:10:10,630
request and so it just keeps everything

00:10:08,650 --> 00:10:13,860
organized in version controls your

00:10:10,630 --> 00:10:13,860
actual build steps as long

00:10:14,950 --> 00:10:22,310
so next our spinnaker pipelines so first

00:10:20,270 --> 00:10:23,540
we're triggering right now based on when

00:10:22,310 --> 00:10:26,330
the new image is pushed to the docker

00:10:23,540 --> 00:10:27,860
registry we want to change to triggering

00:10:26,330 --> 00:10:29,450
based on the completion of the Jenkins

00:10:27,860 --> 00:10:31,610
build instead and uses a Jenkins based

00:10:29,450 --> 00:10:33,860
trigger instead of a docker based

00:10:31,610 --> 00:10:35,930
trigger because we want to inject some

00:10:33,860 --> 00:10:39,529
additional data in there through

00:10:35,930 --> 00:10:40,760
property files coming out of Jenkins one

00:10:39,529 --> 00:10:42,890
of the things we really want to do for

00:10:40,760 --> 00:10:44,899
example is use web hooks back to JIRA

00:10:42,890 --> 00:10:47,120
which manages our issues so we can flag

00:10:44,899 --> 00:10:48,740
issues in JIRA as deployed so I need to

00:10:47,120 --> 00:10:51,080
know that your issue number coming in

00:10:48,740 --> 00:10:53,779
that property coming off of Jenkins

00:10:51,080 --> 00:10:56,510
right now there's some limitations you

00:10:53,779 --> 00:10:58,670
can't really inject spinnaker artifacts

00:10:56,510 --> 00:11:01,339
from a Jenkins trigger but there's some

00:10:58,670 --> 00:11:04,520
work-in-progress that I'm thinking but

00:11:01,339 --> 00:11:05,660
I'm hoping by 1.11 we'll have resolved

00:11:04,520 --> 00:11:07,700
that and so then we'll start switching

00:11:05,660 --> 00:11:10,279
the other thing is we're actually using

00:11:07,700 --> 00:11:12,860
Google container registry for our docker

00:11:10,279 --> 00:11:16,370
images even though everything else we do

00:11:12,860 --> 00:11:18,800
is on AWS and that is actually because

00:11:16,370 --> 00:11:21,830
Google container registry supports the

00:11:18,800 --> 00:11:24,260
catalog endpoint which means that I

00:11:21,830 --> 00:11:28,730
don't have to predefined the list of

00:11:24,260 --> 00:11:31,010
docker registries that for however many

00:11:28,730 --> 00:11:32,690
micro services we have in spinnaker and

00:11:31,010 --> 00:11:34,040
constantly redeploy spinnaker every time

00:11:32,690 --> 00:11:37,339
we have a new micro service in on

00:11:34,040 --> 00:11:40,520
different registry because you can

00:11:37,339 --> 00:11:42,350
actually just pull from the catalog in

00:11:40,520 --> 00:11:44,510
Google container registry the list of

00:11:42,350 --> 00:11:46,550
all the registries you have rather than

00:11:44,510 --> 00:11:49,070
just the list of tags on a predefined

00:11:46,550 --> 00:11:51,350
list of registries so it just simplifies

00:11:49,070 --> 00:11:53,600
our ability to roll out more new micro

00:11:51,350 --> 00:11:58,720
services without touching spinnaker in

00:11:53,600 --> 00:12:02,570
Howard we use the v1 kubernetes provider

00:11:58,720 --> 00:12:05,120
we started using spinnaker last year the

00:12:02,570 --> 00:12:06,470
v2 provider wasn't an option yet we're

00:12:05,120 --> 00:12:08,540
probably going to look at switching at

00:12:06,470 --> 00:12:10,430
some point but for right now the v1

00:12:08,540 --> 00:12:13,870
providers given us what we need so we're

00:12:10,430 --> 00:12:13,870
just rolling with it for the moment

00:12:15,050 --> 00:12:18,890
and we're also doing red-black

00:12:16,640 --> 00:12:20,720
deployments these are also known as

00:12:18,890 --> 00:12:22,220
Bluegreen deployments if you've ever

00:12:20,720 --> 00:12:23,450
watched any Red Hat presentations

00:12:22,220 --> 00:12:26,240
they're always talking about Bluegreen

00:12:23,450 --> 00:12:28,010
deployments instead of red black I don't

00:12:26,240 --> 00:12:29,780
I don't know why everybody picks

00:12:28,010 --> 00:12:32,540
different colors I have some theories

00:12:29,780 --> 00:12:34,370
though one is that it's like roulette

00:12:32,540 --> 00:12:35,990
and you have red and black squares you

00:12:34,370 --> 00:12:40,220
get a 50/50 shot your deployments gonna

00:12:35,990 --> 00:12:42,710
work which I don't think is where we

00:12:40,220 --> 00:12:44,530
want to be the other one is that red and

00:12:42,710 --> 00:12:46,670
black is the colors of blood and death

00:12:44,530 --> 00:12:48,320
which you also don't want to happen with

00:12:46,670 --> 00:12:49,880
your deployment so we typically actually

00:12:48,320 --> 00:12:51,500
refer to them as Bluegreen deployments

00:12:49,880 --> 00:12:52,970
rather than red black even though the

00:12:51,500 --> 00:12:56,120
spinnaker UI calls them red and black

00:12:52,970 --> 00:12:58,190
and our pipeline succeeds once our

00:12:56,120 --> 00:13:00,590
kubernetes pods liveness and readiness

00:12:58,190 --> 00:13:02,720
probes path this is actually an area

00:13:00,590 --> 00:13:05,900
we're still tweaking is what do we

00:13:02,720 --> 00:13:08,210
consider live versus what do we require

00:13:05,900 --> 00:13:10,520
to be healthy we're still trying to

00:13:08,210 --> 00:13:12,350
figure out exactly the balance here in

00:13:10,520 --> 00:13:15,020
some cases we've said we don't consider

00:13:12,350 --> 00:13:18,350
it we consider it healthy if it's not

00:13:15,020 --> 00:13:20,960
connected to the database but not ready

00:13:18,350 --> 00:13:22,640
and that is helpful if the database

00:13:20,960 --> 00:13:24,080
backing goes down so your pods don't sit

00:13:22,640 --> 00:13:25,070
there and constantly recycle themselves

00:13:24,080 --> 00:13:26,930
they just go back to health and once

00:13:25,070 --> 00:13:29,180
they're reconnected but we've also run

00:13:26,930 --> 00:13:30,800
into problems where the database SDK was

00:13:29,180 --> 00:13:32,420
just in a bad state and needed to be

00:13:30,800 --> 00:13:33,410
recycled and so in those cases it's

00:13:32,420 --> 00:13:35,510
better for it to be in the readiness

00:13:33,410 --> 00:13:36,290
probe so we're still trying to tweak and

00:13:35,510 --> 00:13:39,370
balance

00:13:36,290 --> 00:13:43,220
what exactly falls into which categories

00:13:39,370 --> 00:13:44,990
so for our configuration we actually try

00:13:43,220 --> 00:13:47,090
to put most of our configuration in the

00:13:44,990 --> 00:13:49,520
repository including environment

00:13:47,090 --> 00:13:51,320
specific configuration most of your

00:13:49,520 --> 00:13:54,700
programming languages have ability to

00:13:51,320 --> 00:13:58,790
have environment based configuration

00:13:54,700 --> 00:14:01,760
under dotnet core does if you're using

00:13:58,790 --> 00:14:04,730
node config it does I think spring boot

00:14:01,760 --> 00:14:06,170
does if you don't Java so we actually

00:14:04,730 --> 00:14:08,270
trying to put all that into the root

00:14:06,170 --> 00:14:10,370
into the repository and because we're

00:14:08,270 --> 00:14:11,630
continuously deploying master that means

00:14:10,370 --> 00:14:13,460
that if I need to make a configuration

00:14:11,630 --> 00:14:14,930
change for one environment it's just a

00:14:13,460 --> 00:14:17,180
pull request into master and now I've

00:14:14,930 --> 00:14:19,040
got history on all that configuration so

00:14:17,180 --> 00:14:20,990
all that's just constantly going in and

00:14:19,040 --> 00:14:22,610
constantly going out so within a few

00:14:20,990 --> 00:14:24,170
minutes I can get a configuration change

00:14:22,610 --> 00:14:24,720
all the way out to production just with

00:14:24,170 --> 00:14:28,350
a polar

00:14:24,720 --> 00:14:30,660
and have that full robust history in my

00:14:28,350 --> 00:14:33,990
repository but not all configuration

00:14:30,660 --> 00:14:35,519
belongs there so we found certain forms

00:14:33,990 --> 00:14:37,379
of configuration that we find is better

00:14:35,519 --> 00:14:40,019
to put into kubernetes this config Maps

00:14:37,379 --> 00:14:42,540
the secrets connection info for shared

00:14:40,019 --> 00:14:44,370
infrastructure so we saw in the

00:14:42,540 --> 00:14:47,870
architectural diagram earlier we had

00:14:44,370 --> 00:14:50,129
kubernetes base and RabbitMQ running as

00:14:47,870 --> 00:14:53,040
backplane behind all the micro services

00:14:50,129 --> 00:14:54,899
if I needed to spin up and transition

00:14:53,040 --> 00:14:56,819
over to a new cluster due to a version

00:14:54,899 --> 00:14:58,290
upgrade or something like that I

00:14:56,819 --> 00:15:00,870
wouldn't want to have to go put a pull

00:14:58,290 --> 00:15:04,379
request into every repository to change

00:15:00,870 --> 00:15:06,629
which cluster is connecting to so for

00:15:04,379 --> 00:15:08,610
that stuff we put that into config Maps

00:15:06,629 --> 00:15:10,800
or secrets so then then we have one

00:15:08,610 --> 00:15:13,439
place to change and we can repoint every

00:15:10,800 --> 00:15:15,420
application to new infrastructure the

00:15:13,439 --> 00:15:17,009
second of course is security credentials

00:15:15,420 --> 00:15:18,810
shared key stuff like that

00:15:17,009 --> 00:15:22,769
you never want that in your code so we

00:15:18,810 --> 00:15:26,339
put that in secrets we're currently

00:15:22,769 --> 00:15:28,110
apply our configuration by injecting

00:15:26,339 --> 00:15:30,180
environment variables in our pipelines

00:15:28,110 --> 00:15:32,040
so in our deployment steps we'll say

00:15:30,180 --> 00:15:33,329
go grab this configuration from this

00:15:32,040 --> 00:15:35,490
kubernetes secret put it in this

00:15:33,329 --> 00:15:38,220
environment variable so forth and so on

00:15:35,490 --> 00:15:40,230
however that will quickly make you start

00:15:38,220 --> 00:15:41,879
willing to pull your hair out when you

00:15:40,230 --> 00:15:43,470
start getting a lot of configuration and

00:15:41,879 --> 00:15:45,079
you so many environment variables that

00:15:43,470 --> 00:15:48,180
you're trying to set in your pipelines

00:15:45,079 --> 00:15:51,120
so our next plan is to switch to using

00:15:48,180 --> 00:15:53,370
kubernetes volume mounts which will

00:15:51,120 --> 00:15:55,170
allow us to mount a folder full of

00:15:53,370 --> 00:15:56,279
configuration files and then change

00:15:55,170 --> 00:15:58,829
their application to read those

00:15:56,279 --> 00:16:00,720
configuration files that also has the

00:15:58,829 --> 00:16:02,790
advantage that if you design your

00:16:00,720 --> 00:16:04,050
application to support it it can monitor

00:16:02,790 --> 00:16:05,819
the file system for changes to

00:16:04,050 --> 00:16:07,949
configuration and change it dynamically

00:16:05,819 --> 00:16:09,120
without having to recycle your pod which

00:16:07,949 --> 00:16:11,250
you would have to do with environment

00:16:09,120 --> 00:16:14,750
variable changes but that is something

00:16:11,250 --> 00:16:14,750
we have not actually implemented yet

00:16:15,100 --> 00:16:21,430
so now we've got this pipeline that's

00:16:19,240 --> 00:16:22,840
taking code and master getting it all

00:16:21,430 --> 00:16:25,390
the way out to production as soon as we

00:16:22,840 --> 00:16:27,580
merge into master so now the next big

00:16:25,390 --> 00:16:29,770
question is how do we do that and keep

00:16:27,580 --> 00:16:32,440
the things stable and make sure things

00:16:29,770 --> 00:16:33,940
don't go down so for that I'm gonna pass

00:16:32,440 --> 00:16:35,620
it back to Greg who's going to talk to

00:16:33,940 --> 00:16:39,130
you about how we do our automated

00:16:35,620 --> 00:16:40,810
testing all this pipeline so so based on

00:16:39,130 --> 00:16:43,810
the questions I'm hearing I can already

00:16:40,810 --> 00:16:45,820
tell right this this seems like madness

00:16:43,810 --> 00:16:47,710
so we're riding we're definitely riding

00:16:45,820 --> 00:16:49,960
the lightning a little bit if that

00:16:47,710 --> 00:16:52,120
anything that comes in to master runs

00:16:49,960 --> 00:16:53,800
out to production how are we managing

00:16:52,120 --> 00:16:56,620
that right how are we making that safe

00:16:53,800 --> 00:16:58,090
at least as safe as we can so there's

00:16:56,620 --> 00:17:00,700
going to end up being a lot of automated

00:16:58,090 --> 00:17:01,900
testing we've got the usual stuff and

00:17:00,700 --> 00:17:04,390
this is these are things you wouldn't

00:17:01,900 --> 00:17:06,670
you know you would expect to see yeah

00:17:04,390 --> 00:17:09,220
unit tests in our case we also added

00:17:06,670 --> 00:17:11,350
isolated integration tests so allows

00:17:09,220 --> 00:17:13,600
each one of our applications to spin up

00:17:11,350 --> 00:17:15,880
and make sure that it's integrated with

00:17:13,600 --> 00:17:17,770
RabbitMQ with our database if it's

00:17:15,880 --> 00:17:19,480
dependent on any other micro services

00:17:17,770 --> 00:17:21,760
something we try to keep to a minimum

00:17:19,480 --> 00:17:23,770
like we don't want our applications

00:17:21,760 --> 00:17:26,050
talking directly to each other but in

00:17:23,770 --> 00:17:28,030
some cases we found it I need to do that

00:17:26,050 --> 00:17:32,680
this allows us to isolate that those

00:17:28,030 --> 00:17:36,970
tests and run them second fun bit of

00:17:32,680 --> 00:17:39,000
work that we do is pre-production so I'm

00:17:36,970 --> 00:17:41,429
sorry I can't stay a model

00:17:39,000 --> 00:17:43,950
so we have the docker trigger right and

00:17:41,429 --> 00:17:46,380
we've got our production pots so new

00:17:43,950 --> 00:17:48,390
code commits come in it's been merged

00:17:46,380 --> 00:17:50,280
into master gonna get build triggers

00:17:48,390 --> 00:17:52,890
gonna pick it up it's not going to

00:17:50,280 --> 00:17:54,600
promote directly to production we're

00:17:52,890 --> 00:17:57,600
gonna do is run a pretty production part

00:17:54,600 --> 00:17:58,049
so what is that what does that mean for

00:17:57,600 --> 00:18:00,600
us

00:17:58,049 --> 00:18:03,000
for all intents and purposes its

00:18:00,600 --> 00:18:04,740
production it's using the same config

00:18:03,000 --> 00:18:07,289
Maps it's using all the same secrets

00:18:04,740 --> 00:18:09,030
it's just not receiving any traffic from

00:18:07,289 --> 00:18:11,809
our load balancers it's just running out

00:18:09,030 --> 00:18:14,070
there and we can hit it directly through

00:18:11,809 --> 00:18:15,510
endpoints you know that we're aware of

00:18:14,070 --> 00:18:18,750
but aren't publicly made available

00:18:15,510 --> 00:18:22,169
anywhere so we now we have a container

00:18:18,750 --> 00:18:24,419
running our code that's essentially

00:18:22,169 --> 00:18:27,030
production ready or at least potentially

00:18:24,419 --> 00:18:29,309
production ready and the last thing

00:18:27,030 --> 00:18:33,990
we're gonna do is run a series of smoke

00:18:29,309 --> 00:18:35,909
tests against that pre-production pot so

00:18:33,990 --> 00:18:39,809
these smoke tests are going to exercise

00:18:35,909 --> 00:18:41,370
this potential new deployment and it's

00:18:39,809 --> 00:18:42,539
and for the most part make sure it's

00:18:41,370 --> 00:18:45,510
going to be okay it's not going to break

00:18:42,539 --> 00:18:46,860
anything everything that our customers

00:18:45,510 --> 00:18:49,200
are course are accessing through a

00:18:46,860 --> 00:18:51,210
public facing API if we want to make

00:18:49,200 --> 00:18:52,620
sure that that public facing API nothing

00:18:51,210 --> 00:18:55,500
coming in and out of there has changed

00:18:52,620 --> 00:18:57,690
its it's all good we honestly don't care

00:18:55,500 --> 00:18:58,980
how the pod does its work as long as

00:18:57,690 --> 00:19:03,600
what's coming in and out of the public

00:18:58,980 --> 00:19:05,970
API is good we're fine so one of the

00:19:03,600 --> 00:19:09,539
last thing to add to this was templates

00:19:05,970 --> 00:19:12,210
in spinnaker templates allowed us what

00:19:09,539 --> 00:19:14,309
we found initially we're creating all

00:19:12,210 --> 00:19:17,010
these applications in spinnaker and

00:19:14,309 --> 00:19:19,350
we're constantly essentially copying and

00:19:17,010 --> 00:19:21,929
pasting these template to Jason and

00:19:19,350 --> 00:19:24,870
tweaking it for the new application but

00:19:21,929 --> 00:19:27,270
there wasn't a lot changing so templates

00:19:24,870 --> 00:19:29,700
allowed us to move away move all of that

00:19:27,270 --> 00:19:32,159
into calm and ya know files and start to

00:19:29,700 --> 00:19:33,480
share that and config files in spinnaker

00:19:32,159 --> 00:19:36,510
and we'll touch on that a little bit

00:19:33,480 --> 00:19:39,600
more deeply here in a few minutes

00:19:36,510 --> 00:19:42,870
so talking more in depth about our unit

00:19:39,600 --> 00:19:45,320
and ISO integration test so our pull

00:19:42,870 --> 00:19:48,330
request comes in the coaster code review

00:19:45,320 --> 00:19:50,669
it's checked off on we run all of our

00:19:48,330 --> 00:19:51,960
unit tests and that if that's all

00:19:50,669 --> 00:19:53,850
successful we're actually going to

00:19:51,960 --> 00:19:56,190
create a docker container at the end of

00:19:53,850 --> 00:19:58,049
that process so at this point you know

00:19:56,190 --> 00:20:00,090
we have a reasonable amount of

00:19:58,049 --> 00:20:02,520
confidence as much as you know as

00:20:00,090 --> 00:20:05,580
engineers and developers we are

00:20:02,520 --> 00:20:07,890
confident in ourselves we like to kind

00:20:05,580 --> 00:20:09,900
of at least prove it works we think it

00:20:07,890 --> 00:20:12,690
works so the next thing we're gonna do

00:20:09,900 --> 00:20:14,340
is run some docker compose files and

00:20:12,690 --> 00:20:16,290
this is where that docker compose file

00:20:14,340 --> 00:20:18,270
is what's going to spin up our ISO

00:20:16,290 --> 00:20:20,850
environment this is going to be a

00:20:18,270 --> 00:20:24,929
simulated local environment where this

00:20:20,850 --> 00:20:27,290
container has access to everything it

00:20:24,929 --> 00:20:30,840
needs I wrap it in cue a fake database

00:20:27,290 --> 00:20:33,360
any other third party app applications

00:20:30,840 --> 00:20:35,460
it might need those two or containerize

00:20:33,360 --> 00:20:37,380
and then run in that docker compose

00:20:35,460 --> 00:20:39,390
we've got this little local network

00:20:37,380 --> 00:20:42,059
running and make sure this docker

00:20:39,390 --> 00:20:45,299
container has everything it needs if

00:20:42,059 --> 00:20:47,340
those tests all pass now we're feeling

00:20:45,299 --> 00:20:48,419
much more confident that this this isn't

00:20:47,340 --> 00:20:50,280
going to break anything we're feeling

00:20:48,419 --> 00:20:52,410
pretty good we're gonna throw that up to

00:20:50,280 --> 00:20:54,840
Google container registry that's what we

00:20:52,410 --> 00:20:56,940
use I mean you could use whatever at

00:20:54,840 --> 00:20:59,220
this point we could even take Jenkins

00:20:56,940 --> 00:21:01,530
artifacts if we wanted to grab those

00:20:59,220 --> 00:21:03,990
directly from spinnaker but in our case

00:21:01,530 --> 00:21:06,720
we're gonna put this container out in

00:21:03,990 --> 00:21:08,540
the Google container registry it might

00:21:06,720 --> 00:21:12,210
be worth mentioning like at this point

00:21:08,540 --> 00:21:13,919
tagging of our containers we give them

00:21:12,210 --> 00:21:16,679
numbers build their though essentially

00:21:13,919 --> 00:21:19,679
the build numbers we don't ever rely on

00:21:16,679 --> 00:21:21,630
latest for kicking off any of our

00:21:19,679 --> 00:21:24,720
deployments because latest is not

00:21:21,630 --> 00:21:27,679
necessarily the most room the newest I

00:21:24,720 --> 00:21:31,610
mean it was the most recent one built

00:21:27,679 --> 00:21:31,610
it's not necessarily

00:21:31,809 --> 00:21:38,630
right thank you if you didn't hear that

00:21:35,919 --> 00:21:40,730
stablest right so we're going with

00:21:38,630 --> 00:21:43,850
Sparrow right we're several very

00:21:40,730 --> 00:21:48,429
specific numbers gives us more control

00:21:43,850 --> 00:21:51,890
latest is like little sketchy to rely on

00:21:48,429 --> 00:21:53,740
all right so from our unit tests and

00:21:51,890 --> 00:21:57,620
integration tests we got a container

00:21:53,740 --> 00:21:59,809
potential a potential production pot so

00:21:57,620 --> 00:22:01,850
the pipeline is going to pick up that

00:21:59,809 --> 00:22:03,470
production pod out of the container

00:22:01,850 --> 00:22:06,020
registry it's gonna kick off a

00:22:03,470 --> 00:22:08,240
pre-production pipeline and again that

00:22:06,020 --> 00:22:10,690
pre-production pipeline has all the same

00:22:08,240 --> 00:22:13,190
settings as a production pipeline would

00:22:10,690 --> 00:22:15,740
for all intents and purposes it is

00:22:13,190 --> 00:22:19,429
production as far as everything hosting

00:22:15,740 --> 00:22:22,760
it is concerned then we're gonna run a

00:22:19,429 --> 00:22:24,679
new around a smoke test this is

00:22:22,760 --> 00:22:28,340
something we learned and we feel like we

00:22:24,679 --> 00:22:29,540
did wrong initially initially ours and a

00:22:28,340 --> 00:22:32,360
lot of our pipelines are still doing

00:22:29,540 --> 00:22:33,890
this so we're fixing this our smoke test

00:22:32,360 --> 00:22:37,190
we're hitting this pre-production pod

00:22:33,890 --> 00:22:40,490
directly and so what we ended up found

00:22:37,190 --> 00:22:46,490
out we were missing was yes the code

00:22:40,490 --> 00:22:48,110
application works the API fails our the

00:22:46,490 --> 00:22:50,929
API that our consumers and our own

00:22:48,110 --> 00:22:52,790
products are consuming might fail there

00:22:50,929 --> 00:22:55,250
could be a change that was done here in

00:22:52,790 --> 00:22:57,230
this application where some of the data

00:22:55,250 --> 00:22:58,150
or whatever it was sending in or out got

00:22:57,230 --> 00:23:01,250
changed

00:22:58,150 --> 00:23:04,070
wasn't captured by the API and this test

00:23:01,250 --> 00:23:05,660
completely missed it so here we are

00:23:04,070 --> 00:23:07,280
thinking wow this this container is

00:23:05,660 --> 00:23:09,860
awesome it's ready to go doesn't break

00:23:07,280 --> 00:23:12,230
anything actually promoted in production

00:23:09,860 --> 00:23:17,200
and now the consumers of our third party

00:23:12,230 --> 00:23:17,200
API are seeing airs that we didn't catch

00:23:17,290 --> 00:23:23,360
so to fix that smoke test now run

00:23:20,750 --> 00:23:26,420
through rkr gateway they run through our

00:23:23,360 --> 00:23:28,370
API REST API and API gateway now we're

00:23:26,420 --> 00:23:30,500
using headers and other tools to be able

00:23:28,370 --> 00:23:33,650
to control that the smoke test requests

00:23:30,500 --> 00:23:35,900
are coming from a testing request and so

00:23:33,650 --> 00:23:39,230
they can route the traffic to the

00:23:35,900 --> 00:23:40,970
pre-production pot now now I'm actually

00:23:39,230 --> 00:23:42,650
will feel like we're actually testing

00:23:40,970 --> 00:23:45,020
what matters and that's what our

00:23:42,650 --> 00:23:47,180
customers are consuming and interacting

00:23:45,020 --> 00:23:49,550
with I mean they do they really care

00:23:47,180 --> 00:23:52,070
what this does on the back here that no

00:23:49,550 --> 00:23:54,140
they really don't they care that this

00:23:52,070 --> 00:23:58,460
API they're interacting with does its

00:23:54,140 --> 00:24:01,120
work correctly so we felt that was an

00:23:58,460 --> 00:24:03,380
important shift we've made recently

00:24:01,120 --> 00:24:04,970
so let's smoke tester and I'm gonna make

00:24:03,380 --> 00:24:07,430
the request check all the responses

00:24:04,970 --> 00:24:11,330
everything's looking good if those smoke

00:24:07,430 --> 00:24:13,400
tests pass and we're gonna check for a

00:24:11,330 --> 00:24:15,950
success this is a Jenkins build running

00:24:13,400 --> 00:24:17,930
in the spinnaker pipeline we're gonna

00:24:15,950 --> 00:24:20,510
check for a success message from this

00:24:17,930 --> 00:24:24,010
Jenkins build if we get that will

00:24:20,510 --> 00:24:24,010
promote this pod into production

00:24:25,170 --> 00:24:32,770
so to focus a little bit of pipelines if

00:24:31,030 --> 00:24:37,300
how many of you have actually written a

00:24:32,770 --> 00:24:40,950
spinnaker pipeline it's fun isn't it by

00:24:37,300 --> 00:24:44,110
hand in the mo files yeah it's exciting

00:24:40,950 --> 00:24:46,510
so this was our this is how we got

00:24:44,110 --> 00:24:48,280
started we're creating applications in

00:24:46,510 --> 00:24:49,750
spinnaker houses great UI is awesome

00:24:48,280 --> 00:24:52,180
it's easy you click here click that

00:24:49,750 --> 00:24:54,400
maybe you entered a few things and jason

00:24:52,180 --> 00:24:56,290
configs takes a couple hours it's easy

00:24:54,400 --> 00:24:58,930
you know maybe for a new person takes

00:24:56,290 --> 00:25:01,330
all day kind of train them up neat

00:24:58,930 --> 00:25:03,910
so my engine engineers is like let's

00:25:01,330 --> 00:25:05,890
Qasim what about when we have like a few

00:25:03,910 --> 00:25:08,410
hundred or a thousand of these things

00:25:05,890 --> 00:25:13,120
out there and I got to make a change in

00:25:08,410 --> 00:25:16,000
all of them at once and my reaction was

00:25:13,120 --> 00:25:20,800
pretty much that like it's tear it's

00:25:16,000 --> 00:25:22,600
tearful michael jordan face so that's

00:25:20,800 --> 00:25:24,730
going to introduce us to spinnaker

00:25:22,600 --> 00:25:28,090
pipeline templates like this will save

00:25:24,730 --> 00:25:29,380
you from that madness don't do so don't

00:25:28,090 --> 00:25:31,120
don't yeah if you've written a couple

00:25:29,380 --> 00:25:33,820
templates do it learn it figure out

00:25:31,120 --> 00:25:35,020
what's going on that will be helpful but

00:25:33,820 --> 00:25:38,290
you're gonna want to switch the type

00:25:35,020 --> 00:25:41,530
templates really really soon so you end

00:25:38,290 --> 00:25:44,830
up in spinnaker uploading what

00:25:41,530 --> 00:25:48,430
essentially a config file this yeah mol

00:25:44,830 --> 00:25:51,100
config is gonna run probably 40 50 lines

00:25:48,430 --> 00:25:52,900
of Yammer it's really easy to read you

00:25:51,100 --> 00:25:55,570
tweak a few variables there to make it

00:25:52,900 --> 00:25:57,610
fit your application because this

00:25:55,570 --> 00:26:01,510
templates gonna be 400 plus lines

00:25:57,610 --> 00:26:03,820
probably of kind of yellow in trying to

00:26:01,510 --> 00:26:05,770
edit that thing and maintain it is a

00:26:03,820 --> 00:26:09,190
nightmare especially once you're get

00:26:05,770 --> 00:26:11,130
crossing that 10 12 20 50 applications

00:26:09,190 --> 00:26:14,860
referencing it it's going to become

00:26:11,130 --> 00:26:16,620
unmaintainable so this was a huge huge

00:26:14,860 --> 00:26:19,300
win and a huge change for us

00:26:16,620 --> 00:26:21,310
these config files are also kind of

00:26:19,300 --> 00:26:24,250
removing these now - they're also in the

00:26:21,310 --> 00:26:28,240
repos with the code so the repo also has

00:26:24,250 --> 00:26:30,440
its config baked into the with it

00:26:28,240 --> 00:26:33,250
template files unfortunately it's a

00:26:30,440 --> 00:26:35,390
little bit of a it's not all roses right

00:26:33,250 --> 00:26:37,370
one of the things on the template files

00:26:35,390 --> 00:26:39,950
we're still hosting these in a publicly

00:26:37,370 --> 00:26:42,470
available use of public repo you can hit

00:26:39,950 --> 00:26:43,820
and github there's some limitations on

00:26:42,470 --> 00:26:45,950
spinnaker I guess there's some

00:26:43,820 --> 00:26:48,710
workarounds and we haven't really dug

00:26:45,950 --> 00:26:51,530
into it yet but the easiest path to

00:26:48,710 --> 00:26:54,140
getting this ready is hoseason

00:26:51,530 --> 00:26:57,140
s3 or some other bucket that's publicly

00:26:54,140 --> 00:26:58,669
available your templates spinnaker then

00:26:57,140 --> 00:27:00,679
can reference those and you just put the

00:26:58,669 --> 00:27:05,600
URL in your config file of where to find

00:27:00,679 --> 00:27:08,270
the template the config files also

00:27:05,600 --> 00:27:09,860
define all your environment they're not

00:27:08,270 --> 00:27:11,240
environment variables but the values

00:27:09,860 --> 00:27:12,410
that you want to inject into this

00:27:11,240 --> 00:27:13,880
template there's going to be tons of

00:27:12,410 --> 00:27:17,270
variables you're going to end up putting

00:27:13,880 --> 00:27:19,040
in this template to reuse it and we've

00:27:17,270 --> 00:27:20,510
got coded samples we're going to share

00:27:19,040 --> 00:27:22,429
with you later you just go grab from a

00:27:20,510 --> 00:27:27,500
github repository and take a look at how

00:27:22,429 --> 00:27:29,419
we did this so what do we find like

00:27:27,500 --> 00:27:31,880
pipeline benefits like awesome

00:27:29,419 --> 00:27:34,480
what's wider than where I use them well

00:27:31,880 --> 00:27:37,610
they increase speed for one thing

00:27:34,480 --> 00:27:38,900
luminate eliminate duplication one of

00:27:37,610 --> 00:27:39,980
the ghin one of the things is you know

00:27:38,900 --> 00:27:41,540
if we're if we're riding the same

00:27:39,980 --> 00:27:43,669
plentiful template file over and over

00:27:41,540 --> 00:27:47,799
and over for each application and just

00:27:43,669 --> 00:27:49,880
making a few tweaks it's one wasteful

00:27:47,799 --> 00:27:51,830
it's a waste of time it's hard to

00:27:49,880 --> 00:27:53,809
maintain and so we had to get rid of

00:27:51,830 --> 00:27:55,580
that I also created errors so move into

00:27:53,809 --> 00:27:57,200
configs and templates reduces the amount

00:27:55,580 --> 00:28:00,020
of errors we have maintenance costs are

00:27:57,200 --> 00:28:02,299
down if I have to roll out a change that

00:28:00,020 --> 00:28:04,400
needs to go to every application the

00:28:02,299 --> 00:28:07,190
change I put it in the template and now

00:28:04,400 --> 00:28:09,679
it's out there downside is because we're

00:28:07,190 --> 00:28:14,330
not using volume amounts yet again it's

00:28:09,679 --> 00:28:16,730
not all roses spinnaker isn't aware of

00:28:14,330 --> 00:28:18,350
changes to this template file so if you

00:28:16,730 --> 00:28:20,240
actually make a change in your templates

00:28:18,350 --> 00:28:22,790
you're still gonna have to go recycle

00:28:20,240 --> 00:28:23,800
all your pods to get those changes out

00:28:22,790 --> 00:28:30,070
into

00:28:23,800 --> 00:28:31,480
volume mounts will help fix that we're

00:28:30,070 --> 00:28:33,280
able to consolidate all of our updates

00:28:31,480 --> 00:28:35,890
again this is just part of putting

00:28:33,280 --> 00:28:37,750
shared code together make it easier to

00:28:35,890 --> 00:28:41,350
work with it's a much lower learning

00:28:37,750 --> 00:28:43,960
curve as a manager onboarding new talent

00:28:41,350 --> 00:28:46,030
and bringing people in if I have to hand

00:28:43,960 --> 00:28:48,370
them hundreds and hundreds of lines a

00:28:46,030 --> 00:28:49,870
new hambo code to work with I mean it's

00:28:48,370 --> 00:28:52,450
just kind of mind-boggling and they've

00:28:49,870 --> 00:28:55,270
never worked with it before but if I can

00:28:52,450 --> 00:28:57,490
say hey here's a project you just need

00:28:55,270 --> 00:28:59,140
to worry about the config file and make

00:28:57,490 --> 00:29:02,230
sure it works for application change a

00:28:59,140 --> 00:29:05,110
few variables it's much easier to get

00:29:02,230 --> 00:29:07,690
them on board it we can work them into

00:29:05,110 --> 00:29:09,580
the heart to the other stuff later and

00:29:07,690 --> 00:29:12,220
finally I think this is also a huge way

00:29:09,580 --> 00:29:13,660
in version control I know who made the

00:29:12,220 --> 00:29:15,700
change I know when it made it I can

00:29:13,660 --> 00:29:17,830
track it back to breaking changes that

00:29:15,700 --> 00:29:20,250
got into production so that's another

00:29:17,830 --> 00:29:20,250
huge win

00:29:21,730 --> 00:29:27,519
so we're getting towards like kind of

00:29:24,130 --> 00:29:31,480
what we learned right what was the good

00:29:27,519 --> 00:29:33,429
stuff things we learned was focusing our

00:29:31,480 --> 00:29:36,070
testing effort initially we again we

00:29:33,429 --> 00:29:37,570
were all over the place he had tests

00:29:36,070 --> 00:29:39,159
that were tested in microservice and

00:29:37,570 --> 00:29:42,399
similar tests for testing the api and

00:29:39,159 --> 00:29:44,710
similar tests for tonight god always be

00:29:42,399 --> 00:29:46,990
reviewing your testing and your see ICD

00:29:44,710 --> 00:29:49,029
processes look for where are we doing

00:29:46,990 --> 00:29:53,350
the same thing twice and can we stop

00:29:49,029 --> 00:29:55,510
doing that pipeline templates I just

00:29:53,350 --> 00:29:57,130
cannot say this enough if you're not

00:29:55,510 --> 00:29:58,870
using them yet or if you're interested

00:29:57,130 --> 00:30:01,389
in getting into spinnaker group going to

00:29:58,870 --> 00:30:04,510
want to use this it'll save you a huge

00:30:01,389 --> 00:30:06,429
amount of time code first swagger

00:30:04,510 --> 00:30:10,149
definitions anybody familiar with

00:30:06,429 --> 00:30:13,240
swagger you swagger right again those

00:30:10,149 --> 00:30:14,980
are really fun to write by hand you know

00:30:13,240 --> 00:30:17,019
so they have a problem we were writing

00:30:14,980 --> 00:30:19,510
these swagger definitions for our API is

00:30:17,019 --> 00:30:20,860
by handle well you can imagine when you

00:30:19,510 --> 00:30:22,600
have a whole team of developers each one

00:30:20,860 --> 00:30:27,460
of them writing swagger definitions as

00:30:22,600 --> 00:30:29,080
much as you try to control that each one

00:30:27,460 --> 00:30:31,269
ends up being a little different there's

00:30:29,080 --> 00:30:32,590
somebody somebody defines their things

00:30:31,269 --> 00:30:35,590
just a little differently here and

00:30:32,590 --> 00:30:37,360
there's things aren't consistent so we

00:30:35,590 --> 00:30:39,519
got away from that we finally were just

00:30:37,360 --> 00:30:42,909
like screw it sound working for us

00:30:39,519 --> 00:30:44,740
so we put in a swashbuckler this is a

00:30:42,909 --> 00:30:46,120
dotnet core thing it works it integrates

00:30:44,740 --> 00:30:47,950
with dotnet this actually allows our

00:30:46,120 --> 00:30:51,340
engineers to do what engineers do write

00:30:47,950 --> 00:30:53,740
code and we can just it generate a

00:30:51,340 --> 00:30:57,309
swagger definition file from the code

00:30:53,740 --> 00:31:00,100
directly finally uh code samples like

00:30:57,309 --> 00:31:02,710
this is stuff we have center edge slash

00:31:00,100 --> 00:31:04,299
spinnaker summit 2018 you want to go

00:31:02,710 --> 00:31:07,179
take a look at some of our code samples

00:31:04,299 --> 00:31:09,399
pull it down and I put links to orchid

00:31:07,179 --> 00:31:11,679
and rower look at how it works

00:31:09,399 --> 00:31:14,080
like if it sits out there if you've got

00:31:11,679 --> 00:31:15,700
questions and then finally obviously

00:31:14,080 --> 00:31:18,429
thank you we're just big thanks to

00:31:15,700 --> 00:31:19,870
spinnaker Timo dev every engineer and

00:31:18,429 --> 00:31:21,370
developer who's ever put in a pull

00:31:19,870 --> 00:31:24,510
request it's helped us we hope we've

00:31:21,370 --> 00:31:24,510
helped you guys too

00:31:24,960 --> 00:31:27,020

YouTube URL: https://www.youtube.com/watch?v=U-SdnLzizHg


