Title: Avram Lyon  "Delivering Games with Spinnaker"
Publication date: 2018-10-24
Playlist: Spinnaker Summit 2018
Description: 
	
Captions: 
	00:00:01,190 --> 00:00:14,400
[Music]

00:00:19,810 --> 00:00:24,910
so scope Li is a mobile games developer

00:00:22,150 --> 00:00:27,700
publisher based in Los Angeles also have

00:00:24,910 --> 00:00:31,390
another office in Barcelona and mate

00:00:27,700 --> 00:00:32,950
Studios around the world that sort of

00:00:31,390 --> 00:00:34,870
gets into some of the motivation for

00:00:32,950 --> 00:00:38,320
wanting a tool like spinnaker or the

00:00:34,870 --> 00:00:42,309
mobile business free-to-play games large

00:00:38,320 --> 00:00:43,420
audiences and also in the creative

00:00:42,309 --> 00:00:46,000
business which means that we have a

00:00:43,420 --> 00:00:48,430
desire to and to look at technology

00:00:46,000 --> 00:00:50,680
solutions making sure that game studios

00:00:48,430 --> 00:00:53,379
are studios for this create creativity

00:00:50,680 --> 00:00:55,870
autonomy as a publisher though we also

00:00:53,379 --> 00:00:57,489
have an interest in there being it all

00:00:55,870 --> 00:00:58,870
has to add up to a business and all has

00:00:57,489 --> 00:01:01,080
to add up to something that we can have

00:00:58,870 --> 00:01:04,030
some confidence in and reliability

00:01:01,080 --> 00:01:07,120
without unduly constraining the

00:01:04,030 --> 00:01:10,720
creativity so that it's Cokely itself is

00:01:07,120 --> 00:01:14,110
seven years old or so almost eight and

00:01:10,720 --> 00:01:16,210
I've been there most of that time and we

00:01:14,110 --> 00:01:17,890
are as it gets into what you know what

00:01:16,210 --> 00:01:19,510
we deploy and where we deploy we'll get

00:01:17,890 --> 00:01:23,020
some of those details we are an all a

00:01:19,510 --> 00:01:26,159
diverse shop and so despite the best

00:01:23,020 --> 00:01:28,930
efforts of the Google sales team and

00:01:26,159 --> 00:01:31,590
that that's us there are a few those are

00:01:28,930 --> 00:01:34,840
some marketing shots of a couple of the

00:01:31,590 --> 00:01:36,159
currently live titles including I guess

00:01:34,840 --> 00:01:38,710
that Looney Tunes one in the bottom

00:01:36,159 --> 00:01:41,439
I guess that's bottom left for you guys

00:01:38,710 --> 00:01:44,409
is coming out next week our next big

00:01:41,439 --> 00:01:48,490
launch but it's been announced already

00:01:44,409 --> 00:01:51,670
so no reveals here this is a despite

00:01:48,490 --> 00:01:53,500
being about games this is a spinnaker

00:01:51,670 --> 00:01:55,869
for games is still mainly about

00:01:53,500 --> 00:01:59,079
spinnaker and cloud services it's not

00:01:55,869 --> 00:02:00,460
mainly about 3d graphics and I'm pretty

00:01:59,079 --> 00:02:01,479
pictures so I think those may be the

00:02:00,460 --> 00:02:06,130
last pretty pictures

00:02:01,479 --> 00:02:07,719
beyond spinnaker zone beautiful art we

00:02:06,130 --> 00:02:10,570
haven't used spending over a couple of

00:02:07,719 --> 00:02:12,310
years now we've been in prod liver first

00:02:10,570 --> 00:02:16,080
workloads starting to play the spinnaker

00:02:12,310 --> 00:02:19,450
for some internal teams in early 2017

00:02:16,080 --> 00:02:21,280
all of the studios except for two are

00:02:19,450 --> 00:02:25,000
deploying their workloads with spinnaker

00:02:21,280 --> 00:02:28,530
and deployed targets communities native

00:02:25,000 --> 00:02:30,940
a sec - when we are an armory customer

00:02:28,530 --> 00:02:32,409
they they don't pay me extra to say that

00:02:30,940 --> 00:02:33,790
but it's it's important when you get

00:02:32,409 --> 00:02:37,540
into like the details of

00:02:33,790 --> 00:02:39,219
the choices around management and that

00:02:37,540 --> 00:02:42,939
you know that's where the way we're

00:02:39,219 --> 00:02:45,459
using it particularly early on in 2017

00:02:42,939 --> 00:02:48,790
I believe that's before spinnaker had

00:02:45,459 --> 00:02:50,680
versions and so every my every service

00:02:48,790 --> 00:02:52,629
had a version which as I think back of

00:02:50,680 --> 00:02:55,450
it I've no idea how that was ever a good

00:02:52,629 --> 00:02:59,260
idea but that was only one of the many

00:02:55,450 --> 00:03:00,790
things that made us very concerned very

00:02:59,260 --> 00:03:02,829
excited about the potential the software

00:03:00,790 --> 00:03:06,040
very concerned about the state of it and

00:03:02,829 --> 00:03:08,379
so we have been using it and is over the

00:03:06,040 --> 00:03:09,760
course of the past year and a half you

00:03:08,379 --> 00:03:12,519
know the back end deploys for every

00:03:09,760 --> 00:03:14,290
single game every single game we're

00:03:12,519 --> 00:03:17,049
making and all of our new projects have

00:03:14,290 --> 00:03:18,760
moved over to it on its merits and we'll

00:03:17,049 --> 00:03:21,760
talk some more about what spinnaker

00:03:18,760 --> 00:03:23,230
adoption means to teams but we don't

00:03:21,760 --> 00:03:25,359
have much of a central infrastructure

00:03:23,230 --> 00:03:26,950
team at scope lea and therefore a

00:03:25,359 --> 00:03:28,780
technology like this only grows through

00:03:26,950 --> 00:03:31,000
its merits and it grows through being of

00:03:28,780 --> 00:03:34,450
value to the individual game production

00:03:31,000 --> 00:03:38,109
teams so I will talk a little bit about

00:03:34,450 --> 00:03:42,549
the game development process because the

00:03:38,109 --> 00:03:44,769
way I look at how why teams find value

00:03:42,549 --> 00:03:47,709
and investing in efficiency and

00:03:44,769 --> 00:03:50,530
reliability in deployment part of it

00:03:47,709 --> 00:03:52,780
comes from some of the challenges that I

00:03:50,530 --> 00:03:54,010
think are somewhat inherent to games you

00:03:52,780 --> 00:03:55,599
can probably find parallels in other

00:03:54,010 --> 00:03:57,459
systems but for me I see them as

00:03:55,599 --> 00:04:03,280
problems with games because that's where

00:03:57,459 --> 00:04:06,489
I work and you know we the long cycle of

00:04:03,280 --> 00:04:10,269
development in making a game is sort of

00:04:06,489 --> 00:04:11,919
driven by the long cycle of releasing of

00:04:10,269 --> 00:04:14,430
releasing the next major version the

00:04:11,919 --> 00:04:17,560
mobile client and so you know the

00:04:14,430 --> 00:04:20,799
tentpole releases of a mobile game tend

00:04:17,560 --> 00:04:22,090
to be monthly or month and a half there

00:04:20,799 --> 00:04:24,280
may be intermediate releases between

00:04:22,090 --> 00:04:26,860
them but as anyone here has worked in

00:04:24,280 --> 00:04:28,830
mobile knows there's also a limit to how

00:04:26,860 --> 00:04:33,310
frequently you could possibly release

00:04:28,830 --> 00:04:35,020
without frustrating users or just ending

00:04:33,310 --> 00:04:36,699
up with one thing in the review queue

00:04:35,020 --> 00:04:38,830
with Apple other other ones are still in

00:04:36,699 --> 00:04:40,900
the queue so there's just a fundamental

00:04:38,830 --> 00:04:44,409
limit on how continuously your CD can be

00:04:40,900 --> 00:04:47,110
on mobile and even if it is it's it's

00:04:44,409 --> 00:04:49,240
just a there's a it's

00:04:47,110 --> 00:04:52,360
attacks on your users - pushing a

00:04:49,240 --> 00:04:54,280
download every every day and so for us

00:04:52,360 --> 00:04:56,470
the major release cycle is about a month

00:04:54,280 --> 00:05:00,300
to a month and a half and then there may

00:04:56,470 --> 00:05:02,080
be patches follow-ups between those and

00:05:00,300 --> 00:05:03,729
there are a lot of things that come

00:05:02,080 --> 00:05:06,580
together fundamentally I mean there's a

00:05:03,729 --> 00:05:09,970
I see as many four major tracks of

00:05:06,580 --> 00:05:12,069
people's work and ideas that have to go

00:05:09,970 --> 00:05:15,370
from idea to to being in the hands of

00:05:12,069 --> 00:05:18,190
users there's the game client and so we

00:05:15,370 --> 00:05:20,349
are a unit of shop and so that means you

00:05:18,190 --> 00:05:22,479
know that's there has to be some version

00:05:20,349 --> 00:05:24,520
of the of the client code all in c-sharp

00:05:22,479 --> 00:05:25,900
that is ultimately the version that is

00:05:24,520 --> 00:05:27,729
there's built in you build out of your

00:05:25,900 --> 00:05:29,440
final to play our artifact and get that

00:05:27,729 --> 00:05:31,000
through Apple review and there's some

00:05:29,440 --> 00:05:33,400
pretty - submit it to Google and get out

00:05:31,000 --> 00:05:35,139
your users that's one thing that sort of

00:05:33,400 --> 00:05:36,969
has the slowest inherent time line as I

00:05:35,139 --> 00:05:39,520
said already but it's also there's a

00:05:36,969 --> 00:05:40,690
back-end component that you know many of

00:05:39,520 --> 00:05:42,400
these things have a vacuum component

00:05:40,690 --> 00:05:43,419
that also has to be live has to be

00:05:42,400 --> 00:05:46,599
running on the right servers and the

00:05:43,419 --> 00:05:49,150
right regions and a lot of another big

00:05:46,599 --> 00:05:50,969
area is that game design games at least

00:05:49,150 --> 00:05:54,069
the way we write them and I think most

00:05:50,969 --> 00:05:56,319
modern game development particularly on

00:05:54,069 --> 00:05:58,770
mobile and free-to-play is a huge amount

00:05:56,319 --> 00:06:03,219
of game design and configuration that

00:05:58,770 --> 00:06:04,599
changes on some schedule and so in a and

00:06:03,219 --> 00:06:07,150
a character based game make character

00:06:04,599 --> 00:06:09,909
strengths it may be the costs of items

00:06:07,150 --> 00:06:12,279
it may be exchange rates and maybe sales

00:06:09,909 --> 00:06:16,750
that what is what configuration means is

00:06:12,279 --> 00:06:19,690
very broad but it's also a a thing that

00:06:16,750 --> 00:06:23,050
must be designed tested reviewed rolled

00:06:19,690 --> 00:06:25,389
out to users and there's art there's art

00:06:23,050 --> 00:06:27,400
broadly stated I mean there's a lot of

00:06:25,389 --> 00:06:29,800
assets that must be generated they must

00:06:27,400 --> 00:06:31,180
be generated pushed out to the right CD

00:06:29,800 --> 00:06:34,180
ends and the right compression formats

00:06:31,180 --> 00:06:36,490
and then your clients must be told to go

00:06:34,180 --> 00:06:37,900
pick them up and so making a major

00:06:36,490 --> 00:06:40,120
feature release and Wells all of these

00:06:37,900 --> 00:06:42,099
things not everything requires

00:06:40,120 --> 00:06:44,110
everything but fundamentally the big

00:06:42,099 --> 00:06:46,509
cycle of the entire game team getting

00:06:44,110 --> 00:06:51,310
something done it involves all these

00:06:46,509 --> 00:06:53,050
things happening and historically I mean

00:06:51,310 --> 00:06:54,550
at least the default pattern we tend to

00:06:53,050 --> 00:06:56,409
see him with Studio C with studios is

00:06:54,550 --> 00:06:59,529
that they tend to sort of think of it as

00:06:56,409 --> 00:07:00,760
one big thing that we're going to fight

00:06:59,529 --> 00:07:02,760
get the next

00:07:00,760 --> 00:07:05,470
next release you know release six and

00:07:02,760 --> 00:07:06,940
here's the stuff doesn't go in it we're

00:07:05,470 --> 00:07:08,350
all gonna work on it and then when it's

00:07:06,940 --> 00:07:10,150
code complete and all the art is done

00:07:08,350 --> 00:07:12,490
and all the it's all designs on work and

00:07:10,150 --> 00:07:14,560
start testing it will fix the bugs in it

00:07:12,490 --> 00:07:15,490
will have an RC will check that we'll

00:07:14,560 --> 00:07:18,160
get it out to our users

00:07:15,490 --> 00:07:20,050
at which point your users are hit with a

00:07:18,160 --> 00:07:23,280
change potentially your client binary

00:07:20,050 --> 00:07:26,730
and us it's noot balancing changes and

00:07:23,280 --> 00:07:29,140
and a new game back-end all at once and

00:07:26,730 --> 00:07:31,750
that's a long time and so if studios

00:07:29,140 --> 00:07:33,430
tend to say well that's a eight week

00:07:31,750 --> 00:07:34,720
process and so but we don't want to be

00:07:33,430 --> 00:07:36,460
every eight week so we'll just sort of

00:07:34,720 --> 00:07:38,050
have a few different parallel tracks

00:07:36,460 --> 00:07:40,540
that work that way and we'll stagger

00:07:38,050 --> 00:07:42,640
them and this scales up in the game

00:07:40,540 --> 00:07:45,160
business from you know sort of the

00:07:42,640 --> 00:07:47,800
annual cycle of FIFA and console which

00:07:45,160 --> 00:07:49,960
is a two-year development cycle that is

00:07:47,800 --> 00:07:52,780
staggered by a year basically and they

00:07:49,960 --> 00:07:55,120
just sort of overlap by year and do this

00:07:52,780 --> 00:07:56,740
for us if they're staggered they're

00:07:55,120 --> 00:07:58,750
staggered with a release coming out

00:07:56,740 --> 00:08:00,400
every month and maybe there's a two or

00:07:58,750 --> 00:08:03,160
three month development cycle for a

00:08:00,400 --> 00:08:05,080
major cycle this is a problem although

00:08:03,160 --> 00:08:06,520
because this does let you get more

00:08:05,080 --> 00:08:08,950
changes out to your users but there's

00:08:06,520 --> 00:08:12,430
just so much change that can be

00:08:08,950 --> 00:08:16,480
happening at once and what we find

00:08:12,430 --> 00:08:17,710
basically is that this is desire so

00:08:16,480 --> 00:08:20,080
forget all of your pieces in the right

00:08:17,710 --> 00:08:23,380
state and get your golden master version

00:08:20,080 --> 00:08:26,350
that you're going to be able to ship it

00:08:23,380 --> 00:08:28,210
gets people in a position of relying on

00:08:26,350 --> 00:08:30,130
work well this comes out we're going to

00:08:28,210 --> 00:08:31,720
force update all of the users to the

00:08:30,130 --> 00:08:32,950
next version there will only be one

00:08:31,720 --> 00:08:34,870
version live at a time

00:08:32,950 --> 00:08:40,150
there will be you know it's all going to

00:08:34,870 --> 00:08:42,660
go out at the same time and it you know

00:08:40,150 --> 00:08:46,510
you are in a large iteration loop and

00:08:42,660 --> 00:08:47,710
that basically okay when I'm trying to

00:08:46,510 --> 00:08:49,600
get a team to believe move away from

00:08:47,710 --> 00:08:51,850
that refer to there's a big bang release

00:08:49,600 --> 00:08:53,110
like everything everything it's been

00:08:51,850 --> 00:08:54,840
totally validate you have your gold

00:08:53,110 --> 00:09:01,060
master version you put it out there

00:08:54,840 --> 00:09:02,920
inevitably this goes poorly there's such

00:09:01,060 --> 00:09:05,770
a large change surface when you have

00:09:02,920 --> 00:09:07,990
changed everything live at once that you

00:09:05,770 --> 00:09:11,290
know your ability to just to regress all

00:09:07,990 --> 00:09:14,100
possible all impacts to a large you know

00:09:11,290 --> 00:09:18,000
a large complex game is

00:09:14,100 --> 00:09:20,209
just too much and I think the most sort

00:09:18,000 --> 00:09:22,649
of interesting detail around through the

00:09:20,209 --> 00:09:24,329
having Big Bang client-server changes at

00:09:22,649 --> 00:09:26,670
the same time everyone updates at the

00:09:24,329 --> 00:09:29,940
same time assumption within development

00:09:26,670 --> 00:09:33,149
teams is that particularly client and

00:09:29,940 --> 00:09:35,399
server are changing at the same time it

00:09:33,149 --> 00:09:38,100
doesn't protect developers from

00:09:35,399 --> 00:09:39,959
themselves in terms of making ace the

00:09:38,100 --> 00:09:41,730
smallest change that they can make in

00:09:39,959 --> 00:09:42,990
the direction they're aiming for because

00:09:41,730 --> 00:09:45,449
if you're going to change everything at

00:09:42,990 --> 00:09:47,190
one everything in a sort of a coupled

00:09:45,449 --> 00:09:48,720
fashion between client and server you

00:09:47,190 --> 00:09:50,730
can totally rewrite your API API

00:09:48,720 --> 00:09:52,980
contract from version to version there's

00:09:50,730 --> 00:09:55,579
no need to find a natural evolution that

00:09:52,980 --> 00:09:59,550
you will roll out you can just sort of

00:09:55,579 --> 00:10:01,290
redo it again and again and so it

00:09:59,550 --> 00:10:04,680
doesn't it doesn't sort of help people

00:10:01,290 --> 00:10:06,000
find the minimal diff and because so

00:10:04,680 --> 00:10:09,540
much potential you could change in each

00:10:06,000 --> 00:10:11,160
cycle it really the thing that isn't

00:10:09,540 --> 00:10:12,720
mattering for us most is a company is

00:10:11,160 --> 00:10:15,269
that you really struggle with timeline

00:10:12,720 --> 00:10:17,069
reliability because so many you know

00:10:15,269 --> 00:10:19,350
you're the changes you wanted to get out

00:10:17,069 --> 00:10:20,790
for art or for your new game design they

00:10:19,350 --> 00:10:23,399
require you know a change in the

00:10:20,790 --> 00:10:25,980
contract for how character power is is

00:10:23,399 --> 00:10:30,029
represented in the your game modeling

00:10:25,980 --> 00:10:31,529
system and that's held up because that

00:10:30,029 --> 00:10:32,459
you know that is in the same big change

00:10:31,529 --> 00:10:34,560
that you're trying to get out with a

00:10:32,459 --> 00:10:37,410
whole bunch of other changes and you

00:10:34,560 --> 00:10:40,019
can't get anything out you end up having

00:10:37,410 --> 00:10:42,569
to hold up the whole train for anything

00:10:40,019 --> 00:10:44,269
going wrong those RCS have to be

00:10:42,569 --> 00:10:46,680
restarted because something goes wrong

00:10:44,269 --> 00:10:49,680
changing so a lot of time as we all know

00:10:46,680 --> 00:10:51,509
you know delivery has downside I guess I

00:10:49,680 --> 00:10:55,980
don't need to tell people here about the

00:10:51,509 --> 00:10:58,740
risks of of large changes but the thing

00:10:55,980 --> 00:11:01,290
is I mean games have things that make it

00:10:58,740 --> 00:11:03,449
hard to ship emit a small diff like as I

00:11:01,290 --> 00:11:05,430
said even I'm just the basics of the

00:11:03,449 --> 00:11:08,189
timeline a mobile means that the things

00:11:05,430 --> 00:11:10,709
people talk about like if deploying 500

00:11:08,189 --> 00:11:13,410
times a day you cannot deploy to the to

00:11:10,709 --> 00:11:17,279
a mobile app store 500 times a day it is

00:11:13,410 --> 00:11:19,860
not possible and but there are other

00:11:17,279 --> 00:11:21,600
things there inherent to it you have PvP

00:11:19,860 --> 00:11:25,199
gameplay you have people against each

00:11:21,600 --> 00:11:26,610
other if I roll out changes and say this

00:11:25,199 --> 00:11:27,650
person has changed and this person

00:11:26,610 --> 00:11:30,320
doesn't

00:11:27,650 --> 00:11:31,670
I have to make sure that we preserve the

00:11:30,320 --> 00:11:35,060
integrity of the experience for our

00:11:31,670 --> 00:11:36,440
users we can't have you know when things

00:11:35,060 --> 00:11:38,660
change they must change them it's fair

00:11:36,440 --> 00:11:40,850
and it doesn't break or both fair and

00:11:38,660 --> 00:11:42,530
stable sometimes you could have issues

00:11:40,850 --> 00:11:44,600
of being fair you'll also have issues

00:11:42,530 --> 00:11:46,550
with person a new version plays against

00:11:44,600 --> 00:11:47,600
person old version does this work right

00:11:46,550 --> 00:11:50,210
you've got to take that into account

00:11:47,600 --> 00:11:51,170
there's you know other things like the I

00:11:50,210 --> 00:11:55,220
guess everyone has marketing

00:11:51,170 --> 00:11:57,380
considerations and another thing I'll

00:11:55,220 --> 00:12:01,900
just be I think everyone in in the

00:11:57,380 --> 00:12:04,790
gaming space is aware of this it's the

00:12:01,900 --> 00:12:08,390
automated testing I think runs into

00:12:04,790 --> 00:12:09,710
greater challenges in in game making

00:12:08,390 --> 00:12:16,040
that it probably does in some other

00:12:09,710 --> 00:12:18,200
areas the exploratory testing directed

00:12:16,040 --> 00:12:19,790
testing scripted testing by people and

00:12:18,200 --> 00:12:22,190
something a very large role particularly

00:12:19,790 --> 00:12:23,870
for client changes in our world which

00:12:22,190 --> 00:12:26,300
also means you have you have to find

00:12:23,870 --> 00:12:29,450
some way to limit your demand for human

00:12:26,300 --> 00:12:31,310
testing as you find a way to get a to

00:12:29,450 --> 00:12:33,980
get more discs getting out to users and

00:12:31,310 --> 00:12:37,310
so well we've tended to do with studios

00:12:33,980 --> 00:12:39,110
is try to get them some degree of

00:12:37,310 --> 00:12:41,840
decoupling of these three types of

00:12:39,110 --> 00:12:43,580
problem so they their approach to

00:12:41,840 --> 00:12:47,720
releasing each of the three major areas

00:12:43,580 --> 00:12:50,060
is not so bound up together and so what

00:12:47,720 --> 00:12:53,260
that means for us is that we know your

00:12:50,060 --> 00:12:55,790
client has it's sort of its big cycle

00:12:53,260 --> 00:12:57,110
but at least you know maybe you can get

00:12:55,790 --> 00:12:59,270
to a weekly cycle with yours with your

00:12:57,110 --> 00:13:02,060
backup code we have had to find a way to

00:12:59,270 --> 00:13:05,300
centralize it without having a full time

00:13:02,060 --> 00:13:08,390
for this engineering team and there are

00:13:05,300 --> 00:13:10,340
edges of it that I I try to whisper in

00:13:08,390 --> 00:13:12,920
the ears of spinnaker core developers

00:13:10,340 --> 00:13:15,260
when we're here at the summit about you

00:13:12,920 --> 00:13:16,850
know when you have eight studios and

00:13:15,260 --> 00:13:18,110
their new ADA best accounts at Korea's

00:13:16,850 --> 00:13:21,020
cluster is coming online all the time

00:13:18,110 --> 00:13:23,780
where you know the tax on even a central

00:13:21,020 --> 00:13:25,190
non full-time team for this are still

00:13:23,780 --> 00:13:26,990
substantial if this account needs to be

00:13:25,190 --> 00:13:28,790
created this cloud notice account needs

00:13:26,990 --> 00:13:31,010
to be added to spinnaker these careers

00:13:28,790 --> 00:13:32,810
namespaces to be added these users need

00:13:31,010 --> 00:13:34,100
to have backs this new Google Group

00:13:32,810 --> 00:13:37,280
needs to go to access these things

00:13:34,100 --> 00:13:40,130
there's a churn here that we have to

00:13:37,280 --> 00:13:41,030
deal with and then upgrades I will tell

00:13:40,130 --> 00:13:42,890
you frankly the

00:13:41,030 --> 00:13:44,990
one that the spinnaker that we use for

00:13:42,890 --> 00:13:47,260
the game studios unfortunately it's

00:13:44,990 --> 00:13:51,020
running a version from January because

00:13:47,260 --> 00:13:52,730
it's a couple of upgrades had to roll

00:13:51,020 --> 00:13:57,710
back and we'll do the next one soon

00:13:52,730 --> 00:14:00,500
hopefully but you know it is a system

00:13:57,710 --> 00:14:03,860
that has so much of a wide surface area

00:14:00,500 --> 00:14:05,360
that it is it is not hard to run into

00:14:03,860 --> 00:14:08,210
edges where maybe you are one of the few

00:14:05,360 --> 00:14:10,490
people using it if you used a lot it is

00:14:08,210 --> 00:14:12,110
easier than what's before them so we

00:14:10,490 --> 00:14:13,340
have essentially spinnaker I'm not going

00:14:12,110 --> 00:14:17,810
to go and want to get into some of the

00:14:13,340 --> 00:14:19,910
user story stuff here but we have a

00:14:17,810 --> 00:14:23,090
centralized spinnaker but we don't take

00:14:19,910 --> 00:14:25,190
a very strong a peon aidid's stance at

00:14:23,090 --> 00:14:28,070
the moment in terms of how people should

00:14:25,190 --> 00:14:31,250
use it well we do centralized is that it

00:14:28,070 --> 00:14:32,750
is an option for teams we share sort of

00:14:31,250 --> 00:14:35,480
best practices what other teams have

00:14:32,750 --> 00:14:37,760
done share examples of pipelines the

00:14:35,480 --> 00:14:39,740
most recent team to adopt spinnaker from

00:14:37,760 --> 00:14:41,300
what they had done previously did it

00:14:39,740 --> 00:14:43,550
actually with no conversations of

00:14:41,300 --> 00:14:46,370
whatsoever with with me with Steven some

00:14:43,550 --> 00:14:47,750
other people essentially we added their

00:14:46,370 --> 00:14:50,870
account to cloud driver out of them

00:14:47,750 --> 00:14:52,070
super cool group and a month later I

00:14:50,870 --> 00:14:54,590
realized they were deploying product

00:14:52,070 --> 00:14:57,140
spinnaker I had no idea so I think I

00:14:54,590 --> 00:14:59,900
could solve it something of a success in

00:14:57,140 --> 00:15:01,130
that it is the case that if you just

00:14:59,900 --> 00:15:03,350
read the docs and you're not afraid to

00:15:01,130 --> 00:15:06,380
try things the team without any further

00:15:03,350 --> 00:15:08,090
come consultation with with people who

00:15:06,380 --> 00:15:14,000
have been using for the studios could

00:15:08,090 --> 00:15:15,740
just do it but we you know we are I

00:15:14,000 --> 00:15:17,840
think always looking at how we can help

00:15:15,740 --> 00:15:20,090
teams learn from each other because our

00:15:17,840 --> 00:15:21,890
opinion around what makes a good deploy

00:15:20,090 --> 00:15:26,480
strategy is shifting and it always

00:15:21,890 --> 00:15:29,060
changes but you know that we do

00:15:26,480 --> 00:15:31,070
centralize with somewhat reluctantly

00:15:29,060 --> 00:15:33,680
it's the only way we really see it as

00:15:31,070 --> 00:15:34,970
being possible but we also don't really

00:15:33,680 --> 00:15:38,570
we didn't really want the responsibility

00:15:34,970 --> 00:15:40,810
of centralization either we do only on a

00:15:38,570 --> 00:15:44,620
vendor here as well to help with this

00:15:40,810 --> 00:15:47,750
there's let's get into some story stuff

00:15:44,620 --> 00:15:50,240
and so I want to go basically the

00:15:47,750 --> 00:15:53,030
remainder of the talk here is really

00:15:50,240 --> 00:15:54,889
looking at some of the ways of the

00:15:53,030 --> 00:15:58,639
strategy is the ways that we approach

00:15:54,889 --> 00:16:02,589
that that game deploys tend to happen

00:15:58,639 --> 00:16:05,689
that and some of the things you run into

00:16:02,589 --> 00:16:09,019
so let's dig in and now we get pretty

00:16:05,689 --> 00:16:11,989
pictures again so a common sort of dev

00:16:09,019 --> 00:16:13,579
deploy we usually in our game teams our

00:16:11,989 --> 00:16:16,879
development environments do continuously

00:16:13,579 --> 00:16:20,019
deploy and so it usually looks something

00:16:16,879 --> 00:16:24,249
like this and we'll go a little bit into

00:16:20,019 --> 00:16:28,069
it's gonna be a pain and so I basically

00:16:24,249 --> 00:16:30,949
that does mean you know this Senator

00:16:28,069 --> 00:16:32,359
bake happening and then you know bake

00:16:30,949 --> 00:16:34,309
deployed to the one cluster we tend to

00:16:32,359 --> 00:16:35,660
be have a monolithic back-end there's

00:16:34,309 --> 00:16:37,970
enough different things to deploy with a

00:16:35,660 --> 00:16:39,290
client assets give configuration and

00:16:37,970 --> 00:16:41,720
game server that we don't want there to

00:16:39,290 --> 00:16:43,609
be forty five game servers with

00:16:41,720 --> 00:16:46,220
different components of game we keep it

00:16:43,609 --> 00:16:48,169
at mainly one some studios are a little

00:16:46,220 --> 00:16:50,449
bit different but tends to be one maybe

00:16:48,169 --> 00:16:52,519
there's an API work relay or schedule

00:16:50,449 --> 00:16:57,290
job or layer but it's mainly one

00:16:52,519 --> 00:17:00,319
artifact and you know deploy and then

00:16:57,290 --> 00:17:02,540
you run a test suite additional test

00:17:00,319 --> 00:17:05,329
suite against the deployed API server

00:17:02,540 --> 00:17:07,659
and then I've never done it so continues

00:17:05,329 --> 00:17:09,980
to plant undeveloped it's pretty boring

00:17:07,659 --> 00:17:11,179
though one thing a couple the one

00:17:09,980 --> 00:17:13,279
configuration that's are the one

00:17:11,179 --> 00:17:15,110
consideration here around develop is

00:17:13,279 --> 00:17:16,370
that this actually was one of this is

00:17:15,110 --> 00:17:17,689
usually one of most contentious things

00:17:16,370 --> 00:17:22,909
for a spinnaker adoption in the game

00:17:17,689 --> 00:17:25,909
team is that the the baked ami deployed

00:17:22,909 --> 00:17:27,829
ec2 is really it's even when you try

00:17:25,909 --> 00:17:31,279
hard to speed it up it's still quite

00:17:27,829 --> 00:17:34,220
slow and so for a game team really is

00:17:31,279 --> 00:17:37,309
used to a quick turnaround it's a very

00:17:34,220 --> 00:17:39,919
frustrating delay to have to eat as a

00:17:37,309 --> 00:17:43,970
team is that the time from code and repo

00:17:39,919 --> 00:17:46,700
to color running on server has grown to

00:17:43,970 --> 00:17:48,549
these several minutes one thing we would

00:17:46,700 --> 00:17:51,230
do to help with that is we tend to

00:17:48,549 --> 00:17:53,950
deploy first test later in some of these

00:17:51,230 --> 00:17:57,169
environments sorry

00:17:53,950 --> 00:18:01,070
run some tests later so some versed on

00:17:57,169 --> 00:18:02,720
later because it's a team maybe you know

00:18:01,070 --> 00:18:04,879
maybe biased in favor of just getting it

00:18:02,720 --> 00:18:06,440
out there because there is a contract

00:18:04,879 --> 00:18:07,280
with the client team and you may want to

00:18:06,440 --> 00:18:09,440
you know

00:18:07,280 --> 00:18:11,180
you may want to be able to get that up

00:18:09,440 --> 00:18:16,820
there so someone that client team is

00:18:11,180 --> 00:18:20,600
quickly unblocked now in prod most

00:18:16,820 --> 00:18:22,580
people were looking at is prod here's I

00:18:20,600 --> 00:18:26,410
think probably the same game I'm not

00:18:22,580 --> 00:18:29,630
sure I don't remember how they work

00:18:26,410 --> 00:18:31,400
frequently well any game in production

00:18:29,630 --> 00:18:35,150
should be using a canary to play we

00:18:31,400 --> 00:18:36,860
don't use Kayenta at the moment we did

00:18:35,150 --> 00:18:39,110
we've looked at it we looked at our MERS

00:18:36,860 --> 00:18:42,560
barometer before that for us a canary

00:18:39,110 --> 00:18:44,450
usually is judge manually and so it's

00:18:42,560 --> 00:18:46,730
really standing up a single server in

00:18:44,450 --> 00:18:48,770
today is Jay and so people hundred up we

00:18:46,730 --> 00:18:51,500
got another one and we're not looking

00:18:48,770 --> 00:18:53,360
for the automated analysis we're just we

00:18:51,500 --> 00:18:54,800
will just do an analysis of that one the

00:18:53,360 --> 00:18:56,570
one instance looking for anomalies and

00:18:54,800 --> 00:18:58,850
logs looking for any errors is throwing

00:18:56,570 --> 00:19:00,470
looking at load potentially looking at

00:18:58,850 --> 00:19:02,390
response times on that on that instance

00:19:00,470 --> 00:19:04,430
it just takes an even share from the

00:19:02,390 --> 00:19:06,200
general load balancer we usually would

00:19:04,430 --> 00:19:08,180
also add it to its own load balancer if

00:19:06,200 --> 00:19:09,440
you look at the details of the deploy so

00:19:08,180 --> 00:19:13,490
you can hit it specifically if you

00:19:09,440 --> 00:19:16,610
wanted to but you know and then it's a

00:19:13,490 --> 00:19:21,530
manual check just hey do we want to do

00:19:16,610 --> 00:19:23,210
want to proceed or not and that is very

00:19:21,530 --> 00:19:25,370
helpful for ticket particularly for

00:19:23,210 --> 00:19:27,110
things like I didn't running into

00:19:25,370 --> 00:19:29,360
caching because isn't see problems for

00:19:27,110 --> 00:19:32,990
running in a mixed fleet mode during a

00:19:29,360 --> 00:19:36,230
deploy or frankly anything and so we

00:19:32,990 --> 00:19:38,360
don't we could grade it but we don't at

00:19:36,230 --> 00:19:41,300
the moment because most of the things we

00:19:38,360 --> 00:19:43,310
found don't have a good they're

00:19:41,300 --> 00:19:45,710
exploratory really you look at it and

00:19:43,310 --> 00:19:48,620
explore we're also deploying few enough

00:19:45,710 --> 00:19:51,020
things to production per team the scales

00:19:48,620 --> 00:19:53,450
fine you're deploying weekly if the

00:19:51,020 --> 00:19:54,680
process is that you send up a canary you

00:19:53,450 --> 00:19:56,450
also deploy the stagings

00:19:54,680 --> 00:19:59,120
get a manual test against the staging

00:19:56,450 --> 00:20:00,710
environment and that in the morning you

00:19:59,120 --> 00:20:02,240
checked the canary to check all of its

00:20:00,710 --> 00:20:03,890
logs everything's clean proceed to full

00:20:02,240 --> 00:20:05,090
rod it's a straightforward process

00:20:03,890 --> 00:20:06,920
you're on a weekly schedule in the first

00:20:05,090 --> 00:20:08,330
place and you're fine this just through

00:20:06,920 --> 00:20:11,900
isn't one of the big things I love about

00:20:08,330 --> 00:20:14,240
spinnaker though is that there's an

00:20:11,900 --> 00:20:16,160
option usually for like a deeper

00:20:14,240 --> 00:20:18,080
adoption like a technology here that you

00:20:16,160 --> 00:20:19,690
could go full automatic but also a

00:20:18,080 --> 00:20:21,440
manual judgments are a great feature

00:20:19,690 --> 00:20:23,570
like Franklin

00:20:21,440 --> 00:20:27,200
you just need to stock your let let your

00:20:23,570 --> 00:20:29,120
process embed the business the

00:20:27,200 --> 00:20:31,669
underlying business structure of it and

00:20:29,120 --> 00:20:33,529
so like there there is a you know the

00:20:31,669 --> 00:20:35,509
manual QA team and that that will that

00:20:33,529 --> 00:20:37,549
will do part of this and there does

00:20:35,509 --> 00:20:40,720
there is it a manual QA stage it's just

00:20:37,549 --> 00:20:44,600
a you know hold off follow up later

00:20:40,720 --> 00:20:47,210
component this is a well we're gonna see

00:20:44,600 --> 00:20:51,110
a few pieces from another deploy

00:20:47,210 --> 00:20:56,360
strategy that goes into some of the

00:20:51,110 --> 00:20:58,580
other ways that we use spinnaker and if

00:20:56,360 --> 00:21:00,799
we look at this one we're gonna see it

00:20:58,580 --> 00:21:01,970
starts with chuck prawn tails I don't

00:21:00,799 --> 00:21:04,309
even remember what the stage does is a

00:21:01,970 --> 00:21:06,110
Jenkins job it's not a I didn't write

00:21:04,309 --> 00:21:08,870
that when I last worked on this this

00:21:06,110 --> 00:21:09,769
pipeline didn't have that stage there's

00:21:08,870 --> 00:21:11,809
another good thing

00:21:09,769 --> 00:21:14,809
hopefully presumably it's a useful and

00:21:11,809 --> 00:21:16,549
very valuable stage oops I don't know

00:21:14,809 --> 00:21:19,460
what it does now as we get into this

00:21:16,549 --> 00:21:21,559
this is a team that uses a their

00:21:19,460 --> 00:21:23,330
production rollout uses a stage called

00:21:21,559 --> 00:21:27,080
the called live mirror which is it's

00:21:23,330 --> 00:21:29,539
where the it is basically where anything

00:21:27,080 --> 00:21:31,610
is goes before it goes to full

00:21:29,539 --> 00:21:33,799
production it's the same scale to use

00:21:31,610 --> 00:21:35,720
the same instance type and it's the same

00:21:33,799 --> 00:21:39,309
game configuration as what's in

00:21:35,720 --> 00:21:43,970
production and we actually build they mi

00:21:39,309 --> 00:21:47,169
push it to live mirror and then promote

00:21:43,970 --> 00:21:49,669
it to production using a proper ami

00:21:47,169 --> 00:21:52,340
promotion this is actually one of the

00:21:49,669 --> 00:21:54,980
things that you know it says it's doing

00:21:52,340 --> 00:21:56,450
a it's promoted a Mike Ross account as

00:21:54,980 --> 00:21:59,149
well and so there's actually one account

00:21:56,450 --> 00:22:00,769
for dev one from and so it's in this

00:21:59,149 --> 00:22:02,360
process the same ami is being reused

00:22:00,769 --> 00:22:04,850
from one to the other but we're looking

00:22:02,360 --> 00:22:06,049
to the arrows here the first step will

00:22:04,850 --> 00:22:10,850
look a little bit later is this

00:22:06,049 --> 00:22:15,409
bootstrapping live mirror and we'll see

00:22:10,850 --> 00:22:17,259
what that is and then it does ah execute

00:22:15,409 --> 00:22:20,750
liquid base so it's database migrations

00:22:17,259 --> 00:22:23,629
and then it does deploy to the four

00:22:20,750 --> 00:22:25,190
clusters and so that there is actually a

00:22:23,629 --> 00:22:27,470
separate ami for each of the four

00:22:25,190 --> 00:22:29,120
components of this application it's

00:22:27,470 --> 00:22:31,580
often single codebase but it deploys for

00:22:29,120 --> 00:22:33,850
different pieces work or API admin tool

00:22:31,580 --> 00:22:33,850
and

00:22:33,940 --> 00:22:38,590
what's another one cheap I think they

00:22:36,070 --> 00:22:40,660
call it it's the api's that you can't

00:22:38,590 --> 00:22:43,420
hit if you're in production because

00:22:40,660 --> 00:22:44,380
they're for cheating and there are

00:22:43,420 --> 00:22:48,930
separate cluster they're not in

00:22:44,380 --> 00:22:51,220
production don't look for them and they

00:22:48,930 --> 00:22:53,860
they have those and then at the end they

00:22:51,220 --> 00:22:57,070
also have a canary in the same strategy

00:22:53,860 --> 00:22:58,960
a canary of pass adore fail at also

00:22:57,070 --> 00:23:01,900
standing up a single instance just of

00:22:58,960 --> 00:23:04,920
API for a manual judgment to be followed

00:23:01,900 --> 00:23:07,810
on it and we'll go a little bit into

00:23:04,920 --> 00:23:09,640
bootstrapping and so in here and you

00:23:07,810 --> 00:23:11,590
could it's an other pipelines as well

00:23:09,640 --> 00:23:14,010
for all of our titles there's something

00:23:11,590 --> 00:23:16,060
called bootstrapping and I guess

00:23:14,010 --> 00:23:17,620
bootstrapping I guess we frequently

00:23:16,060 --> 00:23:20,770
refer to as infrastructure deployment

00:23:17,620 --> 00:23:22,330
but it's not always that and it's one of

00:23:20,770 --> 00:23:24,970
the things that is you know on the

00:23:22,330 --> 00:23:26,590
periphery of your code there inevitably

00:23:24,970 --> 00:23:28,660
relies on something whether it's tables

00:23:26,590 --> 00:23:30,010
its databases whether it's cues whether

00:23:28,660 --> 00:23:34,060
it's something that's not your

00:23:30,010 --> 00:23:35,860
application itself and at at scope that

00:23:34,060 --> 00:23:38,770
we've seen one of basically seen two

00:23:35,860 --> 00:23:42,790
patterns for this in some cases what

00:23:38,770 --> 00:23:45,220
we're what we're seeing is that you know

00:23:42,790 --> 00:23:46,210
the game server knows what all the

00:23:45,220 --> 00:23:48,880
infrastructure needs for

00:23:46,210 --> 00:23:50,980
programmatically and so maybe there's a

00:23:48,880 --> 00:23:54,070
classes that are annotated with a dynamo

00:23:50,980 --> 00:23:56,230
table that their content is stored in or

00:23:54,070 --> 00:23:58,210
something like that and then there's a

00:23:56,230 --> 00:24:00,970
bootstrapper and true point that you can

00:23:58,210 --> 00:24:02,110
just run and that will check the

00:24:00,970 --> 00:24:03,700
environment it's in check if it has all

00:24:02,110 --> 00:24:06,130
the stuff it needs create things it

00:24:03,700 --> 00:24:08,200
needs make the changes it needs and you

00:24:06,130 --> 00:24:10,270
just need to run that and so a bunch of

00:24:08,200 --> 00:24:12,370
our games work that way whether you can

00:24:10,270 --> 00:24:13,540
sort of there's a good start for

00:24:12,370 --> 00:24:16,120
executive Bowl that's also part of the

00:24:13,540 --> 00:24:17,290
game server code base that inspects the

00:24:16,120 --> 00:24:19,090
whole code base bit different I suppose

00:24:17,290 --> 00:24:20,920
it needs a notifies differences from the

00:24:19,090 --> 00:24:23,140
current configuration and makes the

00:24:20,920 --> 00:24:25,600
appropriate changes and for those games

00:24:23,140 --> 00:24:30,760
we just run that we invoke that as a

00:24:25,600 --> 00:24:33,400
Jenkins stage and that theoretically

00:24:30,760 --> 00:24:36,240
should be done differently but we don't

00:24:33,400 --> 00:24:39,280
have a good place to run an arbitrary

00:24:36,240 --> 00:24:42,490
dotnet executive all these games are on

00:24:39,280 --> 00:24:44,350
dotnet on Mac or on Linux and so they

00:24:42,490 --> 00:24:45,840
they tend to just run it from from

00:24:44,350 --> 00:24:49,080
Jenkins

00:24:45,840 --> 00:24:52,560
and what we're going to look a little

00:24:49,080 --> 00:24:55,410
bit more at but we also see is using

00:24:52,560 --> 00:24:56,640
throw standard tooling and then the

00:24:55,410 --> 00:24:59,760
configuration is just sort of version

00:24:56,640 --> 00:25:02,010
next to the code and so this is the is

00:24:59,760 --> 00:25:04,350
usually a confirmation template or

00:25:02,010 --> 00:25:06,060
templates that describe everything this

00:25:04,350 --> 00:25:07,410
is what this thing needs to run and in

00:25:06,060 --> 00:25:10,680
particular the one we just looked at

00:25:07,410 --> 00:25:13,770
here the bootstrap step there is just

00:25:10,680 --> 00:25:16,350
running the confirmation up it's

00:25:13,770 --> 00:25:20,430
applying the confirmation changes also

00:25:16,350 --> 00:25:22,980
running as Jenkins stages the downside

00:25:20,430 --> 00:25:24,660
here is that you kind of have to double

00:25:22,980 --> 00:25:26,730
right what your application needs if you

00:25:24,660 --> 00:25:28,110
if you take an approach of using fancy

00:25:26,730 --> 00:25:29,640
annotations inside your code base

00:25:28,110 --> 00:25:30,690
describe everything you needs then

00:25:29,640 --> 00:25:32,240
potentially you don't need to write it

00:25:30,690 --> 00:25:34,860
somewhere else

00:25:32,240 --> 00:25:36,450
flip side you have to write all of the

00:25:34,860 --> 00:25:38,670
how do I may change the infrastructure

00:25:36,450 --> 00:25:40,200
code yourself because that itself will

00:25:38,670 --> 00:25:41,490
not be executive Olivia Terra formal

00:25:40,200 --> 00:25:43,410
confirmation

00:25:41,490 --> 00:25:44,880
so with confirmation we take a I think

00:25:43,410 --> 00:25:48,240
what I hope is the fair the standard

00:25:44,880 --> 00:25:49,830
approach it's not built in too it's not

00:25:48,240 --> 00:25:52,650
built into it spinnaker or anything at

00:25:49,830 --> 00:25:55,440
least at the moment but of you know the

00:25:52,650 --> 00:25:57,210
way this runs is we run basically a

00:25:55,440 --> 00:26:00,090
three step process one is create change

00:25:57,210 --> 00:26:02,460
set so script on Jenkins to take the

00:26:00,090 --> 00:26:05,010
basically the artifact that feeds into

00:26:02,460 --> 00:26:06,840
this which is the you know zip of all of

00:26:05,010 --> 00:26:10,200
the confirmation templates and there are

00:26:06,840 --> 00:26:11,880
variables to be applied throw that up

00:26:10,200 --> 00:26:13,740
against the information to see what the

00:26:11,880 --> 00:26:14,970
two key to create change set and then if

00:26:13,740 --> 00:26:16,890
there's no if there's no changes to be

00:26:14,970 --> 00:26:18,930
made we just were just done we and the

00:26:16,890 --> 00:26:21,240
pipeline and if there are changes then

00:26:18,930 --> 00:26:25,260
it's a fairly straightforward process we

00:26:21,240 --> 00:26:27,270
don't apply them directly we we prompt I

00:26:25,260 --> 00:26:29,400
think we have a support for forcing it

00:26:27,270 --> 00:26:31,080
through for a place to where you with

00:26:29,400 --> 00:26:35,070
are not production where you may not

00:26:31,080 --> 00:26:36,660
care about this but just you know apply

00:26:35,070 --> 00:26:38,640
those changes and it uses that sort of

00:26:36,660 --> 00:26:41,490
to step apply plan apply thing you have

00:26:38,640 --> 00:26:43,920
information as the effect so we use this

00:26:41,490 --> 00:26:46,830
up this sub pipeline almost as if it

00:26:43,920 --> 00:26:48,240
were its own stage because this is a

00:26:46,830 --> 00:26:50,190
fully parameterized pipeline that we

00:26:48,240 --> 00:26:51,960
just stick into into stages throughout

00:26:50,190 --> 00:26:54,060
spinnaker wherever we want it and it

00:26:51,960 --> 00:26:56,340
takes a fully parameterized you know

00:26:54,060 --> 00:26:58,230
setup flower formation changes

00:26:56,340 --> 00:27:00,059
this works pretty well for us the only

00:26:58,230 --> 00:27:02,580
caveats we have about it our are just

00:27:00,059 --> 00:27:04,380
caveats about confirmation and some

00:27:02,580 --> 00:27:06,570
confirmation could be confusing you can

00:27:04,380 --> 00:27:09,120
get stuck it can get stuck trying to

00:27:06,570 --> 00:27:12,510
rollback it you know nothing support can

00:27:09,120 --> 00:27:14,850
fix but in general though it's you know

00:27:12,510 --> 00:27:18,809
for us it allowed us to teams to sort of

00:27:14,850 --> 00:27:20,789
quickly iterate on this and get a the

00:27:18,809 --> 00:27:22,650
appearance of first-class support

00:27:20,789 --> 00:27:25,409
without club without spending or having

00:27:22,650 --> 00:27:29,220
any support for love permission not that

00:27:25,409 --> 00:27:31,950
80s shouldn't add it but it doesn't

00:27:29,220 --> 00:27:36,179
actually have to be there we know

00:27:31,950 --> 00:27:40,890
similarly we see continuing into other

00:27:36,179 --> 00:27:42,929
stories our low testing we have seen

00:27:40,890 --> 00:27:45,659
some preliminary cases of trying to

00:27:42,929 --> 00:27:47,190
directly integrate it into pipelines it

00:27:45,659 --> 00:27:49,140
usually looks something like this though

00:27:47,190 --> 00:27:52,200
which is more of its dedicated pipeline

00:27:49,140 --> 00:27:54,270
we usually we do have low testing

00:27:52,200 --> 00:27:56,940
usually as part of a standard or a

00:27:54,270 --> 00:27:59,970
release process that doesn't mean that

00:27:56,940 --> 00:28:01,649
we baked it into the pipeline you know I

00:27:59,970 --> 00:28:04,409
think there was Vincent mentioned that

00:28:01,649 --> 00:28:06,059
people process technology you know we do

00:28:04,409 --> 00:28:07,350
want to formalize you know there's a

00:28:06,059 --> 00:28:09,090
straightforward way of running a load

00:28:07,350 --> 00:28:11,549
test with the spitting out the right

00:28:09,090 --> 00:28:12,960
number of locust workers and hit the

00:28:11,549 --> 00:28:15,390
right end point with the right scripts

00:28:12,960 --> 00:28:17,520
that doesn't mean that that has to be

00:28:15,390 --> 00:28:18,860
formalized and as an explicit stage

00:28:17,520 --> 00:28:21,320
inside every two production pipeline

00:28:18,860 --> 00:28:24,240
that might be an eventual step or not

00:28:21,320 --> 00:28:26,490
right now we see we see more commonly is

00:28:24,240 --> 00:28:27,720
that there's a well-defined pre-built

00:28:26,490 --> 00:28:31,140
pipeline that makes it super easy to run

00:28:27,720 --> 00:28:32,700
a load test but you know you decide when

00:28:31,140 --> 00:28:34,289
you're going to do it because you

00:28:32,700 --> 00:28:36,779
probably want to be explicitly

00:28:34,289 --> 00:28:38,640
monitoring it having some you know

00:28:36,779 --> 00:28:42,210
opinion or all what you care about in

00:28:38,640 --> 00:28:44,640
this particular load test and so this

00:28:42,210 --> 00:28:46,830
one is just I think under the hood it's

00:28:44,640 --> 00:28:49,559
just a very simple you know commands be

00:28:46,830 --> 00:28:52,529
one job I don't know it's it's a very

00:28:49,559 --> 00:28:54,809
straightforward load test backed by

00:28:52,529 --> 00:28:58,220
crowberries but nothing special there

00:28:54,809 --> 00:29:01,169
and you're able to be teams just are

00:28:58,220 --> 00:29:03,210
still like let's teams in this case

00:29:01,169 --> 00:29:04,890
actually what we got was the team that

00:29:03,210 --> 00:29:06,419
this is using this communities back load

00:29:04,890 --> 00:29:08,460
test they had never used communities

00:29:06,419 --> 00:29:10,769
before and this for them

00:29:08,460 --> 00:29:12,389
like it looks the same as anything else

00:29:10,769 --> 00:29:14,669
in spinnaker and so it's one of these

00:29:12,389 --> 00:29:17,340
cases where sort of blurring the line

00:29:14,669 --> 00:29:19,409
between two cloud providers made made

00:29:17,340 --> 00:29:22,009
them able to benefit from it be much

00:29:19,409 --> 00:29:24,690
easier to scale locust on community is

00:29:22,009 --> 00:29:26,460
without that I'm having I'm having to

00:29:24,690 --> 00:29:31,830
develop any real expertise with

00:29:26,460 --> 00:29:34,590
kubernetes so I mentioned that we use I

00:29:31,830 --> 00:29:36,929
mentioned that one of the areas where

00:29:34,590 --> 00:29:38,460
the spinnaker is helping sort of us to

00:29:36,929 --> 00:29:42,679
give those horizontal slices of things

00:29:38,460 --> 00:29:45,179
to deploy in games is configuration and

00:29:42,679 --> 00:29:48,210
as we looked at sort of how teams

00:29:45,179 --> 00:29:51,360
struggle to get you know efficient

00:29:48,210 --> 00:29:53,669
development pipelines for our human

00:29:51,360 --> 00:29:57,119
driven development pipelines for making

00:29:53,669 --> 00:29:58,919
changes to how a game is configured one

00:29:57,119 --> 00:30:00,629
of them was making sure that you only

00:29:58,919 --> 00:30:02,249
one variable at a time by which I mean

00:30:00,629 --> 00:30:04,889
that if you're going I'm going to be

00:30:02,249 --> 00:30:07,200
changing the way that you know that's a

00:30:04,889 --> 00:30:08,759
you know character evolves

00:30:07,200 --> 00:30:11,940
sort of it can be upgraded or something

00:30:08,759 --> 00:30:13,080
it's power the power curve I don't want

00:30:11,940 --> 00:30:15,629
to have to be guessing about what

00:30:13,080 --> 00:30:17,129
version of the game backend it is and

00:30:15,629 --> 00:30:19,679
usually we found is that most

00:30:17,129 --> 00:30:21,539
environments fell into so as we looked

00:30:19,679 --> 00:30:24,149
at we were looking at the studios that

00:30:21,539 --> 00:30:25,830
had maybe a hundred different

00:30:24,149 --> 00:30:27,360
environments and anyone could push code

00:30:25,830 --> 00:30:29,549
to environmentally with just a name they

00:30:27,360 --> 00:30:31,379
come up with and we run into issues

00:30:29,549 --> 00:30:33,749
where people didn't actually know what

00:30:31,379 --> 00:30:35,369
code they were working with and so that

00:30:33,749 --> 00:30:36,749
then they really wanted to be iterating

00:30:35,369 --> 00:30:38,159
on game configuration they didn't want

00:30:36,749 --> 00:30:39,659
the code to be changing out under them

00:30:38,159 --> 00:30:41,999
or I have to ask someone to push the

00:30:39,659 --> 00:30:43,649
latest op and so now we just for this

00:30:41,999 --> 00:30:45,149
particular studio they've just wired it

00:30:43,649 --> 00:30:47,309
up so that every time they push to the

00:30:45,149 --> 00:30:49,710
push to production just downstream of

00:30:47,309 --> 00:30:50,820
production is all of the thing all the

00:30:49,710 --> 00:30:53,100
environments that are supposed to run

00:30:50,820 --> 00:30:54,929
the same thing as production and so it's

00:30:53,100 --> 00:30:57,749
game design one game design to live off

00:30:54,929 --> 00:30:59,759
Swan levels to QA 1 QA 2 basically all

00:30:57,749 --> 00:31:02,249
intended for iteration on game

00:30:59,759 --> 00:31:04,740
configuration the environments totally

00:31:02,249 --> 00:31:06,389
isolated from production and that once

00:31:04,740 --> 00:31:08,129
again it's an ami promotion it's the

00:31:06,389 --> 00:31:10,919
exact same ami it's in production after

00:31:08,129 --> 00:31:11,909
gross production the same conformational

00:31:10,919 --> 00:31:14,279
hinges are applied the same database

00:31:11,909 --> 00:31:15,809
changes are applied and then people can

00:31:14,279 --> 00:31:16,919
iterate in those areas with full

00:31:15,809 --> 00:31:18,960
confidence they're running what's in

00:31:16,919 --> 00:31:20,460
prod or was you know within a few

00:31:18,960 --> 00:31:21,700
minutes of being a prod it'll be out for

00:31:20,460 --> 00:31:23,409
them as well

00:31:21,700 --> 00:31:25,139
a similar family of things that are

00:31:23,409 --> 00:31:28,210
tracking what's in the develop branch

00:31:25,139 --> 00:31:31,590
this really was a big part of allowing

00:31:28,210 --> 00:31:34,210
us to get away from you know from

00:31:31,590 --> 00:31:36,580
exploding numbers of ad hoc environments

00:31:34,210 --> 00:31:38,529
because it turns out if you looked at

00:31:36,580 --> 00:31:40,419
what people are trying to do usually

00:31:38,529 --> 00:31:43,149
they were only really trying to iterate

00:31:40,419 --> 00:31:45,929
on configuration or code but not both at

00:31:43,149 --> 00:31:49,539
the same time very rarely

00:31:45,929 --> 00:31:54,820
similarly game developers and smackin

00:31:49,539 --> 00:31:56,710
developers you know sometimes have built

00:31:54,820 --> 00:31:57,970
up systems to make it very easy to spend

00:31:56,710 --> 00:32:00,190
on these ad hoc environments with any

00:31:57,970 --> 00:32:01,990
branch and a whole full stack behind it

00:32:00,190 --> 00:32:05,049
not only is that very expensive from an

00:32:01,990 --> 00:32:08,019
infrastructure perspective yeah well

00:32:05,049 --> 00:32:09,909
what we've done for this studio in

00:32:08,019 --> 00:32:11,769
particular and it's a pattern we we're

00:32:09,909 --> 00:32:12,730
trying to stick with is trying to make

00:32:11,769 --> 00:32:14,980
it so there's a fixed number of

00:32:12,730 --> 00:32:16,870
environments you know there's dev one

00:32:14,980 --> 00:32:18,159
two three four and you can push any

00:32:16,870 --> 00:32:20,470
branch tell you those environments I

00:32:18,159 --> 00:32:22,600
don't just be there and so you know that

00:32:20,470 --> 00:32:25,059
you know you know Alice's branch is

00:32:22,600 --> 00:32:26,500
running in dev too and it's you know

00:32:25,059 --> 00:32:27,730
it's all considered ephemeral someone

00:32:26,500 --> 00:32:31,630
else could deploy something else there

00:32:27,730 --> 00:32:36,039
and yes that means that Alice can't have

00:32:31,630 --> 00:32:37,120
her branch and dev to for a month but we

00:32:36,039 --> 00:32:38,769
don't want people to have a branch

00:32:37,120 --> 00:32:41,049
running for a month and so one of these

00:32:38,769 --> 00:32:43,960
we found is that in particular just the

00:32:41,049 --> 00:32:45,760
you know constraining it to be this

00:32:43,960 --> 00:32:47,679
being a strictly a temporary way of

00:32:45,760 --> 00:32:50,019
standing something up has encouraged

00:32:47,679 --> 00:32:51,700
people to be to be making smaller change

00:32:50,019 --> 00:32:53,860
sets and really pushing people down the

00:32:51,700 --> 00:32:56,289
path really wanted to beyond of smaller

00:32:53,860 --> 00:32:58,029
more compatible sets of changes they

00:32:56,289 --> 00:33:01,269
don't require such tight orchestration

00:32:58,029 --> 00:33:05,889
and so this was a good thing in our

00:33:01,269 --> 00:33:07,960
perspective and sort of a lot of our

00:33:05,889 --> 00:33:09,549
first usage of spinnaker was actually

00:33:07,960 --> 00:33:13,529
outside of game deploys and I wanted to

00:33:09,549 --> 00:33:15,519
call it a little bit of other areas and

00:33:13,529 --> 00:33:17,500
one of the things that we've moved just

00:33:15,519 --> 00:33:20,889
in the past year to be deployed with

00:33:17,500 --> 00:33:22,659
spinnaker was airflow which is a job

00:33:20,889 --> 00:33:25,630
orchestration framework for data systems

00:33:22,659 --> 00:33:30,580
and kind of I guess or Canaries

00:33:25,630 --> 00:33:33,550
deploying orchestrators and in we

00:33:30,580 --> 00:33:35,710
actually do continuous deployment flow

00:33:33,550 --> 00:33:39,970
so this was an interesting one for us

00:33:35,710 --> 00:33:43,270
because it is a it is a tool that is

00:33:39,970 --> 00:33:46,030
only somewhat stateless and so it's

00:33:43,270 --> 00:33:49,300
stateless in that you can deploy replace

00:33:46,030 --> 00:33:51,580
any of the components of air flow and it

00:33:49,300 --> 00:33:54,190
will pick up you know if you replace an

00:33:51,580 --> 00:33:55,990
air flow worker the work those in

00:33:54,190 --> 00:34:00,220
progress will be picked up by the worker

00:33:55,990 --> 00:34:01,540
that replaces it unfortunately if the

00:34:00,220 --> 00:34:04,120
air flow worker was in the middle of

00:34:01,540 --> 00:34:06,550
executing a 3-hour spark job on a 400

00:34:04,120 --> 00:34:07,810
node cluster that job just got thrown

00:34:06,550 --> 00:34:09,340
away you've got to start over and hope

00:34:07,810 --> 00:34:11,260
the whole thing was idempotent which it

00:34:09,340 --> 00:34:13,030
probably was but still that's an awful

00:34:11,260 --> 00:34:15,640
lot of work to throw away and it means

00:34:13,030 --> 00:34:18,970
that that really constrains your ability

00:34:15,640 --> 00:34:21,850
to deploy our flow a lot we deploy off

00:34:18,970 --> 00:34:24,340
though probably about 15 times a day

00:34:21,850 --> 00:34:25,690
and since that doesn't give you much

00:34:24,340 --> 00:34:27,820
time for a job to run we had to do some

00:34:25,690 --> 00:34:30,100
work so one of the things we we did here

00:34:27,820 --> 00:34:31,750
was just you know we were able to

00:34:30,100 --> 00:34:34,570
without changing anything about

00:34:31,750 --> 00:34:37,240
spinnaker except I think a configuration

00:34:34,570 --> 00:34:39,669
of Orca timeouts for waiting for things

00:34:37,240 --> 00:34:43,600
to terminate is we basically we stopped

00:34:39,669 --> 00:34:45,640
the scheduler right away we know what

00:34:43,600 --> 00:34:46,899
configure migration does we do could do

00:34:45,640 --> 00:34:50,380
something I think we it's like a

00:34:46,899 --> 00:34:53,800
database upgrade we deploy the new code

00:34:50,380 --> 00:34:55,600
to the edge or whatever cluster we

00:34:53,800 --> 00:34:57,190
deploy the new workers and if you look

00:34:55,600 --> 00:34:59,200
at the detail of this particular worker

00:34:57,190 --> 00:35:03,370
what it will do is will allow the old

00:34:59,200 --> 00:35:06,010
ones to stay up as long as they keep its

00:35:03,370 --> 00:35:08,080
using the ASM is on a SG termination

00:35:06,010 --> 00:35:09,640
control so they actually will keep

00:35:08,080 --> 00:35:13,360
themselves running they'll get the kill

00:35:09,640 --> 00:35:15,520
from they will instance will want to

00:35:13,360 --> 00:35:17,650
start stopping but it will be it will

00:35:15,520 --> 00:35:19,270
the Oracle will just keep waiting for it

00:35:17,650 --> 00:35:20,770
to stop but it will already spit up a

00:35:19,270 --> 00:35:22,810
new worker and so we'll stop thinking of

00:35:20,770 --> 00:35:24,400
new work from our flow but it will be

00:35:22,810 --> 00:35:25,870
allowed to finish its current work and

00:35:24,400 --> 00:35:27,370
that was that's actually allowed us to

00:35:25,870 --> 00:35:29,080
you know potentially we may have

00:35:27,370 --> 00:35:30,550
multiple workers from older versions of

00:35:29,080 --> 00:35:32,770
our flow still finishing their work and

00:35:30,550 --> 00:35:35,800
the well the new ones have been deployed

00:35:32,770 --> 00:35:38,860
and so this is able to keep moving and

00:35:35,800 --> 00:35:42,820
and it works fine and so it was pretty

00:35:38,860 --> 00:35:44,560
important for us now we have I think

00:35:42,820 --> 00:35:46,840
four different teams that are developing

00:35:44,560 --> 00:35:48,460
ETL that feeds into our flow

00:35:46,840 --> 00:35:51,310
and so then when you get their work out

00:35:48,460 --> 00:35:53,500
quickly now for us I mean at this point

00:35:51,310 --> 00:35:57,550
spinnaker it's it's a big part of how we

00:35:53,500 --> 00:36:00,280
of how this thing we reach for for any

00:35:57,550 --> 00:36:03,400
of these as sort of as the technical

00:36:00,280 --> 00:36:05,590
component of helping Studios do that

00:36:03,400 --> 00:36:08,350
decoupling of work to get a more

00:36:05,590 --> 00:36:09,910
reliable delivery and so it's also at

00:36:08,350 --> 00:36:11,410
this point standard for any new projects

00:36:09,910 --> 00:36:12,370
at skill thing we're pretty happy with

00:36:11,410 --> 00:36:16,900
it

00:36:12,370 --> 00:36:19,630
you know we it is certainly not a not a

00:36:16,900 --> 00:36:22,450
project that's done but it's the

00:36:19,630 --> 00:36:25,330
velocity is there on spinnaker itself so

00:36:22,450 --> 00:36:30,610
we're you know looking forward to

00:36:25,330 --> 00:36:32,800
helping push it forward and know that's

00:36:30,610 --> 00:36:35,330
that's been a critical player so happy

00:36:32,800 --> 00:36:36,880
to answer any questions you might have

00:36:35,330 --> 00:36:38,940
[Music]

00:36:36,880 --> 00:36:38,940

YouTube URL: https://www.youtube.com/watch?v=8Sg2NqWKupM


