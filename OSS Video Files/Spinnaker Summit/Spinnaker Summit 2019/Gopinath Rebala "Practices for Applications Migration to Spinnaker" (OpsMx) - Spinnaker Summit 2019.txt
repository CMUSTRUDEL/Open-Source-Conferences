Title: Gopinath Rebala "Practices for Applications Migration to Spinnaker" (OpsMx) - Spinnaker Summit 2019
Publication date: 2019-12-03
Playlist: Spinnaker Summit 2019
Description: 
	The third annual Spinnaker Summit (Diamond Sponsors: Netflix, Google and Armory) was held at the Hard Rock Hotel in San Diego, CA from November 15-17, 2019 and welcomed over 500 members of the rapidly growing Spinnaker open source community.
Captions: 
	00:00:03,520 --> 00:00:08,210
the spinnaker is designed for micro

00:00:06,380 --> 00:00:10,700
services and delivery for 12 native

00:00:08,210 --> 00:00:13,429
applications so what we are finding is

00:00:10,700 --> 00:00:15,049
in the enterprises there are the oldest

00:00:13,429 --> 00:00:18,110
legacy applications some of them that

00:00:15,049 --> 00:00:20,390
can be migrated to cloud native forms

00:00:18,110 --> 00:00:24,439
some of them it cannot be these are

00:00:20,390 --> 00:00:27,050
legacy applications that run on native

00:00:24,439 --> 00:00:29,420
platforms that don't remember unless

00:00:27,050 --> 00:00:32,720
they are your architecture so but as

00:00:29,420 --> 00:00:34,790
they are adopt vinegar there is a need

00:00:32,720 --> 00:00:37,850
to have a single tool that can do

00:00:34,790 --> 00:00:39,860
deployments to the legacy applications

00:00:37,850 --> 00:00:42,140
as well as the cloud native ones so

00:00:39,860 --> 00:00:45,710
that's where we help some of our

00:00:42,140 --> 00:00:47,809
customers and wanted to shave that with

00:00:45,710 --> 00:00:50,000
you and what they are doing and what are

00:00:47,809 --> 00:00:51,920
the different applications some of them

00:00:50,000 --> 00:00:54,980
run through Jenkins deployments some of

00:00:51,920 --> 00:00:59,239
them are the enterprise tools like IBM

00:00:54,980 --> 00:01:02,690
urbancode or rlm tools from these guys

00:00:59,239 --> 00:01:05,720
so those workflows how do you migrate to

00:01:02,690 --> 00:01:08,360
spinnaker and what does it take and does

00:01:05,720 --> 00:01:10,520
it make sense and if it did make sense

00:01:08,360 --> 00:01:11,930
for the migration strategies so those

00:01:10,520 --> 00:01:15,530
are the things that we will discuss

00:01:11,930 --> 00:01:20,420
today so now the question is why

00:01:15,530 --> 00:01:22,400
spinnaker right so as we look at the

00:01:20,420 --> 00:01:24,410
automation today for the deployments

00:01:22,400 --> 00:01:28,310
some of these are shell scripts that are

00:01:24,410 --> 00:01:29,810
run on Jenkins they are ad hoc shell

00:01:28,310 --> 00:01:33,140
scripts or ansible scripts that run

00:01:29,810 --> 00:01:35,390
which they don't have a a handover

00:01:33,140 --> 00:01:37,850
policy if you look at if you go and ask

00:01:35,390 --> 00:01:39,940
them so what is your delivery process

00:01:37,850 --> 00:01:42,290
for me to have a continuous delivery

00:01:39,940 --> 00:01:44,600
there is no clear answer there is a lot

00:01:42,290 --> 00:01:49,400
of ad hoc manual processes handovers

00:01:44,600 --> 00:01:52,510
that happen and this there is no really

00:01:49,400 --> 00:01:55,880
continuous part to it right and

00:01:52,510 --> 00:01:57,890
spinnaker is a very good orchestration

00:01:55,880 --> 00:02:00,920
tool if you look at what spinnaker is

00:01:57,890 --> 00:02:03,800
doing it's allowing you to orchestrate

00:02:00,920 --> 00:02:07,190
complex workflows very easily and

00:02:03,800 --> 00:02:08,690
visually presentable form a in the CYO

00:02:07,190 --> 00:02:10,940
is one of the cleanest you is that

00:02:08,690 --> 00:02:13,400
you'll say so you can orchestrate these

00:02:10,940 --> 00:02:16,010
complex workloads bring that visibility

00:02:13,400 --> 00:02:17,690
to both dev and ops and

00:02:16,010 --> 00:02:21,170
have this handover mechanism that's

00:02:17,690 --> 00:02:23,720
coded up and now it's easy to explain

00:02:21,170 --> 00:02:25,610
what is going on and also to know what

00:02:23,720 --> 00:02:27,170
is being deployed all right so that's

00:02:25,610 --> 00:02:29,420
one of the reasons why we spinnaker use

00:02:27,170 --> 00:02:31,909
and one and of course spinnaker is an

00:02:29,420 --> 00:02:34,870
open source platform all the enterprise

00:02:31,909 --> 00:02:37,599
tools that like Bend apply they're not

00:02:34,870 --> 00:02:41,299
open source and can get very expensive

00:02:37,599 --> 00:02:42,739
but as soon as it go to scale it's in

00:02:41,299 --> 00:02:46,519
the migration considerations what do you

00:02:42,739 --> 00:02:48,470
do how do you decide how you want to

00:02:46,519 --> 00:02:52,160
approach this migration to spinnaker

00:02:48,470 --> 00:02:55,069
right so here we would consider the type

00:02:52,160 --> 00:02:56,810
of applications now there are some

00:02:55,069 --> 00:02:59,120
scripts they still run with Jenkins that

00:02:56,810 --> 00:03:01,489
code apply to kubernetes now these are

00:02:59,120 --> 00:03:03,099
really good candidates to actually

00:03:01,489 --> 00:03:05,420
convert them all to the spinnaker

00:03:03,099 --> 00:03:07,010
spinnaker has this native support for

00:03:05,420 --> 00:03:09,019
these cloud platforms that allow you to

00:03:07,010 --> 00:03:12,890
do different deployment strategies as

00:03:09,019 --> 00:03:16,489
well as allow you to visualize these

00:03:12,890 --> 00:03:18,950
applications allow you to do a canary

00:03:16,489 --> 00:03:20,419
analysis on these deployments so it

00:03:18,950 --> 00:03:23,950
makes sense to have it as a clean

00:03:20,419 --> 00:03:26,870
deployment strategy with move them out

00:03:23,950 --> 00:03:28,940
however there are some things that we

00:03:26,870 --> 00:03:31,579
have running scripts that run on your

00:03:28,940 --> 00:03:33,019
native platforms or infrastructure in

00:03:31,579 --> 00:03:36,109
spinnaker doesn't have support for that

00:03:33,019 --> 00:03:37,760
and also you can't really have these

00:03:36,109 --> 00:03:41,090
deployment strategies built into those

00:03:37,760 --> 00:03:44,599
kind of scripts so then it's a probably

00:03:41,090 --> 00:03:46,280
better to you know use them as these but

00:03:44,599 --> 00:03:49,099
as part of the custom stages in

00:03:46,280 --> 00:03:53,989
spinnaker right so those are some of the

00:03:49,099 --> 00:03:55,340
things we'll look at now if you probably

00:03:53,989 --> 00:03:59,319
have seen this kind of a continuous

00:03:55,340 --> 00:04:02,569
delivery clean there is a CI and then

00:03:59,319 --> 00:04:04,849
deployment with the handover process and

00:04:02,569 --> 00:04:08,000
with the strategies and how you deliver

00:04:04,849 --> 00:04:09,379
them this is a process that you would

00:04:08,000 --> 00:04:10,790
have seen but when you look at

00:04:09,379 --> 00:04:13,970
internally how these things are done

00:04:10,790 --> 00:04:15,680
it's a fairly complex process with

00:04:13,970 --> 00:04:17,299
multiple teams involved in the software

00:04:15,680 --> 00:04:19,639
delivery in a traditional software

00:04:17,299 --> 00:04:23,660
systems if they're you have theater

00:04:19,639 --> 00:04:25,849
systems monoliths those have a specific

00:04:23,660 --> 00:04:27,710
build process handover process that

00:04:25,849 --> 00:04:29,779
happens to QA and then there is an

00:04:27,710 --> 00:04:32,809
operations team that comes in

00:04:29,779 --> 00:04:35,029
that takes the build and deploys in

00:04:32,809 --> 00:04:37,309
their own form so there is a lot of hand

00:04:35,029 --> 00:04:38,779
over that goes on it's not as clean like

00:04:37,309 --> 00:04:42,739
micro-services where you could build

00:04:38,779 --> 00:04:46,039
this pipeline out and do it and so if

00:04:42,739 --> 00:04:48,079
you go and asks as the some one of our

00:04:46,039 --> 00:04:52,039
customers what do you do today in this

00:04:48,079 --> 00:04:55,689
process this is the kind of a flowchart

00:04:52,039 --> 00:04:59,179
that we came up with it was my noise

00:04:55,689 --> 00:05:03,489
it's so this flowchart as you can see it

00:04:59,179 --> 00:05:05,899
shows how the code is handed over to QA

00:05:03,489 --> 00:05:07,939
and how they make the decisions the

00:05:05,899 --> 00:05:09,589
testing comes up with it's not fully

00:05:07,939 --> 00:05:12,199
automated test there are some automated

00:05:09,589 --> 00:05:13,909
tests some manual tests and then there

00:05:12,199 --> 00:05:17,409
is a handover process there's a manual

00:05:13,909 --> 00:05:20,059
and judgment that happens through a

00:05:17,409 --> 00:05:21,409
product owner that says ok now we can

00:05:20,059 --> 00:05:24,289
give it to stating there are no critical

00:05:21,409 --> 00:05:27,559
issues that are involved and hands it

00:05:24,289 --> 00:05:29,839
over to operations and operations course

00:05:27,559 --> 00:05:32,149
and deploys it now this is the kind of a

00:05:29,839 --> 00:05:35,509
thing where the visibility gets harder

00:05:32,149 --> 00:05:38,479
for enterprise systems the development

00:05:35,509 --> 00:05:40,610
does not have the ability to diagnose

00:05:38,479 --> 00:05:43,489
the issues faster the operations don't

00:05:40,610 --> 00:05:45,559
have a clean way of communicating the

00:05:43,489 --> 00:05:50,239
process improvements to dev etcetera

00:05:45,559 --> 00:05:53,779
right so now bringing in spinnaker in

00:05:50,239 --> 00:05:55,489
this mix as you can see spinnaker fits

00:05:53,779 --> 00:05:58,039
and right in the center because it can

00:05:55,489 --> 00:05:59,659
be an orchestration tool as you'd apply

00:05:58,039 --> 00:06:01,669
the code or sorry

00:05:59,659 --> 00:06:05,119
checking the code into the gear you can

00:06:01,669 --> 00:06:07,249
see there is a trigger that kicks off a

00:06:05,119 --> 00:06:09,860
spinnaker pipeline which couldn't then

00:06:07,249 --> 00:06:12,379
be used to use the Jenkins you do the

00:06:09,860 --> 00:06:15,769
bill the bill generally does the

00:06:12,379 --> 00:06:18,189
artifact push it can be any one of these

00:06:15,769 --> 00:06:22,069
artifacts it can be a jar file it can be

00:06:18,189 --> 00:06:24,619
a container any one of those and then

00:06:22,069 --> 00:06:26,659
depending on your situation you could

00:06:24,619 --> 00:06:28,129
bring up the infrastructure let's say in

00:06:26,659 --> 00:06:29,929
the test environment you want to bring

00:06:28,129 --> 00:06:33,289
the infrastructure up and then deploy

00:06:29,929 --> 00:06:35,419
you can do that terraform infrastructure

00:06:33,289 --> 00:06:38,269
and then deploy out so this is a typical

00:06:35,419 --> 00:06:40,099
process now what we are as you can see

00:06:38,269 --> 00:06:41,449
we also introduced something called

00:06:40,099 --> 00:06:45,110
ansible there

00:06:41,449 --> 00:06:48,050
former ansible now you have a bare-metal

00:06:45,110 --> 00:06:50,270
platforms or scripts that you are doing

00:06:48,050 --> 00:06:52,759
the install you could have custom stages

00:06:50,270 --> 00:06:56,469
of spinnaker that can extend and include

00:06:52,759 --> 00:06:56,469
those as part of your pipeline

00:06:58,830 --> 00:07:04,199
No so what are these spinnaker

00:07:01,229 --> 00:07:07,500
extensions how suspending uh provides

00:07:04,199 --> 00:07:10,800
multiple ways of doing the extensions in

00:07:07,500 --> 00:07:12,479
today there is a new process that being

00:07:10,800 --> 00:07:15,270
worked on as a plugin process which

00:07:12,479 --> 00:07:18,120
would make it a lot more integrated with

00:07:15,270 --> 00:07:21,300
spinnaker today it supports integration

00:07:18,120 --> 00:07:22,349
with Jenkins you can run arbitrary skips

00:07:21,300 --> 00:07:24,599
through Jenkins

00:07:22,349 --> 00:07:26,520
so there's a very two-way integration

00:07:24,599 --> 00:07:28,949
with Jenkins that you can pass the

00:07:26,520 --> 00:07:31,110
parameters to Jenkins pipeline run the

00:07:28,949 --> 00:07:33,229
pipeline as the output from the Jenkins

00:07:31,110 --> 00:07:36,449
you can bring it back into the spinnaker

00:07:33,229 --> 00:07:38,520
have them parameters or output that can

00:07:36,449 --> 00:07:41,340
be used in subsequent stages so that's

00:07:38,520 --> 00:07:43,050
one way of doing it the another way is

00:07:41,340 --> 00:07:45,000
to have your own custom service that's

00:07:43,050 --> 00:07:47,460
runs and now from the spinnaker you

00:07:45,000 --> 00:07:51,509
could have something like web hook that

00:07:47,460 --> 00:07:54,629
calls out runs execute your job here you

00:07:51,509 --> 00:07:55,889
can implement your policy is some kind

00:07:54,629 --> 00:08:00,719
of checks that you want to do before

00:07:55,889 --> 00:08:04,289
exceeding your scripts and and then that

00:08:00,719 --> 00:08:05,819
becomes a part of the pipeline stage and

00:08:04,289 --> 00:08:08,279
the other way to do it is if you already

00:08:05,819 --> 00:08:11,490
are using secure burn Ares then you can

00:08:08,279 --> 00:08:13,650
do something like a run job here you can

00:08:11,490 --> 00:08:16,050
use the scale of the kubernetes as part

00:08:13,650 --> 00:08:19,349
of your pipeline and this run job you

00:08:16,050 --> 00:08:21,990
would be doing one container job for

00:08:19,349 --> 00:08:24,110
each of the type of workload and as part

00:08:21,990 --> 00:08:27,870
of the spinnaker pipeline you would

00:08:24,110 --> 00:08:30,169
instantiate one of those stages now the

00:08:27,870 --> 00:08:33,630
issues involved there will be how do you

00:08:30,169 --> 00:08:35,070
make sure the permissions are correct

00:08:33,630 --> 00:08:36,870
how do you make sure the accountable

00:08:35,070 --> 00:08:38,669
accounts are properly configured if

00:08:36,870 --> 00:08:41,669
there's some secrets need to be passed

00:08:38,669 --> 00:08:44,209
on to the job how do you do that safely

00:08:41,669 --> 00:08:44,209
right

00:08:44,780 --> 00:08:47,960
now if the simplest one will be the

00:08:46,880 --> 00:08:50,120
Jenkins part

00:08:47,960 --> 00:08:52,250
so there are deployments that are going

00:08:50,120 --> 00:08:54,650
through Jenkins generally these

00:08:52,250 --> 00:08:56,780
deployments will be some kind of shell

00:08:54,650 --> 00:09:02,120
scripts or cloud integrations that you

00:08:56,780 --> 00:09:04,720
have that call directly write this if

00:09:02,120 --> 00:09:06,680
you want to bring into the spinnaker

00:09:04,720 --> 00:09:08,630
let's say these are shell scripts that

00:09:06,680 --> 00:09:10,250
you're running this after the build

00:09:08,630 --> 00:09:14,870
artifact is build some kind of Avadh

00:09:10,250 --> 00:09:17,990
file it does some kind of ssh into a VM

00:09:14,870 --> 00:09:20,570
and copies the file there or invoke

00:09:17,990 --> 00:09:23,360
something else that passes the artifact

00:09:20,570 --> 00:09:29,570
to it right so here spinnaker provides

00:09:23,360 --> 00:09:31,310
this ability to call in Jenkins job as

00:09:29,570 --> 00:09:36,020
you can see these parameters that can be

00:09:31,310 --> 00:09:37,550
passed on to the chickens and the

00:09:36,020 --> 00:09:40,040
parameters that here you see are

00:09:37,550 --> 00:09:42,260
automatically detected by spinnaker when

00:09:40,040 --> 00:09:44,000
you declare a Jenkins job you also

00:09:42,260 --> 00:09:48,020
declare what are the parameters that go

00:09:44,000 --> 00:09:50,630
into the job you then once the spinnaker

00:09:48,020 --> 00:09:53,300
detects them these can be now triggered

00:09:50,630 --> 00:09:54,920
as part of the trigger that comes to the

00:09:53,300 --> 00:09:57,740
spinnaker pipeline that gets passed on

00:09:54,920 --> 00:09:58,970
to the Jenkins all there are defaults

00:09:57,740 --> 00:10:02,120
that are specified you will continue to

00:09:58,970 --> 00:10:06,710
use them and once the stage completes

00:10:02,120 --> 00:10:09,470
the output from Jenkins will come out in

00:10:06,710 --> 00:10:12,830
status or out these are the output files

00:10:09,470 --> 00:10:15,740
that are archive files generated by

00:10:12,830 --> 00:10:18,020
Jenkins that will specify some things

00:10:15,740 --> 00:10:19,730
like what is the war file name or a jar

00:10:18,020 --> 00:10:24,020
file name that you would use in the

00:10:19,730 --> 00:10:26,839
subsequent stages in the case of AWS you

00:10:24,020 --> 00:10:31,580
will take a jar file and bake another

00:10:26,839 --> 00:10:34,760
ami to deploy for example or in the case

00:10:31,580 --> 00:10:38,170
of a docker container it can give you a

00:10:34,760 --> 00:10:42,650
container ID or it would just simply

00:10:38,170 --> 00:10:45,410
give you the identifier that says this

00:10:42,650 --> 00:10:50,680
is the VM that I want to connected to

00:10:45,410 --> 00:10:53,480
right and so in a common workflow here

00:10:50,680 --> 00:10:57,380
typically for communities or AWS the dev

00:10:53,480 --> 00:10:57,820
deploy after the big stage will use the

00:10:57,380 --> 00:11:01,720
name

00:10:57,820 --> 00:11:03,880
two libraries of spinnaker to go deploy

00:11:01,720 --> 00:11:06,550
it to the cloud environments but here

00:11:03,880 --> 00:11:09,400
now that we are using the deployment as

00:11:06,550 --> 00:11:14,080
a Jenkins that would again be a Jenkins

00:11:09,400 --> 00:11:16,330
job that we would run so you after the

00:11:14,080 --> 00:11:18,370
build is done you just call a script

00:11:16,330 --> 00:11:20,500
that would run it so the advantage that

00:11:18,370 --> 00:11:23,620
we are getting here is the handover

00:11:20,500 --> 00:11:25,690
process here Tina this similar to what

00:11:23,620 --> 00:11:28,360
the rest cloud native platforms that we

00:11:25,690 --> 00:11:30,100
are using you can also run automated

00:11:28,360 --> 00:11:33,040
tests we will show how you can do that

00:11:30,100 --> 00:11:34,540
in the canary analysis that doesn't

00:11:33,040 --> 00:11:38,530
necessarily have to be the cloud native

00:11:34,540 --> 00:11:40,590
it can be done on native platforms so

00:11:38,530 --> 00:11:43,240
that's something that we can do with

00:11:40,590 --> 00:11:45,790
spinnaker as and then you can have

00:11:43,240 --> 00:11:47,860
privilege escalation that part of the

00:11:45,790 --> 00:11:52,120
pipeline that's visible to both there in

00:11:47,860 --> 00:11:55,900
ops right now if we look at the other

00:11:52,120 --> 00:12:00,400
tools like IBM urbancode anyone here you

00:11:55,900 --> 00:12:03,030
know IBM urbancode you do so this is a

00:12:00,400 --> 00:12:05,680
tool let's say design for the deployment

00:12:03,030 --> 00:12:07,960
you have the shell script kind of stuff

00:12:05,680 --> 00:12:10,840
that you would run arbitrary platforms

00:12:07,960 --> 00:12:12,460
it's broken down into small scriptlets

00:12:10,840 --> 00:12:15,370
that you can stitch together so it's a

00:12:12,460 --> 00:12:19,200
purely an orchestration system really

00:12:15,370 --> 00:12:21,610
running a different shell scripts that

00:12:19,200 --> 00:12:22,960
in the newer systems they also provide

00:12:21,610 --> 00:12:25,420
cloud drivers and stuff but it looks

00:12:22,960 --> 00:12:27,760
fairly complex like that this is a

00:12:25,420 --> 00:12:29,680
simplest that you can do with that orbán

00:12:27,760 --> 00:12:32,260
deploy confusing so each of these

00:12:29,680 --> 00:12:33,840
scripts then are executed in sequence it

00:12:32,260 --> 00:12:36,730
tells you whether they succeeded or not

00:12:33,840 --> 00:12:39,340
these kind of assistance then you want

00:12:36,730 --> 00:12:42,130
to be able to migrate out to spinnaker

00:12:39,340 --> 00:12:45,100
stage not exactly this form but you can

00:12:42,130 --> 00:12:47,290
automate this migration so with the

00:12:45,100 --> 00:12:49,030
urban deploy you would go look at all

00:12:47,290 --> 00:12:51,640
the scripts that are running or what

00:12:49,030 --> 00:12:57,430
stages they're running in and then

00:12:51,640 --> 00:12:58,780
combine them into one container job so

00:12:57,430 --> 00:13:01,930
you will take all these scripts put them

00:12:58,780 --> 00:13:03,790
in one sequence have a robot script that

00:13:01,930 --> 00:13:06,460
generates that runs exact same sequence

00:13:03,790 --> 00:13:09,580
and then you can put it as a stage in

00:13:06,460 --> 00:13:10,760
spinnaker so that way you can completely

00:13:09,580 --> 00:13:13,580
eliminate this

00:13:10,760 --> 00:13:16,370
urban code deploy I get the visibility

00:13:13,580 --> 00:13:21,350
and simplicity of spinnaker along with

00:13:16,370 --> 00:13:24,950
our cloud workloads so typically this is

00:13:21,350 --> 00:13:26,630
how it would look like where you know

00:13:24,950 --> 00:13:31,010
you have the spinnaker spinnaker would

00:13:26,630 --> 00:13:33,500
have a run job that would go run the job

00:13:31,010 --> 00:13:35,529
in the kubernetes and there will it will

00:13:33,500 --> 00:13:38,930
be like a bastion service that runs

00:13:35,529 --> 00:13:41,089
which will then connect to your VMs and

00:13:38,930 --> 00:13:41,930
execute the sequence of shell scripts

00:13:41,089 --> 00:13:45,350
right

00:13:41,930 --> 00:13:47,480
the Bastion here the interesting thing

00:13:45,350 --> 00:13:50,420
is you have the secrets that you would

00:13:47,480 --> 00:13:52,040
need to connect to the Bastion now you

00:13:50,420 --> 00:13:55,100
have to make sure the user that's

00:13:52,040 --> 00:13:57,680
invoking the spy plane has access to

00:13:55,100 --> 00:14:01,220
those so that is done by spinnaker

00:13:57,680 --> 00:14:03,200
account permissions you can set the

00:14:01,220 --> 00:14:05,600
permissions up for the namespaces in

00:14:03,200 --> 00:14:07,610
which they are invoking and you'd have

00:14:05,600 --> 00:14:10,660
those secrets that are set in that

00:14:07,610 --> 00:14:13,339
specific namespace and you can use that

00:14:10,660 --> 00:14:16,820
account permissions with the secrets to

00:14:13,339 --> 00:14:18,440
be able to run safely on the VMS so you

00:14:16,820 --> 00:14:19,820
have these shell script arbitrary

00:14:18,440 --> 00:14:22,070
scripts that you would run for example

00:14:19,820 --> 00:14:26,120
if you have a tomcat service that is

00:14:22,070 --> 00:14:26,690
running you have a new war file that you

00:14:26,120 --> 00:14:29,390
want to deploy

00:14:26,690 --> 00:14:32,000
so you Jenkins will build the war file

00:14:29,390 --> 00:14:33,920
push it to your artifactory and then

00:14:32,000 --> 00:14:37,190
trigger the spinnaker spinnaker would

00:14:33,920 --> 00:14:40,010
then launch this job which has the

00:14:37,190 --> 00:14:41,600
container of the entire script and pass

00:14:40,010 --> 00:14:43,250
the credentials it will pull the

00:14:41,600 --> 00:14:46,459
artifact from artifactory

00:14:43,250 --> 00:14:49,220
and use it as a bastion use the secrets

00:14:46,459 --> 00:14:52,760
for the VMS to connect SSH connect to

00:14:49,220 --> 00:14:56,000
them and deploy that so now you have the

00:14:52,760 --> 00:14:58,850
entire process of deploying to regular

00:14:56,000 --> 00:15:01,010
Williams as urban deploy or a simple

00:14:58,850 --> 00:15:03,380
script as part of the spinnaker pipeline

00:15:01,010 --> 00:15:05,930
as you can see because in the spinnaker

00:15:03,380 --> 00:15:08,360
you can also do privilege escalation and

00:15:05,930 --> 00:15:09,920
the visibility you get all those

00:15:08,360 --> 00:15:12,310
features and when you go to the

00:15:09,920 --> 00:15:14,420
infrastructure tab in the spinnaker if

00:15:12,310 --> 00:15:17,060
I'm sure if you are familiar with that

00:15:14,420 --> 00:15:19,339
application view you could actually see

00:15:17,060 --> 00:15:21,079
the VMs that are running and if you can

00:15:19,339 --> 00:15:22,640
extend that to show the versions that

00:15:21,079 --> 00:15:25,010
they are running

00:15:22,640 --> 00:15:26,209
right so this the converted pipeline

00:15:25,010 --> 00:15:28,399
would simply look like this

00:15:26,209 --> 00:15:30,170
you would have a configuration stage

00:15:28,399 --> 00:15:32,480
where the trigger comes in the user

00:15:30,170 --> 00:15:35,390
passes in the parameter saying this is

00:15:32,480 --> 00:15:39,620
my list of servers that I want to deploy

00:15:35,390 --> 00:15:42,920
on and you pass the artifact and then

00:15:39,620 --> 00:15:45,019
deploy stage would just go deploy to

00:15:42,920 --> 00:15:47,390
those William it will run a job pass the

00:15:45,019 --> 00:15:48,980
variables to do it that rod job will

00:15:47,390 --> 00:15:51,200
then take those variables run in a

00:15:48,980 --> 00:15:57,560
specific account which has the secrets

00:15:51,200 --> 00:16:00,380
and it will go apply that to the VMS you

00:15:57,560 --> 00:16:02,450
know you can see the the verification

00:16:00,380 --> 00:16:05,269
stage is a manual verification you can

00:16:02,450 --> 00:16:07,000
have the provisional legislation by ops

00:16:05,269 --> 00:16:09,740
person before you deploy to production

00:16:07,000 --> 00:16:12,500
so so that way you also get the

00:16:09,740 --> 00:16:15,620
advantage of having the visibility

00:16:12,500 --> 00:16:17,630
across both dev and ops with manual

00:16:15,620 --> 00:16:20,060
verification promoting the privileges

00:16:17,630 --> 00:16:22,160
higher and then you can promote the prod

00:16:20,060 --> 00:16:23,870
prod here it will essentially the same

00:16:22,160 --> 00:16:27,410
kind of a VMS but it's a different set

00:16:23,870 --> 00:16:29,240
of VM right and this one you because we

00:16:27,410 --> 00:16:33,260
are using it in spinnaker you can also

00:16:29,240 --> 00:16:37,990
use the strategies that are best

00:16:33,260 --> 00:16:37,990
practices here in terms of can redeploy

00:16:39,190 --> 00:16:49,040
so how is this custom staged on in same

00:16:42,860 --> 00:16:51,170
kubernetes in Orchestrator Orca there is

00:16:49,040 --> 00:16:53,060
an ability you can specify in the

00:16:51,170 --> 00:16:55,640
configuration saying what is your job

00:16:53,060 --> 00:16:57,410
right that shows up as a custom stage

00:16:55,640 --> 00:17:02,329
here in this particular case we are

00:16:57,410 --> 00:17:05,299
saying that this is a kubernetes job and

00:17:02,329 --> 00:17:08,150
then these are the type of the this is

00:17:05,299 --> 00:17:10,870
the name and it uses these artifacts so

00:17:08,150 --> 00:17:14,870
by specifying that we are able to say

00:17:10,870 --> 00:17:17,030
the custom job which has you deployed

00:17:14,870 --> 00:17:21,410
sure of one would run a specific set of

00:17:17,030 --> 00:17:24,140
scripts in that particular namespace so

00:17:21,410 --> 00:17:26,959
we can hear past the account information

00:17:24,140 --> 00:17:29,690
as part of the pipeline and then you

00:17:26,959 --> 00:17:32,450
control based on the user what accounts

00:17:29,690 --> 00:17:34,160
they have access to if the user does not

00:17:32,450 --> 00:17:34,830
have access to that account it will not

00:17:34,160 --> 00:17:37,050
trigger

00:17:34,830 --> 00:17:40,020
and then that account will have the

00:17:37,050 --> 00:17:44,610
secret specific that are accessible to

00:17:40,020 --> 00:17:47,730
the user right yeah essentially once you

00:17:44,610 --> 00:17:50,550
have that script done you can deploy

00:17:47,730 --> 00:17:53,940
that so now how can you use the

00:17:50,550 --> 00:17:56,490
canneries in this one right now that we

00:17:53,940 --> 00:17:58,620
are using spinnaker to deploy let's say

00:17:56,490 --> 00:18:01,740
your production deployment has five VMs

00:17:58,620 --> 00:18:05,340
now you could choose to upgrade only one

00:18:01,740 --> 00:18:08,430
of the VMS with the new artifact and

00:18:05,340 --> 00:18:10,880
then run a canary analysis the canary

00:18:08,430 --> 00:18:14,820
here the automated analysis is not

00:18:10,880 --> 00:18:17,220
specifically designed for the cloud

00:18:14,820 --> 00:18:22,320
native applications so as maybe I can

00:18:17,220 --> 00:18:27,720
quickly show how that looks all right so

00:18:22,320 --> 00:18:29,640
here in the Cayenne tar if you look at

00:18:27,720 --> 00:18:31,280
the canary analysis how it's doing we

00:18:29,640 --> 00:18:35,220
are specifying the baseline and canary

00:18:31,280 --> 00:18:37,890
it's a flexible system it doesn't have

00:18:35,220 --> 00:18:42,090
to be coming from a specific kubernetes

00:18:37,890 --> 00:18:46,350
account or AWS it can be the source here

00:18:42,090 --> 00:18:49,050
is actually configured as a data source

00:18:46,350 --> 00:18:51,870
like data dog or near a lake or

00:18:49,050 --> 00:18:54,690
Prometheus so simply by specifying what

00:18:51,870 --> 00:18:56,820
is your VM that's generating data to

00:18:54,690 --> 00:19:00,050
these data sources you can say which one

00:18:56,820 --> 00:19:03,240
is your canary and which one is your

00:19:00,050 --> 00:19:05,100
baseline and then you can run the canary

00:19:03,240 --> 00:19:07,620
analysis on the new deployments that you

00:19:05,100 --> 00:19:09,300
are doing even if it is a Tomcat that's

00:19:07,620 --> 00:19:11,340
running on a VM that you are just

00:19:09,300 --> 00:19:15,870
modifying the war file on it and

00:19:11,340 --> 00:19:18,390
restarting it so if you look at that

00:19:15,870 --> 00:19:21,960
canary configs and how they do you can

00:19:18,390 --> 00:19:23,940
get all the data very similar to the

00:19:21,960 --> 00:19:26,280
configuration and you can even look at

00:19:23,940 --> 00:19:27,960
the reports that it generates based on

00:19:26,280 --> 00:19:30,540
the metrics that you are doing there are

00:19:27,960 --> 00:19:33,390
certain requirements on the metric

00:19:30,540 --> 00:19:36,690
analysis for the canary and baseline to

00:19:33,390 --> 00:19:39,870
have them similar conditions and similar

00:19:36,690 --> 00:19:41,760
kind of load on them when you're

00:19:39,870 --> 00:19:45,890
comparing but those are the things that

00:19:41,760 --> 00:19:45,890
we can take care of after this of gray

00:19:45,970 --> 00:19:49,330
does it make sense

00:19:52,620 --> 00:19:55,880
all right and so

00:19:55,900 --> 00:20:00,610
going back so we covered essentially

00:19:58,480 --> 00:20:02,559
saying if you have scripts that are done

00:20:00,610 --> 00:20:06,400
through Jenkins they're doing the

00:20:02,559 --> 00:20:07,600
deployment depending on what scripts are

00:20:06,400 --> 00:20:10,059
doing but that they are doing a cloud

00:20:07,600 --> 00:20:11,380
native deployments or bare-metal

00:20:10,059 --> 00:20:13,090
deployments we would have different

00:20:11,380 --> 00:20:15,460
strategies on how we move them to

00:20:13,090 --> 00:20:17,590
spinnaker if they're doing some kind of

00:20:15,460 --> 00:20:21,040
a bare-metal we we basically keep them

00:20:17,590 --> 00:20:22,420
in jenkins have the jenkins jobs as part

00:20:21,040 --> 00:20:24,850
of the spinnaker pipeline that we would

00:20:22,420 --> 00:20:29,020
call we essentially get the visibility

00:20:24,850 --> 00:20:32,470
for them and the process for automation

00:20:29,020 --> 00:20:35,559
move forward when you're looking at the

00:20:32,470 --> 00:20:37,300
systems like you deploy or rlm these are

00:20:35,559 --> 00:20:39,820
purely orchestration tools they don't

00:20:37,300 --> 00:20:42,520
really bring much to the table other

00:20:39,820 --> 00:20:44,230
than what they're running the scripts so

00:20:42,520 --> 00:20:46,450
those ones we would probably want to

00:20:44,230 --> 00:20:47,980
convert them in Oscar's create through

00:20:46,450 --> 00:20:49,480
the spinnaker itself so you can

00:20:47,980 --> 00:20:52,390
completely eliminate those tools and

00:20:49,480 --> 00:20:56,679
have the deployments purely going

00:20:52,390 --> 00:20:59,470
through the spinnaker so these are the

00:20:56,679 --> 00:21:04,830
some of the automated reports that you

00:20:59,470 --> 00:21:07,890
would see so

00:21:04,830 --> 00:21:09,630
ideally you want to be using spinnaker

00:21:07,890 --> 00:21:12,480
built-in capabilities for the club

00:21:09,630 --> 00:21:15,750
native deployments then you can get the

00:21:12,480 --> 00:21:17,940
features as these but in case where

00:21:15,750 --> 00:21:20,929
you're not able to do that or you have

00:21:17,940 --> 00:21:24,630
the bare metal kind of systems then

00:21:20,929 --> 00:21:25,830
extending spinnaker is done through the

00:21:24,630 --> 00:21:29,330
techniques that we just saw with the

00:21:25,830 --> 00:21:29,330
Jenkins or branch off

00:21:32,280 --> 00:21:38,870
[Laughter]

00:21:36,809 --> 00:21:38,870

YouTube URL: https://www.youtube.com/watch?v=iIlrrJbb8t8


