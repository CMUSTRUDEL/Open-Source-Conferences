Title: Brian Wolfe, Jens Vanderhaeghe "Scaling a Migration to CD at Airbnb" - Spinnaker Summit 2019
Publication date: 2019-12-03
Playlist: Spinnaker Summit 2019
Description: 
	The third annual Spinnaker Summit (Diamond Sponsors: Netflix, Google and Armory) was held at the Hard Rock Hotel in San Diego, CA from November 15-17, 2019 and welcomed over 500 members of the rapidly growing Spinnaker open source community.
Captions: 
	00:00:12,680 --> 00:00:15,830
good morning welcome to sunny San Diego

00:00:14,360 --> 00:00:18,470
good to see you guys here

00:00:15,830 --> 00:00:20,840
I'm yen's I represent the continuous

00:00:18,470 --> 00:00:22,310
delivery team at Airbnb most of the

00:00:20,840 --> 00:00:24,980
continuous delivery folks are actually

00:00:22,310 --> 00:00:27,680
up here - you might have interacted with

00:00:24,980 --> 00:00:29,590
some of us on on spinnaker slack so it's

00:00:27,680 --> 00:00:32,419
actually nice to meet you guys in person

00:00:29,590 --> 00:00:33,110
you might have expected Brian wolf to be

00:00:32,419 --> 00:00:34,970
here as well

00:00:33,110 --> 00:00:36,920
unfortunately he couldn't make it he's

00:00:34,970 --> 00:00:38,059
actually becoming a dad I'm so he's

00:00:36,920 --> 00:00:40,219
taking care of a different kind of

00:00:38,059 --> 00:00:43,270
delivery so he won't be able to make it

00:00:40,219 --> 00:00:44,719
today I'm so yeah without further ado

00:00:43,270 --> 00:00:46,640
Who am I

00:00:44,719 --> 00:00:48,500
so my name is yawns I'll save you the

00:00:46,640 --> 00:00:50,899
pronunciation of my last name for

00:00:48,500 --> 00:00:53,059
another time I'm originally from Belgium

00:00:50,899 --> 00:00:55,910
moved to San Francisco about six years

00:00:53,059 --> 00:00:58,399
ago funnily enough I actually started

00:00:55,910 --> 00:00:59,960
out as a front-end engineer started

00:00:58,399 --> 00:01:01,429
working on developer tools and now I'm

00:00:59,960 --> 00:01:05,210
like an infrastructure engineer these

00:01:01,429 --> 00:01:07,610
days so I'm on Airbnb continues delivery

00:01:05,210 --> 00:01:09,800
team we are about six engineers and then

00:01:07,610 --> 00:01:12,800
p.m. and a TPM and we are basically

00:01:09,800 --> 00:01:15,950
driving spinnaker adoption at Airbnb you

00:01:12,800 --> 00:01:17,630
can find my social media handles there

00:01:15,950 --> 00:01:19,100
I'll put the slide back up at the end in

00:01:17,630 --> 00:01:22,100
case you want to follow me or something

00:01:19,100 --> 00:01:24,950
like that so yeah what is this

00:01:22,100 --> 00:01:27,080
presentation about so brief overview

00:01:24,950 --> 00:01:29,570
we're going to go through kind of an

00:01:27,080 --> 00:01:32,090
introduction why is there B&B adopting

00:01:29,570 --> 00:01:34,220
spinnaker well as our tech stack what

00:01:32,090 --> 00:01:37,130
value can spinnaker provide for for a

00:01:34,220 --> 00:01:39,110
company like Airbnb how do we actually

00:01:37,130 --> 00:01:41,030
use spinnaker at Airbnb we do some

00:01:39,110 --> 00:01:44,150
special stuff how do we run spinnaker at

00:01:41,030 --> 00:01:46,010
Airbnb what's our setup how do we deal

00:01:44,150 --> 00:01:48,860
with like scaling spinnaker and things

00:01:46,010 --> 00:01:50,900
like that we've also built some custom

00:01:48,860 --> 00:01:53,450
extensions extensions into spinnaker

00:01:50,900 --> 00:01:55,340
over the last year gonna give you guys

00:01:53,450 --> 00:01:57,410
some tips on how to easily extend

00:01:55,340 --> 00:02:00,050
spinnaker what sort of extensions we

00:01:57,410 --> 00:02:02,240
build and kind of give you guys some

00:02:00,050 --> 00:02:05,180
insight on how we actually use spinnaker

00:02:02,240 --> 00:02:07,970
as a platform for City rather just as a

00:02:05,180 --> 00:02:10,220
software itself and then of course we

00:02:07,970 --> 00:02:12,440
are migrating to spinnaker so our goal

00:02:10,220 --> 00:02:15,170
is to migrate all of Airbnb to spinnaker

00:02:12,440 --> 00:02:17,450
that's a pretty huge undertaking

00:02:15,170 --> 00:02:19,849
I'm sorry B&B runs about a thousand

00:02:17,450 --> 00:02:21,200
micro services so convincing all of

00:02:19,849 --> 00:02:23,480
these engineers all of these teams to

00:02:21,200 --> 00:02:25,400
move to spinnaker as a whole undertaking

00:02:23,480 --> 00:02:26,210
and so I'm gonna talk about how we

00:02:25,400 --> 00:02:28,250
approach that

00:02:26,210 --> 00:02:29,840
reach out to those teams and how do we

00:02:28,250 --> 00:02:32,890
basically convince them to adopt

00:02:29,840 --> 00:02:36,640
continuous delivery and spinnaker itself

00:02:32,890 --> 00:02:38,750
um so yeah let's start back in 2009

00:02:36,640 --> 00:02:41,420
Airbnb was just founded this is a

00:02:38,750 --> 00:02:42,980
picture of Nate so Nate is one of the

00:02:41,420 --> 00:02:44,780
three founders of Airbnb and you're

00:02:42,980 --> 00:02:47,240
looking at a pretty historical piece of

00:02:44,780 --> 00:02:49,070
code right here is their very first

00:02:47,240 --> 00:02:51,830
commit to Airbnb

00:02:49,070 --> 00:02:54,530
it's a rails in it it says a lot about

00:02:51,830 --> 00:02:57,080
our history we're still running rails

00:02:54,530 --> 00:02:58,130
ten years later so that decision is

00:02:57,080 --> 00:03:00,080
actually pretty crucial and that

00:02:58,130 --> 00:03:02,630
decision probably also plays a role into

00:03:00,080 --> 00:03:04,880
why we've adopted spinnaker I'm still

00:03:02,630 --> 00:03:06,980
using SVN back then we migrated to get

00:03:04,880 --> 00:03:08,840
later on so this is very old very

00:03:06,980 --> 00:03:10,940
historic

00:03:08,840 --> 00:03:12,590
so this Ruby on Rails up grew and grew

00:03:10,940 --> 00:03:14,350
and grew and grew over years up until

00:03:12,590 --> 00:03:17,330
the point where it became monolithic

00:03:14,350 --> 00:03:19,310
therefore dubbed monorail it's pretty

00:03:17,330 --> 00:03:22,970
infamous at Airbnb engineering these

00:03:19,310 --> 00:03:25,070
days so a B&B was written in Ruby on

00:03:22,970 --> 00:03:28,160
Rails or front end was backbone back in

00:03:25,070 --> 00:03:31,100
the days we transitioned to react redux

00:03:28,160 --> 00:03:32,810
and our back-end is obviously Ruby on

00:03:31,100 --> 00:03:35,690
Rails and we were starting to build some

00:03:32,810 --> 00:03:38,540
early Java services that's a few years

00:03:35,690 --> 00:03:40,790
ago when I joined Airbnb and we use

00:03:38,540 --> 00:03:43,190
rescue which is basically Ruby Ruby on

00:03:40,790 --> 00:03:47,330
Rails is job queue to kind of do

00:03:43,190 --> 00:03:49,400
asynchronous workloads and so how do we

00:03:47,330 --> 00:03:51,350
deploy this this monolithic ruby on

00:03:49,400 --> 00:03:55,250
rails app we actually decided to build

00:03:51,350 --> 00:03:56,060
an in-house CI ICD tool called the boy

00:03:55,250 --> 00:03:57,860
board

00:03:56,060 --> 00:03:59,810
so the ploy board is actually also

00:03:57,860 --> 00:04:02,960
written in Ruby on Rails and we really

00:03:59,810 --> 00:04:04,610
like Ruby and rails at Arabian B and so

00:04:02,960 --> 00:04:06,130
deploy board was our in-house deployment

00:04:04,610 --> 00:04:08,540
tool and that worked pretty well for

00:04:06,130 --> 00:04:12,320
deploying this kind of single monolithic

00:04:08,540 --> 00:04:15,580
Ruby on Rails ax it basically gets

00:04:12,320 --> 00:04:19,280
events from ghe github Enterprise

00:04:15,580 --> 00:04:22,970
displays the status of builds kicks off

00:04:19,280 --> 00:04:26,240
CI and then allows us to deploy molar L

00:04:22,970 --> 00:04:28,160
runs on ec2 we use chef to kind of

00:04:26,240 --> 00:04:31,580
provision the ec2 instances and then we

00:04:28,160 --> 00:04:33,250
deploy an artifact on to those ec2 boxes

00:04:31,580 --> 00:04:36,080
so that comes with a bunch of problems

00:04:33,250 --> 00:04:37,520
mutable infrastructure and all that so

00:04:36,080 --> 00:04:38,820
that's one of the reasons we are now

00:04:37,520 --> 00:04:42,090
transitioning to two

00:04:38,820 --> 00:04:44,340
Banaras so this is an example of a

00:04:42,090 --> 00:04:46,530
deploy board deploy and this was quite a

00:04:44,340 --> 00:04:49,290
while ago back when monorail had 1,800

00:04:46,530 --> 00:04:50,940
ec2 instances and so the ploy board will

00:04:49,290 --> 00:04:53,610
actually visualize this status of a

00:04:50,940 --> 00:04:55,140
deploy so you can see all of these ec2

00:04:53,610 --> 00:04:57,870
instances and then you can kind of see

00:04:55,140 --> 00:05:00,750
how deploy board kind of progresses

00:04:57,870 --> 00:05:03,300
through a deployment so the green boxes

00:05:00,750 --> 00:05:05,100
are running the new version the blue

00:05:03,300 --> 00:05:06,960
boxes are basically preparing they're

00:05:05,100 --> 00:05:08,370
downloading the artifacts and then the

00:05:06,960 --> 00:05:10,380
yellow boxes are actually offline

00:05:08,370 --> 00:05:12,030
they're not serving any traffic they're

00:05:10,380 --> 00:05:14,160
basically being swapped out that's where

00:05:12,030 --> 00:05:15,380
we're actually starting to the new build

00:05:14,160 --> 00:05:18,240
of monorail

00:05:15,380 --> 00:05:21,060
so the plot board worked pretty well but

00:05:18,240 --> 00:05:22,590
it had a set of problems one of these

00:05:21,060 --> 00:05:25,770
problems is actually the rapid growth of

00:05:22,590 --> 00:05:28,680
Airbnb so just to put things into

00:05:25,770 --> 00:05:31,050
perspective back in 2009 when Nate

00:05:28,680 --> 00:05:32,970
created a rails app there are a couple

00:05:31,050 --> 00:05:35,520
hundred listings maybe across the United

00:05:32,970 --> 00:05:37,640
States mostly in the major cities but

00:05:35,520 --> 00:05:40,500
Airbnb was still a very small company

00:05:37,640 --> 00:05:43,890
will still start up basically I'm kind

00:05:40,500 --> 00:05:46,470
of scaling ten years later there are

00:05:43,890 --> 00:05:48,360
Airbnb listings all across the planet

00:05:46,470 --> 00:05:50,990
some of you might be staying at an

00:05:48,360 --> 00:05:53,340
Airbnb I don't know and there are

00:05:50,990 --> 00:05:55,440
millions of listings and there are

00:05:53,340 --> 00:05:58,170
millions of guests every night staying

00:05:55,440 --> 00:06:02,180
in an Airbnb so there are six million

00:05:58,170 --> 00:06:05,430
homes on Airbnb in 81 thousand cities

00:06:02,180 --> 00:06:07,560
and 191 countries so practically every

00:06:05,430 --> 00:06:11,820
country on the world you will find an

00:06:07,560 --> 00:06:14,070
Airbnb somewhere and so as we scale the

00:06:11,820 --> 00:06:16,890
company or engineering headcount grew

00:06:14,070 --> 00:06:19,920
and so this Ruby on Rails have really

00:06:16,890 --> 00:06:21,690
started to grow into a monorail we had a

00:06:19,920 --> 00:06:24,570
thousands of lines of code we went from

00:06:21,690 --> 00:06:27,450
a dozen engineers to 100 engineers to

00:06:24,570 --> 00:06:29,280
500 engineers to a thousand engineers

00:06:27,450 --> 00:06:32,250
all committing to this single codebase

00:06:29,280 --> 00:06:34,980
and so it became really difficult to

00:06:32,250 --> 00:06:37,470
deploy this monolithic rails app we had

00:06:34,980 --> 00:06:39,450
to build a lot of custom queueing

00:06:37,470 --> 00:06:42,480
mechanisms basically to deal with

00:06:39,450 --> 00:06:44,940
deploying there's a small oval so well

00:06:42,480 --> 00:06:48,540
what do we do we basically started kind

00:06:44,940 --> 00:06:50,700
of an effort to migrate to SOA SOA a

00:06:48,540 --> 00:06:51,960
service-oriented architecture and so

00:06:50,700 --> 00:06:52,400
what we wanted to do is we wanted to

00:06:51,960 --> 00:06:55,460
split

00:06:52,400 --> 00:06:57,949
the monolith and build microservices

00:06:55,460 --> 00:06:59,930
that all serve like their own purpose

00:06:57,949 --> 00:07:01,850
and that are easily to deploy like

00:06:59,930 --> 00:07:03,919
independently so each team could

00:07:01,850 --> 00:07:06,169
basically own their own service so what

00:07:03,919 --> 00:07:08,810
do we do with model we actually split

00:07:06,169 --> 00:07:10,940
model into two repositories I guess two

00:07:08,810 --> 00:07:13,490
mono repos I guess you could call it do

00:07:10,940 --> 00:07:16,040
a repo if you really wanted to so we're

00:07:13,490 --> 00:07:18,919
actually pulling monrell apart into a

00:07:16,040 --> 00:07:20,720
repo called hyper loop so hyper loop you

00:07:18,919 --> 00:07:23,000
can think about it as the next evolution

00:07:20,720 --> 00:07:25,729
of a monorail that'll be your front end

00:07:23,000 --> 00:07:27,169
mono repo so it'll host all of our front

00:07:25,729 --> 00:07:29,810
end code we use nodejs

00:07:27,169 --> 00:07:31,820
for server-side rendering and then we

00:07:29,810 --> 00:07:34,580
use react type script on the front end

00:07:31,820 --> 00:07:37,280
so basically Hyperloop will house all of

00:07:34,580 --> 00:07:39,680
our front-end code and then on the other

00:07:37,280 --> 00:07:44,300
side you see three house so three house

00:07:39,680 --> 00:07:46,280
is the name of our java mono repo why

00:07:44,300 --> 00:07:48,650
treehouse legend goes that the most

00:07:46,280 --> 00:07:51,770
popular listing that's a tree house was

00:07:48,650 --> 00:07:53,530
on the island of java the tree house

00:07:51,770 --> 00:07:57,200
repository holds a bunch of Java code

00:07:53,530 --> 00:07:58,970
therefore it's named tree house so we're

00:07:57,200 --> 00:08:00,320
really in the process of kind of pulling

00:07:58,970 --> 00:08:02,360
apart

00:08:00,320 --> 00:08:04,340
monorail into hyper loop and treehouse

00:08:02,360 --> 00:08:06,860
and so eventually in this beautiful

00:08:04,340 --> 00:08:08,450
future we'll just have Hyperloop

00:08:06,860 --> 00:08:09,590
treehouse and we'll get rid of monorail

00:08:08,450 --> 00:08:12,530
we'll just have a bunch of Micra

00:08:09,590 --> 00:08:15,530
services today we're still very much

00:08:12,530 --> 00:08:16,970
here mongrels and code freeze so people

00:08:15,530 --> 00:08:20,210
aren't actually allowed to add any new

00:08:16,970 --> 00:08:23,539
features tomorrow but of course there's

00:08:20,210 --> 00:08:25,669
security fixes bug fixes and people call

00:08:23,539 --> 00:08:27,139
them pulling code out of morale and we

00:08:25,669 --> 00:08:28,610
think it's gonna be around for for a

00:08:27,139 --> 00:08:30,199
couple years to come because it's really

00:08:28,610 --> 00:08:32,750
millions of lines of code it takes a

00:08:30,199 --> 00:08:34,250
while to kind of D couple a mano left

00:08:32,750 --> 00:08:39,200
like that that's probably a talk on its

00:08:34,250 --> 00:08:40,940
own and so while we were kind of moving

00:08:39,200 --> 00:08:44,300
to SOA things were okay

00:08:40,940 --> 00:08:45,950
but it kind of started falling apart we

00:08:44,300 --> 00:08:48,200
started seeing errors people started

00:08:45,950 --> 00:08:51,050
panicking and slack we started seeing

00:08:48,200 --> 00:08:53,300
failing tests we started getting a bunch

00:08:51,050 --> 00:08:55,339
of incidents we started to realize that

00:08:53,300 --> 00:08:58,100
or existing deployment infrastructure

00:08:55,339 --> 00:08:59,480
wasn't actually built for a micro

00:08:58,100 --> 00:09:01,670
services architecture and we started

00:08:59,480 --> 00:09:04,370
seeing some of the cracks in our

00:09:01,670 --> 00:09:05,690
infrastructure so what are some of the

00:09:04,370 --> 00:09:08,870
deployment challenges that we've

00:09:05,690 --> 00:09:10,340
based in SOA so one thing and deploy

00:09:08,870 --> 00:09:12,050
board is deploy board is a great tool

00:09:10,340 --> 00:09:14,150
but it doesn't have like it doesn't

00:09:12,050 --> 00:09:17,000
enforce you to deploy certain

00:09:14,150 --> 00:09:17,900
environments in a chronological order so

00:09:17,000 --> 00:09:20,630
you can basically click the deploy

00:09:17,900 --> 00:09:23,300
button and you see staging Canary

00:09:20,630 --> 00:09:24,620
development production you can just go

00:09:23,300 --> 00:09:27,530
straight to production there's nothing

00:09:24,620 --> 00:09:29,150
that stops you from doing that so well

00:09:27,530 --> 00:09:31,700
deploy but is good at deploying it's not

00:09:29,150 --> 00:09:34,130
good at like orchestrating different

00:09:31,700 --> 00:09:37,490
stages in the deploy process so it's not

00:09:34,130 --> 00:09:41,570
a deploy pipelines tool there's also no

00:09:37,490 --> 00:09:43,190
codified deploy process so imagine

00:09:41,570 --> 00:09:46,070
thousands of services you want to deploy

00:09:43,190 --> 00:09:47,510
I don't know the payment service you

00:09:46,070 --> 00:09:48,860
open the deploy button you see a bunch

00:09:47,510 --> 00:09:50,840
of environments you have to absolutely

00:09:48,860 --> 00:09:52,700
have no idea how to deploy the service

00:09:50,840 --> 00:09:54,680
how do I know whether it's healthy how

00:09:52,700 --> 00:09:56,420
do I know which tests to run so there

00:09:54,680 --> 00:09:59,330
was no kind of codified deploy process

00:09:56,420 --> 00:10:01,370
there was no best practices to to deploy

00:09:59,330 --> 00:10:03,890
a service from development to staging

00:10:01,370 --> 00:10:05,600
canary and then production so what ended

00:10:03,890 --> 00:10:08,120
up happening is that teams ended up

00:10:05,600 --> 00:10:09,950
writing these these run books they

00:10:08,120 --> 00:10:11,060
basically started writing these run

00:10:09,950 --> 00:10:13,190
books and they were like oh if you want

00:10:11,060 --> 00:10:15,290
to deploy my service please read this

00:10:13,190 --> 00:10:16,460
guidebook it'll take you half an hour to

00:10:15,290 --> 00:10:19,370
read through and then you know how to

00:10:16,460 --> 00:10:23,180
deploy my service so not not great not a

00:10:19,370 --> 00:10:25,100
great process and on top of that we

00:10:23,180 --> 00:10:27,160
started investing a lot of in

00:10:25,100 --> 00:10:31,130
integration testing and sort of like

00:10:27,160 --> 00:10:34,460
post merge testing we build a bunch of

00:10:31,130 --> 00:10:37,880
great tools like for example a tool that

00:10:34,460 --> 00:10:40,370
runs selenium tests traffic replay fault

00:10:37,880 --> 00:10:42,770
injection testing but because we didn't

00:10:40,370 --> 00:10:44,510
have a deployment pipeline we couldn't

00:10:42,770 --> 00:10:46,610
actually enforce people to run these

00:10:44,510 --> 00:10:48,890
validations along the deployment process

00:10:46,610 --> 00:10:51,620
and so these validations were basically

00:10:48,890 --> 00:10:53,300
running asynchronously best-case

00:10:51,620 --> 00:10:55,130
scenarios someone might run them they

00:10:53,300 --> 00:10:56,720
might look at the dashboard and see that

00:10:55,130 --> 00:10:58,520
their integration tests are failing

00:10:56,720 --> 00:10:59,540
worst case scenario people are actually

00:10:58,520 --> 00:11:01,550
not even aware that there are

00:10:59,540 --> 00:11:03,110
integration tests and they just deploy

00:11:01,550 --> 00:11:04,339
straight to problem they have a

00:11:03,110 --> 00:11:06,920
post-mortem and then they figured out

00:11:04,339 --> 00:11:08,630
our integration tests were failing so we

00:11:06,920 --> 00:11:11,620
really needed kind of this like deploy

00:11:08,630 --> 00:11:14,570
pipelines is orchestrated deploy process

00:11:11,620 --> 00:11:17,540
this is a picture of me last year trying

00:11:14,570 --> 00:11:18,890
to keep things alive these days with

00:11:17,540 --> 00:11:19,170
spinnaker things are much better in my

00:11:18,890 --> 00:11:23,040
heart

00:11:19,170 --> 00:11:25,499
rate came down it's much better now so

00:11:23,040 --> 00:11:27,809
yeah this is what happens when you click

00:11:25,499 --> 00:11:29,279
the deploy button and deploy boards you

00:11:27,809 --> 00:11:32,069
know which environment should I deploy

00:11:29,279 --> 00:11:34,350
to should I publish the IDL client gem

00:11:32,069 --> 00:11:36,809
should I deploy to production there's

00:11:34,350 --> 00:11:40,679
multiple red environments is red

00:11:36,809 --> 00:11:42,600
production I don't know is green good no

00:11:40,679 --> 00:11:44,429
one actually knows it's really difficult

00:11:42,600 --> 00:11:46,199
to deploy a service that therefore

00:11:44,429 --> 00:11:49,799
people started writing these run books

00:11:46,199 --> 00:11:50,699
we really needed deployment pipelines it

00:11:49,799 --> 00:11:53,790
was pretty bad

00:11:50,699 --> 00:11:54,299
income spinnaker you've all heard about

00:11:53,790 --> 00:11:56,879
it

00:11:54,299 --> 00:11:58,589
this was our Holy Grail and this was

00:11:56,879 --> 00:12:01,169
certainly gonna help us with continuous

00:11:58,589 --> 00:12:02,699
delivery so why did Airbnb adopt

00:12:01,169 --> 00:12:06,089
spinnaker and not one of the other tools

00:12:02,699 --> 00:12:08,609
that are available spinnaker has been

00:12:06,089 --> 00:12:11,220
proven that Airbnb scale and larger so

00:12:08,609 --> 00:12:12,509
Spinnaker's been running at Netflix it's

00:12:11,220 --> 00:12:15,389
been running at Google you know Airbnb

00:12:12,509 --> 00:12:17,160
is like a pretty sizable company so at

00:12:15,389 --> 00:12:18,829
least we had some data points of like

00:12:17,160 --> 00:12:21,059
other companies in the industry

00:12:18,829 --> 00:12:24,499
basically running and running a tool

00:12:21,059 --> 00:12:27,689
like spinnaker we were also migrating to

00:12:24,499 --> 00:12:30,119
kubernetes so we use kubernetes to run

00:12:27,689 --> 00:12:34,079
our micro services and so deploy board

00:12:30,119 --> 00:12:35,699
was built to deploy ec2 instances it was

00:12:34,079 --> 00:12:38,939
built to do this kind of mutable

00:12:35,699 --> 00:12:40,230
infrastructure with chef and so we would

00:12:38,939 --> 00:12:42,869
either have to build community support

00:12:40,230 --> 00:12:45,119
in to deploy board or adopt the solution

00:12:42,869 --> 00:12:47,399
that comes with native kubernetes

00:12:45,119 --> 00:12:49,110
support there's obviously an active open

00:12:47,399 --> 00:12:52,049
source community you guys are all part

00:12:49,110 --> 00:12:54,540
of it you guys are all great and so

00:12:52,049 --> 00:12:57,299
rather than having five engineer today

00:12:54,540 --> 00:12:59,489
B&B building their own custom tool we

00:12:57,299 --> 00:13:01,499
basically wanted to collaborate with you

00:12:59,489 --> 00:13:03,089
guys we wanted to leverage what the

00:13:01,499 --> 00:13:06,360
other people in the industry are working

00:13:03,089 --> 00:13:08,399
on but most importantly spinnaker is

00:13:06,360 --> 00:13:11,069
built with the concept of deploy

00:13:08,399 --> 00:13:12,959
pipelines at its core deploy board

00:13:11,069 --> 00:13:15,779
didn't have deploy pipelines it didn't

00:13:12,959 --> 00:13:17,189
do like release orchestration and so one

00:13:15,779 --> 00:13:18,779
of the biggest drivers for us for

00:13:17,189 --> 00:13:21,389
adopting spinnaker was that it was

00:13:18,779 --> 00:13:24,720
actually doing these multi stage multi

00:13:21,389 --> 00:13:26,789
cloud releases on top of that spinnaker

00:13:24,720 --> 00:13:28,769
is very easily extensible we wanted to

00:13:26,789 --> 00:13:31,139
have a platform that could help us like

00:13:28,769 --> 00:13:32,720
fit Airbnb --zz needs we have a lot of

00:13:31,139 --> 00:13:36,319
custom infrastructure there B&B

00:13:32,720 --> 00:13:38,089
a custom integration test tooling custom

00:13:36,319 --> 00:13:39,050
CI systems things like that and we

00:13:38,089 --> 00:13:41,269
wanted to make sure that we actually

00:13:39,050 --> 00:13:43,819
adopted a tool that was easily

00:13:41,269 --> 00:13:45,769
extensible bonus points for spinnaker

00:13:43,819 --> 00:13:49,189
being written in Java which is also what

00:13:45,769 --> 00:13:50,959
our tech stack is and typescript react

00:13:49,189 --> 00:13:53,060
on the front end so our engineers are

00:13:50,959 --> 00:13:55,790
pretty familiar with with the code that

00:13:53,060 --> 00:13:57,500
spinnaker is written in comes with

00:13:55,790 --> 00:13:59,569
automated canary analysis out of the box

00:13:57,500 --> 00:14:01,399
we had a bunch of incidents we figured

00:13:59,569 --> 00:14:04,160
if we had canary analysis we probably

00:14:01,399 --> 00:14:06,740
would have saved airbnb.com from going

00:14:04,160 --> 00:14:08,360
down so either we would have to build

00:14:06,740 --> 00:14:09,740
our own canary analysis tool or we could

00:14:08,360 --> 00:14:13,819
just adopt spinnaker that comes with

00:14:09,740 --> 00:14:15,519
that out of the box so how do we run

00:14:13,819 --> 00:14:18,319
these micro services at Airbnb

00:14:15,519 --> 00:14:21,079
so we have a pretty particular way of

00:14:18,319 --> 00:14:23,689
running kubernetes services we have a

00:14:21,079 --> 00:14:25,250
framer that we call Wantage is basically

00:14:23,689 --> 00:14:27,800
an abstraction layer on top of

00:14:25,250 --> 00:14:30,829
kubernetes it's in fact just a

00:14:27,800 --> 00:14:33,230
command-line tool that reads a bunch of

00:14:30,829 --> 00:14:34,579
configuration files and will then like

00:14:33,230 --> 00:14:37,459
output the lower-level

00:14:34,579 --> 00:14:38,959
kubernetes manifests so product

00:14:37,459 --> 00:14:42,769
developers are Airbnb don't actually

00:14:38,959 --> 00:14:45,470
need to know how to set up a replica set

00:14:42,769 --> 00:14:49,370
a deployment stateful set all of these

00:14:45,470 --> 00:14:52,699
kind of kubernetes constructs they can

00:14:49,370 --> 00:14:54,559
basically write a high-level llamó file

00:14:52,699 --> 00:14:56,240
that will then generate all the

00:14:54,559 --> 00:14:58,730
kubernetes infrastructure for them and

00:14:56,240 --> 00:15:02,300
so Wantage is not only a framework it's

00:14:58,730 --> 00:15:04,430
also kind of a philosophy at Airbnb we

00:15:02,300 --> 00:15:06,559
have every service starts with an

00:15:04,430 --> 00:15:08,750
underscore info folder at the root and

00:15:06,559 --> 00:15:10,490
so in that underscore info folder we

00:15:08,750 --> 00:15:13,879
will commit all the configuration for

00:15:10,490 --> 00:15:16,699
your service how do you run CI how do

00:15:13,879 --> 00:15:19,040
you do alerting where your dashboards at

00:15:16,699 --> 00:15:20,329
what are your deployment pipelines all

00:15:19,040 --> 00:15:22,430
of that lives in the underscore info

00:15:20,329 --> 00:15:24,379
folder and then with a single touch with

00:15:22,430 --> 00:15:26,120
one touch with one commit you can

00:15:24,379 --> 00:15:29,209
actually change your services source

00:15:26,120 --> 00:15:31,490
code as well as its configuration so

00:15:29,209 --> 00:15:33,620
everything kind of lives with your

00:15:31,490 --> 00:15:36,259
source code which is a great way of

00:15:33,620 --> 00:15:38,209
doing things it's very easy to kind of

00:15:36,259 --> 00:15:39,860
roll back configuration changes together

00:15:38,209 --> 00:15:43,759
with source code changes you'll have all

00:15:39,860 --> 00:15:45,620
of that kind of in your git history so

00:15:43,759 --> 00:15:46,430
it standardized across Airbnb all

00:15:45,620 --> 00:15:48,620
kubernetes

00:15:46,430 --> 00:15:50,420
says use OneTouch there is a

00:15:48,620 --> 00:15:51,380
command-line tool you can basically say

00:15:50,420 --> 00:15:54,050
like hey OneTouch

00:15:51,380 --> 00:15:56,390
give me a rail service it gives you

00:15:54,050 --> 00:15:59,720
service discovery it gives you an to end

00:15:56,390 --> 00:16:01,520
encryption it gives you IM roles it

00:15:59,720 --> 00:16:04,130
gives you a CI setup that you can then

00:16:01,520 --> 00:16:05,990
blog jobs into and it will eventually

00:16:04,130 --> 00:16:08,779
give you spinnaker deployment pipelines

00:16:05,990 --> 00:16:10,370
how to deploy your service so it's

00:16:08,779 --> 00:16:11,810
basically a framer gets built by

00:16:10,370 --> 00:16:14,209
infrastructure and then different

00:16:11,810 --> 00:16:15,980
infrastructure teams will basically plug

00:16:14,209 --> 00:16:18,380
components into the into the Wantage

00:16:15,980 --> 00:16:20,779
framework but eventually there is a

00:16:18,380 --> 00:16:22,970
generate step that runs a build time all

00:16:20,779 --> 00:16:25,220
it does is it basically generates

00:16:22,970 --> 00:16:26,570
kubernetes llamo and then we basically

00:16:25,220 --> 00:16:28,399
feed that into spinnaker and then

00:16:26,570 --> 00:16:30,320
spinnaker understands how to deploy that

00:16:28,399 --> 00:16:32,870
and then it basically goes and and

00:16:30,320 --> 00:16:35,450
deploys your your kubernetes servers so

00:16:32,870 --> 00:16:38,720
while we first adopt a spinnaker we kind

00:16:35,450 --> 00:16:41,779
of had a conflict we had spinnaker not

00:16:38,720 --> 00:16:43,250
written at Airbnb and then which was

00:16:41,779 --> 00:16:46,339
also we wanted to run spinnaker on

00:16:43,250 --> 00:16:48,410
kubernetes and then we have one touch we

00:16:46,339 --> 00:16:51,680
wanted spinnaker to be kind of a native

00:16:48,410 --> 00:16:55,250
service at Airbnb so what we did is we

00:16:51,680 --> 00:16:58,010
basically run spinnaker on this one

00:16:55,250 --> 00:16:59,900
touch framework so we opted not to use

00:16:58,010 --> 00:17:02,270
hired we basically wanted to use the

00:16:59,900 --> 00:17:03,830
tools that are stat to Airbnb for

00:17:02,270 --> 00:17:05,569
configuring services that will make it

00:17:03,830 --> 00:17:08,990
easier for us to kind of dog for your

00:17:05,569 --> 00:17:12,140
own infrastructure so here's an example

00:17:08,990 --> 00:17:14,110
of a OneTouch configuration file for the

00:17:12,140 --> 00:17:16,400
deck the front end servers in spinnaker

00:17:14,110 --> 00:17:19,520
so basically there's some parameters

00:17:16,400 --> 00:17:22,550
here there's a port we're using envoy

00:17:19,520 --> 00:17:25,939
for service discovery giving it an an IM

00:17:22,550 --> 00:17:28,850
role I'm giving it 10 pods and so

00:17:25,939 --> 00:17:30,559
basically using OneTouch generate this

00:17:28,850 --> 00:17:33,650
will actually spit out all of the side

00:17:30,559 --> 00:17:36,650
cars it will spit out a a proxy nginx

00:17:33,650 --> 00:17:38,390
envoy that will set up and to an

00:17:36,650 --> 00:17:41,270
encryption and all that that good stuff

00:17:38,390 --> 00:17:42,620
for free comes with a logging sidecar so

00:17:41,270 --> 00:17:44,300
one cache is really kind of a nice

00:17:42,620 --> 00:17:46,490
abstraction layer for us today we need

00:17:44,300 --> 00:17:51,070
to not have to build the same thing over

00:17:46,490 --> 00:17:54,020
and over so basically what we did is we

00:17:51,070 --> 00:17:55,429
spinnaker publishes a bomb a bill of

00:17:54,020 --> 00:17:58,070
materials if you're not familiar with it

00:17:55,429 --> 00:18:00,169
it basically tells you for every release

00:17:58,070 --> 00:18:02,330
of spinnaker this is a link

00:18:00,169 --> 00:18:04,669
to the container that we use so what do

00:18:02,330 --> 00:18:07,039
we do when we upgrade spinnaker we

00:18:04,669 --> 00:18:09,139
basically have a file that fetches all

00:18:07,039 --> 00:18:11,600
these containers from the bomb and then

00:18:09,139 --> 00:18:14,119
we basically run those containers inside

00:18:11,600 --> 00:18:17,509
of our OneTouch pods and so this is how

00:18:14,119 --> 00:18:19,669
we run spinnaker there BnB and so we

00:18:17,509 --> 00:18:21,889
basically run each each of the services

00:18:19,669 --> 00:18:25,149
individually we don't use how I got to

00:18:21,889 --> 00:18:27,080
kind of orchestrate a spinnaker release

00:18:25,149 --> 00:18:30,049
so this is a setup

00:18:27,080 --> 00:18:33,559
pretty standard its spinnaker setup so

00:18:30,049 --> 00:18:36,019
deck and gate are exposed to the public

00:18:33,559 --> 00:18:38,749
to our internal network obviously doc

00:18:36,019 --> 00:18:40,759
that's how people deploy gate we might

00:18:38,749 --> 00:18:43,369
have someone that actually wants to call

00:18:40,759 --> 00:18:46,549
into the API directly and we have all of

00:18:43,369 --> 00:18:49,879
the other services we run from 50k and a

00:18:46,549 --> 00:18:50,899
cloud driver echo and spork you might be

00:18:49,879 --> 00:18:53,840
confused spork

00:18:50,899 --> 00:18:55,659
why not Orca so fun fact One Touch

00:18:53,840 --> 00:18:59,690
services are actually unique by name

00:18:55,659 --> 00:19:03,049
Orca already existed so Spinnaker's Orca

00:18:59,690 --> 00:19:07,489
became spork ah so yeah that's we had to

00:19:03,049 --> 00:19:09,889
deal with that we run on AWS most of our

00:19:07,489 --> 00:19:13,220
services are backed by sequel rather

00:19:09,889 --> 00:19:15,440
than Redis we read the Netflix blog post

00:19:13,220 --> 00:19:18,369
and we use a lot of the the sequel stuff

00:19:15,440 --> 00:19:21,769
that's coming out so we run RDS

00:19:18,369 --> 00:19:23,629
ElastiCache s3 and then we run spinnaker

00:19:21,769 --> 00:19:28,869
on on kubernetes so it's basically a

00:19:23,629 --> 00:19:31,669
OneTouch service so how do we actually

00:19:28,869 --> 00:19:33,679
teach spinnaker how how do we teach

00:19:31,669 --> 00:19:37,909
spinnaker to deploy these OneTouch

00:19:33,679 --> 00:19:40,330
services this is like a an overview of

00:19:37,909 --> 00:19:43,730
what the deployment process looks like

00:19:40,330 --> 00:19:46,309
so we have github enterprise a developer

00:19:43,730 --> 00:19:49,970
makes a commit that commits sends an

00:19:46,309 --> 00:19:53,899
event or CI platform we run our CI on

00:19:49,970 --> 00:19:55,850
build kite which is a CI provider and so

00:19:53,899 --> 00:19:58,909
what happens in both kite is there's a

00:19:55,850 --> 00:20:02,239
build step so basically what we do is we

00:19:58,909 --> 00:20:03,919
pull all of your source code in we run

00:20:02,239 --> 00:20:06,320
the OneTouch generate command which will

00:20:03,919 --> 00:20:09,649
basically spit out all of the kubernetes

00:20:06,320 --> 00:20:12,259
llamó and then we upload that as an

00:20:09,649 --> 00:20:14,029
artifact to s3 we actually also do build

00:20:12,259 --> 00:20:16,190
signing so

00:20:14,029 --> 00:20:19,219
we encrypt the artifacts when it goes

00:20:16,190 --> 00:20:21,200
onto s3 this protects us from someone

00:20:19,219 --> 00:20:23,299
tampering with the build woloson history

00:20:21,200 --> 00:20:26,299
before it's deployed so we can actually

00:20:23,299 --> 00:20:27,919
cryptographically verify that what we're

00:20:26,299 --> 00:20:30,979
deploying is actually what we what we

00:20:27,919 --> 00:20:33,590
built we also built a docker container

00:20:30,979 --> 00:20:35,479
and that docker container gets pushed to

00:20:33,590 --> 00:20:39,229
Amazon ECR which is basically container

00:20:35,479 --> 00:20:42,499
registry and so what happens in

00:20:39,229 --> 00:20:45,529
spinnaker we extend cloud driver we

00:20:42,499 --> 00:20:49,039
created a new artifact type that

00:20:45,529 --> 00:20:51,820
artifact type is one-touch artifacts so

00:20:49,039 --> 00:20:55,460
what that artifact does is it pulls the

00:20:51,820 --> 00:20:57,349
tar ball from s3 it decrypts it it

00:20:55,460 --> 00:20:58,759
actually verifies the signature to make

00:20:57,349 --> 00:21:01,389
sure no one actually tampered with the

00:20:58,759 --> 00:21:03,499
builds and then it basically

00:21:01,389 --> 00:21:05,089
concatenates all of the ammo files and

00:21:03,499 --> 00:21:06,469
tells spinnaker to deploy that so

00:21:05,089 --> 00:21:09,019
whether a custom artifact we can

00:21:06,469 --> 00:21:10,729
actually use the existing stages so we

00:21:09,019 --> 00:21:12,529
basically just use the deploy manifest

00:21:10,729 --> 00:21:14,929
stage - then tell spinnaker like hey

00:21:12,529 --> 00:21:16,399
here's a kubernetes manifest go on

00:21:14,929 --> 00:21:18,919
deploy it

00:21:16,399 --> 00:21:20,599
that happens in cloud driver cloud

00:21:18,919 --> 00:21:22,789
driver will deploy the kubernetes and

00:21:20,599 --> 00:21:24,919
cloud driver will basically deploy and

00:21:22,789 --> 00:21:26,869
and that's it we're good to go

00:21:24,919 --> 00:21:29,899
so it was pretty easy for us to teach

00:21:26,869 --> 00:21:31,039
pinnacle how to deploy Wantage services

00:21:29,899 --> 00:21:33,200
we just have to create a custom

00:21:31,039 --> 00:21:35,389
artifacts that kind of shows how

00:21:33,200 --> 00:21:37,580
flexible spinnaker is you can teach it

00:21:35,389 --> 00:21:39,979
things like build signing relatively

00:21:37,580 --> 00:21:42,379
easily we can actually deploy Wantage

00:21:39,979 --> 00:21:44,229
services in spinnaker so what we can do

00:21:42,379 --> 00:21:46,369
is we can deploy spinnaker with itself

00:21:44,229 --> 00:21:48,469
that's pretty neat so we can actually

00:21:46,369 --> 00:21:50,869
deploy all of the micro services

00:21:48,469 --> 00:21:52,729
independently so we make changes to

00:21:50,869 --> 00:21:54,589
Kayenta cloud driver all of these

00:21:52,729 --> 00:21:56,690
services so we can actually use

00:21:54,589 --> 00:21:59,539
spinnaker deploy pipelines to verify a

00:21:56,690 --> 00:22:02,749
spinnaker deploy pretty meta but also

00:21:59,539 --> 00:22:07,059
pretty pretty awesome so fun fact

00:22:02,749 --> 00:22:09,229
spinnaker lives in the MGMT a cluster so

00:22:07,059 --> 00:22:12,409
we have different kubernetes cluster

00:22:09,229 --> 00:22:16,820
side Airbnb they are kind of air-gapped

00:22:12,409 --> 00:22:18,169
by AWS firewall rules so they're like

00:22:16,820 --> 00:22:20,330
the development cluster shouldn't be

00:22:18,169 --> 00:22:22,429
talking to the production cluster

00:22:20,330 --> 00:22:24,409
spinnaker lives in a special kind of

00:22:22,429 --> 00:22:26,779
management cluster kind of a control a

00:22:24,409 --> 00:22:28,000
federated control plane cluster and that

00:22:26,779 --> 00:22:31,250
cluster has power

00:22:28,000 --> 00:22:33,200
access to the kubernetes api on all of

00:22:31,250 --> 00:22:34,490
the other clusters so spinnaker is kind

00:22:33,200 --> 00:22:35,960
of a special class that that lives in

00:22:34,490 --> 00:22:38,270
this management spinnaker is a special

00:22:35,960 --> 00:22:40,430
service or set of services that lives in

00:22:38,270 --> 00:22:42,560
this management cluster so there's this

00:22:40,430 --> 00:22:46,610
cloud driver deployed with spinnaker

00:22:42,560 --> 00:22:49,490
itself at Airbnb so now that we have

00:22:46,610 --> 00:22:50,990
spinnaker running I want to briefly walk

00:22:49,490 --> 00:22:52,940
through some of the extensions that

00:22:50,990 --> 00:22:54,500
we've built for spinnaker why we've

00:22:52,940 --> 00:22:56,050
built those extensions and maybe give

00:22:54,500 --> 00:22:59,660
you guys some tips on how to easily

00:22:56,050 --> 00:23:03,080
extend spinnaker so the first thing we

00:22:59,660 --> 00:23:05,380
did we have this OneTouch philosophy at

00:23:03,080 --> 00:23:08,390
Airbnb and so what we needed was

00:23:05,380 --> 00:23:11,450
pipelines as code this was about a year

00:23:08,390 --> 00:23:14,750
and a half ago before the native pipe

00:23:11,450 --> 00:23:18,560
Lanza's code was very popular so we

00:23:14,750 --> 00:23:20,240
basically decided to run our own tool we

00:23:18,560 --> 00:23:21,890
also wanted to run our own tool because

00:23:20,240 --> 00:23:23,840
that would give us more control and

00:23:21,890 --> 00:23:26,620
would basically allow us to create an

00:23:23,840 --> 00:23:29,120
abstraction layer for Airbnb developers

00:23:26,620 --> 00:23:31,310
so we stayed within the nautical theme

00:23:29,120 --> 00:23:33,650
for naming the services related to

00:23:31,310 --> 00:23:36,380
spinnaker so we created a command line

00:23:33,650 --> 00:23:37,430
tool anchored and so here's an example

00:23:36,380 --> 00:23:40,510
of a llamó

00:23:37,430 --> 00:23:42,830
configuration file that allows you to

00:23:40,510 --> 00:23:44,690
basically set up a pipeline so this

00:23:42,830 --> 00:23:48,500
would be a pipeline for deploying a

00:23:44,690 --> 00:23:51,260
service so consists of four stages first

00:23:48,500 --> 00:23:53,870
stages deploy to staging so it's a

00:23:51,260 --> 00:23:56,750
OneTouch deploy stage which will then

00:23:53,870 --> 00:23:59,360
basically generate a deploy manifest

00:23:56,750 --> 00:24:01,940
stage with the right artifacts and so we

00:23:59,360 --> 00:24:04,370
can basically set these dependencies on

00:24:01,940 --> 00:24:05,960
the stages similar to how spinnaker

00:24:04,370 --> 00:24:07,910
itself does it and this allows

00:24:05,960 --> 00:24:09,890
developers to kind of build this dag of

00:24:07,910 --> 00:24:12,980
stages and allow them to easily

00:24:09,890 --> 00:24:15,440
configure their service so how does

00:24:12,980 --> 00:24:18,080
Anchor work anchor is a command line

00:24:15,440 --> 00:24:19,280
tool it's written in typescript it runs

00:24:18,080 --> 00:24:22,690
at Build time

00:24:19,280 --> 00:24:25,880
so during CI so you write your pipeline

00:24:22,690 --> 00:24:29,210
you push it to CI anchor will basically

00:24:25,880 --> 00:24:32,270
generate spinnaker JSON so will

00:24:29,210 --> 00:24:36,320
basically generate pipeline output that

00:24:32,270 --> 00:24:38,330
spinnaker understands so it's also an

00:24:36,320 --> 00:24:40,490
abstraction layer for Airbnb specific

00:24:38,330 --> 00:24:41,539
features and stages maybe stages that

00:24:40,490 --> 00:24:44,299
are

00:24:41,539 --> 00:24:47,269
so for example an integration test we

00:24:44,299 --> 00:24:48,499
reuse the existing webhook stage and so

00:24:47,269 --> 00:24:50,089
people will just kind of have this

00:24:48,499 --> 00:24:52,149
custom stage and then under the hood we

00:24:50,089 --> 00:24:54,529
can actually set up the web hog stage

00:24:52,149 --> 00:24:56,299
appropriately

00:24:54,529 --> 00:24:58,999
new feature that we just landed in

00:24:56,299 --> 00:25:02,149
Guyana this week an anchor this week is

00:24:58,999 --> 00:25:04,909
that it can also generate diantha so it

00:25:02,149 --> 00:25:07,339
can generate canary configs so people at

00:25:04,909 --> 00:25:10,279
Airbnb also have like canary analysis

00:25:07,339 --> 00:25:12,649
configs as code they can even go and

00:25:10,279 --> 00:25:14,689
share canary analysis configs with all

00:25:12,649 --> 00:25:16,519
the teams so for example we have a

00:25:14,689 --> 00:25:19,399
canary analysis config for our service

00:25:16,519 --> 00:25:21,259
framework and so every service that uses

00:25:19,399 --> 00:25:24,799
the Java service framework gets canary

00:25:21,259 --> 00:25:27,739
analysis for free out of the box and our

00:25:24,799 --> 00:25:29,119
plan is to basically generate kind of

00:25:27,739 --> 00:25:31,039
these default pipelines for a new

00:25:29,119 --> 00:25:34,879
service so if you spin up a new rail

00:25:31,039 --> 00:25:37,459
service with one touch you'll get like

00:25:34,879 --> 00:25:38,749
staging canary production development

00:25:37,459 --> 00:25:40,249
out of the box you'll get your

00:25:38,749 --> 00:25:41,989
deployment pipeline and you're basically

00:25:40,249 --> 00:25:44,659
good to go you have a new service in

00:25:41,989 --> 00:25:46,939
spinnaker but in within minutes so anka

00:25:44,659 --> 00:25:49,249
generates it grabs

00:25:46,939 --> 00:25:52,389
yamo pipeline configuration and then

00:25:49,249 --> 00:25:54,559
outputs JSON that spinnaker understands

00:25:52,389 --> 00:25:57,559
how do we actually deploy this

00:25:54,559 --> 00:25:59,569
configuration to spinnaker we bootstrap

00:25:57,559 --> 00:26:01,969
every spinnaker service with a special

00:25:59,569 --> 00:26:03,949
pipeline this pipeline is called the

00:26:01,969 --> 00:26:07,369
deploy continues delivery configs

00:26:03,949 --> 00:26:09,829
pipeline so what happens is you have a

00:26:07,369 --> 00:26:11,989
green build it kicks off the deploy city

00:26:09,829 --> 00:26:14,839
configs pipeline so it's on auto deploy

00:26:11,989 --> 00:26:18,909
and so what this pipeline does is it

00:26:14,839 --> 00:26:22,579
pulls the pipeline artifacts basically

00:26:18,909 --> 00:26:24,409
also does the build sign and saves those

00:26:22,579 --> 00:26:26,719
pipelines and then it also has a delete

00:26:24,409 --> 00:26:28,719
pipeline step you might have a pipeline

00:26:26,719 --> 00:26:30,799
that's no longer in your configuration

00:26:28,719 --> 00:26:32,149
so it kind of makes sure that whatever

00:26:30,799 --> 00:26:34,639
is in your configuration is the source

00:26:32,149 --> 00:26:36,859
of truth but we basically remove all

00:26:34,639 --> 00:26:41,889
stray pipelines so this runs on every

00:26:36,859 --> 00:26:44,539
build so you can now use spinnaker

00:26:41,889 --> 00:26:46,099
pipelines as code every time you commit

00:26:44,539 --> 00:26:47,239
to master it will automatically kick off

00:26:46,099 --> 00:26:49,330
this pipeline and it will actually

00:26:47,239 --> 00:26:52,010
update your existing pipe

00:26:49,330 --> 00:26:54,170
so you can deploy spinnaker pipelines as

00:26:52,010 --> 00:26:56,180
if it was any other artifact is a pretty

00:26:54,170 --> 00:26:59,780
cool useful workflow

00:26:56,180 --> 00:27:02,780
so besides anchor we really think of

00:26:59,780 --> 00:27:06,260
spinnaker as a platform rather than a

00:27:02,780 --> 00:27:08,300
bunch of services to do CD we really

00:27:06,260 --> 00:27:11,360
want to build a CD platform and we

00:27:08,300 --> 00:27:14,720
mostly extend Orca and cloud driver to

00:27:11,360 --> 00:27:18,470
do so so we have Orca and then we

00:27:14,720 --> 00:27:22,070
basically talk Orca to talk

00:27:18,470 --> 00:27:24,440
Airbnb service IDL so service ideal is

00:27:22,070 --> 00:27:27,890
interface definition language it is

00:27:24,440 --> 00:27:30,230
basically a typed language basically

00:27:27,890 --> 00:27:33,020
drift that's how like inter-service

00:27:30,230 --> 00:27:35,630
communication happens at Airbnb so

00:27:33,020 --> 00:27:38,720
there's an existing map hook stage the

00:27:35,630 --> 00:27:40,640
HTTP web hook stage so we created a

00:27:38,720 --> 00:27:43,280
custom web hook stage that's basically a

00:27:40,640 --> 00:27:45,920
DL so now you can actually leverage

00:27:43,280 --> 00:27:48,200
spinnaker to talk to all the services

00:27:45,920 --> 00:27:51,560
that are written in Airbnb ease IDL

00:27:48,200 --> 00:27:53,240
language and we can actually do things

00:27:51,560 --> 00:27:56,990
like trigger integration tests and kind

00:27:53,240 --> 00:27:58,460
of pull them so Oracle can talk to a

00:27:56,990 --> 00:28:02,090
bunch of different services it can talk

00:27:58,460 --> 00:28:03,860
to our CI platform to kick off new unit

00:28:02,090 --> 00:28:05,750
tests or integration tests it can talk

00:28:03,860 --> 00:28:07,340
to deploy boards to fetch some

00:28:05,750 --> 00:28:09,890
information because deploy boards still

00:28:07,340 --> 00:28:11,870
around can run things like fault and

00:28:09,890 --> 00:28:16,730
fault injection tests and things like

00:28:11,870 --> 00:28:20,990
that one thing we did is we extended

00:28:16,730 --> 00:28:23,690
echos event bus so echo is the kind of

00:28:20,990 --> 00:28:26,300
message bus service in spinnaker and so

00:28:23,690 --> 00:28:29,630
it's actually very easy to extend echo

00:28:26,300 --> 00:28:31,580
and we really wanted to send events for

00:28:29,630 --> 00:28:33,440
things that happen in spinnaker and send

00:28:31,580 --> 00:28:36,020
those events kind of fan them out to our

00:28:33,440 --> 00:28:38,930
existing infrastructure so what happens

00:28:36,020 --> 00:28:40,760
for example there's an event stage

00:28:38,930 --> 00:28:43,730
started so someone kicked off a stage

00:28:40,760 --> 00:28:46,450
that comes into Echo we actually have a

00:28:43,730 --> 00:28:50,030
custom parser for that events that then

00:28:46,450 --> 00:28:51,500
generates and new events we can actually

00:28:50,030 --> 00:28:55,280
say like hey this was a OneTouch deploy

00:28:51,500 --> 00:28:57,650
stage someone deployed to staging so we

00:28:55,280 --> 00:28:59,840
basically parse the existing echo event

00:28:57,650 --> 00:29:01,280
and converted into our own Airbnb

00:28:59,840 --> 00:29:04,700
internal event and then we

00:29:01,280 --> 00:29:05,390
fan it out we have a service that we

00:29:04,700 --> 00:29:07,730
call jitney

00:29:05,390 --> 00:29:08,540
so jitney is a message bus is basically

00:29:07,730 --> 00:29:09,920
Kafka

00:29:08,540 --> 00:29:12,380
it's basically an abstraction layer

00:29:09,920 --> 00:29:14,390
around Kafka so we we made a jitney

00:29:12,380 --> 00:29:16,010
events we also found out the data dog

00:29:14,390 --> 00:29:17,870
people might want to build dashboards

00:29:16,010 --> 00:29:20,150
and actually see their deploys on those

00:29:17,870 --> 00:29:22,160
dashboards and we also found out to our

00:29:20,150 --> 00:29:24,440
data warehouse so that people can

00:29:22,160 --> 00:29:26,150
actually run retrospective analysis on

00:29:24,440 --> 00:29:28,310
all of the deployments like how many

00:29:26,150 --> 00:29:29,930
deployments do we have at Airbnb how

00:29:28,310 --> 00:29:32,900
many regressions this canary analysis

00:29:29,930 --> 00:29:35,540
catch how many services do we have in

00:29:32,900 --> 00:29:37,460
spinnaker so we can actually kind of

00:29:35,540 --> 00:29:39,380
build like analytics on top of spinnaker

00:29:37,460 --> 00:29:43,850
based on these events and we can really

00:29:39,380 --> 00:29:45,740
do data-driven development here's an

00:29:43,850 --> 00:29:48,290
example of something that's consuming

00:29:45,740 --> 00:29:52,100
these events this is watch point this is

00:29:48,290 --> 00:29:54,880
Airbnb in-house observability tool it

00:29:52,100 --> 00:29:57,980
basically shows you the service avalon

00:29:54,880 --> 00:30:01,700
so how it works is this is a timeline

00:29:57,980 --> 00:30:04,520
graph so this is basically time and then

00:30:01,700 --> 00:30:06,710
this line is where we're looking at so

00:30:04,520 --> 00:30:10,100
what happened is a new deploy got kicked

00:30:06,710 --> 00:30:12,560
off emitted a kafka event watch point

00:30:10,100 --> 00:30:14,780
consume this kafka events knew that a

00:30:12,560 --> 00:30:18,020
deploy started so people can actually

00:30:14,780 --> 00:30:19,400
overlay deploys there's some graphs here

00:30:18,020 --> 00:30:22,280
at the bottom that are useful for them

00:30:19,400 --> 00:30:24,800
let's say error rate you can actually

00:30:22,280 --> 00:30:27,470
then very quickly correlate error rate

00:30:24,800 --> 00:30:28,550
going up with a deployment and so you

00:30:27,470 --> 00:30:30,860
would actually know whether your issue

00:30:28,550 --> 00:30:32,570
has deployment related it'll link you to

00:30:30,860 --> 00:30:34,460
other services that are up and

00:30:32,570 --> 00:30:35,870
downstream of the service that you're

00:30:34,460 --> 00:30:38,960
looking at so you can kind of easily

00:30:35,870 --> 00:30:40,130
debug your deployment so you can

00:30:38,960 --> 00:30:42,980
actually see the deploy got kicked off

00:30:40,130 --> 00:30:45,680
here and an spinnaker started deploying

00:30:42,980 --> 00:30:49,310
the pubs these are the requests incoming

00:30:45,680 --> 00:30:50,990
by Shah by version so you can see the

00:30:49,310 --> 00:30:53,120
new version slowly comes online and then

00:30:50,990 --> 00:30:55,220
the deploy succeeds so this is an

00:30:53,120 --> 00:30:57,710
example of how we use echo to really

00:30:55,220 --> 00:30:59,510
integrate our existing tooling into

00:30:57,710 --> 00:31:02,570
spinnaker how we really easily extend

00:30:59,510 --> 00:31:07,580
echo as kind of that like middleware

00:31:02,570 --> 00:31:11,240
layer to fan-out events another example

00:31:07,580 --> 00:31:13,910
that we have is we use web poke stages

00:31:11,240 --> 00:31:15,240
for integration testing we use both the

00:31:13,910 --> 00:31:18,120
HTTP

00:31:15,240 --> 00:31:21,320
backstage and we also have a custom IDL

00:31:18,120 --> 00:31:24,150
webhook stage so basically what we tell

00:31:21,320 --> 00:31:26,910
integration test framework developers at

00:31:24,150 --> 00:31:30,630
our B&B is hey this is how spinnaker

00:31:26,910 --> 00:31:32,340
does webhook is gonna call your end

00:31:30,630 --> 00:31:34,980
point and then it's gonna pull it

00:31:32,340 --> 00:31:37,500
watching for a certain status code so as

00:31:34,980 --> 00:31:39,690
long as your integration service

00:31:37,500 --> 00:31:41,850
framework respects that kind of

00:31:39,690 --> 00:31:44,280
contracts you will be able to easily

00:31:41,850 --> 00:31:45,750
integrate it with spinnaker so for

00:31:44,280 --> 00:31:48,559
example you have a spinnaker page it

00:31:45,750 --> 00:31:51,840
will post to route and then we basically

00:31:48,559 --> 00:31:53,580
ping until completion we know the number

00:31:51,840 --> 00:31:55,230
of tests that failed and succeeded and

00:31:53,580 --> 00:31:57,929
so eventually we actually will be able

00:31:55,230 --> 00:31:59,610
to kind of build a custom staged UI for

00:31:57,929 --> 00:32:01,860
that and actually display the results of

00:31:59,610 --> 00:32:05,820
these tests so what that looks like an

00:32:01,860 --> 00:32:08,220
anchor we have marathon marathon is fit

00:32:05,820 --> 00:32:11,100
that's our fault injection test runner

00:32:08,220 --> 00:32:12,750
framework and so if you want to setup

00:32:11,100 --> 00:32:15,059
marathon integration tests it takes you

00:32:12,750 --> 00:32:17,100
five lines of llamó that will actually

00:32:15,059 --> 00:32:18,690
add a stage to your pipeline and now you

00:32:17,100 --> 00:32:21,630
can actually run integration tests so we

00:32:18,690 --> 00:32:23,120
really see spinnaker as a platform so

00:32:21,630 --> 00:32:25,020
these other teams that build these

00:32:23,120 --> 00:32:27,450
integration test frameworks should be

00:32:25,020 --> 00:32:30,780
able to plug their stuff into spinnaker

00:32:27,450 --> 00:32:33,120
easily how do we actually do all of this

00:32:30,780 --> 00:32:35,820
how do we extend these these Java

00:32:33,120 --> 00:32:38,540
services so spinnaker is written in

00:32:35,820 --> 00:32:41,970
spring boot spring wood is very easily

00:32:38,540 --> 00:32:43,830
configurable and it allows us to kind of

00:32:41,970 --> 00:32:47,309
override existing components or

00:32:43,830 --> 00:32:49,800
basically like plug in new components so

00:32:47,309 --> 00:32:53,460
here's an example of us like overriding

00:32:49,800 --> 00:32:55,790
the kubernetes manifest handler so what

00:32:53,460 --> 00:32:57,510
we do is we basically use spring boot

00:32:55,790 --> 00:33:00,360
annotations to override existing

00:32:57,510 --> 00:33:03,570
components and so we don't actually have

00:33:00,360 --> 00:33:05,400
a fork of spinnaker we have our custom

00:33:03,570 --> 00:33:07,410
annotations and then we basically

00:33:05,400 --> 00:33:09,570
compile them together with the spinnaker

00:33:07,410 --> 00:33:11,070
source code and so our stuff actually

00:33:09,570 --> 00:33:12,870
lives side by side with the spinnaker

00:33:11,070 --> 00:33:14,970
source code so if we do a spinnaker

00:33:12,870 --> 00:33:17,100
upgrades we just pull in the new bill of

00:33:14,970 --> 00:33:21,090
materials and we're good to go

00:33:17,100 --> 00:33:22,890
this comes with some caveats some other

00:33:21,090 --> 00:33:24,590
people that are working on spinnaker

00:33:22,890 --> 00:33:27,419
might not be aware that we are actually

00:33:24,590 --> 00:33:28,980
extending stuff so we should definitely

00:33:27,419 --> 00:33:31,710
have a conversation on the right

00:33:28,980 --> 00:33:33,059
public API looks looks like from what

00:33:31,710 --> 00:33:35,760
I've heard there's some work going on

00:33:33,059 --> 00:33:38,309
around the plugin based architecture so

00:33:35,760 --> 00:33:39,450
there's there are some caveats you might

00:33:38,309 --> 00:33:40,830
override something and then in that

00:33:39,450 --> 00:33:42,929
version I played of spinnaker that might

00:33:40,830 --> 00:33:45,419
actually break which happened a few

00:33:42,929 --> 00:33:47,220
times but this is a pretty good workflow

00:33:45,419 --> 00:33:49,139
this allows us to like easily extend

00:33:47,220 --> 00:33:51,299
spinnaker I'm kind of using spring boots

00:33:49,139 --> 00:33:53,070
which is pretty pretty straightforward

00:33:51,299 --> 00:33:55,159
so this is how we extend the back-end

00:33:53,070 --> 00:33:58,049
services so we extend a cloud driver

00:33:55,159 --> 00:34:00,539
orca or spork I guess and we also

00:33:58,049 --> 00:34:03,120
extended Ecco as kind of our event bus

00:34:00,539 --> 00:34:05,159
for finding things out we also extend a

00:34:03,120 --> 00:34:07,350
deck so you're looking at a screen shot

00:34:05,159 --> 00:34:09,119
of deploy boards so remember in the

00:34:07,350 --> 00:34:12,359
beginning of my presentation I mentioned

00:34:09,119 --> 00:34:16,740
that deploy board was also a CI system

00:34:12,359 --> 00:34:18,919
or it visualizes CI results so we don't

00:34:16,740 --> 00:34:21,450
run Jenkins or anything like that so we

00:34:18,919 --> 00:34:24,230
adopt a spinnaker but we noticed a gap

00:34:21,450 --> 00:34:27,089
we didn't actually have a clean way of

00:34:24,230 --> 00:34:30,149
bridging CI and CD and like kind of

00:34:27,089 --> 00:34:33,329
visualizing the results of our of our CI

00:34:30,149 --> 00:34:35,310
system and the different builds so the

00:34:33,329 --> 00:34:38,339
blow but has a snapshots view that

00:34:35,310 --> 00:34:40,050
basically fills you all of the commits

00:34:38,339 --> 00:34:43,169
on a certain branch and then it also

00:34:40,050 --> 00:34:45,419
shows you where those are at so the

00:34:43,169 --> 00:34:47,879
green pea is production so you like

00:34:45,419 --> 00:34:50,069
easily know this build is currently

00:34:47,879 --> 00:34:51,389
running in production so we started

00:34:50,069 --> 00:34:54,690
adopting spinnaker and people were like

00:34:51,389 --> 00:34:57,510
well where's my build what's currently

00:34:54,690 --> 00:34:59,760
running in production and so we were

00:34:57,510 --> 00:35:01,500
kind of missing that that view and so we

00:34:59,760 --> 00:35:03,900
figured we would just extend that and

00:35:01,500 --> 00:35:06,180
kind of build that view into spinnaker

00:35:03,900 --> 00:35:08,430
and that's what we did so this is the

00:35:06,180 --> 00:35:11,700
equivalent of the snapshots view but

00:35:08,430 --> 00:35:15,390
it's in deck so what you can see here is

00:35:11,700 --> 00:35:18,900
this is CI so this is a commit that was

00:35:15,390 --> 00:35:22,109
merged into the master branch for Dec

00:35:18,900 --> 00:35:23,430
and so this is the SHA you can actually

00:35:22,109 --> 00:35:25,619
click on this and it will take you to

00:35:23,430 --> 00:35:28,380
github if you click on the CII thing it

00:35:25,619 --> 00:35:30,420
will take you to build guides and it

00:35:28,380 --> 00:35:34,260
also shows you what's currently deployed

00:35:30,420 --> 00:35:37,770
so we query cloud driver and so we

00:35:34,260 --> 00:35:40,920
annotate pods with a sha and so we can

00:35:37,770 --> 00:35:42,540
actually correlate or build with what's

00:35:40,920 --> 00:35:44,250
actually running on kubernetes

00:35:42,540 --> 00:35:46,710
and so we can actually easy say like hey

00:35:44,250 --> 00:35:49,050
there are three pods in production this

00:35:46,710 --> 00:35:51,060
is the replica set that's running this

00:35:49,050 --> 00:35:52,380
build so people can just open this up

00:35:51,060 --> 00:35:54,360
and they know exactly what's running in

00:35:52,380 --> 00:35:56,610
production in this case they don't need

00:35:54,360 --> 00:35:58,140
to kick off a new deploy if it was like

00:35:56,610 --> 00:36:00,720
on build number two they might have to

00:35:58,140 --> 00:36:02,520
deploy a new build so you can actually

00:36:00,720 --> 00:36:05,430
select a pipeline from here which will

00:36:02,520 --> 00:36:08,010
allow you to trigger a spinnaker

00:36:05,430 --> 00:36:09,630
pipeline with the artifact that's

00:36:08,010 --> 00:36:12,690
associated with that snapshot so this

00:36:09,630 --> 00:36:15,300
view kind of allows us to bridge CIA and

00:36:12,690 --> 00:36:17,070
CDR a B&B we don't run Jenkins or

00:36:15,300 --> 00:36:18,650
anything like that that visualizes build

00:36:17,070 --> 00:36:21,390
results so this has been kind of useful

00:36:18,650 --> 00:36:23,550
as like a UX improvement for for

00:36:21,390 --> 00:36:24,330
developers at Airbnb how do we extend

00:36:23,550 --> 00:36:27,420
deck

00:36:24,330 --> 00:36:29,220
initially we fourth deck that was

00:36:27,420 --> 00:36:31,080
difficult and every time there was an

00:36:29,220 --> 00:36:34,230
upgrade we had to pull a bunch of codes

00:36:31,080 --> 00:36:36,870
from deck in DAC is undergoing a

00:36:34,230 --> 00:36:40,200
migration from angular to react so

00:36:36,870 --> 00:36:41,850
called pretty gnarly pretty quickly for

00:36:40,200 --> 00:36:44,400
the snapshots page we actually realized

00:36:41,850 --> 00:36:48,060
it's pretty easy to create a new page in

00:36:44,400 --> 00:36:50,790
deck so you can basically create a route

00:36:48,060 --> 00:36:52,740
and angular UI rather route you can set

00:36:50,790 --> 00:36:54,300
up a data store that's kind of attached

00:36:52,740 --> 00:36:57,000
to that route and then teach that data

00:36:54,300 --> 00:37:00,120
store how to fetch data and our case

00:36:57,000 --> 00:37:01,410
snapshots and so setting up a new page

00:37:00,120 --> 00:37:04,380
was pretty straightforward but we also

00:37:01,410 --> 00:37:06,680
wanted to extend some of the components

00:37:04,380 --> 00:37:09,840
that are like deeper down in deck

00:37:06,680 --> 00:37:11,610
without actually forking deck and so we

00:37:09,840 --> 00:37:13,470
actually realized there was an

00:37:11,610 --> 00:37:15,240
annotation someone that Netflix or

00:37:13,470 --> 00:37:18,030
Google built whoever built that thank

00:37:15,240 --> 00:37:21,060
you there is an annotation that you can

00:37:18,030 --> 00:37:22,980
actually use over audible you can tag a

00:37:21,060 --> 00:37:25,680
react component with over rideable with

00:37:22,980 --> 00:37:28,380
a key so for example you can say my

00:37:25,680 --> 00:37:30,000
awesome components it's over audible and

00:37:28,380 --> 00:37:31,950
then what we can do in this and the

00:37:30,000 --> 00:37:34,200
Airbnb module is we can override an

00:37:31,950 --> 00:37:36,240
existing component so let's say we

00:37:34,200 --> 00:37:37,890
wanted to change the way a button looks

00:37:36,240 --> 00:37:39,690
or change the behavior of a button we

00:37:37,890 --> 00:37:41,910
can actually easily swap out components

00:37:39,690 --> 00:37:43,920
at runtime very similar to how we do

00:37:41,910 --> 00:37:46,230
things in spring but-- this makes it

00:37:43,920 --> 00:37:49,280
very easy for us to kind of plug these

00:37:46,230 --> 00:37:51,330
things in or goal is basically

00:37:49,280 --> 00:37:54,000
everywhere where we use over rideable

00:37:51,330 --> 00:37:55,599
we'll probably make a PR to use at

00:37:54,000 --> 00:37:57,430
upstream so that actually

00:37:55,599 --> 00:37:58,960
like spinnaker community is actually

00:37:57,430 --> 00:38:01,599
aware of like which components are being

00:37:58,960 --> 00:38:03,549
overridden so there's kind of a touch

00:38:01,599 --> 00:38:06,160
point there so that will make it easier

00:38:03,549 --> 00:38:09,279
for all the developers to also extend

00:38:06,160 --> 00:38:12,999
spinnaker and we'll all know what's

00:38:09,279 --> 00:38:15,729
being extended and whatnot so with all

00:38:12,999 --> 00:38:20,049
that said that's how we extend it

00:38:15,729 --> 00:38:22,329
spinnaker but how do we actually migrate

00:38:20,049 --> 00:38:25,809
to spinnaker how do we force a thousand

00:38:22,329 --> 00:38:28,059
services to move to spinnaker so in SOA

00:38:25,809 --> 00:38:29,710
we have a very rapid growth of services

00:38:28,059 --> 00:38:32,259
this is the amount of services in deploy

00:38:29,710 --> 00:38:33,700
board I would say about half of those

00:38:32,259 --> 00:38:37,269
are kubernetes services there's also

00:38:33,700 --> 00:38:42,670
rubygems Java packages so you can see in

00:38:37,269 --> 00:38:45,039
2017 we had about 350 services right now

00:38:42,670 --> 00:38:50,200
we are about 2,500 so it's really an

00:38:45,039 --> 00:38:52,059
explosive growth of micro services so if

00:38:50,200 --> 00:38:55,059
we want to do this migration we need to

00:38:52,059 --> 00:38:59,619
have like a proper plan so we have a

00:38:55,059 --> 00:39:01,390
plan for 2019 2020 and beyond so

00:38:59,619 --> 00:39:04,210
basically we are somewhere in the middle

00:39:01,390 --> 00:39:07,420
of that plan right now so what we did in

00:39:04,210 --> 00:39:09,309
h1 is we wanted to prove that spinnaker

00:39:07,420 --> 00:39:11,440
works so we deployed spinnaker with

00:39:09,309 --> 00:39:14,019
spinnaker we made it work with one touch

00:39:11,440 --> 00:39:15,609
and then we had a pilot project with 10

00:39:14,019 --> 00:39:18,069
services at Airbnb and we asked these

00:39:15,609 --> 00:39:22,809
folks like hey what are you what are you

00:39:18,069 --> 00:39:23,979
missing and so we basically nh-2 focused

00:39:22,809 --> 00:39:26,710
on migrating all of our critical

00:39:23,979 --> 00:39:28,809
services like our payment stack and we

00:39:26,710 --> 00:39:30,009
used ACA to reduce downtime and we also

00:39:28,809 --> 00:39:33,130
want to make sure that we can actually

00:39:30,009 --> 00:39:34,960
prove the value of spinnaker so in 2020

00:39:33,130 --> 00:39:36,640
well gee a spinnaker will be open for

00:39:34,960 --> 00:39:38,920
all services all new services will be on

00:39:36,640 --> 00:39:40,450
spinnaker and then beyond 2020 we'll

00:39:38,920 --> 00:39:43,029
kind of migrate the long tail of

00:39:40,450 --> 00:39:44,829
services so what's the wrong boarding

00:39:43,029 --> 00:39:48,640
strategy we don't want to do a force

00:39:44,829 --> 00:39:49,900
migration we basically want to show

00:39:48,640 --> 00:39:51,549
people that spinnaker is an update from

00:39:49,900 --> 00:39:54,309
the ploy board they shouldn't be feel

00:39:51,549 --> 00:39:56,469
forced to migrate and so we approach

00:39:54,309 --> 00:39:58,299
this from the side availability angle we

00:39:56,469 --> 00:40:00,249
migrated the most critical services at

00:39:58,299 --> 00:40:03,039
Airbnb and we are now proving that ACA

00:40:00,249 --> 00:40:04,329
can actually increase side uptime now

00:40:03,039 --> 00:40:06,190
that we've proven that we kind of have a

00:40:04,329 --> 00:40:08,040
mandate to move people to spinnaker

00:40:06,190 --> 00:40:09,570
because vinegar is safer than then

00:40:08,040 --> 00:40:12,090
my board so that's how we approach

00:40:09,570 --> 00:40:13,680
onboarding we also have a featured

00:40:12,090 --> 00:40:15,000
roadmap so how do we actually develop

00:40:13,680 --> 00:40:17,160
these extensions and features it's

00:40:15,000 --> 00:40:18,300
driven by customers so we reached out to

00:40:17,160 --> 00:40:20,820
teams were like what would it take for

00:40:18,300 --> 00:40:22,950
you to move to spinnaker they tell us

00:40:20,820 --> 00:40:23,970
like hey I need the snapshots view and

00:40:22,950 --> 00:40:26,010
that's how we come up with all these

00:40:23,970 --> 00:40:28,290
features that we build so some examples

00:40:26,010 --> 00:40:31,350
are people want to like get pinged

00:40:28,290 --> 00:40:33,210
personally for manual judgements the

00:40:31,350 --> 00:40:35,850
snapshots view a CA configuration has

00:40:33,210 --> 00:40:37,860
code ability to mark certain builds as

00:40:35,850 --> 00:40:41,010
broken when canary analysis failed and

00:40:37,860 --> 00:40:41,940
some other features while we're doing

00:40:41,010 --> 00:40:43,620
this we also want to prove that

00:40:41,940 --> 00:40:45,690
spinnaker is scalable so that I can

00:40:43,620 --> 00:40:46,860
actually handle our infrastructure we

00:40:45,690 --> 00:40:50,490
are probably one of the larger

00:40:46,860 --> 00:40:53,070
kubernetes enterprises on spinnaker so

00:40:50,490 --> 00:40:54,660
we built a service called dead weight so

00:40:53,070 --> 00:40:56,550
dead weight basically generates

00:40:54,660 --> 00:41:00,120
artificial kubernetes services with

00:40:56,550 --> 00:41:01,830
namespaces and with pods and we can

00:41:00,120 --> 00:41:03,600
actually then do something like hey

00:41:01,830 --> 00:41:05,820
let's do five hundred concurrent deploys

00:41:03,600 --> 00:41:08,820
with 50 ports so we can actually test

00:41:05,820 --> 00:41:09,870
spinnaker once we have those results and

00:41:08,820 --> 00:41:11,400
we'd be happy to share with the

00:41:09,870 --> 00:41:14,700
community on what we find and where the

00:41:11,400 --> 00:41:16,020
bottlenecks in spinnaker are I wouldn't

00:41:14,700 --> 00:41:17,760
say that way does it really a service

00:41:16,020 --> 00:41:21,900
it's more of a series of scripts to kind

00:41:17,760 --> 00:41:24,420
of stress test spinnaker what we also do

00:41:21,900 --> 00:41:26,520
is we want to generate sane defaults so

00:41:24,420 --> 00:41:28,710
we generate a nice default pipeline

00:41:26,520 --> 00:41:30,270
stage in Canary production and then we

00:41:28,710 --> 00:41:33,990
also give you all of the integration

00:41:30,270 --> 00:41:35,970
testing frameworks out of the box so

00:41:33,990 --> 00:41:38,100
where are we today we have 40-ish

00:41:35,970 --> 00:41:41,180
services on spinnaker we're about to GA

00:41:38,100 --> 00:41:42,870
in February we've already called 29

00:41:41,180 --> 00:41:44,580
incidents that would have been a

00:41:42,870 --> 00:41:46,830
production rollback if they had gone

00:41:44,580 --> 00:41:49,560
through and 90% of our changes on

00:41:46,830 --> 00:41:53,490
spinnaker are validated by automated

00:41:49,560 --> 00:41:55,440
canary analysis so in 2020 we'll go GA

00:41:53,490 --> 00:41:57,720
so any service will be able to onboard

00:41:55,440 --> 00:41:59,160
on to spinnaker it supports all the core

00:41:57,720 --> 00:42:01,170
features that are kind of blocking or an

00:41:59,160 --> 00:42:02,670
initial batch of customers its

00:42:01,170 --> 00:42:03,900
production ready it's been validated by

00:42:02,670 --> 00:42:06,630
debt weights so that it can actually

00:42:03,900 --> 00:42:11,310
handle a thousand services and so it has

00:42:06,630 --> 00:42:12,570
the capacity Headroom so what's next one

00:42:11,310 --> 00:42:14,280
of the challenges that we had is that

00:42:12,570 --> 00:42:16,380
continuous delivery is a culture shift

00:42:14,280 --> 00:42:18,840
so the ploy board allows you to easily

00:42:16,380 --> 00:42:21,480
deploy to a target immediately so you

00:42:18,840 --> 00:42:23,250
can go straight to prod with canary now

00:42:21,480 --> 00:42:25,680
taking an hour that kind of changes

00:42:23,250 --> 00:42:27,660
things so the workflow is longer so we

00:42:25,680 --> 00:42:30,540
need to actually teach people that slow

00:42:27,660 --> 00:42:32,369
deploys aren't necessarily bad we want

00:42:30,540 --> 00:42:33,600
to automate slow deploys so that they

00:42:32,369 --> 00:42:36,180
don't actually have to check their

00:42:33,600 --> 00:42:38,270
deployments versus like doing everything

00:42:36,180 --> 00:42:40,680
manually so that takes a bit of

00:42:38,270 --> 00:42:42,990
Education on our end to kind of like

00:42:40,680 --> 00:42:45,540
educate every developers on continuous

00:42:42,990 --> 00:42:46,859
delivery so engineers have to trust the

00:42:45,540 --> 00:42:48,510
machines rather than looking at

00:42:46,859 --> 00:42:50,700
dashboards they actually have to put

00:42:48,510 --> 00:42:51,780
trust in Cayenne tile to actually do the

00:42:50,700 --> 00:42:53,910
right thing they have to trust the

00:42:51,780 --> 00:42:55,200
integration test frameworks so we want

00:42:53,910 --> 00:42:56,460
to make sure that people actually trust

00:42:55,200 --> 00:42:58,380
the frameworks that we have and that our

00:42:56,460 --> 00:43:00,690
tooling is good enough to prevent

00:42:58,380 --> 00:43:03,240
regressions we need to make sure that we

00:43:00,690 --> 00:43:04,770
actually clearly present the benefits of

00:43:03,240 --> 00:43:07,080
canary analysis a lot of developers

00:43:04,770 --> 00:43:08,340
weren't really sure why canary analysis

00:43:07,080 --> 00:43:09,810
was better for them they were like hey

00:43:08,340 --> 00:43:11,730
why does this take an hour why can't I

00:43:09,810 --> 00:43:15,180
go straight to broad I'm sure I won't

00:43:11,730 --> 00:43:16,260
break things they did so then we were

00:43:15,180 --> 00:43:18,840
like hey you should probably adopt

00:43:16,260 --> 00:43:21,240
spinnaker and so we it's on it's on us

00:43:18,840 --> 00:43:22,590
to kind of educate people on what the

00:43:21,240 --> 00:43:24,990
benefits of spinnaker are and what the

00:43:22,590 --> 00:43:27,690
benefits of canary analysis are so what

00:43:24,990 --> 00:43:30,090
are some opportunities we have some

00:43:27,690 --> 00:43:34,350
longtail services and ec2 that might not

00:43:30,090 --> 00:43:35,850
run on kubernetes like monorail so maybe

00:43:34,350 --> 00:43:38,460
we can leverage spinnaker to deploy to

00:43:35,850 --> 00:43:39,660
ec2 but we'll have to change our mutable

00:43:38,460 --> 00:43:41,310
infrastructure to immediate bill

00:43:39,660 --> 00:43:43,950
infrastructure so that's a more long

00:43:41,310 --> 00:43:45,960
tail endeavor we want to use spinnaker

00:43:43,950 --> 00:43:49,410
as a more general workflow orchestration

00:43:45,960 --> 00:43:50,730
tool things like database migrations all

00:43:49,410 --> 00:43:52,200
of these kind of like jobs that we

00:43:50,730 --> 00:43:54,750
orchestrate spinnaker might be a good

00:43:52,200 --> 00:43:56,520
fit for that we want to build an

00:43:54,750 --> 00:43:59,310
ecosystem of stages and tools that

00:43:56,520 --> 00:44:02,040
developers at Airbnb can plug into in to

00:43:59,310 --> 00:44:05,040
spinnaker and use that like integration

00:44:02,040 --> 00:44:06,450
testing maybe we want to do chaos monkey

00:44:05,040 --> 00:44:09,060
like we really want to build an

00:44:06,450 --> 00:44:10,910
ecosystem of stages and then last but

00:44:09,060 --> 00:44:13,470
not least we have trebuchet trebuchet

00:44:10,910 --> 00:44:17,160
launches features of people it's our

00:44:13,470 --> 00:44:19,020
feature flagging system we have a lot of

00:44:17,160 --> 00:44:20,340
incidents because of trebuchet so

00:44:19,020 --> 00:44:22,800
something gets deployed but it's

00:44:20,340 --> 00:44:24,960
actually hidden behind a feature flag so

00:44:22,800 --> 00:44:27,330
what if we could roll out a feature to

00:44:24,960 --> 00:44:29,369
10 20 30 40 percent of all of our users

00:44:27,330 --> 00:44:31,020
and then use Kayenta to kind of gate

00:44:29,369 --> 00:44:34,140
those stages and do it more slowly more

00:44:31,020 --> 00:44:37,920
safely that's kind of our future

00:44:34,140 --> 00:44:39,480
plan so in conclusion so what were you

00:44:37,920 --> 00:44:41,849
learned from spinnaker so for what is

00:44:39,480 --> 00:44:42,930
our experience with spinnaker I think

00:44:41,849 --> 00:44:45,690
you should always validate your

00:44:42,930 --> 00:44:48,420
scalability Headroom we run that way

00:44:45,690 --> 00:44:50,430
that costs us a lot of AWS money but

00:44:48,420 --> 00:44:52,230
it's worth it we won't actually make

00:44:50,430 --> 00:44:54,299
sure that we can actually adopt a

00:44:52,230 --> 00:44:57,269
thousand services and don't like be on

00:44:54,299 --> 00:44:59,670
fire you need to have a good migration

00:44:57,269 --> 00:45:01,170
plan you can't just be like hey deployed

00:44:59,670 --> 00:45:02,970
bot is deprecated everyone has to use

00:45:01,170 --> 00:45:05,400
spinnaker now people will be up in arms

00:45:02,970 --> 00:45:06,480
you're changing their workflow you need

00:45:05,400 --> 00:45:08,210
to actually make sure that the tool

00:45:06,480 --> 00:45:10,680
you're bringing on is actually better

00:45:08,210 --> 00:45:12,989
usable has a good user experience is

00:45:10,680 --> 00:45:14,700
easy to configure so get buy-in from

00:45:12,989 --> 00:45:17,759
your customers don't force migrate

00:45:14,700 --> 00:45:20,220
customers have the data show them that

00:45:17,759 --> 00:45:22,170
canary analysis prevents incidents that

00:45:20,220 --> 00:45:25,769
allows you to get like buying from even

00:45:22,170 --> 00:45:27,299
like executive levels and also don't be

00:45:25,769 --> 00:45:30,660
afraid to extend spinnaker spinnaker is

00:45:27,299 --> 00:45:33,299
easily extensible it's a very easily

00:45:30,660 --> 00:45:35,489
accessible platform for city and so

00:45:33,299 --> 00:45:38,279
spinnaker doesn't fit every workflow

00:45:35,489 --> 00:45:40,619
100% so what we did at Airbnb is we kind

00:45:38,279 --> 00:45:43,829
of massaged it into working with our

00:45:40,619 --> 00:45:45,450
with our workflow that's it if you have

00:45:43,829 --> 00:45:49,130
any questions if we have time for Q&A

00:45:45,450 --> 00:45:49,130
otherwise just hit me up afterwards

00:45:51,790 --> 00:45:55,099
[Applause]

00:46:00,460 --> 00:46:06,470
so we've created users which cool anchor

00:46:04,610 --> 00:46:08,630
yes when you create the service do you

00:46:06,470 --> 00:46:10,580
consider some open source books like

00:46:08,630 --> 00:46:13,520
this okay because basically it does

00:46:10,580 --> 00:46:20,870
pretty much the same you use Jenson ed

00:46:13,520 --> 00:46:23,420
you smile and you know yeah so one

00:46:20,870 --> 00:46:24,830
thought she's using llamo also back in

00:46:23,420 --> 00:46:29,390
the day I think Jason had was still

00:46:24,830 --> 00:46:30,890
pretty immature was like pre-alpha so it

00:46:29,390 --> 00:46:33,680
wasn't really an option for us this is

00:46:30,890 --> 00:46:35,600
like a year and a half two years ago I

00:46:33,680 --> 00:46:39,890
think the reason we also use anchors we

00:46:35,600 --> 00:46:42,530
because we can really kind of use Airbnb

00:46:39,890 --> 00:46:44,900
specific constructs we can really tie it

00:46:42,530 --> 00:46:47,750
to our use case I think if we would

00:46:44,900 --> 00:46:48,590
really our spawn it these days it

00:46:47,750 --> 00:46:51,080
probably would have been a good

00:46:48,590 --> 00:46:53,240
candidate but back in the time it seemed

00:46:51,080 --> 00:47:07,430
like a good option for us to to write a

00:46:53,240 --> 00:47:09,800
command line tool ourselves generates a

00:47:07,430 --> 00:47:11,990
bunch of Airbnb specific stuff I think

00:47:09,800 --> 00:47:13,970
the general kind of like framework of

00:47:11,990 --> 00:47:15,860
like configuring stages as yama or we

00:47:13,970 --> 00:47:17,330
could open source um I don't know if

00:47:15,860 --> 00:47:19,100
there would be much traction given that

00:47:17,330 --> 00:47:22,090
tools already exist but it's something

00:47:19,100 --> 00:47:22,090
we can consider

00:47:28,410 --> 00:47:30,470

YouTube URL: https://www.youtube.com/watch?v=iO21ZS_uRWQ


