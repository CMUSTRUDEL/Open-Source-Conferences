Title: Cameron Motevasselani "Secrets Management with Spinnaker (Armory)" - Spinnaker Summit 2019
Publication date: 2019-12-03
Playlist: Spinnaker Summit 2019
Description: 
	The third annual Spinnaker Summit (Diamond Sponsors: Netflix, Google and Armory) was held at the Hard Rock Hotel in San Diego, CA from November 15-17, 2019 and welcomed over 500 members of the rapidly growing Spinnaker open source community.
Captions: 
	00:00:00,030 --> 00:00:03,179
alright hey everyone I'm Cameron no tuvo

00:00:02,669 --> 00:00:04,950
Salani

00:00:03,179 --> 00:00:08,460
I'm a software engineer over here at

00:00:04,950 --> 00:00:11,190
armory I'm also the co-lead for the

00:00:08,460 --> 00:00:13,530
platform cig so today we're gonna be

00:00:11,190 --> 00:00:16,490
talking about secrets management a topic

00:00:13,530 --> 00:00:19,500
I'm sure we're all excited to hear about

00:00:16,490 --> 00:00:22,050
so so secrets what what are those

00:00:19,500 --> 00:00:23,930
because you know we talk about secrets

00:00:22,050 --> 00:00:26,849
but they could be many different things

00:00:23,930 --> 00:00:30,810
so secrets can be things such as

00:00:26,849 --> 00:00:32,700
passwords in in the case of spinnaker

00:00:30,810 --> 00:00:36,030
we're talking about items such as

00:00:32,700 --> 00:00:39,899
Jenkins Jenkins passwords and your

00:00:36,030 --> 00:00:43,260
configs for tokens we have slack tokens

00:00:39,899 --> 00:00:47,010
and our configs there's also keys like

00:00:43,260 --> 00:00:50,460
as three secret access keys and files as

00:00:47,010 --> 00:00:52,320
well such as Cupid chief config files so

00:00:50,460 --> 00:00:56,280
there's a few different types of secrets

00:00:52,320 --> 00:00:58,500
that we deal with as DevOps people right

00:00:56,280 --> 00:00:59,550
so there's application secrets and those

00:00:58,500 --> 00:01:01,469
are things such as like database

00:00:59,550 --> 00:01:03,780
credentials there's also spinnaker

00:01:01,469 --> 00:01:05,600
secrets and those are secrets for more

00:01:03,780 --> 00:01:09,479
like managing the infrastructure

00:01:05,600 --> 00:01:10,799
accessing the code etc these are the

00:01:09,479 --> 00:01:12,350
keys to your kingdom and that's what

00:01:10,799 --> 00:01:15,750
we're gonna be talking about today is

00:01:12,350 --> 00:01:17,939
spinnaker secrets so just to clear that

00:01:15,750 --> 00:01:22,409
up not application secrets this is

00:01:17,939 --> 00:01:24,420
spinnaker secrets so what's the

00:01:22,409 --> 00:01:27,860
motivation behind wanting to do secrets

00:01:24,420 --> 00:01:30,390
management right now you can have your

00:01:27,860 --> 00:01:33,829
secrets in your configs and plain texts

00:01:30,390 --> 00:01:37,500
like what's wrong with that right well

00:01:33,829 --> 00:01:39,990
these guys if a malicious actor gets

00:01:37,500 --> 00:01:42,090
access to your how configs or your your

00:01:39,990 --> 00:01:44,310
spinnaker configs then they have the

00:01:42,090 --> 00:01:46,409
keys to your kingdom as well they can do

00:01:44,310 --> 00:01:48,390
anything that spinor spinnaker can do

00:01:46,409 --> 00:01:49,799
and spinnaker does a lot of stuff it

00:01:48,390 --> 00:01:52,290
touches a lot of different parts of your

00:01:49,799 --> 00:01:55,439
system they can take down your systems

00:01:52,290 --> 00:01:56,759
they can lock you out of accounts even

00:01:55,439 --> 00:01:58,890
worse they can add their own services

00:01:56,759 --> 00:02:00,899
and augment existing ones right so

00:01:58,890 --> 00:02:02,070
that's your service is still up and

00:02:00,899 --> 00:02:06,350
running how are you going to know if

00:02:02,070 --> 00:02:06,350
it's it's not doing a great job

00:02:08,289 --> 00:02:12,510
so another motivation is this term

00:02:11,230 --> 00:02:17,189
called get ops

00:02:12,510 --> 00:02:20,530
it's a portmanteau of git and operations

00:02:17,189 --> 00:02:24,519
who would have thought right but what

00:02:20,530 --> 00:02:28,090
exactly is get ops does anyone have a

00:02:24,519 --> 00:02:30,599
solid guess or have like they know what

00:02:28,090 --> 00:02:35,409
good Ops is can I see a raise of hands

00:02:30,599 --> 00:02:37,959
right exactly DevOps or get ops kind of

00:02:35,409 --> 00:02:40,000
similar to DevOps there was no clear

00:02:37,959 --> 00:02:41,739
definition at first and there still

00:02:40,000 --> 00:02:43,480
isn't I think over time will slowly

00:02:41,739 --> 00:02:45,099
converge to a definition of what get Ops

00:02:43,480 --> 00:02:47,319
is but I've seen so many different

00:02:45,099 --> 00:02:50,639
definitions online about what people

00:02:47,319 --> 00:02:53,260
think it is and what it's used for etc

00:02:50,639 --> 00:02:57,519
for today though we're gonna be talking

00:02:53,260 --> 00:03:00,159
about declarative declarative Mis let's

00:02:57,519 --> 00:03:02,670
say in the case of spinnaker we're

00:03:00,159 --> 00:03:05,819
talking about infrastructure as code so

00:03:02,670 --> 00:03:13,660
gamal describes the desired state of

00:03:05,819 --> 00:03:15,400
your installation so again we today

00:03:13,660 --> 00:03:17,980
we're gonna be talking about desired

00:03:15,400 --> 00:03:20,260
state stored in source control and what

00:03:17,980 --> 00:03:22,120
we really want to use git ops port is we

00:03:20,260 --> 00:03:26,040
want to enable operations to manage

00:03:22,120 --> 00:03:26,040
their infrastructure via pull requests

00:03:26,489 --> 00:03:35,650
why why why is that so great right if

00:03:32,620 --> 00:03:40,750
you can do a pull request and you can

00:03:35,650 --> 00:03:42,849
have extra insight or extra oversight

00:03:40,750 --> 00:03:47,430
let's say into the work that you're

00:03:42,849 --> 00:03:50,709
doing it helps reduce fat fingering etc

00:03:47,430 --> 00:03:52,090
and why can't we do this today as I said

00:03:50,709 --> 00:03:53,620
secrets would be in plain text in your

00:03:52,090 --> 00:03:56,590
configuration so you could store your

00:03:53,620 --> 00:03:58,480
configs and get today and just do this

00:03:56,590 --> 00:04:00,639
but again your secrets are in plain text

00:03:58,480 --> 00:04:03,220
there's many horror stories online of

00:04:00,639 --> 00:04:06,220
people's he's being leaked and there are

00:04:03,220 --> 00:04:09,639
improvements in this area like AWS and

00:04:06,220 --> 00:04:11,620
get up they you know scan PRS or scan

00:04:09,639 --> 00:04:13,329
commits and say hey that we found this

00:04:11,620 --> 00:04:16,299
access key we're gonna revoke hit a

00:04:13,329 --> 00:04:18,099
tetrad cetera this causes interruption

00:04:16,299 --> 00:04:21,340
and services and it's not not a great

00:04:18,099 --> 00:04:22,070
thing it can also cause loss of profit

00:04:21,340 --> 00:04:24,920
as well as

00:04:22,070 --> 00:04:26,810
mutation hit if you're working in

00:04:24,920 --> 00:04:29,270
certain industries especially like

00:04:26,810 --> 00:04:32,050
security or financial tack this is not a

00:04:29,270 --> 00:04:37,270
good thing

00:04:32,050 --> 00:04:37,270
so before secrets management

00:04:37,870 --> 00:04:45,640
there were workarounds right so how do

00:04:42,380 --> 00:04:48,650
you want to store your secrets or the

00:04:45,640 --> 00:04:50,450
safely store your secrets let's say you

00:04:48,650 --> 00:04:52,820
could check your whole how config your

00:04:50,450 --> 00:04:56,360
whole config file into vaults or s3 in a

00:04:52,820 --> 00:05:00,010
protected bucket right so that that

00:04:56,360 --> 00:05:02,450
works it does not enable get-ups right

00:05:00,010 --> 00:05:05,810
it also has some other issues that we'll

00:05:02,450 --> 00:05:08,210
talk about in a sec you can also keep

00:05:05,810 --> 00:05:11,480
your how configs on a laptop and have

00:05:08,210 --> 00:05:12,710
the secrets on a trusted laptop but then

00:05:11,480 --> 00:05:16,130
you need to share them at some point

00:05:12,710 --> 00:05:17,360
because you don't want your one person

00:05:16,130 --> 00:05:18,620
to have the secrets on their laptop and

00:05:17,360 --> 00:05:22,010
now they're a single point of failure

00:05:18,620 --> 00:05:24,620
they leave the company they become not

00:05:22,010 --> 00:05:26,690
very happy let's say you can be in a

00:05:24,620 --> 00:05:29,150
world of hurt

00:05:26,690 --> 00:05:31,730
you can also fat-finger config value so

00:05:29,150 --> 00:05:33,620
you're typing in you know copying and

00:05:31,730 --> 00:05:35,990
pasting a password maybe you

00:05:33,620 --> 00:05:37,280
accidentally hit another V or something

00:05:35,990 --> 00:05:39,790
when you're trying to paste and now

00:05:37,280 --> 00:05:42,470
guess what your deploy is gonna fail

00:05:39,790 --> 00:05:46,070
hopefully you have automated rollbacks

00:05:42,470 --> 00:05:48,110
in place so and as well how do you

00:05:46,070 --> 00:05:50,450
ensure the file is actually removed from

00:05:48,110 --> 00:05:52,040
the laptop after it's being used you

00:05:50,450 --> 00:05:54,650
know you keep doing this and all of a

00:05:52,040 --> 00:05:56,720
sudden you have the configs with all

00:05:54,650 --> 00:05:59,600
these secrets in them spread across all

00:05:56,720 --> 00:06:02,930
your your users laptops your director

00:05:59,600 --> 00:06:05,240
operators laptops let's say you could

00:06:02,930 --> 00:06:06,560
use the USB Drive right that that's kind

00:06:05,240 --> 00:06:10,070
of cool that's an easy way of sharing it

00:06:06,560 --> 00:06:12,380
it's just on the drive and you can make

00:06:10,070 --> 00:06:14,960
updates right there and like you can

00:06:12,380 --> 00:06:16,580
easily share it but it would be really

00:06:14,960 --> 00:06:21,560
bad if it got in the hands of malicious

00:06:16,580 --> 00:06:23,420
actors you can check in the config with

00:06:21,560 --> 00:06:26,420
secrets and to get repost like we

00:06:23,420 --> 00:06:32,720
discussed if you want to do that I mean

00:06:26,420 --> 00:06:34,190
make sure it's private you don't you do

00:06:32,720 --> 00:06:35,090
you want to make sure it stays private

00:06:34,190 --> 00:06:37,340
let's

00:06:35,090 --> 00:06:40,760
so if you're getting repos ever not

00:06:37,340 --> 00:06:42,910
private your keys are exposed this also

00:06:40,760 --> 00:06:45,590
does not protect against insider threats

00:06:42,910 --> 00:06:49,730
bad actors that are internal to your and

00:06:45,590 --> 00:06:51,950
your company as well you can pull down

00:06:49,730 --> 00:06:54,200
the repo and guess what this is the same

00:06:51,950 --> 00:06:56,180
exact thing as pulling down there like

00:06:54,200 --> 00:06:58,130
storing your how config in vault or s3

00:06:56,180 --> 00:07:00,560
where you need to pull down the repo and

00:06:58,130 --> 00:07:04,070
then now it's again on everyone's laptop

00:07:00,560 --> 00:07:07,460
is it secure is your laptop secure and

00:07:04,070 --> 00:07:10,190
are your co-workers laptop secure I hope

00:07:07,460 --> 00:07:11,690
mine are you can also use the net

00:07:10,190 --> 00:07:14,090
containers to pull down secrets and

00:07:11,690 --> 00:07:16,160
write the secrets to a volume out or

00:07:14,090 --> 00:07:17,990
source them in as environment variables

00:07:16,160 --> 00:07:20,180
and you know this is not actually a bad

00:07:17,990 --> 00:07:23,740
solution if you use halyard you'd have

00:07:20,180 --> 00:07:26,450
to add configs with the - - no validate

00:07:23,740 --> 00:07:28,900
option so then you're kind of missing

00:07:26,450 --> 00:07:31,610
out on the validation of your of your

00:07:28,900 --> 00:07:34,070
configurations this is also a good

00:07:31,610 --> 00:07:36,740
amount of extra work you need to

00:07:34,070 --> 00:07:38,210
maintain it etc and this is non-standard

00:07:36,740 --> 00:07:41,420
so everyone will come up with their own

00:07:38,210 --> 00:07:48,380
solution and not be able to share best

00:07:41,420 --> 00:07:56,030
practices as easily cool so let's talk

00:07:48,380 --> 00:07:57,680
about how it works so what we see a lot

00:07:56,030 --> 00:08:00,350
of the time is secrets are generally

00:07:57,680 --> 00:08:04,180
created out-of-band you don't create

00:08:00,350 --> 00:08:06,890
secrets through spinnaker or you don't

00:08:04,180 --> 00:08:08,060
you don't create secrets and put them

00:08:06,890 --> 00:08:10,790
directly in your house and fake they're

00:08:08,060 --> 00:08:17,390
stored somewhere else stored in either

00:08:10,790 --> 00:08:18,920
like s3 GCS vaults etc so what we want

00:08:17,390 --> 00:08:20,030
to do with secrets management is rather

00:08:18,920 --> 00:08:22,580
than having their secrets in your

00:08:20,030 --> 00:08:26,750
configurations you reference the secrets

00:08:22,580 --> 00:08:28,220
in your how config so secrets like we

00:08:26,750 --> 00:08:29,840
discussed a little bit earlier they can

00:08:28,220 --> 00:08:33,800
be many different things they can be

00:08:29,840 --> 00:08:36,140
just strings keys tokens passwords but

00:08:33,800 --> 00:08:39,110
they can also be files so we need to

00:08:36,140 --> 00:08:41,479
treat them a little bit differently in

00:08:39,110 --> 00:08:45,710
our current solution that we'll discuss

00:08:41,479 --> 00:08:47,750
soon you don't have too much ability to

00:08:45,710 --> 00:08:48,410
choose whether you want your secret to

00:08:47,750 --> 00:08:53,810
be

00:08:48,410 --> 00:08:55,100
file versus a versus a strain but we're

00:08:53,810 --> 00:08:59,930
making improvements there and we'll

00:08:55,100 --> 00:09:03,920
discuss this in a sec our solution as

00:08:59,930 --> 00:09:06,260
well when we deploy secrets with secrets

00:09:03,920 --> 00:09:08,600
management the spinnaker services

00:09:06,260 --> 00:09:14,960
decrypt the secrets themselves and the

00:09:08,600 --> 00:09:17,420
secrets are stored in memory only so

00:09:14,960 --> 00:09:21,830
this is the secret format that we have

00:09:17,420 --> 00:09:25,040
today you can reference files and you

00:09:21,830 --> 00:09:27,590
can also reference keys in a file so so

00:09:25,040 --> 00:09:30,560
what's the difference here for a cube

00:09:27,590 --> 00:09:35,030
config file you will want to reference

00:09:30,560 --> 00:09:37,130
the file itself for if you have a let's

00:09:35,030 --> 00:09:41,180
say yeah mole that's stored in your

00:09:37,130 --> 00:09:46,430
vault or s3 you can reference certain

00:09:41,180 --> 00:09:50,720
keys in that file as well so if we see

00:09:46,430 --> 00:09:53,500
up here you can see that our format is

00:09:50,720 --> 00:09:56,740
prepended with encrypted and then the

00:09:53,500 --> 00:10:01,820
each key value pair is delimited with a

00:09:56,740 --> 00:10:04,610
bang and separated with a colon so we

00:10:01,820 --> 00:10:07,580
have encrypted in the secret store then

00:10:04,610 --> 00:10:10,580
for in the case of s3 we have fields

00:10:07,580 --> 00:10:12,860
region bucket in the path to the file in

00:10:10,580 --> 00:10:16,100
that bucket if you want to reference a

00:10:12,860 --> 00:10:23,630
key in that file you would add that

00:10:16,100 --> 00:10:28,100
option as well so given a file that's in

00:10:23,630 --> 00:10:30,230
s3 located in US west - which is I guess

00:10:28,100 --> 00:10:34,310
now a thing you have to say what region

00:10:30,230 --> 00:10:36,830
your buckets in and this is the location

00:10:34,310 --> 00:10:40,550
for the file

00:10:36,830 --> 00:10:42,140
s3 my bucket my acute config then you

00:10:40,550 --> 00:10:47,990
would reference the content of the file

00:10:42,140 --> 00:10:49,760
with encrypted s3 bang etc etc this is

00:10:47,990 --> 00:10:55,100
like a concrete example of how you would

00:10:49,760 --> 00:10:57,470
reference the secret file in s3 and

00:10:55,100 --> 00:10:59,780
depending on what the encrypted secret

00:10:57,470 --> 00:11:02,000
is being used for spinnaker services

00:10:59,780 --> 00:11:05,990
might download the secret as a file or

00:11:02,000 --> 00:11:08,410
use the contents as a value so this was

00:11:05,990 --> 00:11:10,730
an iterative process at first we

00:11:08,410 --> 00:11:11,180
implemented secrets management just and

00:11:10,730 --> 00:11:14,750
halyard

00:11:11,180 --> 00:11:17,270
so halyard would upon deploy download

00:11:14,750 --> 00:11:19,400
the secrets and deploy them in plaintext

00:11:17,270 --> 00:11:21,500
on to the services it would not store

00:11:19,400 --> 00:11:25,370
them locally and just deploy them again

00:11:21,500 --> 00:11:26,750
in plain text on the services so the

00:11:25,370 --> 00:11:29,420
reason being is old some older versions

00:11:26,750 --> 00:11:32,570
of spinnaker would not they didn't have

00:11:29,420 --> 00:11:34,130
the ability to decrypt services so

00:11:32,570 --> 00:11:35,420
halyard again hired would decrypt and

00:11:34,130 --> 00:11:36,950
then lay down the secrets on their

00:11:35,420 --> 00:11:38,960
respective services so it doesn't lay

00:11:36,950 --> 00:11:40,960
down the secrets on every single service

00:11:38,960 --> 00:11:43,850
it's only on the services that need them

00:11:40,960 --> 00:11:46,370
secrets exist on disk it's not the best

00:11:43,850 --> 00:11:48,290
it's not the worst but you know if your

00:11:46,370 --> 00:11:52,190
service has ever compromised that that's

00:11:48,290 --> 00:11:54,890
just not a good thing currently in

00:11:52,190 --> 00:11:56,960
today's world services are able to

00:11:54,890 --> 00:11:59,350
decrypt secrets on their own and the

00:11:56,960 --> 00:12:02,330
secrets are stored in memory not on disk

00:11:59,350 --> 00:12:05,090
halyard still has the ability to decrypt

00:12:02,330 --> 00:12:07,400
secrets and it does for validation

00:12:05,090 --> 00:12:13,040
purposes it doesn't store the secrets on

00:12:07,400 --> 00:12:15,920
disk though so we have a couple

00:12:13,040 --> 00:12:19,100
supported secret stores we have GCS as

00:12:15,920 --> 00:12:22,880
well as Amazon s3 please reach out to us

00:12:19,100 --> 00:12:24,290
at armory slash is have contact the army

00:12:22,880 --> 00:12:26,030
channel in spinnaker slack I also

00:12:24,290 --> 00:12:28,430
created a secrets at arm read on i/o

00:12:26,030 --> 00:12:31,220
email address so we want to see what

00:12:28,430 --> 00:12:33,040
secret stories you guys want added since

00:12:31,220 --> 00:12:35,680
this solution is easily extensible

00:12:33,040 --> 00:12:38,750
anyone could add another backing store

00:12:35,680 --> 00:12:44,240
talk to me if you guys want to talk

00:12:38,750 --> 00:12:46,700
about that a little bit more we're not

00:12:44,240 --> 00:12:49,970
the first people to do this type of work

00:12:46,700 --> 00:12:53,660
there's examples than other projects as

00:12:49,970 --> 00:12:57,770
well some of our inspiration came in the

00:12:53,660 --> 00:13:00,890
form of prior art so both Amazon s3 and

00:12:57,770 --> 00:13:03,260
vaults you've referenced secrets in very

00:13:00,890 --> 00:13:04,730
similar ways rather than talking about

00:13:03,260 --> 00:13:07,720
the secret itself you referenced the

00:13:04,730 --> 00:13:07,720
location of the secret

00:13:09,420 --> 00:13:13,820
all right so let's do a quick demo and

00:13:16,100 --> 00:13:29,670
apologies it's not a live demo this is

00:13:18,420 --> 00:13:33,960
pre-recorded so oh it's a little hard to

00:13:29,670 --> 00:13:36,600
see with the light apologies for that on

00:13:33,960 --> 00:13:40,680
the right side of the screen I'm doing a

00:13:36,600 --> 00:13:43,560
watch on the cube config namespace I'm

00:13:40,680 --> 00:13:45,930
doing Cube control get pods for a

00:13:43,560 --> 00:13:49,620
namespace that doesn't exist yet on the

00:13:45,930 --> 00:13:51,210
left side I'm using the armory halyard

00:13:49,620 --> 00:13:55,620
install you Installer in order to

00:13:51,210 --> 00:13:57,600
quickly set up spinnaker so I'm going

00:13:55,620 --> 00:14:00,060
through giving my email address telling

00:13:57,600 --> 00:14:03,300
it what namespace to use where what s3

00:14:00,060 --> 00:14:05,730
bucket I want to store mic configs and

00:14:03,300 --> 00:14:16,110
everything in or rather for front 50 to

00:14:05,730 --> 00:14:18,450
use etc etc soon we'll start seeing

00:14:16,110 --> 00:14:21,540
great spinnaker is now deploying

00:14:18,450 --> 00:14:25,590
resources and we can see the pods come

00:14:21,540 --> 00:14:29,460
up soon awesome we can see all our pods

00:14:25,590 --> 00:14:30,720
coming up this is actually not that

00:14:29,460 --> 00:14:33,290
exciting so I'm going to fast forward

00:14:30,720 --> 00:14:33,290
just a little bit

00:14:42,710 --> 00:14:49,850
has anyone used the halyard armory

00:14:45,500 --> 00:14:54,649
installer here we've got one down there

00:14:49,850 --> 00:14:56,420
nice cool so as we see we're just

00:14:54,649 --> 00:15:00,440
waiting for echo to start up and then

00:14:56,420 --> 00:15:02,750
once that's up we'll update our how come

00:15:00,440 --> 00:15:06,589
in or how config is in order to add

00:15:02,750 --> 00:15:10,370
secrets so let's check it out so what

00:15:06,589 --> 00:15:12,589
I'm doing here and I highly recommend

00:15:10,370 --> 00:15:15,170
doing this when making edits to your

00:15:12,589 --> 00:15:17,839
howl config if you're not doing a get

00:15:15,170 --> 00:15:21,260
off swaddle I I'm just just doing this

00:15:17,839 --> 00:15:23,930
for my laptop so I CD into the my pal

00:15:21,260 --> 00:15:27,110
directory and I do a get in it I'm not

00:15:23,930 --> 00:15:30,560
doing this to create a remote repository

00:15:27,110 --> 00:15:32,480
this is just for a local gate so i'm

00:15:30,560 --> 00:15:36,910
committing all of the files that i have

00:15:32,480 --> 00:15:38,870
created from this initial deployment

00:15:36,910 --> 00:15:40,700
cool so you can see there's a bunch of

00:15:38,870 --> 00:15:44,540
files that have been created these are

00:15:40,700 --> 00:15:47,270
all in staging directory as well as just

00:15:44,540 --> 00:15:49,400
the config so halyard has split up all

00:15:47,270 --> 00:15:55,089
the configs and will then deploy them to

00:15:49,400 --> 00:15:57,709
the necessary resources all right so

00:15:55,089 --> 00:15:59,360
what am i doing here I'm now going to

00:15:57,709 --> 00:16:01,040
copy the coupon fig file that was

00:15:59,360 --> 00:16:02,839
generated or rather mike-mike heap

00:16:01,040 --> 00:16:07,360
config file and I'm gonna copy that to

00:16:02,839 --> 00:16:07,360
an s3 bucket that I previously created

00:16:26,090 --> 00:16:32,180
right so copying that file over was the

00:16:29,030 --> 00:16:35,230
success and now I'm going to update some

00:16:32,180 --> 00:16:36,410
of the config values in my cute config

00:16:35,230 --> 00:16:38,540
sorry

00:16:36,410 --> 00:16:40,940
in my howl config file I don't actually

00:16:38,540 --> 00:16:42,620
want to show you I don't want to show

00:16:40,940 --> 00:16:44,810
you my how config because it does have

00:16:42,620 --> 00:16:52,160
my secret access key in there as well as

00:16:44,810 --> 00:16:52,820
my cube config location it's actually

00:16:52,160 --> 00:16:58,130
not that bad

00:16:52,820 --> 00:17:03,050
to share well so I paid the cube config

00:16:58,130 --> 00:17:05,810
location to be in the in my s3 bucket so

00:17:03,050 --> 00:17:08,420
encrypted s3 write the region's us bus

00:17:05,810 --> 00:17:12,440
to bucket is my cameron secrets test and

00:17:08,420 --> 00:17:13,820
this is the file itself i'm doing the

00:17:12,440 --> 00:17:18,080
same with the secret access key i'm

00:17:13,820 --> 00:17:24,860
referencing the file that contains my

00:17:18,080 --> 00:17:26,870
secret access key cool so as you can see

00:17:24,860 --> 00:17:30,830
the only change right now has been in my

00:17:26,870 --> 00:17:34,460
config and you can we can see that when

00:17:30,830 --> 00:17:36,290
i grep for additions my keep config has

00:17:34,460 --> 00:17:38,470
been updated as well as my secret access

00:17:36,290 --> 00:17:38,470
key

00:17:46,370 --> 00:17:53,940
not even see so I'm doing a how deploy

00:17:49,049 --> 00:17:56,879
apply and applying my changes to the

00:17:53,940 --> 00:17:59,700
cluster what how deploy does is it will

00:17:56,879 --> 00:18:02,820
take my configs and then make changes to

00:17:59,700 --> 00:18:08,700
all the files in staging and then deploy

00:18:02,820 --> 00:18:11,210
those to the services great so that that

00:18:08,700 --> 00:18:12,659
went well now let's check out the

00:18:11,210 --> 00:18:14,789
results

00:18:12,659 --> 00:18:17,460
this is why I did they get an it and

00:18:14,789 --> 00:18:21,240
committed the initial files I want to

00:18:17,460 --> 00:18:22,799
see the differences now cool so we can

00:18:21,240 --> 00:18:25,110
see now there's a bunch of files that

00:18:22,799 --> 00:18:28,080
have been changed even though I just

00:18:25,110 --> 00:18:31,249
changed to two values and my configs

00:18:28,080 --> 00:18:31,249
those are used in different places

00:18:37,030 --> 00:18:41,570
cool again I just want to show you the

00:18:39,140 --> 00:18:43,340
additions in my get config and nothing

00:18:41,570 --> 00:18:47,240
has changed since I ran the how to play

00:18:43,340 --> 00:18:54,020
apply let's check out the other other

00:18:47,240 --> 00:18:57,770
files though yes also note that my cube

00:18:54,020 --> 00:19:06,530
config on my local host has been deleted

00:18:57,770 --> 00:19:08,240
there's no reason for it to be there and

00:19:06,530 --> 00:19:10,970
then let's check out the front one of

00:19:08,240 --> 00:19:13,400
the front 50 files and again grep grep

00:19:10,970 --> 00:19:16,070
for the plus and you can see this is

00:19:13,400 --> 00:19:18,380
this is what's laid down on on front 50

00:19:16,070 --> 00:19:22,600
and the file it's just a reference to

00:19:18,380 --> 00:19:22,600
the secret again it's not stored on disk

00:19:23,560 --> 00:19:38,630
and that's the end of the demo alright

00:19:34,700 --> 00:19:40,190
so back back to get ops secrets

00:19:38,630 --> 00:19:42,050
management essentially enables get ups

00:19:40,190 --> 00:19:43,820
so by removing secrets from config files

00:19:42,050 --> 00:19:47,390
you can safely store your configs and

00:19:43,820 --> 00:19:48,290
get you can review changes via API the

00:19:47,390 --> 00:19:50,150
more is better

00:19:48,290 --> 00:19:52,340
right this can also help with compliance

00:19:50,150 --> 00:19:54,320
you have multiple people touching and

00:19:52,340 --> 00:19:55,610
checking each other's work right so one

00:19:54,320 --> 00:19:59,180
person makes the secrets

00:19:55,610 --> 00:20:00,410
one person reviews adds the the

00:19:59,180 --> 00:20:03,470
reference to the secret another person

00:20:00,410 --> 00:20:05,030
who proves it so this is this

00:20:03,470 --> 00:20:06,560
essentially enables separation of

00:20:05,030 --> 00:20:08,300
responsibilities you can actually have

00:20:06,560 --> 00:20:10,130
different teams creating secrets and

00:20:08,300 --> 00:20:11,900
then just giving you references to them

00:20:10,130 --> 00:20:13,700
this lowers the number of people with

00:20:11,900 --> 00:20:17,480
access to the keys to the kingdom this

00:20:13,700 --> 00:20:19,160
is important so spinnaker is great for

00:20:17,480 --> 00:20:22,070
good ops you can actually use spinnaker

00:20:19,160 --> 00:20:24,410
to deploy spinnaker this is not quite

00:20:22,070 --> 00:20:27,320
easy to do but it's really badass if you

00:20:24,410 --> 00:20:32,420
can do it pipeline triggers from commits

00:20:27,320 --> 00:20:34,010
PRS will then trigger well will trigger

00:20:32,420 --> 00:20:37,700
the pipeline to be deployed the service

00:20:34,010 --> 00:20:40,310
in question cool so what are the next

00:20:37,700 --> 00:20:42,650
steps so possible future enhancements

00:20:40,310 --> 00:20:44,000
the token refresh so right rather than

00:20:42,650 --> 00:20:45,770
having to write a sidecar something to

00:20:44,000 --> 00:20:47,570
refresh your secrets each secret service

00:20:45,770 --> 00:20:49,369
should be able to refresh there

00:20:47,570 --> 00:20:50,960
tokens this is not something that exists

00:20:49,369 --> 00:20:53,269
today but it is something that I would

00:20:50,960 --> 00:20:54,350
really like to see myself more secret

00:20:53,269 --> 00:20:56,450
store support as well

00:20:54,350 --> 00:20:57,919
GCS and that's three are great but it

00:20:56,450 --> 00:21:02,210
would be awesome to see more

00:20:57,919 --> 00:21:04,249
where does backing stores I put

00:21:02,210 --> 00:21:05,659
encrypting secrets via halyard I

00:21:04,249 --> 00:21:08,299
actually don't think this is a great

00:21:05,659 --> 00:21:09,950
idea but I I don't really know how

00:21:08,299 --> 00:21:11,479
people are gonna use this so it's great

00:21:09,950 --> 00:21:12,979
to get feedback and input from the

00:21:11,479 --> 00:21:16,489
community so that we can build the right

00:21:12,979 --> 00:21:18,259
solution it might be kind of cool to add

00:21:16,489 --> 00:21:23,359
secrets into kubernetes secrets so that

00:21:18,259 --> 00:21:26,149
we're not having to add references to

00:21:23,359 --> 00:21:29,450
the the configs as much and they can use

00:21:26,149 --> 00:21:31,159
kubernetes primitives in order to manage

00:21:29,450 --> 00:21:35,389
the secrets so please let us know if you

00:21:31,159 --> 00:21:39,529
have other use cases and secure secrets

00:21:35,389 --> 00:21:41,320
today we have some frequently asked

00:21:39,529 --> 00:21:43,580
questions and alternate solutions

00:21:41,320 --> 00:21:46,129
apologies i think we got started a

00:21:43,580 --> 00:21:48,919
little late as well so kind of rushing

00:21:46,129 --> 00:21:51,679
through this so how does our back play

00:21:48,919 --> 00:21:55,639
into this so hired and spinnaker

00:21:51,679 --> 00:21:57,349
services need the correct roles in order

00:21:55,639 --> 00:21:58,820
to read from the secret store this is

00:21:57,349 --> 00:22:01,779
kind of what's known as the first

00:21:58,820 --> 00:22:03,889
secrets problem how do you how do you

00:22:01,779 --> 00:22:07,429
access your secret store without a

00:22:03,889 --> 00:22:11,330
secret well it's got to be somewhere now

00:22:07,429 --> 00:22:13,099
we have kubernetes and AWS and Google

00:22:11,330 --> 00:22:14,929
Cloud and they they provide roles and

00:22:13,099 --> 00:22:19,820
since they manage the infrastructure

00:22:14,929 --> 00:22:21,349
they have a strong identity so how

00:22:19,820 --> 00:22:23,869
why does high your name access to

00:22:21,349 --> 00:22:25,659
decrypted secrets as we mentioned early

00:22:23,869 --> 00:22:29,809
it's to perform account validation

00:22:25,659 --> 00:22:32,960
deploy two clusters etc if Tyler does

00:22:29,809 --> 00:22:37,129
not have the cube config file well it

00:22:32,960 --> 00:22:38,690
can't deploy to your cluster right and

00:22:37,129 --> 00:22:41,330
again how your stores values in memory

00:22:38,690 --> 00:22:44,049
or as temporary files and then they're

00:22:41,330 --> 00:22:47,779
removed like you saw in the in the demo

00:22:44,049 --> 00:22:49,909
so what about the staging directory like

00:22:47,779 --> 00:22:51,499
we saw in the demo again how it only

00:22:49,909 --> 00:22:53,629
writes the encrypted secrets to the

00:22:51,499 --> 00:22:57,440
staging directory even if it doesn't

00:22:53,629 --> 00:22:59,629
decrypt it for validation purposes then

00:22:57,440 --> 00:23:01,680
what about rollbacks so if you've

00:22:59,629 --> 00:23:04,140
installed spinnaker in kubernetes

00:23:01,680 --> 00:23:05,640
configs are versioned it does not roll

00:23:04,140 --> 00:23:07,740
back the secrets that are referenced

00:23:05,640 --> 00:23:09,930
though right so if you have a secret in

00:23:07,740 --> 00:23:16,440
s3 snicker is not going to go and roll

00:23:09,930 --> 00:23:18,900
back that that secret what are alternate

00:23:16,440 --> 00:23:21,410
solutions spring cloud can fix server is

00:23:18,900 --> 00:23:24,720
another alternate solution to this to

00:23:21,410 --> 00:23:27,240
the secrets management solution that's

00:23:24,720 --> 00:23:29,820
in spinnaker right now not all services

00:23:27,240 --> 00:23:30,270
are supported with a spring cloud config

00:23:29,820 --> 00:23:33,150
server

00:23:30,270 --> 00:23:36,720
I believe it's cloud driver echo and

00:23:33,150 --> 00:23:38,760
Igor halyard can still validate configs

00:23:36,720 --> 00:23:40,770
though with this solution and it does

00:23:38,760 --> 00:23:41,160
integrate with many services out of the

00:23:40,770 --> 00:23:47,550
box

00:23:41,160 --> 00:23:57,920
vault get etc alright do we have any

00:23:47,550 --> 00:24:01,650
questions yes sorry one sec have I

00:23:57,920 --> 00:24:04,290
missed if you explained how it's being

00:24:01,650 --> 00:24:07,170
encrypted it's stored on the s3 bucket

00:24:04,290 --> 00:24:16,320
encrypted or just plain text file the s3

00:24:07,170 --> 00:24:17,550
plain text file in s3 support kms not

00:24:16,320 --> 00:24:19,590
currently but that would I mean that

00:24:17,550 --> 00:24:22,320
would be a great yeah that would be a

00:24:19,590 --> 00:24:27,270
great addition to it I could please a

00:24:22,320 --> 00:24:29,290
reach out and add that please any other

00:24:27,270 --> 00:24:31,580
question

00:24:29,290 --> 00:24:35,660
by the way there's a security sig

00:24:31,580 --> 00:24:38,360
channel and OSS slack I'm in there so

00:24:35,660 --> 00:24:41,570
and we have another guy Brandon here at

00:24:38,360 --> 00:24:43,340
work at armory that that co-leads it so

00:24:41,570 --> 00:24:46,430
please hop on in that channel and give

00:24:43,340 --> 00:24:48,230
us some suggestions so my question is

00:24:46,430 --> 00:24:50,360
we've been doing vaulting for for about

00:24:48,230 --> 00:24:52,670
a decade now come from a banking

00:24:50,360 --> 00:24:55,280
industry so all of our secrets are

00:24:52,670 --> 00:24:58,150
managed in a pretty mature vaulting

00:24:55,280 --> 00:25:01,010
solution password to rotate it

00:24:58,150 --> 00:25:02,840
out-of-band so there is no concept like

00:25:01,010 --> 00:25:04,370
we don't know we go to connect to

00:25:02,840 --> 00:25:05,630
something if the password that we

00:25:04,370 --> 00:25:07,760
retrieved from the vault is the same

00:25:05,630 --> 00:25:09,860
password so how would that work in a

00:25:07,760 --> 00:25:11,300
solution like like spinnaker so

00:25:09,860 --> 00:25:13,940
basically every time you need to use

00:25:11,300 --> 00:25:19,790
that secret you must check to see if it

00:25:13,940 --> 00:25:21,380
is accurate at this point so you're

00:25:19,790 --> 00:25:24,080
asking for a token refresh essentially

00:25:21,380 --> 00:25:26,900
or rather really tokens just one type of

00:25:24,080 --> 00:25:29,390
secret right but yeah yeah it's one of

00:25:26,900 --> 00:25:31,910
these scenarios where we actually never

00:25:29,390 --> 00:25:33,980
like actually human never would put a a

00:25:31,910 --> 00:25:34,730
password into an s3 bucket this is all

00:25:33,980 --> 00:25:36,290
automated

00:25:34,730 --> 00:25:38,540
totally once you've one board your

00:25:36,290 --> 00:25:39,980
secret all of that management is taken

00:25:38,540 --> 00:25:43,190
out of your hands intentionally

00:25:39,980 --> 00:25:44,840
I see so so what you're saying is the

00:25:43,190 --> 00:25:46,160
reference would never change it's just

00:25:44,840 --> 00:25:50,630
the one secret and then it gets rotated

00:25:46,160 --> 00:25:53,300
over time exactly yeah so how do you how

00:25:50,630 --> 00:25:54,650
are those secrets added to evolve or to

00:25:53,300 --> 00:25:56,210
your the service are the is there some

00:25:54,650 --> 00:25:59,000
Adam you said there's some automation

00:25:56,210 --> 00:26:01,190
there's obviously an operational aspect

00:25:59,000 --> 00:26:02,450
of adding an account to a vault yes this

00:26:01,190 --> 00:26:04,370
is in the vault that account has

00:26:02,450 --> 00:26:05,929
immediately rotated and at that point

00:26:04,370 --> 00:26:08,150
the password is no longer human

00:26:05,929 --> 00:26:10,190
accessible awesome so what I would

00:26:08,150 --> 00:26:11,929
recommend in that in that case just

00:26:10,190 --> 00:26:13,820
coming off the top of my head is have a

00:26:11,929 --> 00:26:16,160
pipeline that is triggered by a web hook

00:26:13,820 --> 00:26:19,460
and would redeploy the service in

00:26:16,160 --> 00:26:22,580
question so you could as part of that

00:26:19,460 --> 00:26:25,220
automation step hit the web hook trigger

00:26:22,580 --> 00:26:28,970
and have a pipeline redeployed those

00:26:25,220 --> 00:26:30,590
services okay thank you I like to hear a

00:26:28,970 --> 00:26:31,550
little bit more about that so if you

00:26:30,590 --> 00:26:33,309
could reach out as well that would be

00:26:31,550 --> 00:26:36,890
that would be great

00:26:33,309 --> 00:26:40,880
so you're mentioning the your internet

00:26:36,890 --> 00:26:42,740
secrets one popular ad on out there is

00:26:40,880 --> 00:26:48,169
external secrets

00:26:42,740 --> 00:26:49,429
by the GoDaddy and so so it with the

00:26:48,169 --> 00:26:51,830
external secret so you could basically

00:26:49,429 --> 00:26:54,740
use the external secret system like volt

00:26:51,830 --> 00:26:56,690
or something else instead of the normal

00:26:54,740 --> 00:26:59,600
built-in command in a secret system

00:26:56,690 --> 00:27:00,669
one of the ones we're using is AWS

00:26:59,600 --> 00:27:03,860
secrets manager

00:27:00,669 --> 00:27:05,870
so we indirectly reference what secrets

00:27:03,860 --> 00:27:08,020
we want and then it with the proper

00:27:05,870 --> 00:27:10,370
credentials it pulls out the secrets

00:27:08,020 --> 00:27:14,659
from that and just fetches their own

00:27:10,370 --> 00:27:16,850
secrets is that in OSS or is there RFC

00:27:14,659 --> 00:27:19,190
for that's open source is it in the

00:27:16,850 --> 00:27:20,960
spinnaker project so um this is not a

00:27:19,190 --> 00:27:23,630
part of the spinnaker project it's just

00:27:20,960 --> 00:27:25,760
part of the kubernetes community totally

00:27:23,630 --> 00:27:27,529
so it's out there gotcha gotcha you want

00:27:25,760 --> 00:27:29,870
to could use and integrate and it has a

00:27:27,529 --> 00:27:31,760
way their model is you could plug in

00:27:29,870 --> 00:27:34,010
different types of external secrets yes

00:27:31,760 --> 00:27:38,830
it's kind of like external DNS but for

00:27:34,010 --> 00:27:38,830
secrets that make sense

00:27:43,130 --> 00:27:47,820
yeah yeah that would that's me

00:27:45,840 --> 00:27:49,230
can you paste a link to what you're

00:27:47,820 --> 00:27:53,190
talking about in the selection all they

00:27:49,230 --> 00:27:55,050
created for this session so what one

00:27:53,190 --> 00:27:57,390
thing that I think is a good point to

00:27:55,050 --> 00:27:59,820
know is that you know spinnaker is

00:27:57,390 --> 00:28:01,770
always evolving right so right now we as

00:27:59,820 --> 00:28:04,620
we noted earlier there's there's an

00:28:01,770 --> 00:28:07,740
alternate solution there I'm not a big

00:28:04,620 --> 00:28:09,150
fan of having multiple solutions with

00:28:07,740 --> 00:28:11,700
the caveat it would be great if it was

00:28:09,150 --> 00:28:12,810
pluggable right so um I don't know if

00:28:11,700 --> 00:28:15,960
any of you attended the plugins talk

00:28:12,810 --> 00:28:17,640
yesterday but I think plug-in like a

00:28:15,960 --> 00:28:18,750
pluggable secrets interface would be

00:28:17,640 --> 00:28:35,100
great so that you could choose which

00:28:18,750 --> 00:28:37,920
secret solution you want to use the the

00:28:35,100 --> 00:28:40,170
MVP in the version is doing that however

00:28:37,920 --> 00:28:41,760
that's going to be deprecated at some

00:28:40,170 --> 00:28:45,570
point in the near future we're moving to

00:28:41,760 --> 00:28:50,010
PF 4j as a framework so there's going to

00:28:45,570 --> 00:28:51,420
be explicit I'm not sure which I can use

00:28:50,010 --> 00:28:55,560
actually so that's gonna have like

00:28:51,420 --> 00:28:57,660
explicit extension points so that that

00:28:55,560 --> 00:29:00,120
requires some work to create like stable

00:28:57,660 --> 00:29:05,040
interfaces that you know for plugin

00:29:00,120 --> 00:29:07,380
traders we are trying to get more use

00:29:05,040 --> 00:29:09,720
cases for that though so if you want to

00:29:07,380 --> 00:29:11,430
hop in the plugins talk or the platform

00:29:09,720 --> 00:29:14,580
same channel and leave a comment

00:29:11,430 --> 00:29:19,550
that'd be great the more use cases we

00:29:14,580 --> 00:29:19,550
have the better we know what to build

00:29:20,330 --> 00:29:27,260
there is a plugins channel as well yeah

00:29:22,500 --> 00:29:27,260
so we're let me place this for feedback

00:29:28,470 --> 00:29:36,380
and cracks yes any other questions no

00:29:37,280 --> 00:29:43,430
you all feel more secure good well thank

00:29:41,910 --> 00:29:49,880
you Cameron thanks very much

00:29:43,430 --> 00:29:49,880

YouTube URL: https://www.youtube.com/watch?v=6MPEbg9gBXI


