Title: Joel Vasallo "All Aboard: Transforming Software Delivery Using Spinnaker (Redbox)"
Publication date: 2019-12-03
Playlist: Spinnaker Summit 2019
Description: 
	The third annual Spinnaker Summit (Diamond Sponsors: Netflix, Google and Armory) was held at the Hard Rock Hotel in San Diego, CA from November 15-17, 2019 and welcomed over 500 members of the rapidly growing Spinnaker open source community.
Captions: 
	00:00:00,030 --> 00:00:04,440
hey everybody thanks for joining me this

00:00:02,700 --> 00:00:08,580
is all aboard transforming software

00:00:04,440 --> 00:00:10,920
delivery using spinnaker a little bit

00:00:08,580 --> 00:00:14,190
about myself I'm the manager of cloud

00:00:10,920 --> 00:00:16,699
DevOps at red box but before that I was

00:00:14,190 --> 00:00:18,810
in the spinner community for three years

00:00:16,699 --> 00:00:23,430
since it's basically it's open source

00:00:18,810 --> 00:00:25,859
release in addition to that I was a muse

00:00:23,430 --> 00:00:28,590
or of asgaard it's kind of the predate

00:00:25,859 --> 00:00:28,980
Spinnaker's Netflix original delivery

00:00:28,590 --> 00:00:30,810
tool

00:00:28,980 --> 00:00:33,090
there's my Twitter you can find that at

00:00:30,810 --> 00:00:34,800
the end as well and I'm also a GDG

00:00:33,090 --> 00:00:38,520
organizer running meetups out of Chicago

00:00:34,800 --> 00:00:39,989
so I do that in my spare time a little

00:00:38,520 --> 00:00:42,090
bit about red box for those of you are

00:00:39,989 --> 00:00:44,370
not familiar our primary source of

00:00:42,090 --> 00:00:46,920
business is selling and renting discs

00:00:44,370 --> 00:00:49,140
out of blu-rays out of kiosks across the

00:00:46,920 --> 00:00:50,579
country if you're a customer thank you

00:00:49,140 --> 00:00:51,629
so much for being a customer we really

00:00:50,579 --> 00:00:54,600
do appreciate your business

00:00:51,629 --> 00:00:57,030
but to further that we are also getting

00:00:54,600 --> 00:00:59,480
into the on demand space as well so

00:00:57,030 --> 00:01:01,440
being available on web mobile and TV

00:00:59,480 --> 00:01:08,100
right within the comforts of your own

00:01:01,440 --> 00:01:10,020
home so definitely check us out so a lot

00:01:08,100 --> 00:01:12,450
of us in the room have probably been

00:01:10,020 --> 00:01:14,640
asked and tasked with transformed

00:01:12,450 --> 00:01:17,009
software delivery this wide concept of

00:01:14,640 --> 00:01:18,000
transforming self delivery and now that

00:01:17,009 --> 00:01:19,320
you know you walk out of that meeting

00:01:18,000 --> 00:01:22,320
you're like okay great

00:01:19,320 --> 00:01:23,460
where do I start you know I I when I was

00:01:22,320 --> 00:01:25,439
initially asked this question I didn't

00:01:23,460 --> 00:01:27,119
have the answer but fortunately today I

00:01:25,439 --> 00:01:30,210
do and the answer is actually very

00:01:27,119 --> 00:01:33,270
simple use spinnaker that's my talk

00:01:30,210 --> 00:01:34,920
thank you so much no I'm kidding if it

00:01:33,270 --> 00:01:36,150
was that easy we wouldn't be having a

00:01:34,920 --> 00:01:37,829
great conference learning from one

00:01:36,150 --> 00:01:39,720
another how we use the tool in our

00:01:37,829 --> 00:01:41,040
various organizations right there's

00:01:39,720 --> 00:01:43,020
definitely a lot of things they have to

00:01:41,040 --> 00:01:48,570
go into spinnaker as well and we'll be

00:01:43,020 --> 00:01:51,299
touching us of that today so throughout

00:01:48,570 --> 00:01:53,520
this summit we've heard the concepts of

00:01:51,299 --> 00:01:55,500
a paved road right and building the

00:01:53,520 --> 00:01:57,000
concepts of a paved road for those of

00:01:55,500 --> 00:01:59,040
you not familiar with the concept of a

00:01:57,000 --> 00:02:01,590
paved road is essentially building best

00:01:59,040 --> 00:02:03,840
in practice tooling and ultimately

00:02:01,590 --> 00:02:06,329
laying out a delivery method so everyone

00:02:03,840 --> 00:02:08,489
can drive the same path whenever you're

00:02:06,329 --> 00:02:10,619
laying a road the goal is to have as

00:02:08,489 --> 00:02:13,140
much traffic and have it a fastest way

00:02:10,619 --> 00:02:15,930
through like a jungler or whatever

00:02:13,140 --> 00:02:17,670
um it's all great in principle you know

00:02:15,930 --> 00:02:19,110
you add more features everyone on the

00:02:17,670 --> 00:02:20,730
payroll gets new features

00:02:19,110 --> 00:02:22,290
you had new exits everyone has the

00:02:20,730 --> 00:02:25,230
ability to exit at different various

00:02:22,290 --> 00:02:27,660
stages of that pipeline as well

00:02:25,230 --> 00:02:32,360
understood right a road go straight it

00:02:27,660 --> 00:02:35,100
leads you to your destination however

00:02:32,360 --> 00:02:37,770
sometimes pave roads look more like this

00:02:35,100 --> 00:02:40,470
more like a gravel road and we're asking

00:02:37,770 --> 00:02:42,209
where do we start right what do we do

00:02:40,470 --> 00:02:44,660
how do we get this actually rolling with

00:02:42,209 --> 00:02:47,340
it and our within our organization and

00:02:44,660 --> 00:02:49,230
whenever I'm tasked with a challenge of

00:02:47,340 --> 00:02:51,120
doing software delivery changes any of

00:02:49,230 --> 00:02:52,440
any company I've been at I always

00:02:51,120 --> 00:02:56,670
started looking at the current delivery

00:02:52,440 --> 00:03:00,989
principles and laying them out so what I

00:02:56,670 --> 00:03:03,390
mean by this is really lay them out the

00:03:00,989 --> 00:03:05,820
concepts I just shared here the one on

00:03:03,390 --> 00:03:07,020
the left it's great in principle it has

00:03:05,820 --> 00:03:08,760
a lot of the things that you should

00:03:07,020 --> 00:03:10,950
consider but that doesn't really apply

00:03:08,760 --> 00:03:12,540
to your business as we all know right if

00:03:10,950 --> 00:03:15,540
it was and that would just be the

00:03:12,540 --> 00:03:17,850
prescribed approach the one on the left

00:03:15,540 --> 00:03:19,890
or the one on the right apologies it's

00:03:17,850 --> 00:03:21,690
too complex to me looks like Candyland

00:03:19,890 --> 00:03:23,340
I mean I really don't necessarily need

00:03:21,690 --> 00:03:25,920
to document that I'm sending an email

00:03:23,340 --> 00:03:28,260
right I need to know the process behind

00:03:25,920 --> 00:03:33,810
that that that actual action item right

00:03:28,260 --> 00:03:36,510
there it's pretty crazy so so before

00:03:33,810 --> 00:03:39,959
doing any work you know if I ever have

00:03:36,510 --> 00:03:42,090
to do this kind of a mission focus on

00:03:39,959 --> 00:03:44,549
the end goal right don't worry about the

00:03:42,090 --> 00:03:46,380
technology used if you do it properly

00:03:44,549 --> 00:03:47,959
it won't matter what you use right

00:03:46,380 --> 00:03:52,620
you'll still be able to deliver software

00:03:47,959 --> 00:03:54,090
at an effective pace learn your skills

00:03:52,620 --> 00:03:57,360
and proficiencies within your

00:03:54,090 --> 00:03:58,980
organization early if there's no one in

00:03:57,360 --> 00:04:01,170
the company who knows how to use docker

00:03:58,980 --> 00:04:04,140
containers don't start with kubernetes

00:04:01,170 --> 00:04:06,060
cuz you're I've always seen this kind of

00:04:04,140 --> 00:04:07,830
come up you're gonna help it's gonna be

00:04:06,060 --> 00:04:09,600
tough because you're learning three very

00:04:07,830 --> 00:04:12,810
complex topics in one go

00:04:09,600 --> 00:04:14,640
right start small I mean for us at red

00:04:12,810 --> 00:04:16,530
box we started with docker compose on

00:04:14,640 --> 00:04:18,120
ec2 all right not the coolest thing on

00:04:16,530 --> 00:04:19,950
the block but guess what it instilled

00:04:18,120 --> 00:04:21,599
the practice of I know what a container

00:04:19,950 --> 00:04:23,310
is all right it's been three months I

00:04:21,599 --> 00:04:25,440
need a way to deliver that container

00:04:23,310 --> 00:04:26,310
faster okay let's look at concepts like

00:04:25,440 --> 00:04:28,080
swarm or COO

00:04:26,310 --> 00:04:29,400
and that kind of built and instilled

00:04:28,080 --> 00:04:31,580
that confidence within our development

00:04:29,400 --> 00:04:36,060
staff as well as our operations teams

00:04:31,580 --> 00:04:37,919
and really learn what the actual pain

00:04:36,060 --> 00:04:40,290
points are in your organization

00:04:37,919 --> 00:04:41,940
right we there's obviously been a

00:04:40,290 --> 00:04:44,700
problem that's why that task has been

00:04:41,940 --> 00:04:47,760
given you to solve software delivery ask

00:04:44,700 --> 00:04:50,220
yourself what's the problem right what

00:04:47,760 --> 00:04:53,220
is the problem lay it all out and figure

00:04:50,220 --> 00:04:59,460
out systematically what is taking long

00:04:53,220 --> 00:05:02,010
in that process of delivery another

00:04:59,460 --> 00:05:03,050
thing to to consider is determine the

00:05:02,010 --> 00:05:06,060
core requirements

00:05:03,050 --> 00:05:07,500
what are your delivery targets what are

00:05:06,060 --> 00:05:11,520
your architecture requirements required

00:05:07,500 --> 00:05:12,930
to run your business at this phase you

00:05:11,520 --> 00:05:15,150
have to kind of consider what is truly

00:05:12,930 --> 00:05:18,300
needed right you don't want to just lift

00:05:15,150 --> 00:05:19,590
and shift if you can't avoid it you

00:05:18,300 --> 00:05:21,090
should because you're gonna bring the

00:05:19,590 --> 00:05:23,940
cruft along with it right the goal is to

00:05:21,090 --> 00:05:29,190
deliver faster cloud native applications

00:05:23,940 --> 00:05:30,900
if possible vm service containers all of

00:05:29,190 --> 00:05:33,030
them I don't know every business is

00:05:30,900 --> 00:05:34,650
different at the end of the day they're

00:05:33,030 --> 00:05:36,900
compute resources and that's what we as

00:05:34,650 --> 00:05:39,090
engineers should see out of this they're

00:05:36,900 --> 00:05:41,970
all have their own use cases they're all

00:05:39,090 --> 00:05:43,860
equally had their own challenges again

00:05:41,970 --> 00:05:46,979
that's up to you to figure out what's

00:05:43,860 --> 00:05:48,630
right for your business business

00:05:46,979 --> 00:05:50,760
requirements right it's not always all

00:05:48,630 --> 00:05:52,650
tech what environments are you gonna be

00:05:50,760 --> 00:05:55,020
deploying to are you in a data center

00:05:52,650 --> 00:05:59,160
that's totally fine are you in the cloud

00:05:55,020 --> 00:06:01,410
great are you in GCP AWS ash or whatever

00:05:59,160 --> 00:06:02,640
we'll figure that out early because you

00:06:01,410 --> 00:06:04,820
need to know what API is you have to

00:06:02,640 --> 00:06:07,350
call against and develop tooling around

00:06:04,820 --> 00:06:09,330
SLA is right if you don't have the

00:06:07,350 --> 00:06:11,520
concept of SLA that's a lies I Solo's

00:06:09,330 --> 00:06:13,140
consider a culture where you have those

00:06:11,520 --> 00:06:13,940
things in place and we'll talk on that

00:06:13,140 --> 00:06:17,700
in a bit

00:06:13,940 --> 00:06:18,780
compliance the favorite one taking

00:06:17,700 --> 00:06:21,510
credit cards guess what that means your

00:06:18,780 --> 00:06:24,840
PCI you're working in healthcare that's

00:06:21,510 --> 00:06:26,850
PI HIPPA so you want to know what

00:06:24,840 --> 00:06:28,890
restrictions you have and what things

00:06:26,850 --> 00:06:30,450
you have to build around early on right

00:06:28,890 --> 00:06:34,080
to essentially have delivery into those

00:06:30,450 --> 00:06:36,510
environments I always like to argue that

00:06:34,080 --> 00:06:37,470
effective delivery doesn't really start

00:06:36,510 --> 00:06:40,320
at deliver

00:06:37,470 --> 00:06:42,420
there's a lot of things before you know

00:06:40,320 --> 00:06:43,770
delivering code out the door that you

00:06:42,420 --> 00:06:45,210
have to consider to make your life

00:06:43,770 --> 00:06:47,580
easier when you are ready to deliver

00:06:45,210 --> 00:06:50,400
that software out the door so what do I

00:06:47,580 --> 00:06:52,260
mean by that take an environment again

00:06:50,400 --> 00:06:54,270
forget about which provider you use

00:06:52,260 --> 00:06:56,610
they're all equally they all equally

00:06:54,270 --> 00:06:59,610
work how do you track infrastructure

00:06:56,610 --> 00:07:02,370
changes are the emails are the tickets

00:06:59,610 --> 00:07:04,770
are they in terraform are they manual

00:07:02,370 --> 00:07:07,500
consider that and figure out how to

00:07:04,770 --> 00:07:08,820
improve and iterate on those core

00:07:07,500 --> 00:07:11,070
infrastructure requirements how are they

00:07:08,820 --> 00:07:13,050
documented or how do you update routing

00:07:11,070 --> 00:07:15,000
rules how do you update things like

00:07:13,050 --> 00:07:17,040
infrastructure configs how our base

00:07:15,000 --> 00:07:18,690
image is patched right what is the

00:07:17,040 --> 00:07:21,600
patching policy within your organization

00:07:18,690 --> 00:07:24,480
and really could the concepts that

00:07:21,600 --> 00:07:26,610
manage delivery if your apps have the

00:07:24,480 --> 00:07:30,120
some level of common config can you

00:07:26,610 --> 00:07:31,380
automate around it write a VM while it

00:07:30,120 --> 00:07:32,910
is a challenging beast

00:07:31,380 --> 00:07:34,170
generally speaking the base

00:07:32,910 --> 00:07:36,180
infrastructure is probably not going to

00:07:34,170 --> 00:07:38,190
change much in between the applications

00:07:36,180 --> 00:07:39,720
running within a VM or the applications

00:07:38,190 --> 00:07:42,140
running in a container are obviously

00:07:39,720 --> 00:07:44,820
going to be severely different but

00:07:42,140 --> 00:07:49,100
majority of the case I would argue is

00:07:44,820 --> 00:07:52,110
probably 99% the same so consider that

00:07:49,100 --> 00:07:54,150
does it stop there I mean even things

00:07:52,110 --> 00:07:56,400
like source control how do you structure

00:07:54,150 --> 00:07:58,950
repositories is there a centralized get

00:07:56,400 --> 00:08:01,620
admin how long does it take a developer

00:07:58,950 --> 00:08:03,900
to create a git repository is it a very

00:08:01,620 --> 00:08:06,240
lockdown procedure can they create their

00:08:03,900 --> 00:08:08,730
own repositories do they have X access

00:08:06,240 --> 00:08:11,970
to own merge requests within their team

00:08:08,730 --> 00:08:13,620
things you have to consider something

00:08:11,970 --> 00:08:15,720
that's also not often considered is

00:08:13,620 --> 00:08:18,419
control what's allowed in a git repo I

00:08:15,720 --> 00:08:21,480
mean I've seen organizations where folks

00:08:18,419 --> 00:08:23,370
commit zip files or for folks commit exe

00:08:21,480 --> 00:08:24,900
s right you can totally do it

00:08:23,370 --> 00:08:27,300
and there's measures within get to

00:08:24,900 --> 00:08:28,950
totally support that but putting a

00:08:27,300 --> 00:08:30,180
binary and source are you changing

00:08:28,950 --> 00:08:33,000
binary data

00:08:30,180 --> 00:08:34,289
most likely not but the repercussions

00:08:33,000 --> 00:08:36,630
that could have is when you're

00:08:34,289 --> 00:08:37,800
delivering that artifact it could be it

00:08:36,630 --> 00:08:40,890
can actually blow up your delivery

00:08:37,800 --> 00:08:43,620
artifact quite a bit as well so some

00:08:40,890 --> 00:08:47,040
things to consider continuous

00:08:43,620 --> 00:08:48,930
integration howard jobs created are the

00:08:47,040 --> 00:08:51,330
manual I know I've created manual

00:08:48,930 --> 00:08:51,810
Jenkins jobs in the past how many times

00:08:51,330 --> 00:08:54,269
have

00:08:51,810 --> 00:08:56,639
I don't know the URL for artifactory

00:08:54,269 --> 00:08:58,259
changed because we move from on-prem to

00:08:56,639 --> 00:08:59,790
the cloud provider right

00:08:58,259 --> 00:09:02,279
well how many Jenkins jobs did we have

00:08:59,790 --> 00:09:03,720
to update who here uses LastPass and has

00:09:02,279 --> 00:09:05,339
that awesome feature to autofill

00:09:03,720 --> 00:09:07,259
passwords and every time you hit save on

00:09:05,339 --> 00:09:09,240
a Jenkins pipeline it auto fills that

00:09:07,259 --> 00:09:10,620
password field that's happened to me

00:09:09,240 --> 00:09:13,889
I've taken down production because of

00:09:10,620 --> 00:09:15,959
that so I'll admit it ultimately how are

00:09:13,889 --> 00:09:18,060
artifacts stored right you would think

00:09:15,959 --> 00:09:19,230
things like oh just toss it into like an

00:09:18,060 --> 00:09:21,600
s3 bucket who cares

00:09:19,230 --> 00:09:23,579
but pathing that will be very important

00:09:21,600 --> 00:09:25,470
down the line right so you can find and

00:09:23,579 --> 00:09:27,870
be able to essentially create an API

00:09:25,470 --> 00:09:29,759
around your artifacts being able to find

00:09:27,870 --> 00:09:33,240
how to deliver and ultimately put those

00:09:29,759 --> 00:09:36,629
things into a good delivery pipeline and

00:09:33,240 --> 00:09:39,149
then we get to the spinnaker how our

00:09:36,629 --> 00:09:40,889
pipeline is created right spinnaker is a

00:09:39,149 --> 00:09:42,689
really powerful tool it allows you to

00:09:40,889 --> 00:09:44,670
create pipelines manually but there's

00:09:42,689 --> 00:09:47,550
also interfaces like magic pipeline

00:09:44,670 --> 00:09:49,589
templates for masks a few other tools

00:09:47,550 --> 00:09:51,899
that allow you to essentially auto

00:09:49,589 --> 00:09:56,220
create pipelines based on configuration

00:09:51,899 --> 00:10:00,569
declarative pipelines essentially and do

00:09:56,220 --> 00:10:03,870
those pipelines allow you to grow that

00:10:00,569 --> 00:10:05,069
paved road concept that's definitely one

00:10:03,870 --> 00:10:09,449
of the more important things and why

00:10:05,069 --> 00:10:11,069
should touch on that now just the show

00:10:09,449 --> 00:10:13,050
of hands how many people are new to

00:10:11,069 --> 00:10:14,790
spinnaker is first time kind of using it

00:10:13,050 --> 00:10:16,199
cool awesome

00:10:14,790 --> 00:10:17,639
hey welcome to the community we really

00:10:16,199 --> 00:10:20,069
are happy that you're here with us

00:10:17,639 --> 00:10:21,689
learning from a bunch of us we please

00:10:20,069 --> 00:10:24,389
keep improving this thing involved we're

00:10:21,689 --> 00:10:25,680
really happy to have you here but really

00:10:24,389 --> 00:10:28,290
it started as a Netflix open source

00:10:25,680 --> 00:10:31,139
project in late 2015 there's still a

00:10:28,290 --> 00:10:32,699
large growing community out there but

00:10:31,139 --> 00:10:34,589
the beauty of it is that it provides a

00:10:32,699 --> 00:10:38,990
singular interface into all your cloud

00:10:34,589 --> 00:10:41,850
providers so AWS GCP and many more right

00:10:38,990 --> 00:10:43,139
has support for the future I mean I

00:10:41,850 --> 00:10:44,790
don't know about y'all but I hear

00:10:43,139 --> 00:10:46,470
articles every day about how we're now

00:10:44,790 --> 00:10:48,809
kubernetes we have a home chart right

00:10:46,470 --> 00:10:51,300
vault we have a helmet hey we have a

00:10:48,809 --> 00:10:52,470
helmet chart obviously there's some

00:10:51,300 --> 00:10:54,509
things you have to consider it's not

00:10:52,470 --> 00:10:55,860
always as simple but the fact that it

00:10:54,509 --> 00:10:58,250
has support for things like kubernetes

00:10:55,860 --> 00:11:01,290
it's great it helps build for the future

00:10:58,250 --> 00:11:03,750
you get automated canary analysis this

00:11:01,290 --> 00:11:06,329
again this is a really powerful tool and

00:11:03,750 --> 00:11:08,880
we'll show an example that

00:11:06,329 --> 00:11:10,560
but that's something again leveraging

00:11:08,880 --> 00:11:12,899
the power of these big companies that

00:11:10,560 --> 00:11:14,820
help support this we kind of all win

00:11:12,899 --> 00:11:16,800
when we all learn from one another and

00:11:14,820 --> 00:11:18,209
that's kind of the kind of the view I

00:11:16,800 --> 00:11:21,329
would see within the spinnaker committee

00:11:18,209 --> 00:11:23,699
which is awesome there's a large user

00:11:21,329 --> 00:11:25,920
base and the community is awesome if you

00:11:23,699 --> 00:11:27,149
haven't really the speaker's everyone in

00:11:25,920 --> 00:11:28,980
the community we're all here to just to

00:11:27,149 --> 00:11:31,110
learn build see what we're all doing in

00:11:28,980 --> 00:11:33,990
our various organizations and see what

00:11:31,110 --> 00:11:35,790
we can take back right these are really

00:11:33,990 --> 00:11:37,079
awesome companies and in general a great

00:11:35,790 --> 00:11:38,190
community even if you're not at one of

00:11:37,079 --> 00:11:40,829
these companies that we're just trying

00:11:38,190 --> 00:11:43,550
to learn ask questions and it just keeps

00:11:40,829 --> 00:11:46,319
growing every day as we can see I

00:11:43,550 --> 00:11:48,389
touched on this but behind the scenes

00:11:46,319 --> 00:11:50,399
there that's in a tub yes deployment and

00:11:48,389 --> 00:11:52,380
a kubernetes deployment our developers

00:11:50,399 --> 00:11:54,959
no longer have to do the guesswork of

00:11:52,380 --> 00:11:57,000
where is my application deployed they

00:11:54,959 --> 00:11:59,190
can see that their app is in kubernetes

00:11:57,000 --> 00:12:02,069
they can also see that their application

00:11:59,190 --> 00:12:03,180
is in AWS right and see the versions of

00:12:02,069 --> 00:12:06,180
difference with differences between

00:12:03,180 --> 00:12:07,589
there as well so again one view into

00:12:06,180 --> 00:12:10,009
your application delivery which is

00:12:07,589 --> 00:12:10,009
awesome

00:12:10,459 --> 00:12:17,220
visualizing delivery pipelines so the

00:12:14,639 --> 00:12:18,510
beauty of it is not only can you you

00:12:17,220 --> 00:12:20,910
have this awesome GUI to kind of build

00:12:18,510 --> 00:12:22,800
yourself for delivery I argue that you

00:12:20,910 --> 00:12:27,180
can almost define your business process

00:12:22,800 --> 00:12:30,510
in a pipeline it's not necessarily the

00:12:27,180 --> 00:12:32,790
correct term but the concepts of we must

00:12:30,510 --> 00:12:34,529
build our code we must test our code we

00:12:32,790 --> 00:12:36,870
must deliver our code and we must meet

00:12:34,529 --> 00:12:39,089
these XYZ requirements you can

00:12:36,870 --> 00:12:42,660
essentially use a pipeline to visualize

00:12:39,089 --> 00:12:45,540
all those steps essentially taking a

00:12:42,660 --> 00:12:48,389
flow like this for example where commits

00:12:45,540 --> 00:12:50,790
trigger some Jenkins job docker gets

00:12:48,389 --> 00:12:52,639
created spinnaker does it's magic and

00:12:50,790 --> 00:12:56,160
pushes out docker containers and

00:12:52,639 --> 00:12:58,230
ultimately codify it right at the end of

00:12:56,160 --> 00:13:00,959
the day those spinnaker pipelines are

00:12:58,230 --> 00:13:04,439
JSON templates but those simple pipeline

00:13:00,959 --> 00:13:06,720
steps do severely complex operations and

00:13:04,439 --> 00:13:09,209
we'll show how complex just deploying

00:13:06,720 --> 00:13:10,800
the ec2 server can look but the beauty

00:13:09,209 --> 00:13:13,230
of it that's a feature that's included

00:13:10,800 --> 00:13:15,360
in the platform so you and us as a

00:13:13,230 --> 00:13:17,160
community we can leverage the learnings

00:13:15,360 --> 00:13:19,699
of best practice around delivery of

00:13:17,160 --> 00:13:19,699
those artifacts

00:13:19,940 --> 00:13:27,600
so a lot of talking but it's short pick

00:13:24,660 --> 00:13:30,029
your tools preferably as we saw earlier

00:13:27,600 --> 00:13:31,230
there's a there's no shortage of tools

00:13:30,029 --> 00:13:33,450
out there but pick something that you're

00:13:31,230 --> 00:13:34,560
not only comfortable maintaining but

00:13:33,450 --> 00:13:36,089
something that you're ultimately

00:13:34,560 --> 00:13:37,950
comfortable supporting and ultimately

00:13:36,089 --> 00:13:39,959
something that's available to grow

00:13:37,950 --> 00:13:41,390
because again we're not solving for the

00:13:39,959 --> 00:13:43,700
short problem we're trying to solve

00:13:41,390 --> 00:13:47,250
transformation for the entire

00:13:43,700 --> 00:13:49,050
application stack essentially you're

00:13:47,250 --> 00:13:49,980
doing it right in my book is if you're

00:13:49,050 --> 00:13:52,950
reading if you give me doubt your

00:13:49,980 --> 00:13:55,350
delivery like a recipe step one do this

00:13:52,950 --> 00:13:57,180
create a docker image pack or whatever

00:13:55,350 --> 00:14:04,290
step two scan it for vulnerabilities

00:13:57,180 --> 00:14:05,940
step three yada yada yada so we kind of

00:14:04,290 --> 00:14:09,450
talked a lot of theoretical but what do

00:14:05,940 --> 00:14:11,250
you do now well we start building our

00:14:09,450 --> 00:14:17,730
tool chain right we start implementing

00:14:11,250 --> 00:14:19,470
tools but before we do I argue that

00:14:17,730 --> 00:14:27,150
there should be a significant investment

00:14:19,470 --> 00:14:29,940
in metrics especially early on we should

00:14:27,150 --> 00:14:31,709
all incorporate metrics not only at the

00:14:29,940 --> 00:14:35,160
application stack so just like how I

00:14:31,709 --> 00:14:37,770
said that delivery doesn't start at

00:14:35,160 --> 00:14:41,670
delivering application metrics should

00:14:37,770 --> 00:14:43,080
not just end at applications you could

00:14:41,670 --> 00:14:46,740
should be able to collect metrics like

00:14:43,080 --> 00:14:48,480
how long are my builds taking how long

00:14:46,740 --> 00:14:51,450
does it take to get from a commit all

00:14:48,480 --> 00:14:53,790
the way to production what are the

00:14:51,450 --> 00:14:56,700
changes in between here what are their

00:14:53,790 --> 00:14:58,770
performance differences because by

00:14:56,700 --> 00:15:00,810
correlating both application metrics and

00:14:58,770 --> 00:15:04,290
delivery metrics you can start seeing

00:15:00,810 --> 00:15:07,079
some cool you could start tracking some

00:15:04,290 --> 00:15:09,660
cool improvements over time such as are

00:15:07,079 --> 00:15:11,880
we deploying faster is what we're doing

00:15:09,660 --> 00:15:13,770
right after we made that change our

00:15:11,880 --> 00:15:16,829
developers more empower to roll out that

00:15:13,770 --> 00:15:18,690
software faster are they getting is

00:15:16,829 --> 00:15:20,160
there a bug are we seeing issues there's

00:15:18,690 --> 00:15:21,959
some great talks around actually

00:15:20,160 --> 00:15:23,100
operating spinnaker and seeing some

00:15:21,959 --> 00:15:25,890
great things so those are some things

00:15:23,100 --> 00:15:28,800
you should consider as well and

00:15:25,890 --> 00:15:31,960
ultimately by living in transparency and

00:15:28,800 --> 00:15:34,150
data arguably we should make

00:15:31,960 --> 00:15:36,700
data accessible clear and understood it

00:15:34,150 --> 00:15:39,310
eliminates personal bias I'll often

00:15:36,700 --> 00:15:41,530
times they get asked a question of how

00:15:39,310 --> 00:15:44,050
can we do this in our organization we

00:15:41,530 --> 00:15:46,090
don't really have you know buy-in or

00:15:44,050 --> 00:15:50,260
whatever but we did this one sample app

00:15:46,090 --> 00:15:52,420
but it's hard to visualize that so I

00:15:50,260 --> 00:15:54,340
always like to go to this quote you may

00:15:52,420 --> 00:15:57,040
disagree with my opinion but let me show

00:15:54,340 --> 00:15:59,140
you some data by leveraging that data

00:15:57,040 --> 00:16:00,790
Abe again eliminates that personal bias

00:15:59,140 --> 00:16:02,740
and we're just talking about ones and

00:16:00,790 --> 00:16:06,280
zeros essentially saying that hey this

00:16:02,740 --> 00:16:08,590
is working our measures are our guiding

00:16:06,280 --> 00:16:10,990
principle is in fact still in use right

00:16:08,590 --> 00:16:13,000
so something very important to kind of

00:16:10,990 --> 00:16:13,300
keep in mind arguably try getting past

00:16:13,000 --> 00:16:16,120
that

00:16:13,300 --> 00:16:22,780
that's a hard boss to work for but he's

00:16:16,120 --> 00:16:24,340
good and one more thing I would be

00:16:22,780 --> 00:16:26,080
remiss if I did not mention this that

00:16:24,340 --> 00:16:28,900
there's no broken there's no kubernetes

00:16:26,080 --> 00:16:31,240
CRD to fix a broken process or culture

00:16:28,900 --> 00:16:33,490
no matter how many cool tools you put

00:16:31,240 --> 00:16:35,620
into organization know how many awesome

00:16:33,490 --> 00:16:38,200
developers you hire if you don't invest

00:16:35,620 --> 00:16:41,920
in a company culture you're not gonna

00:16:38,200 --> 00:16:43,780
succeed you have to take a significant

00:16:41,920 --> 00:16:46,210
at least in my book a significant

00:16:43,780 --> 00:16:48,160
investment in your engineering staff and

00:16:46,210 --> 00:16:51,430
build a culture in which you empower

00:16:48,160 --> 00:16:54,610
engineers to build deploy and own their

00:16:51,430 --> 00:16:56,800
applications end-to-end ensure that

00:16:54,610 --> 00:17:00,760
crazy guy developers developers

00:16:56,800 --> 00:17:02,410
developers so you gotta leverage the

00:17:00,760 --> 00:17:04,420
concepts is a paved road as we talked

00:17:02,410 --> 00:17:06,700
about earlier to empower these engineers

00:17:04,420 --> 00:17:08,650
right at red box

00:17:06,700 --> 00:17:10,510
we don't have a centralized ops team for

00:17:08,650 --> 00:17:13,950
the cloud engineers are the ones

00:17:10,510 --> 00:17:16,120
deploying their software to production

00:17:13,950 --> 00:17:18,160
but this doesn't mean that we just kind

00:17:16,120 --> 00:17:20,860
of say here you go here's Edmund to the

00:17:18,160 --> 00:17:23,350
AWS console have fun see you in a week

00:17:20,860 --> 00:17:25,000
right no we don't enforce those

00:17:23,350 --> 00:17:27,550
implementation details on to the

00:17:25,000 --> 00:17:30,100
engineers no one wants to be writing yam

00:17:27,550 --> 00:17:32,020
oh I know I even as a delivery engineer

00:17:30,100 --> 00:17:33,790
I hate writing yam oh I could only

00:17:32,020 --> 00:17:37,330
imagine as an engineer actually writing

00:17:33,790 --> 00:17:39,220
yet oh don't expect engineers also to

00:17:37,330 --> 00:17:41,170
become domain experts right there are

00:17:39,220 --> 00:17:42,580
various domains that you have to touch

00:17:41,170 --> 00:17:43,930
you have to touch the networking stack

00:17:42,580 --> 00:17:44,280
you have to touch the infrastructure

00:17:43,930 --> 00:17:47,400
staff

00:17:44,280 --> 00:17:49,710
yet security quality I can go on and on

00:17:47,400 --> 00:17:52,020
right at the end of the day where the

00:17:49,710 --> 00:17:54,210
goal is to give engineers a safe guard

00:17:52,020 --> 00:17:56,850
well as Isaac mentioned this morning to

00:17:54,210 --> 00:17:58,260
delivery not a gate essentially give

00:17:56,850 --> 00:18:00,540
them a safe path to follow

00:17:58,260 --> 00:18:02,910
if they so choose and the company still

00:18:00,540 --> 00:18:04,080
chooses to build a path we can but

00:18:02,910 --> 00:18:07,640
essentially it's a discussion and

00:18:04,080 --> 00:18:09,840
growing that out taking that concept

00:18:07,640 --> 00:18:11,100
various engineering teams should kind of

00:18:09,840 --> 00:18:13,380
build on that and work together to build

00:18:11,100 --> 00:18:14,940
compelling tools and complementary

00:18:13,380 --> 00:18:18,360
tooling to support that engineering

00:18:14,940 --> 00:18:20,340
staff concept of s Ari's helping ensure

00:18:18,360 --> 00:18:21,780
that we have the baseline metrics I've

00:18:20,340 --> 00:18:23,690
seen things like Auto creating

00:18:21,780 --> 00:18:28,140
dashboards after every deployment

00:18:23,690 --> 00:18:30,780
updating open J open API Docs quality

00:18:28,140 --> 00:18:35,490
teams running test frameworks security

00:18:30,780 --> 00:18:37,140
teams doing vulnerability scans what

00:18:35,490 --> 00:18:39,900
does the compelling tool essentially

00:18:37,140 --> 00:18:41,970
look like I think a haven't made the

00:18:39,900 --> 00:18:44,070
finishes but I think that a tool should

00:18:41,970 --> 00:18:46,320
look to be simple minimize context

00:18:44,070 --> 00:18:49,500
switching and ultimately be accurate or

00:18:46,320 --> 00:18:51,120
fast feedback you have to ask yourself

00:18:49,500 --> 00:18:52,670
whenever implementing a new tool into

00:18:51,120 --> 00:18:56,040
your process into your pipeline right

00:18:52,670 --> 00:18:58,530
does this solution the one that we're

00:18:56,040 --> 00:19:02,430
about to implement empower engineers to

00:18:58,530 --> 00:19:04,830
take action if not why what can we do

00:19:02,430 --> 00:19:06,630
the idea behind some of these concepts

00:19:04,830 --> 00:19:09,300
are probably very good but what do we

00:19:06,630 --> 00:19:11,610
need to transform write a security scan

00:19:09,300 --> 00:19:14,400
reporting a vulnerability will that

00:19:11,610 --> 00:19:16,050
cause cut will that will that will that

00:19:14,400 --> 00:19:18,330
empower the engineer to want to fix that

00:19:16,050 --> 00:19:20,670
problem does it surface itself within

00:19:18,330 --> 00:19:23,700
delivery does the engineer get enough

00:19:20,670 --> 00:19:24,990
notice around this and ultimately does

00:19:23,700 --> 00:19:26,940
it provide fast and accurate feedback

00:19:24,990 --> 00:19:30,300
again trying to feed everything back

00:19:26,940 --> 00:19:32,220
into that pipeline even further to this

00:19:30,300 --> 00:19:34,620
we're seeing a trend right now where

00:19:32,220 --> 00:19:35,880
this is extending past just delivery and

00:19:34,620 --> 00:19:38,340
we're seeing this extending to things

00:19:35,880 --> 00:19:40,290
like infrastructure as well as we saw

00:19:38,340 --> 00:19:42,690
Andy and the various Netflix folks

00:19:40,290 --> 00:19:44,550
talked about managed delivery but we're

00:19:42,690 --> 00:19:46,370
seeing the concepts that engineers are

00:19:44,550 --> 00:19:48,480
looking for more than just a paved road

00:19:46,370 --> 00:19:50,400
they're asking for an autonomous vehicle

00:19:48,480 --> 00:19:54,090
that just takes them where they want to

00:19:50,400 --> 00:19:55,560
go and that's where the councils of

00:19:54,090 --> 00:19:57,400
managed delivery essentially are coming

00:19:55,560 --> 00:19:59,020
from the engineers just

00:19:57,400 --> 00:20:00,460
want to focus on writing software and

00:19:59,020 --> 00:20:01,630
they just want it to be in the

00:20:00,460 --> 00:20:05,440
environments that they need it

00:20:01,630 --> 00:20:08,260
so in short delivery engineers should

00:20:05,440 --> 00:20:12,160
focus on Adam bunting tooling that takes

00:20:08,260 --> 00:20:15,370
a given spec like I need three regions I

00:20:12,160 --> 00:20:17,140
need four gigabytes of RAM right things

00:20:15,370 --> 00:20:18,640
that probably as infrastructure

00:20:17,140 --> 00:20:20,920
engineers or deliver engineers we may

00:20:18,640 --> 00:20:23,110
know the answer to but the engineering

00:20:20,920 --> 00:20:25,180
teams just can focus on the core

00:20:23,110 --> 00:20:27,040
requirements and we as delivery

00:20:25,180 --> 00:20:29,530
engineers can take that concept and

00:20:27,040 --> 00:20:31,570
build and deliver it best common

00:20:29,530 --> 00:20:33,420
practice infrastructure best the best

00:20:31,570 --> 00:20:36,490
practice infrastructure apologies

00:20:33,420 --> 00:20:39,220
essentially eliminate the guesswork from

00:20:36,490 --> 00:20:41,200
that if you haven't seen this talk it's

00:20:39,220 --> 00:20:42,850
actually a really good view into the

00:20:41,200 --> 00:20:45,400
future of where spinnaker may be going

00:20:42,850 --> 00:20:46,360
it was actually yesterday so okay I

00:20:45,400 --> 00:20:50,200
should watch it but it should be

00:20:46,360 --> 00:20:52,750
recorded so definitely check it out but

00:20:50,200 --> 00:20:55,120
manage delivery was announced probably

00:20:52,750 --> 00:20:56,950
two weeks ago on the blog post so how

00:20:55,120 --> 00:20:58,840
what are some examples of compelling

00:20:56,950 --> 00:21:00,640
solutions just to kind of you know what

00:20:58,840 --> 00:21:03,010
the feat of what what can some of these

00:21:00,640 --> 00:21:07,540
things look like so alright let's do

00:21:03,010 --> 00:21:09,610
this Leeroy at red box we built a tool

00:21:07,540 --> 00:21:10,660
called leroy because we found that a lot

00:21:09,610 --> 00:21:12,310
of our engineers were essentially

00:21:10,660 --> 00:21:15,070
manually creating Jenkins jobs or

00:21:12,310 --> 00:21:16,960
spinnaker pipelines but there was no way

00:21:15,070 --> 00:21:19,270
to correlate what was actually being

00:21:16,960 --> 00:21:22,240
created so the solution that we came up

00:21:19,270 --> 00:21:25,030
with was the tool is essentially a web

00:21:22,240 --> 00:21:26,830
hook that listens to Jenkins changes or

00:21:25,030 --> 00:21:28,810
sorry it changes and get that auto

00:21:26,830 --> 00:21:31,630
create Jenkins jobs and auto create your

00:21:28,810 --> 00:21:34,210
spinnaker pipelines essentially this

00:21:31,630 --> 00:21:36,310
enables Corps teams like the Jenkins

00:21:34,210 --> 00:21:39,040
domains experts to define the best

00:21:36,310 --> 00:21:41,920
principals no longer the developers

00:21:39,040 --> 00:21:44,650
defining artifact URL in their code

00:21:41,920 --> 00:21:46,360
right or in their delivery pipelines we

00:21:44,650 --> 00:21:50,130
will take care of that you can define as

00:21:46,360 --> 00:21:53,290
much but again the concepts of mmm

00:21:50,130 --> 00:21:55,360
guardrails negates they can override our

00:21:53,290 --> 00:21:56,980
settings if they spin up a test

00:21:55,360 --> 00:21:58,870
artifactory for example they can totally

00:21:56,980 --> 00:22:01,090
do that but we will provide you the

00:21:58,870 --> 00:22:06,830
guardrails it's kind of stay on delivery

00:22:01,090 --> 00:22:12,950
path great

00:22:06,830 --> 00:22:23,330
I don't what just happened there we're

00:22:12,950 --> 00:22:24,860
back there we go awesome so continuous

00:22:23,330 --> 00:22:28,940
delivery and infrastructure what did we

00:22:24,860 --> 00:22:30,740
do to solve that so we created an open

00:22:28,940 --> 00:22:32,240
source solution or we actually are part

00:22:30,740 --> 00:22:34,610
of the open source community for for

00:22:32,240 --> 00:22:36,380
masks essentially it allows you to

00:22:34,610 --> 00:22:38,690
create pipelines this code it's one of

00:22:36,380 --> 00:22:41,570
the early edition is to define pipelines

00:22:38,690 --> 00:22:42,680
this code the benefit of this is you're

00:22:41,570 --> 00:22:45,470
able to version and recreate your

00:22:42,680 --> 00:22:47,090
spinnaker pipelines but more importantly

00:22:45,470 --> 00:22:49,370
you can standardize base template

00:22:47,090 --> 00:22:51,560
requirements and ultimately safe

00:22:49,370 --> 00:22:53,450
infrastructure defaults to give again

00:22:51,560 --> 00:22:56,180
those guardrails now extending into the

00:22:53,450 --> 00:23:01,040
continuous delivery space so how does

00:22:56,180 --> 00:23:03,080
this look in principle essentially the

00:23:01,040 --> 00:23:05,120
challenge right what was the problem

00:23:03,080 --> 00:23:06,560
engineers wanted a declarative way just

00:23:05,120 --> 00:23:09,350
to define the best practice pipeline

00:23:06,560 --> 00:23:11,210
they were tired of going in Dec seeing

00:23:09,350 --> 00:23:13,370
the exam pipeline and you know changing

00:23:11,210 --> 00:23:15,230
it again there's other initiatives out

00:23:13,370 --> 00:23:17,450
there this is just one of many as we saw

00:23:15,230 --> 00:23:19,580
this past weekend but this is the

00:23:17,450 --> 00:23:21,950
solution that we went with essentially

00:23:19,580 --> 00:23:23,690
you take a skimming spec I'm an ec2

00:23:21,950 --> 00:23:26,390
deployment that needs to be deployed

00:23:23,690 --> 00:23:30,260
into East and I need to hit stage canary

00:23:26,390 --> 00:23:32,540
prod taking that data we're able to

00:23:30,260 --> 00:23:34,790
transform that into a spinnaker pipeline

00:23:32,540 --> 00:23:36,800
that essentially creates what you see on

00:23:34,790 --> 00:23:42,530
the bottom of the stages that you need

00:23:36,800 --> 00:23:44,480
to go to but in addition to that we

00:23:42,530 --> 00:23:47,270
extend into the delivery for Masse's to

00:23:44,480 --> 00:23:48,650
Phase two part software it also does

00:23:47,270 --> 00:23:51,740
your pipelines but it also does your

00:23:48,650 --> 00:23:53,600
infrastructure so again and Jesus just

00:23:51,740 --> 00:23:55,400
wanted the best plan best practice

00:23:53,600 --> 00:23:58,910
infrastructure without having to be

00:23:55,400 --> 00:24:01,070
domain experts same concept to get spec

00:23:58,910 --> 00:24:03,080
you take a given template and that

00:24:01,070 --> 00:24:07,160
infrastructure is created for you things

00:24:03,080 --> 00:24:08,690
like what's my health check how many

00:24:07,160 --> 00:24:11,540
servers how many pods do I need in my

00:24:08,690 --> 00:24:14,060
application any scaling events do you

00:24:11,540 --> 00:24:16,010
need shadow capacity gene to auto scale

00:24:14,060 --> 00:24:20,940
and memory genes auto scale and CPU

00:24:16,010 --> 00:24:24,130
ports to expose etc all defined this

00:24:20,940 --> 00:24:28,120
overall just a quick overview format

00:24:24,130 --> 00:24:29,340
supports EC 2 lambda s3 more importantly

00:24:28,120 --> 00:24:31,179
we've heard from the community that

00:24:29,340 --> 00:24:33,970
formats may have been too opinionated

00:24:31,179 --> 00:24:36,130
and focused on AWS so we have support

00:24:33,970 --> 00:24:37,750
for custom templates essentially you can

00:24:36,130 --> 00:24:39,760
define your own ginger based templates

00:24:37,750 --> 00:24:41,380
feed it any key value pair and will

00:24:39,760 --> 00:24:43,780
actually take care of crane those

00:24:41,380 --> 00:24:45,910
pipelines for you but more so on the

00:24:43,780 --> 00:24:48,309
infrastructure side we have support for

00:24:45,910 --> 00:24:50,410
AWS roughen t3 dns records after every

00:24:48,309 --> 00:24:52,000
time you deploy a new dns new you'll be

00:24:50,410 --> 00:24:53,650
we're able to create you a nice friendly

00:24:52,000 --> 00:24:57,070
record for you so you don't have to

00:24:53,650 --> 00:25:01,120
remember that internal - crazy 3 3 - 2

00:24:57,070 --> 00:25:04,000
LB amazon.com classic you'll be maybe

00:25:01,120 --> 00:25:07,720
and I'll be coming security groups i n

00:25:04,000 --> 00:25:09,460
policies more importantly from an

00:25:07,720 --> 00:25:11,049
availability and uptime perspective it's

00:25:09,460 --> 00:25:14,049
able to configure scaling policies as

00:25:11,049 --> 00:25:15,580
well as scheduled actions so if you know

00:25:14,049 --> 00:25:17,110
that every morning at 6:00 in the

00:25:15,580 --> 00:25:19,450
morning marketing is about to run that

00:25:17,110 --> 00:25:21,159
giant report that just puts that squeeze

00:25:19,450 --> 00:25:22,720
on your infrastructure and you know that

00:25:21,159 --> 00:25:24,640
no matter what it's always gonna be 20

00:25:22,720 --> 00:25:26,530
servers I've done this three times it's

00:25:24,640 --> 00:25:27,909
always gonna be 20 servers you can prep

00:25:26,530 --> 00:25:29,470
for that shadow capacity through

00:25:27,909 --> 00:25:31,120
spinnaker through this it's actually

00:25:29,470 --> 00:25:34,600
extending a feature within spinnaker -

00:25:31,120 --> 00:25:36,330
it's called scheduled actions so now

00:25:34,600 --> 00:25:40,720
with this in mind you can actually build

00:25:36,330 --> 00:25:42,340
minimum viable pipelines lay out what's

00:25:40,720 --> 00:25:44,260
truly needed lay out what your current

00:25:42,340 --> 00:25:46,539
flow is for example take your last

00:25:44,260 --> 00:25:49,090
deployment right and figure out those

00:25:46,539 --> 00:25:51,370
top-level requirements every deployment

00:25:49,090 --> 00:25:53,169
we need testing every deployment we need

00:25:51,370 --> 00:25:55,960
security every deployment we need some

00:25:53,169 --> 00:25:59,650
level of monitoring with that in mind

00:25:55,960 --> 00:26:01,480
find champions in organization the folks

00:25:59,650 --> 00:26:03,039
who want to help improve and deliver

00:26:01,480 --> 00:26:03,900
because they are out there you just

00:26:03,039 --> 00:26:06,490
gotta find them

00:26:03,900 --> 00:26:08,590
and ultimately pick a small application

00:26:06,490 --> 00:26:10,419
that has high visibility but ultimately

00:26:08,590 --> 00:26:12,309
has room for growth don't start with

00:26:10,419 --> 00:26:14,710
your pit payment services because if

00:26:12,309 --> 00:26:17,260
that fails that's gonna cause folks to

00:26:14,710 --> 00:26:19,090
be skeptical and have doubts and say is

00:26:17,260 --> 00:26:21,490
this really worth it it just took down

00:26:19,090 --> 00:26:23,940
our revenue source right start with

00:26:21,490 --> 00:26:26,110
something small that can grow over time

00:26:23,940 --> 00:26:29,350
but most importantly don't let perfect

00:26:26,110 --> 00:26:31,390
be the enemy of good right create a

00:26:29,350 --> 00:26:34,919
Minimum Viable pipeline that can extend

00:26:31,390 --> 00:26:34,919
that can grow over time

00:26:35,260 --> 00:26:41,960
essentially make your deployments boring

00:26:38,920 --> 00:26:43,220
you don't want to have deployments look

00:26:41,960 --> 00:26:45,350
like this and I know because I've been

00:26:43,220 --> 00:26:46,670
on this site where you hit that restart

00:26:45,350 --> 00:26:48,110
on the JBoss server at 1:00 in the

00:26:46,670 --> 00:26:50,870
morning and you're like oh I just want

00:26:48,110 --> 00:26:52,970
to go to bed and it just comes up of a

00:26:50,870 --> 00:26:54,740
giant stack trace right back in the day

00:26:52,970 --> 00:26:56,600
so make your deployments boring

00:26:54,740 --> 00:27:02,330
essentially make them a click of a

00:26:56,600 --> 00:27:05,470
button so let's recap in corporate and

00:27:02,330 --> 00:27:07,160
leverage metrics encourage and build

00:27:05,470 --> 00:27:09,560
self-sufficiency with paved road

00:27:07,160 --> 00:27:11,900
pipelines lay out your minimum viable

00:27:09,560 --> 00:27:13,480
pipelines and make deployments a click

00:27:11,900 --> 00:27:15,560
of a button

00:27:13,480 --> 00:27:17,120
now this is like whether there are ones

00:27:15,560 --> 00:27:19,700
like yes I've heard this a million times

00:27:17,120 --> 00:27:22,670
but how what how can we actually use

00:27:19,700 --> 00:27:23,900
spinnaker to do all this stuff so you

00:27:22,670 --> 00:27:25,880
don't understand you'll you don't

00:27:23,900 --> 00:27:28,220
understand we can't just deploy fast

00:27:25,880 --> 00:27:29,870
it's just too risky it's not no no way

00:27:28,220 --> 00:27:31,300
we can't just get rid of Devin's stage

00:27:29,870 --> 00:27:33,650
that's insane

00:27:31,300 --> 00:27:34,700
developers deploying software are you

00:27:33,650 --> 00:27:36,500
nuts no wait

00:27:34,700 --> 00:27:38,420
they can't they they're not experts they

00:27:36,500 --> 00:27:40,010
don't know how to do this we can't

00:27:38,420 --> 00:27:41,930
automate quality testing and ultimately

00:27:40,010 --> 00:27:43,130
we can't afford security best practices

00:27:41,930 --> 00:27:45,230
and do Canaries this is that's just

00:27:43,130 --> 00:27:48,830
that's the all right I lost you this is

00:27:45,230 --> 00:27:50,690
impossible well it is but you have to

00:27:48,830 --> 00:27:52,790
centralize I argue that if you

00:27:50,690 --> 00:27:56,720
centralize the comment solution in this

00:27:52,790 --> 00:27:58,250
case spinnaker it is possible so let's

00:27:56,720 --> 00:28:00,440
just break it down right let's let's

00:27:58,250 --> 00:28:02,600
let's ignore this a tangent bliss we

00:28:00,440 --> 00:28:06,620
can't deploy fast developers can't

00:28:02,600 --> 00:28:10,400
deploy and I'd argue that in the current

00:28:06,620 --> 00:28:12,500
iteration probably right if if I was to

00:28:10,400 --> 00:28:14,180
take an existing process to deploy to a

00:28:12,500 --> 00:28:16,430
data center there's a lot of things that

00:28:14,180 --> 00:28:18,410
are done I have to SSH into the box I

00:28:16,430 --> 00:28:19,310
have to copy this artifact one I have

00:28:18,410 --> 00:28:20,930
may have to also have root permissions

00:28:19,310 --> 00:28:22,850
so I maybe I don't want to give them

00:28:20,930 --> 00:28:24,620
route right there's a lot of things you

00:28:22,850 --> 00:28:26,510
have to kind of lay out to understand

00:28:24,620 --> 00:28:28,400
before you can actually have a delivery

00:28:26,510 --> 00:28:32,390
pipe on that actually gives you the

00:28:28,400 --> 00:28:34,970
ability to do that the first thing the

00:28:32,390 --> 00:28:39,560
goal is to deploy fast to fail fast and

00:28:34,970 --> 00:28:40,880
ultimately I argue fail forward but it's

00:28:39,560 --> 00:28:42,680
not just the point fast right anyone

00:28:40,880 --> 00:28:43,850
could deploy fast I can get an email and

00:28:42,680 --> 00:28:45,530
I could toss that on the server I could

00:28:43,850 --> 00:28:48,170
get restart on that no problem

00:28:45,530 --> 00:28:53,060
do that right now the goal is to deliver

00:28:48,170 --> 00:28:55,810
small changes the challenge today as we

00:28:53,060 --> 00:28:58,670
know these ticket to week sprint right

00:28:55,810 --> 00:29:01,400
developments done an engineer's task of

00:28:58,670 --> 00:29:03,140
delivery we put that on a server by the

00:29:01,400 --> 00:29:05,600
time that code actually goes out the

00:29:03,140 --> 00:29:06,860
door the development team and all the

00:29:05,600 --> 00:29:08,960
various other components around that

00:29:06,860 --> 00:29:11,120
team have moved on to the next one so to

00:29:08,960 --> 00:29:12,800
triage this issue it also probably

00:29:11,120 --> 00:29:14,870
touched a lot of teams was there a

00:29:12,800 --> 00:29:17,990
defect to missing quality was there a

00:29:14,870 --> 00:29:19,790
miss configuration of a server was there

00:29:17,990 --> 00:29:21,980
a Fault in the code right that stack

00:29:19,790 --> 00:29:24,220
could totally happen but then it turns

00:29:21,980 --> 00:29:27,020
into this finger-pointing game instead

00:29:24,220 --> 00:29:29,480
having small automated changes that

00:29:27,020 --> 00:29:32,390
iterate over time allow you to just

00:29:29,480 --> 00:29:33,710
focus on delivering those small features

00:29:32,390 --> 00:29:36,470
essentially making them backwards

00:29:33,710 --> 00:29:37,970
compatible but it's not easy you have to

00:29:36,470 --> 00:29:40,970
remember that when you're building this

00:29:37,970 --> 00:29:42,980
and you're building your platform as a

00:29:40,970 --> 00:29:45,080
measure whenever you're building it

00:29:42,980 --> 00:29:47,330
build a platform that when you roll out

00:29:45,080 --> 00:29:49,100
a fix it's faster than rolling as fast

00:29:47,330 --> 00:29:50,900
as rolling it back you should have the

00:29:49,100 --> 00:29:55,010
safeguards to rollback your changes if

00:29:50,900 --> 00:29:58,100
you need to and ultimately as we alluded

00:29:55,010 --> 00:30:00,260
to make your deployments infrastructure

00:29:58,100 --> 00:30:02,360
and rollbacks boring build around the

00:30:00,260 --> 00:30:05,060
concepts of immutability to eliminate

00:30:02,360 --> 00:30:07,610
server bloat so the concept of cattle

00:30:05,060 --> 00:30:09,290
not cats just really quickly I know

00:30:07,610 --> 00:30:11,930
mutable infrastructure is kind of a new

00:30:09,290 --> 00:30:14,030
thing but essentially instead of just

00:30:11,930 --> 00:30:16,490
using that existing stack create a

00:30:14,030 --> 00:30:18,860
mirrored copy of it fail traffic over to

00:30:16,490 --> 00:30:21,320
it that way every time you deploy you're

00:30:18,860 --> 00:30:23,470
guaranteed that it's a fresh system in

00:30:21,320 --> 00:30:25,340
the case of containers typically it is

00:30:23,470 --> 00:30:26,450
and you never really have to worry about

00:30:25,340 --> 00:30:28,910
patching because you can have an

00:30:26,450 --> 00:30:32,540
up-to-date image that's rolled out via

00:30:28,910 --> 00:30:33,800
your internal patch review process you

00:30:32,540 --> 00:30:36,110
have the ability to do things like blue

00:30:33,800 --> 00:30:37,850
green right you have your old server you

00:30:36,110 --> 00:30:39,830
have your new server let's see if it's

00:30:37,850 --> 00:30:41,780
actually working it is destroy the old

00:30:39,830 --> 00:30:43,010
one but if you have to rollback since

00:30:41,780 --> 00:30:44,840
you have that automated and you have

00:30:43,010 --> 00:30:49,610
that all defined it's just a click of a

00:30:44,840 --> 00:30:51,920
button so in addition to that when using

00:30:49,610 --> 00:30:54,410
spinnaker it does it's not just deploy

00:30:51,920 --> 00:30:56,960
an ec2 instance and we're done right it

00:30:54,410 --> 00:30:58,090
actually has quite a few checks so for

00:30:56,960 --> 00:31:00,850
example in this environment

00:30:58,090 --> 00:31:03,549
deploy to us east disable the old

00:31:00,850 --> 00:31:06,100
cluster shrink it to zero and then

00:31:03,549 --> 00:31:08,409
restore minimum capacity but even within

00:31:06,100 --> 00:31:10,659
those those subsequent stages just a

00:31:08,409 --> 00:31:12,159
deployment aspect it's just making sure

00:31:10,659 --> 00:31:14,950
that the health provider Pat's like for

00:31:12,159 --> 00:31:17,529
example monitor the deployment force

00:31:14,950 --> 00:31:19,419
cache refresh wait for up instances

00:31:17,529 --> 00:31:21,669
using those best principles as

00:31:19,419 --> 00:31:24,760
determining is this deployment it's

00:31:21,669 --> 00:31:26,799
really healthy again I mentioned this

00:31:24,760 --> 00:31:29,740
earlier a centralized view into all your

00:31:26,799 --> 00:31:31,690
deployments and ultimately has built-in

00:31:29,740 --> 00:31:33,669
rollback support too you can go ahead

00:31:31,690 --> 00:31:35,799
and click a button within the UI and

00:31:33,669 --> 00:31:38,049
roll back to a previous version I'm in

00:31:35,799 --> 00:31:41,080
the event for example here 211 just hit

00:31:38,049 --> 00:31:43,419
rollback type a reason why boom that's

00:31:41,080 --> 00:31:47,830
all source within spinnaker click up a

00:31:43,419 --> 00:31:50,289
button the next one we just can't get

00:31:47,830 --> 00:31:52,210
rid of dev one except for pre prod pre

00:31:50,289 --> 00:31:54,010
pre prod I've seen that come up there

00:31:52,210 --> 00:31:56,770
you can you joke you joke but I've seen

00:31:54,010 --> 00:31:59,200
it come up but why does this

00:31:56,770 --> 00:32:00,549
environments exist right let's ask the

00:31:59,200 --> 00:32:02,529
fundamental question we've done a lot of

00:32:00,549 --> 00:32:07,000
talking today so why does environments

00:32:02,529 --> 00:32:09,370
exist I are most likely to to check the

00:32:07,000 --> 00:32:11,590
health and ensure uptime right you want

00:32:09,370 --> 00:32:14,919
a safe little area to deploy and

00:32:11,590 --> 00:32:16,360
minimize the blast radius and ultimately

00:32:14,919 --> 00:32:21,370
maybe it's in that to deploy and test

00:32:16,360 --> 00:32:24,580
multiple complex changes right but the

00:32:21,370 --> 00:32:28,149
truth around Devon stage I argue if they

00:32:24,580 --> 00:32:30,490
stink they often do stink can anyone

00:32:28,149 --> 00:32:33,850
reliably simulate a production workload

00:32:30,490 --> 00:32:37,330
of XYZ hundreds of thousands of users in

00:32:33,850 --> 00:32:38,950
stage how much effort is it me do you

00:32:37,330 --> 00:32:40,510
have to do to maintain that production

00:32:38,950 --> 00:32:43,539
environment ensuring you have that

00:32:40,510 --> 00:32:47,080
up-to-date data the argument I always

00:32:43,539 --> 00:32:50,590
hear is how good is your test data is

00:32:47,080 --> 00:32:53,950
your test data the same as a production

00:32:50,590 --> 00:32:56,890
quality and how much is your stage

00:32:53,950 --> 00:32:58,419
environment costing you typically in a

00:32:56,890 --> 00:33:01,330
high velocity organization what I've

00:32:58,419 --> 00:33:02,620
seen is if it's done right stage is kind

00:33:01,330 --> 00:33:04,419
of like oh we just have to always hit

00:33:02,620 --> 00:33:05,620
next on stage for some reason just you

00:33:04,419 --> 00:33:08,590
know we have to hit to go to prod it's

00:33:05,620 --> 00:33:10,919
more like a chore than anything else I'd

00:33:08,590 --> 00:33:10,919
argue

00:33:12,070 --> 00:33:17,870
so we always I kinda had to include this

00:33:15,350 --> 00:33:19,700
actually because there was an era within

00:33:17,870 --> 00:33:21,590
software delivery where we saw this kind

00:33:19,700 --> 00:33:23,179
of meme everywhere right like it was

00:33:21,590 --> 00:33:23,779
kind of funny like haha yeah we should

00:33:23,179 --> 00:33:25,399
never have

00:33:23,779 --> 00:33:28,429
we should never test in prod kind of

00:33:25,399 --> 00:33:31,220
thing but I'd argue why not why not why

00:33:28,429 --> 00:33:32,750
shouldn't we maybe it's just a sign that

00:33:31,220 --> 00:33:34,010
we're getting kind of crazy I don't know

00:33:32,750 --> 00:33:37,100
you know we've been doing this for now

00:33:34,010 --> 00:33:38,659
DevOps SRU whatever for you know 70 10

00:33:37,100 --> 00:33:40,010
years now they were just kind of all

00:33:38,659 --> 00:33:41,750
getting kind of crazy in the industry

00:33:40,010 --> 00:33:44,240
but maybe it's a sign of confidence

00:33:41,750 --> 00:33:46,159
right maybe it's a sign of maturity and

00:33:44,240 --> 00:33:49,010
all the tools that were implementing in

00:33:46,159 --> 00:33:51,200
our day to day things like Canary

00:33:49,010 --> 00:33:55,520
rollouts help alleviate the need for a

00:33:51,200 --> 00:33:57,919
staging environment so for example at

00:33:55,520 --> 00:34:00,500
Red Box we use SEO within our kubernetes

00:33:57,919 --> 00:34:02,809
cluster to do something like this I like

00:34:00,500 --> 00:34:05,600
to always visualize forget that even

00:34:02,809 --> 00:34:08,330
though how to do this traffic coming in

00:34:05,600 --> 00:34:11,570
probably 99% of traffic coming in on the

00:34:08,330 --> 00:34:15,649
left going to sto always goes to v1

00:34:11,570 --> 00:34:18,500
however hello I'm Joel I hit sto Romney

00:34:15,649 --> 00:34:20,389
diversion 2 or hi I'm the quality team

00:34:18,500 --> 00:34:23,000
sourcing from this IP in the red in the

00:34:20,389 --> 00:34:25,099
red box offices I want to see version 2

00:34:23,000 --> 00:34:26,540
and test I'm coming from this version of

00:34:25,099 --> 00:34:29,089
a laptop of this version of a browser

00:34:26,540 --> 00:34:31,490
being able to do that layer 7 routing

00:34:29,089 --> 00:34:33,950
essentially letting you deploy to prod

00:34:31,490 --> 00:34:35,570
but do that testing as well in there so

00:34:33,950 --> 00:34:37,849
ensuring that when this ultimately goes

00:34:35,570 --> 00:34:39,169
to live you've done your due diligence

00:34:37,849 --> 00:34:43,550
and you checked against this in

00:34:39,169 --> 00:34:45,919
production let's let's level this up you

00:34:43,550 --> 00:34:48,440
can even do granular Canaries by getting

00:34:45,919 --> 00:34:50,540
rid of stage we can now have two more

00:34:48,440 --> 00:34:52,369
production environments and ultimately

00:34:50,540 --> 00:34:54,770
that's a better user experience for our

00:34:52,369 --> 00:34:56,780
customers geo distributed regions across

00:34:54,770 --> 00:34:59,030
the United States to help deliver a

00:34:56,780 --> 00:35:00,440
faster experience for our customers but

00:34:59,030 --> 00:35:02,810
now we could also do regional based

00:35:00,440 --> 00:35:04,550
Canaries such that only the central

00:35:02,810 --> 00:35:06,400
region sees this we can do it in all

00:35:04,550 --> 00:35:08,869
three if we need to right but again

00:35:06,400 --> 00:35:13,580
thinking outside the box and layer that

00:35:08,869 --> 00:35:15,710
in talked a lot about Canaries

00:35:13,580 --> 00:35:17,900
but within spinnaker there's support for

00:35:15,710 --> 00:35:20,690
built in canary analysis and automated

00:35:17,900 --> 00:35:23,480
canary oh now that's on top of that but

00:35:20,690 --> 00:35:24,109
in short if you wire it up and there was

00:35:23,480 --> 00:35:25,849
an awesome

00:35:24,109 --> 00:35:27,950
awesome workshop here that I hope a lot

00:35:25,849 --> 00:35:29,989
of folks took the advantage of it allows

00:35:27,950 --> 00:35:33,619
you to evaluate very complex metrics

00:35:29,989 --> 00:35:36,049
such as did I pass my CPU criteria then

00:35:33,619 --> 00:35:37,579
I passed my error rates was my latency

00:35:36,049 --> 00:35:39,650
and up or down

00:35:37,579 --> 00:35:41,539
how many TCP connections that I handled

00:35:39,650 --> 00:35:43,549
was that good or bad and at the end of

00:35:41,539 --> 00:35:45,380
the day it'll generate a score and

00:35:43,549 --> 00:35:48,109
essentially just like going to school

00:35:45,380 --> 00:35:50,239
it'll say well if you get a 75 you

00:35:48,109 --> 00:35:51,650
technically pass if you got a 95 you're

00:35:50,239 --> 00:35:52,789
in the honor roll or whatever right

00:35:51,650 --> 00:35:54,440
essentially that's the way I always like

00:35:52,789 --> 00:35:56,059
to equate to something like that but

00:35:54,440 --> 00:35:58,069
using that data you can actually

00:35:56,059 --> 00:36:02,539
effectively do automated delivery as

00:35:58,069 --> 00:36:04,069
well from this the next one

00:36:02,539 --> 00:36:06,920
we can't automate quality testing what

00:36:04,069 --> 00:36:09,289
are you talking about correct

00:36:06,920 --> 00:36:10,670
you can't just automate it you have to

00:36:09,289 --> 00:36:13,190
do an investment and call it engineering

00:36:10,670 --> 00:36:14,599
this is the gacha to talk quality

00:36:13,190 --> 00:36:16,880
engineers should be empowered to write

00:36:14,599 --> 00:36:19,339
code and tests as close as the source as

00:36:16,880 --> 00:36:20,569
possible however for the developers in

00:36:19,339 --> 00:36:21,890
the crowd this is does that mean they're

00:36:20,569 --> 00:36:25,640
gonna write your unit test you're still

00:36:21,890 --> 00:36:26,720
on the hook for that quality testing

00:36:25,640 --> 00:36:28,309
essentially should be built into the

00:36:26,720 --> 00:36:30,440
pipeline and there's no reason for it

00:36:28,309 --> 00:36:30,980
not to be powerful - like spinnaker as

00:36:30,440 --> 00:36:33,799
we'll see

00:36:30,980 --> 00:36:36,769
you can easily do that at the end of the

00:36:33,799 --> 00:36:38,269
day automated testing and pipelines will

00:36:36,769 --> 00:36:40,069
provide that fast feedback that I was

00:36:38,269 --> 00:36:41,869
talking about earlier if that fails

00:36:40,069 --> 00:36:44,390
developers could then click in and see

00:36:41,869 --> 00:36:46,460
why did it fail oh look I missed a test

00:36:44,390 --> 00:36:48,710
case the login call all of a sudden

00:36:46,460 --> 00:36:51,079
spiked to 200 milliseconds because of a

00:36:48,710 --> 00:36:53,180
Redis timeout I don't know me going

00:36:51,079 --> 00:36:55,940
crazy so how does this look in practice

00:36:53,180 --> 00:36:57,859
look I'm not gonna here to preach which

00:36:55,940 --> 00:37:00,200
way is better with the spinnaker every

00:36:57,859 --> 00:37:00,619
organization is different for us to get

00:37:00,200 --> 00:37:02,749
started

00:37:00,619 --> 00:37:05,019
we did a Jenkins job it triggered a

00:37:02,749 --> 00:37:07,549
Jenkins job did a greater build boom

00:37:05,019 --> 00:37:10,130
it's a cool probably not is a

00:37:07,549 --> 00:37:11,599
presentation worried probably not but it

00:37:10,130 --> 00:37:13,339
works and that's the most important

00:37:11,599 --> 00:37:16,640
thing because at the end of the day even

00:37:13,339 --> 00:37:18,980
if 50% automated is better than 100%

00:37:16,640 --> 00:37:20,809
manual it gives you that time back to

00:37:18,980 --> 00:37:23,210
spend that other 50% that now is

00:37:20,809 --> 00:37:25,789
automated to focus hey maybe we can do

00:37:23,210 --> 00:37:27,829
the next 25% right maybe we can do the

00:37:25,789 --> 00:37:29,569
next we can invest in other tooling

00:37:27,829 --> 00:37:31,880
right give me time back to those quad

00:37:29,569 --> 00:37:33,789
engineers to build that platform and

00:37:31,880 --> 00:37:36,680
it's short if you look as simple as this

00:37:33,789 --> 00:37:37,880
hey I have a quality step trigger this

00:37:36,680 --> 00:37:39,650
Jenkins job

00:37:37,880 --> 00:37:43,219
we're super cool we have a Jenkins

00:37:39,650 --> 00:37:44,420
quality test now you can't automate best

00:37:43,219 --> 00:37:44,949
practices security what I'm talking

00:37:44,420 --> 00:37:48,680
about

00:37:44,949 --> 00:37:52,099
well little it's sometimes lost but

00:37:48,680 --> 00:37:56,420
within when delivering VMs and ec2 say

00:37:52,099 --> 00:37:59,299
like AWS for example under the hood the

00:37:56,420 --> 00:38:02,920
big step actually uses packer and Packer

00:37:59,299 --> 00:38:05,089
is essentially a tool that can take

00:38:02,920 --> 00:38:07,670
there's filters within Packer to

00:38:05,089 --> 00:38:09,469
essentially find the latest image based

00:38:07,670 --> 00:38:11,359
on your criteria so you can ensure that

00:38:09,469 --> 00:38:13,519
every time you deploy you're always

00:38:11,359 --> 00:38:15,739
using your latest curated base image

00:38:13,519 --> 00:38:17,420
whenever you deploy through spinnaker so

00:38:15,739 --> 00:38:17,869
that's awesome partnering a tool like

00:38:17,420 --> 00:38:19,459
Packer

00:38:17,869 --> 00:38:21,400
it's your pipeline it's natively

00:38:19,459 --> 00:38:24,170
supported you don't have to do anything

00:38:21,400 --> 00:38:26,359
you get integrate security steps just

00:38:24,170 --> 00:38:27,979
like the quality step you can do a post

00:38:26,359 --> 00:38:30,319
at some security tool out there do a

00:38:27,979 --> 00:38:32,869
scan do a DES whatever you need to do

00:38:30,319 --> 00:38:34,249
again fast feedback right within that

00:38:32,869 --> 00:38:38,779
pipeline that report can be generated

00:38:34,249 --> 00:38:43,039
for your engineers and we can't automate

00:38:38,779 --> 00:38:44,749
compliance many companies and still

00:38:43,039 --> 00:38:47,719
DevOps practices until they see these

00:38:44,749 --> 00:38:50,239
words PCI Sox HIPAA right after that's

00:38:47,719 --> 00:38:53,329
like that's it we're done that's it

00:38:50,239 --> 00:38:55,640
I'd argue that automation and the kind a

00:38:53,329 --> 00:38:57,019
culture of automation compliance is

00:38:55,640 --> 00:38:57,949
actually a good measure of whether

00:38:57,019 --> 00:39:00,589
you're staying true to your principles

00:38:57,949 --> 00:39:02,029
right embrace the challenge don't just

00:39:00,589 --> 00:39:03,440
turn away say like that's it like we'll

00:39:02,029 --> 00:39:05,089
just kind of leave the PCs stuff over

00:39:03,440 --> 00:39:07,039
there embrace that challenge and see

00:39:05,089 --> 00:39:09,349
what you can automate because again even

00:39:07,039 --> 00:39:11,539
50% automated is better than 100% manual

00:39:09,349 --> 00:39:12,680
and I know that audit season is always

00:39:11,539 --> 00:39:16,579
coming right it's come around the corner

00:39:12,680 --> 00:39:17,719
and it's always like go to week loss of

00:39:16,579 --> 00:39:20,569
work where you're just trying to figure

00:39:17,719 --> 00:39:23,180
out and collect evidence so with the

00:39:20,569 --> 00:39:25,099
spinnaker lock the front door and check

00:39:23,180 --> 00:39:26,390
the rooms to the key at the minimum at

00:39:25,099 --> 00:39:28,459
the minimum at the minimum I've ruined

00:39:26,390 --> 00:39:30,199
the crowd should look to and for some

00:39:28,459 --> 00:39:33,349
level of sam'l ooofff

00:39:30,199 --> 00:39:34,969
LDAP x.509 something spinnaker is a

00:39:33,349 --> 00:39:36,380
really powerful tool you can do a lot of

00:39:34,969 --> 00:39:37,789
damage so make sure at the very least

00:39:36,380 --> 00:39:40,400
you get out he have to authenticate into

00:39:37,789 --> 00:39:42,890
your system but more importantly look at

00:39:40,400 --> 00:39:45,109
something like Fiat within spinnaker to

00:39:42,890 --> 00:39:46,789
control access to specific resources to

00:39:45,109 --> 00:39:49,729
make sure you limit the blast radius as

00:39:46,789 --> 00:39:51,800
well you can do things like locking your

00:39:49,729 --> 00:39:53,720
pipelines such that you're only a pipe

00:39:51,800 --> 00:39:56,450
to be updated via your prescribed

00:39:53,720 --> 00:40:00,920
process but again guardrails negates

00:39:56,450 --> 00:40:03,290
guardrails not gates audit approval

00:40:00,920 --> 00:40:05,780
commonly heard is developers can't

00:40:03,290 --> 00:40:08,060
deploy because they can't deploy their

00:40:05,780 --> 00:40:11,120
own change simple step solved it in

00:40:08,060 --> 00:40:12,980
probably two lines of spell look at who

00:40:11,120 --> 00:40:15,410
just hit the okay button look at who

00:40:12,980 --> 00:40:17,330
just did the commit in Jenkins boom done

00:40:15,410 --> 00:40:18,680
you have an auto check the developer who

00:40:17,330 --> 00:40:22,070
wrote that piece of software can't be

00:40:18,680 --> 00:40:24,770
the same one who's deploying it change

00:40:22,070 --> 00:40:26,090
control it's no brainer why there's no

00:40:24,770 --> 00:40:28,490
there should be no restrictions against

00:40:26,090 --> 00:40:32,240
this this should be a awesome feature

00:40:28,490 --> 00:40:34,340
who what where when why why were things

00:40:32,240 --> 00:40:36,980
changed and this is an example ticket

00:40:34,340 --> 00:40:39,860
from us at red box again the app name

00:40:36,980 --> 00:40:42,290
the environment the approver down to the

00:40:39,860 --> 00:40:43,670
commit granularity you're able to then

00:40:42,290 --> 00:40:47,000
click that button and say what is

00:40:43,670 --> 00:40:48,890
exactly changing when Joel hit OK at

00:40:47,000 --> 00:40:51,830
midnight to get this change out the door

00:40:48,890 --> 00:40:53,510
and show me the spinnaker idea I want to

00:40:51,830 --> 00:40:56,740
see all the steps I want to verify that

00:40:53,510 --> 00:41:00,560
this was actually tested in everything

00:40:56,740 --> 00:41:02,120
the there's a great article out there on

00:41:00,560 --> 00:41:04,700
the spinnaker tech I'm sorry on the

00:41:02,120 --> 00:41:06,290
spinnaker docks it's kind of lost you

00:41:04,700 --> 00:41:09,230
can add a web hook to essentially just

00:41:06,290 --> 00:41:10,550
be an event bus and listen to that it's

00:41:09,230 --> 00:41:12,110
actually pretty cool cuz you essentially

00:41:10,550 --> 00:41:16,610
can build some cool events as you can

00:41:12,110 --> 00:41:18,170
see from there so in summary spinnaker

00:41:16,610 --> 00:41:21,260
for us has been a huge productivity game

00:41:18,170 --> 00:41:24,680
these are just the numbers from when we

00:41:21,260 --> 00:41:26,480
started all the weights now our delivery

00:41:24,680 --> 00:41:29,390
team is was initially only two people

00:41:26,480 --> 00:41:31,280
and in the past year we're now five at

00:41:29,390 --> 00:41:33,260
development staff with about forty to

00:41:31,280 --> 00:41:36,800
fifty people and that's growing over the

00:41:33,260 --> 00:41:39,860
time with this in mind spinnaker allowed

00:41:36,800 --> 00:41:42,260
us to deploy to to cloud providers we're

00:41:39,860 --> 00:41:44,660
in five regions we have hundreds of

00:41:42,260 --> 00:41:46,700
spinnaker applications thousands of

00:41:44,660 --> 00:41:49,370
servers that beside the point but over

00:41:46,700 --> 00:41:52,370
1,200 deployments a month and those were

00:41:49,370 --> 00:41:55,010
all developer driven to production by a

00:41:52,370 --> 00:41:56,420
click of a button so essentially the

00:41:55,010 --> 00:41:58,610
takeaways that I hope everyone takes

00:41:56,420 --> 00:42:00,080
away from this is build a culture and

00:41:58,610 --> 00:42:02,900
empower your engineers to own their code

00:42:00,080 --> 00:42:04,859
so you build it you run it don't let

00:42:02,900 --> 00:42:06,180
perfect be the enemy of good you want

00:42:04,859 --> 00:42:09,079
something that's minimum that's viable

00:42:06,180 --> 00:42:11,579
and grows over time start small

00:42:09,079 --> 00:42:13,289
going fast does that mean compromising

00:42:11,579 --> 00:42:15,059
quality does that mean you can just skip

00:42:13,289 --> 00:42:17,069
over security and ultimately your

00:42:15,059 --> 00:42:19,349
compliance steps provide developer

00:42:17,069 --> 00:42:21,359
guardrails not gates and give them safe

00:42:19,349 --> 00:42:24,329
defaults and enforce standards and

00:42:21,359 --> 00:42:27,509
ultimately Spinnaker's pretty awesome I

00:42:24,329 --> 00:42:29,789
hope everyone agrees that to find out

00:42:27,509 --> 00:42:31,259
more about this stuff we're going to be

00:42:29,789 --> 00:42:33,390
publishing here soon an article about

00:42:31,259 --> 00:42:34,499
how we use spinnaker at Redbox in

00:42:33,390 --> 00:42:35,940
addition to that we have a few other

00:42:34,499 --> 00:42:38,549
things so please check out our tech blog

00:42:35,940 --> 00:42:39,480
for more information around cool things

00:42:38,549 --> 00:42:42,809
that we're doing in our transformation

00:42:39,480 --> 00:42:44,819
journey but with that thank you so much

00:42:42,809 --> 00:42:45,960
I know you all had a lot of talks you

00:42:44,819 --> 00:42:47,249
could have picked and it really means a

00:42:45,960 --> 00:42:49,240
lot that you picked mine so thank you

00:42:47,249 --> 00:42:54,770
everybody thank you thank you

00:42:49,240 --> 00:42:54,770

YouTube URL: https://www.youtube.com/watch?v=Y76HH5md2ag


