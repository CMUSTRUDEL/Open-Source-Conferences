Title: Robert Ross (Fire Hydrant) - Spinnaker Summit 2019
Publication date: 2019-12-03
Playlist: Spinnaker Summit 2019
Description: 
	The third annual Spinnaker Summit (Diamond Sponsors: Netflix, Google and Armory) was held at the Hard Rock Hotel in San Diego, CA from November 15-17, 2019 and welcomed over 500 members of the rapidly growing Spinnaker open source community.
Captions: 
	00:00:02,629 --> 00:00:06,660
so I know it's post-lunch and there's

00:00:05,069 --> 00:00:09,120
like a bunch of other talks going on

00:00:06,660 --> 00:00:11,340
right now from the - from Netflix one

00:00:09,120 --> 00:00:12,750
from opps MX so so the people I came to

00:00:11,340 --> 00:00:16,220
this one thank you

00:00:12,750 --> 00:00:19,050
much appreciated so this is a talk about

00:00:16,220 --> 00:00:20,670
using spinnaker to fight fires but a lot

00:00:19,050 --> 00:00:22,260
more just kind of like I'll say

00:00:20,670 --> 00:00:24,449
philosophy around fighting fires with

00:00:22,260 --> 00:00:28,500
automation so let's go ahead an get

00:00:24,449 --> 00:00:31,109
started so required slide Who am I why

00:00:28,500 --> 00:00:33,180
am i up here my name is Robert Ross

00:00:31,109 --> 00:00:36,120
people like to call me Bobby tables if

00:00:33,180 --> 00:00:39,510
you're familiar with the xkcd comic a

00:00:36,120 --> 00:00:42,719
few muted chuckles so yes I am a

00:00:39,510 --> 00:00:44,610
software engineer I previously worked at

00:00:42,719 --> 00:00:46,980
namely which is a HR software as a

00:00:44,610 --> 00:00:48,690
service company I built a lot of the

00:00:46,980 --> 00:00:51,870
platform that namely runs on today I

00:00:48,690 --> 00:00:54,120
introduced spinnaker at namely if you

00:00:51,870 --> 00:00:55,920
were here at spinnaker summit last last

00:00:54,120 --> 00:00:57,680
year in Seattle I spoke spoke there

00:00:55,920 --> 00:00:59,760
about some of our automation there

00:00:57,680 --> 00:01:02,460
previously I worked at digitalocean I

00:00:59,760 --> 00:01:04,409
also built a lot of internal tools broke

00:01:02,460 --> 00:01:06,150
a lot of stuff as well if you used it do

00:01:04,409 --> 00:01:10,740
and it broke like five years ago I

00:01:06,150 --> 00:01:12,840
apologize many other reasons to be here

00:01:10,740 --> 00:01:14,880
because I've been breaking software for

00:01:12,840 --> 00:01:18,960
over 10 years probably more like 15

00:01:14,880 --> 00:01:20,729
actually and I'm also never this

00:01:18,960 --> 00:01:22,229
photogenic so if anyone could capture

00:01:20,729 --> 00:01:26,909
something even just like half of this

00:01:22,229 --> 00:01:28,560
I'd honestly be so it's just so happy so

00:01:26,909 --> 00:01:30,479
I currently work at a company called

00:01:28,560 --> 00:01:33,450
fire hydrant my current day-to-day is

00:01:30,479 --> 00:01:35,520
it's an instant response tool what we do

00:01:33,450 --> 00:01:37,020
is we help teams handle handle and

00:01:35,520 --> 00:01:39,240
respond to incidents quickly with

00:01:37,020 --> 00:01:41,970
processing automation the co-founders

00:01:39,240 --> 00:01:44,610
CEO of business small team headquartered

00:01:41,970 --> 00:01:47,460
in New York City awesome tools and this

00:01:44,610 --> 00:01:51,720
is patchy the dog if you're fun if you

00:01:47,460 --> 00:01:55,259
like puns so let's talk about fires

00:01:51,720 --> 00:01:57,180
spinnaker and you the audience so this

00:01:55,259 --> 00:01:59,610
talk is about incidents learning from

00:01:57,180 --> 00:02:01,950
them and adding automation for them

00:01:59,610 --> 00:02:04,409
afterward we'll learn about some of the

00:02:01,950 --> 00:02:06,030
basics about analyzing incidents what

00:02:04,409 --> 00:02:08,220
we'll do is we'll also redefine what

00:02:06,030 --> 00:02:10,340
spinnaker really is and then we'll

00:02:08,220 --> 00:02:12,480
decide if we're going to automate or not

00:02:10,340 --> 00:02:13,940
if you're in Lawrence talk this is

00:02:12,480 --> 00:02:17,690
actually a great one to cut

00:02:13,940 --> 00:02:20,930
be in right now but first we have to do

00:02:17,690 --> 00:02:26,000
something that I found very challenging

00:02:20,930 --> 00:02:28,820
to do what even is an incident so in my

00:02:26,000 --> 00:02:32,330
quest to define the word incident you

00:02:28,820 --> 00:02:34,760
come across a varying array of options

00:02:32,330 --> 00:02:38,750
so dictionary comm says an individual

00:02:34,760 --> 00:02:40,760
occurrence or event okay merriam-webster

00:02:38,750 --> 00:02:42,770
says something dependent on or

00:02:40,760 --> 00:02:45,080
subordinate to something else of greater

00:02:42,770 --> 00:02:47,420
or principal importance I had to read

00:02:45,080 --> 00:02:51,410
that like 25 times before that really

00:02:47,420 --> 00:02:53,420
even landed halfway and then lexico said

00:02:51,410 --> 00:02:56,840
an instance of something happening an

00:02:53,420 --> 00:02:59,150
event or occurrence okay so basically

00:02:56,840 --> 00:03:02,450
based on these definitions it's anything

00:02:59,150 --> 00:03:05,360
that happens which is not really how we

00:03:02,450 --> 00:03:07,430
use the word incident so why do we

00:03:05,360 --> 00:03:10,640
always kind of use the word incident

00:03:07,430 --> 00:03:12,560
negatively email incident deploy

00:03:10,640 --> 00:03:14,420
incident conference incident if I say

00:03:12,560 --> 00:03:16,310
these you might have your own registered

00:03:14,420 --> 00:03:20,060
versions of what these might actually be

00:03:16,310 --> 00:03:21,560
an email incident we sent hundreds of

00:03:20,060 --> 00:03:23,690
thousands of emails to the wrong

00:03:21,560 --> 00:03:27,230
addresses that would be a terrible email

00:03:23,690 --> 00:03:29,030
incident or deploy incident that's

00:03:27,230 --> 00:03:30,080
employee went awesome got you with that

00:03:29,030 --> 00:03:33,110
one right you thought of something

00:03:30,080 --> 00:03:34,850
terrible conference incident my talk was

00:03:33,110 --> 00:03:39,020
like a five out of seven on a ratio

00:03:34,850 --> 00:03:41,480
scale but that's not enough right

00:03:39,020 --> 00:03:44,030
so I even asked the internet why I used

00:03:41,480 --> 00:03:47,420
stack overflows English and language and

00:03:44,030 --> 00:03:48,980
use usage Stack Exchange website why

00:03:47,420 --> 00:03:51,380
does the word incident have a negative

00:03:48,980 --> 00:03:53,060
connotation associated with it and then

00:03:51,380 --> 00:03:56,870
somebody who was extremely helpful said

00:03:53,060 --> 00:04:00,190
because that's its typical usage the

00:03:56,870 --> 00:04:03,440
more you know thanks so much

00:04:00,190 --> 00:04:04,430
so eventually the internet did provide

00:04:03,440 --> 00:04:07,220
me a lot of help

00:04:04,430 --> 00:04:10,430
euphemistic meaning event that might

00:04:07,220 --> 00:04:14,330
trigger a crisis or political unrest

00:04:10,430 --> 00:04:16,730
force attested in 1913 and further

00:04:14,330 --> 00:04:19,850
solidified in our brains as crisis or

00:04:16,730 --> 00:04:24,440
unrest on February 28th 2017 when Amazon

00:04:19,850 --> 00:04:26,330
s3 went down but here's the thing you

00:04:24,440 --> 00:04:26,960
know and all good fun with the word

00:04:26,330 --> 00:04:30,410
incident

00:04:26,960 --> 00:04:32,900
is it's not a bad thing at all incidents

00:04:30,410 --> 00:04:34,580
aren't bad they really are not by

00:04:32,900 --> 00:04:36,169
definition they really are just an event

00:04:34,580 --> 00:04:39,860
or occurrence we've kind of made them

00:04:36,169 --> 00:04:41,419
bad John all spa's said incidents are

00:04:39,860 --> 00:04:44,259
unplanned investments the second time

00:04:41,419 --> 00:04:46,310
I've seen this on a screen up here today

00:04:44,259 --> 00:04:48,440
but what all that is they're only

00:04:46,310 --> 00:04:51,139
investments if we actively learn from

00:04:48,440 --> 00:04:53,180
them after they occur you know it an

00:04:51,139 --> 00:04:55,310
instant could could happen we could do

00:04:53,180 --> 00:04:57,009
nothing and then it's not an investment

00:04:55,310 --> 00:04:59,919
at all it's just something that happened

00:04:57,009 --> 00:05:01,940
so we have to learn from them afterwards

00:04:59,919 --> 00:05:04,970
so what we're gonna do is we're gonna

00:05:01,940 --> 00:05:06,889
use a past incident to learn from and

00:05:04,970 --> 00:05:09,979
sprinkle some automation on and if that

00:05:06,889 --> 00:05:12,830
scares you that words sprinkle you're in

00:05:09,979 --> 00:05:15,169
for a treat so let's move towards

00:05:12,830 --> 00:05:17,150
automating something out of a previously

00:05:15,169 --> 00:05:18,550
occurring incident and this is all real

00:05:17,150 --> 00:05:21,650
world actually

00:05:18,550 --> 00:05:25,250
so we're deployed to a crew Benes

00:05:21,650 --> 00:05:27,319
cluster in a major cloud provider we use

00:05:25,250 --> 00:05:29,889
the default deployment type provided by

00:05:27,319 --> 00:05:33,409
kubernetes to manage our application

00:05:29,889 --> 00:05:35,300
it's a big old monolith it's been in

00:05:33,409 --> 00:05:37,220
production for years and it's been there

00:05:35,300 --> 00:05:40,490
in several forms I'm sure many people

00:05:37,220 --> 00:05:44,780
here know this last bullet point all too

00:05:40,490 --> 00:05:46,389
well and lastly we went into a code

00:05:44,780 --> 00:05:49,280
freeze sometimes known as a moratorium

00:05:46,389 --> 00:05:53,330
during the holidays to print any fires

00:05:49,280 --> 00:05:55,580
from breaking out and what actually

00:05:53,330 --> 00:05:58,610
happened is that the moratorium actually

00:05:55,580 --> 00:06:00,770
just took us down hope our large

00:05:58,610 --> 00:06:03,349
application had a fun hidden bug a

00:06:00,770 --> 00:06:05,570
memory leak and when you consistently

00:06:03,349 --> 00:06:09,830
deploy a memory leak can be missed

00:06:05,570 --> 00:06:13,849
entirely we stopped deploy out of fear

00:06:09,830 --> 00:06:15,949
of shipping a bug which caused a bug and

00:06:13,849 --> 00:06:18,370
this is the classic story a lot of big

00:06:15,949 --> 00:06:21,530
businesses have actually had this issue

00:06:18,370 --> 00:06:23,990
so let me tell so really this is what

00:06:21,530 --> 00:06:25,759
happened to us our last deployment went

00:06:23,990 --> 00:06:27,560
out before the moratorium great we're

00:06:25,759 --> 00:06:30,199
going to the holidays last employees

00:06:27,560 --> 00:06:33,650
going out see Iran we deployed using

00:06:30,199 --> 00:06:35,380
spinnaker time passed and then pages

00:06:33,650 --> 00:06:38,060
went off two weeks later

00:06:35,380 --> 00:06:38,920
how are we how are we getting paid right

00:06:38,060 --> 00:06:42,880
now nothing

00:06:38,920 --> 00:06:45,570
things changed right so what actually

00:06:42,880 --> 00:06:48,820
happened let's talk about the incident

00:06:45,570 --> 00:06:51,340
it is the core application is written on

00:06:48,820 --> 00:06:57,010
top of Ruby on Rails microservices on

00:06:51,340 --> 00:06:59,830
the edge rails 4.2 it U is using

00:06:57,010 --> 00:07:03,880
Postgres as the primary database hosted

00:06:59,830 --> 00:07:06,520
on Amazon Web Services rails 42 has a

00:07:03,880 --> 00:07:09,280
bug that causes the creation of prepared

00:07:06,520 --> 00:07:11,350
statements for every query that uses

00:07:09,280 --> 00:07:13,750
dates in a where statement so to say

00:07:11,350 --> 00:07:17,260
that differently if you were to use a

00:07:13,750 --> 00:07:18,940
where statement in in rails using active

00:07:17,260 --> 00:07:21,910
record if you're familiar that says

00:07:18,940 --> 00:07:24,100
anything below this date or ahead of

00:07:21,910 --> 00:07:27,580
this date using a less than or greater

00:07:24,100 --> 00:07:29,680
than operator it would create a separate

00:07:27,580 --> 00:07:32,080
prepared statement for each of those

00:07:29,680 --> 00:07:33,940
queries so that meant that any time we

00:07:32,080 --> 00:07:36,220
had something that came in you know five

00:07:33,940 --> 00:07:38,440
minutes ago as time shifts five minutes

00:07:36,220 --> 00:07:40,840
ago changes so that meant so that meant

00:07:38,440 --> 00:07:44,290
that every query had a new prepared

00:07:40,840 --> 00:07:47,260
statement that is stored inside of

00:07:44,290 --> 00:07:49,300
Postgres so that means that Postgres has

00:07:47,260 --> 00:07:51,190
a crap-ton of prepared statements

00:07:49,300 --> 00:07:53,230
created stored in memory for all

00:07:51,190 --> 00:07:55,780
connections and a prepared statement for

00:07:53,230 --> 00:07:59,290
those that are unaware is the plan of

00:07:55,780 --> 00:08:02,170
how a query gets executed so Postgres is

00:07:59,290 --> 00:08:04,240
storing these prepared plans in memory

00:08:02,170 --> 00:08:06,700
for every single connection for

00:08:04,240 --> 00:08:10,750
thousands of connections for the

00:08:06,700 --> 00:08:14,020
application and because we deployed

00:08:10,750 --> 00:08:16,090
regularly the connections would close to

00:08:14,020 --> 00:08:17,350
Postgres and Postgres would clean up all

00:08:16,090 --> 00:08:21,370
of the prepared statements that were

00:08:17,350 --> 00:08:24,280
associated with that connection but when

00:08:21,370 --> 00:08:27,660
we stopped deploying memory grew and

00:08:24,280 --> 00:08:30,700
grew and grew on the database and

00:08:27,660 --> 00:08:34,030
eventually the poor innocent database

00:08:30,700 --> 00:08:35,710
started swapping the most one of the

00:08:34,030 --> 00:08:39,160
scariest things that can happen to you

00:08:35,710 --> 00:08:40,660
as reliability engineering and this

00:08:39,160 --> 00:08:44,200
caused a trickle effect of the entire

00:08:40,660 --> 00:08:47,670
website kind of going boom boom so what

00:08:44,200 --> 00:08:50,560
did we do well let's just restart pots

00:08:47,670 --> 00:08:52,360
we can't just start deploying again so

00:08:50,560 --> 00:08:54,190
to solve the problem we added some

00:08:52,360 --> 00:08:56,920
Automation and by automation what I

00:08:54,190 --> 00:08:58,510
really mean is a Bosch while-loop that

00:08:56,920 --> 00:09:01,630
simply picked pods that are random and

00:08:58,510 --> 00:09:03,279
deleted them every 15 seconds because

00:09:01,630 --> 00:09:05,649
we're crunched for time we don't want to

00:09:03,279 --> 00:09:07,380
stick around so we just came up with a

00:09:05,649 --> 00:09:10,600
simple little thing that we just kind of

00:09:07,380 --> 00:09:12,279
manually applied to kubernetes didn't

00:09:10,600 --> 00:09:14,980
really tell anyone that that's what we

00:09:12,279 --> 00:09:16,630
did and then scurried off and like that

00:09:14,980 --> 00:09:19,200
was kind of the solution until we came

00:09:16,630 --> 00:09:21,820
back and started deploying again

00:09:19,200 --> 00:09:24,399
suddenly our database out of memory and

00:09:21,820 --> 00:09:29,290
it was run resolved it's fine

00:09:24,399 --> 00:09:33,399
who cares deleting pods at random though

00:09:29,290 --> 00:09:34,810
what could possibly go wrong so here's

00:09:33,399 --> 00:09:38,380
the thing with automation this is gonna

00:09:34,810 --> 00:09:41,019
be a key point for this entire talk it

00:09:38,380 --> 00:09:43,750
may solve a problem or two but it will

00:09:41,019 --> 00:09:48,060
create others it may create others that

00:09:43,750 --> 00:09:51,850
should really like slash may slash will

00:09:48,060 --> 00:09:53,800
create others we had absolutely nothing

00:09:51,850 --> 00:09:56,350
that managed what we called Killah for

00:09:53,800 --> 00:09:59,019
Thrilla this bash while loop that was

00:09:56,350 --> 00:10:02,649
just killing pods that are ant or every

00:09:59,019 --> 00:10:05,199
15 seconds at random so now we kind of

00:10:02,649 --> 00:10:07,180
probably should have had another process

00:10:05,199 --> 00:10:09,040
to manage our process that was keeping

00:10:07,180 --> 00:10:11,050
us alive and this is the problem with

00:10:09,040 --> 00:10:14,410
complexity is that as you add things

00:10:11,050 --> 00:10:16,269
that are keeping you up like keeping you

00:10:14,410 --> 00:10:19,089
up in the sense of like your website

00:10:16,269 --> 00:10:23,190
still working not up up at night they

00:10:19,089 --> 00:10:23,190
add complexity in that in themselves

00:10:23,339 --> 00:10:28,660
nobody knew it was even there - the

00:10:26,079 --> 00:10:30,310
incident responders this thing could

00:10:28,660 --> 00:10:31,570
have been going and going and somebody

00:10:30,310 --> 00:10:33,940
would have gone no what is this thing

00:10:31,570 --> 00:10:35,380
killing pods every 15 seconds a natural

00:10:33,940 --> 00:10:38,500
inclination would be to get rid of that

00:10:35,380 --> 00:10:40,089
and they would have no idea that that

00:10:38,500 --> 00:10:44,980
was actually the thing that was life

00:10:40,089 --> 00:10:48,250
support for all of the website as a

00:10:44,980 --> 00:10:49,600
paper from 1983 which is like where I'm

00:10:48,250 --> 00:10:51,130
pretty sure we actually solved all

00:10:49,600 --> 00:10:53,199
software problems and we're just like

00:10:51,130 --> 00:10:56,470
slowly catching huh

00:10:53,199 --> 00:10:58,839
call the irony's of automation and it

00:10:56,470 --> 00:11:00,910
has a bunch of great stuff and a highly

00:10:58,839 --> 00:11:03,459
recommended read it's about five pages

00:11:00,910 --> 00:11:05,480
long I think but physical skills

00:11:03,459 --> 00:11:07,910
deteriorate when they are not you

00:11:05,480 --> 00:11:09,430
used particularly the refinements of

00:11:07,910 --> 00:11:12,019
gain and timing

00:11:09,430 --> 00:11:15,019
this means that formerly experienced

00:11:12,019 --> 00:11:16,820
operators who have been monitoring an

00:11:15,019 --> 00:11:21,949
automated process may now be an

00:11:16,820 --> 00:11:23,720
inexperienced one it if they take over

00:11:21,949 --> 00:11:25,370
they may set the process into

00:11:23,720 --> 00:11:26,990
oscillation so this is what I'm going

00:11:25,370 --> 00:11:30,620
back to it's like we built this

00:11:26,990 --> 00:11:33,440
automation to save ourselves and we were

00:11:30,620 --> 00:11:35,029
keeping this process there to kind of

00:11:33,440 --> 00:11:36,740
you know prevent the website from going

00:11:35,029 --> 00:11:39,019
down but if you imagine if we had left

00:11:36,740 --> 00:11:41,240
for a year maybe even six months and

00:11:39,019 --> 00:11:42,889
somebody else comes in they and they're

00:11:41,240 --> 00:11:44,779
not an experienced operator they don't

00:11:42,889 --> 00:11:46,310
know why it's there and they're gonna

00:11:44,779 --> 00:11:48,949
get rid of it and they're gonna set the

00:11:46,310 --> 00:11:53,329
process into an oscillation as team by

00:11:48,949 --> 00:11:55,850
irony's of automation we build

00:11:53,329 --> 00:11:58,610
automation automation out of perceived

00:11:55,850 --> 00:12:01,880
need and the people that maintain

00:11:58,610 --> 00:12:05,690
software without the automation tend to

00:12:01,880 --> 00:12:08,180
be the people that also build it but

00:12:05,690 --> 00:12:11,949
software automation is software and

00:12:08,180 --> 00:12:14,540
software as we find all the time breaks

00:12:11,949 --> 00:12:16,579
therefore we must be cautious about the

00:12:14,540 --> 00:12:18,680
automation that we introduce into our

00:12:16,579 --> 00:12:20,779
systems because you're adding complexity

00:12:18,680 --> 00:12:23,449
with every bit of automation that you're

00:12:20,779 --> 00:12:29,449
trying to reduce complexity the irony of

00:12:23,449 --> 00:12:32,449
it for example spinnaker can be used for

00:12:29,449 --> 00:12:35,050
our incident in theory we could move our

00:12:32,449 --> 00:12:38,480
killer for thrill it's a spinnaker

00:12:35,050 --> 00:12:39,940
spinnaker offers cron triggers it can

00:12:38,480 --> 00:12:42,199
update crew B'nai these resources

00:12:39,940 --> 00:12:48,410
another subtle advantage of it it's

00:12:42,199 --> 00:12:51,050
battle-tested you can actually build our

00:12:48,410 --> 00:12:53,779
bash script that was killing pods at

00:12:51,050 --> 00:12:57,529
random in spinnaker this is an option

00:12:53,779 --> 00:12:58,940
and if I were to do it again I would do

00:12:57,529 --> 00:13:00,829
it this way I would create a cron

00:12:58,940 --> 00:13:04,519
trigger in our deployed instance of

00:13:00,829 --> 00:13:06,740
spinnaker every one minute and then I

00:13:04,519 --> 00:13:09,230
would configure a patch step for our

00:13:06,740 --> 00:13:12,889
kubernetes manifest that updates an

00:13:09,230 --> 00:13:16,699
annotation on the pod which will give me

00:13:12,889 --> 00:13:17,880
new pods every minute I've resolved the

00:13:16,699 --> 00:13:20,610
problem

00:13:17,880 --> 00:13:23,870
and it's not hidden away there's

00:13:20,610 --> 00:13:26,430
auditability I can see when it last ran

00:13:23,870 --> 00:13:27,720
people can't delete this randomly if

00:13:26,430 --> 00:13:32,550
they don't have that proper access

00:13:27,720 --> 00:13:35,940
control is this a bad idea maybe kind of

00:13:32,550 --> 00:13:38,420
if we wrote this ourselves in bash and

00:13:35,940 --> 00:13:42,389
deployed it is that actually better I

00:13:38,420 --> 00:13:44,370
don't know depends the moratorium was

00:13:42,389 --> 00:13:46,410
during the holidays and we didn't want

00:13:44,370 --> 00:13:49,350
to lift the moratorium just because of

00:13:46,410 --> 00:13:51,600
this memory problem spinnaker is

00:13:49,350 --> 00:13:53,610
designed to initialize and run tasks so

00:13:51,600 --> 00:13:57,300
in my opinion use it to initialize any

00:13:53,610 --> 00:14:00,029
kind of task you can because for this

00:13:57,300 --> 00:14:01,829
moratorium to really go into this there

00:14:00,029 --> 00:14:04,380
are a lot of factors that kind of go

00:14:01,829 --> 00:14:08,310
into this in a tree this was HR software

00:14:04,380 --> 00:14:10,019
that included this moratorium and when

00:14:08,310 --> 00:14:11,519
you go into the end of the year you have

00:14:10,019 --> 00:14:15,300
what's called year-end your start and

00:14:11,519 --> 00:14:17,370
what that introduces is taxes are ending

00:14:15,300 --> 00:14:19,199
so payroll kind of has to button up a

00:14:17,370 --> 00:14:22,079
ton of things in this often using the

00:14:19,199 --> 00:14:24,569
software and then benefits begin on Jan

00:14:22,079 --> 00:14:26,089
1 so all the sudden you have a lot of

00:14:24,569 --> 00:14:29,939
things happening in the holiday season

00:14:26,089 --> 00:14:33,360
so the moratorium was kind of saying in

00:14:29,939 --> 00:14:35,310
a lot of ways so we had to kind of get

00:14:33,360 --> 00:14:36,720
around the moratorium in some in some

00:14:35,310 --> 00:14:39,540
ways and that's why we built a batch

00:14:36,720 --> 00:14:42,600
while loop because here's the thing that

00:14:39,540 --> 00:14:45,170
I want to drive home here spinnaker is

00:14:42,600 --> 00:14:49,160
nothing more than a workflow engine

00:14:45,170 --> 00:14:51,569
great nobody's lunging at me that's good

00:14:49,160 --> 00:14:54,779
it's a workflow engine that comes with

00:14:51,569 --> 00:14:56,370
batteries for continuous deployment if

00:14:54,779 --> 00:14:58,410
you really look at the guts of spinnaker

00:14:56,370 --> 00:15:02,970
it's a workflow engine that's really

00:14:58,410 --> 00:15:05,160
good at deploying things unpopular

00:15:02,970 --> 00:15:08,610
opinion maybe spinnaker should be the

00:15:05,160 --> 00:15:10,740
default for your incident one offs it

00:15:08,610 --> 00:15:15,509
it's a deployed solution that you

00:15:10,740 --> 00:15:18,300
monitor and observe already right it's

00:15:15,509 --> 00:15:23,220
great at running tasks and making sure

00:15:18,300 --> 00:15:27,630
that they keep running it has

00:15:23,220 --> 00:15:30,600
auditability whereas one a one-off

00:15:27,630 --> 00:15:31,530
config change may have no audit trail in

00:15:30,600 --> 00:15:34,500
the heat of the moment

00:15:31,530 --> 00:15:36,930
and when you need to actually figure out

00:15:34,500 --> 00:15:38,340
why a process or script or something

00:15:36,930 --> 00:15:40,800
exists in the first place

00:15:38,340 --> 00:15:43,370
figuring out who built that could be a

00:15:40,800 --> 00:15:43,370
challenge in itself

00:15:44,360 --> 00:15:50,370
you can keep strategies around and

00:15:47,360 --> 00:15:52,110
disable them easily this is another

00:15:50,370 --> 00:15:55,980
advantage if you're building one offs

00:15:52,110 --> 00:15:58,020
it's never a one-off you should always

00:15:55,980 --> 00:16:00,600
keep your one offs around I can't tell

00:15:58,020 --> 00:16:04,290
you how many github just I have of one

00:16:00,600 --> 00:16:05,520
offs that I still use all the time and

00:16:04,290 --> 00:16:07,080
that's one of the great things about

00:16:05,520 --> 00:16:09,240
spinnaker pipelines is you can actually

00:16:07,080 --> 00:16:15,570
keep these pieces around and treat them

00:16:09,240 --> 00:16:17,760
as small units of work because spinnaker

00:16:15,570 --> 00:16:19,680
is great for small units of work and

00:16:17,760 --> 00:16:23,220
that's great news for Incident Response

00:16:19,680 --> 00:16:25,950
this is a pipeline to to actually roll

00:16:23,220 --> 00:16:27,540
pods there is a way to actually click

00:16:25,950 --> 00:16:31,140
now in spinnaker you can do a rolling

00:16:27,540 --> 00:16:33,840
restart but previously we just had a

00:16:31,140 --> 00:16:36,839
pipeline that was one step and that's

00:16:33,840 --> 00:16:39,870
okay it's okay to have pipelines that

00:16:36,839 --> 00:16:45,480
are really good at one thing because

00:16:39,870 --> 00:16:49,650
they're very easy to execute and first

00:16:45,480 --> 00:16:51,900
incidence small automations matter by

00:16:49,650 --> 00:16:54,360
keeping automation small restarting

00:16:51,900 --> 00:16:59,520
pause as an example we give more

00:16:54,360 --> 00:17:02,730
possibilities to responders you want to

00:16:59,520 --> 00:17:05,579
create what I call levers and knobs for

00:17:02,730 --> 00:17:09,449
incident responders to pull and turn to

00:17:05,579 --> 00:17:11,730
remediate issues you do not want to get

00:17:09,449 --> 00:17:13,800
fancy when you create pipelines for

00:17:11,730 --> 00:17:15,959
incident response because then you're

00:17:13,800 --> 00:17:16,589
orchestrating orchestration and that's a

00:17:15,959 --> 00:17:19,530
problem

00:17:16,589 --> 00:17:21,660
right you're you're getting even more

00:17:19,530 --> 00:17:23,220
deep in the moat and the weeds of

00:17:21,660 --> 00:17:27,180
actually trying to resolve incidents

00:17:23,220 --> 00:17:29,010
with with pipelines so for example don't

00:17:27,180 --> 00:17:31,200
create a pipeline that resource pods

00:17:29,010 --> 00:17:34,260
increases memory and notifies a slack

00:17:31,200 --> 00:17:35,760
room create an individual things because

00:17:34,260 --> 00:17:38,550
it's pretty rare that you're ever going

00:17:35,760 --> 00:17:40,500
to have a bat usage again because you

00:17:38,550 --> 00:17:43,140
might create that pipeline for an

00:17:40,500 --> 00:17:45,030
incident that has already happened but

00:17:43,140 --> 00:17:47,610
here's the thing that incident is

00:17:45,030 --> 00:17:49,920
likely not gonna happen again you will

00:17:47,610 --> 00:17:51,450
likely need a way to roll pods again you

00:17:49,920 --> 00:17:53,220
will likely need a way to increase

00:17:51,450 --> 00:17:56,250
memory you will likely need a way to

00:17:53,220 --> 00:18:02,370
notify people so create them as small

00:17:56,250 --> 00:18:04,710
units or levers and knobs and now you

00:18:02,370 --> 00:18:06,210
might be asking the question well what

00:18:04,710 --> 00:18:10,100
if spinnaker doesn't support the

00:18:06,210 --> 00:18:14,340
automation that I want good question

00:18:10,100 --> 00:18:17,310
build it yourself because spinnaker has

00:18:14,340 --> 00:18:19,950
web looks you can build an application

00:18:17,310 --> 00:18:23,880
that can be initiated via Spinnaker's

00:18:19,950 --> 00:18:25,680
web hooks in a web hook stage and this

00:18:23,880 --> 00:18:27,870
creates less strain on you as a

00:18:25,680 --> 00:18:31,320
developer in your software and how

00:18:27,870 --> 00:18:33,810
something is initiated I have worked at

00:18:31,320 --> 00:18:35,760
eight different companies and almost

00:18:33,810 --> 00:18:38,730
every single one has an internal

00:18:35,760 --> 00:18:42,150
application that can run random tasks

00:18:38,730 --> 00:18:45,990
and it's internally hosted on the VPN

00:18:42,150 --> 00:18:48,390
it's some rails app PHP Django and it

00:18:45,990 --> 00:18:51,150
just runs random things but the problem

00:18:48,390 --> 00:18:53,100
with that is that now you're hosting

00:18:51,150 --> 00:18:54,950
that application and now you have to

00:18:53,100 --> 00:18:57,930
have automation to deploy that and

00:18:54,950 --> 00:18:59,780
monitor that and make sure that it's

00:18:57,930 --> 00:19:04,830
always still running if the process dies

00:18:59,780 --> 00:19:07,410
the irony of the automation and not only

00:19:04,830 --> 00:19:10,110
that it creates uniformity in how you

00:19:07,410 --> 00:19:15,000
trigger levers and knobs for

00:19:10,110 --> 00:19:17,540
applications so use spinnaker

00:19:15,000 --> 00:19:21,720
expressions to send dynamic payloads

00:19:17,540 --> 00:19:24,090
it's not it's a great idea to be able to

00:19:21,720 --> 00:19:27,990
parameterize these small units of work

00:19:24,090 --> 00:19:31,590
if I build an application that knows how

00:19:27,990 --> 00:19:34,080
to flush a cue so many any old cube

00:19:31,590 --> 00:19:35,730
pub/sub Kafka I don't know something

00:19:34,080 --> 00:19:38,340
that just acknowledges all the messages

00:19:35,730 --> 00:19:40,070
I can build the software that'll do that

00:19:38,340 --> 00:19:42,960
spinnaker doesn't have that primitive

00:19:40,070 --> 00:19:44,640
but I know how to build that but I don't

00:19:42,960 --> 00:19:48,600
want to build the thing that has a UI to

00:19:44,640 --> 00:19:51,360
trigger this ACL logging in all of that

00:19:48,600 --> 00:19:53,310
I don't want to build that I just want a

00:19:51,360 --> 00:19:57,180
way that I can just push a button to

00:19:53,310 --> 00:19:58,770
make that automation run and spinnaker

00:19:57,180 --> 00:20:00,390
is a great way to do

00:19:58,770 --> 00:20:03,150
because it unlocks a world of

00:20:00,390 --> 00:20:05,790
possibilities you can build now very

00:20:03,150 --> 00:20:11,280
small units of automation and trigger

00:20:05,790 --> 00:20:13,800
them via spinnaker because

00:20:11,280 --> 00:20:15,300
standardization goes a long way why

00:20:13,800 --> 00:20:18,960
would you want to create another web app

00:20:15,300 --> 00:20:23,220
it's not fun a lot of sometimes I don't

00:20:18,960 --> 00:20:25,230
know your life i've created web and

00:20:23,220 --> 00:20:27,500
applications for triggering simple tasks

00:20:25,230 --> 00:20:30,300
like restarting scaling flushing queues

00:20:27,500 --> 00:20:32,429
but now i have another web app to host i

00:20:30,300 --> 00:20:35,550
have to make sure it's stable live has

00:20:32,429 --> 00:20:38,400
tests for other reason other pieces of

00:20:35,550 --> 00:20:41,070
it but if you're already using spinnaker

00:20:38,400 --> 00:20:43,910
for deploys you have a tool that is

00:20:41,070 --> 00:20:46,890
already hosted that has a CL has audits

00:20:43,910 --> 00:20:49,770
there's no reason to not use it as the

00:20:46,890 --> 00:20:52,260
way to push buttons it's a great

00:20:49,770 --> 00:20:54,179
candidate to actually start adding small

00:20:52,260 --> 00:21:01,440
automation tasks and Incident Response

00:20:54,179 --> 00:21:05,870
pieces to I'll say it again spinnaker is

00:21:01,440 --> 00:21:05,870
nothing more than a workflow engine

00:21:07,280 --> 00:21:10,800
closing up and I'm like real quick on my

00:21:10,260 --> 00:21:12,900
time here

00:21:10,800 --> 00:21:15,420
so spinnaker is more than a continuous

00:21:12,900 --> 00:21:18,840
deployment tool it is a workflow engine

00:21:15,420 --> 00:21:19,980
that can run tasks at scale big I mean

00:21:18,840 --> 00:21:21,510
just like look at that thing over there

00:21:19,980 --> 00:21:24,059
that's a lot of big names using

00:21:21,510 --> 00:21:27,660
spinnaker to deploy things it can run

00:21:24,059 --> 00:21:29,610
tasks at scale that is proven it has all

00:21:27,660 --> 00:21:31,770
of the primitives necessary for defining

00:21:29,610 --> 00:21:34,500
small units of work what I call levers

00:21:31,770 --> 00:21:36,150
and knobs when it comes to instance

00:21:34,500 --> 00:21:38,010
spinner kripak can be used to give

00:21:36,150 --> 00:21:41,520
responders the necessary tools to

00:21:38,010 --> 00:21:43,140
mitigate quickly engineers have the best

00:21:41,520 --> 00:21:45,510
intent when it comes to resolving an

00:21:43,140 --> 00:21:47,910
incident and they will do what they need

00:21:45,510 --> 00:21:50,760
to do that needs to be done to resolve

00:21:47,910 --> 00:21:53,309
an incident and giving them these quick

00:21:50,760 --> 00:22:01,290
ways to do those things that is

00:21:53,309 --> 00:22:04,110
repeatable is key so small units define

00:22:01,290 --> 00:22:05,940
your small units of work as pipelines or

00:22:04,110 --> 00:22:09,179
strategies for engineers to use in

00:22:05,940 --> 00:22:13,010
spinnaker levers make the easy make the

00:22:09,179 --> 00:22:15,870
levers easy to pull with sandy

00:22:13,010 --> 00:22:18,390
nobs give the ability to parameterize

00:22:15,870 --> 00:22:21,620
the tasks using spinnaker expressions to

00:22:18,390 --> 00:22:23,670
give slightly more flexibility an

00:22:21,620 --> 00:22:26,520
implementation add only what is

00:22:23,670 --> 00:22:28,800
necessary for responders based on what

00:22:26,520 --> 00:22:31,410
you have learned from past incidents

00:22:28,800 --> 00:22:33,900
don't add random tasks because you think

00:22:31,410 --> 00:22:36,330
you'll need it this is a really this is

00:22:33,900 --> 00:22:38,820
a gotcha and all instant response is

00:22:36,330 --> 00:22:41,310
trying to pre optimize for an incident

00:22:38,820 --> 00:22:44,900
that actually hasn't happened yet and it

00:22:41,310 --> 00:22:44,900
can be a huge waste of time sometimes

00:22:46,190 --> 00:22:52,170
thank you for coming to this incredibly

00:22:49,890 --> 00:22:55,590
little quick talk but my name is Robert

00:22:52,170 --> 00:22:57,270
Robert a fire hydrant - IO I'm at Bobby

00:22:55,590 --> 00:22:59,400
tables on Twitter that's my github

00:22:57,270 --> 00:23:01,980
that's our website I'm also a San Diego

00:22:59,400 --> 00:23:03,870
native so if you want tips and tricks on

00:23:01,980 --> 00:23:06,030
where to eat drink go to the zoo things

00:23:03,870 --> 00:23:10,300
like that please feel free to find me

00:23:06,030 --> 00:23:12,680
and have a conversation Thanks thank you

00:23:10,300 --> 00:23:15,240
[Applause]

00:23:12,680 --> 00:23:17,910
all right we're gonna take some

00:23:15,240 --> 00:23:19,740
questions here for for a few minutes but

00:23:17,910 --> 00:23:20,970
before we start taking questions I want

00:23:19,740 --> 00:23:23,490
to make a quick announcement

00:23:20,970 --> 00:23:26,040
please go on to the spinnaker summit app

00:23:23,490 --> 00:23:28,980
buy motive and rate and give feedback

00:23:26,040 --> 00:23:31,410
for this talk the conference is

00:23:28,980 --> 00:23:33,030
collecting feedback and will give

00:23:31,410 --> 00:23:35,100
feedback to the presenter so please go

00:23:33,030 --> 00:23:38,240
on fill that out now if there's any

00:23:35,100 --> 00:23:38,240
questions please raise your hand

00:23:46,279 --> 00:23:50,330
you mentioned something about

00:23:47,649 --> 00:23:51,860
controlling access to spinnaker a sort

00:23:50,330 --> 00:23:53,059
of the Gateway because a lot of these

00:23:51,860 --> 00:23:54,889
one-offs right you don't wanna give them

00:23:53,059 --> 00:23:56,419
the hands of everyone sure how did you

00:23:54,889 --> 00:23:59,389
do that or what is the access model at

00:23:56,419 --> 00:24:00,710
five hundred we were just using the

00:23:59,389 --> 00:24:02,419
baked and stuff like we didn't do

00:24:00,710 --> 00:24:05,720
anything think fancy like we're using

00:24:02,419 --> 00:24:07,759
like the develop the developer github

00:24:05,720 --> 00:24:11,690
teams like mapping for who can actually

00:24:07,759 --> 00:24:13,899
access things yeah sorry nothing fancy I

00:24:11,690 --> 00:24:18,399
wish I had a better answer thank you

00:24:13,899 --> 00:24:18,399
question in the back on the Adobe booth

00:24:21,549 --> 00:24:28,629
so you mentioned you keep the pipeline

00:24:25,940 --> 00:24:32,809
small and is that fun actually I can't

00:24:28,629 --> 00:24:35,059
hello can you hear me yeah oh sorry so

00:24:32,809 --> 00:24:38,029
you mentioned keep the unit small and

00:24:35,059 --> 00:24:39,440
keep the pipeline small over a period of

00:24:38,029 --> 00:24:41,480
time wouldn't you have a lot of

00:24:39,440 --> 00:24:44,809
pipelines and if so how do you manage

00:24:41,480 --> 00:24:47,690
all of those different use cases that

00:24:44,809 --> 00:24:49,940
might be very small unit to work and

00:24:47,690 --> 00:24:52,399
combine them together or a period of

00:24:49,940 --> 00:24:54,230
time when you have more workflows coming

00:24:52,399 --> 00:24:58,249
up or more use cases to combine them

00:24:54,230 --> 00:24:59,989
together yeah so the reason I like

00:24:58,249 --> 00:25:01,850
keeping those pipelines as small units

00:24:59,989 --> 00:25:03,830
of work is that because spinnaker has

00:25:01,850 --> 00:25:06,139
the ability to trigger other pipelines

00:25:03,830 --> 00:25:08,119
from pipelines then you can start to

00:25:06,139 --> 00:25:10,609
create those orchestrations if you need

00:25:08,119 --> 00:25:12,769
to I like to think of spinnaker

00:25:10,609 --> 00:25:14,450
pipelines as kind of Lego bricks where

00:25:12,769 --> 00:25:18,350
you just want to give the ability to

00:25:14,450 --> 00:25:19,549
really build what you want to build and

00:25:18,350 --> 00:25:21,259
then you can kind of build the

00:25:19,549 --> 00:25:23,409
instructions around how that actually

00:25:21,259 --> 00:25:26,450
gets built if that kind of makes sense

00:25:23,409 --> 00:25:28,249
you can have and I it makes a ton of

00:25:26,450 --> 00:25:29,629
sense for certain one-off things to have

00:25:28,249 --> 00:25:31,609
a pipeline that's like four deployments

00:25:29,629 --> 00:25:33,710
that's a little bit different but I

00:25:31,609 --> 00:25:36,049
think for automation tasks maybe it's

00:25:33,710 --> 00:25:38,119
like scaling up things or whatever

00:25:36,049 --> 00:25:40,039
whatever have you I think those are best

00:25:38,119 --> 00:25:42,169
as small units of work that has maybe

00:25:40,039 --> 00:25:44,659
another pipeline on top of it that

00:25:42,169 --> 00:25:47,840
orchestrates those small units because

00:25:44,659 --> 00:25:49,850
again this is more like giving giving

00:25:47,840 --> 00:25:52,309
options to developers when they really

00:25:49,850 --> 00:25:54,529
need them to do certain things because a

00:25:52,309 --> 00:25:56,960
lot of companies don't have SSH access

00:25:54,529 --> 00:25:58,430
they don't have the ability to really

00:25:56,960 --> 00:26:01,310
get into

00:25:58,430 --> 00:26:02,990
a kernel so that's really where this

00:26:01,310 --> 00:26:08,050
this talk is coming from is addressing

00:26:02,990 --> 00:26:08,050
those kind of needs yeah

00:26:10,300 --> 00:26:16,700
so these pipe so these pipelines are

00:26:13,880 --> 00:26:18,650
tied to each application or projects

00:26:16,700 --> 00:26:21,970
right so how do you replicate from one

00:26:18,650 --> 00:26:23,960
to another yeah that's a good question

00:26:21,970 --> 00:26:28,880
how do you replicate from one to another

00:26:23,960 --> 00:26:31,070
so that one is kind of hard because you

00:26:28,880 --> 00:26:33,080
do have to kind of copy a pipeline onto

00:26:31,070 --> 00:26:37,370
another application in spinnaker to make

00:26:33,080 --> 00:26:39,170
that work that's why I think the what

00:26:37,370 --> 00:26:41,930
we've done is like we've made an

00:26:39,170 --> 00:26:45,650
application that isn't tied or backed by

00:26:41,930 --> 00:26:48,710
any resource in kubernetes and only used

00:26:45,650 --> 00:26:49,790
it for like web hooks because you can

00:26:48,710 --> 00:26:51,320
still get away with like running

00:26:49,790 --> 00:26:53,930
pipelines that aren't backed by anything

00:26:51,320 --> 00:26:56,620
in resources so that's kind of how we've

00:26:53,930 --> 00:26:56,620

YouTube URL: https://www.youtube.com/watch?v=kIEnHFn-Szw


