Title: Cameron Motevasselani and Brandon Powell "Spinnaker Plugins: Extending..." - Spinnaker Summit 2019
Publication date: 2019-12-09
Playlist: Spinnaker Summit 2019
Description: 
	The third annual Spinnaker Summit (Diamond Sponsors: Netflix, Google and Armory) was held at the Hard Rock Hotel in San Diego, CA from November 15-17, 2019 and welcomed over 500 members of the rapidly growing Spinnaker open source community.
Captions: 
	00:00:09,800 --> 00:00:12,840
all right welcome everybody thank you

00:00:12,060 --> 00:00:14,540
for joining us today

00:00:12,840 --> 00:00:16,370
my name is Evan I'm with our Murray

00:00:14,540 --> 00:00:19,410
self-knowledge here in this room today

00:00:16,370 --> 00:00:21,300
questions I know I'm here to introduce

00:00:19,410 --> 00:00:22,710
today though Karen and Brandon from

00:00:21,300 --> 00:00:24,689
armory who've been doing some stuff with

00:00:22,710 --> 00:00:26,279
accessibility instead of Richard plugins

00:00:24,689 --> 00:00:27,540
and they'd love to share what they've

00:00:26,279 --> 00:00:34,110
been working on ideas so please give a

00:00:27,540 --> 00:00:35,970
hand thank you hey everyone I'm Cameron

00:00:34,110 --> 00:00:38,070
motive Bossa Lonnie it's quite a long

00:00:35,970 --> 00:00:40,710
last name there I'm a software engineer

00:00:38,070 --> 00:00:43,609
over at armory as well as a one of the

00:00:40,710 --> 00:00:46,800
co leads for the platform sake I'm

00:00:43,609 --> 00:00:48,930
Brandon Powell a very short name but

00:00:46,800 --> 00:00:50,460
people tend to can call me Brendon not

00:00:48,930 --> 00:00:52,590
Brandon that's okay

00:00:50,460 --> 00:00:58,050
I'll answer to pretty much anything so

00:00:52,590 --> 00:00:59,609
plate for dinner laughs like to have a

00:00:58,050 --> 00:01:01,679
little bit of fun I'm the muscle of

00:00:59,609 --> 00:01:08,520
software engineering at armory and I

00:01:01,679 --> 00:01:11,010
co-lead the security sig cool so today

00:01:08,520 --> 00:01:13,470
we're gonna be talking about plugins not

00:01:11,010 --> 00:01:16,200
plugins per se but plug-in framework we

00:01:13,470 --> 00:01:18,630
want everyone to be able to use plugins

00:01:16,200 --> 00:01:20,460
and create plugins for their spinnaker

00:01:18,630 --> 00:01:22,890
installation so let's start off with

00:01:20,460 --> 00:01:23,850
talking about what what are plugins in

00:01:22,890 --> 00:01:25,439
the first place right

00:01:23,850 --> 00:01:27,600
so plugins are used to extend

00:01:25,439 --> 00:01:29,159
functionality for an existing project in

00:01:27,600 --> 00:01:31,710
this case we're talking about spinnaker

00:01:29,159 --> 00:01:32,610
so spinnaker has a lot of functionality

00:01:31,710 --> 00:01:36,299
right out of the box

00:01:32,610 --> 00:01:38,759
but it doesn't always match exactly what

00:01:36,299 --> 00:01:40,979
organizations need so plugins are a

00:01:38,759 --> 00:01:44,130
great way of fitting that extra like

00:01:40,979 --> 00:01:45,540
five ten percent again plugins add

00:01:44,130 --> 00:01:47,549
additional functionality that that

00:01:45,540 --> 00:01:49,710
doesn't already exist can also augment

00:01:47,549 --> 00:01:53,579
functionality that that's currently in

00:01:49,710 --> 00:01:57,259
their project you can utilize lifecycle

00:01:53,579 --> 00:02:00,750
hooks as well in order to hook in with

00:01:57,259 --> 00:02:06,689
you know pipelines before and after

00:02:00,750 --> 00:02:09,780
stage runs etc etc so who creates

00:02:06,689 --> 00:02:12,830
plugins so so south service providers

00:02:09,780 --> 00:02:16,500
would create plugins so an APM provider

00:02:12,830 --> 00:02:18,970
New Relic they would would be great if

00:02:16,500 --> 00:02:21,610
they had a plug-in that you could have

00:02:18,970 --> 00:02:25,320
stage call out plugins - sorry - New

00:02:21,610 --> 00:02:28,000
Relic and get some response from them

00:02:25,320 --> 00:02:30,490
Software Defined Networking companies if

00:02:28,000 --> 00:02:31,300
you want to manage and augment your

00:02:30,490 --> 00:02:35,590
infrastructure

00:02:31,300 --> 00:02:38,800
you could call out to their services and

00:02:35,590 --> 00:02:41,980
then you can utilize their services

00:02:38,800 --> 00:02:43,360
directly from spinnaker also cloud

00:02:41,980 --> 00:02:46,630
providers so that would be a great thing

00:02:43,360 --> 00:02:48,490
to have in cloud drivers the ability to

00:02:46,630 --> 00:02:51,640
split up which cloud providers are

00:02:48,490 --> 00:02:54,340
actually on your cloud driver instance

00:02:51,640 --> 00:02:57,940
if you deploy to AWS for instance you

00:02:54,340 --> 00:02:59,530
don't need as your cloud around you

00:02:57,940 --> 00:03:03,459
don't need an Oracle cloud you only

00:02:59,530 --> 00:03:04,900
really need a ws spinnaker

00:03:03,459 --> 00:03:09,209
administrators and operators would also

00:03:04,900 --> 00:03:11,890
be key contributors to creating plugins

00:03:09,209 --> 00:03:15,640
why is that is you know a lot of

00:03:11,890 --> 00:03:19,420
companies have a custom infrastructure

00:03:15,640 --> 00:03:22,540
and tooling that deigning spinnaker to

00:03:19,420 --> 00:03:26,290
hook in with so in order to do that they

00:03:22,540 --> 00:03:28,000
need to create a plug-in so to do that

00:03:26,290 --> 00:03:28,650
work they want to be able to share it

00:03:28,000 --> 00:03:31,420
around

00:03:28,650 --> 00:03:33,910
across the company and plugins are a

00:03:31,420 --> 00:03:35,080
great way to do that they want to be

00:03:33,910 --> 00:03:37,269
able to provide a golden path to

00:03:35,080 --> 00:03:39,310
production and you can use run job

00:03:37,269 --> 00:03:42,640
states sages today to basically do

00:03:39,310 --> 00:03:44,440
anything but if you have a plug-in that

00:03:42,640 --> 00:03:45,670
provides a custom stage you can then

00:03:44,440 --> 00:03:47,590
share that around and that's one of the

00:03:45,670 --> 00:03:49,540
beauty the beautiful things about

00:03:47,590 --> 00:03:53,110
spinnaker is it codifies best practices

00:03:49,540 --> 00:03:57,760
in two stages and anyone who wants to

00:03:53,110 --> 00:04:00,790
extend spinnaker today can hop in and

00:03:57,760 --> 00:04:03,100
extend it you don't have to learn all

00:04:00,790 --> 00:04:07,450
the spinnaker internals but it

00:04:03,100 --> 00:04:11,769
definitely helps today so what's the

00:04:07,450 --> 00:04:14,230
motivation here for four plugins we

00:04:11,769 --> 00:04:16,630
talked about some but we want to lower

00:04:14,230 --> 00:04:18,609
the barrier of entry to extend spinnaker

00:04:16,630 --> 00:04:21,989
functionality how many people here

00:04:18,609 --> 00:04:21,989
extends vinegar today

00:04:22,860 --> 00:04:30,449
it's a good amount of people who wants

00:04:25,349 --> 00:04:33,569
to extend it yeah that's about everyone

00:04:30,449 --> 00:04:35,099
here awesome perfect so it's you know

00:04:33,569 --> 00:04:37,860
it's actually not that easy to extend

00:04:35,099 --> 00:04:40,409
spinnaker you have to really know the

00:04:37,860 --> 00:04:42,210
code you have you have to know how the

00:04:40,409 --> 00:04:45,419
different services interact or the right

00:04:42,210 --> 00:04:49,349
place to put your code you need to know

00:04:45,419 --> 00:04:51,030
best practices along the lines of

00:04:49,349 --> 00:04:52,680
developing spinnaker and this is

00:04:51,030 --> 00:04:54,659
particularly difficult as a new

00:04:52,680 --> 00:04:58,349
developer you coming into this project

00:04:54,659 --> 00:04:58,830
there's nine services or so and where do

00:04:58,349 --> 00:05:01,680
I start

00:04:58,830 --> 00:05:03,210
right additionally if you wanted to

00:05:01,680 --> 00:05:05,879
extend spinnaker you need to maintain

00:05:03,210 --> 00:05:07,680
and keep up your extensions right so it

00:05:05,879 --> 00:05:09,150
makes upgrading harder which then

00:05:07,680 --> 00:05:13,500
usually doesn't happen and causes brain

00:05:09,150 --> 00:05:15,569
drain how many people I guess we already

00:05:13,500 --> 00:05:19,379
asked this question who wants to extend

00:05:15,569 --> 00:05:21,300
it's been occurred today but we want to

00:05:19,379 --> 00:05:25,409
have a lean core and expansive ecosystem

00:05:21,300 --> 00:05:27,419
for for spinnaker what does that mean we

00:05:25,409 --> 00:05:31,020
want to be able to test my spinnaker for

00:05:27,419 --> 00:05:34,680
your or on your use case or give you the

00:05:31,020 --> 00:05:36,449
ability to do to do so we want to you

00:05:34,680 --> 00:05:39,229
talked about this a lot as saying we

00:05:36,449 --> 00:05:39,229
want to meet you where you're at

00:05:39,620 --> 00:05:45,539
additionally this actually enables us to

00:05:42,779 --> 00:05:48,629
have smaller binaries which reduces the

00:05:45,539 --> 00:05:51,020
threat service and reduces the core code

00:05:48,629 --> 00:05:51,020
complexity

00:05:51,879 --> 00:05:56,949
we want to also make a simple and stable

00:05:55,089 --> 00:06:00,729
interfaces so that Pleasant creators can

00:05:56,949 --> 00:06:03,279
work against one interface and then have

00:06:00,729 --> 00:06:07,379
confidence that it works properly so

00:06:03,279 --> 00:06:07,379
this is lowering the barrier of entry so

00:06:07,860 --> 00:06:13,689
there's other projects that have plugins

00:06:10,449 --> 00:06:17,559
we're not the first don't want to say

00:06:13,689 --> 00:06:20,069
that we're taking a lot of input from

00:06:17,559 --> 00:06:23,080
these but you can see how plugins are

00:06:20,069 --> 00:06:25,059
they enable projects to be successful so

00:06:23,080 --> 00:06:27,069
all these projects here Jenkins Eclipse

00:06:25,059 --> 00:06:28,599
WordPress throughout popular projects

00:06:27,069 --> 00:06:32,559
that are made more popular because of

00:06:28,599 --> 00:06:33,759
the plugins you want to integrate with

00:06:32,559 --> 00:06:37,029
the service well there's a plug-in for

00:06:33,759 --> 00:06:38,679
that Jenkins has tons of plugins that

00:06:37,029 --> 00:06:41,559
integrate with all different kinds of

00:06:38,679 --> 00:06:44,949
services so that it matches the needs of

00:06:41,559 --> 00:06:47,949
your organization if you want to improve

00:06:44,949 --> 00:06:50,279
ease of use of our developer experience

00:06:47,949 --> 00:06:52,689
and add greater adoption well eclipse

00:06:50,279 --> 00:06:54,849
has a bunch of plugins that hey if you

00:06:52,689 --> 00:06:57,969
have a plugin that eclipse can work with

00:06:54,849 --> 00:06:58,990
you you just make it easier for and

00:06:57,969 --> 00:07:03,339
lower the barrier of entry for

00:06:58,990 --> 00:07:04,599
developers to use your tools and then it

00:07:03,339 --> 00:07:07,479
also enables users to really easily

00:07:04,599 --> 00:07:10,029
change how the project works all three

00:07:07,479 --> 00:07:11,889
of these projects encompass that but

00:07:10,029 --> 00:07:15,219
WordPress in particular makes it really

00:07:11,889 --> 00:07:18,360
easy for non developers to customize

00:07:15,219 --> 00:07:18,360
their WordPress installations

00:07:19,770 --> 00:07:24,389
so now we're going to kind of go into a

00:07:22,050 --> 00:07:26,400
little bit of a mini demo here showing

00:07:24,389 --> 00:07:29,550
what is actually available in open

00:07:26,400 --> 00:07:35,759
source right now whose is shouldn't

00:07:29,550 --> 00:07:36,990
seeing this okay okay let's see it's

00:07:35,759 --> 00:07:40,380
looking a little bit more hands a little

00:07:36,990 --> 00:07:41,699
more enthusiasm it's only you know 2:30

00:07:40,380 --> 00:07:43,889
in the afternoon we're still a little

00:07:41,699 --> 00:07:50,550
bit of wait I'm sort of drinking yet or

00:07:43,889 --> 00:07:54,110
at least I haven't anybody else all

00:07:50,550 --> 00:07:55,759
right just go over here and hopefully

00:07:54,110 --> 00:08:00,030
this

00:07:55,759 --> 00:08:03,710
see if I can make this bigger okay well

00:08:00,030 --> 00:08:06,389
this kind of is not the not the best but

00:08:03,710 --> 00:08:08,400
hopefully I actually I doubt anybody in

00:08:06,389 --> 00:08:09,659
the back can actually read this so what

00:08:08,400 --> 00:08:11,970
we're actually doing is we're gonna

00:08:09,659 --> 00:08:14,699
actually enable plugins and halyard and

00:08:11,970 --> 00:08:16,740
that's what this how plugins enable does

00:08:14,699 --> 00:08:19,139
we're going to enable downloading of

00:08:16,740 --> 00:08:25,340
those plugins camera can talk a little

00:08:19,139 --> 00:08:29,219
bit about that later it's a video yeah

00:08:25,340 --> 00:08:31,110
doing live demos are always fun but who

00:08:29,219 --> 00:08:33,659
has done a live demo that actually has

00:08:31,110 --> 00:08:36,779
gone successful every single time I know

00:08:33,659 --> 00:08:42,419
I have never okay Rob eyes I saw that

00:08:36,779 --> 00:08:45,149
hand so we decided to record it and play

00:08:42,419 --> 00:08:49,920
it back for you but you can actually do

00:08:45,149 --> 00:08:52,079
this yourself and the slides are I think

00:08:49,920 --> 00:08:54,300
they're already available for people to

00:08:52,079 --> 00:08:55,860
they will be available I think at the

00:08:54,300 --> 00:08:56,940
end of the talk something like that you

00:08:55,860 --> 00:09:00,630
can actually go ahead and watch the

00:08:56,940 --> 00:09:03,690
video and follow along on your computer

00:09:00,630 --> 00:09:07,560
so essentially what we've done is we are

00:09:03,690 --> 00:09:09,810
adding a plug-in to to halyard it is a a

00:09:07,560 --> 00:09:12,600
stage and this stage plugin that we

00:09:09,810 --> 00:09:14,670
created there's actually a link in the

00:09:12,600 --> 00:09:18,779
slide deck that will show you

00:09:14,670 --> 00:09:22,170
it's called random wait stage that

00:09:18,779 --> 00:09:24,209
essentially the you put in the number

00:09:22,170 --> 00:09:27,270
max number of seconds you want the stage

00:09:24,209 --> 00:09:29,220
to wait and it'll choose a random number

00:09:27,270 --> 00:09:31,380
between zero and that number you put in

00:09:29,220 --> 00:09:32,300
in the UI and wait that many number of

00:09:31,380 --> 00:09:34,880
seconds

00:09:32,300 --> 00:09:36,770
a very very very basic stage but it

00:09:34,880 --> 00:09:39,459
shows the power of what's available now

00:09:36,770 --> 00:09:42,070
you could go ahead and make a stage that

00:09:39,459 --> 00:09:47,270
does something a lot more complex

00:09:42,070 --> 00:09:49,820
for example copying a resource in an s3

00:09:47,270 --> 00:09:52,370
bucket from one location to another very

00:09:49,820 --> 00:09:56,020
very simple you pull on the s3 Java API

00:09:52,370 --> 00:09:56,020
and you're off to the races

00:09:56,720 --> 00:10:05,450
but as you can see here we actually are

00:10:00,620 --> 00:10:07,730
looking at the logs of of Orca and we

00:10:05,450 --> 00:10:10,520
can actually show that the the plug-in

00:10:07,730 --> 00:10:12,980
is actually loaded and then we can

00:10:10,520 --> 00:10:16,720
actually go in and here and this says

00:10:12,980 --> 00:10:19,940
max time the way it says 8 seconds and

00:10:16,720 --> 00:10:22,250
we can actually run the stage and it

00:10:19,940 --> 00:10:26,120
will wait a random number of seconds

00:10:22,250 --> 00:10:28,430
between 0 and 8 and then we can actually

00:10:26,120 --> 00:10:31,339
go ahead and view the source tab you can

00:10:28,430 --> 00:10:32,959
click on right now and you can see the

00:10:31,339 --> 00:10:35,480
time the weight is actually 5 seconds

00:10:32,959 --> 00:10:37,899
the max weight times 8 seconds all this

00:10:35,480 --> 00:10:40,640
gets added into the context of the state

00:10:37,899 --> 00:10:42,709
so it's pretty awesome they're running

00:10:40,640 --> 00:10:45,010
it again to show that it it hopefully

00:10:42,709 --> 00:10:53,089
chose a different time than 5 seconds I

00:10:45,010 --> 00:10:56,750
think this time it did 6 seconds so as

00:10:53,089 --> 00:11:00,910
you can see this is a random very simple

00:10:56,750 --> 00:11:04,820
plug-in that Cameron and I created and

00:11:00,910 --> 00:11:07,339
it works pretty well and again you can

00:11:04,820 --> 00:11:09,920
do way more complex things and what we

00:11:07,339 --> 00:11:12,550
did to show how it works we have a very

00:11:09,920 --> 00:11:17,360
simple repo if you go to github.com

00:11:12,550 --> 00:11:20,720
slash armory slash stage - plug-in you

00:11:17,360 --> 00:11:23,890
can go ahead and check it out alright go

00:11:20,720 --> 00:11:23,890
back over to the slides

00:11:26,360 --> 00:11:34,220
all right cool so before plugins were

00:11:31,369 --> 00:11:37,420
added to spinnaker stage creation was

00:11:34,220 --> 00:11:41,299
kind of hard what does this look like

00:11:37,420 --> 00:11:43,339
this is a lot of code in order to create

00:11:41,299 --> 00:11:46,759
a stage and it spans multiple services

00:11:43,339 --> 00:11:50,239
as well so if ya want to add a stage you

00:11:46,759 --> 00:11:52,339
need to watch out for gotchas you need

00:11:50,239 --> 00:11:55,129
to go into Orca you need to create a

00:11:52,339 --> 00:11:56,869
stage definition builder stage context

00:11:55,129 --> 00:11:59,239
you need to add tasks you need to go

00:11:56,869 --> 00:12:00,769
into deck you need to create a stage you

00:11:59,239 --> 00:12:02,509
need to ensure the stage is registered

00:12:00,769 --> 00:12:03,980
with the pipeline and you need to make

00:12:02,509 --> 00:12:09,559
sure all the execution details are set

00:12:03,980 --> 00:12:13,819
up correctly so modifying spinnaker was

00:12:09,559 --> 00:12:17,660
was and is hard I'm working to change

00:12:13,819 --> 00:12:20,269
that so you know you want to add a new

00:12:17,660 --> 00:12:21,860
cloud driver endpoint how do you do this

00:12:20,269 --> 00:12:23,509
well in order to do this you need to

00:12:21,860 --> 00:12:25,220
have deep knowledge of how how driver

00:12:23,509 --> 00:12:30,549
works how the different services

00:12:25,220 --> 00:12:33,249
interact if you want to extend or

00:12:30,549 --> 00:12:35,809
contribute back to OSS that's another

00:12:33,249 --> 00:12:36,980
consideration as well if you for

00:12:35,809 --> 00:12:39,529
instance if you wanted to make a car

00:12:36,980 --> 00:12:43,879
ever for a raspberry pie well you can do

00:12:39,529 --> 00:12:46,009
that as you extend spinnaker on your

00:12:43,879 --> 00:12:47,449
spinnaker extension which it would be

00:12:46,009 --> 00:12:51,439
like another project building on top of

00:12:47,449 --> 00:12:55,040
cloud rabbit or you can contribute this

00:12:51,439 --> 00:12:58,369
back to open source which is great it

00:12:55,040 --> 00:13:00,350
spreads that contribution around to so

00:12:58,369 --> 00:13:01,879
everyone can use it but depending on

00:13:00,350 --> 00:13:05,540
your timeline you might have different

00:13:01,879 --> 00:13:06,889
concerns it might need it today let's

00:13:05,540 --> 00:13:08,720
say you'd have your own custom reporting

00:13:06,889 --> 00:13:10,399
tool well how are you gonna integrate it

00:13:08,720 --> 00:13:14,089
you need to know how multiple services

00:13:10,399 --> 00:13:16,009
work and interact you know do you hook

00:13:14,089 --> 00:13:18,049
into echo you hook and do you make a web

00:13:16,009 --> 00:13:19,669
poke the sage options are really good

00:13:18,049 --> 00:13:22,279
but too many options make it hard to

00:13:19,669 --> 00:13:24,019
define best practices so in order to

00:13:22,279 --> 00:13:26,449
make the decisions it requires a lot of

00:13:24,019 --> 00:13:30,470
knowledge on how spinnaker works and

00:13:26,449 --> 00:13:32,389
interacts do you want to fork or extend

00:13:30,470 --> 00:13:36,049
spinnaker

00:13:32,389 --> 00:13:38,089
both are a lot of work they require both

00:13:36,049 --> 00:13:39,920
require maintenance as well right so you

00:13:38,089 --> 00:13:47,929
have to have build test release on top

00:13:39,920 --> 00:13:51,499
of development of the code pay attention

00:13:47,929 --> 00:13:53,149
to what's going on upstream exactly you

00:13:51,499 --> 00:13:55,129
and that's exactly right and then you

00:13:53,149 --> 00:13:56,749
can get left behind and now you're stuck

00:13:55,129 --> 00:14:02,389
in the past and you're not getting new

00:13:56,749 --> 00:14:08,509
new updates all right so let's talk a

00:14:02,389 --> 00:14:10,879
little bit about after plugins so we

00:14:08,509 --> 00:14:13,639
want stage creation to be easy we're

00:14:10,879 --> 00:14:15,860
focusing on that right now because it's

00:14:13,639 --> 00:14:17,089
one of the the most high leverage things

00:14:15,860 --> 00:14:19,759
that we can do from the from the

00:14:17,089 --> 00:14:21,559
community standpoint and you all saw the

00:14:19,759 --> 00:14:24,350
code beforehand right there's a whole

00:14:21,559 --> 00:14:27,889
bunch of pieces of code on that on that

00:14:24,350 --> 00:14:29,329
slide it's gonna be much simpler now we

00:14:27,889 --> 00:14:31,480
created an interface for plug-in

00:14:29,329 --> 00:14:33,439
developers to use to create a stage

00:14:31,480 --> 00:14:36,439
essentially you just implement the

00:14:33,439 --> 00:14:37,959
simple stage interface and you're off to

00:14:36,439 --> 00:14:40,429
the races

00:14:37,959 --> 00:14:44,059
granted some of the stuff will change

00:14:40,429 --> 00:14:47,989
but we do want to offer simple api's for

00:14:44,059 --> 00:14:50,540
end user for plugin creators to use to

00:14:47,989 --> 00:14:53,720
make their jobs easier we don't want you

00:14:50,540 --> 00:14:55,850
have to go through the entire process of

00:14:53,720 --> 00:14:58,189
what you have to do now of getting

00:14:55,850 --> 00:15:00,439
something into open source if you don't

00:14:58,189 --> 00:15:03,049
want to maintain it yourself as Cameron

00:15:00,439 --> 00:15:05,989
said timelines may not always line up if

00:15:03,049 --> 00:15:08,959
you need it today this may not be

00:15:05,989 --> 00:15:19,160
possible unless you give Rob a few

00:15:08,959 --> 00:15:21,199
hundred dollars is that right Rob so how

00:15:19,160 --> 00:15:24,819
do I actually do this we do have

00:15:21,199 --> 00:15:27,169
documentation up on spinnaker i/o I

00:15:24,819 --> 00:15:29,209
really recommend you guys go to this

00:15:27,169 --> 00:15:30,410
link even right now I see a bunch of

00:15:29,209 --> 00:15:32,749
people laptops out

00:15:30,410 --> 00:15:35,299
deafness is just going there take a look

00:15:32,749 --> 00:15:38,660
if you notice any any problems with it

00:15:35,299 --> 00:15:40,819
please let us know create an issue and

00:15:38,660 --> 00:15:44,089
we will we will address it we do have

00:15:40,819 --> 00:15:44,420
the documentation sig as well and they

00:15:44,089 --> 00:15:46,730
are

00:15:44,420 --> 00:15:50,089
happy where's Brian at it's Brian in

00:15:46,730 --> 00:15:51,829
here no I don't see him I'm going to

00:15:50,089 --> 00:15:53,420
offer up Brian our documentation writer

00:15:51,829 --> 00:15:56,690
and he can definitely go ahead and fix

00:15:53,420 --> 00:15:58,690
it for us and as the example that I

00:15:56,690 --> 00:16:01,910
showed earlier in the demo video

00:15:58,690 --> 00:16:05,570
github.com slash our marine slash stage

00:16:01,910 --> 00:16:07,610
- plug in this has the back end code

00:16:05,570 --> 00:16:10,639
that's an orca and it does have some

00:16:07,610 --> 00:16:14,510
front end code that works in the armory

00:16:10,639 --> 00:16:16,639
version of spinnaker right now there is

00:16:14,510 --> 00:16:18,500
actually I'm gonna talk about that later

00:16:16,639 --> 00:16:25,160
because there's we have a section on

00:16:18,500 --> 00:16:26,510
RFC's everybody everybody loves RFC's ok

00:16:25,160 --> 00:16:29,019
I'm getting a little bit of feedback I'd

00:16:26,510 --> 00:16:29,019
like a little more

00:16:29,139 --> 00:16:39,380
all right so yeah so the initial

00:16:35,300 --> 00:16:42,769
implementation for plugins is canopy

00:16:39,380 --> 00:16:45,230
described right now haha so what we

00:16:42,769 --> 00:16:46,699
started out with is this MVP that's what

00:16:45,230 --> 00:16:49,449
we do at armory is we like to do

00:16:46,699 --> 00:16:52,070
experimentation and getting things into

00:16:49,449 --> 00:16:54,680
customers and users hands as soon as

00:16:52,070 --> 00:16:56,570
possible so we want to get feedback

00:16:54,680 --> 00:16:57,560
really quickly right we want to

00:16:56,570 --> 00:17:02,029
understand if this is something the

00:16:57,560 --> 00:17:05,750
community actually wants so part of that

00:17:02,029 --> 00:17:07,549
is trying to get feedback and figure out

00:17:05,750 --> 00:17:10,780
use cases that the community needs in

00:17:07,549 --> 00:17:15,530
order to determine how and what to build

00:17:10,780 --> 00:17:18,559
next yeah that's right so we have

00:17:15,530 --> 00:17:22,309
plugins at armory dot IO please send us

00:17:18,559 --> 00:17:25,400
an email with any plugin recommendations

00:17:22,309 --> 00:17:29,570
you have or extension considerations

00:17:25,400 --> 00:17:32,660
there's also a plugins channel on Oh

00:17:29,570 --> 00:17:34,610
OSS slack I highly recommend you join it

00:17:32,660 --> 00:17:35,919
if you want to write a plug-in we

00:17:34,610 --> 00:17:38,540
definitely want to talk to you

00:17:35,919 --> 00:17:40,929
anybody want to write a plug-in this

00:17:38,540 --> 00:17:40,929
weekend

00:17:42,470 --> 00:17:50,520
so as so as Brandon mentioned earlier

00:17:48,780 --> 00:17:52,710
there's definitely a lot of changes

00:17:50,520 --> 00:17:54,090
going on right now and in fact we we

00:17:52,710 --> 00:17:56,430
already know what the next steps for

00:17:54,090 --> 00:17:58,740
plugins are going to be Netflix is

00:17:56,430 --> 00:18:00,360
leading the charge in developing the PF

00:17:58,740 --> 00:18:03,000
Forge a framework and bringing it in

00:18:00,360 --> 00:18:05,340
in-house there's many benefits with

00:18:03,000 --> 00:18:08,760
using an existing framework you know

00:18:05,340 --> 00:18:12,710
battle-tested it already exists it has a

00:18:08,760 --> 00:18:12,710
whole community around it who are active

00:18:13,310 --> 00:18:21,780
so community involvement like Brandon

00:18:17,820 --> 00:18:23,790
said our FCS are a big part of working

00:18:21,780 --> 00:18:26,550
with the community so Andrew back is

00:18:23,790 --> 00:18:28,830
from armory created in RFC way earlier

00:18:26,550 --> 00:18:33,480
this year back in March to kick off this

00:18:28,830 --> 00:18:35,760
idea of plugins in spinnaker so Netflix

00:18:33,480 --> 00:18:37,350
and Google are working with armory as

00:18:35,760 --> 00:18:40,470
well in order to iterate on all these

00:18:37,350 --> 00:18:44,280
rfcs that we have in order to create the

00:18:40,470 --> 00:18:46,320
right plugins solution if you want to

00:18:44,280 --> 00:18:48,210
join again there's a plug-in channel on

00:18:46,320 --> 00:18:50,550
slack there's also a new cig the

00:18:48,210 --> 00:18:52,440
platform cig that is basically taking

00:18:50,550 --> 00:18:54,210
ownership of this and we meet every

00:18:52,440 --> 00:18:57,630
Thursday every other Thursday and the

00:18:54,210 --> 00:19:01,110
next meeting is going to be 11 21 at

00:18:57,630 --> 00:19:04,040
11:00 a.m. Pacific time how many people

00:19:01,110 --> 00:19:04,040
are going to join that safe

00:19:04,880 --> 00:19:12,860
yeah just like - but do you want more

00:19:08,180 --> 00:19:14,840
feedback but a little excitement here so

00:19:12,860 --> 00:19:16,640
so what's in spinnaker say we're you

00:19:14,840 --> 00:19:19,070
know we're talking about extending

00:19:16,640 --> 00:19:21,440
spinnaker and the plugin framework so

00:19:19,070 --> 00:19:26,390
what what are we exactly talking about

00:19:21,440 --> 00:19:30,350
so in spinnaker 116 or or later we have

00:19:26,390 --> 00:19:32,830
the ability to add custom stages so you

00:19:30,350 --> 00:19:36,020
can do that right now there is no UI

00:19:32,830 --> 00:19:37,430
component two stages at the moment as

00:19:36,020 --> 00:19:39,740
that's something that the community is

00:19:37,430 --> 00:19:45,110
still working on in iterating on there's

00:19:39,740 --> 00:19:48,470
an active RFC or design doc for it and

00:19:45,110 --> 00:19:52,550
please join in give us some feedback so

00:19:48,470 --> 00:19:56,300
we develop the right thing this also

00:19:52,550 --> 00:19:57,980
requires how your version 1.2 3 or later

00:19:56,300 --> 00:20:02,720
that is if you use halyard to deploy

00:19:57,980 --> 00:20:05,210
your code yeah so why do these versions

00:20:02,720 --> 00:20:07,010
actually matter so the spinnaker version

00:20:05,210 --> 00:20:10,070
services need to have the lifecycle

00:20:07,010 --> 00:20:15,680
folks added what essentially is going on

00:20:10,070 --> 00:20:18,440
is Orca will scan the skin directory and

00:20:15,680 --> 00:20:20,300
add jars to a class path and that are

00:20:18,440 --> 00:20:23,300
then scanned when a spinnaker

00:20:20,300 --> 00:20:25,010
application context starts out so the

00:20:23,300 --> 00:20:27,080
services download jars that that's why

00:20:25,010 --> 00:20:29,570
the spinnaker version matters how you're

00:20:27,080 --> 00:20:33,230
the hired version comes into play when

00:20:29,570 --> 00:20:38,300
we want to modify the configs in a safe

00:20:33,230 --> 00:20:42,920
way so how your manages to create update

00:20:38,300 --> 00:20:45,440
delete for the plugin configurations as

00:20:42,920 --> 00:20:48,340
we've been talking or alluding to I

00:20:45,440 --> 00:20:54,890
guess the first iteration has been on

00:20:48,340 --> 00:20:58,310
custom stages so how does it work again

00:20:54,890 --> 00:20:59,750
plugin needs to create a simple stage it

00:20:58,310 --> 00:21:03,620
needs to implement the simple stage

00:20:59,750 --> 00:21:05,690
interface so if you use let's see you

00:21:03,620 --> 00:21:09,560
need to define the input output and

00:21:05,690 --> 00:21:12,230
context for the stage so that you can

00:21:09,560 --> 00:21:14,760
hook in with the rest of

00:21:12,230 --> 00:21:18,300
how many people in here actually have

00:21:14,760 --> 00:21:23,100
added a stage into spinnaker besides the

00:21:18,300 --> 00:21:28,860
Netflix you mean like beyond customer

00:21:23,100 --> 00:21:33,650
jobs yeah does it look like anybody

00:21:28,860 --> 00:21:36,120
so when Cameron said input output and

00:21:33,650 --> 00:21:40,770
contact context yeah do people know what

00:21:36,120 --> 00:21:45,210
that means this is why we need plugins

00:21:40,770 --> 00:21:49,020
yes yes so um let's see

00:21:45,210 --> 00:21:50,340
so halyard ensures that the the plugin

00:21:49,020 --> 00:21:53,790
config files are present on the

00:21:50,340 --> 00:21:56,610
spinnaker services and that all happens

00:21:53,790 --> 00:21:58,830
prior to the service starting up because

00:21:56,610 --> 00:22:00,480
we do that we can actually hook in

00:21:58,830 --> 00:22:02,850
before the spring context earnest

00:22:00,480 --> 00:22:05,700
initialization so that it can have the

00:22:02,850 --> 00:22:09,000
the beans available to overload and

00:22:05,700 --> 00:22:11,160
extend functionality so in this case the

00:22:09,000 --> 00:22:13,050
jar should implement simple stage the

00:22:11,160 --> 00:22:16,170
simple stages are turned into simple

00:22:13,050 --> 00:22:17,970
stage definition builders which inherit

00:22:16,170 --> 00:22:24,270
from state's definition builder and get

00:22:17,970 --> 00:22:26,280
hooked all all into the stage list again

00:22:24,270 --> 00:22:27,510
there's no UI currently as we're

00:22:26,280 --> 00:22:30,120
figuring that out but you're still able

00:22:27,510 --> 00:22:36,060
to utilize these stages by editing the

00:22:30,120 --> 00:22:39,680
stage as JSON so there are some

00:22:36,060 --> 00:22:43,980
drawbacks to the existing plugin in

00:22:39,680 --> 00:22:48,570
solution so if you want to add create

00:22:43,980 --> 00:22:50,400
update or remove a plugin you have to

00:22:48,570 --> 00:22:52,350
redeploy some of the spinnaker services

00:22:50,400 --> 00:22:55,200
that's not always a fun thing to do

00:22:52,350 --> 00:22:57,810
right now only one interface has been

00:22:55,200 --> 00:22:59,310
simplified and again this comes back to

00:22:57,810 --> 00:23:01,320
what we need more feedback from the

00:22:59,310 --> 00:23:05,730
community in order to figure out more

00:23:01,320 --> 00:23:07,740
places to simplify right now with the

00:23:05,730 --> 00:23:10,500
implementation as some of you might have

00:23:07,740 --> 00:23:12,420
guessed plugins can actually have a lot

00:23:10,500 --> 00:23:15,060
more than just stages but you need to be

00:23:12,420 --> 00:23:18,539
very very careful in doing that you can

00:23:15,060 --> 00:23:21,450
you can break your your spinning

00:23:18,539 --> 00:23:24,179
right now as well plugins do they're all

00:23:21,450 --> 00:23:27,210
that there's no dependency isolation so

00:23:24,179 --> 00:23:28,820
your dependencies must fit in with other

00:23:27,210 --> 00:23:32,730
plugins that are present as well as

00:23:28,820 --> 00:23:34,440
spinnaker services and like we say I've

00:23:32,730 --> 00:23:38,240
been saying there's no no UI again it's

00:23:34,440 --> 00:23:38,240
not a blocker you can still utilize this

00:23:40,940 --> 00:23:46,529
cool so talking about advanced features

00:23:44,250 --> 00:23:48,960
the unsafe portion I mentioned earlier

00:23:46,529 --> 00:23:51,990
you can actually just overload anything

00:23:48,960 --> 00:23:54,509
in Orca right now and modify modify any

00:23:51,990 --> 00:23:55,379
beam there don't do this unless you

00:23:54,509 --> 00:23:57,149
really know what you're doing

00:23:55,379 --> 00:23:59,129
it doesn't go to the simpleness but

00:23:57,149 --> 00:24:00,990
that's why we're trying to move to a new

00:23:59,129 --> 00:24:04,399
framework where has well-defined

00:24:00,990 --> 00:24:07,559
extension points and better life cycle

00:24:04,399 --> 00:24:10,860
so if you extend spinnaker service as

00:24:07,559 --> 00:24:14,340
well right now you can have plugins and

00:24:10,860 --> 00:24:16,230
more more spinnaker services so

00:24:14,340 --> 00:24:18,240
essentially the you would have main

00:24:16,230 --> 00:24:20,220
inherit where it's done spinnaker

00:24:18,240 --> 00:24:23,070
application instead of spring boot

00:24:20,220 --> 00:24:24,629
servlet initializer and then you have to

00:24:23,070 --> 00:24:27,299
make sure your component scanning is set

00:24:24,629 --> 00:24:30,299
up to scan ComNet flex a spanker plugin

00:24:27,299 --> 00:24:32,809
you can see how this works in Orca for

00:24:30,299 --> 00:24:32,809
an example

00:24:34,530 --> 00:24:37,850
all right next steps

00:24:38,710 --> 00:24:45,130
all right so you get an RFC you can RC

00:24:42,420 --> 00:24:47,230
yeah there's no RFC it's under your debt

00:24:45,130 --> 00:24:48,400
under your seats but there's one right

00:24:47,230 --> 00:24:51,490
over there

00:24:48,400 --> 00:24:55,450
so PF per day was validated and

00:24:51,490 --> 00:24:58,050
implemented by in spinnaker by Rob who's

00:24:55,450 --> 00:25:01,570
sitting right over there from Netflix

00:24:58,050 --> 00:25:04,890
what is P it for Jake gets though right

00:25:01,570 --> 00:25:07,720
so P f4j helps a lot with classloader

00:25:04,890 --> 00:25:10,230
isolation what does that mean plugins

00:25:07,720 --> 00:25:13,180
can now have their own dependencies and

00:25:10,230 --> 00:25:15,360
not have to worry about trampling other

00:25:13,180 --> 00:25:17,350
plugins they do still have to share

00:25:15,360 --> 00:25:20,380
dependencies with the spinnaker service

00:25:17,350 --> 00:25:22,960
in question but there's also ways to get

00:25:20,380 --> 00:25:28,950
around that which we'll talk about in a

00:25:22,960 --> 00:25:31,480
sec so what P f4j does is it defines it

00:25:28,950 --> 00:25:33,820
requires well-defined extension points

00:25:31,480 --> 00:25:37,300
this helps lower the barrier of entry

00:25:33,820 --> 00:25:41,910
you cannot mess up because if you don't

00:25:37,300 --> 00:25:41,910
define if you don't do it correctly

00:25:42,180 --> 00:25:48,160
the what am I trying to say here you

00:25:46,660 --> 00:25:49,330
need to just implement the interface and

00:25:48,160 --> 00:25:51,160
you don't have to worry about

00:25:49,330 --> 00:25:54,610
accidentally trampling other pieces of

00:25:51,160 --> 00:25:57,400
code except again extension points are

00:25:54,610 --> 00:25:58,930
well-defined interfaces and the part of

00:25:57,400 --> 00:26:01,840
the point here is to lower the barrier

00:25:58,930 --> 00:26:03,400
of entry so the intent is to define an

00:26:01,840 --> 00:26:05,670
extension point that's a simple

00:26:03,400 --> 00:26:08,950
interface for plug-in developers to use

00:26:05,670 --> 00:26:12,900
while allowing core spinnaker developers

00:26:08,950 --> 00:26:18,790
to a big functionality without breaking

00:26:12,900 --> 00:26:22,420
plug-in interfaces you can still extend

00:26:18,790 --> 00:26:27,450
spinnaker like the MVP implementation

00:26:22,420 --> 00:26:30,910
but via P f4j this is considered unsafe

00:26:27,450 --> 00:26:35,230
this PFA also allows the ability to

00:26:30,910 --> 00:26:39,100
source plugins from not just your local

00:26:35,230 --> 00:26:40,960
system but it allows for remote plugins

00:26:39,100 --> 00:26:43,660
what does this mean you can now have a

00:26:40,960 --> 00:26:45,040
plug-in written in any language the

00:26:43,660 --> 00:26:48,020
plug-in will essentially be a service

00:26:45,040 --> 00:26:51,640
that your service

00:26:48,020 --> 00:26:51,640
the spinnaker service to talk to

00:26:52,980 --> 00:26:57,990
all right so as Cameron mentioned

00:26:55,580 --> 00:27:00,809
currently there's no and open source

00:26:57,990 --> 00:27:03,510
there's no front end there's an RFC

00:27:00,809 --> 00:27:06,630
though how many people can I get in this

00:27:03,510 --> 00:27:09,179
room by end of the weekend to go to this

00:27:06,630 --> 00:27:11,190
link go to the Google Doc and start

00:27:09,179 --> 00:27:15,990
talking and adding their thoughts and

00:27:11,190 --> 00:27:19,500
suggestions to a UI RFC for plugins I

00:27:15,990 --> 00:27:23,149
get some hand raised ok beyond a few

00:27:19,500 --> 00:27:30,450
people thanks Rob

00:27:23,149 --> 00:27:32,789
Chris nothing yes and thank you for for

00:27:30,450 --> 00:27:34,470
helping out we greatly appreciate it we

00:27:32,789 --> 00:27:36,179
need more feedback from everybody we

00:27:34,470 --> 00:27:37,679
want to we want to make this right

00:27:36,179 --> 00:27:39,570
you want to we want to do this in the

00:27:37,679 --> 00:27:41,490
best way possible obviously without

00:27:39,570 --> 00:27:44,220
slowing us down but we do want to get

00:27:41,490 --> 00:27:46,260
people's thoughts and opinions and this

00:27:44,220 --> 00:27:49,830
Google Doc will be translated over into

00:27:46,260 --> 00:27:51,539
the community repo on github as actual

00:27:49,830 --> 00:27:53,659
RFC once we get a little bit more

00:27:51,539 --> 00:27:58,080
feedback

00:27:53,659 --> 00:28:00,659
so essentially what things do we want

00:27:58,080 --> 00:28:03,149
people to be able to do from a UI

00:28:00,659 --> 00:28:05,010
perspective some things I can think of

00:28:03,149 --> 00:28:07,830
that I know at the last company I worked

00:28:05,010 --> 00:28:10,440
at would care about would be extending

00:28:07,830 --> 00:28:12,659
the header of spinnaker to include my

00:28:10,440 --> 00:28:15,360
company's logo I think that'd be pretty

00:28:12,659 --> 00:28:17,820
cool that way it's branded for your

00:28:15,360 --> 00:28:19,710
company being able to possibly override

00:28:17,820 --> 00:28:21,960
all the CSS and make it your company's

00:28:19,710 --> 00:28:24,510
colors that'd be pretty cool it's very

00:28:21,960 --> 00:28:28,110
normal thing to see are those things

00:28:24,510 --> 00:28:30,000
that the community wants if so let's

00:28:28,110 --> 00:28:31,440
talk about it if not we don't do worry

00:28:30,000 --> 00:28:34,340
about that that functionality

00:28:31,440 --> 00:28:36,600
so essentially what do you want to see

00:28:34,340 --> 00:28:39,139
anybody have any thoughts right now what

00:28:36,600 --> 00:28:39,139
they want to see

00:28:40,520 --> 00:28:47,920
yeah good from the front-end perspective

00:28:49,900 --> 00:28:56,809
as go ahead Rob you you gonna say

00:28:54,080 --> 00:29:01,580
something all right

00:28:56,809 --> 00:29:03,500
that is the answer as of right now no

00:29:01,580 --> 00:29:04,940
but this is something this is why we

00:29:03,500 --> 00:29:08,210
want to talk with the community and see

00:29:04,940 --> 00:29:10,309
what people actually want and if there's

00:29:08,210 --> 00:29:12,980
a lot of interest in something like that

00:29:10,309 --> 00:29:14,929
let's let's let's figure that out let's

00:29:12,980 --> 00:29:21,760
let's talk about it let's see if we can

00:29:14,929 --> 00:29:21,760
add that in do you have any thoughts Rob

00:29:26,200 --> 00:29:30,309
cool so what we talked about a little

00:29:28,539 --> 00:29:33,039
bit earlier we mentioned a row of remote

00:29:30,309 --> 00:29:34,480
plugins and remote plugins the way that

00:29:33,039 --> 00:29:39,009
they would be implemented in this PF

00:29:34,480 --> 00:29:40,989
Forge a framework would be two parts one

00:29:39,009 --> 00:29:44,159
would be a service that you write in

00:29:40,989 --> 00:29:47,590
whatever stack you want it's running as

00:29:44,159 --> 00:29:50,799
service you can have it running as a

00:29:47,590 --> 00:29:53,100
container there's an image whatever and

00:29:50,799 --> 00:29:55,739
then you also need to extend the

00:29:53,100 --> 00:29:59,139
spinnaker service that needs to talk to

00:29:55,739 --> 00:30:01,419
your plugin remote plugin I'm so it's

00:29:59,139 --> 00:30:02,830
like a two-part thing again it can be

00:30:01,419 --> 00:30:05,230
written in whatever language you want

00:30:02,830 --> 00:30:07,359
whatever dependencies you need this

00:30:05,230 --> 00:30:10,779
really enables non Java devs to

00:30:07,359 --> 00:30:12,609
contribute and extend spinnaker the

00:30:10,779 --> 00:30:15,789
language doesn't have to be Java I know

00:30:12,609 --> 00:30:17,739
in DevOps there's a lot of go usage so

00:30:15,789 --> 00:30:19,690
that that would be a great great

00:30:17,739 --> 00:30:24,220
language to use but whatever floats your

00:30:19,690 --> 00:30:26,769
boat again lots of DevOps tooling uses

00:30:24,220 --> 00:30:28,299
docker containers so that's you know you

00:30:26,769 --> 00:30:29,559
can deploy a docker container that is

00:30:28,299 --> 00:30:33,480
your service and that would be

00:30:29,559 --> 00:30:33,480
essentially the remote piece of this

00:30:34,299 --> 00:30:39,789
so pf4 day you talk a little bit about

00:30:37,209 --> 00:30:42,999
this earlier but it's an existing open

00:30:39,789 --> 00:30:46,450
source framework you don't have to

00:30:42,999 --> 00:30:48,129
maintain a custom one which is great so

00:30:46,450 --> 00:30:50,259
it's open source there's the active chat

00:30:48,129 --> 00:30:52,599
and there's community members that are

00:30:50,259 --> 00:30:55,779
pretty responsive in there we're already

00:30:52,599 --> 00:30:58,359
giving back to improving PF 4j one of

00:30:55,779 --> 00:31:01,239
our teammates clay McCoy was an army

00:30:58,359 --> 00:31:03,279
engineer he's contributed back to PF 4j

00:31:01,239 --> 00:31:06,039
in terms of Gradle updates retail

00:31:03,279 --> 00:31:08,190
support for the project as we mentioned

00:31:06,039 --> 00:31:11,200
before as well helps with class

00:31:08,190 --> 00:31:16,119
oscillator and isolation so plugins can

00:31:11,200 --> 00:31:18,209
have their own dependencies yeah again

00:31:16,119 --> 00:31:22,209
PF for JS battle-tested it's used by

00:31:18,209 --> 00:31:26,889
multiple other projects so we know it

00:31:22,209 --> 00:31:28,359
works and then again it has well-defined

00:31:26,889 --> 00:31:30,579
extension points which are key to

00:31:28,359 --> 00:31:35,379
lowering the barrier of entry for plugin

00:31:30,579 --> 00:31:39,969
faders so what are some use cases that

00:31:35,379 --> 00:31:41,709
that we've kind of thought of I kind of

00:31:39,969 --> 00:31:43,269
mentioned earlier it would be great to

00:31:41,709 --> 00:31:46,629
have a cloud driver with only the the

00:31:43,269 --> 00:31:49,379
code necessary pre and post stage

00:31:46,629 --> 00:31:51,879
pipeline event hooks would be great

00:31:49,379 --> 00:31:53,709
you could have FedRAMP compliance or

00:31:51,879 --> 00:31:57,729
something like that where before you

00:31:53,709 --> 00:32:01,709
deploy a service and you need to ensure

00:31:57,729 --> 00:32:04,509
that all the proper checks are in place

00:32:01,709 --> 00:32:05,950
and then pipeline validation on save so

00:32:04,509 --> 00:32:08,889
there's an interface that exists for

00:32:05,950 --> 00:32:10,690
doing this but it nothing implements it

00:32:08,889 --> 00:32:14,019
but this would help ensure a safe

00:32:10,690 --> 00:32:17,289
delivery of your applications again none

00:32:14,019 --> 00:32:19,329
of this is is promised or or done but

00:32:17,289 --> 00:32:21,879
that's why we need your help to figure

00:32:19,329 --> 00:32:25,320
out what your guys's use cases and needs

00:32:21,879 --> 00:32:25,320
are in order to support those

00:32:26,780 --> 00:32:32,480
and finally does anyone have questions

00:32:51,850 --> 00:33:04,040
like whose sacred issues they all the

00:33:01,010 --> 00:33:06,730
dependency problems so that seems to be

00:33:04,040 --> 00:33:10,100
oversight of like an ecosystem it's also

00:33:06,730 --> 00:33:11,720
some very basic stuff we have these

00:33:10,100 --> 00:33:20,660
public liking for that for example to

00:33:11,720 --> 00:33:22,640
get some oversight in ecosystem and draw

00:33:20,660 --> 00:33:29,720
the line okay this should be portraiture

00:33:22,640 --> 00:33:31,460
and it's changing like Jamie said a

00:33:29,720 --> 00:33:36,559
thousand are quite wonderful agency like

00:33:31,460 --> 00:33:40,970
oh okay connects to the first part of

00:33:36,559 --> 00:33:42,500
that as - we know how Jenkins works now

00:33:40,970 --> 00:33:45,950
we know that it's not pretty

00:33:42,500 --> 00:33:48,020
we can learn from that let's try not to

00:33:45,950 --> 00:33:51,679
repeat that mistake yes we're gonna make

00:33:48,020 --> 00:33:54,429
mistakes it's looks like right but let's

00:33:51,679 --> 00:33:58,309
try to learn from Jenkins WordPress

00:33:54,429 --> 00:34:00,290
Eclipse may many other major open source

00:33:58,309 --> 00:34:05,660
project that has plugins let's see if we

00:34:00,290 --> 00:34:08,030
can learn from that yeah we would like

00:34:05,660 --> 00:34:10,310
to also have a like a technology

00:34:08,030 --> 00:34:12,080
compatibility kit so that you know as

00:34:10,310 --> 00:34:14,540
you as you produce plugins you have a

00:34:12,080 --> 00:34:17,090
way of validating it and ensuring it

00:34:14,540 --> 00:34:21,320
would work with a certain version of

00:34:17,090 --> 00:34:23,830
spinnaker and to go with that personally

00:34:21,320 --> 00:34:26,450
I would like to see a marketplace where

00:34:23,830 --> 00:34:29,020
we can say this version of this plug-in

00:34:26,450 --> 00:34:31,820
works with these versions of spinnaker

00:34:29,020 --> 00:34:33,500
you know maybe a rating system maybe a

00:34:31,820 --> 00:34:36,800
comment system something along those

00:34:33,500 --> 00:34:39,470
lines so that we can actually track

00:34:36,800 --> 00:34:41,230
these sorts of things and maybe we have

00:34:39,470 --> 00:34:43,700
integration tests with this that you

00:34:41,230 --> 00:34:45,560
know maybe somebody like armoring maybe

00:34:43,700 --> 00:34:47,359
we maybe we're the ones that does that

00:34:45,560 --> 00:34:49,129
or maybe Netflix does it maybe Google

00:34:47,359 --> 00:34:51,980
does it maybe somebody else does it

00:34:49,129 --> 00:34:53,119
community end yeah I was gonna say is

00:34:51,980 --> 00:34:54,800
that probably with delineate between

00:34:53,119 --> 00:34:56,929
open source and the

00:34:54,800 --> 00:35:00,260
and the commercial versions of these

00:34:56,929 --> 00:35:02,990
things Azhar curated and certified seven

00:35:00,260 --> 00:35:07,240
plugins as opposed to you know

00:35:02,990 --> 00:35:07,240
so like it could there's no there's no

00:35:07,540 --> 00:35:14,150
there's have not been decisions made in

00:35:09,920 --> 00:35:15,800
that in that regard we have both use

00:35:14,150 --> 00:35:18,800
Jenkins in the past and have done

00:35:15,800 --> 00:35:21,860
plugins and upgrades and restarts and we

00:35:18,800 --> 00:35:45,230
feel your pain we do not want to cause

00:35:21,860 --> 00:35:46,550
that sort of pain for others yeah you

00:35:45,230 --> 00:35:58,610
would have to deploy to let's going to

00:35:46,550 --> 00:36:00,200
environment currently well no uh so

00:35:58,610 --> 00:36:01,580
depending on how how do you deploy to

00:36:00,200 --> 00:36:05,900
use how your to deploy your spinnaker

00:36:01,580 --> 00:36:08,180
services or I see yeah so depending on

00:36:05,900 --> 00:36:10,970
how you want to deploy your services you

00:36:08,180 --> 00:36:14,060
essentially need to have files in place

00:36:10,970 --> 00:36:15,650
on like before the service starts out so

00:36:14,060 --> 00:36:20,450
there's a plugin zml that is separate

00:36:15,650 --> 00:36:22,280
from the services configuration and it's

00:36:20,450 --> 00:36:24,140
needed to be a separate file as the

00:36:22,280 --> 00:36:26,480
service configuration is not read in yet

00:36:24,140 --> 00:36:28,790
so again we're hooking in before spring

00:36:26,480 --> 00:36:32,560
context annals initialization happens um

00:36:28,790 --> 00:36:32,560
so that we can load the plugins

00:36:34,000 --> 00:36:41,560
the invention to be to replace no no not

00:36:40,480 --> 00:36:45,330
not at all

00:36:41,560 --> 00:36:47,680
some stages I think should be replaced I

00:36:45,330 --> 00:36:49,540
think gremlins super cool I don't

00:36:47,680 --> 00:36:52,780
necessarily think it should be in course

00:36:49,540 --> 00:36:54,670
vinegar but I think that's up for the

00:36:52,780 --> 00:36:55,840
community to decide there was the

00:36:54,670 --> 00:36:57,520
question earlier about how do we

00:36:55,840 --> 00:37:02,080
determine whether something is core

00:36:57,520 --> 00:37:05,830
spinnaker or an extension a plugin that

00:37:02,080 --> 00:37:10,599
has not been decided yet I believe it

00:37:05,830 --> 00:37:11,920
was called out as a non-issue or in the

00:37:10,599 --> 00:37:22,300
RFC I believe we called it out as like

00:37:11,920 --> 00:37:24,760
an on yeah that's a great question so

00:37:22,300 --> 00:37:28,180
right so the the plugin interface should

00:37:24,760 --> 00:37:29,710
be simple and stable that helps lower

00:37:28,180 --> 00:37:32,290
their barrier of entry as well as

00:37:29,710 --> 00:37:34,990
enables spinnaker core developers to

00:37:32,290 --> 00:37:40,830
contribute continue iterating on how

00:37:34,990 --> 00:37:40,830
stages work or how whatever the backing

00:37:43,819 --> 00:37:50,160
some of it could be due to time for

00:37:47,220 --> 00:37:52,789
example if you need your stage in right

00:37:50,160 --> 00:37:56,220
now to do your deployment to production

00:37:52,789 --> 00:37:58,380
well unless you pay Rob a few thousand

00:37:56,220 --> 00:38:00,750
dollars now maybe you're probably not

00:37:58,380 --> 00:38:04,950
going to get that you're not going to

00:38:00,750 --> 00:38:06,450
get it in ASAP doing it as a plugin you

00:38:04,950 --> 00:38:09,720
could have it deploy to your spinnaker

00:38:06,450 --> 00:38:12,869
today without having to go through the

00:38:09,720 --> 00:38:14,460
process of working with the community

00:38:12,869 --> 00:38:16,799
which I think you should work with the

00:38:14,460 --> 00:38:18,450
community but you don't have to go

00:38:16,799 --> 00:38:21,000
through that process as a pain point

00:38:18,450 --> 00:38:23,579
right now because community let's say

00:38:21,000 --> 00:38:26,190
it's your you need to do this for your

00:38:23,579 --> 00:38:27,990
deployments before Christmas well people

00:38:26,190 --> 00:38:30,210
are on vacations people are not really

00:38:27,990 --> 00:38:34,109
going to be in the community wise as

00:38:30,210 --> 00:38:38,970
active so as a plug-in you have it today

00:38:34,109 --> 00:38:41,000
that's one one answer to that another

00:38:38,970 --> 00:38:45,269
could be something to the effect of

00:38:41,000 --> 00:38:47,430
depends on how complex your stage has to

00:38:45,269 --> 00:38:49,980
be if you're building something that

00:38:47,430 --> 00:38:52,200
talks to all the different micro

00:38:49,980 --> 00:38:55,529
services and doing a very massive thing

00:38:52,200 --> 00:38:57,599
well that may be better fitted as a as a

00:38:55,529 --> 00:39:00,029
core component where you have a little

00:38:57,599 --> 00:39:01,980
bit more access more higher higher

00:39:00,029 --> 00:39:05,309
grained access it better fit something

00:39:01,980 --> 00:39:08,430
very simple or I should say more simple

00:39:05,309 --> 00:39:11,700
like maybe copying from s3 one location

00:39:08,430 --> 00:39:13,609
necessary to another or maybe deploying

00:39:11,700 --> 00:39:16,470
to a Raspberry Pi something like that

00:39:13,609 --> 00:39:19,019
where it's not all that complicated a

00:39:16,470 --> 00:39:20,789
plug-in might work for that so as

00:39:19,019 --> 00:39:24,480
Cameron said as right now we don't have

00:39:20,789 --> 00:39:25,859
a true definition but I assume that

00:39:24,480 --> 00:39:30,450
something we're going to be talking

00:39:25,859 --> 00:39:33,230
about soon yeah by having a plug-in as

00:39:30,450 --> 00:39:36,680
well you don't have to rebuild spinnaker

00:39:33,230 --> 00:39:39,869
or extend it you just make a plug-in and

00:39:36,680 --> 00:39:43,140
ensure its present on the service so

00:39:39,869 --> 00:39:47,039
upon startup and as well as we said

00:39:43,140 --> 00:39:48,480
earlier it's a lot of this is to lower

00:39:47,039 --> 00:39:49,609
the barrier of entry so that more people

00:39:48,480 --> 00:39:51,950
can contribute

00:39:49,609 --> 00:39:56,480
and extend meeting them where their

00:39:51,950 --> 00:39:58,970
organizations are what's your what's

00:39:56,480 --> 00:40:01,059
your current thoughts were indicating

00:39:58,970 --> 00:40:03,440
that you talked about Ringwood plugins

00:40:01,059 --> 00:40:05,180
that's typically something that gets me

00:40:03,440 --> 00:40:06,739
interested because that's how you have

00:40:05,180 --> 00:40:08,509
like those kind of like long way of

00:40:06,739 --> 00:40:10,759
static credentials that tend to sneak in

00:40:08,509 --> 00:40:14,019
in those discussions what's your

00:40:10,759 --> 00:40:14,019
thoughts for avoiding them

00:40:14,749 --> 00:40:18,920
I think ps4 J would be able to help a

00:40:17,450 --> 00:40:22,400
little bit with that I'm not a hundred

00:40:18,920 --> 00:40:25,359
percent sure on that but I believe that

00:40:22,400 --> 00:40:30,109
would be something that pf4 J would be

00:40:25,359 --> 00:40:33,249
would be handling for us I think Rob

00:40:30,109 --> 00:40:33,249
that sound about right

00:40:38,770 --> 00:40:41,880
transport brain right

00:40:43,320 --> 00:40:50,010
Piaget is explicitly designed for do

00:40:47,100 --> 00:40:52,610
class loader isolation of a certain user

00:40:50,010 --> 00:40:52,610
line code

00:40:57,920 --> 00:41:04,330
the reason why we are kind of talking

00:41:02,030 --> 00:41:04,330
about what

00:41:04,869 --> 00:41:09,570
has some comments

00:41:07,990 --> 00:41:12,390
be able to

00:41:09,570 --> 00:41:17,520
both plugin and remote by any kind of

00:41:12,390 --> 00:41:20,010
same excellence but their gift for Jason

00:41:17,520 --> 00:41:32,430
really defines a whole lot examples like

00:41:20,010 --> 00:41:34,260
the installation operations is there's

00:41:32,430 --> 00:41:37,080
room for still being a concern but yes

00:41:34,260 --> 00:41:39,130
it's like others there's a lot of

00:41:37,080 --> 00:41:43,140
concern

00:41:39,130 --> 00:41:43,140
it's very complex

00:41:43,800 --> 00:41:48,210
and would have very appreciate those

00:41:45,930 --> 00:42:06,030
concerns added to the RF season and

00:41:48,210 --> 00:42:08,220
dachshunds is perfect that that's where

00:42:06,030 --> 00:42:12,710
P f4j extension points come in as well

00:42:08,220 --> 00:42:15,470
as that PF for J helps with loading what

00:42:12,710 --> 00:42:18,240
points what the extension points are

00:42:15,470 --> 00:42:20,310
currently in the current model as

00:42:18,240 --> 00:42:22,230
Cameron said earlier you can do anything

00:42:20,310 --> 00:42:24,870
if you want to destroy the world

00:42:22,230 --> 00:42:28,050
you can we don't recommend it obviously

00:42:24,870 --> 00:42:31,220
I mean you're a security guy so have fun

00:42:28,050 --> 00:42:36,780
with it but you know P f4j would be the

00:42:31,220 --> 00:42:39,080
would be the solution for that any more

00:42:36,780 --> 00:42:39,080
questions

00:42:40,180 --> 00:42:49,710
anybody want to write a plug-in this

00:42:42,100 --> 00:42:49,710
weekend so thank you very much everybody

00:42:56,230 --> 00:42:58,290

YouTube URL: https://www.youtube.com/watch?v=7EPr2N9cHj8


