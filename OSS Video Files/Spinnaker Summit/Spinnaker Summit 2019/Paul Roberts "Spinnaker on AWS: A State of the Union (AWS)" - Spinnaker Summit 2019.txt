Title: Paul Roberts "Spinnaker on AWS: A State of the Union (AWS)" - Spinnaker Summit 2019
Publication date: 2019-12-03
Playlist: Spinnaker Summit 2019
Description: 
	In 2018, AWS began contributing to Spinnaker through our contributions to both ECS and Lambda cloud drivers. This year, we have continued our development efforts while doubling down on helping customers leverage services such as EC2, EKS, ECS, and Lambda. In this session, please join us to hear customer use cases, learn about the code contributions we've been making, and how we are working with the community to increase Spinnaker adoption.
Captions: 
	00:00:06,330 --> 00:00:10,980
[Laughter]

00:00:14,970 --> 00:00:19,540
so first good morning thank you all for

00:00:17,590 --> 00:00:21,520
joining us I know some people may have

00:00:19,540 --> 00:00:23,950
had a big night last night I know we

00:00:21,520 --> 00:00:25,300
tried to cut it a little short but thank

00:00:23,950 --> 00:00:26,380
you for attending early this morning we

00:00:25,300 --> 00:00:29,890
want to go through a couple things that

00:00:26,380 --> 00:00:31,390
we've been doing throughout 2019 so I do

00:00:29,890 --> 00:00:33,489
have the broader team that's been

00:00:31,390 --> 00:00:35,199
contributing with us so my name is Paul

00:00:33,489 --> 00:00:36,400
Roberts I'm a principal here at AWS

00:00:35,199 --> 00:00:39,190
that's been driving a lot of the

00:00:36,400 --> 00:00:40,989
contributions AWS is making the team

00:00:39,190 --> 00:00:42,250
that will also come up here a little

00:00:40,989 --> 00:00:43,000
while to discuss the different

00:00:42,250 --> 00:00:46,059
initiatives that they've been

00:00:43,000 --> 00:00:47,770
responsible for but just for context

00:00:46,059 --> 00:00:49,570
Shalaka is one of our cloud developers

00:00:47,770 --> 00:00:51,910
allison is another software engineer who

00:00:49,570 --> 00:00:53,680
represents the ECS side and then psy is

00:00:51,910 --> 00:00:57,370
another cloud developer that's been

00:00:53,680 --> 00:00:59,379
helping with our our deck and lamb -

00:00:57,370 --> 00:01:00,700
work that we've been doing so I want to

00:00:59,379 --> 00:01:02,920
kick things off and one of the questions

00:01:00,700 --> 00:01:06,460
that we get quite a bit is is talking

00:01:02,920 --> 00:01:08,530
about why spinnaker and some of the the

00:01:06,460 --> 00:01:10,600
lessons that we've learned I want to

00:01:08,530 --> 00:01:12,490
talk about what have we been working on

00:01:10,600 --> 00:01:13,690
and then I want to talk about some of

00:01:12,490 --> 00:01:15,039
the community engagement and some of the

00:01:13,690 --> 00:01:16,720
things that we've been doing and then

00:01:15,039 --> 00:01:18,549
lastly I'm kind of going to be like the

00:01:16,720 --> 00:01:20,229
ShamWow guy where it's gonna be we're

00:01:18,549 --> 00:01:21,729
not doing just one demo we're not doing

00:01:20,229 --> 00:01:24,010
two demos we're gonna be doing three

00:01:21,729 --> 00:01:27,130
demos so hopefully the demo gods are

00:01:24,010 --> 00:01:28,720
going to be good to us this morning so

00:01:27,130 --> 00:01:32,350
one of the questions that we get quite a

00:01:28,720 --> 00:01:34,509
bit is why did AWS begin contributing to

00:01:32,350 --> 00:01:37,030
spinnaker and it happened last night I

00:01:34,509 --> 00:01:39,759
get asked this all the time and one of

00:01:37,030 --> 00:01:42,400
the big things that comes up is well AWS

00:01:39,759 --> 00:01:44,500
has code star so this code deploy code

00:01:42,400 --> 00:01:46,659
commit code builds we have other

00:01:44,500 --> 00:01:48,939
services that perhaps overlap with

00:01:46,659 --> 00:01:50,829
spinnaker a little bit but the main

00:01:48,939 --> 00:01:52,450
takeaway is is that we really want to go

00:01:50,829 --> 00:01:53,920
where the developers are and what this

00:01:52,450 --> 00:01:55,390
means is there's a lot of open

00:01:53,920 --> 00:01:57,250
technologies that our customers are

00:01:55,390 --> 00:01:58,930
using it could be terraformed it could

00:01:57,250 --> 00:02:00,790
be spinnaker it could be something else

00:01:58,930 --> 00:02:02,920
but we really want to go wherever they

00:02:00,790 --> 00:02:04,180
are we want to make sure that the

00:02:02,920 --> 00:02:05,920
service adoption in the service

00:02:04,180 --> 00:02:07,810
integration with those respective

00:02:05,920 --> 00:02:10,239
technologies are frictionless when

00:02:07,810 --> 00:02:12,610
you're working with AWS and roughly two

00:02:10,239 --> 00:02:14,140
years ago when we sat out to begin

00:02:12,610 --> 00:02:16,600
contributing to spinnaker we found that

00:02:14,140 --> 00:02:19,570
our services weren't exactly playing

00:02:16,600 --> 00:02:21,340
nicely as nicely as they could with

00:02:19,570 --> 00:02:23,590
spinnaker so we wanted to fix that and

00:02:21,340 --> 00:02:25,270
in terms of fixing that we also wanted

00:02:23,590 --> 00:02:27,220
to educate the community about the

00:02:25,270 --> 00:02:28,180
things that we were doing so the first

00:02:27,220 --> 00:02:29,560
thing that Netflix

00:02:28,180 --> 00:02:31,510
in the broader community shared with us

00:02:29,560 --> 00:02:33,579
is that you all need to update the

00:02:31,510 --> 00:02:36,189
documentation using AWS

00:02:33,579 --> 00:02:37,659
with spinnaker is really difficult so

00:02:36,189 --> 00:02:39,340
before we even wrote a single line of

00:02:37,659 --> 00:02:42,489
code we really focused on fixing the

00:02:39,340 --> 00:02:44,230
documentation next we begin writing a

00:02:42,489 --> 00:02:46,000
number of blogs and we'll dig into that

00:02:44,230 --> 00:02:47,409
and then we've also been demoing a lot

00:02:46,000 --> 00:02:49,000
of this and this year I was a Todd's

00:02:47,409 --> 00:02:50,680
Khan speaking about the work that we've

00:02:49,000 --> 00:02:52,450
been doing with spinnaker later this

00:02:50,680 --> 00:02:54,010
year I'll be speaking with Andy Glover

00:02:52,450 --> 00:02:55,000
at Netflix we're gonna be talking about

00:02:54,010 --> 00:02:57,370
all the work that we've been doing

00:02:55,000 --> 00:02:58,420
together so we're definitely getting out

00:02:57,370 --> 00:03:01,180
there and educating the broader

00:02:58,420 --> 00:03:03,040
community on our activities and then

00:03:01,180 --> 00:03:04,000
lastly maybe some of the most important

00:03:03,040 --> 00:03:05,200
things that we're doing is we're going

00:03:04,000 --> 00:03:07,060
through and we're fixing a lot of bugs

00:03:05,200 --> 00:03:09,549
with the cloud driver and various

00:03:07,060 --> 00:03:10,750
components within within spinnaker so if

00:03:09,549 --> 00:03:12,159
there's things that you think that we

00:03:10,750 --> 00:03:14,859
should be taking a look at we're very

00:03:12,159 --> 00:03:16,750
active within the with on slack we're

00:03:14,859 --> 00:03:18,010
part of the AWS sig so we're happy to

00:03:16,750 --> 00:03:19,780
take any features and we're constantly

00:03:18,010 --> 00:03:22,090
looking for ways that we can we can

00:03:19,780 --> 00:03:26,260
address and fix bugs and create new

00:03:22,090 --> 00:03:28,090
things for you all so I'm gonna hand it

00:03:26,260 --> 00:03:29,889
over to sy and sighs could talk about

00:03:28,090 --> 00:03:31,199
some of the lessons learned as we were

00:03:29,889 --> 00:03:33,639
going through this development process

00:03:31,199 --> 00:03:35,530
with the the hope that we've done over

00:03:33,639 --> 00:03:39,729
the past year so sy once you come on up

00:03:35,530 --> 00:03:42,879
and share with the team hi everyone good

00:03:39,729 --> 00:03:45,370
morning my name is sy and I'm a cloud

00:03:42,879 --> 00:03:48,909
developer with AWS my role with this

00:03:45,370 --> 00:03:51,189
project was to orchestrate between a

00:03:48,909 --> 00:03:54,449
Norco Street and organize between over

00:03:51,189 --> 00:03:56,470
front end and back end developers and

00:03:54,449 --> 00:03:58,329
I'm here to share some of the lessons

00:03:56,470 --> 00:03:59,739
that we have learned in the last few

00:03:58,329 --> 00:04:02,620
months while we were adding this

00:03:59,739 --> 00:04:08,680
particular feature lander functions to

00:04:02,620 --> 00:04:11,229
our project of true spinnaker first

00:04:08,680 --> 00:04:13,870
thing is a question for the audience how

00:04:11,229 --> 00:04:18,449
many of you have found onboarding to

00:04:13,870 --> 00:04:22,449
spinnaker to be super easy developers

00:04:18,449 --> 00:04:24,639
okay so that's our experience too so if

00:04:22,449 --> 00:04:26,770
like our developers have spent a lot of

00:04:24,639 --> 00:04:29,199
time on trying to understand the

00:04:26,770 --> 00:04:31,780
architecture and then trying to get that

00:04:29,199 --> 00:04:34,990
local development set up so that they

00:04:31,780 --> 00:04:36,789
can start contributing the big challenge

00:04:34,990 --> 00:04:38,260
was like getting a proper local

00:04:36,789 --> 00:04:42,100
development environment with all those

00:04:38,260 --> 00:04:44,800
you know eight to ten micro services and

00:04:42,100 --> 00:04:49,330
having it work so that it you can add a

00:04:44,800 --> 00:04:51,580
feature and having appropriate developer

00:04:49,330 --> 00:04:53,100
onboarding documentation so like we

00:04:51,580 --> 00:04:56,110
found that that was the main challenge

00:04:53,100 --> 00:04:58,090
when we were trying to contribute and we

00:04:56,110 --> 00:05:01,480
did create some documentation on our end

00:04:58,090 --> 00:05:02,980
ah and with it will shortly be added as

00:05:01,480 --> 00:05:05,050
in it will be released in the form of a

00:05:02,980 --> 00:05:07,690
blog post but it's something which we

00:05:05,050 --> 00:05:10,060
definitely need to work on for a new

00:05:07,690 --> 00:05:11,740
developer who walks and it's a bit of a

00:05:10,060 --> 00:05:12,940
challenge to figure out all the

00:05:11,740 --> 00:05:16,180
different components that are there

00:05:12,940 --> 00:05:17,890
where they need to add all the services

00:05:16,180 --> 00:05:22,030
that they need to edit to get a certain

00:05:17,890 --> 00:05:25,470
feature working and our developer

00:05:22,030 --> 00:05:27,790
development team was spread across like

00:05:25,470 --> 00:05:30,160
East Coast West Coast and one of the

00:05:27,790 --> 00:05:31,630
developer was in India so it was a very

00:05:30,160 --> 00:05:33,280
interesting experience for me to

00:05:31,630 --> 00:05:36,940
coordinate between all the developers

00:05:33,280 --> 00:05:39,130
across different look time zones and

00:05:36,940 --> 00:05:42,250
different when they're working on

00:05:39,130 --> 00:05:44,650
different components like our friend and

00:05:42,250 --> 00:05:46,120
developer was of their on the west coast

00:05:44,650 --> 00:05:48,070
and the back-end developer was like back

00:05:46,120 --> 00:05:49,270
in India so having to coordinate between

00:05:48,070 --> 00:05:51,220
different time zones and different

00:05:49,270 --> 00:05:54,220
components it was a very interesting

00:05:51,220 --> 00:05:55,720
experience and the next thing was we

00:05:54,220 --> 00:05:58,060
needed to ensure that there's adequate

00:05:55,720 --> 00:06:01,270
testing because when you change for

00:05:58,060 --> 00:06:02,500
example a certain functionality in cloud

00:06:01,270 --> 00:06:05,020
driver you need to ensure it works

00:06:02,500 --> 00:06:07,210
through gate and also the same

00:06:05,020 --> 00:06:09,730
functionality is available in the deck

00:06:07,210 --> 00:06:10,990
as well so that to integrate back and

00:06:09,730 --> 00:06:12,760
forth between all this multiple

00:06:10,990 --> 00:06:14,620
components was a very interesting

00:06:12,760 --> 00:06:18,730
experience and we have learned a lot

00:06:14,620 --> 00:06:22,120
doing this process and the next thing

00:06:18,730 --> 00:06:23,890
was we have also learned to make smaller

00:06:22,120 --> 00:06:26,380
pull requests initially when we have

00:06:23,890 --> 00:06:28,240
started we needed to go through a legal

00:06:26,380 --> 00:06:31,690
review for each of the pull requests

00:06:28,240 --> 00:06:35,500
so our pull requests were really huge

00:06:31,690 --> 00:06:38,740
like 20 files thousand lines and whatnot

00:06:35,500 --> 00:06:41,440
so later on we have educated ourselves

00:06:38,740 --> 00:06:43,870
to do better at that and we are now our

00:06:41,440 --> 00:06:46,720
pull requests are much smaller with only

00:06:43,870 --> 00:06:49,030
few files or less than like maybe 500

00:06:46,720 --> 00:06:51,070
lines or whatever very specific to the

00:06:49,030 --> 00:06:53,680
feature without trying to put together a

00:06:51,070 --> 00:06:55,930
lot of the stuff in one pull request of

00:06:53,680 --> 00:06:58,810
that because of the legal requirements

00:06:55,930 --> 00:07:01,600
had to do that earlier because our legal

00:06:58,810 --> 00:07:05,080
leader to review each PR and image make

00:07:01,600 --> 00:07:07,270
sure that there's no legal issues or any

00:07:05,080 --> 00:07:09,910
copyright infringement and whatnot but

00:07:07,270 --> 00:07:13,650
now our spinnaker has been added to a

00:07:09,910 --> 00:07:16,780
global open source initiative projects

00:07:13,650 --> 00:07:19,210
that means we don't need legal review

00:07:16,780 --> 00:07:22,240
for contributing code to spinnaker

00:07:19,210 --> 00:07:26,020
anymore so we wouldn't run through that

00:07:22,240 --> 00:07:27,850
legal pipeline again so the pool

00:07:26,020 --> 00:07:32,229
requests are going to be small from

00:07:27,850 --> 00:07:33,910
right from from now on and that's it

00:07:32,229 --> 00:07:36,729
from my side thank you very much and

00:07:33,910 --> 00:07:40,139
I'll hand it over to Paul who will walk

00:07:36,729 --> 00:07:44,560
walk through the next upcoming features

00:07:40,139 --> 00:07:46,389
the updates that we made in 2019 okay so

00:07:44,560 --> 00:07:47,710
I want to jump into some of the 2019

00:07:46,389 --> 00:07:49,720
updates and again some of the things

00:07:47,710 --> 00:07:52,120
that we've done so to date we've written

00:07:49,720 --> 00:07:54,610
five different blogs about spinnaker so

00:07:52,120 --> 00:07:55,930
in the past what less than two years we

00:07:54,610 --> 00:07:57,970
went from literally kind of doing

00:07:55,930 --> 00:07:59,710
nothing to now we have five blogs we

00:07:57,970 --> 00:08:01,270
have a kubernetes blog we have a blog

00:07:59,710 --> 00:08:03,729
about Jenkins we have a blog about our

00:08:01,270 --> 00:08:05,590
ECS integration so some of this

00:08:03,729 --> 00:08:07,180
documentation and to maybe this might be

00:08:05,590 --> 00:08:09,940
helpful so if you want to go out there

00:08:07,180 --> 00:08:11,409
in Google AWS spinnaker blogs you're

00:08:09,940 --> 00:08:12,970
gonna find a number of articles there's

00:08:11,409 --> 00:08:14,289
a number there's another one that's in

00:08:12,970 --> 00:08:15,220
flight right now that's gonna be talking

00:08:14,289 --> 00:08:18,130
about the work that we've been doing

00:08:15,220 --> 00:08:19,690
with lambda so next what we're also

00:08:18,130 --> 00:08:21,699
going to be focused on is updating the

00:08:19,690 --> 00:08:22,750
spinnaker i/o documentation with the

00:08:21,699 --> 00:08:27,280
lambda enhancements that we've been

00:08:22,750 --> 00:08:29,770
making last year

00:08:27,280 --> 00:08:32,950
Claire did a lot of work adding the

00:08:29,770 --> 00:08:35,529
Fargate support into spinnaker and so

00:08:32,950 --> 00:08:37,479
for context Claire ligurius still is is

00:08:35,529 --> 00:08:39,190
driving the AWS SIG's so where we have

00:08:37,479 --> 00:08:41,469
these meetings frequently and Ally

00:08:39,190 --> 00:08:43,180
myself and others are joining this but

00:08:41,469 --> 00:08:44,920
the reason why I wanted to come back and

00:08:43,180 --> 00:08:46,779
highlight this is that Alli has been

00:08:44,920 --> 00:08:48,850
driving a lot of enhancements to Fargate

00:08:46,779 --> 00:08:50,079
she's introduced artifact support to

00:08:48,850 --> 00:08:51,250
this which is going to be demoing a

00:08:50,079 --> 00:08:52,690
little bit later and the reason why this

00:08:51,250 --> 00:08:54,550
is important is that it allows you to

00:08:52,690 --> 00:09:01,300
build really interesting dynamic

00:08:54,550 --> 00:09:02,920
pipelines next lambda enhancements I

00:09:01,300 --> 00:09:05,050
don't want to give away too much just

00:09:02,920 --> 00:09:06,250
yet but we've been focusing a lot with

00:09:05,050 --> 00:09:07,900
lambda we've heard a lot of interest

00:09:06,250 --> 00:09:09,760
from from customers like Autodesk and

00:09:07,900 --> 00:09:12,640
others that they're interesting and seen

00:09:09,760 --> 00:09:14,590
lambda support when we we committed the

00:09:12,640 --> 00:09:17,440
initial cloud driver about a year ago

00:09:14,590 --> 00:09:19,000
last December we began looking at

00:09:17,440 --> 00:09:22,150
everything that we did and we actually

00:09:19,000 --> 00:09:24,400
found a number of bugs and who would

00:09:22,150 --> 00:09:25,630
have thought some bugs in code and we

00:09:24,400 --> 00:09:27,340
found some bugs and so what we wanted to

00:09:25,630 --> 00:09:28,990
go back and we wanted to refactor a

00:09:27,340 --> 00:09:30,880
number of things but the other thing

00:09:28,990 --> 00:09:32,290
that we did was we didn't have VPC

00:09:30,880 --> 00:09:34,090
support as part of cloud driver

00:09:32,290 --> 00:09:35,590
initially so we actually added a new

00:09:34,090 --> 00:09:38,020
feature which now enables your lambda

00:09:35,590 --> 00:09:39,790
functions to run with the V PC which was

00:09:38,020 --> 00:09:42,250
great and so we did fix a lot of bugs

00:09:39,790 --> 00:09:44,320
about 2,000 lines of code in total were

00:09:42,250 --> 00:09:46,540
written for this contribution which

00:09:44,320 --> 00:09:48,160
going back to smaller p RS we hear you

00:09:46,540 --> 00:09:50,020
community we're sorry for dropping these

00:09:48,160 --> 00:09:51,360
huge ones we're really working to make

00:09:50,020 --> 00:09:53,830
them smaller

00:09:51,360 --> 00:09:55,480
okay so community interactions I just

00:09:53,830 --> 00:09:57,430
want to say you know thank you to the

00:09:55,480 --> 00:10:00,100
broader community so when we created the

00:09:57,430 --> 00:10:01,510
cloud driver we actually sell the armory

00:10:00,100 --> 00:10:03,790
folks write a knowledgebase article

00:10:01,510 --> 00:10:05,080
which is super cool and they shared with

00:10:03,790 --> 00:10:08,110
the community how you could actually

00:10:05,080 --> 00:10:09,580
create a lambda pipeline through Dec and

00:10:08,110 --> 00:10:11,020
they did this pretty early on I want to

00:10:09,580 --> 00:10:12,820
say this was about six months ago and

00:10:11,020 --> 00:10:14,200
then the other piece is is I mentioned

00:10:12,820 --> 00:10:16,150
this a little bit with with Claire's

00:10:14,200 --> 00:10:17,740
that we are have we do we are involved

00:10:16,150 --> 00:10:18,820
with the AWS sig meetings so if you need

00:10:17,740 --> 00:10:19,840
to get in touch with us if there's

00:10:18,820 --> 00:10:22,360
things that you think we should be

00:10:19,840 --> 00:10:24,280
focused on please get into a sig

00:10:22,360 --> 00:10:25,570
discussion where there quite a bit and

00:10:24,280 --> 00:10:27,900
and we have some really great

00:10:25,570 --> 00:10:29,920
discussions with the broader community

00:10:27,900 --> 00:10:33,370
so next I want to dive a little bit

00:10:29,920 --> 00:10:35,050
deeper into spinnaker and ECS and what

00:10:33,370 --> 00:10:36,940
we've been doing with ECS in general

00:10:35,050 --> 00:10:39,760
because we're hearing a lot of customers

00:10:36,940 --> 00:10:41,680
that they are using e CF s-- so number

00:10:39,760 --> 00:10:43,300
one probably one of the coolest things

00:10:41,680 --> 00:10:45,490
and ali's here and she's gonna go in and

00:10:43,300 --> 00:10:47,260
just be the demo this is task definition

00:10:45,490 --> 00:10:48,790
artifacts and really what this allows

00:10:47,260 --> 00:10:51,070
you to do is you can almost think about

00:10:48,790 --> 00:10:53,440
this is like a kubernetes like manifest

00:10:51,070 --> 00:10:55,900
file that's going to describe the task

00:10:53,440 --> 00:10:57,610
or the container or the containers that

00:10:55,900 --> 00:10:59,380
you're going to launch so now this

00:10:57,610 --> 00:11:01,510
capability allows you to launch more

00:10:59,380 --> 00:11:03,460
than one container within spinnaker

00:11:01,510 --> 00:11:04,900
whereas before you could only launch a

00:11:03,460 --> 00:11:05,890
single container at a time so now you

00:11:04,900 --> 00:11:07,810
could actually launch multiple

00:11:05,890 --> 00:11:10,390
containers and Alys get a walk you

00:11:07,810 --> 00:11:12,160
through all of this another great

00:11:10,390 --> 00:11:14,350
takeaway is that you can now enable

00:11:12,160 --> 00:11:16,540
these task definitions to be stored in

00:11:14,350 --> 00:11:18,100
some sort of artifact repository so you

00:11:16,540 --> 00:11:20,710
can build this into your pipelines you

00:11:18,100 --> 00:11:22,120
can treat these these artifacts as code

00:11:20,710 --> 00:11:23,120
and so you can make different changes as

00:11:22,120 --> 00:11:27,040
you need to so

00:11:23,120 --> 00:11:29,720
this is a really nice feature next is

00:11:27,040 --> 00:11:31,400
service discovery so anyone that's using

00:11:29,720 --> 00:11:33,680
a micro services architecture servers

00:11:31,400 --> 00:11:35,930
discovery is super important so Ali did

00:11:33,680 --> 00:11:38,000
a lot of integration with AWS cloud map

00:11:35,930 --> 00:11:39,410
so that is available now today and then

00:11:38,000 --> 00:11:41,330
the other thing you can see here on the

00:11:39,410 --> 00:11:43,010
screen is placement constraints where

00:11:41,330 --> 00:11:45,110
are my funk where are my containers

00:11:43,010 --> 00:11:46,580
actually going to live within the

00:11:45,110 --> 00:11:47,839
cluster and so you can kind of control

00:11:46,580 --> 00:11:49,850
that and this would be very similar to

00:11:47,839 --> 00:11:52,070
like kubernetes labels and the placement

00:11:49,850 --> 00:11:56,930
strategy that you could use in that

00:11:52,070 --> 00:11:59,810
context okay so just a little bit on

00:11:56,930 --> 00:12:04,339
lambda talked about ECS a little bit so

00:11:59,810 --> 00:12:06,680
what about eks and there's no you know

00:12:04,339 --> 00:12:07,970
major thing here I think you all are

00:12:06,680 --> 00:12:10,490
aware that spinnaker does work pretty

00:12:07,970 --> 00:12:13,010
well with kubernetes and eks there's no

00:12:10,490 --> 00:12:14,240
difference here eks works extremely well

00:12:13,010 --> 00:12:17,779
and all the demos that you're going to

00:12:14,240 --> 00:12:20,200
see today are working on eks but the one

00:12:17,779 --> 00:12:22,520
takeaway that i want to share with you

00:12:20,200 --> 00:12:23,870
we're actually starting to dog food a

00:12:22,520 --> 00:12:26,960
lot of the spinnaker work that we're

00:12:23,870 --> 00:12:28,339
doing and i mentioned that reinvent you

00:12:26,960 --> 00:12:30,650
know we have a couple talks about

00:12:28,339 --> 00:12:32,900
spinnaker but we're gonna be giving a

00:12:30,650 --> 00:12:36,020
workshop where we're building out an

00:12:32,900 --> 00:12:38,150
application that will be deployed with

00:12:36,020 --> 00:12:39,290
spinnaker so we're gonna be talking at

00:12:38,150 --> 00:12:40,459
the workshop where we're deploying the

00:12:39,290 --> 00:12:41,750
application with spinnaker and we're

00:12:40,459 --> 00:12:43,700
also going to be doing a chalk talk

00:12:41,750 --> 00:12:46,610
talking about this in this particular

00:12:43,700 --> 00:12:49,430
case this was us scaling up to 500 pods

00:12:46,610 --> 00:12:50,750
so again we are trying to embrace min

00:12:49,430 --> 00:12:54,410
occur as much as possible and use it

00:12:50,750 --> 00:12:57,080
quite a bit alright so getting into the

00:12:54,410 --> 00:12:58,820
meat of this so when we last year when

00:12:57,080 --> 00:12:59,990
we contributed cloud driver everyone

00:12:58,820 --> 00:13:01,610
said hey great you contribute a cloud

00:12:59,990 --> 00:13:05,720
driver yes there's api's that you can

00:13:01,610 --> 00:13:07,370
use but what about a UI we really want a

00:13:05,720 --> 00:13:08,779
UI everyone said we need to have this UI

00:13:07,370 --> 00:13:10,880
if it's not there it's not really

00:13:08,779 --> 00:13:12,260
important so when we started thinking

00:13:10,880 --> 00:13:14,480
about this we said well we don't want to

00:13:12,260 --> 00:13:15,680
just create a UI just for ourselves we

00:13:14,480 --> 00:13:17,420
don't want this just to be lambda

00:13:15,680 --> 00:13:19,400
specific we wanted to create a new

00:13:17,420 --> 00:13:21,200
compute primitive that others in the

00:13:19,400 --> 00:13:23,330
community that have their own functions

00:13:21,200 --> 00:13:24,529
platforms they could also leverage

00:13:23,330 --> 00:13:26,959
perhaps some of the work that we've done

00:13:24,529 --> 00:13:29,630
from a UI perspective and so we actually

00:13:26,959 --> 00:13:31,220
began working with Netflix on what's the

00:13:29,630 --> 00:13:32,450
right approach what should the UI look

00:13:31,220 --> 00:13:33,589
like and so we began having those

00:13:32,450 --> 00:13:35,570
discussions

00:13:33,589 --> 00:13:36,830
Greg Greg Comstock was a great advisor

00:13:35,570 --> 00:13:39,200
for us while we were going through that

00:13:36,830 --> 00:13:40,820
so thank you Greg so again we've thought

00:13:39,200 --> 00:13:42,610
about this that this was a new compute

00:13:40,820 --> 00:13:45,440
primitive that we wanted to introduce to

00:13:42,610 --> 00:13:47,240
this is going to be a new UI design for

00:13:45,440 --> 00:13:50,120
anybody and anyone would be able to

00:13:47,240 --> 00:13:51,590
leverage it and then three we wanted to

00:13:50,120 --> 00:13:54,050
work with the community and so we we

00:13:51,590 --> 00:13:55,760
engage deeply through the AWS sig and we

00:13:54,050 --> 00:14:00,220
also engage directly with Netflix to

00:13:55,760 --> 00:14:03,650
focus on this so what does it look like

00:14:00,220 --> 00:14:05,570
that's it look great anyways this was

00:14:03,650 --> 00:14:06,980
our first mock-up in balsamic and so the

00:14:05,570 --> 00:14:08,300
first thing we did was we're like how is

00:14:06,980 --> 00:14:11,180
this what do we want this to look like

00:14:08,300 --> 00:14:13,820
and balsamic is a great tool to mock up

00:14:11,180 --> 00:14:16,310
your basic UI designs and so we had a

00:14:13,820 --> 00:14:18,470
big discussion at Netflix saying this is

00:14:16,310 --> 00:14:21,400
kind of what we're thinking here's the

00:14:18,470 --> 00:14:24,220
general feel of what we want to do and

00:14:21,400 --> 00:14:28,100
we went through a couple iterations and

00:14:24,220 --> 00:14:29,780
by the end of it we got pretty close to

00:14:28,100 --> 00:14:31,250
this and so working with Greg and the

00:14:29,780 --> 00:14:33,920
rest of Netflix team they gave us some

00:14:31,250 --> 00:14:36,140
feedback on how things should look but

00:14:33,920 --> 00:14:39,110
this is really where we ended up and so

00:14:36,140 --> 00:14:42,410
we did add this week the deck the deck

00:14:39,110 --> 00:14:43,850
code was merged and what we're going to

00:14:42,410 --> 00:14:46,610
do here in a minute is we're gonna walk

00:14:43,850 --> 00:14:49,220
you through using lambda with deck

00:14:46,610 --> 00:14:51,140
directly and again you can see from a

00:14:49,220 --> 00:14:52,730
functions perspective that we didn't say

00:14:51,140 --> 00:14:54,560
hey this is lambda it's actually

00:14:52,730 --> 00:14:55,490
function so this is a new compute

00:14:54,560 --> 00:14:56,930
primitive that we were trying to

00:14:55,490 --> 00:14:59,780
introduce and make sure that the

00:14:56,930 --> 00:15:01,370
community also use so with that we're

00:14:59,780 --> 00:15:04,430
gonna start with demo number one and

00:15:01,370 --> 00:15:05,720
Shalaka is gonna come up here and walk

00:15:04,430 --> 00:15:08,420
through the work that we've been doing

00:15:05,720 --> 00:15:11,480
from a lambda perspective hello everyone

00:15:08,420 --> 00:15:13,820
I'm Shalaka I'm an associate cloud

00:15:11,480 --> 00:15:16,340
developer with AWS and as Paul mentioned

00:15:13,820 --> 00:15:20,240
I worked on the UI piece for adding

00:15:16,340 --> 00:15:22,460
lambda support to spinnaker and with

00:15:20,240 --> 00:15:26,240
respect to lambda we've done two major

00:15:22,460 --> 00:15:29,300
feature enhancements on spinnaker one is

00:15:26,240 --> 00:15:32,270
having lambda as a target for an

00:15:29,300 --> 00:15:36,260
application load balancer and the other

00:15:32,270 --> 00:15:38,270
is that you can have the full crud

00:15:36,260 --> 00:15:40,310
functionality for lambda on spinnaker so

00:15:38,270 --> 00:15:43,250
you can create update and delete your

00:15:40,310 --> 00:15:45,620
lambda functions to spinnaker so let's

00:15:43,250 --> 00:15:50,630
see how you can do that I'll walk you

00:15:45,620 --> 00:15:54,380
through the demo so we are into the

00:15:50,630 --> 00:15:58,220
locations of spinnaker and let's go to

00:15:54,380 --> 00:16:00,920
my application I call it lambda test we

00:15:58,220 --> 00:16:06,560
have a new functions tab here let's

00:16:00,920 --> 00:16:10,850
create a function okay I'm calling my

00:16:06,560 --> 00:16:12,380
function add what function and this is

00:16:10,850 --> 00:16:16,220
the same function that Paul is going to

00:16:12,380 --> 00:16:19,160
use in his demo so I'm making easy for

00:16:16,220 --> 00:16:23,240
him to use the function because I'm

00:16:19,160 --> 00:16:24,860
already deploying it for him and this

00:16:23,240 --> 00:16:29,540
function is in Python so I'm selecting

00:16:24,860 --> 00:16:31,790
the runtime as Python 3.6 and the code

00:16:29,540 --> 00:16:37,930
for my function is inside an s3 bucket

00:16:31,790 --> 00:16:37,930
and the name of the bucket goes here

00:16:38,380 --> 00:16:50,600
it's PR spinnaker demo bucket and the

00:16:47,780 --> 00:16:52,730
zip file that has my code the name of

00:16:50,600 --> 00:16:59,060
the zip file which is in that s3 bucket

00:16:52,730 --> 00:17:01,640
goes here and the function that has my

00:16:59,060 --> 00:17:11,839
code the name of that function goes here

00:17:01,640 --> 00:17:14,990
that is add would lambda handler and I'm

00:17:11,839 --> 00:17:17,660
going to publish this function and I

00:17:14,990 --> 00:17:21,020
need a role that my function is going to

00:17:17,660 --> 00:17:22,339
assume when it executes and that role

00:17:21,020 --> 00:17:29,030
should have all the permissions required

00:17:22,339 --> 00:17:32,240
for my function so I have it here I'm

00:17:29,030 --> 00:17:33,890
just gonna copy paste it into here it's

00:17:32,240 --> 00:17:38,030
supposed to be an AR n which is an

00:17:33,890 --> 00:17:39,890
Amazon resource name and you can add

00:17:38,030 --> 00:17:48,170
environment variables for your function

00:17:39,890 --> 00:17:50,000
you can add tags so let's say team AWS

00:17:48,170 --> 00:17:51,770
you can have a description you can

00:17:50,000 --> 00:17:56,960
configure how much memory your function

00:17:51,770 --> 00:17:58,790
is going to need the maximum time that

00:17:56,960 --> 00:18:00,550
your function is going to be alive in

00:17:58,790 --> 00:18:02,440
case it doesn't run

00:18:00,550 --> 00:18:06,510
and then you can associate the function

00:18:02,440 --> 00:18:08,770
with the target group you can add a V PC

00:18:06,510 --> 00:18:14,200
subnets and security groups for your

00:18:08,770 --> 00:18:16,330
function to to be safe and then in case

00:18:14,200 --> 00:18:17,920
you need some error handling you want

00:18:16,330 --> 00:18:19,870
your lambda function to report if

00:18:17,920 --> 00:18:22,660
something fails in case there's a

00:18:19,870 --> 00:18:25,720
failure so you can have either an sqs QA

00:18:22,660 --> 00:18:37,210
RN or an SNS topic a RN in the dead

00:18:25,720 --> 00:18:38,770
letter config so let's add one and then

00:18:37,210 --> 00:18:43,750
if you want some monitoring and logging

00:18:38,770 --> 00:18:47,700
you have X ray tracing you can activate

00:18:43,750 --> 00:18:50,920
it and then it just hit create and then

00:18:47,700 --> 00:18:57,730
book the function let's see if it's

00:18:50,920 --> 00:19:00,820
created in the console so there you go

00:18:57,730 --> 00:19:04,740
my the name of the function is appended

00:19:00,820 --> 00:19:10,060
with the application name on spinnaker

00:19:04,740 --> 00:19:11,710
this is like a cheat code here and let's

00:19:10,060 --> 00:19:22,660
see if our function has everything that

00:19:11,710 --> 00:19:26,200
we put in so we have the code here we

00:19:22,660 --> 00:19:30,280
have the tag the role and the

00:19:26,200 --> 00:19:35,530
dead-letter config so this is how you

00:19:30,280 --> 00:19:37,630
can create a function and you can see

00:19:35,530 --> 00:19:40,720
all the details of the function here you

00:19:37,630 --> 00:19:45,400
can also go in and edit your function so

00:19:40,720 --> 00:19:54,610
let's do that let's say we'll add an

00:19:45,400 --> 00:20:01,960
environment variable so and say

00:19:54,610 --> 00:20:05,770
description put it inside a V PC with

00:20:01,960 --> 00:20:08,070
two subnets and the security group say

00:20:05,770 --> 00:20:08,070
update

00:20:13,279 --> 00:20:18,409
okay let's check it out on the console

00:20:16,950 --> 00:20:22,159
[Music]

00:20:18,409 --> 00:20:22,159
just refresh this

00:20:26,780 --> 00:20:37,940
so our environment variable and we pcs

00:20:32,680 --> 00:20:40,550
the description and you can also delete

00:20:37,940 --> 00:20:42,320
the function so just say delete and it's

00:20:40,550 --> 00:20:49,550
going to ask you if you really want to

00:20:42,320 --> 00:20:54,380
delete your function hit delete it takes

00:20:49,550 --> 00:21:02,480
a couple of seconds and there you go so

00:20:54,380 --> 00:21:06,040
on the console it's deleted and then

00:21:02,480 --> 00:21:08,960
another quick thing that we can do is

00:21:06,040 --> 00:21:11,930
associate a lambda function with a

00:21:08,960 --> 00:21:14,270
target group so for that we need to

00:21:11,930 --> 00:21:16,100
create a load balancer and this feature

00:21:14,270 --> 00:21:18,500
is only available for an application

00:21:16,100 --> 00:21:28,250
load balancer so let's go ahead and

00:21:18,500 --> 00:21:29,870
create one let's call it demo alb we

00:21:28,250 --> 00:21:36,770
don't want it to be an internal load

00:21:29,870 --> 00:21:39,980
balancer put them firewall so the name

00:21:36,770 --> 00:21:45,380
of the target group here you can edit it

00:21:39,980 --> 00:21:50,120
of course I'm just gonna say TG P and

00:21:45,380 --> 00:21:53,750
the target type is lambda so the UI

00:21:50,120 --> 00:21:57,200
changes a bit and then we don't have a

00:21:53,750 --> 00:22:02,480
path with the default path like slash

00:21:57,200 --> 00:22:04,520
health check so it's just slash and if

00:22:02,480 --> 00:22:06,890
you want we can enable multi value

00:22:04,520 --> 00:22:10,250
headers for lambda so multi value

00:22:06,890 --> 00:22:11,930
headers are what the name says HTTP

00:22:10,250 --> 00:22:17,210
headers which have multiple values for

00:22:11,930 --> 00:22:20,390
the same key and forward it to the

00:22:17,210 --> 00:22:22,130
listener and the target group is the

00:22:20,390 --> 00:22:22,460
name that we gave to the target group

00:22:22,130 --> 00:22:28,390
here

00:22:22,460 --> 00:22:28,390
TJ P and just say create

00:22:36,539 --> 00:22:47,359
okay so this is done and let's check it

00:22:42,089 --> 00:22:47,359
out on oh let's go here

00:22:52,330 --> 00:22:58,899
and on ec2 console and other target

00:22:55,779 --> 00:23:03,370
groups we will see that our Lambrettas

00:22:58,899 --> 00:23:05,260
target group is created and under

00:23:03,370 --> 00:23:07,179
targets we don't have anything yet here

00:23:05,260 --> 00:23:10,870
because we did not associate a function

00:23:07,179 --> 00:23:13,269
with the target group so let's do that

00:23:10,870 --> 00:23:16,330
let's go back to spinnaker under

00:23:13,269 --> 00:23:30,850
functions we deleted the last one so we

00:23:16,330 --> 00:23:34,440
just create one quickly I'm going to

00:23:30,850 --> 00:23:34,440
keep the configuration exactly same

00:23:45,760 --> 00:23:49,019
let's give it a roll

00:23:54,970 --> 00:24:00,270
and tag

00:24:04,710 --> 00:24:17,650
and the target group name goes here

00:24:08,680 --> 00:24:20,770
so our name was lambda test DGP and put

00:24:17,650 --> 00:24:23,980
it behind the same VPC and the same

00:24:20,770 --> 00:24:37,770
subnet same security group it's not a

00:24:23,980 --> 00:24:37,770
requirement oh and a deal to head create

00:24:42,240 --> 00:24:47,700
okay the UI on spinnaker takes about 25

00:24:45,510 --> 00:24:51,600
seconds to update so meanwhile let's go

00:24:47,700 --> 00:24:54,750
to AWS console in check so we are in the

00:24:51,600 --> 00:24:58,040
same target group lambda - t GP and when

00:24:54,750 --> 00:25:00,990
you see targets there's our function so

00:24:58,040 --> 00:25:02,790
when you hit the load balancer URL for

00:25:00,990 --> 00:25:06,290
this target group this function is

00:25:02,790 --> 00:25:10,700
executed let me hand it back to Paul and

00:25:06,290 --> 00:25:10,700
carried forward thank you so much

00:25:13,040 --> 00:25:17,250
Thank You Luca Thank You Shalaka that

00:25:16,740 --> 00:25:20,309
was great

00:25:17,250 --> 00:25:22,309
all right so that was the UI piece we

00:25:20,309 --> 00:25:25,080
spent a lot of time working on that

00:25:22,309 --> 00:25:28,950
there was a lot of details that went

00:25:25,080 --> 00:25:30,900
into that that's set up okay so imagine

00:25:28,950 --> 00:25:33,870
with me for a second now we have a lot

00:25:30,900 --> 00:25:35,610
of customers that come onto AWS and the

00:25:33,870 --> 00:25:37,260
first thing they say is like how do we

00:25:35,610 --> 00:25:39,210
on board what are we gonna do into

00:25:37,260 --> 00:25:40,530
customers typically go through this lift

00:25:39,210 --> 00:25:41,490
and shift approach maybe they're running

00:25:40,530 --> 00:25:43,200
VMware or they have some other

00:25:41,490 --> 00:25:45,290
environment on Prem and they want to

00:25:43,200 --> 00:25:48,750
actually move these assets over into AWS

00:25:45,290 --> 00:25:51,420
so with that said what's a great way to

00:25:48,750 --> 00:25:54,270
deploy applications on AWS well that is

00:25:51,420 --> 00:25:57,090
spinnaker of course so what we did was

00:25:54,270 --> 00:25:58,830
we have the first part where they're

00:25:57,090 --> 00:26:01,110
gonna migrate over to ec2 of course

00:25:58,830 --> 00:26:02,340
they're using VM so vm's work I'm not

00:26:01,110 --> 00:26:03,809
actually gonna bore you with the

00:26:02,340 --> 00:26:06,960
deployment of VMs because it takes a

00:26:03,809 --> 00:26:08,280
long time however you can see here is

00:26:06,960 --> 00:26:10,410
that I already have an application

00:26:08,280 --> 00:26:12,300
running and it's already configured and

00:26:10,410 --> 00:26:14,700
I can see it it's sitting behind my load

00:26:12,300 --> 00:26:16,559
balancer and so if I open this up so

00:26:14,700 --> 00:26:19,920
what what Shalaka did was she actually

00:26:16,559 --> 00:26:22,260
provisioned the the lambda code that

00:26:19,920 --> 00:26:23,700
allows me to vote on these applications

00:26:22,260 --> 00:26:25,740
so again you know here's a video of Jeff

00:26:23,700 --> 00:26:27,480
speaking the other thing that's

00:26:25,740 --> 00:26:29,160
happening behind the scenes is that real

00:26:27,480 --> 00:26:31,020
time were actually encoding some of

00:26:29,160 --> 00:26:32,580
these videos and we're pulling out

00:26:31,020 --> 00:26:35,340
interesting metadata so like this was

00:26:32,580 --> 00:26:37,260
reinvent from a couple years ago of a

00:26:35,340 --> 00:26:39,120
guy walking but so we're pulling out

00:26:37,260 --> 00:26:41,130
some interesting metadata with our ml

00:26:39,120 --> 00:26:42,929
service recognition but anyways the main

00:26:41,130 --> 00:26:46,290
takeaway here is that this application

00:26:42,929 --> 00:26:48,870
is now running on ec2 when I add these

00:26:46,290 --> 00:26:51,540
votes it's actually going through an

00:26:48,870 --> 00:26:53,250
incrementing a counter in dynamo and

00:26:51,540 --> 00:26:55,590
it's being displayed here and that was

00:26:53,250 --> 00:26:57,450
via the lambda function that Shalaka

00:26:55,590 --> 00:26:58,770
was using for us which is great so

00:26:57,450 --> 00:27:03,000
Shalaka thank you for that

00:26:58,770 --> 00:27:05,909
so moving on with the same theme is that

00:27:03,000 --> 00:27:07,470
you know your CIO or VP of architecture

00:27:05,909 --> 00:27:09,330
whomever you know he went to a

00:27:07,470 --> 00:27:11,370
conference or maybe he saw the Dilbert

00:27:09,330 --> 00:27:13,169
cartoon that we all saw and the Dilbert

00:27:11,370 --> 00:27:14,490
cartoon said something to the effect of

00:27:13,169 --> 00:27:17,490
if you really want to be working with

00:27:14,490 --> 00:27:19,799
technology kubernetes right I don't know

00:27:17,490 --> 00:27:20,820
if you guys saw that so now he says you

00:27:19,799 --> 00:27:23,700
know what I don't really want to be

00:27:20,820 --> 00:27:25,620
working with with VMs anymore I gotta be

00:27:23,700 --> 00:27:29,850
working with kubernetes so what does

00:27:25,620 --> 00:27:32,549
that look like so now we have is we have

00:27:29,850 --> 00:27:36,270
a pipeline that we had created here's an

00:27:32,549 --> 00:27:39,299
old pipeline so and geared of this so

00:27:36,270 --> 00:27:41,010
let's actually we can take a look in

00:27:39,299 --> 00:27:42,260
this pipeline there's nothing magical

00:27:41,010 --> 00:27:44,039
here we're just going to be deploying

00:27:42,260 --> 00:27:46,230
manifest there's gonna be a manual

00:27:44,039 --> 00:27:48,960
judgment that we're going to execute but

00:27:46,230 --> 00:27:50,820
so let's go ahead and run this so we're

00:27:48,960 --> 00:27:56,490
gonna start a manual execution of this

00:27:50,820 --> 00:27:58,950
pipeline and say run and it takes about

00:27:56,490 --> 00:28:00,240
20 seconds or so so what it's going to

00:27:58,950 --> 00:28:03,029
do it's going to read read through that

00:28:00,240 --> 00:28:05,730
manifest it's gonna grab a container

00:28:03,029 --> 00:28:07,140
from ECR which contains you know a

00:28:05,730 --> 00:28:08,850
similar web app that you would have

00:28:07,140 --> 00:28:10,440
created ecr's are elastic container

00:28:08,850 --> 00:28:12,809
registry so this could be like docker

00:28:10,440 --> 00:28:14,549
hub but you can use other things other

00:28:12,809 --> 00:28:17,309
solutions for your we're gonna store

00:28:14,549 --> 00:28:20,330
your applications so after this

00:28:17,309 --> 00:28:23,730
completes we can actually take a look at

00:28:20,330 --> 00:28:27,360
kubernetes here and let's say let's look

00:28:23,730 --> 00:28:30,299
at the pods okay so I can see 32 seconds

00:28:27,360 --> 00:28:34,320
ago now I have a web app but however if

00:28:30,299 --> 00:28:35,299
I want to see if I have a service or

00:28:34,320 --> 00:28:38,700
anything associated

00:28:35,299 --> 00:28:41,610
I don't have anything yet that's been

00:28:38,700 --> 00:28:43,710
you know created and so the next piece

00:28:41,610 --> 00:28:46,649
is is actually enabling this web app to

00:28:43,710 --> 00:28:47,730
expose an external IP for myself I want

00:28:46,649 --> 00:28:49,590
to be able to access this web app just

00:28:47,730 --> 00:28:51,659
like I did on the ec2 side so let's go

00:28:49,590 --> 00:28:52,980
ahead and hit continue now this next

00:28:51,659 --> 00:28:55,110
step in the pipeline is just saying

00:28:52,980 --> 00:28:56,970
execute this this additional manifest

00:28:55,110 --> 00:28:58,950
it's going to expose a kubernetes

00:28:56,970 --> 00:29:01,350
service that will now allow an external

00:28:58,950 --> 00:29:04,890
IP to be available and associated to my

00:29:01,350 --> 00:29:07,679
web app so let's take a look at this

00:29:04,890 --> 00:29:09,540
real quick and see if we have an

00:29:07,679 --> 00:29:13,200
external IP that's given

00:29:09,540 --> 00:29:18,230
yes and now I see a new DNS new host

00:29:13,200 --> 00:29:20,100
name and this should just be about done

00:29:18,230 --> 00:29:24,450
okay let's take a look at the load

00:29:20,100 --> 00:29:27,330
balancer and again hey here's my same

00:29:24,450 --> 00:29:29,420
web app now it's deployed using eks all

00:29:27,330 --> 00:29:32,850
working it was able to do this quickly

00:29:29,420 --> 00:29:34,380
so now fast-forward your CIO goes to a

00:29:32,850 --> 00:29:35,850
Gartner event and they said yeah you

00:29:34,380 --> 00:29:38,310
know we're hearing kubernetes is great

00:29:35,850 --> 00:29:40,080
and containerization is great but or

00:29:38,310 --> 00:29:42,300
hearing that serverless is the new

00:29:40,080 --> 00:29:43,920
hotness so what does that look like

00:29:42,300 --> 00:29:45,180
so with that Ally's going to come up on

00:29:43,920 --> 00:29:46,130
stage if she's gonna run through and

00:29:45,180 --> 00:29:58,260
give a demo of

00:29:46,130 --> 00:30:04,110
ECS thank you a guy is totally not a

00:29:58,260 --> 00:30:06,120
plant okay so my name is Ali I worked on

00:30:04,110 --> 00:30:08,610
the test definition artifact pieces in

00:30:06,120 --> 00:30:11,430
the ECS provider and I'm gonna try to

00:30:08,610 --> 00:30:17,300
show you us a couple of things today so

00:30:11,430 --> 00:30:19,560
the first is deploying the first is

00:30:17,300 --> 00:30:22,800
deploying an application to far gate

00:30:19,560 --> 00:30:25,260
using ECS the next is using the test

00:30:22,800 --> 00:30:27,150
test definition artifact to define

00:30:25,260 --> 00:30:29,850
multiple container applications that I

00:30:27,150 --> 00:30:31,520
want to deploy on to ECS and the final

00:30:29,850 --> 00:30:34,830
thing is to give you a little preview of

00:30:31,520 --> 00:30:37,170
an offering the log router offering we

00:30:34,830 --> 00:30:39,660
came out with recently using fluent fit

00:30:37,170 --> 00:30:41,700
um - that will allow you to route your

00:30:39,660 --> 00:30:44,430
logs to multiple different destinations

00:30:41,700 --> 00:30:46,650
so this capability will be available in

00:30:44,430 --> 00:30:50,130
spinnaker and the next minor release

00:30:46,650 --> 00:30:54,990
coming up that's 118 so the first thing

00:30:50,130 --> 00:30:56,580
I'll show is I have a and I am not used

00:30:54,990 --> 00:31:01,920
to working with a Mac so apologies if I

00:30:56,580 --> 00:31:03,030
fat finger stops this whole time okay so

00:31:01,920 --> 00:31:05,540
the first thing I want to show you is I

00:31:03,030 --> 00:31:09,240
have a test definition that defines

00:31:05,540 --> 00:31:12,630
multiple containers so here's what it

00:31:09,240 --> 00:31:14,760
looks like and it's kind of small but

00:31:12,630 --> 00:31:17,010
mainly what you want to take away from

00:31:14,760 --> 00:31:19,770
this is I have two containers to find

00:31:17,010 --> 00:31:21,930
here one is the nginx web application

00:31:19,770 --> 00:31:23,730
that Paul was showing off

00:31:21,930 --> 00:31:26,070
thing to note here is that there's no

00:31:23,730 --> 00:31:28,350
container image actually in this file

00:31:26,070 --> 00:31:30,960
this is because when spinnaker when the

00:31:28,350 --> 00:31:32,760
ECS provider launches your service it

00:31:30,960 --> 00:31:35,100
will take the most recent image in your

00:31:32,760 --> 00:31:37,380
pipeline and put it in here in place of

00:31:35,100 --> 00:31:39,750
this placeholder so the idea here is

00:31:37,380 --> 00:31:41,550
that you don't have to update your task

00:31:39,750 --> 00:31:44,190
definition every time you deploy your

00:31:41,550 --> 00:31:46,200
service spinnaker will take that file

00:31:44,190 --> 00:31:50,070
interpolate the newest image that you've

00:31:46,200 --> 00:31:51,540
deployed and push that to ECS instead so

00:31:50,070 --> 00:31:54,000
the second thing to look at is I have a

00:31:51,540 --> 00:31:56,850
second container that is my log router

00:31:54,000 --> 00:31:59,280
so this is using an AWS for fluent bit

00:31:56,850 --> 00:32:01,020
image that we've end that is using

00:31:59,280 --> 00:32:03,090
fluent bit and has a couple of plugins

00:32:01,020 --> 00:32:05,100
for clog watch logs and also Kinesis

00:32:03,090 --> 00:32:07,710
data streams built into it

00:32:05,100 --> 00:32:11,940
so I'm gonna use this along with my web

00:32:07,710 --> 00:32:13,110
app to route logs to s3 and finally you

00:32:11,940 --> 00:32:15,180
can see I have very important

00:32:13,110 --> 00:32:17,400
environmental variable that I need to

00:32:15,180 --> 00:32:20,120
deploy to this new application so I'm

00:32:17,400 --> 00:32:20,120
gonna try to do that now

00:32:20,630 --> 00:32:29,070
okay so I'll open up my ECS application

00:32:25,190 --> 00:32:31,560
go to pipelines okay so let's take a

00:32:29,070 --> 00:32:34,710
look and see how the ECS pipeline is

00:32:31,560 --> 00:32:36,060
configured so you can see I have a

00:32:34,710 --> 00:32:38,490
couple artifacts and your already

00:32:36,060 --> 00:32:41,310
configured I have this is the existing

00:32:38,490 --> 00:32:42,870
version and this is the new file that I

00:32:41,310 --> 00:32:45,060
just looked at that I want to deploy to

00:32:42,870 --> 00:32:47,250
my pipeline so for the sake of

00:32:45,060 --> 00:32:49,980
convenience and demoing I have these as

00:32:47,250 --> 00:32:52,620
two separate files in here but you could

00:32:49,980 --> 00:32:54,450
easily have just one file that you

00:32:52,620 --> 00:32:56,160
update with like through version control

00:32:54,450 --> 00:32:58,440
comments so you could actually trigger

00:32:56,160 --> 00:33:00,480
your pipeline based on like pushes to

00:32:58,440 --> 00:33:02,760
that github repo and it would take that

00:33:00,480 --> 00:33:03,690
file and deploy into your pipeline um so

00:33:02,760 --> 00:33:05,490
that's something you could do and we

00:33:03,690 --> 00:33:06,930
envision people doing with this but for

00:33:05,490 --> 00:33:09,660
the sake of the demo I'm gonna just

00:33:06,930 --> 00:33:12,540
switch to a different one so we have our

00:33:09,660 --> 00:33:18,870
new artifact configured and I'm gonna go

00:33:12,540 --> 00:33:20,880
to look at my ECS server group so a lot

00:33:18,870 --> 00:33:22,620
of this isn't new so I'm gonna hand wave

00:33:20,880 --> 00:33:25,170
over some of it but a couple things to

00:33:22,620 --> 00:33:26,640
take away one if you're using Fargate

00:33:25,170 --> 00:33:29,550
which is our server list container

00:33:26,640 --> 00:33:32,460
offering a cluster and ECS is just a

00:33:29,550 --> 00:33:33,690
logical grouping of applications so you

00:33:32,460 --> 00:33:34,650
don't have to actually launch any

00:33:33,690 --> 00:33:36,390
instances into

00:33:34,650 --> 00:33:39,150
it faregates going to take care of that

00:33:36,390 --> 00:33:42,570
for me so you see I have the Fargate

00:33:39,150 --> 00:33:44,340
launch type selected here and then I

00:33:42,570 --> 00:33:45,840
have my artifacts and this is where I

00:33:44,340 --> 00:33:48,420
can figure what artifact I want to pull

00:33:45,840 --> 00:33:50,970
my cast definitions run and so for the

00:33:48,420 --> 00:33:53,730
sake of this demo I want to switch to

00:33:50,970 --> 00:33:59,280
use this new one make sure I save my

00:33:53,730 --> 00:34:02,940
changes okay so now I'm gonna go ahead

00:33:59,280 --> 00:34:04,980
and kick off a manual deployment and I

00:34:02,940 --> 00:34:07,860
have this pipeline trick setup to

00:34:04,980 --> 00:34:10,470
trigger on pushes to an ECR repository

00:34:07,860 --> 00:34:16,159
but I'm just going to select now which

00:34:10,470 --> 00:34:19,919
tag I want to use now this usually takes

00:34:16,159 --> 00:34:23,419
like a minute so hopefully what they

00:34:19,919 --> 00:34:25,740
still with me today and so now it's

00:34:23,419 --> 00:34:27,510
deploying the ECS oh there we go

00:34:25,740 --> 00:34:29,909
so I have a new service that kicked off

00:34:27,510 --> 00:34:35,909
in DCs so let's go see what this looks

00:34:29,909 --> 00:34:38,940
like okay so you can see here's my ECS

00:34:35,909 --> 00:34:40,710
clustered I have one cluster running you

00:34:38,940 --> 00:34:42,870
can see I have two services running but

00:34:40,710 --> 00:34:44,280
I don't have any container instances so

00:34:42,870 --> 00:34:47,340
I didn't have to provision any ec2

00:34:44,280 --> 00:34:49,679
instances to get this to work so let's

00:34:47,340 --> 00:34:51,510
go look at the services and here so we

00:34:49,679 --> 00:34:53,760
can see our most recent one that just

00:34:51,510 --> 00:34:55,860
got deployed is here mom and then here's

00:34:53,760 --> 00:34:58,020
the old one so what's happening is

00:34:55,860 --> 00:35:00,510
spinnaker is spinning up a new ECS

00:34:58,020 --> 00:35:02,940
service and it's gonna drain the old one

00:35:00,510 --> 00:35:04,440
behind the load balancer so it'll like

00:35:02,940 --> 00:35:06,150
push up the new one

00:35:04,440 --> 00:35:08,670
or it'll deploy the new one set its

00:35:06,150 --> 00:35:10,530
desired task to one and then later on

00:35:08,670 --> 00:35:13,410
it's been to drain this one so we only

00:35:10,530 --> 00:35:16,410
have our newest application running so

00:35:13,410 --> 00:35:18,960
cool so I have my service running now

00:35:16,410 --> 00:35:21,390
let's see if I didn't screw up and

00:35:18,960 --> 00:35:22,980
select the wrong one that I've got so

00:35:21,390 --> 00:35:24,690
here am I this is my task definition

00:35:22,980 --> 00:35:28,350
that was just registered with that file

00:35:24,690 --> 00:35:31,650
I have my two containers and let's see

00:35:28,350 --> 00:35:34,620
oh here we go my very important

00:35:31,650 --> 00:35:37,800
environmental variable was updated so

00:35:34,620 --> 00:35:41,670
this service did pull down the latest

00:35:37,800 --> 00:35:44,610
file that I told it to look at so cool

00:35:41,670 --> 00:35:48,490
so I know that this service is running

00:35:44,610 --> 00:35:52,540
in ECS but what about our my logs

00:35:48,490 --> 00:35:58,090
persisting where I want them to so let's

00:35:52,540 --> 00:36:00,369
take a look at s3 to make sure my logs

00:35:58,090 --> 00:36:02,980
are still going to where they need to so

00:36:00,369 --> 00:36:06,880
fire lens has routed my logs using

00:36:02,980 --> 00:36:10,540
Kinesis data streams into s3 and I set

00:36:06,880 --> 00:36:13,119
this prefix so I can identify the folder

00:36:10,540 --> 00:36:18,240
it's sending stuff to I will just go to

00:36:13,119 --> 00:36:21,400
the very latest one and let's refresh

00:36:18,240 --> 00:36:23,470
okay so yeah so it's not going to be

00:36:21,400 --> 00:36:27,100
very exciting but we will if we look in

00:36:23,470 --> 00:36:30,280
this file we will see ELB health checks

00:36:27,100 --> 00:36:31,420
has been hitting that web application so

00:36:30,280 --> 00:36:36,580
let's just open it and make sure it

00:36:31,420 --> 00:36:40,180
actually has things in it cool so there

00:36:36,580 --> 00:36:42,580
we go so routing the s3 like I can't do

00:36:40,180 --> 00:36:45,010
a whole lot with it just in this format

00:36:42,580 --> 00:36:47,580
but firelands really enables you to

00:36:45,010 --> 00:36:49,900
route logs to where you want them to go

00:36:47,580 --> 00:36:52,119
so anywhere you would be able to route

00:36:49,900 --> 00:36:53,140
your logs to with fluent bit it's

00:36:52,119 --> 00:36:56,290
something you could love it to do this

00:36:53,140 --> 00:36:58,570
and the real value add of Firelands is

00:36:56,290 --> 00:37:01,690
that if you use this through ECS you

00:36:58,570 --> 00:37:03,010
don't have to configure you know if

00:37:01,690 --> 00:37:05,619
diversión a configuration file for

00:37:03,010 --> 00:37:07,090
fluent fit on your own so we wanted that

00:37:05,619 --> 00:37:09,760
capability to be right in the test

00:37:07,090 --> 00:37:11,380
definition for you however if you want

00:37:09,760 --> 00:37:13,780
to use eks or something else you can

00:37:11,380 --> 00:37:15,850
totally use the AWS vended image for

00:37:13,780 --> 00:37:18,700
fluent but that we have and leverage the

00:37:15,850 --> 00:37:20,920
plugins that are built in so cool

00:37:18,700 --> 00:37:23,740
so my logs are there I deployed with an

00:37:20,920 --> 00:37:26,350
artifact I'm on Fargate now let's see

00:37:23,740 --> 00:37:28,359
and make sure that the web app is

00:37:26,350 --> 00:37:30,580
actually running so full disclosure

00:37:28,359 --> 00:37:32,350
there is a known bug in the spinnaker UI

00:37:30,580 --> 00:37:33,790
for the ECS provider that doesn't that

00:37:32,350 --> 00:37:35,859
doesn't make it so easy to see the load

00:37:33,790 --> 00:37:38,230
balancer but I'm going to prove to you

00:37:35,859 --> 00:37:40,980
that this is running so I'm going to

00:37:38,230 --> 00:37:43,980
navigate to it through the AWS console

00:37:40,980 --> 00:37:43,980
alright

00:37:56,360 --> 00:38:04,050
and there we go so there's an EC s web

00:37:59,250 --> 00:38:06,420
service deployed and that is all I have

00:38:04,050 --> 00:38:08,250
for you so hopefully you had some good

00:38:06,420 --> 00:38:09,800
takeaways you see some stuff maybe you

00:38:08,250 --> 00:38:12,210
didn't know the EECS provider could do

00:38:09,800 --> 00:38:19,560
but yeah thank you very much for your

00:38:12,210 --> 00:38:22,320
time okay so I know we have about five

00:38:19,560 --> 00:38:24,180
minutes if there's any quick questions

00:38:22,320 --> 00:38:27,320
happy to happy to take them now or you

00:38:24,180 --> 00:38:27,320
can just come find us a little bit later

00:38:27,770 --> 00:38:43,760
please it's anticipated that it's going

00:38:41,970 --> 00:38:45,480
to be sidecars on on deployed

00:38:43,760 --> 00:38:47,070
applications and that's just sort of the

00:38:45,480 --> 00:38:50,210
model from what for log publishing

00:38:47,070 --> 00:38:50,210
through Firelands is that how that works

00:38:51,020 --> 00:38:56,130
like far into the future what the

00:38:53,340 --> 00:38:58,110
different iterations of it might be but

00:38:56,130 --> 00:39:01,020
yeah the idea is that you could run a

00:38:58,110 --> 00:39:02,760
sidecar fluid container and then ECS

00:39:01,020 --> 00:39:04,200
will do some of the handling of

00:39:02,760 --> 00:39:06,180
configuring that for you depending on

00:39:04,200 --> 00:39:09,540
what settings you use but yeah that's

00:39:06,180 --> 00:39:13,860
the idea and I had a question regarding

00:39:09,540 --> 00:39:16,770
the lamb lambdas support had you at

00:39:13,860 --> 00:39:19,710
least contemplated enabling the feature

00:39:16,770 --> 00:39:21,840
to be able to first pull arbiter lambda

00:39:19,710 --> 00:39:23,370
artifacts from like an artifact tree or

00:39:21,840 --> 00:39:24,810
something published them up into s3 and

00:39:23,370 --> 00:39:26,310
then proceed to the next step or is that

00:39:24,810 --> 00:39:27,750
something that you know it's probably

00:39:26,310 --> 00:39:29,040
the sort of step that could be a custom

00:39:27,750 --> 00:39:30,360
stage or something like that but I just

00:39:29,040 --> 00:39:34,710
wondering if it if you pulled that

00:39:30,360 --> 00:39:37,110
thread at all Oh as in to get get

00:39:34,710 --> 00:39:39,000
lambdas the zip files from late for

00:39:37,110 --> 00:39:40,380
lambdas that are restored in like a

00:39:39,000 --> 00:39:42,000
private artifactory or something like

00:39:40,380 --> 00:39:46,860
that and then published up into s3 as

00:39:42,000 --> 00:39:48,180
part of the deployment process so I

00:39:46,860 --> 00:39:49,410
think the question is from a pipeline

00:39:48,180 --> 00:39:51,330
perspective is like can we do the

00:39:49,410 --> 00:39:53,220
pipeline integration and we realized

00:39:51,330 --> 00:39:55,020
that we wanted to get the UI work the

00:39:53,220 --> 00:39:56,940
initial UI piece done but then the next

00:39:55,020 --> 00:39:58,890
phase is is like updating the pipelines

00:39:56,940 --> 00:40:00,270
I think one of the key takeaways is is

00:39:58,890 --> 00:40:01,710
what armory did and the knowledgebase

00:40:00,270 --> 00:40:03,300
article that I wrote earlier is that

00:40:01,710 --> 00:40:05,250
they are following a workflow similar to

00:40:03,300 --> 00:40:06,360
that but we hear you loud and clear it's

00:40:05,250 --> 00:40:09,180
something that we need to look at and

00:40:06,360 --> 00:40:23,039
enable in the future

00:40:09,180 --> 00:40:25,289
oh yeah no I have a question on

00:40:23,039 --> 00:40:28,410
functions is there an API to create

00:40:25,289 --> 00:40:31,740
those or is it only by a UI you can

00:40:28,410 --> 00:40:32,970
absolutely absolutely use the API and so

00:40:31,740 --> 00:40:34,319
we have if you go to the cloud driver

00:40:32,970 --> 00:40:36,359
page for lamda you'll see the full

00:40:34,319 --> 00:40:38,130
documentation on the various API calls

00:40:36,359 --> 00:40:40,140
that you can make to create and do full

00:40:38,130 --> 00:40:42,380
crud functionality and actually execute

00:40:40,140 --> 00:40:44,579
your functions as well

00:40:42,380 --> 00:40:47,359
hey I said the beginning you mentioned

00:40:44,579 --> 00:40:51,750
about dynamic pipelines using Fargate

00:40:47,359 --> 00:40:53,130
yes yes so I wasn't so you want to talk

00:40:51,750 --> 00:40:58,349
to the artifacts and like what the

00:40:53,130 --> 00:41:02,369
artifacts enable you to do yeah so I

00:40:58,349 --> 00:41:04,470
think you implementing the artifact

00:41:02,369 --> 00:41:07,319
functionality was a way to have you

00:41:04,470 --> 00:41:08,880
version not just your image that's

00:41:07,319 --> 00:41:10,770
working its way through the pipeline but

00:41:08,880 --> 00:41:12,720
also any other metadata you need to run

00:41:10,770 --> 00:41:13,950
that application so I think when he

00:41:12,720 --> 00:41:15,660
mentioned that he was speaking to the

00:41:13,950 --> 00:41:18,180
fact that now you conversion that entire

00:41:15,660 --> 00:41:19,319
application then through artifacts and

00:41:18,180 --> 00:41:21,089
use that in your pipeline as well

00:41:19,319 --> 00:41:24,000
instead of just pushing the image

00:41:21,089 --> 00:41:25,470
through which is the main like piece of

00:41:24,000 --> 00:41:27,900
work that the EECS pipeline is going to

00:41:25,470 --> 00:41:29,730
do so I think that that's really the

00:41:27,900 --> 00:41:31,680
dynamic piece now it's now you can use

00:41:29,730 --> 00:41:33,660
artifacts to sort of deploy and version

00:41:31,680 --> 00:41:35,420
all aspects of your task definition as

00:41:33,660 --> 00:41:38,430
opposed to just the image so the

00:41:35,420 --> 00:41:43,190
hydrating with different values is what

00:41:38,430 --> 00:41:43,190
the dynamism is yeah okay thank you okay

00:41:44,670 --> 00:41:47,630
any other questions

00:41:58,500 --> 00:42:04,720
as regards the the ECS service support i

00:42:02,560 --> 00:42:07,240
didn't see in the UI there are things

00:42:04,720 --> 00:42:09,610
like auto scaling rules and things of

00:42:07,240 --> 00:42:12,130
that sort people wanted to sort of add

00:42:09,610 --> 00:42:13,780
those in is that a should we is that

00:42:12,130 --> 00:42:15,010
again like an extra stage where we would

00:42:13,780 --> 00:42:16,600
terraform them in or something like that

00:42:15,010 --> 00:42:19,030
or do you have any thoughts at this

00:42:16,600 --> 00:42:23,020
stage about how best to integrate that

00:42:19,030 --> 00:42:24,850
kind of thing where there are gaps in

00:42:23,020 --> 00:42:26,020
your ability to configure like each

00:42:24,850 --> 00:42:27,910
other tasks auto-scaling

00:42:26,020 --> 00:42:30,490
yeah test auto scaling rules and

00:42:27,910 --> 00:42:33,040
policies from within the UI what you can

00:42:30,490 --> 00:42:34,930
do today is if you have a service that

00:42:33,040 --> 00:42:38,020
exists and it has your auto scaling

00:42:34,930 --> 00:42:40,540
policies on it when you can configure it

00:42:38,020 --> 00:42:42,790
that so when spinnaker deploys to that

00:42:40,540 --> 00:42:46,450
service it will copy over those existing

00:42:42,790 --> 00:42:47,770
rules to the new iteration so it's not a

00:42:46,450 --> 00:42:49,240
perfect solution and that's something

00:42:47,770 --> 00:42:51,940
that like that's a gap we know we need

00:42:49,240 --> 00:42:54,010
to address but right now if you you

00:42:51,940 --> 00:42:56,770
create a service you set it up once like

00:42:54,010 --> 00:42:58,990
through the ACS console or sorry the ec2

00:42:56,770 --> 00:43:00,820
console or through the api's then all

00:42:58,990 --> 00:43:02,830
your subsequent deployments will

00:43:00,820 --> 00:43:04,810
leverage those same policies so if you

00:43:02,830 --> 00:43:07,240
can retain what you have but the ability

00:43:04,810 --> 00:43:13,570
to like create them from scratch is not

00:43:07,240 --> 00:43:15,970
there yet okay fair enough hi I have a

00:43:13,570 --> 00:43:18,130
question about the lambda runtime so

00:43:15,970 --> 00:43:21,490
during the demo I saw a drop down if

00:43:18,130 --> 00:43:24,910
that dynamically pulled from AWS or is

00:43:21,490 --> 00:43:27,190
that less because AWS constantly keeps

00:43:24,910 --> 00:43:37,150
changing the little storefront times so

00:43:27,190 --> 00:43:40,020
how do you on keeping up with it we

00:43:37,150 --> 00:43:40,020
struggle with that too

00:43:46,200 --> 00:43:50,050
yes just if you can't hear that tan

00:43:48,970 --> 00:43:51,760
another question is that today we

00:43:50,050 --> 00:43:53,650
hard-coded in the list of the various

00:43:51,760 --> 00:43:55,390
runtimes that we support and so in the

00:43:53,650 --> 00:43:56,680
future we need to work we need to work

00:43:55,390 --> 00:43:58,060
with the lambda team to be able to pull

00:43:56,680 --> 00:44:00,100
that list to get a current list of the

00:43:58,060 --> 00:44:05,190
available runtimes and then put that

00:44:00,100 --> 00:44:05,190

YouTube URL: https://www.youtube.com/watch?v=h6pBhLZlsto


