Title: Sen Nirmalya "Getting Started with Spinnaker (part 1)" - Spinnaker Summit 2019
Publication date: 2019-12-03
Playlist: Spinnaker Summit 2019
Description: 
	In this session, we will cover how to setup Spinnaker to deploy your applications to production in multiple environments(AWS, Kubernetes, etc).  We will walk-through how to integrate with your CI platform and source control and image repositories and any other eco-system tools. We will also cover how to set up basic  RBAC with LDAP/AD integrations.
Captions: 
	00:00:04,790 --> 00:00:11,370
[Laughter]

00:00:09,310 --> 00:00:11,370
you

00:00:15,790 --> 00:00:21,010
so a little bit I'm here for these guys

00:00:18,939 --> 00:00:24,220
so they paid for my trip here to have to

00:00:21,010 --> 00:00:27,970
talk about them so I work for company

00:00:24,220 --> 00:00:31,419
collapse Amex that's VC funded we have

00:00:27,970 --> 00:00:34,360
offices worldwide we have people from

00:00:31,419 --> 00:00:39,480
Netflix AWS I myself has spent time at

00:00:34,360 --> 00:00:43,450
Oracle and Cisco over a decade and we

00:00:39,480 --> 00:00:46,030
work with spinnaker ok

00:00:43,450 --> 00:00:47,620
so you know we have a booth out there so

00:00:46,030 --> 00:00:51,300
you guys can always come by and talk

00:00:47,620 --> 00:00:53,379
about it what I'm going to talk about is

00:00:51,300 --> 00:00:56,079
I'll talk about the architecture of

00:00:53,379 --> 00:00:57,550
spinnaker I'm going to talk about the

00:00:56,079 --> 00:00:59,649
different install options that are

00:00:57,550 --> 00:01:02,440
available and I'll do a very simple

00:00:59,649 --> 00:01:04,989
install in crib inators like you know

00:01:02,440 --> 00:01:09,310
during this session itself I'll set one

00:01:04,989 --> 00:01:11,229
up in Google Cloud in gke and up and

00:01:09,310 --> 00:01:13,930
running and run a pipeline on it right

00:01:11,229 --> 00:01:16,360
so if you guys want to sort of try it

00:01:13,930 --> 00:01:18,820
out later you can sort of do that it

00:01:16,360 --> 00:01:20,469
doesn't take a whole lot then I'll talk

00:01:18,820 --> 00:01:24,490
about the different configurations that

00:01:20,469 --> 00:01:26,770
you can do in spinnaker and given how

00:01:24,490 --> 00:01:30,000
much time's left I'll get into how you

00:01:26,770 --> 00:01:32,799
secure spinnaker or any other production

00:01:30,000 --> 00:01:39,130
considerations when you actually have to

00:01:32,799 --> 00:01:41,140
take spinnaker to production ok you guys

00:01:39,130 --> 00:01:43,119
are all here so you know I'm not going

00:01:41,140 --> 00:01:45,130
to talk about what spinnaker is you guys

00:01:43,119 --> 00:01:47,859
already know it's a spinnaker only

00:01:45,130 --> 00:01:51,310
summit but what I'm going to talk about

00:01:47,859 --> 00:01:54,039
a little bit is where I see spinnaker

00:01:51,310 --> 00:01:58,899
being different or the value it provides

00:01:54,039 --> 00:02:00,850
as a continuous delivery platform so

00:01:58,899 --> 00:02:02,350
where spinnaker helps is like you can

00:02:00,850 --> 00:02:05,500
manage multiple clouds you know

00:02:02,350 --> 00:02:09,190
enterprises already have VMs they're

00:02:05,500 --> 00:02:11,200
using AWS as your on-prem and then you

00:02:09,190 --> 00:02:11,980
know there's a huge adoption of cuban it

00:02:11,200 --> 00:02:13,900
is going on

00:02:11,980 --> 00:02:16,210
so what spinnaker allows you to do is

00:02:13,900 --> 00:02:18,520
manage multiple cloud environments from

00:02:16,210 --> 00:02:21,340
one platform I think that's a big value

00:02:18,520 --> 00:02:22,840
and it provides a single pane from where

00:02:21,340 --> 00:02:24,430
you can see what's going on what

00:02:22,840 --> 00:02:26,590
resources are deployed and you can even

00:02:24,430 --> 00:02:28,120
control and view them what I like a lot

00:02:26,590 --> 00:02:29,890
is that hey if I

00:02:28,120 --> 00:02:32,769
something's been triggered in Jenkins or

00:02:29,890 --> 00:02:34,540
I want to see what this AWS resource

00:02:32,769 --> 00:02:36,220
looks like or a Cuban at his resource

00:02:34,540 --> 00:02:38,019
looks like I don't need to log into

00:02:36,220 --> 00:02:40,690
different duis I can view them right

00:02:38,019 --> 00:02:42,760
from that UI so you know it's a single

00:02:40,690 --> 00:02:44,950
pane of control not only for the ops but

00:02:42,760 --> 00:02:47,110
even the developers also right so that's

00:02:44,950 --> 00:02:49,840
a good thing and another thing it's a

00:02:47,110 --> 00:02:51,790
very pluggable model you can customize

00:02:49,840 --> 00:02:55,150
it and plug in you know enterprise rules

00:02:51,790 --> 00:03:00,310
and policies in there so that's again a

00:02:55,150 --> 00:03:04,239
big plus I see for spinnaker in terms of

00:03:00,310 --> 00:03:05,709
a continuous delivery platform what does

00:03:04,239 --> 00:03:09,010
the spinnaker architecture looks like

00:03:05,709 --> 00:03:12,700
it's a micro services based architecture

00:03:09,010 --> 00:03:17,739
lot of components out there I'll briefly

00:03:12,700 --> 00:03:21,269
talk about them in here there is the UI

00:03:17,739 --> 00:03:23,980
that you see is served by this deck and

00:03:21,269 --> 00:03:27,430
everything is interfaced with gate which

00:03:23,980 --> 00:03:29,590
is like an API server right that you can

00:03:27,430 --> 00:03:31,930
have even API is calling that gate and

00:03:29,590 --> 00:03:34,329
you can do automations with that there

00:03:31,930 --> 00:03:36,459
are other components in there the main

00:03:34,329 --> 00:03:38,650
one is the Orca which is the real

00:03:36,459 --> 00:03:41,049
orchestration engine that does the real

00:03:38,650 --> 00:03:43,569
orchestration all the pipeline's that

00:03:41,049 --> 00:03:45,220
you have what should run next and all

00:03:43,569 --> 00:03:48,250
that that orchestration is done by the

00:03:45,220 --> 00:03:51,400
Orca which talks with a bunch of

00:03:48,250 --> 00:03:53,980
different services one of them is Rosco

00:03:51,400 --> 00:03:56,829
we just sort of called the bakery that's

00:03:53,980 --> 00:03:59,949
where you build your images like a mies

00:03:56,829 --> 00:04:04,120
machine or as your VMs and all that

00:03:59,949 --> 00:04:06,129
that's basically baked and Rosco cloud

00:04:04,120 --> 00:04:08,669
driver actually creates the resources

00:04:06,129 --> 00:04:12,669
for you your VMs your load balancers

00:04:08,669 --> 00:04:16,120
your firewall rules whichever are you

00:04:12,669 --> 00:04:18,489
using Cuba natives or AWS or Azure it's

00:04:16,120 --> 00:04:24,190
it basically goes through a cloud driver

00:04:18,489 --> 00:04:27,039
to create those resources Fiat here is

00:04:24,190 --> 00:04:28,630
your authorization server it basically

00:04:27,039 --> 00:04:31,510
controls the permissions do you have

00:04:28,630 --> 00:04:33,940
permission to do a task and all that

00:04:31,510 --> 00:04:36,430
that is very basically powerful it's

00:04:33,940 --> 00:04:37,960
group a role based so if you have a role

00:04:36,430 --> 00:04:40,180
it will let you do it if you don't have

00:04:37,960 --> 00:04:41,300
the role you can do it so making sure

00:04:40,180 --> 00:04:42,800
that anyone

00:04:41,300 --> 00:04:46,310
cannot come in and just deploy to a

00:04:42,800 --> 00:04:49,099
production system right the other things

00:04:46,310 --> 00:04:51,550
in there are echo is it sends out emails

00:04:49,099 --> 00:04:56,840
slack messages and all that

00:04:51,550 --> 00:04:58,639
egor allows you to have monitor external

00:04:56,840 --> 00:05:01,550
systems and trigger pipelines like if

00:04:58,639 --> 00:05:03,530
you have an event in gate or a darker

00:05:01,550 --> 00:05:06,020
images built you want to kick off a

00:05:03,530 --> 00:05:10,550
pipeline that's where Igor comes into

00:05:06,020 --> 00:05:15,620
play and does that and Kanta is the

00:05:10,550 --> 00:05:19,039
inbuilt canary analysis there how many

00:05:15,620 --> 00:05:21,169
of you are aware of canary analysis ok

00:05:19,039 --> 00:05:23,210
quite a few so what you basically do is

00:05:21,169 --> 00:05:25,370
that you have a software going out you

00:05:23,210 --> 00:05:28,909
don't know how good it is so what you do

00:05:25,370 --> 00:05:31,219
is you deploy your baseline and then you

00:05:28,909 --> 00:05:35,030
deploy your cane area out of your new

00:05:31,219 --> 00:05:37,550
release right what kind does it it

00:05:35,030 --> 00:05:40,069
basically looks at matrix from both

00:05:37,550 --> 00:05:42,770
these two releases and compares it and

00:05:40,069 --> 00:05:44,240
and sees if it's good enough or not and

00:05:42,770 --> 00:05:45,889
then if it's good enough then you can

00:05:44,240 --> 00:05:50,259
make the decision to go forward and

00:05:45,889 --> 00:05:53,630
deploy to production stage online and

00:05:50,259 --> 00:05:56,509
finally you have this halyard that's the

00:05:53,630 --> 00:05:59,930
configuration engine for a spinnaker you

00:05:56,509 --> 00:06:01,580
know so halyard sits outside of all of

00:05:59,930 --> 00:06:03,830
these that's where you configure all

00:06:01,580 --> 00:06:05,509
your spinnaker stuff and that's what I

00:06:03,830 --> 00:06:08,710
will basically go through the different

00:06:05,509 --> 00:06:12,080
configuration things that you can do and

00:06:08,710 --> 00:06:13,849
and then once you have set them up you

00:06:12,080 --> 00:06:16,279
basically apply them to your environment

00:06:13,849 --> 00:06:18,919
and then halyard would spin up and down

00:06:16,279 --> 00:06:22,879
the nodes of a spinnaker as required

00:06:18,919 --> 00:06:27,050
okay so that's the micro services based

00:06:22,879 --> 00:06:31,550
architecture for spinnaker if I have to

00:06:27,050 --> 00:06:33,610
install it what are my options because

00:06:31,550 --> 00:06:37,370
it's micro services based architecture

00:06:33,610 --> 00:06:39,500
the best install option is really

00:06:37,370 --> 00:06:45,020
deploying in a cuban ettus environment

00:06:39,500 --> 00:06:48,620
okay you get the scalability that you

00:06:45,020 --> 00:06:51,289
can do very easily as opposed to if you

00:06:48,620 --> 00:06:53,780
are doing sort of a local or a VM based

00:06:51,289 --> 00:06:56,810
installation it is provided if you see

00:06:53,780 --> 00:06:58,730
the second bullet there there are Debian

00:06:56,810 --> 00:07:01,580
packages available and you can use them

00:06:58,730 --> 00:07:03,230
to deploy in single machines I know

00:07:01,580 --> 00:07:06,830
people have done it on multiple machines

00:07:03,230 --> 00:07:09,260
it's not fun or easy but you can do it

00:07:06,830 --> 00:07:11,710
but the easiest way to really manage a

00:07:09,260 --> 00:07:14,740
production deployment is in kubernetes

00:07:11,710 --> 00:07:17,690
the spinnaker community does publish

00:07:14,740 --> 00:07:20,210
Ubuntu based images and there's some Red

00:07:17,690 --> 00:07:24,380
Hat based images that's published by ops

00:07:20,210 --> 00:07:26,870
MX certified by rel two there is a hell

00:07:24,380 --> 00:07:30,020
aren't available to deploy that's what

00:07:26,870 --> 00:07:32,900
I'm going to use and set up a spinnaker

00:07:30,020 --> 00:07:35,630
instance and their even operators

00:07:32,900 --> 00:07:37,600
available to deploy it in open ship type

00:07:35,630 --> 00:07:44,180
environments or even regular Kuban it is

00:07:37,600 --> 00:07:48,070
environment so how do you install it to

00:07:44,180 --> 00:07:50,570
install in cuban it is you need

00:07:48,070 --> 00:07:54,169
kubernetes cluster with at least two

00:07:50,570 --> 00:07:55,790
gigs of memory and six course you need

00:07:54,169 --> 00:08:00,050
helm installed in your cuban it is

00:07:55,790 --> 00:08:03,169
cluster and it's better you have support

00:08:00,050 --> 00:08:04,580
for persistent storage you can bring it

00:08:03,169 --> 00:08:07,790
up i will show it to you without

00:08:04,580 --> 00:08:09,470
persistent storage but you know if one

00:08:07,790 --> 00:08:12,830
of your pods goes down you will lose

00:08:09,470 --> 00:08:14,930
data right so that's the drawback of not

00:08:12,830 --> 00:08:24,410
using persistent storage but you should

00:08:14,930 --> 00:08:26,419
use persistent storage 20 I'll walk

00:08:24,410 --> 00:08:28,340
through the values dirty ammo

00:08:26,419 --> 00:08:31,760
how many of you are familiar with town

00:08:28,340 --> 00:08:33,710
charts right so you guys know values 30

00:08:31,760 --> 00:08:35,479
ml is a pretty good way to configure

00:08:33,710 --> 00:08:37,490
your deployment so there is a values

00:08:35,479 --> 00:08:38,780
dirty amal that you can customize quite

00:08:37,490 --> 00:08:43,849
a lot and i'll walk you through a little

00:08:38,780 --> 00:08:45,890
bit so the the spinnaker hell chart is

00:08:43,849 --> 00:08:50,650
published as part of the stable releases

00:08:45,890 --> 00:08:50,650
so let's go off and install one

00:09:02,530 --> 00:09:09,590
is this visible at the bottom nah

00:09:07,180 --> 00:09:12,590
someone's in here but okay I'll make it

00:09:09,590 --> 00:09:15,800
a little bigger so what you can see here

00:09:12,590 --> 00:09:19,220
is I have a cluster already set up that

00:09:15,800 --> 00:09:22,670
has six CPUs and 22 gigs of memory

00:09:19,220 --> 00:09:26,450
available it's running in Google it's a

00:09:22,670 --> 00:09:30,200
GK Google managed manage kubernetes

00:09:26,450 --> 00:09:31,610
cluster so what I'm going to do is run

00:09:30,200 --> 00:09:34,220
the command that I showed you earlier

00:09:31,610 --> 00:09:38,420
right let me make this bigger so that

00:09:34,220 --> 00:09:41,180
more of you can you can see it and let

00:09:38,420 --> 00:09:42,320
me it will stay at the bottom can you

00:09:41,180 --> 00:09:47,030
guys see at the bottom of the screen

00:09:42,320 --> 00:09:51,770
okay so I'm going to do a helm install

00:09:47,030 --> 00:09:55,940
just give it a name I say that stable

00:09:51,770 --> 00:09:59,930
spinnaker and I have a values dot yeah

00:09:55,940 --> 00:10:04,180
Mel here that would trigger of the

00:09:59,930 --> 00:10:08,210
installation of Cuban it is based

00:10:04,180 --> 00:10:10,310
spinnaker it will take about six or

00:10:08,210 --> 00:10:11,600
minutes so let's go back and look at

00:10:10,310 --> 00:10:14,870
other things and I'll come back and

00:10:11,600 --> 00:10:16,490
complete it over here so when you are

00:10:14,870 --> 00:10:20,840
setting up spinnaker what are the

00:10:16,490 --> 00:10:23,090
different things that you configure one

00:10:20,840 --> 00:10:26,330
is storage right what are the things

00:10:23,090 --> 00:10:28,460
that Cuban data stores it stores like

00:10:26,330 --> 00:10:31,250
you will create accounts in Cuba netis

00:10:28,460 --> 00:10:32,960
different providers you will set up in

00:10:31,250 --> 00:10:37,100
Cuba notice all that information is

00:10:32,960 --> 00:10:40,960
persisted as the pipeline's run the

00:10:37,100 --> 00:10:44,450
pipeline states are also persistent also

00:10:40,960 --> 00:10:48,020
you know what Cuba what a spinnaker does

00:10:44,450 --> 00:10:50,060
it it it will go and discover all the

00:10:48,020 --> 00:10:52,850
resources that are there in the counts

00:10:50,060 --> 00:10:54,410
out there right it will go to AWS figure

00:10:52,850 --> 00:10:56,630
out all the resources that are running

00:10:54,410 --> 00:10:58,760
there or kubernetes resources running

00:10:56,630 --> 00:11:02,330
there so that also is cached and

00:10:58,760 --> 00:11:03,920
available so that's what storage is used

00:11:02,330 --> 00:11:05,240
for I'll get into a little bit of what

00:11:03,920 --> 00:11:07,760
are the different types of storages are

00:11:05,240 --> 00:11:10,810
supported then there are these providers

00:11:07,760 --> 00:11:14,630
providers are the different cloud

00:11:10,810 --> 00:11:15,230
platform visors that you integrate with

00:11:14,630 --> 00:11:17,960
a double

00:11:15,230 --> 00:11:19,760
kubernetes Azure so those are the things

00:11:17,960 --> 00:11:22,520
that you configure into your system

00:11:19,760 --> 00:11:24,410
right with credentials so that it knows

00:11:22,520 --> 00:11:27,230
how to talk to it connect to it and all

00:11:24,410 --> 00:11:29,180
that and where that's where also you do

00:11:27,230 --> 00:11:32,030
is in the same Cuba notice you may

00:11:29,180 --> 00:11:33,800
register with different credentials so

00:11:32,030 --> 00:11:36,230
that stage has a different credentials

00:11:33,800 --> 00:11:39,130
versus production environments so that

00:11:36,230 --> 00:11:41,680
you can control who gets to deploy where

00:11:39,130 --> 00:11:45,710
you can also integrate with a bunch of

00:11:41,680 --> 00:11:51,890
CI systems Jenkins and all that and then

00:11:45,710 --> 00:11:54,350
also you configure artifacts and then

00:11:51,890 --> 00:11:58,310
you also configure pipeline triggers in

00:11:54,350 --> 00:12:01,600
there let's go look at how do I actually

00:11:58,310 --> 00:12:04,490
configure it I talked about we use how

00:12:01,600 --> 00:12:06,800
the halyard the box I showed on the

00:12:04,490 --> 00:12:09,230
right hand side you actually log in

00:12:06,800 --> 00:12:14,240
there and you run different hal config

00:12:09,230 --> 00:12:16,580
commands right and at the end of it once

00:12:14,240 --> 00:12:18,590
you are done you do a hal deploy apply

00:12:16,580 --> 00:12:20,960
what it will do is all the configuration

00:12:18,590 --> 00:12:23,530
changes you did it will take it bunch a

00:12:20,960 --> 00:12:26,390
bunch them up and apply to that whole

00:12:23,530 --> 00:12:28,910
deployment it will take care of stopping

00:12:26,390 --> 00:12:31,520
and starting the servers if needed it's

00:12:28,910 --> 00:12:33,710
pretty intelligent in that if you made a

00:12:31,520 --> 00:12:34,970
config change that only requires restart

00:12:33,710 --> 00:12:36,560
of the cloud driver

00:12:34,970 --> 00:12:38,180
it will only restart cloud drive and not

00:12:36,560 --> 00:12:43,970
necessarily the whole infrastructure

00:12:38,180 --> 00:12:45,410
okay now something's been added I don't

00:12:43,970 --> 00:12:46,700
know if you were there at the keynote

00:12:45,410 --> 00:12:50,060
yesterday evening it was talked about

00:12:46,700 --> 00:12:52,220
these dynamic accounts are being added

00:12:50,060 --> 00:12:56,570
it's there for kubernetes and Cloud

00:12:52,220 --> 00:12:59,360
Foundry where you know you don't need to

00:12:56,570 --> 00:13:01,910
really do an hal config and then he'll

00:12:59,360 --> 00:13:03,830
deploy apply but what would happen is

00:13:01,910 --> 00:13:05,840
that if you make if you can store your

00:13:03,830 --> 00:13:08,330
credentials and all these informations

00:13:05,840 --> 00:13:10,310
in either github or vault and as you

00:13:08,330 --> 00:13:13,310
change them they're automatically picked

00:13:10,310 --> 00:13:15,680
up by the system right very useful where

00:13:13,310 --> 00:13:17,390
you have changing credentials now it's

00:13:15,680 --> 00:13:20,540
not fully supported across all the

00:13:17,390 --> 00:13:22,070
providers but it will be especially I

00:13:20,540 --> 00:13:24,680
think people where they have your

00:13:22,070 --> 00:13:26,600
credentials rotating very quickly or not

00:13:24,680 --> 00:13:28,760
quickly every month you have to rotate

00:13:26,600 --> 00:13:34,460
your credentials it helps in the

00:13:28,760 --> 00:13:38,510
cases where you push them up let's look

00:13:34,460 --> 00:13:42,170
at the different providers or different

00:13:38,510 --> 00:13:44,690
things that are there storage providers

00:13:42,170 --> 00:13:49,520
what's supported it's supposed Google

00:13:44,690 --> 00:13:54,530
all the cloud storages Google cloud AWS

00:13:49,520 --> 00:13:55,850
s3 Azure storage also its supports is

00:13:54,530 --> 00:13:57,620
like hey I don't want to do it I want to

00:13:55,850 --> 00:13:59,990
try it in fact the one that I'm setting

00:13:57,620 --> 00:14:04,670
up right now is actually going to use a

00:13:59,990 --> 00:14:08,060
Minear setup to configure it it does use

00:14:04,670 --> 00:14:10,130
Redis Redis is used for caching like Ice

00:14:08,060 --> 00:14:12,380
talked about a cloud drivers goes and

00:14:10,130 --> 00:14:14,720
gets configuration information and it

00:14:12,380 --> 00:14:18,890
caches them it uses reddish Redis -

00:14:14,720 --> 00:14:21,530
Kashyap it's been seen specially when

00:14:18,890 --> 00:14:25,190
you have large amounts of accounts and

00:14:21,530 --> 00:14:28,430
all that when you grow performance of

00:14:25,190 --> 00:14:31,580
see any of the storage or mini or Redis

00:14:28,430 --> 00:14:34,400
can can affect the performance of your

00:14:31,580 --> 00:14:38,450
cluster it may take longer and it has

00:14:34,400 --> 00:14:40,610
seen that my sequel would or basically a

00:14:38,450 --> 00:14:42,380
sequel provider would give you better

00:14:40,610 --> 00:14:43,940
performance so there are integrations

00:14:42,380 --> 00:14:52,960
available for different components to

00:14:43,940 --> 00:14:52,960
use on my sequel 100 plus accounts

00:14:56,040 --> 00:15:03,270
and how do you configure it you can

00:15:01,290 --> 00:15:05,910
always configure later like if you have

00:15:03,270 --> 00:15:08,970
set it up with say like menu and I want

00:15:05,910 --> 00:15:11,820
to change it to AWS s3 I could always

00:15:08,970 --> 00:15:13,380
make that change later but like you know

00:15:11,820 --> 00:15:15,780
I will show to you that you can also

00:15:13,380 --> 00:15:19,200
configure it when you're bringing up

00:15:15,780 --> 00:15:21,300
spinnaker like the mini configuration

00:15:19,200 --> 00:15:25,020
that is there is pretty much like this

00:15:21,300 --> 00:15:27,150
there is a mini running on our IP and

00:15:25,020 --> 00:15:29,970
then I give it an access key and a

00:15:27,150 --> 00:15:32,150
secret key and I access key and then you

00:15:29,970 --> 00:15:37,170
know it will connect to the menu and

00:15:32,150 --> 00:15:38,970
work now if you are moving from say

00:15:37,170 --> 00:15:41,940
Minear to s3 something to keep in mind

00:15:38,970 --> 00:15:45,420
is that it will not migrate the data

00:15:41,940 --> 00:15:48,390
over so before you do that you make sure

00:15:45,420 --> 00:15:50,160
you backup your existing data and then

00:15:48,390 --> 00:15:52,860
you change it and then you basically

00:15:50,160 --> 00:15:54,990
restore your data back so it provides

00:15:52,860 --> 00:15:57,120
capabilities for backup and restore

00:15:54,990 --> 00:15:59,040
that's that way you can move in and in

00:15:57,120 --> 00:16:01,440
fact that backup restore is a good way

00:15:59,040 --> 00:16:02,640
to backup your configuration right if

00:16:01,440 --> 00:16:04,980
you're running it in production you

00:16:02,640 --> 00:16:06,510
don't want to lose your data and all

00:16:04,980 --> 00:16:13,800
that you want to keep backing them up so

00:16:06,510 --> 00:16:18,810
you could do that moving on to the cloud

00:16:13,800 --> 00:16:27,600
providers the major ones are the Google

00:16:18,810 --> 00:16:30,780
cloud as your IKS AWS with its ec2 as

00:16:27,600 --> 00:16:34,820
well as the eat container zcs obviously

00:16:30,780 --> 00:16:37,620
cuba netis is a big part of this

00:16:34,820 --> 00:16:40,740
spinnaker and it also supports things

00:16:37,620 --> 00:16:42,900
like Cloud Foundry Oracle how you

00:16:40,740 --> 00:16:45,330
configure them there are these bunch of

00:16:42,900 --> 00:16:48,030
Hal config provider commands you can add

00:16:45,330 --> 00:16:49,320
new accounts there I'm not given all the

00:16:48,030 --> 00:16:50,880
commands there but you know just a

00:16:49,320 --> 00:16:53,510
reference that you can you go ahead and

00:16:50,880 --> 00:16:58,680
use Hal config type commands to

00:16:53,510 --> 00:17:01,680
configure these providers what are the

00:16:58,680 --> 00:17:04,560
CI is supported things like jenkins

00:17:01,680 --> 00:17:08,490
Travis CI Google Cloud Bell conkers

00:17:04,560 --> 00:17:10,189
wrecker and use Hal config CI to

00:17:08,490 --> 00:17:16,909
configure these

00:17:10,189 --> 00:17:19,980
okay the other important aspect of

00:17:16,909 --> 00:17:21,779
spinnaker is artifacts right what you're

00:17:19,980 --> 00:17:23,279
doing you're deploying our artifacts

00:17:21,779 --> 00:17:25,649
really you're building an image you're

00:17:23,279 --> 00:17:26,970
deploying that you have a darker you're

00:17:25,649 --> 00:17:29,759
building a docker image you're deploying

00:17:26,970 --> 00:17:31,980
that and you want to define that in

00:17:29,759 --> 00:17:33,659
there so that you can reference them or

00:17:31,980 --> 00:17:42,210
making sure if they are not there you

00:17:33,659 --> 00:17:44,460
fail so so anything any any external any

00:17:42,210 --> 00:17:46,980
external resource that that you

00:17:44,460 --> 00:17:50,340
reference is basically an artifact and

00:17:46,980 --> 00:17:53,789
spinnaker its identified by a type like

00:17:50,340 --> 00:17:56,940
a dock or a bench GCS object s3 object

00:17:53,789 --> 00:17:58,470
or a git repo or a Cuban artists object

00:17:56,940 --> 00:18:03,000
or those are the different types that

00:17:58,470 --> 00:18:06,240
are built in you reference them when you

00:18:03,000 --> 00:18:08,429
are I to identify that object and you

00:18:06,240 --> 00:18:11,940
also provide an account to access that

00:18:08,429 --> 00:18:14,399
object right and optionally you can give

00:18:11,940 --> 00:18:16,799
it a name version metadata location

00:18:14,399 --> 00:18:19,019
provenance what's the source of that

00:18:16,799 --> 00:18:21,990
object right you can use that as that I

00:18:19,019 --> 00:18:25,500
will use it coming from this build so

00:18:21,990 --> 00:18:31,110
you can use that source to identify

00:18:25,500 --> 00:18:33,269
where that artifact is coming from it's

00:18:31,110 --> 00:18:34,679
used in a lot of places like you know

00:18:33,269 --> 00:18:37,169
when you are building a pipeline you can

00:18:34,679 --> 00:18:41,250
say expected artifacts and you can

00:18:37,169 --> 00:18:43,230
define what artifact you basically

00:18:41,250 --> 00:18:46,049
define the artifact that it's looking

00:18:43,230 --> 00:18:48,269
for or if you are running a job like a

00:18:46,049 --> 00:18:51,059
Jenkins job and it's producing an

00:18:48,269 --> 00:18:53,730
artifact you define that artifact over

00:18:51,059 --> 00:18:57,679
there so that downstream processor

00:18:53,730 --> 00:19:00,090
stages can find and use those artifacts

00:18:57,679 --> 00:19:01,440
one thing to keep in mind here

00:19:00,090 --> 00:19:04,259
especially when you are defining

00:19:01,440 --> 00:19:08,940
expected artifacts the two ways to run a

00:19:04,259 --> 00:19:11,909
pipeline one is you know it's triggered

00:19:08,940 --> 00:19:15,539
from some external resource or you run

00:19:11,909 --> 00:19:18,120
them manually if you plan to trigger

00:19:15,539 --> 00:19:22,260
them manually it's always a good idea to

00:19:18,120 --> 00:19:23,100
define a default artifact okay it

00:19:22,260 --> 00:19:25,110
basically

00:19:23,100 --> 00:19:26,880
we'll look for that default artifact

00:19:25,110 --> 00:19:29,820
because when you manually trigger it

00:19:26,880 --> 00:19:33,150
there is no expected artifact being fed

00:19:29,820 --> 00:19:39,020
to it so make sure if you plan to run it

00:19:33,150 --> 00:19:40,980
manually define this default artifact

00:19:39,020 --> 00:19:42,390
what are the different artifact

00:19:40,980 --> 00:19:44,760
providers lots of them

00:19:42,390 --> 00:19:47,850
it can come from github bitbucket it

00:19:44,760 --> 00:19:50,880
could be a home chart agate lab it can

00:19:47,850 --> 00:19:53,880
come from maven darker Google cloud it

00:19:50,880 --> 00:19:57,320
could be an HTTP resource it could be an

00:19:53,880 --> 00:19:59,669
s3 resource so lots of providers

00:19:57,320 --> 00:20:01,830
available for artifacts and how you

00:19:59,669 --> 00:20:11,059
configure them using the Hal config

00:20:01,830 --> 00:20:11,059
artifact command any questions okay

00:20:21,680 --> 00:20:28,020
sure I will walk through my home values

00:20:25,980 --> 00:20:29,970
dirty I'm aware I do configure something

00:20:28,020 --> 00:20:34,020
so that will give you an example of how

00:20:29,970 --> 00:20:43,020
it's done let's go back and look at how

00:20:34,020 --> 00:20:45,180
our how our deployment is doing so the

00:20:43,020 --> 00:20:48,750
it's basically this finished it's

00:20:45,180 --> 00:20:51,060
telling me some things that hey I need

00:20:48,750 --> 00:20:53,250
to create some it deployed basically

00:20:51,060 --> 00:20:57,360
completed I need to create some port

00:20:53,250 --> 00:20:59,540
forwards to access the URL which is very

00:20:57,360 --> 00:21:02,490
nice if it's running on a local machine

00:20:59,540 --> 00:21:03,300
and then I can access it using the

00:21:02,490 --> 00:21:06,030
localhost

00:21:03,300 --> 00:21:07,560
but if you want to set it up like in GK

00:21:06,030 --> 00:21:09,810
and you can see I'm using the Google

00:21:07,560 --> 00:21:11,460
Cloud shell over there to access a this

00:21:09,810 --> 00:21:14,010
port forward is not going to work for me

00:21:11,460 --> 00:21:15,750
right or also if I set it up and I want

00:21:14,010 --> 00:21:17,820
to make it available for others I want

00:21:15,750 --> 00:21:19,670
to make some sort of a service available

00:21:17,820 --> 00:21:23,640
so what I'm going to do here is just

00:21:19,670 --> 00:21:27,170
create a queue Boneta service to expose

00:21:23,640 --> 00:21:31,860
this 9,000 port so that I can get to it

00:21:27,170 --> 00:21:39,090
cube CTO expose let me see what that

00:21:31,860 --> 00:21:42,330
porn is so you can see you know a bunch

00:21:39,090 --> 00:21:45,360
of this if you can remember the

00:21:42,330 --> 00:21:47,730
architecture diagram I showed the deck

00:21:45,360 --> 00:21:52,550
echo Gaiety Gore all these are all

00:21:47,730 --> 00:21:56,450
running which one should I expose you

00:21:52,550 --> 00:21:59,220
can remember which one exposes the UI

00:21:56,450 --> 00:22:01,250
deck exactly so you guys are paying

00:21:59,220 --> 00:22:09,120
attention are we gonna Saturday morning

00:22:01,250 --> 00:22:18,180
that was a quiz cube CTO exposed pod

00:22:09,120 --> 00:22:22,380
let me get my game deck part the port

00:22:18,180 --> 00:22:27,170
I'm going to expose is 9000 I'm going to

00:22:22,380 --> 00:22:27,170
make it a load balancer

00:22:30,780 --> 00:22:39,700
and I'll give the pawn name okay it's

00:22:36,190 --> 00:22:43,150
coming up let's monitor that as soon as

00:22:39,700 --> 00:23:00,700
we get a I P address we can start using

00:22:43,150 --> 00:23:03,430
it so see okay service okay it's still

00:23:00,700 --> 00:23:06,880
pending an IP address so like I promised

00:23:03,430 --> 00:23:09,720
earlier we'll look at the values dotty

00:23:06,880 --> 00:23:09,720
amel I used

00:23:19,580 --> 00:23:24,140
while we wait for the editor to come up

00:23:28,850 --> 00:23:33,290
this doesn't take this long to come up

00:23:40,430 --> 00:23:56,870
I'll probably just go ahead and show you

00:23:43,010 --> 00:24:04,250
now using regular VI not very visible is

00:23:56,870 --> 00:24:06,610
that why are you taking this long to

00:24:04,250 --> 00:24:06,610
come up

00:24:12,250 --> 00:24:20,710
data you know in the cloud if it doesn't

00:24:16,240 --> 00:24:23,440
work first time you retry it works this

00:24:20,710 --> 00:24:25,330
one of my bosses told me is that when

00:24:23,440 --> 00:24:27,250
you are building something in the cloud

00:24:25,330 --> 00:24:30,010
always plan for errors errors will

00:24:27,250 --> 00:24:30,760
happen you cannot expect a perfect

00:24:30,010 --> 00:24:34,419
situation

00:24:30,760 --> 00:24:36,669
so always code for errors so this is a

00:24:34,419 --> 00:24:38,440
values 30ml file we are looking at what

00:24:36,669 --> 00:24:42,250
you can control there is the version of

00:24:38,440 --> 00:24:45,970
spinnaker you want to install you can

00:24:42,250 --> 00:24:49,840
control the halyard tag halyard image

00:24:45,970 --> 00:24:52,480
that you want to use to set it up you

00:24:49,840 --> 00:24:55,539
can have additional scripts like the

00:24:52,480 --> 00:24:58,179
question you are asking how can I in my

00:24:55,539 --> 00:25:00,460
home chart configure different things

00:24:58,179 --> 00:25:02,380
that I want to do it this is basically

00:25:00,460 --> 00:25:02,830
you can put your all your configs in

00:25:02,380 --> 00:25:05,169
here

00:25:02,830 --> 00:25:10,690
here I have a command that's creating a

00:25:05,169 --> 00:25:14,110
kubernetes account in the halyard so

00:25:10,690 --> 00:25:16,539
this is the Hal command config provider

00:25:14,110 --> 00:25:19,240
remember we had that how you configure

00:25:16,539 --> 00:25:23,110
provider's config provider the type

00:25:19,240 --> 00:25:26,380
Kuban it is it's an account and I'm

00:25:23,110 --> 00:25:30,100
giving it a name what are the darker

00:25:26,380 --> 00:25:32,919
registries it has giving it a context

00:25:30,100 --> 00:25:36,220
I'm telling it's a service account so

00:25:32,919 --> 00:25:38,169
this is what the Kuban it is based Helen

00:25:36,220 --> 00:25:40,840
does is that you can either provide it a

00:25:38,169 --> 00:25:44,890
cue config file if you have available or

00:25:40,840 --> 00:25:47,110
you know halyard is already running in a

00:25:44,890 --> 00:25:49,539
Cuban ettus and if you want to use that

00:25:47,110 --> 00:25:51,520
Cuban it is you basically say use the

00:25:49,539 --> 00:25:53,530
service account that the halyard is

00:25:51,520 --> 00:25:55,600
using and so it will configure that

00:25:53,530 --> 00:25:57,960
account to use that service account so

00:25:55,600 --> 00:25:59,919
you can deploy to that same kubernetes

00:25:57,960 --> 00:26:02,919
otherwise you have to give it a cube

00:25:59,919 --> 00:26:05,340
config file to talk to the cuban Etta's

00:26:02,919 --> 00:26:05,340
instance

00:26:13,840 --> 00:26:17,750
typically you would special in

00:26:15,830 --> 00:26:19,820
production you would have your stage

00:26:17,750 --> 00:26:21,380
Cuban it is different production Cuban

00:26:19,820 --> 00:26:23,480
it is different and you will have

00:26:21,380 --> 00:26:27,710
spinnaker running in another kubernetes

00:26:23,480 --> 00:26:29,720
which is different there are customers

00:26:27,710 --> 00:26:31,610
we have seen they have even an air gap

00:26:29,720 --> 00:26:33,320
so they basically have to Spinnaker's

00:26:31,610 --> 00:26:35,450
one for stage one for production they

00:26:33,320 --> 00:26:37,550
don't even want the same spinnaker to

00:26:35,450 --> 00:26:39,610
talk to both stage and production so it

00:26:37,550 --> 00:26:41,930
again depends on your organization's

00:26:39,610 --> 00:26:47,930
needs and capabilities are not

00:26:41,930 --> 00:26:49,190
capability organization needs yes there

00:26:47,930 --> 00:26:51,260
you have to use the cube config

00:26:49,190 --> 00:26:54,220
technique yeah it's only when you want

00:26:51,260 --> 00:26:56,840
to deploy it to the same cuban Attis

00:26:54,220 --> 00:27:01,970
instance where spinnaker is running you

00:26:56,840 --> 00:27:05,000
can use the service accounting and then

00:27:01,970 --> 00:27:08,150
I'm also telling it it's restrict this

00:27:05,000 --> 00:27:10,640
to a namespace you can omit namespaces

00:27:08,150 --> 00:27:12,920
are restricted to given namespaces and I

00:27:10,640 --> 00:27:15,140
am saying is that remember when I was

00:27:12,920 --> 00:27:17,690
talking about cloud providers that it

00:27:15,140 --> 00:27:20,360
will go look at and discover resources

00:27:17,690 --> 00:27:22,670
running within that it will discover

00:27:20,360 --> 00:27:25,100
everything unless you tell it to only

00:27:22,670 --> 00:27:27,580
discover spinnaker managed items it puts

00:27:25,100 --> 00:27:30,230
in labels in in those resources that

00:27:27,580 --> 00:27:33,680
spinnaker deploys so then it will only

00:27:30,230 --> 00:27:35,810
pull in those resources so you will not

00:27:33,680 --> 00:27:37,880
see anything that's deployed in that

00:27:35,810 --> 00:27:39,860
cuban it is by others it will only see

00:27:37,880 --> 00:27:45,080
things that's deployed by cuba net is

00:27:39,860 --> 00:27:47,720
our spinnaker only now a good way to see

00:27:45,080 --> 00:27:50,360
what all options are available is always

00:27:47,720 --> 00:27:52,070
you can go till any level and say - -

00:27:50,360 --> 00:27:53,570
help it will give you all the options so

00:27:52,070 --> 00:27:56,750
these commands are pretty nice so you

00:27:53,570 --> 00:27:59,450
can always say how config provider

00:27:56,750 --> 00:28:00,860
kubernetes - - help it will tell you all

00:27:59,450 --> 00:28:04,120
the options that are available at that

00:28:00,860 --> 00:28:04,120
time yes

00:28:10,390 --> 00:28:15,880
[Music]

00:28:11,680 --> 00:28:15,880
not really haven't heard about that

00:28:18,970 --> 00:28:24,620
there is a spinnaker operator which is

00:28:21,770 --> 00:28:27,260
not what he's saying is basically saying

00:28:24,620 --> 00:28:30,080
manage spinnaker resources that

00:28:27,260 --> 00:28:32,300
spinnaker operator basically it manages

00:28:30,080 --> 00:28:34,250
spinnaker as a whole and it will bring

00:28:32,300 --> 00:28:36,590
up and down spinnaker but basically

00:28:34,250 --> 00:28:46,280
manage the spinnaker not objects within

00:28:36,590 --> 00:28:51,050
spinnaker sure sure again we can talk

00:28:46,280 --> 00:28:53,930
later on but again spinnaker is a multi

00:28:51,050 --> 00:28:56,750
cloud provider or as supports multiple

00:28:53,930 --> 00:28:58,970
clouds so lot of the patterns you will

00:28:56,750 --> 00:29:01,490
see there are sort of generalized to

00:28:58,970 --> 00:29:08,120
make sure it works across multiple cloud

00:29:01,490 --> 00:29:10,100
providers so when you configure there

00:29:08,120 --> 00:29:12,560
are different configurations that you

00:29:10,100 --> 00:29:19,550
can do logging into the hell machines

00:29:12,560 --> 00:29:22,070
those you can provide here like here are

00:29:19,550 --> 00:29:26,360
basically updating the health check

00:29:22,070 --> 00:29:28,730
endpoint for the gate component right I

00:29:26,360 --> 00:29:31,640
can I can do that here otherwise what I

00:29:28,730 --> 00:29:35,780
would have to do is log into the halyard

00:29:31,640 --> 00:29:40,100
pod put this file in the location is

00:29:35,780 --> 00:29:43,670
supposed to be dot Hal config defaults

00:29:40,100 --> 00:29:46,580
service directory and then Hal deploy

00:29:43,670 --> 00:29:48,080
but by putting it here Henchard will

00:29:46,580 --> 00:29:53,660
make sure it puts it in there

00:29:48,080 --> 00:29:56,240
and it will restart the pod you can

00:29:53,660 --> 00:30:00,800
control the memory of the halyard pod

00:29:56,240 --> 00:30:02,960
here and you can also control the memory

00:30:00,800 --> 00:30:07,090
and CP of each of the components over

00:30:02,960 --> 00:30:09,230
there that's actually part of spinnaker

00:30:07,090 --> 00:30:12,740
configuration which you would put in as

00:30:09,230 --> 00:30:15,410
part of these data not the which you

00:30:12,740 --> 00:30:16,700
will put in part of this additional

00:30:15,410 --> 00:30:19,180
service settings that's where you will

00:30:16,700 --> 00:30:19,180
put it in

00:30:21,340 --> 00:30:25,820
here you can define all the darker

00:30:23,720 --> 00:30:29,120
registries these are a set of accounts

00:30:25,820 --> 00:30:32,240
that you can create up front through the

00:30:29,120 --> 00:30:35,840
values that the amyl file this is the

00:30:32,240 --> 00:30:38,030
default queue configured puts in if you

00:30:35,840 --> 00:30:40,400
don't want to use this spinnaker as the

00:30:38,030 --> 00:30:42,530
default account you could always have

00:30:40,400 --> 00:30:44,420
your queue config and point to that cube

00:30:42,530 --> 00:30:46,130
config and it will do it so by default

00:30:44,420 --> 00:30:47,690
if you don't update this it will use

00:30:46,130 --> 00:30:50,510
that local spinnaker in which you have

00:30:47,690 --> 00:30:52,790
deployed local Cuban letters in which

00:30:50,510 --> 00:30:57,320
you have deployed spinnaker and then set

00:30:52,790 --> 00:31:02,810
it up you can also enable ingress for

00:30:57,320 --> 00:31:05,900
gate you can enable some features in

00:31:02,810 --> 00:31:07,610
spinnaker by default these features are

00:31:05,900 --> 00:31:10,510
not enabled pipeline templates is

00:31:07,610 --> 00:31:14,150
actually a very important feature

00:31:10,510 --> 00:31:16,460
specially for enterprises or you want to

00:31:14,150 --> 00:31:18,800
roll it out to an organization this is

00:31:16,460 --> 00:31:20,360
sort of creating templates that any of

00:31:18,800 --> 00:31:21,950
your developers can take and start

00:31:20,360 --> 00:31:23,960
creating pipelines rather than everyone

00:31:21,950 --> 00:31:27,200
trying to build their own pipelines you

00:31:23,960 --> 00:31:31,730
can help them move bootstrap and and

00:31:27,200 --> 00:31:35,450
start creating their pipelines and then

00:31:31,730 --> 00:31:40,130
finally out of the box you can configure

00:31:35,450 --> 00:31:43,120
to an external Redis or an external menu

00:31:40,130 --> 00:31:48,050
or a gcas s3 you provide all those

00:31:43,120 --> 00:31:50,180
information right here there was someone

00:31:48,050 --> 00:31:52,100
I was talking with earlier saying hey

00:31:50,180 --> 00:31:54,110
I'm putting in all the secrets in here I

00:31:52,100 --> 00:31:56,780
don't like that yes if you don't like

00:31:54,110 --> 00:31:59,480
that you basically put them in vault and

00:31:56,780 --> 00:32:03,620
make them access halyard access that you

00:31:59,480 --> 00:32:06,050
don't need to put them in here so that's

00:32:03,620 --> 00:32:09,620
sort of covering the values dot llamo

00:32:06,050 --> 00:32:11,870
file looks like our load balancers are

00:32:09,620 --> 00:32:14,620
load balances up we have an IP address

00:32:11,870 --> 00:32:14,620
or let's login

00:32:19,780 --> 00:32:23,770
so there is our spinnaker right you

00:32:22,480 --> 00:32:25,570
notice one of the things that had

00:32:23,770 --> 00:32:27,520
enabled was pipeline templates if I

00:32:25,570 --> 00:32:28,900
hadn't done that this tab will not be

00:32:27,520 --> 00:32:33,909
available here so that's what how I

00:32:28,900 --> 00:32:37,419
enable that pipeline feature how many of

00:32:33,909 --> 00:32:41,140
you have seen this UI before that's

00:32:37,419 --> 00:32:43,539
quite a few my goal was not to walk

00:32:41,140 --> 00:32:47,650
through this whole UI and explain it to

00:32:43,539 --> 00:32:50,070
them explain all the features but what I

00:32:47,650 --> 00:32:53,980
am going to do is create a application

00:32:50,070 --> 00:32:57,850
create a pipeline and deploy an NG annex

00:32:53,980 --> 00:33:00,539
in there okay so to start off I'll

00:32:57,850 --> 00:33:02,890
create an pipeline application here

00:33:00,539 --> 00:33:05,950
which I don't have any so I'm going to

00:33:02,890 --> 00:33:08,470
create any one I give it a name I have

00:33:05,950 --> 00:33:17,830
to give an owner's email address I will

00:33:08,470 --> 00:33:19,780
get something if I know what repo I'm

00:33:17,830 --> 00:33:21,490
using I can select all that but not

00:33:19,780 --> 00:33:23,890
necessary I'm not going to really pull

00:33:21,490 --> 00:33:27,510
down from any repo or anything so I'm

00:33:23,890 --> 00:33:27,510
just going to create an application

00:33:34,290 --> 00:33:39,340
so once an application is there you know

00:33:37,360 --> 00:33:41,200
all the servers in this application

00:33:39,340 --> 00:33:43,270
would show up here load balancers and

00:33:41,200 --> 00:33:44,950
all that right now there is nothing it's

00:33:43,270 --> 00:33:47,080
a brand-new application that I created

00:33:44,950 --> 00:33:50,590
so I'm going to pipe lines and create a

00:33:47,080 --> 00:33:57,390
new pipeline I'll give it a name my

00:33:50,590 --> 00:33:59,560
pipeline so when you create a pipeline

00:33:57,390 --> 00:34:01,330
what you can do is basically at

00:33:59,560 --> 00:34:04,990
different stages is basically a building

00:34:01,330 --> 00:34:08,080
a workflow and there are other options

00:34:04,990 --> 00:34:10,090
that you can also set here when I was

00:34:08,080 --> 00:34:12,610
talking about artifacts you remember I

00:34:10,090 --> 00:34:16,150
talked show the screen with expected

00:34:12,610 --> 00:34:19,600
artifacts so if you are if you want it

00:34:16,150 --> 00:34:22,000
to use some artifacts in some external

00:34:19,600 --> 00:34:23,890
resource you can configure them here

00:34:22,000 --> 00:34:26,170
like say you have something in a docker

00:34:23,890 --> 00:34:29,800
registry that you want to afford it to

00:34:26,170 --> 00:34:31,810
use you can configure them here I'm not

00:34:29,800 --> 00:34:33,520
going to add anything here just walking

00:34:31,810 --> 00:34:36,640
through it you can have automatic

00:34:33,520 --> 00:34:39,580
triggers like if something changes in a

00:34:36,640 --> 00:34:41,920
github I want this pipeline to run or if

00:34:39,580 --> 00:34:44,110
something changes in an artifact tree I

00:34:41,920 --> 00:34:46,000
want this pipeline to run they even have

00:34:44,110 --> 00:34:49,420
a cron job you can have it run every

00:34:46,000 --> 00:34:51,880
hour or something like that so so you

00:34:49,420 --> 00:34:57,040
can have automated triggers to trigger

00:34:51,880 --> 00:34:58,870
your pipeline you can even have

00:34:57,040 --> 00:35:01,570
parameters like you build a custom

00:34:58,870 --> 00:35:03,790
custom not a custom you build a pipeline

00:35:01,570 --> 00:35:05,650
that you want multiple of your

00:35:03,790 --> 00:35:07,900
developers to use a good thing is each

00:35:05,650 --> 00:35:09,760
developer has their own namespace so you

00:35:07,900 --> 00:35:12,220
can make your namespace a parameter so

00:35:09,760 --> 00:35:15,790
that if developer a starts this pipeline

00:35:12,220 --> 00:35:17,710
they provide their namespace and so that

00:35:15,790 --> 00:35:19,990
whatever they're deploying is going to

00:35:17,710 --> 00:35:21,640
their namespace so you can have all

00:35:19,990 --> 00:35:24,130
sorts of parameter if you want to build

00:35:21,640 --> 00:35:26,470
a particular version or a particular

00:35:24,130 --> 00:35:31,120
branch you can you can provide all those

00:35:26,470 --> 00:35:33,580
as parameters with that what I say this

00:35:31,120 --> 00:35:36,550
I wanted to deploy a Cuban ettus ng

00:35:33,580 --> 00:35:38,470
annex server right so so I'm going to

00:35:36,550 --> 00:35:41,950
add a new stage there different types of

00:35:38,470 --> 00:35:44,820
stages available I can bake a manifest

00:35:41,950 --> 00:35:47,559
file basically it takes a helm file and

00:35:44,820 --> 00:35:50,709
gets it ready to be rendered I

00:35:47,559 --> 00:35:52,299
can delete a manifest I can disable it

00:35:50,709 --> 00:35:57,160
but what I'm going to do right now is

00:35:52,299 --> 00:35:59,680
deploy a manifest here I can I get to

00:35:57,160 --> 00:36:04,029
select what account AG I'm going to use

00:35:59,680 --> 00:36:04,900
to deploy this manifest when I shoot the

00:36:04,029 --> 00:36:06,400
values dot llamo

00:36:04,900 --> 00:36:07,839
I showed this account that I had created

00:36:06,400 --> 00:36:09,339
that's what I'm going to select if

00:36:07,839 --> 00:36:10,900
they're multiple accounts all those

00:36:09,339 --> 00:36:16,089
would show up here I can choose what to

00:36:10,900 --> 00:36:18,869
use this is a good thing if you don't

00:36:16,089 --> 00:36:22,269
have any namespace defined in your

00:36:18,869 --> 00:36:24,609
manifest file it's good to provide an

00:36:22,269 --> 00:36:26,229
override namespace so that you don't

00:36:24,609 --> 00:36:28,769
have developers going ahead and

00:36:26,229 --> 00:36:32,049
deploying a manifest to any end

00:36:28,769 --> 00:36:34,329
namespace you want to control where it

00:36:32,049 --> 00:36:36,519
gets deployed right so if this is a

00:36:34,329 --> 00:36:38,739
pipeline that deploys to stage you want

00:36:36,519 --> 00:36:41,319
to control where stages it's better to

00:36:38,739 --> 00:36:43,390
provide this override namespace so that

00:36:41,319 --> 00:36:46,289
some developer doesn't goes and deploys

00:36:43,390 --> 00:36:49,509
it to a production namespace right I

00:36:46,289 --> 00:36:51,939
always do that and what I'm going to do

00:36:49,509 --> 00:36:57,579
is I'm going to paste the manifest right

00:36:51,939 --> 00:37:01,390
here I have a sample ng annex file that

00:36:57,579 --> 00:37:03,489
creates a deployment and a service I'll

00:37:01,390 --> 00:37:07,119
copy this in here and now I'm going to

00:37:03,489 --> 00:37:09,400
paste it in here few other things I'd

00:37:07,119 --> 00:37:11,309
like to point out is that we're not

00:37:09,400 --> 00:37:17,140
going to do but you can have different

00:37:11,309 --> 00:37:20,229
deployment strategies like red green red

00:37:17,140 --> 00:37:22,029
black Highlander and all that to control

00:37:20,229 --> 00:37:23,469
how the traffic goes specially in

00:37:22,029 --> 00:37:25,660
production environments you want to do

00:37:23,469 --> 00:37:27,759
that but you're not going to do that but

00:37:25,660 --> 00:37:31,329
just wanted to call out that those are

00:37:27,759 --> 00:37:33,099
available out of the box in spinnaker

00:37:31,329 --> 00:37:35,609
you don't have to code anything for that

00:37:33,099 --> 00:37:35,609
right

00:37:43,100 --> 00:37:48,710
no it doesn't do the check it will fail

00:37:45,500 --> 00:37:54,170
basically when you try to deploy right

00:37:48,710 --> 00:37:56,690
right you can actually have conditional

00:37:54,170 --> 00:38:01,670
expressions to control when the stage

00:37:56,690 --> 00:38:03,770
gets executed and you can even restrict

00:38:01,670 --> 00:38:05,000
it to different time frames when you

00:38:03,770 --> 00:38:06,560
want to execute it like you know

00:38:05,000 --> 00:38:08,720
production replies happens only on

00:38:06,560 --> 00:38:11,930
Saturdays and Sundays 9:00 to 10:00 p.m.

00:38:08,720 --> 00:38:15,560
you can control those things here with

00:38:11,930 --> 00:38:19,790
that I'm going to save this and I'm

00:38:15,560 --> 00:38:22,280
going to run this pipeline this is saved

00:38:19,790 --> 00:38:23,690
oh I didn't enable the trigger I don't

00:38:22,280 --> 00:38:31,610
want to enable the trigger why did I

00:38:23,690 --> 00:38:33,200
enable the trigger I did now so all

00:38:31,610 --> 00:38:35,960
those telling myths anyway I'm going to

00:38:33,200 --> 00:38:37,910
manually execute this one so I say start

00:38:35,960 --> 00:38:42,950
manual execution and I'm going to run

00:38:37,910 --> 00:38:48,650
this okay so it started deploying this

00:38:42,950 --> 00:38:51,290
pipeline while this is deploying and we

00:38:48,650 --> 00:38:53,600
have about five minutes but now it does

00:38:51,290 --> 00:38:56,420
this will take about 10 12 seconds so

00:38:53,600 --> 00:38:59,060
what I can do always is at this point I

00:38:56,420 --> 00:39:00,890
can go and see as it's executing what's

00:38:59,060 --> 00:39:04,340
going on it finished actually within 18

00:39:00,890 --> 00:39:07,190
seconds so each stage would give you

00:39:04,340 --> 00:39:10,100
details of what happened I can see what

00:39:07,190 --> 00:39:12,140
got deployed and what got deployed I can

00:39:10,100 --> 00:39:13,730
even look at the amyl for that and I

00:39:12,140 --> 00:39:15,890
think this is interesting to note here

00:39:13,730 --> 00:39:18,850
is you saw the amyl that I deploy didn't

00:39:15,890 --> 00:39:21,350
have much spinnaker added all these

00:39:18,850 --> 00:39:23,240
annotations and labels in there to track

00:39:21,350 --> 00:39:26,960
it better okay

00:39:23,240 --> 00:39:29,359
this helps it in doing roll backs and

00:39:26,960 --> 00:39:31,130
all that using this it will basically

00:39:29,359 --> 00:39:32,930
like you'd apply the next version and

00:39:31,130 --> 00:39:34,970
doesn't look good and you want to roll

00:39:32,930 --> 00:39:39,800
back it will use this information to

00:39:34,970 --> 00:39:46,730
roll that back remember I was I showed

00:39:39,800 --> 00:39:49,010
that only only cash resources that's

00:39:46,730 --> 00:39:50,660
managed by spinnaker is by virtue of

00:39:49,010 --> 00:39:51,620
this label it puts in there

00:39:50,660 --> 00:39:54,350
that's how it actually

00:39:51,620 --> 00:39:59,090
the controls what's spinnaker managed

00:39:54,350 --> 00:40:02,030
versus not managed so it does add or

00:39:59,090 --> 00:40:05,480
embellish the the manifest files to make

00:40:02,030 --> 00:40:09,380
sure it can manage it better let's go

00:40:05,480 --> 00:40:11,420
look at the actual deployment so you can

00:40:09,380 --> 00:40:14,150
see here is that right now this has a

00:40:11,420 --> 00:40:17,060
deployment in there you can see this

00:40:14,150 --> 00:40:19,580
deployment you can take actions like

00:40:17,060 --> 00:40:23,270
scaling it undo the rollout and all that

00:40:19,580 --> 00:40:26,930
you can edit it delete it you can see

00:40:23,270 --> 00:40:28,910
this is the replica set for that you can

00:40:26,930 --> 00:40:31,820
you can just delete it there's only one

00:40:28,910 --> 00:40:33,500
of them here and you know this is the

00:40:31,820 --> 00:40:35,660
load balancer fronting that service

00:40:33,500 --> 00:40:38,150
right and this is the load balancer IP

00:40:35,660 --> 00:40:41,170
address for that and I click in there I

00:40:38,150 --> 00:40:44,750
have an NG annex running in there right

00:40:41,170 --> 00:40:49,030
I want to scale it to two I can go in

00:40:44,750 --> 00:40:51,380
here I can actually say scale it to two

00:40:49,030 --> 00:40:55,280
it will go through the process of

00:40:51,380 --> 00:41:01,130
scaling it out and and bring up a new

00:40:55,280 --> 00:41:06,110
cluster I have about two minutes what

00:41:01,130 --> 00:41:07,850
I'm going to do is just briefly talk

00:41:06,110 --> 00:41:15,020
through some of the two other slides

00:41:07,850 --> 00:41:20,830
that I had first one is securing

00:41:15,020 --> 00:41:24,530
spinnaker the one that I set up was non

00:41:20,830 --> 00:41:28,120
SSL enabled I was hitting it by HTTP you

00:41:24,530 --> 00:41:32,450
can enable SSL for the front-end

00:41:28,120 --> 00:41:34,400
endpoints gate and deck and that you do

00:41:32,450 --> 00:41:37,490
through this Halcon fix security UI

00:41:34,400 --> 00:41:38,720
commands okay you can enable

00:41:37,490 --> 00:41:41,630
authentication there was no

00:41:38,720 --> 00:41:43,760
authentication in my system you enable

00:41:41,630 --> 00:41:47,000
authentication using Halcon fix security

00:41:43,760 --> 00:41:50,720
authentication supported methods are

00:41:47,000 --> 00:41:54,280
LDAP or Sam ox5 or two certificates by

00:41:50,720 --> 00:41:57,890
the nine certificates you can also have

00:41:54,280 --> 00:42:00,350
authorizations you can have LDAP Active

00:41:57,890 --> 00:42:03,560
Directory Google Groups

00:42:00,350 --> 00:42:04,940
github teams all that and using it you

00:42:03,560 --> 00:42:08,480
can control app

00:42:04,940 --> 00:42:11,030
occasions accounts pipeline executions

00:42:08,480 --> 00:42:16,010
who can execute what all that you can

00:42:11,030 --> 00:42:20,329
control through that getting into

00:42:16,010 --> 00:42:23,119
production considerations we talked

00:42:20,329 --> 00:42:25,579
about a little bit of a persistent

00:42:23,119 --> 00:42:29,030
storage we talked about a little bit

00:42:25,579 --> 00:42:31,790
that you know in places my sequel would

00:42:29,030 --> 00:42:35,270
perform better than just using pure

00:42:31,790 --> 00:42:37,069
Redis using cuban it is you can do a

00:42:35,270 --> 00:42:39,680
horizontal scale out of the different

00:42:37,069 --> 00:42:42,050
services and my recommendation is that

00:42:39,680 --> 00:42:45,109
the default hand chart that we installed

00:42:42,050 --> 00:42:48,650
doesn't have memory and CPU limitation

00:42:45,109 --> 00:42:50,450
or limit set it's not good so if you

00:42:48,650 --> 00:42:52,579
want to do it definitely set memory and

00:42:50,450 --> 00:42:56,300
CPU limits write cuban it is would be

00:42:52,579 --> 00:42:58,760
able to manage it better for you and if

00:42:56,300 --> 00:43:02,089
it's if you're having issues with

00:42:58,760 --> 00:43:05,119
caching you see your cache the front 50

00:43:02,089 --> 00:43:07,040
is using up a lot of memory you can

00:43:05,119 --> 00:43:08,810
control how often cache is refreshed

00:43:07,040 --> 00:43:11,210
when I say cache is refreshed like cloud

00:43:08,810 --> 00:43:13,369
driver would go out and look at what all

00:43:11,210 --> 00:43:15,680
new resources have come up it runs that

00:43:13,369 --> 00:43:18,200
every 30 seconds you could reduce that

00:43:15,680 --> 00:43:20,780
to 1 minute 5 minute depending on your

00:43:18,200 --> 00:43:22,940
needs and that would control how often

00:43:20,780 --> 00:43:25,640
cache is refreshed also there are ways

00:43:22,940 --> 00:43:29,240
to delete all pipelines right otherwise

00:43:25,640 --> 00:43:30,890
it keeps everything in memory so you

00:43:29,240 --> 00:43:33,109
know if you don't need anything or more

00:43:30,890 --> 00:43:35,030
than seven days of pipeline history and

00:43:33,109 --> 00:43:43,280
all that you can clean up your old

00:43:35,030 --> 00:43:45,680
pipelines no yeah so this is really for

00:43:43,280 --> 00:43:51,230
runtime information like things that it

00:43:45,680 --> 00:43:54,200
discovers and all that right what's next

00:43:51,230 --> 00:43:56,990
this was like you know primer type of

00:43:54,200 --> 00:43:59,300
thing 101 type session there is another

00:43:56,990 --> 00:44:04,369
session a part two of this I believe in

00:43:59,300 --> 00:44:08,329
the same room at 11 o'clock where our

00:44:04,369 --> 00:44:10,670
CTO Gopi will cover pipeline templates

00:44:08,329 --> 00:44:12,470
pipeline code spinnaker permissions

00:44:10,670 --> 00:44:14,720
getting into more into the detail of the

00:44:12,470 --> 00:44:18,369
different objects and the hierarchy and

00:44:14,720 --> 00:44:22,160
all that how to do canary and rollback

00:44:18,369 --> 00:44:24,740
automated analysis and performance okay

00:44:22,160 --> 00:44:27,349
so that's he'll do it and before I say

00:44:24,740 --> 00:44:29,660
thank you let's see that we have two of

00:44:27,349 --> 00:44:31,670
these already created in ng annex right

00:44:29,660 --> 00:44:35,390
so with that one click of a button with

00:44:31,670 --> 00:44:38,570
a tap with that thank you for your time

00:44:35,390 --> 00:44:40,190
and I can be reached at near Molly a

00:44:38,570 --> 00:44:42,020
table some extra Rio we have a boot out

00:44:40,190 --> 00:44:43,400
there if you have any questions or

00:44:42,020 --> 00:44:45,840
comments I'll be around

00:44:43,400 --> 00:44:51,269
thank you very much

00:44:45,840 --> 00:44:51,269
[Applause]

00:44:53,970 --> 00:45:00,540
[Laughter]

00:44:58,480 --> 00:45:00,540

YouTube URL: https://www.youtube.com/watch?v=_Ji6JBiIndM


