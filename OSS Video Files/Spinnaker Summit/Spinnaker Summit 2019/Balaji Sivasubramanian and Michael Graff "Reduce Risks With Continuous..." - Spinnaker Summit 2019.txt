Title: Balaji Sivasubramanian and Michael Graff "Reduce Risks With Continuous..." - Spinnaker Summit 2019
Publication date: 2019-12-09
Playlist: Spinnaker Summit 2019
Description: 
	The third annual Spinnaker Summit (Diamond Sponsors: Netflix, Google and Armory) was held at the Hard Rock Hotel in San Diego, CA from November 15-17, 2019 and welcomed over 500 members of the rapidly growing Spinnaker open source community.
Captions: 
	00:00:10,799 --> 00:00:15,869
thank you for coming this session is

00:00:13,110 --> 00:00:17,670
about Kenya certification and basically

00:00:15,869 --> 00:00:19,650
you know now that you are using

00:00:17,670 --> 00:00:21,660
spinnaker and deploying applications

00:00:19,650 --> 00:00:24,000
fast now you want to be able to verify

00:00:21,660 --> 00:00:25,739
the applications as it gets deploy and

00:00:24,000 --> 00:00:27,779
that sort of the topic of this

00:00:25,739 --> 00:00:30,239
particular talk and we're going to show

00:00:27,779 --> 00:00:32,850
you what we have today and then what

00:00:30,239 --> 00:00:35,969
what we are thinking about what you're

00:00:32,850 --> 00:00:38,430
driving the spinnaker community and to

00:00:35,969 --> 00:00:41,670
improve that situation so with that my

00:00:38,430 --> 00:00:44,100
name is Balaji run products a Topsham

00:00:41,670 --> 00:00:50,460
xog here you know we'll talk about our

00:00:44,100 --> 00:00:53,249
company in a second and Michael I'm

00:00:50,460 --> 00:00:55,620
Michael Graf I hey max they call me I've

00:00:53,249 --> 00:00:58,530
see a principal architect I consider

00:00:55,620 --> 00:01:00,780
myself an engineer very much so and I'm

00:00:58,530 --> 00:01:02,159
primarily focused on autopilot but also

00:01:00,780 --> 00:01:04,580
some other things here too but most got

00:01:02,159 --> 00:01:06,540
a pilot yeah so the thing that that's

00:01:04,580 --> 00:01:09,240
interesting thing about Michael is that

00:01:06,540 --> 00:01:10,049
he was at Netflix he was the primary

00:01:09,240 --> 00:01:13,470
author of

00:01:10,049 --> 00:01:16,380
kantha the canary analysis service so he

00:01:13,470 --> 00:01:20,100
joined up some X recently so he brings a

00:01:16,380 --> 00:01:21,810
lot of real-world experience at scale at

00:01:20,100 --> 00:01:25,740
nits like so that's something we thought

00:01:21,810 --> 00:01:27,930
it would be really useful here and so

00:01:25,740 --> 00:01:31,530
very quickly I would have some XIV or 3

00:01:27,930 --> 00:01:33,390
year old company our team comes from

00:01:31,530 --> 00:01:36,720
these backgrounds obviously Netflix and

00:01:33,390 --> 00:01:38,990
AWS I come from Cisco previously but a

00:01:36,720 --> 00:01:41,700
quite a bit of background we are

00:01:38,990 --> 00:01:43,140
contributing to spinnaker some other

00:01:41,700 --> 00:01:45,780
things we contributed is terraform

00:01:43,140 --> 00:01:48,000
operators and you know we have been

00:01:45,780 --> 00:01:51,930
working on other contributions as well

00:01:48,000 --> 00:01:56,220
to enable you know increasing adoption

00:01:51,930 --> 00:01:57,780
of spinnaker in enterprises so again we

00:01:56,220 --> 00:01:59,580
will go through what is verification as

00:01:57,780 --> 00:02:01,170
you define it and then we can talk about

00:01:59,580 --> 00:02:04,230
what you have today and what we're

00:02:01,170 --> 00:02:08,909
driving over the community towards

00:02:04,230 --> 00:02:11,269
better canoe certification so then to

00:02:08,909 --> 00:02:13,860
sort of level set up sort of motivation

00:02:11,269 --> 00:02:16,019
for the verification itself I mean

00:02:13,860 --> 00:02:18,960
essentially not that you are releasing

00:02:16,019 --> 00:02:20,670
things faster what we have seen this is

00:02:18,960 --> 00:02:22,350
a gardener study recently you know that

00:02:20,670 --> 00:02:23,040
couple of years ago but I think it's

00:02:22,350 --> 00:02:25,799
still pretty

00:02:23,040 --> 00:02:28,019
in the sense that this is reported by

00:02:25,799 --> 00:02:31,590
let's say hundreds of and prices who

00:02:28,019 --> 00:02:33,720
claim that hey as I increase their speed

00:02:31,590 --> 00:02:35,879
velocity of deployment of applications

00:02:33,720 --> 00:02:37,260
they are successful deployment as they

00:02:35,879 --> 00:02:39,060
call it successful deployment reduces

00:02:37,260 --> 00:02:41,190
dramatically obviously it says goes to

00:02:39,060 --> 00:02:43,379
zero what I'm assuming now the world is

00:02:41,190 --> 00:02:45,090
better you have better success rate but

00:02:43,379 --> 00:02:47,040
still it should kind of shows you the

00:02:45,090 --> 00:02:48,750
problem off as you increase velocity

00:02:47,040 --> 00:02:50,819
automate everything you still need to

00:02:48,750 --> 00:02:51,569
verify things you know you know in a in

00:02:50,819 --> 00:02:53,549
a correct manner

00:02:51,569 --> 00:02:55,500
obviously the complexity testing piece

00:02:53,549 --> 00:02:57,390
as well you know want to speed the

00:02:55,500 --> 00:02:59,549
complexity of now you're deploying to

00:02:57,390 --> 00:03:01,319
various clouds you have micro service

00:02:59,549 --> 00:03:04,260
architecture and that makes it difficult

00:03:01,319 --> 00:03:06,840
to troubleshoot and cross-check and as

00:03:04,260 --> 00:03:09,060
you look at trying to verify these

00:03:06,840 --> 00:03:11,730
things if you're doing manually your

00:03:09,060 --> 00:03:13,260
your verification cost goes up you can't

00:03:11,730 --> 00:03:14,760
get the real velocity because you're now

00:03:13,260 --> 00:03:16,590
verifying things because you don't want

00:03:14,760 --> 00:03:20,040
to create a violation or production

00:03:16,590 --> 00:03:22,319
failures perfect failures obviously is

00:03:20,040 --> 00:03:23,579
bad for everybody and obviously this is

00:03:22,319 --> 00:03:25,799
one study which says you know about

00:03:23,579 --> 00:03:28,379
$1,000,000 per hour you know if you're a

00:03:25,799 --> 00:03:31,410
large company and you have a bad

00:03:28,379 --> 00:03:35,760
deployment in production and so the

00:03:31,410 --> 00:03:38,250
there your problem what we say here is

00:03:35,760 --> 00:03:40,620
that the manual verification at speed is

00:03:38,250 --> 00:03:43,260
going to be error-prone and slow and

00:03:40,620 --> 00:03:45,120
costly if you look at the overall

00:03:43,260 --> 00:03:47,340
pipeline there's a CI component there's

00:03:45,120 --> 00:03:49,680
a CD component and usually when you

00:03:47,340 --> 00:03:52,019
focus on verification you're probably

00:03:49,680 --> 00:03:53,970
associating to the deployment aspect of

00:03:52,019 --> 00:03:56,519
it now that I deployed I want to be able

00:03:53,970 --> 00:03:59,790
to verify what I deployed I want able to

00:03:56,519 --> 00:04:01,709
make any decisions on it based on the

00:03:59,790 --> 00:04:03,599
evaluation of the application and

00:04:01,709 --> 00:04:05,459
obviously beyond deployment also I need

00:04:03,599 --> 00:04:08,220
to monitor and then you build a rollback

00:04:05,459 --> 00:04:09,629
and the manual verification part of it

00:04:08,220 --> 00:04:11,430
because you have multiple people

00:04:09,629 --> 00:04:14,370
potentially reviewing a pipeline run

00:04:11,430 --> 00:04:16,769
every day if you have multiple saris

00:04:14,370 --> 00:04:18,599
each one is interpreting the the rules

00:04:16,769 --> 00:04:21,599
of what is right and what is wrong

00:04:18,599 --> 00:04:24,030
incorrectly potentially and you could

00:04:21,599 --> 00:04:25,650
potentially - you know the potential

00:04:24,030 --> 00:04:28,800
production failures there's other

00:04:25,650 --> 00:04:31,200
aspects of it in many companies there's

00:04:28,800 --> 00:04:34,320
some sort of an offline manual approvals

00:04:31,200 --> 00:04:35,960
offline a checks of compliance a lot of

00:04:34,320 --> 00:04:37,460
these things are done enough

00:04:35,960 --> 00:04:39,410
fashion it's not even part of a pipeline

00:04:37,460 --> 00:04:41,750
it's like hey I'm going to put up manual

00:04:39,410 --> 00:04:43,190
judgment step and then somebody goes and

00:04:41,750 --> 00:04:45,410
does something and come back and say

00:04:43,190 --> 00:04:47,300
approve right and so what happens during

00:04:45,410 --> 00:04:49,940
that stage nobody knows so these things

00:04:47,300 --> 00:04:53,810
we need to be able to provide visibility

00:04:49,940 --> 00:04:55,940
obviously and be able to automate it in

00:04:53,810 --> 00:04:59,590
an intelligent fashion to be able to get

00:04:55,940 --> 00:05:04,810
the velocity that you really want and

00:04:59,590 --> 00:05:09,530
Wi-Fi seems to be off give me a second

00:05:04,810 --> 00:05:10,039
now it's pretty simple it's just my room

00:05:09,530 --> 00:05:17,060
number

00:05:10,039 --> 00:05:19,330
at what rate okay whatever yes please

00:05:17,060 --> 00:05:19,330
don't

00:05:22,270 --> 00:05:27,680
all right so I think the verification

00:05:25,539 --> 00:05:29,810
point out is that the verification is

00:05:27,680 --> 00:05:31,490
just not at the sort of the production

00:05:29,810 --> 00:05:33,650
rollout stage it may be a canary or a

00:05:31,490 --> 00:05:36,830
Bluegreen kind of stage if you look at

00:05:33,650 --> 00:05:39,020
it verify things at every stage you know

00:05:36,830 --> 00:05:41,720
doing the pipeline from integration test

00:05:39,020 --> 00:05:43,220
to Lord test you can still verify the

00:05:41,720 --> 00:05:44,630
current release to the previous release

00:05:43,220 --> 00:05:45,919
maybe it's not a canary type of

00:05:44,630 --> 00:05:48,229
deployment because you ran the test

00:05:45,919 --> 00:05:49,880
yesterday or or one hour ago two hours

00:05:48,229 --> 00:05:51,320
you know you can still compare because

00:05:49,880 --> 00:05:53,330
essentially if you're going to the same

00:05:51,320 --> 00:05:55,159
task you should be able to tell the new

00:05:53,330 --> 00:05:56,330
version how are the behaviors compared

00:05:55,159 --> 00:05:57,650
to the old version if there's a flag

00:05:56,330 --> 00:05:59,690
right there you stop right there

00:05:57,650 --> 00:06:01,009
you don't actually let it go in on

00:05:59,690 --> 00:06:03,409
staging in production and pre-production

00:06:01,009 --> 00:06:05,120
and production basically you know a lot

00:06:03,409 --> 00:06:08,240
of things we have seen actual real use

00:06:05,120 --> 00:06:10,729
cases where a large sort of a grocery

00:06:08,240 --> 00:06:12,590
company you know they were having load

00:06:10,729 --> 00:06:15,199
test failures that you know they could

00:06:12,590 --> 00:06:16,699
have captain load test stage but it

00:06:15,199 --> 00:06:18,199
happens in production and then they have

00:06:16,699 --> 00:06:20,930
to you know roll back all the way and

00:06:18,199 --> 00:06:23,479
effect users in each phases of

00:06:20,930 --> 00:06:25,039
deployment either you're testing or in

00:06:23,479 --> 00:06:27,110
any one stages you have different things

00:06:25,039 --> 00:06:28,669
you're testing for example obviously in

00:06:27,110 --> 00:06:30,139
the testing or the QA phase you're

00:06:28,669 --> 00:06:32,419
obviously doing they know that you need

00:06:30,139 --> 00:06:34,490
a stress test you're also probably doing

00:06:32,419 --> 00:06:37,130
source code analysis static analysis or

00:06:34,490 --> 00:06:38,930
dynamic analysis and these things has to

00:06:37,130 --> 00:06:41,060
be also be verified we call all of these

00:06:38,930 --> 00:06:43,550
as CV verification at the end of the day

00:06:41,060 --> 00:06:45,150
because if you can automate all of these

00:06:43,550 --> 00:06:49,199
things you really would

00:06:45,150 --> 00:06:51,120
a real automated deployment solution so

00:06:49,199 --> 00:06:53,910
doing staging is what most people do

00:06:51,120 --> 00:06:56,010
canary relays and then sort of a limited

00:06:53,910 --> 00:06:58,260
production exposure of applications and

00:06:56,010 --> 00:07:00,470
in production it's where you say you

00:06:58,260 --> 00:07:03,060
know what it's all good now I'm gonna go

00:07:00,470 --> 00:07:04,710
to you know expose the real customer

00:07:03,060 --> 00:07:06,600
traffic so in this case a canary

00:07:04,710 --> 00:07:09,150
deployment obviously these are obviously

00:07:06,600 --> 00:07:10,710
custom affecting applications you may

00:07:09,150 --> 00:07:12,690
have a staged rollout where you have

00:07:10,710 --> 00:07:14,610
deploying into one region or some

00:07:12,690 --> 00:07:16,380
regions and then eventually lead to more

00:07:14,610 --> 00:07:18,570
regions maybe you're using sto where you

00:07:16,380 --> 00:07:20,130
are doing a rolling up Thai update so

00:07:18,570 --> 00:07:21,660
these are some other things you practice

00:07:20,130 --> 00:07:24,120
and you want to be able to verify during

00:07:21,660 --> 00:07:25,979
each of them before you go to the call

00:07:24,120 --> 00:07:27,270
it a full production done because as

00:07:25,979 --> 00:07:28,889
soon as you verify in this whole

00:07:27,270 --> 00:07:31,350
pipeline the better it is to avoid

00:07:28,889 --> 00:07:32,820
production failures right in obviously

00:07:31,350 --> 00:07:36,139
in post-production usually should not

00:07:32,820 --> 00:07:38,250
done because a lot of cases we have seen

00:07:36,139 --> 00:07:40,910
users come to us and say you know what

00:07:38,250 --> 00:07:43,139
you know typically what happens is the

00:07:40,910 --> 00:07:44,910
deployment is done it's not our problem

00:07:43,139 --> 00:07:46,229
anymore we are done and then the

00:07:44,910 --> 00:07:48,240
production people are sorry people

00:07:46,229 --> 00:07:50,010
manage it it's not my problem but that's

00:07:48,240 --> 00:07:51,750
not necessarily happening the case we

00:07:50,010 --> 00:07:54,630
can still have the ability the knowledge

00:07:51,750 --> 00:07:56,160
of the release and then be able to

00:07:54,630 --> 00:07:58,169
compare to the past releases even in

00:07:56,160 --> 00:07:59,850
production so we have an ability to like

00:07:58,169 --> 00:08:02,250
for example we should have any material

00:07:59,850 --> 00:08:05,430
for example to continuously check the

00:08:02,250 --> 00:08:08,280
production as well and and be able to

00:08:05,430 --> 00:08:10,740
roll back so what is goodness

00:08:08,280 --> 00:08:12,630
verification essentially is addressing

00:08:10,740 --> 00:08:15,060
all these stakeholders and the offers

00:08:12,630 --> 00:08:17,520
has to care about in terms of what

00:08:15,060 --> 00:08:19,500
software they release and where they are

00:08:17,520 --> 00:08:20,520
and if it would stop for whatever reason

00:08:19,500 --> 00:08:23,039
they won't know what it is and to be

00:08:20,520 --> 00:08:25,289
able to diagnose and troubleshoot their

00:08:23,039 --> 00:08:26,820
particular releases operation people are

00:08:25,289 --> 00:08:28,200
obviously worried about you know

00:08:26,820 --> 00:08:30,330
traditional things are pressure to worry

00:08:28,200 --> 00:08:32,909
about is you know can i deploy it you

00:08:30,330 --> 00:08:34,229
know you I have to roll back do it is

00:08:32,909 --> 00:08:35,640
there a policy violation there's a

00:08:34,229 --> 00:08:37,979
compliance violations and things like

00:08:35,640 --> 00:08:40,080
that business use business users are

00:08:37,979 --> 00:08:41,550
obviously worried about their business

00:08:40,080 --> 00:08:44,160
KPI and

00:08:41,550 --> 00:08:46,530
you know make sure that end-users the

00:08:44,160 --> 00:08:47,760
revenue is not affected the compliance

00:08:46,530 --> 00:08:49,500
folks are worried about you know are

00:08:47,760 --> 00:08:51,600
they doing security violation enterprise

00:08:49,500 --> 00:08:54,030
violation or application system

00:08:51,600 --> 00:08:56,370
valuations that's happening throughout

00:08:54,030 --> 00:08:58,350
so ten new certificates should be about

00:08:56,370 --> 00:09:00,900
maintaining SLS we should you have a

00:08:58,350 --> 00:09:03,060
look at logs APM and traits and business

00:09:00,900 --> 00:09:06,270
metrics there should be able to do

00:09:03,060 --> 00:09:07,800
application policies you know be able to

00:09:06,270 --> 00:09:10,170
say this application has these set up

00:09:07,800 --> 00:09:12,690
rules and regulations and any people to

00:09:10,170 --> 00:09:14,130
enforce them as part of our pipeline the

00:09:12,690 --> 00:09:15,540
compliance valuation for example we

00:09:14,130 --> 00:09:17,640
should be able to check you know

00:09:15,540 --> 00:09:19,590
regulations like Sox compliance checks

00:09:17,640 --> 00:09:21,480
and and you know you have a new zone

00:09:19,590 --> 00:09:22,980
issues those issues and there will be

00:09:21,480 --> 00:09:24,450
other enterprise policy like who can

00:09:22,980 --> 00:09:26,640
deploy what they can department they can

00:09:24,450 --> 00:09:29,040
deploy who can approve all those things

00:09:26,640 --> 00:09:31,350
has to be captured in this verification

00:09:29,040 --> 00:09:34,740
method and then security violation and

00:09:31,350 --> 00:09:36,330
in terms of are there any modified

00:09:34,740 --> 00:09:38,340
behavior of the application of a

00:09:36,330 --> 00:09:39,540
software that just got released nobody

00:09:38,340 --> 00:09:41,220
is checking on and there should be

00:09:39,540 --> 00:09:44,730
renovating to automatically verify these

00:09:41,220 --> 00:09:46,380
things as well all this needs to be

00:09:44,730 --> 00:09:48,930
automated obviously that won't really

00:09:46,380 --> 00:09:51,930
help you to really achieve the speed

00:09:48,930 --> 00:09:54,030
rather than manual and I thought way of

00:09:51,930 --> 00:09:55,740
doing things and more importantly at

00:09:54,030 --> 00:09:59,040
least we have some intelligence built

00:09:55,740 --> 00:10:00,990
into it so it's not just pure automation

00:09:59,040 --> 00:10:03,180
for the sake of automation but there's

00:10:00,990 --> 00:10:05,310
some intelligence doing so with that I'm

00:10:03,180 --> 00:10:06,930
gonna transfer over to Michael he's

00:10:05,310 --> 00:10:09,270
gonna walk us through what we can do

00:10:06,930 --> 00:10:12,210
today and also what he's driving within

00:10:09,270 --> 00:10:14,670
the community towards the next next to

00:10:12,210 --> 00:10:17,190
this Michael yep

00:10:14,670 --> 00:10:20,130
okay thank you for all showing up after

00:10:17,190 --> 00:10:21,150
this lovely lunch that we had I'm gonna

00:10:20,130 --> 00:10:22,860
talk a little bit about where we are

00:10:21,150 --> 00:10:24,390
today and give some examples of the

00:10:22,860 --> 00:10:25,680
types of things where we have hooks

00:10:24,390 --> 00:10:28,140
inside a spinnaker that we can actually

00:10:25,680 --> 00:10:29,790
make decision points and then later on

00:10:28,140 --> 00:10:31,410
I'll be talking about where I think we

00:10:29,790 --> 00:10:34,140
need to expand those decision points and

00:10:31,410 --> 00:10:35,940
how I sort of what my dream world would

00:10:34,140 --> 00:10:38,210
be in order to make certain we can do CV

00:10:35,940 --> 00:10:41,580
all the way through a spinnaker pipeline

00:10:38,210 --> 00:10:43,770
so today we can canary we have this down

00:10:41,580 --> 00:10:44,970
pretty well I work on camps at Netflix I

00:10:43,770 --> 00:10:47,760
worked on autopilot I'm working about

00:10:44,970 --> 00:10:49,560
pot now this is a very controlled

00:10:47,760 --> 00:10:52,160
environment it is a very specific use

00:10:49,560 --> 00:10:55,350
case we're very carefully controlling

00:10:52,160 --> 00:10:57,000
the environment that the it's as close

00:10:55,350 --> 00:11:00,480
as possible that the canary in the

00:10:57,000 --> 00:11:02,100
baseline are in the same space this

00:11:00,480 --> 00:11:04,020
works very well we give a pass/fail

00:11:02,100 --> 00:11:06,390
result not everybody can canary and

00:11:04,020 --> 00:11:07,620
everybody can canary in production but

00:11:06,390 --> 00:11:10,620
there's nothing that really says you

00:11:07,620 --> 00:11:12,830
have to do this in production we even

00:11:10,620 --> 00:11:15,150
have some of our customers using a

00:11:12,830 --> 00:11:17,610
basically a test suite they run against

00:11:15,150 --> 00:11:19,080
a canary that they've run that the same

00:11:17,610 --> 00:11:20,220
test suite against production and they

00:11:19,080 --> 00:11:22,560
can compare those and the nice thing

00:11:20,220 --> 00:11:23,850
about that is as mentioned you could

00:11:22,560 --> 00:11:25,530
have done that test suite on the old

00:11:23,850 --> 00:11:27,120
version last week and compare it to this

00:11:25,530 --> 00:11:28,230
week and it's probably okay because it's

00:11:27,120 --> 00:11:32,580
a very it's still a controlled

00:11:28,230 --> 00:11:34,140
environment to a certain extent best

00:11:32,580 --> 00:11:36,210
practices for canary I'm not going to go

00:11:34,140 --> 00:11:38,040
into a lot of best practices because

00:11:36,210 --> 00:11:40,530
there are a lot of talks there's even a

00:11:38,040 --> 00:11:42,600
workshop during I think right after the

00:11:40,530 --> 00:11:45,000
session starts but you can learn more

00:11:42,600 --> 00:11:47,040
about this these are my five things if

00:11:45,000 --> 00:11:49,560
nobody asked me about Canaries that I

00:11:47,040 --> 00:11:50,910
recommend once again keep things as

00:11:49,560 --> 00:11:52,980
similar as possible because we're really

00:11:50,910 --> 00:11:54,450
trying to detect very small changes that

00:11:52,980 --> 00:11:57,510
might be here and want to know that

00:11:54,450 --> 00:12:00,060
change occurred in the canary due to the

00:11:57,510 --> 00:12:02,370
change we made not due the fact that we

00:12:00,060 --> 00:12:04,080
also ran it ran the baseline at one

00:12:02,370 --> 00:12:06,780
o'clock and around the Canaria too for

00:12:04,080 --> 00:12:08,020
example compared a few metrics as

00:12:06,780 --> 00:12:10,180
possible

00:12:08,020 --> 00:12:12,250
in the past I've seen people with 600 to

00:12:10,180 --> 00:12:13,960
900 metrics if you look hard enough you

00:12:12,250 --> 00:12:15,550
will find a difference and that doesn't

00:12:13,960 --> 00:12:18,190
necessarily mean there's a problem and

00:12:15,550 --> 00:12:19,900
now you have to figure out how much of a

00:12:18,190 --> 00:12:21,640
difference do you care about which makes

00:12:19,900 --> 00:12:24,700
it really kind of washing so it'd be

00:12:21,640 --> 00:12:26,320
better to have say five metrics or a six

00:12:24,700 --> 00:12:29,410
metrics that each one gives a strong

00:12:26,320 --> 00:12:32,200
indicator errors are almost always

00:12:29,410 --> 00:12:34,840
better than success because errors

00:12:32,200 --> 00:12:36,790
actually have a very meaningful content

00:12:34,840 --> 00:12:37,480
you know this is an error you know it's

00:12:36,790 --> 00:12:39,310
a problem

00:12:37,480 --> 00:12:41,530
errors are generally better if they go

00:12:39,310 --> 00:12:43,180
down the canary and said we can directly

00:12:41,530 --> 00:12:44,740
we can check directionality if they go

00:12:43,180 --> 00:12:48,610
up in the canary that's bad if they go

00:12:44,740 --> 00:12:49,750
down it's probably okay and the one

00:12:48,610 --> 00:12:53,020
thing that a lot of people forget about

00:12:49,750 --> 00:12:54,700
is we call this an area experiment and

00:12:53,020 --> 00:12:57,670
the reason we use that word experiment

00:12:54,700 --> 00:12:59,950
is because it's set up to say that the

00:12:57,670 --> 00:13:02,440
thing we're trying to show is are these

00:12:59,950 --> 00:13:04,720
identical what we can't do that so we're

00:13:02,440 --> 00:13:06,670
really trying to say is the reason to

00:13:04,720 --> 00:13:09,730
believe that these are different so it's

00:13:06,670 --> 00:13:11,050
an experiment in the in the case of an

00:13:09,730 --> 00:13:12,760
experiment you want to make certain your

00:13:11,050 --> 00:13:14,560
experiment is set up properly so that

00:13:12,760 --> 00:13:15,940
one of the things that you want to do is

00:13:14,560 --> 00:13:18,340
say there's got to be at least one

00:13:15,940 --> 00:13:19,630
metric that says yes I'm getting the

00:13:18,340 --> 00:13:23,230
same amount of traffic to both my

00:13:19,630 --> 00:13:26,890
Canarian baseline we've had cases in the

00:13:23,230 --> 00:13:28,180
past where my previous employer we've

00:13:26,890 --> 00:13:30,250
had cases where the canary was getting

00:13:28,180 --> 00:13:32,200
no traffic and therefore no errors so it

00:13:30,250 --> 00:13:33,760
passed and that's a wonderful thing but

00:13:32,200 --> 00:13:36,910
it was also getting no traffic so no

00:13:33,760 --> 00:13:38,530
wonder it passed it had no errors adding

00:13:36,910 --> 00:13:40,060
that this particular metric and making

00:13:38,530 --> 00:13:41,800
it critical and said the canary config

00:13:40,060 --> 00:13:43,930
make certain that you catch this and you

00:13:41,800 --> 00:13:46,930
would fail and human would then have to

00:13:43,930 --> 00:13:48,670
figure out what's going on and the last

00:13:46,930 --> 00:13:50,800
one is try to use application metrics

00:13:48,670 --> 00:13:52,270
when possible when you start out with

00:13:50,800 --> 00:13:54,520
canary infrastructure you might be okay

00:13:52,270 --> 00:13:57,400
using the system level metrics you might

00:13:54,520 --> 00:13:58,690
be okay with memory CPU on the whole as

00:13:57,400 --> 00:14:01,180
long as that's the only thing running on

00:13:58,690 --> 00:14:02,530
that machine but in the future you

00:14:01,180 --> 00:14:05,380
really want to get application level

00:14:02,530 --> 00:14:06,970
metrics if you can it's not required but

00:14:05,380 --> 00:14:09,070
it really does help no nail things down

00:14:06,970 --> 00:14:10,140
because you can say which API is

00:14:09,070 --> 00:14:14,400
spinning out of me

00:14:10,140 --> 00:14:17,310
four or five api's for example and as

00:14:14,400 --> 00:14:19,710
mentioned also canary is really

00:14:17,310 --> 00:14:22,980
comparing two things to data says to

00:14:19,710 --> 00:14:26,580
each other and you can use this today in

00:14:22,980 --> 00:14:29,910
spinnaker to compare any two time frames

00:14:26,580 --> 00:14:31,770
of data from metrics you can compare one

00:14:29,910 --> 00:14:35,070
region to another if you want to compare

00:14:31,770 --> 00:14:36,810
last hour to this hour but every time

00:14:35,070 --> 00:14:40,680
you change the environment and you

00:14:36,810 --> 00:14:42,270
weaken that heart environmental any time

00:14:40,680 --> 00:14:43,680
the environment is also different you

00:14:42,270 --> 00:14:45,270
run the risk of having higher variance

00:14:43,680 --> 00:14:49,230
so you have to possibly consider your

00:14:45,270 --> 00:14:52,410
metric a little bit better one of the

00:14:49,230 --> 00:14:53,430
recommendations I have here is the

00:14:52,410 --> 00:14:54,750
hardest part is figuring out what you

00:14:53,430 --> 00:14:56,280
are going to be using as your baseline

00:14:54,750 --> 00:14:59,010
but the next hardest part is making

00:14:56,280 --> 00:15:01,170
certain that your metrics work properly

00:14:59,010 --> 00:15:03,390
like for example suppose I'm spinning up

00:15:01,170 --> 00:15:05,580
a new version and I want to compare it

00:15:03,390 --> 00:15:07,200
to a running baseline I might have five

00:15:05,580 --> 00:15:08,880
copies of the running baseline running I

00:15:07,200 --> 00:15:10,200
can't just use queries per second

00:15:08,880 --> 00:15:11,550
because I only have one instance of

00:15:10,200 --> 00:15:14,280
canary and have five of the baseline

00:15:11,550 --> 00:15:16,680
that's not going to work so maybe I have

00:15:14,280 --> 00:15:18,480
to use successful requests as the thing

00:15:16,680 --> 00:15:21,210
to divide everything by so its errors

00:15:18,480 --> 00:15:24,420
per successful request its memory per

00:15:21,210 --> 00:15:26,760
successful request or some incoming

00:15:24,420 --> 00:15:27,930
requests or something like that latency

00:15:26,760 --> 00:15:29,190
is probably good across the board

00:15:27,930 --> 00:15:30,860
because things he shouldn't change

00:15:29,190 --> 00:15:33,060
you're really trying to detect changes

00:15:30,860 --> 00:15:35,780
where the system is behaving differently

00:15:33,060 --> 00:15:40,650
some latency this sort of works directly

00:15:35,780 --> 00:15:42,750
and I would weaken what my expectation

00:15:40,650 --> 00:15:44,730
of this request would be a canary we can

00:15:42,750 --> 00:15:47,010
Savery pretty clearly this is different

00:15:44,730 --> 00:15:49,410
but in this sort of tests this is for

00:15:47,010 --> 00:15:52,560
the really big errors this isn't going

00:15:49,410 --> 00:15:53,940
to find a one percent variance reliably

00:15:52,560 --> 00:15:56,250
because you're probably always gonna

00:15:53,940 --> 00:15:58,380
find that but it would find a huge error

00:15:56,250 --> 00:16:00,330
like my latency has gone up by 40

00:15:58,380 --> 00:16:01,740
percent well that's really bad or my

00:16:00,330 --> 00:16:03,139
queries are I'm returning far more

00:16:01,740 --> 00:16:09,499
errors than it was before that

00:16:03,139 --> 00:16:11,660
really bad we beyond Canary and beyond

00:16:09,499 --> 00:16:13,429
using canary for a generic a be sort of

00:16:11,660 --> 00:16:15,079
comparisons we do have web hooks and

00:16:13,429 --> 00:16:18,559
since that has been agar and this works

00:16:15,079 --> 00:16:20,600
pretty well but as a stage which means

00:16:18,559 --> 00:16:22,339
it has to go between another stage so

00:16:20,600 --> 00:16:23,899
you have a deployment stage and then you

00:16:22,339 --> 00:16:25,189
have a web hook that can check to see if

00:16:23,899 --> 00:16:28,489
there's health by calling out to some

00:16:25,189 --> 00:16:31,429
external system the problem is he pretty

00:16:28,489 --> 00:16:34,279
deployed and I'll get into why this

00:16:31,429 --> 00:16:35,989
isn't quite sufficient later but you

00:16:34,279 --> 00:16:37,249
don't whip so you could in theory use a

00:16:35,989 --> 00:16:39,290
web hook to call out to an external

00:16:37,249 --> 00:16:41,929
system and say has an alert triggered or

00:16:39,290 --> 00:16:44,239
some such thing we also have health

00:16:41,929 --> 00:16:45,919
provider checks coming in from the cloud

00:16:44,239 --> 00:16:47,839
provider itself but really that just

00:16:45,919 --> 00:16:49,040
means that the instance come up it might

00:16:47,839 --> 00:16:51,529
mean to the instance come up in the

00:16:49,040 --> 00:16:52,970
application is listening on the port but

00:16:51,529 --> 00:16:55,129
that's pretty much where that stops it

00:16:52,970 --> 00:16:56,209
doesn't check the application health and

00:16:55,129 --> 00:16:57,949
of course for those who really like

00:16:56,209 --> 00:17:00,859
pushing buttons and waiting on things we

00:16:57,949 --> 00:17:02,929
also have manual checks I've said a long

00:17:00,859 --> 00:17:05,360
time ago that untested code is broken on

00:17:02,929 --> 00:17:07,429
modern machines are broken because I

00:17:05,360 --> 00:17:10,399
can't trust it they're not I also think

00:17:07,429 --> 00:17:12,169
an automated repent repetitive tasks are

00:17:10,399 --> 00:17:14,659
broken and if you don't automate a

00:17:12,169 --> 00:17:16,329
repetitive task it might not be broken

00:17:14,659 --> 00:17:19,130
today but it's gonna be broken tomorrow

00:17:16,329 --> 00:17:21,740
so manual checks for me are more for a

00:17:19,130 --> 00:17:23,149
safety check it's places where I might

00:17:21,740 --> 00:17:25,039
want to override an automated decision

00:17:23,149 --> 00:17:26,419
because I don't trust that system yet I

00:17:25,039 --> 00:17:28,130
don't have enough experience with it but

00:17:26,419 --> 00:17:30,440
I wouldn't use it in standard production

00:17:28,130 --> 00:17:33,080
mouth path lines or pathways until

00:17:30,440 --> 00:17:35,450
there's a problem so we use it a lot for

00:17:33,080 --> 00:17:38,299
an initial check we might want to say

00:17:35,450 --> 00:17:41,029
let's run this canary config and see if

00:17:38,299 --> 00:17:43,700
it works but I'm not gonna trust it 100%

00:17:41,029 --> 00:17:45,889
I don't want it to go to I I want it to

00:17:43,700 --> 00:17:47,090
if it's okay it's okay but if it fails I

00:17:45,889 --> 00:17:50,110
might still want to say ok because it

00:17:47,090 --> 00:17:50,110
might be my cookie with broken

00:17:51,800 --> 00:17:57,380
and that's life somebody skipped so I'm

00:17:56,450 --> 00:17:59,450
gonna have a lot to come back up for

00:17:57,380 --> 00:18:02,330
another few examples here and while he's

00:17:59,450 --> 00:18:03,470
going through this this is a example of

00:18:02,330 --> 00:18:06,920
what we can do today in the canary

00:18:03,470 --> 00:18:08,450
technology think about the different

00:18:06,920 --> 00:18:11,420
places that you might want to add checks

00:18:08,450 --> 00:18:13,010
into the system that we want to have a

00:18:11,420 --> 00:18:14,679
spinnaker that are not just a secondary

00:18:13,010 --> 00:18:21,620
stage all by itself

00:18:14,679 --> 00:18:23,390
all right second so I'm just going to

00:18:21,620 --> 00:18:26,809
show you obviously I'm not sure

00:18:23,390 --> 00:18:27,980
everybody has seen can't I here okay I

00:18:26,809 --> 00:18:30,290
just want to give you a quick quick

00:18:27,980 --> 00:18:33,170
quarry or some people who ever seen it

00:18:30,290 --> 00:18:35,150
obviously you know you have you can set

00:18:33,170 --> 00:18:37,340
up kind it's just part of the spinnaker

00:18:35,150 --> 00:18:39,830
open source that Michael helped right

00:18:37,340 --> 00:18:42,260
and you know you could specify for

00:18:39,830 --> 00:18:45,110
example something called a config where

00:18:42,260 --> 00:18:46,970
you specify what matrix you want and you

00:18:45,110 --> 00:18:49,700
can group the matrix and also give

00:18:46,970 --> 00:18:52,910
weight to the matrix so when you when

00:18:49,700 --> 00:18:54,260
you run the analysis it's basically not

00:18:52,910 --> 00:18:55,880
a solid matrix that you select right

00:18:54,260 --> 00:18:58,100
from let's say you have data at all or

00:18:55,880 --> 00:19:00,800
Prometheus for example it's basically a

00:18:58,100 --> 00:19:02,179
matrix that you select and in this case

00:19:00,800 --> 00:19:04,760
there are a few metrics selected and

00:19:02,179 --> 00:19:07,630
then you run the community stage within

00:19:04,760 --> 00:19:09,860
spinnaker and then you get results

00:19:07,630 --> 00:19:11,360
basically it compares all the metrics

00:19:09,860 --> 00:19:13,940
you you just you just point you just

00:19:11,360 --> 00:19:17,030
asked it to compare and do a statistical

00:19:13,940 --> 00:19:19,070
comparison protein between the two

00:19:17,030 --> 00:19:21,290
versions of software the canary and the

00:19:19,070 --> 00:19:23,179
baseline and basically provides you a

00:19:21,290 --> 00:19:25,309
score in this case it's a hundred score

00:19:23,179 --> 00:19:26,690
because everything is similar but you

00:19:25,309 --> 00:19:29,150
could you will see that if there are

00:19:26,690 --> 00:19:31,010
variations significant variations you

00:19:29,150 --> 00:19:32,780
would see the you know you get a

00:19:31,010 --> 00:19:35,030
different score and you'll be able to

00:19:32,780 --> 00:19:36,890
look at it so this is very useful tool

00:19:35,030 --> 00:19:39,200
that we have so one other things that we

00:19:36,890 --> 00:19:42,140
adopt except done I want to just do a

00:19:39,200 --> 00:19:43,940
quick show there is that what are some

00:19:42,140 --> 00:19:45,710
other things that we can do today and

00:19:43,940 --> 00:19:47,390
that I think we should as a community

00:19:45,710 --> 00:19:48,860
should be doing so we're working on you

00:19:47,390 --> 00:19:51,870
know how to open source of all these

00:19:48,860 --> 00:19:53,250
components as well but for now

00:19:51,870 --> 00:19:54,809
you know I'm just gonna show you what we

00:19:53,250 --> 00:19:57,390
can what we're doing right now so again

00:19:54,809 --> 00:20:00,179
you have two cannery stage and you can

00:19:57,390 --> 00:20:03,630
get a score from a spot of the pipeline

00:20:00,179 --> 00:20:05,520
and here we are showing that the this is

00:20:03,630 --> 00:20:07,650
something we have done where they're

00:20:05,520 --> 00:20:09,900
comparing the lodge for example in this

00:20:07,650 --> 00:20:12,120
case we are comparing two releases for

00:20:09,900 --> 00:20:16,500
baseline and that this thing based on a

00:20:12,120 --> 00:20:17,909
kind of aversion and identifying the

00:20:16,500 --> 00:20:20,220
logs we use the natural language

00:20:17,909 --> 00:20:22,740
processing to identify the errors and

00:20:20,220 --> 00:20:25,520
particular errors and warnings as as it

00:20:22,740 --> 00:20:28,289
as as you as you find in the new

00:20:25,520 --> 00:20:29,640
Canadian release and then be able to

00:20:28,289 --> 00:20:31,679
look at things for example in this case

00:20:29,640 --> 00:20:33,360
it shows you how many times this

00:20:31,679 --> 00:20:35,429
particular error message was was

00:20:33,360 --> 00:20:38,070
repeated it's automatically categorizes

00:20:35,429 --> 00:20:40,320
a particular error and then you can also

00:20:38,070 --> 00:20:41,909
see during doing that do you would you

00:20:40,320 --> 00:20:43,950
know if you have run the particular

00:20:41,909 --> 00:20:45,450
analysis for one hour it tells you is it

00:20:43,950 --> 00:20:47,490
happening the beginning of the you know

00:20:45,450 --> 00:20:50,039
chess or during the certain parts of the

00:20:47,490 --> 00:20:51,690
test so you can see here you know some

00:20:50,039 --> 00:20:53,190
critical errors which basically that's

00:20:51,690 --> 00:20:55,620
why the result of the school is zero and

00:20:53,190 --> 00:20:56,970
there is errors your choices number of

00:20:55,620 --> 00:20:59,880
times the particular elements is

00:20:56,970 --> 00:21:01,919
repeated and it is a warning etc so you

00:20:59,880 --> 00:21:03,240
can obviously reclassify some things for

00:21:01,919 --> 00:21:05,610
example if the natural language

00:21:03,240 --> 00:21:06,840
processing or the algorithm is finding

00:21:05,610 --> 00:21:09,000
something that severe you say you know

00:21:06,840 --> 00:21:11,070
what's really not severe its warning for

00:21:09,000 --> 00:21:14,100
example or just ignore it you can

00:21:11,070 --> 00:21:17,100
reclassify them and then this will learn

00:21:14,100 --> 00:21:19,710
and for the next time you would not have

00:21:17,100 --> 00:21:21,539
to do it so again this works with the

00:21:19,710 --> 00:21:23,429
existing spinnaker obviously as you can

00:21:21,539 --> 00:21:25,260
see this little bit beyond kinda kinda

00:21:23,429 --> 00:21:27,659
was just comparing metrics this is now

00:21:25,260 --> 00:21:30,480
comparing logs and other part that

00:21:27,659 --> 00:21:33,840
Michael was pointing out is that we need

00:21:30,480 --> 00:21:35,940
to go beyond the i/o metrics and compute

00:21:33,840 --> 00:21:38,250
metrics etc and you need to go beyond to

00:21:35,940 --> 00:21:41,279
application level so in this case this

00:21:38,250 --> 00:21:43,710
is an API level comparison between the

00:21:41,279 --> 00:21:45,419
the baseline and the canary again it's

00:21:43,710 --> 00:21:48,149
let's say in this case a particular API

00:21:45,419 --> 00:21:50,580
endpoint it has a latency error rate and

00:21:48,149 --> 00:21:53,100
surfboard and those kind of things

00:21:50,580 --> 00:21:54,679
you can see that the baseline is that

00:21:53,100 --> 00:21:57,210
the canary is much higher latency

00:21:54,679 --> 00:21:59,190
compared to the baseline and obviously

00:21:57,210 --> 00:22:01,500
this failed the score here okay these

00:21:59,190 --> 00:22:02,590
are all sort of incremental things were

00:22:01,500 --> 00:22:04,270
from what kind of

00:22:02,590 --> 00:22:06,970
doing in terms of just looking at the

00:22:04,270 --> 00:22:09,520
metrics to log in APM and other kinds of

00:22:06,970 --> 00:22:13,570
metrics with that I'm going to give back

00:22:09,520 --> 00:22:19,380
to you and you can continue on with with

00:22:13,570 --> 00:22:22,659
yeah I think you want to add to be sure

00:22:19,380 --> 00:22:24,010
all right so one of the things I've

00:22:22,659 --> 00:22:25,179
learned about public speaking is I

00:22:24,010 --> 00:22:26,350
always speak faster when I'm actually

00:22:25,179 --> 00:22:27,070
doing the speech so we're gonna finish

00:22:26,350 --> 00:22:29,799
little early

00:22:27,070 --> 00:22:31,510
okay we're okay with that so I don't

00:22:29,799 --> 00:22:33,789
Pettit is really similar to kion to it

00:22:31,510 --> 00:22:35,620
has the same API and it works in a very

00:22:33,789 --> 00:22:37,600
similar way to a certain point but it is

00:22:35,620 --> 00:22:39,070
a more advanced version of it and we do

00:22:37,600 --> 00:22:41,620
more math behind the scenes and also we

00:22:39,070 --> 00:22:44,470
have the log processing those are really

00:22:41,620 --> 00:22:45,940
the important parts of our particular

00:22:44,470 --> 00:22:47,679
application that we do want to open

00:22:45,940 --> 00:22:49,480
source parts of it and possibly merge

00:22:47,679 --> 00:22:51,490
the parts that we do have in into kion

00:22:49,480 --> 00:22:54,700
today one thing about Optimax is we're

00:22:51,490 --> 00:22:56,140
very focused on the open source world we

00:22:54,700 --> 00:22:57,549
think you should have pluggable models

00:22:56,140 --> 00:22:59,380
it should not be something that we sell

00:22:57,549 --> 00:23:01,690
you and then you're bound into a version

00:22:59,380 --> 00:23:04,649
of spinnaker for Optimax that you have

00:23:01,690 --> 00:23:04,649
to use for example

00:23:10,009 --> 00:23:14,610
doo-doo-doo-doo so now I'm going to talk

00:23:12,480 --> 00:23:16,739
a little bit about the future where are

00:23:14,610 --> 00:23:18,629
we headed where where do I think we

00:23:16,739 --> 00:23:21,450
could go this is not necessarily a

00:23:18,629 --> 00:23:23,759
perfect path I need a lot of input and

00:23:21,450 --> 00:23:27,600
we are working with a lot of people on

00:23:23,759 --> 00:23:29,610
this so I would like to see checkpoints

00:23:27,600 --> 00:23:30,840
at multiple places or than spinnaker I

00:23:29,610 --> 00:23:32,549
don't think it's sufficient to have a

00:23:30,840 --> 00:23:34,559
stage that makes the decision I think

00:23:32,549 --> 00:23:36,059
the stage itself needs to grow the

00:23:34,559 --> 00:23:39,299
ability to make a decision

00:23:36,059 --> 00:23:40,499
inside of the stage one other one one of

00:23:39,299 --> 00:23:42,779
the stages that I really recommend for

00:23:40,499 --> 00:23:44,279
deploying software if at all possible on

00:23:42,779 --> 00:23:47,190
the cloud provider you're using is the

00:23:44,279 --> 00:23:48,659
rolling red black and that's where you

00:23:47,190 --> 00:23:50,070
might roll tempi suppose you have 10

00:23:48,659 --> 00:23:52,980
instances of a server that you're trying

00:23:50,070 --> 00:23:55,049
to to roll out you might roll out 10% of

00:23:52,980 --> 00:23:57,299
those the new version and then do a

00:23:55,049 --> 00:23:58,739
health check and then another 10% and do

00:23:57,299 --> 00:24:01,980
a health check until eventually you get

00:23:58,739 --> 00:24:04,049
200% of the new code right now the

00:24:01,980 --> 00:24:05,489
rolling red-black will do that but there

00:24:04,049 --> 00:24:08,340
really isn't a good way to hook into

00:24:05,489 --> 00:24:10,470
generic health providers to say is it

00:24:08,340 --> 00:24:13,200
actually working or am i causing problem

00:24:10,470 --> 00:24:14,999
and I think that's for an example of

00:24:13,200 --> 00:24:17,009
what we need to do stages could learn

00:24:14,999 --> 00:24:18,809
based upon the health check they get

00:24:17,009 --> 00:24:21,359
what action they might take and that

00:24:18,809 --> 00:24:23,759
could be a deployment stage might roll

00:24:21,359 --> 00:24:25,559
back or cancel itself or undo or pause

00:24:23,759 --> 00:24:28,980
or who knows what we want to do there

00:24:25,559 --> 00:24:30,330
but the idea is that safety I want to

00:24:28,980 --> 00:24:32,879
run as fast as possible

00:24:30,330 --> 00:24:35,940
but I want as fast as possible but as

00:24:32,879 --> 00:24:38,369
safely as possible so this health checks

00:24:35,940 --> 00:24:39,570
need to be as tribute throughout these

00:24:38,369 --> 00:24:41,039
are some of the health checks I've heard

00:24:39,570 --> 00:24:44,759
of and as well as some they thought up

00:24:41,039 --> 00:24:46,679
myself for based upon experience here we

00:24:44,759 --> 00:24:49,409
don't have a good threshold system

00:24:46,679 --> 00:24:51,869
inside of spinnaker right now it's hard

00:24:49,409 --> 00:24:53,850
to even say something as simple as am i

00:24:51,869 --> 00:24:57,269
meeting my SLA for latency during this

00:24:53,850 --> 00:24:59,039
appointment we don't have that right now

00:24:57,269 --> 00:25:00,570
I think hi anta for example if we grow

00:24:59,039 --> 00:25:01,980
that quite easily and then we could call

00:25:00,570 --> 00:25:04,739
to Cayenne so once the book was in place

00:25:01,980 --> 00:25:06,629
a really interesting one that I'd like

00:25:04,739 --> 00:25:08,820
to see added for the command this is it

00:25:06,629 --> 00:25:10,200
possibly a community offering not

00:25:08,820 --> 00:25:12,769
necessarily something inside a spinnaker

00:25:10,200 --> 00:25:15,450
again is a downstream in a deep well

00:25:12,769 --> 00:25:17,440
upstream and especially downstream view

00:25:15,450 --> 00:25:20,560
of what our application looks like

00:25:17,440 --> 00:25:22,630
a common outage I've seen is I'm

00:25:20,560 --> 00:25:25,030
deploying my version the downstream

00:25:22,630 --> 00:25:26,920
who's calling me calls my new version

00:25:25,030 --> 00:25:28,540
and for some reason doesn't like the

00:25:26,920 --> 00:25:30,760
response so it doesn't retry and it gets

00:25:28,540 --> 00:25:31,990
the old version and it works and so far

00:25:30,760 --> 00:25:34,210
there's no outage nobody's noticed

00:25:31,990 --> 00:25:35,740
anything during a canary there's so

00:25:34,210 --> 00:25:37,990
little traffic increase nobody actually

00:25:35,740 --> 00:25:41,080
notices this problem during a trolling

00:25:37,990 --> 00:25:43,570
deployment at 10% now that problem is

00:25:41,080 --> 00:25:45,520
suddenly more visible at 20% I'm

00:25:43,570 --> 00:25:47,290
starting to see significant retries from

00:25:45,520 --> 00:25:48,640
a down stream and I could make an

00:25:47,290 --> 00:25:51,070
intelligent decision that maybe I should

00:25:48,640 --> 00:25:52,300
stop rolling out my version up streams

00:25:51,070 --> 00:25:53,710
are similar I might be for the

00:25:52,300 --> 00:25:57,070
additional load on upstream that they

00:25:53,710 --> 00:25:59,320
weren't expecting before but at my

00:25:57,070 --> 00:26:00,760
previous employer downstream was more

00:25:59,320 --> 00:26:02,800
important than upstream it's almost

00:26:00,760 --> 00:26:04,180
always I've added or changed a field or

00:26:02,800 --> 00:26:05,770
some way that they're not quite ready

00:26:04,180 --> 00:26:07,540
for or I'm giving them additional data

00:26:05,770 --> 00:26:11,650
that they weren't expecting and they're

00:26:07,540 --> 00:26:13,570
caught they don't like that but we also

00:26:11,650 --> 00:26:15,040
most of us have alerting systems I

00:26:13,570 --> 00:26:16,300
suspect most big companies have an

00:26:15,040 --> 00:26:17,800
alerting system that they already trust

00:26:16,300 --> 00:26:19,480
and it's already built in so why can't

00:26:17,800 --> 00:26:21,820
some intercal do that NASA questions and

00:26:19,480 --> 00:26:23,740
while we can do that is a webhook stage

00:26:21,820 --> 00:26:25,600
it seems it just seems like it'd be

00:26:23,740 --> 00:26:27,310
really good to do it in the middle of a

00:26:25,600 --> 00:26:30,370
rolling with everyone in deployment and

00:26:27,310 --> 00:26:32,230
not have to do other stages between

00:26:30,370 --> 00:26:33,970
everything and then trying to manage

00:26:32,230 --> 00:26:36,520
that scale it just gets pretty messy

00:26:33,970 --> 00:26:40,510
pretty fast there's also environmental

00:26:36,520 --> 00:26:42,250
indicators oftentimes DNS is down at one

00:26:40,510 --> 00:26:44,050
zone or something is wrong with one

00:26:42,250 --> 00:26:45,790
particular region and you might not

00:26:44,050 --> 00:26:48,370
wanted to play that region or even not

00:26:45,790 --> 00:26:49,810
employ at all and these are unrelated to

00:26:48,370 --> 00:26:51,340
your application but the idea is that if

00:26:49,810 --> 00:26:52,600
I'd continued the deployment I might

00:26:51,340 --> 00:26:54,370
cause an outage just better let things

00:26:52,600 --> 00:26:58,290
sit still perhaps than anything else

00:26:54,370 --> 00:27:00,670
I mentioned log analysis here because

00:26:58,290 --> 00:27:02,620
almost everything is either on a health

00:27:00,670 --> 00:27:03,910
indicator or metric log analysis would

00:27:02,620 --> 00:27:06,340
be awesome there's probably other things

00:27:03,910 --> 00:27:09,730
we can do there - maybe memory pattern

00:27:06,340 --> 00:27:12,730
analysis or call traces and compliance

00:27:09,730 --> 00:27:14,020
security the common checks that we have

00:27:12,730 --> 00:27:17,020
to do to make certain that we all remain

00:27:14,020 --> 00:27:20,299
legal and we all remain sane which

00:27:17,020 --> 00:27:22,769
engineers like myself as mentioned

00:27:20,299 --> 00:27:24,600
understand exists that aren't so

00:27:22,769 --> 00:27:27,419
concerned about other than they need to

00:27:24,600 --> 00:27:31,559
be there and a big one for me is also

00:27:27,419 --> 00:27:33,659
verification of deployments people go on

00:27:31,559 --> 00:27:35,010
or people can and some take cases go on

00:27:33,659 --> 00:27:36,870
and fiddle with configs on side of

00:27:35,010 --> 00:27:39,000
running instances if you often text to

00:27:36,870 --> 00:27:40,049
know that happened so that we can say

00:27:39,000 --> 00:27:41,490
we're not going to deploy because

00:27:40,049 --> 00:27:42,659
somebody has made a modification that's

00:27:41,490 --> 00:27:47,940
config and we're gonna overwrite that

00:27:42,659 --> 00:27:49,919
which might actually cause damage one

00:27:47,940 --> 00:27:51,779
thing I want to stress again is that we

00:27:49,919 --> 00:27:54,450
were trying to build an ecosystem we're

00:27:51,779 --> 00:27:55,889
not trying to say this is the Office of

00:27:54,450 --> 00:27:57,240
X way we want to do things we want to

00:27:55,889 --> 00:27:59,279
build a system where it's pluggable

00:27:57,240 --> 00:28:01,980
multiple vendors can come along and add

00:27:59,279 --> 00:28:03,690
their special sauce in and with the open

00:28:01,980 --> 00:28:05,820
source vinegar we're still able to use

00:28:03,690 --> 00:28:08,340
all the tools you want to build the

00:28:05,820 --> 00:28:11,370
things you need to get your safety level

00:28:08,340 --> 00:28:13,169
that you're looking for I'd like to

00:28:11,370 --> 00:28:14,010
point out we have a cig started for this

00:28:13,169 --> 00:28:15,539
particular task

00:28:14,010 --> 00:28:18,690
it is the unfortunate name of

00:28:15,539 --> 00:28:20,970
operational validation I needed to pick

00:28:18,690 --> 00:28:22,889
a word and I chose those two we

00:28:20,970 --> 00:28:25,289
currently have three people mentioned

00:28:22,889 --> 00:28:27,600
here Matt Duffy Michael Graff myself and

00:28:25,289 --> 00:28:30,570
Chris Sandin we are the three people who

00:28:27,600 --> 00:28:32,970
focus primarily on Kayenta so were the

00:28:30,570 --> 00:28:35,580
three people who generated that kaientai

00:28:32,970 --> 00:28:37,940
originally and we're trying to build a

00:28:35,580 --> 00:28:39,840
framework where we can actually evaluate

00:28:37,940 --> 00:28:41,370
different techniques and different

00:28:39,840 --> 00:28:42,950
systems and how they look and despair

00:28:41,370 --> 00:28:44,580
and how they should have in a spinnaker

00:28:42,950 --> 00:28:45,840
specifically focusing around the

00:28:44,580 --> 00:28:47,789
decision points that we're trying to do

00:28:45,840 --> 00:28:51,389
and there is a talk later on I think

00:28:47,789 --> 00:28:52,889
it's today about pluggable pluggable

00:28:51,389 --> 00:28:54,330
spinnaker and this is something we're

00:28:52,889 --> 00:28:55,919
also very interested in for finances

00:28:54,330 --> 00:28:58,070
specifically but also for spinnaker as

00:28:55,919 --> 00:28:58,070
well

00:28:58,810 --> 00:29:02,710
so we have many related sessions one is

00:29:01,240 --> 00:29:04,120
a rayon video so you're gonna have to

00:29:02,710 --> 00:29:06,670
watch it on video guess it's already

00:29:04,120 --> 00:29:08,260
occurred this morning that's the journey

00:29:06,670 --> 00:29:11,650
to save critical mission continuous

00:29:08,260 --> 00:29:13,060
delivery at this party's lab we also

00:29:11,650 --> 00:29:14,440
have an automatic analysis workshop

00:29:13,060 --> 00:29:16,360
which I mentioned to creators in that

00:29:14,440 --> 00:29:18,580
that happens at 2:30 it actually is two

00:29:16,360 --> 00:29:19,810
hours long so you don't have to show the

00:29:18,580 --> 00:29:20,950
whole thing it'd be good to show up to

00:29:19,810 --> 00:29:22,630
at least the first part of it if you're

00:29:20,950 --> 00:29:26,350
curious I guess

00:29:22,630 --> 00:29:28,540
canary curious we also have another talk

00:29:26,350 --> 00:29:31,000
here on Sunday 12:30 and we have a talk

00:29:28,540 --> 00:29:32,290
at 1:30 and I'm especially I don't want

00:29:31,000 --> 00:29:34,780
to downplay the middle one here but we

00:29:32,290 --> 00:29:36,340
actually have I'm very interested

00:29:34,780 --> 00:29:39,690
actually the middle one because a

00:29:36,340 --> 00:29:42,340
referee is a system built at Nike and

00:29:39,690 --> 00:29:44,830
Chi anta when we built it was originally

00:29:42,340 --> 00:29:47,770
designed to be a standalone tool as well

00:29:44,830 --> 00:29:49,960
as part of spinnaker and this is a UI on

00:29:47,770 --> 00:29:51,520
top of chi anta without using spinnaker

00:29:49,960 --> 00:29:52,840
so even if you're not using spin it for

00:29:51,520 --> 00:29:54,550
today you could still experiments canary

00:29:52,840 --> 00:29:55,090
is using referee which i think is pretty

00:29:54,550 --> 00:29:57,880
awesome

00:29:55,090 --> 00:29:59,200
it shows that's one once again we're

00:29:57,880 --> 00:30:01,180
trying to build an ecosystem here we're

00:29:59,200 --> 00:30:02,710
not really too biased on how people use

00:30:01,180 --> 00:30:07,150
our tools we just want want them to get

00:30:02,710 --> 00:30:10,780
the best use out of it I think the

00:30:07,150 --> 00:30:13,150
Empire gave anybody questions yes so if

00:30:10,780 --> 00:30:16,270
you you can see our contact information

00:30:13,150 --> 00:30:17,950
so feel free to reach out if you want to

00:30:16,270 --> 00:30:36,640
evaluate autopilot that I showed you

00:30:17,950 --> 00:30:38,770
against the email at this point oh yeah

00:30:36,640 --> 00:30:41,050
that's that's a plan so my point is that

00:30:38,770 --> 00:30:43,540
I want to hook have spinnaker be able to

00:30:41,050 --> 00:30:44,740
call out to existing solutions we are

00:30:43,540 --> 00:30:46,930
building one that I talked about a

00:30:44,740 --> 00:30:48,310
little bit and more we presented it more

00:30:46,930 --> 00:30:51,510
show this is the kind of thing we want

00:30:48,310 --> 00:30:55,240
to tap into my goal is to make spinnaker

00:30:51,510 --> 00:30:56,470
not care about what it calls maybe there

00:30:55,240 --> 00:31:01,360
would be some configuration that you

00:30:56,470 --> 00:31:02,110
have to call it yeah I didn't do a

00:31:01,360 --> 00:31:03,670
mock-up or anything

00:31:02,110 --> 00:31:05,380
perhaps I should have the idea that I'm

00:31:03,670 --> 00:31:06,919
thinking of is there would be health

00:31:05,380 --> 00:31:08,659
checks for application and then

00:31:06,919 --> 00:31:10,309
stay June say I want to pay attention to

00:31:08,659 --> 00:31:11,720
these health checks by default and they

00:31:10,309 --> 00:31:14,269
skip this one because for some reason it

00:31:11,720 --> 00:31:16,850
doesn't matter to this stage perhaps but

00:31:14,269 --> 00:31:19,639
you might have a did any alerts fire no

00:31:16,850 --> 00:31:21,230
great did our metrics with an SLA

00:31:19,639 --> 00:31:23,809
requirements yes great do they

00:31:21,230 --> 00:31:25,399
compliance framework you know check us

00:31:23,809 --> 00:31:26,720
out and say yes okay great now we can

00:31:25,399 --> 00:31:29,389
get you to the next stage so it's I

00:31:26,720 --> 00:31:31,220
think it's I think the APM to the one

00:31:29,389 --> 00:31:33,529
example I showed you whether it be

00:31:31,220 --> 00:31:41,389
showing the latency and this is actually

00:31:33,529 --> 00:31:42,889
do it like you just showed in this

00:31:41,389 --> 00:31:44,570
context because at the end of the day

00:31:42,889 --> 00:31:45,950
you're trying to evaluate the whole

00:31:44,570 --> 00:31:48,230
thing you're looking at the logs you

00:31:45,950 --> 00:31:50,649
look at the new you're looking at the

00:31:48,230 --> 00:31:52,879
Prometheus etc all in one consolidated

00:31:50,649 --> 00:31:54,499
reporting right and that's just stop

00:31:52,879 --> 00:31:56,239
that's just a tip of the iceberg and see

00:31:54,499 --> 00:31:58,190
you there's a whole bunch of things we

00:31:56,239 --> 00:31:59,779
need to check the cumulation compliance

00:31:58,190 --> 00:32:04,210
if you look at it that's sort of the

00:31:59,779 --> 00:32:04,210
whole thing you would feel comfortable

00:32:06,100 --> 00:32:10,220
exactly how it's done

00:32:08,119 --> 00:32:11,720
yeah this this is more about the idea

00:32:10,220 --> 00:32:13,730
that spinnaker needs to be able to tap

00:32:11,720 --> 00:32:14,119
into those things and where it needs to

00:32:13,730 --> 00:32:15,529
happen

00:32:14,119 --> 00:32:16,909
because right now you could you could go

00:32:15,529 --> 00:32:19,519
Sage and said caught up to the

00:32:16,909 --> 00:32:21,409
particular APM solution but now you can

00:32:19,519 --> 00:32:23,119
only do it between stages like rolling

00:32:21,409 --> 00:32:25,100
red black has already occurred it's done

00:32:23,119 --> 00:32:26,720
you know you can't go back and undo that

00:32:25,100 --> 00:32:28,220
easily and plus you may have crossed out

00:32:26,720 --> 00:32:31,580
it should be nice along the way we could

00:32:28,220 --> 00:32:33,830
check those APM solutions so the value

00:32:31,580 --> 00:32:35,480
essentially is now we look at the

00:32:33,830 --> 00:32:36,980
baseline and the candy and try to give

00:32:35,480 --> 00:32:38,779
you the comparison and there's a

00:32:36,980 --> 00:32:40,609
historical way to understand that thing

00:32:38,779 --> 00:32:44,450
is more like with a history granny not

00:32:40,609 --> 00:32:46,580
just a point in time comparison yeah and

00:32:44,450 --> 00:32:48,169
then and then also you can score set

00:32:46,580 --> 00:32:51,259
rules and policies and things like that

00:32:48,169 --> 00:32:55,639
that is specific to an application you

00:32:51,259 --> 00:32:57,409
know because I the so the primary atomic

00:32:55,639 --> 00:32:58,909
unit is an application or micro service

00:32:57,409 --> 00:33:00,150
for example right so you have a

00:32:58,909 --> 00:33:02,220
different view if you're looking

00:33:00,150 --> 00:33:03,330
from that angle versus that if you just

00:33:02,220 --> 00:33:05,910
go together like and look at that

00:33:03,330 --> 00:33:07,560
specific metric and things like that so

00:33:05,910 --> 00:33:09,840
we're trying to sort of make this as a

00:33:07,560 --> 00:33:11,580
validation of a service or an

00:33:09,840 --> 00:33:14,190
application and that's multiple

00:33:11,580 --> 00:33:15,540
components to it yeah we can talk more I

00:33:14,190 --> 00:33:19,650
think I'll climb how much effort is

00:33:15,540 --> 00:33:20,970
gonna come into yeah so so for the

00:33:19,650 --> 00:33:21,720
framework that calls out I hope all of

00:33:20,970 --> 00:33:25,110
it

00:33:21,720 --> 00:33:27,090
my I'm a big open source proponent I've

00:33:25,110 --> 00:33:29,370
worked in by 9:00 in my past so DNS

00:33:27,090 --> 00:33:32,820
world and I really want open source

00:33:29,370 --> 00:33:34,080
everything so I understand you know we

00:33:32,820 --> 00:33:35,910
have secret sauce just like everybody

00:33:34,080 --> 00:33:39,180
else does that keeps the lights on but I

00:33:35,910 --> 00:33:41,160
I would like to keep as much in the

00:33:39,180 --> 00:33:43,110
standard open source spinnaker as

00:33:41,160 --> 00:33:45,870
possible because I think that's the

00:33:43,110 --> 00:33:47,730
value I'm very I'm not really against I

00:33:45,870 --> 00:33:50,040
don't want to say I'm like no company

00:33:47,730 --> 00:33:51,750
should do this but I would prefer to see

00:33:50,040 --> 00:33:53,220
open source solutions where you can pick

00:33:51,750 --> 00:33:54,750
and you can pick proprietary

00:33:53,220 --> 00:33:56,760
implementations of certain features and

00:33:54,750 --> 00:33:59,160
pull them in rather than being tied into

00:33:56,760 --> 00:34:00,660
specific you have to use our version of

00:33:59,160 --> 00:34:02,640
spinnaker to get these features that are

00:34:00,660 --> 00:34:04,140
our special sauce because now how do you

00:34:02,640 --> 00:34:08,790
get another company special sauce at the

00:34:04,140 --> 00:34:10,919
same time operational validation sig is

00:34:08,790 --> 00:34:13,169
sort of that neutral party right that

00:34:10,919 --> 00:34:14,580
you know bringing that whole thing to

00:34:13,169 --> 00:34:16,919
the spinnaker and then there's obviously

00:34:14,580 --> 00:34:19,860
some implementation that the open source

00:34:16,919 --> 00:34:23,310
we can also open source anybody can open

00:34:19,860 --> 00:34:26,130
source but the goal is to be yeah to be

00:34:23,310 --> 00:34:27,690
it's been we have actually had a signal

00:34:26,130 --> 00:34:30,240
yet but all three of us are now

00:34:27,690 --> 00:34:32,909
physically in the same area so we we

00:34:30,240 --> 00:34:34,260
have the plan to get together at some

00:34:32,909 --> 00:34:39,919
point and actually say whenever we never

00:34:34,260 --> 00:34:39,919
first meet so okay any other questions

00:34:41,020 --> 00:34:46,980
okay don't have anything thank you very

00:34:43,450 --> 00:34:46,980
much thank you thank you

00:34:56,080 --> 00:34:58,140

YouTube URL: https://www.youtube.com/watch?v=oGFAGacH0UE


