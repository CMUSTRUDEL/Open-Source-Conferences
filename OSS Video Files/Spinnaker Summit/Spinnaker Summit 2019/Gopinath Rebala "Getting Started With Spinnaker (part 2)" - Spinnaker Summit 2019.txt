Title: Gopinath Rebala "Getting Started With Spinnaker (part 2)" - Spinnaker Summit 2019
Publication date: 2019-12-09
Playlist: Spinnaker Summit 2019
Description: 
	The third annual Spinnaker Summit (Diamond Sponsors: Netflix, Google and Armory) was held at the Hard Rock Hotel in San Diego, CA from November 15-17, 2019 and welcomed over 500 members of the rapidly growing Spinnaker open source community.
Captions: 
	00:00:09,580 --> 00:00:13,009
here to introduce our speaker today for

00:00:11,869 --> 00:00:14,629
part two of you getting started with

00:00:13,009 --> 00:00:17,599
spinnaker session on enterprise roll-up

00:00:14,629 --> 00:00:19,460
this is Gopinath he is the CTO at ops MX

00:00:17,599 --> 00:00:21,230
please give him a warm welcome and we'll

00:00:19,460 --> 00:00:22,380
have some comments or questions at the

00:00:21,230 --> 00:00:26,980
end

00:00:22,380 --> 00:00:26,980
[Applause]

00:00:33,039 --> 00:00:39,850
thank you it - I haven't coconut rebola

00:00:37,059 --> 00:00:43,620
CTO of pop some eggs we started in

00:00:39,850 --> 00:00:46,629
founded in 2016 we specialize in

00:00:43,620 --> 00:00:49,390
spinnaker delivery and revised rollouts

00:00:46,629 --> 00:00:52,000
and we also have a continuous

00:00:49,390 --> 00:00:55,899
verification component we have offices

00:00:52,000 --> 00:00:58,960
across the world and we're about 60

00:00:55,899 --> 00:01:04,360
people now we gotta be to open so

00:00:58,960 --> 00:01:06,550
spinnaker and this morning of my

00:01:04,360 --> 00:01:08,890
colleague went through installation of

00:01:06,550 --> 00:01:12,100
spinnaker creating a pipeline and

00:01:08,890 --> 00:01:14,259
deploying it using spinnaker so today

00:01:12,100 --> 00:01:16,300
now what we'll do is we'll take those

00:01:14,259 --> 00:01:18,399
pipelines convert them into templates

00:01:16,300 --> 00:01:22,000
for an enterprise you want to be able to

00:01:18,399 --> 00:01:25,390
do self-service and provide these

00:01:22,000 --> 00:01:26,979
templates out to your developers and

00:01:25,390 --> 00:01:29,920
have them onboard their services

00:01:26,979 --> 00:01:31,750
themselves so we will look at that and

00:01:29,920 --> 00:01:34,409
there are two models that you can use

00:01:31,750 --> 00:01:36,700
you can use the pipeline templates based

00:01:34,409 --> 00:01:39,819
pipelines that were created or if you

00:01:36,700 --> 00:01:42,879
have the JSON step centralized team can

00:01:39,819 --> 00:01:44,729
manage and sync with all the pipelines

00:01:42,879 --> 00:01:47,140
with the spinnaker with these pipelines

00:01:44,729 --> 00:01:48,759
definitions so something that keeps

00:01:47,140 --> 00:01:51,489
coming up is also how are these

00:01:48,759 --> 00:01:53,500
permission set authorization models in

00:01:51,489 --> 00:01:55,420
spinnaker so we will go through a little

00:01:53,500 --> 00:01:58,300
bit on those authorization models and

00:01:55,420 --> 00:01:59,739
see how accounts versus applications how

00:01:58,300 --> 00:02:04,179
are they segregated how these

00:01:59,739 --> 00:02:06,580
permissions work and we'll also do a

00:02:04,179 --> 00:02:08,739
little bit of on deployment strategies

00:02:06,580 --> 00:02:11,830
and how the automated analysis can be

00:02:08,739 --> 00:02:13,960
used to

00:02:11,830 --> 00:02:19,540
risk management of applications that you

00:02:13,960 --> 00:02:20,850
are deploying it's a general spinnaker

00:02:19,540 --> 00:02:23,560
workflow

00:02:20,850 --> 00:02:27,490
you know this spinnaker is at the center

00:02:23,560 --> 00:02:32,830
yeah as you can see there is a CI part

00:02:27,490 --> 00:02:34,870
in the front and then once the code is

00:02:32,830 --> 00:02:36,460
checked in the spinnaker can be kicked

00:02:34,870 --> 00:02:40,210
off which can have the entire pipeline

00:02:36,460 --> 00:02:41,560
all away from check-in to the deployment

00:02:40,210 --> 00:02:43,870
that's visible through the spinnaker

00:02:41,560 --> 00:02:46,180
platform that's typically what you would

00:02:43,870 --> 00:02:47,970
like to see typically what you would

00:02:46,180 --> 00:02:51,130
have is the Jenkins to doing the CI

00:02:47,970 --> 00:02:54,370
which is building an artifact pushing to

00:02:51,130 --> 00:02:56,350
some kind of artifact store this is true

00:02:54,370 --> 00:02:59,080
for any of these cloud platforms that

00:02:56,350 --> 00:03:02,230
you see here that's true for kubernetes

00:02:59,080 --> 00:03:06,130
or AWS this is just a slightly different

00:03:02,230 --> 00:03:11,880
way of using those artifacts in your

00:03:06,130 --> 00:03:14,770
deployment pipelines you could also have

00:03:11,880 --> 00:03:18,370
spinnaker manage your infrastructure

00:03:14,770 --> 00:03:20,110
Tillery through terraform or you can

00:03:18,370 --> 00:03:22,360
even integrate the ansible candidates

00:03:20,110 --> 00:03:28,010
today we will focus on a simple pipeline

00:03:22,360 --> 00:03:30,860
with the conversion to into templates

00:03:28,010 --> 00:03:33,860
so it's you know it typically what do

00:03:30,860 --> 00:03:36,080
you need by plan templates there are

00:03:33,860 --> 00:03:38,299
best practices in your organization that

00:03:36,080 --> 00:03:41,330
you want to share every organization

00:03:38,299 --> 00:03:44,180
will have certain way of doing their

00:03:41,330 --> 00:03:46,459
workflow some kind of permission

00:03:44,180 --> 00:03:48,799
management authorization policies that

00:03:46,459 --> 00:03:50,450
you want to set and have a certain

00:03:48,799 --> 00:03:52,700
requirements that if you are going to

00:03:50,450 --> 00:03:54,769
production it needs to be a soft

00:03:52,700 --> 00:03:57,379
compliant some policies that you want to

00:03:54,769 --> 00:03:59,420
say all of these will go into your

00:03:57,379 --> 00:04:01,040
pipeline definitions so you would have

00:03:59,420 --> 00:04:03,290
some templates that define what your

00:04:01,040 --> 00:04:07,250
policies are for your enterprise and

00:04:03,290 --> 00:04:10,430
have them coded up so typically you'll

00:04:07,250 --> 00:04:13,819
have a CIS like we were discussing and

00:04:10,430 --> 00:04:17,000
maybe a big stage and then deployment to

00:04:13,819 --> 00:04:18,260
dau or test stages and then you would

00:04:17,000 --> 00:04:20,750
run some kind of a test could be

00:04:18,260 --> 00:04:21,880
automated could be manual and then you

00:04:20,750 --> 00:04:26,120
would have some kind of a judgment

00:04:21,880 --> 00:04:27,830
whether you do a automated verification

00:04:26,120 --> 00:04:30,500
and then judgment or just the judgment

00:04:27,830 --> 00:04:34,550
manual judgment based on the test

00:04:30,500 --> 00:04:35,840
results that you have and the policies

00:04:34,550 --> 00:04:39,110
that you are following and then you

00:04:35,840 --> 00:04:41,180
promote and this promotion then can

00:04:39,110 --> 00:04:44,990
follow certain deployment strategies

00:04:41,180 --> 00:04:49,370
right so you can do a canary deployment

00:04:44,990 --> 00:04:51,860
and then do a rolling update or kennedy

00:04:49,370 --> 00:04:54,320
deployment blue/green update and then

00:04:51,860 --> 00:04:57,349
based on verification whether you can

00:04:54,320 --> 00:05:00,349
then roll back your changes so one of

00:04:57,349 --> 00:05:03,349
the key things here is the failures do

00:05:00,349 --> 00:05:05,000
happen in production when you deploy so

00:05:03,349 --> 00:05:07,520
you should be able to quickly recover

00:05:05,000 --> 00:05:09,950
from the failures so which is where the

00:05:07,520 --> 00:05:12,740
spinnaker provides you a easy rollback

00:05:09,950 --> 00:05:15,470
capability and this rollback depends a

00:05:12,740 --> 00:05:20,539
little bit on the cloud environment that

00:05:15,470 --> 00:05:23,710
you are deploying to or the strategies

00:05:20,539 --> 00:05:23,710
that you are using to deploy

00:05:25,749 --> 00:05:32,330
so but how do we convert this into

00:05:28,520 --> 00:05:34,069
templates in spinnaker as you seen this

00:05:32,330 --> 00:05:37,729
morning the pipeline that you create

00:05:34,069 --> 00:05:41,180
from the UI it's a saved as JSON in the

00:05:37,729 --> 00:05:43,550
backend storage in that JSON each each

00:05:41,180 --> 00:05:46,430
of these stages has a definition that

00:05:43,550 --> 00:05:49,939
goes into it and usually in the

00:05:46,430 --> 00:05:51,439
definition you'd for applying two

00:05:49,939 --> 00:05:53,150
different types of services you would

00:05:51,439 --> 00:05:55,159
have the environment that you are

00:05:53,150 --> 00:05:56,659
deploying to or the artifact that you

00:05:55,159 --> 00:05:59,360
are generating those are the ones that

00:05:56,659 --> 00:06:04,129
you have variables so in this case for

00:05:59,360 --> 00:06:06,580
example in the Jenkins you have the JSON

00:06:04,129 --> 00:06:09,949
that when you create a Jenkins job in

00:06:06,580 --> 00:06:11,960
spinnaker you'll have a definition that

00:06:09,949 --> 00:06:15,259
looks something like this so the job

00:06:11,960 --> 00:06:17,270
name will be the one that the Jenkins

00:06:15,259 --> 00:06:19,249
job that the spinnaker would run as part

00:06:17,270 --> 00:06:20,629
of that pipeline now those are the kind

00:06:19,249 --> 00:06:24,469
of things you would convert them into

00:06:20,629 --> 00:06:26,240
variables so simply you could replace

00:06:24,469 --> 00:06:29,089
that as a template variable structure

00:06:26,240 --> 00:06:30,879
and when you create a pipeline based off

00:06:29,089 --> 00:06:35,870
of template that is the one that gets

00:06:30,879 --> 00:06:40,310
replaced as a service that you want to

00:06:35,870 --> 00:06:41,000
run so similarly for the deployment

00:06:40,310 --> 00:06:44,419
templates

00:06:41,000 --> 00:06:48,050
this again is a kubernetes deployment I

00:06:44,419 --> 00:06:50,599
removed part of the deployment

00:06:48,050 --> 00:06:53,449
definition there but as you can see you

00:06:50,599 --> 00:06:56,539
have the artifact that you want to be

00:06:53,449 --> 00:06:57,919
specified as a variable or you have the

00:06:56,539 --> 00:06:59,449
account that you are specifying as a

00:06:57,919 --> 00:07:02,240
variable you can have multiple clusters

00:06:59,449 --> 00:07:04,249
or accounts that are decorated with

00:07:02,240 --> 00:07:07,310
certain namespaces that have permissions

00:07:04,249 --> 00:07:09,800
to certain groups so you want to specify

00:07:07,310 --> 00:07:11,749
the account that you want to go to and

00:07:09,800 --> 00:07:13,430
the namespace those are the kind of

00:07:11,749 --> 00:07:15,909
things that you would make them into

00:07:13,430 --> 00:07:15,909
variables

00:07:17,610 --> 00:07:24,379
so how do we generate the template there

00:07:20,250 --> 00:07:26,580
a couple of different ways you can

00:07:24,379 --> 00:07:29,699
generate the template the simplest one

00:07:26,580 --> 00:07:32,069
is from the UI you create a pipeline

00:07:29,699 --> 00:07:34,919
that's a typical pipeline that you are

00:07:32,069 --> 00:07:38,250
going to use and then go ahead and say

00:07:34,919 --> 00:07:39,870
create generate a template the spinnaker

00:07:38,250 --> 00:07:43,169
would then give you the definition of

00:07:39,870 --> 00:07:45,930
that template you can save it from the

00:07:43,169 --> 00:07:49,590
UI itself or you can take that and then

00:07:45,930 --> 00:07:52,919
add your variables update that to

00:07:49,590 --> 00:07:54,569
configure for your system and then save

00:07:52,919 --> 00:07:56,280
that as a template so it's one of the

00:07:54,569 --> 00:07:59,130
things that we will see how to generate

00:07:56,280 --> 00:08:04,919
the template from the pipeline that you

00:07:59,130 --> 00:08:12,120
have so the once the template is

00:08:04,919 --> 00:08:15,270
generated you can create pipelines from

00:08:12,120 --> 00:08:17,580
the template and typically the variables

00:08:15,270 --> 00:08:19,530
that you specify if you are doing it

00:08:17,580 --> 00:08:21,509
from the UI it would show something like

00:08:19,530 --> 00:08:23,880
configuration like that it will give you

00:08:21,509 --> 00:08:25,740
all these variables where you can put in

00:08:23,880 --> 00:08:29,069
the values and that becomes your

00:08:25,740 --> 00:08:31,139
pipeline definition from that point on

00:08:29,069 --> 00:08:34,079
you could also all of this is supported

00:08:31,139 --> 00:08:35,430
by API in an organization generally you

00:08:34,079 --> 00:08:37,770
would be onboarding all your

00:08:35,430 --> 00:08:40,829
applications through API so there is a

00:08:37,770 --> 00:08:46,339
tool called spin that you can use your

00:08:40,829 --> 00:08:49,820
own boat on so let's quickly see how

00:08:46,339 --> 00:08:49,820
that looks

00:08:54,490 --> 00:09:02,509
okay so here we have the spinnaker a

00:08:58,040 --> 00:09:04,880
simple pipeline yeah only thing it has

00:09:02,509 --> 00:09:07,639
is this configuration it's coming in and

00:09:04,880 --> 00:09:11,360
then the deployment so here we are

00:09:07,639 --> 00:09:12,829
deploying to one account and an engine X

00:09:11,360 --> 00:09:16,579
a certain version and we are also

00:09:12,829 --> 00:09:19,130
creating service for it so now we want

00:09:16,579 --> 00:09:21,050
to convert that a this pipeline into a

00:09:19,130 --> 00:09:24,199
template and use that template to

00:09:21,050 --> 00:09:29,600
onboard newer services deploying to

00:09:24,199 --> 00:09:31,370
different accounts so if you if you see

00:09:29,600 --> 00:09:33,440
it as a JSON this is how the

00:09:31,370 --> 00:09:36,620
configuration for that account will be

00:09:33,440 --> 00:09:38,750
here I have the definition for the

00:09:36,620 --> 00:09:40,970
deployment here in place but you

00:09:38,750 --> 00:09:42,860
typically you get these from a remote

00:09:40,970 --> 00:09:46,430
location like it that will be an

00:09:42,860 --> 00:09:48,079
artifact based deployment where you have

00:09:46,430 --> 00:09:53,269
the definition itself in the gate which

00:09:48,079 --> 00:09:56,360
can itself be variable so if you want to

00:09:53,269 --> 00:10:00,230
convert that you'll go and say export

00:09:56,360 --> 00:10:02,300
that into a JSON sorry template a what

00:10:00,230 --> 00:10:05,509
it's doing here is it's decorating it

00:10:02,300 --> 00:10:09,829
with a template LD and specifying the

00:10:05,509 --> 00:10:13,600
scope and the rest of it is a pipeline

00:10:09,829 --> 00:10:16,120
definition same JSON that we saw before

00:10:13,600 --> 00:10:19,710
so

00:10:16,120 --> 00:10:19,710
baseness off something

00:10:20,800 --> 00:10:29,949
let me say all the ability to edit this

00:10:23,350 --> 00:10:31,079
now the sources come from SEM or it

00:10:29,949 --> 00:10:33,610
cheap

00:10:31,079 --> 00:10:38,319
you don't edit the JSON it either you

00:10:33,610 --> 00:10:44,290
why what you would do is copy that and

00:10:38,319 --> 00:10:53,319
then edit it from here thank you so when

00:10:44,290 --> 00:10:56,290
I copied it you can say so here you see

00:10:53,319 --> 00:10:58,420
that it's actually using this one

00:10:56,290 --> 00:11:00,459
pipeline template to say so that's

00:10:58,420 --> 00:11:04,089
essentially this is the pipeline

00:11:00,459 --> 00:11:07,709
template definition itself right so it

00:11:04,089 --> 00:11:07,709
doesn't look good here let me just

00:11:08,730 --> 00:11:13,209
yeah it will save it but there you don't

00:11:11,350 --> 00:11:15,790
have the ability to edit to add

00:11:13,209 --> 00:11:18,100
variables to it but you can actually

00:11:15,790 --> 00:11:21,309
save it from there and create pipelines

00:11:18,100 --> 00:11:23,769
from it so what you're asking is like

00:11:21,309 --> 00:11:27,029
let's say export pipeline template so

00:11:23,769 --> 00:11:29,259
you see the name it gave some

00:11:27,029 --> 00:11:31,740
rattlesnake name and you could actually

00:11:29,259 --> 00:11:31,740
save it

00:11:33,620 --> 00:11:38,540
now if you go to the templates you see

00:11:35,570 --> 00:11:40,550
that the template has saved here now you

00:11:38,540 --> 00:11:47,270
can use this template to create a

00:11:40,550 --> 00:11:49,480
pipeline let's say I want to go say my

00:11:47,270 --> 00:11:49,480
app

00:11:58,620 --> 00:12:03,420
so what this one is doing is it does not

00:12:01,170 --> 00:12:06,510
have any variables right so the exact

00:12:03,420 --> 00:12:10,500
same pipeline that we had before is what

00:12:06,510 --> 00:12:12,420
it's going to create this is that so it

00:12:10,500 --> 00:12:16,279
all has the same parameters this is not

00:12:12,420 --> 00:12:16,279
something that we want as a template

00:12:22,000 --> 00:12:25,920
like making nothing

00:12:27,889 --> 00:12:34,139
absolutely yes so the template that we

00:12:30,600 --> 00:12:39,420
created here so the pipeline we created

00:12:34,139 --> 00:12:41,399
he is referencing that template so when

00:12:39,420 --> 00:12:43,470
we go to the definition here the entire

00:12:41,399 --> 00:12:46,319
pipeline definition now is only this

00:12:43,470 --> 00:12:49,889
much right here if you see there is a

00:12:46,319 --> 00:12:52,439
reference it actually is referencing the

00:12:49,889 --> 00:12:54,389
template now if I go in I did that

00:12:52,439 --> 00:12:56,819
template and add an additional stage to

00:12:54,389 --> 00:12:58,980
it the this pipeline will reflect that

00:12:56,819 --> 00:13:02,730
the other thing that you see here is

00:12:58,980 --> 00:13:05,490
that this temp template pipeline is not

00:13:02,730 --> 00:13:07,319
editable by end users so if you want to

00:13:05,490 --> 00:13:09,149
have these as best practices that's

00:13:07,319 --> 00:13:11,759
given to an organization they create

00:13:09,149 --> 00:13:14,579
pipelines from it but you want those

00:13:11,759 --> 00:13:17,160
pipelines to be fixed not editable

00:13:14,579 --> 00:13:21,439
except for the parameters that you allow

00:13:17,160 --> 00:13:24,540
them to edit this is one way to do it so

00:13:21,439 --> 00:13:29,370
now now that this one doesn't allow us

00:13:24,540 --> 00:13:31,410
to you know deploy to different

00:13:29,370 --> 00:13:34,500
environments or have different

00:13:31,410 --> 00:13:38,100
parameters to deploy you want to make

00:13:34,500 --> 00:13:42,920
this into something that has variables

00:13:38,100 --> 00:13:42,920
in it format that a little

00:13:48,930 --> 00:13:55,329
so now you will see that this is exactly

00:13:51,970 --> 00:13:58,060
what it came up we can now go edit the

00:13:55,329 --> 00:14:01,899
name of it and then save this template

00:13:58,060 --> 00:14:06,699
with variables I didn't want to do it

00:14:01,899 --> 00:14:10,060
here online so I'll show you what I

00:14:06,699 --> 00:14:13,540
created it you so I added a couple of

00:14:10,060 --> 00:14:16,779
variables here one of them being the

00:14:13,540 --> 00:14:19,329
account the other one is the target

00:14:16,779 --> 00:14:22,480
namespace so I are now created couple of

00:14:19,329 --> 00:14:25,449
variables to this template that allow me

00:14:22,480 --> 00:14:27,610
allow users who are creating pipelines

00:14:25,449 --> 00:14:34,959
from this template to give their own

00:14:27,610 --> 00:14:38,790
values so algún we can now that going to

00:14:34,959 --> 00:14:38,790
change this and save it

00:14:49,140 --> 00:14:52,339
so I didn't want to die

00:14:55,119 --> 00:15:03,169
so I'm going to save the pipeline

00:14:57,469 --> 00:15:06,009
template and in here now if we go and

00:15:03,169 --> 00:15:06,009
look into templates

00:15:09,420 --> 00:15:16,050
so this is the new one that we just

00:15:10,950 --> 00:15:18,510
created so kubernetes deployment demo

00:15:16,050 --> 00:15:21,990
which has a couple of variables now if i

00:15:18,510 --> 00:15:25,010
want to create a pipeline from it let's

00:15:21,990 --> 00:15:25,010
go do it in the same one

00:15:32,270 --> 00:15:38,029
so it's giving me option now when I'm

00:15:34,580 --> 00:15:40,130
creating the pipeline from it I could go

00:15:38,029 --> 00:15:45,970
change it to use a different account

00:15:40,130 --> 00:15:45,970
different target say

00:15:52,180 --> 00:15:58,150
and so that account doesn't exist so it

00:15:56,290 --> 00:16:01,750
tells me that the account doesn't exist

00:15:58,150 --> 00:16:04,020
but in the definition it has that values

00:16:01,750 --> 00:16:04,020
in it

00:16:07,000 --> 00:16:12,550
the same thing usually what you want to

00:16:09,490 --> 00:16:14,800
do is have this available to developers

00:16:12,550 --> 00:16:18,190
in the templates now the template is in

00:16:14,800 --> 00:16:19,930
spinnaker so as it developers who are

00:16:18,190 --> 00:16:26,290
onboarding their own services they will

00:16:19,930 --> 00:16:29,140
have definition something like this they

00:16:26,290 --> 00:16:30,970
will refer to the template and say I

00:16:29,140 --> 00:16:34,720
want to create for this template and my

00:16:30,970 --> 00:16:38,850
variable values or T's and simply by

00:16:34,720 --> 00:16:38,850
doing that they will say pipelines safe

00:17:00,440 --> 00:17:03,990
so you will see that new pipeline that

00:17:03,150 --> 00:17:06,540
got created

00:17:03,990 --> 00:17:09,120
from template that shows up which has

00:17:06,540 --> 00:17:10,530
the variables that are specified by the

00:17:09,120 --> 00:17:14,730
developers that are onboarding this

00:17:10,530 --> 00:17:18,500
pipeline you can just go run that

00:17:14,730 --> 00:17:18,500
program from here

00:17:20,400 --> 00:17:26,250
so now we have these pipeline template

00:17:23,610 --> 00:17:29,940
based pipelines where the templates are

00:17:26,250 --> 00:17:33,000
predefined the ite or someone who's

00:17:29,940 --> 00:17:34,409
doing the best practices can add to the

00:17:33,000 --> 00:17:36,840
template and all the pipelines that are

00:17:34,409 --> 00:17:43,100
derived from this template get those

00:17:36,840 --> 00:17:45,570
different stages from there right yeah

00:17:43,100 --> 00:17:46,950
so if you go to the details you'll see

00:17:45,570 --> 00:17:49,440
the deployment I haven't changed the

00:17:46,950 --> 00:17:52,649
deployment it shows that so that's

00:17:49,440 --> 00:17:55,830
that's one and then the other way to do

00:17:52,649 --> 00:17:57,899
it is so usually let's say the central

00:17:55,830 --> 00:18:00,230
enterprise you want to control what

00:17:57,899 --> 00:18:03,000
pipelines or applications are on-boarded

00:18:00,230 --> 00:18:06,419
so then you can have the repository of

00:18:03,000 --> 00:18:08,760
these J's arms of these pipelines in

00:18:06,419 --> 00:18:11,970
central place and have the spinnaker

00:18:08,760 --> 00:18:14,210
sink term so for example here we have

00:18:11,970 --> 00:18:16,590
the pipeline JSON definition this

00:18:14,210 --> 00:18:19,860
instead of using the pipeline template

00:18:16,590 --> 00:18:23,330
you could have these definitions stored

00:18:19,860 --> 00:18:26,490
somewhere in a kit and have them sync

00:18:23,330 --> 00:18:35,669
using the spin a simple way to do it is

00:18:26,490 --> 00:18:38,279
have repository setup let's say yeah so

00:18:35,669 --> 00:18:40,980
here I have my repository all the

00:18:38,279 --> 00:18:45,120
pipelines and applications that I see in

00:18:40,980 --> 00:18:49,200
this spinnaker deployment are all synced

00:18:45,120 --> 00:18:51,990
with my kid so let's say I'm looking at

00:18:49,200 --> 00:18:53,159
a pipeline here in the deploy in

00:18:51,990 --> 00:18:58,140
Jeanette's I want to add some

00:18:53,159 --> 00:19:00,320
description to it so I could go open

00:18:58,140 --> 00:19:00,320
that

00:19:15,190 --> 00:19:20,760
okay

00:19:17,840 --> 00:19:23,070
so essentially the idea here is that

00:19:20,760 --> 00:19:29,029
working to deploy let's say I'll change

00:19:23,070 --> 00:19:29,029
the thing and then check it in

00:19:44,360 --> 00:19:49,350
now what we have done is have this

00:19:47,610 --> 00:19:54,090
pipeline definition stored in a remote

00:19:49,350 --> 00:19:57,540
repository and have the repository

00:19:54,090 --> 00:20:01,080
trigger a pipeline which would then go

00:19:57,540 --> 00:20:04,620
update the spinnaker VIN the changes now

00:20:01,080 --> 00:20:09,650
if you look at what we changed this is a

00:20:04,620 --> 00:20:13,620
pipeline sorry which is an application

00:20:09,650 --> 00:20:20,220
multi-cloud demo and it is the pipeline

00:20:13,620 --> 00:20:23,340
that with the name kuben means product

00:20:20,220 --> 00:20:26,550
line so if you go to your application

00:20:23,340 --> 00:20:35,820
and multi-cloud demo and then look at

00:20:26,550 --> 00:20:38,310
prod deploy you'll see that the well it

00:20:35,820 --> 00:20:40,320
still has an updated date takes a minute

00:20:38,310 --> 00:20:42,660
to update but you can see that it gets

00:20:40,320 --> 00:20:46,500
updated this the way we do it is simply

00:20:42,660 --> 00:20:49,170
by having a kit trigger and then use the

00:20:46,500 --> 00:20:51,980
spin API just look at the JSON sin that

00:20:49,170 --> 00:20:54,390
git repo and apply that changes to

00:20:51,980 --> 00:20:57,210
spinnaker so in that way you can keep it

00:20:54,390 --> 00:20:59,340
all in sync with the JSON so you can so

00:20:57,210 --> 00:21:01,980
there are two ways that you do it one is

00:20:59,340 --> 00:21:04,050
you have the pipeline templates you give

00:21:01,980 --> 00:21:06,270
self-service to your developers and they

00:21:04,050 --> 00:21:08,520
are go they're up pipelines using the

00:21:06,270 --> 00:21:10,860
templates or they have you have these je

00:21:08,520 --> 00:21:13,050
sauce that centrally managed to you push

00:21:10,860 --> 00:21:15,920
them into your kid that gets reflected

00:21:13,050 --> 00:21:15,920
onto the spinnaker

00:21:17,400 --> 00:21:22,290
right now other any race conditions in a

00:21:19,710 --> 00:21:24,809
character trying on those templates is

00:21:22,290 --> 00:21:27,110
there any potential for advocacy going

00:21:24,809 --> 00:21:27,110
to have to

00:21:30,150 --> 00:21:36,670
not really so you're asking if pipeline

00:21:34,240 --> 00:21:39,160
is already running then you go and

00:21:36,670 --> 00:21:46,180
update while it is running are there any

00:21:39,160 --> 00:21:48,130
conditions that it will break yes so

00:21:46,180 --> 00:21:51,910
those are all synchronized so you won't

00:21:48,130 --> 00:21:53,260
see that problem that's right so the

00:21:51,910 --> 00:21:56,170
orchestrator takes the pipeline

00:21:53,260 --> 00:21:57,880
definition it knows all the stages that

00:21:56,170 --> 00:22:00,130
are defined it doesn't look for

00:21:57,880 --> 00:22:01,320
individual stages of tasks after it

00:22:00,130 --> 00:22:07,300
starts running

00:22:01,320 --> 00:22:10,420
so though those are taken care of so

00:22:07,300 --> 00:22:16,240
going back so what we have seen is two

00:22:10,420 --> 00:22:19,720
things here one is we went through the

00:22:16,240 --> 00:22:22,630
pipeline template creation from the UI

00:22:19,720 --> 00:22:25,150
take the definition convert that into a

00:22:22,630 --> 00:22:27,250
template add variables to it and create

00:22:25,150 --> 00:22:30,190
a pipeline based on those variables yes

00:22:27,250 --> 00:22:31,929
the template exists in the spinnaker the

00:22:30,190 --> 00:22:33,809
developers or whoever is onboarding

00:22:31,929 --> 00:22:36,670
those services would essentially be

00:22:33,809 --> 00:22:39,160
referencing that pipeline and add

00:22:36,670 --> 00:22:41,679
variables to it the second one is you

00:22:39,160 --> 00:22:45,400
have the complete JSON of the pipeline

00:22:41,679 --> 00:22:47,500
that is defined that you have it in a

00:22:45,400 --> 00:22:50,500
remote repository it changes to those

00:22:47,500 --> 00:22:54,700
pipeline definitions will get reflected

00:22:50,500 --> 00:22:58,390
in spinnaker through sync with the git

00:22:54,700 --> 00:23:03,280
repo it's just a second answer you'll

00:22:58,390 --> 00:23:06,720
use a spin API to iterate through those

00:23:03,280 --> 00:23:06,720
Gigi songs and apply them

00:23:08,759 --> 00:23:14,159
the other one that interesting is with

00:23:11,519 --> 00:23:18,029
this permission model so how does the

00:23:14,159 --> 00:23:21,419
permissions work in spinnaker okay so it

00:23:18,029 --> 00:23:22,710
has this concept of accounts for target

00:23:21,419 --> 00:23:29,059
accounts where you are deploying to the

00:23:22,710 --> 00:23:31,830
cloud so these accounts or essentially

00:23:29,059 --> 00:23:34,440
in case of spin communities you will

00:23:31,830 --> 00:23:35,909
have the namespaces the and the cluster

00:23:34,440 --> 00:23:39,090
that you are associated with and then

00:23:35,909 --> 00:23:41,249
let's say you are connected to LDAP then

00:23:39,090 --> 00:23:44,909
you can specify the groups that are

00:23:41,249 --> 00:23:47,220
allowed to write to it allowed to read

00:23:44,909 --> 00:23:50,929
to it or execute so here the difference

00:23:47,220 --> 00:23:52,830
is that in DevOps kind of a scenario

00:23:50,929 --> 00:23:55,710
operations doesn't want developers to

00:23:52,830 --> 00:23:58,379
operate on those accounts but still want

00:23:55,710 --> 00:24:00,090
the ability to view what is deployed in

00:23:58,379 --> 00:24:01,619
that particular target namespace the

00:24:00,090 --> 00:24:03,629
services they want to be able to debug

00:24:01,619 --> 00:24:05,970
then you would give those accounts just

00:24:03,629 --> 00:24:08,429
the read permissions we want to deploy

00:24:05,970 --> 00:24:13,769
then you would give ability to execute

00:24:08,429 --> 00:24:17,129
on those this applies to all target

00:24:13,769 --> 00:24:19,440
cloud environments and the second one is

00:24:17,129 --> 00:24:21,600
the application permissions itself so in

00:24:19,440 --> 00:24:23,309
the applications here you give

00:24:21,600 --> 00:24:26,100
permissions on who can create pipelines

00:24:23,309 --> 00:24:28,529
within their application who has the

00:24:26,100 --> 00:24:31,350
ability to read or view the pipeline

00:24:28,529 --> 00:24:34,739
executions or pipeline definitions and

00:24:31,350 --> 00:24:36,830
we can execute those pipelines and the

00:24:34,739 --> 00:24:41,070
last one is this pipelines themselves

00:24:36,830 --> 00:24:43,470
these pipelines can have permissions

00:24:41,070 --> 00:24:45,960
their roles that they run with you can

00:24:43,470 --> 00:24:48,210
define those roles under which they run

00:24:45,960 --> 00:24:50,580
so when your incoming trigger comes in

00:24:48,210 --> 00:24:52,799
you need to give it a context in which

00:24:50,580 --> 00:24:55,649
refraction so let's say this is only ops

00:24:52,799 --> 00:24:57,869
group that has permissions to deploy and

00:24:55,649 --> 00:24:59,669
to production and dev has permissions to

00:24:57,869 --> 00:25:02,669
deploy to dev this particular pipeline

00:24:59,669 --> 00:25:04,799
has both dev and ops then you would need

00:25:02,669 --> 00:25:07,019
at least dev permissions for that

00:25:04,799 --> 00:25:10,080
pipeline the context to run to deploy to

00:25:07,019 --> 00:25:12,389
death and and once that does that

00:25:10,080 --> 00:25:15,119
you still need to elevate those

00:25:12,389 --> 00:25:17,639
privileges to offs to be able to deploy

00:25:15,119 --> 00:25:18,600
to production environment so these are

00:25:17,639 --> 00:25:21,150
the

00:25:18,600 --> 00:25:24,540
general permission structure within the

00:25:21,150 --> 00:25:28,290
spinnaker now for these accounts usually

00:25:24,540 --> 00:25:29,940
we provide the ability using service

00:25:28,290 --> 00:25:32,790
accounts so you'd have a service account

00:25:29,940 --> 00:25:35,520
that connects to a cluster but then you

00:25:32,790 --> 00:25:39,860
define permissions on top for the each

00:25:35,520 --> 00:25:42,330
of these DevOps groups with the

00:25:39,860 --> 00:25:49,980
introduction of dynamic accounts in

00:25:42,330 --> 00:25:52,980
spinnaker 15 in 16 actually 1.16 you can

00:25:49,980 --> 00:25:54,660
have more options in defining how these

00:25:52,980 --> 00:25:56,550
accounts are pulled and what service

00:25:54,660 --> 00:26:02,670
accounts they use you can have

00:25:56,550 --> 00:26:04,800
flexibility of setting it up so for the

00:26:02,670 --> 00:26:07,440
permission configuration you can set all

00:26:04,800 --> 00:26:10,620
these permissions everything to the API

00:26:07,440 --> 00:26:12,480
but in the UI this is how it would look

00:26:10,620 --> 00:26:15,890
setting permissions for each one of

00:26:12,480 --> 00:26:15,890
those applications

00:26:18,620 --> 00:26:24,350
and says as we were discussing you can

00:26:21,799 --> 00:26:26,270
have pipeline that has both never

00:26:24,350 --> 00:26:28,520
deployed as well as production deployed

00:26:26,270 --> 00:26:30,260
and you need some kind of a privilege

00:26:28,520 --> 00:26:32,770
escalation or after the policy check

00:26:30,260 --> 00:26:35,900
since then it provides this ability of

00:26:32,770 --> 00:26:37,970
saying that propagate authentication and

00:26:35,900 --> 00:26:39,590
you can also this is a new feature that

00:26:37,970 --> 00:26:42,020
you're adding where you could specify

00:26:39,590 --> 00:26:46,279
which are the groups that actually can

00:26:42,020 --> 00:26:49,130
execute this judgment previously it used

00:26:46,279 --> 00:26:52,490
to be that new production account let's

00:26:49,130 --> 00:26:54,260
say it's guarded by operations anyone

00:26:52,490 --> 00:26:56,450
could give a manual judgment but it

00:26:54,260 --> 00:26:57,799
would fail because they don't have the

00:26:56,450 --> 00:27:00,260
permissions with their authentication

00:26:57,799 --> 00:27:03,140
and now with this you propagate

00:27:00,260 --> 00:27:05,360
authentication but we also restrict who

00:27:03,140 --> 00:27:07,970
can give the manual judgment to it

00:27:05,360 --> 00:27:10,299
allow those services to go through for

00:27:07,970 --> 00:27:10,299
deployment

00:27:13,230 --> 00:27:19,700
so

00:27:15,770 --> 00:27:22,570
and so that's after this then now how do

00:27:19,700 --> 00:27:25,610
you safe deployment strategies so

00:27:22,570 --> 00:27:29,450
spinnaker provides a red-black

00:27:25,610 --> 00:27:33,770
deployment strategy for AWS GCP in in

00:27:29,450 --> 00:27:37,250
the 1.16 that it's a red-black

00:27:33,770 --> 00:27:40,130
deployment or the protocol traffic

00:27:37,250 --> 00:27:44,990
management is introduced with this

00:27:40,130 --> 00:27:47,600
traffic management serve it manages the

00:27:44,990 --> 00:27:49,490
load balancer settings chooses services

00:27:47,600 --> 00:27:53,690
automatically so in your deployment

00:27:49,490 --> 00:27:55,370
manifest but you could specify that you

00:27:53,690 --> 00:27:58,370
don't have to specify the service that

00:27:55,370 --> 00:28:00,500
it connects to but you would say we

00:27:58,370 --> 00:28:01,790
would want to be service let's say in

00:28:00,500 --> 00:28:03,590
this particular case option X

00:28:01,790 --> 00:28:06,650
multi-cloud fraud service is the one

00:28:03,590 --> 00:28:10,460
that manages traffic to my service to my

00:28:06,650 --> 00:28:13,160
deployment one one thing here is that it

00:28:10,460 --> 00:28:15,860
only supports replica sets and it does

00:28:13,160 --> 00:28:18,590
not support the deployments for these

00:28:15,860 --> 00:28:21,710
traffic management so your manifest

00:28:18,590 --> 00:28:24,740
needs to be deploying replica sets and

00:28:21,710 --> 00:28:25,970
not kubernetes deployments part of the

00:28:24,740 --> 00:28:27,380
reason is because deployments

00:28:25,970 --> 00:28:30,650
automatically supports the rolling

00:28:27,380 --> 00:28:33,560
updates and in the replica sets you

00:28:30,650 --> 00:28:37,130
manage your own replica sets in what

00:28:33,560 --> 00:28:40,700
distance doing is this spinnaker goes

00:28:37,130 --> 00:28:43,280
ahead and manages the service selectors

00:28:40,700 --> 00:28:45,410
for the replica sets that you acquire it

00:28:43,280 --> 00:28:47,750
will automatically enable the service

00:28:45,410 --> 00:28:50,600
selector for the service that's managing

00:28:47,750 --> 00:28:52,610
traffic for the new deployment after

00:28:50,600 --> 00:28:54,380
it's become stable and automatically

00:28:52,610 --> 00:28:58,130
removes the service selectors from the

00:28:54,380 --> 00:28:59,660
prior deployment so that way after your

00:28:58,130 --> 00:29:01,910
replica set is stabilized it

00:28:59,660 --> 00:29:04,190
automatically switches entire traffic to

00:29:01,910 --> 00:29:07,220
the new replica set and you here you

00:29:04,190 --> 00:29:09,520
have options to specify whether you want

00:29:07,220 --> 00:29:12,110
to keep the previous replica set around

00:29:09,520 --> 00:29:14,420
how many versions of those replica sets

00:29:12,110 --> 00:29:16,460
you want to keep around and if you want

00:29:14,420 --> 00:29:18,350
to keep that instances of those replicas

00:29:16,460 --> 00:29:21,380
sets running all those options are

00:29:18,350 --> 00:29:24,830
available you know and then those are

00:29:21,380 --> 00:29:26,970
essentially used for ability to rollback

00:29:24,830 --> 00:29:30,240
once you switch the traffic to new

00:29:26,970 --> 00:29:32,429
replica set it's taking traffic and you

00:29:30,240 --> 00:29:33,900
do your verification you decide no this

00:29:32,429 --> 00:29:35,820
is not the right thing for me I want to

00:29:33,900 --> 00:29:37,080
be able to switch it allows you to

00:29:35,820 --> 00:29:39,720
switch back quickly

00:29:37,080 --> 00:29:47,850
and these deployment strategy is

00:29:39,720 --> 00:29:53,909
available with declarative on AWS GCP so

00:29:47,850 --> 00:29:57,360
the next one is the canary is with the

00:29:53,909 --> 00:29:59,520
Canaries it's more like you bring up

00:29:57,360 --> 00:30:02,130
partial set up instances in the new

00:29:59,520 --> 00:30:03,690
version you know you have virtual

00:30:02,130 --> 00:30:07,230
versions running that has four instances

00:30:03,690 --> 00:30:09,299
in the new version you bring up partial

00:30:07,230 --> 00:30:12,419
like one instance there are two is here

00:30:09,299 --> 00:30:14,280
one is if you have something like Sto

00:30:12,419 --> 00:30:15,870
which can do partial traffic management

00:30:14,280 --> 00:30:17,880
you can have a lot more fine-grained

00:30:15,870 --> 00:30:20,220
control you can even bring up all your

00:30:17,880 --> 00:30:23,549
four instances of new version and then

00:30:20,220 --> 00:30:25,380
specify which what I want up traffic you

00:30:23,549 --> 00:30:26,970
want to direct to the other one if you

00:30:25,380 --> 00:30:29,070
don't have that then you could be like

00:30:26,970 --> 00:30:31,500
instance level say you bring up to half

00:30:29,070 --> 00:30:34,080
a percent of your instances and then

00:30:31,500 --> 00:30:36,419
have the traffic taken by the new

00:30:34,080 --> 00:30:38,340
instance along with the production one

00:30:36,419 --> 00:30:40,770
and then you could do a verification on

00:30:38,340 --> 00:30:43,049
that one and say yes this canary

00:30:40,770 --> 00:30:46,080
instance is good and then you promote

00:30:43,049 --> 00:30:48,570
entire thing to production at that point

00:30:46,080 --> 00:30:50,669
you can do Bluegreen promotion the

00:30:48,570 --> 00:30:56,900
entire thing comes up traffic switches

00:30:50,669 --> 00:31:03,630
doing the newer version you can do

00:30:56,900 --> 00:31:06,510
automated analysis so anta is a service

00:31:03,630 --> 00:31:08,070
that comes with spinnaker it's supposed

00:31:06,510 --> 00:31:11,299
multiple data sources so in the

00:31:08,070 --> 00:31:15,000
production if you are the using data dog

00:31:11,299 --> 00:31:18,480
New Relic or Prometheus any one of those

00:31:15,000 --> 00:31:22,159
data sources it can connect it and you

00:31:18,480 --> 00:31:24,659
can specify which metrics you want to

00:31:22,159 --> 00:31:26,700
select as part of your canary

00:31:24,659 --> 00:31:29,250
verification or automated verification

00:31:26,700 --> 00:31:32,039
so it will do the verification on that

00:31:29,250 --> 00:31:33,780
and says if there is any significant

00:31:32,039 --> 00:31:37,029
difference in the new version that you

00:31:33,780 --> 00:31:38,979
are deploying compared to the old one so

00:31:37,029 --> 00:31:41,409
in some cases it can you can even

00:31:38,979 --> 00:31:44,529
specify whether it's a good or bad for

00:31:41,409 --> 00:31:45,969
example the latency lowered latency in

00:31:44,529 --> 00:31:47,529
the new version that you're deploying it

00:31:45,969 --> 00:31:49,209
could be significantly different let's

00:31:47,529 --> 00:31:50,919
say you're doing 200 milliseconds before

00:31:49,209 --> 00:31:54,639
now it's only hundred milliseconds it's

00:31:50,919 --> 00:31:56,619
different but it's good right you can

00:31:54,639 --> 00:32:01,389
specify that it's good then they allow

00:31:56,619 --> 00:32:05,079
you to pass that Kennedy so if you've

00:32:01,389 --> 00:32:08,589
seen that kinda it looks something like

00:32:05,079 --> 00:32:13,509
this the report you can specify which

00:32:08,589 --> 00:32:15,519
metrics you want to choose and between

00:32:13,509 --> 00:32:17,229
the Kennedy and baseline it will compare

00:32:15,519 --> 00:32:20,559
them but it needs to be apples to apples

00:32:17,229 --> 00:32:22,629
character comparison so the underlying

00:32:20,559 --> 00:32:25,209
expectations here are there is the same

00:32:22,629 --> 00:32:28,479
amount of traffic that's going to the

00:32:25,209 --> 00:32:30,999
baseline and the Kennedy and also that

00:32:28,479 --> 00:32:34,389
they're started around the same time

00:32:30,999 --> 00:32:36,249
usually you want to not use the

00:32:34,389 --> 00:32:38,649
instances of the baseline that's been

00:32:36,249 --> 00:32:40,509
running for a long time with the Kennedy

00:32:38,649 --> 00:32:42,639
instance of the queue bring up right now

00:32:40,509 --> 00:32:44,619
because that usually have some

00:32:42,639 --> 00:32:47,919
differences in the memory is utilized

00:32:44,619 --> 00:32:50,109
caching is done and how they respond to

00:32:47,919 --> 00:32:54,309
incoming requests so you want to have

00:32:50,109 --> 00:32:58,539
exact same so the one variation of this

00:32:54,309 --> 00:33:03,519
that we have done is also add logs to

00:32:58,539 --> 00:33:05,499
this analysis for the logs it's slightly

00:33:03,519 --> 00:33:07,959
different because it's not a performance

00:33:05,499 --> 00:33:11,079
based one but more of a functional you

00:33:07,959 --> 00:33:14,619
can have the instance comparison that's

00:33:11,079 --> 00:33:16,809
done not exactly the same time they have

00:33:14,619 --> 00:33:18,849
to come up and not exactly the same

00:33:16,809 --> 00:33:21,219
traffic the similar traffic is better

00:33:18,849 --> 00:33:24,699
but it can do analysis on the function

00:33:21,219 --> 00:33:26,649
functional logs or a period of time and

00:33:24,699 --> 00:33:28,829
identify what if there are any new

00:33:26,649 --> 00:33:31,389
errors in it and highlight them and

00:33:28,829 --> 00:33:33,479
maybe I can quickly show how that looks

00:33:31,389 --> 00:33:33,479
like

00:33:42,850 --> 00:33:51,250
yeah so here is an analysis where we get

00:33:48,460 --> 00:33:53,380
a score based on both logs and metrics

00:33:51,250 --> 00:33:55,509
here it's identifying that in the logs

00:33:53,380 --> 00:33:58,960
there are a couple of errors that you

00:33:55,509 --> 00:34:02,110
can see and it highlights the errors

00:33:58,960 --> 00:34:04,149
that you find in the logs so these are

00:34:02,110 --> 00:34:06,610
the errors that you only see in the

00:34:04,149 --> 00:34:08,200
canary version that you deployed but not

00:34:06,610 --> 00:34:10,389
in the baseline it essentially

00:34:08,200 --> 00:34:14,319
highlights those errors and allows you

00:34:10,389 --> 00:34:17,409
to share the report with the developers

00:34:14,319 --> 00:34:19,240
and quickly come to a resolution if the

00:34:17,409 --> 00:34:22,780
errors are critical enough because they

00:34:19,240 --> 00:34:27,339
just fail you want to roll back and and

00:34:22,780 --> 00:34:30,869
deploy it after this has been fixed so

00:34:27,339 --> 00:34:30,869
this also supports metrics

00:34:54,590 --> 00:34:59,869
[Applause]

00:35:37,970 --> 00:35:44,780
in this use case it expects the spinning

00:35:41,580 --> 00:35:46,980
substances when you are deploying this

00:35:44,780 --> 00:35:49,170
the manifest that you are trying to do

00:35:46,980 --> 00:35:51,000
Bluegreen you are specifying that this

00:35:49,170 --> 00:35:52,620
is a service I want in the definition

00:35:51,000 --> 00:35:56,240
itself so it needs to know that the

00:35:52,620 --> 00:35:56,240
service exists before you deploy

00:35:59,829 --> 00:36:05,210
yeah you need to have it as a to stages

00:36:03,200 --> 00:36:06,769
you could deploy the service you can

00:36:05,210 --> 00:36:08,750
have it in the same pipeline but you

00:36:06,769 --> 00:36:10,539
cannot have it as a same stage you

00:36:08,750 --> 00:36:18,890
deploy your service and then you deploy

00:36:10,539 --> 00:36:20,660
blue green stage for your madness yeah

00:36:18,890 --> 00:36:23,420
that's how we are doing it we're looking

00:36:20,660 --> 00:36:25,509
at ways to improve it one of the things

00:36:23,420 --> 00:36:28,250
that we see is most people actually use

00:36:25,509 --> 00:36:31,490
deployments right open it is time for

00:36:28,250 --> 00:36:34,000
deploying assets so we are also trying

00:36:31,490 --> 00:36:37,480
to see if it makes sense to do that

00:36:34,000 --> 00:36:37,480
support that one also

00:36:50,349 --> 00:36:58,970
blue green updates are quite useful for

00:36:56,500 --> 00:37:01,279
switching the traffic very quickly and

00:36:58,970 --> 00:37:04,910
particularly we are going to be working

00:37:01,279 --> 00:37:07,940
on you steel with those is your service

00:37:04,910 --> 00:37:10,480
mesh enhancements blue green will become

00:37:07,940 --> 00:37:10,480
lot more useful

00:37:14,800 --> 00:37:23,290
we've created when you're routing to

00:37:18,060 --> 00:37:26,280
some portion of you both try to make the

00:37:23,290 --> 00:37:26,280
determination about

00:37:35,040 --> 00:37:42,670
so the tool aspects that we usually see

00:37:39,600 --> 00:37:44,560
in the production there's all there be a

00:37:42,670 --> 00:37:47,110
monitoring system set up and they

00:37:44,560 --> 00:37:49,960
already have some thresholds that they

00:37:47,110 --> 00:37:52,450
set so that you combined with automated

00:37:49,960 --> 00:37:54,370
verification so with the threshold if it

00:37:52,450 --> 00:37:56,650
fails let's say you have a threshold of

00:37:54,370 --> 00:37:59,290
200 milliseconds set for the response

00:37:56,650 --> 00:38:02,440
time and it's doing 300 milliseconds now

00:37:59,290 --> 00:38:04,600
you quickly want to stop there are those

00:38:02,440 --> 00:38:06,640
thresholds exist but this automated

00:38:04,600 --> 00:38:09,250
analysis more on a statistical

00:38:06,640 --> 00:38:09,820
distribution it needs certain amount of

00:38:09,250 --> 00:38:11,950
data

00:38:09,820 --> 00:38:15,790
it can also do large number of metrics

00:38:11,950 --> 00:38:19,030
which are not necessarily your you know

00:38:15,790 --> 00:38:21,220
SLA metrics and this gives you much more

00:38:19,030 --> 00:38:23,980
insight into what is going on to make a

00:38:21,220 --> 00:38:26,170
demented decisions even though your SLA

00:38:23,980 --> 00:38:28,210
is not failing so that's the way the

00:38:26,170 --> 00:38:30,360
automated verification comes into

00:38:28,210 --> 00:38:30,360
picture

00:38:34,900 --> 00:38:38,469
does this thing

00:38:41,270 --> 00:38:46,230
if you have a pure liquid looking at

00:38:43,740 --> 00:38:48,000
metrics yet it's not functional but if

00:38:46,230 --> 00:38:50,220
you combine that with lots you get some

00:38:48,000 --> 00:38:52,320
functional out of it but the matrix the

00:38:50,220 --> 00:38:56,130
automated verification is looking at or

00:38:52,320 --> 00:38:57,780
not just your SLA you could have a bunch

00:38:56,130 --> 00:39:00,960
of other metrics that are added to it

00:38:57,780 --> 00:39:03,030
and you can give weights to them it

00:39:00,960 --> 00:39:05,070
gives you a better picture of how the

00:39:03,030 --> 00:39:08,820
system is performing in some cases you

00:39:05,070 --> 00:39:11,070
could see that the utilization gradient

00:39:08,820 --> 00:39:16,290
but memory is growing but it's still

00:39:11,070 --> 00:39:18,420
between the limits the your SLA is still

00:39:16,290 --> 00:39:20,340
being met but you could predict that

00:39:18,420 --> 00:39:22,740
this is going to break so those kind of

00:39:20,340 --> 00:39:24,690
things it can be caught in the short

00:39:22,740 --> 00:39:26,750
statistical analysis saying these

00:39:24,690 --> 00:39:30,230
metrics look different you should be

00:39:26,750 --> 00:39:30,230
taking a look at

00:39:38,640 --> 00:39:42,140
but where is the functional

00:39:43,410 --> 00:39:49,839
the comparison is still not functional

00:39:46,690 --> 00:39:58,779
testing I mean you're just asking that's

00:39:49,839 --> 00:40:01,299
part of this pipeline yeah there is no

00:39:58,779 --> 00:40:03,849
replacement for testing as part of the

00:40:01,299 --> 00:40:07,119
pipeline that you have we generally put

00:40:03,849 --> 00:40:10,630
in test phase in there only after the

00:40:07,119 --> 00:40:15,880
test is done you then promote it so

00:40:10,630 --> 00:40:18,969
automated tests yes but for you to truly

00:40:15,880 --> 00:40:20,019
do complete C you'd need bunch of

00:40:18,969 --> 00:40:23,109
automated tests and a lot of

00:40:20,019 --> 00:40:26,109
organizations are not there they know

00:40:23,109 --> 00:40:28,210
full confidence with their automated

00:40:26,109 --> 00:40:30,009
tests then they do some manual tests

00:40:28,210 --> 00:40:32,049
they run late autumn editors and then

00:40:30,009 --> 00:40:34,200
run some manual tests and then say okay

00:40:32,049 --> 00:40:34,200
now I

00:40:45,960 --> 00:40:51,020
yeah once your testing is done then the

00:40:48,990 --> 00:40:53,520
certain amount of confidence in your

00:40:51,020 --> 00:40:56,070
software to push through then you would

00:40:53,520 --> 00:40:59,010
go run the automated analysis on top of

00:40:56,070 --> 00:41:01,470
it so you would then do a canary in

00:40:59,010 --> 00:41:02,790
production do an automated analysis if

00:41:01,470 --> 00:41:04,830
the score is good you automatically

00:41:02,790 --> 00:41:07,320
promote because there is a some amount

00:41:04,830 --> 00:41:10,760
of testing already time so yeah it's not

00:41:07,320 --> 00:41:10,760
a replacement for tester

00:41:16,090 --> 00:41:29,470
I didn't talk about the so how are you

00:41:24,550 --> 00:41:43,930
doing on my deployment or is it just you

00:41:29,470 --> 00:41:47,260
mentioned sto right this multi-cloud is

00:41:43,930 --> 00:41:50,350
supported we do one type Lauer with our

00:41:47,260 --> 00:41:52,690
customers so so but then they're two

00:41:50,350 --> 00:41:57,700
different pieces one is can be deployed

00:41:52,690 --> 00:42:01,900
to gke openshift eks within the same

00:41:57,700 --> 00:42:04,390
spinnaker configuration yes can we do

00:42:01,900 --> 00:42:07,090
the same application service deployment

00:42:04,390 --> 00:42:10,450
to different clouds and then manage

00:42:07,090 --> 00:42:13,080
traffic through whistie oh and no we

00:42:10,450 --> 00:42:13,080
don't do that yeah

00:42:20,920 --> 00:42:26,980
I'm sorry you know if there's any

00:42:23,390 --> 00:42:32,780
current or planned support their face

00:42:26,980 --> 00:42:37,760
preference or or simple signing or there

00:42:32,780 --> 00:42:40,070
are discussions to the great face but no

00:42:37,760 --> 00:42:50,930
concrete matter there is an old map

00:42:40,070 --> 00:42:54,490
published signing yeah it's not drawing

00:42:50,930 --> 00:42:54,490
that something

00:43:00,920 --> 00:43:04,569
thank you very much thank you very much

00:43:12,980 --> 00:43:15,040

YouTube URL: https://www.youtube.com/watch?v=RtZGTr9KTUk


