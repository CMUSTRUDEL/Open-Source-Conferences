Title: Chuck Lane "Debugging & Profiling Spinnaker Applications Live! (Salesforce)" - Spinnaker Summit 2019
Publication date: 2019-12-09
Playlist: Spinnaker Summit 2019
Description: 
	The third annual Spinnaker Summit (Diamond Sponsors: Netflix, Google and Armory) was held at the Hard Rock Hotel in San Diego, CA from November 15-17, 2019 and welcomed over 500 members of the rapidly growing Spinnaker open source community.
Captions: 
	00:00:10,410 --> 00:00:15,369
welcome everybody thank you very much

00:00:12,610 --> 00:00:17,259
for joining us today with our introduced

00:00:15,369 --> 00:00:18,490
today Chucky's with Salesforce and he's

00:00:17,259 --> 00:00:29,890
going to be talking about debugging and

00:00:18,490 --> 00:00:31,110
profiling spinnaker applications hi

00:00:29,890 --> 00:00:33,220
everybody

00:00:31,110 --> 00:00:35,559
went through the draft on this I got

00:00:33,220 --> 00:00:36,519
about five slides in before someone in

00:00:35,559 --> 00:00:39,250
the audience asked me if I was

00:00:36,519 --> 00:00:45,610
presenting so hopefully it won't be

00:00:39,250 --> 00:00:47,320
quite that bad I could see it so um well

00:00:45,610 --> 00:00:50,739
first I want to welcome you thank you

00:00:47,320 --> 00:00:51,879
for for coming to the talk just a little

00:00:50,739 --> 00:00:56,140
bit about Who I am

00:00:51,879 --> 00:01:00,250
my name is chuckling I am a lead member

00:00:56,140 --> 00:01:02,979
of our spinnaker service team and my

00:01:00,250 --> 00:01:05,500
talk today is about how to debug in

00:01:02,979 --> 00:01:08,790
profile spinnaker micro-services live

00:01:05,500 --> 00:01:08,790
inside of a kubernetes cluster

00:01:11,750 --> 00:01:18,000
so a few of the things I'm gonna be

00:01:14,070 --> 00:01:19,530
covering today are basically how to get

00:01:18,000 --> 00:01:22,530
started if you want to go in and

00:01:19,530 --> 00:01:26,220
actually give ugh a spinnaker service in

00:01:22,530 --> 00:01:28,710
particular claw driver for this talk so

00:01:26,220 --> 00:01:30,810
we're going to talk about how to use the

00:01:28,710 --> 00:01:34,590
bomb and figure out exactly what version

00:01:30,810 --> 00:01:39,540
of spinnaker image you're running how to

00:01:34,590 --> 00:01:41,460
configure how you're inside the

00:01:39,540 --> 00:01:43,619
kubernetes cluster so that you can

00:01:41,460 --> 00:01:47,040
enable debugging inside the service

00:01:43,619 --> 00:01:49,170
itself configuring IntelliJ in a way

00:01:47,040 --> 00:01:51,840
that will let you connect the debugger

00:01:49,170 --> 00:01:54,810
to the actual service and then where

00:01:51,840 --> 00:01:57,000
it's at the breakpoints the second

00:01:54,810 --> 00:02:00,240
portion of the talk is going to be about

00:01:57,000 --> 00:02:00,690
using a an open source tool called globe

00:02:00,240 --> 00:02:04,369
root

00:02:00,690 --> 00:02:06,450
it's a JVM based profiling library and

00:02:04,369 --> 00:02:09,509
in order to use this you're going to

00:02:06,450 --> 00:02:13,800
need to build a custom image of in this

00:02:09,509 --> 00:02:17,489
case claw driver with the clover binary

00:02:13,800 --> 00:02:22,310
and then basically deploy it into your

00:02:17,489 --> 00:02:22,310
cluster and and connect to it so

00:02:29,049 --> 00:02:32,750
for this slide I want to talk a little

00:02:31,129 --> 00:02:35,810
bit about a little bit about why you

00:02:32,750 --> 00:02:37,700
would do this kind of debugging so you

00:02:35,810 --> 00:02:39,409
know in time time when you're running

00:02:37,700 --> 00:02:42,260
spinnaker production you might come

00:02:39,409 --> 00:02:45,590
across errors in the log that you only

00:02:42,260 --> 00:02:47,840
really reach on the scale in our case as

00:02:45,590 --> 00:02:50,780
we ramped up the number of kubernetes

00:02:47,840 --> 00:02:53,379
clusters that we attach to our spinnaker

00:02:50,780 --> 00:02:55,459
instances we started to come across

00:02:53,379 --> 00:02:57,920
errors from time to time and moment

00:02:55,459 --> 00:03:00,790
would try to reproduce them in dev

00:02:57,920 --> 00:03:03,650
environments they just wouldn't happen

00:03:00,790 --> 00:03:05,780
one one entry particular was related to

00:03:03,650 --> 00:03:11,239
the credentials call so that's one that

00:03:05,780 --> 00:03:13,400
I'm going to gonna be demoing for you as

00:03:11,239 --> 00:03:16,579
we scaled it up it got to be really

00:03:13,400 --> 00:03:18,530
really slow it went from three to six

00:03:16,579 --> 00:03:21,799
seconds maybe all the way up to a minute

00:03:18,530 --> 00:03:23,209
and a half or it was just timeout so you

00:03:21,799 --> 00:03:27,230
know this is kind of what took me down

00:03:23,209 --> 00:03:28,519
this road of figuring out how to hop in

00:03:27,230 --> 00:03:30,290
the debugger and figure out what was

00:03:28,519 --> 00:03:31,760
going on I was just kind of trying to

00:03:30,290 --> 00:03:38,000
get some answers to those questions

00:03:31,760 --> 00:03:39,139
so before we tried to buggin we went

00:03:38,000 --> 00:03:43,879
through we did try a number of

00:03:39,139 --> 00:03:45,859
approaches to to tweak claw driver we we

00:03:43,879 --> 00:03:51,220
tweaked configuration settings we scaled

00:03:45,859 --> 00:03:54,949
the pods we tuned there JVM options I

00:03:51,220 --> 00:03:58,129
read through many many spinnaker github

00:03:54,949 --> 00:04:01,370
issues and talked to Eric and a lot of

00:03:58,129 --> 00:04:03,829
other members of the community when we

00:04:01,370 --> 00:04:06,709
built tools to kind of get an idea of

00:04:03,829 --> 00:04:08,959
what was going on track our metrics see

00:04:06,709 --> 00:04:12,459
how quickly things are responding and

00:04:08,959 --> 00:04:14,900
went from there but none of it worked so

00:04:12,459 --> 00:04:17,900
at the end what we ended up doing is

00:04:14,900 --> 00:04:21,909
figuring out how we could build our own

00:04:17,900 --> 00:04:21,909
images and and kind of get this done

00:04:24,880 --> 00:04:29,920
so are you gonna do this the first thing

00:04:28,780 --> 00:04:31,630
you're going to need to do is you're

00:04:29,920 --> 00:04:37,780
going to need to clone your claw driver

00:04:31,630 --> 00:04:39,640
code down to your system once you do

00:04:37,780 --> 00:04:42,400
that then you're going to need to know

00:04:39,640 --> 00:04:43,990
how to get to the actual commit for the

00:04:42,400 --> 00:04:48,220
image of cloud driver that you're using

00:04:43,990 --> 00:04:50,260
so I'm gonna go ahead and demonstrate

00:04:48,220 --> 00:04:51,610
this live just because I'm actually more

00:04:50,260 --> 00:04:59,110
comfortable doing that talking through

00:04:51,610 --> 00:05:02,070
slides so basically here I've got the

00:04:59,110 --> 00:05:02,070
cloud driver source code

00:05:04,199 --> 00:05:06,620
and

00:05:09,500 --> 00:05:14,960
see so for example if we wanted to

00:05:13,400 --> 00:05:18,800
connect the debugger to this particular

00:05:14,960 --> 00:05:20,300
instance in our case well we use how

00:05:18,800 --> 00:05:23,780
you're to deploy it in a lot of ways and

00:05:20,300 --> 00:05:25,460
so I deploy spinnaker so to get the

00:05:23,780 --> 00:05:28,700
actual commit that you're going to be

00:05:25,460 --> 00:05:34,480
using for a particular image what you're

00:05:28,700 --> 00:05:34,480
going to do is jump to your how your pod

00:05:42,120 --> 00:05:45,710
and then there's a great command

00:05:50,100 --> 00:05:53,240
the difference

00:05:58,940 --> 00:06:04,630
how version bomb and so basically with

00:06:02,180 --> 00:06:06,950
this it's going to give you an idea of

00:06:04,630 --> 00:06:09,470
what version you're actually deploying

00:06:06,950 --> 00:06:11,840
out to your well kubernetes cluster

00:06:09,470 --> 00:06:13,610
where you're running spinnaker and then

00:06:11,840 --> 00:06:16,630
it's going to give you a list of each of

00:06:13,610 --> 00:06:20,240
the commits and the associated images

00:06:16,630 --> 00:06:22,010
which will help you navigate your copy

00:06:20,240 --> 00:06:24,320
of the code to the actual code the whole

00:06:22,010 --> 00:06:28,790
line with what's the image you're trying

00:06:24,320 --> 00:06:30,770
to debug so in this case we're

00:06:28,790 --> 00:06:33,260
interested in claw driver and the

00:06:30,770 --> 00:06:41,900
commitment question is this long hash

00:06:33,260 --> 00:06:46,070
code here so we'll go back to where we

00:06:41,900 --> 00:06:49,060
have the source code and we'll pretend

00:06:46,070 --> 00:06:49,060
this was on master

00:06:58,319 --> 00:07:05,960
and check out the commit way

00:07:13,720 --> 00:07:19,280
so now we've cloned the source code and

00:07:17,020 --> 00:07:21,350
we figured out how to get to the

00:07:19,280 --> 00:07:23,750
particular commit the next step is to

00:07:21,350 --> 00:07:30,740
configure IntelliJ in a way we're going

00:07:23,750 --> 00:07:34,510
to be able to debug into it so here I've

00:07:30,740 --> 00:07:34,510
got a copy of IntelliJ

00:07:37,389 --> 00:07:43,889
open it up and in my case I already have

00:07:41,259 --> 00:07:46,599
the claw driver code loaded

00:07:43,889 --> 00:07:49,330
that's not something done before you

00:07:46,599 --> 00:07:51,939
know there are some gotchas to get there

00:07:49,330 --> 00:07:53,979
but it's certainly doable for for

00:07:51,939 --> 00:07:56,129
anybody who wants to to learn how to do

00:07:53,979 --> 00:07:56,129
it

00:08:01,630 --> 00:08:07,160
at this point what we need to do is go

00:08:04,520 --> 00:08:09,650
in and actually define a profile that

00:08:07,160 --> 00:08:18,260
will allow us to run the debug it inside

00:08:09,650 --> 00:08:21,560
of IntelliJ so to do that you can go up

00:08:18,260 --> 00:08:24,980
here to run and you can edit your run

00:08:21,560 --> 00:08:30,200
configurations and then there's a great

00:08:24,980 --> 00:08:31,910
template right here for remote and in

00:08:30,200 --> 00:08:34,159
this case what you need to know is you

00:08:31,910 --> 00:08:37,520
need to know what ports the debugger all

00:08:34,159 --> 00:08:40,060
run on on the spinnaker service that you

00:08:37,520 --> 00:08:40,060
want to debug

00:08:45,990 --> 00:08:55,649
so for that info spinnaker is nice

00:08:50,050 --> 00:08:55,649
enough to put together a webpage

00:09:05,140 --> 00:09:08,400
ain't look it's evening

00:09:12,290 --> 00:09:22,079
and here down at the bottom there are

00:09:20,250 --> 00:09:23,790
basic instructions on more or less how

00:09:22,079 --> 00:09:26,220
to do what I'm talking in the first part

00:09:23,790 --> 00:09:28,889
of this talk about and then there's a

00:09:26,220 --> 00:09:30,720
list of each of the services and the

00:09:28,889 --> 00:09:32,550
associated port that you're going to

00:09:30,720 --> 00:09:36,800
want to connect that a bugger to to

00:09:32,550 --> 00:09:39,899
debug this in general it's it's a

00:09:36,800 --> 00:09:41,370
hundred yeah one hundred more than

00:09:39,899 --> 00:09:44,040
whatever the port is that the service

00:09:41,370 --> 00:09:46,769
runs on so like claw driver by default

00:09:44,040 --> 00:09:51,540
run seven zero zero two debugging on

00:09:46,769 --> 00:09:54,120
seven 102 front fifty eighty eighty

00:09:51,540 --> 00:09:56,480
eighty one eighty so they all follow

00:09:54,120 --> 00:09:56,480
that pattern

00:10:00,040 --> 00:10:09,920
so the next thing that we need to do is

00:10:04,340 --> 00:10:12,350
actually go and update our command-line

00:10:09,920 --> 00:10:14,410
argument with the appropriate port and

00:10:12,350 --> 00:10:19,130
then we need to make sense of these

00:10:14,410 --> 00:10:22,580
commands it kind of what they do so as

00:10:19,130 --> 00:10:23,750
far as I mean the first part of this

00:10:22,580 --> 00:10:27,080
just basically tell us how you're gonna

00:10:23,750 --> 00:10:29,780
talk to the service and this case over a

00:10:27,080 --> 00:10:30,890
socket so that's relatively

00:10:29,780 --> 00:10:32,720
self-explanatory

00:10:30,890 --> 00:10:35,480
it does run a server that's gonna allow

00:10:32,720 --> 00:10:38,330
you to connect and then this suspend no

00:10:35,480 --> 00:10:41,420
or yes is somewhat important so if you

00:10:38,330 --> 00:10:43,790
need to start up the service and you

00:10:41,420 --> 00:10:45,800
need to debug any part of the startup

00:10:43,790 --> 00:10:47,750
then you're gonna want to set suspend

00:10:45,800 --> 00:10:50,390
date yes because basically what it does

00:10:47,750 --> 00:10:52,010
then is it will not start the service

00:10:50,390 --> 00:10:54,770
until you connect with the bugger to it

00:10:52,010 --> 00:10:58,400
this can come in handy if you are trying

00:10:54,770 --> 00:11:00,560
to debug startup issues you know what

00:10:58,400 --> 00:11:04,370
don't really want to set complex

00:11:00,560 --> 00:11:06,320
breakpoints whatever but for the

00:11:04,370 --> 00:11:08,570
purposes of this I'm just gonna stick

00:11:06,320 --> 00:11:11,260
with a simple example choose no for

00:11:08,570 --> 00:11:11,260
suspend

00:11:14,720 --> 00:11:23,750
and copy this so now that we have the

00:11:22,040 --> 00:11:25,700
basic command-line arguments that we're

00:11:23,750 --> 00:11:27,890
going to need to pass to the JVM we need

00:11:25,700 --> 00:11:30,880
to figure out a way to launch the

00:11:27,890 --> 00:11:33,140
spinnaker services with those arguments

00:11:30,880 --> 00:11:37,220
there are a couple different options for

00:11:33,140 --> 00:11:38,630
doing this so for the purposes of this

00:11:37,220 --> 00:11:42,610
one I'm going to show how to do it via

00:11:38,630 --> 00:11:45,800
how your for those of you that use that

00:11:42,610 --> 00:11:49,310
so basically you're gonna need to jump

00:11:45,800 --> 00:11:55,430
into whatever pod you use for how your

00:11:49,310 --> 00:12:01,370
door however you run it and then go into

00:11:55,430 --> 00:12:03,650
your service settings and then there

00:12:01,370 --> 00:12:09,800
will if there's not already you can

00:12:03,650 --> 00:12:13,130
create a claw driver dot yml in here

00:12:09,800 --> 00:12:14,680
you've got your Java options which are

00:12:13,130 --> 00:12:16,850
part of the environment variables that

00:12:14,680 --> 00:12:22,780
you can pass in when it starts to

00:12:16,850 --> 00:12:26,110
service and you can pretty easily just

00:12:22,780 --> 00:12:26,110
add it here

00:12:28,310 --> 00:12:31,930
and go ahead and save your file

00:12:33,640 --> 00:12:44,440
once you've done that you can use

00:12:37,360 --> 00:12:47,220
halyard to redeploy the service that

00:12:44,440 --> 00:12:47,220
you've updated

00:13:14,740 --> 00:13:19,180
so there's some trade-offs for this if

00:13:16,890 --> 00:13:20,830
if you wanted to make changes long term

00:13:19,180 --> 00:13:22,330
if you were setting up a dev instance

00:13:20,830 --> 00:13:24,490
where you always wanted to be Diplo be

00:13:22,330 --> 00:13:25,510
able to debug the new would probably

00:13:24,490 --> 00:13:28,720
want to do something like this in

00:13:25,510 --> 00:13:30,460
halyard if you you know we're trying to

00:13:28,720 --> 00:13:32,200
debug something in production you wanted

00:13:30,460 --> 00:13:34,180
to be short-term then you're probably

00:13:32,200 --> 00:13:38,010
just edit the deployment directly so

00:13:34,180 --> 00:13:38,010
I'll go over that in the next half

00:13:43,740 --> 00:13:52,400
so after you've done this you're gonna

00:13:47,430 --> 00:14:00,060
need to wait for the claw diver pod to

00:13:52,400 --> 00:14:01,950
come up and be available and we can all

00:14:00,060 --> 00:14:04,100
thank Eric for this because it's faster

00:14:01,950 --> 00:14:04,100
now

00:14:07,120 --> 00:14:10,320
[Music]

00:14:16,180 --> 00:14:34,380
[Music]

00:14:18,470 --> 00:14:36,150
supposedly no I saw 16 things um that's

00:14:34,380 --> 00:14:39,720
so one of these the monitoring daemon

00:14:36,150 --> 00:14:45,050
and the other is proxy stuff related so

00:14:39,720 --> 00:14:45,050
no out of school

00:14:50,810 --> 00:14:55,490
so if you're curious and you want to see

00:14:52,790 --> 00:14:58,730
just to make sure that your settings

00:14:55,490 --> 00:15:07,220
have actually gotten in there of course

00:14:58,730 --> 00:15:09,710
you can always go in here and actually

00:15:07,220 --> 00:15:12,070
take a look at the animal for the pot

00:15:09,710 --> 00:15:12,070
itself

00:15:19,850 --> 00:15:26,530
and if you get on here to your JVM

00:15:22,040 --> 00:15:31,190
options you can see here where the

00:15:26,530 --> 00:15:33,350
debugging JVM options has been added to

00:15:31,190 --> 00:15:35,360
this pods deployment meaning that when

00:15:33,350 --> 00:15:38,470
it comes up and it's available we'll be

00:15:35,360 --> 00:15:38,470
able to click the debugger to it

00:15:49,840 --> 00:15:52,960
so while we're waiting I'll talk a

00:15:51,490 --> 00:15:55,690
little bit about claw driver coat and

00:15:52,960 --> 00:15:57,100
how to kind of figure out where you're

00:15:55,690 --> 00:15:57,940
going to be hitting the debugger or

00:15:57,100 --> 00:15:58,330
where you're gonna be setting the

00:15:57,940 --> 00:16:00,370
debugger

00:15:58,330 --> 00:16:02,230
so I'm entering the credentials call a

00:16:00,370 --> 00:16:05,380
little bit earlier and basically what

00:16:02,230 --> 00:16:08,320
that is is a call to claw driver uses to

00:16:05,380 --> 00:16:09,730
have a list of active where it gets the

00:16:08,320 --> 00:16:12,370
list of accounts and it's used all over

00:16:09,730 --> 00:16:15,490
the spinnaker ecosystem basically

00:16:12,370 --> 00:16:16,900
anytime one of the micro services is

00:16:15,490 --> 00:16:19,300
curious about what accounts are

00:16:16,900 --> 00:16:21,580
available and what it might execute on

00:16:19,300 --> 00:16:24,370
it hits the credentials endpoint and Cod

00:16:21,580 --> 00:16:27,300
driver to get a list of what the account

00:16:24,370 --> 00:16:30,510
names are what provider they're using

00:16:27,300 --> 00:16:33,550
and just some other general information

00:16:30,510 --> 00:16:37,060
so cloud ever like a lot of the services

00:16:33,550 --> 00:16:39,700
are is laid out in such a way where

00:16:37,060 --> 00:16:43,360
there's a dash web folder and inside of

00:16:39,700 --> 00:16:47,970
that is if you drill down into the Java

00:16:43,360 --> 00:16:50,950
source code it's an MVC pattern right so

00:16:47,970 --> 00:16:54,750
you know you've got your applications

00:16:50,950 --> 00:16:57,700
controller cache controller and then

00:16:54,750 --> 00:17:02,650
here the one I'm interested in your

00:16:57,700 --> 00:17:05,380
credentials controller so once you open

00:17:02,650 --> 00:17:08,500
up the credentials controller you can

00:17:05,380 --> 00:17:13,810
look for something that has a request

00:17:08,500 --> 00:17:16,630
method of get and I'm at the decoration

00:17:13,810 --> 00:17:19,630
that's just a list you know in this case

00:17:16,630 --> 00:17:23,140
here at the top this is the one that

00:17:19,630 --> 00:17:27,000
just gets hit when when the claw drivers

00:17:23,140 --> 00:17:27,000
slash credentials call gets made

00:17:29,510 --> 00:17:40,809
and rub alright so one final thing that

00:17:35,330 --> 00:17:40,809
we need to do before we're ready to

00:17:42,100 --> 00:17:50,750
attach is to actually forward the port

00:17:47,840 --> 00:17:53,860
from our local machine to the kubernetes

00:17:50,750 --> 00:17:53,860
pot that's running in the cluster

00:17:53,980 --> 00:18:00,760
so to do this will make use of the

00:17:56,480 --> 00:18:00,760
built-in coop CTL port forward command

00:18:03,970 --> 00:18:10,400
and in this case I'm actually going to

00:18:08,360 --> 00:18:15,200
forward two ports so I'm going to run it

00:18:10,400 --> 00:18:18,950
twice run for 471 o2 to handle the

00:18:15,200 --> 00:18:23,450
debugging traffic and then I'm going to

00:18:18,950 --> 00:18:28,210
port forward 7,000 to so that I have an

00:18:23,450 --> 00:18:28,210
easy way to hit this pot directly

00:18:49,470 --> 00:18:52,880
but if my magnet go

00:19:03,389 --> 00:19:10,609
all right so if we check we'll be able

00:19:07,169 --> 00:19:14,459
to see that both of those are running

00:19:10,609 --> 00:19:16,820
and now we need to go in and we'll

00:19:14,459 --> 00:19:23,119
actually be able to connect the bugger

00:19:16,820 --> 00:19:27,599
so to do this basically go to run and

00:19:23,119 --> 00:19:30,089
then debug and you can choose the

00:19:27,599 --> 00:19:33,019
unnamed configuration that I showed you

00:19:30,089 --> 00:19:33,019
how to define earlier

00:19:37,710 --> 00:19:43,560
so you'll see here that we've connected

00:19:39,690 --> 00:19:47,780
to the target instance and and I'm

00:19:43,560 --> 00:19:47,780
already getting hit on old breakpoints

00:19:49,280 --> 00:20:01,610
so if we go down here we can curl

00:19:54,920 --> 00:20:01,610
localhost credentials

00:20:03,370 --> 00:20:12,490
sure that was mine or not yeah I was too

00:20:06,039 --> 00:20:15,340
fast and here you can see hit the

00:20:12,490 --> 00:20:17,110
breakpoint inside the code and we have

00:20:15,340 --> 00:20:18,490
all the functionality that you would

00:20:17,110 --> 00:20:21,879
expect if you were debugging the code

00:20:18,490 --> 00:20:24,580
locally so you've got your ability to

00:20:21,879 --> 00:20:27,059
look at your local variables you can

00:20:24,580 --> 00:20:27,059
step into

00:20:33,200 --> 00:20:39,119
particular methods and and do anything

00:20:36,269 --> 00:20:49,349
that you need may need to do to explore

00:20:39,119 --> 00:20:51,709
why a particular error is occurring and

00:20:49,349 --> 00:20:54,029
intelligence got a pretty robust system

00:20:51,709 --> 00:20:58,559
around if you know you want to set

00:20:54,029 --> 00:21:00,479
conditional breakpoints or if you it's

00:20:58,559 --> 00:21:02,159
come in handy a couple times if you're

00:21:00,479 --> 00:21:04,799
having a particular exception and you're

00:21:02,159 --> 00:21:07,049
not sure exactly where it comes from of

00:21:04,799 --> 00:21:09,029
course you can go in here and make the

00:21:07,049 --> 00:21:11,459
debugger break for a particular

00:21:09,029 --> 00:21:19,109
exception just like just like you would

00:21:11,459 --> 00:21:21,119
if you're running it locally so yeah so

00:21:19,109 --> 00:21:22,619
you can use this to basically determine

00:21:21,119 --> 00:21:25,409
kind of where your bottlenecks are and

00:21:22,619 --> 00:21:30,539
adjust your configuration appropriately

00:21:25,409 --> 00:21:34,139
and then rents in repeat and and that's

00:21:30,539 --> 00:21:37,979
more or less the ins and outs of how you

00:21:34,139 --> 00:21:41,129
get to bugger connected to spinnaker

00:21:37,979 --> 00:21:43,889
watts running are there any questions

00:21:41,129 --> 00:21:46,909
about that particular part before I move

00:21:43,889 --> 00:21:46,909
on to profiling

00:21:54,340 --> 00:22:03,170
all right and I don't think I needed too

00:21:59,720 --> 00:22:06,910
many of these slides because I didn't

00:22:03,170 --> 00:22:06,910
lose connectivity so we're good there

00:22:12,890 --> 00:22:18,410
all right so now on do profiling with

00:22:16,049 --> 00:22:21,360
with Glover in this case

00:22:18,410 --> 00:22:24,020
like I said Glo root is an open source

00:22:21,360 --> 00:22:28,620
another open source JVM profiling tool

00:22:24,020 --> 00:22:30,840
and basically what you're going to do is

00:22:28,620 --> 00:22:32,130
somewhat the same process the big

00:22:30,840 --> 00:22:33,720
difference here being that you're

00:22:32,130 --> 00:22:38,780
actually going to need to build a custom

00:22:33,720 --> 00:22:38,780
image that has the global binaries in it

00:22:58,380 --> 00:23:06,179
so in this case I've gone ahead and gone

00:23:03,630 --> 00:23:12,630
ahead and downloaded the binaries

00:23:06,179 --> 00:23:15,480
already so they are here the clover jar

00:23:12,630 --> 00:23:17,549
and the grill clover clover root lib I

00:23:15,480 --> 00:23:19,919
just downloaded them directly from the

00:23:17,549 --> 00:23:22,440
website and copied them to a place next

00:23:19,919 --> 00:23:28,169
to the cloud driver source code where it

00:23:22,440 --> 00:23:29,220
kind of made sense so the next thing

00:23:28,169 --> 00:23:32,850
you're going to need to do is actually

00:23:29,220 --> 00:23:34,710
build an compiled cloud driver to do

00:23:32,850 --> 00:23:37,650
that it's a two-step process with the

00:23:34,710 --> 00:23:42,179
newer versions of claw driver basically

00:23:37,650 --> 00:23:45,929
you you build the first the first layer

00:23:42,179 --> 00:23:48,990
with the compile tag and it kind of puts

00:23:45,929 --> 00:23:51,059
everything into there and then you're

00:23:48,990 --> 00:23:53,549
gonna build a second the second layer

00:23:51,059 --> 00:23:56,340
with your own custom docker file where

00:23:53,549 --> 00:24:00,020
you've added in the closure binary so

00:23:56,340 --> 00:24:00,020
for the purpose of this demonstration

00:24:00,049 --> 00:24:03,120
like out of the box when you just clone

00:24:02,700 --> 00:24:06,210
the repo

00:24:03,120 --> 00:24:10,200
you've got the docker file compile the

00:24:06,210 --> 00:24:13,260
slim and naboo tube all I did was copied

00:24:10,200 --> 00:24:19,710
over docker file slim to dr. file glow

00:24:13,260 --> 00:24:22,580
route and then it was relatively easy to

00:24:19,710 --> 00:24:22,580
go down here and

00:24:25,620 --> 00:24:33,179
add in these three lines so this line

00:24:29,400 --> 00:24:35,570
here copies the glow root jar itself to

00:24:33,179 --> 00:24:39,570
a particular location in the container

00:24:35,570 --> 00:24:42,840
this copies the the lid and then finally

00:24:39,570 --> 00:24:45,630
I made the permissions relatively

00:24:42,840 --> 00:24:51,419
permissive for the purpose of this just

00:24:45,630 --> 00:24:54,270
just for the sake of ease so after you

00:24:51,419 --> 00:24:57,360
do this and you've created your doctor

00:24:54,270 --> 00:24:59,880
file then you can go in and build

00:24:57,360 --> 00:25:02,909
spinnaker the cloud driver the same way

00:24:59,880 --> 00:25:06,149
you normally would so you know in this

00:25:02,909 --> 00:25:15,510
case it's it's usually docker build dot

00:25:06,149 --> 00:25:20,240
dash T like a chef docker file flow

00:25:15,510 --> 00:25:20,240
route and call it

00:25:27,470 --> 00:25:35,110
this takes a while so I'm not gonna make

00:25:30,290 --> 00:25:37,940
you guys sit through this but

00:25:35,110 --> 00:25:39,740
alternatively you know if you if you

00:25:37,940 --> 00:25:41,900
wanted to be real lazy about it I guess

00:25:39,740 --> 00:25:43,900
you could you could just reference the

00:25:41,900 --> 00:25:46,190
GCR image that was out there and

00:25:43,900 --> 00:25:47,960
probably add those commands into the end

00:25:46,190 --> 00:25:54,770
of it and build your own that way now

00:25:47,960 --> 00:25:57,410
might work as well but like I said

00:25:54,770 --> 00:25:59,690
basically the couple Alliance you need

00:25:57,410 --> 00:26:02,060
to add are here and then as you're going

00:25:59,690 --> 00:26:03,890
through your doctor build you'll want to

00:26:02,060 --> 00:26:05,570
look for you know that it's actually

00:26:03,890 --> 00:26:10,630
been updated and that it's building a

00:26:05,570 --> 00:26:13,670
new image with with the glower binaries

00:26:10,630 --> 00:26:16,930
so the next thing that you need to do is

00:26:13,670 --> 00:26:19,130
set the service settings for glow root

00:26:16,930 --> 00:26:21,680
in this case I'm going to demonstrate

00:26:19,130 --> 00:26:25,610
basically how that would look inside of

00:26:21,680 --> 00:26:29,560
the deployment itself instead of doing

00:26:25,610 --> 00:26:29,560
it via Howard so

00:26:32,120 --> 00:26:47,000
that's what you can do is coop CTL edit

00:26:38,230 --> 00:26:48,440
- spinnaker deploy spin claw driver and

00:26:47,000 --> 00:26:52,640
here you'll have your claw driver

00:26:48,440 --> 00:26:54,110
deployment and in this case it's going

00:26:52,640 --> 00:26:58,570
to be the same one where we just did the

00:26:54,110 --> 00:26:58,570
debugger so we'll just remove that

00:27:14,910 --> 00:27:17,480
and

00:27:27,690 --> 00:27:36,040
here we'll add in the JVM options for

00:27:32,370 --> 00:27:37,990
the Jade Java agent option basically

00:27:36,040 --> 00:27:41,470
that tells it where the actual blue

00:27:37,990 --> 00:27:42,610
binary is at in addition to this the

00:27:41,470 --> 00:27:45,220
other thing you're going to need to do

00:27:42,610 --> 00:27:48,010
is swap out the image reference and

00:27:45,220 --> 00:27:52,290
point it to the image that you've built

00:27:48,010 --> 00:27:52,290
that actually has the binary in it

00:28:04,340 --> 00:28:14,630
and then you can just update this in

00:28:06,500 --> 00:28:17,620
place and you'll see that the new cloud

00:28:14,630 --> 00:28:17,620
every pod is

00:28:25,490 --> 00:28:28,760
already up and running

00:28:32,580 --> 00:28:35,120
so

00:28:42,900 --> 00:28:48,600
so in this case we don't actually have

00:28:44,670 --> 00:28:50,420
to wait for it to to come up and be

00:28:48,600 --> 00:28:53,850
healthy I don't think before we can

00:28:50,420 --> 00:28:55,380
connect to the blower UI although there

00:28:53,850 --> 00:29:00,090
won't be a lot of traffic until it does

00:28:55,380 --> 00:29:03,840
but anyways the the big difference here

00:29:00,090 --> 00:29:05,580
is that the port is different so we're

00:29:03,840 --> 00:29:10,740
going to use basically the same process

00:29:05,580 --> 00:29:13,130
of coop CTL port forwarding forget the

00:29:10,740 --> 00:29:13,130
pot name

00:29:49,320 --> 00:29:54,900
and okay so clover at the port you need

00:29:53,340 --> 00:29:57,480
to for it by default to support four

00:29:54,900 --> 00:30:00,470
thousand which I'm sure is configurable

00:29:57,480 --> 00:30:00,470
if you really needed it to be

00:30:12,830 --> 00:30:19,690
and so here you can see we've forwarded

00:30:16,100 --> 00:30:23,030
port 4000 and we have access into a

00:30:19,690 --> 00:30:30,800
basic profiling tool that's now running

00:30:23,030 --> 00:30:34,430
on our claw driver pod as this spins up

00:30:30,800 --> 00:30:35,750
and starts to receive some traffic you

00:30:34,430 --> 00:30:39,700
can see some of the endpoints that are

00:30:35,750 --> 00:30:47,180
being hit the health check-in point

00:30:39,700 --> 00:30:50,090
metrics endpoints credentials so from

00:30:47,180 --> 00:30:52,550
inside the profiler you can look at a

00:30:50,090 --> 00:30:54,140
number of different pieces of

00:30:52,550 --> 00:30:56,650
information about the claw driver as

00:30:54,140 --> 00:30:56,650
it's running

00:30:59,380 --> 00:31:02,460
slow traces

00:31:12,140 --> 00:31:20,660
and information about the startup based

00:31:16,460 --> 00:31:22,520
on this you know depending on what the

00:31:20,660 --> 00:31:27,350
issue is that you're trying to solve and

00:31:22,520 --> 00:31:30,260
and kind of what your use case is then

00:31:27,350 --> 00:31:32,600
you can tailor request into it to put

00:31:30,260 --> 00:31:37,850
some load on the end points that you're

00:31:32,600 --> 00:31:41,630
interested in and even take a look at

00:31:37,850 --> 00:31:48,830
errors that may pop up depending on on

00:31:41,630 --> 00:31:52,429
what those are so from here you can take

00:31:48,830 --> 00:31:55,760
a look at a stack trace for an NP that's

00:31:52,429 --> 00:31:58,160
thrown or whatever it is that that

00:31:55,760 --> 00:32:02,990
you're interested in as it relates to

00:31:58,160 --> 00:32:06,049
profiling there's also some information

00:32:02,990 --> 00:32:12,110
in here about the JVM so if there are

00:32:06,049 --> 00:32:15,200
questions about how claw driver uses the

00:32:12,110 --> 00:32:18,799
JVM I could go away we've got some

00:32:15,200 --> 00:32:21,790
gauges here where you can get

00:32:18,799 --> 00:32:21,790
information about that

00:32:31,070 --> 00:32:35,870
and then ultimately if you wanted to run

00:32:33,080 --> 00:32:37,460
this on a larger scale regularly you

00:32:35,870 --> 00:32:41,090
know there's reporting and stuff that's

00:32:37,460 --> 00:32:52,340
built into the profiling tool like you

00:32:41,090 --> 00:32:55,190
would expect so yeah so that's that's

00:32:52,340 --> 00:32:58,940
basically what I have for profiling and

00:32:55,190 --> 00:33:02,870
debugging are there any questions from

00:32:58,940 --> 00:33:05,800
anybody or specific use cases things

00:33:02,870 --> 00:33:05,800
that might be able to answer

00:33:09,400 --> 00:33:12,570
all right

00:33:14,230 --> 00:33:22,140

YouTube URL: https://www.youtube.com/watch?v=DG5BO3PB5a0


