Title: Emily Burns and Rob Fletcher "Managed Delivery: Bringing Infrastructure..." - Spinnaker Summit 2019
Publication date: 2019-12-03
Playlist: Spinnaker Summit 2019
Description: 
	The third annual Spinnaker Summit (Diamond Sponsors: Netflix, Google and Armory) was held at the Hard Rock Hotel in San Diego, CA from November 15-17, 2019 and welcomed over 500 members of the rapidly growing Spinnaker open source community.
Captions: 
	00:00:06,330 --> 00:00:10,980
[Laughter]

00:00:14,130 --> 00:00:21,300
my name is Emily burns I work at netflix

00:00:17,939 --> 00:00:24,349
on spinnaker this is Ron Fletcher he

00:00:21,300 --> 00:00:27,450
also works at netflix on spinnaker

00:00:24,349 --> 00:00:30,109
spinnaker is used at Netflix by almost

00:00:27,450 --> 00:00:33,120
everyone for almost all deployments and

00:00:30,109 --> 00:00:35,519
one of the reasons it's so successful at

00:00:33,120 --> 00:00:38,430
Netflix is because we customized it so

00:00:35,519 --> 00:00:40,260
our team delivery engineering provides

00:00:38,430 --> 00:00:42,989
customization and so do some other

00:00:40,260 --> 00:00:46,469
Netflix teams that make up the general

00:00:42,989 --> 00:00:48,660
runtime platform this customization

00:00:46,469 --> 00:00:50,670
makes things pretty sticky and makes

00:00:48,660 --> 00:00:53,760
spinnaker pretty good for accomplishing

00:00:50,670 --> 00:00:56,070
workflows at Netflix but even with this

00:00:53,760 --> 00:01:01,500
customization and work we're seeing some

00:00:56,070 --> 00:01:04,050
problems so when we first started

00:01:01,500 --> 00:01:06,259
spinnaker five years ago Tamara was a

00:01:04,050 --> 00:01:09,960
big change from the previous tooling and

00:01:06,259 --> 00:01:11,460
helped accomplish the workflows that

00:01:09,960 --> 00:01:13,979
people needed to in a much better way so

00:01:11,460 --> 00:01:16,530
people might have had an application

00:01:13,979 --> 00:01:18,680
represented by this small square and a

00:01:16,530 --> 00:01:20,909
simple pipeline represented by this

00:01:18,680 --> 00:01:24,090
progress bar that kind of looks like a

00:01:20,909 --> 00:01:26,790
pipeline and that was a pretty good

00:01:24,090 --> 00:01:29,159
workflow and our users were probably

00:01:26,790 --> 00:01:32,040
cloud experts and they wanted to control

00:01:29,159 --> 00:01:34,259
every single knob and dial and they knew

00:01:32,040 --> 00:01:38,040
a lot about AWS and that was great we

00:01:34,259 --> 00:01:40,140
expose a lot of AWS things but over the

00:01:38,040 --> 00:01:44,460
past five years things have changed a

00:01:40,140 --> 00:01:47,009
little bit so Netflix has almost tripled

00:01:44,460 --> 00:01:48,360
the number of subscribers we have and

00:01:47,009 --> 00:01:51,540
we've almost doubled the number of

00:01:48,360 --> 00:01:53,909
employees and complexity and scale have

00:01:51,540 --> 00:01:56,399
increased in every area so teams are

00:01:53,909 --> 00:01:58,649
bigger teams are managing more services

00:01:56,399 --> 00:02:01,799
and they have to know more they have to

00:01:58,649 --> 00:02:04,500
integrate with more and that makes the

00:02:01,799 --> 00:02:08,220
picture look a little bit more like this

00:02:04,500 --> 00:02:10,890
so maybe now you're on a team and all of

00:02:08,220 --> 00:02:14,280
you are managing six micro services and

00:02:10,890 --> 00:02:16,680
you have many unique pipelines and we

00:02:14,280 --> 00:02:19,650
hear things like it's hard to keep my

00:02:16,680 --> 00:02:22,109
similar apps up-to-date so maybe each of

00:02:19,650 --> 00:02:23,340
your apps is deployed in several regions

00:02:22,109 --> 00:02:25,470
and has

00:02:23,340 --> 00:02:27,629
environments and let's say you want to

00:02:25,470 --> 00:02:29,400
make a change like at another region or

00:02:27,629 --> 00:02:32,040
change instant size across all your

00:02:29,400 --> 00:02:33,209
applications that's really error-prone

00:02:32,040 --> 00:02:35,040
you have to do a lot of manual

00:02:33,209 --> 00:02:36,870
operations in the UI and you're probably

00:02:35,040 --> 00:02:40,290
going to mess something up that's not

00:02:36,870 --> 00:02:42,870
really fun we also hear questions like

00:02:40,290 --> 00:02:46,290
what's the current best practice people

00:02:42,870 --> 00:02:47,700
get the pipelines that existed as best

00:02:46,290 --> 00:02:49,110
practices when they generated their

00:02:47,700 --> 00:02:51,840
pipelines or when they initially created

00:02:49,110 --> 00:02:56,010
them and that opinion is kind of frozen

00:02:51,840 --> 00:02:58,079
in time so if we deployed in if you

00:02:56,010 --> 00:02:59,310
generated a pipeline that deployed in

00:02:58,079 --> 00:03:01,200
some way you're not going to get

00:02:59,310 --> 00:03:02,790
automatically updated and so you really

00:03:01,200 --> 00:03:06,630
have to figure out what are the new

00:03:02,790 --> 00:03:08,549
features and what you can use people

00:03:06,630 --> 00:03:13,709
also wonder why is this so complicated

00:03:08,549 --> 00:03:16,500
and we see complication in several

00:03:13,709 --> 00:03:19,079
places so first maybe you're just doing

00:03:16,500 --> 00:03:20,970
something complicated maybe you have a

00:03:19,079 --> 00:03:22,560
bunch of shards or you have one master

00:03:20,970 --> 00:03:24,269
pipeline to rule all your other

00:03:22,560 --> 00:03:27,299
pipelines and you're using a lot of

00:03:24,269 --> 00:03:29,700
spell expressions so you might just be

00:03:27,299 --> 00:03:33,000
you might have a complicated pipeline we

00:03:29,700 --> 00:03:34,829
also see complication when you weren't

00:03:33,000 --> 00:03:36,690
the original owner of the pipeline but

00:03:34,829 --> 00:03:39,239
you're now the maintainer and you want

00:03:36,690 --> 00:03:41,609
to know why some decision was made like

00:03:39,239 --> 00:03:44,549
is it necessary to scale my cluster down

00:03:41,609 --> 00:03:47,370
to zero before I deploy my next version

00:03:44,549 --> 00:03:48,660
can things really not run at once it

00:03:47,370 --> 00:03:51,389
might be hard for you to answer that

00:03:48,660 --> 00:03:52,829
question and know if it's a real reason

00:03:51,389 --> 00:03:55,620
or if that's just how someone else

00:03:52,829 --> 00:03:57,930
created the pipeline when we look at

00:03:55,620 --> 00:04:00,450
these pipelines we often ask a different

00:03:57,930 --> 00:04:02,730
question like what are you trying to do

00:04:00,450 --> 00:04:05,819
it's really hard for us to understand

00:04:02,730 --> 00:04:07,410
where our users want to go and how we

00:04:05,819 --> 00:04:12,450
can help them when we don't know what

00:04:07,410 --> 00:04:14,639
the end state of their pipeline is we

00:04:12,450 --> 00:04:17,000
have a simple pipeline it's pretty easy

00:04:14,639 --> 00:04:20,039
to understand where our users want to go

00:04:17,000 --> 00:04:23,130
maybe they start off with an artifact

00:04:20,039 --> 00:04:25,500
and through several steps they want to

00:04:23,130 --> 00:04:28,139
deploy to their test environment that's

00:04:25,500 --> 00:04:30,720
pretty simple to understand but we often

00:04:28,139 --> 00:04:33,000
see pipelines that look maybe a little

00:04:30,720 --> 00:04:34,830
bit more like this and users that say

00:04:33,000 --> 00:04:35,940
things like I'm just trying to figure

00:04:34,830 --> 00:04:39,120
out why my pipe

00:04:35,940 --> 00:04:41,280
is failing right now or the person who

00:04:39,120 --> 00:04:42,510
made this pipeline left and I don't know

00:04:41,280 --> 00:04:46,110
how to change it I don't know what's

00:04:42,510 --> 00:04:56,070
safe to do and mostly our users are

00:04:46,110 --> 00:04:58,620
saying I want things to be easier so

00:04:56,070 --> 00:05:00,330
currently the concept of the pipeline is

00:04:58,620 --> 00:05:01,740
is front and center and spinnaker that's

00:05:00,330 --> 00:05:02,960
the thing you deal with all the time

00:05:01,740 --> 00:05:05,310
that's the thing you're thinking about

00:05:02,960 --> 00:05:07,650
and this is fundamentally an imperative

00:05:05,310 --> 00:05:12,030
viewpoint it's all about steps to get

00:05:07,650 --> 00:05:14,700
from A to B we need to know more than

00:05:12,030 --> 00:05:16,350
that in order to understand what

00:05:14,700 --> 00:05:19,560
somebody is trying to achieve we want to

00:05:16,350 --> 00:05:21,270
reframe this to think about intent if we

00:05:19,560 --> 00:05:22,920
can understand the requirements for an

00:05:21,270 --> 00:05:24,210
artifact to be promoted promoted through

00:05:22,920 --> 00:05:27,320
environments and get safety to

00:05:24,210 --> 00:05:31,140
production we can guide people better in

00:05:27,320 --> 00:05:32,400
achieving that so let's think about what

00:05:31,140 --> 00:05:37,110
this might look on steps this is a

00:05:32,400 --> 00:05:40,560
pretty standard deployment flow so an

00:05:37,110 --> 00:05:43,020
ami gets baked we deploy it to a test

00:05:40,560 --> 00:05:45,240
environment and later smoke tests happen

00:05:43,020 --> 00:05:47,130
Canaries happen and ultimately we

00:05:45,240 --> 00:05:48,450
deployed abroad a lot of teams have

00:05:47,130 --> 00:05:49,710
something logically the same but

00:05:48,450 --> 00:05:51,210
organized differently a lot of teams

00:05:49,710 --> 00:05:55,500
have something more complex in this but

00:05:51,210 --> 00:05:57,900
this is pretty typical and of course the

00:05:55,500 --> 00:05:59,400
complexity is that often this is not

00:05:57,900 --> 00:06:00,990
just one pipeline but it's a series of

00:05:59,400 --> 00:06:02,700
pipelines that follow on from each other

00:06:00,990 --> 00:06:04,290
they're triggering each other or they

00:06:02,700 --> 00:06:06,840
using pipeline stages to call out to

00:06:04,290 --> 00:06:08,340
other pipelines and it can if one of

00:06:06,840 --> 00:06:09,419
these fails it can be hard to notice

00:06:08,340 --> 00:06:11,280
something that's wrong something is

00:06:09,419 --> 00:06:12,900
wrong and it can be hard to take the

00:06:11,280 --> 00:06:14,940
right corrective action to fix it and

00:06:12,900 --> 00:06:17,010
it's also hard to see when you look at

00:06:14,940 --> 00:06:18,810
that executions tab in spinnaker it's

00:06:17,010 --> 00:06:21,480
often hard to see well which of these

00:06:18,810 --> 00:06:24,540
multiple pipelines belong together is

00:06:21,480 --> 00:06:28,050
one logical flow from commit to

00:06:24,540 --> 00:06:30,360
production the information is there but

00:06:28,050 --> 00:06:32,400
we don't organize the the presentation

00:06:30,360 --> 00:06:34,470
in spinnaker itself around their

00:06:32,400 --> 00:06:38,160
information so it's it can be hard to

00:06:34,470 --> 00:06:39,720
trace that and we want people to be able

00:06:38,160 --> 00:06:41,669
to speak to the tool the way they're

00:06:39,720 --> 00:06:43,380
thinking about things we'd like to

00:06:41,669 --> 00:06:47,100
reframe things into thinking about

00:06:43,380 --> 00:06:48,780
intent and requirements so we can

00:06:47,100 --> 00:06:49,540
reframe that same divert that same

00:06:48,780 --> 00:06:52,030
deployment flow

00:06:49,540 --> 00:06:54,670
as well my debian always has to be baked

00:06:52,030 --> 00:06:55,930
into an ami and then pushed into test

00:06:54,670 --> 00:06:57,250
wood and the test environment should

00:06:55,930 --> 00:07:00,100
always have the latest version of the

00:06:57,250 --> 00:07:01,930
code before I go to production it has

00:07:00,100 --> 00:07:04,570
the artifact has to have been smoke

00:07:01,930 --> 00:07:06,130
tested and canary so this is a just a

00:07:04,570 --> 00:07:09,430
different way of looking at exactly the

00:07:06,130 --> 00:07:12,130
same thing and if we as the spinnaker

00:07:09,430 --> 00:07:15,100
team can understand what your intent is

00:07:12,130 --> 00:07:18,510
we can do more to take responsibility

00:07:15,100 --> 00:07:22,030
responsibility for helping you get there

00:07:18,510 --> 00:07:24,070
so obviously Spinnaker's five years old

00:07:22,030 --> 00:07:26,620
now and we didn't expect some of this

00:07:24,070 --> 00:07:29,110
scale when we first started you know it

00:07:26,620 --> 00:07:31,810
was it was great for a lot of our users

00:07:29,110 --> 00:07:33,940
to go to a cluster view where they could

00:07:31,810 --> 00:07:35,320
see all of their regions and accounts at

00:07:33,940 --> 00:07:37,810
once that was an enormous step up from

00:07:35,320 --> 00:07:43,030
Asgard or from the AWS console at the

00:07:37,810 --> 00:07:44,590
time but there there has been as Emily

00:07:43,030 --> 00:07:46,600
pointed out a whole lot of scale within

00:07:44,590 --> 00:07:51,070
the organisation and within the use of

00:07:46,600 --> 00:07:52,390
spinnaker since then Netflix users don't

00:07:51,070 --> 00:07:54,370
always want to make all the decisions

00:07:52,390 --> 00:07:55,870
you know we used to have this assumption

00:07:54,370 --> 00:07:57,160
that everyone touching spinnaker was

00:07:55,870 --> 00:07:59,320
going to be an expert in the cloud an

00:07:57,160 --> 00:08:01,150
expert in security and scaling and

00:07:59,320 --> 00:08:03,970
everything and that's just no longer a

00:08:01,150 --> 00:08:06,310
valid assumption and often the spinnaker

00:08:03,970 --> 00:08:07,990
team ourselves are not best placed to

00:08:06,310 --> 00:08:10,620
answer some of the questions even though

00:08:07,990 --> 00:08:12,580
we're often the first line of support

00:08:10,620 --> 00:08:14,380
people don't want to have to constantly

00:08:12,580 --> 00:08:17,050
update pipelines one recommendations

00:08:14,380 --> 00:08:19,480
change you know we've run entire change

00:08:17,050 --> 00:08:21,400
campaigns around deprecating old

00:08:19,480 --> 00:08:23,380
libraries or trying to get people to

00:08:21,400 --> 00:08:26,650
migrate to new instance types for

00:08:23,380 --> 00:08:28,570
example and people increasingly want to

00:08:26,650 --> 00:08:30,850
be able to define similar configuration

00:08:28,570 --> 00:08:33,310
and infrastructure got across multiple

00:08:30,850 --> 00:08:35,380
homogeneous regions or accounts or even

00:08:33,310 --> 00:08:36,849
apps and you know it's kind of ironic

00:08:35,380 --> 00:08:38,830
that we missed this because spinnaker

00:08:36,849 --> 00:08:40,360
itself is like this it's like a bunch of

00:08:38,830 --> 00:08:42,160
apps that all have extremely similar

00:08:40,360 --> 00:08:45,040
pipelines and extremely similar

00:08:42,160 --> 00:08:46,330
infrastructure and people also want

00:08:45,040 --> 00:08:48,070
guidance in making decisions and

00:08:46,330 --> 00:08:50,350
choosing best practices we have some

00:08:48,070 --> 00:08:52,000
incredible engineers at netflix on

00:08:50,350 --> 00:08:56,290
centralized teams doing things like

00:08:52,000 --> 00:08:57,610
security and capacity planning and for

00:08:56,290 --> 00:09:00,370
our engineers to be able to lean on that

00:08:57,610 --> 00:09:03,110
expertise in making their application

00:09:00,370 --> 00:09:05,780
stand up in the best way possible

00:09:03,110 --> 00:09:06,770
we can address what Dave Hardin was

00:09:05,780 --> 00:09:09,380
talking about in his keynote earlier

00:09:06,770 --> 00:09:13,180
helping engineers build services that

00:09:09,380 --> 00:09:13,180
are far safe and continuously deployed

00:09:13,690 --> 00:09:20,810
so one of the first things we hear quite

00:09:18,440 --> 00:09:23,000
often is that people will not be able to

00:09:20,810 --> 00:09:24,740
store configuration as code this has a

00:09:23,000 --> 00:09:27,500
number of advantages it's super easy to

00:09:24,740 --> 00:09:29,270
review changes it's easier to generate

00:09:27,500 --> 00:09:31,850
things from a base configuration and

00:09:29,270 --> 00:09:37,160
those base configurations and templates

00:09:31,850 --> 00:09:41,150
are shareable people also want help

00:09:37,160 --> 00:09:42,800
deploying things in the right way a the

00:09:41,150 --> 00:09:45,260
ability to share best practices keep up

00:09:42,800 --> 00:09:47,660
and keep on top of updates to those best

00:09:45,260 --> 00:09:49,880
practices and opt in to experts making

00:09:47,660 --> 00:09:52,490
decisions about details so that they

00:09:49,880 --> 00:09:54,320
don't have to they found talk this

00:09:52,490 --> 00:09:55,970
morning about decoupling application

00:09:54,320 --> 00:09:58,400
development from operational expertise

00:09:55,970 --> 00:09:59,720
and that's that's a key concept here now

00:09:58,400 --> 00:10:01,280
manage pipeline templates of rep

00:09:59,720 --> 00:10:02,510
addresses this in part but it doesn't

00:10:01,280 --> 00:10:05,320
have that shifting viewpoint I was

00:10:02,510 --> 00:10:11,630
talking about from the imperative to the

00:10:05,320 --> 00:10:13,990
declarative intent based mindset another

00:10:11,630 --> 00:10:16,130
thing people are increasingly doing is

00:10:13,990 --> 00:10:17,780
defining similar configure cross

00:10:16,130 --> 00:10:19,730
homogeneous infrastructure we have a

00:10:17,780 --> 00:10:22,430
team in in Netflix called mean which

00:10:19,730 --> 00:10:25,540
stands for managed experience the

00:10:22,430 --> 00:10:29,780
maddest of edge who are using MPT

00:10:25,540 --> 00:10:32,990
extensively to to enable their sub teams

00:10:29,780 --> 00:10:34,850
to or the teams that they provide

00:10:32,990 --> 00:10:36,320
services for to manage their

00:10:34,850 --> 00:10:37,910
applications in a very standardized way

00:10:36,320 --> 00:10:39,890
and we want to integrate with them we

00:10:37,910 --> 00:10:41,980
also have a huge amount of expansion on

00:10:39,890 --> 00:10:44,330
the studio side of Netflix recently with

00:10:41,980 --> 00:10:46,520
which have brings a whole different set

00:10:44,330 --> 00:10:51,470
of applications to the table that are

00:10:46,520 --> 00:10:52,610
also trying to use spinnaker so to sum

00:10:51,470 --> 00:10:54,140
up where we want to go we want to lift

00:10:52,610 --> 00:10:56,150
out important concepts for delivery

00:10:54,140 --> 00:10:59,000
which it means artifacts environments

00:10:56,150 --> 00:11:01,400
and how to promote between them we want

00:10:59,000 --> 00:11:04,010
a pivot focus from imperative steps to a

00:11:01,400 --> 00:11:07,640
workflow bait in a workflow to a view

00:11:04,010 --> 00:11:08,810
based on intent spinnaker for example

00:11:07,640 --> 00:11:10,670
already has a few standardized

00:11:08,810 --> 00:11:12,200
deployment strategies but we can

00:11:10,670 --> 00:11:13,460
probably supercharge that approach and

00:11:12,200 --> 00:11:15,670
do more their offer people more

00:11:13,460 --> 00:11:17,620
out-of-the-box options

00:11:15,670 --> 00:11:19,120
and the spinnaker team could then take

00:11:17,620 --> 00:11:21,700
some responsibility for helping people

00:11:19,120 --> 00:11:23,470
get do the whole part of how to deliver

00:11:21,700 --> 00:11:24,940
the changes safely when they can express

00:11:23,470 --> 00:11:26,860
to us the intent they have or where they

00:11:24,940 --> 00:11:28,690
want to get to and we also wouldn't want

00:11:26,860 --> 00:11:29,950
to build on the plug-in effort that some

00:11:28,690 --> 00:11:32,350
of our engineers on the spinnaker team

00:11:29,950 --> 00:11:34,060
like Rob Zena are doing some really

00:11:32,350 --> 00:11:35,920
interesting work on and members of the

00:11:34,060 --> 00:11:37,720
community as well so that we can

00:11:35,920 --> 00:11:39,670
abstract some of the decision making

00:11:37,720 --> 00:11:41,680
involving getting from well this is kind

00:11:39,670 --> 00:11:43,089
of how I want my app to look to the

00:11:41,680 --> 00:11:46,920
fine-grained details of what that really

00:11:43,089 --> 00:11:50,350
means now obvious question might come up

00:11:46,920 --> 00:11:53,260
here why don't you just use some product

00:11:50,350 --> 00:11:56,050
that's already out in the in the in the

00:11:53,260 --> 00:11:58,240
community so Cuba nettings isn't used at

00:11:56,050 --> 00:12:00,310
Netflix we have Titus or in container

00:11:58,240 --> 00:12:02,200
cloud which is optimized around tight

00:12:00,310 --> 00:12:04,149
integration with the Netflix ecosystem

00:12:02,200 --> 00:12:06,910
for permissions and scalability

00:12:04,149 --> 00:12:09,279
stability and scale and operations and

00:12:06,910 --> 00:12:10,899
so on so we're not that's not really an

00:12:09,279 --> 00:12:15,370
option for us but also kubernetes

00:12:10,899 --> 00:12:16,570
doesn't entirely address the it's an

00:12:15,370 --> 00:12:17,890
infrastructure as code tool but it

00:12:16,570 --> 00:12:20,860
doesn't address the delivery portion of

00:12:17,890 --> 00:12:22,870
what we want to achieve here cloud

00:12:20,860 --> 00:12:23,980
foundation and terraform are really

00:12:22,870 --> 00:12:26,290
designed for the first time set up

00:12:23,980 --> 00:12:27,940
they're not optimized around a zero

00:12:26,290 --> 00:12:30,550
downtime changes to existing

00:12:27,940 --> 00:12:32,470
infrastructure managed pipeline

00:12:30,550 --> 00:12:34,269
templates is really interesting helps

00:12:32,470 --> 00:12:38,290
with sharing approaches and templates

00:12:34,269 --> 00:12:39,430
for defining pipelines but it doesn't

00:12:38,290 --> 00:12:40,570
have that shift in viewpoint I was

00:12:39,430 --> 00:12:43,240
talking about but we're really

00:12:40,570 --> 00:12:44,589
interested in seeing how we can use m-

00:12:43,240 --> 00:12:47,610
pipeline templates as kind of that

00:12:44,589 --> 00:12:50,310
supercharged deployment strategies or

00:12:47,610 --> 00:12:52,630
smoke test canary strategies

00:12:50,310 --> 00:12:57,839
verification strategies that I talked

00:12:52,630 --> 00:13:00,310
about a moment ago so what are we doing

00:12:57,839 --> 00:13:02,980
because we can't find what we need an

00:13:00,310 --> 00:13:04,570
existing tool we're building our own

00:13:02,980 --> 00:13:06,850
solution which is a part of spinnaker

00:13:04,570 --> 00:13:08,890
which is all open source as you might

00:13:06,850 --> 00:13:13,540
expect and we're calling it managed

00:13:08,890 --> 00:13:15,190
delivery we also love rainbows so the

00:13:13,540 --> 00:13:18,970
first thing and the foundation of this

00:13:15,190 --> 00:13:20,589
is defining infrastructure as code for

00:13:18,970 --> 00:13:23,560
the platforms that Netflix uses so this

00:13:20,589 --> 00:13:25,790
is AWS and Titus and also allowing

00:13:23,560 --> 00:13:27,830
people to define delivery requirements

00:13:25,790 --> 00:13:29,840
code so not just the static environment

00:13:27,830 --> 00:13:30,860
but how does your software package

00:13:29,840 --> 00:13:32,420
travel through your different

00:13:30,860 --> 00:13:36,470
environments and ultimately end up in

00:13:32,420 --> 00:13:39,140
production building on that we want to

00:13:36,470 --> 00:13:41,090
add functionality to really improve the

00:13:39,140 --> 00:13:43,640
experience around sharing configs as

00:13:41,090 --> 00:13:45,620
best practice updating them and also

00:13:43,640 --> 00:13:47,690
safely rolling out those updates to

00:13:45,620 --> 00:13:49,910
users so it's not really good enough to

00:13:47,690 --> 00:13:51,710
change your best practice and have it

00:13:49,910 --> 00:13:54,200
hit everyone all at once at the same

00:13:51,710 --> 00:13:58,220
time that's not safe we'd like to make

00:13:54,200 --> 00:14:00,170
that safer and then the last thing is

00:13:58,220 --> 00:14:02,180
providing pluggable spots for other

00:14:00,170 --> 00:14:04,070
people to inject their opinions so as

00:14:02,180 --> 00:14:05,840
Rob mentioned we're not experts in

00:14:04,070 --> 00:14:08,450
everything our users aren't experts in

00:14:05,840 --> 00:14:11,240
everything if they want we want to allow

00:14:08,450 --> 00:14:14,750
our users to leverage the opinions of

00:14:11,240 --> 00:14:18,080
other experts of these three distinct

00:14:14,750 --> 00:14:21,020
chunks the first one we've built we're

00:14:18,080 --> 00:14:23,480
working on we're testing the second two

00:14:21,020 --> 00:14:24,980
chunks don't exist yet if they're really

00:14:23,480 --> 00:14:27,410
interesting to you maybe they would be

00:14:24,980 --> 00:14:28,820
helpful your company we'd love for help

00:14:27,410 --> 00:14:32,990
building these building all of them

00:14:28,820 --> 00:14:35,390
really so keep that in mind so more in

00:14:32,990 --> 00:14:37,430
detail about what we built we've been

00:14:35,390 --> 00:14:41,090
talking about this for a while let's see

00:14:37,430 --> 00:14:44,600
what exists so we built a new micro

00:14:41,090 --> 00:14:48,170
service called keel and keel is the

00:14:44,600 --> 00:14:50,570
service that figures out what your

00:14:48,170 --> 00:14:53,660
desired state is check that against your

00:14:50,570 --> 00:14:56,870
current state and also submits tasks to

00:14:53,660 --> 00:14:59,060
Orca to make changes we've also built

00:14:56,870 --> 00:15:01,070
some basic UI support and we have some

00:14:59,060 --> 00:15:03,650
great mocks and designs and vision

00:15:01,070 --> 00:15:05,120
around how this is going to be worked

00:15:03,650 --> 00:15:10,310
into spinnaker UI and how we're gonna

00:15:05,120 --> 00:15:11,900
build better views so let's start with

00:15:10,310 --> 00:15:14,330
some definitions so we're all on the

00:15:11,900 --> 00:15:16,940
same page we're talking about artifacts

00:15:14,330 --> 00:15:19,700
and for us that means a version software

00:15:16,940 --> 00:15:22,450
package that you deploy and for Netflix

00:15:19,700 --> 00:15:25,250
that's a debian or a docker container

00:15:22,450 --> 00:15:26,720
we're talking about resources and we're

00:15:25,250 --> 00:15:28,550
thinking of those like a piece of

00:15:26,720 --> 00:15:30,380
infrastructure that you'll be able to

00:15:28,550 --> 00:15:32,840
manage declaratively and these are

00:15:30,380 --> 00:15:34,610
spinnaker resources so things like load

00:15:32,840 --> 00:15:38,510
balancers security groups or firewall

00:15:34,610 --> 00:15:38,960
rules and clusters the current state and

00:15:38,510 --> 00:15:40,940
that does

00:15:38,960 --> 00:15:42,830
fired state or a pair so the current

00:15:40,940 --> 00:15:44,930
state is the actual state of the

00:15:42,830 --> 00:15:47,330
resource right now it may exist it may

00:15:44,930 --> 00:15:48,560
not exist and the desired state is the

00:15:47,330 --> 00:15:51,530
state that you would like the resource

00:15:48,560 --> 00:15:53,690
to be in at all times and then the spec

00:15:51,530 --> 00:15:55,520
or the resource spec this is the

00:15:53,690 --> 00:15:58,190
user-supplied definition of the resource

00:15:55,520 --> 00:16:00,470
and it might contain abstractions or

00:15:58,190 --> 00:16:03,800
more human readable language it's not

00:16:00,470 --> 00:16:08,600
the fully detailed model that we use in

00:16:03,800 --> 00:16:09,800
cloud driver or that AWS menus so the

00:16:08,600 --> 00:16:11,900
first thing that we've built is

00:16:09,800 --> 00:16:14,780
declarative infrastructure for the

00:16:11,900 --> 00:16:17,240
platforms that Netflix uses so we have

00:16:14,780 --> 00:16:20,330
support for ec2 security groups load

00:16:17,240 --> 00:16:22,700
balancers clusters and tightest clusters

00:16:20,330 --> 00:16:24,380
you'll notice kubernetes is not on this

00:16:22,700 --> 00:16:26,720
list if you're interested in helping us

00:16:24,380 --> 00:16:29,230
again talk to us we'd be so excited

00:16:26,720 --> 00:16:32,510
about that so what did this look like

00:16:29,230 --> 00:16:35,270
here's some shortened yema

00:16:32,510 --> 00:16:37,940
for you to look at and this example is

00:16:35,270 --> 00:16:40,070
an ec2 cluster you'll notice the format

00:16:37,940 --> 00:16:43,310
might look a little familiar kubernetes

00:16:40,070 --> 00:16:45,080
has great API design so we have metadata

00:16:43,310 --> 00:16:47,630
and then we have the spec which is all

00:16:45,080 --> 00:16:49,490
the details about the resource you'll

00:16:47,630 --> 00:16:51,920
notice here that it has a moniker the

00:16:49,490 --> 00:16:55,160
spinnaker concept and it has two

00:16:51,920 --> 00:16:56,660
locations in one account has some launch

00:16:55,160 --> 00:16:58,880
configuration information because it's

00:16:56,660 --> 00:17:05,630
an ec2 cluster and it has some

00:16:58,880 --> 00:17:07,400
dependencies in words and not IDs once

00:17:05,630 --> 00:17:09,440
you have this resource spec that you've

00:17:07,400 --> 00:17:12,080
lovingly crafted your yamo that you'll

00:17:09,440 --> 00:17:14,420
cherish you can get it into spinnaker in

00:17:12,080 --> 00:17:16,040
one of two ways so you can either submit

00:17:14,420 --> 00:17:18,110
it straight to the API

00:17:16,040 --> 00:17:19,720
if you have other tooling that you're

00:17:18,110 --> 00:17:21,650
building on top that generates things

00:17:19,720 --> 00:17:23,750
you're mapping from your own

00:17:21,650 --> 00:17:26,120
configuration language you can submit

00:17:23,750 --> 00:17:28,550
that directly to spinnaker you can also

00:17:26,120 --> 00:17:32,330
do a more get ops flow you can check

00:17:28,550 --> 00:17:34,310
your resource in to get you can set up a

00:17:32,330 --> 00:17:35,990
trigger like a spinnaker pipeline that's

00:17:34,310 --> 00:17:38,590
triggered off get that will submit the

00:17:35,990 --> 00:17:41,150
resources again to the spinnaker API

00:17:38,590 --> 00:17:43,010
keel the micro service is the source of

00:17:41,150 --> 00:17:44,870
truth for these resources we're not

00:17:43,010 --> 00:17:47,210
pulling it we're not looking at that we

00:17:44,870 --> 00:17:48,470
don't want the dependency there so every

00:17:47,210 --> 00:17:50,150
time you make a change to your resource

00:17:48,470 --> 00:17:53,290
if you store it in source control you'll

00:17:50,150 --> 00:17:53,290
have to resubmit it to us

00:17:54,640 --> 00:18:00,200
Keele is a part of the spinnaker

00:17:57,080 --> 00:18:02,570
ecosystem which means that requests go

00:18:00,200 --> 00:18:04,130
through gate into keel Gill has its own

00:18:02,570 --> 00:18:06,560
database where it stores its

00:18:04,130 --> 00:18:08,210
configuration and then qu'il speaks to

00:18:06,560 --> 00:18:11,540
cloud driver to get information about

00:18:08,210 --> 00:18:13,340
the current state and it talks to orca

00:18:11,540 --> 00:18:15,560
to make changes and then Orca talk to

00:18:13,340 --> 00:18:16,910
the cloud driver so all part of the

00:18:15,560 --> 00:18:22,640
familiar eco system we're using

00:18:16,910 --> 00:18:26,390
spinnaker concepts so the heart of keel

00:18:22,640 --> 00:18:29,150
is a resource monitoring loop keel will

00:18:26,390 --> 00:18:30,650
very frequently check the specs that

00:18:29,150 --> 00:18:33,650
you've submitted this human readable

00:18:30,650 --> 00:18:36,440
format and it will get the current and

00:18:33,650 --> 00:18:39,470
the desired state to do that it talks to

00:18:36,440 --> 00:18:41,590
a resource handler a resource handler

00:18:39,470 --> 00:18:44,900
exists for every type of resource and

00:18:41,590 --> 00:18:46,990
it's responsible for doing the specific

00:18:44,900 --> 00:18:49,490
actions that pertain to that resource so

00:18:46,990 --> 00:18:51,950
once keel has the current and desired

00:18:49,490 --> 00:18:54,170
States in a centralized place we take a

00:18:51,950 --> 00:18:56,540
DIF and we figure out is there a

00:18:54,170 --> 00:18:58,130
difference or not at if if there isn't

00:18:56,540 --> 00:19:00,230
we don't have to do anything we can

00:18:58,130 --> 00:19:01,940
check the resource again later if there

00:19:00,230 --> 00:19:04,280
is a DIF we talk back to the resource

00:19:01,940 --> 00:19:10,130
handler and we ask the resource handler

00:19:04,280 --> 00:19:12,620
to result the diff so more about the

00:19:10,130 --> 00:19:15,470
specific resource handlers they have

00:19:12,620 --> 00:19:18,620
three main jobs get the current state

00:19:15,470 --> 00:19:20,810
get the desired state and reconcile any

00:19:18,620 --> 00:19:22,850
deltas so you'll notice they are not

00:19:20,810 --> 00:19:24,770
responsible for when they should check

00:19:22,850 --> 00:19:26,780
things and they're not responsible for

00:19:24,770 --> 00:19:28,280
figuring out if there's a diff so if

00:19:26,780 --> 00:19:29,630
you're implementing a new resource

00:19:28,280 --> 00:19:30,530
handler to support a new resource you

00:19:29,630 --> 00:19:32,360
don't have to worry about that

00:19:30,530 --> 00:19:34,520
centralized CoreLogic you just have to

00:19:32,360 --> 00:19:37,490
implement the current desired and

00:19:34,520 --> 00:19:41,060
resolving a delta so the handler gets

00:19:37,490 --> 00:19:43,430
the resource spec the human readable one

00:19:41,060 --> 00:19:45,460
and translates that into the same model

00:19:43,430 --> 00:19:48,560
for both current and desired state and

00:19:45,460 --> 00:19:52,190
then returns that back to the

00:19:48,560 --> 00:19:54,890
centralized Keele monitoring loop when

00:19:52,190 --> 00:19:57,410
there is a delta the resource handler

00:19:54,890 --> 00:20:00,260
gets the spec but it also gets that

00:19:57,410 --> 00:20:01,850
difference that we've calculated and the

00:20:00,260 --> 00:20:03,679
handler can take specific action for

00:20:01,850 --> 00:20:06,470
that so say

00:20:03,679 --> 00:20:08,179
your cluster was supposed to have a high

00:20:06,470 --> 00:20:11,210
capacity but your teammate didn't no one

00:20:08,179 --> 00:20:12,770
resized it down the resource handler for

00:20:11,210 --> 00:20:14,299
the cluster will get that information

00:20:12,770 --> 00:20:15,559
and it will know that it can just resize

00:20:14,299 --> 00:20:20,200
the cluster it doesn't need to launch

00:20:15,559 --> 00:20:20,200
anyone and it will return the task IDs

00:20:22,450 --> 00:20:27,409
okay so that's infrastructure as code

00:20:25,450 --> 00:20:29,900
which might look familiar to anyone

00:20:27,409 --> 00:20:32,029
who's using kubernetes already but we

00:20:29,900 --> 00:20:34,159
needed to build that to achieve some

00:20:32,029 --> 00:20:37,100
kind of parity on the platform's we're

00:20:34,159 --> 00:20:38,360
using AWS and titus well let's think

00:20:37,100 --> 00:20:40,970
about the really interesting stuff is

00:20:38,360 --> 00:20:42,289
what we're building on top of this and

00:20:40,970 --> 00:20:44,450
we have some concepts here such as

00:20:42,289 --> 00:20:46,850
resolved desired state opinionated

00:20:44,450 --> 00:20:48,440
desired state delivery as code and in

00:20:46,850 --> 00:20:50,470
what environments and promotions so

00:20:48,440 --> 00:20:55,070
let's go through what that means

00:20:50,470 --> 00:20:57,649
resolving desired state enables us to

00:20:55,070 --> 00:21:00,470
use a bunch of smaller components to

00:20:57,649 --> 00:21:01,820
fill in the blanks in a spec so we would

00:21:00,470 --> 00:21:03,740
like people to be able to define specs

00:21:01,820 --> 00:21:06,020
in fairly abstract ways where it's

00:21:03,740 --> 00:21:07,429
appropriate right now there's a fairly

00:21:06,020 --> 00:21:08,960
small amount of abstraction but we'd

00:21:07,429 --> 00:21:11,360
like as we're building more and more of

00:21:08,960 --> 00:21:15,110
Keele out we expect that level of

00:21:11,360 --> 00:21:16,520
abstraction to rise so we want to get to

00:21:15,110 --> 00:21:18,770
a point where somebody can just define a

00:21:16,520 --> 00:21:21,470
cluster as you know I want it to run

00:21:18,770 --> 00:21:23,149
this package I want it to be deployed in

00:21:21,470 --> 00:21:24,260
these regions it needs lots of memory

00:21:23,149 --> 00:21:26,270
I'm not going to tell you the exact

00:21:24,260 --> 00:21:27,830
instance type and it needs to connect to

00:21:26,270 --> 00:21:33,460
these load balancers and these security

00:21:27,830 --> 00:21:35,720
groups and so on we don't ever want

00:21:33,460 --> 00:21:36,980
people to have to deal with IDs of

00:21:35,720 --> 00:21:38,480
things so for example if you've got a

00:21:36,980 --> 00:21:39,740
cluster that spans multiple regions and

00:21:38,480 --> 00:21:41,630
it's connected to a load balancer

00:21:39,740 --> 00:21:43,070
those are balancers may have the same

00:21:41,630 --> 00:21:44,720
name and spinnaker has certain

00:21:43,070 --> 00:21:45,890
assumptions around how things are

00:21:44,720 --> 00:21:48,770
expected to be consistent between

00:21:45,890 --> 00:21:50,270
different regions but they will have

00:21:48,770 --> 00:21:52,220
different IDs in each region we don't

00:21:50,270 --> 00:21:56,059
want people to have to worry about IDs

00:21:52,220 --> 00:21:57,440
of like V pcs or load balancers or

00:21:56,059 --> 00:21:59,210
accounts or anything like that so we

00:21:57,440 --> 00:22:01,039
always deal with with names so the first

00:21:59,210 --> 00:22:02,830
thing that we need to resolve is it's

00:22:01,039 --> 00:22:06,710
like turning friendly names into

00:22:02,830 --> 00:22:07,820
localized region specific IDs but we can

00:22:06,710 --> 00:22:11,600
do more interesting things than that

00:22:07,820 --> 00:22:15,320
with resolution as well we can you know

00:22:11,600 --> 00:22:16,710
let's figure out well what kind of you

00:22:15,320 --> 00:22:18,390
know you say you need

00:22:16,710 --> 00:22:21,630
hiya memory instance type but what does

00:22:18,390 --> 00:22:22,679
that mean in practice today based on the

00:22:21,630 --> 00:22:23,789
current recommendations from our

00:22:22,679 --> 00:22:26,250
capacity planning team

00:22:23,789 --> 00:22:27,120
you say you want version the latest

00:22:26,250 --> 00:22:29,250
version of this software package

00:22:27,120 --> 00:22:32,039
deployed well let's figure out what the

00:22:29,250 --> 00:22:33,899
latest version is and which ami has that

00:22:32,039 --> 00:22:35,760
and what the IDS of that ami in every

00:22:33,899 --> 00:22:37,020
region are and we can plug that into the

00:22:35,760 --> 00:22:39,330
launch configuration of the server

00:22:37,020 --> 00:22:41,460
groups we're going to create and so what

00:22:39,330 --> 00:22:44,220
resolution does is produce the fully

00:22:41,460 --> 00:22:46,289
hydrated final ingrained detail and it

00:22:44,220 --> 00:22:49,260
can be like a many to one relationship

00:22:46,289 --> 00:22:51,360
in a way so a cluster can define can

00:22:49,260 --> 00:22:53,429
resolve to multiple server groups one

00:22:51,360 --> 00:22:56,279
per region and we can dip that whole

00:22:53,429 --> 00:22:58,260
group of things at once against reality

00:22:56,279 --> 00:23:00,090
against the real current state and

00:22:58,260 --> 00:23:02,399
decide whether it's a DIF and then we

00:23:00,090 --> 00:23:05,549
can be smart about taking actions only

00:23:02,399 --> 00:23:07,980
in the regions where their difference

00:23:05,549 --> 00:23:10,679
based on the specifics of the nature of

00:23:07,980 --> 00:23:12,270
the DIF like Emily mentioned earlier we

00:23:10,679 --> 00:23:14,429
can resize for example instead of

00:23:12,270 --> 00:23:17,059
launching your new server group if

00:23:14,429 --> 00:23:19,559
that's the appropriate action to take

00:23:17,059 --> 00:23:20,970
opinionated desired state builds on top

00:23:19,559 --> 00:23:22,649
of this and this is where we kind of

00:23:20,970 --> 00:23:24,720
have the ability to plug in opinions

00:23:22,649 --> 00:23:27,179
from centralized and local centralized

00:23:24,720 --> 00:23:28,919
teams so not all application owners

00:23:27,179 --> 00:23:30,600
they're experts in the cloud the

00:23:28,919 --> 00:23:33,690
spinnaker team are also not experts in

00:23:30,600 --> 00:23:34,919
everything you probably experienced it

00:23:33,690 --> 00:23:36,270
this at your own companies if you're

00:23:34,919 --> 00:23:39,179
trying to encourage people to use

00:23:36,270 --> 00:23:40,590
spinnaker in the right way so you know

00:23:39,179 --> 00:23:42,149
we these are the kind of questions we

00:23:40,590 --> 00:23:43,289
see very often what capacity crank

00:23:42,149 --> 00:23:45,419
that's constraints should I say what

00:23:43,289 --> 00:23:47,669
region should I be in while scaling

00:23:45,419 --> 00:23:49,409
policies will help me deal with my

00:23:47,669 --> 00:23:50,820
traffic variability what instance types

00:23:49,409 --> 00:23:52,049
should I use how should I configure

00:23:50,820 --> 00:23:56,250
security that's something we deal with

00:23:52,049 --> 00:23:57,419
over and over again and we want to build

00:23:56,250 --> 00:24:00,720
something that makes this easier for

00:23:57,419 --> 00:24:02,190
people that's you know let's consume

00:24:00,720 --> 00:24:05,220
those opinions in a pluggable way from

00:24:02,190 --> 00:24:07,260
from the expert teams and resolve

00:24:05,220 --> 00:24:08,580
abstractions in the spec into fine

00:24:07,260 --> 00:24:10,320
ground infrastructure details that

00:24:08,580 --> 00:24:13,320
people don't then need to concern

00:24:10,320 --> 00:24:14,850
themselves with too much and these

00:24:13,320 --> 00:24:17,010
opinions crucially can change over time

00:24:14,850 --> 00:24:19,230
either because your app changes or

00:24:17,010 --> 00:24:21,149
because the received wisdom about the

00:24:19,230 --> 00:24:22,380
best practice changes or just because

00:24:21,149 --> 00:24:23,850
the landscape changes you know for

00:24:22,380 --> 00:24:25,980
example if Netflix goes into a new

00:24:23,850 --> 00:24:28,830
region or if Amazon launches a new

00:24:25,980 --> 00:24:30,240
instance type family we run change

00:24:28,830 --> 00:24:31,470
campaigns around things

00:24:30,240 --> 00:24:33,360
that all the time when we can eliminate

00:24:31,470 --> 00:24:35,190
a class of that just by automatically

00:24:33,360 --> 00:24:37,980
updating people you know right now we

00:24:35,190 --> 00:24:40,860
have to go on reminding people who don't

00:24:37,980 --> 00:24:42,570
deploy their apps so often to rebake

00:24:40,860 --> 00:24:44,220
their Mis because we need to get a new

00:24:42,570 --> 00:24:46,320
base em either has a newer version of

00:24:44,220 --> 00:24:47,850
Java on it for example if we can just

00:24:46,320 --> 00:24:49,320
detect that that diffic sis and

00:24:47,850 --> 00:24:50,520
automatically do it for them and it runs

00:24:49,320 --> 00:24:51,990
through their normal deployment

00:24:50,520 --> 00:24:55,020
processes and just rolls out into their

00:24:51,990 --> 00:24:56,550
environments that saves you know the

00:24:55,020 --> 00:25:00,030
team that runs those change campaigns a

00:24:56,550 --> 00:25:02,040
whole lot of effort so let's look at

00:25:00,030 --> 00:25:04,470
some concrete examples of what resolving

00:25:02,040 --> 00:25:05,730
desired state might look like so for

00:25:04,470 --> 00:25:08,220
example if your spec says something

00:25:05,730 --> 00:25:09,780
high-level like well I don't know what

00:25:08,220 --> 00:25:11,580
availability zones I need to be in I'll

00:25:09,780 --> 00:25:14,370
just be in all of them balance me across

00:25:11,580 --> 00:25:15,870
all of the ones in the region so you can

00:25:14,370 --> 00:25:18,210
just omit that from the spec and this

00:25:15,870 --> 00:25:19,860
exists right now and we'll just figure

00:25:18,210 --> 00:25:21,900
out well what are the availability zones

00:25:19,860 --> 00:25:24,809
in the region's you're targeting in that

00:25:21,900 --> 00:25:30,210
V PC in that subnet and we'll just apply

00:25:24,809 --> 00:25:32,130
all of them resolving the latest version

00:25:30,210 --> 00:25:33,510
of your software is is kind of one of

00:25:32,130 --> 00:25:35,429
the key things that enables us to give

00:25:33,510 --> 00:25:37,559
you the ability to roll out changes to

00:25:35,429 --> 00:25:40,500
your software without having to update

00:25:37,559 --> 00:25:44,460
that spec and sudden resubmit it to our

00:25:40,500 --> 00:25:45,720
qu'il service so we just we just notice

00:25:44,460 --> 00:25:47,550
automatically that there is a new

00:25:45,720 --> 00:25:49,650
version being released and check that

00:25:47,550 --> 00:25:51,780
it's been baked check that it has an ami

00:25:49,650 --> 00:25:54,030
in all the right regions and go on

00:25:51,780 --> 00:25:56,100
launch a bake task if it if it doesn't

00:25:54,030 --> 00:25:57,450
yet and then get the IDS of that and

00:25:56,100 --> 00:25:59,730
plug that into the launch configuration

00:25:57,450 --> 00:26:02,070
so you see you not having to do like

00:25:59,730 --> 00:26:03,390
updates to your yeah mo to say oh I now

00:26:02,070 --> 00:26:05,220
need to deploy this new version of my

00:26:03,390 --> 00:26:09,210
package it just automatically rolls

00:26:05,220 --> 00:26:11,190
through based on a set of rules some of

00:26:09,210 --> 00:26:13,380
the exciting places would love to get to

00:26:11,190 --> 00:26:15,059
with with this capability of injecting

00:26:13,380 --> 00:26:17,040
opinions it's like well you know

00:26:15,059 --> 00:26:19,080
configuring across that Pingris is hard

00:26:17,040 --> 00:26:21,510
so wouldn't it be great if one day we

00:26:19,080 --> 00:26:22,800
could say well my application in the

00:26:21,510 --> 00:26:24,990
spec we could just say well my

00:26:22,800 --> 00:26:27,240
application needs to accept HTTP traffic

00:26:24,990 --> 00:26:29,700
from this other service and we can roll

00:26:27,240 --> 00:26:32,190
lean on our excellent network security

00:26:29,700 --> 00:26:33,750
engineers to figure out what that means

00:26:32,190 --> 00:26:36,120
in terms of load balancers and ingress

00:26:33,750 --> 00:26:38,160
rules on security groups and just to

00:26:36,120 --> 00:26:39,809
find that for people in fine grained

00:26:38,160 --> 00:26:42,169
detail so that they it's a less

00:26:39,809 --> 00:26:44,160
error-prone process and there's less

00:26:42,169 --> 00:26:45,690
kind of failure demand on

00:26:44,160 --> 00:26:47,160
as the centralized team who deal with

00:26:45,690 --> 00:26:50,730
people struggling with that kind of

00:26:47,160 --> 00:26:52,860
thing and one key thing we want to stick

00:26:50,730 --> 00:26:54,480
to you with with manage delivery is that

00:26:52,860 --> 00:26:56,630
you can have as much or as little of

00:26:54,480 --> 00:26:59,250
this as you want if you are a team of

00:26:56,630 --> 00:27:01,500
hardcore cloud experts who want to

00:26:59,250 --> 00:27:04,800
control every last fine-grained detail

00:27:01,500 --> 00:27:06,360
of your infrastructure great the

00:27:04,800 --> 00:27:07,830
capability is there you're not required

00:27:06,360 --> 00:27:09,960
to use these abstractions and these

00:27:07,830 --> 00:27:12,540
pieces of guidance if you don't want to

00:27:09,960 --> 00:27:14,760
but an increasing number of teams of

00:27:12,540 --> 00:27:17,640
engineers and Netflix are not that and

00:27:14,760 --> 00:27:19,260
they would like help and guidance and we

00:27:17,640 --> 00:27:22,680
want to support both of those extremes

00:27:19,260 --> 00:27:24,840
and everything in between as well all

00:27:22,680 --> 00:27:26,130
right so we've talked about declarative

00:27:24,840 --> 00:27:28,710
infrastructure which is the foundation

00:27:26,130 --> 00:27:32,490
of all of this now we'll talk about

00:27:28,710 --> 00:27:34,500
building on top of that so the next

00:27:32,490 --> 00:27:36,690
piece that ties us together is

00:27:34,500 --> 00:27:38,130
declarative delivery so we have two

00:27:36,690 --> 00:27:40,140
concepts we're pulling out from our

00:27:38,130 --> 00:27:42,000
experience as first level citizens that

00:27:40,140 --> 00:27:46,170
people care about so the first is

00:27:42,000 --> 00:27:48,210
artifacts and that is the right now the

00:27:46,170 --> 00:27:49,860
package or docker image that you want to

00:27:48,210 --> 00:27:53,190
promote through your delivery flow and

00:27:49,860 --> 00:27:54,720
then the next one is environments so

00:27:53,190 --> 00:27:56,280
environments are the collection of

00:27:54,720 --> 00:27:58,440
resources that are needed to run your

00:27:56,280 --> 00:27:59,790
application and this is exactly like you

00:27:58,440 --> 00:28:01,290
think of environments now your test

00:27:59,790 --> 00:28:03,870
environment your staging environment

00:28:01,290 --> 00:28:05,700
your production environment and this is

00:28:03,870 --> 00:28:07,170
the same example we saw earlier and you

00:28:05,700 --> 00:28:09,540
can see from there that we have an

00:28:07,170 --> 00:28:12,660
artifact the Debian and then two

00:28:09,540 --> 00:28:15,030
environments test and production so

00:28:12,660 --> 00:28:17,010
together those give you like a static

00:28:15,030 --> 00:28:18,870
picture of your environments in your

00:28:17,010 --> 00:28:22,620
artifact we need something that talks

00:28:18,870 --> 00:28:24,900
about how those connect together so the

00:28:22,620 --> 00:28:27,750
next thing is constraints constraints

00:28:24,900 --> 00:28:31,130
gate weather and artifacts can be

00:28:27,750 --> 00:28:34,590
promoted to an environment so for

00:28:31,130 --> 00:28:36,270
example constraints are like this

00:28:34,590 --> 00:28:39,540
artifact must have been deployed in a

00:28:36,270 --> 00:28:41,250
previous environment or this artifacts

00:28:39,540 --> 00:28:44,520
can only be deployed during the workday

00:28:41,250 --> 00:28:46,110
or this artifact needs manual approval

00:28:44,520 --> 00:28:48,090
before it goes into an environment and

00:28:46,110 --> 00:28:50,790
these three things the first ones are

00:28:48,090 --> 00:28:55,710
built or they're being built right this

00:28:50,790 --> 00:28:57,510
moment well Monday this week the second

00:28:55,710 --> 00:28:58,530
things don't exist yet but this is where

00:28:57,510 --> 00:29:02,070
we're going

00:28:58,530 --> 00:29:04,410
so we want to have a constraint that

00:29:02,070 --> 00:29:06,180
requires packages to be regionally

00:29:04,410 --> 00:29:09,360
rolled out so you do you don't deployed

00:29:06,180 --> 00:29:11,430
globally all at once and also we want to

00:29:09,360 --> 00:29:13,500
express things like must have been

00:29:11,430 --> 00:29:16,110
carried or must have passed tests and

00:29:13,500 --> 00:29:18,060
these two are is specifically a good fit

00:29:16,110 --> 00:29:20,400
for the existing pipelines workflow

00:29:18,060 --> 00:29:22,380
pipelines are great for codifying these

00:29:20,400 --> 00:29:23,550
steps like tests that have to be run in

00:29:22,380 --> 00:29:25,380
a certain order for calling off the

00:29:23,550 --> 00:29:28,200
Jenkins and so we might think of these

00:29:25,380 --> 00:29:30,300
as pipelines that have run and if they

00:29:28,200 --> 00:29:31,650
succeed then the constraint passes and

00:29:30,300 --> 00:29:35,940
if they fail then the constraint doesn't

00:29:31,650 --> 00:29:38,940
pass so let's walk through this with an

00:29:35,940 --> 00:29:41,160
example we have our same Debian as

00:29:38,940 --> 00:29:43,260
before you have two environments test

00:29:41,160 --> 00:29:45,030
and production our test environment has

00:29:43,260 --> 00:29:46,980
three instances and a load balancer and

00:29:45,030 --> 00:29:50,100
our production environment has six

00:29:46,980 --> 00:29:52,890
instances and a load balancer so we

00:29:50,100 --> 00:29:54,870
express constraints test has no

00:29:52,890 --> 00:29:56,730
constraints we want everything to go in

00:29:54,870 --> 00:29:59,310
and production has three contained

00:29:56,730 --> 00:30:02,070
constraints deployed in test smoke

00:29:59,310 --> 00:30:04,290
tested and canary when we go to check

00:30:02,070 --> 00:30:06,360
whether this artifact can be deployed

00:30:04,290 --> 00:30:09,150
into the first environment we see yes

00:30:06,360 --> 00:30:11,970
because there's no constraints so we'll

00:30:09,150 --> 00:30:14,190
go ahead and deploy that for you when

00:30:11,970 --> 00:30:16,860
we're checking the next environment we

00:30:14,190 --> 00:30:18,240
see that yes it has been deployed in

00:30:16,860 --> 00:30:21,150
test but it hasn't passed these other

00:30:18,240 --> 00:30:23,340
constraints so it doesn't qualify to be

00:30:21,150 --> 00:30:24,810
deployed into production but we can take

00:30:23,340 --> 00:30:26,430
action to make sure that those

00:30:24,810 --> 00:30:29,040
constraints will eventually be satisfied

00:30:26,430 --> 00:30:32,880
like running the tests and canoeing with

00:30:29,040 --> 00:30:36,240
the proper configuration so here is a

00:30:32,880 --> 00:30:38,490
sample declarative delivery config this

00:30:36,240 --> 00:30:40,670
is much shortened to fit on the slide

00:30:38,490 --> 00:30:44,580
but we'll go through some key examples

00:30:40,670 --> 00:30:47,160
so we have a name of the configuration

00:30:44,580 --> 00:30:48,840
an application that it relates to and a

00:30:47,160 --> 00:30:50,880
list of artifacts we have a sample

00:30:48,840 --> 00:30:53,520
Debian here and then we have a list of

00:30:50,880 --> 00:30:56,460
environments you'll notice this also has

00:30:53,520 --> 00:30:57,960
a test in and prod environment there are

00:30:56,460 --> 00:31:00,720
zero constraints on the test environment

00:30:57,960 --> 00:31:02,460
and there are two resource definitions

00:31:00,720 --> 00:31:04,110
all the details have been omitted here

00:31:02,460 --> 00:31:06,090
but this is the same resource definition

00:31:04,110 --> 00:31:07,590
that you saw before and we're grouping

00:31:06,090 --> 00:31:09,990
this load balancer in cluster together

00:31:07,590 --> 00:31:11,070
to make the test environment same for

00:31:09,990 --> 00:31:13,080
prod we

00:31:11,070 --> 00:31:14,970
two resources they make up the

00:31:13,080 --> 00:31:17,010
production environment and then it has

00:31:14,970 --> 00:31:18,840
one constraint here represented which is

00:31:17,010 --> 00:31:24,300
that it depends on the test environment

00:31:18,840 --> 00:31:26,220
and this is also real and working so

00:31:24,300 --> 00:31:27,780
let's talk more in detail about how an

00:31:26,220 --> 00:31:32,490
artifact gets promoted and how we think

00:31:27,780 --> 00:31:34,590
about that so here for example we have

00:31:32,490 --> 00:31:36,240
five artifacts there Debian's and

00:31:34,590 --> 00:31:39,240
they're named using semantic versioning

00:31:36,240 --> 00:31:41,550
so we can figure out which is the latest

00:31:39,240 --> 00:31:43,110
in those and for each artifact each

00:31:41,550 --> 00:31:45,240
environment sorry we want to find the

00:31:43,110 --> 00:31:48,180
latest artifact that's qualified to be

00:31:45,240 --> 00:31:50,040
deployed a quick note when I say latest

00:31:48,180 --> 00:31:52,320
here I really mean for the flow you're

00:31:50,040 --> 00:31:54,180
thinking about what is the most recent

00:31:52,320 --> 00:31:57,030
piece of code that's been built you can

00:31:54,180 --> 00:31:59,040
denote that in several ways but here

00:31:57,030 --> 00:32:00,660
we're just thinking about this like the

00:31:59,040 --> 00:32:02,970
package has been built from master and

00:32:00,660 --> 00:32:07,740
it's using an increasing version so we

00:32:02,970 --> 00:32:09,210
can tell but this is flexible so every

00:32:07,740 --> 00:32:11,610
time we need to figure out which

00:32:09,210 --> 00:32:14,730
artifact should be an environment we

00:32:11,610 --> 00:32:16,140
pass through this loop so we have three

00:32:14,730 --> 00:32:17,520
constraints here it doesn't really

00:32:16,140 --> 00:32:19,050
matter what they are but if you'd like

00:32:17,520 --> 00:32:20,010
to think about an example you can think

00:32:19,050 --> 00:32:21,510
of the same ones for our production

00:32:20,010 --> 00:32:23,040
environment earlier which has been

00:32:21,510 --> 00:32:25,650
deployed which is deployed into a

00:32:23,040 --> 00:32:28,770
previous environment tested smoke tested

00:32:25,650 --> 00:32:30,270
and canary so we can see there our most

00:32:28,770 --> 00:32:32,670
recent artifact the latest version

00:32:30,270 --> 00:32:34,650
doesn't meet the constraints so we step

00:32:32,670 --> 00:32:36,150
back to the previous one we can think

00:32:34,650 --> 00:32:37,950
here that that meets two of the

00:32:36,150 --> 00:32:40,020
constraints but not all three that

00:32:37,950 --> 00:32:42,930
doesn't qualify to be deployed into our

00:32:40,020 --> 00:32:45,030
environment we look back one more

00:32:42,930 --> 00:32:48,030
version that has met all the constraints

00:32:45,030 --> 00:32:50,490
and it's the one we want we don't need

00:32:48,030 --> 00:32:52,440
to look any further one thing to note is

00:32:50,490 --> 00:32:54,930
that this is just for how we evaluate

00:32:52,440 --> 00:32:57,240
whether the artifact should be in the

00:32:54,930 --> 00:32:59,040
environment will kill will be taking

00:32:57,240 --> 00:33:01,080
action to make sure that there are other

00:32:59,040 --> 00:33:06,060
artifacts meet the constraints in a

00:33:01,080 --> 00:33:08,130
separate area this means that you don't

00:33:06,060 --> 00:33:10,650
have to commit as Rob said you don't

00:33:08,130 --> 00:33:12,390
have to commit your latest version to

00:33:10,650 --> 00:33:15,180
your mo and push that to us

00:33:12,390 --> 00:33:18,780
if you'd like we'll figure that out for

00:33:15,180 --> 00:33:21,620
you all right

00:33:18,780 --> 00:33:21,620
what does this look like

00:33:22,690 --> 00:33:29,270
so right now we have some basic support

00:33:26,840 --> 00:33:31,550
in in the debt component Spinnaker's UI

00:33:29,270 --> 00:33:33,590
so we have you can see a managed

00:33:31,550 --> 00:33:36,830
delivery logo on some of those resources

00:33:33,590 --> 00:33:38,240
on these clusters here and the logo is a

00:33:36,830 --> 00:33:39,770
little bit specialized to show you that

00:33:38,240 --> 00:33:42,020
the resource at the top there the pre

00:33:39,770 --> 00:33:44,390
staging environment is is taking some

00:33:42,020 --> 00:33:46,370
kind of action there's a little cog or

00:33:44,390 --> 00:33:49,220
something there that shows it's it's you

00:33:46,370 --> 00:33:51,110
know in transition to to its desired

00:33:49,220 --> 00:33:57,440
State and you can also see that that

00:33:51,110 --> 00:33:59,390
there's a task running when you look at

00:33:57,440 --> 00:34:02,990
the tasks view any action that Keele

00:33:59,390 --> 00:34:04,460
takes is done via Orca right now so so

00:34:02,990 --> 00:34:05,810
you can always see the things that are

00:34:04,460 --> 00:34:09,800
going on but just by looking at the

00:34:05,810 --> 00:34:11,900
tasks view that exists already and the

00:34:09,800 --> 00:34:14,450
whole one what we really want to avoid

00:34:11,900 --> 00:34:16,190
is this scenario where you know people

00:34:14,450 --> 00:34:17,930
are like oh what the hell is going on

00:34:16,190 --> 00:34:19,550
there's there are random tasks happening

00:34:17,930 --> 00:34:21,260
everywhere why is this thing deploying

00:34:19,550 --> 00:34:22,970
why is it not deploying when I expected

00:34:21,260 --> 00:34:24,710
it to so we want to be really

00:34:22,970 --> 00:34:27,080
transparent about the fact keel is

00:34:24,710 --> 00:34:30,140
taking action why it's taking the action

00:34:27,080 --> 00:34:33,380
what it's doing why it's maybe not doing

00:34:30,140 --> 00:34:35,060
something yet and we have a lot of new

00:34:33,380 --> 00:34:36,590
UI components that'll help you visualize

00:34:35,060 --> 00:34:38,930
the flow of artifacts through those

00:34:36,590 --> 00:34:40,700
environments but we're already leaning

00:34:38,930 --> 00:34:42,710
on some of the existing UI components

00:34:40,700 --> 00:34:48,170
just to you know nothing's going to be

00:34:42,710 --> 00:34:50,780
hidden away from the from the user we do

00:34:48,170 --> 00:34:52,400
have some new kind of informational

00:34:50,780 --> 00:34:55,010
stuff so we have the little manage

00:34:52,400 --> 00:34:56,660
delivery logo there on any any resources

00:34:55,010 --> 00:34:58,990
being managed and you can look at the

00:34:56,660 --> 00:35:02,210
history right now that history is in

00:34:58,990 --> 00:35:04,100
exciting raw JSON format but some UI

00:35:02,210 --> 00:35:06,350
will be coming pretty soon but we can

00:35:04,100 --> 00:35:07,720
see useful things like it's a stream of

00:35:06,350 --> 00:35:09,800
events that have happened or been

00:35:07,720 --> 00:35:12,350
detected happening to that resource so

00:35:09,800 --> 00:35:14,390
for example the the most recent event

00:35:12,350 --> 00:35:16,340
there is we've launched an actuation

00:35:14,390 --> 00:35:18,410
which is an attempt to resolve desire

00:35:16,340 --> 00:35:20,630
against current state and we have an ID

00:35:18,410 --> 00:35:22,400
of a task in orca that was launched in

00:35:20,630 --> 00:35:24,470
order to do that and a description of

00:35:22,400 --> 00:35:26,720
what it was trying to do and the event

00:35:24,470 --> 00:35:28,580
prior to that is details of the Delta we

00:35:26,720 --> 00:35:31,130
detected so this is really nice because

00:35:28,580 --> 00:35:33,410
we can see or the reason we're doing

00:35:31,130 --> 00:35:34,780
this is because there was a change in

00:35:33,410 --> 00:35:36,490
the desired applique

00:35:34,780 --> 00:35:38,500
version that should be on that cluster

00:35:36,490 --> 00:35:40,480
so we detected that you released a new

00:35:38,500 --> 00:35:41,950
version of software that passed the

00:35:40,480 --> 00:35:44,140
constraints to get into that environment

00:35:41,950 --> 00:35:46,570
if there are any and that that was that

00:35:44,140 --> 00:35:51,400
now the new resolve to desired state and

00:35:46,570 --> 00:35:54,250
therefore we need to do a deployment if

00:35:51,400 --> 00:35:57,190
all else fails we want people to be able

00:35:54,250 --> 00:35:59,230
to turn management off if you're in the

00:35:57,190 --> 00:36:01,210
middle of an incident and you want to be

00:35:59,230 --> 00:36:03,390
utterly in control you want to turn off

00:36:01,210 --> 00:36:05,710
autopilot and take the yoke of the plane

00:36:03,390 --> 00:36:06,730
we have the ability to do that so if you

00:36:05,710 --> 00:36:08,650
go into the application configuration

00:36:06,730 --> 00:36:10,690
there's just a big friendly button that

00:36:08,650 --> 00:36:12,160
says pause management you press that and

00:36:10,690 --> 00:36:15,280
kill stops even looking at your

00:36:12,160 --> 00:36:17,050
application until you press it again to

00:36:15,280 --> 00:36:19,870
turn it off so that enables people to

00:36:17,050 --> 00:36:24,420
just take that control when they need to

00:36:19,870 --> 00:36:27,460
if there is a break the glass situation

00:36:24,420 --> 00:36:29,980
so a lot of that UI is still in progress

00:36:27,460 --> 00:36:32,890
or coming is this production ready well

00:36:29,980 --> 00:36:34,810
not quite yet but it's getting there

00:36:32,890 --> 00:36:36,910
things were actively working on right

00:36:34,810 --> 00:36:38,710
now are more constraints the next most

00:36:36,910 --> 00:36:40,450
obvious one to build I think is manual

00:36:38,710 --> 00:36:44,680
approval that's like the ultimate

00:36:40,450 --> 00:36:47,050
easiest way to control things getting

00:36:44,680 --> 00:36:48,520
into a production environment we'd like

00:36:47,050 --> 00:36:49,920
to build that staggered regional rollout

00:36:48,520 --> 00:36:52,510
because many of our teams are Netflix

00:36:49,920 --> 00:36:54,070
are relying on that strategy they don't

00:36:52,510 --> 00:36:55,870
want to deploy and to do into certain

00:36:54,070 --> 00:36:57,880
regions during traffic Peaks they want

00:36:55,870 --> 00:36:59,350
to do it in traffic dips and they don't

00:36:57,880 --> 00:37:00,640
want to deploy everything into all the

00:36:59,350 --> 00:37:02,770
regions at once in case there's a

00:37:00,640 --> 00:37:04,270
problem if there's a problem they'd

00:37:02,770 --> 00:37:07,510
rather just impact one region that they

00:37:04,270 --> 00:37:10,180
can potentially evacuate we'd like to

00:37:07,510 --> 00:37:12,880
build that UI for environments and and

00:37:10,180 --> 00:37:14,320
the history of resources and we'd like

00:37:12,880 --> 00:37:16,090
to stabilize our resource gamers right

00:37:14,320 --> 00:37:18,280
now we're kind of trying very hard to

00:37:16,090 --> 00:37:21,040
model this very very well those

00:37:18,280 --> 00:37:22,990
specification schemas for resources

00:37:21,040 --> 00:37:26,950
trying to model those in a type safe way

00:37:22,990 --> 00:37:30,430
so that we can generate validation tools

00:37:26,950 --> 00:37:31,750
for people and you know we're right now

00:37:30,430 --> 00:37:33,460
we're still tweaking that and we'd like

00:37:31,750 --> 00:37:34,990
to be able to get that pin down before

00:37:33,460 --> 00:37:36,220
we really say it's production ready and

00:37:34,990 --> 00:37:38,500
we'd like a bit better git integration

00:37:36,220 --> 00:37:43,000
story right now we're using Spinnaker's

00:37:38,500 --> 00:37:44,620
get trigger to track changes to delivery

00:37:43,000 --> 00:37:47,290
configurations or resource definitions

00:37:44,620 --> 00:37:48,850
and then run a little task that will

00:37:47,290 --> 00:37:50,380
submit that to Kiel

00:37:48,850 --> 00:37:53,950
that could be a little tighter but it

00:37:50,380 --> 00:37:58,020
works so if you're intrigued please come

00:37:53,950 --> 00:38:02,410
join the spinnaker as code SiC please

00:37:58,020 --> 00:38:04,930
ask us questions offer suggestions

00:38:02,410 --> 00:38:07,540
we'd love help with any other clouds

00:38:04,930 --> 00:38:09,370
that spinach that Netflix is not using

00:38:07,540 --> 00:38:10,450
particularly kubernetes would be really

00:38:09,370 --> 00:38:12,190
interesting where you could eliminate a

00:38:10,450 --> 00:38:13,510
lot of that kind of infrastructure as

00:38:12,190 --> 00:38:16,780
code part because you don't need that

00:38:13,510 --> 00:38:20,050
but you could build the delivery side of

00:38:16,780 --> 00:38:22,030
things on top of it potentially if

00:38:20,050 --> 00:38:24,040
you've got a suggestion for the name for

00:38:22,030 --> 00:38:27,610
that thick bath unicorn on the first

00:38:24,040 --> 00:38:29,590
slide then get in touch if you have any

00:38:27,610 --> 00:38:31,630
questions where if we have time we're

00:38:29,590 --> 00:38:33,370
happy to take a few now otherwise we

00:38:31,630 --> 00:38:35,980
have a breakout in the room satisfaction

00:38:33,370 --> 00:38:38,050
which I believe is downstairs and we

00:38:35,980 --> 00:38:42,060
also have a slack channel in the open

00:38:38,050 --> 00:38:42,060
source slack if you'd like to talk to us

00:38:43,480 --> 00:38:53,869
[Applause]

00:38:55,580 --> 00:39:01,770

YouTube URL: https://www.youtube.com/watch?v=mEgvOfmLnlY


