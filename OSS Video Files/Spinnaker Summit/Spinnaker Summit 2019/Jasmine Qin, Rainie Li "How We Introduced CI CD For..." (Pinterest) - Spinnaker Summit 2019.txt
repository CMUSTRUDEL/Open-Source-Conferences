Title: Jasmine Qin, Rainie Li "How We Introduced CI CD For..." (Pinterest) - Spinnaker Summit 2019
Publication date: 2019-12-06
Playlist: Spinnaker Summit 2019
Description: 
	The third annual Spinnaker Summit (Diamond Sponsors: Netflix, Google and Armory) was held at the Hard Rock Hotel in San Diego, CA from November 15-17, 2019 and welcomed over 500 members of the rapidly growing Spinnaker open source community.
Captions: 
	00:00:00,030 --> 00:00:05,700
hello everyone welcome to our talk it's

00:00:03,600 --> 00:00:08,580
so happy to be here in beautiful San

00:00:05,700 --> 00:00:11,550
Diego jasmine and I are software

00:00:08,580 --> 00:00:13,590
engineers at Pinterest has any of you

00:00:11,550 --> 00:00:14,870
never used Pinterest before raise your

00:00:13,590 --> 00:00:18,600
hand please

00:00:14,870 --> 00:00:20,580
well I saw several hands those who raise

00:00:18,600 --> 00:00:22,560
your hands feel free to leave now and

00:00:20,580 --> 00:00:27,000
enjoy the rest of your weekend

00:00:22,560 --> 00:00:30,599
oh if you stay with us I will introduce

00:00:27,000 --> 00:00:33,239
Pinterest to you and I promise you will

00:00:30,599 --> 00:00:38,070
love our product hopefully at the end

00:00:33,239 --> 00:00:40,559
you will enjoy our talk Pinterest is the

00:00:38,070 --> 00:00:43,110
social media web and the application

00:00:40,559 --> 00:00:45,600
company our mission is to bring

00:00:43,110 --> 00:00:48,780
everyone's the inspiration to create her

00:00:45,600 --> 00:00:51,390
lives they love talking about Pinterest

00:00:48,780 --> 00:00:55,500
most of you will think about fashion

00:00:51,390 --> 00:00:59,879
styles haircuts doubt designers or home

00:00:55,500 --> 00:01:04,260
decorations oh that's true 70% of our

00:00:59,879 --> 00:01:05,880
users are females however Pinterest

00:01:04,260 --> 00:01:08,700
provides other cool stuff like

00:01:05,880 --> 00:01:12,450
mechanical keyboards or Hardware pieces

00:01:08,700 --> 00:01:14,490
if you create a pinboard you can put

00:01:12,450 --> 00:01:16,590
full of different kinds of mechanical

00:01:14,490 --> 00:01:18,689
keyboard image there and you can create

00:01:16,590 --> 00:01:21,780
another pin board to add different

00:01:18,689 --> 00:01:26,189
pieces of hardware I'm sure most of you

00:01:21,780 --> 00:01:30,030
will be interested about that right we

00:01:26,189 --> 00:01:32,820
are keep going as August 2019 Pinterest

00:01:30,030 --> 00:01:37,979
has already reached a 320 million

00:01:32,820 --> 00:01:41,310
monthly active users in fact 40% of our

00:01:37,979 --> 00:01:43,470
new sign up users are men hopefully at

00:01:41,310 --> 00:01:49,110
this talk those who raise your hand will

00:01:43,470 --> 00:01:51,329
become our new users before I talk about

00:01:49,110 --> 00:01:53,490
how Pinterest using spinnaker I would

00:01:51,329 --> 00:01:57,060
like to go through two major services at

00:01:53,490 --> 00:02:00,240
Pinterest web and API where is serving

00:01:57,060 --> 00:02:02,820
for Pinterest comm API sits behind the

00:02:00,240 --> 00:02:06,540
web serving both web traffic and mobile

00:02:02,820 --> 00:02:08,429
app traffic there are more than 200

00:02:06,540 --> 00:02:12,800
engineers contribute to these two

00:02:08,429 --> 00:02:17,780
services and we have more than 3,500

00:02:12,800 --> 00:02:20,780
each month infra is the cornerstone for

00:02:17,780 --> 00:02:24,650
all these success here are some data for

00:02:20,780 --> 00:02:27,410
our increment we have more than 100,000

00:02:24,650 --> 00:02:31,570
servers more than 10,000 deploys per

00:02:27,410 --> 00:02:35,450
month and we have thousands of services

00:02:31,570 --> 00:02:38,750
looking for a reliable safe continuous

00:02:35,450 --> 00:02:41,540
delivery platform become critical

00:02:38,750 --> 00:02:44,200
feature for us that's why we adopt

00:02:41,540 --> 00:02:44,200
spinnaker

00:02:44,290 --> 00:02:49,820
here's today's agenda first hour goes

00:02:47,420 --> 00:02:51,920
through a deployment history at

00:02:49,820 --> 00:02:54,980
Pinterest and I will cover currents the

00:02:51,920 --> 00:02:57,410
ICD after that I will briefly talk about

00:02:54,980 --> 00:03:00,200
how we customize and productionize

00:02:57,410 --> 00:03:02,480
spinnaker and Pinterest then Jasmine

00:03:00,200 --> 00:03:05,420
will goes through our new CI CD system

00:03:02,480 --> 00:03:07,910
also she will do a demo we will hold a

00:03:05,420 --> 00:03:13,760
Q&A session at the end feel free to ask

00:03:07,910 --> 00:03:17,300
a question there cool previously before

00:03:13,760 --> 00:03:20,390
we adopt spinnaker this picture displays

00:03:17,300 --> 00:03:23,810
how we do a deployment at Pinterest it

00:03:20,390 --> 00:03:29,239
involved a lot of manual work it's like

00:03:23,810 --> 00:03:32,540
a chaos in manufactory we used to have a

00:03:29,239 --> 00:03:35,450
tool called Metroplex which is a slack

00:03:32,540 --> 00:03:39,260
bot tool it helped us to do two

00:03:35,450 --> 00:03:41,959
scheduled deployments per day and commit

00:03:39,260 --> 00:03:44,630
from land to pro time was extremely high

00:03:41,959 --> 00:03:48,890
it could take a few days at worst case

00:03:44,630 --> 00:03:51,980
and from the right side you can see the

00:03:48,890 --> 00:03:54,470
deployment change list contains hundreds

00:03:51,980 --> 00:03:57,260
of commits it made the triage process

00:03:54,470 --> 00:04:01,520
very difficult if something went wrong

00:03:57,260 --> 00:04:03,590
here are some major pain points

00:04:01,520 --> 00:04:05,690
the first one is operator has to

00:04:03,590 --> 00:04:08,420
manually kick off the deployment and

00:04:05,690 --> 00:04:11,360
they have to constantly and frequently

00:04:08,420 --> 00:04:15,980
check in the test failures exceptions

00:04:11,360 --> 00:04:18,290
and even incidents besides that deploy

00:04:15,980 --> 00:04:20,780
bought only provided synchronized

00:04:18,290 --> 00:04:24,320
workflow which means deploy to multiple

00:04:20,780 --> 00:04:26,240
stages in a sequential way next

00:04:24,320 --> 00:04:28,100
deployment cycle could only have

00:04:26,240 --> 00:04:33,560
after the previous deployment cycle

00:04:28,100 --> 00:04:37,039
completed very painful here's a picture

00:04:33,560 --> 00:04:40,069
of my dog stand by Abbey by chasing some

00:04:37,039 --> 00:04:44,360
box which expressed the same feeling

00:04:40,069 --> 00:04:48,949
when we were using Metroplex we have

00:04:44,360 --> 00:04:51,310
learned our lesson we realized pipeline

00:04:48,949 --> 00:04:54,560
is a good solution to help us manage

00:04:51,310 --> 00:04:58,120
deployment in multiple stages in a

00:04:54,560 --> 00:05:00,800
consistent reliable and repeatable way

00:04:58,120 --> 00:05:04,580
we were looking for some open source

00:05:00,800 --> 00:05:09,169
deployment pipeline tool why we adopt

00:05:04,580 --> 00:05:12,530
spinnaker there are two reasons the

00:05:09,169 --> 00:05:14,930
first one is spinnaker provided a rich

00:05:12,530 --> 00:05:17,810
and advanced of features including

00:05:14,930 --> 00:05:21,169
deployment workflow and canary analysis

00:05:17,810 --> 00:05:23,810
the second reason is spinach is well

00:05:21,169 --> 00:05:28,009
supported by large community including

00:05:23,810 --> 00:05:29,810
Netflix Emory Google cloud and everyone

00:05:28,009 --> 00:05:32,020
sitting here thanks for your support as

00:05:29,810 --> 00:05:32,020
well

00:05:32,650 --> 00:05:37,970
spinnaker helped us to implement

00:05:35,800 --> 00:05:40,849
automatically triggered pipelines by

00:05:37,970 --> 00:05:44,030
Jenkins job they also helped us to run

00:05:40,849 --> 00:05:45,830
integration tests automatically besides

00:05:44,030 --> 00:05:48,800
that with spinnaker we can wrong

00:05:45,830 --> 00:05:53,990
asynchronous workflow which means we can

00:05:48,800 --> 00:05:55,969
wrong execution pipelines coherently we

00:05:53,990 --> 00:05:58,729
improved from two scheduled deployment

00:05:55,969 --> 00:06:02,180
per day to twenty five deployments today

00:05:58,729 --> 00:06:06,490
also we decrease the chameleon to Pro

00:06:02,180 --> 00:06:08,930
time less than four hours this

00:06:06,490 --> 00:06:12,620
dramatically reduced the operation

00:06:08,930 --> 00:06:18,199
burden and improving velocity of product

00:06:12,620 --> 00:06:21,560
release from this diagram you can tell

00:06:18,199 --> 00:06:24,650
we increase the number of deployments by

00:06:21,560 --> 00:06:29,080
at least five times and we decrease that

00:06:24,650 --> 00:06:29,080
the commitment to Pro time by one-third

00:06:31,060 --> 00:06:36,349
from this picture you can see on the

00:06:33,469 --> 00:06:38,659
left side like I mentioned before the

00:06:36,349 --> 00:06:39,260
deployment changes when we were using

00:06:38,659 --> 00:06:43,670
Metro

00:06:39,260 --> 00:06:46,520
prax was huge and normally contain 139

00:06:43,670 --> 00:06:48,500
commits on the right side you can see

00:06:46,520 --> 00:06:51,530
after adopting spinnaker that each

00:06:48,500 --> 00:06:55,580
deployment change list reduce the myth

00:06:51,530 --> 00:07:02,390
to single-digit huge improvement finally

00:06:55,580 --> 00:07:04,490
we are heavier like my dog next I will

00:07:02,390 --> 00:07:08,350
talk about how we customize and the

00:07:04,490 --> 00:07:08,350
production nice v-neck and Pinterest

00:07:10,510 --> 00:07:16,310
this is a picture display at how many

00:07:13,970 --> 00:07:19,100
micro services we adopted from spinach

00:07:16,310 --> 00:07:22,240
you can tell we did not adopt Orosco

00:07:19,100 --> 00:07:25,160
since we have our own ami Bakery process

00:07:22,240 --> 00:07:27,590
we did not adopt cloud driver neither

00:07:25,160 --> 00:07:30,680
since weed we don't need integrate with

00:07:27,590 --> 00:07:32,780
cloud provider directly we use territory

00:07:30,680 --> 00:07:37,430
which is Pinterest the deployment system

00:07:32,780 --> 00:07:40,250
to help us deploy to a diverse VM we

00:07:37,430 --> 00:07:42,830
customized the three services here back

00:07:40,250 --> 00:07:46,190
akka and acai enter to provide a

00:07:42,830 --> 00:07:48,620
telephone customer stage and provided an

00:07:46,190 --> 00:07:53,360
open psdb plugin I will cover there

00:07:48,620 --> 00:07:56,110
later here are two simple pipelines

00:07:53,360 --> 00:07:58,850
the first one is master pipeline a

00:07:56,110 --> 00:08:01,910
normally automatically triggered by a

00:07:58,850 --> 00:08:04,640
Jenkins job then it go to next stage

00:08:01,910 --> 00:08:06,680
which is integration test it's a sub

00:08:04,640 --> 00:08:09,290
pipeline which helped us to run all the

00:08:06,680 --> 00:08:11,540
integration tests if everything looks

00:08:09,290 --> 00:08:14,570
good it will go to next stage which is

00:08:11,540 --> 00:08:17,210
sub pipeline called canary analysis on

00:08:14,570 --> 00:08:19,610
this pipeline first it work at a

00:08:17,210 --> 00:08:22,850
production build and deploy to both

00:08:19,610 --> 00:08:25,220
canary and the control stages then we

00:08:22,850 --> 00:08:28,550
are running a canary analysis report

00:08:25,220 --> 00:08:30,830
based on these two stages service owner

00:08:28,550 --> 00:08:33,740
can set up score based on different

00:08:30,830 --> 00:08:38,660
threshold if the report looks good

00:08:33,740 --> 00:08:41,320
it will deploy to production next I will

00:08:38,660 --> 00:08:44,210
talk about how we customized Pinnacle

00:08:41,320 --> 00:08:47,120
when we were using spinach and Pinterest

00:08:44,210 --> 00:08:51,230
we had some problem to integrate with

00:08:47,120 --> 00:08:52,720
our existing services the first one is

00:08:51,230 --> 00:08:56,000
open psdb

00:08:52,720 --> 00:08:59,750
the reason we need this customization is

00:08:56,000 --> 00:09:02,720
kyondra does not support open psdb while

00:08:59,750 --> 00:09:07,490
pinterest using open TS TV as our metric

00:09:02,720 --> 00:09:09,950
store we did customized on both their

00:09:07,490 --> 00:09:12,920
current and current our code base to

00:09:09,950 --> 00:09:16,040
edit an open TST be plugin we also

00:09:12,920 --> 00:09:19,070
enable open PSDB in kaientai mo file

00:09:16,040 --> 00:09:22,100
which we deploy to kubernetes after that

00:09:19,070 --> 00:09:24,770
at this screenshot you can see customers

00:09:22,100 --> 00:09:26,960
can easily import open DSTV metrics from

00:09:24,770 --> 00:09:31,900
spinnaker UI when they are setting up

00:09:26,960 --> 00:09:34,870
canary configures the second

00:09:31,900 --> 00:09:37,610
customization is tarek on customer stage

00:09:34,870 --> 00:09:40,610
let me add a little bit background here

00:09:37,610 --> 00:09:42,710
Tara Tron is our Pinterest deployment

00:09:40,610 --> 00:09:46,370
system to help us deploy multiple

00:09:42,710 --> 00:09:49,010
services to a diverse VM and spinnaker

00:09:46,370 --> 00:09:52,580
pipeline called telogen to do the actual

00:09:49,010 --> 00:09:57,320
deployment why we need this customer

00:09:52,580 --> 00:10:00,590
stage without this we used to set up web

00:09:57,320 --> 00:10:03,260
hook stages on spinnaker UI to make API

00:10:00,590 --> 00:10:06,080
calls directly from spinnaker to Tara

00:10:03,260 --> 00:10:09,530
Tron there are two disadvantages here

00:10:06,080 --> 00:10:13,340
the first one is we have to expose a

00:10:09,530 --> 00:10:15,740
token from webhook stage and user can

00:10:13,340 --> 00:10:18,470
easily copy paste this token to do some

00:10:15,740 --> 00:10:19,190
other heavy stuff to telethon which is

00:10:18,470 --> 00:10:23,750
very dangerous

00:10:19,190 --> 00:10:25,820
the second reason is user cannot see the

00:10:23,750 --> 00:10:28,310
actual deployment status from spinnaker

00:10:25,820 --> 00:10:30,410
UI they have to manually go to the home

00:10:28,310 --> 00:10:34,310
page to check their deployment status

00:10:30,410 --> 00:10:36,770
which is inconvenient that's why we need

00:10:34,310 --> 00:10:39,290
a Terran customer stage to provide a

00:10:36,770 --> 00:10:41,870
better integration between spinnaker and

00:10:39,290 --> 00:10:44,690
at electron from this screenshot you can

00:10:41,870 --> 00:10:47,000
see we encapsulate all the

00:10:44,690 --> 00:10:49,580
authentication information and we also

00:10:47,000 --> 00:10:52,790
can display the deployment status from

00:10:49,580 --> 00:10:54,860
spinnaker UI there's a link user can

00:10:52,790 --> 00:10:57,320
click and the redirect them from

00:10:54,860 --> 00:10:59,890
spinnaker you are - Tara Tron it's very

00:10:57,320 --> 00:10:59,890
useful

00:11:01,830 --> 00:11:07,860
next I will cover three pieces how we

00:11:04,740 --> 00:11:08,760
did in for spinnaker production nice at

00:11:07,860 --> 00:11:13,440
Pinterest

00:11:08,760 --> 00:11:17,040
the first one is security this is the

00:11:13,440 --> 00:11:19,350
area we spend most of our effort on I'm

00:11:17,040 --> 00:11:21,860
not sure how many of you had the same

00:11:19,350 --> 00:11:24,330
problem to make sure spinnaker use the

00:11:21,860 --> 00:11:27,990
consistent authentication permission

00:11:24,330 --> 00:11:30,840
with downstream services we had this

00:11:27,990 --> 00:11:33,150
problem we're trying to give users the

00:11:30,840 --> 00:11:36,290
same permission between spinnaker and

00:11:33,150 --> 00:11:41,760
our downstream Terran service list

00:11:36,290 --> 00:11:43,890
here's our solution we make gate service

00:11:41,760 --> 00:11:45,750
talk to Pinterest all server directory

00:11:43,890 --> 00:11:48,420
and get all the user authentication

00:11:45,750 --> 00:11:51,960
formation if the user went with

00:11:48,420 --> 00:11:54,510
spinnaker UI and a starter execution on

00:11:51,960 --> 00:11:56,670
a pipeline to deploy to telecom did

00:11:54,510 --> 00:11:59,700
service were passed on this user token

00:11:56,670 --> 00:12:02,640
to oka all Kai's the place we set up

00:11:59,700 --> 00:12:06,030
customize the territory on stage awk our

00:12:02,640 --> 00:12:10,080
path down this user token to trigger the

00:12:06,030 --> 00:12:12,360
actual deployment int electron the

00:12:10,080 --> 00:12:14,450
second case is if this pipeline is

00:12:12,360 --> 00:12:18,530
automatically triggered by Jenkins job

00:12:14,450 --> 00:12:21,720
awk our constantly pour our Jenkins job

00:12:18,530 --> 00:12:23,850
then awk our passed on a script token

00:12:21,720 --> 00:12:26,100
which is supported by a territory

00:12:23,850 --> 00:12:28,980
environment and to trigger the actual

00:12:26,100 --> 00:12:31,530
deployment from turtle UI you can tell

00:12:28,980 --> 00:12:36,330
the deployment is triggered by a single

00:12:31,530 --> 00:12:39,630
user or script token the next piece for

00:12:36,330 --> 00:12:42,050
security is authorization we adopted a

00:12:39,630 --> 00:12:45,510
file service and integrate with

00:12:42,050 --> 00:12:47,820
Pinterest our LDAP server so that we can

00:12:45,510 --> 00:12:51,960
grant different permission like edit

00:12:47,820 --> 00:12:56,790
read or write on pipelines based on LDAP

00:12:51,960 --> 00:13:00,030
group users the last piece for security

00:12:56,790 --> 00:13:03,900
is we made spinnaker script stage

00:13:00,030 --> 00:13:06,990
read-only spinnaker script stage is very

00:13:03,900 --> 00:13:10,170
useful but we feel like it's too

00:13:06,990 --> 00:13:13,320
powerful since the users can run every

00:13:10,170 --> 00:13:15,630
script on this stage and those scripts

00:13:13,320 --> 00:13:17,700
are running by a Jenkins job which

00:13:15,630 --> 00:13:21,750
is very hard to set our code review

00:13:17,700 --> 00:13:25,350
process on Jenkins job level here's our

00:13:21,750 --> 00:13:28,200
solution from spinnaker UI we made all

00:13:25,350 --> 00:13:30,690
the script stage read-only if a user

00:13:28,200 --> 00:13:32,730
wants to update their script or they

00:13:30,690 --> 00:13:35,820
want to add a new script stage they will

00:13:32,730 --> 00:13:39,150
reach out to our team and we will reveal

00:13:35,820 --> 00:13:41,880
their script after we merge their code

00:13:39,150 --> 00:13:44,640
into our repo we will help those

00:13:41,880 --> 00:13:51,660
customers to update their script by

00:13:44,640 --> 00:13:53,400
calling spinning API directory cool so

00:13:51,660 --> 00:13:56,520
the next piece for production our

00:13:53,400 --> 00:13:58,770
spinnaker is blog and monitoring for

00:13:56,520 --> 00:14:00,030
logs since all spinnaker services are

00:13:58,770 --> 00:14:03,390
running on kubernetes

00:14:00,030 --> 00:14:06,750
first we redirect all the pod console

00:14:03,390 --> 00:14:10,440
log into a file on a mounted host volume

00:14:06,750 --> 00:14:13,170
then we are using a cycle which is a

00:14:10,440 --> 00:14:14,730
Pinterest internal logging agent running

00:14:13,170 --> 00:14:18,120
on the same pod but in a different

00:14:14,730 --> 00:14:22,170
container to ship these logs from host

00:14:18,120 --> 00:14:24,870
to kakuka after that we will create a

00:14:22,170 --> 00:14:27,660
topic for each service and ship these

00:14:24,870 --> 00:14:32,370
logs to Cabana so that our user can

00:14:27,660 --> 00:14:35,550
easily search their logs from Cabana for

00:14:32,370 --> 00:14:39,060
matrix we use promises as our matrix

00:14:35,550 --> 00:14:41,670
talk promises were poor each spinnaker

00:14:39,060 --> 00:14:43,890
service endpoint directly and we also

00:14:41,670 --> 00:14:47,250
deploy the spinnaker monitoring daemon

00:14:43,890 --> 00:14:49,290
to community besides that we have

00:14:47,250 --> 00:14:52,260
in-house tool called cubemetricks

00:14:49,290 --> 00:14:55,170
exporter which can export all the

00:14:52,260 --> 00:14:59,280
metrics from community to Pinterest open

00:14:55,170 --> 00:15:01,650
TST beam metric store once we set up all

00:14:59,280 --> 00:15:06,150
those service metrics we created an

00:15:01,650 --> 00:15:09,210
alert based on hi p90 latency we also

00:15:06,150 --> 00:15:17,880
generated a success rate alert based on

00:15:09,210 --> 00:15:19,740
total successful requests cool the last

00:15:17,880 --> 00:15:23,000
piece to production is pinnacle

00:15:19,740 --> 00:15:25,910
Pinterest is deployed we have our own

00:15:23,000 --> 00:15:28,870
spinnaker repository at Pinterest

00:15:25,910 --> 00:15:30,970
basically we clone the latest

00:15:28,870 --> 00:15:34,089
release version from spinnaker upstream

00:15:30,970 --> 00:15:36,940
and we set up Jenkins job to build all

00:15:34,089 --> 00:15:39,130
these source code into docker image then

00:15:36,940 --> 00:15:42,339
publish this docker image to a duress

00:15:39,130 --> 00:15:44,500
ECR after that we will deploy a yellow

00:15:42,339 --> 00:15:48,640
file which contains the latest docker

00:15:44,500 --> 00:15:51,490
version to kubernetes we use spinnaker

00:15:48,640 --> 00:15:54,220
to deploy spinnaker itself which means

00:15:51,490 --> 00:15:56,920
we set up a testings Minich environment

00:15:54,220 --> 00:15:59,800
and a created of pipelines and test

00:15:56,920 --> 00:16:02,080
environment use those pipeline to deploy

00:15:59,800 --> 00:16:07,690
each spinnaker services to production

00:16:02,080 --> 00:16:10,360
cuneta cluster for scale we rely on

00:16:07,690 --> 00:16:13,000
community HPA feature which can

00:16:10,360 --> 00:16:17,380
automatically scalable CPU and memory

00:16:13,000 --> 00:16:19,810
for us quote enough talk from me next

00:16:17,380 --> 00:16:24,089
gentleman will cover our new CI CD

00:16:19,810 --> 00:16:24,089
system and she will do a demo thank you

00:16:38,990 --> 00:16:44,870
hi everyone I'm jasmine so first I want

00:16:43,550 --> 00:16:46,850
to thank you raining for the thorough

00:16:44,870 --> 00:16:49,280
introduction of how we leverage

00:16:46,850 --> 00:16:53,690
spinnaker here as a continuous delivery

00:16:49,280 --> 00:16:56,390
platform and at Pinterest so spinnaker

00:16:53,690 --> 00:16:58,910
has helps has has placed such a

00:16:56,390 --> 00:17:01,190
game-changing role and has helped us

00:16:58,910 --> 00:17:11,270
smooth out the deploy process by a lot

00:17:01,190 --> 00:17:12,950
and we are still building so if you

00:17:11,270 --> 00:17:15,920
remember the graph that we show

00:17:12,950 --> 00:17:18,830
previously that illustrate the spinnaker

00:17:15,920 --> 00:17:20,839
micro services we adopted and how we

00:17:18,830 --> 00:17:27,680
integrate them with other services and

00:17:20,839 --> 00:17:30,050
platform now please allow me to

00:17:27,680 --> 00:17:39,080
introduce Hermes as a new addition to

00:17:30,050 --> 00:17:41,840
this graph so what is Hermus it is a

00:17:39,080 --> 00:17:43,760
service we develop at Pinterest and it

00:17:41,840 --> 00:17:47,590
will be used to directly interact with

00:17:43,760 --> 00:17:50,450
CI and CD platforms including spinnaker

00:17:47,590 --> 00:17:52,880
with the introduction of Hermes we

00:17:50,450 --> 00:17:57,200
encapsulate the process all the way from

00:17:52,880 --> 00:18:00,890
Co committed to code deploy hermas

00:17:57,200 --> 00:18:03,530
provides us a one-stop operations that

00:18:00,890 --> 00:18:06,650
way engineers no longer need to hop

00:18:03,530 --> 00:18:12,590
between services and platform in order

00:18:06,650 --> 00:18:14,630
to build deploy and more also because we

00:18:12,590 --> 00:18:15,610
provide out-of-the-box recommendations

00:18:14,630 --> 00:18:18,770
on hermits

00:18:15,610 --> 00:18:22,910
engineers who use it will only need to

00:18:18,770 --> 00:18:24,710
know and do minimum configurations so it

00:18:22,910 --> 00:18:31,250
greatly reduced the confusions and

00:18:24,710 --> 00:18:33,050
engineering overhead we also want to

00:18:31,250 --> 00:18:36,590
build hermus on top of spinnaker UI

00:18:33,050 --> 00:18:39,070
because then we can standardize the CD

00:18:36,590 --> 00:18:43,340
pipelines that are created created and

00:18:39,070 --> 00:18:45,800
reduce the management overhead we also

00:18:43,340 --> 00:18:48,980
can abstract the concepts provided by

00:18:45,800 --> 00:18:52,340
spinnaker you buy the spinnaker and hide

00:18:48,980 --> 00:18:55,710
the complexity behind the scene

00:18:52,340 --> 00:18:57,360
also we make sure that this new tool can

00:18:55,710 --> 00:19:07,410
meet majority of the engineering

00:18:57,360 --> 00:19:10,040
requirements a Pinterest okay so now

00:19:07,410 --> 00:19:10,040
it's demo time

00:19:10,280 --> 00:19:17,640
my apologies that because of the

00:19:14,010 --> 00:19:20,910
security reasons we can cannot do a live

00:19:17,640 --> 00:19:23,130
demo but instead I will I have some

00:19:20,910 --> 00:19:29,130
recording here for the it was for better

00:19:23,130 --> 00:19:32,520
illustration so in this the demo section

00:19:29,130 --> 00:19:34,800
I will cover two topics so first will be

00:19:32,520 --> 00:19:37,500
an example of a complex spinnaker

00:19:34,800 --> 00:19:39,330
pipeline and then the second one will be

00:19:37,500 --> 00:19:42,570
a deep dive into the spinnaker

00:19:39,330 --> 00:19:44,840
extensions we built which includes the

00:19:42,570 --> 00:19:48,179
teletraan custom stage that Rainey has

00:19:44,840 --> 00:19:52,020
previously mentioned and also the client

00:19:48,179 --> 00:19:54,090
our integration with open TS d be for

00:19:52,020 --> 00:19:57,690
the teletraan customized stage we will

00:19:54,090 --> 00:19:59,520
also go in over two scenarios and then

00:19:57,690 --> 00:20:01,460
the first one will be manual trigger

00:19:59,520 --> 00:20:04,790
spinnaker pipelines with the

00:20:01,460 --> 00:20:08,540
authentication details passed down

00:20:04,790 --> 00:20:11,309
second one is to use the code merge CI

00:20:08,540 --> 00:20:13,730
pipelines as the trigger for spinnaker

00:20:11,309 --> 00:20:13,730
pipelines

00:20:20,020 --> 00:20:25,900
so as you guys can see this is the

00:20:23,200 --> 00:20:29,890
spinnaker UI and we are in an

00:20:25,900 --> 00:20:32,380
application called demo and we have a

00:20:29,890 --> 00:20:34,720
few pipelines here we have in total of

00:20:32,380 --> 00:20:36,640
four at this moment the first one is the

00:20:34,720 --> 00:20:41,350
master pipeline so let's take a look at

00:20:36,640 --> 00:20:44,200
it from the configuration we can see

00:20:41,350 --> 00:20:49,090
that it is the pipeline will be

00:20:44,200 --> 00:20:50,820
triggered by a Jenkins job this the

00:20:49,090 --> 00:20:54,850
first stage of this pipeline is

00:20:50,820 --> 00:20:56,860
integration testing it is a sub pipeline

00:20:54,850 --> 00:20:59,740
that lives in the same application and

00:20:56,860 --> 00:21:03,550
it's called deploy to staging and run

00:20:59,740 --> 00:21:07,570
integration test which we'll go over it

00:21:03,550 --> 00:21:10,480
shortly so if the result of this stage

00:21:07,570 --> 00:21:14,470
is successful then we will move on to

00:21:10,480 --> 00:21:17,140
the canary analysis stage it is also a

00:21:14,470 --> 00:21:22,350
sub pipeline in the same application and

00:21:17,140 --> 00:21:25,830
it's called canary analysis we will

00:21:22,350 --> 00:21:29,650
we'll also go over the details shortly

00:21:25,830 --> 00:21:32,110
so if the result of the stage is marked

00:21:29,650 --> 00:21:38,160
as successful then we will move on to

00:21:32,110 --> 00:21:38,160
prod deploy which is also a sub pipeline

00:21:54,509 --> 00:22:05,369
okay first I'm going to I'm going to

00:21:59,820 --> 00:22:06,379
demo let's go over the individual sub

00:22:05,369 --> 00:22:13,109
pipelines

00:22:06,379 --> 00:22:15,949
the first one is integration test let's

00:22:13,109 --> 00:22:18,989
take a look at how we configure it so

00:22:15,949 --> 00:22:24,349
the first stage is deployed to death it

00:22:18,989 --> 00:22:24,349
is using our customized teletran stage

00:22:24,709 --> 00:22:31,440
as we can see in a corner and then down

00:22:29,789 --> 00:22:35,099
at the bottom we have to provide some

00:22:31,440 --> 00:22:37,049
teletraan configuration here we can see

00:22:35,099 --> 00:22:39,029
we provided the environment name which

00:22:37,049 --> 00:22:41,369
is how a world dummy service - server

00:22:39,029 --> 00:22:46,379
and then we have a stage name called

00:22:41,369 --> 00:22:47,969
death also we have some other

00:22:46,379 --> 00:22:50,699
information we have to provide some

00:22:47,969 --> 00:22:56,549
other information which is required by

00:22:50,699 --> 00:23:02,609
teletraan so if the deployment to death

00:22:56,549 --> 00:23:08,399
is successful we will then move on to

00:23:02,609 --> 00:23:10,769
the integration test stage so it is

00:23:08,399 --> 00:23:13,319
actually a essentially a Jenkins job

00:23:10,769 --> 00:23:15,529
that will be run against the dev

00:23:13,319 --> 00:23:15,529
environment

00:23:26,120 --> 00:23:35,179
so next we will go over the pipeline for

00:23:31,370 --> 00:23:37,429
the sub pipeline for canary analysis so

00:23:35,179 --> 00:23:40,850
the highlight of this demo is that the

00:23:37,429 --> 00:23:43,340
canary analysis report it can only be

00:23:40,850 --> 00:23:46,070
generated because of the extension we've

00:23:43,340 --> 00:23:49,309
built with Kayenta which enables

00:23:46,070 --> 00:23:51,950
spinnaker to talk to open TS DB we're

00:23:49,309 --> 00:23:53,740
metrics and store where metrics and

00:23:51,950 --> 00:24:03,590
stats are stored

00:23:53,740 --> 00:24:06,260
Pinterest so as we can see there are two

00:24:03,590 --> 00:24:09,289
stages that will be run in parallel to

00:24:06,260 --> 00:24:13,429
begin with they are deployed to control

00:24:09,289 --> 00:24:16,450
and deploy to canary so both of them are

00:24:13,429 --> 00:24:19,130
using our customized Hallett's on stage

00:24:16,450 --> 00:24:21,200
and then scroll down we can see the

00:24:19,130 --> 00:24:22,909
teletraan configuration there will be

00:24:21,200 --> 00:24:24,799
both deployed to the same environment

00:24:22,909 --> 00:24:27,970
which is hollow or dummy service that

00:24:24,799 --> 00:24:32,480
server the difference is the stage name

00:24:27,970 --> 00:24:35,110
for this one it will be control and some

00:24:32,480 --> 00:24:38,659
other tile training metadata information

00:24:35,110 --> 00:24:40,789
and for the deploy to cat canary one we

00:24:38,659 --> 00:24:47,450
just swap out the stage name and provide

00:24:40,789 --> 00:24:51,230
an input canary here so if both of the

00:24:47,450 --> 00:24:55,880
stages went well we will proceed to the

00:24:51,230 --> 00:24:58,850
canary analysis as we can see here there

00:24:55,880 --> 00:25:03,200
is some dependency that's provided by a

00:24:58,850 --> 00:25:05,720
spinnaker pipeline and this stage is

00:25:03,200 --> 00:25:08,720
using the spinnaker native canary

00:25:05,720 --> 00:25:10,520
analysis so we provide the canary

00:25:08,720 --> 00:25:14,000
analysis configuration here which is

00:25:10,520 --> 00:25:16,399
spinnaker in tag - test and we also

00:25:14,000 --> 00:25:18,620
provide the baseline and canary pair

00:25:16,399 --> 00:25:21,950
which are the two environments we just

00:25:18,620 --> 00:25:27,110
made the deployment to their canary and

00:25:21,950 --> 00:25:29,779
control we also customize the scoring

00:25:27,110 --> 00:25:32,720
stress hole here which will be used to

00:25:29,779 --> 00:25:35,590
decide if we want to mark the stage as

00:25:32,720 --> 00:25:35,590
passed or failed

00:25:37,870 --> 00:25:46,940
okay so now let's take a look at an

00:25:42,050 --> 00:25:50,990
example of the canary reports take this

00:25:46,940 --> 00:25:54,290
one it's an example it is marked as past

00:25:50,990 --> 00:25:58,400
but it's actually not 100% because we

00:25:54,290 --> 00:25:59,990
set the threshold as 75 and on the left

00:25:58,400 --> 00:26:03,080
side we can see there are a few metrics

00:25:59,990 --> 00:26:07,900
for cpu's memories and discs which you

00:26:03,080 --> 00:26:07,900
will be use for the actual evaluation

00:26:28,169 --> 00:26:33,600
and the last one is the sub deploy to

00:26:31,409 --> 00:26:37,080
prot sub pipeline so let's take a look

00:26:33,600 --> 00:26:43,889
at it it is also using the teletraan

00:26:37,080 --> 00:26:48,119
custom stage and it is also deployed to

00:26:43,889 --> 00:26:53,940
the same environment but this time the

00:26:48,119 --> 00:26:57,389
stage name is prod so if everything goes

00:26:53,940 --> 00:27:07,019
well then there we have our code

00:26:57,389 --> 00:27:09,389
successfully deploy to production okay

00:27:07,019 --> 00:27:11,759
so the demo pipeline we just show is

00:27:09,389 --> 00:27:15,359
actually mocked out from a production

00:27:11,759 --> 00:27:19,129
pipeline and I really like how spinnaker

00:27:15,359 --> 00:27:23,659
has enabled us to have a cleaner more

00:27:19,129 --> 00:27:23,659
organized way to configure things

00:27:30,660 --> 00:27:37,800
all right so in the next demo we will

00:27:35,640 --> 00:27:41,100
deep dive into the teletraan custom

00:27:37,800 --> 00:27:42,030
stage we build for spinnaker and if you

00:27:41,100 --> 00:27:45,410
already forgot

00:27:42,030 --> 00:27:49,140
teletraan is our house build deploy tool

00:27:45,410 --> 00:27:51,690
so this is the UI of teletraan and as

00:27:49,140 --> 00:27:54,120
you can see on the top the environment

00:27:51,690 --> 00:27:58,250
name is hello world ami service - server

00:27:54,120 --> 00:28:05,150
and we are in this we're at the stage

00:27:58,250 --> 00:28:12,390
called dev and we will show you our

00:28:05,150 --> 00:28:15,150
deploy history so as we can see the last

00:28:12,390 --> 00:28:20,310
deploy was done in November 15th around

00:28:15,150 --> 00:28:29,550
7:15 p.m. and we are going to make a new

00:28:20,310 --> 00:28:31,260
deploy through spinnaker UI so now we

00:28:29,550 --> 00:28:35,460
can see we have created a new pipeline

00:28:31,260 --> 00:28:41,780
called how it ran custom stage and let's

00:28:35,460 --> 00:28:45,060
take a look at what it does so very

00:28:41,780 --> 00:28:48,390
straightforward same tower on custom

00:28:45,060 --> 00:28:53,910
stage same environment name and the

00:28:48,390 --> 00:28:55,830
stage will be deaf and I'm going to

00:28:53,910 --> 00:29:02,420
start a manual

00:28:55,830 --> 00:29:06,780
I will paste in a teletraan build ID and

00:29:02,420 --> 00:29:08,970
I'm going to click run so we have a new

00:29:06,780 --> 00:29:16,080
pipeline - just got kicked off and the

00:29:08,970 --> 00:29:17,580
status shows running and then meanwhile

00:29:16,080 --> 00:29:23,730
we can also look at the execution

00:29:17,580 --> 00:29:32,310
details and we will go back to teletraan

00:29:23,730 --> 00:29:34,380
UI do a refresh and then we can see that

00:29:32,310 --> 00:29:40,350
a new deploy was actually kicked off and

00:29:34,380 --> 00:29:44,120
the operator was me so the state is

00:29:40,350 --> 00:29:47,669
still shown as running

00:29:44,120 --> 00:29:50,880
because the deploy is actually going to

00:29:47,669 --> 00:29:56,159
take some time I decided to break down

00:29:50,880 --> 00:30:01,200
the recording into two parts so after a

00:29:56,159 --> 00:30:02,820
little bit we refresh the page and then

00:30:01,200 --> 00:30:05,399
we noticed that the deploy the last

00:30:02,820 --> 00:30:08,010
deployment by myself was already

00:30:05,399 --> 00:30:10,380
succeeding and then let's go back to

00:30:08,010 --> 00:30:16,320
spinnaker UI and then we can also see

00:30:10,380 --> 00:30:18,779
the status has been updated succeeded in

00:30:16,320 --> 00:30:23,630
the details section we can see their

00:30:18,779 --> 00:30:28,320
start at time stand is around 7:30 431

00:30:23,630 --> 00:30:31,200
p.m. and then from the teletraan deploy

00:30:28,320 --> 00:30:34,679
history UI page it is showing as

00:30:31,200 --> 00:30:37,049
consistent we have other

00:30:34,679 --> 00:30:39,570
teletraan configuration information and

00:30:37,049 --> 00:30:41,789
also link that will bring us back to the

00:30:39,570 --> 00:30:52,169
telephone stage we just made the

00:30:41,789 --> 00:30:54,690
deployment - alright so so that was how

00:30:52,169 --> 00:30:58,080
we integrate Pinterest lost his

00:30:54,690 --> 00:31:02,630
spinnaker and then the OS detail was

00:30:58,080 --> 00:31:02,630
passed down to teletraan from spinnaker

00:31:15,250 --> 00:31:21,700
but in most of the cases we want to be

00:31:18,010 --> 00:31:24,220
more hands-off therefore we also have a

00:31:21,700 --> 00:31:27,700
way to support CI pipelines to trigger

00:31:24,220 --> 00:31:29,919
spinnaker pipelines majority of the CI

00:31:27,700 --> 00:31:34,090
pipelines here at Pinterest are running

00:31:29,919 --> 00:31:37,679
on Jenkins so let's take a look so we're

00:31:34,090 --> 00:31:41,590
in the same environment again same stage

00:31:37,679 --> 00:31:44,799
the last deploy was the deploy that we

00:31:41,590 --> 00:31:47,980
just showed you guys and then that's

00:31:44,799 --> 00:31:50,169
let's make a new one we're going to use

00:31:47,980 --> 00:31:57,120
the spinnaker pipeline called Jenkins

00:31:50,169 --> 00:32:01,559
Auto trigger this time and as we can see

00:31:57,120 --> 00:32:04,270
it posted status of a Jenkins job and

00:32:01,559 --> 00:32:08,200
once the job has been completed this

00:32:04,270 --> 00:32:11,080
pipeline will be triggered so let's swap

00:32:08,200 --> 00:32:16,510
to the Jenkins job it is called

00:32:11,080 --> 00:32:24,909
spinnaker script we are going to make a

00:32:16,510 --> 00:32:28,120
new build so as we can see on the left

00:32:24,909 --> 00:32:32,919
side 1:55 is the one that was just

00:32:28,120 --> 00:32:36,070
kicked off and then completed it was it

00:32:32,919 --> 00:32:38,110
was pretty straightforward so go back to

00:32:36,070 --> 00:32:45,070
the spinnaker you are and then do a

00:32:38,110 --> 00:32:47,710
refresh there we have the pipeline

00:32:45,070 --> 00:32:50,320
that's been triggered and then we can

00:32:47,710 --> 00:32:52,450
see that it was triggered by a Jenkins

00:32:50,320 --> 00:32:57,280
job call spinnaker script which is

00:32:52,450 --> 00:33:01,720
consistent and then we can go back to

00:32:57,280 --> 00:33:04,720
the telephone UI do a refresh and we can

00:33:01,720 --> 00:33:07,929
see that a new deploy has been triggered

00:33:04,720 --> 00:33:10,150
the operator is show as token which

00:33:07,929 --> 00:33:12,960
indicates that it was actually triggered

00:33:10,150 --> 00:33:12,960
by a Jenkins job

00:33:23,880 --> 00:33:30,780
all right so similarly because the demo

00:33:26,970 --> 00:33:34,049
the deploy is going to take some time I

00:33:30,780 --> 00:33:37,309
break it into two part so after a little

00:33:34,049 --> 00:33:41,160
bit this deploy also has also finished

00:33:37,309 --> 00:33:43,980
so if we go back to the spinnaker UI we

00:33:41,160 --> 00:33:50,010
can see that the status of this pipeline

00:33:43,980 --> 00:33:52,490
has also been updated to succeeded and

00:33:50,010 --> 00:33:56,669
then we can quickly check the time stamp

00:33:52,490 --> 00:34:06,780
and yep that was the one that was kicked

00:33:56,669 --> 00:34:09,869
off by Tao a spinnaker cool so we have

00:34:06,780 --> 00:34:13,490
cover a few demos previously and they

00:34:09,869 --> 00:34:15,800
are production mach pipeline and some

00:34:13,490 --> 00:34:17,469
customization and extensions with boat

00:34:15,800 --> 00:34:20,569
and

00:34:17,469 --> 00:34:20,569
[Music]

00:34:31,419 --> 00:34:38,109
so some closing thoughts so we really

00:34:35,559 --> 00:34:38,679
have come a long way to get to where we

00:34:38,109 --> 00:34:42,039
are today

00:34:38,679 --> 00:34:44,619
and we really appreciate that spinnaker

00:34:42,039 --> 00:34:48,069
has the introduction of spinnaker has

00:34:44,619 --> 00:34:50,829
helped us by a lot to solve the problems

00:34:48,069 --> 00:34:54,730
we faced there are the time-consuming

00:34:50,829 --> 00:34:58,390
and the error-prone and a lot of manual

00:34:54,730 --> 00:35:00,519
effort involved CD pipelines and then we

00:34:58,390 --> 00:35:04,480
are still we're still building more on

00:35:00,519 --> 00:35:06,849
top of spinnaker which is Hermes which

00:35:04,480 --> 00:35:08,710
will eventually which will be the

00:35:06,849 --> 00:35:10,630
interface that wraps around spinnaker

00:35:08,710 --> 00:35:14,380
and still use the spinnaker as the

00:35:10,630 --> 00:35:17,920
orchestration engine so the ideal goal

00:35:14,380 --> 00:35:20,170
we want to achieve is that we can enable

00:35:17,920 --> 00:35:23,109
the developers to be more production

00:35:20,170 --> 00:35:26,079
productive and efficient at work during

00:35:23,109 --> 00:35:29,039
their work time and then they can enjoy

00:35:26,079 --> 00:35:36,519
their life better after hours

00:35:29,039 --> 00:35:40,269
thank you so now we're going to host a

00:35:36,519 --> 00:35:43,359
Q&A session and our welcome Rainie back

00:35:40,269 --> 00:35:46,529
to the stage I'll hand the mic to

00:35:43,359 --> 00:35:46,529
whoever has questions

00:35:53,970 --> 00:36:02,999
so I I noticed that in your pipeline

00:36:00,099 --> 00:36:06,670
that does the canary analysis first you

00:36:02,999 --> 00:36:09,069
deploy your apps into dev and moments

00:36:06,670 --> 00:36:11,529
and after the canary and understand you

00:36:09,069 --> 00:36:14,769
promote it to pro so does it implies

00:36:11,529 --> 00:36:17,440
that during that process you already

00:36:14,769 --> 00:36:21,749
shift the traffic shift some traffic to

00:36:17,440 --> 00:36:25,359
the dev ed Mama's together the statistic

00:36:21,749 --> 00:36:26,829
solo question is canary analysis was

00:36:25,359 --> 00:36:29,319
running between the every environment

00:36:26,829 --> 00:36:30,999
and production environment right where

00:36:29,319 --> 00:36:34,839
does the request come from is what I'm

00:36:30,999 --> 00:36:37,210
saying okay so here is our master

00:36:34,839 --> 00:36:39,069
pipeline from our master pipeline we

00:36:37,210 --> 00:36:40,930
were wrong integration test stop

00:36:39,069 --> 00:36:43,029
pipeline that's the pipeline were wrong

00:36:40,930 --> 00:36:46,029
all the tests and every environment

00:36:43,029 --> 00:36:48,700
after that we will go to the canary

00:36:46,029 --> 00:36:51,700
analysis stage which wrong test against

00:36:48,700 --> 00:36:54,039
canary and the control on these two

00:36:51,700 --> 00:36:56,019
stages we compare the result if

00:36:54,039 --> 00:36:59,859
everything looks good it will eventually

00:36:56,019 --> 00:37:02,289
deploy to prod stage so the request only

00:36:59,859 --> 00:37:08,799
comes from the innovation test not from

00:37:02,289 --> 00:37:11,279
the real traffic yeah any other

00:37:08,799 --> 00:37:11,279
questions

00:37:12,970 --> 00:37:16,780
just out of curiosity what was the

00:37:15,010 --> 00:37:19,030
effort and what would you recommend the

00:37:16,780 --> 00:37:20,740
community do to improve the ability to

00:37:19,030 --> 00:37:22,420
integrate and do the changes you did on

00:37:20,740 --> 00:37:25,930
spinnaker say to integrate with your

00:37:22,420 --> 00:37:27,940
deploy system any lessons learned from

00:37:25,930 --> 00:37:30,460
that effort maybe talk about how long it

00:37:27,940 --> 00:37:32,080
took and what could be done easier by

00:37:30,460 --> 00:37:36,910
the community so such efforts in the

00:37:32,080 --> 00:37:39,570
future I easier to customize yeah I

00:37:36,910 --> 00:37:43,060
think the pain point during our

00:37:39,570 --> 00:37:46,390
customization is integrated current how

00:37:43,060 --> 00:37:49,360
is open DSD be because it touched two

00:37:46,390 --> 00:37:52,570
part first one is that Kayenta it's a

00:37:49,360 --> 00:37:54,970
dependent module imported into their

00:37:52,570 --> 00:37:58,150
code and the second part is current our

00:37:54,970 --> 00:38:00,730
code base so if community could provide

00:37:58,150 --> 00:38:04,770
a better way to build their kaientai

00:38:00,730 --> 00:38:08,380
code into their code and we can easily

00:38:04,770 --> 00:38:12,280
import instead of rebuild UCR and those

00:38:08,380 --> 00:38:15,100
commands that will help us a lot yeah

00:38:12,280 --> 00:38:18,010
also maybe we need to figure out an easy

00:38:15,100 --> 00:38:20,260
way to merging our own customers that

00:38:18,010 --> 00:38:26,590
can interchange in to upstream we

00:38:20,260 --> 00:38:29,620
haven't done that yet yeah if we do some

00:38:26,590 --> 00:38:39,120
customization we have to on top of the

00:38:29,620 --> 00:38:39,120
upstream Culver's you knows

00:38:43,269 --> 00:38:47,829
I noticed you have mentioned two

00:38:44,859 --> 00:38:49,750
applications teletran and are those open

00:38:47,829 --> 00:38:52,269
source or is it only for interest

00:38:49,750 --> 00:38:54,369
territory the open source if you check

00:38:52,269 --> 00:38:54,910
it out territory you will find our code

00:38:54,369 --> 00:38:58,720
base

00:38:54,910 --> 00:39:03,279
it's a deployment system to a diverse VM

00:38:58,720 --> 00:39:04,510
feel free to download and use it also

00:39:03,279 --> 00:39:05,769
could you tell us about KY enter a

00:39:04,510 --> 00:39:08,349
little bit more so what is the

00:39:05,769 --> 00:39:11,890
requirements for a canary to pass is it

00:39:08,349 --> 00:39:16,690
just based on CPU and memory or anything

00:39:11,890 --> 00:39:19,599
else oh so for the requirement service

00:39:16,690 --> 00:39:22,420
owner can import different metrics from

00:39:19,599 --> 00:39:27,039
our metric store they can set up like

00:39:22,420 --> 00:39:29,920
CPU memory or even SSR job like those

00:39:27,039 --> 00:39:32,319
kind of metrics and they can set have a

00:39:29,920 --> 00:39:35,309
threshold at the school if all these

00:39:32,319 --> 00:39:41,940
metrics pass or score we will mark this

00:39:35,309 --> 00:39:41,940
canary analysis report good thank you

00:39:42,539 --> 00:39:50,400
any others last call

00:39:47,559 --> 00:39:53,619
all right Thank You Rainier Jess

00:39:50,400 --> 00:39:53,619

YouTube URL: https://www.youtube.com/watch?v=Hf_KVVfQFdk


