Title: Ethan Rogers "Making Spinnaker Your Own (Armory)" - Spinnaker Summit 2019
Publication date: 2019-12-03
Playlist: Spinnaker Summit 2019
Description: 
	The third annual Spinnaker Summit (Diamond Sponsors: Netflix, Google and Armory) was held at the Hard Rock Hotel in San Diego, CA from November 15-17, 2019 and welcomed over 500 members of the rapidly growing Spinnaker open source community.
Captions: 
	00:00:06,330 --> 00:00:10,980
[Laughter]

00:00:15,150 --> 00:00:20,039
so thanks everyone for coming to this

00:00:16,590 --> 00:00:21,750
talk as he just said my name is Ethan

00:00:20,039 --> 00:00:24,990
Rogers I'm a staff staff software

00:00:21,750 --> 00:00:26,430
engineer at armory co-lead of the

00:00:24,990 --> 00:00:29,340
kubernetes sig and I've been working on

00:00:26,430 --> 00:00:31,619
spinnaker for the last three years and a

00:00:29,340 --> 00:00:33,570
lot of what I've worked on the last

00:00:31,619 --> 00:00:34,650
three years is related to this area so

00:00:33,570 --> 00:00:38,760
it's something I'm super passionate

00:00:34,650 --> 00:00:42,150
about and wanted to share with everyone

00:00:38,760 --> 00:00:44,250
kind of what I've found that helps kind

00:00:42,150 --> 00:00:47,910
of make spinnaker fit your organization

00:00:44,250 --> 00:00:50,309
so it's kind of a short agenda today

00:00:47,910 --> 00:00:52,829
there will be a live demo so if you pray

00:00:50,309 --> 00:00:55,590
to the demo gods eye please send one up

00:00:52,829 --> 00:00:57,780
for me we'll talk a little bit about

00:00:55,590 --> 00:00:59,789
background and like why extensibility is

00:00:57,780 --> 00:01:01,520
important and then we'll talk a little

00:00:59,789 --> 00:01:04,890
bit about the implementation

00:01:01,520 --> 00:01:08,700
specifically around run job and web hook

00:01:04,890 --> 00:01:10,789
and how you can you can use that so

00:01:08,700 --> 00:01:12,720
let's talk a little bit about background

00:01:10,789 --> 00:01:14,580
when you when you talk about

00:01:12,720 --> 00:01:17,369
extensibility you start asking the

00:01:14,580 --> 00:01:19,170
question what is extensibility is

00:01:17,369 --> 00:01:21,660
specifically within the context of

00:01:19,170 --> 00:01:24,360
spinnaker most off-the-shelf products

00:01:21,660 --> 00:01:25,950
it's like a one size fits most right so

00:01:24,360 --> 00:01:27,599
there's I don't think anyone in this

00:01:25,950 --> 00:01:29,369
room has ever been able to pull some

00:01:27,599 --> 00:01:31,770
software off the shelf and it fit

00:01:29,369 --> 00:01:33,599
exactly their use case 100% of the time

00:01:31,770 --> 00:01:37,080
and so when you start talking about

00:01:33,599 --> 00:01:40,020
adoption of software whether it be

00:01:37,080 --> 00:01:43,319
spinnaker kubernetes Jenkins whatever

00:01:40,020 --> 00:01:46,349
you want to kind of say it's how can I

00:01:43,319 --> 00:01:48,149
make it fit the requirements and the

00:01:46,349 --> 00:01:51,330
constraints that I have and the rest of

00:01:48,149 --> 00:01:52,950
my organization has most of the time

00:01:51,330 --> 00:01:55,110
that's implemented is like a plugin

00:01:52,950 --> 00:01:57,479
right so Jenkins has plugins you you can

00:01:55,110 --> 00:02:00,420
plug functionality into systems to

00:01:57,479 --> 00:02:02,610
provide this kind of custom workflow or

00:02:00,420 --> 00:02:04,800
custom you know code that you actually

00:02:02,610 --> 00:02:07,860
need to run and it really comes in a lot

00:02:04,800 --> 00:02:10,080
of forms most kind of the most easily

00:02:07,860 --> 00:02:13,470
adoptable one is web hooks so most

00:02:10,080 --> 00:02:15,510
systems today like github as they

00:02:13,470 --> 00:02:18,360
provide you like an external way to

00:02:15,510 --> 00:02:20,550
trigger some internal system this might

00:02:18,360 --> 00:02:22,860
be you know web hooks or some scripting

00:02:20,550 --> 00:02:24,750
or some native extension like the

00:02:22,860 --> 00:02:27,270
plugins work that we're currently doing

00:02:24,750 --> 00:02:27,690
for spinnaker but the most important

00:02:27,270 --> 00:02:30,300
thing to

00:02:27,690 --> 00:02:32,910
realizes that needs very and if you are

00:02:30,300 --> 00:02:35,370
building a software platform for may be

00:02:32,910 --> 00:02:38,580
internal consumers or external consumers

00:02:35,370 --> 00:02:43,610
you want to provide options not everyone

00:02:38,580 --> 00:02:45,840
needs as deep integrations as some other

00:02:43,610 --> 00:02:49,830
platforms provide so you want to be able

00:02:45,840 --> 00:02:53,310
to satisfy the the needs of users non

00:02:49,830 --> 00:02:54,960
power users and power users alike so

00:02:53,310 --> 00:02:56,220
let's talk about example as I mentioned

00:02:54,960 --> 00:02:58,980
Jenkins already but kubernetes

00:02:56,220 --> 00:03:00,690
kubernetes is probably one of the most

00:02:58,980 --> 00:03:02,730
platform well prop products on the

00:03:00,690 --> 00:03:04,710
market today and they have so many

00:03:02,730 --> 00:03:07,500
different ways to do extensions you have

00:03:04,710 --> 00:03:10,500
CR DS admission controllers mutating

00:03:07,500 --> 00:03:12,720
webhooks operators usually kind of plays

00:03:10,500 --> 00:03:15,870
into a lot of these things and gives you

00:03:12,720 --> 00:03:18,960
a way to extend drone CI provides

00:03:15,870 --> 00:03:20,850
plugins as docker containers so you can

00:03:18,960 --> 00:03:22,650
write whatever your extension is that

00:03:20,850 --> 00:03:24,870
you need package it as a docker

00:03:22,650 --> 00:03:27,120
container and whatever runtime that you

00:03:24,870 --> 00:03:30,180
need so that's also another really

00:03:27,120 --> 00:03:31,650
popular way of extending we talked about

00:03:30,180 --> 00:03:34,500
this a little bit already but just to

00:03:31,650 --> 00:03:37,410
kind of dive into it farther why do we

00:03:34,500 --> 00:03:40,739
need extensibility specifically around

00:03:37,410 --> 00:03:43,440
the area of software delivery and even

00:03:40,739 --> 00:03:45,150
farther continuous integration so

00:03:43,440 --> 00:03:47,010
software delivery is where the rubber

00:03:45,150 --> 00:03:49,170
meets the road I've been talking about

00:03:47,010 --> 00:03:52,680
this with a lot of people lately if you

00:03:49,170 --> 00:03:55,760
look at software delivery and continuous

00:03:52,680 --> 00:03:57,930
integration as two distinct things

00:03:55,760 --> 00:04:00,870
continuous integration is kind of where

00:03:57,930 --> 00:04:02,940
the lowest amount of risk is if your

00:04:00,870 --> 00:04:04,950
build fails if your test fails you're

00:04:02,940 --> 00:04:06,930
not really affecting anybody who's

00:04:04,950 --> 00:04:08,730
paying you you're affecting people that

00:04:06,930 --> 00:04:10,800
you pay because they're trying to work

00:04:08,730 --> 00:04:12,269
on that those systems but the people who

00:04:10,800 --> 00:04:14,600
are using the systems and benefit

00:04:12,269 --> 00:04:16,980
getting value from them are not affected

00:04:14,600 --> 00:04:18,870
software delivery continuous delivery

00:04:16,980 --> 00:04:21,870
continuous deployment on the other hand

00:04:18,870 --> 00:04:24,870
if you have a bad deployment a lot of

00:04:21,870 --> 00:04:29,010
people are gonna know so being able to

00:04:24,870 --> 00:04:31,790
extend your tools to help you have

00:04:29,010 --> 00:04:34,169
better deployments is really critical

00:04:31,790 --> 00:04:36,380
spinnaker is a platform right a lot of

00:04:34,169 --> 00:04:39,090
people that I talk to use spinnaker as a

00:04:36,380 --> 00:04:40,990
as a single pane of glass right they

00:04:39,090 --> 00:04:43,210
want it to be the

00:04:40,990 --> 00:04:47,200
in the spoke of all of the other tools

00:04:43,210 --> 00:04:51,550
that they use and spinnaker provides

00:04:47,200 --> 00:04:53,620
this safety around deployments but a

00:04:51,550 --> 00:04:55,210
term that I hear a lot right we have

00:04:53,620 --> 00:04:57,520
deployments but what about releases

00:04:55,210 --> 00:04:59,350
think deployments are a single you take

00:04:57,520 --> 00:05:03,430
a single binary and put it in a single

00:04:59,350 --> 00:05:05,140
environment but as we progress and we

00:05:03,430 --> 00:05:07,750
reach more scale and we have more

00:05:05,140 --> 00:05:09,430
environments we start have to having to

00:05:07,750 --> 00:05:11,410
think about how do we release software

00:05:09,430 --> 00:05:13,240
across those environments Netflix is

00:05:11,410 --> 00:05:15,190
talking a lot about manage delivery and

00:05:13,240 --> 00:05:16,900
that's really kind of the idea that

00:05:15,190 --> 00:05:20,290
they're playing into is how do we

00:05:16,900 --> 00:05:22,060
orchestrate this delivery across all of

00:05:20,290 --> 00:05:23,490
these different environments and so we

00:05:22,060 --> 00:05:25,540
can think about that as releases

00:05:23,490 --> 00:05:28,210
everyone's got different workflows so

00:05:25,540 --> 00:05:30,280
stateful applications external testing

00:05:28,210 --> 00:05:32,560
systems artifact promotion checks and

00:05:30,280 --> 00:05:35,140
balances all of these are needs custom

00:05:32,560 --> 00:05:36,850
needs generally that organizations have

00:05:35,140 --> 00:05:40,240
when they start thinking about software

00:05:36,850 --> 00:05:41,530
releasing and software deployments one

00:05:40,240 --> 00:05:44,350
of the interesting things too about

00:05:41,530 --> 00:05:46,090
spinnaker is that what you see an open

00:05:44,350 --> 00:05:50,200
source is actually just the tip of the

00:05:46,090 --> 00:05:53,710
iceberg I don't see any Netflix folks

00:05:50,200 --> 00:05:55,690
here but I was sitting in a meeting a

00:05:53,710 --> 00:05:58,090
few weeks ago and somebody made the

00:05:55,690 --> 00:05:59,800
point that spinnaker isn't not sticky at

00:05:58,090 --> 00:06:02,140
Netflix just because the deployments

00:05:59,800 --> 00:06:03,340
it's sticky at Netflix because of all of

00:06:02,140 --> 00:06:04,960
the different systems that in it

00:06:03,340 --> 00:06:06,910
integrates and we were talking about

00:06:04,960 --> 00:06:08,860
that just a minute ago we want spinner

00:06:06,910 --> 00:06:10,360
here to be the hub at the center of this

00:06:08,860 --> 00:06:13,060
universe of tools that we have and

00:06:10,360 --> 00:06:14,860
that's really where the extensibility

00:06:13,060 --> 00:06:17,350
and power of spinnaker comes into play

00:06:14,860 --> 00:06:21,730
because we can start to make it for our

00:06:17,350 --> 00:06:23,620
companies so what are our requirements

00:06:21,730 --> 00:06:27,460
for extension right and I think it's

00:06:23,620 --> 00:06:30,370
really simple the it should be easy to

00:06:27,460 --> 00:06:32,500
use right if we are a company that wants

00:06:30,370 --> 00:06:35,520
to do some extension but we don't want

00:06:32,500 --> 00:06:38,320
to be writing custom Java code or

00:06:35,520 --> 00:06:41,020
integrating with deck the UI we need it

00:06:38,320 --> 00:06:42,970
to be easy and easy to consume out of

00:06:41,020 --> 00:06:45,670
the box we also want to be able to push

00:06:42,970 --> 00:06:48,520
data in and pull data out what I mean by

00:06:45,670 --> 00:06:51,940
this is we have our pipelines have rich

00:06:48,520 --> 00:06:53,960
rich information and the work we need to

00:06:51,940 --> 00:06:55,340
do the extensions that we need me

00:06:53,960 --> 00:06:57,740
to be able to act on this information

00:06:55,340 --> 00:07:00,050
somehow but it also needs to be able to

00:06:57,740 --> 00:07:01,850
tell us what did we do what did we

00:07:00,050 --> 00:07:05,330
transform what artifacts did we push

00:07:01,850 --> 00:07:07,460
into a into something or what you know

00:07:05,330 --> 00:07:09,530
what did we do as part of this stage so

00:07:07,460 --> 00:07:11,240
that other extensions or native

00:07:09,530 --> 00:07:13,370
spinnaker stages can take advantage of

00:07:11,240 --> 00:07:15,289
that information so to me those are the

00:07:13,370 --> 00:07:16,910
kind of the three key things that we

00:07:15,289 --> 00:07:22,400
need to think about when we think about

00:07:16,910 --> 00:07:25,460
extension so when companies usually go

00:07:22,400 --> 00:07:27,229
down this route a stage is the like the

00:07:25,460 --> 00:07:29,030
first thing that comes to mind it's the

00:07:27,229 --> 00:07:31,070
thing that we use every single day we're

00:07:29,030 --> 00:07:33,650
building pipelines with stages and it

00:07:31,070 --> 00:07:37,900
really fits this kind of model that all

00:07:33,650 --> 00:07:40,550
of us as software engineers fit into so

00:07:37,900 --> 00:07:42,380
that's kind of where I'm gonna focus on

00:07:40,550 --> 00:07:45,020
in this talk we're gonna talk a lot

00:07:42,380 --> 00:07:48,650
about stages and how we can build stages

00:07:45,020 --> 00:07:50,120
that extend our workflows so let's talk

00:07:48,650 --> 00:07:52,250
about making in your making it your own

00:07:50,120 --> 00:07:53,509
we talked I said at the title of this

00:07:52,250 --> 00:07:56,630
slide that we're going to talk about web

00:07:53,509 --> 00:07:58,759
hooks and run job show of hands how many

00:07:56,630 --> 00:08:01,880
of you are using web hook stages and

00:07:58,759 --> 00:08:04,310
your pipelines okay what about the run

00:08:01,880 --> 00:08:06,289
job stage if you're using kubernetes you

00:08:04,310 --> 00:08:07,300
probably knew how about I'm gonna talk

00:08:06,289 --> 00:08:08,960
about this in a second what about

00:08:07,300 --> 00:08:11,750
pre-configured web hooks or

00:08:08,960 --> 00:08:13,610
pre-configured run jobs okay awesome

00:08:11,750 --> 00:08:15,770
that's great well I hope you guys get

00:08:13,610 --> 00:08:18,710
something from this today so we'll talk

00:08:15,770 --> 00:08:20,690
about web web hook stages first they are

00:08:18,710 --> 00:08:23,330
in my mind this simplest form of

00:08:20,690 --> 00:08:25,099
extension right everyone in this room

00:08:23,330 --> 00:08:28,669
has probably written a curl request at

00:08:25,099 --> 00:08:33,020
some point or called some API with a web

00:08:28,669 --> 00:08:35,539
hook or an HTTP call what it lets us do

00:08:33,020 --> 00:08:37,130
is call out to an API during pipelining

00:08:35,539 --> 00:08:39,169
execution and this is probably the

00:08:37,130 --> 00:08:41,839
simplest way to integrate with external

00:08:39,169 --> 00:08:43,729
systems everything today is an API if

00:08:41,839 --> 00:08:46,209
you don't have an API your software's

00:08:43,729 --> 00:08:48,260
probably not getting used and so

00:08:46,209 --> 00:08:50,839
spinnaker being able to interact in this

00:08:48,260 --> 00:08:53,690
way is actually super valuable some use

00:08:50,839 --> 00:08:54,920
cases I've seen with armory customers

00:08:53,690 --> 00:08:55,370
and people that I work with in the

00:08:54,920 --> 00:08:57,800
community

00:08:55,370 --> 00:09:01,550
kicking off integration tests on custom

00:08:57,800 --> 00:09:03,170
systems ServiceNow is a huge one in kind

00:09:01,550 --> 00:09:05,870
of the larger organizations that I've

00:09:03,170 --> 00:09:07,769
worked with and obviously we don't have

00:09:05,870 --> 00:09:11,160
a native integration so we use the web

00:09:07,769 --> 00:09:13,800
staged to support that some kind of

00:09:11,160 --> 00:09:16,949
brief details we support any HTTP method

00:09:13,800 --> 00:09:18,300
you can send a payload one of the really

00:09:16,949 --> 00:09:20,790
cool things that we can do is wait until

00:09:18,300 --> 00:09:22,800
the thing is complete so if you fire off

00:09:20,790 --> 00:09:25,559
a request we'll pull an endpoint that

00:09:22,800 --> 00:09:29,670
you specify and you can actually have

00:09:25,559 --> 00:09:32,939
this kind of long-running stage and it

00:09:29,670 --> 00:09:34,889
works really simply so you make a post

00:09:32,939 --> 00:09:36,569
to kick off the thing to your

00:09:34,889 --> 00:09:39,899
integration service and that thing

00:09:36,569 --> 00:09:42,540
returns JSON it's yeah it's a pretty

00:09:39,899 --> 00:09:45,299
simple thing to understand but it's a

00:09:42,540 --> 00:09:47,009
really powerful thing that we can use so

00:09:45,299 --> 00:09:50,249
here's a screenshot I don't know how

00:09:47,009 --> 00:09:52,739
easy that is to seen them back but yeah

00:09:50,249 --> 00:09:54,839
you can specify your URL your method any

00:09:52,739 --> 00:09:58,619
statuses that should fail the stage fast

00:09:54,839 --> 00:10:00,959
in a payload you can use the expression

00:09:58,619 --> 00:10:02,759
language in that payload so again you

00:10:00,959 --> 00:10:06,989
can pull data out of the pipeline and

00:10:02,759 --> 00:10:08,639
send it off into your extension so to

00:10:06,989 --> 00:10:10,049
kind of like tie it back to the kind of

00:10:08,639 --> 00:10:12,629
requirements that we just thought we

00:10:10,049 --> 00:10:15,209
defined it's easy to use right we said

00:10:12,629 --> 00:10:17,069
this already most people in software

00:10:15,209 --> 00:10:18,869
engineering have made an HTTP call at

00:10:17,069 --> 00:10:22,799
one point you can integrate with all of

00:10:18,869 --> 00:10:24,809
your api's pushing data in do it be a

00:10:22,799 --> 00:10:26,160
payload pull data out your response body

00:10:24,809 --> 00:10:30,059
from your web hook call gets injected

00:10:26,160 --> 00:10:32,189
into the pipeline pretty simple so what

00:10:30,059 --> 00:10:34,949
about jobs you've probably heard me talk

00:10:32,189 --> 00:10:36,480
about this or read a blog post that I've

00:10:34,949 --> 00:10:41,490
written on this or seen a PR that I

00:10:36,480 --> 00:10:43,529
submitted just let's talk about jobs and

00:10:41,490 --> 00:10:45,869
generally there's this concept of batch

00:10:43,529 --> 00:10:48,540
jobs right if you have written software

00:10:45,869 --> 00:10:50,549
or you are responsible for operating

00:10:48,540 --> 00:10:52,679
software you've got what I like to call

00:10:50,549 --> 00:10:55,139
persistent workloads and then non

00:10:52,679 --> 00:10:57,329
persistent workloads or batch jobs and

00:10:55,139 --> 00:10:59,220
they're used to perform like bursty

00:10:57,329 --> 00:11:01,230
chunks of work and they run frequently

00:10:59,220 --> 00:11:04,499
but not continually they have a life

00:11:01,230 --> 00:11:06,689
sign a life span they start they do some

00:11:04,499 --> 00:11:09,449
work and then they die one of the

00:11:06,689 --> 00:11:11,369
interesting and unique things I think

00:11:09,449 --> 00:11:12,899
about batch jobs is they're usually

00:11:11,369 --> 00:11:15,569
written in whatever language you want

00:11:12,899 --> 00:11:18,449
especially with with docker being so

00:11:15,569 --> 00:11:20,069
pronounced in the industry you just

00:11:18,449 --> 00:11:20,800
package your runtime and your software

00:11:20,069 --> 00:11:23,380
and then you

00:11:20,800 --> 00:11:25,660
execute that docker container they're

00:11:23,380 --> 00:11:28,000
triggered by some external event be a

00:11:25,660 --> 00:11:30,610
cron a web hook and event queue maybe

00:11:28,000 --> 00:11:32,350
new data is available batch jobs have

00:11:30,610 --> 00:11:33,940
historically been used to process data

00:11:32,350 --> 00:11:37,269
it's a way that we can do data

00:11:33,940 --> 00:11:39,880
transformations and there parameterised

00:11:37,269 --> 00:11:42,040
so you may have a batch job that takes

00:11:39,880 --> 00:11:45,010
some set of arguments and depending on

00:11:42,040 --> 00:11:48,670
that set of arguments changes dude does

00:11:45,010 --> 00:11:51,790
something different does it sound like

00:11:48,670 --> 00:11:55,829
CI because that's really what we've been

00:11:51,790 --> 00:11:59,980
doing with CI for the last ten years so

00:11:55,829 --> 00:12:02,260
we kind of had you know these

00:11:59,980 --> 00:12:04,420
conversations internally an armory this

00:12:02,260 --> 00:12:05,920
year where it was we saw a lot of

00:12:04,420 --> 00:12:08,380
different products coming on the scene

00:12:05,920 --> 00:12:10,660
we're running a container was just like

00:12:08,380 --> 00:12:12,279
par for the course right if you had a

00:12:10,660 --> 00:12:14,140
platform that integrated with kubernetes

00:12:12,279 --> 00:12:17,589
running a container to do some type of

00:12:14,140 --> 00:12:21,550
work was what users were looking for as

00:12:17,589 --> 00:12:23,529
a way of extending so previously to the

00:12:21,550 --> 00:12:25,600
work that we did this year the

00:12:23,529 --> 00:12:28,240
kubernetes v1 provider had a run job

00:12:25,600 --> 00:12:31,540
staged the tightest provider had a run

00:12:28,240 --> 00:12:34,390
job stage but it just never was

00:12:31,540 --> 00:12:36,190
implemented for kubernetes v2 show of

00:12:34,390 --> 00:12:39,370
hands who here is using the v2 provider

00:12:36,190 --> 00:12:42,940
for kubernetes okay so roughly half the

00:12:39,370 --> 00:12:44,320
room so that's what we set out to do we

00:12:42,940 --> 00:12:47,260
set out to kind of fulfill that

00:12:44,320 --> 00:12:49,990
interface and meet that need and that's

00:12:47,260 --> 00:12:52,420
what I will be showing in the demo and

00:12:49,990 --> 00:12:55,510
the cool thing about it is is it's

00:12:52,420 --> 00:12:57,940
accessible it doesn't matter what

00:12:55,510 --> 00:12:59,950
language your developers or what

00:12:57,940 --> 00:13:02,230
language you write in if you can run a

00:12:59,950 --> 00:13:04,029
docker container and you can put some

00:13:02,230 --> 00:13:07,390
code in a docker container you can use

00:13:04,029 --> 00:13:09,730
this feature again

00:13:07,390 --> 00:13:12,310
we want to be able to see state as it's

00:13:09,730 --> 00:13:13,959
happening so one of the requirements

00:13:12,310 --> 00:13:16,230
that we had for this feature was being

00:13:13,959 --> 00:13:18,910
able to view the logs directly in the UI

00:13:16,230 --> 00:13:21,040
so that's a feature that it has and also

00:13:18,910 --> 00:13:23,880
you can consume data so you could pass

00:13:21,040 --> 00:13:26,290
data in via command line arguments or

00:13:23,880 --> 00:13:29,589
environment variables and then use that

00:13:26,290 --> 00:13:32,260
downstream so this is roughly what it

00:13:29,589 --> 00:13:34,209
looks like so for kubernetes at least it

00:13:32,260 --> 00:13:38,019
different for Titus and Cloud Foundry

00:13:34,209 --> 00:13:39,759
but you have cluster a B and C you might

00:13:38,019 --> 00:13:42,160
run a kubernetes job on the middle

00:13:39,759 --> 00:13:44,259
cluster and it actually will echo a back

00:13:42,160 --> 00:13:47,559
out spinnaker properties that you can

00:13:44,259 --> 00:13:50,860
inject into your pipeline one of the

00:13:47,559 --> 00:13:53,379
benefits of this type of this type of

00:13:50,860 --> 00:13:55,420
model is that the jobs that you run run

00:13:53,379 --> 00:13:57,939
directly alongside your applications so

00:13:55,420 --> 00:13:59,319
in my demo you'll see me run a set of

00:13:57,939 --> 00:14:01,779
integration tests that I'm running

00:13:59,319 --> 00:14:04,420
directly beside the application that

00:14:01,779 --> 00:14:05,589
I've just deployed so that keeps you

00:14:04,420 --> 00:14:07,869
from having to like put your

00:14:05,589 --> 00:14:10,839
applications on like a public Internet

00:14:07,869 --> 00:14:14,019
or actually expose it maybe when you

00:14:10,839 --> 00:14:15,910
don't want to again how does it fit how

00:14:14,019 --> 00:14:17,410
are we tiring all this together it's

00:14:15,910 --> 00:14:19,269
easy to use right if you're already

00:14:17,410 --> 00:14:20,949
deploying to kubernetes you probably

00:14:19,269 --> 00:14:22,899
already know how to how to write a job

00:14:20,949 --> 00:14:24,220
or if you're already using containers

00:14:22,899 --> 00:14:26,679
you probably already understand this

00:14:24,220 --> 00:14:28,209
concept again push data and via

00:14:26,679 --> 00:14:32,470
environment variables and command-line

00:14:28,209 --> 00:14:35,110
arguments and pulling data out so an

00:14:32,470 --> 00:14:37,929
interest like something to note it is

00:14:35,110 --> 00:14:39,720
interesting is that each provider kind

00:14:37,929 --> 00:14:43,839
of implements this a bit differently

00:14:39,720 --> 00:14:46,299
kubernetes is via logs or artifacts so

00:14:43,839 --> 00:14:49,720
with kubernetes if I echo spinnaker

00:14:46,299 --> 00:14:52,240
property with like a key will parse that

00:14:49,720 --> 00:14:54,790
if I echo some JSON will parse that and

00:14:52,240 --> 00:14:55,569
pull it into the context as I understand

00:14:54,790 --> 00:14:58,449
it

00:14:55,569 --> 00:15:02,230
Titus puts like files out to s3 and it's

00:14:58,449 --> 00:15:04,509
in its fish so it's just kind of it's

00:15:02,230 --> 00:15:06,730
the idea is we want to pull data out how

00:15:04,509 --> 00:15:12,040
its implemented is varies between

00:15:06,730 --> 00:15:13,809
provider so building on top of that this

00:15:12,040 --> 00:15:17,049
concept of pre-configured jobs and web

00:15:13,809 --> 00:15:19,269
hooks kind of comes into play and this

00:15:17,049 --> 00:15:21,420
is where I think the power of these two

00:15:19,269 --> 00:15:23,470
stages and these two features really

00:15:21,420 --> 00:15:27,459
kicks into gear when we talk about

00:15:23,470 --> 00:15:30,059
extensibility so pre-configured jobs and

00:15:27,459 --> 00:15:33,519
web hooks are a way for us to provide

00:15:30,059 --> 00:15:34,929
native feeling stages the users are not

00:15:33,519 --> 00:15:38,049
actually defining these things

00:15:34,929 --> 00:15:40,119
themselves they're consuming them but

00:15:38,049 --> 00:15:41,649
you don't have to write custom code in

00:15:40,119 --> 00:15:44,790
spinnaker you don't have to maintain a

00:15:41,649 --> 00:15:47,049
custom build you don't have to redeploy

00:15:44,790 --> 00:15:47,860
spinnaker every time well you do have to

00:15:47,049 --> 00:15:49,720
redeploy it

00:15:47,860 --> 00:15:51,610
time but you don't have to build

00:15:49,720 --> 00:15:52,990
spinnaker and go through the whole

00:15:51,610 --> 00:15:55,480
process you just changed some

00:15:52,990 --> 00:15:56,350
configuration all of that configuration

00:15:55,480 --> 00:15:58,930
is in Orca

00:15:56,350 --> 00:16:01,060
and so it's ya know and very familiar

00:15:58,930 --> 00:16:04,589
but what we're trying to do is create

00:16:01,060 --> 00:16:08,050
these like reusable and dry stages that

00:16:04,589 --> 00:16:09,640
capture the common things that users are

00:16:08,050 --> 00:16:11,589
doing within our organizations and

00:16:09,640 --> 00:16:15,010
bringing them into spinnaker as

00:16:11,589 --> 00:16:16,899
first-class citizens so we want to

00:16:15,010 --> 00:16:18,579
encapsulate that complexity things that

00:16:16,899 --> 00:16:21,459
users are doing over and over and over

00:16:18,579 --> 00:16:26,019
or maybe have requested and and bring

00:16:21,459 --> 00:16:27,519
that in to the system really bad I did

00:16:26,019 --> 00:16:31,120
not realize that this would show up so

00:16:27,519 --> 00:16:32,709
small but when I talk about dry and I

00:16:31,120 --> 00:16:36,550
talked about reusable components over

00:16:32,709 --> 00:16:38,050
here on the left is a job for building a

00:16:36,550 --> 00:16:40,570
docker image I'm actually going to demo

00:16:38,050 --> 00:16:43,690
this but you can see it's like I don't

00:16:40,570 --> 00:16:46,990
know 50 or 60 lines of the animal and

00:16:43,690 --> 00:16:49,000
that's really complex and for users who

00:16:46,990 --> 00:16:51,490
need to use this every day they may not

00:16:49,000 --> 00:16:53,339
understand that complexity they may not

00:16:51,490 --> 00:16:56,170
even want to deal with that complexity

00:16:53,339 --> 00:16:58,930
but as a pre-configured job over there

00:16:56,170 --> 00:17:00,579
on the right I've got four options and

00:16:58,930 --> 00:17:02,350
four parameters that I need to pass in

00:17:00,579 --> 00:17:04,929
as a user to get all of the value

00:17:02,350 --> 00:17:07,919
provided by the stage on their left so

00:17:04,929 --> 00:17:13,390
that's really where that comes into play

00:17:07,919 --> 00:17:15,600
so a demo and I'll you know we've got a

00:17:13,390 --> 00:17:18,069
demo but I'll actually show you guys how

00:17:15,600 --> 00:17:19,630
how some of this stuff is configured so

00:17:18,069 --> 00:17:21,069
this project

00:17:19,630 --> 00:17:26,370
let me just pull the readme up right

00:17:21,069 --> 00:17:26,370
here where am I

00:17:30,780 --> 00:17:40,230
okay anyway so this project is available

00:17:34,540 --> 00:17:43,600
at github and if you want to go to

00:17:40,230 --> 00:17:46,540
Ethernet for Rogers summit 19 20 19 demo

00:17:43,600 --> 00:17:48,850
I what I essentially did was I wrote a

00:17:46,540 --> 00:17:51,280
small little web application and go it's

00:17:48,850 --> 00:17:53,740
got a docker docker image it's got some

00:17:51,280 --> 00:17:56,140
unit and integration tests and all of

00:17:53,740 --> 00:17:58,660
the yeah Mille for the stages that I'm

00:17:56,140 --> 00:18:01,090
gonna demo here is also stored in the

00:17:58,660 --> 00:18:03,550
repository so if you find that you want

00:18:01,090 --> 00:18:05,260
any of these custom run job stages and

00:18:03,550 --> 00:18:08,680
you want to use them go into the repo

00:18:05,260 --> 00:18:10,300
and spit and start pulling them out but

00:18:08,680 --> 00:18:12,370
let's look at let's look at the pipeline

00:18:10,300 --> 00:18:14,920
real quick and then we'll we'll look at

00:18:12,370 --> 00:18:17,680
how they're implemented so the pipeline

00:18:14,920 --> 00:18:21,070
I have is actually what I would consider

00:18:17,680 --> 00:18:24,010
a fairly common deployment pipeline I'm

00:18:21,070 --> 00:18:26,530
doing some things in here that you know

00:18:24,010 --> 00:18:28,720
some people do some people don't do but

00:18:26,530 --> 00:18:30,730
it's something that I've seen so the

00:18:28,720 --> 00:18:33,010
first step that I've got is this build

00:18:30,730 --> 00:18:34,930
docker image stage you will probably

00:18:33,010 --> 00:18:37,450
remember the Kanaka stage that I just

00:18:34,930 --> 00:18:40,300
showed up here if you're not familiar

00:18:37,450 --> 00:18:42,040
with Kanak oh it's a it's a docker image

00:18:40,300 --> 00:18:44,200
builder that can run without a

00:18:42,040 --> 00:18:45,550
privileged security context so you're

00:18:44,200 --> 00:18:48,100
not having to do the darker and darker

00:18:45,550 --> 00:18:50,980
stuff you can just run it and it's

00:18:48,100 --> 00:18:52,840
secure but what I'm doing is I'm

00:18:50,980 --> 00:18:57,070
actually building a docker image from my

00:18:52,840 --> 00:18:58,840
repository in spinnaker the next thing

00:18:57,070 --> 00:19:00,700
I'll do is I'll kind of jump back into a

00:18:58,840 --> 00:19:03,130
native spinnaker stage and deploy it to

00:19:00,700 --> 00:19:05,050
our staging environment let me just pull

00:19:03,130 --> 00:19:07,360
up the configuration here that'll be

00:19:05,050 --> 00:19:09,310
better I'll deploy and do a staging

00:19:07,360 --> 00:19:11,920
environment here if you're familiar with

00:19:09,310 --> 00:19:14,410
kubernetes the v2 provider this should

00:19:11,920 --> 00:19:18,190
all look pretty familiar the actually

00:19:14,410 --> 00:19:20,650
the kubernetes manifest that I am

00:19:18,190 --> 00:19:24,010
deploying that first some speak of the

00:19:20,650 --> 00:19:25,390
devil is stored in that git repository

00:19:24,010 --> 00:19:28,600
as well so we're gonna pull it from

00:19:25,390 --> 00:19:30,490
there then I'm gonna run a set of

00:19:28,600 --> 00:19:33,180
integration tests so I also have another

00:19:30,490 --> 00:19:35,770
pre-configured job that will run a

00:19:33,180 --> 00:19:38,410
user-defined script against whatever

00:19:35,770 --> 00:19:41,510
container image they want and that

00:19:38,410 --> 00:19:43,910
script is stored in the git repository

00:19:41,510 --> 00:19:46,220
this is actually something that a lot of

00:19:43,910 --> 00:19:48,770
users asked for we've had like a jenkins

00:19:46,220 --> 00:19:50,090
run script' stage in the past and not

00:19:48,770 --> 00:19:52,520
really sure what the state of that is

00:19:50,090 --> 00:19:54,890
today the other way of doing this today

00:19:52,520 --> 00:19:57,280
is to run a Jenkins job that checks out

00:19:54,890 --> 00:20:00,559
your repository so this is kind of a

00:19:57,280 --> 00:20:03,380
kubernetes native way of running a

00:20:00,559 --> 00:20:05,510
script as part of your pipeline next

00:20:03,380 --> 00:20:08,630
again I'll just deploy into a production

00:20:05,510 --> 00:20:12,740
namespace in the same cluster and then

00:20:08,630 --> 00:20:15,230
one thing that I hear a lot is how do I

00:20:12,740 --> 00:20:17,210
like automate adding things to JIRA or

00:20:15,230 --> 00:20:18,890
kicking off workflows so what I wanted

00:20:17,210 --> 00:20:20,840
to demonstrate with this pre-configured

00:20:18,890 --> 00:20:24,230
webhook was how do we make an API

00:20:20,840 --> 00:20:28,549
request to JIRA to maybe mark a ticket

00:20:24,230 --> 00:20:30,440
as deployed my goal was to make another

00:20:28,549 --> 00:20:32,990
stage that like pulled a JIRA ticket out

00:20:30,440 --> 00:20:34,549
of a commit but I ran out of time so I'm

00:20:32,990 --> 00:20:36,710
just gonna like statically defined that

00:20:34,549 --> 00:20:40,040
one for now and hopefully it gets the

00:20:36,710 --> 00:20:42,860
point across so let's take a look at how

00:20:40,040 --> 00:20:45,620
some of these stages are implemented and

00:20:42,860 --> 00:20:49,100
they will probably look a bit complex

00:20:45,620 --> 00:20:51,049
but the whole goal of the pre-configured

00:20:49,100 --> 00:20:52,910
run job stage or pre-configured webhook

00:20:51,049 --> 00:20:54,559
stage is that you only have to deal with

00:20:52,910 --> 00:20:56,360
that complexity once instead of having

00:20:54,559 --> 00:21:00,740
all your users deal with it every single

00:20:56,360 --> 00:21:05,390
day so these are all stored underneath

00:21:00,740 --> 00:21:07,880
here under this jobs directory let's

00:21:05,390 --> 00:21:11,780
look at the Kanak Oh a build image stage

00:21:07,880 --> 00:21:13,970
so this is kind of the anatomy and maybe

00:21:11,780 --> 00:21:17,720
I can make that bigger for anybody in

00:21:13,970 --> 00:21:20,630
the back can you can you read that ish

00:21:17,720 --> 00:21:23,179
what if I go one more perfect thank you

00:21:20,630 --> 00:21:25,460
okay so this is kind of the anatomy of a

00:21:23,179 --> 00:21:27,470
pre-configured run job there is

00:21:25,460 --> 00:21:30,169
documentation for all of this online on

00:21:27,470 --> 00:21:32,809
the spinnaker website so if you forget a

00:21:30,169 --> 00:21:34,010
parameter or something you can go find

00:21:32,809 --> 00:21:36,020
out what it is

00:21:34,010 --> 00:21:37,669
we've got labels so a label would

00:21:36,020 --> 00:21:40,130
correspond to what the name of the

00:21:37,669 --> 00:21:42,559
stages in the UI description is pretty

00:21:40,130 --> 00:21:45,679
obvious it will tell you what the stages

00:21:42,559 --> 00:21:49,280
actually meant to do one of the really

00:21:45,679 --> 00:21:53,150
really awesome things that I love is

00:21:49,280 --> 00:21:55,400
this parameter section so this tells you

00:21:53,150 --> 00:21:57,560
the parameter

00:21:55,400 --> 00:22:00,020
here we've got four branch repo

00:21:57,560 --> 00:22:03,830
dockerfile and destination you define a

00:22:00,020 --> 00:22:06,950
mapping so you can define how the users

00:22:03,830 --> 00:22:10,370
value maps to the kubernetes job that

00:22:06,950 --> 00:22:11,840
you are running in this case what I've

00:22:10,370 --> 00:22:13,340
done is I've actually mapped it to

00:22:11,840 --> 00:22:15,110
environment variables that are getting

00:22:13,340 --> 00:22:17,780
passed into the various containers that

00:22:15,110 --> 00:22:20,900
are running so for instance I'm gonna

00:22:17,780 --> 00:22:23,600
map the repo to the first environment

00:22:20,900 --> 00:22:25,940
variable of the knit container the or

00:22:23,600 --> 00:22:28,430
the branch to the first one the repo to

00:22:25,940 --> 00:22:30,950
the second one the docker file will then

00:22:28,430 --> 00:22:33,530
go to a different container and the

00:22:30,950 --> 00:22:35,360
destination so if we look at how those

00:22:33,530 --> 00:22:39,980
are mapped also actually I'll touch on

00:22:35,360 --> 00:22:41,690
this the kubernetes jobs are defined in

00:22:39,980 --> 00:22:44,660
line so they're part of the

00:22:41,690 --> 00:22:47,000
configuration seated under this manifest

00:22:44,660 --> 00:22:50,840
key so it's just a kubernetes job

00:22:47,000 --> 00:22:53,570
manifest we actually generate like a

00:22:50,840 --> 00:22:55,520
unique ID that we have pinned to the end

00:22:53,570 --> 00:22:58,100
of the name to avoid collision so you

00:22:55,520 --> 00:23:01,040
can actually run this same job in number

00:22:58,100 --> 00:23:02,690
of times and not have jobs kind of

00:23:01,040 --> 00:23:04,640
killing each other or kubernetes

00:23:02,690 --> 00:23:06,800
complaining Oh a job with that name

00:23:04,640 --> 00:23:10,370
already exists so that's just something

00:23:06,800 --> 00:23:15,560
that we we noticed happen obviously you

00:23:10,370 --> 00:23:18,170
can specify your labels but the way this

00:23:15,560 --> 00:23:20,780
is implemented is using an init

00:23:18,170 --> 00:23:21,980
container and then a container so this

00:23:20,780 --> 00:23:23,750
is a kind of a little trick that I

00:23:21,980 --> 00:23:27,290
picked up I don't know how common this

00:23:23,750 --> 00:23:29,090
is but what I'm essentially doing is

00:23:27,290 --> 00:23:30,980
using an init container to like set up

00:23:29,090 --> 00:23:35,240
my environment so in this case I'm using

00:23:30,980 --> 00:23:37,310
the new git repo artifact type that we

00:23:35,240 --> 00:23:40,010
added for customized taking advantage of

00:23:37,310 --> 00:23:42,290
that in this one does 17 environment and

00:23:40,010 --> 00:23:46,130
I'm using it to actually grab the

00:23:42,290 --> 00:23:48,590
project that I want so the branch will

00:23:46,130 --> 00:23:51,380
be user specified the URL will be user

00:23:48,590 --> 00:23:53,140
specified based on those mappings and

00:23:51,380 --> 00:23:56,960
then I've got a couple other configure

00:23:53,140 --> 00:23:59,990
configurability environment variables

00:23:56,960 --> 00:24:03,170
here I also mount a shared volume so

00:23:59,990 --> 00:24:04,760
it's a the init container clones into a

00:24:03,170 --> 00:24:06,830
one repository and then the main

00:24:04,760 --> 00:24:10,039
container works against the code

00:24:06,830 --> 00:24:12,559
in that repository and then my container

00:24:10,039 --> 00:24:14,899
which will run and then exit which is

00:24:12,559 --> 00:24:17,120
what a job should do is running the

00:24:14,899 --> 00:24:19,460
canna Co image so I did not write this

00:24:17,120 --> 00:24:21,679
image I simply pulled the image off the

00:24:19,460 --> 00:24:24,019
shelf to run it but I map the

00:24:21,679 --> 00:24:27,169
user-supplied variables of docker file

00:24:24,019 --> 00:24:30,350
and context into environment variables

00:24:27,169 --> 00:24:32,539
so it runs so what this stages goal is

00:24:30,350 --> 00:24:34,909
is to take the docker file in my

00:24:32,539 --> 00:24:38,779
repository build an image and push it to

00:24:34,909 --> 00:24:40,159
my docker registry which is not

00:24:38,779 --> 00:24:42,679
something that spinnaker can do out of

00:24:40,159 --> 00:24:44,960
the box today I think it can in if you

00:24:42,679 --> 00:24:48,289
use Roscoe but it's it's a bit different

00:24:44,960 --> 00:24:51,110
than what most people want to do so the

00:24:48,289 --> 00:24:55,130
other stage that we have is the the run

00:24:51,110 --> 00:24:57,710
script stage which uses the same kind of

00:24:55,130 --> 00:25:00,260
the same kind of practices except we do

00:24:57,710 --> 00:25:02,809
a slight variation so again we have repo

00:25:00,260 --> 00:25:06,950
and branch to capture that information

00:25:02,809 --> 00:25:09,679
from the user but we also have we also

00:25:06,950 --> 00:25:11,120
let the user specify the image that they

00:25:09,679 --> 00:25:13,639
want to run their script in so they can

00:25:11,120 --> 00:25:17,059
define their run time but then they also

00:25:13,639 --> 00:25:19,909
specify the command so in our case in

00:25:17,059 --> 00:25:23,360
our pipeline the command is supply this

00:25:19,909 --> 00:25:30,460
endpoint and run this integration SH

00:25:23,360 --> 00:25:30,460
script which I will nope

00:25:30,830 --> 00:25:36,470
integration dot sh just takes an

00:25:32,960 --> 00:25:39,740
endpoint and runs a set of go tests

00:25:36,470 --> 00:25:41,120
against like make some HTTP calls so

00:25:39,740 --> 00:25:45,230
it's actually pretty simple but really

00:25:41,120 --> 00:25:47,690
powerful and then finally if we want to

00:25:45,230 --> 00:25:53,570
look at the JIRA Update web put stage

00:25:47,690 --> 00:25:54,890
commercial this one yes I can't the this

00:25:53,570 --> 00:25:57,890
is just the web poke stage so it has a

00:25:54,890 --> 00:26:00,080
lot of the same parameter so label name

00:25:57,890 --> 00:26:02,060
description all of that good stuff you

00:26:00,080 --> 00:26:05,540
can specify your authorization headers

00:26:02,060 --> 00:26:07,940
in there as well and then a payload we

00:26:05,540 --> 00:26:11,540
also have parameters to how you map them

00:26:07,940 --> 00:26:13,810
is slightly different so just be aware

00:26:11,540 --> 00:26:16,940
of that also we have documentation but

00:26:13,810 --> 00:26:21,070
we define an environment and then we in

00:26:16,940 --> 00:26:25,010
this case called the what is the API

00:26:21,070 --> 00:26:27,440
where's the URL oh and you're Jerry URL

00:26:25,010 --> 00:26:30,830
there's an actual API for for updating

00:26:27,440 --> 00:26:32,750
that so yeah that's that's really simple

00:26:30,830 --> 00:26:34,850
and now all of these things show up as

00:26:32,750 --> 00:26:37,250
stages and spinnaker let's jump back to

00:26:34,850 --> 00:26:40,460
the pipeline here we want to add a stage

00:26:37,250 --> 00:26:42,530
we can search for Kanaka and I know now

00:26:40,460 --> 00:26:45,350
that I can build docker images or I can

00:26:42,530 --> 00:26:51,380
say JIRA mark is marked something as

00:26:45,350 --> 00:26:53,570
deployed what is a run a script right I

00:26:51,380 --> 00:26:56,330
can select a stage and it does that it

00:26:53,570 --> 00:26:58,850
shows up now let's talk about trade-offs

00:26:56,330 --> 00:27:03,260
for a second though you'll notice that

00:26:58,850 --> 00:27:05,570
this is all very simple the the UI for

00:27:03,260 --> 00:27:09,380
doing this is the same across both I

00:27:05,570 --> 00:27:11,870
just have a set of string parameters if

00:27:09,380 --> 00:27:14,870
you need something more complex you want

00:27:11,870 --> 00:27:17,330
to have this like richer feel you

00:27:14,870 --> 00:27:18,650
actually have to start writing custom

00:27:17,330 --> 00:27:20,840
code and extending all of these

00:27:18,650 --> 00:27:22,250
components so it's kind of a it's a

00:27:20,840 --> 00:27:24,290
question you need to ask is like what

00:27:22,250 --> 00:27:26,930
what do I need to get more value of is

00:27:24,290 --> 00:27:29,000
it this having this rich off-the-shelf I

00:27:26,930 --> 00:27:33,770
use spinnaker every day and it feels

00:27:29,000 --> 00:27:35,270
perfect experience or is having the

00:27:33,770 --> 00:27:37,280
ability to do some of these things in

00:27:35,270 --> 00:27:38,180
your pipeline more valuable more worth

00:27:37,280 --> 00:27:40,040
it

00:27:38,180 --> 00:27:43,850
than having that so just something to be

00:27:40,040 --> 00:27:44,600
aware of so let's let's actually kick

00:27:43,850 --> 00:27:46,519
this pipeline

00:27:44,600 --> 00:27:48,710
and see how it works right all right so

00:27:46,519 --> 00:27:50,929
let's go ahead and start this pipeline

00:27:48,710 --> 00:27:54,769
run and see how some of these stages in

00:27:50,929 --> 00:27:56,509
action so the docker image building

00:27:54,769 --> 00:28:00,139
stage is getting kicked off we can see

00:27:56,509 --> 00:28:02,299
here in the UI I can zoom in one more I

00:28:00,139 --> 00:28:04,570
know it's not perfect but the UI is

00:28:02,299 --> 00:28:06,860
gonna get really funky if I keep going

00:28:04,570 --> 00:28:08,779
but we can see all of the user supplied

00:28:06,860 --> 00:28:10,730
information so we know I'm gonna pull

00:28:08,779 --> 00:28:13,669
from the master branch I'm gonna run

00:28:10,730 --> 00:28:15,769
against the repo for this demo the

00:28:13,669 --> 00:28:18,139
docker file that I want to build against

00:28:15,769 --> 00:28:20,509
and the image that I want to push again

00:28:18,139 --> 00:28:22,519
like I stated earlier we can see the UI

00:28:20,509 --> 00:28:25,029
that logs in the UI so we don't have to

00:28:22,519 --> 00:28:29,899
jump into kubernetes just to see logs

00:28:25,029 --> 00:28:34,250
and so yeah so you can actually see this

00:28:29,899 --> 00:28:37,370
thing happening that stage is now done

00:28:34,250 --> 00:28:39,320
so we're gonna go ahead and deploy we

00:28:37,370 --> 00:28:41,419
can see obviously the the yam well that

00:28:39,320 --> 00:28:43,370
was deployed now we're gonna run our

00:28:41,419 --> 00:28:46,399
integration tests again I supply an

00:28:43,370 --> 00:28:49,070
endpoint this is a kubernetes service

00:28:46,399 --> 00:28:51,529
name so summit 2019 demo in the Ethan

00:28:49,070 --> 00:28:53,929
Devin Aiden space that also ran we can

00:28:51,529 --> 00:28:58,100
see the logs there so I install my

00:28:53,929 --> 00:29:00,980
dependencies and run my tests and then

00:28:58,100 --> 00:29:04,700
we deployed a production and then mark

00:29:00,980 --> 00:29:07,490
deployed so what let's go check JIRA did

00:29:04,700 --> 00:29:11,629
that actually work yep we've got a

00:29:07,490 --> 00:29:13,970
deployed production name label so the

00:29:11,629 --> 00:29:16,159
whole the whole kind of goal of all of

00:29:13,970 --> 00:29:18,110
this stuff is like how do you automate

00:29:16,159 --> 00:29:21,200
the workflows that is specific to your

00:29:18,110 --> 00:29:24,950
organization without having to do invest

00:29:21,200 --> 00:29:27,049
super heavily if there's if you went to

00:29:24,950 --> 00:29:28,909
my colleagues plugin talked earlier you

00:29:27,049 --> 00:29:30,500
know that there's kind of an initiative

00:29:28,909 --> 00:29:32,960
to give you that really rich experience

00:29:30,500 --> 00:29:35,990
without having a key like keep custom

00:29:32,960 --> 00:29:37,490
builds going but I think a lot of times

00:29:35,990 --> 00:29:39,080
that you don't actually need that deep

00:29:37,490 --> 00:29:43,279
deep integration you can get by with

00:29:39,080 --> 00:29:48,429
with running jobs and web hooks to

00:29:43,279 --> 00:29:48,429
automate your processes so with that

00:29:49,629 --> 00:29:56,359
some resources that you can go see I've

00:29:53,659 --> 00:29:57,950
written a lot about this topic so there

00:29:56,359 --> 00:29:59,749
are a couple blog posts that you can see

00:29:57,950 --> 00:30:01,309
we've got some user stories

00:29:59,749 --> 00:30:02,989
one of my friends Myles who's actually

00:30:01,309 --> 00:30:05,719
presenting right now

00:30:02,989 --> 00:30:07,669
did a really cool guest spot we've got

00:30:05,719 --> 00:30:09,320
Doc's for the custom web book stages and

00:30:07,669 --> 00:30:12,200
custom job stages if you want to go

00:30:09,320 --> 00:30:15,229
check those out and these slides will be

00:30:12,200 --> 00:30:17,750
available online as well so I don't have

00:30:15,229 --> 00:30:25,259
a thank you slide by that thank you

00:30:17,750 --> 00:30:25,259
[Applause]

00:30:25,900 --> 00:30:28,979
[Music]

00:30:35,909 --> 00:30:43,769
so taking your idea of running jobs step

00:30:40,349 --> 00:30:46,169
further if you need to provide like

00:30:43,769 --> 00:30:50,190
secrets or credentials to any of those

00:30:46,169 --> 00:30:56,089
jobs what's your preferred approach yeah

00:30:50,190 --> 00:30:58,409
so um I guess it depends on like what

00:30:56,089 --> 00:31:00,959
the rest of your organization is doing

00:30:58,409 --> 00:31:03,569
right so if your for specifically for

00:31:00,959 --> 00:31:06,690
kubernetes if you have like a method of

00:31:03,569 --> 00:31:08,489
supplying secrets to your applications I

00:31:06,690 --> 00:31:12,749
would suggest doing something similar to

00:31:08,489 --> 00:31:15,149
that because you can mask a lot of the

00:31:12,749 --> 00:31:17,339
complexity in a pre-configured job you

00:31:15,149 --> 00:31:19,289
have kind of the freedom to put whatever

00:31:17,339 --> 00:31:22,229
in knit containers or sidecars you want

00:31:19,289 --> 00:31:24,059
in there to supply those secrets but

00:31:22,229 --> 00:31:25,259
yeah it's just doing something similar

00:31:24,059 --> 00:31:27,839
to what you're already doing with your

00:31:25,259 --> 00:31:29,549
workloads is what you could do or you

00:31:27,839 --> 00:31:35,089
could just leave them directly in the

00:31:29,549 --> 00:31:35,089
config and take that risk

00:31:46,100 --> 00:31:51,160
[Laughter]

00:31:49,100 --> 00:31:51,160

YouTube URL: https://www.youtube.com/watch?v=ol0fK75fftg


