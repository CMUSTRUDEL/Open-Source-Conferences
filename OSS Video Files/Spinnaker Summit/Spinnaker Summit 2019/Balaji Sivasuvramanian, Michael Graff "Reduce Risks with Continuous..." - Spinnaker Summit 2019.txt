Title: Balaji Sivasuvramanian, Michael Graff "Reduce Risks with Continuous..." - Spinnaker Summit 2019
Publication date: 2019-12-03
Playlist: Spinnaker Summit 2019
Description: 
	The third annual Spinnaker Summit (Diamond Sponsors: Netflix, Google and Armory) was held at the Hard Rock Hotel in San Diego, CA from November 15-17, 2019 and welcomed over 500 members of the rapidly growing Spinnaker open source community.
Captions: 
	00:00:06,330 --> 00:00:10,980
[Laughter]

00:00:21,550 --> 00:00:26,259
microphone thing thank you for coming

00:00:24,460 --> 00:00:29,080
this session is about Kenya

00:00:26,259 --> 00:00:31,180
certification and basically you know now

00:00:29,080 --> 00:00:33,760
that you are using spinnaker and

00:00:31,180 --> 00:00:36,010
deploying applications fast you want to

00:00:33,760 --> 00:00:37,960
be able to verify the applications as it

00:00:36,010 --> 00:00:40,239
gets deployed and that sort of the topic

00:00:37,960 --> 00:00:42,070
of this particular talk and we're gonna

00:00:40,239 --> 00:00:45,339
show you what we have today and then

00:00:42,070 --> 00:00:47,230
what what we are thinking about what

00:00:45,339 --> 00:00:50,140
you're driving this particular community

00:00:47,230 --> 00:00:52,780
and to improve that situation and so

00:00:50,140 --> 00:00:56,170
with that my name is Balaji Siva I'm

00:00:52,780 --> 00:00:57,670
running at Optimax so if you're you know

00:00:56,170 --> 00:01:06,130
we'll talk about our company in a second

00:00:57,670 --> 00:01:08,440
and Michael my ex they call me let's see

00:01:06,130 --> 00:01:09,550
a principal architect I consider myself

00:01:08,440 --> 00:01:12,340
an engineer

00:01:09,550 --> 00:01:13,960
very much so and I'm primarily focused

00:01:12,340 --> 00:01:15,340
on autopilot but also some other things

00:01:13,960 --> 00:01:17,830
there too

00:01:15,340 --> 00:01:19,360
yeah so the thing that that's good thing

00:01:17,830 --> 00:01:21,910
interesting thing about Michael is that

00:01:19,360 --> 00:01:22,690
he was at Netflix he was the primary

00:01:21,910 --> 00:01:25,990
author of

00:01:22,690 --> 00:01:28,750
Kayenta the canary analysis service so

00:01:25,990 --> 00:01:31,780
he joined up some acts recently so he

00:01:28,750 --> 00:01:34,300
brings a lot of real-world experience at

00:01:31,780 --> 00:01:38,380
scale at Netflix so that's something we

00:01:34,300 --> 00:01:40,030
thought it will be useful here and so

00:01:38,380 --> 00:01:43,989
very quickly about app some acts of your

00:01:40,030 --> 00:01:45,880
three-year-old company our team comes

00:01:43,989 --> 00:01:49,330
from these backgrounds obviously Netflix

00:01:45,880 --> 00:01:51,630
and AWS I come from Cisco previously but

00:01:49,330 --> 00:01:54,459
a quite a bit of background we are

00:01:51,630 --> 00:01:56,470
contributing to spinnaker some of things

00:01:54,459 --> 00:01:59,340
we contributed is terraform operators

00:01:56,470 --> 00:02:03,729
and you know we're working on other

00:01:59,340 --> 00:02:05,470
contributions as well to enable you know

00:02:03,729 --> 00:02:09,280
increasing adoption of spinnaker in

00:02:05,470 --> 00:02:11,170
enterprises so again we will go through

00:02:09,280 --> 00:02:12,610
what is verification as we define it and

00:02:11,170 --> 00:02:15,250
then we can talk about what we have

00:02:12,610 --> 00:02:18,099
today and what we're driving with the

00:02:15,250 --> 00:02:22,810
community towards better continuous

00:02:18,099 --> 00:02:25,090
verification so I think to sort of level

00:02:22,810 --> 00:02:28,090
set of sort of motivation for the

00:02:25,090 --> 00:02:30,819
verification itself essentially now

00:02:28,090 --> 00:02:32,319
you're releasing things faster what we

00:02:30,819 --> 00:02:33,940
have seen this is a Gartner study

00:02:32,319 --> 00:02:35,670
recently you know a couple of years ago

00:02:33,940 --> 00:02:38,440
but I think it's still pretty irrelevant

00:02:35,670 --> 00:02:40,720
in the sense that this is reported by

00:02:38,440 --> 00:02:43,420
let's say hundreds of enterprises who

00:02:40,720 --> 00:02:45,730
claim that hey as it increases their

00:02:43,420 --> 00:02:48,220
speed velocity of deployment of

00:02:45,730 --> 00:02:49,330
applications their successful deployment

00:02:48,220 --> 00:02:51,310
as they call it successful deployment

00:02:49,330 --> 00:02:53,349
reduces dramatically obviously it says

00:02:51,310 --> 00:02:55,599
goes to zero what I'm assuming now the

00:02:53,349 --> 00:02:57,250
world is better you have better success

00:02:55,599 --> 00:02:59,440
rate but still it shouldn't kind of

00:02:57,250 --> 00:03:01,150
shows you the problem of as you increase

00:02:59,440 --> 00:03:02,980
velocity ultimately everything you still

00:03:01,150 --> 00:03:04,209
need to verify things you know you know

00:03:02,980 --> 00:03:06,220
in a in a right manner

00:03:04,209 --> 00:03:08,709
obviously the complexity is as increase

00:03:06,220 --> 00:03:10,360
as well and on one speed the complexity

00:03:08,709 --> 00:03:12,190
of now you're deploying to various

00:03:10,360 --> 00:03:13,959
clouds you have micro service

00:03:12,190 --> 00:03:16,930
architecture and that makes it difficult

00:03:13,959 --> 00:03:19,480
to troubleshoot and cross-check and as

00:03:16,930 --> 00:03:21,700
you look at trying to verify these

00:03:19,480 --> 00:03:24,370
things if you're doing manually your

00:03:21,700 --> 00:03:25,900
your verification cost goes up you can't

00:03:24,370 --> 00:03:27,400
get the real velocity because you're now

00:03:25,900 --> 00:03:29,230
verifying things because you don't want

00:03:27,400 --> 00:03:32,079
to create a violation or production

00:03:29,230 --> 00:03:34,810
failures production failures obviously

00:03:32,079 --> 00:03:36,220
is bad for everybody and obviously this

00:03:34,810 --> 00:03:38,440
is one study which says you know about

00:03:36,220 --> 00:03:41,019
$1,000,000 per hour you know if you're a

00:03:38,440 --> 00:03:44,049
large company and you have a bad

00:03:41,019 --> 00:03:47,040
deployment in production and the sort of

00:03:44,049 --> 00:03:49,540
did your problem what we are or it is

00:03:47,040 --> 00:03:52,690
say here is that the manual verification

00:03:49,540 --> 00:03:55,989
at speed is going to be error-prone and

00:03:52,690 --> 00:03:57,760
slow and costly if you look at the oral

00:03:55,989 --> 00:03:59,980
pipeline there's a CI component there's

00:03:57,760 --> 00:04:02,350
a CD component and usually when you

00:03:59,980 --> 00:04:04,660
focus on verification you're probably

00:04:02,350 --> 00:04:06,730
associating to the deployment aspect of

00:04:04,660 --> 00:04:08,859
it now that I deployed I want to be able

00:04:06,730 --> 00:04:11,109
to verify what I deployed I want to be

00:04:08,859 --> 00:04:14,170
able to make any decisions on it based

00:04:11,109 --> 00:04:16,239
on the evaluation of the application and

00:04:14,170 --> 00:04:17,709
obviously beyond deployment also I need

00:04:16,239 --> 00:04:20,019
to monitor and I need your bill to

00:04:17,709 --> 00:04:21,940
rollback and the manual verification

00:04:20,019 --> 00:04:23,889
part of it because you have multiple

00:04:21,940 --> 00:04:27,010
people potentially reviewing a pipeline

00:04:23,889 --> 00:04:29,410
run every day if you have multiple saris

00:04:27,010 --> 00:04:31,240
each one is interpreting the the rules

00:04:29,410 --> 00:04:34,270
of what is right and what is wrong

00:04:31,240 --> 00:04:36,669
incorrectly potentially and you could

00:04:34,270 --> 00:04:38,289
potentially to you know the potential

00:04:36,669 --> 00:04:41,750
production failures there's other

00:04:38,289 --> 00:04:44,180
aspects of it in many companies there's

00:04:41,750 --> 00:04:46,970
of an offline manual approvals are

00:04:44,180 --> 00:04:48,500
flying a checks of compliance a lot of

00:04:46,970 --> 00:04:50,300
these things are done in an offline

00:04:48,500 --> 00:04:51,890
fashion it's not even part of a pipeline

00:04:50,300 --> 00:04:54,380
it's like okay I'm going to put a manual

00:04:51,890 --> 00:04:55,820
judgment step and then somebody goes and

00:04:54,380 --> 00:04:58,070
does something and come back and say

00:04:55,820 --> 00:04:59,960
approve right and so what happens during

00:04:58,070 --> 00:05:02,570
that stage nobody knows so these things

00:04:59,960 --> 00:05:06,470
we need to be able to provide visibility

00:05:02,570 --> 00:05:08,570
obviously and be able to automate it in

00:05:06,470 --> 00:05:11,480
an intelligent fashion to be able to get

00:05:08,570 --> 00:05:14,270
the velocity that you really want all

00:05:11,480 --> 00:05:15,200
right so I think the verification one

00:05:14,270 --> 00:05:17,510
thing I want to point out is that the

00:05:15,200 --> 00:05:19,040
verification is just not at the sort of

00:05:17,510 --> 00:05:21,410
the production rollout stage it may be a

00:05:19,040 --> 00:05:23,090
canary or a Bluegreen kind of a stage if

00:05:21,410 --> 00:05:25,400
you look at it you could verify things

00:05:23,090 --> 00:05:28,160
at every stage you know during the

00:05:25,400 --> 00:05:30,260
pipeline from integration tests to load

00:05:28,160 --> 00:05:31,670
tests you can so verify the current

00:05:30,260 --> 00:05:33,140
release to the previous release maybe

00:05:31,670 --> 00:05:35,240
it's not a king any type of deploy

00:05:33,140 --> 00:05:37,460
because you ran the test yesterday or or

00:05:35,240 --> 00:05:38,780
one hour ago two hours ago you can still

00:05:37,460 --> 00:05:40,580
compare because essentially if you're

00:05:38,780 --> 00:05:42,620
going to the same chance you should be

00:05:40,580 --> 00:05:44,060
able to tell the new version how it

00:05:42,620 --> 00:05:45,410
behaves compared to the old version if

00:05:44,060 --> 00:05:45,860
there's a flag right there you stop

00:05:45,410 --> 00:05:47,900
right there

00:05:45,860 --> 00:05:49,220
you don't actually let it go and on

00:05:47,900 --> 00:05:51,620
staging in production and pre-production

00:05:49,220 --> 00:05:53,330
and production basically you know a lot

00:05:51,620 --> 00:05:56,420
of things we have seen actual real use

00:05:53,330 --> 00:05:58,940
cases where a large sort of a grocery

00:05:56,420 --> 00:06:00,800
company you know they were having load

00:05:58,940 --> 00:06:03,410
test failures that you know they could

00:06:00,800 --> 00:06:04,910
have captain load test stage but it

00:06:03,410 --> 00:06:06,530
happens in production and then they have

00:06:04,910 --> 00:06:09,140
to you know roll back all the way and

00:06:06,530 --> 00:06:11,690
effect users in each phases of

00:06:09,140 --> 00:06:13,190
deployment either you're testing or in

00:06:11,690 --> 00:06:14,540
any of the stages you have different

00:06:13,190 --> 00:06:16,640
things you're testing for example

00:06:14,540 --> 00:06:18,050
obviously in the testing or the QA phase

00:06:16,640 --> 00:06:19,910
you're obviously doing these not that

00:06:18,050 --> 00:06:21,620
you do to a stress test you're also

00:06:19,910 --> 00:06:23,900
probably doing source code analysis

00:06:21,620 --> 00:06:26,240
static analysis of dynamic analysis and

00:06:23,900 --> 00:06:28,670
these things has to be also be verified

00:06:26,240 --> 00:06:30,860
we call all of these as CV verification

00:06:28,670 --> 00:06:32,780
at the end of the day because if you can

00:06:30,860 --> 00:06:36,560
automate all of these things you really

00:06:32,780 --> 00:06:38,870
would have a real automated deployment

00:06:36,560 --> 00:06:41,540
solution so doing staging is what most

00:06:38,870 --> 00:06:43,370
people do canary release and then sort

00:06:41,540 --> 00:06:45,680
of a limited production exposure of

00:06:43,370 --> 00:06:47,060
applications and in production it's

00:06:45,680 --> 00:06:50,120
where you say you know what it's all

00:06:47,060 --> 00:06:52,130
good now I'm going to go to you know

00:06:50,120 --> 00:06:53,510
expose the real customer traffic so in

00:06:52,130 --> 00:06:55,400
this case that canary deployment

00:06:53,510 --> 00:06:57,560
obviously these are obviously customer

00:06:55,400 --> 00:06:59,360
acting applications you may have a

00:06:57,560 --> 00:07:01,520
staged rollout where you have deploying

00:06:59,360 --> 00:07:03,410
into one region or some regions and then

00:07:01,520 --> 00:07:04,910
eventually lead to more regions maybe

00:07:03,410 --> 00:07:07,190
you're using sto where you are doing a

00:07:04,910 --> 00:07:08,690
rolling update update so these are some

00:07:07,190 --> 00:07:10,509
other things you practice and you want

00:07:08,690 --> 00:07:12,740
to be able to verify during each of them

00:07:10,509 --> 00:07:14,600
before you go to the call it a full

00:07:12,740 --> 00:07:16,370
production done because as soon as you

00:07:14,600 --> 00:07:18,889
verify in this whole pipeline the better

00:07:16,370 --> 00:07:20,630
it is to avoid production failures right

00:07:18,889 --> 00:07:22,520
in obviously in force production usually

00:07:20,630 --> 00:07:26,090
should not done because a lot of cases

00:07:22,520 --> 00:07:28,370
we have seen users come to us and say

00:07:26,090 --> 00:07:30,830
you know what you know typically what

00:07:28,370 --> 00:07:32,840
happens is the deployment is done it's

00:07:30,830 --> 00:07:34,250
not our problem anymore we're done and

00:07:32,840 --> 00:07:36,020
then the production people or the sorry

00:07:34,250 --> 00:07:37,430
people manage it it's not my problem but

00:07:36,020 --> 00:07:39,949
that's not necessarily have to be the

00:07:37,430 --> 00:07:42,530
case we can still have the ability their

00:07:39,949 --> 00:07:44,030
knowledge of the new release and then be

00:07:42,530 --> 00:07:45,830
able to compare to the past releases

00:07:44,030 --> 00:07:47,510
even in production so we have an ability

00:07:45,830 --> 00:07:48,789
to like for example we should have an

00:07:47,510 --> 00:07:52,099
ability to do for example to

00:07:48,789 --> 00:07:56,270
continuously check the production as

00:07:52,099 --> 00:07:58,099
well and be able to roll back so what is

00:07:56,270 --> 00:08:00,229
good news modification essentially is

00:07:58,099 --> 00:08:02,300
addressing all these stakeholders and

00:08:00,229 --> 00:08:05,360
dollars has to care about in terms of

00:08:02,300 --> 00:08:07,130
and what software they release and where

00:08:05,360 --> 00:08:08,360
they are and if it would stop for

00:08:07,130 --> 00:08:10,070
whatever reason they won't know what it

00:08:08,360 --> 00:08:12,260
is I didn't be able to diagnose and

00:08:10,070 --> 00:08:14,120
troubleshoot their particular releases

00:08:12,260 --> 00:08:15,620
operation people are obviously worried

00:08:14,120 --> 00:08:17,180
about you know traditional things

00:08:15,620 --> 00:08:19,550
operation people worry about is you know

00:08:17,180 --> 00:08:21,500
can i deploy it you know do I have to

00:08:19,550 --> 00:08:22,940
roll back do it is there a policy

00:08:21,500 --> 00:08:24,830
violation there's a compliance

00:08:22,940 --> 00:08:26,659
violations and things like that business

00:08:24,830 --> 00:08:30,050
you business users are obviously worried

00:08:26,659 --> 00:08:32,360
about their business KPI and and you

00:08:30,050 --> 00:08:34,729
know make sure that end-users the

00:08:32,360 --> 00:08:35,990
revenue is not affected the compliance

00:08:34,729 --> 00:08:37,729
folks are worried about you know are

00:08:35,990 --> 00:08:39,830
they doing security violation enterprise

00:08:37,729 --> 00:08:42,229
violation or application specific

00:08:39,830 --> 00:08:44,630
violations that's happening throughout

00:08:42,229 --> 00:08:46,550
so can you certificate should be about

00:08:44,630 --> 00:08:48,770
maintaining SFA's we should you ever

00:08:46,550 --> 00:08:51,050
look at logs APM and metrics and

00:08:48,770 --> 00:08:54,290
business metrics there should be able to

00:08:51,050 --> 00:08:56,000
do application policies you know be able

00:08:54,290 --> 00:08:58,430
to say this application has these set up

00:08:56,000 --> 00:09:00,920
rules and regulations and 80 people to

00:08:58,430 --> 00:09:02,330
enforce them as part of our pipeline the

00:09:00,920 --> 00:09:03,740
compliance violation for example you

00:09:02,330 --> 00:09:05,839
should be able to check you know

00:09:03,740 --> 00:09:06,720
regulations like Sox compliance checks

00:09:05,839 --> 00:09:09,089
and and you know

00:09:06,720 --> 00:09:10,769
you have use own issues those issues and

00:09:09,089 --> 00:09:12,180
there will be other enterprise policy

00:09:10,769 --> 00:09:14,370
like who can deploy what they can deploy

00:09:12,180 --> 00:09:16,649
when they can deploy who can upon all

00:09:14,370 --> 00:09:18,810
those things has to be captured in this

00:09:16,649 --> 00:09:22,500
verification method and then security

00:09:18,810 --> 00:09:24,420
violation in terms of are there any

00:09:22,500 --> 00:09:25,589
modified behavior of the application of

00:09:24,420 --> 00:09:27,600
the software that just got released

00:09:25,589 --> 00:09:28,980
nobody is checking on it and there

00:09:27,600 --> 00:09:32,610
should be a narrator automatically

00:09:28,980 --> 00:09:34,259
verify these things as well all this

00:09:32,610 --> 00:09:36,600
needs to be automated obviously that

00:09:34,259 --> 00:09:39,019
will really help you to really achieve

00:09:36,600 --> 00:09:42,149
the speed rather than manual and ad hoc

00:09:39,019 --> 00:09:43,740
way of doing things and more importantly

00:09:42,149 --> 00:09:46,500
it needs to be have some intelligence

00:09:43,740 --> 00:09:48,329
built into it so it's not just pure

00:09:46,500 --> 00:09:50,370
automation for the sake of automation

00:09:48,329 --> 00:09:52,560
but there's some intelligence to it so

00:09:50,370 --> 00:09:54,720
with that I'm gonna transfer over to

00:09:52,560 --> 00:09:56,550
Michael he's gonna walk us through what

00:09:54,720 --> 00:09:59,220
we can do today and also what he's

00:09:56,550 --> 00:10:03,319
driving within the community towards the

00:09:59,220 --> 00:10:05,730
next next to this maker yep yep okay

00:10:03,319 --> 00:10:08,490
thank you for all showing up after this

00:10:05,730 --> 00:10:09,540
lovely lunch that we had I'm gonna talk

00:10:08,490 --> 00:10:11,459
a little bit about where we are today

00:10:09,540 --> 00:10:12,930
and give some examples of the types of

00:10:11,459 --> 00:10:14,100
things where we have hooks inside a

00:10:12,930 --> 00:10:16,529
spinnaker that we can actually make

00:10:14,100 --> 00:10:18,029
decision points and then later on I'll

00:10:16,529 --> 00:10:19,860
be talking about where I think we need

00:10:18,029 --> 00:10:22,500
to expand those decision points and how

00:10:19,860 --> 00:10:24,149
I sort of what my dream world would be

00:10:22,500 --> 00:10:26,420
in order to make certain we can do C V

00:10:24,149 --> 00:10:29,819
all the way through a spinnaker pipeline

00:10:26,420 --> 00:10:31,980
so today we can canary we have this down

00:10:29,819 --> 00:10:33,029
pretty well I work on chaos at Netflix I

00:10:31,980 --> 00:10:35,970
worked on autopilot I'm working on

00:10:33,029 --> 00:10:37,769
autopilot now this is a very controlled

00:10:35,970 --> 00:10:40,439
environment it is a very specific use

00:10:37,769 --> 00:10:43,559
case we're very carefully controlling

00:10:40,439 --> 00:10:45,269
the environment that the it's as close

00:10:43,559 --> 00:10:48,689
as possible that the canary and the

00:10:45,269 --> 00:10:50,309
baseline are in the same space this

00:10:48,689 --> 00:10:50,939
works very well we give a pass/fail

00:10:50,309 --> 00:10:52,589
result

00:10:50,939 --> 00:10:54,779
not everybody can canary not everybody

00:10:52,589 --> 00:10:56,339
can canary in production but there's

00:10:54,779 --> 00:10:59,279
nothing that really says you have to do

00:10:56,339 --> 00:11:02,370
this in production we even have some of

00:10:59,279 --> 00:11:05,160
our customers using a basically a test

00:11:02,370 --> 00:11:06,240
suite they run against a canary that

00:11:05,160 --> 00:11:07,709
they've run that the same test suite

00:11:06,240 --> 00:11:08,910
against production and they can compare

00:11:07,709 --> 00:11:11,069
those and the nice thing about that is

00:11:08,910 --> 00:11:12,870
as mentioned you could have done that

00:11:11,069 --> 00:11:14,160
test suite on the old version last week

00:11:12,870 --> 00:11:15,809
and compare it to this week and it's

00:11:14,160 --> 00:11:17,069
probably okay because it's very it's

00:11:15,809 --> 00:11:19,639
still a controlled environment to a

00:11:17,069 --> 00:11:19,639
certain extent

00:11:19,790 --> 00:11:23,850
best practices for canary I'm not going

00:11:22,199 --> 00:11:25,949
to go into a lot of best practices

00:11:23,850 --> 00:11:28,379
because there are a lot of talks there's

00:11:25,949 --> 00:11:30,420
even a workshop during I think right

00:11:28,379 --> 00:11:31,949
after the session starts that you can

00:11:30,420 --> 00:11:34,379
learn more about this these are my five

00:11:31,949 --> 00:11:37,410
things if nobody asked me about Canaries

00:11:34,379 --> 00:11:38,879
that I'd recommend once again keep

00:11:37,410 --> 00:11:40,170
things as similar as possible because

00:11:38,879 --> 00:11:42,240
you're really trying to detect very

00:11:40,170 --> 00:11:45,089
small changes that might and want to

00:11:42,240 --> 00:11:47,699
know that change occurred in the canary

00:11:45,089 --> 00:11:49,769
due to the change we made not due the

00:11:47,699 --> 00:11:51,269
fact that we also ran it ran the

00:11:49,769 --> 00:11:54,569
baseline at one o'clock and ran the

00:11:51,269 --> 00:11:57,209
Canaria too for example compared as few

00:11:54,569 --> 00:11:59,459
metrics as possible in the past I've

00:11:57,209 --> 00:12:01,110
seen people with 600 to 900 metrics if

00:11:59,459 --> 00:12:02,279
you look hard enough you will find a

00:12:01,110 --> 00:12:04,709
difference and that doesn't necessarily

00:12:02,279 --> 00:12:06,720
mean there's a problem and now you have

00:12:04,709 --> 00:12:08,459
to figure out how much of a difference

00:12:06,720 --> 00:12:10,259
do you care about which makes it really

00:12:08,459 --> 00:12:13,319
kind of washing so it'd be better to

00:12:10,259 --> 00:12:15,920
have say five metrics or a six metrics

00:12:13,319 --> 00:12:18,509
that each one gives a strong indicator

00:12:15,920 --> 00:12:21,660
errors are almost always better than

00:12:18,509 --> 00:12:24,209
success because errors actually have a

00:12:21,660 --> 00:12:26,610
very meaningful content you know this is

00:12:24,209 --> 00:12:27,899
an error you know it's a problem areas

00:12:26,610 --> 00:12:29,939
are generally better if they go down in

00:12:27,899 --> 00:12:31,769
the canary and so we can direct we can

00:12:29,939 --> 00:12:32,999
check directionality if they go up in

00:12:31,769 --> 00:12:36,990
the canary that's bad if they go down

00:12:32,999 --> 00:12:39,029
it's probably okay and the one thing

00:12:36,990 --> 00:12:41,160
that a lot of people forget about is we

00:12:39,029 --> 00:12:43,259
call this an ax canary experiment and

00:12:41,160 --> 00:12:45,870
the reason we use the word experiment is

00:12:43,259 --> 00:12:48,179
because it's set up to say that the

00:12:45,870 --> 00:12:50,670
thing we're trying to show is are these

00:12:48,179 --> 00:12:52,920
identical well we can't do that so we're

00:12:50,670 --> 00:12:54,870
really trying to say is there reason to

00:12:52,920 --> 00:12:57,929
believe that these are different so it's

00:12:54,870 --> 00:12:59,249
an experiment in the in the case of an

00:12:57,929 --> 00:13:01,079
experiment you want to make certain your

00:12:59,249 --> 00:13:02,759
experiment is set up properly so that

00:13:01,079 --> 00:13:04,139
one of the things that you want to do is

00:13:02,759 --> 00:13:06,569
say there's got to be at least one

00:13:04,139 --> 00:13:08,249
metric that says yes I'm getting the

00:13:06,569 --> 00:13:11,550
same amount of traffic to both my canary

00:13:08,249 --> 00:13:15,240
and baseline we've had cases in the past

00:13:11,550 --> 00:13:16,470
where my previous employer we've had

00:13:15,240 --> 00:13:18,480
cases where the canary was getting no

00:13:16,470 --> 00:13:20,370
traffic and therefore no errors so it

00:13:18,480 --> 00:13:21,959
passed and that's a wonderful thing but

00:13:20,370 --> 00:13:25,139
it was also getting no traffic so no

00:13:21,959 --> 00:13:26,730
wonder it passed it had no errors adding

00:13:25,139 --> 00:13:28,259
that this particular metric and making

00:13:26,730 --> 00:13:29,590
it critical and said the canary config

00:13:28,259 --> 00:13:31,930
make certain that you catch

00:13:29,590 --> 00:13:34,870
this and you would fail and humor then

00:13:31,930 --> 00:13:36,520
after the figure out what's going on and

00:13:34,870 --> 00:13:38,920
the last one is try to use application

00:13:36,520 --> 00:13:40,360
metrics when possible when you start out

00:13:38,920 --> 00:13:42,580
with canary infrastructure you might be

00:13:40,360 --> 00:13:44,980
okay using a system level metrics you

00:13:42,580 --> 00:13:46,540
might be okay with memory CPU on the

00:13:44,980 --> 00:13:48,940
whole as long as that's the only thing

00:13:46,540 --> 00:13:49,900
running on that machine but in the

00:13:48,940 --> 00:13:51,460
future you really want to get

00:13:49,900 --> 00:13:54,100
application level metrics if you can

00:13:51,460 --> 00:13:55,960
it's not required but it really does

00:13:54,100 --> 00:13:58,210
help nail things down because you can

00:13:55,960 --> 00:14:02,620
say which API is failing out of maybe

00:13:58,210 --> 00:14:05,530
four or five api's for example and as

00:14:02,620 --> 00:14:07,900
mentioned also canary is really

00:14:05,530 --> 00:14:11,200
comparing two things two data sets to

00:14:07,900 --> 00:14:14,920
each other and you can use this today in

00:14:11,200 --> 00:14:18,100
spinnaker to compare any two time frames

00:14:14,920 --> 00:14:19,570
of data from metrics you can compare one

00:14:18,100 --> 00:14:23,020
region to another if you wanted to you

00:14:19,570 --> 00:14:25,000
compare last hour to this hour but every

00:14:23,020 --> 00:14:28,720
time you change the environment and you

00:14:25,000 --> 00:14:30,220
weaken that that hard environmental any

00:14:28,720 --> 00:14:31,480
time the environment is also different

00:14:30,220 --> 00:14:32,650
you run the risk of having higher

00:14:31,480 --> 00:14:36,330
variance so you have to possibly

00:14:32,650 --> 00:14:38,530
consider your metric a little bit better

00:14:36,330 --> 00:14:41,500
one of the recommendations I have here

00:14:38,530 --> 00:14:42,970
is the hardest part is figuring out what

00:14:41,500 --> 00:14:44,650
you are gonna be using as your baseline

00:14:42,970 --> 00:14:47,200
but the next hardest part is making

00:14:44,650 --> 00:14:49,360
certain that your metrics work properly

00:14:47,200 --> 00:14:51,610
like for example suppose I'm spinning up

00:14:49,360 --> 00:14:53,800
a new version and I want to compare it

00:14:51,610 --> 00:14:55,420
to a running baseline I might have five

00:14:53,800 --> 00:14:57,100
copies of the running baseline running I

00:14:55,420 --> 00:14:58,420
can't just use queries per second

00:14:57,100 --> 00:14:59,680
because I only have one instance of

00:14:58,420 --> 00:15:02,500
canary and have five of the baseline

00:14:59,680 --> 00:15:04,900
that's not going to work so maybe I have

00:15:02,500 --> 00:15:06,700
to use successful requests as the thing

00:15:04,900 --> 00:15:09,430
to divide everything by so its errors

00:15:06,700 --> 00:15:12,640
per successful request its memory per

00:15:09,430 --> 00:15:14,950
successful request or some incoming

00:15:12,640 --> 00:15:16,150
request or something like that latency

00:15:14,950 --> 00:15:18,070
is probably good across the board

00:15:16,150 --> 00:15:20,080
because latency shouldn't change you're

00:15:18,070 --> 00:15:21,250
really trying to detect changes where

00:15:20,080 --> 00:15:23,110
the system is behaving differently

00:15:21,250 --> 00:15:28,240
submit latency just sort of works

00:15:23,110 --> 00:15:29,890
directly and I would weaken what my

00:15:28,240 --> 00:15:32,200
expectation of this orbit test would be

00:15:29,890 --> 00:15:34,120
a canary we can say very pretty clearly

00:15:32,200 --> 00:15:37,000
this is different but in this sort of

00:15:34,120 --> 00:15:39,780
test this is for the really big errors

00:15:37,000 --> 00:15:42,010
this isn't going to find a 1% variance

00:15:39,780 --> 00:15:42,890
reliably because you're probably always

00:15:42,010 --> 00:15:45,500
going to find that

00:15:42,890 --> 00:15:47,240
but it would find a huge error like my

00:15:45,500 --> 00:15:49,250
latency has gone up by 40 percent well

00:15:47,240 --> 00:15:50,540
that's really bad or my queries err I'm

00:15:49,250 --> 00:15:56,630
returning far more errors than it was

00:15:50,540 --> 00:15:58,610
before that's also really bad we be on

00:15:56,630 --> 00:16:00,980
canary and beyond using canary for a

00:15:58,610 --> 00:16:02,690
generic a be sort of comparisons we do

00:16:00,980 --> 00:16:05,740
have web hooks and SATA spinnaker and

00:16:02,690 --> 00:16:08,270
this works pretty well but it's a stage

00:16:05,740 --> 00:16:10,040
which means it has to go between another

00:16:08,270 --> 00:16:11,660
stage so you have a deployment stage and

00:16:10,040 --> 00:16:13,160
then you have a web hook that can check

00:16:11,660 --> 00:16:16,460
to see if there's health by calling out

00:16:13,160 --> 00:16:17,900
to some external system the problem is

00:16:16,460 --> 00:16:20,810
you've already deployed and I'll get

00:16:17,900 --> 00:16:23,270
into why this isn't quite sufficient

00:16:20,810 --> 00:16:24,860
later but you do have web hooks so you

00:16:23,270 --> 00:16:26,660
could in theory use a web hook to call

00:16:24,860 --> 00:16:29,450
out to an external system and say has an

00:16:26,660 --> 00:16:31,640
alert triggered or some such thing we

00:16:29,450 --> 00:16:33,500
also have health provider checks coming

00:16:31,640 --> 00:16:35,030
in from the cloud provider itself but

00:16:33,500 --> 00:16:36,830
really that just means did the instance

00:16:35,030 --> 00:16:38,090
come up it might mean to the instance

00:16:36,830 --> 00:16:40,550
come up in the application is listening

00:16:38,090 --> 00:16:41,720
on the port but that's pretty much where

00:16:40,550 --> 00:16:43,790
that stops it doesn't check the

00:16:41,720 --> 00:16:44,750
application health and of course for

00:16:43,790 --> 00:16:46,580
those who really like pushing buttons

00:16:44,750 --> 00:16:49,460
and waiting on things we also have

00:16:46,580 --> 00:16:51,650
manual checks I've said a long time ago

00:16:49,460 --> 00:16:53,750
that untested code is broken unmonitored

00:16:51,650 --> 00:16:55,790
machines are broken because I can't

00:16:53,750 --> 00:16:58,490
trust that they're not I also think an

00:16:55,790 --> 00:17:00,380
automated repetitive repetitive tasks

00:16:58,490 --> 00:17:03,020
are broken so if you don't automate a

00:17:00,380 --> 00:17:04,540
repetitive task it might not be broken

00:17:03,020 --> 00:17:07,340
today but it's gonna be broken tomorrow

00:17:04,540 --> 00:17:09,980
so manual checks for me or more for a

00:17:07,340 --> 00:17:11,360
safety check it's places where I might

00:17:09,980 --> 00:17:13,250
want to override an automated decision

00:17:11,360 --> 00:17:14,630
because I don't trust that system yet I

00:17:13,250 --> 00:17:16,370
don't have enough experience with it but

00:17:14,630 --> 00:17:18,650
I wouldn't use it in standard production

00:17:16,370 --> 00:17:21,290
mouth path lines or pathways until

00:17:18,650 --> 00:17:23,660
there's a problem so we use it a lot for

00:17:21,290 --> 00:17:26,510
an initial check we might want to say

00:17:23,660 --> 00:17:29,270
let's run this canary config and see if

00:17:26,510 --> 00:17:31,910
it works but I'm not gonna trust it 100%

00:17:29,270 --> 00:17:34,100
I don't want it to go to I I want it to

00:17:31,910 --> 00:17:35,300
if it's okay it's okay but if it fails I

00:17:34,100 --> 00:17:36,260
might still want to say okay because it

00:17:35,300 --> 00:17:44,660
might be might good thing that's broken

00:17:36,260 --> 00:17:45,590
and that slice would be skipped so I'm

00:17:44,660 --> 00:17:47,660
gonna have logic come back up for

00:17:45,590 --> 00:17:50,570
another few examples here and while he's

00:17:47,660 --> 00:17:51,680
going through this this is an example of

00:17:50,570 --> 00:17:55,130
what we can do today in the canary

00:17:51,680 --> 00:17:56,600
technology think about the different

00:17:55,130 --> 00:17:59,630
places that you might want to add

00:17:56,600 --> 00:18:01,309
into the system that we want to have a

00:17:59,630 --> 00:18:07,720
spinnaker that are not just a canary

00:18:01,309 --> 00:18:10,759
stage all by yourself all right second

00:18:07,720 --> 00:18:12,259
so I'm just going to show you obviously

00:18:10,759 --> 00:18:15,740
you I'm not sure everybody has seen

00:18:12,259 --> 00:18:18,049
can't I here or okay I just wanna give a

00:18:15,740 --> 00:18:19,759
quick quick Wario some people well in we

00:18:18,049 --> 00:18:22,850
haven't seen it obviously you know you

00:18:19,759 --> 00:18:25,009
have you can set up kind it just part of

00:18:22,850 --> 00:18:27,200
the spinnaker open source that Michael

00:18:25,009 --> 00:18:29,750
help right and you know you could

00:18:27,200 --> 00:18:31,850
specify for example as I'm to call it

00:18:29,750 --> 00:18:34,730
config where you specify what matrix you

00:18:31,850 --> 00:18:36,889
want and you can group the matrix and

00:18:34,730 --> 00:18:40,490
also give weight to the metrics so when

00:18:36,889 --> 00:18:41,419
you when you run the analysis it

00:18:40,490 --> 00:18:43,220
basically you know there's all our

00:18:41,419 --> 00:18:44,720
metrics that you select right from let's

00:18:43,220 --> 00:18:46,820
say you have a debt at all or Prometheus

00:18:44,720 --> 00:18:49,220
for example it's basically a metrics

00:18:46,820 --> 00:18:50,629
that you select and in this case there

00:18:49,220 --> 00:18:53,929
are a few metrics selected and then you

00:18:50,629 --> 00:18:57,080
run the candidate stage within spinnaker

00:18:53,929 --> 00:18:58,580
and then you get results basically it

00:18:57,080 --> 00:19:00,649
compares all the metrics you you just

00:18:58,580 --> 00:19:03,139
you just point you just asked it to

00:19:00,649 --> 00:19:06,080
compare and do a statistical comparison

00:19:03,139 --> 00:19:08,179
between between the two versions of

00:19:06,080 --> 00:19:10,490
software the canary and the baseline and

00:19:08,179 --> 00:19:11,600
basically provides you a score in this

00:19:10,490 --> 00:19:13,879
case it's a hundred score because

00:19:11,600 --> 00:19:15,350
everything is similar but you could you

00:19:13,879 --> 00:19:17,960
will see that if there are variations

00:19:15,350 --> 00:19:20,149
significant variations you would see the

00:19:17,960 --> 00:19:22,009
you know you get a different score and

00:19:20,149 --> 00:19:24,440
you would be able to look at it so this

00:19:22,009 --> 00:19:26,480
is very useful tool that we have so one

00:19:24,440 --> 00:19:28,580
of the things that we adopts max have

00:19:26,480 --> 00:19:30,529
done I want to just do a quick show

00:19:28,580 --> 00:19:32,899
there is that what what are some of the

00:19:30,529 --> 00:19:34,129
things that we can do today and that I

00:19:32,899 --> 00:19:35,899
think we should as a community should be

00:19:34,129 --> 00:19:37,340
doing so we're working on you know how

00:19:35,899 --> 00:19:40,549
to open source some of these components

00:19:37,340 --> 00:19:42,019
as well but for now you know I'm just

00:19:40,549 --> 00:19:43,820
gonna show you what we can what we're

00:19:42,019 --> 00:19:47,299
doing right now so you can you have to

00:19:43,820 --> 00:19:50,240
carry stage and you can get a score from

00:19:47,299 --> 00:19:52,639
as part of the pipeline and here we are

00:19:50,240 --> 00:19:54,289
showing that the this is something we

00:19:52,639 --> 00:19:56,690
have done where they're comparing the

00:19:54,289 --> 00:19:58,700
logs for example in this case we are

00:19:56,690 --> 00:20:01,460
comparing two releases for baseline and

00:19:58,700 --> 00:20:05,600
a testing based on a canary diversion

00:20:01,460 --> 00:20:07,580
and identifying for the logs we use a

00:20:05,600 --> 00:20:08,370
natural language processing to identify

00:20:07,580 --> 00:20:10,950
the errors

00:20:08,370 --> 00:20:14,730
and critical errors or warnings as as it

00:20:10,950 --> 00:20:17,010
as as you as you find in the new kinetic

00:20:14,730 --> 00:20:19,080
release and then be able to look at

00:20:17,010 --> 00:20:20,520
things for example in this case it shows

00:20:19,080 --> 00:20:22,559
you how many times this particular error

00:20:20,520 --> 00:20:24,210
message was was repeated it's

00:20:22,559 --> 00:20:26,820
automatically categorized as a critical

00:20:24,210 --> 00:20:29,040
error and then you can also see during

00:20:26,820 --> 00:20:30,750
doing that do you would you know if you

00:20:29,040 --> 00:20:32,610
have run the particular analysis for one

00:20:30,750 --> 00:20:34,170
hour it tells you is it happening the

00:20:32,610 --> 00:20:36,510
beginning of the you know chess or

00:20:34,170 --> 00:20:38,850
during the certain parts of the test so

00:20:36,510 --> 00:20:40,050
you can see here you know some critical

00:20:38,850 --> 00:20:41,910
errors which basically that's why the

00:20:40,050 --> 00:20:43,800
result of the score is zero and there's

00:20:41,910 --> 00:20:45,179
errors or it shows you the number of

00:20:43,800 --> 00:20:47,580
times the particular elements are

00:20:45,179 --> 00:20:49,440
repeated and then it's a warning and etc

00:20:47,580 --> 00:20:51,210
so you can obviously reclassify some

00:20:49,440 --> 00:20:53,340
things for example if the natural

00:20:51,210 --> 00:20:54,750
language processing or the algorithm is

00:20:53,340 --> 00:20:56,640
finding something that's severe and you

00:20:54,750 --> 00:20:58,950
say you know it's really not severe it's

00:20:56,640 --> 00:21:00,929
warning for example or just ignore it

00:20:58,950 --> 00:21:03,540
you can reclassify them and that it will

00:21:00,929 --> 00:21:06,990
this this will learn and for the next

00:21:03,540 --> 00:21:08,280
time you would not have to do it so

00:21:06,990 --> 00:21:09,929
again this works with the existing

00:21:08,280 --> 00:21:11,640
spinnaker obviously as you can see

00:21:09,929 --> 00:21:13,470
there's a little bit beyond current okay

00:21:11,640 --> 00:21:15,870
I was just comparing metrics there's now

00:21:13,470 --> 00:21:18,690
comparing logs and other part that

00:21:15,870 --> 00:21:21,750
Michael was pointing out is that we need

00:21:18,690 --> 00:21:23,280
to go beyond the the i/o metrics and the

00:21:21,750 --> 00:21:26,040
compute metrics etc you know you need to

00:21:23,280 --> 00:21:27,750
go beyond to application level so in

00:21:26,040 --> 00:21:30,720
this case this is an API level

00:21:27,750 --> 00:21:32,700
comparison between the the baseline and

00:21:30,720 --> 00:21:35,130
the canary again it's let's say in this

00:21:32,700 --> 00:21:37,080
case a particular API endpoint it has a

00:21:35,130 --> 00:21:39,540
latency error rate in surfboard and

00:21:37,080 --> 00:21:42,330
those kind of things you can see that

00:21:39,540 --> 00:21:44,370
the baseline is that the canary is much

00:21:42,330 --> 00:21:46,800
higher latency compared to the baseline

00:21:44,370 --> 00:21:49,200
and obviously this failed the score here

00:21:46,800 --> 00:21:51,000
okay these are all sort of incremental

00:21:49,200 --> 00:21:52,860
things where from what kind I was doing

00:21:51,000 --> 00:21:55,730
in terms of just looking at the metrics

00:21:52,860 --> 00:21:57,900
to log in APM and other kinds of metrics

00:21:55,730 --> 00:22:01,800
with that I'm going to give it back to

00:21:57,900 --> 00:22:04,880
you and you can continue on with with

00:22:01,800 --> 00:22:10,890
yeah I think you want to add to be maybe

00:22:04,880 --> 00:22:12,210
sure alright so one of the things I've

00:22:10,890 --> 00:22:13,410
learned about public speaking is I

00:22:12,210 --> 00:22:14,700
always speak faster when I'm actually

00:22:13,410 --> 00:22:17,490
doing the speech so we're gonna finish a

00:22:14,700 --> 00:22:19,380
little early everybody's okay with that

00:22:17,490 --> 00:22:21,370
so autopilot is really similar to client

00:22:19,380 --> 00:22:22,840
it has the same API

00:22:21,370 --> 00:22:24,430
it works in a very similar way to a

00:22:22,840 --> 00:22:26,380
certain point but it is more advanced

00:22:24,430 --> 00:22:27,640
versions of it we do more math behind

00:22:26,380 --> 00:22:30,180
the scenes and also we have the log

00:22:27,640 --> 00:22:32,650
processing those are really the

00:22:30,180 --> 00:22:34,030
important parts of our particular

00:22:32,650 --> 00:22:35,920
application that we do want to open

00:22:34,030 --> 00:22:37,420
source parts of it and possibly merge

00:22:35,920 --> 00:22:39,640
the parts that we do have in into

00:22:37,420 --> 00:22:42,910
Kayenta one thing about Optimax is were

00:22:39,640 --> 00:22:44,350
very focused on the open source world we

00:22:42,910 --> 00:22:45,760
think you should have pluggable models

00:22:44,350 --> 00:22:47,620
it should not be something that we sell

00:22:45,760 --> 00:22:49,900
you and then you're bound into a version

00:22:47,620 --> 00:23:00,550
of spinnaker for Optimax that you have

00:22:49,900 --> 00:23:02,710
to use for example so now I'm going to

00:23:00,550 --> 00:23:04,960
talk a little bit about the future where

00:23:02,710 --> 00:23:06,850
are we headed where where do I think we

00:23:04,960 --> 00:23:09,670
could go this is not necessarily a

00:23:06,850 --> 00:23:11,980
perfect path I need a lot of input and

00:23:09,670 --> 00:23:15,820
we are working with a lot of people on

00:23:11,980 --> 00:23:17,770
this so I would like to see checkpoints

00:23:15,820 --> 00:23:19,060
at multiple places within spinnaker I

00:23:17,770 --> 00:23:20,860
don't think it's sufficient to have a

00:23:19,060 --> 00:23:23,230
stage that makes a decision I think the

00:23:20,860 --> 00:23:24,280
stage itself needs to grow the ability

00:23:23,230 --> 00:23:27,520
to make a decision

00:23:24,280 --> 00:23:28,720
inside the stage one of the one one of

00:23:27,520 --> 00:23:31,000
the stages that I really recommend for

00:23:28,720 --> 00:23:32,500
deploying software if at all possible on

00:23:31,000 --> 00:23:35,410
the cloud provider you're using is the

00:23:32,500 --> 00:23:36,880
rolling red/black and that's where you

00:23:35,410 --> 00:23:38,290
might roll temp you suppose you have ten

00:23:36,880 --> 00:23:41,200
instances of a server that you're trying

00:23:38,290 --> 00:23:43,270
to to roll out you might roll out 10% of

00:23:41,200 --> 00:23:45,520
those the new version and then do a

00:23:43,270 --> 00:23:46,960
health check and then another 10% and do

00:23:45,520 --> 00:23:50,170
a health check until eventually you get

00:23:46,960 --> 00:23:52,270
to 100% of the new code right now the

00:23:50,170 --> 00:23:53,710
rolling red-black will do that but there

00:23:52,270 --> 00:23:56,560
really isn't a good way to hook into

00:23:53,710 --> 00:23:58,330
generic health providers to say is it

00:23:56,560 --> 00:24:00,790
actually working or am i causing a

00:23:58,330 --> 00:24:02,680
problem and I think that's for an

00:24:00,790 --> 00:24:04,810
example of what we need to do stages

00:24:02,680 --> 00:24:06,850
could learn based upon the health check

00:24:04,810 --> 00:24:09,370
they get what action they might take and

00:24:06,850 --> 00:24:11,710
that could be a deployment stage might

00:24:09,370 --> 00:24:13,570
roll back or cancel itself or undo or

00:24:11,710 --> 00:24:17,110
pause or who knows what we want to do

00:24:13,570 --> 00:24:19,360
there but the idea is that safety I want

00:24:17,110 --> 00:24:21,520
to run as fast as possible but I want it

00:24:19,360 --> 00:24:24,400
as fast as possible but as safely as

00:24:21,520 --> 00:24:26,890
possible so this health checks need to

00:24:24,400 --> 00:24:28,150
be as tribute throughout these are some

00:24:26,890 --> 00:24:29,950
of the health checks I've heard of and

00:24:28,150 --> 00:24:33,640
as well as some that I thought up myself

00:24:29,950 --> 00:24:35,080
for based upon experience here we don't

00:24:33,640 --> 00:24:37,720
have a good threshold system

00:24:35,080 --> 00:24:40,090
sort of spinnaker right now it's hard to

00:24:37,720 --> 00:24:42,070
even say something as simple as am i

00:24:40,090 --> 00:24:45,490
meeting my SLA for latency during this

00:24:42,070 --> 00:24:47,260
deployment we don't have that right now

00:24:45,490 --> 00:24:48,730
I think hi anta for example could grow

00:24:47,260 --> 00:24:50,200
that quite easily and then we could call

00:24:48,730 --> 00:24:52,960
it Takei anta once the hook is in place

00:24:50,200 --> 00:24:54,789
a really interesting one that I'd like

00:24:52,960 --> 00:24:57,039
to see added for the and this is a

00:24:54,789 --> 00:24:58,419
possibly a community offering not

00:24:57,039 --> 00:25:01,990
necessarily something inside a spinnaker

00:24:58,419 --> 00:25:04,240
again is a downstream and well upstream

00:25:01,990 --> 00:25:06,880
and especially downstream view of what

00:25:04,240 --> 00:25:09,340
our application looks like a common

00:25:06,880 --> 00:25:11,559
outage I've seen is I'm deploying my

00:25:09,340 --> 00:25:14,740
version the downstream who's calling me

00:25:11,559 --> 00:25:15,820
calls my new version and for some reason

00:25:14,740 --> 00:25:17,679
doesn't like the response so it does a

00:25:15,820 --> 00:25:19,539
retry and it gets the old version and it

00:25:17,679 --> 00:25:21,159
works and so far there's no outage

00:25:19,539 --> 00:25:22,840
nobody's noticed anything aya during a

00:25:21,159 --> 00:25:24,460
canary there's so little traffic

00:25:22,840 --> 00:25:27,490
increase nobody actually notices this

00:25:24,460 --> 00:25:30,159
problem during a rolling deployment at

00:25:27,490 --> 00:25:32,529
10% now that problem is suddenly more

00:25:30,159 --> 00:25:34,210
visible and at 20% I'm starting to see

00:25:32,529 --> 00:25:35,980
significant retries from a downstream

00:25:34,210 --> 00:25:37,659
and I could make an intelligent decision

00:25:35,980 --> 00:25:40,210
that maybe I should stop rolling out my

00:25:37,659 --> 00:25:41,590
version up streams are similar I might

00:25:40,210 --> 00:25:43,779
be for the additional load on upstream

00:25:41,590 --> 00:25:47,230
that they weren't expecting before but

00:25:43,779 --> 00:25:48,760
they at my previous employer downstream

00:25:47,230 --> 00:25:50,440
was more important than upstream it's

00:25:48,760 --> 00:25:52,179
almost always I've added or changed a

00:25:50,440 --> 00:25:53,590
field or some way that they're not quite

00:25:52,179 --> 00:25:55,210
ready for or I'm giving them additional

00:25:53,590 --> 00:25:59,620
data that they weren't expecting and

00:25:55,210 --> 00:26:01,659
they're caught they don't like that but

00:25:59,620 --> 00:26:03,250
we also most of us have alerting systems

00:26:01,659 --> 00:26:04,539
I suspect most big companies have an

00:26:03,250 --> 00:26:06,039
alerting system that they already trust

00:26:04,539 --> 00:26:07,450
and it's already built in so why can't

00:26:06,039 --> 00:26:09,789
spend a call into that and ask questions

00:26:07,450 --> 00:26:11,889
and while we can do that as a webhook

00:26:09,789 --> 00:26:13,600
stage it seems it just seems like it'd

00:26:11,889 --> 00:26:15,880
be really good to do it in the middle of

00:26:13,600 --> 00:26:18,580
a rolling rolling deployment and not

00:26:15,880 --> 00:26:20,440
have to do other stages between

00:26:18,580 --> 00:26:22,029
everything and then trying to manage

00:26:20,440 --> 00:26:24,730
that scale it just gets pretty messy

00:26:22,029 --> 00:26:28,720
pretty fast there's also environmental

00:26:24,730 --> 00:26:30,490
indicators oftentimes DNS is down in one

00:26:28,720 --> 00:26:32,470
zone or something is wrong with one

00:26:30,490 --> 00:26:34,269
particular region and you might not want

00:26:32,470 --> 00:26:36,639
to deploy that region or even not apply

00:26:34,269 --> 00:26:38,169
at all and these are unrelated to your

00:26:36,639 --> 00:26:39,760
application but the idea is that if I'd

00:26:38,169 --> 00:26:41,049
continued the deployment I might cause

00:26:39,760 --> 00:26:42,490
an outage just better let things sit

00:26:41,049 --> 00:26:46,690
still perhaps than anything else

00:26:42,490 --> 00:26:48,880
I mentioned log analysis here because

00:26:46,690 --> 00:26:50,830
almost everything is either on a health

00:26:48,880 --> 00:26:52,270
indicator or metric log analysis would

00:26:50,830 --> 00:26:54,550
be awesome there's probably other things

00:26:52,270 --> 00:26:57,970
we can do there - maybe memory pattern

00:26:54,550 --> 00:27:00,940
analysis or call traces and compliance

00:26:57,970 --> 00:27:02,230
security the common checks that we have

00:27:00,940 --> 00:27:05,230
to do to make certain that we all remain

00:27:02,230 --> 00:27:08,520
legal and we all remain sane which

00:27:05,230 --> 00:27:10,990
engineers like myself as mentioned

00:27:08,520 --> 00:27:12,850
understand exists that aren't so

00:27:10,990 --> 00:27:15,640
concerned about other than they need to

00:27:12,850 --> 00:27:19,780
be there and a big one for me is also

00:27:15,640 --> 00:27:21,880
verification of deployments people go on

00:27:19,780 --> 00:27:23,200
or people can and some take cases go on

00:27:21,880 --> 00:27:25,090
and fiddle with configs on side of

00:27:23,200 --> 00:27:27,220
running instances it'd be often nice to

00:27:25,090 --> 00:27:28,270
know that happened so that we can say

00:27:27,220 --> 00:27:29,740
we're not going to deploy because

00:27:28,270 --> 00:27:30,880
somebody has made of modifications is

00:27:29,740 --> 00:27:36,130
config and we're gonna overwrite that

00:27:30,880 --> 00:27:38,140
which might actually cause an outage one

00:27:36,130 --> 00:27:40,000
thing I want to stress again is that we

00:27:38,140 --> 00:27:42,670
are trying to build an ecosystem we're

00:27:40,000 --> 00:27:44,110
not trying to say this is the Office of

00:27:42,670 --> 00:27:45,460
X way we want to do things we want to

00:27:44,110 --> 00:27:47,500
build a system where it's pluggable

00:27:45,460 --> 00:27:50,200
multiple vendors can come along and add

00:27:47,500 --> 00:27:51,880
their special sauce in and with the open

00:27:50,200 --> 00:27:54,040
source spinnaker you're still able to

00:27:51,880 --> 00:27:56,560
use all the tools you want to build the

00:27:54,040 --> 00:27:59,590
things you need to get your safety level

00:27:56,560 --> 00:28:01,390
that you're looking for I'd like to

00:27:59,590 --> 00:28:03,370
point out we have a cig started for this

00:28:01,390 --> 00:28:06,820
particular task it is the unfortunate

00:28:03,370 --> 00:28:09,190
name of operational validation I need to

00:28:06,820 --> 00:28:10,600
pick a word and I chose those two we

00:28:09,190 --> 00:28:12,280
currently have the three people

00:28:10,600 --> 00:28:14,200
mentioned here Matt Duffy Michael Graff

00:28:12,280 --> 00:28:16,720
myself and Chris Sandin

00:28:14,200 --> 00:28:19,270
we are the three people who focus

00:28:16,720 --> 00:28:21,160
primarily on Kayenta so were the three

00:28:19,270 --> 00:28:23,800
people who generated that kaientai

00:28:21,160 --> 00:28:26,370
originally and we're trying to build a

00:28:23,800 --> 00:28:28,270
framework where we can actually evaluate

00:28:26,370 --> 00:28:29,350
different techniques and different

00:28:28,270 --> 00:28:30,580
systems and have them hook into

00:28:29,350 --> 00:28:32,650
spinnaker and how they should get a

00:28:30,580 --> 00:28:33,940
spinnaker specifically focusing around

00:28:32,650 --> 00:28:35,860
the decision points that we're trying to

00:28:33,940 --> 00:28:39,610
do and there is a talk later on I think

00:28:35,860 --> 00:28:41,110
it's today about pluggable pluggable

00:28:39,610 --> 00:28:42,550
spinnaker and this is something we're

00:28:41,110 --> 00:28:44,140
also very interested in for finances

00:28:42,550 --> 00:28:46,290
specifically but also for spinnaker as

00:28:44,140 --> 00:28:46,290
well

00:28:47,010 --> 00:28:50,880
so we have many related sessions one is

00:28:49,500 --> 00:28:52,410
already on video so you're gonna have to

00:28:50,880 --> 00:28:54,900
watch it on video because it's already

00:28:52,410 --> 00:28:56,490
occurred this morning that's the journey

00:28:54,900 --> 00:28:59,880
to save critical mission continuous

00:28:56,490 --> 00:29:01,260
delivery at this party's lab we also

00:28:59,880 --> 00:29:02,490
have an automatic analysis workshop

00:29:01,260 --> 00:29:04,350
which I mentioned if you're interested

00:29:02,490 --> 00:29:06,450
in that that happens at 2:30 it actually

00:29:04,350 --> 00:29:07,470
is two hours long so you don't have to

00:29:06,450 --> 00:29:08,549
show up to the whole thing but it'd be

00:29:07,470 --> 00:29:10,650
good to show up to at least the first

00:29:08,549 --> 00:29:14,220
part of it if you're curious pure I

00:29:10,650 --> 00:29:16,290
guess canary curious we also have

00:29:14,220 --> 00:29:18,720
another talk here on Sunday 12:30 and we

00:29:16,290 --> 00:29:20,160
have a talk at 1:30 and I'm especially I

00:29:18,720 --> 00:29:22,530
don't want to downplay the middle one

00:29:20,160 --> 00:29:24,120
here but we actually have I'm very

00:29:22,530 --> 00:29:27,210
interested in actually in the middle one

00:29:24,120 --> 00:29:30,120
because a referee is a system built as

00:29:27,210 --> 00:29:32,250
Nike and Chi anta when we built it was

00:29:30,120 --> 00:29:34,340
originally designed to be a standalone

00:29:32,250 --> 00:29:37,559
tool as well as a part of spinnaker and

00:29:34,340 --> 00:29:39,210
this is a UI on top of chi anta without

00:29:37,559 --> 00:29:40,380
using spinnaker so even if you're not

00:29:39,210 --> 00:29:42,419
using spinnaker today you can still

00:29:40,380 --> 00:29:43,169
experiment areas using referee which i

00:29:42,419 --> 00:29:46,110
think is pretty awesome

00:29:43,169 --> 00:29:47,429
it shows the that's one once again we're

00:29:46,110 --> 00:29:49,350
trying to build an ecosystem here we're

00:29:47,429 --> 00:29:50,940
not really too biased on how people use

00:29:49,350 --> 00:30:25,230
our tools we just want want them to get

00:29:50,940 --> 00:30:27,570
the best use out of it oh yeah that's

00:30:25,230 --> 00:30:29,580
the plan so my point is that I want to

00:30:27,570 --> 00:30:32,160
have spinnaker be able to call out to

00:30:29,580 --> 00:30:33,450
existing solutions we are building one

00:30:32,160 --> 00:30:35,610
that I talked about a little bit and

00:30:33,450 --> 00:30:36,929
more we presented that more to show this

00:30:35,610 --> 00:30:40,080
is the kind of thing we want to tap into

00:30:36,929 --> 00:30:43,470
my goal is to make spinnaker

00:30:40,080 --> 00:30:44,700
not care about what it calls maybe there

00:30:43,470 --> 00:30:49,590
would be some configuration that you

00:30:44,700 --> 00:30:51,000
have to call it yeah I didn't do a

00:30:49,590 --> 00:30:52,440
mock-up or anything but perhaps I should

00:30:51,000 --> 00:30:54,090
have the idea that I'm thinking of is

00:30:52,440 --> 00:30:55,830
there will be health checks for an

00:30:54,090 --> 00:30:57,240
application in the stage you can say I

00:30:55,830 --> 00:30:58,980
want to pay attention to these health

00:30:57,240 --> 00:30:59,730
checks by default and I skip this one

00:30:58,980 --> 00:31:02,490
because for some

00:30:59,730 --> 00:31:05,070
doesn't matter for the stage perhaps but

00:31:02,490 --> 00:31:07,860
you might have a did any alerts fire no

00:31:05,070 --> 00:31:09,060
great did our metrics with an SLA

00:31:07,860 --> 00:31:11,490
requirements yes great

00:31:09,060 --> 00:31:13,380
there's a compliance framework you know

00:31:11,490 --> 00:31:14,820
check us out and say yes okay great now

00:31:13,380 --> 00:31:17,610
we can use it you into the next day so I

00:31:14,820 --> 00:31:18,900
think it's it's I think the APM the one

00:31:17,610 --> 00:31:21,750
example I showed you whether it's

00:31:18,900 --> 00:31:22,350
showing the latency and this is actually

00:31:21,750 --> 00:31:28,890
doing New Relic

00:31:22,350 --> 00:31:30,570
that's it is coming from your like you

00:31:28,890 --> 00:31:31,980
just shown in this context because at

00:31:30,570 --> 00:31:33,510
the end of the day you trying to

00:31:31,980 --> 00:31:34,950
evaluate the whole thing you're looking

00:31:33,510 --> 00:31:36,450
at the logs you looking at the new and

00:31:34,950 --> 00:31:39,030
you know like you're looking at the

00:31:36,450 --> 00:31:41,100
Prometheus etc all in one consolidated

00:31:39,030 --> 00:31:42,750
reporting right and that's just done

00:31:41,100 --> 00:31:44,580
that's just a tip of the iceberg as you

00:31:42,750 --> 00:31:46,890
there's a whole bunch of things we need

00:31:44,580 --> 00:31:48,030
to check the key relation compliance if

00:31:46,890 --> 00:31:55,320
you look at it that's sort of the whole

00:31:48,030 --> 00:31:56,340
thing you would feel comfortable exactly

00:31:55,320 --> 00:31:58,440
how it's done

00:31:56,340 --> 00:31:59,970
oh yeah this this is more about the idea

00:31:58,440 --> 00:32:02,130
that spinnaker needs to be able to tap

00:31:59,970 --> 00:32:03,630
into those things and where it music app

00:32:02,130 --> 00:32:05,130
in because right now you could you could

00:32:03,630 --> 00:32:07,740
go stage and said caught up to the

00:32:05,130 --> 00:32:09,630
particular APM solution but now you can

00:32:07,740 --> 00:32:11,340
only do it between stages like rolling

00:32:09,630 --> 00:32:13,320
red black has already occurred it's done

00:32:11,340 --> 00:32:14,940
you know you can't go back and undo that

00:32:13,320 --> 00:32:16,440
easily and plus you may have crossed out

00:32:14,940 --> 00:32:17,960
it should be nice along the way we could

00:32:16,440 --> 00:32:21,600
check those APM solutions

00:32:17,960 --> 00:32:23,280
yeah the value-add essentially is now we

00:32:21,600 --> 00:32:24,870
look at the baseline and the kennedy and

00:32:23,280 --> 00:32:26,700
try to give you the comparison and

00:32:24,870 --> 00:32:27,630
there's a historical way to understand

00:32:26,700 --> 00:32:29,730
that thing as well like there's a

00:32:27,630 --> 00:32:32,610
history behind it not just a point in

00:32:29,730 --> 00:32:35,040
time comparison in some ways yeah and

00:32:32,610 --> 00:32:36,780
then and then also you can do read rules

00:32:35,040 --> 00:32:38,490
and policies and things like that that

00:32:36,780 --> 00:32:43,350
is sort of specific to an application

00:32:38,490 --> 00:32:45,300
you know the sort of the the primary

00:32:43,350 --> 00:32:47,130
atomic unit is an application or a micro

00:32:45,300 --> 00:32:48,420
service for example right so you have a

00:32:47,130 --> 00:32:50,610
different view if you're looking at that

00:32:48,420 --> 00:32:52,130
from that angle versus a if you just go

00:32:50,610 --> 00:32:54,570
to noodle I can look at that specific

00:32:52,130 --> 00:32:55,770
metric and things like that so we're

00:32:54,570 --> 00:32:58,050
trying to sort of make this as a

00:32:55,770 --> 00:32:59,700
validation of the service or an

00:32:58,050 --> 00:33:02,430
application and it has multiple

00:32:59,700 --> 00:33:04,590
components to it yeah we can talk more I

00:33:02,430 --> 00:33:08,080
think I'll fly

00:33:04,590 --> 00:33:11,140
yeah so you can so for the framework

00:33:08,080 --> 00:33:13,570
that calls out I hope all of it my I'm a

00:33:11,140 --> 00:33:16,150
big open service proponent I've worked

00:33:13,570 --> 00:33:20,050
in by 9:00 in my past so DNS world and I

00:33:16,150 --> 00:33:21,610
really want open source everything so I

00:33:20,050 --> 00:33:23,080
understand you know we have secret sauce

00:33:21,610 --> 00:33:25,360
just like everybody else does that keeps

00:33:23,080 --> 00:33:28,540
the lights on but I I would like to keep

00:33:25,360 --> 00:33:31,030
as much in the standard open source

00:33:28,540 --> 00:33:33,700
spinnaker as possible because I think

00:33:31,030 --> 00:33:35,560
that's the value I'm very I'm not really

00:33:33,700 --> 00:33:37,720
against I don't wanna say I'm like no

00:33:35,560 --> 00:33:39,310
company should do this but I would

00:33:37,720 --> 00:33:40,900
prefer to see open source solutions

00:33:39,310 --> 00:33:42,460
where you can pick and you can pick

00:33:40,900 --> 00:33:44,410
proprietary implementations of certain

00:33:42,460 --> 00:33:46,690
features and pull them in rather than

00:33:44,410 --> 00:33:48,040
being tied into specific oh you have to

00:33:46,690 --> 00:33:49,570
use our version of spinnaker to get

00:33:48,040 --> 00:33:51,370
these features that are our special

00:33:49,570 --> 00:33:52,720
sauce because now how do you get another

00:33:51,370 --> 00:33:56,800
company special sauce at the same time

00:33:52,720 --> 00:33:58,930
yeah so the operational validation sig

00:33:56,800 --> 00:34:01,120
is sort of that neutral party right

00:33:58,930 --> 00:34:02,500
that's sort of bringing that whole thing

00:34:01,120 --> 00:34:04,570
to the spinnaker and then there's

00:34:02,500 --> 00:34:06,940
obviously some implementation that the

00:34:04,570 --> 00:34:09,669
open source if we can also open source

00:34:06,940 --> 00:34:13,360
and anybody can open source but the goal

00:34:09,669 --> 00:34:15,310
is to be yeah to be a spinnaker OSS and

00:34:13,360 --> 00:34:16,570
we have next year to Sigma T yet but all

00:34:15,310 --> 00:34:20,470
three of us are now physically in the

00:34:16,570 --> 00:34:21,909
same area so we we have the plan to get

00:34:20,470 --> 00:34:24,810
together at some point and actually say

00:34:21,909 --> 00:34:24,810
when are we gonna have our first meeting

00:34:30,139 --> 00:34:34,799

YouTube URL: https://www.youtube.com/watch?v=oWMdDjz38Bs


