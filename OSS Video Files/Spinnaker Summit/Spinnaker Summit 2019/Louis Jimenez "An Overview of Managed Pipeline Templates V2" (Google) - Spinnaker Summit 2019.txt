Title: Louis Jimenez "An Overview of Managed Pipeline Templates V2" (Google) - Spinnaker Summit 2019
Publication date: 2019-12-03
Playlist: Spinnaker Summit 2019
Description: 
	The third annual Spinnaker Summit (Diamond Sponsors: Netflix, Google and Armory) was held at the Hard Rock Hotel in San Diego, CA from November 15-17, 2019 and welcomed over 500 members of the rapidly growing Spinnaker open source community.
Captions: 
	00:00:06,330 --> 00:00:10,980
[Laughter]

00:00:13,760 --> 00:00:17,330
I'm excited to be the summit a lot of

00:00:15,860 --> 00:00:20,210
people here and I'm happy that you came

00:00:17,330 --> 00:00:21,830
to this talk hopefully this will be a

00:00:20,210 --> 00:00:23,750
helpful overview of some of the concepts

00:00:21,830 --> 00:00:26,360
behind manage pipeline templates B to

00:00:23,750 --> 00:00:27,560
give you a little bit history and I want

00:00:26,360 --> 00:00:29,330
you to be able to walk away from here

00:00:27,560 --> 00:00:30,529
knowing how you can get started if you

00:00:29,330 --> 00:00:32,689
haven't started exploring it

00:00:30,529 --> 00:00:35,180
how could be useful to you and your

00:00:32,689 --> 00:00:37,460
organization and also just an idea of

00:00:35,180 --> 00:00:41,450
where it's heading so let's dive right

00:00:37,460 --> 00:00:42,649
into it so I want to lay a baseline

00:00:41,450 --> 00:00:44,870
we're going to go over some concepts

00:00:42,649 --> 00:00:47,060
first some of these are just part of

00:00:44,870 --> 00:00:48,620
spinnaker putting its pipeline templates

00:00:47,060 --> 00:00:50,090
aside and then may already be familiar

00:00:48,620 --> 00:00:55,100
but I still think it's worthwhile to go

00:00:50,090 --> 00:00:56,960
down this path so let's talk first of

00:00:55,100 --> 00:00:58,010
all pipeline configurations you've

00:00:56,960 --> 00:01:00,140
probably worked with pipeline

00:00:58,010 --> 00:01:02,020
configurations already they allow us to

00:01:00,140 --> 00:01:03,890
define essentially a sequence of stages

00:01:02,020 --> 00:01:07,040
that's going to determine how our

00:01:03,890 --> 00:01:09,170
artifact will eventually be deployed to

00:01:07,040 --> 00:01:11,000
a particular environment these stages

00:01:09,170 --> 00:01:12,799
are going to have triggers parameters

00:01:11,000 --> 00:01:13,880
notifications and all these things are

00:01:12,799 --> 00:01:14,810
going to be relevant to pipeline

00:01:13,880 --> 00:01:16,790
templates as well

00:01:14,810 --> 00:01:18,979
now pipeline configurations are

00:01:16,790 --> 00:01:21,499
persisted as JSON you have the

00:01:18,979 --> 00:01:23,479
opportunity to go ahead and build them

00:01:21,499 --> 00:01:25,700
in the UI to go into the stage graph and

00:01:23,479 --> 00:01:28,429
string them together or you can actually

00:01:25,700 --> 00:01:30,560
edit the JSON itself and you're going to

00:01:28,429 --> 00:01:32,030
see some of these same concepts as we

00:01:30,560 --> 00:01:35,600
dive deeper into sort of how does this

00:01:32,030 --> 00:01:37,850
relate to templates so I want to talk

00:01:35,600 --> 00:01:40,249
about an extension of pipeline templates

00:01:37,850 --> 00:01:42,259
template of pipelines template of

00:01:40,249 --> 00:01:44,359
pipelines are similar in that is by

00:01:42,259 --> 00:01:46,130
design we want to make it as easy as

00:01:44,359 --> 00:01:47,270
possible for you to take all the stuff

00:01:46,130 --> 00:01:48,950
you know about pipelines and

00:01:47,270 --> 00:01:50,810
manipulating them and then sort of build

00:01:48,950 --> 00:01:51,979
on that and add some additional

00:01:50,810 --> 00:01:54,350
properties there and some of the

00:01:51,979 --> 00:01:55,759
properties I'm gonna highlight are what

00:01:54,350 --> 00:01:58,670
you need essentially to reference a

00:01:55,759 --> 00:01:59,840
template from a pipeline and the

00:01:58,670 --> 00:02:01,700
variable values that you're going to

00:01:59,840 --> 00:02:04,009
provide so that you can hydrate the

00:02:01,700 --> 00:02:05,659
template and actually get a fully

00:02:04,009 --> 00:02:07,670
executed pipeline that has some

00:02:05,659 --> 00:02:10,459
additional functionality that it derived

00:02:07,670 --> 00:02:12,770
from the template so here we have some

00:02:10,459 --> 00:02:15,770
pipeline config fairly straightforward

00:02:12,770 --> 00:02:18,080
example here what I think is worth

00:02:15,770 --> 00:02:21,080
calling out is that there is a template

00:02:18,080 --> 00:02:23,959
map and in that template map we have a

00:02:21,080 --> 00:02:25,459
reference to the template that this

00:02:23,959 --> 00:02:27,110
pipeline is going to be using so this is

00:02:25,459 --> 00:02:28,550
a template a pipeline

00:02:27,110 --> 00:02:31,670
you'll see we're under this reference

00:02:28,550 --> 00:02:33,980
key it says okay I want the pipeline the

00:02:31,670 --> 00:02:35,690
template with the ID new spell template

00:02:33,980 --> 00:02:37,340
so this is assuming that you've already

00:02:35,690 --> 00:02:40,190
saved the template and I'm gonna go into

00:02:37,340 --> 00:02:41,630
how you would do that as well there's

00:02:40,190 --> 00:02:42,710
some other properties here that allow it

00:02:41,630 --> 00:02:44,090
to resolve where the templates are

00:02:42,710 --> 00:02:45,410
actually saved and that's inside of

00:02:44,090 --> 00:02:47,120
front 50

00:02:45,410 --> 00:02:49,040
and then what's worth calling out as

00:02:47,120 --> 00:02:51,200
well is that there's a variables map and

00:02:49,040 --> 00:02:53,330
in the variables we see this is only

00:02:51,200 --> 00:02:54,770
defined one it's called wait time it's

00:02:53,330 --> 00:02:57,410
saying that okay this is gonna have a

00:02:54,770 --> 00:02:59,990
wait stage for this particular instance

00:02:57,410 --> 00:03:03,710
of the template of pipeline it's going

00:02:59,990 --> 00:03:05,090
to wait for seconds so let's keep moving

00:03:03,710 --> 00:03:06,200
on let's talk about templates because

00:03:05,090 --> 00:03:09,980
it's going to make more sense when we

00:03:06,200 --> 00:03:11,780
combine these things templates have a

00:03:09,980 --> 00:03:15,200
similar configuration to pipelines and

00:03:11,780 --> 00:03:16,370
they actually have a pipeline a subset

00:03:15,200 --> 00:03:18,800
of the template is a pipeline

00:03:16,370 --> 00:03:22,580
configuration so let me try to unpack

00:03:18,800 --> 00:03:25,220
that you'll have a key inside of the

00:03:22,580 --> 00:03:27,530
template that has a pipeline config that

00:03:25,220 --> 00:03:30,560
will have stages define artifacts

00:03:27,530 --> 00:03:32,630
triggers notifications and what you

00:03:30,560 --> 00:03:34,730
define at the template level inside of

00:03:32,630 --> 00:03:37,100
this configuration will be inherited by

00:03:34,730 --> 00:03:41,030
any pipelines that reference that

00:03:37,100 --> 00:03:42,860
particular template so if I was creating

00:03:41,030 --> 00:03:45,260
a template and I determined that well

00:03:42,860 --> 00:03:47,650
you know every pipeline that comes from

00:03:45,260 --> 00:03:51,410
this particular template should trigger

00:03:47,650 --> 00:03:53,030
and trigger in this same fashion I would

00:03:51,410 --> 00:03:54,590
go ahead and I put that at the template

00:03:53,030 --> 00:03:57,230
level and I would take advantage of the

00:03:54,590 --> 00:04:00,260
fact that pipelines can inherit from

00:03:57,230 --> 00:04:03,410
templates templates themselves they're

00:04:00,260 --> 00:04:05,300
parameterised configurations where the

00:04:03,410 --> 00:04:07,820
support essentially spell expressions

00:04:05,300 --> 00:04:09,320
where you can say for that trigger I was

00:04:07,820 --> 00:04:11,840
talking about you could create a

00:04:09,320 --> 00:04:15,110
variable defined that in the template

00:04:11,840 --> 00:04:16,400
and say well maybe everybody's needs to

00:04:15,110 --> 00:04:18,590
configure this trigger a little bit

00:04:16,400 --> 00:04:20,810
let's go ahead and say this particular

00:04:18,590 --> 00:04:22,640
property will be a parameter that can be

00:04:20,810 --> 00:04:25,820
derived from the pipeline when it's

00:04:22,640 --> 00:04:27,740
created one more thing to note implicit

00:04:25,820 --> 00:04:29,210
variations are versioned so when they're

00:04:27,740 --> 00:04:31,520
saved in front 50 we're actually saving

00:04:29,210 --> 00:04:33,830
multiple revisions of them and you'll

00:04:31,520 --> 00:04:35,570
have the opportunity to tag them or to

00:04:33,830 --> 00:04:36,830
pin to a particular template and I'll

00:04:35,570 --> 00:04:40,460
talk about that a little bit more later

00:04:36,830 --> 00:04:41,120
so here's an example template you'll see

00:04:40,460 --> 00:04:44,210
that there's a

00:04:41,120 --> 00:04:46,669
schema saying we're using v2 I'm gonna

00:04:44,210 --> 00:04:48,919
dive more into MPTV - although v1 exists

00:04:46,669 --> 00:04:51,050
and has found success at companies like

00:04:48,919 --> 00:04:54,440
Netflix and some other large

00:04:51,050 --> 00:04:55,550
organizations we also have here this

00:04:54,440 --> 00:04:57,110
this is where the variables are being

00:04:55,550 --> 00:04:59,870
defined you'll see that there's a

00:04:57,110 --> 00:05:01,340
particular type for the variable we saw

00:04:59,870 --> 00:05:03,800
earlier we're saying it's an integer

00:05:01,340 --> 00:05:05,630
we're defining it and this is where in

00:05:03,800 --> 00:05:07,820
the previous example why that pipeline

00:05:05,630 --> 00:05:09,800
configuration was providing that value

00:05:07,820 --> 00:05:11,000
of 4 because it's essentially providing

00:05:09,800 --> 00:05:14,360
what is needed so that when this

00:05:11,000 --> 00:05:16,460
template is hydrated we can resolve the

00:05:14,360 --> 00:05:19,639
spell expression in there and have that

00:05:16,460 --> 00:05:21,800
variable be put to use the stages are

00:05:19,639 --> 00:05:23,840
also defined here we see some stages

00:05:21,800 --> 00:05:27,440
also defined here inside of the template

00:05:23,840 --> 00:05:29,720
and these particular stages are going to

00:05:27,440 --> 00:05:32,330
then be inherited by the pipeline unless

00:05:29,720 --> 00:05:34,850
the pipeline actually uses an exclude

00:05:32,330 --> 00:05:36,110
collection to say oh I don't want like I

00:05:34,850 --> 00:05:37,160
don't want to inherit this particular

00:05:36,110 --> 00:05:39,110
item but by default

00:05:37,160 --> 00:05:40,639
things like stages things like triggers

00:05:39,110 --> 00:05:42,530
notifications they are going to be

00:05:40,639 --> 00:05:47,360
inherited by whatever a pipeline is

00:05:42,530 --> 00:05:48,710
referencing this template so how do

00:05:47,360 --> 00:05:51,800
these things actually come together well

00:05:48,710 --> 00:05:53,990
that's what I'm calling hydration at the

00:05:51,800 --> 00:05:56,270
point of execution when spinnaker is

00:05:53,990 --> 00:05:58,610
going to run your pipeline it has to

00:05:56,270 --> 00:06:00,200
essentially figure out what is missing

00:05:58,610 --> 00:06:01,820
from this template a template a pipeline

00:06:00,200 --> 00:06:04,340
and that's going to happen inside of

00:06:01,820 --> 00:06:05,780
Oracle what it's going to do is it's

00:06:04,340 --> 00:06:08,120
going to follow that reference that's

00:06:05,780 --> 00:06:09,710
saved on the pipeline configuration it's

00:06:08,120 --> 00:06:11,270
going to get the template and it's going

00:06:09,710 --> 00:06:13,220
to look at what it needs to fill in in

00:06:11,270 --> 00:06:14,750
the template so the template like I said

00:06:13,220 --> 00:06:16,910
earlier might be defining stages the

00:06:14,750 --> 00:06:19,010
template might be defining variables to

00:06:16,910 --> 00:06:20,570
resolve those variable bindings they'll

00:06:19,010 --> 00:06:22,699
look at the variables that are provided

00:06:20,570 --> 00:06:25,130
in the pipeline config and we use those

00:06:22,699 --> 00:06:28,669
values to hydrate the template and when

00:06:25,130 --> 00:06:30,410
you're done you get one ready to go full

00:06:28,669 --> 00:06:32,030
pipeline that is essentially

00:06:30,410 --> 00:06:34,400
indistinguishable from a pipeline that

00:06:32,030 --> 00:06:38,570
you had just written by hand and was not

00:06:34,400 --> 00:06:40,460
templated hydration happens whenever you

00:06:38,570 --> 00:06:43,039
go to manually execute a pipeline it

00:06:40,460 --> 00:06:45,560
occurs whenever a trigger would fire and

00:06:43,039 --> 00:06:47,000
start up a pipeline it even occurs when

00:06:45,560 --> 00:06:48,169
you go to configure a pipeline and the

00:06:47,000 --> 00:06:50,240
reason for this is that when you're

00:06:48,169 --> 00:06:51,680
configuring a pipeline you may not

00:06:50,240 --> 00:06:52,600
really care if it's template it or not

00:06:51,680 --> 00:06:54,250
template it

00:06:52,600 --> 00:06:56,200
you need to see what are the artifacts

00:06:54,250 --> 00:06:57,790
that affected what are the triggers that

00:06:56,200 --> 00:06:59,410
are defined in this pipeline so we're

00:06:57,790 --> 00:07:01,120
gonna go ahead and fully resolve that so

00:06:59,410 --> 00:07:04,570
you can get a full picture of what that

00:07:01,120 --> 00:07:06,850
pipeline looks like in the UI that

00:07:04,570 --> 00:07:08,470
brings me to the last point template of

00:07:06,850 --> 00:07:09,640
pipelines there's an indication that a

00:07:08,470 --> 00:07:11,950
templated but once you go in to

00:07:09,640 --> 00:07:13,540
configure it you can see okay this is

00:07:11,950 --> 00:07:15,790
defined at the pipeline level this is

00:07:13,540 --> 00:07:18,460
being inherited from a template and

00:07:15,790 --> 00:07:20,500
there's even a modal inside of the

00:07:18,460 --> 00:07:22,240
configuration route where you can see

00:07:20,500 --> 00:07:25,240
what does the pipeline config look like

00:07:22,240 --> 00:07:26,620
in its bare State before it's been gone

00:07:25,240 --> 00:07:28,630
through the hydration process with the

00:07:26,620 --> 00:07:32,440
template and what does this fully render

00:07:28,630 --> 00:07:33,730
ready to go pipeline look like so I've

00:07:32,440 --> 00:07:35,530
talked a little bit about the concepts

00:07:33,730 --> 00:07:37,510
now let's actually talk about why I

00:07:35,530 --> 00:07:40,840
would want to use this you know what's

00:07:37,510 --> 00:07:42,430
the value here I think where there's a

00:07:40,840 --> 00:07:44,500
lot of opportunity for pipeline

00:07:42,430 --> 00:07:46,450
templates to shine and be put to use is

00:07:44,500 --> 00:07:48,970
when you're trying to scale out your

00:07:46,450 --> 00:07:51,700
best practices across an organization so

00:07:48,970 --> 00:07:53,530
I'm imagining a model where you have a

00:07:51,700 --> 00:07:55,780
platform team and the platform team

00:07:53,530 --> 00:07:58,210
knows how to do deployments they know

00:07:55,780 --> 00:08:00,370
spinnaker they're a little bit more

00:07:58,210 --> 00:08:02,860
knowledgeable in figuring out what's the

00:08:00,370 --> 00:08:05,530
best way to get my binary in front of

00:08:02,860 --> 00:08:07,300
users now they've gone through the

00:08:05,530 --> 00:08:08,650
trials and tribulations of figuring out

00:08:07,300 --> 00:08:12,850
what the deployment pipelines are

00:08:08,650 --> 00:08:14,890
supposed to look like they have codified

00:08:12,850 --> 00:08:16,390
that it's one way or another and they

00:08:14,890 --> 00:08:18,370
want to share that how are you going to

00:08:16,390 --> 00:08:20,020
do that well pipeline templates give you

00:08:18,370 --> 00:08:21,940
an opportunity to get your application

00:08:20,020 --> 00:08:24,010
teams up and running a little more

00:08:21,940 --> 00:08:25,150
quickly the application team could

00:08:24,010 --> 00:08:27,280
decide that when they create their

00:08:25,150 --> 00:08:29,170
pipeline why not reference a template

00:08:27,280 --> 00:08:31,570
and you'll get to bring essentially all

00:08:29,170 --> 00:08:33,400
those lessons that your platform team

00:08:31,570 --> 00:08:35,680
has learned you could be it to use them

00:08:33,400 --> 00:08:37,030
essentially for free it does take a

00:08:35,680 --> 00:08:38,919
little bit of configuration providing

00:08:37,030 --> 00:08:40,539
your variable values but this is to give

00:08:38,919 --> 00:08:42,219
you a jumpstart and let application

00:08:40,539 --> 00:08:43,860
teams do what they do best which is

00:08:42,219 --> 00:08:45,910
build out applications

00:08:43,860 --> 00:08:47,560
another thing that's offered here is

00:08:45,910 --> 00:08:50,160
that the platform team has the

00:08:47,560 --> 00:08:53,320
opportunity to propagate changes

00:08:50,160 --> 00:08:55,060
obviously we learn things we evolve how

00:08:53,320 --> 00:08:57,190
our strategies for how we wanted to play

00:08:55,060 --> 00:08:59,680
our artifacts and as we do that an

00:08:57,190 --> 00:09:01,960
organizational level we can modify our

00:08:59,680 --> 00:09:04,390
templates and then we can use versioning

00:09:01,960 --> 00:09:05,920
we can use tags and we can decide how

00:09:04,390 --> 00:09:06,310
are we going to disseminate this

00:09:05,920 --> 00:09:08,470
throughout

00:09:06,310 --> 00:09:10,090
organization so an application team for

00:09:08,470 --> 00:09:11,800
example might decide that they're gonna

00:09:10,090 --> 00:09:14,110
track this stable tag and they want to

00:09:11,800 --> 00:09:16,600
automatically receive any updates to the

00:09:14,110 --> 00:09:18,040
stable version of a template or they

00:09:16,600 --> 00:09:20,680
might decide that well that's a little

00:09:18,040 --> 00:09:22,029
too risky what works for us is we want

00:09:20,680 --> 00:09:23,320
to be able to pin to a particular

00:09:22,029 --> 00:09:26,650
version of a template and that's

00:09:23,320 --> 00:09:29,860
supported as well so I want to talk

00:09:26,650 --> 00:09:32,470
about what has existed actually since

00:09:29,860 --> 00:09:36,610
early 2017 which is managed pipeline

00:09:32,470 --> 00:09:38,200
templates v1 v1 has a lot of conceptual

00:09:36,610 --> 00:09:39,460
overlap with some of the stuff I've

00:09:38,200 --> 00:09:42,580
already talked about and what I'm going

00:09:39,460 --> 00:09:44,529
to be talking about what v2 and v1 it's

00:09:42,580 --> 00:09:46,720
really powerful allows you to compose

00:09:44,529 --> 00:09:47,980
templates from other from other

00:09:46,720 --> 00:09:51,220
templates it allows you to have multiple

00:09:47,980 --> 00:09:53,020
levels of inheritance and even has a CLI

00:09:51,220 --> 00:09:56,680
for managing and supporting these

00:09:53,020 --> 00:09:59,290
templates now all of this tooling um is

00:09:56,680 --> 00:10:00,880
been deprecated or just it really isn't

00:09:59,290 --> 00:10:02,380
being maintained anymore and I'll go

00:10:00,880 --> 00:10:06,880
into that a little bit more sort of why

00:10:02,380 --> 00:10:09,370
this played out like it did so would v1

00:10:06,880 --> 00:10:11,190
like I mentioned before v1 has been put

00:10:09,370 --> 00:10:13,240
to great use of multiple organizations

00:10:11,190 --> 00:10:15,960
but there are some issues that have

00:10:13,240 --> 00:10:18,850
cropped up and sort of given some

00:10:15,960 --> 00:10:21,280
intense debugging sessions to the

00:10:18,850 --> 00:10:22,870
maintainer zuv templates essentially

00:10:21,280 --> 00:10:24,880
what they found that there was a lot of

00:10:22,870 --> 00:10:26,950
server-side complexity that went into

00:10:24,880 --> 00:10:29,500
making v1 work and supporting things

00:10:26,950 --> 00:10:31,180
like modules or template inheritance and

00:10:29,500 --> 00:10:33,370
a lot of this complexity stems from the

00:10:31,180 --> 00:10:34,870
fact that Orca was using two different

00:10:33,370 --> 00:10:37,720
templating engines at the same time

00:10:34,870 --> 00:10:39,880
along the boundary of using Jin Java and

00:10:37,720 --> 00:10:41,710
also using spell expressions there was a

00:10:39,880 --> 00:10:44,500
space where lots of different tricky

00:10:41,710 --> 00:10:47,230
bugs would pop up and it slowed this

00:10:44,500 --> 00:10:49,240
speed of iteration on v1 made it

00:10:47,230 --> 00:10:51,459
difficult to reason about and also in

00:10:49,240 --> 00:10:53,230
supporting Jin Java a lot of custom code

00:10:51,459 --> 00:10:55,650
was written so that you can do things

00:10:53,230 --> 00:10:57,940
like template composition server-side

00:10:55,650 --> 00:11:00,970
one of the lessons that came from this

00:10:57,940 --> 00:11:02,800
is well maybe this sort of complication

00:11:00,970 --> 00:11:05,410
inheritance shouldn't be living on the

00:11:02,800 --> 00:11:07,690
server side maybe we're trying to fit a

00:11:05,410 --> 00:11:08,650
square peg into a round hole and that's

00:11:07,690 --> 00:11:10,330
where the idea said well what did we

00:11:08,650 --> 00:11:11,740
take this out what does it look like if

00:11:10,330 --> 00:11:13,750
we do template composition somewhere

00:11:11,740 --> 00:11:15,070
else this was going to be a breaking

00:11:13,750 --> 00:11:16,990
change along with some of the other

00:11:15,070 --> 00:11:19,379
ideas that were being thrown about and

00:11:16,990 --> 00:11:20,939
that's where v2 came from so

00:11:19,379 --> 00:11:22,769
going to be a major change it was also

00:11:20,939 --> 00:11:25,199
going to be an opportunity to hopefully

00:11:22,769 --> 00:11:26,699
introduce some enhancements some of

00:11:25,199 --> 00:11:28,289
those enhancements include thinking

00:11:26,699 --> 00:11:30,209
about what is to the template

00:11:28,289 --> 00:11:31,439
development cycle look like how does it

00:11:30,209 --> 00:11:33,149
feel to actually write these templates

00:11:31,439 --> 00:11:35,009
how can we make it easy for people using

00:11:33,149 --> 00:11:36,329
spinnaker to actually use this feature

00:11:35,009 --> 00:11:37,709
and to know what they're doing and to

00:11:36,329 --> 00:11:40,979
feel like they have some transparency

00:11:37,709 --> 00:11:42,839
into what's going on this also gave the

00:11:40,979 --> 00:11:44,159
opportunity I've started touching so

00:11:42,839 --> 00:11:46,529
working around the edges of it but it's

00:11:44,159 --> 00:11:48,479
also gave the opportunity for this idea

00:11:46,529 --> 00:11:50,699
of versions for templates and we'll keep

00:11:48,479 --> 00:11:53,729
digging into that as we go deeper into

00:11:50,699 --> 00:11:54,479
the presentation so now I'm going to

00:11:53,729 --> 00:11:57,419
shift I'm going to talk about

00:11:54,479 --> 00:11:59,549
implementation I do have a demo that's

00:11:57,419 --> 00:12:01,199
recorded it's a little bit safer than

00:11:59,549 --> 00:12:03,839
going live there's just too many moving

00:12:01,199 --> 00:12:07,589
pieces so what I'm going to be doing I'm

00:12:03,839 --> 00:12:10,019
gonna be talking through the demo and it

00:12:07,589 --> 00:12:11,729
should hopefully spell out some of these

00:12:10,019 --> 00:12:14,309
tools and some of these concepts a

00:12:11,729 --> 00:12:16,379
little bit more so the first thing I'm

00:12:14,309 --> 00:12:18,779
going to talk about is spawning so what

00:12:16,379 --> 00:12:20,970
spawn it is is it is a library that's

00:12:18,779 --> 00:12:22,289
built on top of JSON it well what is

00:12:20,970 --> 00:12:23,369
JSON you may have already use it but

00:12:22,289 --> 00:12:26,339
it's a data template

00:12:23,369 --> 00:12:28,439
language it allows you to work in JSON

00:12:26,339 --> 00:12:30,029
it allows you to essentially do some of

00:12:28,439 --> 00:12:32,009
the things we were doing in b1 on the

00:12:30,029 --> 00:12:33,389
server side but now we're going to be

00:12:32,009 --> 00:12:34,439
able to write our templates and we're

00:12:33,389 --> 00:12:37,350
going to be able to do things like

00:12:34,439 --> 00:12:38,850
composition inheritance using JSON it

00:12:37,350 --> 00:12:42,209
and the extension on top of it

00:12:38,850 --> 00:12:44,759
spawn it and do all of this outside of

00:12:42,209 --> 00:12:46,709
the context of spinnaker outside of the

00:12:44,759 --> 00:12:48,659
when you're trying to hydrate a template

00:12:46,709 --> 00:12:51,839
and hopefully avoiding this whole class

00:12:48,659 --> 00:12:53,519
of bugs so what's one of those it's

00:12:51,839 --> 00:12:55,739
written so that it supports a broad set

00:12:53,519 --> 00:12:57,959
of spinnaker objects it allows you to

00:12:55,739 --> 00:13:01,199
generate pipelines applications

00:12:57,959 --> 00:13:02,850
templates it's it's meant to sort of add

00:13:01,199 --> 00:13:05,339
that spinnaker flavor on top of

00:13:02,850 --> 00:13:11,209
templating with JSON it so I'm gonna

00:13:05,339 --> 00:13:11,209
switch now to the video all right

00:13:12,610 --> 00:13:20,060
so to start what I have here is I've

00:13:15,710 --> 00:13:21,640
gone ahead and installed a spinning

00:13:20,060 --> 00:13:23,840
spinnaker using spinnaker for GCP

00:13:21,640 --> 00:13:25,820
essentially like it allows me to get up

00:13:23,840 --> 00:13:28,160
and running quickly with my spinnaker

00:13:25,820 --> 00:13:29,660
instance on a cluster and one of the

00:13:28,160 --> 00:13:32,270
things it's nice it comes with these two

00:13:29,660 --> 00:13:34,940
sample pipelines so the pipeline's I

00:13:32,270 --> 00:13:38,630
have here are derived from just running

00:13:34,940 --> 00:13:40,100
the sample pipeline execution script and

00:13:38,630 --> 00:13:41,690
what I have here is essentially one for

00:13:40,100 --> 00:13:43,730
deploying to staging one for deploying

00:13:41,690 --> 00:13:46,220
to production what that really means is

00:13:43,730 --> 00:13:48,530
I'm deploying to a cluster where I have

00:13:46,220 --> 00:13:51,830
two namespaces one for staging or for

00:13:48,530 --> 00:13:53,870
production and the interesting pipeline

00:13:51,830 --> 00:13:56,150
here is a deployed of staging one which

00:13:53,870 --> 00:13:57,560
you'll notice is disabled the reason

00:13:56,150 --> 00:13:59,540
it's disabled is because I'm going to

00:13:57,560 --> 00:14:00,800
run through recreating a templated

00:13:59,540 --> 00:14:02,660
version of that so I don't want to rely

00:14:00,800 --> 00:14:05,360
on the non template of one I just want

00:14:02,660 --> 00:14:06,710
it there for reference so let's look at

00:14:05,360 --> 00:14:08,210
this configuration and try to understand

00:14:06,710 --> 00:14:08,540
a little bit about what's really going

00:14:08,210 --> 00:14:10,850
on

00:14:08,540 --> 00:14:13,130
so the poi is aging like I said it's

00:14:10,850 --> 00:14:14,780
going to deploy three different

00:14:13,130 --> 00:14:15,530
kubernetes objects it's going to deploy

00:14:14,780 --> 00:14:17,330
a namespace

00:14:15,530 --> 00:14:19,790
that's a staging in space it's going to

00:14:17,330 --> 00:14:21,200
deploy a service so we can actually take

00:14:19,790 --> 00:14:22,700
a look at the go web service that we're

00:14:21,200 --> 00:14:25,730
going to be deploying and it's going to

00:14:22,700 --> 00:14:27,920
deploy a replica set now what we have

00:14:25,730 --> 00:14:31,340
here is we've defined the expected

00:14:27,920 --> 00:14:32,510
artifacts you'll see that as I'm

00:14:31,340 --> 00:14:34,760
scrolling through here you'll see that

00:14:32,510 --> 00:14:36,140
there is reference to the manifests

00:14:34,760 --> 00:14:37,850
we're gonna have a cloud build job

00:14:36,140 --> 00:14:39,230
that's gonna get kicked off it's going

00:14:37,850 --> 00:14:40,550
to take the manifest for all those

00:14:39,230 --> 00:14:43,250
kubernetes objects and it's going to

00:14:40,550 --> 00:14:45,410
drop them in GCS and we're also going to

00:14:43,250 --> 00:14:46,940
have a docker image that's actually

00:14:45,410 --> 00:14:48,650
going to be that's going to contain our

00:14:46,940 --> 00:14:50,300
go binary that's going to just have a

00:14:48,650 --> 00:14:54,860
simple web server that's going to just

00:14:50,300 --> 00:14:56,210
show us hello world so if we keep going

00:14:54,860 --> 00:14:57,620
through this the intention is we're

00:14:56,210 --> 00:14:59,450
going to turn all this into a template

00:14:57,620 --> 00:15:02,210
of pipeline including this trigger here

00:14:59,450 --> 00:15:04,730
at the bottom this trigger will whenever

00:15:02,210 --> 00:15:07,490
we make changes to our source code for

00:15:04,730 --> 00:15:09,500
the go web server and the build gets

00:15:07,490 --> 00:15:10,610
kicked off if it's successful this is

00:15:09,500 --> 00:15:14,120
gonna get picked up and we're gonna

00:15:10,610 --> 00:15:17,600
deploy to the stage of the namespace so

00:15:14,120 --> 00:15:19,190
when we're done we'll see we're going to

00:15:17,600 --> 00:15:20,900
try to update this but this is how it

00:15:19,190 --> 00:15:23,090
stood before going through any of this

00:15:20,900 --> 00:15:24,620
just hello world against a beautiful

00:15:23,090 --> 00:15:26,990
green background

00:15:24,620 --> 00:15:30,230
and we have this is the source code for

00:15:26,990 --> 00:15:31,760
it straightforward stuff and then I just

00:15:30,230 --> 00:15:34,220
wanted to go back to the pipeline here

00:15:31,760 --> 00:15:36,200
to highlight give you an idea of this is

00:15:34,220 --> 00:15:37,730
the JSON for this particular pipeline

00:15:36,200 --> 00:15:39,320
now this is not calm this is not a

00:15:37,730 --> 00:15:41,420
complex pipeline there's stuff that's

00:15:39,320 --> 00:15:43,550
missing here we're not cleaning up our

00:15:41,420 --> 00:15:45,110
service there's a whole bunch of other

00:15:43,550 --> 00:15:47,810
stuff you could be doing here and yet

00:15:45,110 --> 00:15:49,880
there's gonna be a lot of JSON already I

00:15:47,810 --> 00:15:50,810
think one of the challenges you look at

00:15:49,880 --> 00:15:52,430
something like this and you try to

00:15:50,810 --> 00:15:55,550
figure yourself how am I going to turn

00:15:52,430 --> 00:15:58,790
that into a template and we can begin to

00:15:55,550 --> 00:16:02,270
answer that question by looking at this

00:15:58,790 --> 00:16:03,860
JSON file so this is using spawn it what

00:16:02,270 --> 00:16:05,630
we're doing here is we're gonna we're

00:16:03,860 --> 00:16:06,950
going to recreate that pipeline but

00:16:05,630 --> 00:16:08,210
first we're going to define a template

00:16:06,950 --> 00:16:10,400
so it's easier for other applications

00:16:08,210 --> 00:16:12,320
teams who want to do the same sort of

00:16:10,400 --> 00:16:13,910
thing to go ahead and just provide some

00:16:12,320 --> 00:16:16,400
variables and then they're up and

00:16:13,910 --> 00:16:20,540
running so I'm going to start by calling

00:16:16,400 --> 00:16:22,310
out here looking at line three so on

00:16:20,540 --> 00:16:23,990
line three we're using the import

00:16:22,310 --> 00:16:26,120
functionality that's part of JSON and

00:16:23,990 --> 00:16:27,830
we're pulling in other files so you can

00:16:26,120 --> 00:16:30,200
now actually begin to compose from

00:16:27,830 --> 00:16:31,820
different files and bring imports and

00:16:30,200 --> 00:16:34,070
use some of JSON it's templating

00:16:31,820 --> 00:16:36,470
functionality to start making logical

00:16:34,070 --> 00:16:38,540
clean separations of the parts that will

00:16:36,470 --> 00:16:41,780
go into your template so you'll see for

00:16:38,540 --> 00:16:43,730
example here on line four we have MPT

00:16:41,780 --> 00:16:45,080
which that's a part of spawn it that's

00:16:43,730 --> 00:16:46,850
sort of that layering I was talking

00:16:45,080 --> 00:16:47,810
about the spinnaker specific and we're

00:16:46,850 --> 00:16:49,550
saying okay we're gonna have a managed

00:16:47,810 --> 00:16:51,170
pipeline template we're gonna add some

00:16:49,550 --> 00:16:53,060
variables to that and now we're gonna go

00:16:51,170 --> 00:16:55,640
ahead and build out the these variables

00:16:53,060 --> 00:16:57,290
so in this first example this represents

00:16:55,640 --> 00:16:59,060
the kubernetes cluster account your app

00:16:57,290 --> 00:17:00,950
team might have their own cluster here's

00:16:59,060 --> 00:17:03,590
what you're doing you're defining the

00:17:00,950 --> 00:17:06,680
variables that are going to go into into

00:17:03,590 --> 00:17:08,840
this template and going to be available

00:17:06,680 --> 00:17:11,600
for the pipeline configuration to

00:17:08,840 --> 00:17:13,850
reference and provide values for so we

00:17:11,600 --> 00:17:17,390
come back to the JSON a file that I have

00:17:13,850 --> 00:17:18,770
here we've pulled in those variables we

00:17:17,390 --> 00:17:20,510
are now actually going to start like

00:17:18,770 --> 00:17:22,490
referencing the artifacts that we saw

00:17:20,510 --> 00:17:24,440
the artifacts for the manifest for the

00:17:22,490 --> 00:17:28,310
docker image you'll see for example on

00:17:24,440 --> 00:17:30,350
line 13 we're now taking advantage of

00:17:28,310 --> 00:17:31,940
the fact that templates support spell

00:17:30,350 --> 00:17:33,800
expressions to reference one of those

00:17:31,940 --> 00:17:35,750
variables we defined so you'll see on

00:17:33,800 --> 00:17:37,680
line 13 there's a template variable

00:17:35,750 --> 00:17:39,060
there that's when I go when you go to

00:17:37,680 --> 00:17:41,130
the period of hydration that I mentioned

00:17:39,060 --> 00:17:42,480
that's when that value is going to be

00:17:41,130 --> 00:17:44,910
filled in with what's coming from the

00:17:42,480 --> 00:17:46,590
pipeline so I'll scroll the scroll

00:17:44,910 --> 00:17:49,560
through here this is a lot of defining

00:17:46,590 --> 00:17:51,360
like additional artifacts online 54 we

00:17:49,560 --> 00:17:53,040
start defining our stages again this is

00:17:51,360 --> 00:17:54,780
stuff that's a part of spawn it which is

00:17:53,040 --> 00:17:57,330
why you can work with spinnaker specific

00:17:54,780 --> 00:17:58,980
concepts line 79 we're defining the

00:17:57,330 --> 00:18:00,690
trigger that allows us to actually kick

00:17:58,980 --> 00:18:03,000
off the deploy to staging pipeline once

00:18:00,690 --> 00:18:05,120
to cloud once cloud build is succeeded

00:18:03,000 --> 00:18:08,190
and then finally at the end of this

00:18:05,120 --> 00:18:10,590
online 100 we're done we're gonna have a

00:18:08,190 --> 00:18:12,150
pipeline template but before we can

00:18:10,590 --> 00:18:13,470
actually do anything with this we need

00:18:12,150 --> 00:18:14,610
to have an idea like did I build the

00:18:13,470 --> 00:18:17,340
right thing what does this look like

00:18:14,610 --> 00:18:19,140
still not really clear to me so this is

00:18:17,340 --> 00:18:27,570
where we're going to go back to the tape

00:18:19,140 --> 00:18:29,430
and let's see yeah alright okay so this

00:18:27,570 --> 00:18:33,360
is just the same file that was going

00:18:29,430 --> 00:18:35,220
through and okay wanted to catch it

00:18:33,360 --> 00:18:39,150
great that's probably really hard to

00:18:35,220 --> 00:18:40,080
read can I make that bigger no well it's

00:18:39,150 --> 00:18:41,940
simple in that files read out loud

00:18:40,080 --> 00:18:43,920
essentially we're calling the we're

00:18:41,940 --> 00:18:46,260
using JSON it here we're calling to JSON

00:18:43,920 --> 00:18:48,240
JSON a command we're passing in a

00:18:46,260 --> 00:18:50,700
reference to that file that I just wrote

00:18:48,240 --> 00:18:52,530
the deploys staging JSON it and then as

00:18:50,700 --> 00:18:54,930
we go through here it's going to spit

00:18:52,530 --> 00:18:57,030
out the generated template so you'll see

00:18:54,930 --> 00:18:58,920
as I'm scrolling through this there's

00:18:57,030 --> 00:19:00,840
those template variables again there's

00:18:58,920 --> 00:19:02,940
this is now actually closer to what

00:19:00,840 --> 00:19:05,430
spent what we can actually save and

00:19:02,940 --> 00:19:07,830
persist in spinnaker can go into front

00:19:05,430 --> 00:19:09,330
50 this is the template for the pipeline

00:19:07,830 --> 00:19:12,270
that I showed at the beginning of this

00:19:09,330 --> 00:19:14,970
demo now what I'm just going to go

00:19:12,270 --> 00:19:17,880
through here is I'm gonna check these

00:19:14,970 --> 00:19:19,500
JSON of files into a repository as we

00:19:17,880 --> 00:19:21,930
start building closer to sort of an AZ

00:19:19,500 --> 00:19:24,120
code way of managing and deriving our

00:19:21,930 --> 00:19:27,240
templates I'm just gonna go ahead and

00:19:24,120 --> 00:19:29,700
push this up and what I have underlying

00:19:27,240 --> 00:19:31,470
this is a cloud source repository so you

00:19:29,700 --> 00:19:33,060
see it doesn't exist yet go ahead and

00:19:31,470 --> 00:19:35,700
refresh that and now what we have here

00:19:33,060 --> 00:19:38,160
is those JSON of files that I was

00:19:35,700 --> 00:19:40,230
working on and I did a dry run on I said

00:19:38,160 --> 00:19:41,640
they look good I pushed them up and now

00:19:40,230 --> 00:19:44,850
they're sitting inside of cloud source

00:19:41,640 --> 00:19:45,870
and essentially they can be you can put

00:19:44,850 --> 00:19:47,340
these things back together you can

00:19:45,870 --> 00:19:49,110
compose it again and you'll end up with

00:19:47,340 --> 00:19:51,110
that template but for now we're saving

00:19:49,110 --> 00:19:54,540
the JSON it files

00:19:51,110 --> 00:19:56,310
so what we want to do from here is we

00:19:54,540 --> 00:19:59,010
want to figure out okay well I had this

00:19:56,310 --> 00:20:00,960
in source control a transparency into

00:19:59,010 --> 00:20:02,760
what my templates actually going to be

00:20:00,960 --> 00:20:04,650
built from but how do I actually get

00:20:02,760 --> 00:20:06,630
that to spinnaker now and this is where

00:20:04,650 --> 00:20:09,570
spin CLI comes into the picture

00:20:06,630 --> 00:20:11,010
spin CLI doesn't have to necessarily be

00:20:09,570 --> 00:20:13,230
used for automation or this particular

00:20:11,010 --> 00:20:15,510
use case it's really flexible this is a

00:20:13,230 --> 00:20:16,920
command line tool that supports doing

00:20:15,510 --> 00:20:18,660
multiple things across spinnaker whether

00:20:16,920 --> 00:20:21,840
you're working with Canaries pipelines

00:20:18,660 --> 00:20:23,250
listing applications what it's doing

00:20:21,840 --> 00:20:25,380
essentially it's calling the gate API

00:20:23,250 --> 00:20:27,900
and the same functionality you see in

00:20:25,380 --> 00:20:30,030
gates API spin see alive it doesn't have

00:20:27,900 --> 00:20:32,460
it you can work to extend it and it's

00:20:30,030 --> 00:20:33,840
fairly straightforward so the reason

00:20:32,460 --> 00:20:35,880
spin CLI is a part of this presentation

00:20:33,840 --> 00:20:39,150
now is because it also has functionality

00:20:35,880 --> 00:20:41,010
for managing v2 pipeline templates what

00:20:39,150 --> 00:20:42,720
it'll allow us to do in the in the

00:20:41,010 --> 00:20:45,240
continuation of this demo is that we can

00:20:42,720 --> 00:20:47,850
use it as part of our CI process so I

00:20:45,240 --> 00:20:51,720
went through and I set up a cloud build

00:20:47,850 --> 00:20:53,730
job that when I go ahead and I push

00:20:51,720 --> 00:20:56,310
something to that particular cloud

00:20:53,730 --> 00:20:58,140
source repository when I push these JSON

00:20:56,310 --> 00:21:00,150
files it's going to go ahead and trigger

00:20:58,140 --> 00:21:02,580
a cloud built and then that cloud build

00:21:00,150 --> 00:21:04,980
job will use JSON it they'll create

00:21:02,580 --> 00:21:06,960
that's do that same sort of drive one we

00:21:04,980 --> 00:21:09,000
did it's going to get that full template

00:21:06,960 --> 00:21:11,130
file and then it's going to use spin CLI

00:21:09,000 --> 00:21:16,410
to actually go ahead and then push that

00:21:11,130 --> 00:21:20,850
to front 15 so let's uh let's find the

00:21:16,410 --> 00:21:22,530
section that does that all right so what

00:21:20,850 --> 00:21:24,080
I'm just going through here just this is

00:21:22,530 --> 00:21:26,760
cloud build we're just going through

00:21:24,080 --> 00:21:28,770
I've set up a trigger it's monitoring

00:21:26,760 --> 00:21:30,360
the templates folder so the way the

00:21:28,770 --> 00:21:32,310
repository is laid out is there is a

00:21:30,360 --> 00:21:34,050
templates folder inside of that I'm

00:21:32,310 --> 00:21:36,120
saving my templates I want to trigger

00:21:34,050 --> 00:21:37,920
whenever I make whenever I push a change

00:21:36,120 --> 00:21:40,080
to that that's gonna take up when I'm

00:21:37,920 --> 00:21:41,310
saving things when I'm deleting files in

00:21:40,080 --> 00:21:43,560
this case we're just gonna demo you're

00:21:41,310 --> 00:21:44,940
saving a new template and this was right

00:21:43,560 --> 00:21:47,010
after I pushed that up it had triggered

00:21:44,940 --> 00:21:49,920
this build so you'll see that this was a

00:21:47,010 --> 00:21:52,020
this build was pushed from essentially

00:21:49,920 --> 00:21:55,050
when I pushed the template folder to

00:21:52,020 --> 00:21:57,570
master it kicked this thing off and I

00:21:55,050 --> 00:21:58,760
think what's interesting here is that

00:21:57,570 --> 00:22:01,290
towards the end of it you'll see that

00:21:58,760 --> 00:22:03,540
right there this message pipeline

00:22:01,290 --> 00:22:04,380
templates save succeeded what's going on

00:22:03,540 --> 00:22:08,760
there is it

00:22:04,380 --> 00:22:10,800
using this function in spin CLI spin

00:22:08,760 --> 00:22:13,500
pipeline templates save and what it's

00:22:10,800 --> 00:22:16,080
doing is it's providing the file that we

00:22:13,500 --> 00:22:18,210
generated using JSON it and it's just

00:22:16,080 --> 00:22:19,650
making a save of that template and now

00:22:18,210 --> 00:22:21,800
that template has been saved there are

00:22:19,650 --> 00:22:24,450
multiple versions of it it's in front 50

00:22:21,800 --> 00:22:26,520
and it's ready to use and this is where

00:22:24,450 --> 00:22:28,020
we can now start looking at the UI so

00:22:26,520 --> 00:22:30,420
we'll see that there's a dedicated route

00:22:28,020 --> 00:22:33,180
now pipeline templates and if you this

00:22:30,420 --> 00:22:33,660
is what we just were looking at in the

00:22:33,180 --> 00:22:35,730
command line

00:22:33,660 --> 00:22:37,980
and it's been pushed up thanks to the

00:22:35,730 --> 00:22:40,230
fact that we put into source control we

00:22:37,980 --> 00:22:47,910
triggered and then we pushed it using

00:22:40,230 --> 00:22:49,050
spin CLI so I just brought the UI let's

00:22:47,910 --> 00:22:51,540
talk a little bit more about what's

00:22:49,050 --> 00:22:54,210
going on there there is now a dedicated

00:22:51,540 --> 00:22:55,560
route for when you saved the template if

00:22:54,210 --> 00:22:57,810
you want to view them if you want to

00:22:55,560 --> 00:22:59,190
manage them from that route you have the

00:22:57,810 --> 00:23:01,020
ability and then create a pipeline

00:22:59,190 --> 00:23:02,430
that's gonna reference that template

00:23:01,020 --> 00:23:05,580
it's going to inherit things from it's

00:23:02,430 --> 00:23:08,520
going to provide the variables and you

00:23:05,580 --> 00:23:09,630
can also go ahead and another UI

00:23:08,520 --> 00:23:12,300
functionally convert an existing

00:23:09,630 --> 00:23:13,860
pipeline to a template sort of go the

00:23:12,300 --> 00:23:17,850
other way in it and I'll go into that as

00:23:13,860 --> 00:23:19,740
well so let's I have one more video here

00:23:17,850 --> 00:23:22,260
that's going to just show us the UI in

00:23:19,740 --> 00:23:24,120
action so we're picking up where we left

00:23:22,260 --> 00:23:26,430
off and what we want to do is we want to

00:23:24,120 --> 00:23:27,840
go ahead and create a pipeline so we're

00:23:26,430 --> 00:23:29,730
gonna get this is the application that

00:23:27,840 --> 00:23:32,910
we're looking for here's the pipeline

00:23:29,730 --> 00:23:35,160
name and what I did for the purpose of

00:23:32,910 --> 00:23:36,630
the demo is pretend I click the continue

00:23:35,160 --> 00:23:39,720
button because I had in another tab

00:23:36,630 --> 00:23:42,390
ready to go just so you have to watch me

00:23:39,720 --> 00:23:44,190
fill all these fields so what's going on

00:23:42,390 --> 00:23:45,930
here is these are the the template

00:23:44,190 --> 00:23:48,900
variables that were defined in the

00:23:45,930 --> 00:23:50,790
template this is the opportunity if

00:23:48,900 --> 00:23:52,830
you're an application team for me to say

00:23:50,790 --> 00:23:54,420
well I like those stages I like the

00:23:52,830 --> 00:23:56,040
triggers I like everything you have but

00:23:54,420 --> 00:23:58,140
I need it to customize a little bit more

00:23:56,040 --> 00:23:59,910
here's where you do it here's where you

00:23:58,140 --> 00:24:02,040
say this is where my cluster is at this

00:23:59,910 --> 00:24:04,590
is my GCS account here's where you can

00:24:02,040 --> 00:24:06,210
find my manifests and you would go

00:24:04,590 --> 00:24:07,380
through and this is right after save

00:24:06,210 --> 00:24:10,020
this is when you would configure this

00:24:07,380 --> 00:24:11,580
information was popping up in the

00:24:10,020 --> 00:24:14,070
tooltip there's a description that was

00:24:11,580 --> 00:24:15,990
saved in the template and then you have

00:24:14,070 --> 00:24:18,190
an opportunity here to turn off

00:24:15,990 --> 00:24:20,799
inheritance so you can say

00:24:18,190 --> 00:24:22,690
maybe I don't want to notify or actually

00:24:20,799 --> 00:24:24,850
I don't want to trigger whenever that

00:24:22,690 --> 00:24:26,679
whenever there's a CI job that succeeds

00:24:24,850 --> 00:24:29,110
and you can go ahead and toggle that off

00:24:26,679 --> 00:24:32,169
and sort of turn off that function turn

00:24:29,110 --> 00:24:33,700
off inheriting that functionality so for

00:24:32,169 --> 00:24:35,710
the person that purposes of the demo I

00:24:33,700 --> 00:24:37,809
left it on will see some of the same

00:24:35,710 --> 00:24:39,039
stages are there again this is not saved

00:24:37,809 --> 00:24:40,629
on the pipeline cafeé if you were to

00:24:39,039 --> 00:24:42,429
look at it you wouldn't see these stages

00:24:40,629 --> 00:24:44,259
this is just coming down from the

00:24:42,429 --> 00:24:46,480
template and you can see that the same

00:24:44,259 --> 00:24:48,639
artifacts are there you can see that the

00:24:46,480 --> 00:24:50,919
trigger is there all this stuff is

00:24:48,639 --> 00:24:52,779
coming down from the template but this

00:24:50,919 --> 00:24:54,639
is a pipeline that's actually just

00:24:52,779 --> 00:24:58,090
hydrating along with the template and

00:24:54,639 --> 00:24:59,620
then surfacing this inside of the UI so

00:24:58,090 --> 00:25:01,690
we're gonna go ahead and save that and

00:24:59,620 --> 00:25:03,789
then we see here in the UI that we have

00:25:01,690 --> 00:25:05,980
now there's the pipeline that was saved

00:25:03,789 --> 00:25:08,259
got a little icon too to indicate that

00:25:05,980 --> 00:25:10,529
it's templated and it's going to take up

00:25:08,259 --> 00:25:13,600
the place with that disabled pipeline

00:25:10,529 --> 00:25:15,669
finally I had started mentioning that

00:25:13,600 --> 00:25:17,500
you could export from a pipeline to a

00:25:15,669 --> 00:25:19,389
template essentially go the other in the

00:25:17,500 --> 00:25:21,370
other direction this is how you would do

00:25:19,389 --> 00:25:23,110
it even if you wanted to get a head

00:25:21,370 --> 00:25:24,669
start on writing your template if you

00:25:23,110 --> 00:25:26,769
had a pipeline that you put together the

00:25:24,669 --> 00:25:28,720
UI and it works fairly well here's your

00:25:26,769 --> 00:25:30,070
chance to get that JSON and then you can

00:25:28,720 --> 00:25:33,610
continue tooling it you can add

00:25:30,070 --> 00:25:39,210
variables or you could just save it

00:25:33,610 --> 00:25:39,210
directly into from 50 as a template so

00:25:39,240 --> 00:25:44,740
to pull this all together we went

00:25:43,330 --> 00:25:47,350
through sort of how spawning can help

00:25:44,740 --> 00:25:49,269
you when you're writing templates we

00:25:47,350 --> 00:25:51,039
talked a little bit about how if you

00:25:49,269 --> 00:25:52,960
want to take an adze code approach to

00:25:51,039 --> 00:25:54,970
managing your templates what you can do

00:25:52,960 --> 00:25:56,590
is you can then check those JSON it

00:25:54,970 --> 00:25:58,330
files into source control and then you

00:25:56,590 --> 00:26:00,820
can set up your CI job to trigger from

00:25:58,330 --> 00:26:02,200
there the CI the CI job could actually

00:26:00,820 --> 00:26:04,419
go ahead and build the templates just

00:26:02,200 --> 00:26:06,460
using the same tooling using JSON it and

00:26:04,419 --> 00:26:07,809
then it can use fin CLI to go ahead and

00:26:06,460 --> 00:26:09,039
save it and do other things if you

00:26:07,809 --> 00:26:12,549
wanted to like I said it's been C alive

00:26:09,039 --> 00:26:14,350
fairly flexible once the templates been

00:26:12,549 --> 00:26:16,000
saved that's your opportunity in the UI

00:26:14,350 --> 00:26:17,830
to go ahead and create a pipeline which

00:26:16,000 --> 00:26:20,019
is what we did and then we went ahead

00:26:17,830 --> 00:26:22,000
and configured it now there are multiple

00:26:20,019 --> 00:26:24,490
approaches for how you how you want to

00:26:22,000 --> 00:26:26,649
do this essentially if you have another

00:26:24,490 --> 00:26:27,879
way that you want to go ahead and create

00:26:26,649 --> 00:26:29,350
your templates maybe you don't want to

00:26:27,879 --> 00:26:31,390
use JSON and maybe you want to use

00:26:29,350 --> 00:26:33,790
another templating strategy

00:26:31,390 --> 00:26:36,670
sorry dated string templating strategy

00:26:33,790 --> 00:26:37,990
you can go ahead and do that and use

00:26:36,670 --> 00:26:39,250
something like spin see I like to just

00:26:37,990 --> 00:26:41,620
save it when you've gone ahead and

00:26:39,250 --> 00:26:43,450
generated your template config even sort

00:26:41,620 --> 00:26:45,220
of how you decide what's going to work

00:26:43,450 --> 00:26:47,410
best in terms of your your organization

00:26:45,220 --> 00:26:48,940
in terms of managing templates there's

00:26:47,410 --> 00:26:50,350
still I think a lot of room here a lot

00:26:48,940 --> 00:26:52,570
of opportunity here for opinions to come

00:26:50,350 --> 00:26:54,940
in from the community for people to get

00:26:52,570 --> 00:26:56,560
involved ping me let's let's talk about

00:26:54,940 --> 00:26:57,520
it because I want to sort of explore

00:26:56,560 --> 00:26:59,530
this further and figure out what's

00:26:57,520 --> 00:27:00,700
working best for large organizations and

00:26:59,530 --> 00:27:02,890
also people who were just getting

00:27:00,700 --> 00:27:05,760
started with spinnaker these are the

00:27:02,890 --> 00:27:08,410
pipeline's may famous from that video

00:27:05,760 --> 00:27:10,330
what we'll see here is that this is that

00:27:08,410 --> 00:27:12,640
same service there's that green hello

00:27:10,330 --> 00:27:14,320
world here's the pipeline's that I was

00:27:12,640 --> 00:27:17,050
showing I testing out a little bit

00:27:14,320 --> 00:27:18,670
earlier and now what I want to do is I'm

00:27:17,050 --> 00:27:21,670
gonna go ahead and update my actual

00:27:18,670 --> 00:27:24,550
source here so here's here's the simple

00:27:21,670 --> 00:27:26,440
go service that is being deployed I've

00:27:24,550 --> 00:27:28,270
gone ahead and updated this to say hello

00:27:26,440 --> 00:27:30,880
spinnaker summit and we're gonna go for

00:27:28,270 --> 00:27:35,530
something and we're gonna go for blue on

00:27:30,880 --> 00:27:37,360
this deploy and then we're going to so I

00:27:35,530 --> 00:27:39,910
have should have this queued up there

00:27:37,360 --> 00:27:42,280
you go yep so I've already gone ahead

00:27:39,910 --> 00:27:44,130
got this fob edited I'm ready to commit

00:27:42,280 --> 00:27:46,660
it it's gonna go ahead and commit this

00:27:44,130 --> 00:27:49,800
just a demo color change and then I'm

00:27:46,660 --> 00:27:51,850
just going to go ahead and push this up

00:27:49,800 --> 00:27:53,770
so we're pushing this up to the cloud

00:27:51,850 --> 00:27:57,010
source repository that class verse

00:27:53,770 --> 00:27:58,270
repository will then trigger a job in a

00:27:57,010 --> 00:28:00,940
cloud build and we should be able to

00:27:58,270 --> 00:28:04,030
find that let's refresh there you go

00:28:00,940 --> 00:28:06,940
so what this job is doing is it is going

00:28:04,030 --> 00:28:08,290
to go ahead and build it's going to go

00:28:06,940 --> 00:28:10,000
ahead and build the docker image and

00:28:08,290 --> 00:28:11,890
then eventually we're going to see this

00:28:10,000 --> 00:28:15,010
templated pipeline for our staging

00:28:11,890 --> 00:28:16,480
deploy kick-off once that succeeds once

00:28:15,010 --> 00:28:19,180
it puts the manifest in the bucket once

00:28:16,480 --> 00:28:23,170
it puts the image in the registry we're

00:28:19,180 --> 00:28:24,310
gonna see this get triggered so I do

00:28:23,170 --> 00:28:25,750
want to talk a little bit more about

00:28:24,310 --> 00:28:27,730
versioning I've been mentioning it I

00:28:25,750 --> 00:28:30,630
want to dive a little deeper into it the

00:28:27,730 --> 00:28:33,790
way it works when you save a template

00:28:30,630 --> 00:28:36,580
multiple essentially multiple revisions

00:28:33,790 --> 00:28:38,950
are created one of them is it dress--i

00:28:36,580 --> 00:28:39,850
below by the digests so this is what I

00:28:38,950 --> 00:28:41,830
was talking about if you're an

00:28:39,850 --> 00:28:42,820
application team and you're like well

00:28:41,830 --> 00:28:44,020
this is too dangerous what did the

00:28:42,820 --> 00:28:45,040
template changes from under me what if

00:28:44,020 --> 00:28:47,500
this thing breaks

00:28:45,040 --> 00:28:49,570
you can actually address one particular

00:28:47,500 --> 00:28:52,240
version of that template by the Shah and

00:28:49,570 --> 00:28:53,590
you can say I want to pin to this and no

00:28:52,240 --> 00:28:54,940
matter how many updates no matter how

00:28:53,590 --> 00:28:56,500
many times somebody saves a template

00:28:54,940 --> 00:28:58,990
again you're gonna have that version

00:28:56,500 --> 00:29:01,690
it's sitting there in front 15 templates

00:28:58,990 --> 00:29:03,960
also support a set of tags right now

00:29:01,690 --> 00:29:08,770
this is the full set of tags available

00:29:03,960 --> 00:29:10,570
stable experimental if you're a platform

00:29:08,770 --> 00:29:12,250
team you could say hey these are the

00:29:10,570 --> 00:29:13,690
stable templates everybody should be

00:29:12,250 --> 00:29:15,430
tracking this in your pipeline

00:29:13,690 --> 00:29:17,410
configuration make sure you reference

00:29:15,430 --> 00:29:20,040
this particular tag and that you're

00:29:17,410 --> 00:29:23,920
going to receive any updates to stable

00:29:20,040 --> 00:29:26,500
when when you save templates there's

00:29:23,920 --> 00:29:29,980
also a latest entry that's getting

00:29:26,500 --> 00:29:31,780
created and if you just omit a tag

00:29:29,980 --> 00:29:33,820
you're actually going to just follow

00:29:31,780 --> 00:29:35,080
whatever updates are coming in so if you

00:29:33,820 --> 00:29:37,000
just decide I'm not even think about

00:29:35,080 --> 00:29:38,740
tags I'm not gonna pin you're just gonna

00:29:37,000 --> 00:29:41,790
get updates constantly as they come in

00:29:38,740 --> 00:29:44,170
it's a little risky I I would suggest

00:29:41,790 --> 00:29:45,880
you know probably using the tags or

00:29:44,170 --> 00:29:49,510
pinning to a particular versions a safer

00:29:45,880 --> 00:29:52,240
bet but part of what we want to do is

00:29:49,510 --> 00:29:53,710
start surfacing what's going on with

00:29:52,240 --> 00:29:55,530
versioning in the UI so people have a

00:29:53,710 --> 00:29:58,210
better understanding of it people can

00:29:55,530 --> 00:29:59,740
manage versions and also sort of

00:29:58,210 --> 00:30:01,840
communicating how this is working and

00:29:59,740 --> 00:30:05,110
iterating on it from there let's check

00:30:01,840 --> 00:30:07,120
in if this alright cool so this pipeline

00:30:05,110 --> 00:30:08,950
is running it's like I said it's going

00:30:07,120 --> 00:30:10,360
to be deploying the namespace it's

00:30:08,950 --> 00:30:12,640
deploying a service and it's deploying

00:30:10,360 --> 00:30:14,380
the artifact that we updated when it's

00:30:12,640 --> 00:30:17,950
done we should be able to see the update

00:30:14,380 --> 00:30:20,350
so let that keep running I started

00:30:17,950 --> 00:30:22,600
talking about enhancements there's a lot

00:30:20,350 --> 00:30:24,630
of ways that we could keep moving

00:30:22,600 --> 00:30:27,880
forward on MPTV too and making it better

00:30:24,630 --> 00:30:30,010
if you want to get involved there's a

00:30:27,880 --> 00:30:32,680
github project there are open issues

00:30:30,010 --> 00:30:35,610
please feel free to you know start

00:30:32,680 --> 00:30:37,630
looking at that ping me to open up PRS

00:30:35,610 --> 00:30:38,830
spin across some Spinnaker's

00:30:37,630 --> 00:30:40,030
documentation tells you how you can

00:30:38,830 --> 00:30:42,280
start contributing and there's some

00:30:40,030 --> 00:30:43,660
pretty good Doc's here as well it's

00:30:42,280 --> 00:30:45,460
really something where I want the

00:30:43,660 --> 00:30:47,470
community to help shape it and to help

00:30:45,460 --> 00:30:49,030
drive it forward and to say like this

00:30:47,470 --> 00:30:51,310
works for us this does not work for us

00:30:49,030 --> 00:30:52,840
and here's why it make a case for why we

00:30:51,310 --> 00:30:54,749
should move in a particular direction or

00:30:52,840 --> 00:30:57,269
not

00:30:54,749 --> 00:30:59,849
part of part of the ideas that like we

00:30:57,269 --> 00:31:01,619
feel like could be helpful is a more

00:30:59,849 --> 00:31:04,229
robust UI essentially around pipeline

00:31:01,619 --> 00:31:05,700
configuration it surfaces when something

00:31:04,229 --> 00:31:07,229
is templated it tells you it triggers

00:31:05,700 --> 00:31:09,779
coming from a template but it's still

00:31:07,229 --> 00:31:12,239
the early days of this some of the ideas

00:31:09,779 --> 00:31:13,590
that are in consideration will what if

00:31:12,239 --> 00:31:15,179
there's actually a template UI editor

00:31:13,590 --> 00:31:17,580
you could build the template inside of

00:31:15,179 --> 00:31:19,349
the UI how can we again how could we

00:31:17,580 --> 00:31:21,179
surface versioning what should we show

00:31:19,349 --> 00:31:22,739
the tags should we allow people to say

00:31:21,179 --> 00:31:25,590
oh I want I want to follow this tag and

00:31:22,739 --> 00:31:28,499
just change it with a few clicks another

00:31:25,590 --> 00:31:30,629
sort of big item to possibly tackle is

00:31:28,499 --> 00:31:34,289
authorization as you begin to use

00:31:30,629 --> 00:31:36,269
templates across multiple teams it's

00:31:34,289 --> 00:31:38,039
reasonable to be concerned who can

00:31:36,269 --> 00:31:40,080
modify templates who can create

00:31:38,039 --> 00:31:42,059
pipelines from particular templates so

00:31:40,080 --> 00:31:43,440
integrating MPTV too with fiat is

00:31:42,059 --> 00:31:48,059
something that i think would be really

00:31:43,440 --> 00:31:51,389
valuable for next steps for MPTV - let's

00:31:48,059 --> 00:31:54,029
check back in ok so that was successful

00:31:51,389 --> 00:31:56,759
in deploying so like I said this

00:31:54,029 --> 00:31:58,470
template could have some additional

00:31:56,759 --> 00:32:01,169
stages one thing it doesn't do is it

00:31:58,470 --> 00:32:02,399
doesn't clean up the previous thing that

00:32:01,169 --> 00:32:06,029
was deployed so we're just going to go

00:32:02,399 --> 00:32:07,349
ahead and do that and then once this is

00:32:06,029 --> 00:32:09,629
done we should be able to check and see

00:32:07,349 --> 00:32:19,070
the update with the blue color and the

00:32:09,629 --> 00:32:21,599
updated text cool there you go so that's

00:32:19,070 --> 00:32:23,519
essentially taking what we started with

00:32:21,599 --> 00:32:24,989
a pipeline that was non templated

00:32:23,519 --> 00:32:25,919
somebody had created by hand was

00:32:24,989 --> 00:32:27,889
difficult to share through our

00:32:25,919 --> 00:32:30,599
organization turning into a template

00:32:27,889 --> 00:32:32,249
customizing it and then sort of going

00:32:30,599 --> 00:32:34,159
from beginning to end in deploying an

00:32:32,249 --> 00:32:36,779
artifact using that template at pipeline

00:32:34,159 --> 00:32:38,399
to wrap things up actually I should go

00:32:36,779 --> 00:32:41,249
back to presenting this full screen to

00:32:38,399 --> 00:32:43,440
wrap things up I did want to make

00:32:41,249 --> 00:32:45,539
mention and managed delivery Netflix is

00:32:43,440 --> 00:32:47,759
doing some amazing work here there's a

00:32:45,539 --> 00:32:49,669
presentation earlier if you didn't catch

00:32:47,759 --> 00:32:53,549
it I recommend you watch the recording

00:32:49,669 --> 00:32:55,950
manage delivery you can think of it as a

00:32:53,549 --> 00:32:58,349
higher level abstraction than what MPTV

00:32:55,950 --> 00:33:00,590
tube is trying to do manage delivery is

00:32:58,349 --> 00:33:03,089
gives you an opportunity to use

00:33:00,590 --> 00:33:06,149
additional services like heal to do

00:33:03,089 --> 00:33:08,350
things like provision infrastructure to

00:33:06,149 --> 00:33:12,480
go ahead and deliver your artifact

00:33:08,350 --> 00:33:14,679
MPTV 2 is focused solely on deploying

00:33:12,480 --> 00:33:17,590
your deployment pipelines and deploying

00:33:14,679 --> 00:33:18,490
your artifacts it's focused on some of

00:33:17,590 --> 00:33:19,870
the things I've been going on

00:33:18,490 --> 00:33:21,850
essentially using like pipeline

00:33:19,870 --> 00:33:23,650
configurations these are two things that

00:33:21,850 --> 00:33:25,510
I think can actually work really well

00:33:23,650 --> 00:33:26,559
together and in concert I'm excited

00:33:25,510 --> 00:33:28,990
about where manage delivery is going

00:33:26,559 --> 00:33:31,539
excited about MPTV - and I think one of

00:33:28,990 --> 00:33:34,660
the obvious places to overlap is there

00:33:31,539 --> 00:33:36,100
is a an opportunity to sort of build out

00:33:34,660 --> 00:33:36,970
a shared UI some of the stuff that's

00:33:36,100 --> 00:33:38,919
going to be popping up with managed

00:33:36,970 --> 00:33:40,870
delivery could be put to use whether

00:33:38,919 --> 00:33:43,210
it's related to dipping versioning all

00:33:40,870 --> 00:33:45,370
that stuff can also be of use and mptv -

00:33:43,210 --> 00:33:47,860
and we're working closely with Netflix

00:33:45,370 --> 00:33:48,850
and sort of seeing the great designs

00:33:47,860 --> 00:33:51,539
that are coming out of there and

00:33:48,850 --> 00:33:55,330
figuring out ok how can this fit in

00:33:51,539 --> 00:33:56,740
alright so to get started I would

00:33:55,330 --> 00:33:58,210
suggest you know you can convert a

00:33:56,740 --> 00:34:01,090
pipeline to a template that's probably

00:33:58,210 --> 00:34:02,860
the easiest thing just go into UI from

00:34:01,090 --> 00:34:04,299
there create a new pipeline like I did

00:34:02,860 --> 00:34:06,220
earlier in the demo from a dedicated

00:34:04,299 --> 00:34:08,200
route check out spinnaker aisle there's

00:34:06,220 --> 00:34:10,030
the docs are there and they're growing

00:34:08,200 --> 00:34:11,859
and getting updated and optionally you

00:34:10,030 --> 00:34:14,530
can dive a little bit deeper into it and

00:34:11,859 --> 00:34:17,500
you spawn it or spin and try to build

00:34:14,530 --> 00:34:19,840
out a more automated flow in terms of

00:34:17,500 --> 00:34:22,540
getting involved you can get updates at

00:34:19,840 --> 00:34:25,899
the bi-weekly ASCO cig that's Tuesday

00:34:22,540 --> 00:34:27,760
that's Tuesdays at 1:00 I feel like I'm

00:34:25,899 --> 00:34:30,280
pitching a television show pipeline

00:34:27,760 --> 00:34:32,379
there's pipeline templates that's the

00:34:30,280 --> 00:34:33,340
slack channel where questions are

00:34:32,379 --> 00:34:36,310
popping up people are having discussions

00:34:33,340 --> 00:34:39,070
and of course you can contribute to any

00:34:36,310 --> 00:34:40,300
of these three projects here and you'll

00:34:39,070 --> 00:34:42,040
find plenty of work relates the

00:34:40,300 --> 00:34:44,440
templates and plenty of like ideas being

00:34:42,040 --> 00:34:45,820
thrown around so thanks I hope I left

00:34:44,440 --> 00:34:48,790
time for questions

00:34:45,820 --> 00:34:50,040
let's see yep I did that wraps it up I

00:34:48,790 --> 00:34:53,239
hope that was helpful

00:34:50,040 --> 00:34:59,659
let's open it up to the floor right

00:34:53,239 --> 00:34:59,659
[Applause]

00:35:06,360 --> 00:35:10,890
hey thanks for the great talk just a

00:35:08,970 --> 00:35:13,590
couple quick questions Priscilla is

00:35:10,890 --> 00:35:15,930
there a repo with common templates that

00:35:13,590 --> 00:35:18,920
you've seen people use that we can just

00:35:15,930 --> 00:35:22,580
sort of go off on starting from scratch

00:35:18,920 --> 00:35:24,930
so there's not I think it's a great idea

00:35:22,580 --> 00:35:28,980
that was part of why when I started this

00:35:24,930 --> 00:35:31,140
presentation the spinnaker GCP offering

00:35:28,980 --> 00:35:32,340
has some of these sample pipelines and

00:35:31,140 --> 00:35:34,820
that's kind of what inspired that I

00:35:32,340 --> 00:35:36,450
think it that's a view so I feel like

00:35:34,820 --> 00:35:37,920
when you're getting started with

00:35:36,450 --> 00:35:39,890
spinnaker you can benefit a lot from

00:35:37,920 --> 00:35:41,910
sort of looking other people's opinions

00:35:39,890 --> 00:35:42,960
internalizing it and then saying okay

00:35:41,910 --> 00:35:45,060
here's how I'm going to improve on it

00:35:42,960 --> 00:35:47,400
it's definitely something that I'm open

00:35:45,060 --> 00:35:50,690
to exploring more and I would be

00:35:47,400 --> 00:35:50,690
interested in seeing it on the roadmap

00:35:55,700 --> 00:36:01,320
right sure

00:35:59,460 --> 00:36:04,620
so the example I mentioned I did omit

00:36:01,320 --> 00:36:06,000
some stuff intentionally the play of

00:36:04,620 --> 00:36:07,970
staging is also supposed to trigger a

00:36:06,000 --> 00:36:10,530
deploy to prod I didn't show that part

00:36:07,970 --> 00:36:14,280
there's some additional stages there but

00:36:10,530 --> 00:36:17,010
again like I I do think once we've sort

00:36:14,280 --> 00:36:18,870
of iron this out fully it would be

00:36:17,010 --> 00:36:20,310
useful to then go and tell the committee

00:36:18,870 --> 00:36:21,720
hey like are you trying to do this are

00:36:20,310 --> 00:36:22,950
you trying to deploy kubernetes here's

00:36:21,720 --> 00:36:24,330
what you do are you trying to deploy

00:36:22,950 --> 00:36:26,220
this cloud provider here's another

00:36:24,330 --> 00:36:27,660
template and that's going to sort of

00:36:26,220 --> 00:36:30,060
accelerate the pace of which we learn

00:36:27,660 --> 00:36:31,860
what works for large organizations and

00:36:30,060 --> 00:36:34,200
small organizations and what doesn't

00:36:31,860 --> 00:36:36,450
one more thing I forgot to mention a BT

00:36:34,200 --> 00:36:38,280
v2 is still behind a feature flag so you

00:36:36,450 --> 00:36:41,850
were don't want to turn on a flag to

00:36:38,280 --> 00:36:44,400
actually see it in the UI there are some

00:36:41,850 --> 00:36:46,370
remaining sort of open github issues

00:36:44,400 --> 00:36:48,420
that are just being ironed out and then

00:36:46,370 --> 00:36:51,230
looking to remove that feature flag

00:36:48,420 --> 00:36:51,230
relatively soon

00:36:51,320 --> 00:36:55,520
questions insulation we deck and

00:36:54,170 --> 00:36:55,970
everything you just think you're on our

00:36:55,520 --> 00:36:58,040
backs

00:36:55,970 --> 00:37:00,620
yeah so pipeline templates is behind one

00:36:58,040 --> 00:37:02,060
feature flag and that actually there's a

00:37:00,620 --> 00:37:05,450
bit history that's from like if you once

00:37:02,060 --> 00:37:09,710
use V 1 and then the MPTV to you I when

00:37:05,450 --> 00:37:13,070
it was first introduced because sort of

00:37:09,710 --> 00:37:14,990
the there were ways as a user you can

00:37:13,070 --> 00:37:16,250
essentially like break deck if you

00:37:14,990 --> 00:37:19,160
clicked on the wrong thing because the

00:37:16,250 --> 00:37:20,450
UI just had a bit built yet so we put it

00:37:19,160 --> 00:37:23,570
behind a feature flag felt like it was

00:37:20,450 --> 00:37:26,660
the safest bet and I think it's pretty

00:37:23,570 --> 00:37:28,400
close to where we can just go ahead and

00:37:26,660 --> 00:37:29,600
take that flag out there's just a few

00:37:28,400 --> 00:37:36,380
more things that we want to like test

00:37:29,600 --> 00:37:39,260
out and make sure we're ready do I think

00:37:36,380 --> 00:37:41,450
it's production ready yeah well I mean

00:37:39,260 --> 00:37:47,540
like I was saying the UI is behind a

00:37:41,450 --> 00:37:49,670
feature flag I think I don't really see

00:37:47,540 --> 00:37:53,120
I guess we used a production ready I

00:37:49,670 --> 00:37:54,290
think about risk right like if I go and

00:37:53,120 --> 00:37:56,320
start using is this gonna break

00:37:54,290 --> 00:37:58,730
spinnaker is this gonna break my insole

00:37:56,320 --> 00:38:00,470
installation I think the risk there is

00:37:58,730 --> 00:38:03,580
relatively low I encourage people to

00:38:00,470 --> 00:38:06,560
start using it to experiment with it and

00:38:03,580 --> 00:38:08,930
I wouldn't say don't migrate everything

00:38:06,560 --> 00:38:10,730
to a template you know leave at five

00:38:08,930 --> 00:38:12,950
o'clock on Friday and then just hope all

00:38:10,730 --> 00:38:14,720
the deploys work I you definitely want

00:38:12,950 --> 00:38:16,700
to use a tooling that's there so I would

00:38:14,720 --> 00:38:18,260
encourage you use the plan functionality

00:38:16,700 --> 00:38:19,340
in spin CLI to see what it would

00:38:18,260 --> 00:38:22,730
actually look like when it's fully

00:38:19,340 --> 00:38:25,430
hydrated go ahead and like start make it

00:38:22,730 --> 00:38:27,260
make it a gradual migration but I

00:38:25,430 --> 00:38:28,550
generally think like it shouldn't it

00:38:27,260 --> 00:38:29,630
shouldn't be tampering we installation

00:38:28,550 --> 00:38:30,980
it shouldn't be breaking other parts of

00:38:29,630 --> 00:38:32,600
that application it's something that's

00:38:30,980 --> 00:38:34,940
ready for people to experiment with and

00:38:32,600 --> 00:38:35,900
I think once it become comes from behind

00:38:34,940 --> 00:38:38,050
a future flag will be ready for

00:38:35,900 --> 00:38:38,050
production

00:38:40,839 --> 00:38:45,490
cool questions

00:38:52,049 --> 00:38:58,750
so just touching base on one of the

00:38:55,960 --> 00:38:59,950
managed delivery sort of dynamic I'm

00:38:58,750 --> 00:39:01,359
glad you actually mentioned that because

00:38:59,950 --> 00:39:04,150
I was thinking about that when we

00:39:01,359 --> 00:39:06,460
started where do you see it going

00:39:04,150 --> 00:39:09,569
because it's both of your turn

00:39:06,460 --> 00:39:12,549
accomplish relatively the same goals of

00:39:09,569 --> 00:39:15,099
bringing best practices in a common

00:39:12,549 --> 00:39:17,500
place so that everyone can get it

00:39:15,099 --> 00:39:19,390
instead of having to read when wheel

00:39:17,500 --> 00:39:22,869
everything exactly so are you gonna

00:39:19,390 --> 00:39:25,180
merge with manage delivery or is the

00:39:22,869 --> 00:39:28,510
format gonna change and what's gonna

00:39:25,180 --> 00:39:31,180
happen yeah I mean I can answer it from

00:39:28,510 --> 00:39:32,770
one side of it I do think like here it

00:39:31,180 --> 00:39:34,270
let's keep talking and pose that

00:39:32,770 --> 00:39:35,559
question to some of the engineers

00:39:34,270 --> 00:39:37,510
working on Netflix as well because I

00:39:35,559 --> 00:39:40,329
think a way you got a richer answer from

00:39:37,510 --> 00:39:42,220
it I just wanted to clear up a

00:39:40,329 --> 00:39:44,230
misconception these two things do not

00:39:42,220 --> 00:39:46,809
you could use them both they do not

00:39:44,230 --> 00:39:50,589
conflict with in any way and manage

00:39:46,809 --> 00:39:52,690
delivery as I understand it can

00:39:50,589 --> 00:39:56,230
essentially be accomplishing the goals

00:39:52,690 --> 00:39:58,779
in that sort of declarative CRD file in

00:39:56,230 --> 00:40:01,510
different ways it uses kyo and

00:39:58,779 --> 00:40:02,650
orchestrates tasks but it could you can

00:40:01,510 --> 00:40:04,630
do work you can make it work with

00:40:02,650 --> 00:40:06,839
templates if you wanted to there there

00:40:04,630 --> 00:40:10,029
is a future you could see where you're

00:40:06,839 --> 00:40:11,500
declaring how in the sort of managed to

00:40:10,029 --> 00:40:13,240
deliver CRD how you want to deploy

00:40:11,500 --> 00:40:15,609
something and maybe under the hood it's

00:40:13,240 --> 00:40:18,039
using templates to actually get that

00:40:15,609 --> 00:40:20,380
done so I think there's a lot of room

00:40:18,039 --> 00:40:21,670
for trying out different things here the

00:40:20,380 --> 00:40:24,130
important thing is that they're actually

00:40:21,670 --> 00:40:26,589
in the same sig and so these

00:40:24,130 --> 00:40:28,720
conversations overlap very often and if

00:40:26,589 --> 00:40:30,069
you come to this a gleich it's like half

00:40:28,720 --> 00:40:31,869
manage delivery half time mile pipeline

00:40:30,069 --> 00:40:33,880
templates and then we often learn from

00:40:31,869 --> 00:40:35,589
that and figure out like for example the

00:40:33,880 --> 00:40:37,569
UI we figure out oh there's some overlap

00:40:35,589 --> 00:40:39,520
here we could work on it so it's early

00:40:37,569 --> 00:40:41,200
days we're still figuring out the answer

00:40:39,520 --> 00:40:42,430
fully but we're trying to make sure that

00:40:41,200 --> 00:40:46,230
these are two things that can work

00:40:42,430 --> 00:40:46,230
together and not run into each other

00:40:54,239 --> 00:41:03,819
hi actually a question about the

00:40:58,269 --> 00:41:05,470
relationship between spawn and mptv - at

00:41:03,819 --> 00:41:09,549
our company we have both lots of most

00:41:05,470 --> 00:41:12,099
different services some are in local

00:41:09,549 --> 00:41:15,249
regions somewhere in one region some of

00:41:12,099 --> 00:41:18,579
those same patients will have needs for

00:41:15,249 --> 00:41:21,239
things like nano judgements all right so

00:41:18,579 --> 00:41:24,369
given those kind of like multivariate

00:41:21,239 --> 00:41:26,140
problems how do you see so I can see how

00:41:24,369 --> 00:41:28,690
let me get solved in a straight spot

00:41:26,140 --> 00:41:30,640
kind of way where I could take you know

00:41:28,690 --> 00:41:31,810
mean old reference and this kind of

00:41:30,640 --> 00:41:34,480
things

00:41:31,810 --> 00:41:37,750
cluster or regional requirements and

00:41:34,480 --> 00:41:42,040
when it generate straight not templates

00:41:37,750 --> 00:41:46,690
but actual configurations how would you

00:41:42,040 --> 00:41:48,850
kind of map that to pipeline templates

00:41:46,690 --> 00:41:52,300
in a way that doesn't become something

00:41:48,850 --> 00:41:54,960
like manual judgment with one reason or

00:41:52,300 --> 00:41:59,410
no meeting of judgment with two regions

00:41:54,960 --> 00:42:01,180
right yeah so one of the things that

00:41:59,410 --> 00:42:03,100
kind of went over I may have gloss over

00:42:01,180 --> 00:42:04,210
but inside of the pipeline config for

00:42:03,100 --> 00:42:05,500
example like if you have a manual

00:42:04,210 --> 00:42:07,390
judgment that only applies to certain

00:42:05,500 --> 00:42:08,920
particular pipelines in that case I

00:42:07,390 --> 00:42:11,860
would recommend that shouldn't be in the

00:42:08,920 --> 00:42:14,350
template in that case you use the fact

00:42:11,860 --> 00:42:16,330
that you can override stages or change

00:42:14,350 --> 00:42:18,160
the stage graph inside of the pipeline

00:42:16,330 --> 00:42:20,950
configuration to say well my particular

00:42:18,160 --> 00:42:22,930
team needs add a manual judgment between

00:42:20,950 --> 00:42:24,580
these two stages it needs to do this

00:42:22,930 --> 00:42:26,500
here so you have an opportunity to sort

00:42:24,580 --> 00:42:28,240
of layer on the additional configuration

00:42:26,500 --> 00:42:30,130
that you need just specifically in the

00:42:28,240 --> 00:42:32,350
pipeline as opposed to raising that to

00:42:30,130 --> 00:42:33,850
the template level where yeah it would

00:42:32,350 --> 00:42:35,140
come it could possibly collide with

00:42:33,850 --> 00:42:38,050
other teams in the organization to say

00:42:35,140 --> 00:42:39,460
look I don't need that so you

00:42:38,050 --> 00:42:40,930
essentially have to find like a happy

00:42:39,460 --> 00:42:42,430
medium between what goes in the template

00:42:40,930 --> 00:42:44,110
what's actually determined to be useful

00:42:42,430 --> 00:42:46,150
what's the best practice and what's

00:42:44,110 --> 00:42:48,840
something that is gonna be more specific

00:42:46,150 --> 00:42:48,840
to that team

00:42:56,270 --> 00:43:00,930

YouTube URL: https://www.youtube.com/watch?v=gWXHLGH02m4


