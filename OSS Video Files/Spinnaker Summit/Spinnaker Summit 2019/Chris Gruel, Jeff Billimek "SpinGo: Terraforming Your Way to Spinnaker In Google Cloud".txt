Title: Chris Gruel, Jeff Billimek "SpinGo: Terraforming Your Way to Spinnaker In Google Cloud"
Publication date: 2019-12-04
Playlist: Spinnaker Summit 2019
Description: 
	The third annual Spinnaker Summit (Diamond Sponsors: Netflix, Google and Armory) was held at the Hard Rock Hotel in San Diego, CA from November 15-17, 2019 and welcomed over 500 members of the rapidly growing Spinnaker open source community.
Captions: 
	00:00:01,250 --> 00:00:07,440
hi everybody my name is Jeff Billy Mack

00:00:04,350 --> 00:00:10,260
I work at Home Depot I help out on our

00:00:07,440 --> 00:00:13,679
continuous deployment team I also run

00:00:10,260 --> 00:00:16,260
our open source initiative and our own

00:00:13,679 --> 00:00:18,270
parent platform strategy and my name is

00:00:16,260 --> 00:00:24,330
Chris gruel I work on the continuous

00:00:18,270 --> 00:00:26,730
deployment team over spinnaker so just a

00:00:24,330 --> 00:00:28,529
little bit about Home Depot I'm sure

00:00:26,730 --> 00:00:29,760
most of you here at least if you're

00:00:28,529 --> 00:00:32,850
based in the United States you're

00:00:29,760 --> 00:00:35,820
familiar with Home Depot we have we got

00:00:32,850 --> 00:00:37,680
about 2300 stores we have a couple

00:00:35,820 --> 00:00:40,350
thousand engineers to do and health

00:00:37,680 --> 00:00:42,390
development and in fact I think about

00:00:40,350 --> 00:00:45,899
90% of our applications we write

00:00:42,390 --> 00:00:47,820
in-house so we even though it's like a

00:00:45,899 --> 00:00:53,270
hardware store or whatever we do a whole

00:00:47,820 --> 00:00:59,070
lot of IT stuff and it's really awesome

00:00:53,270 --> 00:01:00,870
so a while back we decided we wanted to

00:00:59,070 --> 00:01:02,039
look at spinnaker and part of the reason

00:01:00,870 --> 00:01:03,690
is we're trying to solve some different

00:01:02,039 --> 00:01:05,489
problems which because we're at

00:01:03,690 --> 00:01:09,780
spinnaker summit most of you have heard

00:01:05,489 --> 00:01:11,670
this many many times but in the past or

00:01:09,780 --> 00:01:13,619
in the past and also in some cases right

00:01:11,670 --> 00:01:16,200
now all of our different engineering

00:01:13,619 --> 00:01:18,630
teams they all do see ICD on their own

00:01:16,200 --> 00:01:20,580
they spin up whatever CI tool makes

00:01:18,630 --> 00:01:22,380
sense for them some people use Jenkins

00:01:20,580 --> 00:01:24,479
some people use concourse or team city

00:01:22,380 --> 00:01:27,000
and they're trying to figure out all

00:01:24,479 --> 00:01:29,009
aspects of deployments on their own and

00:01:27,000 --> 00:01:31,110
part of that is because we used to have

00:01:29,009 --> 00:01:32,790
a centralized thing and it didn't work

00:01:31,110 --> 00:01:34,740
that well they couldn't install plugins

00:01:32,790 --> 00:01:37,890
and so we gave people freedom to just

00:01:34,740 --> 00:01:39,060
use whatever they want but the part of

00:01:37,890 --> 00:01:40,710
that problem is having all that

00:01:39,060 --> 00:01:41,729
flexibility is people want to have a

00:01:40,710 --> 00:01:45,570
standard way to do production

00:01:41,729 --> 00:01:47,939
deployments and part of that is that you

00:01:45,570 --> 00:01:49,350
know doing CI with like a Jenkins or

00:01:47,939 --> 00:01:52,619
concourse or whatever works really well

00:01:49,350 --> 00:01:54,390
but we found that those tools are really

00:01:52,619 --> 00:01:58,439
great for CI but they're not so great

00:01:54,390 --> 00:02:00,780
for doing continuous deployment and we

00:01:58,439 --> 00:02:04,710
we wanted to have a more consistent way

00:02:00,780 --> 00:02:07,210
in a safe way to do deployments right in

00:02:04,710 --> 00:02:09,310
and each team had to

00:02:07,210 --> 00:02:10,900
had to follow all the enforcement all

00:02:09,310 --> 00:02:13,330
the IT policies and controls and

00:02:10,900 --> 00:02:15,910
governance stuff and they had to figure

00:02:13,330 --> 00:02:18,190
out their own way of implementing those

00:02:15,910 --> 00:02:22,510
controls in whatever CIC

00:02:18,190 --> 00:02:24,460
you know tool they chose and anytime

00:02:22,510 --> 00:02:26,650
they needed to do you know more advanced

00:02:24,460 --> 00:02:28,240
things like you know blue green and

00:02:26,650 --> 00:02:30,700
stuff like that they had to figure out

00:02:28,240 --> 00:02:34,150
how to do it themselves in that way and

00:02:30,700 --> 00:02:36,070
so we wanted to you know utilize

00:02:34,150 --> 00:02:39,580
something that can do that a lot better

00:02:36,070 --> 00:02:40,960
so yeah like blue green as an example we

00:02:39,580 --> 00:02:43,510
found that people wanted to do blue

00:02:40,960 --> 00:02:45,400
green but like they had to create like

00:02:43,510 --> 00:02:47,530
some really creative hacky shell scripts

00:02:45,400 --> 00:02:49,780
to kind of kind of simulate blue green

00:02:47,530 --> 00:02:51,700
and one thing spin occurred as well as

00:02:49,780 --> 00:02:53,770
we know is this vinegar knows the state

00:02:51,700 --> 00:02:55,510
and we didn't really have a really great

00:02:53,770 --> 00:02:57,220
way of maintaining state when doing

00:02:55,510 --> 00:03:00,190
Bluegreen type deployments using like a

00:02:57,220 --> 00:03:03,850
CI tool and so spinnaker really helps us

00:03:00,190 --> 00:03:05,290
with that and so with all those things

00:03:03,850 --> 00:03:08,170
we said hey let's take a look at

00:03:05,290 --> 00:03:11,170
spinnaker and so for several months

00:03:08,170 --> 00:03:13,270
Chris and I have been pairing and we we

00:03:11,170 --> 00:03:15,190
learned spinnaker we experimented with

00:03:13,270 --> 00:03:18,550
spinnaker we found ways that it would

00:03:15,190 --> 00:03:19,930
work well for us in our company and we

00:03:18,550 --> 00:03:22,360
also learned Tara from a long way which

00:03:19,930 --> 00:03:25,570
is awesome but do it going through all

00:03:22,360 --> 00:03:28,000
that we came up with we kind of started

00:03:25,570 --> 00:03:29,860
with I guess a philosophy that we didn't

00:03:28,000 --> 00:03:31,810
want to just you know spin up some VMs

00:03:29,860 --> 00:03:33,280
and deploy spinnaker we wanted to do

00:03:31,810 --> 00:03:35,980
something to be more repeatable in case

00:03:33,280 --> 00:03:37,810
we needed to switch regions or redeploy

00:03:35,980 --> 00:03:39,820
for whatever reason or maybe even go to

00:03:37,810 --> 00:03:41,020
a different public cloud provider and so

00:03:39,820 --> 00:03:43,300
we said hey we're going to start with

00:03:41,020 --> 00:03:45,060
Tara form and we we made sure all the

00:03:43,300 --> 00:03:48,130
infrastructure that we're going to use

00:03:45,060 --> 00:03:52,000
would be using Tara form and it Home

00:03:48,130 --> 00:03:53,739
Depot were we're a relatively a large

00:03:52,000 --> 00:03:55,930
user of Google cloud and so that was a

00:03:53,739 --> 00:03:58,390
natural fit for us is to look at Google

00:03:55,930 --> 00:04:00,580
cloud and so we created this open-source

00:03:58,390 --> 00:04:03,430
tool which we call spin go which we're

00:04:00,580 --> 00:04:05,380
going to do a live demo on a second and

00:04:03,430 --> 00:04:07,660
we're using kubernetes to deploy

00:04:05,380 --> 00:04:09,550
spinnaker we're using a lot of the

00:04:07,660 --> 00:04:13,360
Google manage services so we're using

00:04:09,550 --> 00:04:15,250
cloud storage Google OAuth at least for

00:04:13,360 --> 00:04:17,590
for the demo internally we're actually

00:04:15,250 --> 00:04:19,010
using sam'l provider but but same kind

00:04:17,590 --> 00:04:22,010
of thing

00:04:19,010 --> 00:04:23,870
we're using we're spending up a VM to

00:04:22,010 --> 00:04:26,030
deploy halyard and we'll get into that

00:04:23,870 --> 00:04:27,920
in a little bit more but it's it's an

00:04:26,030 --> 00:04:29,720
ephemeral VM so we terraform it up and

00:04:27,920 --> 00:04:31,760
tear from destroy and basically that

00:04:29,720 --> 00:04:33,650
gives us the ability to do whatever kind

00:04:31,760 --> 00:04:35,210
of configuration changes we need for

00:04:33,650 --> 00:04:36,950
spinnaker but we don't have to leave it

00:04:35,210 --> 00:04:39,260
long running I think in the future we

00:04:36,950 --> 00:04:40,790
might look at doing like like a config

00:04:39,260 --> 00:04:43,150
map deployment kind of thing or whatever

00:04:40,790 --> 00:04:45,590
because we don't really like VM set well

00:04:43,150 --> 00:04:48,980
memory store instead of the built-in

00:04:45,590 --> 00:04:50,630
Redis so as you know if you do like your

00:04:48,980 --> 00:04:53,030
basic install of spinnaker it comes with

00:04:50,630 --> 00:04:55,520
like one Loretta's pod and we we didn't

00:04:53,030 --> 00:04:57,230
feel super great about that and we know

00:04:55,520 --> 00:04:58,640
Google has memory stores so we're like

00:04:57,230 --> 00:05:02,030
well let's use that at least it's multi

00:04:58,640 --> 00:05:04,250
zone and it's a managed service cloud

00:05:02,030 --> 00:05:05,900
DNS because we're running at Google and

00:05:04,250 --> 00:05:08,600
then for the demo we're using let's

00:05:05,900 --> 00:05:10,310
encrypt to get us a wildcard cert and

00:05:08,600 --> 00:05:11,750
then contain a registry within Google

00:05:10,310 --> 00:05:13,790
but you could really switch that out

00:05:11,750 --> 00:05:15,500
whatever you want and then cloud sequel

00:05:13,790 --> 00:05:18,380
because of the relatively new features

00:05:15,500 --> 00:05:21,260
for doing my sequel in cloud sequel is

00:05:18,380 --> 00:05:23,300
its replicated its not multi region

00:05:21,260 --> 00:05:26,420
right now unfortunately but we do

00:05:23,300 --> 00:05:28,000
backups and it works pretty well so what

00:05:26,420 --> 00:05:30,970
we're going to do is we're going to

00:05:28,000 --> 00:05:33,170
we're going to kick off a live demo and

00:05:30,970 --> 00:05:35,360
while it's going we're probably going to

00:05:33,170 --> 00:05:37,940
switch over to a recording of the demo

00:05:35,360 --> 00:05:39,680
and part of that is because the amount

00:05:37,940 --> 00:05:41,090
of time that the terraform takes to

00:05:39,680 --> 00:05:42,890
bring everything up and then more

00:05:41,090 --> 00:05:44,450
importantly the amount of time it takes

00:05:42,890 --> 00:05:46,820
for our terraform like bootstrapping

00:05:44,450 --> 00:05:48,620
scripts to wire up and configure how

00:05:46,820 --> 00:05:49,640
you're would take a long time and so

00:05:48,620 --> 00:05:51,830
we've kind of shortened some of the

00:05:49,640 --> 00:05:53,420
parts in the video too that we would

00:05:51,830 --> 00:05:54,740
normally do a live demo for well still

00:05:53,420 --> 00:05:56,870
like the live demo running but we're

00:05:54,740 --> 00:05:59,120
going to kind of go back and forth a

00:05:56,870 --> 00:06:00,980
little bit and actually before we do the

00:05:59,120 --> 00:06:02,960
demo I want to talk about part of what

00:06:00,980 --> 00:06:04,070
we're doing for terraform right is so

00:06:02,960 --> 00:06:04,550
actually do you want to talk about would

00:06:04,070 --> 00:06:08,840
be to terraform

00:06:04,550 --> 00:06:11,450
yeah so we have that's handling all the

00:06:08,840 --> 00:06:12,650
infrastructure right and it's wiring

00:06:11,450 --> 00:06:15,890
everything together where we're

00:06:12,650 --> 00:06:17,070
necessary but what's also key here and

00:06:15,890 --> 00:06:19,050
if you look at the

00:06:17,070 --> 00:06:21,360
at sphingo itself you'll see it's almost

00:06:19,050 --> 00:06:23,760
half bosch and half terraform because

00:06:21,360 --> 00:06:25,940
we're actually populating a lot of

00:06:23,760 --> 00:06:29,280
pre-populating a lot of the scripts that

00:06:25,940 --> 00:06:32,570
set up the spinnaker infrastructure with

00:06:29,280 --> 00:06:36,260
the data from all of that terraform

00:06:32,570 --> 00:06:39,090
building and so what you end up with is

00:06:36,260 --> 00:06:41,370
when the higher box comes up and it you

00:06:39,090 --> 00:06:43,890
know starts up and it runs the scripts

00:06:41,370 --> 00:06:48,150
that we have it will basically build out

00:06:43,890 --> 00:06:53,910
the entire spinnaker deployment whit

00:06:48,150 --> 00:06:57,270
down - down authorization an x.509 and

00:06:53,910 --> 00:06:59,010
spin CLI and the works

00:06:57,270 --> 00:07:01,230
yeah and that's that's probably the big

00:06:59,010 --> 00:07:02,940
thing is that not only does it get all

00:07:01,230 --> 00:07:04,380
the infrastructure and deploy spinnaker

00:07:02,940 --> 00:07:06,210
but it actually configure spinnaker to

00:07:04,380 --> 00:07:11,670
use all that and use it in a way that we

00:07:06,210 --> 00:07:14,430
think is for a decent scale all right so

00:07:11,670 --> 00:07:16,980
I'm gonna switch windows real quick so

00:07:14,430 --> 00:07:18,150
right here I'm in a Google cloud shell

00:07:16,980 --> 00:07:19,860
and part of the reason why I'm using

00:07:18,150 --> 00:07:21,870
that is because the network here may not

00:07:19,860 --> 00:07:23,250
be that great and I learned recently and

00:07:21,870 --> 00:07:24,960
cloud shell is kind of cool because if

00:07:23,250 --> 00:07:26,430
you like lose connectivity and you come

00:07:24,960 --> 00:07:28,680
back it's kind of like being in team ox

00:07:26,430 --> 00:07:30,510
it'll it'll pick up where you left off

00:07:28,680 --> 00:07:33,750
so you don't to worry about like you

00:07:30,510 --> 00:07:36,150
know doing your state again so I'm in

00:07:33,750 --> 00:07:38,100
Google cloud shell last night we created

00:07:36,150 --> 00:07:40,350
a new Google cloud project called spin

00:07:38,100 --> 00:07:44,570
go there's nothing really in it right

00:07:40,350 --> 00:07:47,760
now it's it's it's pretty much empty and

00:07:44,570 --> 00:07:49,850
and yeah so first I'm going to clone the

00:07:47,760 --> 00:07:49,850
repo

00:07:54,710 --> 00:08:00,919
and if we look at the readme of the of

00:07:58,009 --> 00:08:02,810
the repo real quick we can see that it

00:08:00,919 --> 00:08:05,990
basically has instructions on how to set

00:08:02,810 --> 00:08:08,660
everything up and basically for the most

00:08:05,990 --> 00:08:09,919
part you run like a script that asks you

00:08:08,660 --> 00:08:11,930
some questions about like what's your

00:08:09,919 --> 00:08:15,460
project name what's your region what

00:08:11,930 --> 00:08:18,410
zone what password do you want on your

00:08:15,460 --> 00:08:19,639
certificates for example and then a base

00:08:18,410 --> 00:08:21,740
you basically go into a different

00:08:19,639 --> 00:08:23,960
directories and doterra from apply what

00:08:21,740 --> 00:08:25,970
we've done is we've wrapped all of those

00:08:23,960 --> 00:08:28,039
commands into one script called

00:08:25,970 --> 00:08:29,900
QuickStart for the demo here that'll

00:08:28,039 --> 00:08:31,870
basically do all those in sequence so we

00:08:29,900 --> 00:08:34,010
don't have to type it in in front of you

00:08:31,870 --> 00:08:37,459
so I'm going to go ahead and start it

00:08:34,010 --> 00:08:39,080
now if first thing it does is it

00:08:37,459 --> 00:08:40,610
validates what project you are in or

00:08:39,080 --> 00:08:42,440
what project you want to deploy to so

00:08:40,610 --> 00:08:47,959
like I said the new project called spin

00:08:42,440 --> 00:08:50,149
go so I'm going to pick that and then

00:08:47,959 --> 00:08:52,130
it's going to go through and turn on a

00:08:50,149 --> 00:08:54,050
bunch of Google Cloud api's and for

00:08:52,130 --> 00:08:56,510
those of you that have used Google Cloud

00:08:54,050 --> 00:08:57,800
before you probably notice this is going

00:08:56,510 --> 00:09:00,230
relatively fast

00:08:57,800 --> 00:09:02,600
we kind of pre-warmed it and turn on all

00:09:00,230 --> 00:09:03,770
the api's right before this so we

00:09:02,600 --> 00:09:07,010
wouldn't sit here for seven minutes

00:09:03,770 --> 00:09:08,540
while it enables all the api's and it

00:09:07,010 --> 00:09:10,400
creates a terraform service account that

00:09:08,540 --> 00:09:12,050
terraform is going to use and the aps

00:09:10,400 --> 00:09:13,820
were enabling or all the the necessary

00:09:12,050 --> 00:09:15,650
permissions for terraform to provision

00:09:13,820 --> 00:09:17,870
all the infrastructure that it needs and

00:09:15,650 --> 00:09:21,620
now it's it's attaching the service

00:09:17,870 --> 00:09:26,450
account with the roles makes the keys

00:09:21,620 --> 00:09:28,040
for them and then also what we're doing

00:09:26,450 --> 00:09:31,160
here is we're using vault actually

00:09:28,040 --> 00:09:33,050
distort terraform state so it's not like

00:09:31,160 --> 00:09:34,790
we have a state in the directory or

00:09:33,050 --> 00:09:35,930
whatever we're putting it involved you

00:09:34,790 --> 00:09:38,209
could put it wherever you want though

00:09:35,930 --> 00:09:40,940
and now it's asking us for past where we

00:09:38,209 --> 00:09:42,079
want for the keystore we're just going

00:09:40,940 --> 00:09:43,730
to hit enter and it's going to generate

00:09:42,079 --> 00:09:45,320
a password for us we won't have to worry

00:09:43,730 --> 00:09:47,029
about what it is because it's all like

00:09:45,320 --> 00:09:49,490
Chris was saying it's all part of the

00:09:47,029 --> 00:09:51,260
terraform you know outputs and it's all

00:09:49,490 --> 00:09:56,120
wired together which is kind of nice and

00:09:51,260 --> 00:09:57,829
now for the DNS we need to put in what

00:09:56,120 --> 00:10:01,660
domain we want to use so in this case

00:09:57,829 --> 00:10:03,850
we're going to do spin go dot spinnaker

00:10:01,660 --> 00:10:07,940
homedepot.com

00:10:03,850 --> 00:10:10,310
and then it's going to ask us if we want

00:10:07,940 --> 00:10:11,420
to use a different project for DNS in

00:10:10,310 --> 00:10:15,800
this case we're going to use the same

00:10:11,420 --> 00:10:20,300
project and then what region we want to

00:10:15,800 --> 00:10:22,790
use will use we'll use central and then

00:10:20,300 --> 00:10:25,040
what zone and this is due to setup all

00:10:22,790 --> 00:10:30,680
the Google DNS stuff and we'll use the

00:10:25,040 --> 00:10:32,270
central see and then for part of Google

00:10:30,680 --> 00:10:35,120
OAuth for those of you used it before

00:10:32,270 --> 00:10:36,860
you need to have a like administrator

00:10:35,120 --> 00:10:39,700
email address to set up a off so I'm

00:10:36,860 --> 00:10:39,700
going to put in one right now

00:10:46,060 --> 00:10:53,530
and then it basically starts kicking out

00:10:49,030 --> 00:10:55,990
the terraform yeah and so it creates

00:10:53,530 --> 00:10:57,810
static IPS it creates the DNS stuff and

00:10:55,990 --> 00:11:00,250
then what we're going to do real quick

00:10:57,810 --> 00:11:03,550
while so we can run in the background is

00:11:00,250 --> 00:11:05,550
we need to grab the NS records that it's

00:11:03,550 --> 00:11:09,040
creating in our project to put in our

00:11:05,550 --> 00:11:11,380
master DNS project so I'm going to do

00:11:09,040 --> 00:11:13,500
that just real quick give me just a

00:11:11,380 --> 00:11:13,500
moment

00:11:31,920 --> 00:11:36,890
this DNS would basically be whatever

00:11:33,870 --> 00:11:36,890
domain that you own

00:11:40,750 --> 00:11:47,620
all right so that parts done it's now

00:11:45,160 --> 00:11:51,160
going through all of the terraform and

00:11:47,620 --> 00:11:53,259
so like we were saying earlier oh yeah

00:11:51,160 --> 00:11:55,480
we need to do a setup - sorry so Oh

00:11:53,259 --> 00:11:57,730
authen so we've scripted so much here

00:11:55,480 --> 00:11:59,649
but unfortunately Google doesn't allow

00:11:57,730 --> 00:12:01,209
or doesn't doesn't have API to do

00:11:59,649 --> 00:12:02,769
certain operations that's where manually

00:12:01,209 --> 00:12:03,850
doing them here a lot of the other

00:12:02,769 --> 00:12:06,670
things we've done we've been a little

00:12:03,850 --> 00:12:09,579
completely script we just expect to do

00:12:06,670 --> 00:12:12,310
lots of things yeah we need to do the

00:12:09,579 --> 00:12:19,540
fiat service account credentials real

00:12:12,310 --> 00:12:21,819
quick sorry just bear with me so what

00:12:19,540 --> 00:12:24,360
we're doing is we have we have a we

00:12:21,819 --> 00:12:27,579
create a fiat servicing service account

00:12:24,360 --> 00:12:29,560
that Fiat is going to use and we need to

00:12:27,579 --> 00:12:35,259
take that unique ID and grant it org

00:12:29,560 --> 00:12:38,949
level group read permissions and which

00:12:35,259 --> 00:12:43,360
we've now done and that's the last thing

00:12:38,949 --> 00:12:45,399
we have to configure nice all right so

00:12:43,360 --> 00:12:47,019
at this point terraform is going to

00:12:45,399 --> 00:12:49,930
spend a lot of time provisioning like

00:12:47,019 --> 00:12:51,399
the cluster the node pools and then it's

00:12:49,930 --> 00:12:53,170
going to provision the VM or halyard

00:12:51,399 --> 00:12:56,529
it's going to run and then part of that

00:12:53,170 --> 00:12:58,449
halyard VM is is a bunch a whole bunch

00:12:56,529 --> 00:13:00,699
of scripts that we created where we

00:12:58,449 --> 00:13:03,670
think a lot of the magic sauce is that's

00:13:00,699 --> 00:13:05,559
going to wire up and configure spinnaker

00:13:03,670 --> 00:13:08,319
to use the wild-card search they use

00:13:05,559 --> 00:13:09,670
OAuth to use cloud sequel all that and

00:13:08,319 --> 00:13:11,410
that's going to all happen when

00:13:09,670 --> 00:13:13,779
terraform creates the VM it's part of

00:13:11,410 --> 00:13:15,490
like the init when the VM boots up so

00:13:13,779 --> 00:13:16,540
we're going to switch while this is

00:13:15,490 --> 00:13:18,370
running in the background we're going to

00:13:16,540 --> 00:13:20,980
switch to a video we made of the same

00:13:18,370 --> 00:13:24,129
thing and talk and talk to basically

00:13:20,980 --> 00:13:26,290
what we're doing here one thing we

00:13:24,129 --> 00:13:29,410
should note is that by default we're

00:13:26,290 --> 00:13:30,939
creating two clusters two separate bbc's

00:13:29,410 --> 00:13:33,430
two subnets to everything we're

00:13:30,939 --> 00:13:35,079
basically duplicating two separate

00:13:33,430 --> 00:13:37,329
spinnaker foundations

00:13:35,079 --> 00:13:38,980
under the you know assumption like we've

00:13:37,329 --> 00:13:40,509
got you know a non production one and

00:13:38,980 --> 00:13:43,149
like a sandbox one where we can just

00:13:40,509 --> 00:13:44,980
test out versions and and things like

00:13:43,149 --> 00:13:47,139
that and maybe when we do production

00:13:44,980 --> 00:13:49,640
we'll still have you know our production

00:13:47,139 --> 00:13:52,100
spinnaker and maybe we'll have like a

00:13:49,640 --> 00:13:54,830
staging one that we can you know better

00:13:52,100 --> 00:13:57,170
test out versions in that particular

00:13:54,830 --> 00:13:59,150
project yeah we don't know how others do

00:13:57,170 --> 00:14:01,190
it but like within like the same Google

00:13:59,150 --> 00:14:03,410
Cloud project we're actually we actually

00:14:01,190 --> 00:14:05,870
spin up to urban IDs clusters like Chris

00:14:03,410 --> 00:14:08,870
was saying in theory those can be split

00:14:05,870 --> 00:14:11,390
to different projects but we we didn't

00:14:08,870 --> 00:14:13,100
see a lot of reason for that we have a

00:14:11,390 --> 00:14:14,660
lot of debate you know where do we where

00:14:13,100 --> 00:14:17,480
do we draw the line for projects and

00:14:14,660 --> 00:14:19,580
that's where we landed but yeah so right

00:14:17,480 --> 00:14:21,050
now we can see in the the video also

00:14:19,580 --> 00:14:23,810
what's happening real-time is it's

00:14:21,050 --> 00:14:25,580
provisioning all the all the things you

00:14:23,810 --> 00:14:29,390
know I'm going to speed it up just a

00:14:25,580 --> 00:14:32,000
little bit okay so here let me pause

00:14:29,390 --> 00:14:34,220
this real quick so at the end of the

00:14:32,000 --> 00:14:35,960
terraform step when it provisions all

00:14:34,220 --> 00:14:38,540
the infrastructure and provisions the vm

00:14:35,960 --> 00:14:41,600
it gives us a g-cloud command that we

00:14:38,540 --> 00:14:43,870
can use to basically ssh into the

00:14:41,600 --> 00:14:45,620
halyard vm they're still probably in

00:14:43,870 --> 00:14:48,770
real-time there's still probably about

00:14:45,620 --> 00:14:51,620
twenty more minutes of activity that's

00:14:48,770 --> 00:14:53,660
going to happen on the vm as it as it

00:14:51,620 --> 00:14:55,190
you know downloads how your it installs

00:14:53,660 --> 00:14:57,260
I think it installs docker too doesn't

00:14:55,190 --> 00:15:00,020
it yeah it does so it does a lot of it

00:14:57,260 --> 00:15:01,100
solves a bunch of stuff initially and

00:15:00,020 --> 00:15:02,780
then it does all the setup we were

00:15:01,100 --> 00:15:04,490
talking about and so here on the screen

00:15:02,780 --> 00:15:07,370
from the video you can see where

00:15:04,490 --> 00:15:09,320
terraform basically was done but all the

00:15:07,370 --> 00:15:11,030
work when the VM spins up for the first

00:15:09,320 --> 00:15:13,130
time is still happening and we're going

00:15:11,030 --> 00:15:14,660
to basically tail the log of that

00:15:13,130 --> 00:15:15,610
initial setup that we're gonna see right

00:15:14,660 --> 00:15:20,210
here

00:15:15,610 --> 00:15:22,910
so we SSH into it and then we run an

00:15:20,210 --> 00:15:24,650
alias we made called show log which is

00:15:22,910 --> 00:15:26,570
basically telling like the install log

00:15:24,650 --> 00:15:29,030
of everything that gets created when the

00:15:26,570 --> 00:15:30,380
when the VM goes and that's what it's

00:15:29,030 --> 00:15:32,180
doing right there so you can see we're

00:15:30,380 --> 00:15:37,070
installing a bunch of dependencies we

00:15:32,180 --> 00:15:38,270
need that that's needed like for all the

00:15:37,070 --> 00:15:43,360
scripts that's going to be running in

00:15:38,270 --> 00:15:43,360
the halyard space installing halyard

00:15:44,230 --> 00:15:50,810
yeah

00:15:46,120 --> 00:15:54,140
and then we start basically running our

00:15:50,810 --> 00:15:56,590
let's encrypt yeah yeah to get the it's

00:15:54,140 --> 00:15:58,580
using DNS to get the wild-card cert and

00:15:56,590 --> 00:16:01,310
some people may want to bring their own

00:15:58,580 --> 00:16:03,530
certificates and when we run within home

00:16:01,310 --> 00:16:06,320
depot right now at least we're using our

00:16:03,530 --> 00:16:07,930
own wild-card cert but for for our

00:16:06,320 --> 00:16:10,040
open-source bingo thing or whatever

00:16:07,930 --> 00:16:12,020
we're using let's encrypt because it's

00:16:10,040 --> 00:16:13,670
more approachable for everybody but

00:16:12,020 --> 00:16:15,920
we're still I mean one thing I want to

00:16:13,670 --> 00:16:17,180
mention is that that spin go repo that

00:16:15,920 --> 00:16:19,520
we're talking about here that's what

00:16:17,180 --> 00:16:22,160
we're actually running with in our data

00:16:19,520 --> 00:16:23,840
center we just we don't we don't we

00:16:22,160 --> 00:16:28,070
opted not to use Google off and we opted

00:16:23,840 --> 00:16:32,180
not to use let's encrypt for now at

00:16:28,070 --> 00:16:34,130
least yeah so now the the setup script

00:16:32,180 --> 00:16:36,080
is basically configuring halyard to set

00:16:34,130 --> 00:16:39,050
up the different things you know the

00:16:36,080 --> 00:16:40,640
bucket all of those things in some of

00:16:39,050 --> 00:16:43,360
these these terms I know I know Google

00:16:40,640 --> 00:16:46,130
only has like I don't know like maybe

00:16:43,360 --> 00:16:47,810
like 15 percent of the public cloud

00:16:46,130 --> 00:16:50,450
market share and I know Amazon's much

00:16:47,810 --> 00:16:53,060
bigger but because we're a retailer we

00:16:50,450 --> 00:16:57,110
don't use Amazon and so some of the

00:16:53,060 --> 00:16:58,700
terms I'm using may not they may not

00:16:57,110 --> 00:17:00,650
translate well to Amazon but they're all

00:16:58,700 --> 00:17:02,300
relatively as you know similar managed

00:17:00,650 --> 00:17:04,459
services like Amazon has an equivalent

00:17:02,300 --> 00:17:07,610
of buckets obviously it's the original

00:17:04,459 --> 00:17:09,829
s3 and then you know all their things so

00:17:07,610 --> 00:17:11,600
when I talk about buckets and all that

00:17:09,829 --> 00:17:16,280
it's it's the same analogy for all the

00:17:11,600 --> 00:17:19,250
public cloud providers all right and so

00:17:16,280 --> 00:17:21,709
here as part of the this the script were

00:17:19,250 --> 00:17:23,000
tailing is it's basically setting up I

00:17:21,709 --> 00:17:24,439
think it's setting up a lot they're

00:17:23,000 --> 00:17:26,540
supposed to have actually right there

00:17:24,439 --> 00:17:30,140
what it was just doing is it was adding

00:17:26,540 --> 00:17:31,850
the the gate local configuration to be

00:17:30,140 --> 00:17:33,620
able to log into the cloud sequel

00:17:31,850 --> 00:17:36,350
instances the usernames and passwords

00:17:33,620 --> 00:17:39,380
for the databases that were created by

00:17:36,350 --> 00:17:42,500
the tenant terraform infrastructure

00:17:39,380 --> 00:17:45,470
process and basically adding those to

00:17:42,500 --> 00:17:47,570
the appropriate you know locations for

00:17:45,470 --> 00:17:50,670
how you'll be able to

00:17:47,570 --> 00:17:53,370
yeah yeah we use cloud sequel proxy I

00:17:50,670 --> 00:17:58,740
think is a sidecar in the cloud driver

00:17:53,370 --> 00:18:00,360
and Orca microservices all right and

00:17:58,740 --> 00:18:02,760
it's basically doing the same operation

00:18:00,360 --> 00:18:04,260
for the two spinnaker instances we're

00:18:02,760 --> 00:18:06,300
deploying it's like Chris was saying we

00:18:04,260 --> 00:18:08,220
have one that we call sandbox in one

00:18:06,300 --> 00:18:10,110
called NP you can in those whatever you

00:18:08,220 --> 00:18:13,590
want through the terraform configuration

00:18:10,110 --> 00:18:15,360
by default that's what we name them so

00:18:13,590 --> 00:18:17,160
with the activity that's doing is

00:18:15,360 --> 00:18:21,150
basically doing it two times one for

00:18:17,160 --> 00:18:25,950
each installation and that might be what

00:18:21,150 --> 00:18:27,570
we see right here yeah yeah and then

00:18:25,950 --> 00:18:30,810
also slack integration it sets that up

00:18:27,570 --> 00:18:32,400
too so basically before we kicked off

00:18:30,810 --> 00:18:34,890
the script we had set some environment

00:18:32,400 --> 00:18:38,040
variables one of them was our slack API

00:18:34,890 --> 00:18:39,930
token URL thing and so it looks for

00:18:38,040 --> 00:18:43,530
terraform looks for that when it when

00:18:39,930 --> 00:18:45,060
it's running and it wires up all the the

00:18:43,530 --> 00:18:47,670
things that's necessary to set up slack

00:18:45,060 --> 00:18:49,950
so it's it's persisting that that data

00:18:47,670 --> 00:18:51,450
it's passing it in to the halyard VM and

00:18:49,950 --> 00:18:53,700
then part of the initial halyard

00:18:51,450 --> 00:18:56,490
bootstrap script is that it's wiring up

00:18:53,700 --> 00:18:58,860
the notification yeah and then x.509

00:18:56,490 --> 00:19:00,710
we're using x51 actually you want to

00:18:58,860 --> 00:19:03,180
talk about that yeah yeah so we are

00:19:00,710 --> 00:19:06,120
we've also automated the creation of the

00:19:03,180 --> 00:19:13,580
x.509 certificate the API gateway for

00:19:06,120 --> 00:19:16,980
x.509 the creation of of the spin CLI

00:19:13,580 --> 00:19:19,080
because part of what we're what we want

00:19:16,980 --> 00:19:20,820
to do as well is have it so that you

00:19:19,080 --> 00:19:24,030
know when it starts it up and it creates

00:19:20,820 --> 00:19:28,160
the full set up infrastructure with

00:19:24,030 --> 00:19:31,500
authorization everything it also adds an

00:19:28,160 --> 00:19:33,900
application for onboarding right to

00:19:31,500 --> 00:19:35,370
alert when the onboarding bucket that

00:19:33,900 --> 00:19:39,240
the process that we're using right now

00:19:35,370 --> 00:19:42,240
gets a file uploaded into it so that we

00:19:39,240 --> 00:19:43,630
can weave the infrastructure sets up you

00:19:42,240 --> 00:19:45,760
know a

00:19:43,630 --> 00:19:48,400
a notification on that bucket and

00:19:45,760 --> 00:19:50,679
pub/sub and we've got a pub sup listener

00:19:48,400 --> 00:19:52,210
in that get set up and how yer to listen

00:19:50,679 --> 00:19:53,740
for that and then we're setting up

00:19:52,210 --> 00:19:55,390
automatically a pipeline that will

00:19:53,740 --> 00:19:58,270
listen to that pub sub an alert slack

00:19:55,390 --> 00:20:03,270
and eventually in the future will like

00:19:58,270 --> 00:20:06,010
have it actually process it yeah I mean

00:20:03,270 --> 00:20:08,260
so one thing that Chris kind of touched

00:20:06,010 --> 00:20:09,940
on is that once you get spinner up and

00:20:08,260 --> 00:20:11,410
running it's great but if you want users

00:20:09,940 --> 00:20:14,950
to start using it they need to have

00:20:11,410 --> 00:20:16,750
provide our targets and so also in the

00:20:14,950 --> 00:20:17,950
repo we have right now and we're

00:20:16,750 --> 00:20:19,510
exploring different ways to go about

00:20:17,950 --> 00:20:21,760
doing this in an easier way for the

00:20:19,510 --> 00:20:23,559
users but we have basically a shell

00:20:21,760 --> 00:20:25,360
script that they run that runs the

00:20:23,559 --> 00:20:27,640
appropriate g-cloud commands that'll set

00:20:25,360 --> 00:20:28,960
up a service account for spinnaker it

00:20:27,640 --> 00:20:30,580
gets the credentials so that service

00:20:28,960 --> 00:20:33,100
account like Chris was saying it drops

00:20:30,580 --> 00:20:36,280
them in a bucket a write only bucket and

00:20:33,100 --> 00:20:38,620
then part of what we're deploying here

00:20:36,280 --> 00:20:41,380
is a pipeline that monitors that bucket

00:20:38,620 --> 00:20:43,390
and then when someone wants to be it

00:20:41,380 --> 00:20:45,520
onboard it it'll it'll basically notify

00:20:43,390 --> 00:20:47,289
us and then we have a corresponding

00:20:45,520 --> 00:20:49,090
script that we run which will complete

00:20:47,289 --> 00:20:52,270
the onboarding as a spinnaker operator

00:20:49,090 --> 00:20:54,580
to do like the necessary how config

00:20:52,270 --> 00:20:56,350
commands and then with dynamic accounts

00:20:54,580 --> 00:20:58,210
it's going to be awesome because that'll

00:20:56,350 --> 00:20:59,549
make it so much easier to own more

00:20:58,210 --> 00:21:01,750
people

00:20:59,549 --> 00:21:03,669
yeah and part of the video ears we're

00:21:01,750 --> 00:21:07,120
pulling up I think that the the end of

00:21:03,669 --> 00:21:08,679
all the the scripts are being run it's

00:21:07,120 --> 00:21:11,169
going to pull up the the spinnaker

00:21:08,679 --> 00:21:12,400
instance where we see that that pipeline

00:21:11,169 --> 00:21:15,429
and that that's kind of a cool thing

00:21:12,400 --> 00:21:17,950
with the whole x.509 Fiat thing is that

00:21:15,429 --> 00:21:19,890
we're using the spin CLI to onboard part

00:21:17,950 --> 00:21:24,490
of the bootstrap onboard a like a

00:21:19,890 --> 00:21:31,059
spinnaker admin type operator pipeline

00:21:24,490 --> 00:21:33,460
for onboarding people yeah yeah and then

00:21:31,059 --> 00:21:36,070
we're pretty much done with that part of

00:21:33,460 --> 00:21:38,280
the demo I think yeah it's a little bit

00:21:36,070 --> 00:21:38,280
more

00:21:38,690 --> 00:21:43,550
yeah yeah so that's part of our like

00:21:42,140 --> 00:21:44,690
bootstrapping script it's actually

00:21:43,550 --> 00:21:46,120
creating that application I was just

00:21:44,690 --> 00:21:48,740
telling you about for morning people

00:21:46,120 --> 00:21:51,340
we've automated the onboarding of the

00:21:48,740 --> 00:21:55,460
creation of the fiat service account and

00:21:51,340 --> 00:21:58,580
then here we see an onboard notification

00:21:55,460 --> 00:22:00,440
pipeline has been created that uses the

00:21:58,580 --> 00:22:02,360
pub/sub notification that is

00:22:00,440 --> 00:22:05,150
pre-configured that's using the

00:22:02,360 --> 00:22:07,430
spinnaker Fiat syrup and it's been go

00:22:05,150 --> 00:22:09,920
ahead and filled service account and the

00:22:07,430 --> 00:22:11,810
slack notification in here and obviously

00:22:09,920 --> 00:22:13,100
we can take this a lot further and

00:22:11,810 --> 00:22:16,280
that's what we plan to do in the future

00:22:13,100 --> 00:22:21,350
yep yeah let's let's actually see where

00:22:16,280 --> 00:22:23,360
we are with yeah so like the live demo

00:22:21,350 --> 00:22:25,460
that I kicked off we can see that like

00:22:23,360 --> 00:22:27,710
the terraform Park completed so I'm

00:22:25,460 --> 00:22:30,160
actually going to just see where we are

00:22:27,710 --> 00:22:32,030
with the halyard vm creation real quick

00:22:30,160 --> 00:22:33,560
and then we're going to go back to the

00:22:32,030 --> 00:22:38,060
slides we have a couple more things to

00:22:33,560 --> 00:22:41,080
talk about and they'll be time for

00:22:38,060 --> 00:22:41,080
questions if you have any

00:22:53,000 --> 00:22:58,480
yeah yeah so it's still doing a lot more

00:22:55,309 --> 00:23:03,159
setup so oh guest install halyard yeah

00:22:58,480 --> 00:23:03,159
okay real quick back here

00:23:05,950 --> 00:23:11,510
all right so kind of recap the overview

00:23:10,250 --> 00:23:14,150
our approach that we kind of talk

00:23:11,510 --> 00:23:16,250
through and kind of showed is that we're

00:23:14,150 --> 00:23:18,320
using terraform we love terraform it's

00:23:16,250 --> 00:23:20,000
worked really well for us to provision

00:23:18,320 --> 00:23:21,830
all the infrastructure and one of the

00:23:20,000 --> 00:23:25,400
nice things about the terraform like

00:23:21,830 --> 00:23:26,690
approach is that we if we want to change

00:23:25,400 --> 00:23:28,970
the node pool that we're using for

00:23:26,690 --> 00:23:31,280
kubernetes or we want to I don't know

00:23:28,970 --> 00:23:33,409
change the static IP or just basically

00:23:31,280 --> 00:23:35,120
change any aspect of what we're doing we

00:23:33,409 --> 00:23:37,100
change our terraform scripts and we

00:23:35,120 --> 00:23:38,330
terraform apply and we don't have to

00:23:37,100 --> 00:23:40,549
worry about like well how do we install

00:23:38,330 --> 00:23:42,289
spinnaker to begin with especially that

00:23:40,549 --> 00:23:44,090
really helps when we have more people

00:23:42,289 --> 00:23:48,470
coming on our team that haven't really

00:23:44,090 --> 00:23:50,990
used it before and then the glue that

00:23:48,470 --> 00:23:53,539
holds it together or the is the

00:23:50,990 --> 00:23:56,360
scripting right the as I talked about

00:23:53,539 --> 00:24:00,080
before the ability for terraform to

00:23:56,360 --> 00:24:03,559
populate that those scripts with all of

00:24:00,080 --> 00:24:07,220
the infrastructure data and then like I

00:24:03,559 --> 00:24:10,130
mentioned before the unborn apart so we

00:24:07,220 --> 00:24:12,049
want to make I mean part of what we the

00:24:10,130 --> 00:24:13,460
area we we work at at Home Depot is

00:24:12,049 --> 00:24:16,100
we're like the engineering in ableman

00:24:13,460 --> 00:24:17,809
area and some of the lessons we learned

00:24:16,100 --> 00:24:19,190
from years ago when we had like a

00:24:17,809 --> 00:24:21,289
central way of everyone deploying

00:24:19,190 --> 00:24:23,299
everything was that it wasn't

00:24:21,289 --> 00:24:25,190
necessarily really user friendly and it

00:24:23,299 --> 00:24:26,179
was it was yet open a ticket you know

00:24:25,190 --> 00:24:27,799
wait and you know talk to different

00:24:26,179 --> 00:24:30,590
groups and we're really trying to make

00:24:27,799 --> 00:24:32,360
it the processes self-service and the

00:24:30,590 --> 00:24:33,650
seamless as possible and so we're

00:24:32,360 --> 00:24:35,240
exploring different ways to make one

00:24:33,650 --> 00:24:37,490
boarding even easier like one thing

00:24:35,240 --> 00:24:40,010
we're thinking about is that well when

00:24:37,490 --> 00:24:41,570
when a new cloud project is provisioned

00:24:40,010 --> 00:24:43,100
this the service account is

00:24:41,570 --> 00:24:46,360
automatically created for them and they

00:24:43,100 --> 00:24:46,360
don't have to worry about doing anything

00:24:46,570 --> 00:24:50,299
all right

00:24:48,080 --> 00:24:52,880
so some lessons learned as we went

00:24:50,299 --> 00:24:54,710
through this this journey so like we

00:24:52,880 --> 00:24:56,270
like terraform I think when we started

00:24:54,710 --> 00:24:59,000
we had like everything kind of wrapped

00:24:56,270 --> 00:25:01,220
up into one giant module and we quickly

00:24:59,000 --> 00:25:02,990
learned that when we wanted to make

00:25:01,220 --> 00:25:06,320
changes that could be disruptive so a

00:25:02,990 --> 00:25:09,740
great example would be we use cloud nap

00:25:06,320 --> 00:25:11,840
our IPS and because we're running a

00:25:09,740 --> 00:25:13,519
Google cloud in a way we do firewall and

00:25:11,840 --> 00:25:14,990
all that stuff with our corporate policy

00:25:13,519 --> 00:25:17,000
and all that we kind of needed to keep

00:25:14,990 --> 00:25:19,700
the same static IPS because it was a big

00:25:17,000 --> 00:25:22,039
pain to to change firewall rules when we

00:25:19,700 --> 00:25:23,990
changed IPS so having the static IP is

00:25:22,039 --> 00:25:25,100
in its own separate module means that

00:25:23,990 --> 00:25:26,720
we'd have to worry about them ever

00:25:25,100 --> 00:25:27,889
changing if we needed to change some

00:25:26,720 --> 00:25:33,039
other part with the way we're doing

00:25:27,889 --> 00:25:36,019
terraform same thing like with DNS so

00:25:33,039 --> 00:25:37,370
long story short is that like the the

00:25:36,019 --> 00:25:39,769
step I was doing earlier when you're

00:25:37,370 --> 00:25:41,059
setting the NS records we don't want to

00:25:39,769 --> 00:25:43,730
mess with those once they're created

00:25:41,059 --> 00:25:48,200
because of getting changes made to our

00:25:43,730 --> 00:25:49,879
internal DNS was not easy and then we

00:25:48,200 --> 00:25:52,490
looked at we looked at different ways to

00:25:49,879 --> 00:25:54,049
install spinnaker itself and you know

00:25:52,490 --> 00:25:55,879
whether we're gonna do we we briefly

00:25:54,049 --> 00:25:57,919
looked at like through helm charts and

00:25:55,879 --> 00:26:00,320
we briefly looked at you know even just

00:25:57,919 --> 00:26:04,039
a manual install but we went the

00:26:00,320 --> 00:26:05,419
approach of of just utilizing halyard in

00:26:04,039 --> 00:26:08,600
its entirety but then scripting the

00:26:05,419 --> 00:26:10,039
inputs into Howard and I think it's

00:26:08,600 --> 00:26:12,559
worked out pretty well for us yeah I'm

00:26:10,039 --> 00:26:18,320
curious do any of you here use the

00:26:12,559 --> 00:26:20,539
halyard helm chart okay all right yeah I

00:26:18,320 --> 00:26:22,429
mean yeah it was it looked really

00:26:20,539 --> 00:26:24,080
compelling to begin with and then we

00:26:22,429 --> 00:26:26,210
realized that if you want to make more

00:26:24,080 --> 00:26:28,490
changes or get get kind of complicated

00:26:26,210 --> 00:26:31,789
with it it was it was not it was not

00:26:28,490 --> 00:26:33,850
great for us and then the Redis thing

00:26:31,789 --> 00:26:36,080
like I talked on her touched on earlier

00:26:33,850 --> 00:26:37,279
when we when we deployed spinnaker out

00:26:36,080 --> 00:26:39,830
of the box there's one little lonely

00:26:37,279 --> 00:26:41,149
Redis pod and we were like I don't know

00:26:39,830 --> 00:26:42,710
if that's really great we don't know if

00:26:41,149 --> 00:26:44,000
we want to be reticent ministers and

00:26:42,710 --> 00:26:45,830
like figuring out how to scale that

00:26:44,000 --> 00:26:47,389
properly and because we were trying to

00:26:45,830 --> 00:26:48,980
embrace the managed services that we're

00:26:47,389 --> 00:26:50,840
paying for from Google we were like well

00:26:48,980 --> 00:26:52,610
they have they've got this memory store

00:26:50,840 --> 00:26:55,340
thing let's use that and that's been

00:26:52,610 --> 00:26:58,600
pretty good so far and really if you

00:26:55,340 --> 00:27:02,539
were in the nine o'clock talk and here

00:26:58,600 --> 00:27:04,820
they were they're talking about being

00:27:02,539 --> 00:27:05,899
less reliant on Redis which we are which

00:27:04,820 --> 00:27:07,070
I think we're going to talk about in a

00:27:05,899 --> 00:27:10,260
second actually you are going to talk

00:27:07,070 --> 00:27:11,790
about right now yeah yeah yeah so it

00:27:10,260 --> 00:27:16,320
talk he was talking about was from the

00:27:11,790 --> 00:27:18,059
from the team at snap snapchat and yeah

00:27:16,320 --> 00:27:20,190
they they've talked about happily about

00:27:18,059 --> 00:27:21,960
utilizing the the managed service to

00:27:20,190 --> 00:27:24,390
handle you know scaling and and all that

00:27:21,960 --> 00:27:27,179
and that is exactly the reason why we

00:27:24,390 --> 00:27:30,000
have are literally only our scheduler

00:27:27,179 --> 00:27:32,190
for both orca and sequel exist still in

00:27:30,000 --> 00:27:34,770
memory store but everything else is in

00:27:32,190 --> 00:27:38,610
cloud sequel and so that's all wired in

00:27:34,770 --> 00:27:40,980
the scripts that run handle that for you

00:27:38,610 --> 00:27:43,650
yeah and we're trying to figure out like

00:27:40,980 --> 00:27:46,290
how multi-region we want to be with our

00:27:43,650 --> 00:27:48,030
spinnaker installation like there we

00:27:46,290 --> 00:27:51,120
have a limitation with cloud sequel it's

00:27:48,030 --> 00:27:52,530
single region it's multi zone we're

00:27:51,120 --> 00:27:54,960
trying to figure out like do we want to

00:27:52,530 --> 00:27:56,640
explore maybe running a different

00:27:54,960 --> 00:27:58,500
database technology that would allow

00:27:56,640 --> 00:27:59,760
multi region we still haven't figure

00:27:58,500 --> 00:28:02,669
that out but we're something we're

00:27:59,760 --> 00:28:04,650
exploring and then observability and

00:28:02,669 --> 00:28:06,929
metrics were using stack driver because

00:28:04,650 --> 00:28:11,100
that's all built in we deploy via

00:28:06,929 --> 00:28:12,270
terraform the the configuration for for

00:28:11,100 --> 00:28:13,799
actually we're setting up stack driver

00:28:12,270 --> 00:28:15,809
and we're setting up some basic alerting

00:28:13,799 --> 00:28:17,429
and monitoring for things like the cloud

00:28:15,809 --> 00:28:19,710
sequel backups and other things like

00:28:17,429 --> 00:28:21,030
basic basic kind of health checks it's

00:28:19,710 --> 00:28:22,890
one area we're gonna dive into a whole

00:28:21,030 --> 00:28:25,080
lot more but obviously if you're going

00:28:22,890 --> 00:28:27,240
to run spinnaker for a large group of

00:28:25,080 --> 00:28:29,700
people you need to have really good

00:28:27,240 --> 00:28:31,740
observability of what's happening in the

00:28:29,700 --> 00:28:32,700
system and so that's all kind of wired

00:28:31,740 --> 00:28:34,320
up there

00:28:32,700 --> 00:28:35,700
we're using stack driver and then we

00:28:34,320 --> 00:28:40,309
have some other internal things we're

00:28:35,700 --> 00:28:42,990
probably going to use as well yeah and

00:28:40,309 --> 00:28:47,520
along those lines with the stack drivers

00:28:42,990 --> 00:28:49,080
we've got some some policies some stack

00:28:47,520 --> 00:28:51,480
driver alerting policies that were

00:28:49,080 --> 00:28:52,919
setting up because since terraform is

00:28:51,480 --> 00:28:55,470
what set up the infrastructure knows

00:28:52,919 --> 00:28:57,210
those exact names of those exact items

00:28:55,470 --> 00:28:58,740
we can have we have policies on memory

00:28:57,210 --> 00:29:01,080
store we have policies on cloud storage

00:28:58,740 --> 00:29:03,630
and we have policies on you know gate

00:29:01,080 --> 00:29:05,429
being up on in both clusters and all

00:29:03,630 --> 00:29:07,650
that got stuff just basically gets set

00:29:05,429 --> 00:29:09,330
up doesn't get set up right away at the

00:29:07,650 --> 00:29:10,710
start but we've got a separate repo that

00:29:09,330 --> 00:29:12,360
you know you'd follow a little bit of

00:29:10,710 --> 00:29:12,730
instructions and it just sets it all up

00:29:12,360 --> 00:29:15,040
for

00:29:12,730 --> 00:29:19,330
because it can gather that terraform

00:29:15,040 --> 00:29:20,890
data already yeah permissions we had

00:29:19,330 --> 00:29:23,770
some we had some interesting stuff with

00:29:20,890 --> 00:29:25,750
Fiat it's good to know that others you

00:29:23,770 --> 00:29:29,500
know had some interesting times with

00:29:25,750 --> 00:29:32,230
Fiat as well yeah but we had some stuff

00:29:29,500 --> 00:29:36,010
with sam'l with sam'l security with

00:29:32,230 --> 00:29:39,190
spring security sam'l to be specific and

00:29:36,010 --> 00:29:41,290
how it interacted with our Sam provider

00:29:39,190 --> 00:29:44,980
which almost certainly has been Home

00:29:41,290 --> 00:29:48,250
Depot fide you know having some

00:29:44,980 --> 00:29:50,140
difficult times with that yeah we we had

00:29:48,250 --> 00:29:52,270
a problem where when we were using sam'l

00:29:50,140 --> 00:29:54,040
it would log you out after ten minutes

00:29:52,270 --> 00:29:55,390
regardless of what you're doing on the

00:29:54,040 --> 00:29:57,490
UI so you could be in the middle of

00:29:55,390 --> 00:29:58,720
editing a pipeline and then a modal

00:29:57,490 --> 00:30:00,580
would pop up saying you're logged out

00:29:58,720 --> 00:30:01,990
and you lost all your work it was it was

00:30:00,580 --> 00:30:05,730
horrible

00:30:01,990 --> 00:30:08,440
but that's all better now so our roadmap

00:30:05,730 --> 00:30:10,540
so part of like we touched on in the

00:30:08,440 --> 00:30:12,130
very beginning is really one of the main

00:30:10,540 --> 00:30:13,840
reasons why we're looking at spinnaker

00:30:12,130 --> 00:30:15,370
or we're not looking at the main reasons

00:30:13,840 --> 00:30:18,640
why we're embracing spinnaker Home Depot

00:30:15,370 --> 00:30:21,610
is that we we want to have a very

00:30:18,640 --> 00:30:23,650
consistent auditable central way of

00:30:21,610 --> 00:30:24,970
doing our IT control checks I know

00:30:23,650 --> 00:30:27,250
different companies do things different

00:30:24,970 --> 00:30:29,220
ways there's like the Sox things there's

00:30:27,250 --> 00:30:31,990
PCI there's there's different kinds of

00:30:29,220 --> 00:30:34,390
things that you need to check for and we

00:30:31,990 --> 00:30:35,679
have rules we want to put in place to

00:30:34,390 --> 00:30:39,160
prevent people from deploying to

00:30:35,679 --> 00:30:42,700
production so by using spinnaker were

00:30:39,160 --> 00:30:45,190
able to kind of centralize those checks

00:30:42,700 --> 00:30:46,570
and enforce that they happen in all our

00:30:45,190 --> 00:30:48,880
production deployment pipelines that's

00:30:46,570 --> 00:30:50,320
that's in our roadmap that were that's

00:30:48,880 --> 00:30:53,290
that's that's one of the big things were

00:30:50,320 --> 00:30:55,900
we're achieving with spinnaker yeah and

00:30:53,290 --> 00:30:57,700
and the other things like secrets

00:30:55,900 --> 00:30:59,710
management of being able to have those

00:30:57,700 --> 00:31:01,840
you know those keys to the kingdom not

00:30:59,710 --> 00:31:05,290
just in the how config but like you know

00:31:01,840 --> 00:31:08,300
behind into in the vault and hold using

00:31:05,290 --> 00:31:10,490
dynamic configuration or you know

00:31:08,300 --> 00:31:13,610
some other type of tool leaning towards

00:31:10,490 --> 00:31:16,250
that I'm a configuration but that's yeah

00:31:13,610 --> 00:31:19,910
yeah and then templated pipelines

00:31:16,250 --> 00:31:22,430
there's a whole lot of power and I guess

00:31:19,910 --> 00:31:24,830
promise there especially when we start

00:31:22,430 --> 00:31:27,080
talking about having hundreds or maybe

00:31:24,830 --> 00:31:29,600
even one or two thousand you know people

00:31:27,080 --> 00:31:32,450
using spinnaker we want to embrace and

00:31:29,600 --> 00:31:33,650
use templated pipelines and that's one

00:31:32,450 --> 00:31:35,480
thing we're really really diving into

00:31:33,650 --> 00:31:38,540
we're pretty excited about some of the

00:31:35,480 --> 00:31:41,630
options we have in that space yeah

00:31:38,540 --> 00:31:45,430
cloud foundry we have a very very large

00:31:41,630 --> 00:31:49,370
cloud foundry deployment foundation at

00:31:45,430 --> 00:31:50,930
at Home Depot thousands of apps and we

00:31:49,370 --> 00:31:52,610
want to be able to tie into that and we

00:31:50,930 --> 00:31:54,560
haven't dug into that quite yet because

00:31:52,610 --> 00:31:56,090
our you know our spinnaker

00:31:54,560 --> 00:31:59,390
infrastructure is on Google Cloud and we

00:31:56,090 --> 00:32:02,810
were getting the connectivity up the way

00:31:59,390 --> 00:32:06,860
we want it to be yeah and then we're

00:32:02,810 --> 00:32:09,850
talking about edge based or edge target

00:32:06,860 --> 00:32:11,690
deployments and so we're we're exploring

00:32:09,850 --> 00:32:13,970
containerization or kubernetes in our

00:32:11,690 --> 00:32:16,340
stores and so depending on where we go

00:32:13,970 --> 00:32:20,120
with that spinnaker seems like a logical

00:32:16,340 --> 00:32:23,690
fit to deploy to all of our clusters and

00:32:20,120 --> 00:32:25,580
stores and we want we want it to be

00:32:23,690 --> 00:32:27,710
multi cloud we don't want to just tie it

00:32:25,580 --> 00:32:30,860
into just Google we want the ability to

00:32:27,710 --> 00:32:35,900
you know deploy to you know assure and

00:32:30,860 --> 00:32:38,150
other cloud providers and the like my

00:32:35,900 --> 00:32:40,640
honest my long-term approach is to have

00:32:38,150 --> 00:32:43,190
this be have spin go be something like

00:32:40,640 --> 00:32:45,080
you know what halyard is for setting up

00:32:43,190 --> 00:32:47,960
spinnaker but for the infrastructure

00:32:45,080 --> 00:32:50,420
right so this is like the infrastructure

00:32:47,960 --> 00:32:53,420
setup that spinnaker requires to run at

00:32:50,420 --> 00:32:55,430
scale and then have then how your takes

00:32:53,420 --> 00:32:57,950
over from there right and so that's the

00:32:55,430 --> 00:33:00,590
that's where we're going with this yeah

00:32:57,950 --> 00:33:02,390
and then I guess one other thing we

00:33:00,590 --> 00:33:04,190
didn't talk on earlier but I wanted to

00:33:02,390 --> 00:33:06,500
bring up is the run jobs run jobs are

00:33:04,190 --> 00:33:08,420
really cool you can do so much with run

00:33:06,500 --> 00:33:10,010
jobs if you haven't looked into them I

00:33:08,420 --> 00:33:12,050
highly recommend it we've actually

00:33:10,010 --> 00:33:13,850
created some custom stages based on run

00:33:12,050 --> 00:33:18,080
jobs that do some of RIT control stuff

00:33:13,850 --> 00:33:19,430
it's it's really really cool okay so we

00:33:18,080 --> 00:33:21,639
have finished demonstration I'm gonna

00:33:19,430 --> 00:33:23,379
see where we are just real quick on that

00:33:21,639 --> 00:33:26,169
and then we'll go for questions if

00:33:23,379 --> 00:33:29,139
there's any so we're still deploying

00:33:26,169 --> 00:33:32,379
something I've got a bookmark here let's

00:33:29,139 --> 00:33:40,269
see if let's see if it came online at

00:33:32,379 --> 00:33:43,649
least on our sandbox just real quick so

00:33:40,269 --> 00:33:43,649
authentication is wired up

00:33:46,100 --> 00:33:50,150
and if we go into the application we're

00:33:48,320 --> 00:33:55,070
still the last little bit that it's

00:33:50,150 --> 00:33:57,050
wiring up is Fiat and x.509 and creating

00:33:55,070 --> 00:34:00,680
the pipelines using the x.509

00:33:57,050 --> 00:34:02,600
certificates yeah so who knows how much

00:34:00,680 --> 00:34:04,310
time it has left but it's getting oh

00:34:02,600 --> 00:34:08,920
that's the video yeah

00:34:04,310 --> 00:34:12,410
so alright back here alright so we have

00:34:08,920 --> 00:34:17,330
probably about eight minutes or so any

00:34:12,410 --> 00:34:20,660
questions so quick announcement before

00:34:17,330 --> 00:34:22,430
questions please go on the app and rate

00:34:20,660 --> 00:34:25,460
this presentation on the spinnaker

00:34:22,430 --> 00:34:26,810
summit app by mo dev and then if you

00:34:25,460 --> 00:34:28,310
have any questions please put your hand

00:34:26,810 --> 00:34:30,520
up and I'll come around with a

00:34:28,310 --> 00:34:30,520
microphone

00:34:36,479 --> 00:34:42,339
you mentioned that you looked into using

00:34:39,309 --> 00:34:44,139
the halyard helm chart but chose not to

00:34:42,339 --> 00:34:47,499
pursue that can you give us any more

00:34:44,139 --> 00:34:48,940
detail on that yeah so the config what

00:34:47,499 --> 00:34:51,489
we found when we looked at it at least

00:34:48,940 --> 00:34:52,839
the time we looked at it all like you

00:34:51,489 --> 00:34:54,969
know if you're familiar with helm charts

00:34:52,839 --> 00:34:55,629
you set like these values for different

00:34:54,969 --> 00:34:59,650
things

00:34:55,629 --> 00:35:01,690
and it looked like you it did not seem

00:34:59,650 --> 00:35:03,430
like there was a lot of options to go

00:35:01,690 --> 00:35:05,759
really deep deep with different

00:35:03,430 --> 00:35:09,549
different like settings so for example

00:35:05,759 --> 00:35:11,109
not only do we do how config commands to

00:35:09,549 --> 00:35:13,630
set up things like the how config file

00:35:11,109 --> 00:35:15,309
we're overriding the profiles thing and

00:35:13,630 --> 00:35:18,400
the service settings we're creating

00:35:15,309 --> 00:35:21,130
sidecars we we found it became very

00:35:18,400 --> 00:35:23,200
unwieldy at least for us to try to do

00:35:21,130 --> 00:35:26,729
all that through a home chart it didn't

00:35:23,200 --> 00:35:26,729
seem like a good good pattern for us

00:35:32,450 --> 00:35:36,470
I'm curious how many spend ago

00:35:34,549 --> 00:35:41,690
installations you think you'll have at

00:35:36,470 --> 00:35:43,609
Home Depot ideally I think we we want to

00:35:41,690 --> 00:35:46,069
have we want to basically have you know

00:35:43,609 --> 00:35:47,299
one poor production production yeah and

00:35:46,069 --> 00:35:49,130
our production is gonna do non

00:35:47,299 --> 00:35:50,359
production and production it's just

00:35:49,130 --> 00:35:52,549
gonna be the load and then we'll have

00:35:50,359 --> 00:35:54,980
you know one it's staging that's in that

00:35:52,549 --> 00:35:58,510
same environment and then you know one

00:35:54,980 --> 00:36:01,760
or two in in non production that we can

00:35:58,510 --> 00:36:03,589
be a lot more destructive with yes when

00:36:01,760 --> 00:36:05,270
necessary yeah I mean pretty much

00:36:03,589 --> 00:36:07,940
everybody we've talked to other

00:36:05,270 --> 00:36:09,740
companies they all seem to echo the same

00:36:07,940 --> 00:36:11,630
statement which is if you're running

00:36:09,740 --> 00:36:14,150
spinnaker or trying to run only one and

00:36:11,630 --> 00:36:16,280
so the production and so that's what

00:36:14,150 --> 00:36:17,720
we're striving for and then so that

00:36:16,280 --> 00:36:19,069
might beg the question well why do we

00:36:17,720 --> 00:36:20,299
have this repeatable process for

00:36:19,069 --> 00:36:23,780
deploying spinnaker for all I gotta run

00:36:20,299 --> 00:36:26,480
one part of that is that we want to have

00:36:23,780 --> 00:36:35,480
have a consistent way to do it and the

00:36:26,480 --> 00:36:36,079
Altera form any other questions oh yeah

00:36:35,480 --> 00:36:43,220
sure

00:36:36,079 --> 00:36:45,349
one moment and so if we refresh the

00:36:43,220 --> 00:36:48,650
application no it's still still not

00:36:45,349 --> 00:36:50,150
there yeah so we're still doing how

00:36:48,650 --> 00:36:52,970
deploy apply it takes a long time

00:36:50,150 --> 00:36:54,680
sometimes in this case we're actually

00:36:52,970 --> 00:36:56,540
doing how the play apply wait for

00:36:54,680 --> 00:36:59,180
completion because we need everything up

00:36:56,540 --> 00:37:02,630
and running so that we can then create

00:36:59,180 --> 00:37:05,210
the Fiats service account and the thing

00:37:02,630 --> 00:37:07,520
about the a lot of these scripts is you

00:37:05,210 --> 00:37:10,490
know our QuickStart kicks them off you

00:37:07,520 --> 00:37:12,589
know in the hire box automatically but

00:37:10,490 --> 00:37:14,599
you know we're probably not that's not

00:37:12,589 --> 00:37:15,680
that's just for our demo purposes right

00:37:14,599 --> 00:37:20,420
we're gonna it's probably going to be

00:37:15,680 --> 00:37:23,660
more at least to begin with something

00:37:20,420 --> 00:37:26,540
that you choose like if I choose just to

00:37:23,660 --> 00:37:27,950
set up slack I choose to set up ooofff I

00:37:26,540 --> 00:37:29,750
choose to set up these these other

00:37:27,950 --> 00:37:32,869
things and it would configure those if

00:37:29,750 --> 00:37:35,109
necessary so it's more of a

00:37:32,869 --> 00:37:35,109
choose-your-own-adventure

00:37:36,130 --> 00:37:44,200
another question yes you just said if

00:37:42,620 --> 00:37:46,910
you're gonna run them just only run one

00:37:44,200 --> 00:37:48,350
where does your spinnaker incense live

00:37:46,910 --> 00:37:51,080
in which project that has permissions to

00:37:48,350 --> 00:37:52,160
all the other projects yeah that's a

00:37:51,080 --> 00:37:55,400
good question

00:37:52,160 --> 00:37:56,750
we're so it's it's one project and the

00:37:55,400 --> 00:37:59,300
way we're handling permissions for all

00:37:56,750 --> 00:38:01,400
the other projects so spinnaker is

00:37:59,300 --> 00:38:03,650
running in its own project and we may we

00:38:01,400 --> 00:38:05,960
may have hundreds of other projects

00:38:03,650 --> 00:38:08,450
we're deploying to and those hundreds of

00:38:05,960 --> 00:38:10,190
other projects a special service account

00:38:08,450 --> 00:38:11,750
is being created that has the

00:38:10,190 --> 00:38:14,000
appropriate permissions to deploy like

00:38:11,750 --> 00:38:16,490
the GK or App Engine or whatever those

00:38:14,000 --> 00:38:18,920
service account credentials get sent

00:38:16,490 --> 00:38:21,050
over to spinnaker by way of a write only

00:38:18,920 --> 00:38:23,030
bucket that spinnaker will then ingest

00:38:21,050 --> 00:38:24,800
the help deploy or how configure

00:38:23,030 --> 00:38:26,990
whatever so spinnaker will have

00:38:24,800 --> 00:38:29,090
reference to all those service accounts

00:38:26,990 --> 00:38:30,380
to do the deploys and in the case of

00:38:29,090 --> 00:38:32,090
kubernetes of course it needs to be a

00:38:30,380 --> 00:38:33,950
crew Benetti it's like service account

00:38:32,090 --> 00:38:35,510
or whatever in part of our scripts that

00:38:33,950 --> 00:38:37,850
we have it'll actually create a

00:38:35,510 --> 00:38:39,440
kubernetes like cube config file to have

00:38:37,850 --> 00:38:41,810
the appropriate access to deploy to

00:38:39,440 --> 00:38:44,480
kubernetes yeah but basically one

00:38:41,810 --> 00:38:45,770
project it does have all the creds for

00:38:44,480 --> 00:38:47,600
all the other projects which is why

00:38:45,770 --> 00:38:49,700
we're very excited to leverage vault and

00:38:47,600 --> 00:38:51,530
dynamic accounts so we don't have those

00:38:49,700 --> 00:38:52,850
those creds sitting in a bucket

00:38:51,530 --> 00:38:59,900
somewhere which is what it currently

00:38:52,850 --> 00:39:02,860
does what's that yes thanks yeah I think

00:38:59,900 --> 00:39:02,860
there's one more question

00:39:06,140 --> 00:39:11,690
you mentioned that you have a bunch of

00:39:08,210 --> 00:39:13,220
teams using Jenkins Concours team City

00:39:11,690 --> 00:39:19,759
and so on you're introducing them to

00:39:13,220 --> 00:39:22,099
spinnaker how are they reacting so right

00:39:19,759 --> 00:39:24,289
now it's it's kind of a painful process

00:39:22,099 --> 00:39:26,450
like it's the Wild West especially

00:39:24,289 --> 00:39:28,999
dealing with cloud our current focus is

00:39:26,450 --> 00:39:31,549
mainly towards the cloud to help wrangle

00:39:28,999 --> 00:39:33,710
that Wild Wild West and so since they

00:39:31,549 --> 00:39:36,170
already have to deal with all of this

00:39:33,710 --> 00:39:40,009
stuff our goal is to make it so easy

00:39:36,170 --> 00:39:41,450
that they want to use this instead yeah

00:39:40,009 --> 00:39:44,690
and then just to add on to that real

00:39:41,450 --> 00:39:46,279
quick so teams have to jump through a

00:39:44,690 --> 00:39:48,559
lot of Hoops to go to production and

00:39:46,279 --> 00:39:50,660
it's kind of a painful process and so

00:39:48,559 --> 00:39:51,950
what we're looking to achieve is by

00:39:50,660 --> 00:39:54,049
using spinnaker and having those

00:39:51,950 --> 00:39:55,430
controls built in it'll be a much easier

00:39:54,049 --> 00:39:57,769
process for them and they will

00:39:55,430 --> 00:39:59,989
inherently choose to use spinnaker for

00:39:57,769 --> 00:40:04,099
deployment we do believe that they will

00:39:59,989 --> 00:40:06,109
continue to use Travis the concourse

00:40:04,099 --> 00:40:07,579
whatever to do all their CI and they'll

00:40:06,109 --> 00:40:09,019
use the spinnaker to just do the

00:40:07,579 --> 00:40:11,119
deployment because we strongly believe

00:40:09,019 --> 00:40:14,920
spinnaker is the Best of Breed for doing

00:40:11,119 --> 00:40:18,950
deployments and doing employments well

00:40:14,920 --> 00:40:20,539
alright so without going to too much

00:40:18,950 --> 00:40:22,970
specifics do you think spin go could

00:40:20,539 --> 00:40:25,940
work in environments where we don't have

00:40:22,970 --> 00:40:28,249
org level read access don't have cloud

00:40:25,940 --> 00:40:30,380
DNS access and don't have wildcard certs

00:40:28,249 --> 00:40:32,380
I can I can get it like a yes or it's

00:40:30,380 --> 00:40:37,819
like a Sam like a simple yes or no or

00:40:32,380 --> 00:40:40,880
just curious I mean it would do it would

00:40:37,819 --> 00:40:42,650
do about 90% of it yeah

00:40:40,880 --> 00:40:44,630
like even if you didn't have those and

00:40:42,650 --> 00:40:46,279
those didn't kick off the scripts you

00:40:44,630 --> 00:40:49,220
still have pre-populated scripts with

00:40:46,279 --> 00:40:52,039
everything else right and you know

00:40:49,220 --> 00:40:55,130
starting very soon will disable the auto

00:40:52,039 --> 00:40:57,049
QuickStart that you know you know does

00:40:55,130 --> 00:40:57,769
everything and you choose which ones you

00:40:57,049 --> 00:40:59,599
want to run

00:40:57,769 --> 00:41:02,150
yeah the org level stuff is would help

00:40:59,599 --> 00:41:05,509
for OAuth a little bit and then like for

00:41:02,150 --> 00:41:07,069
your point for DNS you at some point if

00:41:05,509 --> 00:41:08,809
you want to have dns for spinnaker

00:41:07,069 --> 00:41:10,130
you're going to have to make some

00:41:08,809 --> 00:41:11,720
modification to some DNS system

00:41:10,130 --> 00:41:14,029
somewhere where you can make reference

00:41:11,720 --> 00:41:16,190
to an NS record assuming you can solve

00:41:14,029 --> 00:41:17,370
that I don't believe you need or global

00:41:16,190 --> 00:41:18,960
access

00:41:17,370 --> 00:41:21,420
do it it's you know hopefully that

00:41:18,960 --> 00:41:23,270
answers that really the org level axis

00:41:21,420 --> 00:41:25,410
is just because we're using Google OAuth

00:41:23,270 --> 00:41:27,210
right it needs to be able to read groups

00:41:25,410 --> 00:41:29,190
that are not necessarily in that project

00:41:27,210 --> 00:41:31,080
yeah like if you're using github oo or

00:41:29,190 --> 00:41:34,740
whatever that would not be enriched you

00:41:31,080 --> 00:41:36,070
yeah all right thanks everybody thanks

00:41:34,740 --> 00:41:43,260
for your attention

00:41:36,070 --> 00:41:43,260

YouTube URL: https://www.youtube.com/watch?v=c5wuvPtd8SA


