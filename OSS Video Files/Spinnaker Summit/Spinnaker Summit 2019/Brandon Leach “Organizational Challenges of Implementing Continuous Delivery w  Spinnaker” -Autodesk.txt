Title: Brandon Leach “Organizational Challenges of Implementing Continuous Delivery w  Spinnaker” -Autodesk
Publication date: 2019-12-13
Playlist: Spinnaker Summit 2019
Description: 
	The third annual Spinnaker Summit (Diamond Sponsors: Netflix, Google and Armory) was held at the Hard Rock Hotel in San Diego, CA from November 15-17, 2019 and welcomed over 500 members of the rapidly growing Spinnaker open source community.
Captions: 
	00:00:10,800 --> 00:00:16,770
coming so my name is Brandon I've been

00:00:15,059 --> 00:00:18,540
active in the spinnaker community for a

00:00:16,770 --> 00:00:20,369
couple years now

00:00:18,540 --> 00:00:22,650
you know first lookout where like I

00:00:20,369 --> 00:00:24,599
managed platform engineering and there I

00:00:22,650 --> 00:00:26,490
led an effort to implement continuous

00:00:24,599 --> 00:00:27,599
delivery with spinnaker and now I work

00:00:26,490 --> 00:00:29,340
at Autodesk I've been there for about

00:00:27,599 --> 00:00:31,710
eight months and working on somewhat

00:00:29,340 --> 00:00:33,930
similar effort you know I've given a

00:00:31,710 --> 00:00:36,780
couple talks at previous spinnaker

00:00:33,930 --> 00:00:38,280
summits and other venues mainly focused

00:00:36,780 --> 00:00:41,310
like on the technical details of

00:00:38,280 --> 00:00:42,899
implementing spinnaker but today I'm

00:00:41,310 --> 00:00:47,550
gonna take a step back and take a look

00:00:42,899 --> 00:00:49,379
at another set of challenges so two

00:00:47,550 --> 00:00:50,850
level said I assume almost everybody

00:00:49,379 --> 00:00:54,239
here knows what continuous delivery is

00:00:50,850 --> 00:00:55,980
right but you know just to look at it

00:00:54,239 --> 00:00:57,960
canoes continuous deliveries the ability

00:00:55,980 --> 00:01:00,329
to be able to get all types of changes

00:00:57,960 --> 00:01:02,609
features configuration bug fixes

00:01:00,329 --> 00:01:04,230
experiments into production in the hands

00:01:02,609 --> 00:01:05,100
of your users safely and quickly in a

00:01:04,230 --> 00:01:07,560
sustainable way

00:01:05,100 --> 00:01:09,750
right so like in practice with

00:01:07,560 --> 00:01:11,340
continuous delivery you deliver small

00:01:09,750 --> 00:01:15,840
changes to production a fully automated

00:01:11,340 --> 00:01:19,260
fashion so I actually found this this

00:01:15,840 --> 00:01:22,050
graphic a discussion on this topic at a

00:01:19,260 --> 00:01:24,230
blog post I think from flow Sports TV

00:01:22,050 --> 00:01:25,830
and I really like it

00:01:24,230 --> 00:01:28,020
implementing continuous delivery

00:01:25,830 --> 00:01:30,210
requires alignment between our peoples

00:01:28,020 --> 00:01:33,450
organizations people process and

00:01:30,210 --> 00:01:35,130
technology right so for the people

00:01:33,450 --> 00:01:36,840
things it's like things like convincing

00:01:35,130 --> 00:01:38,850
everybody why to do continuous delivery

00:01:36,840 --> 00:01:40,170
in the first place right convincing your

00:01:38,850 --> 00:01:42,900
organization continuous delivery

00:01:40,170 --> 00:01:43,860
something you should do and in my

00:01:42,900 --> 00:01:46,110
experience that's actually a really

00:01:43,860 --> 00:01:47,790
significant hurdle right and getting

00:01:46,110 --> 00:01:49,890
teams to decide on what technology

00:01:47,790 --> 00:01:52,080
choices to use right and building

00:01:49,890 --> 00:01:54,390
customer trust relationships so you can

00:01:52,080 --> 00:01:56,580
get adoption right and then things like

00:01:54,390 --> 00:01:58,830
piece of process problems right you know

00:01:56,580 --> 00:02:00,990
CD has implicated implications for

00:01:58,830 --> 00:02:03,870
business processes like compliance

00:02:00,990 --> 00:02:06,570
testing you know security controls that

00:02:03,870 --> 00:02:08,190
are like deeply embedded in the way your

00:02:06,570 --> 00:02:10,979
business operates right and I'll talk

00:02:08,190 --> 00:02:12,720
about some of these later and then for

00:02:10,979 --> 00:02:15,390
technology I'd group in here like you

00:02:12,720 --> 00:02:21,120
know CD patterns and and and the the

00:02:15,390 --> 00:02:23,670
platform technology itself so and in my

00:02:21,120 --> 00:02:24,530
experience right leading efforts like

00:02:23,670 --> 00:02:26,330
this I've found

00:02:24,530 --> 00:02:28,660
people and process problems to be much

00:02:26,330 --> 00:02:32,030
more difficult than the technology right

00:02:28,660 --> 00:02:33,650
I'm not saying that these areas are any

00:02:32,030 --> 00:02:35,900
of these areas are trivial or don't

00:02:33,650 --> 00:02:39,140
require any effort but in my experience

00:02:35,900 --> 00:02:41,209
you know implementing Siddhi people is

00:02:39,140 --> 00:02:43,310
the hardest relative to process and

00:02:41,209 --> 00:02:45,560
technology is easier than the process

00:02:43,310 --> 00:02:47,720
right so I guess another way of saying

00:02:45,560 --> 00:02:49,520
this is that you know I'd never thought

00:02:47,720 --> 00:02:51,110
that my efforts to implement Siddhi

00:02:49,520 --> 00:02:53,180
we're gonna fail because of a technology

00:02:51,110 --> 00:02:55,190
problem right what kept me up at night

00:02:53,180 --> 00:02:57,850
was the people culture and existing

00:02:55,190 --> 00:03:00,830
business processes that needed to change

00:02:57,850 --> 00:03:03,890
so the technology aspects a CD are

00:03:00,830 --> 00:03:05,150
largely a solved problem right and I'm

00:03:03,890 --> 00:03:07,580
not trying to say that the technology

00:03:05,150 --> 00:03:09,770
aspects a CD are trivial or that they

00:03:07,580 --> 00:03:13,060
don't matter but they're easy because

00:03:09,770 --> 00:03:16,220
they're just largely solved problems

00:03:13,060 --> 00:03:18,020
so CD processes and practices are well

00:03:16,220 --> 00:03:19,820
documented and have been for a really

00:03:18,020 --> 00:03:22,310
long time right like the continuous

00:03:19,820 --> 00:03:25,070
delivery book by jazz humble right and

00:03:22,310 --> 00:03:27,700
and David Farley that was released in

00:03:25,070 --> 00:03:31,190
2010 right that's almost a decade ago

00:03:27,700 --> 00:03:32,330
you know accelerate you know has been

00:03:31,190 --> 00:03:34,670
out for many years I think it's like

00:03:32,330 --> 00:03:36,080
actually on its second edition and it

00:03:34,670 --> 00:03:37,700
outlines you know practices the high

00:03:36,080 --> 00:03:39,530
performing teams and some calls out a

00:03:37,700 --> 00:03:45,049
lot of mini CD best practices it's been

00:03:39,530 --> 00:03:47,690
out for many years right so when you

00:03:45,049 --> 00:03:50,090
look at the technology for automating CD

00:03:47,690 --> 00:03:51,500
right there's a long history here I

00:03:50,090 --> 00:03:53,209
think that could almost be its own

00:03:51,500 --> 00:03:55,489
presentation it'd be a fun presentation

00:03:53,209 --> 00:03:57,620
but the technology part used to be a

00:03:55,489 --> 00:03:59,329
huge hurdle for CD you know in the past

00:03:57,620 --> 00:04:03,019
many efforts to implement continuous

00:03:59,329 --> 00:04:05,780
delivery would get bogged down on on the

00:04:03,019 --> 00:04:07,400
technology but you know today the

00:04:05,780 --> 00:04:09,410
spinnaker and platforms like it they

00:04:07,400 --> 00:04:12,140
exist right that's that's why we're all

00:04:09,410 --> 00:04:14,120
here so you no longer have to like

00:04:12,140 --> 00:04:16,280
invest large amounts of engineering

00:04:14,120 --> 00:04:19,130
effort to build and maintain a platform

00:04:16,280 --> 00:04:21,019
to implement CD automation this is a

00:04:19,130 --> 00:04:26,120
huge advancement that's happened in the

00:04:21,019 --> 00:04:27,560
last three or four years so again I'm

00:04:26,120 --> 00:04:29,000
gonna focus on some of the people and

00:04:27,560 --> 00:04:30,950
culture and process challenges I've

00:04:29,000 --> 00:04:33,289
encountered implementing CD with

00:04:30,950 --> 00:04:35,240
spinnaker at Lookout and I'm pretty new

00:04:33,289 --> 00:04:36,289
in this journey at Autodesk so I'll

00:04:35,240 --> 00:04:38,420
touch on a few things that we've

00:04:36,289 --> 00:04:40,310
addressed there my hope is that

00:04:38,420 --> 00:04:41,810
my experiences will help you and your

00:04:40,310 --> 00:04:48,050
efforts to implement continuous delivery

00:04:41,810 --> 00:04:49,340
of spinnaker so first let's start with

00:04:48,050 --> 00:04:51,110
something that I place in the people

00:04:49,340 --> 00:04:53,000
category and and this is how to convince

00:04:51,110 --> 00:04:56,200
your organization that investing in Sidi

00:04:53,000 --> 00:04:58,490
is a worthwhile endeavor right

00:04:56,200 --> 00:05:00,470
implementing C D is that really in

00:04:58,490 --> 00:05:02,930
costly endeavor for your organization

00:05:00,470 --> 00:05:04,700
right it requires many changes to the

00:05:02,930 --> 00:05:06,830
way software is developed and released

00:05:04,700 --> 00:05:08,780
you know everyone from executives

00:05:06,830 --> 00:05:11,300
product managers engineering leaders

00:05:08,780 --> 00:05:14,210
they need to understand what C D

00:05:11,300 --> 00:05:16,280
practices can do for their business my

00:05:14,210 --> 00:05:18,020
experiences this is often one of the

00:05:16,280 --> 00:05:20,720
most difficult challenges and where I

00:05:18,020 --> 00:05:22,550
most often thought I might fail so let's

00:05:20,720 --> 00:05:24,500
look at like like some of the things

00:05:22,550 --> 00:05:28,910
that I've used to try to sell CD to

00:05:24,500 --> 00:05:31,370
organizations in the past so first like

00:05:28,910 --> 00:05:33,470
obviously increase velocity right like

00:05:31,370 --> 00:05:35,900
you know delivering features and bug

00:05:33,470 --> 00:05:38,780
fixes faster you're the to your customer

00:05:35,900 --> 00:05:41,060
faster than the competition is a huge

00:05:38,780 --> 00:05:42,860
competitive advantage right code that

00:05:41,060 --> 00:05:44,450
sits dormant you know waiting to be

00:05:42,860 --> 00:05:46,310
released is value that's just sitting

00:05:44,450 --> 00:05:49,510
there collecting dust because it's not

00:05:46,310 --> 00:05:49,510
in the hands of your customers yet

00:05:51,400 --> 00:05:55,670
increase engineering efficiency

00:05:53,660 --> 00:05:57,590
productivity right like CD automation

00:05:55,670 --> 00:05:59,090
allows your teams to spend less time

00:05:57,590 --> 00:06:01,580
operating their services and

00:05:59,090 --> 00:06:04,780
infrastructure and more time focusing on

00:06:01,580 --> 00:06:04,780
delivering customer value

00:06:08,980 --> 00:06:14,360
improving service resiliency right like

00:06:11,390 --> 00:06:15,980
CDs simply enables teams to release

00:06:14,360 --> 00:06:18,530
features of bug fixes faster with higher

00:06:15,980 --> 00:06:20,600
quality this can have great impacts on

00:06:18,530 --> 00:06:26,510
your service resiliency and improve your

00:06:20,600 --> 00:06:27,920
customer experiences so in improving

00:06:26,510 --> 00:06:29,600
cost efficiency this one's probably a

00:06:27,920 --> 00:06:31,690
little bit more indirect but you know

00:06:29,600 --> 00:06:34,400
what often keeps teams from optimizing

00:06:31,690 --> 00:06:37,040
their infrastructure and their spend is

00:06:34,400 --> 00:06:39,500
the cost and time and stability it takes

00:06:37,040 --> 00:06:41,030
to achieve a new desired state right so

00:06:39,500 --> 00:06:43,450
standardizing the management and

00:06:41,030 --> 00:06:45,200
validation of infrastructure and

00:06:43,450 --> 00:06:47,780
infrastructure updates and code

00:06:45,200 --> 00:06:50,630
deployments lowers the effort needed to

00:06:47,780 --> 00:06:52,190
execute things like right sizing so I

00:06:50,630 --> 00:06:54,500
don't think you like you're gonna find

00:06:52,190 --> 00:06:56,060
anyone right that disagrees with it with

00:06:54,500 --> 00:06:58,310
any of these things it's all seen great

00:06:56,060 --> 00:07:00,530
things for a software company to focus

00:06:58,310 --> 00:07:02,540
on they all they all seem like great

00:07:00,530 --> 00:07:05,180
things so I don't think most people will

00:07:02,540 --> 00:07:06,470
agree with you here I've also found it

00:07:05,180 --> 00:07:08,900
really helpful to agree with your

00:07:06,470 --> 00:07:10,610
organization on some common metrics that

00:07:08,900 --> 00:07:13,640
you can use to measure the quality of

00:07:10,610 --> 00:07:15,230
your software relief cycle you know this

00:07:13,640 --> 00:07:18,140
gives you a baseline upon which you can

00:07:15,230 --> 00:07:20,300
like demonstrate improvements many of

00:07:18,140 --> 00:07:22,760
these come from the accelerate book but

00:07:20,300 --> 00:07:24,590
we've added a few of them here the ones

00:07:22,760 --> 00:07:27,050
with the asterisks to kind of add a

00:07:24,590 --> 00:07:30,140
dimension of engineering efficiency

00:07:27,050 --> 00:07:31,430
right so you know lead time is the time

00:07:30,140 --> 00:07:33,800
it takes to code to get to production

00:07:31,430 --> 00:07:35,800
after it's been committed deployment

00:07:33,800 --> 00:07:38,210
frequency how often you deploy a service

00:07:35,800 --> 00:07:42,380
change fail percentage right like how

00:07:38,210 --> 00:07:45,020
many of your changes result in a failure

00:07:42,380 --> 00:07:47,360
or an incident mean time to restore how

00:07:45,020 --> 00:07:50,480
quickly can you recover for a minute in

00:07:47,360 --> 00:07:52,130
the human MTTR which is the amount of

00:07:50,480 --> 00:07:53,480
human time it takes to restore from an

00:07:52,130 --> 00:07:54,680
incident it's something that kind of

00:07:53,480 --> 00:07:57,530
comes into play when you're like

00:07:54,680 --> 00:07:59,210
implementing metric based Canaries and

00:07:57,530 --> 00:08:00,770
and the human time to deploy this is a

00:07:59,210 --> 00:08:02,690
huge one right this is the time it

00:08:00,770 --> 00:08:06,350
actually takes an engineer to execute a

00:08:02,690 --> 00:08:07,610
deployment and time to onboard so it

00:08:06,350 --> 00:08:08,960
kind of added this one here this is a

00:08:07,610 --> 00:08:10,850
little bit harder to measure but like

00:08:08,960 --> 00:08:12,950
how long it takes an engineer to be able

00:08:10,850 --> 00:08:15,580
to be comfortable onboarding to deploy a

00:08:12,950 --> 00:08:15,580
new service

00:08:17,279 --> 00:08:22,349
so say you like outline you know what CD

00:08:20,489 --> 00:08:23,849
can do for your organization and you

00:08:22,349 --> 00:08:26,219
know you most likely have the attention

00:08:23,849 --> 00:08:28,769
of some people but maybe not everyone

00:08:26,219 --> 00:08:30,869
right but that's okay you know at

00:08:28,769 --> 00:08:33,209
Lookout I only have like a handful of

00:08:30,869 --> 00:08:34,649
leadership and even less engineering and

00:08:33,209 --> 00:08:37,189
product that were convinced that what I

00:08:34,649 --> 00:08:40,079
was proposing was the right path forward

00:08:37,189 --> 00:08:42,599
that's okay you know my advice is to not

00:08:40,079 --> 00:08:44,730
get caught up on trying to get consensus

00:08:42,599 --> 00:08:47,310
across your organization right instead

00:08:44,730 --> 00:08:52,800
like find allies right and then move

00:08:47,310 --> 00:08:54,600
forward with the implementation look how

00:08:52,800 --> 00:08:57,509
you know we followed a program much like

00:08:54,600 --> 00:08:59,160
this right we identified a pilot team we

00:08:57,509 --> 00:09:00,540
spent a good amount of time trying to

00:08:59,160 --> 00:09:03,839
look at all the possible customers

00:09:00,540 --> 00:09:09,120
finding the perfidy that had a highness

00:09:03,839 --> 00:09:10,589
enough high enough a valuable service a

00:09:09,120 --> 00:09:13,500
service that was valuable to the

00:09:10,589 --> 00:09:14,910
organization and also teams that had the

00:09:13,500 --> 00:09:17,490
technical chops to be able to help this

00:09:14,910 --> 00:09:20,490
get help us get this done right so we

00:09:17,490 --> 00:09:22,290
did one POC service right then we went

00:09:20,490 --> 00:09:23,939
on to like a beta where we did five

00:09:22,290 --> 00:09:29,100
services and after the beta we kind of

00:09:23,939 --> 00:09:31,379
paused so yeah after we don't boarded

00:09:29,100 --> 00:09:32,730
five services we kind of went back and

00:09:31,379 --> 00:09:35,339
collected some of these metrics of

00:09:32,730 --> 00:09:37,529
before and after metrics right and as

00:09:35,339 --> 00:09:39,540
you can see here these were huge steps

00:09:37,529 --> 00:09:41,420
in efficiency right so steps to deploy a

00:09:39,540 --> 00:09:43,319
service into production

00:09:41,420 --> 00:09:45,720
depending on the set of tooling it would

00:09:43,319 --> 00:09:48,029
take about 25 steps what - one to three

00:09:45,720 --> 00:09:50,100
steps and this was this was huge for

00:09:48,029 --> 00:09:52,439
lookout because a lot of our incidents

00:09:50,100 --> 00:09:55,259
were caused by manual human error yeah

00:09:52,439 --> 00:09:57,509
in the deployment process engineering

00:09:55,259 --> 00:09:59,069
time to deploy so this is the amount of

00:09:57,509 --> 00:10:01,350
time that takes an engineer to deploy a

00:09:59,069 --> 00:10:03,240
service went from 60 minutes to less

00:10:01,350 --> 00:10:04,740
than a minute right this this represents

00:10:03,240 --> 00:10:07,680
a massive increase in engineering

00:10:04,740 --> 00:10:10,110
efficiency automation time to deploy

00:10:07,680 --> 00:10:11,670
right this is a good one from 60 minutes

00:10:10,110 --> 00:10:12,600
of 31 minutes such as how long the

00:10:11,670 --> 00:10:15,480
process takes

00:10:12,600 --> 00:10:17,279
as a whole engineering time to patch so

00:10:15,480 --> 00:10:18,899
you know we did FedRAMP at Lookout and

00:10:17,279 --> 00:10:22,439
we ended up having a patch at a very

00:10:18,899 --> 00:10:23,819
aggressive cadence for some services

00:10:22,439 --> 00:10:26,250
that we did in the beta that took five

00:10:23,819 --> 00:10:28,620
days - for them to go begin to end like

00:10:26,250 --> 00:10:30,780
test their whole service and patch it

00:10:28,620 --> 00:10:33,240
that we fully automated the patching of

00:10:30,780 --> 00:10:34,860
services with spinnaker an onboarding

00:10:33,240 --> 00:10:36,510
time it was like how long it takes an

00:10:34,860 --> 00:10:37,890
engineer to learn and be comfortable to

00:10:36,510 --> 00:10:45,030
playing service went from three plus

00:10:37,890 --> 00:10:46,800
days to about thirty minutes so this to

00:10:45,030 --> 00:10:49,020
demonstrate it like quantifiable results

00:10:46,800 --> 00:10:51,600
right with huge impacts on our business

00:10:49,020 --> 00:10:52,980
you know after we did our beta we kind

00:10:51,600 --> 00:10:54,600
of went on a road show and kind of took

00:10:52,980 --> 00:10:57,480
these to these metrics and took our

00:10:54,600 --> 00:10:59,340
demos around and executives like fastly

00:10:57,480 --> 00:11:00,750
they fast-tracked the project and

00:10:59,340 --> 00:11:02,730
eventually made it the number one

00:11:00,750 --> 00:11:05,300
engineering priority to implement CD

00:11:02,730 --> 00:11:07,260
with spinnaker over a couple quarters

00:11:05,300 --> 00:11:09,180
engineering teams were also once we

00:11:07,260 --> 00:11:11,340
showed in these metrics they were also

00:11:09,180 --> 00:11:13,050
really eager maybe Dan'l probably

00:11:11,340 --> 00:11:14,010
members maybe a little too eager right

00:11:13,050 --> 00:11:16,860
we kind of had a little bit of a

00:11:14,010 --> 00:11:19,140
stampeding herd to onboard a spinnaker

00:11:16,860 --> 00:11:21,210
and at over the next one and a half

00:11:19,140 --> 00:11:23,220
years you know we on board at about 200

00:11:21,210 --> 00:11:24,660
services to spinnaker and again like

00:11:23,220 --> 00:11:27,390
greatly increased our engineering

00:11:24,660 --> 00:11:29,580
efficiency and feature velocity also

00:11:27,390 --> 00:11:34,260
greatly increased I remember a story

00:11:29,580 --> 00:11:36,750
about this where the the CDO our chief

00:11:34,260 --> 00:11:38,280
development officer said the CEO came to

00:11:36,750 --> 00:11:40,200
her and was like why are we delivering

00:11:38,280 --> 00:11:41,970
so many more like things now on the

00:11:40,200 --> 00:11:43,980
roadmap what's going on and we greatly

00:11:41,970 --> 00:11:50,340
we tied it back to implementing CD with

00:11:43,980 --> 00:11:52,620
spinnaker so yeah now let's look at

00:11:50,340 --> 00:11:54,300
another problem and this is another

00:11:52,620 --> 00:11:57,360
people challenge right this is I spent a

00:11:54,300 --> 00:11:59,070
lot of time on this another people

00:11:57,360 --> 00:12:01,470
challenge I found is like how to get

00:11:59,070 --> 00:12:04,500
decisions made on what technologies to

00:12:01,470 --> 00:12:06,510
use right so unless you're lucky enough

00:12:04,500 --> 00:12:08,580
to start from scratch right like total

00:12:06,510 --> 00:12:09,930
greenfield it's probably a safe

00:12:08,580 --> 00:12:11,610
assumption that you're organizing an

00:12:09,930 --> 00:12:14,400
organization already has tooling or

00:12:11,610 --> 00:12:17,250
multiple sets of tooling to deploy code

00:12:14,400 --> 00:12:19,590
changes this can actually be a very

00:12:17,250 --> 00:12:25,110
sensitive and high-touch decision to

00:12:19,590 --> 00:12:26,700
tonight to navigate so you know I'm

00:12:25,110 --> 00:12:28,740
going to look at lookout specifically

00:12:26,700 --> 00:12:31,230
this is the situation we were in when we

00:12:28,740 --> 00:12:32,700
started the effort right lookout we had

00:12:31,230 --> 00:12:34,080
many different sets of deployment

00:12:32,700 --> 00:12:35,630
tooling that had been created over the

00:12:34,080 --> 00:12:38,450
years you know there was a CK one

00:12:35,630 --> 00:12:41,700
igniter Blackbird that was my attempt

00:12:38,450 --> 00:12:42,420
chef repo linic we even had a team doing

00:12:41,700 --> 00:12:47,610
Nick's I don't know

00:12:42,420 --> 00:12:49,020
who here's who even heard of Nick's you

00:12:47,610 --> 00:12:51,780
know all of these things that succeeded

00:12:49,020 --> 00:12:53,940
in onboarding significant portions of

00:12:51,780 --> 00:12:55,860
our services right and all of them had

00:12:53,940 --> 00:12:57,900
teams and people who had built them used

00:12:55,860 --> 00:13:00,000
them and supported them right and many

00:12:57,900 --> 00:13:01,470
of these teams had a certain significant

00:13:00,000 --> 00:13:03,510
amount of attachment to what they had

00:13:01,470 --> 00:13:06,890
built right and what they were using so

00:13:03,510 --> 00:13:09,450
that which is totally normal right I

00:13:06,890 --> 00:13:10,470
think I I find this one entertaining

00:13:09,450 --> 00:13:11,880
here here's a list of all the

00:13:10,470 --> 00:13:14,280
technologies that were used by each

00:13:11,880 --> 00:13:16,620
platform right you know it's chef

00:13:14,280 --> 00:13:18,210
terrible ansible being stalked

00:13:16,620 --> 00:13:19,770
even nicks right like I mentioned I

00:13:18,210 --> 00:13:21,900
think if we would have implemented like

00:13:19,770 --> 00:13:27,720
saltstack a puppet we could say we had

00:13:21,900 --> 00:13:30,660
everything so yeah so where were we left

00:13:27,720 --> 00:13:32,520
right you know what we were left was

00:13:30,660 --> 00:13:34,800
like many different paths to production

00:13:32,520 --> 00:13:37,200
each with its own pitfalls and quirks

00:13:34,800 --> 00:13:39,330
right you know each set of tooling had

00:13:37,200 --> 00:13:41,730
its own workflows features strong points

00:13:39,330 --> 00:13:43,200
weak points and this was an ideal for

00:13:41,730 --> 00:13:44,730
many reasons right so I kind of went

00:13:43,200 --> 00:13:47,520
about trying to make a case of why this

00:13:44,730 --> 00:13:50,730
was not an ideal situation this is kind

00:13:47,520 --> 00:13:52,530
of how I attacked that problem one like

00:13:50,730 --> 00:13:54,150
pointing out that each tool set requires

00:13:52,530 --> 00:13:57,840
a separate team to maintain and extend

00:13:54,150 --> 00:13:59,610
right this is obviously very inefficient

00:13:57,840 --> 00:14:01,320
you know each one of those pastor

00:13:59,610 --> 00:14:02,910
production required its own individual

00:14:01,320 --> 00:14:05,130
effort to fix bugs implement new

00:14:02,910 --> 00:14:06,780
features right this look this led to a

00:14:05,130 --> 00:14:10,460
huge amount of duplicate effort and

00:14:06,780 --> 00:14:13,530
wasted resources that was pretty obvious

00:14:10,460 --> 00:14:15,860
you know ii like capabilities we're not

00:14:13,530 --> 00:14:18,300
consistent across tool sets right

00:14:15,860 --> 00:14:20,370
efforts to add new features to like say

00:14:18,300 --> 00:14:22,200
one tool set we're not easily like

00:14:20,370 --> 00:14:23,610
transferable to others right so we had

00:14:22,200 --> 00:14:25,770
these like some teams had some really

00:14:23,610 --> 00:14:27,360
advanced capabilities on one set of

00:14:25,770 --> 00:14:28,740
tooling but then they were missing some

00:14:27,360 --> 00:14:31,440
really basic capabilities that other

00:14:28,740 --> 00:14:34,230
sets of tooling had you know with that

00:14:31,440 --> 00:14:35,490
with this fragmentation you you lose the

00:14:34,230 --> 00:14:37,410
leverage to be able to add a new

00:14:35,490 --> 00:14:41,360
capability to your platform and it

00:14:37,410 --> 00:14:41,360
immediately become available to everyone

00:14:41,540 --> 00:14:48,090
and and finally like engineering

00:14:45,120 --> 00:14:51,270
experience was not consistent across all

00:14:48,090 --> 00:14:53,010
the teams right you know so if you have

00:14:51,270 --> 00:14:54,810
an engineer working on one team

00:14:53,010 --> 00:14:55,890
she cannot like easily transfer to

00:14:54,810 --> 00:14:57,660
another team right

00:14:55,890 --> 00:14:59,490
the learning curves very steep and you

00:14:57,660 --> 00:15:02,519
can't it you lose a lot of like ability

00:14:59,490 --> 00:15:04,019
to be able to quickly juice certain

00:15:02,519 --> 00:15:05,910
efforts right because you can't take

00:15:04,019 --> 00:15:07,260
services and say you know kind of put

00:15:05,910 --> 00:15:09,839
them on the back burner transfer them to

00:15:07,260 --> 00:15:11,700
another team easily this is a was a big

00:15:09,839 --> 00:15:13,200
problem with our agility so all of these

00:15:11,700 --> 00:15:14,760
problems that look out like that I just

00:15:13,200 --> 00:15:16,620
talked about we're kind of at the core

00:15:14,760 --> 00:15:18,600
of all of our engineering engineering

00:15:16,620 --> 00:15:24,630
efficiency and service reliability

00:15:18,600 --> 00:15:26,579
problems so what we sought to do was to

00:15:24,630 --> 00:15:28,500
implement one intentional platform right

00:15:26,579 --> 00:15:30,000
so kind of made the case that we don't

00:15:28,500 --> 00:15:32,010
need all these multiple platforms or

00:15:30,000 --> 00:15:34,800
multiple sets of tooling we want one

00:15:32,010 --> 00:15:36,959
platform right and we kind of like kind

00:15:34,800 --> 00:15:39,000
of pitch this this platform as being

00:15:36,959 --> 00:15:40,529
kind of like a paved road you know they

00:15:39,000 --> 00:15:42,149
get you getting all of our customers

00:15:40,529 --> 00:15:44,550
quickly to production safely and

00:15:42,149 --> 00:15:46,410
securely you know with all the best

00:15:44,550 --> 00:15:50,790
practices baked into the platform and

00:15:46,410 --> 00:15:54,209
making the easy way the right way but

00:15:50,790 --> 00:15:55,860
you know we had we had we had we had

00:15:54,209 --> 00:15:57,959
tried this before right and we already

00:15:55,860 --> 00:15:59,640
ended up fragmented and so we kind of

00:15:57,959 --> 00:16:02,640
take those took a step back and we

00:15:59,640 --> 00:16:04,829
looked at you know what are we going to

00:16:02,640 --> 00:16:06,750
do different this time right and and at

00:16:04,829 --> 00:16:10,170
first you know we treated the platform

00:16:06,750 --> 00:16:11,760
as a product this may seem obvious but

00:16:10,170 --> 00:16:14,579
you know I think it's kind of like the

00:16:11,760 --> 00:16:16,529
curse of internal tools teams to build a

00:16:14,579 --> 00:16:19,920
solution and just expect their customers

00:16:16,529 --> 00:16:22,829
to use it right you know we really

00:16:19,920 --> 00:16:24,959
sought to understand our customers and

00:16:22,829 --> 00:16:27,720
really understand how they view their

00:16:24,959 --> 00:16:31,529
problems right and Autodesk's this

00:16:27,720 --> 00:16:33,660
practice is much more advanced and we

00:16:31,529 --> 00:16:35,730
have like a dedicated UX experts to help

00:16:33,660 --> 00:16:38,839
us with customers and interacting with

00:16:35,730 --> 00:16:40,620
customers it's a really great resource

00:16:38,839 --> 00:16:43,140
you know we wanted to embrace

00:16:40,620 --> 00:16:44,910
transparency and everything we do to

00:16:43,140 --> 00:16:47,130
build trust right also we wanted to

00:16:44,910 --> 00:16:48,449
iterate right rather than you know going

00:16:47,130 --> 00:16:50,220
into the lab and trying to build

00:16:48,449 --> 00:16:51,329
something perfect and coming and handing

00:16:50,220 --> 00:16:53,519
it to our customers and when we thought

00:16:51,329 --> 00:16:54,899
it was done we saw it to like get the

00:16:53,519 --> 00:16:56,550
tools in their hands as quickly as

00:16:54,899 --> 00:17:00,120
possible and learn from their feedback

00:16:56,550 --> 00:17:02,310
and then I think as you saw from the POC

00:17:00,120 --> 00:17:04,199
to the beta to the GA thing that we had

00:17:02,310 --> 00:17:06,390
earlier wanted to follow on marketing

00:17:04,199 --> 00:17:08,790
and an adoption strategy again this is

00:17:06,390 --> 00:17:09,600
also when I joined Autodesk I was really

00:17:08,790 --> 00:17:11,789
impressed they are

00:17:09,600 --> 00:17:13,650
do this really well right like picking

00:17:11,789 --> 00:17:15,660
your customers making this successful

00:17:13,650 --> 00:17:17,010
and really marketing their success we

00:17:15,660 --> 00:17:18,900
actually have somebody in our org that

00:17:17,010 --> 00:17:20,280
helps us like do this making videos and

00:17:18,900 --> 00:17:23,370
then stuff like that so it's really

00:17:20,280 --> 00:17:24,870
great and then obviously make easy way

00:17:23,370 --> 00:17:26,459
the right way right I kind of talked

00:17:24,870 --> 00:17:28,020
about that a little bit before so

00:17:26,459 --> 00:17:29,520
another thing that we wanted to do

00:17:28,020 --> 00:17:33,330
differently is embrace the community

00:17:29,520 --> 00:17:36,240
right we really view that every line of

00:17:33,330 --> 00:17:38,750
code that we ride is a liability you

00:17:36,240 --> 00:17:41,010
know we looked at all the existing

00:17:38,750 --> 00:17:43,039
solutions that we had and asked

00:17:41,010 --> 00:17:45,780
ourselves okay if we open-source this

00:17:43,039 --> 00:17:47,159
would it attract a community right that

00:17:45,780 --> 00:17:49,230
would that would come and maintain and

00:17:47,159 --> 00:17:51,120
extend it and the answer was no for all

00:17:49,230 --> 00:17:53,970
of them so there was like why keep

00:17:51,120 --> 00:17:55,919
working on them then right you know

00:17:53,970 --> 00:17:57,929
recent advancements in industry you know

00:17:55,919 --> 00:18:00,179
advances with commonly available open

00:17:57,929 --> 00:18:02,100
source projects have made it no longer

00:18:00,179 --> 00:18:03,900
necessary to build and manage your own

00:18:02,100 --> 00:18:06,690
deployment automation infrastructure so

00:18:03,900 --> 00:18:08,549
we wanted to embrace open standard open

00:18:06,690 --> 00:18:10,289
source tools and I firmly believe that

00:18:08,549 --> 00:18:12,150
there are many advantages to using open

00:18:10,289 --> 00:18:13,919
source platforms with large and vibrant

00:18:12,150 --> 00:18:19,620
communities over over closed source

00:18:13,919 --> 00:18:22,169
solutions so inter spinnaker right at

00:18:19,620 --> 00:18:25,799
lookout in Autodesk we decided to choose

00:18:22,169 --> 00:18:26,820
spinnaker as our single CD platform I'm

00:18:25,799 --> 00:18:29,130
going to go over some of the main

00:18:26,820 --> 00:18:31,440
reasons we decided on using spinnaker or

00:18:29,130 --> 00:18:32,820
even maybe a little bit more I'm just

00:18:31,440 --> 00:18:34,470
gonna go over the slides that I've

00:18:32,820 --> 00:18:36,179
actually been I'm sure everybody here at

00:18:34,470 --> 00:18:38,610
Autodesk is really tired of seeing these

00:18:36,179 --> 00:18:41,970
but that I've been using to pitch

00:18:38,610 --> 00:18:43,799
spinnaker right so most of you probably

00:18:41,970 --> 00:18:45,059
already know this everything that's in

00:18:43,799 --> 00:18:46,260
these slides but these are the actual

00:18:45,059 --> 00:18:47,730
light this is the actual slides that

00:18:46,260 --> 00:18:50,340
I've been going around pitching and how

00:18:47,730 --> 00:18:54,150
we came to the conclusion to use

00:18:50,340 --> 00:18:55,470
spinnaker so first like one of the main

00:18:54,150 --> 00:18:56,909
drivers right I think this is really

00:18:55,470 --> 00:18:58,940
obvious is the size of the strength of

00:18:56,909 --> 00:19:02,220
the spinnaker community itself right

00:18:58,940 --> 00:19:04,200
adopter adoption of spinnaker has really

00:19:02,220 --> 00:19:06,330
started a hockey stick in the in the

00:19:04,200 --> 00:19:08,340
past few years and it's quickly becoming

00:19:06,330 --> 00:19:10,340
like the de-facto open source CD

00:19:08,340 --> 00:19:12,900
platform or it already is

00:19:10,340 --> 00:19:15,390
you know there's teams of Engineers at

00:19:12,900 --> 00:19:18,900
spinnaker are working on spinnaker from

00:19:15,390 --> 00:19:21,690
Netflix Google Armory pivotal Oracle

00:19:18,900 --> 00:19:22,190
Microsoft I mean the the commitment of

00:19:21,690 --> 00:19:24,789
the May

00:19:22,190 --> 00:19:27,620
public cloud providers in many ways

00:19:24,789 --> 00:19:31,700
future proofs the platform that was a

00:19:27,620 --> 00:19:32,899
big selling point and I guess like

00:19:31,700 --> 00:19:35,570
everybody hears it kind of knows this

00:19:32,899 --> 00:19:37,730
but you know explaining that the course

00:19:35,570 --> 00:19:39,740
spinnaker is a very expert you can build

00:19:37,730 --> 00:19:42,230
very expressive pipelines that meet your

00:19:39,740 --> 00:19:45,019
release process right and it has a great

00:19:42,230 --> 00:19:48,139
UI for being able to manage and interact

00:19:45,019 --> 00:19:50,059
with these pipelines you know and also

00:19:48,139 --> 00:19:52,039
how it provides a single pane of glass

00:19:50,059 --> 00:19:53,120
is a huge state selling point right when

00:19:52,039 --> 00:19:54,759
we have a lot of multi region

00:19:53,120 --> 00:19:56,809
deployments or deployments that are

00:19:54,759 --> 00:19:59,000
stripe decor that's different cloud

00:19:56,809 --> 00:20:00,649
providers the ability to be able to see

00:19:59,000 --> 00:20:02,389
the status of all these things in one UI

00:20:00,649 --> 00:20:08,470
is also a huge selling point that I

00:20:02,389 --> 00:20:11,120
views and I mean one of the main reasons

00:20:08,470 --> 00:20:13,070
and this is this kit really gets into

00:20:11,120 --> 00:20:16,070
like like a really high-level strategy

00:20:13,070 --> 00:20:17,539
but one of the spinnaker has a really

00:20:16,070 --> 00:20:18,860
elegant abstraction between your

00:20:17,539 --> 00:20:21,169
deployment logic in the reference

00:20:18,860 --> 00:20:24,080
runtimes themselves right I mean that

00:20:21,169 --> 00:20:25,879
there's many levels of abstraction you

00:20:24,080 --> 00:20:27,649
can implement between an engineer

00:20:25,879 --> 00:20:29,690
writing code and the underlining Cloud

00:20:27,649 --> 00:20:31,700
primitives right where and how you

00:20:29,690 --> 00:20:33,620
implement those those abstractions is

00:20:31,700 --> 00:20:35,659
kind of the key to operating efficiently

00:20:33,620 --> 00:20:37,669
while having the needed flexibility and

00:20:35,659 --> 00:20:39,049
so this is this is a really powerful

00:20:37,669 --> 00:20:41,509
abstraction because it gives you the

00:20:39,049 --> 00:20:43,179
flexibility to adopt and experiment with

00:20:41,509 --> 00:20:45,289
different cloud providers and platforms

00:20:43,179 --> 00:20:48,230
without having to retool or change

00:20:45,289 --> 00:20:50,029
customer experience like I said like

00:20:48,230 --> 00:20:51,710
decisions around like cloud providers

00:20:50,029 --> 00:20:54,320
and other platforms are really highly

00:20:51,710 --> 00:20:58,039
strategic right the decisions to say use

00:20:54,320 --> 00:20:59,600
kubernetes or AWS as your GCP right or

00:20:58,039 --> 00:21:02,419
to use different ones at the same time

00:20:59,600 --> 00:21:03,830
this abstraction like a provide your

00:21:02,419 --> 00:21:05,870
business the ability to be able to make

00:21:03,830 --> 00:21:07,070
these decisions easily without the

00:21:05,870 --> 00:21:08,960
burden of having to change your

00:21:07,070 --> 00:21:15,769
deployment process or the user

00:21:08,960 --> 00:21:17,990
experience yeah so look out we decided

00:21:15,769 --> 00:21:21,830
to replace many sets of our in-house

00:21:17,990 --> 00:21:24,350
built tools with spinnaker so another

00:21:21,830 --> 00:21:25,970
interesting people challenge that we had

00:21:24,350 --> 00:21:27,200
though with this is like what happens to

00:21:25,970 --> 00:21:28,909
all of those people that worked on those

00:21:27,200 --> 00:21:32,450
tools previously right all the tools

00:21:28,909 --> 00:21:34,129
that we were replacing there's this kind

00:21:32,450 --> 00:21:35,910
of like lingering question of like okay

00:21:34,129 --> 00:21:37,770
this thing that I've worked on for years

00:21:35,910 --> 00:21:39,480
we're now replacing it with something

00:21:37,770 --> 00:21:45,000
that kind of already exists what do we

00:21:39,480 --> 00:21:49,050
what do I do now so look out we took

00:21:45,000 --> 00:21:50,820
many of the engineers thank you pop it

00:21:49,050 --> 00:21:52,260
up we took many of the integers that

00:21:50,820 --> 00:21:54,300
worked on these previous sets of tooling

00:21:52,260 --> 00:21:57,570
and we actually came together we built

00:21:54,300 --> 00:21:59,760
the ECS provider for spinnaker right I

00:21:57,570 --> 00:22:02,010
think Danielle's here Daniel worked on

00:21:59,760 --> 00:22:05,850
that effort right and we contribute it

00:22:02,010 --> 00:22:07,530
back to the community you know so rather

00:22:05,850 --> 00:22:09,510
than toiling on their own platforms and

00:22:07,530 --> 00:22:11,250
their own internal tools right we were

00:22:09,510 --> 00:22:13,320
able to engage the spinnaker community

00:22:11,250 --> 00:22:15,870
and make a large contribution to the

00:22:13,320 --> 00:22:17,040
ecosystem this is good for the careers

00:22:15,870 --> 00:22:19,770
of everybody that worked on it

00:22:17,040 --> 00:22:21,120
and also good for the community you know

00:22:19,770 --> 00:22:22,710
that that thing that we were talking

00:22:21,120 --> 00:22:24,210
about earlier or that I was saying

00:22:22,710 --> 00:22:27,990
earlier about like every line of code

00:22:24,210 --> 00:22:29,550
you're right is a liability that kind of

00:22:27,990 --> 00:22:30,780
changes a little bit when you write the

00:22:29,550 --> 00:22:31,380
code and you commit it back to the

00:22:30,780 --> 00:22:33,870
community

00:22:31,380 --> 00:22:36,630
right so for instance like we built the

00:22:33,870 --> 00:22:38,580
ECS provider at Lookout but now it's

00:22:36,630 --> 00:22:45,660
largely maintained by a team at Amazon

00:22:38,580 --> 00:22:48,630
so so one more key to our success has

00:22:45,660 --> 00:22:50,490
been our partnership with armory you

00:22:48,630 --> 00:22:52,950
know they would have been big part of

00:22:50,490 --> 00:22:55,620
our of my success implementing CD with

00:22:52,950 --> 00:22:56,760
the spinnaker you know that they come in

00:22:55,620 --> 00:22:58,920
and they they were able to help us

00:22:56,760 --> 00:23:00,930
operate operationalize spinnaker in our

00:22:58,920 --> 00:23:04,770
environment and kind of an

00:23:00,930 --> 00:23:06,270
enterprise-grade implementation so that

00:23:04,770 --> 00:23:08,310
our team could immediately start working

00:23:06,270 --> 00:23:10,880
with customers you know you know this

00:23:08,310 --> 00:23:13,440
allowed us to quickly demonstrate value

00:23:10,880 --> 00:23:15,270
they also offered really good support

00:23:13,440 --> 00:23:17,700
around best practices and patterns and

00:23:15,270 --> 00:23:24,830
even provided a development support when

00:23:17,700 --> 00:23:27,060
we were working on the UCS provider so

00:23:24,830 --> 00:23:29,450
another challenge this is kind of like a

00:23:27,060 --> 00:23:32,460
and I put this in probably the process

00:23:29,450 --> 00:23:37,560
piece another challenge that I've had to

00:23:32,460 --> 00:23:39,030
overcome in is working around compliance

00:23:37,560 --> 00:23:40,890
and security controls well I guess not

00:23:39,030 --> 00:23:43,410
working around working with compliance

00:23:40,890 --> 00:23:47,580
and security controls to implicado

00:23:43,410 --> 00:23:49,049
baited C D right you know one major note

00:23:47,580 --> 00:23:51,480
that I'll make here that I've learned

00:23:49,049 --> 00:23:52,980
the hard way is you want to involve your

00:23:51,480 --> 00:23:54,899
security and compliance teams and your

00:23:52,980 --> 00:23:55,980
efforts as soon as possible right you

00:23:54,899 --> 00:23:57,299
don't you don't really want to get too

00:23:55,980 --> 00:23:59,970
far in your implementation without

00:23:57,299 --> 00:24:01,379
involving them in the conversation but

00:23:59,970 --> 00:24:02,850
depending on the practices of your

00:24:01,379 --> 00:24:07,369
company right you're gonna need their

00:24:02,850 --> 00:24:10,080
partnership and their contributions so

00:24:07,369 --> 00:24:12,239
one of the common challenges that I've

00:24:10,080 --> 00:24:13,769
come across is the perception that with

00:24:12,239 --> 00:24:16,289
regards to change the software and

00:24:13,769 --> 00:24:18,779
infrastructure speed is dangerous and

00:24:16,289 --> 00:24:22,259
slow is safe right this is kind of a

00:24:18,779 --> 00:24:24,570
pervasive idea it's pretty common this

00:24:22,259 --> 00:24:26,039
office often many compliance and

00:24:24,570 --> 00:24:28,830
security controls are built around this

00:24:26,039 --> 00:24:31,350
idea right but the problem is that this

00:24:28,830 --> 00:24:33,570
mindset actually leads to processes that

00:24:31,350 --> 00:24:36,169
it that involve more inspection approval

00:24:33,570 --> 00:24:38,879
change windows change review boards etc

00:24:36,169 --> 00:24:42,029
you know all trying to slow down and

00:24:38,879 --> 00:24:43,350
change all try to trying to slow down

00:24:42,029 --> 00:24:45,960
change thinking it will provide

00:24:43,350 --> 00:24:47,850
stability but but the problem with these

00:24:45,960 --> 00:24:50,809
practices is that it leads to larger

00:24:47,850 --> 00:24:53,759
releases which leads to like more

00:24:50,809 --> 00:24:56,309
spectacular failure failures you know

00:24:53,759 --> 00:24:56,940
release anxiety and stress for everyone

00:24:56,309 --> 00:24:59,730
involved

00:24:56,940 --> 00:25:01,559
I remember at Lookout we used to do for

00:24:59,730 --> 00:25:03,749
some of our major resurfaces we would do

00:25:01,559 --> 00:25:06,330
these like bi-weekly by Sprint releases

00:25:03,749 --> 00:25:09,019
and they were so painful everybody was

00:25:06,330 --> 00:25:12,269
so stressed out and multiple rollbacks

00:25:09,019 --> 00:25:15,749
weekend's ruined stuff like that

00:25:12,269 --> 00:25:18,600
so CD CD CD patterns and processes are

00:25:15,749 --> 00:25:24,119
kind of are meant to address this flawed

00:25:18,600 --> 00:25:27,049
idea so with CD write like speed is

00:25:24,119 --> 00:25:30,179
safety you know fully automated CD

00:25:27,049 --> 00:25:32,100
minimizes the risk of shrinking the size

00:25:30,179 --> 00:25:34,559
of changes and delivering features and

00:25:32,100 --> 00:25:36,840
bug fixes faster to the customer you

00:25:34,559 --> 00:25:38,669
know this is a fundamental mind shift

00:25:36,840 --> 00:25:42,059
that I in my experience you just kind of

00:25:38,669 --> 00:25:43,710
have to address head-on so now I'm gonna

00:25:42,059 --> 00:25:46,470
give us like here's a specific example

00:25:43,710 --> 00:25:49,190
of a compliance control play change that

00:25:46,470 --> 00:25:51,570
we're working on at Autodesk

00:25:49,190 --> 00:25:52,679
so actually Marc Webb who's sitting up

00:25:51,570 --> 00:25:55,200
here in front has been leading this

00:25:52,679 --> 00:25:56,909
effort at Autodesk and Autodesk the

00:25:55,200 --> 00:25:58,980
deployment workflow was kind of hampered

00:25:56,909 --> 00:26:01,259
by compliance controls which required

00:25:58,980 --> 00:26:01,860
manager approval for changes getting

00:26:01,259 --> 00:26:04,740
promoted

00:26:01,860 --> 00:26:06,120
clean environments engineers had to wait

00:26:04,740 --> 00:26:07,890
for approval for their manager or to

00:26:06,120 --> 00:26:10,679
promote and release between environments

00:26:07,890 --> 00:26:13,070
this greatly slowed down and and

00:26:10,679 --> 00:26:16,620
prevents like a fully automated process

00:26:13,070 --> 00:26:18,600
also one of the major flaws is the

00:26:16,620 --> 00:26:20,580
person making these approvals often has

00:26:18,600 --> 00:26:22,440
no context about the change itself right

00:26:20,580 --> 00:26:25,110
so you could just be sitting there

00:26:22,440 --> 00:26:26,850
clicking for a matter right I actually

00:26:25,110 --> 00:26:28,830
used I got a few of these because I was

00:26:26,850 --> 00:26:30,299
someone's proxy for a while and I would

00:26:28,830 --> 00:26:35,190
get like 20 of them a day and I just had

00:26:30,299 --> 00:26:36,690
no idea what was going on with him so so

00:26:35,190 --> 00:26:39,540
we recently like worked with the

00:26:36,690 --> 00:26:41,160
compliance team to modify our compliance

00:26:39,540 --> 00:26:43,650
and search security controls to allow

00:26:41,160 --> 00:26:46,830
for fully automated CD so as you can see

00:26:43,650 --> 00:26:48,900
here rather than have requiring approval

00:26:46,830 --> 00:26:50,760
for things to be promoted say between

00:26:48,900 --> 00:26:53,070
dev and staging or staging a prod

00:26:50,760 --> 00:26:54,870
right we've kind of moved with the idea

00:26:53,070 --> 00:26:56,850
that once something is merged to master

00:26:54,870 --> 00:26:59,010
it's automatically approved to go to

00:26:56,850 --> 00:27:00,750
production so we've actually kind of

00:26:59,010 --> 00:27:03,360
shifted left all the compliance controls

00:27:00,750 --> 00:27:04,770
and putting that approval in the hands

00:27:03,360 --> 00:27:06,120
of the people themselves that actually

00:27:04,770 --> 00:27:14,070
have the context and know about the

00:27:06,120 --> 00:27:15,780
change so one more thing and I think

00:27:14,070 --> 00:27:20,610
that this this kind of falls into the

00:27:15,780 --> 00:27:22,080
category of maybe the effects of CD of

00:27:20,610 --> 00:27:25,620
implementing spinnaker and CD that I've

00:27:22,080 --> 00:27:27,200
seen in organizations not really

00:27:25,620 --> 00:27:29,250
necessarily something that I

00:27:27,200 --> 00:27:33,270
specifically look out not something that

00:27:29,250 --> 00:27:36,630
I anticipated and I called DevOps

00:27:33,270 --> 00:27:38,100
transformation but so look out this is

00:27:36,630 --> 00:27:40,440
how teams were generally organized

00:27:38,100 --> 00:27:42,210
before we started implementing CD with

00:27:40,440 --> 00:27:44,130
spinnaker right we the little gray

00:27:42,210 --> 00:27:46,110
people are software engineers little

00:27:44,130 --> 00:27:47,520
blue people are DevOps engineers so we

00:27:46,110 --> 00:27:51,120
had all these product teams right that

00:27:47,520 --> 00:27:53,309
had software engineers and embedded

00:27:51,120 --> 00:27:54,540
DevOps engineers right and then we also

00:27:53,309 --> 00:27:57,950
have these tooling teams that were

00:27:54,540 --> 00:27:57,950
supporting the different sets of tooling

00:27:58,250 --> 00:28:03,240
after we implemented CD with spinnaker

00:28:01,110 --> 00:28:04,740
we kind of naturally morphed into a

00:28:03,240 --> 00:28:06,030
different different organizational

00:28:04,740 --> 00:28:07,980
structure right

00:28:06,030 --> 00:28:09,210
where we removed all the embedded DevOps

00:28:07,980 --> 00:28:10,980
engineers from the teams themselves

00:28:09,210 --> 00:28:13,410
because they were no longer needed in

00:28:10,980 --> 00:28:15,360
the teams so you know treating the plot

00:28:13,410 --> 00:28:17,309
the platform is a product

00:28:15,360 --> 00:28:19,590
you know and taking the the operations

00:28:17,309 --> 00:28:21,299
that these DevOps engineers actually did

00:28:19,590 --> 00:28:23,700
for the teams and implementing them as

00:28:21,299 --> 00:28:25,620
features in the platform allowed for the

00:28:23,700 --> 00:28:28,230
software engineers to own all aspects of

00:28:25,620 --> 00:28:29,790
their services by themselves this is I

00:28:28,230 --> 00:28:32,370
guess called like an Indian service

00:28:29,790 --> 00:28:34,640
ownership model you know this this

00:28:32,370 --> 00:28:37,290
actually it was I didn't anticipate this

00:28:34,640 --> 00:28:39,809
but it also greatly increased our

00:28:37,290 --> 00:28:41,850
efficiency and our agility because these

00:28:39,809 --> 00:28:45,210
DevOps engineers were no longer like a

00:28:41,850 --> 00:28:46,320
bottleneck to launching a new team so

00:28:45,210 --> 00:28:48,059
yeah at Autodesk

00:28:46,320 --> 00:28:49,860
when I joined this this they kind of

00:28:48,059 --> 00:28:51,299
already anticipated this and they're

00:28:49,860 --> 00:28:52,650
actually kind of leading this as more of

00:28:51,299 --> 00:28:57,900
a managed thing that we're actually just

00:28:52,650 --> 00:28:58,890
driving towards as a program so yeah

00:28:57,900 --> 00:29:21,360
that's it does anybody have any

00:28:58,890 --> 00:29:24,799
questions so I'll talk about lookout so

00:29:21,360 --> 00:29:27,000
on the previous slide I go back to it

00:29:24,799 --> 00:29:28,530
and I actually removed the date

00:29:27,000 --> 00:29:29,900
specifically for this presentation I

00:29:28,530 --> 00:29:32,340
should probably should have kept them

00:29:29,900 --> 00:29:34,590
for the identifying the pilot team to

00:29:32,340 --> 00:29:36,090
the POC like this is where armory really

00:29:34,590 --> 00:29:37,590
helped us a lot right because we wanted

00:29:36,090 --> 00:29:39,330
to immediately get one service up and

00:29:37,590 --> 00:29:40,830
deployed they kind of came in and helped

00:29:39,330 --> 00:29:43,590
us do that I think with that that took

00:29:40,830 --> 00:29:45,630
us like three weeks to a month to get

00:29:43,590 --> 00:29:48,630
that set up and then beta was about

00:29:45,630 --> 00:29:50,850
another two months but there was a

00:29:48,630 --> 00:29:52,620
significant gap between beta and GA

00:29:50,850 --> 00:29:56,130
because what we actually had to do was

00:29:52,620 --> 00:29:58,049
you know we wanted this onboarding for

00:29:56,130 --> 00:30:00,299
service teams to be fully self-service

00:29:58,049 --> 00:30:02,340
so we spent a lot of time building some

00:30:00,299 --> 00:30:04,230
automation building onboarding guides

00:30:02,340 --> 00:30:06,330
right and stuff like that so between

00:30:04,230 --> 00:30:08,400
beta and GA I think there was about six

00:30:06,330 --> 00:30:11,790
months and we were always on boarding

00:30:08,400 --> 00:30:13,380
services in between beta and GA but yeah

00:30:11,790 --> 00:30:15,679
but it took us about six months to get

00:30:13,380 --> 00:30:19,490
to GA and then the on boarding process

00:30:15,679 --> 00:30:19,490
that took about a year and a half

00:30:22,030 --> 00:30:27,799
yeah so I I'm not a lookout anymore I'm

00:30:25,490 --> 00:30:29,150
at Autodesk we're in a very different

00:30:27,799 --> 00:30:31,490
place like we already had a really

00:30:29,150 --> 00:30:33,710
awesome platform called cloud OS that a

00:30:31,490 --> 00:30:35,750
lot of people run on now and we're just

00:30:33,710 --> 00:30:38,990
in the process of putting spinnaker into

00:30:35,750 --> 00:31:02,770
cloud OS so yeah we're much earlier in

00:30:38,990 --> 00:31:05,360
our spinnaker journey at Autodesk yep so

00:31:02,770 --> 00:31:06,799
yeah so the question is when I talked

00:31:05,360 --> 00:31:11,419
about shifting left the compliance

00:31:06,799 --> 00:31:13,130
controls so where we are with this right

00:31:11,419 --> 00:31:15,049
now is we've just had the conversation

00:31:13,130 --> 00:31:16,940
with compliance about it and they've

00:31:15,049 --> 00:31:18,350
they've greenlighter that we haven't

00:31:16,940 --> 00:31:19,789
started to implement it yet and actually

00:31:18,350 --> 00:31:21,200
Marc Webb is the one that's leading this

00:31:19,789 --> 00:31:25,010
effort I'm not actually leading this

00:31:21,200 --> 00:31:26,840
effort but you know the idea is that the

00:31:25,010 --> 00:31:29,210
control will be around the it we

00:31:26,840 --> 00:31:32,299
implemented in github itself right so

00:31:29,210 --> 00:31:35,049
certain certain users will be approved

00:31:32,299 --> 00:31:35,049
to be able to

00:32:07,950 --> 00:32:15,260
to go to the and have one of the proof

00:32:11,880 --> 00:32:15,260
in those in

00:32:34,130 --> 00:32:37,750
did that whole shift

00:32:48,260 --> 00:34:01,740
yeah yeah yeah relative to like

00:33:59,460 --> 00:34:04,500
spinnaker pipelines - we mark has been

00:34:01,740 --> 00:34:06,300
working on this a lot is I one of the to

00:34:04,500 --> 00:34:08,220
not lose that leverage or that

00:34:06,300 --> 00:34:09,929
compliance leverage like we really need

00:34:08,220 --> 00:34:12,000
people to be use the same pipeline right

00:34:09,929 --> 00:34:13,440
so we're trying to figure out how we can

00:34:12,000 --> 00:34:15,570
like standardize the pipeline it spit

00:34:13,440 --> 00:34:17,370
occur but also allow people certain

00:34:15,570 --> 00:34:18,690
extensibility that they need right

00:34:17,370 --> 00:34:21,080
within that within that template

00:34:18,690 --> 00:34:21,080
pipeline

00:34:33,429 --> 00:34:43,800
and so on

00:34:57,170 --> 00:35:05,240
yeah we did Cavan Springs approval boy

00:35:01,770 --> 00:35:07,260
and engineers were incredibly happy and

00:35:05,240 --> 00:35:11,099
happy I think they're going to do the

00:35:07,260 --> 00:35:13,859
for interesting things so yeah and boys

00:35:11,099 --> 00:35:17,510
is the final was the right with the

00:35:13,859 --> 00:35:17,510
right evidence in a trial

00:35:24,820 --> 00:35:30,849
awesome thank you

00:35:27,420 --> 00:35:30,849
[Applause]

00:35:35,320 --> 00:35:37,380

YouTube URL: https://www.youtube.com/watch?v=wP8heChPOc0


