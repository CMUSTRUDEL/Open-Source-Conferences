Title: Spinnaker Plugins by Example - Clay McCoy
Publication date: 2021-01-12
Playlist: Spinnaker Summit 2020
Description: 
	The extensibility team at Armory has been working on the Spinnaker plugin system for the last year. Most of the work has been driven by example plugins that serve as both documentation and a demonstration of capabilities. Clay explains how to write a plugin by walking the audience through several examples. He also gives an overview of the plugin system and explains the changes being made to Spinnaker in order to make plugins easier to write.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:05,839 --> 00:00:10,880
welcome to my talk at the 2020

00:00:08,800 --> 00:00:12,639
spinnaker summit this talk's titled

00:00:10,880 --> 00:00:15,599
spinnaker plugins

00:00:12,639 --> 00:00:16,880
by example i'm going to walk you through

00:00:15,599 --> 00:00:18,800
how to write plugins

00:00:16,880 --> 00:00:20,880
and show you a couple different example

00:00:18,800 --> 00:00:23,439
plugins

00:00:20,880 --> 00:00:26,160
this is a slide where i try to convince

00:00:23,439 --> 00:00:29,439
you that i'm an expert in my field

00:00:26,160 --> 00:00:32,079
and i'm a pretty cool guy up at the top

00:00:29,439 --> 00:00:33,520
left that's me with my family currently

00:00:32,079 --> 00:00:36,320
work at armory

00:00:33,520 --> 00:00:38,000
on the extensibility team and we've been

00:00:36,320 --> 00:00:41,040
doing a lot of work on plug-ins

00:00:38,000 --> 00:00:42,640
with people at netflix and i actually

00:00:41,040 --> 00:00:44,160
used to work at netflix

00:00:42,640 --> 00:00:46,000
back when spinnaker was just getting

00:00:44,160 --> 00:00:48,320
started and i even worked on the

00:00:46,000 --> 00:00:50,640
precursor to spinnaker asgard

00:00:48,320 --> 00:00:52,399
when i'm not spending time with a family

00:00:50,640 --> 00:00:55,840
or writing code

00:00:52,399 --> 00:00:58,800
you'll find me on a wakeboard or

00:00:55,840 --> 00:01:00,879
doing jiu jitsu in this talk we're going

00:00:58,800 --> 00:01:03,440
to go over where to find

00:01:00,879 --> 00:01:05,040
good examples of plugins we're going to

00:01:03,440 --> 00:01:07,520
look at three of them

00:01:05,040 --> 00:01:08,400
the first one is going to focus on

00:01:07,520 --> 00:01:11,280
extending with

00:01:08,400 --> 00:01:12,080
extension points the second one is going

00:01:11,280 --> 00:01:14,240
to talk about

00:01:12,080 --> 00:01:17,360
how to how to extend behavior and

00:01:14,240 --> 00:01:18,799
plug-ins using spring

00:01:17,360 --> 00:01:20,880
mainly for when you don't have extension

00:01:18,799 --> 00:01:24,159
points then we're going to

00:01:20,880 --> 00:01:25,280
show a cloud provider plug-in and

00:01:24,159 --> 00:01:27,520
we're going to talk about some of the

00:01:25,280 --> 00:01:30,000
improvements we're making

00:01:27,520 --> 00:01:31,920
to the spinnaker platform to allow more

00:01:30,000 --> 00:01:35,200
powerful plug-ins

00:01:31,920 --> 00:01:36,479
so this is a github organization we've

00:01:35,200 --> 00:01:38,560
got

00:01:36,479 --> 00:01:40,320
called spinnaker plug-in examples and

00:01:38,560 --> 00:01:41,920
we've got several

00:01:40,320 --> 00:01:43,600
i'm not sure how many we have now but

00:01:41,920 --> 00:01:44,079
it's uh it's more than the four that's

00:01:43,600 --> 00:01:45,840
just

00:01:44,079 --> 00:01:47,439
showing on the screen right here these

00:01:45,840 --> 00:01:50,079
are all public

00:01:47,439 --> 00:01:51,200
they're basically meant to be good

00:01:50,079 --> 00:01:53,600
examples

00:01:51,200 --> 00:01:54,560
that you could look at to start your own

00:01:53,600 --> 00:01:56,240
plug-in

00:01:54,560 --> 00:01:58,079
based on one of these that's similar to

00:01:56,240 --> 00:02:01,119
what you want to do and for us

00:01:58,079 --> 00:02:04,000
they also uh prove out that

00:02:01,119 --> 00:02:06,079
functionality in the plug-in platform

00:02:04,000 --> 00:02:08,640
works and continues to work

00:02:06,079 --> 00:02:09,840
so these are the three examples we're

00:02:08,640 --> 00:02:13,040
going to cover

00:02:09,840 --> 00:02:15,120
the first one is the stage plug-in this

00:02:13,040 --> 00:02:18,080
is an example we use a lot

00:02:15,120 --> 00:02:18,720
this adds a new pipeline stage like

00:02:18,080 --> 00:02:21,760
custom

00:02:18,720 --> 00:02:25,680
pipeline stage using extension points

00:02:21,760 --> 00:02:29,200
the second is just a uh

00:02:25,680 --> 00:02:32,239
example of using spring to

00:02:29,200 --> 00:02:33,360
build out a plug-in and uh doesn't do

00:02:32,239 --> 00:02:35,760
anything useful

00:02:33,360 --> 00:02:36,800
just shows off the spring plug-in

00:02:35,760 --> 00:02:39,599
capabilities

00:02:36,800 --> 00:02:40,800
and the last one also uses spring but to

00:02:39,599 --> 00:02:44,800
do something

00:02:40,800 --> 00:02:47,200
useful we implement a new cloud provider

00:02:44,800 --> 00:02:48,560
one for nomad specifically all right so

00:02:47,200 --> 00:02:51,360
here's our first

00:02:48,560 --> 00:02:52,400
plug-in example the stage plug-in so if

00:02:51,360 --> 00:02:55,599
we look at

00:02:52,400 --> 00:02:56,959
the overall project structure you'll see

00:02:55,599 --> 00:02:59,360
that there's uh

00:02:56,959 --> 00:03:00,720
it's a the all the backend projects are

00:02:59,360 --> 00:03:02,640
java based

00:03:00,720 --> 00:03:05,200
there's a gradle build that builds

00:03:02,640 --> 00:03:07,840
everything and there's sub projects

00:03:05,200 --> 00:03:09,599
in here you'll see the random weight

00:03:07,840 --> 00:03:12,480
deck and the random weight orca

00:03:09,599 --> 00:03:15,519
there and these plugins can target

00:03:12,480 --> 00:03:17,680
multiple services at the same time

00:03:15,519 --> 00:03:18,959
that's the parts that get deployed to

00:03:17,680 --> 00:03:21,200
those services

00:03:18,959 --> 00:03:22,159
we typically have a suffix on those sub

00:03:21,200 --> 00:03:24,239
modules

00:03:22,159 --> 00:03:26,000
that reflect the service that they're to

00:03:24,239 --> 00:03:28,640
be deployed to

00:03:26,000 --> 00:03:31,360
so this is just an overview of the

00:03:28,640 --> 00:03:33,920
specifics on the gradle build files

00:03:31,360 --> 00:03:35,760
that are noteworthy for plugins on the

00:03:33,920 --> 00:03:37,280
top this is the build gradle that's just

00:03:35,760 --> 00:03:41,040
got metadata

00:03:37,280 --> 00:03:43,920
about the plugin the id description

00:03:41,040 --> 00:03:44,799
version and we also have compatibility

00:03:43,920 --> 00:03:47,519
tests

00:03:44,799 --> 00:03:49,040
defined that run this plug-in against

00:03:47,519 --> 00:03:50,799
different versions of the spinnaker

00:03:49,040 --> 00:03:53,120
platform

00:03:50,799 --> 00:03:54,720
at the bottom you'll see the random

00:03:53,120 --> 00:03:57,439
weight orca gradle this

00:03:54,720 --> 00:03:59,280
is the gradle file that's that's under

00:03:57,439 --> 00:04:01,439
the orica sub module

00:03:59,280 --> 00:04:03,439
and here you can see how this plugin

00:04:01,439 --> 00:04:04,720
works specifically with orca

00:04:03,439 --> 00:04:06,799
and the dependencies that the orchid

00:04:04,720 --> 00:04:09,599
component uses

00:04:06,799 --> 00:04:11,200
i've also linked in the bottom left to a

00:04:09,599 --> 00:04:13,599
short video i've made

00:04:11,200 --> 00:04:14,239
previously that goes more into depth

00:04:13,599 --> 00:04:17,120
about

00:04:14,239 --> 00:04:18,560
how the gradle build works in our

00:04:17,120 --> 00:04:20,479
plug-in projects

00:04:18,560 --> 00:04:22,400
so you'll see something like this on all

00:04:20,479 --> 00:04:25,040
of our plug-in examples

00:04:22,400 --> 00:04:26,960
and this basically tells you uh the

00:04:25,040 --> 00:04:30,560
standard way of using

00:04:26,960 --> 00:04:32,479
plugins in a spinnaker project and

00:04:30,560 --> 00:04:35,199
we we give an example of the

00:04:32,479 --> 00:04:38,479
configuration for the specific plugin

00:04:35,199 --> 00:04:42,000
so that configuration is yaml it will go

00:04:38,479 --> 00:04:45,680
in the spinnaker service config and we

00:04:42,000 --> 00:04:48,960
just call out what plugins are used

00:04:45,680 --> 00:04:51,280
by id they're enabled and under that

00:04:48,960 --> 00:04:53,759
there's might be specific configuration

00:04:51,280 --> 00:04:56,400
for that particular plugin so this is

00:04:53,759 --> 00:04:58,720
the entry point for our plug-in project

00:04:56,400 --> 00:05:00,080
you extend plug-in and you get life

00:04:58,720 --> 00:05:03,360
cycle hooks

00:05:00,080 --> 00:05:05,840
for start and stop of the plugin

00:05:03,360 --> 00:05:06,960
here we're just logging that it starts

00:05:05,840 --> 00:05:09,600
and stops

00:05:06,960 --> 00:05:10,000
so in this plugin we have extensions

00:05:09,600 --> 00:05:13,199
where we

00:05:10,000 --> 00:05:13,759
implement new stages and tasks this

00:05:13,199 --> 00:05:17,039
shows

00:05:13,759 --> 00:05:17,919
our task extension so a few things to

00:05:17,039 --> 00:05:21,440
call out here

00:05:17,919 --> 00:05:23,680
our use of the extension annotation that

00:05:21,440 --> 00:05:25,120
lets us know that we're extending an

00:05:23,680 --> 00:05:26,960
extension point

00:05:25,120 --> 00:05:29,039
over on the right you can see that we're

00:05:26,960 --> 00:05:30,080
extending task which is an extension

00:05:29,039 --> 00:05:32,000
point

00:05:30,080 --> 00:05:34,400
we'll look at that in a second but it's

00:05:32,000 --> 00:05:38,080
basically just a java interface

00:05:34,400 --> 00:05:40,400
and then task has an execute method

00:05:38,080 --> 00:05:42,080
that we implement and that defines the

00:05:40,400 --> 00:05:44,160
behavior for this task

00:05:42,080 --> 00:05:45,520
you can see we're passing in the random

00:05:44,160 --> 00:05:47,440
weight config

00:05:45,520 --> 00:05:48,639
and that's actually coming from the

00:05:47,440 --> 00:05:50,720
configuration

00:05:48,639 --> 00:05:53,680
the custom configuration for this plugin

00:05:50,720 --> 00:05:55,840
that we were just looking at

00:05:53,680 --> 00:05:56,800
at the bottom you can see that random

00:05:55,840 --> 00:05:58,800
weight config

00:05:56,800 --> 00:06:00,880
and the default max wait time that we

00:05:58,800 --> 00:06:02,880
saw defined earlier

00:06:00,880 --> 00:06:05,039
and that's annotated with a plug-in

00:06:02,880 --> 00:06:07,039
configuration

00:06:05,039 --> 00:06:08,080
so what is task what are extension

00:06:07,039 --> 00:06:10,800
points

00:06:08,080 --> 00:06:11,440
well the extension points live in the

00:06:10,800 --> 00:06:14,800
api

00:06:11,440 --> 00:06:17,840
sub-modules of spinnaker services so

00:06:14,800 --> 00:06:21,120
you can see tasks coming from

00:06:17,840 --> 00:06:23,600
orca the orca api submodule

00:06:21,120 --> 00:06:25,199
extension points are basically just java

00:06:23,600 --> 00:06:28,000
interfaces

00:06:25,199 --> 00:06:29,199
they also have to extend spinnaker

00:06:28,000 --> 00:06:31,440
extension point

00:06:29,199 --> 00:06:32,560
you can see the task extension point

00:06:31,440 --> 00:06:34,639
defined

00:06:32,560 --> 00:06:36,000
in the bottom right plugins and

00:06:34,639 --> 00:06:39,360
extension points

00:06:36,000 --> 00:06:42,000
are concepts that come from pf4j

00:06:39,360 --> 00:06:42,880
and that's a library that powers our

00:06:42,000 --> 00:06:44,800
plugins

00:06:42,880 --> 00:06:46,639
it helps us do useful stuff that we

00:06:44,800 --> 00:06:49,039
would have had to write on our own

00:06:46,639 --> 00:06:49,919
for customizing behavior of an existing

00:06:49,039 --> 00:06:51,440
project

00:06:49,919 --> 00:06:53,280
one of the nice things that it does is

00:06:51,440 --> 00:06:56,160
give each plug-in their own

00:06:53,280 --> 00:06:56,880
separate class loader so these are some

00:06:56,160 --> 00:06:59,120
of the current

00:06:56,880 --> 00:06:59,919
extension points across the spinnaker

00:06:59,120 --> 00:07:02,639
projects

00:06:59,919 --> 00:07:03,919
these projects have api modules like the

00:07:02,639 --> 00:07:06,639
orca api

00:07:03,919 --> 00:07:08,639
module you saw before of course here

00:07:06,639 --> 00:07:10,720
we're talking about the task extension

00:07:08,639 --> 00:07:13,039
point in orca

00:07:10,720 --> 00:07:14,880
that example also has an implementation

00:07:13,039 --> 00:07:16,639
of stage definition builder

00:07:14,880 --> 00:07:18,720
and we're adding more extension points

00:07:16,639 --> 00:07:20,000
all the time so what if there's not an

00:07:18,720 --> 00:07:21,360
extension point

00:07:20,000 --> 00:07:23,440
for the behavior you want to add to

00:07:21,360 --> 00:07:25,759
spinnaker well

00:07:23,440 --> 00:07:26,720
there's a couple of options you can make

00:07:25,759 --> 00:07:27,919
one

00:07:26,720 --> 00:07:30,000
now that you've kind of seen how it

00:07:27,919 --> 00:07:33,360
works and contribute

00:07:30,000 --> 00:07:35,440
back to the spinnaker services or

00:07:33,360 --> 00:07:36,560
you can use spring to extend just about

00:07:35,440 --> 00:07:39,039
anything you want

00:07:36,560 --> 00:07:41,919
so here's our second example the spring

00:07:39,039 --> 00:07:41,919
example plugin

00:07:42,240 --> 00:07:45,919
over on the right i list a lot of spring

00:07:45,360 --> 00:07:48,639
things

00:07:45,919 --> 00:07:49,360
that this example tests out but it's

00:07:48,639 --> 00:07:51,360
basically

00:07:49,360 --> 00:07:53,599
if you're familiar with spring using a

00:07:51,360 --> 00:07:56,720
lot of the spring annotations

00:07:53,599 --> 00:07:59,919
to wire everything together we're going

00:07:56,720 --> 00:08:04,319
to look at several of these in detail

00:07:59,919 --> 00:08:06,080
so it all starts here this is similar

00:08:04,319 --> 00:08:08,319
to the entry point for plugins that you

00:08:06,080 --> 00:08:11,520
saw earlier but instead of

00:08:08,319 --> 00:08:12,800
extending plug-in we extend spring

00:08:11,520 --> 00:08:14,639
loader plug-in

00:08:12,800 --> 00:08:17,680
we have the same start and stop life

00:08:14,639 --> 00:08:20,479
cycle hooks but we also have this

00:08:17,680 --> 00:08:21,280
get packages to scan method that we can

00:08:20,479 --> 00:08:24,000
override

00:08:21,280 --> 00:08:24,639
and we give it a list of packages and

00:08:24,000 --> 00:08:26,720
it's going to

00:08:24,639 --> 00:08:28,319
scan those packages for spring

00:08:26,720 --> 00:08:29,759
components

00:08:28,319 --> 00:08:32,159
so properties are done a little

00:08:29,759 --> 00:08:34,240
differently as well

00:08:32,159 --> 00:08:35,440
configuration properties is a spring

00:08:34,240 --> 00:08:37,760
annotation

00:08:35,440 --> 00:08:38,880
that we're making use of here and the

00:08:37,760 --> 00:08:41,120
properties can be

00:08:38,880 --> 00:08:42,640
anywhere you want them to be in the

00:08:41,120 --> 00:08:44,640
config yammel

00:08:42,640 --> 00:08:46,240
here you can see that we're pulling new

00:08:44,640 --> 00:08:48,959
properties from the root

00:08:46,240 --> 00:08:51,440
component is a spring annotation that

00:08:48,959 --> 00:08:53,680
will load this class as a beam

00:08:51,440 --> 00:08:55,279
this is a good time to mention that for

00:08:53,680 --> 00:08:58,320
spring plugins

00:08:55,279 --> 00:08:59,279
plugins have their own isolated spring

00:08:58,320 --> 00:09:00,720
context

00:08:59,279 --> 00:09:02,880
you can see in the constructor that

00:09:00,720 --> 00:09:05,920
we're auto wiring two beams

00:09:02,880 --> 00:09:08,880
the first one is a beam that comes from

00:09:05,920 --> 00:09:11,839
the orca service the second one

00:09:08,880 --> 00:09:13,839
is our properties from our plugin that

00:09:11,839 --> 00:09:16,160
we were just talking about

00:09:13,839 --> 00:09:17,920
configuration is a spring annotation

00:09:16,160 --> 00:09:19,760
that a lot of people are familiar with

00:09:17,920 --> 00:09:21,440
this allows you to set up a lot of your

00:09:19,760 --> 00:09:24,560
spring components

00:09:21,440 --> 00:09:25,760
beans a very basic spring annotation

00:09:24,560 --> 00:09:27,279
that defines

00:09:25,760 --> 00:09:29,279
what returning from this method as a

00:09:27,279 --> 00:09:32,480
bean we're using

00:09:29,279 --> 00:09:35,360
primary here because it makes this

00:09:32,480 --> 00:09:38,240
bean take precedence over other beans

00:09:35,360 --> 00:09:41,279
that are of the same type

00:09:38,240 --> 00:09:42,080
exposed to app is not a spring

00:09:41,279 --> 00:09:44,720
annotation

00:09:42,080 --> 00:09:46,240
like the rest of these it's our own

00:09:44,720 --> 00:09:48,880
plug-in annotation

00:09:46,240 --> 00:09:50,320
and what it does is elevate this being

00:09:48,880 --> 00:09:53,040
out of the plugins

00:09:50,320 --> 00:09:53,680
spring context like we mentioned before

00:09:53,040 --> 00:09:56,720
up to

00:09:53,680 --> 00:09:59,839
the spinnaker service print context

00:09:56,720 --> 00:10:02,839
so it puts it in play with other beans

00:09:59,839 --> 00:10:05,360
in the service that's useful in this

00:10:02,839 --> 00:10:05,760
case because we're making a bean that's

00:10:05,360 --> 00:10:08,959
going to

00:10:05,760 --> 00:10:11,680
override a spring bean

00:10:08,959 --> 00:10:12,480
from the orca service we're replacing an

00:10:11,680 --> 00:10:15,200
existing

00:10:12,480 --> 00:10:16,959
spring bean in the orchard service look

00:10:15,200 --> 00:10:19,519
at that next

00:10:16,959 --> 00:10:20,959
so this is our override service and we

00:10:19,519 --> 00:10:22,880
don't have component or any other

00:10:20,959 --> 00:10:25,040
annotations on this class

00:10:22,880 --> 00:10:26,880
because it gets brought in through that

00:10:25,040 --> 00:10:29,360
configuration we were just looking at

00:10:26,880 --> 00:10:32,399
and this is going to take place of the

00:10:29,360 --> 00:10:33,760
capabilities service being that's a part

00:10:32,399 --> 00:10:36,240
of orca by default

00:10:33,760 --> 00:10:37,519
it's going to replace its functionality

00:10:36,240 --> 00:10:39,360
with custom behavior

00:10:37,519 --> 00:10:40,720
rest controller is another widely used

00:10:39,360 --> 00:10:44,320
spring annotation

00:10:40,720 --> 00:10:46,640
for adding in points to your application

00:10:44,320 --> 00:10:47,920
you can see our new service is auto

00:10:46,640 --> 00:10:50,320
wired in

00:10:47,920 --> 00:10:52,720
and we're adding three endpoints to

00:10:50,320 --> 00:10:55,920
delegate down to the new service

00:10:52,720 --> 00:10:56,959
spring plugins are handy if the behavior

00:10:55,920 --> 00:10:59,360
that you want to add

00:10:56,959 --> 00:11:00,079
doesn't have a related extension point

00:10:59,360 --> 00:11:02,880
yet

00:11:00,079 --> 00:11:04,800
ideally when writing a spring plugin

00:11:02,880 --> 00:11:05,600
you'll take note of extension points

00:11:04,800 --> 00:11:08,640
that you wish

00:11:05,600 --> 00:11:09,920
existed that you would have used those

00:11:08,640 --> 00:11:12,560
extension points will get

00:11:09,920 --> 00:11:14,000
contributed back to the platform and the

00:11:12,560 --> 00:11:16,000
plugin will eventually

00:11:14,000 --> 00:11:18,959
move over to those and no longer need

00:11:16,000 --> 00:11:23,120
spring before we talk about the final

00:11:18,959 --> 00:11:25,760
example let's talk about cloud providers

00:11:23,120 --> 00:11:28,640
so what we mean by cloud provider is a

00:11:25,760 --> 00:11:33,360
system for provisioning infrastructure

00:11:28,640 --> 00:11:35,440
like aws or kubernetes or google's cloud

00:11:33,360 --> 00:11:36,640
you can see in the cloud driver project

00:11:35,440 --> 00:11:39,440
a lot of these live

00:11:36,640 --> 00:11:41,440
as sub modules in cloud driver having

00:11:39,440 --> 00:11:44,160
these cloud provider implementations

00:11:41,440 --> 00:11:46,640
is what makes spinnaker multi-cloud in

00:11:44,160 --> 00:11:48,800
our third plug-in example

00:11:46,640 --> 00:11:51,440
we're going to see a plug-in that

00:11:48,800 --> 00:11:53,600
implements a cloud provider

00:11:51,440 --> 00:11:55,360
the advantages of this are that the

00:11:53,600 --> 00:11:55,839
plug-in doesn't have to be contributed

00:11:55,360 --> 00:11:58,480
back

00:11:55,839 --> 00:12:00,560
into cloud driver and can be maintained

00:11:58,480 --> 00:12:02,079
and released on its own life cycle

00:12:00,560 --> 00:12:04,160
the new cloud provider that we're going

00:12:02,079 --> 00:12:07,680
to implement is nomad

00:12:04,160 --> 00:12:11,200
nomads a nice focused cloud provider

00:12:07,680 --> 00:12:13,839
from hashicorp one of its main concepts

00:12:11,200 --> 00:12:15,360
is a job that's a specification for what

00:12:13,839 --> 00:12:18,079
you want to run

00:12:15,360 --> 00:12:19,680
here's the nomad cloud provider plug-in

00:12:18,079 --> 00:12:21,760
let's take a look

00:12:19,680 --> 00:12:24,399
so this is much like the spring example

00:12:21,760 --> 00:12:26,160
plug-in we were just looking at it uses

00:12:24,399 --> 00:12:29,120
spring loader plug-in

00:12:26,160 --> 00:12:30,800
scans our packages and let's go look at

00:12:29,120 --> 00:12:33,519
what it will find

00:12:30,800 --> 00:12:36,399
the configuration works the same with

00:12:33,519 --> 00:12:38,800
spring configuration properties

00:12:36,399 --> 00:12:40,000
and you can see at the root level of our

00:12:38,800 --> 00:12:42,240
config

00:12:40,000 --> 00:12:43,760
mainly what we're defining here is

00:12:42,240 --> 00:12:47,120
information about the no band

00:12:43,760 --> 00:12:48,639
environment in this case i'm running

00:12:47,120 --> 00:12:50,560
nomad locally

00:12:48,639 --> 00:12:52,320
and i have it configured for that the

00:12:50,560 --> 00:12:53,519
cloud provider interface and cloud

00:12:52,320 --> 00:12:55,680
driver

00:12:53,519 --> 00:12:57,519
is the main entry point for defining a

00:12:55,680 --> 00:12:59,120
new cloud provider

00:12:57,519 --> 00:13:02,000
you implement this to provide the

00:12:59,120 --> 00:13:04,959
metadata about your cloud provider

00:13:02,000 --> 00:13:06,480
and this includes an annotation that

00:13:04,959 --> 00:13:09,360
we're going to use to annotate

00:13:06,480 --> 00:13:10,959
all of our operations and it provides

00:13:09,360 --> 00:13:13,200
the caching agents

00:13:10,959 --> 00:13:14,320
we'll talk more about these in a moment

00:13:13,200 --> 00:13:16,880
account credentials

00:13:14,320 --> 00:13:18,480
is a cloud driver interface that allows

00:13:16,880 --> 00:13:21,440
us to authenticate

00:13:18,480 --> 00:13:23,680
with the cloud provider ultimately you

00:13:21,440 --> 00:13:25,440
use these to get some kind of client

00:13:23,680 --> 00:13:27,360
whatever you need to interact with that

00:13:25,440 --> 00:13:29,760
cloud provider's infrastructure

00:13:27,360 --> 00:13:31,200
and manage the infrastructure there in

00:13:29,760 --> 00:13:34,079
this case we're supplying

00:13:31,200 --> 00:13:34,959
a nomad api configuration which comes

00:13:34,079 --> 00:13:37,600
from the nomad

00:13:34,959 --> 00:13:39,440
java sdk and this is what we use to get

00:13:37,600 --> 00:13:42,800
access to nomad

00:13:39,440 --> 00:13:44,959
you put all of your credentials

00:13:42,800 --> 00:13:47,279
for all cloud providers in an account

00:13:44,959 --> 00:13:50,560
credentials repository

00:13:47,279 --> 00:13:53,360
so this component reads the credentials

00:13:50,560 --> 00:13:54,000
in from our properties and populates the

00:13:53,360 --> 00:13:56,399
passed in

00:13:54,000 --> 00:13:58,079
account credentials repository so the

00:13:56,399 --> 00:14:00,480
way we make modifications to

00:13:58,079 --> 00:14:04,240
infrastructure in cloud driver is with

00:14:00,480 --> 00:14:07,360
atomic operations this starts

00:14:04,240 --> 00:14:09,279
with an atomic operation converter so

00:14:07,360 --> 00:14:10,480
first you'll notice that we use the

00:14:09,279 --> 00:14:13,600
nomad operation

00:14:10,480 --> 00:14:15,199
annotation that we saw earlier that we

00:14:13,600 --> 00:14:19,120
stick on all of our

00:14:15,199 --> 00:14:19,920
nomad operations we also use expose to

00:14:19,120 --> 00:14:22,480
app here

00:14:19,920 --> 00:14:24,160
to elevate this up to cloud driver

00:14:22,480 --> 00:14:26,399
spring context

00:14:24,160 --> 00:14:28,959
so that this gets pulled in with all the

00:14:26,399 --> 00:14:31,600
other atomic operation converters

00:14:28,959 --> 00:14:32,399
when cloud driver gets a message to

00:14:31,600 --> 00:14:35,440
execute

00:14:32,399 --> 00:14:36,560
a specific atomic operation on some

00:14:35,440 --> 00:14:38,959
input

00:14:36,560 --> 00:14:40,079
it will look up this converter and use

00:14:38,959 --> 00:14:42,880
it as a factory

00:14:40,079 --> 00:14:45,519
to create the description and the actual

00:14:42,880 --> 00:14:48,000
atomic operation that will be executed

00:14:45,519 --> 00:14:49,680
a description validator is optional

00:14:48,000 --> 00:14:51,040
first let's talk about descriptions this

00:14:49,680 --> 00:14:54,639
is just a basic

00:14:51,040 --> 00:14:57,760
java class that lays out the values

00:14:54,639 --> 00:14:59,120
used in a particular execution of an

00:14:57,760 --> 00:15:01,600
atomic operation

00:14:59,120 --> 00:15:04,639
right here we're just registering a new

00:15:01,600 --> 00:15:06,399
nomad job so we pass them the job

00:15:04,639 --> 00:15:08,800
and we'll also need the credentials to

00:15:06,399 --> 00:15:10,160
accomplish that beneath that you can see

00:15:08,800 --> 00:15:12,240
our validator

00:15:10,160 --> 00:15:13,839
the implementation of this simply make

00:15:12,240 --> 00:15:16,880
sure that a job id

00:15:13,839 --> 00:15:19,760
exists finally here's our actual

00:15:16,880 --> 00:15:21,360
atomic operation implementation so you

00:15:19,760 --> 00:15:23,279
can see we implement cloud driver's

00:15:21,360 --> 00:15:25,760
atomic operation

00:15:23,279 --> 00:15:26,800
in the operate method we supply the

00:15:25,760 --> 00:15:31,040
logic

00:15:26,800 --> 00:15:33,680
to execute this specific operation

00:15:31,040 --> 00:15:34,720
upsetting a nomad job with the inputs

00:15:33,680 --> 00:15:37,360
that came in

00:15:34,720 --> 00:15:39,440
in a description the first line of the

00:15:37,360 --> 00:15:42,720
over and operate method

00:15:39,440 --> 00:15:43,600
has the magic here for registering a new

00:15:42,720 --> 00:15:46,800
job

00:15:43,600 --> 00:15:48,079
using the nomad api client so that's how

00:15:46,800 --> 00:15:50,800
we mutate

00:15:48,079 --> 00:15:51,519
cloud infrastructure but we also need to

00:15:50,800 --> 00:15:54,399
read

00:15:51,519 --> 00:15:56,880
this data in and caching agents are the

00:15:54,399 --> 00:15:59,279
way that you do that in cloud driver

00:15:56,880 --> 00:16:00,000
so you'll notice at the top that we

00:15:59,279 --> 00:16:02,399
implement

00:16:00,000 --> 00:16:03,920
caching agent and on-demand agent these

00:16:02,399 --> 00:16:05,519
don't have to be done in the same class

00:16:03,920 --> 00:16:09,279
but it's often done this way

00:16:05,519 --> 00:16:11,680
the caching agent allows you to pull

00:16:09,279 --> 00:16:14,800
on a schedule the day that that you're

00:16:11,680 --> 00:16:18,240
interested in from the cloud provider

00:16:14,800 --> 00:16:20,839
an on-demand agent will let you

00:16:18,240 --> 00:16:22,160
force refresh specific data in certain

00:16:20,839 --> 00:16:24,639
circumstances

00:16:22,160 --> 00:16:27,040
a lot of times caching agents have a lot

00:16:24,639 --> 00:16:30,720
of similar behavior

00:16:27,040 --> 00:16:32,880
given a certain cloud provider

00:16:30,720 --> 00:16:34,320
so it's common to have an abstract

00:16:32,880 --> 00:16:37,040
version of this

00:16:34,320 --> 00:16:38,000
that's implemented across a cloud

00:16:37,040 --> 00:16:40,399
provider

00:16:38,000 --> 00:16:42,320
and we're about to look at the jobs

00:16:40,399 --> 00:16:43,040
caching agent specifically in the next

00:16:42,320 --> 00:16:46,480
slide

00:16:43,040 --> 00:16:48,959
so this jobs caching agent extends

00:16:46,480 --> 00:16:50,079
the abstract nomad caching agent that we

00:16:48,959 --> 00:16:52,320
just saw

00:16:50,079 --> 00:16:54,320
and all that's really left for it to do

00:16:52,320 --> 00:16:58,399
is make the specific call

00:16:54,320 --> 00:17:00,240
to the nomad client to list the jobs

00:16:58,399 --> 00:17:01,920
so now that we can read and write

00:17:00,240 --> 00:17:06,240
infrastructure data

00:17:01,920 --> 00:17:09,360
the next thing to do is map this data

00:17:06,240 --> 00:17:12,079
from the cloud provider specifics

00:17:09,360 --> 00:17:12,959
to spinnaker concepts like clusters

00:17:12,079 --> 00:17:15,760
server groups

00:17:12,959 --> 00:17:16,720
instances that's what providers do for

00:17:15,760 --> 00:17:19,360
us

00:17:16,720 --> 00:17:20,079
so here in cloud driver core we've

00:17:19,360 --> 00:17:22,799
highlighted

00:17:20,079 --> 00:17:23,600
all the providers any given cloud

00:17:22,799 --> 00:17:26,000
provider

00:17:23,600 --> 00:17:27,600
is not likely to implement all of these

00:17:26,000 --> 00:17:28,960
but just a subset

00:17:27,600 --> 00:17:31,360
that are relevant for that cloud

00:17:28,960 --> 00:17:33,679
provider there is a general purpose

00:17:31,360 --> 00:17:35,440
job provider already and we're going to

00:17:33,679 --> 00:17:38,720
implement that

00:17:35,440 --> 00:17:40,160
so this nomad job provider implements

00:17:38,720 --> 00:17:43,280
cloud drivers

00:17:40,160 --> 00:17:44,799
job provider and it surfaces the nomad

00:17:43,280 --> 00:17:46,880
job data

00:17:44,799 --> 00:17:48,880
that we just got from the cache these

00:17:46,880 --> 00:17:52,720
providers are ultimately used

00:17:48,880 --> 00:17:55,120
by controllers in cloud driver

00:17:52,720 --> 00:17:56,960
to surface cloud provider data in a

00:17:55,120 --> 00:18:00,320
consistent way

00:17:56,960 --> 00:18:04,799
implementing this maps the nomad

00:18:00,320 --> 00:18:08,799
job to the spinnaker concept of a job

00:18:04,799 --> 00:18:11,120
so here's an overview of cloud drivers

00:18:08,799 --> 00:18:12,960
cloud provider related interfaces that

00:18:11,120 --> 00:18:14,880
we were just talking about

00:18:12,960 --> 00:18:16,240
the entry point to register our new

00:18:14,880 --> 00:18:20,240
clout provider

00:18:16,240 --> 00:18:21,679
is cloud provider you can see we use the

00:18:20,240 --> 00:18:23,520
account credentials and the account

00:18:21,679 --> 00:18:26,480
credential repositories

00:18:23,520 --> 00:18:28,799
to provide an authenticated client for

00:18:26,480 --> 00:18:32,240
mutating the infrastructure

00:18:28,799 --> 00:18:33,360
we used operations for reading in the

00:18:32,240 --> 00:18:36,559
data

00:18:33,360 --> 00:18:38,240
we used the caching agents and we mapped

00:18:36,559 --> 00:18:39,440
the cloud provider specifics to

00:18:38,240 --> 00:18:42,559
spinnaker concepts

00:18:39,440 --> 00:18:44,160
with the provider interfaces so it's

00:18:42,559 --> 00:18:45,840
worth pointing out some best practices

00:18:44,160 --> 00:18:49,120
at this point

00:18:45,840 --> 00:18:52,559
if an extension point exists use that

00:18:49,120 --> 00:18:55,120
these are contracts that are meant to be

00:18:52,559 --> 00:18:56,160
stable and backwards compatible going

00:18:55,120 --> 00:18:57,919
forward

00:18:56,160 --> 00:18:59,360
if there's not an extension point for

00:18:57,919 --> 00:19:01,760
what you want to do

00:18:59,360 --> 00:19:02,640
you can extend the component with spring

00:19:01,760 --> 00:19:04,320
ideally

00:19:02,640 --> 00:19:06,559
you'd find something in the api

00:19:04,320 --> 00:19:08,480
submodule these are candidates for

00:19:06,559 --> 00:19:11,200
future extension points

00:19:08,480 --> 00:19:12,240
it's possible to use something from a

00:19:11,200 --> 00:19:14,559
sub module

00:19:12,240 --> 00:19:15,919
if what you need isn't in the api

00:19:14,559 --> 00:19:17,200
submodule yet

00:19:15,919 --> 00:19:19,120
but bear in mind that these are

00:19:17,200 --> 00:19:22,000
implementation details and could

00:19:19,120 --> 00:19:24,720
change and that would require you to

00:19:22,000 --> 00:19:25,919
update your plugin so we're currently

00:19:24,720 --> 00:19:28,400
moving

00:19:25,919 --> 00:19:29,600
useful classes interface over to the api

00:19:28,400 --> 00:19:31,440
modules

00:19:29,600 --> 00:19:33,120
once we get a good abstraction in place

00:19:31,440 --> 00:19:33,840
these will get turned into extension

00:19:33,120 --> 00:19:35,679
points

00:19:33,840 --> 00:19:36,880
there's a lot of nice abstractions that

00:19:35,679 --> 00:19:39,039
already exist

00:19:36,880 --> 00:19:39,919
in the spinnaker services we just looked

00:19:39,039 --> 00:19:42,720
at several

00:19:39,919 --> 00:19:43,360
in cloud driver around cloud providers

00:19:42,720 --> 00:19:45,600
most of

00:19:43,360 --> 00:19:46,640
what you just saw are now in cloud drive

00:19:45,600 --> 00:19:48,400
for api

00:19:46,640 --> 00:19:51,039
but not everything at the moment

00:19:48,400 --> 00:19:53,600
providers are still in cloud driver core

00:19:51,039 --> 00:19:55,039
so why not just move everything over to

00:19:53,600 --> 00:19:57,360
the api projects

00:19:55,039 --> 00:19:59,440
well it's not that simple we want to put

00:19:57,360 --> 00:20:00,799
really nice well thought out contracts

00:19:59,440 --> 00:20:04,159
in the api module

00:20:00,799 --> 00:20:05,039
and the api module is basically a

00:20:04,159 --> 00:20:07,280
library

00:20:05,039 --> 00:20:09,600
so we want to have as few external

00:20:07,280 --> 00:20:11,039
dependencies as we can there

00:20:09,600 --> 00:20:13,120
so if you want to add something new

00:20:11,039 --> 00:20:15,760
there or take an existing

00:20:13,120 --> 00:20:17,679
interface and move it over there's some

00:20:15,760 --> 00:20:20,240
things you need to do first

00:20:17,679 --> 00:20:22,159
first it needs to be java so you may

00:20:20,240 --> 00:20:22,960
have to rewrite something that's already

00:20:22,159 --> 00:20:25,760
in groovy

00:20:22,960 --> 00:20:26,320
we annotate it with alpha if it's brand

00:20:25,760 --> 00:20:29,120
new

00:20:26,320 --> 00:20:29,440
beta or no annotation would reflect that

00:20:29,120 --> 00:20:31,440
it's

00:20:29,440 --> 00:20:32,720
more mature and it needs to have good

00:20:31,440 --> 00:20:35,360
documentation since

00:20:32,720 --> 00:20:36,960
an api so we need to put javadoc on

00:20:35,360 --> 00:20:40,720
interfaces and contracts

00:20:36,960 --> 00:20:43,280
existing code may not have it yet

00:20:40,720 --> 00:20:44,880
now we're going to look at adding ui to

00:20:43,280 --> 00:20:47,840
our plugin

00:20:44,880 --> 00:20:49,600
spinnaker's ui project is called deck

00:20:47,840 --> 00:20:52,480
our plugin has a nomad

00:20:49,600 --> 00:20:53,520
deck module to add a nomad ui to

00:20:52,480 --> 00:20:56,159
spinnaker

00:20:53,520 --> 00:20:57,760
the way that you extend the ui in deck

00:20:56,159 --> 00:20:58,240
is a little different than what we've

00:20:57,760 --> 00:21:00,559
seen

00:20:58,240 --> 00:21:01,679
with extending back in java based

00:21:00,559 --> 00:21:03,200
services

00:21:01,679 --> 00:21:06,080
it's a totally different technology

00:21:03,200 --> 00:21:06,799
stack you can see our typescript code

00:21:06,080 --> 00:21:10,240
here

00:21:06,799 --> 00:21:11,679
dec has several registries you could

00:21:10,240 --> 00:21:13,039
kind of think of these

00:21:11,679 --> 00:21:15,120
in the same way that you'd think of

00:21:13,039 --> 00:21:17,520
extension points on the back end

00:21:15,120 --> 00:21:20,320
each type of registry has its own

00:21:17,520 --> 00:21:22,559
contract for extension

00:21:20,320 --> 00:21:23,760
in this case we're using the cloud

00:21:22,559 --> 00:21:26,400
provider registry

00:21:23,760 --> 00:21:28,799
to add the new ui for the nomad cloud

00:21:26,400 --> 00:21:28,799
provider

00:21:29,200 --> 00:21:32,880
i'm going to call out a few things that

00:21:31,440 --> 00:21:36,080
are specified

00:21:32,880 --> 00:21:39,280
in our cloud provider registry for nomad

00:21:36,080 --> 00:21:42,880
this nomad server group details getter

00:21:39,280 --> 00:21:43,360
is the way that we get our nomad server

00:21:42,880 --> 00:21:45,840
group

00:21:43,360 --> 00:21:46,880
data from the backend code that we were

00:21:45,840 --> 00:21:49,200
just looking at

00:21:46,880 --> 00:21:50,480
the server group information section

00:21:49,200 --> 00:21:52,880
uses react

00:21:50,480 --> 00:21:53,840
to render the nomad data that came from

00:21:52,880 --> 00:21:56,080
the backend

00:21:53,840 --> 00:21:58,480
with all that you end up with this on

00:21:56,080 --> 00:22:00,480
the left you can see the nomad ui

00:21:58,480 --> 00:22:02,480
on the right you can see the spinnaker

00:22:00,480 --> 00:22:04,480
ui with our nomad plugin

00:22:02,480 --> 00:22:05,600
that's reading the same nomad

00:22:04,480 --> 00:22:08,799
infrastructure

00:22:05,600 --> 00:22:10,840
lastly these are the links to the open

00:22:08,799 --> 00:22:13,440
source plugin examples that we just

00:22:10,840 --> 00:22:15,679
covered i've given an overview of what

00:22:13,440 --> 00:22:16,080
these projects do but feel free to look

00:22:15,679 --> 00:22:24,240
at them

00:22:16,080 --> 00:22:24,240

YouTube URL: https://www.youtube.com/watch?v=LBLRB9kG94g


