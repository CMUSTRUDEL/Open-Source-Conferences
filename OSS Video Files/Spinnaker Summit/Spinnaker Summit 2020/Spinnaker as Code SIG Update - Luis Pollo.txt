Title: Spinnaker as Code SIG Update - Luis Pollo
Publication date: 2021-01-17
Playlist: Spinnaker Summit 2020
Description: 
	Hear an update on the Spinnaker-As-Code SIG from Netflix's Luis Pollo, from the 2020 Summit.
Captions: 
	00:00:01,280 --> 00:00:06,399
hi everyone my name is luis polo

00:00:03,840 --> 00:00:08,480
and i'm a software engineer at netflix

00:00:06,399 --> 00:00:11,759
i'm also currently the sig lead

00:00:08,480 --> 00:00:12,639
for the spinnaker s code sig and i just

00:00:11,759 --> 00:00:15,280
wanted to give you

00:00:12,639 --> 00:00:18,320
a quick update about what happened in

00:00:15,280 --> 00:00:23,520
the sig in 2020 and what our plans are

00:00:18,320 --> 00:00:23,520
for uh 2021. so let's take a quick look

00:00:23,840 --> 00:00:28,400
the main highlights of 2020 were first

00:00:27,039 --> 00:00:30,960
that we really

00:00:28,400 --> 00:00:33,600
had a focus shift to manage delivery

00:00:30,960 --> 00:00:36,800
while in the past we had spent some time

00:00:33,600 --> 00:00:39,200
investigating and uh improving

00:00:36,800 --> 00:00:41,760
managed pipeline templates netflix is

00:00:39,200 --> 00:00:44,239
really heavily invested at the moment

00:00:41,760 --> 00:00:46,320
into making managed delivery the primary

00:00:44,239 --> 00:00:49,600
path forward for managed

00:00:46,320 --> 00:00:50,239
delivery solutions and uh delivery as

00:00:49,600 --> 00:00:52,879
code

00:00:50,239 --> 00:00:53,520
and so we spent the majority of 2020

00:00:52,879 --> 00:00:56,160
focused

00:00:53,520 --> 00:00:58,000
on managed delivery in the sig as well

00:00:56,160 --> 00:01:00,399
there's a bunch of really cool

00:00:58,000 --> 00:01:02,079
and new features that were added into

00:01:00,399 --> 00:01:05,040
managed delivery throughout the year

00:01:02,079 --> 00:01:06,880
also lots of uh robustness improvements

00:01:05,040 --> 00:01:08,960
and usability improvements

00:01:06,880 --> 00:01:10,720
and i'll cover some of them uh in the

00:01:08,960 --> 00:01:13,119
upcoming slides but they're also listed

00:01:10,720 --> 00:01:14,799
on this one right here for reference

00:01:13,119 --> 00:01:17,520
the second thing that happened this year

00:01:14,799 --> 00:01:19,680
that was really really interesting was

00:01:17,520 --> 00:01:21,680
this collaboration between aws and

00:01:19,680 --> 00:01:23,680
netflix on this

00:01:21,680 --> 00:01:24,720
manage delivery plugin for kubernetes

00:01:23,680 --> 00:01:26,479
deployments

00:01:24,720 --> 00:01:28,560
and we actually had a talk this year as

00:01:26,479 --> 00:01:30,240
well at the spinnaker summit

00:01:28,560 --> 00:01:32,320
on this topic so i encourage you to

00:01:30,240 --> 00:01:33,439
check it out uh

00:01:32,320 --> 00:01:35,520
it's called manage delivery for

00:01:33,439 --> 00:01:38,000
kubernetes a collaboration story so if

00:01:35,520 --> 00:01:40,000
you head on over to the main spinnaker

00:01:38,000 --> 00:01:42,240
summit website i'm sure you'll find it

00:01:40,000 --> 00:01:43,600
there

00:01:42,240 --> 00:01:46,799
so let's take a look at the current

00:01:43,600 --> 00:01:46,799
state of managed delivery

00:01:47,119 --> 00:01:50,799
here's the brand new environments view

00:01:49,040 --> 00:01:52,560
here you can get an overview of all of

00:01:50,799 --> 00:01:54,479
your environments and artifact versions

00:01:52,560 --> 00:01:56,000
at a glance

00:01:54,479 --> 00:01:58,159
you can drill down into a specific

00:01:56,000 --> 00:02:00,079
artifact version by clicking on it

00:01:58,159 --> 00:02:01,680
when you do you can see exactly the

00:02:00,079 --> 00:02:03,600
state that version was in

00:02:01,680 --> 00:02:05,119
in the various environments for example

00:02:03,600 --> 00:02:07,520
here you can see keel itself

00:02:05,119 --> 00:02:08,239
managed by managed delivery yep we dog

00:02:07,520 --> 00:02:09,920
food

00:02:08,239 --> 00:02:12,080
and that the latest version that's at

00:02:09,920 --> 00:02:13,520
the top there is currently deployed in

00:02:12,080 --> 00:02:16,160
all three of our environments

00:02:13,520 --> 00:02:17,440
tests pre-staging and main we also have

00:02:16,160 --> 00:02:18,560
integration with the source control

00:02:17,440 --> 00:02:20,480
system so you can see

00:02:18,560 --> 00:02:22,720
details about the commit associated with

00:02:20,480 --> 00:02:23,360
artifacts on the top right hand corner

00:02:22,720 --> 00:02:24,959
there

00:02:23,360 --> 00:02:26,560
this is the first for spinnaker and it

00:02:24,959 --> 00:02:29,360
gives you great visibility we're really

00:02:26,560 --> 00:02:29,360
excited about this

00:02:29,599 --> 00:02:33,280
next i wanted to show you how a manual

00:02:31,680 --> 00:02:36,400
promotion artifact flow

00:02:33,280 --> 00:02:38,160
looks like as you can see in the ui

00:02:36,400 --> 00:02:40,160
here i specified a manual judgment

00:02:38,160 --> 00:02:42,080
constraint on the staging environment so

00:02:40,160 --> 00:02:43,680
the artifact will not be deployed there

00:02:42,080 --> 00:02:45,360
until i approve

00:02:43,680 --> 00:02:46,720
i can do that from the ui as you can see

00:02:45,360 --> 00:02:48,640
here by clicking that button

00:02:46,720 --> 00:02:50,640
but but a much cooler way of doing this

00:02:48,640 --> 00:02:52,319
is using slack

00:02:50,640 --> 00:02:54,400
here you can get a slack notification

00:02:52,319 --> 00:02:56,400
that has interactive buttons to approve

00:02:54,400 --> 00:02:58,319
or reject the artifact promotion if

00:02:56,400 --> 00:02:59,760
you're constantly on slack like we are

00:02:58,319 --> 00:03:01,840
especially now with covet

00:02:59,760 --> 00:03:03,440
and lockdowns this makes your life so

00:03:01,840 --> 00:03:07,599
much easier our users

00:03:03,440 --> 00:03:09,440
love this feature next up is spinning

00:03:07,599 --> 00:03:11,280
as the name indicates pinning allows you

00:03:09,440 --> 00:03:12,400
to pin a specific version of an artifact

00:03:11,280 --> 00:03:15,280
to an environment

00:03:12,400 --> 00:03:17,360
bypassing any promotion constraints this

00:03:15,280 --> 00:03:19,200
is another feature that our users love

00:03:17,360 --> 00:03:20,640
because it allows you to easily roll

00:03:19,200 --> 00:03:22,400
back in case of a problem

00:03:20,640 --> 00:03:24,080
or expedite a deployment if you're in

00:03:22,400 --> 00:03:26,000
the rush to get a hotfix out

00:03:24,080 --> 00:03:27,680
let's say you're in the middle of an

00:03:26,000 --> 00:03:29,040
incident and you can't wait for the

00:03:27,680 --> 00:03:30,080
artifact to go through the usual

00:03:29,040 --> 00:03:32,000
promotion flow

00:03:30,080 --> 00:03:33,280
from test to staging and then prod you

00:03:32,000 --> 00:03:36,480
just need to get it out

00:03:33,280 --> 00:03:37,360
this is how you do it when you click

00:03:36,480 --> 00:03:38,720
that pin button

00:03:37,360 --> 00:03:39,920
spinnaker will immediately start

00:03:38,720 --> 00:03:40,799
deploying that version in that

00:03:39,920 --> 00:03:42,080
environment

00:03:40,799 --> 00:03:43,519
if you're familiar with the current

00:03:42,080 --> 00:03:44,239
experience of rolling things back in

00:03:43,519 --> 00:03:45,840
spinnaker

00:03:44,239 --> 00:03:47,599
you will understand how much better this

00:03:45,840 --> 00:03:48,080
experience is in terms of the ease of

00:03:47,599 --> 00:03:49,840
use

00:03:48,080 --> 00:03:52,959
and the visibility you get about what's

00:03:49,840 --> 00:03:54,480
going on it's just great

00:03:52,959 --> 00:03:56,080
and here you see the version deployed

00:03:54,480 --> 00:03:57,599
and the pin icon over the artifact

00:03:56,080 --> 00:04:00,879
version and environment on the left hand

00:03:57,599 --> 00:04:02,480
side which makes it easy to spot

00:04:00,879 --> 00:04:04,720
the last feature i wanted to show you is

00:04:02,480 --> 00:04:06,000
what we call marking a version as bad

00:04:04,720 --> 00:04:07,680
this allows you to make sure that a

00:04:06,000 --> 00:04:09,360
version will never ever be deployed in

00:04:07,680 --> 00:04:10,159
that environment again not even by

00:04:09,360 --> 00:04:13,120
accident

00:04:10,159 --> 00:04:14,319
so back to our fictitious example of the

00:04:13,120 --> 00:04:15,920
incident scenario

00:04:14,319 --> 00:04:16,959
imagine that you found a really bad bug

00:04:15,920 --> 00:04:17,759
in the version that's currently in

00:04:16,959 --> 00:04:19,040
production

00:04:17,759 --> 00:04:20,880
and then you're going to pin a different

00:04:19,040 --> 00:04:22,479
one to fix the problem well

00:04:20,880 --> 00:04:24,160
you want to make sure that even if you

00:04:22,479 --> 00:04:26,080
roll back in the future you never end up

00:04:24,160 --> 00:04:28,720
deploying that bad version by accident

00:04:26,080 --> 00:04:30,560
so this is how you do it

00:04:28,720 --> 00:04:33,280
once your market is bad this is what the

00:04:30,560 --> 00:04:33,280
ui looks like

00:04:34,720 --> 00:04:38,320
okay so what are some of our plans for

00:04:36,560 --> 00:04:40,000
00:04:38,320 --> 00:04:42,240
and netflix we're really planning on

00:04:40,000 --> 00:04:43,280
continuing to invest heavily on managed

00:04:42,240 --> 00:04:45,600
delivery

00:04:43,280 --> 00:04:47,120
and here a couple of the things that we

00:04:45,600 --> 00:04:49,120
are planning to work on

00:04:47,120 --> 00:04:50,320
in the next year we want to improve

00:04:49,120 --> 00:04:53,520
visibility of

00:04:50,320 --> 00:04:56,080
baking of amis because

00:04:53,520 --> 00:04:57,360
netflix still uses a lot of ec2

00:04:56,080 --> 00:05:00,400
instances and so

00:04:57,360 --> 00:05:01,440
the experience around amis is important

00:05:00,400 --> 00:05:03,440
to us

00:05:01,440 --> 00:05:05,039
we want to improve the notifications

00:05:03,440 --> 00:05:05,759
that we send out to help you understand

00:05:05,039 --> 00:05:07,919
the progress

00:05:05,759 --> 00:05:09,199
of your code through the delivery flow

00:05:07,919 --> 00:05:12,320
especially via slack

00:05:09,199 --> 00:05:15,360
but also by integrating with

00:05:12,320 --> 00:05:17,039
the source control system for example

00:05:15,360 --> 00:05:18,880
we want to improve the visibility into

00:05:17,039 --> 00:05:19,360
the code changes that are associated

00:05:18,880 --> 00:05:21,840
with

00:05:19,360 --> 00:05:22,400
your deployments so we're currently

00:05:21,840 --> 00:05:24,320
working

00:05:22,400 --> 00:05:25,840
on this feature in netflix and it will

00:05:24,320 --> 00:05:28,400
allow you to

00:05:25,840 --> 00:05:30,080
basically see a diff of the source code

00:05:28,400 --> 00:05:32,080
that changed between one deployment and

00:05:30,080 --> 00:05:35,360
another and that's a really really

00:05:32,080 --> 00:05:38,800
cool helpful feature for developers

00:05:35,360 --> 00:05:40,720
then we want to also include support for

00:05:38,800 --> 00:05:42,080
validation tests that run after your

00:05:40,720 --> 00:05:44,560
deployments and this is

00:05:42,080 --> 00:05:45,840
probably been the number one feature

00:05:44,560 --> 00:05:48,240
request we've had

00:05:45,840 --> 00:05:50,960
netflix teams throughout the year as

00:05:48,240 --> 00:05:53,280
teams were on boarding

00:05:50,960 --> 00:05:54,160
and finally we are gearing up to

00:05:53,280 --> 00:05:57,440
experiment

00:05:54,160 --> 00:05:59,840
with uh various different things some of

00:05:57,440 --> 00:06:00,800
which are around the app bootstrapping

00:05:59,840 --> 00:06:02,479
process

00:06:00,800 --> 00:06:04,240
in other words how to make sure that

00:06:02,479 --> 00:06:07,120
managed delivery is available

00:06:04,240 --> 00:06:09,680
when you first bootstrap your app and

00:06:07,120 --> 00:06:11,440
that that process is easy

00:06:09,680 --> 00:06:13,199
and then raising the level of

00:06:11,440 --> 00:06:14,720
abstraction for application developers

00:06:13,199 --> 00:06:18,400
is a major area focus

00:06:14,720 --> 00:06:20,720
for us as well we want to be able to

00:06:18,400 --> 00:06:22,319
allow developers to specify their

00:06:20,720 --> 00:06:24,400
delivery requirements and their

00:06:22,319 --> 00:06:25,199
infrastructure at a very high level

00:06:24,400 --> 00:06:28,319
because

00:06:25,199 --> 00:06:30,560
frankly most of them don't uh

00:06:28,319 --> 00:06:31,759
care about the nitty-gritty details or

00:06:30,560 --> 00:06:34,000
they're not experts

00:06:31,759 --> 00:06:35,840
actually on selecting those details so

00:06:34,000 --> 00:06:37,520
we want to allow central teams who are

00:06:35,840 --> 00:06:39,360
specialized in things like

00:06:37,520 --> 00:06:41,440
selecting the best instance types for

00:06:39,360 --> 00:06:43,600
certain workflows for instance

00:06:41,440 --> 00:06:44,800
to make those choices on the behalf of

00:06:43,600 --> 00:06:48,000
the developers

00:06:44,800 --> 00:06:49,520
and let developers focus on their code

00:06:48,000 --> 00:06:52,000
and here are some of the things that the

00:06:49,520 --> 00:06:54,240
aws folks who've joined the sig

00:06:52,000 --> 00:06:55,199
are planning to work on this next year

00:06:54,240 --> 00:06:57,440
as well

00:06:55,199 --> 00:06:59,039
they are planning to continue to work on

00:06:57,440 --> 00:07:02,240
kubernetes support for

00:06:59,039 --> 00:07:04,319
managed delivery which is great one of

00:07:02,240 --> 00:07:06,400
the obvious candidates there is

00:07:04,319 --> 00:07:08,240
including ui support for visualizing

00:07:06,400 --> 00:07:10,880
kubernetes resources which is not

00:07:08,240 --> 00:07:13,599
something that we currently have

00:07:10,880 --> 00:07:15,039
validating of kubernetes resources as

00:07:13,599 --> 00:07:16,080
they progress through the environment

00:07:15,039 --> 00:07:17,599
since the ui

00:07:16,080 --> 00:07:19,599
is another feature they're planning to

00:07:17,599 --> 00:07:22,080
work on the

00:07:19,599 --> 00:07:22,880
ability to visualize code changes

00:07:22,080 --> 00:07:25,599
related to

00:07:22,880 --> 00:07:26,720
your docker artifact deployments is also

00:07:25,599 --> 00:07:30,319
something that they're planning

00:07:26,720 --> 00:07:31,280
to work on and then finally kind of

00:07:30,319 --> 00:07:33,599
related to this

00:07:31,280 --> 00:07:34,400
idea of raising the level of abstraction

00:07:33,599 --> 00:07:36,560
and

00:07:34,400 --> 00:07:37,680
facilitating the bootstrapping of apps

00:07:36,560 --> 00:07:39,520
that i was talking about

00:07:37,680 --> 00:07:42,080
earlier they're planning on working on

00:07:39,520 --> 00:07:44,000
templating tools as well

00:07:42,080 --> 00:07:46,160
all right i hope you're excited about

00:07:44,000 --> 00:07:48,720
these uh upcoming

00:07:46,160 --> 00:07:50,400
developments for managed delivery and if

00:07:48,720 --> 00:07:52,479
you have any other topics

00:07:50,400 --> 00:07:53,680
you're always more than welcome to join

00:07:52,479 --> 00:07:55,840
us uh

00:07:53,680 --> 00:07:57,919
we our spinnaker's live channel is six

00:07:55,840 --> 00:07:59,759
spin across code

00:07:57,919 --> 00:08:02,080
our agenda and calendar are published on

00:07:59,759 --> 00:08:04,720
the github page for the save which is

00:08:02,080 --> 00:08:05,680
linked on the slides there so please

00:08:04,720 --> 00:08:13,680
come join us

00:08:05,680 --> 00:08:13,680

YouTube URL: https://www.youtube.com/watch?v=-iS0KBtwf6E


