Title: Playstation's Code Deployment to Kubernetes Flow with Spinnaker, Helm & AWS -  Bhavesh Bhavsar
Publication date: 2021-01-12
Playlist: Spinnaker Summit 2020
Description: 
	This session lets you tour Playstation's code delivery workflow. It will demonstrate the automation that has allowed Playstation to grow Spinnaker adoption by enabling developers on deployment to AWS EKS (Elastic Kubernetes Service) using a toolchain including GitHub, Jenkins, Spinnaker, Helm, ECR, and Kubernetes. One of Playstation's Engineer, Bhavesh, will take you from a GitHub check-in all the way through deployment to production in EKS. From a technical perspective, he will share Spinnaker strategies for managing artifacts via ECR (Elastic Container Registry) triggers, and progressing changes through multiple AWS EKS accounts and environments, leveraging manual judgement where necessary.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:05,839 --> 00:00:10,080
hello everyone

00:00:06,879 --> 00:00:12,080
welcome to spinnaker summit today i will

00:00:10,080 --> 00:00:15,519
walk you through continuous deployment

00:00:12,080 --> 00:00:18,800
to kubernetes using spinaker health

00:00:15,519 --> 00:00:22,560
and aws at playstation i am

00:00:18,800 --> 00:00:25,039
bhavesh bowser here is a little bit

00:00:22,560 --> 00:00:27,359
introduction about myself

00:00:25,039 --> 00:00:28,880
i am senior devops engineer at sony

00:00:27,359 --> 00:00:32,079
playstation

00:00:28,880 --> 00:00:34,160
i am mainly involved with your various

00:00:32,079 --> 00:00:35,360
operations including continuous

00:00:34,160 --> 00:00:39,440
integration

00:00:35,360 --> 00:00:42,160
continuous delivery security storage

00:00:39,440 --> 00:00:42,160
and many more

00:00:43,680 --> 00:00:47,920
before we go ahead i would like to

00:00:45,600 --> 00:00:48,559
introduce with some challenges that we

00:00:47,920 --> 00:00:50,879
face

00:00:48,559 --> 00:00:52,719
and we would like to solve these are

00:00:50,879 --> 00:00:53,600
more of the use case that we try to

00:00:52,719 --> 00:00:56,160
cover

00:00:53,600 --> 00:00:57,680
uh during doing a continuous deployment

00:00:56,160 --> 00:00:59,520
on kubernetes

00:00:57,680 --> 00:01:01,600
when we put everything together

00:00:59,520 --> 00:01:04,559
spinnaker kubernetes

00:01:01,600 --> 00:01:06,400
a docker registry a help there will be

00:01:04,559 --> 00:01:08,640
unique challenges we face

00:01:06,400 --> 00:01:10,159
how to do a deployment how to do a

00:01:08,640 --> 00:01:13,119
continuous deployment

00:01:10,159 --> 00:01:14,080
and how to use all these tools available

00:01:13,119 --> 00:01:17,759
to make it

00:01:14,080 --> 00:01:18,479
a better deployment strategy so first of

00:01:17,759 --> 00:01:20,560
all

00:01:18,479 --> 00:01:21,680
we would like to have a deployment event

00:01:20,560 --> 00:01:24,960
occur

00:01:21,680 --> 00:01:28,159
in a response to a github commit

00:01:24,960 --> 00:01:30,079
achieve deployment as soon as new docker

00:01:28,159 --> 00:01:33,200
image is available

00:01:30,079 --> 00:01:35,920
code should get deployed and tested

00:01:33,200 --> 00:01:36,560
on a test environment and get a feedback

00:01:35,920 --> 00:01:39,360
feedback

00:01:36,560 --> 00:01:41,200
could be an automated feedback loop to

00:01:39,360 --> 00:01:43,520
show the code quality

00:01:41,200 --> 00:01:44,799
have some getting mechanism for a

00:01:43,520 --> 00:01:46,399
production environment

00:01:44,799 --> 00:01:48,320
of course we do not want to have a

00:01:46,399 --> 00:01:52,079
production environment deployed

00:01:48,320 --> 00:01:54,960
without anybody knowing and also

00:01:52,079 --> 00:01:56,399
however deploy various kubernetes object

00:01:54,960 --> 00:01:59,119
altogether

00:01:56,399 --> 00:02:01,040
means we would like to use a certain

00:01:59,119 --> 00:02:02,159
mechanism where we can deploy all the

00:02:01,040 --> 00:02:06,320
kubernetes object

00:02:02,159 --> 00:02:09,520
for example service account deployment

00:02:06,320 --> 00:02:10,239
service network policy part destruction

00:02:09,520 --> 00:02:12,239
budget

00:02:10,239 --> 00:02:14,720
all the kubernetes kinds are deploying

00:02:12,239 --> 00:02:14,720
together

00:02:15,440 --> 00:02:19,120
now let's look into the overview of the

00:02:17,520 --> 00:02:21,680
presentation

00:02:19,120 --> 00:02:22,560
we will go over the flow from code

00:02:21,680 --> 00:02:25,200
checking

00:02:22,560 --> 00:02:27,680
to code deploy and what are the best

00:02:25,200 --> 00:02:30,720
practices around them

00:02:27,680 --> 00:02:32,879
it all starts from github commit when

00:02:30,720 --> 00:02:36,080
the commit in the github happens

00:02:32,879 --> 00:02:39,519
we will see what are the responses

00:02:36,080 --> 00:02:43,200
and triggers happens between check-in

00:02:39,519 --> 00:02:46,239
to the deploy when the web triggers

00:02:43,200 --> 00:02:49,120
compile the code create new docker image

00:02:46,239 --> 00:02:51,040
and push that tag to a docker registry

00:02:49,120 --> 00:02:53,280
there will be automated process where

00:02:51,040 --> 00:02:55,280
this thing happens

00:02:53,280 --> 00:02:56,720
creation of deployable artifact in a

00:02:55,280 --> 00:02:58,640
docker registry

00:02:56,720 --> 00:03:00,000
will trigger a deployment of that

00:02:58,640 --> 00:03:03,360
artifact

00:03:00,000 --> 00:03:05,599
that's the that's the deployment trigger

00:03:03,360 --> 00:03:07,440
spinnaker pipeline in the response to

00:03:05,599 --> 00:03:10,720
the new docker image

00:03:07,440 --> 00:03:14,000
we will be using helm 3 in the blend as

00:03:10,720 --> 00:03:14,800
rendering engine for deployment m3 will

00:03:14,000 --> 00:03:18,400
be used

00:03:14,800 --> 00:03:19,360
in spin agar pipeline 3 is a package

00:03:18,400 --> 00:03:22,400
manager

00:03:19,360 --> 00:03:24,400
for kubernetes it can help us to deploy

00:03:22,400 --> 00:03:26,480
a multiple objects of kubernetes all

00:03:24,400 --> 00:03:28,319
together and we can track them

00:03:26,480 --> 00:03:33,680
all together we can control version

00:03:28,319 --> 00:03:36,000
control them all together

00:03:33,680 --> 00:03:36,959
so here on this slide we have a

00:03:36,000 --> 00:03:39,120
developer

00:03:36,959 --> 00:03:40,959
who is writing a code and making the

00:03:39,120 --> 00:03:44,319
checking to github

00:03:40,959 --> 00:03:46,799
github is a version control tool it is

00:03:44,319 --> 00:03:52,080
widely accepted in the market

00:03:46,799 --> 00:03:52,080
and it can also do code management

00:03:55,680 --> 00:04:02,799
here we have a webhook now

00:03:59,200 --> 00:04:05,200
when a code commit happens on the github

00:04:02,799 --> 00:04:06,720
github has a nice mechanism where

00:04:05,200 --> 00:04:08,959
webhook can be triggered

00:04:06,720 --> 00:04:10,799
webhook can be triggered on various

00:04:08,959 --> 00:04:13,360
different events that happen in

00:04:10,799 --> 00:04:14,080
the github it could be a commit could be

00:04:13,360 --> 00:04:17,199
a pr

00:04:14,080 --> 00:04:20,479
could be a merge and many more

00:04:17,199 --> 00:04:22,560
as a result of a book trigger there will

00:04:20,479 --> 00:04:24,720
be a downstream jenkins job

00:04:22,560 --> 00:04:25,759
listening on this webhook when the

00:04:24,720 --> 00:04:28,080
waybook triggers

00:04:25,759 --> 00:04:30,720
junkinjob will receive it and it will

00:04:28,080 --> 00:04:32,720
start a particular job

00:04:30,720 --> 00:04:35,840
there will be a many stages in a jenkins

00:04:32,720 --> 00:04:38,880
shop jenkins is a continuous integration

00:04:35,840 --> 00:04:40,400
tool it is widely accepted in the market

00:04:38,880 --> 00:04:42,000
and in the next slide we will see the

00:04:40,400 --> 00:04:44,560
various steps that jenkins

00:04:42,000 --> 00:04:47,040
goes through and what happens in the

00:04:44,560 --> 00:04:47,040
pipeline

00:04:48,080 --> 00:04:51,520
so when the junkies job triggers in a

00:04:50,639 --> 00:04:55,280
response

00:04:51,520 --> 00:04:58,720
to a webhook from the github jenkins

00:04:55,280 --> 00:04:59,520
will compile the code build a docker

00:04:58,720 --> 00:05:02,240
image

00:04:59,520 --> 00:05:02,960
and then in another step of the same

00:05:02,240 --> 00:05:05,919
pipeline

00:05:02,960 --> 00:05:07,600
jenkins will push the docker image to a

00:05:05,919 --> 00:05:10,800
docker registry

00:05:07,600 --> 00:05:13,520
in this example we are using aws ecr

00:05:10,800 --> 00:05:14,160
which is aws service for elastic

00:05:13,520 --> 00:05:16,960
container

00:05:14,160 --> 00:05:18,000
registered output of jenkins job is a

00:05:16,960 --> 00:05:21,039
docker image

00:05:18,000 --> 00:05:21,759
with a unique tag and jenkins is pushing

00:05:21,039 --> 00:05:25,120
that image

00:05:21,759 --> 00:05:27,840
to a docker registry now

00:05:25,120 --> 00:05:29,600
we have deployable artifact ready in our

00:05:27,840 --> 00:05:31,199
docker registry

00:05:29,600 --> 00:05:33,199
we would like that artifact to get

00:05:31,199 --> 00:05:35,520
deployed but again

00:05:33,199 --> 00:05:36,240
we have event occurred here that we push

00:05:35,520 --> 00:05:38,639
a new

00:05:36,240 --> 00:05:39,520
unique docker tag in the registry and we

00:05:38,639 --> 00:05:42,400
would like the

00:05:39,520 --> 00:05:44,000
tag to trigger an event that event will

00:05:42,400 --> 00:05:46,160
be a deploy event

00:05:44,000 --> 00:05:49,360
through a spinnaker pipeline so we will

00:05:46,160 --> 00:05:49,360
see that in the next slide

00:05:50,639 --> 00:05:55,840
so here spinaker pipeline will trigger

00:05:53,199 --> 00:05:58,400
in a response to a new docker image tag

00:05:55,840 --> 00:05:59,120
which is a unique tag in a docker

00:05:58,400 --> 00:06:02,479
registry

00:05:59,120 --> 00:06:04,160
here aws ecr registry so while we are

00:06:02,479 --> 00:06:07,680
configuring spinnaker

00:06:04,160 --> 00:06:10,720
we will be configuring a docker registry

00:06:07,680 --> 00:06:12,160
which register to listen to when it is

00:06:10,720 --> 00:06:13,600
listening to a registry

00:06:12,160 --> 00:06:15,440
and there will be a new tag in a

00:06:13,600 --> 00:06:18,080
particular repository

00:06:15,440 --> 00:06:19,680
there is a capacity of spinnaker to

00:06:18,080 --> 00:06:22,800
listen to the trigger

00:06:19,680 --> 00:06:24,880
start a deploy job we will see what are

00:06:22,800 --> 00:06:29,039
the steps and stages involved

00:06:24,880 --> 00:06:29,039
in this deploy in the next slide

00:06:30,240 --> 00:06:33,520
so here are the detail about spin anchor

00:06:32,240 --> 00:06:35,840
pipeline

00:06:33,520 --> 00:06:36,800
first step is a configuration which

00:06:35,840 --> 00:06:39,759
includes

00:06:36,800 --> 00:06:41,600
automated trigger for docker registry

00:06:39,759 --> 00:06:44,560
the action here

00:06:41,600 --> 00:06:45,440
happens is we set up a pipeline trigger

00:06:44,560 --> 00:06:49,759
for a new

00:06:45,440 --> 00:06:51,840
tag in ecr to this thing to happen

00:06:49,759 --> 00:06:53,039
we need to have a docker registry to be

00:06:51,840 --> 00:06:55,520
configured

00:06:53,039 --> 00:06:57,360
in spinnaker while we are installing and

00:06:55,520 --> 00:06:59,919
configuring spinnaker either

00:06:57,360 --> 00:07:00,960
hollyard or using operators or using

00:06:59,919 --> 00:07:02,560
clicked

00:07:00,960 --> 00:07:05,280
and when we have configured docker

00:07:02,560 --> 00:07:07,360
registry we can configure a trigger

00:07:05,280 --> 00:07:09,280
in a pipeline for the spinnaker

00:07:07,360 --> 00:07:10,880
spinnaker can listen to that docker

00:07:09,280 --> 00:07:13,440
registry a particular repo

00:07:10,880 --> 00:07:14,639
for a new tag and there is a various

00:07:13,440 --> 00:07:18,160
method

00:07:14,639 --> 00:07:21,440
to apply on a spinach pipeline on which

00:07:18,160 --> 00:07:22,639
tag to listen to if we don't specify any

00:07:21,440 --> 00:07:25,360
particular tag

00:07:22,639 --> 00:07:28,000
spinnaker pipeline can trigger on any

00:07:25,360 --> 00:07:28,000
unique tag

00:07:28,319 --> 00:07:32,319
next step in the same pipeline will be a

00:07:31,039 --> 00:07:35,360
bake manifest

00:07:32,319 --> 00:07:37,840
here we want to bake

00:07:35,360 --> 00:07:38,800
manifest which could be a deployable

00:07:37,840 --> 00:07:41,599
manifest

00:07:38,800 --> 00:07:42,639
using a helm3 rendering engine again

00:07:41,599 --> 00:07:44,879
health3

00:07:42,639 --> 00:07:45,840
is a package manager that helps us to

00:07:44,879 --> 00:07:48,960
deploy

00:07:45,840 --> 00:07:52,479
artifacts on kubernetes cluster

00:07:48,960 --> 00:07:56,080
and by using the helm 3 we can deploy

00:07:52,479 --> 00:08:00,400
many kubernetes objects kinds including

00:07:56,080 --> 00:08:03,280
service account deployment service

00:08:00,400 --> 00:08:04,960
network policy part disruption budget

00:08:03,280 --> 00:08:07,919
and many more

00:08:04,960 --> 00:08:08,319
so by using this big manifest we will

00:08:07,919 --> 00:08:11,120
have

00:08:08,319 --> 00:08:12,080
helm template and we will combine it

00:08:11,120 --> 00:08:14,479
with the required

00:08:12,080 --> 00:08:17,039
and override artifact this stage will

00:08:14,479 --> 00:08:20,080
produce a deployable artifact

00:08:17,039 --> 00:08:21,440
using a helm chart helm chart is coming

00:08:20,080 --> 00:08:23,280
from helm repository

00:08:21,440 --> 00:08:24,560
so that will be also a part of

00:08:23,280 --> 00:08:26,639
configuration

00:08:24,560 --> 00:08:28,400
when we configure the pipeline we will

00:08:26,639 --> 00:08:30,960
have a helm repository

00:08:28,400 --> 00:08:33,680
and that configuration is done while

00:08:30,960 --> 00:08:35,039
installing and configuring spinnaker

00:08:33,680 --> 00:08:36,800
so when we are installing and

00:08:35,039 --> 00:08:39,760
configuring spinnaker we are doing

00:08:36,800 --> 00:08:40,959
multiple things we are configuring

00:08:39,760 --> 00:08:44,159
docker registry

00:08:40,959 --> 00:08:46,560
we are configuring helm registry

00:08:44,159 --> 00:08:48,320
so we can use all of them here in the

00:08:46,560 --> 00:08:51,360
pipeline

00:08:48,320 --> 00:08:52,640
so now the hem chart came from the helm

00:08:51,360 --> 00:08:54,800
repository

00:08:52,640 --> 00:08:56,800
we have a manifest that can be coming

00:08:54,800 --> 00:08:58,959
from github repository

00:08:56,800 --> 00:09:01,120
and we can use those manifestos

00:08:58,959 --> 00:09:03,760
values.yaml file for the help

00:09:01,120 --> 00:09:04,600
and we can overwrite them now this

00:09:03,760 --> 00:09:07,920
override

00:09:04,600 --> 00:09:08,560
value.yaml file could have different

00:09:07,920 --> 00:09:10,959
values

00:09:08,560 --> 00:09:13,920
as per your environment you may have a

00:09:10,959 --> 00:09:15,839
various environment test environment

00:09:13,920 --> 00:09:18,640
staging environment production

00:09:15,839 --> 00:09:20,839
environment and your values.yaml can

00:09:18,640 --> 00:09:22,959
contain the different values as per the

00:09:20,839 --> 00:09:26,399
environment

00:09:22,959 --> 00:09:30,240
so now the output of this stage

00:09:26,399 --> 00:09:34,000
make manifest will be a compiled

00:09:30,240 --> 00:09:36,640
artifact by combining the

00:09:34,000 --> 00:09:37,680
chart which came from helm repository

00:09:36,640 --> 00:09:41,440
and the values

00:09:37,680 --> 00:09:43,920
which is base64 encoded output

00:09:41,440 --> 00:09:47,200
we can name that output and we can use

00:09:43,920 --> 00:09:50,000
it in a further next step

00:09:47,200 --> 00:09:50,800
next stage is a manual judgment manual

00:09:50,000 --> 00:09:53,600
judgment

00:09:50,800 --> 00:09:54,640
is an important step where we can get

00:09:53,600 --> 00:09:58,080
the deployment

00:09:54,640 --> 00:10:00,880
to a particular environment spinaker

00:09:58,080 --> 00:10:02,240
offers capacity where we can build a

00:10:00,880 --> 00:10:05,279
pipeline

00:10:02,240 --> 00:10:07,279
and we could have a various environment

00:10:05,279 --> 00:10:09,279
be addressed in that pipeline where the

00:10:07,279 --> 00:10:11,760
deployment can be occurred

00:10:09,279 --> 00:10:13,279
deployment can be clubbed together once

00:10:11,760 --> 00:10:14,560
the deploy happen in a particular

00:10:13,279 --> 00:10:17,839
environment

00:10:14,560 --> 00:10:19,760
uh do some tests and then roll out the

00:10:17,839 --> 00:10:21,680
deployment to the next environment which

00:10:19,760 --> 00:10:23,519
could be a production environment

00:10:21,680 --> 00:10:26,640
and it is important to put a manual

00:10:23,519 --> 00:10:29,760
judgment step we can explicitly say yes

00:10:26,640 --> 00:10:32,959
or no as our judgment for the deployment

00:10:29,760 --> 00:10:36,160
to go further we will have

00:10:32,959 --> 00:10:37,519
a manual judgment step with production

00:10:36,160 --> 00:10:39,920
environment

00:10:37,519 --> 00:10:41,360
spinnaker also offers a capacity for the

00:10:39,920 --> 00:10:44,160
notification

00:10:41,360 --> 00:10:46,000
when we are at the manual judgments tab

00:10:44,160 --> 00:10:48,800
spinnaker can notify on

00:10:46,000 --> 00:10:49,600
a various notification system like over

00:10:48,800 --> 00:10:53,120
the email

00:10:49,600 --> 00:10:56,480
or a slack and many more where user gets

00:10:53,120 --> 00:11:00,399
notified about this stage is waiting

00:10:56,480 --> 00:11:02,880
for an answer when the user goes and

00:11:00,399 --> 00:11:04,880
it does a manual judgment let's say yes

00:11:02,880 --> 00:11:06,880
the deployment will go further

00:11:04,880 --> 00:11:09,279
and if it says no the deployment will

00:11:06,880 --> 00:11:12,480
stop over

00:11:09,279 --> 00:11:15,360
next stage is a deploy manifest

00:11:12,480 --> 00:11:17,200
here actual deployment of our kubernetes

00:11:15,360 --> 00:11:19,839
to our kubernetes cluster

00:11:17,200 --> 00:11:20,480
will happen as per bake manifest

00:11:19,839 --> 00:11:23,519
received

00:11:20,480 --> 00:11:25,839
from the backstage we seen backstage has

00:11:23,519 --> 00:11:28,720
produced base64 encoded artifact which

00:11:25,839 --> 00:11:32,000
is kubernetes deployable artifact

00:11:28,720 --> 00:11:32,880
and we have name it as per in deploy

00:11:32,000 --> 00:11:34,959
stage

00:11:32,880 --> 00:11:37,920
we can mention which cluster we would

00:11:34,959 --> 00:11:40,079
like to address this artifact to go with

00:11:37,920 --> 00:11:40,959
in the backstage we also seen we have

00:11:40,079 --> 00:11:44,480
used

00:11:40,959 --> 00:11:47,040
override with the values.ml5 and we have

00:11:44,480 --> 00:11:49,519
provided various values as per our

00:11:47,040 --> 00:11:50,160
environment consider it is a production

00:11:49,519 --> 00:11:51,920
environment

00:11:50,160 --> 00:11:53,519
and we have provided all the values that

00:11:51,920 --> 00:11:54,720
we would like to use in the production

00:11:53,519 --> 00:11:57,760
environment

00:11:54,720 --> 00:12:00,399
and for the chart of them chart

00:11:57,760 --> 00:12:01,360
so we can say go to the production

00:12:00,399 --> 00:12:04,160
environment

00:12:01,360 --> 00:12:06,160
as per the deployment manifest stage and

00:12:04,160 --> 00:12:08,560
use that batman test

00:12:06,160 --> 00:12:09,440
and then spin occur when the pipeline

00:12:08,560 --> 00:12:13,200
executes

00:12:09,440 --> 00:12:16,240
will do deployment of that and as it is

00:12:13,200 --> 00:12:19,519
a hand chart it will deploy a various

00:12:16,240 --> 00:12:19,519
kubernetes objects

00:12:21,200 --> 00:12:25,040
now here a little bit important tip tip

00:12:23,839 --> 00:12:28,480
about hand chart

00:12:25,040 --> 00:12:31,200
to work with the new tag so as mentioned

00:12:28,480 --> 00:12:32,480
before help can deploy where is

00:12:31,200 --> 00:12:34,160
kubernetes object

00:12:32,480 --> 00:12:36,720
and here we are going to look into a

00:12:34,160 --> 00:12:40,079
particular deployment object

00:12:36,720 --> 00:12:43,360
so our main focus is to deploy

00:12:40,079 --> 00:12:46,800
a unique tag that has been generated

00:12:43,360 --> 00:12:51,120
in in response to an event that happened

00:12:46,800 --> 00:12:53,519
in github so we have a unique tab

00:12:51,120 --> 00:12:54,800
how are we going to use this unique tag

00:12:53,519 --> 00:12:58,399
in the helm chart

00:12:54,800 --> 00:13:01,920
and deploy through spinnaker pipeline

00:12:58,399 --> 00:13:04,959
so in the deployment chart

00:13:01,920 --> 00:13:06,079
for the helm leave the image tag field

00:13:04,959 --> 00:13:09,279
empty

00:13:06,079 --> 00:13:13,600
the fill name is deployment spec

00:13:09,279 --> 00:13:16,720
template spec containers image

00:13:13,600 --> 00:13:20,880
usually the value of this field

00:13:16,720 --> 00:13:25,040
is base url for docker registry

00:13:20,880 --> 00:13:27,839
slash image repo column tag

00:13:25,040 --> 00:13:29,040
by not providing that we are telling

00:13:27,839 --> 00:13:31,920
spinagar

00:13:29,040 --> 00:13:33,279
to fill the place by the trigger value

00:13:31,920 --> 00:13:35,680
it receives

00:13:33,279 --> 00:13:36,720
so as we seen in a previous step in the

00:13:35,680 --> 00:13:40,079
configuration

00:13:36,720 --> 00:13:40,880
of the pipeline we use a trigger from

00:13:40,079 --> 00:13:43,760
ecr

00:13:40,880 --> 00:13:45,199
which is a docker registry so whatever

00:13:43,760 --> 00:13:49,199
the value is coming

00:13:45,199 --> 00:13:52,399
as a tag from the trigger spinnaker

00:13:49,199 --> 00:13:54,000
while it is making a manifest using hem

00:13:52,399 --> 00:13:57,199
chart and override value

00:13:54,000 --> 00:14:00,639
will place that value here

00:13:57,199 --> 00:14:03,360
so if you do not leave this field empty

00:14:00,639 --> 00:14:05,040
spinnaker will trigger the pipeline as

00:14:03,360 --> 00:14:06,160
per the trigger occurs but there will be

00:14:05,040 --> 00:14:08,320
no new deployment

00:14:06,160 --> 00:14:10,399
because the value is already been filled

00:14:08,320 --> 00:14:12,240
so spinnaker cannot override that

00:14:10,399 --> 00:14:14,880
so it is best practice to leave this

00:14:12,240 --> 00:14:18,079
place empty and spinnaker's job

00:14:14,880 --> 00:14:18,959
is to fulfill the place as per the value

00:14:18,079 --> 00:14:21,760
coming

00:14:18,959 --> 00:14:21,760
from the trigger

00:14:23,680 --> 00:14:28,959
so we've seen whole pipeline

00:14:26,800 --> 00:14:30,160
we've seen check-in happen and the

00:14:28,959 --> 00:14:31,920
deployment occur

00:14:30,160 --> 00:14:33,279
and we see the spin maker deploy

00:14:31,920 --> 00:14:35,680
pipeline now let's

00:14:33,279 --> 00:14:37,040
put everything together and see what

00:14:35,680 --> 00:14:40,000
happen

00:14:37,040 --> 00:14:41,199
so first step developer writes a code

00:14:40,000 --> 00:14:44,720
for a new feature

00:14:41,199 --> 00:14:47,279
or anything and makes it to a particular

00:14:44,720 --> 00:14:50,320
branch or maybe a temporary branch

00:14:47,279 --> 00:14:51,440
and it does a commit merge happens or pr

00:14:50,320 --> 00:14:54,639
happens

00:14:51,440 --> 00:14:56,160
that can goes to the github now github

00:14:54,639 --> 00:14:58,720
has a good feature

00:14:56,160 --> 00:14:59,839
where it can trigger a webhook on

00:14:58,720 --> 00:15:03,839
various event

00:14:59,839 --> 00:15:06,240
a pr a merge or a commit and many more

00:15:03,839 --> 00:15:07,519
now when the web of triggers we have

00:15:06,240 --> 00:15:10,959
configured

00:15:07,519 --> 00:15:11,760
a jenkins job jenkins is a continuous

00:15:10,959 --> 00:15:15,040
integration

00:15:11,760 --> 00:15:17,120
system so when the trigger happens

00:15:15,040 --> 00:15:18,399
from the webhook in the response to the

00:15:17,120 --> 00:15:21,600
github event

00:15:18,399 --> 00:15:22,560
jenkins has a job which is pipeline that

00:15:21,600 --> 00:15:24,800
pipeline

00:15:22,560 --> 00:15:26,160
triggers compiles the code makes a

00:15:24,800 --> 00:15:28,480
docker image

00:15:26,160 --> 00:15:29,279
docker image is generated with a unique

00:15:28,480 --> 00:15:31,600
tag

00:15:29,279 --> 00:15:32,399
and that tag been pushed to a docker

00:15:31,600 --> 00:15:35,519
registry

00:15:32,399 --> 00:15:37,680
in our repo we are using aws

00:15:35,519 --> 00:15:40,720
elastic container registry but it could

00:15:37,680 --> 00:15:43,600
be any docker registry

00:15:40,720 --> 00:15:44,720
once there is a new tag in the docker

00:15:43,600 --> 00:15:48,480
registry

00:15:44,720 --> 00:15:49,360
in aws ecr we would like the deployment

00:15:48,480 --> 00:15:51,759
to occur

00:15:49,360 --> 00:15:52,480
for that unit tag and that was our

00:15:51,759 --> 00:15:55,600
actual

00:15:52,480 --> 00:15:57,600
use case that we want to have a new

00:15:55,600 --> 00:15:59,279
image been generated on the push and get

00:15:57,600 --> 00:16:02,000
deployed

00:15:59,279 --> 00:16:04,320
now so we configure spinach pipeline

00:16:02,000 --> 00:16:05,920
spinnaker offers a pipeline mechanism

00:16:04,320 --> 00:16:09,120
where we can

00:16:05,920 --> 00:16:10,880
use a trigger for docker registry

00:16:09,120 --> 00:16:12,399
whenever there is a new image been

00:16:10,880 --> 00:16:13,199
pushed to the registries enacter

00:16:12,399 --> 00:16:16,399
pipeline will

00:16:13,199 --> 00:16:18,160
start we'll use helm as a rendering

00:16:16,399 --> 00:16:21,279
template

00:16:18,160 --> 00:16:24,000
combine the artifacts with the override

00:16:21,279 --> 00:16:27,120
values values.yaml file and create a

00:16:24,000 --> 00:16:30,480
deployable base64 encoded artifact

00:16:27,120 --> 00:16:33,360
and we seen already spinnaker also has

00:16:30,480 --> 00:16:34,240
mechanism where we can do a manual

00:16:33,360 --> 00:16:36,079
judgment

00:16:34,240 --> 00:16:38,560
and after the manual judgment it can do

00:16:36,079 --> 00:16:40,720
a deployment on a particular environment

00:16:38,560 --> 00:16:41,680
and as per the deployment we are

00:16:40,720 --> 00:16:45,040
deploying

00:16:41,680 --> 00:16:46,959
a back manifest using help and there is

00:16:45,040 --> 00:16:49,600
a docker imaging

00:16:46,959 --> 00:16:50,959
so the deployment occurs so that

00:16:49,600 --> 00:16:53,120
basically concludes

00:16:50,959 --> 00:16:54,240
from checking to deploy using the spin

00:16:53,120 --> 00:16:57,920
anchor pipeline

00:16:54,240 --> 00:17:01,120
using ecr jenkins web github

00:16:57,920 --> 00:17:01,120
and docker and everything

00:17:02,560 --> 00:17:06,160
thank you for watching my presentation

00:17:04,480 --> 00:17:06,959
if you have any question please reach

00:17:06,160 --> 00:17:15,760
out to me

00:17:06,959 --> 00:17:15,760

YouTube URL: https://www.youtube.com/watch?v=Hmq6rdI4iOk


