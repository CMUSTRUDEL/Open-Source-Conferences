Title: UI Plugin Development - Daniel Peach
Publication date: 2021-01-28
Playlist: Spinnaker Summit 2020
Description: 
	Want to build a UI plugin for Spinnaker? This talk is for you! We’ll start with the basics: you’ll learn how to use the UI plugin scaffolding tool, set up a development environment, and build a simple UI for a new stage. From there, we’ll veer off course to explore the possible, the dangerous, and the impossible. You’ll learn how to create a UI for a new cloud provider and how to confuse your users by overriding components. For those who hate UIs but still need ‘em, we’ll discuss strategies for those who can’t stomach another line of JavaScript. This talk will include lots of examples and an enthusiastic presenter.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:05,759 --> 00:00:09,200
hi

00:00:06,319 --> 00:00:10,320
i'm dan peach i'm a software engineer at

00:00:09,200 --> 00:00:13,040
armory

00:00:10,320 --> 00:00:13,840
i've been working on and with spinnaker

00:00:13,040 --> 00:00:16,320
um

00:00:13,840 --> 00:00:17,039
for the past four four and a half years

00:00:16,320 --> 00:00:18,800
um

00:00:17,039 --> 00:00:21,520
and wanted to talk to you about the ways

00:00:18,800 --> 00:00:23,680
to get started developing the ui plug-in

00:00:21,520 --> 00:00:24,800
um the available options and hopefully

00:00:23,680 --> 00:00:26,240
by the end of this talk

00:00:24,800 --> 00:00:27,840
you'll be able to answer the question

00:00:26,240 --> 00:00:31,840
you know what's possible

00:00:27,840 --> 00:00:31,840
to develop as a ui plug-in

00:00:33,360 --> 00:00:38,320
so just to sort of set a baseline um

00:00:36,559 --> 00:00:39,840
because you know people come to the

00:00:38,320 --> 00:00:42,079
project

00:00:39,840 --> 00:00:43,120
and they're not sure sort of what

00:00:42,079 --> 00:00:45,920
they're working with

00:00:43,120 --> 00:00:46,879
uh spinnaker's ui is called dec it's a

00:00:45,920 --> 00:00:49,440
big code base

00:00:46,879 --> 00:00:51,039
it's in the process of a migration from

00:00:49,440 --> 00:00:54,320
angular one to react

00:00:51,039 --> 00:00:55,600
from javascript to typescript um working

00:00:54,320 --> 00:00:56,960
with people developing deck for the

00:00:55,600 --> 00:00:59,440
first time

00:00:56,960 --> 00:01:00,640
it's often not clear to them which way

00:00:59,440 --> 00:01:04,239
the arrows are going

00:01:00,640 --> 00:01:06,400
here that has a

00:01:04,239 --> 00:01:09,280
bunch of different modules each

00:01:06,400 --> 00:01:12,000
published as a different npm package

00:01:09,280 --> 00:01:14,960
and generally speaking there's the cloud

00:01:12,000 --> 00:01:18,880
provider specific modules so

00:01:14,960 --> 00:01:22,240
at spinnaker amazon that's kubernetes

00:01:18,880 --> 00:01:23,119
so on and then there's the core module

00:01:22,240 --> 00:01:26,159
which includes

00:01:23,119 --> 00:01:27,360
pretty much everything else thing to

00:01:26,159 --> 00:01:30,079
understand here is that

00:01:27,360 --> 00:01:31,200
dec was was built with plugability in

00:01:30,079 --> 00:01:32,960
mind

00:01:31,200 --> 00:01:34,640
you can think of each of these cloud

00:01:32,960 --> 00:01:37,920
provider modules as

00:01:34,640 --> 00:01:39,520
in some way plug-ins not sort of in the

00:01:37,920 --> 00:01:41,680
same way that

00:01:39,520 --> 00:01:43,119
the plug-in framework exists today and

00:01:41,680 --> 00:01:46,399
plug-ins exist today

00:01:43,119 --> 00:01:48,079
but um the code paths that they use to

00:01:46,399 --> 00:01:50,720
extend deck

00:01:48,079 --> 00:01:51,520
have been around for years they're well

00:01:50,720 --> 00:01:55,840
worn

00:01:51,520 --> 00:01:55,840
and you can use them inside your plugins

00:01:56,880 --> 00:02:01,600
um so getting started one of the best

00:01:59,280 --> 00:02:03,360
parts about ui plugin development

00:02:01,600 --> 00:02:05,360
is that the developer environment is

00:02:03,360 --> 00:02:08,000
very good

00:02:05,360 --> 00:02:09,039
chris thielen at netflix wrote an npm

00:02:08,000 --> 00:02:12,080
package called

00:02:09,039 --> 00:02:13,840
spinnaker plugin sdk which makes it

00:02:12,080 --> 00:02:16,560
super simple to get started

00:02:13,840 --> 00:02:18,720
it scaffolds out the plugin for you sets

00:02:16,560 --> 00:02:21,280
up the right build tools

00:02:18,720 --> 00:02:22,640
it also includes development proxy which

00:02:21,280 --> 00:02:25,280
proxies deck

00:02:22,640 --> 00:02:27,760
and serves plug-ins from your computer

00:02:25,280 --> 00:02:29,200
and auto reloads on any changes

00:02:27,760 --> 00:02:31,040
so really the only thing you need to

00:02:29,200 --> 00:02:32,000
bring is a running spinnaker instance

00:02:31,040 --> 00:02:34,480
you don't have to

00:02:32,000 --> 00:02:37,840
clone every service and get them running

00:02:34,480 --> 00:02:37,840
locally or anything like that

00:02:38,480 --> 00:02:41,680
so i want to show you what this looks

00:02:39,519 --> 00:02:42,000
like i'm going to show you how easy it

00:02:41,680 --> 00:02:45,360
is

00:02:42,000 --> 00:02:50,239
to get started building a spinnaker ui

00:02:45,360 --> 00:02:50,879
plugin you just need one command if you

00:02:50,239 --> 00:02:53,599
have

00:02:50,879 --> 00:02:55,360
node installed locally it's likely that

00:02:53,599 --> 00:02:58,560
you already have this tool npx

00:02:55,360 --> 00:03:00,800
um it just allows you to

00:02:58,560 --> 00:03:03,200
run an npm module without having

00:03:00,800 --> 00:03:05,519
installed it first

00:03:03,200 --> 00:03:06,640
so all you need is to provide a name for

00:03:05,519 --> 00:03:09,519
the plug-in so i'm going to choose

00:03:06,640 --> 00:03:09,519
spinnaker summit

00:03:10,159 --> 00:03:13,680
and it'll go from there um it'll just

00:03:12,000 --> 00:03:16,959
install everything you need and

00:03:13,680 --> 00:03:18,720
set up the directories and everything um

00:03:16,959 --> 00:03:20,560
okay i'm actually going to skip ahead

00:03:18,720 --> 00:03:23,360
because that takes a little bit of time

00:03:20,560 --> 00:03:25,519
um i've already installed and scaffolded

00:03:23,360 --> 00:03:27,599
my plug-in

00:03:25,519 --> 00:03:29,360
so i have a spinnaker instance running

00:03:27,599 --> 00:03:32,560
on a kubernetes cluster

00:03:29,360 --> 00:03:35,360
and i've port forwarded a deck and gate

00:03:32,560 --> 00:03:38,319
to my local machine

00:03:35,360 --> 00:03:39,680
um and all i need to sort of get my my

00:03:38,319 --> 00:03:42,640
plugin running

00:03:39,680 --> 00:03:43,280
um is to run two commands so one we have

00:03:42,640 --> 00:03:46,319
to point

00:03:43,280 --> 00:03:50,000
a dev proxy

00:03:46,319 --> 00:03:52,159
at the port where deck is running um

00:03:50,000 --> 00:03:54,799
and ultimately i'm gonna be pointing my

00:03:52,159 --> 00:03:55,200
browser at this proxy and it'll proxy

00:03:54,799 --> 00:04:00,000
deck

00:03:55,200 --> 00:04:02,159
and sort of load my plug-in alongside it

00:04:00,000 --> 00:04:03,040
and then i just have to run yarn watch

00:04:02,159 --> 00:04:04,959
so this will

00:04:03,040 --> 00:04:07,200
build my plugin and watch for any

00:04:04,959 --> 00:04:10,720
changes

00:04:07,200 --> 00:04:10,720
cool so what do we get

00:04:10,879 --> 00:04:14,480
so this is uh spinnaker's ui for anyone

00:04:13,280 --> 00:04:17,120
that doesn't know

00:04:14,480 --> 00:04:18,880
um and typically here's the list of

00:04:17,120 --> 00:04:21,440
stages and there's going to be a new one

00:04:18,880 --> 00:04:22,560
called widgetize stage which is the fake

00:04:21,440 --> 00:04:25,040
stage

00:04:22,560 --> 00:04:26,840
that the scaffolding tool creates with

00:04:25,040 --> 00:04:29,680
gentile stage

00:04:26,840 --> 00:04:31,199
great here we go and it's just some

00:04:29,680 --> 00:04:34,240
simple form fields

00:04:31,199 --> 00:04:37,680
um with some validation

00:04:34,240 --> 00:04:41,680
great so i just show you

00:04:37,680 --> 00:04:44,160
uh what it looks like to build a stage

00:04:41,680 --> 00:04:46,320
the ui plugin so stage config and the

00:04:44,160 --> 00:04:48,720
execution view

00:04:46,320 --> 00:04:49,840
so but often people want to do other

00:04:48,720 --> 00:04:53,680
things

00:04:49,840 --> 00:04:55,759
beyond just a stage so it's it's

00:04:53,680 --> 00:04:57,120
good to start by saying that some things

00:04:55,759 --> 00:05:00,000
just aren't possible

00:04:57,120 --> 00:05:01,520
if you think of a ui as a big tree of

00:05:00,000 --> 00:05:04,320
html

00:05:01,520 --> 00:05:05,360
you just can't place nodes wherever you

00:05:04,320 --> 00:05:06,639
want

00:05:05,360 --> 00:05:10,560
there are really two patterns that

00:05:06,639 --> 00:05:13,919
you're going to need to follow

00:05:10,560 --> 00:05:16,160
the first pattern is it's registries um

00:05:13,919 --> 00:05:18,240
a registry isn't sort of an angular

00:05:16,160 --> 00:05:19,199
concept or react concept or from

00:05:18,240 --> 00:05:22,560
typescript

00:05:19,199 --> 00:05:24,320
and and it's not a unique idea uh just a

00:05:22,560 --> 00:05:28,160
pattern that's followed

00:05:24,320 --> 00:05:30,560
throughout deck um a registry is

00:05:28,160 --> 00:05:32,160
just a container for objects that fit a

00:05:30,560 --> 00:05:34,479
particular interface

00:05:32,160 --> 00:05:35,759
um every cloud provider if we think back

00:05:34,479 --> 00:05:37,039
to those modules that i was talking

00:05:35,759 --> 00:05:39,280
about earlier

00:05:37,039 --> 00:05:41,520
uses the cloud provider registry to

00:05:39,280 --> 00:05:43,600
register themselves into the application

00:05:41,520 --> 00:05:44,800
and so you just push a big map of

00:05:43,600 --> 00:05:47,680
components and config

00:05:44,800 --> 00:05:49,199
options into the registry if you saw

00:05:47,680 --> 00:05:52,240
claims mccoy's talk about

00:05:49,199 --> 00:05:52,880
plugin development he used this to work

00:05:52,240 --> 00:05:56,319
on his

00:05:52,880 --> 00:05:57,120
nomad cloud provider so there's lots of

00:05:56,319 --> 00:06:00,160
registries

00:05:57,120 --> 00:06:02,240
lots of ways to hook into deck you can

00:06:00,160 --> 00:06:03,120
add a new notification type or cloud

00:06:02,240 --> 00:06:07,039
provider

00:06:03,120 --> 00:06:08,400
um as a plugin these last three options

00:06:07,039 --> 00:06:11,199
keep in mind that while it might be

00:06:08,400 --> 00:06:12,960
pretty easy to sort of add the ui for a

00:06:11,199 --> 00:06:14,800
new deployment strategy

00:06:12,960 --> 00:06:17,199
there's no corresponding back-end

00:06:14,800 --> 00:06:19,520
extension point at the moment

00:06:17,199 --> 00:06:20,960
that's not to say that it can't be done

00:06:19,520 --> 00:06:23,840
and maybe you'll be the one that that

00:06:20,960 --> 00:06:23,840
pays the road here

00:06:26,479 --> 00:06:31,039
so we talked about registries the next

00:06:28,319 --> 00:06:32,880
option is overrideable components

00:06:31,039 --> 00:06:34,880
so react components across deck are

00:06:32,880 --> 00:06:36,880
annotated as overrideable

00:06:34,880 --> 00:06:38,319
and these work pretty much exactly as

00:06:36,880 --> 00:06:40,639
you would expect

00:06:38,319 --> 00:06:41,919
you provide a substitute component which

00:06:40,639 --> 00:06:42,960
gets swapped in

00:06:41,919 --> 00:06:46,319
so i'm going to show you what that looks

00:06:42,960 --> 00:06:48,160
like okay so this is dex code base

00:06:46,319 --> 00:06:51,440
i'm going to do a search for the

00:06:48,160 --> 00:06:51,440
overrideable component

00:06:53,840 --> 00:06:58,479
this is all over the place in the code

00:06:56,160 --> 00:06:58,479
base

00:06:59,120 --> 00:07:04,080
and what's cool is that you could add

00:07:02,080 --> 00:07:05,199
this annotation to a component an open

00:07:04,080 --> 00:07:07,599
source

00:07:05,199 --> 00:07:08,479
and override it in a plug-in and and

00:07:07,599 --> 00:07:11,680
keep

00:07:08,479 --> 00:07:14,240
the implementation private

00:07:11,680 --> 00:07:14,800
so what does this look like i have made

00:07:14,240 --> 00:07:18,080
a

00:07:14,800 --> 00:07:19,120
really simple example that takes this

00:07:18,080 --> 00:07:22,960
application i

00:07:19,120 --> 00:07:25,680
icon override and substitutes

00:07:22,960 --> 00:07:27,520
the spinnaker application icon with a

00:07:25,680 --> 00:07:30,000
cat

00:07:27,520 --> 00:07:30,800
it's very simple just looks like this

00:07:30,000 --> 00:07:33,039
and

00:07:30,800 --> 00:07:33,039
and

00:07:34,000 --> 00:07:39,599
here i initialize it so every uh

00:07:37,199 --> 00:07:41,039
deck plug-in gets this initialize method

00:07:39,599 --> 00:07:44,240
which is a good place to run

00:07:41,039 --> 00:07:46,240
sort of this arbitrary code

00:07:44,240 --> 00:07:48,319
so i just inside the override

00:07:46,240 --> 00:07:51,440
registration queue

00:07:48,319 --> 00:07:56,160
register my cat icon

00:07:51,440 --> 00:07:56,160
with the corresponding override key

00:07:56,720 --> 00:07:59,919
and so what does this look like um it

00:07:58,960 --> 00:08:03,039
looks like

00:07:59,919 --> 00:08:05,440
this um cat

00:08:03,039 --> 00:08:05,440
is there

00:08:06,560 --> 00:08:09,840
one last case i wanted to cover um in a

00:08:09,039 --> 00:08:11,199
lot of cases

00:08:09,840 --> 00:08:13,919
you probably don't want to be writing a

00:08:11,199 --> 00:08:16,000
ui um you're not doing anything flashy

00:08:13,919 --> 00:08:17,680
you just need some input fields

00:08:16,000 --> 00:08:20,160
there's a few places where you can write

00:08:17,680 --> 00:08:21,199
some java or kotlin code inside your

00:08:20,160 --> 00:08:23,280
backend plugin

00:08:21,199 --> 00:08:24,800
and define what you want your form

00:08:23,280 --> 00:08:27,120
fields to look like

00:08:24,800 --> 00:08:29,120
and the pre-configured job stage is a

00:08:27,120 --> 00:08:30,319
pretty well known example

00:08:29,120 --> 00:08:33,360
so i wanted to highlight the the

00:08:30,319 --> 00:08:34,880
notification type extension point

00:08:33,360 --> 00:08:37,120
which allows you to define the

00:08:34,880 --> 00:08:40,240
parameters your plugin needs

00:08:37,120 --> 00:08:42,640
so in echo

00:08:40,240 --> 00:08:43,279
there's a spinnaker extension point

00:08:42,640 --> 00:08:46,399
called

00:08:43,279 --> 00:08:49,680
notification agent echo

00:08:46,399 --> 00:08:53,440
is a spinnaker's event service

00:08:49,680 --> 00:08:56,720
and it handles spinnaker notifications

00:08:53,440 --> 00:08:59,519
so when a pipeline is

00:08:56,720 --> 00:09:00,160
starting or has failed or is completed

00:08:59,519 --> 00:09:02,399
um

00:09:00,160 --> 00:09:03,200
you can configure your pipeline to send

00:09:02,399 --> 00:09:06,839
you a message

00:09:03,200 --> 00:09:08,000
via slack or via email that kind of

00:09:06,839 --> 00:09:10,240
thing

00:09:08,000 --> 00:09:12,080
and so the notification agent extension

00:09:10,240 --> 00:09:16,240
point allows you to define

00:09:12,080 --> 00:09:18,560
a new kind of notification type

00:09:16,240 --> 00:09:19,680
and this one here is just an example but

00:09:18,560 --> 00:09:23,120
it allows you to define

00:09:19,680 --> 00:09:26,399
an http http

00:09:23,120 --> 00:09:27,920
uh notification type that just sends a

00:09:26,399 --> 00:09:31,600
post request

00:09:27,920 --> 00:09:33,200
refined endpoint

00:09:31,600 --> 00:09:35,680
um the part that's interesting here is

00:09:33,200 --> 00:09:38,160
that um

00:09:35,680 --> 00:09:39,760
the extension point allows you to define

00:09:38,160 --> 00:09:43,440
a get parameters

00:09:39,760 --> 00:09:46,640
method which is a list of uh parameters

00:09:43,440 --> 00:09:50,720
for the notification um and these

00:09:46,640 --> 00:09:53,600
uh turn into ui form fields

00:09:50,720 --> 00:09:55,760
for your users so what does this look

00:09:53,600 --> 00:09:55,760
like

00:09:57,360 --> 00:10:04,560
so here in the spinnaker pipeline view

00:10:01,360 --> 00:10:08,240
you can add a notification and

00:10:04,560 --> 00:10:10,480
here is our new notification type http

00:10:08,240 --> 00:10:11,839
um and here's the form field that we

00:10:10,480 --> 00:10:14,959
defined

00:10:11,839 --> 00:10:16,800
and it even has the help text so we're

00:10:14,959 --> 00:10:20,240
just going to say

00:10:16,800 --> 00:10:22,240
summit is the url path

00:10:20,240 --> 00:10:24,079
i'm going to send when the pipeline is

00:10:22,240 --> 00:10:27,120
starting

00:10:24,079 --> 00:10:30,640
great and so we did all this without

00:10:27,120 --> 00:10:30,640
writing a line of ui code

00:10:30,720 --> 00:10:34,800
okay thank you um thank you for

00:10:33,519 --> 00:10:36,399
listening

00:10:34,800 --> 00:10:38,720
if you'd like to get started uh i

00:10:36,399 --> 00:10:41,200
suggest checking out the spinnaker

00:10:38,720 --> 00:10:42,000
plugin examples github org i've

00:10:41,200 --> 00:10:45,519
highlighted

00:10:42,000 --> 00:10:47,360
two great starting places here um

00:10:45,519 --> 00:10:49,279
and let me know how it goes you can find

00:10:47,360 --> 00:10:56,320
me on spinnaker slack

00:10:49,279 --> 00:10:56,320

YouTube URL: https://www.youtube.com/watch?v=HFNStSjBKv8


