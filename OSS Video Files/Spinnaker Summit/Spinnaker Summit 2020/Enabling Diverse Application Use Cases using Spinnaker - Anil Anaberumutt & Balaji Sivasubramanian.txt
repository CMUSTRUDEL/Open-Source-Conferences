Title: Enabling Diverse Application Use Cases using Spinnaker - Anil Anaberumutt & Balaji Sivasubramanian
Publication date: 2021-01-12
Playlist: Spinnaker Summit 2020
Description: 
	Cisco's Spinnaker Success Story!

Cisco adopted Spinnaker a couple of years ago and has onboarded more than 1000+ applications. Initially, Cisco started off deploying traditional cloud-native container-based applications to on-prem cloud platforms (OpenShift) and then to public cloud (AWS, GCP). Now Cisco is extending to other technology platforms using custom deployments models available in Spinnaker. Cisco is successfully deploying to Snowflake (SaaS data warehouse), Teradata, and Informatica (Data Analytics platforms) and planning to extend to other use cases in the future. In this session, you will learn about considerations for using Spinnaker for non-cloud platform workloads and best practices and learning from these migrations.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:05,440 --> 00:00:09,120
hi everyone welcome to

00:00:06,879 --> 00:00:10,080
enabling diverse application use cases

00:00:09,120 --> 00:00:12,240
with spinnaker

00:00:10,080 --> 00:00:14,240
a cisco success story session at

00:00:12,240 --> 00:00:16,560
spinnaker live 2020.

00:00:14,240 --> 00:00:18,000
uh my name is malaji siva i'm part of

00:00:16,560 --> 00:00:20,560
the ops mx team

00:00:18,000 --> 00:00:22,320
and with me i have anil from cisco and

00:00:20,560 --> 00:00:23,359
we are we're excited that you're joining

00:00:22,320 --> 00:00:25,439
us today

00:00:23,359 --> 00:00:26,960
um ops max for people who haven't

00:00:25,439 --> 00:00:28,960
familiar with is

00:00:26,960 --> 00:00:30,320
spinnaker a commercial support and

00:00:28,960 --> 00:00:31,840
solution provider

00:00:30,320 --> 00:00:33,600
and i've been part of the spinnaker

00:00:31,840 --> 00:00:35,600
community for the last four years

00:00:33,600 --> 00:00:37,520
it's been a great uh success it's a

00:00:35,600 --> 00:00:39,280
great uh i can see the success of how

00:00:37,520 --> 00:00:40,399
spinnaker has evolved from the initial

00:00:39,280 --> 00:00:42,800
days to now

00:00:40,399 --> 00:00:43,440
and i'm i'm happy to have anila from

00:00:42,800 --> 00:00:46,480
cisco

00:00:43,440 --> 00:00:48,800
who's part of the i.t architect team and

00:00:46,480 --> 00:00:50,160
he's going to talk about their use cases

00:00:48,800 --> 00:00:53,600
and their success story

00:00:50,160 --> 00:00:56,960
anil why don't you say hi i apologize

00:00:53,600 --> 00:00:57,680
my name is anil and i am the technical

00:00:56,960 --> 00:01:00,640
architect

00:00:57,680 --> 00:01:02,000
in cisco systems working in the space of

00:01:00,640 --> 00:01:05,360
continuous delivery

00:01:02,000 --> 00:01:07,600
and devops all right

00:01:05,360 --> 00:01:09,600
so before i give the floor to another

00:01:07,600 --> 00:01:12,960
jew as the main speaker for the session

00:01:09,600 --> 00:01:15,600
i want to give folks a little bit of

00:01:12,960 --> 00:01:17,439
what we have on our on the agenda here i

00:01:15,600 --> 00:01:19,360
will talk about the spinnaker use cases

00:01:17,439 --> 00:01:21,920
and the emerging use cases

00:01:19,360 --> 00:01:23,280
and then and it will talk about how

00:01:21,920 --> 00:01:25,200
cisco is using

00:01:23,280 --> 00:01:27,600
spinnaker and also essentially talk

00:01:25,200 --> 00:01:29,280
about more get into detail about

00:01:27,600 --> 00:01:33,119
how they've extended spinnaker to

00:01:29,280 --> 00:01:33,119
support snowflake deployments

00:01:34,000 --> 00:01:38,880
so spinnaker has been as i said before

00:01:36,720 --> 00:01:40,240
has been widely adopted in the last four

00:01:38,880 --> 00:01:42,960
to five years

00:01:40,240 --> 00:01:45,040
a lot of companies i think hundreds of

00:01:42,960 --> 00:01:47,119
companies have adopted spinnaker

00:01:45,040 --> 00:01:48,960
uh in their production deployments you

00:01:47,119 --> 00:01:50,880
know full list is available

00:01:48,960 --> 00:01:51,920
or at least a partial a large proportion

00:01:50,880 --> 00:01:53,280
of poor list is available at

00:01:51,920 --> 00:01:54,799
spinnaker.io

00:01:53,280 --> 00:01:56,479
under the community section you can see

00:01:54,799 --> 00:01:58,799
the companies that are using spinnaker

00:01:56,479 --> 00:02:00,399
in production you can see everywhere

00:01:58,799 --> 00:02:03,840
anybody from technology

00:02:00,399 --> 00:02:06,799
to retail to banking and

00:02:03,840 --> 00:02:08,640
telecom are using specker and so it's

00:02:06,799 --> 00:02:09,840
definitely applicable to a lot of your

00:02:08,640 --> 00:02:13,360
use cases

00:02:09,840 --> 00:02:16,080
and the one of the reasons why

00:02:13,360 --> 00:02:17,280
uh enterprises choose spinnaker is the

00:02:16,080 --> 00:02:20,800
active community

00:02:17,280 --> 00:02:23,520
it has it's ten thousand plus um

00:02:20,800 --> 00:02:23,840
contributors and participants and also

00:02:23,520 --> 00:02:26,400
the

00:02:23,840 --> 00:02:27,280
the enterprises end users are not just

00:02:26,400 --> 00:02:28,800
participating

00:02:27,280 --> 00:02:30,400
and getting questions answered they

00:02:28,800 --> 00:02:33,120
actually contribute back to the

00:02:30,400 --> 00:02:33,680
community uh for example just last year

00:02:33,120 --> 00:02:35,440
apple

00:02:33,680 --> 00:02:38,160
and nike and chabetz have contributed a

00:02:35,440 --> 00:02:40,000
lot of code to the project

00:02:38,160 --> 00:02:41,599
and speaker is also supported by the

00:02:40,000 --> 00:02:43,360
original um

00:02:41,599 --> 00:02:45,360
you know founders of spinnaker which is

00:02:43,360 --> 00:02:46,879
netflix they still contribute

00:02:45,360 --> 00:02:48,720
and contribute a lot to the to the

00:02:46,879 --> 00:02:50,879
project along with google

00:02:48,720 --> 00:02:53,120
they are two big contributors but also

00:02:50,879 --> 00:02:56,640
supported by other

00:02:53,120 --> 00:02:58,640
service providers or other

00:02:56,640 --> 00:03:00,879
cloud providers like amazon and

00:02:58,640 --> 00:03:02,959
microsoft along with companies like ops

00:03:00,879 --> 00:03:03,680
max and armory so it's a pretty vibrant

00:03:02,959 --> 00:03:06,879
community

00:03:03,680 --> 00:03:08,080
and it has gotten wide a little bit of

00:03:06,879 --> 00:03:11,120
adoption

00:03:08,080 --> 00:03:14,319
so what are the primary use cases

00:03:11,120 --> 00:03:17,440
that um that enterprises look for

00:03:14,319 --> 00:03:19,599
for uh spinnaker so one of the drivers

00:03:17,440 --> 00:03:21,440
for spinnaker adoption is that i'm

00:03:19,599 --> 00:03:23,200
adopting microservices i'm going for

00:03:21,440 --> 00:03:24,560
more with the microservices so that i

00:03:23,200 --> 00:03:26,239
want to adopt

00:03:24,560 --> 00:03:28,239
technologies like kubernetes or

00:03:26,239 --> 00:03:30,319
openshift to deploy my containers

00:03:28,239 --> 00:03:31,360
another use case is i'm migrating to

00:03:30,319 --> 00:03:34,159
cloud

00:03:31,360 --> 00:03:35,440
and you know aws or gke or multiple

00:03:34,159 --> 00:03:38,159
clouds for that matter

00:03:35,440 --> 00:03:39,040
and so i need a unifying tool to to

00:03:38,159 --> 00:03:41,360
deploy to this

00:03:39,040 --> 00:03:43,599
um to these platforms many existing

00:03:41,360 --> 00:03:44,799
tools with jenkins or offline script is

00:03:43,599 --> 00:03:46,319
just not going to scale

00:03:44,799 --> 00:03:47,840
because there's too many of the micro

00:03:46,319 --> 00:03:51,040
services coming online or

00:03:47,840 --> 00:03:52,560
too many cloud providers

00:03:51,040 --> 00:03:54,319
information i need to parse in my

00:03:52,560 --> 00:03:56,080
scripts it's not worth the hassle

00:03:54,319 --> 00:03:57,920
so spinnaker really provides

00:03:56,080 --> 00:03:59,599
out-of-the-box solutions for

00:03:57,920 --> 00:04:01,519
multiple cloud deployments container

00:03:59,599 --> 00:04:03,680
deployments not only deployment but also

00:04:01,519 --> 00:04:06,879
rollback etcetera and that's why

00:04:03,680 --> 00:04:09,760
it has been widely popular and

00:04:06,879 --> 00:04:11,599
the other big part of why spinnaker is

00:04:09,760 --> 00:04:12,480
the ability to for spinnaker to be able

00:04:11,599 --> 00:04:14,560
to automate

00:04:12,480 --> 00:04:16,239
end to end from core checking all the

00:04:14,560 --> 00:04:18,720
way to production and

00:04:16,239 --> 00:04:20,000
said roll back and this is not possible

00:04:18,720 --> 00:04:21,919
today with many of the existing

00:04:20,000 --> 00:04:23,600
technology maybe you've automated the ci

00:04:21,919 --> 00:04:24,800
portion with jenkins but not necessarily

00:04:23,600 --> 00:04:27,120
the cd portion

00:04:24,800 --> 00:04:28,320
literally another completely

00:04:27,120 --> 00:04:30,639
disconnected process

00:04:28,320 --> 00:04:32,560
offline process and you don't have any

00:04:30,639 --> 00:04:35,280
visibility where a specific particular

00:04:32,560 --> 00:04:37,759
checking is there or a particular record

00:04:35,280 --> 00:04:39,120
update is going on so spinnaker provides

00:04:37,759 --> 00:04:41,759
you the ability to automate

00:04:39,120 --> 00:04:43,120
end to end and also it provides you the

00:04:41,759 --> 00:04:46,400
ability to integrate

00:04:43,120 --> 00:04:48,080
um processes like approvals as part of

00:04:46,400 --> 00:04:49,919
the pipelines and this makes it a very

00:04:48,080 --> 00:04:52,960
robust system where you can have

00:04:49,919 --> 00:04:54,800
end-to-end visibility

00:04:52,960 --> 00:04:56,720
and like i said even though people have

00:04:54,800 --> 00:04:58,880
traditionally looked to spinnaker when

00:04:56,720 --> 00:05:00,639
they try to adopt containers

00:04:58,880 --> 00:05:02,479
you can absolutely use it for update you

00:05:00,639 --> 00:05:05,120
know using you know

00:05:02,479 --> 00:05:06,000
vm based application updates as well as

00:05:05,120 --> 00:05:09,280
functions

00:05:06,000 --> 00:05:12,479
lambda and those kind of new emerging

00:05:09,280 --> 00:05:12,479
use cases that's coming along

00:05:12,720 --> 00:05:16,080
so that's for the for what's the

00:05:14,320 --> 00:05:16,720
majority of the use cases majority of

00:05:16,080 --> 00:05:18,800
the customers are

00:05:16,720 --> 00:05:19,840
using it for but there are also emerging

00:05:18,800 --> 00:05:22,639
use cases that

00:05:19,840 --> 00:05:24,240
we are we have seen a lot of one number

00:05:22,639 --> 00:05:27,440
one is the infrastructure

00:05:24,240 --> 00:05:28,160
uh updates as part of spinnaker so as

00:05:27,440 --> 00:05:30,240
you're

00:05:28,160 --> 00:05:32,240
you know modernizing your ci cd you're

00:05:30,240 --> 00:05:34,800
also looking at infrastructure score

00:05:32,240 --> 00:05:37,199
so you want to update your aws or your

00:05:34,800 --> 00:05:38,000
kubernetes etc on demand you want to be

00:05:37,199 --> 00:05:40,720
able to maintain

00:05:38,000 --> 00:05:42,479
a score for get get version checked and

00:05:40,720 --> 00:05:45,360
also be able to update them

00:05:42,479 --> 00:05:46,479
so popular tool used in this case is

00:05:45,360 --> 00:05:48,320
terraform

00:05:46,479 --> 00:05:49,600
and uh spinnaker has integration with

00:05:48,320 --> 00:05:52,960
terraform that

00:05:49,600 --> 00:05:54,240
uh option x has a made it available for

00:05:52,960 --> 00:05:56,400
oss snecker

00:05:54,240 --> 00:05:58,080
and that allows you to update your

00:05:56,400 --> 00:06:00,880
infrastructure along with your

00:05:58,080 --> 00:06:02,160
applications the use case is for example

00:06:00,880 --> 00:06:05,919
you want to bring up your test

00:06:02,160 --> 00:06:07,600
cluster and test a vpc network before

00:06:05,919 --> 00:06:09,840
you deploy your testing

00:06:07,600 --> 00:06:11,440
test artifacts and then you test the

00:06:09,840 --> 00:06:13,039
hard artifacts and then once you're done

00:06:11,440 --> 00:06:15,600
with the testing you

00:06:13,039 --> 00:06:16,560
remove your test infrastructure like

00:06:15,600 --> 00:06:18,560
test vpc

00:06:16,560 --> 00:06:19,600
so you can do that with one single

00:06:18,560 --> 00:06:23,039
pipeline

00:06:19,600 --> 00:06:25,520
with the terraform integration the other

00:06:23,039 --> 00:06:27,520
use case is around updating big data

00:06:25,520 --> 00:06:29,120
platforms big data platform being used

00:06:27,520 --> 00:06:31,120
everywhere as big data

00:06:29,120 --> 00:06:32,720
data is becoming one of the key part of

00:06:31,120 --> 00:06:35,199
every organization

00:06:32,720 --> 00:06:37,840
and having a way to update the big data

00:06:35,199 --> 00:06:39,840
maybe etl changes or schema changes

00:06:37,840 --> 00:06:42,400
and you want to bring some sort of a

00:06:39,840 --> 00:06:45,199
github process to that um

00:06:42,400 --> 00:06:45,759
to to allow for auditability and control

00:06:45,199 --> 00:06:47,759
of

00:06:45,759 --> 00:06:49,759
all of these things today it's primarily

00:06:47,759 --> 00:06:53,120
done offline and so it's very

00:06:49,759 --> 00:06:54,080
difficult to difficult to maintain

00:06:53,120 --> 00:06:56,960
control of that

00:06:54,080 --> 00:06:57,840
so that's one of the big thing that that

00:06:56,960 --> 00:07:01,440
has come up is

00:06:57,840 --> 00:07:03,840
update updates of the big data platforms

00:07:01,440 --> 00:07:05,039
and cisco and ania will talk more about

00:07:03,840 --> 00:07:08,639
that because that's something they're

00:07:05,039 --> 00:07:10,880
doing very very much today in the other

00:07:08,639 --> 00:07:12,960
use cases on databases same similar

00:07:10,880 --> 00:07:14,880
thing here you know you want to do a

00:07:12,960 --> 00:07:16,080
version in control of the schema changes

00:07:14,880 --> 00:07:18,080
in databases

00:07:16,080 --> 00:07:19,599
and you you want to be able to do a

00:07:18,080 --> 00:07:22,720
detox process again to

00:07:19,599 --> 00:07:25,199
be able to check in dev and staging

00:07:22,720 --> 00:07:27,120
and a production schema changes and you

00:07:25,199 --> 00:07:28,160
have tools like leonardo and liquibase

00:07:27,120 --> 00:07:29,840
which does that

00:07:28,160 --> 00:07:32,319
what you've done here is essentially

00:07:29,840 --> 00:07:34,560
integrated spinnaker with that platforms

00:07:32,319 --> 00:07:36,160
that means that you get the full benefit

00:07:34,560 --> 00:07:37,440
of spinnaker in terms of role based

00:07:36,160 --> 00:07:40,720
access control

00:07:37,440 --> 00:07:42,080
um ability to you know do approvals and

00:07:40,720 --> 00:07:44,800
do many of the things that i talked

00:07:42,080 --> 00:07:46,639
about earlier on spinnaker advantages

00:07:44,800 --> 00:07:49,039
and last but not the least use cases

00:07:46,639 --> 00:07:49,280
around spinnaker is a very extensible

00:07:49,039 --> 00:07:52,479
and

00:07:49,280 --> 00:07:54,000
flexible platform so if you have your

00:07:52,479 --> 00:07:55,840
existing process that's not doesn't

00:07:54,000 --> 00:07:57,199
quite fit in into the existing targets

00:07:55,840 --> 00:07:59,440
or spinnaker etc

00:07:57,199 --> 00:08:00,960
for example maybe you're you're not yet

00:07:59,440 --> 00:08:02,000
um ready to go for immutable

00:08:00,960 --> 00:08:04,400
infrastructure

00:08:02,000 --> 00:08:05,360
uh a immutable model for your

00:08:04,400 --> 00:08:07,039
application

00:08:05,360 --> 00:08:08,879
maybe if for some you're done it with

00:08:07,039 --> 00:08:10,720
containers but not for others

00:08:08,879 --> 00:08:13,039
you can still you know use your existing

00:08:10,720 --> 00:08:14,400
scripts and to update an application for

00:08:13,039 --> 00:08:17,759
example in a vm

00:08:14,400 --> 00:08:18,960
and and and still get the benefit of an

00:08:17,759 --> 00:08:21,680
end-to-end visibility

00:08:18,960 --> 00:08:22,319
into and control end-to-end auditability

00:08:21,680 --> 00:08:24,319
of your

00:08:22,319 --> 00:08:25,520
updates to these new to these legacy

00:08:24,319 --> 00:08:27,919
applications

00:08:25,520 --> 00:08:28,879
so definitely spinnaker is a use case

00:08:27,919 --> 00:08:31,120
for that

00:08:28,879 --> 00:08:32,000
and those are some of the use cases now

00:08:31,120 --> 00:08:35,039
i probably have

00:08:32,000 --> 00:08:37,440
missed a few and and feel free to ask

00:08:35,039 --> 00:08:39,200
questions in the in the q a panel

00:08:37,440 --> 00:08:41,680
and we will definitely try to address

00:08:39,200 --> 00:08:42,880
that and or you can email us afterwards

00:08:41,680 --> 00:08:45,360
and we would love to hear that

00:08:42,880 --> 00:08:45,760
information back so with that i'm going

00:08:45,360 --> 00:08:49,120
to

00:08:45,760 --> 00:08:51,440
turn the uh presentation over to anil

00:08:49,120 --> 00:08:53,519
uh who's going to talk about how they're

00:08:51,440 --> 00:08:55,040
doing spinnaker cisco and uh

00:08:53,519 --> 00:08:57,920
how they're extending their spinnaker

00:08:55,040 --> 00:08:57,920
and they'll take it away

00:08:58,080 --> 00:09:01,440
hey thanks biology uh today i'm gonna

00:09:00,720 --> 00:09:04,720
talk about

00:09:01,440 --> 00:09:07,279
uh the how we extended spinnaker

00:09:04,720 --> 00:09:09,600
into other workloads like snowflake that

00:09:07,279 --> 00:09:11,600
is a sass platform

00:09:09,600 --> 00:09:13,120
but before i start i want to talk about

00:09:11,600 --> 00:09:17,279
uh where we stand

00:09:13,120 --> 00:09:17,279
in terms of spinnaker in cisco

00:09:18,080 --> 00:09:24,720
so um we started our journey

00:09:21,360 --> 00:09:26,640
with spinnaker back in 2016 and 17 but

00:09:24,720 --> 00:09:28,399
actually we went live in terms of

00:09:26,640 --> 00:09:32,640
spinnaker in production

00:09:28,399 --> 00:09:33,519
back in 2018 we went live with single

00:09:32,640 --> 00:09:36,800
instance

00:09:33,519 --> 00:09:38,640
but as we progress we have currently 17

00:09:36,800 --> 00:09:39,360
instances of spinnaker running in

00:09:38,640 --> 00:09:41,760
production

00:09:39,360 --> 00:09:42,959
when i say 17 instances of production a

00:09:41,760 --> 00:09:45,839
spinnaker instance

00:09:42,959 --> 00:09:47,760
they are high ha that is i have eight

00:09:45,839 --> 00:09:48,959
instance running in one data center and

00:09:47,760 --> 00:09:50,800
another passive

00:09:48,959 --> 00:09:53,200
eight instances running in other data

00:09:50,800 --> 00:09:54,560
center and the other instances are

00:09:53,200 --> 00:09:57,680
basically used for

00:09:54,560 --> 00:10:00,000
vr specifically on disaster recovery and

00:09:57,680 --> 00:10:03,440
resiliency

00:10:00,000 --> 00:10:06,720
uh currently we have around 150

00:10:03,440 --> 00:10:07,600
applications using spinnaker uh we have

00:10:06,720 --> 00:10:11,040
more than

00:10:07,600 --> 00:10:13,680
4 000 pipelines um

00:10:11,040 --> 00:10:14,240
that are being used across thousands of

00:10:13,680 --> 00:10:16,240
software

00:10:14,240 --> 00:10:18,079
thousand plus softwares to do their

00:10:16,240 --> 00:10:19,279
deployments in various

00:10:18,079 --> 00:10:22,079
environments that is multiple

00:10:19,279 --> 00:10:23,920
environments non-production production

00:10:22,079 --> 00:10:26,720
infrastructure as a code there are

00:10:23,920 --> 00:10:29,519
different areas that they deploy

00:10:26,720 --> 00:10:32,000
we have currently 800 active users using

00:10:29,519 --> 00:10:34,240
spinnaker across all the instances

00:10:32,000 --> 00:10:35,200
and the most important thing is we have

00:10:34,240 --> 00:10:38,480
exponentially

00:10:35,200 --> 00:10:39,920
grown in terms of using spinnaker or

00:10:38,480 --> 00:10:41,600
leveraging expenditure

00:10:39,920 --> 00:10:44,320
to do the deployments we have more than

00:10:41,600 --> 00:10:46,720
30 000 plus in the last year itself

00:10:44,320 --> 00:10:48,880
so it's exponentially growing as we as

00:10:46,720 --> 00:10:51,360
the days passing

00:10:48,880 --> 00:10:52,240
currently we uh the platforms that we

00:10:51,360 --> 00:10:54,160
are using

00:10:52,240 --> 00:10:55,279
and the application teams that are

00:10:54,160 --> 00:10:58,240
deploying is

00:10:55,279 --> 00:10:59,519
mainly for uh openshift that is our

00:10:58,240 --> 00:11:02,880
internal cloud

00:10:59,519 --> 00:11:05,200
but the application teams also leverage

00:11:02,880 --> 00:11:06,800
spinnaker to do the deployments to

00:11:05,200 --> 00:11:08,480
different other platforms like

00:11:06,800 --> 00:11:10,880
informatica teradata

00:11:08,480 --> 00:11:12,640
s3 or snowflake that we're going to talk

00:11:10,880 --> 00:11:15,200
about today

00:11:12,640 --> 00:11:16,480
so why did we choose spinnaker a reason

00:11:15,200 --> 00:11:18,480
for going with spinnaker

00:11:16,480 --> 00:11:19,519
is for that it is a cloud-native

00:11:18,480 --> 00:11:22,720
solution

00:11:19,519 --> 00:11:24,560
uh it's like a cloud provider agnostic

00:11:22,720 --> 00:11:27,600
spinnaker treats cloud native deployment

00:11:24,560 --> 00:11:29,839
strategies as a first-class citizens

00:11:27,600 --> 00:11:31,040
enables best practices such as immutable

00:11:29,839 --> 00:11:33,920
image

00:11:31,040 --> 00:11:35,920
canary deployments pipelines automated

00:11:33,920 --> 00:11:37,519
releases and automated role marks

00:11:35,920 --> 00:11:39,200
there's a lot of features that it

00:11:37,519 --> 00:11:43,680
provides and these are some of the

00:11:39,200 --> 00:11:46,160
key reasons why we chose spinnaker

00:11:43,680 --> 00:11:48,720
so let's deep dive into uh how we

00:11:46,160 --> 00:11:50,639
extended spinnaker for snowflake

00:11:48,720 --> 00:11:52,480
before that before we get into the

00:11:50,639 --> 00:11:54,240
details i want to talk about what

00:11:52,480 --> 00:11:57,360
exactly is a snowflake

00:11:54,240 --> 00:11:59,279
snowflake is a sas product uh basically

00:11:57,360 --> 00:12:01,440
snowflake is a elastic

00:11:59,279 --> 00:12:02,399
on-demand data warehouse that is

00:12:01,440 --> 00:12:05,279
completely

00:12:02,399 --> 00:12:06,240
sql based and provides benefits of zero

00:12:05,279 --> 00:12:08,639
operational overhead

00:12:06,240 --> 00:12:11,200
and a lot of other consumption features

00:12:08,639 --> 00:12:14,240
that you can use

00:12:11,200 --> 00:12:15,040
so currently we in cisco we are

00:12:14,240 --> 00:12:17,680
leveraging

00:12:15,040 --> 00:12:18,720
uh snowflake basically for uh data

00:12:17,680 --> 00:12:21,600
warehouse and

00:12:18,720 --> 00:12:23,279
data analytics that is we collaborate

00:12:21,600 --> 00:12:25,760
all the data sets

00:12:23,279 --> 00:12:26,880
combine them from on-prem data source

00:12:25,760 --> 00:12:29,600
into clouds

00:12:26,880 --> 00:12:31,519
cloud source like snowflake and then we

00:12:29,600 --> 00:12:33,760
use it for analytics

00:12:31,519 --> 00:12:34,560
but snowflake can be used for can be

00:12:33,760 --> 00:12:37,519
hosted

00:12:34,560 --> 00:12:38,240
for data lake data engineering data

00:12:37,519 --> 00:12:39,920
exchange

00:12:38,240 --> 00:12:43,680
data application data science there's a

00:12:39,920 --> 00:12:46,079
lot of things that teams can do on that

00:12:43,680 --> 00:12:47,519
so when we started our journey in terms

00:12:46,079 --> 00:12:50,320
of snowflake a lot of

00:12:47,519 --> 00:12:50,800
application team had challenges in terms

00:12:50,320 --> 00:12:53,519
of

00:12:50,800 --> 00:12:54,320
bringing the data sets and the source so

00:12:53,519 --> 00:12:56,959
that's where

00:12:54,320 --> 00:12:58,399
they had to work on custom scripts

00:12:56,959 --> 00:13:00,720
custom code

00:12:58,399 --> 00:13:01,760
custom apis to take care of those

00:13:00,720 --> 00:13:04,320
deployments

00:13:01,760 --> 00:13:05,200
there was no standard deployment process

00:13:04,320 --> 00:13:06,880
and

00:13:05,200 --> 00:13:08,240
the most important thing was there was

00:13:06,880 --> 00:13:10,560
no consistent

00:13:08,240 --> 00:13:12,560
compliance was followed across all the

00:13:10,560 --> 00:13:15,440
services so they needed

00:13:12,560 --> 00:13:18,639
to submit those audit reports and manage

00:13:15,440 --> 00:13:23,040
those gates and compliance

00:13:18,639 --> 00:13:25,839
so this is how we uh started snowflake

00:13:23,040 --> 00:13:26,240
so why why one of the questions that we

00:13:25,839 --> 00:13:28,639
keep

00:13:26,240 --> 00:13:30,079
uh getting uh asked is why is spinnaker

00:13:28,639 --> 00:13:32,560
for snowflake

00:13:30,079 --> 00:13:34,079
so we are we were already leveraging

00:13:32,560 --> 00:13:36,560
snowflake floor other

00:13:34,079 --> 00:13:38,560
platforms so it made more sense for the

00:13:36,560 --> 00:13:41,120
application developers to provide a

00:13:38,560 --> 00:13:43,199
unified developer experience

00:13:41,120 --> 00:13:45,279
basically make sure the deployment

00:13:43,199 --> 00:13:48,399
process that the application teams

00:13:45,279 --> 00:13:50,560
are working on is seamless it's painless

00:13:48,399 --> 00:13:53,440
and they can trigger deployments on

00:13:50,560 --> 00:13:55,920
demand and at any time

00:13:53,440 --> 00:13:57,600
and one of the key things or one of the

00:13:55,920 --> 00:13:58,560
key requirements from the application

00:13:57,600 --> 00:14:01,199
team was

00:13:58,560 --> 00:14:02,160
to make sure they manage the quality

00:14:01,199 --> 00:14:04,240
aspects of

00:14:02,160 --> 00:14:07,440
every changes or the products or the

00:14:04,240 --> 00:14:09,600
services that they are building into

00:14:07,440 --> 00:14:11,440
and as the application teams are working

00:14:09,600 --> 00:14:13,839
on multiple platforms or multiple

00:14:11,440 --> 00:14:15,600
application they also wanted to have

00:14:13,839 --> 00:14:16,480
actionable pipelines where they wanted

00:14:15,600 --> 00:14:19,839
to leverage

00:14:16,480 --> 00:14:21,600
uh deployment strategies right uh like

00:14:19,839 --> 00:14:23,040
new green deployments they also wanted

00:14:21,600 --> 00:14:24,800
to manage uh how

00:14:23,040 --> 00:14:26,959
how they can use highlander or they

00:14:24,800 --> 00:14:27,600
wanted to do canary analysis so there

00:14:26,959 --> 00:14:29,600
were a lot of

00:14:27,600 --> 00:14:31,440
requirements in terms of not only

00:14:29,600 --> 00:14:32,000
deployment but also wanted to take care

00:14:31,440 --> 00:14:35,279
of

00:14:32,000 --> 00:14:37,440
things after the deployment was done

00:14:35,279 --> 00:14:38,399
but i think that one of the major things

00:14:37,440 --> 00:14:41,680
was

00:14:38,399 --> 00:14:44,000
we worked on a transactional

00:14:41,680 --> 00:14:45,199
web service which provided a self

00:14:44,000 --> 00:14:47,279
provisioning for

00:14:45,199 --> 00:14:49,120
the application team so what does that

00:14:47,279 --> 00:14:52,240
mean me as a developer

00:14:49,120 --> 00:14:52,959
i can go and request for any kind of

00:14:52,240 --> 00:14:56,000
stack for

00:14:52,959 --> 00:14:57,680
any platforms at one single place that

00:14:56,000 --> 00:15:00,160
was one of the biggest requirements that

00:14:57,680 --> 00:15:00,160
we had

00:15:01,279 --> 00:15:05,600
let me walk you through a simple uh cd

00:15:04,639 --> 00:15:08,240
pipeline

00:15:05,600 --> 00:15:09,040
that we are leveraging in the in our

00:15:08,240 --> 00:15:12,480
world

00:15:09,040 --> 00:15:15,600
right so as a developer i go request

00:15:12,480 --> 00:15:18,079
for a stack that's where we say oh we

00:15:15,600 --> 00:15:20,079
we have provided a console where you can

00:15:18,079 --> 00:15:22,240
go and request for a stack that is where

00:15:20,079 --> 00:15:24,480
developers do that and once they get the

00:15:22,240 --> 00:15:25,839
stack they start working on the code

00:15:24,480 --> 00:15:27,760
changes it could be

00:15:25,839 --> 00:15:29,519
open shift it could be snowflake or it

00:15:27,760 --> 00:15:31,040
could be any of the other platforms they

00:15:29,519 --> 00:15:32,720
make their code changes they commit

00:15:31,040 --> 00:15:34,079
their changes into gate or any of the

00:15:32,720 --> 00:15:36,399
source repository

00:15:34,079 --> 00:15:38,399
then they use continuous integration and

00:15:36,399 --> 00:15:38,880
build system to build their artifactory

00:15:38,399 --> 00:15:42,000
or

00:15:38,880 --> 00:15:44,480
they build their binary binary artifacts

00:15:42,000 --> 00:15:46,720
and they push the changes into the

00:15:44,480 --> 00:15:47,839
docker registry or artifactory registry

00:15:46,720 --> 00:15:50,480
or any of those

00:15:47,839 --> 00:15:51,519
registries that they have the most

00:15:50,480 --> 00:15:53,680
important thing is

00:15:51,519 --> 00:15:55,199
how do we orchestrate these deployments

00:15:53,680 --> 00:15:57,440
of these binaries

00:15:55,199 --> 00:15:59,519
uh we use spinnaker to do the

00:15:57,440 --> 00:16:00,639
orchestration so spinnaker basically

00:15:59,519 --> 00:16:03,279
takes care of

00:16:00,639 --> 00:16:03,920
orchestrating the deployments into

00:16:03,279 --> 00:16:05,600
multiple

00:16:03,920 --> 00:16:07,440
uh environments that is the target

00:16:05,600 --> 00:16:09,360
environments the target environments

00:16:07,440 --> 00:16:11,519
could be as we spoke about openshift

00:16:09,360 --> 00:16:13,199
it could be snowflake it could be any of

00:16:11,519 --> 00:16:15,199
the other salesforce or

00:16:13,199 --> 00:16:17,120
sas platforms any of the sas platforms

00:16:15,199 --> 00:16:18,959
or even for a local vm

00:16:17,120 --> 00:16:22,000
you know they can do their orchestration

00:16:18,959 --> 00:16:25,120
to that so this is a typical

00:16:22,000 --> 00:16:27,519
uh cd pipeline that we provide

00:16:25,120 --> 00:16:30,959
and the teams have the ability of

00:16:27,519 --> 00:16:30,959
customizing this as well

00:16:33,199 --> 00:16:37,199
so let's talk about how a spinnaker

00:16:36,480 --> 00:16:40,639
pipeline

00:16:37,199 --> 00:16:42,320
looks for in a snowflake environment

00:16:40,639 --> 00:16:43,920
so this is a sample production

00:16:42,320 --> 00:16:45,839
deployment if you see

00:16:43,920 --> 00:16:46,959
we have a configuration where we trigger

00:16:45,839 --> 00:16:49,360
the deployment

00:16:46,959 --> 00:16:50,000
pipelines are triggered using red hooks

00:16:49,360 --> 00:16:51,600
they use

00:16:50,000 --> 00:16:53,040
all the secrets that are back and

00:16:51,600 --> 00:16:55,600
everything is being set

00:16:53,040 --> 00:16:56,800
for every pipeline and then if you see

00:16:55,600 --> 00:16:59,920
the second stage that is

00:16:56,800 --> 00:17:02,720
uh the app the pipelines will ensure

00:16:59,920 --> 00:17:04,160
and validate if there is a sox

00:17:02,720 --> 00:17:06,799
validation or a compliance

00:17:04,160 --> 00:17:08,160
validation has been met and then only it

00:17:06,799 --> 00:17:10,799
will go to the next step

00:17:08,160 --> 00:17:11,439
of getting the right set of approvals

00:17:10,799 --> 00:17:13,439
that is

00:17:11,439 --> 00:17:15,199
whether there could be a downtime if the

00:17:13,439 --> 00:17:15,760
changes have been made or there could be

00:17:15,199 --> 00:17:18,000
a

00:17:15,760 --> 00:17:19,439
the change could go in a specific window

00:17:18,000 --> 00:17:22,400
or not so those are the

00:17:19,439 --> 00:17:24,559
uh approvals that the pipeline will

00:17:22,400 --> 00:17:27,280
enable as a part of the department and

00:17:24,559 --> 00:17:27,839
last if you see there is a snowflake

00:17:27,280 --> 00:17:29,760
stage

00:17:27,839 --> 00:17:31,200
that we have developed using the custom

00:17:29,760 --> 00:17:33,679
station that we have

00:17:31,200 --> 00:17:34,799
uh done so basically this is a simple

00:17:33,679 --> 00:17:37,840
production pipeline

00:17:34,799 --> 00:17:39,840
as a user i will walk through uh

00:17:37,840 --> 00:17:41,840
when i trigger a deployment it ensures

00:17:39,840 --> 00:17:43,600
there's a runtime compliance rest

00:17:41,840 --> 00:17:45,280
in-built gates approvals everything is

00:17:43,600 --> 00:17:47,600
being meant before it goes and deploys

00:17:45,280 --> 00:17:49,760
into western ocean

00:17:47,600 --> 00:17:51,280
and all teams are leveraging the

00:17:49,760 --> 00:17:52,240
self-service provisioning that we have

00:17:51,280 --> 00:17:56,160
provided to

00:17:52,240 --> 00:17:56,160
get these pipelines on demand

00:17:56,720 --> 00:18:00,799
so how did we go about developing this

00:17:59,760 --> 00:18:04,000
custom stage

00:18:00,799 --> 00:18:05,360
for snowflake so uh we leverage

00:18:04,000 --> 00:18:07,200
uh some of the guidelines that was

00:18:05,360 --> 00:18:09,840
provided by spinnaker community

00:18:07,200 --> 00:18:10,559
uh to implement snowflake in uh in our

00:18:09,840 --> 00:18:13,760
area

00:18:10,559 --> 00:18:16,400
and also optionx has helped us

00:18:13,760 --> 00:18:18,400
create a new stage uh you need to make a

00:18:16,400 --> 00:18:20,400
back-end changes to orca

00:18:18,400 --> 00:18:21,520
to implement the logic of the stage if

00:18:20,400 --> 00:18:23,600
you see we have

00:18:21,520 --> 00:18:24,799
i have put in a snippet of the orca

00:18:23,600 --> 00:18:27,120
local.ml

00:18:24,799 --> 00:18:28,559
how exactly we have built that we have

00:18:27,120 --> 00:18:30,640
ensure that there is a specific

00:18:28,559 --> 00:18:31,679
artifactory where exactly the registry

00:18:30,640 --> 00:18:34,160
needs to be there

00:18:31,679 --> 00:18:35,760
how the manifest is being built how the

00:18:34,160 --> 00:18:38,640
dynamic properties

00:18:35,760 --> 00:18:40,160
are being pushed into the system that is

00:18:38,640 --> 00:18:42,160
you could have a static data

00:18:40,160 --> 00:18:43,200
you could have a dynamic data you could

00:18:42,160 --> 00:18:45,919
have a runtime

00:18:43,200 --> 00:18:46,240
pull those data into into the system of

00:18:45,919 --> 00:18:49,600
the

00:18:46,240 --> 00:18:52,160
custom stage snowflake so

00:18:49,600 --> 00:18:52,799
we spent a lot lot of time understanding

00:18:52,160 --> 00:18:55,039
and

00:18:52,799 --> 00:18:56,000
figuring it how the deployment would be

00:18:55,039 --> 00:18:58,320
triggered to snowflake

00:18:56,000 --> 00:19:00,240
and how we make sure that the data is

00:18:58,320 --> 00:19:02,000
secure so one of the things we did was

00:19:00,240 --> 00:19:05,039
integrating the stage

00:19:02,000 --> 00:19:07,679
snowflake stage into wall hashicom wall

00:19:05,039 --> 00:19:09,120
we ensure that all the configurations or

00:19:07,679 --> 00:19:11,200
the ammos are

00:19:09,120 --> 00:19:13,120
in the world so we leverage dynamically

00:19:11,200 --> 00:19:14,880
pulling those configs and the animals

00:19:13,120 --> 00:19:16,160
from the world as a part of runtime

00:19:14,880 --> 00:19:19,919
deployments

00:19:16,160 --> 00:19:22,000
and this is a lot of help was provided

00:19:19,919 --> 00:19:23,600
from the community in terms of how to

00:19:22,000 --> 00:19:24,320
build the custom stage and there are

00:19:23,600 --> 00:19:26,480
samples

00:19:24,320 --> 00:19:28,880
and that is being hosted on spinnaker.io

00:19:26,480 --> 00:19:28,880
as well

00:19:30,080 --> 00:19:34,720
so this was that was how we built went

00:19:32,559 --> 00:19:36,880
through the custom stage of snowflake

00:19:34,720 --> 00:19:39,440
but also i think i want to talk about

00:19:36,880 --> 00:19:42,559
how the developers got onboarded

00:19:39,440 --> 00:19:44,720
in terms of leveraging these uh stacks

00:19:42,559 --> 00:19:46,240
so we have developed as i keep as i told

00:19:44,720 --> 00:19:48,400
you that there was a transactional

00:19:46,240 --> 00:19:49,840
website that

00:19:48,400 --> 00:19:51,919
experience that we have built for

00:19:49,840 --> 00:19:53,760
developer that is nothing but a unified

00:19:51,919 --> 00:19:54,240
developer experience across the platform

00:19:53,760 --> 00:19:56,320
which

00:19:54,240 --> 00:19:57,760
provides not only internet cloud and sas

00:19:56,320 --> 00:20:00,160
so as a developer i can go

00:19:57,760 --> 00:20:01,760
request for a file plan find out what

00:20:00,160 --> 00:20:02,640
are the software that i'm being deployed

00:20:01,760 --> 00:20:05,039
from my team

00:20:02,640 --> 00:20:06,720
how the changes are being done uh

00:20:05,039 --> 00:20:07,600
there's a big community in terms of

00:20:06,720 --> 00:20:09,919
using

00:20:07,600 --> 00:20:11,360
leveraging best practices there are

00:20:09,919 --> 00:20:14,240
guides and steps of

00:20:11,360 --> 00:20:16,320
how to go about developing building and

00:20:14,240 --> 00:20:19,039
triggering deployments

00:20:16,320 --> 00:20:20,000
we also have provided console if you

00:20:19,039 --> 00:20:21,919
look at each of these

00:20:20,000 --> 00:20:23,760
meta but not only that we also provided

00:20:21,919 --> 00:20:26,960
something called code ctl that is

00:20:23,760 --> 00:20:28,880
a cli command line interface where me as

00:20:26,960 --> 00:20:31,919
a developer if i'm going to

00:20:28,880 --> 00:20:34,080
deploy and trigger uh lots and lots of

00:20:31,919 --> 00:20:35,120
deployment as my production release i

00:20:34,080 --> 00:20:37,039
can automate that

00:20:35,120 --> 00:20:39,440
whole stuff using the command line

00:20:37,039 --> 00:20:41,280
interface as well

00:20:39,440 --> 00:20:43,200
the most important thing for a developer

00:20:41,280 --> 00:20:45,360
is to understand

00:20:43,200 --> 00:20:47,200
how the changes are being transforming

00:20:45,360 --> 00:20:50,080
through this pipeline and that's where

00:20:47,200 --> 00:20:50,320
our cd analytics really helps in terms

00:20:50,080 --> 00:20:52,240
of

00:20:50,320 --> 00:20:53,840
leveraging what is the metadata what are

00:20:52,240 --> 00:20:54,080
the changes that are getting pushed has

00:20:53,840 --> 00:20:56,720
it

00:20:54,080 --> 00:20:58,080
met the uh security policy has it met

00:20:56,720 --> 00:21:00,880
all the testing policies

00:20:58,080 --> 00:21:02,240
what is my scores on these changes how

00:21:00,880 --> 00:21:03,840
big is my change

00:21:02,240 --> 00:21:05,919
how many people are working on this

00:21:03,840 --> 00:21:07,280
change and how does it look what was my

00:21:05,919 --> 00:21:09,280
previous change so

00:21:07,280 --> 00:21:11,120
all this data meta information is

00:21:09,280 --> 00:21:12,080
provided as a part of cd analytics and

00:21:11,120 --> 00:21:16,159
it is available at

00:21:12,080 --> 00:21:18,640
runtime as well

00:21:16,159 --> 00:21:19,520
so this was the experience in terms and

00:21:18,640 --> 00:21:22,159
this experience

00:21:19,520 --> 00:21:23,919
is common across all platforms so me as

00:21:22,159 --> 00:21:26,960
a developer if i want to go

00:21:23,919 --> 00:21:29,200
and uh procure a stack

00:21:26,960 --> 00:21:30,000
for snowflake i would get the similar

00:21:29,200 --> 00:21:32,000
kind of meta

00:21:30,000 --> 00:21:34,000
information across all the platforms so

00:21:32,000 --> 00:21:36,159
i know my front end is

00:21:34,000 --> 00:21:38,000
what is my meta information for my front

00:21:36,159 --> 00:21:38,640
end what is my meta information for my

00:21:38,000 --> 00:21:40,880
back end

00:21:38,640 --> 00:21:42,720
so all those things together help me as

00:21:40,880 --> 00:21:45,840
a developer to understand

00:21:42,720 --> 00:21:48,240
how my my changes are impacting in the

00:21:45,840 --> 00:21:48,240
system

00:21:48,720 --> 00:21:54,240
so in summary um the

00:21:52,159 --> 00:21:57,200
the most important thing that has helped

00:21:54,240 --> 00:22:00,240
us is the realization that the customs

00:21:57,200 --> 00:22:03,280
job stages really enhances

00:22:00,240 --> 00:22:05,120
spinnaker's functionality because we are

00:22:03,280 --> 00:22:08,480
not only able to leverage

00:22:05,120 --> 00:22:11,120
the uh the custom job for snowflake

00:22:08,480 --> 00:22:13,039
but we are also able to enable the same

00:22:11,120 --> 00:22:14,080
custom jobs across multiple other

00:22:13,039 --> 00:22:17,520
platforms

00:22:14,080 --> 00:22:20,159
like teradata informatica and so on

00:22:17,520 --> 00:22:20,720
so because of our success in terms of

00:22:20,159 --> 00:22:24,480
these

00:22:20,720 --> 00:22:26,720
platforms we have a line of uh

00:22:24,480 --> 00:22:28,080
uh workloads that we need to enable as a

00:22:26,720 --> 00:22:29,360
part of pipeline that's why we are

00:22:28,080 --> 00:22:32,960
working towards and that's going to be

00:22:29,360 --> 00:22:32,960
our future state in cisco

00:22:33,520 --> 00:22:36,720
and this is what i wanted to cover uh in

00:22:35,600 --> 00:22:39,200
terms of uh

00:22:36,720 --> 00:22:40,480
cisco's extending uh spinnaker to

00:22:39,200 --> 00:22:42,960
snowflake but also

00:22:40,480 --> 00:22:44,480
it helps in terms of how teams can

00:22:42,960 --> 00:22:47,679
onboard their applications

00:22:44,480 --> 00:22:50,480
or the custom stages uh

00:22:47,679 --> 00:22:51,520
what are you biology all right thank you

00:22:50,480 --> 00:22:55,039
anil

00:22:51,520 --> 00:22:58,159
um i'm going to share this thing again

00:22:55,039 --> 00:23:00,240
so yeah it's it's i think it's amazing

00:22:58,159 --> 00:23:02,480
that that actually you're able to extend

00:23:00,240 --> 00:23:05,440
spinnaker to other use cases

00:23:02,480 --> 00:23:06,720
i know the the volume of teams that

00:23:05,440 --> 00:23:09,120
you're supporting

00:23:06,720 --> 00:23:10,559
um you you would eventually have to

00:23:09,120 --> 00:23:12,159
extend it and this is great right

00:23:10,559 --> 00:23:15,760
because essentially now

00:23:12,159 --> 00:23:17,679
you're able to um bring more control

00:23:15,760 --> 00:23:19,120
across all these applications various

00:23:17,679 --> 00:23:21,200
kinds of applications

00:23:19,120 --> 00:23:22,559
and that i've seen across many different

00:23:21,200 --> 00:23:24,480
you know many different uh

00:23:22,559 --> 00:23:26,000
enterprises as well so i think it's

00:23:24,480 --> 00:23:27,039
great that you know cisco's achieved

00:23:26,000 --> 00:23:29,280
that and i think

00:23:27,039 --> 00:23:31,120
thanks for sharing because many people

00:23:29,280 --> 00:23:32,559
have been not may not be aware of

00:23:31,120 --> 00:23:34,720
you know things you could do it's gonna

00:23:32,559 --> 00:23:37,760
occur beyond uh standard offers

00:23:34,720 --> 00:23:40,720
that's there um there are multiple

00:23:37,760 --> 00:23:42,159
uh questions that we obviously answered

00:23:40,720 --> 00:23:45,120
i guess during the q a

00:23:42,159 --> 00:23:46,799
uh session um i think one of the couple

00:23:45,120 --> 00:23:48,559
of points i want to mention is that hey

00:23:46,799 --> 00:23:50,559
you know how do i get the terraform

00:23:48,559 --> 00:23:52,799
because it's something um

00:23:50,559 --> 00:23:54,720
that's something that mostly requested

00:23:52,799 --> 00:23:56,799
so we have open sourced it um it's

00:23:54,720 --> 00:23:59,120
available for open source finicker

00:23:56,799 --> 00:24:00,320
um you know you could reach out to me or

00:23:59,120 --> 00:24:03,600
reach out to this alias

00:24:00,320 --> 00:24:05,440
on the screen here to get help with that

00:24:03,600 --> 00:24:06,640
or if you have any questions on various

00:24:05,440 --> 00:24:09,840
custom

00:24:06,640 --> 00:24:10,960
job stage work you can do for your own

00:24:09,840 --> 00:24:12,559
applications

00:24:10,960 --> 00:24:14,480
again feel free to reach out to bo

00:24:12,559 --> 00:24:16,960
either of us or

00:24:14,480 --> 00:24:17,600
you can also get official support from

00:24:16,960 --> 00:24:21,360
oppsomex

00:24:17,600 --> 00:24:23,279
if you like at hello adopt smoke.com

00:24:21,360 --> 00:24:24,799
so i'm going to share the our contacts

00:24:23,279 --> 00:24:26,320
one more time just in case you didn't

00:24:24,799 --> 00:24:29,120
catch it the first time

00:24:26,320 --> 00:24:29,840
um so feel free to email me or email

00:24:29,120 --> 00:24:31,840
anil

00:24:29,840 --> 00:24:33,120
with any specific questions around what

00:24:31,840 --> 00:24:35,360
you saw today

00:24:33,120 --> 00:24:36,400
and we hope you're enjoying you you

00:24:35,360 --> 00:24:38,559
enjoyed this session

00:24:36,400 --> 00:24:39,840
and you're gonna enjoy the rest of the

00:24:38,559 --> 00:24:44,720
spinnaker summit

00:24:39,840 --> 00:24:44,720
2020. thank you anil for your time thank

00:24:44,840 --> 00:24:50,240
you

00:24:47,840 --> 00:24:50,240

YouTube URL: https://www.youtube.com/watch?v=lmvxKDAR_Ms


