Title: Configuration Injection via Git - Nirmalya Sen
Publication date: 2021-01-16
Playlist: Spinnaker Summit 2020
Description: 
	Teams today want to version everything including configuration items. They also like to parameterize configuration for different environments and depending on the environment it is being deployed, use the configuration for that environment. How do I manage such dynamic configuration in a Spinnaker pipeline? This session shows an approach that was used to dynamically inject configuration into a Spinnaker pipeline from Git. The concept can always be extended to other sources like bitbucket, S3, Vault or other such sources.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:06,160 --> 00:00:09,679
hello

00:00:07,359 --> 00:00:11,440
and welcome to the session where i'm

00:00:09,679 --> 00:00:15,360
going to talk about

00:00:11,440 --> 00:00:19,840
how you can have configuration

00:00:15,360 --> 00:00:23,359
stored in an external artifact store

00:00:19,840 --> 00:00:27,199
like get and and use that

00:00:23,359 --> 00:00:30,480
in spinnaker to control your deployment

00:00:27,199 --> 00:00:34,800
uh i'm nirmalia sen and i represent

00:00:30,480 --> 00:00:36,719
op sum x and before i go into my session

00:00:34,800 --> 00:00:41,200
let me spend 30 seconds

00:00:36,719 --> 00:00:41,200
talking about who op sum x is

00:00:41,440 --> 00:00:46,640
up sum x is a leading continuous

00:00:43,920 --> 00:00:49,680
delivery solution provider

00:00:46,640 --> 00:00:52,559
we are an experienced team that

00:00:49,680 --> 00:00:53,600
have worked previously in companies like

00:00:52,559 --> 00:00:58,239
netflix

00:00:53,600 --> 00:01:01,359
cisco oracle aws

00:00:58,239 --> 00:01:04,960
we have offices all over the world

00:01:01,359 --> 00:01:08,720
predominantly in u.s and india

00:01:04,960 --> 00:01:13,439
and we are 90 plus strong

00:01:08,720 --> 00:01:14,960
team our services include 24x7 support

00:01:13,439 --> 00:01:18,720
on spinnaker

00:01:14,960 --> 00:01:21,040
managed spinnaker and professional

00:01:18,720 --> 00:01:23,600
services onboarding services around

00:01:21,040 --> 00:01:25,520
spinnaker

00:01:23,600 --> 00:01:27,119
we are pretty active in the open source

00:01:25,520 --> 00:01:29,600
community uh

00:01:27,119 --> 00:01:30,880
actively working on uh open source

00:01:29,600 --> 00:01:34,000
products like spinnaker

00:01:30,880 --> 00:01:35,680
kubernetes jenkins and making active

00:01:34,000 --> 00:01:40,720
contributions

00:01:35,680 --> 00:01:45,280
to uh different uh

00:01:40,720 --> 00:01:45,280
these different open source uh projects

00:01:46,240 --> 00:01:53,040
with that let's move on to our

00:01:49,360 --> 00:01:55,119
topic today so what are we going to talk

00:01:53,040 --> 00:01:59,600
about is what's typically known as

00:01:55,119 --> 00:02:03,520
the getups style operation right where

00:01:59,600 --> 00:02:07,200
you treat your configuration

00:02:03,520 --> 00:02:08,720
as source also right

00:02:07,200 --> 00:02:10,399
not only your software but your

00:02:08,720 --> 00:02:13,440
configuration is uh

00:02:10,399 --> 00:02:15,599
source control uh so in our case you

00:02:13,440 --> 00:02:18,560
know we will manage it in get

00:02:15,599 --> 00:02:18,879
uh so that you know you have versions of

00:02:18,560 --> 00:02:20,840
uh

00:02:18,879 --> 00:02:22,080
your configurations available and

00:02:20,840 --> 00:02:25,440
managed

00:02:22,080 --> 00:02:28,000
you know if something goes wrong or or

00:02:25,440 --> 00:02:29,680
you want to have an audit about what

00:02:28,000 --> 00:02:30,720
went where you can go look at your

00:02:29,680 --> 00:02:32,480
versions

00:02:30,720 --> 00:02:34,640
and then you can see who approved them

00:02:32,480 --> 00:02:36,959
right you can have approval processes

00:02:34,640 --> 00:02:38,000
checks and balances so that you know

00:02:36,959 --> 00:02:40,480
incorrect uh

00:02:38,000 --> 00:02:41,920
configuration doesn't go into your

00:02:40,480 --> 00:02:45,280
production and and

00:02:41,920 --> 00:02:48,080
uh screw things up right

00:02:45,280 --> 00:02:49,040
and also if you separate out your

00:02:48,080 --> 00:02:52,400
configuration

00:02:49,040 --> 00:02:53,440
from your deployment and is managed

00:02:52,400 --> 00:02:56,480
separately

00:02:53,440 --> 00:02:58,959
you can actually use the same process uh

00:02:56,480 --> 00:03:00,400
to deploy to different environments just

00:02:58,959 --> 00:03:04,239
changing your configuration

00:03:00,400 --> 00:03:06,879
right so what you gain over there

00:03:04,239 --> 00:03:08,159
is more like a github style operations

00:03:06,879 --> 00:03:10,159
where you managed your

00:03:08,159 --> 00:03:12,720
uh sources in a source controlled

00:03:10,159 --> 00:03:12,720
environment

00:03:14,080 --> 00:03:18,959
so what we'll do is we'll walk through

00:03:16,480 --> 00:03:23,360
an example a

00:03:18,959 --> 00:03:26,720
real life example we used at a company

00:03:23,360 --> 00:03:27,760
and how they did it that would actually

00:03:26,720 --> 00:03:30,640
showcase

00:03:27,760 --> 00:03:32,799
how how this is useful and how this can

00:03:30,640 --> 00:03:34,560
be used

00:03:32,799 --> 00:03:36,799
now spinnaker as we also it's a

00:03:34,560 --> 00:03:39,840
continuous delivery tool right

00:03:36,799 --> 00:03:40,239
netflix and all the other companies do

00:03:39,840 --> 00:03:43,920
it

00:03:40,239 --> 00:03:45,599
where the the developer makes the change

00:03:43,920 --> 00:03:47,840
it goes through the process and

00:03:45,599 --> 00:03:49,519
voila it's out there in your production

00:03:47,840 --> 00:03:52,000
system right

00:03:49,519 --> 00:03:52,879
but a lot of enterprises still today i

00:03:52,000 --> 00:03:55,599
think uh

00:03:52,879 --> 00:03:57,120
don't do that they want to plan what

00:03:55,599 --> 00:04:00,400
goes out

00:03:57,120 --> 00:04:02,400
they want to decide and and

00:04:00,400 --> 00:04:03,760
choose what gets deployed if you have

00:04:02,400 --> 00:04:05,680
that 10 services

00:04:03,760 --> 00:04:07,280
they probably don't want 10 services

00:04:05,680 --> 00:04:08,799
going out at the same time

00:04:07,280 --> 00:04:11,439
they're working at different levels on

00:04:08,799 --> 00:04:15,599
those so they want to choose

00:04:11,439 --> 00:04:18,639
what gets promoted to the next stage

00:04:15,599 --> 00:04:20,079
and it's not what services gets promoted

00:04:18,639 --> 00:04:23,360
even the version of the service that

00:04:20,079 --> 00:04:26,960
gets promoted they want to choose that

00:04:23,360 --> 00:04:28,800
and how do you do that right and

00:04:26,960 --> 00:04:30,800
you also want to plan when it goes up

00:04:28,800 --> 00:04:31,600
not like you know checking done and boom

00:04:30,800 --> 00:04:35,040
it moves on

00:04:31,600 --> 00:04:37,520
right you want to control uh when that

00:04:35,040 --> 00:04:39,919
goes out typically they have a

00:04:37,520 --> 00:04:41,440
strong cadences like end of the week or

00:04:39,919 --> 00:04:42,639
end of the month every month they will

00:04:41,440 --> 00:04:44,720
make a release

00:04:42,639 --> 00:04:47,199
or every 15th of the month so you want

00:04:44,720 --> 00:04:49,680
to plan and schedule a release

00:04:47,199 --> 00:04:51,040
when it goes out what goes out and as

00:04:49,680 --> 00:04:53,360
well as you want

00:04:51,040 --> 00:04:56,080
different stakeholders to sign off

00:04:53,360 --> 00:04:58,720
before you do a promote

00:04:56,080 --> 00:04:59,840
which is the product managers the

00:04:58,720 --> 00:05:03,680
quality

00:04:59,840 --> 00:05:05,919
team the operations team all

00:05:03,680 --> 00:05:07,840
you want all of them to sign off before

00:05:05,919 --> 00:05:09,039
it goes out so you know if they are in a

00:05:07,840 --> 00:05:10,560
configuration

00:05:09,039 --> 00:05:12,320
everyone can review it what's in the

00:05:10,560 --> 00:05:14,160
configuration and approve

00:05:12,320 --> 00:05:16,000
sign off and when everyone approves and

00:05:14,160 --> 00:05:17,360
signs off

00:05:16,000 --> 00:05:19,600
it's out there in your production

00:05:17,360 --> 00:05:21,280
environment

00:05:19,600 --> 00:05:23,039
now one of the things that always comes

00:05:21,280 --> 00:05:24,080
up is hey there are solutions that

00:05:23,039 --> 00:05:26,639
orchestrate business

00:05:24,080 --> 00:05:27,759
processes with software delivery right

00:05:26,639 --> 00:05:29,600
uh

00:05:27,759 --> 00:05:31,919
i'll use that over there and then you

00:05:29,600 --> 00:05:35,600
know i will then use uh

00:05:31,919 --> 00:05:37,280
something else to deploy yeah so

00:05:35,600 --> 00:05:40,080
that that you could always do that but

00:05:37,280 --> 00:05:42,960
you know if you could incorporate

00:05:40,080 --> 00:05:43,840
that along with your software delivery

00:05:42,960 --> 00:05:45,919
process

00:05:43,840 --> 00:05:47,199
it makes the life easy for all the

00:05:45,919 --> 00:05:48,880
stakeholders

00:05:47,199 --> 00:05:50,400
not just the not just the release

00:05:48,880 --> 00:05:53,039
manager but the developers the

00:05:50,400 --> 00:05:53,840
operations folks if they all can use the

00:05:53,039 --> 00:05:56,160
same tool

00:05:53,840 --> 00:05:57,759
and have the same visibility and view

00:05:56,160 --> 00:06:00,960
into what's getting deployed

00:05:57,759 --> 00:06:04,080
and promoted there's less

00:06:00,960 --> 00:06:04,800
dropping the ball anywhere we have seen

00:06:04,080 --> 00:06:07,440
that where

00:06:04,800 --> 00:06:08,880
these external systems for all these

00:06:07,440 --> 00:06:11,840
approvals

00:06:08,880 --> 00:06:13,680
and deciding what gets released and all

00:06:11,840 --> 00:06:14,720
that and based on that at the end of the

00:06:13,680 --> 00:06:16,960
day they will come out

00:06:14,720 --> 00:06:18,840
with a list of steps to be done to

00:06:16,960 --> 00:06:20,000
promote a release which is manual

00:06:18,840 --> 00:06:23,120
process

00:06:20,000 --> 00:06:26,000
uh tasks created in jira and all that

00:06:23,120 --> 00:06:27,199
and the jira task gets handed over from

00:06:26,000 --> 00:06:29,680
person to person

00:06:27,199 --> 00:06:30,960
team to team and you know if a ball gets

00:06:29,680 --> 00:06:33,840
dropped somewhere

00:06:30,960 --> 00:06:34,080
you have a broken release so you know if

00:06:33,840 --> 00:06:37,039
you

00:06:34,080 --> 00:06:38,479
can have a solution that orchestrates

00:06:37,039 --> 00:06:40,720
the business process

00:06:38,479 --> 00:06:42,479
along with the software delivery you

00:06:40,720 --> 00:06:46,720
have less chances of

00:06:42,479 --> 00:06:48,240
error and a more streamlined release

00:06:46,720 --> 00:06:49,919
so how can you solve this with a

00:06:48,240 --> 00:06:51,599
spinnaker uh

00:06:49,919 --> 00:06:53,280
it's pretty much the same standard

00:06:51,599 --> 00:06:55,199
approach um which is

00:06:53,280 --> 00:06:56,560
uh you use something called a bill of

00:06:55,199 --> 00:06:58,720
materials to define

00:06:56,560 --> 00:07:00,400
what gets released right uh even

00:06:58,720 --> 00:07:02,400
spinnaker is a bill of materials right

00:07:00,400 --> 00:07:02,960
every release if you go look at it as

00:07:02,400 --> 00:07:06,240
that

00:07:02,960 --> 00:07:08,080
each component has the uh sha of the get

00:07:06,240 --> 00:07:10,960
commit that makes that release the

00:07:08,080 --> 00:07:12,400
version the image that's built

00:07:10,960 --> 00:07:14,000
all that's defined in a bill of

00:07:12,400 --> 00:07:16,560
materials right so

00:07:14,000 --> 00:07:17,280
you know you define a bill of materials

00:07:16,560 --> 00:07:19,520
that uh

00:07:17,280 --> 00:07:22,240
defines all your services what version

00:07:19,520 --> 00:07:24,319
gets released or not

00:07:22,240 --> 00:07:25,280
and then integrate with your existing

00:07:24,319 --> 00:07:27,680
approval system

00:07:25,280 --> 00:07:30,000
right from uh spinnaker itself right if

00:07:27,680 --> 00:07:33,680
you use jira to do the approval

00:07:30,000 --> 00:07:37,280
you can integrate uh spinnaker with jira

00:07:33,680 --> 00:07:37,599
and and have the approvals in jeera and

00:07:37,280 --> 00:07:39,680
then

00:07:37,599 --> 00:07:42,080
you know once all the approvals you move

00:07:39,680 --> 00:07:45,840
on to the next stage right

00:07:42,080 --> 00:07:48,720
and so what you basically are doing

00:07:45,840 --> 00:07:49,759
here in spinnaker is really doing the

00:07:48,720 --> 00:07:51,520
actual

00:07:49,759 --> 00:07:54,319
task of actually delivering it the

00:07:51,520 --> 00:07:55,360
actual orchestration of delivering your

00:07:54,319 --> 00:07:58,080
release

00:07:55,360 --> 00:07:59,680
without any human intervention without

00:07:58,080 --> 00:08:04,319
manual tasks

00:07:59,680 --> 00:08:08,000
and all that so let's look at what our

00:08:04,319 --> 00:08:09,840
bom file can look like in our case

00:08:08,000 --> 00:08:12,240
what we'll have is you know you have a

00:08:09,840 --> 00:08:15,120
typical configuration

00:08:12,240 --> 00:08:16,160
with is triggered by a get change and

00:08:15,120 --> 00:08:19,440
then this is the whole

00:08:16,160 --> 00:08:20,160
holy grail over there which is you read

00:08:19,440 --> 00:08:23,440
that uh

00:08:20,160 --> 00:08:24,160
bomb file from get and inject it into a

00:08:23,440 --> 00:08:26,160
pipeline

00:08:24,160 --> 00:08:29,520
where we will take advantage of the

00:08:26,160 --> 00:08:31,840
spinnaker run job features in there

00:08:29,520 --> 00:08:34,800
and based on what you read from the bom

00:08:31,840 --> 00:08:36,399
file you're going to deploy to nginx

00:08:34,800 --> 00:08:38,159
uh postgres that's our simple

00:08:36,399 --> 00:08:40,800
applications with two services

00:08:38,159 --> 00:08:42,800
uh which includes nginx and postgres you

00:08:40,800 --> 00:08:45,440
know you could have 20 services

00:08:42,800 --> 00:08:46,640
and this could be as complex as possible

00:08:45,440 --> 00:08:48,480
with dependencies

00:08:46,640 --> 00:08:50,240
in the order in which the services are

00:08:48,480 --> 00:08:52,320
deployed and all that

00:08:50,240 --> 00:08:53,920
then you validate the deployment and

00:08:52,320 --> 00:08:56,160
then you know all the stakeholders

00:08:53,920 --> 00:08:57,920
determine if it needs to be promoted

00:08:56,160 --> 00:08:59,680
or if it's ready to be promoted to

00:08:57,920 --> 00:09:00,800
production or not and then you promote

00:08:59,680 --> 00:09:03,920
it to production

00:09:00,800 --> 00:09:04,959
right uh and we'll look at how when

00:09:03,920 --> 00:09:07,839
you're trying to uh

00:09:04,959 --> 00:09:10,160
promote to production you pass in the

00:09:07,839 --> 00:09:12,399
exact information that came along

00:09:10,160 --> 00:09:14,720
when this pipeline started so that you

00:09:12,399 --> 00:09:17,839
know you're deploying to production the

00:09:14,720 --> 00:09:22,160
same version same configuration

00:09:17,839 --> 00:09:24,080
that you had validated right

00:09:22,160 --> 00:09:25,600
uh let's look at what an example bom

00:09:24,080 --> 00:09:26,800
file can be like you know it's a very

00:09:25,600 --> 00:09:28,800
simple bom file

00:09:26,800 --> 00:09:30,000
which have all the services that you

00:09:28,800 --> 00:09:31,440
have

00:09:30,000 --> 00:09:33,360
you can determine if it should be

00:09:31,440 --> 00:09:35,760
installed or not

00:09:33,360 --> 00:09:36,720
uh and you can determine uh what could

00:09:35,760 --> 00:09:39,680
be the version

00:09:36,720 --> 00:09:41,040
uh of the service to install and this is

00:09:39,680 --> 00:09:43,120
just a simple example

00:09:41,040 --> 00:09:44,080
you know depending on your environment

00:09:43,120 --> 00:09:47,279
you could have lot

00:09:44,080 --> 00:09:49,440
more metadata in here

00:09:47,279 --> 00:09:52,399
like the name space to deploy to maybe

00:09:49,440 --> 00:09:55,040
even the account to use to deploy to

00:09:52,399 --> 00:09:57,519
so you can control all of this through a

00:09:55,040 --> 00:09:59,440
bomb file and then that's available

00:09:57,519 --> 00:10:01,920
in your downstream processing in your

00:09:59,440 --> 00:10:01,920
spare car

00:10:02,399 --> 00:10:07,519
uh like we're talking about here uh

00:10:05,440 --> 00:10:09,200
we already talked about it advantage of

00:10:07,519 --> 00:10:11,600
using something like a kit

00:10:09,200 --> 00:10:12,800
to manage this bom file is that it's

00:10:11,600 --> 00:10:14,720
source control

00:10:12,800 --> 00:10:16,240
right it's not something random that

00:10:14,720 --> 00:10:18,320
gets deployed

00:10:16,240 --> 00:10:20,240
uh it's version so you can go back and

00:10:18,320 --> 00:10:21,279
look at what all the changes happen when

00:10:20,240 --> 00:10:23,839
it happened

00:10:21,279 --> 00:10:24,320
you can look at who approved it and then

00:10:23,839 --> 00:10:26,399
because

00:10:24,320 --> 00:10:28,399
uh you know your source control

00:10:26,399 --> 00:10:31,120
maintains it you can go back and audit

00:10:28,399 --> 00:10:33,040
uh who approved when it was approved and

00:10:31,120 --> 00:10:35,600
all the history behind

00:10:33,040 --> 00:10:38,160
what got deployed in your production

00:10:35,600 --> 00:10:38,160
environment

00:10:38,959 --> 00:10:42,959
so we will see this use case in in

00:10:41,920 --> 00:10:46,000
spinnaker

00:10:42,959 --> 00:10:47,360
so what we'll see is uh processing of

00:10:46,000 --> 00:10:49,519
the git trigger

00:10:47,360 --> 00:10:52,079
how we extract the parameters out from a

00:10:49,519 --> 00:10:52,079
git trigger

00:10:52,160 --> 00:10:59,519
using the spinnaker runja to run this

00:10:56,399 --> 00:11:01,920
and extract the data and

00:10:59,519 --> 00:11:03,760
make it available for downstream stages

00:11:01,920 --> 00:11:05,440
how do we make it it's a feature of the

00:11:03,760 --> 00:11:08,720
ranja we'll look at that

00:11:05,440 --> 00:11:10,560
and then uh we and we'll see how

00:11:08,720 --> 00:11:12,240
you know rather than defining new

00:11:10,560 --> 00:11:15,680
accounts we'll leverage the accounts

00:11:12,240 --> 00:11:18,959
that are already defined in spinnaker

00:11:15,680 --> 00:11:18,959
to fetch the artifacts

00:11:19,519 --> 00:11:25,920
uh let's go look at spinnaker right now

00:11:22,800 --> 00:11:30,399
how this looks so

00:11:25,920 --> 00:11:30,399
here you see my two

00:11:31,279 --> 00:11:36,720
pipelines this is my staging release

00:11:34,640 --> 00:11:38,720
which i call manage spinnaker

00:11:36,720 --> 00:11:40,240
and this is my pro deploy of the same

00:11:38,720 --> 00:11:43,200
thing

00:11:40,240 --> 00:11:44,880
let's go look at it uh if i look at the

00:11:43,200 --> 00:11:48,240
configuration stage

00:11:44,880 --> 00:11:52,000
uh there is an automatic trigger uh

00:11:48,240 --> 00:11:55,200
on the repo enigmatic in the project

00:11:52,000 --> 00:11:58,399
uh near malia sen right it's a github

00:11:55,200 --> 00:12:00,639
based uh trigger and

00:11:58,399 --> 00:12:02,399
uh there is an artifact constraint i

00:12:00,639 --> 00:12:04,639
have defined in here

00:12:02,399 --> 00:12:07,360
which basically says that this would

00:12:04,639 --> 00:12:09,519
trigger only if the trigger

00:12:07,360 --> 00:12:11,040
or this pipeline would trigger only if

00:12:09,519 --> 00:12:14,560
the trigger contains

00:12:11,040 --> 00:12:16,959
bomb.yaml as a file path right

00:12:14,560 --> 00:12:18,880
so that way you know in the same repo

00:12:16,959 --> 00:12:21,279
you can have different config

00:12:18,880 --> 00:12:23,279
information and ensure your pipeline

00:12:21,279 --> 00:12:24,959
gets triggered only if that file matches

00:12:23,279 --> 00:12:27,120
so you can have

00:12:24,959 --> 00:12:29,120
different configs for different

00:12:27,120 --> 00:12:31,120
environments in the same ripple

00:12:29,120 --> 00:12:32,320
and you can have different pipelines

00:12:31,120 --> 00:12:36,839
trigger

00:12:32,320 --> 00:12:40,079
based on which file got changed

00:12:36,839 --> 00:12:41,600
right uh

00:12:40,079 --> 00:12:43,680
let's look at this bomb file which is

00:12:41,600 --> 00:12:47,040
exactly like what we saw earlier

00:12:43,680 --> 00:12:49,200
um it's like you know it's has the

00:12:47,040 --> 00:12:50,079
services listed in there to install it

00:12:49,200 --> 00:12:53,120
or not

00:12:50,079 --> 00:12:54,560
what image to use you know and i say it

00:12:53,120 --> 00:12:56,720
like i said you can have

00:12:54,560 --> 00:12:58,399
different other attributes in there uh

00:12:56,720 --> 00:13:00,399
metadata information

00:12:58,399 --> 00:13:01,440
although i'm not using it just as an

00:13:00,399 --> 00:13:04,320
example

00:13:01,440 --> 00:13:06,399
uh the name space to deploy too for that

00:13:04,320 --> 00:13:08,160
service can come in from this

00:13:06,399 --> 00:13:10,560
metadata file itself right you can

00:13:08,160 --> 00:13:12,800
define the name space

00:13:10,560 --> 00:13:13,680
you can use that to deploy so again the

00:13:12,800 --> 00:13:16,880
limit

00:13:13,680 --> 00:13:17,839
of what metadata you use here and how

00:13:16,880 --> 00:13:22,160
they are used

00:13:17,839 --> 00:13:22,160
is really up to your requirements

00:13:22,480 --> 00:13:25,600
let's go into the crux of the main thing

00:13:24,560 --> 00:13:28,959
which is inject

00:13:25,600 --> 00:13:29,440
uh this into a bomb file here what we do

00:13:28,959 --> 00:13:33,040
is

00:13:29,440 --> 00:13:35,920
take advantage of the run job uh

00:13:33,040 --> 00:13:38,959
state uh run job uh stage that's

00:13:35,920 --> 00:13:41,120
available in spinnaker

00:13:38,959 --> 00:13:42,000
which is basically running a kubernetes

00:13:41,120 --> 00:13:44,320
uh ranja

00:13:42,000 --> 00:13:45,920
a cube and it is charm so you choose the

00:13:44,320 --> 00:13:48,399
account to run into

00:13:45,920 --> 00:13:49,040
the main thing the way we are doing it

00:13:48,399 --> 00:13:52,000
over here

00:13:49,040 --> 00:13:53,760
is that this run job needs to run in the

00:13:52,000 --> 00:13:55,360
same kubernetes where spinnaker is

00:13:53,760 --> 00:13:59,360
running and we'll get into that

00:13:55,360 --> 00:14:02,000
why uh and um you know it should have

00:13:59,360 --> 00:14:03,519
access to the spinnaker services

00:14:02,000 --> 00:14:06,560
now you know if you don't have that you

00:14:03,519 --> 00:14:08,880
can definitely work around it but

00:14:06,560 --> 00:14:10,959
what we are doing is we are not we are

00:14:08,880 --> 00:14:12,240
we are basically leveraging spinnaker to

00:14:10,959 --> 00:14:14,079
fetch the gate artifact

00:14:12,240 --> 00:14:15,839
leveraging the spinnaker accounts

00:14:14,079 --> 00:14:18,560
already defined to fetch it that's why

00:14:15,839 --> 00:14:21,680
we need that

00:14:18,560 --> 00:14:25,519
and finally um

00:14:21,680 --> 00:14:28,839
we captured the output uh from uh

00:14:25,519 --> 00:14:30,560
the console out from that uh ranja

00:14:28,839 --> 00:14:33,839
container

00:14:30,560 --> 00:14:35,680
and uh use that to basically inject

00:14:33,839 --> 00:14:37,680
that actually does the injection of the

00:14:35,680 --> 00:14:40,959
artifacts um

00:14:37,680 --> 00:14:43,600
or the values into the pipeline uh

00:14:40,959 --> 00:14:45,360
let's look at the script in more details

00:14:43,600 --> 00:14:48,480
i have it in my slide so that it's

00:14:45,360 --> 00:14:48,480
easier to go through it

00:14:48,639 --> 00:14:52,000
so here we have defined a spinnaker

00:14:50,800 --> 00:14:54,240
artifact right

00:14:52,000 --> 00:14:55,920
uh you guys all uh know spinnaker

00:14:54,240 --> 00:14:58,959
artifact it needs a type

00:14:55,920 --> 00:15:01,360
a name and uh you know what

00:14:58,959 --> 00:15:02,079
account to use if i have to fetch this

00:15:01,360 --> 00:15:05,440
artifact

00:15:02,079 --> 00:15:07,440
right so in in our case

00:15:05,440 --> 00:15:10,000
this is a github file i've given it a

00:15:07,440 --> 00:15:11,440
name and the artifact account to use is

00:15:10,000 --> 00:15:12,000
a git account that i've defined in

00:15:11,440 --> 00:15:13,600
spinnaker

00:15:12,000 --> 00:15:15,360
with all the credentials so that it

00:15:13,600 --> 00:15:17,199
knows how to connect and fetch that file

00:15:15,360 --> 00:15:19,519
right

00:15:17,199 --> 00:15:20,240
and then i provided reference and

00:15:19,519 --> 00:15:23,040
version

00:15:20,240 --> 00:15:23,440
what file to fetch what version to fetch

00:15:23,040 --> 00:15:25,600
right

00:15:23,440 --> 00:15:27,600
version in in the case of get basically

00:15:25,600 --> 00:15:29,839
maps to the

00:15:27,600 --> 00:15:31,839
the sha or the branch from which to

00:15:29,839 --> 00:15:34,079
fetch it

00:15:31,839 --> 00:15:35,519
this is the interesting part here right

00:15:34,079 --> 00:15:39,120
uh

00:15:35,519 --> 00:15:40,000
for this artifact reference i'm using

00:15:39,120 --> 00:15:42,639
whatever is coming

00:15:40,000 --> 00:15:43,600
in the trigger it was triggered by a get

00:15:42,639 --> 00:15:46,639
change

00:15:43,600 --> 00:15:50,320
and i'm picking up the url

00:15:46,639 --> 00:15:52,000
of that first artifact in the trigger

00:15:50,320 --> 00:15:54,160
that's an assumption i've made like you

00:15:52,000 --> 00:15:56,000
know you can see this is a script

00:15:54,160 --> 00:15:57,759
if there are more than one artifacts you

00:15:56,000 --> 00:15:59,440
can use that process it

00:15:57,759 --> 00:16:00,800
look through it fetch each of them you

00:15:59,440 --> 00:16:03,519
could do all of that

00:16:00,800 --> 00:16:04,320
fun stuff in this case just to keep it

00:16:03,519 --> 00:16:06,639
simple

00:16:04,320 --> 00:16:07,759
uh we're just picking up the first one

00:16:06,639 --> 00:16:09,920
that's available

00:16:07,759 --> 00:16:11,759
and the version of that and have defined

00:16:09,920 --> 00:16:13,680
an artifact here

00:16:11,759 --> 00:16:15,360
then we just write it to a temple uh

00:16:13,680 --> 00:16:18,079
temporary file

00:16:15,360 --> 00:16:20,480
and then we use curl to fetch that

00:16:18,079 --> 00:16:24,399
artifact using cloud driver

00:16:20,480 --> 00:16:25,680
okay uh cloud driver basically makes

00:16:24,399 --> 00:16:27,759
that available

00:16:25,680 --> 00:16:28,959
where you can make those artifacts fetch

00:16:27,759 --> 00:16:31,279
call and give it an

00:16:28,959 --> 00:16:33,120
artifact and it will actually fetch the

00:16:31,279 --> 00:16:34,240
contents of that artifact and make it

00:16:33,120 --> 00:16:36,320
available to you

00:16:34,240 --> 00:16:38,079
right and which we have captured in the

00:16:36,320 --> 00:16:40,880
result

00:16:38,079 --> 00:16:41,600
and what we do after that is that we

00:16:40,880 --> 00:16:46,240
make that

00:16:41,600 --> 00:16:49,279
available to uh downstream stages so

00:16:46,240 --> 00:16:52,480
this is a feature of spinnaker jar

00:16:49,279 --> 00:16:52,880
whereas if you define this variable in

00:16:52,480 --> 00:16:55,360
your

00:16:52,880 --> 00:16:56,720
output spinnaker would parse the console

00:16:55,360 --> 00:16:59,199
output of the job

00:16:56,720 --> 00:17:01,120
and if it finds anything like this it

00:16:59,199 --> 00:17:02,880
will take its content and make it

00:17:01,120 --> 00:17:05,120
available in the pipeline

00:17:02,880 --> 00:17:05,919
as a json so it's basically everything

00:17:05,120 --> 00:17:08,240
in the json

00:17:05,919 --> 00:17:10,319
is available as a variable in the

00:17:08,240 --> 00:17:12,079
downstream stages

00:17:10,319 --> 00:17:14,400
uh there are other things also not only

00:17:12,079 --> 00:17:15,839
just json spinnaker has the capability

00:17:14,400 --> 00:17:17,360
if you wanted to have

00:17:15,839 --> 00:17:19,280
some key value pairs you can do

00:17:17,360 --> 00:17:21,199
spinnaker underscore config underscore

00:17:19,280 --> 00:17:22,799
key equals to value even those are

00:17:21,199 --> 00:17:25,839
parsed and made available to the

00:17:22,799 --> 00:17:25,839
downstream stages

00:17:26,079 --> 00:17:29,600
uh one thing to point out here is this

00:17:28,319 --> 00:17:32,880
call that we make

00:17:29,600 --> 00:17:35,200
to cloud driver to fetch it obviously

00:17:32,880 --> 00:17:36,640
there are security implications on that

00:17:35,200 --> 00:17:38,400
um

00:17:36,640 --> 00:17:40,799
you have to make sure you have access to

00:17:38,400 --> 00:17:42,720
that in our vanilla install we have

00:17:40,799 --> 00:17:44,240
access to it

00:17:42,720 --> 00:17:46,480
otherwise you have to make sure you're

00:17:44,240 --> 00:17:47,520
running in a namespace that has access

00:17:46,480 --> 00:17:50,000
to that

00:17:47,520 --> 00:17:52,160
or you're at least using https

00:17:50,000 --> 00:17:55,120
communication between the components

00:17:52,160 --> 00:17:56,000
or you have you know mtls and enabled

00:17:55,120 --> 00:17:57,440
between your

00:17:56,000 --> 00:17:59,600
spinnaker companies again those are

00:17:57,440 --> 00:18:02,400
advanced topics but you can

00:17:59,600 --> 00:18:04,080
set them up that way uh to address the

00:18:02,400 --> 00:18:07,120
security uh

00:18:04,080 --> 00:18:07,679
aspects of this call but the whole idea

00:18:07,120 --> 00:18:09,919
is that

00:18:07,679 --> 00:18:11,919
i am leveraging spinnaker i am

00:18:09,919 --> 00:18:15,520
leveraging spinnaker's uh

00:18:11,919 --> 00:18:16,640
account setup up to basically fetch the

00:18:15,520 --> 00:18:20,000
artifacts and then

00:18:16,640 --> 00:18:20,000
injecting them into spank

00:18:20,720 --> 00:18:27,360
uh so that's it from a definition

00:18:24,320 --> 00:18:30,880
perspective uh so we saw

00:18:27,360 --> 00:18:31,919
that uh this is what our artifact file

00:18:30,880 --> 00:18:34,640
looks like right

00:18:31,919 --> 00:18:36,240
our bom file which has nginx install

00:18:34,640 --> 00:18:38,320
image so all these are available in

00:18:36,240 --> 00:18:38,960
downstream stages after that stage runs

00:18:38,320 --> 00:18:41,440
right

00:18:38,960 --> 00:18:43,280
so if we go back and look at our

00:18:41,440 --> 00:18:45,200
subsequent stages where we are deploying

00:18:43,280 --> 00:18:47,600
nginx postgres like i talked about it's

00:18:45,200 --> 00:18:51,280
a simple application that consists of

00:18:47,600 --> 00:18:52,480
nginx and postgres is uh i am accessing

00:18:51,280 --> 00:18:56,880
the image as just

00:18:52,480 --> 00:18:58,720
nginx image right the previous stage

00:18:56,880 --> 00:19:00,480
got them from get injected into the

00:18:58,720 --> 00:19:02,640
pipeline and now it's available as

00:19:00,480 --> 00:19:06,000
indianx image

00:19:02,640 --> 00:19:08,400
nginx image is available

00:19:06,000 --> 00:19:10,080
i'm also determining to run this or not

00:19:08,400 --> 00:19:12,559
using nginx install

00:19:10,080 --> 00:19:13,679
as a condition to run this or not right

00:19:12,559 --> 00:19:16,799
which is right here

00:19:13,679 --> 00:19:16,799
in yannick's install

00:19:16,960 --> 00:19:21,520
so what you can see is that what i have

00:19:19,280 --> 00:19:24,720
done is i've basically taken it

00:19:21,520 --> 00:19:27,039
and i'm able to use this values

00:19:24,720 --> 00:19:29,679
as defined in my config in my downstream

00:19:27,039 --> 00:19:31,520
stages right

00:19:29,679 --> 00:19:32,799
i can then do a validation of the

00:19:31,520 --> 00:19:34,960
deployment

00:19:32,799 --> 00:19:36,640
then the stakeholders determine if it's

00:19:34,960 --> 00:19:37,600
going to be deployed to production or

00:19:36,640 --> 00:19:39,600
not

00:19:37,600 --> 00:19:40,960
and then when i'm going to deploy to

00:19:39,600 --> 00:19:45,200
production

00:19:40,960 --> 00:19:47,360
what i'm doing is i am

00:19:45,200 --> 00:19:49,280
just passing in whatever was passed to

00:19:47,360 --> 00:19:50,559
me as a parameter to the subsequent

00:19:49,280 --> 00:19:53,600
stage

00:19:50,559 --> 00:19:55,679
the bomb file the exact reference and

00:19:53,600 --> 00:19:57,520
the version to be fetched whatever i got

00:19:55,679 --> 00:19:58,480
it i'm passing it on to the downstream

00:19:57,520 --> 00:20:00,400
stage

00:19:58,480 --> 00:20:02,720
and uh you know i'm using those in the

00:20:00,400 --> 00:20:04,960
downstream in my production deploy or

00:20:02,720 --> 00:20:06,799
downstream stages to fetch

00:20:04,960 --> 00:20:08,240
so that you know i'm deploying the exact

00:20:06,799 --> 00:20:10,880
same version uh

00:20:08,240 --> 00:20:13,520
not different versions in different

00:20:10,880 --> 00:20:13,520
environments

00:20:13,919 --> 00:20:17,919
uh so quickly let's look at the

00:20:15,679 --> 00:20:20,159
production deployment parameter

00:20:17,919 --> 00:20:20,960
so here what i did is although i have a

00:20:20,159 --> 00:20:23,600
trigger and

00:20:20,960 --> 00:20:24,000
defined it's not enabled but i take

00:20:23,600 --> 00:20:27,280
these

00:20:24,000 --> 00:20:28,960
bomb file and and

00:20:27,280 --> 00:20:30,320
the the version to be fetched as

00:20:28,960 --> 00:20:35,200
parameters

00:20:30,320 --> 00:20:37,200
and in my uh in my uh

00:20:35,200 --> 00:20:38,480
in injection of the bomb file into the

00:20:37,200 --> 00:20:41,840
pipeline i

00:20:38,480 --> 00:20:42,640
use those as uh art as parameters to

00:20:41,840 --> 00:20:45,600
fetch

00:20:42,640 --> 00:20:47,200
or the artifact to fetch right and then

00:20:45,600 --> 00:20:49,440
the deploy nginx

00:20:47,200 --> 00:20:50,880
postgres are exactly the same where i

00:20:49,440 --> 00:20:55,280
use what's

00:20:50,880 --> 00:20:55,280
fetched and injected into the pipe

00:20:56,080 --> 00:20:59,840
let's make a change and trigger this

00:20:58,080 --> 00:21:04,240
pipeline right and see how it

00:20:59,840 --> 00:21:07,520
rolls through so i'm going to go in here

00:21:04,240 --> 00:21:10,400
and say hey we have a new version of

00:21:07,520 --> 00:21:13,919
nginx available that i want to deploy

00:21:10,400 --> 00:21:15,600
and i'm going to make this 117

00:21:13,919 --> 00:21:16,960
and postgres hasn't changed i don't want

00:21:15,600 --> 00:21:18,320
to deploy postgres so i don't want to

00:21:16,960 --> 00:21:22,159
deploy

00:21:18,320 --> 00:21:24,960
so i want to disable deploying postgres

00:21:22,159 --> 00:21:27,280
so i'll only deploy nginx next version

00:21:24,960 --> 00:21:29,600
postgres i'm not going to deploy right

00:21:27,280 --> 00:21:30,799
and again you know even if i did it true

00:21:29,600 --> 00:21:32,720
left the version same

00:21:30,799 --> 00:21:33,919
uh kubernetes will take care of it will

00:21:32,720 --> 00:21:36,320
actually not

00:21:33,919 --> 00:21:37,440
uh deploy a new version uh but you know

00:21:36,320 --> 00:21:39,600
i just want

00:21:37,440 --> 00:21:41,440
i don't want to deploy because in this

00:21:39,600 --> 00:21:43,280
case it's a simple deployment but you

00:21:41,440 --> 00:21:45,360
know in your case it could be

00:21:43,280 --> 00:21:47,280
not just a manifest department there

00:21:45,360 --> 00:21:49,600
might be a lot more other processes that

00:21:47,280 --> 00:21:51,600
you don't want to go through

00:21:49,600 --> 00:21:53,200
so let's commit the changes and see

00:21:51,600 --> 00:21:54,960
what's going on here

00:21:53,200 --> 00:21:58,880
what we see is that this pipeline is

00:21:54,960 --> 00:22:01,360
already triggered and it's running right

00:21:58,880 --> 00:22:02,880
uh let's look at the execution details

00:22:01,360 --> 00:22:07,280
and see the trigger that came

00:22:02,880 --> 00:22:09,840
in um here is the parameter that came

00:22:07,280 --> 00:22:11,760
in uh this is the artifacts in there and

00:22:09,840 --> 00:22:12,400
if i actually go look at the execution

00:22:11,760 --> 00:22:15,679
detail

00:22:12,400 --> 00:22:18,080
source i should be able to see that

00:22:15,679 --> 00:22:18,080
trigger

00:22:20,080 --> 00:22:24,320
so there you see the trigger that came

00:22:21,840 --> 00:22:26,960
in right it has this artifact

00:22:24,320 --> 00:22:27,840
which has the uh type which is a github

00:22:26,960 --> 00:22:30,000
file

00:22:27,840 --> 00:22:31,840
this is the name i had given it has the

00:22:30,000 --> 00:22:33,600
version and the reference in there

00:22:31,840 --> 00:22:35,760
right that is the trigger that came

00:22:33,600 --> 00:22:38,799
through

00:22:35,760 --> 00:22:41,520
um and you know we could look at that

00:22:38,799 --> 00:22:44,400
this would be the sha

00:22:41,520 --> 00:22:44,400
of this file

00:22:46,400 --> 00:22:51,360
39 minutes ago it shouldn't be let's

00:22:48,559 --> 00:22:54,919
refresh the history

00:22:51,360 --> 00:22:57,919
uh adf

00:22:54,919 --> 00:22:57,919
2e76

00:22:58,799 --> 00:23:05,520
oh i should go in here adf

00:23:02,640 --> 00:23:07,360
to e76 so this is the one that actually

00:23:05,520 --> 00:23:10,559
came in right

00:23:07,360 --> 00:23:12,960
and and is getting deployed

00:23:10,559 --> 00:23:14,480
so what we see that uh it has actually

00:23:12,960 --> 00:23:17,679
run and deployed that

00:23:14,480 --> 00:23:18,480
um let's go look at uh the console oh i

00:23:17,679 --> 00:23:20,400
should not have

00:23:18,480 --> 00:23:22,159
done that so let's look at it and let's

00:23:20,400 --> 00:23:24,799
look at the console output

00:23:22,159 --> 00:23:26,480
so if i look at the console output we

00:23:24,799 --> 00:23:27,600
see the content of that file is

00:23:26,480 --> 00:23:29,360
available it got

00:23:27,600 --> 00:23:31,280
fetched it and it outputs something

00:23:29,360 --> 00:23:34,559
called spinnaker config json

00:23:31,280 --> 00:23:36,480
right nginx install true

00:23:34,559 --> 00:23:38,880
and then postgres install is false it

00:23:36,480 --> 00:23:41,120
can cut that file back

00:23:38,880 --> 00:23:43,039
now just to look at it i have this uh

00:23:41,120 --> 00:23:45,360
evaluate variables in there to

00:23:43,039 --> 00:23:47,520
show what it is like so you know in this

00:23:45,360 --> 00:23:51,039
evaluate variables i can see

00:23:47,520 --> 00:23:54,400
that i can see the nginx in there like

00:23:51,039 --> 00:23:56,960
like it's available right and this is

00:23:54,400 --> 00:23:59,520
the artifact that was available

00:23:56,960 --> 00:24:00,320
uh so and if i go ahead and try to look

00:23:59,520 --> 00:24:04,640
at um

00:24:00,320 --> 00:24:09,679
deploy nginx and look at the deployment

00:24:04,640 --> 00:24:13,360
yaml i should see 117

00:24:09,679 --> 00:24:13,360
as the image being used

00:24:13,760 --> 00:24:18,000
uh there you go the image is indian x

00:24:16,159 --> 00:24:20,320
117 that's what it got

00:24:18,000 --> 00:24:24,000
replaced based on the value that came in

00:24:20,320 --> 00:24:27,600
right and that's what multiply

00:24:24,000 --> 00:24:30,960
and if i go look at the service

00:24:27,600 --> 00:24:34,240
for that where is my service this is the

00:24:30,960 --> 00:24:34,240
details of the service

00:24:34,400 --> 00:24:38,080
engineering service let me just uh look

00:24:37,520 --> 00:24:40,000
at that

00:24:38,080 --> 00:24:41,360
yeah here also when you can when you're

00:24:40,000 --> 00:24:43,200
looking at it let me move this window

00:24:41,360 --> 00:24:45,440
away a little bit

00:24:43,200 --> 00:24:48,240
so you can see that right now the active

00:24:45,440 --> 00:24:50,640
version is nginx 170 the earlier one was

00:24:48,240 --> 00:24:53,600
160 that's the active version

00:24:50,640 --> 00:24:56,400
if i go look at it the service this is

00:24:53,600 --> 00:24:59,120
the service for that this is the url

00:24:56,400 --> 00:25:01,039
there's an nginx running there right

00:24:59,120 --> 00:25:02,720
again it doesn't output the version

00:25:01,039 --> 00:25:04,799
if the version was output here you would

00:25:02,720 --> 00:25:05,600
have seen it but definitely here you can

00:25:04,799 --> 00:25:08,159
see that

00:25:05,600 --> 00:25:10,880
this is the version that's running and

00:25:08,159 --> 00:25:15,360
postgres is still running that 10 alpha

00:25:10,880 --> 00:25:17,840
okay uh so what you saw is that uh

00:25:15,360 --> 00:25:19,120
what this did is uh let me go back to

00:25:17,840 --> 00:25:21,840
the pipelines

00:25:19,120 --> 00:25:22,559
uh it basically went ahead and fetched

00:25:21,840 --> 00:25:25,600
the

00:25:22,559 --> 00:25:27,760
variables from get

00:25:25,600 --> 00:25:30,000
injected into the pipeline and based on

00:25:27,760 --> 00:25:32,640
that it actually deployed nginx

00:25:30,000 --> 00:25:34,159
because we have say postgres is false it

00:25:32,640 --> 00:25:37,360
did not deploy postgres

00:25:34,159 --> 00:25:40,000
right we can see that it got skipped

00:25:37,360 --> 00:25:41,760
and then it validated it and now it's

00:25:40,000 --> 00:25:43,679
waiting to deploy to production and i

00:25:41,760 --> 00:25:46,400
say deploy to production

00:25:43,679 --> 00:25:47,600
continue it's gone into deployment of

00:25:46,400 --> 00:25:50,799
production

00:25:47,600 --> 00:25:52,880
and once this pipeline comes in you can

00:25:50,799 --> 00:25:53,279
see that it got those two parameters the

00:25:52,880 --> 00:25:56,720
bom

00:25:53,279 --> 00:25:58,480
file and the version adf to be whatever

00:25:56,720 --> 00:26:00,400
was passed and was passed along

00:25:58,480 --> 00:26:02,400
and it would go ahead and deploy

00:26:00,400 --> 00:26:05,360
production

00:26:02,400 --> 00:26:07,279
with that same value or parameter in

00:26:05,360 --> 00:26:11,840
there

00:26:07,279 --> 00:26:13,840
so what we saw over here

00:26:11,840 --> 00:26:15,120
till now to recap basically you know

00:26:13,840 --> 00:26:17,200
it's going through it will deploy in

00:26:15,120 --> 00:26:18,640
there so to recap whatever we saw is

00:26:17,200 --> 00:26:22,480
that

00:26:18,640 --> 00:26:25,520
we had our configurations defined

00:26:22,480 --> 00:26:28,640
in uh git and what we did

00:26:25,520 --> 00:26:31,360
is we use spinnaker to fetch the

00:26:28,640 --> 00:26:34,799
contents of the configuration file

00:26:31,360 --> 00:26:36,480
and inject it into the pipeline

00:26:34,799 --> 00:26:38,240
and then use the values in that

00:26:36,480 --> 00:26:41,360
configuration file

00:26:38,240 --> 00:26:44,960
in downstream processing and made

00:26:41,360 --> 00:26:48,960
deployment decision based on whatever

00:26:44,960 --> 00:26:48,960
was in that configuration file

00:26:49,440 --> 00:26:56,559
that's all i had to show you um

00:26:53,120 --> 00:27:01,279
hopefully you found this uh session

00:26:56,559 --> 00:27:01,279
useful uh and

00:27:01,440 --> 00:27:04,960
was informative to you if you have any

00:27:04,240 --> 00:27:07,360
questions

00:27:04,960 --> 00:27:09,200
you can ask in the chat and um i'll be

00:27:07,360 --> 00:27:11,360
happy to answer them

00:27:09,200 --> 00:27:12,720
uh if you have questions later on feel

00:27:11,360 --> 00:27:16,799
free to reach out to me

00:27:12,720 --> 00:27:18,960
on my email thermalia at ops.io

00:27:16,799 --> 00:27:20,080
and i'm also available in the spinnaker

00:27:18,960 --> 00:27:24,000
slack channel

00:27:20,080 --> 00:27:26,320
uh malia sam so with that

00:27:24,000 --> 00:27:27,679
uh thank you for your time thank you for

00:27:26,320 --> 00:27:31,279
listening to me

00:27:27,679 --> 00:27:34,399
uh and uh hope you found it uh useful

00:27:31,279 --> 00:27:37,840
informative and wish

00:27:34,399 --> 00:27:38,640
you a happy and wonderful rest of the

00:27:37,840 --> 00:27:45,679
day

00:27:38,640 --> 00:27:45,679

YouTube URL: https://www.youtube.com/watch?v=Zts1IDRibmI


