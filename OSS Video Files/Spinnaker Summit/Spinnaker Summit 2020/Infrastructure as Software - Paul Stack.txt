Title: Infrastructure as Software - Paul Stack
Publication date: 2021-01-16
Playlist: Spinnaker Summit 2020
Description: 
	In this talk, Paul demonstrates how to build infrastructure that manages Serverless, Kubernetes, PaaS and IaaS systems across multiple cloud providers.

Paul explains why writing infrastructure in general programming languages is a better way to is a better choice for infrastructure management. Pulumi is an open source tool that allows users to write their infrastructure code in TypeScript, Python, DotNet or Go. General purpose languages allow infrastructure code to have integrated testing, compile time checks as well as being able to create infrastructure APIs and is more suited to infrastructure management than DSLs, JSON or YAML.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:05,359 --> 00:00:07,919
hi everyone

00:00:06,240 --> 00:00:09,679
my name is paul stack i work for a

00:00:07,919 --> 00:00:11,120
company called polumi and this is my

00:00:09,679 --> 00:00:13,200
talk and infrastructure as

00:00:11,120 --> 00:00:14,719
software you can find me on the internet

00:00:13,200 --> 00:00:16,240
at stac72

00:00:14,719 --> 00:00:17,840
and you can also email me if you have

00:00:16,240 --> 00:00:20,720
any follow-up questions paul

00:00:17,840 --> 00:00:20,720
polomi.com

00:00:21,119 --> 00:00:24,400
so right now we're going through this

00:00:22,880 --> 00:00:26,960
cloud transition

00:00:24,400 --> 00:00:28,400
in uh in infrastructure management and

00:00:26,960 --> 00:00:29,920
what i mean by that is that

00:00:28,400 --> 00:00:31,279
you know whether we're forced to go to

00:00:29,920 --> 00:00:33,040
the cloud or whether we're taking

00:00:31,279 --> 00:00:34,239
advantage of the cloud in order to make

00:00:33,040 --> 00:00:37,600
sure that we're

00:00:34,239 --> 00:00:39,840
able to move faster for our customers

00:00:37,600 --> 00:00:40,719
or scale out better or be able to cope

00:00:39,840 --> 00:00:43,280
with demand

00:00:40,719 --> 00:00:44,399
at some point companies have started

00:00:43,280 --> 00:00:46,480
looking and

00:00:44,399 --> 00:00:48,000
actively moving towards the cloud now

00:00:46,480 --> 00:00:49,760
there are a number of ways in which they

00:00:48,000 --> 00:00:50,960
can do it and the number of variants and

00:00:49,760 --> 00:00:52,719
how they do this

00:00:50,960 --> 00:00:54,559
and these are a few on the screen so we

00:00:52,719 --> 00:00:56,000
have our traditional v1

00:00:54,559 --> 00:00:58,079
where we've effectively picked up our

00:00:56,000 --> 00:01:00,719
data center and we've moved to the cloud

00:00:58,079 --> 00:01:02,160
and it's very much a static style cloud

00:01:00,719 --> 00:01:03,680
you know it has web servers it has

00:01:02,160 --> 00:01:05,199
database servers

00:01:03,680 --> 00:01:06,799
there's a load balancer probably in

00:01:05,199 --> 00:01:09,439
there that accesses the

00:01:06,799 --> 00:01:10,000
internals of the system and it's um you

00:01:09,439 --> 00:01:13,119
know

00:01:10,000 --> 00:01:14,960
long-lived instances that that tend to

00:01:13,119 --> 00:01:16,000
be managed by a configuration management

00:01:14,960 --> 00:01:18,080
tool

00:01:16,000 --> 00:01:19,360
then you know we have companies who have

00:01:18,080 --> 00:01:20,640
moved away

00:01:19,360 --> 00:01:21,920
in a different direction they've gone

00:01:20,640 --> 00:01:22,880
for a much more transitional style

00:01:21,920 --> 00:01:24,799
architecture

00:01:22,880 --> 00:01:27,119
where they're taking advantage of vms

00:01:24,799 --> 00:01:30,400
and maybe experimenting with containers

00:01:27,119 --> 00:01:32,479
it's a little less monolithic it's much

00:01:30,400 --> 00:01:34,400
more hybrid cloud between public and

00:01:32,479 --> 00:01:36,560
private sort of interactions without

00:01:34,400 --> 00:01:38,640
what's with what's happening and they're

00:01:36,560 --> 00:01:40,400
more than likely taking advantage of an

00:01:38,640 --> 00:01:42,960
infrastructure is co

00:01:40,400 --> 00:01:43,920
an infrastructure um software vendor

00:01:42,960 --> 00:01:47,200
something like

00:01:43,920 --> 00:01:49,680
you know a monitoring agent or

00:01:47,200 --> 00:01:51,119
databases on the cloud and and they're

00:01:49,680 --> 00:01:52,079
able to do a lot of different things in

00:01:51,119 --> 00:01:53,920
that direction

00:01:52,079 --> 00:01:56,079
and then you have people who have

00:01:53,920 --> 00:01:57,600
re-architected for the cloud

00:01:56,079 --> 00:01:59,439
and when i say re-architect that they've

00:01:57,600 --> 00:02:00,479
gone for a much more modern style

00:01:59,439 --> 00:02:04,719
infrastructure

00:02:00,479 --> 00:02:07,200
where it's you know definitely um

00:02:04,719 --> 00:02:08,000
using a container hypervisor something

00:02:07,200 --> 00:02:09,599
like kubernetes

00:02:08,000 --> 00:02:11,039
hashcorp nomad you know they're

00:02:09,599 --> 00:02:12,879
definitely taking advantage of data

00:02:11,039 --> 00:02:13,599
stores possibly taking advantage of

00:02:12,879 --> 00:02:15,120
functions

00:02:13,599 --> 00:02:17,680
and you may have heard this call like

00:02:15,120 --> 00:02:19,760
microservices or cloud native

00:02:17,680 --> 00:02:21,040
or anything you want here but we call it

00:02:19,760 --> 00:02:24,080
a polymer much more

00:02:21,040 --> 00:02:26,000
modern style architecture

00:02:24,080 --> 00:02:27,680
now there are three ways to manage the

00:02:26,000 --> 00:02:30,319
cloud and they

00:02:27,680 --> 00:02:31,760
tend always to start with you know as as

00:02:30,319 --> 00:02:33,200
people experiment with the cloud

00:02:31,760 --> 00:02:35,120
they go and they have a look around the

00:02:33,200 --> 00:02:36,000
web console they click around the

00:02:35,120 --> 00:02:37,920
portals

00:02:36,000 --> 00:02:39,200
they provision some resources they try

00:02:37,920 --> 00:02:40,319
and make the resources talk to each

00:02:39,200 --> 00:02:43,200
other

00:02:40,319 --> 00:02:44,800
and it's very difficult to scale for um

00:02:43,200 --> 00:02:48,239
that level of resource

00:02:44,800 --> 00:02:50,560
you can't really recreate it every time

00:02:48,239 --> 00:02:52,800
correctly because we're humans we make

00:02:50,560 --> 00:02:57,120
mistakes we cut corners

00:02:52,800 --> 00:02:59,120
and as as it needs a manual interaction

00:02:57,120 --> 00:03:01,360
you need people to be available to scale

00:02:59,120 --> 00:03:02,879
up when demand is required

00:03:01,360 --> 00:03:04,239
so there are companies who move beyond

00:03:02,879 --> 00:03:06,080
the portal in the console and they've

00:03:04,239 --> 00:03:07,599
actually gone for cli tools and scripts

00:03:06,080 --> 00:03:09,760
and templates and it's a much more

00:03:07,599 --> 00:03:10,879
automated workflow and it is able to be

00:03:09,760 --> 00:03:15,440
versioned

00:03:10,879 --> 00:03:19,519
but as these tools are

00:03:15,440 --> 00:03:22,000
used they actually need to be um

00:03:19,519 --> 00:03:23,200
to be made reusable so item potency is a

00:03:22,000 --> 00:03:24,640
big thing here when you're running

00:03:23,200 --> 00:03:27,040
scripts against the cloud

00:03:24,640 --> 00:03:28,720
uh to be able to understand state maybe

00:03:27,040 --> 00:03:30,319
what happens when updates are

00:03:28,720 --> 00:03:31,760
are made you know there's a you have to

00:03:30,319 --> 00:03:32,560
implement some of your own update

00:03:31,760 --> 00:03:34,480
strategy

00:03:32,560 --> 00:03:36,159
and some cloud vendors are actually

00:03:34,480 --> 00:03:38,159
offering these by default so you have

00:03:36,159 --> 00:03:39,760
cloud formation by aws you have cloud

00:03:38,159 --> 00:03:42,000
deployment manager by google

00:03:39,760 --> 00:03:42,959
and you have azure resource manager arm

00:03:42,000 --> 00:03:45,840
templates by

00:03:42,959 --> 00:03:46,959
microsoft and then there are other tools

00:03:45,840 --> 00:03:50,080
in this area as well

00:03:46,959 --> 00:03:52,319
you know this starting to move away from

00:03:50,080 --> 00:03:55,200
this templating towards item potency

00:03:52,319 --> 00:03:56,720
or excuse me towards um much more cloud

00:03:55,200 --> 00:03:59,280
agnostic tooling

00:03:56,720 --> 00:04:00,560
much more programmable tooling around

00:03:59,280 --> 00:04:02,879
the cloud and that's where

00:04:00,560 --> 00:04:04,000
tools like terraform and pollumi and all

00:04:02,879 --> 00:04:06,720
these different things

00:04:04,000 --> 00:04:08,159
so it's actually writing resources just

00:04:06,720 --> 00:04:10,799
like you would write

00:04:08,159 --> 00:04:12,080
software so you can create your apis you

00:04:10,799 --> 00:04:15,519
can create

00:04:12,080 --> 00:04:17,280
modules you can actually wrap reusable

00:04:15,519 --> 00:04:19,280
code away so that people can actually

00:04:17,280 --> 00:04:22,160
have a nice api surface area

00:04:19,280 --> 00:04:23,360
and this allows us to be much more

00:04:22,160 --> 00:04:25,680
scalable

00:04:23,360 --> 00:04:28,160
and allow us to actually interact in a

00:04:25,680 --> 00:04:30,479
in a bigger way with the cloud

00:04:28,160 --> 00:04:32,960
devops is transforming everything to do

00:04:30,479 --> 00:04:36,320
with engineering organizations right now

00:04:32,960 --> 00:04:38,160
so we used to have this scenario where

00:04:36,320 --> 00:04:40,160
it was always a centralized ops teams

00:04:38,160 --> 00:04:41,759
developers would fire packages across

00:04:40,160 --> 00:04:43,280
the decentralized ops teams

00:04:41,759 --> 00:04:45,360
the ops teams would manage the

00:04:43,280 --> 00:04:47,440
environments it would be difficult to

00:04:45,360 --> 00:04:49,360
get the environments created because it

00:04:47,440 --> 00:04:51,280
was only a centralized team that did it

00:04:49,360 --> 00:04:53,600
and the ops teams would also more than

00:04:51,280 --> 00:04:55,440
likely deploy your software for you

00:04:53,600 --> 00:04:57,040
now that's broken apart in a lot of

00:04:55,440 --> 00:04:58,800
different ways

00:04:57,040 --> 00:05:00,720
and it tends to be now we have like

00:04:58,800 --> 00:05:02,800
specialist security teams specialist

00:05:00,720 --> 00:05:04,400
application teams you even have things

00:05:02,800 --> 00:05:06,160
like devops teams infrastructure

00:05:04,400 --> 00:05:07,199
engineers sres there's all these

00:05:06,160 --> 00:05:09,680
different things

00:05:07,199 --> 00:05:11,680
but what's actually happened is ops are

00:05:09,680 --> 00:05:13,440
no longer the gatekeeper by being the

00:05:11,680 --> 00:05:14,960
centralized area but they're now the

00:05:13,440 --> 00:05:17,840
enabler for the organization

00:05:14,960 --> 00:05:18,639
they actually empower teams to be able

00:05:17,840 --> 00:05:20,639
to build

00:05:18,639 --> 00:05:22,160
infrastructure on top of the base

00:05:20,639 --> 00:05:22,960
infrastructure that they actually have

00:05:22,160 --> 00:05:26,479
created

00:05:22,960 --> 00:05:28,880
let's think of a kubernetes um system

00:05:26,479 --> 00:05:29,919
so the operations team the sres whatever

00:05:28,880 --> 00:05:31,520
you want to call them

00:05:29,919 --> 00:05:33,759
would actually build the infrastructure

00:05:31,520 --> 00:05:35,919
for you and then they would share

00:05:33,759 --> 00:05:37,680
cube conflicts specific configurations

00:05:35,919 --> 00:05:38,160
that would allow you for the application

00:05:37,680 --> 00:05:41,520
team

00:05:38,160 --> 00:05:43,759
to deploy applications and and

00:05:41,520 --> 00:05:45,039
other pieces of infrastructure into that

00:05:43,759 --> 00:05:47,280
centralized environment

00:05:45,039 --> 00:05:48,560
so we're very much moving in this idea

00:05:47,280 --> 00:05:51,039
where we're heading towards cloud

00:05:48,560 --> 00:05:51,039
engineering

00:05:51,520 --> 00:05:55,039
really important just a very quick recap

00:05:53,440 --> 00:05:58,160
what is infrastructure is code

00:05:55,039 --> 00:05:59,520
so it is eliminating manual error prone

00:05:58,160 --> 00:06:02,000
provisioning changes

00:05:59,520 --> 00:06:03,280
it's bringing best practices to your

00:06:02,000 --> 00:06:06,560
infrastructure management

00:06:03,280 --> 00:06:09,600
and allows you to gain previews

00:06:06,560 --> 00:06:11,199
and see changes of what's actually

00:06:09,600 --> 00:06:13,280
happening in your code

00:06:11,199 --> 00:06:15,520
why do we care about it it's automated

00:06:13,280 --> 00:06:19,120
and repeatable i just told that

00:06:15,520 --> 00:06:21,520
it's much faster to get your systems

00:06:19,120 --> 00:06:22,400
new systems and existing systems up and

00:06:21,520 --> 00:06:24,479
running

00:06:22,400 --> 00:06:26,240
and of course it's much more predictable

00:06:24,479 --> 00:06:28,240
because we're able to get previews and

00:06:26,240 --> 00:06:30,319
understand what the changes are that

00:06:28,240 --> 00:06:32,240
it's going to be

00:06:30,319 --> 00:06:34,319
but at polluting we actually like to say

00:06:32,240 --> 00:06:36,960
we are modern infrastructure as code

00:06:34,319 --> 00:06:37,600
so not only do we have you know that

00:06:36,960 --> 00:06:40,000
deploy

00:06:37,600 --> 00:06:42,080
flexibility with cli so that we can

00:06:40,000 --> 00:06:43,600
integrate into ci cd workflows and be

00:06:42,080 --> 00:06:46,000
able to get all the changes

00:06:43,600 --> 00:06:46,800
but at a much lower level we actually

00:06:46,000 --> 00:06:48,639
use

00:06:46,800 --> 00:06:50,880
programming languages which means that

00:06:48,639 --> 00:06:52,720
you can start to create and

00:06:50,880 --> 00:06:54,560
and share abstractions within your

00:06:52,720 --> 00:06:55,120
organization and also externally of

00:06:54,560 --> 00:06:57,120
course

00:06:55,120 --> 00:06:58,639
and be able to use your favorite tooling

00:06:57,120 --> 00:07:01,280
that you use on a day-to-day basis your

00:06:58,639 --> 00:07:03,039
id's your testing your limping tools

00:07:01,280 --> 00:07:04,400
all these different things that give you

00:07:03,039 --> 00:07:06,400
much more

00:07:04,400 --> 00:07:08,880
familiarity about what you're going to

00:07:06,400 --> 00:07:12,240
be deploying into your system

00:07:08,880 --> 00:07:15,280
now of course as we're in code

00:07:12,240 --> 00:07:17,680
and we're actually pushing code through

00:07:15,280 --> 00:07:19,680
our source control we can then start to

00:07:17,680 --> 00:07:20,400
do things like semantic versioning

00:07:19,680 --> 00:07:22,479
testing

00:07:20,400 --> 00:07:23,919
code reviews bringing all these

00:07:22,479 --> 00:07:25,360
development practices that we've been

00:07:23,919 --> 00:07:28,400
doing in the um

00:07:25,360 --> 00:07:28,960
application and the software side for

00:07:28,400 --> 00:07:31,280
years

00:07:28,960 --> 00:07:33,199
into our ops side and that's why at

00:07:31,280 --> 00:07:35,599
plummy we're starting to

00:07:33,199 --> 00:07:37,919
phrase this as infrastructure software

00:07:35,599 --> 00:07:40,319
because we understand that

00:07:37,919 --> 00:07:42,880
as applications grow infrastructure has

00:07:40,319 --> 00:07:45,360
to grow as well and you cannot

00:07:42,880 --> 00:07:46,000
just continue creating this monolithic

00:07:45,360 --> 00:07:48,080
ball of

00:07:46,000 --> 00:07:50,000
infrastructure code you actually have to

00:07:48,080 --> 00:07:52,879
shape it refactor it

00:07:50,000 --> 00:07:53,680
test it move it forward start to create

00:07:52,879 --> 00:07:55,680
abstractions

00:07:53,680 --> 00:07:57,199
version it so that and it grows in

00:07:55,680 --> 00:08:00,879
exactly the same way

00:07:57,199 --> 00:08:00,879
that application code grows as well

00:08:01,120 --> 00:08:05,440
now a quick bit on pollutant pollution

00:08:03,360 --> 00:08:07,360
actually has a foundation of providers

00:08:05,440 --> 00:08:08,080
these providers allow you to talk to

00:08:07,360 --> 00:08:10,639
clouds

00:08:08,080 --> 00:08:12,319
or infrastructures code vendors then

00:08:10,639 --> 00:08:14,720
based on top of these providers

00:08:12,319 --> 00:08:16,240
we have started showing that you can

00:08:14,720 --> 00:08:19,680
create libraries

00:08:16,240 --> 00:08:22,800
or apis for specific uh

00:08:19,680 --> 00:08:24,319
jobs so like serverless layers of

00:08:22,800 --> 00:08:26,160
abstraction containers layers of

00:08:24,319 --> 00:08:27,680
distraction and then we've even bubbled

00:08:26,160 --> 00:08:29,280
that up into something we're actually

00:08:27,680 --> 00:08:31,919
calling fully crosswalk

00:08:29,280 --> 00:08:33,919
where we can hide away a lot of that

00:08:31,919 --> 00:08:35,279
abstraction using the best practices of

00:08:33,919 --> 00:08:37,120
a specific cloud

00:08:35,279 --> 00:08:39,360
and actually allow developers and

00:08:37,120 --> 00:08:41,919
operators to be able to deploy things

00:08:39,360 --> 00:08:45,760
easier now what i mean by that

00:08:41,919 --> 00:08:48,399
is in amazon if you want to create a vpc

00:08:45,760 --> 00:08:49,279
your own vpc you need the vpc you need

00:08:48,399 --> 00:08:51,040
subnets

00:08:49,279 --> 00:08:53,200
you need an internet gateway you need

00:08:51,040 --> 00:08:54,720
route tables you need routes you need

00:08:53,200 --> 00:08:56,480
route table associations

00:08:54,720 --> 00:08:58,640
you potentially need not gateways you

00:08:56,480 --> 00:09:01,440
potentially need elastic ips

00:08:58,640 --> 00:09:02,880
now having to create all these pieces of

00:09:01,440 --> 00:09:04,800
all these resources and all these pieces

00:09:02,880 --> 00:09:08,080
of infrastructure together

00:09:04,800 --> 00:09:10,320
actually makes life quite difficult

00:09:08,080 --> 00:09:11,600
to do this um unless you're doing it

00:09:10,320 --> 00:09:12,800
regularly so you'd have to read

00:09:11,600 --> 00:09:16,560
documentation

00:09:12,800 --> 00:09:17,200
and it will be painful um for developers

00:09:16,560 --> 00:09:19,440
who are not

00:09:17,200 --> 00:09:21,279
akin to doing this to do it all the time

00:09:19,440 --> 00:09:23,600
so in polumi we've created this

00:09:21,279 --> 00:09:25,839
aws crosswalk library where you can

00:09:23,600 --> 00:09:29,120
specify in a single line of code

00:09:25,839 --> 00:09:30,160
a new vpc and we will take care of all

00:09:29,120 --> 00:09:32,080
of the best

00:09:30,160 --> 00:09:33,360
practices the common best practices that

00:09:32,080 --> 00:09:35,519
amazon suggests

00:09:33,360 --> 00:09:36,880
around the scaffolding of the vpc and

00:09:35,519 --> 00:09:38,800
that's only because of the fact that

00:09:36,880 --> 00:09:41,120
we're able to take advantage

00:09:38,800 --> 00:09:43,440
of the language runtimes and be able to

00:09:41,120 --> 00:09:44,640
create these layers of abstractions apis

00:09:43,440 --> 00:09:46,720
that people can actually write code

00:09:44,640 --> 00:09:49,760
against

00:09:46,720 --> 00:09:52,880
so we can deploy code from anywhere to

00:09:49,760 --> 00:09:54,959
anywhere so source code uh in our

00:09:52,880 --> 00:09:56,480
in our source code repositories um in

00:09:54,959 --> 00:09:58,880
different languages polymer sports

00:09:56,480 --> 00:10:01,200
javascript typescript python go c

00:09:58,880 --> 00:10:03,680
f sharp vb and you know there's the

00:10:01,200 --> 00:10:04,640
ability to add other languages as well

00:10:03,680 --> 00:10:07,839
and it has

00:10:04,640 --> 00:10:09,440
cicd integrations there is actually a

00:10:07,839 --> 00:10:10,959
plummy spinnaker plug-in

00:10:09,440 --> 00:10:13,040
so it's very nice that we're actually

00:10:10,959 --> 00:10:16,560
able to be part of the spinnaker event

00:10:13,040 --> 00:10:18,640
and you know it allows

00:10:16,560 --> 00:10:20,480
your infrastructure to be really

00:10:18,640 --> 00:10:21,120
embedded as part of your ci cd and your

00:10:20,480 --> 00:10:25,440
git

00:10:21,120 --> 00:10:27,440
ops workflow now environments

00:10:25,440 --> 00:10:29,279
it can talk to multiple environments at

00:10:27,440 --> 00:10:32,640
the same time you can be deploying

00:10:29,279 --> 00:10:34,959
code to amazon to azure to kubernetes to

00:10:32,640 --> 00:10:36,640
vmware to openstack to digitalocean all

00:10:34,959 --> 00:10:40,560
from the same polyme application

00:10:36,640 --> 00:10:44,000
if you so wish it doesn't matter

00:10:40,560 --> 00:10:46,399
now even though we're using real code

00:10:44,000 --> 00:10:49,200
it's important to understand that

00:10:46,399 --> 00:10:52,560
pollumi is declarative by default

00:10:49,200 --> 00:10:56,560
so every plummy resource

00:10:52,560 --> 00:10:59,040
um has the the normal

00:10:56,560 --> 00:11:00,800
it follows a a common pattern so we have

00:10:59,040 --> 00:11:02,560
a name for the resource we have some

00:11:00,800 --> 00:11:04,560
arguments for the resource and then we

00:11:02,560 --> 00:11:05,600
have some condition of some polemic

00:11:04,560 --> 00:11:07,440
custom specific

00:11:05,600 --> 00:11:08,880
options if you need to embed them as

00:11:07,440 --> 00:11:11,360
part of the resource

00:11:08,880 --> 00:11:13,440
even though it is declarative it is

00:11:11,360 --> 00:11:15,839
written with imperative languages

00:11:13,440 --> 00:11:19,760
so it will work its way down the page

00:11:15,839 --> 00:11:19,760
and it will allow you to create

00:11:19,920 --> 00:11:23,519
dependencies between the different

00:11:21,920 --> 00:11:25,200
pieces of the system so you'll see here

00:11:23,519 --> 00:11:27,839
that i'm creating a security group

00:11:25,200 --> 00:11:28,959
then i'm creating an instance and then

00:11:27,839 --> 00:11:30,399
after the instance

00:11:28,959 --> 00:11:32,000
i'm actually saying that the security

00:11:30,399 --> 00:11:33,040
group that the instance needs to be

00:11:32,000 --> 00:11:35,600
created

00:11:33,040 --> 00:11:36,800
references group dot id and then we can

00:11:35,600 --> 00:11:39,040
export some

00:11:36,800 --> 00:11:40,720
uh information off the back of it so

00:11:39,040 --> 00:11:42,399
we've actually built an explicit

00:11:40,720 --> 00:11:43,040
dependency between security group and

00:11:42,399 --> 00:11:44,880
instance

00:11:43,040 --> 00:11:46,800
and polumi understands that it needs to

00:11:44,880 --> 00:11:48,640
create that security group first before

00:11:46,800 --> 00:11:50,399
it creates the instance otherwise

00:11:48,640 --> 00:11:53,200
it would try and do as much of it in

00:11:50,399 --> 00:11:55,120
parallel as possible

00:11:53,200 --> 00:11:56,480
because we're using language ecosystem

00:11:55,120 --> 00:11:58,959
and the runtimes

00:11:56,480 --> 00:11:59,920
we actually get programming primitives

00:11:58,959 --> 00:12:02,240
by default

00:11:59,920 --> 00:12:04,399
so we can take care of conditionals and

00:12:02,240 --> 00:12:06,240
loops we can take cares of

00:12:04,399 --> 00:12:08,399
lambdas we can do all these different

00:12:06,240 --> 00:12:11,600
programming functionality

00:12:08,399 --> 00:12:12,800
inside our application so here you'll

00:12:11,600 --> 00:12:15,200
actually see that

00:12:12,800 --> 00:12:17,440
if a config variable that's being passed

00:12:15,200 --> 00:12:19,839
in called public subnet citers

00:12:17,440 --> 00:12:21,440
is not equal to nil then we need to

00:12:19,839 --> 00:12:23,920
actually

00:12:21,440 --> 00:12:26,480
loop over all the values in that public

00:12:23,920 --> 00:12:30,240
subnet ciders and create a new subnet

00:12:26,480 --> 00:12:31,680
based on that excuse me

00:12:30,240 --> 00:12:33,600
plummy can take care of multi-provider

00:12:31,680 --> 00:12:35,040
workflows as i said we can deploy in

00:12:33,600 --> 00:12:36,240
lots of different places at the same

00:12:35,040 --> 00:12:38,800
time

00:12:36,240 --> 00:12:39,680
but we actually can start to create real

00:12:38,800 --> 00:12:43,200
apis

00:12:39,680 --> 00:12:45,200
real reusable libraries that you can

00:12:43,200 --> 00:12:47,120
pass around inside your

00:12:45,200 --> 00:12:48,959
company registries you know whether it's

00:12:47,120 --> 00:12:52,160
npm or pipey or

00:12:48,959 --> 00:12:54,959
just in your source control that allow

00:12:52,160 --> 00:12:55,839
people to actually take cr um create

00:12:54,959 --> 00:12:58,160
simple

00:12:55,839 --> 00:12:59,519
layers of abstraction to hide away

00:12:58,160 --> 00:13:01,519
complexity that um

00:12:59,519 --> 00:13:03,440
that other people don't actually need to

00:13:01,519 --> 00:13:05,360
care about

00:13:03,440 --> 00:13:07,600
and then we can start to take advantage

00:13:05,360 --> 00:13:09,600
of advanced orchestration

00:13:07,600 --> 00:13:11,279
so here you will see that we are

00:13:09,600 --> 00:13:14,720
creating three replicas

00:13:11,279 --> 00:13:16,480
of a deployment in kubernetes after we

00:13:14,720 --> 00:13:19,600
create our thumb we deploy those

00:13:16,480 --> 00:13:22,000
three replicas we then are able to

00:13:19,600 --> 00:13:24,000
talk to prometheus because prometheus

00:13:22,000 --> 00:13:26,399
has an sdk it has an api

00:13:24,000 --> 00:13:27,839
and we're able to pass in the name of

00:13:26,399 --> 00:13:29,760
the deployment

00:13:27,839 --> 00:13:31,120
we need able to check the application

00:13:29,760 --> 00:13:31,920
metrics that are based on the back of

00:13:31,120 --> 00:13:33,680
that

00:13:31,920 --> 00:13:36,079
and then we're actually once we're happy

00:13:33,680 --> 00:13:38,880
and satisfied we will continue on with

00:13:36,079 --> 00:13:42,240
the next set of replicas in the cluster

00:13:38,880 --> 00:13:43,920
it tended to be up until now that

00:13:42,240 --> 00:13:45,360
this would have had to be done by a lot

00:13:43,920 --> 00:13:48,079
of different tools so we would have

00:13:45,360 --> 00:13:49,519
deployed once we would have gone to our

00:13:48,079 --> 00:13:51,120
our metrics console we would have

00:13:49,519 --> 00:13:52,000
checked it we would have then come back

00:13:51,120 --> 00:13:55,199
and we would have to

00:13:52,000 --> 00:13:56,720
redeploy it based on on changes again

00:13:55,199 --> 00:13:58,880
so we can actually embed it all in one

00:13:56,720 --> 00:14:01,199
workflow

00:13:58,880 --> 00:14:02,560
now one of the things that polomia

00:14:01,199 --> 00:14:04,320
actually says is that we want to bring

00:14:02,560 --> 00:14:06,480
engineering practices in here and that

00:14:04,320 --> 00:14:09,279
includes testing

00:14:06,480 --> 00:14:10,320
we all know that testing our

00:14:09,279 --> 00:14:12,639
infrastructure

00:14:10,320 --> 00:14:14,320
usually means spinning up resources

00:14:12,639 --> 00:14:16,079
testing that the resources have been

00:14:14,320 --> 00:14:18,320
created as expected

00:14:16,079 --> 00:14:19,920
but we know that if we pass specific

00:14:18,320 --> 00:14:22,240
parameters to a cloud

00:14:19,920 --> 00:14:24,240
it will act correctly and what we're

00:14:22,240 --> 00:14:26,000
actually usually doing

00:14:24,240 --> 00:14:27,680
is testing that the cloud themselves

00:14:26,000 --> 00:14:29,360
have done what we have asked not our

00:14:27,680 --> 00:14:31,680
internal logic

00:14:29,360 --> 00:14:33,440
at poloomi we can actually mock the

00:14:31,680 --> 00:14:34,320
cloud the requests and the responses

00:14:33,440 --> 00:14:36,160
from the cloud

00:14:34,320 --> 00:14:37,440
and we can actually run tests of our

00:14:36,160 --> 00:14:39,440
infrastructure code

00:14:37,440 --> 00:14:40,720
in milliseconds rather than waiting for

00:14:39,440 --> 00:14:42,880
resources to come up

00:14:40,720 --> 00:14:45,839
which means it's cheaper and it's got a

00:14:42,880 --> 00:14:47,680
much faster feedback loop for people

00:14:45,839 --> 00:14:49,440
and the last major feature for polomi

00:14:47,680 --> 00:14:51,279
which is probably my favorite

00:14:49,440 --> 00:14:53,360
is that polomimi has a secrets manager

00:14:51,279 --> 00:14:56,240
by uh built in um to it

00:14:53,360 --> 00:14:57,920
so we will actually allow you to encrypt

00:14:56,240 --> 00:14:58,959
your secrets by default when you use

00:14:57,920 --> 00:15:02,160
polumi

00:14:58,959 --> 00:15:04,959
so that we're trying to ensure

00:15:02,160 --> 00:15:05,760
that we're being best practices around

00:15:04,959 --> 00:15:07,920
security

00:15:05,760 --> 00:15:09,199
and it will integrate with amazon key

00:15:07,920 --> 00:15:12,959
vault

00:15:09,199 --> 00:15:14,399
amazon kms azure key vault or gcp kms

00:15:12,959 --> 00:15:16,000
and how to go involved so you know

00:15:14,399 --> 00:15:17,839
there's options that people can use in

00:15:16,000 --> 00:15:20,079
order to do things in here

00:15:17,839 --> 00:15:20,959
so for us pollumi empowers cloud

00:15:20,079 --> 00:15:23,519
engineers

00:15:20,959 --> 00:15:25,519
to deliver fast quickly deploy

00:15:23,519 --> 00:15:29,440
confidently because we have our testing

00:15:25,519 --> 00:15:31,279
operate securely because we have this um

00:15:29,440 --> 00:15:33,600
secrets manager built in and of course

00:15:31,279 --> 00:15:35,040
scale easily because we can create these

00:15:33,600 --> 00:15:37,279
layers of abstraction

00:15:35,040 --> 00:15:39,040
that allow us to interact in a faster

00:15:37,279 --> 00:15:40,560
way with kubernetes or serverless or

00:15:39,040 --> 00:15:42,000
containers or any of the different parts

00:15:40,560 --> 00:15:43,440
of the system

00:15:42,000 --> 00:15:46,079
so let's write some code and actually

00:15:43,440 --> 00:15:46,079
see what it does

00:15:48,160 --> 00:15:54,720
now by default every new operation

00:15:52,160 --> 00:15:56,480
pollumi is a cli based tool okay and

00:15:54,720 --> 00:15:58,880
you'll actually see in the cli

00:15:56,480 --> 00:16:00,320
it gives us some output that helps us be

00:15:58,880 --> 00:16:01,600
able to understand what we what we

00:16:00,320 --> 00:16:03,519
should do with polluting

00:16:01,600 --> 00:16:04,959
now here it says you know begin working

00:16:03,519 --> 00:16:07,920
with polumi run

00:16:04,959 --> 00:16:08,480
the polomi new command okay now if i run

00:16:07,920 --> 00:16:12,079
the pulling

00:16:08,480 --> 00:16:15,360
new command it will offer us a wizard

00:16:12,079 --> 00:16:18,079
of uh pre-packaged templates

00:16:15,360 --> 00:16:19,680
that are specific to a cloud vendor that

00:16:18,079 --> 00:16:22,880
means we can get started faster

00:16:19,680 --> 00:16:26,160
so let's choose aws typescript today

00:16:22,880 --> 00:16:26,160
let's give it a project name

00:16:26,959 --> 00:16:30,800
let's say spinnaker1 let's give a pro we

00:16:29,680 --> 00:16:32,639
don't need a description

00:16:30,800 --> 00:16:34,399
and then we have this idea of a stack a

00:16:32,639 --> 00:16:37,759
stack in pollumi

00:16:34,399 --> 00:16:40,959
is a set of configuration and

00:16:37,759 --> 00:16:42,079
the state of the resources that have

00:16:40,959 --> 00:16:43,839
been deployed

00:16:42,079 --> 00:16:45,839
segmented from each other think of an

00:16:43,839 --> 00:16:47,680
environment for staging testing

00:16:45,839 --> 00:16:49,360
production each of those would be

00:16:47,680 --> 00:16:50,079
specific stacks they can have their own

00:16:49,360 --> 00:16:52,160
configuration

00:16:50,079 --> 00:16:53,759
values and they can be independently

00:16:52,160 --> 00:16:55,279
deployed to but of course you can also

00:16:53,759 --> 00:16:56,000
make it each developer has their own

00:16:55,279 --> 00:16:58,480
stack

00:16:56,000 --> 00:17:00,480
a stack sits on top of a project which

00:16:58,480 --> 00:17:03,040
means everything inside the stack can

00:17:00,480 --> 00:17:04,000
access all the resources to be deployed

00:17:03,040 --> 00:17:06,480
from the project

00:17:04,000 --> 00:17:08,959
so let's say dev and because this is an

00:17:06,480 --> 00:17:08,959
amazon

00:17:09,600 --> 00:17:14,319
we can uh it will ask us what region we

00:17:11,760 --> 00:17:16,839
want to deploy into

00:17:14,319 --> 00:17:18,880
and it'll just go and install some

00:17:16,839 --> 00:17:20,959
dependencies and once it's finished

00:17:18,880 --> 00:17:22,799
installing the dependencies

00:17:20,959 --> 00:17:24,240
it will actually give me all of the

00:17:22,799 --> 00:17:25,760
pieces that i require

00:17:24,240 --> 00:17:28,000
to be able to get up and running with a

00:17:25,760 --> 00:17:29,200
pollumi application

00:17:28,000 --> 00:17:32,480
and you'll see it's installed some

00:17:29,200 --> 00:17:33,120
plugins and you're ready to go and if i

00:17:32,480 --> 00:17:37,120
just open

00:17:33,120 --> 00:17:37,120
my id

00:17:37,200 --> 00:17:41,360
uh what you will actually see is that it

00:17:40,480 --> 00:17:43,840
has created

00:17:41,360 --> 00:17:45,520
it has the node modules so it has got

00:17:43,840 --> 00:17:47,600
all the dependencies that it requires

00:17:45,520 --> 00:17:49,200
is a git ignore because it's for best

00:17:47,600 --> 00:17:50,640
practices of not checking in node

00:17:49,200 --> 00:17:52,480
modules or bin folders

00:17:50,640 --> 00:17:54,320
it has a package json and a package lock

00:17:52,480 --> 00:17:56,559
json uh

00:17:54,320 --> 00:17:57,440
files that specify the dependencies that

00:17:56,559 --> 00:17:59,679
are required

00:17:57,440 --> 00:18:00,960
it has a polumi.yaml which suggests the

00:17:59,679 --> 00:18:03,679
name of the project

00:18:00,960 --> 00:18:05,280
the runtime it's typescript javascript

00:18:03,679 --> 00:18:07,280
and it has the description

00:18:05,280 --> 00:18:08,960
and it has a ts conflict because this is

00:18:07,280 --> 00:18:10,000
typescript so you know this enforces the

00:18:08,960 --> 00:18:13,120
best policies

00:18:10,000 --> 00:18:15,600
but then it has plummy.dev.yaml

00:18:13,120 --> 00:18:18,480
which is a stack specific configuration

00:18:15,600 --> 00:18:20,799
so the dev stack can be in us west too

00:18:18,480 --> 00:18:22,720
the production stack can be in us east

00:18:20,799 --> 00:18:25,600
too and so on and so forth

00:18:22,720 --> 00:18:27,039
and then we have the index.ts now the

00:18:25,600 --> 00:18:29,280
index.ts file

00:18:27,039 --> 00:18:30,799
has three parts to it usually so we have

00:18:29,280 --> 00:18:32,400
the helpers

00:18:30,799 --> 00:18:34,559
and these are importing the cloud

00:18:32,400 --> 00:18:36,480
specific libraries the pollumi libraries

00:18:34,559 --> 00:18:38,799
and then we have crosswalk so crosswalk

00:18:36,480 --> 00:18:40,320
is this this layer of abstraction for

00:18:38,799 --> 00:18:45,039
the best practices around the

00:18:40,320 --> 00:18:46,799
vp then we have resources

00:18:45,039 --> 00:18:48,480
and then we have exports so these

00:18:46,799 --> 00:18:51,039
exports are used to give

00:18:48,480 --> 00:18:52,880
information back to the user if they

00:18:51,039 --> 00:18:57,280
require it so for things like

00:18:52,880 --> 00:18:58,559
urls or ip addresses or whatever they

00:18:57,280 --> 00:19:00,400
actually need to be

00:18:58,559 --> 00:19:03,360
now that is a pollumi application right

00:19:00,400 --> 00:19:04,000
there and if i run the command pollumi

00:19:03,360 --> 00:19:05,840
up

00:19:04,000 --> 00:19:07,440
what polumi will do right now is it will

00:19:05,840 --> 00:19:09,360
perform a preview

00:19:07,440 --> 00:19:11,280
based on what this infrastructure has

00:19:09,360 --> 00:19:13,440
against what is in the cloud i am

00:19:11,280 --> 00:19:15,840
targeting so i'm targeting aws

00:19:13,440 --> 00:19:17,120
and it's going to see that it needs to

00:19:15,840 --> 00:19:18,480
create a bucket

00:19:17,120 --> 00:19:21,039
and we can actually see that it's going

00:19:18,480 --> 00:19:22,880
to create a bucket and we can say no

00:19:21,039 --> 00:19:24,960
okay because it's not really interesting

00:19:22,880 --> 00:19:28,080
to see that but i wanted to go

00:19:24,960 --> 00:19:30,400
and um i

00:19:28,080 --> 00:19:31,919
show you about the secret side of it so

00:19:30,400 --> 00:19:35,120
i need to install

00:19:31,919 --> 00:19:36,880
a package and the package needs to be

00:19:35,120 --> 00:19:38,720
random

00:19:36,880 --> 00:19:41,280
this is just some random data that we

00:19:38,720 --> 00:19:43,200
actually have available that people can

00:19:41,280 --> 00:19:44,960
use and uh be able to bring into their

00:19:43,200 --> 00:19:47,039
environment

00:19:44,960 --> 00:19:48,240
and what we can actually see is let's

00:19:47,039 --> 00:19:52,960
delete all of this

00:19:48,240 --> 00:19:57,200
and i can say import star as random

00:19:52,960 --> 00:20:01,360
from me random and we are going to say

00:19:57,200 --> 00:20:04,640
const my secret password

00:20:01,360 --> 00:20:07,600
equals new random.random password

00:20:04,640 --> 00:20:09,840
i call it demo and we're going to give

00:20:07,600 --> 00:20:12,080
it a length of 30

00:20:09,840 --> 00:20:13,760
and we are going to say it wants special

00:20:12,080 --> 00:20:16,159
characters

00:20:13,760 --> 00:20:17,600
okay at that point we actually have

00:20:16,159 --> 00:20:19,679
something that we can

00:20:17,600 --> 00:20:21,440
you know a resource if you think of it

00:20:19,679 --> 00:20:24,480
and then let's export

00:20:21,440 --> 00:20:27,600
the value file one

00:20:24,480 --> 00:20:30,480
equals my secret password.result

00:20:27,600 --> 00:20:31,919
so let's go back and let's rerun polyme

00:20:30,480 --> 00:20:33,679
up here

00:20:31,919 --> 00:20:34,960
let's let this run through the whole

00:20:33,679 --> 00:20:38,159
system

00:20:34,960 --> 00:20:39,760
now we will have a random password but

00:20:38,159 --> 00:20:41,520
plummy doesn't know that this is

00:20:39,760 --> 00:20:43,600
anything to do with the secret value

00:20:41,520 --> 00:20:46,840
because it is just a resource

00:20:43,600 --> 00:20:49,039
now of course that is now here in the

00:20:46,840 --> 00:20:51,600
output

00:20:49,039 --> 00:20:52,480
but it is also in the polymer state

00:20:51,600 --> 00:20:54,559
right here

00:20:52,480 --> 00:20:56,720
and we don't want that okay we actually

00:20:54,559 --> 00:20:59,120
want the ability that we can

00:20:56,720 --> 00:21:01,440
make things secret by default so we can

00:20:59,120 --> 00:21:04,880
take advantage of the secret engine

00:21:01,440 --> 00:21:09,840
um two let's call it demo two and

00:21:04,880 --> 00:21:09,840
let's actually export value two here

00:21:09,919 --> 00:21:16,799
now we have as part of a resource

00:21:13,520 --> 00:21:19,120
constructor we have a name we have some

00:21:16,799 --> 00:21:20,960
arguments and then we i said earlier we

00:21:19,120 --> 00:21:23,520
have polemic custom resource options one

00:21:20,960 --> 00:21:26,640
of the polymer custom resource options

00:21:23,520 --> 00:21:30,000
is additional secret outputs now

00:21:26,640 --> 00:21:32,880
any output from the random password

00:21:30,000 --> 00:21:33,360
class okay and here all the outputs

00:21:32,880 --> 00:21:35,760
length

00:21:33,360 --> 00:21:37,760
lower min all these different ones can

00:21:35,760 --> 00:21:40,480
be pushed through

00:21:37,760 --> 00:21:41,679
a polumi secret engine to encrypt it so

00:21:40,480 --> 00:21:43,600
let's say we actually

00:21:41,679 --> 00:21:45,200
want to push result through the

00:21:43,600 --> 00:21:47,200
pollutant secret engine

00:21:45,200 --> 00:21:49,679
and encrypt that before we export it

00:21:47,200 --> 00:21:51,600
coming out of the of our cli tool

00:21:49,679 --> 00:21:53,120
and if i go and run pollute up now

00:21:51,600 --> 00:21:54,400
you'll see again it's going to create a

00:21:53,120 --> 00:21:55,760
new resource

00:21:54,400 --> 00:21:57,760
and we'll see it's an output of string

00:21:55,760 --> 00:21:58,799
so it's a promise okay it's a promise

00:21:57,760 --> 00:22:00,320
that is going to create it because we

00:21:58,799 --> 00:22:02,720
don't know what that value is

00:22:00,320 --> 00:22:04,240
until it has been created and let's say

00:22:02,720 --> 00:22:06,240
yes

00:22:04,240 --> 00:22:07,520
but instead of getting the raw plex a

00:22:06,240 --> 00:22:10,000
raw text

00:22:07,520 --> 00:22:12,080
string in in our system right now we

00:22:10,000 --> 00:22:15,600
actually have a secret value

00:22:12,080 --> 00:22:18,880
and the secret value is even kept

00:22:15,600 --> 00:22:20,480
going through the system in our stack

00:22:18,880 --> 00:22:22,640
because we're actually telling it we

00:22:20,480 --> 00:22:24,240
wanted to encrypt that specific value so

00:22:22,640 --> 00:22:27,360
we can push that through and anywhere

00:22:24,240 --> 00:22:29,760
that is used that will be a secret

00:22:27,360 --> 00:22:31,440
and if i pull my comp so we have to say

00:22:29,760 --> 00:22:32,720
if we want the ability to set values

00:22:31,440 --> 00:22:35,039
into our system as well we want

00:22:32,720 --> 00:22:38,000
polymeric config set i'm going to say my

00:22:35,039 --> 00:22:39,600
secret password and i'm going to call it

00:22:38,000 --> 00:22:43,039
password

00:22:39,600 --> 00:22:46,000
four and if i go back to my stack

00:22:43,039 --> 00:22:47,679
file you'll actually see that it is in

00:22:46,000 --> 00:22:48,960
plain text because palumi doesn't know

00:22:47,679 --> 00:22:51,120
this is a password

00:22:48,960 --> 00:22:53,039
but we can actually run the same command

00:22:51,120 --> 00:22:55,600
with dash dash secret so actually tell

00:22:53,039 --> 00:22:57,760
bloom it's a secret by default

00:22:55,600 --> 00:22:58,720
and we'll see that it is secure and it

00:22:57,760 --> 00:23:01,520
has been

00:22:58,720 --> 00:23:03,280
changed now of course if somebody goes

00:23:01,520 --> 00:23:07,039
and compromises our

00:23:03,280 --> 00:23:09,600
kms key we would like the ability

00:23:07,039 --> 00:23:10,559
to be able to change that so we have

00:23:09,600 --> 00:23:12,159
this

00:23:10,559 --> 00:23:14,000
you can rotate your secrets i want to

00:23:12,159 --> 00:23:16,480
change my the the um

00:23:14,000 --> 00:23:18,240
kms key that i'm actually using and

00:23:16,480 --> 00:23:20,559
notice here it's aaa

00:23:18,240 --> 00:23:22,240
it starts with and if i run the same

00:23:20,559 --> 00:23:24,720
command which will change my secrets

00:23:22,240 --> 00:23:24,720
provider

00:23:25,280 --> 00:23:31,919
it has completely changed the secret and

00:23:28,559 --> 00:23:33,840
it's not using aws kms so we're trying

00:23:31,919 --> 00:23:35,600
to make this secure by default this is

00:23:33,840 --> 00:23:37,200
something that's extremely important for

00:23:35,600 --> 00:23:39,200
us

00:23:37,200 --> 00:23:41,520
now just to go a little further i can

00:23:39,200 --> 00:23:44,799
actually hide some of this code away

00:23:41,520 --> 00:23:46,159
now if i say let's call it class my

00:23:44,799 --> 00:23:47,840
secret

00:23:46,159 --> 00:23:49,360
i'll actually call it let's call it

00:23:47,840 --> 00:23:53,279
password

00:23:49,360 --> 00:23:55,760
generator dot ts and i want to export a

00:23:53,279 --> 00:23:55,760
class

00:23:56,000 --> 00:24:00,480
which will be called password generator

00:23:58,880 --> 00:24:04,640
which will extend

00:24:00,480 --> 00:24:07,600
pollumi dot component resource

00:24:04,640 --> 00:24:09,039
then at that point we actually have uh

00:24:07,600 --> 00:24:12,480
something that's reusable

00:24:09,039 --> 00:24:19,840
so let's import star as

00:24:12,480 --> 00:24:19,840
lumi from paloomi palumi

00:24:21,840 --> 00:24:25,520
here we go so we actually have a class

00:24:23,760 --> 00:24:27,440
night and that class will allow us to do

00:24:25,520 --> 00:24:29,520
a lot of different things and hide

00:24:27,440 --> 00:24:33,080
um some code away so the first thing we

00:24:29,520 --> 00:24:35,120
need is we need a constructor

00:24:33,080 --> 00:24:38,000
[Music]

00:24:35,120 --> 00:24:39,679
so we need a constructor constructor has

00:24:38,000 --> 00:24:41,520
some properties that go with it

00:24:39,679 --> 00:24:42,720
now we're going to pass in a name which

00:24:41,520 --> 00:24:44,840
will be a string

00:24:42,720 --> 00:24:47,120
and we're going to pass in a password

00:24:44,840 --> 00:24:50,559
length

00:24:47,120 --> 00:24:51,520
which will be an int or a number i

00:24:50,559 --> 00:24:54,720
apologize

00:24:51,520 --> 00:24:57,039
okay so we actually have

00:24:54,720 --> 00:24:59,279
ability to push some some information in

00:24:57,039 --> 00:25:00,960
so knowing what we actually want is

00:24:59,279 --> 00:25:02,880
we want to be able to push some

00:25:00,960 --> 00:25:05,279
information back out so if i say public

00:25:02,880 --> 00:25:09,840
read only string

00:25:05,279 --> 00:25:13,360
um the string will

00:25:09,840 --> 00:25:16,400
it's i yeah let's call it uh

00:25:13,360 --> 00:25:16,400
generated password

00:25:24,880 --> 00:25:30,080
now now i can actually move this this

00:25:28,080 --> 00:25:33,440
logic inside i can say this dot

00:25:30,080 --> 00:25:37,760
generated password equals new

00:25:33,440 --> 00:25:41,360
let's import star as random

00:25:37,760 --> 00:25:41,360
from at random

00:25:41,520 --> 00:25:56,960
equals new random dot random password

00:25:44,960 --> 00:25:59,919
we want to pass in the name here

00:25:56,960 --> 00:25:59,919
i apologize

00:26:01,760 --> 00:26:05,440
there we go we actually have the name

00:26:04,159 --> 00:26:07,520
being passed in

00:26:05,440 --> 00:26:08,799
then we want to say the length will be

00:26:07,520 --> 00:26:11,600
password length

00:26:08,799 --> 00:26:12,799
and we will say special true and then at

00:26:11,600 --> 00:26:16,240
that point we actually

00:26:12,799 --> 00:26:19,520
have a class

00:26:16,240 --> 00:26:20,960
that we can use and we actually don't

00:26:19,520 --> 00:26:22,000
even need the component resource here we

00:26:20,960 --> 00:26:24,400
can just

00:26:22,000 --> 00:26:25,039
just remove that and take it away so at

00:26:24,400 --> 00:26:28,960
this point

00:26:25,039 --> 00:26:32,480
back in my code i can actually say const

00:26:28,960 --> 00:26:35,600
generated password equals new

00:26:32,480 --> 00:26:38,480
generated or new password generator

00:26:35,600 --> 00:26:39,120
we'll call it demo one and i will say

00:26:38,480 --> 00:26:41,840
that i want

00:26:39,120 --> 00:26:42,159
a 30 character string going through it

00:26:41,840 --> 00:26:46,400
now

00:26:42,159 --> 00:26:52,240
at that point inside all of our system

00:26:46,400 --> 00:26:55,360
we need to give it of type string

00:26:52,240 --> 00:26:57,679
because it is a specific string

00:26:55,360 --> 00:26:59,200
actually it's an output of string i

00:26:57,679 --> 00:27:02,559
apologize

00:26:59,200 --> 00:27:04,559
uh because it is a specific

00:27:02,559 --> 00:27:06,320
polymer output it's a promise based on

00:27:04,559 --> 00:27:09,360
what's actually going to happen

00:27:06,320 --> 00:27:12,720
here and

00:27:09,360 --> 00:27:14,960
we can then start to be able to enforce

00:27:12,720 --> 00:27:17,600
specific code in here where we will

00:27:14,960 --> 00:27:20,000
always pass the additional secret output

00:27:17,600 --> 00:27:22,559
for result and then that way when

00:27:20,000 --> 00:27:23,440
somebody requests a random password for

00:27:22,559 --> 00:27:25,679
our system

00:27:23,440 --> 00:27:27,039
we actually will enforce it by default

00:27:25,679 --> 00:27:30,240
that they are getting

00:27:27,039 --> 00:27:32,960
um everything that they require

00:27:30,240 --> 00:27:34,240
so if i say result and at that point we

00:27:32,960 --> 00:27:37,520
actually have a

00:27:34,240 --> 00:27:40,399
password and let's export const my

00:27:37,520 --> 00:27:43,919
password equals generated password

00:27:40,399 --> 00:27:49,840
let's go back and let's say pull me up

00:27:43,919 --> 00:27:49,840
and let's see what it does

00:27:51,840 --> 00:27:56,080
so you'll see it has a new generator

00:27:53,600 --> 00:27:59,039
password is of type secret

00:27:56,080 --> 00:27:59,039
and let's say yes

00:28:00,320 --> 00:28:03,840
and we've enforced that best practice on

00:28:02,720 --> 00:28:05,200
our system

00:28:03,840 --> 00:28:07,279
and because we've enforced the best

00:28:05,200 --> 00:28:09,039
practice on our system we cannot leak

00:28:07,279 --> 00:28:10,240
secrets so we've created that small

00:28:09,039 --> 00:28:11,600
layer of abstraction

00:28:10,240 --> 00:28:13,039
in a language which allows us to

00:28:11,600 --> 00:28:16,399
actually be able to keep that and wrap

00:28:13,039 --> 00:28:18,080
it away

00:28:16,399 --> 00:28:20,080
so in conclusion we actually believe

00:28:18,080 --> 00:28:21,120
that pollumi is the easiest way now to

00:28:20,080 --> 00:28:22,960
program the cloud

00:28:21,120 --> 00:28:24,399
and programming the cloud and

00:28:22,960 --> 00:28:27,279
programming our infrastructure

00:28:24,399 --> 00:28:28,080
actually becomes same style the same

00:28:27,279 --> 00:28:31,279
workflow

00:28:28,080 --> 00:28:33,360
as um application software so we

00:28:31,279 --> 00:28:35,120
we follow the same development cycles

00:28:33,360 --> 00:28:37,360
the same testing cycles

00:28:35,120 --> 00:28:38,399
the same security cycles everything in

00:28:37,360 --> 00:28:40,799
our infrastructure

00:28:38,399 --> 00:28:42,720
and we hope that uh we're we're trying

00:28:40,799 --> 00:28:44,640
to enforce best practices in the cloud

00:28:42,720 --> 00:28:46,320
engineering community going forward

00:28:44,640 --> 00:28:47,840
thank you so much for your time today my

00:28:46,320 --> 00:28:49,760
name is paul stack as i said

00:28:47,840 --> 00:28:50,880
my contact details are here and if you

00:28:49,760 --> 00:28:58,240
have any other questions

00:28:50,880 --> 00:28:58,240

YouTube URL: https://www.youtube.com/watch?v=0QUnuBMAsTY


