Title: Zero to Spinnaker at the Speed of GitOps - Fernando Freire & Akshay Dayal
Publication date: 2021-01-16
Playlist: Spinnaker Summit 2020
Description: 
	In this session we demo progressively more sophisticated ways of installing and operating Spinnaker in your own Kubernetes cluster. We walk through: - A minimal installation in a few minutes into existing infrastructure - Enabling common features with the "spinnaker-kustomize-patches" project - Managing Spinnaker through a GitOps workflow We conclude the session by talking about the future of Operator and how it fits into the Spinnaker ecosystem.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:05,040 --> 00:00:07,839
hello everyone

00:00:05,839 --> 00:00:09,679
welcome to our talk from zero to get off

00:00:07,839 --> 00:00:11,519
since spinnaker my name is fernando and

00:00:09,679 --> 00:00:13,120
i'm a staff engineer here at armory part

00:00:11,519 --> 00:00:14,000
of a team working on the spinnaker

00:00:13,120 --> 00:00:16,480
operator

00:00:14,000 --> 00:00:18,000
and i'm akshay del i'm also from army

00:00:16,480 --> 00:00:21,039
i'm a product manager

00:00:18,000 --> 00:00:22,560
also working on the operator so today

00:00:21,039 --> 00:00:25,119
we're going to walk through

00:00:22,560 --> 00:00:26,560
a very high level overview of spinnaker

00:00:25,119 --> 00:00:28,000
and a couple of the different ways that

00:00:26,560 --> 00:00:29,119
you can use the managed spinnaker's

00:00:28,000 --> 00:00:30,640
lifecycle

00:00:29,119 --> 00:00:32,079
we're then going to go into a live demo

00:00:30,640 --> 00:00:32,480
where we'll show you the operator in

00:00:32,079 --> 00:00:34,480
action

00:00:32,480 --> 00:00:36,000
and how to build a simple git ops

00:00:34,480 --> 00:00:37,920
workflow to manage your spinnaker

00:00:36,000 --> 00:00:39,360
installation in your own environment

00:00:37,920 --> 00:00:40,960
and then we'll wrap things up at the end

00:00:39,360 --> 00:00:42,800
and talk about what's an expert operator

00:00:40,960 --> 00:00:44,239
and what future holds for

00:00:42,800 --> 00:00:46,239
not only us is the team working on it

00:00:44,239 --> 00:00:47,280
but uh from a community perspective and

00:00:46,239 --> 00:00:48,480
how you can get involved

00:00:47,280 --> 00:00:50,320
so let's start off with what is

00:00:48,480 --> 00:00:50,800
spinnaker so if you're coming to this

00:00:50,320 --> 00:00:52,399
talk

00:00:50,800 --> 00:00:53,520
uh you are no doubt familiar with what

00:00:52,399 --> 00:00:54,719
spinnaker is and you're really

00:00:53,520 --> 00:00:56,879
interested in

00:00:54,719 --> 00:00:58,559
managing spinnaker's lifecycle but we'll

00:00:56,879 --> 00:01:00,399
go over a brief overview

00:00:58,559 --> 00:01:01,840
it's an open source tool that enables

00:01:00,399 --> 00:01:03,039
multi-cloud continuous delivery and

00:01:01,840 --> 00:01:04,400
deployment

00:01:03,039 --> 00:01:06,640
giving you single pane of blast

00:01:04,400 --> 00:01:08,000
visibility so if you're deploying tools

00:01:06,640 --> 00:01:10,880
if you're deploying tools and services

00:01:08,000 --> 00:01:12,400
to kubernetes to aws to azure

00:01:10,880 --> 00:01:13,600
spinnaker is really the the tool that's

00:01:12,400 --> 00:01:14,799
going to give you that one-stop shop

00:01:13,600 --> 00:01:17,200
visibility

00:01:14,799 --> 00:01:19,200
uh and it's also composed of several

00:01:17,200 --> 00:01:22,000
micro services so when we look at the

00:01:19,200 --> 00:01:22,640
9 000 foot view of what spinnaker is

00:01:22,000 --> 00:01:24,560
it's

00:01:22,640 --> 00:01:26,400
about 10 different microservices that

00:01:24,560 --> 00:01:27,119
interact with a bunch of different cloud

00:01:26,400 --> 00:01:29,920
tools

00:01:27,119 --> 00:01:30,880
ci systems databases and metrics

00:01:29,920 --> 00:01:33,360
providers

00:01:30,880 --> 00:01:35,280
so if you are a developer on a small

00:01:33,360 --> 00:01:36,079
team or if you are on a devops team

00:01:35,280 --> 00:01:38,079
that's managing

00:01:36,079 --> 00:01:40,079
a number of other development teams that

00:01:38,079 --> 00:01:41,759
are deploying to your environment

00:01:40,079 --> 00:01:43,280
you're probably going to want a tool to

00:01:41,759 --> 00:01:44,079
manage sniper for you you're not going

00:01:43,280 --> 00:01:45,439
to want to manage

00:01:44,079 --> 00:01:48,240
all of these individual services

00:01:45,439 --> 00:01:49,759
yourself so two of the the tools that we

00:01:48,240 --> 00:01:51,119
recommend to our customers and that we

00:01:49,759 --> 00:01:52,320
use ourselves when we're developing

00:01:51,119 --> 00:01:55,119
against spinnaker

00:01:52,320 --> 00:01:56,159
is uh halyard and the spinnaker operator

00:01:55,119 --> 00:01:56,960
which we're going to be focusing on

00:01:56,159 --> 00:01:58,719
today

00:01:56,960 --> 00:02:00,880
so let's talk about how you manage

00:01:58,719 --> 00:02:02,640
banker's lifecycle using a number of

00:02:00,880 --> 00:02:05,119
different tools that are currently

00:02:02,640 --> 00:02:06,799
available in the community today the

00:02:05,119 --> 00:02:08,000
first one is halyard it's the trident

00:02:06,799 --> 00:02:09,840
true tool it's the one that's been

00:02:08,000 --> 00:02:12,480
around the longest the most mature

00:02:09,840 --> 00:02:12,879
uh this tool uses uh cuddle under the

00:02:12,480 --> 00:02:15,520
hood

00:02:12,879 --> 00:02:16,560
to execute changes uh for your spinnaker

00:02:15,520 --> 00:02:18,800
installation

00:02:16,560 --> 00:02:20,239
uh your halyard and spinnaker config

00:02:18,800 --> 00:02:22,000
live on the same machine that you're

00:02:20,239 --> 00:02:24,000
running these demands from

00:02:22,000 --> 00:02:25,360
uh it does introduce another command

00:02:24,000 --> 00:02:27,280
line tool into your workflow so if

00:02:25,360 --> 00:02:28,640
you're feeling fatigued from using 15

00:02:27,280 --> 00:02:29,680
different tools

00:02:28,640 --> 00:02:31,920
you know this is going to be another

00:02:29,680 --> 00:02:33,360
tool in your tool belt and

00:02:31,920 --> 00:02:35,440
halyard while it does provide

00:02:33,360 --> 00:02:36,400
validations they do run locally rather

00:02:35,440 --> 00:02:37,840
than in the cluster

00:02:36,400 --> 00:02:39,840
so what i mean by that is if you

00:02:37,840 --> 00:02:40,319
configure access to an s3 bucket for

00:02:39,840 --> 00:02:41,920
example

00:02:40,319 --> 00:02:44,480
and you run halyards to apply your

00:02:41,920 --> 00:02:45,519
configuration those validations will run

00:02:44,480 --> 00:02:47,440
but they're going to run on your

00:02:45,519 --> 00:02:49,360
development machine so unless you have

00:02:47,440 --> 00:02:50,080
assumed the correct role in your aws

00:02:49,360 --> 00:02:51,760
account

00:02:50,080 --> 00:02:53,599
you're going to be getting an incomplete

00:02:51,760 --> 00:02:55,120
picture about whether your spinnaker

00:02:53,599 --> 00:02:56,640
installation will work when it's running

00:02:55,120 --> 00:02:58,080
in your target environment or not so

00:02:56,640 --> 00:02:58,560
just to give you an overview of how this

00:02:58,080 --> 00:03:00,959
works

00:02:58,560 --> 00:03:02,080
uh you as the user are working on your

00:03:00,959 --> 00:03:03,599
halyard machine

00:03:02,080 --> 00:03:05,920
you've got your spinnaker configuration

00:03:03,599 --> 00:03:06,800
files and you've got your halyard tool

00:03:05,920 --> 00:03:08,720
ready to go

00:03:06,800 --> 00:03:10,959
it's going to use coupe cuddle to talk

00:03:08,720 --> 00:03:13,680
to the kubernetes api server in standup

00:03:10,959 --> 00:03:15,680
spinner in that environment

00:03:13,680 --> 00:03:17,200
the next tool that you can use to manage

00:03:15,680 --> 00:03:18,720
your spinnaker installation

00:03:17,200 --> 00:03:20,400
are a set of helm charts that are

00:03:18,720 --> 00:03:22,159
maintained by the open source

00:03:20,400 --> 00:03:23,920
community so for those of you who are

00:03:22,159 --> 00:03:24,640
not familiar with helm helm gives you a

00:03:23,920 --> 00:03:27,280
way

00:03:24,640 --> 00:03:29,280
to package and template up a number of

00:03:27,280 --> 00:03:31,280
different kubernetes resources

00:03:29,280 --> 00:03:33,280
so it's essentially a config layer that

00:03:31,280 --> 00:03:34,959
now sits on top of halyard

00:03:33,280 --> 00:03:36,799
your validations are going to run

00:03:34,959 --> 00:03:38,239
deployed inside of the cluster so

00:03:36,799 --> 00:03:39,519
talking about that halyard mode where

00:03:38,239 --> 00:03:40,640
halyard was running inside of the

00:03:39,519 --> 00:03:42,080
cluster as a pod

00:03:40,640 --> 00:03:44,840
the helm chart is going to do that by

00:03:42,080 --> 00:03:46,640
default but now you've split your

00:03:44,840 --> 00:03:47,120
configuration uh between two different

00:03:46,640 --> 00:03:48,640
tools

00:03:47,120 --> 00:03:50,239
so you might be configuring certain

00:03:48,640 --> 00:03:51,920
things that hired you might be exposing

00:03:50,239 --> 00:03:53,519
different config options in helm

00:03:51,920 --> 00:03:54,720
and there may be drift between what's

00:03:53,519 --> 00:03:57,040
exposed and how you're doing what's

00:03:54,720 --> 00:03:59,519
exposed in your home chart

00:03:57,040 --> 00:04:00,720
so what that looks in a diagram form is

00:03:59,519 --> 00:04:02,080
you've got your helm chart over here

00:04:00,720 --> 00:04:02,640
with its own set of configuration

00:04:02,080 --> 00:04:04,000
options

00:04:02,640 --> 00:04:06,480
you've got halyard running inside the

00:04:04,000 --> 00:04:08,640
kubernetes cluster with its config

00:04:06,480 --> 00:04:09,519
and then uh whenever you apply that helm

00:04:08,640 --> 00:04:11,760
chart you're going to be

00:04:09,519 --> 00:04:14,080
executing those how your commands and

00:04:11,760 --> 00:04:15,599
interacting with the cluster

00:04:14,080 --> 00:04:17,120
and finally the the third tool that

00:04:15,599 --> 00:04:18,320
we're going to talk about today is the

00:04:17,120 --> 00:04:20,000
spinnaker operator

00:04:18,320 --> 00:04:21,919
so this is an open source tool that is

00:04:20,000 --> 00:04:23,520
provided by armory and

00:04:21,919 --> 00:04:25,440
for those of you that are not familiar

00:04:23,520 --> 00:04:26,400
with the operator pattern a very simple

00:04:25,440 --> 00:04:28,240
definition

00:04:26,400 --> 00:04:31,120
that you can use to think about

00:04:28,240 --> 00:04:32,800
operators is that they are essentially

00:04:31,120 --> 00:04:35,440
an encapsulation of human knowledge

00:04:32,800 --> 00:04:37,919
operating within a kubernetes cluster

00:04:35,440 --> 00:04:40,400
so what this allows us to do is define a

00:04:37,919 --> 00:04:42,240
custom resource definition or a crd

00:04:40,400 --> 00:04:43,680
that encapsulates the desired state for

00:04:42,240 --> 00:04:45,520
a spinnaker cluster

00:04:43,680 --> 00:04:47,440
and then when you apply that custom

00:04:45,520 --> 00:04:49,600
resource definition to your cluster

00:04:47,440 --> 00:04:51,280
the operator will know that this is the

00:04:49,600 --> 00:04:53,520
desired state for your spinnaker cluster

00:04:51,280 --> 00:04:55,040
and will go take actions on your behalf

00:04:53,520 --> 00:04:56,720
now the way it's currently architected

00:04:55,040 --> 00:04:58,880
is it uses howard under the hood

00:04:56,720 --> 00:05:00,160
to execute commands on your behalf but

00:04:58,880 --> 00:05:01,840
we'll talk a little bit later in our

00:05:00,160 --> 00:05:03,280
what's next section about the future of

00:05:01,840 --> 00:05:06,000
higher than operator

00:05:03,280 --> 00:05:08,000
you can use our favorite configuration

00:05:06,000 --> 00:05:09,520
language gammel to configure everything

00:05:08,000 --> 00:05:10,000
in your spinnaker cluster and you can

00:05:09,520 --> 00:05:12,560
combine

00:05:10,000 --> 00:05:13,120
your spinnaker and how your configs and

00:05:12,560 --> 00:05:14,720
any other

00:05:13,120 --> 00:05:17,280
kubernetes specific modifications you

00:05:14,720 --> 00:05:19,280
want to make in the same config format

00:05:17,280 --> 00:05:21,039
it also automates common use cases for

00:05:19,280 --> 00:05:23,520
you the one that we're highlighting

00:05:21,039 --> 00:05:25,680
today is deriving the url for your deck

00:05:23,520 --> 00:05:27,199
and gate instances if you have to find

00:05:25,680 --> 00:05:28,720
an ingress object

00:05:27,199 --> 00:05:30,240
this is something that it will configure

00:05:28,720 --> 00:05:32,800
automatically for you and make sure that

00:05:30,240 --> 00:05:34,639
the cluster is always in sync

00:05:32,800 --> 00:05:36,479
but it also automates a number of other

00:05:34,639 --> 00:05:38,400
common use cases

00:05:36,479 --> 00:05:40,000
and finally one feature that we expose

00:05:38,400 --> 00:05:41,120
in the kubernetes in the spinnaker

00:05:40,000 --> 00:05:43,120
operator rather

00:05:41,120 --> 00:05:45,039
is using kubernetes secrets so if you

00:05:43,120 --> 00:05:47,840
are an existing pilot user and

00:05:45,039 --> 00:05:49,360
you are putting secrets in aws or you're

00:05:47,840 --> 00:05:50,880
putting secrets in vault

00:05:49,360 --> 00:05:53,120
you might be familiar with that hal

00:05:50,880 --> 00:05:55,199
config syntax for referencing secrets

00:05:53,120 --> 00:05:56,960
we've added kubernetes secrets in

00:05:55,199 --> 00:05:58,880
addition to those existing sources

00:05:56,960 --> 00:06:00,560
in the operator itself this is an

00:05:58,880 --> 00:06:04,319
additional feature that you can get

00:06:00,560 --> 00:06:06,400
by leveraging the operator so just to

00:06:04,319 --> 00:06:08,319
show what's happening at a high level

00:06:06,400 --> 00:06:10,160
here you have your spinnaker service

00:06:08,319 --> 00:06:11,199
manifest so now we've kind of condensed

00:06:10,160 --> 00:06:12,000
all the different sources of

00:06:11,199 --> 00:06:14,319
configuration

00:06:12,000 --> 00:06:15,280
into one file and then you as the user

00:06:14,319 --> 00:06:16,800
apply that or

00:06:15,280 --> 00:06:19,039
as we'll show you in our demo you can

00:06:16,800 --> 00:06:21,440
create a pipeline to apply that

00:06:19,039 --> 00:06:23,280
that manifest on your behalf the

00:06:21,440 --> 00:06:25,360
kubernetes api server says all right

00:06:23,280 --> 00:06:28,319
this is our custom resource definition

00:06:25,360 --> 00:06:29,840
it's going to notify the operator that

00:06:28,319 --> 00:06:31,440
there is something that needs to be done

00:06:29,840 --> 00:06:32,880
for your spinnaker cluster and then the

00:06:31,440 --> 00:06:34,479
operator will execute

00:06:32,880 --> 00:06:36,000
all of the actions that it needs to take

00:06:34,479 --> 00:06:36,800
in order to make the changes that you

00:06:36,000 --> 00:06:39,280
have

00:06:36,800 --> 00:06:40,960
made to your spinnaker cluster a reality

00:06:39,280 --> 00:06:43,759
and so all of this is happening inside

00:06:40,960 --> 00:06:45,520
of the kubernetes cluster

00:06:43,759 --> 00:06:47,199
so we've talked about three different

00:06:45,520 --> 00:06:48,800
ways you can manage the life cycle of

00:06:47,199 --> 00:06:50,479
spinnaker and you might be thinking to

00:06:48,800 --> 00:06:52,400
yourself well which one do i pick

00:06:50,479 --> 00:06:53,840
and really that's a question for your

00:06:52,400 --> 00:06:54,160
team and the skill set that your team

00:06:53,840 --> 00:06:55,360
has

00:06:54,160 --> 00:06:57,599
and the kind of risk that you're willing

00:06:55,360 --> 00:06:59,599
to take on um as a team supporting

00:06:57,599 --> 00:07:01,440
spinnaker for yourselves or on behalf of

00:06:59,599 --> 00:07:02,720
a number of other development teams

00:07:01,440 --> 00:07:04,000
so we put together a little brief

00:07:02,720 --> 00:07:04,960
high-level chart for you to kind of help

00:07:04,000 --> 00:07:07,520
you decide

00:07:04,960 --> 00:07:08,880
so if you're an existing spinnaker user

00:07:07,520 --> 00:07:10,160
you're very familiar with spinnaker

00:07:08,880 --> 00:07:11,120
internals you're very comfortable with

00:07:10,160 --> 00:07:12,400
hallyard and you

00:07:11,120 --> 00:07:14,400
like the imperative approach to

00:07:12,400 --> 00:07:15,599
configuring spinnaker then howard is the

00:07:14,400 --> 00:07:17,759
tool for you

00:07:15,599 --> 00:07:19,280
if you want to template values in your

00:07:17,759 --> 00:07:20,560
health config but you don't really want

00:07:19,280 --> 00:07:22,240
to customize it too much

00:07:20,560 --> 00:07:23,919
and you want a more declarative approach

00:07:22,240 --> 00:07:26,000
to configuration management then maybe

00:07:23,919 --> 00:07:28,400
the helm chart is the tool for you

00:07:26,000 --> 00:07:29,360
and finally if you want to sympathize

00:07:28,400 --> 00:07:31,520
your configs

00:07:29,360 --> 00:07:33,440
you want a more declarative approach you

00:07:31,520 --> 00:07:34,960
want to use other tools in your existing

00:07:33,440 --> 00:07:36,960
kubernetes tool chain we're going to

00:07:34,960 --> 00:07:38,960
show you how to use customize today

00:07:36,960 --> 00:07:41,039
and you want custom or sorry you want

00:07:38,960 --> 00:07:41,919
common use cases automated and monitored

00:07:41,039 --> 00:07:43,599
on your behalf

00:07:41,919 --> 00:07:45,280
then the operator is a good fit for your

00:07:43,599 --> 00:07:47,360
team so now we're going to go

00:07:45,280 --> 00:07:49,360
into a live demo ashley is going to show

00:07:47,360 --> 00:07:51,759
you how to install the operator

00:07:49,360 --> 00:07:53,360
and how to uh create a spinnaker cluster

00:07:51,759 --> 00:07:54,560
and kind of manage that with a github

00:07:53,360 --> 00:07:57,840
sport flow

00:07:54,560 --> 00:07:58,560
so what we're going to demo today is um

00:07:57,840 --> 00:08:01,520
setting up

00:07:58,560 --> 00:08:03,520
spinnaker from a customized uh

00:08:01,520 --> 00:08:04,879
repository

00:08:03,520 --> 00:08:06,960
and the goal would be to create a

00:08:04,879 --> 00:08:10,319
pipeline in spinnaker itself

00:08:06,960 --> 00:08:12,319
that uses a git trigger to listen for

00:08:10,319 --> 00:08:13,919
updates to the customized repository and

00:08:12,319 --> 00:08:14,720
whenever you make an update let's say

00:08:13,919 --> 00:08:16,720
you want to

00:08:14,720 --> 00:08:18,800
add a new plugin or you want to change

00:08:16,720 --> 00:08:21,199
the version of spinnaker you make it in

00:08:18,800 --> 00:08:21,840
github and the pipeline will get

00:08:21,199 --> 00:08:23,919
triggered and

00:08:21,840 --> 00:08:25,919
it will update spinnaker itself so this

00:08:23,919 --> 00:08:26,960
will demonstrate how to use the get ops

00:08:25,919 --> 00:08:29,280
workflow

00:08:26,960 --> 00:08:30,160
for managing your spinnaker installation

00:08:29,280 --> 00:08:32,000
and we'll be

00:08:30,160 --> 00:08:34,159
showing a few things first is we'll go

00:08:32,000 --> 00:08:36,240
over the initial setup

00:08:34,159 --> 00:08:37,279
then we'll create the pipeline with the

00:08:36,240 --> 00:08:40,240
trigger so that

00:08:37,279 --> 00:08:41,120
it picks up changes to github and

00:08:40,240 --> 00:08:44,399
deploys them

00:08:41,120 --> 00:08:46,720
and then we'll also show a couple of

00:08:44,399 --> 00:08:48,480
examples of making changes to get one is

00:08:46,720 --> 00:08:50,000
we'll update the version of spinnaker

00:08:48,480 --> 00:08:52,160
and then we'll also

00:08:50,000 --> 00:08:53,760
install a plugin by configuring in

00:08:52,160 --> 00:08:57,680
github and see it show up

00:08:53,760 --> 00:09:00,000
in spinnaker so the

00:08:57,680 --> 00:09:01,040
repository we'll be using as a reference

00:09:00,000 --> 00:09:03,760
is uh

00:09:01,040 --> 00:09:04,720
under armoury's spinnaker customized

00:09:03,760 --> 00:09:08,320
patches

00:09:04,720 --> 00:09:11,680
in this repository there is a

00:09:08,320 --> 00:09:14,880
the entire configuration of spinnaker is

00:09:11,680 --> 00:09:18,080
uh set up through customize so

00:09:14,880 --> 00:09:21,440
you can see their recipes available and

00:09:18,080 --> 00:09:22,240
it's easy to basically add uh plugins

00:09:21,440 --> 00:09:24,000
here or

00:09:22,240 --> 00:09:25,839
change the configuration here if you

00:09:24,000 --> 00:09:28,000
want to add support for s3 instead of

00:09:25,839 --> 00:09:29,920
menu or swap out something else

00:09:28,000 --> 00:09:31,279
you can just update the customization

00:09:29,920 --> 00:09:33,360
over here and

00:09:31,279 --> 00:09:34,480
apply to your spinnaker so i've already

00:09:33,360 --> 00:09:36,399
forked the repo

00:09:34,480 --> 00:09:37,680
for the demo today and i've cloned it

00:09:36,399 --> 00:09:40,560
over here

00:09:37,680 --> 00:09:41,839
and you can see uh the contents the

00:09:40,560 --> 00:09:44,320
first thing we'll be doing

00:09:41,839 --> 00:09:45,839
is we'll be making these this

00:09:44,320 --> 00:09:47,760
customization file

00:09:45,839 --> 00:09:49,839
a regular file instead of assembling

00:09:47,760 --> 00:09:52,000
because unfortunately

00:09:49,839 --> 00:09:52,959
the sibling doesn't quite work with the

00:09:52,000 --> 00:09:56,720
demo

00:09:52,959 --> 00:09:56,720
so the first thing we'll do is do that

00:10:01,279 --> 00:10:05,279
okay and let's go ahead and edit the

00:10:03,440 --> 00:10:05,839
file now and like i mentioned before you

00:10:05,279 --> 00:10:08,480
can

00:10:05,839 --> 00:10:10,160
define various resources or make certain

00:10:08,480 --> 00:10:11,760
changes to your spinnaker setup from

00:10:10,160 --> 00:10:13,519
over here the first thing we'll be doing

00:10:11,760 --> 00:10:16,480
is we'll be changing the persistent

00:10:13,519 --> 00:10:18,000
storage for spinnaker from menu to s3

00:10:16,480 --> 00:10:20,640
so we'll go ahead and do that and we no

00:10:18,000 --> 00:10:22,240
longer need the menu resource

00:10:20,640 --> 00:10:25,120
and then we can go ahead and look at the

00:10:22,240 --> 00:10:27,279
persistence patch s3 file and make some

00:10:25,120 --> 00:10:30,560
changes

00:10:27,279 --> 00:10:32,480
um so we can configure both the bucket

00:10:30,560 --> 00:10:35,360
as well as the folder in the bucket

00:10:32,480 --> 00:10:38,560
that's going to be used for spinnaker

00:10:35,360 --> 00:10:42,079
for the demo i will be using

00:10:38,560 --> 00:10:44,640
this bucket over here and uh

00:10:42,079 --> 00:10:46,480
let's usually you can just leave the

00:10:44,640 --> 00:10:48,720
root folder as front 50 but

00:10:46,480 --> 00:10:51,920
i've been using this bucket for prepping

00:10:48,720 --> 00:10:54,399
so i'm just going to call it front 52

00:10:51,920 --> 00:10:56,880
for the for the folder we'll go ahead

00:10:54,399 --> 00:10:59,040
and save that

00:10:56,880 --> 00:11:01,360
the other thing we'll change is the

00:10:59,040 --> 00:11:03,120
version of spinnaker that we'll be using

00:11:01,360 --> 00:11:05,360
so for that i'll actually update the

00:11:03,120 --> 00:11:06,959
spinnaker service file

00:11:05,360 --> 00:11:09,360
and at the very top you can see the

00:11:06,959 --> 00:11:12,079
version and you can change this to let's

00:11:09,360 --> 00:11:15,600
say 1.21.4

00:11:12,079 --> 00:11:18,399
that's the version we'll start with

00:11:15,600 --> 00:11:20,480
and the other thing will change is the

00:11:18,399 --> 00:11:21,279
account permissions for spinnaker so

00:11:20,480 --> 00:11:24,320
that

00:11:21,279 --> 00:11:26,880
when it does and apply uh

00:11:24,320 --> 00:11:28,560
based on the git trigger it it has the

00:11:26,880 --> 00:11:31,040
permissions to go ahead and

00:11:28,560 --> 00:11:33,600
update the deployment so that'll be in

00:11:31,040 --> 00:11:35,040
in accounts kubernetes and spin sa this

00:11:33,600 --> 00:11:36,399
is the service account basically for

00:11:35,040 --> 00:11:38,720
spinnaker

00:11:36,399 --> 00:11:42,160
so uh i can just go ahead and actually

00:11:38,720 --> 00:11:45,920
remove the file and just um

00:11:42,160 --> 00:11:47,920
put in new uh information over here

00:11:45,920 --> 00:11:50,000
and this will be different uh depending

00:11:47,920 --> 00:11:52,079
on your use cases if you want to

00:11:50,000 --> 00:11:53,360
set things up slightly differently or

00:11:52,079 --> 00:11:54,880
you don't want to use

00:11:53,360 --> 00:11:56,399
the service account your your

00:11:54,880 --> 00:11:57,600
configuration will be slightly different

00:11:56,399 --> 00:11:59,040
but essentially what

00:11:57,600 --> 00:12:01,120
what the configuration in here should

00:11:59,040 --> 00:12:03,920
allow is saying hey when spinnaker

00:12:01,120 --> 00:12:05,519
is trying to deploy to the namespace

00:12:03,920 --> 00:12:06,800
where spinnaker is deployed in this case

00:12:05,519 --> 00:12:08,959
it's going to be spinnaker

00:12:06,800 --> 00:12:11,120
it has all the permissions to make the

00:12:08,959 --> 00:12:11,519
updates to do an actual deploy manifest

00:12:11,120 --> 00:12:16,560
stage

00:12:11,519 --> 00:12:19,360
execution we'll go ahead and save that

00:12:16,560 --> 00:12:20,320
the other thing i want to change is i

00:12:19,360 --> 00:12:24,560
want

00:12:20,320 --> 00:12:27,360
to add the github account um

00:12:24,560 --> 00:12:27,680
that we're going to be using for sending

00:12:27,360 --> 00:12:29,680
the

00:12:27,680 --> 00:12:30,800
webhook calls to spinnaker whenever we

00:12:29,680 --> 00:12:32,959
make a change

00:12:30,800 --> 00:12:34,000
to the configuration as well as just

00:12:32,959 --> 00:12:37,680
setting up all the

00:12:34,000 --> 00:12:38,880
the git trigger mechanism to be working

00:12:37,680 --> 00:12:42,480
so i'm going to go ahead and update the

00:12:38,880 --> 00:12:46,160
customization file again for this

00:12:42,480 --> 00:12:47,440
and i will add a section at the bottom

00:12:46,160 --> 00:12:51,040
that says that

00:12:47,440 --> 00:12:55,519
i want to basically be using github

00:12:51,040 --> 00:12:57,760
and also use git repo for this

00:12:55,519 --> 00:12:58,959
another thing i'd want to do now is that

00:12:57,760 --> 00:13:00,240
now that we've added that to the

00:12:58,959 --> 00:13:04,320
customization file

00:13:00,240 --> 00:13:06,320
is add a token for allowing spinnaker to

00:13:04,320 --> 00:13:07,600
be able to communicate back to github in

00:13:06,320 --> 00:13:10,240
order to basically

00:13:07,600 --> 00:13:11,440
pull uh files down and the file that

00:13:10,240 --> 00:13:14,880
we're going to update for that

00:13:11,440 --> 00:13:17,519
is under secrets and what you want to do

00:13:14,880 --> 00:13:19,279
is you want to copy the secrets example

00:13:17,519 --> 00:13:22,720
into its own file like secrets

00:13:19,279 --> 00:13:26,240
end and over here

00:13:22,720 --> 00:13:28,320
there will be a github token section

00:13:26,240 --> 00:13:30,000
here and you will enter the github token

00:13:28,320 --> 00:13:31,440
here you want to make sure that that

00:13:30,000 --> 00:13:34,079
token has

00:13:31,440 --> 00:13:35,519
permissions full repo permissions when

00:13:34,079 --> 00:13:38,399
you set that token up

00:13:35,519 --> 00:13:39,600
and also if you're using some sort of

00:13:38,399 --> 00:13:42,639
authentication it

00:13:39,600 --> 00:13:42,959
uh has sso access enabled so it's able

00:13:42,639 --> 00:13:45,279
to

00:13:42,959 --> 00:13:46,320
uh do a clone or fetch all the files

00:13:45,279 --> 00:13:49,839
that it needs to from

00:13:46,320 --> 00:13:49,839
from the repository

00:13:50,399 --> 00:13:54,800
okay now with that done we'll go ahead

00:13:52,880 --> 00:13:56,320
and do our first initial deploy in the

00:13:54,800 --> 00:13:59,839
cluster

00:13:56,320 --> 00:13:59,839
you can see over here

00:14:01,360 --> 00:14:04,720
i have my kubernetes cluster and

00:14:03,120 --> 00:14:06,720
initially

00:14:04,720 --> 00:14:09,360
it does not have a spinnaker name space

00:14:06,720 --> 00:14:12,000
or a spinnaker operator namespace

00:14:09,360 --> 00:14:13,279
and the way we'll do the deploy is we'll

00:14:12,000 --> 00:14:17,040
basically run

00:14:13,279 --> 00:14:20,320
this command at the root level of the

00:14:17,040 --> 00:14:21,839
repository from which we've uh we've had

00:14:20,320 --> 00:14:23,600
our customization

00:14:21,839 --> 00:14:25,839
uh files in so we'll just go ahead and

00:14:23,600 --> 00:14:27,199
run this and it's going to take some

00:14:25,839 --> 00:14:28,880
time what it's going to do it's going to

00:14:27,199 --> 00:14:30,320
create a namespace for spinnaker it'll

00:14:28,880 --> 00:14:31,199
create a name serious for spinnaker

00:14:30,320 --> 00:14:33,279
operator

00:14:31,199 --> 00:14:35,680
and then we'll go ahead and deploy the

00:14:33,279 --> 00:14:37,839
services in the spinnaker namespace

00:14:35,680 --> 00:14:41,360
and this once again is going to be one

00:14:37,839 --> 00:14:43,680
uh 21.4 to start with

00:14:41,360 --> 00:14:45,839
okay and when it's completed we can

00:14:43,680 --> 00:14:47,519
check the namespaces again and we'll see

00:14:45,839 --> 00:14:49,279
that there's a namespace for spinnaker

00:14:47,519 --> 00:14:51,760
and spinnaker operator

00:14:49,279 --> 00:14:58,079
we can go ahead and actually see what's

00:14:51,760 --> 00:15:00,560
inside the namespace spinnaker

00:14:58,079 --> 00:15:02,800
and you can see it is now bringing up

00:15:00,560 --> 00:15:05,760
the micro services that are needed

00:15:02,800 --> 00:15:07,519
uh for running spinnaker and we will

00:15:05,760 --> 00:15:09,120
wait until this is up and running

00:15:07,519 --> 00:15:11,040
we can run a watch on it but i'm just

00:15:09,120 --> 00:15:13,920
gonna wait a little bit

00:15:11,040 --> 00:15:14,320
so now the services are up and running

00:15:13,920 --> 00:15:16,079
uh

00:15:14,320 --> 00:15:17,920
what i want to do next is access

00:15:16,079 --> 00:15:18,880
finicker and and make sure it's working

00:15:17,920 --> 00:15:21,680
correctly

00:15:18,880 --> 00:15:22,000
now this kubernetes cluster is deployed

00:15:21,680 --> 00:15:25,199
in

00:15:22,000 --> 00:15:26,800
amazon so it's an eks cluster so

00:15:25,199 --> 00:15:28,880
something you can do is set up an

00:15:26,800 --> 00:15:29,839
ingress or a load balancer to be able to

00:15:28,880 --> 00:15:32,160
access

00:15:29,839 --> 00:15:33,519
uh the spinnaker installation but what

00:15:32,160 --> 00:15:35,440
i'm going to show you today is another

00:15:33,519 --> 00:15:36,800
way to do that without having to set up

00:15:35,440 --> 00:15:39,920
a load balancer

00:15:36,800 --> 00:15:40,560
and that is to basically port forward

00:15:39,920 --> 00:15:43,600
the

00:15:40,560 --> 00:15:46,800
deck and

00:15:43,600 --> 00:15:48,240
gate services so that they're available

00:15:46,800 --> 00:15:50,160
locally as well

00:15:48,240 --> 00:15:53,040
and then what you can do is you can set

00:15:50,160 --> 00:15:54,880
up an ngrok

00:15:53,040 --> 00:15:57,360
and what ngrok is basically allows you

00:15:54,880 --> 00:16:00,000
to do is set up a secure tunnel

00:15:57,360 --> 00:16:01,040
uh from a public address that routes to

00:16:00,000 --> 00:16:04,800
your

00:16:01,040 --> 00:16:09,839
local host so now if i go to this

00:16:04,800 --> 00:16:09,839
address over here in the browser

00:16:10,399 --> 00:16:15,360
you can see it actually routes to the

00:16:13,040 --> 00:16:16,399
spinnaker that's deployed in the eks

00:16:15,360 --> 00:16:17,920
cluster

00:16:16,399 --> 00:16:20,880
and we'll give this a moment to just

00:16:17,920 --> 00:16:22,560
start up so now it's up and running

00:16:20,880 --> 00:16:24,000
you can see there's certain applications

00:16:22,560 --> 00:16:26,320
already available

00:16:24,000 --> 00:16:27,199
what we'll be doing is we'll create a

00:16:26,320 --> 00:16:29,279
pipeline

00:16:27,199 --> 00:16:30,399
under the spinnaker applications to go

00:16:29,279 --> 00:16:33,759
ahead and

00:16:30,399 --> 00:16:35,839
use the configuration available in this

00:16:33,759 --> 00:16:37,680
git repository to make changes to

00:16:35,839 --> 00:16:39,440
spinnaker

00:16:37,680 --> 00:16:42,000
so coming back to our demo notes what

00:16:39,440 --> 00:16:44,079
we've done is we've installed spinnaker

00:16:42,000 --> 00:16:45,839
from uh the customized git settings

00:16:44,079 --> 00:16:47,440
we've added a github account

00:16:45,839 --> 00:16:48,959
and we've done all we need to actually

00:16:47,440 --> 00:16:51,360
enable the trigger

00:16:48,959 --> 00:16:52,320
on spinnaker's side so the one thing we

00:16:51,360 --> 00:16:55,040
need to do still

00:16:52,320 --> 00:16:57,040
is set up a web hook um on this

00:16:55,040 --> 00:16:57,920
repository so when we make a change it

00:16:57,040 --> 00:17:00,720
actually sends

00:16:57,920 --> 00:17:02,000
a notification to spinnaker so that it

00:17:00,720 --> 00:17:04,160
can actually

00:17:02,000 --> 00:17:05,760
trigger a pipeline if needed so we go to

00:17:04,160 --> 00:17:10,079
settings for this

00:17:05,760 --> 00:17:10,079
web hooks and

00:17:15,280 --> 00:17:18,480
over here you can see i've already set

00:17:17,760 --> 00:17:20,640
this up for

00:17:18,480 --> 00:17:22,640
a demo previously but what we want to do

00:17:20,640 --> 00:17:25,839
is we want to use the new

00:17:22,640 --> 00:17:26,799
ngrok address that we have and we'll

00:17:25,839 --> 00:17:29,280
update the

00:17:26,799 --> 00:17:31,200
the payload url to be the end rock

00:17:29,280 --> 00:17:32,000
address over here we'll keep the content

00:17:31,200 --> 00:17:34,960
type application

00:17:32,000 --> 00:17:35,679
json uh i do recommend that you use

00:17:34,960 --> 00:17:37,600
secrets

00:17:35,679 --> 00:17:39,120
for when uh you're configuring your

00:17:37,600 --> 00:17:41,840
triggers in my books you can see for

00:17:39,120 --> 00:17:44,080
this i just use summit 2020 getups

00:17:41,840 --> 00:17:44,880
uh that'll matter when we set up the

00:17:44,080 --> 00:17:46,799
trigger on

00:17:44,880 --> 00:17:49,520
spinnaker side so just keep that in mind

00:17:46,799 --> 00:17:51,520
we'll remember that summit 2020 get ups

00:17:49,520 --> 00:17:52,880
and we'll go to ahead and update this

00:17:51,520 --> 00:17:55,120
webhook

00:17:52,880 --> 00:17:56,000
so now we're done with that we are good

00:17:55,120 --> 00:17:58,640
to go

00:17:56,000 --> 00:18:00,160
to now create our spinnaker pipeline

00:17:58,640 --> 00:18:02,480
that's going to listen for

00:18:00,160 --> 00:18:04,160
the changes to github and trigger an

00:18:02,480 --> 00:18:06,960
update to spinnaker

00:18:04,160 --> 00:18:08,640
so we head over to spinnaker over here

00:18:06,960 --> 00:18:15,200
we can configure a new pipeline

00:18:08,640 --> 00:18:17,600
we'll call it update spinnaker

00:18:15,200 --> 00:18:18,880
and for the configuration we will add a

00:18:17,600 --> 00:18:22,480
trigger

00:18:18,880 --> 00:18:24,320
and we will select git for this

00:18:22,480 --> 00:18:26,080
the prototype will be github

00:18:24,320 --> 00:18:29,120
organization for this demo

00:18:26,080 --> 00:18:32,160
is army dash o

00:18:29,120 --> 00:18:33,840
the project name is this

00:18:32,160 --> 00:18:36,720
so we'll copy that to make sure that we

00:18:33,840 --> 00:18:36,720
don't have a typo

00:18:39,520 --> 00:18:44,080
and it'll be from the master branch and

00:18:42,240 --> 00:18:45,280
again

00:18:44,080 --> 00:18:48,080
we want to make sure we're using the

00:18:45,280 --> 00:18:48,080
same secret

00:18:52,160 --> 00:18:55,600
and i will just double check and make

00:18:53,760 --> 00:18:57,120
sure yeah you can just copy paste it as

00:18:55,600 --> 00:19:00,080
well if you want

00:18:57,120 --> 00:19:00,799
okay so we go ahead and define this

00:19:00,080 --> 00:19:03,919
artifact

00:19:00,799 --> 00:19:06,160
uh this trigger save it

00:19:03,919 --> 00:19:07,520
and then we'll add a stage the first

00:19:06,160 --> 00:19:11,840
stage will be

00:19:07,520 --> 00:19:13,120
a big and the renderer engine will be

00:19:11,840 --> 00:19:15,280
customized because that's what we're

00:19:13,120 --> 00:19:18,080
using

00:19:15,280 --> 00:19:19,120
uh we can say that it's going to produce

00:19:18,080 --> 00:19:21,760
a new get

00:19:19,120 --> 00:19:22,640
new artifact from the github repo for

00:19:21,760 --> 00:19:27,760
the url

00:19:22,640 --> 00:19:27,760
we will just use the http url here

00:19:29,360 --> 00:19:35,280
and master branch is fine and we will

00:19:33,280 --> 00:19:39,039
provide the customization file which is

00:19:35,280 --> 00:19:41,039
this top level file over here

00:19:39,039 --> 00:19:43,200
i forgot to mention we probably want to

00:19:41,039 --> 00:19:53,840
go ahead and

00:19:43,200 --> 00:19:53,840
push our local changes here out

00:19:59,600 --> 00:20:02,559
so now that's there

00:20:04,559 --> 00:20:11,600
we come back to spinnaker over here

00:20:07,679 --> 00:20:11,600
and this will be the customization file

00:20:11,760 --> 00:20:15,039
and we can add another stage that's

00:20:14,320 --> 00:20:17,760
actually going to

00:20:15,039 --> 00:20:17,760
deploy now

00:20:19,600 --> 00:20:22,799
and it'll be deployed to the spinnaker

00:20:21,200 --> 00:20:24,640
namespace

00:20:22,799 --> 00:20:26,720
and instead of text we will just choose

00:20:24,640 --> 00:20:30,159
artifact and we will choose the artifact

00:20:26,720 --> 00:20:30,159
produced by the previous stage

00:20:30,240 --> 00:20:35,840
and that's it this should be our

00:20:32,840 --> 00:20:35,840
pipeline

00:20:36,880 --> 00:20:41,120
okay so now let's go ahead and you can

00:20:40,159 --> 00:20:42,559
see that

00:20:41,120 --> 00:20:44,159
trigger is enabled for this let's go

00:20:42,559 --> 00:20:45,200
ahead and test it so the first change

00:20:44,159 --> 00:20:46,640
we'll be making

00:20:45,200 --> 00:20:48,720
is just updating the version of

00:20:46,640 --> 00:20:52,000
spinnaker and you'll see

00:20:48,720 --> 00:20:55,360
uh we'll be upgrade upgrading to 2.

00:20:52,000 --> 00:20:57,520
1.22 and you'll see that there is a very

00:20:55,360 --> 00:21:00,880
different ui so it's a very clear

00:20:57,520 --> 00:21:03,360
difference when you uh update it

00:21:00,880 --> 00:21:04,240
so if you go to spinnaker service you go

00:21:03,360 --> 00:21:17,840
over here

00:21:04,240 --> 00:21:17,840
you make a change to 1.2.1

00:21:25,679 --> 00:21:32,880
should i change up

00:21:30,880 --> 00:21:34,799
and over here we should see our pipeline

00:21:32,880 --> 00:21:36,640
getting triggered

00:21:34,799 --> 00:21:38,080
and once again it'll do the bake and

00:21:36,640 --> 00:21:45,840
then it'll deploy

00:21:38,080 --> 00:21:45,840
and if we go back to our terminal

00:21:46,400 --> 00:21:49,679
you'll see it's actually now updating

00:21:48,559 --> 00:21:52,960
spinnaker

00:21:49,679 --> 00:21:55,200
and this will take a few minutes

00:21:52,960 --> 00:21:57,120
so now you can see the parts have been

00:21:55,200 --> 00:21:58,159
updated and we should have a new version

00:21:57,120 --> 00:21:59,760
of spinnaker running

00:21:58,159 --> 00:22:01,760
the one thing i will mention is you

00:21:59,760 --> 00:22:04,400
probably want to uh

00:22:01,760 --> 00:22:05,120
uh stop and restart your port

00:22:04,400 --> 00:22:08,000
forwardings

00:22:05,120 --> 00:22:08,640
uh especially the the deck one at least

00:22:08,000 --> 00:22:11,280
and we'll

00:22:08,640 --> 00:22:13,200
we'll do that again for ngrok i think

00:22:11,280 --> 00:22:16,080
ngrok should be fine you don't need to

00:22:13,200 --> 00:22:17,200
uh restart that so now if we go

00:22:16,080 --> 00:22:20,240
spinnaker over here

00:22:17,200 --> 00:22:23,679
and we reload the

00:22:20,240 --> 00:22:26,480
page you'll see that

00:22:23,679 --> 00:22:27,200
the ui now looks different in 1.22 there

00:22:26,480 --> 00:22:29,200
was a

00:22:27,200 --> 00:22:30,720
update to deck where things shifted

00:22:29,200 --> 00:22:34,000
around a little bit it looks a lot

00:22:30,720 --> 00:22:37,440
slicker so we can actually see the

00:22:34,000 --> 00:22:37,440
update did actually take effect

00:22:37,760 --> 00:22:41,280
so now we've we've created the pipeline

00:22:39,760 --> 00:22:44,080
to update spinnaker

00:22:41,280 --> 00:22:44,960
uh we updated uh a git config which is

00:22:44,080 --> 00:22:46,559
just a version

00:22:44,960 --> 00:22:48,880
to demonstrate the get ops workflow

00:22:46,559 --> 00:22:51,360
we'll do one more quick demo which is to

00:22:48,880 --> 00:22:52,720
basically make a plug-in available uh in

00:22:51,360 --> 00:22:56,159
spinnaker and the plugin

00:22:52,720 --> 00:22:57,360
is going to be a weight stage plug-in so

00:22:56,159 --> 00:22:59,520
if i want to

00:22:57,360 --> 00:23:00,799
add a new stage over here if i look at

00:22:59,520 --> 00:23:03,520
weight you can see there

00:23:00,799 --> 00:23:05,679
there's only like one weight stage so

00:23:03,520 --> 00:23:07,679
let's go ahead and add a plug-in that

00:23:05,679 --> 00:23:09,520
enables the addition of an additional

00:23:07,679 --> 00:23:11,280
weight stage called random weight

00:23:09,520 --> 00:23:13,120
and the way we'll do that is we come

00:23:11,280 --> 00:23:14,640
back to our repository over here

00:23:13,120 --> 00:23:16,640
and if you actually look under the

00:23:14,640 --> 00:23:18,720
plugins directory

00:23:16,640 --> 00:23:20,720
you can see that by uh just for

00:23:18,720 --> 00:23:23,280
demonstration purposes we do actually

00:23:20,720 --> 00:23:25,440
show how to configure a plugin over here

00:23:23,280 --> 00:23:26,559
and you can actually view this file and

00:23:25,440 --> 00:23:29,440
see what it takes to

00:23:26,559 --> 00:23:30,320
configure that plugin and what we want

00:23:29,440 --> 00:23:32,320
to do is just

00:23:30,320 --> 00:23:35,440
add that plugin to our customization

00:23:32,320 --> 00:23:39,280
file so we'll go at the bottom over here

00:23:35,440 --> 00:23:42,000
and just go ahead and add it like this

00:23:39,280 --> 00:23:51,840
and we will go ahead and push this back

00:23:42,000 --> 00:23:51,840
up stream

00:24:03,760 --> 00:24:07,279
and once this is done you will see that

00:24:06,720 --> 00:24:10,240
uh

00:24:07,279 --> 00:24:11,600
spinnaker will pick up the change and

00:24:10,240 --> 00:24:14,320
it'll trigger a deploy again so it's

00:24:11,600 --> 00:24:14,320
doing the bake

00:24:15,120 --> 00:24:17,840
and then it's going to be doing the

00:24:16,400 --> 00:24:18,720
deploy and you'll see that the pods are

00:24:17,840 --> 00:24:21,600
getting updated

00:24:18,720 --> 00:24:22,720
and we'll give this a few minutes so you

00:24:21,600 --> 00:24:25,039
can see now that the

00:24:22,720 --> 00:24:26,320
pods have been deployed to once again

00:24:25,039 --> 00:24:33,279
you want to

00:24:26,320 --> 00:24:36,480
restart your port forwards

00:24:33,279 --> 00:24:36,480
and we'll come over here

00:24:36,640 --> 00:24:42,240
reload this page okay so now let's uh

00:24:39,919 --> 00:24:47,840
try to add a new pipeline

00:24:42,240 --> 00:24:47,840
and we'll call it like test plugin

00:24:49,520 --> 00:24:53,440
and if we try to add a stage now and if

00:24:51,919 --> 00:24:54,880
we search for weight

00:24:53,440 --> 00:24:57,200
you will see that there's a random

00:24:54,880 --> 00:25:00,320
weight stage now also available

00:24:57,200 --> 00:25:03,120
thanks to the plugin so to recap

00:25:00,320 --> 00:25:04,080
um we showed how you can use a

00:25:03,120 --> 00:25:06,960
customized

00:25:04,080 --> 00:25:07,919
setup uh configuration setup to manage

00:25:06,960 --> 00:25:10,559
your spinning

00:25:07,919 --> 00:25:12,640
configuration a lot more easily and we

00:25:10,559 --> 00:25:14,799
did a deploy for that we had set up a

00:25:12,640 --> 00:25:17,360
github account and to enable github

00:25:14,799 --> 00:25:18,559
get triggers we created a pipeline in

00:25:17,360 --> 00:25:20,640
spinnaker

00:25:18,559 --> 00:25:22,880
so that spinnaker could update itself

00:25:20,640 --> 00:25:26,159
based on changes made to the

00:25:22,880 --> 00:25:28,159
customized repository uh we

00:25:26,159 --> 00:25:29,679
did a quick update of the spinnaker

00:25:28,159 --> 00:25:30,400
version showed that spinnaker picked

00:25:29,679 --> 00:25:33,279
that up and

00:25:30,400 --> 00:25:34,480
updated itself and then we installed uh

00:25:33,279 --> 00:25:36,960
a plug-in and saw that

00:25:34,480 --> 00:25:37,520
spinnaker was able to pick that as well

00:25:36,960 --> 00:25:40,559
up

00:25:37,520 --> 00:25:42,720
so spinnaker configuration management

00:25:40,559 --> 00:25:44,159
uh using a git ops workflow thank you

00:25:42,720 --> 00:25:45,440
actually that was a great demo

00:25:44,159 --> 00:25:46,960
it was great to see how quickly you

00:25:45,440 --> 00:25:48,400
could get spinnaker up and running with

00:25:46,960 --> 00:25:49,840
the operator and how you can manage

00:25:48,400 --> 00:25:51,039
those changes effectively to your

00:25:49,840 --> 00:25:52,720
cluster

00:25:51,039 --> 00:25:54,480
i would like to spend the last few

00:25:52,720 --> 00:25:57,279
minutes here talking about what's next

00:25:54,480 --> 00:25:58,880
for the operator so first on the list if

00:25:57,279 --> 00:26:00,159
you've been following along with open

00:25:58,880 --> 00:26:01,840
source development in this minicure

00:26:00,159 --> 00:26:03,679
community you have no doubt heard of the

00:26:01,840 --> 00:26:06,400
cleat configuration tool

00:26:03,679 --> 00:26:08,320
it is a next generation way to manage

00:26:06,400 --> 00:26:11,520
configuration for spinnaker

00:26:08,320 --> 00:26:13,120
and essentially is solving for

00:26:11,520 --> 00:26:14,799
a portion of the problem space that

00:26:13,120 --> 00:26:16,720
halyard solves for you today

00:26:14,799 --> 00:26:18,000
so how your currently uh manages

00:26:16,720 --> 00:26:19,760
configuration and generates

00:26:18,000 --> 00:26:21,440
configuration for each spinnaker service

00:26:19,760 --> 00:26:22,799
and then is responsible for creating the

00:26:21,440 --> 00:26:24,080
deployment manifests

00:26:22,799 --> 00:26:26,159
that you are going to apply to the

00:26:24,080 --> 00:26:27,840
cluster clean is only handling that

00:26:26,159 --> 00:26:28,400
first half that configuration management

00:26:27,840 --> 00:26:30,240
half

00:26:28,400 --> 00:26:31,760
so what we'd like to do is migrate

00:26:30,240 --> 00:26:33,039
operator to use cleat

00:26:31,760 --> 00:26:34,640
since that is the tool that the

00:26:33,039 --> 00:26:36,320
community will be moving forward with in

00:26:34,640 --> 00:26:38,000
the future

00:26:36,320 --> 00:26:40,159
and that understandably leaves you

00:26:38,000 --> 00:26:42,000
wondering what about halyard

00:26:40,159 --> 00:26:43,840
so halyard is will eventually become a

00:26:42,000 --> 00:26:44,480
deprecated part of the tool chains you

00:26:43,840 --> 00:26:46,240
will eventually

00:26:44,480 --> 00:26:48,000
need to migrate to something else so you

00:26:46,240 --> 00:26:49,919
either use clique directly and then you

00:26:48,000 --> 00:26:51,919
define your own deployment yourself

00:26:49,919 --> 00:26:53,440
or you continue to use operator and we

00:26:51,919 --> 00:26:56,480
will help you through that transition

00:26:53,440 --> 00:26:58,400
of moving your health config from um

00:26:56,480 --> 00:27:00,640
you know the the current halyard method

00:26:58,400 --> 00:27:02,320
to the more cleat style configuration

00:27:00,640 --> 00:27:04,240
and operator will continue to manage

00:27:02,320 --> 00:27:05,919
deployments as it was before

00:27:04,240 --> 00:27:07,600
so that means eventually that halyard

00:27:05,919 --> 00:27:08,640
will remove its dependence or sorry the

00:27:07,600 --> 00:27:10,480
operator will remove

00:27:08,640 --> 00:27:12,240
its dependence on how you're in future

00:27:10,480 --> 00:27:14,080
releases

00:27:12,240 --> 00:27:15,919
we also understand that because we have

00:27:14,080 --> 00:27:17,600
this two container approach right now

00:27:15,919 --> 00:27:19,360
uh error messages are a little bit hard

00:27:17,600 --> 00:27:22,240
to track between the two tools

00:27:19,360 --> 00:27:23,200
so as a consequence of moving away from

00:27:22,240 --> 00:27:24,640
halyard

00:27:23,200 --> 00:27:26,880
we're going to be streamlining error

00:27:24,640 --> 00:27:27,760
messages so it'll be easier to determine

00:27:26,880 --> 00:27:29,679
what's gone wrong

00:27:27,760 --> 00:27:31,919
and what exactly has failed in the

00:27:29,679 --> 00:27:33,520
validations that you haven't operated

00:27:31,919 --> 00:27:35,279
finally once we've done this migration

00:27:33,520 --> 00:27:37,279
to cleat we're going to donate this to

00:27:35,279 --> 00:27:39,120
the community we really want this to be

00:27:37,279 --> 00:27:40,720
the tool that the community is

00:27:39,120 --> 00:27:41,840
galvanized around for spinnaker

00:27:40,720 --> 00:27:43,120
development

00:27:41,840 --> 00:27:45,120
if you were attending some of our

00:27:43,120 --> 00:27:46,559
workshops earlier in spinnaker summit

00:27:45,120 --> 00:27:48,159
you will have seen the operator in

00:27:46,559 --> 00:27:49,760
action already

00:27:48,159 --> 00:27:52,000
and we really want this to be the tool

00:27:49,760 --> 00:27:53,440
that folks use to get started and to

00:27:52,000 --> 00:27:55,200
develop against spinnaker and to just

00:27:53,440 --> 00:27:57,200
kind of simplify the manage

00:27:55,200 --> 00:27:58,640
the management of the entire spinnaker

00:27:57,200 --> 00:28:00,000
ecosystem

00:27:58,640 --> 00:28:01,279
and then finally as we continue to

00:28:00,000 --> 00:28:03,760
invest in this product we want to

00:28:01,279 --> 00:28:06,640
continue automating common use cases

00:28:03,760 --> 00:28:08,799
and making sure that it is easy to

00:28:06,640 --> 00:28:11,440
enable and disable features

00:28:08,799 --> 00:28:12,559
in the future so thank you again for

00:28:11,440 --> 00:28:17,840
attending our talk

00:28:12,559 --> 00:28:17,840

YouTube URL: https://www.youtube.com/watch?v=tKanOSHmhM4


