Title: Delivering Golden AMIs with Spinnaker - David Hurng
Publication date: 2021-01-28
Playlist: Spinnaker Summit 2020
Description: 
	This panel will ultimately show you how to use Spinnaker to build a GoldenAMI pipeline. The accompanying use case is: often times, teams need approved AMIs that meet the security assessment standards. The typical process is to have all the AMIs baked and then deployed into instances with Spinnaker, then out of band, to run some sort of security assessment tool against those instances. The issue with this, is that the instances are already deployed, meaning that the time spent on spin-up is wasted. The assessment, depending on the 3rd party solution, is also going to take much longer as the runtime scales with the number of instances/agents it must evaluate. And finally, this process it decoupled from Spinnaker itself. The solution I want to show you is that we can use web-hook stages within Spinnaker, invoke AWS Lambda Function/API Gateway/AWS Inspector to run these assessments on a GoldenAMI candidate. Once the assessment is complete and approved manually, the AMI can continue down the pipeline and into a GoldenAMI approved environment, for instances to utilize. This will all be ran through one single pipeline execution within Spinnaker.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:05,279 --> 00:00:08,000
hello everyone

00:00:06,080 --> 00:00:10,320
and welcome to this year's spinnaker

00:00:08,000 --> 00:00:11,599
summits delivering golden amis with

00:00:10,320 --> 00:00:13,759
spinnaker

00:00:11,599 --> 00:00:15,839
my name is david hearn and i'm a senior

00:00:13,759 --> 00:00:17,039
site reliability engineer at salesforce

00:00:15,839 --> 00:00:18,960
einstein

00:00:17,039 --> 00:00:21,279
and today i'll be talking to you about

00:00:18,960 --> 00:00:22,320
how to develop and deliver golden amis

00:00:21,279 --> 00:00:25,279
with spinnaker

00:00:22,320 --> 00:00:27,119
so let's get started first off what

00:00:25,279 --> 00:00:28,880
exactly are golden amis

00:00:27,119 --> 00:00:30,240
well a golden amine is ultimately an

00:00:28,880 --> 00:00:31,760
amazon machine image

00:00:30,240 --> 00:00:33,920
that is pre-configured with the os of

00:00:31,760 --> 00:00:35,440
your choice as well as embedded with the

00:00:33,920 --> 00:00:38,079
software that is required to run your

00:00:35,440 --> 00:00:38,079
applications

00:00:39,120 --> 00:00:42,719
these amis are standardized through

00:00:41,280 --> 00:00:44,879
configuration

00:00:42,719 --> 00:00:46,239
consistent security patching and

00:00:44,879 --> 00:00:48,079
hardening

00:00:46,239 --> 00:00:49,840
they need to be continuously assessed

00:00:48,079 --> 00:00:51,920
and scanned for vulnerabilities

00:00:49,840 --> 00:00:53,600
prior to distribution and deployment to

00:00:51,920 --> 00:00:55,280
your business units

00:00:53,600 --> 00:00:57,440
they are also constantly being replaced

00:00:55,280 --> 00:00:58,000
by newer amis as they quickly become

00:00:57,440 --> 00:01:01,840
outdated

00:00:58,000 --> 00:01:01,840
as new vulnerabilities are discovered

00:01:02,480 --> 00:01:06,880
so why do we care why do we go through

00:01:04,640 --> 00:01:09,200
all this work to reproduce an ami that i

00:01:06,880 --> 00:01:10,960
can find on the market and use

00:01:09,200 --> 00:01:12,479
well many of you here are probably

00:01:10,960 --> 00:01:13,680
facing the same types of issues with

00:01:12,479 --> 00:01:16,400
that approach

00:01:13,680 --> 00:01:18,080
in that there is an inconsistency in the

00:01:16,400 --> 00:01:19,520
images that are being used throughout

00:01:18,080 --> 00:01:21,600
your organization

00:01:19,520 --> 00:01:22,960
as everyone is free to use whatever amis

00:01:21,600 --> 00:01:24,720
they see fit

00:01:22,960 --> 00:01:26,400
don't forget that these machines are

00:01:24,720 --> 00:01:28,560
likely they're littered

00:01:26,400 --> 00:01:30,240
with vulnerabilities that can pose major

00:01:28,560 --> 00:01:31,680
risks

00:01:30,240 --> 00:01:33,840
so now that you know a little bit about

00:01:31,680 --> 00:01:35,200
golden amis and how they prove useful to

00:01:33,840 --> 00:01:36,720
you and your team

00:01:35,200 --> 00:01:41,439
let's talk about how we can deliver them

00:01:36,720 --> 00:01:43,439
with pipelines

00:01:41,439 --> 00:01:45,200
think of a golden ami pipeline as a

00:01:43,439 --> 00:01:47,040
perfect way to ensure standardized

00:01:45,200 --> 00:01:48,240
processes while maintaining checks and

00:01:47,040 --> 00:01:51,119
balances

00:01:48,240 --> 00:01:52,320
first off it saves time we can expect an

00:01:51,119 --> 00:01:54,000
automated process

00:01:52,320 --> 00:01:55,439
as opposed to manual step-by-step

00:01:54,000 --> 00:01:56,880
playbook which tends to be prone to

00:01:55,439 --> 00:01:59,759
mistakes

00:01:56,880 --> 00:02:00,479
second and ensures consistency rather

00:01:59,759 --> 00:02:02,479
than have an

00:02:00,479 --> 00:02:04,640
ad-hoc deployments with random floating

00:02:02,479 --> 00:02:07,119
images you can restrict your team

00:02:04,640 --> 00:02:10,160
to only deploy with the improved secure

00:02:07,119 --> 00:02:12,879
list of golden amis

00:02:10,160 --> 00:02:13,760
third amis are hardened meaning that

00:02:12,879 --> 00:02:15,520
potential

00:02:13,760 --> 00:02:18,480
threats against instances are

00:02:15,520 --> 00:02:19,599
neutralized as unwanted and unnecessary

00:02:18,480 --> 00:02:22,480
services

00:02:19,599 --> 00:02:24,239
access and programs are removed this can

00:02:22,480 --> 00:02:26,400
also make amis much more lightweight if

00:02:24,239 --> 00:02:28,480
needed

00:02:26,400 --> 00:02:29,760
finally aside for preventing attacks

00:02:28,480 --> 00:02:31,680
from hardening

00:02:29,760 --> 00:02:33,599
there are continuous assessments of

00:02:31,680 --> 00:02:35,440
vulnerabilities so you can expect your

00:02:33,599 --> 00:02:38,080
amis to always be measured against the

00:02:35,440 --> 00:02:40,239
latest security standards

00:02:38,080 --> 00:02:41,840
each ami will also be encrypted with

00:02:40,239 --> 00:02:45,120
agents that provide logging

00:02:41,840 --> 00:02:47,519
security and performance monitoring

00:02:45,120 --> 00:02:51,599
and as added bonus golden amis also make

00:02:47,519 --> 00:02:53,360
auditing time much smoother

00:02:51,599 --> 00:02:54,640
so what does a golden ami pipeline look

00:02:53,360 --> 00:02:57,040
like well

00:02:54,640 --> 00:02:59,280
aws has many resources and case studies

00:02:57,040 --> 00:03:01,599
that demonstrate a working pipeline

00:02:59,280 --> 00:03:03,120
that integrates with aws inspector as

00:03:01,599 --> 00:03:04,080
well as third-party inspection tools

00:03:03,120 --> 00:03:07,360
such as qualis

00:03:04,080 --> 00:03:08,640
and tenable the general idea and the

00:03:07,360 --> 00:03:11,440
flow is the same between all these

00:03:08,640 --> 00:03:13,120
pipelines however

00:03:11,440 --> 00:03:16,480
we can expect the creation of a golden

00:03:13,120 --> 00:03:19,280
ami through a general process as shown

00:03:16,480 --> 00:03:20,720
hardening the selected image again this

00:03:19,280 --> 00:03:21,360
can involve removing programs and

00:03:20,720 --> 00:03:24,640
services

00:03:21,360 --> 00:03:25,440
as well as blocking any ports validating

00:03:24,640 --> 00:03:27,920
the image

00:03:25,440 --> 00:03:30,959
with some sort of inspection process

00:03:27,920 --> 00:03:34,159
approving or rejecting the image

00:03:30,959 --> 00:03:35,040
if rejected decommission the ami oh and

00:03:34,159 --> 00:03:39,440
start another

00:03:35,040 --> 00:03:41,760
or simply patch it up if approved

00:03:39,440 --> 00:03:42,959
register the ami as active and up to

00:03:41,760 --> 00:03:44,879
date ami

00:03:42,959 --> 00:03:46,879
the approved amm will then be ready for

00:03:44,879 --> 00:03:48,720
distribution for consumption

00:03:46,879 --> 00:03:50,560
and then decommissioned once obsolete or

00:03:48,720 --> 00:03:51,920
reaches end of life which is generally

00:03:50,560 --> 00:03:55,360
subjective to the team's

00:03:51,920 --> 00:03:57,519
standards it is also best practice to

00:03:55,360 --> 00:04:01,840
allow these established golden amis

00:03:57,519 --> 00:04:04,319
to remove to remain as immutable objects

00:04:01,840 --> 00:04:05,360
so when there is a need to make a change

00:04:04,319 --> 00:04:06,720
to the ami

00:04:05,360 --> 00:04:08,319
it's as easy as updating the

00:04:06,720 --> 00:04:10,879
requirements and rerunning the same

00:04:08,319 --> 00:04:10,879
pipeline

00:04:12,319 --> 00:04:16,079
since this is a spinnaker summit after

00:04:14,000 --> 00:04:17,600
all i won't dive too deep into aw as a

00:04:16,079 --> 00:04:19,040
solution architecture

00:04:17,600 --> 00:04:21,120
there are also plenty of resources that

00:04:19,040 --> 00:04:22,639
cover this in depth

00:04:21,120 --> 00:04:24,160
but as a comparison to what we can

00:04:22,639 --> 00:04:26,479
accomplish with spinner here

00:04:24,160 --> 00:04:28,639
let us look at how the deployment uses

00:04:26,479 --> 00:04:30,320
some of aws managed services that we can

00:04:28,639 --> 00:04:32,560
adopt into our own spinnaker version of

00:04:30,320 --> 00:04:33,759
the pipeline

00:04:32,560 --> 00:04:36,000
the pipeline can be started with

00:04:33,759 --> 00:04:38,400
multiple triggers manually

00:04:36,000 --> 00:04:40,080
periodically or right after a caicd

00:04:38,400 --> 00:04:42,240
pipeline

00:04:40,080 --> 00:04:43,520
once the source ami selected an instance

00:04:42,240 --> 00:04:45,919
is created

00:04:43,520 --> 00:04:47,440
packages and libraries are updated

00:04:45,919 --> 00:04:48,639
installed with any custom code for

00:04:47,440 --> 00:04:52,240
hardening

00:04:48,639 --> 00:04:54,720
also installed with any required agents

00:04:52,240 --> 00:04:56,080
once the instance is stopped an aim an

00:04:54,720 --> 00:04:59,360
image is created

00:04:56,080 --> 00:05:01,199
this is the golden ami as the next step

00:04:59,360 --> 00:05:04,400
this golden ami will be tagged

00:05:01,199 --> 00:05:06,560
accordingly with production information

00:05:04,400 --> 00:05:08,720
the image is then used to create another

00:05:06,560 --> 00:05:12,639
instance with the same requisites

00:05:08,720 --> 00:05:14,639
however it will also an aws inspector

00:05:12,639 --> 00:05:17,280
agent to be installed it also needs an

00:05:14,639 --> 00:05:19,840
aws inspector agent to be installed

00:05:17,280 --> 00:05:21,039
the agent will be collected install

00:05:19,840 --> 00:05:23,120
package information

00:05:21,039 --> 00:05:26,720
in any software configuration in order

00:05:23,120 --> 00:05:28,880
to fully assess their security

00:05:26,720 --> 00:05:30,479
this instance is what will undergo the

00:05:28,880 --> 00:05:32,400
assessments

00:05:30,479 --> 00:05:34,240
the aws inspector templates can be

00:05:32,400 --> 00:05:36,320
configured to run at a set cadence and

00:05:34,240 --> 00:05:38,160
pick up any new instances

00:05:36,320 --> 00:05:40,160
once inspector finishes the assessment

00:05:38,160 --> 00:05:41,280
it will publish an sns notification for

00:05:40,160 --> 00:05:43,360
approval

00:05:41,280 --> 00:05:46,240
this is the general flow of most golden

00:05:43,360 --> 00:05:46,240
ami pipelines

00:05:46,720 --> 00:05:50,560
i want to now introduce to you the

00:05:48,639 --> 00:05:52,000
spinnaker solution

00:05:50,560 --> 00:05:54,000
i took the key flow of what we saw

00:05:52,000 --> 00:05:56,080
earlier and integrated alongside with

00:05:54,000 --> 00:05:59,199
the tools provided by spinnaker

00:05:56,080 --> 00:05:59,520
let's go through the architecture first

00:05:59,199 --> 00:06:01,120
off

00:05:59,520 --> 00:06:03,120
we can also trigger the golden ami

00:06:01,120 --> 00:06:06,240
spinnaker pipeline with manual trigger

00:06:03,120 --> 00:06:08,080
periodic trigger or a ci cd trigger

00:06:06,240 --> 00:06:09,919
i won't go into the authentication or

00:06:08,080 --> 00:06:11,520
authorization step that is out of the

00:06:09,919 --> 00:06:14,160
scope of this panel

00:06:11,520 --> 00:06:15,360
but i want to mention how spinnaker will

00:06:14,160 --> 00:06:17,680
run the aws service

00:06:15,360 --> 00:06:19,039
as a functional id and not as a specific

00:06:17,680 --> 00:06:21,440
user

00:06:19,039 --> 00:06:22,479
in other words there will be one single

00:06:21,440 --> 00:06:25,120
aws

00:06:22,479 --> 00:06:27,280
iam identity due to the nature of this

00:06:25,120 --> 00:06:29,520
particular pipeline

00:06:27,280 --> 00:06:30,960
to continue the image will be baked and

00:06:29,520 --> 00:06:34,000
depending on the template it could be

00:06:30,960 --> 00:06:35,680
shared with existing target environments

00:06:34,000 --> 00:06:37,039
the hardened image will be tagged as a

00:06:35,680 --> 00:06:38,960
golden ami candidate

00:06:37,039 --> 00:06:41,840
so we know it is not ready to be used in

00:06:38,960 --> 00:06:44,080
production machines

00:06:41,840 --> 00:06:45,520
single instance will be deployed from

00:06:44,080 --> 00:06:47,600
this ami

00:06:45,520 --> 00:06:49,280
which will also have aws inspector agent

00:06:47,600 --> 00:06:51,360
installed on top of everything else that

00:06:49,280 --> 00:06:53,440
is needed

00:06:51,360 --> 00:06:55,440
we will then invoke a fire and forget

00:06:53,440 --> 00:06:59,360
web hook against the aws lander that

00:06:55,440 --> 00:07:02,000
triggers aws inspector assessment to run

00:06:59,360 --> 00:07:02,800
after the aws inspectors completes the

00:07:02,000 --> 00:07:05,280
assessment

00:07:02,800 --> 00:07:07,440
we can approve the ami through a manual

00:07:05,280 --> 00:07:09,520
input stage in spinnaker

00:07:07,440 --> 00:07:12,080
from there with the ami is approved it

00:07:09,520 --> 00:07:15,039
can be tagged with golden ami proof tag

00:07:12,080 --> 00:07:17,840
and released for use else the mi will be

00:07:15,039 --> 00:07:17,840
cleaned up and destroyed

00:07:18,800 --> 00:07:22,720
here is a visual comparison of the aws

00:07:21,199 --> 00:07:25,199
solution architecture

00:07:22,720 --> 00:07:26,960
with the spinnaker architecture the

00:07:25,199 --> 00:07:29,039
major intersecting points will be the

00:07:26,960 --> 00:07:31,840
shared aws services

00:07:29,039 --> 00:07:33,120
but the flow of the baking tagging and

00:07:31,840 --> 00:07:36,400
approving can be done

00:07:33,120 --> 00:07:36,400
all in band with spinnaker

00:07:37,360 --> 00:07:40,720
here are some of the very fundamental

00:07:38,800 --> 00:07:41,919
prerequisites to get us started

00:07:40,720 --> 00:07:44,319
of course we're going to need a

00:07:41,919 --> 00:07:46,479
spinnaker installation start with

00:07:44,319 --> 00:07:47,280
configuring aws as a provider and cloud

00:07:46,479 --> 00:07:48,800
driver

00:07:47,280 --> 00:07:51,039
this will be the deployment environment

00:07:48,800 --> 00:07:53,599
where the instances will be created

00:07:51,039 --> 00:07:55,280
when configuring adding the aws

00:07:53,599 --> 00:07:56,879
environment where spinnaker is installed

00:07:55,280 --> 00:07:58,080
will actually make things easier as

00:07:56,879 --> 00:08:01,440
there will be fewer

00:07:58,080 --> 00:08:01,440
networking hurdles to go through

00:08:01,919 --> 00:08:06,080
have aws bakery configuration setup this

00:08:04,720 --> 00:08:07,840
will allow for the use of bakery

00:08:06,080 --> 00:08:09,360
defaults

00:08:07,840 --> 00:08:11,199
the template files are stored within

00:08:09,360 --> 00:08:14,479
spinnaker's microservice frosco

00:08:11,199 --> 00:08:16,160
which runs simply packer so ideally to

00:08:14,479 --> 00:08:17,840
make everything easier and automated

00:08:16,160 --> 00:08:20,240
i'd recommend looking into github sync

00:08:17,840 --> 00:08:21,680
as a sidecar this ultimately allows any

00:08:20,240 --> 00:08:23,840
merges on a target branch

00:08:21,680 --> 00:08:26,639
of a repository to be synced with rosco

00:08:23,840 --> 00:08:28,479
for baking

00:08:26,639 --> 00:08:30,560
the aws services will be out of band

00:08:28,479 --> 00:08:33,519
with the setup and the spinner process

00:08:30,560 --> 00:08:33,919
but all part of the automations go we'll

00:08:33,519 --> 00:08:36,560
need

00:08:33,919 --> 00:08:38,240
a aws api gateway for the webhooks

00:08:36,560 --> 00:08:40,399
coming from spinnaker

00:08:38,240 --> 00:08:42,240
protectives with api keys as well as a

00:08:40,399 --> 00:08:44,320
secure networking layer

00:08:42,240 --> 00:08:46,240
i would recommend these aws services to

00:08:44,320 --> 00:08:48,560
be deployed within the same environment

00:08:46,240 --> 00:08:50,640
as the aws provider configured above for

00:08:48,560 --> 00:08:52,880
the same reasons

00:08:50,640 --> 00:08:54,640
we will need an aws lambda to process

00:08:52,880 --> 00:08:56,640
the web hook and make logical calls to

00:08:54,640 --> 00:08:58,480
the aws inspector

00:08:56,640 --> 00:09:00,080
a function to invoke the assessment and

00:08:58,480 --> 00:09:03,519
another to confirm the completion

00:09:00,080 --> 00:09:05,920
and gather the report within the lambda

00:09:03,519 --> 00:09:07,839
finally aw bus inspector itself needs to

00:09:05,920 --> 00:09:09,440
be set up to have the job that targets

00:09:07,839 --> 00:09:12,880
images based on the tag's

00:09:09,440 --> 00:09:13,360
golden ami candidate as mentioned

00:09:12,880 --> 00:09:15,279
earlier

00:09:13,360 --> 00:09:16,880
we can optionally include a github sync

00:09:15,279 --> 00:09:19,279
sidecar

00:09:16,880 --> 00:09:21,040
also optionally a custom job stage where

00:09:19,279 --> 00:09:21,839
you can run scripts to publish a golden

00:09:21,040 --> 00:09:24,800
mi

00:09:21,839 --> 00:09:26,800
into your repo or any final touches you

00:09:24,800 --> 00:09:28,959
can learn more about this in the next

00:09:26,800 --> 00:09:30,720
spinnaker summit workshop spinnaker

00:09:28,959 --> 00:09:32,640
custom job stage

00:09:30,720 --> 00:09:34,720
and of course spinnaker also has

00:09:32,640 --> 00:09:37,839
notification options similar to sms

00:09:34,720 --> 00:09:37,839
solution that you can set up

00:09:38,560 --> 00:09:42,560
here's a snippet of a simple golden ami

00:09:41,040 --> 00:09:43,920
spinnaker pipeline

00:09:42,560 --> 00:09:45,680
there is nothing else that needs to be

00:09:43,920 --> 00:09:47,600
done outside of running this pipeline

00:09:45,680 --> 00:09:49,040
so emphasis on the automation and how

00:09:47,600 --> 00:09:51,839
everything is managed and controlled

00:09:49,040 --> 00:09:51,839
through spinnaker

00:09:53,440 --> 00:09:57,760
let's dive in the bake stage is the

00:09:55,839 --> 00:09:59,920
first step in the pipeline we see

00:09:57,760 --> 00:10:01,120
the aws bakery will be configured within

00:09:59,920 --> 00:10:03,920
spinnaker

00:10:01,120 --> 00:10:05,040
you can establish defaults that abstract

00:10:03,920 --> 00:10:07,360
any complexity

00:10:05,040 --> 00:10:08,079
and makes configuring the pipeline much

00:10:07,360 --> 00:10:09,360
easier

00:10:08,079 --> 00:10:11,680
we can take a look at what this looks

00:10:09,360 --> 00:10:13,760
like in the next section

00:10:11,680 --> 00:10:16,320
spinnaker's microservice rosco runs

00:10:13,760 --> 00:10:18,079
packer against a specified directory

00:10:16,320 --> 00:10:19,760
again this is where can have seen

00:10:18,079 --> 00:10:21,600
sidecar can come in handy

00:10:19,760 --> 00:10:23,519
whenever there is a merge on the master

00:10:21,600 --> 00:10:24,880
branch within a repo that contains the

00:10:23,519 --> 00:10:27,360
packer templates

00:10:24,880 --> 00:10:29,120
as well as values in other scripts it

00:10:27,360 --> 00:10:30,880
will automatically update the path

00:10:29,120 --> 00:10:32,720
within the roscode container

00:10:30,880 --> 00:10:34,560
this removes the need of re-deploying

00:10:32,720 --> 00:10:38,320
ross containers thus

00:10:34,560 --> 00:10:40,079
preventing any downtime the template can

00:10:38,320 --> 00:10:40,800
also include a few other requisites such

00:10:40,079 --> 00:10:43,360
as naming

00:10:40,800 --> 00:10:44,160
or other environments that to share this

00:10:43,360 --> 00:10:46,320
is okay

00:10:44,160 --> 00:10:48,399
as we will not allow users to use any

00:10:46,320 --> 00:10:51,360
amis that are not tagged for approval

00:10:48,399 --> 00:10:52,320
regardless of the environment once the

00:10:51,360 --> 00:10:54,240
ami

00:10:52,320 --> 00:10:56,079
image is baked you can view it in your

00:10:54,240 --> 00:11:00,959
amis tabs in views

00:10:56,079 --> 00:11:02,880
in aws console

00:11:00,959 --> 00:11:04,000
as we can see the examples and features

00:11:02,880 --> 00:11:07,600
that aws

00:11:04,000 --> 00:11:09,839
or that spinnaker offers for ami baking

00:11:07,600 --> 00:11:12,240
the ami defaults can be seen as

00:11:09,839 --> 00:11:14,720
selectable under base os

00:11:12,240 --> 00:11:15,600
all other file references are within the

00:11:14,720 --> 00:11:17,680
custom

00:11:15,600 --> 00:11:21,040
rosco directory that is linked with the

00:11:17,680 --> 00:11:21,040
github sync sidecar

00:11:23,519 --> 00:11:27,920
the tag stage is pretty straightforward

00:11:25,680 --> 00:11:30,000
simply tags the newly created ami with

00:11:27,920 --> 00:11:32,399
golden ami candidate

00:11:30,000 --> 00:11:34,160
again since this is the ami that can be

00:11:32,399 --> 00:11:36,160
shared amongst other environments

00:11:34,160 --> 00:11:39,519
already your team should be aware that

00:11:36,160 --> 00:11:41,440
candidate does not mean approved

00:11:39,519 --> 00:11:43,839
also keep track of the tag being used

00:11:41,440 --> 00:11:45,600
here that is what aws inspector

00:11:43,839 --> 00:11:48,640
template will need in order to do the

00:11:45,600 --> 00:11:51,360
matching and searching

00:11:48,640 --> 00:11:53,120
next the deployment stage will deploy a

00:11:51,360 --> 00:11:54,240
single instance of a golden ami

00:11:53,120 --> 00:11:55,760
candidate

00:11:54,240 --> 00:11:57,600
much of the default are lightweight

00:11:55,760 --> 00:11:59,519
enough to proceed but adding

00:11:57,600 --> 00:12:01,680
configurations such as a firewall

00:11:59,519 --> 00:12:03,360
will help as it will be included in the

00:12:01,680 --> 00:12:05,200
vulnerability scanning

00:12:03,360 --> 00:12:06,920
that being said this is a good

00:12:05,200 --> 00:12:09,600
opportunity to scan from network

00:12:06,920 --> 00:12:11,760
vulnerabilities

00:12:09,600 --> 00:12:13,760
another key feature here is to include

00:12:11,760 --> 00:12:16,079
an encrypted user data

00:12:13,760 --> 00:12:18,399
that installs any agents you need but

00:12:16,079 --> 00:12:22,000
more importantly the aws inspector agent

00:12:18,399 --> 00:12:22,000
and it is required for scanning

00:12:22,959 --> 00:12:27,440
thanks to spinnaker's web hook stage we

00:12:25,279 --> 00:12:28,079
can invoke the aws inspector and keep

00:12:27,440 --> 00:12:29,519
the process

00:12:28,079 --> 00:12:32,880
automated without ever leaving the

00:12:29,519 --> 00:12:35,519
pipeline we can also trigger

00:12:32,880 --> 00:12:37,519
inspector on cue as opposed to having to

00:12:35,519 --> 00:12:38,560
wait for a scheduled cadence to scan

00:12:37,519 --> 00:12:41,440
instances

00:12:38,560 --> 00:12:42,959
thus possibly missing any new instances

00:12:41,440 --> 00:12:44,720
especially if the pipeline were to

00:12:42,959 --> 00:12:46,720
restart

00:12:44,720 --> 00:12:48,320
the webhook stage will involve a post

00:12:46,720 --> 00:12:50,800
method to the webhook url

00:12:48,320 --> 00:12:52,720
alongside any payload in any api key

00:12:50,800 --> 00:12:54,399
within the headers

00:12:52,720 --> 00:12:56,000
lambda will have a logical code to

00:12:54,399 --> 00:12:58,079
process the web hook requests

00:12:56,000 --> 00:12:59,839
accordingly i have not published the

00:12:58,079 --> 00:13:02,160
code due to proprietary reasons

00:12:59,839 --> 00:13:06,240
but it could be as simple simple as

00:13:02,160 --> 00:13:08,480
making another api call to aws inspector

00:13:06,240 --> 00:13:09,360
aws inspector can be configured with the

00:13:08,480 --> 00:13:11,680
rules packages

00:13:09,360 --> 00:13:12,880
such as common vulnerabilities and

00:13:11,680 --> 00:13:14,880
exposures

00:13:12,880 --> 00:13:16,639
or those you choose to define for the

00:13:14,880 --> 00:13:18,880
assessment

00:13:16,639 --> 00:13:20,560
it will also be coupled with assessment

00:13:18,880 --> 00:13:24,240
targets that use the tags

00:13:20,560 --> 00:13:24,240
aws ami candidate

00:13:25,040 --> 00:13:28,639
now that aws inspector is running the

00:13:27,839 --> 00:13:31,680
assessment

00:13:28,639 --> 00:13:33,200
ideally now as recommended we wait

00:13:31,680 --> 00:13:35,040
we can include a wastage within

00:13:33,200 --> 00:13:36,000
spinnaker to wait until the results are

00:13:35,040 --> 00:13:38,399
complete

00:13:36,000 --> 00:13:39,440
after that we will run another web hook

00:13:38,399 --> 00:13:41,680
but this time

00:13:39,440 --> 00:13:43,440
we can simply use a get method to get on

00:13:41,680 --> 00:13:44,959
the status of assessment

00:13:43,440 --> 00:13:47,040
this web hook will be similarly

00:13:44,959 --> 00:13:47,840
configured with the same network rules

00:13:47,040 --> 00:13:49,600
and the api key

00:13:47,840 --> 00:13:51,040
[Music]

00:13:49,600 --> 00:13:53,920
we'll also go through the same flow of

00:13:51,040 --> 00:13:56,399
api gateway to aws lambda to aws

00:13:53,920 --> 00:13:58,560
inspector for the reports

00:13:56,399 --> 00:14:00,079
it is important for the lambda logic to

00:13:58,560 --> 00:14:01,199
include searching for specific

00:14:00,079 --> 00:14:02,959
assessments

00:14:01,199 --> 00:14:04,880
in other words if there are multiple

00:14:02,959 --> 00:14:06,240
pipelines running or even an existing

00:14:04,880 --> 00:14:07,199
assessment that's not complete

00:14:06,240 --> 00:14:10,959
make sure to take that into

00:14:07,199 --> 00:14:10,959
consideration add that to the logic

00:14:11,440 --> 00:14:16,720
here here is an example of the

00:14:14,639 --> 00:14:18,320
assessment report

00:14:16,720 --> 00:14:19,680
this is a very lightweight ami that i'm

00:14:18,320 --> 00:14:23,199
being used here to better show the

00:14:19,680 --> 00:14:23,199
in-depth vulnerability assessments

00:14:24,160 --> 00:14:28,959
the rules packages used in this case are

00:14:26,320 --> 00:14:32,079
common vulnerabilities and exposures

00:14:28,959 --> 00:14:33,760
network reachability cis os security

00:14:32,079 --> 00:14:37,440
configuration benchmarks

00:14:33,760 --> 00:14:37,440
and security best practices

00:14:41,839 --> 00:14:45,199
this is the only manual step of the

00:14:43,680 --> 00:14:46,560
golden ami pipeline

00:14:45,199 --> 00:14:48,399
which can be done with the manual

00:14:46,560 --> 00:14:50,959
judgment stage

00:14:48,399 --> 00:14:53,440
but we can simply set up notification

00:14:50,959 --> 00:14:55,440
rules defined within spinnaker

00:14:53,440 --> 00:14:57,440
the approval stage implies due diligence

00:14:55,440 --> 00:14:59,440
on the engineer to actually review the

00:14:57,440 --> 00:15:01,279
reports and findings discovered by ada

00:14:59,440 --> 00:15:04,560
business inspector

00:15:01,279 --> 00:15:06,800
the ami is approved we will tag the ami

00:15:04,560 --> 00:15:08,720
as the golden ami approved you can use

00:15:06,800 --> 00:15:10,800
custom stages to run a script

00:15:08,720 --> 00:15:12,560
to simply publish this ami id into a

00:15:10,800 --> 00:15:15,199
list of approved

00:15:12,560 --> 00:15:16,000
if the ami is denied we will tag the ami

00:15:15,199 --> 00:15:17,120
is denied

00:15:16,000 --> 00:15:19,040
and to make sure that it does not

00:15:17,120 --> 00:15:21,040
accidentally get used we can also

00:15:19,040 --> 00:15:24,320
include a cleanup stage to delete any

00:15:21,040 --> 00:15:25,920
instances and the ami itself

00:15:24,320 --> 00:15:27,760
one way to improve on the automation

00:15:25,920 --> 00:15:28,240
stage on this particular automation

00:15:27,760 --> 00:15:30,000
stage

00:15:28,240 --> 00:15:31,920
the future is that the assessment

00:15:30,000 --> 00:15:33,920
reports can be consumed as a data

00:15:31,920 --> 00:15:36,959
interchange format such as json

00:15:33,920 --> 00:15:38,880
instead of pdf or html this way there

00:15:36,959 --> 00:15:42,240
can be an automated response based on

00:15:38,880 --> 00:15:42,240
number of findings for example

00:15:43,279 --> 00:15:47,920
as a result with this spinnaker solution

00:15:46,079 --> 00:15:50,560
you can now walk away from this panel

00:15:47,920 --> 00:15:53,120
having developed a golden ami pipeline

00:15:50,560 --> 00:15:55,680
that's automated and reusable

00:15:53,120 --> 00:15:57,440
having golden amis that are secure and

00:15:55,680 --> 00:15:58,720
hardened and ready for business units to

00:15:57,440 --> 00:16:00,720
deploy with

00:15:58,720 --> 00:16:02,880
and being able to meet compliance and

00:16:00,720 --> 00:16:06,800
satisfy auditing needs from the use

00:16:02,880 --> 00:16:06,800
of up-to-date scanning standards

00:16:06,880 --> 00:16:10,079
here's some of the following sources and

00:16:08,399 --> 00:16:10,800
case studies that aws publish if you'd

00:16:10,079 --> 00:16:13,839
like to

00:16:10,800 --> 00:16:15,519
have further in-depth reading

00:16:13,839 --> 00:16:18,730
thank you so much for watching please

00:16:15,519 --> 00:16:20,839
feel free to reach out if you have any

00:16:18,730 --> 00:16:23,839
[Music]

00:16:20,839 --> 00:16:23,839

YouTube URL: https://www.youtube.com/watch?v=EW0sgeqLdZM


