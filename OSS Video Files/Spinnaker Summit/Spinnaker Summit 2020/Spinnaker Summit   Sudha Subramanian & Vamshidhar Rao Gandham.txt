Title: Spinnaker Summit   Sudha Subramanian & Vamshidhar Rao Gandham
Publication date: 2021-01-16
Playlist: Spinnaker Summit 2020
Description: 
	Would you like to get a peek into how salesforce is leveraging Spinnaker and our road ahead? Would you like to also learn about cost efficiency on public substrates and be able to provide developers the agility to move fast with the right guard rails using open policy agent (OPA)? Watch this talk to learn more about salesforceâ€™s Journey with Spinnaker.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:06,160 --> 00:00:10,719
hello everyone

00:00:07,279 --> 00:00:13,519
my name is and i'm with wangshi

00:00:10,719 --> 00:00:14,160
gundam today we would like to share our

00:00:13,519 --> 00:00:16,480
journey

00:00:14,160 --> 00:00:18,560
around some of the work we have done in

00:00:16,480 --> 00:00:20,960
pipeline templatization

00:00:18,560 --> 00:00:23,439
release management and orchestration

00:00:20,960 --> 00:00:25,039
cost optimizations for the club

00:00:23,439 --> 00:00:26,640
and also share a little bit of our

00:00:25,039 --> 00:00:29,599
future mid to

00:00:26,640 --> 00:00:30,080
long term plans with spinnaker we are

00:00:29,599 --> 00:00:32,320
hoping

00:00:30,080 --> 00:00:33,520
that you will get some tidbits useful

00:00:32,320 --> 00:00:35,520
information

00:00:33,520 --> 00:00:36,559
ideas especially if you are starting out

00:00:35,520 --> 00:00:41,280
new

00:00:36,559 --> 00:00:41,280
and thanks for joining our session today

00:00:43,680 --> 00:00:48,239
spinnaker has evolved a lot in the last

00:00:46,000 --> 00:00:49,039
two years since we embarked on our cloud

00:00:48,239 --> 00:00:51,760
journey

00:00:49,039 --> 00:00:52,320
i'm a part of a team in salesforce that

00:00:51,760 --> 00:00:55,199
runs

00:00:52,320 --> 00:00:55,520
and manages this platform for 20 000

00:00:55,199 --> 00:00:57,440
plus

00:00:55,520 --> 00:00:59,120
engineers that use it on an everyday

00:00:57,440 --> 00:01:00,640
basis to deploy

00:00:59,120 --> 00:01:02,399
their application across multiple

00:01:00,640 --> 00:01:04,559
different clouds

00:01:02,399 --> 00:01:06,960
we have dedicated teams focused on

00:01:04,559 --> 00:01:10,640
different aspects of the platform

00:01:06,960 --> 00:01:13,119
and my team is primarily responsible

00:01:10,640 --> 00:01:15,040
for the user experience starting from

00:01:13,119 --> 00:01:17,840
onboarding to the platform

00:01:15,040 --> 00:01:19,439
pipeline templatization and composition

00:01:17,840 --> 00:01:21,840
work

00:01:19,439 --> 00:01:25,680
release management and orchestration we

00:01:21,840 --> 00:01:29,040
also do cost optimizations for the cloud

00:01:25,680 --> 00:01:31,840
there is also a talk from an architect

00:01:29,040 --> 00:01:34,159
edgar magana for the service team he's

00:01:31,840 --> 00:01:38,000
talking on spinnaker so please do listen

00:01:34,159 --> 00:01:38,000
to the session if you get an opportunity

00:01:39,600 --> 00:01:43,920
so i'd like to start by giving some

00:01:41,280 --> 00:01:44,399
context around the landscape we operate

00:01:43,920 --> 00:01:46,960
in

00:01:44,399 --> 00:01:49,520
because it is different in some ways

00:01:46,960 --> 00:01:52,479
some of our problems may be unique to us

00:01:49,520 --> 00:01:54,320
because of our scale and complexity of

00:01:52,479 --> 00:01:56,479
our requirements

00:01:54,320 --> 00:01:58,560
however i still feel there are large set

00:01:56,479 --> 00:02:00,640
of problems that can be applicable to

00:01:58,560 --> 00:02:03,119
any enterprise skill company that is

00:02:00,640 --> 00:02:05,600
using smacker

00:02:03,119 --> 00:02:06,799
first and foremost our environments and

00:02:05,600 --> 00:02:09,280
our services

00:02:06,799 --> 00:02:10,080
are defined in what we call as a bill of

00:02:09,280 --> 00:02:13,040
material

00:02:10,080 --> 00:02:14,160
manifest file environments to us is a

00:02:13,040 --> 00:02:16,239
logical grouping

00:02:14,160 --> 00:02:18,160
within which a service operates and they

00:02:16,239 --> 00:02:21,599
are differentiated by

00:02:18,160 --> 00:02:25,120
the capabilities their limitations

00:02:21,599 --> 00:02:27,760
the level of support and also

00:02:25,120 --> 00:02:29,360
the access control that you get for

00:02:27,760 --> 00:02:30,800
these different environments

00:02:29,360 --> 00:02:32,640
pretty much everything that we do

00:02:30,800 --> 00:02:35,840
including pipeline creation

00:02:32,640 --> 00:02:38,080
to hydration happens through this

00:02:35,840 --> 00:02:40,400
bonfire

00:02:38,080 --> 00:02:43,840
the second biggest differentiator is the

00:02:40,400 --> 00:02:46,080
number of personas that uses spinnaker

00:02:43,840 --> 00:02:48,480
engineers they develop code and they

00:02:46,080 --> 00:02:50,800
test it in an r d environment

00:02:48,480 --> 00:02:52,640
apart from that we have release teams

00:02:50,800 --> 00:02:55,200
for different business units

00:02:52,640 --> 00:02:57,040
that are primarily responsible for

00:02:55,200 --> 00:02:59,840
managing and releasing changes

00:02:57,040 --> 00:03:00,800
to production we have site reliability

00:02:59,840 --> 00:03:03,280
engineers

00:03:00,800 --> 00:03:05,360
service engineers that get called to

00:03:03,280 --> 00:03:07,599
handle emergency responses

00:03:05,360 --> 00:03:09,760
now these teams require a cross

00:03:07,599 --> 00:03:13,599
application or a cross service view

00:03:09,760 --> 00:03:15,680
across different environments unlike the

00:03:13,599 --> 00:03:17,680
application specific view that spinach

00:03:15,680 --> 00:03:19,840
offers today

00:03:17,680 --> 00:03:21,280
so are our business owners who are

00:03:19,840 --> 00:03:22,800
interested in the state of world for the

00:03:21,280 --> 00:03:24,959
entire business

00:03:22,800 --> 00:03:27,120
we have built teams that are responsible

00:03:24,959 --> 00:03:29,280
for building environments

00:03:27,120 --> 00:03:30,879
now these different each of these

00:03:29,280 --> 00:03:33,920
different personas

00:03:30,879 --> 00:03:35,040
they use spinnaker differently for

00:03:33,920 --> 00:03:36,879
different needs

00:03:35,040 --> 00:03:38,560
and we need to cater to all their

00:03:36,879 --> 00:03:41,920
requirements and

00:03:38,560 --> 00:03:42,879
needs this leads us to our next big

00:03:41,920 --> 00:03:45,519
differentiator

00:03:42,879 --> 00:03:46,640
which is our release workflow they are

00:03:45,519 --> 00:03:48,720
complex

00:03:46,640 --> 00:03:49,680
services have multiple different

00:03:48,720 --> 00:03:52,640
components

00:03:49,680 --> 00:03:55,040
with slightly different requirements for

00:03:52,640 --> 00:03:57,280
ordering and sequencing

00:03:55,040 --> 00:03:58,560
some services have mutual exclusion

00:03:57,280 --> 00:04:00,640
constraints

00:03:58,560 --> 00:04:02,080
with other services meaning we need to

00:04:00,640 --> 00:04:03,840
provide some kind of a locking

00:04:02,080 --> 00:04:05,439
constraints in our workflow

00:04:03,840 --> 00:04:08,080
there are some services that need to be

00:04:05,439 --> 00:04:09,280
deployed on specific days of the week

00:04:08,080 --> 00:04:11,760
which means we need to support

00:04:09,280 --> 00:04:14,480
long-running workflows we also

00:04:11,760 --> 00:04:16,320
want to provide a way where releases are

00:04:14,480 --> 00:04:18,400
gradually

00:04:16,320 --> 00:04:20,880
done across these environments in order

00:04:18,400 --> 00:04:24,479
to reduce the blast radius and failure

00:04:20,880 --> 00:04:28,000
rates our next biggest differentiator

00:04:24,479 --> 00:04:30,320
is our scale we have close to

00:04:28,000 --> 00:04:31,840
two thousand applications more than

00:04:30,320 --> 00:04:32,240
seventy thousand pipelines and we're

00:04:31,840 --> 00:04:35,280
doing

00:04:32,240 --> 00:04:36,560
over two million executions in a month

00:04:35,280 --> 00:04:38,400
and we're just beginning

00:04:36,560 --> 00:04:40,000
we have pipelines that does various

00:04:38,400 --> 00:04:42,639
different things like

00:04:40,000 --> 00:04:43,759
deploying applications destroying

00:04:42,639 --> 00:04:45,360
services

00:04:43,759 --> 00:04:48,080
creating resources like kubernetes

00:04:45,360 --> 00:04:49,840
clusters destroying resources

00:04:48,080 --> 00:04:51,199
utility pipelines for one-off

00:04:49,840 --> 00:04:52,160
maintenance job like if you want to

00:04:51,199 --> 00:04:55,199
create your

00:04:52,160 --> 00:04:57,680
cdo database but the best part is

00:04:55,199 --> 00:05:00,639
for some of these use cases we have been

00:04:57,680 --> 00:05:03,600
able to successfully extend spinnaker

00:05:00,639 --> 00:05:05,520
or provide use cases around it but

00:05:03,600 --> 00:05:08,000
spinnaker is still being the heart of

00:05:05,520 --> 00:05:09,919
everything that we do

00:05:08,000 --> 00:05:12,240
with that context i would like to talk a

00:05:09,919 --> 00:05:15,759
little bit about

00:05:12,240 --> 00:05:18,240
journey through pipeline templating

00:05:15,759 --> 00:05:20,639
when we started two years ago there was

00:05:18,240 --> 00:05:22,800
no native pipeline templating support

00:05:20,639 --> 00:05:24,560
mptv2 was just starting what was the

00:05:22,800 --> 00:05:26,880
mason stages so we

00:05:24,560 --> 00:05:29,360
rolled out our own templating processor

00:05:26,880 --> 00:05:31,440
which runs as a pipeline in spinnaker

00:05:29,360 --> 00:05:32,560
and it creates other pipelines from

00:05:31,440 --> 00:05:35,440
templates

00:05:32,560 --> 00:05:36,000
that are delivered to s3 buckets we use

00:05:35,440 --> 00:05:39,199
ginger

00:05:36,000 --> 00:05:40,160
as our templating language and over a

00:05:39,199 --> 00:05:42,400
period of time

00:05:40,160 --> 00:05:44,000
when our environment started growing so

00:05:42,400 --> 00:05:47,280
are developers

00:05:44,000 --> 00:05:50,720
for every service that we add today

00:05:47,280 --> 00:05:53,919
we create about three or four

00:05:50,720 --> 00:05:55,759
pipelines per region and these pipelines

00:05:53,919 --> 00:05:57,919
are different pipeline types

00:05:55,759 --> 00:05:59,360
we have a pipeline type for deploying we

00:05:57,919 --> 00:06:02,080
have a type for destroying

00:05:59,360 --> 00:06:03,759
services in asg groups we have a type

00:06:02,080 --> 00:06:06,639
for creating

00:06:03,759 --> 00:06:07,440
resources or destroying resources we

00:06:06,639 --> 00:06:09,440
have a baking

00:06:07,440 --> 00:06:10,880
uh type pipeline for creating vms for

00:06:09,440 --> 00:06:12,720
ac2 workloads

00:06:10,880 --> 00:06:15,360
we also have utility pipeline for

00:06:12,720 --> 00:06:19,039
maintenance jobs

00:06:15,360 --> 00:06:20,479
in we needed a way to somehow manage all

00:06:19,039 --> 00:06:24,800
these templates

00:06:20,479 --> 00:06:28,319
and and uh make changes to them so

00:06:24,800 --> 00:06:30,800
we came up with a library of stages

00:06:28,319 --> 00:06:33,600
which were which are versioned our

00:06:30,800 --> 00:06:37,919
pipelines are composed using the stage

00:06:33,600 --> 00:06:39,360
library so that way it is easy for us to

00:06:37,919 --> 00:06:42,800
force a change

00:06:39,360 --> 00:06:45,680
to the template by changing the library

00:06:42,800 --> 00:06:46,560
so not only templates even pipelines and

00:06:45,680 --> 00:06:49,280
spinnaker

00:06:46,560 --> 00:06:50,000
are versioned using labels that are

00:06:49,280 --> 00:06:52,880
mapped to a

00:06:50,000 --> 00:06:53,680
custom commercial we generate the custom

00:06:52,880 --> 00:06:55,680
commercial

00:06:53,680 --> 00:06:57,039
by taking a snapshot of the entire

00:06:55,680 --> 00:06:59,039
pipeline hierarchy

00:06:57,039 --> 00:07:00,160
by default pipelines are created with

00:06:59,039 --> 00:07:02,960
the latest label

00:07:00,160 --> 00:07:05,680
but engineers can always add more as

00:07:02,960 --> 00:07:05,680
they see they need

00:07:07,599 --> 00:07:11,120
so did it work it did but there are some

00:07:10,240 --> 00:07:14,639
challenges

00:07:11,120 --> 00:07:17,199
with templating any new tooling that we

00:07:14,639 --> 00:07:20,240
add or introduce to developers to a set

00:07:17,199 --> 00:07:23,520
it is going to slow adoption and jinja

00:07:20,240 --> 00:07:26,720
is definitely not fun to learn

00:07:23,520 --> 00:07:28,639
in spite of all the great versioning and

00:07:26,720 --> 00:07:29,520
library mechanism that we developed over

00:07:28,639 --> 00:07:31,440
templates

00:07:29,520 --> 00:07:32,720
it is still difficult for us to push

00:07:31,440 --> 00:07:34,800
changes

00:07:32,720 --> 00:07:37,120
because some of our developers have

00:07:34,800 --> 00:07:40,160
really customized their templates

00:07:37,120 --> 00:07:41,680
and use the power of jinja making it

00:07:40,160 --> 00:07:42,800
very hard for us to upgrade their

00:07:41,680 --> 00:07:44,560
templates

00:07:42,800 --> 00:07:45,840
the second biggest challenge is with the

00:07:44,560 --> 00:07:48,479
processor which runs

00:07:45,840 --> 00:07:51,199
as a spinnaker pipeline and it uses the

00:07:48,479 --> 00:07:53,280
spinnaker api to create these templates

00:07:51,199 --> 00:07:54,560
sequentially that's a lot of scale and

00:07:53,280 --> 00:07:57,120
latency issues

00:07:54,560 --> 00:07:58,240
so we're moving away from that model and

00:07:57,120 --> 00:08:01,039
making this

00:07:58,240 --> 00:08:01,919
processor a separate micro service of

00:08:01,039 --> 00:08:04,080
its own

00:08:01,919 --> 00:08:05,840
we are also adding bulk api support to

00:08:04,080 --> 00:08:08,560
create templates in order to address our

00:08:05,840 --> 00:08:08,560
scale needs

00:08:11,520 --> 00:08:16,560
so where we want to get to is we want to

00:08:14,800 --> 00:08:17,759
provide a higher level of abstraction

00:08:16,560 --> 00:08:21,199
for 80

00:08:17,759 --> 00:08:24,319
of the use cases and expose

00:08:21,199 --> 00:08:27,120
templating only for power users we also

00:08:24,319 --> 00:08:30,160
want to get to a service manifest based

00:08:27,120 --> 00:08:31,919
definition which is based off on a

00:08:30,160 --> 00:08:33,760
common set of archetypes

00:08:31,919 --> 00:08:37,120
that we need to support for our use

00:08:33,760 --> 00:08:37,120
cases in salesforce

00:08:38,479 --> 00:08:43,360
with that i would like to talk

00:08:41,519 --> 00:08:46,160
about our journey through the release

00:08:43,360 --> 00:08:48,399
workflow it is very similar to our

00:08:46,160 --> 00:08:49,920
pipeline templating journey at the

00:08:48,399 --> 00:08:50,720
beginning we only had a single

00:08:49,920 --> 00:08:53,360
environment

00:08:50,720 --> 00:08:55,360
so users were either using spinnaker ui

00:08:53,360 --> 00:08:57,120
to trigger the deployments manually

00:08:55,360 --> 00:08:58,959
or deployments were triggered on

00:08:57,120 --> 00:09:02,320
delivery of artifacts like

00:08:58,959 --> 00:09:03,519
helm charts and docker images but as our

00:09:02,320 --> 00:09:05,680
environments

00:09:03,519 --> 00:09:06,720
started growing and spanning multiple

00:09:05,680 --> 00:09:09,040
regions

00:09:06,720 --> 00:09:09,920
triggering through ui was not an option

00:09:09,040 --> 00:09:12,160
anymore

00:09:09,920 --> 00:09:13,600
we also wanted to progressively deploy

00:09:12,160 --> 00:09:14,800
across these various different

00:09:13,600 --> 00:09:18,320
environments

00:09:14,800 --> 00:09:19,519
in order to make ensure a safe rollout

00:09:18,320 --> 00:09:21,519
this is where i would like to

00:09:19,519 --> 00:09:23,040
distinguish between a release and a

00:09:21,519 --> 00:09:25,040
deploy

00:09:23,040 --> 00:09:27,279
a release could be related to any kind

00:09:25,040 --> 00:09:31,519
of change not necessarily deployment

00:09:27,279 --> 00:09:33,040
it could be creating a resource or it

00:09:31,519 --> 00:09:35,760
could be some maintenance job that you

00:09:33,040 --> 00:09:37,680
do across these environments

00:09:35,760 --> 00:09:39,120
and there are several orthogonal aspects

00:09:37,680 --> 00:09:41,600
around the release like promotion

00:09:39,120 --> 00:09:44,720
criteria across these environments

00:09:41,600 --> 00:09:45,680
service interdependencies long-running

00:09:44,720 --> 00:09:49,600
workflows

00:09:45,680 --> 00:09:53,120
scheduling releases in order to

00:09:49,600 --> 00:09:56,480
say patch your vms that release requires

00:09:53,120 --> 00:09:56,480
its own distinction

00:09:58,320 --> 00:10:03,120
so in order for us to be able to

00:10:00,800 --> 00:10:04,800
gradually release a change across these

00:10:03,120 --> 00:10:07,040
two different environments

00:10:04,800 --> 00:10:08,480
we created what we call as a wrapper or

00:10:07,040 --> 00:10:11,200
a master pipeline

00:10:08,480 --> 00:10:13,040
that aggregated unit pipelines across

00:10:11,200 --> 00:10:16,839
these different environments starting

00:10:13,040 --> 00:10:18,880
with death then stage test stage and

00:10:16,839 --> 00:10:20,959
production

00:10:18,880 --> 00:10:22,079
the pipeline was triggered using a

00:10:20,959 --> 00:10:24,000
manifest file

00:10:22,079 --> 00:10:25,600
that developers would create and check

00:10:24,000 --> 00:10:28,720
into

00:10:25,600 --> 00:10:30,000
git which would then be made available

00:10:28,720 --> 00:10:32,880
in an s3 bucket

00:10:30,000 --> 00:10:34,480
the manifest file contained the artifact

00:10:32,880 --> 00:10:36,640
and pipeline parameter

00:10:34,480 --> 00:10:37,600
and other parameter overrides across for

00:10:36,640 --> 00:10:40,079
the different uh

00:10:37,600 --> 00:10:40,959
regions while the master pipeline

00:10:40,079 --> 00:10:42,800
defined the

00:10:40,959 --> 00:10:45,200
how or the route the release workflow

00:10:42,800 --> 00:10:45,920
will take the manifest file for us

00:10:45,200 --> 00:10:48,399
define

00:10:45,920 --> 00:10:48,399
the what

00:10:50,079 --> 00:10:53,279
did it work it did but there are some

00:10:52,240 --> 00:10:55,279
challenges

00:10:53,279 --> 00:10:58,079
master pipeline or the wrapper pipeline

00:10:55,279 --> 00:11:00,320
is very static in nature and services

00:10:58,079 --> 00:11:01,360
wanted a different way to orchestrate

00:11:00,320 --> 00:11:02,720
their releases

00:11:01,360 --> 00:11:04,880
some services wanted to do a

00:11:02,720 --> 00:11:06,480
percentage-based role or some services

00:11:04,880 --> 00:11:10,399
wanted their release flow

00:11:06,480 --> 00:11:12,640
to be to to start on a

00:11:10,399 --> 00:11:14,000
external event and some of these

00:11:12,640 --> 00:11:17,040
constructs are very difficult

00:11:14,000 --> 00:11:18,079
to express through pipelines also the ui

00:11:17,040 --> 00:11:22,160
was cumbersome

00:11:18,079 --> 00:11:22,160
with such huge pipeline graphs

00:11:22,640 --> 00:11:26,800
both in terms of user experience also in

00:11:25,200 --> 00:11:28,320
terms of

00:11:26,800 --> 00:11:31,529
performance it was not good

00:11:28,320 --> 00:11:31,529
[Music]

00:11:32,160 --> 00:11:37,200
so where we want to get to is we want to

00:11:38,399 --> 00:11:42,240
go with a release we want to we want to

00:11:40,480 --> 00:11:44,640
provide a release

00:11:42,240 --> 00:11:46,880
manifest based definition that will not

00:11:44,640 --> 00:11:49,519
create these master pipelines

00:11:46,880 --> 00:11:51,279
but would dynamically orchestrate the

00:11:49,519 --> 00:11:54,399
unit pipelines

00:11:51,279 --> 00:11:56,880
uh based on a manifest file

00:11:54,399 --> 00:11:58,959
so users will be able to create multiple

00:11:56,880 --> 00:12:02,399
such release workflow templates

00:11:58,959 --> 00:12:04,240
for different use cases

00:12:02,399 --> 00:12:06,800
and such an orchestration service will

00:12:04,240 --> 00:12:11,040
also provide an ability for

00:12:06,800 --> 00:12:13,200
users to create dynamic release flows

00:12:11,040 --> 00:12:14,560
and it will also make it easy for us to

00:12:13,200 --> 00:12:17,440
add these complex

00:12:14,560 --> 00:12:18,079
use cases to the service which we cannot

00:12:17,440 --> 00:12:20,880
do it

00:12:18,079 --> 00:12:20,880
through a pipeline

00:12:23,680 --> 00:12:28,160
so this is by no means the complete list

00:12:27,279 --> 00:12:30,399
we are making

00:12:28,160 --> 00:12:31,600
several losses contributions across our

00:12:30,399 --> 00:12:34,399
different uh

00:12:31,600 --> 00:12:35,920
teams in our org and we'll continue to

00:12:34,399 --> 00:12:38,560
do so in the future as well

00:12:35,920 --> 00:12:38,959
uh working closely with the community

00:12:38,560 --> 00:12:40,880
and

00:12:38,959 --> 00:12:42,480
uh with that i would like to turn it

00:12:40,880 --> 00:12:44,720
over to vamshi

00:12:42,480 --> 00:12:46,079
to talk about the cost optimization work

00:12:44,720 --> 00:12:49,760
that we are doing

00:12:46,079 --> 00:12:52,639
thank you um thank you sudha

00:12:49,760 --> 00:12:53,440
and good afternoon everybody my name is

00:12:52,639 --> 00:12:56,160
swamshi

00:12:53,440 --> 00:12:57,519
and i work in the spinoff group here at

00:12:56,160 --> 00:13:00,000
salesforce

00:12:57,519 --> 00:13:00,959
working on a couple of different aspects

00:13:00,000 --> 00:13:03,839
related to

00:13:00,959 --> 00:13:05,680
increasing cost awareness and some of

00:13:03,839 --> 00:13:08,720
the roadmap items related to

00:13:05,680 --> 00:13:11,120
cost optimization so

00:13:08,720 --> 00:13:11,839
in this next couple of slides i'll be

00:13:11,120 --> 00:13:14,880
taking you

00:13:11,839 --> 00:13:15,279
through providing an overview of how we

00:13:14,880 --> 00:13:17,279
do

00:13:15,279 --> 00:13:19,680
the cost awareness and cost optimization

00:13:17,279 --> 00:13:22,639
here at salesforce on public substrates

00:13:19,680 --> 00:13:23,200
and look into those aspects a bit more

00:13:22,639 --> 00:13:25,519
detail

00:13:23,200 --> 00:13:27,600
with some of the code walkthrough so

00:13:25,519 --> 00:13:31,120
cost optimization as we all know

00:13:27,600 --> 00:13:34,160
is one of the five key pillars of

00:13:31,120 --> 00:13:35,519
aws well architected framework that

00:13:34,160 --> 00:13:37,200
includes

00:13:35,519 --> 00:13:38,880
operational excellence security

00:13:37,200 --> 00:13:41,040
reliability and

00:13:38,880 --> 00:13:42,000
performance efficiency so we will

00:13:41,040 --> 00:13:44,320
discuss uh

00:13:42,000 --> 00:13:45,360
summary of the tools techniques and best

00:13:44,320 --> 00:13:47,120
practices

00:13:45,360 --> 00:13:48,959
that can help us to you know accomplish

00:13:47,120 --> 00:13:52,160
these things

00:13:48,959 --> 00:13:52,720
so kind of like looking at a very high

00:13:52,160 --> 00:13:55,760
level

00:13:52,720 --> 00:13:57,680
uh some of the design principles that

00:13:55,760 --> 00:14:00,000
help us to kind of like

00:13:57,680 --> 00:14:00,720
frame our aspects around cost

00:14:00,000 --> 00:14:03,920
optimization

00:14:00,720 --> 00:14:06,480
include investing into a

00:14:03,920 --> 00:14:09,279
cloud financial management particularly

00:14:06,480 --> 00:14:12,560
around making conscious decisions to

00:14:09,279 --> 00:14:13,440
invest into resources and time that will

00:14:12,560 --> 00:14:16,560
enable

00:14:13,440 --> 00:14:18,639
us to accomplish these outcomes

00:14:16,560 --> 00:14:20,160
and in addition to that also kind of

00:14:18,639 --> 00:14:23,279
like adopting a specific

00:14:20,160 --> 00:14:25,120
consumption model that could help with

00:14:23,279 --> 00:14:27,760
you know paying for resources that you

00:14:25,120 --> 00:14:29,199
consume versus eliminating the waste

00:14:27,760 --> 00:14:31,199
in terms of the resources that you may

00:14:29,199 --> 00:14:34,639
not be using or you may not be

00:14:31,199 --> 00:14:35,279
using them efficiently so that also

00:14:34,639 --> 00:14:37,920
involves

00:14:35,279 --> 00:14:40,639
aspect of measuring your return of

00:14:37,920 --> 00:14:43,680
investment versus gains from

00:14:40,639 --> 00:14:47,040
increasing your output functionality

00:14:43,680 --> 00:14:50,560
reducing cost in terms of

00:14:47,040 --> 00:14:53,839
having an effective overall efficiency

00:14:50,560 --> 00:14:56,160
and the other aspect that kind of like

00:14:53,839 --> 00:14:58,399
also helps us in this area is kind of

00:14:56,160 --> 00:15:00,560
like focusing on business projects

00:14:58,399 --> 00:15:02,880
by leveraging the heavy lifting that's

00:15:00,560 --> 00:15:04,079
done by aws for the data center

00:15:02,880 --> 00:15:06,399
operations

00:15:04,079 --> 00:15:07,279
versus you know stop spending on money

00:15:06,399 --> 00:15:11,120
that is you know

00:15:07,279 --> 00:15:14,079
undifferentiated heavy lifting costs

00:15:11,120 --> 00:15:15,199
this also includes aspects around

00:15:14,079 --> 00:15:17,360
identifying

00:15:15,199 --> 00:15:18,480
your costs for individual services that

00:15:17,360 --> 00:15:20,639
you might be

00:15:18,480 --> 00:15:22,480
consuming on a public substrate and

00:15:20,639 --> 00:15:24,399
attributing those costs and workload

00:15:22,480 --> 00:15:26,160
usage to individual service owners

00:15:24,399 --> 00:15:29,680
within your organization

00:15:26,160 --> 00:15:32,000
to help them measure and also

00:15:29,680 --> 00:15:33,759
champion the aspects around cost

00:15:32,000 --> 00:15:36,800
optimization

00:15:33,759 --> 00:15:39,279
so with that if you kind of like now

00:15:36,800 --> 00:15:40,560
distill down a bit more deeper into the

00:15:39,279 --> 00:15:42,800
next level

00:15:40,560 --> 00:15:44,720
um this brings us aspects around what

00:15:42,800 --> 00:15:46,320
are some of those best practices

00:15:44,720 --> 00:15:49,360
that we could you know kind of like

00:15:46,320 --> 00:15:51,120
adapt engage and evolve out of those

00:15:49,360 --> 00:15:54,160
so particularly around cloud financial

00:15:51,120 --> 00:15:57,120
management there are aspects around

00:15:54,160 --> 00:15:58,639
establishing as i mentioned a specific

00:15:57,120 --> 00:16:01,360
function or a team

00:15:58,639 --> 00:16:02,240
that is focused on building the tooling

00:16:01,360 --> 00:16:04,399
automation

00:16:02,240 --> 00:16:06,560
and increasing awareness aspects around

00:16:04,399 --> 00:16:10,639
that so that's a key important

00:16:06,560 --> 00:16:12,959
fundamental step and also this also

00:16:10,639 --> 00:16:15,360
includes

00:16:12,959 --> 00:16:17,040
partnering closely with your finance

00:16:15,360 --> 00:16:18,560
team the technology teams and finance

00:16:17,040 --> 00:16:20,880
teams need to collaborate

00:16:18,560 --> 00:16:22,000
closely to kind of like establish all

00:16:20,880 --> 00:16:25,839
the different aspects

00:16:22,000 --> 00:16:28,079
around budgeting forecasting

00:16:25,839 --> 00:16:29,279
and aspects related to capacity

00:16:28,079 --> 00:16:32,639
management

00:16:29,279 --> 00:16:34,399
so that would also kind of like bring in

00:16:32,639 --> 00:16:37,519
aspects related to

00:16:34,399 --> 00:16:39,600
bringing in cost aware processes and

00:16:37,519 --> 00:16:41,279
integration say for example

00:16:39,600 --> 00:16:43,759
your change management process or say

00:16:41,279 --> 00:16:46,000
you're monitoring um

00:16:43,759 --> 00:16:47,680
end-to-end service could also be an

00:16:46,000 --> 00:16:49,600
additional added lens

00:16:47,680 --> 00:16:51,519
to bring in some additional visibility

00:16:49,600 --> 00:16:55,040
to these aspects around

00:16:51,519 --> 00:16:57,040
the cost and last but not the least

00:16:55,040 --> 00:16:58,160
there is also an element of cultural

00:16:57,040 --> 00:17:00,240
transformation

00:16:58,160 --> 00:17:01,360
wherein the service owners the

00:17:00,240 --> 00:17:04,880
individual

00:17:01,360 --> 00:17:07,760
scrum teams are also equally responsible

00:17:04,880 --> 00:17:09,199
for kind of like driving this particular

00:17:07,760 --> 00:17:11,679
thing by championing the cost

00:17:09,199 --> 00:17:14,959
optimization

00:17:11,679 --> 00:17:15,280
so the next element um that's kind of

00:17:14,959 --> 00:17:18,799
like

00:17:15,280 --> 00:17:21,360
more involved is more more around

00:17:18,799 --> 00:17:22,559
the cost-effective resources so this

00:17:21,360 --> 00:17:24,160
could be either

00:17:22,559 --> 00:17:26,160
looking into aspects related to

00:17:24,160 --> 00:17:28,720
selecting the correct resource type or a

00:17:26,160 --> 00:17:31,280
size or the number of resources

00:17:28,720 --> 00:17:32,240
so that also involves again at a broader

00:17:31,280 --> 00:17:34,080
level high level

00:17:32,240 --> 00:17:35,679
selecting the best pricing model among

00:17:34,080 --> 00:17:38,320
all the different pricing models that a

00:17:35,679 --> 00:17:41,120
cloud provider might be providing you

00:17:38,320 --> 00:17:42,160
and the other interesting aspect in

00:17:41,120 --> 00:17:44,480
terms of this is

00:17:42,160 --> 00:17:45,360
more around the data transformation so

00:17:44,480 --> 00:17:48,559
there are again

00:17:45,360 --> 00:17:51,039
aspects you could look into modeling the

00:17:48,559 --> 00:17:54,320
data transfer and how to kind of like

00:17:51,039 --> 00:17:56,320
understand those costs and optimize

00:17:54,320 --> 00:17:59,200
the costs that are incurred purely

00:17:56,320 --> 00:18:01,840
because of data transfers

00:17:59,200 --> 00:18:03,360
so the third aspect that's kind of like

00:18:01,840 --> 00:18:06,000
more around

00:18:03,360 --> 00:18:08,080
demand and supply so this involves

00:18:06,000 --> 00:18:11,120
aspects related to

00:18:08,080 --> 00:18:12,880
kind of like bullying in tools that will

00:18:11,120 --> 00:18:13,600
help you to analyze the workload

00:18:12,880 --> 00:18:17,039
analysis

00:18:13,600 --> 00:18:20,080
its efficiency demand management

00:18:17,039 --> 00:18:22,720
and also aspects related to

00:18:20,080 --> 00:18:25,919
demand based on supply like what i mean

00:18:22,720 --> 00:18:29,200
by that is more along the lines of

00:18:25,919 --> 00:18:30,480
efficiently utilizing the elasticity of

00:18:29,200 --> 00:18:33,840
the cloud

00:18:30,480 --> 00:18:34,240
by optimizing your parameters around

00:18:33,840 --> 00:18:36,640
each

00:18:34,240 --> 00:18:38,480
of the individual services so there is

00:18:36,640 --> 00:18:40,640
also an another element based on the

00:18:38,480 --> 00:18:41,440
time based supply so for example you

00:18:40,640 --> 00:18:43,679
have

00:18:41,440 --> 00:18:45,120
lower environments that are like dev or

00:18:43,679 --> 00:18:48,400
test

00:18:45,120 --> 00:18:50,400
that may not be required to run 24x7

00:18:48,400 --> 00:18:53,120
again that's a case case basis

00:18:50,400 --> 00:18:54,480
thing that varies based on a service

00:18:53,120 --> 00:18:56,720
there may be use cases where you need

00:18:54,480 --> 00:18:58,559
that 24x7 versus there may be use cases

00:18:56,720 --> 00:19:00,559
where you may not need that so those are

00:18:58,559 --> 00:19:03,039
probably elements to see how you could

00:19:00,559 --> 00:19:06,559
automatically schedule them to

00:19:03,039 --> 00:19:09,600
turn off when they are not required

00:19:06,559 --> 00:19:12,080
and on the optimization and

00:19:09,600 --> 00:19:14,080
so that's again and it's not a one-time

00:19:12,080 --> 00:19:16,080
thing it's a continuous journey

00:19:14,080 --> 00:19:17,120
and to that end it's important to also

00:19:16,080 --> 00:19:20,960
develop a

00:19:17,120 --> 00:19:23,679
review process and use that

00:19:20,960 --> 00:19:24,480
review process as a guideline to

00:19:23,679 --> 00:19:26,320
identify

00:19:24,480 --> 00:19:28,559
opportunities and implement the changes

00:19:26,320 --> 00:19:32,400
to the services to continuously

00:19:28,559 --> 00:19:34,559
optimize your services

00:19:32,400 --> 00:19:35,760
to see how it can help you to reduce

00:19:34,559 --> 00:19:38,080
costs

00:19:35,760 --> 00:19:39,280
and last but not the least this is more

00:19:38,080 --> 00:19:41,280
around the aspect of

00:19:39,280 --> 00:19:42,799
expenditure and usage awareness that

00:19:41,280 --> 00:19:44,240
includes gardens with making some

00:19:42,799 --> 00:19:46,640
policies as well as

00:19:44,240 --> 00:19:48,240
being able to look into areas around

00:19:46,640 --> 00:19:51,200
building guardrails and

00:19:48,240 --> 00:19:52,400
to that end tagging which is something

00:19:51,200 --> 00:19:54,240
that we'll discuss in the next couple of

00:19:52,400 --> 00:19:57,360
slides is more around

00:19:54,240 --> 00:19:58,960
bringing in this awareness of the cost

00:19:57,360 --> 00:20:00,799
and utilization of

00:19:58,960 --> 00:20:02,000
various different resources and how the

00:20:00,799 --> 00:20:03,440
tag how

00:20:02,000 --> 00:20:05,679
tagging the resources can help you

00:20:03,440 --> 00:20:07,520
accomplish that so let's take a look

00:20:05,679 --> 00:20:11,039
into that a little bit more

00:20:07,520 --> 00:20:13,120
deeper so in terms of tagging

00:20:11,039 --> 00:20:14,720
there could be again depending on your

00:20:13,120 --> 00:20:17,120
organization needs there could be

00:20:14,720 --> 00:20:19,200
various different use cases

00:20:17,120 --> 00:20:20,960
beyond cost attribution it could be also

00:20:19,200 --> 00:20:22,000
aspects related to concept context

00:20:20,960 --> 00:20:24,080
awareness

00:20:22,000 --> 00:20:25,840
ownership attribution and so on and so

00:20:24,080 --> 00:20:28,960
forth particularly

00:20:25,840 --> 00:20:29,760
um at salesforce um if we have to kind

00:20:28,960 --> 00:20:33,039
of like

00:20:29,760 --> 00:20:36,159
broadly categorize the various different

00:20:33,039 --> 00:20:38,159
workflows for cost attribution in terms

00:20:36,159 --> 00:20:41,200
of the various different types of

00:20:38,159 --> 00:20:42,400
workloads it could uh it could boil down

00:20:41,200 --> 00:20:45,360
to three different

00:20:42,400 --> 00:20:46,240
uh major uh provisioning channels one is

00:20:45,360 --> 00:20:48,320
the

00:20:46,240 --> 00:20:50,720
native cloud provider within spinnaker

00:20:48,320 --> 00:20:51,919
that has the capabilities to spin up

00:20:50,720 --> 00:20:53,760
resources

00:20:51,919 --> 00:20:56,320
and then again integrations with your

00:20:53,760 --> 00:20:58,320
terraform module to have terraform

00:20:56,320 --> 00:20:59,039
manage your terraform manifest to manage

00:20:58,320 --> 00:21:01,360
your

00:20:59,039 --> 00:21:02,480
resource provisioning and third is

00:21:01,360 --> 00:21:06,400
deployment of

00:21:02,480 --> 00:21:08,480
resources using something like hound to

00:21:06,400 --> 00:21:09,760
deploy your services within a kubernetes

00:21:08,480 --> 00:21:12,799
cluster so

00:21:09,760 --> 00:21:16,080
in this picture um what we can see here

00:21:12,799 --> 00:21:18,080
is um like the users are

00:21:16,080 --> 00:21:19,760
empowered to either utilize any of these

00:21:18,080 --> 00:21:20,559
three channels and we have something

00:21:19,760 --> 00:21:23,200
called as

00:21:20,559 --> 00:21:24,799
oppa open policy agent again that's an

00:21:23,200 --> 00:21:27,440
open source library which i'll

00:21:24,799 --> 00:21:29,120
get to its details uh in a minute um

00:21:27,440 --> 00:21:32,240
which is kind of like

00:21:29,120 --> 00:21:32,799
the main controller to build your god

00:21:32,240 --> 00:21:36,640
rails

00:21:32,799 --> 00:21:37,440
around what a developer could do or

00:21:36,640 --> 00:21:40,080
could not do

00:21:37,440 --> 00:21:41,679
in terms of meeting certain policies

00:21:40,080 --> 00:21:42,880
about the governance aspect we discussed

00:21:41,679 --> 00:21:45,280
a few minutes ago

00:21:42,880 --> 00:21:46,240
so all these different integrations of

00:21:45,280 --> 00:21:49,760
open policy

00:21:46,240 --> 00:21:50,960
agent either before uh hitting spinnaker

00:21:49,760 --> 00:21:53,360
runtime or during

00:21:50,960 --> 00:21:54,960
spinnaker runtime at the time of build

00:21:53,360 --> 00:21:57,039
or at the time of deploy

00:21:54,960 --> 00:21:58,400
could be performing various different

00:21:57,039 --> 00:22:01,200
types of checks

00:21:58,400 --> 00:22:04,159
that you may want to either provide a

00:22:01,200 --> 00:22:05,840
feedback to the developer

00:22:04,159 --> 00:22:08,080
earlier in the build cycle versus the

00:22:05,840 --> 00:22:10,559
final validations you may want to do

00:22:08,080 --> 00:22:12,559
right before the deploy so a policy

00:22:10,559 --> 00:22:13,280
owner is the one that could be kind of

00:22:12,559 --> 00:22:16,480
like

00:22:13,280 --> 00:22:20,080
implementing or creating these policies

00:22:16,480 --> 00:22:23,120
to ship them to the relevant components

00:22:20,080 --> 00:22:25,039
and in terms of tagging you may have an

00:22:23,120 --> 00:22:27,919
external persistent store

00:22:25,039 --> 00:22:29,440
that you might be looking at in terms of

00:22:27,919 --> 00:22:31,120
being the source of truth or the system

00:22:29,440 --> 00:22:34,159
of record to inherit the

00:22:31,120 --> 00:22:35,039
uh key values with regards to the

00:22:34,159 --> 00:22:36,799
injection

00:22:35,039 --> 00:22:39,679
so we've built integrations for all

00:22:36,799 --> 00:22:42,480
these various three different workflows

00:22:39,679 --> 00:22:43,039
in spinnaker using the ginger tube to

00:22:42,480 --> 00:22:46,480
inherit

00:22:43,039 --> 00:22:48,159
and apply the relevant tachy values

00:22:46,480 --> 00:22:50,880
to all the various different resources

00:22:48,159 --> 00:22:52,720
that are being provisioned

00:22:50,880 --> 00:22:54,080
either in either in terms of the

00:22:52,720 --> 00:22:56,159
terraform plan and apply

00:22:54,080 --> 00:22:57,919
stage or through the spinnaker native

00:22:56,159 --> 00:22:58,880
cloud provider by integrating the stacks

00:22:57,919 --> 00:23:01,520
with the relevant

00:22:58,880 --> 00:23:02,960
ginger macros or using the helm bake

00:23:01,520 --> 00:23:04,799
stage

00:23:02,960 --> 00:23:07,760
helmet stages is a type of stage again

00:23:04,799 --> 00:23:09,600
in spinnaker that can help you override

00:23:07,760 --> 00:23:10,159
certain metadata in your health charts

00:23:09,600 --> 00:23:13,280
and you can

00:23:10,159 --> 00:23:15,440
inject the labels for

00:23:13,280 --> 00:23:16,320
your service deployments into a kh

00:23:15,440 --> 00:23:19,360
cluster

00:23:16,320 --> 00:23:20,640
so that kind of like again provides the

00:23:19,360 --> 00:23:23,840
unified view of

00:23:20,640 --> 00:23:26,080
ensuring that the policies are

00:23:23,840 --> 00:23:27,360
kind of like giving the feedback to the

00:23:26,080 --> 00:23:30,799
end users

00:23:27,360 --> 00:23:30,799
and here is an example of a

00:23:31,120 --> 00:23:34,480
open policy agent policy code that's

00:23:33,280 --> 00:23:36,480
trying to validate

00:23:34,480 --> 00:23:38,080
whether the presence of labels is indeed

00:23:36,480 --> 00:23:42,240
there for

00:23:38,080 --> 00:23:44,240
the deployment type charts versus

00:23:42,240 --> 00:23:46,159
returning the relevant error code back

00:23:44,240 --> 00:23:48,400
to the user in terms of

00:23:46,159 --> 00:23:49,679
what might be missing there so that the

00:23:48,400 --> 00:23:52,240
developer can take

00:23:49,679 --> 00:23:54,000
immediate action to make sure that those

00:23:52,240 --> 00:23:55,440
attribution cost attribution tags or

00:23:54,000 --> 00:23:58,480
labels are injected

00:23:55,440 --> 00:24:00,640
so again open policy agent is an um

00:23:58,480 --> 00:24:02,640
open source general general general

00:24:00,640 --> 00:24:05,120
purpose policy engine that unifies

00:24:02,640 --> 00:24:06,880
policy enforcement across the stack

00:24:05,120 --> 00:24:08,240
and it provides a high-level declaration

00:24:06,880 --> 00:24:11,200
language that lets you

00:24:08,240 --> 00:24:12,960
specify policy is scored with simple

00:24:11,200 --> 00:24:14,400
apis to offload the policy making

00:24:12,960 --> 00:24:18,000
decisions from your

00:24:14,400 --> 00:24:19,919
workflows so with that in mind

00:24:18,000 --> 00:24:21,279
um looking into the set of

00:24:19,919 --> 00:24:24,799
accomplishments what we have

00:24:21,279 --> 00:24:28,559
done so far we were able to attribute

00:24:24,799 --> 00:24:32,360
metrics um for 98 of the

00:24:28,559 --> 00:24:35,520
resource types and we have about

00:24:32,360 --> 00:24:36,720
99.8 of the cost attribution to compute

00:24:35,520 --> 00:24:38,240
resource types various different

00:24:36,720 --> 00:24:41,120
computer resource types

00:24:38,240 --> 00:24:42,400
and we have a coverage of about 200 plus

00:24:41,120 --> 00:24:45,039
different service types

00:24:42,400 --> 00:24:47,039
um that includes compute storage

00:24:45,039 --> 00:24:49,120
networking so on and so forth

00:24:47,039 --> 00:24:50,320
and on the guard rails and leveraging

00:24:49,120 --> 00:24:52,080
oppa

00:24:50,320 --> 00:24:55,360
this is again accumulated numbers so far

00:24:52,080 --> 00:24:58,320
in the last few months we have about

00:24:55,360 --> 00:24:59,520
400 k plus oppa validations and

00:24:58,320 --> 00:25:02,400
executions that have

00:24:59,520 --> 00:25:06,080
helped us to make sure we are meeting

00:25:02,400 --> 00:25:06,080
the internal governance guidelines

00:25:07,520 --> 00:25:12,240
so on the roadmap perspective we hope to

00:25:10,320 --> 00:25:12,880
kind of like again look ahead in terms

00:25:12,240 --> 00:25:14,400
of

00:25:12,880 --> 00:25:16,320
addressing some of the indirect cost

00:25:14,400 --> 00:25:18,400
attributions

00:25:16,320 --> 00:25:20,480
mainly particularly around shared

00:25:18,400 --> 00:25:21,279
services to kind of like go into that

00:25:20,480 --> 00:25:23,520
area

00:25:21,279 --> 00:25:25,520
and in addition to that we also are

00:25:23,520 --> 00:25:27,840
currently working on

00:25:25,520 --> 00:25:29,120
adding a service that can retroactively

00:25:27,840 --> 00:25:31,440
apply tags versus

00:25:29,120 --> 00:25:33,279
for resources that may or may not have

00:25:31,440 --> 00:25:35,520
had accurate tags or

00:25:33,279 --> 00:25:36,960
more in terms of some of the use cases

00:25:35,520 --> 00:25:40,480
that cannot be

00:25:36,960 --> 00:25:43,039
handled at the time of deploy to

00:25:40,480 --> 00:25:44,880
apply these tags and last but not the

00:25:43,039 --> 00:25:45,520
least we are also looking ways to kind

00:25:44,880 --> 00:25:49,120
of like

00:25:45,520 --> 00:25:51,919
um having some integrations built into

00:25:49,120 --> 00:25:53,919
the provisioning pipelines and spinnaker

00:25:51,919 --> 00:25:55,520
pipelines to do the left shift in terms

00:25:53,919 --> 00:25:57,120
of the cost optimization so that there

00:25:55,520 --> 00:25:59,520
is a direct feedback right before the

00:25:57,120 --> 00:26:02,559
requirement is done

00:25:59,520 --> 00:26:03,600
so with that in mind thank you all for

00:26:02,559 --> 00:26:06,320
your time today

00:26:03,600 --> 00:26:08,080
um i hope you enjoyed the conference and

00:26:06,320 --> 00:26:11,039
last but not the least

00:26:08,080 --> 00:26:13,120
we are hiring and if you are interested

00:26:11,039 --> 00:26:13,600
please feel free to reach out to me or

00:26:13,120 --> 00:26:20,880
sudha

00:26:13,600 --> 00:26:20,880

YouTube URL: https://www.youtube.com/watch?v=ozvm0Cr3rgo


