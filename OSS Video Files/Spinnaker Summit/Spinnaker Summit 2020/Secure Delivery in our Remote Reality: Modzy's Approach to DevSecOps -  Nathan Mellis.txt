Title: Secure Delivery in our Remote Reality: Modzy's Approach to DevSecOps -  Nathan Mellis
Publication date: 2021-01-28
Playlist: Spinnaker Summit 2020
Description: 
	Even before COVID drove many to remote work, software development teams have been trending towards remote delivery, contractors, gig economy workers, and off-shore/near-shore contributors. Such a mixed landscape can make maintaining best practices with regards to DevSecOps, protecting your company's intellectual property, and delivering a quality product difficult. Modzy was born as a remote-native company with heritage and experience delivering cutting-edge technical solutions for some of the most security focused clients. Come hear how our adoption of industry best practices, such as the US Department of Defense's DevSecOps reference architecture and tools like Armory Spinnaker, allowed us to empower our developers to rapidly develop, test, and iterate on our product using Agile methodologies while simultaneously segmenting off those parts of our product that required more stringent security controls. We'll also cover how we isolate access to higher environments so that only our automated delivery pipelines have access to make changes, ensuring a consistent release process with a well-documented provenance.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:05,759 --> 00:00:08,559
hello and welcome

00:00:07,040 --> 00:00:10,320
you're watching the session secure

00:00:08,559 --> 00:00:13,040
delivery in our remote reality

00:00:10,320 --> 00:00:13,440
mozzie's approach to dev suck ops uh

00:00:13,040 --> 00:00:15,440
first

00:00:13,440 --> 00:00:17,600
wanted to introduce myself and tell you

00:00:15,440 --> 00:00:19,600
a little bit about my background

00:00:17,600 --> 00:00:21,199
so my name is nathan melis and i am the

00:00:19,600 --> 00:00:23,119
head of engineering for modsi

00:00:21,199 --> 00:00:24,800
a new interface new enterprise

00:00:23,119 --> 00:00:26,400
artificial intelligence platform and

00:00:24,800 --> 00:00:27,519
marketplace that came out of stealth

00:00:26,400 --> 00:00:30,720
last year at

00:00:27,519 --> 00:00:32,640
nvidia's gtc conference prior to joining

00:00:30,720 --> 00:00:34,480
mozy i've worked for booz allen hamilton

00:00:32,640 --> 00:00:36,399
and apple doing everything from software

00:00:34,480 --> 00:00:38,480
development to cloud architecture

00:00:36,399 --> 00:00:40,000
user experience prototyping engineering

00:00:38,480 --> 00:00:42,399
management

00:00:40,000 --> 00:00:43,840
and the list goes on if you have

00:00:42,399 --> 00:00:45,760
questions or want to reach out you can

00:00:43,840 --> 00:00:49,039
find me on linkedin or twitter

00:00:45,760 --> 00:00:51,280
information here on the slide

00:00:49,039 --> 00:00:53,039
so today what are we going to cover uh

00:00:51,280 --> 00:00:55,039
so we're going to talk about

00:00:53,039 --> 00:00:57,120
lessons learned on mazzy's journey

00:00:55,039 --> 00:00:58,000
towards establishing a devsecops

00:00:57,120 --> 00:00:59,359
practice

00:00:58,000 --> 00:01:00,879
uh hopefully some of this information

00:00:59,359 --> 00:01:03,280
will be valuable to you as you think

00:01:00,879 --> 00:01:05,040
about your own devsecops practices

00:01:03,280 --> 00:01:06,400
first off we're going to talk briefly

00:01:05,040 --> 00:01:07,920
about why one might bother with

00:01:06,400 --> 00:01:09,680
devsecops at all

00:01:07,920 --> 00:01:11,520
and understand the reasons why investing

00:01:09,680 --> 00:01:12,000
in this process can bring value to your

00:01:11,520 --> 00:01:15,200
engineering

00:01:12,000 --> 00:01:17,920
organization next we're going to cover

00:01:15,200 --> 00:01:19,759
some basics of information security so

00:01:17,920 --> 00:01:21,360
that we have a foundation for discussing

00:01:19,759 --> 00:01:23,680
how those principles guide us

00:01:21,360 --> 00:01:25,280
in establishing the security portion of

00:01:23,680 --> 00:01:27,040
devsecops

00:01:25,280 --> 00:01:28,799
after that we're going to cover a few

00:01:27,040 --> 00:01:29,280
best practices we've discovered along

00:01:28,799 --> 00:01:31,360
the way

00:01:29,280 --> 00:01:33,680
and where we want to draw inspiration as

00:01:31,360 --> 00:01:35,280
we were and where we drew instru

00:01:33,680 --> 00:01:36,960
inspiration as we were designing our own

00:01:35,280 --> 00:01:38,799
process

00:01:36,960 --> 00:01:40,159
finally we'll walk through some

00:01:38,799 --> 00:01:42,399
practical examples

00:01:40,159 --> 00:01:44,240
uh and and how applying some of these

00:01:42,399 --> 00:01:46,720
principles might work out

00:01:44,240 --> 00:01:47,520
uh for delivering a kubernetes based

00:01:46,720 --> 00:01:50,159
product

00:01:47,520 --> 00:01:50,560
uh and uh and show how those principles

00:01:50,159 --> 00:01:52,840
can

00:01:50,560 --> 00:01:55,040
can be applied uh using some practical

00:01:52,840 --> 00:01:57,920
examples

00:01:55,040 --> 00:01:59,840
so let's dive in uh to start what is

00:01:57,920 --> 00:02:00,399
devsecops and why are we talking about

00:01:59,840 --> 00:02:02,000
it

00:02:00,399 --> 00:02:03,920
uh if you're at this conference you

00:02:02,000 --> 00:02:05,600
probably already have a good handle on

00:02:03,920 --> 00:02:06,159
devops in general but let's quickly

00:02:05,600 --> 00:02:09,280
review

00:02:06,159 --> 00:02:11,440
some of the basics devops simply put is

00:02:09,280 --> 00:02:13,200
the discipline of creating a process by

00:02:11,440 --> 00:02:14,879
which code moves quickly from a

00:02:13,200 --> 00:02:15,760
developer's environment to a production

00:02:14,879 --> 00:02:17,760
environment

00:02:15,760 --> 00:02:19,360
while ensuring the desired amount of

00:02:17,760 --> 00:02:21,760
quality humans

00:02:19,360 --> 00:02:24,080
as it turns out are really bad at doing

00:02:21,760 --> 00:02:25,360
the same thing exactly the same way over

00:02:24,080 --> 00:02:27,200
and over again

00:02:25,360 --> 00:02:29,760
so it's quite common the devops

00:02:27,200 --> 00:02:32,239
processes are heavily automated because

00:02:29,760 --> 00:02:33,680
as it turns out computers are quite good

00:02:32,239 --> 00:02:36,319
at doing the same thing

00:02:33,680 --> 00:02:37,440
over and over again the same way every

00:02:36,319 --> 00:02:40,480
time

00:02:37,440 --> 00:02:42,319
so devsecops then is the discipline of

00:02:40,480 --> 00:02:44,160
weaving security best practices

00:02:42,319 --> 00:02:45,920
into the devops process so that its

00:02:44,160 --> 00:02:48,640
security is applied at each step

00:02:45,920 --> 00:02:50,000
along that process making security an

00:02:48,640 --> 00:02:51,040
integral part of your software

00:02:50,000 --> 00:02:52,560
development process

00:02:51,040 --> 00:02:54,239
rather than something that's bolted on

00:02:52,560 --> 00:02:56,959
at the end

00:02:54,239 --> 00:02:58,239
why do we need a process at all uh in

00:02:56,959 --> 00:03:00,480
the

00:02:58,239 --> 00:03:02,400
in the good old days building and

00:03:00,480 --> 00:03:04,080
preparing software for shipping involved

00:03:02,400 --> 00:03:07,920
something like this

00:03:04,080 --> 00:03:11,280
uh svn checkout against some server

00:03:07,920 --> 00:03:13,760
uh cd into that folder uh dot slash

00:03:11,280 --> 00:03:16,400
configure make and make install

00:03:13,760 --> 00:03:18,000
uh or if you were a web developer it was

00:03:16,400 --> 00:03:19,599
even easier uh

00:03:18,000 --> 00:03:22,319
you just copy the files onto your web

00:03:19,599 --> 00:03:24,080
server and you tell apache to gracefully

00:03:22,319 --> 00:03:27,200
restart itself

00:03:24,080 --> 00:03:29,440
for better or worse our reality is far

00:03:27,200 --> 00:03:30,640
different and these approaches are no

00:03:29,440 --> 00:03:32,640
longer sufficient for

00:03:30,640 --> 00:03:34,000
delivering most software especially

00:03:32,640 --> 00:03:37,040
things that are cloud native

00:03:34,000 --> 00:03:40,239
container based kubernetes et cetera

00:03:37,040 --> 00:03:42,560
uh over time uh as the

00:03:40,239 --> 00:03:44,560
complexity of software has grown uh

00:03:42,560 --> 00:03:45,120
we've gone from bash scripts to perl

00:03:44,560 --> 00:03:46,959
scripts

00:03:45,120 --> 00:03:49,680
infrastructure automation like puppet

00:03:46,959 --> 00:03:51,200
and chef to virtual machines containers

00:03:49,680 --> 00:03:53,280
container orchestrators

00:03:51,200 --> 00:03:55,360
infrastructure as code and it keeps

00:03:53,280 --> 00:03:56,959
going next year at this conference i'm

00:03:55,360 --> 00:03:57,439
sure there's going to be some fun new

00:03:56,959 --> 00:03:58,480
thing

00:03:57,439 --> 00:04:00,959
that we're going to be talking about

00:03:58,480 --> 00:04:03,360
that's going to be all the rage

00:04:00,959 --> 00:04:06,000
to further reinforce this point one

00:04:03,360 --> 00:04:08,720
really only has to look at javascript

00:04:06,000 --> 00:04:10,959
chances are your web application if it's

00:04:08,720 --> 00:04:12,720
been written within the last few years

00:04:10,959 --> 00:04:14,000
was written in something that is like

00:04:12,720 --> 00:04:16,320
javascript for

00:04:14,000 --> 00:04:18,320
example typescript which is a great

00:04:16,320 --> 00:04:21,680
language by the way

00:04:18,320 --> 00:04:24,639
but it's not actually javascript

00:04:21,680 --> 00:04:27,120
and typically requires not one but at

00:04:24,639 --> 00:04:28,639
least two different transpilation steps

00:04:27,120 --> 00:04:31,040
before it can be delivered in a form

00:04:28,639 --> 00:04:32,560
that can be consumed by a browser

00:04:31,040 --> 00:04:34,080
the point is that modern applications

00:04:32,560 --> 00:04:37,040
have many more layers

00:04:34,080 --> 00:04:38,800
than before and all of that needs to be

00:04:37,040 --> 00:04:40,560
coordinated before the application can

00:04:38,800 --> 00:04:42,800
be shipped

00:04:40,560 --> 00:04:44,560
similarly the adoption of microservices

00:04:42,800 --> 00:04:46,560
has given rise to a whole new suite of

00:04:44,560 --> 00:04:49,440
coordination tools like eureka

00:04:46,560 --> 00:04:51,440
zookeeper console kubernetes and some

00:04:49,440 --> 00:04:53,360
microservice based applications even go

00:04:51,440 --> 00:04:54,240
so far as to require things like sidecar

00:04:53,360 --> 00:04:56,479
proxies such as

00:04:54,240 --> 00:04:59,680
envoy in order for the microservices to

00:04:56,479 --> 00:05:02,639
be able to communicate with each other

00:04:59,680 --> 00:05:04,000
so to achieve a rapid quality delivery

00:05:02,639 --> 00:05:04,800
with all these extra layers and

00:05:04,000 --> 00:05:06,800
coordination

00:05:04,800 --> 00:05:08,880
a mechanism is needed to ensure that the

00:05:06,800 --> 00:05:11,199
correct process is always followed in a

00:05:08,880 --> 00:05:14,000
consistent and deterministic manner

00:05:11,199 --> 00:05:15,039
that's why we need devops and if you're

00:05:14,000 --> 00:05:16,400
in the cloud and have your

00:05:15,039 --> 00:05:18,960
infrastructure as code

00:05:16,400 --> 00:05:19,759
then it's probably occurred to you to

00:05:18,960 --> 00:05:23,280
evaluate

00:05:19,759 --> 00:05:24,240
what iam roles users policies are

00:05:23,280 --> 00:05:26,320
created

00:05:24,240 --> 00:05:28,000
in that automation and what security

00:05:26,320 --> 00:05:29,520
groups and network policies are needed

00:05:28,000 --> 00:05:30,479
by your infrastructure code

00:05:29,520 --> 00:05:32,000
but if you're running with something

00:05:30,479 --> 00:05:33,120
like kubernetes on one of the major

00:05:32,000 --> 00:05:35,120
cloud providers

00:05:33,120 --> 00:05:36,800
then any developer who can create a load

00:05:35,120 --> 00:05:38,720
balancer service

00:05:36,800 --> 00:05:40,400
will cause not only new infrastructure

00:05:38,720 --> 00:05:42,639
to be automatically provisioned but new

00:05:40,400 --> 00:05:44,000
security groups to be created as well

00:05:42,639 --> 00:05:45,919
that may or may not conform to your

00:05:44,000 --> 00:05:48,160
organization's policies

00:05:45,919 --> 00:05:50,160
that's why it's so important to consider

00:05:48,160 --> 00:05:51,840
security in your delivery process

00:05:50,160 --> 00:05:53,600
as well as more and more of your

00:05:51,840 --> 00:05:54,639
application stack moves to the left and

00:05:53,600 --> 00:05:56,319
becomes code

00:05:54,639 --> 00:05:59,360
you need to move your security practices

00:05:56,319 --> 00:05:59,360
to the left as well

00:05:59,440 --> 00:06:02,639
so let's take a minute and quickly cover

00:06:01,120 --> 00:06:06,479
the basics of

00:06:02,639 --> 00:06:09,080
information security and in most cases

00:06:06,479 --> 00:06:10,560
uh they are as follows uh you have

00:06:09,080 --> 00:06:14,039
confidentiality

00:06:10,560 --> 00:06:16,000
integrity and availability

00:06:14,039 --> 00:06:17,759
confidentiality is the principle that

00:06:16,000 --> 00:06:18,400
governs who has access to what

00:06:17,759 --> 00:06:21,440
information

00:06:18,400 --> 00:06:23,120
or systems uh which informations or

00:06:21,440 --> 00:06:24,400
systems should be confidential

00:06:23,120 --> 00:06:27,120
is of course up to you and your

00:06:24,400 --> 00:06:27,680
organization uh and should represent one

00:06:27,120 --> 00:06:29,280
of the first

00:06:27,680 --> 00:06:30,720
key decisions that you'll need to make

00:06:29,280 --> 00:06:31,600
when standing up your devsecops

00:06:30,720 --> 00:06:33,680
processes

00:06:31,600 --> 00:06:35,520
and we'll talk more about this later

00:06:33,680 --> 00:06:37,759
integrity is the principle

00:06:35,520 --> 00:06:38,720
that requires the data about your

00:06:37,759 --> 00:06:41,440
information

00:06:38,720 --> 00:06:43,199
and systems is accurate and reliable the

00:06:41,440 --> 00:06:45,039
decisions you make here will drive what

00:06:43,199 --> 00:06:46,319
kinds of auditing and security alerting

00:06:45,039 --> 00:06:48,240
you'll need to set up as part of your

00:06:46,319 --> 00:06:51,680
devsecops processes

00:06:48,240 --> 00:06:54,319
also with regards to devsecops this also

00:06:51,680 --> 00:06:55,199
goes into having you determine what the

00:06:54,319 --> 00:06:57,840
provenance

00:06:55,199 --> 00:06:59,039
of your artifacts are ensuring that you

00:06:57,840 --> 00:07:00,880
are shipping only

00:06:59,039 --> 00:07:02,240
and exactly what you're expecting to

00:07:00,880 --> 00:07:03,759
ship

00:07:02,240 --> 00:07:05,599
availability is the principle that

00:07:03,759 --> 00:07:07,680
ensures that people have timely access

00:07:05,599 --> 00:07:09,120
to your informations and systems

00:07:07,680 --> 00:07:10,800
the decisions you make here will

00:07:09,120 --> 00:07:13,120
determine what policies and monitoring

00:07:10,800 --> 00:07:15,599
you put in place typically

00:07:13,120 --> 00:07:17,440
now let's talk about how we at mozy took

00:07:15,599 --> 00:07:20,960
these basic security principles and

00:07:17,440 --> 00:07:23,000
applied them to our own design thinking

00:07:20,960 --> 00:07:24,639
so first with regards to confident

00:07:23,000 --> 00:07:26,319
confidentiality

00:07:24,639 --> 00:07:27,680
we asked ourselves what parts of our

00:07:26,319 --> 00:07:30,880
software delivery process

00:07:27,680 --> 00:07:31,599
might need to be confidential our key

00:07:30,880 --> 00:07:34,400
takeaway

00:07:31,599 --> 00:07:36,400
when when considering this was simply

00:07:34,400 --> 00:07:39,039
know what needs protection

00:07:36,400 --> 00:07:40,400
uh this may sound rather obvious but

00:07:39,039 --> 00:07:41,120
it's important to devote some

00:07:40,400 --> 00:07:44,639
significant

00:07:41,120 --> 00:07:46,400
thought to this question early and often

00:07:44,639 --> 00:07:47,759
we wanted not only to consider the

00:07:46,400 --> 00:07:50,560
obvious uh

00:07:47,759 --> 00:07:52,319
things like protecting our secrets uh

00:07:50,560 --> 00:07:55,599
but also the downstream

00:07:52,319 --> 00:07:57,840
uh effects of of secrets like

00:07:55,599 --> 00:07:59,360
protect the things that have access to

00:07:57,840 --> 00:08:01,680
secrets

00:07:59,360 --> 00:08:03,199
obviously at some level our continuous

00:08:01,680 --> 00:08:04,080
integration and continuous delivery

00:08:03,199 --> 00:08:06,160
tools

00:08:04,080 --> 00:08:07,919
uh would inevitably have various levels

00:08:06,160 --> 00:08:09,840
of access to our environments

00:08:07,919 --> 00:08:12,000
and certain repositories and our source

00:08:09,840 --> 00:08:14,240
control would have access to information

00:08:12,000 --> 00:08:15,759
about our environments as well so we

00:08:14,240 --> 00:08:17,680
would need to afford those tools the

00:08:15,759 --> 00:08:19,919
same level of protection that we would

00:08:17,680 --> 00:08:21,360
to the environments themselves otherwise

00:08:19,919 --> 00:08:23,680
our tools could become a vector for

00:08:21,360 --> 00:08:24,879
human error or malicious intent

00:08:23,680 --> 00:08:26,639
we'll talk more about this when we

00:08:24,879 --> 00:08:27,919
design our notional process and share

00:08:26,639 --> 00:08:30,160
some of the ways that we approach

00:08:27,919 --> 00:08:33,680
securing our tools that have access

00:08:30,160 --> 00:08:35,200
to secrets but it was also important

00:08:33,680 --> 00:08:36,000
that we considered what were our most

00:08:35,200 --> 00:08:39,279
valuable

00:08:36,000 --> 00:08:41,279
or our most risky assets these could be

00:08:39,279 --> 00:08:44,000
things like intellectual property

00:08:41,279 --> 00:08:44,640
uh things related to patents or or

00:08:44,000 --> 00:08:48,560
certain

00:08:44,640 --> 00:08:50,320
proprietary information or

00:08:48,560 --> 00:08:52,880
could also be things that were related

00:08:50,320 --> 00:08:55,040
to things that were export controlled

00:08:52,880 --> 00:08:57,279
modsy is an artificial intelligence

00:08:55,040 --> 00:08:59,040
platform and marketplace

00:08:57,279 --> 00:09:01,120
and even though artificial intelligence

00:08:59,040 --> 00:09:02,399
largely is not export controlled at the

00:09:01,120 --> 00:09:03,760
moment

00:09:02,399 --> 00:09:05,680
it's something that's being actively

00:09:03,760 --> 00:09:08,160
discussed and

00:09:05,680 --> 00:09:11,279
we wanted to make sure that we were

00:09:08,160 --> 00:09:12,800
ahead of that particular game

00:09:11,279 --> 00:09:15,360
you might also consider internal

00:09:12,800 --> 00:09:17,760
security code for your product

00:09:15,360 --> 00:09:18,560
if your product does license management

00:09:17,760 --> 00:09:22,000
or

00:09:18,560 --> 00:09:24,399
internal security or if you've got

00:09:22,000 --> 00:09:25,279
your own encryption schemes or or things

00:09:24,399 --> 00:09:28,399
like that

00:09:25,279 --> 00:09:30,080
those may be uh aspects of your process

00:09:28,399 --> 00:09:31,920
that you may want to add some additional

00:09:30,080 --> 00:09:32,560
layers of security around to make sure

00:09:31,920 --> 00:09:34,800
that

00:09:32,560 --> 00:09:36,000
uh you know your your junior developer

00:09:34,800 --> 00:09:38,320
is just out of college

00:09:36,000 --> 00:09:39,120
that aren't working on security don't

00:09:38,320 --> 00:09:41,360
have the

00:09:39,120 --> 00:09:44,080
ability to poke around and see things

00:09:41,360 --> 00:09:45,519
that they really shouldn't see

00:09:44,080 --> 00:09:47,839
and finally you also want to consider

00:09:45,519 --> 00:09:49,600
your environment configurations

00:09:47,839 --> 00:09:51,360
oftentimes environment configurations

00:09:49,600 --> 00:09:53,040
can contain information

00:09:51,360 --> 00:09:55,120
uh you know about your environments

00:09:53,040 --> 00:09:55,360
where your databases are located what

00:09:55,120 --> 00:09:57,279
the

00:09:55,360 --> 00:09:58,800
those credentials are maybe what

00:09:57,279 --> 00:10:01,040
policies are applied

00:09:58,800 --> 00:10:02,959
uh and those are things that you might

00:10:01,040 --> 00:10:05,440
want to consider confidential

00:10:02,959 --> 00:10:08,079
and and not have broad access to within

00:10:05,440 --> 00:10:10,160
your engineering organization

00:10:08,079 --> 00:10:12,480
since modsi was born as a remote native

00:10:10,160 --> 00:10:13,600
company we needed to consider not only

00:10:12,480 --> 00:10:16,480
what to protect

00:10:13,600 --> 00:10:17,760
but who and where to protect it from i'm

00:10:16,480 --> 00:10:19,600
guessing that many of you who have

00:10:17,760 --> 00:10:22,240
transitioned to majority work

00:10:19,600 --> 00:10:22,880
uh remote work at first uh didn't have

00:10:22,240 --> 00:10:25,680
all of the

00:10:22,880 --> 00:10:27,760
vpns and network and content monitoring

00:10:25,680 --> 00:10:29,279
centralized endpoint protection for all

00:10:27,760 --> 00:10:31,120
your remote workers

00:10:29,279 --> 00:10:32,640
uh to match the same kind of a setup

00:10:31,120 --> 00:10:34,000
that you may have had in your corporate

00:10:32,640 --> 00:10:35,360
office

00:10:34,000 --> 00:10:37,440
but even when you do have those

00:10:35,360 --> 00:10:38,320
protections in place your teams are

00:10:37,440 --> 00:10:40,240
still working on

00:10:38,320 --> 00:10:42,160
untrusted or potentially even hostile

00:10:40,240 --> 00:10:44,160
networks like coffee shops

00:10:42,160 --> 00:10:46,480
as well as on unmanaged personal

00:10:44,160 --> 00:10:48,560
computers and mobile devices

00:10:46,480 --> 00:10:50,320
caring consideration should be taken to

00:10:48,560 --> 00:10:51,519
ensure that a compromised home computer

00:10:50,320 --> 00:10:53,040
or network

00:10:51,519 --> 00:10:55,360
does not put your confidential

00:10:53,040 --> 00:10:57,120
information or assets at risk

00:10:55,360 --> 00:10:58,640
this is the where that you want to

00:10:57,120 --> 00:11:00,880
protect from

00:10:58,640 --> 00:11:02,160
it's also to consider who you want to

00:11:00,880 --> 00:11:03,760
protect from

00:11:02,160 --> 00:11:06,320
when all your developers are remote

00:11:03,760 --> 00:11:07,680
anyway uh it can become possible to pull

00:11:06,320 --> 00:11:09,360
talent from a larger pool than

00:11:07,680 --> 00:11:11,040
traditional recruiting

00:11:09,360 --> 00:11:13,200
a lot of talent can be found through gig

00:11:11,040 --> 00:11:14,240
economy workers offshore and nearshore

00:11:13,200 --> 00:11:17,760
contractors

00:11:14,240 --> 00:11:19,600
uh and and more consider what aspects of

00:11:17,760 --> 00:11:21,279
your information and tools might require

00:11:19,600 --> 00:11:22,160
different levels of access things like

00:11:21,279 --> 00:11:24,399
source control

00:11:22,160 --> 00:11:26,720
build systems artifact repositories

00:11:24,399 --> 00:11:29,760
wikis document libraries

00:11:26,720 --> 00:11:31,600
uh just to name a few so this whole this

00:11:29,760 --> 00:11:32,240
whole topic this is a whole topic in and

00:11:31,600 --> 00:11:34,320
of itself

00:11:32,240 --> 00:11:35,839
and far more than we can get into today

00:11:34,320 --> 00:11:37,200
uh suffice it to say that there are

00:11:35,839 --> 00:11:39,440
decisions that you should make when

00:11:37,200 --> 00:11:41,200
designing your devsecops process

00:11:39,440 --> 00:11:42,480
uh that can help mitigate some of these

00:11:41,200 --> 00:11:46,480
risks

00:11:42,480 --> 00:11:50,079
which we'll cover a bit more later next

00:11:46,480 --> 00:11:51,680
let's talk about integrity and so

00:11:50,079 --> 00:11:53,920
and this is the things you might want to

00:11:51,680 --> 00:11:56,000
consider or parts of your process

00:11:53,920 --> 00:11:57,760
that might require uh additional checks

00:11:56,000 --> 00:12:01,440
to ensure the the provenance

00:11:57,760 --> 00:12:02,959
uh or the accuracy uh or the reliability

00:12:01,440 --> 00:12:06,160
of of that information

00:12:02,959 --> 00:12:08,000
or artifact so to recap integrity is the

00:12:06,160 --> 00:12:09,839
principle that requires that the data

00:12:08,000 --> 00:12:11,839
about your information or systems is

00:12:09,839 --> 00:12:14,240
accurate and reliable

00:12:11,839 --> 00:12:16,880
again we begin with the obvious uh with

00:12:14,240 --> 00:12:19,920
regards to a devsecops process

00:12:16,880 --> 00:12:22,399
know what's being shipped uh

00:12:19,920 --> 00:12:23,680
you know we of course want to be able to

00:12:22,399 --> 00:12:25,440
trace everything

00:12:23,680 --> 00:12:26,880
back to a particular commit in our

00:12:25,440 --> 00:12:28,720
source control

00:12:26,880 --> 00:12:30,000
as well as have references to all of the

00:12:28,720 --> 00:12:32,399
test results

00:12:30,000 --> 00:12:35,839
for every unit test integration test

00:12:32,399 --> 00:12:38,160
security or penetration test

00:12:35,839 --> 00:12:40,399
that was performed along the way so that

00:12:38,160 --> 00:12:41,440
we had the maximum amount of assurance

00:12:40,399 --> 00:12:43,519
that we could get

00:12:41,440 --> 00:12:45,760
that we were shipping exactly and only

00:12:43,519 --> 00:12:48,079
what we intended to ship

00:12:45,760 --> 00:12:50,399
this also meant uh that we needed to

00:12:48,079 --> 00:12:52,320
know what tests to perform at each stage

00:12:50,399 --> 00:12:53,680
of the delivery process

00:12:52,320 --> 00:12:55,519
we'll cover what kinds of tests to

00:12:53,680 --> 00:12:57,600
consider running later on as you're

00:12:55,519 --> 00:12:59,200
thinking about your own process

00:12:57,600 --> 00:13:01,680
and you'll need to decide what tests are

00:12:59,200 --> 00:13:03,600
appropriate for your product

00:13:01,680 --> 00:13:06,480
we also thought it was important to

00:13:03,600 --> 00:13:07,200
ensure that we could verify those test

00:13:06,480 --> 00:13:10,240
results

00:13:07,200 --> 00:13:13,200
before moving on to each delivery stage

00:13:10,240 --> 00:13:14,000
uh obviously just testing is not enough

00:13:13,200 --> 00:13:16,639
uh we needed

00:13:14,000 --> 00:13:18,000
to define success and failure criteria

00:13:16,639 --> 00:13:20,240
for each test

00:13:18,000 --> 00:13:22,240
and not permit artifacts to proceed

00:13:20,240 --> 00:13:23,519
further along the promotion process into

00:13:22,240 --> 00:13:27,519
higher environments

00:13:23,519 --> 00:13:29,360
if a test failed our defined threshold

00:13:27,519 --> 00:13:31,440
it was also important to us to ensure

00:13:29,360 --> 00:13:33,600
that our artifacts could not be modified

00:13:31,440 --> 00:13:34,880
or replaced after those verification

00:13:33,600 --> 00:13:36,639
checks took place

00:13:34,880 --> 00:13:37,800
it doesn't do any good to verify that

00:13:36,639 --> 00:13:40,240
your artifacts are free of

00:13:37,800 --> 00:13:42,480
vulnerabilities or bugs

00:13:40,240 --> 00:13:44,000
if they could be replaced midstream by

00:13:42,480 --> 00:13:45,920
something that hasn't undergone full

00:13:44,000 --> 00:13:48,000
testing and validation

00:13:45,920 --> 00:13:50,079
ultimately it was about establishing a

00:13:48,000 --> 00:13:52,160
provenance for each of our artifacts by

00:13:50,079 --> 00:13:54,240
the time they reached production

00:13:52,160 --> 00:13:55,760
we wanted to have a full verifiable

00:13:54,240 --> 00:13:56,639
history of each artifact and the

00:13:55,760 --> 00:13:59,760
confidence

00:13:56,639 --> 00:14:03,040
that nothing out of our process occurred

00:13:59,760 --> 00:14:06,079
along the way

00:14:03,040 --> 00:14:08,639
next is availability uh to recap

00:14:06,079 --> 00:14:10,240
availab uh well availability is a larger

00:14:08,639 --> 00:14:10,959
conversation than we can cover in this

00:14:10,240 --> 00:14:12,560
talk

00:14:10,959 --> 00:14:15,040
so i'll simply say that when it comes to

00:14:12,560 --> 00:14:18,079
designing a devsecops process

00:14:15,040 --> 00:14:18,959
our key takeaway here was to monitor

00:14:18,079 --> 00:14:21,279
everything

00:14:18,959 --> 00:14:23,360
considered important we're going to be

00:14:21,279 --> 00:14:24,160
relying on a lot of automation to

00:14:23,360 --> 00:14:26,720
achieve

00:14:24,160 --> 00:14:28,320
most of our goals and automation is only

00:14:26,720 --> 00:14:31,440
effective when it's all running

00:14:28,320 --> 00:14:33,680
normally so we need to make sure that

00:14:31,440 --> 00:14:36,160
every critical piece to our process is

00:14:33,680 --> 00:14:38,480
monitored for proper functioning

00:14:36,160 --> 00:14:39,199
and that we would get the appropriate

00:14:38,480 --> 00:14:44,240
alerts

00:14:39,199 --> 00:14:46,560
uh if any anomalies were detected

00:14:44,240 --> 00:14:47,440
now that we've covered the basics of uh

00:14:46,560 --> 00:14:50,000
security

00:14:47,440 --> 00:14:52,480
uh and how those can you know be thought

00:14:50,000 --> 00:14:54,320
of in a devsecops context

00:14:52,480 --> 00:14:56,000
uh let's distill some of those lessons

00:14:54,320 --> 00:14:57,920
into some best practices

00:14:56,000 --> 00:14:59,600
uh but before we do that i'd like to add

00:14:57,920 --> 00:15:02,160
one additional best practice

00:14:59,600 --> 00:15:02,959
uh that that we here at mozzie think is

00:15:02,160 --> 00:15:04,560
crucial

00:15:02,959 --> 00:15:07,519
to maintaining a healthy development

00:15:04,560 --> 00:15:09,600
team and that is

00:15:07,519 --> 00:15:11,839
the developers should be empowered to be

00:15:09,600 --> 00:15:14,320
as self-sufficient as possible

00:15:11,839 --> 00:15:16,160
we love our developers and despite all

00:15:14,320 --> 00:15:17,760
the process and security constraints

00:15:16,160 --> 00:15:19,120
that we're talking about adding

00:15:17,760 --> 00:15:21,120
we want to make sure that they're done

00:15:19,120 --> 00:15:22,000
in a way that doesn't adversely affect

00:15:21,120 --> 00:15:24,560
our development

00:15:22,000 --> 00:15:26,560
a team's ability to move fast experiment

00:15:24,560 --> 00:15:28,399
and test new ideas and ultimately

00:15:26,560 --> 00:15:31,519
develop features quickly

00:15:28,399 --> 00:15:35,279
we're a startup moving at startup pace

00:15:31,519 --> 00:15:36,720
and to achieve that pace

00:15:35,279 --> 00:15:38,800
we need to be careful about what kinds

00:15:36,720 --> 00:15:41,199
of roadblocks we put in their way

00:15:38,800 --> 00:15:44,240
and so we think it's really important to

00:15:41,199 --> 00:15:45,759
empower developers as much as possible

00:15:44,240 --> 00:15:47,839
so now uh going on to some best

00:15:45,759 --> 00:15:51,360
practices uh first up

00:15:47,839 --> 00:15:54,320
uh one of the things that we think

00:15:51,360 --> 00:15:56,160
should be considered a best practice

00:15:54,320 --> 00:15:58,959
taking into account all of the

00:15:56,160 --> 00:16:00,000
uh security practices that we uh talked

00:15:58,959 --> 00:16:02,079
about before

00:16:00,000 --> 00:16:04,560
uh is that non-production environments

00:16:02,079 --> 00:16:06,800
should be considered ephemeral

00:16:04,560 --> 00:16:07,600
practice makes perfect uh or more

00:16:06,800 --> 00:16:10,320
accurately

00:16:07,600 --> 00:16:12,880
perfect practice makes perfect and by

00:16:10,320 --> 00:16:14,240
regularly repaving our non-production

00:16:12,880 --> 00:16:17,600
environments we gain

00:16:14,240 --> 00:16:19,839
a few things first we practice deploying

00:16:17,600 --> 00:16:22,240
and configuring our entire stack from

00:16:19,839 --> 00:16:24,240
scratch on a regular basis quickly

00:16:22,240 --> 00:16:26,720
identifying areas that we have yet to

00:16:24,240 --> 00:16:28,800
incorporate sufficient automation

00:16:26,720 --> 00:16:30,000
second we clear out any cruft that's no

00:16:28,800 --> 00:16:31,839
longer relevant

00:16:30,000 --> 00:16:33,600
to ensure that we aren't ignorantly

00:16:31,839 --> 00:16:34,959
relying on something that may have been

00:16:33,600 --> 00:16:37,680
done in the past

00:16:34,959 --> 00:16:39,120
potentially without any documentation

00:16:37,680 --> 00:16:41,120
there's nothing more frustrating than

00:16:39,120 --> 00:16:42,399
promoting code to a new environment only

00:16:41,120 --> 00:16:44,079
to find out it doesn't work because

00:16:42,399 --> 00:16:46,240
something about that environment was

00:16:44,079 --> 00:16:47,519
slightly different than the environment

00:16:46,240 --> 00:16:50,639
it came from

00:16:47,519 --> 00:16:53,199
with no discernible reason why

00:16:50,639 --> 00:16:54,639
ultimately the goal is to ensure that

00:16:53,199 --> 00:16:57,759
the integrity

00:16:54,639 --> 00:16:59,759
of our application is proven to

00:16:57,759 --> 00:17:01,279
ourselves on a regular basis

00:16:59,759 --> 00:17:03,759
and that we know exactly what we're

00:17:01,279 --> 00:17:05,600
deploying and we do this by wiping

00:17:03,759 --> 00:17:06,319
everything out and redeploying from

00:17:05,600 --> 00:17:08,400
scratch

00:17:06,319 --> 00:17:11,199
regularly with what we believe is

00:17:08,400 --> 00:17:13,919
necessary to run our product

00:17:11,199 --> 00:17:14,559
next nothing should be promoted or

00:17:13,919 --> 00:17:17,520
deployed

00:17:14,559 --> 00:17:18,880
except by automation similarly to the

00:17:17,520 --> 00:17:20,640
previous best practice

00:17:18,880 --> 00:17:22,079
this helps us ensure that the integrity

00:17:20,640 --> 00:17:24,480
of our product uh

00:17:22,079 --> 00:17:26,240
is is maintained because each promotion

00:17:24,480 --> 00:17:27,280
or development is done in a way that can

00:17:26,240 --> 00:17:29,120
be audited

00:17:27,280 --> 00:17:31,360
and doesn't rely on a human being

00:17:29,120 --> 00:17:32,480
following a checklist perfectly every

00:17:31,360 --> 00:17:33,760
time

00:17:32,480 --> 00:17:35,840
it also helps us preserve

00:17:33,760 --> 00:17:37,760
confidentiality of our environments

00:17:35,840 --> 00:17:39,679
because humans no longer need privileged

00:17:37,760 --> 00:17:41,679
access to those environments to do the

00:17:39,679 --> 00:17:43,200
deployments

00:17:41,679 --> 00:17:45,600
if you're doing your development in the

00:17:43,200 --> 00:17:46,720
cloud confidentiality can be further

00:17:45,600 --> 00:17:48,559
preserved

00:17:46,720 --> 00:17:50,640
by using different cloud environments

00:17:48,559 --> 00:17:53,440
for dev test and prod

00:17:50,640 --> 00:17:55,200
further limiting the access that certain

00:17:53,440 --> 00:17:58,000
humans need to have

00:17:55,200 --> 00:18:00,160
to those environments for us this gave

00:17:58,000 --> 00:18:00,960
us the freedom to grant more access to

00:18:00,160 --> 00:18:03,679
our developers

00:18:00,960 --> 00:18:04,880
in our development environment uh and we

00:18:03,679 --> 00:18:07,679
could do this because we

00:18:04,880 --> 00:18:09,440
can regularly repave it uh and so we're

00:18:07,679 --> 00:18:10,799
less concerned with uh

00:18:09,440 --> 00:18:12,480
you know that that craft that could

00:18:10,799 --> 00:18:15,600
accumulate or or

00:18:12,480 --> 00:18:18,400
things that might be done by uh you know

00:18:15,600 --> 00:18:19,679
by developers who you know don't

00:18:18,400 --> 00:18:20,640
necessarily know what they're doing in

00:18:19,679 --> 00:18:23,600
all cases

00:18:20,640 --> 00:18:25,679
uh but then also give no access at all

00:18:23,600 --> 00:18:27,679
uh to our test and prod environments

00:18:25,679 --> 00:18:29,200
uh of course outside of you know our

00:18:27,679 --> 00:18:32,960
devops staff and and

00:18:29,200 --> 00:18:35,039
automation tools next

00:18:32,960 --> 00:18:36,640
this hopefully is obvious uh practice

00:18:35,039 --> 00:18:38,720
defense in depth

00:18:36,640 --> 00:18:40,640
uh as we discussed earlier considering

00:18:38,720 --> 00:18:43,120
security implications at the end is

00:18:40,640 --> 00:18:46,000
unnecessary but not sufficient step

00:18:43,120 --> 00:18:47,840
in achieving actual security consider

00:18:46,000 --> 00:18:48,480
the implications along each step of the

00:18:47,840 --> 00:18:50,480
process

00:18:48,480 --> 00:18:53,840
and how adverse events during each step

00:18:50,480 --> 00:18:56,480
could compromise security later on

00:18:53,840 --> 00:18:57,679
finally educate yourself and find

00:18:56,480 --> 00:18:59,520
inspiration

00:18:57,679 --> 00:19:01,600
uh when we were considering our own

00:18:59,520 --> 00:19:02,559
process we were influenced by a number

00:19:01,600 --> 00:19:05,120
of sources

00:19:02,559 --> 00:19:06,880
first we drew from our own experiences

00:19:05,120 --> 00:19:08,080
things that went well or poorly in the

00:19:06,880 --> 00:19:11,039
past

00:19:08,080 --> 00:19:13,120
next we asked both present and former

00:19:11,039 --> 00:19:16,320
colleagues about their experiences

00:19:13,120 --> 00:19:17,919
and drew from the wisdom gained there uh

00:19:16,320 --> 00:19:19,679
we also surveyed blog articles

00:19:17,919 --> 00:19:21,360
conference talks and other writings or

00:19:19,679 --> 00:19:23,840
presentations on the topic to try and

00:19:21,360 --> 00:19:25,600
benefit from others experiences

00:19:23,840 --> 00:19:28,080
personally i always enjoy listening to

00:19:25,600 --> 00:19:31,440
talks from engineers at you know

00:19:28,080 --> 00:19:32,799
places like netflix or google or amazon

00:19:31,440 --> 00:19:35,039
or others that have had to solve

00:19:32,799 --> 00:19:36,480
problems at a complexity or scale

00:19:35,039 --> 00:19:38,320
that i have not yet had the pleasure of

00:19:36,480 --> 00:19:40,880
experiencing myself

00:19:38,320 --> 00:19:42,400
the hard earned hard-earned wisdom that

00:19:40,880 --> 00:19:43,679
is shared by those engineers can be

00:19:42,400 --> 00:19:44,960
invaluable

00:19:43,679 --> 00:19:47,120
letting you learn from difficult

00:19:44,960 --> 00:19:50,240
challenges without having to experience

00:19:47,120 --> 00:19:51,600
that same challenge yourself we also

00:19:50,240 --> 00:19:52,080
drew inspiration from what may be

00:19:51,600 --> 00:19:54,720
considered

00:19:52,080 --> 00:19:55,360
an unlikely source for the past few

00:19:54,720 --> 00:19:57,280
years

00:19:55,360 --> 00:19:58,480
the united states air force has been

00:19:57,280 --> 00:20:00,799
compiling a list of

00:19:58,480 --> 00:20:02,000
software development best practices and

00:20:00,799 --> 00:20:06,320
recommendations for

00:20:02,000 --> 00:20:08,080
implementing a robust devsecops practice

00:20:06,320 --> 00:20:10,080
uh and has published a reference design

00:20:08,080 --> 00:20:13,360
on their website

00:20:10,080 --> 00:20:15,679
uh this is uh one one instance of

00:20:13,360 --> 00:20:16,720
of uh of one of the graphics that they

00:20:15,679 --> 00:20:20,000
have there

00:20:16,720 --> 00:20:20,640
uh and uh while some aspects of the

00:20:20,000 --> 00:20:23,760
design

00:20:20,640 --> 00:20:25,679
are specific to the defense department

00:20:23,760 --> 00:20:26,799
the recommendations to achieve a secure

00:20:25,679 --> 00:20:29,440
delivery process

00:20:26,799 --> 00:20:31,039
are widely applicable and served as a

00:20:29,440 --> 00:20:32,720
great starting point for us as we

00:20:31,039 --> 00:20:34,159
considered our own process

00:20:32,720 --> 00:20:35,840
if you're interested and want to read

00:20:34,159 --> 00:20:37,840
more uh links will

00:20:35,840 --> 00:20:40,320
be available at the end of this

00:20:37,840 --> 00:20:42,320
presentation

00:20:40,320 --> 00:20:43,600
finally today uh let's work through a

00:20:42,320 --> 00:20:45,600
practical example

00:20:43,600 --> 00:20:47,280
uh of how to put these principles and

00:20:45,600 --> 00:20:48,320
best practices that we've discussed to

00:20:47,280 --> 00:20:50,640
use

00:20:48,320 --> 00:20:51,600
this will by no means be a complete

00:20:50,640 --> 00:20:53,360
example

00:20:51,600 --> 00:20:55,440
and of course your requirements may

00:20:53,360 --> 00:20:58,640
differ significantly

00:20:55,440 --> 00:20:59,200
from this example scenario so first off

00:20:58,640 --> 00:21:02,000
let's

00:20:59,200 --> 00:21:03,360
let's make some assumptions let's assume

00:21:02,000 --> 00:21:05,520
that we're going to be doing cloud-based

00:21:03,360 --> 00:21:07,360
development in aws

00:21:05,520 --> 00:21:09,280
let's assume that we're going to be

00:21:07,360 --> 00:21:11,679
building a kubernetes-based micro

00:21:09,280 --> 00:21:14,000
service application

00:21:11,679 --> 00:21:16,080
let's assume also that we are using a

00:21:14,000 --> 00:21:18,159
self-hosted git lab or jenkins

00:21:16,080 --> 00:21:20,080
for doing source code management and

00:21:18,159 --> 00:21:21,600
continuous integration

00:21:20,080 --> 00:21:23,120
uh and finally because this is a

00:21:21,600 --> 00:21:24,400
spinnaker conference uh

00:21:23,120 --> 00:21:26,559
let's assume that we're gonna be using

00:21:24,400 --> 00:21:28,320
spinnaker for delivery uh

00:21:26,559 --> 00:21:29,679
there are many reasons to use spinnaker

00:21:28,320 --> 00:21:32,480
for delivery uh

00:21:29,679 --> 00:21:34,240
i'm sure there are if you're at this

00:21:32,480 --> 00:21:37,679
conference you're already well aware

00:21:34,240 --> 00:21:38,559
of the uh amazing track record that

00:21:37,679 --> 00:21:41,120
spinnaker has

00:21:38,559 --> 00:21:43,039
for for doing complex deployments

00:21:41,120 --> 00:21:46,400
multi-region or multi-cloud

00:21:43,039 --> 00:21:49,440
blue green canary

00:21:46,400 --> 00:21:50,720
and all that good stuff but there are

00:21:49,440 --> 00:21:52,320
there are other reasons why you might

00:21:50,720 --> 00:21:53,360
want to consider using a separate

00:21:52,320 --> 00:21:55,679
delivery tool

00:21:53,360 --> 00:21:57,200
uh from your integration tool rather

00:21:55,679 --> 00:21:59,760
than have for example

00:21:57,200 --> 00:22:01,760
uh jenkins do both uh and we'll so we'll

00:21:59,760 --> 00:22:03,679
talk about that uh when we get to

00:22:01,760 --> 00:22:05,600
delivery

00:22:03,679 --> 00:22:07,039
uh so next let's talk about our

00:22:05,600 --> 00:22:08,559
infrastructure because ultimately

00:22:07,039 --> 00:22:10,880
if we're doing development we're doing

00:22:08,559 --> 00:22:11,919
development on infrastructure of some

00:22:10,880 --> 00:22:14,240
sort

00:22:11,919 --> 00:22:16,159
and so to follow our best practice that

00:22:14,240 --> 00:22:19,039
we established earlier

00:22:16,159 --> 00:22:20,159
let's use separate ops dev test and prod

00:22:19,039 --> 00:22:22,480
accounts

00:22:20,159 --> 00:22:24,080
this allows us to set the users who have

00:22:22,480 --> 00:22:27,919
access to those environments

00:22:24,080 --> 00:22:31,679
separately so that we can give our

00:22:27,919 --> 00:22:34,559
uh our devops team

00:22:31,679 --> 00:22:35,760
access to the aws console for example in

00:22:34,559 --> 00:22:38,159
the ops account

00:22:35,760 --> 00:22:39,200
the ability to deploy new tools uh and

00:22:38,159 --> 00:22:41,840
services

00:22:39,200 --> 00:22:43,039
uh but none of the developers uh you

00:22:41,840 --> 00:22:46,000
know so that way

00:22:43,039 --> 00:22:46,320
uh they have access to the tools there

00:22:46,000 --> 00:22:48,080
uh

00:22:46,320 --> 00:22:50,000
but not access to any of the underlying

00:22:48,080 --> 00:22:51,280
infrastructure uh but in your dev

00:22:50,000 --> 00:22:52,799
account you may want to give

00:22:51,280 --> 00:22:54,480
your developers access to that

00:22:52,799 --> 00:22:57,280
underlying infrastructure for debugging

00:22:54,480 --> 00:23:00,640
purposes for experimentation

00:22:57,280 --> 00:23:02,720
and alike but as we discussed earlier

00:23:00,640 --> 00:23:04,880
leaving your test and prod accounts

00:23:02,720 --> 00:23:07,360
largely untouched except by automation

00:23:04,880 --> 00:23:09,679
has a tremendous amount of value

00:23:07,360 --> 00:23:12,240
to ensure that everything running in

00:23:09,679 --> 00:23:15,120
those environments is repeatable

00:23:12,240 --> 00:23:16,799
it can be audited uh done by automation

00:23:15,120 --> 00:23:18,240
so that it's done exactly the same way

00:23:16,799 --> 00:23:21,679
every time

00:23:18,240 --> 00:23:22,799
ultimately to establish that provenance

00:23:21,679 --> 00:23:24,960
and confidence

00:23:22,799 --> 00:23:27,840
uh in in the artifacts that ultimately

00:23:24,960 --> 00:23:30,880
make it to production

00:23:27,840 --> 00:23:32,400
uh so as as we said earlier gitlab and

00:23:30,880 --> 00:23:35,600
spinnaker

00:23:32,400 --> 00:23:37,360
will be installed in the ops account

00:23:35,600 --> 00:23:40,320
and we're going to use infrastructure as

00:23:37,360 --> 00:23:41,840
code for the application environment

00:23:40,320 --> 00:23:44,000
one of our best practices we talked

00:23:41,840 --> 00:23:47,600
about before was

00:23:44,000 --> 00:23:50,080
the ability to consider non-production

00:23:47,600 --> 00:23:51,520
environments to be ephemeral and so one

00:23:50,080 --> 00:23:52,320
way that we can achieve that is to

00:23:51,520 --> 00:23:54,960
ensure that

00:23:52,320 --> 00:23:57,279
all of the infrastructure necessary to

00:23:54,960 --> 00:24:00,400
run our application environment

00:23:57,279 --> 00:24:02,080
is uh is done by infrastructure as code

00:24:00,400 --> 00:24:04,159
so something that can be applied over

00:24:02,080 --> 00:24:05,679
and over again

00:24:04,159 --> 00:24:07,919
you know so that we can repave those

00:24:05,679 --> 00:24:11,440
environments create new ones

00:24:07,919 --> 00:24:14,880
on demand etc

00:24:11,440 --> 00:24:17,200
next let's talk about asset management

00:24:14,880 --> 00:24:18,960
so you have source code you have

00:24:17,200 --> 00:24:22,559
artifact repositories

00:24:18,960 --> 00:24:23,200
uh and and and other things uh that are

00:24:22,559 --> 00:24:25,679
assets

00:24:23,200 --> 00:24:26,480
uh to be managed as part of your process

00:24:25,679 --> 00:24:29,039
so

00:24:26,480 --> 00:24:31,039
uh because we might want to allow

00:24:29,039 --> 00:24:34,159
multiple kinds of developers

00:24:31,039 --> 00:24:37,039
uh to uh to contribute

00:24:34,159 --> 00:24:38,880
to our application uh you know think

00:24:37,039 --> 00:24:40,799
about separating your repos

00:24:38,880 --> 00:24:42,640
into different you know git lab or

00:24:40,799 --> 00:24:44,240
github organizations

00:24:42,640 --> 00:24:46,799
uh with different levels of access

00:24:44,240 --> 00:24:48,320
control based on the confidentiality

00:24:46,799 --> 00:24:50,320
required for those components

00:24:48,320 --> 00:24:52,159
so you may want your infrastructure as

00:24:50,320 --> 00:24:54,799
code in a different

00:24:52,159 --> 00:24:56,320
organization from your application code

00:24:54,799 --> 00:24:59,360
uh so that your

00:24:56,320 --> 00:25:00,799
devops team has access to it but your

00:24:59,360 --> 00:25:03,840
development team does not

00:25:00,799 --> 00:25:07,360
similarly if you have security code or

00:25:03,840 --> 00:25:10,480
things that are proprietary or

00:25:07,360 --> 00:25:12,559
you know you know

00:25:10,480 --> 00:25:14,400
part of patent applications or things

00:25:12,559 --> 00:25:15,440
like that you might want to keep those

00:25:14,400 --> 00:25:17,360
separate from

00:25:15,440 --> 00:25:20,000
uh from just your normal like api

00:25:17,360 --> 00:25:23,679
services or things like that

00:25:20,000 --> 00:25:26,559
uh your continuous integration server

00:25:23,679 --> 00:25:27,440
whatever that is uh the access to that

00:25:26,559 --> 00:25:30,640
should match

00:25:27,440 --> 00:25:31,360
the repository access so again we want

00:25:30,640 --> 00:25:34,480
to empower

00:25:31,360 --> 00:25:36,159
our developers as much as possible and

00:25:34,480 --> 00:25:38,640
one way to empower developers

00:25:36,159 --> 00:25:41,039
is to let them figure out whatever's

00:25:38,640 --> 00:25:42,720
necessary to build their code

00:25:41,039 --> 00:25:44,400
and since that's done by our continuous

00:25:42,720 --> 00:25:46,000
integration server uh

00:25:44,400 --> 00:25:47,679
if they have access to the repository

00:25:46,000 --> 00:25:51,039
they should be able to see the results

00:25:47,679 --> 00:25:52,559
uh and even edit the process for um

00:25:51,039 --> 00:25:55,440
you know for how how their particular

00:25:52,559 --> 00:25:59,520
application gets built

00:25:55,440 --> 00:26:01,279
uh artifact repositories uh

00:25:59,520 --> 00:26:02,559
i would humbly suggest that uh you

00:26:01,279 --> 00:26:03,760
should configure your artifact

00:26:02,559 --> 00:26:08,400
repositories to be

00:26:03,760 --> 00:26:10,480
only read to be read only by humans uh

00:26:08,400 --> 00:26:12,320
in order to have the repeatability uh

00:26:10,480 --> 00:26:13,360
and and help to establish again that

00:26:12,320 --> 00:26:16,400
that integrity

00:26:13,360 --> 00:26:18,640
uh of of your artifacts uh if

00:26:16,400 --> 00:26:19,440
if the only way for artifacts to make it

00:26:18,640 --> 00:26:22,320
into that

00:26:19,440 --> 00:26:24,320
repository is through your automation uh

00:26:22,320 --> 00:26:27,520
then you have a uh

00:26:24,320 --> 00:26:30,880
deterministic and auditable uh path

00:26:27,520 --> 00:26:33,679
for anything that goes in there uh and

00:26:30,880 --> 00:26:34,240
and so uh you want to turn on things

00:26:33,679 --> 00:26:37,440
like

00:26:34,240 --> 00:26:40,480
uh you know our back as well for

00:26:37,440 --> 00:26:42,000
for things like kubernetes aws and

00:26:40,480 --> 00:26:43,919
prevent humans from making manual

00:26:42,000 --> 00:26:47,600
changes as much as possible

00:26:43,919 --> 00:26:49,760
especially in your higher environments

00:26:47,600 --> 00:26:51,440
and finally secure spinnaker to protect

00:26:49,760 --> 00:26:52,960
environment secrets

00:26:51,440 --> 00:26:55,039
this is one of the big advantages of

00:26:52,960 --> 00:26:56,720
having a separate continuous delivery

00:26:55,039 --> 00:26:57,520
product from a continuous integration

00:26:56,720 --> 00:27:00,000
product

00:26:57,520 --> 00:27:02,880
uh not only does it allow you to take

00:27:00,000 --> 00:27:06,240
advantage of things like get ops

00:27:02,880 --> 00:27:09,919
but it also allows you to

00:27:06,240 --> 00:27:14,159
have all of your environment secrets in

00:27:09,919 --> 00:27:15,840
one place that requires a smaller amount

00:27:14,159 --> 00:27:19,120
of access

00:27:15,840 --> 00:27:20,000
than your build tools do so you might

00:27:19,120 --> 00:27:22,480
provide read-only

00:27:20,000 --> 00:27:24,080
access to the status of deployments to

00:27:22,480 --> 00:27:26,320
your developers

00:27:24,080 --> 00:27:28,320
but not allow them to see any of the

00:27:26,320 --> 00:27:30,960
configuration or secrets

00:27:28,320 --> 00:27:33,039
uh for the environments themselves those

00:27:30,960 --> 00:27:36,720
can be managed by your smaller

00:27:33,039 --> 00:27:38,159
teams of dev devops folks

00:27:36,720 --> 00:27:39,919
and so in addition to all the great

00:27:38,159 --> 00:27:42,720
things that spinnaker

00:27:39,919 --> 00:27:43,600
does in terms of delivery which there

00:27:42,720 --> 00:27:46,799
are many many

00:27:43,600 --> 00:27:48,720
talks at this conference about using

00:27:46,799 --> 00:27:51,760
spinnaker can also help to improve

00:27:48,720 --> 00:27:55,200
your security uh by keeping

00:27:51,760 --> 00:27:58,240
uh the thing that has access to your

00:27:55,200 --> 00:28:00,240
actual environments uh you know

00:27:58,240 --> 00:28:02,080
having a centralized place that can have

00:28:00,240 --> 00:28:06,080
a smaller level of access

00:28:02,080 --> 00:28:07,760
by humans to to make to control

00:28:06,080 --> 00:28:10,399
uh all of the changes in those

00:28:07,760 --> 00:28:10,399
environments

00:28:10,640 --> 00:28:13,919
so now let's talk about the build phase

00:28:12,720 --> 00:28:16,559
uh of

00:28:13,919 --> 00:28:18,240
uh of a devsecops process and and some

00:28:16,559 --> 00:28:19,760
of the ways that we might apply some of

00:28:18,240 --> 00:28:21,120
these principles uh that we've talked

00:28:19,760 --> 00:28:24,240
about

00:28:21,120 --> 00:28:26,000
first uh we could require passing tests

00:28:24,240 --> 00:28:27,919
before uh merge requests or pull

00:28:26,000 --> 00:28:30,720
requests uh can be integrated with your

00:28:27,919 --> 00:28:30,720
main branches

00:28:30,880 --> 00:28:35,039
you know both gitlab and github provide

00:28:33,679 --> 00:28:37,919
this capability

00:28:35,039 --> 00:28:39,679
and uh and it's a great way to ensure

00:28:37,919 --> 00:28:42,080
that you don't accumulate too much tech

00:28:39,679 --> 00:28:45,600
debt uh or things that will need to be

00:28:42,080 --> 00:28:47,120
fixed later on uh you know check for

00:28:45,600 --> 00:28:49,520
you know check for certain really

00:28:47,120 --> 00:28:51,600
important passing tests before you let

00:28:49,520 --> 00:28:53,200
anything get merged into your mainline

00:28:51,600 --> 00:28:55,039
branches

00:28:53,200 --> 00:28:57,440
uh so you might consider things like

00:28:55,039 --> 00:28:59,279
linting uh for consistency

00:28:57,440 --> 00:29:01,919
consistency is important especially if

00:28:59,279 --> 00:29:03,840
you have a large development team

00:29:01,919 --> 00:29:05,360
that has different people working on

00:29:03,840 --> 00:29:08,080
code

00:29:05,360 --> 00:29:09,279
unit tests for quality this one

00:29:08,080 --> 00:29:11,200
hopefully is pretty obvious

00:29:09,279 --> 00:29:12,799
but if you have unit tests you probably

00:29:11,200 --> 00:29:16,320
want to make sure that they pass

00:29:12,799 --> 00:29:17,600
before you consider merging anything

00:29:16,320 --> 00:29:21,120
you might want to check open source

00:29:17,600 --> 00:29:23,760
licenses or or dependency trees

00:29:21,120 --> 00:29:24,960
for any legal ramifications to make sure

00:29:23,760 --> 00:29:28,000
that you don't

00:29:24,960 --> 00:29:30,159
include software that might you know

00:29:28,000 --> 00:29:33,919
have some

00:29:30,159 --> 00:29:35,760
additional baggage with it uh

00:29:33,919 --> 00:29:38,080
it's also highly recommended to run

00:29:35,760 --> 00:29:39,840
static application security tests

00:29:38,080 --> 00:29:41,679
uh looking for thing you know checking

00:29:39,840 --> 00:29:44,720
against the uh oh

00:29:41,679 --> 00:29:48,159
top ten uh or you know

00:29:44,720 --> 00:29:51,279
checking for uh sequel injection attacks

00:29:48,159 --> 00:29:52,880
or uh embedded secrets uh

00:29:51,279 --> 00:29:54,960
or or other things that are sort of

00:29:52,880 --> 00:29:57,360
known to be bad

00:29:54,960 --> 00:30:00,640
you know security can start right here

00:29:57,360 --> 00:30:00,640
with your source code itself

00:30:01,120 --> 00:30:04,799
next let's talk about the packaging

00:30:02,480 --> 00:30:04,799
phase

00:30:04,960 --> 00:30:11,440
where at all possible use hardened

00:30:08,000 --> 00:30:13,039
cve free base images this can also

00:30:11,440 --> 00:30:13,760
include things like checks to make sure

00:30:13,039 --> 00:30:16,480
that they don't

00:30:13,760 --> 00:30:17,440
run as root uh that they don't require

00:30:16,480 --> 00:30:20,399
elevated

00:30:17,440 --> 00:30:20,880
uh container permissions like accessing

00:30:20,399 --> 00:30:23,919
the

00:30:20,880 --> 00:30:27,279
uh the host uh file system

00:30:23,919 --> 00:30:28,240
the raw networking stack uh can make uh

00:30:27,279 --> 00:30:31,840
elevated sys

00:30:28,240 --> 00:30:33,919
calls uh you know those kinds of things

00:30:31,840 --> 00:30:36,080
so you know start from a known good

00:30:33,919 --> 00:30:38,640
state wherever possible

00:30:36,080 --> 00:30:42,080
when you're packaging up your software

00:30:38,640 --> 00:30:44,559
especially if you're using containers

00:30:42,080 --> 00:30:46,080
next again if you're using containers or

00:30:44,559 --> 00:30:47,919
even if you're using an artifact

00:30:46,080 --> 00:30:51,679
repository in general

00:30:47,919 --> 00:30:52,880
use tag immutability once a tag is

00:30:51,679 --> 00:30:55,600
created

00:30:52,880 --> 00:30:57,120
you want to make sure that the content

00:30:55,600 --> 00:30:59,600
in that tag

00:30:57,120 --> 00:31:01,600
doesn't change so that you have again

00:30:59,600 --> 00:31:04,159
that established provenance

00:31:01,600 --> 00:31:04,720
if you ever have to go back and review

00:31:04,159 --> 00:31:08,000
uh

00:31:04,720 --> 00:31:10,240
and in general uh never use latest uh

00:31:08,000 --> 00:31:11,519
unless it really makes sense and the and

00:31:10,240 --> 00:31:14,159
the particular version

00:31:11,519 --> 00:31:15,679
uh you know it doesn't doesn't matter or

00:31:14,159 --> 00:31:18,559
if every new version

00:31:15,679 --> 00:31:19,120
always supersedes the version before it

00:31:18,559 --> 00:31:20,720
uh

00:31:19,120 --> 00:31:22,000
but obviously if you use something like

00:31:20,720 --> 00:31:23,840
latest you can't turn on tag

00:31:22,000 --> 00:31:26,080
immutability so consider

00:31:23,840 --> 00:31:27,440
uh you know not using latest and turning

00:31:26,080 --> 00:31:32,159
on tag immutability

00:31:27,440 --> 00:31:33,120
uh to to achieve that uh um uh

00:31:32,159 --> 00:31:35,840
confidence that

00:31:33,120 --> 00:31:36,960
uh your your the content behind that

00:31:35,840 --> 00:31:40,240
doesn't get swapped out

00:31:36,960 --> 00:31:41,120
uh at some point along the road uh where

00:31:40,240 --> 00:31:43,039
possible

00:31:41,120 --> 00:31:44,240
notarize or digitally sign your

00:31:43,039 --> 00:31:45,600
artifacts uh

00:31:44,240 --> 00:31:47,600
these are things that can be checked

00:31:45,600 --> 00:31:50,320
later to ensure that nothing has

00:31:47,600 --> 00:31:52,000
uh been changed out unexpectedly uh on

00:31:50,320 --> 00:31:52,880
the road from development into

00:31:52,000 --> 00:31:54,640
production

00:31:52,880 --> 00:31:56,320
uh and this is especially important if

00:31:54,640 --> 00:31:58,480
you're shipping your product uh

00:31:56,320 --> 00:31:59,519
and and don't run your own production uh

00:31:58,480 --> 00:32:02,159
but ship it to

00:31:59,519 --> 00:32:03,840
to run in a in a customer environment

00:32:02,159 --> 00:32:06,320
this allows your customers to

00:32:03,840 --> 00:32:07,840
to verify the digital signature uh to

00:32:06,320 --> 00:32:08,720
make sure that the artifact that they've

00:32:07,840 --> 00:32:10,159
downloaded

00:32:08,720 --> 00:32:12,840
and are running on their own

00:32:10,159 --> 00:32:14,799
infrastructure is the same one that you

00:32:12,840 --> 00:32:17,679
shipped

00:32:14,799 --> 00:32:19,360
and finally i would put forward that the

00:32:17,679 --> 00:32:21,360
packaging phase is where continuous

00:32:19,360 --> 00:32:23,919
integration should end

00:32:21,360 --> 00:32:25,360
we talked briefly earlier about the

00:32:23,919 --> 00:32:27,200
value of having your continuous

00:32:25,360 --> 00:32:30,320
integration and your delivery

00:32:27,200 --> 00:32:33,360
uh be separate uh and

00:32:30,320 --> 00:32:33,919
uh and among the values of being

00:32:33,360 --> 00:32:35,600
separate

00:32:33,919 --> 00:32:37,600
uh are the security things we've talked

00:32:35,600 --> 00:32:39,200
about before uh but this also lets you

00:32:37,600 --> 00:32:41,760
take advantage of practices

00:32:39,200 --> 00:32:44,480
practices like get ops where you can

00:32:41,760 --> 00:32:46,960
push your artifact into a repository

00:32:44,480 --> 00:32:48,159
that could then either trigger some web

00:32:46,960 --> 00:32:51,360
hook

00:32:48,159 --> 00:32:53,679
or you could update you know a git

00:32:51,360 --> 00:32:55,360
repository with the new tag that was

00:32:53,679 --> 00:32:56,480
just pushed which would then trigger off

00:32:55,360 --> 00:33:00,080
a deployment

00:32:56,480 --> 00:33:02,880
to follow the get ops model but

00:33:00,080 --> 00:33:04,159
the ci process uh you know can end with

00:33:02,880 --> 00:33:06,799
the packaging

00:33:04,159 --> 00:33:07,600
of that artifact and then hand that off

00:33:06,799 --> 00:33:11,039
to

00:33:07,600 --> 00:33:11,519
another process set of tools responsible

00:33:11,039 --> 00:33:14,559
people

00:33:11,519 --> 00:33:15,600
etc to handle taking those artifacts and

00:33:14,559 --> 00:33:18,960
pushing those into

00:33:15,600 --> 00:33:18,960
the appropriate environments

00:33:19,200 --> 00:33:24,080
next in the deployment phase as we just

00:33:22,480 --> 00:33:26,720
talked about consider using a different

00:33:24,080 --> 00:33:29,039
tool or at least a different instance uh

00:33:26,720 --> 00:33:31,200
for handling deployment and delivery uh

00:33:29,039 --> 00:33:33,039
rather than building integration uh

00:33:31,200 --> 00:33:35,200
we've talked about this a bit already

00:33:33,039 --> 00:33:36,559
uh and this is one instance where using

00:33:35,200 --> 00:33:38,720
a tool like spinnaker

00:33:36,559 --> 00:33:41,039
can be really really useful uh something

00:33:38,720 --> 00:33:41,760
that's dedicated exclusively on doing

00:33:41,039 --> 00:33:45,200
deployment

00:33:41,760 --> 00:33:47,519
and delivery really really well

00:33:45,200 --> 00:33:48,240
and then leaves the build and

00:33:47,519 --> 00:33:51,200
integration

00:33:48,240 --> 00:33:52,480
steps to to tools like jenkins or get

00:33:51,200 --> 00:33:55,600
lab ci

00:33:52,480 --> 00:33:56,799
uh you know that are that are um more

00:33:55,600 --> 00:34:00,320
geared towards those

00:33:56,799 --> 00:34:02,320
uh task uh or or you know our arbitrary

00:34:00,320 --> 00:34:06,480
sequence of steps uh you know

00:34:02,320 --> 00:34:07,919
kinds of uh processes or pipelines

00:34:06,480 --> 00:34:10,159
it's important if you're going to create

00:34:07,919 --> 00:34:12,639
digital signatures to verify them

00:34:10,159 --> 00:34:14,399
before you do a deployment uh if you

00:34:12,639 --> 00:34:16,399
were signing them but not checking them

00:34:14,399 --> 00:34:18,320
why are you signing them at all so

00:34:16,399 --> 00:34:21,760
verify your digital signatures

00:34:18,320 --> 00:34:23,359
uh use git ops as we talked about

00:34:21,760 --> 00:34:24,879
and finally we get to the promotion

00:34:23,359 --> 00:34:28,000
phase

00:34:24,879 --> 00:34:31,119
uh and it's again important as

00:34:28,000 --> 00:34:33,839
uh code or artifacts uh

00:34:31,119 --> 00:34:34,720
move from your different environments uh

00:34:33,839 --> 00:34:37,520
if you remember

00:34:34,720 --> 00:34:39,200
we when we talked about the uh

00:34:37,520 --> 00:34:39,919
infrastructure setup we have different

00:34:39,200 --> 00:34:43,119
accounts

00:34:39,919 --> 00:34:46,159
for uh our dev and test and prod

00:34:43,119 --> 00:34:48,639
uh and so as artifacts move from one

00:34:46,159 --> 00:34:50,560
account into the other it's important to

00:34:48,639 --> 00:34:52,800
verify those digital signatures

00:34:50,560 --> 00:34:55,200
maybe verify the test results and

00:34:52,800 --> 00:34:57,119
establish that artifact provenance

00:34:55,200 --> 00:34:58,720
before it's allowed to cross that

00:34:57,119 --> 00:35:02,560
boundary from one environment

00:34:58,720 --> 00:35:06,240
into the other so that way you have a

00:35:02,560 --> 00:35:07,920
very definable way for artifacts to make

00:35:06,240 --> 00:35:10,160
it into that environment

00:35:07,920 --> 00:35:11,280
uh it reduces your potential attack

00:35:10,160 --> 00:35:13,839
surface or

00:35:11,280 --> 00:35:14,960
or area that you need to uh cover with

00:35:13,839 --> 00:35:17,520
automation or or

00:35:14,960 --> 00:35:20,240
checks or access control or or all of

00:35:17,520 --> 00:35:22,079
various tools at your disposal

00:35:20,240 --> 00:35:23,520
and then once it makes it into that

00:35:22,079 --> 00:35:25,119
environment then you

00:35:23,520 --> 00:35:28,160
have the confidence that you can then

00:35:25,119 --> 00:35:28,160
deploy that normally

00:35:28,240 --> 00:35:34,560
again use git ops when possible uh

00:35:31,760 --> 00:35:35,760
in addition to allowing for certain

00:35:34,560 --> 00:35:39,040
levels of automation

00:35:35,760 --> 00:35:41,680
uh it also provides a record

00:35:39,040 --> 00:35:42,640
of all the changes uh so that you can

00:35:41,680 --> 00:35:45,680
verify

00:35:42,640 --> 00:35:48,079
uh and go back uh to to know who

00:35:45,680 --> 00:35:49,839
you know what was promoted when uh maybe

00:35:48,079 --> 00:35:53,119
who made that change

00:35:49,839 --> 00:35:55,359
uh and it gives you a a full record uh

00:35:53,119 --> 00:35:58,400
that can be audited for all the changes

00:35:55,359 --> 00:36:00,800
in your environment

00:35:58,400 --> 00:36:02,320
and finally uh consider using different

00:36:00,800 --> 00:36:05,359
artifact repositories

00:36:02,320 --> 00:36:08,480
uh any for uh for each instance

00:36:05,359 --> 00:36:10,480
uh of your environment so you could have

00:36:08,480 --> 00:36:11,359
a shared artifact repository that's used

00:36:10,480 --> 00:36:15,359
by devtest

00:36:11,359 --> 00:36:18,000
and prod but again that

00:36:15,359 --> 00:36:19,839
doesn't give you that boundary check uh

00:36:18,000 --> 00:36:21,440
to you know to move that in

00:36:19,839 --> 00:36:23,200
artifact from one environment to the

00:36:21,440 --> 00:36:25,359
next you can't

00:36:23,200 --> 00:36:27,200
accidentally deploy a development

00:36:25,359 --> 00:36:29,520
version of an artifact

00:36:27,200 --> 00:36:31,200
if that artifact never makes it to the

00:36:29,520 --> 00:36:33,839
repository that your

00:36:31,200 --> 00:36:34,880
production environment is configured to

00:36:33,839 --> 00:36:38,000
run against

00:36:34,880 --> 00:36:39,520
so consider using different artifact

00:36:38,000 --> 00:36:41,839
repository instances for each

00:36:39,520 --> 00:36:41,839
environment

00:36:42,240 --> 00:36:46,000
uh and finally in the delivery phase uh

00:36:44,960 --> 00:36:48,079
verify again

00:36:46,000 --> 00:36:49,680
uh your digital signatures test results

00:36:48,079 --> 00:36:52,000
and artifact provenance

00:36:49,680 --> 00:36:53,760
uh it's important that this is done at

00:36:52,000 --> 00:36:56,960
every step along the way

00:36:53,760 --> 00:37:00,400
to ensure that uh you know through

00:36:56,960 --> 00:37:03,599
you know an accident or negligence or

00:37:00,400 --> 00:37:05,760
or you know malicious intent uh

00:37:03,599 --> 00:37:07,040
that something you know can be swapped

00:37:05,760 --> 00:37:09,599
out along the way

00:37:07,040 --> 00:37:10,960
uh resulting in you deploying something

00:37:09,599 --> 00:37:13,040
that you didn't intend

00:37:10,960 --> 00:37:15,200
uh to especially your production

00:37:13,040 --> 00:37:18,160
environment uh remember one of our

00:37:15,200 --> 00:37:18,880
uh you know key takeaways uh when

00:37:18,160 --> 00:37:22,160
talking about

00:37:18,880 --> 00:37:23,680
integrity of your application uh is that

00:37:22,160 --> 00:37:24,400
you should always know what you are

00:37:23,680 --> 00:37:27,200
shipping

00:37:24,400 --> 00:37:27,760
uh and so you you know the way that you

00:37:27,200 --> 00:37:29,599
can do that

00:37:27,760 --> 00:37:31,280
is to verify all these things along the

00:37:29,599 --> 00:37:32,960
way

00:37:31,280 --> 00:37:34,400
uh consider whether you need human

00:37:32,960 --> 00:37:36,960
approval before delivery

00:37:34,400 --> 00:37:38,560
uh if you are you know somebody like

00:37:36,960 --> 00:37:39,680
netflix and you're doing thousands of

00:37:38,560 --> 00:37:42,240
deployments a day

00:37:39,680 --> 00:37:42,960
obviously humans don't scale that well

00:37:42,240 --> 00:37:46,400
uh

00:37:42,960 --> 00:37:47,280
but uh if you are a shipping product

00:37:46,400 --> 00:37:49,520
that runs

00:37:47,280 --> 00:37:51,520
you know in a customer environment or on

00:37:49,520 --> 00:37:52,960
premise or in a different environment

00:37:51,520 --> 00:37:55,440
from what your

00:37:52,960 --> 00:37:56,240
from where your development takes place

00:37:55,440 --> 00:37:57,520
in

00:37:56,240 --> 00:38:00,720
consider whether you need a human

00:37:57,520 --> 00:38:03,359
approval a change control board

00:38:00,720 --> 00:38:05,119
that can you know do additional security

00:38:03,359 --> 00:38:08,560
or documentation reviews

00:38:05,119 --> 00:38:11,440
uh before before that version

00:38:08,560 --> 00:38:11,440
is is shipped

00:38:11,839 --> 00:38:15,359
so in summary uh thank you for spending

00:38:14,800 --> 00:38:18,400
uh

00:38:15,359 --> 00:38:20,800
some time with me today uh and so

00:38:18,400 --> 00:38:21,680
key takeaways uh from this uh think

00:38:20,800 --> 00:38:24,880
ahead

00:38:21,680 --> 00:38:27,200
uh and and think about you know you know

00:38:24,880 --> 00:38:29,440
what you need to know about your process

00:38:27,200 --> 00:38:31,920
and about your tools and your assets

00:38:29,440 --> 00:38:33,599
uh and and then consider those those

00:38:31,920 --> 00:38:35,920
basic security principles

00:38:33,599 --> 00:38:37,200
uh you know know know what their needs

00:38:35,920 --> 00:38:38,720
to be protect you know know what needs

00:38:37,200 --> 00:38:41,520
protection

00:38:38,720 --> 00:38:43,280
uh establish a deterministic provenance

00:38:41,520 --> 00:38:45,920
for all of your production artifacts so

00:38:43,280 --> 00:38:48,480
that you know what you're shipping

00:38:45,920 --> 00:38:51,359
practice defense and depth you can't

00:38:48,480 --> 00:38:53,920
bolt on security at the end

00:38:51,359 --> 00:38:54,560
you know start from the very beginning

00:38:53,920 --> 00:38:57,040
and then

00:38:54,560 --> 00:38:59,520
check for the appropriate things along

00:38:57,040 --> 00:39:01,440
each step of the process

00:38:59,520 --> 00:39:02,960
empower your developers that's how you

00:39:01,440 --> 00:39:06,320
achieve velocity

00:39:02,960 --> 00:39:08,720
uh and uh you know of course

00:39:06,320 --> 00:39:10,640
automation is a powerful tool uh

00:39:08,720 --> 00:39:11,040
computers are great at doing the same

00:39:10,640 --> 00:39:13,040
thing

00:39:11,040 --> 00:39:14,400
over and over again exactly the same way

00:39:13,040 --> 00:39:17,359
every time

00:39:14,400 --> 00:39:18,000
humans are less good at that automation

00:39:17,359 --> 00:39:20,160
also

00:39:18,000 --> 00:39:21,760
gives you that documented uh

00:39:20,160 --> 00:39:24,800
auditability

00:39:21,760 --> 00:39:25,680
of of changes that are being made by by

00:39:24,800 --> 00:39:27,119
automation

00:39:25,680 --> 00:39:29,440
you can also control access to the

00:39:27,119 --> 00:39:32,480
automate automation

00:39:29,440 --> 00:39:34,320
for uh for confidentiality or other

00:39:32,480 --> 00:39:36,720
security reasons

00:39:34,320 --> 00:39:38,720
automation is a powerful tool use it as

00:39:36,720 --> 00:39:41,520
much as makes sense

00:39:38,720 --> 00:39:42,800
and look for inspiration this can be

00:39:41,520 --> 00:39:44,640
really complex

00:39:42,800 --> 00:39:46,160
every everybody's application is

00:39:44,640 --> 00:39:49,280
different uh

00:39:46,160 --> 00:39:50,960
and so you know look around uh you know

00:39:49,280 --> 00:39:54,320
see what other people are doing

00:39:50,960 --> 00:39:55,920
look for inspiration or ideas uh

00:39:54,320 --> 00:39:57,920
learn about things that you don't know

00:39:55,920 --> 00:39:59,680
that you don't know yet uh so that you

00:39:57,920 --> 00:40:02,480
can properly take those into account

00:39:59,680 --> 00:40:03,920
uh to reduce the possibility of uh

00:40:02,480 --> 00:40:07,599
unwelcome surprises

00:40:03,920 --> 00:40:09,280
uh later on so thank you for spending

00:40:07,599 --> 00:40:11,920
time with me today uh

00:40:09,280 --> 00:40:13,520
i really appreciate it and i'm going to

00:40:11,920 --> 00:40:17,040
leave some links up here

00:40:13,520 --> 00:40:19,119
for you that link back to uh that

00:40:17,040 --> 00:40:20,800
department of defense devsecops

00:40:19,119 --> 00:40:23,599
reference design

00:40:20,800 --> 00:40:24,640
in case any of you want to peruse that

00:40:23,599 --> 00:40:35,280
but thank you again

00:40:24,640 --> 00:40:35,280

YouTube URL: https://www.youtube.com/watch?v=t2on5IojjPU


