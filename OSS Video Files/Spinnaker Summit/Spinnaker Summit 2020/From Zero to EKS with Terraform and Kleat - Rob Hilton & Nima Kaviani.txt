Title: From Zero to EKS with Terraform and Kleat - Rob Hilton & Nima Kaviani
Publication date: 2021-01-17
Playlist: Spinnaker Summit 2020
Description: 
	Traditionally, bootstrapping Amazon EKS and Spinnaker has a reputation for being complex and challenging. In a world where "cloud native" means that processes should be declarative and easily repeatable, that sort of reputation tends to go against the grain. However, today's modern open-source tooling has matured dramatically over the last few years, and alongside that tooling we ask a simple question: "Who says it has to be difficult?" In this talk, we'll explore what it takes to build a fully-automated declarative pipeline for bootstrapping Amazon EKS and Spinnaker that uses only open-source tools. From Spinnaker's new Kubernetes-native deployment tool, Kleat, to Terraform and Weaveworks Flux, we'll break down each individual tool, where it best fits, and how they interoperate. We'll also explore "the power of opinionation," and showcase how customizing these pipelines to your organization can maximize the efficiency you get from AWS while minimizing your operational burden. The end result will be a single-command pipeline that takes a (mostly) empty AWS account and turns it into a production-ready playground with Kubernetes and Spinnaker at the ready!
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:06,000 --> 00:00:09,440
okay

00:00:06,640 --> 00:00:11,599
hello and welcome to from zero to eks

00:00:09,440 --> 00:00:13,679
and spinnaker using terraform and cleat

00:00:11,599 --> 00:00:15,519
my name is rob hilton i am a principal

00:00:13,679 --> 00:00:17,359
solutions architect with aws

00:00:15,519 --> 00:00:19,119
and i'm joined by my esteemed friend and

00:00:17,359 --> 00:00:21,279
colleague

00:00:19,119 --> 00:00:23,680
hello everyone my name is nima caviani

00:00:21,279 --> 00:00:25,599
principal solutions architect with aws

00:00:23,680 --> 00:00:29,039
and happy to talk to you about

00:00:25,599 --> 00:00:30,800
kubernetes and deployment of spinnaker

00:00:29,039 --> 00:00:32,800
neiman and i are long time open source

00:00:30,800 --> 00:00:33,680
fans and also long time cubernauts and

00:00:32,800 --> 00:00:35,280
we spend a lot of

00:00:33,680 --> 00:00:37,200
time annoying each other debating about

00:00:35,280 --> 00:00:37,920
these topics and we thought it might be

00:00:37,200 --> 00:00:39,440
fun

00:00:37,920 --> 00:00:41,200
to have a conversation about what it

00:00:39,440 --> 00:00:43,040
takes to get started with operational

00:00:41,200 --> 00:00:46,239
tool chains like spinnaker

00:00:43,040 --> 00:00:48,960
on amazon eks now these are both

00:00:46,239 --> 00:00:50,559
fairly mature tool chains so i think the

00:00:48,960 --> 00:00:54,879
initial question everyone might have

00:00:50,559 --> 00:00:56,640
is how hard can it possibly be

00:00:54,879 --> 00:00:58,000
and on the bright side i think this is

00:00:56,640 --> 00:00:59,600
going to be a short talk nima

00:00:58,000 --> 00:01:01,920
and i will be telling you that it's

00:00:59,600 --> 00:01:03,600
super easy there are only a few minor

00:01:01,920 --> 00:01:04,000
knowledge prerequisites that you need to

00:01:03,600 --> 00:01:05,439
have

00:01:04,000 --> 00:01:07,280
in order to have a fully functional

00:01:05,439 --> 00:01:09,840
production-ready version of spinnaker on

00:01:07,280 --> 00:01:12,159
eks with all the bells and whistles

00:01:09,840 --> 00:01:12,960
first things first if you're going to be

00:01:12,159 --> 00:01:14,720
working within

00:01:12,960 --> 00:01:17,040
aws it's useful to have some

00:01:14,720 --> 00:01:18,400
understanding of aws vpc networking and

00:01:17,040 --> 00:01:19,280
load balancing

00:01:18,400 --> 00:01:20,640
also if you're going to make it

00:01:19,280 --> 00:01:22,320
repeatable it's useful to have some

00:01:20,640 --> 00:01:24,080
knowledge of some infrastructure as code

00:01:22,320 --> 00:01:25,520
tool chains like cloud formation and

00:01:24,080 --> 00:01:27,280
terraform

00:01:25,520 --> 00:01:28,799
in order to effectively monitor and

00:01:27,280 --> 00:01:30,560
observe our infrastructures

00:01:28,799 --> 00:01:32,240
and our kubernetes clusters we should

00:01:30,560 --> 00:01:34,560
also have some understanding of insights

00:01:32,240 --> 00:01:37,119
tool chains like cloudwatch

00:01:34,560 --> 00:01:38,479
but in order to get information off of

00:01:37,119 --> 00:01:40,560
our clusters

00:01:38,479 --> 00:01:43,840
into cloudwatch we need to have some

00:01:40,560 --> 00:01:46,399
open source tool chains attached

00:01:43,840 --> 00:01:48,079
also if we're going to be doing some

00:01:46,399 --> 00:01:49,840
other work with orchestration we're

00:01:48,079 --> 00:01:52,960
going to need to have

00:01:49,840 --> 00:01:54,479
um okay i guess it's not

00:01:52,960 --> 00:01:56,479
quite as easy as i thought it was going

00:01:54,479 --> 00:01:59,200
to be um

00:01:56,479 --> 00:01:59,520
i think the fair question here is why is

00:01:59,200 --> 00:02:02,000
it

00:01:59,520 --> 00:02:03,840
so annoying and i think nema has some

00:02:02,000 --> 00:02:07,040
thoughts about that

00:02:03,840 --> 00:02:08,080
yes and rob i can for sure tell you why

00:02:07,040 --> 00:02:10,319
it's so annoying

00:02:08,080 --> 00:02:11,280
and it's annoying because you require

00:02:10,319 --> 00:02:13,120
different skills

00:02:11,280 --> 00:02:14,720
for different layers when it comes to

00:02:13,120 --> 00:02:15,760
deploying your software

00:02:14,720 --> 00:02:17,520
so if you're dealing with the

00:02:15,760 --> 00:02:19,680
infrastructure depending on whether you

00:02:17,520 --> 00:02:21,360
use amazon or a different cloud provider

00:02:19,680 --> 00:02:22,720
you need to have the infrastructure

00:02:21,360 --> 00:02:23,920
level skills so

00:02:22,720 --> 00:02:25,520
you need to know whether you're going to

00:02:23,920 --> 00:02:28,160
use cloud formation whether you're going

00:02:25,520 --> 00:02:30,959
to use terraform cdk or any other tool

00:02:28,160 --> 00:02:32,560
right then we move on to the next layer

00:02:30,959 --> 00:02:34,319
for the orchestration engine

00:02:32,560 --> 00:02:36,000
and for managing your containers what

00:02:34,319 --> 00:02:38,319
you're going to and need to do

00:02:36,000 --> 00:02:39,280
whether you need to use kubernetes or

00:02:38,319 --> 00:02:41,680
ecs

00:02:39,280 --> 00:02:43,040
and even then how do you bake your

00:02:41,680 --> 00:02:45,040
docker images how

00:02:43,040 --> 00:02:47,200
do you deal with manifest how do you

00:02:45,040 --> 00:02:48,560
deploy your software to kubernetes or

00:02:47,200 --> 00:02:50,640
different container engine

00:02:48,560 --> 00:02:52,959
are you going to use helm are you do

00:02:50,640 --> 00:02:54,720
going to do some sort of customization

00:02:52,959 --> 00:02:56,319
and then you need to think about

00:02:54,720 --> 00:02:57,360
operation and bringing everything

00:02:56,319 --> 00:02:59,920
together right

00:02:57,360 --> 00:03:01,519
so are you going to do um something with

00:02:59,920 --> 00:03:04,400
ci cd are you going to use

00:03:01,519 --> 00:03:05,680
spinnaker or jenkins or you know flux or

00:03:04,400 --> 00:03:07,840
a different platform

00:03:05,680 --> 00:03:09,840
or are you going to do it manually or

00:03:07,840 --> 00:03:11,280
basically just hope for the best when

00:03:09,840 --> 00:03:12,480
you roll your software from one

00:03:11,280 --> 00:03:14,720
environment to another

00:03:12,480 --> 00:03:16,640
or maybe actually cncf can tell us what

00:03:14,720 --> 00:03:18,080
to use right so let's look at the list

00:03:16,640 --> 00:03:20,000
of software that they have

00:03:18,080 --> 00:03:22,080
oh well there's like a thousand

00:03:20,000 --> 00:03:23,840
different ways you can you can configure

00:03:22,080 --> 00:03:24,640
things according to cncf there is

00:03:23,840 --> 00:03:27,360
literally

00:03:24,640 --> 00:03:29,360
10 or 15 or 20 different software and

00:03:27,360 --> 00:03:31,920
toolkits for different areas

00:03:29,360 --> 00:03:33,440
in deploying your software system when

00:03:31,920 --> 00:03:36,000
it comes to kubernetes right

00:03:33,440 --> 00:03:37,599
so it can get very um it can get out of

00:03:36,000 --> 00:03:39,440
hand very quickly

00:03:37,599 --> 00:03:40,799
but let's put things into into the

00:03:39,440 --> 00:03:43,200
perspective right

00:03:40,799 --> 00:03:44,959
um there are different lenses through

00:03:43,200 --> 00:03:46,000
which we can actually look at all the

00:03:44,959 --> 00:03:49,519
software that's available

00:03:46,000 --> 00:03:52,400
for us to configure our application our

00:03:49,519 --> 00:03:53,040
and our infrastructure but one of these

00:03:52,400 --> 00:03:55,519
lenses

00:03:53,040 --> 00:03:56,720
um or perspectives is to you to whether

00:03:55,519 --> 00:03:59,280
to use imperative

00:03:56,720 --> 00:04:00,799
um deployment strategies or whether to

00:03:59,280 --> 00:04:03,120
do it declaratively

00:04:00,799 --> 00:04:04,560
so by imperative what we basically mean

00:04:03,120 --> 00:04:07,680
is that we define the set of

00:04:04,560 --> 00:04:09,200
steps required for us to get um our

00:04:07,680 --> 00:04:10,159
software to a stage where it's actually

00:04:09,200 --> 00:04:12,799
ready to go

00:04:10,159 --> 00:04:14,000
by declarative basically what we mean is

00:04:12,799 --> 00:04:15,439
that we're going to define the

00:04:14,000 --> 00:04:17,440
end the state of where we want our

00:04:15,439 --> 00:04:19,199
system to be and then we let the

00:04:17,440 --> 00:04:21,600
platform take care of it for us

00:04:19,199 --> 00:04:22,240
right so there's been a lot of tooling

00:04:21,600 --> 00:04:24,800
in both

00:04:22,240 --> 00:04:26,160
areas as you see in this slide but one

00:04:24,800 --> 00:04:28,080
thing that is particular about

00:04:26,160 --> 00:04:30,639
kubernetes is that kubernetes

00:04:28,080 --> 00:04:32,160
is heavily declarative system you define

00:04:30,639 --> 00:04:33,280
the end the state of your resources and

00:04:32,160 --> 00:04:35,600
your infrastructure

00:04:33,280 --> 00:04:37,440
and kubernetes just gets it there for

00:04:35,600 --> 00:04:40,479
you so maybe there is an

00:04:37,440 --> 00:04:42,479
uh like a simple strategy for us where

00:04:40,479 --> 00:04:44,960
we can actually declaratively

00:04:42,479 --> 00:04:46,080
define everything that we require in

00:04:44,960 --> 00:04:49,040
order to get our

00:04:46,080 --> 00:04:50,240
um set up for a spinnaker using eks

00:04:49,040 --> 00:04:52,880
going right

00:04:50,240 --> 00:04:54,960
so we're hoping that we found a way and

00:04:52,880 --> 00:04:58,639
i'm going to hand it over to rob who's

00:04:54,960 --> 00:05:02,479
going to tell you how this can be done

00:04:58,639 --> 00:05:03,440
thank you nema so as nima suggested now

00:05:02,479 --> 00:05:06,080
we have to figure out

00:05:03,440 --> 00:05:07,919
what the answer is to this potential

00:05:06,080 --> 00:05:10,080
challenge that we find ourselves in

00:05:07,919 --> 00:05:11,680
but before i tell you what the answer is

00:05:10,080 --> 00:05:15,120
i want to introduce you to

00:05:11,680 --> 00:05:16,639
this empty aws account

00:05:15,120 --> 00:05:18,800
this account will be following along

00:05:16,639 --> 00:05:21,120
with us for the rest of the demo

00:05:18,800 --> 00:05:21,919
and it's going to be showing us exactly

00:05:21,120 --> 00:05:24,479
what should

00:05:21,919 --> 00:05:26,320
happen in a perfect declarative world

00:05:24,479 --> 00:05:27,919
whenever we want to deploy eks and

00:05:26,320 --> 00:05:30,479
spinnaker together

00:05:27,919 --> 00:05:31,280
now as this goes through and showcases

00:05:30,479 --> 00:05:32,880
the account

00:05:31,280 --> 00:05:35,199
we have to figure out exactly how to get

00:05:32,880 --> 00:05:36,880
started and the first thing we need to

00:05:35,199 --> 00:05:38,000
understand is that most of the layers

00:05:36,880 --> 00:05:39,600
that nema talked about

00:05:38,000 --> 00:05:41,680
from the infrastructure to the

00:05:39,600 --> 00:05:43,680
orchestration to the operational layer

00:05:41,680 --> 00:05:45,280
share some characteristics so even

00:05:43,680 --> 00:05:46,800
though their domain specific languages

00:05:45,280 --> 00:05:48,080
may be slightly different

00:05:46,800 --> 00:05:51,120
most of the information we need to

00:05:48,080 --> 00:05:53,600
provide is more or less the same

00:05:51,120 --> 00:05:54,400
so in order to make a declarative

00:05:53,600 --> 00:05:56,720
execution

00:05:54,400 --> 00:05:58,639
of eks and spinnaker we have to figure

00:05:56,720 --> 00:06:00,639
out what exactly we need

00:05:58,639 --> 00:06:02,400
from the perspective of variables to be

00:06:00,639 --> 00:06:03,759
able to pass to all of these individual

00:06:02,400 --> 00:06:05,280
layers

00:06:03,759 --> 00:06:07,759
and the list isn't as big as you might

00:06:05,280 --> 00:06:09,600
think we really just need to tell the

00:06:07,759 --> 00:06:10,560
environment what aws region we're going

00:06:09,600 --> 00:06:12,160
to be running in

00:06:10,560 --> 00:06:14,240
in order to make it externally

00:06:12,160 --> 00:06:15,840
accessible we need a domain name that's

00:06:14,240 --> 00:06:17,680
specific to our environment

00:06:15,840 --> 00:06:19,440
in order to store spinnaker's

00:06:17,680 --> 00:06:22,000
configuration information we need a

00:06:19,440 --> 00:06:24,080
persistent store like amazon s3

00:06:22,000 --> 00:06:25,840
in order to make things a little bit

00:06:24,080 --> 00:06:28,160
more convenient and portable

00:06:25,840 --> 00:06:29,520
we're going to need a git repository and

00:06:28,160 --> 00:06:29,919
optionally if you're going to be using

00:06:29,520 --> 00:06:32,319
this

00:06:29,919 --> 00:06:34,560
repeatably it's useful to pre-configure

00:06:32,319 --> 00:06:35,680
your ssh keys in git repository

00:06:34,560 --> 00:06:38,080
authentications

00:06:35,680 --> 00:06:40,479
the practical reality is this is a

00:06:38,080 --> 00:06:41,840
relatively small configuration file

00:06:40,479 --> 00:06:46,080
that you're going to be able to see

00:06:41,840 --> 00:06:46,080
deployed in our environment right here

00:06:47,440 --> 00:06:51,599
so now that we know we have things we

00:06:49,759 --> 00:06:54,880
want to declare

00:06:51,599 --> 00:06:56,319
i want spinnaker and i want eks and i

00:06:54,880 --> 00:06:57,520
want all of its quality of life

00:06:56,319 --> 00:06:59,280
improvements

00:06:57,520 --> 00:07:02,000
let's take a look at how this example

00:06:59,280 --> 00:07:04,479
stitches these things together

00:07:02,000 --> 00:07:05,039
okay so let's go over what's happening

00:07:04,479 --> 00:07:07,440
here

00:07:05,039 --> 00:07:09,360
uh basically what we want to have is

00:07:07,440 --> 00:07:12,160
that we want to start with aws

00:07:09,360 --> 00:07:13,680
with an account in aws and we want to

00:07:12,160 --> 00:07:15,360
end with the spinnaker

00:07:13,680 --> 00:07:17,120
so there are a number of steps that are

00:07:15,360 --> 00:07:19,520
involved and

00:07:17,120 --> 00:07:21,599
the idea for us is that we provide a

00:07:19,520 --> 00:07:22,800
bunch of configurations to the tool set

00:07:21,599 --> 00:07:24,639
that we provide

00:07:22,800 --> 00:07:26,400
and eventually we go through all the set

00:07:24,639 --> 00:07:28,400
of steps necessary

00:07:26,400 --> 00:07:29,520
to get the spin account right but at the

00:07:28,400 --> 00:07:33,120
very beginning

00:07:29,520 --> 00:07:35,919
what it involves is to set up um our

00:07:33,120 --> 00:07:38,080
shared infrastructure resources and also

00:07:35,919 --> 00:07:40,000
to have kubernetes on top of this

00:07:38,080 --> 00:07:42,319
fortunately for that purpose we can use

00:07:40,000 --> 00:07:42,880
terraform and what terraform allows us

00:07:42,319 --> 00:07:44,800
to do

00:07:42,880 --> 00:07:46,240
is that we can define the configuration

00:07:44,800 --> 00:07:47,680
requirements through

00:07:46,240 --> 00:07:50,240
a domain-specific language that

00:07:47,680 --> 00:07:53,039
terraform supports which is called hcl

00:07:50,240 --> 00:07:56,240
and then we can use hcl and through it

00:07:53,039 --> 00:07:59,440
bind to the endpoints for the aws

00:07:56,240 --> 00:08:01,840
provider and spin up um

00:07:59,440 --> 00:08:02,960
kubernetes resources so this is all

00:08:01,840 --> 00:08:05,599
taken care of

00:08:02,960 --> 00:08:06,560
by by terraform but one thing that is

00:08:05,599 --> 00:08:08,560
interesting

00:08:06,560 --> 00:08:11,280
is that the tool set that we have in

00:08:08,560 --> 00:08:13,680
place actually facilitates the set of

00:08:11,280 --> 00:08:16,080
steps that you require to take in order

00:08:13,680 --> 00:08:20,240
to get from an aws account

00:08:16,080 --> 00:08:22,319
to a kubernetes cluster up and running

00:08:20,240 --> 00:08:23,759
so even though on the surface everything

00:08:22,319 --> 00:08:25,759
is declaratively defined through

00:08:23,759 --> 00:08:27,919
configurations by the user

00:08:25,759 --> 00:08:29,520
underneath it we actually take the set

00:08:27,919 --> 00:08:32,320
of necessary

00:08:29,520 --> 00:08:33,279
steps imperatively in order to get a

00:08:32,320 --> 00:08:35,120
kubernetes

00:08:33,279 --> 00:08:36,399
cluster pad running and once we have

00:08:35,120 --> 00:08:39,120
kubernetes cluster

00:08:36,399 --> 00:08:39,919
then we can also use terraform for helm

00:08:39,120 --> 00:08:42,560
configuration

00:08:39,919 --> 00:08:43,120
so that we can deploy flux on top of

00:08:42,560 --> 00:08:45,519
this

00:08:43,120 --> 00:08:46,959
and this allows us to then delegate to

00:08:45,519 --> 00:08:50,000
flux to take care of

00:08:46,959 --> 00:08:50,800
the rest of it for us and do the gadopsy

00:08:50,000 --> 00:08:52,880
behavior

00:08:50,800 --> 00:08:54,000
so rob is going to tell you why that

00:08:52,880 --> 00:08:56,240
github gitopsy behavior

00:08:54,000 --> 00:08:58,320
and why the operations at that level is

00:08:56,240 --> 00:08:58,800
important for the rest of the execution

00:08:58,320 --> 00:09:02,080
of

00:08:58,800 --> 00:09:03,440
this this toolset will set

00:09:02,080 --> 00:09:05,200
so now that we understand a little bit

00:09:03,440 --> 00:09:07,120
about how we're going to be deploying

00:09:05,200 --> 00:09:08,240
spinnaker and kubernetes i think it's

00:09:07,120 --> 00:09:10,240
worth understanding

00:09:08,240 --> 00:09:12,080
why we've chosen some of the tools that

00:09:10,240 --> 00:09:14,240
we did specifically

00:09:12,080 --> 00:09:15,120
why are we using things like weaveworks

00:09:14,240 --> 00:09:17,360
flux

00:09:15,120 --> 00:09:18,959
to deploy something like spinnaker and

00:09:17,360 --> 00:09:19,760
what's the impact of something like

00:09:18,959 --> 00:09:22,800
devops

00:09:19,760 --> 00:09:23,760
and git ops and div devsecops in all of

00:09:22,800 --> 00:09:26,000
the ops

00:09:23,760 --> 00:09:28,000
so in order to do that i've decided to

00:09:26,000 --> 00:09:31,440
give you a bit of a textbook lesson

00:09:28,000 --> 00:09:32,160
let's explore the ops together first and

00:09:31,440 --> 00:09:34,399
foremost

00:09:32,160 --> 00:09:36,000
devops the definition is a set of

00:09:34,399 --> 00:09:37,680
practices intended to reduce

00:09:36,000 --> 00:09:39,760
the time between committing a change to

00:09:37,680 --> 00:09:41,760
a system and the change being placed

00:09:39,760 --> 00:09:43,600
into normal production while ensuring

00:09:41,760 --> 00:09:46,959
high quality

00:09:43,600 --> 00:09:48,640
git ops a paradigm or a set of practices

00:09:46,959 --> 00:09:49,440
that empowers developers to perform

00:09:48,640 --> 00:09:51,600
tasks which

00:09:49,440 --> 00:09:52,880
typically fall under the purview of it

00:09:51,600 --> 00:09:54,959
operations

00:09:52,880 --> 00:09:56,560
you got it there's going to be a test on

00:09:54,959 --> 00:10:00,160
this later super simple

00:09:56,560 --> 00:10:02,000
makes all the sense in the world right

00:10:00,160 --> 00:10:03,440
but let's take a look at a few examples

00:10:02,000 --> 00:10:05,360
before we go deeper

00:10:03,440 --> 00:10:06,959
first of all i would say for the case of

00:10:05,360 --> 00:10:08,959
delivery spinnaker is considered an

00:10:06,959 --> 00:10:10,800
example of traditional devops

00:10:08,959 --> 00:10:13,040
however also for delivery weave works

00:10:10,800 --> 00:10:14,000
flux and argo cd are examples of what

00:10:13,040 --> 00:10:16,399
are being defined

00:10:14,000 --> 00:10:18,000
as git ops and if there were one lesson

00:10:16,399 --> 00:10:19,279
i wanted you to take away from this

00:10:18,000 --> 00:10:22,640
slide in particular

00:10:19,279 --> 00:10:25,279
it's that those definitions don't matter

00:10:22,640 --> 00:10:27,519
at all and they are not mutually

00:10:25,279 --> 00:10:30,640
exclusive things

00:10:27,519 --> 00:10:32,880
as with all tools across this ecosystem

00:10:30,640 --> 00:10:34,240
we're challenged in the fact that you

00:10:32,880 --> 00:10:36,160
need to have

00:10:34,240 --> 00:10:37,920
specific considerations depending on

00:10:36,160 --> 00:10:40,079
your workload organization

00:10:37,920 --> 00:10:42,640
and flow processes in order to decide

00:10:40,079 --> 00:10:44,480
what tools are the best fit for you

00:10:42,640 --> 00:10:47,200
and the reality is it might be a

00:10:44,480 --> 00:10:50,160
combination of both as it was for neiman

00:10:47,200 --> 00:10:51,200
nema and i in this specific tool chain

00:10:50,160 --> 00:10:52,480
so for example

00:10:51,200 --> 00:10:54,160
the questions you should be asking

00:10:52,480 --> 00:10:56,320
yourselves are what individual

00:10:54,160 --> 00:10:57,519
components do your tool chains need to

00:10:56,320 --> 00:10:59,680
interface with

00:10:57,519 --> 00:11:02,079
is it just kubernetes or do they need to

00:10:59,680 --> 00:11:03,200
touch other infrastructure bits like aws

00:11:02,079 --> 00:11:06,959
ec2

00:11:03,200 --> 00:11:09,760
route 53 or other cloud providers

00:11:06,959 --> 00:11:11,519
additionally what changes do you want to

00:11:09,760 --> 00:11:13,279
capture as an organization

00:11:11,519 --> 00:11:15,120
do you want every single adjustment that

00:11:13,279 --> 00:11:16,640
you make to your infrastructure to be

00:11:15,120 --> 00:11:18,000
recorded in version control

00:11:16,640 --> 00:11:19,760
or do you want your developers and

00:11:18,000 --> 00:11:21,519
operators to have the freedom to do more

00:11:19,760 --> 00:11:23,920
flexible testing without having to

00:11:21,519 --> 00:11:25,839
follow strict get oriented protocols for

00:11:23,920 --> 00:11:27,600
each and every one

00:11:25,839 --> 00:11:28,959
and are your configurations portable

00:11:27,600 --> 00:11:32,160
across platforms

00:11:28,959 --> 00:11:33,279
are you only using kubernetes or do you

00:11:32,160 --> 00:11:35,360
want to be able to run these on

00:11:33,279 --> 00:11:37,279
different types of infrastructures

00:11:35,360 --> 00:11:39,360
and last but certainly not least how

00:11:37,279 --> 00:11:41,680
dependent do you want to be

00:11:39,360 --> 00:11:43,519
on that underlying platform tooling do

00:11:41,680 --> 00:11:45,360
you expect kubernetes to manage

00:11:43,519 --> 00:11:47,120
every bit of the infrastructure using

00:11:45,360 --> 00:11:48,959
its own abstractions

00:11:47,120 --> 00:11:51,519
or are you looking to control things

00:11:48,959 --> 00:11:54,079
more natively with their own apis

00:11:51,519 --> 00:11:55,600
and the practical reality is this is not

00:11:54,079 --> 00:11:56,399
going to be the same for each individual

00:11:55,600 --> 00:11:58,800
person

00:11:56,399 --> 00:12:00,560
so i can hear you out there asking me to

00:11:58,800 --> 00:12:02,560
be more specific

00:12:00,560 --> 00:12:04,320
so i'll give you examples based on the

00:12:02,560 --> 00:12:06,240
choices that nema and i made

00:12:04,320 --> 00:12:08,079
for example kubernetes specific

00:12:06,240 --> 00:12:08,839
configurations that define relatively

00:12:08,079 --> 00:12:11,360
static

00:12:08,839 --> 00:12:12,399
states i would choose things like flux

00:12:11,360 --> 00:12:14,639
for that

00:12:12,399 --> 00:12:15,519
for example quality of life features for

00:12:14,639 --> 00:12:18,079
eks

00:12:15,519 --> 00:12:20,240
like container insights and ingress

00:12:18,079 --> 00:12:21,680
controllers and load balancer managers

00:12:20,240 --> 00:12:24,079
and other things that are going to be

00:12:21,680 --> 00:12:25,040
relatively static and always specific to

00:12:24,079 --> 00:12:27,040
kubernetes

00:12:25,040 --> 00:12:28,079
are a good fit for things like a git ops

00:12:27,040 --> 00:12:30,240
model

00:12:28,079 --> 00:12:31,839
however for complex highly portable

00:12:30,240 --> 00:12:33,120
flows with a bunch of underlying

00:12:31,839 --> 00:12:34,720
dependencies

00:12:33,120 --> 00:12:36,399
pipelines that go through multiple

00:12:34,720 --> 00:12:38,079
different stages touch multiple

00:12:36,399 --> 00:12:40,480
different kubernetes clusters

00:12:38,079 --> 00:12:42,880
or interface with things directly like

00:12:40,480 --> 00:12:44,880
route 53 or things that there isn't easy

00:12:42,880 --> 00:12:46,880
plugability from kubernetes

00:12:44,880 --> 00:12:48,880
that's where a delivery tool chain that

00:12:46,880 --> 00:12:50,240
specializes in those types of interfaces

00:12:48,880 --> 00:12:52,320
makes the most sense

00:12:50,240 --> 00:12:54,240
and that's where spinnaker is perfect so

00:12:52,320 --> 00:12:56,639
for our use case we've more or less

00:12:54,240 --> 00:13:00,160
chosen to use the best tool for the job

00:12:56,639 --> 00:13:00,160
using both of those paradigms

00:13:00,560 --> 00:13:04,000
and more or less what we've created is a

00:13:03,360 --> 00:13:06,079
way to

00:13:04,000 --> 00:13:07,600
minimize the cycle of abstraction that

00:13:06,079 --> 00:13:09,600
typically exists

00:13:07,600 --> 00:13:11,440
so what we're used to is the fact that

00:13:09,600 --> 00:13:12,959
we know we need infrastructure so

00:13:11,440 --> 00:13:14,720
because we know we need infrastructure

00:13:12,959 --> 00:13:16,720
we want to abstract that infrastructure

00:13:14,720 --> 00:13:19,200
with something like kubernetes

00:13:16,720 --> 00:13:20,800
but kubernetes isn't always super

00:13:19,200 --> 00:13:21,839
friendly to developers who want to do

00:13:20,800 --> 00:13:23,760
repeatable

00:13:21,839 --> 00:13:25,680
functional testing and want to actually

00:13:23,760 --> 00:13:27,600
have more dynamic automation so we want

00:13:25,680 --> 00:13:28,240
to abstract some of those redundancies

00:13:27,600 --> 00:13:31,440
away

00:13:28,240 --> 00:13:33,120
using a tool chain like spinnaker but

00:13:31,440 --> 00:13:34,880
in order to deploy spinnaker we have to

00:13:33,120 --> 00:13:36,639
be an expert in kubernetes

00:13:34,880 --> 00:13:37,680
and in order to deploy kubernetes we

00:13:36,639 --> 00:13:38,720
have to be an expert in our

00:13:37,680 --> 00:13:40,240
infrastructure

00:13:38,720 --> 00:13:42,720
so what we're trying to do with this

00:13:40,240 --> 00:13:43,360
tool chain is provide one declarative

00:13:42,720 --> 00:13:45,680
place

00:13:43,360 --> 00:13:47,920
for you to define all your criteria one

00:13:45,680 --> 00:13:49,279
time and let the open source tools that

00:13:47,920 --> 00:13:52,320
have grown into maturity

00:13:49,279 --> 00:13:53,920
actually solve those problems for you

00:13:52,320 --> 00:13:57,199
now that we've gotten to this point

00:13:53,920 --> 00:14:00,000
though we have to get from flux

00:13:57,199 --> 00:14:01,360
to spinnaker and that might sound like

00:14:00,000 --> 00:14:03,360
an easy proposition

00:14:01,360 --> 00:14:04,880
but it's not quite as easy as you might

00:14:03,360 --> 00:14:07,199
think

00:14:04,880 --> 00:14:08,480
in theory we want to be able to put

00:14:07,199 --> 00:14:10,800
native kubernetes

00:14:08,480 --> 00:14:12,079
manifests into our weaveworks flux git

00:14:10,800 --> 00:14:13,920
repository

00:14:12,079 --> 00:14:15,360
and then use customize to be able to

00:14:13,920 --> 00:14:16,240
deploy those manifests out into

00:14:15,360 --> 00:14:18,480
kubernetes

00:14:16,240 --> 00:14:20,320
and then theoretically at that point

00:14:18,480 --> 00:14:21,920
stand up spinnaker

00:14:20,320 --> 00:14:24,480
and while we are going to do that with

00:14:21,920 --> 00:14:25,680
this tool chain it wasn't always quite

00:14:24,480 --> 00:14:29,199
so easy

00:14:25,680 --> 00:14:30,560
nema can you tell us why um it is easy

00:14:29,199 --> 00:14:33,199
to assume

00:14:30,560 --> 00:14:34,959
that you can actually have everything

00:14:33,199 --> 00:14:36,720
defined declaratively for your

00:14:34,959 --> 00:14:38,880
infrastructure for your kubernetes

00:14:36,720 --> 00:14:41,279
cluster for your spinnaker deployment

00:14:38,880 --> 00:14:42,560
but things haven't been as easy in fact

00:14:41,279 --> 00:14:45,519
if you can see the

00:14:42,560 --> 00:14:46,720
the the spinnaker ecosystem alone you

00:14:45,519 --> 00:14:48,880
would notice that

00:14:46,720 --> 00:14:50,160
previously the community used a

00:14:48,880 --> 00:14:53,040
different strategy

00:14:50,160 --> 00:14:54,800
to deploy spinnaker one of the

00:14:53,040 --> 00:14:56,240
superpowers of the spindle care was that

00:14:54,800 --> 00:14:58,079
it actually could interface with

00:14:56,240 --> 00:15:00,000
different cloud providers so

00:14:58,079 --> 00:15:01,680
you could use it to deploy to aws you

00:15:00,000 --> 00:15:03,279
could use it to deploy to cloud foundry

00:15:01,680 --> 00:15:07,199
you could use it to deploy to

00:15:03,279 --> 00:15:09,519
gcp and all of that was the result of a

00:15:07,199 --> 00:15:12,240
spinnaker being able to tap onto the

00:15:09,519 --> 00:15:14,880
apis for these different cloud providers

00:15:12,240 --> 00:15:15,760
and then set up the infrastructure this

00:15:14,880 --> 00:15:18,800
was done

00:15:15,760 --> 00:15:19,760
through a tool called halyard so halyard

00:15:18,800 --> 00:15:22,000
would actually

00:15:19,760 --> 00:15:24,000
bring in the power of spinaker and then

00:15:22,000 --> 00:15:25,360
would allow for deployment of it against

00:15:24,000 --> 00:15:28,160
these different cloud

00:15:25,360 --> 00:15:29,759
providers but the thing with halyard and

00:15:28,160 --> 00:15:30,560
the use of the apis for the cloud

00:15:29,759 --> 00:15:34,000
providers

00:15:30,560 --> 00:15:35,360
was that by nature halyard was an

00:15:34,000 --> 00:15:37,839
imperative tool

00:15:35,360 --> 00:15:38,560
because it had to follow a certain set

00:15:37,839 --> 00:15:41,279
of steps

00:15:38,560 --> 00:15:42,880
in order to get all the microservices

00:15:41,279 --> 00:15:44,079
for spinnaker installed get the

00:15:42,880 --> 00:15:45,839
configuration going

00:15:44,079 --> 00:15:47,839
and ensure that finally your system was

00:15:45,839 --> 00:15:50,959
up and running and so

00:15:47,839 --> 00:15:54,160
when kubernetes came about there was

00:15:50,959 --> 00:15:56,959
a disconnect between the way kubernetes

00:15:54,160 --> 00:15:57,680
preferred or allowed the deployment of

00:15:56,959 --> 00:15:59,759
software

00:15:57,680 --> 00:16:01,120
and the way halyard was a structure to

00:15:59,759 --> 00:16:03,600
deploy a step

00:16:01,120 --> 00:16:05,120
kubernetes is primarily a declarative

00:16:03,600 --> 00:16:08,079
system you define the end

00:16:05,120 --> 00:16:09,120
state of your software and then you get

00:16:08,079 --> 00:16:10,959
um

00:16:09,120 --> 00:16:12,880
what you want from the platform by

00:16:10,959 --> 00:16:15,199
providing it the specifications

00:16:12,880 --> 00:16:17,199
so for the users of a spinnaker or for

00:16:15,199 --> 00:16:18,560
the users of kubernetes when they came

00:16:17,199 --> 00:16:20,399
to deploy a spinnaker

00:16:18,560 --> 00:16:22,240
there was a disconnect of understanding

00:16:20,399 --> 00:16:23,360
between how they would interact with

00:16:22,240 --> 00:16:25,759
halyard and how

00:16:23,360 --> 00:16:27,279
kubernetes skills that they had would

00:16:25,759 --> 00:16:27,839
allow them to get the spinnaker up and

00:16:27,279 --> 00:16:31,199
running

00:16:27,839 --> 00:16:33,839
and that wasn't desirable so that's why

00:16:31,199 --> 00:16:34,399
the community started moving towards a

00:16:33,839 --> 00:16:36,720
new

00:16:34,399 --> 00:16:39,120
set of tools and in order to make it

00:16:36,720 --> 00:16:40,959
easier for the kubernetes developers

00:16:39,120 --> 00:16:42,160
to have a more declarative approach to

00:16:40,959 --> 00:16:44,639
deploying

00:16:42,160 --> 00:16:45,680
spinach and that was through the use of

00:16:44,639 --> 00:16:48,720
cleat and

00:16:45,680 --> 00:16:50,240
using customize so by that basically

00:16:48,720 --> 00:16:51,519
what you can do

00:16:50,240 --> 00:16:53,759
is that you can define the

00:16:51,519 --> 00:16:54,880
configurations for your spinnaker

00:16:53,759 --> 00:16:56,800
microservices

00:16:54,880 --> 00:16:59,120
and combine them with a bunch of

00:16:56,800 --> 00:17:01,040
templates overlays and a structure

00:16:59,120 --> 00:17:02,320
that customize enforces on your

00:17:01,040 --> 00:17:04,559
deployment and then

00:17:02,320 --> 00:17:05,839
use the existing kubernetes tool chain

00:17:04,559 --> 00:17:07,839
to deploy a spinnaker

00:17:05,839 --> 00:17:10,079
and by doing so you can actually a lot

00:17:07,839 --> 00:17:10,720
more easily have a better understanding

00:17:10,079 --> 00:17:14,880
or have

00:17:10,720 --> 00:17:17,360
um a better way to deploy your spinocure

00:17:14,880 --> 00:17:18,559
and setup onto kubernetes and bring the

00:17:17,360 --> 00:17:21,600
existing kubernetes

00:17:18,559 --> 00:17:23,039
skills into setting up spinnaker so that

00:17:21,600 --> 00:17:24,959
brings rob and i one

00:17:23,039 --> 00:17:26,559
step closer to be able to have an

00:17:24,959 --> 00:17:29,200
end-to-end declarative system

00:17:26,559 --> 00:17:31,360
for deploying everything including your

00:17:29,200 --> 00:17:34,559
infrastructure kubernetes and spina care

00:17:31,360 --> 00:17:35,360
through one set of tools and one way of

00:17:34,559 --> 00:17:38,400
doing the

00:17:35,360 --> 00:17:39,840
deployment so with that and i'm going to

00:17:38,400 --> 00:17:41,679
hand it back to rob

00:17:39,840 --> 00:17:43,360
to show you what exactly we can achieve

00:17:41,679 --> 00:17:44,880
through that

00:17:43,360 --> 00:17:46,720
as you can imagine this gives us some

00:17:44,880 --> 00:17:48,640
fairly unique options that are available

00:17:46,720 --> 00:17:49,679
to us in configuring the life cycle of

00:17:48,640 --> 00:17:52,240
spinnaker

00:17:49,679 --> 00:17:54,799
so to showcase that we've deployed out

00:17:52,240 --> 00:17:56,480
spinnaker just with basic authentication

00:17:54,799 --> 00:17:58,640
the same username and password for

00:17:56,480 --> 00:18:00,640
everyone as you see

00:17:58,640 --> 00:18:02,480
now no one in their right minds is going

00:18:00,640 --> 00:18:05,600
to use this kind of configuration

00:18:02,480 --> 00:18:07,280
for production so

00:18:05,600 --> 00:18:09,120
let's explore what it looks like to take

00:18:07,280 --> 00:18:10,000
this configuration of spinnaker as it

00:18:09,120 --> 00:18:13,200
stands

00:18:10,000 --> 00:18:16,880
and to use a combination of flux and

00:18:13,200 --> 00:18:18,559
cleat to make a change using git

00:18:16,880 --> 00:18:19,679
so the first thing we're going to do is

00:18:18,559 --> 00:18:21,200
we're going to find our halyard

00:18:19,679 --> 00:18:22,480
configuration file which is the

00:18:21,200 --> 00:18:25,200
configuration file

00:18:22,480 --> 00:18:25,919
that cleat takes in order to make

00:18:25,200 --> 00:18:27,679
adjustments

00:18:25,919 --> 00:18:30,400
the same configuration file you're used

00:18:27,679 --> 00:18:31,360
to if you're using halyard cli to deploy

00:18:30,400 --> 00:18:33,039
spinnaker

00:18:31,360 --> 00:18:34,480
we're going to make a change uh to the

00:18:33,039 --> 00:18:36,880
halyard configuration file where we're

00:18:34,480 --> 00:18:38,720
going to add a setup for oauth 2.

00:18:36,880 --> 00:18:40,480
we're going to configure to a g suite

00:18:38,720 --> 00:18:42,720
environment and make sure that we

00:18:40,480 --> 00:18:43,520
authenticate to a specific domain all

00:18:42,720 --> 00:18:45,520
we're going to do

00:18:43,520 --> 00:18:46,880
is we're going to paste in our oauth2

00:18:45,520 --> 00:18:50,480
configuration into

00:18:46,880 --> 00:18:53,039
our hal config file we're going to

00:18:50,480 --> 00:18:55,360
use cleat to generate a new set of

00:18:53,039 --> 00:18:57,200
configurations

00:18:55,360 --> 00:19:00,400
those configurations are going to land

00:18:57,200 --> 00:19:00,400
in our git repository

00:19:00,480 --> 00:19:04,640
and then we'll be able to diff and see

00:19:02,000 --> 00:19:07,280
exactly what changes are being made

00:19:04,640 --> 00:19:07,280
by cleat

00:19:08,480 --> 00:19:13,440
then at that point all we have to do is

00:19:11,280 --> 00:19:15,120
commit to our new git repository push it

00:19:13,440 --> 00:19:17,919
upstream to our origin

00:19:15,120 --> 00:19:18,799
and then when flux syncs next time it

00:19:17,919 --> 00:19:20,400
will replace

00:19:18,799 --> 00:19:22,400
all the appropriate spinnaker micro

00:19:20,400 --> 00:19:25,280
services and create

00:19:22,400 --> 00:19:27,120
a new installation that uses oauth as

00:19:25,280 --> 00:19:29,039
its authentication method

00:19:27,120 --> 00:19:31,120
and you can see that all we have to do

00:19:29,039 --> 00:19:34,480
is refresh spinnaker online

00:19:31,120 --> 00:19:37,120
login all right log back out log back in

00:19:34,480 --> 00:19:38,400
and we'll see now we have a nice shiny

00:19:37,120 --> 00:19:41,200
oauth2 login

00:19:38,400 --> 00:19:42,160
instead of our basic auth so now that we

00:19:41,200 --> 00:19:44,240
have an idea

00:19:42,160 --> 00:19:46,240
of how to deploy out a declarative

00:19:44,240 --> 00:19:48,640
pipeline for eks and spinnaker

00:19:46,240 --> 00:19:50,799
and now that you've seen this cool thing

00:19:48,640 --> 00:19:53,200
that nima and i put together in action

00:19:50,799 --> 00:19:54,559
the next obvious question is what do we

00:19:53,200 --> 00:19:57,120
do now

00:19:54,559 --> 00:19:59,120
unfortunately the answer is easy play

00:19:57,120 --> 00:20:01,200
with it yourself

00:19:59,120 --> 00:20:02,640
you can find this example code and the

00:20:01,200 --> 00:20:04,000
tool chain it deploys which we've

00:20:02,640 --> 00:20:07,360
lovingly named

00:20:04,000 --> 00:20:08,799
loom at this github url now

00:20:07,360 --> 00:20:10,720
as you're working through this tool

00:20:08,799 --> 00:20:12,480
chain please keep in mind that it comes

00:20:10,720 --> 00:20:15,200
along with some caveats

00:20:12,480 --> 00:20:16,960
this is a very very early example of how

00:20:15,200 --> 00:20:17,600
these fully declarative flows can be

00:20:16,960 --> 00:20:20,400
realized

00:20:17,600 --> 00:20:21,919
across aws eks and spinnaker this

00:20:20,400 --> 00:20:23,039
applies to a variety of other

00:20:21,919 --> 00:20:24,320
application types

00:20:23,039 --> 00:20:26,080
and is compatible with a number of

00:20:24,320 --> 00:20:28,240
different cloud providers

00:20:26,080 --> 00:20:29,120
but the fact that it is early and it is

00:20:28,240 --> 00:20:31,360
a prototype

00:20:29,120 --> 00:20:32,240
means that it comes along with some gaps

00:20:31,360 --> 00:20:35,360
and

00:20:32,240 --> 00:20:37,520
potential opinionated choices

00:20:35,360 --> 00:20:40,320
for example right now this version runs

00:20:37,520 --> 00:20:41,520
on kubernetes 1.15

00:20:40,320 --> 00:20:43,760
now that's an older version of

00:20:41,520 --> 00:20:45,120
kubernetes and we intend to change it to

00:20:43,760 --> 00:20:47,120
more modern versions

00:20:45,120 --> 00:20:49,360
but do keep in mind if you're going to

00:20:47,120 --> 00:20:51,840
adjust the kubernetes version yourself

00:20:49,360 --> 00:20:54,400
the reason we're holding at 1.15 is that

00:20:51,840 --> 00:20:56,320
due to changes in the kubernetes api

00:20:54,400 --> 00:20:57,919
each version each minor version of

00:20:56,320 --> 00:20:59,679
kubernetes needs attention to the

00:20:57,919 --> 00:21:01,280
manifests that are deployed with it to

00:20:59,679 --> 00:21:02,960
maintain functionality

00:21:01,280 --> 00:21:05,840
an example of that is cluster auto

00:21:02,960 --> 00:21:07,280
scaler its behavior differs between 1.15

00:21:05,840 --> 00:21:09,760
and 1.16

00:21:07,280 --> 00:21:12,480
so handle with care if you increment the

00:21:09,760 --> 00:21:14,960
minor version of kubernetes on your own

00:21:12,480 --> 00:21:16,559
secondarily there are some security

00:21:14,960 --> 00:21:18,240
practices here that would not be

00:21:16,559 --> 00:21:21,200
considered best practice

00:21:18,240 --> 00:21:22,159
for example the permissions inherent

00:21:21,200 --> 00:21:24,159
currently still use

00:21:22,159 --> 00:21:25,200
instance profiles for permissions to

00:21:24,159 --> 00:21:28,720
access things like

00:21:25,200 --> 00:21:32,080
s3 and route 53 as opposed

00:21:28,720 --> 00:21:33,840
to using im roles for service accounts

00:21:32,080 --> 00:21:35,120
which is a feature that's available in

00:21:33,840 --> 00:21:37,360
eks

00:21:35,120 --> 00:21:39,520
we want to change that eventually but we

00:21:37,360 --> 00:21:41,600
used instance profiles right now to

00:21:39,520 --> 00:21:43,679
minimize the number of arns that needed

00:21:41,600 --> 00:21:45,039
to be in our kubernetes manifests

00:21:43,679 --> 00:21:47,120
should you want to explore what that

00:21:45,039 --> 00:21:48,720
looks like in your own environments

00:21:47,120 --> 00:21:50,960
im roles for service accounts is

00:21:48,720 --> 00:21:52,080
actually enabled on the eks cluster when

00:21:50,960 --> 00:21:53,200
it gets deployed

00:21:52,080 --> 00:21:55,520
you don't need to need to make

00:21:53,200 --> 00:21:56,480
adjustments inside inside the manifest

00:21:55,520 --> 00:21:58,320
themselves

00:21:56,480 --> 00:22:00,640
last but not least when we put this

00:21:58,320 --> 00:22:02,080
together we were greatly opinionated in

00:22:00,640 --> 00:22:04,400
its configuration

00:22:02,080 --> 00:22:06,400
we surfaced very very very few

00:22:04,400 --> 00:22:07,600
customizable options in the top level

00:22:06,400 --> 00:22:09,120
configurations

00:22:07,600 --> 00:22:11,600
so if you want to make adjustments for

00:22:09,120 --> 00:22:13,679
example to the instance types in use

00:22:11,600 --> 00:22:15,440
or the number of maximum and minimum

00:22:13,679 --> 00:22:16,880
nodes in your eks clusters

00:22:15,440 --> 00:22:18,559
you'll need to drill down into the

00:22:16,880 --> 00:22:19,600
terraform manifests in order to find

00:22:18,559 --> 00:22:21,760
those options

00:22:19,600 --> 00:22:23,440
however the most fantastic thing about

00:22:21,760 --> 00:22:25,200
this being an open source tool

00:22:23,440 --> 00:22:27,120
is that those are simply terraform

00:22:25,200 --> 00:22:28,320
manifests and you can make any changes

00:22:27,120 --> 00:22:30,880
to them that you want

00:22:28,320 --> 00:22:31,919
last but not least have fun and give us

00:22:30,880 --> 00:22:33,360
feedback

00:22:31,919 --> 00:22:35,360
thank you so much for joining us for

00:22:33,360 --> 00:22:41,840
this talk and please let us know what

00:22:35,360 --> 00:22:41,840

YouTube URL: https://www.youtube.com/watch?v=ZOZuQBKdBVY


