Title: Build a Spinnaker pipeline in highly regulated bank environment - AbdulBasit Kabir
Publication date: 2020-12-17
Playlist: Spinnaker Summit 2020
Description: 
	In this talk, AbdulBasit Kabir walks us through what a pipeline could look like in a hypothetical bank deploying multiple modern and legacy applications to VMs and Kubernetes.

Chef or Ansible? Kustomize, Helm, yaml, templates? Build environment version, quality gates level, manual approvals, security scans, regression, blue-green, canary, registry & repositories. Which of these need to be in my Continuous Delivery (CD) workflow and how to implement? Now throwing in the need for compliance and high regulation, typical of financial institutions, to the mix makes you wonder how CD is implemented in highly regulated environments like banks.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:05,359 --> 00:00:11,759
so let's build a spinnaker pipeline

00:00:07,759 --> 00:00:15,440
in a bank welcome to the new

00:00:11,759 --> 00:00:15,440
digital international bank

00:00:15,519 --> 00:00:22,640
so basically we're going to walk through

00:00:19,600 --> 00:00:25,680
building and implementing spinnaker

00:00:22,640 --> 00:00:28,880
in a fictitious bank called the new

00:00:25,680 --> 00:00:31,039
digital international bank where we've

00:00:28,880 --> 00:00:34,160
been asked to come and build

00:00:31,039 --> 00:00:35,200
a spinnaker pipeline so again spinnaker

00:00:34,160 --> 00:00:38,960
pipeline

00:00:35,200 --> 00:00:41,840
new bank let's go but first of all

00:00:38,960 --> 00:00:42,879
i'm abdelbas kabir i'm a software

00:00:41,840 --> 00:00:46,320
engineer

00:00:42,879 --> 00:00:50,480
devops at interswitch interswitch is

00:00:46,320 --> 00:00:53,120
a global financial technology company

00:00:50,480 --> 00:00:55,360
based in africa provide financial

00:00:53,120 --> 00:00:58,800
solutions to multiple

00:00:55,360 --> 00:01:01,920
multiple organizations and consumers

00:00:58,800 --> 00:01:05,040
enough of the intro let's get to it

00:01:01,920 --> 00:01:08,159
so what's in a pipeline well

00:01:05,040 --> 00:01:08,880
if you're in spainhacker summits then we

00:01:08,159 --> 00:01:11,520
know

00:01:08,880 --> 00:01:13,760
that a pipeline would most likely

00:01:11,520 --> 00:01:16,799
contain

00:01:13,760 --> 00:01:21,040
the build stage the package stage

00:01:16,799 --> 00:01:25,680
we test our code then we deploy so

00:01:21,040 --> 00:01:28,640
pretty basic right so everybody thinks

00:01:25,680 --> 00:01:30,159
for this bank the first pipeline the

00:01:28,640 --> 00:01:32,479
first situation of the pipeline

00:01:30,159 --> 00:01:33,840
will have a build of course where you

00:01:32,479 --> 00:01:37,680
build your code

00:01:33,840 --> 00:01:41,520
unit tests for running the unit test

00:01:37,680 --> 00:01:44,479
a quality check stage for for running

00:01:41,520 --> 00:01:44,720
for running for scanning the code um is

00:01:44,479 --> 00:01:48,000
it

00:01:44,720 --> 00:01:49,439
up to standard code quality um code

00:01:48,000 --> 00:01:50,880
smell

00:01:49,439 --> 00:01:52,799
depending on what kind of programming

00:01:50,880 --> 00:01:55,040
language you have there are several of

00:01:52,799 --> 00:01:58,640
them that you can run

00:01:55,040 --> 00:02:00,799
then security scans basically is this

00:01:58,640 --> 00:02:02,719
code does it look like it's going to

00:02:00,799 --> 00:02:03,600
it's going to have some security

00:02:02,719 --> 00:02:06,240
vulnerabilities

00:02:03,600 --> 00:02:06,640
using is is using a third-party library

00:02:06,240 --> 00:02:08,879
that

00:02:06,640 --> 00:02:09,679
has security vulnerabilities in it is

00:02:08,879 --> 00:02:13,360
using out of

00:02:09,679 --> 00:02:16,400
out of dates um libraries

00:02:13,360 --> 00:02:19,840
and the likes the next is

00:02:16,400 --> 00:02:21,920
we build an image out of the code

00:02:19,840 --> 00:02:23,360
build the image and run scans on the

00:02:21,920 --> 00:02:26,800
image

00:02:23,360 --> 00:02:29,920
so this is the package part our

00:02:26,800 --> 00:02:33,200
image has to be

00:02:29,920 --> 00:02:35,440
clear in terms of no security

00:02:33,200 --> 00:02:36,959
vulnerabilities it's hardened there are

00:02:35,440 --> 00:02:38,160
so many scans that you there are so many

00:02:36,959 --> 00:02:40,400
scans you can do here

00:02:38,160 --> 00:02:43,440
but don't forget security is top of mind

00:02:40,400 --> 00:02:43,440
since we're in the bank

00:02:43,599 --> 00:02:47,920
we deploy to equipment environment this

00:02:45,840 --> 00:02:48,480
will be our test environment or our uat

00:02:47,920 --> 00:02:52,000
environment

00:02:48,480 --> 00:02:54,319
however you want to call it deploying to

00:02:52,000 --> 00:02:56,480
the test annuity environment means that

00:02:54,319 --> 00:02:59,440
we can now run regression tests we can

00:02:56,480 --> 00:03:03,440
now run security tests again

00:02:59,440 --> 00:03:06,000
on the deployed the deployed application

00:03:03,440 --> 00:03:07,680
so what are the what kind of what what

00:03:06,000 --> 00:03:09,280
kind of security vulnerabilities should

00:03:07,680 --> 00:03:09,760
we expect when the application is

00:03:09,280 --> 00:03:11,280
running

00:03:09,760 --> 00:03:13,040
is there exposing what it shouldn't

00:03:11,280 --> 00:03:14,480
expose can you reach an end point

00:03:13,040 --> 00:03:15,760
without proper authentication

00:03:14,480 --> 00:03:18,400
authorization basically

00:03:15,760 --> 00:03:18,800
the likes we have so many security test

00:03:18,400 --> 00:03:21,280
run

00:03:18,800 --> 00:03:22,080
then we run our automation test this is

00:03:21,280 --> 00:03:24,720
where the

00:03:22,080 --> 00:03:25,680
the qa engineers can automate a test and

00:03:24,720 --> 00:03:27,519
run it against

00:03:25,680 --> 00:03:30,000
the deployed enviro the deployed

00:03:27,519 --> 00:03:34,159
application

00:03:30,000 --> 00:03:37,440
and we give a manual judgment stage

00:03:34,159 --> 00:03:39,519
where the qa engineer can now so the

00:03:37,440 --> 00:03:42,640
the whole pipeline pauses for the queue

00:03:39,519 --> 00:03:46,560
engineer to either decide to proceed

00:03:42,640 --> 00:03:50,480
or to fill the qa because

00:03:46,560 --> 00:03:53,599
some quality checks can't be automated

00:03:50,480 --> 00:03:54,879
so we put the manual stage for the qa

00:03:53,599 --> 00:03:59,680
engineer

00:03:54,879 --> 00:04:01,280
to run the or to run other tests

00:03:59,680 --> 00:04:03,599
but just this just the first iteration

00:04:01,280 --> 00:04:07,840
of the pipeline

00:04:03,599 --> 00:04:12,560
the next is okay so how does our

00:04:07,840 --> 00:04:12,560
how is our environment architected

00:04:13,200 --> 00:04:19,759
spinach will be deployed primarily

00:04:17,199 --> 00:04:21,040
on the kubernetes environments running

00:04:19,759 --> 00:04:23,120
on the test environment

00:04:21,040 --> 00:04:24,400
so this is the first stage is the first

00:04:23,120 --> 00:04:26,479
situation

00:04:24,400 --> 00:04:28,080
we've deployed it for the we've deployed

00:04:26,479 --> 00:04:29,600
it for all the engineers to try

00:04:28,080 --> 00:04:32,080
for all the different engineering teams

00:04:29,600 --> 00:04:34,400
to try and

00:04:32,080 --> 00:04:35,199
they've been using it to deploy multiple

00:04:34,400 --> 00:04:38,479
applications

00:04:35,199 --> 00:04:40,320
to the same queue analytics environments

00:04:38,479 --> 00:04:42,160
but because compliance is at the top of

00:04:40,320 --> 00:04:44,639
our mind there are a few

00:04:42,160 --> 00:04:45,520
compliance checklists that we have to we

00:04:44,639 --> 00:04:49,040
have

00:04:45,520 --> 00:04:52,639
the first is pci dss pcidss

00:04:49,040 --> 00:04:54,080
payment card industry data security

00:04:52,639 --> 00:04:56,479
standard

00:04:54,080 --> 00:04:59,120
this is a data security standard

00:04:56,479 --> 00:05:03,600
developed by the payment card industry

00:04:59,120 --> 00:05:06,000
secure security council

00:05:03,600 --> 00:05:08,240
basically it's one of the primary

00:05:06,000 --> 00:05:11,520
regulation and primary compliance

00:05:08,240 --> 00:05:12,960
that we need to have

00:05:11,520 --> 00:05:14,720
primary compliance that we need to make

00:05:12,960 --> 00:05:17,199
sure that we are abiding by as

00:05:14,720 --> 00:05:20,080
a bank as a financial as a player in the

00:05:17,199 --> 00:05:22,240
financial industry

00:05:20,080 --> 00:05:23,840
also there should be authorization

00:05:22,240 --> 00:05:27,039
authentication so we need to build that

00:05:23,840 --> 00:05:28,880
in to the bank's um spinning car

00:05:27,039 --> 00:05:30,560
pipelines spinnaker deployments banker

00:05:28,880 --> 00:05:32,720
environments

00:05:30,560 --> 00:05:33,600
also auditorium is something that's very

00:05:32,720 --> 00:05:36,639
important for

00:05:33,600 --> 00:05:38,000
a bank making sure that our passwords

00:05:36,639 --> 00:05:41,039
are not clear

00:05:38,000 --> 00:05:42,800
there's nothing clear in config files

00:05:41,039 --> 00:05:44,560
in terms of passwords all passwords are

00:05:42,800 --> 00:05:47,360
masked or encrypted

00:05:44,560 --> 00:05:48,479
log collection and aggregation tracking

00:05:47,360 --> 00:05:51,199
and monitoring

00:05:48,479 --> 00:05:51,680
and also tracking our changes so part of

00:05:51,199 --> 00:05:55,199
the

00:05:51,680 --> 00:05:57,600
part of a bank's infosec policy would be

00:05:55,199 --> 00:05:58,400
all changes made to the production

00:05:57,600 --> 00:06:01,600
environments

00:05:58,400 --> 00:06:03,759
need to be tracked again we're creating

00:06:01,600 --> 00:06:06,560
a spinach pipeline to deploy all the way

00:06:03,759 --> 00:06:10,479
to the operation environment

00:06:06,560 --> 00:06:14,160
so updates the spinnaker pipeline

00:06:10,479 --> 00:06:16,720
because compliance is top of mind

00:06:14,160 --> 00:06:18,400
we need to update our pipeline so that

00:06:16,720 --> 00:06:21,360
we introduce

00:06:18,400 --> 00:06:23,199
more checks or more stages that help

00:06:21,360 --> 00:06:26,639
with compliance

00:06:23,199 --> 00:06:30,080
so this stage would be a

00:06:26,639 --> 00:06:33,680
a compliance check on the code itself

00:06:30,080 --> 00:06:37,199
that's the code compliance stage

00:06:33,680 --> 00:06:37,840
an artifact scan stage so basically

00:06:37,199 --> 00:06:40,000
after

00:06:37,840 --> 00:06:41,520
the application has been deployed to the

00:06:40,000 --> 00:06:43,360
commenting environment of course

00:06:41,520 --> 00:06:45,039
we know that deploying to cuban server

00:06:43,360 --> 00:06:49,599
will most likely mean

00:06:45,039 --> 00:06:53,520
an ingress is service

00:06:49,599 --> 00:06:55,840
config map secrets the deployment itself

00:06:53,520 --> 00:06:58,960
and the pod and the replicas

00:06:55,840 --> 00:07:00,720
replica set and the stateful sets

00:06:58,960 --> 00:07:03,919
all these artifacts that we've deployed

00:07:00,720 --> 00:07:06,080
to the equipment environments

00:07:03,919 --> 00:07:07,520
scanning them and ensuring that in the

00:07:06,080 --> 00:07:10,319
environment variables

00:07:07,520 --> 00:07:11,120
in the secrets in the config maps

00:07:10,319 --> 00:07:14,400
nothing

00:07:11,120 --> 00:07:16,560
is in clear text even when we when we

00:07:14,400 --> 00:07:19,759
add our tls certificates

00:07:16,560 --> 00:07:23,360
that nothing is in cletex then

00:07:19,759 --> 00:07:26,880
the last compliance stage after the qa

00:07:23,360 --> 00:07:29,039
has passed what does this do basically

00:07:26,880 --> 00:07:30,560
checking the application that has been

00:07:29,039 --> 00:07:32,319
running now for some time

00:07:30,560 --> 00:07:34,319
that has gone through regression tests

00:07:32,319 --> 00:07:37,360
and automated tests and even some maybe

00:07:34,319 --> 00:07:39,280
manual click on points tests

00:07:37,360 --> 00:07:41,039
did it output any secrets in clear text

00:07:39,280 --> 00:07:44,240
they didn't log any

00:07:41,039 --> 00:07:44,560
and any card holder details in clare did

00:07:44,240 --> 00:07:46,720
it

00:07:44,560 --> 00:07:49,120
not mask anything did it store anything

00:07:46,720 --> 00:07:50,800
unencrypted on the password

00:07:49,120 --> 00:07:52,879
and the likes so these are the kind of

00:07:50,800 --> 00:07:56,800
checks that we run

00:07:52,879 --> 00:07:59,039
at the compliance run stage and

00:07:56,800 --> 00:08:00,560
doing all this helps us achieve a few

00:07:59,039 --> 00:08:03,840
things in terms of

00:08:00,560 --> 00:08:06,319
pci dss we we achieve the goal of

00:08:03,840 --> 00:08:07,680
ensuring that card holder data is

00:08:06,319 --> 00:08:10,000
protected

00:08:07,680 --> 00:08:11,599
nothing is in clear nothing is unmasked

00:08:10,000 --> 00:08:14,639
and nothing is unencrypted

00:08:11,599 --> 00:08:18,240
so everything has to be encrypted a mask

00:08:14,639 --> 00:08:20,319
also our passwords are not sinclair

00:08:18,240 --> 00:08:22,160
especially when we run the artifact scan

00:08:20,319 --> 00:08:24,879
stage

00:08:22,160 --> 00:08:26,560
it ensures that the config map the

00:08:24,879 --> 00:08:28,800
environment variable

00:08:26,560 --> 00:08:32,240
and the and even the secrets they don't

00:08:28,800 --> 00:08:33,919
have passwords in clear text

00:08:32,240 --> 00:08:36,320
on our cube analytics environment

00:08:33,919 --> 00:08:39,120
nothing is clear text

00:08:36,320 --> 00:08:40,719
so yes time to go for prod time to go to

00:08:39,120 --> 00:08:44,240
prod

00:08:40,719 --> 00:08:46,480
um yes but not really

00:08:44,240 --> 00:08:47,279
after going back to the management and

00:08:46,480 --> 00:08:49,680
telling them

00:08:47,279 --> 00:08:50,480
okay these are what we've achieved we

00:08:49,680 --> 00:08:53,600
now have

00:08:50,480 --> 00:08:57,920
this pipeline let's go to prod

00:08:53,600 --> 00:09:01,360
he said ah good but what

00:08:57,920 --> 00:09:03,519
we need to add a little extra

00:09:01,360 --> 00:09:04,480
just go some extra points try to

00:09:03,519 --> 00:09:08,080
implement

00:09:04,480 --> 00:09:10,000
staging can i analysis integrate with

00:09:08,080 --> 00:09:13,440
our existing ticketing system

00:09:10,000 --> 00:09:18,080
and ensure or replicate our change

00:09:13,440 --> 00:09:19,920
process well this is not a big task but

00:09:18,080 --> 00:09:21,360
it's some work so how are we going to do

00:09:19,920 --> 00:09:23,519
this first of all

00:09:21,360 --> 00:09:24,640
remember our architecture where our

00:09:23,519 --> 00:09:27,200
spinnaker enviro

00:09:24,640 --> 00:09:27,680
our spinnaker deployed deployment is

00:09:27,200 --> 00:09:30,560
done

00:09:27,680 --> 00:09:32,240
our spinner car is deployed to the test

00:09:30,560 --> 00:09:34,800
giveaway ethics environment

00:09:32,240 --> 00:09:36,800
that has to change first we do is we

00:09:34,800 --> 00:09:39,519
remove spinnaker entirely

00:09:36,800 --> 00:09:41,440
from that schematics cluster don't worry

00:09:39,519 --> 00:09:43,200
your opportunity back but not on that

00:09:41,440 --> 00:09:46,720
cluster

00:09:43,200 --> 00:09:49,760
we now have a management vlan

00:09:46,720 --> 00:09:51,279
a an entire an entire network

00:09:49,760 --> 00:09:53,360
environment that's isolated from the

00:09:51,279 --> 00:09:56,240
test network environment

00:09:53,360 --> 00:09:57,120
where we use it for our configuration

00:09:56,240 --> 00:09:59,360
tools

00:09:57,120 --> 00:10:00,560
and other management tools that's where

00:09:59,360 --> 00:10:00,959
we have well that's where we're going to

00:10:00,560 --> 00:10:03,839
have

00:10:00,959 --> 00:10:04,640
the qmantix cluster that will now run

00:10:03,839 --> 00:10:07,120
the

00:10:04,640 --> 00:10:09,440
um that will now run our spinnaker

00:10:07,120 --> 00:10:11,360
deployments

00:10:09,440 --> 00:10:13,440
this is the same it's in this same

00:10:11,360 --> 00:10:16,480
management vlan that we have

00:10:13,440 --> 00:10:19,839
some other ci tools so the

00:10:16,480 --> 00:10:19,839
feature is going to be like this

00:10:20,880 --> 00:10:27,279
ci tools run both on the test vlan

00:10:23,920 --> 00:10:27,920
and on the management vlan on the test

00:10:27,279 --> 00:10:30,560
vlan

00:10:27,920 --> 00:10:32,959
kubernetes can easily communicate from

00:10:30,560 --> 00:10:36,000
the management village to test vlan

00:10:32,959 --> 00:10:40,240
to deploy on uat environment and

00:10:36,000 --> 00:10:43,040
and run some ci tools and ci bills

00:10:40,240 --> 00:10:46,320
um and the likes maybe jenkins maybe

00:10:43,040 --> 00:10:48,560
something else

00:10:46,320 --> 00:10:50,880
and from the management vlan again cube

00:10:48,560 --> 00:10:51,920
um spinach i can easily communicate with

00:10:50,880 --> 00:10:55,920
the prod

00:10:51,920 --> 00:10:59,360
vlan where it deploys prod applications

00:10:55,920 --> 00:11:00,320
using the product pipeline so separating

00:10:59,360 --> 00:11:02,800
into these

00:11:00,320 --> 00:11:03,920
three separate vlans helps us achieve

00:11:02,800 --> 00:11:07,600
two other goals

00:11:03,920 --> 00:11:11,040
on the pci dss

00:11:07,600 --> 00:11:14,079
checklist these are

00:11:11,040 --> 00:11:14,800
deploy and maintain a secure network and

00:11:14,079 --> 00:11:18,240
systems

00:11:14,800 --> 00:11:21,279
again because the environments are now

00:11:18,240 --> 00:11:23,279
segregated are now independent

00:11:21,279 --> 00:11:25,519
the we've increased the security of our

00:11:23,279 --> 00:11:27,600
network

00:11:25,519 --> 00:11:29,040
also implement strong access control

00:11:27,600 --> 00:11:32,079
measures

00:11:29,040 --> 00:11:33,040
since most of our engineers would be

00:11:32,079 --> 00:11:36,560
running on the

00:11:33,040 --> 00:11:39,040
test vlan having a separate having

00:11:36,560 --> 00:11:40,320
everything separated vlans makes it

00:11:39,040 --> 00:11:42,560
easier for us to

00:11:40,320 --> 00:11:44,399
ensure access control you don't have

00:11:42,560 --> 00:11:49,120
access to prod vlan

00:11:44,399 --> 00:11:49,120
except and only if you need it

00:11:49,760 --> 00:11:54,639
these are two goals of the pci dss

00:11:52,800 --> 00:11:58,079
checklist that we've achieved

00:11:54,639 --> 00:12:00,880
by having three different civilians

00:11:58,079 --> 00:12:03,440
so now the pipeline for prod what would

00:12:00,880 --> 00:12:03,440
it look like

00:12:04,000 --> 00:12:08,720
so before we actually go to the prod

00:12:07,440 --> 00:12:12,079
pipeline

00:12:08,720 --> 00:12:15,760
let's modify our test pipeline

00:12:12,079 --> 00:12:19,920
introduce is another manual stage

00:12:15,760 --> 00:12:22,959
proceed to prod this stage basically

00:12:19,920 --> 00:12:26,560
gives the engineering team

00:12:22,959 --> 00:12:30,000
the ability to say okay

00:12:26,560 --> 00:12:32,720
so the deployment that has been done all

00:12:30,000 --> 00:12:35,040
the way to the test environment

00:12:32,720 --> 00:12:37,600
are we ready are we actually ready to

00:12:35,040 --> 00:12:41,360
deploy to prod

00:12:37,600 --> 00:12:44,959
yes if they are the manual stage there

00:12:41,360 --> 00:12:48,079
is is is judged as accepted

00:12:44,959 --> 00:12:48,800
and it can proceed to prod but before

00:12:48,079 --> 00:12:52,720
then

00:12:48,800 --> 00:12:55,120
remember we had the requirement of um

00:12:52,720 --> 00:12:57,040
ensuring that we are compliant or we

00:12:55,120 --> 00:12:59,440
replicate

00:12:57,040 --> 00:13:01,040
we replicate our ex replicate the

00:12:59,440 --> 00:13:04,000
existing

00:13:01,040 --> 00:13:05,680
ticketing system and also the existing

00:13:04,000 --> 00:13:07,279
change process

00:13:05,680 --> 00:13:09,600
so part of the existing change process

00:13:07,279 --> 00:13:11,600
is that a ticket has to be raised

00:13:09,600 --> 00:13:14,079
and so at this point we raise the

00:13:11,600 --> 00:13:14,079
tickets

00:13:15,760 --> 00:13:20,399
basically by using the manual judgment

00:13:18,720 --> 00:13:23,440
stage and reasoning tickets

00:13:20,399 --> 00:13:25,360
we've done two things we've

00:13:23,440 --> 00:13:26,959
we can now check our ticketing system

00:13:25,360 --> 00:13:28,160
and showing we use the ticketing system

00:13:26,959 --> 00:13:32,800
yes

00:13:28,160 --> 00:13:34,560
you can now check also exam use

00:13:32,800 --> 00:13:37,120
implement the existing change process

00:13:34,560 --> 00:13:40,079
without changing too much

00:13:37,120 --> 00:13:41,600
okay so again let's go back to our

00:13:40,079 --> 00:13:42,399
compliance checklist and see what we've

00:13:41,600 --> 00:13:44,959
achieved

00:13:42,399 --> 00:13:46,480
in terms of pci dss we've achieved three

00:13:44,959 --> 00:13:48,240
goals

00:13:46,480 --> 00:13:50,399
as for user authentication authorization

00:13:48,240 --> 00:13:53,920
we'll get to that audit will

00:13:50,399 --> 00:13:57,519
get to that mask and encrypted passwords

00:13:53,920 --> 00:14:00,079
yes the remaining will get them

00:13:57,519 --> 00:14:01,760
for the extras we've also achieved two

00:14:00,079 --> 00:14:05,040
the ticketing system

00:14:01,760 --> 00:14:08,079
and the change process

00:14:05,040 --> 00:14:10,639
replicating the existing change process

00:14:08,079 --> 00:14:11,279
so our architecture on the management

00:14:10,639 --> 00:14:14,160
vlan

00:14:11,279 --> 00:14:15,680
we remember that our ci tools were there

00:14:14,160 --> 00:14:17,279
the other conflictors were there and the

00:14:15,680 --> 00:14:20,639
comments clusters there

00:14:17,279 --> 00:14:21,360
so now let's integrate our spin account

00:14:20,639 --> 00:14:24,959
to our

00:14:21,360 --> 00:14:27,040
hot server so as the bank

00:14:24,959 --> 00:14:28,639
we already have an authentication server

00:14:27,040 --> 00:14:31,920
and that we use

00:14:28,639 --> 00:14:34,240
for user login so by integrating it

00:14:31,920 --> 00:14:35,279
we can now do authentication

00:14:34,240 --> 00:14:39,120
authorization

00:14:35,279 --> 00:14:40,240
that enables us to do some things on the

00:14:39,120 --> 00:14:43,600
project pipeline

00:14:40,240 --> 00:14:47,760
so this is our pipeline

00:14:43,600 --> 00:14:49,760
by adding authentication authorization

00:14:47,760 --> 00:14:53,440
we can now add manual stages so the

00:14:49,760 --> 00:14:57,199
manual stages are the ones in triangles

00:14:53,440 --> 00:15:00,079
so deployed to staging manual judgments

00:14:57,199 --> 00:15:01,440
that um one of the change managers has

00:15:00,079 --> 00:15:03,120
to go and manually

00:15:01,440 --> 00:15:05,360
approve and say yes let's deplete

00:15:03,120 --> 00:15:07,600
staging deploying to staging means

00:15:05,360 --> 00:15:09,760
that we deploy we make a canary

00:15:07,600 --> 00:15:11,920
deployment and we also do our canary

00:15:09,760 --> 00:15:13,839
analysis

00:15:11,920 --> 00:15:15,920
so there's a nice integration for canada

00:15:13,839 --> 00:15:18,079
analysis natively in

00:15:15,920 --> 00:15:20,560
spanish so no need to add extra extra

00:15:18,079 --> 00:15:20,560
plugins

00:15:20,959 --> 00:15:24,880
proceed to prod again because of our

00:15:24,160 --> 00:15:27,440
existing

00:15:24,880 --> 00:15:29,199
change management process because of our

00:15:27,440 --> 00:15:32,000
existing change management process

00:15:29,199 --> 00:15:32,480
we have to now put a manual judgment

00:15:32,000 --> 00:15:35,199
stage

00:15:32,480 --> 00:15:36,959
to proceed to prod when that is accepted

00:15:35,199 --> 00:15:39,199
it updates the cr

00:15:36,959 --> 00:15:41,440
again existing replicate what is in the

00:15:39,199 --> 00:15:43,759
existing change management process

00:15:41,440 --> 00:15:45,759
the cto's approval according to the

00:15:43,759 --> 00:15:47,920
existing change management process

00:15:45,759 --> 00:15:49,600
cto has to approve the chief technology

00:15:47,920 --> 00:15:53,199
officer has to approve

00:15:49,600 --> 00:15:56,800
anything that goes to production

00:15:53,199 --> 00:16:00,480
and what does that entail basically

00:15:56,800 --> 00:16:03,920
he comes on he comes to he comes on the

00:16:00,480 --> 00:16:05,680
spinner card dashboard and now

00:16:03,920 --> 00:16:07,360
makes the manual judgment of whether to

00:16:05,680 --> 00:16:10,480
proceed or not

00:16:07,360 --> 00:16:12,079
and if he proceeds the cr is updated the

00:16:10,480 --> 00:16:15,040
change request ticket is updated

00:16:12,079 --> 00:16:16,720
again part of the existing manual

00:16:15,040 --> 00:16:18,639
existing change process

00:16:16,720 --> 00:16:23,440
once that is updated then now we're good

00:16:18,639 --> 00:16:26,480
to go what happens next

00:16:23,440 --> 00:16:28,480
we deploy to prod we discard staging and

00:16:26,480 --> 00:16:31,440
we mark the whole process as done

00:16:28,480 --> 00:16:32,240
so yes now we can celebrate we have an

00:16:31,440 --> 00:16:35,600
existing

00:16:32,240 --> 00:16:39,759
we have a running spinnaker deployment

00:16:35,600 --> 00:16:42,800
however although

00:16:39,759 --> 00:16:46,880
it's using our change tracking

00:16:42,800 --> 00:16:49,199
system it has staging

00:16:46,880 --> 00:16:50,880
integrated it has canary analysis

00:16:49,199 --> 00:16:53,279
integrated

00:16:50,880 --> 00:16:53,920
it's ideal application the existing

00:16:53,279 --> 00:16:56,880
change

00:16:53,920 --> 00:16:58,639
management process we still have not

00:16:56,880 --> 00:16:59,360
achieved everything on our compliance

00:16:58,639 --> 00:17:02,480
checklist

00:16:59,360 --> 00:17:03,680
so let's continue the first thing we do

00:17:02,480 --> 00:17:08,079
is

00:17:03,680 --> 00:17:11,120
integrate elk elk will be used for

00:17:08,079 --> 00:17:14,720
log collection and log aggregation

00:17:11,120 --> 00:17:16,319
so integrate elk to to spinach

00:17:14,720 --> 00:17:19,120
so that we can collect all the logs that

00:17:16,319 --> 00:17:22,240
sprinkle outputs and have a way of

00:17:19,120 --> 00:17:24,240
visualizing it also

00:17:22,240 --> 00:17:27,199
integrates spinnaker into our monitoring

00:17:24,240 --> 00:17:29,679
system our existing monitoring system

00:17:27,199 --> 00:17:30,640
includes the custom monitoring system

00:17:29,679 --> 00:17:34,480
and even the

00:17:30,640 --> 00:17:34,480
prometheus grafana monitoring system

00:17:34,720 --> 00:17:38,720
by adding spinnaker to the to the

00:17:37,520 --> 00:17:41,679
monitoring system

00:17:38,720 --> 00:17:42,880
we can now say we've achieved the full

00:17:41,679 --> 00:17:45,600
instance

00:17:42,880 --> 00:17:48,320
with this change in architecture so

00:17:45,600 --> 00:17:51,280
authentication authorization is there

00:17:48,320 --> 00:17:52,880
lock collection and log aggregation

00:17:51,280 --> 00:17:55,760
tracking and monitoring

00:17:52,880 --> 00:17:56,559
with our monitoring system and audit

00:17:55,760 --> 00:17:58,640
trails

00:17:56,559 --> 00:18:00,160
again with the monitoring and the law

00:17:58,640 --> 00:18:03,679
collection and authentication

00:18:00,160 --> 00:18:06,480
system so how are we looking in terms of

00:18:03,679 --> 00:18:08,720
pci dss

00:18:06,480 --> 00:18:09,840
all these architectural changes have

00:18:08,720 --> 00:18:12,799
helped us achieve

00:18:09,840 --> 00:18:13,440
three more objectives of pci dss there's

00:18:12,799 --> 00:18:17,280
a

00:18:13,440 --> 00:18:19,200
implementation of strong access control

00:18:17,280 --> 00:18:21,200
regular monitoring because we've

00:18:19,200 --> 00:18:23,840
integrated into my insurance system

00:18:21,200 --> 00:18:24,799
and maintaining an infosec security

00:18:23,840 --> 00:18:28,000
policy

00:18:24,799 --> 00:18:31,840
basically because of what is within our

00:18:28,000 --> 00:18:34,880
what is within the infosec policy and

00:18:31,840 --> 00:18:37,360
ensuring that all the other previous

00:18:34,880 --> 00:18:38,559
checklists have been achieved then we

00:18:37,360 --> 00:18:41,919
can say that

00:18:38,559 --> 00:18:43,440
the infosec security policy is now this

00:18:41,919 --> 00:18:44,240
is compliant to the enforced executive

00:18:43,440 --> 00:18:46,160
policy

00:18:44,240 --> 00:18:48,480
thereby we've maintained we are

00:18:46,160 --> 00:18:50,080
maintaining the enforce executive policy

00:18:48,480 --> 00:18:52,720
so can we mark everything as complete

00:18:50,080 --> 00:18:56,720
can we say we finished

00:18:52,720 --> 00:18:58,880
in creating a pipeline for for the bank

00:18:56,720 --> 00:19:01,840
let's look at the requirements the new

00:18:58,880 --> 00:19:05,360
digital international bank gave us

00:19:01,840 --> 00:19:08,559
in terms of pci dss yes we've built

00:19:05,360 --> 00:19:10,320
and maintained a secure network

00:19:08,559 --> 00:19:12,080
because of the network partitions based

00:19:10,320 --> 00:19:14,480
on vlans

00:19:12,080 --> 00:19:15,600
are we protecting cardona details yes

00:19:14,480 --> 00:19:18,080
definitely

00:19:15,600 --> 00:19:19,120
we've checked that on the code we've

00:19:18,080 --> 00:19:22,160
checked that

00:19:19,120 --> 00:19:22,960
when it's deployed we've also ensured

00:19:22,160 --> 00:19:26,000
that we have

00:19:22,960 --> 00:19:27,360
encryption all around implementing

00:19:26,000 --> 00:19:28,160
strong access control measures

00:19:27,360 --> 00:19:31,039
definitely

00:19:28,160 --> 00:19:31,520
authentication authorization um when

00:19:31,039 --> 00:19:34,160
only

00:19:31,520 --> 00:19:35,360
those that need access to a particular

00:19:34,160 --> 00:19:36,960
network have

00:19:35,360 --> 00:19:39,360
needs all those that need associated

00:19:36,960 --> 00:19:41,760
participants have access

00:19:39,360 --> 00:19:44,000
regular monitoring and network tests

00:19:41,760 --> 00:19:47,039
again we've implemented monitoring

00:19:44,000 --> 00:19:49,600
into our environmental architecture

00:19:47,039 --> 00:19:50,559
and we've also made we also maintain a

00:19:49,600 --> 00:19:53,760
security

00:19:50,559 --> 00:19:55,919
policy the only thing that i'll say

00:19:53,760 --> 00:19:57,760
might be outstanding is the

00:19:55,919 --> 00:20:00,240
vulnerability management program

00:19:57,760 --> 00:20:00,960
and that's because vulnerability

00:20:00,240 --> 00:20:04,240
management

00:20:00,960 --> 00:20:06,080
has little to do with um has little to

00:20:04,240 --> 00:20:09,200
do with our spinnaker pipeline

00:20:06,080 --> 00:20:10,799
however because we are now checking

00:20:09,200 --> 00:20:13,200
because we are doing the code scans and

00:20:10,799 --> 00:20:14,640
ensuring that we our code is not even

00:20:13,200 --> 00:20:16,720
vulnerable in the first place there are

00:20:14,640 --> 00:20:18,640
no security vulnerabilities in the code

00:20:16,720 --> 00:20:20,080
or any dependency or any library that

00:20:18,640 --> 00:20:23,120
the code uses

00:20:20,080 --> 00:20:24,400
we can even mark this as done

00:20:23,120 --> 00:20:26,320
so what about the other compliance

00:20:24,400 --> 00:20:29,280
checklists given by the new

00:20:26,320 --> 00:20:30,960
new digital international bank user

00:20:29,280 --> 00:20:31,760
authentication is the authentication

00:20:30,960 --> 00:20:34,640
authorization

00:20:31,760 --> 00:20:35,840
audit trails password mask log

00:20:34,640 --> 00:20:37,679
collection

00:20:35,840 --> 00:20:38,880
tracking and monitoring and change

00:20:37,679 --> 00:20:43,520
tracking

00:20:38,880 --> 00:20:46,559
all those are there the extras

00:20:43,520 --> 00:20:48,799
of course we've done staging we've done

00:20:46,559 --> 00:20:50,720
the canary analysis

00:20:48,799 --> 00:20:51,919
we've integrated into the existential

00:20:50,720 --> 00:20:55,679
system

00:20:51,919 --> 00:20:59,440
and we've designed a pipeline that fits

00:20:55,679 --> 00:21:03,600
the existing change process so

00:20:59,440 --> 00:21:05,760
i think with our final pipeline looking

00:21:03,600 --> 00:21:08,320
like this for uat

00:21:05,760 --> 00:21:09,600
with all these different stages and our

00:21:08,320 --> 00:21:12,799
prod pipeline

00:21:09,600 --> 00:21:15,039
looking like this for for

00:21:12,799 --> 00:21:16,799
deploying to production environments

00:21:15,039 --> 00:21:19,760
with the manual stages

00:21:16,799 --> 00:21:20,400
and the manual checks and updating this

00:21:19,760 --> 00:21:22,880
year

00:21:20,400 --> 00:21:24,000
i can see that for our pipeline we've

00:21:22,880 --> 00:21:27,600
achieved

00:21:24,000 --> 00:21:31,120
the we've achieved the goal

00:21:27,600 --> 00:21:34,799
of being compliant and

00:21:31,120 --> 00:21:37,600
fitting into the existing process

00:21:34,799 --> 00:21:38,400
with our architecture looking like this

00:21:37,600 --> 00:21:42,480
having

00:21:38,400 --> 00:21:44,960
different subnets and only on a need to

00:21:42,480 --> 00:21:46,159
no basis so only work only for those

00:21:44,960 --> 00:21:49,360
that need access

00:21:46,159 --> 00:21:52,799
get access management's

00:21:49,360 --> 00:21:53,520
management vlan has the as the spinach

00:21:52,799 --> 00:21:55,200
pipeline

00:21:53,520 --> 00:21:56,640
has monitoring authentication

00:21:55,200 --> 00:21:59,520
authorization

00:21:56,640 --> 00:22:00,640
login it has access to deploy to

00:21:59,520 --> 00:22:04,400
production vlan

00:22:00,640 --> 00:22:08,400
and also has access for test vlan

00:22:04,400 --> 00:22:11,600
we have our system that's compliant

00:22:08,400 --> 00:22:15,600
and also fits into the

00:22:11,600 --> 00:22:19,360
bank's requirements with all this

00:22:15,600 --> 00:22:21,600
what we've done is to create

00:22:19,360 --> 00:22:22,720
a guide because every team will

00:22:21,600 --> 00:22:25,440
definitely have

00:22:22,720 --> 00:22:26,000
its own requirements to create a guide

00:22:25,440 --> 00:22:28,720
where each

00:22:26,000 --> 00:22:29,760
team can build and maintain their

00:22:28,720 --> 00:22:32,880
deployments

00:22:29,760 --> 00:22:35,360
according to their needs using our

00:22:32,880 --> 00:22:38,880
centrally provisioned system

00:22:35,360 --> 00:22:42,320
and ensuring that

00:22:38,880 --> 00:22:45,919
the whatever pipeline they come up with

00:22:42,320 --> 00:22:49,440
it's in line with best practice and also

00:22:45,919 --> 00:22:51,039
compliance thank you very much i'm i've

00:22:49,440 --> 00:22:52,799
been at the basketball and you can

00:22:51,039 --> 00:22:55,440
always follow me on twitter

00:22:52,799 --> 00:22:56,320
at abu kay and you can find me on

00:22:55,440 --> 00:22:58,720
linkedin

00:22:56,320 --> 00:23:00,159
linkedin dot com slash i n slash

00:22:58,720 --> 00:23:07,679
abdulbasset kay

00:23:00,159 --> 00:23:07,679

YouTube URL: https://www.youtube.com/watch?v=9cHVFY8fnfQ


