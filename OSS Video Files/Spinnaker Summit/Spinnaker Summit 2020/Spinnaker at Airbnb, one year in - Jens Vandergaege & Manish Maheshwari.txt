Title: Spinnaker at Airbnb, one year in - Jens Vandergaege & Manish Maheshwari
Publication date: 2021-01-28
Playlist: Spinnaker Summit 2020
Description: 
	It’s been well over a year since Airbnb started investing into Spinnaker. In the past year we’ve hit some significant milestones in our quest to bring Continuous Delivery to all of Airbnb engineering. In this talk by Jens Vanderhaeghe (software engineer) and Manish Maheshwari (Project Manager), you will learn we’ve made Spinnaker generally available and how we’ve convinced hundreds of teams to adopt Spinnaker for their deployment process. We’ll cover some of the challenges we’ve faced fitting Spinnaker to Airbnb’s specific use cases and how we leverage Spinnaker to reduce Airbnb site downtime and improve deployment velocity.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:05,200 --> 00:00:09,599
hello everyone welcome to

00:00:06,799 --> 00:00:12,160
the spinnaker summit um this year we'll

00:00:09,599 --> 00:00:14,320
be doing a virtual presentation

00:00:12,160 --> 00:00:16,400
manish and i will be talking about

00:00:14,320 --> 00:00:18,880
spinnaker at airbnb

00:00:16,400 --> 00:00:20,480
you may remember me from one year ago

00:00:18,880 --> 00:00:21,439
where we also talked about spinnaker at

00:00:20,480 --> 00:00:23,760
airbnb

00:00:21,439 --> 00:00:25,039
um so this year we wanted to give all of

00:00:23,760 --> 00:00:27,519
you an update

00:00:25,039 --> 00:00:28,160
on how airbnb is doing with spinnaker

00:00:27,519 --> 00:00:29,840
and what

00:00:28,160 --> 00:00:32,079
what spinnaker means for us as an

00:00:29,840 --> 00:00:35,120
enterprise

00:00:32,079 --> 00:00:36,239
um so let us introduce ourselves uh so

00:00:35,120 --> 00:00:38,320
i'm jens

00:00:36,239 --> 00:00:40,239
i'm originally from belgium i moved to

00:00:38,320 --> 00:00:42,079
the states in 2013

00:00:40,239 --> 00:00:43,360
um and i started my career as a

00:00:42,079 --> 00:00:45,280
front-end engineer

00:00:43,360 --> 00:00:46,640
and then slowly transitioned into

00:00:45,280 --> 00:00:49,840
infrastructure

00:00:46,640 --> 00:00:50,160
i currently am a software engineer on

00:00:49,840 --> 00:00:52,960
the

00:00:50,160 --> 00:00:53,920
continuous delivery team mostly working

00:00:52,960 --> 00:00:55,920
on

00:00:53,920 --> 00:00:57,039
running and platformizing spinnaker at

00:00:55,920 --> 00:01:00,239
airbnb

00:00:57,039 --> 00:01:03,680
and i also have a role on the

00:01:00,239 --> 00:01:04,320
ci sig so that's a special interest

00:01:03,680 --> 00:01:07,600
group

00:01:04,320 --> 00:01:10,880
that i collaborate in with netflix

00:01:07,600 --> 00:01:12,479
and we mainly talk about integrating ci

00:01:10,880 --> 00:01:14,640
into spinnaker i'm going to let my

00:01:12,479 --> 00:01:16,880
colleague manish introduce himself

00:01:14,640 --> 00:01:18,640
great uh thanks jens uh hey guys uh so

00:01:16,880 --> 00:01:21,920
i'm manish manish meshwari

00:01:18,640 --> 00:01:22,880
uh i am i'm a product manager here uh

00:01:21,920 --> 00:01:25,040
within airbnb

00:01:22,880 --> 00:01:26,640
um i own reliability products across

00:01:25,040 --> 00:01:28,320
airbnb

00:01:26,640 --> 00:01:30,000
including continuous delivery

00:01:28,320 --> 00:01:32,799
specifically spinnaker

00:01:30,000 --> 00:01:34,799
and then previously i was at aws

00:01:32,799 --> 00:01:37,520
focusing on developer

00:01:34,799 --> 00:01:37,520
developer tools

00:01:38,240 --> 00:01:43,119
so let's talk a little bit about um

00:01:40,479 --> 00:01:44,640
spinnaker at airbnb so far for those

00:01:43,119 --> 00:01:46,399
of you who might have missed our

00:01:44,640 --> 00:01:49,600
presentation last year

00:01:46,399 --> 00:01:51,280
um so our story sort of starts with our

00:01:49,600 --> 00:01:52,079
in-house tool the playboards which we

00:01:51,280 --> 00:01:54,240
initially

00:01:52,079 --> 00:01:56,159
built um so rather than adopting an

00:01:54,240 --> 00:01:56,880
existing solution we sort of roll our

00:01:56,159 --> 00:02:00,960
own

00:01:56,880 --> 00:02:02,719
tool um so what we ran into

00:02:00,960 --> 00:02:04,799
after a while was that deploy board did

00:02:02,719 --> 00:02:07,280
not support deploy pipelines and

00:02:04,799 --> 00:02:10,080
orchestration of complex workflows

00:02:07,280 --> 00:02:10,959
so while the playboard was a good enough

00:02:10,080 --> 00:02:13,040
system to

00:02:10,959 --> 00:02:14,160
deploy a single service to a single

00:02:13,040 --> 00:02:16,400
environment

00:02:14,160 --> 00:02:19,360
and that helped airbnb scale once we

00:02:16,400 --> 00:02:21,680
moved to a microservices architecture

00:02:19,360 --> 00:02:24,720
the ploy board did not work as well for

00:02:21,680 --> 00:02:26,720
orchestrating complex workflows

00:02:24,720 --> 00:02:28,160
basically deployed pipelines where we

00:02:26,720 --> 00:02:30,400
would like to deploy

00:02:28,160 --> 00:02:32,239
to different environments let's say that

00:02:30,400 --> 00:02:34,560
we wanted to deploy to staging

00:02:32,239 --> 00:02:35,840
then canary then production that's not

00:02:34,560 --> 00:02:36,959
something that was possible with the

00:02:35,840 --> 00:02:40,560
ploy board

00:02:36,959 --> 00:02:42,480
um so in 2019 we started looking at

00:02:40,560 --> 00:02:44,319
different solutions and one of those

00:02:42,480 --> 00:02:46,560
solutions was spinnaker

00:02:44,319 --> 00:02:47,519
so we eventually ended up adopting

00:02:46,560 --> 00:02:49,920
spinnaker

00:02:47,519 --> 00:02:52,160
mostly because of its large open source

00:02:49,920 --> 00:02:52,800
community and also its built-in support

00:02:52,160 --> 00:02:55,120
for

00:02:52,800 --> 00:02:56,640
um deploy pipelines as sort of a core

00:02:55,120 --> 00:02:59,120
concept

00:02:56,640 --> 00:02:59,760
so in 2019 we started adopting spinnaker

00:02:59,120 --> 00:03:02,319
and

00:02:59,760 --> 00:03:04,159
now in 2020 we have made spinnaker

00:03:02,319 --> 00:03:07,360
generally available to all of airbnb

00:03:04,159 --> 00:03:09,519
engineering and the majority of

00:03:07,360 --> 00:03:10,720
airbnb services have adopted spinnaker

00:03:09,519 --> 00:03:13,920
so far and

00:03:10,720 --> 00:03:13,920
it has been a great success

00:03:14,800 --> 00:03:19,360
so let's talk a little bit about what

00:03:17,360 --> 00:03:22,319
we're what this presentation today

00:03:19,360 --> 00:03:23,840
is going to be about um so we'll start

00:03:22,319 --> 00:03:25,040
talking about spinnaker general

00:03:23,840 --> 00:03:28,000
availability

00:03:25,040 --> 00:03:29,360
um so in 2020 we made spinach general

00:03:28,000 --> 00:03:30,159
available to all of engineering at

00:03:29,360 --> 00:03:32,159
airbnb

00:03:30,159 --> 00:03:33,599
how do we do this what do we learn from

00:03:32,159 --> 00:03:35,680
this process

00:03:33,599 --> 00:03:37,280
we'll also talk about some changes that

00:03:35,680 --> 00:03:40,000
we've made to airbnb we've made

00:03:37,280 --> 00:03:41,599
a lot of ui and user experiences

00:03:40,000 --> 00:03:44,640
experience changes

00:03:41,599 --> 00:03:46,480
um we will talk about how we improve and

00:03:44,640 --> 00:03:49,040
polish the spinnaker user experience

00:03:46,480 --> 00:03:50,400
to better fit some of airbnb's internal

00:03:49,040 --> 00:03:51,760
processes

00:03:50,400 --> 00:03:53,840
and then we'll also talk about some

00:03:51,760 --> 00:03:57,680
other new features that we added

00:03:53,840 --> 00:03:58,720
we've really extended spinnaker sort of

00:03:57,680 --> 00:04:00,400
to our own liking

00:03:58,720 --> 00:04:02,560
and we would like to talk about some of

00:04:00,400 --> 00:04:03,439
these use cases that we've run into and

00:04:02,560 --> 00:04:05,280
how we've

00:04:03,439 --> 00:04:07,760
adapted spinnaker to work better for

00:04:05,280 --> 00:04:10,959
airbnb

00:04:07,760 --> 00:04:13,760
okay manish great um thanks and so

00:04:10,959 --> 00:04:15,840
i'm going to focus on how did we make uh

00:04:13,760 --> 00:04:18,000
spinnaker generally available and

00:04:15,840 --> 00:04:19,120
uh and few learnings from there so uh

00:04:18,000 --> 00:04:21,199
starting with uh

00:04:19,120 --> 00:04:23,040
uh with initial landscape that we had at

00:04:21,199 --> 00:04:24,639
airbnb uh our

00:04:23,040 --> 00:04:26,400
our systems were like completely

00:04:24,639 --> 00:04:29,120
monolith uh and

00:04:26,400 --> 00:04:30,800
our goal was to move from uh monolith to

00:04:29,120 --> 00:04:33,840
uh soa or micro services

00:04:30,800 --> 00:04:35,840
uh starting in 2018 2019 uh time frame

00:04:33,840 --> 00:04:37,600
uh and then we quickly realized that our

00:04:35,840 --> 00:04:38,880
existing deployment tooling which is

00:04:37,600 --> 00:04:39,759
deployable that we had mentioned

00:04:38,880 --> 00:04:42,880
previously

00:04:39,759 --> 00:04:44,240
was not a good fit here uh a few reasons

00:04:42,880 --> 00:04:47,280
here beca

00:04:44,240 --> 00:04:50,160
a few reasons to that is uh first one

00:04:47,280 --> 00:04:50,880
the overall uh move from monroe to uh

00:04:50,160 --> 00:04:53,120
soa

00:04:50,880 --> 00:04:54,080
has its own operational complexity which

00:04:53,120 --> 00:04:56,000
is just because of

00:04:54,080 --> 00:04:57,440
distributed systems nature and there's a

00:04:56,000 --> 00:05:00,400
lot more moving parts

00:04:57,440 --> 00:05:01,360
um and then second as as we move to uh

00:05:00,400 --> 00:05:04,400
sua we

00:05:01,360 --> 00:05:05,919
also we were also moving like uh moving

00:05:04,400 --> 00:05:08,400
towards like cloud native

00:05:05,919 --> 00:05:10,080
uh workloads uh and so on so we were

00:05:08,400 --> 00:05:11,440
using containers and communities and

00:05:10,080 --> 00:05:12,880
then our existing tooling did not have

00:05:11,440 --> 00:05:15,840
like the first class support for

00:05:12,880 --> 00:05:17,440
uh for for that architecture um you can

00:05:15,840 --> 00:05:21,039
move this next

00:05:17,440 --> 00:05:23,280
third okay uh so uh

00:05:21,039 --> 00:05:24,240
so with the with the rapid increase in

00:05:23,280 --> 00:05:27,280
the overall

00:05:24,240 --> 00:05:28,800
number of services there are a bunch of

00:05:27,280 --> 00:05:29,199
initiatives across the company that we

00:05:28,800 --> 00:05:32,240
had

00:05:29,199 --> 00:05:32,720
one of the initiatives was to keep all

00:05:32,240 --> 00:05:35,600
code

00:05:32,720 --> 00:05:36,560
all service related uh core or any

00:05:35,600 --> 00:05:38,639
config

00:05:36,560 --> 00:05:40,880
in one particular place and we call it a

00:05:38,639 --> 00:05:43,280
we call it as one touch internally

00:05:40,880 --> 00:05:45,120
uh so that this includes uh pipeline

00:05:43,280 --> 00:05:45,600
configuration or anything related to our

00:05:45,120 --> 00:05:49,120
service

00:05:45,600 --> 00:05:52,240
uh in one uh in one git repository

00:05:49,120 --> 00:05:54,880
uh and then uh and then as i mentioned

00:05:52,240 --> 00:05:55,680
as we move from monolith to microwave

00:05:54,880 --> 00:05:57,680
services

00:05:55,680 --> 00:05:59,280
uh more services of course leads to more

00:05:57,680 --> 00:06:01,360
deploys and as a result

00:05:59,280 --> 00:06:03,039
uh a lot of uh there was two things

00:06:01,360 --> 00:06:04,960
happening one there was a culture shift

00:06:03,039 --> 00:06:09,199
that had to happen and second

00:06:04,960 --> 00:06:10,560
uh uh second uh was to learn

00:06:09,199 --> 00:06:12,400
uh how do we deal with this operational

00:06:10,560 --> 00:06:15,759
complexity of this new so our world

00:06:12,400 --> 00:06:19,199
uh and as more services are deployed uh

00:06:15,759 --> 00:06:20,960
the changes uh those services uh

00:06:19,199 --> 00:06:22,639
did not have like any guardrails in

00:06:20,960 --> 00:06:24,319
place uh from deployment safety

00:06:22,639 --> 00:06:26,800
perspective and that's where

00:06:24,319 --> 00:06:27,680
a spinnaker comes kim came in and really

00:06:26,800 --> 00:06:30,479
helped us

00:06:27,680 --> 00:06:32,160
improve the overall deployment story uh

00:06:30,479 --> 00:06:34,720
at airbnb

00:06:32,160 --> 00:06:35,199
so at the uh looking at the timeline uh

00:06:34,720 --> 00:06:38,639
we

00:06:35,199 --> 00:06:40,479
uh as we move as we transitioned from um

00:06:38,639 --> 00:06:41,680
to so uh uh started transitioning from

00:06:40,479 --> 00:06:44,479
monitor so when

00:06:41,680 --> 00:06:46,400
our 2018 2019 frame rate time frame and

00:06:44,479 --> 00:06:48,319
there is a time when we decided that we

00:06:46,400 --> 00:06:50,639
uh will move to uh spinnaker after

00:06:48,319 --> 00:06:53,840
looking at other uh alternatives

00:06:50,639 --> 00:06:55,599
uh uh from uh from uh

00:06:53,840 --> 00:06:57,599
from featured perspective and cost as

00:06:55,599 --> 00:07:00,160
well and we decided that we will

00:06:57,599 --> 00:07:01,680
we will look into we'll move to

00:07:00,160 --> 00:07:04,720
spinnaker and we will

00:07:01,680 --> 00:07:05,599
fill the gap that that needs to be that

00:07:04,720 --> 00:07:08,240
needs to

00:07:05,599 --> 00:07:09,680
be addressed from address for airbnb

00:07:08,240 --> 00:07:13,039
specific use cases

00:07:09,680 --> 00:07:14,080
uh so in 2019 uh when we started the

00:07:13,039 --> 00:07:16,880
spinnaker project

00:07:14,080 --> 00:07:18,400
uh the key challenge there was how do we

00:07:16,880 --> 00:07:21,919
ensure that there will be success

00:07:18,400 --> 00:07:22,560
uh it will be a successful uh uh project

00:07:21,919 --> 00:07:25,039
because

00:07:22,560 --> 00:07:26,639
moving to a new deployment tool uh as i

00:07:25,039 --> 00:07:27,280
mentioned it's like cultural change in

00:07:26,639 --> 00:07:29,280
second

00:07:27,280 --> 00:07:31,840
there's a lot of distraction that can

00:07:29,280 --> 00:07:34,160
happen from like large scale migrations

00:07:31,840 --> 00:07:35,919
so we started really small we started

00:07:34,160 --> 00:07:39,280
with the pilot projects of

00:07:35,919 --> 00:07:40,960
around 10 services and then

00:07:39,280 --> 00:07:43,199
got their initial feedback and these 10

00:07:40,960 --> 00:07:46,000
services were 10 services included

00:07:43,199 --> 00:07:46,639
some of the most critical services in in

00:07:46,000 --> 00:07:48,240
things like

00:07:46,639 --> 00:07:49,680
services which are in payments for

00:07:48,240 --> 00:07:51,599
example uh

00:07:49,680 --> 00:07:53,280
and once we got the feedback we quickly

00:07:51,599 --> 00:07:55,919
iterated uh on the

00:07:53,280 --> 00:07:58,080
uh uh on the on the tooling we added a

00:07:55,919 --> 00:07:59,599
bunch of feature uh feature set uh

00:07:58,080 --> 00:08:02,639
features that we wanted

00:07:59,599 --> 00:08:04,400
uh that customers wanted to uh uh to

00:08:02,639 --> 00:08:07,759
start using spinnaker

00:08:04,400 --> 00:08:10,560
uh uh and this was like a big like large

00:08:07,759 --> 00:08:10,960
diffs between our existing tooling uh uh

00:08:10,560 --> 00:08:14,879
and

00:08:10,960 --> 00:08:17,520
spinnaker um uh one of the examples is

00:08:14,879 --> 00:08:19,120
uh if a particular deployment is bad uh

00:08:17,520 --> 00:08:20,319
how how can someone mark that particular

00:08:19,120 --> 00:08:20,639
deployment is bad in spinnaker there's

00:08:20,319 --> 00:08:22,319
no

00:08:20,639 --> 00:08:23,840
native functionality so we have to build

00:08:22,319 --> 00:08:25,120
it ourselves so that is one of the

00:08:23,840 --> 00:08:27,520
features that we added

00:08:25,120 --> 00:08:28,160
uh and and once we iterated on that

00:08:27,520 --> 00:08:30,479
feedback

00:08:28,160 --> 00:08:31,919
uh uh we were able to prioritize set of

00:08:30,479 --> 00:08:35,039
features that is required

00:08:31,919 --> 00:08:37,839
uh for us to uh uh for us to

00:08:35,039 --> 00:08:38,640
make it generally available uh uh in

00:08:37,839 --> 00:08:41,120
2020.

00:08:38,640 --> 00:08:42,640
so in 2019 we onboarded a bunch of new

00:08:41,120 --> 00:08:45,440
uh additional services

00:08:42,640 --> 00:08:46,640
uh and also helped uh the uh help them

00:08:45,440 --> 00:08:50,240
onboard onto

00:08:46,640 --> 00:08:53,760
aca and and that way i was able to

00:08:50,240 --> 00:08:55,120
in h2 we were able to uh come up with a

00:08:53,760 --> 00:08:58,480
value proposition

00:08:55,120 --> 00:09:00,080
uh that this is how uh spinnaker really

00:08:58,480 --> 00:09:02,080
helps uh service teams

00:09:00,080 --> 00:09:04,000
to not only reduce their overall uh

00:09:02,080 --> 00:09:06,160
downtime because of the safety

00:09:04,000 --> 00:09:07,839
uh features that we that spinker

00:09:06,160 --> 00:09:09,920
provides and really

00:09:07,839 --> 00:09:11,200
helps them enable or helps them automate

00:09:09,920 --> 00:09:14,080
their release workflows

00:09:11,200 --> 00:09:15,360
uh but also it increases their overall

00:09:14,080 --> 00:09:17,519
development velocity

00:09:15,360 --> 00:09:19,440
uh which is critical for businesses in

00:09:17,519 --> 00:09:20,959
order to improve their overall time to

00:09:19,440 --> 00:09:23,200
market

00:09:20,959 --> 00:09:25,120
and then in 2020 uh with all the

00:09:23,200 --> 00:09:25,760
feedback and all the iterations that we

00:09:25,120 --> 00:09:27,680
had

00:09:25,760 --> 00:09:28,720
uh that we did we uh as i mentioned we

00:09:27,680 --> 00:09:30,959
prioritize the appropriate set of

00:09:28,720 --> 00:09:33,440
feature set that will help

00:09:30,959 --> 00:09:35,279
that will improve the adoption uh

00:09:33,440 --> 00:09:38,880
probability across the company

00:09:35,279 --> 00:09:42,000
uh and and and we gave the product in

00:09:38,880 --> 00:09:45,600
in q1 2020. uh from there

00:09:42,000 --> 00:09:48,959
uh uh until now it was uh uh it has been

00:09:45,600 --> 00:09:51,279
uh uh received with very high

00:09:48,959 --> 00:09:52,000
with very positive feedback uh that

00:09:51,279 --> 00:09:54,880
customers

00:09:52,000 --> 00:09:56,480
are able to reduce their overall

00:09:54,880 --> 00:09:58,959
downtime and then improve their overall

00:09:56,480 --> 00:10:01,680
development velocity uh and now they can

00:09:58,959 --> 00:10:03,760
focus more on their business uh

00:10:01,680 --> 00:10:05,279
on their business uh requirements and

00:10:03,760 --> 00:10:09,600
not more on the operational

00:10:05,279 --> 00:10:09,600
operational operational

00:10:10,079 --> 00:10:13,600
operational work in this case

00:10:11,760 --> 00:10:15,360
deployments and

00:10:13,600 --> 00:10:17,040
second and the second they also get a

00:10:15,360 --> 00:10:18,720
lot more better experience

00:10:17,040 --> 00:10:20,880
on the troubled shooting piece when a

00:10:18,720 --> 00:10:23,680
particular deployment fails

00:10:20,880 --> 00:10:25,600
today we are after ga today we are at a

00:10:23,680 --> 00:10:26,399
place where majority of our services are

00:10:25,600 --> 00:10:28,640
on spinnaker

00:10:26,399 --> 00:10:30,000
uh and uh getting onto spinnaker is a

00:10:28,640 --> 00:10:32,240
company-wide priority

00:10:30,000 --> 00:10:33,519
uh for airbnb and we are going to look

00:10:32,240 --> 00:10:35,680
into uh

00:10:33,519 --> 00:10:36,880
completely getting and completely

00:10:35,680 --> 00:10:40,000
deprecating

00:10:36,880 --> 00:10:42,560
uh the uh the

00:10:40,000 --> 00:10:46,640
old tool which is deploy board um

00:10:42,560 --> 00:10:47,040
sometime early next year great uh so

00:10:46,640 --> 00:10:49,200
next

00:10:47,040 --> 00:10:50,560
next step here is uh next thing here is

00:10:49,200 --> 00:10:52,160
how did we come up with

00:10:50,560 --> 00:10:53,680
a successful onboarding strategy and

00:10:52,160 --> 00:10:56,320
that is like a challenge for

00:10:53,680 --> 00:10:56,720
most uh internal products across various

00:10:56,320 --> 00:10:59,600
uh

00:10:56,720 --> 00:11:00,720
uh across any company that we can come

00:10:59,600 --> 00:11:02,800
up with a new tool

00:11:00,720 --> 00:11:04,079
or a new product and and how do we make

00:11:02,800 --> 00:11:06,959
sure that this overall

00:11:04,079 --> 00:11:08,560
uh story of onboarding or adoption is

00:11:06,959 --> 00:11:11,360
successful within the company

00:11:08,560 --> 00:11:12,800
uh so we took uh uh we looked at it from

00:11:11,360 --> 00:11:13,519
from the customer perspective like what

00:11:12,800 --> 00:11:16,160
are the top

00:11:13,519 --> 00:11:18,320
problems that customers may have or or

00:11:16,160 --> 00:11:21,120
frictions customer customers may have

00:11:18,320 --> 00:11:22,160
uh and that that will lead to

00:11:21,120 --> 00:11:25,680
unsuccessful

00:11:22,160 --> 00:11:26,959
uh adoption so key one of the key

00:11:25,680 --> 00:11:28,720
insight after interviewing a bunch of

00:11:26,959 --> 00:11:29,519
customers was that customers did not

00:11:28,720 --> 00:11:32,560
want to be

00:11:29,519 --> 00:11:33,040
forced um uh forced into using a new

00:11:32,560 --> 00:11:35,440
tool

00:11:33,040 --> 00:11:38,560
they really they really wanted a gradual

00:11:35,440 --> 00:11:41,120
uh gradual move to the new tool so we

00:11:38,560 --> 00:11:42,800
we we kept our existing tooling which is

00:11:41,120 --> 00:11:46,320
deployable or also

00:11:42,800 --> 00:11:49,600
really uh improved this spinnaker story

00:11:46,320 --> 00:11:51,120
significantly such that it was it was no

00:11:49,600 --> 00:11:52,079
brainer for these service teams to move

00:11:51,120 --> 00:11:53,600
on to spinnaker

00:11:52,079 --> 00:11:55,519
because we had appropriate case studies

00:11:53,600 --> 00:11:58,079
we had appropriate value proposition

00:11:55,519 --> 00:11:59,279
that other teams were were receiving uh

00:11:58,079 --> 00:12:01,360
significant benefits

00:11:59,279 --> 00:12:03,120
uh from moving on to spinnaker uh so

00:12:01,360 --> 00:12:04,720
there was no first one is like no forced

00:12:03,120 --> 00:12:06,959
migration and second piece is

00:12:04,720 --> 00:12:10,639
we really help customers through onboard

00:12:06,959 --> 00:12:12,959
pretty quickly by them

00:12:10,639 --> 00:12:15,120
uh using self onboarding mechanisms so

00:12:12,959 --> 00:12:15,600
we provided default pipeline configs

00:12:15,120 --> 00:12:19,040
with

00:12:15,600 --> 00:12:21,760
our default ac automated canary analysis

00:12:19,040 --> 00:12:23,519
and they really help customers to get uh

00:12:21,760 --> 00:12:24,800
get the pipeline from day one as soon as

00:12:23,519 --> 00:12:26,240
they create the new services they will

00:12:24,800 --> 00:12:27,760
get these pipelines

00:12:26,240 --> 00:12:29,600
uh at the same time they can just create

00:12:27,760 --> 00:12:31,279
these pipelines with just uh

00:12:29,600 --> 00:12:35,279
uh with just a command line which is

00:12:31,279 --> 00:12:38,000
like one uh one line of uh

00:12:35,279 --> 00:12:38,560
command line uh command and then third

00:12:38,000 --> 00:12:41,440
one uh

00:12:38,560 --> 00:12:42,720
is more of more of uh the reporting

00:12:41,440 --> 00:12:45,440
perspective which is

00:12:42,720 --> 00:12:47,200
how uh how can we enable customers to

00:12:45,440 --> 00:12:47,760
report the business impact so that they

00:12:47,200 --> 00:12:51,200
can

00:12:47,760 --> 00:12:53,680
uh they can themselves uh

00:12:51,200 --> 00:12:54,800
share the success success story of

00:12:53,680 --> 00:12:56,079
spinnaker within

00:12:54,800 --> 00:12:58,079
their teams and within their partner

00:12:56,079 --> 00:13:00,880
teams uh so we were able to

00:12:58,079 --> 00:13:02,639
uh share business impact uh with all the

00:13:00,880 --> 00:13:04,000
uh all the customers that

00:13:02,639 --> 00:13:06,639
house spinnaker really helped them

00:13:04,000 --> 00:13:08,560
improve their overall site uptime or

00:13:06,639 --> 00:13:10,880
service of time

00:13:08,560 --> 00:13:12,079
and then also help them understand how

00:13:10,880 --> 00:13:14,880
many num how many

00:13:12,079 --> 00:13:17,120
potential incidents uh were prevented

00:13:14,880 --> 00:13:17,519
because of aca or because of uh because

00:13:17,120 --> 00:13:18,880
of

00:13:17,519 --> 00:13:20,720
this particular pipeline was able to

00:13:18,880 --> 00:13:22,320
catch uh incident

00:13:20,720 --> 00:13:23,760
catch regressions through these

00:13:22,320 --> 00:13:25,120
integrations uh

00:13:23,760 --> 00:13:27,360
through the integration test which were

00:13:25,120 --> 00:13:30,399
kicked off uh because uh uh

00:13:27,360 --> 00:13:33,519
by this pipeline uh next

00:13:30,399 --> 00:13:35,279
uh as i mentioned we used uh one of the

00:13:33,519 --> 00:13:35,920
strategy was to enable users to quickly

00:13:35,279 --> 00:13:39,279
onboard

00:13:35,920 --> 00:13:42,000
and we used a lot of defaults

00:13:39,279 --> 00:13:43,760
starting from which environments should

00:13:42,000 --> 00:13:46,560
should any service be in

00:13:43,760 --> 00:13:48,000
to what pipeline should how pipelines

00:13:46,560 --> 00:13:49,440
should be structured and to

00:13:48,000 --> 00:13:51,279
uh which kind of integrations that

00:13:49,440 --> 00:13:54,160
particular pipeline should have

00:13:51,279 --> 00:13:54,720
and and and what kind of canary analysis

00:13:54,160 --> 00:13:56,240
config

00:13:54,720 --> 00:13:59,120
a particular pipeline should have so all

00:13:56,240 --> 00:14:01,440
of this was automated for our customers

00:13:59,120 --> 00:14:02,800
uh as a default like a package and they

00:14:01,440 --> 00:14:04,880
can just get it

00:14:02,800 --> 00:14:06,399
from day one and then of course they can

00:14:04,880 --> 00:14:08,399
customize it for for there for their

00:14:06,399 --> 00:14:08,959
specific specific needs but this really

00:14:08,399 --> 00:14:11,680
helped

00:14:08,959 --> 00:14:12,480
our customers uh to get started with

00:14:11,680 --> 00:14:14,160
spinnaker

00:14:12,480 --> 00:14:16,160
and see this see their service on

00:14:14,160 --> 00:14:18,240
spinnaker uh ui

00:14:16,160 --> 00:14:19,839
uh and then play with it and quickly get

00:14:18,240 --> 00:14:23,680
uh and quickly

00:14:19,839 --> 00:14:25,040
uh uh start uh start customizing uh

00:14:23,680 --> 00:14:26,720
their service

00:14:25,040 --> 00:14:30,480
for for canary or for or for their

00:14:26,720 --> 00:14:33,199
particular pipeline so where we are

00:14:30,480 --> 00:14:34,800
today so today we have more than 450 uh

00:14:33,199 --> 00:14:37,199
services

00:14:34,800 --> 00:14:38,399
uh which are active uh on on spinnaker

00:14:37,199 --> 00:14:40,399
by active i mean

00:14:38,399 --> 00:14:42,320
uh these are services which are actually

00:14:40,399 --> 00:14:45,839
which are deploying at least once

00:14:42,320 --> 00:14:48,880
uh in a particular month or uh uh

00:14:45,839 --> 00:14:50,800
yeah and then second piece is

00:14:48,880 --> 00:14:51,839
uh the number of roll backs or

00:14:50,800 --> 00:14:52,959
percentage of roll backs which are

00:14:51,839 --> 00:14:56,240
prevented by spinnaker

00:14:52,959 --> 00:14:58,160
so around 75 75 percent uh

00:14:56,240 --> 00:14:59,680
of our rollbacks were prevented by

00:14:58,160 --> 00:15:02,720
spinnaker uh uh

00:14:59,680 --> 00:15:05,279
uh since vgad and then uh 65

00:15:02,720 --> 00:15:06,720
of our critical services uh uh were

00:15:05,279 --> 00:15:09,920
deployed with spinnaker

00:15:06,720 --> 00:15:12,639
uh and uh and they were validated

00:15:09,920 --> 00:15:14,000
validated with a with an ac stage which

00:15:12,639 --> 00:15:14,720
is automated canadian analysis in

00:15:14,000 --> 00:15:16,320
spinnaker

00:15:14,720 --> 00:15:18,480
which means that majority of our

00:15:16,320 --> 00:15:19,920
services are now using spinnaker and

00:15:18,480 --> 00:15:21,680
are are using deployment safety

00:15:19,920 --> 00:15:24,240
mechanisms such as aca

00:15:21,680 --> 00:15:26,800
for their department safety uh needs so

00:15:24,240 --> 00:15:29,600
with this in mind uh today airbnb

00:15:26,800 --> 00:15:30,800
uh is all in on spinnaker uh investment

00:15:29,600 --> 00:15:31,440
and we are going to significantly

00:15:30,800 --> 00:15:34,240
improve the

00:15:31,440 --> 00:15:35,680
uh uh continuous delivery story uh

00:15:34,240 --> 00:15:36,880
moving forward uh with the help of

00:15:35,680 --> 00:15:40,240
spinnaker

00:15:36,880 --> 00:15:43,279
back to aliens so um

00:15:40,240 --> 00:15:45,199
now that we have spinnaker as a ga

00:15:43,279 --> 00:15:46,560
um we'd like to talk a little bit about

00:15:45,199 --> 00:15:48,320
some of the um

00:15:46,560 --> 00:15:51,040
ui and user experience changes that

00:15:48,320 --> 00:15:53,120
we've made to spinnaker

00:15:51,040 --> 00:15:54,160
um so when we initially started with

00:15:53,120 --> 00:15:56,079
spinnaker

00:15:54,160 --> 00:15:58,079
we wanted to run some user research to

00:15:56,079 --> 00:15:59,600
actually make sure that

00:15:58,079 --> 00:16:01,199
we were actually delivering a good

00:15:59,600 --> 00:16:04,639
product and so

00:16:01,199 --> 00:16:07,680
we ran a few user research sessions

00:16:04,639 --> 00:16:10,000
and what we found is that

00:16:07,680 --> 00:16:11,279
people were actually not very happy with

00:16:10,000 --> 00:16:14,079
the spinnaker ui

00:16:11,279 --> 00:16:14,800
initially some here are some quotes from

00:16:14,079 --> 00:16:17,680
some of the

00:16:14,800 --> 00:16:19,920
airbnb engineers that we've that

00:16:17,680 --> 00:16:22,399
participated in our user research

00:16:19,920 --> 00:16:24,480
so the quotes range from the ui is

00:16:22,399 --> 00:16:26,720
confusing it's very hard to identify

00:16:24,480 --> 00:16:29,360
which builds are currently live

00:16:26,720 --> 00:16:30,160
people not really understanding how ci

00:16:29,360 --> 00:16:32,880
and cd

00:16:30,160 --> 00:16:34,399
are integrated and they were worried

00:16:32,880 --> 00:16:37,600
that it would make

00:16:34,399 --> 00:16:38,639
remediating incidents more difficult the

00:16:37,600 --> 00:16:40,800
other

00:16:38,639 --> 00:16:43,600
concern that people had was that it was

00:16:40,800 --> 00:16:45,600
fairly hard to debug a pipeline failure

00:16:43,600 --> 00:16:47,600
um so the golden path worked pretty well

00:16:45,600 --> 00:16:50,560
but once a pipeline fails

00:16:47,600 --> 00:16:51,839
it could be pretty difficult to debug

00:16:50,560 --> 00:16:53,759
and so

00:16:51,839 --> 00:16:56,000
it would be a very painful experience to

00:16:53,759 --> 00:16:58,720
figure out why their pipeline failed

00:16:56,000 --> 00:17:00,720
some things that we saw were for example

00:16:58,720 --> 00:17:03,120
cryptic error messages

00:17:00,720 --> 00:17:05,199
especially when it comes to debugging

00:17:03,120 --> 00:17:06,799
automated canary analysis which cannot

00:17:05,199 --> 00:17:10,000
always be

00:17:06,799 --> 00:17:14,480
very straightforward so what we did

00:17:10,000 --> 00:17:17,120
is we extended spinnaker's ui

00:17:14,480 --> 00:17:18,319
and we really pushed for integrating our

00:17:17,120 --> 00:17:20,959
internal ci

00:17:18,319 --> 00:17:22,880
platform so basically what we did as you

00:17:20,959 --> 00:17:26,160
can see from the screenshot is that we

00:17:22,880 --> 00:17:28,720
added a new top-level page to spinnaker

00:17:26,160 --> 00:17:30,160
called snapshots and this snapshot page

00:17:28,720 --> 00:17:33,039
will basically show us

00:17:30,160 --> 00:17:34,320
all of the existing builds and we also

00:17:33,039 --> 00:17:37,360
pull in information

00:17:34,320 --> 00:17:39,360
from spinnaker itself so from the

00:17:37,360 --> 00:17:40,240
snapshots page we cannot only see the

00:17:39,360 --> 00:17:42,640
builds

00:17:40,240 --> 00:17:43,760
that are currently running but we can

00:17:42,640 --> 00:17:45,440
also see

00:17:43,760 --> 00:17:47,600
which environment these builds are

00:17:45,440 --> 00:17:50,559
deployed to and we can actually

00:17:47,600 --> 00:17:52,400
start a new deployment from this view so

00:17:50,559 --> 00:17:53,760
this new view is sort of the bridge

00:17:52,400 --> 00:17:56,880
between

00:17:53,760 --> 00:17:58,400
ci and cd

00:17:56,880 --> 00:18:00,320
obviously we also wanted to make some

00:17:58,400 --> 00:18:02,640
improvements to the general

00:18:00,320 --> 00:18:04,000
spinnaker ui some of those we would

00:18:02,640 --> 00:18:04,640
definitely be interested in open

00:18:04,000 --> 00:18:08,080
sourcing

00:18:04,640 --> 00:18:11,360
in 2021 but as you can see here

00:18:08,080 --> 00:18:12,000
um we made it more obvious with color

00:18:11,360 --> 00:18:13,600
coding

00:18:12,000 --> 00:18:16,160
which pipelines are actually deploying

00:18:13,600 --> 00:18:18,320
to production um so you can see

00:18:16,160 --> 00:18:19,360
the middle pipeline has this green

00:18:18,320 --> 00:18:21,520
production label

00:18:19,360 --> 00:18:22,880
um so it's very easy for users to pick

00:18:21,520 --> 00:18:24,240
up which pipeline is deploying to

00:18:22,880 --> 00:18:27,039
production environments

00:18:24,240 --> 00:18:28,320
we've also color-coded pipelines that

00:18:27,039 --> 00:18:30,880
are currently in progress

00:18:28,320 --> 00:18:31,440
as well as pipelines that have failed

00:18:30,880 --> 00:18:32,880
and

00:18:31,440 --> 00:18:34,720
um some of the other changes that we've

00:18:32,880 --> 00:18:36,320
made is that we

00:18:34,720 --> 00:18:37,760
pulled the actions menu to the right

00:18:36,320 --> 00:18:41,039
side and we've made it

00:18:37,760 --> 00:18:43,280
um much more straightforward to roll

00:18:41,039 --> 00:18:45,120
back um to an old build

00:18:43,280 --> 00:18:46,799
one of the concerns that people had was

00:18:45,120 --> 00:18:47,679
that it was difficult to roll back to an

00:18:46,799 --> 00:18:49,520
old build

00:18:47,679 --> 00:18:51,760
um so we added some extra functionality

00:18:49,520 --> 00:18:52,400
there and of course we are integrated

00:18:51,760 --> 00:18:55,039
with our

00:18:52,400 --> 00:18:56,320
own ci system um so from this page you

00:18:55,039 --> 00:18:57,520
can actually see which build is

00:18:56,320 --> 00:19:00,000
associated

00:18:57,520 --> 00:19:01,280
um with each pipeline execution and you

00:19:00,000 --> 00:19:06,000
can actually go

00:19:01,280 --> 00:19:09,039
from a pipeline to rci system

00:19:06,000 --> 00:19:09,600
and then um the last thing we did to the

00:19:09,039 --> 00:19:13,600
ui

00:19:09,600 --> 00:19:17,840
is adding a deployment history view

00:19:13,600 --> 00:19:19,440
so while we had the pipeline executions

00:19:17,840 --> 00:19:20,880
what we found is that service owners

00:19:19,440 --> 00:19:23,039
could have multiple pipelines that

00:19:20,880 --> 00:19:24,799
deployed to the same environment

00:19:23,039 --> 00:19:26,080
let's say they had an emergency pipeline

00:19:24,799 --> 00:19:28,559
that deplores the production

00:19:26,080 --> 00:19:29,600
but they can also have their more safe

00:19:28,559 --> 00:19:32,799
deployment

00:19:29,600 --> 00:19:34,240
the their safe default pipeline um and

00:19:32,799 --> 00:19:35,679
so what we wanted to do is we wanted to

00:19:34,240 --> 00:19:38,080
give a different

00:19:35,679 --> 00:19:39,440
perspective to deployments we wanted to

00:19:38,080 --> 00:19:40,559
basically make a cross-section of

00:19:39,440 --> 00:19:43,200
deployments

00:19:40,559 --> 00:19:44,960
by environments so rather than looking

00:19:43,200 --> 00:19:47,520
at the deployments per pipeline

00:19:44,960 --> 00:19:48,640
which the pipeline view offers this new

00:19:47,520 --> 00:19:51,520
view actually

00:19:48,640 --> 00:19:53,440
allows people to sort of quickly show

00:19:51,520 --> 00:19:55,360
all of the production deployments or all

00:19:53,440 --> 00:19:56,799
of the canary deployments

00:19:55,360 --> 00:19:58,720
so this gives us a lower level

00:19:56,799 --> 00:20:00,559
perspective of what's been deployed and

00:19:58,720 --> 00:20:03,840
this allows us to

00:20:00,559 --> 00:20:06,559
debug complicated scenarios that

00:20:03,840 --> 00:20:07,600
could be caused by deployments across

00:20:06,559 --> 00:20:10,159
different pipelines

00:20:07,600 --> 00:20:11,919
so this gives us a lower level overview

00:20:10,159 --> 00:20:13,600
of what actually happened

00:20:11,919 --> 00:20:15,679
obviously this view will link back to

00:20:13,600 --> 00:20:17,760
the pipeline view um so think of the

00:20:15,679 --> 00:20:18,559
deployments as sort of child stages to

00:20:17,760 --> 00:20:20,080
the pipelines

00:20:18,559 --> 00:20:23,200
so you can go from a pipeline to a

00:20:20,080 --> 00:20:25,760
deployment and the other way around

00:20:23,200 --> 00:20:28,640
and then last but not least we made some

00:20:25,760 --> 00:20:30,880
changes to the debugging experience

00:20:28,640 --> 00:20:32,960
some small changes for example we

00:20:30,880 --> 00:20:34,880
clearly show which stages failed

00:20:32,960 --> 00:20:36,880
and then you can quickly go from your

00:20:34,880 --> 00:20:39,760
pipeline execution to the failed stage

00:20:36,880 --> 00:20:41,440
and that should make it easier to find

00:20:39,760 --> 00:20:43,120
actually which stage is the culprit

00:20:41,440 --> 00:20:44,720
especially if you have a complicated

00:20:43,120 --> 00:20:48,320
pipeline with

00:20:44,720 --> 00:20:49,840
15 20 stages

00:20:48,320 --> 00:20:51,679
so these are the changes that we've made

00:20:49,840 --> 00:20:52,559
to the ui and the user experience of

00:20:51,679 --> 00:20:55,280
spinnaker

00:20:52,559 --> 00:20:56,799
um we also just added some new features

00:20:55,280 --> 00:20:57,760
um features that did not exist in

00:20:56,799 --> 00:20:59,360
spinnaker

00:20:57,760 --> 00:21:01,840
and so we'd like to talk about some of

00:20:59,360 --> 00:21:03,520
the features that we've added

00:21:01,840 --> 00:21:06,000
the first thing we did is we integrated

00:21:03,520 --> 00:21:09,039
our in-house integration testing

00:21:06,000 --> 00:21:10,159
frameworks so airbnb has a bunch of

00:21:09,039 --> 00:21:12,400
integration test

00:21:10,159 --> 00:21:14,480
frameworks and we wanted to make sure

00:21:12,400 --> 00:21:15,440
that spinnaker is compatible with those

00:21:14,480 --> 00:21:16,000
and we can actually run those

00:21:15,440 --> 00:21:19,440
integration

00:21:16,000 --> 00:21:21,039
tests as stages in a spinnaker pipeline

00:21:19,440 --> 00:21:22,960
um so what we did is we basically

00:21:21,039 --> 00:21:25,520
extended the orca

00:21:22,960 --> 00:21:26,000
service and we basically thought it to

00:21:25,520 --> 00:21:29,440
talk

00:21:26,000 --> 00:21:31,440
the um airbnb service idl language

00:21:29,440 --> 00:21:33,360
so that's basically the protocol that

00:21:31,440 --> 00:21:35,760
services at airbnb use

00:21:33,360 --> 00:21:36,480
to communicate with each other and now

00:21:35,760 --> 00:21:40,000
that

00:21:36,480 --> 00:21:42,000
spinnaker can actually talk the airbnb

00:21:40,000 --> 00:21:44,080
service language we can actually create

00:21:42,000 --> 00:21:45,919
a stage that triggers an integration

00:21:44,080 --> 00:21:47,919
test so we can easily integrate

00:21:45,919 --> 00:21:49,520
spinnaker with our ci platform with our

00:21:47,919 --> 00:21:51,360
old system deploy board

00:21:49,520 --> 00:21:53,360
and we can do things like running fault

00:21:51,360 --> 00:21:55,039
injection tests um so by creating a

00:21:53,360 --> 00:21:57,200
simple stage that allows spinnaker to

00:21:55,039 --> 00:22:00,320
talk to our in-house frameworks

00:21:57,200 --> 00:22:02,000
we offer a lot of extensibility and then

00:22:00,320 --> 00:22:04,880
another feature that we added is

00:22:02,000 --> 00:22:06,000
marketing builds as bad um a scenario

00:22:04,880 --> 00:22:09,440
that we often see

00:22:06,000 --> 00:22:10,880
is that a build in ci is actually green

00:22:09,440 --> 00:22:13,200
and then someone deploys it

00:22:10,880 --> 00:22:14,799
and they end up deploying that build to

00:22:13,200 --> 00:22:16,559
canary and then something is caught in

00:22:14,799 --> 00:22:18,960
canary

00:22:16,559 --> 00:22:20,640
canary isn't necessarily ci it's part of

00:22:18,960 --> 00:22:21,840
the cd process

00:22:20,640 --> 00:22:23,440
but you still want to make sure that

00:22:21,840 --> 00:22:24,640
that specific build does not get

00:22:23,440 --> 00:22:26,080
redeployed

00:22:24,640 --> 00:22:28,720
so one thing we can actually do is we

00:22:26,080 --> 00:22:30,400
can mark a build as bad and leave a node

00:22:28,720 --> 00:22:31,760
so the next time someone else tries to

00:22:30,400 --> 00:22:33,760
deploy

00:22:31,760 --> 00:22:34,960
that same builds they will actually get

00:22:33,760 --> 00:22:38,240
an error message

00:22:34,960 --> 00:22:40,159
um so not only can ci fail your builds

00:22:38,240 --> 00:22:41,440
but certain stages in the cd process can

00:22:40,159 --> 00:22:43,200
also fail your build and we want to

00:22:41,440 --> 00:22:44,720
safeguard against accidentally

00:22:43,200 --> 00:22:47,360
deploying a build that has already

00:22:44,720 --> 00:22:49,360
failed in the past

00:22:47,360 --> 00:22:50,720
and then the last thing we did is we a

00:22:49,360 --> 00:22:52,400
lot of our customers

00:22:50,720 --> 00:22:54,320
adopt spinnaker but they weren't

00:22:52,400 --> 00:22:55,919
necessarily convinced

00:22:54,320 --> 00:22:57,679
that they were getting the value that we

00:22:55,919 --> 00:22:59,760
promised they would get or they didn't

00:22:57,679 --> 00:23:01,440
necessarily have the right data

00:22:59,760 --> 00:23:03,520
so one thing we did is we basically

00:23:01,440 --> 00:23:05,039
built a

00:23:03,520 --> 00:23:06,480
tool that automatically generates

00:23:05,039 --> 00:23:08,799
dashboards for every service that

00:23:06,480 --> 00:23:09,280
onboards the spinnaker and we basically

00:23:08,799 --> 00:23:10,880
give them

00:23:09,280 --> 00:23:13,760
all of the low-level information that we

00:23:10,880 --> 00:23:15,440
have access to um so for example you're

00:23:13,760 --> 00:23:16,799
looking at a dashboard for one of our

00:23:15,440 --> 00:23:17,440
internal services and you can actually

00:23:16,799 --> 00:23:19,520
see

00:23:17,440 --> 00:23:20,880
in the last month spinnaker detected 14

00:23:19,520 --> 00:23:23,919
regressions

00:23:20,880 --> 00:23:26,159
which stages call those recursions um

00:23:23,919 --> 00:23:28,080
when are your pipeline execute one or

00:23:26,159 --> 00:23:29,600
when are most pipelines executed what's

00:23:28,080 --> 00:23:31,679
your deploy velocity

00:23:29,600 --> 00:23:33,120
and sort of given giving developers

00:23:31,679 --> 00:23:35,120
these um

00:23:33,120 --> 00:23:37,039
metrics and these tools will actually

00:23:35,120 --> 00:23:38,000
allow them to also go to their upper

00:23:37,039 --> 00:23:39,760
level

00:23:38,000 --> 00:23:41,440
management and tell them like hey look

00:23:39,760 --> 00:23:42,720
you know we've caught 14 regressions by

00:23:41,440 --> 00:23:43,760
adopting spinnaker this has been a

00:23:42,720 --> 00:23:46,320
worthwhile

00:23:43,760 --> 00:23:47,440
investment and so giving people these

00:23:46,320 --> 00:23:50,559
metrics and

00:23:47,440 --> 00:23:51,679
that data is really useful because it

00:23:50,559 --> 00:23:53,279
allows

00:23:51,679 --> 00:23:54,880
us to clearly make the case that

00:23:53,279 --> 00:23:58,240
spinnaker is an improvement

00:23:54,880 --> 00:24:01,520
compared to our old tools

00:23:58,240 --> 00:24:03,840
and we also created anchor so

00:24:01,520 --> 00:24:04,640
managing many pipelines in the spinach

00:24:03,840 --> 00:24:07,360
ui

00:24:04,640 --> 00:24:08,640
at airbnb scale 450 applications would

00:24:07,360 --> 00:24:10,640
have been very painful

00:24:08,640 --> 00:24:12,720
um so what we did is we basically

00:24:10,640 --> 00:24:15,120
created a pipelines as code

00:24:12,720 --> 00:24:16,000
yaml language we have a tool called

00:24:15,120 --> 00:24:18,000
anchor

00:24:16,000 --> 00:24:20,240
which basically reads these yaml files

00:24:18,000 --> 00:24:22,159
and then generates the appropriate

00:24:20,240 --> 00:24:23,679
spinnaker pipelines this is a very

00:24:22,159 --> 00:24:25,919
extensible framework that's

00:24:23,679 --> 00:24:28,000
internal to airbnb so that people can

00:24:25,919 --> 00:24:28,960
also create internal airbnb specific

00:24:28,000 --> 00:24:30,559
stages

00:24:28,960 --> 00:24:33,360
and then generate the appropriate

00:24:30,559 --> 00:24:36,159
configs for those stages

00:24:33,360 --> 00:24:38,320
and manish will clarify our future plans

00:24:36,159 --> 00:24:41,120
for 2021.

00:24:38,320 --> 00:24:42,799
great uh thanks hans for going over

00:24:41,120 --> 00:24:43,679
those ui ux improvements and an

00:24:42,799 --> 00:24:45,360
extension

00:24:43,679 --> 00:24:46,880
i think those were one of the key

00:24:45,360 --> 00:24:48,320
reasons for us for spinnaker to be

00:24:46,880 --> 00:24:50,240
successful at airbnb

00:24:48,320 --> 00:24:52,159
uh which is like a lot more feature gaps

00:24:50,240 --> 00:24:54,720
uh uh that we also intend to

00:24:52,159 --> 00:24:56,320
upstream uh much of these changes uh to

00:24:54,720 --> 00:24:58,320
spend your open source

00:24:56,320 --> 00:25:01,840
uh that said in moving forward uh in

00:24:58,320 --> 00:25:01,840
next uh next

00:25:02,320 --> 00:25:05,840
in future we're going to look into uh

00:25:05,039 --> 00:25:09,039
make sure that

00:25:05,840 --> 00:25:10,559
we always are up in sync with the

00:25:09,039 --> 00:25:12,480
spinnaker upgrades

00:25:10,559 --> 00:25:14,320
uh uh in in the past we were more

00:25:12,480 --> 00:25:15,760
focused on the usability and making sure

00:25:14,320 --> 00:25:18,960
that there's an option piece

00:25:15,760 --> 00:25:20,559
uh and not more so on like on on keeping

00:25:18,960 --> 00:25:22,400
spinnaker up to date with the open

00:25:20,559 --> 00:25:25,120
source versions uh so

00:25:22,400 --> 00:25:25,760
uh so we'll make sure we're looking into

00:25:25,120 --> 00:25:28,400
uh

00:25:25,760 --> 00:25:29,360
processes which will help us always keep

00:25:28,400 --> 00:25:32,320
these vinegar

00:25:29,360 --> 00:25:32,320
to the latest version

00:25:32,559 --> 00:25:36,240
uh we'll continue to invest in this

00:25:34,400 --> 00:25:37,039
finicker scalability and uh scalability

00:25:36,240 --> 00:25:40,720
in uptime

00:25:37,039 --> 00:25:44,000
as we are managing uh these spinnaker uh

00:25:40,720 --> 00:25:47,120
spinnaker uh infrastructure ourselves uh

00:25:44,000 --> 00:25:50,480
we are uh and when we move towards 100

00:25:47,120 --> 00:25:52,480
adoption um uh the the site availability

00:25:50,480 --> 00:25:53,760
of spinnaker availability is of critical

00:25:52,480 --> 00:25:57,039
and critical in nature

00:25:53,760 --> 00:25:58,559
because uh because any any service that

00:25:57,039 --> 00:25:59,600
needs to deploy is now has a hard

00:25:58,559 --> 00:26:02,159
dependency on us

00:25:59,600 --> 00:26:03,840
uh so we are going to invest into making

00:26:02,159 --> 00:26:06,880
sure that spinnaker is

00:26:03,840 --> 00:26:07,760
always available and up uh um and all

00:26:06,880 --> 00:26:10,480
there is always a

00:26:07,760 --> 00:26:12,480
alternative uh way there's already

00:26:10,480 --> 00:26:15,279
always an alternative for customers

00:26:12,480 --> 00:26:16,080
uh to and not be blocked for their

00:26:15,279 --> 00:26:17,919
deployments

00:26:16,080 --> 00:26:19,279
so the future of deployment airbnb we're

00:26:17,919 --> 00:26:21,760
looking at

00:26:19,279 --> 00:26:23,360
here specifically two things uh

00:26:21,760 --> 00:26:24,080
progressive delivery and continuous

00:26:23,360 --> 00:26:28,320
deployment

00:26:24,080 --> 00:26:30,640
progressive delivery is essentially

00:26:28,320 --> 00:26:31,520
enable customers to not only deploy

00:26:30,640 --> 00:26:33,200
their changes

00:26:31,520 --> 00:26:34,960
directly and limit the blast radius but

00:26:33,200 --> 00:26:37,679
also use feature flags for

00:26:34,960 --> 00:26:40,720
a really large set of features that

00:26:37,679 --> 00:26:43,600
customers can directly use

00:26:40,720 --> 00:26:44,240
in the in their fee in the future rule

00:26:43,600 --> 00:26:47,200
out

00:26:44,240 --> 00:26:47,600
strategy and it really helps customers

00:26:47,200 --> 00:26:50,720
to

00:26:47,600 --> 00:26:52,559
just look at

00:26:50,720 --> 00:26:54,000
look at the impact of those features and

00:26:52,559 --> 00:26:56,960
if there's certain certain

00:26:54,000 --> 00:26:58,240
if so if there is uh some problem with

00:26:56,960 --> 00:26:58,559
that particular feature rollout they can

00:26:58,240 --> 00:27:00,240
just

00:26:58,559 --> 00:27:02,960
turn off the feature flag and and all of

00:27:00,240 --> 00:27:06,000
this can be orchestrated by spinnaker

00:27:02,960 --> 00:27:07,679
um we are also going to look at

00:27:06,000 --> 00:27:11,120
enabling our deployment strategies such

00:27:07,679 --> 00:27:13,760
as red black or blue green

00:27:11,120 --> 00:27:14,400
and that will help us improve the

00:27:13,760 --> 00:27:17,600
overall

00:27:14,400 --> 00:27:19,120
rollback time and experience and then

00:27:17,600 --> 00:27:21,039
lastly we are also going to look at

00:27:19,120 --> 00:27:22,559
will possibly look at managed delivery

00:27:21,039 --> 00:27:25,279
and this is manageable

00:27:22,559 --> 00:27:26,080
delivery is a concept uh that netflix

00:27:25,279 --> 00:27:27,360
has proposed

00:27:26,080 --> 00:27:28,799
which is focusing on customer

00:27:27,360 --> 00:27:30,159
requirements and not like specific

00:27:28,799 --> 00:27:31,840
details of the pipeline

00:27:30,159 --> 00:27:33,600
uh so we're going to investigate that

00:27:31,840 --> 00:27:36,480
and possibly move towards manage

00:27:33,600 --> 00:27:36,480
manage delivery

00:27:37,760 --> 00:27:44,320
aspect as well so that's it

00:27:41,039 --> 00:27:45,120
uh from me and yens i thank you everyone

00:27:44,320 --> 00:27:47,200
for your time

00:27:45,120 --> 00:27:49,120
and we hope we can continue this

00:27:47,200 --> 00:27:57,840
engagement and conversation

00:27:49,120 --> 00:27:57,840

YouTube URL: https://www.youtube.com/watch?v=IRb-eh6zYPc


