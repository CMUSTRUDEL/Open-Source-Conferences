Title: Get Started with Plugin Development: A Github plugin for workflow dispatches - Victor Odusanya
Publication date: 2020-12-17
Playlist: Spinnaker Summit 2020
Description: 
	This workshop from Spinnaker contributor Victor Odusanya looks to lower the barrier of entry to Spinnaker plugin development. It aims to show how extensible Spinnaker is and how mature the plugin framework is getting. This workshop includes a beginner-level coding session. We will create a Spinnaker Orca plugin to interact with the Github API to trigger workflow dispatches. 

The applications of a plugin to trigger workflow dispatches are quite open-ended, and this talk demonstrates how a custom Spinnaker integration would typically be approached. Tools to be used here include: (i) gradle, (i) kotlin, (iii) IntelliJ, (iv) Yarn, (v) Deck pluginsdk, (vi) Orca-api packages At the end of this workshop, we will have a working orca plugin and will attempt to make a dispatch to a workflow with this plugin.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:05,040 --> 00:00:09,120
yeah um

00:00:05,600 --> 00:00:12,160
good morning everyone i'm victor um

00:00:09,120 --> 00:00:14,639
a gsrc contributor for um

00:00:12,160 --> 00:00:15,280
some of god's explaining how project in

00:00:14,639 --> 00:00:18,160
the last

00:00:15,280 --> 00:00:18,800
um justice session i worked on um a

00:00:18,160 --> 00:00:21,920
drone c

00:00:18,800 --> 00:00:23,279
high stage plug-in for spinnaker so um

00:00:21,920 --> 00:00:25,599
what the drone ci

00:00:23,279 --> 00:00:26,800
stage plugin did for splinka was more

00:00:25,599 --> 00:00:29,679
like um you know it's

00:00:26,800 --> 00:00:32,320
it's enabled you know allow those to

00:00:29,679 --> 00:00:35,360
basically um trigger a drone ci stage

00:00:32,320 --> 00:00:37,440
um from a you know spinnakers you know

00:00:35,360 --> 00:00:38,480
ci cd pipeline so um you know this is

00:00:37,440 --> 00:00:40,320
what it looks like

00:00:38,480 --> 00:00:42,160
um basically you could go there you know

00:00:40,320 --> 00:00:42,800
set up the you know set up this plugin

00:00:42,160 --> 00:00:44,960
and then be

00:00:42,800 --> 00:00:46,480
able to you know communicate with your

00:00:44,960 --> 00:00:48,079
you know with your drone ciao

00:00:46,480 --> 00:00:50,480
server and then you know select

00:00:48,079 --> 00:00:52,320
repositories select you know name spaces

00:00:50,480 --> 00:00:53,520
for your transactions

00:00:52,320 --> 00:00:55,360
and then you know pass additional

00:00:53,520 --> 00:00:55,920
configurations to trigger this um you

00:00:55,360 --> 00:00:58,320
know

00:00:55,920 --> 00:01:00,640
this just draws your stages um basically

00:00:58,320 --> 00:01:02,800
it was built using um you know

00:01:00,640 --> 00:01:04,879
you know special plugin framework that

00:01:02,800 --> 00:01:07,680
is dependent on you know pf4g

00:01:04,879 --> 00:01:09,360
and um basically it is um an extension

00:01:07,680 --> 00:01:11,840
to the spinner or car

00:01:09,360 --> 00:01:13,520
micro service um so so you know the

00:01:11,840 --> 00:01:15,280
speaker's project is set up such

00:01:13,520 --> 00:01:17,439
you know in such a way that it enables

00:01:15,280 --> 00:01:19,200
us to be able to uh you know

00:01:17,439 --> 00:01:20,479
pick any you know speaker microservice

00:01:19,200 --> 00:01:22,720
that you know you feel that you

00:01:20,479 --> 00:01:23,840
you like to add some functionality to

00:01:22,720 --> 00:01:25,920
and then you know um

00:01:23,840 --> 00:01:28,080
write some you know extensions to these

00:01:25,920 --> 00:01:28,880
um extensions in the form of plugins and

00:01:28,080 --> 00:01:31,360
then you'll

00:01:28,880 --> 00:01:32,320
start you know you know these plugins

00:01:31,360 --> 00:01:34,159
and then you know

00:01:32,320 --> 00:01:35,840
each of these microservices then

00:01:34,159 --> 00:01:37,600
download these plugins and then you know

00:01:35,840 --> 00:01:38,159
start displaying some outputs and then

00:01:37,600 --> 00:01:39,520
you know

00:01:38,159 --> 00:01:41,600
you're able to you know have this

00:01:39,520 --> 00:01:43,680
functionality as you know on the fly

00:01:41,600 --> 00:01:45,520
so um you know just to give you an

00:01:43,680 --> 00:01:48,159
insight into what's the architecture for

00:01:45,520 --> 00:01:50,320
uh you know each of those videos because

00:01:48,159 --> 00:01:51,759
into you know speaker itself as a whole

00:01:50,320 --> 00:01:53,439
and then what you know each of those

00:01:51,759 --> 00:01:54,320
speaker services are responsible for

00:01:53,439 --> 00:01:56,640
doing

00:01:54,320 --> 00:01:58,240
um so this is more like um you know what

00:01:56,640 --> 00:01:59,360
is in this stuff you know sprinklers

00:01:58,240 --> 00:02:00,960
microservices

00:01:59,360 --> 00:02:03,200
and then you know what each of them do

00:02:00,960 --> 00:02:04,880
so um for this um session today would

00:02:03,200 --> 00:02:06,880
mostly be looking at you know the

00:02:04,880 --> 00:02:09,039
speaker focus service so the opera

00:02:06,880 --> 00:02:10,319
service is most you know it's it's like

00:02:09,039 --> 00:02:12,560
an orchestration engine

00:02:10,319 --> 00:02:13,760
on on speaker itself like um such that

00:02:12,560 --> 00:02:15,360
is able to um

00:02:13,760 --> 00:02:17,040
help you kind of like sort of like you

00:02:15,360 --> 00:02:17,760
know connects the dots across across the

00:02:17,040 --> 00:02:19,760
pipeline

00:02:17,760 --> 00:02:21,200
it is um so it does the first class

00:02:19,760 --> 00:02:23,040
concept of you know

00:02:21,200 --> 00:02:24,640
in the pipeline that yeah that yeah

00:02:23,040 --> 00:02:26,319
there will be individual stages yeah

00:02:24,640 --> 00:02:28,400
there's first class concept of stages

00:02:26,319 --> 00:02:30,160
in a pipeline so in those stages you

00:02:28,400 --> 00:02:32,400
know you'd um you know there's also the

00:02:30,160 --> 00:02:34,720
concept of tasks in the first stages

00:02:32,400 --> 00:02:36,319
say for example um you know i'd like to

00:02:34,720 --> 00:02:37,280
do something like um you know build an

00:02:36,319 --> 00:02:40,239
abstract from

00:02:37,280 --> 00:02:41,760
a hr for example you know building that

00:02:40,239 --> 00:02:42,800
that artifact you know what you know

00:02:41,760 --> 00:02:44,239
definitely have is

00:02:42,800 --> 00:02:45,599
you know a couple of steps that's not

00:02:44,239 --> 00:02:46,560
that that would be required to build

00:02:45,599 --> 00:02:48,319
that artifact

00:02:46,560 --> 00:02:50,400
so each of each of those each of those

00:02:48,319 --> 00:02:51,840
steps you know directly map out so what

00:02:50,400 --> 00:02:54,400
um you know

00:02:51,840 --> 00:02:54,879
an occur another task look like looks

00:02:54,400 --> 00:02:56,959
like

00:02:54,879 --> 00:02:58,159
so you know um you know because these

00:02:56,959 --> 00:03:00,800
concepts you know this

00:02:58,159 --> 00:03:01,599
they're quite important stuff um so i'm

00:03:00,800 --> 00:03:03,200
just trying to

00:03:01,599 --> 00:03:05,120
try to make this house there's a

00:03:03,200 --> 00:03:07,200
pipeline

00:03:05,120 --> 00:03:08,879
then there's the stage and then there's

00:03:07,200 --> 00:03:10,879
a task and it does start tasking you

00:03:08,879 --> 00:03:13,360
know in those stages

00:03:10,879 --> 00:03:14,319
yeah so say for example um you know um

00:03:13,360 --> 00:03:17,200
i'd like to

00:03:14,319 --> 00:03:19,120
you know build um you know communicate

00:03:17,200 --> 00:03:20,959
with um you know the webcam points

00:03:19,120 --> 00:03:22,319
out you know i'll just absolutely create

00:03:20,959 --> 00:03:23,760
a stage you know to

00:03:22,319 --> 00:03:25,599
for the for this traffic and points that

00:03:23,760 --> 00:03:27,120
will call out so that's the call out to

00:03:25,599 --> 00:03:29,680
this you know come out to this you know

00:03:27,120 --> 00:03:30,879
collapse this you know um to do a web

00:03:29,680 --> 00:03:32,159
booking point and then you know

00:03:30,879 --> 00:03:33,680
in that stage you would have the task

00:03:32,159 --> 00:03:34,640
that you actually do you know the work

00:03:33,680 --> 00:03:36,000
of calling out

00:03:34,640 --> 00:03:38,159
and then maybe you know if you are

00:03:36,000 --> 00:03:39,280
required to wait on you know until we

00:03:38,159 --> 00:03:40,799
get to success you know

00:03:39,280 --> 00:03:42,480
to get a success response we would also

00:03:40,799 --> 00:03:44,239
have something like um you know

00:03:42,480 --> 00:03:45,840
like a monitor task about school you

00:03:44,239 --> 00:03:47,519
know decent

00:03:45,840 --> 00:03:49,200
so you know you know in a task there's

00:03:47,519 --> 00:03:49,680
also the concept of you know retrieval

00:03:49,200 --> 00:03:51,599
tasks

00:03:49,680 --> 00:03:53,200
as well so what is your travel task if

00:03:51,599 --> 00:03:54,799
your travel task is um basically

00:03:53,200 --> 00:03:56,640
it doesn't cover retried um you know

00:03:54,799 --> 00:03:57,439
it's until you get it you once you get

00:03:56,640 --> 00:04:00,239
the suspension

00:03:57,439 --> 00:04:01,360
success response or onto your timeouts

00:04:00,239 --> 00:04:02,879
so um you know

00:04:01,360 --> 00:04:15,599
in stages too there's also the concept

00:04:02,879 --> 00:04:19,199
of you know considerable stages as well

00:04:15,599 --> 00:04:21,680
and in touch studios have repliable

00:04:19,199 --> 00:04:23,600
tasks so um you know what will determine

00:04:21,680 --> 00:04:23,919
you know um how it all maps out is you

00:04:23,600 --> 00:04:26,000
know

00:04:23,919 --> 00:04:29,199
it's going to also be some interesting

00:04:26,000 --> 00:04:31,440
around um

00:04:29,199 --> 00:04:33,280
um just just to confirm that you know um

00:04:31,440 --> 00:04:35,759
yeah he would see me clearly

00:04:33,280 --> 00:04:37,199
i'm not sure um you know i can be head

00:04:35,759 --> 00:04:38,320
clearly i can see that see there's some

00:04:37,199 --> 00:04:43,840
chat messages

00:04:38,320 --> 00:04:43,840
around my being on the board

00:04:48,160 --> 00:04:51,919
okay cool i think i think i think um

00:04:50,800 --> 00:04:54,960
just

00:04:51,919 --> 00:04:56,080
so um to to you know to try to comment

00:04:54,960 --> 00:04:57,360
to this session to you know

00:04:56,080 --> 00:04:59,600
if you have comments if you have you

00:04:57,360 --> 00:05:01,360
know um you know suggestions or anything

00:04:59,600 --> 00:05:03,199
um you can access this link

00:05:01,360 --> 00:05:04,560
um access from your content you'll be

00:05:03,199 --> 00:05:06,080
able to you know um

00:05:04,560 --> 00:05:07,759
you know provides you know provide some

00:05:06,080 --> 00:05:25,840
comments some feedbacks you know

00:05:07,759 --> 00:05:25,840
on the other ask questions screen

00:05:35,350 --> 00:05:38,529
[Music]

00:05:40,000 --> 00:05:44,320
awesome thanks so i was just trying to

00:05:41,759 --> 00:05:47,280
um confirm that to you um

00:05:44,320 --> 00:05:48,320
cool yeah um so uh yeah so you know each

00:05:47,280 --> 00:05:50,080
of this you know um this

00:05:48,320 --> 00:05:52,000
this this concept each of this you know

00:05:50,080 --> 00:05:54,880
um this this uh

00:05:52,000 --> 00:05:57,440
basic components of of ocar are sort of

00:05:54,880 --> 00:05:59,280
you know um exposed where um apis

00:05:57,440 --> 00:06:00,800
you know that's so that you know the

00:05:59,280 --> 00:06:02,400
plugins that you write the

00:06:00,800 --> 00:06:04,240
the same you know the extensions that

00:06:02,400 --> 00:06:05,280
you write you know can all you know

00:06:04,240 --> 00:06:07,840
reach out and then you know

00:06:05,280 --> 00:06:09,280
call out to your dependents you know you

00:06:07,840 --> 00:06:11,440
know interfaces on this

00:06:09,280 --> 00:06:12,639
so um you know this is this this apis

00:06:11,440 --> 00:06:14,160
are usually exposed uh

00:06:12,639 --> 00:06:16,080
some as things like you know speaker

00:06:14,160 --> 00:06:19,039
extension points so what's what

00:06:16,080 --> 00:06:19,039
basically what is

00:06:19,440 --> 00:06:23,919
oh okay so um basically what so

00:06:22,560 --> 00:06:25,440
what what is an extension point an

00:06:23,919 --> 00:06:25,919
extension point is just the way of you

00:06:25,440 --> 00:06:27,520
know

00:06:25,919 --> 00:06:29,120
this you know spinnakers in develop

00:06:27,520 --> 00:06:31,199
services you know um you know

00:06:29,120 --> 00:06:33,360
exposing interfaces for you to be able

00:06:31,199 --> 00:06:34,080
to you know use um you know spinnaker

00:06:33,360 --> 00:06:35,600
functionality

00:06:34,080 --> 00:06:37,440
um functionality in this screencast

00:06:35,600 --> 00:06:38,639
service um usually this this you know

00:06:37,440 --> 00:06:40,639
these extension points

00:06:38,639 --> 00:06:42,080
you know are based on you know you know

00:06:40,639 --> 00:06:42,479
preferred extension for instance you

00:06:42,080 --> 00:06:44,479
know

00:06:42,479 --> 00:06:45,919
they pretty much map out so for example

00:06:44,479 --> 00:06:47,919
you want to you know

00:06:45,919 --> 00:06:49,440
develop you know a spinnaker is pickup

00:06:47,919 --> 00:06:50,639
plug-in it's pretty much you're pretty

00:06:49,440 --> 00:06:52,080
much you know

00:06:50,639 --> 00:06:53,840
you know down down you know behind the

00:06:52,080 --> 00:06:55,120
center pretty much developing uh your

00:06:53,840 --> 00:06:58,240
apigee plugin

00:06:55,120 --> 00:06:58,800
you know it's it's although it's not

00:06:58,240 --> 00:07:00,479
it's not

00:06:58,800 --> 00:07:03,280
competitive in dance you know if you're

00:07:00,479 --> 00:07:04,639
developing a spinning car you know a pfo

00:07:03,280 --> 00:07:06,080
it does not necessarily mean you know

00:07:04,639 --> 00:07:06,720
when you are developing your spinning

00:07:06,080 --> 00:07:09,520
plugin

00:07:06,720 --> 00:07:10,960
so um yeah so you know one of the steps

00:07:09,520 --> 00:07:12,479
to you know to get started with you know

00:07:10,960 --> 00:07:14,720
i'm trying to um you know

00:07:12,479 --> 00:07:16,160
develop a spinnaker plugin um i'll try

00:07:14,720 --> 00:07:18,000
to also um you know

00:07:16,160 --> 00:07:20,000
bring up the real-life scenario and then

00:07:18,000 --> 00:07:21,759
we will you know we'll work from there

00:07:20,000 --> 00:07:23,120
cool so you know you you need um you

00:07:21,759 --> 00:07:24,400
probably don't you did you you

00:07:23,120 --> 00:07:31,840
definitely you need an ide

00:07:24,400 --> 00:07:31,840
um you also need to

00:07:34,000 --> 00:07:37,919
so you can get an id you could also you

00:07:35,840 --> 00:07:39,360
know we'd also have um you know um

00:07:37,919 --> 00:07:40,720
some requirements around choosing or you

00:07:39,360 --> 00:07:41,360
know what what your chosen language

00:07:40,720 --> 00:07:44,720
should be

00:07:41,360 --> 00:07:46,479
you could these are the sites you use

00:07:44,720 --> 00:07:47,680
develop your plugin in java you can also

00:07:46,479 --> 00:07:48,879
decide to develop your work in your

00:07:47,680 --> 00:07:50,479
course thing um

00:07:48,879 --> 00:07:51,919
so it's it's pretty much you know up to

00:07:50,479 --> 00:07:53,360
you to decide you know whatever you know

00:07:51,919 --> 00:07:54,720
what's what your comfort level is within

00:07:53,360 --> 00:07:56,639
you know any of the plugins

00:07:54,720 --> 00:07:58,479
you also need um something like um you

00:07:56,639 --> 00:07:59,599
know a package manager for some sorts

00:07:58,479 --> 00:08:01,360
and because um

00:07:59,599 --> 00:08:03,680
you could go the you could he's like did

00:08:01,360 --> 00:08:04,560
i use living or he could eat or he could

00:08:03,680 --> 00:08:06,720
use um

00:08:04,560 --> 00:08:07,680
you know griddle um but you know it's

00:08:06,720 --> 00:08:10,080
it's

00:08:07,680 --> 00:08:11,680
pretty much very very um you know

00:08:10,080 --> 00:08:13,440
recommended that you go

00:08:11,680 --> 00:08:14,720
about using gradle so you know to get

00:08:13,440 --> 00:08:16,319
started so um

00:08:14,720 --> 00:08:18,160
because there's some you know um some

00:08:16,319 --> 00:08:19,199
you know plugins that are built around

00:08:18,160 --> 00:08:21,039
um

00:08:19,199 --> 00:08:22,479
some great plugins that are built around

00:08:21,039 --> 00:08:25,840
the bundling you know

00:08:22,479 --> 00:08:27,280
plugins so so there's also the concept

00:08:25,840 --> 00:08:29,280
of makeup looking bundles

00:08:27,280 --> 00:08:31,039
so in the spinner plug-in bundle um you

00:08:29,280 --> 00:08:31,680
know they they may be if you draw

00:08:31,039 --> 00:08:33,519
plugins

00:08:31,680 --> 00:08:35,519
for you know that's all um you know

00:08:33,519 --> 00:08:37,599
extensions for individual services

00:08:35,519 --> 00:08:39,440
in that plugin bundle it means that you

00:08:37,599 --> 00:08:41,360
could you could you could have

00:08:39,440 --> 00:08:42,719
some code to extend deck you could also

00:08:41,360 --> 00:08:44,399
have some code to extend okay you could

00:08:42,719 --> 00:08:45,760
also have some some code to extend echo

00:08:44,399 --> 00:08:46,320
you can also have some context and

00:08:45,760 --> 00:08:48,000
people

00:08:46,320 --> 00:08:49,440
holding the same plugin bundle so what

00:08:48,000 --> 00:08:50,080
will happen is that you can you know

00:08:49,440 --> 00:08:53,279
you'd have

00:08:50,080 --> 00:08:55,120
you know one you know one one one um

00:08:53,279 --> 00:08:56,240
one yeah you know the project itself and

00:08:55,120 --> 00:08:56,880
then you know supporters within the

00:08:56,240 --> 00:08:58,560
project

00:08:56,880 --> 00:09:00,160
and then those two modules will be um

00:08:58,560 --> 00:09:01,680
you know extension you know extensions

00:09:00,160 --> 00:09:03,120
to you know each of those services

00:09:01,680 --> 00:09:04,160
and then the plugin bundle will bundle

00:09:03,120 --> 00:09:04,800
each of those you know each of those

00:09:04,160 --> 00:09:06,880
extensions

00:09:04,800 --> 00:09:08,080
into one you know into one zip or you

00:09:06,880 --> 00:09:09,760
know depending on what

00:09:08,080 --> 00:09:11,200
you know depending on what you know what

00:09:09,760 --> 00:09:12,800
what's the different method of being

00:09:11,200 --> 00:09:13,440
into one zipping and then that you can

00:09:12,800 --> 00:09:14,959
also

00:09:13,440 --> 00:09:17,040
you can but you can then specify indeed

00:09:14,959 --> 00:09:20,720
you know your spinning up configuration

00:09:17,040 --> 00:09:22,880
that will then be installed so um yeah

00:09:20,720 --> 00:09:24,800
so um i think i've showed you um you

00:09:22,880 --> 00:09:27,040
know the draw stitch poking um

00:09:24,800 --> 00:09:29,440
so you know this so there's a link that

00:09:27,040 --> 00:09:30,880
could help you with you know

00:09:29,440 --> 00:09:32,800
if you want to get started you know with

00:09:30,880 --> 00:09:34,320
your speaker plugins so this link

00:09:32,800 --> 00:09:36,320
basically um

00:09:34,320 --> 00:09:37,600
talks about you know an extending occur

00:09:36,320 --> 00:09:39,519
so you know i i think i

00:09:37,600 --> 00:09:41,200
mentioned earlier that you you can

00:09:39,519 --> 00:09:42,959
extend basically in a sprinkler service

00:09:41,200 --> 00:09:44,480
and in fact if you if you want to you

00:09:42,959 --> 00:09:46,080
know extend the speaker service

00:09:44,480 --> 00:09:47,519
and then you feel that and you find out

00:09:46,080 --> 00:09:49,120
that you know um and

00:09:47,519 --> 00:09:50,880
the extension points and interfaces that

00:09:49,120 --> 00:09:51,760
you require are not present in the api

00:09:50,880 --> 00:09:53,279
for that package

00:09:51,760 --> 00:09:54,880
you could you know open the period you

00:09:53,279 --> 00:09:56,160
know a request or you create an issue

00:09:54,880 --> 00:09:57,440
that you know you're looking to you know

00:09:56,160 --> 00:09:59,200
add some functionality to this something

00:09:57,440 --> 00:09:59,680
you know the community is very um you

00:09:59,200 --> 00:10:01,680
know

00:09:59,680 --> 00:10:03,200
you know very welcoming and that you'll

00:10:01,680 --> 00:10:03,440
definitely you know help you get you

00:10:03,200 --> 00:10:06,000
know

00:10:03,440 --> 00:10:08,800
much about what you require so um yeah

00:10:06,000 --> 00:10:08,800
so this is this

00:10:09,120 --> 00:10:12,160
let me share

00:10:13,440 --> 00:10:19,839
cool remember this

00:10:17,200 --> 00:10:19,839
about

00:10:21,839 --> 00:10:26,079
yeah so there's important creators guide

00:10:24,000 --> 00:10:26,959
um it's mostly around um steps that

00:10:26,079 --> 00:10:28,959
would help you

00:10:26,959 --> 00:10:30,480
um you know with with um starting you

00:10:28,959 --> 00:10:32,480
know it's writing your own plugin

00:10:30,480 --> 00:10:34,720
and you know some some steps with you

00:10:32,480 --> 00:10:36,560
know okay okay um you know

00:10:34,720 --> 00:10:38,320
how do you like you know basically how

00:10:36,560 --> 00:10:39,920
to either help you take some big steps

00:10:38,320 --> 00:10:42,880
with you know

00:10:39,920 --> 00:10:42,880
yeah let me do that

00:10:43,920 --> 00:10:47,120
basically how to you know this this will

00:10:45,519 --> 00:10:48,000
help you with you know big steps with

00:10:47,120 --> 00:10:49,360
you know with

00:10:48,000 --> 00:10:51,120
beginning to develop you know speaker

00:10:49,360 --> 00:10:51,519
plugins um you know there's there's a

00:10:51,120 --> 00:10:54,160
key

00:10:51,519 --> 00:10:56,000
for this stage plugin but basically um

00:10:54,160 --> 00:10:58,079
it's basically like an intro

00:10:56,000 --> 00:10:59,600
you know it's like like an intro to you

00:10:58,079 --> 00:11:01,200
know um interesting

00:10:59,600 --> 00:11:02,640
plugin development so if you wanted to

00:11:01,200 --> 00:11:04,640
develop this pickup plug-in

00:11:02,640 --> 00:11:06,160
um i would recommend i would recommend

00:11:04,640 --> 00:11:06,720
that you go from the preforge stage

00:11:06,160 --> 00:11:09,279
plugin

00:11:06,720 --> 00:11:10,480
because it's it's very balanced so it's

00:11:09,279 --> 00:11:12,959
you know it's kind of like encourages

00:11:10,480 --> 00:11:14,240
you to you know um you know

00:11:12,959 --> 00:11:16,000
go from there and then you know build on

00:11:14,240 --> 00:11:16,800
whatever you want and then you know and

00:11:16,000 --> 00:11:20,880
then you're how about

00:11:16,800 --> 00:11:23,040
cool so um for this for purpose of this

00:11:20,880 --> 00:11:24,079
purpose of this um for this of this demo

00:11:23,040 --> 00:11:25,920
um would be

00:11:24,079 --> 00:11:27,440
will be i'm also extending i'm going

00:11:25,920 --> 00:11:29,760
from the pfog plugin

00:11:27,440 --> 00:11:30,880
um because um you know it already has

00:11:29,760 --> 00:11:32,800
all the bootstrap

00:11:30,880 --> 00:11:34,240
you know set up but you know that's what

00:11:32,800 --> 00:11:36,720
that's really that is required to

00:11:34,240 --> 00:11:37,519
to you know to to to to set up this

00:11:36,720 --> 00:11:40,560
project

00:11:37,519 --> 00:11:57,839
um so um i would be

00:11:40,560 --> 00:11:57,839
talking about the keystone

00:12:00,079 --> 00:12:02,800
so we're talking about the case study

00:12:01,360 --> 00:12:04,160
you know you know you know addicted as

00:12:02,800 --> 00:12:05,839
you know develops engineers as

00:12:04,160 --> 00:12:07,839
you know um personal engineers as you

00:12:05,839 --> 00:12:08,320
know whatever you whatever the case may

00:12:07,839 --> 00:12:10,560
be

00:12:08,320 --> 00:12:12,240
um you know um the obvious is that you

00:12:10,560 --> 00:12:14,000
know we have to um you know

00:12:12,240 --> 00:12:15,519
try to you know integrate services you

00:12:14,000 --> 00:12:17,279
know integration may be it's

00:12:15,519 --> 00:12:18,959
integration integration may be a problem

00:12:17,279 --> 00:12:20,720
in that you know you need to find a way

00:12:18,959 --> 00:12:22,160
to connect um you know to connect our

00:12:20,720 --> 00:12:24,079
tools together such that um

00:12:22,160 --> 00:12:25,440
you have a holistic view into things um

00:12:24,079 --> 00:12:26,639
you also have um

00:12:25,440 --> 00:12:28,000
you know the automation is all set up

00:12:26,639 --> 00:12:28,639
that you know from start to finish it's

00:12:28,000 --> 00:12:30,160
um

00:12:28,639 --> 00:12:31,839
we'd like to you know avoiding mana

00:12:30,160 --> 00:12:32,399
processor along the way and that's that

00:12:31,839 --> 00:12:34,240
means that

00:12:32,399 --> 00:12:35,920
you know not not every service that

00:12:34,240 --> 00:12:37,279
you're going to use is going to have um

00:12:35,920 --> 00:12:39,360
an integration point with the next

00:12:37,279 --> 00:12:41,120
service we are going to have to you know

00:12:39,360 --> 00:12:43,360
to develop custom solutions so you know

00:12:41,120 --> 00:12:44,720
to to try to tie all things together

00:12:43,360 --> 00:12:46,399
so for the second you know for the sake

00:12:44,720 --> 00:12:48,160
of um trying to obviously obviously you

00:12:46,399 --> 00:12:48,639
know this demo uh i'll be talking about

00:12:48,160 --> 00:12:50,720
you know

00:12:48,639 --> 00:12:52,639
trying to you know to come you know

00:12:50,720 --> 00:12:53,200
speaker itself with um something like um

00:12:52,639 --> 00:12:55,360
you know

00:12:53,200 --> 00:12:56,880
hit up dispatch so you know um the

00:12:55,360 --> 00:12:58,000
detail has this amazing feature of you

00:12:56,880 --> 00:12:59,040
know being able to use the github

00:12:58,000 --> 00:13:01,760
actions workflow

00:12:59,040 --> 00:13:02,079
to try to automate some you know to try

00:13:01,760 --> 00:13:04,440
to

00:13:02,079 --> 00:13:06,240
automatically you know say you know

00:13:04,440 --> 00:13:08,800
steps you know you know

00:13:06,240 --> 00:13:10,480
serious processes as well um it's

00:13:08,800 --> 00:13:12,000
similar to it's quite similar to um

00:13:10,480 --> 00:13:13,360
something like um you know um

00:13:12,000 --> 00:13:14,959
like travis it's quite similar to

00:13:13,360 --> 00:13:16,320
something like you know stress squat

00:13:14,959 --> 00:13:19,120
similar to something like um you know

00:13:16,320 --> 00:13:20,399
the gitlab you know seven as well so for

00:13:19,120 --> 00:13:20,800
the sake of this demo we are going to

00:13:20,399 --> 00:13:22,480
develop

00:13:20,800 --> 00:13:24,000
um you know a plugin that would you know

00:13:22,480 --> 00:13:24,639
that we reach out to you know that's

00:13:24,000 --> 00:13:26,800
that's that's

00:13:24,639 --> 00:13:28,240
to be available to you know to us that

00:13:26,800 --> 00:13:29,839
will be able to you know

00:13:28,240 --> 00:13:32,000
we can configure from you know from

00:13:29,839 --> 00:13:34,240
spinnaker to call out and to

00:13:32,000 --> 00:13:35,920
to send some dispatch to some repository

00:13:34,240 --> 00:13:36,959
without dispatch code it could contain

00:13:35,920 --> 00:13:39,839
anything it's

00:13:36,959 --> 00:13:40,639
not dispatch maybe um maybe um you know

00:13:39,839 --> 00:13:42,959
um

00:13:40,639 --> 00:13:44,399
maybe to you know build an image maybe

00:13:42,959 --> 00:13:46,000
it may be to build a journey

00:13:44,399 --> 00:13:47,760
to beat them you know call some

00:13:46,000 --> 00:13:48,720
endpoints to perform another action um

00:13:47,760 --> 00:13:51,760
it's not really

00:13:48,720 --> 00:13:53,920
that's um important so um um

00:13:51,760 --> 00:13:55,519
so where i'd like us to go from first is

00:13:53,920 --> 00:13:56,560
to you know try to understanding of what

00:13:55,519 --> 00:13:57,360
the few things are we need to do

00:13:56,560 --> 00:14:00,839
comments you know

00:13:57,360 --> 00:14:03,839
to do this first we're going to need to

00:14:00,839 --> 00:14:03,839
communicate

00:14:04,560 --> 00:14:07,040
the um

00:14:13,279 --> 00:14:16,560
for this you know in communicating with

00:14:15,440 --> 00:14:17,920
the bit of dispatching points we are

00:14:16,560 --> 00:14:18,320
going to see quite a few things we need

00:14:17,920 --> 00:14:21,760
um

00:14:18,320 --> 00:14:21,760
um enough token

00:14:23,279 --> 00:14:26,480
you also need um you know the name of

00:14:25,279 --> 00:14:28,560
you know the hulk of the

00:14:26,480 --> 00:14:31,839
of the repository we also need the name

00:14:28,560 --> 00:14:31,839
of the repository itself

00:14:31,920 --> 00:14:36,240
so um these are a few things that we may

00:14:34,000 --> 00:14:36,240
need

00:14:37,519 --> 00:14:40,720
then also um we may need some things

00:14:39,680 --> 00:14:42,399
like um you know

00:14:40,720 --> 00:14:44,000
the actual payload that we know that's

00:14:42,399 --> 00:14:44,480
recent as part of you know as part of

00:14:44,000 --> 00:14:46,720
that

00:14:44,480 --> 00:14:48,639
that's dispatch itself um something like

00:14:46,720 --> 00:14:50,800
um

00:14:48,639 --> 00:14:51,760
the dispatch itself can receive right

00:14:50,800 --> 00:14:54,639
also

00:14:51,760 --> 00:14:59,839
so there's um the github api reference

00:14:54,639 --> 00:14:59,839
that you can pull up

00:15:01,040 --> 00:15:04,639
so basically tell us how to you know how

00:15:02,959 --> 00:15:13,839
to communicate without you know

00:15:04,639 --> 00:15:13,839
dispatch endpoints

00:15:21,839 --> 00:15:27,839
i think i have to make it let me just

00:15:23,760 --> 00:15:27,839
copy it and paste

00:15:52,839 --> 00:15:55,839
okay

00:16:06,839 --> 00:16:09,839
cool

00:16:34,839 --> 00:16:38,000
next

00:16:36,639 --> 00:16:40,160
no i don't think it's what i'm looking

00:16:38,000 --> 00:16:40,160
for

00:16:48,839 --> 00:17:05,839
also to try to get this documentation

00:17:16,079 --> 00:17:19,360
so i'm going to try to pull up you know

00:17:18,240 --> 00:17:33,840
the the

00:17:19,360 --> 00:17:33,840
dispatch reference um

00:18:25,840 --> 00:18:29,760
so in our strengths i was talking about

00:18:28,000 --> 00:18:31,120
this um so this is the repository

00:18:29,760 --> 00:18:33,520
dispatch repair reference

00:18:31,120 --> 00:18:35,360
and it basically tells us how we are we

00:18:33,520 --> 00:18:36,880
how we basically make a dispatch uh it

00:18:35,360 --> 00:18:37,919
takes you know the event type us you

00:18:36,880 --> 00:18:39,840
know

00:18:37,919 --> 00:18:41,440
you know a payload of the the client's

00:18:39,840 --> 00:18:43,120
pillow down in the event step itself

00:18:41,440 --> 00:18:44,480
and then you of course will also require

00:18:43,120 --> 00:18:45,360
a way to authenticate against this

00:18:44,480 --> 00:18:47,360
endpoint

00:18:45,360 --> 00:18:49,440
um so it's going to stay also required

00:18:47,360 --> 00:18:52,400
for you i'm not spoken to as well

00:18:49,440 --> 00:18:57,840
um so yeah i'm going to move on to this

00:18:52,400 --> 00:18:57,840
to try to explain some passwords

00:19:05,200 --> 00:19:09,280
so in case you'd like to go through um

00:19:06,880 --> 00:19:10,160
you know the the already written code

00:19:09,280 --> 00:19:13,760
for this demo

00:19:10,160 --> 00:19:14,559
um it's available here so you could you

00:19:13,760 --> 00:19:16,480
know try to

00:19:14,559 --> 00:19:18,400
if you if you'd like to just go to the

00:19:16,480 --> 00:19:19,600
just you know make a deep dive straight

00:19:18,400 --> 00:19:21,120
you know you're free to do that

00:19:19,600 --> 00:19:25,840
so it's available there i'm going to

00:19:21,120 --> 00:19:25,840
make it reach into my id

00:19:33,760 --> 00:19:39,840
i think i'm sharing screen okay

00:19:41,840 --> 00:19:45,840
explain this you know so that's so

00:19:43,679 --> 00:19:47,760
that's so in here i have my make file um

00:19:45,840 --> 00:19:48,720
this big file just contains a bunch of

00:19:47,760 --> 00:19:49,919
um steps to

00:19:48,720 --> 00:19:52,000
more like um you know look out

00:19:49,919 --> 00:19:53,840
development steps and to um you know

00:19:52,000 --> 00:19:56,160
installed you know keeps itself um you

00:19:53,840 --> 00:19:58,160
know use kind security cluster you know

00:19:56,160 --> 00:19:59,840
install the spinning services you know

00:19:58,160 --> 00:20:00,880
some other things like also install menu

00:19:59,840 --> 00:20:01,600
so that you can also do you know

00:20:00,880 --> 00:20:03,600
completely

00:20:01,600 --> 00:20:05,200
cycle of your look all the departments

00:20:03,600 --> 00:20:07,200
then um then there's the

00:20:05,200 --> 00:20:08,240
the you know the the the other greatest

00:20:07,200 --> 00:20:10,080
radio file um

00:20:08,240 --> 00:20:12,559
yeah in here i have a couple of things

00:20:10,080 --> 00:20:13,760
um first is um you know um

00:20:12,559 --> 00:20:16,480
some information about you know the

00:20:13,760 --> 00:20:17,039
bundle itself you know the plugin id and

00:20:16,480 --> 00:20:18,720
then you know

00:20:17,039 --> 00:20:20,320
the description for the bundle the

00:20:18,720 --> 00:20:22,720
provider and then the infection so this

00:20:20,320 --> 00:20:23,200
version is is going to be passed from um

00:20:22,720 --> 00:20:24,799
you know

00:20:23,200 --> 00:20:26,480
the git tag on that current the current

00:20:24,799 --> 00:20:27,760
repository if there's no type i think um

00:20:26,480 --> 00:20:28,640
we're just going to make a snapshot if

00:20:27,760 --> 00:20:30,480
it's testing

00:20:28,640 --> 00:20:31,919
if that's the status and this contains

00:20:30,480 --> 00:20:33,120
four stage changes um you know they're

00:20:31,919 --> 00:20:34,320
just going to

00:20:33,120 --> 00:20:37,120
make a version and then call it

00:20:34,320 --> 00:20:38,320
snapshots so this is derived from you

00:20:37,120 --> 00:20:40,240
know the the actual

00:20:38,320 --> 00:20:42,559
version that is passed by the valencia

00:20:40,240 --> 00:20:44,880
plugin and then there's also these

00:20:42,559 --> 00:20:46,799
plugins plugin that is written by the

00:20:44,880 --> 00:20:47,919
sprinkler the speaker project so speaker

00:20:46,799 --> 00:20:49,039
projects will um

00:20:47,919 --> 00:20:50,159
as this plugin does you know that

00:20:49,039 --> 00:20:51,360
actually you know each of these

00:20:50,159 --> 00:20:54,640
individual um

00:20:51,360 --> 00:20:56,480
it's making sense extensions here

00:20:54,640 --> 00:20:58,000
but this particular step is it's like i

00:20:56,480 --> 00:20:59,280
said extensions yeah it would

00:20:58,000 --> 00:21:00,400
you know bundle all of them because you

00:20:59,280 --> 00:21:02,320
know each of those extensions will

00:21:00,400 --> 00:21:03,120
generate zip on their own all of them is

00:21:02,320 --> 00:21:05,919
all about the

00:21:03,120 --> 00:21:06,880
one you know one day should i say um you

00:21:05,919 --> 00:21:08,240
know other

00:21:06,880 --> 00:21:09,600
person you know the zip and then every

00:21:08,240 --> 00:21:11,039
day so um

00:21:09,600 --> 00:21:14,080
[Music]

00:21:11,039 --> 00:21:14,960
this is for the gloves you know services

00:21:14,080 --> 00:21:16,400
then this is going to be the

00:21:14,960 --> 00:21:17,280
distribution the actual you know the

00:21:16,400 --> 00:21:20,000
dispatches you know

00:21:17,280 --> 00:21:20,559
um distribution at the end of the day um

00:21:20,000 --> 00:21:21,919
so uh

00:21:20,559 --> 00:21:23,280
you know i'll try to explain through

00:21:21,919 --> 00:21:23,919
some of you know some of my dependencies

00:21:23,280 --> 00:21:25,520
here how the

00:21:23,919 --> 00:21:26,540
dependencies that are specific to kotlin

00:21:25,520 --> 00:21:27,919
here um

00:21:26,540 --> 00:21:30,480
[Music]

00:21:27,919 --> 00:21:32,000
yeah so basically cutting like cotton

00:21:30,480 --> 00:21:34,000
caps you know of dependencies and then

00:21:32,000 --> 00:21:35,679
some things around here you know

00:21:34,000 --> 00:21:37,039
i guess language versions of things like

00:21:35,679 --> 00:21:38,799
that um yeah

00:21:37,039 --> 00:21:40,880
so they also have um you know these

00:21:38,799 --> 00:21:43,039
special dependencies themselves yeah

00:21:40,880 --> 00:21:44,400
which is the speaker service extension

00:21:43,039 --> 00:21:47,120
which is here and then

00:21:44,400 --> 00:21:48,000
maybe maybe maybe plug in extension so

00:21:47,120 --> 00:21:49,760
as well

00:21:48,000 --> 00:21:51,360
also um you know i have some things

00:21:49,760 --> 00:21:52,159
around you know the actual apis that

00:21:51,360 --> 00:21:53,600
i'll be using

00:21:52,159 --> 00:21:55,600
um you know for this for this you know

00:21:53,600 --> 00:21:58,320
for being able to you know um

00:21:55,600 --> 00:22:00,080
write uh the plugin for occur i'm likely

00:21:58,320 --> 00:22:01,679
going to you know

00:22:00,080 --> 00:22:04,000
obviously you know communicate with your

00:22:01,679 --> 00:22:06,640
or interface with you know the okay api

00:22:04,000 --> 00:22:09,280
so the okay api you know um you know

00:22:06,640 --> 00:22:11,440
defines these extension points

00:22:09,280 --> 00:22:14,400
yeah awesome sold out okay i'll try to

00:22:11,440 --> 00:22:14,400
shut them into the chat

00:22:25,500 --> 00:22:32,800
[Music]

00:22:34,159 --> 00:22:38,640
so i'm just trying to share those links

00:22:35,679 --> 00:22:40,159
that i took about things you know into

00:22:38,640 --> 00:22:41,840
to the chat i'll also be sharing you

00:22:40,159 --> 00:22:42,960
know each of these links too i don't

00:22:41,840 --> 00:22:44,080
know at the end of the year

00:22:42,960 --> 00:22:47,600
so that you know you can all go through

00:22:44,080 --> 00:22:50,240
it and edit um yeah

00:22:47,600 --> 00:22:51,840
so um yeah so you know for for this you

00:22:50,240 --> 00:22:53,840
know for the for the um you know

00:22:51,840 --> 00:22:55,760
plugin i definitely have those ps40

00:22:53,840 --> 00:22:57,600
dependencies that i have to use because

00:22:55,760 --> 00:22:59,840
there's some some spots that you i use

00:22:57,600 --> 00:23:01,600
you know therefore i think php forget

00:22:59,840 --> 00:23:02,880
notifications i think um there's also

00:23:01,600 --> 00:23:06,159
some positives you know that's actually

00:23:02,880 --> 00:23:08,400
dependent on you know ap 4g

00:23:06,159 --> 00:23:10,559
then um yeah so also i require some

00:23:08,400 --> 00:23:11,520
things from the blog a plugins api

00:23:10,559 --> 00:23:13,760
so what is called

00:23:11,520 --> 00:23:15,760
is basically like um a building block

00:23:13,760 --> 00:23:17,360
for uh for clinical services say for

00:23:15,760 --> 00:23:17,600
example i have some functionality that

00:23:17,360 --> 00:23:19,760
is

00:23:17,600 --> 00:23:21,280
likely to be shared across services but

00:23:19,760 --> 00:23:22,559
it's not really um you know service

00:23:21,280 --> 00:23:25,520
specific things around

00:23:22,559 --> 00:23:27,039
you know um enabling people to um you

00:23:25,520 --> 00:23:28,640
know use api clients that

00:23:27,039 --> 00:23:30,240
would you know cool into internal

00:23:28,640 --> 00:23:31,200
internal services or internal endpoints

00:23:30,240 --> 00:23:34,320
or services

00:23:31,200 --> 00:23:35,280
so those those you know those essential

00:23:34,320 --> 00:23:37,679
points

00:23:35,280 --> 00:23:38,960
available on on you know on on the

00:23:37,679 --> 00:23:41,760
apis itself

00:23:38,960 --> 00:23:51,840
so i'm going to try to delete all this

00:23:41,760 --> 00:23:51,840
and stuff

00:23:56,720 --> 00:24:05,840
i could just try to explain it

00:24:08,400 --> 00:24:11,530
yeah i'm so definitely going to start

00:24:10,080 --> 00:24:13,440
with the package itself um

00:24:11,530 --> 00:24:15,520
[Music]

00:24:13,440 --> 00:24:16,640
so um the reason i'm not going to i mean

00:24:15,520 --> 00:24:18,000
i didn't really take it through the

00:24:16,640 --> 00:24:19,679
purchase of you know that's not you know

00:24:18,000 --> 00:24:20,480
the whole video project is um it feels

00:24:19,679 --> 00:24:22,320
like

00:24:20,480 --> 00:24:23,760
another lot of this is mostly you know

00:24:22,320 --> 00:24:26,240
bootstrap store the strap

00:24:23,760 --> 00:24:28,240
that you know it's it's uh maybe it's um

00:24:26,240 --> 00:24:28,720
quite easy so um you could if you don't

00:24:28,240 --> 00:24:31,200
want to

00:24:28,720 --> 00:24:32,880
also set it up you could also grab any

00:24:31,200 --> 00:24:33,520
of the existing plugins on that track so

00:24:32,880 --> 00:24:46,320
you know

00:24:33,520 --> 00:24:48,559
try to try to modify from there so yeah

00:24:46,320 --> 00:24:49,360
yeah so um the first entry point is

00:24:48,559 --> 00:24:51,760
going to be um

00:24:49,360 --> 00:24:53,760
more like um you know um the the the

00:24:51,760 --> 00:24:56,640
plug-in class itself it's more like um

00:24:53,760 --> 00:24:58,559
basically um you know like the entry

00:24:56,640 --> 00:24:59,440
point is any application right it's more

00:24:58,559 --> 00:25:00,720
like i mean you know

00:24:59,440 --> 00:25:02,960
if you have things like you know you

00:25:00,720 --> 00:25:05,120
know set up a set of actions

00:25:02,960 --> 00:25:06,080
or also set up certain actions to you

00:25:05,120 --> 00:25:07,679
also you this is

00:25:06,080 --> 00:25:10,480
you know where you use likely you know

00:25:07,679 --> 00:25:13,039
define some of them so um you know

00:25:10,480 --> 00:25:15,200
so so so the plugin you know the plugin

00:25:13,039 --> 00:25:17,840
class itself you know extends um

00:25:15,200 --> 00:25:19,440
you know the p4g plugin and then we're

00:25:17,840 --> 00:25:20,720
taking a plugin wrapper i think

00:25:19,440 --> 00:25:22,880
yeah it's taking the plugin wrapper

00:25:20,720 --> 00:25:23,279
that's that's content used and then from

00:25:22,880 --> 00:25:24,640
there

00:25:23,279 --> 00:25:25,840
you know you can then you know if you

00:25:24,640 --> 00:25:27,520
have some things around you know setting

00:25:25,840 --> 00:25:28,640
up bloggers to you know so that you know

00:25:27,520 --> 00:25:30,720
you can log out you know

00:25:28,640 --> 00:25:32,320
look you know important information you

00:25:30,720 --> 00:25:34,000
can do that and then you know um

00:25:32,320 --> 00:25:35,600
if you know at a point of also you know

00:25:34,000 --> 00:25:39,279
ending you know you know

00:25:35,600 --> 00:25:40,799
yeah you know um tearing down the plugin

00:25:39,279 --> 00:25:42,400
you can also you know turn down those

00:25:40,799 --> 00:25:43,170
resources too as well so i'm going to

00:25:42,400 --> 00:25:44,799
name this um

00:25:43,170 --> 00:25:46,400
[Music]

00:25:44,799 --> 00:25:47,840
so you know there's an important part in

00:25:46,400 --> 00:25:48,400
that you know the plug-in class here has

00:25:47,840 --> 00:25:50,320
to you know

00:25:48,400 --> 00:25:51,200
what we plug in as we know that would be

00:25:50,320 --> 00:25:52,320
you know because it's called essentially

00:25:51,200 --> 00:25:54,000
package name but it's already

00:25:52,320 --> 00:25:56,720
provided here so i'm going to just copy

00:25:54,000 --> 00:25:56,720
the advantage you know

00:26:03,120 --> 00:26:11,840
yep um

00:26:12,640 --> 00:26:25,700
so we take a plugin right

00:26:24,000 --> 00:26:27,840
then we extend um

00:26:25,700 --> 00:26:31,200
[Music]

00:26:27,840 --> 00:26:31,200
the p40 plugging source

00:26:35,360 --> 00:26:39,840
so it takes an aperture as well

00:26:43,200 --> 00:26:47,360
yeah so basically this is the entry

00:26:45,440 --> 00:26:49,120
point um it will basically

00:26:47,360 --> 00:26:51,120
if i have things like around you know um

00:26:49,120 --> 00:26:52,960
things um you know

00:26:51,120 --> 00:26:54,640
you know set up things um so this this

00:26:52,960 --> 00:26:56,159
enables you to provide some endpoints

00:26:54,640 --> 00:26:57,600
that you could use around you know

00:26:56,159 --> 00:26:59,600
if the you know starting the plugins

00:26:57,600 --> 00:27:01,760
edit plugin so i could override this

00:26:59,600 --> 00:27:03,039
and then you know you know i'll do some

00:27:01,760 --> 00:27:05,200
of those actions around you know if for

00:27:03,039 --> 00:27:06,480
example if say for example i want to

00:27:05,200 --> 00:27:08,640
knock that's plugging that started i

00:27:06,480 --> 00:27:09,279
could just already start it's not metal

00:27:08,640 --> 00:27:13,279
here and then

00:27:09,279 --> 00:27:15,279
you know that's the you know

00:27:13,279 --> 00:27:16,880
the looking information on to do but

00:27:15,279 --> 00:27:18,159
this this doesn't have to just be you

00:27:16,880 --> 00:27:19,840
know just blocking something it could

00:27:18,159 --> 00:27:21,440
also be around you know if you want to

00:27:19,840 --> 00:27:22,880
start the logo or to anything

00:27:21,440 --> 00:27:24,480
or reach out to economic you know

00:27:22,880 --> 00:27:27,440
register that's it that's what you know

00:27:24,480 --> 00:27:28,480
at some you know 10 points and also i'll

00:27:27,440 --> 00:27:30,799
also need to you know um

00:27:28,480 --> 00:27:32,080
you know define um you know um so yeah

00:27:30,799 --> 00:27:34,320
there's this important concept around

00:27:32,080 --> 00:27:35,120
you know building spinner stages in um

00:27:34,320 --> 00:27:38,080
you know in that

00:27:35,120 --> 00:27:38,559
um you know for us to be able to um you

00:27:38,080 --> 00:27:40,720
know

00:27:38,559 --> 00:27:42,480
tie each of those tasks in a stage

00:27:40,720 --> 00:27:44,559
together for us to be able to know that

00:27:42,480 --> 00:27:48,159
okay this task connects to this task

00:27:44,559 --> 00:27:49,679
we're going to need a way of defining um

00:27:48,159 --> 00:27:52,080
providing a definition for for that

00:27:49,679 --> 00:27:54,159
stage um so so you know

00:27:52,080 --> 00:27:55,360
so you know this project you know

00:27:54,159 --> 00:27:56,880
especially you know

00:27:55,360 --> 00:27:58,640
it's going to be right in the back

00:27:56,880 --> 00:28:01,039
stages um tries to

00:27:58,640 --> 00:28:02,000
encourage you know you going going the

00:28:01,039 --> 00:28:04,000
route of using an actual

00:28:02,000 --> 00:28:05,120
stage definition you know builder so

00:28:04,000 --> 00:28:07,440
what's this this

00:28:05,120 --> 00:28:08,960
definition builder is um it's like um an

00:28:07,440 --> 00:28:10,000
interface on occur that you can use to

00:28:08,960 --> 00:28:11,760
define stages

00:28:10,000 --> 00:28:13,679
um you know to define you know connected

00:28:11,760 --> 00:28:15,120
tasks and attach attach them to you know

00:28:13,679 --> 00:28:16,640
occur stages in a pipeline

00:28:15,120 --> 00:28:18,399
so you know i'll show you you know how

00:28:16,640 --> 00:28:19,960
that is

00:28:18,399 --> 00:28:21,600
so i'm going to name this

00:28:19,960 --> 00:28:31,840
[Music]

00:28:21,600 --> 00:28:31,840
a dispatch stage

00:28:37,200 --> 00:28:40,480
so you could you don't also want the

00:28:38,640 --> 00:28:42,240
techniques of ie name stage because in

00:28:40,480 --> 00:28:42,960
the eye namely stage is how the stage is

00:28:42,240 --> 00:28:45,200
going to

00:28:42,960 --> 00:28:46,399
show up on on the deck on the deck um or

00:28:45,200 --> 00:28:47,679
you know how is how you're going to be

00:28:46,399 --> 00:28:49,679
able to reference that stage

00:28:47,679 --> 00:28:51,919
your deck configuration so if i were to

00:28:49,679 --> 00:28:54,240
name a class um you know a stage

00:28:51,919 --> 00:28:54,960
stage you know dispatch stage it means

00:28:54,240 --> 00:28:56,640
that you know

00:28:54,960 --> 00:28:58,159
if you did get especially when you

00:28:56,640 --> 00:28:59,840
extended deficit definition builder the

00:28:58,159 --> 00:29:01,600
get type method on it's basically trims

00:28:59,840 --> 00:29:02,320
every stage parts and you know this

00:29:01,600 --> 00:29:04,880
stage will be

00:29:02,320 --> 00:29:06,880
you know available on the deck front as

00:29:04,880 --> 00:29:08,320
a dispatch

00:29:06,880 --> 00:29:10,320
so you want to have some conservation

00:29:08,320 --> 00:29:13,279
around how you name it okay so

00:29:10,320 --> 00:29:14,240
i have to extend this definition builder

00:29:13,279 --> 00:29:15,600
um

00:29:14,240 --> 00:29:19,039
so i don't really have uh much

00:29:15,600 --> 00:29:22,559
dependencies you know right

00:29:19,039 --> 00:29:22,559
now so

00:29:23,919 --> 00:29:27,679
so this differential builder has you

00:29:25,440 --> 00:29:29,279
know some interesting methods

00:29:27,679 --> 00:29:31,440
around you know how you define um you

00:29:29,279 --> 00:29:32,799
know stages you could have stages before

00:29:31,440 --> 00:29:33,840
um you could have tasks that are wrong

00:29:32,799 --> 00:29:35,279
before any stage

00:29:33,840 --> 00:29:36,640
you could have tasks that are on after

00:29:35,279 --> 00:29:37,840
stage you could also have classes that

00:29:36,640 --> 00:29:39,440
run within this stage so

00:29:37,840 --> 00:29:41,919
those those those interfaces are quite

00:29:39,440 --> 00:29:44,320
so that you can kind of like have um

00:29:41,919 --> 00:29:46,000
which you know be able to do you know

00:29:44,320 --> 00:29:48,000
you build and you know

00:29:46,000 --> 00:29:50,240
develop a rich kind of like a rich stage

00:29:48,000 --> 00:29:51,679
such that if you have some you know

00:29:50,240 --> 00:29:52,870
some interesting your considerations

00:29:51,679 --> 00:29:54,960
around you you know

00:29:52,870 --> 00:29:56,159
[Music]

00:29:54,960 --> 00:29:58,320
and all that you can easily you know

00:29:56,159 --> 00:29:59,120
take advantage of that but for now i'll

00:29:58,320 --> 00:30:00,880
just be you know

00:29:59,120 --> 00:30:02,880
using the builder's graph you know i

00:30:00,880 --> 00:30:04,480
thought

00:30:02,880 --> 00:30:06,720
so using that i'm going to basically

00:30:04,480 --> 00:30:08,720
build a task graph that says that okay

00:30:06,720 --> 00:30:10,080
in this stage i have a couple of stages

00:30:08,720 --> 00:30:11,120
of a couple of tasks and this is the

00:30:10,080 --> 00:30:13,679
other day in which you know they get

00:30:11,120 --> 00:30:13,679
executed

00:30:21,520 --> 00:30:25,279
yep so um

00:30:22,670 --> 00:30:28,080
[Music]

00:30:25,279 --> 00:30:37,840
i don't think it builds the task of it

00:30:28,080 --> 00:30:37,840
if it does anything so i'll remove it

00:30:52,690 --> 00:30:59,279
[Music]

00:30:56,240 --> 00:31:01,679
um so you could also

00:30:59,279 --> 00:31:03,700
take you don't need to remix the stitch

00:31:01,679 --> 00:31:06,890
execution later

00:31:03,700 --> 00:31:06,890
[Music]

00:31:16,840 --> 00:31:19,840
down

00:31:24,570 --> 00:31:29,980
[Music]

00:31:30,000 --> 00:31:33,120
execution is important is say for

00:31:31,760 --> 00:31:35,200
example i want to

00:31:33,120 --> 00:31:36,799
you know add define some you know on

00:31:35,200 --> 00:31:37,840
detective i had very defined some

00:31:36,799 --> 00:31:39,840
configuration

00:31:37,840 --> 00:31:41,679
i could easily retrieve it from the you

00:31:39,840 --> 00:31:43,360
know you know from the context or

00:31:41,679 --> 00:31:45,120
you know or basically map that stage

00:31:43,360 --> 00:31:46,799
that was very you know a little bit

00:31:45,120 --> 00:31:48,320
configured on the tech ui

00:31:46,799 --> 00:31:49,679
to some you know some module that you

00:31:48,320 --> 00:31:50,559
know that helps me shoot the data from

00:31:49,679 --> 00:31:53,840
you know from the front

00:31:50,559 --> 00:31:56,640
stage so i could

00:31:53,840 --> 00:31:58,840
so i'm going to say the task name of the

00:31:56,640 --> 00:32:03,600
task is going to just

00:31:58,840 --> 00:32:03,600
call this patch

00:32:08,000 --> 00:32:15,840
then um

00:32:18,320 --> 00:32:21,519
so basically this just takes basically

00:32:20,159 --> 00:32:23,200
the name of you know the name of

00:32:21,519 --> 00:32:25,039
the class that you'd like to reference

00:32:23,200 --> 00:32:29,840
um

00:32:25,039 --> 00:32:29,840
so i'm going to create um

00:32:38,320 --> 00:32:44,480
call dispatch so you know like i said

00:32:42,000 --> 00:32:45,919
again if you you know if you'd like to

00:32:44,480 --> 00:32:47,760
go you know

00:32:45,919 --> 00:32:49,600
move on with all of this yeah you can

00:32:47,760 --> 00:32:57,840
just get involved

00:32:49,600 --> 00:32:57,840
for putting for the code

00:33:22,640 --> 00:33:26,320
so because this apis are usually written

00:33:24,399 --> 00:33:28,960
in java um you know

00:33:26,320 --> 00:33:30,480
you'd have to some things would not may

00:33:28,960 --> 00:33:32,559
not matter directly you know

00:33:30,480 --> 00:33:34,240
as they would in java a calling class is

00:33:32,559 --> 00:33:36,320
not exactly um

00:33:34,240 --> 00:33:37,760
a java class so um you know i'm

00:33:36,320 --> 00:33:39,440
basically asking you know

00:33:37,760 --> 00:33:42,320
saying okay i have this content class

00:33:39,440 --> 00:33:53,840
you know ask the java equivalent to this

00:33:42,320 --> 00:33:53,840
name yeah

00:33:54,159 --> 00:33:59,120
yeah so um the dispatch task the code

00:33:57,200 --> 00:34:07,120
dispatch stats is you know has to be

00:33:59,120 --> 00:34:08,399
um you know extend anoka task itself

00:34:07,120 --> 00:34:10,240
so all of these are all you know i

00:34:08,399 --> 00:34:12,399
believe that your car you know your

00:34:10,240 --> 00:34:13,280
api you know endpoints but they call

00:34:12,399 --> 00:34:15,440
this patch you know

00:34:13,280 --> 00:34:16,639
task you know i need to achieve some

00:34:15,440 --> 00:34:18,480
important information

00:34:16,639 --> 00:34:19,839
that is already going to be that's we're

00:34:18,480 --> 00:34:20,720
going to configure in this negative

00:34:19,839 --> 00:34:22,240
configuration

00:34:20,720 --> 00:34:24,560
while uh with the dependence maker

00:34:22,240 --> 00:34:25,599
itself so i'm going to need to

00:34:24,560 --> 00:34:28,879
retrieve you know all of this

00:34:25,599 --> 00:34:28,879
information already defined here

00:34:30,240 --> 00:34:34,879
so let me just move out of this

00:34:33,359 --> 00:34:37,119
all this information are very defined

00:34:34,879 --> 00:34:37,119
here

00:34:42,480 --> 00:34:46,399
i just need to achieve you know the

00:34:44,879 --> 00:34:48,560
maybe not all of this

00:34:46,399 --> 00:34:50,480
but you know but for the sake of this

00:34:48,560 --> 00:34:52,320
you know um of this demo i'm going to

00:34:50,480 --> 00:34:53,520
retrieve you know the octagon the awk to

00:34:52,320 --> 00:34:56,399
repo the payload

00:34:53,520 --> 00:34:57,200
from the backend so i'm going to um have

00:34:56,399 --> 00:34:58,880
to you know

00:34:57,200 --> 00:35:00,800
define a plug-in configuration you know

00:34:58,880 --> 00:35:02,640
class that's what you know that would be

00:35:00,800 --> 00:35:04,880
you know whatever you know

00:35:02,640 --> 00:35:07,200
by the way you know service and then you

00:35:04,880 --> 00:35:10,800
know i'll be able to retrieve that

00:35:07,200 --> 00:35:10,800
so let me change your share

00:35:12,720 --> 00:35:18,560
cool so i'm going to have to create um

00:35:16,000 --> 00:35:18,560
a model

00:35:19,200 --> 00:35:25,280
uh calling class i'm going to call it um

00:35:25,520 --> 00:35:33,119
dispatch copy

00:35:31,520 --> 00:35:35,359
so it's actually going to be a data

00:35:33,119 --> 00:35:35,359
class

00:35:37,200 --> 00:35:40,720
so i can retrieve this information

00:35:41,200 --> 00:35:47,200
in the class

00:35:45,280 --> 00:35:50,800
so for this um i'm going to need to have

00:35:47,200 --> 00:35:50,800
the plugin configuration annotation

00:35:56,839 --> 00:35:59,839
then

00:36:10,839 --> 00:36:16,240
um

00:36:13,119 --> 00:36:16,240
and to have the opticon

00:36:22,160 --> 00:36:25,280
i actually need to achieve um some

00:36:24,320 --> 00:36:27,599
things like around

00:36:25,280 --> 00:36:27,599
hawk

00:36:30,480 --> 00:36:37,599
and um not actually payload

00:36:34,000 --> 00:36:39,760
but um the events type

00:36:37,599 --> 00:36:41,550
events type you didn't essentially have

00:36:39,760 --> 00:36:44,719
to you could just you know

00:36:41,550 --> 00:36:44,719
[Music]

00:36:48,240 --> 00:36:51,839
so how do i get this information out

00:36:50,240 --> 00:36:55,839
basically have an annotation

00:36:51,839 --> 00:36:57,119
called plugin configuration

00:36:55,839 --> 00:36:58,640
the deployment configuration annotation

00:36:57,119 --> 00:37:00,800
allows you to retrieve um the

00:36:58,640 --> 00:37:02,800
transporting configuration information

00:37:00,800 --> 00:37:04,720
from you know this you know from the

00:37:02,800 --> 00:37:06,560
from the manifest that is used to deploy

00:37:04,720 --> 00:37:08,880
that spinnaker service itself

00:37:06,560 --> 00:37:09,640
so um it's similar to something like

00:37:08,880 --> 00:37:12,850
this

00:37:09,640 --> 00:37:12,850
[Music]

00:37:21,760 --> 00:37:24,909
[Music]

00:37:34,839 --> 00:37:37,839
foreign

00:37:38,560 --> 00:37:42,640
yeah so you could you could easily you

00:37:41,200 --> 00:37:43,920
know define the configuration here

00:37:42,640 --> 00:37:44,960
and then you know retrieve it there

00:37:43,920 --> 00:37:47,599
that's you know that's blocking

00:37:44,960 --> 00:37:49,359
configuration rotation

00:37:47,599 --> 00:37:51,839
so i'm going to share this also in that

00:37:49,359 --> 00:37:51,839
link

00:37:52,160 --> 00:37:56,320
i have like an to switch because

00:37:53,599 --> 00:37:57,359
it's good yeah um so

00:37:56,320 --> 00:37:59,760
i think i've added the plug-in

00:37:57,359 --> 00:38:05,839
configuration location and i can

00:37:59,760 --> 00:38:10,000
address it

00:38:05,839 --> 00:38:10,000
operation task

00:38:10,160 --> 00:38:13,839
so you know in to you know for a task to

00:38:12,400 --> 00:38:14,880
actually um succeed you know

00:38:13,839 --> 00:38:16,960
you're probably going to have to you

00:38:14,880 --> 00:38:18,240
know execute it

00:38:16,960 --> 00:38:20,079
alternative you can also check you know

00:38:18,240 --> 00:38:21,520
the additional you know additional you

00:38:20,079 --> 00:38:23,200
know um

00:38:21,520 --> 00:38:24,720
methods available and that's on the

00:38:23,200 --> 00:38:26,079
other task here the task

00:38:24,720 --> 00:38:27,599
interface itself so there are some

00:38:26,079 --> 00:38:28,320
things you can extend it like the time

00:38:27,599 --> 00:38:31,440
outs the

00:38:28,320 --> 00:38:33,119
the um you know timeouts for i think for

00:38:31,440 --> 00:38:34,640
tribal tasks you can you

00:38:33,119 --> 00:38:36,320
find the termites you can also define

00:38:34,640 --> 00:38:36,880
the back of your character for travel

00:38:36,320 --> 00:38:38,880
tasks

00:38:36,880 --> 00:38:42,720
i think this is just a basic task so i

00:38:38,880 --> 00:38:42,720
think we just have access to the execute

00:38:44,839 --> 00:38:48,160
methods yeah

00:38:48,840 --> 00:38:51,989
[Music]

00:38:55,119 --> 00:39:01,839
call this much

00:39:04,560 --> 00:39:09,839
yeah um so in the executive method you

00:39:07,680 --> 00:39:11,280
have access to a couple of information

00:39:09,839 --> 00:39:14,320
you you have access to the plugin

00:39:11,280 --> 00:39:16,720
configuration you also have access to um

00:39:14,320 --> 00:39:18,240
the actual stage definition that is you

00:39:16,720 --> 00:39:21,280
know coming from you know

00:39:18,240 --> 00:39:22,560
subsequent previous stages and also from

00:39:21,280 --> 00:39:24,720
the one that is configured on the date

00:39:22,560 --> 00:39:26,240
ui but for this also

00:39:24,720 --> 00:39:28,320
i also need something you know i also

00:39:26,240 --> 00:39:31,280
need to underpick you know an hp client

00:39:28,320 --> 00:39:32,079
that's our need to call out to github

00:39:31,280 --> 00:39:34,400
endpoints

00:39:32,079 --> 00:39:35,200
so the speaker service provides you know

00:39:34,400 --> 00:39:37,200
um

00:39:35,200 --> 00:39:38,560
something like a plug-in sdk like

00:39:37,200 --> 00:39:41,920
basically you know

00:39:38,560 --> 00:39:41,920
you know how does

00:39:48,960 --> 00:39:53,200
so this i think this is under the api so

00:39:52,000 --> 00:39:57,839
this is this basically just gives you

00:39:53,200 --> 00:39:57,839
access to um you know

00:40:05,280 --> 00:40:08,480
this is just basically good access to

00:40:07,040 --> 00:40:08,750
you know um you know some

00:40:08,480 --> 00:40:11,889
some

00:40:08,750 --> 00:40:11,889
[Music]

00:40:20,160 --> 00:40:25,839
so i could see plugin configuration

00:40:36,839 --> 00:40:39,839
okay

00:40:50,800 --> 00:40:54,319
try to check through the chats

00:40:54,480 --> 00:41:03,520
okay okay okay yeah cool so i will um

00:40:58,480 --> 00:41:07,839
increase the intensity as well to see

00:41:03,520 --> 00:41:07,839
what's the common distance

00:41:28,640 --> 00:41:35,839
all right

00:41:38,000 --> 00:41:49,839
okay this box

00:42:00,839 --> 00:42:03,839
okay

00:42:23,440 --> 00:42:28,480
yeah so i'm going to try to you know

00:42:25,680 --> 00:42:31,839
fetch the speak lines from the um

00:42:28,480 --> 00:42:31,839
from plugin sdk

00:42:41,119 --> 00:42:44,480
so i think there are a few things the

00:42:42,640 --> 00:42:47,119
service decay there's the um

00:42:44,480 --> 00:42:47,680
study i'm not i don't think i think the

00:42:47,119 --> 00:42:48,800
city

00:42:47,680 --> 00:42:50,880
you know has you know some of the

00:42:48,800 --> 00:42:52,000
apartments functions around so relaxing

00:42:50,880 --> 00:42:53,280
and understanding data

00:42:52,000 --> 00:42:55,280
then there's a younger resource loader

00:42:53,280 --> 00:42:56,720
that helps you basically you know

00:42:55,280 --> 00:42:58,960
configuration from a you know from a

00:42:56,720 --> 00:42:58,960
young

00:42:59,520 --> 00:43:06,400
so i'm going to first try to configure

00:43:02,640 --> 00:43:06,400
a client i'm going to name it um

00:43:08,319 --> 00:43:14,289
dispatch i'm going to set the url

00:43:11,190 --> 00:43:14,289
[Music]

00:43:24,839 --> 00:43:28,960
okay

00:43:26,880 --> 00:43:41,839
i think that we should now achieve some

00:43:28,960 --> 00:43:41,839
of this information

00:43:52,839 --> 00:43:55,839
rebel

00:44:04,160 --> 00:44:07,200
so i'm going to also need to you know

00:44:05,760 --> 00:44:08,080
pass some some

00:44:07,200 --> 00:44:15,359
computer as well

00:44:08,080 --> 00:44:16,720
[Music]

00:44:15,359 --> 00:44:18,400
i'm just going to use the defaults for

00:44:16,720 --> 00:44:23,359
that

00:44:18,400 --> 00:44:28,400
and then

00:44:23,359 --> 00:44:28,400
so let's configure return code

00:44:29,599 --> 00:44:37,839
i'm going to also have

00:44:43,920 --> 00:44:47,920
so um it's not you can also reach you

00:44:46,400 --> 00:44:48,960
you can also retrieve clients for

00:44:47,920 --> 00:44:50,880
internal

00:44:48,960 --> 00:45:05,839
sneaker services it's not limited to

00:44:50,880 --> 00:45:05,839
being able to collect sound services

00:45:15,200 --> 00:45:19,839
that's what

00:45:21,119 --> 00:45:33,839
i think i should be able to do this

00:45:36,390 --> 00:45:47,839
[Music]

00:45:44,839 --> 00:45:47,839
is

00:45:50,560 --> 00:46:01,839
it was

00:46:02,079 --> 00:46:06,160
all this i'll just retrieve this patch

00:46:09,520 --> 00:46:13,119
yeah so now use this dispatch cleanse

00:46:11,440 --> 00:46:16,480
you know subsequently

00:46:13,119 --> 00:46:18,319
so first i'm going to need um a body so

00:46:16,480 --> 00:46:20,079
i'm going to first need to make the

00:46:18,319 --> 00:46:22,000
requests so i need some

00:46:20,079 --> 00:46:23,839
some important things um i need um you

00:46:22,000 --> 00:46:26,480
know i need the actual dispatch you know

00:46:23,839 --> 00:46:28,319
but itself i also need some you know

00:46:26,480 --> 00:46:29,760
i actually need to pass you know the

00:46:28,319 --> 00:46:32,640
others in the

00:46:29,760 --> 00:46:34,240
the authorization of the with the token

00:46:32,640 --> 00:46:35,760
that i need to use you know

00:46:34,240 --> 00:46:38,640
each to access certain points i also

00:46:35,760 --> 00:46:38,640
need to um

00:46:40,400 --> 00:46:44,560
i think i also need to pass the clan

00:46:41,680 --> 00:46:48,000
pillars as well cool

00:46:44,560 --> 00:46:48,000
so i'm going to try to

00:46:50,079 --> 00:46:53,119
name these models

00:46:54,880 --> 00:46:57,839
without

00:47:09,680 --> 00:47:14,319
and let's also need to actually pass the

00:47:12,079 --> 00:47:25,440
clamping load

00:47:14,319 --> 00:47:28,480
that's what that's as well

00:47:25,440 --> 00:47:28,480
let me check the api

00:47:29,200 --> 00:47:41,200
you can type on client payload call this

00:47:38,400 --> 00:47:41,200
dispatch body

00:47:43,280 --> 00:47:54,319
so let's also deter clusters more

00:47:52,480 --> 00:47:56,240
so i need um a couple of things i need

00:47:54,319 --> 00:47:59,119
um to find the

00:47:56,240 --> 00:47:59,119
positive class

00:48:02,000 --> 00:48:04,880
i also need um

00:48:05,680 --> 00:48:10,160
also need um let's type

00:48:15,440 --> 00:48:18,800
but um you know digital you know api

00:48:17,599 --> 00:48:22,559
does not expect it

00:48:18,800 --> 00:48:26,000
to be to be just in the past that

00:48:22,559 --> 00:48:26,800
in the camera case but because the um

00:48:26,000 --> 00:48:28,640
you know

00:48:26,800 --> 00:48:30,400
the typical client that is used by that

00:48:28,640 --> 00:48:32,480
um you know kpa

00:48:30,400 --> 00:48:34,400
uses um jackson under the vote so i'm

00:48:32,480 --> 00:48:35,920
able to easily have those you know json

00:48:34,400 --> 00:48:37,520
property annotations to

00:48:35,920 --> 00:48:39,440
the specified the data is initialized

00:48:37,520 --> 00:48:42,640
and it's realized so we had

00:48:39,440 --> 00:48:42,640
just text and application here

00:48:42,880 --> 00:48:46,400
because um you know the github api

00:48:44,559 --> 00:48:49,839
expects it in this order

00:48:46,400 --> 00:48:49,839
so i'm going to have this to my screen

00:48:49,920 --> 00:48:54,000
so this is what's to give people expects

00:48:57,440 --> 00:49:03,839
add the adjustment property here

00:49:09,680 --> 00:49:17,839
[Music]

00:49:11,040 --> 00:49:17,839
as well

00:49:19,280 --> 00:49:24,319
let's say so i think we should be good

00:49:23,280 --> 00:49:26,000
so for now i'm just going to pass the

00:49:24,319 --> 00:49:26,559
clamping you'll have a string like an l

00:49:26,000 --> 00:49:31,839
string

00:49:26,559 --> 00:49:31,839
um just

00:49:36,280 --> 00:49:39,429
[Music]

00:49:42,839 --> 00:49:45,839
coffee

00:49:46,400 --> 00:49:49,599
i'm going to add some information on the

00:49:48,640 --> 00:49:58,850
client payload

00:49:49,599 --> 00:50:03,610
i'm going to see

00:49:58,850 --> 00:50:03,610
[Music]

00:50:04,880 --> 00:50:08,079
so it doesn't really matter you can also

00:50:06,480 --> 00:50:10,800
retrieve this information

00:50:08,079 --> 00:50:12,960
from you know from the actual quick of

00:50:10,800 --> 00:50:15,040
course

00:50:12,960 --> 00:50:17,260
so usually you have to do something like

00:50:15,040 --> 00:50:20,319
um

00:50:17,260 --> 00:50:20,319
[Music]

00:50:22,160 --> 00:50:28,960
something like um you know this to

00:50:26,640 --> 00:50:30,640
have this to um maybe just just for the

00:50:28,960 --> 00:50:33,920
sake of demonstration we could map this

00:50:30,640 --> 00:50:33,920
to something like dispatch config

00:50:37,520 --> 00:50:40,800
so happen is the distraction config

00:50:38,880 --> 00:50:42,800
means that you know i'm able to achieve

00:50:40,800 --> 00:50:44,079
you know

00:50:42,800 --> 00:50:45,119
any of this information but just

00:50:44,079 --> 00:50:46,400
configuration from you of course it's

00:50:45,119 --> 00:50:47,680
not suspected that you configure your

00:50:46,400 --> 00:50:48,640
own token from the ei

00:50:47,680 --> 00:50:50,319
but just for the sake of the

00:50:48,640 --> 00:50:54,960
demonstration properly so i'm just going

00:50:50,319 --> 00:50:57,440
to commence that fans

00:50:54,960 --> 00:50:59,040
and also need to also um make the

00:50:57,440 --> 00:51:00,640
request itself

00:50:59,040 --> 00:51:02,720
so let's see uh you know what's what

00:51:00,640 --> 00:51:08,000
these backlines expects

00:51:02,720 --> 00:51:10,400
when to make a request

00:51:08,000 --> 00:51:11,760
i think that's the wp request i think it

00:51:10,400 --> 00:51:16,079
and then the um

00:51:11,760 --> 00:51:18,480
the usb class requires a request object

00:51:16,079 --> 00:51:20,240
so what is the request object so the

00:51:18,480 --> 00:51:21,119
request object has some properties

00:51:20,240 --> 00:51:22,400
request name

00:51:21,119 --> 00:51:23,680
just for previous purposes tracy

00:51:22,400 --> 00:51:24,800
publishers doesn't know what shows up in

00:51:23,680 --> 00:51:25,839
those blogs

00:51:24,800 --> 00:51:27,520
those you know the service logs

00:51:25,839 --> 00:51:28,319
eventually it's like it was able to just

00:51:27,520 --> 00:51:30,800
increment

00:51:28,319 --> 00:51:32,319
upgrade requests so you know it takes

00:51:30,800 --> 00:51:33,200
the parts the content type is by default

00:51:32,319 --> 00:51:35,520
of national json

00:51:33,200 --> 00:51:37,040
so this is you know especially when you

00:51:35,520 --> 00:51:39,280
know according to personal object

00:51:37,040 --> 00:51:40,880
it's you know it's it's it's good to to

00:51:39,280 --> 00:51:42,960
set the proper content type

00:51:40,880 --> 00:51:44,240
so i would probably override this to um

00:51:42,960 --> 00:51:46,240
you know you know

00:51:44,240 --> 00:51:47,440
maybe text or something later down the

00:51:46,240 --> 00:51:48,960
line um

00:51:47,440 --> 00:51:51,119
so then the other store as well are they

00:51:48,960 --> 00:51:51,920
put parameters so just a few things that

00:51:51,119 --> 00:51:53,410
will be changing

00:51:51,920 --> 00:51:55,920
uh i think um

00:51:53,410 --> 00:51:59,280
[Music]

00:51:55,920 --> 00:52:05,040
the headers and um the body

00:51:59,280 --> 00:52:09,599
this one is passive body yeah

00:52:05,040 --> 00:52:09,599
so we need to actually make the request

00:52:13,040 --> 00:52:19,200
request all of these are from the coke

00:52:17,200 --> 00:52:21,119
pi

00:52:19,200 --> 00:52:22,559
so um so you know pretty much any

00:52:21,119 --> 00:52:23,119
sneaker service should be looking to

00:52:22,559 --> 00:52:25,839
extend

00:52:23,119 --> 00:52:26,240
would after clocking sdk would have any

00:52:25,839 --> 00:52:28,240
of this

00:52:26,240 --> 00:52:30,000
you know things that you could use to

00:52:28,240 --> 00:52:33,839
you know to help you down the line

00:52:30,000 --> 00:52:33,839
i'll call this call dispatch

00:52:37,040 --> 00:52:42,480
so does this take

00:52:43,520 --> 00:52:48,720
and then it pops so i think it's this

00:52:45,520 --> 00:52:48,720
large dispatches

00:52:55,760 --> 00:53:01,040
so i'm going to actually do the post

00:52:58,240 --> 00:53:03,520
what does it stick

00:53:01,040 --> 00:53:06,000
a request so i'm actually going to do

00:53:03,520 --> 00:53:06,000
the posts

00:53:08,079 --> 00:53:12,839
and then i think the post recons

00:53:09,520 --> 00:53:15,040
actually returns um an objective type

00:53:12,839 --> 00:53:18,070
response

00:53:15,040 --> 00:53:18,070
[Music]

00:53:22,160 --> 00:53:25,599
so a few things we want to check that

00:53:24,720 --> 00:53:27,119
you know

00:53:25,599 --> 00:53:28,720
the dispatch was sent out to github was

00:53:27,119 --> 00:53:32,000
successful and then

00:53:28,720 --> 00:53:33,920
return um return the results to

00:53:32,000 --> 00:53:36,800
you know from that task that signifies

00:53:33,920 --> 00:53:38,800
that okay this task was successful

00:53:36,800 --> 00:53:39,839
or this task is field we want to you

00:53:38,800 --> 00:53:41,920
know show that

00:53:39,839 --> 00:53:44,160
that means the pipeline you could also

00:53:41,920 --> 00:53:46,240
decide to do it and you continue to

00:53:44,160 --> 00:53:47,440
if you continue to as well if you think

00:53:46,240 --> 00:53:49,280
it's not that simple

00:53:47,440 --> 00:53:49,620
it's not really essential to your

00:53:49,280 --> 00:53:52,319
question

00:53:49,620 --> 00:53:56,950
[Music]

00:53:52,319 --> 00:54:04,809
so um i'm going to check on the

00:53:56,950 --> 00:54:04,809
[Music]

00:54:07,490 --> 00:54:11,839
[Music]

00:54:08,839 --> 00:54:11,839
um

00:54:15,520 --> 00:54:18,720
some information to the context

00:54:18,880 --> 00:54:26,960
so this is the execution status

00:54:24,079 --> 00:54:27,760
um it's it's terminally field and then

00:54:26,960 --> 00:54:30,400
i'm going to

00:54:27,760 --> 00:54:33,280
also see um i'm also going to password

00:54:30,400 --> 00:54:33,280
for the context

00:54:35,040 --> 00:54:39,839
to call this um

00:54:43,760 --> 00:54:57,440
so let's call this um

00:54:52,400 --> 00:54:57,440
let's call this um this key dispatch

00:54:57,680 --> 00:55:02,240
or just possible the response copy

00:55:00,960 --> 00:55:03,680
but the problem with that is that the

00:55:02,240 --> 00:55:04,079
reference body actually returned by that

00:55:03,680 --> 00:55:06,480
hp

00:55:04,079 --> 00:55:07,119
client is an input stream so you cannot

00:55:06,480 --> 00:55:09,599
just send

00:55:07,119 --> 00:55:11,359
the dots just you know pass through the

00:55:09,599 --> 00:55:12,799
motion and then it's all be good

00:55:11,359 --> 00:55:14,559
so i'm going to need to read from that

00:55:12,799 --> 00:55:16,480
stream and then close the stream

00:55:14,559 --> 00:55:17,920
apparently

00:55:16,480 --> 00:55:20,960
so i'll just leave it for that for the

00:55:17,920 --> 00:55:35,839
moment while i try to

00:55:20,960 --> 00:55:35,839
yeah stop inserting is

00:55:36,720 --> 00:55:40,079
i'm going to actually need to build this

00:55:41,920 --> 00:55:46,640
so so if it's not an error that means

00:55:44,480 --> 00:55:49,280
it's successful you also want to

00:55:46,640 --> 00:55:50,799
return a suffix central state and see

00:55:49,280 --> 00:55:52,079
that when this task succeeded

00:55:50,799 --> 00:55:53,520
so what for the you know for the

00:55:52,079 --> 00:55:54,240
execution statuses are available you

00:55:53,520 --> 00:55:56,720
could check

00:55:54,240 --> 00:55:58,240
you can check this so you can you know

00:55:56,720 --> 00:55:59,760
based on this and then you decide on you

00:55:58,240 --> 00:56:01,040
know what kind of

00:55:59,760 --> 00:56:03,040
what kind of you know execution state

00:56:01,040 --> 00:56:04,400
you want to write on if you you know if

00:56:03,040 --> 00:56:05,839
you'd like to continue if you'd like to

00:56:04,400 --> 00:56:09,359
do your hand if you'd like to

00:56:05,839 --> 00:56:13,200
suspend the pipeline or any other thing

00:56:09,359 --> 00:56:13,200
i'm not sure about you know

00:56:14,160 --> 00:56:16,880
if most of the you know has been

00:56:15,760 --> 00:56:18,319
implemented but um

00:56:16,880 --> 00:56:21,680
[Music]

00:56:18,319 --> 00:56:24,160
yeah so i'm going to return a successful

00:56:21,680 --> 00:56:24,160
state

00:56:24,510 --> 00:56:31,839
[Music]

00:56:26,160 --> 00:56:31,839
i'll call it

00:56:41,040 --> 00:56:48,640
succeeded i'm also going to

00:56:45,599 --> 00:56:48,640
context um

00:56:57,280 --> 00:57:01,440
so well i'm still going to do it from

00:56:59,040 --> 00:57:04,400
the bottom i'm just giving them like um

00:57:01,440 --> 00:57:04,400
or in the interior

00:57:07,520 --> 00:57:11,839
so if you check we can see that the

00:57:10,079 --> 00:57:12,799
response body is actually an input

00:57:11,839 --> 00:57:14,640
string

00:57:12,799 --> 00:57:16,720
so i'm going to read that and then you

00:57:14,640 --> 00:57:18,370
know save somewhere

00:57:16,720 --> 00:57:21,489
i'm going to

00:57:18,370 --> 00:57:21,489
[Music]

00:57:22,319 --> 00:57:26,640
obviously body so i think it's the

00:57:25,760 --> 00:57:28,079
responsibility

00:57:26,640 --> 00:57:29,920
it's going to be my responsibility to

00:57:28,079 --> 00:57:30,799
close that body and also to

00:57:29,920 --> 00:57:32,640
because i'll be using the input

00:57:30,799 --> 00:57:34,640
generator i also have to close the input

00:57:32,640 --> 00:57:36,880
you know

00:57:34,640 --> 00:57:41,839
equal stream that i'm using as well i'm

00:57:36,880 --> 00:57:41,839
going to call this um

00:57:58,400 --> 00:58:09,839
yep so for this i'm going to need to use

00:58:01,599 --> 00:58:09,839
another generator

00:58:18,640 --> 00:58:22,240
yeah which takes a question and also you

00:58:21,760 --> 00:58:23,680
know

00:58:22,240 --> 00:58:26,160
because i don't know what that's like

00:58:23,680 --> 00:58:28,400
encoding i'm just going to leave that's

00:58:26,160 --> 00:58:30,960
what it is

00:58:28,400 --> 00:58:31,920
and i'm going to read um using the

00:58:30,960 --> 00:58:37,839
studio to read

00:58:31,920 --> 00:58:37,839
from 3d body

00:58:45,520 --> 00:58:48,319
so i think

00:58:49,119 --> 00:59:05,839
yep i have to close it myself and um

00:59:10,480 --> 00:59:14,640
exceptions especially as extractors if

00:59:13,119 --> 00:59:18,079
you if for example if you know

00:59:14,640 --> 00:59:20,319
if if for example the your body was done

00:59:18,079 --> 00:59:21,119
in the middle of the request or some

00:59:20,319 --> 00:59:23,920
other you know

00:59:21,119 --> 00:59:23,920
asia happened

00:59:27,520 --> 00:59:33,280
i should probably close the industry

00:59:29,200 --> 00:59:36,720
without the focus on the body

00:59:33,280 --> 00:59:36,720
i'm not sure the other importance to

00:59:39,200 --> 00:59:42,240
then i should

00:59:42,880 --> 00:59:47,839
change the signature

00:59:52,079 --> 01:00:01,839
cool used up here

01:00:09,760 --> 01:00:14,720
i also need to use dot exercise

01:00:12,960 --> 01:00:16,720
i should probably take this out of this

01:00:14,720 --> 01:00:29,839
separate method on this one

01:00:16,720 --> 01:00:29,839
i'm going to call this um

01:00:39,040 --> 01:00:43,839
i need to need the left face it's soft

01:00:54,880 --> 01:00:58,720
itself and um i think that should be

01:00:56,960 --> 01:01:01,119
found that's required and let's return

01:00:58,720 --> 01:01:04,400
the task results

01:01:01,119 --> 01:01:05,680
so basically task results you know tells

01:01:04,400 --> 01:01:08,799
back time that's okay

01:01:05,680 --> 01:01:12,880
this task succeeded i should you know

01:01:08,799 --> 01:01:12,880
proceed or i can decide whatever it is

01:01:13,920 --> 01:01:18,160
so every task has to ask the task

01:01:15,680 --> 01:01:18,160
results

01:01:19,359 --> 01:01:22,400
that's task results

01:01:28,160 --> 01:01:39,839
as well

01:01:50,839 --> 01:01:53,839
next

01:01:55,920 --> 01:01:59,280
if you have questions about addressing

01:01:57,359 --> 01:01:59,920
you could also have them into the chat

01:01:59,280 --> 01:02:04,720
session

01:01:59,920 --> 01:02:07,839
so i can reply

01:02:04,720 --> 01:02:07,839
so how this has

01:02:20,319 --> 01:02:22,960
results

01:02:24,720 --> 01:02:28,079
just do a copy of this here

01:02:32,839 --> 01:02:37,839
cool

01:02:35,119 --> 01:02:37,839
then click this

01:02:38,480 --> 01:02:41,680
and just use this

01:02:44,000 --> 01:02:49,839
okay so i'm going to um

01:02:51,760 --> 01:02:55,119
it's succeeded

01:02:55,359 --> 01:03:03,839
to reach the body

01:03:06,880 --> 01:03:13,589
let's copy this and just change this

01:03:10,510 --> 01:03:13,589
[Music]

01:03:14,839 --> 01:03:17,839
status

01:03:37,280 --> 01:03:45,839
i'm going to have some control on this

01:04:15,760 --> 01:04:20,640
and also i'll now be working on the q8

01:04:18,400 --> 01:04:20,640
but

01:04:21,119 --> 01:04:24,240
because of them i would not stop as well

01:04:22,960 --> 01:04:26,000
on all of that i'm just trying to

01:04:24,240 --> 01:04:28,000
explain some parts of this

01:04:26,000 --> 01:04:29,200
yep so i think we are good on the occur

01:04:28,000 --> 01:04:34,720
side of things

01:04:29,200 --> 01:04:34,720
if we try to do a good build it should

01:04:38,839 --> 01:04:41,839
work

01:04:45,040 --> 01:04:48,349
[Music]

01:04:52,839 --> 01:04:55,839
oh

01:05:20,839 --> 01:05:23,839
here

01:05:24,960 --> 01:05:28,480
let's see let's build tasker

01:05:34,839 --> 01:05:37,839
doors

01:05:41,839 --> 01:05:51,839
aspects of smoke

01:05:57,280 --> 01:06:02,799
uh see execution

01:06:03,350 --> 01:06:06,469
[Music]

01:06:09,560 --> 01:06:15,550
[Music]

01:06:16,839 --> 01:06:19,839
itself

01:06:38,160 --> 01:06:47,839
let's go direct on the task graph

01:07:05,119 --> 01:07:15,839
three minutes

01:07:18,000 --> 01:07:21,839
so i'm going to try to explain the deck

01:07:19,760 --> 01:07:23,440
side of the deck paths and before we

01:07:21,839 --> 01:07:26,079
come out to fix this

01:07:23,440 --> 01:07:26,960
um so in the deck ui um you're going to

01:07:26,079 --> 01:07:29,039
have um

01:07:26,960 --> 01:07:30,400
basically some code around you know

01:07:29,039 --> 01:07:32,400
loading the the

01:07:30,400 --> 01:07:33,760
the plugin itself but you know the

01:07:32,400 --> 01:07:35,359
components that i'll be responsible for

01:07:33,760 --> 01:07:37,200
configuring um

01:07:35,359 --> 01:07:38,480
stage configuration i'll also display

01:07:37,200 --> 01:07:40,480
some outputs

01:07:38,480 --> 01:07:41,520
on the stage um so this this is a

01:07:40,480 --> 01:07:43,039
dispatch stage

01:07:41,520 --> 01:07:44,720
in dispatch stage and we have some

01:07:43,039 --> 01:07:46,880
information on that you know that's all

01:07:44,720 --> 01:07:46,880
right

01:07:55,599 --> 01:08:00,160
yep so there's all these these are the

01:07:58,000 --> 01:08:02,720
adverse things you're configuring

01:08:00,160 --> 01:08:05,200
each of those stages um so i'll just go

01:08:02,720 --> 01:08:05,200
back to

01:08:08,160 --> 01:08:11,280
so this is the dispatch stage um you

01:08:10,240 --> 01:08:13,119
have the label what

01:08:11,280 --> 01:08:14,960
it shows up in the you know this kind of

01:08:13,119 --> 01:08:16,960
description for the stage

01:08:14,960 --> 01:08:18,480
then the key so what's this is actually

01:08:16,960 --> 01:08:20,560
very important in that it determines

01:08:18,480 --> 01:08:23,679
what actual task for me you know what

01:08:20,560 --> 01:08:24,159
your task will be wrong for this actual

01:08:23,679 --> 01:08:26,000
stage

01:08:24,159 --> 01:08:27,279
will be run for this for this for this

01:08:26,000 --> 01:08:29,359
plugin

01:08:27,279 --> 01:08:30,640
so um where that information is derived

01:08:29,359 --> 01:08:35,440
from is from the

01:08:30,640 --> 01:08:39,040
um get get type here it gets um

01:08:35,440 --> 01:08:41,120
get stitch type here

01:08:39,040 --> 01:08:43,120
so but that basically takes the custom

01:08:41,120 --> 01:08:45,520
and trips through trips away

01:08:43,120 --> 01:08:46,560
you know um say for example if i have um

01:08:45,520 --> 01:08:47,920
you know

01:08:46,560 --> 01:08:49,679
for example if there's a class called

01:08:47,920 --> 01:08:52,799
you know my passive stage the

01:08:49,679 --> 01:08:55,279
the type would be my fancy and

01:08:52,799 --> 01:08:56,880
it's not typed yet without you know that

01:08:55,279 --> 01:08:59,679
that you actually have to specify it so

01:08:56,880 --> 01:09:00,689
because i've named that um you know um

01:08:59,679 --> 01:09:03,199
and then that

01:09:00,689 --> 01:09:05,440
[Music]

01:09:03,199 --> 01:09:08,640
dispatch stage i'll name this i'll

01:09:05,440 --> 01:09:08,640
return this to dispatch

01:09:10,239 --> 01:09:13,279
so that's basically how that's you know

01:09:11,920 --> 01:09:14,719
that's the

01:09:13,279 --> 01:09:21,839
station construction is typed so you

01:09:14,719 --> 01:09:21,839
know the occur code itself

01:09:25,180 --> 01:09:31,979
[Music]

01:09:55,170 --> 01:09:57,760
[Music]

01:09:56,320 --> 01:10:03,840
i think it should be okay if you try to

01:09:57,760 --> 01:10:03,840
reveal this we should be good

01:10:05,679 --> 01:10:09,440
so what this would basically do is to go

01:10:08,080 --> 01:10:10,640
to each of those you know stop modules

01:10:09,440 --> 01:10:14,719
within the project

01:10:10,640 --> 01:10:16,400
and then try to build um a jar or

01:10:14,719 --> 01:10:17,840
basically beauty projects you know zip

01:10:16,400 --> 01:10:19,040
it and then you know for each of those

01:10:17,840 --> 01:10:20,719
individuals in the

01:10:19,040 --> 01:10:22,480
plug-in for each of the services and

01:10:20,719 --> 01:10:22,800
then take all of those and then you have

01:10:22,480 --> 01:10:25,280
some

01:10:22,800 --> 01:10:26,800
some some some metadata to to you know

01:10:25,280 --> 01:10:29,040
to that and then that's

01:10:26,800 --> 01:10:31,840
actually what it would be in the plugin

01:10:29,040 --> 01:10:31,840
so um

01:10:37,520 --> 01:10:40,560
yeah yeah

01:10:41,679 --> 01:10:45,920
i think we specified uh we had that

01:10:48,239 --> 01:10:59,600
let's have the authorization headers

01:10:50,880 --> 01:11:02,320
another thing so as well

01:10:59,600 --> 01:11:02,320
and um

01:11:06,640 --> 01:11:08,960
there's

01:11:10,840 --> 01:11:13,840
asia

01:11:15,280 --> 01:11:21,040
you can use stick that from the dispatch

01:11:18,480 --> 01:11:21,040
config

01:11:24,960 --> 01:11:29,760
um yeah so if you

01:11:28,159 --> 01:11:31,520
should review this this should all be

01:11:29,760 --> 01:11:34,640
good and we have a problem

01:11:31,520 --> 01:11:35,920
so i'll try to um you know unzip the the

01:11:34,640 --> 01:11:40,000
os which i can explain through some

01:11:35,920 --> 01:11:41,760
parts of them

01:11:40,000 --> 01:11:43,840
don't know if you have questions um

01:11:41,760 --> 01:11:45,040
please let me know in the comments um

01:11:43,840 --> 01:11:47,679
because i think it's just such a

01:11:45,040 --> 01:11:55,840
restaurant and also let me share the

01:11:47,679 --> 01:11:55,840
other links i have here

01:12:01,920 --> 01:12:07,120
over here so pretty much the same way

01:12:05,920 --> 01:12:08,800
you'd you know you'd do

01:12:07,120 --> 01:12:10,560
and you're plugging developments for you

01:12:08,800 --> 01:12:10,800
know for occur it's the same way you

01:12:10,560 --> 01:12:13,760
would

01:12:10,800 --> 01:12:14,320
do it for well generally the same way

01:12:13,760 --> 01:12:15,840
you

01:12:14,320 --> 01:12:18,080
you do it for other speaker services as

01:12:15,840 --> 01:12:18,880
well and um you know not every speaker

01:12:18,080 --> 01:12:20,239
service would

01:12:18,880 --> 01:12:22,480
always have an extension point for all

01:12:20,239 --> 01:12:23,440
you have if you require and you know

01:12:22,480 --> 01:12:24,719
if you've got some functionalities

01:12:23,440 --> 01:12:26,080
that's not really addressed by you know

01:12:24,719 --> 01:12:27,520
by extension point somewhere

01:12:26,080 --> 01:12:29,600
you could basically request them you

01:12:27,520 --> 01:12:30,719
know create an address code you don't

01:12:29,600 --> 01:12:31,040
know don't think you do you know you've

01:12:30,719 --> 01:12:33,360
got

01:12:31,040 --> 01:12:34,560
to create rfc you can basically create

01:12:33,360 --> 01:12:38,159
an issue for it

01:12:34,560 --> 01:12:40,880
to have that address if you also like to

01:12:38,159 --> 01:12:40,880
contribute to

01:12:41,120 --> 01:12:51,840
it's also welcome

01:12:53,360 --> 01:12:56,480
so let me have this

01:12:57,920 --> 01:13:05,840
let's just mix softly

01:13:19,040 --> 01:13:22,320
oh another differentiation

01:13:28,880 --> 01:13:33,840
let's try to reload this and then

01:13:30,840 --> 01:13:33,840
checklist

01:13:39,480 --> 01:13:44,239
[Music]

01:13:42,400 --> 01:13:46,000
so the reason um you know i have this

01:13:44,239 --> 01:13:47,760
name that's dead sea it's because i

01:13:46,000 --> 01:13:48,960
definitely i definitely have on stage

01:13:47,760 --> 01:13:49,920
changes i have made changes in the

01:13:48,960 --> 01:13:51,360
repository that's it you know they

01:13:49,920 --> 01:13:52,960
haven't had any comments

01:13:51,360 --> 01:13:56,159
so um you know that is why you know

01:13:52,960 --> 01:13:58,960
that's you know in regards

01:13:56,159 --> 01:14:00,640
let's be regarded as dexy so um i'll try

01:13:58,960 --> 01:14:15,840
to see if i can copy this somewhere

01:14:00,640 --> 01:14:15,840
underneath it

01:14:27,040 --> 01:14:29,840
okay that's it

01:14:32,000 --> 01:14:35,199
so in this you can see that there's a

01:14:33,040 --> 01:14:38,320
deck plugin i'm going to extract this

01:14:35,199 --> 01:14:38,880
yeah so the deployment there's an entry

01:14:38,320 --> 01:14:40,800
point for

01:14:38,880 --> 01:14:42,080
deck to load start plugging the upgrades

01:14:40,800 --> 01:14:43,760
in it's basically you

01:14:42,080 --> 01:14:45,040
load this and then run this monthly

01:14:43,760 --> 01:14:46,239
components that's what you know help you

01:14:45,040 --> 01:14:47,679
constitute the configuration and then

01:14:46,239 --> 01:14:50,800
you return some

01:14:47,679 --> 01:14:51,920
photo data so as well then if you also

01:14:50,800 --> 01:14:54,320
check here too

01:14:51,920 --> 01:14:56,000
this also contains some of the classes

01:14:54,320 --> 01:14:57,360
that i

01:14:56,000 --> 01:14:58,960
also if i have some dependencies that

01:14:57,360 --> 01:15:00,320
are not already part of you know occur

01:14:58,960 --> 01:15:01,120
because if i decide to you know have

01:15:00,320 --> 01:15:03,199
some custom

01:15:01,120 --> 01:15:04,719
retrofit lines that that's how the

01:15:03,199 --> 01:15:06,159
bundle depends on you know what my

01:15:04,719 --> 01:15:11,840
critical correlation is

01:15:06,159 --> 01:15:11,840
i'm going to extract here

01:15:14,170 --> 01:15:18,029
[Music]

01:15:20,950 --> 01:15:25,760
[Music]

01:15:24,080 --> 01:15:27,199
yeah so pretty much the same you know

01:15:25,760 --> 01:15:28,800
the information i specified here

01:15:27,199 --> 01:15:30,220
is what is added as you know the plugin

01:15:28,800 --> 01:15:31,840
manifest that would be

01:15:30,220 --> 01:15:33,760
[Music]

01:15:31,840 --> 01:15:35,920
that would be you know in the plug-in

01:15:33,760 --> 01:15:37,040
manifest i'm sure that

01:15:35,920 --> 01:15:38,719
more sessions will come up that will

01:15:37,040 --> 01:15:39,520
help you take it through you know how to

01:15:38,719 --> 01:15:41,440
debunk your

01:15:39,520 --> 01:15:43,040
your some of your speaker plugins and

01:15:41,440 --> 01:15:44,080
you know how you you know to kind of go

01:15:43,040 --> 01:15:45,920
around you know um you know

01:15:44,080 --> 01:15:47,600
finding issues no running just plugging

01:15:45,920 --> 01:15:50,640
speeds because services and you know

01:15:47,600 --> 01:15:52,480
you can choose like um to you know

01:15:50,640 --> 01:15:54,159
replace um your your local you know

01:15:52,480 --> 01:15:57,120
speaker service without the remotes you

01:15:54,159 --> 01:15:57,120
know chris costa

01:15:57,920 --> 01:16:04,480
yep so um what else supposed

01:16:01,440 --> 01:16:04,960
to recap i think we spoke about you know

01:16:04,480 --> 01:16:06,560
um

01:16:04,960 --> 01:16:08,560
spoke about each of those player

01:16:06,560 --> 01:16:10,239
services i wanted to do

01:16:08,560 --> 01:16:11,679
we spoke about you know specifically

01:16:10,239 --> 01:16:13,360
that you know those

01:16:11,679 --> 01:16:14,640
um you know service or construction um

01:16:13,360 --> 01:16:15,520
more like peppermint construction and

01:16:14,640 --> 01:16:17,199
spinnaker

01:16:15,520 --> 01:16:18,719
and then if you want to have a custom

01:16:17,199 --> 01:16:21,280
stage a custom situation for that you

01:16:18,719 --> 01:16:21,280
know

01:16:22,000 --> 01:16:25,920
you know extending okay that means that

01:16:24,560 --> 01:16:27,440
you don't write a plugin for occur

01:16:25,920 --> 01:16:28,719
that's a dependency rocker

01:16:27,440 --> 01:16:30,880
and that means that you don't have to

01:16:28,719 --> 01:16:33,040
use um two apis the hacker api

01:16:30,880 --> 01:16:34,640
and then you know the copy pa because

01:16:33,040 --> 01:16:36,239
you also need to use some you know

01:16:34,640 --> 01:16:38,080
some probably an sdk that you know

01:16:36,239 --> 01:16:39,600
that's that will be as part of poker

01:16:38,080 --> 01:16:41,440
or maybe you want to communicate with

01:16:39,600 --> 01:16:43,360
you know internally

01:16:41,440 --> 01:16:44,719
also um as we spoke about you know the

01:16:43,360 --> 01:16:46,560
plugin configuration annotation it

01:16:44,719 --> 01:16:48,719
allows us to you know

01:16:46,560 --> 01:16:50,000
fetch configuration from you know for sp

01:16:48,719 --> 01:16:51,280
you know for our plugins to use

01:16:50,000 --> 01:16:52,880
from you know from the back end i also

01:16:51,280 --> 01:16:54,719
spoke about you know being able to map

01:16:52,880 --> 01:16:56,800
stages to uh you know to

01:16:54,719 --> 01:16:59,440
to this like to things like you know um

01:16:56,800 --> 01:17:01,280
to be able to map you know front end um

01:16:59,440 --> 01:17:03,840
deck configuration as part of the stage

01:17:01,280 --> 01:17:03,840
that is here

01:17:06,880 --> 01:17:10,239
as part of the stage that is here so

01:17:08,719 --> 01:17:11,679
that means that i can easily go to the

01:17:10,239 --> 01:17:12,719
front end and then configure some things

01:17:11,679 --> 01:17:14,719
are achieved here

01:17:12,719 --> 01:17:17,040
and then use that lay down i also spoke

01:17:14,719 --> 01:17:18,560
about um you know um

01:17:17,040 --> 01:17:20,239
you know the i think i spoke about the

01:17:18,560 --> 01:17:20,719
extension annotation but you know also

01:17:20,239 --> 01:17:22,800
you know

01:17:20,719 --> 01:17:23,840
says okay this this big api for the

01:17:22,800 --> 01:17:27,679
extension

01:17:23,840 --> 01:17:29,679
and um i spoke about you know the

01:17:27,679 --> 01:17:30,080
execution details for each task you know

01:17:29,679 --> 01:17:31,760
and

01:17:30,080 --> 01:17:33,440
execution status for each task and then

01:17:31,760 --> 01:17:35,199
how you specify that your task has

01:17:33,440 --> 01:17:38,320
succeeded in the arts field

01:17:35,199 --> 01:17:39,360
i think i spoke about you know um our

01:17:38,320 --> 01:17:41,360
you know speakers

01:17:39,360 --> 01:17:43,360
messages are composed um you know using

01:17:41,360 --> 01:17:45,040
the stage definition builder

01:17:43,360 --> 01:17:48,159
which consists of youtube you know

01:17:45,040 --> 01:17:51,440
consistently you know speakers videos

01:17:48,159 --> 01:17:53,199
stages um so i think um

01:17:51,440 --> 01:17:54,560
i think i've i don't know if you have

01:17:53,199 --> 01:17:55,679
additional questions that you would like

01:17:54,560 --> 01:17:57,280
me to answer

01:17:55,679 --> 01:18:13,840
somebody supposed to return the chats i

01:17:57,280 --> 01:18:13,840
have to read it just like whichever ones

01:18:16,320 --> 01:18:19,760
i find difficult to share next but um

01:18:19,120 --> 01:18:22,400
basically

01:18:19,760 --> 01:18:24,080
uh if you go to the speaker um you know

01:18:22,400 --> 01:18:25,199
plug in you know creators you know page

01:18:24,080 --> 01:18:26,960
you get some

01:18:25,199 --> 01:18:28,719
you get services or you can get started

01:18:26,960 --> 01:18:31,120
apps into to build um your

01:18:28,719 --> 01:18:32,000
speaker again so um for now we basically

01:18:31,120 --> 01:18:34,640
worked on the

01:18:32,000 --> 01:18:36,320
speaker plan to so you know to set up

01:18:34,640 --> 01:18:38,880
the little dispatches i would have

01:18:36,320 --> 01:18:40,000
loved to demo this but um i don't really

01:18:38,880 --> 01:18:42,080
have that much resources

01:18:40,000 --> 01:18:43,920
i think i will make file but if i were

01:18:42,080 --> 01:18:47,199
to you know load this the whole

01:18:43,920 --> 01:18:48,880
something would go out so um basically

01:18:47,199 --> 01:18:49,840
the repositories on github if you like

01:18:48,880 --> 01:18:51,840
to you know check

01:18:49,840 --> 01:18:53,040
check this out with things um it's there

01:18:51,840 --> 01:18:55,520
it's free it's all good

01:18:53,040 --> 01:18:56,480
and um you know it's you could also use

01:18:55,520 --> 01:18:58,080
that to you know

01:18:56,480 --> 01:18:59,920
extend that time to go from there to

01:18:58,080 --> 01:19:01,600
build your own you know your own program

01:18:59,920 --> 01:19:03,120
if you feel that you know what we want

01:19:01,600 --> 01:19:06,239
to extend is not it's not um

01:19:03,120 --> 01:19:08,159
it's not okay it's ego or it's echo but

01:19:06,239 --> 01:19:09,679
it's other service feel free

01:19:08,159 --> 01:19:11,040
i mean yeah i always work on you don't

01:19:09,679 --> 01:19:12,080
always spend even more examples on the

01:19:11,040 --> 01:19:16,080
plug-in

01:19:12,080 --> 01:19:17,679
repository that you want to go there

01:19:16,080 --> 01:19:19,520
so um you know i think i think that's

01:19:17,679 --> 01:19:21,440
that's that's mostly i really appreciate

01:19:19,520 --> 01:19:23,199
you know you guys taking

01:19:21,440 --> 01:19:24,800
you know joining this session to get you

01:19:23,199 --> 01:19:25,360
know so we could you know get started

01:19:24,800 --> 01:19:27,600
with the

01:19:25,360 --> 01:19:28,719
 developments on this on this

01:19:27,600 --> 01:19:30,000
chat um you know

01:19:28,719 --> 01:19:31,440
i don't know if you have additional

01:19:30,000 --> 01:19:32,080
questions but you know that's i think

01:19:31,440 --> 01:19:37,840
that's mostly

01:19:32,080 --> 01:19:37,840
for me

01:19:44,880 --> 01:19:51,840
so i'm going to make some

01:19:48,159 --> 01:19:51,840
i'll show you more questions

01:19:59,280 --> 01:20:05,840
let's get some ways for questions

01:20:15,600 --> 01:20:20,239
so um so this this session was mostly

01:20:18,960 --> 01:20:23,679
about your um

01:20:20,239 --> 01:20:25,040
plugin development it's pinnacle and um

01:20:23,679 --> 01:20:27,199
you know we went through those you know

01:20:25,040 --> 01:20:28,560
those product concepts uh you know with

01:20:27,199 --> 01:20:30,080
you know with certain developments you

01:20:28,560 --> 01:20:30,639
know the concept of you know cost label

01:20:30,080 --> 01:20:32,719
stages

01:20:30,639 --> 01:20:34,800
travel stages after being able to

01:20:32,719 --> 01:20:37,120
specify back offs and then timeouts

01:20:34,800 --> 01:20:39,280
that you know and then also also being

01:20:37,120 --> 01:20:40,800
able to specify tasks after a stage

01:20:39,280 --> 01:20:42,480
the first stage that enables you to have

01:20:40,800 --> 01:20:43,920
that kind of narrative with you know

01:20:42,480 --> 01:20:47,040
developing you know specifically

01:20:43,920 --> 01:20:47,600
by stages um then we also spoke about

01:20:47,040 --> 01:20:49,360
you know

01:20:47,600 --> 01:20:51,199
the extensibility about spinnaker in

01:20:49,360 --> 01:20:51,760
that you can decide to extend any

01:20:51,199 --> 01:20:54,560
speakers

01:20:51,760 --> 01:20:56,080
to suit your business requirements if

01:20:54,560 --> 01:20:57,440
you have some functionality that you'd

01:20:56,080 --> 01:20:57,840
like to you know you know how to

01:20:57,440 --> 01:21:00,239
spinning

01:20:57,840 --> 01:21:01,679
but you feel that you know not not

01:21:00,239 --> 01:21:02,400
definitely not your community but you

01:21:01,679 --> 01:21:05,280
know

01:21:02,400 --> 01:21:06,400
you know it's probably not going to be

01:21:05,280 --> 01:21:07,600
you know that's um

01:21:06,400 --> 01:21:08,719
something that is going to be required

01:21:07,600 --> 01:21:10,000
by your community you could set your

01:21:08,719 --> 01:21:11,679
right as a plugin

01:21:10,000 --> 01:21:12,960
and then you should have you know plug

01:21:11,679 --> 01:21:13,280
into the committee and then you know you

01:21:12,960 --> 01:21:14,560
can

01:21:13,280 --> 01:21:16,400
you know how it gets you know used

01:21:14,560 --> 01:21:17,760
uploading until short and you know it's

01:21:16,400 --> 01:21:19,840
all good

01:21:17,760 --> 01:21:21,679
so thanks again for joining my session

01:21:19,840 --> 01:21:22,719
you know i really appreciate you know

01:21:21,679 --> 01:21:25,520
your presence

01:21:22,719 --> 01:21:25,520

YouTube URL: https://www.youtube.com/watch?v=Okh_gn7ktiE


