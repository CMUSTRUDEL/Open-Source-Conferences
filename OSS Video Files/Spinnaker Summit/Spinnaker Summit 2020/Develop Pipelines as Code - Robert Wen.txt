Title: Develop Pipelines as Code - Robert Wen
Publication date: 2021-01-13
Playlist: Spinnaker Summit 2020
Description: 
	Creating pipelines can be done via the Spinnaker UI or templates. Additionally, Armoryâ€™s Pipelines as Code feature provides a way to specify pipeline definitions in source code repos such as GitHub. This talk highlights why we use pipelines as code through practical use cases covering reusability, security and change control. Many micro-services are deploying across multiple AWS environments, from dev, staging, RC to production. Use of shareable pipeline modules allows easier re-use for common stages such as bake, deploy manifest, docker registry triggers, find artifacts from pipelines and run cron jobs. With pipelines in github as code, we can keep track change history for audit purpose. This is very critical to meet security requirements. Enforce pipeline change policies and permissions based on LDAP groups.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:11,040 --> 00:00:15,200
hello

00:00:12,080 --> 00:00:18,960
my name is robert wen from

00:00:15,200 --> 00:00:21,680
salesforce thank you for attending

00:00:18,960 --> 00:00:25,439
today's presentation

00:00:21,680 --> 00:00:29,039
in this presentation i'll be

00:00:25,439 --> 00:00:32,320
sharing with you our team's

00:00:29,039 --> 00:00:35,360
use cases for developing

00:00:32,320 --> 00:00:38,239
pipelines as code

00:00:35,360 --> 00:00:38,239
let's get started

00:00:38,640 --> 00:00:47,039
in this presentation for pipelines code

00:00:43,200 --> 00:00:50,800
i'll be using quite a few

00:00:47,039 --> 00:00:54,719
sample modules and sample source code

00:00:50,800 --> 00:00:58,160
to illustrate our use cases

00:00:54,719 --> 00:01:00,800
and how we develop shareable modules for

00:00:58,160 --> 00:01:00,800
pipelines

00:01:03,680 --> 00:01:09,920
first a little bit about myself

00:01:06,880 --> 00:01:14,159
i'm part of the einstein

00:01:09,920 --> 00:01:16,159
production engineering team

00:01:14,159 --> 00:01:18,560
we are responsible for this we are

00:01:16,159 --> 00:01:22,720
responsible for

00:01:18,560 --> 00:01:27,840
ci cd pipelines devops

00:01:22,720 --> 00:01:27,840
and developer productivity

00:01:29,119 --> 00:01:34,560
here's a little bit background about

00:01:31,520 --> 00:01:34,560
this presentation

00:01:34,960 --> 00:01:41,439
early in the year we adopted

00:01:38,240 --> 00:01:45,680
spinnaker as a deployment

00:01:41,439 --> 00:01:49,040
orchestration tool there are quite a few

00:01:45,680 --> 00:01:53,920
key considerations for how to

00:01:49,040 --> 00:01:56,399
implement and maintain pipelines

00:01:53,920 --> 00:01:59,040
including

00:01:56,399 --> 00:02:01,680
multiple environments from development

00:01:59,040 --> 00:02:05,280
staging to production

00:02:01,680 --> 00:02:08,160
we have pipeline stages

00:02:05,280 --> 00:02:09,200
for environment which generally speaking

00:02:08,160 --> 00:02:13,039
are quite similar

00:02:09,200 --> 00:02:13,039
across application services

00:02:13,040 --> 00:02:19,680
we need to be able to use

00:02:16,560 --> 00:02:24,400
pipeline modules uh with

00:02:19,680 --> 00:02:27,440
as for for reusability purpose

00:02:24,400 --> 00:02:28,239
as a result we can develop develop new

00:02:27,440 --> 00:02:31,599
modules

00:02:28,239 --> 00:02:34,400
or new pipelines for applications

00:02:31,599 --> 00:02:34,400
more efficiently

00:02:34,720 --> 00:02:39,280
another key point to address is we must

00:02:37,599 --> 00:02:42,720
enable

00:02:39,280 --> 00:02:42,720
pipeline change control

00:02:43,599 --> 00:02:50,560
this sponsoring is about to restrict

00:02:47,360 --> 00:02:53,760
who can submit source code change

00:02:50,560 --> 00:02:55,599
who can review pull requests who can

00:02:53,760 --> 00:03:00,640
apply

00:02:55,599 --> 00:03:05,200
source code change onto pipelines

00:03:00,640 --> 00:03:09,120
given all these considerations

00:03:05,200 --> 00:03:12,159
we enabled armory's pipeline scope

00:03:09,120 --> 00:03:18,159
feature this feature

00:03:12,159 --> 00:03:21,280
help us meet these requirements

00:03:18,159 --> 00:03:25,280
here is a high-level descriptions of

00:03:21,280 --> 00:03:27,200
pipelines code as a service

00:03:25,280 --> 00:03:28,560
so the background service is called

00:03:27,200 --> 00:03:31,840
denghi

00:03:28,560 --> 00:03:34,799
is operating as one of the microservices

00:03:31,840 --> 00:03:36,959
operating within the spinnaker

00:03:34,799 --> 00:03:40,720
installation

00:03:36,959 --> 00:03:45,120
is listening to code change in

00:03:40,720 --> 00:03:49,519
github once you detect new change

00:03:45,120 --> 00:03:52,879
and it does source code change

00:03:49,519 --> 00:03:55,920
checking once checking is done

00:03:52,879 --> 00:03:58,480
you apply the change onto

00:03:55,920 --> 00:03:58,480
pipelines

00:03:59,280 --> 00:04:06,000
to prepare for the

00:04:02,480 --> 00:04:10,480
pipeline school there are few phases

00:04:06,000 --> 00:04:14,239
involved setup preparation construction

00:04:10,480 --> 00:04:16,479
and expansion

00:04:14,239 --> 00:04:18,479
set up mainly involved just enable the

00:04:16,479 --> 00:04:20,160
feature itself the pipeline as code

00:04:18,479 --> 00:04:22,400
feature in spinnaker

00:04:20,160 --> 00:04:24,000
and restrict access to a designated

00:04:22,400 --> 00:04:27,280
ripple

00:04:24,000 --> 00:04:30,960
for managing the

00:04:27,280 --> 00:04:34,080
pipeline code in github

00:04:30,960 --> 00:04:35,520
during preparation phase we select pilot

00:04:34,080 --> 00:04:38,400
applications

00:04:35,520 --> 00:04:39,680
for pipeline code implementation we

00:04:38,400 --> 00:04:44,400
define

00:04:39,680 --> 00:04:48,560
pipelines using the spinnaker ui

00:04:44,400 --> 00:04:51,520
then we move on to construction

00:04:48,560 --> 00:04:53,040
during this phase we develop develop

00:04:51,520 --> 00:04:58,560
pipeline code

00:04:53,040 --> 00:04:58,560
based on the pilot applications

00:04:59,600 --> 00:05:04,880
this is quite a few steps i will go into

00:05:02,560 --> 00:05:08,000
a little bit detail and using examples

00:05:04,880 --> 00:05:09,440
in the following slides now after

00:05:08,000 --> 00:05:12,479
construction

00:05:09,440 --> 00:05:15,520
we're ready for for expansion what that

00:05:12,479 --> 00:05:19,440
means is we are ready to onboard

00:05:15,520 --> 00:05:22,840
all services and applications

00:05:19,440 --> 00:05:26,400
based on outcome from the pilot

00:05:22,840 --> 00:05:29,520
applications pipeline code

00:05:26,400 --> 00:05:32,000
and the shareable modules from this

00:05:29,520 --> 00:05:32,000
experience

00:05:33,440 --> 00:05:38,000
the setting of parliament's code feature

00:05:35,199 --> 00:05:41,280
including the dinghy service

00:05:38,000 --> 00:05:42,560
this service keeps pipelines and github

00:05:41,280 --> 00:05:46,080
repo in sync

00:05:42,560 --> 00:05:51,120
and effects changes in modules you apply

00:05:46,080 --> 00:05:54,720
change to pipelines another key feature

00:05:51,120 --> 00:05:59,039
to enable east of c the role-based

00:05:54,720 --> 00:06:01,440
access control this is a very critical

00:05:59,039 --> 00:06:02,960
capability we need to enable because we

00:06:01,440 --> 00:06:06,240
need to restrict access to

00:06:02,960 --> 00:06:09,360
applications timelines and accounts

00:06:06,240 --> 00:06:12,080
we need to be able to custom permissions

00:06:09,360 --> 00:06:14,560
for automatic and manual pipeline

00:06:12,080 --> 00:06:14,560
triggers

00:06:15,360 --> 00:06:19,520
and of course we need to prepare the

00:06:17,520 --> 00:06:21,280
github ripple

00:06:19,520 --> 00:06:23,800
this in our use cases this is a mono

00:06:21,280 --> 00:06:26,800
ripple we store the pipeline

00:06:23,800 --> 00:06:26,800
configurations

00:06:26,960 --> 00:06:30,240
we apply we enable the pull request

00:06:29,199 --> 00:06:32,880
review

00:06:30,240 --> 00:06:35,840
and restrict who can apply the code

00:06:32,880 --> 00:06:35,840
change

00:06:35,919 --> 00:06:40,160
during the preparation phase we select

00:06:38,080 --> 00:06:42,639
the pilot applications

00:06:40,160 --> 00:06:45,199
basically what i mean is the application

00:06:42,639 --> 00:06:48,639
is ready to onboard

00:06:45,199 --> 00:06:51,759
onto spinnaker

00:06:48,639 --> 00:06:53,919
the few conditions must be met first the

00:06:51,759 --> 00:06:57,120
helm charts are available

00:06:53,919 --> 00:06:59,840
the override values for each

00:06:57,120 --> 00:07:02,960
applications available

00:06:59,840 --> 00:07:05,759
we are able to deploy using

00:07:02,960 --> 00:07:06,319
this helm chart and overall override

00:07:05,759 --> 00:07:09,919
values

00:07:06,319 --> 00:07:09,919
using helm client

00:07:10,800 --> 00:07:17,759
once those preconditions are available

00:07:14,160 --> 00:07:19,919
we can coordinate with the depth teams

00:07:17,759 --> 00:07:21,520
for the pilot applications and so we

00:07:19,919 --> 00:07:24,240
define the pipeline information

00:07:21,520 --> 00:07:24,880
implementation schedule trigger types

00:07:24,240 --> 00:07:27,840
and

00:07:24,880 --> 00:07:28,560
pipeline dependencies for example the

00:07:27,840 --> 00:07:31,599
production

00:07:28,560 --> 00:07:32,560
department version must match what's

00:07:31,599 --> 00:07:35,520
being deployed

00:07:32,560 --> 00:07:35,520
in staging

00:07:37,280 --> 00:07:41,599
the next step in populations will define

00:07:39,199 --> 00:07:44,960
the pipelines using

00:07:41,599 --> 00:07:46,639
spinnaker ui using a ui we can define

00:07:44,960 --> 00:07:49,520
the most common

00:07:46,639 --> 00:07:51,360
stages between applications and

00:07:49,520 --> 00:07:55,199
environments for example

00:07:51,360 --> 00:07:58,400
the big green name space the

00:07:55,199 --> 00:08:03,120
menu judgment deploy manifest

00:07:58,400 --> 00:08:03,120
and run script stages

00:08:03,520 --> 00:08:07,280
we also using the ui to define the

00:08:05,440 --> 00:08:08,479
common triggers for example docker

00:08:07,280 --> 00:08:13,120
registry

00:08:08,479 --> 00:08:16,080
or pipeline triggers

00:08:13,120 --> 00:08:17,039
after the first two steps we can go

00:08:16,080 --> 00:08:21,520
ahead to

00:08:17,039 --> 00:08:24,160
create pipelines for a pilot application

00:08:21,520 --> 00:08:24,879
this is a sample application example uh

00:08:24,160 --> 00:08:28,240
pipeline

00:08:24,879 --> 00:08:31,440
uh for a sample application

00:08:28,240 --> 00:08:35,039
in this case a depth pipeline

00:08:31,440 --> 00:08:38,800
so we have a configuration baking

00:08:35,039 --> 00:08:41,680
name space and application deployment

00:08:38,800 --> 00:08:42,640
after application deployment we run

00:08:41,680 --> 00:08:46,880
integration test

00:08:42,640 --> 00:08:46,880
and notify datadog

00:08:49,040 --> 00:08:52,320
and as you can see from this slide here

00:08:51,279 --> 00:08:55,440
from the

00:08:52,320 --> 00:08:58,720
application of pilot actions

00:08:55,440 --> 00:08:59,279
a button we can retrieve the pipeline

00:08:58,720 --> 00:09:02,560
code

00:08:59,279 --> 00:09:02,560
in json

00:09:03,839 --> 00:09:07,440
based on the pipeline code in json we

00:09:06,080 --> 00:09:10,160
extract the modules

00:09:07,440 --> 00:09:11,200
from from the pipeline code including

00:09:10,160 --> 00:09:14,240
artifacts

00:09:11,200 --> 00:09:15,200
big green namespace deploy manifest and

00:09:14,240 --> 00:09:17,720
run script

00:09:15,200 --> 00:09:18,959
will identify global variables

00:09:17,720 --> 00:09:22,160
parameterize

00:09:18,959 --> 00:09:25,839
modules and organize modules in

00:09:22,160 --> 00:09:29,760
github this is a sample

00:09:25,839 --> 00:09:33,279
output of a example application

00:09:29,760 --> 00:09:33,760
is we have a thank you file at the top

00:09:33,279 --> 00:09:37,519
level

00:09:33,760 --> 00:09:40,880
so we have one thing free file per app

00:09:37,519 --> 00:09:41,680
we have the modules organized into stage

00:09:40,880 --> 00:09:46,880
modules

00:09:41,680 --> 00:09:48,640
and app specific modules

00:09:46,880 --> 00:09:50,399
but this is an example we have a sample

00:09:48,640 --> 00:09:51,680
one sample application and the sample

00:09:50,399 --> 00:09:54,320
application

00:09:51,680 --> 00:09:55,279
and here the stage modules which are can

00:09:54,320 --> 00:09:58,720
be shared

00:09:55,279 --> 00:09:58,720
between applications

00:10:00,080 --> 00:10:03,839
here's the example for top level

00:10:01,440 --> 00:10:05,839
thinking file with the application name

00:10:03,839 --> 00:10:08,880
of the global variables

00:10:05,839 --> 00:10:11,760
and and an array of

00:10:08,880 --> 00:10:14,000
uh pipeline modules so each of these

00:10:11,760 --> 00:10:16,399
pipeline modules are corresponding

00:10:14,000 --> 00:10:19,839
to a specific environment for example

00:10:16,399 --> 00:10:19,839
dev staging or production

00:10:20,880 --> 00:10:24,480
during the construction phase there are

00:10:22,320 --> 00:10:28,079
many steps involved

00:10:24,480 --> 00:10:31,279
one of this is the app-specific

00:10:28,079 --> 00:10:32,160
modules in this example what we're

00:10:31,279 --> 00:10:36,399
seeing here

00:10:32,160 --> 00:10:38,959
is this sample app module for a

00:10:36,399 --> 00:10:39,760
dev environment so you have big create

00:10:38,959 --> 00:10:44,160
name space

00:10:39,760 --> 00:10:46,399
deploy app and notify data dog

00:10:44,160 --> 00:10:47,680
for this example we have a docker

00:10:46,399 --> 00:10:50,800
registry

00:10:47,680 --> 00:10:55,680
uh you happen to be using a

00:10:50,800 --> 00:10:58,959
regis expression so in this case

00:10:55,680 --> 00:11:01,279
only docker image with text

00:10:58,959 --> 00:11:02,800
that match this pattern uh basically

00:11:01,279 --> 00:11:06,160
four digits dot

00:11:02,800 --> 00:11:09,760
and two digits dash snapshot dash

00:11:06,160 --> 00:11:11,040
a and a number so this this is a one of

00:11:09,760 --> 00:11:14,480
the example is when

00:11:11,040 --> 00:11:17,600
we type the docker image using year

00:11:14,480 --> 00:11:18,640
month and the build number so only those

00:11:17,600 --> 00:11:20,959
tags

00:11:18,640 --> 00:11:21,760
will be picked up by this docker

00:11:20,959 --> 00:11:24,800
registry

00:11:21,760 --> 00:11:27,920
trigger in this

00:11:24,800 --> 00:11:28,480
specific module among these modules um

00:11:27,920 --> 00:11:30,320
we

00:11:28,480 --> 00:11:31,920
we also need to define some variables

00:11:30,320 --> 00:11:35,600
for artifacts

00:11:31,920 --> 00:11:38,800
uh such as the common char names

00:11:35,600 --> 00:11:42,000
version so the common charge b should be

00:11:38,800 --> 00:11:45,440
used by all apps and

00:11:42,000 --> 00:11:45,440
the docker image

00:11:45,760 --> 00:11:50,720
name and path are specific to a app

00:11:51,360 --> 00:11:58,399
the command charts could become

00:11:54,560 --> 00:12:01,440
is used by many apps but there's also

00:11:58,399 --> 00:12:02,079
examples where different apps may use

00:12:01,440 --> 00:12:06,160
different

00:12:02,079 --> 00:12:09,519
uh common charts so that's why this part

00:12:06,160 --> 00:12:10,160
still a app specific we also have

00:12:09,519 --> 00:12:13,519
override

00:12:10,160 --> 00:12:15,519
values for example the override values

00:12:13,519 --> 00:12:17,360
for specific environment

00:12:15,519 --> 00:12:19,040
for a smooth dab for staging and

00:12:17,360 --> 00:12:20,720
production

00:12:19,040 --> 00:12:22,959
and we also have the path to the

00:12:20,720 --> 00:12:26,639
artifact reference

00:12:22,959 --> 00:12:30,000
is this a specific um for an app

00:12:26,639 --> 00:12:33,120
or or but it's our app so they are

00:12:30,000 --> 00:12:34,079
we need to override values um uh for

00:12:33,120 --> 00:12:38,000
these shareable

00:12:34,079 --> 00:12:41,200
modules so this is an example for

00:12:38,000 --> 00:12:44,959
artifact reference shareable modules

00:12:41,200 --> 00:12:48,560
there's another example for manifest

00:12:44,959 --> 00:12:51,120
stage so the input artifacts helm char

00:12:48,560 --> 00:12:52,320
override values namespace override key

00:12:51,120 --> 00:12:55,440
value pairs

00:12:52,320 --> 00:12:59,040
ref id regular requisite stage

00:12:55,440 --> 00:12:59,040
ref ids or the

00:12:59,279 --> 00:13:03,120
can be defined when we're calling these

00:13:01,680 --> 00:13:06,160
shareable modules

00:13:03,120 --> 00:13:08,800
and this module for example

00:13:06,160 --> 00:13:11,519
can be used by multiple pipelines and

00:13:08,800 --> 00:13:11,519
applications

00:13:13,360 --> 00:13:20,000
the next example is for namespace and we

00:13:16,800 --> 00:13:22,800
have account name requisite stage

00:13:20,000 --> 00:13:23,440
reference ids all these are must be

00:13:22,800 --> 00:13:26,639
defined

00:13:23,440 --> 00:13:29,920
when recalling this particular shareable

00:13:26,639 --> 00:13:32,959
module in order to create a namespace

00:13:29,920 --> 00:13:32,959
for a pipeline

00:13:33,519 --> 00:13:37,839
the next example is a default deployment

00:13:35,760 --> 00:13:40,720
manifest

00:13:37,839 --> 00:13:42,399
for this variable module we when calling

00:13:40,720 --> 00:13:43,600
this variable module we need to define

00:13:42,399 --> 00:13:47,279
the

00:13:43,600 --> 00:13:50,240
parameters for account manifest artifact

00:13:47,279 --> 00:13:51,920
id typically this id is defined in the

00:13:50,240 --> 00:13:55,040
base stage

00:13:51,920 --> 00:13:58,160
we you know pass the parameters for

00:13:55,040 --> 00:14:01,680
namespace requisite stage ref ids

00:13:58,160 --> 00:14:04,720
and restricted execution window

00:14:01,680 --> 00:14:06,399
so all these are optional for i mean for

00:14:04,720 --> 00:14:07,760
the restricted execution window for

00:14:06,399 --> 00:14:12,959
example you can define

00:14:07,760 --> 00:14:17,199
only execute deployments every thursday

00:14:12,959 --> 00:14:20,639
3 pm for example

00:14:17,199 --> 00:14:23,279
the next example is a docker registry

00:14:20,639 --> 00:14:24,880
trigger in this module when we're

00:14:23,279 --> 00:14:27,440
calling this variable module

00:14:24,880 --> 00:14:28,800
we need to pass the parameters for the

00:14:27,440 --> 00:14:31,920
registry

00:14:28,800 --> 00:14:35,360
the organization path

00:14:31,920 --> 00:14:38,959
in this registry docker registry the

00:14:35,360 --> 00:14:41,120
image path and the service user

00:14:38,959 --> 00:14:42,320
the service user must be granted

00:14:41,120 --> 00:14:45,440
permission to

00:14:42,320 --> 00:14:46,959
execute a pipeline against a specific

00:14:45,440 --> 00:14:50,320
environment for example

00:14:46,959 --> 00:14:50,320
staging production

00:14:50,880 --> 00:14:57,440
again the tag is you can by default

00:14:54,240 --> 00:15:01,760
any text mesh you can specify

00:14:57,440 --> 00:15:01,760
particular patterns using regis

00:15:03,040 --> 00:15:07,120
so run script is nothing more than a web

00:15:05,839 --> 00:15:11,920
call

00:15:07,120 --> 00:15:14,959
to to invoke the integration tests

00:15:11,920 --> 00:15:18,160
in practice you just this is a script

00:15:14,959 --> 00:15:22,399
making a post method call

00:15:18,160 --> 00:15:22,399
to our ci system

00:15:22,560 --> 00:15:26,079
which happened to be a team city or naci

00:15:25,360 --> 00:15:29,519
system

00:15:26,079 --> 00:15:33,279
and this will just pass the bill type id

00:15:29,519 --> 00:15:36,320
and and subsequently

00:15:33,279 --> 00:15:37,360
this date this stage will just trigger

00:15:36,320 --> 00:15:40,720
another

00:15:37,360 --> 00:15:43,440
test test job and check for

00:15:40,720 --> 00:15:43,440
uh result

00:15:44,320 --> 00:15:47,600
but again this is a sure one of the

00:15:46,800 --> 00:15:50,800
share module

00:15:47,600 --> 00:15:55,680
can be used by multiple pipelines or

00:15:50,800 --> 00:15:59,360
applications the next slide here

00:15:55,680 --> 00:16:02,480
is about the enable change control

00:15:59,360 --> 00:16:05,120
this includes quite a few

00:16:02,480 --> 00:16:06,240
key steps we start by enable pull

00:16:05,120 --> 00:16:09,440
request review

00:16:06,240 --> 00:16:12,639
so only authorized authorized personnel

00:16:09,440 --> 00:16:13,680
can review pull requests we designate

00:16:12,639 --> 00:16:17,360
user group

00:16:13,680 --> 00:16:20,839
for merging pull requests and we enable

00:16:17,360 --> 00:16:23,440
things file check in pull request

00:16:20,839 --> 00:16:25,519
validation so what that means this is

00:16:23,440 --> 00:16:27,360
basically this step

00:16:25,519 --> 00:16:31,199
will make sure the thing defines the

00:16:27,360 --> 00:16:31,199
proper json file

00:16:32,240 --> 00:16:38,880
after the previous phases

00:16:35,759 --> 00:16:42,000
we are in this in a stage that

00:16:38,880 --> 00:16:44,079
we can onboard more applications and

00:16:42,000 --> 00:16:47,759
services

00:16:44,079 --> 00:16:51,680
from the pilot application experience um

00:16:47,759 --> 00:16:55,839
we we develop pylon code structure the

00:16:51,680 --> 00:16:55,839
application modules the stage modules

00:16:55,920 --> 00:16:59,519
therefore we can work with all the dev

00:16:58,800 --> 00:17:02,639
teams

00:16:59,519 --> 00:17:07,039
to schedule pipeline development for all

00:17:02,639 --> 00:17:09,839
apps and services during this experience

00:17:07,039 --> 00:17:12,720
we were improving the shareable modules

00:17:09,839 --> 00:17:12,720
when necessary

00:17:13,039 --> 00:17:16,959
one reason is some surface maybe more

00:17:15,439 --> 00:17:19,919
compass than the other

00:17:16,959 --> 00:17:20,799
and we need to figure out how to

00:17:19,919 --> 00:17:23,520
accommodate

00:17:20,799 --> 00:17:24,880
this complexity it could be this

00:17:23,520 --> 00:17:28,079
capacity may

00:17:24,880 --> 00:17:30,160
may due to dependence between different

00:17:28,079 --> 00:17:34,720
pipelines

00:17:30,160 --> 00:17:38,640
or we need to deploy multiple

00:17:34,720 --> 00:17:38,640
jobs within the same pipeline

00:17:42,320 --> 00:17:46,720
and and during this experience we can

00:17:44,720 --> 00:17:50,240
improve the share modules

00:17:46,720 --> 00:17:52,799
and and the result is

00:17:50,240 --> 00:17:53,840
the improved share modules help us to

00:17:52,799 --> 00:18:00,720
onboard

00:17:53,840 --> 00:18:02,559
more services and and applications

00:18:00,720 --> 00:18:03,840
so it's very important this step will

00:18:02,559 --> 00:18:06,640
communicate with

00:18:03,840 --> 00:18:07,600
all depth teams about the positive

00:18:06,640 --> 00:18:11,120
outcome

00:18:07,600 --> 00:18:16,480
uh and benefits uh while developing

00:18:11,120 --> 00:18:16,480
the pipeline code for pilot applications

00:18:17,120 --> 00:18:20,480
so when other teams see our positive

00:18:19,360 --> 00:18:23,200
results

00:18:20,480 --> 00:18:24,480
they feel more confident to onboard more

00:18:23,200 --> 00:18:28,799
services

00:18:24,480 --> 00:18:32,080
for using pipelines code

00:18:28,799 --> 00:18:36,160
so in conclusion here's the what why how

00:18:32,080 --> 00:18:38,480
about timeline sense code we onboard

00:18:36,160 --> 00:18:39,200
applications efficiently by using

00:18:38,480 --> 00:18:42,799
shareable

00:18:39,200 --> 00:18:45,919
modules we organize modules into

00:18:42,799 --> 00:18:48,799
app specific and stage modules

00:18:45,919 --> 00:18:49,440
we enforce pull request review against

00:18:48,799 --> 00:18:52,720
pipeline

00:18:49,440 --> 00:18:56,240
code change we automate

00:18:52,720 --> 00:18:58,559
pull request validation check

00:18:56,240 --> 00:19:00,080
restrict users who can merge pull

00:18:58,559 --> 00:19:02,160
requests

00:19:00,080 --> 00:19:03,200
and final point is we we have been

00:19:02,160 --> 00:19:06,240
revising

00:19:03,200 --> 00:19:08,960
uh shareable modules when all and when

00:19:06,240 --> 00:19:12,559
onboarding new apps

00:19:08,960 --> 00:19:16,000
from this experience we have modules

00:19:12,559 --> 00:19:20,000
more extensible and and

00:19:16,000 --> 00:19:23,600
shareable for current and future

00:19:20,000 --> 00:19:28,000
services from this experience

00:19:23,600 --> 00:19:30,160
well we can continue to expand the

00:19:28,000 --> 00:19:32,080
timeline school

00:19:30,160 --> 00:19:33,360
for new service for new apps and

00:19:32,080 --> 00:19:39,840
services

00:19:33,360 --> 00:19:39,840
in order to meet our business growth

00:19:41,039 --> 00:19:47,120
that concludes this presentation

00:19:44,400 --> 00:19:48,080
thank you for watching look forward to

00:19:47,120 --> 00:19:51,520
hear

00:19:48,080 --> 00:19:52,160
your questions and inputs enjoy the rest

00:19:51,520 --> 00:20:06,159
of

00:19:52,160 --> 00:20:06,159

YouTube URL: https://www.youtube.com/watch?v=gXwii-PtulM


