Title: Implementing Custom Job Stages into Spinnaker with K8s  -  David Hurng
Publication date: 2021-01-16
Playlist: Spinnaker Summit 2020
Description: 
	This panel will focus on how to integrate custom job stages into Spinnaker that will run jobs onto Kubernetes clusters. This is a common ask and a popular pipeline stage as it allows for many custom/out-of-band solutions to diverse problems. Some examples include running custom scripts or jobs after a bake or deploy stage. We will first start with why custom job stages will prove useful, then deep dive into how to set this up locally, and then introduce tricks and tips on how to get the most of the pipeline. Audiences can walk away understanding more about the internals of Kubernetes as well as Spinnaker, and ideas on what they can accomplish with their all inclusive, automated, pipeline.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:05,200 --> 00:00:07,440
hello everyone and welcome to this

00:00:06,879 --> 00:00:10,160
year's

00:00:07,440 --> 00:00:11,599
spinnaker summits delivering golden amis

00:00:10,160 --> 00:00:13,679
with spinnaker

00:00:11,599 --> 00:00:15,200
my name is david hearn and i'm a senior

00:00:13,679 --> 00:00:17,920
site reliability engineer

00:00:15,200 --> 00:00:19,840
at salesforce einstein and today i'll be

00:00:17,920 --> 00:00:22,240
talking to you about how to develop

00:00:19,840 --> 00:00:24,480
and deliver golden amis with spinnaker

00:00:22,240 --> 00:00:27,039
so let's get started

00:00:24,480 --> 00:00:27,519
first off what exactly are golden amis

00:00:27,039 --> 00:00:29,199
well

00:00:27,519 --> 00:00:31,119
a golden amine is ultimately an amazon

00:00:29,199 --> 00:00:32,800
machine image that is pre-configured

00:00:31,119 --> 00:00:34,320
with the os of your choice

00:00:32,800 --> 00:00:35,360
as well as embedded with the software

00:00:34,320 --> 00:00:38,000
that is required to run your

00:00:35,360 --> 00:00:38,000
applications

00:00:39,120 --> 00:00:42,640
these amis are standardized through

00:00:41,200 --> 00:00:44,879
configuration

00:00:42,640 --> 00:00:46,239
consistent security patching and

00:00:44,879 --> 00:00:48,079
hardening

00:00:46,239 --> 00:00:49,840
they need to be continuously assessed

00:00:48,079 --> 00:00:51,920
and scanned for vulnerabilities

00:00:49,840 --> 00:00:53,600
prior to distribution and deployment to

00:00:51,920 --> 00:00:55,280
your business units

00:00:53,600 --> 00:00:57,360
they are also constantly being replaced

00:00:55,280 --> 00:00:58,000
by newer amis as they quickly become

00:00:57,360 --> 00:01:01,760
outdated

00:00:58,000 --> 00:01:01,760
as new vulnerabilities are discovered

00:01:02,480 --> 00:01:06,799
so why do we care why do we go through

00:01:04,559 --> 00:01:09,200
all this work to reproduce an ami that i

00:01:06,799 --> 00:01:10,880
can find on the market and use

00:01:09,200 --> 00:01:12,400
well many of you here are probably

00:01:10,880 --> 00:01:13,680
facing the same types of issues with

00:01:12,400 --> 00:01:16,400
that approach

00:01:13,680 --> 00:01:18,000
in that there is an inconsistency in the

00:01:16,400 --> 00:01:19,439
images that are being used throughout

00:01:18,000 --> 00:01:21,520
your organization

00:01:19,439 --> 00:01:22,960
as everyone is free to use whatever amis

00:01:21,520 --> 00:01:24,640
they see fit

00:01:22,960 --> 00:01:26,320
don't forget that these machines are

00:01:24,640 --> 00:01:28,560
likely they're littered

00:01:26,320 --> 00:01:30,240
with vulnerabilities that can pose major

00:01:28,560 --> 00:01:31,600
risks

00:01:30,240 --> 00:01:33,840
so now that you know a little bit about

00:01:31,600 --> 00:01:34,079
golden amis and how they prove useful to

00:01:33,840 --> 00:01:36,000
you

00:01:34,079 --> 00:01:41,439
and your team let's talk about how we

00:01:36,000 --> 00:01:43,360
can deliver them with pipelines

00:01:41,439 --> 00:01:45,119
think of a golden ami pipeline as a

00:01:43,360 --> 00:01:46,960
perfect way to ensure standardized

00:01:45,119 --> 00:01:48,159
processes while maintaining checks and

00:01:46,960 --> 00:01:51,040
balances

00:01:48,159 --> 00:01:52,240
first off it saves time we can expect an

00:01:51,040 --> 00:01:53,920
automated process

00:01:52,240 --> 00:01:55,439
as opposed to manual step-by-step

00:01:53,920 --> 00:01:56,799
playbook which tends to be prone to

00:01:55,439 --> 00:01:59,759
mistakes

00:01:56,799 --> 00:02:01,759
second it ensures consistency rather

00:01:59,759 --> 00:02:03,280
than have an ad-hoc deployments with

00:02:01,759 --> 00:02:05,040
random floating images

00:02:03,280 --> 00:02:06,560
you can restrict your team to only

00:02:05,040 --> 00:02:10,080
deploy with the improved

00:02:06,560 --> 00:02:12,800
secure list of golden amis

00:02:10,080 --> 00:02:13,760
third amis are hardened meaning that

00:02:12,800 --> 00:02:15,520
potential

00:02:13,760 --> 00:02:18,400
threats against instances are

00:02:15,520 --> 00:02:19,599
neutralized as unwanted and unnecessary

00:02:18,400 --> 00:02:22,400
services

00:02:19,599 --> 00:02:24,239
access and programs are removed this can

00:02:22,400 --> 00:02:26,319
also make amis much more lightweight if

00:02:24,239 --> 00:02:28,400
needed

00:02:26,319 --> 00:02:29,760
finally aside from preventing attacks

00:02:28,400 --> 00:02:31,599
from hardening

00:02:29,760 --> 00:02:33,519
there are continuous assessments of

00:02:31,599 --> 00:02:35,360
vulnerabilities so you can expect your

00:02:33,519 --> 00:02:38,080
amis to always be measured against the

00:02:35,360 --> 00:02:40,160
latest security standards

00:02:38,080 --> 00:02:41,840
each ami will also be encrypted with

00:02:40,160 --> 00:02:45,040
agents that provide logging

00:02:41,840 --> 00:02:47,519
security and performance monitoring

00:02:45,040 --> 00:02:51,519
and as added bonus golden amis also make

00:02:47,519 --> 00:02:53,280
auditing time much smoother

00:02:51,519 --> 00:02:54,640
so what does a golden ami pipeline look

00:02:53,280 --> 00:02:57,040
like well

00:02:54,640 --> 00:02:59,200
aws has many resources and case studies

00:02:57,040 --> 00:03:01,519
that demonstrate a working pipeline

00:02:59,200 --> 00:03:03,040
that integrates with aws inspector as

00:03:01,519 --> 00:03:04,080
well as third-party inspection tools

00:03:03,040 --> 00:03:07,599
such as qualis

00:03:04,080 --> 00:03:09,120
and tenable the general idea in the flow

00:03:07,599 --> 00:03:11,360
is the same between all these pipelines

00:03:09,120 --> 00:03:13,120
however

00:03:11,360 --> 00:03:15,120
we can expect the creation of a golden

00:03:13,120 --> 00:03:18,640
ami through a general process

00:03:15,120 --> 00:03:20,560
as shown hardening the selected image

00:03:18,640 --> 00:03:22,480
again this can involve removing programs

00:03:20,560 --> 00:03:24,000
and services as well as blocking any

00:03:22,480 --> 00:03:26,080
ports

00:03:24,000 --> 00:03:27,920
validating the image with some sort of

00:03:26,080 --> 00:03:31,120
inspection process

00:03:27,920 --> 00:03:32,080
approving or rejecting the image if

00:03:31,120 --> 00:03:34,400
rejected

00:03:32,080 --> 00:03:35,440
decommission the ami oh and start

00:03:34,400 --> 00:03:39,440
another or

00:03:35,440 --> 00:03:41,680
simply patch it up if approved

00:03:39,440 --> 00:03:42,959
register the ami as active and up to

00:03:41,680 --> 00:03:44,879
date ami

00:03:42,959 --> 00:03:46,799
the approved amm will then be ready for

00:03:44,879 --> 00:03:48,640
distribution for consumption

00:03:46,799 --> 00:03:50,080
and then decommissioned once obsolete or

00:03:48,640 --> 00:03:51,920
reaches the end of life which is

00:03:50,080 --> 00:03:55,280
generally subjective to the team's

00:03:51,920 --> 00:03:57,519
standards it is also best practice to

00:03:55,280 --> 00:04:01,760
allow these established golden amis

00:03:57,519 --> 00:04:04,239
to remove to remain as immutable objects

00:04:01,760 --> 00:04:05,280
so when there is a need to make a change

00:04:04,239 --> 00:04:06,720
to the ami

00:04:05,280 --> 00:04:08,239
it's as easy as updating the

00:04:06,720 --> 00:04:10,799
requirements and re-running the same

00:04:08,239 --> 00:04:10,799
pipeline

00:04:12,239 --> 00:04:16,079
since this is a spinnaker summit after

00:04:14,000 --> 00:04:17,600
all i won't dive too deep into aw as a

00:04:16,079 --> 00:04:19,040
solution architecture

00:04:17,600 --> 00:04:21,120
there are also plenty of resources that

00:04:19,040 --> 00:04:22,639
cover this in depth

00:04:21,120 --> 00:04:24,960
but as a comparison to what we can

00:04:22,639 --> 00:04:27,360
accomplish with spinnaker let us look

00:04:24,960 --> 00:04:29,120
at how the deployment uses some of aws

00:04:27,360 --> 00:04:30,320
managed services that we can adopt into

00:04:29,120 --> 00:04:32,560
our own spinnaker version of the

00:04:30,320 --> 00:04:33,759
pipeline

00:04:32,560 --> 00:04:36,000
the pipeline can be started with

00:04:33,759 --> 00:04:38,400
multiple triggers manually

00:04:36,000 --> 00:04:40,000
periodically or right after a cicd

00:04:38,400 --> 00:04:42,240
pipeline

00:04:40,000 --> 00:04:43,520
once a source ami selected an instance

00:04:42,240 --> 00:04:45,919
is created

00:04:43,520 --> 00:04:47,360
packages and libraries are updated

00:04:45,919 --> 00:04:48,639
installed with any custom code for

00:04:47,360 --> 00:04:52,240
hardening

00:04:48,639 --> 00:04:54,720
also installed with any required agents

00:04:52,240 --> 00:04:56,000
once the instance is stopped an aim an

00:04:54,720 --> 00:04:59,280
image is created

00:04:56,000 --> 00:05:00,479
this is the golden ami as the next step

00:04:59,280 --> 00:05:01,840
this golden ami

00:05:00,479 --> 00:05:04,320
will be tagged accordingly with

00:05:01,840 --> 00:05:06,479
production information

00:05:04,320 --> 00:05:08,720
the image is then used to create another

00:05:06,479 --> 00:05:12,639
instance with the same requisites

00:05:08,720 --> 00:05:14,560
however it will also an aws inspector

00:05:12,639 --> 00:05:17,199
agent to be installed it also needs an

00:05:14,560 --> 00:05:19,759
aws inspector agent to be installed

00:05:17,199 --> 00:05:22,000
the agent will be collected install

00:05:19,759 --> 00:05:24,000
package information in any software

00:05:22,000 --> 00:05:27,600
configuration in order to fully assess

00:05:24,000 --> 00:05:30,639
their security this instance

00:05:27,600 --> 00:05:32,400
is what will undergo the assessments the

00:05:30,639 --> 00:05:34,160
aws inspector templates can be

00:05:32,400 --> 00:05:36,240
configured to run at a set cadence and

00:05:34,160 --> 00:05:38,160
pick up any new instances

00:05:36,240 --> 00:05:40,160
once inspector finishes the assessment

00:05:38,160 --> 00:05:41,280
it will publish an sns notification for

00:05:40,160 --> 00:05:43,280
approval

00:05:41,280 --> 00:05:46,240
this is the general flow of most golden

00:05:43,280 --> 00:05:46,240
ami pipelines

00:05:46,639 --> 00:05:50,479
i want to now introduce to you the

00:05:48,560 --> 00:05:52,000
spinnaker solution

00:05:50,479 --> 00:05:53,919
i took the key flow of what we saw

00:05:52,000 --> 00:05:56,080
earlier and integrated alongside with

00:05:53,919 --> 00:05:59,120
the tools provided by spinnaker

00:05:56,080 --> 00:05:59,520
let's go through the architecture first

00:05:59,120 --> 00:06:01,120
off

00:05:59,520 --> 00:06:03,039
we can also trigger the golden ami

00:06:01,120 --> 00:06:06,240
spinnaker pipeline with manual trigger

00:06:03,039 --> 00:06:08,000
periodic trigger or a ci cd trigger

00:06:06,240 --> 00:06:09,840
i won't go into the authentication or

00:06:08,000 --> 00:06:11,440
authorization step that is out of the

00:06:09,840 --> 00:06:14,080
scope of this panel

00:06:11,440 --> 00:06:16,479
but i want to mention how spinnaker will

00:06:14,080 --> 00:06:19,440
run the aws service as a functional id

00:06:16,479 --> 00:06:20,080
and not as a specific user in other

00:06:19,440 --> 00:06:22,960
words

00:06:20,080 --> 00:06:24,000
there will be one single aws iam

00:06:22,960 --> 00:06:25,520
identity

00:06:24,000 --> 00:06:27,280
due to the nature of this particular

00:06:25,520 --> 00:06:29,520
pipeline

00:06:27,280 --> 00:06:30,880
to continue the image will be baked and

00:06:29,520 --> 00:06:33,919
depending on the template it could be

00:06:30,880 --> 00:06:35,680
shared with existing target environments

00:06:33,919 --> 00:06:37,039
the hardened image will be tagged as a

00:06:35,680 --> 00:06:38,960
golden ami candidate

00:06:37,039 --> 00:06:41,600
so we know it is not ready to be used in

00:06:38,960 --> 00:06:44,000
production machines

00:06:41,600 --> 00:06:45,440
a single instance will be deployed from

00:06:44,000 --> 00:06:47,600
this ami

00:06:45,440 --> 00:06:49,280
which will also have aws inspector agent

00:06:47,600 --> 00:06:51,280
installed on top of everything else that

00:06:49,280 --> 00:06:53,360
is needed

00:06:51,280 --> 00:06:55,440
we will then invoke a fire and forget

00:06:53,360 --> 00:06:59,280
web hook against the aws lander that

00:06:55,440 --> 00:07:01,919
triggers aws inspector assessment to run

00:06:59,280 --> 00:07:02,720
after the aws inspectors completes the

00:07:01,919 --> 00:07:05,280
assessment

00:07:02,720 --> 00:07:07,360
we can approve the ami through a manual

00:07:05,280 --> 00:07:09,440
input stage in spinnaker

00:07:07,360 --> 00:07:12,080
from there with the ami is approved it

00:07:09,440 --> 00:07:15,039
can be tagged with golden ami proof tag

00:07:12,080 --> 00:07:17,840
and released for use else the mi will be

00:07:15,039 --> 00:07:17,840
cleaned up and destroyed

00:07:18,720 --> 00:07:22,639
here is a visual comparison of the aws

00:07:21,120 --> 00:07:25,120
solution architecture

00:07:22,639 --> 00:07:26,880
with the spinnaker architecture the

00:07:25,120 --> 00:07:28,960
major intersecting points will be the

00:07:26,880 --> 00:07:31,840
shared aws services

00:07:28,960 --> 00:07:33,039
but the flow of the baking tagging and

00:07:31,840 --> 00:07:36,400
approving can be done

00:07:33,039 --> 00:07:36,400
all in band with spinnaker

00:07:37,360 --> 00:07:40,639
here are some of the very fundamental

00:07:38,800 --> 00:07:41,919
prerequisites to get us started

00:07:40,639 --> 00:07:44,319
of course we're going to need a

00:07:41,919 --> 00:07:46,400
spinnaker installation start with

00:07:44,319 --> 00:07:47,280
configuring aws as a provider in cloud

00:07:46,400 --> 00:07:48,800
driver

00:07:47,280 --> 00:07:51,039
this will be the deployment environment

00:07:48,800 --> 00:07:53,599
where the instances will be created

00:07:51,039 --> 00:07:55,280
when configuring adding the aws

00:07:53,599 --> 00:07:56,800
environment where spinnaker is installed

00:07:55,280 --> 00:07:58,000
will actually make things easier as

00:07:56,800 --> 00:08:01,360
there will be fewer

00:07:58,000 --> 00:08:01,360
networking hurdles to go through

00:08:01,919 --> 00:08:06,000
have aws bakery configuration set up

00:08:04,479 --> 00:08:07,759
this will allow for the use of bakery

00:08:06,000 --> 00:08:09,280
defaults

00:08:07,759 --> 00:08:11,120
the template files are stored within

00:08:09,280 --> 00:08:14,400
spinnaker's micro servers frosco

00:08:11,120 --> 00:08:16,319
which runs simply packer so ideally to

00:08:14,400 --> 00:08:18,080
make everything easier and automated i'd

00:08:16,319 --> 00:08:18,960
recommend looking into github sync as a

00:08:18,080 --> 00:08:20,800
sidecar

00:08:18,960 --> 00:08:22,720
this ultimately allows any merges on a

00:08:20,800 --> 00:08:26,639
target branch of a repository

00:08:22,720 --> 00:08:28,479
to be synced with rosco for baking

00:08:26,639 --> 00:08:30,560
the aws services will be out of band

00:08:28,479 --> 00:08:33,440
with the setup and the spinner process

00:08:30,560 --> 00:08:35,680
but all part of the automations go we'll

00:08:33,440 --> 00:08:38,159
need aws api gateway

00:08:35,680 --> 00:08:40,320
for the webhooks coming from spinnaker

00:08:38,159 --> 00:08:42,240
protectives with api keys as well as a

00:08:40,320 --> 00:08:44,240
secure networking layer

00:08:42,240 --> 00:08:46,240
i would recommend these aws services to

00:08:44,240 --> 00:08:48,480
be deployed within the same environment

00:08:46,240 --> 00:08:50,560
as the aws provider configured above for

00:08:48,480 --> 00:08:52,880
the same reasons

00:08:50,560 --> 00:08:54,640
we will need an aws lambda to process

00:08:52,880 --> 00:08:56,560
the web hook and make logical calls to

00:08:54,640 --> 00:08:58,480
the aws inspector

00:08:56,560 --> 00:09:00,160
a function to invoke the assessment and

00:08:58,480 --> 00:09:03,519
another to confirm the completion and

00:09:00,160 --> 00:09:05,839
gather the report within the lambda

00:09:03,519 --> 00:09:07,279
finally adobe's inspector itself needs

00:09:05,839 --> 00:09:08,320
to be set up to have the job that

00:09:07,279 --> 00:09:12,240
targets images

00:09:08,320 --> 00:09:14,080
based on the tag's golden ami candidate

00:09:12,240 --> 00:09:16,880
as mentioned earlier we can optionally

00:09:14,080 --> 00:09:19,279
include a github sync sidecar

00:09:16,880 --> 00:09:20,959
also optionally a custom job stage where

00:09:19,279 --> 00:09:21,760
you can run scripts to publish a golden

00:09:20,959 --> 00:09:24,720
mi

00:09:21,760 --> 00:09:25,920
into your repo or any final touches you

00:09:24,720 --> 00:09:28,320
can learn more about this

00:09:25,920 --> 00:09:30,720
in the next spinnaker summit workshop

00:09:28,320 --> 00:09:32,640
spinnaker custom job stage

00:09:30,720 --> 00:09:34,640
and of course spinnaker also has

00:09:32,640 --> 00:09:37,839
notification options similar to sms

00:09:34,640 --> 00:09:37,839
solution that you can set up

00:09:38,560 --> 00:09:42,560
here's a snippet of a simple golden ami

00:09:41,040 --> 00:09:43,920
spinnaker pipeline

00:09:42,560 --> 00:09:45,600
there is nothing else that needs to be

00:09:43,920 --> 00:09:47,600
done outside of running this pipeline

00:09:45,600 --> 00:09:48,959
so emphasis on the automation and how

00:09:47,600 --> 00:09:51,839
everything is managed and controlled

00:09:48,959 --> 00:09:51,839
through spinnaker

00:09:53,360 --> 00:09:57,760
let's dive in the bake stage is the

00:09:55,839 --> 00:09:59,839
first step in the pipeline we see

00:09:57,760 --> 00:10:01,120
the aws bakery will be configured within

00:09:59,839 --> 00:10:03,920
spinnaker

00:10:01,120 --> 00:10:04,959
you can establish defaults that abstract

00:10:03,920 --> 00:10:07,279
any complexity

00:10:04,959 --> 00:10:08,079
and makes configuring the pipeline much

00:10:07,279 --> 00:10:09,360
easier

00:10:08,079 --> 00:10:11,600
we can take a look at what this looks

00:10:09,360 --> 00:10:13,680
like in the next section

00:10:11,600 --> 00:10:16,320
spinnaker's microservice rosco runs

00:10:13,680 --> 00:10:18,480
packer against a specified directory

00:10:16,320 --> 00:10:19,760
again this is where it have seen sidecar

00:10:18,480 --> 00:10:21,519
can come in handy

00:10:19,760 --> 00:10:22,800
whenever there is a merge on the master

00:10:21,519 --> 00:10:24,959
branch within a repo

00:10:22,800 --> 00:10:27,120
that contains the packer templates as

00:10:24,959 --> 00:10:29,120
well as values in other scripts

00:10:27,120 --> 00:10:30,880
it will automatically update the path

00:10:29,120 --> 00:10:32,640
within the roscode container

00:10:30,880 --> 00:10:34,480
this removes the need of redeployment

00:10:32,640 --> 00:10:38,240
ross containers thus

00:10:34,480 --> 00:10:40,079
preventing any downtime the template can

00:10:38,240 --> 00:10:40,800
also include a few other requisites such

00:10:40,079 --> 00:10:43,360
as naming

00:10:40,800 --> 00:10:44,079
or other environments that to share this

00:10:43,360 --> 00:10:46,240
is okay

00:10:44,079 --> 00:10:48,399
as we will not allow users to use any

00:10:46,240 --> 00:10:51,279
amis that are not tagged for approval

00:10:48,399 --> 00:10:52,320
regardless of the environment once the

00:10:51,279 --> 00:10:54,160
ami

00:10:52,320 --> 00:10:56,000
image is baked you can view it in your

00:10:54,160 --> 00:11:00,880
amis tabs in views

00:10:56,000 --> 00:11:02,880
in aws console

00:11:00,880 --> 00:11:03,920
as we can see the examples and features

00:11:02,880 --> 00:11:07,519
that aws

00:11:03,920 --> 00:11:09,760
or that spinnaker offers for ami baking

00:11:07,519 --> 00:11:12,240
the ami defaults can be seen as

00:11:09,760 --> 00:11:14,640
selectable under base os

00:11:12,240 --> 00:11:15,600
all other file references are within the

00:11:14,640 --> 00:11:17,680
custom

00:11:15,600 --> 00:11:21,040
rosco directory that is linked with the

00:11:17,680 --> 00:11:21,040
github sync sidecar

00:11:23,519 --> 00:11:27,839
the tag stage is pretty straightforward

00:11:25,680 --> 00:11:30,000
simply tags the newly created ami with

00:11:27,839 --> 00:11:32,320
golden ami candidate

00:11:30,000 --> 00:11:34,160
again since this is the ami that can be

00:11:32,320 --> 00:11:36,079
shared amongst other environments

00:11:34,160 --> 00:11:39,440
already your team should be aware that

00:11:36,079 --> 00:11:41,360
candidate does not mean approved

00:11:39,440 --> 00:11:43,760
also keep track of the tag being used

00:11:41,360 --> 00:11:45,519
here that is what aws inspector

00:11:43,760 --> 00:11:48,640
template will need in order to do the

00:11:45,519 --> 00:11:51,279
matching and searching

00:11:48,640 --> 00:11:53,040
next the deployment stage will deploy a

00:11:51,279 --> 00:11:54,240
single instance of a golden ami

00:11:53,040 --> 00:11:55,680
candidate

00:11:54,240 --> 00:11:57,600
much of the defaults are lightweight

00:11:55,680 --> 00:11:59,440
enough to proceed but adding

00:11:57,600 --> 00:12:01,600
configurations such as a firewall

00:11:59,440 --> 00:12:03,360
will help as it will be included in the

00:12:01,600 --> 00:12:05,120
vulnerability scanning

00:12:03,360 --> 00:12:06,880
that being said this is a good

00:12:05,120 --> 00:12:09,600
opportunity to scan from network

00:12:06,880 --> 00:12:11,760
vulnerabilities

00:12:09,600 --> 00:12:13,760
another key feature here is to include

00:12:11,760 --> 00:12:16,000
an encrypted user data

00:12:13,760 --> 00:12:18,320
that installs any agents you need but

00:12:16,000 --> 00:12:22,000
more importantly the aws inspector agent

00:12:18,320 --> 00:12:22,000
and it is required for scanning

00:12:22,959 --> 00:12:27,040
thanks to spinnaker's web hook stage we

00:12:25,200 --> 00:12:28,880
can invoke the adobe's inspector

00:12:27,040 --> 00:12:30,880
and keep the process automated without

00:12:28,880 --> 00:12:34,000
ever leaving the pipeline

00:12:30,880 --> 00:12:35,920
we can also trigger inspector on

00:12:34,000 --> 00:12:38,480
cue as opposed to having to wait for a

00:12:35,920 --> 00:12:41,440
scheduled cadence to scan instances

00:12:38,480 --> 00:12:42,880
thus possibly missing any new instances

00:12:41,440 --> 00:12:44,639
especially if the pipeline were to

00:12:42,880 --> 00:12:46,639
restart

00:12:44,639 --> 00:12:48,240
the webhook stage will involve a post

00:12:46,639 --> 00:12:50,800
method to the webhook url

00:12:48,240 --> 00:12:52,639
alongside any payload in any api key

00:12:50,800 --> 00:12:54,320
within the headers

00:12:52,639 --> 00:12:55,920
lambda will have a logical code to

00:12:54,320 --> 00:12:58,000
process the web hook requests

00:12:55,920 --> 00:12:59,839
accordingly i have not published the

00:12:58,000 --> 00:13:02,079
code due to proprietary reasons

00:12:59,839 --> 00:13:06,160
but it could be as simple simple as

00:13:02,079 --> 00:13:08,320
making another api call to aws inspector

00:13:06,160 --> 00:13:09,360
awbs inspector can be configured with

00:13:08,320 --> 00:13:11,600
the rules packages

00:13:09,360 --> 00:13:12,800
such as common vulnerabilities and

00:13:11,600 --> 00:13:14,880
exposures

00:13:12,800 --> 00:13:16,639
or those you choose to define for the

00:13:14,880 --> 00:13:18,800
assessment

00:13:16,639 --> 00:13:20,560
it will also be coupled with assessment

00:13:18,800 --> 00:13:24,240
targets that use the tags

00:13:20,560 --> 00:13:24,240
aws ami candidate

00:13:25,040 --> 00:13:28,639
now that aws inspector is running the

00:13:27,839 --> 00:13:31,760
assessment

00:13:28,639 --> 00:13:33,760
ideally now as recommended we wait we

00:13:31,760 --> 00:13:34,000
can include a wastage within spinnaker

00:13:33,760 --> 00:13:36,000
to

00:13:34,000 --> 00:13:37,200
wait until the results are complete

00:13:36,000 --> 00:13:39,760
after that we will run

00:13:37,200 --> 00:13:41,199
another web hook but this time we can

00:13:39,760 --> 00:13:43,440
simply use a get method

00:13:41,199 --> 00:13:44,880
to get on the status of the assessment

00:13:43,440 --> 00:13:45,760
this web hook will be similarly

00:13:44,880 --> 00:13:47,680
configured

00:13:45,760 --> 00:13:47,840
with the same network rules and the api

00:13:47,680 --> 00:13:49,519
key

00:13:47,840 --> 00:13:50,959
[Music]

00:13:49,519 --> 00:13:53,920
we'll also go through the same flow of

00:13:50,959 --> 00:13:56,320
api gateway to aws lambda to adapters

00:13:53,920 --> 00:13:58,560
inspector for the reports

00:13:56,320 --> 00:14:00,000
it is important for the lambda logic to

00:13:58,560 --> 00:14:01,199
include searching for specific

00:14:00,000 --> 00:14:02,880
assessments

00:14:01,199 --> 00:14:04,800
in other words if there are multiple

00:14:02,880 --> 00:14:06,160
pipelines running or even an existing

00:14:04,800 --> 00:14:07,120
assessment that's not complete

00:14:06,160 --> 00:14:10,880
make sure to take that into

00:14:07,120 --> 00:14:10,880
consideration add that to the logic

00:14:11,440 --> 00:14:16,720
here here is an example of the

00:14:14,560 --> 00:14:18,240
assessment report

00:14:16,720 --> 00:14:19,680
this is a very lightweight ami that i'm

00:14:18,240 --> 00:14:23,199
being used here to better show the

00:14:19,680 --> 00:14:23,199
in-depth vulnerability assessments

00:14:24,079 --> 00:14:28,959
the rules packages used in this case are

00:14:26,320 --> 00:14:32,079
common vulnerabilities and exposures

00:14:28,959 --> 00:14:33,760
network reachability cisos security

00:14:32,079 --> 00:14:37,360
configuration benchmarks

00:14:33,760 --> 00:14:37,360
and security best practices

00:14:41,839 --> 00:14:45,120
this is the only manual step of the

00:14:43,680 --> 00:14:46,480
golden ami pipeline

00:14:45,120 --> 00:14:48,399
which can be done with the manual

00:14:46,480 --> 00:14:50,959
judgment stage

00:14:48,399 --> 00:14:53,360
but we can simply set up notification

00:14:50,959 --> 00:14:55,440
rules defined within spinnaker

00:14:53,360 --> 00:14:57,360
the approval stage implies due diligence

00:14:55,440 --> 00:14:59,440
on the engineer to actually review the

00:14:57,360 --> 00:15:01,279
reports and findings discovered by ada

00:14:59,440 --> 00:15:04,480
business inspector

00:15:01,279 --> 00:15:06,720
the ami is approved we will tag the ami

00:15:04,480 --> 00:15:08,720
as the golden ami approved you can use

00:15:06,720 --> 00:15:10,800
custom stages to run a script

00:15:08,720 --> 00:15:12,480
to simply publish this ami id into a

00:15:10,800 --> 00:15:14,720
list of approved

00:15:12,480 --> 00:15:15,920
if the ami is the nine we will tag the

00:15:14,720 --> 00:15:17,040
amis denied

00:15:15,920 --> 00:15:19,040
and to make sure that it does not

00:15:17,040 --> 00:15:20,959
accidentally get used we can also

00:15:19,040 --> 00:15:24,240
include a cleanup stage to delete any

00:15:20,959 --> 00:15:25,839
instances and the ami itself

00:15:24,240 --> 00:15:27,680
one way to improve on the automation

00:15:25,839 --> 00:15:28,240
stage on this particular automation

00:15:27,680 --> 00:15:29,920
stage

00:15:28,240 --> 00:15:31,839
the future is that the assessment

00:15:29,920 --> 00:15:33,920
reports can be consumed as a data

00:15:31,839 --> 00:15:36,959
interchange format such as json

00:15:33,920 --> 00:15:38,480
instead of pdf for html this way there

00:15:36,959 --> 00:15:42,160
can be an automated response

00:15:38,480 --> 00:15:42,160
based on number of findings for example

00:15:43,199 --> 00:15:47,839
as a result with this spinnaker solution

00:15:46,079 --> 00:15:50,560
you can now walk away from this panel

00:15:47,839 --> 00:15:53,040
having developed a golden ami pipeline

00:15:50,560 --> 00:15:55,680
that's automated and reusable

00:15:53,040 --> 00:15:57,360
having golden amis that are secure and

00:15:55,680 --> 00:15:58,720
hardened and ready for business units to

00:15:57,360 --> 00:16:00,639
deploy with

00:15:58,720 --> 00:16:02,800
and being able to meet compliance and

00:16:00,639 --> 00:16:06,800
satisfy auditing needs from the use

00:16:02,800 --> 00:16:08,320
of up-to-date scanning standards

00:16:06,800 --> 00:16:09,920
here's some of the following sources and

00:16:08,320 --> 00:16:10,800
case studies that ada has published if

00:16:09,920 --> 00:16:13,839
you'd like to

00:16:10,800 --> 00:16:15,440
have further in-depth reading

00:16:13,839 --> 00:16:18,720
thank you so much for watching please

00:16:15,440 --> 00:16:18,720
feel free to reach out if you have any

00:16:18,730 --> 00:16:22,000
[Music]

00:16:20,839 --> 00:16:24,079
questions

00:16:22,000 --> 00:16:24,079

YouTube URL: https://www.youtube.com/watch?v=FSjkn5QgoOU


