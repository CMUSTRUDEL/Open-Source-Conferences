Title: My Experience Creating an Orca Plugin for the First Time - Alex McNeill
Publication date: 2021-01-28
Playlist: Spinnaker Summit 2020
Description: 
	This session with Alex McNeill of Xero takes you through his experience creating and deploying a Spinnaker Orca stage plugin for the first time. The plugin Alex created was a basic stage that sends an event to New Relic. Alex will be going through: - Cloning the PF4J plugin example and getting IntelliJ setup for development. - Updating the configuration, inputs and outputs of the example plugin for their needs. - Updating the example plugin to POST an event to New Relic. - Renaming the packages and project. - Building the plugin. - Creating the plugins.json file. - Configuring Spinnaker to use the new plugin. - Issues using SecretEngine in the plugin configuration.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:05,759 --> 00:00:08,639
hi everyone

00:00:06,960 --> 00:00:10,400
my name is alex mcneil and i'll be

00:00:08,639 --> 00:00:11,679
walking through my experience developing

00:00:10,400 --> 00:00:14,559
a spinnaker plugin

00:00:11,679 --> 00:00:14,559
for the first time

00:00:15,040 --> 00:00:18,320
before we get started let me give you a

00:00:16,720 --> 00:00:19,840
brief summary of my background so you

00:00:18,320 --> 00:00:22,400
have a better idea of my perspective

00:00:19,840 --> 00:00:23,760
while developing this plugin

00:00:22,400 --> 00:00:26,320
i'm a senior engineer in the pair's

00:00:23,760 --> 00:00:28,000
build and deploy team at xero

00:00:26,320 --> 00:00:29,679
my day-to-day job is supporting the

00:00:28,000 --> 00:00:31,039
tooling used for building and deploying

00:00:29,679 --> 00:00:32,640
applications

00:00:31,039 --> 00:00:34,960
and improving the developer experience

00:00:32,640 --> 00:00:36,640
in this space

00:00:34,960 --> 00:00:38,160
i started out my career mostly working

00:00:36,640 --> 00:00:40,160
in c-sharp

00:00:38,160 --> 00:00:41,520
but over recent years i've mostly been

00:00:40,160 --> 00:00:45,200
working in golang

00:00:41,520 --> 00:00:46,000
javascript and python i'm familiar with

00:00:45,200 --> 00:00:49,360
java

00:00:46,000 --> 00:00:51,120
but haven't worked in it since polytech

00:00:49,360 --> 00:00:52,960
i have a basic understanding of spinach

00:00:51,120 --> 00:00:55,199
services in our future

00:00:52,960 --> 00:00:59,840
this is from setting up spinnaker in our

00:00:55,199 --> 00:00:59,840
environment at xero

00:01:01,359 --> 00:01:06,080
so what were we wanting to achieve we

00:01:04,159 --> 00:01:06,880
wanted to send an event to new relic

00:01:06,080 --> 00:01:10,159
every time

00:01:06,880 --> 00:01:11,040
a deployment pipeline is run this event

00:01:10,159 --> 00:01:13,280
needed to contain

00:01:11,040 --> 00:01:14,560
the artifact that was deployed a link to

00:01:13,280 --> 00:01:17,840
the execution

00:01:14,560 --> 00:01:19,360
and the outcome of the deployment

00:01:17,840 --> 00:01:21,040
this is so we have a history of all the

00:01:19,360 --> 00:01:23,520
deployments for auditing and debugging

00:01:21,040 --> 00:01:23,520
purposes

00:01:24,159 --> 00:01:28,560
new relic provides an api for reporting

00:01:26,240 --> 00:01:31,119
custom events

00:01:28,560 --> 00:01:32,880
the only required field for this api is

00:01:31,119 --> 00:01:35,200
event type

00:01:32,880 --> 00:01:36,799
you can then divide define any key value

00:01:35,200 --> 00:01:38,079
appears you want to be sent with the

00:01:36,799 --> 00:01:39,759
event

00:01:38,079 --> 00:01:42,640
this is an example of the payload we

00:01:39,759 --> 00:01:44,399
wanted to send to new relic

00:01:42,640 --> 00:01:46,159
so there are a few ways to achieve this

00:01:44,399 --> 00:01:48,880
which we considered before deciding to

00:01:46,159 --> 00:01:50,799
create an orca stage plugin

00:01:48,880 --> 00:01:53,520
the first solution we considered was the

00:01:50,799 --> 00:01:55,280
inbuilt wear hook stage

00:01:53,520 --> 00:01:57,119
this was good because it was already

00:01:55,280 --> 00:01:59,439
built into spinnaker so no development

00:01:57,119 --> 00:02:01,360
work would be required

00:01:59,439 --> 00:02:02,560
it was also good because the result of

00:02:01,360 --> 00:02:05,600
the event

00:02:02,560 --> 00:02:08,000
would be visible to the user this

00:02:05,600 --> 00:02:09,520
however didn't meet our requirements

00:02:08,000 --> 00:02:11,360
as it would require the new relic

00:02:09,520 --> 00:02:14,319
concert key to be defined in the

00:02:11,360 --> 00:02:14,319
pipeline definition

00:02:14,640 --> 00:02:19,520
the second solution we had was to create

00:02:17,040 --> 00:02:21,040
an echo plug-in

00:02:19,520 --> 00:02:23,680
this was subscribed to all of the

00:02:21,040 --> 00:02:25,200
pipeline events and then feature data it

00:02:23,680 --> 00:02:28,480
needed from the execution

00:02:25,200 --> 00:02:30,239
to send to new relic

00:02:28,480 --> 00:02:32,560
this was good because no secrets needed

00:02:30,239 --> 00:02:34,640
to be defined in the pipeline definition

00:02:32,560 --> 00:02:37,519
the insert key would be passed into the

00:02:34,640 --> 00:02:39,200
plugin via its configuration

00:02:37,519 --> 00:02:40,640
it was also good because it picks up

00:02:39,200 --> 00:02:42,640
every deployment

00:02:40,640 --> 00:02:43,920
instead of having a stage defined in

00:02:42,640 --> 00:02:47,840
every pipeline

00:02:43,920 --> 00:02:47,840
it just picks up any pipeline which runs

00:02:48,400 --> 00:02:51,519
it was bad because we'd have to query a

00:02:50,000 --> 00:02:53,760
lot of data from the execution

00:02:51,519 --> 00:02:56,560
and figure out what data we needed for

00:02:53,760 --> 00:02:58,560
our deployment event

00:02:56,560 --> 00:03:01,519
it was also bad as the result would not

00:02:58,560 --> 00:03:01,519
be visible to users

00:03:01,840 --> 00:03:05,360
with the stage not being in the pipeline

00:03:03,519 --> 00:03:08,319
the user would not see the result of

00:03:05,360 --> 00:03:10,159
their deployment event

00:03:08,319 --> 00:03:12,879
and it was also bad because it requires

00:03:10,159 --> 00:03:12,879
development work

00:03:13,280 --> 00:03:17,280
the solution we came to in the end was

00:03:15,280 --> 00:03:18,879
awkward stage plugin

00:03:17,280 --> 00:03:20,640
this would allow us to add a stage to

00:03:18,879 --> 00:03:23,599
the pipelines where it sends the new

00:03:20,640 --> 00:03:23,599
relic event off

00:03:23,840 --> 00:03:27,760
this was good because there'll be no

00:03:25,200 --> 00:03:30,840
secrets in the pipeline definition again

00:03:27,760 --> 00:03:32,080
this will be passed in via the plugin

00:03:30,840 --> 00:03:33,599
configuration

00:03:32,080 --> 00:03:35,599
it's also good because the result will

00:03:33,599 --> 00:03:37,360
be visible to users

00:03:35,599 --> 00:03:38,879
because the stage is in the pipeline we

00:03:37,360 --> 00:03:41,360
can inform users of the deployment

00:03:38,879 --> 00:03:43,280
events result

00:03:41,360 --> 00:03:46,400
yet again it was bad because it requires

00:03:43,280 --> 00:03:49,040
us to do development work

00:03:46,400 --> 00:03:51,120
so now that we had our base to build off

00:03:49,040 --> 00:03:54,560
we had to get a http client in order to

00:03:51,120 --> 00:03:57,280
send our requests off to new relic

00:03:54,560 --> 00:03:58,159
there were two ways we found to do this

00:03:57,280 --> 00:04:02,799
the first way

00:03:58,159 --> 00:04:04,159
was to use http client provided by orca

00:04:02,799 --> 00:04:06,640
you can get this client through the

00:04:04,159 --> 00:04:09,280
plugins sdk object that's passed to your

00:04:06,640 --> 00:04:10,959
execution

00:04:09,280 --> 00:04:13,439
this was good because it would be kept

00:04:10,959 --> 00:04:15,120
up to date by orca

00:04:13,439 --> 00:04:16,720
also good because it comes with built-in

00:04:15,120 --> 00:04:20,959
integrations with logging

00:04:16,720 --> 00:04:22,400
and monitoring however it was bad for us

00:04:20,959 --> 00:04:24,000
because it was hard to figure out

00:04:22,400 --> 00:04:25,440
we didn't know exactly what client we

00:04:24,000 --> 00:04:27,440
were getting back and what the contract

00:04:25,440 --> 00:04:29,120
was

00:04:27,440 --> 00:04:31,120
the other option we had was to define

00:04:29,120 --> 00:04:32,560
our own client

00:04:31,120 --> 00:04:34,880
this was good because we could choose

00:04:32,560 --> 00:04:36,560
any client we wanted

00:04:34,880 --> 00:04:40,320
it was also good because we could choose

00:04:36,560 --> 00:04:40,320
a client that had good documentation

00:04:40,479 --> 00:04:45,919
this was bad however because we'd have

00:04:42,160 --> 00:04:45,919
to keep the client updated ourselves

00:04:46,000 --> 00:04:50,080
in the end we decided to go with our own

00:04:48,160 --> 00:04:51,759
client

00:04:50,080 --> 00:04:53,680
i believe this isn't a good long-term

00:04:51,759 --> 00:04:57,040
solution and we should probably use

00:04:53,680 --> 00:04:59,840
the client provided by orca

00:04:57,040 --> 00:05:02,960
but for now to get this plugin made we

00:04:59,840 --> 00:05:02,960
decided to go with our own

00:05:03,039 --> 00:05:07,600
the next thing we needed to do was

00:05:04,560 --> 00:05:09,120
update the plugins configuration

00:05:07,600 --> 00:05:10,960
the first thing we updated was the

00:05:09,120 --> 00:05:12,880
configuration option

00:05:10,960 --> 00:05:15,520
this is the data that's passed in from

00:05:12,880 --> 00:05:19,120
the spinnaker configuration

00:05:15,520 --> 00:05:24,320
we added the event api endpoint

00:05:19,120 --> 00:05:27,600
the insert key and the event type

00:05:24,320 --> 00:05:29,039
we also updated the input object this is

00:05:27,600 --> 00:05:31,600
the data that's passed in from the

00:05:29,039 --> 00:05:35,199
pipeline definition

00:05:31,600 --> 00:05:40,000
we added the title the environment

00:05:35,199 --> 00:05:40,000
the execution url and the change status

00:05:40,080 --> 00:05:45,919
finally we updated the output object

00:05:44,400 --> 00:05:48,800
this is the data that's returned to the

00:05:45,919 --> 00:05:51,120
execution after the stage is completed

00:05:48,800 --> 00:05:52,000
we simply put the status code here so we

00:05:51,120 --> 00:05:55,280
could easily debug

00:05:52,000 --> 00:05:55,280
what error codes we were getting

00:05:56,080 --> 00:06:01,280
there is also context what we didn't use

00:05:59,520 --> 00:06:03,120
this is for passing data between

00:06:01,280 --> 00:06:04,639
different parts of the stage

00:06:03,120 --> 00:06:07,280
since we're using a simple stage we

00:06:04,639 --> 00:06:08,720
didn't need it

00:06:07,280 --> 00:06:10,479
now that we have the configuration in

00:06:08,720 --> 00:06:13,039
the http client sorted

00:06:10,479 --> 00:06:14,639
it's time to put everything together

00:06:13,039 --> 00:06:15,919
this is the main block of logic in our

00:06:14,639 --> 00:06:17,759
plugin

00:06:15,919 --> 00:06:19,600
i've removed the create new relic event

00:06:17,759 --> 00:06:22,880
function as it's just posting guard to

00:06:19,600 --> 00:06:24,960
the new relic events api

00:06:22,880 --> 00:06:27,199
as you can see we have our class the new

00:06:24,960 --> 00:06:29,919
relic deployment stage class

00:06:27,199 --> 00:06:31,680
what takes a configuration this is the

00:06:29,919 --> 00:06:33,280
same configuration

00:06:31,680 --> 00:06:35,840
we were talking about in our previous

00:06:33,280 --> 00:06:35,840
slide

00:06:36,240 --> 00:06:41,120
we have a main function execute this is

00:06:39,520 --> 00:06:43,440
a function that's called when the stage

00:06:41,120 --> 00:06:45,919
is executed

00:06:43,440 --> 00:06:49,120
this function takes the stage input and

00:06:45,919 --> 00:06:51,039
returns the stage output

00:06:49,120 --> 00:06:52,880
the first thing we do is pull out all of

00:06:51,039 --> 00:06:55,280
the data from the configuration

00:06:52,880 --> 00:06:56,160
and the stage input from the

00:06:55,280 --> 00:06:58,720
configuration

00:06:56,160 --> 00:07:00,080
we pull out the endpoint insert key and

00:06:58,720 --> 00:07:02,160
event type

00:07:00,080 --> 00:07:03,599
and from the stage input we pull out the

00:07:02,160 --> 00:07:07,680
title environment

00:07:03,599 --> 00:07:10,720
change status and execution url

00:07:07,680 --> 00:07:12,319
we then create a new relic event object

00:07:10,720 --> 00:07:13,759
this is an object that's going to be

00:07:12,319 --> 00:07:17,280
turned into json

00:07:13,759 --> 00:07:19,520
and sent to new relic

00:07:17,280 --> 00:07:22,319
we then call our function that's going

00:07:19,520 --> 00:07:24,080
to send the request off to new relic

00:07:22,319 --> 00:07:25,360
this function is going to be passed the

00:07:24,080 --> 00:07:27,520
event to send

00:07:25,360 --> 00:07:30,479
the endpoint to send it to and the

00:07:27,520 --> 00:07:32,000
insert key to authenticate with

00:07:30,479 --> 00:07:34,560
this function then returns us the

00:07:32,000 --> 00:07:34,560
response

00:07:34,960 --> 00:07:40,000
we now need to change status to return

00:07:36,960 --> 00:07:40,000
back to the pipeline

00:07:40,080 --> 00:07:45,360
to get this i check the response code

00:07:43,280 --> 00:07:46,319
if the response code is not 200 we know

00:07:45,360 --> 00:07:49,599
it's failed

00:07:46,319 --> 00:07:54,160
and therefore the stage is terminal

00:07:49,599 --> 00:07:54,160
otherwise we set the stage to succeeded

00:07:54,960 --> 00:08:00,560
we then create the stage output object

00:07:57,680 --> 00:08:03,599
populating it with the response code

00:08:00,560 --> 00:08:04,960
and return that from the function this

00:08:03,599 --> 00:08:08,160
data is then available

00:08:04,960 --> 00:08:09,759
in the pipeline execution

00:08:08,160 --> 00:08:12,080
so now that we've made our first plugin

00:08:09,759 --> 00:08:13,599
what were our main stumbling blocks

00:08:12,080 --> 00:08:16,160
the thing that took us the most time was

00:08:13,599 --> 00:08:17,520
renaming everything

00:08:16,160 --> 00:08:19,599
due to our lack of experience with

00:08:17,520 --> 00:08:21,360
gradle and java packages

00:08:19,599 --> 00:08:23,120
it took us quite a while to make sure

00:08:21,360 --> 00:08:24,160
all the package package references were

00:08:23,120 --> 00:08:25,599
correct

00:08:24,160 --> 00:08:28,160
and make sure the build was working as

00:08:25,599 --> 00:08:29,840
expected

00:08:28,160 --> 00:08:31,919
the second thing we struggled with was

00:08:29,840 --> 00:08:33,919
http client

00:08:31,919 --> 00:08:36,479
we were unable to figure out how to use

00:08:33,919 --> 00:08:38,640
the client provided by orca

00:08:36,479 --> 00:08:40,399
and to make sure we got this plugin

00:08:38,640 --> 00:08:42,080
created in time we decided to go with

00:08:40,399 --> 00:08:43,919
our own client

00:08:42,080 --> 00:08:45,600
we really think it would be better to

00:08:43,919 --> 00:08:47,120
use the one provided by orca in the long

00:08:45,600 --> 00:08:49,760
term and we'll probably look at moving

00:08:47,120 --> 00:08:51,600
to it in the future

00:08:49,760 --> 00:08:54,000
the third thing we struggled with was

00:08:51,600 --> 00:08:55,200
secret substitution

00:08:54,000 --> 00:08:58,880
we were unable to use secret

00:08:55,200 --> 00:09:01,920
substitution in our plugin configuration

00:08:58,880 --> 00:09:03,839
we found out this was because the secret

00:09:01,920 --> 00:09:06,560
substitution was being done

00:09:03,839 --> 00:09:08,160
after the plugin has started this has

00:09:06,560 --> 00:09:10,560
been fixed in v2 of the plug-in

00:09:08,160 --> 00:09:13,200
framework

00:09:10,560 --> 00:09:15,040
in summary the initial setup was hard

00:09:13,200 --> 00:09:16,000
for us due to a lack of experience in

00:09:15,040 --> 00:09:17,440
java

00:09:16,000 --> 00:09:20,480
and having to figure out the objects

00:09:17,440 --> 00:09:22,560
that were being injected to us from orca

00:09:20,480 --> 00:09:24,480
after we got the past initial setup it

00:09:22,560 --> 00:09:26,399
was very easy to make changes

00:09:24,480 --> 00:09:29,360
and we've had no no trouble adding

00:09:26,399 --> 00:09:31,120
features to this plugin

00:09:29,360 --> 00:09:33,120
i'm really keen to write more plugins

00:09:31,120 --> 00:09:37,360
and our team already has many ideas for

00:09:33,120 --> 00:09:39,120
new plugins we could make

00:09:37,360 --> 00:09:47,120
thanks for listening everyone and good

00:09:39,120 --> 00:09:47,120

YouTube URL: https://www.youtube.com/watch?v=LZdqB6bxhc4


