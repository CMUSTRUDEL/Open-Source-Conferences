Title: How we deploy Spinnaker microservice pods via Spinnaker at Pinterest -   Yaqin Li
Publication date: 2021-01-16
Playlist: Spinnaker Summit 2020
Description: 
	Pinterest is a cloud first visual discovery engine that serves over 320MM users. Pinterest built its continuous delivery platform on Spinnaker. And today it’s used to deploy our services to VM hosts, K8S pods and real time data processing framework. In July 2020, Spinnaker averaged 800 deployments daily. In this talk, I share how we designed our CD system to deploy itself. And the topics include: 1. Impact on Spinnaker’s availability & reliability Spinnaker is the foundation of our CD system, and its SLA has critical production impact. In the past, we deployed Spinnaker microservice pods via a command line tool and then manually tested the new deployment,which was prone to human error. I will present our new approach that automates the deployment and rollback of prod Spinnaker with a staging Spinnaker pipeline, which decreased deployment time, increased deployment frequency, and significantly reduced the oncall person’s time spent on deployment, as well as production incidents. 2. Challenge to deploy microservices with complex k8s configmap I will share how we built a Spinnaker custom stage to work with other components of Pinterest’s CD system (Hermez) to deploy to K8S.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:05,440 --> 00:00:11,120
welcome to spinnaker summit

00:00:08,400 --> 00:00:11,759
my name is yatin lee i'm a software

00:00:11,120 --> 00:00:15,200
engineer

00:00:11,759 --> 00:00:19,680
at pinterest pinterest is a cloud

00:00:15,200 --> 00:00:23,199
first visual discovery engine

00:00:19,680 --> 00:00:27,840
that serves more than 442

00:00:23,199 --> 00:00:27,840
millions monthly active users

00:00:27,920 --> 00:00:30,960
hopefully you enjoyed the sessions

00:00:29,920 --> 00:00:33,280
before mine

00:00:30,960 --> 00:00:34,399
and thank you very much for joining my

00:00:33,280 --> 00:00:38,800
session on

00:00:34,399 --> 00:00:41,440
how we deploy spinnaker via spinnaker

00:00:38,800 --> 00:00:43,280
also i want to thank the organizers for

00:00:41,440 --> 00:00:46,480
helping with the

00:00:43,280 --> 00:00:49,520
virtual radio sessions for spinning

00:00:46,480 --> 00:00:49,520
summit this year

00:00:49,920 --> 00:00:56,160
before i walk you through

00:00:52,960 --> 00:00:58,559
my topic i would like to tell a little

00:00:56,160 --> 00:01:01,760
bit more about my team

00:00:58,559 --> 00:01:02,800
my team is the engineering productivity

00:01:01,760 --> 00:01:05,119
team

00:01:02,800 --> 00:01:06,240
our vision is to build a developer

00:01:05,119 --> 00:01:09,040
platform

00:01:06,240 --> 00:01:10,560
that inspires developers to do their

00:01:09,040 --> 00:01:13,680
best work

00:01:10,560 --> 00:01:16,479
our mission is to provide the fast

00:01:13,680 --> 00:01:17,840
safe and delightful path from ideation

00:01:16,479 --> 00:01:21,840
to production

00:01:17,840 --> 00:01:24,479
without worry about infrastructure

00:01:21,840 --> 00:01:25,200
in this session i will share our

00:01:24,479 --> 00:01:28,400
progress

00:01:25,200 --> 00:01:32,880
to leverage the custom stage hermes

00:01:28,400 --> 00:01:32,880
to optimize spinnaker performance

00:01:32,960 --> 00:01:40,000
here is the agenda items for my session

00:01:36,479 --> 00:01:41,280
first the current usage of miniker at

00:01:40,000 --> 00:01:46,240
pinterest

00:01:41,280 --> 00:01:50,799
second i will share some history

00:01:46,240 --> 00:01:50,799
of how we deployed spinnaker in the past

00:01:51,360 --> 00:01:54,960
then after that i will show you the new

00:01:54,479 --> 00:01:58,560
way

00:01:54,960 --> 00:02:02,240
we deploy and roll back spinnaker

00:01:58,560 --> 00:02:05,280
deployment finally i will

00:02:02,240 --> 00:02:08,479
share the progress to leverage

00:02:05,280 --> 00:02:10,959
the custom stage hermes to optimize

00:02:08,479 --> 00:02:15,120
spinnaker performance

00:02:10,959 --> 00:02:15,120
and the future plan

00:02:15,360 --> 00:02:21,040
here is a picture of the spinnaker

00:02:18,319 --> 00:02:21,040
architecture

00:02:21,440 --> 00:02:28,400
as you can see in the screenshot

00:02:25,200 --> 00:02:31,840
there are two orange

00:02:28,400 --> 00:02:35,120
boxes on the left telstra and hermes

00:02:31,840 --> 00:02:39,200
they are the their deployment tools

00:02:35,120 --> 00:02:42,480
developed in-house at pinterest

00:02:39,200 --> 00:02:46,000
spinnaker will call their api to

00:02:42,480 --> 00:02:48,480
implement the deployment we already

00:02:46,000 --> 00:02:52,160
implemented the custom stage

00:02:48,480 --> 00:02:55,200
protection deployment in the past

00:02:52,160 --> 00:02:59,519
now we are in the progress to

00:02:55,200 --> 00:03:02,720
implement the custom stage hermes

00:02:59,519 --> 00:03:05,519
for hermes deployment

00:03:02,720 --> 00:03:07,599
pinterest built is continuous delivery

00:03:05,519 --> 00:03:10,640
system

00:03:07,599 --> 00:03:13,360
platform on spinnaker in september

00:03:10,640 --> 00:03:13,360
2018.

00:03:14,400 --> 00:03:21,519
we use spinnaker to deploy our services

00:03:18,000 --> 00:03:24,799
to virtual machine hosts

00:03:21,519 --> 00:03:29,519
kubernetes parts and the real-time data

00:03:24,799 --> 00:03:29,519
processing framework apache flink

00:03:30,239 --> 00:03:38,239
we onboarded about 50 applications

00:03:34,720 --> 00:03:38,239
including pinterest.com

00:03:39,440 --> 00:03:46,640
almost 400 pipelines

00:03:42,799 --> 00:03:51,120
and averaged 800 deployments

00:03:46,640 --> 00:03:53,840
daily on our broad spinning instance

00:03:51,120 --> 00:03:56,000
spinnaker is a foundation of our

00:03:53,840 --> 00:04:00,480
continuous delivery system

00:03:56,000 --> 00:04:04,159
and is a critical part

00:04:00,480 --> 00:04:04,159
for production deployment

00:04:04,400 --> 00:04:12,080
in the past we

00:04:07,680 --> 00:04:12,080
deployed spinnaker via command line

00:04:12,480 --> 00:04:21,759
what i realized was the process was

00:04:17,359 --> 00:04:25,919
super tedious and prone to error

00:04:21,759 --> 00:04:29,040
to human errors is there a way

00:04:25,919 --> 00:04:33,280
is there a better way to do this

00:04:29,040 --> 00:04:36,320
our team mission is to provide the

00:04:33,280 --> 00:04:40,080
fast safe and the delightful path

00:04:36,320 --> 00:04:40,960
flown and ideation to production without

00:04:40,080 --> 00:04:46,639
worrying about

00:04:40,960 --> 00:04:50,320
infrastructure in order to do this

00:04:46,639 --> 00:04:52,000
we have to use the tools ourselves

00:04:50,320 --> 00:04:54,639
so that we can understand the pain

00:04:52,000 --> 00:04:58,639
points and blockers

00:04:54,639 --> 00:05:02,400
and fix it for our customers to provide

00:04:58,639 --> 00:05:02,400
the best in-class service

00:05:02,639 --> 00:05:10,160
i decided to try to use spinnaker to

00:05:05,520 --> 00:05:12,080
deploy spinning itself

00:05:10,160 --> 00:05:13,840
can i onboard a spinning pipeline to

00:05:12,080 --> 00:05:17,120
deploy spinnaker

00:05:13,840 --> 00:05:20,160
this will be much more efficient

00:05:17,120 --> 00:05:23,199
and systematic

00:05:20,160 --> 00:05:25,919
i immediately set up two new spin

00:05:23,199 --> 00:05:27,919
pipelines on our current environment and

00:05:25,919 --> 00:05:32,160
implemented

00:05:27,919 --> 00:05:36,560
one click button trigger for

00:05:32,160 --> 00:05:36,560
rollback for deployment rollback

00:05:37,120 --> 00:05:40,240
here is a screenshot

00:05:40,880 --> 00:05:48,800
for the one click button deployment

00:05:45,440 --> 00:05:52,320
we can we can pick and

00:05:48,800 --> 00:05:53,919
choose which microservice should be

00:05:52,320 --> 00:05:56,880
deployed

00:05:53,919 --> 00:05:58,199
so it is very flexible for us if we

00:05:56,880 --> 00:06:00,400
don't want to deploy all the

00:05:58,199 --> 00:06:02,880
microservices

00:06:00,400 --> 00:06:04,960
if they if some of them will not be

00:06:02,880 --> 00:06:07,600
changed

00:06:04,960 --> 00:06:08,880
and here is a screenshot for the

00:06:07,600 --> 00:06:11,919
one-click button

00:06:08,880 --> 00:06:14,319
trigger for the rollback if the test

00:06:11,919 --> 00:06:14,319
failed

00:06:14,720 --> 00:06:18,960
the new approach automated the

00:06:17,600 --> 00:06:22,880
deployment

00:06:18,960 --> 00:06:25,840
and rollback decreased deployment time

00:06:22,880 --> 00:06:29,120
and increased deployment frequency as

00:06:25,840 --> 00:06:32,240
well as significantly decreased

00:06:29,120 --> 00:06:32,240
production incidents

00:06:32,639 --> 00:06:37,600
during this period i encountered the

00:06:35,360 --> 00:06:42,800
challenge

00:06:37,600 --> 00:06:45,759
we have to deploy spinning microservices

00:06:42,800 --> 00:06:45,759
via hummus

00:06:47,520 --> 00:06:54,240
hermes didn't support service deployment

00:06:51,199 --> 00:06:57,759
with config map because config

00:06:54,240 --> 00:06:57,759
because there's no column

00:06:58,080 --> 00:07:02,160
to store config map in hermes database

00:07:00,639 --> 00:07:04,900
and there's

00:07:02,160 --> 00:07:07,039
there was no basal rule to

00:07:04,900 --> 00:07:09,759
[Music]

00:07:07,039 --> 00:07:11,199
publish config map emo files on

00:07:09,759 --> 00:07:13,919
artifactory

00:07:11,199 --> 00:07:15,199
at factory is where hermes pulls the

00:07:13,919 --> 00:07:19,280
content from

00:07:15,199 --> 00:07:21,919
and ingests the content into kubernetes

00:07:19,280 --> 00:07:23,360
so i have to implement a new feature on

00:07:21,919 --> 00:07:26,639
hermes

00:07:23,360 --> 00:07:30,479
before i customize

00:07:26,639 --> 00:07:34,000
the new custom stage hermes on spinnaker

00:07:30,479 --> 00:07:34,000
to let it call hermes api

00:07:36,240 --> 00:07:44,160
hummus is the in-house

00:07:40,240 --> 00:07:47,360
develop deployment tool at pinterest

00:07:44,160 --> 00:07:47,360
let me introduce

00:07:48,319 --> 00:07:54,319
commerce to you in more detail

00:07:51,919 --> 00:07:56,840
hermes was initially focusing on

00:07:54,319 --> 00:07:59,759
enabling continuous delivery on

00:07:56,840 --> 00:08:02,160
kubernetes hermes is now

00:07:59,759 --> 00:08:05,120
being imbued with the capacity to

00:08:02,160 --> 00:08:08,800
support other computing platforms

00:08:05,120 --> 00:08:11,520
hermes is designed to provide a single

00:08:08,800 --> 00:08:12,879
streamlined user interface for

00:08:11,520 --> 00:08:15,919
continuous delivery

00:08:12,879 --> 00:08:19,919
at pinterest after

00:08:15,919 --> 00:08:22,319
some efforts the new custom stage hermes

00:08:19,919 --> 00:08:26,080
looks like this

00:08:22,319 --> 00:08:28,400
as you can see in the screenshot

00:08:26,080 --> 00:08:29,280
only have to input some necessary

00:08:28,400 --> 00:08:33,919
parameters

00:08:29,280 --> 00:08:33,919
to trigger the microservice deployment

00:08:35,360 --> 00:08:43,919
and we can also see the

00:08:41,760 --> 00:08:46,240
slaters of our running parts in

00:08:43,919 --> 00:08:49,360
kubernetes

00:08:46,240 --> 00:08:52,160
in this screenshot you can see the

00:08:49,360 --> 00:08:55,040
there are two running ports in

00:08:52,160 --> 00:08:58,080
kubernetes for micro service orca

00:08:55,040 --> 00:08:58,080
on hermes ui

00:08:58,720 --> 00:09:04,560
although i implemented the one

00:09:01,839 --> 00:09:05,360
click button trigger for deployment and

00:09:04,560 --> 00:09:10,480
rollback

00:09:05,360 --> 00:09:10,480
on both plot and the staging spinnaker

00:09:10,720 --> 00:09:14,880
there are still some pain points which

00:09:13,279 --> 00:09:18,000
motivates me to look into

00:09:14,880 --> 00:09:18,000
more improvements

00:09:18,640 --> 00:09:26,959
my goal is to automate the whole process

00:09:23,760 --> 00:09:30,000
which includes both staging and approach

00:09:26,959 --> 00:09:34,160
deployment and

00:09:30,000 --> 00:09:37,839
tie them together in one pipeline

00:09:34,160 --> 00:09:37,839
the pipeline should look like this

00:09:37,920 --> 00:09:41,920
we first deploy the staging instance and

00:09:40,320 --> 00:09:45,200
then test

00:09:41,920 --> 00:09:47,360
after the test a

00:09:45,200 --> 00:09:49,120
select notification for manual judgment

00:09:47,360 --> 00:09:52,800
will be published

00:09:49,120 --> 00:09:56,240
and i can go to this pipeline continue

00:09:52,800 --> 00:09:59,440
if i choose option to promote a prod

00:09:56,240 --> 00:10:01,600
it will choose the branch past

00:09:59,440 --> 00:10:03,600
and the same version will be deployed to

00:10:01,600 --> 00:10:08,079
prod

00:10:03,600 --> 00:10:08,079
if i choose the option to roll back

00:10:08,240 --> 00:10:11,920
the stage instance will be rolled back

00:10:10,800 --> 00:10:16,160
and the pipeline

00:10:11,920 --> 00:10:17,279
will end here this can be achieved by

00:10:16,160 --> 00:10:19,839
the following

00:10:17,279 --> 00:10:19,839
steps

00:10:21,200 --> 00:10:25,680
one set up another spinnaker instance

00:10:25,760 --> 00:10:28,880
since we only have two spinning

00:10:28,240 --> 00:10:32,240
instances

00:10:28,880 --> 00:10:35,920
the plot and the staging we need another

00:10:32,240 --> 00:10:37,279
spinnaker instance which could automate

00:10:35,920 --> 00:10:40,160
the whole process

00:10:37,279 --> 00:10:42,640
including staging and pro deployment and

00:10:40,160 --> 00:10:42,640
testing

00:10:42,720 --> 00:10:47,360
to implement a custom stage to call

00:10:45,760 --> 00:10:51,839
homeless api to

00:10:47,360 --> 00:10:55,040
grow back the micro service deployment

00:10:51,839 --> 00:10:58,839
if the test failed

00:10:55,040 --> 00:11:00,240
this needs work on both spinnaker and

00:10:58,839 --> 00:11:02,959
hermes

00:11:00,240 --> 00:11:05,839
three implement a custom stage to

00:11:02,959 --> 00:11:09,120
triggers minika pipeline

00:11:05,839 --> 00:11:12,800
currently for the test stage

00:11:09,120 --> 00:11:15,760
we don't have a paved path

00:11:12,800 --> 00:11:17,600
to treat the spinning pipeline in the

00:11:15,760 --> 00:11:20,160
future

00:11:17,600 --> 00:11:22,399
i will implement a custom stage to

00:11:20,160 --> 00:11:25,120
trigger

00:11:22,399 --> 00:11:26,000
a spinning pipeline or an instance to

00:11:25,120 --> 00:11:29,839
facilitate

00:11:26,000 --> 00:11:32,720
our spinnaker users

00:11:29,839 --> 00:11:34,240
finally we will migrate our spinnaker

00:11:32,720 --> 00:11:37,279
users to use

00:11:34,240 --> 00:11:39,760
all the new custom stages after our dog

00:11:37,279 --> 00:11:39,760
footing

00:11:41,279 --> 00:11:48,720
thanks for watching it is great

00:11:45,440 --> 00:11:51,519
having you here in this session with me

00:11:48,720 --> 00:11:52,720
hopefully you enjoyed my session since

00:11:51,519 --> 00:11:55,920
there are many ways

00:11:52,720 --> 00:11:58,079
to do things on spinnaker if you have a

00:11:55,920 --> 00:12:01,600
bad idea or suggestion

00:11:58,079 --> 00:12:05,200
let me know any feedback

00:12:01,600 --> 00:12:07,440
and questions are welcome please feel

00:12:05,200 --> 00:12:11,440
free to contact me at yachtingly

00:12:07,440 --> 00:12:15,279
pinterest.com thanks again for your time

00:12:11,440 --> 00:12:22,399
stay safe and enjoy the wonderful rest

00:12:15,279 --> 00:12:22,399

YouTube URL: https://www.youtube.com/watch?v=2gkJoyQW9uY


