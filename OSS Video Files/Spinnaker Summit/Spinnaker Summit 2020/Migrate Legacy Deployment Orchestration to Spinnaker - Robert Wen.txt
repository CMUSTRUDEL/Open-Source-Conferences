Title: Migrate Legacy Deployment Orchestration to Spinnaker - Robert Wen
Publication date: 2021-01-17
Playlist: Spinnaker Summit 2020
Description: 
	This presentation takes audience through a journey to migrate from legacy deployment orchestration to Spinnaker. The legacy CD is a combination of TeamCity, command line tools, DCOS, slack and meetings. This scenario has multiple issues across security, change control and release management. Given TeamCity serves as both CI and CD, it has access across trust domains and failed the least privilege principle. In this scenario, deployment change control is limited due to relatively open permissions. Deployment pipeline configurations vary greatly and is lack of standardization. As a result, enforcing release processes is becoming more difficult especially when more micro-services are deployed into production. To improve deployment orchestration's security, efficiency, and manageability, launched deployment orchestration by Spinnaker. After migration to Spinnaker, we are able to standardize deployment pipelines, define and enforce permission policies, streamline release processes, enforce change control and separate CI from CD and reduce manual actions. As a result, release cycle reliability and efficiency are greatly improved.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:10,639 --> 00:00:16,400
hi

00:00:11,360 --> 00:00:18,480
my name is robert wen from salesforce

00:00:16,400 --> 00:00:19,840
thank you for joining today's

00:00:18,480 --> 00:00:24,640
presentation

00:00:19,840 --> 00:00:26,880
at splinter summit 2020

00:00:24,640 --> 00:00:27,760
in the following presentation i'm

00:00:26,880 --> 00:00:30,800
delighted

00:00:27,760 --> 00:00:33,600
to share with you our use

00:00:30,800 --> 00:00:36,320
of spinnaker as a deployment

00:00:33,600 --> 00:00:39,600
orchestration tool

00:00:36,320 --> 00:00:42,719
let me start sharing

00:00:39,600 --> 00:00:43,360
today's presentation is about our

00:00:42,719 --> 00:00:48,160
journey

00:00:43,360 --> 00:00:51,280
to spinnaker deployment orchestration

00:00:48,160 --> 00:00:55,360
in this presentation the story is about

00:00:51,280 --> 00:00:58,960
migrating from a legacy cicd environment

00:00:55,360 --> 00:01:00,960
to spinnaker cd a little bit about

00:00:58,960 --> 00:01:03,600
myself

00:01:00,960 --> 00:01:05,600
i'm part of the einstein production

00:01:03,600 --> 00:01:09,040
engineering group

00:01:05,600 --> 00:01:10,320
my responsibility is primarily it's

00:01:09,040 --> 00:01:13,920
about

00:01:10,320 --> 00:01:17,759
ci cd devops developer

00:01:13,920 --> 00:01:20,799
productivity mainly me and my team

00:01:17,759 --> 00:01:24,000
responsible for the cicd

00:01:20,799 --> 00:01:25,360
pipelines for our group

00:01:24,000 --> 00:01:27,840
a little bit background of this

00:01:25,360 --> 00:01:27,840
presentation

00:01:28,400 --> 00:01:32,400
in our team we have been operating a

00:01:30,640 --> 00:01:35,600
legacy ci cd

00:01:32,400 --> 00:01:36,320
using teamcity it's been going on for

00:01:35,600 --> 00:01:40,079
quite a while

00:01:36,320 --> 00:01:44,560
for over the years we encounter

00:01:40,079 --> 00:01:46,720
more and more challenges facing the cicd

00:01:44,560 --> 00:01:47,680
primarily because of the growth of

00:01:46,720 --> 00:01:52,159
business

00:01:47,680 --> 00:01:56,079
the growth of engineering activities

00:01:52,159 --> 00:01:59,840
so team city serves as both both a cicd

00:01:56,079 --> 00:02:02,799
solution uh one of the main problem is

00:01:59,840 --> 00:02:07,200
is able to access to

00:02:02,799 --> 00:02:12,640
production environments uh on this point

00:02:07,200 --> 00:02:12,640
does fail the least privileged principle

00:02:12,720 --> 00:02:17,120
it's difficult to enforce consistent

00:02:15,120 --> 00:02:20,560
permission and deployment

00:02:17,120 --> 00:02:24,640
policies when it comes to

00:02:20,560 --> 00:02:28,000
release time getting the release

00:02:24,640 --> 00:02:32,959
require constant monitoring and

00:02:28,000 --> 00:02:35,840
menu actions as a result

00:02:32,959 --> 00:02:36,800
deployment orchestration was becoming a

00:02:35,840 --> 00:02:40,640
much higher

00:02:36,800 --> 00:02:43,840
priority this is a current diagram

00:02:40,640 --> 00:02:44,879
representing the the old way or the

00:02:43,840 --> 00:02:48,640
legacy way

00:02:44,879 --> 00:02:52,000
of ci cd basically both ci cd

00:02:48,640 --> 00:02:52,800
are implemented by team city as we can

00:02:52,000 --> 00:02:55,920
see

00:02:52,800 --> 00:02:59,120
the github is the source control

00:02:55,920 --> 00:02:59,599
we trigger build from github in team

00:02:59,120 --> 00:03:01,599
city

00:02:59,599 --> 00:03:04,159
through the constructions building of

00:03:01,599 --> 00:03:07,200
binaries and testing

00:03:04,159 --> 00:03:11,120
in turn team city published artifacts

00:03:07,200 --> 00:03:14,480
to docker registry and artifactory

00:03:11,120 --> 00:03:15,519
team city of surfing as a deployment

00:03:14,480 --> 00:03:18,720
tool

00:03:15,519 --> 00:03:22,239
so it would deploy the

00:03:18,720 --> 00:03:26,720
targeted image into

00:03:22,239 --> 00:03:28,959
our kubernetes clusters in kubernetes

00:03:26,720 --> 00:03:29,840
we group the clusters in terms of

00:03:28,959 --> 00:03:32,080
environments

00:03:29,840 --> 00:03:33,840
so we have depth environment staging now

00:03:32,080 --> 00:03:36,400
scene and production

00:03:33,840 --> 00:03:37,680
as you can see it does directly can

00:03:36,400 --> 00:03:41,680
deploy to

00:03:37,680 --> 00:03:44,480
production that's one of the issues we

00:03:41,680 --> 00:03:44,480
like to address

00:03:44,560 --> 00:03:49,360
in a new way of ci cds we separate ci

00:03:48,319 --> 00:03:52,560
from cd

00:03:49,360 --> 00:03:55,280
team city primarily sir still serves as

00:03:52,560 --> 00:03:58,480
ci solution

00:03:55,280 --> 00:04:01,840
while spinnaker will take over the

00:03:58,480 --> 00:04:01,840
continuous delivery

00:04:02,239 --> 00:04:05,519
as you can see from this diagram again

00:04:04,319 --> 00:04:07,920
in ci

00:04:05,519 --> 00:04:08,879
space team city will take the source

00:04:07,920 --> 00:04:12,000
code from

00:04:08,879 --> 00:04:16,079
github and do build testing

00:04:12,000 --> 00:04:20,639
then publish to register registry

00:04:16,079 --> 00:04:23,840
and artifactory on the cd side

00:04:20,639 --> 00:04:26,720
spinnaker will listen to the change

00:04:23,840 --> 00:04:30,639
docker registry

00:04:26,720 --> 00:04:34,560
and for depending upon the applications

00:04:30,639 --> 00:04:37,199
configuration and pipeline configuration

00:04:34,560 --> 00:04:38,160
it will trigger a new deployment into

00:04:37,199 --> 00:04:43,199
kubernetes

00:04:38,160 --> 00:04:46,720
clusters for different environments

00:04:43,199 --> 00:04:47,600
each pipeline for different environment

00:04:46,720 --> 00:04:50,639
that may adjust

00:04:47,600 --> 00:04:51,600
maybe adjust differently depends on the

00:04:50,639 --> 00:04:55,759
pipeline

00:04:51,600 --> 00:04:59,040
policy so there are several phases

00:04:55,759 --> 00:05:02,320
in this journey first we install

00:04:59,040 --> 00:05:05,360
the armory spinnaker

00:05:02,320 --> 00:05:09,919
and then we prepare to

00:05:05,360 --> 00:05:11,199
order for prepare the deployment jobs in

00:05:09,919 --> 00:05:13,759
in spinnaker

00:05:11,199 --> 00:05:15,520
in this phase we first need to identify

00:05:13,759 --> 00:05:18,320
active deployment jobs in

00:05:15,520 --> 00:05:19,120
team city and more importantly

00:05:18,320 --> 00:05:22,320
communicate

00:05:19,120 --> 00:05:25,520
with all stakeholders about change in

00:05:22,320 --> 00:05:29,600
architecture policies and

00:05:25,520 --> 00:05:32,080
processes in the next construction phase

00:05:29,600 --> 00:05:33,039
we construct matching deployment

00:05:32,080 --> 00:05:36,320
pipelines

00:05:33,039 --> 00:05:38,720
in spinnaker matching this means

00:05:36,320 --> 00:05:41,360
matching the existing deployment jobs in

00:05:38,720 --> 00:05:41,360
team city

00:05:41,440 --> 00:05:45,919
and lastly during the risk enhancement

00:05:45,039 --> 00:05:49,680
phase

00:05:45,919 --> 00:05:53,440
we enforce change control records

00:05:49,680 --> 00:05:56,720
robot policies and issue tracking

00:05:53,440 --> 00:05:57,600
integration in first phase we set up the

00:05:56,720 --> 00:06:01,520
spinnaker

00:05:57,600 --> 00:06:04,000
in as kubernetes clusters

00:06:01,520 --> 00:06:04,639
there's some core features application

00:06:04,000 --> 00:06:07,759
management

00:06:04,639 --> 00:06:10,400
application deployment pipelines and

00:06:07,759 --> 00:06:11,120
kubernetes provider so these are core

00:06:10,400 --> 00:06:13,759
features

00:06:11,120 --> 00:06:13,759
we install

00:06:14,400 --> 00:06:20,880
and second important feature is for

00:06:17,759 --> 00:06:24,080
off c for uh role-based

00:06:20,880 --> 00:06:27,199
access control why do we need that

00:06:24,080 --> 00:06:28,960
and well one main reason is we strict

00:06:27,199 --> 00:06:31,520
access to applications

00:06:28,960 --> 00:06:33,120
pipelines and accounts it's very

00:06:31,520 --> 00:06:37,039
difficult to achieve those

00:06:33,120 --> 00:06:38,479
objectives in the legacy ci cd using

00:06:37,039 --> 00:06:42,000
teamcity

00:06:38,479 --> 00:06:46,639
we also can customize permissions for

00:06:42,000 --> 00:06:48,479
automatic and menu pipeline triggers

00:06:46,639 --> 00:06:49,759
and of course another very important

00:06:48,479 --> 00:06:53,440
aspect of this

00:06:49,759 --> 00:06:56,240
is we need this feature to meet security

00:06:53,440 --> 00:06:56,240
requirements

00:06:58,240 --> 00:07:03,919
another key feature we need to

00:07:01,599 --> 00:07:04,880
install for spinnaker is pipeline as

00:07:03,919 --> 00:07:06,639
code

00:07:04,880 --> 00:07:08,319
so public configurations are defined in

00:07:06,639 --> 00:07:10,319
github

00:07:08,319 --> 00:07:11,680
and pipeline changes require pull

00:07:10,319 --> 00:07:14,800
request review

00:07:11,680 --> 00:07:18,240
just like you developing code for

00:07:14,800 --> 00:07:18,240
application or server

00:07:18,880 --> 00:07:23,120
with pipeline and scope we can restrict

00:07:21,280 --> 00:07:27,599
who can apply

00:07:23,120 --> 00:07:30,319
code change all these features combined

00:07:27,599 --> 00:07:32,960
will help to meet the change control

00:07:30,319 --> 00:07:32,960
requirements

00:07:33,360 --> 00:07:38,800
so in preparation phase we need to

00:07:36,639 --> 00:07:41,840
identify active department jobs

00:07:38,800 --> 00:07:41,840
in team city

00:07:42,800 --> 00:07:47,840
based on our research the number of

00:07:46,160 --> 00:07:51,280
application services

00:07:47,840 --> 00:07:52,240
uh their total 20 plus and number of

00:07:51,280 --> 00:07:54,639
environments

00:07:52,240 --> 00:07:57,360
will have five plus environments

00:07:54,639 --> 00:08:01,520
including production

00:07:57,360 --> 00:08:03,840
and we start with the release records

00:08:01,520 --> 00:08:05,919
then look for the configurations that

00:08:03,840 --> 00:08:09,599
include build steps

00:08:05,919 --> 00:08:09,599
that call home commands

00:08:10,400 --> 00:08:15,360
there are there exists home charts they

00:08:13,360 --> 00:08:18,000
are accessible from spinnaker

00:08:15,360 --> 00:08:18,720
uh of course then obviously we need to

00:08:18,000 --> 00:08:21,759
identify

00:08:18,720 --> 00:08:26,240
those home charts those helm charts

00:08:21,759 --> 00:08:28,720
will be used by spinnaker as well

00:08:26,240 --> 00:08:30,879
this is a typical example when we look

00:08:28,720 --> 00:08:34,320
at team city configuration

00:08:30,879 --> 00:08:38,839
we we look up the build steps

00:08:34,320 --> 00:08:40,800
involve invoking helm

00:08:38,839 --> 00:08:43,120
client

00:08:40,800 --> 00:08:45,120
what do in preparation is very very

00:08:43,120 --> 00:08:47,680
important to communicate a migration

00:08:45,120 --> 00:08:50,160
plan to all stakeholders

00:08:47,680 --> 00:08:51,920
we need to engage all stakeholders about

00:08:50,160 --> 00:08:55,279
configuration changes

00:08:51,920 --> 00:08:57,920
and more importantly expectations

00:08:55,279 --> 00:08:59,600
so what changes are coming it's very

00:08:57,920 --> 00:09:02,880
important to communicate with

00:08:59,600 --> 00:09:04,800
all stakeholders

00:09:02,880 --> 00:09:09,680
some of the key changes are coming up

00:09:04,800 --> 00:09:14,160
including standardization so we

00:09:09,680 --> 00:09:17,040
our team own the pipeline templates

00:09:14,160 --> 00:09:18,000
is easier to support organization on

00:09:17,040 --> 00:09:21,360
board new service

00:09:18,000 --> 00:09:24,480
and audit we

00:09:21,360 --> 00:09:25,680
implement opinionated permissions what i

00:09:24,480 --> 00:09:29,279
mean is

00:09:25,680 --> 00:09:33,760
we define well defined groups and

00:09:29,279 --> 00:09:38,880
asset control we start from scratch

00:09:33,760 --> 00:09:38,880
and configure opinionated permissions

00:09:39,040 --> 00:09:42,720
one some examples for example

00:09:41,839 --> 00:09:46,320
productions

00:09:42,720 --> 00:09:50,959
can only can only

00:09:46,320 --> 00:09:54,959
trigger by dedicated personnel

00:09:50,959 --> 00:09:58,000
pipeline is code changes configurations

00:09:54,959 --> 00:09:59,680
and review pool request process we

00:09:58,000 --> 00:10:03,839
separate ci from city

00:09:59,680 --> 00:10:07,120
so teamcity remain serving the bill and

00:10:03,839 --> 00:10:08,079
and he removed the ability i will remove

00:10:07,120 --> 00:10:11,279
the team city

00:10:08,079 --> 00:10:11,279
ability to deploy

00:10:12,720 --> 00:10:19,600
we hope to achieve automated

00:10:16,839 --> 00:10:20,000
releases what that means we integrate

00:10:19,600 --> 00:10:23,200
with

00:10:20,000 --> 00:10:24,320
end-to-end tests in pipelines coupled

00:10:23,200 --> 00:10:28,480
with robot

00:10:24,320 --> 00:10:28,480
and issue tracking integration

00:10:30,079 --> 00:10:33,760
in the next construction phase in this

00:10:33,200 --> 00:10:37,279
phase

00:10:33,760 --> 00:10:39,440
we are constructing the pipelines

00:10:37,279 --> 00:10:40,959
for each active application service in

00:10:39,440 --> 00:10:45,360
production

00:10:40,959 --> 00:10:46,720
we we must standardize the pipelines

00:10:45,360 --> 00:10:49,680
what that means is including the

00:10:46,720 --> 00:10:50,079
following we carry forward and force the

00:10:49,680 --> 00:10:54,079
same

00:10:50,079 --> 00:10:57,760
release process from the legacy cicd

00:10:54,079 --> 00:11:00,959
environment so the same release process

00:10:57,760 --> 00:11:02,399
one reason we do that is we have the

00:11:00,959 --> 00:11:05,040
same release process but

00:11:02,399 --> 00:11:08,480
it was difficult to enforce in the

00:11:05,040 --> 00:11:08,480
legacy cicd system

00:11:08,880 --> 00:11:15,519
that pipeline auto deploy when new

00:11:12,000 --> 00:11:18,160
that view is published staging

00:11:15,519 --> 00:11:20,399
pipeline triggers if that deployment has

00:11:18,160 --> 00:11:22,720
passed

00:11:20,399 --> 00:11:23,519
production pipeline trigger conditions

00:11:22,720 --> 00:11:26,560
include

00:11:23,519 --> 00:11:29,680
passing staging deployment tests

00:11:26,560 --> 00:11:33,600
and manual judgment by release manager

00:11:29,680 --> 00:11:33,600
or authorized personnel

00:11:34,320 --> 00:11:39,920
another key aspect of doing construction

00:11:37,200 --> 00:11:43,040
is use pipeline as code

00:11:39,920 --> 00:11:43,760
we create github repo for python code we

00:11:43,040 --> 00:11:48,560
enable

00:11:43,760 --> 00:11:52,079
pull request review and define common

00:11:48,560 --> 00:11:56,000
pipeline stage modules for example

00:11:52,079 --> 00:11:58,959
baking create namespace deploy manifest

00:11:56,000 --> 00:12:01,040
restrict window and invoke integration

00:11:58,959 --> 00:12:03,360
test

00:12:01,040 --> 00:12:04,959
so for each active application or

00:12:03,360 --> 00:12:08,399
service in production

00:12:04,959 --> 00:12:11,600
we coordinate moving deployment jobs to

00:12:08,399 --> 00:12:15,519
spinnakers with magnetic developers

00:12:11,600 --> 00:12:18,079
and sres and project managers

00:12:15,519 --> 00:12:18,720
we tested spinnaker pipeline once it

00:12:18,079 --> 00:12:20,959
works

00:12:18,720 --> 00:12:23,040
we disable its corresponding deployment

00:12:20,959 --> 00:12:25,120
jobs in teamcity

00:12:23,040 --> 00:12:26,880
we inform the service step teams about

00:12:25,120 --> 00:12:30,079
pipeline update

00:12:26,880 --> 00:12:33,519
and announce progress to all state

00:12:30,079 --> 00:12:34,480
holders this is again this very critical

00:12:33,519 --> 00:12:37,600
aspect

00:12:34,480 --> 00:12:41,440
of migrate this journey

00:12:37,600 --> 00:12:44,480
to migrate to spinaker to ensure

00:12:41,440 --> 00:12:45,600
a smooth experience for all stakeholder

00:12:44,480 --> 00:12:48,560
holders

00:12:45,600 --> 00:12:49,279
but we must communicate very well each

00:12:48,560 --> 00:12:53,839
phase

00:12:49,279 --> 00:12:53,839
of the migration

00:12:53,920 --> 00:12:57,279
this is a sample pipeline execution i

00:12:56,079 --> 00:13:01,040
can see

00:12:57,279 --> 00:13:02,320
and this is a we we have a first phase

00:13:01,040 --> 00:13:06,000
find the

00:13:02,320 --> 00:13:09,680
daca image from another pipeline

00:13:06,000 --> 00:13:13,839
we use its version to do

00:13:09,680 --> 00:13:16,480
uh baking manifest uh and then we deploy

00:13:13,839 --> 00:13:17,279
we have also a manual judgment for

00:13:16,480 --> 00:13:20,560
deployment

00:13:17,279 --> 00:13:23,519
in this case particularly important for

00:13:20,560 --> 00:13:24,720
production deployment and then we deploy

00:13:23,519 --> 00:13:27,519
the

00:13:24,720 --> 00:13:28,720
the surface itself after deploying

00:13:27,519 --> 00:13:32,320
service

00:13:28,720 --> 00:13:35,440
we run the integration test also notify

00:13:32,320 --> 00:13:37,600
the data door so all each

00:13:35,440 --> 00:13:38,560
of this deployment there will be a data

00:13:37,600 --> 00:13:42,160
dot event

00:13:38,560 --> 00:13:42,160
so we can review and keep track

00:13:42,880 --> 00:13:47,360
there's some sample modules um just

00:13:45,440 --> 00:13:50,000
representing the previous slide

00:13:47,360 --> 00:13:50,560
so just module to find the docker image

00:13:50,000 --> 00:13:53,360
there's

00:13:50,560 --> 00:13:54,639
uh the bait module for baking the

00:13:53,360 --> 00:13:58,160
manifest

00:13:54,639 --> 00:14:02,079
um and and for the creating namespace

00:13:58,160 --> 00:14:04,959
and deployment the surface itself

00:14:02,079 --> 00:14:07,040
followed by this is a trigger typical a

00:14:04,959 --> 00:14:11,440
crown trigger happened to be

00:14:07,040 --> 00:14:11,440
to be on wednesday 3 15.

00:14:14,399 --> 00:14:21,199
during the migration to spinnaker

00:14:17,920 --> 00:14:24,639
we might discover

00:14:21,199 --> 00:14:28,320
pipeline complexities which

00:14:24,639 --> 00:14:30,160
change from one service to the other

00:14:28,320 --> 00:14:31,519
we need to clarify the pipeline

00:14:30,160 --> 00:14:34,639
dependencies

00:14:31,519 --> 00:14:38,160
and deploy manifest

00:14:34,639 --> 00:14:40,240
types with development teams

00:14:38,160 --> 00:14:41,279
during this process we have been

00:14:40,240 --> 00:14:44,720
improving

00:14:41,279 --> 00:14:48,320
shareable modules to allow easier module

00:14:44,720 --> 00:14:50,639
reuse for example including background

00:14:48,320 --> 00:14:53,279
jobs in deploy manifest stage

00:14:50,639 --> 00:14:54,160
with another example is customized stage

00:14:53,279 --> 00:14:58,079
to call

00:14:54,160 --> 00:15:01,360
tests in team city but this is just like

00:14:58,079 --> 00:15:03,279
some sample um module

00:15:01,360 --> 00:15:06,320
uh for example you might on the left

00:15:03,279 --> 00:15:08,160
hand side you might you have a

00:15:06,320 --> 00:15:09,440
module which just deployed background

00:15:08,160 --> 00:15:11,760
jobs uh

00:15:09,440 --> 00:15:13,120
what that means is the deploying the

00:15:11,760 --> 00:15:15,440
application service

00:15:13,120 --> 00:15:16,560
does not depend on completion of the

00:15:15,440 --> 00:15:18,399
background jobs

00:15:16,560 --> 00:15:20,160
the background draws to continue like a

00:15:18,399 --> 00:15:25,199
con job continue

00:15:20,160 --> 00:15:25,199
or over time however the

00:15:25,360 --> 00:15:30,399
that application service does depend on

00:15:27,920 --> 00:15:33,199
that you need

00:15:30,399 --> 00:15:33,440
they need jobs only if they need jobs

00:15:33,199 --> 00:15:38,720
and

00:15:33,440 --> 00:15:38,720
in this case sample app will continue

00:15:38,839 --> 00:15:41,920
deployment

00:15:40,399 --> 00:15:43,600
and on the right hand side just an

00:15:41,920 --> 00:15:46,880
example of background job

00:15:43,600 --> 00:15:50,240
in in spinnaker

00:15:46,880 --> 00:15:53,199
module we can say we can

00:15:50,240 --> 00:15:55,839
specify that this job doesn't fail the

00:15:53,199 --> 00:15:55,839
pipeline

00:15:59,600 --> 00:16:03,759
the next aspect of construction is where

00:16:01,920 --> 00:16:06,240
you need to collaborate

00:16:03,759 --> 00:16:08,880
closely with dev teams who provide

00:16:06,240 --> 00:16:10,959
up-to-date status on regular basis

00:16:08,880 --> 00:16:14,399
we communicate with all depth teams

00:16:10,959 --> 00:16:16,560
about spinning a pipeline progress

00:16:14,399 --> 00:16:18,000
these are following key points when you

00:16:16,560 --> 00:16:20,720
need to communicate

00:16:18,000 --> 00:16:23,120
including how non-pro pipeline works how

00:16:20,720 --> 00:16:25,199
to deploy to prague

00:16:23,120 --> 00:16:26,800
how schedules released and how fixed

00:16:25,199 --> 00:16:30,480
release work

00:16:26,800 --> 00:16:33,839
what permission policy change impacts

00:16:30,480 --> 00:16:37,120
deployments and the

00:16:33,839 --> 00:16:39,920
benefits in the new spinnaker

00:16:37,120 --> 00:16:40,880
deployments which is something which

00:16:39,920 --> 00:16:43,440
something

00:16:40,880 --> 00:16:44,959
is very difficult difficult to achieve

00:16:43,440 --> 00:16:48,320
in the legacy ci cd

00:16:44,959 --> 00:16:48,320
using teamcity

00:16:49,120 --> 00:16:56,480
and last but not the least we need to

00:16:52,560 --> 00:16:59,759
update the release playbook therefore

00:16:56,480 --> 00:17:02,959
and all the stakeholders will be aware

00:16:59,759 --> 00:17:04,559
of the upcoming changes in regular

00:17:02,959 --> 00:17:07,760
release

00:17:04,559 --> 00:17:11,520
half phase or year release

00:17:07,760 --> 00:17:11,520
during the release enhancement phase

00:17:12,880 --> 00:17:17,360
with spinnaker as deployment

00:17:15,439 --> 00:17:20,319
orchestration tool

00:17:17,360 --> 00:17:21,039
we're able to enable touchless

00:17:20,319 --> 00:17:24,079
counterless

00:17:21,039 --> 00:17:27,199
releases what i mean by

00:17:24,079 --> 00:17:30,559
that is in the legacy environment

00:17:27,199 --> 00:17:31,200
get more coordination meetings make sure

00:17:30,559 --> 00:17:33,840
that

00:17:31,200 --> 00:17:36,640
we list on time and make sure that all

00:17:33,840 --> 00:17:39,600
the dependencies between pipelines are

00:17:36,640 --> 00:17:41,120
implemented and forced with spinnaker we

00:17:39,600 --> 00:17:43,600
can define this

00:17:41,120 --> 00:17:45,520
in the spinnaker config configurations

00:17:43,600 --> 00:17:49,679
for application services

00:17:45,520 --> 00:17:53,039
and pipelines therefore not just

00:17:49,679 --> 00:17:56,320
reduce reduced number of meetings

00:17:53,039 --> 00:18:00,160
also can enforce these policies between

00:17:56,320 --> 00:18:04,640
regarding dependency between pipelines

00:18:00,160 --> 00:18:08,960
as well as permissions against

00:18:04,640 --> 00:18:08,960
service accounts or user accounts

00:18:10,240 --> 00:18:16,160
as a result we require less

00:18:13,360 --> 00:18:18,880
these meetings we streamline scheduled

00:18:16,160 --> 00:18:22,080
ad hoc and half fixed releases

00:18:18,880 --> 00:18:25,360
we are able to enable our automatic

00:18:22,080 --> 00:18:27,600
post deployment validation tests

00:18:25,360 --> 00:18:29,200
we prevent unexpected release failure

00:18:27,600 --> 00:18:32,480
due to a lot of change control

00:18:29,200 --> 00:18:35,280
in legacy ci cd where

00:18:32,480 --> 00:18:36,000
as a result we also end up able to we

00:18:35,280 --> 00:18:40,559
are able to

00:18:36,000 --> 00:18:40,559
achieve more reliable and repeatable

00:18:40,840 --> 00:18:46,640
deployments

00:18:43,360 --> 00:18:51,280
in conclusion just what is

00:18:46,640 --> 00:18:54,799
what why how about this journey

00:18:51,280 --> 00:18:57,280
we separate ci and cd we

00:18:54,799 --> 00:18:58,480
we need enforce deployment security

00:18:57,280 --> 00:19:02,559
policy

00:18:58,480 --> 00:19:04,559
change control pipeline standardization

00:19:02,559 --> 00:19:05,600
we are able to streamline release

00:19:04,559 --> 00:19:08,840
processes

00:19:05,600 --> 00:19:10,880
for scheduled and unscheduled

00:19:08,840 --> 00:19:14,400
deployments

00:19:10,880 --> 00:19:16,559
we identify all existing

00:19:14,400 --> 00:19:19,600
active deployment pipelines in legacy

00:19:16,559 --> 00:19:22,640
cicd in teamcity

00:19:19,600 --> 00:19:23,600
based on that we set up standardized

00:19:22,640 --> 00:19:26,799
pipelines

00:19:23,600 --> 00:19:26,799
in spinnaker

00:19:27,120 --> 00:19:31,280
in the meantime we keep team city

00:19:29,840 --> 00:19:36,080
serving ci

00:19:31,280 --> 00:19:40,960
while managed cd in spinaker

00:19:36,080 --> 00:19:44,080
with all this effort during this journey

00:19:40,960 --> 00:19:47,440
we continue to improve the pipelines and

00:19:44,080 --> 00:19:50,640
modules and as a result

00:19:47,440 --> 00:19:55,120
the new service new applications

00:19:50,640 --> 00:19:55,120
or new engineering activities

00:19:55,440 --> 00:20:00,240
with spinning class as deployment

00:19:57,600 --> 00:20:03,600
orchestration

00:20:00,240 --> 00:20:06,320
we were able to to improve

00:20:03,600 --> 00:20:08,480
onboarding new service updating existing

00:20:06,320 --> 00:20:12,640
services

00:20:08,480 --> 00:20:17,919
and more importantly deliver

00:20:12,640 --> 00:20:17,919
value for our stakeholders

00:20:18,159 --> 00:20:26,159
as a result we can be more confident

00:20:22,000 --> 00:20:30,159
in expanding our engineering activities

00:20:26,159 --> 00:20:30,159
in order to meet the business growth

00:20:31,120 --> 00:20:38,080
thank you i'm happy to

00:20:34,960 --> 00:20:40,640
to hear more questions uh or input feel

00:20:38,080 --> 00:20:45,360
free to reach out to me

00:20:40,640 --> 00:20:45,360
hope you enjoy the rest of spin cut

00:20:46,840 --> 00:20:49,840
summit

00:20:50,570 --> 00:20:55,840
[Music]

00:20:52,840 --> 00:20:55,840

YouTube URL: https://www.youtube.com/watch?v=cMSrYjk06_k


