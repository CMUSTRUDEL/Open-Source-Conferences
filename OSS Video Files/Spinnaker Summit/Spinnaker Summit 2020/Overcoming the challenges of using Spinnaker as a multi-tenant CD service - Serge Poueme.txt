Title: Overcoming the challenges of using Spinnaker as a multi-tenant CD service - Serge Poueme
Publication date: 2021-01-12
Playlist: Spinnaker Summit 2020
Description: 
	tasked by our leadership team to create a sustainable CI/CD service that will be operated by Site ReliabIlity Engineering teams and reused on any development project. We embarked on that journey, selecting Spinnaker as our central Continuous Delivery service and working on a multi-tenant deployment that would allow us to onboard users, provide managed delivery services and improve speed and agility for cloud delivery projects. In this talk we go over the business motivations for building a multi-tenant Continuous Delivery Service based on Spinnaker, the benefits it brings to development projects and the challenges that we faced when implementing the solution.
Captions: 
	00:00:00,530 --> 00:00:03,629
[Music]

00:00:06,240 --> 00:00:09,599
hi

00:00:06,640 --> 00:00:11,360
and welcome to spinnaker summit i hope

00:00:09,599 --> 00:00:13,120
you're enjoying the main stage event

00:00:11,360 --> 00:00:14,480
and that you will also be enjoying this

00:00:13,120 --> 00:00:16,800
talk

00:00:14,480 --> 00:00:17,920
my name is serge poem i work as a single

00:00:16,800 --> 00:00:20,960
devops engineer

00:00:17,920 --> 00:00:22,960
at sap and today i want to talk about

00:00:20,960 --> 00:00:24,400
the challenges of using spinaker as a

00:00:22,960 --> 00:00:25,279
multitude and continuous delivery

00:00:24,400 --> 00:00:28,400
service

00:00:25,279 --> 00:00:30,160
and how we've overcome them before we

00:00:28,400 --> 00:00:31,679
dive into the specifics

00:00:30,160 --> 00:00:34,640
i just want to talk briefly about the

00:00:31,679 --> 00:00:37,680
work that my team is carrying at sap

00:00:34,640 --> 00:00:41,040
i'm part of site reliability engineering

00:00:37,680 --> 00:00:42,840
within sap cloud platform and we report

00:00:41,040 --> 00:00:44,399
to the technology and innovation broad

00:00:42,840 --> 00:00:46,399
area

00:00:44,399 --> 00:00:47,600
my team delivery and operations

00:00:46,399 --> 00:00:49,039
excellence

00:00:47,600 --> 00:00:50,879
is a small team that focuses on

00:00:49,039 --> 00:00:53,600
automation and standards

00:00:50,879 --> 00:00:55,199
we also build cicd tooling frameworks

00:00:53,600 --> 00:00:57,039
and starter kits

00:00:55,199 --> 00:00:59,359
and we provide guidance consulting and

00:00:57,039 --> 00:01:02,399
support to development teams and other

00:00:59,359 --> 00:01:04,479
series so i've

00:01:02,399 --> 00:01:06,240
brought to that team 14 years in terms

00:01:04,479 --> 00:01:09,119
of experience in software development

00:01:06,240 --> 00:01:12,960
and operations and my focus has been on

00:01:09,119 --> 00:01:14,720
ci cd since i joined them

00:01:12,960 --> 00:01:16,240
first journey to build a continuous

00:01:14,720 --> 00:01:19,040
delivery service was not

00:01:16,240 --> 00:01:20,960
easy during our first year we performed

00:01:19,040 --> 00:01:23,439
the service launch

00:01:20,960 --> 00:01:25,119
it was a single cicd pipeline setup for

00:01:23,439 --> 00:01:27,040
our project

00:01:25,119 --> 00:01:29,040
but we got so much positive feedback

00:01:27,040 --> 00:01:31,439
from developers and architects

00:01:29,040 --> 00:01:33,680
that we started thinking about

00:01:31,439 --> 00:01:36,159
transitioning to a service team

00:01:33,680 --> 00:01:37,520
so we went from a manual setup detailed

00:01:36,159 --> 00:01:39,759
documentation

00:01:37,520 --> 00:01:41,600
and only two site reliability engineers

00:01:39,759 --> 00:01:45,360
operating the pipeline

00:01:41,600 --> 00:01:47,360
to a service team so linus which is our

00:01:45,360 --> 00:01:49,920
cicd service

00:01:47,360 --> 00:01:52,560
went for several phases also before it

00:01:49,920 --> 00:01:55,439
can actually be operational

00:01:52,560 --> 00:01:58,079
we started building basic infrastructure

00:01:55,439 --> 00:02:00,000
we started building automation

00:01:58,079 --> 00:02:01,200
our very first sets of user guides in

00:02:00,000 --> 00:02:02,719
starter kits

00:02:01,200 --> 00:02:04,960
and we started thinking about our

00:02:02,719 --> 00:02:07,119
self-service model which would

00:02:04,960 --> 00:02:09,679
give the opportunity to development

00:02:07,119 --> 00:02:12,000
teams and other sr colleagues

00:02:09,679 --> 00:02:13,599
to on board the service without needing

00:02:12,000 --> 00:02:15,360
us or having us

00:02:13,599 --> 00:02:17,040
stepping in and perform some manual

00:02:15,360 --> 00:02:18,879
operations

00:02:17,040 --> 00:02:21,680
and of course we also wanted to make

00:02:18,879 --> 00:02:24,160
sure that we have observability in place

00:02:21,680 --> 00:02:25,599
but we were running out of time so we

00:02:24,160 --> 00:02:28,239
did some basic setup

00:02:25,599 --> 00:02:31,440
based on grafana primitives and

00:02:28,239 --> 00:02:33,440
dynatrace just to get us started

00:02:31,440 --> 00:02:35,200
we proceed we proceeded with the service

00:02:33,440 --> 00:02:36,959
launch and then

00:02:35,200 --> 00:02:38,560
soon after the launch we started facing

00:02:36,959 --> 00:02:41,120
adoption challenges

00:02:38,560 --> 00:02:42,239
scalability issues and also stability

00:02:41,120 --> 00:02:45,040
issues

00:02:42,239 --> 00:02:45,599
we spent a lot of time uh making sure

00:02:45,040 --> 00:02:47,760
that

00:02:45,599 --> 00:02:49,040
we are tackling those challenges and we

00:02:47,760 --> 00:02:52,239
will talk about that

00:02:49,040 --> 00:02:55,519
in the next slides and then

00:02:52,239 --> 00:02:59,120
we also started reflecting on a

00:02:55,519 --> 00:03:02,319
more performing infrastructure so

00:02:59,120 --> 00:03:04,000
we rebuilt our infrastructure we started

00:03:02,319 --> 00:03:06,480
building a self-service api

00:03:04,000 --> 00:03:07,599
to make sure that we could automate more

00:03:06,480 --> 00:03:09,519
tasks

00:03:07,599 --> 00:03:11,360
and we started working on service

00:03:09,519 --> 00:03:13,280
dashboards

00:03:11,360 --> 00:03:14,800
to allow us actually to track our

00:03:13,280 --> 00:03:18,319
service usage

00:03:14,800 --> 00:03:20,400
across our customers

00:03:18,319 --> 00:03:22,080
because we were tracking that usage we

00:03:20,400 --> 00:03:23,840
started focusing also on lifecycle

00:03:22,080 --> 00:03:25,920
management making sure that our users

00:03:23,840 --> 00:03:27,280
can take fully advantage of a solution

00:03:25,920 --> 00:03:29,200
throughout the lifecycle of the

00:03:27,280 --> 00:03:32,159
development project

00:03:29,200 --> 00:03:32,879
we improve our observability and we

00:03:32,159 --> 00:03:36,239
became

00:03:32,879 --> 00:03:38,799
customer success focused

00:03:36,239 --> 00:03:40,000
so now let's talk a bit about

00:03:38,799 --> 00:03:42,879
architecture

00:03:40,000 --> 00:03:44,720
the goal for us was to be able to scale

00:03:42,879 --> 00:03:48,159
very easily

00:03:44,720 --> 00:03:49,760
we have a single spinning cartonnet

00:03:48,159 --> 00:03:51,360
which is deployed on the kubernetes

00:03:49,760 --> 00:03:53,599
cluster and

00:03:51,360 --> 00:03:54,959
can talk to uh various parts of the

00:03:53,599 --> 00:03:56,959
infrastructure

00:03:54,959 --> 00:03:58,959
but can target kubernetes clusters that

00:03:56,959 --> 00:04:00,640
are owned by different teams so we have

00:03:58,959 --> 00:04:02,799
a bring your own company test cluster

00:04:00,640 --> 00:04:04,480
policy where teams just have to register

00:04:02,799 --> 00:04:06,000
those clusters with us

00:04:04,480 --> 00:04:08,319
and they do the same thing for the m

00:04:06,000 --> 00:04:10,319
repositories uh

00:04:08,319 --> 00:04:12,239
they do it also for their docker

00:04:10,319 --> 00:04:12,879
registries and lately we started

00:04:12,239 --> 00:04:16,239
expanding

00:04:12,879 --> 00:04:18,160
this to things like artifacts

00:04:16,239 --> 00:04:20,560
so teams can register the github

00:04:18,160 --> 00:04:22,639
artifacts repository for example

00:04:20,560 --> 00:04:25,600
or any other http file repository that

00:04:22,639 --> 00:04:25,600
they would need to access

00:04:26,160 --> 00:04:31,040
so our and spin maker is a single shared

00:04:28,800 --> 00:04:33,840
spinning instance as we just said

00:04:31,040 --> 00:04:35,360
it is centrally managed it's available

00:04:33,840 --> 00:04:37,600
at sap

00:04:35,360 --> 00:04:39,680
globally regardless of the region you

00:04:37,600 --> 00:04:40,639
working in so we have teams working from

00:04:39,680 --> 00:04:44,320
apj uh

00:04:40,639 --> 00:04:47,360
sorry asia pacific we have teams working

00:04:44,320 --> 00:04:49,840
from europe teams working from

00:04:47,360 --> 00:04:50,880
uh the united states or canada or north

00:04:49,840 --> 00:04:54,000
america

00:04:50,880 --> 00:04:57,040
and it's accessible in

00:04:54,000 --> 00:04:58,479
all those regions for or by all those

00:04:57,040 --> 00:05:01,120
teams

00:04:58,479 --> 00:05:02,479
and the typical user journey for

00:05:01,120 --> 00:05:06,000
customers when building

00:05:02,479 --> 00:05:07,840
a service is first make sure that they

00:05:06,000 --> 00:05:10,080
get the right technical user account to

00:05:07,840 --> 00:05:11,440
trigger pipelines with spinnaker

00:05:10,080 --> 00:05:13,039
make sure that they have an sso

00:05:11,440 --> 00:05:14,479
certificate to authenticate against a

00:05:13,039 --> 00:05:16,560
spinnaker endpoint

00:05:14,479 --> 00:05:18,000
and also make sure that those users who

00:05:16,560 --> 00:05:20,479
are part of

00:05:18,000 --> 00:05:21,919
their team would also have access to the

00:05:20,479 --> 00:05:25,680
platform so they do this

00:05:21,919 --> 00:05:28,639
using a cloud access management solution

00:05:25,680 --> 00:05:29,759
we also focus on continuous delivery so

00:05:28,639 --> 00:05:31,680
we provide

00:05:29,759 --> 00:05:34,479
teams with free configure delivery

00:05:31,680 --> 00:05:37,680
pipelines that they can customize

00:05:34,479 --> 00:05:38,560
and we also provide them with all the

00:05:37,680 --> 00:05:41,120
methods

00:05:38,560 --> 00:05:43,520
that to in order for them to be able to

00:05:41,120 --> 00:05:47,440
add or remove providers from their

00:05:43,520 --> 00:05:47,440
spinnaker configuration in elliot

00:05:48,639 --> 00:05:52,080
we wanted to make sure that teams could

00:05:51,120 --> 00:05:55,440
easily

00:05:52,080 --> 00:05:57,520
reuse the existing platforms and tools

00:05:55,440 --> 00:05:59,759
when onboarding spinnaker so we worked

00:05:57,520 --> 00:06:02,720
out on integrating spinnaker

00:05:59,759 --> 00:06:03,840
with the existing systems so we're

00:06:02,720 --> 00:06:07,600
talking about

00:06:03,840 --> 00:06:09,840
platforms like art factory sap

00:06:07,600 --> 00:06:11,840
on flavor of jenkins called jenkins as a

00:06:09,840 --> 00:06:13,680
service

00:06:11,840 --> 00:06:15,520
nexus which is also an artifact

00:06:13,680 --> 00:06:17,520
repository

00:06:15,520 --> 00:06:18,880
of course sap cloud platform which is

00:06:17,520 --> 00:06:22,560
widely used

00:06:18,880 --> 00:06:25,440
especially the cloud foundry site

00:06:22,560 --> 00:06:26,160
and other systems that we've introduced

00:06:25,440 --> 00:06:29,440
ourselves like

00:06:26,160 --> 00:06:30,800
vault for credentials management sap

00:06:29,440 --> 00:06:34,560
gardner which is

00:06:30,800 --> 00:06:38,080
a managed kubernetes cluster offering

00:06:34,560 --> 00:06:39,840
and then we also leverage in their api

00:06:38,080 --> 00:06:41,600
to allow teams to create infrastructure

00:06:39,840 --> 00:06:43,680
on the fly

00:06:41,600 --> 00:06:46,840
so we used web books and custom job

00:06:43,680 --> 00:06:48,479
stages to create those missing

00:06:46,840 --> 00:06:51,680
integrations

00:06:48,479 --> 00:06:55,199
and with work came

00:06:51,680 --> 00:06:55,919
the challenges so those challenges

00:06:55,199 --> 00:06:58,720
actually were

00:06:55,919 --> 00:06:59,280
preventing us to reach our mission and

00:06:58,720 --> 00:07:01,919
also

00:06:59,280 --> 00:07:04,000
bring our vision to life and they were

00:07:01,919 --> 00:07:07,360
mainly around deployment and maintenance

00:07:04,000 --> 00:07:10,560
adoption security learning

00:07:07,360 --> 00:07:14,840
reliability and separation of concerns

00:07:10,560 --> 00:07:16,000
now let's talk a bit about more of those

00:07:14,840 --> 00:07:17,759
challenges

00:07:16,000 --> 00:07:20,080
so the first one for us was to be able

00:07:17,759 --> 00:07:23,120
to set up central spinnaker landscape

00:07:20,080 --> 00:07:25,360
and update its configuration

00:07:23,120 --> 00:07:26,800
the earlier configuration had to be

00:07:25,360 --> 00:07:28,240
stored in an enterprise github

00:07:26,800 --> 00:07:30,800
repository

00:07:28,240 --> 00:07:32,319
we worked out to do that make sure that

00:07:30,800 --> 00:07:33,759
we could perform pull requests and

00:07:32,319 --> 00:07:35,280
merges to update the spinnaker's

00:07:33,759 --> 00:07:37,840
configuration

00:07:35,280 --> 00:07:39,360
also make sure that uh the right people

00:07:37,840 --> 00:07:40,479
can actually make changes to the

00:07:39,360 --> 00:07:43,039
configuration so

00:07:40,479 --> 00:07:45,120
to find policies for branches protection

00:07:43,039 --> 00:07:46,160
and so on and then we implemented web

00:07:45,120 --> 00:07:48,160
books to trigger

00:07:46,160 --> 00:07:50,080
earlier deployments and also notify

00:07:48,160 --> 00:07:52,720
users on slack channels when the change

00:07:50,080 --> 00:07:54,319
occurs in real time

00:07:52,720 --> 00:07:56,639
then we went through the challenge of

00:07:54,319 --> 00:08:00,080
optimizing this automated

00:07:56,639 --> 00:08:02,319
flow that triggers an area deployment

00:08:00,080 --> 00:08:04,479
uh and we wanted to give a near

00:08:02,319 --> 00:08:08,000
real-time experience to our end users

00:08:04,479 --> 00:08:12,000
when they are pushing changes uh via

00:08:08,000 --> 00:08:12,960
that process then we also wanted to make

00:08:12,000 --> 00:08:16,000
sure that

00:08:12,960 --> 00:08:19,840
uh setup and update pipeline was

00:08:16,000 --> 00:08:22,240
actually uh resilient to disaster recov

00:08:19,840 --> 00:08:24,720
to disaster so that we could actually

00:08:22,240 --> 00:08:28,160
have some disaster recovery capabilities

00:08:24,720 --> 00:08:31,199
uh in the automation flow so we improved

00:08:28,160 --> 00:08:33,039
our cascration and then accommodated the

00:08:31,199 --> 00:08:35,680
scale that was coming with the success

00:08:33,039 --> 00:08:37,839
of the service

00:08:35,680 --> 00:08:39,680
second issue that we faced was done

00:08:37,839 --> 00:08:42,240
bottom time so it was taking

00:08:39,680 --> 00:08:42,959
uh sometimes a week or two weeks to use

00:08:42,240 --> 00:08:46,000
restaurant

00:08:42,959 --> 00:08:48,959
service without that was too long

00:08:46,000 --> 00:08:49,680
and we reduce that onboarding time to

00:08:48,959 --> 00:08:54,080
just

00:08:49,680 --> 00:08:56,000
a a day or a few hours depending on how

00:08:54,080 --> 00:08:57,200
fast teams are moving forward during the

00:08:56,000 --> 00:09:00,640
onboarding

00:08:57,200 --> 00:09:03,519
just by exposing a service api that

00:09:00,640 --> 00:09:05,680
allows them actually to create their

00:09:03,519 --> 00:09:09,519
registration with the service on both

00:09:05,680 --> 00:09:12,000
users at their spinnaker's

00:09:09,519 --> 00:09:15,040
provider config automatically and this

00:09:12,000 --> 00:09:18,880
also has removed a lot of complexity

00:09:15,040 --> 00:09:18,880
uh seen in the user journey

00:09:19,920 --> 00:09:24,320
then we also face the issue with the

00:09:22,160 --> 00:09:24,720
learning curve so how can we make sure

00:09:24,320 --> 00:09:27,120
that

00:09:24,720 --> 00:09:28,880
teams can quickly learn how to build

00:09:27,120 --> 00:09:30,080
spinnaker pipelines and this has been

00:09:28,880 --> 00:09:31,200
one of the most difficult and

00:09:30,080 --> 00:09:34,720
challenging one

00:09:31,200 --> 00:09:37,040
so teams were always afraid

00:09:34,720 --> 00:09:38,640
of creating pipelines themselves they

00:09:37,040 --> 00:09:40,800
were constantly relying on us

00:09:38,640 --> 00:09:42,160
asking us questions and of course we

00:09:40,800 --> 00:09:44,640
have a small team

00:09:42,160 --> 00:09:45,360
so we could not scale and be able to

00:09:44,640 --> 00:09:48,480
offer

00:09:45,360 --> 00:09:50,000
a consulting service all the time when

00:09:48,480 --> 00:09:51,680
they needed it

00:09:50,000 --> 00:09:54,080
so we came up with the idea of building

00:09:51,680 --> 00:09:57,040
a starter kit a starter kit is a

00:09:54,080 --> 00:09:58,640
repository that comes with predefined

00:09:57,040 --> 00:10:01,920
templates

00:09:58,640 --> 00:10:03,519
and teams can use them to quickly enable

00:10:01,920 --> 00:10:06,720
pipelines or quickly create

00:10:03,519 --> 00:10:09,519
deployment pipelines we focus on

00:10:06,720 --> 00:10:10,480
the most common use cases so helm

00:10:09,519 --> 00:10:14,560
deployment

00:10:10,480 --> 00:10:17,120
canary analysis or canary deployment

00:10:14,560 --> 00:10:18,720
fault integration so it seems we want to

00:10:17,120 --> 00:10:21,200
read and write secrets to vote

00:10:18,720 --> 00:10:22,880
in the deployment pipelines and we have

00:10:21,200 --> 00:10:27,120
a collection of

00:10:22,880 --> 00:10:29,360
templates based on both

00:10:27,120 --> 00:10:30,640
the v1 engine of spinaker and the v2

00:10:29,360 --> 00:10:33,120
engine

00:10:30,640 --> 00:10:35,440
so our templates can either leverage

00:10:33,120 --> 00:10:37,680
arrow ar or spin cli

00:10:35,440 --> 00:10:38,720
and would create the application on

00:10:37,680 --> 00:10:41,600
spinnaker and

00:10:38,720 --> 00:10:43,440
all are the pipelines they are

00:10:41,600 --> 00:10:45,360
extensible easy to reuse

00:10:43,440 --> 00:10:46,560
we are burdening them and releasing them

00:10:45,360 --> 00:10:48,880
on a regular basis

00:10:46,560 --> 00:10:49,680
and they come with a detail with me that

00:10:48,880 --> 00:10:52,720
users can

00:10:49,680 --> 00:10:55,040
actually uh leverage

00:10:52,720 --> 00:10:56,320
and and they would give them enough

00:10:55,040 --> 00:11:00,640
information on how

00:10:56,320 --> 00:11:02,240
to tweak those templates to their needs

00:11:00,640 --> 00:11:04,000
then we went through sustainability

00:11:02,240 --> 00:11:05,279
issue now that we have a service and we

00:11:04,000 --> 00:11:07,120
have customers on it

00:11:05,279 --> 00:11:09,040
how do we make sure that we sustain the

00:11:07,120 --> 00:11:11,279
service how do we make sure that

00:11:09,040 --> 00:11:13,120
it's not a one-time project or one-time

00:11:11,279 --> 00:11:15,760
setup

00:11:13,120 --> 00:11:17,600
we focused a lot on consultation via an

00:11:15,760 --> 00:11:19,440
open slack channel so we have that open

00:11:17,600 --> 00:11:23,200
policy where people can focus

00:11:19,440 --> 00:11:25,440
so they can always rely on us to answer

00:11:23,200 --> 00:11:27,680
questions or to look into things when

00:11:25,440 --> 00:11:31,440
they need it

00:11:27,680 --> 00:11:33,839
so we also provide coaching

00:11:31,440 --> 00:11:34,959
to devops practitioners this is outside

00:11:33,839 --> 00:11:36,800
of the of

00:11:34,959 --> 00:11:38,079
the regular consultation process so

00:11:36,800 --> 00:11:41,839
teams can

00:11:38,079 --> 00:11:43,680
always uh uh ping us and then we would

00:11:41,839 --> 00:11:46,480
be available to provide some

00:11:43,680 --> 00:11:48,160
some coaching hours and another aspect

00:11:46,480 --> 00:11:49,279
that has been very important to us is

00:11:48,160 --> 00:11:52,320
storytelling

00:11:49,279 --> 00:11:53,440
so storytelling for us is just about you

00:11:52,320 --> 00:11:56,480
know talking about

00:11:53,440 --> 00:11:57,920
uh a successful spinnaker and our spinny

00:11:56,480 --> 00:12:00,560
care can help

00:11:57,920 --> 00:12:02,480
reducing the burden on the development

00:12:00,560 --> 00:12:05,279
teams who are deploying to the cloud

00:12:02,480 --> 00:12:06,320
and also reducing a toll and helping

00:12:05,279 --> 00:12:09,680
series

00:12:06,320 --> 00:12:10,320
uh achieve more success when they're

00:12:09,680 --> 00:12:13,600
working on

00:12:10,320 --> 00:12:14,079
on production systems so we we came up

00:12:13,600 --> 00:12:17,519
with

00:12:14,079 --> 00:12:20,240
a storytelling strategy which

00:12:17,519 --> 00:12:21,200
uh includes uh talks during internal

00:12:20,240 --> 00:12:24,000
events and also

00:12:21,200 --> 00:12:25,360
talks during public events and of course

00:12:24,000 --> 00:12:27,279
we started focusing on

00:12:25,360 --> 00:12:29,279
internal documentation and also on

00:12:27,279 --> 00:12:33,279
collaboration with other teams who are

00:12:29,279 --> 00:12:33,279
working in the cicd space at sap

00:12:34,320 --> 00:12:39,519
we also face reliability issues

00:12:36,959 --> 00:12:42,720
sometimes spinnaker was not responsive

00:12:39,519 --> 00:12:43,279
sometimes it was slow so we had to focus

00:12:42,720 --> 00:12:45,279
a lot

00:12:43,279 --> 00:12:46,399
on building monitoring dashboards in

00:12:45,279 --> 00:12:48,320
grafana

00:12:46,399 --> 00:12:49,920
making sure that our elastic alerts are

00:12:48,320 --> 00:12:52,000
sent to slack

00:12:49,920 --> 00:12:54,000
making sure also that we properly

00:12:52,000 --> 00:12:55,839
leveraged dynatrace for application

00:12:54,000 --> 00:12:58,000
monitoring and dynatrace has been the

00:12:55,839 --> 00:13:00,160
great of a great use because

00:12:58,000 --> 00:13:02,200
it provided us a lot of insights on what

00:13:00,160 --> 00:13:05,519
is happening inside spinnaker

00:13:02,200 --> 00:13:07,360
microservices and of course

00:13:05,519 --> 00:13:09,920
always be able to do a dimensioning

00:13:07,360 --> 00:13:11,920
review to make sure that our spinnaker

00:13:09,920 --> 00:13:12,800
cluster is correctly sized up and also

00:13:11,920 --> 00:13:16,000
that our

00:13:12,800 --> 00:13:18,839
spin maker microservices size is

00:13:16,000 --> 00:13:21,279
adequate to sustain the load that we are

00:13:18,839 --> 00:13:24,880
receiving we came up with an error

00:13:21,279 --> 00:13:28,000
budget and we implemented the solution

00:13:24,880 --> 00:13:30,000
to compute our era budgets automatically

00:13:28,000 --> 00:13:31,920
here we can actually see our error

00:13:30,000 --> 00:13:34,880
budget dashboard as of

00:13:31,920 --> 00:13:36,320
a few days back and we can see that we

00:13:34,880 --> 00:13:39,519
started burning

00:13:36,320 --> 00:13:43,480
uh uh our error budget

00:13:39,519 --> 00:13:44,720
uh um and and and we know exactly which

00:13:43,480 --> 00:13:47,360
microservices

00:13:44,720 --> 00:13:48,160
are impacted and what we should do we

00:13:47,360 --> 00:13:51,279
know

00:13:48,160 --> 00:13:52,079
when we should act and this also has

00:13:51,279 --> 00:13:54,079
helped us

00:13:52,079 --> 00:13:55,680
so we have a bunch of other metrics that

00:13:54,079 --> 00:13:57,920
we use to support this

00:13:55,680 --> 00:13:59,360
uh like the controller invocation metric

00:13:57,920 --> 00:14:02,880
which tells us

00:13:59,360 --> 00:14:04,240
uh uh uh how you know good spinnaker is

00:14:02,880 --> 00:14:07,279
responding to

00:14:04,240 --> 00:14:09,120
requests coming through and also uh

00:14:07,279 --> 00:14:10,320
other metrics like the easter eggs

00:14:09,120 --> 00:14:14,839
commands latency

00:14:10,320 --> 00:14:17,360
or also the okay http client uh

00:14:14,839 --> 00:14:21,040
invocations

00:14:17,360 --> 00:14:22,560
and with all those improvements we

00:14:21,040 --> 00:14:24,560
started also facing

00:14:22,560 --> 00:14:26,079
uh compliance issues especially with

00:14:24,560 --> 00:14:28,079
security

00:14:26,079 --> 00:14:30,560
so how do we make sure that our platform

00:14:28,079 --> 00:14:33,040
is compliant with sap security standards

00:14:30,560 --> 00:14:34,720
and that has been the major challenge

00:14:33,040 --> 00:14:37,279
here you can see

00:14:34,720 --> 00:14:39,519
our workflow so these are all the

00:14:37,279 --> 00:14:43,279
systems that are touched

00:14:39,519 --> 00:14:46,399
by a solution when we

00:14:43,279 --> 00:14:49,040
proceed with with with an end-to-end

00:14:46,399 --> 00:14:50,880
build and then we deployed on spinnaker

00:14:49,040 --> 00:14:53,680
so we wanted to make sure

00:14:50,880 --> 00:14:56,000
that every communication at every point

00:14:53,680 --> 00:14:59,760
in that workflow is secure

00:14:56,000 --> 00:15:03,040
and this was a major issue for us

00:14:59,760 --> 00:15:03,360
so we started working on integration

00:15:03,040 --> 00:15:05,600
with

00:15:03,360 --> 00:15:07,839
sap cloud access manager to create roles

00:15:05,600 --> 00:15:10,399
and assign permissions

00:15:07,839 --> 00:15:12,720
we worked on the separation of concerns

00:15:10,399 --> 00:15:14,320
and made sure that we are enforcing uh

00:15:12,720 --> 00:15:16,399
the creation of

00:15:14,320 --> 00:15:18,720
exclusive spinnaker service accounts for

00:15:16,399 --> 00:15:19,680
teams and we did this before pipeline

00:15:18,720 --> 00:15:22,560
permissions

00:15:19,680 --> 00:15:23,839
were actually released on spinnaker and

00:15:22,560 --> 00:15:26,639
but now that we have

00:15:23,839 --> 00:15:26,959
permissions we really want to to migrate

00:15:26,639 --> 00:15:29,600
to

00:15:26,959 --> 00:15:32,320
to that because it solves that issue uh

00:15:29,600 --> 00:15:34,959
natively in spinnaker for us

00:15:32,320 --> 00:15:36,639
and we also wanted to make sure that

00:15:34,959 --> 00:15:38,560
development teams could challenge our

00:15:36,639 --> 00:15:40,639
pipeline at any point in time

00:15:38,560 --> 00:15:42,320
so they are allowed to perform a threat

00:15:40,639 --> 00:15:44,160
modeling exercise

00:15:42,320 --> 00:15:45,759
and get back to us with anything that

00:15:44,160 --> 00:15:49,120
they believe make

00:15:45,759 --> 00:15:51,680
the pipeline unsafe and of course we are

00:15:49,120 --> 00:15:53,519
reviewing our data flows very often

00:15:51,680 --> 00:15:55,360
and making sure that our security

00:15:53,519 --> 00:15:58,560
concept is approved by

00:15:55,360 --> 00:15:58,560
sap security teams

00:15:58,959 --> 00:16:02,959
so a few key takeaways from us based on

00:16:02,160 --> 00:16:05,440
our experience

00:16:02,959 --> 00:16:07,519
building this multitude and continuous

00:16:05,440 --> 00:16:09,839
theory service on spinaker

00:16:07,519 --> 00:16:11,279
the first thing we would we want you to

00:16:09,839 --> 00:16:13,199
to know is that you should

00:16:11,279 --> 00:16:14,480
always think about your service as a

00:16:13,199 --> 00:16:17,120
product so build a pro

00:16:14,480 --> 00:16:19,920
a product and not a one time project

00:16:17,120 --> 00:16:23,120
invest time into continuous improvement

00:16:19,920 --> 00:16:25,680
and apply the agile manifesto for us

00:16:23,120 --> 00:16:26,639
uh working in a drawing mode made a big

00:16:25,680 --> 00:16:29,199
difference

00:16:26,639 --> 00:16:29,920
we started having screams every morning

00:16:29,199 --> 00:16:33,279
we started

00:16:29,920 --> 00:16:34,399
learning sprints we started writing user

00:16:33,279 --> 00:16:37,199
stories

00:16:34,399 --> 00:16:38,720
and it changed our lives so we write

00:16:37,199 --> 00:16:42,800
user stories

00:16:38,720 --> 00:16:45,839
um for example um a user story could be

00:16:42,800 --> 00:16:48,079
a great spinnaker to version 1.21

00:16:45,839 --> 00:16:49,199
and then we have a definition of done

00:16:48,079 --> 00:16:52,000
for that user story

00:16:49,199 --> 00:16:52,800
it allows us actually to move faster and

00:16:52,000 --> 00:16:54,399
also

00:16:52,800 --> 00:16:56,959
to have more clarity on the tasks that

00:16:54,399 --> 00:16:59,600
we want to do on the service

00:16:56,959 --> 00:17:01,519
second thing is create business value so

00:16:59,600 --> 00:17:03,120
build a value proposition

00:17:01,519 --> 00:17:04,880
make sure that it takes in consideration

00:17:03,120 --> 00:17:05,679
your internal competitors there are

00:17:04,880 --> 00:17:09,039
other teams

00:17:05,679 --> 00:17:10,880
doing ci cd at sap and

00:17:09,039 --> 00:17:12,480
we were always in competition with those

00:17:10,880 --> 00:17:15,360
teams which is normal because

00:17:12,480 --> 00:17:16,079
they have to also work on those topics

00:17:15,360 --> 00:17:18,720
on their end

00:17:16,079 --> 00:17:20,400
in their own organization but for us it

00:17:18,720 --> 00:17:22,160
was more about positioning

00:17:20,400 --> 00:17:24,000
and not making sure that we become the

00:17:22,160 --> 00:17:25,919
only service but making sure that we are

00:17:24,000 --> 00:17:28,480
complementary to those teams

00:17:25,919 --> 00:17:30,559
and that we are not recreating work or

00:17:28,480 --> 00:17:33,200
efforts that they've already done

00:17:30,559 --> 00:17:34,720
and we also started reusing tools and

00:17:33,200 --> 00:17:37,679
techniques from those teams

00:17:34,720 --> 00:17:39,520
in our project and this led to a lot of

00:17:37,679 --> 00:17:42,080
collaboration

00:17:39,520 --> 00:17:43,760
so engage with engineering stakeholders

00:17:42,080 --> 00:17:45,120
listen to your customers this is how you

00:17:43,760 --> 00:17:47,039
bring value

00:17:45,120 --> 00:17:48,720
and also make sure that you network and

00:17:47,039 --> 00:17:49,520
learn so keep learning about continuous

00:17:48,720 --> 00:17:52,080
delivery

00:17:49,520 --> 00:17:52,640
uh join the community network with peers

00:17:52,080 --> 00:17:54,480
attend

00:17:52,640 --> 00:17:56,320
events like spinnaker summit this has

00:17:54,480 --> 00:17:58,799
made a great difference for us

00:17:56,320 --> 00:18:01,280
because we were able to talk about some

00:17:58,799 --> 00:18:04,720
of the ideas we wanted to implement and

00:18:01,280 --> 00:18:06,559
sometimes just hear about others

00:18:04,720 --> 00:18:08,080
and their journey with spinnaker and

00:18:06,559 --> 00:18:11,679
also what they're going through

00:18:08,080 --> 00:18:14,080
and also get some some advices so

00:18:11,679 --> 00:18:15,520
this ends my talk i hope you've enjoyed

00:18:14,080 --> 00:18:17,760
the presentation

00:18:15,520 --> 00:18:19,600
thank you for listening and feel free to

00:18:17,760 --> 00:18:21,600
reach out on slack

00:18:19,600 --> 00:18:23,039
or twitter or linkedin if you have any

00:18:21,600 --> 00:18:29,840
questions thank you

00:18:23,039 --> 00:18:29,840

YouTube URL: https://www.youtube.com/watch?v=Ed9IHsi40PI


