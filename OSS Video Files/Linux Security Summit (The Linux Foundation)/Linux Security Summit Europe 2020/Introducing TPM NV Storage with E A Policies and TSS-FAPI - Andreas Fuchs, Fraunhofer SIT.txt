Title: Introducing TPM NV Storage with E A Policies and TSS-FAPI - Andreas Fuchs, Fraunhofer SIT
Publication date: 2020-11-17
Playlist: Linux Security Summit Europe 2020
Description: 
	Introducing TPM NV Storage with E/A Policies and TSS-FAPI - Andreas Fuchs, Fraunhofer SIT
Captions: 
	00:00:08,240 --> 00:00:12,960
hi hello everyone

00:00:09,679 --> 00:00:14,559
welcome to my talk on tpm nv storage and

00:00:12,960 --> 00:00:17,600
ea policies

00:00:14,559 --> 00:00:20,800
with tss fappy um

00:00:17,600 --> 00:00:23,439
let's start real quick with who am i um

00:00:20,800 --> 00:00:25,039
i work for fraunhofer i'm working on

00:00:23,439 --> 00:00:26,640
cyberphysical system security and

00:00:25,039 --> 00:00:28,640
automotive security and specifically on

00:00:26,640 --> 00:00:31,679
trustworthy platforms

00:00:28,640 --> 00:00:34,239
and i've been a consumer of tpms for

00:00:31,679 --> 00:00:36,719
more than 13 years now um i've been a

00:00:34,239 --> 00:00:40,399
tcg member almost as long

00:00:36,719 --> 00:00:43,920
and i'm there the workgroup chair of the

00:00:40,399 --> 00:00:46,480
tss work group and also in the open

00:00:43,920 --> 00:00:49,360
source room i'm the maintainer

00:00:46,480 --> 00:00:51,600
of one of the maintainers of the tpm 2

00:00:49,360 --> 00:00:53,680
tss project which is an implementation

00:00:51,600 --> 00:00:57,280
of the tpm software stack

00:00:53,680 --> 00:01:00,239
combined with the tcg specs of the tpm2

00:00:57,280 --> 00:01:01,039
tss engine the open sl engine and tpm2

00:01:00,239 --> 00:01:02,960
todp

00:01:01,039 --> 00:01:05,519
even though thankfully owners is doing

00:01:02,960 --> 00:01:08,640
most of the work there

00:01:05,519 --> 00:01:12,799
um what we're going to talk about today

00:01:08,640 --> 00:01:13,439
um i'll very briefly go over what tpms

00:01:12,799 --> 00:01:16,479
are

00:01:13,439 --> 00:01:19,040
um and then um

00:01:16,479 --> 00:01:22,080
we'll go a little bit deeper about um

00:01:19,040 --> 00:01:24,720
what tpm envy storage is and can do

00:01:22,080 --> 00:01:26,240
what tpm ea policies are and what you

00:01:24,720 --> 00:01:28,560
can do with those

00:01:26,240 --> 00:01:30,479
how you can facilitate the tss

00:01:28,560 --> 00:01:33,200
especially the fappy interface for

00:01:30,479 --> 00:01:36,479
working with ea policies and nv

00:01:33,200 --> 00:01:37,200
and some some minor use cases at the end

00:01:36,479 --> 00:01:40,159
to show you

00:01:37,200 --> 00:01:42,560
some of its use usefulness and practical

00:01:40,159 --> 00:01:46,320
applications

00:01:42,560 --> 00:01:49,200
so let's get started what is atpm so tpm

00:01:46,320 --> 00:01:51,200
is a security chip on the main board and

00:01:49,200 --> 00:01:52,159
you can see an old example of that over

00:01:51,200 --> 00:01:55,360
here

00:01:52,159 --> 00:01:56,960
it's soldered on there and um i have to

00:01:55,360 --> 00:01:59,119
thank microsoft for giving us

00:01:56,960 --> 00:02:00,240
all tpms for cheap in our desktops and

00:01:59,119 --> 00:02:03,200
laptops

00:02:00,240 --> 00:02:04,640
because they required them via the

00:02:03,200 --> 00:02:06,799
windows logo program

00:02:04,640 --> 00:02:08,879
but also there's been increased adoption

00:02:06,799 --> 00:02:12,959
um nowadays and embedded

00:02:08,879 --> 00:02:14,400
there exists hats for the raspberry pi

00:02:12,959 --> 00:02:17,200
i've seen some people working on

00:02:14,400 --> 00:02:18,239
sapphire there's also been some people

00:02:17,200 --> 00:02:23,440
working on

00:02:18,239 --> 00:02:27,040
spi interfaces for tss for esp32s

00:02:23,440 --> 00:02:31,120
rx implementation similar stuff

00:02:27,040 --> 00:02:34,160
so these chips are pretty high security

00:02:31,120 --> 00:02:36,720
they come with you or usually they come

00:02:34,160 --> 00:02:40,640
with common criteria certificates

00:02:36,720 --> 00:02:43,440
and such and they are capable of

00:02:40,640 --> 00:02:44,080
doing some cryptographic operations they

00:02:43,440 --> 00:02:46,400
can do

00:02:44,080 --> 00:02:47,680
some storage that we're going to talk

00:02:46,400 --> 00:02:50,400
about today

00:02:47,680 --> 00:02:51,680
and most famously they are capable of

00:02:50,400 --> 00:02:53,840
recording

00:02:51,680 --> 00:02:55,440
boot hash values aka integrity

00:02:53,840 --> 00:02:58,080
measurements

00:02:55,440 --> 00:02:59,920
um what's very important is to know that

00:02:58,080 --> 00:03:04,319
they are passive devices

00:02:59,920 --> 00:03:06,400
so the tpm cannot actively interfere and

00:03:04,319 --> 00:03:07,519
take away ownership of your platform any

00:03:06,400 --> 00:03:10,560
of that

00:03:07,519 --> 00:03:13,840
sort and nowadays they are

00:03:10,560 --> 00:03:14,640
very nicely supported on linux first of

00:03:13,840 --> 00:03:17,840
all given

00:03:14,640 --> 00:03:19,680
their driver support but also all the

00:03:17,840 --> 00:03:20,560
way up through the tss stack and then

00:03:19,680 --> 00:03:24,560
the various

00:03:20,560 --> 00:03:27,760
projects that build upon the tss stack

00:03:24,560 --> 00:03:29,280
so what's it known for it's specifically

00:03:27,760 --> 00:03:31,360
known for what we see here on the

00:03:29,280 --> 00:03:34,239
left-hand side which is it can do crypto

00:03:31,360 --> 00:03:38,720
it has an rsa engine an ecc engine

00:03:34,239 --> 00:03:41,440
um sha-1 sha-256 engines

00:03:38,720 --> 00:03:44,560
and it can do some aes even though the

00:03:41,440 --> 00:03:48,000
aes functions are not exposed externally

00:03:44,560 --> 00:03:50,400
but they are used internally for

00:03:48,000 --> 00:03:52,000
storing its keys so keys are in the case

00:03:50,400 --> 00:03:54,640
of the tpm usually stored

00:03:52,000 --> 00:03:59,200
outside of the chip but encrypted via an

00:03:54,640 --> 00:04:02,640
as key that is only known to the tpm

00:03:59,200 --> 00:04:03,599
second most uh well-known functionality

00:04:02,640 --> 00:04:06,400
is as i mentioned

00:04:03,599 --> 00:04:06,799
the integrity functionalities of the tpm

00:04:06,400 --> 00:04:08,959
so

00:04:06,799 --> 00:04:10,239
the tpm will record the boot

00:04:08,959 --> 00:04:13,200
measurements

00:04:10,239 --> 00:04:15,680
or the measurements or the hash values

00:04:13,200 --> 00:04:18,000
of the various components that i

00:04:15,680 --> 00:04:18,799
used to include of the platform and

00:04:18,000 --> 00:04:21,600
store those

00:04:18,799 --> 00:04:23,120
in these pcrs and then you can do a code

00:04:21,600 --> 00:04:24,639
command

00:04:23,120 --> 00:04:26,960
but that's not what we're going to talk

00:04:24,639 --> 00:04:29,840
about today today our focus is on the

00:04:26,960 --> 00:04:29,840
right hand side

00:04:30,639 --> 00:04:35,120
the first of all the nv capabilities of

00:04:33,520 --> 00:04:37,280
the tpm

00:04:35,120 --> 00:04:39,440
so you can persistently store keys but

00:04:37,280 --> 00:04:42,639
it also exposes general purpose nv

00:04:39,440 --> 00:04:45,440
indices and we'll be looking at the

00:04:42,639 --> 00:04:48,240
enhanced authorization policies or as i

00:04:45,440 --> 00:04:50,320
will usually refer to them ea policies

00:04:48,240 --> 00:04:53,040
as you heard in the beginning of the

00:04:50,320 --> 00:04:53,040
talk already

00:04:53,360 --> 00:05:00,000
all right let's jump right in there

00:04:56,720 --> 00:05:01,360
storage so tpm comes with a bunch of

00:05:00,000 --> 00:05:03,840
storage

00:05:01,360 --> 00:05:05,039
um or not not so big of a bunch of

00:05:03,840 --> 00:05:08,639
storage but with some

00:05:05,039 --> 00:05:11,759
storage and it's often used

00:05:08,639 --> 00:05:14,080
um synonymously with

00:05:11,759 --> 00:05:15,120
the nv indices but we have to

00:05:14,080 --> 00:05:18,000
differentiate so

00:05:15,120 --> 00:05:20,479
tpm has an internal flash and that flash

00:05:18,000 --> 00:05:24,479
is used to store

00:05:20,479 --> 00:05:27,600
internal tpm data structures such as its

00:05:24,479 --> 00:05:30,880
seeds author values boot counters

00:05:27,600 --> 00:05:31,840
um and other kinds of things but also

00:05:30,880 --> 00:05:34,560
the tpm

00:05:31,840 --> 00:05:35,680
exposes an interface to the user to use

00:05:34,560 --> 00:05:39,280
some of those

00:05:35,680 --> 00:05:42,400
some of that storage and that's called

00:05:39,280 --> 00:05:44,880
or referred to as nv indices or nv index

00:05:42,400 --> 00:05:44,880
handles

00:05:45,440 --> 00:05:49,360
and yeah those are supposed to be an api

00:05:48,000 --> 00:05:52,639
of the tpm

00:05:49,360 --> 00:05:57,039
and you can identify those by

00:05:52,639 --> 00:05:59,759
their index range so every tpm hand

00:05:57,039 --> 00:06:01,520
every tpm object has a handle and in

00:05:59,759 --> 00:06:04,560
case of an nv index

00:06:01,520 --> 00:06:05,360
those start with 0x on the very high

00:06:04,560 --> 00:06:07,039
byte

00:06:05,360 --> 00:06:08,800
as opposed to for example transient

00:06:07,039 --> 00:06:11,199
objects that start with an 80

00:06:08,800 --> 00:06:14,080
hex or persistent objects that start

00:06:11,199 --> 00:06:17,360
with an 81 x

00:06:14,080 --> 00:06:21,280
this value range is fixed

00:06:17,360 --> 00:06:24,800
the 0x01 but within this range

00:06:21,280 --> 00:06:27,600
there are some value ranges and

00:06:24,800 --> 00:06:30,720
conventions defined by tcg

00:06:27,600 --> 00:06:36,000
so within the range of o1

00:06:30,720 --> 00:06:39,199
c0 and a bunch of zeros to o1 c07

00:06:36,000 --> 00:06:41,840
fff you will for example find ek

00:06:39,199 --> 00:06:43,840
or endorsement key certificates the

00:06:41,840 --> 00:06:46,880
range that we are most interested in for

00:06:43,840 --> 00:06:50,479
our application is the range from

00:06:46,880 --> 00:06:54,160
zero 0x0180 to 0x01

00:06:50,479 --> 00:06:56,240
bf and fff this is the range that's

00:06:54,160 --> 00:06:57,840
defined for the owner of the platform so

00:06:56,240 --> 00:07:00,479
whenever you want to do something

00:06:57,840 --> 00:07:01,360
whenever there's software you want to

00:07:00,479 --> 00:07:03,440
write

00:07:01,360 --> 00:07:04,560
that uses nv storage you'll probably

00:07:03,440 --> 00:07:07,360
want to

00:07:04,560 --> 00:07:08,000
put your handles or your nv indices to

00:07:07,360 --> 00:07:11,680
find those

00:07:08,000 --> 00:07:14,880
in this range and i guess a very

00:07:11,680 --> 00:07:17,759
prominent example of something that's

00:07:14,880 --> 00:07:19,440
using are going to be using the tpm nv

00:07:17,759 --> 00:07:21,680
storage also in this range

00:07:19,440 --> 00:07:23,599
the script setup there is a merge

00:07:21,680 --> 00:07:24,160
request so we've been working for some

00:07:23,599 --> 00:07:26,479
time

00:07:24,160 --> 00:07:27,280
um on how to integrate tpm into crypt

00:07:26,479 --> 00:07:29,840
setup

00:07:27,280 --> 00:07:31,199
so we have a bit locker like feature on

00:07:29,840 --> 00:07:34,560
linux as well

00:07:31,199 --> 00:07:35,280
and the new crypt setup tpm tokens as

00:07:34,560 --> 00:07:38,800
they are

00:07:35,280 --> 00:07:42,720
defined in the mentioned pull request

00:07:38,800 --> 00:07:42,720
actually make use of this nv storage

00:07:43,520 --> 00:07:48,160
so in order to look at what your envy

00:07:45,440 --> 00:07:50,879
storage is there's two ways you can use

00:07:48,160 --> 00:07:53,039
tpm2 get capabilities or get cap and

00:07:50,879 --> 00:07:55,680
just see the nv index ranges

00:07:53,039 --> 00:07:56,479
and here you can already see that there

00:07:55,680 --> 00:07:58,960
are

00:07:56,479 --> 00:07:59,680
specifically two user indexes that i

00:07:58,960 --> 00:08:03,199
defined

00:07:59,680 --> 00:08:06,720
which are in the 80 000

00:08:03,199 --> 00:08:10,080
and 8001 then there's two

00:08:06,720 --> 00:08:11,919
certificates in the 01c0 range

00:08:10,080 --> 00:08:13,120
and then there's another three those

00:08:11,919 --> 00:08:16,800
come from um

00:08:13,120 --> 00:08:20,560
platform those are used for um

00:08:16,800 --> 00:08:23,039
bios pc bios things

00:08:20,560 --> 00:08:24,319
so just that you don't wonder when you

00:08:23,039 --> 00:08:27,360
have a fresh tpm

00:08:24,319 --> 00:08:30,240
you will usually find the five bottom

00:08:27,360 --> 00:08:31,599
envy indexes on your platform already

00:08:30,240 --> 00:08:34,719
another way to look at those

00:08:31,599 --> 00:08:36,000
is via the tss2 get info call and i'll

00:08:34,719 --> 00:08:38,159
go a little bit into what the

00:08:36,000 --> 00:08:39,519
differences between those two calls is

00:08:38,159 --> 00:08:40,800
later but there you can see

00:08:39,519 --> 00:08:43,360
unfortunately we don't have the hex

00:08:40,800 --> 00:08:45,519
representation because json

00:08:43,360 --> 00:08:47,839
but we do have the integer values there

00:08:45,519 --> 00:08:47,839
as well

00:08:48,640 --> 00:08:51,839
so what can nv storage do well first of

00:08:51,120 --> 00:08:54,560
all

00:08:51,839 --> 00:08:55,839
there's different types or you you

00:08:54,560 --> 00:08:58,160
basically what you do is you

00:08:55,839 --> 00:08:59,600
define nv indexes that you want to use

00:08:58,160 --> 00:09:02,560
so you allocate memory

00:08:59,600 --> 00:09:04,560
to say so under an nv index when you do

00:09:02,560 --> 00:09:08,000
this allocation you can

00:09:04,560 --> 00:09:10,560
make a choice of what type

00:09:08,000 --> 00:09:11,920
this nv index shall be there is the

00:09:10,560 --> 00:09:15,120
ordinary type

00:09:11,920 --> 00:09:17,120
which is general purpose memory you can

00:09:15,120 --> 00:09:18,320
write arbitrary data in there and you

00:09:17,120 --> 00:09:20,560
can read our

00:09:18,320 --> 00:09:23,360
read the data out again but then there's

00:09:20,560 --> 00:09:26,160
also special kinds of nv indexes

00:09:23,360 --> 00:09:27,200
and um very interesting one for example

00:09:26,160 --> 00:09:30,000
is the counter

00:09:27,200 --> 00:09:31,360
type um the counter type is a monotonic

00:09:30,000 --> 00:09:33,760
counter

00:09:31,360 --> 00:09:35,760
and one when you initialize this envy

00:09:33,760 --> 00:09:38,480
index it starts at the highest counter

00:09:35,760 --> 00:09:42,080
value that was ever recorded on this tpm

00:09:38,480 --> 00:09:44,640
so if you clear

00:09:42,080 --> 00:09:46,320
the counter or you could you you delete

00:09:44,640 --> 00:09:48,399
the index and you

00:09:46,320 --> 00:09:50,720
re-instantiate the index again it will

00:09:48,399 --> 00:09:52,399
start off at the same counter value that

00:09:50,720 --> 00:09:56,160
you had on the index before

00:09:52,399 --> 00:09:58,160
that's in order to um prevent

00:09:56,160 --> 00:09:59,839
rollback attacks on those envy counter

00:09:58,160 --> 00:10:01,360
indices because usually they might be

00:09:59,839 --> 00:10:03,600
used for something like

00:10:01,360 --> 00:10:06,399
usage counting or version counting or

00:10:03,600 --> 00:10:08,560
firmware or stuff like that

00:10:06,399 --> 00:10:10,079
and of course you can only ever

00:10:08,560 --> 00:10:12,720
increment this counter you cannot

00:10:10,079 --> 00:10:15,839
arbitrarily write to this counter

00:10:12,720 --> 00:10:18,880
then we have bitmask types they

00:10:15,839 --> 00:10:20,800
allow you to set bits in this mv index

00:10:18,880 --> 00:10:24,079
but not clear them

00:10:20,800 --> 00:10:26,079
so this is basically yeah similar to

00:10:24,079 --> 00:10:29,200
fuses you can use them

00:10:26,079 --> 00:10:31,200
in the same way as you use fuses in for

00:10:29,200 --> 00:10:34,000
example socs

00:10:31,200 --> 00:10:36,560
then we have the extend type extend

00:10:34,000 --> 00:10:39,519
types are similar to pcrs

00:10:36,560 --> 00:10:40,560
the you don't just write to them but

00:10:39,519 --> 00:10:43,680
instead

00:10:40,560 --> 00:10:44,880
when you want to do a right or a right

00:10:43,680 --> 00:10:47,600
equivalent operation

00:10:44,880 --> 00:10:49,440
what the tpm will do is it will take the

00:10:47,600 --> 00:10:52,160
old content of this

00:10:49,440 --> 00:10:53,200
index it will append the data that you

00:10:52,160 --> 00:10:55,760
want to put in there

00:10:53,200 --> 00:10:56,560
it will hash this together and then the

00:10:55,760 --> 00:10:59,760
hash of this

00:10:56,560 --> 00:11:02,079
is stored in this

00:10:59,760 --> 00:11:03,360
nv index so basically what you get is

00:11:02,079 --> 00:11:05,360
you get a hash chain

00:11:03,360 --> 00:11:07,920
of every data that you ever wrote into

00:11:05,360 --> 00:11:12,399
this index which can be kind of nice to

00:11:07,920 --> 00:11:14,959
for example prevent logs from being

00:11:12,399 --> 00:11:16,240
from being altered um after by an

00:11:14,959 --> 00:11:19,600
attacker

00:11:16,240 --> 00:11:22,160
or whatever afterwards and then finally

00:11:19,600 --> 00:11:25,440
there is a

00:11:22,160 --> 00:11:29,040
an index called of type pin which is a

00:11:25,440 --> 00:11:31,920
rather newer one the purpose of that was

00:11:29,040 --> 00:11:34,240
that so far the tpm only had a global

00:11:31,920 --> 00:11:35,519
um anti-brute force counter or

00:11:34,240 --> 00:11:37,600
dictionary attack

00:11:35,519 --> 00:11:40,399
prevention mechanism and so if you

00:11:37,600 --> 00:11:41,040
entered too many false password attempts

00:11:40,399 --> 00:11:43,920
or

00:11:41,040 --> 00:11:44,880
then the tpm would go into a lockout

00:11:43,920 --> 00:11:48,640
mode

00:11:44,880 --> 00:11:50,880
and you would have to provided a special

00:11:48,640 --> 00:11:52,639
password to reset the logout counter or

00:11:50,880 --> 00:11:53,120
you would have to wait a certain amount

00:11:52,639 --> 00:11:57,600
of time

00:11:53,120 --> 00:12:01,360
until the counter is decremented again

00:11:57,600 --> 00:12:04,079
here we have the ability to

00:12:01,360 --> 00:12:06,320
use an nv index that carries its own

00:12:04,079 --> 00:12:09,360
counter and its own threshold

00:12:06,320 --> 00:12:12,240
so it's an in it's a

00:12:09,360 --> 00:12:13,760
64-bit index i think and the first 32

00:12:12,240 --> 00:12:16,000
bits are used for the counter

00:12:13,760 --> 00:12:16,959
and the second 32-bits are used for the

00:12:16,000 --> 00:12:19,680
threshold

00:12:16,959 --> 00:12:20,639
and once the counter and whenever a

00:12:19,680 --> 00:12:23,120
authorization

00:12:20,639 --> 00:12:23,839
fails the counter is incremented once it

00:12:23,120 --> 00:12:27,279
reached

00:12:23,839 --> 00:12:30,560
reaches the threshold the count

00:12:27,279 --> 00:12:31,519
further attempts to authenticate against

00:12:30,560 --> 00:12:35,560
this envy index

00:12:31,519 --> 00:12:38,399
are blocked so this is kind of neat

00:12:35,560 --> 00:12:42,320
possibilities um

00:12:38,399 --> 00:12:44,079
regarding the uh tpm storage how much

00:12:42,320 --> 00:12:46,240
storage should we have available this is

00:12:44,079 --> 00:12:49,760
uh it's a tight resource

00:12:46,240 --> 00:12:53,360
um because of course it's a cost factor

00:12:49,760 --> 00:12:57,360
every byte of flash any security chip

00:12:53,360 --> 00:12:59,600
costs a lot of money the tcg estimates

00:12:57,360 --> 00:13:01,600
some typical usage and thereby defines

00:12:59,600 --> 00:13:03,200
minimums of what needs to be provided

00:13:01,600 --> 00:13:03,920
and here on the right hand side you can

00:13:03,200 --> 00:13:07,360
see

00:13:03,920 --> 00:13:08,399
the evaluation of what is assumed to be

00:13:07,360 --> 00:13:11,839
needed

00:13:08,399 --> 00:13:14,240
and that results in almost 4k

00:13:11,839 --> 00:13:15,839
of minimum storage that shall be

00:13:14,240 --> 00:13:17,760
provided

00:13:15,839 --> 00:13:19,839
might probably be a little bit more on

00:13:17,760 --> 00:13:21,680
most

00:13:19,839 --> 00:13:23,760
and most importantly it's not as tight

00:13:21,680 --> 00:13:26,240
as sometimes stated where people say

00:13:23,760 --> 00:13:28,000
every single index counts but it's still

00:13:26,240 --> 00:13:29,200
pretty tight and you'd have to keep in

00:13:28,000 --> 00:13:31,200
mind that this is

00:13:29,200 --> 00:13:32,880
shared with persistent keys so if you

00:13:31,200 --> 00:13:34,639
have a platform

00:13:32,880 --> 00:13:36,560
for those that know the concept with a

00:13:34,639 --> 00:13:38,880
persistent srk

00:13:36,560 --> 00:13:42,320
um that goes away from the same storage

00:13:38,880 --> 00:13:42,320
as nv indexes

00:13:42,800 --> 00:13:49,519
um in order to create an nv index

00:13:46,959 --> 00:13:51,760
so this is a very basic example we're

00:13:49,519 --> 00:13:54,639
using some command line tools

00:13:51,760 --> 00:13:54,940
and you see the the output at the bottom

00:13:54,639 --> 00:13:56,000
um

00:13:54,940 --> 00:13:59,600
[Music]

00:13:56,000 --> 00:14:00,160
we call nv create nv and actually this

00:13:59,600 --> 00:14:02,480
call

00:14:00,160 --> 00:14:04,160
for some reason got scrolled out of the

00:14:02,480 --> 00:14:06,000
terminal i'm sorry for that

00:14:04,160 --> 00:14:07,440
it asked for a new password to be

00:14:06,000 --> 00:14:09,279
assigned i sent

00:14:07,440 --> 00:14:10,800
i assigned an empty password and then it

00:14:09,279 --> 00:14:14,079
s for um

00:14:10,800 --> 00:14:15,279
owner authorization aka search hierarchy

00:14:14,079 --> 00:14:18,800
authorization

00:14:15,279 --> 00:14:22,720
which is the entity that

00:14:18,800 --> 00:14:26,000
is allowed to clear or deny

00:14:22,720 --> 00:14:27,279
access to defining and removing of nvme

00:14:26,000 --> 00:14:29,440
indices

00:14:27,279 --> 00:14:31,199
and then we can as i said it's a general

00:14:29,440 --> 00:14:32,959
purpose store so we can

00:14:31,199 --> 00:14:34,320
write to the store and we can read

00:14:32,959 --> 00:14:36,880
through the store

00:14:34,320 --> 00:14:38,240
and you see in the list that there is

00:14:36,880 --> 00:14:40,800
the envy owner

00:14:38,240 --> 00:14:44,000
my index at the bottom that was created

00:14:40,800 --> 00:14:46,240
that we're using now

00:14:44,000 --> 00:14:47,839
um another example for a counter would

00:14:46,240 --> 00:14:51,040
be here

00:14:47,839 --> 00:14:55,199
as you can see if i create a counter i

00:14:51,040 --> 00:14:57,120
give it the type counter at the very top

00:14:55,199 --> 00:14:58,560
i can then call increment on this

00:14:57,120 --> 00:15:00,959
counter and we'll increment

00:14:58,560 --> 00:15:01,760
and we see we jump from zero e to zero f

00:15:00,959 --> 00:15:04,000
as in

00:15:01,760 --> 00:15:04,880
see i didn't use the counter on my tpm

00:15:04,000 --> 00:15:08,079
very much

00:15:04,880 --> 00:15:09,920
but it initialized at zero e if i was to

00:15:08,079 --> 00:15:11,519
now delete the counter and recreate the

00:15:09,920 --> 00:15:15,279
counter it would start at

00:15:11,519 --> 00:15:17,519
zero f afterwards and as you can also

00:15:15,279 --> 00:15:20,000
see there is no way for us to just write

00:15:17,519 --> 00:15:20,800
arbitrary data even though by the length

00:15:20,000 --> 00:15:25,040
it

00:15:20,800 --> 00:15:28,320
should fit in there um given its

00:15:25,040 --> 00:15:31,199
oh no uh it's actually a bite too much

00:15:28,320 --> 00:15:32,240
um but still would always deny us to put

00:15:31,199 --> 00:15:34,079
a counter in there

00:15:32,240 --> 00:15:37,600
and just for the record the counter is

00:15:34,079 --> 00:15:37,600
always 64-bit

00:15:38,360 --> 00:15:43,440
unsigned um

00:15:40,160 --> 00:15:44,240
yeah so this is what tpm envy storage is

00:15:43,440 --> 00:15:47,440
in a

00:15:44,240 --> 00:15:47,920
very brief nutshell and um now we're

00:15:47,440 --> 00:15:49,920
gonna

00:15:47,920 --> 00:15:51,519
see how we can combine that with

00:15:49,920 --> 00:15:54,399
policies

00:15:51,519 --> 00:15:55,759
again some background what is a ea

00:15:54,399 --> 00:15:58,480
policy

00:15:55,759 --> 00:15:59,600
so the tpm has a pretty versatile policy

00:15:58,480 --> 00:16:03,279
framework

00:15:59,600 --> 00:16:05,920
can be used for a bunch of things and

00:16:03,279 --> 00:16:08,560
but since it's an embedded security chip

00:16:05,920 --> 00:16:11,600
they had to come up with a way to

00:16:08,560 --> 00:16:12,800
efficiently store those policies in all

00:16:11,600 --> 00:16:15,920
of these objects

00:16:12,800 --> 00:16:18,240
so what they did was um they said okay a

00:16:15,920 --> 00:16:21,360
policy statement the policy expression

00:16:18,240 --> 00:16:22,079
is going to be a combination as a

00:16:21,360 --> 00:16:25,279
combination

00:16:22,079 --> 00:16:28,560
of policy elements will be encoded as

00:16:25,279 --> 00:16:31,519
a um hash chain

00:16:28,560 --> 00:16:33,360
so basically each policy element and on

00:16:31,519 --> 00:16:36,240
the top right here we see we have the

00:16:33,360 --> 00:16:37,600
policy elements avc

00:16:36,240 --> 00:16:40,160
each of those elements can be

00:16:37,600 --> 00:16:43,040
represented as a hash value

00:16:40,160 --> 00:16:44,880
and when you want to end combine those

00:16:43,040 --> 00:16:46,240
elements what you do is you build a hash

00:16:44,880 --> 00:16:49,920
chain that starts

00:16:46,240 --> 00:16:52,079
with a bunch of zeros and then your hash

00:16:49,920 --> 00:16:54,560
basically you extend

00:16:52,079 --> 00:16:56,079
hash extend each of the policy elements

00:16:54,560 --> 00:16:58,320
into the digest

00:16:56,079 --> 00:16:59,199
and you end up with a single digest in

00:16:58,320 --> 00:17:02,720
the end that

00:16:59,199 --> 00:17:06,079
cryptographically at least correlates to

00:17:02,720 --> 00:17:10,959
the policy that was defined and then

00:17:06,079 --> 00:17:13,919
whenever you define something in the tpm

00:17:10,959 --> 00:17:16,000
the tpm will only store this digest

00:17:13,919 --> 00:17:19,520
value

00:17:16,000 --> 00:17:21,679
be that a key object or be that an nv

00:17:19,520 --> 00:17:24,559
index or be that the authorization for

00:17:21,679 --> 00:17:27,679
hierarchy or whatever

00:17:24,559 --> 00:17:29,600
in order to make this now

00:17:27,679 --> 00:17:31,120
more versatile you want to have an or

00:17:29,600 --> 00:17:32,880
element in there as well

00:17:31,120 --> 00:17:35,039
so what we have is we have the special

00:17:32,880 --> 00:17:38,160
policy element called policy or

00:17:35,039 --> 00:17:41,679
that instead of just taking one

00:17:38,160 --> 00:17:44,840
sub value takes up to eight sub values

00:17:41,679 --> 00:17:47,919
or incoming let's say incoming digest

00:17:44,840 --> 00:17:51,120
values and so by that you can start

00:17:47,919 --> 00:17:53,600
combining a bunch of subtrees

00:17:51,120 --> 00:17:54,480
as they're often referred to into a

00:17:53,600 --> 00:17:56,559
single

00:17:54,480 --> 00:17:58,720
policy digest tree if you want to have

00:17:56,559 --> 00:18:01,919
more than just eight

00:17:58,720 --> 00:18:04,320
the convention you can of course chain

00:18:01,919 --> 00:18:06,400
a bunch of ores together and the

00:18:04,320 --> 00:18:07,760
convention is that you would do so only

00:18:06,400 --> 00:18:11,200
on the top level

00:18:07,760 --> 00:18:15,120
and you would make them um flat

00:18:11,200 --> 00:18:16,799
so that you will have the topmost ore

00:18:15,120 --> 00:18:18,480
and then you would only have ores on the

00:18:16,799 --> 00:18:20,160
next layer and then you would start with

00:18:18,480 --> 00:18:23,200
the actual policies

00:18:20,160 --> 00:18:25,360
and that should be enough for um

00:18:23,200 --> 00:18:26,960
up to 64 different policy branches

00:18:25,360 --> 00:18:28,559
underneath if you want to go beyond that

00:18:26,960 --> 00:18:31,200
again you make

00:18:28,559 --> 00:18:34,400
the first three layers of the tree on

00:18:31,200 --> 00:18:34,400
the oars and then you go on

00:18:35,120 --> 00:18:38,960
and as i mentioned the tpm only tracks

00:18:37,520 --> 00:18:42,160
the topmost hash

00:18:38,960 --> 00:18:45,360
so what you need to do is you need to

00:18:42,160 --> 00:18:46,160
store the actual policies that you want

00:18:45,360 --> 00:18:49,200
to evaluate

00:18:46,160 --> 00:18:50,400
outside of the tpm and then you call the

00:18:49,200 --> 00:18:53,200
tpm

00:18:50,400 --> 00:18:55,120
and for basically for each policy

00:18:53,200 --> 00:18:57,520
element

00:18:55,120 --> 00:18:58,880
or sorry you start off by opening a

00:18:57,520 --> 00:19:02,880
policy session

00:18:58,880 --> 00:19:05,440
and the tpm then has an internal hash

00:19:02,880 --> 00:19:07,679
value of zero that it keeps track of and

00:19:05,440 --> 00:19:11,039
then you call a bunch of policy

00:19:07,679 --> 00:19:12,000
commands on this policy session and each

00:19:11,039 --> 00:19:14,640
time

00:19:12,000 --> 00:19:16,160
this this policy evaluates true the tpm

00:19:14,640 --> 00:19:19,600
will go ahead and

00:19:16,160 --> 00:19:22,960
update the hash value according to the

00:19:19,600 --> 00:19:24,000
to this schematics and so for each

00:19:22,960 --> 00:19:26,799
policy element you call

00:19:24,000 --> 00:19:28,480
the policy commands and in the end um

00:19:26,799 --> 00:19:31,840
you use this policy session

00:19:28,480 --> 00:19:34,080
where the final uh hash value is

00:19:31,840 --> 00:19:35,200
stored inside the tpm and you call the

00:19:34,080 --> 00:19:37,200
operation on the key

00:19:35,200 --> 00:19:40,160
that you or the nv object that you want

00:19:37,200 --> 00:19:42,960
to use and the tpm does the comparison

00:19:40,160 --> 00:19:43,919
to see if the policy was fulfilled by

00:19:42,960 --> 00:19:45,760
the

00:19:43,919 --> 00:19:49,440
proofs of the policy that you gave

00:19:45,760 --> 00:19:49,440
before via the commands

00:19:50,160 --> 00:19:54,799
the amount of policy elements that you

00:19:52,400 --> 00:19:57,280
have is pretty large as you see here

00:19:54,799 --> 00:19:58,640
um i guess the most important ones or

00:19:57,280 --> 00:20:01,600
the most interesting ones that you want

00:19:58,640 --> 00:20:03,840
to look at are of course the policy or

00:20:01,600 --> 00:20:05,520
the policy signed where you can have a

00:20:03,840 --> 00:20:07,440
challenge response scheme

00:20:05,520 --> 00:20:09,280
policy secret where you can defer to

00:20:07,440 --> 00:20:10,720
another

00:20:09,280 --> 00:20:12,400
object so if you want to have

00:20:10,720 --> 00:20:15,919
authorization for object a

00:20:12,400 --> 00:20:16,799
you can defer this to an authorization

00:20:15,919 --> 00:20:19,520
to object b

00:20:16,799 --> 00:20:20,320
and if that's fulfilled the first one is

00:20:19,520 --> 00:20:23,120
fulfilled

00:20:20,320 --> 00:20:25,840
policy aura already mentioned policy pcr

00:20:23,120 --> 00:20:30,559
is the interesting one when it comes to

00:20:25,840 --> 00:20:33,760
boot value or boot integrity

00:20:30,559 --> 00:20:35,440
counter timer can be interesting and

00:20:33,760 --> 00:20:37,440
command code is definitely interesting

00:20:35,440 --> 00:20:39,120
so each of the all branches for example

00:20:37,440 --> 00:20:40,880
you can restrict to a certain command

00:20:39,120 --> 00:20:43,120
code so you can have

00:20:40,880 --> 00:20:45,360
a different policy for writing an index

00:20:43,120 --> 00:20:47,039
versus reading an index or you can have

00:20:45,360 --> 00:20:51,600
a different policy

00:20:47,039 --> 00:20:53,120
for using a key versus exporting a key

00:20:51,600 --> 00:20:55,120
um when it comes to exporting there's

00:20:53,120 --> 00:20:57,440
also duplication select i

00:20:55,120 --> 00:20:59,520
won't get into too much detail here

00:20:57,440 --> 00:21:02,400
policy password is of course interesting

00:20:59,520 --> 00:21:04,880
where basically you say okay i want to

00:21:02,400 --> 00:21:08,159
have the user enter the password that is

00:21:04,880 --> 00:21:10,480
associated with this object as well

00:21:08,159 --> 00:21:14,640
and then policy nv which we're going to

00:21:10,480 --> 00:21:14,640
be looking at a little more later

00:21:14,840 --> 00:21:20,240
um most of these policy elements are

00:21:18,080 --> 00:21:23,280
then also parameterized

00:21:20,240 --> 00:21:26,159
so that makes the total

00:21:23,280 --> 00:21:28,320
set of combinations even even larger for

00:21:26,159 --> 00:21:31,440
example the policy nv

00:21:28,320 --> 00:21:33,039
um it compares the content of an nv to

00:21:31,440 --> 00:21:35,120
an operand

00:21:33,039 --> 00:21:36,080
um that's also provided as part of the

00:21:35,120 --> 00:21:38,159
policy

00:21:36,080 --> 00:21:41,120
and then you have a lot of operations so

00:21:38,159 --> 00:21:44,480
you have equal or not equal

00:21:41,120 --> 00:21:47,840
pretty obvious but then you also have um

00:21:44,480 --> 00:21:50,880
signed and unsigned numeric comparisons

00:21:47,840 --> 00:21:54,799
which is kind of nice and you also have

00:21:50,880 --> 00:21:58,159
um corresponding to the bitmask

00:21:54,799 --> 00:22:00,240
type of um of the fuses like

00:21:58,159 --> 00:22:01,360
behavior of envy indices that i talked

00:22:00,240 --> 00:22:02,880
about earlier

00:22:01,360 --> 00:22:04,880
you here have the equivalent in the

00:22:02,880 --> 00:22:06,159
policy where you can say only if a

00:22:04,880 --> 00:22:10,559
certain bit is still

00:22:06,159 --> 00:22:12,960
clear in a certain envy index

00:22:10,559 --> 00:22:13,600
this policy is allowed to evaluate to

00:22:12,960 --> 00:22:15,760
true

00:22:13,600 --> 00:22:16,799
or vice versa only if a certain bit has

00:22:15,760 --> 00:22:19,360
been set

00:22:16,799 --> 00:22:22,799
certain feature activated what not this

00:22:19,360 --> 00:22:26,080
policy is allowed to evaluate it true

00:22:22,799 --> 00:22:28,240
um also interesting in there you can

00:22:26,080 --> 00:22:30,720
make these comparisons also against just

00:22:28,240 --> 00:22:34,400
subparts of the nv index

00:22:30,720 --> 00:22:36,159
since there is an offset parameter as

00:22:34,400 --> 00:22:38,400
well and then there is also

00:22:36,159 --> 00:22:40,159
the size of the operand so you can say i

00:22:38,400 --> 00:22:43,520
only want to compare to

00:22:40,159 --> 00:22:46,240
a certain to certain sub bytes of the

00:22:43,520 --> 00:22:46,240
envy index

00:22:46,320 --> 00:22:50,960
and in practice it would look something

00:22:48,960 --> 00:22:53,679
like this

00:22:50,960 --> 00:22:54,000
if you were to directly call the tpm via

00:22:53,679 --> 00:22:57,919
these

00:22:54,000 --> 00:23:01,679
policies and so this code was

00:22:57,919 --> 00:23:03,840
taken from this crypt setup tpm things

00:23:01,679 --> 00:23:05,120
and here you can already see that as i

00:23:03,840 --> 00:23:07,919
said you start off

00:23:05,120 --> 00:23:10,320
with a policy session and then you call

00:23:07,919 --> 00:23:12,480
a bunch of policy commands in this case

00:23:10,320 --> 00:23:13,679
policy pcr policy password policy

00:23:12,480 --> 00:23:18,159
command code

00:23:13,679 --> 00:23:20,559
in this order on the policy session

00:23:18,159 --> 00:23:22,159
and you can and then you the tpm

00:23:20,559 --> 00:23:25,039
internally updates

00:23:22,159 --> 00:23:26,559
the digest counter in this in the

00:23:25,039 --> 00:23:28,799
session that was started here

00:23:26,559 --> 00:23:30,960
and in the end you then go ahead and

00:23:28,799 --> 00:23:35,039
either return the session or you get the

00:23:30,960 --> 00:23:38,240
the digest however this is kind of

00:23:35,039 --> 00:23:40,640
unnice or kind of complicated to program

00:23:38,240 --> 00:23:42,320
because for something like a policy pcr

00:23:40,640 --> 00:23:45,760
you need to read out

00:23:42,320 --> 00:23:46,400
the pcr values beforehand in order to

00:23:45,760 --> 00:23:48,400
make

00:23:46,400 --> 00:23:50,159
sense out of them so there's another

00:23:48,400 --> 00:23:51,840
routine that you have to do and you have

00:23:50,159 --> 00:23:52,559
to hatch them together and then put them

00:23:51,840 --> 00:23:55,360
in there

00:23:52,559 --> 00:23:56,559
so it becomes kind of kind of ugly

00:23:55,360 --> 00:23:59,279
potentially

00:23:56,559 --> 00:24:00,080
and so we thought about how you could

00:23:59,279 --> 00:24:03,279
make this

00:24:00,080 --> 00:24:05,360
nicer to work with and

00:24:03,279 --> 00:24:06,720
yeah the the api that was used here is

00:24:05,360 --> 00:24:10,400
part of the

00:24:06,720 --> 00:24:12,880
tss it's the esos api

00:24:10,400 --> 00:24:14,720
and this eso's api gives you the low

00:24:12,880 --> 00:24:16,640
level access to all functionalities of

00:24:14,720 --> 00:24:19,760
the tpm

00:24:16,640 --> 00:24:20,240
um as i mentioned so it's the go-to if

00:24:19,760 --> 00:24:23,600
you

00:24:20,240 --> 00:24:24,960
are in a either in an environment where

00:24:23,600 --> 00:24:26,880
you don't have

00:24:24,960 --> 00:24:29,200
too many capabilities or if you want to

00:24:26,880 --> 00:24:33,120
do some very

00:24:29,200 --> 00:24:34,720
borderline use cases that you want to

00:24:33,120 --> 00:24:37,679
implement

00:24:34,720 --> 00:24:39,279
and um you have to manually keep track

00:24:37,679 --> 00:24:41,039
of the policy as i mentioned and then

00:24:39,279 --> 00:24:42,159
you have to execute this policy so it's

00:24:41,039 --> 00:24:44,480
only very intere

00:24:42,159 --> 00:24:46,240
only too interesting if you always have

00:24:44,480 --> 00:24:50,159
the same policy

00:24:46,240 --> 00:24:51,279
and for for usage you can use the tpm2

00:24:50,159 --> 00:24:54,400
tools

00:24:51,279 --> 00:24:58,799
and those map more or less directly

00:24:54,400 --> 00:25:01,120
to the to this es api

00:24:58,799 --> 00:25:04,240
with some some convenience functionally

00:25:01,120 --> 00:25:04,240
put on top of it though

00:25:04,799 --> 00:25:10,000
and but then there is um also a

00:25:07,919 --> 00:25:11,200
rather new library that was released

00:25:10,000 --> 00:25:14,640
beginning of this year

00:25:11,200 --> 00:25:16,799
that we called the fabio feature api

00:25:14,640 --> 00:25:18,240
i know we're bad with names but i have

00:25:16,799 --> 00:25:18,640
to stick with them once they're out

00:25:18,240 --> 00:25:20,640
there

00:25:18,640 --> 00:25:22,320
so this is a more convenient interface

00:25:20,640 --> 00:25:25,520
to talk to the tpm

00:25:22,320 --> 00:25:27,520
because it automates a lot of stuff

00:25:25,520 --> 00:25:29,919
first of all most importantly for this

00:25:27,520 --> 00:25:33,120
talk was it what it does is

00:25:29,919 --> 00:25:35,919
it comes with a language

00:25:33,120 --> 00:25:36,880
that gives us the capability to express

00:25:35,919 --> 00:25:40,320
policies as

00:25:36,880 --> 00:25:43,600
json in a declarative way

00:25:40,320 --> 00:25:46,640
then it also automates away the whole

00:25:43,600 --> 00:25:48,320
satisfaction of policies using the

00:25:46,640 --> 00:25:49,840
policy sessions

00:25:48,320 --> 00:25:52,799
and this is done completely under the

00:25:49,840 --> 00:25:54,720
covers it also stores and keeps track of

00:25:52,799 --> 00:25:55,520
the policies in the metadata of the

00:25:54,720 --> 00:25:57,279
objects

00:25:55,520 --> 00:25:59,360
so it's completely transparent to the

00:25:57,279 --> 00:26:02,000
user

00:25:59,360 --> 00:26:04,159
where the stuff is stored how it's

00:26:02,000 --> 00:26:06,799
evaluated how digests are calculated

00:26:04,159 --> 00:26:06,799
stuff like that

00:26:07,600 --> 00:26:11,679
and we have the corresponding tools so

00:26:10,640 --> 00:26:13,200
as you can see here

00:26:11,679 --> 00:26:15,039
and that's what i mentioned before the

00:26:13,200 --> 00:26:17,360
tpm2 tools mapped

00:26:15,039 --> 00:26:20,000
more or less directly to the eso's api

00:26:17,360 --> 00:26:21,840
the tss2 tools actually map one to one

00:26:20,000 --> 00:26:26,720
to the feature api

00:26:21,840 --> 00:26:28,960
so you will see as i as you saw before

00:26:26,720 --> 00:26:32,960
the parameters that you provide there

00:26:28,960 --> 00:26:35,279
the for example byte buffers or

00:26:32,960 --> 00:26:36,640
also the strings that you provide to the

00:26:35,279 --> 00:26:38,240
tss2 tools

00:26:36,640 --> 00:26:40,320
they are passed one to one into the

00:26:38,240 --> 00:26:43,039
feature api and the feature api

00:26:40,320 --> 00:26:44,159
doesn't come with any tpm specific data

00:26:43,039 --> 00:26:46,080
types anymore

00:26:44,159 --> 00:26:47,840
and more or less use a standard data

00:26:46,080 --> 00:26:51,440
type such as

00:26:47,840 --> 00:26:55,039
m strings or json

00:26:51,440 --> 00:26:55,600
or just by buffers and everything i'm

00:26:55,039 --> 00:26:58,240
gonna

00:26:55,600 --> 00:27:00,799
talk about now how to use the feature

00:26:58,240 --> 00:27:03,200
api to work with policies on nv

00:27:00,799 --> 00:27:05,600
it pretty much works the same way um for

00:27:03,200 --> 00:27:08,720
key objects so just instead of

00:27:05,600 --> 00:27:10,640
creating v you call create key

00:27:08,720 --> 00:27:12,640
all right what does such a policy look

00:27:10,640 --> 00:27:16,000
like

00:27:12,640 --> 00:27:17,919
in json as i said our goal was to make

00:27:16,000 --> 00:27:19,679
it a declarative language

00:27:17,919 --> 00:27:22,000
which makes it much more convenient for

00:27:19,679 --> 00:27:24,240
the user and it should be human readable

00:27:22,000 --> 00:27:27,279
and human editable and if you remember

00:27:24,240 --> 00:27:28,399
three slides before we had those uh the

00:27:27,279 --> 00:27:30,240
complete screen

00:27:28,399 --> 00:27:32,320
um with all the policy commands and

00:27:30,240 --> 00:27:33,120
policy session this is what the same

00:27:32,320 --> 00:27:37,360
policy

00:27:33,120 --> 00:27:39,279
looks like in the json encoding with

00:27:37,360 --> 00:27:42,000
json policy language encoding

00:27:39,279 --> 00:27:42,480
with the pcr and as you can see it's

00:27:42,000 --> 00:27:44,720
much

00:27:42,480 --> 00:27:46,640
easier to read them because we just say

00:27:44,720 --> 00:27:49,120
we have the pcr we want to evaluate

00:27:46,640 --> 00:27:51,679
against the current pcr values of

00:27:49,120 --> 00:27:53,039
zero through two we require the entering

00:27:51,679 --> 00:27:55,200
of password

00:27:53,039 --> 00:27:57,360
and we restrict the usage of this policy

00:27:55,200 --> 00:27:59,279
to an and reread

00:27:57,360 --> 00:28:03,039
and this is all you have to write in

00:27:59,279 --> 00:28:05,600
order to achieve the same result um

00:28:03,039 --> 00:28:07,279
and then this portal c is stored in the

00:28:05,600 --> 00:28:09,760
feature api's object made

00:28:07,279 --> 00:28:11,760
metadata store and whenever you access

00:28:09,760 --> 00:28:14,080
the nv index that

00:28:11,760 --> 00:28:15,520
contains this policy it gets

00:28:14,080 --> 00:28:17,279
automatically evaluated in the

00:28:15,520 --> 00:28:21,440
background

00:28:17,279 --> 00:28:24,880
um yeah that was already that part

00:28:21,440 --> 00:28:27,679
and um now let's go or jump or

00:28:24,880 --> 00:28:28,880
dive right into some example so what i

00:28:27,679 --> 00:28:31,360
brought here with

00:28:28,880 --> 00:28:32,799
with me was one of the most common use

00:28:31,360 --> 00:28:35,039
cases i get asked

00:28:32,799 --> 00:28:37,360
i want to have warm memory warm memory

00:28:35,039 --> 00:28:40,960
is right once read many

00:28:37,360 --> 00:28:43,679
and this is pretty trivial to set up

00:28:40,960 --> 00:28:46,000
in such a json policy we can see here on

00:28:43,679 --> 00:28:47,600
the right what we do is we

00:28:46,000 --> 00:28:50,320
provided some arbitrary kind of

00:28:47,600 --> 00:28:53,279
description and we said it's of type or

00:28:50,320 --> 00:28:54,559
and the branches are read and write and

00:28:53,279 --> 00:28:56,320
for the read case

00:28:54,559 --> 00:28:57,600
we basically say that you can always

00:28:56,320 --> 00:28:59,760
read so

00:28:57,600 --> 00:29:00,720
we restrict it to the command code and

00:28:59,760 --> 00:29:02,960
we read

00:29:00,720 --> 00:29:04,559
and this branch always evaluates to true

00:29:02,960 --> 00:29:07,600
if that's the case

00:29:04,559 --> 00:29:08,399
for the right case we say you can do

00:29:07,600 --> 00:29:10,799
this

00:29:08,399 --> 00:29:12,000
as long as the angry written bit of the

00:29:10,799 --> 00:29:15,520
envy index

00:29:12,000 --> 00:29:18,559
is set to no and so what this does is

00:29:15,520 --> 00:29:19,520
um the tpm will check that this is the

00:29:18,559 --> 00:29:22,559
case

00:29:19,520 --> 00:29:23,279
and once it's written um once the as

00:29:22,559 --> 00:29:26,320
soon as

00:29:23,279 --> 00:29:28,240
the nv index content was written once

00:29:26,320 --> 00:29:30,320
this bit is set to true and never reset

00:29:28,240 --> 00:29:33,600
again

00:29:30,320 --> 00:29:36,159
um those are the commands if you want to

00:29:33,600 --> 00:29:37,200
test this out on your own machine just

00:29:36,159 --> 00:29:39,279
be aware you have to

00:29:37,200 --> 00:29:40,240
call it tss2 provision in the very

00:29:39,279 --> 00:29:42,240
beginning

00:29:40,240 --> 00:29:43,279
and i would highly recommend that you go

00:29:42,240 --> 00:29:46,480
to

00:29:43,279 --> 00:29:50,000
tss 301 or

00:29:46,480 --> 00:29:51,520
master for that matter

00:29:50,000 --> 00:29:53,279
because we we changed some of the

00:29:51,520 --> 00:29:56,559
handling of the policies

00:29:53,279 --> 00:29:58,399
going from 2.4 to 3.1

00:29:56,559 --> 00:30:00,159
um when you call that this is basically

00:29:58,399 --> 00:30:01,919
what happens again you're asked for a

00:30:00,159 --> 00:30:03,279
password for this index i'm setting that

00:30:01,919 --> 00:30:04,960
to zero because

00:30:03,279 --> 00:30:07,600
we're not using the password anywhere

00:30:04,960 --> 00:30:11,520
here in the policy so if you used

00:30:07,600 --> 00:30:13,600
a password element anywhere in here

00:30:11,520 --> 00:30:14,960
that makes it would make sense in this

00:30:13,600 --> 00:30:18,559
case we don't

00:30:14,960 --> 00:30:21,600
um i'm asked for the authorization again

00:30:18,559 --> 00:30:24,559
and then i want to write

00:30:21,600 --> 00:30:25,440
the hello lss string to this the index

00:30:24,559 --> 00:30:29,039
again

00:30:25,440 --> 00:30:31,760
and what fappy aka the

00:30:29,039 --> 00:30:33,760
what fappy will do is fabby will call a

00:30:31,760 --> 00:30:37,200
callback which is called a

00:30:33,760 --> 00:30:39,440
branch selection callback something like

00:30:37,200 --> 00:30:39,440
that

00:30:40,080 --> 00:30:44,320
and the what the tools do is they

00:30:42,159 --> 00:30:46,880
register the c callback and

00:30:44,320 --> 00:30:48,080
um so the fabpy will then provide the

00:30:46,880 --> 00:30:50,240
different branch names

00:30:48,080 --> 00:30:51,279
you do your choice choose two in this

00:30:50,240 --> 00:30:54,480
case

00:30:51,279 --> 00:30:55,360
and it all succeeds and once we then

00:30:54,480 --> 00:30:57,679
read

00:30:55,360 --> 00:30:59,600
again we are asked which policy or which

00:30:57,679 --> 00:31:02,720
branch we want to evaluate to

00:30:59,600 --> 00:31:04,159
we take the read branch and we get back

00:31:02,720 --> 00:31:06,880
the result

00:31:04,159 --> 00:31:07,360
and as we can see as i said it's a warm

00:31:06,880 --> 00:31:10,320
white

00:31:07,360 --> 00:31:11,200
right once memory if we call the right

00:31:10,320 --> 00:31:13,600
again

00:31:11,200 --> 00:31:14,960
um we will be failing here and we can

00:31:13,600 --> 00:31:17,279
see that the envy right

00:31:14,960 --> 00:31:18,240
finish failed because the policy check

00:31:17,279 --> 00:31:21,279
failed

00:31:18,240 --> 00:31:22,799
because in this case the um the envy

00:31:21,279 --> 00:31:25,679
written bit was actually

00:31:22,799 --> 00:31:26,880
true and not false and so the digest

00:31:25,679 --> 00:31:29,039
value of the

00:31:26,880 --> 00:31:30,960
policy session and the digest value

00:31:29,039 --> 00:31:33,840
stored for the nv index don't match

00:31:30,960 --> 00:31:33,840
anymore

00:31:33,919 --> 00:31:37,519
um the next example i brought with me

00:31:36,559 --> 00:31:39,600
was um

00:31:37,519 --> 00:31:42,399
some some equal comparison this is i

00:31:39,600 --> 00:31:44,799
think when it comes to nvndc is the

00:31:42,399 --> 00:31:46,799
probably the most commonly used one

00:31:44,799 --> 00:31:49,279
besides maybe the the

00:31:46,799 --> 00:31:50,480
bit set testing so in this case what

00:31:49,279 --> 00:31:52,080
we're going to do is

00:31:50,480 --> 00:31:54,000
we're going to look at the envy index

00:31:52,080 --> 00:31:56,640
and we're going to check

00:31:54,000 --> 00:31:58,000
what the correct value is and in this

00:31:56,640 --> 00:32:00,960
case

00:31:58,000 --> 00:32:01,360
if you want to translate this over to um

00:32:00,960 --> 00:32:03,200
the

00:32:01,360 --> 00:32:05,200
string representation so this is the hex

00:32:03,200 --> 00:32:08,880
representation basically of the

00:32:05,200 --> 00:32:11,679
of the hello world uh the word hello

00:32:08,880 --> 00:32:12,960
and um so only if my index still

00:32:11,679 --> 00:32:16,159
contains the word

00:32:12,960 --> 00:32:17,519
hello we're gonna evaluate to true and

00:32:16,159 --> 00:32:21,200
as we can see here

00:32:17,519 --> 00:32:23,440
um again i created this envy index

00:32:21,200 --> 00:32:25,039
and i can write to the newly created

00:32:23,440 --> 00:32:27,360
index

00:32:25,039 --> 00:32:29,519
and it would just work seamlessly but

00:32:27,360 --> 00:32:33,440
once i write something else like buy

00:32:29,519 --> 00:32:36,799
into the original my index uh writing to

00:32:33,440 --> 00:32:37,600
my new index will be failing because

00:32:36,799 --> 00:32:42,080
again the

00:32:37,600 --> 00:32:45,519
policy um the policy envy

00:32:42,080 --> 00:32:48,720
execution failed and thereby i cannot

00:32:45,519 --> 00:32:50,880
progress my

00:32:48,720 --> 00:32:52,640
policy session any further or fappy

00:32:50,880 --> 00:32:55,600
cannot do so

00:32:52,640 --> 00:32:57,200
so this makes the usage of policies just

00:32:55,600 --> 00:32:58,799
way more convenient

00:32:57,200 --> 00:33:00,320
and i can tell you from personal

00:32:58,799 --> 00:33:03,360
experience that it's

00:33:00,320 --> 00:33:06,399
pretty much not too much fun

00:33:03,360 --> 00:33:09,679
to write up the esos calls and it's way

00:33:06,399 --> 00:33:12,799
easier to write these json files

00:33:09,679 --> 00:33:16,240
of course json is not the

00:33:12,799 --> 00:33:18,320
writing json in regular editor is not

00:33:16,240 --> 00:33:19,519
the most still not the most convenient

00:33:18,320 --> 00:33:22,480
thing so

00:33:19,519 --> 00:33:24,480
something that we just started and by me

00:33:22,480 --> 00:33:27,440
i mean peter hoover came up with the

00:33:24,480 --> 00:33:29,919
idea and jung rapp and myself

00:33:27,440 --> 00:33:32,000
are now participating in that as well as

00:33:29,919 --> 00:33:35,600
we're coming up or writing a

00:33:32,000 --> 00:33:38,000
json schema for this policy language

00:33:35,600 --> 00:33:40,080
um it's still working progress at the

00:33:38,000 --> 00:33:42,559
time that i'm recording here

00:33:40,080 --> 00:33:43,440
hopefully by the time um that this is

00:33:42,559 --> 00:33:46,240
aired

00:33:43,440 --> 00:33:49,200
we will have it ready on on the tpm2

00:33:46,240 --> 00:33:51,440
github i o soft um website

00:33:49,200 --> 00:33:52,559
um and here you can already get a sneak

00:33:51,440 --> 00:33:56,480
peek

00:33:52,559 --> 00:33:59,679
at the whole thing and the idea is

00:33:56,480 --> 00:34:02,720
that you can click together your policy

00:33:59,679 --> 00:34:05,039
and just for fun of it

00:34:02,720 --> 00:34:06,399
i brought you an example here you can

00:34:05,039 --> 00:34:09,359
see this is the example

00:34:06,399 --> 00:34:11,440
from earlier and i actually used this

00:34:09,359 --> 00:34:13,679
editor in order to write that

00:34:11,440 --> 00:34:14,480
and we can see that what we can update

00:34:13,679 --> 00:34:16,879
it here

00:34:14,480 --> 00:34:18,879
to equal or not equal and we can very

00:34:16,879 --> 00:34:20,960
easily add another item

00:34:18,879 --> 00:34:21,919
for example if we want to have passport

00:34:20,960 --> 00:34:24,399
authorization

00:34:21,919 --> 00:34:25,280
and we can add another item if we want

00:34:24,399 --> 00:34:29,599
to have

00:34:25,280 --> 00:34:29,599
the nv written bit set to

00:34:31,760 --> 00:34:36,480
set to true and then it's gonna only

00:34:34,720 --> 00:34:38,639
gonna evaluate that way

00:34:36,480 --> 00:34:40,320
so yeah this is still work in progress

00:34:38,639 --> 00:34:41,839
um unfortunately it is the work in

00:34:40,320 --> 00:34:44,639
progress because we

00:34:41,839 --> 00:34:45,359
originally defined the language we

00:34:44,639 --> 00:34:47,919
allowed a

00:34:45,359 --> 00:34:48,480
bit too many values we were pretty

00:34:47,919 --> 00:34:51,919
pretty

00:34:48,480 --> 00:34:55,200
broad and for example integers can be

00:34:51,919 --> 00:34:57,680
provided in either as a json integer

00:34:55,200 --> 00:34:58,960
or it can be provided in as a hex value

00:34:57,680 --> 00:35:02,079
in a string

00:34:58,960 --> 00:35:04,960
and so this gets kind of tough to

00:35:02,079 --> 00:35:07,599
implement in a json schema but

00:35:04,960 --> 00:35:08,320
hopefully we can sort stuff out and it

00:35:07,599 --> 00:35:12,960
will

00:35:08,320 --> 00:35:16,240
seamlessly work once this is aired

00:35:12,960 --> 00:35:17,040
all right so what did we see what did we

00:35:16,240 --> 00:35:20,320
talk about

00:35:17,040 --> 00:35:23,599
as i said the tpm has pretty

00:35:20,320 --> 00:35:26,960
nice capabilities for

00:35:23,599 --> 00:35:28,880
user storage it also has very nice

00:35:26,960 --> 00:35:31,200
policy capabilities

00:35:28,880 --> 00:35:32,880
and especially on this later part i

00:35:31,200 --> 00:35:36,480
think there's a lot of things that

00:35:32,880 --> 00:35:40,560
still can be um

00:35:36,480 --> 00:35:43,920
yeah can be discovered in the future

00:35:40,560 --> 00:35:44,480
i remember that i in the past did some

00:35:43,920 --> 00:35:46,720
some

00:35:44,480 --> 00:35:48,560
interesting firmware update schemes

00:35:46,720 --> 00:35:50,079
where you can have the firmware version

00:35:48,560 --> 00:35:53,359
counter be part of the nv

00:35:50,079 --> 00:35:56,560
and you only provide access to your

00:35:53,359 --> 00:35:58,079
storage partitions or data partitions if

00:35:56,560 --> 00:35:58,960
the firmware is actually the latest

00:35:58,079 --> 00:36:02,079
firmware

00:35:58,960 --> 00:36:04,880
um so you prevent rollbacks

00:36:02,079 --> 00:36:05,359
something that we know is a hard thing

00:36:04,880 --> 00:36:08,960
to do

00:36:05,359 --> 00:36:12,720
if you don't have something like a tpm

00:36:08,960 --> 00:36:12,720
capable device with a counter

00:36:13,520 --> 00:36:19,839
yeah um and i think or i hope that um

00:36:17,200 --> 00:36:20,480
tapi will be the enabling factor for

00:36:19,839 --> 00:36:22,480
really

00:36:20,480 --> 00:36:24,400
getting people getting maybe you in the

00:36:22,480 --> 00:36:26,720
audience to

00:36:24,400 --> 00:36:29,119
explore and elaborate on the

00:36:26,720 --> 00:36:32,240
capabilities using ea policies

00:36:29,119 --> 00:36:32,800
and hopefully the gui editor will be

00:36:32,240 --> 00:36:35,920
even

00:36:32,800 --> 00:36:38,800
more interesting or make this even more

00:36:35,920 --> 00:36:41,680
interesting and more easy to use

00:36:38,800 --> 00:36:42,079
for further information um two days ago

00:36:41,680 --> 00:36:45,760
uh

00:36:42,079 --> 00:36:49,760
here at osse not one day ago there

00:36:45,760 --> 00:36:51,440
was the talk on tpm's not rocket science

00:36:49,760 --> 00:36:53,599
by johannes and peter

00:36:51,440 --> 00:36:54,880
that's very interesting and then i would

00:36:53,599 --> 00:36:59,560
highly recommend you

00:36:54,880 --> 00:37:01,520
come here to our community page

00:36:59,560 --> 00:37:02,240
tpm2-software.github.io where you will

00:37:01,520 --> 00:37:04,720
find

00:37:02,240 --> 00:37:06,640
a lot of talks that were given i think

00:37:04,720 --> 00:37:08,640
at lseu

00:37:06,640 --> 00:37:11,040
three years ago peter already gave a

00:37:08,640 --> 00:37:13,680
talk with some initial introduction

00:37:11,040 --> 00:37:14,880
you find a lot of tutorials you find the

00:37:13,680 --> 00:37:17,440
guitar chat that's

00:37:14,880 --> 00:37:19,119
becoming more and more active where

00:37:17,440 --> 00:37:20,960
people help each other out

00:37:19,119 --> 00:37:23,200
stuff like that and hopefully also the

00:37:20,960 --> 00:37:26,320
gui editor is going to be there

00:37:23,200 --> 00:37:29,520
in the near future all right

00:37:26,320 --> 00:37:31,440
so thank you very much for your interest

00:37:29,520 --> 00:37:34,240
and staying to the end

00:37:31,440 --> 00:37:38,400
and i hope the examples are interesting

00:37:34,240 --> 00:37:51,280
and i highly recommend you test them out

00:37:38,400 --> 00:37:51,280

YouTube URL: https://www.youtube.com/watch?v=JckONn4h6pQ


