Title: Network File System Security Overview: Securing SMB3 - Steven French, Microsoft
Publication date: 2020-11-12
Playlist: Linux Security Summit Europe 2020
Description: 
	Network File System Security Overview: Securing SMB3 - Steven French, Microsoft
Captions: 
	00:00:00,799 --> 00:00:04,880
hi this is steve french i'll be giving a

00:00:03,360 --> 00:00:05,839
talk today on network file system

00:00:04,880 --> 00:00:07,600
security

00:00:05,839 --> 00:00:09,519
i'll be giving an overview of securing

00:00:07,600 --> 00:00:11,440
smb3

00:00:09,519 --> 00:00:14,320
the most popular protocol for accessing

00:00:11,440 --> 00:00:14,320
files on the internet

00:00:15,040 --> 00:00:18,400
so to give a little introduction about

00:00:16,320 --> 00:00:21,199
who i am i'm the author and maintainer

00:00:18,400 --> 00:00:23,760
of the linux fifths client

00:00:21,199 --> 00:00:25,599
i've been working on the samba team for

00:00:23,760 --> 00:00:27,519
many years i'm the co-author of the

00:00:25,599 --> 00:00:29,199
snesf technical reference and i'm a

00:00:27,519 --> 00:00:31,840
principal software engineer in

00:00:29,199 --> 00:00:32,960
azure storage at microsoft focusing on

00:00:31,840 --> 00:00:36,399
linux

00:00:32,960 --> 00:00:39,600
and accessing network storage safely

00:00:36,399 --> 00:00:41,280
and efficiently i'll be giving you an

00:00:39,600 --> 00:00:43,120
overview of smp3 the protocol and

00:00:41,280 --> 00:00:44,640
network file systems in general

00:00:43,120 --> 00:00:46,480
then talk about some of the security

00:00:44,640 --> 00:00:48,559
challenges and the different features

00:00:46,480 --> 00:00:50,160
authentication identity

00:00:48,559 --> 00:00:52,320
encryption access control and data

00:00:50,160 --> 00:00:54,079
integrity and then talk about some of

00:00:52,320 --> 00:00:54,640
the efforts and where we need to go from

00:00:54,079 --> 00:00:56,559
here

00:00:54,640 --> 00:00:58,480
as we improve network file system

00:00:56,559 --> 00:00:59,840
security and the kinds of things that

00:00:58,480 --> 00:01:01,600
would help

00:00:59,840 --> 00:01:03,280
the kinds of things we need help with

00:01:01,600 --> 00:01:05,840
from many of you

00:01:03,280 --> 00:01:07,840
in improving security in this important

00:01:05,840 --> 00:01:09,360
workload

00:01:07,840 --> 00:01:10,960
so first of all a lot of people ask why

00:01:09,360 --> 00:01:14,080
network file systems matter

00:01:10,960 --> 00:01:18,400
it's been a lot of focus for example on

00:01:14,080 --> 00:01:20,159
nvme fabrics rdma

00:01:18,400 --> 00:01:22,080
and people question why network file

00:01:20,159 --> 00:01:24,080
systems well the answers are fairly

00:01:22,080 --> 00:01:25,119
obvious network file systems are a

00:01:24,080 --> 00:01:27,280
superset

00:01:25,119 --> 00:01:28,400
of what block devices can do they're a

00:01:27,280 --> 00:01:31,439
superset of what

00:01:28,400 --> 00:01:33,360
objects can do and all applications were

00:01:31,439 --> 00:01:35,360
used to save files the presentation i'm

00:01:33,360 --> 00:01:38,400
giving today

00:01:35,360 --> 00:01:40,000
is saved as a file i typically back

00:01:38,400 --> 00:01:42,960
these up into azure into the cloud

00:01:40,000 --> 00:01:44,240
sometimes to a local server now

00:01:42,960 --> 00:01:45,439
historically one of the problems had

00:01:44,240 --> 00:01:47,439
been performance

00:01:45,439 --> 00:01:50,079
but with a well-configured nas

00:01:47,439 --> 00:01:52,000
especially with support for rdma and

00:01:50,079 --> 00:01:53,119
faster transports and faster encryption

00:01:52,000 --> 00:01:54,799
you can now get

00:01:53,119 --> 00:01:56,640
80 to 90 percent of the performance you

00:01:54,799 --> 00:01:59,520
might get with a block device

00:01:56,640 --> 00:02:00,479
with network file systems but what you

00:01:59,520 --> 00:02:03,840
get

00:02:00,479 --> 00:02:05,759
is a lot better security admin you get

00:02:03,840 --> 00:02:06,159
the ability to identify the owner of a

00:02:05,759 --> 00:02:08,959
file

00:02:06,159 --> 00:02:10,879
more easily more metadata you get it

00:02:08,959 --> 00:02:12,160
it's easier to understand security in a

00:02:10,879 --> 00:02:15,280
file protocol

00:02:12,160 --> 00:02:18,640
it's easier to understand backup

00:02:15,280 --> 00:02:19,920
encryption archive compression quotas

00:02:18,640 --> 00:02:21,599
quality of service all these are much

00:02:19,920 --> 00:02:23,360
easier when you know the owner of a file

00:02:21,599 --> 00:02:24,239
when you know the access patterns of a

00:02:23,360 --> 00:02:25,680
file

00:02:24,239 --> 00:02:28,400
when you access a block device there's

00:02:25,680 --> 00:02:32,239
very little the block device knows about

00:02:28,400 --> 00:02:35,200
who's accessing that and why

00:02:32,239 --> 00:02:37,120
in a network file it's much more complex

00:02:35,200 --> 00:02:38,160
but you have incredible variety of

00:02:37,120 --> 00:02:39,519
features

00:02:38,160 --> 00:02:41,440
one of the challenges with network file

00:02:39,519 --> 00:02:43,920
systems is keeping the performance good

00:02:41,440 --> 00:02:45,760
keeping the security good and doing it

00:02:43,920 --> 00:02:47,680
in a way

00:02:45,760 --> 00:02:49,599
that allows us to take advantage of

00:02:47,680 --> 00:02:51,440
these useful features

00:02:49,599 --> 00:02:53,280
network file system knows who's making

00:02:51,440 --> 00:02:54,480
the operation and knows the applications

00:02:53,280 --> 00:02:57,519
access patterns

00:02:54,480 --> 00:02:59,599
and it knows a lot more about the

00:02:57,519 --> 00:03:01,200
type of access the application is

00:02:59,599 --> 00:03:04,400
requesting

00:03:01,200 --> 00:03:07,840
so it's a very complex problem but is a

00:03:04,400 --> 00:03:10,800
much bigger superset than block or

00:03:07,840 --> 00:03:12,480
blobs and objects and what it can do so

00:03:10,800 --> 00:03:14,400
it's important to understand why network

00:03:12,480 --> 00:03:16,959
file systems matter we're never getting

00:03:14,400 --> 00:03:19,200
away from this idea of

00:03:16,959 --> 00:03:20,720
storing files on disks whether it's

00:03:19,200 --> 00:03:23,680
local or remote

00:03:20,720 --> 00:03:24,480
storing files on specialized block

00:03:23,680 --> 00:03:26,319
devices

00:03:24,480 --> 00:03:27,920
is going through a file system it's the

00:03:26,319 --> 00:03:29,519
same thing through a network we want to

00:03:27,920 --> 00:03:31,599
be storing files

00:03:29,519 --> 00:03:32,879
over a network file system onto network

00:03:31,599 --> 00:03:34,319
storage where possible

00:03:32,879 --> 00:03:36,159
because it lets us take advantage of

00:03:34,319 --> 00:03:37,760
these features and lets us take

00:03:36,159 --> 00:03:40,720
advantage of this

00:03:37,760 --> 00:03:42,319
enhanced metadata that helps us secure

00:03:40,720 --> 00:03:43,920
workloads better and make them higher

00:03:42,319 --> 00:03:46,239
performing

00:03:43,920 --> 00:03:47,519
but they have huge disadvantages network

00:03:46,239 --> 00:03:50,480
file systems are

00:03:47,519 --> 00:03:51,760
much more complex than block devices i

00:03:50,480 --> 00:03:55,439
used to give a presentation

00:03:51,760 --> 00:03:57,680
at the annual linux conference

00:03:55,439 --> 00:03:59,519
in ottawa on how to write a file system

00:03:57,680 --> 00:04:03,200
in 45 minutes

00:03:59,519 --> 00:04:05,200
well you can do it

00:04:03,200 --> 00:04:07,120
but file systems are incredibly hard to

00:04:05,200 --> 00:04:08,159
optimize and they can be slower than

00:04:07,120 --> 00:04:09,840
block devices

00:04:08,159 --> 00:04:11,200
and we have a lot more security features

00:04:09,840 --> 00:04:14,000
and challenges

00:04:11,200 --> 00:04:16,560
so this isn't easy the nfs client the

00:04:14,000 --> 00:04:18,639
smb the nfs and smb clients in linux are

00:04:16,560 --> 00:04:20,799
about 50 000 lines of code

00:04:18,639 --> 00:04:22,639
and they're they're quite a challenge

00:04:20,799 --> 00:04:25,919
but they're

00:04:22,639 --> 00:04:27,759
incredibly well optimized for certain

00:04:25,919 --> 00:04:28,880
workloads and we can continue to improve

00:04:27,759 --> 00:04:30,000
that

00:04:28,880 --> 00:04:32,000
one of the things we're going to try to

00:04:30,000 --> 00:04:33,600
do here is talk about how to improve the

00:04:32,000 --> 00:04:36,800
security features though

00:04:33,600 --> 00:04:38,720
and where we need to go now why do we

00:04:36,800 --> 00:04:43,120
talk about nfs and smb

00:04:38,720 --> 00:04:46,160
well over this 36-year period

00:04:43,120 --> 00:04:49,600
they're the two survivors so

00:04:46,160 --> 00:04:51,840
in 1984 barry feigenbaum ibm

00:04:49,600 --> 00:04:52,960
recent phd graduate invented the smb

00:04:51,840 --> 00:04:55,840
protocol

00:04:52,960 --> 00:04:57,840
and sun back in same year invented the

00:04:55,840 --> 00:05:00,400
nfs protocol

00:04:57,840 --> 00:05:01,600
many other protocols have come and gone

00:05:00,400 --> 00:05:04,800
these are the two that

00:05:01,600 --> 00:05:06,400
seem to live on they are by far the most

00:05:04,800 --> 00:05:08,560
widely deployed and it's

00:05:06,400 --> 00:05:10,400
hopefully just coincidental that that

00:05:08,560 --> 00:05:12,479
coincides with george orwell's famous

00:05:10,400 --> 00:05:15,360
1984.

00:05:12,479 --> 00:05:16,880
now the current dialects of these nfs 42

00:05:15,360 --> 00:05:20,000
and smb 311

00:05:16,880 --> 00:05:22,479
are almost unrecognizable compared with

00:05:20,000 --> 00:05:25,840
the original dialects in 1984

00:05:22,479 --> 00:05:27,199
and they've evolved quite a bit so

00:05:25,840 --> 00:05:29,600
looking at these two network file

00:05:27,199 --> 00:05:31,440
systems it's interesting

00:05:29,600 --> 00:05:32,639
there's a reason they survived they've

00:05:31,440 --> 00:05:35,199
gotten a lot of attention

00:05:32,639 --> 00:05:35,919
they've been deployed incredibly widely

00:05:35,199 --> 00:05:39,360
so

00:05:35,919 --> 00:05:41,759
major devices have them and

00:05:39,360 --> 00:05:43,039
they're well understood but smb has some

00:05:41,759 --> 00:05:45,680
unique advantages

00:05:43,039 --> 00:05:46,880
one of them for example is it's insanely

00:05:45,680 --> 00:05:50,080
well documented

00:05:46,880 --> 00:05:50,639
for various reasons and it's incredibly

00:05:50,080 --> 00:05:54,160
helpful

00:05:50,639 --> 00:05:56,479
to have these thousands of pages of very

00:05:54,160 --> 00:05:57,919
detailed documentation and then many

00:05:56,479 --> 00:05:58,560
hundreds of thousands of lines of test

00:05:57,919 --> 00:06:01,280
cases

00:05:58,560 --> 00:06:02,960
but in general how do they differ one

00:06:01,280 --> 00:06:04,800
way to think about it is the smb

00:06:02,960 --> 00:06:07,280
protocol

00:06:04,800 --> 00:06:08,960
is much broader in scope you can see

00:06:07,280 --> 00:06:10,720
some of the examples here branch cache

00:06:08,960 --> 00:06:13,039
witness protocol

00:06:10,720 --> 00:06:13,840
file replication the global namespace

00:06:13,039 --> 00:06:15,520
dfs

00:06:13,840 --> 00:06:17,440
claims based aquas this is a much

00:06:15,520 --> 00:06:19,199
broader protocol than nfs

00:06:17,440 --> 00:06:22,240
but there are some exceptions nfs has

00:06:19,199 --> 00:06:25,440
support for pnfs where the metadata

00:06:22,240 --> 00:06:28,479
and the file data can be separate pnfs

00:06:25,440 --> 00:06:31,280
allows you to query the layout of a file

00:06:28,479 --> 00:06:32,840
and then access the file's contents its

00:06:31,280 --> 00:06:35,759
data from different

00:06:32,840 --> 00:06:37,759
servers that's something that

00:06:35,759 --> 00:06:39,759
that smb doesn't have the back end

00:06:37,759 --> 00:06:43,120
typically provides that

00:06:39,759 --> 00:06:45,360
in addition nfs 42 added support for

00:06:43,120 --> 00:06:47,199
labeled nfs to better support se linux

00:06:45,360 --> 00:06:48,639
to allow the client to enforce se linux

00:06:47,199 --> 00:06:51,120
better

00:06:48,639 --> 00:06:52,479
now there's also one other major

00:06:51,120 --> 00:06:53,680
disadvantage advantage i don't know how

00:06:52,479 --> 00:06:55,199
you want to phrase it probably

00:06:53,680 --> 00:06:57,199
disadvantaged nfs

00:06:55,199 --> 00:06:59,039
nfs is layered on top of another

00:06:57,199 --> 00:07:02,479
protocol sunrpc

00:06:59,039 --> 00:07:04,960
where smb talks directly to tcp

00:07:02,479 --> 00:07:07,759
or directly to rdma or in the future

00:07:04,960 --> 00:07:07,759
directly to quick

00:07:08,400 --> 00:07:12,479
this means nfs is a little bit harder to

00:07:10,560 --> 00:07:15,120
optimize for network operations although

00:07:12,479 --> 00:07:17,599
there is an nfs over rdma

00:07:15,120 --> 00:07:19,120
but both these protocols have borrowed

00:07:17,599 --> 00:07:21,199
features from each other

00:07:19,120 --> 00:07:23,520
for many years for example nfs apples

00:07:21,199 --> 00:07:26,000
are based on s b apples

00:07:23,520 --> 00:07:28,160
and you can see that they've learned

00:07:26,000 --> 00:07:29,840
from each other

00:07:28,160 --> 00:07:32,319
and we need to dive in on some of the

00:07:29,840 --> 00:07:33,680
security features as well to go um

00:07:32,319 --> 00:07:35,440
explore this both of them support

00:07:33,680 --> 00:07:37,120
kerberos but in a different way for

00:07:35,440 --> 00:07:39,520
example

00:07:37,120 --> 00:07:41,360
so let's give a quick overview of smb

00:07:39,520 --> 00:07:43,039
smb 311's the current dialect it was

00:07:41,360 --> 00:07:45,599
introduced in late 2015.

00:07:43,039 --> 00:07:47,199
it's by far the most broadly deployed

00:07:45,599 --> 00:07:48,800
network cluster file pro it's a default

00:07:47,199 --> 00:07:49,520
on windows macs and various embedded

00:07:48,800 --> 00:07:51,280
devices

00:07:49,520 --> 00:07:52,639
it's built into the media player and

00:07:51,280 --> 00:07:54,479
various operating systems

00:07:52,639 --> 00:07:56,800
including linux it's got clients and

00:07:54,479 --> 00:07:59,280
servers on every major operating system

00:07:56,800 --> 00:08:01,360
samba is common on linux for example now

00:07:59,280 --> 00:08:03,520
there's a kernel server on linux

00:08:01,360 --> 00:08:05,199
it's part of a family of protocols that

00:08:03,520 --> 00:08:05,680
offers the broadest set of functions of

00:08:05,199 --> 00:08:08,240
any

00:08:05,680 --> 00:08:09,120
network or cluster file system protocol

00:08:08,240 --> 00:08:10,800
and

00:08:09,120 --> 00:08:13,759
you can go into the documents like

00:08:10,800 --> 00:08:17,280
mssmb2 and msfsa and see some of the

00:08:13,759 --> 00:08:19,039
examples of this and vendors have done

00:08:17,280 --> 00:08:21,120
vendor-specific extensions for example

00:08:19,039 --> 00:08:23,599
apple to

00:08:21,120 --> 00:08:24,479
offer specific you know client-specific

00:08:23,599 --> 00:08:27,039
features

00:08:24,479 --> 00:08:27,840
server-specific features it's also the

00:08:27,039 --> 00:08:29,840
best document

00:08:27,840 --> 00:08:31,199
just the core document alone for the

00:08:29,840 --> 00:08:34,560
file protocol smb2

00:08:31,199 --> 00:08:35,599
is over 470 pages long and the test

00:08:34,560 --> 00:08:37,360
cases samba's

00:08:35,599 --> 00:08:40,880
test suites smb torcher as they call it

00:08:37,360 --> 00:08:42,640
is over 200 000 lines of code

00:08:40,880 --> 00:08:44,880
the microsoft open source test case are

00:08:42,640 --> 00:08:45,839
also huge and there are multiple annual

00:08:44,880 --> 00:08:49,680
test events

00:08:45,839 --> 00:08:52,800
uh some of them coordinated by cena that

00:08:49,680 --> 00:08:55,040
go into a lot of depth testing the

00:08:52,800 --> 00:08:56,480
so this zoo of clients and servers

00:08:55,040 --> 00:08:59,440
against one another

00:08:56,480 --> 00:09:00,880
now on linux although samba smbd is the

00:08:59,440 --> 00:09:02,399
most popular there's also now an open

00:09:00,880 --> 00:09:03,839
source ksmbd

00:09:02,399 --> 00:09:05,760
uh there's also various user space

00:09:03,839 --> 00:09:08,160
libraries lib smb2 among others ronnie

00:09:05,760 --> 00:09:09,440
salberg's lab smb2 is a great example

00:09:08,160 --> 00:09:10,800
since it's embedded in various

00:09:09,440 --> 00:09:12,640
applications

00:09:10,800 --> 00:09:14,080
and there's servers from many many

00:09:12,640 --> 00:09:16,480
vendors netapp emc

00:09:14,080 --> 00:09:18,160
and many others and they range from very

00:09:16,480 --> 00:09:19,680
small devices to the largest server in

00:09:18,160 --> 00:09:21,760
the world right the largest file server

00:09:19,680 --> 00:09:23,760
in the world is azure files

00:09:21,760 --> 00:09:25,360
there's a great presentation on this at

00:09:23,760 --> 00:09:28,800
the storage developer conference

00:09:25,360 --> 00:09:30,560
a few weeks ago so

00:09:28,800 --> 00:09:32,399
what about the key security features of

00:09:30,560 --> 00:09:35,600
smb

00:09:32,399 --> 00:09:36,000
for authentication kerberos you can use

00:09:35,600 --> 00:09:37,680
other things

00:09:36,000 --> 00:09:39,680
but kerberos and kerberos is

00:09:37,680 --> 00:09:42,320
encapsulated in espnego so it's opaque

00:09:39,680 --> 00:09:44,000
to the smb protocol

00:09:42,320 --> 00:09:45,600
but it allows the ssmp protocol to

00:09:44,000 --> 00:09:48,640
integrate well into directory services

00:09:45,600 --> 00:09:50,880
like active directory and aad

00:09:48,640 --> 00:09:52,480
and after you authenticate there's a

00:09:50,880 --> 00:09:54,240
pre-auth integrity step

00:09:52,480 --> 00:09:56,720
that verifies that no man in the middle

00:09:54,240 --> 00:09:58,240
has changed the authentication

00:09:56,720 --> 00:10:00,560
and then from there on you have the

00:09:58,240 --> 00:10:01,279
option it's by default and things like

00:10:00,560 --> 00:10:04,640
azure

00:10:01,279 --> 00:10:06,000
to encrypt and all the traffic after

00:10:04,640 --> 00:10:09,120
that pre-auth integrity

00:10:06,000 --> 00:10:10,240
is encrypted and typically that's gcm

00:10:09,120 --> 00:10:12,160
128 although

00:10:10,240 --> 00:10:13,839
gcm 256 is now possible and there are

00:10:12,160 --> 00:10:15,600
other choices as well

00:10:13,839 --> 00:10:17,760
it can be configured on a per share

00:10:15,600 --> 00:10:20,320
basis so you can decide that some shares

00:10:17,760 --> 00:10:21,279
need tighter security or on a per server

00:10:20,320 --> 00:10:23,600
basis

00:10:21,279 --> 00:10:26,320
the client can also require that

00:10:23,600 --> 00:10:28,720
encryption be

00:10:26,320 --> 00:10:30,399
configured on a share so the client can

00:10:28,720 --> 00:10:31,440
force encryption or the server can force

00:10:30,399 --> 00:10:32,800
encryption

00:10:31,440 --> 00:10:34,720
and it can be required on either on a

00:10:32,800 --> 00:10:36,160
per share or per server basis it's very

00:10:34,720 --> 00:10:39,360
flexible

00:10:36,160 --> 00:10:42,160
much better than like a vpn for example

00:10:39,360 --> 00:10:43,519
now for access control there are various

00:10:42,160 --> 00:10:47,360
mechanisms as possible but

00:10:43,519 --> 00:10:49,200
smb3 apples rich hackles are most common

00:10:47,360 --> 00:10:51,120
and in windows example they have this

00:10:49,200 --> 00:10:52,720
optional dac claims based apples that

00:10:51,120 --> 00:10:55,200
can give you much more enhanced

00:10:52,720 --> 00:10:56,959
access control features in addition

00:10:55,200 --> 00:10:59,519
there's something called an sacl

00:10:56,959 --> 00:11:00,000
that allows you to configure auditing

00:10:59,519 --> 00:11:01,600
now

00:11:00,000 --> 00:11:03,200
there's a there's a fairly serious

00:11:01,600 --> 00:11:04,560
problem when you're dealing with a

00:11:03,200 --> 00:11:06,160
network of systems and that's

00:11:04,560 --> 00:11:06,959
understanding which users are which

00:11:06,160 --> 00:11:08,720
because

00:11:06,959 --> 00:11:10,320
clients coming in from client one and

00:11:08,720 --> 00:11:12,640
client two you know users coming in from

00:11:10,320 --> 00:11:15,120
client one and client two

00:11:12,640 --> 00:11:16,720
could have the same uid on their systems

00:11:15,120 --> 00:11:19,920
but

00:11:16,720 --> 00:11:23,279
be very different people sm french maybe

00:11:19,920 --> 00:11:25,839
uid 1000 on one client and uid 2000 on

00:11:23,279 --> 00:11:25,839
another client

00:11:26,000 --> 00:11:29,519
it's extremely important to be able to

00:11:27,600 --> 00:11:31,920
map identity who is

00:11:29,519 --> 00:11:33,519
a particular user and different

00:11:31,920 --> 00:11:34,880
protocols choose different mechanisms

00:11:33,519 --> 00:11:38,240
for this some use

00:11:34,880 --> 00:11:40,160
oids some use sids nfs

00:11:38,240 --> 00:11:41,360
has userette domain which is now

00:11:40,160 --> 00:11:43,040
possible to

00:11:41,360 --> 00:11:44,640
to use when you configure apples for

00:11:43,040 --> 00:11:46,560
example so you can

00:11:44,640 --> 00:11:47,839
configure a realm name to scope the

00:11:46,560 --> 00:11:51,680
user's name

00:11:47,839 --> 00:11:53,279
but in the smb world they use a globally

00:11:51,680 --> 00:11:55,920
unique identifier called a sid

00:11:53,279 --> 00:11:57,920
there's an example here and the sid can

00:11:55,920 --> 00:12:00,480
be mapped various ways to the

00:11:57,920 --> 00:12:02,320
more primitive uids that posix operating

00:12:00,480 --> 00:12:03,839
systems and linux use

00:12:02,320 --> 00:12:05,920
and that can be done via services like

00:12:03,839 --> 00:12:08,320
wind bind or sssd

00:12:05,920 --> 00:12:09,440
they can even be hashed but the most

00:12:08,320 --> 00:12:10,720
common way

00:12:09,440 --> 00:12:13,120
you know some of the large enterprises

00:12:10,720 --> 00:12:17,600
do this is rfc 2307

00:12:13,120 --> 00:12:21,120
which is an ldap feature that allows

00:12:17,600 --> 00:12:24,880
you to associate a linux uid

00:12:21,120 --> 00:12:28,240
or posix uid with a user in an

00:12:24,880 --> 00:12:30,000
on a directory service a globally unique

00:12:28,240 --> 00:12:32,240
user

00:12:30,000 --> 00:12:33,680
so what's the goal here the goal is to

00:12:32,240 --> 00:12:36,959
be able to access files

00:12:33,680 --> 00:12:38,639
my presentation for example whether i'm

00:12:36,959 --> 00:12:41,120
storing it in the cloud

00:12:38,639 --> 00:12:42,560
or whether i'm storing in a local small

00:12:41,120 --> 00:12:44,399
device

00:12:42,560 --> 00:12:46,399
we have to be able to do that securely

00:12:44,399 --> 00:12:47,360
and efficiently in a very very hostile

00:12:46,399 --> 00:12:50,000
world

00:12:47,360 --> 00:12:51,519
when i'm backing up this presentation or

00:12:50,000 --> 00:12:53,120
when i'm

00:12:51,519 --> 00:12:55,680
you know if i was working on a resume or

00:12:53,120 --> 00:12:58,240
if i'm working on

00:12:55,680 --> 00:12:59,920
patch sets it's very useful to be able

00:12:58,240 --> 00:13:03,200
to save those files

00:12:59,920 --> 00:13:04,240
in the most natural way possible but be

00:13:03,200 --> 00:13:05,920
able to save them

00:13:04,240 --> 00:13:07,360
into the cloud and to be able to save

00:13:05,920 --> 00:13:11,120
them to

00:13:07,360 --> 00:13:14,000
local servers securely

00:13:11,120 --> 00:13:15,760
efficiently quickly and we have a lot of

00:13:14,000 --> 00:13:17,760
common use cases

00:13:15,760 --> 00:13:20,240
we have things like containers spinning

00:13:17,760 --> 00:13:22,800
up needing to store

00:13:20,240 --> 00:13:24,320
the container images we have things like

00:13:22,800 --> 00:13:25,760
backing up

00:13:24,320 --> 00:13:26,959
systems you know the macs as you

00:13:25,760 --> 00:13:27,839
probably know have a time machine

00:13:26,959 --> 00:13:31,040
feature

00:13:27,839 --> 00:13:32,160
if you're in starbucks sitting with your

00:13:31,040 --> 00:13:35,360
mac

00:13:32,160 --> 00:13:38,480
the mac can be backing up over smb

00:13:35,360 --> 00:13:40,800
into azure into the cloud

00:13:38,480 --> 00:13:41,680
so we need to make sure that users don't

00:13:40,800 --> 00:13:46,000
move away

00:13:41,680 --> 00:13:48,079
from a secure file protocol to some

00:13:46,000 --> 00:13:49,279
less secure mechanism or less reliable

00:13:48,079 --> 00:13:50,959
mechanism

00:13:49,279 --> 00:13:52,880
less functional mechanism just because

00:13:50,959 --> 00:13:53,920
of some missing feature in smp3 so it's

00:13:52,880 --> 00:13:55,600
important i think

00:13:53,920 --> 00:13:57,360
that for these commodity protocols like

00:13:55,600 --> 00:13:59,920
smb and nfs

00:13:57,360 --> 00:14:02,079
that we have enough key features so

00:13:59,920 --> 00:14:04,160
users don't make bad decisions

00:14:02,079 --> 00:14:06,000
and move to either less secure or less

00:14:04,160 --> 00:14:09,519
functional

00:14:06,000 --> 00:14:11,600
protocols in order to save their

00:14:09,519 --> 00:14:14,480
important data

00:14:11,600 --> 00:14:16,000
it's not just about saving presentations

00:14:14,480 --> 00:14:20,160
or video files

00:14:16,000 --> 00:14:23,360
it's about being able to do

00:14:20,160 --> 00:14:26,720
workloads in this new world where

00:14:23,360 --> 00:14:27,600
data is spread out broadly across the

00:14:26,720 --> 00:14:30,079
enterprise

00:14:27,600 --> 00:14:32,079
and sometimes into the cloud and do that

00:14:30,079 --> 00:14:34,160
efficiently and securely

00:14:32,079 --> 00:14:37,040
in a very very hostile world let's dive

00:14:34,160 --> 00:14:37,040
into some of the details

00:14:37,199 --> 00:14:40,959
so you know authentication is very

00:14:39,040 --> 00:14:43,760
different from authorization

00:14:40,959 --> 00:14:45,519
who are you can you do that so there are

00:14:43,760 --> 00:14:47,360
various ways to authenticate in smb you

00:14:45,519 --> 00:14:48,480
typically authenticate with kerberos but

00:14:47,360 --> 00:14:50,399
you can with ntlm

00:14:48,480 --> 00:14:51,600
v2 as well but that's been around for

00:14:50,399 --> 00:14:53,279
more than 20 years

00:14:51,600 --> 00:14:55,760
what we need to think about is other

00:14:53,279 --> 00:14:58,079
mechanisms maybe we need to reserve

00:14:55,760 --> 00:14:59,199
through the ietf additional sp nego oids

00:14:58,079 --> 00:15:02,000
to identify

00:14:59,199 --> 00:15:03,760
other mechanisms we today have the

00:15:02,000 --> 00:15:06,880
option of pkudu

00:15:03,760 --> 00:15:07,920
max have a have a peer-to-peer kerberos

00:15:06,880 --> 00:15:09,199
variant

00:15:07,920 --> 00:15:11,600
but we may have to go to things like

00:15:09,199 --> 00:15:14,079
oauth in the future and be able to

00:15:11,600 --> 00:15:16,000
opaquely just plug in additional

00:15:14,079 --> 00:15:17,440
security mechanisms for file protocols

00:15:16,000 --> 00:15:19,120
to use

00:15:17,440 --> 00:15:20,639
so in kerberos authentication it's a

00:15:19,120 --> 00:15:22,800
fairly simple flow

00:15:20,639 --> 00:15:24,240
the client gets a ticket granting ticket

00:15:22,800 --> 00:15:27,519
from the kdc

00:15:24,240 --> 00:15:29,120
usually active directory or samba active

00:15:27,519 --> 00:15:32,720
directory or some equivalent

00:15:29,120 --> 00:15:34,160
and then this ticket granting ticket

00:15:32,720 --> 00:15:35,759
allows us to get a service ticket for

00:15:34,160 --> 00:15:36,959
the server we're trying to contact

00:15:35,759 --> 00:15:38,720
and then the client sends a service

00:15:36,959 --> 00:15:39,120
ticket to the server they can validate

00:15:38,720 --> 00:15:43,120
that

00:15:39,120 --> 00:15:46,320
that both ends can validate that

00:15:43,120 --> 00:15:48,639
the users who they expect this is

00:15:46,320 --> 00:15:52,399
extremely common mechanism

00:15:48,639 --> 00:15:53,839
well tested and

00:15:52,399 --> 00:15:55,440
it's good for a lot of environments but

00:15:53,839 --> 00:15:56,959
what we need to know is

00:15:55,440 --> 00:15:59,040
as we go forward and some of you may

00:15:56,959 --> 00:16:02,079
have expertise here

00:15:59,040 --> 00:16:03,279
do we need to offer additional options

00:16:02,079 --> 00:16:05,839
maybe oauth

00:16:03,279 --> 00:16:07,600
to allow other authentication models to

00:16:05,839 --> 00:16:09,600
allow saving files securely in the

00:16:07,600 --> 00:16:12,480
internet

00:16:09,600 --> 00:16:14,959
now these mechanisms are largely opaque

00:16:12,480 --> 00:16:16,240
to smp3 because smp3 leverages the sp

00:16:14,959 --> 00:16:19,519
nego standard

00:16:16,240 --> 00:16:21,440
to embed security tokens inside the file

00:16:19,519 --> 00:16:23,199
protocol during session establishment

00:16:21,440 --> 00:16:24,720
but that does require that we have a way

00:16:23,199 --> 00:16:26,560
in both linux

00:16:24,720 --> 00:16:28,800
as well as you know have the servers and

00:16:26,560 --> 00:16:31,600
clients agree on on how to identify

00:16:28,800 --> 00:16:33,199
you know the oid that identifies this uh

00:16:31,600 --> 00:16:34,959
whatever security protocols we may use

00:16:33,199 --> 00:16:36,000
in the future so you take a look at rfc

00:16:34,959 --> 00:16:39,199
00:16:36,000 --> 00:16:40,560
2478 for example now

00:16:39,199 --> 00:16:42,000
one of the problems we have in linux

00:16:40,560 --> 00:16:43,759
which is fairly obvious is that there's

00:16:42,000 --> 00:16:45,519
no easy way to add libraries that would

00:16:43,759 --> 00:16:47,120
make authentication opaque there's no

00:16:45,519 --> 00:16:49,279
etsy sp neggo directory where you can

00:16:47,120 --> 00:16:52,000
put a config file in

00:16:49,279 --> 00:16:53,680
to add a new mechanism and what that

00:16:52,000 --> 00:16:55,440
means is that we embed too much

00:16:53,680 --> 00:16:58,000
knowledge of the security protocols

00:16:55,440 --> 00:16:59,360
into the client and server libraries for

00:16:58,000 --> 00:17:00,959
the file protocol

00:16:59,360 --> 00:17:02,639
now what if we have a security disaster

00:17:00,959 --> 00:17:04,160
let's say at next year's security summit

00:17:02,639 --> 00:17:06,000
they find some security problem that

00:17:04,160 --> 00:17:06,720
causes us to have to evolve the security

00:17:06,000 --> 00:17:08,799
protocols

00:17:06,720 --> 00:17:10,000
the authentication protocols how do we

00:17:08,799 --> 00:17:13,120
plug those in well

00:17:10,000 --> 00:17:15,039
we need some way in linux of exposing

00:17:13,120 --> 00:17:17,919
these libraries in a way that

00:17:15,039 --> 00:17:19,600
things like samba and kernel clients can

00:17:17,919 --> 00:17:23,120
access

00:17:19,600 --> 00:17:26,480
those libraries without having to embed

00:17:23,120 --> 00:17:29,360
as you see with sambadire samba has

00:17:26,480 --> 00:17:30,160
heimdall kerberos client and server it

00:17:29,360 --> 00:17:32,880
has

00:17:30,160 --> 00:17:34,559
openld app embedded within it it can

00:17:32,880 --> 00:17:36,559
call out to other libraries as well

00:17:34,559 --> 00:17:38,480
but it's somewhat limited in that and we

00:17:36,559 --> 00:17:39,280
need to make it easier for applications

00:17:38,480 --> 00:17:42,240
to

00:17:39,280 --> 00:17:44,160
call out to new security libraries so

00:17:42,240 --> 00:17:47,360
how do you protect them from tampering

00:17:44,160 --> 00:17:50,080
smb 311 has a really nice mechanism for

00:17:47,360 --> 00:17:51,120
validating that no man in the middle has

00:17:50,080 --> 00:17:53,200
modified the

00:17:51,120 --> 00:17:54,799
authentication flow and then when that

00:17:53,200 --> 00:17:58,559
tree connect comes the

00:17:54,799 --> 00:18:00,640
amount the initial session

00:17:58,559 --> 00:18:02,000
requests and the negotiate protocol are

00:18:00,640 --> 00:18:02,720
validated to make sure they haven't been

00:18:02,000 --> 00:18:04,080
modified

00:18:02,720 --> 00:18:06,720
and from the tree connect on it's

00:18:04,080 --> 00:18:10,400
typically encrypted and at least signed

00:18:06,720 --> 00:18:10,400
so you know that the

00:18:11,280 --> 00:18:14,480
security the authentication hasn't been

00:18:13,120 --> 00:18:17,760
tampered with it's a very

00:18:14,480 --> 00:18:18,640
powerful feature and very useful so they

00:18:17,760 --> 00:18:20,720
exchange

00:18:18,640 --> 00:18:22,480
mandatory negotiate contacts early on

00:18:20,720 --> 00:18:24,880
that allow additional security features

00:18:22,480 --> 00:18:28,240
to negotiate

00:18:24,880 --> 00:18:29,760
and this allows support for many

00:18:28,240 --> 00:18:31,679
different types of

00:18:29,760 --> 00:18:33,440
encryption hash encryption algorithms

00:18:31,679 --> 00:18:37,039
and it allows

00:18:33,440 --> 00:18:40,559
some really nice security features now

00:18:37,039 --> 00:18:42,000
in older protocols for example smb1 sifs

00:18:40,559 --> 00:18:44,320
there is no man in the middle attack

00:18:42,000 --> 00:18:46,160
mitigations and ned pyle and others at

00:18:44,320 --> 00:18:48,480
microsoft have given many talks on why

00:18:46,160 --> 00:18:49,840
never never never use sifs

00:18:48,480 --> 00:18:51,039
we don't want to have another wannacry

00:18:49,840 --> 00:18:53,360
we don't want to have another major

00:18:51,039 --> 00:18:56,240
security incident

00:18:53,360 --> 00:18:57,280
don't use smb1 don't use sifs what

00:18:56,240 --> 00:18:59,760
you're using

00:18:57,280 --> 00:19:01,440
and what sips.ko negotes by default is

00:18:59,760 --> 00:19:05,600
is smb311

00:19:01,440 --> 00:19:06,799
and this this is much more secure

00:19:05,600 --> 00:19:08,960
so what about identity what about

00:19:06,799 --> 00:19:10,000
figuring out who you are in the dark

00:19:08,960 --> 00:19:11,919
ages we use something called

00:19:10,000 --> 00:19:15,200
nist the network information service you

00:19:11,919 --> 00:19:17,600
know in the in the uh 90s for example

00:19:15,200 --> 00:19:19,120
and this is was replaced in 1998 by a

00:19:17,600 --> 00:19:20,320
much more secure alternative that used

00:19:19,120 --> 00:19:23,679
ldap to store the

00:19:20,320 --> 00:19:25,360
the posix uid rfc 2307 so luke howard

00:19:23,679 --> 00:19:27,360
did a nice job on that in

00:19:25,360 --> 00:19:29,039
defining this and one of the you know

00:19:27,360 --> 00:19:30,880
obvious questions will be

00:19:29,039 --> 00:19:33,520
are there any alternatives we should be

00:19:30,880 --> 00:19:35,520
considering right now rfc 2307 is really

00:19:33,520 --> 00:19:39,039
the only alternative for

00:19:35,520 --> 00:19:40,960
storing identity in a

00:19:39,039 --> 00:19:42,960
directory service that is broadly

00:19:40,960 --> 00:19:44,400
adopted you know it's not just supported

00:19:42,960 --> 00:19:45,919
in active directory it's supported in

00:19:44,400 --> 00:19:49,280
most ldap servers

00:19:45,919 --> 00:19:52,000
now there were two variants of rfc

00:19:49,280 --> 00:19:53,280
2307 they added the original rfc 2307

00:19:52,000 --> 00:19:56,160
didn't have a way of

00:19:53,280 --> 00:19:56,480
of figuring out what groups a user was

00:19:56,160 --> 00:19:58,160
in

00:19:56,480 --> 00:20:00,240
it could tell you what users were in a

00:19:58,160 --> 00:20:01,600
group but not the reverse

00:20:00,240 --> 00:20:04,320
and so it was extended with something

00:20:01,600 --> 00:20:09,120
called rfc 2307 bis

00:20:04,320 --> 00:20:09,120
and there's also a proposal from

00:20:10,080 --> 00:20:13,360
matt bannister in 2015 for

00:20:12,400 --> 00:20:16,080
directory-based

00:20:13,360 --> 00:20:18,080
information service it appears to be

00:20:16,080 --> 00:20:21,200
abandoned

00:20:18,080 --> 00:20:23,200
now in many cases users just give up and

00:20:21,200 --> 00:20:24,960
they just hash the uids win bind and

00:20:23,200 --> 00:20:25,840
sssd have options to do that as well

00:20:24,960 --> 00:20:27,360
where you

00:20:25,840 --> 00:20:29,039
where if you have an unmapped user you

00:20:27,360 --> 00:20:31,200
can just hash

00:20:29,039 --> 00:20:32,559
the global identity to try to come up

00:20:31,200 --> 00:20:35,440
with a local uid

00:20:32,559 --> 00:20:36,799
in a consistent fashion but it's very

00:20:35,440 --> 00:20:38,320
important for us to understand is there

00:20:36,799 --> 00:20:41,440
some way going forward

00:20:38,320 --> 00:20:42,320
other than rfc 2307 that we should be uh

00:20:41,440 --> 00:20:44,159
defining

00:20:42,320 --> 00:20:46,000
who a user is you know there's an

00:20:44,159 --> 00:20:48,320
important problem here and this is

00:20:46,000 --> 00:20:49,120
pretty serious although when bind and

00:20:48,320 --> 00:20:50,960
sssd

00:20:49,120 --> 00:20:52,400
security services have a way of with

00:20:50,960 --> 00:20:56,240
private apis dbus

00:20:52,400 --> 00:20:59,120
and sssd case and a private rpc in

00:20:56,240 --> 00:21:02,320
the case of win bind of mapping names to

00:20:59,120 --> 00:21:04,960
uids and uids to sids and

00:21:02,320 --> 00:21:06,799
these are specific to that application

00:21:04,960 --> 00:21:10,000
there's no linux api

00:21:06,799 --> 00:21:12,400
that allows you to

00:21:10,000 --> 00:21:13,919
sort of do the mapping among the four

00:21:12,400 --> 00:21:15,280
ways you might represent a user and this

00:21:13,919 --> 00:21:18,400
is fairly important

00:21:15,280 --> 00:21:22,799
so if you have multiple protocols

00:21:18,400 --> 00:21:26,000
nfs and smb http and others

00:21:22,799 --> 00:21:27,200
hdfs perhaps accessing the same storage

00:21:26,000 --> 00:21:29,280
in some of those protocols they're going

00:21:27,200 --> 00:21:32,480
to represent the owner

00:21:29,280 --> 00:21:36,240
of that file as an oid in some

00:21:32,480 --> 00:21:38,880
like smb with a sid nfs could be a uid

00:21:36,240 --> 00:21:40,480
or a user at domain

00:21:38,880 --> 00:21:42,320
so this is extremely important that

00:21:40,480 --> 00:21:44,880
there's a mapping not just between

00:21:42,320 --> 00:21:46,640
name and uid which get pwp nam and get

00:21:44,880 --> 00:21:48,480
pw uid do today

00:21:46,640 --> 00:21:51,360
but you need a standard library

00:21:48,480 --> 00:21:53,760
interface to map between the four

00:21:51,360 --> 00:21:55,440
ways you have identities oidsid's uid

00:21:53,760 --> 00:21:58,720
and name

00:21:55,440 --> 00:21:59,919
and you know you're going to have to

00:21:58,720 --> 00:22:01,200
you're going to have to have this

00:21:59,919 --> 00:22:03,039
otherwise you're going to have people

00:22:01,200 --> 00:22:04,799
calling private apis all the time wind

00:22:03,039 --> 00:22:06,240
binds great it's a wonderful service but

00:22:04,799 --> 00:22:09,520
do you really want to be

00:22:06,240 --> 00:22:12,320
um do do we want a way to plug

00:22:09,520 --> 00:22:13,840
in other ways other than windbind of

00:22:12,320 --> 00:22:15,840
mapping identity

00:22:13,840 --> 00:22:17,440
samba includes windbind as i mentioned

00:22:15,840 --> 00:22:20,480
it's a great service

00:22:17,440 --> 00:22:24,159
but having an api in linux

00:22:20,480 --> 00:22:24,480
extending pam and nss to allow you to

00:22:24,159 --> 00:22:27,760
map

00:22:24,480 --> 00:22:30,960
the global identity for a user

00:22:27,760 --> 00:22:33,120
you know use a rat realm name

00:22:30,960 --> 00:22:34,400
to a globally unique identifier like

00:22:33,120 --> 00:22:38,559
acid

00:22:34,400 --> 00:22:38,559
and then map it perhaps in a

00:22:39,679 --> 00:22:45,039
somewhat imperfect way but map it to a

00:22:42,240 --> 00:22:47,039
local uid a local uid could be 32 bits

00:22:45,039 --> 00:22:48,640
right so it's not necessarily going to

00:22:47,039 --> 00:22:50,880
be globally unique

00:22:48,640 --> 00:22:53,360
and this mapping is done differently we

00:22:50,880 --> 00:22:55,440
may not use rfc 2307 for

00:22:53,360 --> 00:22:57,120
forever but this really shouldn't be the

00:22:55,440 --> 00:22:58,240
file protocol doing this this should be

00:22:57,120 --> 00:23:00,559
something that

00:22:58,240 --> 00:23:02,480
identity library security libraries do

00:23:00,559 --> 00:23:04,880
something that plugs into pam and nss

00:23:02,480 --> 00:23:05,760
but today nfs and smb have to have their

00:23:04,880 --> 00:23:10,640
id mapping

00:23:05,760 --> 00:23:12,880
call outs because there is no common api

00:23:10,640 --> 00:23:15,120
that lets you do this effectively at

00:23:12,880 --> 00:23:17,039
least in linux

00:23:15,120 --> 00:23:19,039
now what do what's the alternative well

00:23:17,039 --> 00:23:19,440
you end up mapping local users to guest

00:23:19,039 --> 00:23:22,400
or you

00:23:19,440 --> 00:23:24,240
have a default mapping of all local

00:23:22,400 --> 00:23:25,760
users to some default kerberos user and

00:23:24,240 --> 00:23:27,120
that's really not sufficient for most

00:23:25,760 --> 00:23:30,159
use cases

00:23:27,120 --> 00:23:32,880
what we want to get to is

00:23:30,159 --> 00:23:34,400
not having the smb client and the nfs

00:23:32,880 --> 00:23:36,559
client calling into

00:23:34,400 --> 00:23:38,240
their own id map callouts we would like

00:23:36,559 --> 00:23:41,679
them to be able to go into

00:23:38,240 --> 00:23:42,880
some generic pam and ss functions to map

00:23:41,679 --> 00:23:45,919
the four different ways you can

00:23:42,880 --> 00:23:50,320
represent a user his name

00:23:45,919 --> 00:23:53,760
uid globally unique sid or an oid

00:23:50,320 --> 00:23:56,400
back and forth so

00:23:53,760 --> 00:23:57,760
access control so an access control

00:23:56,400 --> 00:24:00,000
here's an example from windows what you

00:23:57,760 --> 00:24:02,000
might see in the windows securities

00:24:00,000 --> 00:24:04,080
when you do right mouse button on a file

00:24:02,000 --> 00:24:06,960
notice that you have

00:24:04,080 --> 00:24:08,320
users groups and permissions this is the

00:24:06,960 --> 00:24:09,840
simple version you can obviously bring

00:24:08,320 --> 00:24:11,760
up more advanced panel that shows the

00:24:09,840 --> 00:24:14,640
individual permissions

00:24:11,760 --> 00:24:15,200
now this is much richer than what you

00:24:14,640 --> 00:24:17,120
see

00:24:15,200 --> 00:24:18,320
in linux right mode bits are quite

00:24:17,120 --> 00:24:21,919
primitive

00:24:18,320 --> 00:24:23,919
and posix axles

00:24:21,919 --> 00:24:25,279
are also very primitive but it's not

00:24:23,919 --> 00:24:25,760
just linux that has gooeys for this

00:24:25,279 --> 00:24:27,760
here's

00:24:25,760 --> 00:24:28,880
here's a one of the sif's utils that

00:24:27,760 --> 00:24:30,960
allows you to modify

00:24:28,880 --> 00:24:32,240
rich apples as well over smb right you

00:24:30,960 --> 00:24:34,320
can see the sid and you can see the

00:24:32,240 --> 00:24:36,559
permissions here

00:24:34,320 --> 00:24:36,559
now

00:24:38,400 --> 00:24:42,320
there are lots of tools in linux linux

00:24:40,559 --> 00:24:44,960
they're command line tools smb cackles

00:24:42,320 --> 00:24:46,559
gets of tackle

00:24:44,960 --> 00:24:48,159
but i think it's important to contrast

00:24:46,559 --> 00:24:51,679
this with what users are used to on

00:24:48,159 --> 00:24:54,400
linux where you only have 12 flags

00:24:51,679 --> 00:24:55,200
now you have 777 permissions and then

00:24:54,400 --> 00:24:58,720
you have the

00:24:55,200 --> 00:25:00,880
the set uid site gid bits these are very

00:24:58,720 --> 00:25:03,200
primitive compared with axles

00:25:00,880 --> 00:25:05,279
and in linux if you want to have ackles

00:25:03,200 --> 00:25:06,720
the only broadly supported one is posix

00:25:05,279 --> 00:25:08,400
apples and they're more useful but they

00:25:06,720 --> 00:25:09,679
don't have deny aces and they have far

00:25:08,400 --> 00:25:12,000
fewer features

00:25:09,679 --> 00:25:14,400
even than you know the standard smb echo

00:25:12,000 --> 00:25:16,159
much less claims-based tackles

00:25:14,400 --> 00:25:19,039
now there's been a move to push rich

00:25:16,159 --> 00:25:20,400
apples into the kernel since 2007

00:25:19,039 --> 00:25:22,559
and they are implemented by various

00:25:20,400 --> 00:25:24,000
operating systems not just ntfs and smb

00:25:22,559 --> 00:25:26,400
and nfs

00:25:24,000 --> 00:25:28,080
and they're on various operating systems

00:25:26,400 --> 00:25:29,279
zfs for example has support for rich

00:25:28,080 --> 00:25:32,640
tackles

00:25:29,279 --> 00:25:34,240
and macs have support for rich hackles

00:25:32,640 --> 00:25:36,559
it's important to realize though that

00:25:34,240 --> 00:25:39,840
they're much more functional than the

00:25:36,559 --> 00:25:41,440
posix aquas you see by default in linux

00:25:39,840 --> 00:25:42,960
but in addition to that apache

00:25:41,440 --> 00:25:43,679
introduced a concept of claims-based

00:25:42,960 --> 00:25:46,720
tackles

00:25:43,679 --> 00:25:47,279
that allow you to do things like control

00:25:46,720 --> 00:25:49,919
permission

00:25:47,279 --> 00:25:50,640
based on other things the location of

00:25:49,919 --> 00:25:53,120
the user

00:25:50,640 --> 00:25:54,720
whether he's running on a managed client

00:25:53,120 --> 00:25:56,159
and this is supported by kerberos and

00:25:54,720 --> 00:25:59,840
much richer in function

00:25:56,159 --> 00:26:02,400
but it allows a much more

00:25:59,840 --> 00:26:03,760
detailed access control model and here's

00:26:02,400 --> 00:26:04,320
an example you can see from windows

00:26:03,760 --> 00:26:07,440
where they're

00:26:04,320 --> 00:26:08,880
basing it on one of the access control

00:26:07,440 --> 00:26:09,600
entries based on the location of the

00:26:08,880 --> 00:26:11,279
user

00:26:09,600 --> 00:26:13,600
and also notice in this example from

00:26:11,279 --> 00:26:16,720
windows you see

00:26:13,600 --> 00:26:18,480
you can do logical ands and ors

00:26:16,720 --> 00:26:20,080
you can imagine a case for example where

00:26:18,480 --> 00:26:21,679
somebody in group managers would have

00:26:20,080 --> 00:26:23,279
permission to something except if

00:26:21,679 --> 00:26:25,520
they're in group janitors

00:26:23,279 --> 00:26:27,360
right you could imagine different cases

00:26:25,520 --> 00:26:28,080
like this where ands and oars are used

00:26:27,360 --> 00:26:31,039
together

00:26:28,080 --> 00:26:32,640
to do richer access control decisions

00:26:31,039 --> 00:26:34,480
now we don't have this in linux

00:26:32,640 --> 00:26:36,080
but it's an example of something that

00:26:34,480 --> 00:26:38,799
that might help as we go forward

00:26:36,080 --> 00:26:40,960
it is supported over smb though and you

00:26:38,799 --> 00:26:42,240
know once again this is not necessarily

00:26:40,960 --> 00:26:43,840
meaning that we have to implement it in

00:26:42,240 --> 00:26:46,159
all the linux servers but it would be

00:26:43,840 --> 00:26:48,000
useful to be able to have a more visible

00:26:46,159 --> 00:26:50,400
way of exposing this

00:26:48,000 --> 00:26:52,320
because in many cases apps want to check

00:26:50,400 --> 00:26:53,840
their permissions on files you see this

00:26:52,320 --> 00:26:55,440
a lot in linux and macs where

00:26:53,840 --> 00:26:56,880
you know on open or just before open

00:26:55,440 --> 00:26:58,480
they're querying what permissions they

00:26:56,880 --> 00:27:00,559
have for the file and sometimes changing

00:26:58,480 --> 00:27:01,919
those permissions on files they own

00:27:00,559 --> 00:27:03,600
and of course servers always check their

00:27:01,919 --> 00:27:05,120
permissions on open of a file directory

00:27:03,600 --> 00:27:06,080
because they have to do that to

00:27:05,120 --> 00:27:08,240
understand if you're going to be

00:27:06,080 --> 00:27:10,480
allowing access to that for the reads

00:27:08,240 --> 00:27:12,080
and rights that come in

00:27:10,480 --> 00:27:13,760
and there can be real conflicts between

00:27:12,080 --> 00:27:15,440
the permissions that mode bits expose

00:27:13,760 --> 00:27:17,760
posix tackles and rich tackles

00:27:15,440 --> 00:27:19,039
and it's been a real interesting problem

00:27:17,760 --> 00:27:21,760
over the years

00:27:19,039 --> 00:27:23,279
many many years of development i've been

00:27:21,760 --> 00:27:26,559
working on i see this

00:27:23,279 --> 00:27:28,799
a lot on how to map permissions

00:27:26,559 --> 00:27:29,919
or emulate them between these three

00:27:28,799 --> 00:27:31,440
models

00:27:29,919 --> 00:27:33,679
and you know examples are like how would

00:27:31,440 --> 00:27:36,240
you map zero seven zero seven or how

00:27:33,679 --> 00:27:39,279
would you map

00:27:36,240 --> 00:27:40,480
cases where you are going to deny

00:27:39,279 --> 00:27:45,200
permission

00:27:40,480 --> 00:27:45,200
to a group that the user is a member of

00:27:46,480 --> 00:27:50,320
not an easy thing right that if a group

00:27:48,880 --> 00:27:52,159
is a member of

00:27:50,320 --> 00:27:54,720
of some that example i gave where

00:27:52,159 --> 00:27:56,960
somebody's a member of group janitors

00:27:54,720 --> 00:27:58,880
and janitors has zero permission well

00:27:56,960 --> 00:28:02,559
you've the denying of

00:27:58,880 --> 00:28:04,559
that user access would prevent him

00:28:02,559 --> 00:28:06,480
from accessing the file even though from

00:28:04,559 --> 00:28:08,000
the mode bits

00:28:06,480 --> 00:28:09,520
he could have zero seven zero seven

00:28:08,000 --> 00:28:11,039
that's very hard to represent in an

00:28:09,520 --> 00:28:14,880
accol

00:28:11,039 --> 00:28:16,080
so there are cases where mode bits are

00:28:14,880 --> 00:28:18,399
really tough to to

00:28:16,080 --> 00:28:19,520
map into ackles and of course there's

00:28:18,399 --> 00:28:21,440
millions of cases

00:28:19,520 --> 00:28:22,960
where apples can't be represented as

00:28:21,440 --> 00:28:24,799
mode bits

00:28:22,960 --> 00:28:26,320
and then there another related question

00:28:24,799 --> 00:28:28,399
with posix aqua since they don't have

00:28:26,320 --> 00:28:30,320
deny aces should they just be emulated

00:28:28,399 --> 00:28:33,440
when somebody queries a posix accolade

00:28:30,320 --> 00:28:36,080
in fs or queries the pos exactly on smb

00:28:33,440 --> 00:28:37,279
should you just show the best

00:28:36,080 --> 00:28:40,159
approximation

00:28:37,279 --> 00:28:42,080
not show the denials should we allow

00:28:40,159 --> 00:28:45,360
users to change them remotely

00:28:42,080 --> 00:28:46,720
you know set posix tackles

00:28:45,360 --> 00:28:48,960
another interesting question is what

00:28:46,720 --> 00:28:50,080
does chone changing the owner do to

00:28:48,960 --> 00:28:52,720
affect the apple

00:28:50,080 --> 00:28:54,159
in the smb case the uh there's a access

00:28:52,720 --> 00:28:56,240
control entry for

00:28:54,159 --> 00:28:58,000
the owner of sid but when you change the

00:28:56,240 --> 00:29:01,440
owner you now have an access control

00:28:58,000 --> 00:29:04,159
entry that's kind of uh old

00:29:01,440 --> 00:29:05,039
and doesn't represent the current owner

00:29:04,159 --> 00:29:06,960
so

00:29:05,039 --> 00:29:08,159
you know do we change when we do a tone

00:29:06,960 --> 00:29:11,120
do we change the

00:29:08,159 --> 00:29:12,799
the apple as well not just change the

00:29:11,120 --> 00:29:14,399
owner but also change access control

00:29:12,799 --> 00:29:15,919
entries

00:29:14,399 --> 00:29:17,360
and there's an interesting access

00:29:15,919 --> 00:29:17,840
control problem that's quite common in

00:29:17,360 --> 00:29:21,440
the uh

00:29:17,840 --> 00:29:22,080
in the linux world it's most common to

00:29:21,440 --> 00:29:24,960
enforce

00:29:22,080 --> 00:29:26,240
the permission on who can delete a file

00:29:24,960 --> 00:29:28,960
by looking at the

00:29:26,240 --> 00:29:30,480
directory entries the parent directories

00:29:28,960 --> 00:29:33,679
mode bits

00:29:30,480 --> 00:29:35,919
but you know in a rich aqua world you're

00:29:33,679 --> 00:29:37,520
most often looking at whether the object

00:29:35,919 --> 00:29:39,360
has a delete permission well there isn't

00:29:37,520 --> 00:29:42,480
an equivalent to that in

00:29:39,360 --> 00:29:44,799
in in mode bits right so the objects

00:29:42,480 --> 00:29:46,720
delete permission

00:29:44,799 --> 00:29:48,000
doesn't exist the permission checked is

00:29:46,720 --> 00:29:49,279
the parent directory

00:29:48,000 --> 00:29:50,720
but this can be a real problem if you

00:29:49,279 --> 00:29:52,559
have a temp directory and people are

00:29:50,720 --> 00:29:53,919
creating files you only want the owner

00:29:52,559 --> 00:29:55,120
of the file the guy who created the file

00:29:53,919 --> 00:29:57,039
to be able to delete it

00:29:55,120 --> 00:29:59,600
you don't want an attempt directory to

00:29:57,039 --> 00:30:00,799
allow george to delete to delete bill's

00:29:59,600 --> 00:30:03,120
files

00:30:00,799 --> 00:30:04,480
and that's easy in in a rich aqua world

00:30:03,120 --> 00:30:05,279
but it's hard when you're just using

00:30:04,480 --> 00:30:07,919
mode bits

00:30:05,279 --> 00:30:08,640
so this semantic conflict what what

00:30:07,919 --> 00:30:11,760
remove

00:30:08,640 --> 00:30:13,679
means in linux

00:30:11,760 --> 00:30:15,039
when you have acls and linux when you

00:30:13,679 --> 00:30:15,679
don't have acls is an interesting

00:30:15,039 --> 00:30:17,760
problem

00:30:15,679 --> 00:30:20,480
this comes up a lot with nfs and smb

00:30:17,760 --> 00:30:20,480
when you're trying to

00:30:20,960 --> 00:30:27,840
expose files to a linux client

00:30:24,480 --> 00:30:29,600
over a network file system protocol

00:30:27,840 --> 00:30:31,600
so what about sc linux so these

00:30:29,600 --> 00:30:33,919
implement mandatory access control

00:30:31,600 --> 00:30:35,520
support in linux and individual objects

00:30:33,919 --> 00:30:38,960
have security labels

00:30:35,520 --> 00:30:40,640
stored as x hatters and rfc 7504

00:30:38,960 --> 00:30:42,080
describes potential protocol

00:30:40,640 --> 00:30:43,600
requirements

00:30:42,080 --> 00:30:45,840
to support this over nfs so it's a

00:30:43,600 --> 00:30:48,159
useful read so looking at tom haynes's

00:30:45,840 --> 00:30:49,600
document there that gives the

00:30:48,159 --> 00:30:51,360
requirements for what

00:30:49,600 --> 00:30:52,799
is needed for se linux is quite quite

00:30:51,360 --> 00:30:55,279
interesting

00:30:52,799 --> 00:30:57,200
and nfs 42 does support optional

00:30:55,279 --> 00:30:58,880
extensions for security labels but this

00:30:57,200 --> 00:31:02,240
is client enforced in

00:30:58,880 --> 00:31:03,760
in um in nfs and one of the questions is

00:31:02,240 --> 00:31:05,679
should something similar be done in the

00:31:03,760 --> 00:31:07,279
smb3 protocol which already supports x

00:31:05,679 --> 00:31:09,840
adders and alternate data streams

00:31:07,279 --> 00:31:11,440
but basically decide something defines

00:31:09,840 --> 00:31:13,919
something like sec label like you see in

00:31:11,440 --> 00:31:13,919
nfs

00:31:14,159 --> 00:31:19,679
so what about encryption in smb there's

00:31:16,159 --> 00:31:22,880
four algorithms supported you can see

00:31:19,679 --> 00:31:26,399
aes 128 ccm gcm

00:31:22,880 --> 00:31:29,600
now aes256 gcm has been added typically

00:31:26,399 --> 00:31:32,720
aes 128 gcm is negotiated it's fast

00:31:29,600 --> 00:31:34,640
offload to the hardware in my testing

00:31:32,720 --> 00:31:35,840
large i o is about five times faster

00:31:34,640 --> 00:31:38,240
processing on the client

00:31:35,840 --> 00:31:40,159
the overall the gain is a little bit

00:31:38,240 --> 00:31:41,600
less but five times faster on the client

00:31:40,159 --> 00:31:44,240
the processing of those frames when you

00:31:41,600 --> 00:31:46,640
use aes 128 gcm over ccm

00:31:44,240 --> 00:31:47,840
at least in a typical vm and now we have

00:31:46,640 --> 00:31:50,000
support for the what are they called

00:31:47,840 --> 00:31:53,039
military-grade encryption the aes 2

00:31:50,000 --> 00:31:54,240
256 gcm that's much stronger it's

00:31:53,039 --> 00:31:56,640
you know these are these are quite

00:31:54,240 --> 00:31:59,919
interesting but they provide very good

00:31:56,640 --> 00:32:01,360
performance and very strong security and

00:31:59,919 --> 00:32:04,080
many servers like azure

00:32:01,360 --> 00:32:05,279
by default negotiate encryption so every

00:32:04,080 --> 00:32:08,000
frame is going to be encrypted from the

00:32:05,279 --> 00:32:08,000
tree connect on

00:32:08,480 --> 00:32:12,559
and you know why do we use gcm 128

00:32:11,279 --> 00:32:14,480
because it's got hardware support it's

00:32:12,559 --> 00:32:15,360
very fast so from the 5.3 kernel on you

00:32:14,480 --> 00:32:18,000
can see it in

00:32:15,360 --> 00:32:20,640
in the smb client on linux and samba

00:32:18,000 --> 00:32:23,679
added support a year or two ago for a

00:32:20,640 --> 00:32:23,679
little over a year ago for

00:32:24,080 --> 00:32:30,240
gcm 128 as well so here are some

00:32:28,559 --> 00:32:32,720
examples of recent work in progress on

00:32:30,240 --> 00:32:36,720
the stronger gcm 256 support

00:32:32,720 --> 00:32:41,600
that'll be enabled via a global

00:32:36,720 --> 00:32:43,919
mud module load parm on the linux client

00:32:41,600 --> 00:32:44,640
so what about rdma security you know smb

00:32:43,919 --> 00:32:47,440
direct is

00:32:44,640 --> 00:32:49,039
very very fast and quite common in the

00:32:47,440 --> 00:32:51,200
smb world

00:32:49,039 --> 00:32:52,880
rdma encryption though shipped in

00:32:51,200 --> 00:32:56,640
windows at least in the

00:32:52,880 --> 00:32:58,720
first half of 2012 and include support

00:32:56,640 --> 00:32:59,919
for 256-bit aes that we talked about

00:32:58,720 --> 00:33:02,799
earlier

00:32:59,919 --> 00:33:04,559
rda signing is also feature complete and

00:33:02,799 --> 00:33:05,279
we'll be supporting aesg mac will be

00:33:04,559 --> 00:33:06,640
faster

00:33:05,279 --> 00:33:08,320
and there's a nice presentation on this

00:33:06,640 --> 00:33:10,640
from the storage developer conference a

00:33:08,320 --> 00:33:11,519
few weeks ago by when and would be worth

00:33:10,640 --> 00:33:13,760
looking at if you're

00:33:11,519 --> 00:33:15,760
intrigued about smb direct security but

00:33:13,760 --> 00:33:17,360
the message on this is it's extremely

00:33:15,760 --> 00:33:19,279
fast and can leverage many of the same

00:33:17,360 --> 00:33:21,200
security features

00:33:19,279 --> 00:33:23,120
running smb over rdma and like i said

00:33:21,200 --> 00:33:27,120
it's quite common in the windows world

00:33:23,120 --> 00:33:27,519
but it also sme direct is becoming more

00:33:27,120 --> 00:33:29,840
problem

00:33:27,519 --> 00:33:31,039
common in linux as well so i'm looking

00:33:29,840 --> 00:33:34,399
forward to porting those

00:33:31,039 --> 00:33:36,399
to getting those kind of features

00:33:34,399 --> 00:33:37,600
in the linux line as well for the faster

00:33:36,399 --> 00:33:40,559
encryption

00:33:37,600 --> 00:33:42,320
for rdma now what about quick so

00:33:40,559 --> 00:33:46,000
encryption is very important to discuss

00:33:42,320 --> 00:33:47,039
but there's a there's a kind of related

00:33:46,000 --> 00:33:50,080
problem

00:33:47,039 --> 00:33:52,159
that in many networks whether the

00:33:50,080 --> 00:33:54,159
traffic's encrypted or not

00:33:52,159 --> 00:33:55,600
if it goes to port 445 it's going to be

00:33:54,159 --> 00:33:57,200
blocked

00:33:55,600 --> 00:33:58,799
working on this presentation for example

00:33:57,200 --> 00:34:00,240
i wasn't able to save it to azure

00:33:58,799 --> 00:34:03,519
because my local isp

00:34:00,240 --> 00:34:07,919
spectrum blocks port 445 here

00:34:03,519 --> 00:34:09,760
when i was at on a trip recently

00:34:07,919 --> 00:34:10,960
different hotel chains each of the three

00:34:09,760 --> 00:34:14,079
nights

00:34:10,960 --> 00:34:17,839
and two of the three did not block 445

00:34:14,079 --> 00:34:20,159
one of them did my son's isp

00:34:17,839 --> 00:34:21,440
doesn't block 445 the one i use here

00:34:20,159 --> 00:34:22,720
does

00:34:21,440 --> 00:34:24,320
you know it's an interesting problem so

00:34:22,720 --> 00:34:25,520
how do we get around the port 445

00:34:24,320 --> 00:34:27,280
problem one

00:34:25,520 --> 00:34:29,280
way and you can see a great presentation

00:34:27,280 --> 00:34:32,159
on this in the last few storage

00:34:29,280 --> 00:34:34,560
developer conferences

00:34:32,159 --> 00:34:35,839
is to use quick much of the network

00:34:34,560 --> 00:34:38,240
traffic for http

00:34:35,839 --> 00:34:39,520
already uses quick it has faster

00:34:38,240 --> 00:34:40,960
connection setup it has these nice

00:34:39,520 --> 00:34:43,440
performance features listed here good

00:34:40,960 --> 00:34:45,599
congestion control no headline blocking

00:34:43,440 --> 00:34:46,560
here's an example from the windows

00:34:45,599 --> 00:34:49,119
presentation on

00:34:46,560 --> 00:34:51,200
on how quick fits into the network stack

00:34:49,119 --> 00:34:52,639
and as you can see the smb client

00:34:51,200 --> 00:34:54,320
and sme server unlike many other

00:34:52,639 --> 00:34:55,040
protocols talks directly to the

00:34:54,320 --> 00:34:58,320
transport

00:34:55,040 --> 00:35:01,520
so whether you're talking to tcp or rdma

00:34:58,320 --> 00:35:03,359
smbd that is whether you're talking

00:35:01,520 --> 00:35:04,880
quick the s p client directly

00:35:03,359 --> 00:35:07,119
communicates with the stack

00:35:04,880 --> 00:35:08,000
so it's kind of cool and relatively easy

00:35:07,119 --> 00:35:09,680
to implement

00:35:08,000 --> 00:35:11,200
in smb like i said there's a good

00:35:09,680 --> 00:35:13,119
presentation on this from a few weeks

00:35:11,200 --> 00:35:15,040
ago at the storage developer conference

00:35:13,119 --> 00:35:17,200
and in a similar one a year ago that

00:35:15,040 --> 00:35:20,000
show has a nice demo

00:35:17,200 --> 00:35:20,880
of that and you know wireshark can even

00:35:20,000 --> 00:35:23,040
decode this now

00:35:20,880 --> 00:35:23,920
right so obviously there's been quite a

00:35:23,040 --> 00:35:27,040
bit of progress

00:35:23,920 --> 00:35:29,280
in implementation of smb311 over quick

00:35:27,040 --> 00:35:30,960
especially in windows

00:35:29,280 --> 00:35:32,320
so what about for the linux client well

00:35:30,960 --> 00:35:33,920
we've got an obstacle here there's no

00:35:32,320 --> 00:35:35,040
kernel driver for quick so one of the

00:35:33,920 --> 00:35:38,240
things that we need to

00:35:35,040 --> 00:35:40,640
figure out is is what to do well quick

00:35:38,240 --> 00:35:41,839
itself is about 30 000 lines of code in

00:35:40,640 --> 00:35:43,520
user space

00:35:41,839 --> 00:35:45,440
at least the ms quick module and there's

00:35:43,520 --> 00:35:46,000
similar sizes for some of the other user

00:35:45,440 --> 00:35:48,640
space

00:35:46,000 --> 00:35:48,640
quick modules

00:35:49,839 --> 00:35:52,720
ms quick has some nice features and so i

00:35:51,599 --> 00:35:54,640
was looking at that but there's two

00:35:52,720 --> 00:35:58,640
others as well

00:35:54,640 --> 00:36:01,520
and it depends on tls but tls 1.3

00:35:58,640 --> 00:36:03,040
was merged in february of 2019 into the

00:36:01,520 --> 00:36:05,359
kernel so there's already support for

00:36:03,040 --> 00:36:06,640
tls in the kernel

00:36:05,359 --> 00:36:08,720
you can take a look at this github

00:36:06,640 --> 00:36:10,400
project it doesn't use kernel coding

00:36:08,720 --> 00:36:13,280
style but it might be

00:36:10,400 --> 00:36:14,720
mergable with some changes but what was

00:36:13,280 --> 00:36:16,160
interesting for me at the storage

00:36:14,720 --> 00:36:18,880
developer conference

00:36:16,160 --> 00:36:20,480
a few weeks ago was the annual storage

00:36:18,880 --> 00:36:23,280
developer conference three other

00:36:20,480 --> 00:36:25,119
use cases came up three other networking

00:36:23,280 --> 00:36:26,000
cluster file systems are also interested

00:36:25,119 --> 00:36:28,320
in quick

00:36:26,000 --> 00:36:31,040
so we really need to figure out a way to

00:36:28,320 --> 00:36:31,040
drive this

00:36:31,359 --> 00:36:37,119
secure encrypted transport driver which

00:36:34,400 --> 00:36:38,880
has these nice performance advantages

00:36:37,119 --> 00:36:40,320
but currently is only available in user

00:36:38,880 --> 00:36:41,760
space we need to find a way to get that

00:36:40,320 --> 00:36:43,680
into kernel

00:36:41,760 --> 00:36:44,960
and you know i'm sure there'll be

00:36:43,680 --> 00:36:46,240
politics involved i'm sure there'll be

00:36:44,960 --> 00:36:48,079
lots of pushback

00:36:46,240 --> 00:36:50,560
but we have to figure out a way to do

00:36:48,079 --> 00:36:54,240
this because obviously

00:36:50,560 --> 00:36:55,520
we need some of the security features

00:36:54,240 --> 00:36:56,880
there are some nice security features as

00:36:55,520 --> 00:36:58,079
well as the performance features of

00:36:56,880 --> 00:37:00,160
quick

00:36:58,079 --> 00:37:01,599
if not for smb for these other three use

00:37:00,160 --> 00:37:04,079
cases that we were talking about two

00:37:01,599 --> 00:37:07,200
weeks ago

00:37:04,079 --> 00:37:08,320
so when smb 311 is layered on top of

00:37:07,200 --> 00:37:09,440
quick there's really no difference in

00:37:08,320 --> 00:37:12,320
smb

00:37:09,440 --> 00:37:14,240
um multi-channel and signing encryption

00:37:12,320 --> 00:37:16,079
uses server certificates

00:37:14,240 --> 00:37:17,680
you don't have to double encrypt there's

00:37:16,079 --> 00:37:19,119
a good talk by sudhir dondalori if you

00:37:17,680 --> 00:37:21,119
want to look at it from this year's

00:37:19,119 --> 00:37:23,359
storage developer conference what about

00:37:21,119 --> 00:37:25,359
data integrity ext4 supports something

00:37:23,359 --> 00:37:26,400
called verity fsverity to allow enhanced

00:37:25,359 --> 00:37:28,400
integrity checking

00:37:26,400 --> 00:37:30,079
and this isn't visible over smb but smb

00:37:28,400 --> 00:37:31,920
does allow setting file attribute

00:37:30,079 --> 00:37:32,800
integrity stream to enable enhanced

00:37:31,920 --> 00:37:34,400
integrity

00:37:32,800 --> 00:37:35,920
checking on some file systems and also

00:37:34,400 --> 00:37:36,720
file attribute no scrub data is kind of

00:37:35,920 --> 00:37:38,720
the reverse

00:37:36,720 --> 00:37:40,160
that disables data integrity checks by

00:37:38,720 --> 00:37:41,680
the background scanners

00:37:40,160 --> 00:37:44,240
we could probably make these available

00:37:41,680 --> 00:37:45,760
in statics dave howells added statx a

00:37:44,240 --> 00:37:48,160
few years ago so these

00:37:45,760 --> 00:37:50,079
extended stat parameters could expose

00:37:48,160 --> 00:37:51,839
these and allow us to set and

00:37:50,079 --> 00:37:53,680
you know files that we want particularly

00:37:51,839 --> 00:37:55,760
strong data integrity on

00:37:53,680 --> 00:37:59,040
now one of the cool things about smv is

00:37:55,760 --> 00:38:01,920
that we have many cases where

00:37:59,040 --> 00:38:03,520
the client wants to do client enforce

00:38:01,920 --> 00:38:04,000
security and make his nfs does this as

00:38:03,520 --> 00:38:05,920
well

00:38:04,000 --> 00:38:07,040
in some cases you want the reverse you

00:38:05,920 --> 00:38:10,720
want

00:38:07,040 --> 00:38:13,200
the the accol to

00:38:10,720 --> 00:38:13,920
allow you want the client to be able to

00:38:13,200 --> 00:38:15,839
emulate

00:38:13,920 --> 00:38:17,280
the mode bits from the accol but not

00:38:15,839 --> 00:38:18,240
enforce them on the client because you

00:38:17,280 --> 00:38:19,760
have

00:38:18,240 --> 00:38:21,760
these multi-user identities with

00:38:19,760 --> 00:38:23,680
kerberos tickets

00:38:21,760 --> 00:38:25,440
that will allow the server to accurately

00:38:23,680 --> 00:38:27,440
enforce security

00:38:25,440 --> 00:38:29,040
but in other models you want the server

00:38:27,440 --> 00:38:30,240
mount wide open and you want the client

00:38:29,040 --> 00:38:33,200
enforcing security

00:38:30,240 --> 00:38:35,119
manifest sometimes has this case so when

00:38:33,200 --> 00:38:36,720
you do that this ids from sid and mode

00:38:35,119 --> 00:38:37,200
from said mount options allow you to

00:38:36,720 --> 00:38:39,680
store

00:38:37,200 --> 00:38:40,480
opaquely in the aqua the mode bits as

00:38:39,680 --> 00:38:42,880
well as the

00:38:40,480 --> 00:38:45,280
posix identity the posix uid in a way

00:38:42,880 --> 00:38:46,640
that will allow the client to enforce it

00:38:45,280 --> 00:38:48,160
where in many other cases you'll be

00:38:46,640 --> 00:38:49,520
mounting with something like sip sackle

00:38:48,160 --> 00:38:50,800
where the mode bits are emulated you

00:38:49,520 --> 00:38:53,599
might mount with no perm

00:38:50,800 --> 00:38:55,359
mount option and you're using multi-user

00:38:53,599 --> 00:38:56,960
so you're allowing

00:38:55,359 --> 00:38:58,400
different kerberos identity for each

00:38:56,960 --> 00:39:00,240
local uid

00:38:58,400 --> 00:39:01,440
so here's an example chart that shows

00:39:00,240 --> 00:39:03,440
the different ways you configure it but

00:39:01,440 --> 00:39:06,480
today the vast majority of people

00:39:03,440 --> 00:39:07,200
configure a default uid and a default

00:39:06,480 --> 00:39:10,560
mode

00:39:07,200 --> 00:39:13,200
on the client to avoid these

00:39:10,560 --> 00:39:14,640
configuration choices but you have three

00:39:13,200 --> 00:39:16,400
models in the client today sort of a

00:39:14,640 --> 00:39:18,880
client enforced model a default model

00:39:16,400 --> 00:39:20,800
and a server enforced multi-user model

00:39:18,880 --> 00:39:22,640
that clients often choose from depending

00:39:20,800 --> 00:39:24,560
on their workload requirements

00:39:22,640 --> 00:39:27,119
so what are the to-do's we have to

00:39:24,560 --> 00:39:29,119
broaden the supported security scenarios

00:39:27,119 --> 00:39:30,400
have better se linux integration with

00:39:29,119 --> 00:39:32,480
smb 311

00:39:30,400 --> 00:39:34,400
we have to have stronger peer-to-peer

00:39:32,480 --> 00:39:35,599
support maybe add support for pkudu

00:39:34,400 --> 00:39:38,320
where the max

00:39:35,599 --> 00:39:40,000
local kdc's we need to continue this

00:39:38,320 --> 00:39:42,240
work on stronger encryption to finish

00:39:40,000 --> 00:39:43,839
off the aes gcm 256

00:39:42,240 --> 00:39:45,599
and then this quick support solving the

00:39:43,839 --> 00:39:47,280
port 445 problem

00:39:45,599 --> 00:39:48,800
and then there's a similar kind of thing

00:39:47,280 --> 00:39:50,400
that's been

00:39:48,800 --> 00:39:52,000
recently made available for improving

00:39:50,400 --> 00:39:54,320
packet signing performance

00:39:52,000 --> 00:39:55,839
by using aesgmac now what do we need

00:39:54,320 --> 00:39:57,359
from the security team

00:39:55,839 --> 00:39:59,520
is kerberos good enough do we need to

00:39:57,359 --> 00:40:01,280
add support for sp nego

00:39:59,520 --> 00:40:02,720
had additional protocols like oauth for

00:40:01,280 --> 00:40:03,359
authentication that are opaquely

00:40:02,720 --> 00:40:06,000
available

00:40:03,359 --> 00:40:06,480
over s p espnego for smb do we need to

00:40:06,000 --> 00:40:08,880
extend

00:40:06,480 --> 00:40:10,640
pam and nss to allow mapping global sids

00:40:08,880 --> 00:40:13,839
and oids in a different way

00:40:10,640 --> 00:40:14,640
than um rfc 2307 and what about rich

00:40:13,839 --> 00:40:16,800
ackles

00:40:14,640 --> 00:40:18,319
is there a way to to get rich apples uh

00:40:16,800 --> 00:40:19,680
or they standardize the api between the

00:40:18,319 --> 00:40:22,000
six or seven file systems that can

00:40:19,680 --> 00:40:25,359
support you today not just nfs and

00:40:22,000 --> 00:40:27,280
and sift.ko for smp3 can we expose

00:40:25,359 --> 00:40:28,960
file attributes for statx to mark files

00:40:27,280 --> 00:40:31,359
for enhanced integrity checking

00:40:28,960 --> 00:40:32,560
and how do we get a fast efficient quick

00:40:31,359 --> 00:40:36,240
driver in the kernel

00:40:32,560 --> 00:40:38,640
to allow for encryption

00:40:36,240 --> 00:40:39,760
and alternate a different way and quick

00:40:38,640 --> 00:40:41,280
has like i said some interesting

00:40:39,760 --> 00:40:43,680
performance advantages

00:40:41,280 --> 00:40:45,040
but it also looks like the way forward

00:40:43,680 --> 00:40:47,920
for many protocols

00:40:45,040 --> 00:40:48,960
to do secure encrypted traffic but we

00:40:47,920 --> 00:40:50,480
need to get away

00:40:48,960 --> 00:40:52,079
i need to have find a way to get that

00:40:50,480 --> 00:40:53,359
into the linux kernel so these are some

00:40:52,079 --> 00:40:55,200
interesting actions that we can talk

00:40:53,359 --> 00:40:56,720
about that we can bring up more broadly

00:40:55,200 --> 00:40:58,480
many of these are far outside the file

00:40:56,720 --> 00:40:59,119
system scope but we'd love the help on

00:40:58,480 --> 00:41:01,280
this

00:40:59,119 --> 00:41:02,560
if you have questions on this feel free

00:41:01,280 --> 00:41:04,160
to follow up

00:41:02,560 --> 00:41:05,680
on the linux sift's mailing list on the

00:41:04,160 --> 00:41:07,680
asamba technical mailing list

00:41:05,680 --> 00:41:08,720
or email me directly at smfrench

00:41:07,680 --> 00:41:13,839
gmail.com

00:41:08,720 --> 00:41:13,839

YouTube URL: https://www.youtube.com/watch?v=0bCmbI4fJRk


