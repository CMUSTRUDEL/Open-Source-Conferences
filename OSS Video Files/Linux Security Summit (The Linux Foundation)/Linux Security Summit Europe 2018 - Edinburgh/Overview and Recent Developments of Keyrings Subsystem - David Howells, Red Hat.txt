Title: Overview and Recent Developments of Keyrings Subsystem - David Howells, Red Hat
Publication date: 2018-10-26
Playlist: Linux Security Summit Europe 2018 - Edinburgh
Description: 
	Overview and Recent Developments of Keyrings Subsystem - David Howells, Red HatÂ 

David Howells will present an overview of the keyrings subsystem and how it's accessed; he will also cover recently added functionality and give an outline of stuff planned for the future. 

About David Howells
Red Hat
Captions: 
	00:00:00,290 --> 00:00:10,740
okay so I'm David towels can you hear me

00:00:05,930 --> 00:00:13,440
so is that better so I'm David howls

00:00:10,740 --> 00:00:15,089
I've been working for Red Hat nearly 18

00:00:13,440 --> 00:00:17,970
years on a variety of things and

00:00:15,089 --> 00:00:21,810
filesystems couple of architectures very

00:00:17,970 --> 00:00:26,160
piece of security stuff and whole lot of

00:00:21,810 --> 00:00:29,550
general stuff well one of the things

00:00:26,160 --> 00:00:32,550
I've done is created a key management

00:00:29,550 --> 00:00:36,840
system inside the kernel for what it was

00:00:32,550 --> 00:00:40,559
initially for managing tokens for the

00:00:36,840 --> 00:00:43,079
efest file system I was writing but to

00:00:40,559 --> 00:00:45,000
make sure the code isn't too wasted I

00:00:43,079 --> 00:00:48,149
tried to spread it around to all sorts

00:00:45,000 --> 00:00:50,550
of different things otherwise he's just

00:00:48,149 --> 00:00:52,760
a big hunk of core memory it's not doing

00:00:50,550 --> 00:00:52,760
anything

00:00:53,329 --> 00:01:03,210
so the keyring code is keyrings salty is

00:00:59,969 --> 00:01:06,299
for retaining keys and tokens as you

00:01:03,210 --> 00:01:08,310
might be able to guess so they hold they

00:01:06,299 --> 00:01:13,250
can hold arbitrary data but usually it's

00:01:08,310 --> 00:01:18,380
structured in some way so for example

00:01:13,250 --> 00:01:18,380
you can have filesystem keys and

00:01:18,530 --> 00:01:27,180
asymmetric keys or get that to more than

00:01:21,630 --> 00:01:30,329
that later so they used to manage the

00:01:27,180 --> 00:01:32,490
access control so the man managed access

00:01:30,329 --> 00:01:36,509
to this data inside thing because they

00:01:32,490 --> 00:01:39,150
have ownership group and permissions

00:01:36,509 --> 00:01:41,040
masks but beyond the usual three you

00:01:39,150 --> 00:01:44,030
expect of Unix I use a group another

00:01:41,040 --> 00:01:48,930
they also have a possessor permissions

00:01:44,030 --> 00:01:51,360
so each process has a keyring as giving

00:01:48,930 --> 00:01:52,590
stashed if the keys in that keyring

00:01:51,360 --> 00:01:54,930
you're allowed to use it using the

00:01:52,590 --> 00:01:57,060
possessive admissions instead of user

00:01:54,930 --> 00:01:59,329
another and stuff which means you can

00:01:57,060 --> 00:02:04,170
have keys that only your process can see

00:01:59,329 --> 00:02:07,140
nobody outside that can see it also

00:02:04,170 --> 00:02:09,000
manages a lifetime so when the last

00:02:07,140 --> 00:02:11,730
reference goes the keys automatically be

00:02:09,000 --> 00:02:13,140
deleted and also key to expire after a

00:02:11,730 --> 00:02:14,520
while and when they expire

00:02:13,140 --> 00:02:20,640
automatically removed from the system

00:02:14,520 --> 00:02:22,800
and the storage they occupy is reset

00:02:20,640 --> 00:02:26,550
before it returns the system to make

00:02:22,800 --> 00:02:28,110
sure no leakage and also there are user

00:02:26,550 --> 00:02:30,300
space interfaces allow you to many

00:02:28,110 --> 00:02:33,060
manipulates these things in various ways

00:02:30,300 --> 00:02:37,380
for instance changing permissions

00:02:33,060 --> 00:02:39,120
changing the ownership moving them

00:02:37,380 --> 00:02:43,110
between keyrings granting other people

00:02:39,120 --> 00:02:50,670
access and there's also not cool service

00:02:43,110 --> 00:02:52,950
so you say give me a key for a lot of

00:02:50,670 --> 00:02:57,300
things you can use used for using dns

00:02:52,950 --> 00:03:01,590
you give me a DNS thing for a DNS token

00:02:57,300 --> 00:03:04,170
for Grand Central talk and it will up

00:03:01,590 --> 00:03:06,120
call to the kernel so sort of call to

00:03:04,170 --> 00:03:08,310
use space user space to actually do the

00:03:06,120 --> 00:03:10,700
DNS lookup because I don't really don't

00:03:08,310 --> 00:03:13,140
put a DNS thing in the kernel

00:03:10,700 --> 00:03:14,940
just do it and then that will

00:03:13,140 --> 00:03:16,500
instantiate the key and then when you

00:03:14,940 --> 00:03:18,989
get the key back you can just read about

00:03:16,500 --> 00:03:24,000
the contents assuming you have

00:03:18,989 --> 00:03:25,920
permission to do so so the types of

00:03:24,000 --> 00:03:29,160
payloads you can put in each case you

00:03:25,920 --> 00:03:32,579
have authentication tokens of for

00:03:29,160 --> 00:03:36,140
network file systems a capital

00:03:32,579 --> 00:03:40,910
cryptographic tokens so a symmetric keys

00:03:36,140 --> 00:03:44,220
file system encryption writable things

00:03:40,910 --> 00:03:46,470
and put passwords in so does it Skeeter

00:03:44,220 --> 00:03:49,260
call log on key you can put a password

00:03:46,470 --> 00:03:52,470
in create a key stick a password in

00:03:49,260 --> 00:03:55,200
there in use space we use place cannot

00:03:52,470 --> 00:03:59,040
then get the password back hence you can

00:03:55,200 --> 00:04:03,780
use the key as a tokens pass to like the

00:03:59,040 --> 00:04:06,299
safes assist mounts or whatever but so

00:04:03,780 --> 00:04:08,730
they took the key ID it's used space

00:04:06,299 --> 00:04:10,200
then stands for the password and it's

00:04:08,730 --> 00:04:13,320
just not extractable without cracking

00:04:10,200 --> 00:04:16,739
the colonel said you can be used for DNS

00:04:13,320 --> 00:04:20,120
results you also use it for ID mapping

00:04:16,739 --> 00:04:23,610
in NFS insists so use the up call to

00:04:20,120 --> 00:04:26,190
save to your space I have this name of

00:04:23,610 --> 00:04:29,400
this ID please go and map it's for that

00:04:26,190 --> 00:04:34,350
files for this file system and is also

00:04:29,400 --> 00:04:37,050
usually defined key key type which can

00:04:34,350 --> 00:04:44,970
store arbitrary data and Kerberos makes

00:04:37,050 --> 00:04:52,770
use of this unfortunately I can't see

00:04:44,970 --> 00:04:54,570
how I get my shell I was gonna show you

00:04:52,770 --> 00:04:56,840
some of these stuff but I can't make it

00:04:54,570 --> 00:04:56,840
come up

00:05:11,630 --> 00:05:33,170
can you read that just it needs to be

00:05:13,590 --> 00:05:33,170
bigger so I can do things like add a key

00:05:36,800 --> 00:05:43,680
so what this would do is add you a user

00:05:40,140 --> 00:05:48,390
type usually find payload key which

00:05:43,680 --> 00:05:52,230
basically just takes a block call the

00:05:48,390 --> 00:05:54,090
keys called foo and the Bob will be

00:05:52,230 --> 00:05:57,090
Barney the ad is my session keyring

00:05:54,090 --> 00:06:01,770
that's what the @ s stands for so it

00:05:57,090 --> 00:06:04,710
gives me a key C or a little bit back if

00:06:01,770 --> 00:06:07,860
I view my session key ring in there you

00:06:04,710 --> 00:06:13,850
can see I've got a thing called

00:06:07,860 --> 00:06:17,700
invocation ID which is from from system

00:06:13,850 --> 00:06:20,370
system the user manager I believe and

00:06:17,700 --> 00:06:22,800
the key I added so that there's a

00:06:20,370 --> 00:06:25,860
special type called keyring type that is

00:06:22,800 --> 00:06:28,680
it just to contain if of the keys and it

00:06:25,860 --> 00:06:30,870
is just a key so you can put keyrings

00:06:28,680 --> 00:06:32,220
inside key you can move keyrings about

00:06:30,870 --> 00:06:38,610
using the same interfaces in the other

00:06:32,220 --> 00:06:40,820
thing so I can show you what's in the

00:06:38,610 --> 00:06:40,820
key

00:06:46,660 --> 00:06:52,380
so lying just get it out and I can

00:07:07,590 --> 00:07:15,430
so doing that I could take you ate all

00:07:11,530 --> 00:07:23,560
tuitions on the key so now I can't do

00:07:15,430 --> 00:07:27,280
that and also missions includes changing

00:07:23,560 --> 00:07:33,790
the this actually that should be three

00:07:27,280 --> 00:07:35,110
or four fish includes changing the the

00:07:33,790 --> 00:07:37,420
mass so I can't that's you put the

00:07:35,110 --> 00:07:38,800
Persians back on again so one thing you

00:07:37,420 --> 00:07:41,770
can do you can set the permissions to

00:07:38,800 --> 00:07:43,390
that person can read and nobody can

00:07:41,770 --> 00:07:48,030
change things that person read it but I

00:07:43,390 --> 00:07:48,030
cancel theoretically get rid of it

00:07:50,580 --> 00:07:53,980
because unlink

00:07:52,510 --> 00:07:55,990
doesn't require permissions on the thing

00:07:53,980 --> 00:08:03,660
you're linking only the keyring it's in

00:07:55,990 --> 00:08:07,620
so you should just see these gun and

00:08:03,660 --> 00:08:07,620
other things we can do

00:08:11,689 --> 00:08:14,689
network

00:08:25,130 --> 00:08:44,650
I wanted to watch you do it so well this

00:08:40,880 --> 00:08:48,590
should have done he's gone and done and

00:08:44,650 --> 00:08:52,190
up cold so it asked the care it created

00:08:48,590 --> 00:08:54,740
a key asked the kitten to Oh Cole to the

00:08:52,190 --> 00:08:57,260
DNS resolver code which then resolved

00:08:54,740 --> 00:09:00,380
rental nought to PFS DB record for a

00:08:57,260 --> 00:09:02,300
grand not central de tog they up called

00:09:00,380 --> 00:09:05,330
and put that back in the key and

00:09:02,300 --> 00:09:06,680
returned and now that's the key got

00:09:05,330 --> 00:09:11,330
instantiated with that and I can just

00:09:06,680 --> 00:09:12,830
print that out from the key so those are

00:09:11,330 --> 00:09:15,610
the IP addresses that belongs to gran

00:09:12,830 --> 00:09:15,610
Knott central talk

00:09:29,610 --> 00:09:33,190
so I said that there are thing concept

00:09:32,230 --> 00:09:35,740
called keyrings which are just

00:09:33,190 --> 00:09:42,519
collections of keys every process has

00:09:35,740 --> 00:09:44,200
access to pins three key rings the key

00:09:42,519 --> 00:09:46,329
rings are optional so they may if they

00:09:44,200 --> 00:09:51,180
don't exist not pinned but you've got a

00:09:46,329 --> 00:09:53,200
perfed keyring which only belongs that

00:09:51,180 --> 00:09:54,820
belongs to particular thread suit

00:09:53,200 --> 00:09:56,019
because process multiple threads each

00:09:54,820 --> 00:09:58,570
one has its own key ring

00:09:56,019 --> 00:10:00,459
and you're the key the other processes

00:09:58,570 --> 00:10:02,279
don't necessarily seems like the other

00:10:00,459 --> 00:10:05,110
threads in the process don't necessarily

00:10:02,279 --> 00:10:06,880
necessarily since that's keyring was the

00:10:05,110 --> 00:10:09,160
process keyring which all the threads in

00:10:06,880 --> 00:10:12,390
the process can see there's the

00:10:09,160 --> 00:10:16,839
procession keyring which is inherited

00:10:12,390 --> 00:10:19,060
when you create a process all processes

00:10:16,839 --> 00:10:22,930
of that Forks also inherit that session

00:10:19,060 --> 00:10:25,089
key ring and and then there's a per-user

00:10:22,930 --> 00:10:27,600
caving which processes don't inherit but

00:10:25,089 --> 00:10:29,680
Pam stick when you create a new session

00:10:27,600 --> 00:10:32,140
so when you are getting and creating

00:10:29,680 --> 00:10:34,510
your login session Pam Pavan creates

00:10:32,140 --> 00:10:40,529
your session keyring and sticks a link

00:10:34,510 --> 00:10:42,820
in there to your user keyring I used to

00:10:40,529 --> 00:10:46,230
but I'll be feeling some has changed

00:10:42,820 --> 00:10:46,230
pants we do this anymore

00:10:47,339 --> 00:10:51,190
because I should see it

00:10:49,390 --> 00:10:54,720
I should see it there and it's not there

00:10:51,190 --> 00:10:54,720
and not sure why that is

00:11:01,320 --> 00:11:07,410
but I can add my user cueing to mine

00:11:08,370 --> 00:11:16,090
it's my session cueing like that there

00:11:13,810 --> 00:11:19,060
is also a persistent per user clearing

00:11:16,090 --> 00:11:21,430
which lasts from certain amount of time

00:11:19,060 --> 00:11:23,980
once you've logged out

00:11:21,430 --> 00:11:27,040
I said keyrings have expiry times on

00:11:23,980 --> 00:11:29,890
them when the expiry two keys and key

00:11:27,040 --> 00:11:31,840
rings have expiry times on when the when

00:11:29,890 --> 00:11:34,660
they expire the kernel garbage collector

00:11:31,840 --> 00:11:38,770
just goes and moves them this is used by

00:11:34,660 --> 00:11:42,220
Kerberos to store keys and they persists

00:11:38,770 --> 00:11:44,230
for say up to three days beyond your

00:11:42,220 --> 00:11:45,910
last logout which means if you leave a

00:11:44,230 --> 00:11:47,590
daemon running once you've logged out it

00:11:45,910 --> 00:11:51,810
still has access to your Karis keys

00:11:47,590 --> 00:11:51,810
until campus keys have expired

00:12:04,420 --> 00:12:14,740
so that there's a microsystem keyring

00:12:06,910 --> 00:12:17,200
and I think given list one mistake did

00:12:14,740 --> 00:12:22,300
make was that if you look in the prop

00:12:17,200 --> 00:12:25,570
keys file all the numbers in hex rotten

00:12:22,300 --> 00:12:28,120
decimal which means but the interface

00:12:25,570 --> 00:12:29,430
requires the Hixson must be their

00:12:28,120 --> 00:12:31,840
prefixes 0x

00:12:29,430 --> 00:12:40,210
and you can see in there does Kieran :

00:12:31,840 --> 00:12:45,310
Scott krb that's from here Bruce I think

00:12:40,210 --> 00:12:49,210
it's empty at the moment so the user

00:12:45,310 --> 00:12:53,410
space API is 3 system calls and a proc

00:12:49,210 --> 00:12:56,820
file so add key adds a key and

00:12:53,410 --> 00:13:00,400
instantiate it all in one go request key

00:12:56,820 --> 00:13:02,260
basically then up calls to go but if

00:13:00,400 --> 00:13:03,760
search is first of all it searches for a

00:13:02,260 --> 00:13:05,470
matching key if it doesn't find that it

00:13:03,760 --> 00:13:09,070
creates a key and up calls to user space

00:13:05,470 --> 00:13:12,280
for instantiate the key and key capital

00:13:09,070 --> 00:13:16,150
is a range of other functions like a

00:13:12,280 --> 00:13:18,880
link link change the permissions change

00:13:16,150 --> 00:13:23,920
the expiry time things like that and

00:13:18,880 --> 00:13:27,420
prop keys is or all the keys on the

00:13:23,920 --> 00:13:27,420
system that you can see

00:13:35,550 --> 00:13:41,380
so you see roots can see a whole lot

00:13:38,200 --> 00:13:44,920
more keys including some DNS resolvers

00:13:41,380 --> 00:13:48,760
blacklist keys from a loaded from the FI

00:13:44,920 --> 00:13:50,410
database and there's an asymmetric key

00:13:48,760 --> 00:13:58,480
at the bottom which is the module

00:13:50,410 --> 00:14:02,680
signing key fleece kernel they think you

00:13:58,480 --> 00:14:05,529
get into that later and are too user

00:14:02,680 --> 00:14:08,200
space utilities that I provided one is

00:14:05,529 --> 00:14:12,750
key control which I've just been using

00:14:08,200 --> 00:14:18,870
and your one is a Pam library which

00:14:12,750 --> 00:14:18,870
should be in the Pam configuration

00:14:29,660 --> 00:14:40,950
so there so that says to run the Pam key

00:14:38,370 --> 00:14:43,950
in it thing and to revoke that creates a

00:14:40,950 --> 00:14:45,750
session key when you log in and so

00:14:43,950 --> 00:14:48,649
that's inherited by all the children of

00:14:45,750 --> 00:14:51,089
the session and the revoke argument says

00:14:48,649 --> 00:14:53,070
revoke the key giving on the way out

00:14:51,089 --> 00:14:55,709
which means anyone that accesses it

00:14:53,070 --> 00:15:03,390
there thereafter guess eqe votes is an

00:14:55,709 --> 00:15:05,339
error so I said is not call local runs

00:15:03,390 --> 00:15:08,970
the per espen request key program and

00:15:05,339 --> 00:15:10,440
there's a master config file and a place

00:15:08,970 --> 00:15:13,920
where you can put other configuration

00:15:10,440 --> 00:15:16,950
files they tell a request key what to

00:15:13,920 --> 00:15:19,740
actually run so it's just a space

00:15:16,950 --> 00:15:27,600
program switch it will look up the key

00:15:19,740 --> 00:15:29,010
parameters and find something to run so

00:15:27,600 --> 00:15:36,000
it looks like that so the operation

00:15:29,010 --> 00:15:38,550
create example a type there's a bunch of

00:15:36,000 --> 00:15:42,740
debug types which you can just create

00:15:38,550 --> 00:15:47,070
things with and you can see at the end

00:15:42,740 --> 00:15:48,720
the programs that you can run well the

00:15:47,070 --> 00:15:52,050
program that gets run if it parameters

00:15:48,720 --> 00:15:54,060
match I in the currents murderin waiting

00:15:52,050 --> 00:15:56,520
for the current merge window is a patch

00:15:54,060 --> 00:15:58,220
to me it's more specific at the moment

00:15:56,520 --> 00:16:00,899
it just goes to the file first match

00:15:58,220 --> 00:16:03,450
runs that program this isn't actually

00:16:00,899 --> 00:16:05,190
good way of doing it now it goes through

00:16:03,450 --> 00:16:08,279
all the lines finds the best match

00:16:05,190 --> 00:16:09,540
either on with the weather stars the the

00:16:08,279 --> 00:16:13,250
wild can't match the least number of

00:16:09,540 --> 00:16:13,250
characters and runs that one

00:16:16,100 --> 00:16:22,460
so current usages in the kernel include

00:16:20,530 --> 00:16:26,060
authentication tokens for their first

00:16:22,460 --> 00:16:27,920
file system doing killed in caching

00:16:26,060 --> 00:16:31,640
doing in cash and Colonel Dennis lookups

00:16:27,920 --> 00:16:35,000
doing NFS user ID to ID mapping and

00:16:31,640 --> 00:16:38,380
safes use it to ID mapping FS scripts

00:16:35,000 --> 00:16:42,800
which is started with 4x t4 to do

00:16:38,380 --> 00:16:45,890
encrypted files and equipped vests which

00:16:42,800 --> 00:16:52,750
is something you mount over another file

00:16:45,890 --> 00:16:58,930
system and it encrypts and decrypts gpgc

00:16:52,750 --> 00:16:58,930
encrypted files in the enjoy file system

00:17:00,010 --> 00:17:04,090
there's an asymmetric key type

00:17:14,209 --> 00:17:19,730
so you can see the number of keys the

00:17:17,990 --> 00:17:24,879
second one down the fedora colonel

00:17:19,730 --> 00:17:27,679
signing key that's the one generated by

00:17:24,879 --> 00:17:29,720
the the colonel bill process what he

00:17:27,679 --> 00:17:32,600
does he creates and it basically they're

00:17:29,720 --> 00:17:34,669
public key this word RSA public key

00:17:32,600 --> 00:17:37,039
during the build process signs all the

00:17:34,669 --> 00:17:39,529
modules and then deletes the private key

00:17:37,039 --> 00:17:42,499
and the public key is compiled into the

00:17:39,529 --> 00:17:44,059
kernel and in all the module all the

00:17:42,499 --> 00:17:46,730
modules are signed with that and so when

00:17:44,059 --> 00:17:49,190
as the modules are loaded it can check

00:17:46,730 --> 00:17:51,529
the signatures on the modules there are

00:17:49,190 --> 00:17:53,720
a bunch of other keys loaded from ufr

00:17:51,529 --> 00:18:01,669
license and Microsoft ones and things in

00:17:53,720 --> 00:18:04,389
there and these n there are a bunch of

00:18:01,669 --> 00:18:07,159
special keyrings

00:18:04,389 --> 00:18:11,299
so as I can see built in trusted keys

00:18:07,159 --> 00:18:13,570
secondary keyrings not built in rich DB

00:18:11,299 --> 00:18:22,399
Kizer I think that maybe for firmware

00:18:13,570 --> 00:18:25,809
resolver like list as the blacklist keys

00:18:22,399 --> 00:18:33,799
which when when we do a signature check

00:18:25,809 --> 00:18:35,659
checks there we look up the the digest

00:18:33,799 --> 00:18:36,799
in the blacklist key if he matches we

00:18:35,659 --> 00:18:42,320
see you're not allowed to load that

00:18:36,799 --> 00:18:44,990
module and or firmware or KX ik I may

00:18:42,320 --> 00:18:47,619
also use as the keys for a similar sort

00:18:44,990 --> 00:18:53,899
of thing that under the I'm a banner are

00:18:47,619 --> 00:18:56,350
directly so there's the key Cal

00:18:53,899 --> 00:18:59,090
interface also offers a DP Helmand

00:18:56,350 --> 00:19:02,600
operation but you do you have to put a

00:18:59,090 --> 00:19:04,639
number of keys in the parameters into

00:19:02,600 --> 00:19:06,830
log on keys and give them to the

00:19:04,639 --> 00:19:10,580
diffie-hellman algorithm which can then

00:19:06,830 --> 00:19:13,399
go and do hardware do do this to the

00:19:10,580 --> 00:19:16,340
hard way yes

00:19:13,399 --> 00:19:18,799
the provide T as T P max from TPM access

00:19:16,340 --> 00:19:25,179
available using a trust a trusted key

00:19:18,799 --> 00:19:29,120
type encrypted the trusted key type

00:19:25,179 --> 00:19:34,429
uses the TPM to unwrap to seal and

00:19:29,120 --> 00:19:35,960
unwrap symmetric keys and then retains

00:19:34,429 --> 00:19:37,610
some inside the kernel so things inside

00:19:35,960 --> 00:19:39,980
the kernel can see the keys and can use

00:19:37,610 --> 00:19:41,720
the keys but they're not exposed to user

00:19:39,980 --> 00:19:45,799
space you have a handle which is the key

00:19:41,720 --> 00:19:49,880
serial number but the actual key they've

00:19:45,799 --> 00:19:54,230
clipped on material you can't get at ok

00:19:49,880 --> 00:19:56,990
the encrypted key is a user's a trusted

00:19:54,230 --> 00:20:02,000
key to unwrap further symmetric key if I

00:19:56,990 --> 00:20:06,220
understand that right there's a Kerberos

00:20:02,000 --> 00:20:06,220
makes use of this if I do

00:20:27,169 --> 00:20:37,440
so you can see a bunch of keys in of

00:20:33,359 --> 00:20:41,759
that region and there which you added by

00:20:37,440 --> 00:20:45,509
Kerberos so k Kerberos is here is using

00:20:41,759 --> 00:20:52,190
the the keyring as a credential cash

00:20:45,509 --> 00:20:54,840
rather than using something / temp and

00:20:52,190 --> 00:20:57,419
open air first uses it to do PAC

00:20:54,840 --> 00:20:59,399
emulation because we don't like them

00:20:57,419 --> 00:21:01,679
looking around with the group the group

00:20:59,399 --> 00:21:04,489
idealist inside the kernel so there now

00:21:01,679 --> 00:21:08,429
you they stick a key in your keyring

00:21:04,489 --> 00:21:10,799
they use a space use define key with it

00:21:08,429 --> 00:21:12,840
with the pad number in it that the

00:21:10,799 --> 00:21:14,220
kernel can look up because the main

00:21:12,840 --> 00:21:17,789
thing about this is the kernel can

00:21:14,220 --> 00:21:19,350
access these keys so user space can use

00:21:17,789 --> 00:21:23,999
this to provide you keep stuff to the

00:21:19,350 --> 00:21:32,820
kernel to use so upcoming changes in

00:21:23,999 --> 00:21:36,409
this merge window the number of public

00:21:32,820 --> 00:21:41,399
key operations been gathered so encrypt

00:21:36,409 --> 00:21:43,230
so encrypt decrypt sign and verify these

00:21:41,399 --> 00:21:44,879
will appear as keep cattle commands and

00:21:43,230 --> 00:21:49,529
their avail there will be available

00:21:44,879 --> 00:21:51,779
through the key cattle program so we've

00:21:49,529 --> 00:21:54,690
added two new passes to the asymmetric

00:21:51,779 --> 00:21:57,509
key type one is you can give it a PPS

00:21:54,690 --> 00:21:59,549
yes a pkcs Eights blob

00:21:57,509 --> 00:22:01,559
it will pass it's all stick a few day to

00:21:59,549 --> 00:22:03,710
contain their in that's actually a

00:22:01,559 --> 00:22:07,679
symmetric key which you can then pass to

00:22:03,710 --> 00:22:10,529
these operations you can't get the keys

00:22:07,679 --> 00:22:16,080
data account again once it's in there

00:22:10,529 --> 00:22:20,580
it's in there and the other one is TPM

00:22:16,080 --> 00:22:22,639
wrapped it's symmetric key so you create

00:22:20,580 --> 00:22:27,029
an asymmetric key somewhere you wrap it

00:22:22,639 --> 00:22:29,700
you get the TPM to seal it that's a wrap

00:22:27,029 --> 00:22:32,700
to wrap it in some encryption you can

00:22:29,700 --> 00:22:34,889
then pass it to the symmetric key using

00:22:32,700 --> 00:22:35,480
app key it won't be on it will be passed

00:22:34,889 --> 00:22:38,840
to the T

00:22:35,480 --> 00:22:40,550
captain Rev and but then the unwrapped

00:22:38,840 --> 00:22:42,590
stuff is retained inside the kernel you

00:22:40,550 --> 00:22:49,300
can't get it back out but you can use it

00:22:42,590 --> 00:22:53,000
through the new key cable interface so

00:22:49,300 --> 00:22:54,830
onto the future future developments want

00:22:53,000 --> 00:22:57,380
to do one is automate access could

00:22:54,830 --> 00:23:00,230
improve access controls I want to make

00:22:57,380 --> 00:23:03,950
the permissions find it finer grained I

00:23:00,230 --> 00:23:05,690
want moved join you one thing you can do

00:23:03,950 --> 00:23:07,970
you can join a keyring or making your

00:23:05,690 --> 00:23:08,950
session queuing this is generally a bad

00:23:07,970 --> 00:23:10,790
idea

00:23:08,950 --> 00:23:12,050
there's fun things I shouldn't have

00:23:10,790 --> 00:23:14,030
added in the first place but you seem

00:23:12,050 --> 00:23:15,770
like a good idea at the time I want to

00:23:14,030 --> 00:23:18,800
make you so this is a separate control

00:23:15,770 --> 00:23:23,410
so that you had to grant someone the

00:23:18,800 --> 00:23:25,670
ability to join the key link so that

00:23:23,410 --> 00:23:26,900
someone can't just go and randomly join

00:23:25,670 --> 00:23:29,390
the keyring because it's a join the

00:23:26,900 --> 00:23:32,570
keyring they get access to all the keys

00:23:29,390 --> 00:23:34,400
in that keyring so I want to be able to

00:23:32,570 --> 00:23:37,790
you could say now you're not joining

00:23:34,400 --> 00:23:41,990
that doing another one is I want to make

00:23:37,790 --> 00:23:43,460
it possible to do invalidate though I'm

00:23:41,990 --> 00:23:46,330
validation of the key without requiring

00:23:43,460 --> 00:23:48,590
write X to the right access to the King

00:23:46,330 --> 00:23:50,990
because at the moment I think you be

00:23:48,590 --> 00:23:53,480
from Rocky you can do it right axis so

00:23:50,990 --> 00:23:55,100
you can do it set a direct set at your

00:23:53,480 --> 00:23:57,080
access and I want to make you can see

00:23:55,100 --> 00:23:58,520
it's a separate one so I don't have to

00:23:57,080 --> 00:24:00,770
give you the ability to modify the key I

00:23:58,520 --> 00:24:02,690
don't have to give you the ability to

00:24:00,770 --> 00:24:04,730
change the permissions mask on the key

00:24:02,690 --> 00:24:06,500
finder say you can invalidate the key

00:24:04,730 --> 00:24:07,670
what's invalidate does is says the

00:24:06,500 --> 00:24:11,570
garbage collector get rid of that

00:24:07,670 --> 00:24:13,460
immediately and then it's gone and it's

00:24:11,570 --> 00:24:15,230
next time so undoes a request for it it

00:24:13,460 --> 00:24:18,830
will then not call again if that's the

00:24:15,230 --> 00:24:23,120
way they do it on to add more

00:24:18,830 --> 00:24:24,770
flexibility to the subjects so at the

00:24:23,120 --> 00:24:28,880
moment you can do it you've got a using

00:24:24,770 --> 00:24:30,950
a user ID and the group ID and whether

00:24:28,880 --> 00:24:33,380
you possess it to a lot I want to be

00:24:30,950 --> 00:24:39,890
able to say that container can access it

00:24:33,380 --> 00:24:41,480
or that program can access it possibly I

00:24:39,890 --> 00:24:44,090
could do this with an explicit ACL I

00:24:41,480 --> 00:24:46,400
have patches to do this but it might be

00:24:44,090 --> 00:24:48,890
better to actually have a kikah the way

00:24:46,400 --> 00:24:51,710
you say this lightly database

00:24:48,890 --> 00:24:55,790
Granta grant this access to that entity

00:24:51,710 --> 00:24:58,070
and then have the ACL built inside the

00:24:55,790 --> 00:25:00,500
kernel possibly so you can't get the ACL

00:24:58,070 --> 00:25:01,820
back out again it just says yes you have

00:25:00,500 --> 00:25:09,290
this access and no you don't have this

00:25:01,820 --> 00:25:12,620
access notifications right I want let's

00:25:09,290 --> 00:25:14,720
make you so you can find out you can

00:25:12,620 --> 00:25:16,570
monitor a keyring and find our key or

00:25:14,720 --> 00:25:20,810
key ring and find out if it changes I

00:25:16,570 --> 00:25:22,700
have this mostly working and the way

00:25:20,810 --> 00:25:24,310
I've done it is a general interface and

00:25:22,700 --> 00:25:26,960
it can be used for watching super blocks

00:25:24,310 --> 00:25:33,920
mounts apology changes keyrings

00:25:26,960 --> 00:25:35,990
anything but as I said I've got it

00:25:33,920 --> 00:25:38,120
watching cute able to watch key rings at

00:25:35,990 --> 00:25:39,560
the moment I'd like to demo that for

00:25:38,120 --> 00:25:42,190
tough cuts compile the patches into my

00:25:39,560 --> 00:25:44,450
test equipments of kill not missing but

00:25:42,190 --> 00:25:46,310
not going to be able to do is fit the

00:25:44,450 --> 00:25:49,070
user keyring as an event collector so

00:25:46,310 --> 00:25:52,160
you say watch that keeping any key that

00:25:49,070 --> 00:25:54,320
gets added to like hearing initially to

00:25:52,160 --> 00:25:57,290
that cueing gets a watch put on it that

00:25:54,320 --> 00:26:00,200
comes back to this keyring so you don't

00:25:57,290 --> 00:26:01,550
have to monitor every single key you

00:26:00,200 --> 00:26:04,790
adds that key ring because it could be

00:26:01,550 --> 00:26:06,860
quite a lot and if the cueing is that we

00:26:04,790 --> 00:26:08,210
four keys deleted or remove that keeping

00:26:06,860 --> 00:26:12,230
the watch goes away on that particular

00:26:08,210 --> 00:26:17,360
key because all these watches take up

00:26:12,230 --> 00:26:20,320
memory to actually record once though is

00:26:17,360 --> 00:26:23,000
make hits I provide you refresh

00:26:20,320 --> 00:26:24,950
notification so you get a notification

00:26:23,000 --> 00:26:27,170
this keys going to expire in 10 seconds

00:26:24,950 --> 00:26:29,540
or 10 minutes or whatever so if it's

00:26:27,170 --> 00:26:31,400
your Kerberos keyring it says by the way

00:26:29,540 --> 00:26:33,410
your killer is keeping music that expire

00:26:31,400 --> 00:26:37,010
your filesystem tokens about to expire

00:26:33,410 --> 00:26:38,390
go and do something about it and then

00:26:37,010 --> 00:26:41,990
nothing to add is just a key change

00:26:38,390 --> 00:26:43,490
count so that you can read so you one of

00:26:41,990 --> 00:26:44,870
the problems with the event venue

00:26:43,490 --> 00:26:48,560
notification making is that you've got a

00:26:44,870 --> 00:26:51,170
fixed size buffer and when the buffers

00:26:48,560 --> 00:26:53,600
fall or it can say to you is something

00:26:51,170 --> 00:26:57,620
happened possibly something happen in

00:26:53,600 --> 00:27:00,020
this particular class so put counts from

00:26:57,620 --> 00:27:05,300
the key that says

00:27:00,020 --> 00:27:09,340
Allah says how how many times has

00:27:05,300 --> 00:27:15,200
changed so you can just go Polo

00:27:09,340 --> 00:27:18,860
namespacing got problems with namespaces

00:27:15,200 --> 00:27:21,470
in that Keys may exist and different be

00:27:18,860 --> 00:27:23,480
used across different namespaces does

00:27:21,470 --> 00:27:25,370
the up calls country done in the root

00:27:23,480 --> 00:27:27,940
namespace shouldn't it be should be done

00:27:25,370 --> 00:27:30,800
in appropriate namespace for a container

00:27:27,940 --> 00:27:33,680
and there are special key rings that's a

00:27:30,800 --> 00:27:35,570
completely global but should be / /

00:27:33,680 --> 00:27:37,070
namespace for instance three of those

00:27:35,570 --> 00:27:41,180
those three there should be a per

00:27:37,070 --> 00:27:42,920
network in its base containers I want

00:27:41,180 --> 00:27:45,920
spell to put a keyring inside a

00:27:42,920 --> 00:27:48,050
container that you can you the container

00:27:45,920 --> 00:27:50,600
manager can use to provide authenticated

00:27:48,050 --> 00:27:52,220
access so the root filesystem

00:27:50,600 --> 00:27:54,620
I know that component file systems

00:27:52,220 --> 00:27:56,060
inside a container without this thing

00:27:54,620 --> 00:27:59,810
inside a container havin to do the

00:27:56,060 --> 00:28:01,790
maintenance of these and also one bit I

00:27:59,810 --> 00:28:04,850
need to be able to ax grant access to

00:28:01,790 --> 00:28:08,840
that container for that key so it's like

00:28:04,850 --> 00:28:10,970
an so you could put authenticated AFS

00:28:08,840 --> 00:28:13,250
authenticated benefits roof answers

00:28:10,970 --> 00:28:15,290
inside your container but the person's

00:28:13,250 --> 00:28:18,080
programs are the container doesn't need

00:28:15,290 --> 00:28:20,330
to do anything about keeping the person

00:28:18,080 --> 00:28:24,470
keeping the token life because it can be

00:28:20,330 --> 00:28:26,210
done from outside any first one should

00:28:24,470 --> 00:28:29,150
make use request keys to look up

00:28:26,210 --> 00:28:30,320
credentials we've got some agreements on

00:28:29,150 --> 00:28:33,920
doing this this is for the container

00:28:30,320 --> 00:28:35,660
thing as well and you can find some

00:28:33,920 --> 00:28:38,660
further information information this

00:28:35,660 --> 00:28:39,920
files in the kernel documentation new

00:28:38,660 --> 00:28:44,270
man of keyrings

00:28:39,920 --> 00:28:48,440
and does it get trees the key utils and

00:28:44,270 --> 00:28:50,860
that's it so we can take a couple of

00:28:48,440 --> 00:28:50,860
quick questions

00:28:56,470 --> 00:29:03,260
thank you thank you very much for this

00:29:00,530 --> 00:29:05,330
presentation that's very good I have one

00:29:03,260 --> 00:29:07,970
question when we are using the first

00:29:05,330 --> 00:29:11,960
platform module to store the keys it's

00:29:07,970 --> 00:29:14,660
stored in the hardware yes so when we

00:29:11,960 --> 00:29:18,290
are using the TPM to store the keys yes

00:29:14,660 --> 00:29:21,680
it is taught in the hardware so if you

00:29:18,290 --> 00:29:24,010
took by the trusted keys yes and also

00:29:21,680 --> 00:29:27,890
the new upcoming stuff esquinas Regina

00:29:24,010 --> 00:29:30,110
you give they took a key blob which the

00:29:27,890 --> 00:29:33,980
TPM then on wraps using a key stored in

00:29:30,110 --> 00:29:36,890
the TPM so Kiki's the key you actually

00:29:33,980 --> 00:29:39,490
extracting isn't stored in the TPM if

00:29:36,890 --> 00:29:43,370
you give it a blob there's a rapt key

00:29:39,490 --> 00:29:46,790
the TPM unwraps it and then attaches

00:29:43,370 --> 00:29:48,890
that to key which you can then use okay

00:29:46,790 --> 00:29:50,720
thinking about the unwrapped key day to

00:29:48,890 --> 00:29:53,000
the crypto data is stored inside the

00:29:50,720 --> 00:29:58,360
kernel and you're not allowed access not

00:29:53,000 --> 00:29:58,360
not allowed direct access okay thank you

00:30:07,660 --> 00:30:16,900
kiona hello are there any intentions for

00:30:12,610 --> 00:30:20,470
key positions across reboot it

00:30:16,900 --> 00:30:26,700
explicitly no okay thank except through

00:30:20,470 --> 00:30:26,700
the TPM something no questions

00:30:32,950 --> 00:30:39,830
thank you for the talk I had a question

00:30:35,930 --> 00:30:45,020
about you fi keys when when you use

00:30:39,830 --> 00:30:48,710
secure boot public keys from the secure

00:30:45,020 --> 00:30:52,430
boot variables are automatically added

00:30:48,710 --> 00:30:54,940
to the clearing in fedora and rail yes

00:30:52,430 --> 00:30:58,280
so it's something which needs to be done

00:30:54,940 --> 00:31:01,370
manually but by the distribution or we

00:30:58,280 --> 00:31:04,970
have patches but trying to get the

00:31:01,370 --> 00:31:08,090
upstream involves lots of argument shall

00:31:04,970 --> 00:31:10,700
we say I'm a human nation stuff security

00:31:08,090 --> 00:31:12,530
people hate it okay

00:31:10,700 --> 00:31:15,940
unfortunately James isn't here otherwise

00:31:12,530 --> 00:31:18,550
you could ask him why James Bottomly

00:31:15,940 --> 00:31:25,150
okay thank you yeah

00:31:18,550 --> 00:31:29,270
and me no me me Haiti's as well right so

00:31:25,150 --> 00:31:32,360
we're gonna be discussing the UEFI keys

00:31:29,270 --> 00:31:35,420
in naina and Tiago we'll be discussing

00:31:32,360 --> 00:31:38,780
it later in their talk as to what we're

00:31:35,420 --> 00:31:41,810
proposing instead of adding them to the

00:31:38,780 --> 00:31:44,030
secondary keyring at the moment they're

00:31:41,810 --> 00:31:46,460
not on the built-in keyring the built-in

00:31:44,030 --> 00:31:51,580
keyring is just for those keys that are

00:31:46,460 --> 00:31:54,680
built in and it's more than Red Hat and

00:31:51,580 --> 00:31:57,980
that's using these keys other distros

00:31:54,680 --> 00:32:02,330
such as sue say I believe is using these

00:31:57,980 --> 00:32:05,000
added stream patches as well what one

00:32:02,330 --> 00:32:07,520
other thing I wanted to add was well

00:32:05,000 --> 00:32:10,160
it's about adding improving access

00:32:07,520 --> 00:32:11,750
controls one of the things I wanted to

00:32:10,160 --> 00:32:14,750
add in that he's also what are the key

00:32:11,750 --> 00:32:17,510
making yes I would say you can use this

00:32:14,750 --> 00:32:20,000
key for that as well as this person can

00:32:17,510 --> 00:32:21,620
use this key so you can say this key can

00:32:20,000 --> 00:32:23,540
only be used for what you're checking

00:32:21,620 --> 00:32:28,720
this key can only be useful from we're

00:32:23,540 --> 00:32:28,720
checking right

00:32:30,010 --> 00:32:33,850
okay so more questions

00:32:34,270 --> 00:32:41,840
remember minimizer running hi any

00:32:39,620 --> 00:32:44,360
thoughts on integrating this with the

00:32:41,840 --> 00:32:46,730
crypto API for example have a crypto API

00:32:44,360 --> 00:32:48,950
set key variant that you give not a key

00:32:46,730 --> 00:32:56,530
but a reference to something in the

00:32:48,950 --> 00:32:56,530
queueing it's has been mentioned before

00:32:58,270 --> 00:33:05,810
one of the things they do at the moment

00:33:01,850 --> 00:33:10,670
a partner trusts encrypted keys

00:33:05,810 --> 00:33:14,990
there is no session key supports really

00:33:10,670 --> 00:33:18,530
in management in the key keyring stuff

00:33:14,990 --> 00:33:21,670
and the crypto API is almost all about

00:33:18,530 --> 00:33:24,580
session keys rather than a symmetric

00:33:21,670 --> 00:33:26,750
symmetric key to on this symmetric keys

00:33:24,580 --> 00:33:29,930
so at the moment the more or less

00:33:26,750 --> 00:33:33,290
orthogonal that I would like to add a

00:33:29,930 --> 00:33:34,490
general asymmetric key handle basically

00:33:33,290 --> 00:33:37,970
if you could then pass through the

00:33:34,490 --> 00:33:44,470
crypto routines if I whatever it's just

00:33:37,970 --> 00:33:46,370
time okay thank you there was a question

00:33:44,470 --> 00:33:48,500
and I think it's gonna be our last

00:33:46,370 --> 00:33:51,110
question because I have to move to the

00:33:48,500 --> 00:33:53,770
next speaker

00:33:51,110 --> 00:33:57,440
my question goes into the same direction

00:33:53,770 --> 00:34:00,260
not only passing a reference to the

00:33:57,440 --> 00:34:06,290
keyring from the keyring to the crypto

00:34:00,260 --> 00:34:08,270
API but also keeping the key and some

00:34:06,290 --> 00:34:10,310
hardware device on some socks and then

00:34:08,270 --> 00:34:12,500
passing a reference to the crypto engine

00:34:10,310 --> 00:34:14,780
so that the crypto engine of the crypto

00:34:12,500 --> 00:34:17,030
API can make use of the hardware engine

00:34:14,780 --> 00:34:19,130
so that the key never has to leave the

00:34:17,030 --> 00:34:22,670
hardware so it's it's about the internal

00:34:19,130 --> 00:34:24,140
crypto stuff right yeah yeah that's one

00:34:22,670 --> 00:34:28,240
of the things I would like to do at some

00:34:24,140 --> 00:34:28,240
point things somewhere on my list

00:34:33,690 --> 00:34:43,440
so they do want to make remark or okay

00:34:44,160 --> 00:34:50,020
even better okay but let's move let's

00:34:47,920 --> 00:34:53,260
find first David for a very good talk

00:34:50,020 --> 00:34:53,260

YouTube URL: https://www.youtube.com/watch?v=KUCwiQZuasA


