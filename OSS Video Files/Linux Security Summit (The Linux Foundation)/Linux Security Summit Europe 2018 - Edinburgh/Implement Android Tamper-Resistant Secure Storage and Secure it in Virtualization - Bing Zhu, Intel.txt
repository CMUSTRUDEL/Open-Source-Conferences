Title: Implement Android Tamper-Resistant Secure Storage and Secure it in Virtualization - Bing Zhu, Intel
Publication date: 2018-10-27
Playlist: Linux Security Summit Europe 2018 - Edinburgh
Description: 
	Implement Android Tamper-Resistant Secure Storage and Secure it in Virtualization - Bing Zhu, Intel CorporationÂ 

Tamper-resistant secure storage is a key feature of Android TEE (Trusted Execution Environment). Typically it is used as critical data (e.g. keys/certificates) storage in IoT system so that malicious software cannot tamper with data even if normal Linux kernel is compromised.

In this talk, Bing will talk about how to implement full software stack of such storage service based on RPMB in eMMC flash device including RPMB key generation and hardware root binding, factory key provisioning, and software interfaces.

Furthermore, in order to enable it in embedded ACRN hypervisor for supporting multiple Linux guest and TEE instances, he will also talk about secure storage virtualization architecture in ACRN including how to create root sub-keys for each guest to encrypt its data for storage confidentiality, how to build a "one-vm, two-world" to protect TEE and how to isolate memory between guest TEE worlds and Hypervisor.

The presentation topic of this project is also contributed by Yang Huang, Tomas Winkler, Yadong Qi, Wei A Deng, Luhai Chen, Eddie Dong, 

About Bing Zhu
Bing Zhu is currently working as software security architect. He has been working at Intel for 12 years with rich experience in security and virtualization areas, including security of processor/chipset, firmware, trusted computing, OS kernel and storage, secure communication protocols, TEE (Trusted Execution Environment) and platform virtualization security. He previously worked as key developer of anti-malware engine for McAfee DeepSafe Technology, recently he is working as software architect for virtualization-based TEE (Trusty) development on x86 platforms, and also as security architect for ACRN hypervisor project (https://projectacrn.org/).
Captions: 
	00:00:01,879 --> 00:00:08,910
okay let's catch that this is last

00:00:06,390 --> 00:00:12,570
clapping of this year and activist

00:00:08,910 --> 00:00:15,780
thank you so much of all of you for

00:00:12,570 --> 00:00:17,990
staying late John my talk and being the

00:00:15,780 --> 00:00:21,869
last topic actually it's not bad because

00:00:17,990 --> 00:00:23,910
many study shows that people tend to you

00:00:21,869 --> 00:00:29,599
know our pretend to remember what came

00:00:23,910 --> 00:00:30,900
first and in order caimans mass so I was

00:00:29,599 --> 00:00:34,710
okay

00:00:30,900 --> 00:00:38,040
my name is pin and pin - my first name

00:00:34,710 --> 00:00:41,280
is Ben and it is easy to memorize

00:00:38,040 --> 00:00:44,969
because Microsoft Rajan he had the same

00:00:41,280 --> 00:00:51,449
name with me I don't know how his name

00:00:44,969 --> 00:00:53,940
and I have been working for Intel for 10

00:00:51,449 --> 00:01:00,989
years and a non part of an just pure

00:00:53,940 --> 00:01:03,570
team and today my topic is about Android

00:01:00,989 --> 00:01:06,479
security is storage and how to

00:01:03,570 --> 00:01:09,960
virtualize the Dean one of project which

00:01:06,479 --> 00:01:11,460
based on automotive a hypervisor and we

00:01:09,960 --> 00:01:13,950
have a lot of contributor for this

00:01:11,460 --> 00:01:17,310
because this is the complicated project

00:01:13,950 --> 00:01:23,909
and actually one of when of guys

00:01:17,310 --> 00:01:27,060
actually Tomas Winkler it's yeah okay

00:01:23,909 --> 00:01:31,650
raise your hand oh yeah okay hey hey

00:01:27,060 --> 00:01:33,659
actually it's expert for the our PMP I

00:01:31,650 --> 00:01:36,780
will talk about later about what is Rp

00:01:33,659 --> 00:01:39,780
it's the the humans Airbnb expert I

00:01:36,780 --> 00:01:45,420
believe he is the first one to try to

00:01:39,780 --> 00:01:51,390
upstream RnB kernel driver to be nine

00:01:45,420 --> 00:01:53,610
Enix common so can you see this so this

00:01:51,390 --> 00:01:57,360
is Regina today and first of all I'm

00:01:53,610 --> 00:01:59,490
going to have a little bit about the

00:01:57,360 --> 00:02:02,040
problem statement and explain why we

00:01:59,490 --> 00:02:06,630
need to build a skill story for Android

00:02:02,040 --> 00:02:08,410
and then I'm going to talk more some

00:02:06,630 --> 00:02:11,510
more details on

00:02:08,410 --> 00:02:16,240
rpm be a Viennese replay protected

00:02:11,510 --> 00:02:18,980
memory block and this is the fundamental

00:02:16,240 --> 00:02:23,319
loyalty to understand how to build a

00:02:18,980 --> 00:02:25,790
secure storage in Android system and

00:02:23,319 --> 00:02:28,640
then I'm going to talk a little bit

00:02:25,790 --> 00:02:31,610
about the secure storage architecture

00:02:28,640 --> 00:02:35,150
and how what it about to look like and

00:02:31,610 --> 00:02:38,270
after that I quickly go through that the

00:02:35,150 --> 00:02:41,630
history of virtualization in hypervisor

00:02:38,270 --> 00:02:46,780
project is for automotive product and

00:02:41,630 --> 00:02:49,550
finally came to conclusions okay so so

00:02:46,780 --> 00:02:52,400
the reason we need a secure storage it's

00:02:49,550 --> 00:02:55,970
actually all about data security and

00:02:52,400 --> 00:02:59,840
privacy so we have cup of example here

00:02:55,970 --> 00:03:01,220
to explain why when you need a diet

00:02:59,840 --> 00:03:04,400
because the first effect on the first

00:03:01,220 --> 00:03:06,890
device is screen everybody has a phone

00:03:04,400 --> 00:03:11,180
right if you if you forget the password

00:03:06,890 --> 00:03:12,290
you may try it again again but probably

00:03:11,180 --> 00:03:15,500
after you five times

00:03:12,290 --> 00:03:15,890
retry you you may need to wait maybe 10

00:03:15,500 --> 00:03:18,079
minutes

00:03:15,890 --> 00:03:24,620
for example then after 10 minutes you

00:03:18,079 --> 00:03:27,829
can try you try to pass it again then if

00:03:24,620 --> 00:03:30,760
it fails then system may need ask you

00:03:27,829 --> 00:03:33,890
wait for one hour or even much longer so

00:03:30,760 --> 00:03:36,739
so actually the implementation behind it

00:03:33,890 --> 00:03:41,150
is this is because that is the time

00:03:36,739 --> 00:03:45,470
delay policy is depends on the attempt

00:03:41,150 --> 00:03:48,170
failed counter so so we need secure

00:03:45,470 --> 00:03:49,670
story to save that counter which means

00:03:48,170 --> 00:03:51,709
that if if someone can change that

00:03:49,670 --> 00:03:56,150
counter then they can keep continue try

00:03:51,709 --> 00:03:58,450
the password until a correct password is

00:03:56,150 --> 00:04:01,940
found right so this is the one of

00:03:58,450 --> 00:04:04,000
requirement for skip screen amok and

00:04:01,940 --> 00:04:07,250
there are some others which did not

00:04:04,000 --> 00:04:10,489
which which will look pretty

00:04:07,250 --> 00:04:13,310
straightforward for example we we need

00:04:10,489 --> 00:04:17,599
storagee and to save the system image

00:04:13,310 --> 00:04:20,079
version so that we can disallow attacker

00:04:17,599 --> 00:04:23,470
to tank where this is an image Oh

00:04:20,079 --> 00:04:25,840
more liberal version right so the other

00:04:23,470 --> 00:04:28,629
uses like that we need a secure serger

00:04:25,840 --> 00:04:31,419
to say with the factory provision in the

00:04:28,629 --> 00:04:34,210
key box like a usage is a content

00:04:31,419 --> 00:04:36,400
protection you need those key box to

00:04:34,210 --> 00:04:39,669
decrypt is the content key so that you

00:04:36,400 --> 00:04:43,840
can play back your movies something like

00:04:39,669 --> 00:04:47,710
that and also for hesitation private

00:04:43,840 --> 00:04:49,719
keys and and for that device has a

00:04:47,710 --> 00:04:52,060
fingerprint you need a secure start to

00:04:49,719 --> 00:04:55,840
save your your the fingerprint image

00:04:52,060 --> 00:04:58,750
data which is called template this is

00:04:55,840 --> 00:05:01,210
not only about security is also about

00:04:58,750 --> 00:05:03,759
privacy because typically the your

00:05:01,210 --> 00:05:08,620
fingerprint template data may be used to

00:05:03,759 --> 00:05:11,560
uniquely identify a person right so so

00:05:08,620 --> 00:05:14,860
this just a couple of reasons and then

00:05:11,560 --> 00:05:16,150
since if you if you are working for

00:05:14,860 --> 00:05:19,889
Android development you will know that

00:05:16,150 --> 00:05:22,960
and your CDD assess needs compatibility

00:05:19,889 --> 00:05:27,580
definition document so if you want to

00:05:22,960 --> 00:05:29,229
get the GMs your Android phone to be

00:05:27,580 --> 00:05:31,690
certified by Google you need to pass the

00:05:29,229 --> 00:05:34,419
minimum requirement defined by is

00:05:31,690 --> 00:05:37,089
document and since from under

00:05:34,419 --> 00:05:41,589
marshmallow this feature it introduced

00:05:37,089 --> 00:05:44,589
so from mouths of the from under now Oh

00:05:41,589 --> 00:05:49,180
Appy this feature actually it's actually

00:05:44,589 --> 00:05:53,710
it's mandated so let's take a look take

00:05:49,180 --> 00:05:56,400
a look more details about the RPM be is

00:05:53,710 --> 00:06:01,270
replay protecting the memory block so

00:05:56,400 --> 00:06:04,779
basically take MMC as examples of if you

00:06:01,270 --> 00:06:09,099
have a MMC there is a small partition

00:06:04,779 --> 00:06:10,900
its which is called rpm B and it's the

00:06:09,099 --> 00:06:14,289
special partition and it is that you

00:06:10,900 --> 00:06:17,710
cannot increase decrease the size as

00:06:14,289 --> 00:06:20,889
long as this um City wise vendor

00:06:17,710 --> 00:06:23,860
manufacturer manufacturer is device so

00:06:20,889 --> 00:06:26,229
typically it is maybe only 2 megabyte or

00:06:23,860 --> 00:06:29,319
format about it is pretty small but

00:06:26,229 --> 00:06:32,190
according to specification it can be it

00:06:29,319 --> 00:06:34,610
could be a 110 a tequila bar 2 from

00:06:32,190 --> 00:06:38,340
into security band apart typically

00:06:34,610 --> 00:06:41,220
actually in our many reference product

00:06:38,340 --> 00:06:46,310
the reference tranform it only for my

00:06:41,220 --> 00:06:49,980
bad so it is it is very pretty small and

00:06:46,310 --> 00:06:52,850
actually this picture there's only one

00:06:49,980 --> 00:06:56,730
RPM imagine but in the latest

00:06:52,850 --> 00:06:59,340
specification like a UF s 3 dot om where

00:06:56,730 --> 00:07:03,780
me based flat storage it can support

00:06:59,340 --> 00:07:08,550
multiple rpm be partition so I will talk

00:07:03,780 --> 00:07:10,550
about this so let's give you a more

00:07:08,550 --> 00:07:15,350
details on this this partition and

00:07:10,550 --> 00:07:18,450
unlike other ordinary partitions

00:07:15,350 --> 00:07:22,230
reliable accesses partition must have

00:07:18,450 --> 00:07:26,250
must need required the syndication key

00:07:22,230 --> 00:07:29,370
and basically if the key is not

00:07:26,250 --> 00:07:33,150
programmed to this device and access

00:07:29,370 --> 00:07:35,130
will fail because the error code

00:07:33,150 --> 00:07:37,050
indicates that the kids not program you

00:07:35,130 --> 00:07:40,860
cannot access it cannot really cannot

00:07:37,050 --> 00:07:43,560
write but as long as you are as long as

00:07:40,860 --> 00:07:46,310
the program this key into the device in

00:07:43,560 --> 00:07:49,790
the factory in a safe in in a safe

00:07:46,310 --> 00:07:51,630
environment and this key cannot be

00:07:49,790 --> 00:07:54,990
changing any more cannot be

00:07:51,630 --> 00:07:57,240
reprogramming it can it's the invisible

00:07:54,990 --> 00:07:58,830
to any software because the hardware

00:07:57,240 --> 00:08:01,860
doesn't provide any interface to allow

00:07:58,830 --> 00:08:07,080
you to change this key or reprogram the

00:08:01,860 --> 00:08:10,380
key or extract this key so so basically

00:08:07,080 --> 00:08:13,020
this key so basically after squeezes the

00:08:10,380 --> 00:08:15,060
program then you can if you have the key

00:08:13,020 --> 00:08:17,700
then you can use that key to to write

00:08:15,060 --> 00:08:20,910
the data I've talked about little

00:08:17,700 --> 00:08:24,510
example for right operation but for

00:08:20,910 --> 00:08:28,230
reader actually the even you don't have

00:08:24,510 --> 00:08:30,630
this key you can still read the data but

00:08:28,230 --> 00:08:34,740
the problem is that you have no way to

00:08:30,630 --> 00:08:37,979
verify whether this data it's it's it's

00:08:34,740 --> 00:08:41,910
modified it's a trip it's a replay data

00:08:37,979 --> 00:08:44,070
anyway so this also means that if you

00:08:41,910 --> 00:08:48,029
have a secret data or keys

00:08:44,070 --> 00:08:51,060
in Iran you must not directly say those

00:08:48,029 --> 00:08:54,269
data in this partition because so you

00:08:51,060 --> 00:08:55,920
must have to encrypt it and that

00:08:54,269 --> 00:08:58,470
encryption is responsible by fast

00:08:55,920 --> 00:09:00,389
suffering so several need to encrypt

00:08:58,470 --> 00:09:04,079
data before sending data to to do this

00:09:00,389 --> 00:09:07,410
partition and apparently it can provide

00:09:04,079 --> 00:09:10,920
a replay protection and for right access

00:09:07,410 --> 00:09:13,380
the the this hardware provided building

00:09:10,920 --> 00:09:15,959
in Montana counter which is used to

00:09:13,380 --> 00:09:19,560
detect the data replay protection and

00:09:15,959 --> 00:09:21,540
for read access because software because

00:09:19,560 --> 00:09:25,259
in read operation software is

00:09:21,540 --> 00:09:27,300
responsible for verifying the data to

00:09:25,259 --> 00:09:34,259
ensure that to check at the data

00:09:27,300 --> 00:09:36,120
freshness so the the software is

00:09:34,259 --> 00:09:38,550
responsible generate random random

00:09:36,120 --> 00:09:42,389
number to you which used to pretend

00:09:38,550 --> 00:09:44,250
provide a replay protection and and now

00:09:42,389 --> 00:09:46,290
basically I'll give you an example how

00:09:44,250 --> 00:09:49,319
it works for syndicated right access and

00:09:46,290 --> 00:09:55,560
how replay protection is applied on this

00:09:49,319 --> 00:09:58,740
partition so so this is suppose that is

00:09:55,560 --> 00:10:02,730
this block the left side it's a MMC hard

00:09:58,740 --> 00:10:05,100
work and it has a data error which is

00:10:02,730 --> 00:10:09,329
the save the data sent by a server and

00:10:05,100 --> 00:10:12,120
it has a beauty in Jamaica engine which

00:10:09,329 --> 00:10:14,940
is used to calculate theta Mike value

00:10:12,120 --> 00:10:19,920
Mac is message a syndication code and it

00:10:14,940 --> 00:10:22,230
has a billion fields OTP registered with

00:10:19,920 --> 00:10:24,990
the one-time program register this this

00:10:22,230 --> 00:10:27,269
register is used to for software the

00:10:24,990 --> 00:10:30,269
program's key in the manufacturer as I

00:10:27,269 --> 00:10:33,839
just talked about before and this key

00:10:30,269 --> 00:10:38,819
can only be program once and I would

00:10:33,839 --> 00:10:40,980
program there's no way to get related

00:10:38,819 --> 00:10:43,589
from software and also has a beauty

00:10:40,980 --> 00:10:46,620
month on counter this counter can only

00:10:43,589 --> 00:10:51,089
be increased by the controller by the

00:10:46,620 --> 00:10:54,230
harbour followed by the each successful

00:10:51,089 --> 00:10:56,430
airplane be right access and you cannot

00:10:54,230 --> 00:10:56,970
decreases counter you cannot change the

00:10:56,430 --> 00:10:59,040
counter

00:10:56,970 --> 00:11:02,459
you cannot I mean you cannot reset

00:10:59,040 --> 00:11:06,480
counter even after power of their power

00:11:02,459 --> 00:11:09,060
cycle so so now they have a software so

00:11:06,480 --> 00:11:12,449
the right side represented service

00:11:09,060 --> 00:11:15,959
sovereign who may want who that may want

00:11:12,449 --> 00:11:19,350
I want to write some arbitrary data to

00:11:15,959 --> 00:11:22,560
this partition then we needed cater

00:11:19,350 --> 00:11:24,629
syndication key ROI so in in the

00:11:22,560 --> 00:11:26,490
implementation actually we can get we

00:11:24,629 --> 00:11:29,519
can't arrive late season occasionally

00:11:26,490 --> 00:11:32,220
from some closet either hardware or

00:11:29,519 --> 00:11:34,050
firmware some Tonetta and basically here

00:11:32,220 --> 00:11:36,779
we assume that this software can

00:11:34,050 --> 00:11:40,560
eradicate this key and this case the

00:11:36,779 --> 00:11:42,000
same key with with the key in the

00:11:40,560 --> 00:11:44,759
hardware that's promised to prevent

00:11:42,000 --> 00:11:47,670
provisioning into hardware and then you

00:11:44,759 --> 00:11:50,939
have the counter this counter actually

00:11:47,670 --> 00:11:53,579
is is the comma is readable so you can

00:11:50,939 --> 00:11:55,709
just reduced counter from hardware

00:11:53,579 --> 00:11:58,550
because this counter is actually it's

00:11:55,709 --> 00:12:01,860
not a secret and then you have the

00:11:58,550 --> 00:12:03,720
software H mega engine then if you want

00:12:01,860 --> 00:12:06,709
to write data Ian you need to prepare

00:12:03,720 --> 00:12:11,759
the data and prepare the metadata like

00:12:06,709 --> 00:12:14,490
the data size and the block address

00:12:11,759 --> 00:12:18,389
which which is the data will be sent to

00:12:14,490 --> 00:12:20,759
then you can concatenate this data with

00:12:18,389 --> 00:12:23,939
the counter then use the syndication key

00:12:20,759 --> 00:12:25,649
to calculate the Mac value we can call

00:12:23,939 --> 00:12:27,600
this Mac messages and occasion color as

00:12:25,649 --> 00:12:29,550
a signature right and then we send a

00:12:27,600 --> 00:12:32,430
whole bunch of data to the the hard

00:12:29,550 --> 00:12:35,040
world and the hardware but we'll extract

00:12:32,430 --> 00:12:38,279
this statement and in the counter and

00:12:35,040 --> 00:12:41,220
and we calculated the signature which is

00:12:38,279 --> 00:12:44,339
the macro value and then we compare this

00:12:41,220 --> 00:12:46,769
state this mac if this if this

00:12:44,339 --> 00:12:48,720
calculated markets match with the mac

00:12:46,769 --> 00:12:50,790
value sent from software than it means

00:12:48,720 --> 00:12:54,180
that the software may have the key right

00:12:50,790 --> 00:12:57,139
and then also need to compare the right

00:12:54,180 --> 00:13:00,209
counter to make sure the content from

00:12:57,139 --> 00:13:03,930
Safra exactly the same counter which is

00:13:00,209 --> 00:13:06,509
really from purely internal counter if

00:13:03,930 --> 00:13:08,330
the counter is not match the data means

00:13:06,509 --> 00:13:14,000
that the data is

00:13:08,330 --> 00:13:16,370
it's fresh so then after after these two

00:13:14,000 --> 00:13:19,700
to values match then the data can be

00:13:16,370 --> 00:13:21,920
right to this partition so this actually

00:13:19,700 --> 00:13:25,580
this is last this is must stop the last

00:13:21,920 --> 00:13:27,470
stop is after the the data its successor

00:13:25,580 --> 00:13:30,310
right to this the arrow the counter here

00:13:27,470 --> 00:13:33,410
will be automatically increased by 1

00:13:30,310 --> 00:13:36,730
which use that for like next writers you

00:13:33,410 --> 00:13:39,500
cannot use a previous data to replay

00:13:36,730 --> 00:13:41,330
attack for example you you replay the

00:13:39,500 --> 00:13:44,210
previous state recorded the previous

00:13:41,330 --> 00:13:47,060
data instead of data I can then the

00:13:44,210 --> 00:13:51,890
counter obviously obviously will

00:13:47,060 --> 00:13:54,970
mismatch so so basically this is how rpm

00:13:51,890 --> 00:13:59,030
B works which is defined by the

00:13:54,970 --> 00:14:03,470
specification for for this for MMC are

00:13:59,030 --> 00:14:07,600
you FS and Mme device so next I'm going

00:14:03,470 --> 00:14:11,830
to talk about the the software

00:14:07,600 --> 00:14:15,050
full-stack I mean how to build is is the

00:14:11,830 --> 00:14:17,750
softest tagged for further to enable

00:14:15,050 --> 00:14:22,160
this RPM be a petition and to build a

00:14:17,750 --> 00:14:26,900
secure storage solution so basically we

00:14:22,160 --> 00:14:30,890
we actually in in these two days many

00:14:26,900 --> 00:14:34,370
people talk about how to protect Linux

00:14:30,890 --> 00:14:36,500
how to secure a meaning supported but

00:14:34,370 --> 00:14:38,900
here I'm assuming that is the the Linux

00:14:36,500 --> 00:14:42,440
and your system is compromised so we

00:14:38,900 --> 00:14:44,000
need to build on TVs security

00:14:42,440 --> 00:14:47,570
environment which is on the right side

00:14:44,000 --> 00:14:49,910
so actually if this is our armed system

00:14:47,570 --> 00:14:52,700
you know that I'm trans do can build can

00:14:49,910 --> 00:14:56,840
support it to word which the seeker will

00:14:52,700 --> 00:15:00,080
announce Pro and in in x86 platform user

00:14:56,840 --> 00:15:04,850
virtualization technology to provide to

00:15:00,080 --> 00:15:06,770
isolate the Qi environment and if you

00:15:04,850 --> 00:15:11,210
look actually this is not something new

00:15:06,770 --> 00:15:12,740
if you look at Windows since Windows 10

00:15:11,210 --> 00:15:15,140
Windows has a beauty in the

00:15:12,740 --> 00:15:17,660
virtualization based security which is

00:15:15,140 --> 00:15:21,089
called VPS which uses exact the same

00:15:17,660 --> 00:15:22,860
architecture so here we we just use the

00:15:21,089 --> 00:15:26,459
chelation to isolate the world but

00:15:22,860 --> 00:15:28,949
actually all the device especially for

00:15:26,459 --> 00:15:32,129
the started device there's they the

00:15:28,949 --> 00:15:34,559
Android Linux kernel owns the whole ad

00:15:32,129 --> 00:15:37,259
we don't know Jeanette and storage here

00:15:34,559 --> 00:15:42,870
we just used a consolidation to isolate

00:15:37,259 --> 00:15:45,930
Network and it and you can see that in

00:15:42,870 --> 00:15:48,829
this block will be trusty T providing

00:15:45,930 --> 00:15:51,839
enough service in there is a cup of

00:15:48,829 --> 00:15:53,939
there are a cup of TAS TAS across the

00:15:51,839 --> 00:15:56,639
application and but actually I'm not

00:15:53,939 --> 00:15:58,259
talking about all of them I just only

00:15:56,639 --> 00:16:01,230
focused on the second you start ETA

00:15:58,259 --> 00:16:03,569
which can provide as previously

00:16:01,230 --> 00:16:06,809
mentioned we have extend occasion key

00:16:03,569 --> 00:16:08,610
right we need we use this severe

00:16:06,809 --> 00:16:11,009
surgical manager that is indication key

00:16:08,610 --> 00:16:14,959
and also we need to provide encryption

00:16:11,009 --> 00:16:20,189
to make sure the data confidentiality so

00:16:14,959 --> 00:16:23,399
so this what secure storage architecture

00:16:20,189 --> 00:16:28,019
looks like and at right side this is

00:16:23,399 --> 00:16:31,139
serious secure storage et ta and it can

00:16:28,019 --> 00:16:34,709
derive the the previous indication key

00:16:31,139 --> 00:16:36,689
and also can get the secure storage

00:16:34,709 --> 00:16:40,889
increase in encryption master key after

00:16:36,689 --> 00:16:43,079
each reboot and and this this two key

00:16:40,889 --> 00:16:45,779
must be protected in the chief solution

00:16:43,079 --> 00:16:48,540
so that Android cannot have this key so

00:16:45,779 --> 00:16:50,970
if I even got the compromised the data

00:16:48,540 --> 00:16:54,059
which is saved intervene in the rtmp

00:16:50,970 --> 00:16:59,040
cannot be cannot be decrypted or cannot

00:16:54,059 --> 00:17:04,709
be stone and we have very actually

00:16:59,040 --> 00:17:06,630
Google implement in this file system a

00:17:04,709 --> 00:17:13,049
secure file system means it occurs

00:17:06,630 --> 00:17:15,779
throughout the TA and we if I want a

00:17:13,049 --> 00:17:17,130
stable data way we use encryption key to

00:17:15,779 --> 00:17:18,600
encrypt data and abusers and

00:17:17,130 --> 00:17:19,500
occasionally to sine theta then the

00:17:18,600 --> 00:17:22,350
sender birthday

00:17:19,500 --> 00:17:25,439
send data over the IPC a communication

00:17:22,350 --> 00:17:29,130
channel to to a proxy in in handle and

00:17:25,439 --> 00:17:30,540
it's proxies and can talk with target to

00:17:29,130 --> 00:17:33,960
our plan B

00:17:30,540 --> 00:17:38,310
words of our team position over the RMB

00:17:33,960 --> 00:17:41,040
driver here the reason is that those are

00:17:38,310 --> 00:17:42,690
actually the MMC devices it's a single

00:17:41,040 --> 00:17:46,020
headed devices which means that this to

00:17:42,690 --> 00:17:48,210
us cannot talk the single device

00:17:46,020 --> 00:17:53,010
simultaneously so we need a proxy here

00:17:48,210 --> 00:17:55,560
to send the data up and and we assume

00:17:53,010 --> 00:17:58,380
that this passage is its own trust

00:17:55,560 --> 00:18:01,170
passed but anyway it because we we have

00:17:58,380 --> 00:18:04,980
we can keep the star encryption key and

00:18:01,170 --> 00:18:08,240
as an occasion can be security so so we

00:18:04,980 --> 00:18:13,550
can make sure the data can be protected

00:18:08,240 --> 00:18:16,560
and I can see that we also have extra

00:18:13,550 --> 00:18:20,160
data flow which send the data to a Linux

00:18:16,560 --> 00:18:20,810
or in any system I will explain why this

00:18:20,160 --> 00:18:25,650
later

00:18:20,810 --> 00:18:30,050
and basically this secure storage can

00:18:25,650 --> 00:18:33,480
provide two different service to the T

00:18:30,050 --> 00:18:35,940
environment system and one the first of

00:18:33,480 --> 00:18:38,580
all it's a temper we caught TP and which

00:18:35,940 --> 00:18:41,220
is a temper proof secure storage as you

00:18:38,580 --> 00:18:46,680
can see in this picture and all the data

00:18:41,220 --> 00:18:49,290
of the encryption I mean including post

00:18:46,680 --> 00:18:52,080
data and fair system metadata and they

00:18:49,290 --> 00:18:55,020
both sent sent to you even to the send

00:18:52,080 --> 00:18:57,420
to our PMD partition so we with those is

00:18:55,020 --> 00:19:00,000
because of two good reasons first wise

00:18:57,420 --> 00:19:05,010
we can provide a much higher level

00:19:00,000 --> 00:19:06,750
secure protection because because if

00:19:05,010 --> 00:19:09,510
attacker doesn't have the key then they

00:19:06,750 --> 00:19:12,570
cannot temper this data right so this is

00:19:09,510 --> 00:19:18,780
what we called temporal temper resistant

00:19:12,570 --> 00:19:21,350
so the another reason is that it is the

00:19:18,780 --> 00:19:25,770
data saved in the our B&B can survived

00:19:21,350 --> 00:19:29,250
from factory reset this is a pretty good

00:19:25,770 --> 00:19:31,860
for the usage like if you have some key

00:19:29,250 --> 00:19:34,710
materials and it's a provision into in

00:19:31,860 --> 00:19:38,160
factory then these are can be this

00:19:34,710 --> 00:19:41,000
service is the best for you right and

00:19:38,160 --> 00:19:43,400
but we have the problem here is that

00:19:41,000 --> 00:19:46,330
besides transcription

00:19:43,400 --> 00:19:49,370
constant because typically the only two

00:19:46,330 --> 00:19:51,830
for megabat it's very small but the most

00:19:49,370 --> 00:19:55,520
of cases if if you only use these four

00:19:51,830 --> 00:19:59,900
key materials as a key material started

00:19:55,520 --> 00:20:03,910
and it's defined because sing about the

00:19:59,900 --> 00:20:07,370
TV I'm actually TV I'm just only have

00:20:03,910 --> 00:20:11,870
maybe said seven knows Caliban it's work

00:20:07,370 --> 00:20:16,960
it's pretty pretty small ladies and so

00:20:11,870 --> 00:20:19,760
to solve this size constant problem we

00:20:16,960 --> 00:20:23,390
provide another service which is called

00:20:19,760 --> 00:20:26,750
temporal detections Authority and as in

00:20:23,390 --> 00:20:28,790
societies the tape we split the data and

00:20:26,750 --> 00:20:32,330
metadata and we stain of data to the

00:20:28,790 --> 00:20:34,340
ordinary later petitioning and God as as

00:20:32,330 --> 00:20:36,350
a mixed origin right

00:20:34,340 --> 00:20:39,290
and what we're saying is the file system

00:20:36,350 --> 00:20:41,030
metadata in the RPM P so in this case we

00:20:39,290 --> 00:20:45,920
we can support a large amount of data

00:20:41,030 --> 00:20:47,990
right and this is very useful like it

00:20:45,920 --> 00:20:51,890
can be used to save your fingerprint

00:20:47,990 --> 00:20:53,690
template data because you feel respect

00:20:51,890 --> 00:20:57,640
the receipt then that all the data will

00:20:53,690 --> 00:21:01,610
become that's fine right and the

00:20:57,640 --> 00:21:03,580
horribly probably also provide actually

00:21:01,610 --> 00:21:08,600
the billion file system provide the

00:21:03,580 --> 00:21:10,370
capability to detect the data for

00:21:08,600 --> 00:21:13,070
example if the data is alternate data

00:21:10,370 --> 00:21:15,710
it's replated and we can detect that the

00:21:13,070 --> 00:21:17,630
data is changing so it's the record

00:21:15,710 --> 00:21:22,880
Tambor detection or sometimes we call

00:21:17,630 --> 00:21:25,390
temporal evidence secure storage so so

00:21:22,880 --> 00:21:29,290
we have already talked about the the

00:21:25,390 --> 00:21:31,850
because lady environment and but now we

00:21:29,290 --> 00:21:34,910
I'm going to talk about the the secured

00:21:31,850 --> 00:21:36,800
started with relation on our run of

00:21:34,910 --> 00:21:41,390
project which is called a con a con it's

00:21:36,800 --> 00:21:45,410
actually is the name of seed of this oak

00:21:41,390 --> 00:21:48,080
tree anyway and this is the open source

00:21:45,410 --> 00:21:51,230
project it's lightweight the hypervisor

00:21:48,080 --> 00:21:52,750
which is build for IOT and automotive

00:21:51,230 --> 00:21:56,570
use

00:21:52,750 --> 00:21:59,020
automotive industry and you can actually

00:21:56,570 --> 00:22:02,480
sit Linux Foundation project you can

00:21:59,020 --> 00:22:04,100
take a look at the details of this is

00:22:02,480 --> 00:22:08,210
our future the other side we can give

00:22:04,100 --> 00:22:09,950
and put here and I just only have a

00:22:08,210 --> 00:22:11,990
quick view of the architecture looks

00:22:09,950 --> 00:22:14,240
like this is the one of the usages there

00:22:11,990 --> 00:22:16,429
there are some other uses you like for

00:22:14,240 --> 00:22:21,080
real node for IOT industry for a real

00:22:16,429 --> 00:22:24,320
mode guest support RTOS support upon

00:22:21,080 --> 00:22:27,230
here we are using for the mode human in

00:22:24,320 --> 00:22:30,530
the you know vehicle actually we may

00:22:27,230 --> 00:22:33,530
have multiple system like the France

00:22:30,530 --> 00:22:35,620
seed you know you will probably have an

00:22:33,530 --> 00:22:38,450
infotainment system the part the back

00:22:35,620 --> 00:22:41,059
seriously that you have entertainment

00:22:38,450 --> 00:22:44,299
system so we can use this rather to

00:22:41,059 --> 00:22:46,820
build a multiple and you're the case VM

00:22:44,299 --> 00:22:49,370
to save the cost because we can use a

00:22:46,820 --> 00:22:54,169
single associate to support multiple OS

00:22:49,370 --> 00:22:58,429
and here the and and in this case we are

00:22:54,169 --> 00:23:01,400
we have services run under the left and

00:22:58,429 --> 00:23:04,880
this is a privilege lower since it's a

00:23:01,400 --> 00:23:06,980
closed system if you can provide the it

00:23:04,880 --> 00:23:10,070
has but has most of native drivers

00:23:06,980 --> 00:23:13,340
including on lower rpm pedrera including

00:23:10,070 --> 00:23:16,940
MMC or uff secures the started drivers

00:23:13,340 --> 00:23:21,350
and can provide device mediation or

00:23:16,940 --> 00:23:25,280
device emulation for the also guest VM

00:23:21,350 --> 00:23:27,410
because all the kids take storage as

00:23:25,280 --> 00:23:33,040
examples a guest will see the virtual

00:23:27,410 --> 00:23:37,250
storage and it can also provide a guest

00:23:33,040 --> 00:23:41,090
user record as the use of iam um you a

00:23:37,250 --> 00:23:46,370
u.s. it can provide a u.s. management

00:23:41,090 --> 00:23:49,130
and since we just with its support and

00:23:46,370 --> 00:23:53,570
on here in so we prepared a similar

00:23:49,130 --> 00:23:57,460
trust execution environment in this on

00:23:53,570 --> 00:24:01,400
top of this hypervisor and we actually

00:23:57,460 --> 00:24:03,840
in this actor that we refer the reduce

00:24:01,400 --> 00:24:07,410
the knife code this man I have

00:24:03,840 --> 00:24:10,280
by introduce a new concept which we call

00:24:07,410 --> 00:24:12,540
one word - sorry one VM to word and

00:24:10,280 --> 00:24:14,970
which basically means that in the high

00:24:12,540 --> 00:24:17,550
weather we only created one single VM

00:24:14,970 --> 00:24:24,150
data structure we but we could to live

00:24:17,550 --> 00:24:27,840
in a virtual CPU context error in order

00:24:24,150 --> 00:24:30,960
for for saving we stopped each word

00:24:27,840 --> 00:24:35,550
virtual CPU state and just like a

00:24:30,960 --> 00:24:38,130
traditional process or thread context

00:24:35,550 --> 00:24:41,070
which in the operating system we call

00:24:38,130 --> 00:24:45,660
this the word context reach because the

00:24:41,070 --> 00:24:49,380
trustee and TE the trustee in the secure

00:24:45,660 --> 00:24:51,450
or was secure of world and the end order

00:24:49,380 --> 00:24:53,760
they are they they are actually is the

00:24:51,450 --> 00:24:56,760
time sharing on the same physical

00:24:53,760 --> 00:25:00,210
processor so we can switch the speech

00:24:56,760 --> 00:25:05,730
bag force between them by save and

00:25:00,210 --> 00:25:08,640
restore the virtual CPU state so so

00:25:05,730 --> 00:25:11,550
let's talk about how how those secure

00:25:08,640 --> 00:25:17,040
storage is virtualized on top of this

00:25:11,550 --> 00:25:19,890
system then you can sorry and you can

00:25:17,040 --> 00:25:22,910
see that we have we have a hypervisor we

00:25:19,890 --> 00:25:27,450
have lady driver which is inside the

00:25:22,910 --> 00:25:29,580
services kono and we have a MMC device

00:25:27,450 --> 00:25:32,690
but simulated with this Tibet has only

00:25:29,580 --> 00:25:38,760
one single or PNP partition right so

00:25:32,690 --> 00:25:40,530
during the boot time we the with sender

00:25:38,760 --> 00:25:41,940
authentication key RPM sent in

00:25:40,530 --> 00:25:44,490
syndication from from were to have

00:25:41,940 --> 00:25:47,460
rather than average over sent to the the

00:25:44,490 --> 00:25:50,280
services kernel so that is the services

00:25:47,460 --> 00:25:53,550
can exist in the face car B&B because

00:25:50,280 --> 00:25:55,830
service can have this key all right

00:25:53,550 --> 00:26:00,030
however for the virtual machines like

00:25:55,830 --> 00:26:03,350
under a VM on the right side they they

00:26:00,030 --> 00:26:06,720
all don't have the the directed physica

00:26:03,350 --> 00:26:10,340
RPM be driver of physical MMC driver to

00:26:06,720 --> 00:26:14,370
access so we we need to build a virtual

00:26:10,340 --> 00:26:15,870
EMP module in in the in this device

00:26:14,370 --> 00:26:17,490
model

00:26:15,870 --> 00:26:19,020
it was modern processor you can imagine

00:26:17,490 --> 00:26:22,140
that it is something like the cue mill

00:26:19,020 --> 00:26:25,740
we don't use the commune because this

00:26:22,140 --> 00:26:29,340
community to to complicate to right and

00:26:25,740 --> 00:26:32,640
it's not a nice and friendly for

00:26:29,340 --> 00:26:33,450
commercial use because someone many of

00:26:32,640 --> 00:26:40,740
the motive

00:26:33,450 --> 00:26:45,210
vendors doesn't want to disclose directs

00:26:40,740 --> 00:26:48,630
Oscar and so we in this virtual virtual

00:26:45,210 --> 00:26:52,650
rpm be module when this model started we

00:26:48,630 --> 00:26:56,660
a generator virtual rpm be key and with

00:26:52,650 --> 00:27:00,330
release handle readies key security to

00:26:56,660 --> 00:27:04,590
the trusty world so that from trusty

00:27:00,330 --> 00:27:07,530
prospect from trustees perspective it

00:27:04,590 --> 00:27:10,310
doesn't care whether this stuff this is

00:27:07,530 --> 00:27:15,060
a Roger kehrt it's physically physically

00:27:10,310 --> 00:27:17,100
it just used use these key as rpms and

00:27:15,060 --> 00:27:21,000
occasionally to talk with the back and

00:27:17,100 --> 00:27:24,390
RPM be emulation module the emulation

00:27:21,000 --> 00:27:26,610
module exactly behave as the the hot the

00:27:24,390 --> 00:27:32,360
behavior of the hardware rpm piquant

00:27:26,610 --> 00:27:35,280
controller so so as the trusty word

00:27:32,360 --> 00:27:37,890
caters indication key then they can it

00:27:35,280 --> 00:27:41,040
can send the data over the proxy and

00:27:37,890 --> 00:27:44,520
then because there is no physical rpm

00:27:41,040 --> 00:27:47,790
bit driver so we need to write a front

00:27:44,520 --> 00:27:52,020
in the rpm be driver and talk with bike

00:27:47,790 --> 00:27:54,510
and rpm be back and rpm be service over

00:27:52,020 --> 00:27:57,090
the virtual il framework and then sends

00:27:54,510 --> 00:27:59,400
the data to to the virtual PMB module

00:27:57,090 --> 00:28:02,820
then the virtually module uses a virtual

00:27:59,400 --> 00:28:04,860
key to verify the data and then extract

00:28:02,820 --> 00:28:07,230
data then send to kernel and the kernel

00:28:04,860 --> 00:28:09,930
will use a physical PMB to sign the data

00:28:07,230 --> 00:28:13,380
and send the data to to eventually to

00:28:09,930 --> 00:28:16,260
face graphing so we we can build those

00:28:13,380 --> 00:28:18,690
whole flow exist and by the way if there

00:28:16,260 --> 00:28:21,390
is a multiple and your start will use a

00:28:18,690 --> 00:28:23,430
different word virtual key here for

00:28:21,390 --> 00:28:26,790
example is the virtual key one another

00:28:23,430 --> 00:28:31,590
one maybe over Turkey to and is key

00:28:26,790 --> 00:28:34,470
can the the I mean this can they are

00:28:31,590 --> 00:28:38,610
different and the ETM cannot each user

00:28:34,470 --> 00:28:41,640
VM cannot see the other p.m. over turkey

00:28:38,610 --> 00:28:44,460
and we have different process isolation

00:28:41,640 --> 00:28:45,990
so that the different processing in the

00:28:44,460 --> 00:28:48,809
service costs we can notice the other

00:28:45,990 --> 00:28:52,429
word okay here so this is the basically

00:28:48,809 --> 00:28:54,780
rpm P virtualization works in this

00:28:52,429 --> 00:28:57,240
hypervisor project in which we can

00:28:54,780 --> 00:29:00,480
support a multiple --android and provide

00:28:57,240 --> 00:29:04,400
a tamper-resistant story for those

00:29:00,480 --> 00:29:07,410
multiple and your has a guess though us

00:29:04,400 --> 00:29:10,200
the weight but still we have a problem

00:29:07,410 --> 00:29:12,690
here ISM as as a previous mention will

00:29:10,200 --> 00:29:16,200
be the security origin alone provide the

00:29:12,690 --> 00:29:19,350
the data sent isset e the integrity and

00:29:16,200 --> 00:29:22,530
also provided confidentiality so so we

00:29:19,350 --> 00:29:25,440
we also need a security encryption key

00:29:22,530 --> 00:29:28,530
here to encrypt data before sending the

00:29:25,440 --> 00:29:30,720
data over the proxy to services right so

00:29:28,530 --> 00:29:34,530
I'll talk about how to generate this

00:29:30,720 --> 00:29:40,890
secure storage key in this system okay

00:29:34,530 --> 00:29:43,470
so this is how it works and the the top

00:29:40,890 --> 00:29:46,080
actually the there is a platform seed

00:29:43,470 --> 00:29:48,660
which is the we called PC this is unique

00:29:46,080 --> 00:29:50,880
per each platform

00:29:48,660 --> 00:29:53,910
this kid spanned to Hardware new key and

00:29:50,880 --> 00:29:55,590
as a firmware jeweler told her from her

00:29:53,910 --> 00:29:59,990
generals is key and Senators k2

00:29:55,590 --> 00:30:03,900
hypervisor and then then when the

00:29:59,990 --> 00:30:06,630
Vanaras is guest VM user horses thought

00:30:03,900 --> 00:30:10,950
that the the hypervisor will derive with

00:30:06,630 --> 00:30:14,880
key and over just you at the user IDs

00:30:10,950 --> 00:30:19,799
user was unified IT and he said is fixed

00:30:14,880 --> 00:30:20,940
as long as secret and we derive this we

00:30:19,799 --> 00:30:25,070
derive a user

00:30:20,940 --> 00:30:31,380
sorry the VM seed for this specific p.m.

00:30:25,070 --> 00:30:33,090
and then we use this this this vm c to

00:30:31,380 --> 00:30:36,000
derive the secure start encryption key

00:30:33,090 --> 00:30:38,269
for Ostrowski so if there is another VN

00:30:36,000 --> 00:30:40,820
start with you will you

00:30:38,269 --> 00:30:44,629
the pan from seed in hybrids arrived

00:30:40,820 --> 00:30:47,119
another different there were VM seed and

00:30:44,629 --> 00:30:49,669
then the album CD can be used to derive

00:30:47,119 --> 00:30:56,239
a different secure star the master key

00:30:49,669 --> 00:30:58,279
here so so in this case we we we can

00:30:56,239 --> 00:31:01,159
isolate the data because even the

00:30:58,279 --> 00:31:04,009
servicers can have the knowledge of the

00:31:01,159 --> 00:31:07,820
physical rpm be driver how physical rpm

00:31:04,009 --> 00:31:10,549
became they it cannot know that the data

00:31:07,820 --> 00:31:14,690
the Playtex data which is encrypted by

00:31:10,549 --> 00:31:17,239
different user VM right because the

00:31:14,690 --> 00:31:18,769
service doesn't know the the plan from

00:31:17,239 --> 00:31:21,469
seed because her brother never seen it

00:31:18,769 --> 00:31:28,249
they proceeded to the planner from city

00:31:21,469 --> 00:31:31,909
to service or us so this how it works to

00:31:28,249 --> 00:31:34,849
make sure the data confidentiality

00:31:31,909 --> 00:31:37,940
protection in this on top of this the

00:31:34,849 --> 00:31:41,419
virtualization system so let's quickly

00:31:37,940 --> 00:31:43,849
come to conclusions and some future

00:31:41,419 --> 00:31:47,719
considerations and especially for

00:31:43,849 --> 00:31:49,369
improvement and now we we we know that

00:31:47,719 --> 00:31:52,639
we can provide temporary system and

00:31:49,369 --> 00:31:54,669
temper evidence secure storage II in

00:31:52,639 --> 00:31:56,719
native and Jordan and in this

00:31:54,669 --> 00:31:59,359
virtualized environment which can

00:31:56,719 --> 00:32:02,659
support multiple Android VM and we also

00:31:59,359 --> 00:32:05,899
can provide data integrity and

00:32:02,659 --> 00:32:10,059
confidentially protection and but for

00:32:05,899 --> 00:32:11,869
replay protection we can achieve that

00:32:10,059 --> 00:32:13,820
obviously for the hit you and your

00:32:11,869 --> 00:32:16,609
partner we have problem for virtual

00:32:13,820 --> 00:32:21,169
Android and in on top of that a con

00:32:16,609 --> 00:32:22,969
adviser because although and it's

00:32:21,169 --> 00:32:24,859
implementing you know close system as

00:32:22,969 --> 00:32:26,989
has no knowledge of secure data

00:32:24,859 --> 00:32:30,619
encryption key for each project and you

00:32:26,989 --> 00:32:34,219
Olivia but as also does has actually RPM

00:32:30,619 --> 00:32:36,679
be it means that the Isis if it's

00:32:34,219 --> 00:32:40,149
compromised it can record the data and

00:32:36,679 --> 00:32:44,659
then replay so the in this case the

00:32:40,149 --> 00:32:48,710
virtual we virtual Android a case that

00:32:44,659 --> 00:32:50,480
doesn't know that right so so this is

00:32:48,710 --> 00:32:53,640
the one of

00:32:50,480 --> 00:32:56,340
because he hasn't been in the future of

00:32:53,640 --> 00:32:57,990
what we need to do that and and by the

00:32:56,340 --> 00:33:02,490
way the entire solution depends on the

00:32:57,990 --> 00:33:04,710
the the the verify boat the team tossed

00:33:02,490 --> 00:33:08,310
because we started firmer and firmer

00:33:04,710 --> 00:33:10,980
that hypervisor and hybrid started

00:33:08,310 --> 00:33:16,190
services and services created device

00:33:10,980 --> 00:33:19,380
module accumulate each multiple each

00:33:16,190 --> 00:33:24,750
under doors so we need a trust chain to

00:33:19,380 --> 00:33:29,040
building in this this flow and for the

00:33:24,750 --> 00:33:33,930
future consider first ones actually as

00:33:29,040 --> 00:33:35,880
we as I mentioned the Nate's yeah yeah

00:33:33,930 --> 00:33:40,200
mmm see you guys I don't think I am say

00:33:35,880 --> 00:33:43,410
we support multiple rpm people ufs since

00:33:40,200 --> 00:33:45,930
from Sri dato now has already supported

00:33:43,410 --> 00:33:48,360
maximum for rpm partitions which means

00:33:45,930 --> 00:33:52,260
that that four partitions can program

00:33:48,360 --> 00:33:56,370
this for different authentication keys

00:33:52,260 --> 00:33:58,980
so if we take this into consideration

00:33:56,370 --> 00:34:00,960
for build virtualization on the

00:33:58,980 --> 00:34:04,830
hypervisor for example we can assign

00:34:00,960 --> 00:34:06,960
each virtual Angelov is a dedicated

00:34:04,830 --> 00:34:11,280
physical can be then in that case we can

00:34:06,960 --> 00:34:15,020
proven our can be replay attack as I

00:34:11,280 --> 00:34:19,260
just pretty summation and we also have

00:34:15,020 --> 00:34:23,070
to do the enhancement for the services

00:34:19,260 --> 00:34:29,540
integrity protection like that okay so

00:34:23,070 --> 00:34:29,540
this so thank you questions

00:34:32,850 --> 00:34:36,240
this isn't actually a question here but

00:34:34,830 --> 00:34:37,919
could we have a round of applause for

00:34:36,240 --> 00:34:39,620
Elena who's been doing such a wonderful

00:34:37,919 --> 00:34:43,000
job doing the MSE

00:34:39,620 --> 00:34:43,000
[Applause]

00:34:45,350 --> 00:34:53,570
now back to your regular questions out

00:34:48,980 --> 00:35:04,160
of order so do we have a question do we

00:34:53,570 --> 00:35:06,020
have questions with speaker sorry for

00:35:04,160 --> 00:35:09,140
the ignorance I'm not familiar with with

00:35:06,020 --> 00:35:10,490
the hypervisor but what kind of trusted

00:35:09,140 --> 00:35:13,750
execution environment we're talking

00:35:10,490 --> 00:35:18,170
about here because is this that car

00:35:13,750 --> 00:35:21,020
under independent or this is txt or some

00:35:18,170 --> 00:35:25,070
other Intel new stuff

00:35:21,020 --> 00:35:28,610
oh this technically this is not

00:35:25,070 --> 00:35:33,250
something new it's just based on the

00:35:28,610 --> 00:35:36,620
virtualization technology so it's use

00:35:33,250 --> 00:35:40,970
VTX which is supported by CPU and also

00:35:36,620 --> 00:35:44,330
use the VTT which is also we call iommu

00:35:40,970 --> 00:35:46,880
provide watch yourself so this currently

00:35:44,330 --> 00:35:49,330
we don't use some new technologies as

00:35:46,880 --> 00:35:53,120
checks some order don't disclose

00:35:49,330 --> 00:35:55,700
technology because this is built for the

00:35:53,120 --> 00:35:58,690
multi product and we pay bill the place

00:35:55,700 --> 00:36:02,510
down alton based the processor because

00:35:58,690 --> 00:36:05,360
those that process when it advanced

00:36:02,510 --> 00:36:09,290
technology actually they are not

00:36:05,360 --> 00:36:11,900
available yet and in that hardware okay

00:36:09,290 --> 00:36:13,300
but but the hypervisor targeting intel

00:36:11,900 --> 00:36:16,340
bad words mm-hmm

00:36:13,300 --> 00:36:19,940
hyper-v hypervisor only targeting Intel

00:36:16,340 --> 00:36:23,740
bottoms sorry what in US isn't is a

00:36:19,940 --> 00:36:23,740
border I'm just OH

00:36:23,750 --> 00:36:28,180
tart targeting into architecture

00:36:38,410 --> 00:36:44,580
okay thanks okay thanks to me more

00:36:42,010 --> 00:36:44,580
questions

00:36:46,680 --> 00:36:52,530
hey listen thank a speaker thank you

00:36:50,830 --> 00:36:55,649
baby

00:36:52,530 --> 00:36:55,649

YouTube URL: https://www.youtube.com/watch?v=H4IbV6en68c


