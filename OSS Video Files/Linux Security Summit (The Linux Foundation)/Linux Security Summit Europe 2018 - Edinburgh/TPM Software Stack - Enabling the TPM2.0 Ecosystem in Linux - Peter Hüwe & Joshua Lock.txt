Title: TPM Software Stack - Enabling the TPM2.0 Ecosystem in Linux - Peter Hüwe & Joshua Lock
Publication date: 2018-10-26
Playlist: Linux Security Summit Europe 2018 - Edinburgh
Description: 
	TPM Software Stack - Enabling the TPM2.0 Ecosystem in Linux - Peter Hüwe, Infineon Technologies AG & Joshua Lock, Intel 

Although the TPM2.0 specification was released in 2014 the TPM2.0 support under Linux used to be mediocre at best - until recently.

We gained initial kernel support with v4.0, enabled embedded devices with v4.9 and included the necessary TPM Ressource Manager just recently.

However just two years ago, the future of TPM2.0 userspace support was quite dark.
A single developer from Intel was working on getting the standardized SAPI layer of the stack into shape,
while more and more other non-standard stacks emerged, all trying to solve the same problem.

Today we have a vibrant open source project supporting the TPM2 Software Stack with contributions from Intel, RedHat, Fraunhofer SIT and Infineon - including the latest addition of the more userfriendly eSAPI and a OpenSSL engine.

This talk gives an overview over the TPM2 Software Stack, its use cases and a small road map update. 

About Peter Huewe
Embedded Security Software Developer @ Infineon Technologies AG developing the next generation of Trusted Platform Modules (TPM) and ePassports.

Currently listed as maintainer for the TPM subsystem (but quite inactive to be honest, since Jarkko is doing an excellent job).

OpenSource and Linux enthusiast for 15+ years - advocating the use and support for open source within my organization.
Projectlead for the Infineon sponsored work on the ESAPI part of the TPM Software Stack in collaboration with Fraunhofer SIT and Intel.

Part-time lecturer @ University of Applied Sciences Augsburg.
Youth Leader @ German Alpine Club 

About Joshua Lock
"Joshua has worked on a variety of open source operating system
efforts at Intel's Open Source Technology Center (and elsewhere).
Most notably he spent many years as a core engineer on the Yocto
Project, where he touched most parts of the project from the
OpenEmbedded Core buildsystem to the Buildbot based CI stack.
Recently he has become involved in the TPM2 Software project where he
co-maintains the tpm2-tools. His past speaking experience includes
the Desktop Summit, Embedded Linux Conference and Yocto Project
Developer Day."
Captions: 
	00:00:00,000 --> 00:00:04,410
and welcome you to our talk about the

00:00:01,949 --> 00:00:06,390
TPMS of this deck we try to enable the

00:00:04,410 --> 00:00:10,110
TPM support or ecosystem only on the

00:00:06,390 --> 00:00:12,030
Linux let's see what so we are more

00:00:10,110 --> 00:00:14,130
covering the user space side only the

00:00:12,030 --> 00:00:15,660
kernel side what we will be talking

00:00:14,130 --> 00:00:17,130
about today is a little bit about the

00:00:15,660 --> 00:00:19,140
background I think we can skip most of

00:00:17,130 --> 00:00:21,720
this to design the architecture of the

00:00:19,140 --> 00:00:25,439
TSS the open source implementation how

00:00:21,720 --> 00:00:27,359
we did get this to successful open

00:00:25,439 --> 00:00:30,240
source project and at the end we will

00:00:27,359 --> 00:00:32,840
show some TPA TPA TSS to use case and

00:00:30,240 --> 00:00:35,520
examples how we can actually use the TSS

00:00:32,840 --> 00:00:37,410
who are we my name is Peter Weaver

00:00:35,520 --> 00:00:39,690
nobody can pronounce that name even

00:00:37,410 --> 00:00:42,629
Jones so don't worry about this

00:00:39,690 --> 00:00:46,559
I pay time I work at Infineon one of the

00:00:42,629 --> 00:00:48,210
major TPM vendors as a senior staff

00:00:46,559 --> 00:00:52,140
engineer so I'm developing four more

00:00:48,210 --> 00:00:54,539
runs on the TPM I used to be

00:00:52,140 --> 00:00:56,550
TPM subsystem maintainer until Chuck who

00:00:54,539 --> 00:00:59,280
took all or took over all the work so

00:00:56,550 --> 00:01:01,050
thank you for that Chuck so that's why

00:00:59,280 --> 00:01:03,449
they retire this year and I'm a

00:01:01,050 --> 00:01:06,150
contributor to the TPM software stack as

00:01:03,449 --> 00:01:08,070
well I'm Joshua I work in Intel's open

00:01:06,150 --> 00:01:09,540
source technology center and been

00:01:08,070 --> 00:01:11,189
working on with TPM software stack for

00:01:09,540 --> 00:01:12,420
about six months and before that I was a

00:01:11,189 --> 00:01:16,049
long time Yuri project it's a

00:01:12,420 --> 00:01:17,549
contributor yeah and our main presenters

00:01:16,049 --> 00:01:19,619
missing today which is more or less

00:01:17,549 --> 00:01:21,240
Philip tricker he gave the same talk

00:01:19,619 --> 00:01:23,580
about it is a software stack at the

00:01:21,240 --> 00:01:26,159
Linux summit in North America but in

00:01:23,580 --> 00:01:28,320
order to present you the same content we

00:01:26,159 --> 00:01:30,150
more or less stole his slides and put it

00:01:28,320 --> 00:01:32,520
into a new format to present it to you

00:01:30,150 --> 00:01:34,320
maybe in a different format yeah so

00:01:32,520 --> 00:01:36,509
thanks a lot to filfil for putting all

00:01:34,320 --> 00:01:38,670
together the slide content so if there

00:01:36,509 --> 00:01:40,560
are any errors it's his mistake if there

00:01:38,670 --> 00:01:44,070
is knowledge is if there are any errors

00:01:40,560 --> 00:01:45,710
it's my mistake and if the if the spider

00:01:44,070 --> 00:01:49,170
good is of course Phil's

00:01:45,710 --> 00:01:52,079
contribution there so thanks a lot so

00:01:49,170 --> 00:01:55,500
who here knows the TPM who has used the

00:01:52,079 --> 00:01:57,420
TPM I think after the previous talk of

00:01:55,500 --> 00:02:00,329
charcoal the most of stuff was already

00:01:57,420 --> 00:02:04,619
covered a few things I definitely want

00:02:00,329 --> 00:02:06,420
to say still if you want to get more

00:02:04,619 --> 00:02:08,069
information about a TPM and how to use

00:02:06,420 --> 00:02:10,709
it and how it works and all that stuff

00:02:08,069 --> 00:02:13,170
I would definitely not recommend reading

00:02:10,709 --> 00:02:13,840
the TPM live respect as you first thing

00:02:13,170 --> 00:02:16,709
to do

00:02:13,840 --> 00:02:18,819
that's a 3,000 pages thing with

00:02:16,709 --> 00:02:21,280
additional specs and additional specs

00:02:18,819 --> 00:02:22,660
and additional specs in donatas so I

00:02:21,280 --> 00:02:25,629
would not really recommend it as a

00:02:22,660 --> 00:02:27,340
beginners lecture Arielle has put up

00:02:25,629 --> 00:02:29,790
some really nice training materials he

00:02:27,340 --> 00:02:32,110
has also wrote a written some nice book

00:02:29,790 --> 00:02:35,019
also something I really want to mention

00:02:32,110 --> 00:02:38,670
is the guys at Google did put up a TPM

00:02:35,019 --> 00:02:42,549
chasing a TPM JavaScript implementation

00:02:38,670 --> 00:02:44,940
which it's not on the solution I would

00:02:42,549 --> 00:02:47,500
have wanted to show it show it to you

00:02:44,940 --> 00:02:51,459
where they explain an interactive

00:02:47,500 --> 00:02:54,160
tutorial how the TPM is made up what the

00:02:51,459 --> 00:02:56,220
different components of a TPM are how we

00:02:54,160 --> 00:02:59,140
can use that and also it's a really cool

00:02:56,220 --> 00:03:00,790
explanation thing that they put up on

00:02:59,140 --> 00:03:02,950
their website there it's on github so

00:03:00,790 --> 00:03:04,510
you can even look at the source code and

00:03:02,950 --> 00:03:07,510
the funny thing is they are actually

00:03:04,510 --> 00:03:09,610
using our TPMS of the stack here and

00:03:07,510 --> 00:03:10,989
also a web base so you can just interact

00:03:09,610 --> 00:03:12,250
with it all through your browser and you

00:03:10,989 --> 00:03:14,290
don't have to install a stack or have a

00:03:12,250 --> 00:03:16,030
TPM or anything start exploring it yeah

00:03:14,290 --> 00:03:18,040
so it's really really pretty cool so a

00:03:16,030 --> 00:03:20,079
big shout out to go to the Google guys

00:03:18,040 --> 00:03:22,329
there so if we are always talking about

00:03:20,079 --> 00:03:23,620
the TPM to software stack I just want to

00:03:22,329 --> 00:03:24,970
make clear what we are talking about

00:03:23,620 --> 00:03:30,730
here

00:03:24,970 --> 00:03:34,630
it's the TPM to software TSS - which

00:03:30,730 --> 00:03:37,440
means TPM to software stack as defined

00:03:34,630 --> 00:03:41,410
by the TCG that's a lot of words for a

00:03:37,440 --> 00:03:44,620
simple TSS stack that's conforming to

00:03:41,410 --> 00:03:47,680
the TCC TCG specifications there are

00:03:44,620 --> 00:03:50,200
others stacks out there who which might

00:03:47,680 --> 00:03:51,730
be conformed to the total TCG spec or

00:03:50,200 --> 00:03:53,829
might not be conformed to the T

00:03:51,730 --> 00:03:56,380
statistic they all have their purpose

00:03:53,829 --> 00:03:58,599
they all have their use cases they are

00:03:56,380 --> 00:04:01,329
all good let the users decide what is

00:03:58,599 --> 00:04:03,489
the best we present here - TCG one

00:04:01,329 --> 00:04:05,859
ordered his cheek compliant one as an

00:04:03,489 --> 00:04:07,180
open source implementation done by a lot

00:04:05,859 --> 00:04:08,190
of companies which we'll talk about

00:04:07,180 --> 00:04:13,450
later

00:04:08,190 --> 00:04:19,269
so how is this design coming up as

00:04:13,450 --> 00:04:21,820
already said the the TSS is based on the

00:04:19,269 --> 00:04:23,800
TCG specifications so there is a big

00:04:21,820 --> 00:04:25,300
specification on how to write the TSS

00:04:23,800 --> 00:04:26,080
that's compliant to the TCG

00:04:25,300 --> 00:04:29,710
specifications

00:04:26,080 --> 00:04:31,479
as in inside of the cheap TCG the

00:04:29,710 --> 00:04:33,250
trusted computing group they are also

00:04:31,479 --> 00:04:35,560
called work groups one work group

00:04:33,250 --> 00:04:38,139
exclusively is exclusively working on

00:04:35,560 --> 00:04:39,370
the TSS design and specification and in

00:04:38,139 --> 00:04:42,159
order to come up with a good

00:04:39,370 --> 00:04:44,289
implementation of a good design of an

00:04:42,159 --> 00:04:46,900
API you of course have to implement an

00:04:44,289 --> 00:04:49,830
API to see whether it's actually fitting

00:04:46,900 --> 00:04:52,689
to use cases and this is how this

00:04:49,830 --> 00:04:54,310
project came about was small as a

00:04:52,689 --> 00:04:56,379
reference implementation that was

00:04:54,310 --> 00:04:58,990
developed along with the specification

00:04:56,379 --> 00:05:00,969
packet ezg so we could try out things in

00:04:58,990 --> 00:05:02,830
code and see whether it worked out or

00:05:00,969 --> 00:05:05,789
not if they worked out we could put it

00:05:02,830 --> 00:05:09,009
into the specification and vice-versa

00:05:05,789 --> 00:05:12,280
this has advantages and this also has

00:05:09,009 --> 00:05:15,340
disadvantages if you have something you

00:05:12,280 --> 00:05:17,349
want to fundamentally change in your

00:05:15,340 --> 00:05:19,539
design you have to change the spec so

00:05:17,349 --> 00:05:22,210
you cannot just simply develop and avoid

00:05:19,539 --> 00:05:24,370
and say hey this is cool you rather have

00:05:22,210 --> 00:05:26,050
to convince the other guys of TCG that

00:05:24,370 --> 00:05:29,860
your idea is really cool and change the

00:05:26,050 --> 00:05:34,539
spec and spec changes are always not so

00:05:29,860 --> 00:05:36,639
fun so the design goal of - TSS

00:05:34,539 --> 00:05:38,229
but the TCG is definitely a lay-up

00:05:36,639 --> 00:05:40,930
design which provides a lot of

00:05:38,229 --> 00:05:44,020
abstraction of course abstraction also

00:05:40,930 --> 00:05:49,240
means a little bit of complexity but

00:05:44,020 --> 00:05:51,520
yeah so so it's more model eyes that you

00:05:49,240 --> 00:05:53,349
have your transport layer completely

00:05:51,520 --> 00:05:57,430
different from your separate from your

00:05:53,349 --> 00:05:59,080
ap eyes so depending on how you use the

00:05:57,430 --> 00:06:00,909
data API is you don't really see whether

00:05:59,080 --> 00:06:03,719
you are talking to a device talking to a

00:06:00,909 --> 00:06:07,270
simulator talking to the TPS on Windows

00:06:03,719 --> 00:06:09,129
you have a lot of flexibility there it

00:06:07,270 --> 00:06:11,110
also allows you both programming models

00:06:09,129 --> 00:06:13,000
you can have synchronous calls or a

00:06:11,110 --> 00:06:15,550
synchronous calls you can do even

00:06:13,000 --> 00:06:18,310
event-driven programming and it's also

00:06:15,550 --> 00:06:22,089
designed that way that destroy that is

00:06:18,310 --> 00:06:25,029
GE or your vendor can impose some same

00:06:22,089 --> 00:06:26,469
defaults but if you are an expert on TPM

00:06:25,029 --> 00:06:29,139
and know every detail and what will

00:06:26,469 --> 00:06:32,589
change something you can easily change

00:06:29,139 --> 00:06:36,819
details so it gives you a fine grain

00:06:32,589 --> 00:06:39,010
control about how the TSS works also as

00:06:36,819 --> 00:06:41,920
with every good API or

00:06:39,010 --> 00:06:44,260
software stack it's layered so we really

00:06:41,920 --> 00:06:50,100
have a lower layer which is smaller less

00:06:44,260 --> 00:06:53,230
for people who are really into pain

00:06:50,100 --> 00:06:56,370
because it's small as a one on one to

00:06:53,230 --> 00:06:59,880
one mapping of TPM commands to a C API

00:06:56,370 --> 00:07:01,630
but you can use it on any kind of

00:06:59,880 --> 00:07:03,100
environments or if you have a really

00:07:01,630 --> 00:07:05,470
constrained environment

00:07:03,100 --> 00:07:08,440
you only need early Lipsy and you can

00:07:05,470 --> 00:07:10,030
talk to the TPM if you want to and on

00:07:08,440 --> 00:07:12,820
top of that we add more and more layers

00:07:10,030 --> 00:07:14,650
to make it more and more easy for that

00:07:12,820 --> 00:07:16,780
for the users to write their

00:07:14,650 --> 00:07:19,510
applications but of course the more

00:07:16,780 --> 00:07:21,250
common the more comfort you get the more

00:07:19,510 --> 00:07:24,310
dependencies you pull into your system

00:07:21,250 --> 00:07:25,990
so for the upper layers you for example

00:07:24,310 --> 00:07:27,910
need to have a crypto library installed

00:07:25,990 --> 00:07:31,960
on your system which might be hard on

00:07:27,910 --> 00:07:34,030
some on on certain microcontrollers this

00:07:31,960 --> 00:07:36,520
is the architecture design as defined by

00:07:34,030 --> 00:07:40,120
the t's G it's smaller simply rip off or

00:07:36,520 --> 00:07:41,560
out of the spec grids again to philip

00:07:40,120 --> 00:07:43,330
trigger for pulling it out of the spec

00:07:41,560 --> 00:07:45,850
so i did not even have to look it up

00:07:43,330 --> 00:07:47,800
into the spec which is great but it

00:07:45,850 --> 00:07:50,650
shows a little bit how does the holy

00:07:47,800 --> 00:07:52,150
signs layered at the bottom we see the

00:07:50,650 --> 00:07:54,760
TPM device driver which is not

00:07:52,150 --> 00:07:57,430
standardized by the TCG so we can do

00:07:54,760 --> 00:08:00,010
there whatever we want it can be

00:07:57,430 --> 00:08:04,540
anything it can be a simulator it can be

00:08:00,010 --> 00:08:06,040
the DEF TPM 0 it can be the TP a TBS on

00:08:04,540 --> 00:08:07,900
the windows or can be something

00:08:06,040 --> 00:08:10,570
completely different it's not really

00:08:07,900 --> 00:08:12,310
standardized there on top of that we

00:08:10,570 --> 00:08:15,190
have the TPM access broker and resource

00:08:12,310 --> 00:08:19,930
manager that part is more or less

00:08:15,190 --> 00:08:22,060
standardized by the TCG and it gives

00:08:19,930 --> 00:08:24,550
some flexibility around limitations the

00:08:22,060 --> 00:08:27,040
TPM has a TPM is a real resource

00:08:24,550 --> 00:08:28,960
constraint system you have someone so

00:08:27,040 --> 00:08:31,660
many key slots and if you want to have

00:08:28,960 --> 00:08:34,479
more than these keys law Keys available

00:08:31,660 --> 00:08:37,630
somebody has to pull the key out secured

00:08:34,479 --> 00:08:39,669
story stored securely put in the new key

00:08:37,630 --> 00:08:42,099
in and handle all that stuff for you

00:08:39,669 --> 00:08:43,780
that is part of the access pro/con

00:08:42,099 --> 00:08:45,850
resource manager it

00:08:43,780 --> 00:08:48,490
currently lives partially in the kernel

00:08:45,850 --> 00:08:49,480
and you can have if you want also a user

00:08:48,490 --> 00:08:52,520
space

00:08:49,480 --> 00:08:55,260
resource manager which we work happily

00:08:52,520 --> 00:08:57,390
then as I already mentioned the

00:08:55,260 --> 00:08:58,680
transport layer is separated from

00:08:57,390 --> 00:09:01,980
everything else this is the so-called

00:08:58,680 --> 00:09:06,980
TCG I TPM c'mon transmission interface

00:09:01,980 --> 00:09:09,660
TCG abbreviations are always interesting

00:09:06,980 --> 00:09:12,000
but that's probably a part of every

00:09:09,660 --> 00:09:14,310
standardisation organization but it's a

00:09:12,000 --> 00:09:16,500
really cool feature that it definitely

00:09:14,310 --> 00:09:19,800
separates your transport layer form the

00:09:16,500 --> 00:09:22,380
upper API layers and you can even stack

00:09:19,800 --> 00:09:23,940
these DCI layers on top of each other so

00:09:22,380 --> 00:09:26,279
what are you talking to the access

00:09:23,940 --> 00:09:28,529
broker or directly through to the device

00:09:26,279 --> 00:09:32,010
you can stack these on top of each other

00:09:28,529 --> 00:09:35,880
and then at an upper layer we see here

00:09:32,010 --> 00:09:38,310
three api's or API levels as specified

00:09:35,880 --> 00:09:41,310
by the TCG on the left hand side we have

00:09:38,310 --> 00:09:46,020
the system API which is really an expert

00:09:41,310 --> 00:09:50,360
layer which is really only a mapping of

00:09:46,020 --> 00:09:53,430
or one-to-one mapping of TPM commands to

00:09:50,360 --> 00:09:57,200
TSS commands so if you want to do a TPM

00:09:53,430 --> 00:10:00,540
to get random yeah you call a TPS s

00:09:57,200 --> 00:10:03,839
underscore sis underscore get random so

00:10:00,540 --> 00:10:06,240
that's all it provides there so it it

00:10:03,839 --> 00:10:09,089
allows you to call TPM functionality

00:10:06,240 --> 00:10:11,970
with from a C wrapper but apart from

00:10:09,089 --> 00:10:14,220
that it really does not do that much

00:10:11,970 --> 00:10:16,160
more it does some housekeeping but

00:10:14,220 --> 00:10:19,200
generally it's really an expert level

00:10:16,160 --> 00:10:21,959
API but you have to have it in order to

00:10:19,200 --> 00:10:23,610
enable certain use cases it's not

00:10:21,959 --> 00:10:25,920
dependent on any crypto so if you want

00:10:23,610 --> 00:10:27,180
to do some it make a session out in the

00:10:25,920 --> 00:10:29,670
authentication you have to do it

00:10:27,180 --> 00:10:31,350
yourself which is of course painful but

00:10:29,670 --> 00:10:34,650
if you don't have a crypto library you

00:10:31,350 --> 00:10:37,380
might be glad on top of that there's the

00:10:34,650 --> 00:10:40,500
enhance system API which as the name

00:10:37,380 --> 00:10:43,410
says enhances the system API it provides

00:10:40,500 --> 00:10:45,810
some comfort wrapper around it it helps

00:10:43,410 --> 00:10:48,329
you to automatically encrypt a few

00:10:45,810 --> 00:10:51,779
sessions encrypted it keeps track of

00:10:48,329 --> 00:10:54,630
your sessions you can easily exchange

00:10:51,779 --> 00:10:57,450
the TCG eyes and all that stuff but of

00:10:54,630 --> 00:11:00,120
course there you start to have some mail

00:10:57,450 --> 00:11:02,190
of course because allocates a memory for

00:11:00,120 --> 00:11:04,680
you you have to dependency on the crypto

00:11:02,190 --> 00:11:08,519
library so it gets a little bit more

00:11:04,680 --> 00:11:10,519
and on right inside the gray box great

00:11:08,519 --> 00:11:13,860
because it's not yet ready is the far P

00:11:10,519 --> 00:11:17,279
F stands here not for future but rather

00:11:13,860 --> 00:11:19,319
for future but it's still not ready yet

00:11:17,279 --> 00:11:24,990
the TCG is currently in the process of

00:11:19,319 --> 00:11:28,100
standardizing this API level which is a

00:11:24,990 --> 00:11:33,240
really high abstraction layer so so if

00:11:28,100 --> 00:11:36,809
my TP if my use case in sarpy is like

00:11:33,240 --> 00:11:39,540
three pages long it's one page in SRP

00:11:36,809 --> 00:11:41,790
and in fact it would be like three lines

00:11:39,540 --> 00:11:44,730
so that that's that the level you get

00:11:41,790 --> 00:11:48,660
there but of course it's not yet ready

00:11:44,730 --> 00:11:52,199
yet so I think maybe in about one year

00:11:48,660 --> 00:11:55,019
there will be some implementations or at

00:11:52,199 --> 00:11:56,610
least first drafts available and as I

00:11:55,019 --> 00:11:58,230
said this is the this is the problem if

00:11:56,610 --> 00:12:00,119
you're working with a standardization

00:11:58,230 --> 00:12:01,740
body you cannot simply implement

00:12:00,119 --> 00:12:04,589
something and say hey this is it this is

00:12:01,740 --> 00:12:05,819
it this is it this is it but rather you

00:12:04,589 --> 00:12:07,470
have to wait and work on the

00:12:05,819 --> 00:12:09,120
specification first in order to

00:12:07,470 --> 00:12:11,100
implement your code there's a little bit

00:12:09,120 --> 00:12:13,649
tricky there but yeah we will get there

00:12:11,100 --> 00:12:17,309
eventually and when once we have feature

00:12:13,649 --> 00:12:20,220
API I think it will be quite cool if you

00:12:17,309 --> 00:12:22,559
google for a feature API you will find a

00:12:20,220 --> 00:12:25,860
document you will find a draft document

00:12:22,559 --> 00:12:27,540
I guess from 2014 but I would not

00:12:25,860 --> 00:12:30,059
recommend reading it because it's

00:12:27,540 --> 00:12:32,910
definitely statement super outdated it

00:12:30,059 --> 00:12:36,149
will not bear any resemblance to the

00:12:32,910 --> 00:12:39,629
final feature API specification so

00:12:36,149 --> 00:12:42,929
that's a word of warning yeah how did we

00:12:39,629 --> 00:12:45,809
implement that so we have the system API

00:12:42,929 --> 00:12:49,470
again expert level thing want one

00:12:45,809 --> 00:12:53,129
mapping of TPM commands we use for this

00:12:49,470 --> 00:12:57,720
the so called lip TSS sous-sous for

00:12:53,129 --> 00:12:59,819
system API creative naming there which

00:12:57,720 --> 00:13:01,379
smallest translates the C types to TPM

00:12:59,819 --> 00:13:04,410
commands and backwards so it's really

00:13:01,379 --> 00:13:06,299
really easy you can use that on

00:13:04,410 --> 00:13:08,339
microcontrollers we at Infineon have

00:13:06,299 --> 00:13:11,129
examples available for our Oryx and X

00:13:08,339 --> 00:13:13,799
and C microcontrollers if you want to

00:13:11,129 --> 00:13:15,990
fit that on Arduino you can actually do

00:13:13,799 --> 00:13:18,480
that we did that as a proof of concept

00:13:15,990 --> 00:13:20,350
so the TSS can

00:13:18,480 --> 00:13:21,790
can walk on another you know

00:13:20,350 --> 00:13:24,459
microcontroller which is really really

00:13:21,790 --> 00:13:26,350
constructive really really constrained

00:13:24,459 --> 00:13:29,440
environment because we have a few

00:13:26,350 --> 00:13:31,720
megabytes and not really much horsepower

00:13:29,440 --> 00:13:36,130
there but you can attach a TPM to an

00:13:31,720 --> 00:13:38,920
Arduino if you want in order to to talk

00:13:36,130 --> 00:13:42,130
to TTT p.m. we also have the type

00:13:38,920 --> 00:13:45,130
marshalling lair therefore you have to

00:13:42,130 --> 00:13:47,680
know that the TPM sends more less

00:13:45,130 --> 00:13:50,019
compressed or Marshall data over the

00:13:47,680 --> 00:13:52,449
wire so in order to save some bytes here

00:13:50,019 --> 00:13:54,130
and there they compress data structures

00:13:52,449 --> 00:13:57,399
and send it in a more or less compressed

00:13:54,130 --> 00:13:59,440
form over the wire for for much simpler

00:13:57,399 --> 00:14:02,019
use we have that lib TS as mu and

00:13:59,440 --> 00:14:05,260
usually stands for marshalling unmarshal

00:14:02,019 --> 00:14:09,209
e which translates these compressed data

00:14:05,260 --> 00:14:13,029
back into consumable C data structures

00:14:09,209 --> 00:14:17,949
then the the enhance system API which

00:14:13,029 --> 00:14:19,990
was added in about April this year it's

00:14:17,949 --> 00:14:23,709
one of the bigger contributions

00:14:19,990 --> 00:14:27,310
contributions to the TSS deck in our

00:14:23,709 --> 00:14:29,199
case it as you can see I don't know it

00:14:27,310 --> 00:14:32,199
builds on top on top of our sis layer

00:14:29,199 --> 00:14:35,230
and the TPM mu the TPM does not mandate

00:14:32,199 --> 00:14:38,260
that you are reusing your own code but

00:14:35,230 --> 00:14:40,269
of course it makes sense to reuse lower

00:14:38,260 --> 00:14:44,560
layers otherwise you would simply just

00:14:40,269 --> 00:14:48,339
reinvent the wheel it also exposes all

00:14:44,560 --> 00:14:51,100
the TPM functionality so nothing much

00:14:48,339 --> 00:14:52,720
changed yeah but a bit but a big change

00:14:51,100 --> 00:14:54,640
there is that it takes care of your

00:14:52,720 --> 00:14:56,410
sessions and encryption of the sessions

00:14:54,640 --> 00:14:59,110
and this is really really helpful

00:14:56,410 --> 00:15:01,329
because you don't have to write a lot of

00:14:59,110 --> 00:15:03,699
boilerplate code again and again and

00:15:01,329 --> 00:15:06,250
again again for each command you simply

00:15:03,699 --> 00:15:08,350
say I want to have that command open my

00:15:06,250 --> 00:15:10,300
possession first and then you just pass

00:15:08,350 --> 00:15:12,220
an assessment session handle for the

00:15:10,300 --> 00:15:14,800
rest of your application and the session

00:15:12,220 --> 00:15:17,050
is carried over from command and in such

00:15:14,800 --> 00:15:19,600
as sessions are encrypted so you can

00:15:17,050 --> 00:15:21,250
have X or year at the F there you are

00:15:19,600 --> 00:15:23,800
actually protected against the TPM

00:15:21,250 --> 00:15:27,010
Chinese stuff so that's quite good there

00:15:23,800 --> 00:15:28,810
but of course again as I said you have

00:15:27,010 --> 00:15:30,900
to have crypto library some crypt

00:15:28,810 --> 00:15:33,029
alivers have seen interfaces some

00:15:30,900 --> 00:15:35,610
don't have a sign interface so it's a

00:15:33,029 --> 00:15:37,920
really really interesting topic to have

00:15:35,610 --> 00:15:41,610
to have the cryptid do dependency there

00:15:37,920 --> 00:15:43,380
and yeah I'm really proud to say that

00:15:41,610 --> 00:15:45,930
this was this work was actually

00:15:43,380 --> 00:15:49,730
sponsored by by my company and carried

00:15:45,930 --> 00:15:53,040
out by from over Ron offers research

00:15:49,730 --> 00:15:56,850
organization in Germany they had their

00:15:53,040 --> 00:15:59,250
own TSS implementation already ready

00:15:56,850 --> 00:16:01,200
their own proprietary and we took we're

00:15:59,250 --> 00:16:03,510
together with Intel talked talked to

00:16:01,200 --> 00:16:05,580
them and said what can we do to open up

00:16:03,510 --> 00:16:09,390
your SRP implementation and paste it

00:16:05,580 --> 00:16:14,010
onto the Intel stack and that's it yeah

00:16:09,390 --> 00:16:17,850
pay us some money so we did and with

00:16:14,010 --> 00:16:21,480
that addition of the SRP more or less

00:16:17,850 --> 00:16:23,910
the the usability of the TSS deck as we

00:16:21,480 --> 00:16:26,279
know it began because with this RP it's

00:16:23,910 --> 00:16:30,150
really a pain to write applications

00:16:26,279 --> 00:16:31,260
I think Joshua can can can comment on

00:16:30,150 --> 00:16:34,710
that

00:16:31,260 --> 00:16:36,839
with the SRP it gets really ok it's not

00:16:34,710 --> 00:16:39,540
not super easy you still have to know a

00:16:36,839 --> 00:16:42,390
lot about the TPM but it gets to a level

00:16:39,540 --> 00:16:44,220
where we intermediate developer can do

00:16:42,390 --> 00:16:48,360
some really good stuff within a short

00:16:44,220 --> 00:16:50,339
amount of time so this was also greeted

00:16:48,360 --> 00:16:52,440
by by internal and open source community

00:16:50,339 --> 00:16:55,350
quite a lot that we added at SRP layer

00:16:52,440 --> 00:16:59,100
because if you want currently want to

00:16:55,350 --> 00:17:02,880
write an implication please have a look

00:16:59,100 --> 00:17:10,020
at a lip TSS eases not below unless you

00:17:02,880 --> 00:17:12,480
are into pain so yeah and with the

00:17:10,020 --> 00:17:17,280
addition of the author of the Fraunhofer

00:17:12,480 --> 00:17:19,350
stack we also the whole community thing

00:17:17,280 --> 00:17:20,720
started to kick off but I will come to

00:17:19,350 --> 00:17:25,170
that later

00:17:20,720 --> 00:17:26,819
so yeah the one of the lower level one

00:17:25,170 --> 00:17:28,850
of the lower layer pieces of the statute

00:17:26,819 --> 00:17:31,020
ECT high implementation which is

00:17:28,850 --> 00:17:34,110
effectively the IPC or transport layer

00:17:31,020 --> 00:17:36,000
and it's nice if it's abstracted out in

00:17:34,110 --> 00:17:39,110
respect because it means that you can

00:17:36,000 --> 00:17:42,760
support TPMS remote devices simulators

00:17:39,110 --> 00:17:45,540
and that's all I've structured away

00:17:42,760 --> 00:17:47,980
in your implementation it's fairly I

00:17:45,540 --> 00:17:50,310
think in open-source circles it's fairly

00:17:47,980 --> 00:17:51,940
standard that we have decent

00:17:50,310 --> 00:17:56,920
abstractions at different layers of the

00:17:51,940 --> 00:17:59,140
system but in some proprietary stacks

00:17:56,920 --> 00:18:01,360
that's not necessarily the way they're

00:17:59,140 --> 00:18:02,710
designed so the spec sort of encourages

00:18:01,360 --> 00:18:05,530
that implementation which is always good

00:18:02,710 --> 00:18:08,320
we've got a reasonable amount of TCG I'm

00:18:05,530 --> 00:18:10,390
commentating Xin in our tsf stack

00:18:08,320 --> 00:18:11,940
nowadays we can talk straight to the

00:18:10,390 --> 00:18:15,190
device we've got we can talk to our

00:18:11,940 --> 00:18:17,680
access program resource manager we've

00:18:15,190 --> 00:18:21,580
just had a contribution to add support

00:18:17,680 --> 00:18:24,120
for Windows TBS which amazed me how easy

00:18:21,580 --> 00:18:27,640
it was to add that to our stack which is

00:18:24,120 --> 00:18:30,040
really a complement to the way the specs

00:18:27,640 --> 00:18:32,380
designed and the way the software SEC

00:18:30,040 --> 00:18:34,300
has been implemented thus far Facebook

00:18:32,380 --> 00:18:36,610
came along and dropped like a 650 line

00:18:34,300 --> 00:18:38,770
patch on the project and now we can

00:18:36,610 --> 00:18:41,020
build our stack that was designed for

00:18:38,770 --> 00:18:44,710
Linux on Windows and use it against the

00:18:41,020 --> 00:18:46,150
TBS which is approximately equivalent to

00:18:44,710 --> 00:18:46,620
our resource manager or an access broker

00:18:46,150 --> 00:18:49,960
daemon

00:18:46,620 --> 00:18:52,510
so that's really great we've also got a

00:18:49,960 --> 00:18:54,210
TC ti that's just being developed by

00:18:52,510 --> 00:18:58,330
Phillip who's been mentioned a few times

00:18:54,210 --> 00:19:03,390
so that you can use the Safi from inside

00:18:58,330 --> 00:19:06,490
a UEFI application so the UEFI spec has

00:19:03,390 --> 00:19:09,730
some TPM functions I think it's got like

00:19:06,490 --> 00:19:12,130
three three or four API functions for

00:19:09,730 --> 00:19:15,790
interacting with the TPM but it's fairly

00:19:12,130 --> 00:19:18,550
restricted so this this new to CTR

00:19:15,790 --> 00:19:21,760
enables you to use the four TSS inside

00:19:18,550 --> 00:19:23,440
you Eric UEFI and it's probably one of

00:19:21,760 --> 00:19:24,760
the best use cases for something like

00:19:23,440 --> 00:19:26,320
this are you rather than using their

00:19:24,760 --> 00:19:29,920
he's happy which piece I was just

00:19:26,320 --> 00:19:34,600
talking about and so just on the topic

00:19:29,920 --> 00:19:36,810
of resource management and as we've has

00:19:34,600 --> 00:19:39,610
been mentioned a few times a TPM is a

00:19:36,810 --> 00:19:41,050
very resource constrained it's small

00:19:39,610 --> 00:19:44,110
it's got relatively little RAM it

00:19:41,050 --> 00:19:48,790
doesn't have much space for non-volatile

00:19:44,110 --> 00:19:49,810
storage so there's a requirement to do

00:19:48,790 --> 00:19:52,990
resource management and the

00:19:49,810 --> 00:19:56,120
specification has these three functions

00:19:52,990 --> 00:19:59,450
for loading saving and flushing

00:19:56,120 --> 00:20:00,950
objects from the TPM we have a userspace

00:19:59,450 --> 00:20:03,620
implementation of a resource manager

00:20:00,950 --> 00:20:06,560
that can handle these tasks but we are

00:20:03,620 --> 00:20:09,260
working with chemical unity to push more

00:20:06,560 --> 00:20:11,440
of that into the kernel proper so that

00:20:09,260 --> 00:20:13,700
we do resource management in the kernel

00:20:11,440 --> 00:20:15,050
but the the additional thing that this

00:20:13,700 --> 00:20:18,440
demon adds which is it part of the

00:20:15,050 --> 00:20:20,990
specification is that it does access

00:20:18,440 --> 00:20:26,390
brokering so TPM has absolutely no

00:20:20,990 --> 00:20:28,190
notion of users or isolation of you know

00:20:26,390 --> 00:20:30,740
the the objects that you're storing in

00:20:28,190 --> 00:20:34,330
the TPM so this specification is for

00:20:30,740 --> 00:20:39,010
part of a software stack to implement

00:20:34,330 --> 00:20:43,010
you know some of the protections that we

00:20:39,010 --> 00:20:47,210
sort of expect in a standard most secure

00:20:43,010 --> 00:20:48,680
operational environment so I don't yeah

00:20:47,210 --> 00:20:50,240
that's probably always going to require

00:20:48,680 --> 00:20:51,530
a user space component but the resource

00:20:50,240 --> 00:20:53,810
management is moving into the kernel so

00:20:51,530 --> 00:20:57,620
if you've got a recent I think it's like

00:20:53,810 --> 00:20:59,920
414 maybe kernel and you get you can you

00:20:57,620 --> 00:21:01,850
don't need they no longer need this

00:20:59,920 --> 00:21:02,960
demon component this user-space

00:21:01,850 --> 00:21:04,850
component if you don't you want the

00:21:02,960 --> 00:21:06,980
resource management aspects which is

00:21:04,850 --> 00:21:09,230
pretty good for some of them are

00:21:06,980 --> 00:21:10,610
lightweight use cases for a general

00:21:09,230 --> 00:21:12,260
purpose operating system Linux desktop

00:21:10,610 --> 00:21:14,990
and you probably want to have the user

00:21:12,260 --> 00:21:19,040
space daemon because it introduces the

00:21:14,990 --> 00:21:20,890
access brokering but otherwise pushing

00:21:19,040 --> 00:21:24,770
my resource management into the kernel

00:21:20,890 --> 00:21:31,340
yeah so let's have a look at how we got

00:21:24,770 --> 00:21:34,610
here because yeah when I first looked at

00:21:31,340 --> 00:21:38,450
the TSS project back then referred to as

00:21:34,610 --> 00:21:41,420
the internal TSS stack it was a mess and

00:21:38,450 --> 00:21:43,790
I talked to Phillip who then picked it

00:21:41,420 --> 00:21:45,890
up I met him at one of the conferences

00:21:43,790 --> 00:21:49,340
here he was sitting in the in in the

00:21:45,890 --> 00:21:51,020
edge of the room he told a little bit

00:21:49,340 --> 00:21:54,560
about this project and how he came about

00:21:51,020 --> 00:21:56,840
to it more or less all you had to Intel

00:21:54,560 --> 00:21:59,420
all the other former maintenance of the

00:21:56,840 --> 00:22:01,280
stack left Intel at the same time so

00:21:59,420 --> 00:22:03,830
there was nobody to ask nobody to care

00:22:01,280 --> 00:22:06,500
and yeah one of his bosses came up to

00:22:03,830 --> 00:22:08,630
him and said do you do you need to prove

00:22:06,500 --> 00:22:11,940
new new new tasks and he said yeah

00:22:08,630 --> 00:22:14,010
choose one he said him that his tech

00:22:11,940 --> 00:22:15,929
looks nice then his boss asked him do

00:22:14,010 --> 00:22:21,540
you really want to have a look at that

00:22:15,929 --> 00:22:23,520
and he said yeah I like it so yeah so he

00:22:21,540 --> 00:22:25,590
really describes it as a really messy

00:22:23,520 --> 00:22:28,200
situation back then and it actually was

00:22:25,590 --> 00:22:32,309
if you look at the first commits back

00:22:28,200 --> 00:22:34,950
then the implementation was not

00:22:32,309 --> 00:22:38,040
structured it was not maintainable it

00:22:34,950 --> 00:22:40,950
was really crappy to say not to blame

00:22:38,040 --> 00:22:44,429
but yeah it's it's it's it was not not

00:22:40,950 --> 00:22:47,460
high quality it was a single make file

00:22:44,429 --> 00:22:49,440
based project so portability was really

00:22:47,460 --> 00:22:53,010
an issue there were a lot of stuff in

00:22:49,440 --> 00:22:56,700
there that was simply not maintainable

00:22:53,010 --> 00:22:59,820
and this were the first task Phil took

00:22:56,700 --> 00:23:00,330
up on so he started to make it

00:22:59,820 --> 00:23:02,400
debuggable

00:23:00,330 --> 00:23:04,410
to add some debug statements to add a

00:23:02,400 --> 00:23:07,110
logging framework to use the right tools

00:23:04,410 --> 00:23:08,429
he choose for outer tools to do the

00:23:07,110 --> 00:23:11,040
configuring and all the stuff so a

00:23:08,429 --> 00:23:14,910
little bit more of Portability and also

00:23:11,040 --> 00:23:17,190
for packet packet management to get it

00:23:14,910 --> 00:23:19,290
into a maintainable shape of course

00:23:17,190 --> 00:23:21,270
there was still a lot of places in the

00:23:19,290 --> 00:23:25,590
code where he said I would not touch

00:23:21,270 --> 00:23:27,690
this with a 10-foot Pole so his decision

00:23:25,590 --> 00:23:29,820
was to simply remove it and say okay

00:23:27,690 --> 00:23:32,820
this is code I cannot maintain I have to

00:23:29,820 --> 00:23:34,410
delete it and rewrite it a big big part

00:23:32,820 --> 00:23:36,780
there was the resource management

00:23:34,410 --> 00:23:38,520
diamond so if you look at the previous

00:23:36,780 --> 00:23:40,559
implementation there also used to be a

00:23:38,520 --> 00:23:42,480
resource management 'man but he simply

00:23:40,559 --> 00:23:45,179
deleted it and said I will not touch

00:23:42,480 --> 00:23:47,240
that that's fundamentally broken I will

00:23:45,179 --> 00:23:49,559
rewrite that from scratch and

00:23:47,240 --> 00:23:51,000
funny-funny wise it actually got him

00:23:49,559 --> 00:23:52,460
more or less into trouble at Intel

00:23:51,000 --> 00:23:56,070
because people were actually using that

00:23:52,460 --> 00:23:58,650
quite limited resource management email

00:23:56,070 --> 00:24:01,470
but in the end he figured it out and got

00:23:58,650 --> 00:24:03,929
this new project working so really the

00:24:01,470 --> 00:24:06,360
first thing if you want to use the word

00:24:03,929 --> 00:24:08,760
of advice to other project if you want

00:24:06,360 --> 00:24:12,380
to turn your product or prototype or

00:24:08,760 --> 00:24:15,360
whatever you have into a real or

00:24:12,380 --> 00:24:17,730
valuable and and vibrating open-source

00:24:15,360 --> 00:24:21,030
project make it maintainable make it

00:24:17,730 --> 00:24:22,090
debuggable make it usable and make it

00:24:21,030 --> 00:24:25,770
package able

00:24:22,090 --> 00:24:25,770
not easy to contribute

00:24:26,380 --> 00:24:32,590
so yeah this is exactly what he did

00:24:28,900 --> 00:24:34,450
because he moved router tools things and

00:24:32,590 --> 00:24:36,490
writing some rapper scripts and make it

00:24:34,450 --> 00:24:39,010
bundling and doing correct shared

00:24:36,490 --> 00:24:41,800
libraries and all the stuff the project

00:24:39,010 --> 00:24:43,930
is now more or less ready for pickup by

00:24:41,800 --> 00:24:46,660
distributions it's easy to package the

00:24:43,930 --> 00:24:48,610
standard outer tools based package

00:24:46,660 --> 00:24:50,590
format and have some writers from

00:24:48,610 --> 00:24:52,240
wrappers around it and within a few

00:24:50,590 --> 00:24:55,480
minutes you have your district package

00:24:52,240 --> 00:24:58,300
ready which is quite good also we are

00:24:55,480 --> 00:25:00,700
using the semantic versioning scheme so

00:24:58,300 --> 00:25:03,460
every major number stands for an API

00:25:00,700 --> 00:25:07,930
break which we had recently with the to

00:25:03,460 --> 00:25:10,150
todo release so yes make it clear what

00:25:07,930 --> 00:25:12,040
your version number rings are referring

00:25:10,150 --> 00:25:13,630
to what they are expressing with the

00:25:12,040 --> 00:25:15,310
semantic versioning scheme we really can

00:25:13,630 --> 00:25:17,610
recommend that that really helps to

00:25:15,310 --> 00:25:21,400
distributions to pick up your stuff and

00:25:17,610 --> 00:25:22,960
figure out whether into any dependencies

00:25:21,400 --> 00:25:27,640
you are going to break with a new

00:25:22,960 --> 00:25:31,210
version also when Phillip took over the

00:25:27,640 --> 00:25:34,120
project project the testing was also a

00:25:31,210 --> 00:25:36,250
mess no surprise here it was a three

00:25:34,120 --> 00:25:38,800
thousand line single executable which

00:25:36,250 --> 00:25:39,600
had a lot of test cases intermingled

00:25:38,800 --> 00:25:42,010
with each other

00:25:39,600 --> 00:25:43,510
interdependent on each other so if you

00:25:42,010 --> 00:25:45,550
want to change one of the test cases

00:25:43,510 --> 00:25:47,680
everything broke so it was not

00:25:45,550 --> 00:25:50,590
maintainable and especially nobody else

00:25:47,680 --> 00:25:54,850
did or was able to add any tests to it

00:25:50,590 --> 00:25:57,880
so yes it was a large shop to convert

00:25:54,850 --> 00:26:00,400
all these single tests which were the

00:25:57,880 --> 00:26:02,680
interdependent on each other into a real

00:26:00,400 --> 00:26:05,650
test framework where you have separate

00:26:02,680 --> 00:26:08,920
test cases who run independent of each

00:26:05,650 --> 00:26:13,180
other we also added unit tests there

00:26:08,920 --> 00:26:15,160
with Samoa Phil is a huge fan of it he

00:26:13,180 --> 00:26:17,680
said I should add advocate for it

00:26:15,160 --> 00:26:19,540
because he is a real fan of it there's a

00:26:17,680 --> 00:26:21,940
learning curve but once you master it

00:26:19,540 --> 00:26:25,180
it's a really nice addition here and for

00:26:21,940 --> 00:26:28,360
the integration tests we run it on CI so

00:26:25,180 --> 00:26:31,840
so every bill or every commit is run

00:26:28,360 --> 00:26:36,060
against simulator using the Travis CI so

00:26:31,840 --> 00:26:36,060
every build is checked against a similar

00:26:36,179 --> 00:26:41,780
we have covered support so you have we

00:26:39,660 --> 00:26:43,980
have a really nice code coverage so

00:26:41,780 --> 00:26:46,650
modern open-source systems or

00:26:43,980 --> 00:26:48,900
open-source projects are all all about

00:26:46,650 --> 00:26:51,570
batches and and statistics and all the

00:26:48,900 --> 00:26:55,740
stuff and yeah if you add a commerce

00:26:51,570 --> 00:26:57,950
thing to a batch tutorial readme MD it

00:26:55,740 --> 00:27:01,440
gives the users and the distributors

00:26:57,950 --> 00:27:04,410
quite some confidentiality of how major

00:27:01,440 --> 00:27:07,530
your software is we have a code coverage

00:27:04,410 --> 00:27:10,140
rating currently about over 85 percent

00:27:07,530 --> 00:27:13,370
which is quite good for an open-source

00:27:10,140 --> 00:27:16,320
system I think so we have covered he

00:27:13,370 --> 00:27:19,650
static analysis checking we have scan

00:27:16,320 --> 00:27:21,750
but static analysis checking so we are

00:27:19,650 --> 00:27:25,140
doing all the high level quality

00:27:21,750 --> 00:27:28,110
measurements which we which we need or

00:27:25,140 --> 00:27:31,020
which we demand from from from such base

00:27:28,110 --> 00:27:33,200
technology because if the stack would be

00:27:31,020 --> 00:27:36,140
flawed in some some way it would be a

00:27:33,200 --> 00:27:39,299
threat so we are really pushing forward

00:27:36,140 --> 00:27:41,460
to have your high quality and this is if

00:27:39,299 --> 00:27:43,860
you are turning your own product into an

00:27:41,460 --> 00:27:46,280
open-source project this is something

00:27:43,860 --> 00:27:48,929
where you should go to to make it really

00:27:46,280 --> 00:27:51,770
maintainable and build some confidence

00:27:48,929 --> 00:27:54,929
with your users

00:27:51,770 --> 00:27:56,460
yeah and that's how we got it also up

00:27:54,929 --> 00:28:01,049
and running and there's also where you

00:27:56,460 --> 00:28:05,299
can find our stuff we have to hurry up a

00:28:01,049 --> 00:28:08,280
little bit sorry yeah we on github and

00:28:05,299 --> 00:28:10,230
vendor-neutral name TPM 2 software so

00:28:08,280 --> 00:28:12,240
it's not the interest AK anymore it's

00:28:10,230 --> 00:28:15,270
not the Infineon sec it's not a form of

00:28:12,240 --> 00:28:18,030
a stack but it's really the open source

00:28:15,270 --> 00:28:20,850
gbmt is to software we have to come up

00:28:18,030 --> 00:28:22,500
with a nice name definitely so so go

00:28:20,850 --> 00:28:26,070
there check it out we have a lot of

00:28:22,500 --> 00:28:31,140
projects there one of the latest edition

00:28:26,070 --> 00:28:34,140
was the pkcs 11 engine which is still

00:28:31,140 --> 00:28:35,610
beta and don't use it for production but

00:28:34,140 --> 00:28:38,660
please have a look at it and if you want

00:28:35,610 --> 00:28:41,549
to contribute we are more than happy for

00:28:38,660 --> 00:28:44,760
contributions and you can really see

00:28:41,549 --> 00:28:46,890
that the community is not made up only

00:28:44,760 --> 00:28:47,640
by two companies we have maintained us

00:28:46,890 --> 00:28:49,620
from Intel

00:28:47,640 --> 00:28:51,840
on RedHat and a lot of contributions

00:28:49,620 --> 00:28:53,640
from Infineon Facebook Alibaba G

00:28:51,840 --> 00:28:55,830
irritated even a lot of name-dropping

00:28:53,640 --> 00:28:58,140
there but it shows it's not a single

00:28:55,830 --> 00:28:59,490
developer thing there it is really a

00:28:58,140 --> 00:29:02,040
community effort what we are building

00:28:59,490 --> 00:29:04,680
there and this is what my open source

00:29:02,040 --> 00:29:06,570
makes up and even having two different

00:29:04,680 --> 00:29:11,400
companies standing here and giving their

00:29:06,570 --> 00:29:19,190
own presentation I think shows that the

00:29:11,400 --> 00:29:21,240
value we see in that project just quick

00:29:19,190 --> 00:29:22,500
we see an increasing time freedom

00:29:21,240 --> 00:29:24,210
adoption and distributions which is

00:29:22,500 --> 00:29:26,090
really good so there's the groundwork

00:29:24,210 --> 00:29:29,040
has been laid so that we can start to

00:29:26,090 --> 00:29:34,020
rely on this more in downstream software

00:29:29,040 --> 00:29:37,230
projects we just had a in June we had a

00:29:34,020 --> 00:29:42,030
major release 22.0 added compatibility

00:29:37,230 --> 00:29:44,340
with a recent GPM spec it added the ISA

00:29:42,030 --> 00:29:49,230
implementation which is made working

00:29:44,340 --> 00:29:52,500
with the stack a lot more a lot easier

00:29:49,230 --> 00:29:54,990
effectively and to one release in

00:29:52,500 --> 00:29:56,970
October added the Windows support which

00:29:54,990 --> 00:29:59,580
I mentioned so we've got Windows CI now

00:29:56,970 --> 00:30:00,840
so we build our entire stack on Windows

00:29:59,580 --> 00:30:03,090
as well as lakhs every time we have a

00:30:00,840 --> 00:30:06,540
commit and we see if there's any

00:30:03,090 --> 00:30:09,600
breakage and and Windows changes

00:30:06,540 --> 00:30:14,460
relatively minimal it's really nice sort

00:30:09,600 --> 00:30:16,230
of impression of the stack effectively

00:30:14,460 --> 00:30:20,610
it demonstrates that we're doing the

00:30:16,230 --> 00:30:23,270
right things I think so I think briefly

00:30:20,610 --> 00:30:27,060
and talk about use cases and examples we

00:30:23,270 --> 00:30:28,590
we're seeing we see quite a lot of times

00:30:27,060 --> 00:30:30,030
people build the stack and then they

00:30:28,590 --> 00:30:32,520
don't really know where to start TPM is

00:30:30,030 --> 00:30:35,040
great it's a very versatile bit of kit

00:30:32,520 --> 00:30:36,480
but it's also quite a large abstract so

00:30:35,040 --> 00:30:38,490
security primitives that it provides

00:30:36,480 --> 00:30:42,900
people don't always know what to do once

00:30:38,490 --> 00:30:44,370
they started so we we look to the core

00:30:42,900 --> 00:30:46,380
functionalities what a TPM is good at

00:30:44,370 --> 00:30:48,300
and we've decided that the cryptography

00:30:46,380 --> 00:30:51,900
operations are something that we could

00:30:48,300 --> 00:30:55,110
help people sort of explore the TPM with

00:30:51,900 --> 00:30:56,940
a bit more and there are things that a

00:30:55,110 --> 00:30:58,780
lot of software projects rely on already

00:30:56,940 --> 00:31:00,280
whereas data station is

00:30:58,780 --> 00:31:05,260
a lot more abstracts especially in the

00:31:00,280 --> 00:31:07,270
open-source domain so we have a TPM two

00:31:05,260 --> 00:31:08,710
tools project which are effectively

00:31:07,270 --> 00:31:11,140
command-line tools that enable you to

00:31:08,710 --> 00:31:14,040
interact with TPM software stack without

00:31:11,140 --> 00:31:18,010
having to write a bunch of code first

00:31:14,040 --> 00:31:19,540
we've got fairly close to a one-to-one

00:31:18,010 --> 00:31:25,020
mapping to the TPM to commands

00:31:19,540 --> 00:31:27,430
implemented as executable UNIX programs

00:31:25,020 --> 00:31:29,320
so we can there are a really powerful

00:31:27,430 --> 00:31:32,470
tool for education and for prototyping

00:31:29,320 --> 00:31:36,490
so you can string it string together a

00:31:32,470 --> 00:31:41,350
bunch of CPM to tools and

00:31:36,490 --> 00:31:42,700
prototyper CPM workflow and if you dial

00:31:41,350 --> 00:31:44,170
up the verbosity of the tools it will

00:31:42,700 --> 00:31:45,670
also spit out all of the commands that

00:31:44,170 --> 00:31:47,980
it's sending to the CPM i'm receiving

00:31:45,670 --> 00:31:51,880
back which is also really useful in

00:31:47,980 --> 00:31:53,740
terms of education and prototyping we've

00:31:51,880 --> 00:31:54,760
we've got a major release that we're

00:31:53,740 --> 00:31:58,200
working on right now where we've

00:31:54,760 --> 00:32:01,990
switched over to the UN hand system API

00:31:58,200 --> 00:32:04,230
it's gonna na+ to more readily implement

00:32:01,990 --> 00:32:06,580
some desirable features and we're also

00:32:04,230 --> 00:32:08,830
focusing quite bit on improving the ease

00:32:06,580 --> 00:32:10,330
of use because these are an educational

00:32:08,830 --> 00:32:12,670
prototyping tool so we're looking at

00:32:10,330 --> 00:32:15,520
same default we're locking it unifying

00:32:12,670 --> 00:32:17,380
sure options so instead of you know that

00:32:15,520 --> 00:32:18,670
she meaning one thing in one tool and a

00:32:17,380 --> 00:32:20,140
different thing in another we're trying

00:32:18,670 --> 00:32:23,200
to make it mean the same thing in each

00:32:20,140 --> 00:32:26,520
tool we also have the ability to import

00:32:23,200 --> 00:32:28,840
and export objects in standard formats

00:32:26,520 --> 00:32:29,860
so here's a little example that I'm not

00:32:28,840 --> 00:32:32,800
going to step through just because we

00:32:29,860 --> 00:32:35,170
seem to be running out of time but David

00:32:32,800 --> 00:32:37,840
a from Facebook gave a talk at Fausto in

00:32:35,170 --> 00:32:40,630
2017 where he demonstrated the latest

00:32:37,840 --> 00:32:43,630
state of the tools and he had like an 11

00:32:40,630 --> 00:32:44,860
line example where he was taking the TPM

00:32:43,630 --> 00:32:46,780
data structures that we were writing out

00:32:44,860 --> 00:32:49,210
to disk and using DD to extract the

00:32:46,780 --> 00:32:52,390
parts that he needed to compose a PEM

00:32:49,210 --> 00:32:53,800
file and stuff and there are lots of

00:32:52,390 --> 00:32:55,540
options required because none of the

00:32:53,800 --> 00:32:56,950
defaults the were no defaults

00:32:55,540 --> 00:32:58,630
effectively every option that the

00:32:56,950 --> 00:33:01,750
command exposed you had to define a

00:32:58,630 --> 00:33:04,810
value for so in the in the next release

00:33:01,750 --> 00:33:07,330
we've we've tightened things up a bit so

00:33:04,810 --> 00:33:09,280
it's seven commands instead of 11 to

00:33:07,330 --> 00:33:11,140
replicate that example I'm using full

00:33:09,280 --> 00:33:12,460
long option names instead of short

00:33:11,140 --> 00:33:13,840
option names because I have to

00:33:12,460 --> 00:33:17,260
fewer options so it still fits on the

00:33:13,840 --> 00:33:19,810
slide I think we've made good progress

00:33:17,260 --> 00:33:22,020
and I think it's probably worth checking

00:33:19,810 --> 00:33:22,020
out

00:33:22,230 --> 00:33:31,830
so we have this an open SSL engine that

00:33:25,990 --> 00:33:35,410
we've just started working on really its

00:33:31,830 --> 00:33:42,820
provides RSA decryption our so signature

00:33:35,410 --> 00:33:44,410
zcta ECDSA signatures and it's really

00:33:42,820 --> 00:33:45,730
gonna be once it becomes a little bit

00:33:44,410 --> 00:33:47,260
more stable on you so it's we're going

00:33:45,730 --> 00:33:48,850
to be really nice to see distro ship

00:33:47,260 --> 00:33:53,380
that and be able to start using TPM out

00:33:48,850 --> 00:33:56,230
of the box so I've replicated the same

00:33:53,380 --> 00:33:59,470
example from the tools with open SSL

00:33:56,230 --> 00:34:00,880
engine so you can see that we can do

00:33:59,470 --> 00:34:04,120
that effectively the same thing in five

00:34:00,880 --> 00:34:05,380
steps and what we're doing in both cases

00:34:04,120 --> 00:34:12,960
are probably should have mentioned is

00:34:05,380 --> 00:34:15,100
that we are signing or we're hashing

00:34:12,960 --> 00:34:18,460
something with a certificate in the TPM

00:34:15,100 --> 00:34:20,410
and then verifying that it's valid with

00:34:18,460 --> 00:34:22,150
the open SSL so it demonstrates the

00:34:20,410 --> 00:34:30,040
interactive interoperability of the

00:34:22,150 --> 00:34:31,720
components and then another new thing

00:34:30,040 --> 00:34:34,470
yeah this is our latest addition to the

00:34:31,720 --> 00:34:37,930
family so to say it's the pkcs 11

00:34:34,470 --> 00:34:40,720
provider based on the work by ivan tamar

00:34:37,930 --> 00:34:43,930
so we took that and developed it further

00:34:40,720 --> 00:34:47,260
with his permission current data is Beta

00:34:43,930 --> 00:34:50,500
Beta Beta Beta it hasn't still a lot of

00:34:47,260 --> 00:34:53,440
bugs but it basically works with open

00:34:50,500 --> 00:34:55,120
SSL mp11 kit so you can use it but not

00:34:53,440 --> 00:34:56,410
for protection please if you can try and

00:34:55,120 --> 00:34:57,820
use it and tell us which of your use

00:34:56,410 --> 00:35:00,430
cases don't work that would be great

00:34:57,820 --> 00:35:02,740
yeah so any Help Wanted please please

00:35:00,430 --> 00:35:04,450
check it out and submit your patches

00:35:02,740 --> 00:35:08,100
we're more than welcoming patches there

00:35:04,450 --> 00:35:14,020
I think we're gonna have to wrap up yeah

00:35:08,100 --> 00:35:15,760
yeah maybe the last thing there there

00:35:14,020 --> 00:35:19,720
are a lot of projects already using our

00:35:15,760 --> 00:35:21,370
stack there maybe the thing that's most

00:35:19,720 --> 00:35:23,440
interesting is decrypted a blocks thing

00:35:21,370 --> 00:35:25,000
where we're currently also working on to

00:35:23,440 --> 00:35:27,660
get to full disk encryption ready

00:35:25,000 --> 00:35:30,640
for production use so you can actually

00:35:27,660 --> 00:35:33,190
have that BitLocker use case you have on

00:35:30,640 --> 00:35:34,150
Windows in a Linux system as well we're

00:35:33,190 --> 00:35:36,700
still working on that

00:35:34,150 --> 00:35:40,480
also strongswan as one of the leading

00:35:36,700 --> 00:35:45,250
IPSec VPN client things there and open

00:35:40,480 --> 00:35:48,790
connect us using our stuff so this comes

00:35:45,250 --> 00:35:51,880
to our last slide yeah Oh last but one

00:35:48,790 --> 00:35:54,400
of theirs yes a little bit of detail

00:35:51,880 --> 00:35:56,620
about working with stack but mostly you

00:35:54,400 --> 00:35:57,850
know we'd like some help if you've got

00:35:56,620 --> 00:36:00,130
downstream projects that you think could

00:35:57,850 --> 00:36:03,160
make use of the VPN add the TPM come

00:36:00,130 --> 00:36:04,500
talk to us and these are some areas that

00:36:03,160 --> 00:36:07,360
we think it would be useful ready

00:36:04,500 --> 00:36:10,420
valuable to add TPM support so the list

00:36:07,360 --> 00:36:14,800
is not included you can add your product

00:36:10,420 --> 00:36:16,880
here and contact us so let's thank our

00:36:14,800 --> 00:36:19,749
speakers

00:36:16,880 --> 00:36:19,749

YouTube URL: https://www.youtube.com/watch?v=-Wx5g6j7yOI


