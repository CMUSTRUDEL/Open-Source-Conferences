Title: Protected Execution Facility - Guerney D. H. Hunt, IBM Research
Publication date: 2018-10-27
Playlist: Linux Security Summit Europe 2018 - Edinburgh
Description: 
	Protected Execution Facility - Guerney D. H. Hunt, IBM Research 

(Guerney Hunt, IBM Research): Security remains a key concern for both traditional and cloud computing workloads. One objective is keeping applications (or containers) secure in the presence of attacks or compromised components. This talk addresses these challenges on the Power Architecture by presenting the Protected Execution Facility ― an architecture modification for IBM Linux and OpenPower Linux servers ― along with the associated firmware, the Protected Execution Ultravisor which provides additional security to virtual machines ― called secure virtual machines (SVMs). Protected Execution Facility concurrently supports both normal VMs and SVMs. The protections provided to SVMs and some restrictions for SVMs are covered. The differences and similarities between vendor approaches to providing security in the presence of a potentially compromised hypervisor or OS will be reviewed. 

About Guerney Hunt
Dr. Guerney D. H. Hunt has been a Research Staff Member at IBM’s T. J. Watson Research Center since 1995. He is currently working on transferring security technology into IBM products, and developing additional security technology. He participated in a team funded by the Department of Homeland Security and the Canadian government to develop an end-to-end security architecture. He has been working on developing architectural changes that can be used to increase the security of computer systems since 2008. He joined IBM Research in 1995 in the distributed computing group where he became the co-inventor of layer seven scaling technology. He has worked in the secure intermediary infrastructures, advanced cluster systems, and distributed infrastructure groups before joining the Security Research Department in 2008. He was also the PI of the Next Generation Secure Computer Architecture exploratory research project. He has work on blockchain security. Prior to IBM Research, Dr. Hunt work in IBM development from 1981-1983 and he worked for NCR from 1975-1981. His earlier work was in software and microcode development, IBM product engineering, and OS development for VM/370. Since joining IBM Research he has held management and non management positions.

His first conference presentation was at WWW7 in Brisbane Australia in 1998. He also did a poster session at SOSP XVII in 1999. Since that time, he has done multiple customer, business and conference presentations.
.
Dr. Hunt holds a BS in mathematics from Michigan Technological University and an MS and Ph.D. in computer science from Cornell University. He is a senior member of the IEEE and a member of the ACM, was a founding member of the editorial board of IEEE Pervasive Computing, he holds more than 21 US and foreign patents, has published papers, and has been an IBM Master Inventor. CV available upon request.
Captions: 
	00:00:00,060 --> 00:00:06,990
so my name is gurney hunt I work at IBM

00:00:03,240 --> 00:00:10,320
research with a group of people some of

00:00:06,990 --> 00:00:11,910
whom have already spoken like me me used

00:00:10,320 --> 00:00:14,099
to work with Dave Dave moved on to

00:00:11,910 --> 00:00:17,699
perhaps greener pastures at GE and

00:00:14,099 --> 00:00:20,160
others that you've seen so what I'm

00:00:17,699 --> 00:00:24,750
gonna be talking about is a product

00:00:20,160 --> 00:00:26,099
that's about to come out in IBM its iBM

00:00:24,750 --> 00:00:27,420
is obviously changing because we're

00:00:26,099 --> 00:00:29,519
talking about things that you can't buy

00:00:27,420 --> 00:00:33,239
before you can buy them but not telling

00:00:29,519 --> 00:00:35,760
you when you'll be able to buy them but

00:00:33,239 --> 00:00:38,370
it is it's close enough that we're going

00:00:35,760 --> 00:00:40,790
to talk about it this work was done as

00:00:38,370 --> 00:00:44,399
part of is derived from work that we did

00:00:40,790 --> 00:00:45,989
under a contract to the US and Canadian

00:00:44,399 --> 00:00:47,910
governments that's what all that fancy

00:00:45,989 --> 00:00:49,770
words on the left says that our contract

00:00:47,910 --> 00:00:53,520
requires us to put on all derived

00:00:49,770 --> 00:00:55,469
publications of which this is one so I'm

00:00:53,520 --> 00:00:57,000
only gonna speak from my view although

00:00:55,469 --> 00:00:59,370
it represents fairly closely what's

00:00:57,000 --> 00:01:01,140
going on if you have any and I'll answer

00:00:59,370 --> 00:01:04,530
any question I can or tell you I can't

00:01:01,140 --> 00:01:06,240
answer it so basically I'm going to go

00:01:04,530 --> 00:01:07,799
over these these four things I don't

00:01:06,240 --> 00:01:10,200
give you an introduction to protect at

00:01:07,799 --> 00:01:12,390
execution facility I'm going to give you

00:01:10,200 --> 00:01:13,560
an overview of the architecture I'm

00:01:12,390 --> 00:01:15,750
going to give you some lower level

00:01:13,560 --> 00:01:20,820
details and then I'll give you a quick

00:01:15,750 --> 00:01:23,340
summary so the the team that's working

00:01:20,820 --> 00:01:25,020
on this is IBM research IBM cognitive

00:01:23,340 --> 00:01:26,580
systems otherwise known as power and the

00:01:25,020 --> 00:01:28,530
Linux Technology Center some of the

00:01:26,580 --> 00:01:30,630
people from the next Technology Center

00:01:28,530 --> 00:01:34,170
who have contributed to this our

00:01:30,630 --> 00:01:36,350
objective is to deliver this technology

00:01:34,170 --> 00:01:39,210
on four open power and power systems and

00:01:36,350 --> 00:01:42,720
all the software and firmware associated

00:01:39,210 --> 00:01:47,700
with it is is either already open source

00:01:42,720 --> 00:01:49,799
or will be open sourced so the basic

00:01:47,700 --> 00:01:52,649
idea is that there's a there's a there's

00:01:49,799 --> 00:01:54,689
it's we're we have a model that's

00:01:52,649 --> 00:01:57,060
similar to the model that AMD introduced

00:01:54,689 --> 00:01:59,130
if you heard their talk earlier in the

00:01:57,060 --> 00:02:00,899
conference basically it's being

00:01:59,130 --> 00:02:02,280
increasingly difficult to guarantee the

00:02:00,899 --> 00:02:03,990
security of systems that are in a

00:02:02,280 --> 00:02:07,940
virtualized environment so we've come up

00:02:03,990 --> 00:02:10,649
with our approach to giving you a way of

00:02:07,940 --> 00:02:12,750
having having a virtual machine on on

00:02:10,649 --> 00:02:13,350
top of a hypervisor without necessarily

00:02:12,750 --> 00:02:15,840
having to

00:02:13,350 --> 00:02:17,490
the hypervisor when we're saying that

00:02:15,840 --> 00:02:19,650
we're not saying that hypervisors are

00:02:17,490 --> 00:02:22,680
bad guys we're basically saying that our

00:02:19,650 --> 00:02:24,360
customers are asking as we try it as we

00:02:22,680 --> 00:02:27,270
try to move more more people to cloud

00:02:24,360 --> 00:02:29,220
computing especially the especially the

00:02:27,270 --> 00:02:30,870
people that we look at they they want to

00:02:29,220 --> 00:02:33,270
use cloud computing but they don't want

00:02:30,870 --> 00:02:34,950
to give their stuff to the cloud

00:02:33,270 --> 00:02:37,020
provider or the cloud providers

00:02:34,950 --> 00:02:41,700
administrator or anyone that has access

00:02:37,020 --> 00:02:43,530
to the cloud system so our objectives

00:02:41,700 --> 00:02:46,110
are introduced something we call secure

00:02:43,530 --> 00:02:48,000
virtual machines we want to protect the

00:02:46,110 --> 00:02:49,620
secure virtual machine against attack we

00:02:48,000 --> 00:02:52,080
want to protect the confidentially and

00:02:49,620 --> 00:02:54,180
confidentiality and integrity of the

00:02:52,080 --> 00:02:55,470
secure virtual machine and we're going

00:02:54,180 --> 00:02:57,600
to integrate with the trusted computing

00:02:55,470 --> 00:02:59,670
tooling so what we're doing is dependent

00:02:57,600 --> 00:03:02,460
on the secure and trusted boot stuff

00:02:59,670 --> 00:03:05,520
that not and that I'll talked about

00:03:02,460 --> 00:03:07,080
earlier in the conference we in a in our

00:03:05,520 --> 00:03:08,820
approach to enable secrets to be

00:03:07,080 --> 00:03:12,630
embedded inside of the secure virtual

00:03:08,820 --> 00:03:15,180
machine and we we get secure virtual

00:03:12,630 --> 00:03:16,980
machines by converting existing virtual

00:03:15,180 --> 00:03:18,600
machines into secure virtual machines

00:03:16,980 --> 00:03:22,290
with new tooling that's yet to be open

00:03:18,600 --> 00:03:23,910
sourced the whole idea is that instead

00:03:22,290 --> 00:03:27,410
of having to trust all of the hypervisor

00:03:23,910 --> 00:03:30,180
you have to trust your hosts food opal

00:03:27,410 --> 00:03:32,310
which we're talked about in the secure

00:03:30,180 --> 00:03:33,930
booting stack and then we're adding a

00:03:32,310 --> 00:03:37,020
new piece of code called the protected

00:03:33,930 --> 00:03:40,290
execution alt reviser or auto visor for

00:03:37,020 --> 00:03:44,220
short and then and that's it and the

00:03:40,290 --> 00:03:46,740
hardware so we're relying on the open

00:03:44,220 --> 00:03:48,360
source ecosystem we're not limiting the

00:03:46,740 --> 00:03:51,510
amount of protected memory you can put

00:03:48,360 --> 00:03:55,140
in a machine and any existing and and

00:03:51,510 --> 00:03:56,880
the way we do this has no impact impact

00:03:55,140 --> 00:03:59,280
on the applications you run in the

00:03:56,880 --> 00:04:03,900
virtual machine and these files will be

00:03:59,280 --> 00:04:08,010
on the deck ok so this is our quick

00:04:03,900 --> 00:04:09,930
overview we got our hardware down at the

00:04:08,010 --> 00:04:11,790
bottom we've got this protected

00:04:09,930 --> 00:04:14,670
execution ultra vires on top of it which

00:04:11,790 --> 00:04:17,040
is firmware we have Linux KVM on top of

00:04:14,670 --> 00:04:18,750
that and we have both normal virtual

00:04:17,040 --> 00:04:21,570
machines and secure virtual machines

00:04:18,750 --> 00:04:25,900
running on top of Linux KVM as the

00:04:21,570 --> 00:04:27,850
little red arrows indicate you can

00:04:25,900 --> 00:04:30,610
access the secure virtual machines

00:04:27,850 --> 00:04:34,540
memory from a normal virtual machine or

00:04:30,610 --> 00:04:43,150
from Linux KVM the system doesn't allow

00:04:34,540 --> 00:04:45,070
that so how is it gonna work so we start

00:04:43,150 --> 00:04:48,910
with if you want to create one oh well I

00:04:45,070 --> 00:04:50,860
should tell you that we still allow do

00:04:48,910 --> 00:04:52,900
pretty much everything it normally does

00:04:50,860 --> 00:04:54,340
for a normal virtual machine for the

00:04:52,900 --> 00:04:56,590
secure virtual machine and I'll talk a

00:04:54,340 --> 00:04:59,440
bit about how we make that work in a

00:04:56,590 --> 00:05:01,450
minute although it may sound familiar so

00:04:59,440 --> 00:05:03,220
to create a secure virtual machine you

00:05:01,450 --> 00:05:04,870
start with a regular virtual machine you

00:05:03,220 --> 00:05:06,040
run you develop your applications

00:05:04,870 --> 00:05:07,660
whatever you want to do while it's a

00:05:06,040 --> 00:05:09,669
regular virtual machine and then you run

00:05:07,660 --> 00:05:12,460
the tooling to convert it into secure

00:05:09,669 --> 00:05:15,930
virtual machine you have to collect the

00:05:12,460 --> 00:05:18,130
public keys of the authorized machines

00:05:15,930 --> 00:05:19,720
one of the things you're introducing in

00:05:18,130 --> 00:05:22,690
here is every machine will have a

00:05:19,720 --> 00:05:25,389
public/private key pair the private key

00:05:22,690 --> 00:05:27,940
of the machine will remain inside the

00:05:25,389 --> 00:05:31,090
TPM and the public key will be available

00:05:27,940 --> 00:05:33,490
to the owner of the machine we make it

00:05:31,090 --> 00:05:35,320
possible for you to have for you to use

00:05:33,490 --> 00:05:37,600
the same public key on more than one

00:05:35,320 --> 00:05:38,830
virtual machine or to have every machine

00:05:37,600 --> 00:05:41,620
you will and have a different public key

00:05:38,830 --> 00:05:43,360
that you're your choice we do that not

00:05:41,620 --> 00:05:45,520
buy stuff that we've created but by

00:05:43,360 --> 00:05:51,039
exploiting the capabilities of the TPM

00:05:45,520 --> 00:05:54,789
2.0 our tooling confirms that your

00:05:51,039 --> 00:05:57,880
filesystem is encrypted the Gotcha here

00:05:54,789 --> 00:06:00,520
is that you'll get only the protections

00:05:57,880 --> 00:06:04,479
for your encrypted filesystem that the

00:06:00,520 --> 00:06:06,460
encryption form that you use allow we

00:06:04,479 --> 00:06:07,780
recommend that you use an encrypted file

00:06:06,460 --> 00:06:09,460
system that gives you integrity

00:06:07,780 --> 00:06:12,310
protection of which there is one for

00:06:09,460 --> 00:06:14,950
Linux but if you but you will support

00:06:12,310 --> 00:06:18,039
any encrypted filesystem you use I think

00:06:14,950 --> 00:06:20,050
in this in this talk I probably talked

00:06:18,039 --> 00:06:22,090
about using DM crypt but DM crypt

00:06:20,050 --> 00:06:24,930
doesn't have an integrity protection but

00:06:22,090 --> 00:06:28,510
there are encrypted file systems to do

00:06:24,930 --> 00:06:31,300
and we the tooling build some integrity

00:06:28,510 --> 00:06:32,620
information and outputs in SVM I'll give

00:06:31,300 --> 00:06:35,860
you the format of it in just a little

00:06:32,620 --> 00:06:38,590
bit it to let you know what's going on

00:06:35,860 --> 00:06:39,460
it starts like any normal VM as a normal

00:06:38,590 --> 00:06:41,319
virtual machine

00:06:39,460 --> 00:06:43,930
nothing special during the boot process

00:06:41,319 --> 00:06:46,090
the SVM executes an inner secure mode

00:06:43,930 --> 00:06:47,680
syscall instruction which is a new

00:06:46,090 --> 00:06:50,169
instruction we inserted into the

00:06:47,680 --> 00:06:52,710
instruction set that instruction is

00:06:50,169 --> 00:06:55,300
executed right at the end of prominent

00:06:52,710 --> 00:06:57,009
the ultra vires receives the SM

00:06:55,300 --> 00:06:58,690
instruction and it points to some

00:06:57,009 --> 00:07:02,229
encrypted information and it's cluded

00:06:58,690 --> 00:07:04,270
included with the secure virtual machine

00:07:02,229 --> 00:07:05,949
that enables the ultra vires to the

00:07:04,270 --> 00:07:08,949
integrity of the inch of the secure

00:07:05,949 --> 00:07:11,800
virtual machine okay so what does it do

00:07:08,949 --> 00:07:13,660
it grabs the entire blob of the secure

00:07:11,800 --> 00:07:15,759
virtual machine that's in memory at that

00:07:13,660 --> 00:07:17,440
point and moves it off to secure memory

00:07:15,759 --> 00:07:19,870
which cannot be referenced by the

00:07:17,440 --> 00:07:22,810
hypervisor once it gets it to secure

00:07:19,870 --> 00:07:25,900
memory it it moves the whole thing off

00:07:22,810 --> 00:07:28,539
including the secure blob it once it

00:07:25,900 --> 00:07:30,789
gets the secure memory at it it opens up

00:07:28,539 --> 00:07:32,530
the secure blob assuming it has

00:07:30,789 --> 00:07:35,710
permission if it doesn't have permission

00:07:32,530 --> 00:07:37,300
it fails right there it then opens up

00:07:35,710 --> 00:07:39,069
the integrity information and checks the

00:07:37,300 --> 00:07:40,720
integrity of everything that's that it

00:07:39,069 --> 00:07:43,330
moved over to make sure that it's the

00:07:40,720 --> 00:07:46,210
same as it was when the user created the

00:07:43,330 --> 00:07:48,490
secure virtual machine if it is the same

00:07:46,210 --> 00:07:50,470
as it is an user who created the secure

00:07:48,490 --> 00:07:52,960
virtual machine it shifts the secure

00:07:50,470 --> 00:07:55,349
virtual machine into secure mode which

00:07:52,960 --> 00:07:58,300
I'll explain in a minute and then it

00:07:55,349 --> 00:08:07,210
resumes execution and the machine starts

00:07:58,300 --> 00:08:08,889
to run now I have this an important

00:08:07,210 --> 00:08:10,479
point that during execution of the

00:08:08,889 --> 00:08:12,490
secure virtual machine the ultra vires

00:08:10,479 --> 00:08:15,250
receives all alt interrupts from the

00:08:12,490 --> 00:08:16,960
Asuman it saves us cement and only

00:08:15,250 --> 00:08:18,490
reflects information required to process

00:08:16,960 --> 00:08:20,500
the internment basically the ultra

00:08:18,490 --> 00:08:21,880
Pfizer sits between the secure virtual

00:08:20,500 --> 00:08:24,130
machine and the hypervisor and

00:08:21,880 --> 00:08:26,909
interrupts come in to yalter visor that

00:08:24,130 --> 00:08:28,870
are intended for the hypervisor or

00:08:26,909 --> 00:08:31,180
asynchronous interrupts that would occur

00:08:28,870 --> 00:08:33,399
while the SVM was running and what the

00:08:31,180 --> 00:08:35,229
ultra vires does is it saves off all of

00:08:33,399 --> 00:08:37,599
the state of the secure virtual machine

00:08:35,229 --> 00:08:39,190
which is all the registers floating

00:08:37,599 --> 00:08:41,079
point vector registers the whole nine

00:08:39,190 --> 00:08:43,630
yards puts them into a structure that's

00:08:41,079 --> 00:08:46,570
in secure memory and it puts other state

00:08:43,630 --> 00:08:48,220
into the register state if it's an

00:08:46,570 --> 00:08:51,230
asynchronous interrupt and reflects the

00:08:48,220 --> 00:08:53,000
asynchronous interrupt to the hypervisor

00:08:51,230 --> 00:08:54,860
in our case Linux KVM and when the

00:08:53,000 --> 00:08:57,320
hypervisor is done it has to call it

00:08:54,860 --> 00:08:58,820
it's there's some patches out so they'll

00:08:57,320 --> 00:09:01,790
call back and we will restart the secure

00:08:58,820 --> 00:09:03,649
virtual machine if the interrupt is

00:09:01,790 --> 00:09:05,570
because of an H call coming out of the

00:09:03,649 --> 00:09:07,399
SVM intended for the hypervisor to do

00:09:05,570 --> 00:09:09,709
some work front we do exactly the same

00:09:07,399 --> 00:09:11,570
thing except we leave in two in the

00:09:09,709 --> 00:09:13,160
registers reflected to the hypervisor

00:09:11,570 --> 00:09:14,779
all of the state that the hypervisor

00:09:13,160 --> 00:09:16,550
needs to do its job otherwise it

00:09:14,779 --> 00:09:20,770
couldn't do its job and then it comes

00:09:16,550 --> 00:09:23,870
back and then we take this stuff out now

00:09:20,770 --> 00:09:26,510
we'll get into that we're gonna go now

00:09:23,870 --> 00:09:28,310
at a slightly lower level and given more

00:09:26,510 --> 00:09:30,430
details from that architecture okay so

00:09:28,310 --> 00:09:32,810
the base principles are the following

00:09:30,430 --> 00:09:35,240
previously in power we had hypervisor

00:09:32,810 --> 00:09:37,490
mode supervisor mode and problem problem

00:09:35,240 --> 00:09:39,500
State now we have ultra visor mode

00:09:37,490 --> 00:09:42,620
hypervisor mode supervisor mode and

00:09:39,500 --> 00:09:47,600
problem state halt revisers at the

00:09:42,620 --> 00:09:49,160
bottom because it owns the machine so

00:09:47,600 --> 00:09:52,010
it's the highest privileged mode in the

00:09:49,160 --> 00:09:55,550
machine at this point so this allows us

00:09:52,010 --> 00:09:57,350
to do these things we're saying that

00:09:55,550 --> 00:09:59,150
we're minimizing and trusting the

00:09:57,350 --> 00:10:02,380
trusted base because you only have to

00:09:59,150 --> 00:10:05,029
trust the stuff below the hypervisor and

00:10:02,380 --> 00:10:06,740
with the TPM and stuff you can find out

00:10:05,029 --> 00:10:08,420
that this is in fact actually running

00:10:06,740 --> 00:10:09,950
ourself and it's a machine and all this

00:10:08,420 --> 00:10:11,690
other stuff if you're doing all the

00:10:09,950 --> 00:10:16,550
remote attestation and you're concerned

00:10:11,690 --> 00:10:18,500
and you're on a remote cloud provider we

00:10:16,550 --> 00:10:20,450
introduced this notion of secure memory

00:10:18,500 --> 00:10:22,760
which is only accessible by secure

00:10:20,450 --> 00:10:24,529
virtual machines and the ultra vires the

00:10:22,760 --> 00:10:27,020
other way to say it is it's only there's

00:10:24,529 --> 00:10:28,940
a new bit in the MSR the Machine status

00:10:27,020 --> 00:10:30,920
register that says you're in secure mode

00:10:28,940 --> 00:10:32,959
and you can only reference something

00:10:30,920 --> 00:10:34,910
that's in secure memory if that bit is

00:10:32,959 --> 00:10:39,260
on and the only thing that can turn that

00:10:34,910 --> 00:10:40,670
bit on is the ultra visor so for those

00:10:39,260 --> 00:10:41,930
of you who are really into hardware

00:10:40,670 --> 00:10:43,940
architectures you realize that the

00:10:41,930 --> 00:10:46,550
Machine therefore has to boot in secure

00:10:43,940 --> 00:10:48,380
mode with secure mode turned on so it

00:10:46,550 --> 00:10:50,000
comes into host boot and opal if you're

00:10:48,380 --> 00:10:53,450
familiar with our stack with secure mode

00:10:50,000 --> 00:10:54,980
on and at the correct point opal loads

00:10:53,450 --> 00:10:58,459
the ultra vires and when the ultra vires

00:10:54,980 --> 00:11:00,650
goes back to opal the secure mode bit is

00:10:58,459 --> 00:11:02,300
off and then opal loads starts the

00:11:00,650 --> 00:11:03,730
booting at the guest of the guest kernel

00:11:02,300 --> 00:11:06,130
just to put it in

00:11:03,730 --> 00:11:09,699
effective from what you saw about the

00:11:06,130 --> 00:11:13,660
secure boot on power we introduce ultra

00:11:09,699 --> 00:11:18,040
vires mode it's and we enable secure

00:11:13,660 --> 00:11:20,850
virtual machines so working here's our

00:11:18,040 --> 00:11:24,190
overview and we'll work through this set

00:11:20,850 --> 00:11:25,779
we'll work through this in a couple of

00:11:24,190 --> 00:11:27,910
more slides in a little bit more detail

00:11:25,779 --> 00:11:30,279
as I told you at the bottom we're

00:11:27,910 --> 00:11:33,040
relying on this on TPM where we embed

00:11:30,279 --> 00:11:35,470
our our private key wherever we get our

00:11:33,040 --> 00:11:38,260
RAM from we have the CPU with protected

00:11:35,470 --> 00:11:40,300
execution facility modifications we have

00:11:38,260 --> 00:11:43,300
attached the secure mode memory is

00:11:40,300 --> 00:11:45,399
allocated with those modifications we

00:11:43,300 --> 00:11:47,740
have normal memory that anybody in the

00:11:45,399 --> 00:11:49,870
CPU can read include including things in

00:11:47,740 --> 00:11:51,250
running in secure mood we have new

00:11:49,870 --> 00:11:55,000
firmware I recall the protected

00:11:51,250 --> 00:11:57,779
execution authorizer we run Linux KVM

00:11:55,000 --> 00:12:00,010
hypervisor and on top of that we have

00:11:57,779 --> 00:12:01,480
virtual machines either secure virtual

00:12:00,010 --> 00:12:03,040
machines and normal virtual machines

00:12:01,480 --> 00:12:06,389
they both come from whatever storage

00:12:03,040 --> 00:12:09,760
that the system has and we we give you

00:12:06,389 --> 00:12:11,709
we create a new tool there where you

00:12:09,760 --> 00:12:16,120
give the public key so you can convert a

00:12:11,709 --> 00:12:18,279
machine from one to the other protected

00:12:16,120 --> 00:12:20,790
execution facility refers to the changes

00:12:18,279 --> 00:12:23,170
made to our open power architecture and

00:12:20,790 --> 00:12:25,000
in particular each machine has a

00:12:23,170 --> 00:12:27,510
public/private key pair protected

00:12:25,000 --> 00:12:30,010
execution Ault reviser refers to the

00:12:27,510 --> 00:12:33,160
open source firmware that will be open

00:12:30,010 --> 00:12:35,800
sourced it's not open source yet you

00:12:33,160 --> 00:12:36,990
know I said all of this so we went we

00:12:35,800 --> 00:12:41,430
won't say it again

00:12:36,990 --> 00:12:44,319
all right so starting from the bottom up

00:12:41,430 --> 00:12:47,800
the private key remains in the TPM

00:12:44,319 --> 00:12:49,449
actually you know there's a function of

00:12:47,800 --> 00:12:50,949
the TPM for those of you familiar where

00:12:49,449 --> 00:12:52,480
you can say give me a public/private key

00:12:50,949 --> 00:12:54,100
pair keep the private key and give me

00:12:52,480 --> 00:12:58,540
the public that's what we use

00:12:54,100 --> 00:13:00,519
so the TPM generates the key the ultra

00:12:58,540 --> 00:13:05,829
vires does not for those of you familiar

00:13:00,519 --> 00:13:08,380
with the kernel the the TPM device

00:13:05,829 --> 00:13:11,199
driver remaining remains in Linux KVM

00:13:08,380 --> 00:13:13,510
and so therefore we're going to have a

00:13:11,199 --> 00:13:15,290
TSS inside of the ultra vires so that we

00:13:13,510 --> 00:13:17,450
can appropriately share

00:13:15,290 --> 00:13:19,160
the device driver with with the vm's

00:13:17,450 --> 00:13:22,490
that are running up up above

00:13:19,160 --> 00:13:24,500
however again exploiting this the

00:13:22,490 --> 00:13:28,610
trusted computing base we can set up a

00:13:24,500 --> 00:13:32,000
secure channel to the TPM because we

00:13:28,610 --> 00:13:35,450
have a shared secret and we can

00:13:32,000 --> 00:13:37,550
therefore talk through Linux KVM to the

00:13:35,450 --> 00:13:39,800
TPM to do the work that we need to do as

00:13:37,550 --> 00:13:41,540
the ultra visor so the only thing that

00:13:39,800 --> 00:13:45,050
you can get is the denial of service

00:13:41,540 --> 00:13:46,670
attack you can't get a loss of secrets

00:13:45,050 --> 00:13:48,230
because the information we're passing

00:13:46,670 --> 00:13:51,050
back and forth will be improperly

00:13:48,230 --> 00:13:52,670
encrypted the hardware separates the

00:13:51,050 --> 00:13:55,070
memory and a normal memory and secure

00:13:52,670 --> 00:13:56,900
memory and after boot only SVM's and the

00:13:55,070 --> 00:13:59,510
ultra vires run and secure memory will

00:13:56,900 --> 00:14:01,580
can reference secure memory when ESM

00:13:59,510 --> 00:14:03,620
call is received if the calling SVM has

00:14:01,580 --> 00:14:05,690
not been modified and the ultra vires it

00:14:03,620 --> 00:14:11,120
be ultra visor will transmit position it

00:14:05,690 --> 00:14:13,730
into secure mode so what's going on with

00:14:11,120 --> 00:14:16,280
the hypervisor is we're slightly more

00:14:13,730 --> 00:14:19,760
privileged it has to be para virtualized

00:14:16,280 --> 00:14:22,430
to run with the ultra vires in our

00:14:19,760 --> 00:14:24,610
research program in our research project

00:14:22,430 --> 00:14:27,080
we built a version of this architecture

00:14:24,610 --> 00:14:29,840
where the ultra vires

00:14:27,080 --> 00:14:31,370
hypervisor did not have to know that the

00:14:29,840 --> 00:14:34,130
ultra vires was there in other words we

00:14:31,370 --> 00:14:37,850
virtualized the hypervisor we did that

00:14:34,130 --> 00:14:39,590
just for why not it made we had a small

00:14:37,850 --> 00:14:41,210
team it made it easy to do we didn't

00:14:39,590 --> 00:14:42,320
have to have hypervisor skills we got it

00:14:41,210 --> 00:14:44,960
up and running we can run virtual

00:14:42,320 --> 00:14:48,110
machines and the performance would kick

00:14:44,960 --> 00:14:50,270
us out of the market because it was

00:14:48,110 --> 00:14:51,950
really bad I won't give you the numbers

00:14:50,270 --> 00:14:54,200
unless you really need to Nome we tried

00:14:51,950 --> 00:14:57,260
it we did it we know how to do it the

00:14:54,200 --> 00:14:59,660
performance sucks mud and that pushed us

00:14:57,260 --> 00:15:01,490
into a pair of virtualization ma model

00:14:59,660 --> 00:15:05,000
and then the model and the model that

00:15:01,490 --> 00:15:06,740
we're running now the impact on normal

00:15:05,000 --> 00:15:09,320
virtual machines is nearly zero when

00:15:06,740 --> 00:15:13,070
they're booting the overhead for secure

00:15:09,320 --> 00:15:18,140
virtual machines is a single digit and a

00:15:13,070 --> 00:15:20,030
small single digit we we by our

00:15:18,140 --> 00:15:22,689
projections we're still working to get

00:15:20,030 --> 00:15:28,220
the final numbers on the actual hardware

00:15:22,689 --> 00:15:30,079
so so if the hypervisor needs to update

00:15:28,220 --> 00:15:32,299
the partition scope page table we'll

00:15:30,079 --> 00:15:33,920
have to ask the ultra vires and if it's

00:15:32,299 --> 00:15:35,600
running an SVM we'll have to ask the

00:15:33,920 --> 00:15:38,449
ultra vires to complete the return if it

00:15:35,600 --> 00:15:41,509
wants to go back to an SVM and we're

00:15:38,449 --> 00:15:44,269
gonna update hmm to help manage the

00:15:41,509 --> 00:15:47,629
secure memory I think those patches are

00:15:44,269 --> 00:15:49,699
already pushed out at the VM level they

00:15:47,629 --> 00:15:52,610
run on the same hardware and we use grub

00:15:49,699 --> 00:15:54,439
we're not you know we built the

00:15:52,610 --> 00:15:56,389
prototype using a putty book figured out

00:15:54,439 --> 00:16:00,110
how to use grub so we set that eboot

00:15:56,389 --> 00:16:02,059
aside for now SVM ends SVM's and v ends

00:16:00,110 --> 00:16:05,779
both get services from the hypervisor as

00:16:02,059 --> 00:16:07,399
I indicated earlier the ultra vires are

00:16:05,779 --> 00:16:12,529
sanitized is everything that goes from

00:16:07,399 --> 00:16:17,360
the from the from the from the secure

00:16:12,529 --> 00:16:19,189
virtual machine to the hypervisor an SVM

00:16:17,360 --> 00:16:22,549
can share unprotected memory with the

00:16:19,189 --> 00:16:24,019
hypervisor it has to if you couldn't if

00:16:22,549 --> 00:16:25,819
you couldn't have what we call normal

00:16:24,019 --> 00:16:27,139
memory and a secure virtual machine the

00:16:25,819 --> 00:16:29,329
secure virtual machine wouldn't be able

00:16:27,139 --> 00:16:31,549
to communicate with anybody because

00:16:29,329 --> 00:16:33,259
everything but whenever the hypervisor

00:16:31,549 --> 00:16:35,239
can look at the secure virtual machines

00:16:33,259 --> 00:16:37,100
memory it only sees it encrypted so

00:16:35,239 --> 00:16:38,749
you're sending a packet off to some

00:16:37,100 --> 00:16:40,040
other remote system it's been encrypted

00:16:38,749 --> 00:16:42,230
by the ultra vires and you don't have

00:16:40,040 --> 00:16:45,470
the key so the remote system can't do it

00:16:42,230 --> 00:16:48,139
so so that that says that says that we

00:16:45,470 --> 00:16:49,879
in order to get do i/o and things into

00:16:48,139 --> 00:16:52,309
and out of a out of the authorizer

00:16:49,879 --> 00:16:54,199
you've got to do bounce buffering and

00:16:52,309 --> 00:16:55,939
you have to bounce buffer through memory

00:16:54,199 --> 00:17:00,049
that the hypervisor and it's subsystem

00:16:55,939 --> 00:17:01,939
can reference you do not we do not point

00:17:00,049 --> 00:17:03,799
the hypervisor at memory and securement

00:17:01,939 --> 00:17:05,809
in a secure memory because it can't

00:17:03,799 --> 00:17:07,850
reference it but when I say it can't

00:17:05,809 --> 00:17:09,019
reference it I'll be blunt the hardware

00:17:07,850 --> 00:17:12,350
will not allow it

00:17:09,019 --> 00:17:14,240
we have changed we've gone through we

00:17:12,350 --> 00:17:16,789
went through every single subsystem in

00:17:14,240 --> 00:17:18,529
the power chip and we looked at them and

00:17:16,789 --> 00:17:20,319
we analyzed them deeply to determine

00:17:18,529 --> 00:17:23,870
whether or not they could be made secure

00:17:20,319 --> 00:17:25,970
by our definition of secure and every

00:17:23,870 --> 00:17:28,610
subsystem that could that we couldn't

00:17:25,970 --> 00:17:31,610
make secure in the first round cannot

00:17:28,610 --> 00:17:34,470
reference secure memory if it tries

00:17:31,610 --> 00:17:38,730
you'll get a machine fault

00:17:34,470 --> 00:17:40,980
okay so you you have to to move data

00:17:38,730 --> 00:17:42,629
from secure virtual machines to the

00:17:40,980 --> 00:17:46,100
normal virtual machines you have to

00:17:42,629 --> 00:17:48,659
balance buffer that's that's the cost

00:17:46,100 --> 00:17:51,179
you know we create them with new tooling

00:17:48,659 --> 00:17:53,850
and the secure VX acute as a normal VM

00:17:51,179 --> 00:17:56,850
as I've said over and over but it

00:17:53,850 --> 00:17:59,070
execute sits that this ESM instruction

00:17:56,850 --> 00:18:01,350
is a Cisco instruction level three in

00:17:59,070 --> 00:18:03,899
power that used to be Cisco's level one

00:18:01,350 --> 00:18:06,059
and two one and now we've introduced

00:18:03,899 --> 00:18:09,980
level three which goes up to which goes

00:18:06,059 --> 00:18:14,250
up to the ultra vires a revocation I

00:18:09,980 --> 00:18:15,929
talked about I talked about this at LSS

00:18:14,250 --> 00:18:17,549
in Vancouver but I didn't talk about

00:18:15,929 --> 00:18:18,929
revocation but it came up in the

00:18:17,549 --> 00:18:22,830
question so I'll just talk about it

00:18:18,929 --> 00:18:24,990
briefly now revocation means disabling

00:18:22,830 --> 00:18:26,429
an SVM from executing on a machine where

00:18:24,990 --> 00:18:28,889
it has previous where it was previously

00:18:26,429 --> 00:18:31,559
authorized for all intents and purposes

00:18:28,889 --> 00:18:33,029
the SVM is encrypted I'll get to the

00:18:31,559 --> 00:18:35,370
format in a minute just think of it as

00:18:33,029 --> 00:18:36,929
an encrypted blob and they keep it

00:18:35,370 --> 00:18:38,519
obviously not completely encrypted

00:18:36,929 --> 00:18:40,440
otherwise it couldn't start as a normal

00:18:38,519 --> 00:18:43,019
virtual machine but think of it that way

00:18:40,440 --> 00:18:47,399
for now in the case where the SVM is

00:18:43,019 --> 00:18:48,809
multiply authorized to same us so we I

00:18:47,399 --> 00:18:50,820
told you you had to have all the public

00:18:48,809 --> 00:18:52,440
keys so I can take and build this SVM

00:18:50,820 --> 00:18:54,870
object and I can embed stuff in this

00:18:52,440 --> 00:18:56,940
encrypted blob inside of it and I can

00:18:54,870 --> 00:19:00,419
bed keys for more than one machine so

00:18:56,940 --> 00:19:02,460
that when the SVM starts up the ultra

00:19:00,419 --> 00:19:05,519
vires has to look in that list and it's

00:19:02,460 --> 00:19:07,559
fairly quick to say well is my pup is my

00:19:05,519 --> 00:19:09,600
which one of these am I supposed to be

00:19:07,559 --> 00:19:12,509
able to decrypt and if it doesn't see

00:19:09,600 --> 00:19:15,059
its identity in there it fails if it

00:19:12,509 --> 00:19:17,519
sees its identity in there it it uses

00:19:15,059 --> 00:19:19,529
the TPM to decrypt that blob looks at

00:19:17,519 --> 00:19:21,629
the results and then proceeds on with

00:19:19,529 --> 00:19:23,220
the execution so if you're revoking

00:19:21,629 --> 00:19:24,899
you're saying well do I want to revoke

00:19:23,220 --> 00:19:26,519
it on every machine that I've authorized

00:19:24,899 --> 00:19:28,590
it for or do I want to revoke it on a

00:19:26,519 --> 00:19:30,809
single machine so those are the two

00:19:28,590 --> 00:19:34,889
questions that we're sort of looking at

00:19:30,809 --> 00:19:36,899
and thinking about who's but who is

00:19:34,889 --> 00:19:39,809
revoking the access well there's really

00:19:36,899 --> 00:19:43,649
three three choices there's the user of

00:19:39,809 --> 00:19:44,559
the SVM the creator of yes vm or the

00:19:43,649 --> 00:19:45,940
owner of the inference

00:19:44,559 --> 00:19:47,649
director those are like the three

00:19:45,940 --> 00:19:49,870
primary parties who would want some

00:19:47,649 --> 00:19:53,919
revocation and should it be should

00:19:49,870 --> 00:19:57,399
revocation be reversible alright for

00:19:53,919 --> 00:20:00,009
users user Nessun nobody's forcing a

00:19:57,399 --> 00:20:01,450
user to use an SVM if if they happen to

00:20:00,009 --> 00:20:03,759
have one Nate and they don't want it

00:20:01,450 --> 00:20:06,580
anymore they can just erase it it's that

00:20:03,759 --> 00:20:09,909
simple that's a complete revocation it's

00:20:06,580 --> 00:20:13,749
not reversible but it works the creator

00:20:09,909 --> 00:20:15,879
of the SVM he we have a model that

00:20:13,749 --> 00:20:17,919
exists today in software called the

00:20:15,879 --> 00:20:20,259
license server model that gives the

00:20:17,919 --> 00:20:23,049
creator of the SVM the ability to grant

00:20:20,259 --> 00:20:27,220
and grant and remove licenses on an SVM

00:20:23,049 --> 00:20:28,779
and to even have a revocable if I revoke

00:20:27,220 --> 00:20:30,490
your license because you didn't pay me

00:20:28,779 --> 00:20:34,119
my fee and you pay the fee then I can

00:20:30,490 --> 00:20:37,539
reinstate it if you if you write your

00:20:34,119 --> 00:20:39,190
SVM and you can do this because the SVM

00:20:37,539 --> 00:20:41,320
is essentially encrypted so you can

00:20:39,190 --> 00:20:44,440
embed in secrets and set up here and go

00:20:41,320 --> 00:20:46,299
and call home or call wherever and and

00:20:44,440 --> 00:20:47,619
say am I so ought to run and if you're

00:20:46,299 --> 00:20:48,970
authorized to run you'll run and if

00:20:47,619 --> 00:20:53,019
you're not authorized to run you won't

00:20:48,970 --> 00:20:54,399
run and and we have integrity protection

00:20:53,019 --> 00:20:55,899
on our stuff so if somebody starts

00:20:54,399 --> 00:20:59,860
tooling this is trying to break it it

00:20:55,899 --> 00:21:03,460
won't run anyway so so that revocation

00:20:59,860 --> 00:21:06,190
is handled what's not handled gracefully

00:21:03,460 --> 00:21:07,869
and what we've done is enabling the

00:21:06,190 --> 00:21:11,110
infrastructure owner to decide I don't

00:21:07,869 --> 00:21:12,460
want that SVM to run because he can kill

00:21:11,110 --> 00:21:14,169
it but he kills them all because he

00:21:12,460 --> 00:21:16,240
changes his public private key set and

00:21:14,169 --> 00:21:18,190
that that gets rid of all of them

00:21:16,240 --> 00:21:20,490
we realized that's problem that's fairly

00:21:18,190 --> 00:21:23,019
heavy-handed so we're looking at various

00:21:20,490 --> 00:21:25,629
alternatives all of which will involve

00:21:23,019 --> 00:21:27,129
involve some form of a revocation list

00:21:25,629 --> 00:21:29,860
and therefore will probably not be

00:21:27,129 --> 00:21:31,330
reversible depending on which way we go

00:21:29,860 --> 00:21:33,990
if you have comments or questions on

00:21:31,330 --> 00:21:36,759
that we can talk about it later

00:21:33,990 --> 00:21:39,090
limits in the first release will not

00:21:36,759 --> 00:21:41,259
support suspend and resume and migration

00:21:39,090 --> 00:21:43,749
that's to make it easier to get the

00:21:41,259 --> 00:21:46,149
first release out and we're also not

00:21:43,749 --> 00:21:48,580
commit support over committed SVM memory

00:21:46,149 --> 00:21:50,470
in the first release our architecture

00:21:48,580 --> 00:21:53,470
non design allows a hypervisor the page

00:21:50,470 --> 00:21:55,590
SV in memory were just deferring that

00:21:53,470 --> 00:21:59,940
till we get it until we get it running

00:21:55,590 --> 00:22:02,039
then we'll then we'll put that in and we

00:21:59,940 --> 00:22:05,669
will not in the first release support

00:22:02,039 --> 00:22:07,919
dedicated devices to SVM's that that

00:22:05,669 --> 00:22:09,480
that's because in in the timeframe in

00:22:07,919 --> 00:22:11,130
which we had to design the hardware we

00:22:09,480 --> 00:22:14,400
couldn't figure out how to make it work

00:22:11,130 --> 00:22:15,779
well so we said nope so you can't

00:22:14,400 --> 00:22:17,520
dedicate a device to a virtual machine

00:22:15,779 --> 00:22:20,429
what can you do you can do all the

00:22:17,520 --> 00:22:22,200
virtual i/o you want to we have the

00:22:20,429 --> 00:22:25,409
Verizon subsystem for virtual machines

00:22:22,200 --> 00:22:27,270
it works well and and we're modifying it

00:22:25,409 --> 00:22:29,460
to the bounce buffering so that's a

00:22:27,270 --> 00:22:33,149
modification to the kernel and all the

00:22:29,460 --> 00:22:34,620
variety vices will be supported okay we

00:22:33,149 --> 00:22:36,750
understand that that's a limitation that

00:22:34,620 --> 00:22:38,399
may not be acceptable to some customers

00:22:36,750 --> 00:22:42,630
and in future releases those are things

00:22:38,399 --> 00:22:46,549
that we will consider an address it does

00:22:42,630 --> 00:22:50,520
not support transaction memory currently

00:22:46,549 --> 00:22:52,830
so an application if it uses transaction

00:22:50,520 --> 00:22:55,529
memory and it runs in an SVM it will

00:22:52,830 --> 00:23:00,029
crash all right

00:22:55,529 --> 00:23:03,720
a few more lower level details all right

00:23:00,029 --> 00:23:05,549
here's our contents of the sm blob in

00:23:03,720 --> 00:23:07,980
this case i've illustrated this

00:23:05,549 --> 00:23:10,529
particular one is encrypted for three

00:23:07,980 --> 00:23:12,480
different machines a b and c and there's

00:23:10,529 --> 00:23:15,600
the symmetric key that decrypts this

00:23:12,480 --> 00:23:17,100
blue thing wrapped under that's been

00:23:15,600 --> 00:23:20,100
encrypted with the public key of each of

00:23:17,100 --> 00:23:22,620
those machines the verification

00:23:20,100 --> 00:23:24,149
information can contains integrity

00:23:22,620 --> 00:23:27,779
information for its kernel the unit

00:23:24,149 --> 00:23:29,610
random FS and our TAS it may contain

00:23:27,779 --> 00:23:31,590
some symmetric key blobs and it may and

00:23:29,610 --> 00:23:33,390
it does contain the passphrase for the

00:23:31,590 --> 00:23:35,760
encrypted filesystem remember I said

00:23:33,390 --> 00:23:37,950
that your font your main disk is

00:23:35,760 --> 00:23:39,450
encrypted is we are truly made sure

00:23:37,950 --> 00:23:40,770
you've encrypted it one way if you have

00:23:39,450 --> 00:23:42,750
an encrypt that will encrypt it with

00:23:40,770 --> 00:23:44,130
whatever we decide is the default

00:23:42,750 --> 00:23:45,169
encryption method and stick the

00:23:44,130 --> 00:23:48,600
passphrase in there

00:23:45,169 --> 00:23:51,870
this passphrase is stuck in this blob

00:23:48,600 --> 00:23:53,490
and is inside of the ultra vires net one

00:23:51,870 --> 00:23:54,899
of the mods we have to make to the

00:23:53,490 --> 00:23:56,610
kernel is you've got to use an ultra

00:23:54,899 --> 00:23:59,450
call to get the passphrase so that you

00:23:56,610 --> 00:24:02,340
can mount your disk and see the contents

00:23:59,450 --> 00:24:06,130
otherwise you can do whatever you want

00:24:02,340 --> 00:24:09,789
with it but it'll all be encrypted so

00:24:06,130 --> 00:24:13,510
so since it's locked up in here you

00:24:09,789 --> 00:24:15,010
can't as the this came up in the the

00:24:13,510 --> 00:24:16,960
kayvyun form which is concurrent with

00:24:15,010 --> 00:24:19,539
this one you can as KVM play around with

00:24:16,960 --> 00:24:21,429
the SVM and then and then emulate it

00:24:19,539 --> 00:24:24,220
because as KVM you won't be running in

00:24:21,429 --> 00:24:27,940
secure mode and you won't be able to get

00:24:24,220 --> 00:24:30,490
the the passphrase for the disk out of

00:24:27,940 --> 00:24:33,640
out of this blob that's associated with

00:24:30,490 --> 00:24:40,590
the secure virtual machine so how do we

00:24:33,640 --> 00:24:40,590
boot this this picture refers to booting

00:24:40,980 --> 00:24:47,140
it's booting a virtual machine on top of

00:24:43,750 --> 00:24:51,390
Linux KVM soph is not part of our design

00:24:47,140 --> 00:24:55,539
it's what people normally use oh wait

00:24:51,390 --> 00:24:58,480
yes so what happens is both eventually

00:24:55,539 --> 00:25:00,309
passes control the grub which is in the

00:24:58,480 --> 00:25:04,120
prep partition it is not encrypted

00:25:00,309 --> 00:25:07,120
that's why we can start unencrypted it

00:25:04,120 --> 00:25:08,919
goes and it and it and it goes and

00:25:07,120 --> 00:25:12,340
eventually it does okay which one of

00:25:08,919 --> 00:25:14,530
these kernels do I want to boot it does

00:25:12,340 --> 00:25:16,390
its thing you can you could in an SVM

00:25:14,530 --> 00:25:19,480
have multiple kernels that you wanted to

00:25:16,390 --> 00:25:22,750
boot you don't have to have just one you

00:25:19,480 --> 00:25:24,610
know we we sort of when we had design

00:25:22,750 --> 00:25:26,770
choices we aired on the style on the

00:25:24,610 --> 00:25:28,780
side of flexibility in this in this case

00:25:26,770 --> 00:25:30,820
so you could have just one you could

00:25:28,780 --> 00:25:34,510
have more than one in any case they'll

00:25:30,820 --> 00:25:36,490
all be Z images grub boots is the image

00:25:34,510 --> 00:25:38,740
just fine so you'll get your grub men

00:25:36,490 --> 00:25:40,419
menu you'll have your default if you

00:25:38,740 --> 00:25:42,100
want to you'll have however much time

00:25:40,419 --> 00:25:44,230
you've allowed yourself to switch to a

00:25:42,100 --> 00:25:46,659
different one if you want to inside of

00:25:44,230 --> 00:25:49,659
that Z images is the blob so you start

00:25:46,659 --> 00:25:51,909
you start booting that used and that

00:25:49,659 --> 00:25:54,429
gives you a slight I slash blue file

00:25:51,909 --> 00:25:56,200
system which is unencrypted by we have

00:25:54,429 --> 00:25:57,429
some integrity information on the things

00:25:56,200 --> 00:26:01,240
that we need to know about that will

00:25:57,429 --> 00:26:03,220
check and then you'll and then you have

00:26:01,240 --> 00:26:05,799
the real root filesystem which is

00:26:03,220 --> 00:26:08,760
encrypted and I've explained how we you

00:26:05,799 --> 00:26:08,760
know what we do there

00:26:09,430 --> 00:26:15,970
so we start as a normal virtual machine

00:26:12,250 --> 00:26:18,130
at the end of prominent we say give me

00:26:15,970 --> 00:26:20,740
it main switch me to secure mode you get

00:26:18,130 --> 00:26:22,590
copied into secure memory we searched

00:26:20,740 --> 00:26:25,750
for the properly wrapped symmetric key

00:26:22,590 --> 00:26:28,330
after we copy you into senior memory if

00:26:25,750 --> 00:26:29,890
it's not found execution fails if it's

00:26:28,330 --> 00:26:32,070
found we decrypt the verification

00:26:29,890 --> 00:26:34,360
information if decryption fails if

00:26:32,070 --> 00:26:36,640
decryption if decryption fails

00:26:34,360 --> 00:26:38,560
verification fails using the

00:26:36,640 --> 00:26:40,390
verification information to confirm the

00:26:38,560 --> 00:26:42,490
integrity information of the kernel unit

00:26:40,390 --> 00:26:46,180
ram FS and the our test information if

00:26:42,490 --> 00:26:47,860
that if if I mean that is successful if

00:26:46,180 --> 00:26:49,890
all that if the integrity integrity

00:26:47,860 --> 00:26:53,260
means if the bits have not been modified

00:26:49,890 --> 00:26:55,420
then we we passed control to the SVM in

00:26:53,260 --> 00:26:59,580
secure mode and the pass fail pass phase

00:26:55,420 --> 00:27:02,170
is available through the ultra call the

00:26:59,580 --> 00:27:03,970
yes'm ultra call is the only one you can

00:27:02,170 --> 00:27:07,750
make from a normal normal virtual

00:27:03,970 --> 00:27:09,610
machine you know it makes it easier and

00:27:07,750 --> 00:27:11,950
we have some altered costs for the

00:27:09,610 --> 00:27:13,930
hypervisor and we check to make sure

00:27:11,950 --> 00:27:15,900
that if you're coming into your advisors

00:27:13,930 --> 00:27:19,360
are coming in from the right location

00:27:15,900 --> 00:27:24,750
all right so we're gonna make this open

00:27:19,360 --> 00:27:27,220
source so we've already in education I'm

00:27:24,750 --> 00:27:29,170
walking through the things that we that

00:27:27,220 --> 00:27:31,630
we think we're gonna have to change in

00:27:29,170 --> 00:27:34,990
order to make this work we had to change

00:27:31,630 --> 00:27:36,400
prominent around so that this notion of

00:27:34,990 --> 00:27:39,340
letting you run through prominent

00:27:36,400 --> 00:27:41,890
unencrypted works as long as prominent

00:27:39,340 --> 00:27:43,210
doesn't make changes that would cause

00:27:41,890 --> 00:27:46,930
the intent the integrity verification

00:27:43,210 --> 00:27:49,750
failed originally it did these patches

00:27:46,930 --> 00:27:52,600
change that so it doesn't do that any

00:27:49,750 --> 00:28:02,500
longer so we can do that there's a

00:27:52,600 --> 00:28:06,220
wrapper and so we so we've made some

00:28:02,500 --> 00:28:08,380
changes to let the ESM stuff the ESM bla

00:28:06,220 --> 00:28:11,110
be added to the CCD image that that

00:28:08,380 --> 00:28:13,690
changes up we're probably going to have

00:28:11,110 --> 00:28:16,270
to make some form of a change to grub

00:28:13,690 --> 00:28:17,920
we're debate not to grub the core of

00:28:16,270 --> 00:28:19,840
grub but to either some of the scripts

00:28:17,920 --> 00:28:21,330
or some of the things around it those

00:28:19,840 --> 00:28:26,340
changes have not been

00:28:21,330 --> 00:28:29,430
but they will be shortly I've this is a

00:28:26,340 --> 00:28:33,480
summary of what we call the ESN calls

00:28:29,430 --> 00:28:34,860
available from the SPM to the ultra

00:28:33,480 --> 00:28:38,490
vires

00:28:34,860 --> 00:28:42,090
or from the hypervisor the optivisor SKA

00:28:38,490 --> 00:28:44,940
read and write scum scum is skon

00:28:42,090 --> 00:28:46,860
registers are the registers in the power

00:28:44,940 --> 00:28:48,750
architecture that the hypervisor and

00:28:46,860 --> 00:28:51,510
other entities used to control the

00:28:48,750 --> 00:28:55,410
configuration of the hardware the entire

00:28:51,510 --> 00:28:56,730
machine can be reconfigured in not the

00:28:55,410 --> 00:28:58,740
entire machine but a good part of the

00:28:56,730 --> 00:29:01,590
machine can be reconfigured using the

00:28:58,740 --> 00:29:03,030
Scone registers and for those of you or

00:29:01,590 --> 00:29:05,100
hardware you realize this means you

00:29:03,030 --> 00:29:08,070
could bypass almost any security feature

00:29:05,100 --> 00:29:09,780
you wanted to which is why you can try

00:29:08,070 --> 00:29:11,490
tasks on register without the ultra

00:29:09,780 --> 00:29:13,650
vires look at it looking at and said do

00:29:11,490 --> 00:29:16,260
I like this if I if I think it's okay it

00:29:13,650 --> 00:29:18,410
goes and if I don't you get told you

00:29:16,260 --> 00:29:21,240
were successful but it doesn't happen

00:29:18,410 --> 00:29:23,130
it's you know we just anything that we

00:29:21,240 --> 00:29:26,300
don't like about your scone request will

00:29:23,130 --> 00:29:28,800
be blocked out without telling you I

00:29:26,300 --> 00:29:33,390
guess we we're concerned about security

00:29:28,800 --> 00:29:35,580
so we can you can pick out you can page

00:29:33,390 --> 00:29:38,820
in and page out you can write you can

00:29:35,580 --> 00:29:40,770
write the partition table you UV return

00:29:38,820 --> 00:29:42,600
as the call that the hypervisor uses is

00:29:40,770 --> 00:29:45,390
to tell the altar visor I want to start

00:29:42,600 --> 00:29:47,250
this secure virtual machine we had we

00:29:45,390 --> 00:29:48,690
were originally going to not let the

00:29:47,250 --> 00:29:50,400
hypervisor know that the machine was

00:29:48,690 --> 00:29:51,960
secure virtual machine or not we decided

00:29:50,400 --> 00:29:53,730
to change that since it we didn't think

00:29:51,960 --> 00:29:57,300
it could really hurt it so we make it

00:29:53,730 --> 00:29:59,400
explicit registering and unregistering

00:29:57,300 --> 00:30:02,490
them memory slots is about getting and

00:29:59,400 --> 00:30:05,820
sharing memory we can you can terminate

00:30:02,490 --> 00:30:09,950
us SP and terminate I think it's coming

00:30:05,820 --> 00:30:16,410
out of the SVM share and unchi oh sorry

00:30:09,950 --> 00:30:19,830
well we got we've got four in power we

00:30:16,410 --> 00:30:21,180
have something called VP a and then and

00:30:19,830 --> 00:30:22,560
a couple of other things that we have to

00:30:21,180 --> 00:30:24,240
share with the hypervisor the shared

00:30:22,560 --> 00:30:26,310
pages is the share page and unshared

00:30:24,240 --> 00:30:29,100
page the memory slots are the other

00:30:26,310 --> 00:30:30,570
things and we have the ESM we also have

00:30:29,100 --> 00:30:32,070
some things so that secure virtual

00:30:30,570 --> 00:30:33,190
machines can share memory across from

00:30:32,070 --> 00:30:37,990
each other but they're not

00:30:33,190 --> 00:30:39,850
list right now for KVM there's some

00:30:37,990 --> 00:30:43,180
special H calls we needed we need to

00:30:39,850 --> 00:30:49,480
start it finish it terminated page n

00:30:43,180 --> 00:30:51,220
page out and then TPM comm is just we

00:30:49,480 --> 00:30:53,560
need to add this H call so the ultra

00:30:51,220 --> 00:30:55,060
vires could will reflect TPM comm to the

00:30:53,560 --> 00:30:56,710
hypervisor when it needs to talk to the

00:30:55,060 --> 00:31:00,190
TPM and the response will come back to

00:30:56,710 --> 00:31:02,410
the optimizer when all tries reflects it

00:31:00,190 --> 00:31:04,360
to the hypervisor as if it's coming from

00:31:02,410 --> 00:31:08,770
the SVN but it's really the ultra vires

00:31:04,360 --> 00:31:10,780
that's doing it we have to modify hmmm

00:31:08,770 --> 00:31:12,190
where you because we want to use HM and

00:31:10,780 --> 00:31:13,900
we don't write a bunch of code we're

00:31:12,190 --> 00:31:16,480
trying to explain exploit much of what

00:31:13,900 --> 00:31:18,670
the Linux is out there right now so

00:31:16,480 --> 00:31:20,530
we've got a proposed set there that will

00:31:18,670 --> 00:31:22,090
allow hmm to manage moving memory

00:31:20,530 --> 00:31:23,860
between things between secure and

00:31:22,090 --> 00:31:26,620
insecure of course the authorizer will

00:31:23,860 --> 00:31:28,450
get in the mint get in and encrypt or

00:31:26,620 --> 00:31:33,340
decrypt as necessary as those things

00:31:28,450 --> 00:31:36,180
happen oh I got virtio here we have a

00:31:33,340 --> 00:31:39,310
set of initial patches out for vert il

00:31:36,180 --> 00:31:41,080
this is a set that was the design but

00:31:39,310 --> 00:31:43,900
we're debating a simpler set of patches

00:31:41,080 --> 00:31:46,630
for Verdi oh that that rely on the DMA

00:31:43,900 --> 00:31:48,130
ops and the DMA ops structure that's in

00:31:46,630 --> 00:31:50,440
the Verdi oh that might be simpler than

00:31:48,130 --> 00:31:52,230
the ones that are out there and we were

00:31:50,440 --> 00:31:55,020
working with the Verdi o maintainer to

00:31:52,230 --> 00:31:57,250
zero in on exactly the set of patches

00:31:55,020 --> 00:31:58,930
the sorts of things that we've been

00:31:57,250 --> 00:32:00,280
modifying and looking at modifying or

00:31:58,930 --> 00:32:03,790
similar to the things that a and beeps

00:32:00,280 --> 00:32:05,920
in looking at modifying and then we're

00:32:03,790 --> 00:32:07,950
talking we have set of changes out for

00:32:05,920 --> 00:32:10,390
VP a which is a power specific thing

00:32:07,950 --> 00:32:12,520
let's see now

00:32:10,390 --> 00:32:18,130
just to get a little more into the

00:32:12,520 --> 00:32:22,990
hardware this gives you the point this

00:32:18,130 --> 00:32:24,820
is what we changed and a high-level we

00:32:22,990 --> 00:32:28,090
add an address bit that indicates the

00:32:24,820 --> 00:32:31,840
memory secure or not secure it's a high

00:32:28,090 --> 00:32:34,290
order address bit much higher than any

00:32:31,840 --> 00:32:37,300
machines that we have exist for a while

00:32:34,290 --> 00:32:39,070
we added an MSR set s bit that written

00:32:37,300 --> 00:32:43,300
that indicates the process is running

00:32:39,070 --> 00:32:44,210
secure we added we now because we have

00:32:43,300 --> 00:32:47,330
that we now have

00:32:44,210 --> 00:32:49,010
these are your visit your what state

00:32:47,330 --> 00:32:50,660
you're in if you're in secure mode these

00:32:49,010 --> 00:32:53,240
are what state you're in if you're not

00:32:50,660 --> 00:32:58,190
secure and we have one that's reserved

00:32:53,240 --> 00:33:00,230
for future capabilities that we're

00:32:58,190 --> 00:33:03,050
looking at we added a bunch of new

00:33:00,230 --> 00:33:05,330
registers like SMF ctrl which tells the

00:33:03,050 --> 00:33:06,890
system whether SMS has enabled the

00:33:05,330 --> 00:33:09,470
hardware is designed so it comes up with

00:33:06,890 --> 00:33:12,080
us and MF enabled if it gets if s enough

00:33:09,470 --> 00:33:14,420
gets disabled it cannot be renamed

00:33:12,080 --> 00:33:16,630
without rebooting the machine once it's

00:33:14,420 --> 00:33:18,920
turned off it's often for the duration

00:33:16,630 --> 00:33:21,350
we added a bunch of ultra vires of

00:33:18,920 --> 00:33:25,190
specific registers you are mor urs at

00:33:21,350 --> 00:33:27,530
USSR USR are zero and one you SPR G zero

00:33:25,190 --> 00:33:28,970
on one which are similar to the special

00:33:27,530 --> 00:33:32,380
registers that we make available for

00:33:28,970 --> 00:33:35,510
hypervisors on power we added a new

00:33:32,380 --> 00:33:37,370
instruction you RFID which on the ultra

00:33:35,510 --> 00:33:39,430
vires can use which allows it to return

00:33:37,370 --> 00:33:46,430
to something and flip on the S bit a

00:33:39,430 --> 00:33:48,500
convenient feature and okay so and these

00:33:46,430 --> 00:33:50,390
other things that I mentioned earlier

00:33:48,500 --> 00:33:51,890
all the hyper calls go to the ultra

00:33:50,390 --> 00:33:55,250
vires all the interrupts go to the ultra

00:33:51,890 --> 00:33:56,840
vires when you're in secure mode and we

00:33:55,250 --> 00:34:01,310
reflect stuff tonight providers so

00:33:56,840 --> 00:34:02,840
here's our quick summary we protect you

00:34:01,310 --> 00:34:05,090
from the hypervisor other software

00:34:02,840 --> 00:34:06,710
system admins the security of the main

00:34:05,090 --> 00:34:08,630
is the VM at rest in transit are

00:34:06,710 --> 00:34:10,760
executing we don't change the

00:34:08,630 --> 00:34:12,650
applications that run in the SVM we have

00:34:10,760 --> 00:34:14,660
some new cake and figure out operations

00:34:12,650 --> 00:34:17,000
KVM must be paravirtualized those

00:34:14,660 --> 00:34:19,610
patches are being put together where

00:34:17,000 --> 00:34:21,890
your secure memory has integrity and

00:34:19,610 --> 00:34:23,690
confidentiality protection we and you

00:34:21,890 --> 00:34:26,120
can embed secrets we're limited by the

00:34:23,690 --> 00:34:28,490
available memory and it all will be open

00:34:26,120 --> 00:34:29,900
source in the there's a bunch of links

00:34:28,490 --> 00:34:31,820
to papers and things that are really

00:34:29,900 --> 00:34:39,070
related to this and do you have any

00:34:31,820 --> 00:34:39,070
questions questions what reference knife

00:34:39,100 --> 00:34:47,750
okay so one one of the things that that

00:34:43,750 --> 00:34:51,770
that that we have in STX is that is is

00:34:47,750 --> 00:34:55,640
the ability for for Enclave to prove

00:34:51,770 --> 00:34:57,920
that it runs inside secure Enclave and

00:34:55,640 --> 00:35:02,390
not inside emulated environment

00:34:57,920 --> 00:35:06,680
is there such thing in this this system

00:35:02,390 --> 00:35:09,620
well you so that if you are if you have

00:35:06,680 --> 00:35:10,910
an enclave running on yeah I know what

00:35:09,620 --> 00:35:12,890
you're talking about basically what

00:35:10,910 --> 00:35:15,230
we're going to do is be exploring at the

00:35:12,890 --> 00:35:16,790
TPM for that so that you can know that

00:35:15,230 --> 00:35:18,830
you're actually talking to a system that

00:35:16,790 --> 00:35:22,700
has a real TPM that was on an IBM

00:35:18,830 --> 00:35:24,080
platform and and in the and and then you

00:35:22,700 --> 00:35:25,970
can use that you can use the remote

00:35:24,080 --> 00:35:28,190
attestation for that feature it's

00:35:25,970 --> 00:35:29,450
similar to the attestation that you have

00:35:28,190 --> 00:35:31,790
in the Enclave because what you've done

00:35:29,450 --> 00:35:34,010
is you you and you've put in and I at

00:35:31,790 --> 00:35:36,080
the station capability so the on code

00:35:34,010 --> 00:35:37,820
can it's until I rise right right you're

00:35:36,080 --> 00:35:40,250
just going to exploit the attestation on

00:35:37,820 --> 00:35:44,060
the chair you can you can it's actually

00:35:40,250 --> 00:35:45,680
equal and hardware chip in a way yeah

00:35:44,060 --> 00:35:53,150
yeah so we're just exploiting the

00:35:45,680 --> 00:35:54,590
authorization in the TPM question you're

00:35:53,150 --> 00:35:56,510
saying that everything will be open

00:35:54,590 --> 00:35:59,330
source doesn't mean ultra vital also

00:35:56,510 --> 00:36:03,160
doesn't mean my ultra vires also ultra

00:35:59,330 --> 00:36:03,160
visor will be open source okay great

00:36:05,060 --> 00:36:12,080
could you please Nicole monitor and see

00:36:08,090 --> 00:36:15,110
our crew please tell if there are any

00:36:12,080 --> 00:36:21,040
key differences from RM monitor for

00:36:15,110 --> 00:36:24,080
ultra visor from 1:00 a.m. monitor a RM

00:36:21,040 --> 00:36:26,810
arm monitor I'm not that familiar with

00:36:24,080 --> 00:36:29,410
our monitor so right let's take that

00:36:26,810 --> 00:36:29,410
question offline

00:36:36,540 --> 00:36:42,100
so does power system have protection

00:36:39,580 --> 00:36:45,640
against somebody installing something

00:36:42,100 --> 00:36:48,880
today random access memory bus system is

00:36:45,640 --> 00:36:51,420
the circular memory encrypted it's their

00:36:48,880 --> 00:36:54,640
protection against Hardware tampering

00:36:51,420 --> 00:36:57,360
okay so we do not have a hardware

00:36:54,640 --> 00:37:02,110
encryption on our memory right now it is

00:36:57,360 --> 00:37:03,580
fairly difficult to tamper with the

00:37:02,110 --> 00:37:05,110
hardware memory but that's something

00:37:03,580 --> 00:37:10,300
that will be coming but it won't be in

00:37:05,110 --> 00:37:12,460
the first release and it probably when

00:37:10,300 --> 00:37:14,860
we for power and open power when we do

00:37:12,460 --> 00:37:17,440
hardware encryption it's going to be

00:37:14,860 --> 00:37:18,760
sort of like what you see in zseries if

00:37:17,440 --> 00:37:22,120
you're familiar with that we now have

00:37:18,760 --> 00:37:24,520
this pervasive encryption in zseries so

00:37:22,120 --> 00:37:25,930
the encryption of the memory that

00:37:24,520 --> 00:37:27,730
protects the encrypted memory will be

00:37:25,930 --> 00:37:29,620
orthogonal the hardware a part of that

00:37:27,730 --> 00:37:31,000
encryption will be orthogonal and the

00:37:29,620 --> 00:37:34,150
ultra vires will still have its own

00:37:31,000 --> 00:37:37,600
independent encryption monthly Wiseman

00:37:34,150 --> 00:37:40,480
General Electric you mentioned that the

00:37:37,600 --> 00:37:42,790
VMS are gonna have are gonna have a

00:37:40,480 --> 00:37:43,930
tunnel down to the physical BPM so

00:37:42,790 --> 00:37:47,080
they're gonna be sharing the same

00:37:43,930 --> 00:37:50,980
physical TPM is that the proposal that

00:37:47,080 --> 00:37:53,890
we don't we don't in our no we don't

00:37:50,980 --> 00:37:55,960
have the VM share this physical TPM the

00:37:53,890 --> 00:37:58,870
ultra visor has access to the physical

00:37:55,960 --> 00:38:02,200
TPM as the hypervisor has access to the

00:37:58,870 --> 00:38:05,620
physical TPM the the operating system

00:38:02,200 --> 00:38:10,240
that boots on the hardware has a device

00:38:05,620 --> 00:38:14,020
driver for the physical TPM and it has a

00:38:10,240 --> 00:38:18,580
TSS in it that allows the virtual

00:38:14,020 --> 00:38:20,560
machines above it to share access so I

00:38:18,580 --> 00:38:22,390
guess if they're if the virtual machine

00:38:20,560 --> 00:38:24,850
is written to access the physical TPM

00:38:22,390 --> 00:38:28,060
yes we'll all be using the same one so

00:38:24,850 --> 00:38:29,890
then but we're not bypassing there's

00:38:28,060 --> 00:38:31,510
only one device driver in the entire

00:38:29,890 --> 00:38:34,270
system we're not putting another one in

00:38:31,510 --> 00:38:37,360
so so kind of get to where your codes

00:38:34,270 --> 00:38:39,190
going then huh I mean the TPMS key

00:38:37,360 --> 00:38:41,860
hierarchy works very well for

00:38:39,190 --> 00:38:45,040
virtualization and sharing but the PC

00:38:41,860 --> 00:38:45,850
ours do not so how are you able if you

00:38:45,040 --> 00:38:48,370
have these multiple

00:38:45,850 --> 00:38:51,490
bm's how were you able how are you gonna

00:38:48,370 --> 00:38:53,620
be able to attest to launching each one

00:38:51,490 --> 00:38:55,960
of these VMs and healing through tests

00:38:53,620 --> 00:38:57,790
what operating system launched and then

00:38:55,960 --> 00:39:00,430
kind of a follow-up to that if they turn

00:38:57,790 --> 00:39:02,830
on I am a how do they all share the same

00:39:00,430 --> 00:39:07,000
if you're sharing the same physical ppm

00:39:02,830 --> 00:39:08,530
well they do that go to a VT p.m. okay

00:39:07,000 --> 00:39:11,020
I'm not sure I've got all of your

00:39:08,530 --> 00:39:13,480
question the altar visor actually wasn't

00:39:11,020 --> 00:39:15,370
the altar visor gets booted as part of

00:39:13,480 --> 00:39:17,350
it's part of the firmware and it

00:39:15,370 --> 00:39:21,040
actually won't start if the PC RS are

00:39:17,350 --> 00:39:23,680
not in in the correct state all right

00:39:21,040 --> 00:39:24,820
so if if the PC RS are not in the

00:39:23,680 --> 00:39:26,770
correct state in other words you're

00:39:24,820 --> 00:39:30,330
trying to boot something else the secret

00:39:26,770 --> 00:39:33,820
for that machine is locked permanently

00:39:30,330 --> 00:39:38,920
that's that's the only other thing we

00:39:33,820 --> 00:39:43,840
need the the TPM the ultra Pfizer needs

00:39:38,920 --> 00:39:45,790
to TPM for is using the the private key

00:39:43,840 --> 00:39:47,740
to decrypt things that's it

00:39:45,790 --> 00:39:50,380
we don't ever reference any other PCRs

00:39:47,740 --> 00:39:53,230
or anything so as we're coming up we

00:39:50,380 --> 00:39:57,370
have a fairly fancy policy that allows

00:39:53,230 --> 00:40:01,030
us to set a password for access to the

00:39:57,370 --> 00:40:04,300
private key and so once on the boot of

00:40:01,030 --> 00:40:06,400
every SVM the ultras are uses that

00:40:04,300 --> 00:40:09,880
password is created when the firmware is

00:40:06,400 --> 00:40:12,100
booting up before you get to the boot of

00:40:09,880 --> 00:40:14,860
the base operating system and when that

00:40:12,100 --> 00:40:17,290
as Park creating that password the TV's

00:40:14,860 --> 00:40:20,860
PCR is that it's based on our extended

00:40:17,290 --> 00:40:23,080
to so nobody else can do it and then the

00:40:20,860 --> 00:40:24,910
ultra visor has that password and then

00:40:23,080 --> 00:40:27,580
every time it wants to start an SVM it

00:40:24,910 --> 00:40:29,410
ask the TPM to decrypt this blob and

00:40:27,580 --> 00:40:33,340
hand it back and then keep going so

00:40:29,410 --> 00:40:35,050
we're not we don't care about the PC RS

00:40:33,340 --> 00:40:36,940
or anything else after that that's all

00:40:35,050 --> 00:40:42,910
we use it for we use it for holding our

00:40:36,940 --> 00:40:45,630
secret and decryption and that's it okay

00:40:42,910 --> 00:40:50,140
so you really do have V TPMS for

00:40:45,630 --> 00:40:52,120
individual yeah the V TPM is up in KVM

00:40:50,140 --> 00:40:53,560
we don't oh I see we don't we don't

00:40:52,120 --> 00:40:55,150
we're not taking that away we're not

00:40:53,560 --> 00:40:58,570
going to be charity we're not V

00:40:55,150 --> 00:41:00,310
has its own VT p.m. every VM and cuneus

00:40:58,570 --> 00:41:02,440
fans would have their own VT p.m.

00:41:00,310 --> 00:41:06,160
exactly but I think that probably

00:41:02,440 --> 00:41:07,540
addresses your quiz question is okay but

00:41:06,160 --> 00:41:09,190
I think I have to if there are more

00:41:07,540 --> 00:41:11,470
questions maybe there is a break right

00:41:09,190 --> 00:41:12,980
now so you can come talk to speaker so

00:41:11,470 --> 00:41:18,489
let's thank the speaker

00:41:12,980 --> 00:41:18,489

YouTube URL: https://www.youtube.com/watch?v=9ixMd9wwRrs


