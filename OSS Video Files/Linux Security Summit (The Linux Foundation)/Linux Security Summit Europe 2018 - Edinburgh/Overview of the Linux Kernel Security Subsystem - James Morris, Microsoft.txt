Title: Overview of the Linux Kernel Security Subsystem - James Morris, Microsoft
Publication date: 2018-10-26
Playlist: Linux Security Summit Europe 2018 - Edinburgh
Description: 
	Overview of the Linux Kernel Security Subsystem - James Morris, MicrosoftÂ 

This talk will provide an overview of the Linux kernel security subsystem, starting with a brief history of Linux kernel security and its evolution. Major components of Linux kernel security will be identified and explained, and information will be provided on how to work with and even become part of the Linux kernel security community.

About James Morris
James is the maintainer of the Linux security subsystem, and kernel engineer at Microsoft.
Captions: 
	00:00:00,030 --> 00:00:04,560
guess my microphone is working I think

00:00:02,639 --> 00:00:06,600
this might be the first time I've spoken

00:00:04,560 --> 00:00:09,000
at a Security Summit instead of being

00:00:06,600 --> 00:00:12,360
the emcee and so this will just be a

00:00:09,000 --> 00:00:15,210
brief high-level overview of Linux

00:00:12,360 --> 00:00:17,220
kernel security it may be a little high

00:00:15,210 --> 00:00:19,020
level for some of the more experienced

00:00:17,220 --> 00:00:21,630
folk here but we want to bring more

00:00:19,020 --> 00:00:23,130
people into the community and this is

00:00:21,630 --> 00:00:25,019
kind of a guess a bit of a level set and

00:00:23,130 --> 00:00:28,130
there will be more detailed drill downs

00:00:25,019 --> 00:00:32,399
into the the various aspects of the

00:00:28,130 --> 00:00:37,140
kernel security framework in in

00:00:32,399 --> 00:00:39,750
subsequent talks so just quickly as

00:00:37,140 --> 00:00:43,410
mentioned I maintain the security

00:00:39,750 --> 00:00:45,510
subsystem tree which collects quite a

00:00:43,410 --> 00:00:48,090
lot of the security functionality to

00:00:45,510 --> 00:00:50,100
push tool in us but security spread out

00:00:48,090 --> 00:00:52,110
through the tree so that the borders

00:00:50,100 --> 00:00:55,050
that are fairly nebulous it's really a

00:00:52,110 --> 00:00:57,239
it's a community effort spread across

00:00:55,050 --> 00:01:00,329
you know many many people dozens of

00:00:57,239 --> 00:01:04,619
people I'm employed as a kernel engineer

00:01:00,329 --> 00:01:06,689
at Microsoft I work on what they pay me

00:01:04,619 --> 00:01:11,400
to do the upstream maintenance and I

00:01:06,689 --> 00:01:16,920
also work on Linux security architecture

00:01:11,400 --> 00:01:18,689
at Microsoft and previously I had been

00:01:16,920 --> 00:01:21,810
involved in netfilter

00:01:18,689 --> 00:01:24,450
I was the original author of the crypto

00:01:21,810 --> 00:01:28,799
API so I'm the one to blame for for that

00:01:24,450 --> 00:01:33,090
API I was involved in the original LSM

00:01:28,799 --> 00:01:34,500
development and I worked on selinux Red

00:01:33,090 --> 00:01:37,560
Hat and prior to this role I was

00:01:34,500 --> 00:01:40,079
actually a kernel manager at Oracle so

00:01:37,560 --> 00:01:44,369
I've gone back to more technical type of

00:01:40,079 --> 00:01:47,790
work so I will just do a bit of a

00:01:44,369 --> 00:01:51,299
background into Linux kernel security

00:01:47,790 --> 00:01:54,020
which will help explain some of how it's

00:01:51,299 --> 00:01:58,409
become the way it's can't become and why

00:01:54,020 --> 00:02:01,229
and I'll go through at a high level some

00:01:58,409 --> 00:02:03,780
of the major components of Linux kernel

00:02:01,229 --> 00:02:05,460
security and then I'll include some

00:02:03,780 --> 00:02:07,020
resources for people who want to get

00:02:05,460 --> 00:02:09,090
involved if you want to learn more or

00:02:07,020 --> 00:02:10,709
contribute at the

00:02:09,090 --> 00:02:12,750
and and these slides are actually up on

00:02:10,709 --> 00:02:18,349
the website if you go to the event page

00:02:12,750 --> 00:02:18,349
in slides and have a look there

00:02:19,980 --> 00:02:28,019
so the Linux kernel security model is

00:02:22,910 --> 00:02:31,080
it's based on UNIX so it's well known

00:02:28,019 --> 00:02:34,890
that Linux was a clone of Unix

00:02:31,080 --> 00:02:36,239
and as such it inherited the security

00:02:34,890 --> 00:02:39,140
model from UNIX which is fairly

00:02:36,239 --> 00:02:42,329
rudimentary it's called DAC

00:02:39,140 --> 00:02:45,090
discretionary access control and this

00:02:42,329 --> 00:02:46,739
essentially says that if you create an

00:02:45,090 --> 00:02:49,829
object and you own that object then you

00:02:46,739 --> 00:02:52,019
can set the security permissions of who

00:02:49,829 --> 00:02:53,910
can access and access that and the

00:02:52,019 --> 00:02:58,590
permissions are fairly coarse and it

00:02:53,910 --> 00:03:00,870
keeps it fairly simple and it does a

00:02:58,590 --> 00:03:03,120
reasonably good job for when it was

00:03:00,870 --> 00:03:07,160
designed was actually designed in the

00:03:03,120 --> 00:03:09,030
late 1960s and implemented in the 70s

00:03:07,160 --> 00:03:10,140
and it was actually a different

00:03:09,030 --> 00:03:15,840
completely different culture then you

00:03:10,140 --> 00:03:19,350
didn't have a PT's you didn't have the

00:03:15,840 --> 00:03:23,250
Internet as we know it and there was

00:03:19,350 --> 00:03:24,599
also a different cultural factor at the

00:03:23,250 --> 00:03:26,190
time where people were trying to share

00:03:24,599 --> 00:03:27,870
there wasn't really much of a concept

00:03:26,190 --> 00:03:29,810
and it still today if you find an old

00:03:27,870 --> 00:03:32,549
UNIX system even from more recent

00:03:29,810 --> 00:03:36,239
decades sometimes there'll be no

00:03:32,549 --> 00:03:37,650
password set on route so you the

00:03:36,239 --> 00:03:41,519
citizens would just be brought up and

00:03:37,650 --> 00:03:44,489
used by people so one of the originators

00:03:41,519 --> 00:03:46,829
of unix dennis ritchie wrote a paper in

00:03:44,489 --> 00:03:48,720
1979 called on the security of unix

00:03:46,829 --> 00:03:51,389
where he did a very good security

00:03:48,720 --> 00:03:53,190
analysis that's actually a good paper to

00:03:51,389 --> 00:03:55,139
look up and read because it also shows

00:03:53,190 --> 00:03:59,130
you how to go about doing security and

00:03:55,139 --> 00:04:00,930
also there's a very smart guy and this

00:03:59,130 --> 00:04:02,370
is where the quote comes from so i this

00:04:00,930 --> 00:04:04,769
is what i have found this paper i was

00:04:02,370 --> 00:04:07,019
trying to dig up this sometimes repeated

00:04:04,769 --> 00:04:08,579
quote and he said that unix was not

00:04:07,019 --> 00:04:10,470
developed with security in any realistic

00:04:08,579 --> 00:04:11,970
sense in mind and he said this fact

00:04:10,470 --> 00:04:14,989
alone guarantees a vast number of holes

00:04:11,970 --> 00:04:18,539
so 1979 this was the guarantee that

00:04:14,989 --> 00:04:21,299
dennis made in that paper and i think

00:04:18,539 --> 00:04:22,900
that if you have been tracking unix and

00:04:21,299 --> 00:04:27,520
unix-like secure

00:04:22,900 --> 00:04:31,060
really in recent decades you can you

00:04:27,520 --> 00:04:35,320
would agree that that lack of design so

00:04:31,060 --> 00:04:36,729
one of the issues there is that in Linux

00:04:35,320 --> 00:04:39,000
and other operating systems that were

00:04:36,729 --> 00:04:41,970
designed in similar eras had to retrofit

00:04:39,000 --> 00:04:44,110
security with breaking the existing

00:04:41,970 --> 00:04:46,169
applications and that's been very

00:04:44,110 --> 00:04:49,210
difficult in particular lunes is very

00:04:46,169 --> 00:04:50,760
stringent about not breaking user space

00:04:49,210 --> 00:04:52,990
so there are all kinds of amazing

00:04:50,760 --> 00:04:55,990
security models and security ideas out

00:04:52,990 --> 00:04:59,169
there and that have been proposed over

00:04:55,990 --> 00:05:01,330
many decades but for us in the Linux

00:04:59,169 --> 00:05:08,650
world in reality we have to ensure that

00:05:01,330 --> 00:05:12,310
we don't break existing user space so

00:05:08,650 --> 00:05:13,449
one of the core issues and to give a bit

00:05:12,310 --> 00:05:15,240
of a background as to why there are so

00:05:13,449 --> 00:05:17,410
many extensions and enhancements to

00:05:15,240 --> 00:05:19,389
Linux security is the discretionary

00:05:17,410 --> 00:05:21,729
access control is insufficient for

00:05:19,389 --> 00:05:24,400
modern security threats and this was

00:05:21,729 --> 00:05:25,900
outlined really well in a paper that was

00:05:24,400 --> 00:05:29,020
produced along with the original sa

00:05:25,900 --> 00:05:31,419
Linux project by the US National

00:05:29,020 --> 00:05:33,310
Security Agency where they were making

00:05:31,419 --> 00:05:35,770
the case for mandatory access control I

00:05:33,310 --> 00:05:38,410
think it's called the inevitability of

00:05:35,770 --> 00:05:39,960
failure is the is the paper but

00:05:38,410 --> 00:05:42,250
essentially discretionary access control

00:05:39,960 --> 00:05:44,979
in particular doesn't protect against

00:05:42,250 --> 00:05:49,210
flawed or malicious code so just if you

00:05:44,979 --> 00:05:50,590
are in an object or if you are if you

00:05:49,210 --> 00:05:52,810
own yeah if you are an object scene you

00:05:50,590 --> 00:05:55,419
write a piece of code and that code is

00:05:52,810 --> 00:05:58,050
malicious then the addict provides no

00:05:55,419 --> 00:06:00,760
protection against that

00:05:58,050 --> 00:06:02,770
it also doesn't cover all security

00:06:00,760 --> 00:06:04,510
critical functions so the original UNIX

00:06:02,770 --> 00:06:08,910
security was based on the file system

00:06:04,510 --> 00:06:12,460
and inode permissions so for example we

00:06:08,910 --> 00:06:15,280
network facing demons there's there's

00:06:12,460 --> 00:06:17,470
very limited security functionality in

00:06:15,280 --> 00:06:21,160
the tree in the traditional unix model

00:06:17,470 --> 00:06:27,060
and for example if you have a web server

00:06:21,160 --> 00:06:29,650
web server listening on port 80 and that

00:06:27,060 --> 00:06:32,020
becomes compromised then it can be quite

00:06:29,650 --> 00:06:35,620
easily turned into a

00:06:32,020 --> 00:06:37,590
am i all server to send spam around and

00:06:35,620 --> 00:06:41,770
discretionary access control really has

00:06:37,590 --> 00:06:45,040
no impact on that and also in particular

00:06:41,770 --> 00:06:46,270
if it's running with privilege then it

00:06:45,040 --> 00:06:48,370
will have access to all kinds of things

00:06:46,270 --> 00:06:50,740
that it doesn't need usually on a dark

00:06:48,370 --> 00:06:52,930
and the other aspect of DAC is that the

00:06:50,740 --> 00:06:54,190
super user or the root user can

00:06:52,930 --> 00:06:56,700
essentially do anything and this

00:06:54,190 --> 00:07:00,700
actually violates the security model

00:06:56,700 --> 00:07:02,410
that you've implemented and so in that

00:07:00,700 --> 00:07:05,020
same paper Dennis Ritchie pointed this

00:07:02,410 --> 00:07:07,780
out and again I would say this very

00:07:05,020 --> 00:07:09,330
smart guy saying that if you have the

00:07:07,780 --> 00:07:11,200
notion of a super user then it's a

00:07:09,330 --> 00:07:14,500
theoretical and usually practical

00:07:11,200 --> 00:07:15,850
blemish on any protection scheme so the

00:07:14,500 --> 00:07:19,470
historically the amount of problems

00:07:15,850 --> 00:07:25,060
we've had with privileged and super user

00:07:19,470 --> 00:07:28,210
escalation is significant so that forms

00:07:25,060 --> 00:07:31,830
the I guess the backgrounds to then how

00:07:28,210 --> 00:07:35,260
we've had been involved in retrofitting

00:07:31,830 --> 00:07:38,590
security extensions to Linux to make the

00:07:35,260 --> 00:07:40,870
requirement or the modern era and the

00:07:38,590 --> 00:07:46,570
21st century even though parts of the

00:07:40,870 --> 00:07:48,940
20th century so some of these components

00:07:46,570 --> 00:07:51,250
include kha'zix apple's access control

00:07:48,940 --> 00:07:53,790
this so this essentially takes what's

00:07:51,250 --> 00:07:56,770
known as abbreviated Ackles in the unix

00:07:53,790 --> 00:08:00,880
dart model and makes them fine-grained

00:07:56,770 --> 00:08:02,650
so that instead of just having user

00:08:00,880 --> 00:08:04,900
group and other permissions you can

00:08:02,650 --> 00:08:07,090
actually specify which particular users

00:08:04,900 --> 00:08:09,070
which particular groups and it's much

00:08:07,090 --> 00:08:11,170
more fine-grained and that is still

00:08:09,070 --> 00:08:13,750
discretionary access control so it's

00:08:11,170 --> 00:08:16,090
more flexible and more fine-grained more

00:08:13,750 --> 00:08:18,430
complicated but still has some of those

00:08:16,090 --> 00:08:20,350
fundamental issues and POSIX is that I

00:08:18,430 --> 00:08:22,960
think this was based on an early POSIX

00:08:20,350 --> 00:08:27,430
standard when there were standards in

00:08:22,960 --> 00:08:28,900
the draft said it so KC Schaefer here

00:08:27,430 --> 00:08:34,000
that the smackwall that was involved in

00:08:28,900 --> 00:08:35,800
this this work we also have Linux

00:08:34,000 --> 00:08:39,760
capabilities or POSIX capabilities

00:08:35,800 --> 00:08:41,320
another draft spec and so for people

00:08:39,760 --> 00:08:42,200
coming from other operating systems this

00:08:41,320 --> 00:08:44,630
is

00:08:42,200 --> 00:08:46,820
this is actually called privileges in

00:08:44,630 --> 00:08:48,650
some other operating systems and it's

00:08:46,820 --> 00:08:51,770
not the capabilities that you may hear

00:08:48,650 --> 00:08:54,230
of in other areas of computer security

00:08:51,770 --> 00:08:57,440
so unfortunately a bit of a namespace

00:08:54,230 --> 00:08:59,210
collision here so the capabilities POSIX

00:08:57,440 --> 00:09:02,410
capabilities essentially attempts to

00:08:59,210 --> 00:09:05,000
deal with the superuser issue by

00:09:02,410 --> 00:09:07,070
decomposing the superuser or decomposing

00:09:05,000 --> 00:09:09,890
brut into a set of high-level

00:09:07,070 --> 00:09:13,850
abstractions such as network admin

00:09:09,890 --> 00:09:16,610
sysadmin being able to bind to sorry

00:09:13,850 --> 00:09:19,060
open an access raw networking sockets to

00:09:16,610 --> 00:09:23,540
the craft packets for things like ping

00:09:19,060 --> 00:09:25,220
this is process based and initially the

00:09:23,540 --> 00:09:27,410
initial version of capabilities you had

00:09:25,220 --> 00:09:30,230
to assign it to assign these

00:09:27,410 --> 00:09:32,630
capabilities to the process as it was

00:09:30,230 --> 00:09:34,730
running and being launched later on it

00:09:32,630 --> 00:09:38,980
became much more useful when filesystem

00:09:34,730 --> 00:09:41,330
labels were attached to capabilities so

00:09:38,980 --> 00:09:44,930
typically with capabilities you'll have

00:09:41,330 --> 00:09:46,970
a privileged app such as a mail server

00:09:44,930 --> 00:09:48,050
will start up do all the privileged

00:09:46,970 --> 00:09:52,250
things that needs to do and then drop

00:09:48,050 --> 00:09:53,900
the capabilities and that sounds great

00:09:52,250 --> 00:09:55,940
but that is actually long has actually

00:09:53,900 --> 00:09:59,090
led to some security issues itself quite

00:09:55,940 --> 00:10:01,130
famously we're also not quite sure

00:09:59,090 --> 00:10:02,630
exactly what some of these capabilities

00:10:01,130 --> 00:10:04,430
mean they've just been sprinkled

00:10:02,630 --> 00:10:06,560
throughout the kernel without a kind of

00:10:04,430 --> 00:10:07,850
a centralized design so people make it

00:10:06,560 --> 00:10:10,970
best effort so I remember when I was

00:10:07,850 --> 00:10:13,460
working as as a networking developer you

00:10:10,970 --> 00:10:15,800
would just use cap never I mean if you

00:10:13,460 --> 00:10:17,030
did anything privileged or thought it

00:10:15,800 --> 00:10:19,750
might be privileged so this has been

00:10:17,030 --> 00:10:21,980
implemented by kernel developers and

00:10:19,750 --> 00:10:24,620
they've actually done a reasonable job

00:10:21,980 --> 00:10:26,180
or we've done a reasonable job but it's

00:10:24,620 --> 00:10:30,470
a little hard to reason about what sort

00:10:26,180 --> 00:10:34,370
of security you may really have and it's

00:10:30,470 --> 00:10:35,870
a can lead to privilege escalation you

00:10:34,370 --> 00:10:38,980
don't know where the boundaries of your

00:10:35,870 --> 00:10:40,820
privilege are if you have a series of

00:10:38,980 --> 00:10:41,810
executables that you launch the

00:10:40,820 --> 00:10:43,400
different capabilities you don't

00:10:41,810 --> 00:10:45,530
necessarily know exactly what you're

00:10:43,400 --> 00:10:48,200
going to end up with and it's difficult

00:10:45,530 --> 00:10:53,150
to analyze and it's still a form of

00:10:48,200 --> 00:10:54,890
discretionary access control so there's

00:10:53,150 --> 00:10:56,090
an audit subsystem in the kernel and

00:10:54,890 --> 00:10:58,670
this is implemented to help

00:10:56,090 --> 00:11:01,460
meet government security requirements

00:10:58,670 --> 00:11:03,470
and one of the surprising things about

00:11:01,460 --> 00:11:06,740
this is actually quite useful so you can

00:11:03,470 --> 00:11:08,540
actually run audit to audit commands

00:11:06,740 --> 00:11:10,850
such as audit control to watch files for

00:11:08,540 --> 00:11:13,490
them being updated and so on so that's

00:11:10,850 --> 00:11:14,990
that's really well implemented and I

00:11:13,490 --> 00:11:16,430
said it because I know that in other

00:11:14,990 --> 00:11:17,450
operating systems across with operating

00:11:16,430 --> 00:11:19,580
systems and so on

00:11:17,450 --> 00:11:21,680
you'd have this c2 requirement and I've

00:11:19,580 --> 00:11:25,610
heard that it was never in abled in the

00:11:21,680 --> 00:11:27,410
field audit it was just a checkbox so

00:11:25,610 --> 00:11:30,350
what it's quite useful it's integrated

00:11:27,410 --> 00:11:35,180
with the other security mechanisms SEC

00:11:30,350 --> 00:11:37,370
comp is a major advancement in really

00:11:35,180 --> 00:11:39,110
useful security in the kernel it's a

00:11:37,370 --> 00:11:41,450
kind of a generalized system call filter

00:11:39,110 --> 00:11:43,220
so for a process you can actually

00:11:41,450 --> 00:11:45,860
specify essentially a whitelist of

00:11:43,220 --> 00:11:47,510
system calls that an application has an

00:11:45,860 --> 00:11:49,430
it was initially started with I think

00:11:47,510 --> 00:11:52,400
three system calls the initial version

00:11:49,430 --> 00:11:54,170
of it and this was to do allow people to

00:11:52,400 --> 00:11:57,170
rent out computing time on the computers

00:11:54,170 --> 00:11:59,330
and you had like input read and write

00:11:57,170 --> 00:12:00,589
and I think like an exit system call so

00:11:59,330 --> 00:12:02,390
you yeah

00:12:00,589 --> 00:12:05,839
cigarette home yeah that's it so for for

00:12:02,390 --> 00:12:09,170
system calls and so was this Andreea I

00:12:05,839 --> 00:12:12,339
can't Julie made this and this was like

00:12:09,170 --> 00:12:16,520
your city at home type workloads are

00:12:12,339 --> 00:12:18,740
crypto key cracking things and I guess

00:12:16,520 --> 00:12:21,440
now you'd be looking at bit Bitcoin

00:12:18,740 --> 00:12:23,720
mining for that kind of thing and then

00:12:21,440 --> 00:12:27,770
it was extended to be a more generalized

00:12:23,720 --> 00:12:32,420
filter and it's implemented as BPF BPF

00:12:27,770 --> 00:12:34,280
filters it's really useful for reducing

00:12:32,420 --> 00:12:36,530
a hack service of the kernel and by

00:12:34,280 --> 00:12:39,950
which I mean by what essentially

00:12:36,530 --> 00:12:41,300
whitelisting your system calls if there

00:12:39,950 --> 00:12:43,130
is a bug in a system call that you don't

00:12:41,300 --> 00:12:45,700
need and someone can get in and trick

00:12:43,130 --> 00:12:49,190
the kernel into executing say there's a

00:12:45,700 --> 00:12:51,860
tea system call that had a bug you know

00:12:49,190 --> 00:12:53,540
it really blocks a lot of kernel

00:12:51,860 --> 00:12:56,180
exploits and I think the Android

00:12:53,540 --> 00:12:59,060
security focus demonstrated this there

00:12:56,180 --> 00:13:00,380
if you look at the previous security

00:12:59,060 --> 00:13:04,690
summit in North America there's a

00:13:00,380 --> 00:13:07,100
interesting presentation on that and

00:13:04,690 --> 00:13:08,750
it's not inherently a sandbox on its own

00:13:07,100 --> 00:13:11,000
but it's certainly a useful component

00:13:08,750 --> 00:13:13,310
sandboxing if you want to use sec comp

00:13:11,000 --> 00:13:15,470
don't try and use it directly that's

00:13:13,310 --> 00:13:18,020
like writing assembly code Lipsett comp

00:13:15,470 --> 00:13:22,520
by Paul Moore here is a is a very good

00:13:18,020 --> 00:13:24,410
tool for that I think if you use docker

00:13:22,520 --> 00:13:26,300
you'll find like a JSON file with with

00:13:24,410 --> 00:13:28,390
some policies some sitcom policies and

00:13:26,300 --> 00:13:30,500
songs we can see how that works

00:13:28,390 --> 00:13:32,720
namespaces this is another significant

00:13:30,500 --> 00:13:35,540
increase in security although it's not

00:13:32,720 --> 00:13:36,620
inherently a security feature there just

00:13:35,540 --> 00:13:39,980
happens to be very useful

00:13:36,620 --> 00:13:41,660
so namespaces were derived from concepts

00:13:39,980 --> 00:13:45,290
from the plan 9 operating system which

00:13:41,660 --> 00:13:49,430
was the successor to Unix and what it

00:13:45,290 --> 00:13:51,320
does it allows a process to have private

00:13:49,430 --> 00:13:53,510
views of global resources and in a

00:13:51,320 --> 00:13:55,340
really simple example would be to give a

00:13:53,510 --> 00:13:58,040
process a private version of temp that

00:13:55,340 --> 00:14:00,830
nobody else can write to and then that

00:13:58,040 --> 00:14:06,140
will eliminate an entire class of temp

00:14:00,830 --> 00:14:08,320
race directories it's integrated into

00:14:06,140 --> 00:14:11,870
pan pluggable authentication modules and

00:14:08,320 --> 00:14:14,510
containers are built on namespaces with

00:14:11,870 --> 00:14:17,089
C groups so if you start combining say

00:14:14,510 --> 00:14:19,010
namespaces and set comp and C groups

00:14:17,089 --> 00:14:22,370
you're starting to be able to do some

00:14:19,010 --> 00:14:26,600
interesting isolation and attack surface

00:14:22,370 --> 00:14:28,700
reduction there's also in the networking

00:14:26,600 --> 00:14:31,880
is the network net filter framework

00:14:28,700 --> 00:14:33,650
which has now been around for nearly 20

00:14:31,880 --> 00:14:37,310
years or certainly about 19 years in

00:14:33,650 --> 00:14:40,940
development and there is some EPV F

00:14:37,310 --> 00:14:44,000
based work which looks to replace that

00:14:40,940 --> 00:14:49,370
in the near future but Ned filter he is

00:14:44,000 --> 00:14:51,589
a set of hooks in the layer 3 the the

00:14:49,370 --> 00:14:54,830
network layer in the kernel wherever the

00:14:51,589 --> 00:14:57,350
packets flow through it's abstracted out

00:14:54,830 --> 00:15:00,080
to input/output forwarding and so on and

00:14:57,350 --> 00:15:07,010
then you can plug applications internet

00:15:00,080 --> 00:15:10,250
filters such as IP tables the

00:15:07,010 --> 00:15:13,270
cryptography API certainly has changed a

00:15:10,250 --> 00:15:15,320
lot since I was initially involved in it

00:15:13,270 --> 00:15:17,900
there are many different types of

00:15:15,320 --> 00:15:20,330
algorithms supported there's synchronous

00:15:17,900 --> 00:15:23,030
and asynchronous api's I was intending

00:15:20,330 --> 00:15:24,770
Italy as a zero copy interface and

00:15:23,030 --> 00:15:27,500
that's why there's some perceived

00:15:24,770 --> 00:15:30,110
complexity there the support for crypto

00:15:27,500 --> 00:15:32,709
hardware and there's a user space IEP is

00:15:30,110 --> 00:15:36,350
extensively used by disk encryption

00:15:32,709 --> 00:15:40,360
network encryption such as IPSec key

00:15:36,350 --> 00:15:43,220
management and the integrity subsystem

00:15:40,360 --> 00:15:44,330
there's a key management framework and

00:15:43,220 --> 00:15:46,400
we'll be getting a hopefully a good

00:15:44,330 --> 00:15:49,100
update on that from David house soon

00:15:46,400 --> 00:15:52,730
this is about how the kernel manages

00:15:49,100 --> 00:15:55,670
keys and key rings and tokens and each

00:15:52,730 --> 00:15:57,980
key has a set of attributes permissions

00:15:55,670 --> 00:16:00,110
owner and so on and there are different

00:15:57,980 --> 00:16:03,560
types of keys so you have per process

00:16:00,110 --> 00:16:07,040
keys for a user or a session and you

00:16:03,560 --> 00:16:10,040
have trusted keys which are the kernel

00:16:07,040 --> 00:16:14,420
managers which are sealed inside the TPM

00:16:10,040 --> 00:16:16,670
and that's a very good way of protecting

00:16:14,420 --> 00:16:20,510
the keys from being exposed through

00:16:16,670 --> 00:16:22,520
kernel vulnerabilities there's also

00:16:20,510 --> 00:16:24,800
encrypted keys which are similar but

00:16:22,520 --> 00:16:29,600
don't use the the TPM and as a user

00:16:24,800 --> 00:16:32,540
space API for interacting the LSM

00:16:29,600 --> 00:16:33,820
framework of Linux security modules is a

00:16:32,540 --> 00:16:36,470
pluggable framework that allows

00:16:33,820 --> 00:16:38,450
different access control models to be

00:16:36,470 --> 00:16:42,770
implemented and this was initially

00:16:38,450 --> 00:16:45,940
implemented in as a reaction to Lunas

00:16:42,770 --> 00:16:51,110
reaction to AC Linux being proposed and

00:16:45,940 --> 00:16:53,990
he didn't want to have a single security

00:16:51,110 --> 00:16:56,230
model being implemented he wasn't sure

00:16:53,990 --> 00:16:58,430
if that would suit everybody so the

00:16:56,230 --> 00:17:00,140
consensus came around to implement a

00:16:58,430 --> 00:17:02,720
framework where you could plug unison

00:17:00,140 --> 00:17:06,709
Linux and other other security

00:17:02,720 --> 00:17:08,179
frameworks such as otama so this is a

00:17:06,709 --> 00:17:11,000
fork API and you can think of it a bit

00:17:08,179 --> 00:17:13,699
like netfilter in that you we have

00:17:11,000 --> 00:17:15,800
abstracted out where you have instead of

00:17:13,699 --> 00:17:16,540
packets you have to spend on processing

00:17:15,800 --> 00:17:20,560
of

00:17:16,540 --> 00:17:24,070
of through the colonel and these hooks

00:17:20,560 --> 00:17:25,390
are race free so they're done in a place

00:17:24,070 --> 00:17:27,660
which is safe in terms of locking and

00:17:25,390 --> 00:17:31,090
they have all of the security relevant

00:17:27,660 --> 00:17:32,500
information available at that point and

00:17:31,090 --> 00:17:35,470
so this then allows us to implement

00:17:32,500 --> 00:17:38,650
security models which can be done safely

00:17:35,470 --> 00:17:42,820
and with with a wide variety of

00:17:38,650 --> 00:17:46,270
different types of policies so there are

00:17:42,820 --> 00:17:48,460
several types or several major Ellison's

00:17:46,270 --> 00:17:52,390
these would be SELinux have armor and

00:17:48,460 --> 00:17:53,710
smack and currently they can't be

00:17:52,390 --> 00:17:54,490
stacked with each other because they're

00:17:53,710 --> 00:17:57,010
too complex

00:17:54,490 --> 00:18:01,330
casey is will be giving a talk about

00:17:57,010 --> 00:18:04,030
that and there are minor stackable

00:18:01,330 --> 00:18:06,010
hello sims which are stacked with one of

00:18:04,030 --> 00:18:08,110
the major ones so for example would be

00:18:06,010 --> 00:18:11,430
typical that you would have selinux or a

00:18:08,110 --> 00:18:16,570
powder or smoke with capabilities and

00:18:11,430 --> 00:18:23,160
yama which has just got a few few

00:18:16,570 --> 00:18:27,250
security features in terms of the major

00:18:23,160 --> 00:18:30,100
security models security enhanced linux

00:18:27,250 --> 00:18:34,270
is what's called a label based mandatory

00:18:30,100 --> 00:18:37,450
access control and compared to

00:18:34,270 --> 00:18:39,820
discretion access control this is has a

00:18:37,450 --> 00:18:41,230
centrally administered security policy

00:18:39,820 --> 00:18:42,850
so if you have an object you don't

00:18:41,230 --> 00:18:44,920
necessarily be able to you're not

00:18:42,850 --> 00:18:46,690
necessarily able to set the policy on

00:18:44,920 --> 00:18:49,660
who can access that and this addresses

00:18:46,690 --> 00:18:51,990
issues with malware and a number of

00:18:49,660 --> 00:18:54,850
types of security issues

00:18:51,990 --> 00:18:56,470
it has fine grained general permissions

00:18:54,850 --> 00:18:59,830
so originally mandatory access control

00:18:56,470 --> 00:19:02,860
was associated with a military-type

00:18:59,830 --> 00:19:04,410
security models whereas selinux changes

00:19:02,860 --> 00:19:09,700
to be more general-purpose and it's

00:19:04,410 --> 00:19:17,980
implemented in fedora based OSS and also

00:19:09,700 --> 00:19:20,310
android smack is a simplified label

00:19:17,980 --> 00:19:23,200
based mandatory access control system

00:19:20,310 --> 00:19:25,300
has a smaller code footprint at us much

00:19:23,200 --> 00:19:28,679
smaller policy footprint and is

00:19:25,300 --> 00:19:34,710
typically seen in the embedded space and

00:19:28,679 --> 00:19:37,350
in the Tizen project app armor is a

00:19:34,710 --> 00:19:40,309
different approach instead of attaching

00:19:37,350 --> 00:19:43,950
security labels directly to objects the

00:19:40,309 --> 00:19:45,450
security's path name based and this was

00:19:43,950 --> 00:19:48,059
designed for ease of use so that people

00:19:45,450 --> 00:19:50,610
would have unix-like configuration files

00:19:48,059 --> 00:19:56,460
and this is implemented in Susa and

00:19:50,610 --> 00:19:58,500
Ubuntu you so we also have and that

00:19:56,460 --> 00:20:00,870
that's probably at the fastest have

00:19:58,500 --> 00:20:03,179
fastest explanation of all of those

00:20:00,870 --> 00:20:08,520
security models and Ellis Emily Oliver

00:20:03,179 --> 00:20:11,460
yeah platform security is also an area

00:20:08,520 --> 00:20:14,070
where the kernel you know has been

00:20:11,460 --> 00:20:16,020
actively developed and this I would

00:20:14,070 --> 00:20:17,669
include anything that is a security

00:20:16,020 --> 00:20:18,929
feature provided either by the hardware

00:20:17,669 --> 00:20:20,820
or the firmware so we have things like

00:20:18,929 --> 00:20:25,679
TPM you have trusted execution

00:20:20,820 --> 00:20:30,120
environments extensions such as SGX the

00:20:25,679 --> 00:20:34,620
AMD in-memory encryption we also have

00:20:30,120 --> 00:20:38,100
certain I saw enhancements such as you

00:20:34,620 --> 00:20:41,130
know NX and it s MEP so this is all

00:20:38,100 --> 00:20:44,600
supported in the kernel there's an

00:20:41,130 --> 00:20:46,799
integrity management subsystem and

00:20:44,600 --> 00:20:49,169
within this we have the integrity

00:20:46,799 --> 00:20:51,390
measurement architecture and this allows

00:20:49,169 --> 00:20:53,600
us to essentially extend secure boot or

00:20:51,390 --> 00:20:56,610
verified boot to the OS so we can

00:20:53,600 --> 00:20:58,110
continue measuring user space components

00:20:56,610 --> 00:21:00,539
and they can be executables they can in

00:20:58,110 --> 00:21:02,309
config files and these measurements can

00:21:00,539 --> 00:21:06,330
be extended into the TPM and you can

00:21:02,309 --> 00:21:10,020
then perform remote attestation with

00:21:06,330 --> 00:21:13,320
that and you're also able to have

00:21:10,020 --> 00:21:15,870
digitally signed files and upon access

00:21:13,320 --> 00:21:17,730
the these signatures are checked so that

00:21:15,870 --> 00:21:19,080
that's quite useful in terms of being

00:21:17,730 --> 00:21:21,899
able to verify that a system that you

00:21:19,080 --> 00:21:24,679
bring up does not have any malware

00:21:21,899 --> 00:21:28,440
persisted that it's in an unknown state

00:21:24,679 --> 00:21:30,630
the EVM incentive verification module

00:21:28,440 --> 00:21:32,669
protects the security attributes so

00:21:30,630 --> 00:21:34,500
security attributes are extensions that

00:21:32,669 --> 00:21:37,830
they I note on files in Linux

00:21:34,500 --> 00:21:40,669
and they contain security information

00:21:37,830 --> 00:21:41,830
such as selinux labels IMR labels

00:21:40,669 --> 00:21:45,100
smack

00:21:41,830 --> 00:21:48,460
labels and so on including also POSIX

00:21:45,100 --> 00:21:53,019
apples and maybe a few other things

00:21:48,460 --> 00:21:55,570
sorry yeah so all of these are covered

00:21:53,019 --> 00:22:00,220
against offline attack and we also have

00:21:55,570 --> 00:22:03,039
some block level integrity checking we

00:22:00,220 --> 00:22:05,980
have DM Verity and DM integrity and this

00:22:03,039 --> 00:22:09,330
was implemented I think for Chrome OS

00:22:05,980 --> 00:22:11,620
initially and this actually checks a

00:22:09,330 --> 00:22:14,590
disk when you mount it and you start

00:22:11,620 --> 00:22:17,710
accessing it and the entire disk is

00:22:14,590 --> 00:22:19,029
essentially verified and then you can

00:22:17,710 --> 00:22:21,519
use the load pin module to ensure that

00:22:19,029 --> 00:22:25,260
if you're loading kernel modules that

00:22:21,519 --> 00:22:27,490
they all come off this prostitution

00:22:25,260 --> 00:22:29,710
another important aspect which has

00:22:27,490 --> 00:22:31,630
become more prominent in the past few

00:22:29,710 --> 00:22:33,429
years is kernel self-protection and this

00:22:31,630 --> 00:22:36,070
is pardoning the kernel itself against

00:22:33,429 --> 00:22:38,820
attack several years ago I would say

00:22:36,070 --> 00:22:42,190
this was probably an area which was

00:22:38,820 --> 00:22:44,610
deficient in Linux and so have had

00:22:42,190 --> 00:22:47,399
significant efforts by case and others

00:22:44,610 --> 00:22:49,659
with the kernel self protection project

00:22:47,399 --> 00:22:51,309
and significant improvements have been

00:22:49,659 --> 00:22:55,029
made there and I believe case will be

00:22:51,309 --> 00:22:57,010
updating us on that and so some of this

00:22:55,029 --> 00:23:00,519
or much of this work is back porting or

00:22:57,010 --> 00:23:01,600
putting the Geo security impacts work to

00:23:00,519 --> 00:23:04,389
mainline and that's being very

00:23:01,600 --> 00:23:07,360
politically and technically challenging

00:23:04,389 --> 00:23:10,360
on many fronts and the emphasis on this

00:23:07,360 --> 00:23:13,330
is the focus is on killing bug classes

00:23:10,360 --> 00:23:14,740
versus individual bugs so that instead

00:23:13,330 --> 00:23:16,120
of playing whack-a-mole with every bug

00:23:14,740 --> 00:23:18,580
that comes up it's like well let's get

00:23:16,120 --> 00:23:20,620
rid of this class of attack an example

00:23:18,580 --> 00:23:22,649
there of a attacking getting rid of a

00:23:20,620 --> 00:23:24,789
class of attacks is like the temp race

00:23:22,649 --> 00:23:30,580
time vulnerabilities that you can get

00:23:24,789 --> 00:23:35,740
rid of by using namespaces okay in terms

00:23:30,580 --> 00:23:38,230
of resources the LSM mailing list is

00:23:35,740 --> 00:23:40,389
evolved into a place where many if not

00:23:38,230 --> 00:23:42,340
most of the kernel security developers

00:23:40,389 --> 00:23:44,380
hang out and discuss things there are

00:23:42,340 --> 00:23:46,690
some other mailing lists the Linux

00:23:44,380 --> 00:23:49,090
integrity mailing list also includes TPM

00:23:46,690 --> 00:23:51,590
discussion there's the Linux key rings

00:23:49,090 --> 00:23:56,240
and also apps these are on

00:23:51,590 --> 00:23:58,580
the same kernel.org server there's also

00:23:56,240 --> 00:24:02,529
the OSS security Barling this which is a

00:23:58,580 --> 00:24:06,259
very good general general security

00:24:02,529 --> 00:24:11,120
resource and that's an open wall and

00:24:06,259 --> 00:24:14,090
that's run by someone who is very

00:24:11,120 --> 00:24:17,509
influential in buffer overruns back in

00:24:14,090 --> 00:24:19,820
the day there's a wiki current sector of

00:24:17,509 --> 00:24:21,830
where we try and keep information and

00:24:19,820 --> 00:24:23,869
resources please feel free to create an

00:24:21,830 --> 00:24:26,210
account and update that you know it's

00:24:23,869 --> 00:24:28,429
like with wiki's they get out of legs

00:24:26,210 --> 00:24:31,789
people forget about them and they die a

00:24:28,429 --> 00:24:32,570
sad death and there's also a very good

00:24:31,789 --> 00:24:35,480
resource

00:24:32,570 --> 00:24:38,600
the lwn security link there if you

00:24:35,480 --> 00:24:42,259
subscribe to lwn you will have access to

00:24:38,600 --> 00:24:45,679
probably the best best coverage of Linux

00:24:42,259 --> 00:24:52,940
security so I'm not sure if we have any

00:24:45,679 --> 00:24:55,309
more time but we're any ok I don't know

00:24:52,940 --> 00:24:57,350
if this works now so if I forgot to

00:24:55,309 --> 00:24:59,210
mention so for questions you can take

00:24:57,350 --> 00:25:01,570
one from Mike so please just wave and

00:24:59,210 --> 00:25:01,570
I'll run

00:25:07,770 --> 00:25:12,910
it's not a small comment the keyrings

00:25:11,290 --> 00:25:15,280
mailing list isn't leaked the next -

00:25:12,910 --> 00:25:22,830
keyrings it's just earrings I got you a

00:25:15,280 --> 00:25:22,830
little dog Thanks any more questions

00:25:24,030 --> 00:25:36,370
still things we talk another aspect

00:25:33,550 --> 00:25:39,540
about mailing lists so versus security

00:25:36,370 --> 00:25:41,560
is the mailing list with about

00:25:39,540 --> 00:25:43,510
vulnerabilities and open source project

00:25:41,560 --> 00:25:46,570
ends in general yeah and Colonel

00:25:43,510 --> 00:25:49,890
hardening is the mailing list for the

00:25:46,570 --> 00:25:53,110
Colonel hardening efforts yes I forgot

00:25:49,890 --> 00:26:02,310
kind of hardening they are listed at

00:25:53,110 --> 00:26:04,090
cone sick dog thanks and simile that

00:26:02,310 --> 00:26:07,150
didn't think was mention on the slide

00:26:04,090 --> 00:26:10,570
but the Linux hardened IRC channel okay

00:26:07,150 --> 00:26:12,580
sit in for the KSP pee stuff okay yeah I

00:26:10,570 --> 00:26:15,610
haven't been active on there so I think

00:26:12,580 --> 00:26:21,490
cone sick and it all has has stuff there

00:26:15,610 --> 00:26:29,560
so what aren't we working on that we

00:26:21,490 --> 00:26:31,450
need to be working on - I think we still

00:26:29,560 --> 00:26:34,050
have some some progress to make in the

00:26:31,450 --> 00:26:34,050
kernel hardening

00:26:34,860 --> 00:26:42,100
yeah there's wealth case can I can talk

00:26:37,570 --> 00:26:44,230
about that but yeah I think what would

00:26:42,100 --> 00:26:46,810
be good will be seem more original

00:26:44,230 --> 00:26:50,070
research being implemented in the in the

00:26:46,810 --> 00:26:52,650
upstream kernel as well once once once

00:26:50,070 --> 00:26:54,880
the the basics are covered they're

00:26:52,650 --> 00:26:59,790
interesting to see what kind of new

00:26:54,880 --> 00:27:03,220
approaches would be I think really it's

00:26:59,790 --> 00:27:04,780
you know it's it's up to people to

00:27:03,220 --> 00:27:06,880
figure out what they need and what they

00:27:04,780 --> 00:27:12,330
want to see so you know I don't have a

00:27:06,880 --> 00:27:12,330
magic crystal ball of what people need

00:27:13,050 --> 00:27:18,380
usability can always

00:27:15,890 --> 00:27:19,670
this security usability so that's not so

00:27:18,380 --> 00:27:21,470
much a kernel thing that's really neat

00:27:19,670 --> 00:27:24,020
aggression thing it's being developer

00:27:21,470 --> 00:27:26,030
friendly not maybe a security community

00:27:24,020 --> 00:27:28,340
but like Linux kernel community still

00:27:26,030 --> 00:27:33,350
not so it looks security friendly but I

00:27:28,340 --> 00:27:36,590
don't know how to work any more

00:27:33,350 --> 00:27:38,120
questions because this is Dylan over

00:27:36,590 --> 00:27:40,430
here so I guess more detailed questions

00:27:38,120 --> 00:27:42,750
will come and get into each subsystem

00:27:40,430 --> 00:27:46,559
so let's thanks Jane

00:27:42,750 --> 00:27:46,559

YouTube URL: https://www.youtube.com/watch?v=L7KHvKRfTzc


