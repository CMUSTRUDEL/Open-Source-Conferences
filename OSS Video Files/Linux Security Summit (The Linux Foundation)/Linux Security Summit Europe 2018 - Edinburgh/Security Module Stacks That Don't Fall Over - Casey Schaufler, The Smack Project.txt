Title: Security Module Stacks That Don't Fall Over - Casey Schaufler, The Smack Project
Publication date: 2018-10-27
Playlist: Linux Security Summit Europe 2018 - Edinburgh
Description: 
	Security Module Stacks That Don't Fall Over - Casey Schaufler, The Smack ProjectÂ 

Security module stacking will provide a new level of flexibility in configuring system security. But there's a real risk that combining security models will result in a system that may be secure, but isn't useful. This may also be true when the same security module is used with multiple policy definitions. Casey Schaufler, the module stacking developer, will discuss the pitfalls of security module stacking and how they can be avoided. He will be talking about the configuration of existing modules and where they have known conflicts. There will also be discussion about how new modules should use the infrastructure in a way that reduces the potential for conflicts. A special emphasis will be placed on networking, where dragons of various colors lurk behind every acronym. 

About Casey Schaufler
Casey Schaufler worked on Unix kernels in the 1970s-90s. He has implemented access control lists, mandatory access control, extended filesystem attributes, X11 access controls, network protocols and more audit systems than is really healthy. His involvement in Linux began with the Linux Security Module work at the turn of the century, introducing the Smack LSM in 2007. Casey is reworking the LSM infrastructure to support multiple concurrent modules. He has spoken at Linux Conference Australia, OLS, LinuxCon, Linux Plumbers and many other venues.
Captions: 
	00:00:00,290 --> 00:00:03,810
thank you that's the first time I've

00:00:02,190 --> 00:00:09,830
ever seen the AV guy attacked the thing

00:00:03,810 --> 00:00:12,200
with a knife we're in Scotland after all

00:00:09,830 --> 00:00:15,210
thank you very much

00:00:12,200 --> 00:00:17,490
so I'm talking a bit about the work

00:00:15,210 --> 00:00:23,820
we're doing on security module stacking

00:00:17,490 --> 00:00:26,460
I decided that a good title is worth a

00:00:23,820 --> 00:00:28,970
thousand words and so I yeah I came up

00:00:26,460 --> 00:00:28,970
with this one

00:00:30,590 --> 00:00:47,219
it's a new clicker and there we go

00:00:33,210 --> 00:00:49,039
I said there we go okay so there I am in

00:00:47,219 --> 00:00:51,840
case you haven't seen the slide before

00:00:49,039 --> 00:00:53,480
so security mod Linux security modules

00:00:51,840 --> 00:00:56,219
why do we have Linux security modules

00:00:53,480 --> 00:00:58,079
because lenez wanted me didn't want to

00:00:56,219 --> 00:01:00,989
be involved in the discussions about

00:00:58,079 --> 00:01:02,460
what security security policies we

00:01:00,989 --> 00:01:05,330
should have in the kernel anymore

00:01:02,460 --> 00:01:07,830
and so he dictated that there'd be a

00:01:05,330 --> 00:01:09,270
framework that you could plug your

00:01:07,830 --> 00:01:12,200
security module in and then he didn't

00:01:09,270 --> 00:01:12,200
have to worry about it anymore

00:01:12,720 --> 00:01:18,960
what is the security module stack I you

00:01:16,619 --> 00:01:21,180
might ask who when they ask for it it's

00:01:18,960 --> 00:01:24,689
a collection of security modules they're

00:01:21,180 --> 00:01:28,799
called and called in order and the first

00:01:24,689 --> 00:01:32,159
one that fails you stop it's a bail on

00:01:28,799 --> 00:01:34,140
fail model we have minor security

00:01:32,159 --> 00:01:37,590
modules these are little teeny security

00:01:34,140 --> 00:01:40,680
modules that do little interesting

00:01:37,590 --> 00:01:42,329
things but most importantly it's based

00:01:40,680 --> 00:01:44,670
on available state they don't maintain

00:01:42,329 --> 00:01:46,220
any state of their own they just use

00:01:44,670 --> 00:01:49,860
information that's already available

00:01:46,220 --> 00:01:53,450
with a slight asterisk on that major

00:01:49,860 --> 00:01:53,450
security modules on the other hand

00:01:53,930 --> 00:02:02,820
manage state manage information about

00:01:59,329 --> 00:02:04,619
objects objects other other aspects of

00:02:02,820 --> 00:02:06,149
the system but they maintain they keep

00:02:04,619 --> 00:02:11,450
track of that themselves they maintain

00:02:06,149 --> 00:02:13,410
it we have mechanisms for allowing the

00:02:11,450 --> 00:02:15,720
security modules to hang

00:02:13,410 --> 00:02:18,630
hanging their information off of system

00:02:15,720 --> 00:02:24,270
system data structures like I know it's

00:02:18,630 --> 00:02:29,160
tasks etc and since the the module is is

00:02:24,270 --> 00:02:31,320
maintaining those that makes them we

00:02:29,160 --> 00:02:34,560
call that a major one they also might

00:02:31,320 --> 00:02:37,440
use networking facilities like net label

00:02:34,560 --> 00:02:40,620
and SEC marks in order to propagate

00:02:37,440 --> 00:02:43,740
information about the networking so as

00:02:40,620 --> 00:02:46,680
of today what this year to module

00:02:43,740 --> 00:02:49,620
stacking looks like is you have a set of

00:02:46,680 --> 00:02:52,320
minor modules capability being the first

00:02:49,620 --> 00:02:56,870
one then Yama and load pin and then you

00:02:52,320 --> 00:02:59,100
get to choose one of the major modules

00:02:56,870 --> 00:03:01,470
so why can't we just stack it all

00:02:59,100 --> 00:03:07,260
together well we've got a stumbling

00:03:01,470 --> 00:03:09,630
block that is blob pointers because the

00:03:07,260 --> 00:03:12,060
various modules want to use security

00:03:09,630 --> 00:03:14,160
blobs and we've only got one pointer on

00:03:12,060 --> 00:03:17,100
each of these data structures to point

00:03:14,160 --> 00:03:21,150
to security blobs you can't share them I

00:03:17,100 --> 00:03:23,730
have you have SELinux and smack running

00:03:21,150 --> 00:03:27,210
at the same time for example they will

00:03:23,730 --> 00:03:29,970
each want to use the pointer in the

00:03:27,210 --> 00:03:32,760
inode structure and the credit structure

00:03:29,970 --> 00:03:35,730
and a bunch of other structures to

00:03:32,760 --> 00:03:37,470
maintain their data and if you ran them

00:03:35,730 --> 00:03:38,760
both the same time what you would find

00:03:37,470 --> 00:03:40,890
is that SELinux would put its

00:03:38,760 --> 00:03:42,000
information into the structure and then

00:03:40,890 --> 00:03:44,220
smack could come along put its

00:03:42,000 --> 00:03:45,630
information into the structure and then

00:03:44,220 --> 00:03:47,040
when you went to do the check the FCX

00:03:45,630 --> 00:03:48,870
would say hey yeah i'm gonna go look at

00:03:47,040 --> 00:03:51,090
this information and it's yes it's the

00:03:48,870 --> 00:03:57,570
smack information and bad things would

00:03:51,090 --> 00:03:59,760
happen so the solution to this needs to

00:03:57,570 --> 00:04:02,310
have the security module infrastructure

00:03:59,760 --> 00:04:03,870
manage the blobs instead of the

00:04:02,310 --> 00:04:07,500
individual modules this is actually

00:04:03,870 --> 00:04:09,720
reasonably straightforward to do you

00:04:07,500 --> 00:04:11,730
have the security modules when they get

00:04:09,720 --> 00:04:14,040
initialized tell the infrastructure how

00:04:11,730 --> 00:04:15,660
much space they need and the

00:04:14,040 --> 00:04:18,780
infrastructure will then tell the module

00:04:15,660 --> 00:04:21,270
when you use this information use it at

00:04:18,780 --> 00:04:23,970
this offset which if there's only one

00:04:21,270 --> 00:04:25,550
module granny will always be 0 but if

00:04:23,970 --> 00:04:28,310
you've got multiple modules

00:04:25,550 --> 00:04:30,050
little point point off to an appropriate

00:04:28,310 --> 00:04:32,479
offset in the blob that the

00:04:30,050 --> 00:04:39,110
infrastructure is managing and then you

00:04:32,479 --> 00:04:41,180
can go ahead and share those blobs when

00:04:39,110 --> 00:04:42,919
I wrote up the slides this seemed like

00:04:41,180 --> 00:04:45,050
it was still kind of pie in the sky

00:04:42,919 --> 00:04:48,319
something will do someday but it's

00:04:45,050 --> 00:04:49,970
starting to look like we've done crested

00:04:48,319 --> 00:04:52,550
the hill on this and we may have it in

00:04:49,970 --> 00:04:55,610
the next release or two so that will be

00:04:52,550 --> 00:05:05,330
really good but that's still not going

00:04:55,610 --> 00:05:06,770
to solve all our problems when we when

00:05:05,330 --> 00:05:10,039
we actually have this we'll be able to

00:05:06,770 --> 00:05:12,080
pull a parmer out or sorry Tomoya out of

00:05:10,039 --> 00:05:13,810
the list of major modules put it there

00:05:12,080 --> 00:05:15,710
so that you can put that on the stack

00:05:13,810 --> 00:05:18,469
but it's not gonna solve all the

00:05:15,710 --> 00:05:22,219
problems we still have more stumbling

00:05:18,469 --> 00:05:27,740
blocks first one is SEC IDs anybody know

00:05:22,219 --> 00:05:32,750
what a sec ideas okay good anybody care

00:05:27,740 --> 00:05:36,289
what a second yeah well thank you James

00:05:32,750 --> 00:05:37,940
well a sec ID is a 32 bit quantity that

00:05:36,289 --> 00:05:42,050
identifies the security information

00:05:37,940 --> 00:05:46,779
associated with with an object or a

00:05:42,050 --> 00:05:46,779
packet or some other set of information

00:05:48,009 --> 00:05:54,250
but each of the security modules that

00:05:50,449 --> 00:05:56,750
use the SEC IDs wants the whole thing

00:05:54,250 --> 00:05:58,880
unfortunately you can't if you have two

00:05:56,750 --> 00:06:01,250
modules that use SEC IDs that's 64 bits

00:05:58,880 --> 00:06:03,800
of information and we still haven't

00:06:01,250 --> 00:06:08,990
figured out how to get 64 bits into a 32

00:06:03,800 --> 00:06:11,659
bit integer and to make things a little

00:06:08,990 --> 00:06:13,639
bit more get more difficult one of the

00:06:11,659 --> 00:06:17,180
places where we use SEC IDs is in the

00:06:13,639 --> 00:06:21,190
SEC mark which is in the IP packet I'm

00:06:17,180 --> 00:06:25,099
sorry in the IP packet handling code and

00:06:21,190 --> 00:06:29,750
we have been told without with that

00:06:25,099 --> 00:06:31,789
unequivocably that no way are we gonna

00:06:29,750 --> 00:06:34,130
get any more information and any more

00:06:31,789 --> 00:06:36,339
space in there we get 32 bits and that's

00:06:34,130 --> 00:06:39,470
it

00:06:36,339 --> 00:06:42,590
well gosh what are we gonna do there

00:06:39,470 --> 00:06:44,750
we've got 32 bits we have more than 32

00:06:42,590 --> 00:06:50,780
bits information we need to have how are

00:06:44,750 --> 00:06:54,670
we going to deal with this and this is

00:06:50,780 --> 00:06:56,540
one of the more major pieces of

00:06:54,670 --> 00:06:58,550
construction needs to be done on this

00:06:56,540 --> 00:07:01,180
and that is we have to replace that 32

00:06:58,550 --> 00:07:03,440
bits with a structure that has

00:07:01,180 --> 00:07:07,100
information from all of the security

00:07:03,440 --> 00:07:12,200
modules that are using sec IDs in order

00:07:07,100 --> 00:07:14,990
to to propagate that now you know with

00:07:12,200 --> 00:07:17,690
stacking you we have a structure here

00:07:14,990 --> 00:07:20,420
this got yeah this example we got yep

00:07:17,690 --> 00:07:23,450
two three three instances first SC Linux

00:07:20,420 --> 00:07:24,860
Mac and a farmer and if we don't have

00:07:23,450 --> 00:07:26,930
stacking well we just make it a union

00:07:24,860 --> 00:07:28,880
instead and so you still only got one so

00:07:26,930 --> 00:07:31,430
you know we're not adding a lot of

00:07:28,880 --> 00:07:36,380
expense there especially in the non

00:07:31,430 --> 00:07:38,450
stacking case but then we have to decide

00:07:36,380 --> 00:07:41,360
have to have a mechanism for defining

00:07:38,450 --> 00:07:44,570
which one of these SEC IDs to use in any

00:07:41,360 --> 00:07:48,350
particular case well within the security

00:07:44,570 --> 00:07:50,150
modules that's easy we just use the use

00:07:48,350 --> 00:07:54,500
the field that's associated with that

00:07:50,150 --> 00:07:58,010
that module and we're done if we're in

00:07:54,500 --> 00:08:00,770
net filter net filter currently has a

00:07:58,010 --> 00:08:01,880
single entry in it which says if you're

00:08:00,770 --> 00:08:03,440
using SELinux

00:08:01,880 --> 00:08:06,500
here's where the here's where the

00:08:03,440 --> 00:08:08,180
information is we need to break that out

00:08:06,500 --> 00:08:09,620
and say well if you're using SMAC here's

00:08:08,180 --> 00:08:11,510
where the information is now it turns

00:08:09,620 --> 00:08:14,680
out that in both cases again if you're

00:08:11,510 --> 00:08:17,180
not stacking it'll be the same 32 bits

00:08:14,680 --> 00:08:19,670
and if you are you'll have to tell it

00:08:17,180 --> 00:08:22,010
which one is which one it is currently

00:08:19,670 --> 00:08:24,290
smack is a bad citizen in this

00:08:22,010 --> 00:08:29,540
particular case in that it uses the

00:08:24,290 --> 00:08:32,539
selinux mode in sec mark but that's

00:08:29,540 --> 00:08:34,090
something needs to get fixed when it's

00:08:32,539 --> 00:08:39,080
broken

00:08:34,090 --> 00:08:43,039
now if you're in it so if you if you

00:08:39,080 --> 00:08:44,900
want to do something like SOP R Seck or

00:08:43,039 --> 00:08:46,810
any of the other mechanisms that are

00:08:44,900 --> 00:08:52,210
available for getting information about

00:08:46,810 --> 00:08:52,210
the security label of an entity

00:08:52,690 --> 00:08:56,450
you have to have a mechanism for

00:08:55,040 --> 00:08:57,680
determining which one of these you're

00:08:56,450 --> 00:09:00,050
going to get by default you're gonna get

00:08:57,680 --> 00:09:04,700
the first one in in the security module

00:09:00,050 --> 00:09:06,200
list which today is SELinux but if you

00:09:04,700 --> 00:09:09,550
want to explicitly say which one you

00:09:06,200 --> 00:09:13,370
want we have to add a PR control to say

00:09:09,550 --> 00:09:17,870
when I call SOP R Seck give me the one

00:09:13,370 --> 00:09:20,330
for SELinux in this example now we could

00:09:17,870 --> 00:09:23,870
have done a number of other ways one way

00:09:20,330 --> 00:09:27,020
though that had been suggested was to

00:09:23,870 --> 00:09:30,920
when you call SOP R Seck you would get a

00:09:27,020 --> 00:09:33,470
list based an in order list of the

00:09:30,920 --> 00:09:35,840
attributes for all the security modules

00:09:33,470 --> 00:09:39,380
you have that would probably have broken

00:09:35,840 --> 00:09:44,930
user space in hideous and uncomfortable

00:09:39,380 --> 00:09:48,650
ways so we decided not to do that so if

00:09:44,930 --> 00:09:57,980
we go ahead and do this and make SEC IDs

00:09:48,650 --> 00:10:01,190
generally useful okay

00:09:57,980 --> 00:10:03,230
well then it turns out we can we can on

00:10:01,190 --> 00:10:06,380
with the current implementation at least

00:10:03,230 --> 00:10:09,980
pull a parmer out as well so now you've

00:10:06,380 --> 00:10:13,840
got your choice of smack arrestee linux

00:10:09,980 --> 00:10:17,330
and then a farmer and tomoyo and

00:10:13,840 --> 00:10:18,890
everybody's happy here but we're still

00:10:17,330 --> 00:10:21,830
not done so what's our next stumbling

00:10:18,890 --> 00:10:26,060
block next stumbling block format

00:10:21,830 --> 00:10:29,270
options what is about mount options well

00:10:26,060 --> 00:10:33,350
today if you have an unrecognized

00:10:29,270 --> 00:10:38,720
option in your in your mount your mount

00:10:33,350 --> 00:10:42,110
system call it fails now in this

00:10:38,720 --> 00:10:44,390
particular case here we've said we

00:10:42,110 --> 00:10:46,400
specified a mount option that selinux

00:10:44,390 --> 00:10:51,620
recognizes an amount option that smack

00:10:46,400 --> 00:10:53,180
recognizes with the old code if you go

00:10:51,620 --> 00:10:56,270
into selinux it's going to say up I

00:10:53,180 --> 00:11:00,320
don't recognise smack FS root so it's an

00:10:56,270 --> 00:11:02,090
error so we have to change it is so that

00:11:00,320 --> 00:11:04,930
the security modules don't make judgment

00:11:02,090 --> 00:11:06,170
on options that they don't recognize

00:11:04,930 --> 00:11:09,889
unfortunately

00:11:06,170 --> 00:11:12,139
what this means is that if none of the

00:11:09,889 --> 00:11:15,709
security modules recognize it that's

00:11:12,139 --> 00:11:17,959
still unrecognized this no one is going

00:11:15,709 --> 00:11:20,600
to detect that it is completely

00:11:17,959 --> 00:11:21,800
unrecognized and will will succeed in a

00:11:20,600 --> 00:11:27,620
case where it might have otherwise

00:11:21,800 --> 00:11:29,990
failed not insurmountable but a nuisance

00:11:27,620 --> 00:11:32,209
and probably not worth dealing with um

00:11:29,990 --> 00:11:34,540
what so long as David Howells is still

00:11:32,209 --> 00:11:37,160
working on completely redoing the Mount

00:11:34,540 --> 00:11:40,310
the world of mount from the ground up

00:11:37,160 --> 00:11:44,540
which were very very much hoping for

00:11:40,310 --> 00:11:47,870
real soon now but he talked about that

00:11:44,540 --> 00:11:49,459
earlier all right so is that our only

00:11:47,870 --> 00:11:52,790
some blame luck no unfortunately it

00:11:49,459 --> 00:11:55,040
isn't the next one is net label now the

00:11:52,790 --> 00:11:59,120
net label subsystem is a really cool bit

00:11:55,040 --> 00:12:02,060
of code it allows you to put sip so and

00:11:59,120 --> 00:12:06,680
clip so options onto packets so you can

00:12:02,060 --> 00:12:09,070
get the security information about your

00:12:06,680 --> 00:12:12,740
process across the network across the

00:12:09,070 --> 00:12:15,410
socket interface to do other processes

00:12:12,740 --> 00:12:19,670
on this machine or on other ones well

00:12:15,410 --> 00:12:21,320
unfortunately we you get one sip so tag

00:12:19,670 --> 00:12:26,480
period and that's the the way the spec

00:12:21,320 --> 00:12:27,920
works and if your security op security

00:12:26,480 --> 00:12:31,610
modules don't agree on what that

00:12:27,920 --> 00:12:35,000
labeling should be you have a problem

00:12:31,610 --> 00:12:37,100
what do you do you could consider adding

00:12:35,000 --> 00:12:40,750
them together but that would be wrong

00:12:37,100 --> 00:12:42,800
could consider doing an X or and only

00:12:40,750 --> 00:12:45,740
including the bits they both agree on

00:12:42,800 --> 00:12:47,930
but that would still be wrong so the

00:12:45,740 --> 00:12:53,149
only thing that really makes sense there

00:12:47,930 --> 00:13:00,470
is to have is to deny it unless the

00:12:53,149 --> 00:13:01,579
security modules agree that's probably

00:13:00,470 --> 00:13:04,399
not going to give you a whole lot of

00:13:01,579 --> 00:13:08,690
cases where you actually get anything to

00:13:04,399 --> 00:13:11,260
work because the security modules are

00:13:08,690 --> 00:13:13,670
likely to use the use the labels in

00:13:11,260 --> 00:13:15,140
different ways and they're almost

00:13:13,670 --> 00:13:19,370
they're gonna have different

00:13:15,140 --> 00:13:21,650
granularities as well another each

00:13:19,370 --> 00:13:24,800
you hear with the net label code is that

00:13:21,650 --> 00:13:27,440
whereas all whereas the other security

00:13:24,800 --> 00:13:34,070
and interfaces are pull interfaces that

00:13:27,440 --> 00:13:36,370
is the attributes in the security module

00:13:34,070 --> 00:13:40,970
you you pull the attributes from the

00:13:36,370 --> 00:13:43,279
code your you're running in with net

00:13:40,970 --> 00:13:45,410
label the security module pushes its

00:13:43,279 --> 00:13:47,270
information into the net label system

00:13:45,410 --> 00:13:51,050
and says here I want you to use this

00:13:47,270 --> 00:13:54,200
information and then those attributes

00:13:51,050 --> 00:13:56,830
are converted to actual sip so header

00:13:54,200 --> 00:14:00,380
information and put into the socket

00:13:56,830 --> 00:14:02,810
which means that it you can't do any

00:14:00,380 --> 00:14:04,310
kind of abstract comparison you can only

00:14:02,810 --> 00:14:07,010
compare directly against what would

00:14:04,310 --> 00:14:11,170
actually be on the wire so that makes

00:14:07,010 --> 00:14:14,750
things a little bit more difficult and

00:14:11,170 --> 00:14:18,050
there are cases where if you're using

00:14:14,750 --> 00:14:20,750
network selectors and society that their

00:14:18,050 --> 00:14:22,370
network address selectors that you're

00:14:20,750 --> 00:14:23,300
not going to use what's in the socket

00:14:22,370 --> 00:14:26,690
after all anyway

00:14:23,300 --> 00:14:30,589
so it gets a little bit hairy to

00:14:26,690 --> 00:14:35,089
determine this and but once you've

00:14:30,589 --> 00:14:37,310
actually come we're looking at a couple

00:14:35,089 --> 00:14:42,950
of options on how to do that and in

00:14:37,310 --> 00:14:47,720
particular the next slide here that

00:14:42,950 --> 00:14:49,130
label configure the configuration the

00:14:47,720 --> 00:14:52,310
security modules aren't always going to

00:14:49,130 --> 00:14:54,650
use the same defaults with regard to

00:14:52,310 --> 00:14:57,250
what they want this is how they want the

00:14:54,650 --> 00:15:00,860
system to behave for example most

00:14:57,250 --> 00:15:03,130
SELinux sockets most well most networks

00:15:00,860 --> 00:15:07,040
on the net sealing system are unlabeled

00:15:03,130 --> 00:15:09,500
this is in part because selinux only

00:15:07,040 --> 00:15:13,310
uses the the SIP so label for the MLS

00:15:09,500 --> 00:15:16,700
component smack on the other hand dumps

00:15:13,310 --> 00:15:22,390
the entire smack label into this the SIP

00:15:16,700 --> 00:15:24,650
so header in a somewhat clever way and

00:15:22,390 --> 00:15:28,130
does that by default for all all

00:15:24,650 --> 00:15:30,100
networks so they're they're very much at

00:15:28,130 --> 00:15:32,220
odds with the way they use it and

00:15:30,100 --> 00:15:33,990
address selectors

00:15:32,220 --> 00:15:36,000
where you're allowed to say that this

00:15:33,990 --> 00:15:37,380
host should be given this label and

00:15:36,000 --> 00:15:42,630
information coming from the so she

00:15:37,380 --> 00:15:45,840
should be given this label is deferred

00:15:42,630 --> 00:15:48,270
until delivery so if you're using those

00:15:45,840 --> 00:15:49,620
you're not actually going to make the

00:15:48,270 --> 00:15:50,970
decision at the same point you're not

00:15:49,620 --> 00:15:53,220
going to make the decisions at saket

00:15:50,970 --> 00:15:59,240
creation I'm going to make the decisions

00:15:53,220 --> 00:15:59,240
at packet delivery so there's a bit of

00:16:01,640 --> 00:16:07,790
complication there complexity also

00:16:04,770 --> 00:16:09,990
granularity like I said security modules

00:16:07,790 --> 00:16:13,740
did the security modules aren't gonna

00:16:09,990 --> 00:16:15,540
use the same granularity if they were

00:16:13,740 --> 00:16:18,600
then you'd probably only need one

00:16:15,540 --> 00:16:20,040
so the SMAC label of a process is going

00:16:18,600 --> 00:16:22,380
to change at a different rate than the

00:16:20,040 --> 00:16:25,230
SMAP then the SELinux label of a process

00:16:22,380 --> 00:16:31,160
is going to change this context is going

00:16:25,230 --> 00:16:33,960
to change and again that's going to make

00:16:31,160 --> 00:16:36,870
make things difficult and just to add

00:16:33,960 --> 00:16:38,460
another another loop smack allows you to

00:16:36,870 --> 00:16:40,770
change the label that's used on the

00:16:38,460 --> 00:16:42,480
socket after you've created it whereas

00:16:40,770 --> 00:16:47,070
selinux always does it at socket

00:16:42,480 --> 00:16:51,390
creation but once we get all these

00:16:47,070 --> 00:16:55,110
issues addressed that gives a situation

00:16:51,390 --> 00:16:56,430
where if we can actually come get it to

00:16:55,110 --> 00:16:59,580
the point where we get that that done

00:16:56,430 --> 00:17:01,890
correctly then we can stack all the

00:16:59,580 --> 00:17:04,590
security modules and everybody can be

00:17:01,890 --> 00:17:08,330
happy and what could possibly still

00:17:04,590 --> 00:17:08,330
cause any problems more than that right

00:17:08,690 --> 00:17:13,980
well one of the problems is you might

00:17:12,060 --> 00:17:15,720
have as if you stack your modules you

00:17:13,980 --> 00:17:17,250
could have redundant purpose there

00:17:15,720 --> 00:17:19,860
really isn't any point in having

00:17:17,250 --> 00:17:22,230
smacking selinux at the same time if you

00:17:19,860 --> 00:17:29,490
want a full-up mandatory access control

00:17:22,230 --> 00:17:30,810
policy pick one sorry now app armor app

00:17:29,490 --> 00:17:33,420
armor does things differently

00:17:30,810 --> 00:17:35,400
okay app armors policy although it's a

00:17:33,420 --> 00:17:38,160
mandatory access control policy it's not

00:17:35,400 --> 00:17:40,260
a straight subject objects access kind

00:17:38,160 --> 00:17:43,770
of thing so you might want to use that

00:17:40,260 --> 00:17:45,900
in conjunction with another with one of

00:17:43,770 --> 00:17:49,540
the others

00:17:45,900 --> 00:17:55,020
networking there are things you can do

00:17:49,540 --> 00:17:58,240
to confuse how you're using the system

00:17:55,020 --> 00:18:03,180
if you want to want things to be saying

00:17:58,240 --> 00:18:05,800
don't don't mix the network using policy

00:18:03,180 --> 00:18:08,110
network policy using modules because

00:18:05,800 --> 00:18:12,250
getting them to agree is going to be

00:18:08,110 --> 00:18:16,630
really tough there are issues with user

00:18:12,250 --> 00:18:18,220
space user space may get confused over

00:18:16,630 --> 00:18:21,790
which security module you're using if

00:18:18,220 --> 00:18:26,170
you're using multiples the ID command is

00:18:21,790 --> 00:18:29,080
my personal favorite say ID it will if

00:18:26,170 --> 00:18:33,000
you ID - Z which is supposed to tell you

00:18:29,080 --> 00:18:36,760
the security context it'll tell you oh

00:18:33,000 --> 00:18:39,220
you don't have SELinux and you don't

00:18:36,760 --> 00:18:41,260
have SC Linux involved yeah installed I

00:18:39,220 --> 00:18:43,090
won't give it to you if you do have SC

00:18:41,260 --> 00:18:45,490
by Nixon walls GVSU Linux but what about

00:18:43,090 --> 00:18:48,040
the other information you probably want

00:18:45,490 --> 00:18:53,380
to get yeah you might want to get more

00:18:48,040 --> 00:18:55,390
information out of ID LS dash dash Z as

00:18:53,380 --> 00:18:58,990
well well I want to see all the security

00:18:55,390 --> 00:19:00,700
information about that good news the

00:18:58,990 --> 00:19:02,470
system Dee seems to be doing a pretty

00:19:00,700 --> 00:19:05,260
good job of keeping up with the security

00:19:02,470 --> 00:19:07,750
modules and I think it actually well

00:19:05,260 --> 00:19:10,510
yeah my experience is that it actually

00:19:07,750 --> 00:19:14,010
will support things out of the box but

00:19:10,510 --> 00:19:18,310
again there are cases you can confuse it

00:19:14,010 --> 00:19:23,410
the good news is if you we have a file

00:19:18,310 --> 00:19:25,090
in sis kernel security called LS m which

00:19:23,410 --> 00:19:26,890
will give you a list of the the modules

00:19:25,090 --> 00:19:30,640
that are in actually installed so you

00:19:26,890 --> 00:19:37,510
can actually do something so I just hit

00:19:30,640 --> 00:19:39,400
the wrong button alright so if you're

00:19:37,510 --> 00:19:42,160
writing a new Linux security module and

00:19:39,400 --> 00:19:45,610
you're looking for for the potential

00:19:42,160 --> 00:19:49,060
stacking it in the near future what do

00:19:45,610 --> 00:19:50,380
you need to know well first thing is if

00:19:49,060 --> 00:19:53,440
you're using network and make it

00:19:50,380 --> 00:19:54,580
optional if you want to plot if you're

00:19:53,440 --> 00:19:56,560
going to want to plug it in with one of

00:19:54,580 --> 00:19:58,010
the other modules that uses secure use

00:19:56,560 --> 00:20:00,650
this networking

00:19:58,010 --> 00:20:02,030
you might not want to be the one who

00:20:00,650 --> 00:20:05,120
owns the networking you might want to

00:20:02,030 --> 00:20:08,720
let the other guy have the networking in

00:20:05,120 --> 00:20:11,030
practical configurations read the net

00:20:08,720 --> 00:20:17,600
liberal code before you use it I didn't

00:20:11,030 --> 00:20:21,140
and I have a lot of rework to do and you

00:20:17,600 --> 00:20:23,930
define what what it mean what what what

00:20:21,140 --> 00:20:26,480
it would mean for sent for same behavior

00:20:23,930 --> 00:20:30,050
to be if your network doesn't have

00:20:26,480 --> 00:20:34,160
labels on it just those are important

00:20:30,050 --> 00:20:36,680
things process attributes traditionally

00:20:34,160 --> 00:20:40,940
you look in proc in proc adder to find

00:20:36,680 --> 00:20:45,890
proc add or current to find what your

00:20:40,940 --> 00:20:49,100
current process context is we're adding

00:20:45,890 --> 00:20:52,100
a subdirectory in proc adder for your

00:20:49,100 --> 00:20:53,990
particular LS m makes things a whole lot

00:20:52,100 --> 00:20:59,570
easier you know you know you're never

00:20:53,990 --> 00:21:01,730
gonna be any conflicting there SOP R

00:20:59,570 --> 00:21:02,900
Seck you might want to have a wrapper

00:21:01,730 --> 00:21:04,730
for that to make sure that you're

00:21:02,900 --> 00:21:11,920
getting your information not somebody

00:21:04,730 --> 00:21:11,920
else's think twice about using SEC IDs

00:21:11,950 --> 00:21:16,160
do you really want to have that do you

00:21:14,240 --> 00:21:17,920
really need to have the things that that

00:21:16,160 --> 00:21:23,000
you get with sick ideas like audit like

00:21:17,920 --> 00:21:25,610
audit filtering you probably do but if

00:21:23,000 --> 00:21:28,660
you don't if you can avoid that you're

00:21:25,610 --> 00:21:31,930
probably gonna make your life simpler

00:21:28,660 --> 00:21:35,630
and be careful with the estate okay

00:21:31,930 --> 00:21:39,050
remember that in a stacking environment

00:21:35,630 --> 00:21:40,970
if the guy ahead of you fails you're not

00:21:39,050 --> 00:21:44,110
going to get called so if you're

00:21:40,970 --> 00:21:46,490
counting on on balancing your state

00:21:44,110 --> 00:21:50,570
throughout all all the hooks that you're

00:21:46,490 --> 00:21:52,640
calling and your and something else

00:21:50,570 --> 00:21:54,800
fails ahead of you you won't get called

00:21:52,640 --> 00:21:56,480
so you just need to be really really

00:21:54,800 --> 00:22:01,130
careful with that if you're going to

00:21:56,480 --> 00:22:04,420
have state that your ality memory you're

00:22:01,130 --> 00:22:07,460
allocating to keep track of things

00:22:04,420 --> 00:22:10,390
outside of what's in the in the

00:22:07,460 --> 00:22:12,100
infrastructure manage blobs

00:22:10,390 --> 00:22:17,770
unprocess exit you're going to need

00:22:12,100 --> 00:22:18,550
clean that up because well you're gonna

00:22:17,770 --> 00:22:21,850
have to do that

00:22:18,550 --> 00:22:24,820
so wrapping up there

00:22:21,850 --> 00:22:27,790
alright so stacks of the similar modules

00:22:24,820 --> 00:22:29,260
are good it's like we like to be able to

00:22:27,790 --> 00:22:33,220
do all kinds of interesting interesting

00:22:29,260 --> 00:22:35,290
and unnatural things in in unison

00:22:33,220 --> 00:22:37,570
because well the more unnatural things

00:22:35,290 --> 00:22:39,550
you do the better right

00:22:37,570 --> 00:22:42,460
stacks should avoid fighting over the

00:22:39,550 --> 00:22:45,240
network because that were configuration

00:22:42,460 --> 00:22:50,410
always has been and always will be

00:22:45,240 --> 00:22:53,920
sophisticated exercise and if you color

00:22:50,410 --> 00:22:57,360
within the lines play by the rules don't

00:22:53,920 --> 00:23:01,780
try to do things that are esoteric or

00:22:57,360 --> 00:23:04,210
require a dish require extremes of

00:23:01,780 --> 00:23:08,560
memory management you're probably going

00:23:04,210 --> 00:23:11,550
to be happier and that's what I have so

00:23:08,560 --> 00:23:11,550
questions

00:23:20,659 --> 00:23:28,200
so how do i do bug when i get a denial

00:23:24,870 --> 00:23:30,870
is it like i just have to check all

00:23:28,200 --> 00:23:32,820
three is there any sort of unified have

00:23:30,870 --> 00:23:40,409
you thought about like unifying that at

00:23:32,820 --> 00:23:43,970
all or okay so you get an e you get an e

00:23:40,409 --> 00:23:54,120
access you doing open you get me access

00:23:43,970 --> 00:23:57,029
well what do you do now i I hate to to

00:23:54,120 --> 00:23:58,320
say things like this but probably a

00:23:57,029 --> 00:24:03,870
third of the programmers out there don't

00:23:58,320 --> 00:24:05,309
understand mode bits so people get an

00:24:03,870 --> 00:24:07,559
error they throw up their hands they

00:24:05,309 --> 00:24:15,809
they they do a screenshot they send it

00:24:07,559 --> 00:24:17,820
out to a mailing list the answer is that

00:24:15,809 --> 00:24:20,190
if you're using a sophisticated Stax

00:24:17,820 --> 00:24:21,899
security module environment you're

00:24:20,190 --> 00:24:24,570
probably not much worse off than you are

00:24:21,899 --> 00:24:29,820
with a single security module if you're

00:24:24,570 --> 00:24:31,980
using more than one if you're not a if

00:24:29,820 --> 00:24:33,690
you're a programmer who's not aware of

00:24:31,980 --> 00:24:35,700
your environment you're no worse off

00:24:33,690 --> 00:24:38,370
than you are now if you're a program is

00:24:35,700 --> 00:24:39,960
aware of your environment you should be

00:24:38,370 --> 00:24:44,399
aware of the fact that there might be

00:24:39,960 --> 00:24:47,640
several things that could cause this we

00:24:44,399 --> 00:24:49,620
actually had something very similar to

00:24:47,640 --> 00:24:52,320
this that we tried to answer several

00:24:49,620 --> 00:24:54,750
years ago just with selinux and the

00:24:52,320 --> 00:24:56,190
traditional deck mechanisms it's the

00:24:54,750 --> 00:24:58,500
same sort of problem obviously it gets

00:24:56,190 --> 00:25:00,029
worse with stacking but same idea you

00:24:58,500 --> 00:25:02,460
can have multiple places where you can

00:25:00,029 --> 00:25:04,590
get an access control denial and we

00:25:02,460 --> 00:25:06,659
called it the friendly he perm effort

00:25:04,590 --> 00:25:09,600
and we spent a lot of time looking at

00:25:06,659 --> 00:25:10,830
the problem is coming up with any

00:25:09,600 --> 00:25:14,399
mechanism it's just going to be

00:25:10,830 --> 00:25:16,529
inherently very racy you know there we

00:25:14,399 --> 00:25:18,690
never could find a good solution so I

00:25:16,529 --> 00:25:21,090
mean somebody's got an idea and they can

00:25:18,690 --> 00:25:22,620
demonstrate that it wouldn't be racy as

00:25:21,090 --> 00:25:24,090
all hell you know I think we'd love to

00:25:22,620 --> 00:25:26,130
hear it cuz it's it would be something

00:25:24,090 --> 00:25:29,419
that would be useful today independent

00:25:26,130 --> 00:25:32,010
of stacking but I think basically from

00:25:29,419 --> 00:25:33,639
the way we approach it now between at

00:25:32,010 --> 00:25:36,549
least in the selinux

00:25:33,639 --> 00:25:39,909
between deck and SELinux is largely with

00:25:36,549 --> 00:25:42,159
auditing you know you'll get the denials

00:25:39,909 --> 00:25:44,889
the SELinux nails to the auto log and so

00:25:42,159 --> 00:25:47,349
presumably if you have a well-developed

00:25:44,889 --> 00:25:50,219
ellis Emmure and you have some auditing

00:25:47,349 --> 00:25:52,899
mechanism when you have a denial so a

00:25:50,219 --> 00:25:56,529
presumably in a stacked environment each

00:25:52,899 --> 00:25:58,809
of the LSMs would generate denials when

00:25:56,529 --> 00:26:00,219
they hit it so now there would be all

00:25:58,809 --> 00:26:01,869
sorts of interesting questions that

00:26:00,219 --> 00:26:03,969
would come about because you know you

00:26:01,869 --> 00:26:05,769
might all the hooks might not be

00:26:03,969 --> 00:26:10,570
triggered and and in reality you have

00:26:05,769 --> 00:26:13,379
that today because if dak denies the

00:26:10,570 --> 00:26:16,299
access the LSM never sees it so

00:26:13,379 --> 00:26:18,190
basically it's it's sort of if you don't

00:26:16,299 --> 00:26:20,289
see a denial on the audit log then you

00:26:18,190 --> 00:26:26,019
would assume that the denial happens

00:26:20,289 --> 00:26:28,029
somewhere else do you what what is

00:26:26,019 --> 00:26:30,089
actually shows up in proc self adder

00:26:28,029 --> 00:26:33,609
like current for this

00:26:30,089 --> 00:26:37,209
okay so proc self adder current is going

00:26:33,609 --> 00:26:40,749
to get the first security module that

00:26:37,209 --> 00:26:45,549
supports credentials credential hooks in

00:26:40,749 --> 00:26:47,919
the list okay unless you've used the pr

00:26:45,549 --> 00:26:50,709
control to tell it which one - which one

00:26:47,919 --> 00:26:53,109
to provide this is why we want to have

00:26:50,709 --> 00:26:58,089
the sub directories because to

00:26:53,109 --> 00:27:00,249
disambiguate that i actually when I did

00:26:58,089 --> 00:27:05,289
smack way back in the Dark Ages when

00:27:00,249 --> 00:27:08,289
dinosaurs roamed the earth I made a

00:27:05,289 --> 00:27:10,690
serious mistake by reusing proc adder

00:27:08,289 --> 00:27:15,159
current rather than having proc add or

00:27:10,690 --> 00:27:17,739
smack it was a mistake I made it I admit

00:27:15,159 --> 00:27:23,589
to it I misled the app armour people to

00:27:17,739 --> 00:27:25,390
do the same thing yeah but I got it into

00:27:23,589 --> 00:27:32,790
the kernel first

00:27:25,390 --> 00:27:32,790
[Laughter]

00:27:35,850 --> 00:27:45,640
yeah it made sense yeah yeah and I I

00:27:44,170 --> 00:27:47,020
guess that's one of the important things

00:27:45,640 --> 00:27:49,380
here is that things have changed since

00:27:47,020 --> 00:27:54,850
we did the original since we did a

00:27:49,380 --> 00:27:57,850
Parmer and SELinux in smack security

00:27:54,850 --> 00:28:00,100
models are way different it's like we

00:27:57,850 --> 00:28:03,670
didn't have no js' we didn't have

00:28:00,100 --> 00:28:05,350
containers virtualization was something

00:28:03,670 --> 00:28:07,450
that you used if you were one of the

00:28:05,350 --> 00:28:10,450
cool kids but but in general people

00:28:07,450 --> 00:28:13,780
didn't do it so it's a different

00:28:10,450 --> 00:28:16,840
environment here the biggest reason to

00:28:13,780 --> 00:28:19,590
do stacking is to encourage and get new

00:28:16,840 --> 00:28:25,230
models in a new security paradigms

00:28:19,590 --> 00:28:27,640
moving forward to eventually replace the

00:28:25,230 --> 00:28:33,570
bell and Lapage all the derivatives that

00:28:27,640 --> 00:28:36,250
we're using now any more questions

00:28:33,570 --> 00:28:39,130
this is maybe a really dumb question and

00:28:36,250 --> 00:28:40,809
insane I don't I really haven't thought

00:28:39,130 --> 00:28:43,120
about it too much it's like it's the

00:28:40,809 --> 00:28:45,610
idea that the stack in the stack each

00:28:43,120 --> 00:28:48,130
security module each LSM needs to be

00:28:45,610 --> 00:28:50,260
unique you can build a stack like for

00:28:48,130 --> 00:28:52,780
example say a bomber then on top of it

00:28:50,260 --> 00:28:56,380
sa Linux and then another Abama and

00:28:52,780 --> 00:29:00,160
another Scylla knows that wouldn't fit

00:28:56,380 --> 00:29:02,950
the current design but if you called it

00:29:00,160 --> 00:29:05,340
something other than a Parmer you could

00:29:02,950 --> 00:29:05,340
do it

00:29:05,920 --> 00:29:14,920
and now the the possibility of a parmer

00:29:11,410 --> 00:29:19,480
namespacing for example is still one

00:29:14,920 --> 00:29:23,170
where as a community we're kind of kind

00:29:19,480 --> 00:29:26,260
of still not on that one because how do

00:29:23,170 --> 00:29:29,050
you maintain the security blob for two

00:29:26,260 --> 00:29:33,429
instances of app armor sure yeah how do

00:29:29,050 --> 00:29:36,429
you maintain the coherency where you've

00:29:33,429 --> 00:29:38,740
got one policy for the base system and a

00:29:36,429 --> 00:29:39,580
different policy for the things within

00:29:38,740 --> 00:29:43,020
the container

00:29:39,580 --> 00:29:46,170
you both you do one due to the intersect

00:29:43,020 --> 00:29:57,460
the mind boggles of the possibilities

00:29:46,170 --> 00:30:03,040
but it is conceivably possible oh here

00:29:57,460 --> 00:30:06,610
comes the hard one more comment there's

00:30:03,040 --> 00:30:08,620
an if the Mount Apo I stuff goes end

00:30:06,610 --> 00:30:11,230
there'll be a new system called FS info

00:30:08,620 --> 00:30:13,420
which allows us to get more information

00:30:11,230 --> 00:30:16,210
out along with kinds of Stata fess from

00:30:13,420 --> 00:30:19,840
files and file systems we should make

00:30:16,210 --> 00:30:22,180
look at making that able to return all

00:30:19,840 --> 00:30:25,450
the labels attached to a file or a super

00:30:22,180 --> 00:30:31,110
block and list the other SEMS that's

00:30:25,450 --> 00:30:31,110
those labels belong to okay works for me

00:30:33,000 --> 00:30:36,000
questions

00:30:41,600 --> 00:30:46,340
thank you one question the stacking is

00:30:44,540 --> 00:30:49,340
it handled by the canal at the canal

00:30:46,340 --> 00:30:51,290
level or had a user level sorry the

00:30:49,340 --> 00:30:54,730
stacking of the modules is it handled at

00:30:51,290 --> 00:30:57,470
the canal level or the user level

00:30:54,730 --> 00:30:59,840
current car yeah kernel level so in

00:30:57,470 --> 00:31:03,590
these days have you be at the kernel

00:30:59,840 --> 00:31:05,240
level yes so when you boot the system it

00:31:03,590 --> 00:31:08,240
registers the security modules it's

00:31:05,240 --> 00:31:11,300
going to use now and that's for the

00:31:08,240 --> 00:31:15,230
entire system now could you do it at

00:31:11,300 --> 00:31:16,850
like a hierarchical level level where at

00:31:15,230 --> 00:31:20,210
some point you could say oh and from

00:31:16,850 --> 00:31:25,460
here on down I want to use this security

00:31:20,210 --> 00:31:30,800
module as well it's conceivable it's

00:31:25,460 --> 00:31:32,300
possible it has ads implications like

00:31:30,800 --> 00:31:35,480
the infrastructure has to know that the

00:31:32,300 --> 00:31:37,490
blob size might change in this case

00:31:35,480 --> 00:31:40,490
would you be able for instance to create

00:31:37,490 --> 00:31:48,500
a new security module that will in fact

00:31:40,490 --> 00:31:50,810
called other security modules yes you

00:31:48,500 --> 00:31:55,070
can do anything in a security module

00:31:50,810 --> 00:31:57,910
there magical that way but one of the

00:31:55,070 --> 00:32:00,560
possibilities for supporting the

00:31:57,910 --> 00:32:02,390
namespacing is you have a security

00:32:00,560 --> 00:32:06,830
module that actually does dynamic

00:32:02,390 --> 00:32:09,230
loading of security modules I don't know

00:32:06,830 --> 00:32:10,520
that's the best way to go about it that

00:32:09,230 --> 00:32:14,180
was actually one of the the original

00:32:10,520 --> 00:32:16,160
design possibilities for the module

00:32:14,180 --> 00:32:17,540
stacking was to have a security module

00:32:16,160 --> 00:32:23,990
that does nothing to stack security

00:32:17,540 --> 00:32:27,760
modules but that had other it's a it's a

00:32:23,990 --> 00:32:27,760
sophisticated system to do that

00:32:30,820 --> 00:32:37,080
questions not let's thank you thank you

00:32:36,100 --> 00:32:42,540
talk

00:32:37,080 --> 00:32:42,540

YouTube URL: https://www.youtube.com/watch?v=-hrF3eZmPPc


