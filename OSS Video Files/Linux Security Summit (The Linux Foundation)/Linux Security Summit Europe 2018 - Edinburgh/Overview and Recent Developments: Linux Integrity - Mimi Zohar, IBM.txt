Title: Overview and Recent Developments: Linux Integrity - Mimi Zohar, IBM
Publication date: 2018-10-27
Playlist: Linux Security Summit Europe 2018 - Edinburgh
Description: 
	Overview and Recent Developments: Linux Integrity - Mimi Zohar, IBMÂ 

The goals of the linux-integrity subsystem are to detect if files have
been accidentally or maliciously altered, both remotely and locally,
appraise a file's measurement against a "good" value stored as an
extended attribute, and enforce local file integrity.

This talk will describe the different aspects of the linux-integrity
subsystem, the security guarantees, as well as the current and future
development. 

About Mimi Zohar
Mimi Zohar is a member of the Secure Systems Group at the IBM T.J. Watson Research Center. Her current interests are in the areas of system security and integrity, a natural progression from prior work in firewall design for perimeter security. She is the linux-integrity subsystem maintainer and a member of the Linux Security Summit(LSS) program committee.
Captions: 
	00:00:00,030 --> 00:00:09,269
good morning so we're gonna be

00:00:06,299 --> 00:00:12,599
discussing the Linux integrity subsystem

00:00:09,269 --> 00:00:14,820
and the question is what is the what

00:00:12,599 --> 00:00:18,630
comprises the limp Linux integrity

00:00:14,820 --> 00:00:21,090
subsystem and it's basically there's two

00:00:18,630 --> 00:00:23,850
parts there's imma and there's EDM and

00:00:21,090 --> 00:00:26,820
then it's dependent on a number of other

00:00:23,850 --> 00:00:30,660
subsystems some of which were developed

00:00:26,820 --> 00:00:36,320
specifically for this use so the other

00:00:30,660 --> 00:00:40,590
ones are trusted and encrypted keys and

00:00:36,320 --> 00:00:44,040
and demetri up streamed he wasn't the

00:00:40,590 --> 00:00:47,239
first one to attempt it but his he

00:00:44,040 --> 00:00:51,530
upstream the MPI library used for

00:00:47,239 --> 00:01:04,559
signature verification the MPI library

00:00:51,530 --> 00:01:08,070
and of course the TPM this the talk will

00:01:04,559 --> 00:01:11,340
mainly cover that i'ma overview section

00:01:08,070 --> 00:01:14,580
and the recent developments at the very

00:01:11,340 --> 00:01:19,590
bottom and just for completeness I've

00:01:14,580 --> 00:01:23,580
included the uses of imma I'm a

00:01:19,590 --> 00:01:26,790
measurement to be specific and the name

00:01:23,580 --> 00:01:29,100
spacing when we eventually get to name

00:01:26,790 --> 00:01:32,090
spacing and what the direction will be

00:01:29,100 --> 00:01:32,090
when we get there

00:01:41,810 --> 00:01:48,630
so the goals of the mmm the integrity

00:01:45,899 --> 00:01:51,750
subsystem really have not changed this

00:01:48,630 --> 00:01:57,110
is straight from the wiki and I believe

00:01:51,750 --> 00:02:00,600
Dave helped define what the goals of the

00:01:57,110 --> 00:02:04,140
subsystem are and the goals are to

00:02:00,600 --> 00:02:07,649
detect if files have been accidentally

00:02:04,140 --> 00:02:09,720
or maliciously altered both remotely and

00:02:07,649 --> 00:02:12,420
locally to appraise the files

00:02:09,720 --> 00:02:14,910
measurement against a good value stored

00:02:12,420 --> 00:02:18,989
as an extended attribute and into

00:02:14,910 --> 00:02:23,099
enforce local file integrity and there's

00:02:18,989 --> 00:02:35,760
a white paper from Dave with the URL at

00:02:23,099 --> 00:02:37,319
the bottom so the goal of detecting if

00:02:35,760 --> 00:02:40,230
files have been accidentally or

00:02:37,319 --> 00:02:45,120
maliciously altered correlates to the

00:02:40,230 --> 00:02:48,000
first time a measurement and it's

00:02:45,120 --> 00:02:51,989
pointless to ask the system if the

00:02:48,000 --> 00:02:54,840
system has been compromised if it's been

00:02:51,989 --> 00:02:57,630
compromised it can lie to you so we

00:02:54,840 --> 00:03:00,019
don't we need a method without asking

00:02:57,630 --> 00:03:05,970
the system if it's been compromised

00:03:00,019 --> 00:03:07,799
the second and third goals appraising a

00:03:05,970 --> 00:03:10,760
files measurement against a good value

00:03:07,799 --> 00:03:16,010
and enforcing local file integrity

00:03:10,760 --> 00:03:20,040
correlate to the to the i'ma appraisal

00:03:16,010 --> 00:03:24,209
the good values are either a hat file

00:03:20,040 --> 00:03:29,910
hash or file signature are stored as an

00:03:24,209 --> 00:03:33,329
extended attribute and we use a specific

00:03:29,910 --> 00:03:36,989
hearing to say which keys can be used to

00:03:33,329 --> 00:03:40,980
verify the file signature and as a bonus

00:03:36,989 --> 00:03:47,909
Peter moody had to find i'ma audit and

00:03:40,980 --> 00:03:48,540
i'ma audit or augments the audit why did

00:03:47,909 --> 00:03:52,700
subsist

00:03:48,540 --> 00:03:56,129
with the file hashes that are calculated

00:03:52,700 --> 00:03:57,900
it's used to assist in the analytics and

00:03:56,129 --> 00:03:59,519
forensics but we'll have a bigger

00:03:57,900 --> 00:04:05,849
picture of how all of this comes

00:03:59,519 --> 00:04:10,260
together but the first thing is instead

00:04:05,849 --> 00:04:11,430
of hard coding or sprinkling policy

00:04:10,260 --> 00:04:15,569
throughout the kernel

00:04:11,430 --> 00:04:19,949
i'muh has a single file which is used

00:04:15,569 --> 00:04:23,789
for to store the policy and that policy

00:04:19,949 --> 00:04:25,979
on the left-hand side you'll see the

00:04:23,789 --> 00:04:29,490
policy on the right-hand side the

00:04:25,979 --> 00:04:33,510
correlating pseudocode which is the crux

00:04:29,490 --> 00:04:35,930
of i'ma you collect the measurement

00:04:33,510 --> 00:04:38,760
which means you calculate the file hash

00:04:35,930 --> 00:04:41,580
you store the measurement in the

00:04:38,760 --> 00:04:46,229
measurement list and you appraise that

00:04:41,580 --> 00:04:49,139
the good value based on that file hash

00:04:46,229 --> 00:04:54,389
that you previously calculated and you

00:04:49,139 --> 00:04:57,289
then use the the file hash in to add

00:04:54,389 --> 00:04:57,289
audit records

00:05:06,010 --> 00:05:13,240
so the reason that I used this is a

00:05:09,800 --> 00:05:16,970
simple policy and the reason that I used

00:05:13,240 --> 00:05:20,660
this policy is because if you're

00:05:16,970 --> 00:05:23,810
enforcing the file appraisals on your

00:05:20,660 --> 00:05:27,710
system and there are no keys or there's

00:05:23,810 --> 00:05:30,800
no signatures well then your system

00:05:27,710 --> 00:05:34,640
might not work exactly right and it

00:05:30,800 --> 00:05:37,580
might hang so by doing by using the que

00:05:34,640 --> 00:05:41,480
exec kernel hook as the example you can

00:05:37,580 --> 00:05:43,460
try and use i'ma appraisal and use the

00:05:41,480 --> 00:05:46,670
measurement and audit to see what is

00:05:43,460 --> 00:05:50,150
actually happening without not too much

00:05:46,670 --> 00:05:51,650
affecting your system basically the

00:05:50,150 --> 00:05:54,770
worst that will happen in this case

00:05:51,650 --> 00:05:59,510
is that you won't be able to do a que

00:05:54,770 --> 00:06:05,810
exec the because this there was no

00:05:59,510 --> 00:06:07,640
signature and okay so these concepts

00:06:05,810 --> 00:06:09,740
aren't new concepts we've had the

00:06:07,640 --> 00:06:13,430
concept of secure in trusted boot for a

00:06:09,740 --> 00:06:15,290
while in secure boot each stage of

00:06:13,430 --> 00:06:17,840
booting verifies the signature of the

00:06:15,290 --> 00:06:20,990
next stage before transferring control

00:06:17,840 --> 00:06:23,990
of it and what's included in the next

00:06:20,990 --> 00:06:27,860
stage might be keys

00:06:23,990 --> 00:06:30,380
and on signature verification the boot

00:06:27,860 --> 00:06:34,640
fails which we just said previously in

00:06:30,380 --> 00:06:37,220
the case of trusted boot we each stage

00:06:34,640 --> 00:06:39,680
of booting measures the next stage and

00:06:37,220 --> 00:06:41,450
adds the measurement to the event log in

00:06:39,680 --> 00:06:44,330
the case of i'ma it's called the i'ma

00:06:41,450 --> 00:06:46,940
measurement list and extends the TPM

00:06:44,330 --> 00:06:49,180
before transferring control to the next

00:06:46,940 --> 00:06:49,180
stage

00:06:52,310 --> 00:07:02,570
so I'm in this diagram we show what is

00:06:58,910 --> 00:07:05,060
entailed in order to verify signatures

00:07:02,570 --> 00:07:07,630
this is the appraisal this is the secure

00:07:05,060 --> 00:07:12,320
boot the equivalent of extending to

00:07:07,630 --> 00:07:14,240
secure boot to the OS so in order to

00:07:12,320 --> 00:07:17,990
verify a signatures we need those

00:07:14,240 --> 00:07:21,010
signatures there have been two talks in

00:07:17,990 --> 00:07:25,640
the past the first one was given by

00:07:21,010 --> 00:07:32,090
Stefan and min Stefan burger and Mehmet

00:07:25,640 --> 00:07:34,940
Kayla in 2016 on an elf PC talk and on

00:07:32,090 --> 00:07:37,190
last year Mathew Garrett gave a talk on

00:07:34,940 --> 00:07:41,270
signing Linux executables for fun and

00:07:37,190 --> 00:07:44,150
security also at LPC but the main idea

00:07:41,270 --> 00:07:48,130
is that we need to be able to to

00:07:44,150 --> 00:07:52,060
distribute file code and file signatures

00:07:48,130 --> 00:07:56,720
together and in order to do that we've

00:07:52,060 --> 00:08:00,200
modified rpm and that's been in rpm and

00:07:56,720 --> 00:08:03,260
upstream for a number of years and we've

00:08:00,200 --> 00:08:06,320
tried numerous times to do the same for

00:08:03,260 --> 00:08:08,840
Debian files Debian packages on the

00:08:06,320 --> 00:08:09,380
first time I did it by modifying the

00:08:08,840 --> 00:08:13,520
sha-1

00:08:09,380 --> 00:08:17,030
at the time sha-1 file which I won some

00:08:13,520 --> 00:08:19,729
file with the just including the

00:08:17,030 --> 00:08:22,720
signatures there the second attempt was

00:08:19,729 --> 00:08:25,700
by my colleague Stefan Berger who

00:08:22,720 --> 00:08:29,150
modified the version of char that they

00:08:25,700 --> 00:08:33,380
had didn't in the package to install the

00:08:29,150 --> 00:08:35,750
packages did not include extended

00:08:33,380 --> 00:08:39,469
attributes so he modified the Tarts

00:08:35,750 --> 00:08:43,780
include the extended attributes and more

00:08:39,469 --> 00:08:48,020
recently is the M tree version by Mathew

00:08:43,780 --> 00:08:51,560
to store the file signatures in the M

00:08:48,020 --> 00:08:54,410
tree as far as I know none of these have

00:08:51,560 --> 00:08:56,800
been up streamed and are not other yet

00:08:54,410 --> 00:08:56,800
available

00:09:03,440 --> 00:09:10,709
so assuming that we have that the file

00:09:07,709 --> 00:09:14,190
files are distributed packages come with

00:09:10,709 --> 00:09:17,519
file signatures there will be different

00:09:14,190 --> 00:09:20,189
use cases as to who does the signing who

00:09:17,519 --> 00:09:22,410
accepts what key sometimes you'll want

00:09:20,189 --> 00:09:24,779
it from the distros sometimes you'll

00:09:22,410 --> 00:09:27,000
want to redo it on your own to limit

00:09:24,779 --> 00:09:30,329
what can actually run on your system and

00:09:27,000 --> 00:09:36,350
you would do that based on refining the

00:09:30,329 --> 00:09:36,350
files for more of a key granularity so

00:09:36,980 --> 00:09:42,870
as we said i'muh is based on policy so

00:09:41,040 --> 00:09:46,889
the first thing that you need to do is

00:09:42,870 --> 00:09:50,220
define a policy the appraisal which

00:09:46,889 --> 00:09:53,819
itself has should be signed and would

00:09:50,220 --> 00:09:56,430
only be loaded if the signature verified

00:09:53,819 --> 00:10:01,850
so these are a couple of the built in

00:09:56,430 --> 00:10:05,850
policies you have appraised TCB and

00:10:01,850 --> 00:10:08,370
secure boot but all these policies are

00:10:05,850 --> 00:10:12,959
overwritten by a custom policy that you

00:10:08,370 --> 00:10:15,649
can define and can load by your arm on

00:10:12,959 --> 00:10:15,649
the system

00:10:20,210 --> 00:10:25,490
so dig digging down even deeper we now

00:10:23,000 --> 00:10:27,710
have that we protect the file data

00:10:25,490 --> 00:10:33,140
i'ma appraisal protects the file data

00:10:27,710 --> 00:10:35,360
and and we showed mm that it's based on

00:10:33,140 --> 00:10:37,070
the file hashes that are distributed

00:10:35,360 --> 00:10:41,360
with the PAC that should be distributed

00:10:37,070 --> 00:10:45,589
with the packages and then mmm but we

00:10:41,360 --> 00:10:48,440
didn't say how that is protected how the

00:10:45,589 --> 00:10:50,660
file data how the file metadata the file

00:10:48,440 --> 00:10:55,480
signatures and hashes are protected and

00:10:50,660 --> 00:10:59,870
that's when we come to EVM so mmm

00:10:55,480 --> 00:11:02,600
so EVM protects the file metadata based

00:10:59,870 --> 00:11:10,700
on an H Mac or signature stored in the

00:11:02,600 --> 00:11:14,990
extended attribute and and its use the H

00:11:10,700 --> 00:11:17,360
Mac you can you the key is a trust

00:11:14,990 --> 00:11:21,440
normally you would use a trusted key

00:11:17,360 --> 00:11:25,130
that encrypts and decrypts encrypted key

00:11:21,440 --> 00:11:26,600
these are two new key types or these are

00:11:25,130 --> 00:11:31,130
two separate key types that were

00:11:26,600 --> 00:11:33,800
developed for this so once you have the

00:11:31,130 --> 00:11:35,990
file data and the file metadata you need

00:11:33,800 --> 00:11:38,029
to bind the file metadata to the file

00:11:35,990 --> 00:11:40,970
and the original way that we did this

00:11:38,029 --> 00:11:44,060
since we weren't requiring file we

00:11:40,970 --> 00:11:45,830
weren't requiring security Exeter's but

00:11:44,060 --> 00:11:48,830
we wanted to protect the security at

00:11:45,830 --> 00:11:51,640
Exeter's so we tied it to the inode

00:11:48,830 --> 00:11:54,260
information and by tying it to the inode

00:11:51,640 --> 00:11:58,610
information well then it's tied to

00:11:54,260 --> 00:12:00,950
specific inode on a specific file system

00:11:58,610 --> 00:12:03,970
and the only way of getting that

00:12:00,950 --> 00:12:07,010
information onto the file system was by

00:12:03,970 --> 00:12:10,959
flashing it or signing it locally on the

00:12:07,010 --> 00:12:15,220
system so recently this past year

00:12:10,959 --> 00:12:18,890
there's a new method that's called the

00:12:15,220 --> 00:12:20,930
immutable and immutable and portable

00:12:18,890 --> 00:12:24,230
signatures from Matthew Thank You

00:12:20,930 --> 00:12:27,620
Matthew that ties it we've removed the

00:12:24,230 --> 00:12:30,310
identifiers the file system specific

00:12:27,620 --> 00:12:33,400
identifiers from the I from the HTML

00:12:30,310 --> 00:12:37,320
calculation and are now dependent

00:12:33,400 --> 00:12:40,300
using the security i'muh it's now and

00:12:37,320 --> 00:12:42,310
accepted it's there and we assume that

00:12:40,300 --> 00:12:44,380
it's being used so it's not that

00:12:42,310 --> 00:12:48,640
difficult to include the security i'ma

00:12:44,380 --> 00:12:51,130
and require it so this is the new way of

00:12:48,640 --> 00:12:55,150
binding information and at this point

00:12:51,130 --> 00:13:11,770
you can now include evm signature EVM

00:12:55,150 --> 00:13:15,490
signatures in rpm packages so originally

00:13:11,770 --> 00:13:19,839
originally originally we had four

00:13:15,490 --> 00:13:21,910
mutable files we have mutable files by

00:13:19,839 --> 00:13:23,560
definition can't be signed because if

00:13:21,910 --> 00:13:26,410
they are signed well they're not going

00:13:23,560 --> 00:13:30,100
to work if you change them so you can't

00:13:26,410 --> 00:13:32,589
verify the signature on files that are

00:13:30,100 --> 00:13:37,750
changing so for files that are changing

00:13:32,589 --> 00:13:41,290
we use we hash them and and in EDM we

00:13:37,750 --> 00:13:44,200
use the H Mac to protect them so this is

00:13:41,290 --> 00:13:49,360
really an offline protection and we're

00:13:44,200 --> 00:13:52,029
dependent on the access control either

00:13:49,360 --> 00:13:55,600
just on discretionary or mandatory

00:13:52,029 --> 00:14:00,310
access control to do the gating and to

00:13:55,600 --> 00:14:02,230
do the enforcement so whereas with the

00:14:00,310 --> 00:14:04,420
mutable files these are files that

00:14:02,230 --> 00:14:06,190
aren't changing these are files these

00:14:04,420 --> 00:14:09,010
are your executables these are your

00:14:06,190 --> 00:14:13,120
libraries these are things that are that

00:14:09,010 --> 00:14:16,089
you can sign and and it's fine you can

00:14:13,120 --> 00:14:18,600
sign them with an with an Imus signature

00:14:16,089 --> 00:14:22,089
you can sign them with the IBM signature

00:14:18,600 --> 00:14:27,610
and I assume Mathieu will be going

00:14:22,089 --> 00:14:30,100
through more of that originally the keys

00:14:27,610 --> 00:14:33,540
to verify these signatures were on the

00:14:30,100 --> 00:14:37,839
AIA and EDM keyrings

00:14:33,540 --> 00:14:42,370
and the and those keyrings were created

00:14:37,839 --> 00:14:45,940
by user space and loaded originally by

00:14:42,370 --> 00:14:46,750
drag cut onto the keyrings and we want

00:14:45,940 --> 00:14:49,600
these keys

00:14:46,750 --> 00:14:51,760
loaded as early as possible in order

00:14:49,600 --> 00:14:55,690
well first of all we need to be able to

00:14:51,760 --> 00:14:58,210
verify the signature of the policy

00:14:55,690 --> 00:15:01,920
itself that's going to be written and so

00:14:58,210 --> 00:15:06,670
it needs to be done as early as possible

00:15:01,920 --> 00:15:11,830
there's some security implications of

00:15:06,670 --> 00:15:12,490
using userspace hearings but these are

00:15:11,830 --> 00:15:14,350
okay

00:15:12,490 --> 00:15:18,340
if you're doing it and locking them in

00:15:14,350 --> 00:15:20,680
the REM FS but the preferred method

00:15:18,340 --> 00:15:24,870
would be to use the trusted key rings

00:15:20,680 --> 00:15:27,970
and the trusted key rings are created by

00:15:24,870 --> 00:15:31,300
by the kernel itself and the keys are

00:15:27,970 --> 00:15:35,200
once again loaded by drag cut if you're

00:15:31,300 --> 00:15:37,060
using direct cut and and if you have a

00:15:35,200 --> 00:15:40,090
policy we haven't gotten to how you

00:15:37,060 --> 00:15:42,580
specify a policy but if you're using

00:15:40,090 --> 00:15:45,970
SELinux and you're defining a policy

00:15:42,580 --> 00:15:49,960
based on SELinux labels well SELinux is

00:15:45,970 --> 00:15:53,260
loaded late and therefore it's deferred

00:15:49,960 --> 00:15:55,870
till after there the selinux policy is

00:15:53,260 --> 00:15:59,080
loaded and that would which is done by

00:15:55,870 --> 00:16:02,589
system D so if you're not using SELinux

00:15:59,080 --> 00:16:05,020
labels then or any other labels that are

00:16:02,589 --> 00:16:08,670
loaded policies that are loaded later

00:16:05,020 --> 00:16:17,680
then you can still use drag cut to load

00:16:08,670 --> 00:16:21,070
to load the policy mmm

00:16:17,680 --> 00:16:21,970
the other thing about the EDM and I'ma

00:16:21,070 --> 00:16:24,190
keyrings

00:16:21,970 --> 00:16:26,320
the trusted EDM and i'ma key rings is

00:16:24,190 --> 00:16:29,830
that keys that are loaded onto this

00:16:26,320 --> 00:16:35,130
keyring need to be verified and they're

00:16:29,830 --> 00:16:39,280
verified were we're extending the secure

00:16:35,130 --> 00:16:42,040
signature chain of trust from B we have

00:16:39,280 --> 00:16:47,200
this signature chain of trust from pre

00:16:42,040 --> 00:16:52,120
boot and now post boot we're gonna pivot

00:16:47,200 --> 00:16:55,480
that chain of trust to the built in the

00:16:52,120 --> 00:16:58,360
built in keys that are assigned in the

00:16:55,480 --> 00:17:00,339
kernel that are in the kernel such as

00:16:58,360 --> 00:17:03,069
the kernel module keys and

00:17:00,339 --> 00:17:12,250
any other keys that are loaded that are

00:17:03,069 --> 00:17:17,230
part of the system so this basically

00:17:12,250 --> 00:17:20,169
this diagram basically shows that you

00:17:17,230 --> 00:17:23,110
have the local CA key and it's used to

00:17:20,169 --> 00:17:26,559
sign other keys and it can be used to

00:17:23,110 --> 00:17:31,289
sign third-party keys and the question

00:17:26,559 --> 00:17:37,539
is how how can we get this local CA key

00:17:31,289 --> 00:17:39,429
into onto the built-in keyring in order

00:17:37,539 --> 00:17:43,779
to verify the keys as they're being

00:17:39,429 --> 00:17:48,940
added to the i'ma keyring and this the

00:17:43,779 --> 00:17:52,539
same goes for EDM so there are two

00:17:48,940 --> 00:17:56,409
methods currently the first method is

00:17:52,539 --> 00:17:58,299
just like the the kernel modules you

00:17:56,409 --> 00:18:00,940
build them into the system this is the

00:17:58,299 --> 00:18:02,950
simplest if you're if you're building

00:18:00,940 --> 00:18:05,320
your own kernel for your own use then

00:18:02,950 --> 00:18:07,510
you just build them right in there is a

00:18:05,320 --> 00:18:10,720
configuration option so that you don't

00:18:07,510 --> 00:18:14,409
have to figure out where the the dur

00:18:10,720 --> 00:18:17,020
file is and you just define where that

00:18:14,409 --> 00:18:19,539
file is on your configuration otherwise

00:18:17,020 --> 00:18:24,640
you can just add it to the same to the

00:18:19,539 --> 00:18:27,580
modules file the module certs file the

00:18:24,640 --> 00:18:31,809
second way is by reserving memory for

00:18:27,580 --> 00:18:34,419
the key so suppose that you want to run

00:18:31,809 --> 00:18:38,500
a stock distro you don't want to build

00:18:34,419 --> 00:18:41,020
your own kernel and you want to insert a

00:18:38,500 --> 00:18:44,590
key so we have a method for inserting a

00:18:41,020 --> 00:18:47,799
key into the kernel it's kind of sort of

00:18:44,590 --> 00:18:49,690
upstream there the initial patches were

00:18:47,799 --> 00:18:53,710
upstream but there are a couple more

00:18:49,690 --> 00:18:56,169
that make it more usable and fix a

00:18:53,710 --> 00:18:58,480
couple of of problems that were found

00:18:56,169 --> 00:19:02,770
with it those have not been up streamed

00:18:58,480 --> 00:19:05,710
and for us in I work with the

00:19:02,770 --> 00:19:09,700
development group that that separate out

00:19:05,710 --> 00:19:12,190
the people that do that build the

00:19:09,700 --> 00:19:12,750
kernels and those that are using the

00:19:12,190 --> 00:19:15,270
kernels

00:19:12,750 --> 00:19:17,700
built for them and this is a simple

00:19:15,270 --> 00:19:20,400
method for them to be able to use test

00:19:17,700 --> 00:19:22,410
keys on a kernel that is built that's

00:19:20,400 --> 00:19:24,800
already been built for them and then

00:19:22,410 --> 00:19:28,770
once they're ready they install they're

00:19:24,800 --> 00:19:31,560
the real keys before they release and so

00:19:28,770 --> 00:19:33,570
there's no they've already tested the

00:19:31,560 --> 00:19:35,910
kernel and everything is in place so

00:19:33,570 --> 00:19:38,840
there's different use cases for being

00:19:35,910 --> 00:19:42,480
able to embed these keys post install

00:19:38,840 --> 00:19:45,720
once you've installed the keys obviously

00:19:42,480 --> 00:19:47,910
in order to verified the file you've

00:19:45,720 --> 00:19:50,670
modified the kernel image so you

00:19:47,910 --> 00:19:57,450
therefore then need to resign the kernel

00:19:50,670 --> 00:19:59,880
image the third the third way of being

00:19:57,450 --> 00:20:02,670
able to verify keys to be able to put

00:19:59,880 --> 00:20:04,980
them on to the i'ma key ring is not by

00:20:02,670 --> 00:20:08,270
adding them onto the SEC onto the built

00:20:04,980 --> 00:20:12,030
in trusted keys but by adding it to the

00:20:08,270 --> 00:20:16,050
secondary keyring and there are out of

00:20:12,030 --> 00:20:20,730
stream patches that do this but once

00:20:16,050 --> 00:20:23,160
again if we're trying to have pivot the

00:20:20,730 --> 00:20:28,860
trust of root and if we bring in all the

00:20:23,160 --> 00:20:31,500
keys from UEFI for example then you

00:20:28,860 --> 00:20:33,120
trusting everything that has been run up

00:20:31,500 --> 00:20:37,350
to this point and you might not

00:20:33,120 --> 00:20:40,080
necessarily want to do this so from my

00:20:37,350 --> 00:20:45,210
point of view this is not the most

00:20:40,080 --> 00:20:55,620
optimal way of the of loading he's on to

00:20:45,210 --> 00:20:59,670
the i'ma keyring so we saw that we need

00:20:55,620 --> 00:21:02,490
the signatures we need the keys we need

00:20:59,670 --> 00:21:06,300
a policy and this is a lot of setup

00:21:02,490 --> 00:21:10,470
unlike I'm a appraisal we have I'm a

00:21:06,300 --> 00:21:14,040
measurement and I'm a measurement for

00:21:10,470 --> 00:21:17,400
extending this trusty boot to the OS we

00:21:14,040 --> 00:21:19,040
only need an I'm a measurement policy so

00:21:17,400 --> 00:21:23,810
if you look down below we've highlighted

00:21:19,040 --> 00:21:26,090
TCB and what that's one of the built-in

00:21:23,810 --> 00:21:28,040
policies

00:21:26,090 --> 00:21:30,650
and so all that you would do is start

00:21:28,040 --> 00:21:33,410
measuring and even if you measure files

00:21:30,650 --> 00:21:34,370
that aren't there's no signatures that

00:21:33,410 --> 00:21:37,580
are being enforced

00:21:34,370 --> 00:21:40,910
so it just works out of the box and you

00:21:37,580 --> 00:21:45,620
can define your own policy mmm your own

00:21:40,910 --> 00:21:47,750
custom policy so what happens after you

00:21:45,620 --> 00:21:50,360
have this measurement list we said we

00:21:47,750 --> 00:21:52,460
don't trust necessarily trust the system

00:21:50,360 --> 00:21:56,210
on which these measurements are being

00:21:52,460 --> 00:21:58,090
used so instead of verifying the

00:21:56,210 --> 00:22:02,840
measurement list on the local machine

00:21:58,090 --> 00:22:05,000
there's a way of if you send them to

00:22:02,840 --> 00:22:07,429
another machine and one that you do

00:22:05,000 --> 00:22:13,850
trust well then you can verify those

00:22:07,429 --> 00:22:17,900
measurements and those measurements can

00:22:13,850 --> 00:22:20,240
be then used as part of your analytics

00:22:17,900 --> 00:22:23,210
it can augment your existing analytics

00:22:20,240 --> 00:22:25,429
with the file hashes and it can also be

00:22:23,210 --> 00:22:32,630
used for forensics to know what has been

00:22:25,429 --> 00:22:35,570
run on your system so when we talk about

00:22:32,630 --> 00:22:40,220
the i'ma policy and the sample that I

00:22:35,570 --> 00:22:42,590
gave you was one rule for this you know

00:22:40,220 --> 00:22:46,630
the equivalent measuring appraising and

00:22:42,590 --> 00:22:49,190
auditing the k exact kernel image but

00:22:46,630 --> 00:22:51,920
once we start talking about a full

00:22:49,190 --> 00:22:55,250
policy there's a question as to what you

00:22:51,920 --> 00:22:57,110
want to measure you if you measure too

00:22:55,250 --> 00:22:59,030
little then you don't know the integrity

00:22:57,110 --> 00:23:01,850
of your system and if you measure too

00:22:59,030 --> 00:23:04,460
much well you can measure everything on

00:23:01,850 --> 00:23:06,440
the system and if you're measuring

00:23:04,460 --> 00:23:08,090
everything there might be memory

00:23:06,440 --> 00:23:12,110
pressure because the measurements are

00:23:08,090 --> 00:23:15,770
being stored in memory and performance

00:23:12,110 --> 00:23:17,840
issues that of going out to the TPM now

00:23:15,770 --> 00:23:22,309
we've done a lot to improve the TPM in

00:23:17,840 --> 00:23:24,170
performance but these are so there needs

00:23:22,309 --> 00:23:26,380
to be a balance as to what you're

00:23:24,170 --> 00:23:28,790
measuring and what you're not measuring

00:23:26,380 --> 00:23:35,140
some of the new features that are being

00:23:28,790 --> 00:23:39,740
proposed might not retain the existing

00:23:35,140 --> 00:23:44,380
security goals that i'ma and EVM provide

00:23:39,740 --> 00:23:48,350
and and you'll hear from other people

00:23:44,380 --> 00:24:01,760
who are giving talks about these new

00:23:48,350 --> 00:24:04,850
features that are being submitted so

00:24:01,760 --> 00:24:08,420
when we we spoke about at we spoke about

00:24:04,850 --> 00:24:11,780
sending the files to the remote host for

00:24:08,420 --> 00:24:13,850
verification and this is done by that

00:24:11,780 --> 00:24:15,620
two station server I'm not going to go

00:24:13,850 --> 00:24:18,650
through because other people have

00:24:15,620 --> 00:24:26,150
referred to it have spoken about at the

00:24:18,650 --> 00:24:29,690
station what I do want to say is mmm is

00:24:26,150 --> 00:24:31,820
that there is an IBM it might have

00:24:29,690 --> 00:24:36,050
gotten lost with all the talks that

00:24:31,820 --> 00:24:40,430
we've had that we've had this time here

00:24:36,050 --> 00:24:45,460
in in Europe and in North America that

00:24:40,430 --> 00:24:48,080
there is an alternative to the Intel TSS

00:24:45,460 --> 00:24:50,780
IBM does have an attestation an

00:24:48,080 --> 00:24:58,310
open-source attestation client server

00:24:50,780 --> 00:25:02,120
and an open source ESS and this is one

00:24:58,310 --> 00:25:05,480
of the slides from from the version that

00:25:02,120 --> 00:25:07,670
we have the researched version on done

00:25:05,480 --> 00:25:09,650
might by my colleague showing the

00:25:07,670 --> 00:25:13,040
different types of vulnerabilities that

00:25:09,650 --> 00:25:15,560
are detected not having a key having a

00:25:13,040 --> 00:25:17,890
bad key not having a signature and so

00:25:15,560 --> 00:25:17,890
forth

00:25:23,290 --> 00:25:28,720
in terms of the i'ma and where it's I'm

00:25:27,850 --> 00:25:30,730
being used

00:25:28,720 --> 00:25:33,160
and when I'm saying i'ma in the generals

00:25:30,730 --> 00:25:35,800
I'm saying i'ma an EDM in the general

00:25:33,160 --> 00:25:40,570
sense and not specifically measurement

00:25:35,800 --> 00:25:43,600
or appraisal mmm they're being used on

00:25:40,570 --> 00:25:47,860
the host system and in the virtual

00:25:43,600 --> 00:25:51,130
machine and the plan is to have the same

00:25:47,860 --> 00:25:54,600
and to have the same features running in

00:25:51,130 --> 00:25:58,840
the namespace but we still have some

00:25:54,600 --> 00:26:01,750
issues with how we're gonna do this in a

00:25:58,840 --> 00:26:03,550
general sense and not for all of the

00:26:01,750 --> 00:26:06,130
elephants to go off and do their own

00:26:03,550 --> 00:26:11,040
thing and have different ways of

00:26:06,130 --> 00:26:15,870
starting and enabling names name spacing

00:26:11,040 --> 00:26:21,100
so when we do get to solve this problem

00:26:15,870 --> 00:26:23,710
the I'm up will stage the change is the

00:26:21,100 --> 00:26:27,160
support into the kernel it's a major

00:26:23,710 --> 00:26:29,110
huge undertaking and we're gonna stage

00:26:27,160 --> 00:26:31,360
it so that the first thing that will get

00:26:29,110 --> 00:26:36,460
up streamed which has the least amount

00:26:31,360 --> 00:26:42,790
of other file system changes is imma

00:26:36,460 --> 00:26:45,490
audit and the and the audits us system

00:26:42,790 --> 00:26:48,040
has already there's already patches out

00:26:45,490 --> 00:26:52,630
there and assuming they are up streamed

00:26:48,040 --> 00:26:56,200
will have will already provide the ident

00:26:52,630 --> 00:27:01,930
the I container identifier for the audit

00:26:56,200 --> 00:27:05,470
substance system the measurement on the

00:27:01,930 --> 00:27:10,540
other hand requires a policy and that

00:27:05,470 --> 00:27:14,950
policy requires virtualizing security FS

00:27:10,540 --> 00:27:17,650
and different different subsystems are

00:27:14,950 --> 00:27:21,310
using security FS so there needs to be a

00:27:17,650 --> 00:27:24,310
way of only exposing the imma material

00:27:21,310 --> 00:27:29,230
within the container and not and not

00:27:24,310 --> 00:27:32,080
leaking other information and lastly I'm

00:27:29,230 --> 00:27:34,720
appraisal that requires even more

00:27:32,080 --> 00:27:35,830
changes and those changes are fork

00:27:34,720 --> 00:27:40,419
earrings and day

00:27:35,830 --> 00:27:47,019
in mention namespacing keyrings so we're

00:27:40,419 --> 00:27:52,919
looking forward to seeing that which

00:27:47,019 --> 00:27:52,919
brings us up oh sorry

00:27:55,710 --> 00:28:01,029
which brings us up to the new features

00:27:58,390 --> 00:28:04,179
so we've already spoken about portable

00:28:01,029 --> 00:28:07,929
and immutable EVM signatures and these

00:28:04,179 --> 00:28:13,529
were done in this past year by Matthew

00:28:07,929 --> 00:28:16,179
and the other piece is support for

00:28:13,529 --> 00:28:21,010
adding other security extended

00:28:16,179 --> 00:28:24,789
attributes all of them initially it

00:28:21,010 --> 00:28:28,380
wasn't limited to security extended

00:28:24,789 --> 00:28:28,380
attributes but for the time being

00:28:29,220 --> 00:28:36,159
because only root can write security

00:28:33,399 --> 00:28:40,440
extended attributes we're limiting it to

00:28:36,159 --> 00:28:43,809
root and two to the security X adders

00:28:40,440 --> 00:28:48,070
will have to look in the future as to

00:28:43,809 --> 00:28:53,679
whether or not we can if there's if it's

00:28:48,070 --> 00:29:01,600
possible to include other X adders or

00:28:53,679 --> 00:29:04,059
other information as well okay so we

00:29:01,600 --> 00:29:08,350
when we on the first slides we spoke

00:29:04,059 --> 00:29:12,370
about the i'ma policy the i'ma policy

00:29:08,350 --> 00:29:14,559
was limited to a it started out as a

00:29:12,370 --> 00:29:19,210
built in custom policy and they were

00:29:14,559 --> 00:29:22,110
replaced by they were replaced by a

00:29:19,210 --> 00:29:26,470
custom policy we've recently extended

00:29:22,110 --> 00:29:29,440
this so that you can have you can build

00:29:26,470 --> 00:29:33,039
into the kernel a build time I am a

00:29:29,440 --> 00:29:38,380
policy that persists after loading a

00:29:33,039 --> 00:29:41,760
custom policy and then Nana and Thiago

00:29:38,380 --> 00:29:46,320
will be discussing the and Imus and

00:29:41,760 --> 00:29:46,320
architecture specific policy later

00:29:51,220 --> 00:30:04,370
so I think I need to speed up so we've

00:29:56,510 --> 00:30:07,039
closed a number of measurement gaps one

00:30:04,370 --> 00:30:10,070
of those one of the actually in this

00:30:07,039 --> 00:30:12,860
slide we what we're speaking about is I

00:30:10,070 --> 00:30:15,590
version so in order to be able to detect

00:30:12,860 --> 00:30:19,130
if a file changed it required aversion

00:30:15,590 --> 00:30:20,900
support in the file system and but

00:30:19,130 --> 00:30:24,409
that's really only a performance

00:30:20,900 --> 00:30:27,289
improvement so instead of requiring I

00:30:24,409 --> 00:30:29,600
version now if the file has checked if

00:30:27,289 --> 00:30:31,490
we don't have I version support we just

00:30:29,600 --> 00:30:33,950
assume the file has changed because we

00:30:31,490 --> 00:30:40,760
have no way of detecting that and unlike

00:30:33,950 --> 00:30:42,980
on the fuse file system we the fuse file

00:30:40,760 --> 00:30:46,610
system also doesn't have either version

00:30:42,980 --> 00:30:51,320
support and but we don't trust fuse file

00:30:46,610 --> 00:30:54,260
systems so if it was so the decision was

00:30:51,320 --> 00:30:56,870
to say if the fuse file system was an

00:30:54,260 --> 00:30:59,950
unprivileged mount we're only going to

00:30:56,870 --> 00:31:03,500
measure it once because it's untrusted

00:30:59,950 --> 00:31:05,480
and on the privilege and when it's a

00:31:03,500 --> 00:31:07,730
privileged mount we assume that you have

00:31:05,480 --> 00:31:10,309
other methods of deciding what you're

00:31:07,730 --> 00:31:15,559
allowing to be mounted by root on your

00:31:10,309 --> 00:31:17,510
file system and so in that case since we

00:31:15,559 --> 00:31:19,340
don't have a method of detecting when

00:31:17,510 --> 00:31:19,730
the file changed because it doesn't go

00:31:19,340 --> 00:31:22,190
through

00:31:19,730 --> 00:31:25,580
the colonel's file system this is all in

00:31:22,190 --> 00:31:30,110
user space we remeasure it every time

00:31:25,580 --> 00:31:33,640
it's the file is opened and there's now

00:31:30,110 --> 00:31:37,340
discussions as to whether or not we can

00:31:33,640 --> 00:31:41,809
support some form of file detection of

00:31:37,340 --> 00:31:45,490
change and that that's an ongoing

00:31:41,809 --> 00:31:45,490
discussion on the mailing list

00:31:48,250 --> 00:31:56,570
so in 4:16 we Dmitriy reintroduced and

00:31:54,320 --> 00:31:58,780
I'm a specific law to resolve the

00:31:56,570 --> 00:31:58,780
outstanding

00:31:59,050 --> 00:32:07,610
locking problem and and it was it was

00:32:04,220 --> 00:32:09,620
there for quite a while and and I proved

00:32:07,610 --> 00:32:15,700
there was a death it caused a number a

00:32:09,620 --> 00:32:18,320
deadlock on XFS and the other the other

00:32:15,700 --> 00:32:22,490
major improvement is as I mentioned

00:32:18,320 --> 00:32:26,090
previously was TPM performance and not

00:32:22,490 --> 00:32:29,750
only even after we made the change of

00:32:26,090 --> 00:32:31,910
using the HR timer other patches have

00:32:29,750 --> 00:32:34,280
been up streamed and now the performance

00:32:31,910 --> 00:32:37,430
there's a major performance improvement

00:32:34,280 --> 00:32:41,480
with the TPM so that when you extend the

00:32:37,430 --> 00:32:45,620
TPM its we can have more measurements

00:32:41,480 --> 00:32:47,840
and and not be sitting around you know

00:32:45,620 --> 00:32:53,660
just twiddling our thumbs to wait to do

00:32:47,840 --> 00:32:56,990
the next measurement and as I mentioned

00:32:53,660 --> 00:32:59,750
previously we disambiguated the i'ma

00:32:56,990 --> 00:33:04,790
audit records so that when namespacing

00:32:59,750 --> 00:33:13,430
is up streamed that it will just work as

00:33:04,790 --> 00:33:18,860
it is the audit I'm at audit we have a

00:33:13,430 --> 00:33:21,940
new the LTP tests were refreshed by I

00:33:18,860 --> 00:33:24,620
hope I'm pronouncing right by Peter and

00:33:21,940 --> 00:33:28,510
we are working on a standalone version

00:33:24,620 --> 00:33:32,570
of the imma test which will be part of

00:33:28,510 --> 00:33:37,160
which can be called out from LTP and XFS

00:33:32,570 --> 00:33:41,660
tests that has not been ups that has not

00:33:37,160 --> 00:33:43,670
been released yet so we're continuing to

00:33:41,660 --> 00:33:46,390
clothes measurement gaps there's still a

00:33:43,670 --> 00:33:55,070
number of them out there that we haven't

00:33:46,390 --> 00:33:58,070
closed and a number of these topics will

00:33:55,070 --> 00:34:00,760
be discussed in subsequent subsequent

00:33:58,070 --> 00:34:00,760
talks today

00:34:02,440 --> 00:34:10,580
so how can you help by reviewing patches

00:34:07,960 --> 00:34:14,810
by participating in new feature

00:34:10,580 --> 00:34:17,600
discussions and because when new

00:34:14,810 --> 00:34:20,960
features come in there the features are

00:34:17,600 --> 00:34:23,899
being developed from one perspective and

00:34:20,960 --> 00:34:26,330
we really need help with under with

00:34:23,899 --> 00:34:28,340
other perspectives so don't be quiet

00:34:26,330 --> 00:34:30,560
please raise your voice if it will

00:34:28,340 --> 00:34:34,220
affect your perspective of how you're

00:34:30,560 --> 00:34:38,690
using the subsystem and help with

00:34:34,220 --> 00:34:42,669
documentation help with closing some of

00:34:38,690 --> 00:34:42,669
the audit gaps would be much appreciated

00:34:44,230 --> 00:34:51,320
so a lot of this work it's not only my

00:34:48,679 --> 00:34:56,090
work and it's there of other people that

00:34:51,320 --> 00:34:59,750
have helped over the years especially my

00:34:56,090 --> 00:35:04,550
colleagues my new my current and my past

00:34:59,750 --> 00:35:07,700
colleagues and also to all of you for

00:35:04,550 --> 00:35:12,260
your help and for your support in new

00:35:07,700 --> 00:35:14,300
features that are being upstream Thank

00:35:12,260 --> 00:35:17,120
You Mimi so maybe we have time for a

00:35:14,300 --> 00:35:21,140
couple of very quick questions a bit

00:35:17,120 --> 00:35:25,460
over time but I also want to mention

00:35:21,140 --> 00:35:27,320
Tory's email related both for discussion

00:35:25,460 --> 00:35:29,360
plan during today's lunch so if you're

00:35:27,320 --> 00:35:33,170
interested I guess you'll go see Mimi

00:35:29,360 --> 00:35:36,760
to know where it's happening so so if

00:35:33,170 --> 00:35:40,019
there are no questions let's thank me

00:35:36,760 --> 00:35:40,019

YouTube URL: https://www.youtube.com/watch?v=-a7GIRDVE9g


