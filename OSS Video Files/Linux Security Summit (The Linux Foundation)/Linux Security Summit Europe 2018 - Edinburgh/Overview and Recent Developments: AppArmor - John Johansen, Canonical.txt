Title: Overview and Recent Developments: AppArmor - John Johansen, Canonical
Publication date: 2018-10-27
Playlist: Linux Security Summit Europe 2018 - Edinburgh
Description: 
	Overview and Recent Developments: AppArmor - John Johansen, CanonicalÂ 

This presentation will provide an overview of the AppArmor security project; its security model, use, recent developments and current direction. In addition it will discuss the current open challenges the project has.

About John Johansen
John Johansen works for Canonical doing kernel related work for the Ubuntu security team.

John Johansen began working with open source software in the late 80s and began playing with Linux in 93. He completed a masters in mathematics at the University of Waterloo and the began working for Immunix doing compiler hardening, and then AppArmor. After Immunix was acquired by Novell he began working on Suse Linux and in 2009 he joined Canonical as a kernel engineer. He is currently employed by Canonical as a security engineer with a primary focus on supporting the AppArmor project.
Captions: 
	00:00:00,030 --> 00:00:06,600
all right so um Hecate doesn't want to

00:00:03,240 --> 00:00:10,200
stay there so I'm John Johansson I work

00:00:06,600 --> 00:00:13,410
on the canonical security team and I'm

00:00:10,200 --> 00:00:18,900
also the kernel maintainer for the app

00:00:13,410 --> 00:00:23,570
armored module so this last year the a

00:00:18,900 --> 00:00:23,570
primer project moved hosting to get lab

00:00:24,199 --> 00:00:31,460
which has helped with a we used to be on

00:00:28,349 --> 00:00:34,440
launch pad which get labs really helped

00:00:31,460 --> 00:00:36,000
pick up and integrate with some of the

00:00:34,440 --> 00:00:38,910
other projects to get other people

00:00:36,000 --> 00:00:45,559
involved we picked up a new logo this

00:00:38,910 --> 00:00:45,559
last year as well great fun

00:00:45,620 --> 00:00:53,879
well you got to see scary penguin right

00:00:48,390 --> 00:00:56,940
top Toxie we also picked up CII best

00:00:53,879 --> 00:00:59,550
practices badge this is a little plug

00:00:56,940 --> 00:01:01,230
for them so it's a good thing for

00:00:59,550 --> 00:01:03,539
projects if you've got a project to try

00:01:01,230 --> 00:01:06,840
to pick this up it's not that hard to do

00:01:03,539 --> 00:01:08,700
it's mostly a lot of crossing your eyes

00:01:06,840 --> 00:01:11,159
dotting your teeth crossing your T's

00:01:08,700 --> 00:01:13,799
dotting your eyes basically you need to

00:01:11,159 --> 00:01:15,990
get your HTTP and version control and

00:01:13,799 --> 00:01:18,900
stuff and document what you're doing

00:01:15,990 --> 00:01:20,100
they're doing get lab or github or

00:01:18,900 --> 00:01:21,960
something like that it's really gonna

00:01:20,100 --> 00:01:23,790
get you most of the way there and then

00:01:21,960 --> 00:01:25,650
it's you know making sure you have

00:01:23,790 --> 00:01:27,119
security policies what to do with your

00:01:25,650 --> 00:01:29,850
project and stuff like that and it's

00:01:27,119 --> 00:01:33,030
just a checklist that you run down and

00:01:29,850 --> 00:01:34,259
then you know it it it let lets other

00:01:33,030 --> 00:01:36,360
people know that you're doing things

00:01:34,259 --> 00:01:39,299
right and it also helps you make sure

00:01:36,360 --> 00:01:41,189
that you're doing it right so what's a

00:01:39,299 --> 00:01:43,829
primer besides a security module we've

00:01:41,189 --> 00:01:46,430
heard it several times before a lot of

00:01:43,829 --> 00:01:50,759
people know something about it anyways

00:01:46,430 --> 00:01:56,460
often you hear a path named based app

00:01:50,759 --> 00:01:59,310
armor is actually a modified DTE not

00:01:56,460 --> 00:02:01,229
just files files is one of the

00:01:59,310 --> 00:02:04,290
properties it's the the primary one

00:02:01,229 --> 00:02:06,270
right now that we're using for files but

00:02:04,290 --> 00:02:09,840
in the labeling if you know anything

00:02:06,270 --> 00:02:12,550
about DTE would be implied from the

00:02:09,840 --> 00:02:15,370
files or

00:02:12,550 --> 00:02:17,500
but you can have exceptions to that

00:02:15,370 --> 00:02:20,200
where you're using a label on the disk

00:02:17,500 --> 00:02:22,420
or something so you saw Matthew talking

00:02:20,200 --> 00:02:26,680
about them using the security app farmer

00:02:22,420 --> 00:02:28,540
X adder so they're running a little bit

00:02:26,680 --> 00:02:29,680
ahead of us on our support on that right

00:02:28,540 --> 00:02:32,290
now

00:02:29,680 --> 00:02:36,640
but the very little basis in there that

00:02:32,290 --> 00:02:38,950
they're using it's very much still a

00:02:36,640 --> 00:02:41,050
work in progress we are not done with

00:02:38,950 --> 00:02:44,110
our model or getting to where we need to

00:02:41,050 --> 00:02:47,800
be and yes as some people have said

00:02:44,110 --> 00:02:51,610
before DTE is the kitchen sink yeah it

00:02:47,800 --> 00:02:54,010
is semantics yeah whatever

00:02:51,610 --> 00:02:57,720
right it's if the goal is to really make

00:02:54,010 --> 00:03:00,640
it work for people make it easy

00:02:57,720 --> 00:03:02,920
the other thing being here is this goes

00:03:00,640 --> 00:03:07,720
back to the original paper that Crispin

00:03:02,920 --> 00:03:09,880
presented in 2000 use NYX there is

00:03:07,720 --> 00:03:13,840
actually some capability system in here

00:03:09,880 --> 00:03:16,090
so though most of that hasn't actually

00:03:13,840 --> 00:03:19,989
landed yet there's just a little piece

00:03:16,090 --> 00:03:22,120
of that that's in there right now the

00:03:19,989 --> 00:03:26,890
important takeaway from this is that you

00:03:22,120 --> 00:03:28,900
know yes we're a Mac policy DT domain

00:03:26,890 --> 00:03:32,709
type enforcement it's from the domains

00:03:28,900 --> 00:03:36,130
point of view or largely and there's

00:03:32,709 --> 00:03:39,040
some dynamic components to it there are

00:03:36,130 --> 00:03:41,920
some design goals around app armor it

00:03:39,040 --> 00:03:43,690
starts with a targeted policy that's so

00:03:41,920 --> 00:03:45,880
that that's where we started from

00:03:43,690 --> 00:03:48,640
instead of say selinux starting from the

00:03:45,880 --> 00:03:51,340
strict policy and saying what can we

00:03:48,640 --> 00:03:54,430
just do to improve security on the

00:03:51,340 --> 00:03:57,430
system we want to make easy to confine

00:03:54,430 --> 00:03:59,880
applications we want more than just

00:03:57,430 --> 00:04:04,000
confining applications so it's not just

00:03:59,880 --> 00:04:05,620
applications despite its name it's

00:04:04,000 --> 00:04:07,299
controlled sharing an awful lot and you

00:04:05,620 --> 00:04:09,600
can build sandboxes and stuff on top of

00:04:07,299 --> 00:04:09,600
it

00:04:11,610 --> 00:04:17,130
users are really the biggest problem in

00:04:14,530 --> 00:04:17,130
security

00:04:17,720 --> 00:04:22,109
we have real problems and we you know

00:04:20,430 --> 00:04:25,380
when you're starting out you have real

00:04:22,109 --> 00:04:27,539
problems and with administrators or

00:04:25,380 --> 00:04:29,220
users just saying yeah I get the

00:04:27,539 --> 00:04:31,050
security out of the way and we want to

00:04:29,220 --> 00:04:33,360
avoid that as much as possible we want

00:04:31,050 --> 00:04:36,060
to make it easy to selectively enable or

00:04:33,360 --> 00:04:39,620
disable things and easy for a user to

00:04:36,060 --> 00:04:39,620
understand what's going on

00:04:40,099 --> 00:04:44,729
so with starting with targeted policy

00:04:43,080 --> 00:04:48,569
that doesn't mean we got everything in

00:04:44,729 --> 00:04:51,150
place and we still don't goal being you

00:04:48,569 --> 00:04:52,740
know we want to work towards it one of

00:04:51,150 --> 00:04:55,430
the things we do to get out of ways we

00:04:52,740 --> 00:04:59,159
have an unconfined mode it's similar to

00:04:55,430 --> 00:05:00,000
SELinux unconfined T it's used all over

00:04:59,159 --> 00:05:02,970
the place

00:05:00,000 --> 00:05:05,539
special cases and so what do we look

00:05:02,970 --> 00:05:08,720
like so the base unit of an app armor

00:05:05,539 --> 00:05:12,840
mediation policy whatever is a profile

00:05:08,720 --> 00:05:14,699
profiles just this text blob I've got a

00:05:12,840 --> 00:05:19,440
little bit of language it's very similar

00:05:14,699 --> 00:05:21,659
to what a user would expect to see it

00:05:19,440 --> 00:05:24,750
was originally some of the syntax comes

00:05:21,659 --> 00:05:26,610
a lot from you know twenty years ago

00:05:24,750 --> 00:05:27,930
you're talking C programs or stuff so

00:05:26,610 --> 00:05:33,150
you're seeing include and stuff like

00:05:27,930 --> 00:05:35,550
that as part of the syntax you there's

00:05:33,150 --> 00:05:37,380
different rule types they're very

00:05:35,550 --> 00:05:40,199
natural to each one's supposed to be

00:05:37,380 --> 00:05:42,650
towards the the class that it is so

00:05:40,199 --> 00:05:44,969
files you're looking at a path name

00:05:42,650 --> 00:05:50,400
read/write permissions stuff like that

00:05:44,969 --> 00:05:53,520
d-bus example here it has its own set of

00:05:50,400 --> 00:05:55,349
you know idiom or whatever you want to

00:05:53,520 --> 00:05:58,250
call it of how are you express what's

00:05:55,349 --> 00:05:58,250
gonna happen with it

00:05:58,669 --> 00:06:03,750
so the top bit there that's what we'd

00:06:01,860 --> 00:06:05,219
call the preamble that's just a way of

00:06:03,750 --> 00:06:10,259
sharing some stuff and setting some

00:06:05,219 --> 00:06:17,009
things up the profile name this is the

00:06:10,259 --> 00:06:20,900
domain label sort of sometimes and it's

00:06:17,009 --> 00:06:23,340
it was what shows up in PS minus Z

00:06:20,900 --> 00:06:26,969
domain label also you could think of

00:06:23,340 --> 00:06:29,250
that as subject type this is an

00:06:26,969 --> 00:06:30,600
attachment there's different attachment

00:06:29,250 --> 00:06:32,730
specifications

00:06:30,600 --> 00:06:35,790
this one's a path based one Matthew

00:06:32,730 --> 00:06:38,850
earlier talked about adding the X adder

00:06:35,790 --> 00:06:41,070
one for evm there are some other ones

00:06:38,850 --> 00:06:44,490
coming as well there's just some flags

00:06:41,070 --> 00:06:47,460
to modify profiles this is the complain

00:06:44,490 --> 00:06:48,750
flag is basically equivalent to audit to

00:06:47,460 --> 00:06:50,550
allow except for you can do it on

00:06:48,750 --> 00:06:52,140
individual profiles in the system

00:06:50,550 --> 00:06:57,890
instead of applying it to the whole

00:06:52,140 --> 00:06:57,890
system then you get a rural block

00:06:58,910 --> 00:07:02,670
they include section that that's just

00:07:01,230 --> 00:07:04,830
another way of saying these are just

00:07:02,670 --> 00:07:07,080
regular rules in here it's just they're

00:07:04,830 --> 00:07:11,430
abstracted out so you can share them

00:07:07,080 --> 00:07:15,000
right and then you have some we've got

00:07:11,430 --> 00:07:17,880
some rules here like for file for D bus

00:07:15,000 --> 00:07:20,370
the syntax is declarative so order

00:07:17,880 --> 00:07:22,350
doesn't matter like I said we got

00:07:20,370 --> 00:07:25,280
different classes or rules this is all

00:07:22,350 --> 00:07:27,780
whitelisting so the allows actually

00:07:25,280 --> 00:07:34,890
optional you almost never see allow in

00:07:27,780 --> 00:07:36,930
the sent at our actual policy files you

00:07:34,890 --> 00:07:39,390
do see denied sometimes denied it's not

00:07:36,930 --> 00:07:41,070
necessary but it's nice to annotate

00:07:39,390 --> 00:07:44,610
certain things that you know you want

00:07:41,070 --> 00:07:46,350
they it's going to be denied and then

00:07:44,610 --> 00:07:48,900
there's some rules that each profile

00:07:46,350 --> 00:07:53,750
gets to control domain transitions that

00:07:48,900 --> 00:07:58,830
are happening if we go back here the

00:07:53,750 --> 00:08:00,210
attachment that is used by unconfined so

00:07:58,830 --> 00:08:02,490
it like we said we get out of the way as

00:08:00,210 --> 00:08:05,280
much as we can unconscience some way to

00:08:02,490 --> 00:08:09,750
know whether it's gonna attach to two

00:08:05,280 --> 00:08:13,530
applications that use it runs and put

00:08:09,750 --> 00:08:18,990
them into an confined context these

00:08:13,530 --> 00:08:20,640
domain rules here the profile can choose

00:08:18,990 --> 00:08:22,680
to use the attachment but it can choose

00:08:20,640 --> 00:08:25,590
to do something else so this one's

00:08:22,680 --> 00:08:27,630
saying I'm gonna allow running Firefox

00:08:25,590 --> 00:08:30,930
to run base name but it's gonna inherit

00:08:27,630 --> 00:08:34,710
my confinement it's it doesn't it's not

00:08:30,930 --> 00:08:36,479
we're not transitioning and then policy

00:08:34,710 --> 00:08:40,099
is just composed of a whole bunch of

00:08:36,479 --> 00:08:42,949
different you know profile files

00:08:40,099 --> 00:08:45,329
profile files text files aren't useful

00:08:42,949 --> 00:08:47,639
for actual enforcement to the colonel

00:08:45,329 --> 00:08:50,779
so what we do is we take and we compile

00:08:47,639 --> 00:08:55,019
those down and we build a state machine

00:08:50,779 --> 00:08:56,730
it's kind of a bit like going to BPF the

00:08:55,019 --> 00:08:59,309
state machine has guarantees about

00:08:56,730 --> 00:09:02,839
completion and control of memory usage

00:08:59,309 --> 00:09:07,079
and it's verifiable we have some other

00:09:02,839 --> 00:09:10,769
requirements so it's not it's not BPS

00:09:07,079 --> 00:09:14,670
BPF it's it's more restricted it has

00:09:10,769 --> 00:09:17,300
certain properties that we need to do

00:09:14,670 --> 00:09:19,769
some policy composition so it follows

00:09:17,300 --> 00:09:22,319
some rules around set and regular

00:09:19,769 --> 00:09:25,559
language properties it's also

00:09:22,319 --> 00:09:27,269
architectural independent as much as we

00:09:25,559 --> 00:09:28,860
can make it anyways it is right now

00:09:27,269 --> 00:09:30,540
there are some things that male and

00:09:28,860 --> 00:09:34,499
eventually that would break that

00:09:30,540 --> 00:09:36,149
sometimes so the basic overview of how

00:09:34,499 --> 00:09:39,689
it works I mean it's not very different

00:09:36,149 --> 00:09:42,089
from other security modules your textile

00:09:39,689 --> 00:09:44,040
policy goes into a compiler that loads

00:09:42,089 --> 00:09:48,540
it into the kernel so you have some

00:09:44,040 --> 00:09:50,579
active policy unconfined does you know

00:09:48,540 --> 00:09:53,089
look at the active policy at times like

00:09:50,579 --> 00:09:55,319
I said using the attachment conditionals

00:09:53,089 --> 00:09:56,699
but it's mostly getting out of the way

00:09:55,319 --> 00:09:59,160
it's special cased all over the place

00:09:56,699 --> 00:10:01,230
and i can find application it has a

00:09:59,160 --> 00:10:03,809
context that references into the the

00:10:01,230 --> 00:10:07,399
policy and it's enforcing it

00:10:03,809 --> 00:10:10,800
the kernel is doing a bunch of work and

00:10:07,399 --> 00:10:14,399
we put labels and we carry some context

00:10:10,800 --> 00:10:17,220
information on objects and then we we

00:10:14,399 --> 00:10:18,870
also have a user space trusted helpers

00:10:17,220 --> 00:10:22,110
or you could call them other things as

00:10:18,870 --> 00:10:24,449
well that selectively enforce bits of

00:10:22,110 --> 00:10:27,809
policy so things like we saw the D bus

00:10:24,449 --> 00:10:30,449
rule earlier earlier so if you D bus is

00:10:27,809 --> 00:10:33,480
enabled support it will actually look at

00:10:30,449 --> 00:10:35,370
a primer policy and look at

00:10:33,480 --> 00:10:38,309
communication coming across the deep D

00:10:35,370 --> 00:10:41,819
bus and enforce that part of the policy

00:10:38,309 --> 00:10:43,740
for us we have X's Pro X's prototypes

00:10:41,819 --> 00:10:46,240
that have never gone anywhere because X

00:10:43,740 --> 00:10:48,339
ace is so much fun

00:10:46,240 --> 00:10:51,389
and there's a few other places where

00:10:48,339 --> 00:10:53,740
that's been used the trusted helpers are

00:10:51,389 --> 00:10:55,779
limited you can actually confine them

00:10:53,740 --> 00:10:57,999
themselves and so they just applying to

00:10:55,779 --> 00:11:01,139
the their little corner of what they're

00:10:57,999 --> 00:11:03,459
doing and of course we're auditing

00:11:01,139 --> 00:11:06,689
messages to the audit subsystem and

00:11:03,459 --> 00:11:09,399
letting it deal with the rest of it so

00:11:06,689 --> 00:11:11,199
that's the basic overview of a primer

00:11:09,399 --> 00:11:15,689
system that's where most people would

00:11:11,199 --> 00:11:17,889
see it a primer has policy namespaces so

00:11:15,689 --> 00:11:20,309
we've been front-running this a little

00:11:17,889 --> 00:11:23,860
bit compared to some other other LSMs

00:11:20,309 --> 00:11:25,899
this comes into a lot of how we want to

00:11:23,860 --> 00:11:31,480
do things and do things in a primer and

00:11:25,899 --> 00:11:35,920
how policy is set up so they're they're

00:11:31,480 --> 00:11:38,139
separate from system namespaces so

00:11:35,920 --> 00:11:42,279
policy namespaces they you know they let

00:11:38,139 --> 00:11:45,999
you run load policy of different you

00:11:42,279 --> 00:11:50,619
know same names different policy stats

00:11:45,999 --> 00:11:53,230
right they they like show up as a in the

00:11:50,619 --> 00:11:56,769
domain name kind of like you know we've

00:11:53,230 --> 00:12:02,170
got an NS kind of ssh style or we've got

00:11:56,769 --> 00:12:05,639
more the URL style l to either the

00:12:02,170 --> 00:12:09,819
kernel shortens use the shorter form

00:12:05,639 --> 00:12:11,230
they're hierarchical each one's

00:12:09,819 --> 00:12:14,679
obviously getting its own set of

00:12:11,230 --> 00:12:17,529
profiles they also get their own

00:12:14,679 --> 00:12:20,110
unconfined state so tasks we track which

00:12:17,529 --> 00:12:22,170
one they're in by the unconfined state

00:12:20,110 --> 00:12:28,749
of hearing unconfined you could be in

00:12:22,170 --> 00:12:33,399
ns-5s unconfined they also define a view

00:12:28,749 --> 00:12:35,410
of policy so what's visible tasks the

00:12:33,399 --> 00:12:36,879
system level could look down if they

00:12:35,410 --> 00:12:38,769
have the privilege and they could see

00:12:36,879 --> 00:12:41,740
the other namespace policies so they

00:12:38,769 --> 00:12:44,470
could see NS three or NS five and they

00:12:41,740 --> 00:12:47,410
also control what can be loaded so if

00:12:44,470 --> 00:12:51,429
you got a task that's being confined by

00:12:47,410 --> 00:12:53,829
policy or as cap makkad min whatever at

00:12:51,429 --> 00:12:56,759
the system level it's going to be able

00:12:53,829 --> 00:12:59,400
to load policy into the system namespace

00:12:56,759 --> 00:13:03,340
but if you have a tasket

00:12:59,400 --> 00:13:06,610
confined in ns3 it was only seeing

00:13:03,340 --> 00:13:11,380
what's in the nests 3 and now namespace

00:13:06,610 --> 00:13:13,060
and it's it can't you can only load

00:13:11,380 --> 00:13:18,610
policy to NS 3 you're not going to be

00:13:13,060 --> 00:13:22,380
able to load system policy and similarly

00:13:18,610 --> 00:13:22,380
we could do that for another one down

00:13:23,340 --> 00:13:30,580
right now it's a complete separation on

00:13:26,260 --> 00:13:33,160
the the view and the policy load it's

00:13:30,580 --> 00:13:37,420
not very useful for a lot of situations

00:13:33,160 --> 00:13:38,950
when you're looking at like this there

00:13:37,420 --> 00:13:41,320
is a use case we'll cover that where

00:13:38,950 --> 00:13:44,500
it's kind of being used so if you just

00:13:41,320 --> 00:13:46,060
had namespaces it for its themselves you

00:13:44,500 --> 00:13:48,610
know it's it's an either/or situation

00:13:46,060 --> 00:13:51,520
and we had this for quite a long time

00:13:48,610 --> 00:13:53,800
and for us that isn't a very useful

00:13:51,520 --> 00:13:56,860
situation so you would be either in the

00:13:53,800 --> 00:14:00,970
system namespace or you'd be in the SE

00:13:56,860 --> 00:14:05,800
NS 5 and the confinement they didn't

00:14:00,970 --> 00:14:08,320
communicate properly shall we say so to

00:14:05,800 --> 00:14:11,080
make this useful into it to work towards

00:14:08,320 --> 00:14:14,460
our policy where we want things to be we

00:14:11,080 --> 00:14:17,230
have and this is getting also into the

00:14:14,460 --> 00:14:19,570
capability stuff a little bit so we have

00:14:17,230 --> 00:14:22,720
policy stacking that can happen at

00:14:19,570 --> 00:14:24,670
runtime theoretically that we're not

00:14:22,720 --> 00:14:27,970
doing it right now some of this can

00:14:24,670 --> 00:14:31,030
actually be done at compile time and so

00:14:27,970 --> 00:14:32,680
the cost of doing these stacks that

00:14:31,030 --> 00:14:34,930
we're going to talk about can be

00:14:32,680 --> 00:14:40,560
mitigated a lot it just depends on what

00:14:34,930 --> 00:14:42,850
you're trying to do stacking is

00:14:40,560 --> 00:14:45,270
specifically an intersection of

00:14:42,850 --> 00:14:50,020
permissions to it's a way to reduce

00:14:45,270 --> 00:14:52,180
privilege or ensured privileges within

00:14:50,020 --> 00:14:55,990
certain bounds of two intersected

00:14:52,180 --> 00:15:00,010
policies so let's say we have a task in

00:14:55,990 --> 00:15:03,790
the system namespace I I don't care what

00:15:00,010 --> 00:15:07,180
it's doing it's just confined by it and

00:15:03,790 --> 00:15:10,120
then you know that it can do whatever

00:15:07,180 --> 00:15:11,580
right let's put a task in the system

00:15:10,120 --> 00:15:14,830
namespace and

00:15:11,580 --> 00:15:16,150
namespaced three so what what's

00:15:14,830 --> 00:15:19,240
happening here is the task is being

00:15:16,150 --> 00:15:20,680
confined by both namespaces and the

00:15:19,240 --> 00:15:26,560
policy of both are going to be get

00:15:20,680 --> 00:15:28,990
applied so this this is a way of

00:15:26,560 --> 00:15:32,590
allowing you to set up policy for one

00:15:28,990 --> 00:15:35,410
thing some some basic restrictions that

00:15:32,590 --> 00:15:37,020
you would want and then having something

00:15:35,410 --> 00:15:39,400
else set up some other policy right

00:15:37,020 --> 00:15:42,940
where can where is this useful

00:15:39,400 --> 00:15:45,250
well containers right so what we have is

00:15:42,940 --> 00:15:47,950
we can set up some course policy at the

00:15:45,250 --> 00:15:49,480
system level some things we can say that

00:15:47,950 --> 00:15:51,130
we don't want the container did to be

00:15:49,480 --> 00:15:53,590
able to do to the system some mount

00:15:51,130 --> 00:15:55,360
rules or something like so we can

00:15:53,590 --> 00:15:57,760
restrict what its mounting inside the

00:15:55,360 --> 00:16:00,460
container and be sure about that

00:15:57,760 --> 00:16:02,710
and then the container itself can load

00:16:00,460 --> 00:16:06,040
policy have its own policy

00:16:02,710 --> 00:16:10,030
so lxd right now on and boon to will you

00:16:06,040 --> 00:16:14,140
can use an abundant aenor that have as

00:16:10,030 --> 00:16:16,030
its own policy while the system has its

00:16:14,140 --> 00:16:18,580
own separate policy and its enforcing

00:16:16,030 --> 00:16:20,710
things on the container there is some

00:16:18,580 --> 00:16:23,830
horrible hacks in here to make this work

00:16:20,710 --> 00:16:25,839
at the moment due to interactions with

00:16:23,830 --> 00:16:29,770
system namespaces that have not been

00:16:25,839 --> 00:16:33,310
resolved we are working on proper

00:16:29,770 --> 00:16:35,650
solutions to that but it is what it is

00:16:33,310 --> 00:16:38,770
and theoretically we could do three

00:16:35,650 --> 00:16:42,160
level deep nesting or more but again

00:16:38,770 --> 00:16:44,800
this is currently restricted and broken

00:16:42,160 --> 00:16:47,520
because of the horrible hacks and system

00:16:44,800 --> 00:16:47,520
names basis

00:16:50,010 --> 00:16:55,450
so the I said you know before we said

00:16:52,810 --> 00:16:57,760
the namespaces define a few a scope the

00:16:55,450 --> 00:16:59,709
scope is just the view is what you can

00:16:57,760 --> 00:17:02,350
see the scope is where it applies and

00:16:59,709 --> 00:17:05,620
the administration so right now all of

00:17:02,350 --> 00:17:09,429
those are tied we have some work coming

00:17:05,620 --> 00:17:14,230
to split that out and so a named face

00:17:09,429 --> 00:17:16,480
could inherit its parents view and/or

00:17:14,230 --> 00:17:20,069
its parent scope and this is this just

00:17:16,480 --> 00:17:22,270
as a way to make them more flexible and

00:17:20,069 --> 00:17:24,550
bring in the other you some of the other

00:17:22,270 --> 00:17:27,010
use cases we actually have so the first

00:17:24,550 --> 00:17:30,370
use case we enabled was containers where

00:17:27,010 --> 00:17:32,740
you wanted the kind of isolation where

00:17:30,370 --> 00:17:36,730
we want to actually go with these beyond

00:17:32,740 --> 00:17:39,610
that is a much more complicated rich

00:17:36,730 --> 00:17:41,800
policy so your system can have a policy

00:17:39,610 --> 00:17:43,900
you could define some global stuff you

00:17:41,800 --> 00:17:47,230
could set up a policy for some users to

00:17:43,900 --> 00:17:50,860
have different roles and you can also

00:17:47,230 --> 00:17:53,559
then with the scope and view work enable

00:17:50,860 --> 00:17:56,350
users to define their own policy so

00:17:53,559 --> 00:17:58,300
maybe instead of having so right now

00:17:56,350 --> 00:18:00,190
often you'll have like the system to

00:17:58,300 --> 00:18:03,460
find a Firefox profile which is kind of

00:18:00,190 --> 00:18:05,470
crazy because the users running it the

00:18:03,460 --> 00:18:07,210
user could define his own how he wants

00:18:05,470 --> 00:18:09,640
to confine his application that he's

00:18:07,210 --> 00:18:11,830
running and the application itself can

00:18:09,640 --> 00:18:14,500
actually define sandboxes with it and

00:18:11,830 --> 00:18:17,520
and load policy and use it this isn't

00:18:14,500 --> 00:18:20,080
enabled yet it's still work in progress

00:18:17,520 --> 00:18:26,590
and all of those get combined together

00:18:20,080 --> 00:18:29,530
and enforced stacking doesn't need to be

00:18:26,590 --> 00:18:34,600
across namespaces and this plays back

00:18:29,530 --> 00:18:36,840
into delegation so the delegation of

00:18:34,600 --> 00:18:40,020
authority of the capabilities that we

00:18:36,840 --> 00:18:45,370
test mentioned briefly before

00:18:40,020 --> 00:18:47,800
so one delegation lands there's going to

00:18:45,370 --> 00:18:50,050
be policy rules around it but there's

00:18:47,800 --> 00:18:53,550
also going to be an API that allows user

00:18:50,050 --> 00:18:56,740
space to load policy

00:18:53,550 --> 00:18:58,900
now we don't trust user space

00:18:56,740 --> 00:19:00,340
yeah the user space is gonna have to

00:18:58,900 --> 00:19:01,510
compile the policy and it's gonna get

00:19:00,340 --> 00:19:02,470
loaded it's gonna be a state machine

00:19:01,510 --> 00:19:04,539
that we can vary

00:19:02,470 --> 00:19:06,460
I but we still don't trust user space

00:19:04,539 --> 00:19:08,620
because they can stick anything in there

00:19:06,460 --> 00:19:11,409
right so you could have something that's

00:19:08,620 --> 00:19:14,980
confined got a profile on it with some

00:19:11,409 --> 00:19:17,440
set of rules and the user space is

00:19:14,980 --> 00:19:20,380
trying to abuse it and delegate its

00:19:17,440 --> 00:19:22,539
authority but it doesn't have authority

00:19:20,380 --> 00:19:24,700
to delegate the rules that it's trying

00:19:22,539 --> 00:19:26,230
to throw so in this case let's allow you

00:19:24,700 --> 00:19:29,020
to read or write every file in the

00:19:26,230 --> 00:19:32,740
system so we can use stacking to

00:19:29,020 --> 00:19:34,590
dynamically limit that and then what

00:19:32,740 --> 00:19:37,620
happens is the intersection of those two

00:19:34,590 --> 00:19:40,480
the actual policy that the system that

00:19:37,620 --> 00:19:42,520
application has and the delegation set

00:19:40,480 --> 00:19:48,490
is actually what you're going to be able

00:19:42,520 --> 00:19:50,770
to delegate now this obviously has a

00:19:48,490 --> 00:19:54,520
runtime cost because you're doing some

00:19:50,770 --> 00:19:57,429
extra computation for now we're just

00:19:54,520 --> 00:19:59,169
gonna be allowing this to be handled

00:19:57,429 --> 00:20:02,020
dynamically it doesn't actually have to

00:19:59,169 --> 00:20:05,080
just be handled dynamically though we

00:20:02,020 --> 00:20:06,970
don't want to stick the compiler portion

00:20:05,080 --> 00:20:09,870
of building these state machines into

00:20:06,970 --> 00:20:12,820
the kernel but we can certainly you know

00:20:09,870 --> 00:20:15,309
do an up call in that user space compile

00:20:12,820 --> 00:20:18,429
this in from a trusted point of view a

00:20:15,309 --> 00:20:21,809
trusted compiler back-end and bring that

00:20:18,429 --> 00:20:24,340
back in it and that new trusted one can

00:20:21,809 --> 00:20:27,070
be passed back in and replaced the

00:20:24,340 --> 00:20:28,720
dynamic one so temporarily you're in a

00:20:27,070 --> 00:20:32,080
dynamic situation that high is a higher

00:20:28,720 --> 00:20:34,860
cost and then once you get user space

00:20:32,080 --> 00:20:37,600
giving you a trusted verified

00:20:34,860 --> 00:20:41,020
intersection then you can apply that

00:20:37,600 --> 00:20:43,539
instead and so back to the domain label

00:20:41,020 --> 00:20:45,970
so you start seeing weird things like

00:20:43,539 --> 00:20:47,590
this that you know maybe I have some

00:20:45,970 --> 00:20:50,230
intersection that doesn't make any sense

00:20:47,590 --> 00:20:52,929
at all but it doesn't matter you know we

00:20:50,230 --> 00:20:55,120
have we have a profile Firefox and we

00:20:52,929 --> 00:20:56,530
have a profile even's normally I said

00:20:55,120 --> 00:20:59,260
those could be the domain label when we

00:20:56,530 --> 00:21:00,909
start talking stacking you you get them

00:20:59,260 --> 00:21:07,510
together and that's at the actual domain

00:21:00,909 --> 00:21:09,750
name the main label or type so that's

00:21:07,510 --> 00:21:14,130
you know the basics of a per more policy

00:21:09,750 --> 00:21:14,130
so what have we been doing recently

00:21:14,230 --> 00:21:18,830
we've been doing a lot of work behind

00:21:16,309 --> 00:21:20,840
the scenes and a bit of up streaming or

00:21:18,830 --> 00:21:25,639
maybe a lot Boone too used to carry a

00:21:20,840 --> 00:21:28,879
large Delta for a parmer and we finally

00:21:25,639 --> 00:21:31,639
landed everything upstream except for

00:21:28,879 --> 00:21:35,409
the AF UNIX patches those are seeing

00:21:31,639 --> 00:21:40,039
some review and some work around our

00:21:35,409 --> 00:21:43,009
support for improving network so our

00:21:40,039 --> 00:21:45,649
network mediation is a work in progress

00:21:43,009 --> 00:21:48,679
so we've landed support for sec ids

00:21:45,649 --> 00:21:50,299
finally upstream and this is in

00:21:48,679 --> 00:21:53,179
preparation for supporting network

00:21:50,299 --> 00:21:55,970
mediation it's also allowed us to land

00:21:53,179 --> 00:22:00,279
support for audit rule filtering so we

00:21:55,970 --> 00:22:03,139
certainly log to audit but now audit can

00:22:00,279 --> 00:22:08,720
you can do audit rules based on the app

00:22:03,139 --> 00:22:11,539
armor task label or the domain label we

00:22:08,720 --> 00:22:13,789
landed socket meaning mediation so this

00:22:11,539 --> 00:22:17,659
is the coarse grained control of sockets

00:22:13,789 --> 00:22:20,899
for things that you know you're not

00:22:17,659 --> 00:22:22,279
doing a you know fine green ipv4 you

00:22:20,899 --> 00:22:24,860
know I want this address or anything

00:22:22,279 --> 00:22:29,330
this but you know well no I don't want

00:22:24,860 --> 00:22:32,119
to allow maybe I don't know maybe I

00:22:29,330 --> 00:22:34,399
don't want to allow ipv6 or I don't want

00:22:32,119 --> 00:22:39,259
to allow AF packet sockets that kind of

00:22:34,399 --> 00:22:40,759
level it it's better than nothing but

00:22:39,259 --> 00:22:43,009
it's not what we're we're we're gonna be

00:22:40,759 --> 00:22:47,299
we're working on that the fine green

00:22:43,009 --> 00:22:48,950
stuff right now profile attachments you

00:22:47,299 --> 00:22:55,549
saw the start of integration that

00:22:48,950 --> 00:22:58,570
Matthews done with the EVM I'm there are

00:22:55,549 --> 00:23:00,950
some other conditionals that are coming

00:22:58,570 --> 00:23:04,220
there's improvements on overall

00:23:00,950 --> 00:23:07,669
overlapping execs that happened as part

00:23:04,220 --> 00:23:09,950
of this so those attachment conditionals

00:23:07,669 --> 00:23:12,860
there's possibilities for overlaps and

00:23:09,950 --> 00:23:15,919
there's there's ways to check and figure

00:23:12,860 --> 00:23:18,559
out what's working and originally we had

00:23:15,919 --> 00:23:20,840
a much coarser check that was a

00:23:18,559 --> 00:23:22,909
heuristic saying we know this is good we

00:23:20,840 --> 00:23:24,980
don't have to do extra work now we're

00:23:22,909 --> 00:23:27,620
doing extra work to make sure you know

00:23:24,980 --> 00:23:31,970
we can get those areas that were

00:23:27,620 --> 00:23:35,600
somewhat sketchy on the heuristic and

00:23:31,970 --> 00:23:38,870
get the best match we have some work on

00:23:35,600 --> 00:23:40,760
the no new proves improvements so are no

00:23:38,870 --> 00:23:43,970
new proves there is stuff that has

00:23:40,760 --> 00:23:46,580
landed here so no new previous something

00:23:43,970 --> 00:23:50,240
that came around with SEC comp and when

00:23:46,580 --> 00:23:52,700
it first landed it it was it blocked

00:23:50,240 --> 00:23:56,120
LSMs from being able to do transitions

00:23:52,700 --> 00:23:59,270
we have some stuff in a part now that

00:23:56,120 --> 00:24:01,460
allows us to do subset transitions and

00:23:59,270 --> 00:24:04,850
track that so like in the stacking

00:24:01,460 --> 00:24:06,590
situations say for containers maybe no

00:24:04,850 --> 00:24:08,240
new proves is applied when you're

00:24:06,590 --> 00:24:10,910
setting up your container so at the

00:24:08,240 --> 00:24:13,550
system level your system container

00:24:10,910 --> 00:24:16,490
policies not changing but within that

00:24:13,550 --> 00:24:19,280
container it can actually transition the

00:24:16,490 --> 00:24:23,120
policies underneath in the lower part of

00:24:19,280 --> 00:24:25,340
the stack there is some other work for

00:24:23,120 --> 00:24:31,730
an override of no new purpose as well

00:24:25,340 --> 00:24:34,610
but that has not landed yet we had a

00:24:31,730 --> 00:24:38,920
problem where policy didn't carry ABI

00:24:34,610 --> 00:24:42,590
info you we did have a way to specify

00:24:38,920 --> 00:24:44,480
ABI and we basically it was either or so

00:24:42,590 --> 00:24:46,730
either you didn't specify the ABI the

00:24:44,480 --> 00:24:51,830
system level and it basically said use

00:24:46,730 --> 00:24:54,740
what the colonel's ABI is or you could

00:24:51,830 --> 00:24:57,309
specify hey I'm gonna pin my policy to

00:24:54,740 --> 00:24:57,309
this ABI

00:24:59,020 --> 00:25:06,380
so for development using the kernel ABI

00:25:03,710 --> 00:25:08,390
is great for policy it's not so great

00:25:06,380 --> 00:25:11,510
for distros but guess how many distros

00:25:08,390 --> 00:25:13,670
actually configured it that way so if

00:25:11,510 --> 00:25:16,700
you were changing your kernel frequently

00:25:13,670 --> 00:25:19,100
or being a kernel developer you could

00:25:16,700 --> 00:25:23,800
break people and we did have some

00:25:19,100 --> 00:25:27,380
problems with that so we landed an ABI

00:25:23,800 --> 00:25:29,630
or landing an ABI feature here so that

00:25:27,380 --> 00:25:31,790
you can just specify an ABI in policy

00:25:29,630 --> 00:25:33,290
and that's what's going to get used the

00:25:31,790 --> 00:25:36,080
old stuff still works that doesn't have

00:25:33,290 --> 00:25:38,810
the ABI specified it's just pinned to

00:25:36,080 --> 00:25:41,170
earlier ABI s-- it can't use new

00:25:38,810 --> 00:25:43,850
features

00:25:41,170 --> 00:25:46,040
the cash was still a problem as well

00:25:43,850 --> 00:25:50,330
when we start talking about Colonel and

00:25:46,040 --> 00:25:51,860
so we used to have a single cash so like

00:25:50,330 --> 00:25:53,870
I said we build policy would make a

00:25:51,860 --> 00:25:56,380
state machine so if you switched your

00:25:53,870 --> 00:25:59,240
colonel then we had to recompile and

00:25:56,380 --> 00:26:01,970
that was problematic for colonel

00:25:59,240 --> 00:26:05,050
development as well so now we've gone to

00:26:01,970 --> 00:26:09,920
a per colonel cash that can be

00:26:05,050 --> 00:26:12,350
precompiled it handles collisions like

00:26:09,920 --> 00:26:14,810
here if there's some hashing involved on

00:26:12,350 --> 00:26:17,090
the the a bi and if there's a collision

00:26:14,810 --> 00:26:21,470
you just you get a little subscript on

00:26:17,090 --> 00:26:23,590
it and it's checked we also at the same

00:26:21,470 --> 00:26:26,510
time as we were doing this work we added

00:26:23,590 --> 00:26:29,480
overlay support for policy in cash so

00:26:26,510 --> 00:26:32,360
that you could ship a read-only image

00:26:29,480 --> 00:26:38,780
and still have local changes if you

00:26:32,360 --> 00:26:40,730
wanted to allow that we landed pretty

00:26:38,780 --> 00:26:42,410
much everything there I mean I did say

00:26:40,730 --> 00:26:45,290
that there's the no new proof stuff that

00:26:42,410 --> 00:26:48,680
didn't quite land but we also have well

00:26:45,290 --> 00:26:50,600
part of the noni approves and didn't

00:26:48,680 --> 00:26:52,130
have as much land as we wanted there's a

00:26:50,600 --> 00:26:54,770
whole bunch of work that's in progress

00:26:52,130 --> 00:26:56,330
right now there's some internal

00:26:54,770 --> 00:27:00,110
provements and cleanups that are

00:26:56,330 --> 00:27:02,900
happening we're reworking the early

00:27:00,110 --> 00:27:04,670
policy load to better integrate with

00:27:02,900 --> 00:27:08,240
system D and have it happen naturally

00:27:04,670 --> 00:27:11,320
natively and even a little bit of

00:27:08,240 --> 00:27:14,740
support for doing it in the name of us

00:27:11,320 --> 00:27:17,180
you can do that now but there's no

00:27:14,740 --> 00:27:20,270
skeleton at all for that you have to go

00:27:17,180 --> 00:27:22,580
do it all manually yourself we're not

00:27:20,270 --> 00:27:23,990
really advocating doing that but we do

00:27:22,580 --> 00:27:28,370
have some people who would like that

00:27:23,990 --> 00:27:31,510
support the fine-grain network mediation

00:27:28,370 --> 00:27:31,510
is still a work in progress

00:27:32,090 --> 00:27:34,970
you know there's needs to be a whole

00:27:33,740 --> 00:27:36,740
bunch of improvements on the mount

00:27:34,970 --> 00:27:38,800
mediation we have some mount mediation

00:27:36,740 --> 00:27:41,780
it's pretty rudimentary at the moment

00:27:38,800 --> 00:27:44,420
there's some actual work on keyrings and

00:27:41,780 --> 00:27:46,190
i octaves going on right now there's a

00:27:44,420 --> 00:27:48,530
whole bunch of improvements coming on

00:27:46,190 --> 00:27:50,270
the audit side of things so we right now

00:27:48,530 --> 00:27:53,170
our audit structures are on the stack

00:27:50,270 --> 00:27:57,910
and we're gonna pull those off the stack

00:27:53,170 --> 00:27:59,860
do some caching of them there's also so

00:27:57,910 --> 00:28:02,980
we can do some elimination and speed

00:27:59,860 --> 00:28:04,780
things up there are complain learning

00:28:02,980 --> 00:28:06,760
mode features so how we do policy

00:28:04,780 --> 00:28:09,310
development are seeing some improvements

00:28:06,760 --> 00:28:11,800
as well so if anybody's followed the set

00:28:09,310 --> 00:28:13,780
comm notify work that Tycho's doing

00:28:11,800 --> 00:28:15,400
we've been borrowing from that and we're

00:28:13,780 --> 00:28:18,400
gonna actually have some interactive

00:28:15,400 --> 00:28:20,770
ability there for profile development

00:28:18,400 --> 00:28:24,010
that will actually make things a lot

00:28:20,770 --> 00:28:27,600
nicer there's some further further

00:28:24,010 --> 00:28:30,100
attachment conditional work coming on

00:28:27,600 --> 00:28:32,470
improvements to the conditionals and

00:28:30,100 --> 00:28:35,950
permissions within the structures more

00:28:32,470 --> 00:28:37,680
policy namespace work delegation is a

00:28:35,950 --> 00:28:39,900
continual work in progress

00:28:37,680 --> 00:28:42,730
something we really need to land

00:28:39,900 --> 00:28:45,910
improvements to Pam a power system

00:28:42,730 --> 00:28:51,430
namespace integration and documentation

00:28:45,910 --> 00:28:55,530
at the perennial thorn in our side so

00:28:51,430 --> 00:28:55,530
any questions questions

00:28:59,950 --> 00:29:06,150
anyone no thank you

00:29:04,690 --> 00:29:10,749
Thank You let's fingers

00:29:06,150 --> 00:29:10,749

YouTube URL: https://www.youtube.com/watch?v=3MkU_Z-fClE


