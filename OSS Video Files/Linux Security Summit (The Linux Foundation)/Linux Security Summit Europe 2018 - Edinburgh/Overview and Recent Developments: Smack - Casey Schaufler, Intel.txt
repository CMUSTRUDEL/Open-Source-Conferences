Title: Overview and Recent Developments: Smack - Casey Schaufler, Intel
Publication date: 2018-10-27
Playlist: Linux Security Summit Europe 2018 - Edinburgh
Description: 
	Overview and Recent Developments: Smack - Casey Schaufler, IntelÂ 

Provide an update on the current state and activity in the Smack Linux Security Module.

About Casey Schaufler
Casey Schaufler worked on Unix kernels in the 1970s-90s. He has implemented access control lists, mandatory access control, extended filesystem attributes, X11 access controls, network protocols and more audit systems than is really healthy. His involvement in Linux began with the Linux Security Module work at the turn of the century, introducing the Smack LSM in 2007. Casey is reworking the LSM infrastructure to support multiple concurrent modules. He has spoken at Linux Conference Australia, OLS, LinuxCon, Linux Plumbers and many other venues.
Captions: 
	00:00:00,450 --> 00:00:03,090
[Music]

00:00:00,659 --> 00:00:06,359
I'm the smack maintainer among other

00:00:03,090 --> 00:00:09,210
things that I that I'm doing here I've

00:00:06,359 --> 00:00:14,130
been working on secure systems since the

00:00:09,210 --> 00:00:17,750
1980s so I have a bit of experience with

00:00:14,130 --> 00:00:20,490
this and that's why smack came about

00:00:17,750 --> 00:00:23,600
smack is a third-generation multi-level

00:00:20,490 --> 00:00:26,099
secure system the first generation of

00:00:23,600 --> 00:00:29,460
multi-level secure systems use strict

00:00:26,099 --> 00:00:31,199
Bell and medulla security model would

00:00:29,460 --> 00:00:32,850
you say you had a level and a set of

00:00:31,199 --> 00:00:35,000
categories that you use to make your

00:00:32,850 --> 00:00:39,540
access control decisions so you could be

00:00:35,000 --> 00:00:41,610
have a secret level on your your data or

00:00:39,540 --> 00:00:44,329
on your process and then set categories

00:00:41,610 --> 00:00:46,739
which you might be be cleared for and

00:00:44,329 --> 00:00:49,370
that was great it worked really well but

00:00:46,739 --> 00:00:53,340
everybody we tried to sell it to said

00:00:49,370 --> 00:00:56,309
gee that's not I'm not I'm not in the

00:00:53,340 --> 00:00:59,100
u.s. DoD that's not what I want to do

00:00:56,309 --> 00:01:00,809
that doesn't work for me even if you

00:00:59,100 --> 00:01:02,489
actually then went out and demonstrated

00:01:00,809 --> 00:01:05,040
that you could actually do exactly what

00:01:02,489 --> 00:01:07,380
they wanted to do with it people would

00:01:05,040 --> 00:01:09,510
say but but you don't understand I'm not

00:01:07,380 --> 00:01:13,080
the u.s. DoD that's not what I want to

00:01:09,510 --> 00:01:15,000
do but you're just using it this way a

00:01:13,080 --> 00:01:16,619
little bit you're not even using it

00:01:15,000 --> 00:01:19,049
differently using exactly what that's

00:01:16,619 --> 00:01:21,330
what this what this does they would

00:01:19,049 --> 00:01:23,070
still say but I'm not the u.s. DoD

00:01:21,330 --> 00:01:26,850
that's not what you know this doesn't

00:01:23,070 --> 00:01:28,350
mean my report so we fiddled around with

00:01:26,850 --> 00:01:30,180
it for the second generation and said

00:01:28,350 --> 00:01:31,740
fine what we wanted what we're gonna do

00:01:30,180 --> 00:01:34,020
then is we're going to provide some

00:01:31,740 --> 00:01:36,299
aliasing capability so you can give give

00:01:34,020 --> 00:01:39,600
a name to something and we're gonna give

00:01:36,299 --> 00:01:42,470
you by the integrity as well so you can

00:01:39,600 --> 00:01:45,570
do integrity checks in addition to your

00:01:42,470 --> 00:01:49,320
sensitivity checks and people said yeah

00:01:45,570 --> 00:01:50,970
that's really great but you know what it

00:01:49,320 --> 00:01:55,079
doesn't do what I want to do I'm not the

00:01:50,970 --> 00:01:58,170
u.s. DoD so we scratched our heads and

00:01:55,079 --> 00:01:59,520
said well okay well what what's the

00:01:58,170 --> 00:02:01,200
problem with well I have to specify all

00:01:59,520 --> 00:02:02,670
this stuff even like my levels and

00:02:01,200 --> 00:02:05,280
categories and I don't use levels and

00:02:02,670 --> 00:02:07,170
categories I just want to people do like

00:02:05,280 --> 00:02:09,989
like this to be isolated from people

00:02:07,170 --> 00:02:14,250
like that okay so we put in an alias

00:02:09,989 --> 00:02:16,950
mechanism that worked really well as

00:02:14,250 --> 00:02:18,660
we're using just aliases they kind of

00:02:16,950 --> 00:02:23,550
forgot that they had bill and Lapage

00:02:18,660 --> 00:02:25,910
Allah underneath and so the third

00:02:23,550 --> 00:02:29,310
generation was well why am i bothering

00:02:25,910 --> 00:02:31,410
with these levels in categories and vibe

00:02:29,310 --> 00:02:33,330
integrity grades and divisions when I

00:02:31,410 --> 00:02:35,340
could just say here's the here's the

00:02:33,330 --> 00:02:40,290
name here's the the name of your

00:02:35,340 --> 00:02:45,060
security bit here and then do the

00:02:40,290 --> 00:02:47,520
comparisons based on that and that's

00:02:45,060 --> 00:02:50,130
what I that that's what smack does and

00:02:47,520 --> 00:02:52,380
it doesn't do other things it doesn't do

00:02:50,130 --> 00:02:54,990
discretionary access control

00:02:52,380 --> 00:02:57,420
we've got capable we've got mode bits

00:02:54,990 --> 00:02:58,920
and heaven forbid access control lists

00:02:57,420 --> 00:03:01,500
if you really want to do that

00:02:58,920 --> 00:03:03,510
it doesn't do privilege we have a

00:03:01,500 --> 00:03:08,550
capabilities mechanism that works just

00:03:03,510 --> 00:03:10,950
fine unless you consider sysadmin so

00:03:08,550 --> 00:03:16,590
smack doesn't do that it does mandatory

00:03:10,950 --> 00:03:19,290
access control and that's all it does so

00:03:16,590 --> 00:03:23,190
smack is a is a mechanism that uses

00:03:19,290 --> 00:03:24,600
labels subjects labels on objects to

00:03:23,190 --> 00:03:29,489
determine what kind of access you have

00:03:24,600 --> 00:03:31,320
for something basically when you create

00:03:29,489 --> 00:03:33,750
an object it gets the same label but the

00:03:31,320 --> 00:03:37,800
process that creates it has pretty

00:03:33,750 --> 00:03:40,980
simple there if you're doing IPC that's

00:03:37,800 --> 00:03:43,019
treated as a write operation so if

00:03:40,980 --> 00:03:45,900
process a is going to write the process

00:03:43,019 --> 00:03:51,420
be any process a needs to have write

00:03:45,900 --> 00:03:55,410
access process a z' smack label has to

00:03:51,420 --> 00:04:00,150
have write access to processes process B

00:03:55,410 --> 00:04:02,160
smack label I have that's I guess

00:04:00,150 --> 00:04:04,590
straight out of Bellona podge Allah

00:04:02,160 --> 00:04:06,239
there it's a write operation it has to

00:04:04,590 --> 00:04:12,030
be some kind of operation make it a

00:04:06,239 --> 00:04:16,109
write operation we have a couple of

00:04:12,030 --> 00:04:21,390
other process attributes process file

00:04:16,109 --> 00:04:24,390
attributes that we can use to clear up

00:04:21,390 --> 00:04:26,370
some of the more obvious problems for

00:04:24,390 --> 00:04:27,130
example we have an exact attribute that

00:04:26,370 --> 00:04:31,660
you can put on

00:04:27,130 --> 00:04:34,390
on a program file so that the process

00:04:31,660 --> 00:04:36,160
will run with that smack label instead

00:04:34,390 --> 00:04:40,000
of the smack label though the process

00:04:36,160 --> 00:04:43,600
that invoked it also we have a spiffy

00:04:40,000 --> 00:04:45,520
transmute attribute you can put on a

00:04:43,600 --> 00:04:47,890
directory so that files that are created

00:04:45,520 --> 00:04:49,570
in that direction we will get to get the

00:04:47,890 --> 00:04:52,240
label of the directory rather than that

00:04:49,570 --> 00:04:54,520
of the process under certain

00:04:52,240 --> 00:04:58,330
circumstances and I'm simplifying things

00:04:54,520 --> 00:05:01,090
just a little bit here because I I know

00:04:58,330 --> 00:05:03,520
that I'm just before a lunch but those

00:05:01,090 --> 00:05:05,470
are the basic things you basically every

00:05:03,520 --> 00:05:06,550
process has a label every object has a

00:05:05,470 --> 00:05:09,760
label

00:05:06,550 --> 00:05:15,160
they're used in comparison to do your

00:05:09,760 --> 00:05:20,100
checks so SMAC implements a simple

00:05:15,160 --> 00:05:23,280
separation policy which simply says that

00:05:20,100 --> 00:05:26,590
we're going to come compare the label

00:05:23,280 --> 00:05:28,120
where the labels and under the right

00:05:26,590 --> 00:05:31,450
circumstances where you're going to deny

00:05:28,120 --> 00:05:33,190
or grant access so the basic rule is

00:05:31,450 --> 00:05:37,920
that if the labels don't match you don't

00:05:33,190 --> 00:05:40,480
get access pretty simple there makes

00:05:37,920 --> 00:05:45,940
makes isolation release well yeah

00:05:40,480 --> 00:05:48,790
isolation is easy sharing is hard all

00:05:45,940 --> 00:05:50,320
the problems that we have in advanced

00:05:48,790 --> 00:05:54,010
security system come from the fact that

00:05:50,320 --> 00:05:55,120
people want to share things other than

00:05:54,010 --> 00:06:00,580
the things that they're directly related

00:05:55,120 --> 00:06:05,380
to so we have in addition to the basic

00:06:00,580 --> 00:06:07,300
labels we have some special labels that

00:06:05,380 --> 00:06:09,520
I'll talk about a little bit more in a

00:06:07,300 --> 00:06:12,100
minute here that allow you to to address

00:06:09,520 --> 00:06:13,360
things like death-knell where everybody

00:06:12,100 --> 00:06:14,410
should be able to write to Devon all

00:06:13,360 --> 00:06:20,140
everybody should be able to read from

00:06:14,410 --> 00:06:24,670
Devon all and explicit relationships can

00:06:20,140 --> 00:06:27,700
be defined so if I decide that the that

00:06:24,670 --> 00:06:29,050
I want a process with the label snap to

00:06:27,700 --> 00:06:32,110
be able to access things that are

00:06:29,050 --> 00:06:34,810
labeled pop we can create a litte create

00:06:32,110 --> 00:06:37,300
a smack rule that allows that and you

00:06:34,810 --> 00:06:40,600
can allow that read access readwrite

00:06:37,300 --> 00:06:42,830
access append access

00:06:40,600 --> 00:06:46,190
depending on how you want your policy to

00:06:42,830 --> 00:06:50,120
work and give it execute access as well

00:06:46,190 --> 00:06:51,680
so the whole idea here is that you've

00:06:50,120 --> 00:06:54,410
got two labels you're gonna do a

00:06:51,680 --> 00:06:55,760
comparison if they're equal great if

00:06:54,410 --> 00:06:58,910
they're not equal you're going to find a

00:06:55,760 --> 00:07:02,120
rule that that identifies the two labels

00:06:58,910 --> 00:07:05,990
and provides you the access and it turns

00:07:02,120 --> 00:07:09,770
out that by doing it this way we don't

00:07:05,990 --> 00:07:12,710
have to compile a policy there is

00:07:09,770 --> 00:07:15,440
exactly one rule that will that

00:07:12,710 --> 00:07:20,570
describes the access between those those

00:07:15,440 --> 00:07:23,030
two labels and that simplifies things

00:07:20,570 --> 00:07:25,640
but things greatly if if you want to

00:07:23,030 --> 00:07:27,340
know for example when I'm looking at a

00:07:25,640 --> 00:07:31,370
subject when I'm looking at an object

00:07:27,340 --> 00:07:32,960
will it have access there's one rule

00:07:31,370 --> 00:07:35,540
will tell you that you don't have to

00:07:32,960 --> 00:07:37,190
decompile your policy you don't have to

00:07:35,540 --> 00:07:39,560
determine what what the face of the moon

00:07:37,190 --> 00:07:41,150
is you don't have to know what namespace

00:07:39,560 --> 00:07:44,570
tree you you look and you can see the

00:07:41,150 --> 00:07:47,480
rule and it's just there

00:07:44,570 --> 00:07:49,550
I mentioned special labels we've got a

00:07:47,480 --> 00:07:51,860
couple of special labels here and by the

00:07:49,550 --> 00:07:55,010
way I didn't say what a label was a

00:07:51,860 --> 00:07:59,090
label is a text string up to 24

00:07:55,010 --> 00:08:00,650
characters long and they're not

00:07:59,090 --> 00:08:05,090
interpreted in any way they're merely

00:08:00,650 --> 00:08:08,720
compared alright so special labels we

00:08:05,090 --> 00:08:12,530
would the floor label this is the label

00:08:08,720 --> 00:08:16,210
that you put your system data at the

00:08:12,530 --> 00:08:18,560
root of your file systems and it's the

00:08:16,210 --> 00:08:20,960
label that a file that processes get

00:08:18,560 --> 00:08:23,300
started at and that that the init

00:08:20,960 --> 00:08:27,380
process is given unless you tell it

00:08:23,300 --> 00:08:31,910
otherwise it has a special property in

00:08:27,380 --> 00:08:36,169
that all processes any label can read

00:08:31,910 --> 00:08:38,060
has read access to the floor label so

00:08:36,169 --> 00:08:39,950
that's that's how you solved the problem

00:08:38,060 --> 00:08:43,580
of how to how do I get it my library is

00:08:39,950 --> 00:08:45,020
when I'm not running at the city yeah

00:08:43,580 --> 00:08:45,950
it's the same label as the system yes

00:08:45,020 --> 00:08:48,260
all right

00:08:45,950 --> 00:08:50,900
you have the star label this is really

00:08:48,260 --> 00:08:54,220
good for Devon all because everybody

00:08:50,900 --> 00:08:58,070
needs needs to have access to that

00:08:54,220 --> 00:09:00,050
and then we have the hat label the hat

00:08:58,070 --> 00:09:02,180
label is used for things like back up

00:09:00,050 --> 00:09:04,430
hat label has the interesting property

00:09:02,180 --> 00:09:06,250
that if your process has the hat label

00:09:04,430 --> 00:09:08,570
it can read anything on the system

00:09:06,250 --> 00:09:14,300
doesn't give it right access but it does

00:09:08,570 --> 00:09:16,880
give it read access and as far as the

00:09:14,300 --> 00:09:18,620
networking goes smack enforces

00:09:16,880 --> 00:09:24,080
networking byte network access

00:09:18,620 --> 00:09:27,050
controlled by default so uses sip uses

00:09:24,080 --> 00:09:31,839
the SIP so mechanism in order to pass in

00:09:27,050 --> 00:09:38,240
ipv4 to pass the label with the packet

00:09:31,839 --> 00:09:40,190
so if I'm trying to send a for a UDP

00:09:38,240 --> 00:09:45,740
Datagram from from one process to

00:09:40,190 --> 00:09:47,630
another the packet gets the label from

00:09:45,740 --> 00:09:51,140
the sending process it goes over to the

00:09:47,630 --> 00:09:54,020
other side kernel pulls out pulls it out

00:09:51,140 --> 00:09:56,450
of the pulls the label out of the packet

00:09:54,020 --> 00:09:58,610
and says would a prop would a subject

00:09:56,450 --> 00:10:01,310
with this label be able to write to this

00:09:58,610 --> 00:10:04,279
process if it can it gets delivered if

00:10:01,310 --> 00:10:06,320
it can't it gets dropped so that's

00:10:04,279 --> 00:10:07,990
enforced throughout the network

00:10:06,320 --> 00:10:11,120
throughout the networking there

00:10:07,990 --> 00:10:12,800
unlabeled packets are taking are taken

00:10:11,120 --> 00:10:17,420
care of by what we call the ambient

00:10:12,800 --> 00:10:18,890
label so if an unlabeled packet comes in

00:10:17,420 --> 00:10:20,810
it's going to be delivered to a process

00:10:18,890 --> 00:10:23,510
it gets assigned the ambient label and

00:10:20,810 --> 00:10:28,040
if a subject with the ambient label can

00:10:23,510 --> 00:10:29,560
write to that process then it goes

00:10:28,040 --> 00:10:32,570
through otherwise it gets dropped

00:10:29,560 --> 00:10:35,000
ambient label is specifiable so you can

00:10:32,570 --> 00:10:38,450
set you can specify it so that it's any

00:10:35,000 --> 00:10:44,270
value you want it to be if you're

00:10:38,450 --> 00:10:46,700
privileged and we also have a mechanism

00:10:44,270 --> 00:10:48,560
whereby you can say any packet that

00:10:46,700 --> 00:10:51,890
comes from this host will be given this

00:10:48,560 --> 00:10:54,560
label and you can only write send

00:10:51,890 --> 00:10:56,540
information to that host if you have

00:10:54,560 --> 00:11:02,120
that label or if you have write access

00:10:56,540 --> 00:11:05,060
to that label so that takes care of

00:11:02,120 --> 00:11:06,250
almost all the situations you have where

00:11:05,060 --> 00:11:08,540
you're talking to

00:11:06,250 --> 00:11:17,450
you're talking out to the world on the

00:11:08,540 --> 00:11:20,470
Internet who's using smack it actually

00:11:17,450 --> 00:11:24,140
does have users Tizen if you have a

00:11:20,470 --> 00:11:27,950
samsung television or a samsung camera

00:11:24,140 --> 00:11:30,620
or just about any device samsung has

00:11:27,950 --> 00:11:34,339
made over the past few years we will

00:11:30,620 --> 00:11:36,860
have smack in it automotive grade Linux

00:11:34,339 --> 00:11:37,579
is using smack so if you have a new

00:11:36,860 --> 00:11:41,390
Toyota

00:11:37,579 --> 00:11:46,940
it's got smack in it and the Yocto

00:11:41,390 --> 00:11:49,940
project mechanism for building building

00:11:46,940 --> 00:11:54,110
Linux systems for her to refer to as a

00:11:49,940 --> 00:11:57,500
Linux Oh Tron actually has good support

00:11:54,110 --> 00:12:06,649
for for smack and smack smack policies

00:11:57,500 --> 00:12:08,380
in that build system so what's new in

00:12:06,649 --> 00:12:11,000
smack these days

00:12:08,380 --> 00:12:15,050
smack has actually been relatively

00:12:11,000 --> 00:12:17,480
stable over the past few years but what

00:12:15,050 --> 00:12:19,870
is new we've got support for overall AFS

00:12:17,480 --> 00:12:24,140
which was missing for a good long time

00:12:19,870 --> 00:12:27,050
and you now have the privilege if you

00:12:24,140 --> 00:12:30,709
have privilege you can change keys key

00:12:27,050 --> 00:12:33,260
value used to be you couldn't change a

00:12:30,709 --> 00:12:37,279
key if your label didn't match that of

00:12:33,260 --> 00:12:42,649
the key even if you had had the cap Mac

00:12:37,279 --> 00:12:45,860
admin privilege that was actually a bit

00:12:42,649 --> 00:12:48,620
of a problem in a couple of cases but we

00:12:45,860 --> 00:12:50,870
got a fix in for that there are a couple

00:12:48,620 --> 00:12:54,170
of other things coming in as well so

00:12:50,870 --> 00:12:58,130
yeah Vic what's fixed recently we have

00:12:54,170 --> 00:13:04,550
some memory leaks they were actually

00:12:58,130 --> 00:13:09,199
fairly obscure but got some fixes in for

00:13:04,550 --> 00:13:11,180
those recently ipv4 over ipv6 had some

00:13:09,199 --> 00:13:17,520
issues as well

00:13:11,180 --> 00:13:22,810
those have been fixed UDP light DC CP

00:13:17,520 --> 00:13:26,980
those changes came in generally what we

00:13:22,810 --> 00:13:28,870
tend to find is that most of the the

00:13:26,980 --> 00:13:32,830
problems that show up in smack come in

00:13:28,870 --> 00:13:35,790
when somebody fixes something else we've

00:13:32,830 --> 00:13:38,680
had a number of cases where the inode

00:13:35,790 --> 00:13:40,930
initialization for sockets has been

00:13:38,680 --> 00:13:42,520
optimized to the to the point where they

00:13:40,930 --> 00:13:48,220
weren't putting enough information in

00:13:42,520 --> 00:13:53,050
early enough and that interfered with

00:13:48,220 --> 00:13:57,330
TCP sockets getting getting created but

00:13:53,050 --> 00:13:57,330
those tend to get fixed in a relatively

00:13:57,600 --> 00:14:07,990
reasonable fashion so what do we have

00:14:04,360 --> 00:14:10,030
coming up coming down the pike have some

00:14:07,990 --> 00:14:12,190
networking projects involved the first

00:14:10,030 --> 00:14:14,500
one we'd really you know we don't

00:14:12,190 --> 00:14:19,090
support Calypso yet really love to have

00:14:14,500 --> 00:14:21,720
somebody work on that anybody has a keen

00:14:19,090 --> 00:14:26,950
keen interest in becoming a network

00:14:21,720 --> 00:14:32,080
security developer this would be a great

00:14:26,950 --> 00:14:34,630
place for sit for somebody to start we

00:14:32,080 --> 00:14:35,950
also have some cleanup that needs to be

00:14:34,630 --> 00:14:40,120
done in the current net label

00:14:35,950 --> 00:14:45,400
implementation for smack a combination

00:14:40,120 --> 00:14:48,430
of a few did a few poor design choices

00:14:45,400 --> 00:14:52,390
early on and the fact that the net label

00:14:48,430 --> 00:14:54,150
code has has advanced at a higher rate

00:14:52,390 --> 00:14:57,010
than I've been able to keep up with

00:14:54,150 --> 00:14:58,720
means that there there's some

00:14:57,010 --> 00:15:02,950
significant cleanup work to be done

00:14:58,720 --> 00:15:06,160
there that may be higher on my list now

00:15:02,950 --> 00:15:08,620
than it was was a year ago see about

00:15:06,160 --> 00:15:10,080
that but that would be a another area

00:15:08,620 --> 00:15:14,620
where if somebody wanted to contribute

00:15:10,080 --> 00:15:20,110
be really welcome you know a bunch of

00:15:14,620 --> 00:15:22,660
other projects as well as namespaces

00:15:20,110 --> 00:15:27,760
have become more and more interesting in

00:15:22,660 --> 00:15:30,310
the community selinux is working on

00:15:27,760 --> 00:15:30,850
namespaces we just heard about a farmers

00:15:30,310 --> 00:15:33,789
we're

00:15:30,850 --> 00:15:35,859
work with namespaces we actually had

00:15:33,789 --> 00:15:39,579
some work done with smack namespaces a

00:15:35,859 --> 00:15:43,829
couple of years ago in at Samsung's

00:15:39,579 --> 00:15:43,829
kernel development group in Warsaw

00:15:44,249 --> 00:15:50,829
unfortunately their use case disappeared

00:15:46,949 --> 00:15:53,259
so yeah that that has been abandoned it

00:15:50,829 --> 00:15:55,179
would be really nice to to pick that

00:15:53,259 --> 00:15:59,529
back up

00:15:55,179 --> 00:16:01,089
I'd love to support InfiniBand my home

00:15:59,529 --> 00:16:03,759
laboratory doesn't actually have an

00:16:01,089 --> 00:16:06,309
infinite band network that's kind of

00:16:03,759 --> 00:16:08,109
hardware that's kind of obscured to get

00:16:06,309 --> 00:16:10,449
but if somebody wanted to work on that

00:16:08,109 --> 00:16:10,839
that would be really really a positive

00:16:10,449 --> 00:16:17,319
thing

00:16:10,839 --> 00:16:19,569
well libvirt eb PF and we have a test

00:16:17,319 --> 00:16:22,119
suite under development that hasn't

00:16:19,569 --> 00:16:25,419
actually gotten gotten corporate

00:16:22,119 --> 00:16:27,369
clearance to get out yet once we can get

00:16:25,419 --> 00:16:29,499
that out and out into the community then

00:16:27,369 --> 00:16:31,269
we can get some more work on that that

00:16:29,499 --> 00:16:33,369
would be a very positive thing because

00:16:31,269 --> 00:16:35,829
people frequently say how do I make sure

00:16:33,369 --> 00:16:38,499
that my system is working right well the

00:16:35,829 --> 00:16:43,089
test suite would be the right thing just

00:16:38,499 --> 00:16:50,559
have to get it out to you and probably

00:16:43,089 --> 00:16:55,809
the back Oh fiddle-dee-dee I have a new

00:16:50,559 --> 00:17:07,779
clicker and it's it's really a great

00:16:55,809 --> 00:17:12,509
clicker but okay so the biggest thing

00:17:07,779 --> 00:17:19,329
that that would would make make my life

00:17:12,509 --> 00:17:22,600
easier and probably make the acceptance

00:17:19,329 --> 00:17:26,769
of smack go more swimmingly would be a

00:17:22,600 --> 00:17:30,940
rule set for distributions so if we had

00:17:26,769 --> 00:17:34,450
a good rule set for say fedora or a bun

00:17:30,940 --> 00:17:38,950
to could probably get a lot more more

00:17:34,450 --> 00:17:42,399
adoption this is not a small project I

00:17:38,950 --> 00:17:44,510
have considered the the said script

00:17:42,399 --> 00:17:48,470
which takes the selinux

00:17:44,510 --> 00:17:50,750
attributes on on files and translates

00:17:48,470 --> 00:17:55,310
them into smack labels which is pretty

00:17:50,750 --> 00:17:56,960
easy and then do the same for processes

00:17:55,310 --> 00:18:01,100
but then that would require reading the

00:17:56,960 --> 00:18:03,980
SELinux policy and decomposing it

00:18:01,100 --> 00:18:05,120
somehow but if somebody wanted to do

00:18:03,980 --> 00:18:06,080
that that would be great and that would

00:18:05,120 --> 00:18:09,590
be cool and you could probably get a

00:18:06,080 --> 00:18:12,140
master's degree for that the same for a

00:18:09,590 --> 00:18:14,150
Parma policy although that might be a

00:18:12,140 --> 00:18:15,800
little bit easier to deal with or it

00:18:14,150 --> 00:18:22,130
might be a little bit harder I'm really

00:18:15,800 --> 00:18:25,100
not sure I have two minds on that so

00:18:22,130 --> 00:18:27,440
that's about all I've got I know that

00:18:25,100 --> 00:18:30,910
it's almost lunchtime here so any

00:18:27,440 --> 00:18:30,910
questions questions

00:18:35,120 --> 00:18:42,820
thank you for this presentation I'm

00:18:37,910 --> 00:18:45,440
Andre from London working on security

00:18:42,820 --> 00:18:49,610
specialists I have one question do you

00:18:45,440 --> 00:18:51,680
have a company mode on like like a

00:18:49,610 --> 00:18:59,680
complaint mode on a PPR Moriarty's on

00:18:51,680 --> 00:19:06,050
smack do I have a one way to test

00:18:59,680 --> 00:19:07,760
promotion mode yes no that's it and

00:19:06,050 --> 00:19:09,740
that's on purpose

00:19:07,760 --> 00:19:15,230
there are debug there are some debug

00:19:09,740 --> 00:19:17,930
facilities you can tell the system to

00:19:15,230 --> 00:19:21,920
report any time that an access is

00:19:17,930 --> 00:19:26,540
granted by a non default rule you can

00:19:21,920 --> 00:19:28,820
also specify it that a single label that

00:19:26,540 --> 00:19:32,540
is going to be allowed to do anything it

00:19:28,820 --> 00:19:33,560
wants but those are strictly for

00:19:32,540 --> 00:19:36,440
debugging purposes

00:19:33,560 --> 00:19:39,170
the problem with permissive mode and I

00:19:36,440 --> 00:19:42,080
have seen this time and time and time

00:19:39,170 --> 00:19:44,230
and time again is that the when you give

00:19:42,080 --> 00:19:47,780
somebody permissive mode what they do is

00:19:44,230 --> 00:19:50,150
as the system is in development they

00:19:47,780 --> 00:19:51,980
turn on permissive mode they do all the

00:19:50,150 --> 00:19:53,870
development and then three days before

00:19:51,980 --> 00:19:56,300
release they say ok now we're gonna

00:19:53,870 --> 00:20:00,920
switch on security and everything falls

00:19:56,300 --> 00:20:02,600
flat on its face and everybody throws up

00:20:00,920 --> 00:20:05,930
their hands and says what's wrong and

00:20:02,600 --> 00:20:10,520
they say well my my code works just fine

00:20:05,930 --> 00:20:12,710
but security broke it and then there's a

00:20:10,520 --> 00:20:14,990
big meeting and all the executives come

00:20:12,710 --> 00:20:17,360
together and they say well what shall we

00:20:14,990 --> 00:20:18,890
do and they say well we can ship with

00:20:17,360 --> 00:20:21,680
security with security and print with it

00:20:18,890 --> 00:20:24,530
in permissive mode oh and then

00:20:21,680 --> 00:20:25,730
everything works yes oh but we've got

00:20:24,530 --> 00:20:28,280
security enabled right

00:20:25,730 --> 00:20:36,530
yes it's enabled in permissive mode ok

00:20:28,280 --> 00:20:38,570
we are good and I know that people don't

00:20:36,530 --> 00:20:40,730
want to do that and I know that people

00:20:38,570 --> 00:20:42,350
have plans to not have that happen next

00:20:40,730 --> 00:20:46,740
time but guess what

00:20:42,350 --> 00:20:48,840
next time rolls around for days before

00:20:46,740 --> 00:20:50,700
the release they turn security on

00:20:48,840 --> 00:20:52,410
everything falls on a slight pace

00:20:50,700 --> 00:20:55,770
because nobody's been given time to go

00:20:52,410 --> 00:21:02,210
actually fix it and so it's ships with

00:20:55,770 --> 00:21:08,970
permissive mode again so I know I know

00:21:02,210 --> 00:21:12,210
that every every major user of SMAC has

00:21:08,970 --> 00:21:14,820
a patch on their own to an able to

00:21:12,210 --> 00:21:19,590
create permissive mode it's not hard

00:21:14,820 --> 00:21:21,540
it's about three lines of code but I'm

00:21:19,590 --> 00:21:26,040
not going to carry it because I know

00:21:21,540 --> 00:21:28,679
that I know that when people use that it

00:21:26,040 --> 00:21:32,000
causes problems and it always has and it

00:21:28,679 --> 00:21:34,410
always will and it's just inherent in in

00:21:32,000 --> 00:21:37,410
in the notion of having a permissive

00:21:34,410 --> 00:21:41,059
mode it's just the way things work has

00:21:37,410 --> 00:21:41,059
been always has been always will be

00:21:41,270 --> 00:21:55,690
thank you thank you

00:21:50,090 --> 00:21:55,690

YouTube URL: https://www.youtube.com/watch?v=v4-RB-miDAE


