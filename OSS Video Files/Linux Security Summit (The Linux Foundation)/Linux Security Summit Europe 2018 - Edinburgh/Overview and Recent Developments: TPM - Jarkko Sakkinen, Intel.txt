Title: Overview and Recent Developments: TPM - Jarkko Sakkinen, Intel
Publication date: 2018-10-26
Playlist: Linux Security Summit Europe 2018 - Edinburgh
Description: 
	Overview and Recent Developments: TPM - Jarkko Sakkinen, IntelÂ 

 The talk starts from a short overview of the TPM subsystem. Then
a quick review what has been happening during the past 12 months in the
TPM kernel space will be given. We also briefly look at the TPM genie vulnerability
discovered by Jeremy Boone and directions how we plan to harden kernel
to be resistant to such hardware attacks. 

About Jarkko Sakkinen
A software Engineer with vast experience especially on mobile and
embedded space for past 17 years. Jarkko has been last few years
employed by Intel for the most part working on Linux TPM and SGX support in the kernel space. On free time Jarkko enjoys producing music and good beer.
Captions: 
	00:00:00,140 --> 00:00:07,049
okay this is the TBM subsystem update

00:00:03,840 --> 00:00:09,480
and and I'll discuss about about things

00:00:07,049 --> 00:00:13,740
that have happened since since the

00:00:09,480 --> 00:00:20,939
kernel summit 2017 so this is kind of

00:00:13,740 --> 00:00:25,160
yearly update for TPM TPM in Nautilus is

00:00:20,939 --> 00:00:30,210
a secure cope it's a it's an embedded

00:00:25,160 --> 00:00:33,690
coprocessor that provides different

00:00:30,210 --> 00:00:37,410
tools for for anchoring the privacy of

00:00:33,690 --> 00:00:39,989
the system and it's it's implemented

00:00:37,410 --> 00:00:42,719
either as a software module running in

00:00:39,989 --> 00:00:48,989
some trusted environment like like trust

00:00:42,719 --> 00:00:53,640
zone or STX or or management engine or

00:00:48,989 --> 00:00:56,850
or as as a as an external tip that is

00:00:53,640 --> 00:01:01,710
connected through some some common bus

00:00:56,850 --> 00:01:09,720
like LPC or I to see and and essentially

00:01:01,710 --> 00:01:13,130
it provides key storage and and platform

00:01:09,720 --> 00:01:17,009
measurement functionality and ways to

00:01:13,130 --> 00:01:25,439
ways to sign this this measurement and

00:01:17,009 --> 00:01:27,720
and test the validity of the system the

00:01:25,439 --> 00:01:30,210
platform measurement is based on these

00:01:27,720 --> 00:01:34,950
these registers called platform

00:01:30,210 --> 00:01:37,200
configuration registers they only

00:01:34,950 --> 00:01:39,750
support extent and read operation so you

00:01:37,200 --> 00:01:41,850
can you can have a new data to them but

00:01:39,750 --> 00:01:45,110
you can you cannot set set them all

00:01:41,850 --> 00:01:50,430
clear then while the system is running

00:01:45,110 --> 00:01:52,710
and and and they can be used used to use

00:01:50,430 --> 00:01:55,310
to measure every stage of the ball in a

00:01:52,710 --> 00:01:59,399
way that that the previous stage

00:01:55,310 --> 00:02:02,759
measures the image of the next stage

00:01:59,399 --> 00:02:05,520
before before letting it run and of

00:02:02,759 --> 00:02:08,819
course the first stage must be stored in

00:02:05,520 --> 00:02:12,140
in very protected memory so that it

00:02:08,819 --> 00:02:12,140
cannot be tampered

00:02:13,880 --> 00:02:22,380
the TPM is passive by itself but but but

00:02:17,580 --> 00:02:25,860
but III either the either the software

00:02:22,380 --> 00:02:29,610
that gets invalid measurement from from

00:02:25,860 --> 00:02:32,940
the next day's image can can perform

00:02:29,610 --> 00:02:37,470
perform some actions like like terminate

00:02:32,940 --> 00:02:41,330
the boot or for the encryption key

00:02:37,470 --> 00:02:44,250
inside TPN can be can be sealed to

00:02:41,330 --> 00:02:47,070
specific PCR values so that if you get

00:02:44,250 --> 00:02:56,790
invalid measurement you cannot unseal

00:02:47,070 --> 00:03:00,240
the disk encryption key remote

00:02:56,790 --> 00:03:05,730
attestation is essentially a procedure

00:03:00,240 --> 00:03:10,620
where you were the TPM signs signs these

00:03:05,730 --> 00:03:12,990
measurements using using an own

00:03:10,620 --> 00:03:17,040
certificate that is known to the other

00:03:12,990 --> 00:03:19,620
party and a remote party can can can

00:03:17,040 --> 00:03:22,320
then verify this these measurements

00:03:19,620 --> 00:03:26,580
using the public key from the

00:03:22,320 --> 00:03:28,680
certificate and that that way the remote

00:03:26,580 --> 00:03:34,610
party can know whether the system is in

00:03:28,680 --> 00:03:37,490
valid or invalid state well here here's

00:03:34,610 --> 00:03:40,520
here's a quick recap of the TPM

00:03:37,490 --> 00:03:48,780
development history it began in the 90s

00:03:40,520 --> 00:03:53,220
and and the TPM 1 1 standard reached its

00:03:48,780 --> 00:03:55,970
final point in 2009 it had said it had

00:03:53,220 --> 00:03:59,880
some limits like like only fixed

00:03:55,970 --> 00:04:01,620
encryption algorithm and and it did not

00:03:59,880 --> 00:04:03,900
support for example symmetric key

00:04:01,620 --> 00:04:07,110
encryption these these features were

00:04:03,900 --> 00:04:11,520
added into TPM 2.0 that is not backwards

00:04:07,110 --> 00:04:17,580
compatible with the TPM one and and

00:04:11,520 --> 00:04:21,330
these days these days

00:04:17,580 --> 00:04:23,680
TPM two is becoming like like like the

00:04:21,330 --> 00:04:25,940
de-facto standard

00:04:23,680 --> 00:04:32,780
DPM one point devices are quickly

00:04:25,940 --> 00:04:34,580
disappearing okay here here are the

00:04:32,780 --> 00:04:38,330
highlights of the recent development

00:04:34,580 --> 00:04:41,780
within one year we have added validation

00:04:38,330 --> 00:04:44,750
code for TPM heater for mainly for the

00:04:41,780 --> 00:04:52,160
under runs and overruns of the received

00:04:44,750 --> 00:04:54,560
data compared to the heater and and and

00:04:52,160 --> 00:04:57,320
we have added event lock support for

00:04:54,560 --> 00:05:00,830
UEFI support a year ago there was only

00:04:57,320 --> 00:05:04,570
support for four for device tree based

00:05:00,830 --> 00:05:08,990
systems and then there's been some

00:05:04,570 --> 00:05:12,650
performance update to the to the TPM

00:05:08,990 --> 00:05:16,880
teeth driver that is commonly used with

00:05:12,650 --> 00:05:19,610
the with the discrete idioms and and

00:05:16,880 --> 00:05:21,950
self test for forties we have kind of

00:05:19,610 --> 00:05:25,610
increased the resolution of the timing

00:05:21,950 --> 00:05:28,430
when we polled poll the TPM and in

00:05:25,610 --> 00:05:30,590
self-test we run it now like assumed

00:05:28,430 --> 00:05:33,410
chronology so we put it to run but do

00:05:30,590 --> 00:05:35,810
not do not wait that it completes but

00:05:33,410 --> 00:05:50,210
con but instant continued at system

00:05:35,810 --> 00:05:54,020
initialization okay so the event lock is

00:05:50,210 --> 00:05:56,720
essentially a lock maintained by or or

00:05:54,020 --> 00:06:01,120
written by the by the pre-boot software

00:05:56,720 --> 00:06:04,580
like like bios and and it contains

00:06:01,120 --> 00:06:10,160
contains entries for every every every

00:06:04,580 --> 00:06:14,330
piece your extension and and it can be

00:06:10,160 --> 00:06:17,750
used to debug pete debug the system if

00:06:14,330 --> 00:06:22,510
piece years pc ours have invalid values

00:06:17,750 --> 00:06:27,490
so where did it go wrong and so forth or

00:06:22,510 --> 00:06:29,840
in some if application requires you can

00:06:27,490 --> 00:06:33,200
combine it with the final piece your

00:06:29,840 --> 00:06:35,750
values you you you get you get you can

00:06:33,200 --> 00:06:36,800
get signed from the t from the TPM in

00:06:35,750 --> 00:06:41,150
order to get

00:06:36,800 --> 00:06:43,970
that measurement lock because because

00:06:41,150 --> 00:06:46,099
the law given by the buyers itself is

00:06:43,970 --> 00:06:49,460
untrust but if you if you know the final

00:06:46,099 --> 00:06:51,620
if you have signed signed quote of the

00:06:49,460 --> 00:06:53,960
final values you by combining these

00:06:51,620 --> 00:07:01,159
those two you can you have like fully

00:06:53,960 --> 00:07:09,289
fully trust o'clock and and the way we

00:07:01,159 --> 00:07:13,210
we implement the event lock in in us

00:07:09,289 --> 00:07:17,120
UEFI and environment is by if by copying

00:07:13,210 --> 00:07:19,789
the lock from day from one EF EI e fi

00:07:17,120 --> 00:07:23,360
table before calling exit boot services

00:07:19,789 --> 00:07:25,789
in deviant 1.2 there was there used to

00:07:23,360 --> 00:07:29,780
be a CPI table that could be used to get

00:07:25,789 --> 00:07:32,030
the clock but that doesn't exist on TPM

00:07:29,780 --> 00:07:38,990
2.0 so we have we have to use a

00:07:32,030 --> 00:07:43,460
different strategy okay so there there

00:07:38,990 --> 00:07:48,729
was also like a huge burner ability that

00:07:43,460 --> 00:07:55,669
was discovered by by jeremy bull of NCC

00:07:48,729 --> 00:07:58,219
this year and and and I basic idea is

00:07:55,669 --> 00:08:00,710
that that while while while while the

00:07:58,219 --> 00:08:03,380
chip makers have done lots of research

00:08:00,710 --> 00:08:07,330
and development on making making chip

00:08:03,380 --> 00:08:11,870
itself tamper resistant usually you can

00:08:07,330 --> 00:08:15,520
you can prove you can you can spy and

00:08:11,870 --> 00:08:20,449
tamper the boss where it's connected and

00:08:15,520 --> 00:08:24,020
and in many cases not all but but at

00:08:20,449 --> 00:08:26,360
least in some cases the the TPM is

00:08:24,020 --> 00:08:28,789
actually a axial accelerate

00:08:26,360 --> 00:08:30,259
daughterboard that that you can attach

00:08:28,789 --> 00:08:33,890
to the motherboard so it's it's

00:08:30,259 --> 00:08:36,560
relatively quick operation to at an

00:08:33,890 --> 00:08:43,139
interposer device between the tibia and

00:08:36,560 --> 00:08:49,420
the bus so it's a physical attack

00:08:43,139 --> 00:08:52,649
and and Jeremy wrote a white paper and

00:08:49,420 --> 00:08:55,329
and created a prototype device and

00:08:52,649 --> 00:08:59,589
associated software that can be found

00:08:55,329 --> 00:09:02,680
from github and and and it can be used

00:08:59,589 --> 00:09:12,940
to spy spoof and corrupt the traffic

00:09:02,680 --> 00:09:17,290
between host and TPM so we started to

00:09:12,940 --> 00:09:23,050
take some steps to protect against TPM

00:09:17,290 --> 00:09:27,220
genie we already have these these these

00:09:23,050 --> 00:09:30,579
validations for buffer overruns and

00:09:27,220 --> 00:09:38,649
under runs that is protection against

00:09:30,579 --> 00:09:41,079
corruption and and then there's a patch

00:09:38,649 --> 00:09:48,250
set that is currently under review by by

00:09:41,079 --> 00:09:51,639
James Bottomly and and and it the basic

00:09:48,250 --> 00:09:54,970
idea in that patch set is that that both

00:09:51,639 --> 00:10:00,670
TPM and the whole side create a public

00:09:54,970 --> 00:10:07,329
keeper and and then use encrypted salt

00:10:00,670 --> 00:10:11,550
to derive the session key and and and

00:10:07,329 --> 00:10:14,139
establish Esteli establish an

00:10:11,550 --> 00:10:17,980
authenticated and encrypted channel

00:10:14,139 --> 00:10:24,250
between the TBM and host by using aids

00:10:17,980 --> 00:10:26,589
mac session and that encrypted salt but

00:10:24,250 --> 00:10:33,880
yeah these patches are currently under

00:10:26,589 --> 00:10:38,740
review but III think they will be

00:10:33,880 --> 00:10:41,079
eventually merged as as they software

00:10:38,740 --> 00:10:44,680
pointed me in the hallway correctly this

00:10:41,079 --> 00:10:48,370
this is only in a way a partial solution

00:10:44,680 --> 00:10:53,459
because it only protects protects the

00:10:48,370 --> 00:10:56,060
bus between the TPM and holes but but

00:10:53,459 --> 00:10:58,700
potentially if you

00:10:56,060 --> 00:11:02,150
at that care good could have abilities

00:10:58,700 --> 00:11:06,430
with some some more advanced interposer

00:11:02,150 --> 00:11:11,450
device to also spy a spy the main memory

00:11:06,430 --> 00:11:14,180
which would end a endanger the whole

00:11:11,450 --> 00:11:16,220
whole site but but maybe in future we

00:11:14,180 --> 00:11:22,550
could use technologies like trust zone

00:11:16,220 --> 00:11:29,140
or or STX to solve that but this is this

00:11:22,550 --> 00:11:36,520
is right step forward anyway okay

00:11:29,140 --> 00:11:36,520
questions questions

00:11:43,030 --> 00:11:49,460
first thank you you just spoke about

00:11:46,520 --> 00:11:54,200
physical attacks against EPM yeah what I

00:11:49,460 --> 00:11:57,830
wanted to check if if there any support

00:11:54,200 --> 00:12:00,350
on the hardware level to clear the

00:11:57,830 --> 00:12:04,870
memory or to create the content of those

00:12:00,350 --> 00:12:04,870
chips if the box is physically opened

00:12:06,130 --> 00:12:14,150
you mean the TPM or you mean the TPM or

00:12:10,040 --> 00:12:16,220
the TPM for instance I I think depends

00:12:14,150 --> 00:12:18,380
on the chip but they are generally I

00:12:16,220 --> 00:12:25,670
think they should have ways to clear

00:12:18,380 --> 00:12:35,030
them okay so if I may expect on that

00:12:25,670 --> 00:12:36,980
area so okay thank you I guess I'm not

00:12:35,030 --> 00:12:39,920
entirely clear about the question are

00:12:36,980 --> 00:12:42,890
you concerned about the contents of the

00:12:39,920 --> 00:12:47,930
TPM if somebody opens the box is that

00:12:42,890 --> 00:12:50,030
the question yeah I'm asking the

00:12:47,930 --> 00:12:52,750
question there yeah well the TPM is

00:12:50,030 --> 00:12:55,910
self-contained so if you open the box I

00:12:52,750 --> 00:12:58,220
use the chip all the keys are inside the

00:12:55,910 --> 00:13:01,400
chip itself or inside a and in the

00:12:58,220 --> 00:13:01,970
integrated TPM and trust zone you open

00:13:01,400 --> 00:13:03,760
the box

00:13:01,970 --> 00:13:07,040
supposedly they have tamper protection

00:13:03,760 --> 00:13:09,050
like most of the discreet TPMS UD cap

00:13:07,040 --> 00:13:11,360
them and they clear there okay okay

00:13:09,050 --> 00:13:13,040
sorry I misunderstood the question last

00:13:11,360 --> 00:13:14,660
time okay yeah yeah yeah even if you

00:13:13,040 --> 00:13:17,060
open the box you cannot really really

00:13:14,660 --> 00:13:19,520
read anything outside of the TP and none

00:13:17,060 --> 00:13:22,250
of the keys are exposed to memories are

00:13:19,520 --> 00:13:24,110
all protected by the TPM itself there

00:13:22,250 --> 00:13:27,080
the chips have like extensive measures

00:13:24,110 --> 00:13:29,930
for for tamper protection but but in in

00:13:27,080 --> 00:13:32,450
depth was it in black hat or DEFCON for

00:13:29,930 --> 00:13:34,520
some of the tips this this this

00:13:32,450 --> 00:13:37,250
protection has been broken out but it's

00:13:34,520 --> 00:13:39,230
yeah they are constantly developing the

00:13:37,250 --> 00:13:41,120
manufacturers constantly developing

00:13:39,230 --> 00:13:44,330
better metal for for tamper protection

00:13:41,120 --> 00:13:46,280
yes and actually one thing I forgot to

00:13:44,330 --> 00:13:48,590
mention is please if horror asks

00:13:46,280 --> 00:13:50,750
questions introduce yourself just I

00:13:48,590 --> 00:13:52,430
think it will help networking and things

00:13:50,750 --> 00:13:53,750
that people know where to find you after

00:13:52,430 --> 00:13:57,860
if you want just

00:13:53,750 --> 00:13:59,990
please next question yeah this is Ben

00:13:57,860 --> 00:14:02,930
from Intel and I'm working on with

00:13:59,990 --> 00:14:05,330
relation for actually one out half of

00:14:02,930 --> 00:14:09,230
Attilan virtualization so my question is

00:14:05,330 --> 00:14:12,339
didn't know if there's an TPM compliance

00:14:09,230 --> 00:14:15,110
test suite so that for people who can

00:14:12,339 --> 00:14:19,610
write a software TV I'm from Rapid TV

00:14:15,110 --> 00:14:23,410
I'm root Altium then they can use kind

00:14:19,610 --> 00:14:27,440
of two tests unity to make sure our

00:14:23,410 --> 00:14:31,160
implementation comply with chicken total

00:14:27,440 --> 00:14:40,880
our specification as far as I know TCC

00:14:31,160 --> 00:14:43,399
has one but maybe maybe yes yes yes that

00:14:40,880 --> 00:14:46,790
yeah I I haven't used it myself but but

00:14:43,399 --> 00:14:53,300
I I know that one exists you can get it

00:14:46,790 --> 00:14:54,529
from TCG from this that's not trust

00:14:53,300 --> 00:14:57,700
computing yeah yes

00:14:54,529 --> 00:15:08,630
they provide the test test suite to I

00:14:57,700 --> 00:15:10,339
yes oh okay my name is range of

00:15:08,630 --> 00:15:12,980
de'longhi i'm working at site about

00:15:10,339 --> 00:15:15,920
costing we're hosting company which pays

00:15:12,980 --> 00:15:20,089
a lot of attention on our customer

00:15:15,920 --> 00:15:23,959
security so we are using TPMS and my

00:15:20,089 --> 00:15:26,209
specific question is why you keep all

00:15:23,959 --> 00:15:30,110
the source codes and all the tools and

00:15:26,209 --> 00:15:32,529
everything about TPMS closed it seems

00:15:30,110 --> 00:15:36,320
more like security through obscurity

00:15:32,529 --> 00:15:38,600
rather than making the software running

00:15:36,320 --> 00:15:44,770
inside the TPM stable and reviewed by

00:15:38,600 --> 00:15:44,770
the community why so can you

00:15:46,770 --> 00:15:51,780
why don't you share the source code with

00:15:49,440 --> 00:16:00,150
the community and took running inside

00:15:51,780 --> 00:16:02,250
the TPM and we don't know nobody knows

00:16:00,150 --> 00:16:06,210
all right you mean the TPM

00:16:02,250 --> 00:16:08,010
implementation itself yeah well that's a

00:16:06,210 --> 00:16:12,120
question that I really cannot answer

00:16:08,010 --> 00:16:17,130
because I just I I work on a different

00:16:12,120 --> 00:16:17,700
side I I develop support for for TPMS in

00:16:17,130 --> 00:16:19,800
Linux

00:16:17,700 --> 00:16:37,110
IIIi don't really have answered that

00:16:19,800 --> 00:16:41,660
question yeah okay is about the source

00:16:37,110 --> 00:16:41,660
code of truths on ring inside the TPM

00:16:44,150 --> 00:16:49,920
Maryland Linux security whatever and

00:16:47,400 --> 00:16:51,840
there are a ton of TPM implementations

00:16:49,920 --> 00:16:53,400
out there so it's really gonna depend on

00:16:51,840 --> 00:16:56,310
your system then you have to speak to

00:16:53,400 --> 00:16:57,720
them to try and poke whoever provided

00:16:56,310 --> 00:17:00,690
them with their TPM whether that's

00:16:57,720 --> 00:17:01,950
firmware or hardware and then get for

00:17:00,690 --> 00:17:04,829
the hardware informations defer the

00:17:01,950 --> 00:17:07,170
source code for that it's there yeah

00:17:04,829 --> 00:17:08,790
it's a standard there are many

00:17:07,170 --> 00:17:10,980
implementations out there even for even

00:17:08,790 --> 00:17:12,569
on the trustzone side there are tons of

00:17:10,980 --> 00:17:16,260
potential implementations of TPM that

00:17:12,569 --> 00:17:19,250
might be using different teas they might

00:17:16,260 --> 00:17:21,360
be custom-built for particular socks so

00:17:19,250 --> 00:17:22,740
you really need to talk to the system

00:17:21,360 --> 00:17:24,170
vendor to try and get that rather than

00:17:22,740 --> 00:17:27,470
the

00:17:24,170 --> 00:17:27,470
architecture vendors

00:17:34,379 --> 00:17:40,289
so best to look in the TPM

00:17:37,809 --> 00:17:47,070
implementation that Microsoft posted in

00:17:40,289 --> 00:17:49,779
public for the expect okay but they have

00:17:47,070 --> 00:17:52,210
specification they don't have specific

00:17:49,779 --> 00:17:56,169
implementation and actually there are so

00:17:52,210 --> 00:17:59,470
many versions and revisions of the TPM

00:17:56,169 --> 00:18:02,110
software running out there in the fields

00:17:59,470 --> 00:18:06,159
that actually nobody knows what has

00:18:02,110 --> 00:18:09,039
exactly inside his TPM and nobody knows

00:18:06,159 --> 00:18:16,299
his anybody from the community reviewed

00:18:09,039 --> 00:18:18,039
this called Vectron right I guess it's

00:18:16,299 --> 00:18:26,470
probably indeed a question to a vendor

00:18:18,039 --> 00:18:29,590
so I loo coins from Red Hat own I'm

00:18:26,470 --> 00:18:32,799
relatively new to TPM so this might be a

00:18:29,590 --> 00:18:34,389
rudimentary question but um I've been

00:18:32,799 --> 00:18:39,399
trying to learn more about the event log

00:18:34,389 --> 00:18:41,169
and specifically is this something

00:18:39,399 --> 00:18:44,559
that's generated in the kernel is it

00:18:41,169 --> 00:18:46,749
like a vendor specific implementation so

00:18:44,559 --> 00:18:49,240
they you know they populate these PCR

00:18:46,749 --> 00:18:51,940
entries and then create the event log ah

00:18:49,240 --> 00:18:53,980
I'm not able to track them it seems a

00:18:51,940 --> 00:18:57,850
bit elusive this event log how I can

00:18:53,980 --> 00:19:02,100
maybe generate one or or obtain one to

00:18:57,850 --> 00:19:05,499
be able to look at the measured boot

00:19:02,100 --> 00:19:08,409
yeah well it's it's generated by the

00:19:05,499 --> 00:19:10,240
firmware or BIOS I see I see

00:19:08,409 --> 00:19:14,110
and it's of course completely

00:19:10,240 --> 00:19:17,799
untrustworthy but but but since you can

00:19:14,110 --> 00:19:21,460
get the final measurements from the TPM

00:19:17,799 --> 00:19:24,700
and you can get them assigned to you you

00:19:21,460 --> 00:19:27,249
can you can then kind of replay it and

00:19:24,700 --> 00:19:29,019
check if if they match the final values

00:19:27,249 --> 00:19:34,840
and then you know what whether it's it's

00:19:29,019 --> 00:19:37,029
tamper or not understood yeah and so the

00:19:34,840 --> 00:19:39,279
BIOS manufacturers do they work with our

00:19:37,029 --> 00:19:42,429
various other vendors to know the the

00:19:39,279 --> 00:19:45,720
good signatures for a particular object

00:19:42,429 --> 00:19:47,310
or is it like a root of trust you

00:19:45,720 --> 00:19:49,410
have you have your initial measurement

00:19:47,310 --> 00:19:52,470
and then the other saw this might be

00:19:49,410 --> 00:19:54,600
simple TPM stuff perhaps or neater to

00:19:52,470 --> 00:19:58,680
read the manual but and find it quite

00:19:54,600 --> 00:20:01,980
hard to get the information I don't

00:19:58,680 --> 00:20:05,250
think there's there any publication of

00:20:01,980 --> 00:20:09,590
good measurements understood okay I

00:20:05,250 --> 00:20:09,590
think if I remember right

00:20:11,150 --> 00:20:16,640
Matthew Garrett was proposing something

00:20:14,190 --> 00:20:24,350
like this but I think was it photos

00:20:16,640 --> 00:20:28,380
always images I don't remember running

00:20:24,350 --> 00:20:32,070
so high it Cole Daniel - um one question

00:20:28,380 --> 00:20:35,310
you mentioned TPM genie coming out last

00:20:32,070 --> 00:20:37,740
year I think or one year ago roughly the

00:20:35,310 --> 00:20:40,470
talks about detecting the bus to

00:20:37,740 --> 00:20:43,890
external TPMS and publications about

00:20:40,470 --> 00:20:45,900
that have been existing since more than

00:20:43,890 --> 00:20:48,930
three years ago so what took you so long

00:20:45,900 --> 00:20:51,990
to address this it's been three years

00:20:48,930 --> 00:20:53,850
and only when somebody starts releasing

00:20:51,990 --> 00:20:56,310
hardware people start to care about the

00:20:53,850 --> 00:21:01,650
attack that doesn't really sound secure

00:20:56,310 --> 00:21:03,660
to me so I'm not sure if I completely

00:21:01,650 --> 00:21:05,040
understood the question so do you do you

00:21:03,660 --> 00:21:08,220
think that the measure that we are

00:21:05,040 --> 00:21:09,860
taking do not solve the problem or no I

00:21:08,220 --> 00:21:14,610
think there are two years too late

00:21:09,860 --> 00:21:16,590
because well the countermeasures only

00:21:14,610 --> 00:21:19,320
started being implemented after release

00:21:16,590 --> 00:21:22,920
of the TPM genie that the attack itself

00:21:19,320 --> 00:21:26,010
attacking the bus has been public more

00:21:22,920 --> 00:21:28,380
than three years ago so what happened in

00:21:26,010 --> 00:21:32,460
the two years between somebody published

00:21:28,380 --> 00:21:35,970
possible attacks and somebody released

00:21:32,460 --> 00:21:40,560
the TPM genie so apparently nobody cared

00:21:35,970 --> 00:21:41,700
I remain unless carrying this I don't

00:21:40,560 --> 00:21:43,770
know if that was a scientific

00:21:41,700 --> 00:21:45,980
publication but some meaningless carried

00:21:43,770 --> 00:21:45,980
this

00:21:50,450 --> 00:21:58,789
yeah well well well well the core ups

00:21:54,749 --> 00:22:02,519
and protections were landed like Oh like

00:21:58,789 --> 00:22:07,559
before before the conference where we're

00:22:02,519 --> 00:22:09,869
TPM Cheney was represented the spoofing

00:22:07,559 --> 00:22:12,330
site well it's it's a non-trivial

00:22:09,869 --> 00:22:16,259
problem it's a it just has taken this

00:22:12,330 --> 00:22:19,200
time to find find a solution that that

00:22:16,259 --> 00:22:24,779
all the parties can agree with so it it

00:22:19,200 --> 00:22:26,309
just has been slow oh I'm Monty Wiseman

00:22:24,779 --> 00:22:28,399
by the way from General Electric I'll

00:22:26,309 --> 00:22:33,389
answer the question about the event log

00:22:28,399 --> 00:22:36,710
NIST has a draft out there 800 - 155

00:22:33,389 --> 00:22:39,210
which is going to it's a draft right now

00:22:36,710 --> 00:22:41,399
TCG is currently working with Ness TCG

00:22:39,210 --> 00:22:43,320
the organization that defines the TPM is

00:22:41,399 --> 00:22:46,529
working on revising and making that

00:22:43,320 --> 00:22:49,559
draft final and producing a requirement

00:22:46,529 --> 00:22:51,989
for the OEMs to publish the expected

00:22:49,559 --> 00:22:53,909
event logs for their firmware and that's

00:22:51,989 --> 00:23:01,549
expected at the end of this year may be

00:22:53,909 --> 00:23:01,549
beginning - next year what questions

00:23:09,559 --> 00:23:16,559
so the thing about this attacked against

00:23:13,440 --> 00:23:20,670
the TPM chip was that Linux Linux is

00:23:16,559 --> 00:23:23,790
currently Linux default installations

00:23:20,670 --> 00:23:27,420
from distributions don't use TPM for

00:23:23,790 --> 00:23:29,400
anything so attacking a DBM chip begins

00:23:27,420 --> 00:23:31,380
that occur nothing because it's just

00:23:29,400 --> 00:23:33,929
easier to attack the PC or bus or

00:23:31,380 --> 00:23:38,520
whatever the bus is the ROA Linux system

00:23:33,929 --> 00:23:41,070
and what I like to have noise when the

00:23:38,520 --> 00:23:43,440
windows will start actually using the

00:23:41,070 --> 00:23:47,390
TPM for something useful like providing

00:23:43,440 --> 00:23:50,010
encryption keys for hard drives or

00:23:47,390 --> 00:23:52,020
validation system installation other

00:23:50,010 --> 00:23:54,750
than just the kernel or modulus because

00:23:52,020 --> 00:23:57,390
the current Linux secure abort system is

00:23:54,750 --> 00:24:02,100
just useless it gains you nothing

00:23:57,390 --> 00:24:06,090
it gives you no security well it's being

00:24:02,100 --> 00:24:08,820
used but none but not not that much in

00:24:06,090 --> 00:24:11,580
general-purpose PC computing needs which

00:24:08,820 --> 00:24:14,040
widely using data centers it's it's

00:24:11,580 --> 00:24:17,220
using well it's reducing Chrome OS so

00:24:14,040 --> 00:24:19,410
but yeah well well yeah that's true that

00:24:17,220 --> 00:24:24,179
the uses are more like application

00:24:19,410 --> 00:24:29,370
specific at the moment so it's it's more

00:24:24,179 --> 00:24:32,580
more use in industrial level than than

00:24:29,370 --> 00:24:35,000
in in consumer level Windows BitLocker

00:24:32,580 --> 00:24:37,410
uses the TPM by default that it's there

00:24:35,000 --> 00:24:40,559
that's the default configuration of the

00:24:37,410 --> 00:24:42,240
TPM there is the silver the disk full

00:24:40,559 --> 00:24:44,429
disk encryption and the walker inside

00:24:42,240 --> 00:24:50,870
the TPM and that was the original use

00:24:44,429 --> 00:24:50,870
case questions

00:24:55,490 --> 00:24:59,990
there are no more questions I guess

00:24:57,230 --> 00:25:01,070
we'll have to first think the arc of a

00:24:59,990 --> 00:25:04,460
tool

00:25:01,070 --> 00:25:04,460

YouTube URL: https://www.youtube.com/watch?v=PQ-xh5M_neY


