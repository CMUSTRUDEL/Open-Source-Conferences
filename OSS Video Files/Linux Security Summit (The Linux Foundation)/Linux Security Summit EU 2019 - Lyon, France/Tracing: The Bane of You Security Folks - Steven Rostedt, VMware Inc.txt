Title: Tracing: The Bane of You Security Folks - Steven Rostedt, VMware Inc
Publication date: 2019-11-04
Playlist: Linux Security Summit EU 2019 - Lyon, France
Description: 
	Tracing: The Bane of You Security Folks - Steven Rostedt, VMware Inc
Forum 1

Speakers: Steven Rostedt
Tracing has the opposite purpose of security. Security tries to hide secrets, and the less the Linux kernel allows user applications know, the better the security. Tracing on the other hand, tries to give as much information as it can to the user. It should only give this information to those that needs it, but even determining that conflicts many times with the security ideas. This talk will talk a bit about what tracing is trying to show, and to whom it is showing it to. It will discuss tactics that are done that Linux kernel security folks should really be aware of. As tracing tries to be as low overhead when not enabled, it will take on tricks like live text modification, and redirecting calls. Tracing does everything a root kit author loves. And this talk will tell you what you need to know about that.
Captions: 
	                              remember remember security in November                               when external tracing and canoe trot I                               know of no reason why when external                               tracing should ever be forgot                               Stephen Gloucester and his companions                               did the scheme contrived to blow Linux                               kernel bugs up or alive                                          events laid below to prove the integer                               overflow but by God's providence the bug                                didn't catch the regular expression had                                found a match out there in a bite to                                minister of Ulster length above                                         you make - better for tracing and the                                worst for you and not sort enough sort                                to crack the port denial of service to                                choke it a pint of beer to wash it down                                a jolly good Spectre to melt it down                                hallo boys hello boys let the butter                                ring boys little boys God's ain't the                                tomb hit                                [Applause]                                [Applause]                                it's always fun to give talks on                                Halloween                                okay I'm see frosted I work for VMware                                this is actually something I've been                                wanting to do for an awful long time is                                there's a lot of things that the Linux                                kernel does and site tracing and and                                security and there's a lot of things                                that people need to know about so that's                                why I said tracing the bane of your                                security folks so I always like to you                                know let's Reeve go back I see a lot of                                people who are in security and sometimes                                I think people I get too focused on                                things and they don't take a step back                                to say what alright what's your goal                                what are you really trying to do I mean                                I think the number one thing is protect                                privacy or data                                I think that's number one you don't want                                people to find anything out on your                                computer that you don't want bank                                accounts whatnot embarrassing things but                                still you don't the whole idea about                                security is probably the number one                                thing we've said is probably to protect                                the data I think that's I think people                                would agree at that number to also kind                                protecting of data is to prevent                                destruction of the data and one is                                seeing data and the other one is                                destruction of data and we know about                                those you know crypto ransoms and all                                those wonderful things that people love                                to do keep services running denial                                service we try to prevent that you know                                so people can get their work done their                                job done and also we don't want to try                                to prevent people from malware so steps                                that everyone here should know about                                that we take you know we have file                                permissions read write execute                                capabilities passwords for logging in to                                execute codes who do all so personally I                                hate sudo I never do sudo I do I only                                actually aimless su I switch to root do                                Americal I don't give any permission to                                anything else but root I don't know I                                really don't see the benefit of sudo                                it's just me keys I love the keys I try                                to do especially I can with keys where                                it makes sense and protect passphrases                                on those keys we also have isolation                                obviously the page tables kernel memory                                space and user space when the hardware                                works                                there's isolation there the memory                                sandbox is                                machines containers and yadda-yadda                                Hardeen this is where we start I'm                                starting to get more into the fun things                                we all know code is buggy yes your code                                is - so Harding my understanding of it                                is the fact that what you do is we try                                to make the kernel still be able to                                protect in case of a buck if something                                was able to someone can break into                                something we they still won't have the                                ability to cause harm or to see data                                that they shouldn't be seen so we do                                various things you have the mandatory                                access control the stop being the what's                                called randomizing addresses so when the                                kernel boots up we there's time service                                randomize where it actually loads                                because one of the things is if you know                                where the kernel location is if there's                                 a vulnerability somewhere because                                 there's a bug we know there's a bug in                                 the kernel it's much harder to get it if                                 you don't know where exactly that code                                 is and then of course we have the                                 lockdown features I'm all for locking                                 down modules you know once you load your                                 modules boom turn it off don't ever let                                 a module be loaded because what's your                                 if you could load a module if anyone                                 gets to the point where the Golota                                 module York machine is compromised so                                 you could do anything you want it's very                                 easy and so we also prevent code                                 modification we do have runtime a lot of                                 runtime code modifications I'll talk                                 about that and also sometimes lockdown                                 features will not let you see any                                 addresses as route but also recently the                                 lockdown features disable tracing what                                 happens if your lockdown is broken this                                 is one of my fears I'm like how do you                                 know if your machine is compromised                                 because once you lock down everything                                 you've locked down yourself - it's tying                                 your hands behind your back and recently                                 the other day actually a couple weeks                                 ago I had my main machines my work saved                                 from machine one CPU started going full                                 what her % CPU usage it was just boom I                                 was like what's going on just out of the                                 blue the CPU just started going that                                 crazy and I did a PS and it was a K                                 worker thread I'm like okay why is a K                                 worker thread going                                     how do you how do you tell that if I did                                 not have tracing how would I know I                                 rebooted the box boot it up everything                                 was fine and then suddenly bump and went                                 up                                                                   enabled tracing and sure enough it                                 showed me a USB device I found out my                                 USB controller had a little bug in it                                 where for some reason it was actually I                                 was when I did backups my hardware or                                 though USB hard drive external hardware                                 drive I had a something if you would                                 stress it too much it got to a point                                 where a bit when it flipped so it                                 basically said hey do something and what                                 I was done is that do it again when it's                                 done does that do it again the bit never                                 cleared and it was actually a bug in the                                 hardware he was a faulty a USB device                                 the hard drive was kind of faulting and                                 it was causing this spin but without                                 tracing how would I know how would I                                 know that someone's not on my machine                                 doing something and using the K workers                                 like a bug in the kernel K worker D so                                 lockdown can be dangerous if you asked                                 me I like to use nmap as my example                                 because it's a great tool for admins                                 because you can scan ports to see what's                                 open but it's also a great tool for                                 attackers because you get scan ports and                                 see what's open                                 so conflicting agendas                                 I'm from the real-time world that's                                 where I start my kernel development was                                 doing real time and it was always funny                                 because people always used to think that                                 real time meant real fast I said no it's                                 the opposite I always say we have the                                 fastest worst case scenario or fastest                                 worst case times if you want to know                                 what the if you need a fast worst-case                                 time                                 real-time is way to go because nothing                                 else will beat it but general aspects                                 there's a lot of throughput but every                                 time you go through put you find out                                 that it kills determinism and although                                 it's funny because now if you look at                                 the specter the those little same little                                 tricks that kill determinism actually                                 make it more deterministic to see where                                 things are or they've see what's going                                 on which is how those are used it's kind                                 of funny so you folks the security folks                                 here                                 should also know the two big balance of                                 easy use of security the more secure you                                 make it usually it gets more complex and                                 the more complex it becomes actually the                                 less secure it becomes so I always said                                 the best security system is always the                                 easiest one to use but then again when                                 you make it real easy use and you have                                 some sort of it makes it more much                                 harder to do those other cases so I                                 always like to say you know the                                 conflicting agenda is security versus                                 security there are some things are                                 secure that will actually make other                                 things insecure and vice-versa                                 so we don't want others to have control                                 but we want control for ourselves and we                                 want to see what's happening so first                                 thing I want to tell people I was                                 actually talking to my colleague and I                                 said security folks must know tracing at                                 first like well we have a security guy I                                 don't really know tracing all this and                                 I'm like no that's because you don't                                 know you need to know you need to know                                 what capabilities are on the machine                                 you're looking at to see things and                                 there's a lot out there and also one of                                 the things we want to do is be able to                                 monitor Tracy and I know what Tracy is                                 doing the function tracer my favorite of                                 the tracers it's probably the most                                 powerful of the Tracy and it's it's not                                 just function tracing it actually is the                                 way to hook into any function when I                                 first wrote I did a talk I don't                                 remember exactly where it was but when I                                 first introduced the F entry where you                                 could actually put a know up at the                                 beginning of every single function in                                 the kernel and patch that to jump to                                 something else I said you could actually                                 hijack that function that's great for                                 two things now this will actually allow                                 you to do live kernel patching and will                                 also be great for rootkits but right now                                 it's used that just for function tracing                                 z                                                                        use it I said it's used by live kernel                                 patching how many people didn't know                                 this did you do everyone know that live                                 kernel patching was used our function                                 tracing was used by it and this is how                                 it works                                 say you have a buggy function here I                                 just pick schedule we have a we know                                 there's a no op at the beginning of the                                 function that we switch to call this F                                 trace trampoline the F trace trampoline                                 well then                                 because it's a co-op it requires it will                                 save some registers so be safe to call C                                 code and not mess up the function that                                 came from and although I'd be at the                                 beginning of the function they're                                 actually they really doesn't need to do                                 that much so then it will call the                                 kernel patch function because the kernel                                 patch guy will register with F trace F                                 trace will say okay I'm gonna attach to                                 schedule and call you so it jumps to the                                 triplane that calls directly to the                                 kernel patch curl package gets a it                                 saves all the registers and passes the                                 regs of PT regs to the kernel patch and                                 then one of those registers is the                                 instruction pointer so Colonel reg are                                 the kernel patch can now change the                                 instruction pointer and then return back                                 to the F trace trampoline which restores                                 everything and puts back the instruction                                 pointer where it would have been where                                 if it did the return without modifying                                 the instruction pointer the returned                                 would have gone back to this good normal                                 scheduler but instead it jumps to the                                 new fixed schedulers so every time the                                 buggy scheduler hits goes to the F train                                 plane that jumps and sends it to the new                                 fix so we have good fix code there was a                                 little problem with this though this                                 during kernel recipes last year it was                                 last year yeah GG Cocina                                 was talking about K graph the Susie's                                 version of revive kernel patching and at                                 the end of this talk I raised my hand it                                 says what are you doing what do you do                                 about F trace enable and you said what                                 and this is where I say this is why you                                 really need to know about things cuz it                                 just dawned on me by saying that I can                                 oh I just forgot we had this global                                 switch that you could flip and it will                                 turn off tracing it will never make that                                 call it'll be a no op actually it's a                                 bug it shoulda been a no op it there but                                 bugging the slides which means you're                                 calling the bug if I flipped                                         have my kernel all patched with all                                 these updates to fixes and then I say                                 zero and now it's back to debug it's all                                 buggy again after they knew about this                                 we're working out a way we have this                                 permanent flag that the permanent flag                                 set the zero you won't be able to                                 disable it or if it's already zero you                                 and you put a permanent flag on                                 registering the function will give you                                 error tracing is a name                                 right now you have to turn it on and do                                 that so the patches are out there right                                 now to go in it's I think it's so maybe                                 it's very it's my going the next merge                                 window and probably back board and                                 everything but like I said this is                                 something that we need to look at and                                 like life kernel patching is something                                 you could say whoa life grow up I might                                 want to turn off live kernel patching                                 because Co live kernel patching means                                 people couldn't change your machine to                                 do something bad and you not know it so                                 but it also fix your machine when you                                 had a bug in it with you can't reboot it                                 so if you're in a case where you can't                                 reboot your machine you might wanna live                                 kernel patching to be able to fix things                                 but then again when you have like ground                                 patching on so what do I build to break                                 things tech spoke how many people are                                 familiar of textbook few okay how many                                 people are focused on kernel the kernel                                 security all those same people okay                                 tech spoke is a way we modify memory K                                 probes and other aspects it came in                                 after F trace F trace was the first one                                 to do it and it doesn't use K the                                 textbook yeah and I'll talk about that                                 but the way text poke works                                 it's used by K probes and jump labels                                 and I'll talk about jump labels right                                 now anyone here who's familiar with the                                 static branch likely static branch                                 unlikely yes good here's all the way it                                 goes so if you go in the kernel and you                                 see static branch likely and static                                 branch unlikely and this is really great                                 for things but because this is                                 unaffected by the branch any branch                                 prediction but it's also there's no                                 conditional jump when you see these                                 things you might say well it's a little                                 bit already every time you put a if                                 statement in code you've actually slowed                                 it down slightly because if you know the                                 processors especially if you're getting                                 rid of branch prediction if there's                                 anything reason why branch prediction                                 prediction good diction exists is                                 because of the slowdown of a branch and                                 if statements are branches and every                                 time you add a branch or if you've now                                 slowed it down so cuz the speculative                                 going up when it hits a branch it's got                                 to pick one way or another and it's that                                 whole process is expensive so static                                 branch likely in static branch are                                 unlikely or for cases where it's always                                 going to be one way                                 usually a user will need to switch it so                                 basically if I want this enabled like                                 tracing is a perfect example                                 tracing uses this all the time because                                 if you're either tracing or you're not                                 Tracy do not do it it's not going to be                                 constantly making the decision so when                                 you enable tracing we do the switch and                                 a way it works is this if I disassembled                                 and this is actually it's funny because                                 I just randomly I never usually                                 everything's static branch unlikely                                 because that's actually the faster path                                 the status print static branch likely is                                 very is not not very likely to be seen                                 in aw reason why I put it there by the                                 way there's actually a this is                                 encapsulated so this is a actually the                                 exact code in the kernel because the                                 static branch likely can be unlikely as                                 well depending on configuration but my                                 configuration I saw this and if you look                                 at if you disassemble the code there is                                 no branch there is no check you'll see a                                 jump the very very first thing it does                                 comes in is a jump and the second one                                 that you'll see is a no op so it either                                 always jumps or always doesn't know up                                 tech spoke so here I have the jump and                                 no op off to the right and you have the                                 page tables you have a page table if                                 everyone knows how like for those that                                 I'm not now I'm assuming everyone here                                 is a kernel developer or you know no                                 systems but page tables is the way you                                 did the abstraction of from or a virtual                                 address abstraction so when you go to                                 write to an address it will look at the                                 first few bits of the of your address                                 and it'll go to this one table and then                                 find the next few bits to index into the                                 next table and next wee bits the index                                 the next table until you finally                                 actually get to the page and the last                                 like you know                                                          on how big your pages are it'll jump                                 there that's when we have TLB is to make                                 it faster but let's say the whole kernel                                 is mapped with                                                      there so this is one page table and we                                 want to modify something but it's                                 read-only and executable we don't want                                 to make executable code write read write                                 because that could be bad so what we do                                 is we create in the fixed section we                                 create we add some more page tables with                                 the protection bits being read write and                                 know execute loop but points to the                                 exact same location that we want to                                 touch we make our modification then                                 remove it that's how text poke works                                 the function trace around my old laptop                                 that I brought here because my the one                                 my laptop on Thursday broke that's why                                 I'm using someone else's laptop by the                                 way I have                                                            thar being traced that can't be traced                                 when I enable function tracing it's                                 going to modify over                                                     the kernel to make it trace you can see                                 it yourself by doing that command or on                                 yeah if you go to this kernel tracing                                 versus kernel debug tracing and you'll                                 see a file called available filter                                 functions that's all the functions that                                 can be traced this this machine had                                                                         but all text is read only so how does it                                 do this                                 and it might only create page tables all                                 over the place to do this so if you look                                 at the actual code you'll see this F                                 trace arc code modified prepare then                                 you'll see arc F trace update code and                                 then you'll see F trace our code                                 modified post-process and if you go to                                 x                                                                      convert all text in the entire kernel to                                 read write make our meta fication and                                 then make it to read only peter Zylstra                                 who's not here today he's in the process                                 of making gold to make sure that                                 everything ever happens and he's trying                                 to get rid of this by what's called and                                 the problem is like I said the text poke                                 the problem the text poke was the fact                                 that it was it's one page at a time                                 so Daniel Bristow who's Elvis he came                                 here and out there know they're doing                                 the real-time summit which I am I going                                 to at the end of this the real-time                                 summit he Daniel did the tech spoke                                 batch where he could pass a large number                                 of addresses and it will use less pages                                 to map those locations and make it                                 easier to do this Peters else is working                                 to change all of F trace it's still a                                 lot more it's still case because we                                 found a lot of bugs we found a lot of                                 things that's we're still working on as                                 you would expect but the gold is the                                 goal that we're trying to do is to make                                 sure that execute executable code never                                 becomes writable                                 once it's executable it's read only ever                                 [Music]                                 okay the Berkeley packet filter that was                                 made for high-speed custom packet                                 filtering it uses a just-in-time                                 compiler it's actually a pretty awesome                                 utility to think about it the concept of                                 BPF is really amazing a lot of people                                 DTrace does some things like that for                                 that as well and deep probes and there's                                 been a lot of other work on things like                                 this but for most security point of view                                 you didn't see that the the extended                                 berkeley packet filter does a little bit                                 more because you know BPF was written                                 for network filtering and it really                                 didn't have much security concerns                                 actually was much better it made things                                 really really fast you could filter on                                 things much more complex and speed so                                 the bed it's why these things the better                                 something got at filtering the better it                                 became as a security feature but then                                 you become to make it extend it and then                                 suddenly hmm maybe it's gonna be a                                 little bit worse but it allows                                 just-in-time compiling for more than                                 just packet filtering you can attach it                                 to a trace point into actual code you                                 can monitor stuff you could look at                                 things it's there everyone wants to                                 figure out how can we use heat BEP PF                                 for non privileged users and that just                                 keeps me up at night                                 so during the text poke work Alex say                                 gates that asked me when does Peters                                 ultras patches come in because I'm                                 working on something on top of this and                                 I said what exactly are you working on                                 he said well I tried to use your the                                 like the K probes work and he said                                 because to modify the or not to modify                                 but to get the parameters of a function                                 I want to get the parameters of any                                 function in the kernel and I want to are                                 to do that I have to you have that store                                 of registers and you store a lot of                                 registers and what we did our benchmarks                                 it's way too slow because it's storing a                                 lot more than we don't need all the                                 stuff that the F trace handler does so                                 basically he's going to circumvent F                                 trace and take over that no op because                                 right here what this is the way that it                                 would be he would do it with the                                 registers if I go there you'll notice                                 that the F traced collar comes in his                                 function tray so if I'm sure he's the                                 stores all the registers and then he                                 wants the parameters but no he wants                                 this he wants to be able to call like I                                 said he could actually call a function                                 straight without any trampoline just I                                 just want the parameters put them in the                                 past and it like if I if the EPF                                 function Maps has the same type of                                 parameters as do sis open you could get                                 everything you have                                 do whatever you want it go back of                                 course you need some trampoline you                                 might have to store the parameters                                 inside a trampoline or something but he                                 said he want to circumvent this and                                 that's scared the heck out of me it was                                 at night I was having back and forth                                 with him as I went to bed and now you                                 say you want to circumvent the the F                                 trace which scared me which means                                 there's only another entire                                 implementation of code modification in                                 the kernel and I'm sure you security you                                 guys really love to hear that because                                 the more you have the more likely to go                                 wrong more that could be used to hack                                 and more to write and there's no                                 tracking of what you could be modified                                 but does have trace do that                                 yes when live kernel patching came out                                 they wanted to do something similar they                                 wanted to certain PF trace for something                                 so why can't you just do a direct jump                                 and I said no and a big reason why is                                 because we have I have monitoring I like                                 to know what's been modified and this is                                 why I've been wanting I never I've never                                 done I realized reason why is because                                 this has been mostly for debugging                                 purposes I've always had this on for                                 debugging purses purposes but by now I                                 realize this is a great way to know what                                 is happening on your computer if you go                                 into the cistern L tray scene and you                                 see a file called enable two functions                                 like I said I created this for debugging                                 the the handling of the function tracing                                 is this huge table that you'll see on                                 boot-up I'm working on shrinking it even                                 more so but it has every single of those                                                                                                          descripted it's a                                                        each of those functions and it has state                                 as flags as stuff and if something goes                                 wrong f trace crashes and your                                 commission could crash too but usually                                 that f trace will stop and to debug this                                 I had this enabled this enable functions                                 thing and I found it's really really                                 powerful so if you were to enable say if                                 I were going to this kernel tracing and                                 data do irq set F trace filter so I only                                 want to trace to our Q function say I                                 want to start tracing F trace or                                 function or enable F trace you'll see                                 this first thing it does it tells you                                 the function that's been modified and                                 touched the next one tells you how many                                 callbacks are going to it this one                                 actually F trace creates itself a                                 dynamic Verte it creates a trampoline it                                 actually allocates defines a code to                                 only see which means there's a                                 there's a trampoline right there or                                 function it tells you if the                                 architecture supports it it will it will                                 actually scan that trampoline it will                                 actually look in the memory and say this                                 is what this thing calls and tell you                                 that that it says this guy calls                                 this function function trace call and                                 then it looks at the descriptor that's                                 registered at the what's registered to                                 that function and it's the same thing                                 which it should be if it's not you might                                 want to investigate it so if I enable a                                 kay probe which I said does full                                 registration and it Mata and it can                                 modify the IP as well you'll notice                                 there's an R and a I our means that it's                                 a full register it's this functions                                 saving all regs every time and the other                                 one says it this function can change as                                 a possibility it could change the                                 instruction pointer it asks it has a                                 flag set that saying I might change the                                 instruction pointer on you if you did                                 all live kernel patching would have that                                 I set K probes were working on not                                 always right now I did it by default cuz                                 we said K probes should do it but now                                 we're some of your muscles we're working                                 in a way of saying well we don't want                                 all K probes to do this just you have to                                 have so you have to ask for it so it                                 only happens if you ask for it reason                                 why actually the reason why we're doing                                 that is because if you have live kernel                                 patching on you can't you can't put a K                                 probe on it because you can only have                                 one modify the IP address if you enable                                 to I right now I'm now I have a K probe                                 and a function tracing on the scheduler                                 so you'll see there's two two registered                                 for it and there's no trampoline                                 actually the the call goes directly to                                 my it uses the actually default FJ                                 there's no if it's a default F trace                                 trampoline which means it jumps straight                                 to the actual code that's compiled in                                 the kernel is not dynamic you won't see                                 any trampoline it's just right there and                                 it's and this guy's calling the F trace                                 ops list function which actually                                 iterates at all to call iterators will                                 go through the to look at the two guys                                 and say do you want to be called do you                                 want to be called so what happened was                                 when I talked with Alexi and had this                                 fight and I went to bed I woke up at                                                                                                       don't bother me I'm going downstairs and                                 I have to code                                 I had it's one of the things I solved                                 something in my head or an item amazing                                 there's one thing I woke up I'm like I                                 have a solution for like Lexi's problems                                 he doesn't want this so I ran downstairs                                 from                                                                   did he came up with registered F trace                                 direct it takes a function address and a                                 callback address it only allows one                                 so if one's already been registered it                                 won't do anything else and you could                                 still attach function probes but the                                 Lexi's thing is if he took if he took                                 over that M count you couldn't use F                                 trace on that guy who couldn't do K                                 probes on that guy it would only be EB                                 PF only and also he said I'll add                                 another no op for you I'm like no and                                 it's still tracked so I went in for to                                 test this my codes buggy I only did this                                 in                                                                   before before Aleksei did any more work                                 I was a here can this work and he                                 actually said yes this works for me so                                 thank you it's it's there's things I                                 have to fix on it it's still buggy but                                 it does this so I went into trace events                                 sample code and I added this to it and I                                 just I exported do raw spinlock because                                 it's not exported and running this in a                                 module so I went into the kernel said                                 you know export GPL simple export simple                                 Gmail so I had it available and then I                                 went and modified this guy I added my                                 direct function and I created myself a                                 little trampoline all my trampoline does                                 it saves does it puts in a little stack                                 pointer and then calls my function it                                 pushes its only save the first parameter                                 because I know that my direct function                                 only cares about the first parameter so                                 it's gonna save the first parameter and                                 then it's what I call my oh yeah sorry                                 do spinlock irq cares about the first                                 parameter so I saved the first parameter                                 and then I call my direct function from                                 that trampoline and then I popped the                                 first director and I go I pop the first                                 parameter so when it goes back to run do                                 raw spin lock the it still gets the same                                 lock and I just put that in there                                 and then this is all I did to register                                 it I just said return register fj's                                 direct you know I passed in the do Ross                                 pin lock and I said here's my and                                 then I unregistered it what's I like                                 about this and this is why like I said I                                 knocked the the live kernel patching                                 version and this is why I'm pushing and                                 I hope I have support here that EPF uses                                 this facility because when you do this                                 and you can't enable functions you could                                 see I added a new letter there let's see                                 is it D for direct and what it's calling                                 so conclusion all twos all tools could                                 be good and bad sometimes shutting them                                 off could be do more harm than good and                                 the key to this is always stay one step                                 ahead look around ask people talk to                                 people say hey is there anything in here                                 that could mess me up and like I said                                 live kernel patching didn't know about                                 that switch we're wearing a fixer I was                                 like you know you know about this I                                 figured someone know about it and I                                 thought they fixed it and I didn't                                 realize that no one even knew about it                                 and that's why I'm also bringing out I                                 don't think anyone knows about this                                 enable functions directory so really the                                 key is knowing what's there and since                                 the landscapes so huge you need help                                 thank you                                 so questions could you oh I did to my                                 salty                                 yes thanks floors good is it possible to                                 modify using em trace modify the                                 function which shows you this statistics                                 of what is traced the is this part of                                 the FDA's directory which has other                                 no-ops turned off the directory there's                                 two ways to this there's basically we                                 have two ways of three ways of stopping                                 F trace from touching a function there's                                 a annotation called no trace if you go                                 in the kernel you'll see no trace no                                 trace no trace and that means this it                                 will not put that know up there and in F                                 trace will never see it the second way                                 of stopping F trace is profile you could                                 do see Flags remove and then F trace                                 Flags it's in there some like that and                                 then that will remove it for a file                                 the third ways you can remove F trace                                 from entire directory and that's by                                 changing the K Flags to something else                                 so the F trace directory has all a                                 tracing turned off so no it can't even                                 it can't see that function and some and                                 sometimes I want to debug it like hot                                 crap I wish I did that's why I have my                                 blog dev I talked that lwn talked about                                 I actually used my log dev to debug them                                 tracing but that's that's out a tree and                                 yeah that's the I have to compile it it                                 things good idea and second question                                 what do you do if you have too much                                 parameters and not enough registers so                                 some of them are no the the what's                                 called the well it's up to you right now                                 most functions six functions or six                                 parameters is what we try to do but if                                 you have a function with a lot of                                 parameters we do have ways of storing                                 you have to use the stack so if you want                                 to do some like this you've got it's you                                 it's basically that read the direct one                                 is up to you it doesn't affect me it's                                 its effect to I just give you an option                                 of jump into a trampoline if you need to                                 get all like ten parameters you have to                                 store find the stack and load it or                                 actually just jump to it it'll be on the                                 stack you just have to make sure it's                                 saved there and just restored probably                                 you don't modify it so it's yeah                                 any other questions                                 no let's hang a speaker again yeah thank                                 you very much                                 [Applause]                                 [Music]
YouTube URL: https://www.youtube.com/watch?v=zUYCXBlUcYI


