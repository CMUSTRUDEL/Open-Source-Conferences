Title: OpenPOWER: Host OS (Linux Kernel) Secure Boot Key Management - Nayna Jain, IBM
Publication date: 2019-11-04
Playlist: Linux Security Summit EU 2019 - Lyon, France
Description: 
	OpenPOWER: Host OS (Linux Kernel) Secure Boot Key Management - Nayna Jain, IBM
Forum 1

Speakers: Nayna Jain
OpenPOWER Secure Boot provides an open and flexible model to manage keys that are used by Linux based bootloader to further verify and load the Host Operating System(Linux Kernel). The main features of this model are:
- A pluggable architecture to support different key hierarchies and update mechanisms based on vendorsâ€™ choice.
- A choice for vendors to preload the OS or sysadmins to reinstall the OS in the secureboot state.

This talk discusses the end-to-end solution of OpenPOWER Host OS Secure Boot Key Management which involves managing ownership and authority over the keys, authenticated updates, securing the stored keys, blacklisting and compatibility for the userspace tools. The design spans across the firmware, kernel and userspace. The firmware and kernel patches, which also includes their interfaces, are being actively reviewed by the community.
Captions: 
	                              so hi everyone good morning I'm Nana Jay                               and I work for IBM Linux Technology                               Center to                                                             the security effort for open power                               systems today the topic is open path                               secure boot host OSP management this is                               a disclaimer just father I will just                               flash it for a second or two and then                               you can just go ahead okay the agenda is                                we start with some background then we                                will get into the high-level overview                                and actually the details after that and                                then there's a debug in recovery thing                                and finally we'll end with family and                                patches status I would like to give the                                acknowledgments to my whole IBM LTC                                security team who had been working and                                contributing to this work and our                                collaboration with IBM security research                                group and IBM enterprise power security                                team okay so let's get it started                                well there have been enough of                                presentations over the secure boot                                around the years so I'll just give it                                some basic definition to get it started                                here so the secure boot it actually                                implies it only authenticated firmware                                and operating system are allowed to be                                executed at all times so it allows                                authenticated from where that means                                there are two things which are involved                                as part of secure boot one is signature                                verification and another is key                                management and this key manage these key                                management is required to do two handled                                keys which I used to verify the                                signatures the signature verification                                part there was a presentation on it we                                had given last year in the NOC Security                                Summit Europe                                                      today's presentation will mainly focus                                over the key management part okay so the                                high-level overview this is just again                                to get into the flow I will not get into                                details again the details of this this                                has been discussed about in different                                ways our presentations in different                                conferences so let's get it started on                                here secure both open power secure boot                                if you look at the                                it starts from here the the the main                                hardware the core root of trust which is                                starts from SV and it lures host boot                                ski boot ski Ruth hostess huh so this is                                actually divided into two parts there is                                a phone there and then there's a hostess                                so the whole secure boot on open power                                has two domains one is found a secure                                boot and once the ski boot which is also                                called is open it loads the boot loader                                we start with the holster secure boot                                so today's focus is mainly on the key                                management part of the OS secure boot                                that is for the loading of course OS                                  of this button thing to remember here is                                the DES boot kernel in case of open                                power it is actually a pretty good                                application running running on a Linux                                based kernel so we use a key exec here                                and then it loads the host source and                                the key management and the signature                                verification are handled differently for                                some from the secure boot and always                                secure boot                                so we'll be only focusing on osep boot                                ok so what this key management so let's                                say a key management is basically                                managing keys in a crypto system that                                involves creation protection is storage                                and control over the usage of the keys                                so as part of this it goes to different                                phases where you start with key                                generation and installation its storage                                where do you use it and then how do you                                destroy it                                in case of revocation or expiry or                                rotation if you need to and what are the                                currently existing mechanisms as part of                                secure boot key management so they are                                like different but in context of secure                                boot so there is like currently we have                                UEFI key management and then there's the                                shim which does its own so if we just                                see it in two specific properties like                                the variables which are being defined                                for the UEFI are like pkkk TB TB eggs                                the thing is by default it is built in a                                controlled way and you can reset it                                later but by default it comes as a                                 controlled thing and the shim has marked                                 list and my list x and shim mainly takes                                 care of the oil secure boot                                 that is once you get into the bootloader                                 but the unified actually is the same for                                 the firmware and then to those the key                                 hierarchy in case of the UEFI is you                                 have the highest authority PK then which                                 is from the OEM then KK and the DB o DB                                 X which was for this color OS                                 verification and in case of SH M it is                                 the password based the tools which are                                 used for you for EFI tools and then                                 shemitah's mach util the key containers                                 where W has the you store the                                 certificate or the hashes in case of                                 your fighters efi signature list that is                                 ESL and in Chimel sits it is handles the                                 ESS the authentication of key updates                                 the you if it the UEFA has a if i                                 authentication variable header which is                                 like it embeds the PB touched pkcs                                  signature format and in case of                                 shemitah's password based and for the                                 key updates um you need may or may not                                 require physical presence for you ever                                 button kill depending on how you do it                                 but in case of shrimp you need physical                                 presence because you need to enter the                                 password when you are into the mock                                 manager for enrolling the keys so this                                 is what exists currently so now let's                                 see what is on the open power and the                                 main goal is to keep as much as                                 comfortable as possible keep it secure                                 keep it flexible so that it can be                                 extended with ease of automation so                                 let's go through this journey of key                                 management on open power and see if we                                 are able to achieve this goal or not                                 I break this key management into the                                 three layers so there is a user who has                                 to do the operations like the cset means                                 the dis roles and all and then this to                                 get to you the user interface is exposed                                 by the kernel which is the second layer                                 which provides also an access between                                 the user and the firmware and the kernel                                 is the one which is also going to use it                                 because the bootloader is kernel-based                                 and then there is a firmware which                                 actually does the key management the key                                 updates processing it is the one which                                 is controlling the author the the hanley                                 or controlling or handling the keys so                                 the key initialization                                 it's vilification and his search part is                                 which from there so let's get more                                 deeper again breaking it down into                                 further components the farmer we need to                                 store the key is to make them persistent                                 so here comes a key storage this is the                                 persistent storage the position is                                     here there is a penal and the tibia the                                 thing is we need a secure storage to                                 ensure the integrity of the key of the                                 keys TPM provides the security and penal                                 provides the enough space which is not                                 there in TPM so we combine the good                                 properties of both of them and try and                                 provide the secret storage this storage                                 is accessible via firmware which is the                                 S key boot in case of open power ski                                 boot or you also call it a sofa and it                                 handles it provide access via open api's                                 to the kernel and the user interface and                                 it does all the handling of the key                                 updates key manipulations who can access                                 who cannot access etc and then this is                                 the kernel which provides access for the                                 user space and again as I said it was                                 uses it and manual is the user space the                                 ellipses which I have shown here are                                 available at runtime and the rectangles                                 which are shown here are actually the                                 boot time the components which actually                                 does the processing at boot time now one                                 thing which I want to specify here is                                 the most of the key of this processing                                 we are doing is in a ski boot not in the                                 kernel why can't we actually make the                                 kernel to do all the processing the                                 thing is the hardware the the actual the                                 key storage which is accessible we                                 reward to keep the expulsion limited and                                 block this to access to it as early as                                 possible because the TPM security which                                 we do is is by locking it so we didn't                                 want to expose it at to the point where                                 the users or the networking gets enabled                                 or the file systems with animal and also                                 we wanted to lock it access to this as                                 well as possible and that is where this                                 keyboard is it uses the exposure so next                                 when it's done at the former side ok so                                 we will take a top-down approach                                 start from like assuming a user wants to                                 start with setting up the keys and how                                 does it go through this the whole                                 process goes so key generation and                                 installation okay                                 ah I need a tool to generate a keys what                                 should I do so which one's should I use                                 so support asymmetry keys it's a                                 signature verification mark asymmetry                                 keys and it's a                                                        the container for the keys that is the                                 certificates and hashes is Tiana code                                 derived EFI signature nice so you use                                 ESL as a container for the keys the                                 update when you sign the piece are for                                 the update the structure which hold this                                 signature as well as a new data is again                                 tiana code derived which is efi variable                                 authentication to descriptor we use the                                 authentication to descriptors it is                                 based in thymosin and it helps                                 protecting against replay attacks the                                 tools are ah we have taken the minimum                                 utilities from the efi tools and ported                                 them to the power and they are called as                                 the sequential snow so the three                                 abilities which we have ported our                                 search to efi cig list which converts                                 from certificate to wizard ESL and then                                 the sine wave vesicles to which science                                 it and the hash tree fasciculus                                 for converting hashes into a efi                                 container this is how the whole                                 structure looks like when you                                 so if using these utilities are                                 generated or certificate are generated                                 in ESL and I generated a science command                                 this is how it will look like it will                                 have a header structure authentication                                 to which will have some of its metadata                                 and then a pkcs                                                          an app and then appended with the new                                 keys ESL which you want to actually get                                 updated on to the database so I have                                 loved this command with me or which I                                 need to give to the submit to the system                                 or install on to the system                                 now here comes before I install MS                                 allowed to install or who should be                                 doing the installation                                 so the comes the there comes a point of                                 authorization and who is authorized to                                 do what we the the variable names                                 Alif alike                                 the computers we use P ke ke khet DBA                                 DBS the peak is the highest security                                 authority it has the authority to                                 install the intermediate lease and it                                 can be more than even for the secure                                 boot the cages are the intermediate is                                 who has the authority to install the DB                                 or deviates for the signature                                 verification the DB and EBX are the keys                                 used for kernel verification JK                                 consigned the DB or DB exports that's so                                 the thing to note here is ETS L hand                                 source multiple certificates and one key                                 can sign one ESL and it does not sign                                 in/sign individual certificates in the                                 ESL so it is we currently support                                 replace mode and not the offend mode                                 now again the point here is the the                                 question can come what why did we decide                                 the three level hierarchy we could have                                 decided the two level hierarchy it could                                 have been PK with DB or not and it could                                 have been KK with DB along there is no                                 need of peak so but if you see this are                                 assuming take an example there is an                                 organization and who have these are they                                 there is one organization and it is                                 multiple departments and his department                                 has assisted me and even a department                                 can have six admins in the ship's                                 working so so if there is only a single                                 PK then it's the organization which has                                 to handle take care of assigning                                 authorities for or handling the DBS for                                 everyone if there's no PK but there is                                 like there are multiple case then there                                 is a complexity who authorizes whom and                                 when you dude there is also complexity                                 of who has actually installed it a DB or                                 worse installed the DVS so how do you                                 keep track of all of this so this                                 defines this gives an optimum level of                                 managing the hierarchy at the                                 organization level you have the highest                                 department level PK authorized who the                                 who who gives the systems and assigns to                                 a case which can be sis admins in each                                 of these departments and then these                                 these admins are allowed to install the                                 DB keys and this is admins even if they                                 are working in the ship second install                                 the DB o DB excuse so this is how this                                 hierarchy becomes an                                 level to do to achieve what is required                                 as part of organization key management                                 thing now another aspect of the flexible                                 key author it is this is what as we see                                 is that there might be different cases                                 where I want the way I want in solid I                                 might be as I said mean and I want                                 install my own Linux kernel I might have                                 got something shipped but I want to                                 install my own Linux kernel so in that                                 case I have attended my public private                                 creepers and I signed the tunnel with my                                 DB key and then I have my key guess why                                 I can sign my DB with my kk and then                                 install it that is one case there might                                 be another case where I am the said mean                                 but I got that I have to install a                                 distro package but destroys and I would                                 have got the key from them so how do I                                 solve that so in that case I used that                                 key as a DB key but I sign it as a                                 sysadmin with my clear here and then I                                 installed it and there can be a third                                 case well the system comes with the                                 shipped pre shipped the pkk can GB and                                 then in that case they want to have                                 their own keys installed so it provides                                 a flexible key Authority and it's there                                 is no centralized system control and it                                 provides an options based on the                                 requirements you want to satisfy so this                                 is how the design for the key hierarchy                                 and what how many levels are optimum has                                 been decided okay so I got the keys I                                 know I need to install it and what's                                 interface available to me so they are                                 two interfaces we have expressed as part                                 of the kernel one is device                                          properties are of the internal key                                 management status are read-only                                 properties which are they are exposed by                                 a device T the oil stick you are                                 enforcing property so we call it the                                 interfaces a sec where you will see                                 unknown etcetera the whole secret                                 enforcing property tells whether the                                 secure boot is enabled and disabled the                                 second thing is for submitting the keys                                 are we have raided the sisyphus                                 interface which allows you to do a legal                                 right of keys and they are exposed by                                 assist former SEC workers and it can be                                 enabled by config security service the                                 patches for tying the work of progress                                 which we are trying to get the pups                                 named so the kernel has got the                                 - you swear Sisyphus and it needs to                                 give it to the formula so the Nexus                                 surface car not firmware interface and                                 that comes as part of the interface                                 which we have implemented called a sec                                 where operations it provides a pluggable                                 interface get get next set powerpc-based                                 platform can implement this interface to                                 provide to use the sea surface and for                                 different platforms since currently the                                 secure boot suppose we are doing is for                                 power env systems we have implemented                                 open api is the interface and that is                                 kyboot levels so now at the form layer                                 level so this is the kernel interface                                 for the firmware but now former also has                                 to expose so that is the open api                                 interface which and that work is being                                 done by addict rich stuff from my team                                 and that is where the kernel starts                                 talking to the formula Connor had given                                 the request or the key object command to                                 the firmware                                 now what this form will do it so it has                                 to handle that command so there comes no                                 storage                                 the Pinner is straight so I said in our                                 we have two storage pin or an TPM the                                 TPM provides the security and Kino                                 provides the storage I'm in space more                                 space Pina is divided into two parts one                                 is for the keys and one is for the                                 update commands so whatever key updates                                 we have to do that is stored into the                                 update bank and into the update Bank                                 partition the key stored is maintained                                 as to banks so that if you need to roll                                 back because of any failure reasons you                                 can do that and they are there is also                                 an in-memory cache maintained by the                                 firmware itself which is available at                                 runtime so that you I'm in dub dub                                 during the boot time the keys are loaded                                 from the persistent storage to the in                                 memory and that is what available at                                 runtime                                 again this support is like the storage                                 driver support is like a pluggable so it                                 can be extended to support different                                 storage devices for now it is                                 implemented for Pinot and TPM                                 combination the TPM driver rate the                                 firmware level is                                 taken from IBM's TSS which is back-ended                                 Goldman who is from IBM security                                 research and it has been modified to use                                 and materials so so we got other command                                 we stored it into the update Bank and                                 what next                                 so the next thing is I before the next                                 thing so there is a storage in journals                                 this is the pluggable book which I was                                 talking about and if you want to add an                                 addition and additional additional                                 storage device which is different from                                 peanut storage these are the interfaces                                 to be implemented so that is how it is                                 made is flexible or extensible okay so                                 now once you saw there clear update                                 command there is a need need of reboot                                 you reboot the system and then when the                                 lipid starts before update processing so                                 when the reboot starts and the system                                 comes back to the firmware or pal ski                                 boot level it starts the processing of                                 those key updates and the component                                 which handles this is called a back-end                                 component for the key management again                                 the work is being taken care by an                                 accreta                                 what is this back-end actually it                                 provides it defines the supported                                 variables the scientist structure or the                                 signing algorithms for the keys and it                                 also provides the definition of the I                                 mean what type of authority or the                                 authentication is allowed or the key                                 hierarchies the secure boot modes                                 so it basically defines what the user                                 space tool should be doing and how your                                 suspicions can know about this is by                                 used looking at the device key property                                 which is an available de sacra back-end                                 the backend compatible flag can help the                                 user space to sit let's use the space                                 tools to know what type of the signing                                 algorithm or the modes or the the                                 structure the continuous structure is                                 being supported this is where the                                 backend comes into picture again the                                 backend is flexible tomorrow if you want                                 to change the support for the signing                                 algorithm or we want to hand a different                                 container or the different way of                                 handling                                 modes then it can be done by because as                                 they are provided is extensible ah you                                 need to update a compatible flag to                                 represent what you are providing the                                 thing is it you and end up driver should                                 provide these functions bleep process                                 process post process invalided the one                                 which we are implementing currently is                                 derived from tyrannical reference                                 implementation eg k                                                     it looks because like we are processing                                 the ESS and authentication header so                                 that is how we call it so now the when                                 the back end comes into it gets loaded                                 it it reads the update commands from the                                 each of from the update bank and how                                 they get processed if it is a PK and if                                 it is the first time PK it gets a soul                                 but if it is there is already a PK                                 existing in it that means it has it                                 should be very friable by the existing                                 pika                                 so presence of PK defines the secure                                 boot mode if it is there is no PK the                                 secure boot is disabled if they speak                                 and secure boot is unable the k K's are                                 verified by a PK and the DB ODB X is                                 variable by a PK okay in case the secure                                 boot is disabled no verification is done                                 if the secure boot is enabled the pkcs                                  structure from the author is extracted                                 and the new year cell data which has                                 been submitted gets verified against it                                 we have implied though we are using                                 ember TLS is the crypto library at this                                 kyboot of formula level but the but the                                 empathy lies does not provide pkcs                                  support so we had implemented a limited                                 support for it and we are going to open                                 source if we are working on it so we are                                 going to submit the request for them a                                 material is prevent contribute to that                                 so this is how the key updates                                 processing gets done and if the                                 signature gets verified it gets stored                                 into the key store partition off to the                                 pinna now now so let's get that is your                                 comes apart of it's turning into the                                 memory making it persistent so what does                                 that involve                                 so now comes a part of the protection of                                 the key storage or the protection of the                                 key database so the K case or the DB or                                 DBS which are intermediate                                 they are stored in Pino but the highest                                 security Authority which is Speaker that                                 is stored in TPM to reduce the attack                                 surface again then and the pica is                                 single then the individual of P naught                                 is maintained by we saw the hash of the                                 key third of the P naught into the TPM                                 so there is always a check done whenever                                 the system knows it always checks the                                 integrity of the P naught T store with                                 the hash into the TPM before actually                                 loading it into the in memory and if                                 there is a mismatch it it it considers                                 it has something something wrong or                                 something malicious or corrupted and                                 then it does not load the keys so the                                 steps to maintain the penal security PM                                 r so when the key store has to be made                                 persistent the first thing is does is it                                 writes the hashes of the key so the                                 anomaly key store to the TPM then it                                 makes the piece for persistent to the                                 Pino and then it right logs those TPM                                 and mean dices so whenever I was saying                                 store into the TP moment it is stores                                 into the NV any storage of the TPM and                                 then it right locks them so that it                                 after that nothing can be updated into                                 those indices and it can be unlocked                                 only after reboot so by the time the                                 opal or the form Lang of loads the                                 bootloader and which now has access even                                 the network access or the file access                                 the TPM is already been locked and there                                 can not be any modification done at the                                 Keystone so this is real if the point                                 comes of that we are actually doing the                                 the processing at the formula level and                                 not the key keys kernel level and once                                 it gets everything is locked the locking                                 is done by the platform authentication                                 property of the TPM                                 so this is where how the key storage is                                 made secure with the combination of the                                 penal and the TPM so I have got my keys                                 of process updated according to the                                 penal they are also available in memory                                 but they are actually this always was                                 being done so that bootloader I can use                                 these keys for the kernel signature                                 verification                                 come to the queue sit there are two                                 things of the key usage one was the                                 update he updates verification itself                                 which we already talked like PK verifies                                 cake and cake FSDB dbx so variable Bank                                 actually verifies the update bank the                                 second is the kernel verification and                                 this is where the we did all this so                                 that the bootloader can verify the four                                 source so how does the colonel gets the                                 keys which are actually at the firmware                                 or which are actually handled or                                 controlled by the form there so it is                                 the same opal API interface which                                 explained few minutes back at the for                                 the sisyphus interface for in context of                                 sisyphus interface so the kernel keyring                                 code it calls open API interface it                                 loads DB keys to dot platform killing                                 and the DB x keys to the dot blacklist                                 kidding the dark platform kidding is                                 what was being introduced in the last                                 season time and this is the one which is                                 being used by I mark so the for the                                 signature verification who use imma and                                 imma uses the platform kidding it uses                                 its we define the arcus specific                                 policies some of this was being done as                                 part of signature verification and they                                 are being upstream this support of the                                 loading the keys in Power PC for dr.                                 Forman dog blacklist can be enabled                                 while load P PC keys and this is how it                                 looks like there's the dot platform and                                 the black is coming to the blacklist                                 currently we support the hashes of the                                 blacklisted binary for the signature                                 verification use appended signatures and                                 not extended attributes                                 paths of dyma because the externality                                 bits are not available for all the cases                                 like for the net Boonton all so we use                                 appended signatures and blacklist binary                                 when I say it implies the hash of the                                 binary without depended signature so                                 that is what the support of the                                 blacklist is circa so this is in summary                                 dog verification flow so kernel called                                 open API is got the keys from the                                 firmware stored it into the keyring that                                 is the kernel memory and now how is                                 their use it so if the secure boot mode                                 is disabled no                                 none of the verification gets done but                                 if the secure boot modesty enabled                                 enabled then the key star-lord DB keys                                 are loaded to dot platform there is a                                 policy our specific policy define which                                 says check our kernel check the exact                                 kernel check I'm up flag is check                                 blacklist that is check for the                                 blacklist before doing the appraisal and                                 the template is mod SiC template which                                 is for appended signatures and then                                 before doing that players appraisal it                                 looks so imma looks at the policy so it                                 knows that it has to check the blacklist                                 so it checks against the dot blacklist                                 and if the binary is not found this                                 blacklisted it actually does not                                 preserve and if the present is                                 successful it loads the host OS so this                                 is how now the key got used I and so we                                 have taken we started from the top and                                 we also taken the u-turn and we are back                                 to the user space where the hosters gets                                 loaded what is the case now when I want                                 to delete my keys because for case of                                 live occasion or the expire then also                                 how do we do that so you will delete DB                                 DB x RK k by submitting a signed update                                 with empty data if we have a valid PK is                                 still existing then it can be also be                                 deleted by submitting signed update                                 deleting a PK means disabling the secure                                 boot so it's it's possible to delete PQ                                 only if it is very little present into                                 the TPM if PK is detected as corrupted                                 or it's private piece loss or PKS rework                                 or if we want to change the ownership of                                 the system then in all these cases we                                 have we can only delete it by a physical                                 presence or we can already only modify                                 by a physical presence and the key                                 rotation is basically okay it is                                 basically doing the full cycle that you                                 generate the new key you delete the old                                 icky                                 by submitting an empty days signed empty                                 data and then you install the new key                                 and how do you do I need logs error logs                                 or recovery you're debugging it so open                                 path systems at the petite boot which is                                 the application and then does the boot                                 loader part it has its own UI you can                                 see the status of the secure boot on to                                 the UI we are starting with a minimum                                 interfaces on to the UI side but then                                 over the time we plan to make the key                                 management and everything from the UI                                 interface for now it is available from                                 the sisyphus any or parallel logs are                                 can be reviewed by a system where open                                 message log the kernel logs can be seen                                 from the syslog the device the                                 properties can be looked at to see the                                 secure boot state where it is enabled or                                 disabled the device the properties help                                 the properties for status and update                                 status which tells whether dubbed a                                 processing was successful or not and                                 that he managed key management in the                                 discrete got successfully initialized or                                 not the here the peak of the peak a                                 private is lost then it can be recovered                                 via physical presence I mean you clearly                                 then then you install the new one but                                 you need physical presence in that                                 context and so the key takeaways for                                 upon pocky management is system owner is                                 in full control no central CA currently                                 supported modes are like setup and user                                 which in fantasies like enabled disabled                                 and we'll add the audit mode support in                                 the future it provides a surface                                 interface for user space reported                                 minimum EFI tools to the power and its                                 could I call the sacred tools the                                 support is like for EFI like variables                                 pkkk DB or dbx it accepts ionic or                                 derived DSL and EFI valuable                                 authentication to descriptors it                                 requires the system reboot for the                                 update processing and storage is secured                                 via maintaining integrity checks with                                 the TPM the physical presences required                                 for the recovery of pre care and it                                 supposedly plays mod as part of the                                 initial starting and not dependent mode                                 these are the key takeaways                                 so let's see how did we achieve our goal                                 and we said that we need to we want to                                 keep it as much as compared                                 well secure flexible and ease of                                 automation so the variables which are                                 used are pkkk DB DB is the key ownership                                 is flexible there is no centralized here                                 and there is no default controlled like                                 thing so it is flex open inflexible the                                 key hierarchies pkkk david p k                                          k k                                                                      keep it minimum and just a single                                 Authority then pika - DB o DB x is also                                 possible the tools which are used are                                 sacred tools and derived from efi tools                                 the container is efi signature list the                                 authentication key update of key updates                                 is done with the efi variable display                                 authentication - descriptor and the                                 updates do not require physical presence                                 until you actually need to recover the                                 PTO or clear the PDA without                                 authenticating it so that is only place                                 where you need physical presence so it                                 can ease the automation for the                                 organization so that is what we said we                                 want to give as much as comfortable                                 secure flexible and autumn easy for                                 automation and this is the patch that                                 settles the work has been going on for                                 the ski boot man into the ski boot                                 meaningless the embed TLS for the pkcs                                  support the kernel to get the Sisyphus                                 interface and the ARCA specific policies                                 and the blacklist support for blackly                                 support from the I'm aside I to specific                                 policies for power and loading of keys                                 for power the signature verification                                 related patches have been accepted                                 already the appended signatures had                                 become part of it recently                                             of the work had been ongoing some time                                 and the user space interface the sacred                                 tools that is something work in progress                                 and we will get it like yeah we have                                 been have it working in put it in power                                 but they are they more publishing it                                 these are the general references there                                 is a development github repo we are                                 maintaining for now to try it out but                                 the patches I see like in the process of                                 up streaming yeah                                 any questions                                 not questions                                 [Applause]
YouTube URL: https://www.youtube.com/watch?v=yfdbuzvptsg


