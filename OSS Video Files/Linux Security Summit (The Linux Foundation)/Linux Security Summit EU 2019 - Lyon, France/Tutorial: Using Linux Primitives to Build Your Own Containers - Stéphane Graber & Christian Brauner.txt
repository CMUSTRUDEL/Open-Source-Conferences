Title: Tutorial: Using Linux Primitives to Build Your Own Containers - Stéphane Graber & Christian Brauner
Publication date: 2019-11-04
Playlist: Linux Security Summit EU 2019 - Lyon, France
Description: 
	Tutorial: Using Linux Primitives to Build Your Own Containers - Stéphane Graber & Christian Brauner, Canonical Ltd.
Forum 1

Speakers: Christian Brauner, Stéphane Graber
Most people are familiar with various container tools including Docker, LXC and LXD. But they rarely are familiar with the kernel features enabling those tools.

To better understand everything involved, we will be creating our own container, from scratch.

Starting to look at the various namespaces, what they do, how to use them together, then setting up a suitable filesystem, integrating with a LSM, do some privilege and capability dropping and putting restrictions in place with cgroups.

At every step, you will see what your container can do and what it probably shouldn't be allowed to do, through this experience you will get a better understanding of all the moving pieces that are put together to create a container.
Captions: 
	                              hi everyone so I'm Stephan crabber                               Christian branagh we both work for                               canonical on the black CD team so we do                               container development in both user space                               and column space and today we're gonna                               be looking at containers and how you can                               kind of build them with all the                               components that you need and how                               everything fits together so first thing                                what are containers that's always a bit                                of a funny topic because there's it's                                kind of weird on the next Frankie no                                more concepts that containers are                                effectively related systems the behave                                cannot get our machines but they share a                                kind of the host that's cannot a general                                concept of containers where it gets                                weird is that there is no such thing as                                a container in the Linux kernel you can                                go and look as much as you want maybe                                someone would have mentioned container                                somewhere in a comment in there but                                there is no container stroke there's no                                container anything really in the content                                in the camel you instead have a lot of                                different components that user space                                will randomly pick and put together and                                hope that they end up with something                                that's a container you really can't get                                a single handle on something that is                                like a container not even at least not                                right now yeah it's gonna be some kind                                of a citation yeah yeah that's been a                                bit of a recurring topic there's been                                some people who want to be like I I've                                got this process what container does it                                belong to there's really no such thing                                so people have been coming up of their                                own solution the audit people have been                                pushing pretty hard for a while to try                                and get such an identifier and it's                                gonna be a specific identifier that's                                kind of the way that's that's gonna end                                up being looking at some of the common                                components for containers we've got them                                three different chunks so the first                                thing is mostly for isolation so the                                most obvious thing is you want to have                                your on file system like get another                                destroy some container animate or                                something you just do that with either                                sure it'll fit                                we go into more details on all of those                                afterwards then you use namespaces to                                let you have your own host name you have                                your own antenna tree is your own view                                of processes on networks dark IPC view                                of the C group hierarchy and even user                                user is a bit weird because it is                                technically part of isolation but it is                                also part of security it is basically D                                main security feature that we're using                                for containers these days for those not                                doing careers containers anyone who                                attended I'll talk back in San Diego                                probably remembers what we think of                                privileged containers don't use those                                now the security layer there are a few                                things we can do one of the things that                                we often use even if one has a safety                                net for unpierced containers are                                Ellison's so that's a bummer as in the                                next mac your own we just come to block                                a number of three dangerous sis calls                                especially those that have been linked                                to security issues and you can use                                capabilities to drop a set of                                capabilities for the container or even                                just only retain a very specific set of                                capabilities to even further isolate                                your container and then you've got                                resource control which is again you                                cannot separate from all of those so                                that's what C groups do and it's mostly                                about avoiding deny all service type                                attacks but it's still very useful and                                basically all of these components are                                optional because of the it's user space                                fiction containers so you can choose                                what you want to use to define your                                container but since we so we have a                                particular focus right when we talk                                about containers we usually treat it as                                a like you would any standard Linux                                system when we mean containers we mean                                you put an init system and normal Linux                                distribution comes up so for us the                                container is can you combine all of                                these features essentially alright yeah                                 in the case of Lex T what we use is                                 literally all of those so in this                                 tutorial we're going to be going one by                                 one through the                                 and show you some examples of how they                                 work and also some of the issues they                                 might have to give you an idea on how                                 you can effectively assemble your own                                 containers but first this so yeah there                                 are a few things we need to can I say so                                 yeah                                 in general you don't want to be like in                                 previous containers we talked at length                                 about that back in San Diego you also do                                 not you shouldn't assume that you can                                 look at the code of mixing container                                 manager and just optimize it because it                                 looks like they're doing something                                 that's slow like doing you know main                                 setting of namespaces in to transients                                 of doing one big chunk there are reasons                                 why sometimes you need to do such weird                                 things and if you don't you might end up                                 with a few CVS on your project that you                                 don't really expect if it's complicated                                 there's usually a CV for it yeah there                                 are a lot of interactions among a lot of                                 the components were going to be showing                                 that also cannot shrieky that can                                 include interactions between namespacing                                 orders SEC comp policy and some ways of                                 bypassing them especially when you would                                 combine things with B trays which makes                                 things always so much more fun pakka                                 Fest is affairs all the permissions on                                 those file systems and how those get set                                 up again depending on what order you've                                 put everything together                                 most of the existing panel runtimes are                                 freelance that the hard way like some of                                 the stuff we know because we implemented                                 the kernel features but some of the                                 others we know because we have to deal                                 with critical cv we have to fix in a                                 rush because groups so you probably                                 don't we don't want to be like that and                                 it's much easier to use something that                                 already exists                                 that being said right so one of them I                                 think this was one of the first bits we                                 talked about is filesystem isolation                                 usually again this is probably specific                                 to again if you think about a container                                 being a fully separate system then you                                 usually also want to have a separate                                 route                                 file system right the same way you have                                 it for a VM you have a VM vintage image                                 and when you want to start a container                                 you know you wanted to have its own view                                 on the file system hierarchy and there                                 are different well the grandfather of                                 all this or the the ancestor is crude                                 right or Schrute                                 whatever your you fancy which lets you                                 change into basically to switch your                                 view on the file system hierarchy such                                 that you have the illusion that for                                 example if you true into its directory                                 this now becomes your root filesystem                                 your slash essentially but that's                                 horribly unsafe and I think Stefan is                                 going to demo it in a little bit because                                 you can easily break out of it                                 and the advanced variant is pivot root                                 which most container runtimes use but it                                 has uses outside of that system T is                                 using it for example to set up the                                 initial file system and the system is                                 booted and it prevents a bunch of T                                 escapes that are trivially doable with                                 which root and you'd requires though it                                 requires that you are in a new mount                                 namespace to do it correctly otherwise                                 you're going to mess with your system                                 which true doesn't require you to have a                                 new mount namespace ya and gets your                                 private files as my Rikki that's what we                                 get your own view on slash that's                                 basically what it is and you should go                                 on and demo it yeah there's one                                 restriction for those who want to use                                 pivot rate if you are trying to use it                                 on top of a ram disk like in inside                                 unity that's not going to work you your                                 target your new root cannot be on the                                 RAM disk you also cannot do it if if                                 you're on Emma's shared yet is that to                                 him because the implication of things                                 then vanishing underneath you are                                 Polymathic sir um to show this one what                                 I'll be doing is I'll encourage users                                 I'm just gonna and we're gonna go into                                 more details about that in sec but for                                 now I'm just gonna create a new user                                 name space with a new man name space                                 with a new bit name space I'm gonna                                 remap routes                                 am i use of the root and fork okay so                                 now I'm rude even I'm really not it's                                 just inside of you the namespace we've                                 got a directory here that's a alpine                                 Linux root filesystem so I can do the                                 normal to respond in a sage okay that                                 worked fine okay the permissions are bit                                 off but that's because I did the user                                 name space that seems fine ok now let's                                 mount frog okay that's weird                                 okay I don't like my true it anymore                                 let's get out and you're back on the                                 horse                                 see that's true it for you                                 let's read out again but this time let's                                 use exact same and share this time I                                 need to create a mountain tree for my                                 truth so you just bind mount it on top                                 of itself all it does is add a black                                 mountain tree at the end of it it's a                                 kernel enforced restriction for me the                                 truth right the new CD into it then you                                 pivot root onto itself                                 then we exact being a sage okay and say                                 I want to do oh look at that                                 doesn't work anymore also because I did                                 a type of harm okay so yeah that will                                 work                                 but instead of getting back on the host                                 that just got back into myself so the                                 root in this case is actually pointing                                 at the root for pivot root and doesn't                                 let you see I'm getting to the outside                                 oh and if you have any questions like if                                 we for example use the unshared tool and                                 you don't know what any of these options                                 to or mean you should have next ride                                 yeah but you should ask questions right                                 away I mean yes so that's PI system                                 isolation switch doesn't it yeah that's                                 right go right um namespaces I mean who                                 hasn't heard of namespaces but finally I                                 was excited that's not true I                                 oh that I just wish you didn't yeah                                 that's I think but I think this is                                 really the first time where I where I                                 asked it and there was a know hand up so                                 great so namespaces are I like to quote                                 Eric who was one of the main authors of                                 a bunch of namespaces who said that                                 namespaces are a way to get around                                 design mistakes or in flexibilities of                                 Linux and they shouldn't exist which he                                 said but yeah they they are one of the                                 main concepts of that you that we use to                                 build containers and most of them are in                                 some way concerned with restricting                                 certain views access or information that                                 you from yeah from you so for example                                 UTS namespace which I think was the                                 first namespace that was ever done it                                 lets you change the hostname which is                                 obviously kind of useful especially if                                 you think about booting a system                                 container you probably want to set up                                 your own hostname and so on so you can                                 have a different host name in a UTS                                 namespace then you can have on your host                                 sorry I thought it was the question                                 sorry                                 and but but we have a bunch more we have                                 seven so far and I think there's one two                                 three four five six seven I can still                                 count but there is a eight ones coming                                 up from again from the kre-o corner of                                 the world the time namespace UTS                                 namespace obviously what I said isolates                                 the hostname the mountain named space                                 oscillates isolates your view or                                 restricts your view on the file systems                                 are mounted on your system and also                                 allows you with some exceptions to give                                 you a private mount table which means                                 that for example if you mount a file                                 system let's say tempeh fest because                                 that's possible if you mount tempeh                                 fessing in you a mouth namespaces mount                                 will show up in your mount namespace                                 here but you will not see it outside of                                 that mountain namespace if you haven't                                 set up a shared mount point because                                 mountain namespaces are horribly complex                                 because of the fact there is something                                 like a shared mount point who knows what                                 the shared mount point                                 okay so for all of those who don't of                                 those only one of you like actually                                 enjoys knowing about those oh you think                                 it's useful right they can be useful                                 they're also a headache so it's like                                 when you think about when you think                                 about namespaces of isolating - or                                 giving you two distinct views right you                                 usually don't expect that there is an                                 easy way to punch a hole in both of them                                 but that's exactly what shared mount                                 points do if you have marked the mount                                 point as shared and you unshare in your                                 mountain name space and then you mount                                 something on top of that shared mount                                 point or underneath that shared mount                                 point and it will be visible in both                                 namespaces suddenly so obviously what                                 you need to make sure if you set up a                                 container that if you don't want to leak                                 information from outside into the                                 container or from inside of the                                 container to the host that all of these                                 shared mount points have been remounted                                 such that they are marked as private                                 such that these two namespaces cannot                                 affect affect each other as actually                                 yeah so they're horribly complex the                                 user name space is one of the most                                 essential namespaces because it's the                                 only one that is really concerned with                                 isolating the privilege concept on on                                 Linux so for example if I unshare a user                                 name if I ensure a UTS namespace or a                                 mount namespace nothing changes with                                 what I can actually do to the system I                                 might not have access to certain aspects                                 of the system such as I cannot get to                                 certain mount points of file systems but                                 in general it doesn't stop me from                                 calling sudo reboot and then I'm                                 rebooting the whole system for example                                 or because I'm still if I'm root I'm                                 still real root if I have a capability I                                 have that capability for the whole                                 system and the user namespace isolates                                 both you IDs and GID so the most basic                                 privilege concept on Linux and                                 capabilities so suddenly if you unshare                                 in your user name space and you write an                                 ID mapping then your ID inside of the                                 user namespace and outside of the user                                 namespace have different meanings let's                                 say I'm on the host UID                                 now I create a user name space and I set                                 up a mapping that map's my UID                                         something completely unproven privileged                                 on the house let's say                                               that's my new one                                                       new UID on that you a t-                                                 to which means I don't have any                                 privileges at all anymore and but from                                 inside of the container I can still I                                 can still make it such that I appear to                                 be route so if I do inside of the Catena                                 ID you I will see                                                       my process is actually running with a                                 completely unprovable UID such that when                                 I break out of that container and and                                 now on the host nothing will happen or I                                 can I can do something I can do nothing                                 at all essentially the same way                                 capabilities for user namespaces the                                 capabilities are now charged against my                                 username space and not against the host                                 anymore meaning if I for example have                                 caps except men then I have caps this                                 admin in a username space and not caps                                 as admin on the host so it is it's                                 vitally important to use user name                                 spaces because they give you a really                                 massive amount of security and there are                                 more Network namespaces you isolate your                                 view on on network devices IPC                                 namespaces give you private                                 inter-process communication and secret                                 namespaces isolate your view on the C                                 group file systems but I think the best                                 way to all illustrators is if Stefan                                 does it any other thing we can just                                 mention is you can set up those names                                 basis our process creation times for                                 clone you can set them up afterwards by                                 and sharing some namespaces which is                                 mostly what I'll be doing from the shell                                 afterwards and you can join you can join                                 them using set and s so you've got the                                 way of really messing with them and they                                 have the visible through proc so you can                                 for any process see what namespace done                                 so if we look at look at dance                                 so the first thing we can look is at the                                 unshare command which is covering most                                 of what the kernel unchaste is called as                                 you do so it is you and share all the                                 new species who just went through it                                 lets you fork which is required for the                                 pit namespace because when you don't                                 show up in namespace you don't want your                                 processes current page to change that                                 would cause a lot of problems so only                                 its children I'm gonna be in that pit                                 namespace that's what you need - for the                                 - our option I used earlier is literally                                 so that my current user which is some                                 random number on that machine gets them                                 up to                                                                   your root and rest is to control some of                                 them on propagation and group                                 restrictions so we can look at my                                 current processes namespaces so you can                                 list box elfin ass and you see the inode                                 of each individual namespace in there so                                 for now we'll just remember that h                                     is the end of the inode of user and we                                 can ensure so you want to check user                                 name space map route and fork and you                                 see that it's now where                                              user Nesbitt has changed the rest hasn't                                 now we can ensure a mountain in space                                 which by itself doesn't really get you                                 that much other than now even time like                                 I've never used to do anything I'm not                                 real rude at all now I should be able to                                 mount random stuff only trusted by                                 systems not everything obviously because                                 that'd be terrible for security                                 that's ensuring network name space at                                 which point we can see only a bug device                                 in there and I'll say let's do it                                 peered namespace and fork because it's                                 the bid namespace proc and look at the                                 process list my shell is not bid                                      that namespace let's say I want to                                 change my host name why that's not gonna                                 work it's a bit confused user space is a                                 bit confused sometimes because it's like                                 you must be rude to change the host name                                 well I am just not true it enough so                                 let's share a UTS namespace then try it                                 again and then spawn the process so                                 that's really most of the namespaces at                                 work I'm sure is pretty nice                                 command-line tool to play with those                                 especially because you don't even need                                 privileges to really do any or not yeah                                 could you do me one favor and start a                                 Lexie container and then show one of the                                 process running is route from the host                                 oh well I mean I can I can do and with                                 this done sure yeah                                 so if I try to use a namespace I remind                                 my fork one thing I can do first is if I                                 just start random file so I'm touching                                 blah on in in slash stamp but I forget                                 out and I look and I look at who owns it                                 it's my own user because it's just my                                 own users map to root same thing                                 what's my process ID okay so it's bad                                 thing and switch time in order to                                 another one and just dress for that                                 process and we see it's running as my                                 user and if you do ID you inside of that                                 unshare yeah                                 Oh from inside shop so from inside its                                 lost EMP Brown so it on its own by route                                 and as far as ID is concerned inside the                                 container you are rude but both grew you                                 both user and group I'm apt to my normal                                 and producer so this whole mapping                                 concept always when you theoretically                                 talk about it it always sounds very                                 complicated but that's basically it                                 it pretends that you're rude inside of                                 that username space but from the view of                                 the system as a whole                                 you're just an unprivileged user right                                 one of the classic security features of                                 I guess of Linux that predate containers                                 probably by a longshot                                 is second and most of you are probably                                 familiar with this as well I guess                                 seccomp allows you to restrict what sis                                 calls a given process is allowed to make                                 so usually for unprivileged containers                                 so containers using username spaces the                                 security given to you a guaranteed by                                 the username space itself is for the                                 most part sufficient so you actually                                 would not necessarily need second but                                 for good measure we still do it for a                                 couple of for a couple of Cisco's right                                 open by hand let and a bunch of other                                 crazy ones                                 yeah I was gonna mention our favorite                                 opened by I know that that's a handle on                                 that one is always great because if                                 you've got a previous container it gets                                 you the great property of letting you                                 nothing you'd need to pass an FD of the                                 buff you want and then you can open a                                 path relative to that the problem is it                                 lets you cross the pivot root boundary                                 so say you open slash in your container                                 and then you ask for a bunch of dot                                 slash dot star status starts - eg shadow                                 it's gonna get your handle on                                         you shadow of the host so long as the                                 filesystem backing the container is the                                 same first time that's backing                                 so that was pretty bad there was a CV                                 against docker for that particular one                                 so I think finish everyone blocks it in                                 the second policy at this point force                                 anyway for only at least for those that                                 are using Korea's containers for sure it                                 does not apply to imperious containers                                 if user user name space that attack is                                 just not a thing yeah and you can                                 usually decide for a whitelist or for a                                 blacklist and there are I mean you can                                 use very basic second that restricts you                                 that restricts you that doesn't allow                                 you to do a lot of fancy stuff but then                                 second also has for example a filter                                 mode and then there's a nice user space                                 library that lets you interact with                                 seccomp                                 and then you can do fine-grained system                                 call filtering so for example you cannot                                 just say the easy thing to say is I                                 don't want my users to be allowed to do                                 make not calls for but in general you                                 may want you want maybe you want to be                                 able to for example create sockets or                                 pipes which you can do with the make not                                 sis call or certain character devices or                                 certain block devices you saw you only                                 you basically want to tell the colonel                                 don't block all make not sis calls only                                 block make not sis calls that have that                                 have specific arguments and so second                                 filters allow you to do that as long as                                 the argument is not is passed and                                 register and it's not a pointer if it's                                 appointed and you cannot filter in it                                 which means you cannot for example say                                 restrict amounts is call but only if it                                 starts with this path that's not                                 possible with second and for good                                 reasons that we have LSM for that for                                 the most part but so you can have fine                                 grade filters for example for make not                                 you can make it you can tell second only                                 block make not sis calls for block                                 devices but allow character devices and                                 allow pipes and sockets it's also                                 something that we do for unprivileged                                 containers we have even expanded second                                 quite a bit a good friend of mine has                                 written a patch set that allows you to                                 intercept sis calls and                                 delegate the decision whether or not                                 that syscall is supposed to be                                 successful to userspace                                 so you register filter say intercept                                 make not sis calls for all character                                 devices and then the kernel traps that                                 sis call that message can be forwarded                                 to a more privileged users based process                                 in this case usually the container                                 manager the container manager can then                                 inspect the arguments for that sis call                                 and then make a decision and go on and                                 to tell the colonel it's ok this is call                                 is supposed to be successful or this                                 call is supposed to fail now the crucial                                 step obviously is especially for                                 unprivileged containers that any make                                 not sis call will fail right                                 that's because imagine you could create                                 block devices or character devices                                 inside of a container then you could I                                 don't know create some random character                                 device and get access to to all of the                                 hosts memory I mean it's easy to crash                                 the system with this so mcnaught doesn't                                 work the kernel will not allow you to                                 make and make to create device notes but                                 often especially when we boot system                                 containers are in it guess in general                                 any container we usually need a set of                                 devices deaf nor deaf old f-zero deaf                                 random the few random deaf console                                 because user space expects these to be                                 available and for that to work and what                                 we do usually is we bind mount them in                                 from the host so we already consider                                 them safe there is no known attack                                 vector that you can gain through these                                 devices but we need to bind mount them                                 in because we cannot create devices                                 inside unprivileged containers so the                                 second notify lets you get around this                                 so because you can intercept us this                                 call and this is call is blocked the                                 process making a sis call is blocked and                                 so you can emulate as a container                                 manager who is usually a more privileged                                 process you can emulate the sis call in                                 user space so for example you can go                                 into the file system of the container                                 create the device note if that is                                 successful you then tell the colonel                                 okay i've succeeded in emulating desist                                 call police report back to the process                                 that this is call actually succeeded                                 it's a very powerful very powerful                                 mechanism that we've                                 that we're using that even lets you                                 expand that even lets you expand what                                 you can do with unprivileged containers                                 in a safe way I would say okay let's                                 play with a company so let's first                                 create just set up the namespace quickly                                 so we want user name space not namespace                                 I want root and fork okay so I can mount                                 stuff right now because every better                                 math namespace I'm rude in that user                                 name space it owns the math namespace                                 and so I can turn on stuff now I've got                                 this piece of code here which is using                                 SEC comp it sets up a second filter                                 which catches the man Cisco and we'll                                 have it we'd have it blocked and                                 returning Johanna as the as the error so                                 that ends up being a second binary and                                 binary calls bash at the end so I can                                 just run it Nam in a subchannel that's                                 got that profile replied let's see let's                                 rate amount and there we go so it's now                                 being blocked and it's returning that we                                 had error codes that question came up                                 with why it isn't that very common no so                                 second that's like the most common thing                                 you would obviously block any of those                                 like if you're running a previous                                 container you would be blocking any of                                 those dis goals that we mention are not                                 part carry nice yeah                                 yeah yeah I know yeah so we've got this                                 demo obviously did the easy thing and                                 just didn't even go to lips a comp I                                 just brought a bit of PPF but yeah yeah                                 yes we have we have users we have used                                 that users for example I think                                 Chromebook is a classic example they                                 have a arch arm                                                                                                                                 runs an optically forbid something does                                 change like I'm                                                          an                                                                    and                                                                      space that run                                                      that's not in cases we do have that we                                 do have the logic in in labelled XE to                                 generate the policies for both                                 personalities to employ because we have                                 we sometimes I have                                                                                                                        container runtime which then loads a                                                                                                         another container runtime running a                                                                                                      load all of the compatible architectures                                 like a second filter so that you really                                 block all syscalls because otherwise you                                 might end up there is other weird stuff                                 like a really complicated content world                                 complicated but there are any corner                                 cases to think about so for example I                                 talked about the second notifier which                                 is my new favorite toy and example to                                 illustrate how crazy things can get Yun                                 actually pointed us out I think on the                                 mailing list when we implemented this so                                 the second body fire also lets you                                 continue syscalls                                 so you can load a second filter you                                 intercept sis calls and then you wait                                 for the container manager to make a                                 decision but by the way second was                                 designed the latest a filter that was                                 loaded the latest it's always the one                                 that takes precedent so somebody could                                 load a second notify a filter that get                                 asks for permission to continuous is                                 called before yours before your second                                 notify a filter triggers and so you                                 continue assist call all those who may                                 you may wanted to block it and so on so                                 there are really we are tricky corner                                 cases                                 so don't write your own container                                 manager oh right                                 capabilities ha yeah it's usually the                                 technically this is something I didn't                                 know for a long time technically this is                                 like you can consider it an LSM but it's                                 one that's always enabled right hmm yeah                                 and capabilities on Linux are a kind of                                 weird complicated beast like I'm not                                 going to explain how they are calculated                                 so if you they were one way of splitting                                 up the route privilege I guess that's                                 the that's the idea and we have all the                                 LS m people here you can yell at me                                 right away yes okay so to split up the                                 route privilege I mean route was able to                                 do is technically able to do anything it                                 wants to I mean we recently had the                                 lockdown patch sets and so on so even                                 that kind of is not necessarily true                                 anymore but if you often you might want                                 to delegate specific privileges to                                 unprivileged users and the big hammer is                                 obviously to give them route temporarily                                 like sudo is okay                                 interesting so okay so so even to two                                 sides to some exam so yeah okay so                                 Casey's point was a it was more about                                 the original motivation was so that                                 privileged programs could drop all of                                 the unnecessary privilege and only                                 retain the privilege that they needed to                                 perform a certain operation so that for                                 example I guess when you had when you                                 had a binary that needed to done do                                 something critical and it got corrupted                                 or there was a back you couldn't crash                                 the system for example but the other                                 also the other way is that you can you                                 can also use it to delegate privileges                                 to two unprivileged users if needed                                 earlier this was usually done by secuity                                 binaries and are insecure and so on so                                 we have a bunch of them the biggest one                                 is capsules at me and I guess them with                                 the Michael user should I give you the                                 micro so                                                        all-capable calls are sysadmin                                 yeah so capsules admin is well the joke                                 is it's the new route so splitting it up                                 has partially worked not completely but                                 you have privileges such as cap make                                 note I think which lets you respect if                                 you drop it you cannot create device                                 notes caps at UID and a bunch of others                                 caps this log you know that one and                                 paying with that one right now so that                                 you can redeem as such output and a                                 bunch of other stuff they come in one                                 two three four five different sets                                 effective inherited permitted ambient                                 bounding let it be known that for all                                 you care only actually care about                                 effective right now because that's what                                 the kernel uses to check whether or not                                 you can perform an operation and                                 permitted is regulating which                                 capabilities you can gain but it also                                 interacts with the founding capability                                 said and and inherited is how you and I                                 guess in                                 but that doesn't work correctly so you                                 have ambient capabilities which are a                                 way to get around that and there is like                                 I'm I'm not joking                                 almost curse but I won't if you do man                                 capabilities and you look at how                                 capabilities are calculated you will see                                 set theory like you know the                                 intersection of joined with it's fun so                                 it's a rather complicated then you also                                 have file capabilities which as I said                                 are an alternative to setting the set                                 UID bit so for example you can say you                                 can set the Cape Mac not file capability                                 on a given binary and if you execute                                 that binary that process will gain the                                 Cape can make not a capability and then                                 can create device nodes the interesting                                 part about capabilities is that as with                                 most privileges they originally were                                 only charged against the initial user                                 namespace so asking for example do I                                 have the capability to create device                                 nodes or to mount something was a                                 question like yeah was a question in                                 general on the system do I have the                                 capability to do this but with the                                 introduction of user namespaces                                 capabilities are now charged for the                                 most part against user name spaces so                                 capabilities have an owning user                                 namespace so instead of asking do I have                                 this capability you're now asking do I                                 have this capability in the user name                                 space that I'm currently in so for                                 example I can ask the question for the                                 initial user namespace can I create                                 device notes to have this capability the                                 answer's no if I unshare a new username                                 space because it starts out with a full                                 set of capabilities the answer will be                                 yes you can the problem is and here is                                 gets even a little bit yeah it gets kind                                 of nasty is a lot of capabilities still                                 ask the question so for a lot of                                 capabilities Cape Mac make not included                                 you still need to ask the question do I                                 have this capability in the initial user                                 namespace not in the current user                                 namespace because otherwise you could                                 attack the host again show you a bit of                                 that                                 [Music]                                 this one knowing so you can use Kappas                                 age to get to figure out like what your                                 current capabilities are I should I                                 figured out of that sorry                                 so as an introduced user on my laptop I                                 should have nothing it's good I've read                                 nothing but as Christian said                                 capabilities are tied to the username                                 space so when you ensure a new username                                 space you're gonna see quite a different                                 result which is literally every single                                 capability they are all tied to that                                 username space you don't have them                                 against the init username space                                 otherwise you would have a very very big                                 security problem but not there so one                                 thing I can show is right now I did I                                 pass an idea so I can create a new                                 network devices it's great it's there                                 now I can do a passage drop cap net                                 admin so that spawns a subchannel                                 that's got that capability dropped and                                 you're not allowed to do it and                                 obviously didn't create it I didn't I                                 should try that path with a fresh way it                                 should work so when I fact hope so for                                 that long so if I create a sub username                                 space now you've got that interesting                                 property where you get all the                                 capabilities again which                                 includes cap net admin even though I                                 just run it from your shell that dropped                                 it                                 there are ways around this too to be                                 honest you need to drop it from the                                 bounding capability sets it even I can't                                 remember how about to make things more                                 maybe slightly more confusing you notice                                 my command is still training well that's                                 because the network namespace is owned                                 by the user namespace in which I dropped                                 that capability so even though it looks                                 like I've got it I don't actually have                                 it against the right namespace sorry                                 it's still blocked right so it's the                                 same way I should have mentioned it                                 before I'm sorry about that the same way                                 capabilities have an owning user                                 namespace all of the other namespaces                                 also have an owning user namespace so                                 when you create different types of                                 namespaces the order in which you create                                 them matters so if you for example                                 create a new mount namespace but an                                 unshare user namespace the mountain                                 namespace was created before the user                                 namespace and so still belongs to the                                 initial amount                                 the initial user namespace so if I try                                 to mount something in that namespace                                 even though I have technically am owner                                 of the current user namespace I can                                 still not mount anything because the                                 capability is still checked against the                                 initial user namespace which owns that                                 mount namespace so I need to do unshare                                 username space and then unshare mount                                 namespace in which case the new mount                                 namespace is owned by the correct user                                 name space and now I can mount actually                                 that's trivial to show but I don't know                                 if you want to do it but mess with doing                                 them in different order yeah if you do                                 unshare the mountain in space first and                                 Sharon user name space I need to know                                 user name space first because I'm not                                 reachable so I need to do a second do so                                 you want to use the name space because                                 otherwise I can't do the month times                                 based and now do a math namespace and I                                 do another user name space for example                                 yeah yeah so now my first my first user                                 names my surname is based owns this man                                 name space but my new user name space                                 does not and it should still work yeah                                 it's still gonna work because it's gonna                                 work                                 but they still the same user actually                                 not yeah yeah that's correct                                 yeah yeah there is always it's                                 interesting to get the relation as we                                 were saying ordering matters with those                                 things yeah so when we have for example                                 I have a diagram later on I hope we can                                 still make it                                 you see where you see how how a                                 container Prato a container is actually                                 started and then you will see a bunch of                                 namespaces are started or are created                                 right when we create a new process so we                                 fork a new process and within a set of                                 new namespaces but some of those                                 namespaces we can create right at                                 creation time because we need to do                                 preliminary set up steps before we                                 unshare the namespace and lose                                 privileges to do certain operations and                                 then also the ownership between the                                 namespaces matters as we said Linux                                 security modules well that that's one                                 you will probably take your way more                                 experience with SELinux and armour and                                 also I don't want to get the other most                                 yeah partner really yeah so for                                 especially if you're on a privileged                                 container you do need to use the other                                 SMS to try and make things vaguely sin                                 for unfinished containers they're not                                 strictly needed but they are good safety                                 net and nice if you can use them inside                                 the container to then properly isolate                                 the applications inside the container                                 just something will show if Obama as I'm                                 talking we don't need to go into a lot                                 of details because drunk about that part                                 wait very much like that to be mainline                                 and work great that'd be amazing close                                 but it's it's been slow going and                                 there's a lot of complexity so it's                                 something we obviously look at quite                                 closely right now the main thing we use                                 on our side is it's a Pama which does                                 support like inside a palmer                                 factory namespacing mechanism which lets                                 us know the profile outside applied to                                 the container make it look like inside                                 the container it's got a clean slate and                                 then that the container had self load                                 additional profiles just like if it was                                 running on the host                                 that's that'd be great to have for all                                 the NSF's but that's the right way off                                 and for for unprivileged containers yes                                 the fun mentioned it's it's more or less                                 optional it's an additional safety net                                 because                                 unprivileged containers and especially                                 with the username space are considered                                 to be safe by default so if you can                                 break out of a container it is not LSM                                 confined which is unprivileged and it's                                 probably it would be a CD it would be a                                 carnal bye I mean yeah usually if you                                 can escape on a previous container it                                 also means that you could get through it                                 from a normal individual on your system                                 so it's usually pretty bad yeah for for                                 privileged containers so UID                                          and outside of the container mean the                                 same thing you will have to use LSMs if                                  you want to have any kind of safety                                  guarantees August the one exception to                                  that would be if you were to never have                                  anything running as root in the                                  container if you're running intelligent                                  previous user then it's not quite as bad                                  but if you're gonna have anything                                  running as root inside the previous                                  container then LS I'm some pretty much                                  on my list now for the demo part of this                                  one ok so my flippers running Ubuntu is                                  we've got Obama on it if I look at my                                  current process is not confined so it's                                  raining and confined there we can use a                                  existing loaded profile and switch that                                  even as a previous user we obviously                                  can't just load additional profiles                                  right that way but we see that that                                  particular terminal is now under that                                  profile is being enforced to show                                  something slightly more interesting as                                  far as how that stuff works and that's a                                  bit painful to just do from a straight                                  channel so I'm just gonna spoon lxd                                  container okay now if we look at that                                  container I guess it's the bid of its                                  init system                                  and let's look Proc that paid tribute                                  and and we see that super confusing                                  string that's because first of all we                                  like using complex names from profiles                                  in next e in general because we don't we                                  want to be possible to run multiple XD                                  instances on the same system especially                                  for testing environment and not have the                                  profiles ever clash so the path in                                  that's used for Lex D storages encoded                                  in the name of all the profiles and                                  namespaces which makes it quite a bit                                  longer so Alex DNA's cost C                                             is a namespace we also have Alex T and                                  it's got C                                                           makes that string just much more                                  confusing and we see at the end that the                                  profile that's going to be seen inside                                  the container it's gonna be and confined                                  so we can go look at that C                                               rooted in the container if I go to look                                  at my my view I see unconfined but                                  you'll also notice that that popular                                  container hands a bunch of profiles set                                  up that are currently loaded it's not                                  really easy to show against but like                                  quickly doing now it's not that tcpdump                                  process or checkin I guess we can check                                  it from there if we go look crap I                                  should just go back in the container so                                  we get another side in the container and                                  we're gonna look at the TCP dump process                                  and it's confined with a profile that                                  was loaded from inside the container so                                  that spirit does the state of things                                  with with Aparna we're hoping to get                                  done and more with all of the others we                                  can start mixing matching and having a                                  few containers running under cylinders                                  if you can't hang on Aparna that'd be                                  great for us because we obviously build                                  and provide images for things like                                  CentOS where there are etc a form for                                  the container images and right now when                                  you run them on the Ubuntu stellar                                  they're gonna get in a tunnel namespace                                  and not do much with it if we could set                                  up say Linux in the container then they                                  would be able to have enforcement which                                  would be nice yeah and last but not                                  least I think this is that to some                                  extent a cherry on top see groups which                                  are mostly concerned with resource                                  isolation I guess a resource restriction                                  but there are some there are some                                  oddballs in there actually                                  OSI groups how many people are using C                                  groups I would be interesting okay quite                                  a few I mean the rest our leaders don't                                  know                                  yes but actively yes you're not using                                  system D but when examining system did                                  you think secret room runs in a                                  dedicated C group but you're using v                                      v                                                                        okay that's also quite a bunch of people                                  so reese's limitation so we're talking                                  about stuff like cpu block i/o and so on                                  and we use it for every container so                                  even if you so because even if you're an                                  unprivileged container and you have you                                  create a fork bump or fork bomb for                                  example inside of the container you                                  could still exhaust all well pit                                  namespaces give you some control but you                                  could still create a lot of processes                                  and then possibly prevent starve the                                  hosts of pits especially if you run in                                  the same pit namespace which some                                  container runtimes do which is a bad                                  idea but                                  that's there's definitely a problem and                                  but you have the pitsee group and the                                  pitsee group lets you limit how many if                                  how many processes you're allowed to                                  create so you could you move your                                  container into a separate pitsee group                                  and then set on a set a limit on how                                  much processes it is allowed to create                                  and if it has exhausted that limit it                                  will get I guess in oh man and cannot                                  create any new processes anymore                                  the same thing with how many CPUs is it                                  is it will it be able to use the CPU set                                  controller at least in legacy in the v                                   hierarchy would let you restrict how                                  many CPUs you could use that say you had                                  a                                                                         this container to execute on CPU                                         CPUs then you could move it into a                                  separate C group and then restrict the                                  CPUs it is allowed to execute on so they                                  allow you to restrict resources block I                                  owe the same thing then there are a                                  bunch of oddballs in in the C group                                  hierarchy the devices controller for                                  example is kind of odd in the sense that                                  it's not necesarily resource restriction                                  but it's permission risk it's actually                                  more sort of indirection of respecting                                  permissions the C group devices                                  controller lets you specify which                                  devices a container can or can't access                                  sort of the same way as a black or a                                  white list and you have the freezer C                                  group which lets you freeze a set of                                  processes so for example what I tended                                  to do for a long time even though it                                  didn't work correctly was when I when I                                  started I started chrome and I didn't                                  all of the time wanted to shut down the                                  browser and then have all of the you                                  know if you have to reload my taps and                                  so on so what I did instead I have it in                                  a separate C group and then s sent a                                  signal into the freezer C group and                                  chrome just got frozen whole processes                                  and then later on when I needed it I                                  continued it this is also kind of an odd                                  controller so you have a bunch of a                                  bunch of controllers that don't really                                  fit into the whole resource restriction                                  a picture that C groups give you but we                                  make heavy use of it a problem is Oh                                  one of the problems is it comes in two                                  different incompatible versions so it                                  comes in secretly one and see groovy too                                  so for example one of the major the                                  delegation model so if you want to                                  delegate processes if you want to                                  delegate see groups to to a process then                                  the models on how to do this in b                                       b                                                                       sparing you two details right now                                  another glaring example is that C Group                                  B one is a complete pseudo file system                                  so it means you mount the secret file                                  systems you mount the specific                                  controller such as the cpu set                                  controller which restricts on what CPUs                                  you can execute and the way you set up                                  the CPU set C group that you just                                  created is by writing into a bunch of                                  file so you always go through the file                                  system that has race conditions okay                                  that's a problem but it was at least                                  nice and easy to do this with C groovy -                                  we now have a model where part of the C                                  groups are filesystem based such as CPU                                  said and I guess IO and memory but some                                  of the C but some of the C groups now                                  are BPF base so the device the C Group                                  controller is a BPF controller which                                  means you cannot configure it by going                                  to the file system anymore                                  so you see this poses a lot of problems                                  if you think about scenarios where you                                  have a new system that uses the secret                                  v                                                                       your system there's only as the new                                  secret v                                                                 run containers that contain now you want                                  to run containers that run systems and                                  especially in init system in this case                                  system lis usually that doesn't know                                  about the secret v                                                      not about newer features of the secret                                  v                                                                         won't work anymore because it considers                                  it crucial so the problem that you have                                  is running distros that only understands                                  the group hierarchy v                                                  understands or only uses the group                                  hierarchy v                                                      especially if you consider that a lot of                                  people use containers to run legacy apps                                  in                                  they don't want to run on a host anymore                                  which so you have an incompatibility                                  right here it's otherwise a great tool                                  but we're working on ways to get around                                  this problem oh yeah resource                                  restrictions cgroups is the tool to go                                  yeah the other thing that's worth                                  mentioning is see groups are not always                                  particularly nicely integrated in a                                  camel so one of the the thing you'll                                  notice is if you set a limit on your CPU                                  set so just pin to us a specific number                                  of cores and then you set some memory                                  limits you would potentially expect to                                  see that in proc CPU info or POC mem                                  info or in tools like free but you're                                  not you're those files will always show                                  you the the global system resources they                                  will not show you your actual                                  restrictions which then reacts havoc on                                  applications that go and look at those                                  files to figure out to what they can                                  actually use on the memory side like                                  Java is known for blowing up quite badly                                  whenever it's got a memory limit applied                                  it's a problem we've hunted for a long                                  time and that we've worked around on our                                  side by having a fuse file system called                                  elect CFS which inspects your processes                                  cgroups                                  and builds virtual versions of those                                  files that can be mounted over the real                                  the real thing so I'll be showing that                                  to                                  okay                                  so only on a deck system we can look at                                  the list of secret controls are                                  supported on a machine as well as the                                  number of C groups that have been                                  created on the system there's a looking                                  at proxy groups we should mention this                                  is a v                                                                  at box LC group then you get your path                                  in every one of those two group                                  controllers in this case I actually see                                  both of our keys so all of the                                  individual controllers v                                                one at the end is a v                                                    most Linux distributions have a hybrid                                  model where the process tracking the                                  system d-does is done in an empty                                  Victoria RP so there's no controllers                                  attached to it there's no resource                                  control going on there but the the                                  process tracking itself happens in the                                  hierarchy well as v                                                     resource control so any cpu bit memory                                  limit you might have in place are all in                                  the v                                                                those are traditionally mounted under                                  sis MSC group so you can see physically                                  one actually per controller and if you                                  go look inside one of those you see all                                  the individual files that you can write                                  to you to apply limits and then the                                  actually is not been created for for                                  your users right they're all separate                                  usually usually they're all separate                                  mount points so what most Linux                                  distributions do is they mount every                                  controller so every on every one of                                  these controllers is usually concerned                                  yeah you see it right here net seal has                                  huge TLB devices cpu set memory pit CPU                                  and so on are all concerns with                                  different kinds of resources or at least                                  let you restrict resources in different                                  ways and what most distributions to for                                  the Wii one hierarchy is have separate                                  mount points for all of them so you see                                  we've exceeded exceptions there's :                                  thing going on for CPU standpoint oh                                  yeah so this right here is the type of                                  control that it is currently mounted but                                  there is no restriction on how you can                                  actually mount them so it's you you                                  could                                  example and some Linux distributions a                                  long long time ago used to do this set                                  up a single mount point and then Co                                  mount all of the controllers into a                                  single hierarchy at which point all of                                  the files that are usually just located                                  on the freezer will show up alongside                                  device the CPU said memory pits and CPU                                  and so on files under one directory that                                  model is completely gone with the C                                  group B - hierarchy with the C group B -                                  hierarchy you only have a single mount                                  point and then controllers are enabled                                  or disabled by writing to a file                                  specific to the C groovy to mount so                                  this is really completely different just                                  in the way they are they are set up as I                                  was saying CPU and CPU accounting and                                  network plus and network something else                                  are commented so like hey if we look at                                  C's FSC group CPU we can see that we                                  have got both CPU dot files and CPU                                  accounts dot files so that's what                                  happens if two controls are commanded                                  if we were to do the was kissing iron on                                  them all together and you love                                  everything in in one shot so first we'll                                  just try so the usual I want a piece on                                  in space I want routine that okay I'm                                  interested in my bid                                  okay so I'm switching to another                                  terminal I'm gonna get actual route in                                  this one someday I will create a new C                                  group and the bids controller so it's                                  called a demo then we echo the pit of                                  the process for training in D in that                                  namespace and wisdom that into monistic                                  return c group first for further process                                  yeah yeah sure okay so currently the bit                                  controller is under some system the                                  generated thing for the process so now                                  I'm moving it into that C group so we                                  see it's been moved to slash demo                                  in that one I can now check the number                                  of processes so we've got one process                                  running in there and my process limit is                                  currently max now let's see I'm gonna be                                  annoying and literally a single process                                  for let's see group what do you thinks                                  gonna happen if I try to run any command                                  in there now this happens so yeah that's                                  not gonna go so well even she is going                                  to give up I think but we can go and be                                  nice so let's bend up to five okay so                                  that's one of the controllers and how                                  they work you could do the same thing                                  with any of the other result controllers                                  and yeah you could actually unshare the                                  secret namespace and remount it there is                                  also a way with the C group the secret                                  namespace that lets you restrict right                                  now you still see the full path right                                  you you can guess that on the host I'm                                  located in the C group sisyphus C group                                  hit                                  what is it paid slash demo and if you                                  what's the one for C group our capital C                                  capital C yes if I look I'm in all those                                  C groups right now                                  sorry front least five is not enough                                  fine there you get done you're happy                                  there we go                                  so I'm still in the exact same C groups                                  it's just none that have been shared a                                  secret namespace whatever C groups I was                                  in now becomes the root as far as what                                  the container sees receptive stuff note                                  you still now use the finest and andis                                  you still need to remount the actual C                                  group file system because the actual C                                  group file system currently still lets                                  you access all of like the whole                                  hierarchy yeah that's gonna be pretty                                  confusing now so right so if you now do                                  a remount of the C group Pizza glue                                  controller then yeah /o rebounds Wow I                                  do new mountaintop does that work                                  oh I have done finger and shadow                                          already mounted ok but not I've got a                                  month in space I don't care I can                                  unmount it so or not you think I can                                  remount it much like an arena ok nope                                  because I'm not the owner of the                                  original Matt yeah okay                                  anyway normally we don't have you up                                  that pump of containers because we just                                  make sure they don't see under the sea                                  grooves in the first place then they                                  just mark in copies yeah just obviously                                  not the case here mossie group stuff we                                  can show the slightly more interesting                                  cases of do you remember I've got that's                                  c                                                                         right now let's just see what's going on                                  it now so if I go there I look at my                                  memory of God I see all the entirety of                                  the                                                                     four CPUs                                  now let's mess with the cgroups a bit CP                                  equals two limits memory cores one gig                                  and go back in now and now we've got the                                  limits applied nothing so as I mentioned                                  those files normally you would see the                                  entirety of the system the only reason                                  why was in the right thing is because                                  with mounted like CFS and that over                                  mounts all those files with the real                                  thing now if we won if they weren't here                                  so if we about to announce viewing for                                  name info then even though I've got a                                  limit in place I see all of them so now                                  the software not stopped wearing in that                                  container would get very confused                                  because the back oh I can use                                             ram try to look at                                                       really they will see for example you                                  have                                                                  pre-allocate                                                              obviously if you have restricted it to                                  for example only                                                          yeah another thing we can see in those                                  file is we've got                                  uptime that is also covered by like CFS                                  that's because otherwise you don't tree                                  if you were to run up time you're you                                  would see your host uptime another                                  container on time so we can see we've                                  got                                                        Luc's when the init process of the                                  container was first spawned but if that                                  hadn't been mounted then we would be                                  seeing six days people kind of like                                  knowing when the container started it's                                  useful for monitoring systems in a bunch                                  of other things too so that's another                                  thing we've had to paper order with                                  black ZFS yeah so this is obviously I                                  would like different two virtual                                  machines right and so this is something                                  I mentioned before is just a real small                                  hackish diagram I suck at drawing                                  anything and I suck at diagrams so I'm                                  very sorry oh this is the best I can do                                  and it's the idea is just you have a                                  container manager and you have a                                  container over there and what usually                                  happens is that a container manager is                                  responsible for creating a new process                                  so it spawns the container but with the                                  clone system call in the Linux kernel                                  you can also specify the set of                                  namespaces that you want that process to                                  be created in and what we usually do for                                  our privilege containers is that we                                  spawn the user namespace the pit                                  namespace the IPC in the UTS namespace                                  together at the when the container is                                  set up but we don't spawn a network                                  namespace and we don't spawn a C Group                                  namespace and the reason is that for two                                  one share the C group namespace right                                  away and then move the container later                                  on to the correct C group the view would                                  be totally off so we need to defer for                                  example creating a C group namespace                                  until the point where we have created                                  new C groups for the container moves the                                  container process into the C groups and                                  then unshare the C group name space and                                  then remounted so the view is correct                                  the same way for Network Devices there                                  is an ordering issue between network                                  namespaces in user namespaces                                  so if you unshare them together and then                                  write an ID mapping then the ownership                                  of the network devices will be off at                                  least for some kernels I don't know if                                  it's fixed in the meantime so what you                                  need to do is you need to create a                                  username space first write the mapping                                  and then unshare the network namespaces                                  or the ownership for the network team                                  Isis is actually correct so you have a                                  bunch of different steps you the                                  container manager needs to do some stuff                                  for example create C groups and write                                  the limits because it's usually the                                  process that is more privileged and a                                  container that is created so the                                  container can't do this                                  group weave can itself move it in to see                                  groups if it's not privileged enough                                  given that it unshared a user name space                                  it also sometimes has to do some                                  networking set up depending on whether                                  or not it just requires privileges or                                  not and it might preserve the namespaces                                  so that it can easily attach to the                                  container and so on that all needs to be                                  done and it all needs to be synchronized                                  with what the container process setup                                  container process setup process is doing                                  which for example writes ID mappings                                  right after it created the user name                                  space meaning it makes it it basically                                  becomes route in its user name space                                  that it created then it unshared sassy                                  group name space after the C groups have                                  been created it creates the network                                  namespaces after the network names named                                  as devices have been set up and then                                  does also does the SEC home because the                                  process can only do it itself and then                                  also does its own rights as LSM problem                                  oh wait yeah yeah my rights is own LSM                                  profile and the way we usually do this                                  is by providing barriers to synchronize                                  various keys a fancy way of saying for                                  example you can do this via sockets and                                  send messages that indicate when the                                  container manager is done and tells the                                  container process to go on and then                                  finally the container process until it                                  when it finished setting up itself it xx                                  the init binary for our case we usually                                  just boot system D and then you have a                                  done container and the container manager                                  continues to supervises for the whole                                  lifecycle usually you for example poll                                  on you poll on the container and then do                                  you reap it and get the exit signal and                                  so on one of the essential and I guess                                  one of the crucial design steps this                                  when you design a container runtime                                  which is you would think is a given but                                  not necessarily is when you destroyed a                                  container manager you not there are two                                  scenarios right sometimes you don't want                                  two containers to survive when the                                  container manager exits it's usually not                                  the common case so for example we use                                  let's say we have a long-running demon                                  and a team of demons supervises a bunch                                  of containers at the same time elects T                                  and then it it has a bug                                  and the demon crashes the last thing                                  that you necessarily want is that all of                                  your containers now go down together                                  with a demon so usually what happens is                                  the containers keep on going and then                                  you can just restart the demon that is I                                  think that's one of the main design                                  principles for that we do we've got                                  actually an intermediate one per                                  container monitoring process that is                                  singleton that's gonna live within some                                  of the container if that one process                                  dies it's gonna take the container along                                  with it even then that process is                                  reasonably simple has like a perfectly                                  unique circuit at the API that we can                                  talk to to figure out what's going on                                  and get some of the every DS and stuff                                  we need to be able to attach and mess                                  with the container but we need to make                                  sure so we need to make sure that that                                  particular API is backward compatible                                  because your you might be upgrading the                                  tools docker you don't want to restart                                  the containers you need to be pretty                                  careful with those things                                  but yeah we won't if you've got a full                                  container manager that tracks a bunch of                                  containers we don't want that to be the                                  actual parent of everything this is the                                  current I I would say this is usually                                  the standard way of setting up                                  containers they I mean in a nutshell                                  system DN spawn that's the same thing it                                  also runs system containers Lexi does it                                  this way ronzi does it a little bit I                                  think it's doing it a little bit                                  differently insofar as I think Alexa has                                  written it like some sort of complex                                  state machine but this is the easy way                                  of how you would usually how you would                                  usually do it so you synchronize between                                  two processes you execute supervise the                                  container and yeah the other thing to                                  mention too like on top of the the                                  ordering of the namespaces or so the                                  ordering of the amounts because if you                                  if you want pork and sis to early you're                                  not gonna be seeing the right process                                  hierarchy or you're not gonna see you're                                  gonna have the right for the sake but                                  you're gonna like the permission on                                  toxeus net for example is gonna be off                                  because you've not you put it mounted                                  it's before you and shared an exact                                  namespace so it's still tied to the host                                  instead of the container so that's some                                  other stuff you want to make sure like                                  all the first times you mount that                                  they've got the right permission for the                                  resources you expect if not you probably                                  miss ordered something right I think                                  it's mostly it what we wanted to cover                                  and so we can do a quick recap you want                                  to do a couple of points well yeah yeah                                  yes sure yeah yeah okay so I right here                                  in this setup step so the container                                  manager spawns the process that later on                                  when it has X act becomes the actual                                  container you see that on the namespaces                                  it lists user name space the easiest way                                  to say to clarify it this is a                                  privileged container doesn't do this                                  step but in more detailed in a more                                  detailed way you can say a privileged                                  container is any container where you ad                                  zero on the host on the actual system                                  and you ad zero inside of the container                                  have the exact same meaning such that so                                  if you ask yourself the question what is                                  if a process with UID                                                  container breaks out and the question is                                  oh my god the world is going to end                                  slash my computer's shutting down                                  that's a privileged container if you                                  think about if you ready                                                 container is breaking out and you can't                                  do anything I don't really I mean I                                  still care I still don't want it to                                  happen but it's not really a big problem                                  because you ready                                                  container and UID                                                   container mean totally different things                                  that's sort of that's the crux that's                                  how so for example even with a username                                  space to make this a little more                                  complicated but I think you're all up to                                  the task so even when you create a new                                  username space you can specify for                                  whatever reason and identity mapping                                  like you can say I want a new username                                  space but I want to map UID                                                                                                                  upwards and then you you still you still                                  have the problem that now UID on host is                                  the same as UID inside of the container                                  when a breakout happens when you get                                  that process to be actually escape to                                  the host then it has all the privileges                                  and the UID                                                  so that's why we usually say as soon as                                  you have a process inside of a container                                  where you ad zero and UID                                               outside mean the same thing that's a                                  privileged container if it doesn't mean                                  the same thing then you're fine and the                                  way it doesn't mean the same thing and                                  that's what we showed before if you look                                  at any of those containers like for                                  example I see one container to do ITU                                  inside after container and you see zero                                  right here if you look at the whole                                  process tree for that container from the                                  outside in the PS aux output then you                                  see that it's a completely random                                  different ID so look at any of those                                  containers see one and then you see the                                  whole process tree right here lexy exact                                  bin bash you see it or you can see has                                  been in it and underneath you see it's                                  gonna be                                                               see you see Lexi monitory and then you                                  see the child process footage which is                                  the actual container /s bin slash in it                                  and in the whole process tree and if you                                  look at the leftmost column you'll see                                  that most of these processes run with                                  UID what is it Mon million you said yeah                                  one man                                                                 so an inside of the container all of                                  these processes would run either as UID                                                                                                          the container has a totally different                                  meaning than it has on the host that's                                  what a privilege in this case that's the                                  same process tree as we saw of it from                                  inside the container and the other thing                                  as we can see from inside the containers                                  we can look at its map which those map                                  they're always a bit confusing to read                                  but what it means is that you IDs                                       the container as you ID                                            outside the container and that there's                                  up to a billion new IDs and three IDs                                  after that so if I was to use like a                                  billion and one your ID then there                                  cannot will tell me that doesn't exist                                  but yeah you can configure that and you                                  can do a lot of things with those move                                  those Maps you can do hole punching so                                  you you can you could actually say I'm                                  gonna map UID                                                       outside and I'm gonna map UID                                            some other number outside and nothing                                  else and if you try to use anything else                                  inside the container you're gonna have a                                  bad time because that those your IDs                                  enjoy                                  which does not exist but also allows you                                  to for example like furniture holds true                                  for your own UID act if you want your                                  UID                                                                   your ID                                                                   that you'll end up with X                                               the first                                                             then after not while we're talking                                  details there's obviously also the case                                  who has paid close attention will now                                  realize so what about a scenario where                                  we have a bunch of unprivileged                                  containers running great so I have the                                  host-to-host is protected right but I                                  worry about the scenario where I have                                  two different processes that I really                                  don't want to interact with each other                                  and I'm afraid that one of the processes                                  might in whatever complicated way escape                                  into another container and if they have                                  the same mapping now you have a problem                                  that obviously the containers even                                  though they am privileged they can                                  attack each other which you might care                                  about if you have for example if you                                  have multiple tenants that all run on                                  privileged containers the way to                                  obviously solve this is by giving each                                  container individual ID Maps so I we                                  call it isolated ID map so we there is                                  an option this is also contain a runtime                                  specific but it's not magic you can                                  implement it well we can implement it so                                  you start a container you start a second                                  container and then the container manager                                  will take care that all of these                                  containers have individual ID mappings                                  that don't overlap so if a process from                                  one container escapes into another                                  container it will be an unprivileged                                  user the same way as it will when it                                  escapes to the host there are problems                                  with this obviously so the we as a                                  container manager you only know about                                  your own isolated ID mappings meaning if                                  some other container manager or some                                  other process reuses ID mappings that                                  and one of your container users or has                                  an overlap then you still have an it                                  have an attack vector because there is                                  no well there is no nice way to                                  coordinate to coordinating reserving ID                                  mappings on a system there may be a way                                  in the future to do this in kernel                                  you might have a way to not have to care                                  and user space which would be nice but                                  that requires a lot of that will require                                  a lot of thinking but there would be a                                  nice security feature and it's also for                                  us for example it's possible because                                  each container gets a separate root                                  filesystem and each root filesystem can                                  the IDs and GS obviously for all of the                                  files and the file systems get showned                                  to the mapping for their specific                                  container but now think about a runtime                                  where you what a lot of users care about                                  where you have a layered approach right                                  so multiple containers share the same                                  filesystem layer now you run into the                                  problem where you if you want to have                                  all of those containers are to have                                  separate non-overlapping mappings they                                  can't share layers because they can't                                  write to the underlying filesystem the                                  way to get around this is obviously to                                  write a file system then fakes the item                                  D ID mappings on the fly which is                                  something that we've done but this is                                  currently just an Ubuntu specific patch                                  said we are working on up streaming and                                  believe me we just needed something                                  because we've waited for a long time for                                  this                                  but the upstream solution will look very                                  different likely from what we originally                                  implemented as a as a as a POC as a                                  proof of concept but if you then have a                                  file system that translates translates                                  the IDs on the fly then you don't have                                  this then you don't have this problem so                                  there's a lot of things to to actually                                  think about yeah so as he was talking I                                  was just actually deploying those                                  containers so we've got I've got five                                  containers non-star running the first                                  two so if you've got the bottom and you                                  got the first column the first two are                                  c                                                                         they're both using million as the base                                  the base GID                                  sort of ruchi ID then I've treated two                                  more using the isolated feature and we                                  see that they're using committee                                  distinct new IDs as root and they don't                                  have any overlap in their map and lastly                                  the last one I created was using                                  privileged so we see that that one is                                  actually running as root                                  I know the username space is probably                                  especially if you haven't worked a lot                                  with this it's probably very confusing                                  it's a very complicated but powerful                                  tool so that's a quick way to recap                                  before we take a few questions so                                  continue was effectively a user space                                  fiction there's no such thing as                                  continuous in Nakano                                  it's kind of piecemeal in that you can                                  you take whatever components you want                                  put together and then you might call                                  that a container but then someone else                                  might not agree with you that this is a                                  container or not yeah it's not a joke we                                  said we once attended a conference a                                  bunch of people who all worked in the on                                  different runtimes and container work                                  space and we argue for one and half                                  hours like literally argued what a                                  container is there is no agreement and                                  as the previous slide was showing                                  building containers can be pretty hard                                  you need to do it in the right order                                  there's a lot of complexity rendered and                                  there's a lot of different Canon API is                                  that of all different concepts that                                  don't always all line up so you need to                                  be somewhat careful there also for                                  second actually added listed then at the                                  most in my study architecture                                  multiplication cannot matter you need to                                  be careful when you generate those                                  policies because if you do have                                  personalities you need to block books                                  but at the same time what was a pretty                                  easy way to bypass your filter security                                  differently matters for containers I                                  mean you're you're sharing the kernel if                                  you buy the configure and a container if                                  you pass the device shouldn't be passing                                  it's game over pretty quickly privileged                                  containers are not a good idea I would                                  not recommend anyone who starts to play                                  with any of that stuff and it doesn't                                  use give the namespaces we've done a lot                                  of work over the past few years to try                                  and make user namespaces work for the                                  vast majority of use cases and the                                  statistical interception work allows for                                  even more because now we can have the                                  container of runtime                                  mediate and fake his calls as needs to                                  get even more privileges and in some                                  particular cases resource management is                                  not something that you should just                                  ignore either and do s attacks are still                                  attacks even though they might not be                                  able to escape and take                                  you enter your host down and all the                                  containers along with it it's a bit of a                                  problem so you want to also set resource                                  limits to prevent for bombs running out                                  of memory or even things like using all                                  of your block or disc your audio disk                                  i/os or network IOT's that's all pretty                                  important to set up right especially if                                  you're going to be running some amount                                  of interested code in there don't                                  reinvent the wheel like really don't                                  there are a bunch of libraries and tools                                  out there there's a pretty good chance                                  that there's a runtime that exists that                                  does what you want and that has already                                  gone through a lot of that mess so you                                  should be using that if you can't then                                  at least use the proper libraries from                                  the different components labelled XC                                  itself that we use for our system                                  containers those also got a few pieces                                  that you can use to at least to actually                                  manage all of that in one shot if you                                  want but you can also figure we do it                                  yourself by doing the namespaces                                  yourself there's no popular library                                  around that but then you've got                                  libraries for cgroups a gazillion except                                  honor all of those capabilities all of                                  those have their own libraries that try                                  and abstract a bunch of the common use                                  cases and try to like have you avoid                                  common mistakes by having a library do                                  the right thing for you and that's it if                                  you've got any more questions I think                                  we've got about five minutes before it's                                  dinner time                                  yes well you could pull your run with                                  the microphone when you have one of                                  those a good point okay so let's assume                                  that I have a unprivileged container I                                  have some seccomp rules for example not                                  loading kernel modules even though it's                                  kinda redundant in an unprivileged                                  container we also have some C groups you                                  know the defaults basically for Alexei I                                  know your blocks on some of the system                                  calls that are kind of dangerous                                  we also block mount and i'm calab yeah                                  basically let's further assume that I                                  keep up with new kernel updates so there                                  are no known bugs in syscalls                                  how let's now let's say that an attacker                                  comes in and get a shell via an                                  application that is running in a                                  container how can that attacker break                                  out of the container and get into the                                  host and the second question basically                                  is if that's sort of not really any                                  theory about how he can get out is there                                  anything else that the attacker can do                                  to sort of mess with the system so for                                  non previous container in theory there                                  shouldn't be much they can do I mean it                                  can wreak havoc in that container so you                                  need to make sure that you don't that                                  they can't renew out of resources                                  because the most the easiest thing they                                  can do is do su they will try a fault                                  one they will try to fill the entire                                  base they will try to fill all your                                  network bandwidth use all the CPU -                                  those kind of things                                  escaping other than having a kernel bug                                  that's they're aware of that has not                                  been fixed yet there's not much that                                  should happen there                                  the one thing to be careful on top of                                  all of the kernel features is your                                  container runtime might be exposing                                  itself to the container in some ways                                  like if it's passing some kind of socket                                  or some kind of file into the container                                  that would be a way of attacking the                                  container runtime itself at which point                                  you'd be root on the host                                  so the                                  that's another common thing to keep a                                  knife on one thing that's also were                                  somewhat worth mention is like weave                                  it's not tree in experiment because the                                  Terms of Service say not to do it but we                                  have been running a future on our                                  website for years now well anyone can                                  just click a button and they get fruit                                  inside lxd container that has a                                  container nesting enabled the main idea                                  being that they can play with Flex D                                  online without before first installing                                  it locally to play with it but it's also                                  a peculiar shared environment where we                                  hand over root cells to inside introduce                                  container to anyone on the Internet                                  we've not seen problems with that yet we                                  have seen I mean the obvious with three                                  oh girl you have people training for                                  bombs with the processed image that                                  block start some people have been trying                                  to fill the file system same thing with                                  what quotas that's fine we block the CPU                                  and memory quite strictly that's that                                  works fine too                                  networking is obvious obviously an issue                                  too so we only allow access to the few                                  servers that we trust we don't want to                                  have people mind Bitcoin or whatever in                                  there or you know try to attack our                                  network so but other than that any like                                  in general if for a well-designed one                                  configured in previous container there                                  shouldn't be any way of escaping not and                                  if there is it's a critical security                                  issue in the Linux kernel that might                                  also let a and previous user even                                  outside of a container is correct route                                  so doors are usually treated as such so                                  that that obviously does mean that you                                  need to be looking really closely at                                  kernel updates if your distribution                                  supports life patching that tends to be                                  pretty useful or otherwise we usually                                  have premature policies you know as soon                                  as the camera lens the host reboots                                  whether the containers like it or not                                  because they want to be partially for                                  interested workouts to be fair for a                                  long time people have been going on                                  about rightly so I think that you know                                  that you have virtual machines and then                                  you have containers and if you really                                  really really care about security issues                                  a virtual machine but thanks to young we                                  now can say Spector                                  which you know is kind of the attack                                  surfaces I think are different still to                                  some extent but you know containers I've                                  become way more safer over time the                                  problem is usually really just at                                  running privileged containers is still                                  the standard because it's easier right                                  I mean unprivileged containers have the                                  problem did yes they they come with                                  restrictions and we usually we expand it                                  more and more when as we grow in in                                  confidence that certain kernel features                                  and certain things safe to do we expand                                  the ability of user namespaces and or                                  find feasible workaround such that not                                  just the kernel is in charge of deciding                                  when an operation is is safe for example                                  and to make not case with a second                                  modifier but we can also delegate a                                  decision to the container manager which                                  often has more context and then then the                                  kernel itself but there are definitely                                  still limitations and so running any                                  kind of workload in an unprivileged                                  container is not necessarily without at                                  least some configuration effort easy to                                  be done but the effort is worth it                                  because if the recent years have shown                                  one thing is that privilege containers                                  cause a lot of CVS and a lot of these                                  CDs and this is something I mentioned I                                  think we mentioned in the San Diego talk                                  before is a lot of those CDs would                                  simply not possible if you use                                  unprivileged containers there's                                  obviously an aspect of that the initial                                  tooling for when container runtimes were                                  written was focused on privileged                                  containers so there is precedence as                                  people are acquainted with a certain set                                  of tools and they don't want to move                                  away from these tools so you have                                  workflows established in your company                                  and so on and migrating to a more secure                                  solution comes with costs that you're                                  not necessary or it's just it's easier                                  this way but yeah it's it's problematic                                  and I think that's also part of the                                  reputation will for a long time that                                  containers were considered less safe yes                                  their work they are less safe if you                                  don't use in the right way if you don't                                  use the security features that they give                                  to you for sure I mean the question that                                  I think people need to ask themselves is                                  for the use case I have is it really                                  licensed and necessary that I use a                                  privileged container or is it just that                                  it makes life easier right now so it's                                  the security versus you know easy set up                                  kind of question that you need to ask                                  yourself and it's not a performance                                  thing right I mean user namespaces don't                                  really come with a performance it even                                  if you nest them a lot I've done the                                  work to be able to or if you set up like                                  a lot of complicated mappings you can                                  specify all kinds of crazy mappings                                  inside of user name spaces even if you                                  do this and you have like crazy amounts                                  of mappings that you have specified and                                  if you do the actual performance                                  comparison and cycads not really                                  relevant so performance is not even an                                  issue so if you're worried user name                                  spaces might come with performance cost                                  no not really                                  we're out of time because it's bit after                                  six already                                  we'll be around so if we've got more                                  questions just come to the front we will                                  answer those thank you                                  [Applause]
YouTube URL: https://www.youtube.com/watch?v=5KydVxAvLOA


