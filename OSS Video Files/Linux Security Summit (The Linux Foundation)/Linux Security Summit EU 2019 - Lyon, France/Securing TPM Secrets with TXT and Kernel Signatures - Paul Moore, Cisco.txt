Title: Securing TPM Secrets with TXT and Kernel Signatures - Paul Moore, Cisco
Publication date: 2019-11-04
Playlist: Linux Security Summit EU 2019 - Lyon, France
Description: 
	Securing TPM Secrets with TXT and Kernel Signatures - Paul Moore, Cisco
Forum 1

Speakers: Paul Moore
This presentation will discuss a work in progress to secure data in the TPM2’s NVRAM using Intel’s TXT and extensions to tboot to support kernel signature verification. The ultimate goal being the ability to restrict access to TPM2 stored data to only those kernels which have been signed by an authorized entity while being robust in the face of kernel upgrades and downgrades.

The talk will discuss the design, and current progress, in the context of existing solutions using traditional TXT and UEFI Secure Boot; explaining why these solutions fall short either in terms of protection or usability.
Captions: 
	                              so I'm gonna be talking about today I'm                               going to be talking about securing TPM                               secrets with txt and kernel signatures                               rolls right off the top but first I've                               got a disclaimer like some other people                               though mine's not legal it's a little                               more technical in nature I'm not talking                               about secure boot today but I will be                               talking a lot about some of the secure                                boot technologies a lot of what I'm                                trying to do is not necessarily prevent                                you from booting a kernel or a different                                command line or different nit idea in                                your system I just want to make sure                                that if you're gonna access secrets that                                are stored or rooted in the TPM I want                                to make sure that you're running a                                kernel that I've authorized with a mid                                Rd and a kernel command line that I have                                approved and so I use a lot of the                                secure boot technologies to do that but                                I'm not trying to implement secure boot                                in the traditional sense of lacking out                                you know invalid or unauthorized OSS                                from booting on your system also I'm                                focusing on Intel's txt solution                                although in principle you could take the                                same approaches that I've talked about                                today and use it with AMD's mechanisms                                as well it's just this is testing and                                developing on happens to be an Intel                                system so that's what I'm using so first                                of all what is the problem what am I                                actually trying to do here well I've got                                a bunch of Secrets that I want to store                                in my TPM for the sake of arguments                                let's just say these are storage                                encryption keys but really they could be                                anything that you want to store the TPM                                as I kind of alluded to in the last                                slide I want to restrict access to those                                secrets to just kernels that I've                                authorized kernels that I've signed now                                I I'm saying that I've signed but really                                this could be anyone that you trust so                                if you happen to trust your distribution                                vendor that's fine                                doesn't really matter from this                                particular case and here's the kicker I                                need a solution that works both on the                                latest and greatest UEFI systems but I                                also need this to work on older UEFI                                systems that maybe don't support you if                                I secure boot                                as well as older systems that are still                                booting a legacy BIOS or newer systems                                they're still using legacy BIOS for that                                matter                                and finally because I like making things                                difficult I want to make this as easy to                                manage as I can I need to be able to                                handle updates gracefully these might be                                systems that are stashed away in a data                                center somewhere and I need to just be                                able to do a system update on it and not                                have anybody go out and touch the system                                because that's that's difficult that's                                hard it's error-prone something will go                                wrong so that's that's kind of what I'm                                trying to solve here so first we know                                we've got secrets in the TPM so a quick                                little refresher slide on how you                                actually protect things that are stored                                in the TPM hopefully this is not new to                                anyone but common way of securing                                secrets are in TPM are to you know seal                                them against a set of pcr values once                                again common approach the TPM protects                                these PC arts from tampering you know it                                works really well we've heard plenty of                                talks so far at this conference and in                                previous conference about this I want to                                go into too much more detail but if you                                have any questions feel free to                                interrupt me so ok great so we have the                                TPM with our secrets in it we've got                                them sealed to a specific set of PCRs                                how do we actually go about setting the                                PCRs especially in early boot because                                some of these TPM secrets that we have                                we might need to access before we've you                                know got a full user space up you know                                for example if this is a storage                                encryption key this might be the                                encryption key that we use to protect                                the root filesystem so we need to be                                able to unlock this as soon as possible                                or at least I want to be able to unlock                                this as soon as possible for this                                 example so the easy way to go about                                 setting these TPM PCRs is through secure                                 boot once again it's not a secure boot                                 talk but I'm going to be talking a lot                                 about secure boot secure boot measures                                 the system States into these PCRs I                                 think once again this                                 something that we're all aware of not                                 necessarily knew this you know could be                                 the firmware itself this could be the                                 firmware configuration bootloader kernel                                 etc etc and the basic idea is you know                                 we heard this even in the last talk you                                 know when these components of the system                                 change the PC our values changed so you                                 can detect when something has gone on so                                 pretty pretty good way to do this and                                 now we're going to detour even further                                 off into secure boot and I'm gonna give                                 you a quick little overview of a couple                                 of the main secure boot mechanisms these                                 there's obviously more approaches to                                 secure boot but at least in the generic                                 x                                                                    first one I think we've we all know                                 about this UEFI secure boot it's a                                 static root of trust model that builds                                 up a root of trust by verifying the                                 signature of each firmware blob that it                                 executes this includes the main system                                 firmware as well as the firmware of any                                 PCI add-on cards you might have such as                                 raid controllers network cards that                                 might be doing pixie or ice cuz a year                                 who knows whatever else you might have                                 the public key is embedded in the                                 firmware and I think we all know that                                 Microsoft controls the primary keys and                                 that's important because even though you                                 can add your own key into there you're                                 still probably going to be relying on                                 that microsoft key if you're using any                                 of those PCI add-on cards because odds                                 are you're not going to be able to get                                 the company that ships you your RAID                                 controller card to use your individual                                 key to sign their firmware if you do                                 manage to do that just shoot me an email                                 let me know how you did that because I'd                                 be curious                                 anyway knew if I secure boot works                                 pretty well for what we're doing PCR                                   if you're not familiar with UEFI secure                                 boot PCR                                                                signing authority so this is basically                                 the certificate that's used to perform                                 the kernel signature so this is great                                 this would effectively get me what I                                 need this gives me a nice stable PCR and                                 the tea                                 p.m. that I can use to seal to and it's                                 going to reflect the signing authority                                 of the colonel so I could sign my                                 colonel and I could see a nice                                 consistent PCR value in PCR seven and as                                 long as I didn't change my signing key                                 it's going to be the same no matter what                                 colonel I run so if I only had to worry                                 about modern UEFI systems this would                                 probably be a great solution but                                 unfortunately I'm not quite that lucky                                 which kind of brings us around to the                                 other secure boot technology that gonna                                 kind of focus on today and I'm gonna go                                 through this slide kind of quickly                                 because I've got some some more diagrams                                 towards the end of this talk we're gonna                                 go into how this works in detail but                                 basically the big difference is whereas                                 UEFI secure boot is a static root of                                 trust the t xt is a dynamic grid of                                 trust and what i mean by this is t xt                                 doesn't necessarily you know have that                                 iterative approach where it's going to                                 verify the signature and every firmware                                 blob that it loads and executes it's                                 going to be triggered by the processor                                 when it executes a specific instruction                                 it's going to load something called the                                 s in it ACM authenticated code module                                 which lives in the firmware it shipped                                 on most systems that support txt now it                                 used to be you had to go out and get it                                 separately but I think those days are                                 mostly passed and this firmware works in                                 conjunction with some special magic in                                 the processor and in the chipset and in                                 other parts of the firmware to basically                                 kind of throw up a hard boundary so that                                 anything that happened on the system                                 previously can't influence what you're                                 about to do next in this GRT of this                                 dynamic root of trust kind of                                 measurement phase so it's it's                                 unfortunately it's closed source so you                                 can't look at the ACM so that's why I                                 kind of say it's it's a little bit of a                                 magic here but it is kind of a neat bit                                 of functionality so on once you're in                                 this little bit of magic code you're in                                 this dri TM environment this is where                                 the measured launch environment kicks in                                 and this if you're familiar with T boo                                 which is the bootloader that handles txt                                 for Linux this is where to boot comes in                                 and this is where you can go ahead you                                 can measure the kernel your NIT Rd or                                 command line basically do any other                                 sorts of measurements that you want to                                 do and you can you don't have to worry                                 about like I said you know a malicious                                 firmware something that was there                                 previously coming in tampering with you                                 you've got a clean state there's only                                 one core that's executing on the system                                 all the memory mappings have been locked                                 down so it's a it's a it's a safe space                                 for you to get your measurements the one                                 unfortunate drawback is T hood as it                                 works right now just does hashes of the                                 kernel the indeed Rd in the command line                                 so every time you load a new kernel                                 every time you change the command line                                 every time you have a different and it                                 Rd those PCRs are gonna change on you                                 which makes it difficult whenever you                                 need to apply an update those PCRs are                                 going to change it's not a stable base                                 for you to steal your secrets to so now                                 we've got a little understanding of                                 secure boot we know what the problem is                                 how do we actually go about solving it                                 well as you said before we need to use                                 secure boot because this is really the                                 only way we can set those TPM PCRs                                 before the kernel in the user space are                                 up and of our two options we've got UEFI                                 secure boot which gives us that stable                                 PCR it's great it only works on modern                                 UEFI systems so that's a deal-breaker                                 for me maybe not for you                                 Intel txt works on all the systems                                 pretty much made from quite some time                                 from Intel but it doesn't have that PC                                 our stability that I need so that I can                                 steal secrets too so lessons to kind of                                 take away from this signature based PC                                 ours are stable that's good                                 txt works regardless of the firmware                                 type so that's also good                                 I'm goodness there's a little bit of                                 fine print here if you're looking at                                 most modern distributions which support                                 UEFI secure boot specifically fedora or                                 rel if you're using grub they disable                                 the multi boot to capability which is                                 what you need to boot T boot so it's a                                 it's a chain loader so if you're gonna                                 try to duplicate any of this on Fedora                                 you do need to rebuild your grub so that                                 you can do this or use some other boot                                 loader if you're noticing doing that                                 come talk to me I'm here all day I'm                                 more than happy to explain how to get                                 that working but it's kind of it's a                                 little more involved that we can do in                                                                                                        one last little lesson to take note here                                 is that when you're using txt the                                 verification of the kernel command line                                 the Anette Rd that all happens in T boot                                 which is a piece of software so it's not                                 this magical piece of firmware it's not                                 hardware it's not a piece of software                                 that needs to get signed by Microsoft or                                 some other identity this would be                                 software that you can modify and do                                 whatever you want with so this kind of                                 starts opening up the proposed solution                                 this gives us a path forward we're going                                 to do is I'm going to extend T boot to                                 support signature verification using the                                 peak off format first of all if you're a                                 TPM nerd did you catch the little joke                                 extend yeah okay second time I tried                                 that's didn't work the first time either                                 but anyway so the PD caught format if                                 you're familiar with UEFI secure boot                                 this is the this is the format these                                 four they're signed kernels both Windows                                 and for Linux so if we can leverage that                                 same format this means that you can have                                 a build system which just churns out                                 signed kernels and it'll work in UEFI                                 secure boot as well as this proposed                                 solution so you don't have to do                                 anything special in fact the prototype                                 I've got working right now I can just                                 take a stock Fedora kernel and it just                                 works I don't need to rebuild it I don't                                 need to Reese I knit if I want to use                                 the fedora signing keys and it works                                 just fine the other thing we'll need to                                 do in addition to teaching                                 tea boot and giving it the smarts to                                 handle this format and do all the                                 signature verifications we also need to                                 extend the tea boots policies to have                                 support not just for the hashes but we                                 want to give it support for these                                 certificates that I used to sign the                                 kernels so that's it there's no changes                                 to that SNA CM so you don't have to                                 worry about you know loading a new                                 firmware blob or anything these are all                                 changes that you can do you can look at                                 the source code build your own binaries                                 it just works so here's where my                                 horrible delinquents come in this is                                 actually the the txt boot process and I                                 know the T boot maintainer is here my                                 apologies if I screw this up a little                                 bit but this is how I understand it to                                 work and I'll try to make note of how it                                 works currently and the changes that are                                 going to happen as part of this proposed                                 solution so the first thing is you know                                 your system comes up you've got your                                 bootloader grub whatnot and you need to                                 change boot into T boot T boot is                                 effectively its own bootloader so if                                 you're using grub use the chain chain                                 loader mechanism and you fire up T boot                                 and the first thing in T boot does it                                 basically performs the usual number of                                 sanity checks you know make sure that                                 you've got the right hardware and                                 firmware so that you can actually do txt                                 and that's that's pretty much it before                                 it starts the dr TM process and then T                                 boot goes ahead and execute that special                                 CPU instruction which then jump starts                                 this whole txt process this fires up the                                 ACM code which goes off does it's magic                                 locks down all the other cores you know                                 protects the memory does all these                                 wonderful things and some of the                                 important parts that it does is it                                 actually verifies the and I might be                                 getting ahead of myself this is where I                                 should have paid more attention when I                                 was doing these slides yeah so okay so                                 it sets up the system and it gives you                                 this nice safe dr TM environment and                                 then you've got the txt launch control                                 policy                                 which is rooted in the TPM and when I                                 say rooted in the TPM it's not actually                                 stored inside the TPM because the TPM                                 has a limited amount of storage space                                 but it's a signed blob and it's verified                                 by secrets that are stored in the TPM so                                 you don't have to worry about that and                                 this launch control policy this goes out                                 it's configurable by you and you get to                                 tell it what you care about on your                                 system so you can have it go off and                                 measure the BIOS on the system the                                 firmware configuration and most                                 importantly the t boot binary itself                                 because you want to ensure that you're                                 running the t boot that you think you're                                 running is obviously you know you could                                 go ahead and load in a malicious t boot                                 which would do all sorts of things and                                 you know bypass all your wonderful                                 protections so at this point once the                                 launch control policy has been you know                                 executed and it's signed off on                                 everything you know that the system is                                 booted up the T boot that you expect it                                 to be running the all the firmware                                 checks that you've told it to enforce                                 have been validated in the systems in an                                 ok state and at this point it hands                                 control back over to T boot itself and                                 this is where some of the stuff starts                                 to come into play that we're talking                                 about with the kernel signature                                 verification and whatnot and this is in                                 the THC terms this is the measured                                 launch environment or T boot and from                                 here we have another policy it's called                                 the verified launch policy it's actually                                 kind of contained inside the launch                                 control policy but conceptually it's                                 easier to think of it as a separate                                 policy I think and here on the current                                 txt this is what has the hashes of the                                 kernel the internet Rd and the command                                 line that you want to that you're                                 basically going to authorize to start up                                 I'll be extending that so that we can                                 optionally insert certificates as well                                 and you can use those so that as long as                                 the sometimes of the kernel in it Rd                                 whatnot has been signed by that                                 certificate or something and that's                                 get chained it'll get authorized and                                 once again rooted in the TPM so you've                                 got a nice way of verifying that this is                                 the policy that you've set up and T boot                                 just basically goes through and performs                                 either the hash checks if you're using                                 you know hashing or it goes ahead and                                 does all the signature verification if                                 that's what you're doing and then                                 finally when it's done one of the last                                 things is it updates the PCRs right now                                 there's a handful of PCRs that doesn't                                 updates those with basically the the                                 signature of the policies that it's been                                 using for verification as well as the                                 hash measurements of the kernel that are                                 D and whatnot moving forward and this is                                 still kind of TBD this is a work in                                 process but we're also going to include                                 some where we'll have the hash of the                                 signature Authority which is used to                                 sign the kernel so that that will be                                 much like we had P cr                                                   boot this will be a similar concept and                                 that will have a nice stable PCR that we                                 can use for sealing data that will stay                                 constant as long as the kernel signing                                 Authority stays constant and then once                                 all that is done then T boot like any                                 other bootloader goes ahead you know                                 bootstraps and it starts up the kernel                                 using the kernel in the annette argue                                 that it's verified that's pretty much it                                 so current status prototype is still                                 work-in-progress the kernel verification                                 is working I'm not actually enforcing                                 anything but the t boot code does                                 actually go out and check the check the                                 kernel make sure the signature checks                                 out and all that just recently just                                 before I came here I got it working with                                 certificate chains which is nice because                                 most people aren't necessarily going to                                 have just one self signed certificate                                 that they use they're going to have a                                 chain of things the policy the                                 extensions to the tegu policy to support                                 signature verification                                 as well as updating PCR those are both                                 works in progress that's why I'm moving                                 on to next but that in theory should be                                 much easier than doing the signature                                 verification at least hopefully there'll                                 be a lot less asn.                                                       code there's a link to it up there make                                 sure you check out the working txt sig                                 branch the master branch is basically as                                 has an import a fork of the core tea                                 boot code the txt sig branch has all the                                 changes now I will caution you this is                                 prototype quality code so please don't                                 judge me by this code it's kind of ugly                                 still but it's it's getting better so                                 anyway if you're interested feel free to                                 check it out                                 on the off-chance this is something                                 you'd like to contribute to definitely                                 check it out and send me some email I'd                                 be more than happy to have some help                                 open issues that we still have to                                 resolve I've been focusing a lot on the                                 signature verification of the kernel                                 itself haven't necessarily looked at the                                 anit ID or the command line just yet                                 however this is a problem for UEFI                                 secure boot as well and there are a few                                 workarounds for UEFI secure boot                                 actually kind of cool you can bundle the                                 unit Rd and the kernel command line into                                 one big blob that gets executed it's                                 it's kind of cool                                 so that theoretically theoretically                                 should work with this approach as well                                 so that would probably be the easiest                                 thing to do but obviously if there's                                 another approach we can adopt that -                                 like I said that's this is really kind                                 of still undefined to be determined                                 thing yeah and in the meantime even if                                 we don't necessarily solve this the                                 Watie boot works you can still use the                                 digest hash verification for the command                                 line and the the ended Rd that was I                                 would still work it would somewhat go                                 somewhat against what we're trying to                                 accomplish but that is a fallback if                                 nothing else                                 and lastly upstream acceptance is still                                 a bit to be determined                                 my apologies if I'm putting words in                                 your mouth but I think so far the                                 prototype has been well accepted and                                 we're gonna be having some talks with                                 the maintainer later today so hopefully                                 we'll we'll nail that out but anyway                                 that's it if you have any questions                                 that's my email that's my twitter you                                 can feel free to get in touch with me                                 and like I said I'll be here for the                                 rest of the as well and I think we've                                 done pretty good on time so I think we                                 got questions see I wasn't kidding it                                 was a lot more confusing wasn't it oh                                 there's one                                 Saved by the T boot maintainer                                 great speech thank you my question is                                 how how is their idea to store                                 certificate for verification because                                 storing them in DPM                                 in my opinion isn't a good good good                                 idea so you have to manage some other                                 way to to pass it to Tibbett in some                                 secular way excellent question and I'll                                 just preface it by saying this is still                                 a work in progress                                 I just got certificate chains working                                 before I came out here I think the the                                 initial goal is they'll obviously need                                 to reside as part of the policy the                                 verified launch policy which is                                 currently as I understand it stored                                 inside the launch control policy which                                 exists outside the TPM with the                                 signature being verified by a key that's                                 stored inside the TPM so I think by                                 storing it in the policy and not inside                                 the TPM that should alleviate the                                 problems of limited TPM storage or so I                                 envisioned it if you see any problems                                 there please let me know questions                                 a great talk thank you I wasn't clear in                                 the order of the components during the                                 load I mean is there a secure boot                                 loader that's Linux shim grub and T boot                                 and what what order do these sure yeah                                 no I meant some it is a bit confusing                                 that's that's a good question so if you                                 look at this slide so the boot loader at                                 the top I've been using grub for my                                 testing so feel free to substitute grub                                 for boot loader at the very top of this                                 slide other boot loaders are available                                 but anyway so grub would go ahead and                                 chain load into T boot and that's                                 basically what we're seeing here and                                 then T boot ignore all the magic that T                                 boot does T boot then once it's actually                                 verified everything and signed off and                                 systems working as expected                                 then T boot effectively acts as a boot                                 loader and it loads the the kernel that                                 it's measured and signed off so it's                                 really you can think of it it's not a                                 whole lot different if you remember you                                 know dual booting windows back when that                                 was kind of popular you'd have grub that                                 would go off and do a chain loader into                                 your windows boot loader and it would go                                 from there very similar concept here                                 we're using grub at least in my testing                                 I've been using drug to chain load into                                 T boot which then goes and loads the                                 Linux kernel is there a Linux gym just                                 before grub no there's there's no                                 there's no shim there's no this is one                                 of the things that kind of like this in                                 some ways not that I have any reason to                                 distrust the UEFI secure boot shim or                                 whatnot but you know you do have this                                 binary blob that you can't really build                                 and modify and in some sense this is a                                 little more appealing to me because you                                 can go out and you can build T boot and                                 you can run T boot and I can know that                                 the T boot that I'm running is the T                                 boot that I built now you still have to                                 rely and trust that the system firmware                                 is correct that that ACM blob isn't                                 doing anything malicious but                                 realistically you already have to trust                                 your system firmware anyway                                 so I don't see that it's really any                                 additional trust that I'm not already                                 placing in my system but now tea boot                                 there's nothing magic to it you can go                                 grab the sources and rebuild it yourself                                 okay thank you so much no questions no                                 let's thank Bowl                                 [Applause]
YouTube URL: https://www.youtube.com/watch?v=WM5XIjQgISU


