Title: Protected Execution Facility - Guerney D. H. Hunt, IBM Research
Publication date: 2018-08-31
Playlist: Linux Security Summit North America 2018 - Vancouver
Description: 
	Protected Execution Facility - Guerney D. H. Hunt, IBM Research

(Guerney Hunt, IBM Research): Security remains a key concern for both traditional and cloud computing workloads. One objective is keeping applications (or containers) secure in the presence of attacks or compromised components. This talk addresses these challenges on the Power Architecture by presenting the Protected Execution Facility ― an architecture modification for IBM Linux and OpenPower Linux servers ― along with the associated firmware, the Protected Execution Ultravisor which provides additional security to virtual machines ― called secure virtual machines (SVMs). Protected Execution Facility concurrently supports both normal VMs and SVMs. The protections provided to SVMs and some restrictions for SVMs are covered. The differences and similarities between vendor approaches to providing security in the presence of a potentially compromised hypervisor or OS will be reviewed.

About Guerney D. H. Hunt
Dr. Guerney D. H. Hunt has been a Research Staff Member at IBM’s T. J. Watson Research Center since 1995. He is currently working on transferring security technology into IBM products, and developing additional security technology. He participated in a team funded by the Department of Homeland Security and the Canadian government to develop an end-to-end security architecture. He has been working on developing architectural changes that can be used to increase the security of computer systems since 2008. He joined IBM Research in 1995 in the distributed computing group where he became the co-inventor of layer seven scaling technology. He has worked in the secure intermediary infrastructures, advanced cluster systems, and distributed infrastructure groups before joining the Security Research Department in 2008. He was also the PI of the Next Generation Secure Computer Architecture exploratory research project. He has work on blockchain security. Prior to IBM Research, Dr. Hunt work in IBM development from 1981-1983 and he worked for NCR from 1975-1981. His earlier work was in software and microcode development, IBM product engineering, and OS development for VM/370. Since joining IBM Research he has held management and non management positions. 

His first conference presentation was at WWW7 in Brisbane Australia in 1998. He also did a poster session at SOSP XVII in 1999. Since that time, he has done multiple customer, business and conference presentations.
. 
Dr. Hunt holds a BS in mathematics from Michigan Technological University and an MS and Ph.D. in computer science from Cornell University. He is a senior member of the IEEE and a member of the ACM, was a founding member of the editorial board of IEEE Pervasive Computing, he holds more than 21 US and foreign patents, has published papers, and has been an IBM Master Inventor. CV available upon request.
Captions: 
	00:00:00,030 --> 00:00:06,600
so I'm waiting for my machine to come up

00:00:02,300 --> 00:00:08,970
died on me just a little bit ago so just

00:00:06,600 --> 00:00:11,880
as a quick introduction the protected

00:00:08,970 --> 00:00:13,469
execution facility is a hardware

00:00:11,880 --> 00:00:17,940
architectural change that we're making

00:00:13,469 --> 00:00:20,789
to the power architecture and because

00:00:17,940 --> 00:00:22,529
it's I haven't plugged in because it's a

00:00:20,789 --> 00:00:25,439
hardware change it also requires some

00:00:22,529 --> 00:00:27,869
supporting firmware most of my talk is

00:00:25,439 --> 00:00:32,369
going to be about the supporting

00:00:27,869 --> 00:00:34,440
firmware because you know we're doing

00:00:32,369 --> 00:00:38,129
this for power and open power and for

00:00:34,440 --> 00:00:39,690
power Linux systems and so that's what

00:00:38,129 --> 00:00:41,879
I'll be that's what I'll be talking to

00:00:39,690 --> 00:00:43,170
you but I'll also give you a while I'm

00:00:41,879 --> 00:00:45,210
doing it I'll talk to you about what the

00:00:43,170 --> 00:00:47,520
hardware changes are and I'll take

00:00:45,210 --> 00:00:54,350
questions at the end on any any

00:00:47,520 --> 00:00:57,629
component hardware or software let's see

00:00:54,350 --> 00:01:04,439
what else can I tell you without any

00:00:57,629 --> 00:01:06,890
fault unfortunately I need these

00:01:04,439 --> 00:01:06,890
pictures

00:01:15,729 --> 00:01:22,570
I haven't plugged my dongle in because

00:01:18,549 --> 00:01:28,840
there's nothing to see yet and as soon

00:01:22,570 --> 00:01:34,750
as there is I'll plug it in so it looks

00:01:28,840 --> 00:01:36,670
like it matters so oh I guess so

00:01:34,750 --> 00:01:40,509
on my acknowledgment files I tell you

00:01:36,670 --> 00:01:43,750
that some of the concepts that we that

00:01:40,509 --> 00:01:45,939
we developed that are represented in

00:01:43,750 --> 00:01:48,340
this presentation were developed in

00:01:45,939 --> 00:01:50,110
research that were sponsored by the US

00:01:48,340 --> 00:01:53,380
government the Canadian government and

00:01:50,110 --> 00:01:55,709
the United States Air Force and so on

00:01:53,380 --> 00:01:58,000
the acknowledgment foil there's a long a

00:01:55,709 --> 00:01:59,799
paragraph that we're required to put on

00:01:58,000 --> 00:02:03,039
any publication that results from this

00:01:59,799 --> 00:02:04,390
work and and there's a pointer that

00:02:03,039 --> 00:02:05,649
lists the contract number and all the

00:02:04,390 --> 00:02:08,500
official words that each government

00:02:05,649 --> 00:02:10,209
wants us to say and at the end of the

00:02:08,500 --> 00:02:13,209
presentation there's a pointer to the

00:02:10,209 --> 00:02:15,250
final report from that project along

00:02:13,209 --> 00:02:20,170
with along with pointers along with

00:02:15,250 --> 00:02:23,440
pointers to other other things I'm also

00:02:20,170 --> 00:02:25,090
supposed to tell you that these are my

00:02:23,440 --> 00:02:27,910
ideas not IBM's

00:02:25,090 --> 00:02:30,010
and anything anything that we talk about

00:02:27,910 --> 00:02:31,359
is subject to being accepted and up

00:02:30,010 --> 00:02:32,889
streamed although a number of the

00:02:31,359 --> 00:02:34,359
patches that are required for this to

00:02:32,889 --> 00:02:37,299
work properly have already been pushed

00:02:34,359 --> 00:02:38,950
and I have pointers to those in the

00:02:37,299 --> 00:02:40,750
presentation so that you can look at

00:02:38,950 --> 00:02:45,459
them and there there are more that are

00:02:40,750 --> 00:02:49,709
coming you can ask me when it's going to

00:02:45,459 --> 00:02:52,420
be available and I won't answer what I

00:02:49,709 --> 00:02:53,889
can't answer that question that's that's

00:02:52,420 --> 00:02:58,030
the only that's about the only question

00:02:53,889 --> 00:03:02,319
I'm not supposed to answer and let's see

00:02:58,030 --> 00:03:07,450
what else yes the team that developed

00:03:02,319 --> 00:03:12,579
this spans IBM Research actually it the

00:03:07,450 --> 00:03:14,290
span it spans part the work was done the

00:03:12,579 --> 00:03:17,620
initial research was done in IBM

00:03:14,290 --> 00:03:19,299
research and then the team spans IBM

00:03:17,620 --> 00:03:21,730
cognitive systems which is sometimes

00:03:19,299 --> 00:03:25,269
known as our power division and it uses

00:03:21,730 --> 00:03:26,360
the the LTC there was already a Claudia

00:03:25,269 --> 00:03:28,730
was here earlier

00:03:26,360 --> 00:03:30,260
and talked about the LTC and gave you

00:03:28,730 --> 00:03:32,660
all these locations about all those

00:03:30,260 --> 00:03:38,540
locations and a couple of others we're

00:03:32,660 --> 00:03:43,400
using in this work and then and let's

00:03:38,540 --> 00:03:45,170
see I don't have a map the so this has

00:03:43,400 --> 00:03:56,600
been going on for a while let's see you

00:03:45,170 --> 00:03:59,090
can get this to come up yeah I'm just

00:03:56,600 --> 00:04:01,090
waiting for it to wake up so I can put

00:03:59,090 --> 00:04:05,330
it into screen so mode it'll be a while

00:04:01,090 --> 00:04:07,190
let's see what else can I tell you so

00:04:05,330 --> 00:04:09,350
that that covers the first couple of

00:04:07,190 --> 00:04:13,060
introductory foils we've had a lot of

00:04:09,350 --> 00:04:15,200
presentations about various challenges

00:04:13,060 --> 00:04:17,900
especially this morning about challenges

00:04:15,200 --> 00:04:19,459
in in bugs and operating systems and

00:04:17,900 --> 00:04:20,419
hypervisors and all the other sorts of

00:04:19,459 --> 00:04:23,890
things that you're doing

00:04:20,419 --> 00:04:27,770
so the basic the base idea here is that

00:04:23,890 --> 00:04:30,310
well let me wait till I get get this

00:04:27,770 --> 00:04:30,310
thing to go

00:04:56,199 --> 00:05:03,099
see you've seen it okay

00:05:43,460 --> 00:05:49,880
all right so I've given you my name I

00:05:46,710 --> 00:05:54,450
don't think this is quite alike yet and

00:05:49,880 --> 00:05:57,650
this was my acknowledgement for all so

00:05:54,450 --> 00:06:00,450
we'll skip that I gave you that verbally

00:05:57,650 --> 00:06:02,190
this is basically what I'm gonna do is

00:06:00,450 --> 00:06:03,420
walk down I'm gonna give you an

00:06:02,190 --> 00:06:04,980
introduction then I'm going to give you

00:06:03,420 --> 00:06:06,420
an overview of the architecture then I'm

00:06:04,980 --> 00:06:08,970
gonna go give you lower level details

00:06:06,420 --> 00:06:11,820
and then I'm gonna summarize and I'm

00:06:08,970 --> 00:06:14,160
each time I'm giving more more details

00:06:11,820 --> 00:06:17,340
about what we're talking about we talked

00:06:14,160 --> 00:06:19,380
about this oh I forgot to tell you that

00:06:17,340 --> 00:06:22,020
all of the software and firmware that's

00:06:19,380 --> 00:06:24,360
associated with this facility is or will

00:06:22,020 --> 00:06:28,410
be open-source there's some new stuff

00:06:24,360 --> 00:06:29,490
that's not quite out yet we were talking

00:06:28,410 --> 00:06:31,410
about this this morning several

00:06:29,490 --> 00:06:33,030
presentations have been addressed it

00:06:31,410 --> 00:06:35,850
what do we do for cloud infrastructures

00:06:33,030 --> 00:06:37,560
what do we want to do you know we're

00:06:35,850 --> 00:06:39,180
working on regression tests we're

00:06:37,560 --> 00:06:40,800
working on verifying we saw yesterday

00:06:39,180 --> 00:06:43,380
there were lots of bugs that didn't get

00:06:40,800 --> 00:06:46,980
introduced and they get fixed slowly so

00:06:43,380 --> 00:06:49,830
there can unfortunately be bugs and what

00:06:46,980 --> 00:06:51,810
people call Zod compromises so what

00:06:49,830 --> 00:06:56,850
we're trying to do with the protected

00:06:51,810 --> 00:06:58,710
execution facility okay is we're trying

00:06:56,850 --> 00:07:00,390
to introduce realities this concept of

00:06:58,710 --> 00:07:03,030
what we call a secure virtual machine

00:07:00,390 --> 00:07:06,360
abbreviated SVM we're trying to protect

00:07:03,030 --> 00:07:08,750
the SVM against attacks protect

00:07:06,360 --> 00:07:11,550
confidentiality and integrity of the SVM

00:07:08,750 --> 00:07:14,430
we're integrated with crusted computing

00:07:11,550 --> 00:07:16,070
tooling we we rely on secure and trusted

00:07:14,430 --> 00:07:18,960
boot to get the machine up and running

00:07:16,070 --> 00:07:22,770
we enable secrets to be embedded inside

00:07:18,960 --> 00:07:25,230
an SVM at creation time that can win and

00:07:22,770 --> 00:07:28,730
we enable existing virtual machines to

00:07:25,230 --> 00:07:31,500
be converted into SVM's with new tooling

00:07:28,730 --> 00:07:34,290
we have a smaller trusted computing base

00:07:31,500 --> 00:07:36,000
than our traditional servers or open

00:07:34,290 --> 00:07:39,750
power systems might have to reduce the

00:07:36,000 --> 00:07:41,940
attack surface we have where we are

00:07:39,750 --> 00:07:43,560
developing or exploiting the open source

00:07:41,940 --> 00:07:44,910
ecosystem we're going to be extending it

00:07:43,560 --> 00:07:48,030
by open sourcing all of the firmware

00:07:44,910 --> 00:07:49,730
associated with this there's no limit in

00:07:48,030 --> 00:07:51,330
the amount of memory we can protect an

00:07:49,730 --> 00:07:53,580
existing application

00:07:51,330 --> 00:07:57,689
can code can run in an SVM without

00:07:53,580 --> 00:08:00,530
change so what we see here on the right

00:07:57,689 --> 00:08:02,849
is this picture of a couple of VMs and

00:08:00,530 --> 00:08:04,800
this thing with the brick wall white

00:08:02,849 --> 00:08:06,270
brick wall around it is the SVM and the

00:08:04,800 --> 00:08:08,699
red arrows are illustrating the fact

00:08:06,270 --> 00:08:11,699
that you can't attack that either from

00:08:08,699 --> 00:08:14,069
the kernel below or from or from another

00:08:11,699 --> 00:08:15,990
virtual machine running if either one is

00:08:14,069 --> 00:08:19,080
compromised that just won't get into the

00:08:15,990 --> 00:08:20,430
SVM because of this protected execution

00:08:19,080 --> 00:08:22,349
ultra vires which is the firmware

00:08:20,430 --> 00:08:25,530
component of the protected execution

00:08:22,349 --> 00:08:27,690
facility consequently we protect against

00:08:25,530 --> 00:08:30,870
road administrators and compromised

00:08:27,690 --> 00:08:32,880
hypervisors and we protect while in

00:08:30,870 --> 00:08:34,500
transit executing or stored on disk and

00:08:32,880 --> 00:08:36,870
I realized that I didn't explain the in

00:08:34,500 --> 00:08:39,390
transit thing basically the the the

00:08:36,870 --> 00:08:41,760
secure VM is encrypted and so you can

00:08:39,390 --> 00:08:43,110
ship it around and it's encrypted with

00:08:41,760 --> 00:08:44,550
integrity protection or integrity

00:08:43,110 --> 00:08:46,380
information and so you can ship it

00:08:44,550 --> 00:08:48,360
around over a wire or leave it on a disk

00:08:46,380 --> 00:08:51,089
as much as you want because when it goes

00:08:48,360 --> 00:08:52,920
to get executed the protected execution

00:08:51,089 --> 00:08:54,540
facility will verify that it hasn't been

00:08:52,920 --> 00:08:56,820
tampered with before it allows it to

00:08:54,540 --> 00:09:01,050
execute if it detects a tamper it will

00:08:56,820 --> 00:09:02,550
not execute so there's basically three

00:09:01,050 --> 00:09:04,410
things two things you want to do you

00:09:02,550 --> 00:09:07,019
want to create one of these things and

00:09:04,410 --> 00:09:09,300
you want to run one so you start with a

00:09:07,019 --> 00:09:11,310
regular normal virtual machine you

00:09:09,300 --> 00:09:13,680
develop whatever applications you want

00:09:11,310 --> 00:09:16,500
to run in it we're assuming that that

00:09:13,680 --> 00:09:18,079
you will do this in a in a in in what

00:09:16,500 --> 00:09:20,490
you consider to be a secure facility

00:09:18,079 --> 00:09:22,019
because we cannot protect you against

00:09:20,490 --> 00:09:24,690
what you put inside of that virtual

00:09:22,019 --> 00:09:27,990
machine and then we we give you some new

00:09:24,690 --> 00:09:29,459
tooling and and basically one of the

00:09:27,990 --> 00:09:31,140
features of the architecture is now

00:09:29,459 --> 00:09:34,800
every machine has a public and private

00:09:31,140 --> 00:09:36,329
key and so you have to collect the

00:09:34,800 --> 00:09:40,500
private keys of where you want this

00:09:36,329 --> 00:09:42,800
thing to to to be to run and you give

00:09:40,500 --> 00:09:45,060
that to the tooling and the tooling can

00:09:42,800 --> 00:09:46,350
make sure that your filesystem is

00:09:45,060 --> 00:09:49,170
encrypted and if it's not it will

00:09:46,350 --> 00:09:51,300
encrypt it and then it does some other

00:09:49,170 --> 00:09:53,070
calculations and it builds the integrity

00:09:51,300 --> 00:09:56,430
informations of so that we can verify

00:09:53,070 --> 00:09:57,870
the virtual machine and it outputs a SVM

00:09:56,430 --> 00:10:00,839
which looks like a normal virtual

00:09:57,870 --> 00:10:02,279
machine on linux k vm so when you're

00:10:00,839 --> 00:10:04,420
running it it starts like any normal

00:10:02,279 --> 00:10:07,000
virtual machine it starts in

00:10:04,420 --> 00:10:10,000
regular memory and doing a brute process

00:10:07,000 --> 00:10:12,399
it executes a new sis call called an

00:10:10,000 --> 00:10:15,160
intercept and in a secure mode system

00:10:12,399 --> 00:10:18,610
call that goes to this protected

00:10:15,160 --> 00:10:21,250
execution alt revisor and it checks the

00:10:18,610 --> 00:10:22,750
integrity of the SVM well actually the

00:10:21,250 --> 00:10:24,490
first thing it does is it moves the

00:10:22,750 --> 00:10:26,889
virtual machine to secure memory and

00:10:24,490 --> 00:10:28,630
secure memory can only be referenced by

00:10:26,889 --> 00:10:30,790
the ultraviolent something running in

00:10:28,630 --> 00:10:32,949
secure mode and then it checks the

00:10:30,790 --> 00:10:34,839
integrity and then if the integrity

00:10:32,949 --> 00:10:37,420
check passes it passes execution and

00:10:34,839 --> 00:10:40,120
continues and during the execution that

00:10:37,420 --> 00:10:41,980
of that virtual machine all of the

00:10:40,120 --> 00:10:43,810
interrupts that occur during that

00:10:41,980 --> 00:10:46,660
virtual machine go to the ultra vires

00:10:43,810 --> 00:10:51,699
not directly to the hypervisor or to the

00:10:46,660 --> 00:10:53,560
or to the VM so two basic kinds of

00:10:51,699 --> 00:10:56,050
interrupts the the hyper calls that the

00:10:53,560 --> 00:11:00,279
virtual machine would do those go

00:10:56,050 --> 00:11:02,589
directly to the ultra ultra visor puts a

00:11:00,279 --> 00:11:04,209
dummy state in all the registers for the

00:11:02,589 --> 00:11:05,800
virtual machine except for those

00:11:04,209 --> 00:11:07,930
required for the hyper call that has

00:11:05,800 --> 00:11:10,120
been executed reflects it to the

00:11:07,930 --> 00:11:12,339
hypervisor and returns the results to

00:11:10,120 --> 00:11:14,140
the to the virtual machine we'll talk

00:11:12,339 --> 00:11:16,089
about this a little bit more for

00:11:14,140 --> 00:11:18,310
asynchronous interrupts what it does is

00:11:16,089 --> 00:11:20,470
it saves all the state of the virtual

00:11:18,310 --> 00:11:22,690
machine and then and then reflects the

00:11:20,470 --> 00:11:25,360
inner up to the hypervisor but no state

00:11:22,690 --> 00:11:28,390
no state that's not explicitly being

00:11:25,360 --> 00:11:30,040
passed to the hypervisor by the software

00:11:28,390 --> 00:11:31,589
in the virtual machine is ever seen by

00:11:30,040 --> 00:11:34,920
the hypervisor

00:11:31,589 --> 00:11:38,709
so let's go to a higher level overview

00:11:34,920 --> 00:11:40,750
so here's the base principles protecting

00:11:38,709 --> 00:11:43,240
care integrity and confidentiality of

00:11:40,750 --> 00:11:45,610
code and data minimize the trusted

00:11:43,240 --> 00:11:47,350
computing base the trusting computing

00:11:45,610 --> 00:11:49,810
base here is the processor hardware

00:11:47,350 --> 00:11:53,410
changes and our processor which is huge

00:11:49,810 --> 00:11:55,390
but you have to trust it the TPM and the

00:11:53,410 --> 00:11:57,910
firmware that's associated with this the

00:11:55,390 --> 00:12:01,540
firmware includes host boot opal and the

00:11:57,910 --> 00:12:05,139
ultra Biser but not ski boot we get we

00:12:01,540 --> 00:12:07,600
get booted before ski boot we introduce

00:12:05,139 --> 00:12:09,639
secure memory which is only accessible

00:12:07,600 --> 00:12:11,680
to secure virtual machines and the ultra

00:12:09,639 --> 00:12:14,589
vires we introduce a new power

00:12:11,680 --> 00:12:16,480
processing mode previously in power

00:12:14,589 --> 00:12:17,920
systems we had hypervisor mode'

00:12:16,480 --> 00:12:20,620
supervisor mode and problems

00:12:17,920 --> 00:12:22,540
State for lack of a better for about our

00:12:20,620 --> 00:12:24,430
names now we have ultra visor mode which

00:12:22,540 --> 00:12:26,560
is higher privilege than hypervisor mode

00:12:24,430 --> 00:12:31,180
so we have four modes instead of three

00:12:26,560 --> 00:12:33,490
we you know we have hardware and

00:12:31,180 --> 00:12:35,589
firmware that's used to manage this and

00:12:33,490 --> 00:12:37,180
we enable secure virtual machines but

00:12:35,589 --> 00:12:40,269
normal virtual machines can run on the

00:12:37,180 --> 00:12:44,199
same heart on the same Hardware so that

00:12:40,269 --> 00:12:47,139
all the normal ones run so here's a

00:12:44,199 --> 00:12:49,930
Couture overview at the bottom we have

00:12:47,139 --> 00:12:51,760
an arbitrary open power CPU chip with

00:12:49,930 --> 00:12:53,649
the protected execution facility on the

00:12:51,760 --> 00:12:56,079
Left we have some form of non-volatile

00:12:53,649 --> 00:12:57,699
memory we were a lot we're relying on

00:12:56,079 --> 00:13:00,279
the suit secure and trusted boot that

00:12:57,699 --> 00:13:02,170
Claudio talked about we have a private

00:13:00,279 --> 00:13:04,720
the private key for the machine is in

00:13:02,170 --> 00:13:07,389
the TPM and never leaves a TPM is never

00:13:04,720 --> 00:13:10,990
exposed to software in the machine this

00:13:07,389 --> 00:13:12,850
works because in TPA in the TPM 2.0

00:13:10,990 --> 00:13:15,550
there's an interface that you may be

00:13:12,850 --> 00:13:17,440
aware of where you can say Oh generate

00:13:15,550 --> 00:13:20,139
me a public/private keep here and give

00:13:17,440 --> 00:13:22,959
me and give me the public key and then

00:13:20,139 --> 00:13:24,519
you set a policy on how that and when

00:13:22,959 --> 00:13:28,089
that tough when that private key can be

00:13:24,519 --> 00:13:29,890
used we divide that the memory can be

00:13:28,089 --> 00:13:32,140
divided into secure memory in normal

00:13:29,890 --> 00:13:34,810
memory and you can divide it any way you

00:13:32,140 --> 00:13:36,670
want except that you can't change that

00:13:34,810 --> 00:13:39,820
the vision after the system has been

00:13:36,670 --> 00:13:41,860
booted so then you have the protected

00:13:39,820 --> 00:13:43,449
execution ultra visor that gets booted

00:13:41,860 --> 00:13:46,149
and then the hypervisor which in our

00:13:43,449 --> 00:13:47,680
case is Linux KVM and then above that

00:13:46,149 --> 00:13:49,329
you have the environment where the

00:13:47,680 --> 00:13:50,769
virtual machines run you have the secure

00:13:49,329 --> 00:13:52,120
virtual machine is running in secure

00:13:50,769 --> 00:13:53,579
memory you have the normal virtual

00:13:52,120 --> 00:13:56,410
machines running in normal memory

00:13:53,579 --> 00:13:58,149
they're all coming off disk and this

00:13:56,410 --> 00:14:00,430
just illustrates the tooling that's

00:13:58,149 --> 00:14:04,810
necessary to convert a normal virtual

00:14:00,430 --> 00:14:07,149
machine into a secure virtual machine so

00:14:04,810 --> 00:14:09,819
I already told you we're referring to

00:14:07,149 --> 00:14:12,670
some changes and I told you about the

00:14:09,819 --> 00:14:14,500
firmware we sort of went over this you

00:14:12,670 --> 00:14:17,850
run secure virtual machines and normal

00:14:14,500 --> 00:14:20,350
virtual machines and the same hardware

00:14:17,850 --> 00:14:21,670
to create an SVM you're going to need

00:14:20,350 --> 00:14:24,790
the new tooling that we're going to

00:14:21,670 --> 00:14:26,199
open-source as soon as we finished all

00:14:24,790 --> 00:14:28,870
the little things we're doing with it

00:14:26,199 --> 00:14:30,279
and the SVM executes in secure memory

00:14:28,870 --> 00:14:31,180
which is under the control the ultra

00:14:30,279 --> 00:14:33,220
vires and

00:14:31,180 --> 00:14:35,560
the hypervisor and the normal VMs cannot

00:14:33,220 --> 00:14:37,510
reference secure memory cannot reference

00:14:35,560 --> 00:14:39,130
secure memory means that the hardware

00:14:37,510 --> 00:14:40,600
will not let them it's not the ultra

00:14:39,130 --> 00:14:43,060
vires decision it's the hardware's

00:14:40,600 --> 00:14:44,890
decision it won't let anything other

00:14:43,060 --> 00:14:47,800
than something that's running in secure

00:14:44,890 --> 00:14:52,360
mode reference it so none of your

00:14:47,800 --> 00:14:55,510
devices can reference it etc etc etc so

00:14:52,360 --> 00:14:58,600
a little bit lower the private key

00:14:55,510 --> 00:15:01,240
remains in the TPM the ultra violet EPM

00:14:58,600 --> 00:15:02,680
to get access to the symmetric key in a

00:15:01,240 --> 00:15:04,990
minute I'm gonna give you a more

00:15:02,680 --> 00:15:06,400
detailed layout of the of the secure

00:15:04,990 --> 00:15:09,340
virtual machine and you'll see how all

00:15:06,400 --> 00:15:11,800
of that works the ultra vires is a

00:15:09,340 --> 00:15:13,360
secure channel to talk to the TPM so it

00:15:11,800 --> 00:15:16,450
says here's something that's encrypted

00:15:13,360 --> 00:15:18,310
give me back the decrypted blob the TPM

00:15:16,450 --> 00:15:20,890
does that and passes it back securely to

00:15:18,310 --> 00:15:23,230
the ultra vires the hardware separates

00:15:20,890 --> 00:15:27,430
the memory into secure memory and normal

00:15:23,230 --> 00:15:29,560
memory and then when the ESM syscall is

00:15:27,430 --> 00:15:31,480
received if the calling SVM is not being

00:15:29,560 --> 00:15:34,690
modified the ultra vires will transition

00:15:31,480 --> 00:15:36,580
it to secure mode as I said what it does

00:15:34,690 --> 00:15:38,830
is when it gets that call it moves it

00:15:36,580 --> 00:15:41,080
all into secure memory and then it does

00:15:38,830 --> 00:15:44,170
the integrity the integrity verification

00:15:41,080 --> 00:15:47,440
if the integrity verification passes

00:15:44,170 --> 00:15:52,030
then it it passes it it lets it go into

00:15:47,440 --> 00:15:53,610
execution and secure memory we are

00:15:52,030 --> 00:15:56,560
higher privileged than the hypervisor

00:15:53,610 --> 00:15:59,170
Linux KVM has to be paravirtualized to

00:15:56,560 --> 00:16:01,120
work with this facility most of the

00:15:59,170 --> 00:16:04,750
changes of in the architecture dependent

00:16:01,120 --> 00:16:07,150
section of the hypervisor if the

00:16:04,750 --> 00:16:09,040
hypervisor needs to update the partition

00:16:07,150 --> 00:16:11,560
scope page table it will have to ask the

00:16:09,040 --> 00:16:14,050
ultra vires for assistance if the

00:16:11,560 --> 00:16:15,550
hypervisor needs to return to an SVM it

00:16:14,050 --> 00:16:18,280
will have to ask the ultra vires to

00:16:15,550 --> 00:16:20,560
complete the return and we're also going

00:16:18,280 --> 00:16:24,040
to modify the heterogeneous memory

00:16:20,560 --> 00:16:26,020
management so that - we're using that to

00:16:24,040 --> 00:16:29,410
help manage the secure memory rather

00:16:26,020 --> 00:16:34,060
than inventing something new at the VM

00:16:29,410 --> 00:16:36,280
level normal and secure virtual machines

00:16:34,060 --> 00:16:38,260
run on the same hardware the ultra is

00:16:36,280 --> 00:16:42,819
not involved in the execution of normal

00:16:38,260 --> 00:16:45,189
virtual machines at all the

00:16:42,819 --> 00:16:48,399
they both get services from the

00:16:45,189 --> 00:16:51,209
hypervisor the auto visor I haven't said

00:16:48,399 --> 00:16:53,589
this in this presentation whereas the

00:16:51,209 --> 00:16:55,660
hypervisors millions of lines of code

00:16:53,589 --> 00:16:57,489
the ultra vires on the order of tens of

00:16:55,660 --> 00:16:58,899
thousands of lines of code it's a little

00:16:57,489 --> 00:17:01,329
bit larger than anything that's been

00:16:58,899 --> 00:17:03,819
formally verified today but it's not

00:17:01,329 --> 00:17:05,559
that much larger and we are we are

00:17:03,819 --> 00:17:07,089
working towards certification that

00:17:05,559 --> 00:17:09,189
question came up on one of the other

00:17:07,089 --> 00:17:11,370
talks so I just thought I'd mention that

00:17:09,189 --> 00:17:13,990
although it's not written on the falls

00:17:11,370 --> 00:17:16,000
we create them with new tooling the

00:17:13,990 --> 00:17:18,459
secure VM starts as a normal virtual

00:17:16,000 --> 00:17:21,730
machine and we new use this new cisco to

00:17:18,459 --> 00:17:25,299
make the transition now there are some

00:17:21,730 --> 00:17:27,939
limitations and we will not support in

00:17:25,299 --> 00:17:29,679
the initial release suspend resume and

00:17:27,939 --> 00:17:31,690
migration of a secure virtual machine

00:17:29,679 --> 00:17:33,129
all of these things we can do we're just

00:17:31,690 --> 00:17:35,110
not doing it in the first release

00:17:33,129 --> 00:17:37,750
because we're trying to get it out on a

00:17:35,110 --> 00:17:40,450
certain schedule we're also not going to

00:17:37,750 --> 00:17:42,730
not going to support over commit of svm

00:17:40,450 --> 00:17:44,649
memory in the first release we can do

00:17:42,730 --> 00:17:47,820
that we can allow the hypervisor the

00:17:44,649 --> 00:17:50,049
page DSV in memory because the

00:17:47,820 --> 00:17:51,789
ultraviolet option makes sure that the

00:17:50,049 --> 00:17:54,639
hypervisor can only see the memory of

00:17:51,789 --> 00:17:57,429
the SVM encrypted with integrity and we

00:17:54,639 --> 00:17:59,169
do not allow right now on dedicated

00:17:57,429 --> 00:18:01,570
devices going to a secure virtual

00:17:59,169 --> 00:18:04,299
machine so you can't get at you can't

00:18:01,570 --> 00:18:06,190
get to it from a GPU card from a PCI

00:18:04,299 --> 00:18:11,110
card or from anything else other than a

00:18:06,190 --> 00:18:13,470
few things we do not currently support

00:18:11,110 --> 00:18:15,279
transaction memory and SVM's

00:18:13,470 --> 00:18:16,600
transaction memories or the best

00:18:15,279 --> 00:18:18,759
side-channel than anybody ever knew

00:18:16,600 --> 00:18:22,720
adduced into an architecture we're not

00:18:18,759 --> 00:18:25,149
supporting right now applications that

00:18:22,720 --> 00:18:30,070
use transaction memory will crash as

00:18:25,149 --> 00:18:33,250
soon as they do so let's get to the

00:18:30,070 --> 00:18:37,480
lowest level details that I'm going to

00:18:33,250 --> 00:18:42,429
be talking about in this talk all right

00:18:37,480 --> 00:18:44,049
so I'm gonna go back for one foil and

00:18:42,429 --> 00:18:47,200
then back to them this is the overall

00:18:44,049 --> 00:18:49,480
layout of a secure virtual machine sloth

00:18:47,200 --> 00:18:50,649
is used to Sophos the bootloader and on

00:18:49,480 --> 00:18:53,350
the right of that you have a disk image

00:18:50,649 --> 00:18:55,909
it's you can see if the kernels of the

00:18:53,350 --> 00:18:58,429
image we don't care if it's an MBR

00:18:55,909 --> 00:18:59,899
or GPT formatted discs this is a virtual

00:18:58,429 --> 00:19:02,179
machine that's booting it's not booting

00:18:59,899 --> 00:19:04,609
native on the hardware going to grub

00:19:02,179 --> 00:19:06,559
grub goes to the slash boot partition

00:19:04,609 --> 00:19:09,259
and there can be one or more Z images

00:19:06,559 --> 00:19:10,879
there each Z image has this thing we

00:19:09,259 --> 00:19:12,559
call an ESN blob which is on the

00:19:10,879 --> 00:19:14,989
previous soil I'll talk about it in a

00:19:12,559 --> 00:19:16,819
second and then the remainder of the

00:19:14,989 --> 00:19:21,440
disk is the root filesystem which is

00:19:16,819 --> 00:19:23,749
encrypted ok going back one so what the

00:19:21,440 --> 00:19:26,449
CSM blob is there's a symmetric key

00:19:23,749 --> 00:19:28,609
which was used by the tooling to encrypt

00:19:26,449 --> 00:19:32,029
the verification information which is in

00:19:28,609 --> 00:19:34,129
this blue box it's encrypted with the

00:19:32,029 --> 00:19:36,229
public key the symmetric key itself is

00:19:34,129 --> 00:19:38,509
encrypted with the public key of each

00:19:36,229 --> 00:19:42,169
machine the SVM is authorized to run on

00:19:38,509 --> 00:19:44,539
in this particular illustration the CSM

00:19:42,169 --> 00:19:49,249
is associated with an SVM that can run

00:19:44,539 --> 00:19:51,619
on machine a B or machine C the alter of

00:19:49,249 --> 00:19:53,449
Iser asks the TPM to use the private key

00:19:51,619 --> 00:19:56,059
of the machine store which is stored in

00:19:53,449 --> 00:19:58,339
the TPM never comes out to decrypt the

00:19:56,059 --> 00:19:59,839
symmetric key so the ultra vires passes

00:19:58,339 --> 00:20:01,729
for example if it's on this green

00:19:59,839 --> 00:20:04,039
machine machine B it passes the green

00:20:01,729 --> 00:20:08,659
blob into the TPM says give me the

00:20:04,039 --> 00:20:10,099
results it comes back assuming if only

00:20:08,659 --> 00:20:12,679
if the correct former was loaded it

00:20:10,099 --> 00:20:14,299
comes back and then the ultra visor has

00:20:12,679 --> 00:20:17,539
this symmetric key associated with this

00:20:14,299 --> 00:20:19,549
particular rest of em and then it can

00:20:17,539 --> 00:20:21,289
decrypt this blue blob and it can get

00:20:19,549 --> 00:20:23,239
the integrity information for the kernel

00:20:21,289 --> 00:20:24,889
the integrity information for the unit

00:20:23,239 --> 00:20:27,499
and RAM FS the intera

00:20:24,889 --> 00:20:29,179
integrity information for our tasks a

00:20:27,499 --> 00:20:31,309
little bit of information about the

00:20:29,179 --> 00:20:35,089
symmetric key blobs and the DM crypt

00:20:31,309 --> 00:20:36,889
passphrase so the actual boot the root

00:20:35,089 --> 00:20:39,829
filesystem can be decrypted and the

00:20:36,889 --> 00:20:42,440
virtual machine can finish booting now

00:20:39,829 --> 00:20:44,419
why do now you might be asking yourself

00:20:42,440 --> 00:20:46,549
some questions about this are you gonna

00:20:44,419 --> 00:20:50,479
make every machine have a different

00:20:46,549 --> 00:20:52,129
public private key well no we made it

00:20:50,479 --> 00:20:53,659
possible for you to make every machine

00:20:52,129 --> 00:20:56,029
have to have a different public private

00:20:53,659 --> 00:20:57,769
key but it's also possible for you to

00:20:56,029 --> 00:21:00,349
have multiple machines with the same

00:20:57,769 --> 00:21:01,729
public private key that's up to the

00:21:00,349 --> 00:21:03,499
owner of the machine whether they want

00:21:01,729 --> 00:21:04,940
to use a unique one on every machine or

00:21:03,499 --> 00:21:06,949
they if they're building a cloud

00:21:04,940 --> 00:21:08,690
infrastructure that's not necessarily

00:21:06,949 --> 00:21:09,320
like that you can have the you can have

00:21:08,690 --> 00:21:11,690
the same

00:21:09,320 --> 00:21:14,330
Keon on Malta machines you can use the

00:21:11,690 --> 00:21:17,509
protocols established in the TPM to save

00:21:14,330 --> 00:21:19,580
keys to save keys in a bob that you can

00:21:17,509 --> 00:21:22,850
restore if your TPM breaks so that you

00:21:19,580 --> 00:21:28,789
don't lose the activity we don't we

00:21:22,850 --> 00:21:31,850
don't pass the the Pub the private key

00:21:28,789 --> 00:21:34,009
of any machine out of the TPM so what

00:21:31,850 --> 00:21:36,799
that means is if you have some form of a

00:21:34,009 --> 00:21:39,049
crash that dumps all of the memory of

00:21:36,799 --> 00:21:41,360
the machine including the memory the

00:21:39,049 --> 00:21:44,210
secure memory although we don't accept

00:21:41,360 --> 00:21:45,710
oles do not have dump certain areas of

00:21:44,210 --> 00:21:48,980
secure memory but if there were some

00:21:45,710 --> 00:21:50,899
sort of a bug nobody ever has bugs in

00:21:48,980 --> 00:21:53,629
their software and all of the secure

00:21:50,899 --> 00:21:56,059
memory got dumped out the most that you

00:21:53,629 --> 00:22:00,289
could expose would be the symmetric key

00:21:56,059 --> 00:22:03,139
of ave of a machine that was about to

00:22:00,289 --> 00:22:04,820
boot because after we get the machine

00:22:03,139 --> 00:22:06,289
running we throw we destroy the

00:22:04,820 --> 00:22:07,429
symmetric key and we don't need it you

00:22:06,289 --> 00:22:09,559
only need it while you're in this

00:22:07,429 --> 00:22:11,720
process of checking integrity and stuff

00:22:09,559 --> 00:22:17,870
like that and in the deep end after

00:22:11,720 --> 00:22:21,559
you've setup and set up stuff so so that

00:22:17,870 --> 00:22:23,899
ESM blob that I just described is this

00:22:21,559 --> 00:22:28,179
little yellow box next to the Z images

00:22:23,899 --> 00:22:35,389
and that's and that's what we have there

00:22:28,179 --> 00:22:38,240
okay so boot changes we had to change

00:22:35,389 --> 00:22:41,389
prominent because prominent made

00:22:38,240 --> 00:22:43,100
modifications to the to the kernel and

00:22:41,389 --> 00:22:46,039
other things that would cause the secure

00:22:43,100 --> 00:22:47,750
virtual machine to not pass integrity

00:22:46,039 --> 00:22:50,330
checks but it was a straightforward

00:22:47,750 --> 00:22:53,389
change if you want to look at it it's

00:22:50,330 --> 00:22:56,600
right there we're using the Z image

00:22:53,389 --> 00:22:58,370
format for for booting these things so

00:22:56,600 --> 00:23:01,190
we had to change wrapper which is the

00:22:58,370 --> 00:23:05,330
name of the the script or tool that

00:23:01,190 --> 00:23:07,789
writes that converts a boot VM into as

00:23:05,330 --> 00:23:09,950
the image we had to change it so that we

00:23:07,789 --> 00:23:11,929
we could extend the elf format so that

00:23:09,950 --> 00:23:13,940
you could throw an ESN blob in there and

00:23:11,929 --> 00:23:15,830
it would be available for the ultra

00:23:13,940 --> 00:23:18,590
vires that change has already been up

00:23:15,830 --> 00:23:22,600
been pushed you can take a look at it if

00:23:18,590 --> 00:23:23,710
you want we may have to change grub to

00:23:22,600 --> 00:23:25,450
config' we're still looking at

00:23:23,710 --> 00:23:30,460
alternatives so that change is not yet

00:23:25,450 --> 00:23:33,730
been for stubborn so this ultra visor

00:23:30,460 --> 00:23:36,669
what do we do with it so if you're

00:23:33,730 --> 00:23:38,410
familiar with power so it's higher

00:23:36,669 --> 00:23:39,880
privilege than the hypervisor and there

00:23:38,410 --> 00:23:42,280
are certain things that you can do in

00:23:39,880 --> 00:23:44,590
power and power processors that are

00:23:42,280 --> 00:23:46,720
security sensitive there are these

00:23:44,590 --> 00:23:48,730
registers we call scon registers they

00:23:46,720 --> 00:23:51,520
control the configuration of the machine

00:23:48,730 --> 00:23:52,840
so if you're a hypervisor and you want

00:23:51,520 --> 00:23:54,580
to read or write a scam which is a

00:23:52,840 --> 00:23:58,419
legitimate thing for a hypervisor to do

00:23:54,580 --> 00:24:00,159
you have to ask the ultra vires there's

00:23:58,419 --> 00:24:01,809
also this thing called stop and restore

00:24:00,159 --> 00:24:03,940
state which is used for you know

00:24:01,809 --> 00:24:06,669
suspending processors and stuff like

00:24:03,940 --> 00:24:08,860
that even if you're not even if you're

00:24:06,669 --> 00:24:10,419
suspending a core and it doesn't have

00:24:08,860 --> 00:24:12,280
anything to do with a secure virtual

00:24:10,419 --> 00:24:14,380
machine because of the of the way that

00:24:12,280 --> 00:24:17,309
stopping the stop states work and power

00:24:14,380 --> 00:24:20,200
processors you got to talk to the ultra

00:24:17,309 --> 00:24:21,970
etc they page in and page out or so that

00:24:20,200 --> 00:24:23,770
we can do this ignore paging and then

00:24:21,970 --> 00:24:25,870
you get the idea there's just a few

00:24:23,770 --> 00:24:29,380
interfaces into the end to the ultra

00:24:25,870 --> 00:24:31,150
visor some of these are used by the the

00:24:29,380 --> 00:24:33,309
secure vert can be used by a secure

00:24:31,150 --> 00:24:36,610
virtual machine and the rest of them are

00:24:33,309 --> 00:24:39,070
intended for the hypervisor we allow

00:24:36,610 --> 00:24:42,130
secure virtual machines to share they

00:24:39,070 --> 00:24:44,470
have to share unprotected memory with

00:24:42,130 --> 00:24:47,980
the hypervisor otherwise they could

00:24:44,470 --> 00:24:49,870
never get out over the network so that's

00:24:47,980 --> 00:24:52,929
what's going on with sharing a page we

00:24:49,870 --> 00:24:55,150
allow we allow the guy who's writing the

00:24:52,929 --> 00:24:57,520
secure virtual machine to say hey I want

00:24:55,150 --> 00:24:59,770
to share this buffer with the hypervisor

00:24:57,520 --> 00:25:01,600
unprotected we're assuming that if he's

00:24:59,770 --> 00:25:03,340
using it as a communication buffer he

00:25:01,600 --> 00:25:05,409
will put TLS or some other form of

00:25:03,340 --> 00:25:06,789
correct communications on the data that

00:25:05,409 --> 00:25:08,799
goes through there so we don't have to

00:25:06,789 --> 00:25:11,200
worry about it we can't do everything

00:25:08,799 --> 00:25:13,360
but we can facilitate what you want to

00:25:11,200 --> 00:25:16,990
do there may be a few changes to this

00:25:13,360 --> 00:25:20,860
list as we move forward and some of

00:25:16,990 --> 00:25:23,830
those may change k vm k vm being the

00:25:20,860 --> 00:25:27,010
hypervisor we needed we need it to give

00:25:23,830 --> 00:25:29,289
us a couple of extra H calls we may have

00:25:27,010 --> 00:25:32,650
a few more additions there'll be a talk

00:25:29,289 --> 00:25:35,620
on the changes to k vm at the

00:25:32,650 --> 00:25:38,890
at the KVM foreman in edinburgh in

00:25:35,620 --> 00:25:40,420
october and as i mentioned earlier we're

00:25:38,890 --> 00:25:42,760
changing the heterogeneous memory

00:25:40,420 --> 00:25:44,530
manager so that we can use it to manage

00:25:42,760 --> 00:25:48,070
the secure memory rather than inventing

00:25:44,530 --> 00:25:50,710
something new kernel changes

00:25:48,070 --> 00:25:53,350
these are kernel changes in the in the

00:25:50,710 --> 00:25:57,100
secure virtual machine as I commented

00:25:53,350 --> 00:25:58,780
earlier nothing can reference secure

00:25:57,100 --> 00:26:00,309
memory except the secure virtual machine

00:25:58,780 --> 00:26:02,140
in the ultra vires which means where'd I

00:26:00,309 --> 00:26:06,429
oh won't work unless it does the bounce

00:26:02,140 --> 00:26:09,040
buffering if it if if we allow shared

00:26:06,429 --> 00:26:10,360
non protected memory and so these Verdi

00:26:09,040 --> 00:26:12,520
ode changes that have already been

00:26:10,360 --> 00:26:15,070
pushed out up for comment are similar to

00:26:12,520 --> 00:26:17,050
the changes that AMD introduced for

00:26:15,070 --> 00:26:19,450
their approach to secure virtual

00:26:17,050 --> 00:26:21,940
machines but somewhat different and

00:26:19,450 --> 00:26:23,710
basically what we're doing is we're

00:26:21,940 --> 00:26:26,470
changing the low-level infrastructure of

00:26:23,710 --> 00:26:30,790
Verdi oh so that all of the Verdi

00:26:26,470 --> 00:26:31,990
don't have to change so if it that we

00:26:30,790 --> 00:26:33,580
put the change in a place that's

00:26:31,990 --> 00:26:35,790
transparent to the driver so we're just

00:26:33,580 --> 00:26:39,670
changing that you can take a look at it

00:26:35,790 --> 00:26:41,350
VP a empower is a communications area

00:26:39,670 --> 00:26:43,630
between the virtual machine and the

00:26:41,350 --> 00:26:45,700
hypervisor that both the virtual machine

00:26:43,630 --> 00:26:48,790
and the hypervisor have to have to write

00:26:45,700 --> 00:26:51,640
so that has to use the shared memory SM

00:26:48,790 --> 00:26:57,690
call and that change is being developed

00:26:51,640 --> 00:26:57,690
and we expect it to be pushed in August

00:26:57,720 --> 00:27:08,110
so this is my brief introduction to the

00:27:04,480 --> 00:27:10,990
hardware changes and and and it's brief

00:27:08,110 --> 00:27:12,400
it's this is aimed at you if you happen

00:27:10,990 --> 00:27:14,710
to know how our architecture if you

00:27:12,400 --> 00:27:16,059
don't know power architecture this is

00:27:14,710 --> 00:27:17,559
not going to make some of this isn't

00:27:16,059 --> 00:27:21,130
gonna make a lot of sense and I

00:27:17,559 --> 00:27:22,809
apologize for that but point I made

00:27:21,130 --> 00:27:24,760
earlier the amount of secure memory you

00:27:22,809 --> 00:27:27,520
made you want to have in the machine is

00:27:24,760 --> 00:27:29,559
configurable and is configurable per

00:27:27,520 --> 00:27:31,270
memory controller so one memory

00:27:29,559 --> 00:27:34,120
controller can have more or less than

00:27:31,270 --> 00:27:36,220
another that's up to you we've taken one

00:27:34,120 --> 00:27:38,260
of the reserved bits out of the MSR

00:27:36,220 --> 00:27:39,730
machine status register named at the S

00:27:38,260 --> 00:27:42,640
bit and it indicates whether or not

00:27:39,730 --> 00:27:44,110
you're in secure mode what this means is

00:27:42,640 --> 00:27:45,090
that there are now three bits that

00:27:44,110 --> 00:27:47,640
determine the proof

00:27:45,090 --> 00:27:51,240
and executing an entity on the machine

00:27:47,640 --> 00:27:53,280
there's the MSR svet spit the HPV is the

00:27:51,240 --> 00:27:55,860
hypervisor bit and the PR is the problem

00:27:53,280 --> 00:27:58,260
did so PR means zero you're not in

00:27:55,860 --> 00:27:59,790
problem state PR meaning one you are in

00:27:58,260 --> 00:28:01,770
problem state problem state being the

00:27:59,790 --> 00:28:03,270
lowest privileged state so you can sort

00:28:01,770 --> 00:28:04,830
of see a little illustration that tells

00:28:03,270 --> 00:28:06,630
you what the states look like and

00:28:04,830 --> 00:28:09,570
there's one state that's currently we do

00:28:06,630 --> 00:28:12,090
we added a new register call that 2smf

00:28:09,570 --> 00:28:13,620
ctrl which tells the system whether SMF

00:28:12,090 --> 00:28:16,410
is enabled or not and a couple of other

00:28:13,620 --> 00:28:20,760
things about it we had to add some new

00:28:16,410 --> 00:28:26,790
registers you you are mor USS us are are

00:28:20,760 --> 00:28:28,620
0 USSR 1 us PR g 0 us PR g 1 all of

00:28:26,790 --> 00:28:30,300
these registers mirror registers that

00:28:28,620 --> 00:28:33,290
exist for the hypervisor and power

00:28:30,300 --> 00:28:35,910
architecture the you our mor is a

00:28:33,290 --> 00:28:37,800
relocation register that the system uses

00:28:35,910 --> 00:28:39,450
to find the ultra vires and the other

00:28:37,800 --> 00:28:40,800
registers are all survivors and

00:28:39,450 --> 00:28:43,440
privilege so we can handle interrupts

00:28:40,800 --> 00:28:46,620
and other things like that properly we

00:28:43,440 --> 00:28:48,330
have a new instruction you RFID so the

00:28:46,620 --> 00:28:51,960
ultra vires can start up a virtual a

00:28:48,330 --> 00:28:55,260
secure virtual machine and so when

00:28:51,960 --> 00:28:56,850
you're in your MSR sub s is one you're

00:28:55,260 --> 00:28:59,820
either running the ultra vires or a

00:28:56,850 --> 00:29:01,890
secure vm and privilege which is oh a

00:28:59,820 --> 00:29:05,250
state or problem state which is the

00:29:01,890 --> 00:29:07,230
application and as i commented early all

00:29:05,250 --> 00:29:07,740
hypervisor interrupts go to the alt

00:29:07,230 --> 00:29:11,490
reviser

00:29:07,740 --> 00:29:13,410
there is one hypervisor interrupt that

00:29:11,490 --> 00:29:16,440
the ultra vires does not reflect to the

00:29:13,410 --> 00:29:18,180
hypervisor there's a it's there in our

00:29:16,440 --> 00:29:21,510
old systems there was a hyper call to

00:29:18,180 --> 00:29:23,010
get a random number that's not necessary

00:29:21,510 --> 00:29:24,690
anymore because we have a random number

00:29:23,010 --> 00:29:26,130
instruction in the hardware but if you

00:29:24,690 --> 00:29:28,080
have a system that's using that call

00:29:26,130 --> 00:29:31,370
that calls not reflected to the

00:29:28,080 --> 00:29:33,830
hypervisor because we wouldn't want

00:29:31,370 --> 00:29:36,210
unfortunately compromised hypervisor to

00:29:33,830 --> 00:29:37,380
manipulate random values being used by

00:29:36,210 --> 00:29:40,650
the secure virtual machine so that's

00:29:37,380 --> 00:29:42,930
handled directly by the ultraviolet and

00:29:40,650 --> 00:29:48,360
as I said a synchronous interrupts go to

00:29:42,930 --> 00:29:51,180
the alt revisers so now my summary so

00:29:48,360 --> 00:29:54,300
we're protecting you from the hypervisor

00:29:51,180 --> 00:29:56,000
other software if there happens to be a

00:29:54,300 --> 00:29:58,580
rogue system admin

00:29:56,000 --> 00:30:01,210
the security domain is the VM when it's

00:29:58,580 --> 00:30:03,770
at rest in transit or executing

00:30:01,210 --> 00:30:06,950
applications no changes to run in the

00:30:03,770 --> 00:30:08,840
SVM the guest OS we're creating some new

00:30:06,950 --> 00:30:11,150
k config options so you can say i want

00:30:08,840 --> 00:30:12,920
this to be a secure virtual machine the

00:30:11,150 --> 00:30:15,350
hypervisor we have to paravirtualized

00:30:12,920 --> 00:30:17,870
we're making those changes though all

00:30:15,350 --> 00:30:20,300
that will be open source including a

00:30:17,870 --> 00:30:23,090
tooling for this there will there are

00:30:20,300 --> 00:30:24,620
some changes for both opal and host boot

00:30:23,090 --> 00:30:27,830
associated with this and they will also

00:30:24,620 --> 00:30:29,360
be pushed out at an appropriate time the

00:30:27,830 --> 00:30:32,390
secure memory gives you integrity and

00:30:29,360 --> 00:30:34,280
confidentiality protection you can embed

00:30:32,390 --> 00:30:34,880
a secret in the secure VM because it's

00:30:34,280 --> 00:30:38,450
encrypted

00:30:34,880 --> 00:30:40,280
after it's created at all times the

00:30:38,450 --> 00:30:43,310
memory size is limited to available

00:30:40,280 --> 00:30:46,460
memory based on how much you can

00:30:43,310 --> 00:30:48,620
allocate available memory - the memory

00:30:46,460 --> 00:30:50,480
you you allocate you have to leave

00:30:48,620 --> 00:30:52,780
normal memory for the hypervisor so you

00:30:50,480 --> 00:30:54,830
can't use 100% of available memory

00:30:52,780 --> 00:30:57,710
because the ultra vires is not a

00:30:54,830 --> 00:31:00,650
hypervisor and everything associated

00:30:57,710 --> 00:31:04,820
with this is going is is already or will

00:31:00,650 --> 00:31:07,970
be open sourced so this is the page I

00:31:04,820 --> 00:31:10,400
mentioned earlier on IBM's been building

00:31:07,970 --> 00:31:14,780
cryptographic coprocessors and secure

00:31:10,400 --> 00:31:16,520
secure hardware for about 20 or 20 years

00:31:14,780 --> 00:31:19,010
or so the first being something called

00:31:16,520 --> 00:31:22,220
the 47 50 58 which was a cryptographic

00:31:19,010 --> 00:31:25,340
Pro coprocessor which was done in the

00:31:22,220 --> 00:31:27,530
late 90s and there it was also anti it

00:31:25,340 --> 00:31:29,690
was also tamper proof or tamper

00:31:27,530 --> 00:31:31,910
resistant whichever you prefer if it

00:31:29,690 --> 00:31:35,060
detected your tamper all of the secrets

00:31:31,910 --> 00:31:36,590
disappeared and and the the link there

00:31:35,060 --> 00:31:38,360
is to the latest version that was

00:31:36,590 --> 00:31:40,880
announced either earlier this year or

00:31:38,360 --> 00:31:42,950
last year we also produce something

00:31:40,880 --> 00:31:45,350
called a secure boon secure processor

00:31:42,950 --> 00:31:48,140
technology several million of those have

00:31:45,350 --> 00:31:50,030
been out and around we produce we

00:31:48,140 --> 00:31:52,730
created a research project called secure

00:31:50,030 --> 00:31:54,740
boom press plus we also have announced

00:31:52,730 --> 00:31:57,170
own zseries secure service container

00:31:54,740 --> 00:31:59,840
secure execution technology on IBM Linux

00:31:57,170 --> 00:32:03,950
one which is related to this work and

00:31:59,840 --> 00:32:07,010
then finally this last link is to the

00:32:03,950 --> 00:32:09,790
final report for our DHS sponsored

00:32:07,010 --> 00:32:12,010
project sponsored by the federal

00:32:09,790 --> 00:32:19,270
Government of Canada and the US

00:32:12,010 --> 00:32:22,300
government are there any questions so I

00:32:19,270 --> 00:32:27,400
have a couple first is let's say you've

00:32:22,300 --> 00:32:30,010
got three keys under which which give

00:32:27,400 --> 00:32:34,660
you a cell phone which you can execute

00:32:30,010 --> 00:32:38,820
right it's the only way for a VM to know

00:32:34,660 --> 00:32:41,830
which of those keys it's at security and

00:32:38,820 --> 00:32:44,500
we didn't think of that we could make

00:32:41,830 --> 00:32:46,180
away but but there isn't one in the

00:32:44,500 --> 00:32:50,650
interface right now is that an important

00:32:46,180 --> 00:32:52,960
thing I'm not sure yet I mean it's it's

00:32:50,650 --> 00:32:54,490
easy it's easy for us to provide an alt

00:32:52,960 --> 00:32:57,010
reviser interface that they can find out

00:32:54,490 --> 00:32:58,750
because we know the ultra vires are know

00:32:57,010 --> 00:33:01,600
so we just don't pass that information

00:32:58,750 --> 00:33:04,870
up to the VM at this so a second and

00:33:01,600 --> 00:33:08,770
very different question if the ultra

00:33:04,870 --> 00:33:11,520
vires firmware were compromised yes you

00:33:08,770 --> 00:33:11,520
would have the machine

00:33:12,420 --> 00:33:20,260
is there any way of letting an

00:33:17,400 --> 00:33:25,690
Orchestrator eye whoever's going to be

00:33:20,260 --> 00:33:29,020
sending the Machine the SVM image know

00:33:25,690 --> 00:33:32,080
of that as part of an attestation okay

00:33:29,020 --> 00:33:33,940
so in our secure boot architecture which

00:33:32,080 --> 00:33:37,420
Claudio talked about we're doing secure

00:33:33,940 --> 00:33:38,380
and trusted boot so if you boot to the

00:33:37,420 --> 00:33:42,250
ultra vires

00:33:38,380 --> 00:33:44,680
it hasn't been compromised in innocence

00:33:42,250 --> 00:33:48,820
unless unless it was compromised when it

00:33:44,680 --> 00:33:49,660
was created okay if it is compromised it

00:33:48,820 --> 00:33:52,270
won't boot

00:33:49,660 --> 00:33:55,870
it'll boots and they optimizer can boot

00:33:52,270 --> 00:33:58,000
but if but we're using trusted boot to

00:33:55,870 --> 00:34:01,720
give the ultra vires access to the

00:33:58,000 --> 00:34:03,670
private key so if if the ultra is

00:34:01,720 --> 00:34:06,370
running and it's not the right ultra

00:34:03,670 --> 00:34:10,120
vires the TPM can never get the private

00:34:06,370 --> 00:34:13,570
key so nothing nothing gets out okay so

00:34:10,120 --> 00:34:15,850
why have yet another layer why did you

00:34:13,570 --> 00:34:19,210
not just extend the supervisor to do the

00:34:15,850 --> 00:34:20,980
hypervisor functions because the attack

00:34:19,210 --> 00:34:23,710
surface would be significantly larger

00:34:20,980 --> 00:34:28,659
see

00:34:23,710 --> 00:34:30,310
we found instances where we didn't want

00:34:28,659 --> 00:34:32,200
to write another hypervisor or make it

00:34:30,310 --> 00:34:34,690
very complex and we found that we could

00:34:32,200 --> 00:34:37,480
base that we when we looked at the VM 2

00:34:34,690 --> 00:34:39,790
OS interface as others have done we

00:34:37,480 --> 00:34:42,940
found that it was fairly easy to secure

00:34:39,790 --> 00:34:45,820
it you know and save the state of the

00:34:42,940 --> 00:34:49,119
running VM and pass only the information

00:34:45,820 --> 00:34:52,210
needed for the for the call so that's

00:34:49,119 --> 00:34:54,190
that's what we decided to do I think if

00:34:52,210 --> 00:34:55,480
we tried to extend the hypervisor or

00:34:54,190 --> 00:34:58,320
something we would be including we would

00:34:55,480 --> 00:35:03,609
have to try to create almost another

00:34:58,320 --> 00:35:05,260
another level with just firmware and and

00:35:03,609 --> 00:35:06,760
we decided to introduce a new hardware

00:35:05,260 --> 00:35:08,440
state because then there's a whole lot

00:35:06,760 --> 00:35:09,970
of stuff the firmware doesn't have to do

00:35:08,440 --> 00:35:13,960
because the hardware does it

00:35:09,970 --> 00:35:22,990
automatically it much faster any any

00:35:13,960 --> 00:35:25,510
other questions yes a question about

00:35:22,990 --> 00:35:28,359
scalability so you have a number of

00:35:25,510 --> 00:35:33,099
private I guess public private key pairs

00:35:28,359 --> 00:35:36,400
stored one per machine yes how many

00:35:33,099 --> 00:35:41,320
machines can you support is limited by

00:35:36,400 --> 00:35:45,070
the TPM memory no ok so each machine has

00:35:41,320 --> 00:35:46,720
has a TPM on it one or more TPMS and so

00:35:45,070 --> 00:35:48,220
this scales to as many machines as you

00:35:46,720 --> 00:35:50,260
want it to scale because the ultra vires

00:35:48,220 --> 00:35:55,240
only running on one machine that runs on

00:35:50,260 --> 00:35:57,640
all cores on one machine yeah you can

00:35:55,240 --> 00:35:59,470
and and the same public/private key you

00:35:57,640 --> 00:36:01,869
can put on as many machines as you want

00:35:59,470 --> 00:36:03,250
that's in the TPM infrastructure so you

00:36:01,869 --> 00:36:06,849
can do what's I think it's called

00:36:03,250 --> 00:36:08,410
replicating or duplicating a key so if

00:36:06,849 --> 00:36:11,109
you have a machine and you're building

00:36:08,410 --> 00:36:12,640
up infrastructure and you want this data

00:36:11,109 --> 00:36:14,050
center let's say you're doing a data

00:36:12,640 --> 00:36:15,849
center is sort of obsolete what you're

00:36:14,050 --> 00:36:17,619
doing a data center and you want all the

00:36:15,849 --> 00:36:19,750
machines in the data center to have the

00:36:17,619 --> 00:36:22,150
same public private key you can do that

00:36:19,750 --> 00:36:24,099
in our architecture if you're building a

00:36:22,150 --> 00:36:26,950
cloud infrastructure and you want all

00:36:24,099 --> 00:36:28,839
the machines in this cloud and you have

00:36:26,950 --> 00:36:30,130
one instance in Dallas and another

00:36:28,839 --> 00:36:32,050
instance in New York and another

00:36:30,130 --> 00:36:33,400
instance in France say you have

00:36:32,050 --> 00:36:36,520
different instances all the way around

00:36:33,400 --> 00:36:37,210
the world and you want the particular

00:36:36,520 --> 00:36:40,720
cloud and

00:36:37,210 --> 00:36:42,460
chances to have their own each to have

00:36:40,720 --> 00:36:43,600
its own public private key but you want

00:36:42,460 --> 00:36:48,400
them to be different because you're

00:36:43,600 --> 00:36:51,190
using that to to obey gdpr and make sure

00:36:48,400 --> 00:36:54,490
certain computations can't run out can't

00:36:51,190 --> 00:36:56,040
be used outside of their national

00:36:54,490 --> 00:37:10,120
boundaries you can do that

00:36:56,040 --> 00:37:15,820
so the ESM blog yeah yeah no no you make

00:37:10,120 --> 00:37:17,140
it as large as you want well you put a

00:37:15,820 --> 00:37:20,980
million keys in there it's gonna take a

00:37:17,140 --> 00:37:23,950
little longer to boot yeah but that's it

00:37:20,980 --> 00:37:25,780
and do you have storage on your media

00:37:23,950 --> 00:37:28,180
for the size of you you know etc it's

00:37:25,780 --> 00:37:31,860
not going to be no scaling issues that

00:37:28,180 --> 00:37:34,990
we're aware of any other questions

00:37:31,860 --> 00:37:37,030
related to he was just asking about so

00:37:34,990 --> 00:37:39,670
with regards to the key management for

00:37:37,030 --> 00:37:41,950
the TPM what kind of infrastructure or

00:37:39,670 --> 00:37:44,500
services are available to actually have

00:37:41,950 --> 00:37:49,570
visibility across your fleet for all of

00:37:44,500 --> 00:37:54,420
that key management so we do not provide

00:37:49,570 --> 00:38:00,130
any way for you to see the private keys

00:37:54,420 --> 00:38:02,950
because if you were able to extract a

00:38:00,130 --> 00:38:07,030
private key and you and somebody stole

00:38:02,950 --> 00:38:08,290
it they would now have entry to every

00:38:07,030 --> 00:38:09,910
secure virtual machine that was

00:38:08,290 --> 00:38:11,110
authorized to run on your infrastructure

00:38:09,910 --> 00:38:14,920
so you can't do that

00:38:11,110 --> 00:38:17,590
we provide no means for that we we don't

00:38:14,920 --> 00:38:20,230
tell you how to manage your public keys

00:38:17,590 --> 00:38:21,340
we leave that up to you we're not you

00:38:20,230 --> 00:38:23,740
can use any key management

00:38:21,340 --> 00:38:27,400
infrastructure you want what we do do is

00:38:23,740 --> 00:38:29,050
we enable you you don't have to we put a

00:38:27,400 --> 00:38:31,780
public private key in the machine when

00:38:29,050 --> 00:38:34,780
we manufacture when you get the machine

00:38:31,780 --> 00:38:36,490
you can change it when you get the

00:38:34,780 --> 00:38:38,170
machine you can replicate a key from

00:38:36,490 --> 00:38:41,770
another machine into it or you can make

00:38:38,170 --> 00:38:44,050
a new key or if for whatever reason you

00:38:41,770 --> 00:38:45,820
decide you really need you know if you

00:38:44,050 --> 00:38:47,380
sell your machine you bought the machine

00:38:45,820 --> 00:38:49,750
you keep it for five years you sell it

00:38:47,380 --> 00:38:50,240
to somebody else they can put it in

00:38:49,750 --> 00:38:51,980
their own

00:38:50,240 --> 00:38:53,869
they can change it again so we allow you

00:38:51,980 --> 00:38:55,280
to change it we're going to supply

00:38:53,869 --> 00:38:58,580
tooling so that you can update and

00:38:55,280 --> 00:39:00,650
change the keys all of this stuff is in

00:38:58,580 --> 00:39:03,110
the TPM 2.0 spec and we're going to

00:39:00,650 --> 00:39:05,030
surprise software that makes it easier

00:39:03,110 --> 00:39:06,619
for you to use it so that you can update

00:39:05,030 --> 00:39:09,260
the keys and then once you have the

00:39:06,619 --> 00:39:10,670
public key then you we're assuming that

00:39:09,260 --> 00:39:11,869
you would manage it as you would manage

00:39:10,670 --> 00:39:23,000
any other public key in your

00:39:11,869 --> 00:39:24,920
infrastructure kind of a follow up to

00:39:23,000 --> 00:39:28,460
that you said you could import a key

00:39:24,920 --> 00:39:30,710
from another computer you can in the TPM

00:39:28,460 --> 00:39:32,480
2.0 I can install I can tell it to

00:39:30,710 --> 00:39:34,670
generate a public/private key pair and

00:39:32,480 --> 00:39:36,200
then there's another command I don't

00:39:34,670 --> 00:39:38,390
remember the exact name where I can

00:39:36,200 --> 00:39:41,030
export that public private key pair

00:39:38,390 --> 00:39:43,820
encrypted and store it someplace and

00:39:41,030 --> 00:39:46,490
then I can restore that into another TPM

00:39:43,820 --> 00:39:48,830
or back into the same TPM and I can use

00:39:46,490 --> 00:39:50,210
that facility to replicate the same key

00:39:48,830 --> 00:39:52,520
across multiple machines

00:39:50,210 --> 00:39:54,760
this is TPM 2.0 we didn't invent this

00:39:52,520 --> 00:39:59,080
we're just using it

00:39:54,760 --> 00:39:59,080
duplicate yeah that's what it's called

00:40:03,940 --> 00:40:08,350
okay go ahead

00:40:09,880 --> 00:40:18,320
are there any occasions when you might

00:40:13,400 --> 00:40:22,490
need to be able to revoke a set of

00:40:18,320 --> 00:40:26,420
public private keys and if so how would

00:40:22,490 --> 00:40:30,980
you do that it is possible that you

00:40:26,420 --> 00:40:32,900
might want to revoke a key the one thing

00:40:30,980 --> 00:40:35,900
I didn't point out is that with this

00:40:32,900 --> 00:40:39,200
scheme once I authorize a VM to run on

00:40:35,900 --> 00:40:42,560
to run on a piece of hardware it's

00:40:39,200 --> 00:40:46,850
authorized permanently you know and so

00:40:42,560 --> 00:40:49,130
if for any reason I wanted to not enable

00:40:46,850 --> 00:40:51,109
that VM to run I would have to revoke

00:40:49,130 --> 00:40:53,570
the private key boat revoke the public

00:40:51,109 --> 00:40:56,780
key that the weakness of that is

00:40:53,570 --> 00:40:58,790
obviously that if I stop if I disabled

00:40:56,780 --> 00:41:00,950
that public key I disabled every VM

00:40:58,790 --> 00:41:02,299
that's used that public key not just a

00:41:00,950 --> 00:41:04,670
particular VM

00:41:02,299 --> 00:41:06,529
so then you get into other questions

00:41:04,670 --> 00:41:08,719
that we're also looking at and thinking

00:41:06,529 --> 00:41:13,759
about so I mean that's that's a that's

00:41:08,719 --> 00:41:16,789
an important question we are sort of

00:41:13,759 --> 00:41:18,140
assuming we're not that concerned about

00:41:16,789 --> 00:41:20,119
it although it's an important question

00:41:18,140 --> 00:41:21,920
because we're assuming that you have

00:41:20,119 --> 00:41:24,619
some degree of access control management

00:41:21,920 --> 00:41:27,380
over those who are authorized to run

00:41:24,619 --> 00:41:29,089
things on your system and so your first

00:41:27,380 --> 00:41:31,849
step would be to withdraw their

00:41:29,089 --> 00:41:33,739
credentials and then so this other step

00:41:31,849 --> 00:41:43,689
would be more drastic if for some reason

00:41:33,739 --> 00:41:43,689
that wasn't sufficient anything else

00:41:46,060 --> 00:41:51,150
okay thank you

00:41:47,890 --> 00:41:51,150

YouTube URL: https://www.youtube.com/watch?v=11DEfwVZEJ4


