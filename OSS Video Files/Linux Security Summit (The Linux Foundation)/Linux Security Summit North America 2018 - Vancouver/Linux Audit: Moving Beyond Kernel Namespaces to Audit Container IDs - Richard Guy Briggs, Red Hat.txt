Title: Linux Audit: Moving Beyond Kernel Namespaces to Audit Container IDs - Richard Guy Briggs, Red Hat
Publication date: 2018-08-31
Playlist: Linux Security Summit North America 2018 - Vancouver
Description: 
	Linux Audit: Moving Beyond Kernel Namespaces to Audit Container IDs - Richard Guy Briggs, Red Hat

Audit will need to run in containers, possibly for distributions, but more likely for docker micro-services to meet new certification requirements. Since the kernel has no concept of containers,
identifying the container involved in audit messages will equip tracking tools to follow process events in containers. 

Namespaces were the primary focus of my container audit presentation two years ago in Toronto. Feedback and further work made it clear that no one namespace or subset could be depended on to be part of a container, so another approach was needed to track container activity.

Several design proposals and several patchsets have been posted aimed at providing a method of tracking container activity by audit. Allowing multiple audit daemons, each with its own rule space and queue along with a system-wide audit message routing configuration is the current plan.

About Richard Guy Briggs
Richard was an early adopter of Linux, having used it since 1992. He was also a founding board member of Ottawa Canada Linux Users Group and a speaker at the inaugural Ottawa Linux Symposium. Richard has written UNIX and Linux device drivers for telecom, video and network applications and embedded devices, having a good knowledge of IPsec protocols. He is comfortable in C, bash, Perl, with a soldering iron, oscilloscope, at a podium or chalkboard. He is now a Red Hat kernel security engineer.
Captions: 
	00:00:00,030 --> 00:00:12,330
all right hi last time I spoke to this

00:00:08,040 --> 00:00:17,600
crowd was two years ago in Toronto all

00:00:12,330 --> 00:00:21,150
right so um who my Richard D Briggs and

00:00:17,600 --> 00:00:22,800
yeah James pronounced it right most

00:00:21,150 --> 00:00:23,580
people who've read my name on the

00:00:22,800 --> 00:00:26,340
Internet

00:00:23,580 --> 00:00:37,320
seem that I'm an Anglophone and get the

00:00:26,340 --> 00:00:39,570
middle name wrong so Who am I so live in

00:00:37,320 --> 00:00:44,059
Ottawa raised in Ottawa one of the few

00:00:39,570 --> 00:00:49,160
who actually still there or native

00:00:44,059 --> 00:00:49,160
started off doing pet stuff

00:00:49,789 --> 00:00:54,390
assembly language machine language stuff

00:00:52,410 --> 00:00:58,500
really because I was going right to the

00:00:54,390 --> 00:01:01,379
sources and and hard coding stuff then

00:00:58,500 --> 00:01:03,619
graduated to some pdp-11 and Fortran

00:01:01,379 --> 00:01:06,330
stuff

00:01:03,619 --> 00:01:07,560
computer science sorry computer science

00:01:06,330 --> 00:01:09,299
initially at the University of Ottawa

00:01:07,560 --> 00:01:12,650
but then switched over to computer

00:01:09,299 --> 00:01:17,640
engineering got involved with free Swan

00:01:12,650 --> 00:01:19,680
that's really where I I guess widen my

00:01:17,640 --> 00:01:22,320
horizons and got involved in the Linux

00:01:19,680 --> 00:01:23,850
community that was pretty significant in

00:01:22,320 --> 00:01:26,939
terms of also introducing me to the

00:01:23,850 --> 00:01:30,320
wider world of security and the IETF and

00:01:26,939 --> 00:01:33,750
standards that was quite a fun project

00:01:30,320 --> 00:01:36,180
worked on that for six years and then

00:01:33,750 --> 00:01:39,270
got involved with a local company in

00:01:36,180 --> 00:01:43,079
Ottawa doing imager device drivers again

00:01:39,270 --> 00:01:50,340
in the kernel then I've been with Red

00:01:43,079 --> 00:01:53,430
Hat since 2012 online I'm node as RGB or

00:01:50,340 --> 00:01:55,710
Sun racer being involved in Sun sorry

00:01:53,430 --> 00:02:00,090
and solar car racing which is where the

00:01:55,710 --> 00:02:02,579
Sun racer handle came from weird bike

00:02:00,090 --> 00:02:05,490
guy so this humpty-dumpty bit that's

00:02:02,579 --> 00:02:10,640
related to this appendage that I'm

00:02:05,490 --> 00:02:13,940
carrying with me let's see if I can so

00:02:10,640 --> 00:02:19,700
that sort of quickly explained

00:02:13,940 --> 00:02:21,680
what this is all about that happened

00:02:19,700 --> 00:02:24,290
about 200 feet in front of my house on a

00:02:21,680 --> 00:02:27,230
bridge that crosses right in the river

00:02:24,290 --> 00:02:30,110
right in front so that the picture on

00:02:27,230 --> 00:02:32,900
the left was taken about six days before

00:02:30,110 --> 00:02:35,930
the picture on the upper right and the

00:02:32,900 --> 00:02:38,000
bottom right so yeah I'm surprised I

00:02:35,930 --> 00:02:41,930
didn't actually set off the the metal

00:02:38,000 --> 00:02:44,960
detector in the airport in fact it was

00:02:41,930 --> 00:02:49,810
my it was my bike cleats that set off

00:02:44,960 --> 00:02:53,870
the detector in the airport yeah

00:02:49,810 --> 00:02:58,400
so what sawed it it was introduced by

00:02:53,870 --> 00:03:03,610
Rick faith at Red Hat in 2004 and then

00:02:58,400 --> 00:03:06,680
since then it's being added to and

00:03:03,610 --> 00:03:11,390
enhanced and fixed and repaired and

00:03:06,680 --> 00:03:13,310
patched and it's basically secure

00:03:11,390 --> 00:03:17,380
logging that's embedded in the kernel

00:03:13,310 --> 00:03:21,580
itself so the idea here is that syslog

00:03:17,380 --> 00:03:24,320
is not a secure logging system and

00:03:21,580 --> 00:03:28,160
what's being attempted with audit is to

00:03:24,320 --> 00:03:30,050
create a system that can be used in a

00:03:28,160 --> 00:03:31,790
court of law some of the logs can be

00:03:30,050 --> 00:03:33,650
used in a court of law to be able to say

00:03:31,790 --> 00:03:36,890
this attack happened we know that this

00:03:33,650 --> 00:03:39,470
happened at this particular time and be

00:03:36,890 --> 00:03:43,010
able to track things down a little bit

00:03:39,470 --> 00:03:46,420
more assuredly it works well with other

00:03:43,010 --> 00:03:49,850
LSMs particular SELinux is the one that

00:03:46,420 --> 00:03:52,480
it has been most closely tied to but

00:03:49,850 --> 00:03:56,120
certainly other LSMs make good use of it

00:03:52,480 --> 00:03:59,720
there's a user space daemon and it logs

00:03:56,120 --> 00:04:02,209
either to disk or to network there is

00:03:59,720 --> 00:04:04,850
configurable kernel filters so you can

00:04:02,209 --> 00:04:06,380
set up whatever filters you need in the

00:04:04,850 --> 00:04:09,530
kernel itself to be able to catch

00:04:06,380 --> 00:04:11,870
certain events so that various different

00:04:09,530 --> 00:04:14,030
user space things are not able to be

00:04:11,870 --> 00:04:18,019
able to circumvent any of those rules or

00:04:14,030 --> 00:04:19,870
detections there's also messages that

00:04:18,019 --> 00:04:23,060
can come from various different user

00:04:19,870 --> 00:04:27,710
Damons and they're able to log messages

00:04:23,060 --> 00:04:29,810
into the audit system as well so it only

00:04:27,710 --> 00:04:31,759
portes behavior it doesn't actually

00:04:29,810 --> 00:04:33,650
interfere and get in the way

00:04:31,759 --> 00:04:36,099
Steve Grubb one of our colleagues has

00:04:33,650 --> 00:04:39,740
been working on a intrusion detection

00:04:36,099 --> 00:04:41,690
system which is related to it so it

00:04:39,740 --> 00:04:44,599
would take information that's generated

00:04:41,690 --> 00:04:47,240
by audit parse it and then be able to go

00:04:44,599 --> 00:04:49,580
and act on it but those are external to

00:04:47,240 --> 00:04:54,199
audit itself and it simply uses audit as

00:04:49,580 --> 00:04:56,630
a mechanism to be able to trigger it so

00:04:54,199 --> 00:05:01,250
the next problem is what are containers

00:04:56,630 --> 00:05:02,660
there are many definitions and there's

00:05:01,250 --> 00:05:04,250
many people out there who've been trying

00:05:02,660 --> 00:05:07,039
to solve this problem of what is a

00:05:04,250 --> 00:05:09,740
container and so there's various

00:05:07,039 --> 00:05:13,610
different subsets of namespaces and SEC

00:05:09,740 --> 00:05:17,449
comp and C groups that have been used to

00:05:13,610 --> 00:05:20,810
create containers unfortunately there is

00:05:17,449 --> 00:05:23,690
no consensus in the community as to what

00:05:20,810 --> 00:05:26,030
a baseline of namespaces are required to

00:05:23,690 --> 00:05:28,310
be able to do this if we did have a

00:05:26,030 --> 00:05:30,050
baseline of this is the minimum

00:05:28,310 --> 00:05:31,820
namespace that we need to be able to

00:05:30,050 --> 00:05:34,009
make a container we could have already

00:05:31,820 --> 00:05:36,139
used that information and said okay well

00:05:34,009 --> 00:05:38,599
we can use that as an identifier and go

00:05:36,139 --> 00:05:41,150
from there unfortunately that's not the

00:05:38,599 --> 00:05:44,300
case so the kernel has no concept of

00:05:41,150 --> 00:05:46,340
what a container is and so we're looking

00:05:44,300 --> 00:05:49,190
for some help and it's kind of okay well

00:05:46,340 --> 00:05:51,169
we need to log some event that happened

00:05:49,190 --> 00:05:52,699
we want to know what container did this

00:05:51,169 --> 00:05:55,430
happen in if it happened in any

00:05:52,699 --> 00:05:57,860
container at all or whether it was the

00:05:55,430 --> 00:06:03,590
host itself that somehow has a rogue

00:05:57,860 --> 00:06:05,780
process so the next step was we know

00:06:03,590 --> 00:06:08,419
that the the container manager the

00:06:05,780 --> 00:06:12,289
orchestrator knows this information and

00:06:08,419 --> 00:06:15,590
so it needs to report this so at the

00:06:12,289 --> 00:06:17,990
previous talk two years ago I came up

00:06:15,590 --> 00:06:20,000
with the question of do we go with a

00:06:17,990 --> 00:06:24,020
container ID or a collection of

00:06:20,000 --> 00:06:27,469
namespace IDs there had been previous

00:06:24,020 --> 00:06:29,270
work so all right back up a second here

00:06:27,469 --> 00:06:32,479
so what's the problem

00:06:29,270 --> 00:06:34,520
as far as audit is concerned there was

00:06:32,479 --> 00:06:39,260
you know the highlander phrase there can

00:06:34,520 --> 00:06:41,120
be only one so previously audit you

00:06:39,260 --> 00:06:42,740
start up an audit daemon and

00:06:41,120 --> 00:06:44,419
then if you started up a second one it

00:06:42,740 --> 00:06:46,820
would basically disconnect the first one

00:06:44,419 --> 00:06:48,530
or ignore it and continue that's been

00:06:46,820 --> 00:06:50,810
fixed now so if you try and start up a

00:06:48,530 --> 00:06:53,240
second one it'll go no you can't there's

00:06:50,810 --> 00:06:56,710
already one running unless it somehow

00:06:53,240 --> 00:06:59,690
has died in which case it'll replace it

00:06:56,710 --> 00:07:01,940
so the the problems we were trying to

00:06:59,690 --> 00:07:06,570
avoid there was orphanage

00:07:01,940 --> 00:07:09,680
earlier ones or blocking out new ones

00:07:06,570 --> 00:07:09,680
[Music]

00:07:10,870 --> 00:07:16,160
audit itself is not able to trace the

00:07:13,520 --> 00:07:19,250
task that has caused a particular event

00:07:16,160 --> 00:07:21,650
to a specific container we had looked at

00:07:19,250 --> 00:07:23,090
using a combination of namespaces and

00:07:21,650 --> 00:07:25,699
say okay well this collection of

00:07:23,090 --> 00:07:27,770
namespaces was responsible for this

00:07:25,699 --> 00:07:30,440
particular event so we should be able to

00:07:27,770 --> 00:07:32,120
trace it back and say I think it must be

00:07:30,440 --> 00:07:33,889
this container over here because this

00:07:32,120 --> 00:07:36,440
combination was registered by an

00:07:33,889 --> 00:07:40,070
Orchestrator this gets really

00:07:36,440 --> 00:07:42,530
complicated in it I guess there's some

00:07:40,070 --> 00:07:44,449
arguments that have been made that this

00:07:42,530 --> 00:07:47,030
is a user space job to be able to figure

00:07:44,449 --> 00:07:53,479
all this stuff out but it just got

00:07:47,030 --> 00:07:55,760
really too complicated and it wasn't we

00:07:53,479 --> 00:07:57,560
didn't have the the certainty or the

00:07:55,760 --> 00:08:03,710
assurance that that really was the case

00:07:57,560 --> 00:08:07,220
so we tried to find another way the idea

00:08:03,710 --> 00:08:09,979
here is to make security claims about

00:08:07,220 --> 00:08:11,949
containers because we're just seeing

00:08:09,979 --> 00:08:15,229
we're getting more and more people

00:08:11,949 --> 00:08:17,180
asking for this particular approach and

00:08:15,229 --> 00:08:20,300
say well we want to run a container but

00:08:17,180 --> 00:08:21,979
we want to be able to make assurances

00:08:20,300 --> 00:08:24,440
about what those containers are doing

00:08:21,979 --> 00:08:28,370
and where they came from

00:08:24,440 --> 00:08:29,830
so it's it's part of the whole tracking

00:08:28,370 --> 00:08:34,039
mechanism that we're trying to set up

00:08:29,830 --> 00:08:36,500
we're also needing it for to filter

00:08:34,039 --> 00:08:38,209
logging itself so there may be certain

00:08:36,500 --> 00:08:44,390
containers which we're not concerned

00:08:38,209 --> 00:08:46,459
about or certain events that we don't

00:08:44,390 --> 00:08:48,380
care about so we want to be able to

00:08:46,459 --> 00:08:50,240
filter the logging itself to reduce the

00:08:48,380 --> 00:08:52,640
amount of volume to deal with because

00:08:50,240 --> 00:08:53,750
that can create a denial of service

00:08:52,640 --> 00:08:56,600
attack in turn

00:08:53,750 --> 00:08:59,030
of logging stuff to disk the other

00:08:56,600 --> 00:09:01,370
aspect of course is in doing searches so

00:08:59,030 --> 00:09:03,380
if we've got the container ID we can do

00:09:01,370 --> 00:09:05,000
a search on the particular container ID

00:09:03,380 --> 00:09:08,360
and pull up all of the events that are

00:09:05,000 --> 00:09:12,260
related to it or perhaps not related to

00:09:08,360 --> 00:09:14,570
it further down the road we're gonna be

00:09:12,260 --> 00:09:18,800
looking at how to route audit messages

00:09:14,570 --> 00:09:21,880
to different Damons so right now there

00:09:18,800 --> 00:09:25,480
is only one audit daemon but we're still

00:09:21,880 --> 00:09:27,770
doing some architecting and planning my

00:09:25,480 --> 00:09:30,260
colleague Palmer sitting right in front

00:09:27,770 --> 00:09:34,400
of me here is a person I'm working with

00:09:30,260 --> 00:09:37,160
on that trying to come up with a design

00:09:34,400 --> 00:09:39,110
or a plan to be able to figure out how

00:09:37,160 --> 00:09:41,330
to route those messages to different

00:09:39,110 --> 00:09:43,790
audit Damons and allow more than one

00:09:41,330 --> 00:09:46,070
daemon to run at the same time which

00:09:43,790 --> 00:09:48,920
could take care of a subset of

00:09:46,070 --> 00:09:51,020
containers and be able to say okay well

00:09:48,920 --> 00:09:54,380
this daemon here is responsible for that

00:09:51,020 --> 00:09:56,650
pod or whatever and be able to have a

00:09:54,380 --> 00:09:59,030
bit more flexibility in terms of

00:09:56,650 --> 00:10:01,490
managing routing and where that stuff's

00:09:59,030 --> 00:10:06,170
going so the conclusion there was that

00:10:01,490 --> 00:10:09,220
the NS ID namespace identifiers tracking

00:10:06,170 --> 00:10:12,710
was too complex and it was incomplete

00:10:09,220 --> 00:10:16,190
terms of history goes back more than a

00:10:12,710 --> 00:10:19,640
yeah bit more than five years one of our

00:10:16,190 --> 00:10:24,620
colleagues our story sanski had come up

00:10:19,640 --> 00:10:29,150
with a proc inode ID for each namespace

00:10:24,620 --> 00:10:31,610
and tried to promote that there were

00:10:29,150 --> 00:10:34,280
some issues the namespace folks said

00:10:31,610 --> 00:10:36,080
that's insufficient so we added the

00:10:34,280 --> 00:10:39,589
device ID to be able to try and nail

00:10:36,080 --> 00:10:42,860
that down then the ID came up to use a

00:10:39,589 --> 00:10:45,620
serial number within the namespace

00:10:42,860 --> 00:10:48,910
instead of the proc because the proc

00:10:45,620 --> 00:10:51,530
inode there was some reservations about

00:10:48,910 --> 00:10:54,500
we would like to reserve the right to

00:10:51,530 --> 00:10:58,130
change the meaning of this if things are

00:10:54,500 --> 00:11:00,080
migrated or change it another time so

00:10:58,130 --> 00:11:01,910
came up with a serial number I prototype

00:11:00,080 --> 00:11:03,589
it was eventually discarded because

00:11:01,910 --> 00:11:05,180
there were some concessions that okay

00:11:03,589 --> 00:11:07,730
this is probably getting too complicated

00:11:05,180 --> 00:11:12,050
we need to take a step back

00:11:07,730 --> 00:11:17,519
meanwhile alvaro reworked it for

00:11:12,050 --> 00:11:19,350
namespace file systems and then

00:11:17,519 --> 00:11:21,600
eventually moved on and abandoned the

00:11:19,350 --> 00:11:25,529
namespace ID as impractical and

00:11:21,600 --> 00:11:28,110
insufficient so the namespace ID patch

00:11:25,529 --> 00:11:30,870
set I have updated it there's still some

00:11:28,110 --> 00:11:33,300
use for it but it is insufficient for

00:11:30,870 --> 00:11:38,430
doing the the core stuff of tracking

00:11:33,300 --> 00:11:40,709
container problems so namespace concerns

00:11:38,430 --> 00:11:43,519
are still there it's just that they're

00:11:40,709 --> 00:11:47,759
not the primary concern of container

00:11:43,519 --> 00:11:49,740
identification in audit events so the

00:11:47,759 --> 00:11:52,620
conclusion from before was that there

00:11:49,740 --> 00:11:55,649
weren't any issues with four of the

00:11:52,620 --> 00:11:57,660
namespaces the net namespaces were okay

00:11:55,649 --> 00:11:59,610
for now we're going to need to do some

00:11:57,660 --> 00:12:01,170
more work on the name Network namespaces

00:11:59,610 --> 00:12:03,990
because of the need to have multiple

00:12:01,170 --> 00:12:07,079
audit Damons we were talking last time

00:12:03,990 --> 00:12:11,480
about having the audit Damons tied with

00:12:07,079 --> 00:12:15,329
a user name space so that we could have

00:12:11,480 --> 00:12:19,589
basically one audit daemon per container

00:12:15,329 --> 00:12:22,440
and that after some discussion and more

00:12:19,589 --> 00:12:24,360
more wrangling on mailing lists it was

00:12:22,440 --> 00:12:27,540
determined that that really is not going

00:12:24,360 --> 00:12:31,230
to be particularly practical bid

00:12:27,540 --> 00:12:33,569
namespaces were also okay we'll need to

00:12:31,230 --> 00:12:35,399
do proper translation but that is I

00:12:33,569 --> 00:12:38,250
think we understand that problem

00:12:35,399 --> 00:12:41,279
reasonably well

00:12:38,250 --> 00:12:42,959
so yeah namespace vs. container ID I

00:12:41,279 --> 00:12:45,779
think over the last couple of years

00:12:42,959 --> 00:12:48,920
we've we've come to our conclusion that

00:12:45,779 --> 00:12:52,050
we have to abandon the previous approach

00:12:48,920 --> 00:12:54,149
the other obvious thing that has

00:12:52,050 --> 00:12:58,110
remained constant is that at an upper

00:12:54,149 --> 00:13:01,470
layer beyond the host itself will need

00:12:58,110 --> 00:13:03,509
multiple orchestrators sorry I guess the

00:13:01,470 --> 00:13:06,509
the higher-level orchestrated that's

00:13:03,509 --> 00:13:10,079
managing multiple hosts to be able to

00:13:06,509 --> 00:13:13,259
coordinate and amalgamate those logs and

00:13:10,079 --> 00:13:17,880
be able to to match up aggregate them

00:13:13,259 --> 00:13:21,170
and deal with all of that so the changes

00:13:17,880 --> 00:13:23,040
since the previous proposal

00:13:21,170 --> 00:13:26,190
containers can't be universally

00:13:23,040 --> 00:13:29,250
identified by the namespace subset and

00:13:26,190 --> 00:13:30,630
so we have to move on from there the

00:13:29,250 --> 00:13:34,080
audit daemon won't be tied to any

00:13:30,630 --> 00:13:35,910
namespace because there isn't any subset

00:13:34,080 --> 00:13:39,060
that can be reliably nailed down as

00:13:35,910 --> 00:13:41,520
being this as a container the network

00:13:39,060 --> 00:13:44,730
namespace needs a list of possible

00:13:41,520 --> 00:13:48,390
container IDs responsible for network

00:13:44,730 --> 00:13:50,520
events so the problem here is that

00:13:48,390 --> 00:13:52,890
you've got some events that can come in

00:13:50,520 --> 00:13:55,800
from a network and it may not be

00:13:52,890 --> 00:13:58,490
associated with a task yet and so it's

00:13:55,800 --> 00:14:01,140
kind of floating there without a

00:13:58,490 --> 00:14:04,110
responsible parent sort of saying and

00:14:01,140 --> 00:14:06,330
without a chaperone and so we basically

00:14:04,110 --> 00:14:08,550
need to say okay well this is the list

00:14:06,330 --> 00:14:11,190
of possible containers that are all

00:14:08,550 --> 00:14:12,420
sharing this names Network namespace so

00:14:11,190 --> 00:14:15,990
it could be one of these who's

00:14:12,420 --> 00:14:20,060
responsible for this Network event we

00:14:15,990 --> 00:14:22,170
looked at other namespaces and it looks

00:14:20,060 --> 00:14:23,910
unlikely that we're gonna need to do

00:14:22,170 --> 00:14:25,860
this for any others but the code is

00:14:23,910 --> 00:14:28,020
generalized enough that if there are

00:14:25,860 --> 00:14:30,360
some other events that come up that

00:14:28,020 --> 00:14:32,370
don't have any tasks associated with it

00:14:30,360 --> 00:14:34,500
we should be able to adapt the code to

00:14:32,370 --> 00:14:38,820
be able to add that functionality into

00:14:34,500 --> 00:14:40,560
it relatively easily so yeah then the

00:14:38,820 --> 00:14:42,540
namespace identifiers are still

00:14:40,560 --> 00:14:44,670
potentially useful for other audit

00:14:42,540 --> 00:14:46,350
logging but they're not pivotal at this

00:14:44,670 --> 00:14:50,970
point and they're not reliable for what

00:14:46,350 --> 00:14:54,210
we're trying to do one other minor thing

00:14:50,970 --> 00:14:55,350
that's come up is looking at the the

00:14:54,210 --> 00:14:58,260
task struct

00:14:55,350 --> 00:15:01,430
there are now three audit parameters

00:14:58,260 --> 00:15:05,040
which are in the task structs itself and

00:15:01,430 --> 00:15:07,200
it became evident that it made sense to

00:15:05,040 --> 00:15:09,420
group them all together into one pointer

00:15:07,200 --> 00:15:13,370
so that we could abstract it away and

00:15:09,420 --> 00:15:15,930
this can solve some KBI issues for

00:15:13,370 --> 00:15:19,800
distributions so that they're not gonna

00:15:15,930 --> 00:15:23,940
have to worry about how that task struct

00:15:19,800 --> 00:15:26,070
changes and abstract away the audit

00:15:23,940 --> 00:15:28,440
stuff entirely in within the audit

00:15:26,070 --> 00:15:29,730
subsystem itself and so there are being

00:15:28,440 --> 00:15:32,200
some extra functions that have been

00:15:29,730 --> 00:15:34,330
added to be able to

00:15:32,200 --> 00:15:37,660
get the audit information as is

00:15:34,330 --> 00:15:39,430
necessary for other subsystems so

00:15:37,660 --> 00:15:42,160
there's been three review revisions of

00:15:39,430 --> 00:15:44,230
the design for the container audit

00:15:42,160 --> 00:15:46,480
container identifier and four revisions

00:15:44,230 --> 00:15:48,990
of code there's a fourth one the fifth

00:15:46,480 --> 00:15:52,060
one that I'm eager to pull the trigger

00:15:48,990 --> 00:15:57,670
but Paul needs to find some CPU cycles

00:15:52,060 --> 00:16:03,430
to be able to review patch set four so

00:15:57,670 --> 00:16:05,140
in terms of access controls we don't

00:16:03,430 --> 00:16:09,310
want to be able to unset the container

00:16:05,140 --> 00:16:11,770
ID so that's once it's set basically

00:16:09,310 --> 00:16:15,190
it's it's stuck there and can't be

00:16:11,770 --> 00:16:19,720
changed we started off with only having

00:16:15,190 --> 00:16:23,800
write access mitigate or limited by

00:16:19,720 --> 00:16:25,840
kappahd ik control and there's been a

00:16:23,800 --> 00:16:31,770
concern about abusing this particular

00:16:25,840 --> 00:16:36,370
identifier for other subsystems and so

00:16:31,770 --> 00:16:38,500
we're not trying to be terribly creative

00:16:36,370 --> 00:16:40,570
about how those could be abused by other

00:16:38,500 --> 00:16:43,830
systems but we want to be very careful

00:16:40,570 --> 00:16:50,350
about it and so we've added read access

00:16:43,830 --> 00:16:54,900
control as well yeah it's basic at this

00:16:50,350 --> 00:17:00,060
point it say in the proc file system

00:16:54,900 --> 00:17:03,790
under each process ID there'll be a new

00:17:00,060 --> 00:17:06,820
a new filesystem entry which is called

00:17:03,790 --> 00:17:10,180
Kannada container ID and you would do a

00:17:06,820 --> 00:17:15,130
write into there to be able to set the

00:17:10,180 --> 00:17:19,390
containers audit container identifier

00:17:15,130 --> 00:17:21,040
and then you'd be used the same file to

00:17:19,390 --> 00:17:25,060
be able to read it back but only if

00:17:21,040 --> 00:17:29,290
you've got permission other limitations

00:17:25,060 --> 00:17:31,180
so we don't want to be able to have play

00:17:29,290 --> 00:17:33,730
games with having a child that's being

00:17:31,180 --> 00:17:36,250
set with a container ID go back and then

00:17:33,730 --> 00:17:39,460
turn around and have it set the parents

00:17:36,250 --> 00:17:42,580
container ID so at this point it looks

00:17:39,460 --> 00:17:45,310
like a sufficient access control for

00:17:42,580 --> 00:17:45,940
that would be to prevent it being set if

00:17:45,310 --> 00:17:49,000
that

00:17:45,940 --> 00:17:54,670
has already spawned a thread or spawned

00:17:49,000 --> 00:17:56,140
a child at this point well I don't think

00:17:54,670 --> 00:17:58,120
there's gonna be any argument with this

00:17:56,140 --> 00:18:00,280
down the road is the child itself is

00:17:58,120 --> 00:18:03,730
going to inherit its parents audit

00:18:00,280 --> 00:18:09,210
container identifier and so once it's

00:18:03,730 --> 00:18:09,210
set initially we were talking about

00:18:09,630 --> 00:18:14,590
restricting it so that if it's already

00:18:12,160 --> 00:18:16,960
been set once it can't be set a second

00:18:14,590 --> 00:18:19,630
time if it's inherited from the parent

00:18:16,960 --> 00:18:21,580
there was a mechanism to be able to

00:18:19,630 --> 00:18:23,980
still allow it to be set once and

00:18:21,580 --> 00:18:26,590
initially that was by comparing the

00:18:23,980 --> 00:18:28,390
parents container identifier with the

00:18:26,590 --> 00:18:30,610
child's container identifier and if they

00:18:28,390 --> 00:18:33,400
were identical allow it to be set again

00:18:30,610 --> 00:18:37,590
that was changed around to actually look

00:18:33,400 --> 00:18:42,730
at an inheritance flag and that's being

00:18:37,590 --> 00:18:44,380
since removed because some of the

00:18:42,730 --> 00:18:47,490
concerns about setting the container

00:18:44,380 --> 00:18:53,530
identifier a second time have been

00:18:47,490 --> 00:18:55,680
questioned there's another angle to it

00:18:53,530 --> 00:18:59,920
which is to possibly restrict the

00:18:55,680 --> 00:19:02,740
setting of the container audit container

00:18:59,920 --> 00:19:07,030
identifier by one of the or sorry one of

00:19:02,740 --> 00:19:09,250
the sorry to one of the children of the

00:19:07,030 --> 00:19:11,140
orchestrator itself so that the

00:19:09,250 --> 00:19:12,580
orchestrator can't just go outside of

00:19:11,140 --> 00:19:14,320
its own tree and start setting other

00:19:12,580 --> 00:19:16,690
children because you might actually have

00:19:14,320 --> 00:19:19,660
more than one Orchestrator running on a

00:19:16,690 --> 00:19:23,350
system seems unlikely but that's the

00:19:19,660 --> 00:19:26,670
kind of thing that we we've considered

00:19:23,350 --> 00:19:30,090
we haven't made that decision yet

00:19:26,670 --> 00:19:34,780
so the last point is about disabling

00:19:30,090 --> 00:19:40,030
setting the container identifier twice

00:19:34,780 --> 00:19:41,650
and that's being removed so at this

00:19:40,030 --> 00:19:49,000
point it looks like we will be able to

00:19:41,650 --> 00:19:52,990
set it a second time so in terms of what

00:19:49,000 --> 00:19:55,090
the identifier would be we started off I

00:19:52,990 --> 00:19:59,170
don't remember exactly how I started off

00:19:55,090 --> 00:19:59,890
some of the discussions I think I might

00:19:59,170 --> 00:20:03,280
have actually started

00:19:59,890 --> 00:20:05,800
you 64 but then it went back and forth

00:20:03,280 --> 00:20:09,670
the number of times you 128 seemed to

00:20:05,800 --> 00:20:12,300
make most sense because a UUID is 128

00:20:09,670 --> 00:20:16,420
which is what a lot of container

00:20:12,300 --> 00:20:19,810
orchestrators are using that gives us

00:20:16,420 --> 00:20:21,760
enough overhead that we we were a bit

00:20:19,810 --> 00:20:24,340
concerned about it Paul really would

00:20:21,760 --> 00:20:26,980
like to see au 32 but has conceded

00:20:24,340 --> 00:20:30,760
conceded au 64 should be enough to be

00:20:26,980 --> 00:20:34,690
able to give us enough bits to play with

00:20:30,760 --> 00:20:37,290
so that collisions are unlikely the at

00:20:34,690 --> 00:20:42,610
the other upper end of things

00:20:37,290 --> 00:20:44,680
36 char string was also considered but

00:20:42,610 --> 00:20:47,970
that looks to be far too large and if

00:20:44,680 --> 00:20:51,490
we're doing logging and we've got a

00:20:47,970 --> 00:20:53,800
record an audit record for every event

00:20:51,490 --> 00:20:56,320
then that's going to chew up a fair

00:20:53,800 --> 00:20:59,350
amount of bandwidth and we wanted to

00:20:56,320 --> 00:21:02,940
reduce it to as much as was sufficient

00:20:59,350 --> 00:21:05,830
to be able to avoid collisions but not

00:21:02,940 --> 00:21:08,230
not big enough to do too much bandwidth

00:21:05,830 --> 00:21:10,030
so the part of the argument here is that

00:21:08,230 --> 00:21:13,480
we should be able to enlarge it to a Wii

00:21:10,030 --> 00:21:15,880
U 128 in the future if it really is

00:21:13,480 --> 00:21:19,960
deemed necessary and it shouldn't break

00:21:15,880 --> 00:21:22,180
stuff at this point in terms of records

00:21:19,960 --> 00:21:25,420
there are two new records that are being

00:21:22,180 --> 00:21:29,110
proposed one is the initial record when

00:21:25,420 --> 00:21:31,570
a audit container identifier is first

00:21:29,110 --> 00:21:33,850
set and that would give some of the

00:21:31,570 --> 00:21:35,310
background like who's the parent who's

00:21:33,850 --> 00:21:38,140
the the parent the container

00:21:35,310 --> 00:21:40,960
Orchestrator who's setting this what's

00:21:38,140 --> 00:21:44,290
the target pit and some other

00:21:40,960 --> 00:21:46,720
information about the circumstances to

00:21:44,290 --> 00:21:50,500
be able to nail it down and identify who

00:21:46,720 --> 00:21:52,930
the players are the other record would

00:21:50,500 --> 00:22:00,190
be an audit container auxilary record to

00:21:52,930 --> 00:22:02,860
syslog events Cisco events sorry if only

00:22:00,190 --> 00:22:04,330
if the container identifier is set so if

00:22:02,860 --> 00:22:08,860
it's not set the record simply doesn't

00:22:04,330 --> 00:22:11,280
show up there's a new field that's been

00:22:08,860 --> 00:22:16,350
added for kernel

00:22:11,280 --> 00:22:19,170
user space communication it's a-you 64

00:22:16,350 --> 00:22:21,060
and I guess this is dives into some of

00:22:19,170 --> 00:22:23,190
the implementation details but we've

00:22:21,060 --> 00:22:26,340
only got you 32 s available and so I

00:22:23,190 --> 00:22:32,010
sort of welded two of them together to

00:22:26,340 --> 00:22:33,770
be able to make it work it I'm fairly

00:22:32,010 --> 00:22:35,940
confident that there won't be a problem

00:22:33,770 --> 00:22:37,650
otherwise I would have had to change the

00:22:35,940 --> 00:22:42,510
interface and pass it in as a string

00:22:37,650 --> 00:22:46,350
which just seemed far more messy and of

00:22:42,510 --> 00:22:49,680
course need to add and delete container

00:22:46,350 --> 00:22:54,210
identifiers from Network namespaces so

00:22:49,680 --> 00:22:57,000
when a task gets a container identifier

00:22:54,210 --> 00:22:59,280
we look at its network namespace and we

00:22:57,000 --> 00:23:02,250
add the container identifier to that

00:22:59,280 --> 00:23:04,890
network namespace so that if there's an

00:23:02,250 --> 00:23:06,720
event that happens it's able to list all

00:23:04,890 --> 00:23:09,270
of the potential containers who are

00:23:06,720 --> 00:23:11,040
involved if there's a second process

00:23:09,270 --> 00:23:14,160
that's in the same network namespace

00:23:11,040 --> 00:23:16,590
then it will add it to a list and then

00:23:14,160 --> 00:23:18,660
if an event happens then it will go

00:23:16,590 --> 00:23:20,880
through and itemized each one of the

00:23:18,660 --> 00:23:25,100
potential container identifiers x' that

00:23:20,880 --> 00:23:25,100
are involved in in that particular event

00:23:27,620 --> 00:23:34,170
what remains to be addressed is how we

00:23:31,950 --> 00:23:37,530
are gonna allow multiple audit Damons to

00:23:34,170 --> 00:23:40,470
be able to run on one machine so at this

00:23:37,530 --> 00:23:46,800
point we would have to solve some of the

00:23:40,470 --> 00:23:49,380
network namespace issues they don't seem

00:23:46,800 --> 00:23:52,220
too daunting at this point but there are

00:23:49,380 --> 00:23:56,640
some concerns that we'll have to take

00:23:52,220 --> 00:24:01,260
care of each one would have its own rule

00:23:56,640 --> 00:24:03,210
set and its own queue so if you've got a

00:24:01,260 --> 00:24:05,910
separate audit daemon running it's gonna

00:24:03,210 --> 00:24:07,830
monitor a set of things and it could

00:24:05,910 --> 00:24:11,130
overlap with other audit Damons that's

00:24:07,830 --> 00:24:15,810
fine each one is going to receive those

00:24:11,130 --> 00:24:18,990
messages as is required the other big

00:24:15,810 --> 00:24:22,010
one is that auxilary audit Damons

00:24:18,990 --> 00:24:25,470
not be able to affect the the the host

00:24:22,010 --> 00:24:30,299
configuration or the host audit

00:24:25,470 --> 00:24:32,639
so right now audit when it starts up

00:24:30,299 --> 00:24:37,230
there are a number of parameters that

00:24:32,639 --> 00:24:40,049
are set and they influence the host

00:24:37,230 --> 00:24:43,830
itself those have to be disabled in the

00:24:40,049 --> 00:24:48,779
auxilary Damons this isn't a significant

00:24:43,830 --> 00:24:50,970
challenge so the next one is how to

00:24:48,779 --> 00:24:54,239
assign and root audit messages by

00:24:50,970 --> 00:24:56,340
container identifier and this requires

00:24:54,239 --> 00:24:59,149
some architecture work that we haven't

00:24:56,340 --> 00:25:01,109
looked at particularly seriously yet

00:24:59,149 --> 00:25:03,409
it's a matter of setting up a

00:25:01,109 --> 00:25:06,960
configuration file for each audit daemon

00:25:03,409 --> 00:25:10,440
that is not going to interfere with or

00:25:06,960 --> 00:25:12,929
tamper with the host itself something

00:25:10,440 --> 00:25:15,749
the pols mentioned recently is the need

00:25:12,929 --> 00:25:18,029
for LSM hooks to be able to set the

00:25:15,749 --> 00:25:25,080
container identifier itself on various

00:25:18,029 --> 00:25:30,659
tasks that's most of the concerns at

00:25:25,080 --> 00:25:32,820
this point so conclusion the namespace

00:25:30,659 --> 00:25:35,789
identifier was infeasible to track

00:25:32,820 --> 00:25:37,830
containers itself and had to move on

00:25:35,789 --> 00:25:41,009
beyond that to try and find something

00:25:37,830 --> 00:25:45,440
that was easier to implement and a lot

00:25:41,009 --> 00:25:48,840
easier to be able to track the 64 bit

00:25:45,440 --> 00:25:52,970
unsigned balances kernel efficiency with

00:25:48,840 --> 00:25:56,609
uniqueness coming back to that a you 64

00:25:52,970 --> 00:25:59,399
is a single operation to do a compare in

00:25:56,609 --> 00:26:03,809
the kernel whereas if a you 128 would

00:25:59,399 --> 00:26:06,749
have been multiple compares so if we're

00:26:03,809 --> 00:26:08,429
if we're trying to manage lists of audit

00:26:06,749 --> 00:26:10,619
Damons and routing and that kind of

00:26:08,429 --> 00:26:15,059
thing then those compares could have

00:26:10,619 --> 00:26:18,619
added up so we've got a record and a new

00:26:15,059 --> 00:26:22,619
record now for each of creation and

00:26:18,619 --> 00:26:25,070
routine events that happen and there's

00:26:22,619 --> 00:26:30,359
now a filter in place to be able to

00:26:25,070 --> 00:26:32,730
filter on that container identifier the

00:26:30,359 --> 00:26:34,499
net namespace isolated events get

00:26:32,730 --> 00:26:36,490
special treatment if we have other

00:26:34,499 --> 00:26:39,309
things that come along then

00:26:36,490 --> 00:26:40,750
could also I'm the only other thing I'm

00:26:39,309 --> 00:26:42,670
thinking of that could be in that sort

00:26:40,750 --> 00:26:45,190
of class is some sort of hardware

00:26:42,670 --> 00:26:47,710
failure where maybe you've got a disk

00:26:45,190 --> 00:26:50,559
that gets a bad sector or something like

00:26:47,710 --> 00:26:53,110
that and it's gonna throw some thing

00:26:50,559 --> 00:26:54,940
that is monitored by audit and it

00:26:53,110 --> 00:26:58,690
doesn't belong to any particular task

00:26:54,940 --> 00:27:05,860
and it might say ok I need to report

00:26:58,690 --> 00:27:07,920
this event and again these audit logs at

00:27:05,860 --> 00:27:11,170
a higher level would need to be

00:27:07,920 --> 00:27:13,150
aggregated by an or an Orchestrator

00:27:11,170 --> 00:27:16,929
that's at a higher level than the host

00:27:13,150 --> 00:27:18,460
itself and the orchestrator would keep

00:27:16,929 --> 00:27:21,990
track of all of these different IDs

00:27:18,460 --> 00:27:21,990
across the various different hosts

00:27:23,820 --> 00:27:28,360
that's it

00:27:25,720 --> 00:27:31,570
contact information can reach me at Red

00:27:28,360 --> 00:27:36,340
Hat RGB at Red Hat or at home

00:27:31,570 --> 00:27:38,230
RGB at tricolor the Linux audit mailing

00:27:36,340 --> 00:27:40,080
list would be the canonical place to be

00:27:38,230 --> 00:27:43,630
able to raise questions about this and

00:27:40,080 --> 00:27:47,440
get involved in development there's also

00:27:43,630 --> 00:27:50,350
a free node audit channel if you've got

00:27:47,440 --> 00:27:53,980
questions but I'm the only one from Red

00:27:50,350 --> 00:27:57,010
Hat that's in there so I'll probably

00:27:53,980 --> 00:28:07,720
direct you to the mailing list anyway

00:27:57,010 --> 00:28:09,570
there it is questions Casey yeah I know

00:28:07,720 --> 00:28:12,630
anybody else

00:28:09,570 --> 00:28:17,170
what about nested containers

00:28:12,630 --> 00:28:18,580
what about nested containers ok that

00:28:17,170 --> 00:28:21,130
throws off a container that throws off a

00:28:18,580 --> 00:28:24,790
container because people do weird things

00:28:21,130 --> 00:28:29,950
like that yeah we're expecting that and

00:28:24,790 --> 00:28:35,080
the logs should be able to elucidate

00:28:29,950 --> 00:28:38,730
that story and that's a tracking problem

00:28:35,080 --> 00:28:41,170
that will punt to user space and

00:28:38,730 --> 00:28:43,990
basically the the informations there

00:28:41,170 --> 00:28:47,380
about this particular Orchestrator

00:28:43,990 --> 00:28:49,960
spawned a process which was another

00:28:47,380 --> 00:28:53,320
Orchestrator and

00:28:49,960 --> 00:28:55,690
it will have the the information for the

00:28:53,320 --> 00:28:57,909
container IDs of both the parent and the

00:28:55,690 --> 00:28:58,570
child and then when it goes to spawn a

00:28:57,909 --> 00:29:01,919
new one

00:28:58,570 --> 00:29:07,740
then that information will be in there

00:29:01,919 --> 00:29:10,360
is that sufficiently answer you're good

00:29:07,740 --> 00:29:12,549
this this is actually a bit of a

00:29:10,360 --> 00:29:15,000
contentious question because it had come

00:29:12,549 --> 00:29:17,919
up before and it was the subject of a

00:29:15,000 --> 00:29:20,350
lot of discussion back and forth and and

00:29:17,919 --> 00:29:23,500
influenced some of the design decisions

00:29:20,350 --> 00:29:25,600
yep so what kind of overhead does AA

00:29:23,500 --> 00:29:33,789
daddy and its associated management

00:29:25,600 --> 00:29:35,950
introduce you know I don't have those

00:29:33,789 --> 00:29:38,399
numbers but they've been around for more

00:29:35,950 --> 00:29:38,399
than a decade

00:29:52,010 --> 00:29:58,350
there have been improvements over time

00:29:54,770 --> 00:30:00,090
so like everything right there's no good

00:29:58,350 --> 00:30:03,930
easy answer for that like I can't just

00:30:00,090 --> 00:30:05,430
say oh four percent so one of the things

00:30:03,930 --> 00:30:07,980
we were just talking about is over the

00:30:05,430 --> 00:30:10,920
past couple years the queuing mechanism

00:30:07,980 --> 00:30:13,170
inside the kernel for the audit event

00:30:10,920 --> 00:30:15,690
generation has gotten much better it

00:30:13,170 --> 00:30:18,060
used to be we were doing a lot of awful

00:30:15,690 --> 00:30:20,550
things sending net link messages up on

00:30:18,060 --> 00:30:22,460
sis call exit we've now moved that off

00:30:20,550 --> 00:30:26,550
to a separate threat inside the kernel

00:30:22,460 --> 00:30:28,290
so that that should improve things quite

00:30:26,550 --> 00:30:31,080
a bit so you guys separate doing all of

00:30:28,290 --> 00:30:32,670
your nat link messages up to the audit

00:30:31,080 --> 00:30:36,240
daemon so they can be collected and

00:30:32,670 --> 00:30:40,800
written out to a disk but in general

00:30:36,240 --> 00:30:41,970
audit D is really just a collector you

00:30:40,800 --> 00:30:43,290
know I mean we don't want to write to

00:30:41,970 --> 00:30:44,750
disk directly from the kernel right

00:30:43,290 --> 00:30:47,640
that's bad

00:30:44,750 --> 00:30:50,670
so the oddity itself doesn't really

00:30:47,640 --> 00:30:52,770
provide any sort of overhead it's all

00:30:50,670 --> 00:30:55,560
going to be the audit processing inside

00:30:52,770 --> 00:30:56,850
the kernel as far as what that overhead

00:30:55,560 --> 00:30:58,380
is going to be for any individual

00:30:56,850 --> 00:31:01,140
operation it depends entirely on what

00:30:58,380 --> 00:31:03,540
your audit configuration is you know if

00:31:01,140 --> 00:31:05,490
you're if you're generating audit

00:31:03,540 --> 00:31:07,560
records for every sis call on the system

00:31:05,490 --> 00:31:09,990
guess what the overheads going to be

00:31:07,560 --> 00:31:12,360
pretty bad the good news is we will

00:31:09,990 --> 00:31:14,040
actually that's fine you can actually

00:31:12,360 --> 00:31:16,950
start up system and they'll operate

00:31:14,040 --> 00:31:18,660
elaborate very slowly but it will

00:31:16,950 --> 00:31:22,020
operate you can then shut it down it

00:31:18,660 --> 00:31:23,610
used to be that wasn't the case but

00:31:22,020 --> 00:31:26,400
anyway there are filters that you can

00:31:23,610 --> 00:31:30,300
put into the kernel that happen at event

00:31:26,400 --> 00:31:32,730
generation time so you can mitigate that

00:31:30,300 --> 00:31:34,710
overhead to whatever you want it to be

00:31:32,730 --> 00:31:36,510
you know like everything at security

00:31:34,710 --> 00:31:38,220
there's a big knob right how much

00:31:36,510 --> 00:31:39,150
information do you want and what are you

00:31:38,220 --> 00:31:42,180
willing to pay for it

00:31:39,150 --> 00:31:44,790
you can filter out individual events or

00:31:42,180 --> 00:31:47,340
classes of events you can also filter

00:31:44,790 --> 00:31:48,930
out records so if there's certain

00:31:47,340 --> 00:31:51,270
records you don't want to see then the

00:31:48,930 --> 00:31:55,760
record itself won't be generated whereas

00:31:51,270 --> 00:31:59,370
the rest of the event will still show up

00:31:55,760 --> 00:32:02,970
currently there's a pretty heavy use of

00:31:59,370 --> 00:32:05,460
printf in those messages and there's a

00:32:02,970 --> 00:32:07,650
lot of overhead associated with that so

00:32:05,460 --> 00:32:11,340
down the road we're looking at changing

00:32:07,650 --> 00:32:14,700
the API for audit to basically give

00:32:11,340 --> 00:32:17,670
binary information in a more organized

00:32:14,700 --> 00:32:20,930
way so that it causes fewer problems for

00:32:17,670 --> 00:32:25,410
the user space parsers to be able to

00:32:20,930 --> 00:32:41,400
look for patterns in the logs that's

00:32:25,410 --> 00:32:43,770
ongoing work somebody at the back so do

00:32:41,400 --> 00:32:48,600
you have buy-in from the other kernel

00:32:43,770 --> 00:32:51,179
developers for this container ID and the

00:32:48,600 --> 00:32:53,309
primary one that I was concerned with is

00:32:51,179 --> 00:32:55,500
Erik Biederman who's the name space guy

00:32:53,309 --> 00:33:02,610
he had some pretty strong opinions about

00:32:55,500 --> 00:33:05,010
this stuff trying to think who else was

00:33:02,610 --> 00:33:07,650
pretty vocal about it most of the rest

00:33:05,010 --> 00:33:10,800
of it were user space and Orchestrator

00:33:07,650 --> 00:33:12,840
and library folks who had mostly

00:33:10,800 --> 00:33:15,090
opinions about the user that about the

00:33:12,840 --> 00:33:21,570
identifier itself about the size of the

00:33:15,090 --> 00:33:24,860
identifiers there like I said it's being

00:33:21,570 --> 00:33:27,360
it's gone through seven revisions of

00:33:24,860 --> 00:33:29,130
namespace identifier x' and now for

00:33:27,360 --> 00:33:31,800
revisions of the container identifier x'

00:33:29,130 --> 00:33:33,540
and we've addressed pretty much all of

00:33:31,800 --> 00:33:39,120
the concerns that any of the concern of

00:33:33,540 --> 00:33:41,490
the kernel developers of god I guess it

00:33:39,120 --> 00:33:44,490
I would like to get more involvement

00:33:41,490 --> 00:33:45,660
from the container Orchestrator folks

00:33:44,490 --> 00:33:47,670
because they're the ones ultimately

00:33:45,660 --> 00:33:49,880
hurry and have to deal with this and use

00:33:47,670 --> 00:33:49,880
it

00:34:44,190 --> 00:34:50,589
yeah because we're narrowing the scope

00:34:47,159 --> 00:34:53,950
sufficiently that other people are less

00:34:50,589 --> 00:35:00,190
concerned about how they're gonna be

00:34:53,950 --> 00:35:03,280
able to abuse it so I hate to rehash on

00:35:00,190 --> 00:35:05,589
a one of the flames we had during that

00:35:03,280 --> 00:35:08,170
endless thread one of the ideas proposed

00:35:05,589 --> 00:35:09,910
was to introduce P tags finally so that

00:35:08,170 --> 00:35:12,640
you could then instead of having a

00:35:09,910 --> 00:35:13,869
specific feature for tagging for

00:35:12,640 --> 00:35:15,490
containers for order to you would be

00:35:13,869 --> 00:35:17,260
able to have like a like Auto will be

00:35:15,490 --> 00:35:18,880
able to piggyback on top of P tags so

00:35:17,260 --> 00:35:20,320
that it wouldn't be all the special

00:35:18,880 --> 00:35:21,700
casing where we have to worry about is

00:35:20,320 --> 00:35:23,260
this really what the count as a

00:35:21,700 --> 00:35:25,810
container is has that been looked at

00:35:23,260 --> 00:35:28,420
since then or is it it was pretty much

00:35:25,810 --> 00:35:31,630
discarded because P tags isn't in the

00:35:28,420 --> 00:35:34,180
mainline kernel and P tags is an LS m

00:35:31,630 --> 00:35:35,859
and on both counts because there's a

00:35:34,180 --> 00:35:38,320
dependence there that it's not part of

00:35:35,859 --> 00:35:40,270
current core kernel functionality it's

00:35:38,320 --> 00:35:45,750
not going to be very useful to us or

00:35:40,270 --> 00:35:45,750
reliable does that answer the question

00:35:52,300 --> 00:35:59,130
any more questions over here again

00:36:09,119 --> 00:36:15,269
thank you so with regards to the log

00:36:12,839 --> 00:36:17,490
aggregation at the orchestrator level

00:36:15,269 --> 00:36:20,940
well that data be normalized so that it

00:36:17,490 --> 00:36:24,259
can be ingested by other systems there's

00:36:20,940 --> 00:36:27,539
already been work done to normalize

00:36:24,259 --> 00:36:29,430
audit logs anyway and that's been a lot

00:36:27,539 --> 00:36:32,400
of the preparatory work that's gone I

00:36:29,430 --> 00:36:34,230
guess I don't want to dismiss it as

00:36:32,400 --> 00:36:35,880
being a distraction but that's been a

00:36:34,230 --> 00:36:38,519
lot of the distraction that's led up to

00:36:35,880 --> 00:36:40,200
this point as we've got a lot of work to

00:36:38,519 --> 00:36:44,940
do there simply to make all of the

00:36:40,200 --> 00:36:47,640
events possible and so that's been an

00:36:44,940 --> 00:36:51,089
interest of the audit userspace

00:36:47,640 --> 00:36:52,799
tool maintainer anyway is to make sure

00:36:51,089 --> 00:36:54,180
that we're able to parse all of these

00:36:52,799 --> 00:36:55,619
events because those events are

00:36:54,180 --> 00:36:58,019
eventually going to be parsed by other

00:36:55,619 --> 00:36:58,559
tools even further up and so cleaning up

00:36:58,019 --> 00:37:04,940
our act

00:36:58,559 --> 00:37:04,940
there has helped in other layers anyway

00:37:13,359 --> 00:37:18,200
I think that's it

00:37:16,760 --> 00:37:23,960
Thanks

00:37:18,200 --> 00:37:23,960

YouTube URL: https://www.youtube.com/watch?v=8P9U1Dy4kEE


