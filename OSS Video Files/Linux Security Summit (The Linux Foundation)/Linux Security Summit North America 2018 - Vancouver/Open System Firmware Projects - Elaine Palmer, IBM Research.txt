Title: Open System Firmware Projects - Elaine Palmer, IBM Research
Publication date: 2018-08-31
Playlist: Linux Security Summit North America 2018 - Vancouver
Description: 
	Open System Firmware Projects - Elaine Palmer, IBM Research

Three industry groups are pursuing the goal of creating open source system firmware. They seek to improve the openness, portability, security, and maintainability of boot firmware, device firmware, and system management firmware. A panel of passionate trailblazers will describe their efforts and the groups and organizations supporting them.

About Elaine Palmer
Elaine Palmer is a Senior Technical Staff Member at the Thomas J. Watson Research Center, and a member of the IBM Academy of Technology. Her research interests are in operating system and firmware security, and security evaluations of software. Her accomplishments include the world's first level 4 certificate under FIPS 140-1 for a tamper-responding secure coprocessor for servers, and the first smart card cryptographic library to be validated at EAL5+ under the Common Criteria. Mrs. Palmer has a BS in computer science from Louisiana State University and an MS in computer science from Pace University. She is a member of the IEEE and a Distinguished Engineer in the ACM, and holds fourteen patents.

About Bryan Kelly
Bryan Kelly is a Principle Firmware Engineering Manager for Microsoft’s Azure Cloud Server Infrastructure team. Bryan supports Microsoft’s cloud services by designing and developing firmware that enables hardware solutions in Microsoft’s next generation cloud platforms. During Bryan’s 12 year tenure at Microsoft his work has spanned data center design, data center control systems, UEFI, BMC, systems manageability, firmware architecture and security design.

About Nate Klein
Nate Klein is a hardware engineer on the Platforms Infrastructure team that designs and deploys all of the hardware that powers Google's internal and cloud services.  In 6 years at Google his work includes NIC drivers and firmware, server and PCIe card design, and hardware security (Titan).  Nate also enjoys SCUBA diving, table top games, and animals.

About Ron Minnich
Ron Minnich is the inventor of LinuxBIOS, now known as coreboot. He is a member of the Technical Steering Committee for LinuxBoot, as well as co-leader of the Open Systems Firmware project at the Open Compute Project. 

He has worked in firmware for 40 years and in the open source firmware area for 20. He started the LinuxBoot project in January 2017, and it became a Linux Foundation project in December 2017. LinuxBoot is now being deployed at many companies. Ron has contributed to many open source operating systems, including FreeBSD, Plan 9, and Linux.

His most recent talk for the Linux Foundation was "Replace your exploit-ridden firmware with a Linux kernel" at the ELC in 2017.
Captions: 
	00:00:00,000 --> 00:00:06,049
all right thank you for coming to hear

00:00:02,190 --> 00:00:08,809
our panel and open systems firmware

00:00:06,049 --> 00:00:12,809
we're not kidding that we are passionate

00:00:08,809 --> 00:00:15,420
trailblazers in this area our passion

00:00:12,809 --> 00:00:18,840
comes because we are all concerned about

00:00:15,420 --> 00:00:21,960
the security of systems all the way from

00:00:18,840 --> 00:00:25,680
the bottom level device the first time

00:00:21,960 --> 00:00:28,830
that the electrons hit a device in a

00:00:25,680 --> 00:00:32,340
system all the way up through the

00:00:28,830 --> 00:00:35,790
firmware the hypervisors the devices the

00:00:32,340 --> 00:00:38,520
operating system so in order to do that

00:00:35,790 --> 00:00:40,710
we are um we are here from we represent

00:00:38,520 --> 00:00:43,410
competitive companies who are working

00:00:40,710 --> 00:00:45,000
together and we realize that the

00:00:43,410 --> 00:00:47,640
security of the system is only as strong

00:00:45,000 --> 00:00:51,420
as its weakest link and there are no

00:00:47,640 --> 00:00:53,219
systems today none in which the

00:00:51,420 --> 00:00:56,039
components are all built and controlled

00:00:53,219 --> 00:00:59,520
by one company so for that reason we all

00:00:56,039 --> 00:01:03,570
work together and we are presenting

00:00:59,520 --> 00:01:06,479
today at three at least three different

00:01:03,570 --> 00:01:09,240
efforts that are trying to open up and

00:01:06,479 --> 00:01:13,140
make secure and more resilient the world

00:01:09,240 --> 00:01:16,049
of firmware our experience covers the

00:01:13,140 --> 00:01:18,210
whole stack collectively we've covered

00:01:16,049 --> 00:01:30,170
everything from smart cards to servers

00:01:18,210 --> 00:01:33,960
the whole the whole bit yep

00:01:30,170 --> 00:01:35,549
so um our full biographies are in the

00:01:33,960 --> 00:01:39,360
conference program if you want to learn

00:01:35,549 --> 00:01:42,240
more about us but this format of our

00:01:39,360 --> 00:01:45,810
session today is to will introduce the

00:01:42,240 --> 00:01:48,270
I'll introduce the panel members that

00:01:45,810 --> 00:01:53,390
elope then each speaker will describe

00:01:48,270 --> 00:01:56,430
briefly an effort that he's working in

00:01:53,390 --> 00:01:58,649
we'll have plenty of time I think for

00:01:56,430 --> 00:02:01,079
questions and discussion which is why we

00:01:58,649 --> 00:02:03,479
have this as a panel and if you all

00:02:01,079 --> 00:02:05,640
don't come up with questions I will and

00:02:03,479 --> 00:02:09,599
they are going to worry because some of

00:02:05,640 --> 00:02:12,540
those are pretty hard so I personally

00:02:09,599 --> 00:02:13,709
work at IBM's Thomas J Watson Research

00:02:12,540 --> 00:02:16,640
Center

00:02:13,709 --> 00:02:19,739
in the secure cloud and systems group

00:02:16,640 --> 00:02:23,099
most recently I worked on our power and

00:02:19,739 --> 00:02:26,400
systems II servers for a secure boot I

00:02:23,099 --> 00:02:28,379
the reason I organized this panel was

00:02:26,400 --> 00:02:31,079
that I'm hoping that out there in the

00:02:28,379 --> 00:02:34,739
audience or some of your friends and

00:02:31,079 --> 00:02:36,989
colleagues we might hit other passionate

00:02:34,739 --> 00:02:39,269
individuals who are also worried about

00:02:36,989 --> 00:02:43,829
these things and you might want to join

00:02:39,269 --> 00:02:45,420
in our activities so the speakers I

00:02:43,829 --> 00:02:47,220
guess you'll have to raise your hands

00:02:45,420 --> 00:02:49,500
the first speaker is going to be Ron

00:02:47,220 --> 00:02:53,129
Minich he's a software engineer from

00:02:49,500 --> 00:02:55,709
platform security and Google runs the

00:02:53,129 --> 00:02:58,409
inventor of Linux BIOS it's also known

00:02:55,709 --> 00:03:00,870
as coreboot he's a member of the

00:02:58,409 --> 00:03:03,689
technical steering committee for Linux

00:03:00,870 --> 00:03:06,180
boot as well as co-leader of the open

00:03:03,689 --> 00:03:10,409
systems firmware project at the Open

00:03:06,180 --> 00:03:11,780
Compute Project the next speaker will be

00:03:10,409 --> 00:03:15,030
Nate Klein

00:03:11,780 --> 00:03:17,970
he's from Google he's co-chair of the

00:03:15,030 --> 00:03:19,859
Open Compute Project security project

00:03:17,970 --> 00:03:21,780
he's a hardware engineer on the

00:03:19,859 --> 00:03:24,540
platforms infrastructure team that

00:03:21,780 --> 00:03:27,329
designs and deploys all of the hardware

00:03:24,540 --> 00:03:30,299
that powers Google's internal and cloud

00:03:27,329 --> 00:03:34,889
servers so Nate's going to tell us about

00:03:30,299 --> 00:03:41,489
OCP the security project and third is

00:03:34,889 --> 00:03:43,709
Brian Kelly from Microsoft he's also a

00:03:41,489 --> 00:03:44,430
co-chair of the Open Compute Project on

00:03:43,709 --> 00:03:46,889
security

00:03:44,430 --> 00:03:49,169
he is the principal firmware engineering

00:03:46,889 --> 00:03:52,319
manager from Microsoft's Azure cloud

00:03:49,169 --> 00:03:54,060
server infrastructure team his team

00:03:52,319 --> 00:03:56,209
designs and develops firmware that

00:03:54,060 --> 00:03:58,650
enables hardware solutions in

00:03:56,209 --> 00:04:01,169
Microsoft's next-generation cloud

00:03:58,650 --> 00:04:04,530
platforms and Brian will be talking

00:04:01,169 --> 00:04:06,930
about edk too so all three of these are

00:04:04,530 --> 00:04:10,849
open system firmware projects and will

00:04:06,930 --> 00:04:10,849
go on now to run

00:04:15,850 --> 00:04:20,190
oh you're right I don't need this mic

00:04:33,990 --> 00:04:40,900
I'm always a little shocked when we do

00:04:37,090 --> 00:04:42,820
something like this and it works so this

00:04:40,900 --> 00:04:44,260
is a project we started at Google in

00:04:42,820 --> 00:04:49,330
January 2017

00:04:44,260 --> 00:04:51,550
it's Linux boot Linux is firmware and we

00:04:49,330 --> 00:04:54,220
decided in March of 2017 that we really

00:04:51,550 --> 00:04:58,830
needed to open this up to more external

00:04:54,220 --> 00:05:01,030
participants in part to convince the

00:04:58,830 --> 00:05:02,650
chipset and board vendors that it wasn't

00:05:01,030 --> 00:05:04,240
just Google because the first thing you

00:05:02,650 --> 00:05:06,130
ever get from a lot of these companies

00:05:04,240 --> 00:05:08,380
when you come in with new firmware ideas

00:05:06,130 --> 00:05:11,680
your are the only people asking for this

00:05:08,380 --> 00:05:13,960
so by May we we brought in horizon

00:05:11,680 --> 00:05:16,330
computing with John reefer done they by

00:05:13,960 --> 00:05:20,290
today Facebook servers and resell them

00:05:16,330 --> 00:05:22,180
with Linux boot in them already then we

00:05:20,290 --> 00:05:24,640
have also gotten Trammell Hudson you may

00:05:22,180 --> 00:05:26,290
know him from Thunder strike he's doing

00:05:24,640 --> 00:05:30,840
some really awesome work in a system

00:05:26,290 --> 00:05:33,880
called heads let's see are you here Todd

00:05:30,840 --> 00:05:35,920
okay so go see Todd Weaver and see the

00:05:33,880 --> 00:05:38,650
neat stuff that he's doing with heads if

00:05:35,920 --> 00:05:40,600
you get a chance and then of course we

00:05:38,650 --> 00:05:44,560
have Facebook and nine elements and

00:05:40,600 --> 00:05:48,430
other people at Google and here in a

00:05:44,560 --> 00:05:50,140
nutshell is the problem I kind of been

00:05:48,430 --> 00:05:51,670
saying this for 20 years I'm surprised

00:05:50,140 --> 00:05:53,140
I'm still putting this slide up but

00:05:51,670 --> 00:05:55,000
basically if you don't own this firmware

00:05:53,140 --> 00:05:55,780
the firmware owns you that's just the

00:05:55,000 --> 00:05:58,840
way it works today

00:05:55,780 --> 00:06:00,400
now back in the day when I began this

00:05:58,840 --> 00:06:02,590
kind of thing we wanted to do in first

00:06:00,400 --> 00:06:05,410
instruction after power on reset we've

00:06:02,590 --> 00:06:07,750
kind of accepted that that's not going

00:06:05,410 --> 00:06:09,370
to happen in the x86 world ever again we

00:06:07,750 --> 00:06:11,770
used to do it we don't do it anymore

00:06:09,370 --> 00:06:13,540
actually accepting that accepting that

00:06:11,770 --> 00:06:14,980
the Foxton the lower left is gonna be

00:06:13,540 --> 00:06:17,470
kind of owned by vendors from here on

00:06:14,980 --> 00:06:19,180
out there's okay that's what turns on

00:06:17,470 --> 00:06:21,760
DRM they ask these things like that is

00:06:19,180 --> 00:06:23,290
10% of the image in firmware and what

00:06:21,760 --> 00:06:25,060
we're saying is well yeah but we went on

00:06:23,290 --> 00:06:26,680
that stuff off to the right and by the

00:06:25,060 --> 00:06:29,380
way this is my nice shirt with a nice

00:06:26,680 --> 00:06:30,090
BIOS hazard sticker if you see one of

00:06:29,380 --> 00:06:31,800
the

00:06:30,090 --> 00:06:32,940
Chris over there he can give you

00:06:31,800 --> 00:06:35,940
the stickers if you want to put on your

00:06:32,940 --> 00:06:38,940
laptop we all have it now but basically

00:06:35,940 --> 00:06:41,490
if you look at that set of drivers there

00:06:38,940 --> 00:06:44,070
there's several hundred drivers of

00:06:41,490 --> 00:06:46,470
various unknown origin in a typical

00:06:44,070 --> 00:06:48,540
server or in a typical laptop today and

00:06:46,470 --> 00:06:50,850
that number scented ridiculous to me

00:06:48,540 --> 00:06:52,740
until Trammell demonstrated it and what

00:06:50,850 --> 00:06:55,350
happens is you start to go into this

00:06:52,740 --> 00:06:56,850
intrinsic box which is just a quick call

00:06:55,350 --> 00:06:59,160
out to this thing called a dispatcher

00:06:56,850 --> 00:07:01,380
and the dispatcher runs units

00:06:59,160 --> 00:07:03,450
instruction function and every one of

00:07:01,380 --> 00:07:04,950
the drivers in there and then it'll

00:07:03,450 --> 00:07:07,170
often run the drivers more than once

00:07:04,950 --> 00:07:08,790
because if any one driver depends on

00:07:07,170 --> 00:07:10,800
some other driver it just runs the

00:07:08,790 --> 00:07:12,540
driver over and over again no matter how

00:07:10,800 --> 00:07:14,580
many times that drivers been run if some

00:07:12,540 --> 00:07:16,260
other thing is discovered that depends

00:07:14,580 --> 00:07:20,130
on the driver the drivers will get run

00:07:16,260 --> 00:07:21,720
again then we go into a thing called the

00:07:20,130 --> 00:07:24,120
boot manager which turns a bunch more

00:07:21,720 --> 00:07:25,800
stuff and eventually on a lot of your

00:07:24,120 --> 00:07:28,200
systems probably it's going to run krub

00:07:25,800 --> 00:07:29,670
but the boot manager role might also

00:07:28,200 --> 00:07:31,500
might do a fun little thing for you

00:07:29,670 --> 00:07:34,110
which is install a thing called the OS

00:07:31,500 --> 00:07:36,090
president app the OS president app is an

00:07:34,110 --> 00:07:37,980
app that runs along with your OS and

00:07:36,090 --> 00:07:40,320
shares the machine with you and a lot of

00:07:37,980 --> 00:07:42,030
people don't even know that so all the

00:07:40,320 --> 00:07:43,530
great work that's been done on Linux and

00:07:42,030 --> 00:07:44,730
ste Linux and all these things over the

00:07:43,530 --> 00:07:46,380
years doesn't actually really matter

00:07:44,730 --> 00:07:49,050
because there's this thing called the OS

00:07:46,380 --> 00:07:51,060
president app running so this is a

00:07:49,050 --> 00:07:52,410
slightly scary situation I used to give

00:07:51,060 --> 00:07:54,150
this talk to various people from

00:07:52,410 --> 00:07:56,400
department of homeland security and

00:07:54,150 --> 00:07:58,950
things like that and the first time I

00:07:56,400 --> 00:08:00,480
mentioned this in around 2000 the

00:07:58,950 --> 00:08:02,610
response was yeah but we're not going to

00:08:00,480 --> 00:08:05,100
talk about that anymore from the US

00:08:02,610 --> 00:08:06,780
government and then about 2007 I got to

00:08:05,100 --> 00:08:09,510
god that's depressing let's not talk

00:08:06,780 --> 00:08:10,890
about that but you know and nowadays I

00:08:09,510 --> 00:08:15,300
can kind of gonna say yeah but I can

00:08:10,890 --> 00:08:16,980
offer you a little bit of hope and a

00:08:15,300 --> 00:08:20,670
little bit of hope is this picture and

00:08:16,980 --> 00:08:22,290
this is what we are doing today and that

00:08:20,670 --> 00:08:24,090
includes all the participants I

00:08:22,290 --> 00:08:25,590
mentioned on platforms we can talk about

00:08:24,090 --> 00:08:27,900
in platforms we're not ready to talk

00:08:25,590 --> 00:08:29,730
about yet but the OS president app is

00:08:27,900 --> 00:08:31,410
gone many of the drivers were gone and

00:08:29,730 --> 00:08:34,260
trammel literally has reduced on one

00:08:31,410 --> 00:08:38,099
platform 400 drivers down to 8080 is

00:08:34,260 --> 00:08:40,440
eighty too many but it's a start and we

00:08:38,099 --> 00:08:43,320
put Linux in flash we we don't have grub

00:08:40,440 --> 00:08:45,510
anymore because Linux in flash runs

00:08:43,320 --> 00:08:47,100
and Linux in flashed us a keg sect for

00:08:45,510 --> 00:08:49,410
whatever thing we're loading now that

00:08:47,100 --> 00:08:51,240
Linux and flash includes in an it REM FS

00:08:49,410 --> 00:08:53,100
and I'll talk about that more in a

00:08:51,240 --> 00:08:54,990
second but look at all the stuff that's

00:08:53,100 --> 00:08:58,400
going you know it's not all the stuff we

00:08:54,990 --> 00:09:00,990
want gone this is what we really want

00:08:58,400 --> 00:09:02,850
there are some proprietary blob and I'll

00:09:00,990 --> 00:09:04,860
mention again you're not going to get

00:09:02,850 --> 00:09:06,570
anything but that one in x86 you're not

00:09:04,860 --> 00:09:07,860
gonna get that anything with that on an

00:09:06,570 --> 00:09:09,600
arm there's always going to be this

00:09:07,860 --> 00:09:11,970
thing that's native machine code that

00:09:09,600 --> 00:09:15,030
runs that you can't get rid of I you

00:09:11,970 --> 00:09:16,500
know I find that regrettable as actually

00:09:15,030 --> 00:09:18,390
someone who's been writing these BIOS

00:09:16,500 --> 00:09:20,910
things for forty years but that's just

00:09:18,390 --> 00:09:23,010
the way life is we will have Linux in

00:09:20,910 --> 00:09:25,530
flash and then the init Ram FS is a

00:09:23,010 --> 00:09:28,830
different project called you root and

00:09:25,530 --> 00:09:30,480
you root is everything written in go so

00:09:28,830 --> 00:09:32,400
if you think of just take to canoe bin

00:09:30,480 --> 00:09:34,200
and don't use the canoe bin but have a

00:09:32,400 --> 00:09:36,270
thing that is not equivalent and all the

00:09:34,200 --> 00:09:39,060
code is and go and our security people

00:09:36,270 --> 00:09:41,070
love that at Google you know if you give

00:09:39,060 --> 00:09:42,480
them go code they're willing to audit if

00:09:41,070 --> 00:09:42,870
you give them C code they generally or

00:09:42,480 --> 00:09:48,090
not

00:09:42,870 --> 00:09:52,220
so 90% of what's in flash is now Linux

00:09:48,090 --> 00:09:55,320
and in an every MF s and then we start a

00:09:52,220 --> 00:09:57,240
system we boot and there's nothing left

00:09:55,320 --> 00:09:59,010
there's no OS present app right

00:09:57,240 --> 00:10:01,530
everything is gone when you're running

00:09:59,010 --> 00:10:04,740
you own the platform and that's not the

00:10:01,530 --> 00:10:06,780
situation as it is today almost the

00:10:04,740 --> 00:10:09,210
system systems you run why do you need

00:10:06,780 --> 00:10:10,560
it we want control at the BIOS level we

00:10:09,210 --> 00:10:12,300
want things like security and

00:10:10,560 --> 00:10:13,980
performance and security and control and

00:10:12,300 --> 00:10:16,110
security and ease-of-use and security

00:10:13,980 --> 00:10:18,240
and security and security right I start

00:10:16,110 --> 00:10:20,040
to sound like the spam script from Monty

00:10:18,240 --> 00:10:22,440
Python but you know we're trying to get

00:10:20,040 --> 00:10:24,930
security and if you really just start

00:10:22,440 --> 00:10:27,960
googling UEFI security issues and CVS

00:10:24,930 --> 00:10:30,390
it's a never-ending list I've learned

00:10:27,960 --> 00:10:31,860
because the Trammell Hudson again about

00:10:30,390 --> 00:10:33,420
some really terrific ones that are gonna

00:10:31,860 --> 00:10:35,730
come out this fall that'll kind of make

00:10:33,420 --> 00:10:38,910
your teeth hurt once you read them and

00:10:35,730 --> 00:10:42,030
this is the scary one because UEFI is

00:10:38,910 --> 00:10:44,100
supposed to update itself right you we

00:10:42,030 --> 00:10:44,790
need a new you fi this is why all of you

00:10:44,100 --> 00:10:47,070
own Macs

00:10:44,790 --> 00:10:48,570
sometimes you do an update missus make

00:10:47,070 --> 00:10:50,220
sure it's powered in don't touch its

00:10:48,570 --> 00:10:51,000
going to go away for a while it'll be

00:10:50,220 --> 00:10:54,570
okay

00:10:51,000 --> 00:10:56,250
okay that's the part where you AFI is

00:10:54,570 --> 00:10:58,350
updating itself frequently

00:10:56,250 --> 00:10:59,940
well what that kind of implies is that

00:10:58,350 --> 00:11:01,830
it would be possible to have an exploit

00:10:59,940 --> 00:11:04,140
that would embed itself in UEFI and

00:11:01,830 --> 00:11:06,300
break the UAF I updates itself for it

00:11:04,140 --> 00:11:09,510
and make it look like you if I updated

00:11:06,300 --> 00:11:10,950
it so successfully now you're done right

00:11:09,510 --> 00:11:13,410
and your only option at that point is

00:11:10,950 --> 00:11:14,880
called a chipper right you can remove

00:11:13,410 --> 00:11:16,320
that exploit with a chipper you don't

00:11:14,880 --> 00:11:19,740
have a useful machine left at the end

00:11:16,320 --> 00:11:21,630
but at least the exploits gone so so

00:11:19,740 --> 00:11:23,640
they've got these hundreds of binary

00:11:21,630 --> 00:11:25,920
blobs now what's the last thing that

00:11:23,640 --> 00:11:28,620
gets done on a new a new machine the

00:11:25,920 --> 00:11:30,390
firmware then machines late firmware

00:11:28,620 --> 00:11:32,280
stun in a rush is the firmware really

00:11:30,390 --> 00:11:34,710
all that good generally not and and

00:11:32,280 --> 00:11:36,750
you've got hundreds of the things but

00:11:34,710 --> 00:11:40,260
we're actually making it a lot easier so

00:11:36,750 --> 00:11:43,220
as an example system if you have a Dell

00:11:40,260 --> 00:11:45,660
are six thirty you can get clone a tree

00:11:43,220 --> 00:11:46,620
if you're interested come and talk to me

00:11:45,660 --> 00:11:48,030
about it I don't have time for the

00:11:46,620 --> 00:11:49,710
how-to and in three minutes you've got a

00:11:48,030 --> 00:11:51,660
BIOS image now that generally takes

00:11:49,710 --> 00:11:53,970
about an hour to do a build with you AFI

00:11:51,660 --> 00:11:56,400
today for that thing so three minutes is

00:11:53,970 --> 00:11:58,110
not half ed there are fifteen machines

00:11:56,400 --> 00:12:00,540
now that Republican on the website we

00:11:58,110 --> 00:12:01,710
can point you to and there are more

00:12:00,540 --> 00:12:03,810
machines all the time and then the

00:12:01,710 --> 00:12:07,200
machines we can't talk about you can

00:12:03,810 --> 00:12:09,420
today buy off-the-shelf OCP systems

00:12:07,200 --> 00:12:11,339
these are recycled systems from Facebook

00:12:09,420 --> 00:12:13,530
they're refurb and being resold they're

00:12:11,339 --> 00:12:15,089
actually a pretty good deal from IT

00:12:13,530 --> 00:12:18,030
renew and they come with Linux boot

00:12:15,089 --> 00:12:20,190
pre-installed so what we really do we

00:12:18,030 --> 00:12:21,810
take the ROM we scrape away ninety

00:12:20,190 --> 00:12:28,200
percent of it and replace it with Linux

00:12:21,810 --> 00:12:29,940
that's the short form okay Elaine asked

00:12:28,200 --> 00:12:32,580
me our legal framework obviously you

00:12:29,940 --> 00:12:34,350
know Linux is GPL you root for a lot of

00:12:32,580 --> 00:12:38,100
reasons it's just kind of a go community

00:12:34,350 --> 00:12:39,660
convention is BSD Corbett because I

00:12:38,100 --> 00:12:42,540
first started demonstrating on this in

00:12:39,660 --> 00:12:45,480
Corbett in 2014 is GPL and some BSD

00:12:42,540 --> 00:12:47,160
things like microcode power firmware

00:12:45,480 --> 00:12:48,839
because we paid this work on power we

00:12:47,160 --> 00:12:52,410
replaced headed boot with the you root

00:12:48,839 --> 00:12:54,810
stuff so there that's Apache to I think

00:12:52,410 --> 00:12:56,490
is still Apache to and your route is GPL

00:12:54,810 --> 00:12:59,430
to we've also done this kind of approach

00:12:56,490 --> 00:13:00,780
on arms and things like that but the

00:12:59,430 --> 00:13:04,400
general rule is it's basically probably

00:13:00,780 --> 00:13:04,400
going to be GPL if you ask that question

00:13:04,520 --> 00:13:08,190
we really need help

00:13:06,450 --> 00:13:09,570
we can always use help we need help at

00:13:08,190 --> 00:13:09,900
the kernel level we need help at the

00:13:09,570 --> 00:13:12,810
writing

00:13:09,900 --> 00:13:15,300
go code level I go to Linux boot or you

00:13:12,810 --> 00:13:18,120
can look at you root TK we have a slack

00:13:15,300 --> 00:13:21,540
channel select out you root calm of

00:13:18,120 --> 00:13:23,100
incomplete platform that that you know

00:13:21,540 --> 00:13:24,960
that that initiative is there we're

00:13:23,100 --> 00:13:27,120
always very happy to have people come in

00:13:24,960 --> 00:13:29,190
especially people who make systems and

00:13:27,120 --> 00:13:30,810
people who make chips you know we have a

00:13:29,190 --> 00:13:32,610
lot of users we have Facebook and we

00:13:30,810 --> 00:13:35,310
have nine elements and we have Google on

00:13:32,610 --> 00:13:37,290
the open compute platform call well we

00:13:35,310 --> 00:13:39,420
don't have enough of in my view today is

00:13:37,290 --> 00:13:41,610
the guys who you know companies that

00:13:39,420 --> 00:13:44,040
write design boards and design chipsets

00:13:41,610 --> 00:13:46,500
we're working to bring them into and if

00:13:44,040 --> 00:13:48,990
you want a fun sticker come and get one

00:13:46,500 --> 00:13:53,460
after the talk or there's BIOS hazard

00:13:48,990 --> 00:13:55,020
info and you know I think computer

00:13:53,460 --> 00:13:56,580
people look at that and generally tend

00:13:55,020 --> 00:13:58,530
to read BIOS hazard we didn't leave

00:13:56,580 --> 00:14:01,230
enough of a space so a lot of people who

00:13:58,530 --> 00:14:03,600
look at it say what's a BIOS hazard so

00:14:01,230 --> 00:14:07,760
sorry about that we're gonna have

00:14:03,600 --> 00:14:07,760
version two of that sticker soon thanks

00:14:31,090 --> 00:14:35,620
yep so we just do presenter

00:14:42,529 --> 00:14:53,459
you just maxima but your window in

00:14:44,910 --> 00:14:54,990
full-screen mode all right all right my

00:14:53,459 --> 00:14:57,420
name is Nate I'm here to talk about the

00:14:54,990 --> 00:15:01,709
OCP security project that Brian and I

00:14:57,420 --> 00:15:05,819
are co-leads for and from our security

00:15:01,709 --> 00:15:08,009
it turns out is a thing as Ron said it's

00:15:05,819 --> 00:15:10,860
not great right now but this will

00:15:08,009 --> 00:15:14,999
hopefully help so currently the state of

00:15:10,860 --> 00:15:17,490
things is a really sad balloon the

00:15:14,999 --> 00:15:19,709
secure boot is in general is very

00:15:17,490 --> 00:15:22,620
fragmented at best every chip vendor has

00:15:19,709 --> 00:15:24,420
their own different solution so if you

00:15:22,620 --> 00:15:28,110
want something that you know secure

00:15:24,420 --> 00:15:30,689
boots universally you don't have it and

00:15:28,110 --> 00:15:33,809
there are also these proprietary black

00:15:30,689 --> 00:15:35,610
boxes that Ron mentioned that you

00:15:33,809 --> 00:15:37,620
probably want to make sure that magical

00:15:35,610 --> 00:15:39,899
black box is the correct magical black

00:15:37,620 --> 00:15:42,990
box and isn't just some random thing

00:15:39,899 --> 00:15:45,379
that you're blindly trusting and

00:15:42,990 --> 00:15:48,569
unfortunately as was mentioned in the

00:15:45,379 --> 00:15:52,199
IOT presentation the lowest common

00:15:48,569 --> 00:15:55,110
denominator is no security at all and I

00:15:52,199 --> 00:16:03,660
usually like to say the s and IOT stands

00:15:55,110 --> 00:16:06,509
for security so the the goals of our

00:16:03,660 --> 00:16:09,300
project are to improve security across

00:16:06,509 --> 00:16:11,519
like the entire computing industry

00:16:09,300 --> 00:16:14,819
through open standards we want to make

00:16:11,519 --> 00:16:18,899
security a base requirement for anything

00:16:14,819 --> 00:16:22,769
not a differentiator and that also

00:16:18,899 --> 00:16:25,290
reduces a lot of redundant effort and

00:16:22,769 --> 00:16:27,809
you know building your own security

00:16:25,290 --> 00:16:29,420
snowflake is generally not going to go

00:16:27,809 --> 00:16:31,740
well

00:16:29,420 --> 00:16:33,569
security is significantly better and

00:16:31,740 --> 00:16:37,410
more secure when it's open there are

00:16:33,569 --> 00:16:38,879
lots of eyes looking at it and so what

00:16:37,410 --> 00:16:40,889
we want to produce are some

00:16:38,879 --> 00:16:45,389
specifications for both hardware and

00:16:40,889 --> 00:16:47,309
software security implementations we

00:16:45,389 --> 00:16:49,049
want to work across all different kinds

00:16:47,309 --> 00:16:51,830
of IT equipment

00:16:49,049 --> 00:16:57,480
OCP likes to use IT equipment for

00:16:51,830 --> 00:16:59,250
basically anything that runs code and we

00:16:57,480 --> 00:17:01,410
want to use like existing an emerging

00:16:59,250 --> 00:17:04,020
standards as much as we can and not have

00:17:01,410 --> 00:17:05,540
to you know reinvent the wheel when we

00:17:04,020 --> 00:17:09,360
don't have to

00:17:05,540 --> 00:17:13,069
so the focal points are basically taking

00:17:09,360 --> 00:17:16,650
every single piece of firmware or

00:17:13,069 --> 00:17:19,860
storage that's on any kind of board and

00:17:16,650 --> 00:17:23,250
securing it so we want to be able to

00:17:19,860 --> 00:17:24,990
provision firmware as well so that

00:17:23,250 --> 00:17:30,240
includes you know secure updates and

00:17:24,990 --> 00:17:32,550
roll backs recover from a bad state

00:17:30,240 --> 00:17:35,600
successfully so that you're never turned

00:17:32,550 --> 00:17:38,460
into a brick by going into a bad state

00:17:35,600 --> 00:17:44,190
and then the ever so terrifying

00:17:38,460 --> 00:17:49,530
attestation so making sure that you know

00:17:44,190 --> 00:17:51,540
you're running on the correct thing so

00:17:49,530 --> 00:17:54,140
we'd also like to standardize interfaces

00:17:51,540 --> 00:17:57,060
we're gonna standardize both hardware

00:17:54,140 --> 00:18:02,610
like Hardware electrical interfaces and

00:17:57,060 --> 00:18:04,710
software api's and then very importantly

00:18:02,610 --> 00:18:08,360
we want to support change of ownership

00:18:04,710 --> 00:18:11,340
so used year should also be secure

00:18:08,360 --> 00:18:13,410
something like you know a key burned

00:18:11,340 --> 00:18:15,390
into one-time fuses is great for the

00:18:13,410 --> 00:18:16,950
first person who owned something it's

00:18:15,390 --> 00:18:19,680
kind of useless for the next person

00:18:16,950 --> 00:18:21,960
unless you want to hand off your private

00:18:19,680 --> 00:18:24,140
keys to someone else which probably

00:18:21,960 --> 00:18:24,140
don't

00:18:26,320 --> 00:18:31,990
so the scope of the project sort of

00:18:30,190 --> 00:18:34,750
physical security county measures or

00:18:31,990 --> 00:18:36,220
sorry what's out of scope is physical

00:18:34,750 --> 00:18:39,520
security countermeasures

00:18:36,220 --> 00:18:41,610
so like disabling JTAG interfaces or

00:18:39,520 --> 00:18:43,600
things like that would be in scope

00:18:41,610 --> 00:18:45,640
someone hitting your server with a

00:18:43,600 --> 00:18:48,520
screwdriver is not really going to be

00:18:45,640 --> 00:18:51,790
our problem and we're also not gonna

00:18:48,520 --> 00:18:52,990
play with thermite unfortunately tried

00:18:51,790 --> 00:18:56,080
to sneak that one in they wouldn't

00:18:52,990 --> 00:19:01,110
wouldn't let me we're also not looking

00:18:56,080 --> 00:19:03,580
at like coding practices or error like

00:19:01,110 --> 00:19:07,030
compiler time you know checks or things

00:19:03,580 --> 00:19:09,900
like that also not really focusing on

00:19:07,030 --> 00:19:12,910
penetration testing of hardware software

00:19:09,900 --> 00:19:14,290
and we do not want to invent new

00:19:12,910 --> 00:19:16,870
encryption algorithms

00:19:14,290 --> 00:19:19,600
we'd like to rely on you know existing

00:19:16,870 --> 00:19:25,330
or currently like in the works very well

00:19:19,600 --> 00:19:28,240
proven technology for that so we are

00:19:25,330 --> 00:19:30,250
making progress in here they're links to

00:19:28,240 --> 00:19:33,250
a couple of Doc's that we've been

00:19:30,250 --> 00:19:35,710
working on as a group we sort of started

00:19:33,250 --> 00:19:37,990
out as our group by looking at all the

00:19:35,710 --> 00:19:39,790
common security threats that we want to

00:19:37,990 --> 00:19:42,100
be able to tackle and trying to

00:19:39,790 --> 00:19:45,130
categorize them and figure out like how

00:19:42,100 --> 00:19:47,559
we're going to tackle them and then

00:19:45,130 --> 00:19:51,070
we've started drafts of sort of two of

00:19:47,559 --> 00:19:55,360
our sub sections out of about six I

00:19:51,070 --> 00:19:57,190
think so we have a secure boot section

00:19:55,360 --> 00:20:02,410
and an attestation section that are both

00:19:57,190 --> 00:20:07,630
definitely still works in progress and

00:20:02,410 --> 00:20:08,650
you should join us we are an incubation

00:20:07,630 --> 00:20:13,450
stage

00:20:08,650 --> 00:20:15,900
OCP project and will hopefully be

00:20:13,450 --> 00:20:18,850
transitioning into a full OCP project

00:20:15,900 --> 00:20:21,640
there's a mailing list there are weekly

00:20:18,850 --> 00:20:22,190
meetings that are the most exciting

00:20:21,640 --> 00:20:26,550
thing ever

00:20:22,190 --> 00:20:26,550
[Laughter]

00:20:26,820 --> 00:20:30,190
yeah they are very early in the morning

00:20:29,440 --> 00:20:32,860
if you're on the west coast

00:20:30,190 --> 00:20:37,380
unfortunately

00:20:32,860 --> 00:20:37,380
oh yeah that's all I have

00:21:01,080 --> 00:21:09,490
okay hi so my name is is not gun drama

00:21:07,060 --> 00:21:10,720
Davinder gout and i didn't plagiarize

00:21:09,490 --> 00:21:14,650
these slides

00:21:10,720 --> 00:21:17,410
these are his slides he couldn't make it

00:21:14,650 --> 00:21:19,090
today so I'm standing in for him I

00:21:17,410 --> 00:21:24,070
wasn't I wasn't supposed to talk on this

00:21:19,090 --> 00:21:28,540
topic but Davinder as he goes by is a

00:21:24,070 --> 00:21:33,070
co-lead with Ron in the open open source

00:21:28,540 --> 00:21:34,680
firm or group in an Open Compute Open

00:21:33,070 --> 00:21:39,000
Compute if you haven't heard about it

00:21:34,680 --> 00:21:42,480
tries to do what what's been done in in

00:21:39,000 --> 00:21:45,010
software in that it tries to take

00:21:42,480 --> 00:21:48,370
hardware and make a hardware platform

00:21:45,010 --> 00:21:50,440
open just like any open source software

00:21:48,370 --> 00:21:52,630
project obviously this difference is

00:21:50,440 --> 00:21:55,750
with you know the types of collateral

00:21:52,630 --> 00:21:58,420
that are that are made open but a part

00:21:55,750 --> 00:22:00,430
that has a lot of commonality would be

00:21:58,420 --> 00:22:07,090
the firmware because it's all software

00:22:00,430 --> 00:22:10,870
underneath the hood so this this slide

00:22:07,090 --> 00:22:14,110
talks a little bit about the mission for

00:22:10,870 --> 00:22:17,410
for the group and their their goal is to

00:22:14,110 --> 00:22:20,050
make the firmware as open as possible

00:22:17,410 --> 00:22:21,400
and provide more choice just like all

00:22:20,050 --> 00:22:24,820
open source software it's about

00:22:21,400 --> 00:22:27,700
providing transparency and through

00:22:24,820 --> 00:22:32,560
transparency you get security and it's

00:22:27,700 --> 00:22:35,320
also about providing choice so Ron had

00:22:32,560 --> 00:22:37,090
already covered a lot of this in in in

00:22:35,320 --> 00:22:39,360
his talk about the companies that are

00:22:37,090 --> 00:22:42,940
contributing to the to the open source

00:22:39,360 --> 00:22:47,320
firmware development Intel Microsoft

00:22:42,940 --> 00:22:52,090
Google Facebook Lenovo horizon and

00:22:47,320 --> 00:22:57,280
others the work streams inside in this

00:22:52,090 --> 00:23:03,520
in this committee or project are open e

00:22:57,280 --> 00:23:07,090
DK to Linux boot coreboot then there's

00:23:03,520 --> 00:23:09,460
the the silicon providers also providing

00:23:07,090 --> 00:23:11,010
their pieces of the platform

00:23:09,460 --> 00:23:14,250
initialization

00:23:11,010 --> 00:23:17,460
and that's the 10% Ron talked about has

00:23:14,250 --> 00:23:25,640
always been always been there just to do

00:23:17,460 --> 00:23:28,470
that platform initialization okay so

00:23:25,640 --> 00:23:29,790
this part talks a little bit about one

00:23:28,470 --> 00:23:30,510
of the efforts inside an app project

00:23:29,790 --> 00:23:34,700
that

00:23:30,510 --> 00:23:37,650
devinder drives and that is the open edk

00:23:34,700 --> 00:23:41,630
dixie core work stream the goals that

00:23:37,650 --> 00:23:46,440
are work stream of course are taking the

00:23:41,630 --> 00:23:49,440
edk to codebase and making that

00:23:46,440 --> 00:23:51,390
open-source supporting you know for more

00:23:49,440 --> 00:23:56,540
security features like secure boot

00:23:51,390 --> 00:24:01,020
measured boot multiple OS boot

00:23:56,540 --> 00:24:06,830
supporting new hardware security modules

00:24:01,020 --> 00:24:09,809
like Cerberus and and others supporting

00:24:06,830 --> 00:24:11,880
out of and configuration making sure

00:24:09,809 --> 00:24:14,970
that the deployment of that firmware is

00:24:11,880 --> 00:24:17,210
easy to set up and also optimizing it

00:24:14,970 --> 00:24:22,440
for performance reliability

00:24:17,210 --> 00:24:25,320
serviceability and deploying at scale of

00:24:22,440 --> 00:24:27,540
course there's an initial project that's

00:24:25,320 --> 00:24:35,690
been open sourced and the link is

00:24:27,540 --> 00:24:35,690
provided below that takes us to the end

00:24:43,030 --> 00:24:46,089
[Music]

00:25:09,299 --> 00:25:20,769
it's security by obscurity there okay so

00:25:19,269 --> 00:25:25,090
you've been working on this for a while

00:25:20,769 --> 00:25:27,130
why isn't it done yet we need more

00:25:25,090 --> 00:25:42,519
contributors like you to help us take it

00:25:27,130 --> 00:25:45,460
there great question hi guys I work on

00:25:42,519 --> 00:25:48,639
open BMC and open pal firmware at IBM

00:25:45,460 --> 00:25:52,059
how do you see the work we do on things

00:25:48,639 --> 00:25:54,429
open BMC interfacing with your workgroup

00:25:52,059 --> 00:25:58,870
and and what's that gonna look like when

00:25:54,429 --> 00:26:00,220
really it's the road you know yeah yeah

00:25:58,870 --> 00:26:01,990
that's that's a great question I'll

00:26:00,220 --> 00:26:05,860
maybe take take that one first

00:26:01,990 --> 00:26:12,909
so we're also collaborators in open VM C

00:26:05,860 --> 00:26:15,610
so yeah and actually have deployed

00:26:12,909 --> 00:26:17,139
instances productized of open BMC and

00:26:15,610 --> 00:26:23,590
one of the only companies to do that

00:26:17,139 --> 00:26:27,510
today is to deploy that at scale so in

00:26:23,590 --> 00:26:30,190
open BMC and having the the open edk

00:26:27,510 --> 00:26:36,039
were obviously this communication that

00:26:30,190 --> 00:26:39,760
goes between the boot loader and the the

00:26:36,039 --> 00:26:42,250
BMC for platform exchanging platform

00:26:39,760 --> 00:26:44,830
configuration data sometimes there's

00:26:42,250 --> 00:26:46,649
some doing some error information that

00:26:44,830 --> 00:26:49,110
goes into the BMC about Hardware errors

00:26:46,649 --> 00:26:52,720
all of those interfaces and plumbing

00:26:49,110 --> 00:26:59,590
we've put in place inside in the open

00:26:52,720 --> 00:27:01,929
edk so so you see yourselves it's

00:26:59,590 --> 00:27:04,769
defining the api's between the host

00:27:01,929 --> 00:27:07,690
femur and the management family over

00:27:04,769 --> 00:27:10,750
there there are api is there are api

00:27:07,690 --> 00:27:13,389
used to find there already I don't think

00:27:10,750 --> 00:27:15,909
we're defining all of those interactions

00:27:13,389 --> 00:27:19,629
that need that need to happen but we

00:27:15,909 --> 00:27:22,149
have put some in place already okay

00:27:19,629 --> 00:27:24,989
and it's based on on ipmi so there's

00:27:22,149 --> 00:27:27,460
like IPMI exchanges during during boot

00:27:24,989 --> 00:27:30,249
the past information about the system

00:27:27,460 --> 00:27:32,499
platform and today into the VM scene ok

00:27:30,249 --> 00:27:34,509
so you want to create open standards for

00:27:32,499 --> 00:27:35,710
doing this between open firmware that's

00:27:34,509 --> 00:27:37,570
running on the host an open phone that's

00:27:35,710 --> 00:27:40,059
running on the BMC is that the goal of

00:27:37,570 --> 00:27:41,739
your group that's not the goal that's

00:27:40,059 --> 00:27:43,570
not that the primary goal of the group

00:27:41,739 --> 00:27:45,070
but it's what definitely one of the

00:27:43,570 --> 00:27:46,929
things that is discussed in there is

00:27:45,070 --> 00:27:48,609
what you know what information should be

00:27:46,929 --> 00:27:52,509
exchanged and what is the payload format

00:27:48,609 --> 00:27:54,249
that should be exchanged we did

00:27:52,509 --> 00:27:56,470
encourage more people from open VNC to

00:27:54,249 --> 00:27:58,210
attend yeah I was just wondering like if

00:27:56,470 --> 00:27:59,499
I rock up for the meetings which as an

00:27:58,210 --> 00:28:02,590
Australian they're gonna be it two in

00:27:59,499 --> 00:28:05,109
the morning something if I could rock up

00:28:02,590 --> 00:28:06,519
what would what would my project better

00:28:05,109 --> 00:28:08,580
bring to the table and what would you

00:28:06,519 --> 00:28:12,099
better help

00:28:08,580 --> 00:28:14,700
well we'd open we'd open BMC I know

00:28:12,099 --> 00:28:17,679
they've already got some IPMI framework

00:28:14,700 --> 00:28:20,109
as well as redfish framework that

00:28:17,679 --> 00:28:25,149
they're putting in place I think the

00:28:20,109 --> 00:28:28,690
communication between the the boot

00:28:25,149 --> 00:28:32,049
loader and the BMC the bandwidth for

00:28:28,690 --> 00:28:33,359
that exchange isn't isn't very large so

00:28:32,049 --> 00:28:35,710
as payloads are kind of more

00:28:33,359 --> 00:28:37,330
complementary to binary based pilot

00:28:35,710 --> 00:28:40,989
payloads as opposed to web based

00:28:37,330 --> 00:28:44,289
payloads and XML but architects

00:28:40,989 --> 00:28:46,119
architects worry that interface is is

00:28:44,289 --> 00:28:49,659
still somewhat in it's in its infancy

00:28:46,119 --> 00:28:51,190
and physically the interface is too or a

00:28:49,659 --> 00:28:53,259
little bit different as you transition

00:28:51,190 --> 00:28:56,769
architectures and away from you know

00:28:53,259 --> 00:28:59,559
maybe an in an x86 architecture might

00:28:56,769 --> 00:29:02,979
have one interface to a VM see when you

00:28:59,559 --> 00:29:04,659
go to arm and other platforms they tend

00:29:02,979 --> 00:29:07,359
to have different interfaces into the VM

00:29:04,659 --> 00:29:09,429
see so you can definitely contribute in

00:29:07,359 --> 00:29:12,249
some of the driver work there and

00:29:09,429 --> 00:29:14,799
enablement and API is that are friendly

00:29:12,249 --> 00:29:18,570
across all platforms to make it more

00:29:14,799 --> 00:29:18,570
generic so we welcome you to join

00:29:20,240 --> 00:29:27,030
I'm gonna quick throw in a a slightly

00:29:23,280 --> 00:29:29,220
different angle on all that to so IT

00:29:27,030 --> 00:29:33,990
renew which used to be horizon commuting

00:29:29,220 --> 00:29:35,580
is buying probably I guess I well

00:29:33,990 --> 00:29:39,390
tens of thousands let's just called at

00:29:35,580 --> 00:29:42,780
the moment of Facebook nodes and they

00:29:39,390 --> 00:29:46,610
installed the Linux boot with the go

00:29:42,780 --> 00:29:48,720
based and it ran FS that I mentioned

00:29:46,610 --> 00:29:52,170
they are actually going to be looking at

00:29:48,720 --> 00:29:55,620
installing that same model on the BMC

00:29:52,170 --> 00:29:57,930
and the reason is they have got the boot

00:29:55,620 --> 00:30:00,870
time on those nodes from eight minutes

00:29:57,930 --> 00:30:03,750
spent in UEFI down to 20 seconds spent

00:30:00,870 --> 00:30:05,580
in Linux boot and what they initially

00:30:03,750 --> 00:30:07,770
they immediately discovered that it's

00:30:05,580 --> 00:30:12,630
taken longer for the BMC to boot than it

00:30:07,770 --> 00:30:14,070
is for the main processor and so what

00:30:12,630 --> 00:30:17,520
they want to look at and they they asked

00:30:14,070 --> 00:30:20,040
us to help them because the Linux kernel

00:30:17,520 --> 00:30:22,980
on the and the go based sort of an it

00:30:20,040 --> 00:30:24,660
ran a fest boot so fast and we did

00:30:22,980 --> 00:30:27,540
actually put some design in here to make

00:30:24,660 --> 00:30:30,060
that boot fast on arm they would like to

00:30:27,540 --> 00:30:32,460
look at that same identical stack on the

00:30:30,060 --> 00:30:34,980
BMC that they're running the x86 because

00:30:32,460 --> 00:30:37,170
that cuts their maintenance tasks in

00:30:34,980 --> 00:30:40,130
half right they've got one stack not two

00:30:37,170 --> 00:30:44,490
and it's a considerably simpler stack

00:30:40,130 --> 00:30:49,860
with the Linux kernel and they go based

00:30:44,490 --> 00:30:52,410
in it Ram FS so based on that I'm not

00:30:49,860 --> 00:30:54,240
sure you know what I would be I would

00:30:52,410 --> 00:30:57,330
want to try and predict where things are

00:30:54,240 --> 00:31:00,690
gonna go here but the change in boot

00:30:57,330 --> 00:31:02,820
time on the x86 side and I remember this

00:31:00,690 --> 00:31:05,160
a long time ago in the early 2000s there

00:31:02,820 --> 00:31:09,390
was a company I forget their name now

00:31:05,160 --> 00:31:13,230
no I anyway we put Linux BIOS on the x86

00:31:09,390 --> 00:31:14,730
on the AMD and they had a PowerPC

00:31:13,230 --> 00:31:18,060
running hard hat linux as their

00:31:14,730 --> 00:31:20,340
quote-unquote BMC and as soon as we had

00:31:18,060 --> 00:31:23,280
Linux booting in three seconds on the

00:31:20,340 --> 00:31:27,260
AMD we observed that you know four

00:31:23,280 --> 00:31:30,570
minutes and 57 seconds later the BMC

00:31:27,260 --> 00:31:32,250
came up and put some text on the LCD

00:31:30,570 --> 00:31:32,679
based front panel and said hey man I'm

00:31:32,250 --> 00:31:34,629
ready to

00:31:32,679 --> 00:31:36,100
butyou're machine well by that point you

00:31:34,629 --> 00:31:38,470
know the machines had joined the cluster

00:31:36,100 --> 00:31:40,389
there are running computing tasks by the

00:31:38,470 --> 00:31:44,039
time the BMC was ready to join the party

00:31:40,389 --> 00:31:47,649
so you know I've had this experience

00:31:44,039 --> 00:31:49,419
since really the two thousands of you

00:31:47,649 --> 00:31:51,009
know throwing away the existing firmware

00:31:49,419 --> 00:31:53,169
on the x86 putting in something that

00:31:51,009 --> 00:31:56,950
boots in seconds and then realizing that

00:31:53,169 --> 00:31:59,100
the maintenance system for the x86 is

00:31:56,950 --> 00:32:03,070
just barely hanging on

00:31:59,100 --> 00:32:05,950
keeping up so my in my ideal world III

00:32:03,070 --> 00:32:08,499
was at a really great pasta in one year

00:32:05,950 --> 00:32:10,720
and I pointed out that the hard

00:32:08,499 --> 00:32:13,360
requirement for an automotive Linux

00:32:10,720 --> 00:32:14,980
based system to be up and ready and have

00:32:13,360 --> 00:32:17,980
turned on lights on the front panel is

00:32:14,980 --> 00:32:20,440
800 milliseconds and in my heart arts

00:32:17,980 --> 00:32:23,289
what I really think should be the right

00:32:20,440 --> 00:32:25,480
time for a BMC to be ready and active

00:32:23,289 --> 00:32:26,230
and communicating and functional that's

00:32:25,480 --> 00:32:28,059
a good number

00:32:26,230 --> 00:32:31,330
and we're not even close we're about a

00:32:28,059 --> 00:32:34,210
factor of 40 off today because the

00:32:31,330 --> 00:32:36,309
number I'm seeing is 30 seconds so that

00:32:34,210 --> 00:32:48,309
that's my slightly contrarian view of

00:32:36,309 --> 00:32:49,480
the BMC situation so attestation so one

00:32:48,309 --> 00:32:50,889
of the fun things about all of this

00:32:49,480 --> 00:32:52,529
about attestation is goes all the way up

00:32:50,889 --> 00:32:54,700
the stack right and for it to be useful

00:32:52,529 --> 00:32:56,919
you've got to have had accession

00:32:54,700 --> 00:32:58,169
frameworks remote attestation serves all

00:32:56,919 --> 00:33:00,970
that sort of stuff

00:32:58,169 --> 00:33:02,769
do any of you see it as part of your

00:33:00,970 --> 00:33:04,570
brief to be interacting with those

00:33:02,769 --> 00:33:08,639
frameworks to be looking at the sort of

00:33:04,570 --> 00:33:16,200
big server remote attestation community

00:33:08,639 --> 00:33:16,200
blah etc warrior thoughts I did

00:33:22,980 --> 00:33:28,600
can you hear me on this thing yes

00:33:25,330 --> 00:33:30,130
so on the anta station side that's one

00:33:28,600 --> 00:33:34,419
of the things that I'm working on in the

00:33:30,130 --> 00:33:37,150
OCP security project we we first had to

00:33:34,419 --> 00:33:38,830
define our scope and try to limit what

00:33:37,150 --> 00:33:42,159
we did because it would take you know

00:33:38,830 --> 00:33:46,720
how many years to do this and as of the

00:33:42,159 --> 00:33:49,390
first question right as far as how we're

00:33:46,720 --> 00:33:52,750
planning to do it for now is that it is

00:33:49,390 --> 00:33:55,120
a hierarchical plan so that device is

00:33:52,750 --> 00:33:57,279
within the system will attest to the

00:33:55,120 --> 00:34:01,450
server itself which may actually turn

00:33:57,279 --> 00:34:03,909
out to be the BMC in the server and then

00:34:01,450 --> 00:34:08,440
it will be up to the server to then pass

00:34:03,909 --> 00:34:12,970
that on or not to a data center so it

00:34:08,440 --> 00:34:15,909
will be hierarchical for now yes from

00:34:12,970 --> 00:34:18,730
the device we are talking up from the

00:34:15,909 --> 00:34:24,429
device to the server but not beyond for

00:34:18,730 --> 00:34:28,179
now I just wanted to mention one thing

00:34:24,429 --> 00:34:30,879
because we yeah we're the real expert on

00:34:28,179 --> 00:34:32,290
our our plans is over here Chris

00:34:30,879 --> 00:34:35,919
come and talk to him later if you're

00:34:32,290 --> 00:34:39,220
interested net food is so incredibly

00:34:35,919 --> 00:34:41,290
broken in the x86 world that it's it's

00:34:39,220 --> 00:34:43,179
almost impossible to look at it and

00:34:41,290 --> 00:34:47,320
think of anything but just throwing it

00:34:43,179 --> 00:34:49,810
all away so that's what we're doing give

00:34:47,320 --> 00:34:52,060
you giving an interesting example

00:34:49,810 --> 00:34:53,589
everybody thinks pixie boot is slow and

00:34:52,060 --> 00:34:55,119
or right but then they go from net to

00:34:53,589 --> 00:34:56,950
conclude that net booting is slow and

00:34:55,119 --> 00:34:58,839
they're they're wrong net booting can be

00:34:56,950 --> 00:35:02,890
very very fast it can do it in a second

00:34:58,839 --> 00:35:05,650
or two so the the plan where we are is

00:35:02,890 --> 00:35:07,270
you'll you'll do a th we have a th

00:35:05,650 --> 00:35:09,730
client written and go of course we do at

00:35:07,270 --> 00:35:11,440
the H client W get GPG v and then

00:35:09,730 --> 00:35:13,420
somewhere linked in all that junk in

00:35:11,440 --> 00:35:16,150
ways I don't understand because these

00:35:13,420 --> 00:35:20,140
guys understand and I don't is is our

00:35:16,150 --> 00:35:22,750
attestation framework but you know as

00:35:20,140 --> 00:35:24,250
long I I worry a lot about net food I'm

00:35:22,750 --> 00:35:26,770
a former high performance computing guy

00:35:24,250 --> 00:35:29,500
and that's how we did everything and you

00:35:26,770 --> 00:35:31,480
know none of this has any use unless you

00:35:29,500 --> 00:35:34,330
throw away especially things like pixie

00:35:31,480 --> 00:35:35,890
boot so you know you really have to

00:35:34,330 --> 00:35:38,140
scrape the stack clean

00:35:35,890 --> 00:35:42,390
down in the silicon and and sink it over

00:35:38,140 --> 00:35:42,390
again or you're just doomed in my view

00:35:43,200 --> 00:35:50,590
okay all right so between core boots

00:35:48,330 --> 00:35:53,590
sort of Linux as an application

00:35:50,590 --> 00:35:55,600
operating system and open BMC are any of

00:35:53,590 --> 00:35:58,320
you concerned about lack of diversity in

00:35:55,600 --> 00:36:05,350
the stack you know from an attack

00:35:58,320 --> 00:36:08,050
perspective no concerns I you're using

00:36:05,350 --> 00:36:10,060
the same kernel for everything right so

00:36:08,050 --> 00:36:12,520
if there's I had it I had an interesting

00:36:10,060 --> 00:36:13,960
talk Eric grosse used to be our VP of

00:36:12,520 --> 00:36:15,760
security at Google I've known him for

00:36:13,960 --> 00:36:19,270
decades and I had an interesting talk

00:36:15,760 --> 00:36:21,430
with him about that the whole diversity

00:36:19,270 --> 00:36:25,720
thing right and he said to me he'd never

00:36:21,430 --> 00:36:27,250
actually seen a benefit and I've heard

00:36:25,720 --> 00:36:28,750
this discussion from security people a

00:36:27,250 --> 00:36:30,490
couple times now if you talk about

00:36:28,750 --> 00:36:32,140
saying oh you're depending on Linux and

00:36:30,490 --> 00:36:34,570
firmware in area depending on Linux

00:36:32,140 --> 00:36:37,240
after you boot they've never seen a case

00:36:34,570 --> 00:36:41,110
that diversity would make that situation

00:36:37,240 --> 00:36:43,650
better make it a lot worse yeah we've

00:36:41,110 --> 00:36:45,550
seen it make it worse

00:36:43,650 --> 00:36:47,470
yes yeah

00:36:45,550 --> 00:36:49,510
it pays to fix that sort of that's the

00:36:47,470 --> 00:36:52,210
perfect Ryan just said it fixed one bug

00:36:49,510 --> 00:36:55,960
not three yeah so so it helps you to

00:36:52,210 --> 00:36:59,050
focus a lot of your resources on the one

00:36:55,960 --> 00:37:02,110
ting as opposed to putting people and

00:36:59,050 --> 00:37:06,150
focused on many different things to try

00:37:02,110 --> 00:37:09,400
and catch exploits and bugs across

00:37:06,150 --> 00:37:12,490
different varieties of kernels if you

00:37:09,400 --> 00:37:17,170
can focus on that one inveterate then

00:37:12,490 --> 00:37:20,170
you're in a stronger place I don't know

00:37:17,170 --> 00:37:22,930
if you've noticed also from a an

00:37:20,170 --> 00:37:26,830
industry point of view the lack of

00:37:22,930 --> 00:37:29,590
security developers at all levels I mean

00:37:26,830 --> 00:37:32,890
you can see how many of us are in this

00:37:29,590 --> 00:37:38,020
room right and we found at least working

00:37:32,890 --> 00:37:40,660
in OCP that there are many vendors who

00:37:38,020 --> 00:37:43,030
admit openly that they don't know

00:37:40,660 --> 00:37:46,300
security and they are relying on us to

00:37:43,030 --> 00:37:47,890
come up with the standards because they

00:37:46,300 --> 00:37:50,340
just don't know it and they don't have

00:37:47,890 --> 00:37:50,340
the staff

00:37:53,050 --> 00:38:02,000
nobody hears nobody cares so here's the

00:38:00,140 --> 00:38:03,440
other comment so I had a friend once I

00:38:02,000 --> 00:38:06,170
he worked in architecture office said

00:38:03,440 --> 00:38:07,460
how come h-holy Inc Heating and Cooling

00:38:06,170 --> 00:38:10,460
and every building ever been is

00:38:07,460 --> 00:38:11,960
completely broken and he says they

00:38:10,460 --> 00:38:13,250
always do that in the last week nobody

00:38:11,960 --> 00:38:14,630
cares about it they leave it to the end

00:38:13,250 --> 00:38:16,070
and they just throw it into plants with

00:38:14,630 --> 00:38:17,990
all the junior staff who have never done

00:38:16,070 --> 00:38:21,560
it before that's why it's always broken

00:38:17,990 --> 00:38:23,630
so that's why you know I might joke

00:38:21,560 --> 00:38:24,950
about look they build the they build a

00:38:23,630 --> 00:38:27,500
motherboard and they ship the firmware

00:38:24,950 --> 00:38:29,510
out is the last afterthought so if you

00:38:27,500 --> 00:38:31,430
think about what do they even care less

00:38:29,510 --> 00:38:34,190
about than the fact that boots generally

00:38:31,430 --> 00:38:36,080
security is the thing everybody when

00:38:34,190 --> 00:38:38,660
when schedule pressures hit that's the

00:38:36,080 --> 00:38:40,790
thing they throw away which is crazy but

00:38:38,660 --> 00:38:44,000
that's kind of what I hear over and over

00:38:40,790 --> 00:38:45,620
again so that's always a problem in the

00:38:44,000 --> 00:38:47,260
end nobody cares about security even

00:38:45,620 --> 00:38:50,060
though they say they care about security

00:38:47,260 --> 00:38:53,840
could I respond to the heterogeneity

00:38:50,060 --> 00:38:58,400
question patronage Annette is I think as

00:38:53,840 --> 00:39:01,190
a name is saying is good if you have if

00:38:58,400 --> 00:39:03,260
you don't have a scarcity resources if

00:39:01,190 --> 00:39:05,630
you have scarce resources I think trying

00:39:03,260 --> 00:39:07,250
to apply those resources to a small

00:39:05,630 --> 00:39:09,200
number of things and try and get them as

00:39:07,250 --> 00:39:10,550
good as possible rather having a large

00:39:09,200 --> 00:39:12,980
number of things which are all terrible

00:39:10,550 --> 00:39:15,080
is it's pretty bad I'm an obviously

00:39:12,980 --> 00:39:18,280
agree but it's we do have scarcity I

00:39:15,080 --> 00:39:18,280
think that's probably always look at it

00:39:32,080 --> 00:39:37,670
yeah fascinating discussion so this is

00:39:35,690 --> 00:39:40,040
sadly not unique to this industry but

00:39:37,670 --> 00:39:43,910
there's an accountability piece here so

00:39:40,040 --> 00:39:45,860
how do we implement accountability in a

00:39:43,910 --> 00:39:53,270
way that people will see the stake that

00:39:45,860 --> 00:39:57,340
they have quite sure I understood your

00:39:53,270 --> 00:40:01,760
question but I think having the open

00:39:57,340 --> 00:40:04,760
source and openness of the whole

00:40:01,760 --> 00:40:10,250
specifications will certainly help what

00:40:04,760 --> 00:40:12,440
we don't have in all cases are yet the

00:40:10,250 --> 00:40:15,980
infrastructure like you have with the

00:40:12,440 --> 00:40:17,360
Linux kernel and ways to do up streaming

00:40:15,980 --> 00:40:19,490
and so forth

00:40:17,360 --> 00:40:23,870
there aren't guessing some some projects

00:40:19,490 --> 00:40:26,840
but not all the way that you can have

00:40:23,870 --> 00:40:33,260
all of the source code control and

00:40:26,840 --> 00:40:36,740
management it's just not there yet you

00:40:33,260 --> 00:40:38,540
know I just just on that I think you do

00:40:36,740 --> 00:40:41,150
recognize that that is that is a good

00:40:38,540 --> 00:40:42,920
point someone some of the projects are

00:40:41,150 --> 00:40:47,750
run out of you know Linux Foundation

00:40:42,920 --> 00:40:51,650
like the open VM see others are like

00:40:47,750 --> 00:40:53,720
Tiano core based and there's others then

00:40:51,650 --> 00:40:55,930
that are that are run inside no CP and

00:40:53,720 --> 00:41:00,950
there's slightly different governance

00:40:55,930 --> 00:41:02,660
models across those but I think the

00:41:00,950 --> 00:41:04,730
problem with trying to make it one way

00:41:02,660 --> 00:41:06,770
or one thing is it doesn't work for

00:41:04,730 --> 00:41:07,610
everybody there's never one solution

00:41:06,770 --> 00:41:11,330
that works for everyone

00:41:07,610 --> 00:41:14,570
so all that a product all of the firm

00:41:11,330 --> 00:41:17,780
are based projects although we would we

00:41:14,570 --> 00:41:20,720
support many of them from from open

00:41:17,780 --> 00:41:25,180
compute there's no one governance model

00:41:20,720 --> 00:41:25,180
that we mandate on those projects

00:41:30,430 --> 00:41:33,430
yeah

00:41:47,809 --> 00:41:53,999
um have you talked about measured food

00:41:51,210 --> 00:41:57,079
and at the station have you thought

00:41:53,999 --> 00:41:59,819
about how specifically with the TPM

00:41:57,079 --> 00:42:03,559
how're you gonna map out PCRs for

00:41:59,819 --> 00:42:06,319
example on a PC client we in TCGA a

00:42:03,559 --> 00:42:10,200
member of trusted computing group

00:42:06,319 --> 00:42:12,990
created a PC our mapping for the more

00:42:10,200 --> 00:42:15,990
complex systems have you really thought

00:42:12,990 --> 00:42:17,579
about how you're gonna map for example

00:42:15,990 --> 00:42:20,759
as you take the measurements in the in

00:42:17,579 --> 00:42:23,039
the various PC ARS standardizing that

00:42:20,759 --> 00:42:25,440
set of mapping across all of these so

00:42:23,039 --> 00:42:29,519
verification engines can more easily

00:42:25,440 --> 00:42:31,650
figure out and do the verification which

00:42:29,519 --> 00:42:40,130
is why we did in the first place so you

00:42:31,650 --> 00:42:45,539
have you thought that through it all so

00:42:40,130 --> 00:42:47,880
so yeah there we go so obviously with it

00:42:45,539 --> 00:42:51,599
with the ADK 2 there that kind of

00:42:47,880 --> 00:42:53,759
closely aligns with the with the TPM

00:42:51,599 --> 00:42:56,339
model with the with the Linux boot

00:42:53,759 --> 00:43:00,299
there's fewer boot stages so it's still

00:42:56,339 --> 00:43:04,890
the same you just need fewer PC ours

00:43:00,299 --> 00:43:08,569
firmly right we set up eight oh well you

00:43:04,890 --> 00:43:11,220
know because you know if eyes complex

00:43:08,569 --> 00:43:13,980
we think there's needs to be fewer for

00:43:11,220 --> 00:43:15,380
this model and I was just asking the

00:43:13,980 --> 00:43:25,499
question how do you plan on

00:43:15,380 --> 00:43:26,880
standardizing that smaller set I'll give

00:43:25,499 --> 00:43:29,069
you a hint

00:43:26,880 --> 00:43:32,249
I'll help you with it because I define

00:43:29,069 --> 00:43:37,410
the ones for the PC client yeah so I'll

00:43:32,249 --> 00:43:39,930
be happy to help with that I think we've

00:43:37,410 --> 00:43:42,150
run out of time now we're at the end of

00:43:39,930 --> 00:43:44,980
the session so thank you thank you all

00:43:42,150 --> 00:43:50,580
very much for coming and

00:43:44,980 --> 00:43:50,580

YouTube URL: https://www.youtube.com/watch?v=MnqRbBGGfIs


