Title: How to Safely Restrict Access to Files in a Programmatic Way with Landlock? - Mickaël Salaün, ANSSI
Publication date: 2018-08-31
Playlist: Linux Security Summit North America 2018 - Vancouver
Description: 
	How to Safely Restrict Access to Files in a Programmatic Way with Landlock? - Mickaël Salaün, ANSSI

Mandatory Access Control is implemented in four major LSMs. They either identify a file with its inode attribute (SELinux and Smack) or with its path (AppArmor and Tomoyo). This techniques share a common drawback: they cannot safely be used from an unprivileged context. One of Landlock's goal is to tackle this problem with a new hybrid way to identify a file from a user-defined security policy.

After a brief recap of the main mechanisms used by Landlock (covered in LSS 2017), this talk highlight the constraints of applying an unprivileged access-control on files, what was the previous Landlock attempts, and how works the new way to programmatically describe a file access (cf. the eighth patch series of Landlock). We illustrate this with a demo of a dynamic access-control for end user. Finally, we discuss some drawbacks and how much it depends on the internal kernel implementation.

About Mickaël Salaün
Mickaël Salaün is a security researcher, software developer and open source enthusiast. He is mostly interested in Linux-based operating systems, especially from a security point of view. He works on system hardening and has built security sandboxes (e.g. StemJail) before hacking into the kernel on a new LSM called Landlock. He is currently employed by the French Network and Information Security Agency (ANSSI).
Captions: 
	00:00:00,000 --> 00:00:04,589
everyone I'm Mickelson I work with the

00:00:02,970 --> 00:00:08,250
French networking functions acute

00:00:04,589 --> 00:00:12,030
urgency and this talk is about LAN luck

00:00:08,250 --> 00:00:14,880
I talk about luck last year so I will

00:00:12,030 --> 00:00:17,310
not go through all details of the

00:00:14,880 --> 00:00:20,490
implementations but I will focus my talk

00:00:17,310 --> 00:00:23,240
on the file system access control which

00:00:20,490 --> 00:00:28,199
is pretty different than other lesson

00:00:23,240 --> 00:00:32,239
the first part is a quick recap of why

00:00:28,199 --> 00:00:34,950
one lock what it is and how it works and

00:00:32,239 --> 00:00:39,660
the second part is dedicated to with the

00:00:34,950 --> 00:00:42,300
file system part so this talk is about

00:00:39,660 --> 00:00:45,780
the eight series of the batteries which

00:00:42,300 --> 00:00:51,300
was sent in February so this new policy

00:00:45,780 --> 00:00:52,460
for now but soon and so let's start with

00:00:51,300 --> 00:00:56,820
the first part

00:00:52,460 --> 00:01:00,359
the lock is first design while the

00:00:56,820 --> 00:01:04,680
thread is to mitigate Douglas protection

00:01:00,359 --> 00:01:07,710
or backdoor in applications application

00:01:04,680 --> 00:01:09,990
may be server side of client side it may

00:01:07,710 --> 00:01:13,560
be if I compare text editor or a web

00:01:09,990 --> 00:01:16,740
server here we want to protect the user

00:01:13,560 --> 00:01:21,210
of the application against unattended

00:01:16,740 --> 00:01:25,920
access is from this applications to use

00:01:21,210 --> 00:01:29,340
the resources so really we want to slow

00:01:25,920 --> 00:01:32,549
down an attack these multiple important

00:01:29,340 --> 00:01:38,100
features Friday by unlock and the first

00:01:32,549 --> 00:01:40,860
one is to enable well to empower and in

00:01:38,100 --> 00:01:44,759
developer of applications to be able to

00:01:40,860 --> 00:01:47,960
create tailored secretary policy for the

00:01:44,759 --> 00:01:51,770
needs so some use cases

00:01:47,960 --> 00:01:55,680
for example this may be used to create

00:01:51,770 --> 00:01:59,670
security model which fits best your

00:01:55,680 --> 00:02:04,829
application it's also it is also useful

00:01:59,670 --> 00:02:07,649
to omit it the secret ability in your

00:02:04,829 --> 00:02:10,110
application this way it is easier when

00:02:07,649 --> 00:02:12,000
your debt obligations to update as well

00:02:10,110 --> 00:02:13,200
sector policy which is tied to the

00:02:12,000 --> 00:02:15,650
application

00:02:13,200 --> 00:02:18,920
and then for example and maybe useful

00:02:15,650 --> 00:02:22,800
for the user to of only want

00:02:18,920 --> 00:02:24,690
configuration file which integrates well

00:02:22,800 --> 00:02:28,640
the features of your application and

00:02:24,690 --> 00:02:33,450
some security properties to another one

00:02:28,640 --> 00:02:35,370
important feature is the ability to

00:02:33,450 --> 00:02:40,730
compose different access control on the

00:02:35,370 --> 00:02:44,340
same system for example on an end-user

00:02:40,730 --> 00:02:46,580
computer you may find a system setter

00:02:44,340 --> 00:02:51,360
which want to enforce some Civic ability

00:02:46,580 --> 00:02:56,220
also one or multiple end-users which may

00:02:51,360 --> 00:02:59,670
want to relate the activities and also

00:02:56,220 --> 00:03:02,610
while the picture the basic applications

00:02:59,670 --> 00:03:04,349
the user is using which may want to

00:03:02,610 --> 00:03:06,900
sandbox application to make them more

00:03:04,349 --> 00:03:10,230
secure which is for example case for

00:03:06,900 --> 00:03:14,610
some web browsers and may also be useful

00:03:10,230 --> 00:03:18,690
for multiple cloud services which may

00:03:14,610 --> 00:03:23,190
have been Perkins another important

00:03:18,690 --> 00:03:27,060
feature is ability to update if it is

00:03:23,190 --> 00:03:30,030
deemed necessary the applicable the

00:03:27,060 --> 00:03:31,799
access control on the fly this may be

00:03:30,030 --> 00:03:33,780
really useful for example to implement

00:03:31,799 --> 00:03:38,459
some power box support on your

00:03:33,780 --> 00:03:41,700
application so this is the PO box means

00:03:38,459 --> 00:03:44,480
an ability for sandbox application to

00:03:41,700 --> 00:03:49,530
access resources outside of the sandbox

00:03:44,480 --> 00:03:53,100
it may be seen as for any for an end

00:03:49,530 --> 00:03:58,769
user as a Phi picker for example you may

00:03:53,100 --> 00:04:01,620
find in such per box in Mac OS on weeds

00:03:58,769 --> 00:04:05,849
or even on Linux with a flat pack or

00:04:01,620 --> 00:04:11,510
snappy which may have names love like

00:04:05,849 --> 00:04:14,849
bottles and another example may be to

00:04:11,510 --> 00:04:18,169
update a security policy according to

00:04:14,849 --> 00:04:21,000
some external factors like for example

00:04:18,169 --> 00:04:25,200
user behavior application behavior

00:04:21,000 --> 00:04:26,830
changes of example the time for example

00:04:25,200 --> 00:04:31,180
office hours or

00:04:26,830 --> 00:04:35,340
I said since access let's first start

00:04:31,180 --> 00:04:36,599
with simple demonstration so here it is

00:04:35,340 --> 00:04:40,449
[Music]

00:04:36,599 --> 00:04:42,699
we are submitting a web server so there

00:04:40,449 --> 00:04:45,159
is multiple paths which should be

00:04:42,699 --> 00:04:49,449
accessible in a read only way and some

00:04:45,159 --> 00:04:51,819
which which need to be XML in a weed and

00:04:49,449 --> 00:04:55,150
might work for example slash public

00:04:51,819 --> 00:04:58,659
which contain the most of the web files

00:04:55,150 --> 00:05:01,000
/ TG slash versa and the /tmp which

00:04:58,659 --> 00:05:03,180
should be accessible in a weed and white

00:05:01,000 --> 00:05:03,180
way

00:05:03,810 --> 00:05:09,520
so here I will not launch a web server

00:05:07,030 --> 00:05:14,139
but instead we launched a shell which is

00:05:09,520 --> 00:05:15,580
easier for the general session so we are

00:05:14,139 --> 00:05:17,979
in the /bin directory

00:05:15,580 --> 00:05:22,360
so you can see there's multiple files in

00:05:17,979 --> 00:05:27,699
here that we web ones but now this one

00:05:22,360 --> 00:05:30,550
website so I created index dot HTML file

00:05:27,699 --> 00:05:33,009
and then I will launch a user

00:05:30,550 --> 00:05:38,400
applications which is a sunblock sir

00:05:33,009 --> 00:05:41,349
well but sandbox helper which take

00:05:38,400 --> 00:05:43,240
multiple arguments the first one is a

00:05:41,349 --> 00:05:46,330
list of paths which should be accessible

00:05:43,240 --> 00:05:48,370
in read only one you know second one is

00:05:46,330 --> 00:05:51,789
a list of paths which should be

00:05:48,370 --> 00:05:54,190
accessible in a weed and might way use

00:05:51,789 --> 00:06:01,090
alone alpha he is here is called Nanak

00:05:54,190 --> 00:06:03,370
one and we it will launch a bin - now we

00:06:01,090 --> 00:06:06,669
are in a sandbox process so we are in

00:06:03,370 --> 00:06:08,860
the shell but in the sandbox and we

00:06:06,669 --> 00:06:09,449
still can list the files in the same

00:06:08,860 --> 00:06:13,180
directory

00:06:09,449 --> 00:06:18,729
however you may notice that there is

00:06:13,180 --> 00:06:22,629
some access which are denied example the

00:06:18,729 --> 00:06:29,889
directory is denied which is in fact the

00:06:22,629 --> 00:06:35,259
statutory and of course we cannot write

00:06:29,889 --> 00:06:37,479
on the files no and but we still can go

00:06:35,259 --> 00:06:40,710
to the temple actually see what's inside

00:06:37,479 --> 00:06:40,710
and create some fire

00:06:40,990 --> 00:06:47,659
and still the surgery is not accessible

00:06:44,210 --> 00:06:53,330
but we cannot do a stat hunt and we can

00:06:47,659 --> 00:06:58,460
not go into it neither even listen other

00:06:53,330 --> 00:06:59,150
properties so others it works in a

00:06:58,460 --> 00:07:01,370
nutshell

00:06:59,150 --> 00:07:04,819
well this diagram gives you the

00:07:01,370 --> 00:07:07,520
intuition of how it works

00:07:04,819 --> 00:07:10,909
basically it's pretty similar to how

00:07:07,520 --> 00:07:16,099
second box how second can apply as you

00:07:10,909 --> 00:07:17,810
keep security policy the process while

00:07:16,099 --> 00:07:22,669
the first process which one to sandbox

00:07:17,810 --> 00:07:26,840
itself create a security policy and load

00:07:22,669 --> 00:07:30,110
it in the kernel so this policy is a set

00:07:26,840 --> 00:07:32,830
of general programs which may be

00:07:30,110 --> 00:07:36,550
triggered for some specific action and

00:07:32,830 --> 00:07:40,610
can only restrict the process which

00:07:36,550 --> 00:07:44,840
loaded it that's the first simple

00:07:40,610 --> 00:07:48,069
example so if this process won't recall

00:07:44,840 --> 00:07:51,889
the open siskel accessify

00:07:48,069 --> 00:07:55,099
this set of programs we'll take a look

00:07:51,889 --> 00:08:02,990
take a look at this request and allow or

00:07:55,099 --> 00:08:06,380
deny in the access nanak is well made

00:08:02,990 --> 00:08:08,840
with multiple important part of the link

00:08:06,380 --> 00:08:12,650
scale so first one is a unique security

00:08:08,840 --> 00:08:15,979
model framework which provide a way to

00:08:12,650 --> 00:08:20,659
implement kernel code which is dedicated

00:08:15,979 --> 00:08:23,960
to enforce security policy on using

00:08:20,659 --> 00:08:29,419
space there's a lot of security hooks

00:08:23,960 --> 00:08:33,589
more than 200 the second big part of run

00:08:29,419 --> 00:08:35,779
lock is the use of EB PF so the extent

00:08:33,589 --> 00:08:37,640
declare packet filter is an internal

00:08:35,779 --> 00:08:43,490
virtual machine which is dedicated to

00:08:37,640 --> 00:08:46,010
run while or interpret safely code by

00:08:43,490 --> 00:08:49,210
code in the canal at runtime you can

00:08:46,010 --> 00:08:54,760
load it and load it it is really it is

00:08:49,210 --> 00:08:57,070
use mainly nowadays in the network part

00:08:54,760 --> 00:09:02,730
of the kernel but also on the tracing

00:08:57,070 --> 00:09:04,900
part and some other project our current

00:09:02,730 --> 00:09:07,510
Tory important properties about this

00:09:04,900 --> 00:09:09,640
veto machine is that you can call

00:09:07,510 --> 00:09:11,710
dedicated functions in the Canon which

00:09:09,640 --> 00:09:14,110
are dedicated from one type of program

00:09:11,710 --> 00:09:18,490
and there is a way to exchange

00:09:14,110 --> 00:09:22,839
information between two EB program and 1

00:09:18,490 --> 00:09:27,520
GB per gram with user space process so

00:09:22,839 --> 00:09:32,410
this kind of new IPC here Lana brings a

00:09:27,520 --> 00:09:36,760
set of books which are dedicated to set

00:09:32,410 --> 00:09:39,970
of actions for specific and objects for

00:09:36,760 --> 00:09:42,700
the pertinent facts there so a set of

00:09:39,970 --> 00:09:45,970
program which I in fact ebps program but

00:09:42,700 --> 00:09:49,720
dedicated to unlock this can this

00:09:45,970 --> 00:09:53,920
program can be stacked on Reznik books

00:09:49,720 --> 00:09:58,720
and they may be interpreted triggered

00:09:53,920 --> 00:10:01,210
when the properties ask to be triggered

00:09:58,720 --> 00:10:09,640
for a specific action for example read

00:10:01,210 --> 00:10:11,770
write or subtraction so really here why

00:10:09,640 --> 00:10:15,400
not add a new layer of security it is

00:10:11,770 --> 00:10:19,230
not mean to replace in unison but the

00:10:15,400 --> 00:10:24,240
goal is to provide a new way to enforce

00:10:19,230 --> 00:10:27,640
and to secure your application ecosystem

00:10:24,240 --> 00:10:33,490
so it is on top what should be used on

00:10:27,640 --> 00:10:35,440
top of other security matters a very

00:10:33,490 --> 00:10:40,870
important part of run lock is ability to

00:10:35,440 --> 00:10:43,180
be used by intelligences so this is

00:10:40,870 --> 00:10:48,310
quite challenging because it's not the

00:10:43,180 --> 00:10:50,950
case for also processes for other SM so

00:10:48,310 --> 00:10:55,510
this two main challenges here the first

00:10:50,950 --> 00:10:58,870
one is to protect hostesses from the

00:10:55,510 --> 00:11:01,330
applications which are sandboxed so for

00:10:58,870 --> 00:11:02,770
this a process which which one to some

00:11:01,330 --> 00:11:04,839
blocks an application

00:11:02,770 --> 00:11:08,500
need to be able to pee trace this

00:11:04,839 --> 00:11:13,120
process so this means that it is not a

00:11:08,500 --> 00:11:16,020
threat that if this process in person it

00:11:13,120 --> 00:11:19,240
is possible if the recruiting process

00:11:16,020 --> 00:11:24,640
impersonate the Sunbird process is

00:11:19,240 --> 00:11:26,260
already a lot but isn't only a need to

00:11:24,640 --> 00:11:28,540
protect user space also the need to

00:11:26,260 --> 00:11:32,589
protect the camera and especially to

00:11:28,540 --> 00:11:35,550
prevent intentionally in fact an EB

00:11:32,589 --> 00:11:38,790
prefer an MVP program should not have

00:11:35,550 --> 00:11:41,800
access to informations not otherwise

00:11:38,790 --> 00:11:45,399
accessible to the proko to the process

00:11:41,800 --> 00:11:51,880
Lucas requesting this unboxing otherwise

00:11:45,399 --> 00:11:53,830
we'll have a village escalation another

00:11:51,880 --> 00:11:58,540
important aspect is to avoid side

00:11:53,830 --> 00:12:02,220
channel which may be for example avoided

00:11:58,540 --> 00:12:07,630
by only interpreted typical program

00:12:02,220 --> 00:12:10,690
after well on objects which are viewable

00:12:07,630 --> 00:12:14,440
by the process which requested this

00:12:10,690 --> 00:12:19,000
unboxing and of course after other

00:12:14,440 --> 00:12:22,600
lesson it is a kind of discretionary

00:12:19,000 --> 00:12:27,510
access control but not really because it

00:12:22,600 --> 00:12:31,959
is implemented by the developer and

00:12:27,510 --> 00:12:35,980
another important aspect is the need to

00:12:31,959 --> 00:12:43,690
be able to account canal resources which

00:12:35,980 --> 00:12:45,730
I use by this new access controls so now

00:12:43,690 --> 00:12:49,209
let's take a look at the second part

00:12:45,730 --> 00:12:51,250
which is dedicated to the file system so

00:12:49,209 --> 00:12:54,670
why and how the file system access

00:12:51,250 --> 00:13:00,880
control is different between Ladakh and

00:12:54,670 --> 00:13:04,180
other a lesson first there's two kind of

00:13:00,880 --> 00:13:06,520
way to enforce an access control on the

00:13:04,180 --> 00:13:09,040
file system first

00:13:06,520 --> 00:13:13,060
you may use excel attributes which is a

00:13:09,040 --> 00:13:14,690
way to tag to label files but humor so

00:13:13,060 --> 00:13:18,709
only use path

00:13:14,690 --> 00:13:22,670
so let's hear the first way the external

00:13:18,709 --> 00:13:28,190
attributes which are in each files where

00:13:22,670 --> 00:13:29,930
well there are method metadata fully

00:13:28,190 --> 00:13:33,250
interesting because the natives the

00:13:29,930 --> 00:13:39,110
color easily be easily accessible and

00:13:33,250 --> 00:13:43,819
efficient but for well unlock says some

00:13:39,110 --> 00:13:47,089
drawbacks first well it is not possible

00:13:43,819 --> 00:13:49,639
to use excel attributes to achieve calm

00:13:47,089 --> 00:13:56,949
possibility to implement different

00:13:49,639 --> 00:14:00,379
sector policy and run them side by side

00:13:56,949 --> 00:14:02,870
because only one level per file which

00:14:00,379 --> 00:14:07,399
means is mainly one view of the file

00:14:02,870 --> 00:14:10,040
system by kana magnet all if you do

00:14:07,399 --> 00:14:12,759
multiple adings bimal's and use

00:14:10,040 --> 00:14:15,350
namespaces in container for example well

00:14:12,759 --> 00:14:19,639
the file which may have different paths

00:14:15,350 --> 00:14:25,459
will only have one inode then only one

00:14:19,639 --> 00:14:29,930
level for the infinite paths well we

00:14:25,459 --> 00:14:33,680
need to be able to account which process

00:14:29,930 --> 00:14:38,329
sandbox well created sandbox sandbox

00:14:33,680 --> 00:14:40,699
safety policy also if you want to use

00:14:38,329 --> 00:14:43,970
exchange attributes the first time using

00:14:40,699 --> 00:14:47,410
need to support ease which me which is

00:14:43,970 --> 00:14:50,509
not the case for every file system and

00:14:47,410 --> 00:14:52,699
last but not least if you want to level

00:14:50,509 --> 00:14:55,660
file you need to be able to write on

00:14:52,699 --> 00:14:59,689
this file system which should not be a

00:14:55,660 --> 00:15:02,630
good thing for introduces we don't want

00:14:59,689 --> 00:15:06,709
a user to be able to write anything on

00:15:02,630 --> 00:15:11,149
the file system of you of course and for

00:15:06,709 --> 00:15:13,370
the dynamic parts well you may not want

00:15:11,149 --> 00:15:17,959
to impose a persistent labeling on the

00:15:13,370 --> 00:15:23,689
file system but may prepare to label on

00:15:17,959 --> 00:15:26,930
the fly about the file paths so there's

00:15:23,689 --> 00:15:27,750
a way to enforce an example on the

00:15:26,930 --> 00:15:31,740
candle

00:15:27,750 --> 00:15:33,899
to create a NSM well first it is really

00:15:31,740 --> 00:15:36,540
interesting because it is a point of

00:15:33,899 --> 00:15:40,860
view of the user so really reflect the

00:15:36,540 --> 00:15:44,490
view of what you want to apply in aiesec

00:15:40,860 --> 00:15:47,839
controller but for unlock system

00:15:44,490 --> 00:15:52,430
drawbacks first the compositor

00:15:47,839 --> 00:15:56,129
composability well for every file access

00:15:52,430 --> 00:15:59,730
we need to remember how this file was

00:15:56,129 --> 00:16:03,089
accessed because you may use diamonds

00:15:59,730 --> 00:16:05,370
namespaces and multiple add links well

00:16:03,089 --> 00:16:10,800
this beautiful way to access file

00:16:05,370 --> 00:16:15,569
so multiple paths four or five and for

00:16:10,800 --> 00:16:23,250
the infrared part well we need to deal

00:16:15,569 --> 00:16:25,500
with some underlying inodes stuff which

00:16:23,250 --> 00:16:27,959
may be tricky like for example accessing

00:16:25,500 --> 00:16:32,189
a file with a partial parts example if

00:16:27,959 --> 00:16:35,069
you using the open at Cisco you get a

00:16:32,189 --> 00:16:40,199
file descriptor and then you add a part

00:16:35,069 --> 00:16:43,350
read a relative file path you must so

00:16:40,199 --> 00:16:46,079
use anonymous annals shoot online spaces

00:16:43,350 --> 00:16:48,029
so this all can be tricky to implement a

00:16:46,079 --> 00:16:51,899
nice control with this control

00:16:48,029 --> 00:16:54,899
constraints of course is the risk of

00:16:51,899 --> 00:16:56,879
freaking pass information because well

00:16:54,899 --> 00:17:01,470
you cannot assume that this unboxing

00:16:56,879 --> 00:17:03,509
process is trusted you don't want this

00:17:01,470 --> 00:17:05,640
process to be able to gather more

00:17:03,509 --> 00:17:08,089
information that then you should

00:17:05,640 --> 00:17:10,819
normally have access to

00:17:08,089 --> 00:17:19,799
talking about the death of the death of

00:17:10,819 --> 00:17:22,589
a file or some underlying directory so

00:17:19,799 --> 00:17:28,710
the idea with unlock is to create a new

00:17:22,589 --> 00:17:32,789
ebf map which is called Nidal map so you

00:17:28,710 --> 00:17:37,740
may see a map as asthma so most of the

00:17:32,789 --> 00:17:40,409
time it is in a way with a key n value

00:17:37,740 --> 00:17:42,100
but what multiple entries with key and

00:17:40,409 --> 00:17:45,529
values

00:17:42,100 --> 00:17:52,509
the idea is here is to create a digital

00:17:45,529 --> 00:17:55,730
map to be able to identify an inode and

00:17:52,509 --> 00:18:03,289
tied and I note with an ability value

00:17:55,730 --> 00:18:07,220
like a lab in practice this map is

00:18:03,289 --> 00:18:11,269
filled with file descriptors but in the

00:18:07,220 --> 00:18:13,129
map the Falla scepter is not stored or

00:18:11,269 --> 00:18:16,220
needy I knows which is referenced by

00:18:13,129 --> 00:18:20,419
this file descriptor this way it is easy

00:18:16,220 --> 00:18:23,210
to fill them up but still to fill them

00:18:20,419 --> 00:18:28,429
up you need to first have access to this

00:18:23,210 --> 00:18:31,100
file to the file descriptor because we

00:18:28,429 --> 00:18:33,619
deal with I note it is quite efficient

00:18:31,100 --> 00:18:38,739
too much and I know that you know if an

00:18:33,619 --> 00:18:41,179
access much unknown I not or not and

00:18:38,739 --> 00:18:44,960
because it is an EDF map it can be

00:18:41,179 --> 00:18:48,980
updated by user space on the fly if you

00:18:44,960 --> 00:18:53,289
space one to keep the map open otherwise

00:18:48,980 --> 00:18:56,830
it is easy to lock the map and of course

00:18:53,289 --> 00:19:00,200
well it is usable by encourage processes

00:18:56,830 --> 00:19:07,369
because it is again an immediate map

00:19:00,200 --> 00:19:10,869
later so here we achieve a way to

00:19:07,369 --> 00:19:14,869
identify an inode and not store any

00:19:10,869 --> 00:19:18,970
information on the file system but still

00:19:14,869 --> 00:19:23,330
we can account how much memory takes and

00:19:18,970 --> 00:19:27,350
while which process requested this

00:19:23,330 --> 00:19:31,700
memory and as I said before we are now

00:19:27,350 --> 00:19:34,220
able to tag any inodes but this is not

00:19:31,700 --> 00:19:37,879
tagging the fastest time earning only

00:19:34,220 --> 00:19:42,529
the the files in the memory when the

00:19:37,879 --> 00:19:45,619
tagging only stay in memory so now let's

00:19:42,529 --> 00:19:49,070
see another demonstration which is about

00:19:45,619 --> 00:19:51,850
lateen and access on the file access

00:19:49,070 --> 00:19:51,850
control on the fly

00:19:54,300 --> 00:20:06,670
so here these two shell the first one

00:20:02,250 --> 00:20:11,320
will be the one which will be Sun boxed

00:20:06,670 --> 00:20:13,660
and at the bottom you can see another

00:20:11,320 --> 00:20:17,830
shell which be which will be used to

00:20:13,660 --> 00:20:23,170
update to some dogs on the fly so first

00:20:17,830 --> 00:20:27,040
here I use a first M which is dedicated

00:20:23,170 --> 00:20:30,790
to BPF to be able to pin either a BBF

00:20:27,040 --> 00:20:35,770
program or a BBF map but this was a way

00:20:30,790 --> 00:20:40,690
too late then I run almost the same

00:20:35,770 --> 00:20:45,970
sandbox sandbox where we should before

00:20:40,690 --> 00:20:49,000
we seen before so the list of files

00:20:45,970 --> 00:20:51,670
which are in read-only way and the list

00:20:49,000 --> 00:20:55,120
of paths which are accessible in a read

00:20:51,670 --> 00:21:00,160
and write way but there also a new path

00:20:55,120 --> 00:21:05,260
and your arguments which which say where

00:21:00,160 --> 00:21:09,190
we should pin the BBF map and then we

00:21:05,260 --> 00:21:12,370
run the shell so now we are in sandbox

00:21:09,190 --> 00:21:16,810
and you can see well we can still access

00:21:12,370 --> 00:21:20,470
of ours but yours you can see well some

00:21:16,810 --> 00:21:23,170
stuff here but not really great because

00:21:20,470 --> 00:21:28,390
we there's no mapping between UID and

00:21:23,170 --> 00:21:31,540
user so do you know why we cannot see

00:21:28,390 --> 00:21:37,120
the root here and we only see veggie

00:21:31,540 --> 00:21:41,560
zero because something is missing in

00:21:37,120 --> 00:21:45,640
fact well it is the same for the prompt

00:21:41,560 --> 00:21:47,890
there is no user name because two files

00:21:45,640 --> 00:21:52,000
are missing first one is e.t.c password

00:21:47,890 --> 00:21:54,820
and it is a group so what we can add

00:21:52,000 --> 00:21:59,460
them on the fly wise thing bringing the

00:21:54,820 --> 00:22:04,169
sandbox in the sandbox so here I call

00:21:59,460 --> 00:22:09,089
I launched another helper which sole

00:22:04,169 --> 00:22:14,070
purpose is to update the NOC inode map

00:22:09,089 --> 00:22:17,339
and here to Al Kooper so now without

00:22:14,070 --> 00:22:21,509
relaunching the sandbox well the new

00:22:17,339 --> 00:22:24,479
access are granted but of course if you

00:22:21,509 --> 00:22:28,429
want to have a new nice prompt you need

00:22:24,479 --> 00:22:36,089
to exactly again a bash because it is a

00:22:28,429 --> 00:22:42,779
shell limitation ok so let's see how it

00:22:36,089 --> 00:22:45,539
works there is two kind to type up from

00:22:42,779 --> 00:22:47,669
a program for now the first one is

00:22:45,539 --> 00:22:50,789
dedicated to is dedicated to work

00:22:47,669 --> 00:22:54,960
through the file system to walk through

00:22:50,789 --> 00:22:58,049
the actual and the other type of program

00:22:54,960 --> 00:23:00,899
is dedicated to a lower deny ascetic

00:22:58,049 --> 00:23:03,779
action a read or write so the first one

00:23:00,899 --> 00:23:08,249
here is a get to go through the deck

00:23:03,779 --> 00:23:12,059
toys and identify a path so you can see

00:23:08,249 --> 00:23:15,299
it as a state machine this program the

00:23:12,059 --> 00:23:19,440
vet FS walk program can then pass a

00:23:15,299 --> 00:23:22,289
state to another one if it is a file

00:23:19,440 --> 00:23:24,659
access see here it is a file pick which

00:23:22,289 --> 00:23:27,330
the first one is a trigger for open

00:23:24,659 --> 00:23:32,639
third year and gas to get attribute so

00:23:27,330 --> 00:23:35,309
made mainly read only accesses and it

00:23:32,639 --> 00:23:40,320
was alone which also and Facebook can be

00:23:35,309 --> 00:23:42,690
chained to the troopers and this third

00:23:40,320 --> 00:23:46,769
program will only be triggered for

00:23:42,690 --> 00:23:48,779
specific right actions so let's see with

00:23:46,769 --> 00:23:54,839
an example we have here at the bottom

00:23:48,779 --> 00:23:58,950
and BBF not which with free file free a

00:23:54,839 --> 00:24:03,269
no /c / public and /tmp and a number to

00:23:58,950 --> 00:24:05,969
a value which is kind of Italian so if

00:24:03,269 --> 00:24:10,629
we're working through / public / web

00:24:05,969 --> 00:24:15,379
slash index dot HTML well the first

00:24:10,629 --> 00:24:18,080
file which will be seen by the PPF Oh

00:24:15,379 --> 00:24:22,340
Graham will be the slashed jaggery

00:24:18,080 --> 00:24:25,399
so here the FS work is first one says

00:24:22,340 --> 00:24:28,519
the first invocation interpretation of

00:24:25,399 --> 00:24:31,249
this problem but because the slash is

00:24:28,519 --> 00:24:35,389
not in the map what it is not now so

00:24:31,249 --> 00:24:40,970
nothing nothing happen then when we go

00:24:35,389 --> 00:24:45,200
through the pass / public degree is sin

00:24:40,970 --> 00:24:48,440
and this directory is present in the BBF

00:24:45,200 --> 00:24:51,350
na so it match and then the FS world

00:24:48,440 --> 00:24:55,580
program can then tag and change it

00:24:51,350 --> 00:25:00,080
states then you can pass its states

00:24:55,580 --> 00:25:03,710
through available in the context code

00:25:00,080 --> 00:25:09,409
here cooking so in this example it is

00:25:03,710 --> 00:25:15,289
really simple one and it only said the

00:25:09,409 --> 00:25:18,129
death of the path then there is a web

00:25:15,289 --> 00:25:21,919
directory so the web again is not

00:25:18,129 --> 00:25:25,759
referenced by the map but the best world

00:25:21,919 --> 00:25:28,039
knows that it was seen before well one

00:25:25,759 --> 00:25:32,350
of the files was in before so we are

00:25:28,039 --> 00:25:35,480
still in this fight hierarchy and then

00:25:32,350 --> 00:25:40,700
finally we reach the index that judge

00:25:35,480 --> 00:25:45,769
them so the final target and the FS peak

00:25:40,700 --> 00:25:49,429
can look for the state of this chain of

00:25:45,769 --> 00:25:52,490
organs and well if it is not 0 you can

00:25:49,429 --> 00:25:57,350
accept it so again it is a really simple

00:25:52,490 --> 00:26:01,549
example to illustrate the way to

00:25:57,350 --> 00:26:06,049
identify a file and then this problem

00:26:01,549 --> 00:26:10,879
can allow the access so this is why to

00:26:06,049 --> 00:26:13,820
identify a pass as many Adam Adam Jersey

00:26:10,879 --> 00:26:16,009
at advantages for an unlock the first

00:26:13,820 --> 00:26:20,029
one is to be completely agnostic to

00:26:16,009 --> 00:26:22,950
shoot on all namespaces there is no need

00:26:20,029 --> 00:26:26,040
for extra information which are

00:26:22,950 --> 00:26:31,590
not already arable to the requestor

00:26:26,040 --> 00:26:34,799
process it's easy to account how much

00:26:31,590 --> 00:26:37,440
resources I use it is up the table on

00:26:34,799 --> 00:26:40,740
the fly do not rely on stream mapping

00:26:37,440 --> 00:26:47,130
which may introduce a lot of security

00:26:40,740 --> 00:26:50,850
issues and but we can still detect fire

00:26:47,130 --> 00:26:54,420
Rockies but this material multiple way

00:26:50,850 --> 00:26:58,530
to do it here was only an example simple

00:26:54,420 --> 00:27:01,410
one and also because it is full in

00:26:58,530 --> 00:27:05,580
village and fully in userspace it is

00:27:01,410 --> 00:27:08,760
with it is quite easy to test this kind

00:27:05,580 --> 00:27:13,470
of security policies but there's some

00:27:08,760 --> 00:27:18,030
drawbacks so first one is what the main

00:27:13,470 --> 00:27:21,030
one is that this past identification

00:27:18,030 --> 00:27:24,540
rely on the way the canal those past

00:27:21,030 --> 00:27:27,600
name lookup so mainly how does it

00:27:24,540 --> 00:27:32,190
resolve an same link the dot of the

00:27:27,600 --> 00:27:35,010
directories and also I needed to add a

00:27:32,190 --> 00:27:42,540
60 block to name it data which is used

00:27:35,010 --> 00:27:45,750
to record in which pass work we are so

00:27:42,540 --> 00:27:50,700
this is some concern from some ofsome

00:27:45,750 --> 00:27:53,160
developers because this might rely too

00:27:50,700 --> 00:27:56,760
much on the current past name lookup

00:27:53,160 --> 00:27:59,940
implementation which changes change

00:27:56,760 --> 00:28:04,049
multiple times but this seems to be

00:27:59,940 --> 00:28:10,940
quite stable now so you can take a look

00:28:04,049 --> 00:28:15,660
at some others in the FS directory and

00:28:10,940 --> 00:28:19,850
well I think this logic made a change

00:28:15,660 --> 00:28:24,169
but why now it is already viewable

00:28:19,850 --> 00:28:27,690
visible to user space and especially to

00:28:24,169 --> 00:28:31,050
discovery access control and also LSM

00:28:27,690 --> 00:28:34,590
which may indirectly rely on the way the

00:28:31,050 --> 00:28:37,669
pass are resolved and of course the

00:28:34,590 --> 00:28:43,589
user-defined pretties

00:28:37,669 --> 00:28:47,699
so to wrap up land lock here is a user

00:28:43,589 --> 00:28:50,159
space add-on which is a permanent way to

00:28:47,699 --> 00:28:52,889
create security policies and embedded

00:28:50,159 --> 00:28:56,489
them in your applications and it is

00:28:52,889 --> 00:28:59,399
designed to be used as well

00:28:56,489 --> 00:29:02,009
it is it allowed and village processes

00:28:59,399 --> 00:29:08,759
to use it this way you don't have to

00:29:02,009 --> 00:29:15,119
have su ID process binary and so on so

00:29:08,759 --> 00:29:19,309
actually I am currently this around 2000

00:29:15,119 --> 00:29:22,829
single line of code which is not much

00:29:19,309 --> 00:29:24,779
this on green batteries so you can fold

00:29:22,829 --> 00:29:28,859
them on the L channel or on my Twitter

00:29:24,779 --> 00:29:35,279
account so the main concern right now I

00:29:28,859 --> 00:29:38,399
think is the past name lookup but one

00:29:35,279 --> 00:29:41,879
good thing which is coming up flick is a

00:29:38,399 --> 00:29:43,379
way to stack multiple LS m which we

00:29:41,879 --> 00:29:47,789
which of course will be really useful

00:29:43,379 --> 00:29:50,699
for an unlock because this row which

00:29:47,789 --> 00:29:54,479
implements well which use selinux

00:29:50,699 --> 00:29:59,519
Obama or SM will then be able to use

00:29:54,479 --> 00:30:05,190
unlock as well so this multiple feature

00:29:59,519 --> 00:30:07,319
works just to sit aside some of them the

00:30:05,190 --> 00:30:10,889
audits supports to be able to have any

00:30:07,319 --> 00:30:15,179
more minimal added support but this may

00:30:10,889 --> 00:30:17,569
be a bit tricky of course to extend the

00:30:15,179 --> 00:30:20,959
second control through multiple

00:30:17,569 --> 00:30:24,989
subsystem like the network and a PC

00:30:20,959 --> 00:30:29,969
maybe to create wheeling capabilities

00:30:24,989 --> 00:30:32,969
for Linux and of course to have decent

00:30:29,969 --> 00:30:37,529
library and tools to implement security

00:30:32,969 --> 00:30:39,529
policy easily and of course all this

00:30:37,529 --> 00:30:42,779
will not be possible with use without

00:30:39,529 --> 00:30:45,509
kernel developer reviews so if you want

00:30:42,779 --> 00:30:47,190
to take a look after no luck please do

00:30:45,509 --> 00:30:49,530
it

00:30:47,190 --> 00:30:53,300
thank you very much and if you have any

00:30:49,530 --> 00:30:53,300
questions I'd be pleased to answer them

00:30:55,610 --> 00:31:03,810
[Applause]

00:31:04,190 --> 00:31:08,310
thanks

00:31:05,550 --> 00:31:10,980
do you have a an example of our map that

00:31:08,310 --> 00:31:13,560
you could show us like what the policy

00:31:10,980 --> 00:31:18,630
looks like or is it a buying yeah I can

00:31:13,560 --> 00:31:26,370
show you an example so it is a see

00:31:18,630 --> 00:31:30,300
example this is one okay so I need to go

00:31:26,370 --> 00:31:32,780
quickly but mainly the first Union here

00:31:30,300 --> 00:31:35,690
is a way to ascribe some property of

00:31:32,780 --> 00:31:38,250
another program an immediate program

00:31:35,690 --> 00:31:40,350
first I need to describe the tablet

00:31:38,250 --> 00:31:44,310
program which is for example an FSB

00:31:40,350 --> 00:31:48,330
program then some options I mean that

00:31:44,310 --> 00:31:52,500
goes with too much deeply into that the

00:31:48,330 --> 00:31:55,740
chaining so which program was chained

00:31:52,500 --> 00:31:58,410
before like we saw in the example who

00:31:55,740 --> 00:32:00,260
may have in the program chain and some

00:31:58,410 --> 00:32:02,850
triggers so you want this form to be

00:32:00,260 --> 00:32:07,650
triggered for a pen create and so on

00:32:02,850 --> 00:32:10,740
action and the main program mail looks

00:32:07,650 --> 00:32:14,720
like this but is what these multiple

00:32:10,740 --> 00:32:19,340
lines which are in the update cookie

00:32:14,720 --> 00:32:22,350
functions but while you can take a look

00:32:19,340 --> 00:32:24,720
at the code for example on take a look

00:32:22,350 --> 00:32:29,880
at an unlock the tayo and use the code

00:32:24,720 --> 00:32:33,330
so we'll code but well so let's say this

00:32:29,880 --> 00:32:37,250
program is one that a low or denying

00:32:33,330 --> 00:32:40,710
access to right up to a write operation

00:32:37,250 --> 00:32:43,430
so it take the value of the cookie like

00:32:40,710 --> 00:32:46,650
we saw before in the chaining operation

00:32:43,430 --> 00:32:50,760
it update the cookie so if this if the

00:32:46,650 --> 00:32:56,030
cookies do well you will stay 0 except

00:32:50,760 --> 00:33:00,390
if the inode which is here in the

00:32:56,030 --> 00:33:05,070
contacts argument is present in the BPF

00:33:00,390 --> 00:33:08,790
map otherwise it will increase the

00:33:05,070 --> 00:33:13,770
cookie well it is a way to identify the

00:33:08,790 --> 00:33:18,840
file path and in this example I Mac I

00:33:13,770 --> 00:33:24,630
add Mac to the cookie to say ok I saw

00:33:18,840 --> 00:33:27,540
this inode and it was in the set of my

00:33:24,630 --> 00:33:32,160
inode which is a load to be accessible

00:33:27,540 --> 00:33:32,990
in a white one and if this okay is well

00:33:32,160 --> 00:33:37,290
written

00:33:32,990 --> 00:33:41,250
hello otherwise it is not so that's

00:33:37,290 --> 00:33:45,450
basically the way why now you can write

00:33:41,250 --> 00:33:48,470
policy so this may not be convenient but

00:33:45,450 --> 00:33:51,810
it is really programmatic way to do it

00:33:48,470 --> 00:33:54,180
but of course you may think about more

00:33:51,810 --> 00:33:59,010
easier way to write booty and still have

00:33:54,180 --> 00:34:05,960
some programmatic way to write to do

00:33:59,010 --> 00:34:09,200
some tailored and custom security policy

00:34:05,960 --> 00:34:12,240
and then the following questions that I

00:34:09,200 --> 00:34:14,280
have seen have interpreted that you said

00:34:12,240 --> 00:34:16,500
that you can't match on specificity or

00:34:14,280 --> 00:34:22,410
file descriptors only of inodes is that

00:34:16,500 --> 00:34:25,169
right no um when I well so the map add

00:34:22,410 --> 00:34:25,830
the reference well a story front is to

00:34:25,169 --> 00:34:29,970
inode

00:34:25,830 --> 00:34:33,870
so if a process want to access a file

00:34:29,970 --> 00:34:38,669
descriptor the well unlock and the

00:34:33,870 --> 00:34:41,730
program can see the underlying inode so

00:34:38,669 --> 00:34:44,640
it walks it is interred in Internet gold

00:34:41,730 --> 00:34:47,990
but what I was talking about is when you

00:34:44,640 --> 00:34:52,169
want to fill a map with inode references

00:34:47,990 --> 00:34:54,929
just fill them up with vpf cisco and as

00:34:52,169 --> 00:34:58,740
a comment you use a file descriptor

00:34:54,929 --> 00:34:59,850
which reference the I note you want to

00:34:58,740 --> 00:35:02,640
put in the map

00:34:59,850 --> 00:35:04,710
it is really in simple way and unix way

00:35:02,640 --> 00:35:06,090
to fill a map that's here so you just

00:35:04,710 --> 00:35:08,720
need a single reference that I know

00:35:06,090 --> 00:35:08,720
right

00:35:09,210 --> 00:35:19,940
thank you okay just one more question

00:35:24,530 --> 00:35:30,890
so other Ella Sims also use extended

00:35:26,840 --> 00:35:34,370
attributes does your use of them collide

00:35:30,890 --> 00:35:37,300
in any way please

00:35:34,370 --> 00:35:40,070
other Ella Sims use extended attributes

00:35:37,300 --> 00:35:41,870
does your use collide with those at all

00:35:40,070 --> 00:35:44,840
or well how do they work

00:35:41,870 --> 00:35:49,060
no well I don't use XML attributes I

00:35:44,840 --> 00:35:53,390
only use the blob for the strict inode

00:35:49,060 --> 00:35:56,620
so for this I what to be usable with as

00:35:53,390 --> 00:36:00,890
LSM I need a way to stack the NOC with

00:35:56,620 --> 00:36:06,550
SELinux or smack for example so why not

00:36:00,890 --> 00:36:11,390
is not possible well in a clean way but

00:36:06,550 --> 00:36:13,970
with Alice I'm stacking but series it

00:36:11,390 --> 00:36:21,800
will be possible so I hope it will be a

00:36:13,970 --> 00:36:25,520
shame so okay I will move on to the

00:36:21,800 --> 00:36:28,860
subsystem updates now thanks thank you

00:36:25,520 --> 00:36:28,860

YouTube URL: https://www.youtube.com/watch?v=2i1_VGAaTIQ


