Title: Updating Linux with TUX: Trust Update for Linux Kernel - Suhho Lee & Hyunik Kim, Dankook University
Publication date: 2018-08-31
Playlist: Linux Security Summit North America 2018 - Vancouver
Description: 
	Updating Linux with TUX: Trust Update for Linux Kernel - Suhho Lee & Hyunik Kim, Dankook University

As lethal security attacks, such as Spectre and Meltdown, arise, Linux has conducted a vast number of software updates to mitigate security threats. However, less attention was given to the dynamically changing integrity of the system after updates. To maintain the trust of the platform, system updates should accompany integrity information updates as well.
We propose TUX, Trust Update for Linux kernel, to guarantee the up-to-date integrity of the pre-boot environment. TUX consolidates kernel repository into Intel's Open CIT to manage up-to-date integrity. Also, TUX deploys kernel which holds up-to-date integrity value as a signature. Finally, TUX secure bootloader mandates integrity verification at the booting using the TUX kernel, leveraging the UEFI secure boot and TPM. Thus, with TUX, Linux system can maintain trust even with the frequent updates.

About Hyunik Kim
Hyunik Kim is an enthusiastic undergraduate student in Department of Mobile Systems Engineering, Dankook University, Korea. He is currently interested in Many-core architecture, Operating systems, and System security.

About Suhho lee
Suhho Lee is a master's student in Department of Computer Science at Dankook University, Korea. His research interests include Operating systems, Computer architecture, System Security, and Human-Computer Interaction.
His current focus is TUX, Trust update for Linux kernel, which is an update management solution with robust boot-time security for Linux in UEFI environment using TPM and Intel Open CIT.
Captions: 
	00:00:00,030 --> 00:00:05,490
oh so good morning everyone and my name

00:00:03,179 --> 00:00:09,450
is Suho and I'm a master students at on

00:00:05,490 --> 00:00:12,179
University South Korea and I am the

00:00:09,450 --> 00:00:14,429
little bit nervous about like I'm the

00:00:12,179 --> 00:00:18,630
only student here I guess and everyone's

00:00:14,429 --> 00:00:21,090
like from Google Intel IBM Red Hat and I

00:00:18,630 --> 00:00:23,580
was expecting like half of these people

00:00:21,090 --> 00:00:27,090
were going to be here and a bit nervous

00:00:23,580 --> 00:00:29,039
a lot so anyway so I'm today I'm going

00:00:27,090 --> 00:00:32,520
to talk about talks or trust update on

00:00:29,039 --> 00:00:34,680
Linux kernel which is a research about

00:00:32,520 --> 00:00:37,739
maintaining integrity our system along

00:00:34,680 --> 00:00:39,860
with the frequent con updates so I'm

00:00:37,739 --> 00:00:43,559
going to talk about our little bit of

00:00:39,860 --> 00:00:46,020
related works and all type models and

00:00:43,559 --> 00:00:48,329
then I'll explain talks and show some

00:00:46,020 --> 00:00:50,190
prototype experiments and finally and

00:00:48,329 --> 00:00:53,070
I'll conclude my talk and I'll take

00:00:50,190 --> 00:00:55,559
questions at the end to begin with

00:00:53,070 --> 00:00:57,840
secure boundaries are privileged and we

00:00:55,559 --> 00:01:00,180
see thousands of new CVEs every day and

00:00:57,840 --> 00:01:02,910
for example recent announcement of the

00:01:00,180 --> 00:01:05,400
meltdown inspector has been causing a

00:01:02,910 --> 00:01:08,340
lot of troubles in the new society as

00:01:05,400 --> 00:01:11,729
well and I saw the news distros have

00:01:08,340 --> 00:01:13,500
been deploying a lot of Korea plates to

00:01:11,729 --> 00:01:14,790
countermeasure or at least mitigate

00:01:13,500 --> 00:01:19,140
those vulnerabilities

00:01:14,790 --> 00:01:20,850
however I in my opinion there was not

00:01:19,140 --> 00:01:23,759
much attention given to the changing

00:01:20,850 --> 00:01:25,890
integrity after those updates and ways

00:01:23,759 --> 00:01:29,579
to manage the updated interim

00:01:25,890 --> 00:01:31,350
informations so there are two concepts

00:01:29,579 --> 00:01:34,290
first of all the maintaining integrity

00:01:31,350 --> 00:01:36,720
and other side of security updates and

00:01:34,290 --> 00:01:38,909
in my point of view the maintaining

00:01:36,720 --> 00:01:41,570
integrity is trying to keep the system

00:01:38,909 --> 00:01:44,250
as it is and run the system as it is and

00:01:41,570 --> 00:01:46,500
on the other side the security updates

00:01:44,250 --> 00:01:50,610
tries to secure the system by modifying

00:01:46,500 --> 00:01:53,280
the system and therefore I guess the

00:01:50,610 --> 00:01:56,570
after the updates info in integrity

00:01:53,280 --> 00:02:01,799
information is inevitably changed and

00:01:56,570 --> 00:02:03,810
there's a need for managing them and we

00:02:01,799 --> 00:02:06,299
came up with these two questions first

00:02:03,810 --> 00:02:09,899
of all the can model in 30 management

00:02:06,299 --> 00:02:13,140
solutions distinguish between measures

00:02:09,899 --> 00:02:15,630
modifications and intended updates and

00:02:13,140 --> 00:02:18,870
if it does is the modify entity being

00:02:15,630 --> 00:02:20,940
properly managed to answer these

00:02:18,870 --> 00:02:22,670
questions we have investigated some of

00:02:20,940 --> 00:02:26,030
the motor entity management technologies

00:02:22,670 --> 00:02:29,520
first of all the Intel texty which

00:02:26,030 --> 00:02:33,690
employs grunt module to boot and launch

00:02:29,520 --> 00:02:36,980
control policy aka LCP to measure /

00:02:33,690 --> 00:02:40,110
verified boot the Linux environment

00:02:36,980 --> 00:02:43,500
however when it comes to the update the

00:02:40,110 --> 00:02:48,209
LCP can be a little bit of drag this is

00:02:43,500 --> 00:02:50,190
because the LCP can only represent only

00:02:48,209 --> 00:02:50,670
one state of a specific state of a

00:02:50,190 --> 00:02:53,910
machine

00:02:50,670 --> 00:02:55,950
so therefore the LCP must be also

00:02:53,910 --> 00:02:59,430
updated according to the updates and

00:02:55,950 --> 00:03:01,500
also texty does not measure or verify

00:02:59,430 --> 00:03:04,470
crop commands which can allow an

00:03:01,500 --> 00:03:09,420
attacker to modify the commands to boot

00:03:04,470 --> 00:03:13,650
into matches kernel or load a master

00:03:09,420 --> 00:03:16,590
squad module next of all the open CIT is

00:03:13,650 --> 00:03:19,590
a remote authorization solution created

00:03:16,590 --> 00:03:21,900
by Intel also to validate the TPM

00:03:19,590 --> 00:03:24,810
measurement from the remote server the

00:03:21,900 --> 00:03:27,480
Oakland CA server establishes the

00:03:24,810 --> 00:03:29,570
non-work values by importing a TPM

00:03:27,480 --> 00:03:32,340
measurements from the local systems and

00:03:29,570 --> 00:03:37,250
perform the remote test ation using

00:03:32,340 --> 00:03:39,989
those value as a root of trust I guess

00:03:37,250 --> 00:03:41,880
however the problem the open society is

00:03:39,989 --> 00:03:45,060
that the local updates are not

00:03:41,880 --> 00:03:47,310
transparent to the open SAT server which

00:03:45,060 --> 00:03:51,900
means that when the local system is

00:03:47,310 --> 00:03:54,420
updated the remote test station fails

00:03:51,900 --> 00:03:56,459
until we establish the whitelist by

00:03:54,420 --> 00:03:59,580
importing re-importing the updated

00:03:56,459 --> 00:04:02,640
measurements finally the UEFI secure

00:03:59,580 --> 00:04:05,459
boot is our interactive verification

00:04:02,640 --> 00:04:07,980
function and define the UEFI BIOS it

00:04:05,459 --> 00:04:10,650
verifies a signature of an executed

00:04:07,980 --> 00:04:14,790
binaries using the public keys stored in

00:04:10,650 --> 00:04:16,650
the formal database we found it good

00:04:14,790 --> 00:04:20,160
thing about the UEFI secure boot is that

00:04:16,650 --> 00:04:22,410
it enables simple updates since it only

00:04:20,160 --> 00:04:24,990
needs to sign the updated binaries and

00:04:22,410 --> 00:04:26,350
deploy the binaries and the receivers

00:04:24,990 --> 00:04:27,960
only need to

00:04:26,350 --> 00:04:32,800
the wineries and install them

00:04:27,960 --> 00:04:34,990
unfortunately we found we find it

00:04:32,800 --> 00:04:38,350
difficult to say that UEFI secure boot

00:04:34,990 --> 00:04:42,030
is suitable for Linux environment since

00:04:38,350 --> 00:04:47,340
it does not support grub bootloader

00:04:42,030 --> 00:04:53,320
unless they install or private key to a

00:04:47,340 --> 00:04:54,940
public key of the Installer and on the

00:04:53,320 --> 00:04:58,680
other side the Microsoft provide a

00:04:54,940 --> 00:05:00,360
public key stored in the farmers of the

00:04:58,680 --> 00:05:05,050
mainboard

00:05:00,360 --> 00:05:06,700
anyways the the other problem the efi

00:05:05,050 --> 00:05:09,370
secure boot was that it does not support

00:05:06,700 --> 00:05:11,860
crops so consequently it does not

00:05:09,370 --> 00:05:13,540
support verifying your commands which

00:05:11,860 --> 00:05:16,240
leaves the same problem of the Intel

00:05:13,540 --> 00:05:20,260
text II additionally it does not support

00:05:16,240 --> 00:05:22,810
TPM measurements so let us now take a

00:05:20,260 --> 00:05:26,260
look at how these problems can be

00:05:22,810 --> 00:05:29,140
troublesome so first of all we can

00:05:26,260 --> 00:05:32,320
subvert the open society scam scheme all

00:05:29,140 --> 00:05:35,170
the way through this occurs because the

00:05:32,320 --> 00:05:37,840
local updates are not transparent to the

00:05:35,170 --> 00:05:39,940
Oakland CA T so let's assume that the

00:05:37,840 --> 00:05:44,320
attacker can update the local machine

00:05:39,940 --> 00:05:44,710
and perform measure good so as a first

00:05:44,320 --> 00:05:48,520
step

00:05:44,710 --> 00:05:50,830
the attacker tries to success to update

00:05:48,520 --> 00:05:56,230
the local machine with the metas kernel

00:05:50,830 --> 00:05:57,730
and pull up the - measurement and TPM

00:05:56,230 --> 00:05:59,380
will measure the measures kernel

00:05:57,730 --> 00:06:02,770
creating the malicious measurement and

00:05:59,380 --> 00:06:03,970
then the open CIT who has no idea about

00:06:02,770 --> 00:06:06,280
the local updates

00:06:03,970 --> 00:06:09,870
it will try to perform the remote

00:06:06,280 --> 00:06:15,070
attestation and eventually fails and

00:06:09,870 --> 00:06:17,740
then as the local system has been

00:06:15,070 --> 00:06:20,890
updated it tries to re-import the

00:06:17,740 --> 00:06:25,110
measurements which is now gone measures

00:06:20,890 --> 00:06:30,930
and try to create a new whitelist and

00:06:25,110 --> 00:06:35,410
now the wireless becomes compromised and

00:06:30,930 --> 00:06:39,010
after this point the attacker may run

00:06:35,410 --> 00:06:39,999
the - kernel even though the second CIT

00:06:39,010 --> 00:06:45,159
confirms the

00:06:39,999 --> 00:06:47,409
the local system is trusted next we can

00:06:45,159 --> 00:06:50,619
circumvent verify first games first of

00:06:47,409 --> 00:06:54,129
all the txt can be fooled with a hyper

00:06:50,619 --> 00:06:58,089
bus route kit interest use that this was

00:06:54,129 --> 00:07:00,009
introduced at blackhat USA 6 2016 and I

00:06:58,089 --> 00:07:02,559
don't know if you guys have fixed it or

00:07:00,009 --> 00:07:05,919
not but it can be an example and also

00:07:02,559 --> 00:07:10,749
earlier this year at also at the

00:07:05,919 --> 00:07:14,399
blackhead Asia 2018 one of the team

00:07:10,749 --> 00:07:17,349
demonstrated how to support the txt scam

00:07:14,399 --> 00:07:22,269
and I think it was called I don't want

00:07:17,349 --> 00:07:26,289
to sleep tonight I guess and anyway stay

00:07:22,269 --> 00:07:28,539
with oh yes black hair USA 2016 the

00:07:26,289 --> 00:07:30,610
hypervisor ok they executed the rootkit

00:07:28,539 --> 00:07:34,049
a high purpose of rootkit that mimics

00:07:30,610 --> 00:07:37,389
TPM through the clock commands and

00:07:34,049 --> 00:07:40,869
before they load the T boot module so

00:07:37,389 --> 00:07:44,439
and they tried to so combat ext and they

00:07:40,869 --> 00:07:48,009
succeeded by running the Manchus kernel

00:07:44,439 --> 00:07:51,459
even though the TT boot verifies that

00:07:48,009 --> 00:07:53,589
the local machine is trusted also the

00:07:51,459 --> 00:07:55,769
secure boot does not verify until after

00:07:53,589 --> 00:07:58,360
the grub bootloader is executed

00:07:55,769 --> 00:08:00,459
therefore the attacker can modify

00:07:58,360 --> 00:08:03,629
commands to launch my Toscano

00:08:00,459 --> 00:08:06,519
or load other growth modules and we

00:08:03,629 --> 00:08:10,509
believe that these two attacks are

00:08:06,519 --> 00:08:12,999
caused because the txt and secure boot

00:08:10,509 --> 00:08:14,069
does not verify a secure documents

00:08:12,999 --> 00:08:17,439
during the booting

00:08:14,069 --> 00:08:19,899
so to provide proper entity management

00:08:17,439 --> 00:08:22,899
along with updates with status and goals

00:08:19,899 --> 00:08:25,179
first the remote attestations must

00:08:22,899 --> 00:08:28,089
transparently manage local updates

00:08:25,179 --> 00:08:30,819
to distinguish updates intended updates

00:08:28,089 --> 00:08:32,589
from the Manchus modification second the

00:08:30,819 --> 00:08:34,809
remote attestation must maintain

00:08:32,589 --> 00:08:38,019
whitelist according to the conducted

00:08:34,809 --> 00:08:40,769
updates and perform remote attestation

00:08:38,019 --> 00:08:43,750
using up to the wireless values and

00:08:40,769 --> 00:08:44,680
finally the local machines should

00:08:43,750 --> 00:08:47,019
perform

00:08:44,680 --> 00:08:50,519
Thoros that measures last verified

00:08:47,019 --> 00:08:50,519
building including the growth

00:08:50,970 --> 00:08:57,480
and so we propose talks a trust update

00:08:54,390 --> 00:08:59,360
on Linds Connell toss code is uploaded

00:08:57,480 --> 00:09:02,670
to my github there's a link below and

00:08:59,360 --> 00:09:05,400
talks paper will be presented at STM

00:09:02,670 --> 00:09:07,950
2018 so which will be held next week at

00:09:05,400 --> 00:09:10,740
Barcelona and if you guys want to check

00:09:07,950 --> 00:09:15,090
more information just check the paper I

00:09:10,740 --> 00:09:17,130
guess and before I explain talks look

00:09:15,090 --> 00:09:20,190
I'm going to explain some of the key

00:09:17,130 --> 00:09:24,480
technologies I used in talks first of

00:09:20,190 --> 00:09:25,380
all we use the famous TPM 2.0 to measure

00:09:24,480 --> 00:09:27,930
in 30

00:09:25,380 --> 00:09:31,430
it is a tamper proof device to measure

00:09:27,930 --> 00:09:34,410
in 30 and store the entity Benjamins

00:09:31,430 --> 00:09:36,780
funny thing about the TPM is stores the

00:09:34,410 --> 00:09:41,130
entirety measurements to the special

00:09:36,780 --> 00:09:43,710
registers called PCRs and some of you

00:09:41,130 --> 00:09:46,350
might know the PCL values are not just

00:09:43,710 --> 00:09:49,080
created the calculated values and just

00:09:46,350 --> 00:09:53,190
stored into the PCRs it uses a special

00:09:49,080 --> 00:09:55,380
operant operation called extend the

00:09:53,190 --> 00:09:58,920
extended operation generates new PCR

00:09:55,380 --> 00:10:02,870
value by first concatenating the hash of

00:09:58,920 --> 00:10:05,220
the data and all PCL value and TPM

00:10:02,870 --> 00:10:07,440
hashes the whole concatenated value

00:10:05,220 --> 00:10:10,860
again to create a new piece of value

00:10:07,440 --> 00:10:15,150
which will eventually create a trust

00:10:10,860 --> 00:10:18,290
chain for the values measured in that

00:10:15,150 --> 00:10:21,600
piece yet specific question number and

00:10:18,290 --> 00:10:23,790
next we use shim and grovel order to

00:10:21,600 --> 00:10:27,180
maximize students compatibility with the

00:10:23,790 --> 00:10:30,060
ufi secure boot shim is a first stage

00:10:27,180 --> 00:10:32,580
bootloader to foreigners to support efi

00:10:30,060 --> 00:10:37,530
secure boot and good thing about the

00:10:32,580 --> 00:10:40,589
same is that it can be used to verify a

00:10:37,530 --> 00:10:43,320
secure binaries from the grub by using

00:10:40,589 --> 00:10:46,350
the shimla verification function or shim

00:10:43,320 --> 00:10:50,190
not protocols are basically a protocols

00:10:46,350 --> 00:10:52,980
that allows a rock or grub boot loader

00:10:50,190 --> 00:10:55,980
to communicate with the shin boot loader

00:10:52,980 --> 00:10:58,620
and the fun thing about the Shimla

00:10:55,980 --> 00:11:01,320
verification is that it uses also the

00:10:58,620 --> 00:11:03,150
former database our keys are stored in

00:11:01,320 --> 00:11:04,500
the public key stored in the former

00:11:03,150 --> 00:11:08,100
database

00:11:04,500 --> 00:11:10,950
just like the UEFI secure booth and we

00:11:08,100 --> 00:11:14,760
used them to verify our signature stop

00:11:10,950 --> 00:11:18,270
our SQL binaries and also we use a

00:11:14,760 --> 00:11:22,890
modified girlfriend core OS branch since

00:11:18,270 --> 00:11:26,880
it well supported TPM 2 and tier 2 in 30

00:11:22,890 --> 00:11:29,550
measurements as a research there are a

00:11:26,880 --> 00:11:32,100
few assumptions that we made and first

00:11:29,550 --> 00:11:35,040
of all we assume that the talk server is

00:11:32,100 --> 00:11:37,470
the Open Society server and the

00:11:35,040 --> 00:11:38,240
maintainer / administrator of the

00:11:37,470 --> 00:11:41,820
updates

00:11:38,240 --> 00:11:44,910
this makes talks transparently manage

00:11:41,820 --> 00:11:47,940
the local updates and second of all we

00:11:44,910 --> 00:11:51,600
assume that the talks only verify so

00:11:47,940 --> 00:11:56,880
intuitively most booting process this is

00:11:51,600 --> 00:11:59,370
because that didn't spring we think that

00:11:56,880 --> 00:12:01,920
the kernel should be verified during the

00:11:59,370 --> 00:12:04,650
booting process and after the boot there

00:12:01,920 --> 00:12:08,220
are plenty of powerful solutions to

00:12:04,650 --> 00:12:10,610
secure the system and thirdly we assume

00:12:08,220 --> 00:12:13,590
that the talk server is trusted and safe

00:12:10,610 --> 00:12:16,950
so we believe that it is not compromised

00:12:13,590 --> 00:12:19,350
and fourthly we assume that the toast

00:12:16,950 --> 00:12:21,180
owner holds the manifest of a specific

00:12:19,350 --> 00:12:24,360
booting process of each managed machines

00:12:21,180 --> 00:12:26,790
and finally we assume that all managed

00:12:24,360 --> 00:12:31,050
machines should hold talks owners of

00:12:26,790 --> 00:12:33,960
public key in the formula database so

00:12:31,050 --> 00:12:36,810
this is the full architecture of talks

00:12:33,960 --> 00:12:39,420
which is consists of drink or three main

00:12:36,810 --> 00:12:43,560
components first of all the entire team

00:12:39,420 --> 00:12:46,170
manager which managed entirety according

00:12:43,560 --> 00:12:48,990
to the updates as well as it is in

00:12:46,170 --> 00:12:53,400
charge of deploying the updated kernels

00:12:48,990 --> 00:12:55,350
to the local systems and PCs and cano is

00:12:53,400 --> 00:12:58,680
it is a special kana for intuitive

00:12:55,350 --> 00:13:01,950
verification and finally the TSP which

00:12:58,680 --> 00:13:06,930
provides a robust major / verified

00:13:01,950 --> 00:13:09,630
booting at the local machine so first of

00:13:06,930 --> 00:13:11,490
all the intuitive manager is a component

00:13:09,630 --> 00:13:13,680
that resides in the open setting server

00:13:11,490 --> 00:13:17,250
it is in charge of identity management

00:13:13,680 --> 00:13:19,620
and also the kana updates and you

00:13:17,250 --> 00:13:22,200
three little modules first the module is

00:13:19,620 --> 00:13:25,700
trustee repository which holds the valid

00:13:22,200 --> 00:13:29,940
binaries for the updates which is just a

00:13:25,700 --> 00:13:32,820
eventually at the repository for the

00:13:29,940 --> 00:13:34,920
trusted kernels and the wireless

00:13:32,820 --> 00:13:36,930
operator which generates and updates the

00:13:34,920 --> 00:13:41,490
normal values according to the update

00:13:36,930 --> 00:13:44,820
and lastly the PCs and cons generator to

00:13:41,490 --> 00:13:48,150
generate PCRs and deploy the kernels to

00:13:44,820 --> 00:13:49,920
the local servers of system sign I'll

00:13:48,150 --> 00:13:55,740
explain more about the PCs and Conner on

00:13:49,920 --> 00:13:58,170
the later size so with the intuitive

00:13:55,740 --> 00:13:59,790
manager the tasks cannot update and

00:13:58,170 --> 00:14:02,940
remote hesitation procedure will be

00:13:59,790 --> 00:14:05,850
looking like this first of all the local

00:14:02,940 --> 00:14:09,210
machines cannot the repository is set to

00:14:05,850 --> 00:14:11,340
the TOC server and it will allow talks

00:14:09,210 --> 00:14:15,360
over to notify updates to the local

00:14:11,340 --> 00:14:17,220
machines and when we get to notified it

00:14:15,360 --> 00:14:21,050
will request the update to the TOC

00:14:17,220 --> 00:14:23,790
server and if the talk server gets

00:14:21,050 --> 00:14:25,680
noticed of the interest it will

00:14:23,790 --> 00:14:27,810
calculate and update the new wireless

00:14:25,680 --> 00:14:30,660
values according to the request the

00:14:27,810 --> 00:14:33,210
updates and it will also generate pieces

00:14:30,660 --> 00:14:35,430
and cano and deploy the kernel trusted

00:14:33,210 --> 00:14:38,790
kernel to the local machines they will

00:14:35,430 --> 00:14:41,760
install them and finally the open CIT

00:14:38,790 --> 00:14:44,520
server will remote perform remote a

00:14:41,760 --> 00:14:48,540
station to check if the updates has been

00:14:44,520 --> 00:14:50,460
properly installed with the entity

00:14:48,540 --> 00:14:52,050
manager talks to achieve the first two

00:14:50,460 --> 00:14:54,360
goals managing local updates

00:14:52,050 --> 00:14:59,250
transparently since the update

00:14:54,360 --> 00:15:01,470
administrator is detoxes off and second

00:14:59,250 --> 00:15:04,770
goal the successful remote at a station

00:15:01,470 --> 00:15:06,780
with the up-to-date Wallis value and on

00:15:04,770 --> 00:15:07,430
the side I don't know if you can see

00:15:06,780 --> 00:15:10,530
properly

00:15:07,430 --> 00:15:13,380
there's comparison between the open CIT

00:15:10,530 --> 00:15:15,480
and talks when there is a Conner update

00:15:13,380 --> 00:15:21,270
and it tries to perform the remote a

00:15:15,480 --> 00:15:23,910
station the second component of the

00:15:21,270 --> 00:15:28,200
talks is PCs and cano it is basically a

00:15:23,910 --> 00:15:30,400
traffic cone with which is used during

00:15:28,200 --> 00:15:34,240
the ts+ verification

00:15:30,400 --> 00:15:36,760
and pieces and Conan is a Connell that

00:15:34,240 --> 00:15:40,029
is signed with the tpc are tell you

00:15:36,760 --> 00:15:42,820
instead of the digest hash so the idea

00:15:40,029 --> 00:15:46,290
of the the initial idea of the PCs and

00:15:42,820 --> 00:15:50,440
Conan was that if the TPM generates hash

00:15:46,290 --> 00:15:52,900
and most of the digital signatures keep

00:15:50,440 --> 00:15:55,930
the hash they are digest hash inside the

00:15:52,900 --> 00:15:58,200
kernel why don't we switch them use the

00:15:55,930 --> 00:16:02,770
PCL values as the hash of the you know

00:15:58,200 --> 00:16:05,710
binaries that we use so the T PCR is a

00:16:02,770 --> 00:16:07,450
calculate normal value which is created

00:16:05,710 --> 00:16:12,279
by the entity manager inside open

00:16:07,450 --> 00:16:15,190
society and by extending the in power it

00:16:12,279 --> 00:16:18,580
is a value that represents the booting

00:16:15,190 --> 00:16:21,070
process without any broken integrity and

00:16:18,580 --> 00:16:24,339
this is possible because we assume that

00:16:21,070 --> 00:16:26,320
the TOC server knows the whole entire

00:16:24,339 --> 00:16:30,790
putting process of the local machines

00:16:26,320 --> 00:16:33,360
and they can generate PCR values to

00:16:30,790 --> 00:16:37,300
expect the PCR values according to those

00:16:33,360 --> 00:16:39,190
information and I'll explain how the PCs

00:16:37,300 --> 00:16:42,209
and Cano is used for the intuitive

00:16:39,190 --> 00:16:46,450
verification in the next session the

00:16:42,209 --> 00:16:49,420
last component talks is TSP aka trusted

00:16:46,450 --> 00:16:52,300
trusted secure boot it is a combination

00:16:49,420 --> 00:16:55,959
of vfi secure boot modified shim and

00:16:52,300 --> 00:16:58,420
modified crop it is lineage friendly by

00:16:55,959 --> 00:17:01,450
using the existing Linux boot loaders

00:16:58,420 --> 00:17:03,339
and it measures every binaries and

00:17:01,450 --> 00:17:05,740
commands executed during the booting

00:17:03,339 --> 00:17:10,000
process including the clock commands and

00:17:05,740 --> 00:17:12,459
the crop modules and with TS boot we

00:17:10,000 --> 00:17:15,730
propose a robot intuitive verification

00:17:12,459 --> 00:17:18,189
scheme called PCL verification so the

00:17:15,730 --> 00:17:21,069
PCL verification verifies the entire

00:17:18,189 --> 00:17:23,620
booting process during the booting it

00:17:21,069 --> 00:17:27,160
tries to measure the entire brewing

00:17:23,620 --> 00:17:29,559
process to a PC on number 12 and to

00:17:27,160 --> 00:17:32,440
create a measurement that represents the

00:17:29,559 --> 00:17:34,540
entire print process and since we

00:17:32,440 --> 00:17:36,730
measure everything to the PC of 12 from

00:17:34,540 --> 00:17:40,620
basically the hardware measurements to

00:17:36,730 --> 00:17:43,210
the kernel booting processor or commands

00:17:40,620 --> 00:17:44,270
if anything changes regarding the

00:17:43,210 --> 00:17:48,950
booting

00:17:44,270 --> 00:17:51,800
it will reflect to the pc-12 and when

00:17:48,950 --> 00:17:56,090
the kernel is executed using the Linux

00:17:51,800 --> 00:17:57,610
EFI function or defined in the grub grub

00:17:56,090 --> 00:18:00,710
bootloader

00:17:57,610 --> 00:18:02,840
it will pass the corner to the shim and

00:18:00,710 --> 00:18:06,080
using a shim like verification function

00:18:02,840 --> 00:18:08,210
for the verification and shim decrypts

00:18:06,080 --> 00:18:13,400
the tpc are value inside the kernel

00:18:08,210 --> 00:18:16,670
signature and compares it with the PC at

00:18:13,400 --> 00:18:19,760
all which will which must have the same

00:18:16,670 --> 00:18:22,270
value as the tpc ax if it has booted

00:18:19,760 --> 00:18:26,300
successfully without broken integrity

00:18:22,270 --> 00:18:28,870
with PC verification this gives a full

00:18:26,300 --> 00:18:33,380
control or booting to a tox owner and

00:18:28,870 --> 00:18:36,680
the local machines must put in in the

00:18:33,380 --> 00:18:39,410
same order that talks owner defined

00:18:36,680 --> 00:18:41,870
previously and if anything changes

00:18:39,410 --> 00:18:44,480
during the booting for the pudding they

00:18:41,870 --> 00:18:46,730
will hold the booting and since the

00:18:44,480 --> 00:18:52,150
pc-12 measurements will be changed and

00:18:46,730 --> 00:18:55,160
this will provide a robust integrity

00:18:52,150 --> 00:18:57,320
with the TS boot we achieved the third

00:18:55,160 --> 00:19:00,890
goal the robust measures that verified

00:18:57,320 --> 00:19:03,860
hooding including drug commands I have

00:19:00,890 --> 00:19:06,890
shown the comparison between the Intel

00:19:03,860 --> 00:19:10,100
txt and talks over there Intel chesty

00:19:06,890 --> 00:19:13,010
basically tries to measure each steps of

00:19:10,100 --> 00:19:15,340
the booting process and go through all

00:19:13,010 --> 00:19:19,550
those steps to verify the pudding and

00:19:15,340 --> 00:19:22,610
talks tries to verify the system only by

00:19:19,550 --> 00:19:26,390
comparing the pc-12 before the execution

00:19:22,610 --> 00:19:30,980
of talks or the column itself so that's

00:19:26,390 --> 00:19:33,140
kind of a difference and as a proof of

00:19:30,980 --> 00:19:36,020
concept we have performed few

00:19:33,140 --> 00:19:38,990
experiments first we experimented if the

00:19:36,020 --> 00:19:42,260
talks can detect any modification during

00:19:38,990 --> 00:19:44,360
the booting using the PC at 12:00 any

00:19:42,260 --> 00:19:46,460
modifications I mean Hardware

00:19:44,360 --> 00:19:48,590
modifications for mode option

00:19:46,460 --> 00:19:52,190
modifications and software modification

00:19:48,590 --> 00:19:54,470
using used during the booting process we

00:19:52,190 --> 00:19:56,760
have four cases to prove them first the

00:19:54,470 --> 00:19:59,970
case a with PC one with

00:19:56,760 --> 00:20:02,910
I wasn't one and secure boot on a case

00:19:59,970 --> 00:20:05,910
be pc1 with Connor wasn't two and secure

00:20:02,910 --> 00:20:10,020
boot one which represents a software

00:20:05,910 --> 00:20:12,270
change and Casey a PC one with competent

00:20:10,020 --> 00:20:14,420
- and secure boot off which will

00:20:12,270 --> 00:20:18,480
represent our former option change and

00:20:14,420 --> 00:20:20,850
finally the case D PC - with conversion

00:20:18,480 --> 00:20:24,180
to secure put on which will represent

00:20:20,850 --> 00:20:27,270
the hardware change and we have

00:20:24,180 --> 00:20:30,560
confirmed that the pc-12 on the last

00:20:27,270 --> 00:20:34,740
line has changed under all circumstances

00:20:30,560 --> 00:20:37,670
and it shows all that if anything

00:20:34,740 --> 00:20:40,530
changes it will reflect it to the pc-12

00:20:37,670 --> 00:20:43,350
the other piece of values have also have

00:20:40,530 --> 00:20:46,350
other meanings that the PC and according

00:20:43,350 --> 00:20:49,260
to the official numbers piece are 0 to 7

00:20:46,350 --> 00:20:52,170
are measured throughout the secure boot

00:20:49,260 --> 00:20:56,190
process and PC eight and nine will be

00:20:52,170 --> 00:20:59,010
measured by the tricycle and Peter 1011

00:20:56,190 --> 00:21:02,580
will be measured by a shim boot loader

00:20:59,010 --> 00:21:05,520
for the crop and Connellan 30 and of

00:21:02,580 --> 00:21:08,460
course the PCEHR 12 will be extended

00:21:05,520 --> 00:21:11,390
throughout all the process of routing to

00:21:08,460 --> 00:21:13,710
represent the entire booting process

00:21:11,390 --> 00:21:15,810
second experiment was to check the

00:21:13,710 --> 00:21:18,210
pisser verification if the chip official

00:21:15,810 --> 00:21:21,180
verification can detect commands

00:21:18,210 --> 00:21:24,060
modification I have added an extra

00:21:21,180 --> 00:21:26,480
command that echoes this is failed this

00:21:24,060 --> 00:21:29,610
is to fail piece a verification and

00:21:26,480 --> 00:21:32,430
eventually when booting the PC and 12

00:21:29,610 --> 00:21:35,970
changed and we can successfully detect

00:21:32,430 --> 00:21:38,310
and halt the pudding itself finally we

00:21:35,970 --> 00:21:41,490
have experimented if the open society

00:21:38,310 --> 00:21:43,710
can perform thorough remote a station

00:21:41,490 --> 00:21:47,100
using the new wireless values when we

00:21:43,710 --> 00:21:49,080
update them and here we have only used a

00:21:47,100 --> 00:21:52,610
PC at all value as a whitelist for

00:21:49,080 --> 00:21:56,100
simplicity and we saw talk successfully

00:21:52,610 --> 00:21:58,830
performs thorough or remote auto station

00:21:56,100 --> 00:22:00,990
with upstate what is value here we can

00:21:58,830 --> 00:22:05,310
see the green check sign on the last

00:22:00,990 --> 00:22:09,650
picture and I will show a short demo up

00:22:05,310 --> 00:22:15,740
talks for the system

00:22:09,650 --> 00:22:17,930
sorry so initially we initialize the

00:22:15,740 --> 00:22:20,990
column version 62 and register to the

00:22:17,930 --> 00:22:24,650
open society server so we performed the

00:22:20,990 --> 00:22:26,120
when we perform the remote a station it

00:22:24,650 --> 00:22:29,990
will state the machine as trusted

00:22:26,120 --> 00:22:34,850
showing the crop of green check sign and

00:22:29,990 --> 00:22:36,920
after that we perform a normal local

00:22:34,850 --> 00:22:43,550
update without notifying the open

00:22:36,920 --> 00:22:46,160
society server this will cause remote

00:22:43,550 --> 00:22:50,390
authentication failure because the open

00:22:46,160 --> 00:22:55,310
society server has outdated wireless

00:22:50,390 --> 00:22:59,180
values and then we restore the machine

00:22:55,310 --> 00:23:01,790
to connivance 62 after that we try to

00:22:59,180 --> 00:23:04,310
update with talks and it will also

00:23:01,790 --> 00:23:08,000
update the values values inside the open

00:23:04,310 --> 00:23:11,630
CIT well and the local system will

00:23:08,000 --> 00:23:15,250
request the updates to the open sette

00:23:11,630 --> 00:23:18,410
server and when the update is complete

00:23:15,250 --> 00:23:20,330
when we perform the remote auto station

00:23:18,410 --> 00:23:23,120
it will show the green check sign again

00:23:20,330 --> 00:23:25,970
and when we check the whitelist values

00:23:23,120 --> 00:23:28,220
inside the open set the database we can

00:23:25,970 --> 00:23:31,300
see that it is successfully updated and

00:23:28,220 --> 00:23:40,850
it matches with the new measurements

00:23:31,300 --> 00:23:43,940
from the booting itself and we also

00:23:40,850 --> 00:23:46,940
support rollback if the kernel version

00:23:43,940 --> 00:23:50,150
we request is inside the trusty

00:23:46,940 --> 00:23:54,800
repository we can request here we eirick

00:23:50,150 --> 00:23:58,640
I requested conovan 62 again to notify

00:23:54,800 --> 00:24:01,490
the open status server I want to change

00:23:58,640 --> 00:24:04,790
my color version to the previous one and

00:24:01,490 --> 00:24:07,310
now the conversion is updated and the

00:24:04,790 --> 00:24:09,650
locus is the open set the server is

00:24:07,310 --> 00:24:15,950
notified with the update whitelist

00:24:09,650 --> 00:24:20,870
values and it can support proper remote

00:24:15,950 --> 00:24:22,970
a station after this there's a short

00:24:20,870 --> 00:24:23,120
demo or piece of verification holding

00:24:22,970 --> 00:24:25,120
the

00:24:23,120 --> 00:24:31,340
during when God command has changed

00:24:25,120 --> 00:24:35,960
during the putting process itself so

00:24:31,340 --> 00:24:39,740
when we boot I visit the group comments

00:24:35,960 --> 00:24:41,840
and I entered a fault I coped changing

00:24:39,740 --> 00:24:44,330
the common SQL commands and it

00:24:41,840 --> 00:24:49,100
successfully hosted booting and stops

00:24:44,330 --> 00:24:53,000
putting itself so as shown in the demo

00:24:49,100 --> 00:24:55,400
Connor Connor rollback is supported if

00:24:53,000 --> 00:24:58,940
requested conversion still exist in that

00:24:55,400 --> 00:25:01,160
Rossdale repository and also toss can

00:24:58,940 --> 00:25:04,610
detect wrote back attacks since tasks

00:25:01,160 --> 00:25:06,650
cannot perform whitelist updates with

00:25:04,610 --> 00:25:10,010
the Connor that it doesn't exist in the

00:25:06,650 --> 00:25:12,830
trusses repository so if it is outdated

00:25:10,010 --> 00:25:14,660
conversion or the whitelist values

00:25:12,830 --> 00:25:19,190
cannot be updated according to the

00:25:14,660 --> 00:25:22,550
version and if it checks the convergent

00:25:19,190 --> 00:25:25,190
measurement does match it will stop you

00:25:22,550 --> 00:25:28,760
will our state the machine is untrusted

00:25:25,190 --> 00:25:32,540
and it is somehow modified or

00:25:28,760 --> 00:25:35,240
compromised and we believe that both

00:25:32,540 --> 00:25:38,480
public key and the private key of talks

00:25:35,240 --> 00:25:41,390
owners key is safe since we assume that

00:25:38,480 --> 00:25:43,250
the open society server which stores the

00:25:41,390 --> 00:25:47,590
private key and the foreman database

00:25:43,250 --> 00:25:50,000
which stores the public key is safe and

00:25:47,590 --> 00:25:53,120
we believe that talks may be applicable

00:25:50,000 --> 00:25:56,809
to other environments who uses UEFI

00:25:53,120 --> 00:26:00,200
secure boot TPM and shame and grub boot

00:25:56,809 --> 00:26:03,080
loader which which I believe that it is

00:26:00,200 --> 00:26:05,929
mostly applicable to other Linux systems

00:26:03,080 --> 00:26:08,530
including Raddatz Ubuntu's and other

00:26:05,929 --> 00:26:11,450
stuff and it can be also update are

00:26:08,530 --> 00:26:15,610
applicable to small systems other than

00:26:11,450 --> 00:26:20,900
the desktops may be IOT devices and

00:26:15,610 --> 00:26:23,840
finally after the checks T most people

00:26:20,900 --> 00:26:25,790
are tend to use more D RT M but talk

00:26:23,840 --> 00:26:28,220
seems like a lesser team however I think

00:26:25,790 --> 00:26:30,830
that talks dynamically generates the

00:26:28,220 --> 00:26:33,050
whitelist and pieces and cano according

00:26:30,830 --> 00:26:36,610
to the common so I think talks is in

00:26:33,050 --> 00:26:40,370
between the SRTM and the D RT M

00:26:36,610 --> 00:26:42,919
so to conclude the in 30 changes when

00:26:40,370 --> 00:26:46,159
the update is conducted and thoughts it

00:26:42,919 --> 00:26:48,740
should be properly managed and talked

00:26:46,159 --> 00:26:52,100
successfully support in 30 management

00:26:48,740 --> 00:26:54,409
along with a frequent kernel updates by

00:26:52,100 --> 00:26:57,789
first by extending the open society

00:26:54,409 --> 00:26:59,299
server to transplant apparently managed

00:26:57,789 --> 00:27:02,509
local updates

00:26:59,299 --> 00:27:05,350
and remote author station with

00:27:02,509 --> 00:27:07,669
up-to-date while value thirdly the

00:27:05,350 --> 00:27:10,370
thorough and dirty measurement including

00:27:07,669 --> 00:27:12,519
the croc comments and okra modules using

00:27:10,370 --> 00:27:15,919
the TS boot and finally it provides

00:27:12,519 --> 00:27:20,029
robust intuitive verification with pcr

00:27:15,919 --> 00:27:23,980
verification so that's it and how glad

00:27:20,029 --> 00:27:23,980
they take some questions and feedbacks

00:27:27,640 --> 00:27:42,760
I really enjoyed enjoyed that it's

00:27:41,590 --> 00:27:46,299
really interesting and integrating that

00:27:42,760 --> 00:27:48,420
with an open CIT two comments first

00:27:46,299 --> 00:27:52,150
thing is we ended up writing our own

00:27:48,420 --> 00:27:56,410
secure boot loader because we wanted

00:27:52,150 --> 00:27:57,910
both the srtm and dr TM and grub

00:27:56,410 --> 00:28:00,040
doesn't support both at the same time

00:27:57,910 --> 00:28:04,780
because you can either have multi boot

00:28:00,040 --> 00:28:06,880
or secure boot through the UAF i the

00:28:04,780 --> 00:28:08,860
other thing is here overriding PC are

00:28:06,880 --> 00:28:12,490
ten and by default a lot of distribution

00:28:08,860 --> 00:28:14,980
kernels already have I'm a configured on

00:28:12,490 --> 00:28:22,150
PCR ten so be good if he didn't clobber

00:28:14,980 --> 00:28:24,700
that by default thank you for the

00:28:22,150 --> 00:28:26,980
comment yeah it seems like you're making

00:28:24,700 --> 00:28:30,419
the assumption that on open CIT there's

00:28:26,980 --> 00:28:34,809
no authorization required to update the

00:28:30,419 --> 00:28:37,809
new server first for example is that it

00:28:34,809 --> 00:28:39,070
doesn't automatically update it there's

00:28:37,809 --> 00:28:41,710
a claiming someone's got to be on the

00:28:39,070 --> 00:28:44,350
back end authorizing the new set of pcr

00:28:41,710 --> 00:28:47,169
values that are now that are not valid

00:28:44,350 --> 00:28:50,010
or don't update the PC I use because I

00:28:47,169 --> 00:28:52,870
don't trust this new one so basically

00:28:50,010 --> 00:28:54,580
when we try to use the open society to

00:28:52,870 --> 00:28:59,140
verify the TPM measurements from the

00:28:54,580 --> 00:29:02,350
locals we saw that the when the local

00:28:59,140 --> 00:29:04,990
system is updated the local user must

00:29:02,350 --> 00:29:08,679
reinforce the TPM measurement as a

00:29:04,990 --> 00:29:11,110
whitelist by himself by going into the

00:29:08,679 --> 00:29:15,820
web and importing the new values to the

00:29:11,110 --> 00:29:19,150
open city database okay go go which

00:29:15,820 --> 00:29:20,559
requires authorization which yes

00:29:19,150 --> 00:29:24,250
requires authorization from the

00:29:20,559 --> 00:29:27,700
administrator yes you need to type in ID

00:29:24,250 --> 00:29:30,130
and password to get into the screen to

00:29:27,700 --> 00:29:34,299
website well which Probot is just

00:29:30,130 --> 00:29:36,190
provided by OTO Ponseti but we are

00:29:34,299 --> 00:29:38,250
assuming that the attacker may have

00:29:36,190 --> 00:29:41,530
those passwords and ID's

00:29:38,250 --> 00:29:41,860
yet so it can like update the while this

00:29:41,530 --> 00:29:46,090
is

00:29:41,860 --> 00:29:49,179
so yeah yep the attacker yelling Z

00:29:46,090 --> 00:29:50,950
back-end if that happens that username

00:29:49,179 --> 00:29:53,830
password to all the firewalls all the

00:29:50,950 --> 00:29:55,510
servers and get it all of them - right

00:29:53,830 --> 00:29:57,750
I'm not sure I don't think that's a

00:29:55,510 --> 00:30:00,640
valid assumption yes it's done basically

00:29:57,750 --> 00:30:03,179
what I think there's a lot of things I

00:30:00,640 --> 00:30:06,010
can't speak for Intel anymore

00:30:03,179 --> 00:30:08,380
but there's a lot of things agreed

00:30:06,010 --> 00:30:10,120
there's a lot of things wrong mmm my

00:30:08,380 --> 00:30:10,570
opinion is go fix this stuff that's

00:30:10,120 --> 00:30:13,720
there

00:30:10,570 --> 00:30:16,260
don't create a whole new whole entirely

00:30:13,720 --> 00:30:23,950
new framework you know that's I see

00:30:16,260 --> 00:30:32,620
thanks for the time we have any more

00:30:23,950 --> 00:30:33,500
questions I think that's it right

00:30:32,620 --> 00:30:34,510
[Applause]

00:30:33,500 --> 00:30:39,260
[Music]

00:30:34,510 --> 00:30:39,260

YouTube URL: https://www.youtube.com/watch?v=slNSH2LGBqA


