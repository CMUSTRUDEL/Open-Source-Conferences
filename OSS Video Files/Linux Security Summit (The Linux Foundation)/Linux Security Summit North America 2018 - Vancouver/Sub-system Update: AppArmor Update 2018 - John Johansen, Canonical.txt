Title: Sub-system Update: AppArmor Update 2018 - John Johansen, Canonical
Publication date: 2018-08-31
Playlist: Linux Security Summit North America 2018 - Vancouver
Description: 
	Sub-system Update: AppArmor Update 2018 - John Johansen, Canonical

This talk provides an update of the current state of the AppArmor project. It will look at new features, and miscellaneous changes developed over the last year, as well as a look at the current work in progress.

About John Johansen
John Johansen works for Canonical doing kernel related work for the Ubuntu security team.

John Johansen began working with open source software in the late 80s and began playing with Linux in 93. He completed a masters in mathematics at the University of Waterloo and the began working for Immunix doing compiler hardening, and then AppArmor. After Immunix was acquired by Novell he began working on Suse Linux and in 2009 he joined Canonical as a kernel engineer. He is currently employed by Canonical as a security engineer with a primary focus on supporting the AppArmor project.
Captions: 
	00:00:00,060 --> 00:00:06,450
all right so we've got a short time here

00:00:03,149 --> 00:00:11,880
so we'll just get started so this year

00:00:06,450 --> 00:00:13,679
we got a new logo for a long time ago we

00:00:11,880 --> 00:00:15,360
did have logo back with Novell and we

00:00:13,679 --> 00:00:18,150
dropped them that didn't come out with a

00:00:15,360 --> 00:00:21,570
when we came out of Novell and we kind

00:00:18,150 --> 00:00:23,279
of picked up the mascot which we

00:00:21,570 --> 00:00:25,500
inherited from a Munich's a long time

00:00:23,279 --> 00:00:28,500
ago and we're kind of using that but

00:00:25,500 --> 00:00:31,349
that's not the best logo for desktops

00:00:28,500 --> 00:00:33,719
and stuff and Noah Wyle did some work

00:00:31,349 --> 00:00:37,410
and we got a nice new logo out of it and

00:00:33,719 --> 00:00:41,210
so we're all happy with that we

00:00:37,410 --> 00:00:45,660
transitioned from launch pad to get lab

00:00:41,210 --> 00:00:48,480
the transitions between from bzr to get

00:00:45,660 --> 00:00:52,110
was a bit of a pain but not too bad that

00:00:48,480 --> 00:00:56,309
the we still are stuck on launch pad for

00:00:52,110 --> 00:01:00,930
some of the bugs and translations but it

00:00:56,309 --> 00:01:03,840
mostly were on get lab now we also

00:01:00,930 --> 00:01:06,619
transitioned from our custom Medi wiki

00:01:03,840 --> 00:01:09,900
media wiki whatever to the get lab wiki

00:01:06,619 --> 00:01:11,130
that was a bit of a pain there was a

00:01:09,900 --> 00:01:14,780
whole bunch of skipped scripts written

00:01:11,130 --> 00:01:17,790
to and conversions done to convert

00:01:14,780 --> 00:01:19,619
MediaWiki down to get lab markdown and

00:01:17,790 --> 00:01:21,780
there's still several things broken from

00:01:19,619 --> 00:01:24,180
that we're slowly working our way

00:01:21,780 --> 00:01:27,780
through and finding them but what can

00:01:24,180 --> 00:01:30,299
you do and with that we also did the

00:01:27,780 --> 00:01:32,700
work to get the CII best practice badge

00:01:30,299 --> 00:01:34,650
for a primer a lot of that came from

00:01:32,700 --> 00:01:37,950
actually moving to get lab because then

00:01:34,650 --> 00:01:40,680
we picked automatically picked up HTTPS

00:01:37,950 --> 00:01:42,479
and several other things that you know

00:01:40,680 --> 00:01:44,100
that's needed for it and then it was

00:01:42,479 --> 00:01:47,040
just up mostly it was just updating

00:01:44,100 --> 00:01:48,930
documentation and a few other you know

00:01:47,040 --> 00:01:51,149
making sure licenses all complied and

00:01:48,930 --> 00:01:53,520
everything was in place so it's a really

00:01:51,149 --> 00:01:55,350
good plug for the you know CIO best

00:01:53,520 --> 00:01:59,280
practices project should be on there if

00:01:55,350 --> 00:02:01,259
they can up streaming we up streamed

00:01:59,280 --> 00:02:03,780
everything this year finished up

00:02:01,259 --> 00:02:06,000
streaming except for the moon to Delta

00:02:03,780 --> 00:02:08,369
except for the AF UNIX fine-grained

00:02:06,000 --> 00:02:11,129
mediation that's waiting and getting a

00:02:08,369 --> 00:02:12,870
little bit of revision as we are now

00:02:11,129 --> 00:02:15,239
also working on fine

00:02:12,870 --> 00:02:16,800
Network mediation and so we want to make

00:02:15,239 --> 00:02:20,550
sure everything works together and is

00:02:16,800 --> 00:02:22,050
nice with it so we did get a few other

00:02:20,550 --> 00:02:24,720
things up there though

00:02:22,050 --> 00:02:27,540
we got the sec ids up finally support

00:02:24,720 --> 00:02:30,090
for sec ids which is a precursor for

00:02:27,540 --> 00:02:32,940
networking but it's also allowed us to

00:02:30,090 --> 00:02:35,250
get an audit filter support for an audit

00:02:32,940 --> 00:02:38,160
rule filtering so we just support the

00:02:35,250 --> 00:02:41,640
subject role right now but hey that's

00:02:38,160 --> 00:02:45,450
great we did get the base socket

00:02:41,640 --> 00:02:47,220
mediation in in 417 so this isn't

00:02:45,450 --> 00:02:50,670
fine-grained network mediation this is

00:02:47,220 --> 00:02:54,360
just no you can't use packet AF packet

00:02:50,670 --> 00:02:57,629
stuff like that we picked up a little

00:02:54,360 --> 00:03:00,299
bit of i'ma integration and there are

00:02:57,629 --> 00:03:03,420
plans for more so right now we can do

00:03:00,299 --> 00:03:06,959
some profile attachment based on the

00:03:03,420 --> 00:03:09,090
i'ma measurement so you can't you can't

00:03:06,959 --> 00:03:11,640
transition to this you can't run this

00:03:09,090 --> 00:03:13,440
executable basically or and/or you can

00:03:11,640 --> 00:03:15,209
or you can run this executable but

00:03:13,440 --> 00:03:17,609
you'll get different confinement based

00:03:15,209 --> 00:03:22,260
on whether the Imus signature matches or

00:03:17,609 --> 00:03:25,829
not and we with that we also improved

00:03:22,260 --> 00:03:27,870
some of the attachment resolution so it

00:03:25,829 --> 00:03:30,030
it doesn't really change anything except

00:03:27,870 --> 00:03:33,569
for the fact in the past that when we

00:03:30,030 --> 00:03:35,849
had a conflict you would just be denied

00:03:33,569 --> 00:03:37,829
right and that's still a case but we

00:03:35,849 --> 00:03:41,609
have a smaller window on what those

00:03:37,829 --> 00:03:44,730
conflicts are and we picked up a no new

00:03:41,609 --> 00:03:46,440
proves subset test which doesn't get us

00:03:44,730 --> 00:03:48,419
all the way on supporting nowhere new

00:03:46,440 --> 00:03:52,950
proofs the way we want but it lets us

00:03:48,419 --> 00:03:55,859
track when new no new proofs was set so

00:03:52,950 --> 00:03:58,919
that we can say yes this set of policy

00:03:55,859 --> 00:04:00,959
is a subset of that policy and so we can

00:03:58,919 --> 00:04:03,599
always maintain that no new proofs

00:04:00,959 --> 00:04:08,099
guarantee and still do certain policy

00:04:03,599 --> 00:04:10,980
transitions without breaking things for

00:04:08,099 --> 00:04:17,760
14 we had of a bit of a hiccup or a

00:04:10,980 --> 00:04:19,979
flame maybe so this delayed a few things

00:04:17,760 --> 00:04:21,479
and a few plans and and enabled this

00:04:19,979 --> 00:04:23,940
actually was good in a way because it

00:04:21,479 --> 00:04:26,220
enabled us to focus on some things

00:04:23,940 --> 00:04:28,680
that have been really hurting and

00:04:26,220 --> 00:04:30,630
needing attention for a long time so we

00:04:28,680 --> 00:04:32,940
got a bit of a new direction out of this

00:04:30,630 --> 00:04:36,270
and paused some of the upstream stuff

00:04:32,940 --> 00:04:39,090
that we wanted to do and so what what

00:04:36,270 --> 00:04:41,640
happened with 414 is we first tried

00:04:39,090 --> 00:04:46,200
pushing the networking socket mediation

00:04:41,640 --> 00:04:48,120
patch and it broke some kernel devs so

00:04:46,200 --> 00:04:50,430
what happened here is a parmer

00:04:48,120 --> 00:04:53,130
originally what was going on in user

00:04:50,430 --> 00:04:55,440
space is we had two basic two basically

00:04:53,130 --> 00:04:58,020
two modes you could as a distro pin your

00:04:55,440 --> 00:04:59,820
policy to a specific ABI or you could

00:04:58,020 --> 00:05:01,770
have it open and I say a def mode type

00:04:59,820 --> 00:05:04,260
thing so if you brought your your kernel

00:05:01,770 --> 00:05:06,450
a bi would be used and anything missing

00:05:04,260 --> 00:05:08,340
in policy would get denied and then you

00:05:06,450 --> 00:05:11,130
could get those back as bug reports and

00:05:08,340 --> 00:05:15,420
throw stuff in hello breaking kernel

00:05:11,130 --> 00:05:17,100
divs so this is to fix this we needed to

00:05:15,420 --> 00:05:20,370
change some things and there's a whole

00:05:17,100 --> 00:05:22,440
bunch of ancillary work around this so

00:05:20,370 --> 00:05:25,020
basically all we had to do from this

00:05:22,440 --> 00:05:26,910
point of view is policy now gets the ABI

00:05:25,020 --> 00:05:30,360
that it was written to written for

00:05:26,910 --> 00:05:32,340
attach to it it's not a big deal you

00:05:30,360 --> 00:05:33,840
know that's great and everything but

00:05:32,340 --> 00:05:35,880
what else did we have to actually do to

00:05:33,840 --> 00:05:39,780
fix some other problems around this well

00:05:35,880 --> 00:05:41,790
we had a single policy binary policy

00:05:39,780 --> 00:05:43,860
cache and so if you were switching

00:05:41,790 --> 00:05:45,750
kernels that had to be in a validated

00:05:43,860 --> 00:05:48,630
and then recompiled and we're doing that

00:05:45,750 --> 00:05:51,840
at run boot time which is a real problem

00:05:48,630 --> 00:05:54,600
it was a lot of issues especially well I

00:05:51,840 --> 00:05:56,580
mean we could do some Ram FS policy and

00:05:54,600 --> 00:05:58,380
stuff but it was a pain in the butt

00:05:56,580 --> 00:06:00,540
right and we're working towards being

00:05:58,380 --> 00:06:03,120
able to do more of that so what we did

00:06:00,540 --> 00:06:06,600
is we now have basically a per kernel

00:06:03,120 --> 00:06:08,070
policy cache so you can you can install

00:06:06,600 --> 00:06:11,160
these things you can you can actually

00:06:08,070 --> 00:06:14,070
pre ship the policies with each kernel

00:06:11,160 --> 00:06:18,300
if you want as a distro and to also

00:06:14,070 --> 00:06:20,460
support that we now also support policy

00:06:18,300 --> 00:06:23,160
cache overlays and so you could have a

00:06:20,460 --> 00:06:24,990
local cache for local changes and have

00:06:23,160 --> 00:06:29,520
an ro image that you're shipping stuff

00:06:24,990 --> 00:06:32,370
in as well that's the the big stuff

00:06:29,520 --> 00:06:33,810
that's actually landed we have a whole

00:06:32,370 --> 00:06:37,320
bunch of stuff that work in progress

00:06:33,810 --> 00:06:37,710
right now so we've done a whole bunch of

00:06:37,320 --> 00:06:40,380
internal

00:06:37,710 --> 00:06:42,540
clean-ups reworking the early policy

00:06:40,380 --> 00:06:44,730
load one of the goals is to be able to

00:06:42,540 --> 00:06:47,430
get systemd directly calling in to live

00:06:44,730 --> 00:06:51,510
a farmer to to load it instead of doing

00:06:47,430 --> 00:06:56,040
the extra call out to the the parser

00:06:51,510 --> 00:07:00,060
right now to do it making it easier to

00:06:56,040 --> 00:07:02,240
put policy in it ram FS we've got fine

00:07:00,060 --> 00:07:06,300
grading network mediation coming with

00:07:02,240 --> 00:07:08,550
support for IP tables and stuff there's

00:07:06,300 --> 00:07:12,260
a certain little mountry work going

00:07:08,550 --> 00:07:14,910
around that's requiring some work and

00:07:12,260 --> 00:07:20,310
we've been there is also work on missing

00:07:14,910 --> 00:07:21,870
mediation like keys and Ayaka tools that

00:07:20,310 --> 00:07:24,120
we are also doing a whole bunch of work

00:07:21,870 --> 00:07:27,360
around improving our our internal

00:07:24,120 --> 00:07:30,630
auditing so we want to get our audit

00:07:27,360 --> 00:07:32,220
data structures off the stack and then

00:07:30,630 --> 00:07:34,800
we also want to be able to do some

00:07:32,220 --> 00:07:36,660
additional caching and grouping and a

00:07:34,800 --> 00:07:39,330
large part of this comes to our

00:07:36,660 --> 00:07:41,970
complaint or learning mode stuff and so

00:07:39,330 --> 00:07:43,890
we can generate a flood of logs and so

00:07:41,970 --> 00:07:45,720
part of that is we want to be able to

00:07:43,890 --> 00:07:47,640
reduce those we want to be able to group

00:07:45,720 --> 00:07:49,710
them again we're reducing about a data

00:07:47,640 --> 00:07:51,570
being done and we also want to be able

00:07:49,710 --> 00:07:52,740
to say selectively say our we can

00:07:51,570 --> 00:07:54,480
actually send this to the audit

00:07:52,740 --> 00:07:56,040
subsystem where are we going to allow a

00:07:54,480 --> 00:07:58,170
demon to register it and send it

00:07:56,040 --> 00:08:00,300
directly to that daemon and so then

00:07:58,170 --> 00:08:02,040
again it's not going to audit subsystem

00:08:00,300 --> 00:08:05,700
at all we we're getting it out of the

00:08:02,040 --> 00:08:08,820
way we do have some further attachment

00:08:05,700 --> 00:08:10,620
conditionals we're playing with so we

00:08:08,820 --> 00:08:13,070
have the IMO that I mentioned but

00:08:10,620 --> 00:08:16,020
there's also some stuff around users

00:08:13,070 --> 00:08:20,330
that a lot of people really want for

00:08:16,020 --> 00:08:20,330
some role based policy stuff

00:08:21,810 --> 00:08:26,880
there's extended conditionals and extra

00:08:23,850 --> 00:08:28,980
permissions breaking things down better

00:08:26,880 --> 00:08:30,120
internal they're actually broken down in

00:08:28,980 --> 00:08:32,640
the kernel but they're not in the user

00:08:30,120 --> 00:08:36,060
space and so getting that impedance

00:08:32,640 --> 00:08:37,620
mismatch match fixed and then there's a

00:08:36,060 --> 00:08:40,350
whole bunch of work around policy

00:08:37,620 --> 00:08:43,380
namespaces so internally scoped and view

00:08:40,350 --> 00:08:45,750
work that's again to help that's the

00:08:43,380 --> 00:08:47,250
last piece we need to finish up well not

00:08:45,750 --> 00:08:48,870
the last piece but one of the big pieces

00:08:47,250 --> 00:08:51,120
that we have to finish up before we can

00:08:48,870 --> 00:08:51,510
open our policy to users and

00:08:51,120 --> 00:08:54,800
applications

00:08:51,510 --> 00:08:57,449
so that they can load their own policy

00:08:54,800 --> 00:09:00,600
that's the goal anyways and delegation

00:08:57,449 --> 00:09:02,790
which seems to we've keep starting on it

00:09:00,600 --> 00:09:05,820
and it never gets done which is the last

00:09:02,790 --> 00:09:07,649
big of piece of our mediation model that

00:09:05,820 --> 00:09:11,100
just hasn't hit hit yet what we have

00:09:07,649 --> 00:09:11,699
been working on it and that's that's it

00:09:11,100 --> 00:09:15,420
for the year

00:09:11,699 --> 00:09:20,149
hope that's fit yeah not too bad any

00:09:15,420 --> 00:09:20,149

YouTube URL: https://www.youtube.com/watch?v=_xv0tYSTE9I


