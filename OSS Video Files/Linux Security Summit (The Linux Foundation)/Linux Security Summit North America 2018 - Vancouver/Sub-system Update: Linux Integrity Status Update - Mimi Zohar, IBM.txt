Title: Sub-system Update: Linux Integrity Status Update - Mimi Zohar, IBM
Publication date: 2018-08-31
Playlist: Linux Security Summit North America 2018 - Vancouver
Description: 
	Sub-system Update: Linux Integrity Status Update - Mimi Zohar, IBM

The integrity subsystem status update will provide an overview of the new features and other changes upstreamed this past year, as well as discuss current and future development.

About Mimi Zohar
Mimi Zohar is a researcher at the IBM T.J. Research Center. Her current interests are in the areas of system security and integrity She is the linux-integrity subsystem maintainer.
Captions: 
	00:00:00,030 --> 00:00:07,230
okay so like everybody else we have ten

00:00:03,389 --> 00:00:11,240
minutes for the integrity subsystem so

00:00:07,230 --> 00:00:11,240
we're gonna dive right in

00:00:11,430 --> 00:00:14,480
[Music]

00:00:14,540 --> 00:00:23,039
so the Linux integrity subsystem has a

00:00:18,750 --> 00:00:24,539
number of pieces involved and there's

00:00:23,039 --> 00:00:27,330
not really a lot of time to go through

00:00:24,539 --> 00:00:31,320
all the pieces so we're gonna stick with

00:00:27,330 --> 00:00:35,550
what's changed right now and there was

00:00:31,320 --> 00:00:40,200
some major work done by Matthew Garrett

00:00:35,550 --> 00:00:48,059
on EDM EVM protects the file metadata

00:00:40,200 --> 00:00:52,590
and I'm a protects file data so in order

00:00:48,059 --> 00:00:56,399
to protect file data metadata you need

00:00:52,590 --> 00:00:58,289
to include something you have to bind

00:00:56,399 --> 00:01:00,870
the file data and the file metadata

00:00:58,289 --> 00:01:02,730
together and originally the way that we

00:01:00,870 --> 00:01:07,020
did this was we took something from the

00:01:02,730 --> 00:01:10,590
I note the I know number to protect to

00:01:07,020 --> 00:01:12,990
be able to bind the two together if you

00:01:10,590 --> 00:01:15,479
take the something from the inode that

00:01:12,990 --> 00:01:18,869
means that it's not going to be portable

00:01:15,479 --> 00:01:22,259
because it's different on every single

00:01:18,869 --> 00:01:26,280
system so that it's being installed on

00:01:22,259 --> 00:01:30,750
so Matthew actually said why can't we

00:01:26,280 --> 00:01:33,380
just use security dyma as the identifier

00:01:30,750 --> 00:01:37,259
the file hash as the identifier and

00:01:33,380 --> 00:01:41,460
that's what he did and so the new evm

00:01:37,259 --> 00:01:43,920
portable signature allows it to be

00:01:41,460 --> 00:01:49,020
portable because it's included but yet

00:01:43,920 --> 00:01:52,590
binded to the file data so and it can

00:01:49,020 --> 00:01:56,909
only be used if there is a security dyma

00:01:52,590 --> 00:02:01,200
on the file by making it portable it can

00:01:56,909 --> 00:02:05,240
now be used in in package managers in

00:02:01,200 --> 00:02:10,229
any way else in order to carry it around

00:02:05,240 --> 00:02:12,400
to you know to the file metadata can be

00:02:10,229 --> 00:02:15,099
included with the file data

00:02:12,400 --> 00:02:16,720
and is portable okay and at the same

00:02:15,099 --> 00:02:22,269
time that he was working on this

00:02:16,720 --> 00:02:26,170
he also we now have signatures and he is

00:02:22,269 --> 00:02:28,989
not limited to just a sha-1 so we now

00:02:26,170 --> 00:02:36,900
have support for larger EVM digest just

00:02:28,989 --> 00:02:40,569
like we do for i'ma and what else and

00:02:36,900 --> 00:02:47,859
he'll be giving a talk explaining how to

00:02:40,569 --> 00:02:50,950
tie it at LSS Europe in terms of the

00:02:47,859 --> 00:02:56,170
changes the new features for I'm oh we

00:02:50,950 --> 00:02:59,769
have there were two ways of defining

00:02:56,170 --> 00:03:03,879
policies one is a built on is the built

00:02:59,769 --> 00:03:07,420
in policies that the few built-in

00:03:03,879 --> 00:03:11,290
policies that can be used to bootstrap

00:03:07,420 --> 00:03:13,389
your system and then you had the and

00:03:11,290 --> 00:03:17,919
then they needed to be loaded at runtime

00:03:13,389 --> 00:03:20,650
to be actually to be provided on the

00:03:17,919 --> 00:03:24,609
boot command-line and they start from

00:03:20,650 --> 00:03:27,519
the very beginning and then the idea was

00:03:24,609 --> 00:03:30,909
that we would transition into a custom

00:03:27,519 --> 00:03:36,159
policy and that you're starting from a

00:03:30,909 --> 00:03:39,819
fresh slate well that's not how some of

00:03:36,159 --> 00:03:42,099
these some of the things that distros

00:03:39,819 --> 00:03:47,560
want to be able to do they want to know

00:03:42,099 --> 00:03:50,409
that I can't that that I'm verifying a

00:03:47,560 --> 00:03:52,479
signature and that that signature is

00:03:50,409 --> 00:03:56,109
going to happen that verification is

00:03:52,479 --> 00:04:00,040
going to happen even after a custom

00:03:56,109 --> 00:04:03,459
policy is installed so we now added

00:04:00,040 --> 00:04:05,709
support for a bill time policy that

00:04:03,459 --> 00:04:07,510
allows you to that will allow the

00:04:05,709 --> 00:04:10,180
district's or anyone who's building

00:04:07,510 --> 00:04:13,299
their own kernel to say I want to verify

00:04:10,180 --> 00:04:17,680
the que exec for example the que exec

00:04:13,299 --> 00:04:21,010
image and have that verified at runtime

00:04:17,680 --> 00:04:25,300
and no matter what other policy gets

00:04:21,010 --> 00:04:26,080
installed later it will also verify be

00:04:25,300 --> 00:04:30,150
included

00:04:26,080 --> 00:04:34,300
that policy the last thing that we've

00:04:30,150 --> 00:04:38,080
which did not make it into 419 but is

00:04:34,300 --> 00:04:42,370
coming is the ability to differentiate

00:04:38,080 --> 00:04:44,620
based on the architecture what type of

00:04:42,370 --> 00:04:47,319
verification you want based on the

00:04:44,620 --> 00:04:51,340
runtime parameters right on the running

00:04:47,319 --> 00:04:57,180
system for example if you're in secure

00:04:51,340 --> 00:04:57,180
boot then you might want to

00:04:57,449 --> 00:05:03,610
you wouldn't want exec load to work this

00:05:01,060 --> 00:05:06,669
is called the ke exec syscall to work

00:05:03,610 --> 00:05:12,580
but if you're not in secure boot mode

00:05:06,669 --> 00:05:15,940
you would so the idea is based on the

00:05:12,580 --> 00:05:19,509
architecture what you want to do at

00:05:15,940 --> 00:05:21,639
runtime so on x86 you have multiple

00:05:19,509 --> 00:05:25,180
methods of verifying the tags ex

00:05:21,639 --> 00:05:26,949
signature and so we're not lemon we're

00:05:25,180 --> 00:05:29,979
not saying that this has to happen all

00:05:26,949 --> 00:05:35,279
the time but you get to decide what you

00:05:29,979 --> 00:05:35,279
want based on architecture

00:05:44,670 --> 00:05:51,640
so is being used and you've heard it

00:05:47,890 --> 00:05:56,290
mentioned a number of times today but

00:05:51,640 --> 00:05:59,200
it's mostly being based on in closed

00:05:56,290 --> 00:06:02,190
environments in embedded environments

00:05:59,200 --> 00:06:03,370
and to be able to move to a more generic

00:06:02,190 --> 00:06:08,070
kernel

00:06:03,370 --> 00:06:08,070
we still need to close a number of gaps

00:06:18,660 --> 00:06:26,800
so the biggest one was with um I version

00:06:23,500 --> 00:06:30,100
not all file systems support I version

00:06:26,800 --> 00:06:32,230
and we needed to be able to say ok what

00:06:30,100 --> 00:06:35,890
happens on those systems that don't

00:06:32,230 --> 00:06:38,290
support I version and what happens is is

00:06:35,890 --> 00:06:41,200
that we can we definitely know that if

00:06:38,290 --> 00:06:43,330
if we can't detect when a file changes

00:06:41,200 --> 00:06:45,430
then we know that we have to remeasure

00:06:43,330 --> 00:06:49,450
reappraise redo it we have to

00:06:45,430 --> 00:06:52,210
recalculate the hash and so that support

00:06:49,450 --> 00:06:54,940
is now in and then I version becomes

00:06:52,210 --> 00:06:58,120
just a performance improvement if you

00:06:54,940 --> 00:07:00,850
want if you want the performance then

00:06:58,120 --> 00:07:03,760
either up use a different file system

00:07:00,850 --> 00:07:07,410
that supports I version adds support for

00:07:03,760 --> 00:07:13,360
I version in that for that file system

00:07:07,410 --> 00:07:19,000
and then the other example of not not

00:07:13,360 --> 00:07:25,600
knowing where when a file changes is the

00:07:19,000 --> 00:07:31,000
fuse file system and so the question is

00:07:25,600 --> 00:07:32,950
is the file we can determine we can't

00:07:31,000 --> 00:07:34,660
determine anything about the file even

00:07:32,950 --> 00:07:37,270
if we measure the file there's no

00:07:34,660 --> 00:07:39,730
guarantee that the file that the fuse

00:07:37,270 --> 00:07:42,970
file system gave us is actually what's

00:07:39,730 --> 00:07:47,640
going to be presented later when we go

00:07:42,970 --> 00:07:50,560
to use it so do we trust and under what

00:07:47,640 --> 00:07:53,590
circumstances do trust that the file

00:07:50,560 --> 00:07:55,720
that the fuse file has changed or hasn't

00:07:53,590 --> 00:07:58,810
changed so

00:07:55,720 --> 00:08:01,480
we now have unprivileged mounting of

00:07:58,810 --> 00:08:04,660
fuse file systems and for those we

00:08:01,480 --> 00:08:06,330
basically say we don't trust that the

00:08:04,660 --> 00:08:12,820
file system is going to give us what

00:08:06,330 --> 00:08:18,100
anything the same a second time in the

00:08:12,820 --> 00:08:20,890
case of privileged mounts these are kind

00:08:18,100 --> 00:08:24,940
of inverted worse

00:08:20,890 --> 00:08:25,570
the first one is saying where will

00:08:24,940 --> 00:08:29,800
romesha

00:08:25,570 --> 00:08:32,140
the file every time that it's used

00:08:29,800 --> 00:08:36,640
because we don't know we can't detect

00:08:32,140 --> 00:08:39,310
when it has changed and the other option

00:08:36,640 --> 00:08:41,950
what we measure reappraised do

00:08:39,310 --> 00:08:43,800
everything again and the other option is

00:08:41,950 --> 00:08:46,960
to say okay

00:08:43,800 --> 00:08:49,290
we still don't know even though it was

00:08:46,960 --> 00:08:51,910
mounted by roof we still don't know if

00:08:49,290 --> 00:08:54,040
it the file has changed and it could

00:08:51,910 --> 00:08:57,040
give us anything that we want and these

00:08:54,040 --> 00:08:59,020
really should be revert inverted as to

00:08:57,040 --> 00:09:01,960
which is the default and which is

00:08:59,020 --> 00:09:04,000
optional the problem is is that if we do

00:09:01,960 --> 00:09:08,110
that then we're breaking all of user

00:09:04,000 --> 00:09:11,890
space so for now if you don't trust fuse

00:09:08,110 --> 00:09:15,960
then provide a policy that says fails

00:09:11,890 --> 00:09:15,960
safely on the boot command line

00:09:22,780 --> 00:09:29,740
so there were there are a couple of

00:09:26,480 --> 00:09:35,240
problems that have been around and the

00:09:29,740 --> 00:09:39,620
the biggest one was that that's that we

00:09:35,240 --> 00:09:44,830
reuse the I'm mutex in the global I

00:09:39,620 --> 00:09:47,150
mutex and at the same time EXIF s also

00:09:44,830 --> 00:09:51,110
decided all of a sudden to drop their

00:09:47,150 --> 00:09:54,710
own local one and to use the kernel one

00:09:51,110 --> 00:09:58,940
so we basically there was a lot a

00:09:54,710 --> 00:10:03,320
locking error that has been on Dmitri

00:09:58,940 --> 00:10:07,400
Kazakh and reintroduced our own I'm a

00:10:03,320 --> 00:10:10,250
mutex our unlocking and and so that

00:10:07,400 --> 00:10:12,770
problem is now resolved the TPM

00:10:10,250 --> 00:10:17,540
performance has has improved

00:10:12,770 --> 00:10:21,680
tremendously the first thing that we did

00:10:17,540 --> 00:10:24,410
a couple of years ago now is that we we

00:10:21,680 --> 00:10:27,560
went from M sleep to the HR timer and

00:10:24,410 --> 00:10:28,280
then improved the TPM performance but

00:10:27,560 --> 00:10:32,480
this year

00:10:28,280 --> 00:10:36,830
further work has been done by Nana and

00:10:32,480 --> 00:10:43,720
we and she's getting about a 83 percent

00:10:36,830 --> 00:10:48,350
performance improvement and my colleague

00:10:43,720 --> 00:10:50,870
Stefan has with with the SEM with the

00:10:48,350 --> 00:10:54,350
audit people here with Paul's help and

00:10:50,870 --> 00:10:58,460
others help has disambiguated some of

00:10:54,350 --> 00:11:02,870
the audit records and so now as soon as

00:10:58,460 --> 00:11:05,570
the auditing IDs are up there will start

00:11:02,870 --> 00:11:07,670
to be able to do the Nate namespacing

00:11:05,570 --> 00:11:12,710
and the first the imma namespacing the

00:11:07,670 --> 00:11:15,350
first one will be based on audit so hmm

00:11:12,710 --> 00:11:17,510
there's imma audit and that will be

00:11:15,350 --> 00:11:26,420
probably the first namespace i'ma name

00:11:17,510 --> 00:11:30,260
spacing so thank you Peter I think

00:11:26,420 --> 00:11:33,590
that's how you pronounce his name he did

00:11:30,260 --> 00:11:35,540
a lot of work on the i'ma measurement

00:11:33,590 --> 00:11:39,980
testing tools

00:11:35,540 --> 00:11:42,800
test that's in LTP and it's now it

00:11:39,980 --> 00:11:47,210
hasn't hadn't been refreshed in quite a

00:11:42,800 --> 00:11:50,780
while and so that that work has been up

00:11:47,210 --> 00:11:54,170
streamed David Jacobson who worked with

00:11:50,780 --> 00:11:56,810
with worked with our team in writing

00:11:54,170 --> 00:12:01,370
starting to write a regression testing

00:11:56,810 --> 00:12:04,250
framework for imma like EVM it's in the

00:12:01,370 --> 00:12:08,510
imma it will be in the i'ma EVM utils it

00:12:04,250 --> 00:12:11,660
needs some review but that is going

00:12:08,510 --> 00:12:13,940
that's going to happen and the purpose

00:12:11,660 --> 00:12:17,810
of it is so that we can have a

00:12:13,940 --> 00:12:19,940
standalone test suite just like Casey

00:12:17,810 --> 00:12:23,990
was saying having test Suites and

00:12:19,940 --> 00:12:27,350
regression testing and this is um is

00:12:23,990 --> 00:12:29,660
really important so that others are in

00:12:27,350 --> 00:12:31,730
other parts of the kernel aren't

00:12:29,660 --> 00:12:36,230
breaking it and everybody can do their

00:12:31,730 --> 00:12:38,500
own regression testing and it's meant to

00:12:36,230 --> 00:12:44,180
be used directly on the running kernel

00:12:38,500 --> 00:12:46,520
and patches once it does once it is up

00:12:44,180 --> 00:12:51,200
streamed it will be included in i'ma EVM

00:12:46,520 --> 00:12:53,450
utils and then the X efest introduction

00:12:51,200 --> 00:12:57,500
and usage of that will be up streamed as

00:12:53,450 --> 00:13:05,870
well and I assume that an equivalent one

00:12:57,500 --> 00:13:08,960
for LTP will be up streamed these are

00:13:05,870 --> 00:13:11,510
all the things that are in progress that

00:13:08,960 --> 00:13:14,900
are being that were mentioned today some

00:13:11,510 --> 00:13:17,720
of them some of the talks will be given

00:13:14,900 --> 00:13:22,210
at Ellis Europe that whirring on that

00:13:17,720 --> 00:13:26,930
are not being given here the one that

00:13:22,210 --> 00:13:30,610
that that will be at is a that's being

00:13:26,930 --> 00:13:33,440
given at LSS Europe is about the

00:13:30,610 --> 00:13:37,040
measurement list and how to protect the

00:13:33,440 --> 00:13:39,910
measurement list that addresses that I'm

00:13:37,040 --> 00:13:39,910
a measurement list

00:13:43,279 --> 00:13:51,870
and lastly how to help we need more

00:13:49,529 --> 00:13:54,690
people to be reviewing patches we have

00:13:51,870 --> 00:13:57,810
people that are posting patches that

00:13:54,690 --> 00:14:01,199
don't review other people's patches and

00:13:57,810 --> 00:14:04,170
we could definitely use some help with

00:14:01,199 --> 00:14:07,110
getting some more reviews and those that

00:14:04,170 --> 00:14:12,990
are posting patches should be reviewing

00:14:07,110 --> 00:14:15,510
patches too to help the community the

00:14:12,990 --> 00:14:19,079
other aspect of this is that we need

00:14:15,510 --> 00:14:22,019
more people to be saying what is

00:14:19,079 --> 00:14:24,089
appropriate for imma imma is being taken

00:14:22,019 --> 00:14:26,339
in multiple different directions

00:14:24,089 --> 00:14:30,060
everybody wants to do something with it

00:14:26,339 --> 00:14:31,800
and the question is is this appropriate

00:14:30,060 --> 00:14:34,699
and there needs to be more of a

00:14:31,800 --> 00:14:40,560
discussion rather than just me saying

00:14:34,699 --> 00:14:42,029
answering that question and yeah for

00:14:40,560 --> 00:14:45,779
those that want to help with the

00:14:42,029 --> 00:14:49,290
policies we're looking for sample

00:14:45,779 --> 00:14:49,740
policies that can be used and to include

00:14:49,290 --> 00:14:54,390
them

00:14:49,740 --> 00:14:58,740
and lastly new functions new features

00:14:54,390 --> 00:15:02,339
are being up streamed and please think

00:14:58,740 --> 00:15:06,449
about signature that everything that

00:15:02,339 --> 00:15:09,029
gets up streams should require there

00:15:06,449 --> 00:15:12,300
should be ways of not breaking imma and

00:15:09,029 --> 00:15:14,190
don't introduce new measurement new

00:15:12,300 --> 00:15:16,430
measurement appraisal other types of

00:15:14,190 --> 00:15:16,430
gaps

00:15:19,900 --> 00:15:27,680
thank you there's been a lot of for the

00:15:25,400 --> 00:15:31,160
work the automated testing work for the

00:15:27,680 --> 00:15:34,310
minor bug fixes they're not minor but

00:15:31,160 --> 00:15:40,640
not included in the whole list of what

00:15:34,310 --> 00:15:44,900
was up streamed and the help for the SSL

00:15:40,640 --> 00:15:52,460
help and other packaging issues that we

00:15:44,900 --> 00:15:53,660
had with I'm a EVM utils I just had one

00:15:52,460 --> 00:15:57,050
comment I was thinking if you are

00:15:53,660 --> 00:15:59,600
looking for input on where to take the

00:15:57,050 --> 00:16:02,510
integrity subsystem apart as well as

00:15:59,600 --> 00:16:05,840
here maybe submit a proposal from

00:16:02,510 --> 00:16:08,120
microcon to the plumbers plumbers

00:16:05,840 --> 00:16:10,130
conference might be the next plumbers

00:16:08,120 --> 00:16:11,900
might be useful to get people because

00:16:10,130 --> 00:16:14,990
we've had successful things with TPM in

00:16:11,900 --> 00:16:23,200
the past great they're getting user land

00:16:14,990 --> 00:16:23,200
and dystrophic involved any questions

00:16:23,950 --> 00:16:28,789
thanks me thank you

00:16:26,080 --> 00:16:28,789

YouTube URL: https://www.youtube.com/watch?v=7UCUdA94Mek


