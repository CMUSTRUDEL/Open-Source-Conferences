Title: Security Module Stacks that Don't Fall Over - Casey Schaufler, Intel
Publication date: 2018-08-31
Playlist: Linux Security Summit North America 2018 - Vancouver
Description: 
	Security Module Stacks that Don't Fall Over - Casey Schaufler, Intel

Security module stacking will provide a new level of flexibility in configuring system security. But there's a real risk that combining security models will result in a system that may be secure, but isn't useful. This may also be true when the same security module is used with multiple policy definitions. Casey Schaufler, the module stacking developer, will discuss the pitfalls of security module stacking and how they can be avoided. He will be talking about the configuration of existing modules and where they have known conflicts. There will also be discussion about how new modules should use the infrastructure in a way that reduces the potential for conflicts. A special emphasis will be placed on networking, where dragons of various colors lurk behind every acronym.

About Casey Schaufler
Casey Schaufler worked on Unix kernels in the 1970s-90s. He has implemented access control lists, mandatory access control, extended filesystem attributes, X11 access controls, network protocols and more audit systems than is really healthy. His involvement in Linux began with the Linux Security Module work at the turn of the century, introducing the Smack LSM in 2007. Casey is reworking the LSM infrastructure to support multiple concurrent modules. He has spoken at Linux Conference Australia, OLS, LinuxCon, Linux Plumbers and many other venues.
Captions: 
	00:00:00,210 --> 00:00:04,020
thank you very much and I don't know how

00:00:02,639 --> 00:00:05,370
long we will keep this as an annual

00:00:04,020 --> 00:00:07,350
thing maybe people just kind of get it

00:00:05,370 --> 00:00:09,840
all done and then we won't have to talk

00:00:07,350 --> 00:00:13,559
about it anymore

00:00:09,840 --> 00:00:16,049
hi I'm Casey Xiao Fleur the Linux kernel

00:00:13,559 --> 00:00:18,390
developer starting on UNIX in the 1970s

00:00:16,049 --> 00:00:22,470
worked primarily on supercomputers in

00:00:18,390 --> 00:00:24,539
the 1990s did the smack Linux security

00:00:22,470 --> 00:00:26,460
module and I've been spending the past

00:00:24,539 --> 00:00:29,250
couple of years working on security

00:00:26,460 --> 00:00:32,309
module stacking so what is a Linux

00:00:29,250 --> 00:00:33,989
security module and why do we care what

00:00:32,309 --> 00:00:36,960
a Linux security module consists of this

00:00:33,989 --> 00:00:40,379
is a set of hooks that you can implement

00:00:36,960 --> 00:00:42,510
for various active various places in the

00:00:40,379 --> 00:00:45,480
kernel to make additional access control

00:00:42,510 --> 00:00:47,219
decisions to go along with the normal

00:00:45,480 --> 00:00:49,289
access control decisions that the kernel

00:00:47,219 --> 00:00:52,699
is going to be making for traditional

00:00:49,289 --> 00:00:54,660
access controls the reason why we have a

00:00:52,699 --> 00:01:00,090
infrastructure for this rather than just

00:00:54,660 --> 00:01:04,320
an implementation is that early on we

00:01:00,090 --> 00:01:06,900
managed to make Lennis a little bit

00:01:04,320 --> 00:01:08,610
uncomfortable with the fact that we

00:01:06,900 --> 00:01:12,150
couldn't agree on what it was we wanted

00:01:08,610 --> 00:01:14,310
to do after a point where he shouted out

00:01:12,150 --> 00:01:16,110
you security people are insane I don't

00:01:14,310 --> 00:01:18,810
want to hear about it anymore just gave

00:01:16,110 --> 00:01:20,430
me an infrastructure and that way I

00:01:18,810 --> 00:01:23,610
don't have you guys can do whatever you

00:01:20,430 --> 00:01:26,549
want I don't have to worry about it

00:01:23,610 --> 00:01:28,590
a security module stack is a collection

00:01:26,549 --> 00:01:31,640
of Linux security modules that makes it

00:01:28,590 --> 00:01:34,049
really easy they get called in order and

00:01:31,640 --> 00:01:37,079
we have what I call a bail on fail

00:01:34,049 --> 00:01:40,079
policy so the first security module that

00:01:37,079 --> 00:01:44,430
says I don't like this don't do it stops

00:01:40,079 --> 00:01:47,250
the execution returns to the system

00:01:44,430 --> 00:01:49,380
returns the error and then access is

00:01:47,250 --> 00:01:51,689
denied no no further processing is done

00:01:49,380 --> 00:01:55,680
that's important we'll come back to that

00:01:51,689 --> 00:01:59,610
later so we have two kinds of security

00:01:55,680 --> 00:02:03,270
modules today and one is a minor module

00:01:59,610 --> 00:02:08,250
minor modules have the aspect they don't

00:02:03,270 --> 00:02:10,530
maintain any in a state so they make

00:02:08,250 --> 00:02:12,989
their decisions based on the information

00:02:10,530 --> 00:02:15,790
that's readily available at that time

00:02:12,989 --> 00:02:18,280
they don't keep track of anything they

00:02:15,790 --> 00:02:21,370
just make a minor change make a change

00:02:18,280 --> 00:02:24,760
for example what's in a path name is

00:02:21,370 --> 00:02:26,530
this an inode is this inode a symlink is

00:02:24,760 --> 00:02:32,230
it a directory you know that kind of

00:02:26,530 --> 00:02:34,720
information a major security module will

00:02:32,230 --> 00:02:37,569
actually maintain state about the system

00:02:34,720 --> 00:02:40,420
he'll maintain all attributes attributes

00:02:37,569 --> 00:02:43,379
about for exemple SELinux will contain

00:02:40,420 --> 00:02:48,639
keep a file context on every file a

00:02:43,379 --> 00:02:51,099
process context in order to achieve this

00:02:48,639 --> 00:02:52,599
we have a system whereby most of the

00:02:51,099 --> 00:02:55,150
current major kernel data structures

00:02:52,599 --> 00:02:58,180
have a pointer to what we call a

00:02:55,150 --> 00:03:00,849
security block and each of the major

00:02:58,180 --> 00:03:04,769
modules can use these security blobs

00:03:00,849 --> 00:03:06,069
contain their information we also have

00:03:04,769 --> 00:03:10,389
mechanism called

00:03:06,069 --> 00:03:13,930
net label which allows you to set a sip

00:03:10,389 --> 00:03:16,569
zone clip so security options on IP

00:03:13,930 --> 00:03:18,010
packets and we have thing called sec

00:03:16,569 --> 00:03:20,169
marks which are used in some of the

00:03:18,010 --> 00:03:23,169
other networking mechanisms to transfer

00:03:20,169 --> 00:03:24,579
security information attributes along

00:03:23,169 --> 00:03:32,979
with the packet says they're going along

00:03:24,579 --> 00:03:34,690
with in the system so as of 4.18 we have

00:03:32,979 --> 00:03:36,930
a mechanism for stacking where we can go

00:03:34,690 --> 00:03:44,409
use all the minor modules we want and

00:03:36,930 --> 00:03:46,359
then one of the major modules we do that

00:03:44,409 --> 00:03:48,069
because we've got a problem where we've

00:03:46,359 --> 00:03:51,310
only got one pointer in each of these

00:03:48,069 --> 00:03:54,090
major security one of these major data

00:03:51,310 --> 00:03:56,379
structures and so we can only have one

00:03:54,090 --> 00:03:57,819
set of information because of course

00:03:56,379 --> 00:04:00,010
each of these modules wants to manage

00:03:57,819 --> 00:04:01,239
that information themselves so the first

00:04:00,010 --> 00:04:03,639
stumbling block here is our blob

00:04:01,239 --> 00:04:06,760
pointers this is the thing that makes it

00:04:03,639 --> 00:04:08,799
so you we have to we would have a

00:04:06,760 --> 00:04:10,739
security module stack that would fall

00:04:08,799 --> 00:04:15,819
down if we actually met ran all the

00:04:10,739 --> 00:04:18,130
modules together so the security blob

00:04:15,819 --> 00:04:19,870
usage is actually pretty uniform it

00:04:18,130 --> 00:04:23,260
turns out that selinux and smack use

00:04:19,870 --> 00:04:25,510
them all Tamayo only uses the credential

00:04:23,260 --> 00:04:26,620
blob and a Parmer uses the credential

00:04:25,510 --> 00:04:29,100
blob file

00:04:26,620 --> 00:04:32,200
and the sucker blob and the task blob

00:04:29,100 --> 00:04:34,480
now app Armour is unique and using the

00:04:32,200 --> 00:04:38,290
task blob for now but we'll see that

00:04:34,480 --> 00:04:42,040
change as time goes on so with this set

00:04:38,290 --> 00:04:44,620
of blobs obviously if if a parmer and

00:04:42,040 --> 00:04:46,060
smack or at bomber and su- wants to use

00:04:44,620 --> 00:04:50,680
the same blob they can't because they're

00:04:46,060 --> 00:04:52,120
pointing into the same place so the

00:04:50,680 --> 00:04:54,070
resolution to this is actually fairly

00:04:52,120 --> 00:04:57,280
simple we should have thought of it

00:04:54,070 --> 00:04:59,820
years ago and that is that rather than

00:04:57,280 --> 00:05:02,620
having the individual security modules

00:04:59,820 --> 00:05:04,930
manage the blobs themselves they just

00:05:02,620 --> 00:05:06,280
tell the security infrastructure how

00:05:04,930 --> 00:05:09,600
much space they want in each of the

00:05:06,280 --> 00:05:12,580
blobs and the mod and the infrastructure

00:05:09,600 --> 00:05:16,080
Matt keeps track of what everybody wants

00:05:12,580 --> 00:05:19,840
and tells them where within the blob

00:05:16,080 --> 00:05:24,520
they should find their information so

00:05:19,840 --> 00:05:27,370
very very straightforward there so if we

00:05:24,520 --> 00:05:32,380
go ahead and do this this solves all the

00:05:27,370 --> 00:05:34,990
problems right well actually if we if we

00:05:32,380 --> 00:05:36,250
do the infrastructure manage blobs we

00:05:34,990 --> 00:05:39,610
can pull Tamayo

00:05:36,250 --> 00:05:41,680
out of the out of the list of every one

00:05:39,610 --> 00:05:46,990
but the rest of them we still have have

00:05:41,680 --> 00:05:48,370
more issues here well what else could be

00:05:46,990 --> 00:05:50,320
the problem here right well the next

00:05:48,370 --> 00:05:55,060
stumbling block are something called sec

00:05:50,320 --> 00:05:58,150
ids in the original security module

00:05:55,060 --> 00:06:01,030
architecture there are a number of

00:05:58,150 --> 00:06:03,460
interfaces that use a 32-bit integer as

00:06:01,030 --> 00:06:05,289
a representation of the security

00:06:03,460 --> 00:06:07,510
information as is very convenient you

00:06:05,289 --> 00:06:13,320
can pass it around you can put it in

00:06:07,510 --> 00:06:15,820
into a network packet and network

00:06:13,320 --> 00:06:17,620
information and it just goes around you

00:06:15,820 --> 00:06:20,200
and when it comes back to the security

00:06:17,620 --> 00:06:21,130
modular a new module looks it up goes

00:06:20,200 --> 00:06:23,700
and use that but when you've got

00:06:21,130 --> 00:06:26,860
multiple security modules using it

00:06:23,700 --> 00:06:29,139
you've got 32 bits and if each of the

00:06:26,860 --> 00:06:30,789
security modules wants 32 bits to

00:06:29,139 --> 00:06:33,639
represent their security information

00:06:30,789 --> 00:06:38,550
you've got a problem you've got the ten

00:06:33,639 --> 00:06:38,550
pounds of flour on a five-pound bag so

00:06:40,360 --> 00:06:44,980
what we have to do then is come up with

00:06:42,590 --> 00:06:49,010
a way to get more information available

00:06:44,980 --> 00:06:50,900
for all of the security modules we have

00:06:49,010 --> 00:06:52,670
a set of interfaces that use the

00:06:50,900 --> 00:06:55,100
security module for example if you're

00:06:52,670 --> 00:06:58,190
doing the audit system it takes the

00:06:55,100 --> 00:07:00,410
security the SEC ID that exists it's

00:06:58,190 --> 00:07:02,270
passed and it uses that to look up then

00:07:00,410 --> 00:07:04,610
the text string that it wants to print

00:07:02,270 --> 00:07:06,440
when it creates the audit record well

00:07:04,610 --> 00:07:07,970
again if you've only got 32 bits and

00:07:06,440 --> 00:07:10,130
you've got more than that information

00:07:07,970 --> 00:07:14,290
from the security modules you can't

00:07:10,130 --> 00:07:17,180
really use that so what are you gonna do

00:07:14,290 --> 00:07:18,740
well well obvious thing you're going to

00:07:17,180 --> 00:07:21,590
do is you're going to replace this 32

00:07:18,740 --> 00:07:23,510
bit entity with a bigger entity

00:07:21,590 --> 00:07:25,010
it's called streck's I've called it a

00:07:23,510 --> 00:07:29,120
struct SEC IDs it could be called

00:07:25,010 --> 00:07:31,160
anything else and you provide an entry

00:07:29,120 --> 00:07:32,780
in each in this structure for each of

00:07:31,160 --> 00:07:35,960
the security modules that actually uses

00:07:32,780 --> 00:07:37,430
it if you're not gonna use stacking you

00:07:35,960 --> 00:07:39,440
don't really want to have that overhead

00:07:37,430 --> 00:07:42,380
so instead of having a structure you

00:07:39,440 --> 00:07:43,790
have a Union and in the Union so when it

00:07:42,380 --> 00:07:46,160
actually gets created you actually still

00:07:43,790 --> 00:07:47,540
have a 32 bit quantity and so you're

00:07:46,160 --> 00:07:49,730
back to where you were if you're not

00:07:47,540 --> 00:07:51,230
doing stacking and that's kind of an

00:07:49,730 --> 00:07:54,080
important thing we don't want to put

00:07:51,230 --> 00:07:58,250
excessive overhead in place where we

00:07:54,080 --> 00:07:59,720
don't have to but when you do this

00:07:58,250 --> 00:08:02,240
you're gonna have to identify which of

00:07:59,720 --> 00:08:03,590
these entities in the structure secondes

00:08:02,240 --> 00:08:06,290
you're gonna want to use when you have a

00:08:03,590 --> 00:08:08,450
sec ID well if you're within the

00:08:06,290 --> 00:08:11,810
security module that's easy you just use

00:08:08,450 --> 00:08:15,200
your own princess selinux you use the

00:08:11,810 --> 00:08:16,580
the the point selinux if you're and

00:08:15,200 --> 00:08:20,390
smacking is the point smack and

00:08:16,580 --> 00:08:24,290
everybody's happy if you're in net

00:08:20,390 --> 00:08:27,680
filter net filter actually has a a mode

00:08:24,290 --> 00:08:29,320
setup so that you you can identify which

00:08:27,680 --> 00:08:31,790
security module you're going to use

00:08:29,320 --> 00:08:35,570
currently the only one that's defined is

00:08:31,790 --> 00:08:38,479
selinux and actually smack piggybacks on

00:08:35,570 --> 00:08:40,520
this in an inappropriate fashion so we

00:08:38,479 --> 00:08:42,500
have to add an entry for smacks with

00:08:40,520 --> 00:08:45,140
smacking you can do it as well but at

00:08:42,500 --> 00:08:46,550
this point you're going to yeah because

00:08:45,140 --> 00:08:48,290
you've got the the differentiation

00:08:46,550 --> 00:08:49,640
available in the structure you can

00:08:48,290 --> 00:08:52,400
identify which one that's going to go to

00:08:49,640 --> 00:08:53,680
and if you're not doing stacking it'll

00:08:52,400 --> 00:08:55,850
all just go into this

00:08:53,680 --> 00:09:00,560
and it won't matter because you're not

00:08:55,850 --> 00:09:02,600
stacking if you're looking at the

00:09:00,560 --> 00:09:05,420
attributes on a process for example if

00:09:02,600 --> 00:09:07,990
using SOP R Seck you're going to need

00:09:05,420 --> 00:09:11,480
some way to identify which one you want

00:09:07,990 --> 00:09:13,520
now one of the early ideas was well

00:09:11,480 --> 00:09:16,760
we'll just take all of them and we'll

00:09:13,520 --> 00:09:18,440
what will will make a big long string

00:09:16,760 --> 00:09:22,190
that's got all of the security module

00:09:18,440 --> 00:09:24,080
names in it and we'll differentiate it

00:09:22,190 --> 00:09:25,250
will put them comma separated list and

00:09:24,080 --> 00:09:28,190
we'll parse it and everybody will be

00:09:25,250 --> 00:09:30,710
happy and that got really really really

00:09:28,190 --> 00:09:33,530
ugly and is a hundred percent not

00:09:30,710 --> 00:09:36,230
backwards compatible so instead we're

00:09:33,530 --> 00:09:38,540
working with the notion of I'm going to

00:09:36,230 --> 00:09:41,300
have what we call a display LSM I'm

00:09:38,540 --> 00:09:44,840
going to set it on a per process basis

00:09:41,300 --> 00:09:47,180
and I'm going to say this is the LSM I

00:09:44,840 --> 00:09:48,860
want you to tell me about and if I don't

00:09:47,180 --> 00:09:53,060
set it it's just going to use the first

00:09:48,860 --> 00:09:56,390
one which is going to be SELinux so I

00:09:53,060 --> 00:09:58,340
can come in and I can say when I when I

00:09:56,390 --> 00:10:00,200
want to use SOP R Seck I'm gonna see

00:09:58,340 --> 00:10:01,610
about SELinux longness you've got smack

00:10:00,200 --> 00:10:03,650
or I'm gonna see about that bummer when

00:10:01,610 --> 00:10:05,540
a farmer gets there or whatever security

00:10:03,650 --> 00:10:07,610
module you want to use so long as you

00:10:05,540 --> 00:10:13,490
tell it which one it is it'll give you

00:10:07,610 --> 00:10:16,010
that information so if we introduced the

00:10:13,490 --> 00:10:20,950
struct SEC IDs then we can actually pull

00:10:16,010 --> 00:10:24,740
a Parmer out of our list as well so then

00:10:20,950 --> 00:10:28,640
the only thing you can't do is run smack

00:10:24,740 --> 00:10:30,170
and selinux at the same time well why

00:10:28,640 --> 00:10:33,770
not I was like haven't we solved all the

00:10:30,170 --> 00:10:36,050
problems yet well not quite

00:10:33,770 --> 00:10:38,650
the first stumbling block we've got to

00:10:36,050 --> 00:10:41,480
to work with their amount options

00:10:38,650 --> 00:10:45,830
currently the way the mount code is set

00:10:41,480 --> 00:10:48,410
up it will call into the security code

00:10:45,830 --> 00:10:52,190
and say if if you find an option you

00:10:48,410 --> 00:10:53,870
don't know about give me an error well

00:10:52,190 --> 00:10:55,160
if you've got smack in selinux running

00:10:53,870 --> 00:10:59,600
at the same time they both have mount

00:10:55,160 --> 00:11:02,860
options so if you say mount - Oh sec

00:10:59,600 --> 00:11:04,880
ylabel and smack FS root equals star

00:11:02,860 --> 00:11:06,740
selinux is going to say I don't know

00:11:04,880 --> 00:11:12,860
about this smack fsor

00:11:06,740 --> 00:11:15,470
option I got a return an error so what

00:11:12,860 --> 00:11:18,410
we have to do is we have to untrain

00:11:15,470 --> 00:11:21,970
these these security modules to report

00:11:18,410 --> 00:11:24,440
an error if they don't see an option

00:11:21,970 --> 00:11:27,320
this does lead us to a problem whereby

00:11:24,440 --> 00:11:28,760
now if there's an option that neither of

00:11:27,320 --> 00:11:31,190
them recognizes they're not going to

00:11:28,760 --> 00:11:32,990
report an error so we do have a little

00:11:31,190 --> 00:11:35,089
bit of an issue there with with error

00:11:32,990 --> 00:11:38,839
reporting with possibility the

00:11:35,089 --> 00:11:44,690
possibility of an invalid option getting

00:11:38,839 --> 00:11:46,760
passed and we have to have separate

00:11:44,690 --> 00:11:49,399
mount option structures for each of them

00:11:46,760 --> 00:11:50,839
because each of the the security modules

00:11:49,399 --> 00:11:54,950
because again they're maintaining

00:11:50,839 --> 00:11:57,410
information about the mount mount

00:11:54,950 --> 00:12:00,440
information about state the current

00:11:57,410 --> 00:12:04,610
mount infrastructure code is a little

00:12:00,440 --> 00:12:07,279
bit Baroque but the good news is David

00:12:04,610 --> 00:12:10,279
Howells is working on a new scheme which

00:12:07,279 --> 00:12:14,240
is even more Baroque but which solves

00:12:10,279 --> 00:12:15,980
all these problems so we have one of

00:12:14,240 --> 00:12:20,200
those wonderful situations where we have

00:12:15,980 --> 00:12:20,200
to choose between baroque and broken

00:12:21,430 --> 00:12:29,959
sorry and that's not our last stumbling

00:12:26,959 --> 00:12:31,339
that's not our last stumbling block but

00:12:29,959 --> 00:12:38,660
hopefully that's the worst joke I tell

00:12:31,339 --> 00:12:43,040
today okay so the next stumbling block

00:12:38,660 --> 00:12:44,510
is isn't that label as I as I mentioned

00:12:43,040 --> 00:12:50,450
before net label is a mechanism whereby

00:12:44,510 --> 00:12:53,870
what we can put a network packet put an

00:12:50,450 --> 00:12:59,660
IP header sorry put an IP option into

00:12:53,870 --> 00:13:03,200
the IP header for packets to to provide

00:12:59,660 --> 00:13:04,850
information about the security of the

00:13:03,200 --> 00:13:10,160
process that's sending the packet and

00:13:04,850 --> 00:13:11,720
this is great we get one sip so tag

00:13:10,160 --> 00:13:13,720
because that's the the current

00:13:11,720 --> 00:13:17,350
implementation we probably could

00:13:13,720 --> 00:13:17,350
convince Paul with a

00:13:18,530 --> 00:13:26,490
no multiple - okay yeah okay I won't be

00:13:25,200 --> 00:13:30,810
able to convince them then we get one

00:13:26,490 --> 00:13:32,160
tag fine so what that means is that if

00:13:30,810 --> 00:13:34,680
it's heard you've got two security

00:13:32,160 --> 00:13:37,890
modules that want to use this they're

00:13:34,680 --> 00:13:44,370
gonna have to agree on what information

00:13:37,890 --> 00:13:51,750
can go in that packet that might not be

00:13:44,370 --> 00:13:53,850
as simple as it sounds for one thing one

00:13:51,750 --> 00:13:55,530
of the things that's interesting about

00:13:53,850 --> 00:13:56,910
the net label system that's kind of

00:13:55,530 --> 00:13:58,680
different from the rest of the way the

00:13:56,910 --> 00:14:02,880
rest of the security infrastructure

00:13:58,680 --> 00:14:06,390
works is that the security modules push

00:14:02,880 --> 00:14:08,280
their data from that label whereas all

00:14:06,390 --> 00:14:10,190
the the other interfaces pull the

00:14:08,280 --> 00:14:14,850
information out of the security modules

00:14:10,190 --> 00:14:16,770
so when you create a socket you send the

00:14:14,850 --> 00:14:18,480
inference end the label information you

00:14:16,770 --> 00:14:22,380
want to the socket or when you change

00:14:18,480 --> 00:14:26,010
the attribute information on on a

00:14:22,380 --> 00:14:29,190
process you sends that to the socket as

00:14:26,010 --> 00:14:31,770
opposed to when the packet gets ready to

00:14:29,190 --> 00:14:33,570
be sent you pull the information so

00:14:31,770 --> 00:14:34,950
that's a bit different the other thing

00:14:33,570 --> 00:14:37,260
that's a bit different here is that

00:14:34,950 --> 00:14:40,140
you're not putting in an abstracted or

00:14:37,260 --> 00:14:41,790
or module specific information out onto

00:14:40,140 --> 00:14:43,950
the socket you're putting what's going

00:14:41,790 --> 00:14:46,260
to go out onto the network into the sock

00:14:43,950 --> 00:14:48,270
this is very efficient this makes it a

00:14:46,260 --> 00:14:50,400
lot better a lot faster we were actually

00:14:48,270 --> 00:14:52,470
going to send the packet but it makes it

00:14:50,400 --> 00:14:56,970
more difficult to do anything resembling

00:14:52,470 --> 00:14:58,620
a compromise or a computation or let's

00:14:56,970 --> 00:15:01,830
work this out amongst ourselves kind of

00:14:58,620 --> 00:15:03,570
situation and in the end you may not

00:15:01,830 --> 00:15:06,600
actually use what the label that you

00:15:03,570 --> 00:15:06,870
actually pushed out to the socket why is

00:15:06,600 --> 00:15:12,180
that

00:15:06,870 --> 00:15:14,910
here you cry net label allows you to

00:15:12,180 --> 00:15:18,860
configure individual networks individual

00:15:14,910 --> 00:15:22,740
hosts to have specific specific

00:15:18,860 --> 00:15:24,270
characteristics about how the neighbor

00:15:22,740 --> 00:15:26,610
labeling is going to work on those

00:15:24,270 --> 00:15:31,190
networks or two particular hosts for

00:15:26,610 --> 00:15:31,190
that selinux

00:15:31,279 --> 00:15:38,370
by default works with unlabeled networks

00:15:35,570 --> 00:15:40,610
typically he uses policy to define how

00:15:38,370 --> 00:15:43,290
you're going to talk between processes

00:15:40,610 --> 00:15:45,990
where you where that are coming from

00:15:43,290 --> 00:15:49,890
unlabeled networks smack on the other

00:15:45,990 --> 00:15:52,079
hand wants to use labeled networks

00:15:49,890 --> 00:15:54,350
wherever possible because it wants to

00:15:52,079 --> 00:15:56,519
get the information about the process

00:15:54,350 --> 00:15:58,980
wherever possible so that it can

00:15:56,519 --> 00:16:02,040
actually make a decision and it will

00:15:58,980 --> 00:16:03,930
specify specific smack labels as being

00:16:02,040 --> 00:16:06,420
the ones to use when you encounter an

00:16:03,930 --> 00:16:09,660
unlabeled packet or that will be sent

00:16:06,420 --> 00:16:11,160
out unlabeled is a very different

00:16:09,660 --> 00:16:14,910
different philosophy the other thing

00:16:11,160 --> 00:16:18,269
about SC Linux is SELinux will send will

00:16:14,910 --> 00:16:21,269
do the labeling based solely on the MLS

00:16:18,269 --> 00:16:26,190
and MCS components it won't use the

00:16:21,269 --> 00:16:33,779
roles the or the other information that

00:16:26,190 --> 00:16:37,380
it has unless you use tag type 6 no yeah

00:16:33,779 --> 00:16:39,000
that's okay yeah loopback ok Paulo's

00:16:37,380 --> 00:16:49,079
corrected me that loopback is a special

00:16:39,000 --> 00:16:55,250
case not there yet nope IPSec is a

00:16:49,079 --> 00:16:55,250
different it's a different creature--

00:16:58,850 --> 00:17:04,199
okay and Paul said it ok so the other

00:17:02,520 --> 00:17:07,439
thing and the other thing you can do is

00:17:04,199 --> 00:17:11,339
you can if you specified labeling on a

00:17:07,439 --> 00:17:13,290
particular interface you're not going to

00:17:11,339 --> 00:17:14,579
actually resolve what label you're going

00:17:13,290 --> 00:17:17,790
to use until you actually put the

00:17:14,579 --> 00:17:21,679
packets together and then that's going

00:17:17,790 --> 00:17:24,270
to taking to go through net filter so

00:17:21,679 --> 00:17:26,669
the network and net label configuration

00:17:24,270 --> 00:17:28,740
can actually be relatively complicated

00:17:26,669 --> 00:17:30,929
you make it very difficult for you to

00:17:28,740 --> 00:17:32,929
determine what labeling you're going to

00:17:30,929 --> 00:17:36,179
want to use for any given packet

00:17:32,929 --> 00:17:38,490
therefore when any any given process

00:17:36,179 --> 00:17:44,680
wants to send a packet and it may depend

00:17:38,490 --> 00:17:47,680
on where it's going the other issue that

00:17:44,680 --> 00:17:51,970
comes across comes up fairly quickly is

00:17:47,680 --> 00:17:54,280
granularity the granularity probably the

00:17:51,970 --> 00:17:56,440
smack label of a process and the SELinux

00:17:54,280 --> 00:18:00,400
context of a process are not going to be

00:17:56,440 --> 00:18:03,400
in lockstep if they were what are you

00:18:00,400 --> 00:18:07,180
doing running both of them pick one

00:18:03,400 --> 00:18:10,000
because that's gonna be a be your mate

00:18:07,180 --> 00:18:12,130
really your major factors what label are

00:18:10,000 --> 00:18:14,290
label or context is the process running

00:18:12,130 --> 00:18:17,080
with at this time that's what you're

00:18:14,290 --> 00:18:21,430
really going to be concerned about the

00:18:17,080 --> 00:18:24,660
other thing is that we may be changing

00:18:21,430 --> 00:18:28,120
the label on to be used on a socket in

00:18:24,660 --> 00:18:33,070
in the smack case at least after the

00:18:28,120 --> 00:18:35,110
socket has been created so SELinux

00:18:33,070 --> 00:18:37,270
doesn't do that SELinux leaves the same

00:18:35,110 --> 00:18:38,920
label on the packet at all times it

00:18:37,270 --> 00:18:43,630
doesn't you don't have the mechanism to

00:18:38,920 --> 00:18:46,590
change it so given these these factors

00:18:43,630 --> 00:18:51,130
here the chance that you're going to get

00:18:46,590 --> 00:18:53,980
the packets to be get the two security

00:18:51,130 --> 00:18:56,020
modules to agree on what the label

00:18:53,980 --> 00:18:58,780
should be at any given time is really

00:18:56,020 --> 00:19:00,940
pretty low so the expectation that this

00:18:58,780 --> 00:19:04,120
would work for these two security

00:19:00,940 --> 00:19:07,720
modules in particular isn't very likely

00:19:04,120 --> 00:19:12,370
but let's just say that you're okay with

00:19:07,720 --> 00:19:14,800
that and so long as they do agree you're

00:19:12,370 --> 00:19:17,350
gonna go along with it okay well then

00:19:14,800 --> 00:19:19,560
where are we well then we're actually in

00:19:17,350 --> 00:19:22,750
a case in a situation where you can run

00:19:19,560 --> 00:19:24,250
all the all the minor security modules

00:19:22,750 --> 00:19:27,690
we have today and all the major security

00:19:24,250 --> 00:19:30,000
modules we have today at the same time

00:19:27,690 --> 00:19:34,330
you're not going to get a whole lot of

00:19:30,000 --> 00:19:35,860
performance on the network you can can

00:19:34,330 --> 00:19:38,320
you there are configurations needs you

00:19:35,860 --> 00:19:40,570
can do especially with SMAC

00:19:38,320 --> 00:19:42,040
configuration you can specify rather

00:19:40,570 --> 00:19:45,100
than using what's Mac would use by

00:19:42,040 --> 00:19:47,890
default for labeling processes based on

00:19:45,100 --> 00:19:49,780
for putting in the IP packet faced on

00:19:47,890 --> 00:19:52,300
the label you can specify it so you

00:19:49,780 --> 00:19:54,760
could actually put what s you your best

00:19:52,300 --> 00:19:55,990
guess of what SC Linux would do into the

00:19:54,760 --> 00:19:58,590
packet

00:19:55,990 --> 00:20:02,860
you get some of them out of there but

00:19:58,590 --> 00:20:04,570
okay so what does this leave us with her

00:20:02,860 --> 00:20:08,500
yeah you know what can still cause

00:20:04,570 --> 00:20:09,670
problems at this point well one of the

00:20:08,500 --> 00:20:13,600
things that can cause problems is

00:20:09,670 --> 00:20:15,059
redundant purpose and we've been saying

00:20:13,600 --> 00:20:17,620
yeah we've been saying this all along

00:20:15,059 --> 00:20:19,870
you don't want to use smacking SELinux

00:20:17,620 --> 00:20:22,900
at the same time they they really do too

00:20:19,870 --> 00:20:26,860
much of the similar thing if you if you

00:20:22,900 --> 00:20:28,690
can't figure out how to do what you want

00:20:26,860 --> 00:20:30,460
to do in smack in addition to what you

00:20:28,690 --> 00:20:32,530
want to do the icy Linux you're probably

00:20:30,460 --> 00:20:34,870
not thinking hard enough Sam looks

00:20:32,530 --> 00:20:37,300
similarly the other direction if you

00:20:34,870 --> 00:20:39,309
want to use SELinux to do just one

00:20:37,300 --> 00:20:42,280
specific thing that you think you can't

00:20:39,309 --> 00:20:46,179
do with smack you probably need to think

00:20:42,280 --> 00:20:48,760
a little harder you probably don't want

00:20:46,179 --> 00:20:51,370
to do this but you do want to use smack

00:20:48,760 --> 00:20:54,280
or SELinux and app armour together

00:20:51,370 --> 00:20:57,250
because they do very different things if

00:20:54,280 --> 00:20:59,530
you want the the pathname based access

00:20:57,250 --> 00:21:02,620
control that you get from a Parmer for

00:20:59,530 --> 00:21:04,870
whatever reason at the same time that

00:21:02,620 --> 00:21:07,540
you want the I know subject object

00:21:04,870 --> 00:21:10,360
related oriented things you get from

00:21:07,540 --> 00:21:13,179
smack rusty Linux at the same time again

00:21:10,360 --> 00:21:20,080
for whatever reason you should be able

00:21:13,179 --> 00:21:22,179
to do that and we want that we really do

00:21:20,080 --> 00:21:25,620
want that to work

00:21:22,179 --> 00:21:28,330
networking again you don't want to

00:21:25,620 --> 00:21:29,530
tamakwa systems that really have

00:21:28,330 --> 00:21:32,530
different ideas of how the network

00:21:29,530 --> 00:21:35,620
should be work working together so you

00:21:32,530 --> 00:21:36,940
use one network enabled module and again

00:21:35,620 --> 00:21:38,620
this is going to be true into the future

00:21:36,940 --> 00:21:41,350
as people introduce new modules that do

00:21:38,620 --> 00:21:43,360
different interesting things if they

00:21:41,350 --> 00:21:46,290
want to send the information across in

00:21:43,360 --> 00:21:48,550
the the IP header you really want to use

00:21:46,290 --> 00:21:49,720
keep it down to one of them because

00:21:48,550 --> 00:21:54,429
they're not going to be able to agree

00:21:49,720 --> 00:21:55,900
very often now your user space I haven't

00:21:54,429 --> 00:21:58,090
talked about the user space at all and

00:21:55,900 --> 00:22:00,700
that's that's on purpose because it's it

00:21:58,090 --> 00:22:02,710
can be an early problem they may a user

00:22:00,700 --> 00:22:06,790
space may get confused there are a few

00:22:02,710 --> 00:22:08,650
places where interfaces may not be able

00:22:06,790 --> 00:22:10,200
to determine which security module they

00:22:08,650 --> 00:22:12,850
want to use it

00:22:10,200 --> 00:22:16,299
fortunately we do have a mechanism where

00:22:12,850 --> 00:22:18,129
he where you can call cat what's in sis

00:22:16,299 --> 00:22:20,129
Colonel security LS m and it will tell

00:22:18,129 --> 00:22:23,169
you the list of LSMs that are available

00:22:20,129 --> 00:22:24,399
so if you're running smack and SELinux

00:22:23,169 --> 00:22:27,309
at the same time you can look at that

00:22:24,399 --> 00:22:30,129
and say oh geez I'm going to have a have

00:22:27,309 --> 00:22:32,440
a good time here or if you've got a

00:22:30,129 --> 00:22:34,240
Parmer and SELinux you can use that to

00:22:32,440 --> 00:22:36,549
determine make your determination about

00:22:34,240 --> 00:22:38,230
how your application might behave we're

00:22:36,549 --> 00:22:43,029
also gonna need to do some some real

00:22:38,230 --> 00:22:46,840
significant updates in basic commands ID

00:22:43,029 --> 00:22:49,299
I am still unhappy that ID if you do an

00:22:46,840 --> 00:22:51,580
LS - capital Z and you don't have se

00:22:49,299 --> 00:22:54,340
Linux configured it will tell you that

00:22:51,580 --> 00:22:57,070
you can't do this because I've got a C

00:22:54,340 --> 00:22:59,259
you don't have SC Linux involves like

00:22:57,070 --> 00:23:03,279
well but the smack informations you can

00:22:59,259 --> 00:23:06,249
just print that but it won't LS is

00:23:03,279 --> 00:23:08,639
another good one if you do an LS and LS

00:23:06,249 --> 00:23:11,740
- is e it'll tell you the the SC Linux

00:23:08,639 --> 00:23:13,809
context but it really should might want

00:23:11,740 --> 00:23:15,999
to have it do a bunch of other stuff as

00:23:13,809 --> 00:23:18,429
well but again this is all just kind of

00:23:15,999 --> 00:23:20,259
stuff that if somebody wanted to spend a

00:23:18,429 --> 00:23:22,179
few minutes having a good time writing

00:23:20,259 --> 00:23:23,799
some patches they could whip that out

00:23:22,179 --> 00:23:25,179
pretty close pretty quickly here and

00:23:23,799 --> 00:23:28,690
make a big name for themselves and

00:23:25,179 --> 00:23:35,350
become famous and live the rock star

00:23:28,690 --> 00:23:37,029
lifestyle like we do so let's let's say

00:23:35,350 --> 00:23:38,440
we're gonna write write write let's say

00:23:37,029 --> 00:23:41,610
you're gonna write a new security module

00:23:38,440 --> 00:23:41,610
who here wants to do that

00:23:44,290 --> 00:23:53,920
the usual suspects and the guy back

00:23:47,920 --> 00:23:56,550
there okay so the biggest thing is now

00:23:53,920 --> 00:23:59,950
working if you're going to do networking

00:23:56,550 --> 00:24:01,960
make it optional make it make your

00:23:59,950 --> 00:24:03,610
module work so that if you don't have

00:24:01,960 --> 00:24:08,160
networking available by this is good

00:24:03,610 --> 00:24:08,160
advice for IOT devices if nothing else

00:24:08,220 --> 00:24:12,700
if you can't use the networking either

00:24:11,500 --> 00:24:15,220
because somebody else is going to be

00:24:12,700 --> 00:24:16,930
using it or because it's not available

00:24:15,220 --> 00:24:20,530
make it so it's optional so you don't

00:24:16,930 --> 00:24:24,700
have to have it read the net label code

00:24:20,530 --> 00:24:27,190
before you use it there is somebody in

00:24:24,700 --> 00:24:30,660
this room who didn't and has been having

00:24:27,190 --> 00:24:35,440
trouble for quite some time as a result

00:24:30,660 --> 00:24:38,320
not mentioning any names and defines

00:24:35,440 --> 00:24:40,990
same behavior whether your your network

00:24:38,320 --> 00:24:42,970
is labeled or unlabeled whether you're

00:24:40,990 --> 00:24:44,860
in charge of the of the security as weas

00:24:42,970 --> 00:24:48,360
or there's somebody else's make sure

00:24:44,860 --> 00:24:48,360
that you've got same behavior defined

00:24:48,930 --> 00:24:55,150
process attributes that we've had a big

00:24:52,780 --> 00:24:58,480
brouhaha over what what happens with

00:24:55,150 --> 00:25:02,500
proc self at her current well that's

00:24:58,480 --> 00:25:04,600
that was my mistake it was my bad rather

00:25:02,500 --> 00:25:06,850
than creating my own interface I just

00:25:04,600 --> 00:25:10,180
said oh yes he Linux uses current I'll

00:25:06,850 --> 00:25:15,130
just use the same thing well that was a

00:25:10,180 --> 00:25:18,550
bad idea so I so it would be really

00:25:15,130 --> 00:25:22,960
really nice each LSM had a subdirectory

00:25:18,550 --> 00:25:25,750
in their proxy elf adder for their own

00:25:22,960 --> 00:25:27,100
attributes I'm advocating that and

00:25:25,750 --> 00:25:31,110
trying to get a patch through on that

00:25:27,100 --> 00:25:34,420
one as well and the other thing is that

00:25:31,110 --> 00:25:36,100
for SOP R Seck you're probably going to

00:25:34,420 --> 00:25:39,700
want to have some user space wrapper

00:25:36,100 --> 00:25:42,060
that will around that so that you can be

00:25:39,700 --> 00:25:45,970
sure to make sure that you've set the

00:25:42,060 --> 00:25:48,580
display LSM to the one you want before

00:25:45,970 --> 00:25:52,960
you call that you know in this situation

00:25:48,580 --> 00:25:56,080
where you've got stacking involved and

00:25:52,960 --> 00:25:57,310
twice about using sec ids yeah do you

00:25:56,080 --> 00:25:59,440
need it

00:25:57,310 --> 00:26:02,350
if you do as if you have persistent if

00:25:59,440 --> 00:26:05,770
you have persistent data you're probably

00:26:02,350 --> 00:26:07,060
you're going to need these and there

00:26:05,770 --> 00:26:08,560
isn't really anything we can do about

00:26:07,060 --> 00:26:12,180
that but that just means that we make

00:26:08,560 --> 00:26:15,370
the second sekai de structure bigger

00:26:12,180 --> 00:26:17,560
it's going to go out when you do temp FS

00:26:15,370 --> 00:26:21,340
it's going to get created out that way

00:26:17,560 --> 00:26:24,310
you're going to need to have the hook to

00:26:21,340 --> 00:26:30,690
go from a sec ID to a sec context and

00:26:24,310 --> 00:26:33,190
back but it's if you don't need it you

00:26:30,690 --> 00:26:37,720
probably want to avoid it

00:26:33,190 --> 00:26:40,270
temp FS uses actually the combination of

00:26:37,720 --> 00:26:46,020
the contexts in order to maintain the

00:26:40,270 --> 00:26:49,180
label state be careful with your state

00:26:46,020 --> 00:26:53,110
alright your module hook may not get

00:26:49,180 --> 00:26:56,440
called if somebody ahead of you in the

00:26:53,110 --> 00:26:57,850
list fails or detects a condition

00:26:56,440 --> 00:26:59,950
whereby they would say the system call

00:26:57,850 --> 00:27:02,110
should fail you're not going to get

00:26:59,950 --> 00:27:03,700
called so if you're trying to keep

00:27:02,110 --> 00:27:05,470
tracking a keep count of the number of

00:27:03,700 --> 00:27:06,940
times you you've referenced something or

00:27:05,470 --> 00:27:08,020
the number of times you've made it made

00:27:06,940 --> 00:27:11,140
a check on something

00:27:08,020 --> 00:27:13,150
and somebody else ahead of you is

00:27:11,140 --> 00:27:18,370
failing you're not going to get there if

00:27:13,150 --> 00:27:21,810
you're counting on another call to free

00:27:18,370 --> 00:27:23,740
something and you never get called

00:27:21,810 --> 00:27:26,260
you're gonna have to make sure that when

00:27:23,740 --> 00:27:28,960
you when you deallocate that particular

00:27:26,260 --> 00:27:32,950
security blob that you're going to to

00:27:28,960 --> 00:27:36,220
free it appropriately just because you

00:27:32,950 --> 00:27:39,790
can't really count on your being the

00:27:36,220 --> 00:27:43,930
prime being primary you have that you

00:27:39,790 --> 00:27:47,320
always get called an avoid hanging lists

00:27:43,930 --> 00:27:50,410
off the security blobs you can do that

00:27:47,320 --> 00:27:52,900
it's going to require that you be

00:27:50,410 --> 00:27:55,960
careful with it if you can just come out

00:27:52,900 --> 00:27:57,640
up front and say I need this many many

00:27:55,960 --> 00:27:58,960
bytes in the security blob all at the

00:27:57,640 --> 00:28:04,050
infrastructure take care of it you'll

00:27:58,960 --> 00:28:06,730
probably be ahead so to wrap it up here

00:28:04,050 --> 00:28:10,110
stacks into similar modules are good

00:28:06,730 --> 00:28:14,070
we've already seen that with landlocked

00:28:10,110 --> 00:28:15,840
or sorry well we've we've talked about

00:28:14,070 --> 00:28:17,610
it today about land lock there's there

00:28:15,840 --> 00:28:19,560
several several other security modules

00:28:17,610 --> 00:28:21,450
in the pipeline here that will do new

00:28:19,560 --> 00:28:22,940
and interesting things that are not

00:28:21,450 --> 00:28:26,850
going to be conflicting with existing

00:28:22,940 --> 00:28:29,250
existing security modules and you don't

00:28:26,850 --> 00:28:30,900
want to try to put jammed at all into

00:28:29,250 --> 00:28:32,400
one one kind of thing you certainly

00:28:30,900 --> 00:28:36,210
don't want to put land without land lock

00:28:32,400 --> 00:28:39,330
EBP F into SELinux always I wouldn't

00:28:36,210 --> 00:28:41,160
think you would you sure don't want to

00:28:39,330 --> 00:28:45,240
put it into smack you might put it into

00:28:41,160 --> 00:28:46,560
a bar but if Stax can avoid you fighting

00:28:45,240 --> 00:28:51,720
over the network that would be a good

00:28:46,560 --> 00:28:55,740
thing one of the tasks that smack has on

00:28:51,720 --> 00:28:57,840
its on our big list is let's see if we

00:28:55,740 --> 00:29:00,450
can't do a little bit better job using

00:28:57,840 --> 00:29:03,660
that label in a way that's less likely

00:29:00,450 --> 00:29:05,340
to conflict and modules really need the

00:29:03,660 --> 00:29:07,410
color within the lines they shouldn't be

00:29:05,340 --> 00:29:10,010
off doing bizarre things that might have

00:29:07,410 --> 00:29:14,700
have obscure side effects that would

00:29:10,010 --> 00:29:18,240
might cause other modules damage and

00:29:14,700 --> 00:29:20,190
with that I'll ask for questions I've

00:29:18,240 --> 00:29:27,300
got one over here from mr. brindle who

00:29:20,190 --> 00:29:29,880
hasn't asked me a question in years and

00:29:27,300 --> 00:29:30,360
it's probably gonna be the same one hi

00:29:29,880 --> 00:29:32,070
Casey

00:29:30,360 --> 00:29:44,250
so you've been working on this for a

00:29:32,070 --> 00:29:44,790
long time why isn't it done day job yes

00:29:44,250 --> 00:29:54,090
I did

00:29:44,790 --> 00:29:56,100
next question Boeing once all right well

00:29:54,090 --> 00:29:57,250
thank you very much everybody go have a

00:29:56,100 --> 00:30:01,880
snack

00:29:57,250 --> 00:30:01,880

YouTube URL: https://www.youtube.com/watch?v=RP393TP_CJ8


