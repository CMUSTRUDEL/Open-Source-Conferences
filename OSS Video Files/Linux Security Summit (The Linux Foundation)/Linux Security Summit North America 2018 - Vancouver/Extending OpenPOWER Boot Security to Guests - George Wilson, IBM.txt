Title: Extending OpenPOWER Boot Security to Guests - George Wilson, IBM
Publication date: 2018-08-31
Playlist: Linux Security Summit North America 2018 - Vancouver
Description: 
	Extending OpenPOWER Boot Security to Guests - George Wilson, IBM

The KVM and PowerVM guest environments are significantly different from the OpenPOWER host environment: the boot sequence is shorter, the firmware components are simpler, and the bootloader is entirely replaced. A secure boot design must accommodate the dissimilarities and, consequently, the solution for the OpenPOWER host is not directly applicable to guests. Yet, much as for the host case, existing open source elements can help solve the problem of booting guest OSs securely. This talk follows last year's OpenPOWER host secure boot talk and discusses possible design alternatives that reuse open source code to bring OS boot security improvements to KVM on OpenPOWER and PowerVM guests.

About George Wilson
George Wilson is a security architect and security development team lead in IBM's Linux Technology Center. Since joining the LTC in 2004, he has led IBM's Linux security certifications and continued development and product exploitation of open source security technology including cryptographic coprocessor support, Trusted Computing, and Mandatory Access Control. Prior to the LTC, he was a software developer for various IBM products for 15 years. He has spoken at internal IBM conferences, LinuxCon, and last year at LSS. He holds a BS CS from Louisiana State University.
Captions: 
	00:00:00,199 --> 00:00:07,799
so I'm George Wilson and I am the

00:00:05,160 --> 00:00:10,590
security development team lead in the

00:00:07,799 --> 00:00:13,679
IBM Linux Technology Center and I've

00:00:10,590 --> 00:00:16,590
been working in the LTC now for about

00:00:13,679 --> 00:00:20,520
fourteen and a half years and slowly

00:00:16,590 --> 00:00:25,619
we've been rolling out various security

00:00:20,520 --> 00:00:30,539
improvements we now are primarily

00:00:25,619 --> 00:00:35,730
focused on the power platform and we've

00:00:30,539 --> 00:00:40,140
been working to think about how we might

00:00:35,730 --> 00:00:42,809
extend our boot security up into guest

00:00:40,140 --> 00:00:44,910
land I promise you this will not be a

00:00:42,809 --> 00:00:46,530
very long presentation because we

00:00:44,910 --> 00:00:50,010
haven't put a lot of thought into it yet

00:00:46,530 --> 00:00:52,320
this may be the least faked presentation

00:00:50,010 --> 00:00:55,680
that you see this entire conference but

00:00:52,320 --> 00:00:58,129
I'd like to get some ideas before we go

00:00:55,680 --> 00:01:02,430
off and do something silly and stupid

00:00:58,129 --> 00:01:06,420
and get some reaction from you so

00:01:02,430 --> 00:01:08,070
standard disclaimer these are my views

00:01:06,420 --> 00:01:10,110
not necessarily IBM's

00:01:08,070 --> 00:01:13,110
and none of this stuff may ever make it

00:01:10,110 --> 00:01:14,030
into a product so just so you're aware

00:01:13,110 --> 00:01:20,790
of that

00:01:14,030 --> 00:01:24,150
so I presented last year on adding

00:01:20,790 --> 00:01:29,490
secure and trusted boot to our open

00:01:24,150 --> 00:01:29,820
power host platform and this is all well

00:01:29,490 --> 00:01:33,810
and good

00:01:29,820 --> 00:01:36,119
Claudio's talked about our work and and

00:01:33,810 --> 00:01:39,710
how we're using the TPM as our root of

00:01:36,119 --> 00:01:43,229
trust for os's Gurney's talked about

00:01:39,710 --> 00:01:47,610
secure virtual machines but what about

00:01:43,229 --> 00:01:49,909
ordinary guest boot security this is

00:01:47,610 --> 00:01:53,490
something that we have left unaddressed

00:01:49,909 --> 00:01:55,259
thus far and we've just started having

00:01:53,490 --> 00:01:57,060
some internal conversations about it so

00:01:55,259 --> 00:01:59,369
this is really an externalization of

00:01:57,060 --> 00:02:04,079
some of those internal conversations

00:01:59,369 --> 00:02:07,439
we've had with our colleagues who work

00:02:04,079 --> 00:02:13,740
in the power of yum security side of

00:02:07,439 --> 00:02:16,440
things so guests

00:02:13,740 --> 00:02:18,090
should have boot security as well as

00:02:16,440 --> 00:02:20,790
hosts and those keys should be

00:02:18,090 --> 00:02:26,000
manageable by administrators much as

00:02:20,790 --> 00:02:28,800
they are for hosts you may want your on

00:02:26,000 --> 00:02:31,380
Colonel signed under your own key

00:02:28,800 --> 00:02:33,030
authority there are any number of

00:02:31,380 --> 00:02:36,030
reasons that you may want to provide a

00:02:33,030 --> 00:02:38,630
an experience in the virtual environment

00:02:36,030 --> 00:02:42,300
very much like the host environment

00:02:38,630 --> 00:02:44,790
secure boot is required for the

00:02:42,300 --> 00:02:48,540
operating system protection profile 4.1

00:02:44,790 --> 00:02:52,560
and higher this doesn't exclude guests

00:02:48,540 --> 00:02:54,000
so we need to get our act together if

00:02:52,560 --> 00:02:59,010
we're gonna meet the requirements of

00:02:54,000 --> 00:03:02,550
that protection profile and there has

00:02:59,010 --> 00:03:05,490
been some thought as to how we would do

00:03:02,550 --> 00:03:09,990
secure boot on PowerVM logical

00:03:05,490 --> 00:03:11,820
partitions whatever we do for linux

00:03:09,990 --> 00:03:16,440
needs to be compatible with what we're

00:03:11,820 --> 00:03:20,490
doing for AIX and that's an important

00:03:16,440 --> 00:03:22,860
consideration here and we also want to

00:03:20,490 --> 00:03:24,750
reuse the same work we're doing for the

00:03:22,860 --> 00:03:26,910
host environment we don't want to have a

00:03:24,750 --> 00:03:28,680
different signature format safer for

00:03:26,910 --> 00:03:33,810
these kernels than we do for the host

00:03:28,680 --> 00:03:36,300
kernels so this is a celebrity I am as

00:03:33,810 --> 00:03:39,860
sort of a condensation of what I had

00:03:36,300 --> 00:03:46,890
presented last year we've instrumented

00:03:39,860 --> 00:03:51,750
the entire firmware stack all the way up

00:03:46,890 --> 00:03:56,970
through ski route at this point which is

00:03:51,750 --> 00:04:00,750
the environment that it's an init ram FS

00:03:56,970 --> 00:04:03,590
environment running Linux

00:04:00,750 --> 00:04:09,810
and it has the petty boot application

00:04:03,590 --> 00:04:12,360
that launches the final kernel and you

00:04:09,810 --> 00:04:14,280
know we've had the our lower firmware

00:04:12,360 --> 00:04:16,950
folks at instrumentation for trusted

00:04:14,280 --> 00:04:22,970
computing we extend those out to the the

00:04:16,950 --> 00:04:27,480
TPM and we're currently working on

00:04:22,970 --> 00:04:30,660
securely booting the OS kernel

00:04:27,480 --> 00:04:32,820
and it's as I said last year it's more

00:04:30,660 --> 00:04:34,260
difficult than you might think and and

00:04:32,820 --> 00:04:39,630
it has proved to be more difficult than

00:04:34,260 --> 00:04:42,420
we even anticipated but we're learning

00:04:39,630 --> 00:04:44,610
through the design process and I think

00:04:42,420 --> 00:04:49,440
we're pretty close to having a

00:04:44,610 --> 00:04:53,700
reasonable design and actually realizing

00:04:49,440 --> 00:04:54,690
a full into n secure boot hopefully by

00:04:53,700 --> 00:04:58,190
the end of the year

00:04:54,690 --> 00:05:02,310
that's that that's that's my tentative

00:04:58,190 --> 00:05:07,230
stake in the ground but anyway this is a

00:05:02,310 --> 00:05:12,930
fairly complex environment there are a

00:05:07,230 --> 00:05:15,510
number of layers to it and you know it's

00:05:12,930 --> 00:05:19,170
it's much more complex than the guest

00:05:15,510 --> 00:05:23,700
environment so and this is kind of

00:05:19,170 --> 00:05:27,540
running off the page but so anyway the

00:05:23,700 --> 00:05:29,070
PowerVM guest boot environment so this

00:05:27,540 --> 00:05:33,170
runs on top of the power VM hypervisor

00:05:29,070 --> 00:05:36,000
which is a bare-metal hypervisor that is

00:05:33,170 --> 00:05:40,500
IBM's proprietary hypervisor that's been

00:05:36,000 --> 00:05:41,970
running on our PowerPC servers since the

00:05:40,500 --> 00:05:49,860
early 90s

00:05:41,970 --> 00:05:56,600
and so it already is verified by the

00:05:49,860 --> 00:06:01,410
hosts secure boot mechanism and there is

00:05:56,600 --> 00:06:04,140
firmware that's provided for the logical

00:06:01,410 --> 00:06:07,830
partitions is just part of our firmware

00:06:04,140 --> 00:06:10,230
stack and and that's open firmware we

00:06:07,830 --> 00:06:16,800
you know refer to it as partition

00:06:10,230 --> 00:06:21,980
firmware and the AIX bootloader and

00:06:16,800 --> 00:06:26,040
kernel are shipped together is unit and

00:06:21,980 --> 00:06:29,550
the big difference on Linux here is you

00:06:26,040 --> 00:06:32,280
know it's it's not just some blob it's

00:06:29,550 --> 00:06:36,500
separated into a boot loader and a

00:06:32,280 --> 00:06:36,500
kernel and so

00:06:38,650 --> 00:06:48,160
and in this this is how it's actually

00:06:42,980 --> 00:06:50,570
done for KVM there's a different

00:06:48,160 --> 00:06:53,090
firmware component we don't have

00:06:50,570 --> 00:06:58,040
partition firmware we have this this

00:06:53,090 --> 00:07:00,830
Linux host q mu and then slimline open

00:06:58,040 --> 00:07:03,830
firmware which is as the name implies a

00:07:00,830 --> 00:07:05,930
smaller version of partition firmware

00:07:03,830 --> 00:07:09,320
that provides hyper calls and all the

00:07:05,930 --> 00:07:13,880
things that largely partition firmware

00:07:09,320 --> 00:07:16,340
provides on PowerVM and generally you

00:07:13,880 --> 00:07:18,920
know we use grub to to load the guest

00:07:16,340 --> 00:07:21,950
kernel so we we have these these sort of

00:07:18,920 --> 00:07:25,880
two different environments one provided

00:07:21,950 --> 00:07:28,910
by power VM and then one provided by KVM

00:07:25,880 --> 00:07:30,380
running on open power so two different

00:07:28,910 --> 00:07:35,660
hypervisors two different firmware

00:07:30,380 --> 00:07:43,550
stacks so there's a proposed scheme for

00:07:35,660 --> 00:07:47,920
securely booting these kernels on power

00:07:43,550 --> 00:07:52,220
VM we already have this convenient

00:07:47,920 --> 00:07:57,250
container encapsulation format not to be

00:07:52,220 --> 00:08:01,840
confused with user space containers but

00:07:57,250 --> 00:08:05,600
just an encapsulation structure and

00:08:01,840 --> 00:08:08,270
that's what we use for encapsulating the

00:08:05,600 --> 00:08:12,980
pieces of our firmware for host secure

00:08:08,270 --> 00:08:14,600
boot so our power VM firmware folks said

00:08:12,980 --> 00:08:19,900
well we have this structure already why

00:08:14,600 --> 00:08:22,010
don't we reuse it and instead of having

00:08:19,900 --> 00:08:26,330
here's here's a picture of the structure

00:08:22,010 --> 00:08:29,480
from last year's presentation so instead

00:08:26,330 --> 00:08:32,210
of having hardware keys and firmware

00:08:29,480 --> 00:08:36,229
keys why don't we have firmware keys

00:08:32,210 --> 00:08:38,510
that sign software keys and so that's

00:08:36,229 --> 00:08:45,290
how they're encapsulating the AIX

00:08:38,510 --> 00:08:48,160
bootloader and guest kernel and this is

00:08:45,290 --> 00:08:50,660
provided by IBM has an IBM public key

00:08:48,160 --> 00:08:57,490
very straightforward

00:08:50,660 --> 00:08:59,750
a complete IBM blue stack there and

00:08:57,490 --> 00:09:02,660
everything you need can can be provided

00:08:59,750 --> 00:09:06,920
just with a simple firmware load and

00:09:02,660 --> 00:09:12,800
then the bootloader and kernel will be

00:09:06,920 --> 00:09:17,029
verified when you boot but you know we

00:09:12,800 --> 00:09:24,560
we have a problem when we have to boot

00:09:17,029 --> 00:09:27,410
up our k vm guest so an open power and

00:09:24,560 --> 00:09:32,000
we also have a problem of you know how

00:09:27,410 --> 00:09:33,769
do we how do we boot up Linux on power

00:09:32,000 --> 00:09:36,920
vm and how do we make those two things

00:09:33,769 --> 00:09:39,019
compatible so one thing that we could do

00:09:36,920 --> 00:09:42,560
is just port our host solution why

00:09:39,019 --> 00:09:46,100
wouldn't we do that well our host

00:09:42,560 --> 00:09:49,550
solution uses peti boot and it's one of

00:09:46,100 --> 00:09:53,329
the only things that uses peti boot and

00:09:49,550 --> 00:09:58,449
the distro qmu guests generally boot

00:09:53,329 --> 00:10:02,480
with grub uniformly and we don't want to

00:09:58,449 --> 00:10:07,250
make our power guests an exception to

00:10:02,480 --> 00:10:09,860
that moreover so petty boot runs in this

00:10:07,250 --> 00:10:12,470
linux in a tram FS environment normally

00:10:09,860 --> 00:10:15,350
that'd be a really good thing but it

00:10:12,470 --> 00:10:18,829
turns out that power VM negotiates

00:10:15,350 --> 00:10:21,290
capabilities with the guest kernel and

00:10:18,829 --> 00:10:23,480
since petty boot in this environment

00:10:21,290 --> 00:10:25,040
would be the first guest kernel to boot

00:10:23,480 --> 00:10:29,120
up which is actually going to boot up

00:10:25,040 --> 00:10:31,790
the payload kernel there is not an

00:10:29,120 --> 00:10:34,009
ability to renegotiate capabilities with

00:10:31,790 --> 00:10:38,829
the firmware not easily not without

00:10:34,009 --> 00:10:46,970
doing some surgery so our firmware folks

00:10:38,829 --> 00:10:50,720
did not like that approach at all and we

00:10:46,970 --> 00:10:52,819
also want one that won't you know to you

00:10:50,720 --> 00:10:54,759
know make this easy to go between the

00:10:52,819 --> 00:11:00,160
two different hypervisors that we have

00:10:54,759 --> 00:11:02,480
so it's a much simpler boot environment

00:11:00,160 --> 00:11:04,370
we don't really need the elaborate key

00:11:02,480 --> 00:11:07,220
structure we don't think

00:11:04,370 --> 00:11:09,200
that we've been working on for the host

00:11:07,220 --> 00:11:20,210
environment so why don't we do something

00:11:09,200 --> 00:11:23,450
that's simpler and so the the partition

00:11:20,210 --> 00:11:28,880
firmware or our sloths can just make use

00:11:23,450 --> 00:11:33,860
of perhaps an indirection much like x86

00:11:28,880 --> 00:11:37,210
has with the shim so simplified view of

00:11:33,860 --> 00:11:40,610
an x86 boot it emulates the host

00:11:37,210 --> 00:11:44,060
solution and the shim provides this

00:11:40,610 --> 00:11:49,450
layer of indirection so that you know it

00:11:44,060 --> 00:11:53,930
can be signed by generally Microsoft and

00:11:49,450 --> 00:11:55,820
the OS can be signed by you know the

00:11:53,930 --> 00:12:01,870
distro provider or whatever key

00:11:55,820 --> 00:12:05,000
authority that you like and it's

00:12:01,870 --> 00:12:06,529
interesting to observe that and one of

00:12:05,000 --> 00:12:11,650
the problems I think we need to solve is

00:12:06,529 --> 00:12:15,650
you know the hypervisor validating the

00:12:11,650 --> 00:12:20,290
firmware which doesn't appear to be done

00:12:15,650 --> 00:12:20,290
on the x86 side nowadays

00:12:21,279 --> 00:12:32,350
so here's maybe a guess at what this

00:12:26,390 --> 00:12:35,000
might look like for booting on PowerVM

00:12:32,350 --> 00:12:37,700
very similar to the Microsoft secure

00:12:35,000 --> 00:12:41,990
boot problem we need to be able to

00:12:37,700 --> 00:12:44,600
assign something that provides us a

00:12:41,990 --> 00:12:47,180
layer of indirection we can't get an

00:12:44,600 --> 00:12:52,250
awful lot of reuse out of the x86 shim

00:12:47,180 --> 00:12:56,200
it's a UEFI application and it's it's

00:12:52,250 --> 00:13:00,440
very EFI specific we can learn from it

00:12:56,200 --> 00:13:06,920
we could use maybe similar variable

00:13:00,440 --> 00:13:08,510
format for compatibility but it's it's

00:13:06,920 --> 00:13:11,930
not a lot of reuse there so we would be

00:13:08,510 --> 00:13:15,680
implementing our own shim and basically

00:13:11,930 --> 00:13:18,030
just managing the this this sort of mock

00:13:15,680 --> 00:13:24,340
database

00:13:18,030 --> 00:13:30,280
directly and then we could also make use

00:13:24,340 --> 00:13:33,850
of grub which already has a convenient

00:13:30,280 --> 00:13:36,360
callback mechanism so very much like on

00:13:33,850 --> 00:13:39,310
x86 we could have the the shim verify

00:13:36,360 --> 00:13:44,590
grub grub call back into the shim and

00:13:39,310 --> 00:13:46,390
then verify the guest kernel and also

00:13:44,590 --> 00:13:49,510
get our trusted computing measurements

00:13:46,390 --> 00:13:53,200
via that route since we can't build them

00:13:49,510 --> 00:14:00,820
into grub we have a little bit different

00:13:53,200 --> 00:14:06,060
problem for open power KVM IBM wouldn't

00:14:00,820 --> 00:14:10,470
be providing sloth or the shim directly

00:14:06,060 --> 00:14:14,890
so we would need to have the ability to

00:14:10,470 --> 00:14:16,990
change the public key public/private key

00:14:14,890 --> 00:14:22,180
pair actually that we're using for

00:14:16,990 --> 00:14:24,010
signing the shim and once again I don't

00:14:22,180 --> 00:14:25,810
think we need an elaborate key

00:14:24,010 --> 00:14:28,660
management framework much like we we

00:14:25,810 --> 00:14:30,910
built on the host that we you know we've

00:14:28,660 --> 00:14:33,460
tried to reuse some Tiano core concepts

00:14:30,910 --> 00:14:36,550
there but I I don't think we need as

00:14:33,460 --> 00:14:38,710
much of that mechanism because the the

00:14:36,550 --> 00:14:41,070
guest boot environment is so much

00:14:38,710 --> 00:14:41,070
simpler

00:14:42,450 --> 00:14:48,610
we could build key management into

00:14:45,280 --> 00:14:51,670
partition firmware or sloth that's

00:14:48,610 --> 00:14:54,430
probably my favorite place for it we

00:14:51,670 --> 00:14:59,370
could put it in to the shim I I think we

00:14:54,430 --> 00:15:02,080
already have some precedent for adding

00:14:59,370 --> 00:15:03,910
user interface features I know for

00:15:02,080 --> 00:15:05,200
trusted computing they've been added to

00:15:03,910 --> 00:15:07,030
sloths

00:15:05,200 --> 00:15:10,270
I'd be easy to add to partition firmware

00:15:07,030 --> 00:15:12,040
as well and of course you can still

00:15:10,270 --> 00:15:19,210
manage keys from the host environment if

00:15:12,040 --> 00:15:23,590
you want to on on qmu so what about

00:15:19,210 --> 00:15:27,220
verifying the firmware right now it

00:15:23,590 --> 00:15:28,960
looks like this is a gap and you know

00:15:27,220 --> 00:15:30,730
maybe we don't need to address it for

00:15:28,960 --> 00:15:32,970
our first pass but ultimately we

00:15:30,730 --> 00:15:37,060
would want to completely verified stack

00:15:32,970 --> 00:15:41,579
one option might be to use just a

00:15:37,060 --> 00:15:44,680
mandate imma in the host environment and

00:15:41,579 --> 00:15:48,519
let i'ma measure the firmware that

00:15:44,680 --> 00:15:51,190
doesn't really give control to the the

00:15:48,519 --> 00:15:53,860
guest administrator necessarily but that

00:15:51,190 --> 00:15:57,040
is is probably a lot better than no

00:15:53,860 --> 00:15:59,050
verification at all and that might be

00:15:57,040 --> 00:16:01,570
good for a first pass and then maybe we

00:15:59,050 --> 00:16:04,329
can think about how we could create a

00:16:01,570 --> 00:16:09,730
layer of indirection for that in the

00:16:04,329 --> 00:16:11,649
future but so to summarize as I said

00:16:09,730 --> 00:16:15,880
we've only recently begun thinking about

00:16:11,649 --> 00:16:17,730
this I put down very much what our

00:16:15,880 --> 00:16:22,389
conversations have been so far

00:16:17,730 --> 00:16:23,800
internally into the slide set we must

00:16:22,389 --> 00:16:26,560
have a common solution across our

00:16:23,800 --> 00:16:31,089
hypervisors we want to reuse as much as

00:16:26,560 --> 00:16:34,180
we can already build upon the concepts

00:16:31,089 --> 00:16:40,029
and code that that already exists on the

00:16:34,180 --> 00:16:43,260
x86 side largely we must have the whole

00:16:40,029 --> 00:16:45,880
stack from top from from bottom to top

00:16:43,260 --> 00:16:49,000
verified and we want to keep it as

00:16:45,880 --> 00:16:50,910
simple as possible for administrators so

00:16:49,000 --> 00:16:54,370
with that I have some references here

00:16:50,910 --> 00:16:58,089
largely ones that Claudio already had

00:16:54,370 --> 00:17:00,490
presented and so I'd welcome any

00:16:58,089 --> 00:17:05,470
reactions questions suggestions that

00:17:00,490 --> 00:17:07,120
anybody might have for us as we think

00:17:05,470 --> 00:17:09,540
about how we're going to securely boot

00:17:07,120 --> 00:17:09,540
guests

00:17:17,390 --> 00:17:23,589
and if that if none then I'll come back

00:17:19,640 --> 00:17:23,589
next year and tell you what we decided

00:17:23,890 --> 00:17:29,210
let's just a little bit off topic here

00:17:26,630 --> 00:17:30,679
but I think we should all give a big big

00:17:29,210 --> 00:17:41,000
round of applause for our master of

00:17:30,679 --> 00:17:48,530
ceremonies James yeah all right thank

00:17:41,000 --> 00:17:50,960
you everyone and well that wraps it up

00:17:48,530 --> 00:17:54,320
for this year's event and so we've had

00:17:50,960 --> 00:17:56,809
more talks and more people attending

00:17:54,320 --> 00:17:59,270
than ever and at this rate you know if

00:17:56,809 --> 00:18:01,580
it keeps continuing then next year I

00:17:59,270 --> 00:18:03,710
guess we'll have even more content so

00:18:01,580 --> 00:18:05,059
one of the issues we've had this year I

00:18:03,710 --> 00:18:06,880
think is not having enough break time

00:18:05,059 --> 00:18:08,750
not enough time for people to

00:18:06,880 --> 00:18:10,370
collaborate and I guess we could have

00:18:08,750 --> 00:18:12,290
you know tried to reduce the number of

00:18:10,370 --> 00:18:14,450
talks we accepted we actually did cut

00:18:12,290 --> 00:18:16,190
back five minutes we're struggling to

00:18:14,450 --> 00:18:18,470
fit things in that actually helped

00:18:16,190 --> 00:18:22,070
stopping us running over another hour

00:18:18,470 --> 00:18:24,830
and a half today or so so but I think

00:18:22,070 --> 00:18:26,120
one question is would we've discussed

00:18:24,830 --> 00:18:28,429
this a few times in the past in the

00:18:26,120 --> 00:18:29,900
Program Committee would people be

00:18:28,429 --> 00:18:32,299
interested in going to a third day and

00:18:29,900 --> 00:18:33,980
having a more relaxed yeah starting at

00:18:32,299 --> 00:18:36,260
9:00 and finishing at 5:00 and having

00:18:33,980 --> 00:18:38,150
longer breaks for hallway sessions and

00:18:36,260 --> 00:18:40,970
then potentially having some time for

00:18:38,150 --> 00:18:43,190
workshops or hacking sessions and so on

00:18:40,970 --> 00:18:45,169
would that make it run into exhausted

00:18:43,190 --> 00:18:49,429
after three days or is it better to keep

00:18:45,169 --> 00:18:52,610
it in two days any so anyway anyone who

00:18:49,429 --> 00:18:55,429
thinks three days is better raise your

00:18:52,610 --> 00:18:56,900
hand okay so that that's something we

00:18:55,429 --> 00:19:02,080
can take back to the Linux Foundation

00:18:56,900 --> 00:19:02,080
folk it's it's quite difficult too

00:19:05,289 --> 00:19:10,309
possibly I'm not quite sure how we'd do

00:19:07,900 --> 00:19:12,760
multiple tracks we've yeah we've talked

00:19:10,309 --> 00:19:16,100
about that as well

00:19:12,760 --> 00:19:19,429
it seems probably everyone wants to go

00:19:16,100 --> 00:19:21,350
to just about every session I think but

00:19:19,429 --> 00:19:23,240
probably the next thing will be to talk

00:19:21,350 --> 00:19:29,029
to the Linux Foundation folk it's quite

00:19:23,240 --> 00:19:30,679
difficult to get resources allocated so

00:19:29,029 --> 00:19:32,690
if anyone has any feedback please let us

00:19:30,679 --> 00:19:33,890
know the our email address is on the on

00:19:32,690 --> 00:19:36,500
the website if you go down and we'll

00:19:33,890 --> 00:19:40,220
have the program committee and thanks

00:19:36,500 --> 00:19:42,710
everyone for enthusiasm and and all of

00:19:40,220 --> 00:19:44,510
the good ideas and discussions and the

00:19:42,710 --> 00:19:48,220
presenters and also obviously a great

00:19:44,510 --> 00:19:51,140
thanks to the to the sponsors and the

00:19:48,220 --> 00:19:53,740
Linux Foundation folk who who did all

00:19:51,140 --> 00:20:00,569
the logistics thanks

00:19:53,740 --> 00:20:00,569

YouTube URL: https://www.youtube.com/watch?v=4E3q56TWcyg


