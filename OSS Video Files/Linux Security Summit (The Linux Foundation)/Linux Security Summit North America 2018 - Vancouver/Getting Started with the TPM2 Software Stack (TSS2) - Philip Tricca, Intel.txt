Title: Getting Started with the TPM2 Software Stack (TSS2) - Philip Tricca, Intel
Publication date: 2018-08-31
Playlist: Linux Security Summit North America 2018 - Vancouver
Description: 
	Getting Started with the TPM2 Software Stack (TSS2) - Philip Tricca, Intel

For the last ~2 years Intel and our collaborators in Trusted Computing Group (TCG) and OSS community have been working to standardize and implement APIs and infrastructure to drive interactions with TPM2 devices. This work has produced TCG standards describing the APIs, an OSS implementation of the APIs and a small community that has organized around the implementation on the web / Github at https://github.com/tpm2-software. In this talk Phil will give an overview of the project before breaking down the various components and APIs in detail. He'll discuss major accomplishments in the year since our last update at the Linux Pliumbers Conference as well as future project direction and use cases.

About Philip Tricca
Philip is a software engineer in Intelâ€™s platform security division working to enable use of the Trusted Platform Module (TPM2) and a number of other security technologies like SGX etc. Phil has worked for the last 2 years to standardize the TCGs TPM2 software stack (TSS2), to develop an open source implementation of the TSS2 APIs as well as working to establish a healthy OSS community around the use of the TSS2 APIs. In the past Phil has been a regular contributor to OSS projects like OpenEmbedded, SELinux and OpenXT. He has spoken regularly on related topics at XenSummit, the Linux Plumbers Conference and the Embedded Linux Conference.
Captions: 
	00:00:00,030 --> 00:00:04,890
so while everyone's filtering back in

00:00:02,070 --> 00:00:07,830
earlier James had plugged what piece act

00:00:04,890 --> 00:00:09,599
the platform security conference that we

00:00:07,830 --> 00:00:10,800
had a couple months ago if anyone's

00:00:09,599 --> 00:00:12,269
interested the materials are starting to

00:00:10,800 --> 00:00:13,259
get posted online and if you're looking

00:00:12,269 --> 00:00:16,049
for it you're looking for platform

00:00:13,259 --> 00:00:20,580
security summit comm so just a little

00:00:16,049 --> 00:00:23,310
plug back so thanks everyone for coming

00:00:20,580 --> 00:00:24,510
back from your break I know the cookies

00:00:23,310 --> 00:00:26,580
and everything but back there must be

00:00:24,510 --> 00:00:30,449
really distracting but hopefully I'll

00:00:26,580 --> 00:00:32,189
lure you back to your seat and with this

00:00:30,449 --> 00:00:35,940
awesome talk about the TPM 2 software

00:00:32,189 --> 00:00:37,200
stack or TSS 2 so I work for Intel my

00:00:35,940 --> 00:00:38,489
name is Philip trigger you can see it up

00:00:37,200 --> 00:00:40,079
there on the slide next to my email if

00:00:38,489 --> 00:00:41,850
you need to get in touch don't hesitate

00:00:40,079 --> 00:00:43,260
you can find me through a number of

00:00:41,850 --> 00:00:46,520
different mechanisms got my github link

00:00:43,260 --> 00:00:49,770
up there and everything so this is the

00:00:46,520 --> 00:00:52,620
TSS 2 as defined by the trusted

00:00:49,770 --> 00:00:55,260
computing group Intel works in TCG quite

00:00:52,620 --> 00:00:58,320
a bit myself I've inherited the throne

00:00:55,260 --> 00:01:02,520
to the the software stack working group

00:00:58,320 --> 00:01:04,379
and we are hard at work standardizing

00:01:02,520 --> 00:01:06,600
those api's and implementing them as

00:01:04,379 --> 00:01:09,299
well so they're kind of there are three

00:01:06,600 --> 00:01:11,340
major thrusts to this talk and one of

00:01:09,299 --> 00:01:13,680
them is not background there's been a

00:01:11,340 --> 00:01:14,760
lot of talk about the TPM interesting

00:01:13,680 --> 00:01:17,100
things that people can do with it

00:01:14,760 --> 00:01:19,590
I'm assuming that there is a fairly kind

00:01:17,100 --> 00:01:21,900
of basic knowledge at least for what it

00:01:19,590 --> 00:01:24,689
is and what it does I'll do one slide on

00:01:21,900 --> 00:01:26,060
background and it'll be pretty quick the

00:01:24,689 --> 00:01:28,860
rest of it is going to be dedicated to

00:01:26,060 --> 00:01:31,380
the design of the the software stack the

00:01:28,860 --> 00:01:32,610
actual collaborative process a little

00:01:31,380 --> 00:01:34,829
bit talking about what we've done in the

00:01:32,610 --> 00:01:37,079
TCG will do a component breakdown so

00:01:34,829 --> 00:01:39,390
it'll be a lot of boxes and arrows to

00:01:37,079 --> 00:01:42,509
show you which components talk to which

00:01:39,390 --> 00:01:44,850
and we'll we'll do a really good break

00:01:42,509 --> 00:01:46,409
down to the plumbing there and the

00:01:44,850 --> 00:01:48,899
second part of this will talk about the

00:01:46,409 --> 00:01:50,040
open source work that we're doing with

00:01:48,899 --> 00:01:52,350
the stack and how we're doing the

00:01:50,040 --> 00:01:54,119
development so I'm sure that it'll be

00:01:52,350 --> 00:01:55,470
hard to disagree with a statement where

00:01:54,119 --> 00:01:58,200
someone would say that in order to

00:01:55,470 --> 00:01:59,820
design an API you need to be informed by

00:01:58,200 --> 00:02:01,680
experimentation you have to try to use

00:01:59,820 --> 00:02:03,659
the API to see that it actually does

00:02:01,680 --> 00:02:05,340
what you expect it to do and that's very

00:02:03,659 --> 00:02:07,640
much a part of this process so we've

00:02:05,340 --> 00:02:10,020
been doing a ton of work about with

00:02:07,640 --> 00:02:12,920
community building promoting adoption

00:02:10,020 --> 00:02:15,620
and trying to make this less painful

00:02:12,920 --> 00:02:17,569
interacting with the TPM usually is and

00:02:15,620 --> 00:02:19,459
then the the last the last bit of the

00:02:17,569 --> 00:02:21,410
talk focuses on unused cases and

00:02:19,459 --> 00:02:23,569
examples and one of the biggest problems

00:02:21,410 --> 00:02:25,550
that we have is that the TPM is very

00:02:23,569 --> 00:02:27,980
complicated in a lot of cases and so

00:02:25,550 --> 00:02:29,810
writing code to use it as kind of

00:02:27,980 --> 00:02:31,489
difficult and so if we're forcing people

00:02:29,810 --> 00:02:33,440
into a situation where they have to both

00:02:31,489 --> 00:02:35,080
you know build all the software get it

00:02:33,440 --> 00:02:37,310
installed and then suddenly write

00:02:35,080 --> 00:02:39,080
however many lines of C code to do

00:02:37,310 --> 00:02:41,019
something meaningful all while trying to

00:02:39,080 --> 00:02:43,700
figure out what something meaningful is

00:02:41,019 --> 00:02:44,959
that's really a heavy lift for a lot of

00:02:43,700 --> 00:02:47,540
people know the learning curve there is

00:02:44,959 --> 00:02:48,650
just too much I would say and so what we

00:02:47,540 --> 00:02:49,970
what we do is we have a bunch of

00:02:48,650 --> 00:02:53,600
projects that are out there that will

00:02:49,970 --> 00:02:55,850
help people just build some simple cases

00:02:53,600 --> 00:02:58,519
where they can do something useful and

00:02:55,850 --> 00:03:00,890
not have to invest you know weeks or

00:02:58,519 --> 00:03:03,620
months in to get there so really it's

00:03:00,890 --> 00:03:05,450
kind of about instant gratification and

00:03:03,620 --> 00:03:06,680
we'll also talk a bit about the the

00:03:05,450 --> 00:03:08,060
flexibility that's been built into the

00:03:06,680 --> 00:03:10,549
stack and I've actually worked on a use

00:03:08,060 --> 00:03:13,040
case specifically to to exercise this a

00:03:10,549 --> 00:03:14,569
bit so we're showing that the stack has

00:03:13,040 --> 00:03:17,959
various components and that can be used

00:03:14,569 --> 00:03:20,329
in a bunch of different use cases and so

00:03:17,959 --> 00:03:21,920
background really quick if you want to

00:03:20,329 --> 00:03:23,420
get up to speed on the TPM you can go

00:03:21,920 --> 00:03:25,160
out and read this back if you like it's

00:03:23,420 --> 00:03:26,660
pretty heavyweight I would instead

00:03:25,160 --> 00:03:29,390
recommend that you find some materials

00:03:26,660 --> 00:03:30,920
or RL seagulls most recent book I'm a

00:03:29,390 --> 00:03:33,590
big fan of the writing it's very

00:03:30,920 --> 00:03:34,760
approachable that's pretty much all I

00:03:33,590 --> 00:03:36,920
have to say about where you should start

00:03:34,760 --> 00:03:38,239
out but really when you're when you

00:03:36,920 --> 00:03:40,519
looking at the evolution of the TPM from

00:03:38,239 --> 00:03:42,560
1.2 to 2.0 the use cases are largely

00:03:40,519 --> 00:03:44,810
unchanged this thing is still very good

00:03:42,560 --> 00:03:46,370
for protecting encryption keys signing

00:03:44,810 --> 00:03:48,560
keys while they're in use so really

00:03:46,370 --> 00:03:49,579
cryptographic key protection and the

00:03:48,560 --> 00:03:55,010
notion of this route of trust for

00:03:49,579 --> 00:03:56,930
storage and reporting the the TPM 1.2

00:03:55,010 --> 00:03:58,400
and the 2 dotto didn't really change

00:03:56,930 --> 00:03:59,989
that much as far as that use case is

00:03:58,400 --> 00:04:01,100
concerned however the actual

00:03:59,989 --> 00:04:04,280
implementation has changed fairly

00:04:01,100 --> 00:04:06,230
drastically algorithms support having

00:04:04,280 --> 00:04:08,420
algorithm agility which means that you

00:04:06,230 --> 00:04:11,000
can start implementing new algorithms in

00:04:08,420 --> 00:04:13,190
the TPM and the structure of the command

00:04:11,000 --> 00:04:14,930
and response buffers is resilient to

00:04:13,190 --> 00:04:18,650
this so there's a lot of you know size

00:04:14,930 --> 00:04:21,140
and then you know some field value also

00:04:18,650 --> 00:04:22,610
the to DA has added some interesting

00:04:21,140 --> 00:04:23,900
stuff around the protection for the

00:04:22,610 --> 00:04:26,180
communication path between the

00:04:23,900 --> 00:04:26,720
application and the TPM itself so there

00:04:26,180 --> 00:04:28,760
are

00:04:26,720 --> 00:04:29,720
protected an encrypted session so

00:04:28,760 --> 00:04:30,950
integrity protected and encrypted

00:04:29,720 --> 00:04:33,860
sessions which is particularly

00:04:30,950 --> 00:04:35,360
interesting so that's it for background

00:04:33,860 --> 00:04:37,250
the rest of us is just gonna go straight

00:04:35,360 --> 00:04:40,750
into the software stack and we'll talk

00:04:37,250 --> 00:04:43,310
first about the design so I have never

00:04:40,750 --> 00:04:45,440
actually sat down and written an API

00:04:43,310 --> 00:04:46,640
that was used by a large number of

00:04:45,440 --> 00:04:49,310
people so the first thing I did when

00:04:46,640 --> 00:04:50,810
this project was kind of left by by the

00:04:49,310 --> 00:04:52,490
group that was running it and I ended up

00:04:50,810 --> 00:04:52,970
kind of scooping up and carrying it

00:04:52,490 --> 00:04:54,560
forward

00:04:52,970 --> 00:04:55,820
the first thing I did was just jump on

00:04:54,560 --> 00:04:59,270
my favorite search engine and type in

00:04:55,820 --> 00:05:02,090
how to design an API then I went back

00:04:59,270 --> 00:05:07,160
and added how to design a good API and I

00:05:02,090 --> 00:05:09,290
found a talk that's up on on YouTube

00:05:07,160 --> 00:05:11,180
I think it's Joshua Bloch is I'm sure

00:05:09,290 --> 00:05:12,650
I'm ruining his last name but this is

00:05:11,180 --> 00:05:14,750
the guy from Google who's been designing

00:05:12,650 --> 00:05:17,480
api's probably since before I was born

00:05:14,750 --> 00:05:21,050
and the thing that I took mostly out of

00:05:17,480 --> 00:05:22,880
his talk is that use cases are where

00:05:21,050 --> 00:05:24,500
this this whole thing comes from if you

00:05:22,880 --> 00:05:26,450
don't know how the API or how you want

00:05:24,500 --> 00:05:29,540
the API to be used it will probably

00:05:26,450 --> 00:05:32,060
never be used for anything useful so all

00:05:29,540 --> 00:05:33,440
of this is driven by use cases and from

00:05:32,060 --> 00:05:35,810
these use cases came this notion of a

00:05:33,440 --> 00:05:37,760
layered design in teleworking 4 until

00:05:35,810 --> 00:05:38,840
they we write a lot of firmware we write

00:05:37,760 --> 00:05:40,700
a lot of stuff that gets very close to

00:05:38,840 --> 00:05:43,520
the hardware and so sometimes thinking

00:05:40,700 --> 00:05:44,720
of UEFI you may not have the environment

00:05:43,520 --> 00:05:46,820
available to you when you're writing

00:05:44,720 --> 00:05:48,350
this code that would support you know

00:05:46,820 --> 00:05:50,300
what we think of as a regular user space

00:05:48,350 --> 00:05:51,530
process so we showed up with a

00:05:50,300 --> 00:05:53,060
requirement just that we need to be able

00:05:51,530 --> 00:05:55,100
to use this stuff from a firmware

00:05:53,060 --> 00:05:56,990
environment now obviously we wanted to

00:05:55,100 --> 00:05:59,420
be able to you'd be used from a normal

00:05:56,990 --> 00:06:01,790
ring 3 environment and so we end up kind

00:05:59,420 --> 00:06:03,050
of having to layer these things one of

00:06:01,790 --> 00:06:04,850
the more useful things that we did in

00:06:03,050 --> 00:06:07,970
this also is separating the transport

00:06:04,850 --> 00:06:09,650
layer from the API itself it's that was

00:06:07,970 --> 00:06:14,090
a really hard part for me working with

00:06:09,650 --> 00:06:16,190
the 1.2 TSI strausser's is that there

00:06:14,090 --> 00:06:18,170
was a very tight coupling between the

00:06:16,190 --> 00:06:20,480
daemon portion and you know the user

00:06:18,170 --> 00:06:22,970
space application this made it really

00:06:20,480 --> 00:06:24,230
hard to do things in early boot code if

00:06:22,970 --> 00:06:26,330
you'd wanted to do something without

00:06:24,230 --> 00:06:27,800
having to start the daemon or even

00:06:26,330 --> 00:06:30,140
earlier than that if you may not haven't

00:06:27,800 --> 00:06:32,540
even been able to so I think of that as

00:06:30,140 --> 00:06:34,250
a really really big improvement also

00:06:32,540 --> 00:06:35,180
synchronous and asynchronous we were

00:06:34,250 --> 00:06:36,770
wanting to be able to support

00:06:35,180 --> 00:06:38,540
event-driven programming if you have a

00:06:36,770 --> 00:06:39,620
synchronous API you can support an

00:06:38,540 --> 00:06:41,800
event-driven

00:06:39,620 --> 00:06:44,300
work that would use something like

00:06:41,800 --> 00:06:46,660
worker thread model but there are also

00:06:44,300 --> 00:06:49,160
plenty of other event-driven programming

00:06:46,660 --> 00:06:50,720
libraries out there that use pole and so

00:06:49,160 --> 00:06:52,010
we wanted to be able to use a pole

00:06:50,720 --> 00:06:53,540
interface to this as well so that we

00:06:52,010 --> 00:06:57,470
could support you know more than just

00:06:53,540 --> 00:06:58,850
one event-driven programming and let's

00:06:57,470 --> 00:07:00,979
see the other thing is that we don't

00:06:58,850 --> 00:07:02,360
want to abstract away all of the details

00:07:00,979 --> 00:07:04,520
of the TPM we want to be able to have

00:07:02,360 --> 00:07:07,130
very fine control but also at the same

00:07:04,520 --> 00:07:08,900
time when you don't need that very fine

00:07:07,130 --> 00:07:11,930
control and all those details you'll get

00:07:08,900 --> 00:07:13,699
some same defaults from the actual from

00:07:11,930 --> 00:07:15,080
the stack and sometimes those defaults

00:07:13,699 --> 00:07:17,900
are chosen by the TCG they come out of

00:07:15,080 --> 00:07:20,780
the working group we pick constants cite

00:07:17,900 --> 00:07:22,400
various sizes for structures that are

00:07:20,780 --> 00:07:25,370
kind of formalized in the the

00:07:22,400 --> 00:07:27,110
implementation but also there's the

00:07:25,370 --> 00:07:29,210
notion of you know Linux distro may have

00:07:27,110 --> 00:07:30,530
their TPM or their infrastructure set up

00:07:29,210 --> 00:07:31,669
differently and they may want a

00:07:30,530 --> 00:07:33,710
different set of transport and so

00:07:31,669 --> 00:07:35,419
there's a way for for the libraries at

00:07:33,710 --> 00:07:38,960
Build time to be able to override some

00:07:35,419 --> 00:07:40,400
of these defaults so the layered

00:07:38,960 --> 00:07:42,650
approach will kind of jump into that on

00:07:40,400 --> 00:07:44,840
the next slide but the lowest layers

00:07:42,650 --> 00:07:46,700
just think of getting low and closer to

00:07:44,840 --> 00:07:49,430
the hardware this is intended for the

00:07:46,700 --> 00:07:50,840
use of by expert applications or things

00:07:49,430 --> 00:07:52,760
that are in constrained environments so

00:07:50,840 --> 00:07:55,190
microcontrollers you know really really

00:07:52,760 --> 00:07:56,960
embedded stuff and so that means just a

00:07:55,190 --> 00:07:58,039
minimal set of dependencies if you're

00:07:56,960 --> 00:08:00,260
gonna statically link a lot of this

00:07:58,039 --> 00:08:02,060
stuff together you don't want to have to

00:08:00,260 --> 00:08:04,010
statically link in tons of things and

00:08:02,060 --> 00:08:05,510
even worse if those API is required

00:08:04,010 --> 00:08:08,270
access to the file system that would be

00:08:05,510 --> 00:08:09,830
particularly problematic and the upper

00:08:08,270 --> 00:08:12,770
layers are providing some convenience

00:08:09,830 --> 00:08:16,280
functions and again more features means

00:08:12,770 --> 00:08:17,840
more dependencies so this this diagram

00:08:16,280 --> 00:08:19,400
comes pretty much straightly straight

00:08:17,840 --> 00:08:21,620
from the spec and it's you know the kind

00:08:19,400 --> 00:08:24,080
of layer cake that showed that we kind

00:08:21,620 --> 00:08:25,639
of build up from the bottom the the two

00:08:24,080 --> 00:08:26,780
lowest layers in this I guess the lowest

00:08:25,639 --> 00:08:28,370
one the device driver layer really

00:08:26,780 --> 00:08:30,710
doesn't have a standard interface this

00:08:28,370 --> 00:08:31,910
really depends on the operating system

00:08:30,710 --> 00:08:33,890
your you're working on or the

00:08:31,910 --> 00:08:36,529
environment you're in you're in UEFI you

00:08:33,890 --> 00:08:38,029
get access to the tree protocol which I

00:08:36,529 --> 00:08:39,610
guess has been renamed to the TCG to

00:08:38,029 --> 00:08:42,070
protocol now that it's been standardized

00:08:39,610 --> 00:08:44,120
even though it didn't change at all

00:08:42,070 --> 00:08:46,160
there's also the device driver layer

00:08:44,120 --> 00:08:47,930
from Linux that has a device node but

00:08:46,160 --> 00:08:49,889
also if you're on Windows you get TBS

00:08:47,930 --> 00:08:51,569
and I'm sure you know

00:08:49,889 --> 00:08:53,459
a number of other interfaces that may

00:08:51,569 --> 00:08:54,720
get written and exposed there so the

00:08:53,459 --> 00:08:56,609
device driver really has a non-standard

00:08:54,720 --> 00:08:58,049
interface and this is again why we

00:08:56,609 --> 00:09:01,170
wanted to separate the transmission

00:08:58,049 --> 00:09:02,879
layer the device driver may be packaged

00:09:01,170 --> 00:09:05,399
or may not be packaged with the access

00:09:02,879 --> 00:09:07,980
broker and resource management daemon or

00:09:05,399 --> 00:09:09,929
that component I should say and so in

00:09:07,980 --> 00:09:12,329
1.2 that was a user space process in

00:09:09,929 --> 00:09:14,069
Windows it's built into the the kernel

00:09:12,329 --> 00:09:15,899
driver and on Linux we're starting to

00:09:14,069 --> 00:09:17,939
move closer and closer to having that

00:09:15,899 --> 00:09:19,799
full set of functionality in the kernel

00:09:17,939 --> 00:09:21,029
as well right now the implementation of

00:09:19,799 --> 00:09:23,519
the resource manager and the kernel is

00:09:21,029 --> 00:09:26,399
very very primitive we still have and

00:09:23,519 --> 00:09:28,049
maintain a daemon that does this in user

00:09:26,399 --> 00:09:30,899
space and we're slowly migrating

00:09:28,049 --> 00:09:33,029
features in as that makes sense and so

00:09:30,899 --> 00:09:35,850
as your where the glue that kind of

00:09:33,029 --> 00:09:38,040
holds together these layers is this TPM

00:09:35,850 --> 00:09:39,869
command transmission interface if your

00:09:38,040 --> 00:09:40,829
resource managers on the kernel you

00:09:39,869 --> 00:09:42,269
really don't have to worry about too

00:09:40,829 --> 00:09:44,549
much there you just kind of put the the

00:09:42,269 --> 00:09:47,009
T CTI layer on top of that and it plumbs

00:09:44,549 --> 00:09:49,049
everything into the upper layer api's if

00:09:47,009 --> 00:09:50,999
your resource management is being done

00:09:49,049 --> 00:09:52,799
by a user space process then you'll have

00:09:50,999 --> 00:09:54,299
a layer that you know sits underneath it

00:09:52,799 --> 00:09:56,040
that is the T CTI and it'll expose a

00:09:54,299 --> 00:09:57,509
front-end you'll have another one on top

00:09:56,040 --> 00:09:59,579
of that so you could really just stack

00:09:57,509 --> 00:10:01,889
these things that endows IAM but i don't

00:09:59,579 --> 00:10:03,059
recommend you try that the top layer

00:10:01,889 --> 00:10:05,069
here is really the stuff that

00:10:03,059 --> 00:10:06,989
programmers care about this is the the

00:10:05,069 --> 00:10:09,419
api's that programs interact with

00:10:06,989 --> 00:10:11,459
generally and so working from left to

00:10:09,419 --> 00:10:13,919
right the system api here is our lowest

00:10:11,459 --> 00:10:16,799
layer it is a extremely thin layer on

00:10:13,919 --> 00:10:17,730
top of the actual TPM commands every

00:10:16,799 --> 00:10:19,139
command is exposed

00:10:17,730 --> 00:10:24,059
there is a synchronous and asynchronous

00:10:19,139 --> 00:10:25,619
version and the the system API does very

00:10:24,059 --> 00:10:27,839
little more than just turning see

00:10:25,619 --> 00:10:30,329
structures into a TPM command byte

00:10:27,839 --> 00:10:33,089
stream sending it out using a TC ti that

00:10:30,329 --> 00:10:35,399
it's been configured to use and getting

00:10:33,089 --> 00:10:36,889
back the response turning it back into C

00:10:35,399 --> 00:10:40,309
structures handing them to the caller

00:10:36,889 --> 00:10:43,739
extremely simple but extremely powerful

00:10:40,309 --> 00:10:45,239
moving next up to the right enhance

00:10:43,739 --> 00:10:47,399
system API is really what it sounds like

00:10:45,239 --> 00:10:49,829
it just enhances the system API and

00:10:47,399 --> 00:10:50,879
provides some really nice convenience

00:10:49,829 --> 00:10:53,279
functions which are really just

00:10:50,879 --> 00:10:55,589
automating the crypto operations for H

00:10:53,279 --> 00:10:58,319
Mac and encrypted sessions it will also

00:10:55,589 --> 00:10:59,160
do dynamic loading of the T CGI modules

00:10:58,319 --> 00:11:01,169
and this is where some of that

00:10:59,160 --> 00:11:02,489
configuration comes from if you're on a

00:11:01,169 --> 00:11:03,480
properly configured system in your

00:11:02,489 --> 00:11:06,240
distros out up the pack

00:11:03,480 --> 00:11:07,950
they can choose the default ECT I that

00:11:06,240 --> 00:11:11,720
makes sense for their system and you

00:11:07,950 --> 00:11:14,310
won't even need to tell esis that that

00:11:11,720 --> 00:11:15,630
which TC TI you want you can just give

00:11:14,310 --> 00:11:17,460
it a null pointer and it'll pick the

00:11:15,630 --> 00:11:19,230
right one for you still you can override

00:11:17,460 --> 00:11:21,480
it by initializing one yourself and

00:11:19,230 --> 00:11:23,400
passing it in if you need to the box

00:11:21,480 --> 00:11:26,160
here in gray is the one that still isn't

00:11:23,400 --> 00:11:28,380
done the feature API is meant to

00:11:26,160 --> 00:11:29,490
abstract the TPM even further but that

00:11:28,380 --> 00:11:33,390
stuff is still very much under

00:11:29,490 --> 00:11:35,370
consideration so now that we've kind of

00:11:33,390 --> 00:11:36,810
broken down the layer cake let's

00:11:35,370 --> 00:11:37,590
actually look at what these things look

00:11:36,810 --> 00:11:39,570
like when we put them into an

00:11:37,590 --> 00:11:40,860
application just like what I was saying

00:11:39,570 --> 00:11:42,990
on the last slide the system API

00:11:40,860 --> 00:11:44,910
transforms C types into TPM command

00:11:42,990 --> 00:11:46,860
buffers one-to-one mapping with the

00:11:44,910 --> 00:11:48,630
commands and it's suitable for highly

00:11:46,860 --> 00:11:50,880
embedded applications we don't recommend

00:11:48,630 --> 00:11:53,310
you use this from you know general user

00:11:50,880 --> 00:11:54,780
space apps but for the quite a while

00:11:53,310 --> 00:11:56,160
this was all the we had and so we were

00:11:54,780 --> 00:11:58,430
actually doing that and I can tell you

00:11:56,160 --> 00:12:00,630
it's very painful to use in that regard

00:11:58,430 --> 00:12:02,610
internally this uses another utility

00:12:00,630 --> 00:12:04,470
library that we defined which is really

00:12:02,610 --> 00:12:07,380
just where we do this type marshalling

00:12:04,470 --> 00:12:09,750
for every type that exists in the TPM

00:12:07,380 --> 00:12:11,580
spec there is a corresponding Marshall

00:12:09,750 --> 00:12:14,010
and on Marshall function in this library

00:12:11,580 --> 00:12:15,450
and so the system API really just does a

00:12:14,010 --> 00:12:17,220
little bit of state tracking internally

00:12:15,450 --> 00:12:19,020
and calls out to the the marshaling

00:12:17,220 --> 00:12:21,000
library then everything gets pumped out

00:12:19,020 --> 00:12:22,650
through the the transmission interface

00:12:21,000 --> 00:12:25,680
in the bottom and it gets sent over

00:12:22,650 --> 00:12:27,210
whatever IPC mechanism down to a device

00:12:25,680 --> 00:12:29,310
driver and you'll get your response back

00:12:27,210 --> 00:12:30,600
so we have a bunch of these T CGI

00:12:29,310 --> 00:12:32,640
modules that we can actually kind of

00:12:30,600 --> 00:12:34,170
remix very dynamically so you don't even

00:12:32,640 --> 00:12:36,090
need to recompile the application in

00:12:34,170 --> 00:12:37,860
order to change them and they'll allow

00:12:36,090 --> 00:12:39,420
you to talk to either another device

00:12:37,860 --> 00:12:41,190
driver we have one for talking to the

00:12:39,420 --> 00:12:43,140
Microsoft simulator code so you can run

00:12:41,190 --> 00:12:45,870
the TPM and a userspace process

00:12:43,140 --> 00:12:47,010
excellent for debugging which you know

00:12:45,870 --> 00:12:49,620
you end up having to do a lot of when

00:12:47,010 --> 00:12:51,150
you try to miss this stuff and one to

00:12:49,620 --> 00:12:53,550
talk to TBS we actually have one that'll

00:12:51,150 --> 00:12:56,970
work on Windows you can use the the

00:12:53,550 --> 00:12:59,270
stack on Windows as well adding the

00:12:56,970 --> 00:13:01,710
enhanced system API layer on top of this

00:12:59,270 --> 00:13:03,330
we add some of these additional

00:13:01,710 --> 00:13:06,450
dependencies and really this comes in

00:13:03,330 --> 00:13:08,130
the form of the crypto libraries so the

00:13:06,450 --> 00:13:11,100
current implementation we support Lib G

00:13:08,130 --> 00:13:13,980
crypt and open SSL and I you know adding

00:13:11,100 --> 00:13:15,250
adding additional libraries isn't an

00:13:13,980 --> 00:13:18,700
enormous burden there

00:13:15,250 --> 00:13:21,730
are so well defined interfaces inside of

00:13:18,700 --> 00:13:25,570
the the esis that can be used to add

00:13:21,730 --> 00:13:26,950
additional crypto layers this is really

00:13:25,570 --> 00:13:29,290
what you want to do if you're writing a

00:13:26,950 --> 00:13:30,760
general user space see application right

00:13:29,290 --> 00:13:31,990
now this is what we're recommending to

00:13:30,760 --> 00:13:33,940
folks and we've actually just added this

00:13:31,990 --> 00:13:37,090
fairly recently it was a really big

00:13:33,940 --> 00:13:38,230
development for us now there's nothing

00:13:37,090 --> 00:13:40,030
that strictly says that you need to

00:13:38,230 --> 00:13:42,700
build these in this way you could have a

00:13:40,030 --> 00:13:44,410
completely separate system API library

00:13:42,700 --> 00:13:46,570
and you could reimplemented cysts

00:13:44,410 --> 00:13:48,700
entirely without using it but that

00:13:46,570 --> 00:13:50,710
doesn't make a lot of sense to me we use

00:13:48,700 --> 00:13:52,240
ours internally and it's a it's a great

00:13:50,710 --> 00:13:55,290
way to get you know just better test

00:13:52,240 --> 00:13:58,390
coverage you just have fewer code paths

00:13:55,290 --> 00:13:59,740
so lastly just before we're done with

00:13:58,390 --> 00:14:03,340
the actual architecture side of it the

00:13:59,740 --> 00:14:06,150
resource management is really

00:14:03,340 --> 00:14:09,490
interesting and unfortunately complex

00:14:06,150 --> 00:14:11,050
TPMS are really small really inexpensive

00:14:09,490 --> 00:14:14,710
and you know they have RAM on the order

00:14:11,050 --> 00:14:17,320
of a few kilobytes you the TPM itself

00:14:14,710 --> 00:14:18,940
has no notion of users it doesn't know

00:14:17,320 --> 00:14:20,830
where the commands are coming from and

00:14:18,940 --> 00:14:22,780
so the resource management daemon

00:14:20,830 --> 00:14:25,060
component or the component that may be

00:14:22,780 --> 00:14:26,860
in your kernel really just is there to

00:14:25,060 --> 00:14:28,930
make sure that the the objects that you

00:14:26,860 --> 00:14:30,550
have previous load Italy loaded and that

00:14:28,930 --> 00:14:32,680
you are going to use again get loaded

00:14:30,550 --> 00:14:35,470
for you the resource management

00:14:32,680 --> 00:14:38,740
component uses just three TPM commands

00:14:35,470 --> 00:14:40,150
to do this and really the the management

00:14:38,740 --> 00:14:42,089
component comes down to saving and

00:14:40,150 --> 00:14:43,960
loading context on behalf of the caller

00:14:42,089 --> 00:14:46,450
this gets you a certain kind of

00:14:43,960 --> 00:14:48,460
isolation from other users of the TPM

00:14:46,450 --> 00:14:50,530
the resource manager loads your contacts

00:14:48,460 --> 00:14:52,660
for you when you're done it unloads them

00:14:50,530 --> 00:14:54,370
then executes another command and your

00:14:52,660 --> 00:14:55,360
objects will not be available to that

00:14:54,370 --> 00:14:57,310
that command because it may not be

00:14:55,360 --> 00:14:58,810
coming from you and the resource

00:14:57,310 --> 00:15:01,810
management component is usually the part

00:14:58,810 --> 00:15:03,670
that understands the the connection of

00:15:01,810 --> 00:15:05,020
the client connection so it knows the

00:15:03,670 --> 00:15:07,210
difference between you know where the

00:15:05,020 --> 00:15:08,320
commands are coming from and like I said

00:15:07,210 --> 00:15:10,180
earlier we're starting to move this

00:15:08,320 --> 00:15:12,310
functionality to the kernel device

00:15:10,180 --> 00:15:14,770
driver not as quickly as I would like

00:15:12,310 --> 00:15:18,880
but it's you know there's there's just a

00:15:14,770 --> 00:15:20,980
lot of work to go around really so the

00:15:18,880 --> 00:15:23,560
software stack from the open source

00:15:20,980 --> 00:15:25,900
implementation side this is the

00:15:23,560 --> 00:15:28,089
community that we're trying to build the

00:15:25,900 --> 00:15:28,870
adoption that we're seeing and you know

00:15:28,089 --> 00:15:31,720
some of our

00:15:28,870 --> 00:15:33,820
success stories along the way so when I

00:15:31,720 --> 00:15:36,580
inherited this project it was almost

00:15:33,820 --> 00:15:38,170
three years ago now I was definitely not

00:15:36,580 --> 00:15:40,300
the first person working on it it was a

00:15:38,170 --> 00:15:43,660
prototype developed by a team that came

00:15:40,300 --> 00:15:46,630
before me who all magically decided to

00:15:43,660 --> 00:15:48,130
leave at the same time and so the whole

00:15:46,630 --> 00:15:50,560
thing just kind of dropped on the floor

00:15:48,130 --> 00:15:52,930
and to my to my boss's credit and you

00:15:50,560 --> 00:15:54,670
know I know one said hey Phil go clean

00:15:52,930 --> 00:15:56,980
that out they said you sure you want to

00:15:54,670 --> 00:15:58,390
clean that up and this stuff seems

00:15:56,980 --> 00:16:02,589
pretty important to me I mean I've been

00:15:58,390 --> 00:16:03,940
I've written systems that use TPM 1.2 it

00:16:02,589 --> 00:16:05,350
has some really interesting properties

00:16:03,940 --> 00:16:07,630
and I think you know that the open

00:16:05,350 --> 00:16:08,920
source community needs to have this

00:16:07,630 --> 00:16:11,589
stuff available and it should be done

00:16:08,920 --> 00:16:14,020
right because it's kind of plumbing and

00:16:11,589 --> 00:16:16,000
you just want your plumbing to work but

00:16:14,020 --> 00:16:18,550
when I picked it up I had to do this you

00:16:16,000 --> 00:16:20,200
know stability reliability how do I get

00:16:18,550 --> 00:16:21,910
this thing into a shape so I can

00:16:20,200 --> 00:16:24,520
actually support it what happens if

00:16:21,910 --> 00:16:25,930
someone submits a bug and I just I don't

00:16:24,520 --> 00:16:28,870
even know what that part of the system

00:16:25,930 --> 00:16:31,750
does so it all you know the the initial

00:16:28,870 --> 00:16:33,610
year of this was just triage pay down

00:16:31,750 --> 00:16:35,080
technical debt identify code that's

00:16:33,610 --> 00:16:38,680
liability that I know I can't support

00:16:35,080 --> 00:16:40,510
and come up with a way to remediate that

00:16:38,680 --> 00:16:42,400
whole thing and that really gets down to

00:16:40,510 --> 00:16:44,050
making it to bubble like how you know

00:16:42,400 --> 00:16:45,490
someone sends me a bug report if I don't

00:16:44,050 --> 00:16:47,529
if I've never worked in that part of the

00:16:45,490 --> 00:16:48,880
system how do I at least get meaningful

00:16:47,529 --> 00:16:52,029
information out of it to find out where

00:16:48,880 --> 00:16:53,830
it's coming from a lot of us got down to

00:16:52,029 --> 00:16:56,290
write the right tools for the tasks when

00:16:53,830 --> 00:16:58,170
I inherited this the build system was

00:16:56,290 --> 00:17:00,610
one make file that was handwritten

00:16:58,170 --> 00:17:03,670
that doesn't make this particularly easy

00:17:00,610 --> 00:17:05,740
for operating systems or distros to

00:17:03,670 --> 00:17:08,530
actually package the the stuff so

00:17:05,740 --> 00:17:11,589
finding you know a real build system see

00:17:08,530 --> 00:17:14,110
make would have done the task just fine

00:17:11,589 --> 00:17:15,750
I chose Auto tools they both have their

00:17:14,110 --> 00:17:17,860
problems they both have their strengths

00:17:15,750 --> 00:17:20,500
and some of the things I just kind of

00:17:17,860 --> 00:17:22,329
cut off this the my predecessor that was

00:17:20,500 --> 00:17:23,980
leading the development effort was very

00:17:22,329 --> 00:17:25,990
much a windows developer even though

00:17:23,980 --> 00:17:27,730
this was really designed to be used on

00:17:25,990 --> 00:17:29,410
Linux and so he did all of his work in

00:17:27,730 --> 00:17:30,700
Visual Studio and the first thing I did

00:17:29,410 --> 00:17:32,230
when I came in was just look at a visual

00:17:30,700 --> 00:17:36,400
studio files and I haven't looked at

00:17:32,230 --> 00:17:37,560
this in 15 years and I deleted them it

00:17:36,400 --> 00:17:39,820
didn't make me particularly popular

00:17:37,560 --> 00:17:41,260
because it turns out there was a group

00:17:39,820 --> 00:17:42,180
and Intel that was actually using that

00:17:41,260 --> 00:17:44,890
stuff

00:17:42,180 --> 00:17:46,510
but that was how I found out and you

00:17:44,890 --> 00:17:48,070
know and then that's how we got our

00:17:46,510 --> 00:17:49,180
remediation strategy together right I

00:17:48,070 --> 00:17:51,430
mean they weren't even using the latest

00:17:49,180 --> 00:17:52,780
version anyways so you know I got to do

00:17:51,430 --> 00:17:54,610
though when are you gonna update when do

00:17:52,780 --> 00:17:56,050
I have to have this ready and so I went

00:17:54,610 --> 00:17:57,960
back and learned a lot about Visual

00:17:56,050 --> 00:18:00,280
Studio learn about building dll's

00:17:57,960 --> 00:18:02,950
learned about doing continuous

00:18:00,280 --> 00:18:04,930
integration on Windows and you know

00:18:02,950 --> 00:18:06,970
we've just kind of moved it forward and

00:18:04,930 --> 00:18:09,370
now our windows support is actually a

00:18:06,970 --> 00:18:10,780
lot better than it used to be some

00:18:09,370 --> 00:18:13,000
things just had to go entirely though

00:18:10,780 --> 00:18:16,780
the original resource management daemon

00:18:13,000 --> 00:18:18,520
was an absolute disaster and I just

00:18:16,780 --> 00:18:19,660
deleted it and started over and it was

00:18:18,520 --> 00:18:21,670
so bad that actually the people that

00:18:19,660 --> 00:18:23,500
were using it inside of Intel they had

00:18:21,670 --> 00:18:25,270
some problems using it and it was for a

00:18:23,500 --> 00:18:26,680
high priority project and they threw me

00:18:25,270 --> 00:18:28,840
on a plane and sent me to Poland for a

00:18:26,680 --> 00:18:30,550
week to try to help them figure it out

00:18:28,840 --> 00:18:32,350
and after that we worked through their

00:18:30,550 --> 00:18:35,320
issue I went back and deleted and

00:18:32,350 --> 00:18:36,850
started writing over all of this boils

00:18:35,320 --> 00:18:38,920
down to just trying to build a healthy

00:18:36,850 --> 00:18:40,210
open-source project something that looks

00:18:38,920 --> 00:18:41,860
healthy from the outside when people are

00:18:40,210 --> 00:18:43,420
looking at it so that they'll say yes I

00:18:41,860 --> 00:18:45,550
actually think I should use that I'm

00:18:43,420 --> 00:18:47,500
willing to build something that depends

00:18:45,550 --> 00:18:48,970
on that and I'm not done I and I'm

00:18:47,500 --> 00:18:51,540
pretty sure that it'll still be there

00:18:48,970 --> 00:18:54,400
when I need it then it'll get updated

00:18:51,540 --> 00:18:56,830
success metrics like who's you know

00:18:54,400 --> 00:18:58,900
adoption right your end user and a lot

00:18:56,830 --> 00:19:00,160
of these things really isn't at the end

00:18:58,900 --> 00:19:02,560
user who's sitting at the keyboard

00:19:00,160 --> 00:19:05,500
they don't compile source themselves a

00:19:02,560 --> 00:19:07,210
lot of the time the distro packager ends

00:19:05,500 --> 00:19:09,100
up becoming really your target audience

00:19:07,210 --> 00:19:11,350
you want the distro packager to be happy

00:19:09,100 --> 00:19:13,960
and to make packaging this stuff for the

00:19:11,350 --> 00:19:15,610
distro very easy how you communicate

00:19:13,960 --> 00:19:17,260
with them about changes semantic

00:19:15,610 --> 00:19:18,790
versioning is very important now when

00:19:17,260 --> 00:19:20,820
you're actually breaking API making it

00:19:18,790 --> 00:19:24,610
very clear in your version numbers

00:19:20,820 --> 00:19:26,740
testing was super important the test

00:19:24,610 --> 00:19:31,210
code that I inherited was a 9000 line C

00:19:26,740 --> 00:19:32,920
application one application with tests

00:19:31,210 --> 00:19:34,960
that you know later tests would have

00:19:32,920 --> 00:19:37,180
would depend on state that was set up by

00:19:34,960 --> 00:19:39,160
previous tests so yanking all of that

00:19:37,180 --> 00:19:40,750
out decomposing that putting it into a

00:19:39,160 --> 00:19:42,730
test harness that's built into the build

00:19:40,750 --> 00:19:44,920
system separating unit and integration

00:19:42,730 --> 00:19:46,600
tests there really weren't even a test

00:19:44,920 --> 00:19:48,750
to begin with but I'm now a big fan of C

00:19:46,600 --> 00:19:51,490
Macha which is really really cool

00:19:48,750 --> 00:19:53,380
integration tests that actually get

00:19:51,490 --> 00:19:54,820
their own version of the TPM a new

00:19:53,380 --> 00:19:55,430
instance of the simulator when you're

00:19:54,820 --> 00:19:57,860
running the test

00:19:55,430 --> 00:19:59,900
that have the test harness that will set

00:19:57,860 --> 00:20:01,130
that up for you and tear it down that

00:19:59,900 --> 00:20:02,540
will get you meaningful logging

00:20:01,130 --> 00:20:04,580
information when something breaks and

00:20:02,540 --> 00:20:09,020
then tying it all together with a CI

00:20:04,580 --> 00:20:10,850
loop and and this was really just you

00:20:09,020 --> 00:20:12,260
know a one person to ask for a while

00:20:10,850 --> 00:20:14,000
because I wasn't just trying to attract

00:20:12,260 --> 00:20:15,620
users I was trying to attract people

00:20:14,000 --> 00:20:17,330
inside of the company inside of Intel

00:20:15,620 --> 00:20:19,160
and outside of Intel as well to

00:20:17,330 --> 00:20:21,710
contribute I needed people to help me do

00:20:19,160 --> 00:20:23,540
this because I couldn't do it alone and

00:20:21,710 --> 00:20:26,210
so we've got all of our you know all of

00:20:23,540 --> 00:20:27,590
our Travis CI coveralls or tests we're

00:20:26,210 --> 00:20:28,850
getting metrics for our code coverage

00:20:27,590 --> 00:20:30,170
our goal is to have everything above

00:20:28,850 --> 00:20:31,580
eighty percent and I think we've only

00:20:30,170 --> 00:20:35,000
got one part of the project that's below

00:20:31,580 --> 00:20:36,680
that now setting up static analysis so

00:20:35,000 --> 00:20:38,300
that Coverity is run on these things and

00:20:36,680 --> 00:20:43,070
we use scan build as well so we use two

00:20:38,300 --> 00:20:44,600
different static analysis suites so now

00:20:43,070 --> 00:20:45,950
everything is up on github

00:20:44,600 --> 00:20:47,270
we actually have an organization for the

00:20:45,950 --> 00:20:48,470
project that's separate from the Intel

00:20:47,270 --> 00:20:49,970
real estate and that's because we've

00:20:48,470 --> 00:20:51,980
gotten some very significant

00:20:49,970 --> 00:20:53,600
contributions from the outside and it

00:20:51,980 --> 00:20:55,910
just makes sense that you know that when

00:20:53,600 --> 00:20:57,740
we've gotten a large contribution like

00:20:55,910 --> 00:21:00,200
the ISA Slayer we've been working with

00:20:57,740 --> 00:21:02,840
folks inside of the TCG and you know our

00:21:00,200 --> 00:21:03,830
friends at Fraunhofer they actually had

00:21:02,840 --> 00:21:05,660
a stack that was built completely

00:21:03,830 --> 00:21:07,550
separately and was just not open-source

00:21:05,660 --> 00:21:09,140
and when they saw the project that come

00:21:07,550 --> 00:21:10,280
along they looked and they said you're

00:21:09,140 --> 00:21:12,230
missing esis that's the only thing

00:21:10,280 --> 00:21:14,600
you're missing and we worked out an

00:21:12,230 --> 00:21:16,280
agreement and you know we've had some

00:21:14,600 --> 00:21:17,810
really good chemistry with the

00:21:16,280 --> 00:21:19,880
developers over there and they actually

00:21:17,810 --> 00:21:22,040
took their esis lopped off the lower

00:21:19,880 --> 00:21:25,700
parts an open source the higher level

00:21:22,040 --> 00:21:27,620
API and rebased it on top of our kind of

00:21:25,700 --> 00:21:29,780
lower parts of the stack and that's

00:21:27,620 --> 00:21:31,850
really I mean that's really the thing

00:21:29,780 --> 00:21:33,980
that made it made this as successful as

00:21:31,850 --> 00:21:36,140
it is because the system API alone is

00:21:33,980 --> 00:21:38,360
not is not sufficient we need esis and

00:21:36,140 --> 00:21:40,220
that's that's been a big part of this so

00:21:38,360 --> 00:21:41,780
you've got a mailing list got a repo

00:21:40,220 --> 00:21:43,610
here with the core libraries that

00:21:41,780 --> 00:21:45,650
includes the programming API s and some

00:21:43,610 --> 00:21:47,270
of the transport layers we have a set of

00:21:45,650 --> 00:21:50,570
command line tools that we'll talk about

00:21:47,270 --> 00:21:53,990
later on we have an open SSL engine now

00:21:50,570 --> 00:21:56,120
that's out that I learned a lot about in

00:21:53,990 --> 00:21:58,070
preparing for this talk and we have a

00:21:56,120 --> 00:22:01,100
resource management daemon like I was

00:21:58,070 --> 00:22:02,330
saying so we've had we've got maintainer

00:22:01,100 --> 00:22:03,440
x' now that aren't just from intel so

00:22:02,330 --> 00:22:07,130
i've managed to get a bunch of folks

00:22:03,440 --> 00:22:08,810
from intel's open source team OTC to

00:22:07,130 --> 00:22:10,160
come on board and help

00:22:08,810 --> 00:22:12,500
and we've also gotten folks from

00:22:10,160 --> 00:22:14,660
Fraunhofer si T and we have a maintainer

00:22:12,500 --> 00:22:16,310
from from Red Hat as well so we've done

00:22:14,660 --> 00:22:19,420
I think we've come you know a really

00:22:16,310 --> 00:22:21,260
long way in the last last two years

00:22:19,420 --> 00:22:22,970
finally we've also gotten some really

00:22:21,260 --> 00:22:25,220
large contributions from from the folks

00:22:22,970 --> 00:22:27,890
at Infineon Peter Hugh is a previous

00:22:25,220 --> 00:22:29,210
maintainer for the the kernel driver he

00:22:27,890 --> 00:22:30,500
was the the one who helped me get

00:22:29,210 --> 00:22:31,760
Coverity set up and he was really the

00:22:30,500 --> 00:22:34,400
one that put the Spurs to me to make

00:22:31,760 --> 00:22:35,570
sure it happened and we've gotten you

00:22:34,400 --> 00:22:37,430
know Facebook was actually one of our

00:22:35,570 --> 00:22:39,260
first really big name users and they did

00:22:37,430 --> 00:22:40,970
a pretty significant deployment on top

00:22:39,260 --> 00:22:41,900
of this stuff and we've gotten patches

00:22:40,970 --> 00:22:46,280
from Alibaba

00:22:41,900 --> 00:22:47,900
Red Hat GE suzay Debian so we've we've

00:22:46,280 --> 00:22:49,930
gotten some really good community

00:22:47,900 --> 00:22:51,890
involvement that I'm really proud of

00:22:49,930 --> 00:22:54,050
also we have a bunch of new projects

00:22:51,890 --> 00:22:56,690
that are in the work we've got a pkcs 11

00:22:54,050 --> 00:22:59,240
module that's getting ready to be open

00:22:56,690 --> 00:23:01,340
sourced I've written a transport layer

00:22:59,240 --> 00:23:02,990
or a transport driver for that can be

00:23:01,340 --> 00:23:05,060
used in UEFI so I'll talk about that a

00:23:02,990 --> 00:23:07,610
little bit later on we have a set of

00:23:05,060 --> 00:23:10,130
patches that Fraunhofer is is putting up

00:23:07,610 --> 00:23:12,410
for a crypt set up integration and we

00:23:10,130 --> 00:23:13,730
have a response code decoder basically

00:23:12,410 --> 00:23:14,780
that was one of the first things that I

00:23:13,730 --> 00:23:17,570
ended up writing when I came on board

00:23:14,780 --> 00:23:19,820
but as smokes from OTC came on Bill

00:23:17,570 --> 00:23:21,020
Roberts you know looked at the the tool

00:23:19,820 --> 00:23:21,980
was like that's super useful but we

00:23:21,020 --> 00:23:23,450
should probably just have this be a

00:23:21,980 --> 00:23:24,890
library so we don't people don't even

00:23:23,450 --> 00:23:27,800
have to put you know these raw binary

00:23:24,890 --> 00:23:29,390
RCS into the tool so we're working on

00:23:27,800 --> 00:23:33,350
actually standardizing that API right

00:23:29,390 --> 00:23:34,850
now so I've already kind of bragged

00:23:33,350 --> 00:23:37,190
about you know names I'm up here

00:23:34,850 --> 00:23:39,770
dropping names like crazy but I'm gonna

00:23:37,190 --> 00:23:41,870
keep doing it I'm packaging for for

00:23:39,770 --> 00:23:43,910
distros is a really big deal for us I

00:23:41,870 --> 00:23:45,560
can't tell you how many you know oh I

00:23:43,910 --> 00:23:47,600
ran make and nothing happened

00:23:45,560 --> 00:23:49,580
questions we've gotten from from kind of

00:23:47,600 --> 00:23:50,720
users on the mailing list and being able

00:23:49,580 --> 00:23:52,730
to tell them just to download it through

00:23:50,720 --> 00:23:56,210
your package manager is really really

00:23:52,730 --> 00:24:01,610
important we've done geez maybe back in

00:23:56,210 --> 00:24:07,220
June I did our 2.0 release that should

00:24:01,610 --> 00:24:09,410
make an interrelated suzay enterprise

00:24:07,220 --> 00:24:10,700
deadline 4:15 so we're gonna be a little

00:24:09,410 --> 00:24:13,130
bit behind on that it's just you know

00:24:10,700 --> 00:24:15,140
you can't win them all I guess and to

00:24:13,130 --> 00:24:17,420
dotto for us is our really big API

00:24:15,140 --> 00:24:19,850
compliant release when I when I took the

00:24:17,420 --> 00:24:21,170
project over I had just stamped a one

00:24:19,850 --> 00:24:22,200
title release like immediately and I'm

00:24:21,170 --> 00:24:24,720
like this is apparently

00:24:22,200 --> 00:24:25,890
Yeah right now and going through that

00:24:24,720 --> 00:24:28,320
and figuring out where it lines up with

00:24:25,890 --> 00:24:29,970
the speck we had some deviations and

00:24:28,320 --> 00:24:33,030
changing you know your API and your ABI

00:24:29,970 --> 00:24:34,980
you don't do that lightly so we spent

00:24:33,030 --> 00:24:37,680
about a year working on the 2.0 release

00:24:34,980 --> 00:24:39,780
and it's a lot of management when you

00:24:37,680 --> 00:24:41,640
think about having a you know a release

00:24:39,780 --> 00:24:43,170
branch around and not being able to

00:24:41,640 --> 00:24:45,420
release from from your master branch for

00:24:43,170 --> 00:24:47,040
a long time so we're very very happy to

00:24:45,420 --> 00:24:48,810
have the 200 release out now and

00:24:47,040 --> 00:24:51,600
hopefully you know unless the spec

00:24:48,810 --> 00:24:53,010
changes 2.0 will be you know hour or two

00:24:51,600 --> 00:24:57,330
will be our major version number open

00:24:53,010 --> 00:24:59,310
for a very long time also Red Hat is

00:24:57,330 --> 00:25:00,540
doing some integration with their clevis

00:24:59,310 --> 00:25:02,580
system it's not something I'm entirely

00:25:00,540 --> 00:25:04,470
familiar with but as I understand it and

00:25:02,580 --> 00:25:06,240
there's a link here that should tell you

00:25:04,470 --> 00:25:07,650
more about it but this is a pretty

00:25:06,240 --> 00:25:09,650
interesting system now that's using the

00:25:07,650 --> 00:25:12,540
TPM for some key management protection

00:25:09,650 --> 00:25:13,800
so I think that's hopefully the

00:25:12,540 --> 00:25:15,930
direction things will be going in the

00:25:13,800 --> 00:25:18,030
future our our next goal is now that we

00:25:15,930 --> 00:25:19,620
have these api's that are stable we now

00:25:18,030 --> 00:25:23,190
want to start integrating this stuff

00:25:19,620 --> 00:25:24,540
into the core platform you know of Linux

00:25:23,190 --> 00:25:26,910
so that we can actually benefit from

00:25:24,540 --> 00:25:29,370
having the TPMS and using the TPMS that

00:25:26,910 --> 00:25:31,490
are on all of our systems strongswan has

00:25:29,370 --> 00:25:33,780
been one of our one of the the TPMS

00:25:31,490 --> 00:25:35,880
probably most prominent users in the

00:25:33,780 --> 00:25:39,090
Linux community they had a 2.0 or rather

00:25:35,880 --> 00:25:41,610
a 1.2 implementation that used that they

00:25:39,090 --> 00:25:43,860
used for doing protecting client-side

00:25:41,610 --> 00:25:46,560
Keys they've updated that using our our

00:25:43,860 --> 00:25:48,060
TSS as well and and they've even kept up

00:25:46,560 --> 00:25:51,420
to pace with our our two-dollar release

00:25:48,060 --> 00:25:52,980
so strong swan is is really one of the

00:25:51,420 --> 00:25:55,170
early adopters and and they're doing

00:25:52,980 --> 00:25:57,690
really good stuff myself personally I

00:25:55,170 --> 00:26:00,510
have a soft spot for open embedded and

00:25:57,690 --> 00:26:02,250
so I maintain a liar that has all the

00:26:00,510 --> 00:26:04,170
recipes for this stuff I haven't updated

00:26:02,250 --> 00:26:07,260
it to - dotto yet but I've pretty much

00:26:04,170 --> 00:26:08,550
got an email a day from random places of

00:26:07,260 --> 00:26:10,320
the internet asking me what I'm going to

00:26:08,550 --> 00:26:12,750
so I think that's probably going to

00:26:10,320 --> 00:26:14,640
happen sooner than later and really I

00:26:12,750 --> 00:26:16,350
think the the right way to handle you

00:26:14,640 --> 00:26:18,630
know open and vetted and and and this

00:26:16,350 --> 00:26:19,590
going forward is to get rid of the you

00:26:18,630 --> 00:26:21,360
know a separate layer where those

00:26:19,590 --> 00:26:23,370
recipes live and those need to go as far

00:26:21,360 --> 00:26:24,570
upstream as they can I think that's

00:26:23,370 --> 00:26:28,020
probably gonna be a pet project of mine

00:26:24,570 --> 00:26:30,350
for the fall if anyone's interested in

00:26:28,020 --> 00:26:32,790
that by the way I would love some help

00:26:30,350 --> 00:26:34,080
so yeah change log for a $2 release

00:26:32,790 --> 00:26:35,570
right we've got compatibility with the

00:26:34,080 --> 00:26:37,540
TPM -

00:26:35,570 --> 00:26:41,510
1:38 speck we've got a couple extra

00:26:37,540 --> 00:26:43,970
commands for the 146 or from the draft

00:26:41,510 --> 00:26:45,980
146 spec which is specifically the

00:26:43,970 --> 00:26:47,750
attach component commands this is a

00:26:45,980 --> 00:26:49,820
really interesting feature that's been

00:26:47,750 --> 00:26:51,920
added to the TPM spec really recently

00:26:49,820 --> 00:26:54,080
and I think it has a lot of potential so

00:26:51,920 --> 00:26:55,580
if you're interested in some new and

00:26:54,080 --> 00:26:57,650
wild things that the TPM might be able

00:26:55,580 --> 00:26:59,050
to do for you the AC commands are

00:26:57,650 --> 00:27:01,220
something you may want to take a look at

00:26:59,050 --> 00:27:02,450
so we've added a bunch of libraries so

00:27:01,220 --> 00:27:05,480
the type marshalling library is new

00:27:02,450 --> 00:27:07,340
again the esis implementation we got via

00:27:05,480 --> 00:27:10,550
Fraunhofer and our collaboration with

00:27:07,340 --> 00:27:12,680
Infineon which you know is again another

00:27:10,550 --> 00:27:15,320
reason why I think this this this

00:27:12,680 --> 00:27:16,760
project is viable for the future again

00:27:15,320 --> 00:27:19,430
we've added I've added back all that

00:27:16,760 --> 00:27:21,530
support for Windows we have a TC ti that

00:27:19,430 --> 00:27:23,930
I'll talk to TBS there were no required

00:27:21,530 --> 00:27:25,940
changes in any of the other libraries we

00:27:23,930 --> 00:27:27,590
did I did and I guess I should say I

00:27:25,940 --> 00:27:30,500
learned in the process of doing this

00:27:27,590 --> 00:27:35,330
that the visual studio compiler doesn't

00:27:30,500 --> 00:27:36,350
really see 99 compliant whoops so once I

00:27:35,330 --> 00:27:38,180
figured out that that's where all my

00:27:36,350 --> 00:27:39,980
errors were coming from I then figured

00:27:38,180 --> 00:27:42,020
out how to get clang working on Visual

00:27:39,980 --> 00:27:43,790
Studio and the world is a much better

00:27:42,020 --> 00:27:45,080
place for it so if you do stuff in

00:27:43,790 --> 00:27:47,350
Visual Studio I highly recommend

00:27:45,080 --> 00:27:50,150
figuring out how to get client into that

00:27:47,350 --> 00:27:52,730
and again yeah using app therefore for

00:27:50,150 --> 00:27:56,150
CI so we do CI builds for Windows we do

00:27:52,730 --> 00:27:58,520
those on on App there I have not yet

00:27:56,150 --> 00:28:02,090
gone through out there or Visual Studio

00:27:58,520 --> 00:28:03,980
to figure out how to to set up our test

00:28:02,090 --> 00:28:05,810
infrastructure so we basically just

00:28:03,980 --> 00:28:10,400
build for Windows but we don't have our

00:28:05,810 --> 00:28:13,730
test harness running on Windows yet okay

00:28:10,400 --> 00:28:15,860
so the the final push for this talk are

00:28:13,730 --> 00:28:18,320
our use cases and I got just about ten

00:28:15,860 --> 00:28:22,040
minutes left so that should be

00:28:18,320 --> 00:28:23,990
sufficient let's find out the right so

00:28:22,040 --> 00:28:25,550
when people show up there's this to the

00:28:23,990 --> 00:28:27,710
project there's this kind of path they

00:28:25,550 --> 00:28:29,930
take right they try to build it it fails

00:28:27,710 --> 00:28:31,520
we have to explain to them how how Auto

00:28:29,930 --> 00:28:33,770
tools work how to install the

00:28:31,520 --> 00:28:35,930
dependencies they get it built they get

00:28:33,770 --> 00:28:37,070
it installed and then they kind of just

00:28:35,930 --> 00:28:39,320
say you know what do I do with this

00:28:37,070 --> 00:28:40,910
thing now they may know what it's good

00:28:39,320 --> 00:28:42,260
for but they don't necessarily know how

00:28:40,910 --> 00:28:44,810
to program to make it do something

00:28:42,260 --> 00:28:46,880
useful and so into in our efforts to

00:28:44,810 --> 00:28:49,159
reduce the learning curve we want to

00:28:46,880 --> 00:28:50,899
have people be able to do

00:28:49,159 --> 00:28:53,929
something without writing a pile of code

00:28:50,899 --> 00:28:55,220
in order to do it and so if we're if we

00:28:53,929 --> 00:28:56,509
can communicate to them what the TPMS

00:28:55,220 --> 00:28:58,639
are good for and again there's a lot of

00:28:56,509 --> 00:29:01,940
good information out there about it data

00:28:58,639 --> 00:29:03,019
protection for four keys also data

00:29:01,940 --> 00:29:04,580
protection for you know whatever you

00:29:03,019 --> 00:29:06,139
want to stick into the envy storage

00:29:04,580 --> 00:29:08,389
we've seen a couple talks that talk

00:29:06,139 --> 00:29:09,979
about that and then you know attestation

00:29:08,389 --> 00:29:11,479
is interesting but you're not going to

00:29:09,979 --> 00:29:13,009
get someone who you know unfortunately

00:29:11,479 --> 00:29:13,820
people want to do this they build it

00:29:13,009 --> 00:29:14,960
they install and they're like now I'm

00:29:13,820 --> 00:29:17,929
gonna write my out of station service

00:29:14,960 --> 00:29:19,309
and then you know they usually just

00:29:17,929 --> 00:29:21,289
disappear because it's a huge

00:29:19,309 --> 00:29:22,759
undertaking so really what we want is to

00:29:21,289 --> 00:29:24,679
start have people start out just doing

00:29:22,759 --> 00:29:26,779
basic crypto operations how do I get the

00:29:24,679 --> 00:29:28,489
TPM to create a key for me how do I load

00:29:26,779 --> 00:29:31,220
a key how do I get it to sign something

00:29:28,489 --> 00:29:34,690
how do I verify that signature and to do

00:29:31,220 --> 00:29:36,979
that maybe even without writing code so

00:29:34,690 --> 00:29:40,129
this is where the TPM tools project

00:29:36,979 --> 00:29:43,399
comes in again this was a part of what I

00:29:40,129 --> 00:29:46,429
inherited and it's changed significantly

00:29:43,399 --> 00:29:49,190
over time so OTC is taking this over it

00:29:46,429 --> 00:29:51,409
started out as almost a clone of the TPM

00:29:49,190 --> 00:29:54,200
1.2 tools which unfortunately had a lot

00:29:51,409 --> 00:29:55,580
of TPM 1.2 isms formalized in those

00:29:54,200 --> 00:29:56,629
tools and so we've kind of been going

00:29:55,580 --> 00:29:59,269
through and stripping that out and

00:29:56,629 --> 00:30:01,489
making a almost like a one-to-one

00:29:59,269 --> 00:30:02,779
mapping to TPM 2 commands so you can

00:30:01,489 --> 00:30:04,999
literally see when you're running the

00:30:02,779 --> 00:30:06,470
command-line tools it does this thing if

00:30:04,999 --> 00:30:08,090
you dial-up logging you'll get to see

00:30:06,470 --> 00:30:10,460
the full command buffer that gets sent

00:30:08,090 --> 00:30:11,960
out of the the TC TI and the response

00:30:10,460 --> 00:30:17,269
that comes back and we can kind of use

00:30:11,960 --> 00:30:19,129
this as a teaching tool so this is

00:30:17,269 --> 00:30:23,090
literally the steps that you do to

00:30:19,129 --> 00:30:27,019
create a primary key in the the storage

00:30:23,090 --> 00:30:28,789
hierarchy the then create a sub key that

00:30:27,019 --> 00:30:31,210
you can then use to do specific things

00:30:28,789 --> 00:30:33,919
we then load the sub key that we created

00:30:31,210 --> 00:30:35,779
you can calculate a hash of a document

00:30:33,919 --> 00:30:37,279
or some kind of message using open SSL

00:30:35,779 --> 00:30:39,619
so we just kind of create a hash locally

00:30:37,279 --> 00:30:42,739
we then use the TPM to sign that hash

00:30:39,619 --> 00:30:44,239
with the key that we just created we

00:30:42,739 --> 00:30:46,460
have a little format option you can see

00:30:44,239 --> 00:30:48,139
here that will output it in a derp

00:30:46,460 --> 00:30:49,519
format so it's a format that you know a

00:30:48,139 --> 00:30:52,009
lot of other tools will recognize and

00:30:49,519 --> 00:30:53,930
use we then extract the public portion

00:30:52,009 --> 00:30:56,060
of our

00:30:53,930 --> 00:30:57,560
or sorry that is extracting the public

00:30:56,060 --> 00:31:00,440
portion making sure it's inter format

00:30:57,560 --> 00:31:02,750
then we can use open SSL to verify that

00:31:00,440 --> 00:31:04,760
hash or the signature on that hash and

00:31:02,750 --> 00:31:06,650
make sure that it meets the the the

00:31:04,760 --> 00:31:09,680
document or the message that we actually

00:31:06,650 --> 00:31:12,050
calculated from that's kind of the one

00:31:09,680 --> 00:31:14,900
of the when you actually look at how

00:31:12,050 --> 00:31:16,190
systems like strongswan use this this is

00:31:14,900 --> 00:31:17,240
pretty much everything that's happening

00:31:16,190 --> 00:31:18,620
you got a key

00:31:17,240 --> 00:31:21,410
you're protecting to the TPM you're

00:31:18,620 --> 00:31:22,940
going to negotiate a TLS session so

00:31:21,410 --> 00:31:25,370
you're gonna rather I should say an

00:31:22,940 --> 00:31:26,930
IPSec session so as part of that

00:31:25,370 --> 00:31:28,100
exchange you've got to prove who you are

00:31:26,930 --> 00:31:30,620
and usually signed something with a

00:31:28,100 --> 00:31:32,600
private key and send it back that's

00:31:30,620 --> 00:31:35,690
exactly what this is but just on a

00:31:32,600 --> 00:31:36,860
command-line locally now you'll notice

00:31:35,690 --> 00:31:38,420
there aren't very many options that I'm

00:31:36,860 --> 00:31:40,520
using here so we're using a lot of

00:31:38,420 --> 00:31:42,050
default options I think it creates a

00:31:40,520 --> 00:31:43,940
sha-1 key which you may not want to do

00:31:42,050 --> 00:31:45,860
sha-256 may make more sense

00:31:43,940 --> 00:31:47,330
you want to make restrictions on this so

00:31:45,860 --> 00:31:48,980
that you actually have to be author or

00:31:47,330 --> 00:31:50,680
authenticate yourself to prove that

00:31:48,980 --> 00:31:52,910
you're authorized to load and use a key

00:31:50,680 --> 00:31:53,570
none of that is being done here null

00:31:52,910 --> 00:31:55,670
password

00:31:53,570 --> 00:31:57,380
creating a key anyone if they have this

00:31:55,670 --> 00:31:59,390
this blob of the key they could load it

00:31:57,380 --> 00:32:00,920
again and use it and sign stuff with it

00:31:59,390 --> 00:32:02,840
so this isn't particularly meaningful as

00:32:00,920 --> 00:32:03,710
far as providing some kind of security

00:32:02,840 --> 00:32:06,170
guarantee to you

00:32:03,710 --> 00:32:07,790
however it's mechanically the steps that

00:32:06,170 --> 00:32:10,580
you would go through in order to do a

00:32:07,790 --> 00:32:11,890
basic sign operation on the TPM and have

00:32:10,580 --> 00:32:14,120
it verified using a different tool

00:32:11,890 --> 00:32:15,440
that's that's something I think we've

00:32:14,120 --> 00:32:17,090
been missing for a long time and really

00:32:15,440 --> 00:32:20,480
you know you'll notice the bullet at the

00:32:17,090 --> 00:32:22,250
top there this this was a demo that got

00:32:20,480 --> 00:32:24,200
put together by a facebook employee

00:32:22,250 --> 00:32:26,600
Bobby day and he presented this at

00:32:24,200 --> 00:32:28,670
FOSDEM in 2017 so if you want to see

00:32:26,600 --> 00:32:31,820
really where we've come in pretty much

00:32:28,670 --> 00:32:33,230
just a year you can line this up next to

00:32:31,820 --> 00:32:35,960
what he had to do to make this work and

00:32:33,230 --> 00:32:36,950
it's pretty stark I mean he has some

00:32:35,960 --> 00:32:39,290
commands were he's literally going

00:32:36,950 --> 00:32:41,210
through like a TPM the public key that

00:32:39,290 --> 00:32:43,190
the TPM dumps out and like grabbing

00:32:41,210 --> 00:32:45,800
specific portions sticking them together

00:32:43,190 --> 00:32:47,510
in a way that that turned into the dur

00:32:45,800 --> 00:32:49,100
format so we're trying to pull this

00:32:47,510 --> 00:32:53,240
stuff internal and make it so it's you

00:32:49,100 --> 00:32:54,200
know it's part of our system and also I

00:32:53,240 --> 00:32:55,310
guess I should say we're trying to learn

00:32:54,200 --> 00:32:56,840
from the people that are using this I

00:32:55,310 --> 00:32:58,460
mean this guy at Facebook didn't do this

00:32:56,840 --> 00:32:59,450
because you know he was bored he did

00:32:58,460 --> 00:33:00,860
this because he needed to and it was

00:32:59,450 --> 00:33:03,530
something useful so we're pulling it in

00:33:00,860 --> 00:33:05,210
and making it easier for him an example

00:33:03,530 --> 00:33:07,549
using the open SSL engine is right here

00:33:05,210 --> 00:33:10,009
and this is almost the exact same

00:33:07,549 --> 00:33:11,929
demos before so we have a separate

00:33:10,009 --> 00:33:13,369
utility that is used to create the key

00:33:11,929 --> 00:33:14,659
because apparently you can't do that to

00:33:13,369 --> 00:33:17,600
be the engine and again I didn't write

00:33:14,659 --> 00:33:20,119
this I learned about this last week we

00:33:17,600 --> 00:33:22,820
then use the OpenSSL engine to output

00:33:20,119 --> 00:33:25,369
the the public key in the PEM format so

00:33:22,820 --> 00:33:27,710
now we're using open SSL for to do this

00:33:25,369 --> 00:33:30,440
for us we then use open SSL the hash the

00:33:27,710 --> 00:33:32,269
document doesn't require the the engine

00:33:30,440 --> 00:33:34,369
we then sign the hash using the engine

00:33:32,269 --> 00:33:36,139
and verify the signature just using

00:33:34,369 --> 00:33:37,700
straight open SSL again so there's a

00:33:36,139 --> 00:33:39,470
couple of the TPM commands that you saw

00:33:37,700 --> 00:33:42,379
in there where I'm creating a primary

00:33:39,470 --> 00:33:44,379
key creating a sub key that I'm loading

00:33:42,379 --> 00:33:46,940
the key all that gets done by the the

00:33:44,379 --> 00:33:48,350
open SSL engine for you and you don't

00:33:46,940 --> 00:33:51,200
have to really deal with with that part

00:33:48,350 --> 00:33:53,869
of it which is you know it's nice it's

00:33:51,200 --> 00:33:58,179
nice not to to even understand or know

00:33:53,869 --> 00:34:00,529
what that what that is and finally I

00:33:58,179 --> 00:34:03,919
wanted to be able to show this because

00:34:00,529 --> 00:34:05,090
the the use case for the system API is

00:34:03,919 --> 00:34:07,129
one again that's particularly

00:34:05,090 --> 00:34:08,750
interesting to Intel but we never really

00:34:07,129 --> 00:34:11,809
had an implementation that would of this

00:34:08,750 --> 00:34:13,549
that we were showing off and again to

00:34:11,809 --> 00:34:15,940
come you know to come clean on my on my

00:34:13,549 --> 00:34:19,909
previous kind of pontification about

00:34:15,940 --> 00:34:21,139
about API design we said that this was

00:34:19,909 --> 00:34:22,460
the intended use case but you know

00:34:21,139 --> 00:34:24,079
really you got to put your code where

00:34:22,460 --> 00:34:25,669
your mouth is and you know get it out

00:34:24,079 --> 00:34:27,829
there so people can see it and so I've

00:34:25,669 --> 00:34:29,720
started a new project that I just got

00:34:27,829 --> 00:34:33,409
opens approval to open source last week

00:34:29,720 --> 00:34:36,770
and all it is is a TCT I layer that sits

00:34:33,409 --> 00:34:38,899
on top of the TCG 2 protocol in UEFI and

00:34:36,770 --> 00:34:40,760
enables it enables the use of the system

00:34:38,899 --> 00:34:43,099
API so instead of having what's only

00:34:40,760 --> 00:34:45,679
available through the the TCG 2 protocol

00:34:43,099 --> 00:34:47,510
which basically boils down to a bunch of

00:34:45,679 --> 00:34:49,490
commands to query the protocol to figure

00:34:47,510 --> 00:34:51,200
out you know the state of it some stuff

00:34:49,490 --> 00:34:52,790
that maybe like pcr banks that no one

00:34:51,200 --> 00:34:55,909
will ever actually do if they're writing

00:34:52,790 --> 00:34:58,640
you know UEFI application and then one

00:34:55,909 --> 00:35:00,559
command to just send a raw buffer that

00:34:58,640 --> 00:35:02,630
someone somewhere is already crafted and

00:35:00,559 --> 00:35:05,630
so we use the system API to do that for

00:35:02,630 --> 00:35:07,819
us and you can you know we've got an

00:35:05,630 --> 00:35:10,790
example application in there that just

00:35:07,819 --> 00:35:15,170
builds a simple UEFI executable that you

00:35:10,790 --> 00:35:16,970
can drop into a fat32 partition load up

00:35:15,170 --> 00:35:19,010
the efi shell and run this command and

00:35:16,970 --> 00:35:20,569
you can see the difference between what

00:35:19,010 --> 00:35:21,320
the gate capability command and the TCG

00:35:20,569 --> 00:35:23,270
to protocol

00:35:21,320 --> 00:35:25,730
which is information about the protocol

00:35:23,270 --> 00:35:27,800
and what the get capability command from

00:35:25,730 --> 00:35:30,650
the TPM gets you which is information

00:35:27,800 --> 00:35:32,240
about the guts of the TPM and so that

00:35:30,650 --> 00:35:34,640
stuff hasn't actually gotten brought

00:35:32,240 --> 00:35:35,900
into our main project yet because we're

00:35:34,640 --> 00:35:37,790
not exactly sure how it's gonna fit in

00:35:35,900 --> 00:35:39,680
there a lot of this for me was just an

00:35:37,790 --> 00:35:41,390
exercise in learning the ridiculous

00:35:39,680 --> 00:35:44,600
things you have to do to build an EFI is

00:35:41,390 --> 00:35:46,730
beautiful and so our libraries right now

00:35:44,600 --> 00:35:49,430
and the way that build works we can't

00:35:46,730 --> 00:35:51,410
build the the libraries in that way yet

00:35:49,430 --> 00:35:52,610
so you know we're not perfect we've

00:35:51,410 --> 00:35:54,110
slipped up a little bit on our build

00:35:52,610 --> 00:35:56,180
hygiene and we're kind of forcing flags

00:35:54,110 --> 00:35:58,940
on users when they may not want to use

00:35:56,180 --> 00:36:01,010
them so that's kind of a media cleanup

00:35:58,940 --> 00:36:02,480
now that I've stumbled across it so I

00:36:01,010 --> 00:36:03,590
think this could be really interesting I

00:36:02,480 --> 00:36:05,090
mean there were some talks earlier about

00:36:03,590 --> 00:36:07,940
firmware people using the TPM in the

00:36:05,090 --> 00:36:09,170
firmware this isn't a model for doing

00:36:07,940 --> 00:36:11,030
that efficiently for sure because

00:36:09,170 --> 00:36:12,740
everything's just statically compiled

00:36:11,030 --> 00:36:13,970
into a single executable and if you

00:36:12,740 --> 00:36:16,460
build more than one executable you'll

00:36:13,970 --> 00:36:17,450
have redundant code across them but you

00:36:16,460 --> 00:36:18,470
know there's I'm sure there's some

00:36:17,450 --> 00:36:21,380
give-and-take where this might actually

00:36:18,470 --> 00:36:23,090
be useful so if anyone thinks that this

00:36:21,380 --> 00:36:24,650
might be something that they could could

00:36:23,090 --> 00:36:28,460
use in their their day-to-day I'm I'm

00:36:24,650 --> 00:36:31,340
happy to chat about it and that's uh

00:36:28,460 --> 00:36:34,820
that is it so I've managed to come in

00:36:31,340 --> 00:36:38,200
under the 40 minute mark so I can handle

00:36:34,820 --> 00:36:40,160
a couple questions I think oh also um

00:36:38,200 --> 00:36:41,900
references so some of the references

00:36:40,160 --> 00:36:45,280
from there as well this is a you know

00:36:41,900 --> 00:36:45,280
take a take a look

00:36:53,329 --> 00:37:06,200
what was easy thanks don't know sorry we

00:36:57,109 --> 00:37:08,450
got one I know we got two yeah have you

00:37:06,200 --> 00:37:13,150
looked at trying to integrate the TIA

00:37:08,450 --> 00:37:18,019
your TSS to library with commonly used

00:37:13,150 --> 00:37:21,829
open-source crypto programs like say SSH

00:37:18,019 --> 00:37:24,529
and open SSL right James Bottomly has

00:37:21,829 --> 00:37:26,299
done that with the IBM TSS library and

00:37:24,529 --> 00:37:29,359
to be honest that's the only reason why

00:37:26,299 --> 00:37:32,209
I'm using the IBM TSS library it sounds

00:37:29,359 --> 00:37:34,309
like I would much rather use this but

00:37:32,209 --> 00:37:36,979
let's say you know ssh integration is

00:37:34,309 --> 00:37:38,359
kind of cool right so on one of the

00:37:36,979 --> 00:37:39,529
previous slides there's a there's a

00:37:38,359 --> 00:37:42,589
handful of questions in there but i'm

00:37:39,529 --> 00:37:44,029
one of the previous slides pkcs 11 that

00:37:42,589 --> 00:37:46,279
gets us a lot of free integration with

00:37:44,029 --> 00:37:49,430
things like open SSR rather with SSH

00:37:46,279 --> 00:37:51,219
so SSH if you've got a pkcs 11 module

00:37:49,430 --> 00:37:53,959
you can use that for your authentication

00:37:51,219 --> 00:37:57,049
we've we had someone build and open it a

00:37:53,959 --> 00:37:58,190
pkcs 11 module in the past had a demo

00:37:57,049 --> 00:38:00,829
that did exactly that but the code

00:37:58,190 --> 00:38:02,029
wasn't such that we were willing to open

00:38:00,829 --> 00:38:05,209
source that are supported so we're

00:38:02,029 --> 00:38:07,789
rewriting that now the second part of

00:38:05,209 --> 00:38:08,930
that was sorry you gotta remind me now

00:38:07,789 --> 00:38:10,789
there was one other part of that for

00:38:08,930 --> 00:38:13,279
open SSL integration so we have the

00:38:10,789 --> 00:38:15,920
engine I'd be interested to know what

00:38:13,279 --> 00:38:17,269
else we're missing I'm not an open SSL

00:38:15,920 --> 00:38:18,199
expert I did not write the engine that

00:38:17,269 --> 00:38:21,259
was another thing that would that

00:38:18,199 --> 00:38:24,109
Fraunhofer contributed to the project so

00:38:21,259 --> 00:38:25,849
you know on the mailing list if you want

00:38:24,109 --> 00:38:28,729
to meet up afterwards I'll take down a

00:38:25,849 --> 00:38:36,140
pile of notes and we'd love to have it

00:38:28,729 --> 00:38:38,209
be you know your TSS of choice two-part

00:38:36,140 --> 00:38:39,769
question so the first one are there any

00:38:38,209 --> 00:38:44,180
good videos you'd recommend on boot

00:38:39,769 --> 00:38:46,459
integrity and firmer security I'm sorry

00:38:44,180 --> 00:38:47,690
can you sell one more time any videos

00:38:46,459 --> 00:38:50,269
you recommend this is a leading question

00:38:47,690 --> 00:38:52,099
yeah on right server security and boot

00:38:50,269 --> 00:38:54,349
integrity and then I have an actual

00:38:52,099 --> 00:38:56,209
question Thanks so like I was saying I

00:38:54,349 --> 00:38:58,190
plugged the platform security conference

00:38:56,209 --> 00:39:00,589
earlier there were a lot of great talks

00:38:58,190 --> 00:39:02,239
there but you know there were a lot of

00:39:00,589 --> 00:39:03,890
good ones about Linux boots so we had

00:39:02,239 --> 00:39:05,230
formal hudson there vincent's ember was

00:39:03,890 --> 00:39:08,920
there as well and I think

00:39:05,230 --> 00:39:11,170
talk is phenomenal okay and you know

00:39:08,920 --> 00:39:13,600
TPMS have had sometimes a bad rap in the

00:39:11,170 --> 00:39:16,510
Linux community do you have an opinion

00:39:13,600 --> 00:39:18,790
on why say Google is doing things like

00:39:16,510 --> 00:39:21,300
shielded VMs without TPM they have their

00:39:18,790 --> 00:39:23,920
own route of trust and then Windows

00:39:21,300 --> 00:39:27,790
System guard is doing quite a bit of

00:39:23,920 --> 00:39:30,000
stuff on trusted boot so do you think

00:39:27,790 --> 00:39:33,250
the linux community's gonna follow these

00:39:30,000 --> 00:39:36,400
examples well I mean there I was just

00:39:33,250 --> 00:39:39,430
gonna say no but there are there

00:39:36,400 --> 00:39:41,410
examples we can choose them as a model

00:39:39,430 --> 00:39:43,030
we can see if they fit it's nice to have

00:39:41,410 --> 00:39:44,260
people that have done the work you know

00:39:43,030 --> 00:39:46,270
how do you so you can look at them and

00:39:44,260 --> 00:39:48,520
say that work that work that didn't work

00:39:46,270 --> 00:39:49,690
you know it's all about the properties

00:39:48,520 --> 00:39:51,490
you want from the system and I think

00:39:49,690 --> 00:39:52,660
that's really a question you know that

00:39:51,490 --> 00:39:56,109
I'd love to hear some of the folks in

00:39:52,660 --> 00:39:57,580
the distro community talking about Red

00:39:56,109 --> 00:39:58,750
Hat how the red hats of the world and

00:39:57,580 --> 00:40:01,000
tend to do something maybe like

00:39:58,750 --> 00:40:03,730
BitLocker ish I think is probably the

00:40:01,000 --> 00:40:05,350
first and easiest step anything you know

00:40:03,730 --> 00:40:07,359
that's more complicated than that might

00:40:05,350 --> 00:40:14,780
be useful to but I start small start

00:40:07,359 --> 00:40:18,459
simple all right well thank you

00:40:14,780 --> 00:40:18,459

YouTube URL: https://www.youtube.com/watch?v=D7h-D1q5fE8


