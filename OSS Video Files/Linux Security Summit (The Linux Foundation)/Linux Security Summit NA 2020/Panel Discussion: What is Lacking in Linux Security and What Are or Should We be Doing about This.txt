Title: Panel Discussion: What is Lacking in Linux Security and What Are or Should We be Doing about This
Publication date: 2020-09-17
Playlist: Linux Security Summit NA 2020
Description: 
	Panel Discussion: What is Lacking in Linux Security and What Are or Should We be Doing about This - Elena Reshetova, Intel with Andrew Lutomirski, AMA Capital Management; Nayna Jain & Emily Ratliff, IBM; Dmitry Vyukov, Google; Christian Brauner, Canonical
Captions: 
	00:00:05,120 --> 00:00:09,360
fine

00:00:06,799 --> 00:00:12,080
so welcome to this uh last session of

00:00:09,360 --> 00:00:15,200
linux security summit north america

00:00:12,080 --> 00:00:17,840
our first time ever virtual and um

00:00:15,200 --> 00:00:20,560
this is our panel session and we had one

00:00:17,840 --> 00:00:23,760
final session already yesterday

00:00:20,560 --> 00:00:24,240
and uh today's one has the same topic so

00:00:23,760 --> 00:00:27,039
if you have

00:00:24,240 --> 00:00:29,119
attended to yesterday one um you have

00:00:27,039 --> 00:00:30,880
maybe already started to think about

00:00:29,119 --> 00:00:33,920
the questions you want to ask so feel

00:00:30,880 --> 00:00:37,360
free to start asking them already now

00:00:33,920 --> 00:00:38,879
and uh i have not had much time to think

00:00:37,360 --> 00:00:41,840
since yesterday about the

00:00:38,879 --> 00:00:43,920
um how to improve this and make it more

00:00:41,840 --> 00:00:46,000
interactive and we decided that one way

00:00:43,920 --> 00:00:48,160
to make it would be that uh

00:00:46,000 --> 00:00:49,039
as the questions come in the panel

00:00:48,160 --> 00:00:51,760
members would

00:00:49,039 --> 00:00:53,600
pick a question each of them like and we

00:00:51,760 --> 00:00:54,800
can make a small round table also for

00:00:53,600 --> 00:00:56,800
the panel members which

00:00:54,800 --> 00:00:58,079
just randomly became questions of the

00:00:56,800 --> 00:01:00,160
interest so

00:00:58,079 --> 00:01:01,840
but with that let me introduce first uh

00:01:00,160 --> 00:01:04,640
our panel number

00:01:01,840 --> 00:01:06,560
let's um let's give them like a small

00:01:04,640 --> 00:01:07,920
visual round table so which each panel

00:01:06,560 --> 00:01:09,680
member can introduce

00:01:07,920 --> 00:01:12,720
himself her herself since there may be a

00:01:09,680 --> 00:01:14,479
few words about our them so they will

00:01:12,720 --> 00:01:16,080
start just like people appearing here on

00:01:14,479 --> 00:01:18,640
the screen so angie you will be the

00:01:16,080 --> 00:01:18,640
first one

00:01:18,880 --> 00:01:23,119
hi everyone i'm andy ludamerski i've

00:01:21,759 --> 00:01:24,400
been working on the linux kernel for a

00:01:23,119 --> 00:01:27,200
while now

00:01:24,400 --> 00:01:28,159
i mostly do x96 stuff and i do some

00:01:27,200 --> 00:01:30,799
security stuff

00:01:28,159 --> 00:01:34,159
and some code review and hopefully i

00:01:30,799 --> 00:01:34,159
solve more problems than i cause

00:01:34,799 --> 00:01:39,200
thank you auntie uh next would be

00:01:36,880 --> 00:01:41,840
question

00:01:39,200 --> 00:01:42,640
uh i'm christian i work on the linux

00:01:41,840 --> 00:01:46,000
kernel as well

00:01:42,640 --> 00:01:49,520
surprisingly for

00:01:46,000 --> 00:01:49,520
not as long as andy has been

00:01:52,799 --> 00:01:58,399
thank you christian administry

00:01:56,079 --> 00:02:00,799
uh hello my name is dmitry vukov i work

00:01:58,399 --> 00:02:03,680
with software engineer at google

00:02:00,799 --> 00:02:05,920
uh for the past five years our team is

00:02:03,680 --> 00:02:06,719
working on bug detection tools for the

00:02:05,920 --> 00:02:09,039
kernel

00:02:06,719 --> 00:02:10,959
in particular address synthesizer which

00:02:09,039 --> 00:02:12,560
finds use of the freeze and out of

00:02:10,959 --> 00:02:14,879
bounds access

00:02:12,560 --> 00:02:17,840
also recently a memory synthesizer which

00:02:14,879 --> 00:02:20,640
finds uses of initialized data

00:02:17,840 --> 00:02:22,319
and concurrency sanitizer which finds

00:02:20,640 --> 00:02:24,560
data races

00:02:22,319 --> 00:02:26,319
also we're working on kernel fuzzer and

00:02:24,560 --> 00:02:30,720
in particular on the notorious

00:02:26,319 --> 00:02:34,160
cisco fuzzer which is coverage guided

00:02:30,720 --> 00:02:38,160
structure aware kernel closer

00:02:34,160 --> 00:02:39,200
and on sysbot which is high level

00:02:38,160 --> 00:02:42,879
automation

00:02:39,200 --> 00:02:45,360
for for the fuzzer

00:02:42,879 --> 00:02:47,599
uh which does continuous pricing uh

00:02:45,360 --> 00:02:50,480
automatic bug reporting and

00:02:47,599 --> 00:02:52,560
back braking and it has found thousands

00:02:50,480 --> 00:02:55,599
of bugs in the linux kernel and

00:02:52,560 --> 00:03:01,120
some other operated system kernels

00:02:55,599 --> 00:03:01,120
thank you thank you thank you dmitry

00:03:02,840 --> 00:03:05,840
emily

00:03:12,959 --> 00:03:17,360
all right thank you so i'm emily ratliff

00:03:15,760 --> 00:03:19,599
my professional career in

00:03:17,360 --> 00:03:21,200
linux security started about 19 and a

00:03:19,599 --> 00:03:22,480
half years ago when i was one of the

00:03:21,200 --> 00:03:25,599
first two people

00:03:22,480 --> 00:03:29,280
to join the core linux security team in

00:03:25,599 --> 00:03:31,040
ibm's linux technology center

00:03:29,280 --> 00:03:33,280
i worked on the first common criteria

00:03:31,040 --> 00:03:35,120
evaluations the first trusted computing

00:03:33,280 --> 00:03:38,080
enablement for linux

00:03:35,120 --> 00:03:39,120
and for the security architecture for

00:03:38,080 --> 00:03:42,159
ibm's

00:03:39,120 --> 00:03:44,720
first public cloud i've worked on secure

00:03:42,159 --> 00:03:46,799
boot for amd's mullins chip

00:03:44,720 --> 00:03:47,920
i've worked on the core infrastructure

00:03:46,799 --> 00:03:50,640
initiative

00:03:47,920 --> 00:03:52,560
and with the ubuntu security team most

00:03:50,640 --> 00:03:55,840
recently i rejoined ibm

00:03:52,560 --> 00:03:58,879
working for ibm security

00:03:55,840 --> 00:04:01,120
to get a view of the world

00:03:58,879 --> 00:04:02,239
from security as an application

00:04:01,120 --> 00:04:03,760
perspective

00:04:02,239 --> 00:04:06,239
throughout my career i've worked at all

00:04:03,760 --> 00:04:07,200
levels of hardware and software with a

00:04:06,239 --> 00:04:10,319
focus on

00:04:07,200 --> 00:04:14,159
open source and open standards and

00:04:10,319 --> 00:04:16,239
back to you

00:04:14,159 --> 00:04:19,040
thank you emily and and last but not

00:04:16,239 --> 00:04:19,040
least nina

00:04:20,560 --> 00:04:26,560
hi uh hi everyone i am naina jain i

00:04:23,919 --> 00:04:27,680
work as software engineer in the linux

00:04:26,560 --> 00:04:31,120
security team

00:04:27,680 --> 00:04:33,600
of ibm cognitive systems my regular work

00:04:31,120 --> 00:04:35,440
involves enabling secure interested boot

00:04:33,600 --> 00:04:37,919
on power systems

00:04:35,440 --> 00:04:39,759
my most of the work in kernel has been

00:04:37,919 --> 00:04:43,040
mainly related to ima

00:04:39,759 --> 00:04:46,800
tpm and the key management

00:04:43,040 --> 00:04:50,240
thank you thank you

00:04:46,800 --> 00:04:52,479
so uh i'm elena so i have not changed my

00:04:50,240 --> 00:04:54,400
workplace never interest since yesterday

00:04:52,479 --> 00:04:55,520
so i'm gonna skip my insurance for the

00:04:54,400 --> 00:04:57,840
time

00:04:55,520 --> 00:04:58,639
so let's let's really get to the panel

00:04:57,840 --> 00:05:00,800
itself so

00:04:58,639 --> 00:05:02,479
i want to first start by recapping for

00:05:00,800 --> 00:05:04,240
people who hasn't attended the panel

00:05:02,479 --> 00:05:05,600
yesterday or

00:05:04,240 --> 00:05:07,520
and by the way you can still you can

00:05:05,600 --> 00:05:09,039
already watch it or watch at any time

00:05:07,520 --> 00:05:10,160
you want because everything is already

00:05:09,039 --> 00:05:11,759
available

00:05:10,160 --> 00:05:14,240
but just a couple of points i wanted to

00:05:11,759 --> 00:05:16,479
recap which we basically spent most of

00:05:14,240 --> 00:05:18,720
the time talking on yesterday panel

00:05:16,479 --> 00:05:20,960
and the first point which i think we

00:05:18,720 --> 00:05:22,160
spent most of the time was really about

00:05:20,960 --> 00:05:24,720
testing

00:05:22,160 --> 00:05:26,720
and testing in the terms of our linux

00:05:24,720 --> 00:05:29,360
crown testing and more like lack of

00:05:26,720 --> 00:05:29,759
testing and things kernels so which has

00:05:29,360 --> 00:05:33,039
been

00:05:29,759 --> 00:05:34,800
kind of um giving us the reason for many

00:05:33,039 --> 00:05:35,199
of the bugs we have which have been

00:05:34,800 --> 00:05:36,400
called

00:05:35,199 --> 00:05:38,560
out so that you have a lot of

00:05:36,400 --> 00:05:39,680
vulnerabilities a lot of bugs reported

00:05:38,560 --> 00:05:42,080
feature release

00:05:39,680 --> 00:05:44,080
including regression stacks and a lot of

00:05:42,080 --> 00:05:45,280
discussion went into how can we improve

00:05:44,080 --> 00:05:47,680
testing

00:05:45,280 --> 00:05:49,680
uh how do we make sure that the test the

00:05:47,680 --> 00:05:51,759
code which gets into kernel actually has

00:05:49,680 --> 00:05:53,440
the test pages together

00:05:51,759 --> 00:05:55,360
so there is a lot of speculation around

00:05:53,440 --> 00:05:58,400
that that was the first point

00:05:55,360 --> 00:05:59,919
another point was uh um maybe

00:05:58,400 --> 00:06:01,919
i could kind of summarize it is some

00:05:59,919 --> 00:06:05,440
lack of focus on the user space

00:06:01,919 --> 00:06:07,280
so the point um which was brought but

00:06:05,440 --> 00:06:10,080
we focus nowadays a lot on the kernel

00:06:07,280 --> 00:06:12,639
security and we kind of completely or

00:06:10,080 --> 00:06:14,560
greatly forgotten the user space this

00:06:12,639 --> 00:06:17,039
link of the user space how all of it

00:06:14,560 --> 00:06:19,199
integrates and quite often some security

00:06:17,039 --> 00:06:20,000
decisions are pushed into the user space

00:06:19,199 --> 00:06:22,880
thinking when all

00:06:20,000 --> 00:06:25,360
the users will figure it out but then

00:06:22,880 --> 00:06:27,919
what users tend to choose is that way

00:06:25,360 --> 00:06:30,240
they don't figure it out so they kind of

00:06:27,919 --> 00:06:32,319
the end result is it's not very good

00:06:30,240 --> 00:06:33,360
and of course performance attached to no

00:06:32,319 --> 00:06:36,080
surprise so

00:06:33,360 --> 00:06:37,360
performance security long-lived friends

00:06:36,080 --> 00:06:40,560
i really liked

00:06:37,360 --> 00:06:42,960
jan's point yesterday about this um

00:06:40,560 --> 00:06:44,400
turning security issues into fixable

00:06:42,960 --> 00:06:47,520
performance problems

00:06:44,400 --> 00:06:48,000
i i really like that idea but i just

00:06:47,520 --> 00:06:50,000
don't know

00:06:48,000 --> 00:06:51,680
like how long if i try to propose

00:06:50,000 --> 00:06:53,280
something like this to my interns like

00:06:51,680 --> 00:06:54,800
and if i'm proposing something like this

00:06:53,280 --> 00:06:56,479
to you saying oh here is a great

00:06:54,800 --> 00:06:58,400
security patch

00:06:56,479 --> 00:07:00,400
uh for your sub system it just creates

00:06:58,400 --> 00:07:02,080
this big performance problem but this

00:07:00,400 --> 00:07:03,599
simple one so we know with your my

00:07:02,080 --> 00:07:04,479
engineer you can fix it so i don't know

00:07:03,599 --> 00:07:06,639
if this

00:07:04,479 --> 00:07:09,039
i might not have too long time to leave

00:07:06,639 --> 00:07:11,280
for the mailing list

00:07:09,039 --> 00:07:12,880
but i'll i'll really like the answer i

00:07:11,280 --> 00:07:15,120
did about it

00:07:12,880 --> 00:07:16,639
there was many other points also

00:07:15,120 --> 00:07:18,000
discussed but i think this was kind of

00:07:16,639 --> 00:07:21,440
one of the main ones

00:07:18,000 --> 00:07:23,440
uh also um mimi talked about

00:07:21,440 --> 00:07:25,680
this importance of understanding with

00:07:23,440 --> 00:07:27,280
trust for how how the threat applies for

00:07:25,680 --> 00:07:29,199
different things within the context of

00:07:27,280 --> 00:07:30,880
integrity subsystem so

00:07:29,199 --> 00:07:32,319
how it's important to kind of

00:07:30,880 --> 00:07:35,039
differentiate and and

00:07:32,319 --> 00:07:36,240
understand especially for the packaging

00:07:35,039 --> 00:07:39,120
and parts

00:07:36,240 --> 00:07:39,680
origin and when we had also brad's talk

00:07:39,120 --> 00:07:42,639
today

00:07:39,680 --> 00:07:43,199
um where he gave his view on what he

00:07:42,639 --> 00:07:46,160
thinks

00:07:43,199 --> 00:07:47,759
uh linux security should be doing in may

00:07:46,160 --> 00:07:50,160
i don't know next ten or

00:07:47,759 --> 00:07:51,680
four years so i guess we can also start

00:07:50,160 --> 00:07:53,919
discussing some of that

00:07:51,680 --> 00:07:55,039
but now before we go into question and

00:07:53,919 --> 00:07:56,720
answers mom so

00:07:55,039 --> 00:07:58,720
i will uh give again we will make

00:07:56,720 --> 00:08:00,879
another small round table so that each

00:07:58,720 --> 00:08:03,120
panel member can bring the points which

00:08:00,879 --> 00:08:05,120
they consider important and which way

00:08:03,120 --> 00:08:06,479
we want to bring with regards to kind of

00:08:05,120 --> 00:08:08,319
the current problems in the link

00:08:06,479 --> 00:08:09,280
security and what should we be doing

00:08:08,319 --> 00:08:11,039
about it

00:08:09,280 --> 00:08:13,280
the video started in the same order as

00:08:11,039 --> 00:08:17,039
you started the introduction

00:08:13,280 --> 00:08:17,039
so andy if you could start

00:08:18,879 --> 00:08:21,440
oops hi

00:08:22,160 --> 00:08:29,599
um i definitely i think testing is

00:08:26,720 --> 00:08:31,120
particularly important and not just

00:08:29,599 --> 00:08:32,560
testing but making sure people actually

00:08:31,120 --> 00:08:35,120
run the test

00:08:32,560 --> 00:08:37,760
some of you especially this caller are

00:08:35,120 --> 00:08:37,760
excellent at

00:08:38,159 --> 00:08:41,200
but there's writing tests running tests

00:08:40,240 --> 00:08:43,760
making sure that they

00:08:41,200 --> 00:08:45,519
run recently i'm currently chasing a

00:08:43,760 --> 00:08:48,240
security bug that's embargoed

00:08:45,519 --> 00:08:49,600
that embarrassingly we have a test for

00:08:48,240 --> 00:08:54,000
and the test has been failing

00:08:49,600 --> 00:08:55,680
for several months and nobody noticed

00:08:54,000 --> 00:08:57,600
so we definitely have a lot of room for

00:08:55,680 --> 00:08:59,519
improvement in the kernel

00:08:57,600 --> 00:09:01,519
um i don't know quite what the user

00:08:59,519 --> 00:09:02,959
situation is that involves a lot of

00:09:01,519 --> 00:09:09,839
coordination with distros it's a little

00:09:02,959 --> 00:09:09,839
bit hard to pull off

00:09:11,040 --> 00:09:14,959
and candy our christian

00:09:18,480 --> 00:09:23,839
christian i think i muted

00:09:30,320 --> 00:09:34,399
so maybe we can go to dmitry

00:09:34,720 --> 00:09:38,800
yes can you hear me so i'm actually

00:09:38,160 --> 00:09:41,519
going to

00:09:38,800 --> 00:09:42,880
repeat all of the same roughly so i'm

00:09:41,519 --> 00:09:45,519
going to talk about uh

00:09:42,880 --> 00:09:47,200
box testing and quality uh there are

00:09:45,519 --> 00:09:50,000
lots of bugs in every kernel

00:09:47,200 --> 00:09:50,720
release literally tens of thousands and

00:09:50,000 --> 00:09:53,200
lots of them

00:09:50,720 --> 00:09:55,600
affect security in some ways like memory

00:09:53,200 --> 00:09:58,959
corruptions or information leaks

00:09:55,600 --> 00:10:01,120
and security is the weakest link problem

00:09:58,959 --> 00:10:02,399
so logical protections like security

00:10:01,120 --> 00:10:05,519
modules containers

00:10:02,399 --> 00:10:07,200
integrity and even users and permissions

00:10:05,519 --> 00:10:08,880
they can be compromised by memory

00:10:07,200 --> 00:10:11,360
corruption

00:10:08,880 --> 00:10:12,640
then although those things like cvs are

00:10:11,360 --> 00:10:15,519
not working or

00:10:12,640 --> 00:10:16,880
not being filed or fixes not being

00:10:15,519 --> 00:10:18,800
backported the stable

00:10:16,880 --> 00:10:20,320
or vendors are not updating their

00:10:18,800 --> 00:10:23,600
kernels

00:10:20,320 --> 00:10:24,079
i think major reason for those is simply

00:10:23,600 --> 00:10:27,120
very

00:10:24,079 --> 00:10:28,640
large number of bucks and fixes you can

00:10:27,120 --> 00:10:31,839
file cvs if you have

00:10:28,640 --> 00:10:32,800
say 10 or maybe 100 of bucks but if you

00:10:31,839 --> 00:10:35,040
if you have twenty

00:10:32,800 --> 00:10:37,200
thousand of bucks you can't do cvs

00:10:35,040 --> 00:10:39,760
anymore it's just too much work

00:10:37,200 --> 00:10:40,240
and vendors not updating their kernels

00:10:39,760 --> 00:10:42,079
uh

00:10:40,240 --> 00:10:43,360
because they're not able to keep up and

00:10:42,079 --> 00:10:46,560
it's not their fault

00:10:43,360 --> 00:10:48,720
i think so you can imagine doing few

00:10:46,560 --> 00:10:50,079
security fixes per month uh that's a

00:10:48,720 --> 00:10:53,120
reasonable rate

00:10:50,079 --> 00:10:56,160
uh but if you look at say 4.14 release

00:10:53,120 --> 00:10:56,640
that's almost 20 patches per day for the

00:10:56,160 --> 00:10:58,880
past

00:10:56,640 --> 00:11:00,320
two and a half years like every day

00:10:58,880 --> 00:11:03,680
without weekends

00:11:00,320 --> 00:11:04,720
or 550 patches each month and it's not

00:11:03,680 --> 00:11:06,399
even full number

00:11:04,720 --> 00:11:08,800
we know that patches have been dropped

00:11:06,399 --> 00:11:11,120
if they don't apply clearly

00:11:08,800 --> 00:11:14,240
and brad just told us that we missed

00:11:11,120 --> 00:11:17,120
more than a thousand of fixes

00:11:14,240 --> 00:11:19,279
so i'm not surprised that nothing works

00:11:17,120 --> 00:11:20,399
well at this rate and this doesn't look

00:11:19,279 --> 00:11:22,000
right

00:11:20,399 --> 00:11:24,880
for the most security critical

00:11:22,000 --> 00:11:26,800
infrastructure project in the world

00:11:24,880 --> 00:11:29,120
i think we need to reduce number of bugs

00:11:26,800 --> 00:11:31,680
per release to orders of magnitude

00:11:29,120 --> 00:11:32,640
to make situation manageable and to make

00:11:31,680 --> 00:11:36,079
those security

00:11:32,640 --> 00:11:38,240
processes even possible so what should

00:11:36,079 --> 00:11:40,320
we do about this

00:11:38,240 --> 00:11:41,519
i think we need to make tests in a

00:11:40,320 --> 00:11:43,839
quality integral

00:11:41,519 --> 00:11:45,839
part of the development process and of

00:11:43,839 --> 00:11:47,839
the project and not try to push it to

00:11:45,839 --> 00:11:50,800
some third parties so users

00:11:47,839 --> 00:11:52,800
and wait when they will do this so users

00:11:50,800 --> 00:11:55,279
uh end users are very bad

00:11:52,800 --> 00:11:57,040
testers they don't necessarily see bugs

00:11:55,279 --> 00:11:59,600
they don't use debugging tools they

00:11:57,040 --> 00:12:02,639
don't report box most of the time

00:11:59,600 --> 00:12:05,519
and they don't test any corner cases

00:12:02,639 --> 00:12:06,720
um so for the project it should include

00:12:05,519 --> 00:12:08,880
things like

00:12:06,720 --> 00:12:10,160
policies like developers need to test

00:12:08,880 --> 00:12:12,399
with new function

00:12:10,160 --> 00:12:13,200
of this new functionality at regression

00:12:12,399 --> 00:12:15,600
tests

00:12:13,200 --> 00:12:17,120
for bug fixes and drivers need to be

00:12:15,600 --> 00:12:19,200
testable

00:12:17,120 --> 00:12:20,399
because if they can only be tested with

00:12:19,200 --> 00:12:22,320
real hardware

00:12:20,399 --> 00:12:24,000
it means they are not tested on size

00:12:22,320 --> 00:12:26,399
they're not tested by developers

00:12:24,000 --> 00:12:28,560
they are not tested during stable

00:12:26,399 --> 00:12:30,399
process

00:12:28,560 --> 00:12:32,560
uh then static analysis needs to be

00:12:30,399 --> 00:12:34,480
integrated into sentient patches

00:12:32,560 --> 00:12:38,160
and we need green light for people

00:12:34,480 --> 00:12:40,079
deploying new static analyzers uh

00:12:38,160 --> 00:12:41,760
we also need more essen and tooling and

00:12:40,079 --> 00:12:43,600
automation

00:12:41,760 --> 00:12:45,360
because at this scale something that can

00:12:43,600 --> 00:12:48,079
be automated and needs to be done

00:12:45,360 --> 00:12:51,680
manually it simply won't be done at all

00:12:48,079 --> 00:12:54,560
and that's what we see with testing so

00:12:51,680 --> 00:12:55,519
this requires new unified formats for

00:12:54,560 --> 00:12:57,760
tests

00:12:55,519 --> 00:12:59,920
and unifying all aspects of tests

00:12:57,760 --> 00:13:02,560
actually like prerequisites output

00:12:59,920 --> 00:13:03,680
output formats how to run them in

00:13:02,560 --> 00:13:05,360
particular that means

00:13:03,680 --> 00:13:06,800
also the developers need to stop

00:13:05,360 --> 00:13:10,399
inventing their own

00:13:06,800 --> 00:13:12,160
test frameworks and systems on the side

00:13:10,399 --> 00:13:14,000
and also things like unified crash

00:13:12,160 --> 00:13:15,680
important because currently

00:13:14,000 --> 00:13:17,519
say you can you can run tests but you

00:13:15,680 --> 00:13:18,480
won't be able to understand if kernel

00:13:17,519 --> 00:13:21,680
crashed or not

00:13:18,480 --> 00:13:23,200
in in an automated way

00:13:21,680 --> 00:13:25,120
and in particular this completes such

00:13:23,200 --> 00:13:26,399
complete automation and unification is

00:13:25,120 --> 00:13:29,519
the reason why

00:13:26,399 --> 00:13:32,240
sisbot is so effective

00:13:29,519 --> 00:13:32,800
uh so it may appear that i'm asking to

00:13:32,240 --> 00:13:34,639
kind of

00:13:32,800 --> 00:13:36,399
do more work and increase cost but

00:13:34,639 --> 00:13:37,920
actually a good test

00:13:36,399 --> 00:13:39,839
in automation in the end it

00:13:37,920 --> 00:13:41,440
significantly reduces cost of

00:13:39,839 --> 00:13:43,199
development because we

00:13:41,440 --> 00:13:46,079
don't need to chase bugs we don't need

00:13:43,199 --> 00:13:48,000
to fix regressions again and again and

00:13:46,079 --> 00:13:50,639
we don't need to do the small follow-up

00:13:48,000 --> 00:13:52,399
fixes for static analysis warnings and

00:13:50,639 --> 00:13:54,730
so on

00:13:52,399 --> 00:13:57,680
so that's my view and thank you

00:13:54,730 --> 00:14:02,079
[Music]

00:13:57,680 --> 00:14:03,839
thank you dmitry are so

00:14:02,079 --> 00:14:06,000
uh let's go to emily next i don't know

00:14:03,839 --> 00:14:07,199
if christian we will return to you at

00:14:06,000 --> 00:14:11,920
the end of the year

00:14:07,199 --> 00:14:14,880
sure oh are you actually here

00:14:11,920 --> 00:14:16,000
i am here okay so maybe we can go to

00:14:14,880 --> 00:14:17,920
your back so

00:14:16,000 --> 00:14:20,079
before we left you again i hope i'm not

00:14:17,920 --> 00:14:23,839
breaking off again i'm sorry

00:14:20,079 --> 00:14:26,959
this is germany's internet i tell you

00:14:23,839 --> 00:14:29,760
um so yeah i mean uh i

00:14:26,959 --> 00:14:31,760
was expecting that dimitri would cover

00:14:29,760 --> 00:14:44,240
all of the technical details with cisco

00:14:31,760 --> 00:14:48,880
and so on

00:14:44,240 --> 00:14:48,880
uh christian i guess we lost you again

00:14:51,760 --> 00:14:55,360
okay so maybe emily let's let's go to

00:14:54,399 --> 00:14:58,639
you

00:14:55,360 --> 00:14:59,839
let's hope it repairs all right let's

00:14:58,639 --> 00:15:03,279
let's hope this is more

00:14:59,839 --> 00:15:05,519
more stable um

00:15:03,279 --> 00:15:07,279
so as i mentioned in my in my

00:15:05,519 --> 00:15:09,440
introduction it's been quite some time

00:15:07,279 --> 00:15:11,839
since i worked on the linux kernel so

00:15:09,440 --> 00:15:12,639
i wanted to take this opportunity to

00:15:11,839 --> 00:15:15,040
give

00:15:12,639 --> 00:15:15,920
my three wishes for the broader linux

00:15:15,040 --> 00:15:19,199
security

00:15:15,920 --> 00:15:23,920
ecosystem beyond beyond the kernel

00:15:19,199 --> 00:15:25,199
um i really enjoy coming to these things

00:15:23,920 --> 00:15:28,000
and hearing the latest

00:15:25,199 --> 00:15:28,560
of the innovative solutions coming out

00:15:28,000 --> 00:15:31,680
in

00:15:28,560 --> 00:15:34,000
the linux kernel and my

00:15:31,680 --> 00:15:35,120
it brings me great hope and optimism

00:15:34,000 --> 00:15:37,759
which lasts until

00:15:35,120 --> 00:15:39,440
october when you know we engage in cyber

00:15:37,759 --> 00:15:42,079
security awareness month

00:15:39,440 --> 00:15:43,600
and i find out that once again the

00:15:42,079 --> 00:15:46,880
latest

00:15:43,600 --> 00:15:47,440
state of the art advice for end users is

00:15:46,880 --> 00:15:49,920
to

00:15:47,440 --> 00:15:52,000
not click on links right so it makes me

00:15:49,920 --> 00:15:53,440
wonder you know are we really making

00:15:52,000 --> 00:15:55,199
progress

00:15:53,440 --> 00:15:57,120
so when i think about the future of

00:15:55,199 --> 00:16:00,720
linux security

00:15:57,120 --> 00:16:04,800
um i think about how uh the path

00:16:00,720 --> 00:16:06,880
of code to the user um

00:16:04,800 --> 00:16:09,519
the paths are just proliferating so in

00:16:06,880 --> 00:16:12,320
the past we've had

00:16:09,519 --> 00:16:13,279
the linux distros be a curation point

00:16:12,320 --> 00:16:16,880
where

00:16:13,279 --> 00:16:19,199
users expected them to to

00:16:16,880 --> 00:16:21,120
determine which are the most usable and

00:16:19,199 --> 00:16:24,399
most useful

00:16:21,120 --> 00:16:26,959
open source security projects that may

00:16:24,399 --> 00:16:31,519
have been an iffy proposition some

00:16:26,959 --> 00:16:33,120
uh some um distros did more curation and

00:16:31,519 --> 00:16:35,839
some did less but they were

00:16:33,120 --> 00:16:36,560
still commonly considered a curation

00:16:35,839 --> 00:16:38,240
point

00:16:36,560 --> 00:16:40,240
and now with you know all of the

00:16:38,240 --> 00:16:43,120
different ways and doctor containers

00:16:40,240 --> 00:16:43,120
and and

00:16:49,279 --> 00:16:53,360
there's there's many more ways through

00:16:51,279 --> 00:16:55,519
and so one of the big problems is how

00:16:53,360 --> 00:16:56,560
open source projects signal to each

00:16:55,519 --> 00:16:59,519
other uh

00:16:56,560 --> 00:17:00,160
that they are doing the uh that they're

00:16:59,519 --> 00:17:04,000
developing

00:17:00,160 --> 00:17:06,559
with uh the security in mind and uh

00:17:04,000 --> 00:17:08,079
so the linux foundation did create the

00:17:06,559 --> 00:17:11,120
the badging app

00:17:08,079 --> 00:17:13,360
and it is still ongoing um it's

00:17:11,120 --> 00:17:14,720
been ongoing for for the past uh four

00:17:13,360 --> 00:17:19,360
years and

00:17:14,720 --> 00:17:21,760
this past month curl and the linux

00:17:19,360 --> 00:17:23,120
curl and the the linux kernel became the

00:17:21,760 --> 00:17:26,480
fifth and sixth projects

00:17:23,120 --> 00:17:28,480
to become gold badge the importance of

00:17:26,480 --> 00:17:29,679
the project is not necessarily in the

00:17:28,480 --> 00:17:33,280
badge per se but

00:17:29,679 --> 00:17:37,200
as a conduit for the discussion of what

00:17:33,280 --> 00:17:40,320
makes a secure open source project

00:17:37,200 --> 00:17:43,440
so my wish is that you know the the

00:17:40,320 --> 00:17:45,919
badging app gain more visibility

00:17:43,440 --> 00:17:48,000
more projects and have more people

00:17:45,919 --> 00:17:50,799
contributing to that discussion

00:17:48,000 --> 00:17:51,840
so my second uh point that i'd like to

00:17:50,799 --> 00:17:54,240
talk about today

00:17:51,840 --> 00:17:55,919
is about resources that are out there

00:17:54,240 --> 00:17:59,039
that are available

00:17:55,919 --> 00:18:02,799
to open source projects

00:17:59,039 --> 00:18:04,880
and so you all may be aware of

00:18:02,799 --> 00:18:07,200
mozilla's moss program and its

00:18:04,880 --> 00:18:10,160
associated secure open source

00:18:07,200 --> 00:18:12,000
uh program which funds audits for open

00:18:10,160 --> 00:18:15,520
source projects that

00:18:12,000 --> 00:18:16,640
mozilla and firefox use um but i also

00:18:15,520 --> 00:18:18,240
like to make sure

00:18:16,640 --> 00:18:20,240
take this opportunity to make sure

00:18:18,240 --> 00:18:22,520
you're aware of the open tech fund

00:18:20,240 --> 00:18:24,000
which has as a mission uh secure

00:18:22,520 --> 00:18:27,440
communications

00:18:24,000 --> 00:18:29,600
and censorship circumvention and they

00:18:27,440 --> 00:18:31,679
also offer as part of their red team

00:18:29,600 --> 00:18:32,480
fund part of the core infrastructure

00:18:31,679 --> 00:18:35,520
fund

00:18:32,480 --> 00:18:37,039
security audits for software that

00:18:35,520 --> 00:18:39,200
support that mission

00:18:37,039 --> 00:18:41,120
and so my second wish for the future of

00:18:39,200 --> 00:18:44,799
linux security is that

00:18:41,120 --> 00:18:47,120
more projects take advantage of these

00:18:44,799 --> 00:18:48,240
and then the the last thing that i'd

00:18:47,120 --> 00:18:51,600
like to talk about

00:18:48,240 --> 00:18:53,760
is um that even as linux has really

00:18:51,600 --> 00:18:56,080
taken over the world you know it's in

00:18:53,760 --> 00:18:59,039
safety critical systems and iot

00:18:56,080 --> 00:19:00,320
devices running massive cloud

00:18:59,039 --> 00:19:02,720
infrastructures

00:19:00,320 --> 00:19:04,720
knowledge of linux security is really

00:19:02,720 --> 00:19:07,840
not keeping up

00:19:04,720 --> 00:19:10,640
with the widespread proliferation and

00:19:07,840 --> 00:19:11,120
especially in the top level you know the

00:19:10,640 --> 00:19:14,799
highest

00:19:11,120 --> 00:19:17,919
level of applications or projects

00:19:14,799 --> 00:19:19,840
intended for i.t security operations you

00:19:17,919 --> 00:19:20,320
tend to see these projects coming out

00:19:19,840 --> 00:19:23,120
with

00:19:20,320 --> 00:19:24,000
you know fully populated information

00:19:23,120 --> 00:19:26,720
about windows

00:19:24,000 --> 00:19:28,480
security and then with the tbd yes we

00:19:26,720 --> 00:19:30,000
know we need linux security and that's

00:19:28,480 --> 00:19:32,559
coming soon and we we

00:19:30,000 --> 00:19:34,320
really appreciate your contributions and

00:19:32,559 --> 00:19:37,360
so my third wish

00:19:34,320 --> 00:19:39,039
for linux security is that the you know

00:19:37,360 --> 00:19:41,919
knowledge of linux security

00:19:39,039 --> 00:19:43,840
uh for end users uh proliferates much

00:19:41,919 --> 00:19:45,760
more widely and keeps up with the

00:19:43,840 --> 00:19:48,720
adoption of linux

00:19:45,760 --> 00:19:51,039
itself so those are my three wishes back

00:19:48,720 --> 00:19:51,039
to you

00:19:57,360 --> 00:20:02,720
yeah thanks elena so we had some great

00:20:00,240 --> 00:20:05,840
discussions in the yesterday's panel

00:20:02,720 --> 00:20:08,320
and mimi zohar has brought this question

00:20:05,840 --> 00:20:10,640
on the need of file provenance

00:20:08,320 --> 00:20:12,480
and now in today's well our whole world

00:20:10,640 --> 00:20:14,720
is evolving around technology

00:20:12,480 --> 00:20:16,960
the technology has played a significant

00:20:14,720 --> 00:20:18,080
role especially in this time of pandemic

00:20:16,960 --> 00:20:21,120
whether it is

00:20:18,080 --> 00:20:24,320
cloud infrastructure for online shopping

00:20:21,120 --> 00:20:26,080
at t networks collaboration tools or

00:20:24,320 --> 00:20:29,120
user and devices

00:20:26,080 --> 00:20:31,039
now and we also heard about lot of cyber

00:20:29,120 --> 00:20:33,919
attacks happening this time

00:20:31,039 --> 00:20:36,000
so in such a scenario could file

00:20:33,919 --> 00:20:38,480
verification would have played a

00:20:36,000 --> 00:20:40,240
very significant role in building our

00:20:38,480 --> 00:20:42,320
trust on the softwares or the

00:20:40,240 --> 00:20:44,480
applications or the firmware which are

00:20:42,320 --> 00:20:46,240
getting run on these devices

00:20:44,480 --> 00:20:48,320
or on the infrastructure on which these

00:20:46,240 --> 00:20:50,000
devices depend on

00:20:48,320 --> 00:20:52,480
but now the need of signature

00:20:50,000 --> 00:20:55,280
verification implicitly brings with it

00:20:52,480 --> 00:20:57,600
the need of asymmetric public keys

00:20:55,280 --> 00:20:58,880
and then the similar question of thrust

00:20:57,600 --> 00:21:00,880
will apply on those

00:20:58,880 --> 00:21:02,080
keys which are used for verifying these

00:21:00,880 --> 00:21:04,480
signatures

00:21:02,080 --> 00:21:05,120
so in this global world where every

00:21:04,480 --> 00:21:07,679
device

00:21:05,120 --> 00:21:08,400
has the firmware stack of application

00:21:07,679 --> 00:21:10,880
stack

00:21:08,400 --> 00:21:12,799
operating system from different vendors

00:21:10,880 --> 00:21:13,600
by default the signers of these

00:21:12,799 --> 00:21:15,600
different

00:21:13,600 --> 00:21:16,720
binaries there are different owners of

00:21:15,600 --> 00:21:18,640
the keys

00:21:16,720 --> 00:21:20,880
so i think in today's discussion i would

00:21:18,640 --> 00:21:22,880
mainly like to emphasize on the issues

00:21:20,880 --> 00:21:25,679
related to key management

00:21:22,880 --> 00:21:28,080
in context of the kernel the key

00:21:25,679 --> 00:21:30,640
management is a full entrance cycle

00:21:28,080 --> 00:21:31,919
from creation provisioning retention to

00:21:30,640 --> 00:21:35,120
revocation

00:21:31,919 --> 00:21:35,679
and one of the problem i sees how kernel

00:21:35,120 --> 00:21:38,080
trusts

00:21:35,679 --> 00:21:40,720
asymmetric public keys which are not

00:21:38,080 --> 00:21:43,679
owned or built within the kernel

00:21:40,720 --> 00:21:44,799
so i think i i i first realized this

00:21:43,679 --> 00:21:47,039
issue

00:21:44,799 --> 00:21:48,320
while enabling secure boot on open power

00:21:47,039 --> 00:21:51,360
systems and

00:21:48,320 --> 00:21:54,320
in this case the interesting thing was

00:21:51,360 --> 00:21:54,720
that our bootloader itself is kernel and

00:21:54,320 --> 00:21:57,440
the

00:21:54,720 --> 00:21:59,440
keys for verifying the actual host was

00:21:57,440 --> 00:22:01,360
is being owned by firmware

00:21:59,440 --> 00:22:03,039
but the kernel do not trust from their

00:22:01,360 --> 00:22:05,520
keys because

00:22:03,039 --> 00:22:07,600
they do not match the trust requirements

00:22:05,520 --> 00:22:10,000
of existing kernel keyings

00:22:07,600 --> 00:22:12,159
so the addition of a new platform

00:22:10,000 --> 00:22:15,600
killing resolved this issue

00:22:12,159 --> 00:22:17,919
by isolating kernel verifying case from

00:22:15,600 --> 00:22:18,720
other key keys in other keys in the

00:22:17,919 --> 00:22:21,600
kernel and

00:22:18,720 --> 00:22:22,159
was used only for kernel verification

00:22:21,600 --> 00:22:25,679
but

00:22:22,159 --> 00:22:27,919
this was the small step that was used

00:22:25,679 --> 00:22:30,559
only for the purpose of

00:22:27,919 --> 00:22:31,760
uh using firmware key for the kernel

00:22:30,559 --> 00:22:35,039
verification

00:22:31,760 --> 00:22:37,919
and there is still an issue on

00:22:35,039 --> 00:22:38,880
how to how does the kernel trust the

00:22:37,919 --> 00:22:41,520
keys

00:22:38,880 --> 00:22:42,559
from various other layers if those are

00:22:41,520 --> 00:22:46,240
not signed with

00:22:42,559 --> 00:22:46,720
built-in keys so is there a possibility

00:22:46,240 --> 00:22:49,039
where

00:22:46,720 --> 00:22:51,280
colonel can trust something from outside

00:22:49,039 --> 00:22:53,200
and load the keys dynamically

00:22:51,280 --> 00:22:54,400
is there another route of trust which we

00:22:53,200 --> 00:22:57,200
can depend on

00:22:54,400 --> 00:22:59,440
like trusted hardware or other external

00:22:57,200 --> 00:23:01,600
key management servers

00:22:59,440 --> 00:23:03,120
how does the chronologist any external

00:23:01,600 --> 00:23:05,600
source and

00:23:03,120 --> 00:23:07,200
then additionally how do we ensure that

00:23:05,600 --> 00:23:09,200
our keys are getting

00:23:07,200 --> 00:23:10,640
do having the relevant checks which are

00:23:09,200 --> 00:23:13,520
needed as per the

00:23:10,640 --> 00:23:14,720
x509 specs or any or any of these

00:23:13,520 --> 00:23:16,960
respects

00:23:14,720 --> 00:23:17,760
and then is the revocation of keys

00:23:16,960 --> 00:23:21,039
happenings

00:23:17,760 --> 00:23:21,440
uh as needed is it handled sufficiently

00:23:21,039 --> 00:23:24,240
or

00:23:21,440 --> 00:23:24,720
are even doing it sufficiently so i

00:23:24,240 --> 00:23:26,640
think

00:23:24,720 --> 00:23:29,600
these are the main issues which i would

00:23:26,640 --> 00:23:31,840
like to get discussed into this call and

00:23:29,600 --> 00:23:33,440
and then i would like to say that most

00:23:31,840 --> 00:23:36,159
of these issues

00:23:33,440 --> 00:23:38,000
we are seeing in server domain and there

00:23:36,159 --> 00:23:39,200
are people here from various other

00:23:38,000 --> 00:23:42,159
domains like

00:23:39,200 --> 00:23:43,440
iot embedded containers so it would be

00:23:42,159 --> 00:23:45,440
interesting to know

00:23:43,440 --> 00:23:47,039
what type of problems they are facing in

00:23:45,440 --> 00:23:50,159
the similar

00:23:47,039 --> 00:23:52,080
context and then we can see how can we

00:23:50,159 --> 00:23:52,799
come up with a flexible solution in the

00:23:52,080 --> 00:23:56,080
kernel

00:23:52,799 --> 00:23:59,919
for handling the key management issues

00:23:56,080 --> 00:24:04,240
so thanks elena thank you thank you

00:23:59,919 --> 00:24:04,240
so christian are you able to

00:24:14,799 --> 00:24:20,000
round table and actually like usually

00:24:17,760 --> 00:24:21,600
nothing goes as planned so by the time

00:24:20,000 --> 00:24:24,720
the round table again yes

00:24:21,600 --> 00:24:26,000
it's kind of i finished

00:24:24,720 --> 00:24:28,320
they had already in a queue like

00:24:26,000 --> 00:24:31,600
millions of questions now i can only see

00:24:28,320 --> 00:24:33,120
two of them so at least looks like

00:24:31,600 --> 00:24:34,720
i can encourage people to ask more

00:24:33,120 --> 00:24:36,960
questions you get actually chance

00:24:34,720 --> 00:24:38,400
being answered this time much less in

00:24:36,960 --> 00:24:41,520
general

00:24:38,400 --> 00:24:46,240
and we have this very bad background now

00:24:41,520 --> 00:24:49,279
i wonder where is that

00:24:46,240 --> 00:24:51,600
i think it got better okay so uh maybe

00:24:49,279 --> 00:24:52,640
uh since we have only two questions here

00:24:51,600 --> 00:24:55,520
so uh

00:24:52,640 --> 00:24:57,600
i can ask these questions to the panel

00:24:55,520 --> 00:24:59,919
and then we'll see how we go from there

00:24:57,600 --> 00:25:02,000
so the first question is actually on the

00:24:59,919 --> 00:25:04,080
security and crypto

00:25:02,000 --> 00:25:05,520
so the question is security encrypted

00:25:04,080 --> 00:25:07,520
subsystem seems quite

00:25:05,520 --> 00:25:09,520
far apart this causes things like key

00:25:07,520 --> 00:25:10,320
management being artificially splashing

00:25:09,520 --> 00:25:12,080
too

00:25:10,320 --> 00:25:13,360
for example there's no easy way to

00:25:12,080 --> 00:25:16,640
accommodate

00:25:13,360 --> 00:25:18,720
acceleration of encrypted keys and the

00:25:16,640 --> 00:25:20,559
tpm doesn't count because it's slow

00:25:18,720 --> 00:25:22,640
and this means that most of the times

00:25:20,559 --> 00:25:23,279
the keys are lying around in the plain

00:25:22,640 --> 00:25:25,039
text

00:25:23,279 --> 00:25:27,840
the question to your partner members how

00:25:25,039 --> 00:25:31,520
do you see the situation improving

00:25:27,840 --> 00:25:31,520
anyone want to comment on this

00:25:32,480 --> 00:25:39,440
i can take it sure

00:25:36,320 --> 00:25:41,120
uh okay so i think that that basically

00:25:39,440 --> 00:25:43,440
two points here

00:25:41,120 --> 00:25:45,279
uh what i'm saying is one is related to

00:25:43,440 --> 00:25:47,440
the crypto acceleration

00:25:45,279 --> 00:25:49,279
so if i'm understanding the question

00:25:47,440 --> 00:25:49,679
right there is one thing is like whether

00:25:49,279 --> 00:25:51,360
do you

00:25:49,679 --> 00:25:53,679
offload the competition to the crypto

00:25:51,360 --> 00:25:55,600
accelerators and the second thing is

00:25:53,679 --> 00:25:58,159
the keys are lying around in plain text

00:25:55,600 --> 00:26:00,159
so can we use the crypto accelerators or

00:25:58,159 --> 00:26:01,120
the probably hardware security modules

00:26:00,159 --> 00:26:04,880
for the cr

00:26:01,120 --> 00:26:06,960
for storing those keys so i think uh

00:26:04,880 --> 00:26:08,880
uh if you see the latest work which has

00:26:06,960 --> 00:26:09,600
been happening so there was cpm being

00:26:08,880 --> 00:26:11,919
used for

00:26:09,600 --> 00:26:12,880
encrypted keys that was for symmetric

00:26:11,919 --> 00:26:15,840
keys

00:26:12,880 --> 00:26:16,720
and there has been recently some patches

00:26:15,840 --> 00:26:19,360
in area of

00:26:16,720 --> 00:26:21,279
tested execution environment to use that

00:26:19,360 --> 00:26:23,120
for the encrypted key so i think people

00:26:21,279 --> 00:26:23,600
are trying to use no more on the trusted

00:26:23,120 --> 00:26:26,480
hardware

00:26:23,600 --> 00:26:27,840
side for encrypted keys but i have which

00:26:26,480 --> 00:26:30,080
is like symmetric case

00:26:27,840 --> 00:26:32,559
and i think that is the same point now

00:26:30,080 --> 00:26:33,760
we how can we use them for us symmetric

00:26:32,559 --> 00:26:36,000
keys also so

00:26:33,760 --> 00:26:37,840
i say the situation is improving i think

00:26:36,000 --> 00:26:39,440
with more and more secure hardware type

00:26:37,840 --> 00:26:41,120
of things coming up now

00:26:39,440 --> 00:26:43,200
there are more people people will be

00:26:41,120 --> 00:26:45,840
trying to they use them for the

00:26:43,200 --> 00:26:47,120
uh and they are patches coming around uh

00:26:45,840 --> 00:26:49,039
probably as the

00:26:47,120 --> 00:26:51,039
different varieties of hardware might

00:26:49,039 --> 00:26:52,880
come there might be a need of a generic

00:26:51,039 --> 00:26:55,919
layer which can get up

00:26:52,880 --> 00:26:56,400
transparently undo the underlying thing

00:26:55,919 --> 00:26:58,480
and

00:26:56,400 --> 00:27:01,120
more will you can see around in this in

00:26:58,480 --> 00:27:01,120
the corner

00:27:03,200 --> 00:27:06,720
thank you does anyone else want to

00:27:05,600 --> 00:27:10,400
comment on this

00:27:06,720 --> 00:27:10,400
could you move to the next question

00:27:11,919 --> 00:27:16,320
okay so let's take the question the

00:27:13,919 --> 00:27:18,399
question is in very different areas so

00:27:16,320 --> 00:27:20,320
next question are didn't the phoenix

00:27:18,399 --> 00:27:22,320
crown really meet the 80

00:27:20,320 --> 00:27:24,240
statement test coverage required for the

00:27:22,320 --> 00:27:27,360
ci silver gold bait

00:27:24,240 --> 00:27:31,360
it seems unlikely other frameworks are

00:27:27,360 --> 00:27:31,840
for example this would place the linux

00:27:31,360 --> 00:27:34,320
kernel

00:27:31,840 --> 00:27:35,760
at the end of the maturity level journey

00:27:34,320 --> 00:27:39,919
i don't know what this is

00:27:35,760 --> 00:27:42,640
i am nice but i i can take this question

00:27:39,919 --> 00:27:42,960
so one of one of the nice things about

00:27:42,640 --> 00:27:46,320
the

00:27:42,960 --> 00:27:49,919
uh the badge app is that uh the evidence

00:27:46,320 --> 00:27:50,960
is made public as as as the questions

00:27:49,919 --> 00:27:52,799
get answered

00:27:50,960 --> 00:27:54,720
and so if you go to the badge app and

00:27:52,799 --> 00:27:56,799
you look at the entry for the linux

00:27:54,720 --> 00:27:59,679
kernel

00:27:56,799 --> 00:28:01,760
it uh that's actually one of the unmet

00:27:59,679 --> 00:28:05,679
criteria

00:28:01,760 --> 00:28:07,520
it's with the comment linux tests

00:28:05,679 --> 00:28:09,440
kernel tests individual feature

00:28:07,520 --> 00:28:10,080
functionality not code branches and is

00:28:09,440 --> 00:28:12,399
generally

00:28:10,080 --> 00:28:13,679
only new features not older posix-like

00:28:12,399 --> 00:28:16,240
functionality

00:28:13,679 --> 00:28:17,200
and so the lack of meeting that criteria

00:28:16,240 --> 00:28:18,960
did not

00:28:17,200 --> 00:28:21,039
prevent it from getting to the gold

00:28:18,960 --> 00:28:23,120
badge you don't have to

00:28:21,039 --> 00:28:25,440
match everything in order to get to the

00:28:23,120 --> 00:28:26,320
300 level to get to the to the gold

00:28:25,440 --> 00:28:28,960
badge

00:28:26,320 --> 00:28:30,799
and it i mean it's entirely possible

00:28:28,960 --> 00:28:34,240
that other maturity models wouldn't

00:28:30,799 --> 00:28:37,600
agree to

00:28:34,240 --> 00:28:40,000
to that level that's the beauty of

00:28:37,600 --> 00:28:42,720
having different

00:28:40,000 --> 00:28:44,000
different maturity models and it's also

00:28:42,720 --> 00:28:48,159
the beauty of

00:28:44,000 --> 00:28:48,799
the linux badge app or the the cii badge

00:28:48,159 --> 00:28:51,039
app

00:28:48,799 --> 00:28:52,720
program and you can go in there and have

00:28:51,039 --> 00:28:53,200
the debate about whether or not it

00:28:52,720 --> 00:28:56,840
should

00:28:53,200 --> 00:28:59,600
get that gold badge without that 80

00:28:56,840 --> 00:29:03,200
coverage i also have

00:28:59,600 --> 00:29:05,520
have an answer uh so i i'm not working

00:29:03,200 --> 00:29:06,960
on cis systems but last september i

00:29:05,520 --> 00:29:10,000
asked

00:29:06,960 --> 00:29:14,000
all main ci's like kernel say

00:29:10,000 --> 00:29:15,120
cki lkft about kernel coverage code

00:29:14,000 --> 00:29:17,679
coverage and

00:29:15,120 --> 00:29:19,760
none of them had any infrastructure to

00:29:17,679 --> 00:29:21,760
even collect coverage

00:29:19,760 --> 00:29:24,960
so i suspect the answer is that nobody

00:29:21,760 --> 00:29:27,279
really knows what is the coverage

00:29:24,960 --> 00:29:29,919
and so i know some some number some

00:29:27,279 --> 00:29:35,039
coverage numbers for c scholar

00:29:29,919 --> 00:29:35,039
um it's somewhat hard to assess because

00:29:35,120 --> 00:29:38,720
we we work on the compiler level not

00:29:37,200 --> 00:29:41,200
necessary statement level

00:29:38,720 --> 00:29:42,080
and we don't cover say unit functions

00:29:41,200 --> 00:29:44,399
and

00:29:42,080 --> 00:29:45,440
say if you're testing on the x86

00:29:44,399 --> 00:29:47,679
architecture

00:29:45,440 --> 00:29:49,679
how do you count other architectures do

00:29:47,679 --> 00:29:52,320
you need to take them

00:29:49,679 --> 00:29:54,000
in the total number of statements or not

00:29:52,320 --> 00:29:57,360
but they get a number somewhere

00:29:54,000 --> 00:30:00,399
around eight percent so sisbot covers

00:29:57,360 --> 00:30:03,279
about eight percent of statements that

00:30:00,399 --> 00:30:06,399
were compiled into the kernel

00:30:03,279 --> 00:30:08,320
uh but one remark here is that

00:30:06,399 --> 00:30:09,840
as it was mentioned yesterday sisbot

00:30:08,320 --> 00:30:12,000
actually doesn't do

00:30:09,840 --> 00:30:13,600
any testing of the kernel in the

00:30:12,000 --> 00:30:17,120
traditional sense it

00:30:13,600 --> 00:30:19,600
only tests for basic safety violations

00:30:17,120 --> 00:30:21,279
for example if you create a circuit and

00:30:19,600 --> 00:30:23,120
the kernel instead delete all of your

00:30:21,279 --> 00:30:26,240
files that perfectly fine with

00:30:23,120 --> 00:30:28,799
this bot like it didn't crash

00:30:26,240 --> 00:30:30,159
um so there's i mean there's also

00:30:28,799 --> 00:30:32,320
different

00:30:30,159 --> 00:30:34,000
degrees of coverage like what does mean

00:30:32,320 --> 00:30:37,840
to be covered

00:30:34,000 --> 00:30:37,840
by what this

00:30:38,960 --> 00:30:41,760
you think let's see

00:30:44,880 --> 00:30:49,279
anyone else wants to comment on this one

00:30:49,679 --> 00:30:54,480
and i hope you're not leaving us moving

00:30:55,760 --> 00:30:59,440
no i'm still here just getting out of

00:30:57,120 --> 00:30:59,440
the sun

00:31:00,240 --> 00:31:04,559
okay so if no one wants to comment on

00:31:02,080 --> 00:31:08,320
this one let's move to another question

00:31:04,559 --> 00:31:10,320
oh i if you can hear me

00:31:08,320 --> 00:31:11,760
yes i would want i would want to i have

00:31:10,320 --> 00:31:13,360
a question for dimitri actually because

00:31:11,760 --> 00:31:14,080
we talked about this before do you do

00:31:13,360 --> 00:31:15,760
you feel

00:31:14,080 --> 00:31:18,159
are you happy with the impact you're

00:31:15,760 --> 00:31:18,640
having right now with cispot ciscola and

00:31:18,159 --> 00:31:23,519
kc

00:31:18,640 --> 00:31:23,519
sun and so on that you have on on

00:31:30,880 --> 00:31:34,159
am i happy with impact

00:31:38,640 --> 00:31:44,720
to some degree i would say so we

00:31:42,320 --> 00:31:46,080
definitely lots of bugs getting fixed

00:31:44,720 --> 00:31:48,480
because of our work

00:31:46,080 --> 00:31:50,720
and that's very nice and i'm happy with

00:31:48,480 --> 00:31:50,720
that

00:31:51,919 --> 00:31:58,480
on the other hand i would like

00:31:55,279 --> 00:32:01,519
tests to be added for the box fixed for

00:31:58,480 --> 00:32:05,039
example and that's usually not happening

00:32:01,519 --> 00:32:07,919
in most of the cases um

00:32:05,039 --> 00:32:09,279
i would also like more box to be fixed

00:32:07,919 --> 00:32:14,399
because we still have

00:32:09,279 --> 00:32:16,960
i think now about 600 open box so i

00:32:14,399 --> 00:32:16,960
don't know i

00:32:17,120 --> 00:32:20,159
frankly it's hard to say if i'm happy or

00:32:19,039 --> 00:32:23,679
not

00:32:20,159 --> 00:32:23,679
well i guess mostly yes

00:32:25,440 --> 00:32:29,120
there's there's one bug in the console

00:32:27,919 --> 00:32:31,200
code that

00:32:29,120 --> 00:32:32,880
dimitri that syscaller keeps hitting

00:32:31,200 --> 00:32:34,240
every couple days

00:32:32,880 --> 00:32:37,840
and they keep sending us reports and

00:32:34,240 --> 00:32:43,840
nobody's fixed it yet so

00:32:37,840 --> 00:32:43,840
someday we'll fix all 600 bugs

00:32:46,559 --> 00:32:51,200
it's a christian while while you're able

00:32:49,039 --> 00:32:53,200
to speak so do you want to try to

00:32:51,200 --> 00:32:54,399
again present your point of view which

00:32:53,200 --> 00:32:56,720
you didn't i

00:32:54,399 --> 00:32:57,760
i'm very happy i'm very happy to and i'm

00:32:56,720 --> 00:32:59,440
sorry for all the

00:32:57,760 --> 00:33:01,039
problems i'm causing but that's what i'm

00:32:59,440 --> 00:33:04,320
known for i'm joking

00:33:01,039 --> 00:33:06,799
um one of the things i tried to

00:33:04,320 --> 00:33:11,840
make a point before is um that a lot of

00:33:06,799 --> 00:33:11,840
us as developers may

00:33:16,240 --> 00:33:19,039
how it was sold

00:33:19,360 --> 00:33:25,120
it's breaking again maybe you can type

00:33:21,840 --> 00:33:27,039
your point

00:33:25,120 --> 00:33:28,880
no you can try again so it's like

00:33:27,039 --> 00:33:29,200
starting and it's good and then when it

00:33:28,880 --> 00:33:33,360
just

00:33:29,200 --> 00:33:35,120
starts breaking am i back now

00:33:33,360 --> 00:33:39,840
maybe if you turn the video maybe it

00:33:35,120 --> 00:33:39,840
will help

00:33:46,720 --> 00:33:56,640
now we can just hear someone's typing

00:33:52,480 --> 00:33:56,640
and we completely lost christian i think

00:34:00,140 --> 00:34:05,279
[Music]

00:34:03,039 --> 00:34:07,360
okay this is really the downside of us

00:34:05,279 --> 00:34:09,040
being virtual so i'm i'm truly hoping

00:34:07,360 --> 00:34:10,000
that next year we can actually make a

00:34:09,040 --> 00:34:14,480
nice panel

00:34:10,000 --> 00:34:14,480
with members being live

00:34:15,119 --> 00:34:22,879
christian are you back or yeah i

00:34:19,200 --> 00:34:26,639
try to be but i hope am i breaking off

00:34:22,879 --> 00:34:29,359
no not okay so

00:34:26,639 --> 00:34:30,879
we think we always tend to think that we

00:34:29,359 --> 00:34:32,879
used to think that there is inherent

00:34:30,879 --> 00:34:34,480
conflict between security and

00:34:32,879 --> 00:34:36,000
performance and performance has

00:34:34,480 --> 00:34:39,040
traditionally mattered a lot

00:34:36,000 --> 00:34:40,879
on linux and it's good that it matters

00:34:39,040 --> 00:34:42,639
like that there's nothing inherently bad

00:34:40,879 --> 00:34:44,960
about this

00:34:42,639 --> 00:34:48,639
but i think this this false sort of

00:34:44,960 --> 00:34:52,960
conflict has sometimes held us back

00:34:48,639 --> 00:34:52,960
and and there is another aspect

00:34:53,200 --> 00:34:57,040
we need people that can tell us i think

00:34:55,599 --> 00:34:59,200
the difference between

00:34:57,040 --> 00:35:01,839
security theater as some people like to

00:34:59,200 --> 00:35:04,320
refer to it and stuff that actually

00:35:01,839 --> 00:35:05,839
improves the the state of the art of uh

00:35:04,320 --> 00:35:08,160
kernel security

00:35:05,839 --> 00:35:09,920
and i think that is actually a problem

00:35:08,160 --> 00:35:12,880
we don't have a lot of people

00:35:09,920 --> 00:35:13,680
that have that can provide the quality

00:35:12,880 --> 00:35:16,960
of review

00:35:13,680 --> 00:35:18,720
that is needed across the board for new

00:35:16,960 --> 00:35:19,440
kernel features and so on that can tell

00:35:18,720 --> 00:35:20,880
us

00:35:19,440 --> 00:35:23,040
first of all this is introduced

00:35:20,880 --> 00:35:31,839
significant security bug

00:35:23,040 --> 00:35:31,839
just based purely on logic analysis

00:35:42,480 --> 00:35:47,040
i'm afraid christian you're breaking

00:35:44,800 --> 00:35:47,040
again

00:35:48,640 --> 00:35:54,000
it went so well for so long this time

00:35:56,000 --> 00:35:59,839
can you try again or

00:36:04,840 --> 00:36:08,720
[Music]

00:36:06,240 --> 00:36:10,240
it sounds like he is still trying but i

00:36:08,720 --> 00:36:12,079
mean that that's a discussion that i'd

00:36:10,240 --> 00:36:15,040
really like to have because i mean it's

00:36:12,079 --> 00:36:17,520
one thing to talk about

00:36:15,040 --> 00:36:18,560
security theater at the kernel level but

00:36:17,520 --> 00:36:20,560
then

00:36:18,560 --> 00:36:22,480
you know what's important to users as

00:36:20,560 --> 00:36:23,680
well because i mean sometimes we spend

00:36:22,480 --> 00:36:26,240
so much time

00:36:23,680 --> 00:36:28,320
focused on securing the system that we

00:36:26,240 --> 00:36:30,880
lose track of we're still allowing

00:36:28,320 --> 00:36:34,400
things like

00:36:30,880 --> 00:36:35,920
ransomware for example to uh that really

00:36:34,400 --> 00:36:39,599
impacts the user

00:36:35,920 --> 00:36:42,880
um and so it's not necessarily you know

00:36:39,599 --> 00:36:45,119
all the security controls functioned but

00:36:42,880 --> 00:36:47,760
the user still lost their data

00:36:45,119 --> 00:36:49,200
so i think you know while we're having

00:36:47,760 --> 00:36:50,480
that discussion about what's real

00:36:49,200 --> 00:36:53,520
security and what's

00:36:50,480 --> 00:36:54,240
um what's security theater we need to

00:36:53,520 --> 00:36:57,359
focus on

00:36:54,240 --> 00:36:57,359
the goals as well

00:36:58,560 --> 00:37:02,160
yeah i think that's actually a very good

00:37:00,560 --> 00:37:06,160
point and

00:37:02,160 --> 00:37:06,160
christian are you able to continue or

00:37:10,240 --> 00:37:14,320
okay so no but owls are agree actually

00:37:12,960 --> 00:37:16,480
with christian pointed

00:37:14,320 --> 00:37:17,920
we getting more reviews and i think brad

00:37:16,480 --> 00:37:20,480
has uh to some

00:37:17,920 --> 00:37:21,760
degree kind of talked about it today

00:37:20,480 --> 00:37:23,200
saying that you don't have enough

00:37:21,760 --> 00:37:24,880
expertise for example

00:37:23,200 --> 00:37:27,599
like people like jan horn who's

00:37:24,880 --> 00:37:28,000
reviewing patches but not necessarily

00:37:27,599 --> 00:37:29,359
like

00:37:28,000 --> 00:37:31,760
from point of view of just reviewing

00:37:29,359 --> 00:37:34,320
with parties but staying with how

00:37:31,760 --> 00:37:36,320
efficiently special mitigation could be

00:37:34,320 --> 00:37:38,160
against certain employees for example or

00:37:36,320 --> 00:37:40,000
against certain track models

00:37:38,160 --> 00:37:42,320
and it's actually not a trivial task to

00:37:40,000 --> 00:37:44,240
do because it's it's very hard it's like

00:37:42,320 --> 00:37:45,200
very easy when we bring a security patch

00:37:44,240 --> 00:37:47,119
forward

00:37:45,200 --> 00:37:48,320
i mean we can measure its performance

00:37:47,119 --> 00:37:50,560
and it can be horrible

00:37:48,320 --> 00:37:51,359
or not horrible or something in the

00:37:50,560 --> 00:37:53,440
middle

00:37:51,359 --> 00:37:54,560
and but it's something very kind of easy

00:37:53,440 --> 00:37:57,040
to measure

00:37:54,560 --> 00:37:58,640
but how when it comes to security it's

00:37:57,040 --> 00:38:00,320
very hard to measure how efficient a

00:37:58,640 --> 00:38:02,320
certain mitigation on

00:38:00,320 --> 00:38:04,240
or i mean you can say that yes this this

00:38:02,320 --> 00:38:06,160
mitigation stop this particular

00:38:04,240 --> 00:38:07,520
let's say exploit from working on this

00:38:06,160 --> 00:38:08,880
particular technique but

00:38:07,520 --> 00:38:11,200
it might be even if you close the

00:38:08,880 --> 00:38:13,760
technique exploitation technique where

00:38:11,200 --> 00:38:15,200
there's very easy way for a person

00:38:13,760 --> 00:38:18,240
attacking this to just go and try

00:38:15,200 --> 00:38:20,560
something else and it's it's just like

00:38:18,240 --> 00:38:22,480
it's it's might be even not worth the

00:38:20,560 --> 00:38:23,920
amount of effort which has been put into

00:38:22,480 --> 00:38:25,760
it so i think that's actually

00:38:23,920 --> 00:38:27,040
really a big problem so if you could get

00:38:25,760 --> 00:38:29,599
more reviews uh

00:38:27,040 --> 00:38:30,160
from people with exploitation knowledge

00:38:29,599 --> 00:38:31,680
on the

00:38:30,160 --> 00:38:33,520
hardening techniques which being

00:38:31,680 --> 00:38:35,119
proposed and stuff i think

00:38:33,520 --> 00:38:37,839
this would be very valuable i don't know

00:38:35,119 --> 00:38:38,240
if also this is slip pointed christian

00:38:37,839 --> 00:38:40,240
was

00:38:38,240 --> 00:38:42,800
one of his points that he was trying to

00:38:40,240 --> 00:38:47,839
bring but um

00:38:42,800 --> 00:38:47,839
at least this is my part take on it so

00:38:48,800 --> 00:38:54,800
um okay so does anyone

00:38:52,079 --> 00:39:01,839
wants to comment more on this one andy

00:38:54,800 --> 00:39:01,839
maybe you're from the crown side on this

00:39:03,599 --> 00:39:07,440
i don't have anything i don't have any

00:39:06,160 --> 00:39:11,280
amazing

00:39:07,440 --> 00:39:12,240
fixes here um getting people to do code

00:39:11,280 --> 00:39:14,880
review is hard

00:39:12,240 --> 00:39:17,119
it's it's a lot of fun to go and write

00:39:14,880 --> 00:39:19,599
new code and make things work and it's

00:39:17,119 --> 00:39:21,200
not quite as much fun to go sit and read

00:39:19,599 --> 00:39:22,160
code that you had no direct involvement

00:39:21,200 --> 00:39:24,640
in

00:39:22,160 --> 00:39:25,520
and that nobody's paying you to read and

00:39:24,640 --> 00:39:28,160
to say

00:39:25,520 --> 00:39:29,520
let's make this better or let's see if

00:39:28,160 --> 00:39:32,960
it's already great

00:39:29,520 --> 00:39:32,960
so it's a tough thing to recruit for

00:39:33,200 --> 00:39:36,480
so what do you think from a point of

00:39:34,800 --> 00:39:37,599
view of um because you're kind of

00:39:36,480 --> 00:39:39,440
representing the

00:39:37,599 --> 00:39:41,119
criminal community maybe not so like

00:39:39,440 --> 00:39:43,839
security related

00:39:41,119 --> 00:39:45,760
current community so what would make you

00:39:43,839 --> 00:39:46,079
being more interested in reading let's

00:39:45,760 --> 00:39:48,000
say

00:39:46,079 --> 00:39:49,520
new patch series and some security

00:39:48,000 --> 00:39:53,280
hardening feature

00:39:49,520 --> 00:39:55,599
so what should we patch theories

00:39:53,280 --> 00:39:56,880
how help us to kind of how should we

00:39:55,599 --> 00:39:58,960
frame this

00:39:56,880 --> 00:40:00,960
start from very strong case point to

00:39:58,960 --> 00:40:02,720
existing exploit or

00:40:00,960 --> 00:40:06,319
how to make it more appealing let's say

00:40:02,720 --> 00:40:06,319
to colonel mine cleaner

00:40:07,520 --> 00:40:13,119
i i think that's hard i don't have any

00:40:11,280 --> 00:40:14,640
magic fixes i think part of it is just

00:40:13,119 --> 00:40:15,040
recruiting people who find this to be

00:40:14,640 --> 00:40:17,280
fun

00:40:15,040 --> 00:40:19,440
there's there's certainly a community of

00:40:17,280 --> 00:40:22,720
people who have a lot of fun

00:40:19,440 --> 00:40:24,319
breaking things and

00:40:22,720 --> 00:40:26,240
i think the google project zero people

00:40:24,319 --> 00:40:27,760
are an example of this and

00:40:26,240 --> 00:40:29,680
it would be great to try to recruit more

00:40:27,760 --> 00:40:32,960
people

00:40:29,680 --> 00:40:34,800
to see their own role as

00:40:32,960 --> 00:40:36,240
breaking things in the linux kernel and

00:40:34,800 --> 00:40:39,839
maybe even breaking things that haven't

00:40:36,240 --> 00:40:39,839
been merged yet

00:40:40,480 --> 00:40:44,400
but what about back to kind of combined

00:40:42,480 --> 00:40:45,760
and our position i mean maintainers are

00:40:44,400 --> 00:40:47,599
usually very loaded so

00:40:45,760 --> 00:40:49,760
there are like a lot of features being

00:40:47,599 --> 00:40:52,000
developed things like bug fixes and

00:40:49,760 --> 00:40:53,680
stuff everything when we start schedule

00:40:52,000 --> 00:40:55,760
and when there is with people coming

00:40:53,680 --> 00:40:58,160
with some hardening patches or something

00:40:55,760 --> 00:41:00,560
like that which might be like you know

00:40:58,160 --> 00:41:02,000
out of your normal cycle and things like

00:41:00,560 --> 00:41:04,720
people looking so this is what i was

00:41:02,000 --> 00:41:08,000
trying to ask but just how to make

00:41:04,720 --> 00:41:09,920
how to make how how we can kind of frame

00:41:08,000 --> 00:41:12,800
this patches in a way that making it

00:41:09,920 --> 00:41:14,640
easier for mine trainers to look at them

00:41:12,800 --> 00:41:16,319
like finding time to look at the

00:41:14,640 --> 00:41:18,640
security patches because

00:41:16,319 --> 00:41:21,119
in in many cases it's ultimately up to

00:41:18,640 --> 00:41:23,440
miners to take certain changes in

00:41:21,119 --> 00:41:25,280
i mean they might be security changes

00:41:23,440 --> 00:41:26,960
and patches might be proposed but the

00:41:25,280 --> 00:41:28,319
maintainers need to find time to look

00:41:26,960 --> 00:41:30,160
through these patches

00:41:28,319 --> 00:41:32,480
and the security fighters might not be

00:41:30,160 --> 00:41:34,640
like you know these usual ones

00:41:32,480 --> 00:41:35,680
the one thing one thing that's kind of

00:41:34,640 --> 00:41:38,319
specific to

00:41:35,680 --> 00:41:40,000
hardening patches when someone sends a

00:41:38,319 --> 00:41:41,520
patch to enable new hardware or a patch

00:41:40,000 --> 00:41:42,560
to enable a new feature or a patch to

00:41:41,520 --> 00:41:44,160
fix a bug

00:41:42,560 --> 00:41:47,040
it's it's very clear what the patch is

00:41:44,160 --> 00:41:48,240
doing what the benefit is

00:41:47,040 --> 00:41:51,119
why we would want to merge it when

00:41:48,240 --> 00:41:53,599
someone sends a patch to harden

00:41:51,119 --> 00:41:54,880
a little corner of the kernel sometimes

00:41:53,599 --> 00:41:56,480
it's a little hard to see how that fits

00:41:54,880 --> 00:42:00,000
into the big picture

00:41:56,480 --> 00:42:01,440
and the a lot of the patches we see are

00:42:00,000 --> 00:42:02,160
hardening against certain exploit

00:42:01,440 --> 00:42:05,599
techniques

00:42:02,160 --> 00:42:06,720
and i think a lot of the maintainers and

00:42:05,599 --> 00:42:09,440
a lot of people in general

00:42:06,720 --> 00:42:11,760
don't have the clearest understanding of

00:42:09,440 --> 00:42:14,240
when an exploit technique matters

00:42:11,760 --> 00:42:15,520
so as an example right now in the x86

00:42:14,240 --> 00:42:18,240
space we're seeing

00:42:15,520 --> 00:42:21,599
we just saw patches to harden access to

00:42:18,240 --> 00:42:25,520
the cr4 register on x86

00:42:21,599 --> 00:42:27,599
and i as a maintainer don't necessarily

00:42:25,520 --> 00:42:29,359
have the clearest idea of

00:42:27,599 --> 00:42:31,040
what precisely we gain by doing this and

00:42:29,359 --> 00:42:31,920
maybe we gain a lot it maybe we gain a

00:42:31,040 --> 00:42:33,839
little

00:42:31,920 --> 00:42:35,839
it may be that this plus a few other

00:42:33,839 --> 00:42:37,119
things in the radar

00:42:35,839 --> 00:42:38,720
down the road will give us a big

00:42:37,119 --> 00:42:40,720
advantage but sometimes it's hard to see

00:42:38,720 --> 00:42:43,599
what we're actually accomplishing

00:42:40,720 --> 00:42:44,000
and clearer descriptions in the patch

00:42:43,599 --> 00:42:47,200
maybe

00:42:44,000 --> 00:42:48,880
feedback from people who are

00:42:47,200 --> 00:42:50,240
in tune with how exploits are written

00:42:48,880 --> 00:42:52,560
would help with us

00:42:50,240 --> 00:42:54,400
if someone came up and said hey i

00:42:52,560 --> 00:42:55,680
exploited the following bug or would

00:42:54,400 --> 00:42:58,160
have exploited the following bug

00:42:55,680 --> 00:42:59,280
using this tech and this hardening match

00:42:58,160 --> 00:42:59,599
would have made a difference that would

00:42:59,280 --> 00:43:03,440
be

00:42:59,599 --> 00:43:06,000
huge thank you

00:43:03,440 --> 00:43:06,880
or does anyone want to comment in this

00:43:06,000 --> 00:43:10,000
content

00:43:06,880 --> 00:43:12,480
yeah christian yeah i would like to try

00:43:10,000 --> 00:43:16,480
to if you can hear me yeah

00:43:12,480 --> 00:43:17,839
we can hear you wow i called in over the

00:43:16,480 --> 00:43:22,240
phone

00:43:17,839 --> 00:43:23,510
um so uh i think andy is stressing a

00:43:22,240 --> 00:43:25,520
really good point we have

00:43:23,510 --> 00:43:28,079
[Music]

00:43:25,520 --> 00:43:29,920
it's like a lot of times when when i see

00:43:28,079 --> 00:43:31,920
hardening patches come onto the list

00:43:29,920 --> 00:43:34,079
it's like

00:43:31,920 --> 00:43:36,160
and they need to explain their threat

00:43:34,079 --> 00:43:36,480
model and it needs to be clear what is

00:43:36,160 --> 00:43:38,800
the

00:43:36,480 --> 00:43:40,160
the larger benefit for all of the kernel

00:43:38,800 --> 00:43:42,160
is there like really something that

00:43:40,160 --> 00:43:42,480
we're protecting against or oh is this

00:43:42,160 --> 00:43:45,280
just

00:43:42,480 --> 00:43:47,599
yeah as i said before security theater

00:43:45,280 --> 00:43:51,119
and i don't i honestly and

00:43:47,599 --> 00:43:51,520
even in in kernel stuff i'm not always

00:43:51,119 --> 00:43:54,079
sure

00:43:51,520 --> 00:43:56,319
that maintainers or developers of

00:43:54,079 --> 00:43:59,599
features are the best people to actually

00:43:56,319 --> 00:44:00,960
uh to actually just judge this um a lot

00:43:59,599 --> 00:44:04,240
of time it depends on

00:44:00,960 --> 00:44:06,319
me see seeing people that are

00:44:04,240 --> 00:44:08,400
that are have written exploits in in

00:44:06,319 --> 00:44:10,160
this area for example well in this case

00:44:08,400 --> 00:44:12,720
my example is obviously

00:44:10,160 --> 00:44:13,760
young who i always see when when such

00:44:12,720 --> 00:44:15,760
things come up

00:44:13,760 --> 00:44:19,040
so we don't really have a community of

00:44:15,760 --> 00:44:21,440
of uh of people who

00:44:19,040 --> 00:44:22,880
know their way around exploits know

00:44:21,440 --> 00:44:25,520
their way around

00:44:22,880 --> 00:44:27,359
security and security research and and

00:44:25,520 --> 00:44:29,920
that's kind of a

00:44:27,359 --> 00:44:31,760
and that's kind of a problem and and

00:44:29,920 --> 00:44:33,359
that's the point i tried to make before

00:44:31,760 --> 00:44:35,680
in my introductory introductory

00:44:33,359 --> 00:44:37,920
statement is

00:44:35,680 --> 00:44:39,440
in order to push new security features i

00:44:37,920 --> 00:44:40,960
think relevant security features you

00:44:39,440 --> 00:44:42,880
obviously also need to have some

00:44:40,960 --> 00:44:44,160
let's say let's put it like this cloud

00:44:42,880 --> 00:44:46,960
within the community right

00:44:44,160 --> 00:44:48,720
people need to trust you people need to

00:44:46,960 --> 00:44:51,119
kind of recognize who you are

00:44:48,720 --> 00:44:52,880
or that person has taken on

00:44:51,119 --> 00:44:55,359
responsibility in the kernel

00:44:52,880 --> 00:44:57,280
i i know if stuff breaks that person is

00:44:55,359 --> 00:44:58,720
going to be around like i can rely on

00:44:57,280 --> 00:45:01,520
stuff being fixed

00:44:58,720 --> 00:45:03,280
um and so sort of when you have crossed

00:45:01,520 --> 00:45:04,000
that threshold i think then it's much

00:45:03,280 --> 00:45:07,520
easier for

00:45:04,000 --> 00:45:08,960
people to say okay this is something

00:45:07,520 --> 00:45:09,839
which we haven't done in the kernel

00:45:08,960 --> 00:45:12,319
before

00:45:09,839 --> 00:45:13,280
and i can kind of see the benefits but i

00:45:12,319 --> 00:45:15,359
can't really

00:45:13,280 --> 00:45:17,119
i can't really analyze it myself but i

00:45:15,359 --> 00:45:17,520
know that the guy who's pushing this

00:45:17,119 --> 00:45:19,599
like

00:45:17,520 --> 00:45:22,160
or the person who is pushing this story

00:45:19,599 --> 00:45:25,280
uh i i can trust that person

00:45:22,160 --> 00:45:28,480
so i'm fine with uh with with

00:45:25,280 --> 00:45:31,599
pushing this uh feature upstream um

00:45:28,480 --> 00:45:32,319
and that means in the end becoming a

00:45:31,599 --> 00:45:34,240
maintainer

00:45:32,319 --> 00:45:37,040
uh becoming a maintainer in linux and

00:45:34,240 --> 00:45:40,800
that's that's not necessarily a

00:45:37,040 --> 00:45:40,800
job that a lot of people enjoy i think

00:45:43,520 --> 00:45:48,000
christian yeah i think it's actually a

00:45:45,920 --> 00:45:49,920
very good point especially about this

00:45:48,000 --> 00:45:51,920
i think the community for people who are

00:45:49,920 --> 00:45:52,720
experts in exploits i mean the community

00:45:51,920 --> 00:45:54,720
exists but

00:45:52,720 --> 00:45:56,400
the community is not connected to our

00:45:54,720 --> 00:45:58,240
community very much

00:45:56,400 --> 00:45:59,839
and that's a problem and maybe that's

00:45:58,240 --> 00:46:00,720
also i think with something which brad

00:45:59,839 --> 00:46:03,119
has called out

00:46:00,720 --> 00:46:04,880
in a sense that these people they exist

00:46:03,119 --> 00:46:08,079
but the way they are

00:46:04,880 --> 00:46:09,839
they expect it to be his point was that

00:46:08,079 --> 00:46:13,200
we expected to be paid and

00:46:09,839 --> 00:46:15,119
and bear burn some other communities and

00:46:13,200 --> 00:46:17,200
and we're not commenting much and when

00:46:15,119 --> 00:46:20,319
one i mean

00:46:17,200 --> 00:46:22,319
jan is not scaling well for all finance

00:46:20,319 --> 00:46:25,280
that um

00:46:22,319 --> 00:46:27,040
which they might i don't know if this if

00:46:25,280 --> 00:46:29,599
i don't i don't personally know if it's

00:46:27,040 --> 00:46:31,760
fair to say that people

00:46:29,599 --> 00:46:33,040
and i guess that that wasn't there

00:46:31,760 --> 00:46:35,280
wasn't the whole point of

00:46:33,040 --> 00:46:37,040
uh of this discussion but um i don't

00:46:35,280 --> 00:46:37,680
know if it's it's fair to say that these

00:46:37,040 --> 00:46:39,280
people this

00:46:37,680 --> 00:46:41,280
are in it are in it for the money i

00:46:39,280 --> 00:46:43,359
think there are a lot of talented people

00:46:41,280 --> 00:46:45,040
out there who are really interested

00:46:43,359 --> 00:46:47,680
in writing exploits just because they

00:46:45,040 --> 00:46:49,599
enjoy uh breaking things or making

00:46:47,680 --> 00:46:51,520
things behave in a certain way that they

00:46:49,599 --> 00:46:53,520
don't expect them to behave

00:46:51,520 --> 00:46:54,640
and a lot for a lot of them i think it's

00:46:53,520 --> 00:46:57,599
it's more of sort of if

00:46:54,640 --> 00:46:59,359
if there's money in it then that's

00:46:57,599 --> 00:47:00,240
probably fine but i think that's not

00:46:59,359 --> 00:47:02,000
necessarily

00:47:00,240 --> 00:47:03,680
i would think that's not necessarily the

00:47:02,000 --> 00:47:05,119
mindset that these people have the same

00:47:03,680 --> 00:47:08,160
way i don't have the mindset of

00:47:05,119 --> 00:47:08,160
developing new features

00:47:08,560 --> 00:47:12,400
for money but i did it because it's i

00:47:11,040 --> 00:47:16,160
did it because it's fun

00:47:12,400 --> 00:47:18,079
it's much more um it's it's i think this

00:47:16,160 --> 00:47:20,640
goes back to andy's point it's just not

00:47:18,079 --> 00:47:23,680
fun to review other people's code

00:47:20,640 --> 00:47:24,079
per se right i mean you have to sit down

00:47:23,680 --> 00:47:26,000
and then

00:47:24,079 --> 00:47:27,680
like there is a patch serious it doesn't

00:47:26,000 --> 00:47:30,319
matter if it's on on github

00:47:27,680 --> 00:47:31,599
or github or if it's emailing this patch

00:47:30,319 --> 00:47:32,880
then you have to sit down you have to

00:47:31,599 --> 00:47:34,240
look at this code you have to stare at

00:47:32,880 --> 00:47:36,160
it you have to understand what's going

00:47:34,240 --> 00:47:37,599
on you maybe have to apply this patch to

00:47:36,160 --> 00:47:39,359
your tree to see

00:47:37,599 --> 00:47:41,040
the context of the patch and so on and

00:47:39,359 --> 00:47:42,000
then you have to think about all of the

00:47:41,040 --> 00:47:44,319
cases that this

00:47:42,000 --> 00:47:45,760
can break and it's just not that's way

00:47:44,319 --> 00:47:49,200
less fun than sitting down

00:47:45,760 --> 00:47:51,040
and staring into assembly and making

00:47:49,200 --> 00:47:53,200
breaking hardware that's way more fun i

00:47:51,040 --> 00:47:55,359
think that's ultimately the problem

00:47:53,200 --> 00:47:57,680
convincing people that they need to do

00:47:55,359 --> 00:47:57,680
both

00:47:58,640 --> 00:48:07,839
yeah very good point does anyone else

00:48:01,920 --> 00:48:07,839
want to comment

00:48:07,920 --> 00:48:11,760
um we also have um maybe we should also

00:48:10,559 --> 00:48:16,720
get back to our

00:48:11,760 --> 00:48:18,720
own queue oh let's see

00:48:16,720 --> 00:48:22,960
oh does anyone want to bring something

00:48:18,720 --> 00:48:22,960
out of cue from our panel members

00:48:25,119 --> 00:48:32,880
i have a question for me specifically

00:48:30,000 --> 00:48:34,400
so it's about one second it's about

00:48:32,880 --> 00:48:37,440
future of sanitizers

00:48:34,400 --> 00:48:40,880
and road maps or any plants

00:48:37,440 --> 00:48:44,240
that we have and in particular about

00:48:40,880 --> 00:48:48,000
hawasan and rmmt

00:48:44,240 --> 00:48:50,079
so rmt is a hardware technique that

00:48:48,000 --> 00:48:54,240
effectively gives you address symmetizer

00:48:50,079 --> 00:48:56,079
capabilities in cpu at very low cost it

00:48:54,240 --> 00:48:57,599
can protect from use of the free and out

00:48:56,079 --> 00:49:00,260
of bounds box

00:48:57,599 --> 00:49:01,599
and we have very

00:49:00,260 --> 00:49:03,760
[Music]

00:49:01,599 --> 00:49:05,440
large plans for it and i think it will

00:49:03,760 --> 00:49:08,880
change landscape of

00:49:05,440 --> 00:49:12,400
of this memory corruption exploitation

00:49:08,880 --> 00:49:14,240
very significantly because it can be

00:49:12,400 --> 00:49:17,200
simply enabled in production all the

00:49:14,240 --> 00:49:19,200
time and so for arm

00:49:17,200 --> 00:49:21,520
it's already the specification is

00:49:19,200 --> 00:49:24,640
published and i hope we will see

00:49:21,520 --> 00:49:28,160
actual cpus with mte uh

00:49:24,640 --> 00:49:29,839
soon maybe within a year or so

00:49:28,160 --> 00:49:31,280
and we definitely hope that other

00:49:29,839 --> 00:49:33,520
vendors will also

00:49:31,280 --> 00:49:34,960
do something something similar in their

00:49:33,520 --> 00:49:38,640
cpus

00:49:34,960 --> 00:49:41,359
uh following arm uh then the next

00:49:38,640 --> 00:49:43,599
sanitizer that we have in plants is

00:49:41,359 --> 00:49:44,720
it's currently called cave fans or

00:49:43,599 --> 00:49:47,920
previously it was called

00:49:44,720 --> 00:49:48,240
whip asan i did presentation about it on

00:49:47,920 --> 00:49:51,280
the

00:49:48,240 --> 00:49:55,040
last plumbers and it's a tool that

00:49:51,280 --> 00:49:57,119
gives you also uh detection of use of

00:49:55,040 --> 00:50:00,880
the free and out of bounds

00:49:57,119 --> 00:50:02,079
at literally zero cost but with very low

00:50:00,880 --> 00:50:05,359
probability

00:50:02,079 --> 00:50:08,319
so let's say we sample one out of a

00:50:05,359 --> 00:50:10,240
million allocations and detect box only

00:50:08,319 --> 00:50:12,319
on that allocation

00:50:10,240 --> 00:50:13,839
and the idea is that you can deploy this

00:50:12,319 --> 00:50:16,000
to the whole fleet of

00:50:13,839 --> 00:50:17,520
i don't know data center or all of your

00:50:16,000 --> 00:50:20,640
devices or

00:50:17,520 --> 00:50:23,839
all of your iot devices or

00:50:20,640 --> 00:50:24,319
phones uh and then this gives you the

00:50:23,839 --> 00:50:26,800
scale

00:50:24,319 --> 00:50:28,880
uh the the probability back so in the

00:50:26,800 --> 00:50:32,960
whole fleet you can detect

00:50:28,880 --> 00:50:32,960
uh all of the bugs that happen again

00:50:33,359 --> 00:50:39,200
we also have future plans uh for

00:50:36,559 --> 00:50:41,440
trying to do something similar for other

00:50:39,200 --> 00:50:43,839
bug types for example

00:50:41,440 --> 00:50:45,040
probabilistic low rate detection for

00:50:43,839 --> 00:50:49,200
data races or

00:50:45,040 --> 00:50:49,200
for other types of undefined behavior

00:50:49,440 --> 00:50:51,920
that's it

00:50:53,680 --> 00:50:57,680
so i'm i'm very excited control flow

00:50:56,319 --> 00:51:01,599
integrity

00:50:57,680 --> 00:51:04,400
become a widespread thing um

00:51:01,599 --> 00:51:06,079
in the x86 land we have intel cet

00:51:04,400 --> 00:51:09,280
specification

00:51:06,079 --> 00:51:13,119
which may or may not show up in

00:51:09,280 --> 00:51:17,920
computers near us sometime soon and

00:51:13,119 --> 00:51:19,920
cet gives us strong integrity on return

00:51:17,920 --> 00:51:20,960
it gives us very weak control flow

00:51:19,920 --> 00:51:24,559
integrity on

00:51:20,960 --> 00:51:25,119
indirect calls and i would love to see

00:51:24,559 --> 00:51:26,800
some of the

00:51:25,119 --> 00:51:28,880
especially llvm efforts to build

00:51:26,800 --> 00:51:30,720
stronger control flow integrity

00:51:28,880 --> 00:51:34,319
combined with features like cet give us

00:51:30,720 --> 00:51:34,319
something that is overall very strong

00:51:35,119 --> 00:51:39,280
unfortunately i don't think anyone has

00:51:37,520 --> 00:51:40,720
even tried to write patches to make this

00:51:39,280 --> 00:51:42,319
work in the kernel

00:51:40,720 --> 00:51:44,079
and doing so is going to be a mess

00:51:42,319 --> 00:51:51,839
because x86 is a mess

00:51:44,079 --> 00:51:51,839
but someday this will happen

00:51:52,800 --> 00:51:56,880
does anyone want to comment on this

00:51:57,200 --> 00:52:00,240
what's this what's the status i think i

00:51:59,680 --> 00:52:02,079
saw

00:52:00,240 --> 00:52:04,160
case briefly speaking about this but i

00:52:02,079 --> 00:52:05,920
didn't catch all of the

00:52:04,160 --> 00:52:07,920
the whole talk what's the status the

00:52:05,920 --> 00:52:10,640
status of cfi if it's going to be

00:52:07,920 --> 00:52:10,640
upstream soon

00:52:12,079 --> 00:52:16,400
i think he was talking yesterday is that

00:52:14,319 --> 00:52:17,599
the status is project called that later

00:52:16,400 --> 00:52:19,599
on

00:52:17,599 --> 00:52:22,400
on their android side also didn't catch

00:52:19,599 --> 00:52:22,950
all the details and

00:52:22,400 --> 00:52:26,240
on the

00:52:22,950 --> 00:52:28,559
[Music]

00:52:26,240 --> 00:52:29,760
so as far as i know cfa is deployed in

00:52:28,559 --> 00:52:32,960
android for

00:52:29,760 --> 00:52:34,640
some time now and for

00:52:32,960 --> 00:52:36,640
now it's in the process of being

00:52:34,640 --> 00:52:38,800
upstreamed and integrated which is a

00:52:36,640 --> 00:52:41,920
long process and

00:52:38,800 --> 00:52:45,599
it takes lots of fixing uh and

00:52:41,920 --> 00:52:49,359
also doing uh link time of

00:52:45,599 --> 00:52:50,559
full length time optimizations full

00:52:49,359 --> 00:52:54,960
kernel build as

00:52:50,559 --> 00:52:58,160
a prerequisite so it should happen

00:52:54,960 --> 00:53:00,400
reasonably soon it's in progress

00:52:58,160 --> 00:53:01,280
and i agree it's it's a very very high

00:53:00,400 --> 00:53:04,160
backed

00:53:01,280 --> 00:53:04,160
technique as well

00:53:05,920 --> 00:53:09,440
i think we have one more question i

00:53:07,520 --> 00:53:10,079
don't know if we've answered this does

00:53:09,440 --> 00:53:12,960
having an

00:53:10,079 --> 00:53:14,640
lk dtm test accompany a new hardening

00:53:12,960 --> 00:53:18,559
patch help in this regard

00:53:14,640 --> 00:53:21,920
reviewing acceptance i

00:53:18,559 --> 00:53:24,400
i think just having it having a test

00:53:21,920 --> 00:53:27,040
with every feature is kind of really

00:53:24,400 --> 00:53:27,040
what we want

00:53:27,359 --> 00:53:31,359
it helps with it helps with any feature

00:53:29,280 --> 00:53:32,240
like if if i have a test that i can run

00:53:31,359 --> 00:53:34,400
or this i can

00:53:32,240 --> 00:53:35,359
verify a new feature that i see being

00:53:34,400 --> 00:53:38,240
upstream that's

00:53:35,359 --> 00:53:39,839
obviously pretty great and that's by the

00:53:38,240 --> 00:53:43,040
way i think to some extent also

00:53:39,839 --> 00:53:44,640
kind of a

00:53:43,040 --> 00:53:46,559
i guess it's the way how you have been

00:53:44,640 --> 00:53:47,680
socialized with writing with writing

00:53:46,559 --> 00:53:51,040
patches but

00:53:47,680 --> 00:53:52,960
i see um especially from

00:53:51,040 --> 00:53:54,559
from from my generation or younger

00:53:52,960 --> 00:53:56,000
generations people pushing patches

00:53:54,559 --> 00:53:58,480
upstream and they usually have

00:53:56,000 --> 00:54:00,160
tests they know that case self-testing

00:53:58,480 --> 00:54:02,559
says that

00:54:00,160 --> 00:54:03,200
linux kernel has some some test suites

00:54:02,559 --> 00:54:05,680
and so they

00:54:03,200 --> 00:54:06,480
they usually send a patch a test a lot

00:54:05,680 --> 00:54:08,400
and that's

00:54:06,480 --> 00:54:10,000
extremely helpful because it gives you

00:54:08,400 --> 00:54:12,400
the confidence that the person not

00:54:10,000 --> 00:54:14,319
just compile tested the change that they

00:54:12,400 --> 00:54:16,000
did but also

00:54:14,319 --> 00:54:18,800
that they've actually written the test

00:54:16,000 --> 00:54:21,520
and verified that their change works

00:54:18,800 --> 00:54:23,200
so i think in in general this test just

00:54:21,520 --> 00:54:26,400
gives a lot more credibility to

00:54:23,200 --> 00:54:26,400
you than the patch series

00:54:34,960 --> 00:54:39,839
okay does anyone want to still comment

00:54:37,839 --> 00:54:41,040
or let's see what do you have i'll send

00:54:39,839 --> 00:54:50,389
you

00:54:41,040 --> 00:54:50,389
[Music]

00:54:50,839 --> 00:54:54,799
um wonder now that we have

00:54:53,200 --> 00:54:57,760
i have a question i wonder now that we

00:54:54,799 --> 00:55:01,599
have for example kc sound which is the

00:54:57,760 --> 00:55:06,240
newest uh uh feature that we

00:55:01,599 --> 00:55:09,040
related to i guess just caller um

00:55:06,240 --> 00:55:10,000
if if uh if this is going if this is

00:55:09,040 --> 00:55:11,359
going to be hard

00:55:10,000 --> 00:55:13,680
like this is going to have a lot of

00:55:11,359 --> 00:55:16,240
impact um

00:55:13,680 --> 00:55:17,839
in the kernel because i hear that

00:55:16,240 --> 00:55:21,440
there's like a lot of bugs that

00:55:17,839 --> 00:55:23,520
are sitting in a queue

00:55:21,440 --> 00:55:25,280
yes there are lots of bugs and the story

00:55:23,520 --> 00:55:28,240
with casey sun is very

00:55:25,280 --> 00:55:29,440
difficult uh so it's fine data races and

00:55:28,240 --> 00:55:31,839
the problem is that

00:55:29,440 --> 00:55:34,240
kernel has lots and lots of what's

00:55:31,839 --> 00:55:37,200
called benign data races

00:55:34,240 --> 00:55:38,480
and i take it in quotes because from the

00:55:37,200 --> 00:55:40,880
point of view of the c

00:55:38,480 --> 00:55:42,000
standard which is the language the

00:55:40,880 --> 00:55:44,799
kernel is written as

00:55:42,000 --> 00:55:46,400
any data races undefined behavior so

00:55:44,799 --> 00:55:50,000
it's very bad bug like

00:55:46,400 --> 00:55:51,599
use of the free but in the kernel

00:55:50,000 --> 00:55:54,559
they're considered benign

00:55:51,599 --> 00:55:56,400
and so far there is no agreement on

00:55:54,559 --> 00:55:58,400
removing all of them

00:55:56,400 --> 00:56:00,000
so what happens with casey sun it just

00:55:58,400 --> 00:56:02,319
traps on all of those

00:56:00,000 --> 00:56:03,680
well kind of intentional data races that

00:56:02,319 --> 00:56:07,040
are not really considered as

00:56:03,680 --> 00:56:10,319
bugs by developers

00:56:07,040 --> 00:56:11,200
and we have lots of those currently in

00:56:10,319 --> 00:56:13,680
the queue

00:56:11,200 --> 00:56:16,000
and it's very hard to find actual

00:56:13,680 --> 00:56:18,799
harmful bugs

00:56:16,000 --> 00:56:20,880
there and it's unclear also how can we

00:56:18,799 --> 00:56:21,200
deploy this on c sport because this bot

00:56:20,880 --> 00:56:24,640
is

00:56:21,200 --> 00:56:27,040
is it has a damage automated reporting

00:56:24,640 --> 00:56:28,240
and if we will just start reporting all

00:56:27,040 --> 00:56:31,040
of those

00:56:28,240 --> 00:56:32,240
then like i think it will not be

00:56:31,040 --> 00:56:35,839
accepted well

00:56:32,240 --> 00:56:38,000
by majority of developers

00:56:35,839 --> 00:56:39,040
and there's no way to filter only the

00:56:38,000 --> 00:56:41,680
harmful ones

00:56:39,040 --> 00:56:44,400
and also fixing them throughout the

00:56:41,680 --> 00:56:47,599
kernel is lots of work especially

00:56:44,400 --> 00:56:48,240
um while there is no kind of green light

00:56:47,599 --> 00:56:51,920
for for

00:56:48,240 --> 00:56:53,280
eliminating all of those uh because it

00:56:51,920 --> 00:56:55,359
currently it really depends on the

00:56:53,280 --> 00:56:59,599
system some subsystems are

00:56:55,359 --> 00:57:01,520
much more welcome fixes for races

00:56:59,599 --> 00:57:03,119
and want to fix all of them and some

00:57:01,520 --> 00:57:05,839
subsystem like you

00:57:03,119 --> 00:57:06,880
then have lengthy discussion with the

00:57:05,839 --> 00:57:08,799
maintainer

00:57:06,880 --> 00:57:12,160
about the data races and they don't

00:57:08,799 --> 00:57:15,200
agree to take any fixes

00:57:12,160 --> 00:57:18,880
but on the other hand uh we know from

00:57:15,200 --> 00:57:21,440
from address syndicate that actually

00:57:18,880 --> 00:57:23,200
lots of the bugs lots of this use of the

00:57:21,440 --> 00:57:25,440
freeze and even out of bounds they

00:57:23,200 --> 00:57:27,680
caused by data races

00:57:25,440 --> 00:57:28,960
we see that that because say free

00:57:27,680 --> 00:57:31,760
happened in one task

00:57:28,960 --> 00:57:32,640
and access happened in the other task or

00:57:31,760 --> 00:57:35,200
we see that

00:57:32,640 --> 00:57:36,319
it's not reproducible well or we see

00:57:35,200 --> 00:57:40,400
that

00:57:36,319 --> 00:57:42,079
it manifests differently so most likely

00:57:40,400 --> 00:57:44,799
it's a data race i would actually

00:57:42,079 --> 00:57:46,400
go as far as saying that data races are

00:57:44,799 --> 00:57:50,160
the major source of box

00:57:46,400 --> 00:57:51,920
in the kernel so in the end to like

00:57:50,160 --> 00:57:56,079
casey sound would be super

00:57:51,920 --> 00:57:59,200
super uh useful but currently we can't

00:57:56,079 --> 00:57:59,200
take advantage of it

00:58:00,880 --> 00:58:04,799
so we would need to to figure out what

00:58:03,040 --> 00:58:06,319
to do with benign races and

00:58:04,799 --> 00:58:08,319
like if you're asking me i would say

00:58:06,319 --> 00:58:11,119
that we need to

00:58:08,319 --> 00:58:12,400
well fix all of the benign races just

00:58:11,119 --> 00:58:15,520
because

00:58:12,400 --> 00:58:17,440
that will allow us to use the tool so

00:58:15,520 --> 00:58:20,559
regardless

00:58:17,440 --> 00:58:23,760
regardless of the standards and like

00:58:20,559 --> 00:58:26,000
if they can really be harmful or not

00:58:23,760 --> 00:58:26,960
uh we can just forgot that and fix those

00:58:26,000 --> 00:58:29,359
just for the two

00:58:26,960 --> 00:58:29,359
itself

00:58:32,799 --> 00:58:36,319
so there is no what you're saying if

00:58:34,160 --> 00:58:39,839
there is currently no consensus on what

00:58:36,319 --> 00:58:39,839
to do with benign data races

00:58:48,839 --> 00:58:54,720
yes

00:58:51,040 --> 00:58:56,720
okay let's see i think we have mostly

00:58:54,720 --> 00:58:59,119
answers to questions

00:58:56,720 --> 00:59:00,400
uh where is one question about like what

00:58:59,119 --> 00:59:02,240
do we

00:59:00,400 --> 00:59:03,520
people think about current security

00:59:02,240 --> 00:59:05,440
black bounty so

00:59:03,520 --> 00:59:07,599
paying researchers for proof of concept

00:59:05,440 --> 00:59:09,280
exploits so we have discussed that there

00:59:07,599 --> 00:59:11,599
is like um

00:59:09,280 --> 00:59:13,280
there's lack of interest or maybe like

00:59:11,599 --> 00:59:15,680
not enough participation from

00:59:13,280 --> 00:59:17,520
exploit writers but i don't know how can

00:59:15,680 --> 00:59:18,400
we possibly answer this question because

00:59:17,520 --> 00:59:20,319
this

00:59:18,400 --> 00:59:22,319
so it's i guess it's a proposal to run a

00:59:20,319 --> 00:59:23,119
security bug bounty and linux kernel

00:59:22,319 --> 00:59:26,720
itself but

00:59:23,119 --> 00:59:27,040
um i i think the financial aspect of

00:59:26,720 --> 00:59:30,400
this

00:59:27,040 --> 00:59:32,480
is something i don't know i don't even

00:59:30,400 --> 00:59:34,079
understand how this would be run

00:59:32,480 --> 00:59:36,720
i don't know does anyone want to comment

00:59:34,079 --> 00:59:36,720
on this one

00:59:37,280 --> 00:59:41,440
i think it again conflicts somewhat with

00:59:39,920 --> 00:59:44,640
the number of bugs

00:59:41,440 --> 00:59:46,640
so usually those programs run for

00:59:44,640 --> 00:59:48,480
projects that already do

00:59:46,640 --> 00:59:50,319
you know their best for testing for

00:59:48,480 --> 00:59:51,760
fuzzing and then there may be a few

00:59:50,319 --> 00:59:54,400
security bugs and

00:59:51,760 --> 00:59:56,240
it's reasonable to pay for those and

00:59:54,400 --> 00:59:58,079
it's also harder to find but today say

00:59:56,240 --> 01:00:00,079
if somebody takes hundreds of views of

00:59:58,079 --> 01:00:03,920
the freeze from sisbo dashboard

01:00:00,079 --> 01:00:07,599
and copy paste them into the backbone

01:00:03,920 --> 01:00:11,119
submission form like and what if

01:00:07,599 --> 01:00:11,119
hundreds of people do the same

01:00:11,200 --> 01:00:15,280
here the idea would be not just with

01:00:13,599 --> 01:00:17,760
bugs but you would actually write

01:00:15,280 --> 01:00:19,599
proof of concept explode and you would

01:00:17,760 --> 01:00:20,720
probably maybe i mean it doesn't have to

01:00:19,599 --> 01:00:22,640
be stupidly like

01:00:20,720 --> 01:00:24,720
anything accepted you can kind of have

01:00:22,640 --> 01:00:26,319
to show that the technique is new enough

01:00:24,720 --> 01:00:28,240
and then something like

01:00:26,319 --> 01:00:29,920
you can try to make it more clever but i

01:00:28,240 --> 01:00:32,480
still kind of don't know how far we can

01:00:29,920 --> 01:00:32,480
go with this

01:00:36,319 --> 01:00:39,760
yes so as i know lots of bouncy programs

01:00:39,119 --> 01:00:42,960
say

01:00:39,760 --> 01:00:43,680
for rome they don't require proof of

01:00:42,960 --> 01:00:45,760
concept

01:00:43,680 --> 01:00:47,680
so you can get more money if you if you

01:00:45,760 --> 01:00:48,880
create full system exploit and actually

01:00:47,680 --> 01:00:51,440
prove but

01:00:48,880 --> 01:00:51,920
they usually pay for just use of the

01:00:51,440 --> 01:00:54,880
free

01:00:51,920 --> 01:00:56,079
because like it's it's too expensive to

01:00:54,880 --> 01:00:58,240
create full exploit

01:00:56,079 --> 01:00:58,240
and

01:01:03,280 --> 01:01:08,079
okay anyone else wants to comment

01:01:06,160 --> 01:01:09,760
actually i don't know how we're doing in

01:01:08,079 --> 01:01:12,960
time because

01:01:09,760 --> 01:01:15,440
it shows one hour didn't we have just

01:01:12,960 --> 01:01:15,440
one hour

01:01:16,480 --> 01:01:22,880
oh when is this supposed to end

01:01:25,720 --> 01:01:31,839
[Music]

01:01:27,920 --> 01:01:35,440
i think i would just bring one point um

01:01:31,839 --> 01:01:35,440
where we had been i think the christian

01:01:37,359 --> 01:01:41,680
christian brought this that that it's

01:01:39,599 --> 01:01:43,520
not easy to do review it's not fun to

01:01:41,680 --> 01:01:44,960
review or dispatches which i agree very

01:01:43,520 --> 01:01:47,440
much so i think one of the things

01:01:44,960 --> 01:01:49,440
probably everybody can help with is like

01:01:47,440 --> 01:01:50,240
it's not easy to review actually but

01:01:49,440 --> 01:01:52,319
it's probably

01:01:50,240 --> 01:01:54,720
easy to just take the patches and test

01:01:52,319 --> 01:01:56,640
them and ensure that even if somebody

01:01:54,720 --> 01:01:58,960
else has posted the patches

01:01:56,640 --> 01:02:00,559
for for a particular architecture they

01:01:58,960 --> 01:02:02,319
can test and then make sure that it

01:02:00,559 --> 01:02:04,880
doesn't break their architecture and

01:02:02,319 --> 01:02:07,280
share their tested by

01:02:04,880 --> 01:02:08,079
because that seems to be easier than

01:02:07,280 --> 01:02:09,839
actually

01:02:08,079 --> 01:02:11,680
doing the review but then it also

01:02:09,839 --> 01:02:14,160
ensures that there was somebody else had

01:02:11,680 --> 01:02:16,160
also tested on different architecture

01:02:14,160 --> 01:02:17,200
and one change did it impact something

01:02:16,160 --> 01:02:19,520
else or

01:02:17,200 --> 01:02:20,960
a new bugs are not actually god because

01:02:19,520 --> 01:02:22,960
of death so

01:02:20,960 --> 01:02:24,880
probably people can actually contribute

01:02:22,960 --> 01:02:26,559
by doing more of testing the patches

01:02:24,880 --> 01:02:28,720
before even they are upstreamed or

01:02:26,559 --> 01:02:30,480
accepted

01:02:28,720 --> 01:02:32,319
yeah thank you known i think this is

01:02:30,480 --> 01:02:35,760
actually a good point and i think case

01:02:32,319 --> 01:02:37,680
is also usually on kcp listings he's

01:02:35,760 --> 01:02:39,760
looking always for volunteers to test in

01:02:37,680 --> 01:02:41,920
different architectures so that's really

01:02:39,760 --> 01:02:43,920
a concert point but i think we have a

01:02:41,920 --> 01:02:45,920
just time now so i would like to thank

01:02:43,920 --> 01:02:47,119
all the panel members for an interesting

01:02:45,920 --> 01:02:49,839
discussion and being

01:02:47,119 --> 01:02:50,160
fast today and also for people who have

01:02:49,839 --> 01:02:53,039
asked

01:02:50,160 --> 01:02:53,839
questions and i'm gonna hand it over to

01:02:53,039 --> 01:02:57,839
james

01:02:53,839 --> 01:03:00,799
to a foreclosure remark thanks elena

01:02:57,839 --> 01:03:00,799
uh can you hear me

01:03:01,520 --> 01:03:05,760
yes okay getting some thumbs up okay

01:03:04,319 --> 01:03:06,480
thanks that was a really great

01:03:05,760 --> 01:03:09,359
discussion

01:03:06,480 --> 01:03:10,319
uh uh to close out there with and you

01:03:09,359 --> 01:03:12,640
know i'd really like to

01:03:10,319 --> 01:03:13,520
thank uh everyone all of the attendees

01:03:12,640 --> 01:03:15,680
who are

01:03:13,520 --> 01:03:16,720
uh online now uh we've had really good

01:03:15,680 --> 01:03:18,480
attendance we

01:03:16,720 --> 01:03:20,000
during brad's discussion this morning we

01:03:18,480 --> 01:03:22,960
had over 300

01:03:20,000 --> 01:03:23,839
uh and you know we've maintained well

01:03:22,960 --> 01:03:25,200
over 100

01:03:23,839 --> 01:03:27,760
throughout the uh throughout the

01:03:25,200 --> 01:03:28,559
conference um i'd like so you know

01:03:27,760 --> 01:03:30,960
people out there

01:03:28,559 --> 01:03:32,400
watching uh later as well thanks for for

01:03:30,960 --> 01:03:35,760
checking this out

01:03:32,400 --> 01:03:37,599
um uh the speakers who put in proposals

01:03:35,760 --> 01:03:39,440
and went through all the processes for

01:03:37,599 --> 01:03:41,680
uh and the uncertainties thank you for

01:03:39,440 --> 01:03:43,599
that uh a special thank you to all the

01:03:41,680 --> 01:03:45,520
panelists who joined this is something

01:03:43,599 --> 01:03:46,559
we arranged the last minute and thought

01:03:45,520 --> 01:03:48,240
would be good

01:03:46,559 --> 01:03:50,079
uh to try and make this a more

01:03:48,240 --> 01:03:51,920
collaborative and more of a conference

01:03:50,079 --> 01:03:53,200
uh feel for something that is a virtual

01:03:51,920 --> 01:03:54,640
event i

01:03:53,200 --> 01:03:56,799
think great thank you to elena who i

01:03:54,640 --> 01:03:58,960
think has done an excellent job uh

01:03:56,799 --> 01:04:00,720
shaping a really productive discussion

01:03:58,960 --> 01:04:03,200
and we have a lot of the

01:04:00,720 --> 01:04:03,920
uh really core people who really

01:04:03,200 --> 01:04:05,599
understand

01:04:03,920 --> 01:04:08,000
linux security and who work in that

01:04:05,599 --> 01:04:11,039
every day participating we've had a

01:04:08,000 --> 01:04:12,799
diversity of uh input from from

01:04:11,039 --> 01:04:15,119
people slightly outside that group too

01:04:12,799 --> 01:04:16,720
which i think is really important

01:04:15,119 --> 01:04:18,319
um and i think you know there was some

01:04:16,720 --> 01:04:19,280
discussion at one point whether we were

01:04:18,319 --> 01:04:22,160
going to have this

01:04:19,280 --> 01:04:23,280
uh conference at all this year due to uh

01:04:22,160 --> 01:04:25,280
covert and i think

01:04:23,280 --> 01:04:26,480
that it's been important that people

01:04:25,280 --> 01:04:27,760
have been able to

01:04:26,480 --> 01:04:29,440
present the work that they've been

01:04:27,760 --> 01:04:30,319
working on and get that out to the

01:04:29,440 --> 01:04:31,839
community

01:04:30,319 --> 01:04:34,480
uh for people to be able to ask

01:04:31,839 --> 01:04:37,440
questions and to have these discussions

01:04:34,480 --> 01:04:38,000
uh so it's not uh optimal it's not as uh

01:04:37,440 --> 01:04:40,720
good as

01:04:38,000 --> 01:04:42,079
uh in person for many reasons but it

01:04:40,720 --> 01:04:44,640
also i think perhaps has

01:04:42,079 --> 01:04:45,760
allowed others to participate this year

01:04:44,640 --> 01:04:47,920
who may not have

01:04:45,760 --> 01:04:49,359
been able to in the past so this is

01:04:47,920 --> 01:04:52,480
something regardless

01:04:49,359 --> 01:04:56,400
of covert status next year we'll look at

01:04:52,480 --> 01:04:58,400
possible online participation um

01:04:56,400 --> 01:05:00,319
and you know think about if that

01:04:58,400 --> 01:05:02,240
continues to make sense

01:05:00,319 --> 01:05:03,680
uh and i think also you know we have to

01:05:02,240 --> 01:05:05,760
be able to adapt to

01:05:03,680 --> 01:05:07,200
uh the world changing that is us the you

01:05:05,760 --> 01:05:09,359
know the linux

01:05:07,200 --> 01:05:10,799
community and the security communities

01:05:09,359 --> 01:05:12,640
um

01:05:10,799 --> 01:05:14,960
and in fact you know now it's possibly

01:05:12,640 --> 01:05:16,799
even more important uh to be focused on

01:05:14,960 --> 01:05:19,039
security defenses given

01:05:16,799 --> 01:05:20,640
uh the amount of critical uh functioning

01:05:19,039 --> 01:05:23,520
that has been going online

01:05:20,640 --> 01:05:24,880
uh through through covert uh certainly

01:05:23,520 --> 01:05:28,319
you know we're seeing reports

01:05:24,880 --> 01:05:30,960
of uh attackers targeting companies and

01:05:28,319 --> 01:05:31,440
and organizations and people that are

01:05:30,960 --> 01:05:35,839
are now

01:05:31,440 --> 01:05:37,920
moving to much more uh online work

01:05:35,839 --> 01:05:39,359
just to also mention that linux security

01:05:37,920 --> 01:05:42,720
summit uh europe

01:05:39,359 --> 01:05:44,960
will be happening uh the cfp is open

01:05:42,720 --> 01:05:45,839
uh until the end of july and i certainly

01:05:44,960 --> 01:05:48,880
encourage

01:05:45,839 --> 01:05:51,039
people to uh still submit talks to that

01:05:48,880 --> 01:05:52,000
uh alina will be uh running that

01:05:51,039 --> 01:05:54,480
conference as

01:05:52,000 --> 01:05:56,559
she has for the past couple of years i'd

01:05:54,480 --> 01:05:58,799
like to thank linux foundation who were

01:05:56,559 --> 01:06:01,760
able to bring all of us together online

01:05:58,799 --> 01:06:03,280
uh especially uh jillian hall who really

01:06:01,760 --> 01:06:05,359
uh takes the lead for us

01:06:03,280 --> 01:06:07,359
on the uh linux security summit and

01:06:05,359 --> 01:06:08,160
angela brown of course who uh heads up

01:06:07,359 --> 01:06:11,200
all of this

01:06:08,160 --> 01:06:13,039
and trisha and all of the others uh at

01:06:11,200 --> 01:06:14,640
linux foundation and the engineers we've

01:06:13,039 --> 01:06:18,240
had working on this

01:06:14,640 --> 01:06:21,599
uh today so uh with that i guess

01:06:18,240 --> 01:06:23,039
uh you'll be able to review these videos

01:06:21,599 --> 01:06:26,559
and slides online

01:06:23,039 --> 01:06:29,039
uh shortly after the event okay uh

01:06:26,559 --> 01:06:33,839
thanks to everyone and i hope to see you

01:06:29,039 --> 01:06:33,839

YouTube URL: https://www.youtube.com/watch?v=VXEMbF4oZoQ


