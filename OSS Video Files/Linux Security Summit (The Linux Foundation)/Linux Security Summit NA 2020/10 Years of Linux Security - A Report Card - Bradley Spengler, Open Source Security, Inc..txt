Title: 10 Years of Linux Security - A Report Card - Bradley Spengler, Open Source Security, Inc.
Publication date: 2020-09-08
Playlist: Linux Security Summit NA 2020
Description: 
	10 Years of Linux Security - A Report Card - Bradley Spengler, Open Source Security, Inc.
Captions: 
	00:00:04,880 --> 00:00:07,440
good morning everyone

00:00:05,920 --> 00:00:10,160
or afternoon depending on where you're

00:00:07,440 --> 00:00:11,679
located my name is brad spengler

00:00:10,160 --> 00:00:14,160
i've been involved in linux kernel

00:00:11,679 --> 00:00:15,679
security for close to 20 years

00:00:14,160 --> 00:00:17,840
i'm the president of open source

00:00:15,679 --> 00:00:19,039
security inc and the developer of gr

00:00:17,840 --> 00:00:20,720
security

00:00:19,039 --> 00:00:23,119
i'd like to start off by thanking james

00:00:20,720 --> 00:00:24,640
morris and the rest of the cfp team

00:00:23,119 --> 00:00:27,359
for the opportunity to speak to you all

00:00:24,640 --> 00:00:31,840
today i'll be giving a talk entitled 10

00:00:27,359 --> 00:00:31,840
years of linux security

00:00:35,280 --> 00:00:39,520
so obviously discussing 10 years of

00:00:37,360 --> 00:00:41,920
linux security is a huge topic

00:00:39,520 --> 00:00:44,480
that could easily take 3 hours or longer

00:00:41,920 --> 00:00:45,920
but i only have about 45 minutes

00:00:44,480 --> 00:00:48,559
so what i've done to get a little more

00:00:45,920 --> 00:00:50,160
content in is pre-record this talk

00:00:48,559 --> 00:00:52,239
both to give 10 more minutes that would

00:00:50,160 --> 00:00:54,000
normally be reserved for q a

00:00:52,239 --> 00:00:55,440
but also to allow more interaction

00:00:54,000 --> 00:00:57,199
during the talk

00:00:55,440 --> 00:00:58,960
feel free to ask any questions in the

00:00:57,199 --> 00:01:01,359
chat during the talk itself

00:00:58,960 --> 00:01:03,199
i'm there live and can hopefully answer

00:01:01,359 --> 00:01:05,760
anything that comes up

00:01:03,199 --> 00:01:07,520
if the system allows me i can also share

00:01:05,760 --> 00:01:10,320
some additional source links there for

00:01:07,520 --> 00:01:10,320
more information

00:01:11,119 --> 00:01:14,880
as an outline for what i'll be

00:01:12,400 --> 00:01:16,799
discussing today first i'll quickly run

00:01:14,880 --> 00:01:17,759
through some of the key changes relevant

00:01:16,799 --> 00:01:20,320
to security

00:01:17,759 --> 00:01:21,840
over the past 10 years then i'll dive

00:01:20,320 --> 00:01:22,880
more deeply into three larger

00:01:21,840 --> 00:01:24,960
developments

00:01:22,880 --> 00:01:27,600
that have had an outsize impact on linux

00:01:24,960 --> 00:01:29,280
security over the same time period

00:01:27,600 --> 00:01:31,040
then i'll discuss some current

00:01:29,280 --> 00:01:32,560
exploitation trends and what's on the

00:01:31,040 --> 00:01:34,240
horizon there

00:01:32,560 --> 00:01:36,640
and finally i'll conclude with some

00:01:34,240 --> 00:01:38,000
recommendations for improving the linux

00:01:36,640 --> 00:01:39,920
kernel security

00:01:38,000 --> 00:01:42,720
and some of the processes involved with

00:01:39,920 --> 00:01:42,720
that security

00:01:42,960 --> 00:01:46,799
so as a disclaimer this talk is about

00:01:45,040 --> 00:01:49,040
linux security as a whole

00:01:46,799 --> 00:01:51,680
so it's not uh concerning the security

00:01:49,040 --> 00:01:55,040
subsystem comprised of se linux app

00:01:51,680 --> 00:01:57,520
armor etc also there are some

00:01:55,040 --> 00:01:59,200
known and fixed bugs that are mentioned

00:01:57,520 --> 00:02:01,119
in this presentation

00:01:59,200 --> 00:02:02,640
and the intent here isn't to harp on

00:02:01,119 --> 00:02:04,719
individual bugs

00:02:02,640 --> 00:02:05,680
and the names of the people involved in

00:02:04,719 --> 00:02:07,600
the

00:02:05,680 --> 00:02:08,879
patches that introduce the bugs aren't

00:02:07,600 --> 00:02:10,160
being mentioned

00:02:08,879 --> 00:02:12,239
the point of me mentioning some

00:02:10,160 --> 00:02:13,200
individual bugs is as an example for

00:02:12,239 --> 00:02:16,480
larger process

00:02:13,200 --> 00:02:16,959
issues my perspective in writing this

00:02:16,480 --> 00:02:19,360
talk

00:02:16,959 --> 00:02:21,120
comes from working outside the upstream

00:02:19,360 --> 00:02:23,120
development processes

00:02:21,120 --> 00:02:24,480
looking at areas no one else is looking

00:02:23,120 --> 00:02:26,080
at

00:02:24,480 --> 00:02:27,920
and finding ways in which we can do

00:02:26,080 --> 00:02:29,520
better so

00:02:27,920 --> 00:02:31,040
i don't necessarily come at the problems

00:02:29,520 --> 00:02:32,080
with the same level of insider

00:02:31,040 --> 00:02:34,480
information

00:02:32,080 --> 00:02:37,200
but i do provide my perspective and the

00:02:34,480 --> 00:02:38,879
information i've collected sincerely

00:02:37,200 --> 00:02:41,280
so with that out of the way let's get

00:02:38,879 --> 00:02:41,280
started

00:02:45,519 --> 00:02:49,200
as i'm pressed for time i'm going to

00:02:47,760 --> 00:02:52,480
move very quickly through the

00:02:49,200 --> 00:02:54,879
timeline the slides here will be

00:02:52,480 --> 00:02:56,959
published online so all the information

00:02:54,879 --> 00:03:00,159
will still be here for reference

00:02:56,959 --> 00:03:01,680
the timeline that i'll be providing

00:03:00,159 --> 00:03:04,000
isn't exhaustive

00:03:01,680 --> 00:03:05,519
and focuses mainly on changes that rose

00:03:04,000 --> 00:03:07,920
to the level of being

00:03:05,519 --> 00:03:09,280
mentioned on kernel newbies.org it

00:03:07,920 --> 00:03:11,280
doesn't cover changes that aren't

00:03:09,280 --> 00:03:12,879
specifically security related

00:03:11,280 --> 00:03:15,040
but still can result in a security

00:03:12,879 --> 00:03:17,360
benefit like for instance

00:03:15,040 --> 00:03:19,040
welcome increase in k unit and self-test

00:03:17,360 --> 00:03:22,239
being submitted

00:03:19,040 --> 00:03:26,000
recently in the past few years

00:03:22,239 --> 00:03:28,720
the timeline is also x86 specific

00:03:26,000 --> 00:03:29,599
it's not that no non-x86 work is being

00:03:28,720 --> 00:03:32,239
done

00:03:29,599 --> 00:03:33,840
in fact the powerpc and 64 maintainers

00:03:32,239 --> 00:03:35,519
are landing significant security

00:03:33,840 --> 00:03:39,040
functionality recently

00:03:35,519 --> 00:03:39,040
and i'll talk more about that later

00:03:43,760 --> 00:03:47,200
so ten years ago at the first linux

00:03:46,159 --> 00:03:50,239
security summit

00:03:47,200 --> 00:03:52,080
in boston i gave a talk entitled linux

00:03:50,239 --> 00:03:53,599
security in 10 years

00:03:52,080 --> 00:03:56,080
around the time of a lot of kernel

00:03:53,599 --> 00:03:58,000
exploits being published against linux

00:03:56,080 --> 00:04:00,159
many of them written by me with

00:03:58,000 --> 00:04:02,799
techniques still in use today

00:04:00,159 --> 00:04:05,760
uh for instance the commit cred's print

00:04:02,799 --> 00:04:07,360
prepare kernel cred technique that's now

00:04:05,760 --> 00:04:09,439
covered in some books on kernel

00:04:07,360 --> 00:04:11,439
exploitation

00:04:09,439 --> 00:04:12,959
i gave some suggestions at the time

00:04:11,439 --> 00:04:14,959
based on things we had already done in

00:04:12,959 --> 00:04:17,359
gr security for several years

00:04:14,959 --> 00:04:19,280
or had planned to do like removing read

00:04:17,359 --> 00:04:21,600
write execute from the kernel

00:04:19,280 --> 00:04:23,360
eliminating information leaks protecting

00:04:21,600 --> 00:04:27,600
global function pointers

00:04:23,360 --> 00:04:28,000
idt gdt etc dealing with invalid user

00:04:27,600 --> 00:04:30,320
memory

00:04:28,000 --> 00:04:31,520
accesses in general reference counter

00:04:30,320 --> 00:04:35,280
overflows

00:04:31,520 --> 00:04:38,080
overflows of allocation sizes

00:04:35,280 --> 00:04:40,880
implementing cfi and preparing for the

00:04:38,080 --> 00:04:42,560
shift to data-only attacks

00:04:40,880 --> 00:04:44,960
kernel self protection was the mostly

00:04:42,560 --> 00:04:46,960
unheard of concept upstream at the time

00:04:44,960 --> 00:04:49,440
though on our end it was a main focus of

00:04:46,960 --> 00:04:52,000
ours since 2003

00:04:49,440 --> 00:04:53,680
with 2020 being the conclusion of the 10

00:04:52,000 --> 00:04:55,600
years mentioned in that talk

00:04:53,680 --> 00:04:57,360
i decided to give this follow-up to

00:04:55,600 --> 00:04:59,919
reflect on the past 10 years of linux

00:04:57,360 --> 00:04:59,919
security

00:05:05,759 --> 00:05:10,720
so in june 2011 the colonel hardening

00:05:09,120 --> 00:05:12,479
mailing list was created

00:05:10,720 --> 00:05:14,400
this came out of an initial interest

00:05:12,479 --> 00:05:16,320
after my 2010 talk

00:05:14,400 --> 00:05:18,240
and more specifically was created to

00:05:16,320 --> 00:05:19,280
track the progress of a google summer of

00:05:18,240 --> 00:05:21,759
code project for

00:05:19,280 --> 00:05:23,280
vaseline coulikov who i hopefully

00:05:21,759 --> 00:05:25,840
haven't

00:05:23,280 --> 00:05:26,880
mangled the name of the main thing that

00:05:25,840 --> 00:05:29,520
come out of it was

00:05:26,880 --> 00:05:30,000
the high pit restriction on slash proc

00:05:29,520 --> 00:05:32,080
but

00:05:30,000 --> 00:05:33,440
after the google project ended the list

00:05:32,080 --> 00:05:36,800
kind of fizzled out

00:05:33,440 --> 00:05:38,800
with only 12 posts total in 2014

00:05:36,800 --> 00:05:41,120
as we'll talk about later this same list

00:05:38,800 --> 00:05:43,440
was resurrected in late 2015

00:05:41,120 --> 00:05:46,960
with the announcement of the kspp the

00:05:43,440 --> 00:05:46,960
kernel self protection project

00:05:51,039 --> 00:05:55,600
in 2011 s map support was added

00:05:54,000 --> 00:05:57,759
preventing returning to user land in

00:05:55,600 --> 00:05:59,120
kernel context for cpus supporting the

00:05:57,759 --> 00:06:01,440
feature

00:05:59,120 --> 00:06:03,199
the yama lsm was added which

00:06:01,440 --> 00:06:06,560
re-implemented an old gr security

00:06:03,199 --> 00:06:09,039
feature related to p-trace restrictions

00:06:06,560 --> 00:06:12,560
bpf-based setcomp was added which saw

00:06:09,039 --> 00:06:14,240
early adoption by chromium and systemd

00:06:12,560 --> 00:06:16,080
and the simulink and heartlake

00:06:14,240 --> 00:06:17,840
restrictions for

00:06:16,080 --> 00:06:20,000
dealing with some temp uh race

00:06:17,840 --> 00:06:22,000
vulnerabilities were

00:06:20,000 --> 00:06:25,120
added and those were adapted from a

00:06:22,000 --> 00:06:28,000
patch first written in 1996

00:06:25,120 --> 00:06:28,479
by andrew trujell who i also hopefully

00:06:28,000 --> 00:06:35,840
i'm not

00:06:28,479 --> 00:06:35,840
screwing up the name of

00:06:37,039 --> 00:06:42,720
in 2012 s map support was added

00:06:40,319 --> 00:06:45,520
uh which aimed to prevent direct user

00:06:42,720 --> 00:06:48,080
land data access and kernel contacts

00:06:45,520 --> 00:06:48,560
but it wasn't usable until late 2014

00:06:48,080 --> 00:06:52,800
when

00:06:48,560 --> 00:06:54,639
uh broadwell uh for a ship with it

00:06:52,800 --> 00:06:56,880
unprivileged username spaces were

00:06:54,639 --> 00:06:59,039
enabled in 2013

00:06:56,880 --> 00:06:59,919
uh which while enabling some new forms

00:06:59,039 --> 00:07:03,120
of computing

00:06:59,919 --> 00:07:04,800
it's been very important for the recent

00:07:03,120 --> 00:07:08,240
containerization

00:07:04,800 --> 00:07:10,000
um unprivileged user name spaces have

00:07:08,240 --> 00:07:10,800
been a net negative on the kernel

00:07:10,000 --> 00:07:12,639
security

00:07:10,800 --> 00:07:14,479
and a good example of how not to

00:07:12,639 --> 00:07:16,400
introduce new functionality

00:07:14,479 --> 00:07:18,080
that exposes a huge amount of kernel

00:07:16,400 --> 00:07:19,919
attack surface

00:07:18,080 --> 00:07:22,000
specifically it seemed to have been

00:07:19,919 --> 00:07:24,319
enabled without any deep analysis of the

00:07:22,000 --> 00:07:27,360
attack surface it was exposing

00:07:24,319 --> 00:07:29,599
this caller didn't exist at the time and

00:07:27,360 --> 00:07:32,319
i believe trinity was also kind of in

00:07:29,599 --> 00:07:34,479
its infancy

00:07:32,319 --> 00:07:36,080
today i'm privileged username space use

00:07:34,479 --> 00:07:44,240
is a key component of many

00:07:36,080 --> 00:07:47,039
kernel exploits

00:07:44,240 --> 00:07:47,520
in 2014 a year after publication of our

00:07:47,039 --> 00:07:49,440
blog

00:07:47,520 --> 00:07:50,800
that called it out as ineffective cargo

00:07:49,440 --> 00:07:53,520
cult security

00:07:50,800 --> 00:07:55,599
kslr was merged into the kernel it's

00:07:53,520 --> 00:07:57,120
proved to be a large developer time sink

00:07:55,599 --> 00:07:59,599
and generally has never been able to

00:07:57,120 --> 00:08:01,280
provide the benefits it claims

00:07:59,599 --> 00:08:04,160
just recently upstream discovered a

00:08:01,280 --> 00:08:06,080
vulnerability we discovered in 2018

00:08:04,160 --> 00:08:08,240
that even core dumps were leaking large

00:08:06,080 --> 00:08:11,599
amounts of uninitialized kernel data

00:08:08,240 --> 00:08:12,720
leading to a kslr bypass we'll quantify

00:08:11,599 --> 00:08:14,639
in a later section

00:08:12,720 --> 00:08:18,000
how much of a waste of time kslr has

00:08:14,639 --> 00:08:18,000
been for kernel developers

00:08:18,240 --> 00:08:22,240
also in 2014 the vpf syscall was added

00:08:21,759 --> 00:08:25,520
for

00:08:22,240 --> 00:08:27,360
direct extended epf use

00:08:25,520 --> 00:08:28,800
being allowed for unprivileged access in

00:08:27,360 --> 00:08:30,560
2016.

00:08:28,800 --> 00:08:32,959
there's a lot of innovation happening

00:08:30,560 --> 00:08:34,880
there you may have seen the presentation

00:08:32,959 --> 00:08:37,039
yesterday about krsi

00:08:34,880 --> 00:08:38,719
and using ebpf there for security

00:08:37,039 --> 00:08:41,039
monitoring purposes

00:08:38,719 --> 00:08:42,800
but with it is a lot of churn and so

00:08:41,039 --> 00:08:43,839
that too has been a frequent source of

00:08:42,800 --> 00:08:45,920
vulnerabilities

00:08:43,839 --> 00:08:47,360
with generally disastrous results given

00:08:45,920 --> 00:08:55,839
the function ebpf

00:08:47,360 --> 00:08:55,839
performs in the kernel

00:08:56,880 --> 00:09:01,839
in 2015 coincidentally on the same day a

00:08:59,839 --> 00:09:03,600
washington post article was published on

00:09:01,839 --> 00:09:04,480
the security problems of the linux

00:09:03,600 --> 00:09:06,399
kernel

00:09:04,480 --> 00:09:07,519
the kernel self-protection project was

00:09:06,399 --> 00:09:09,760
announced

00:09:07,519 --> 00:09:11,519
the announcement mail mentioned that it

00:09:09,760 --> 00:09:14,000
was a community of people working on

00:09:11,519 --> 00:09:15,440
kernel self-protection technologies

00:09:14,000 --> 00:09:17,519
most of which were developed via our

00:09:15,440 --> 00:09:19,600
work in gr security

00:09:17,519 --> 00:09:20,880
it also mentioned the linux foundation's

00:09:19,600 --> 00:09:24,240
core infrastructure

00:09:20,880 --> 00:09:26,399
initiative or cii was funding the work

00:09:24,240 --> 00:09:27,440
and that it enabled the project to make

00:09:26,399 --> 00:09:37,680
a dent

00:09:27,440 --> 00:09:40,320
we'll talk more about that later

00:09:37,680 --> 00:09:42,640
i'm skipping this one in the interest of

00:09:40,320 --> 00:09:42,640
time

00:09:47,279 --> 00:09:51,360
so in the two years after the kspp

00:09:49,440 --> 00:09:52,320
announcement we see a handful of

00:09:51,360 --> 00:09:54,640
features

00:09:52,320 --> 00:09:56,000
based off of ones in geosecurity being

00:09:54,640 --> 00:09:58,959
merged like the

00:09:56,000 --> 00:10:00,560
gcc plugin infrastructure done by msha

00:09:58,959 --> 00:10:04,640
refi

00:10:00,560 --> 00:10:07,680
a port of user copy part of user copy

00:10:04,640 --> 00:10:08,000
vmap stack and an option for dealing

00:10:07,680 --> 00:10:10,800
with

00:10:08,000 --> 00:10:12,240
execution of malicious user mode helper

00:10:10,800 --> 00:10:14,800
binaries that

00:10:12,240 --> 00:10:16,399
unfortunately hasn't really seen much

00:10:14,800 --> 00:10:18,079
adoption that i've seen

00:10:16,399 --> 00:10:21,600
i mean requires some user land

00:10:18,079 --> 00:10:21,600
adjustments to make use of it

00:10:26,000 --> 00:10:30,959
in 2017 ref count full and fortify

00:10:29,519 --> 00:10:33,120
source were merged

00:10:30,959 --> 00:10:36,079
fortify source came from initial work in

00:10:33,120 --> 00:10:37,839
2005 by rjnvendiven

00:10:36,079 --> 00:10:39,680
the ref count code was a manual

00:10:37,839 --> 00:10:42,240
re-implementation of something present

00:10:39,680 --> 00:10:44,399
in geosecurity for many years

00:10:42,240 --> 00:10:45,680
it did receive an update in very recent

00:10:44,399 --> 00:10:47,519
kernels this year

00:10:45,680 --> 00:10:49,440
to improve its performance closer to

00:10:47,519 --> 00:10:51,440
what we have in geosecurity

00:10:49,440 --> 00:11:00,560
but due to its design the coverage will

00:10:51,440 --> 00:11:02,959
always remain much lower

00:11:00,560 --> 00:11:03,600
in 2018 the security world changed

00:11:02,959 --> 00:11:05,680
forever

00:11:03,600 --> 00:11:07,440
after the publication of the meltdown

00:11:05,680 --> 00:11:09,040
inspector vulnerabilities

00:11:07,440 --> 00:11:11,440
so there are a large number of changes

00:11:09,040 --> 00:11:14,640
developed to help address those

00:11:11,440 --> 00:11:17,760
initially pti and replanes pti is

00:11:14,640 --> 00:11:20,880
page table isolation

00:11:17,760 --> 00:11:22,640
in 2019 after nearly 20 years of missed

00:11:20,880 --> 00:11:23,839
innovations because the functionality

00:11:22,640 --> 00:11:26,880
wasn't present

00:11:23,839 --> 00:11:28,800
the kernel finally got lsm stacking

00:11:26,880 --> 00:11:31,760
ironically it happened around the same

00:11:28,800 --> 00:11:33,440
time as krsi was coming onto the scene

00:11:31,760 --> 00:11:35,600
which may help restore some of that

00:11:33,440 --> 00:11:36,480
innovation uh via commercial security

00:11:35,600 --> 00:11:38,640
vendors

00:11:36,480 --> 00:11:40,839
at least within the confines of what's

00:11:38,640 --> 00:11:43,839
permitted through the lsim interface

00:11:40,839 --> 00:11:43,839
interface

00:11:48,320 --> 00:11:53,360
also in 2019 some fixes for the intel

00:11:51,279 --> 00:11:55,600
mds vulnerabilities

00:11:53,360 --> 00:11:56,480
were merged and the lock download was

00:11:55,600 --> 00:11:58,959
added

00:11:56,480 --> 00:12:00,399
a few weeks ago an exploit was published

00:11:58,959 --> 00:12:03,040
for lockdown

00:12:00,399 --> 00:12:05,600
disabling the lock download via loading

00:12:03,040 --> 00:12:07,120
a malicious acpi table

00:12:05,600 --> 00:12:09,440
though there was some hesitation in

00:12:07,120 --> 00:12:10,160
getting a cve given the number of kernel

00:12:09,440 --> 00:12:12,000
subsystems

00:12:10,160 --> 00:12:14,480
that don't view route to kernel

00:12:12,000 --> 00:12:16,800
privilege escalation as a vulnerability

00:12:14,480 --> 00:12:18,560
it seems like some will be allocated

00:12:16,800 --> 00:12:20,639
purely because of how heavily lockdown

00:12:18,560 --> 00:12:21,839
was marketed as a standalone foolproof

00:12:20,639 --> 00:12:23,360
security measure

00:12:21,839 --> 00:12:25,600
and not just the collection of best

00:12:23,360 --> 00:12:28,240
effort tweaks for a subset of a more

00:12:25,600 --> 00:12:31,279
general problem

00:12:28,240 --> 00:12:33,360
and that's it for the timeline

00:12:31,279 --> 00:12:39,839
next i'll be going more into depth on

00:12:33,360 --> 00:12:39,839
the kspp

00:12:43,680 --> 00:12:47,120
so since the previous slides mostly

00:12:45,680 --> 00:12:49,440
covered the output of the

00:12:47,120 --> 00:12:50,800
kspp during its close to five years of

00:12:49,440 --> 00:12:52,240
existence

00:12:50,800 --> 00:12:53,920
and you've probably otherwise heard

00:12:52,240 --> 00:12:54,720
plenty about it via conferences like

00:12:53,920 --> 00:12:56,480
this

00:12:54,720 --> 00:12:58,880
i decided to do something a little

00:12:56,480 --> 00:13:00,320
different here and present another view

00:12:58,880 --> 00:13:03,440
into the kspp via

00:13:00,320 --> 00:13:05,360
analysis of its mailing list contents

00:13:03,440 --> 00:13:07,120
solar designer was kind enough to supply

00:13:05,360 --> 00:13:08,720
me with a male school from the end of

00:13:07,120 --> 00:13:10,800
april of the list

00:13:08,720 --> 00:13:12,560
and i've provided a link to that spool

00:13:10,800 --> 00:13:13,360
along with the python script i wrote for

00:13:12,560 --> 00:13:17,120
the analysis

00:13:13,360 --> 00:13:19,440
in a later slide analysis script deals

00:13:17,120 --> 00:13:21,519
only with the kspp's use of the mailing

00:13:19,440 --> 00:13:23,360
list so specifically involving emails

00:13:21,519 --> 00:13:26,160
from 2015 onward

00:13:23,360 --> 00:13:27,920
uh so i i mentioned earlier about the

00:13:26,160 --> 00:13:29,200
google summer of code project that

00:13:27,920 --> 00:13:31,279
started in

00:13:29,200 --> 00:13:34,000
2011 that use the same mailing list it

00:13:31,279 --> 00:13:36,880
doesn't include the emails from that so

00:13:34,000 --> 00:13:36,880
just keep that in mind

00:13:38,560 --> 00:13:43,040
the raw results are here to look over in

00:13:41,360 --> 00:13:44,480
this in the next slide

00:13:43,040 --> 00:13:46,160
and then we'll discuss more about what

00:13:44,480 --> 00:13:49,360
they might mean

00:13:46,160 --> 00:13:53,120
so we can see from uh the

00:13:49,360 --> 00:13:55,279
count of males here per year the

00:13:53,120 --> 00:13:57,360
uh kspp list peaked in terms of number

00:13:55,279 --> 00:13:59,279
of posts in 2017

00:13:57,360 --> 00:14:01,279
and has been on a significant decline

00:13:59,279 --> 00:14:06,079
since then with about half as many posts

00:14:01,279 --> 00:14:09,440
submitted to it in 2019 as in 2017

00:14:06,079 --> 00:14:13,680
and the last number here

00:14:09,440 --> 00:14:15,519
is a important one that i'll talk about

00:14:13,680 --> 00:14:18,320
and it's something that we'll talk about

00:14:15,519 --> 00:14:18,320
in another slide

00:14:24,720 --> 00:14:28,959
so as far as who's contributing to the

00:14:26,560 --> 00:14:30,000
list the data shows case cook sending

00:14:28,959 --> 00:14:31,519
nearly five times

00:14:30,000 --> 00:14:33,279
as many males as the next top

00:14:31,519 --> 00:14:35,519
contributor

00:14:33,279 --> 00:14:37,199
whose contributions to the list involved

00:14:35,519 --> 00:14:40,079
a large kslr pi

00:14:37,199 --> 00:14:41,360
patch set with many revisions i'll note

00:14:40,079 --> 00:14:43,360
that for this analysis

00:14:41,360 --> 00:14:44,720
no effort was made to merge results from

00:14:43,360 --> 00:14:45,839
multiple email addresses for

00:14:44,720 --> 00:14:48,000
contributors

00:14:45,839 --> 00:14:49,839
for instance greg kh has contributed to

00:14:48,000 --> 00:14:50,480
the list with multiple email addresses

00:14:49,839 --> 00:14:52,079
but

00:14:50,480 --> 00:14:54,639
it doesn't significantly affect the

00:14:52,079 --> 00:14:55,920
results to merge them

00:14:54,639 --> 00:14:58,000
what's shown in this slide is all

00:14:55,920 --> 00:14:59,760
contributors by email address making

00:14:58,000 --> 00:15:02,480
up one percent or more of the total

00:14:59,760 --> 00:15:02,480
email account

00:15:10,720 --> 00:15:18,000
so based off the uh stat from the

00:15:14,160 --> 00:15:19,040
first slide that 8.5 other category that

00:15:18,000 --> 00:15:20,880
i mentioned

00:15:19,040 --> 00:15:22,560
is where we would expect to see the most

00:15:20,880 --> 00:15:26,079
interesting discussion

00:15:22,560 --> 00:15:31,040
uh though this does uh sometimes happen

00:15:26,079 --> 00:15:31,040
in early reviews of of certain patches

00:15:31,600 --> 00:15:39,440
or sometimes rfc submissions can

00:15:37,120 --> 00:15:41,279
you know not provide a patch sometimes

00:15:39,440 --> 00:15:44,720
it's just general discussion

00:15:41,279 --> 00:15:47,920
um uh the 8.5

00:15:44,720 --> 00:15:50,160
doesn't include uh things like that um

00:15:47,920 --> 00:15:51,199
so it's purely things that don't involve

00:15:50,160 --> 00:15:53,360
patches or

00:15:51,199 --> 00:15:55,839
uh reviews of patches and that sort of

00:15:53,360 --> 00:15:55,839
thing

00:15:56,079 --> 00:16:00,639
but this is where we would expect to see

00:15:58,320 --> 00:16:02,399
proposing new security ideas

00:16:00,639 --> 00:16:04,079
discussing threat models and

00:16:02,399 --> 00:16:06,320
brainstorming prior to just

00:16:04,079 --> 00:16:09,600
deciding on an implementation and

00:16:06,320 --> 00:16:12,639
solidifying it in patch form

00:16:09,600 --> 00:16:14,560
8.5 means at least very little of that

00:16:12,639 --> 00:16:15,839
discussion is happening in public on the

00:16:14,560 --> 00:16:17,600
mailing list

00:16:15,839 --> 00:16:19,759
or at least in the case of much of the

00:16:17,600 --> 00:16:21,360
kspp's work to date

00:16:19,759 --> 00:16:24,399
much of that work was already done by

00:16:21,360 --> 00:16:26,880
others whose work was reimplemented

00:16:24,399 --> 00:16:28,560
patches themselves make up over half of

00:16:26,880 --> 00:16:32,320
all emails to the kspp

00:16:28,560 --> 00:16:34,240
list one third of emails are reviews of

00:16:32,320 --> 00:16:36,240
those patches

00:16:34,240 --> 00:16:39,120
we talked earlier about kslr being a

00:16:36,240 --> 00:16:41,600
drain on developer resources

00:16:39,120 --> 00:16:43,199
mail specifically mentioning kslr made

00:16:41,600 --> 00:16:46,000
up nearly nine percent of all

00:16:43,199 --> 00:16:46,639
emails to the kspb list so even more

00:16:46,000 --> 00:16:48,639
than the

00:16:46,639 --> 00:16:49,920
entirety of all other security

00:16:48,639 --> 00:16:53,519
discussion

00:16:49,920 --> 00:16:53,519
happening on the kspp list

00:16:55,120 --> 00:17:00,720
yeah a sign of this being

00:16:58,480 --> 00:17:02,399
a corporate funded effort only nine

00:17:00,720 --> 00:17:04,000
percent of the mails to the list were

00:17:02,399 --> 00:17:06,160
sent on the weekend

00:17:04,000 --> 00:17:08,160
for it to be uniform let alone a

00:17:06,160 --> 00:17:10,559
community effort we'd expect that to be

00:17:08,160 --> 00:17:12,959
above 30 percent

00:17:10,559 --> 00:17:14,720
finally there's a very long tale of

00:17:12,959 --> 00:17:18,079
people sending mails to the list

00:17:14,720 --> 00:17:21,039
out of 614 total contributors only

00:17:18,079 --> 00:17:21,919
23 those were the ones on the previous

00:17:21,039 --> 00:17:24,480
slide

00:17:21,919 --> 00:17:25,039
sent one percent of more one percent or

00:17:24,480 --> 00:17:27,760
more

00:17:25,039 --> 00:17:29,440
of the males to the list and only 17

00:17:27,760 --> 00:17:34,240
sent between 0.5

00:17:29,440 --> 00:17:36,880
and 1 and i've included the

00:17:34,240 --> 00:17:38,880
links here to the male school and the

00:17:36,880 --> 00:17:42,720
analysis script in case you want to

00:17:38,880 --> 00:17:42,720
check my work or perform your own

00:17:44,840 --> 00:17:47,840
analysis

00:17:48,160 --> 00:17:53,039
so the kspp is focused only on merging

00:17:51,120 --> 00:17:55,200
new security functionality into the

00:17:53,039 --> 00:17:57,120
latest upstream kernel

00:17:55,200 --> 00:17:59,600
the approach taken for several features

00:17:57,120 --> 00:18:02,480
involved large rewrites of kernel code

00:17:59,600 --> 00:18:03,360
like the unnecessary vla removal because

00:18:02,480 --> 00:18:06,640
of fear of a bug

00:18:03,360 --> 00:18:08,799
on the ref count conversion and the

00:18:06,640 --> 00:18:10,080
scripted k-malek 2 k-malic array

00:18:08,799 --> 00:18:11,440
conversions

00:18:10,080 --> 00:18:13,440
while this improves security of the

00:18:11,440 --> 00:18:15,679
latest upstream kernel and eventually

00:18:13,440 --> 00:18:18,080
improves security for many or most

00:18:15,679 --> 00:18:20,559
linux users years from now it doesn't

00:18:18,080 --> 00:18:22,240
benefit the majority today

00:18:20,559 --> 00:18:23,600
the majority of distributions are

00:18:22,240 --> 00:18:27,200
running older

00:18:23,600 --> 00:18:29,440
linux kernels these large rewrites don't

00:18:27,200 --> 00:18:30,400
meet stable inclusion criteria and don't

00:18:29,440 --> 00:18:33,280
get backboarded

00:18:30,400 --> 00:18:34,799
similar to other kspb work there's no

00:18:33,280 --> 00:18:36,720
technical reason why i couldn't be

00:18:34,799 --> 00:18:37,520
backported to increase the audience for

00:18:36,720 --> 00:18:39,280
the work

00:18:37,520 --> 00:18:43,840
but i haven't seen any significant

00:18:39,280 --> 00:18:43,840
interest in doing so

00:18:48,799 --> 00:18:54,960
one trend that's appeared since 2018

00:18:52,880 --> 00:18:56,000
with the publication of meltdown

00:18:54,960 --> 00:18:57,679
inspector

00:18:56,000 --> 00:19:00,160
is that a lot of security work is

00:18:57,679 --> 00:19:02,480
bypassing the kspp

00:19:00,160 --> 00:19:03,520
when page table isolation and replanes

00:19:02,480 --> 00:19:05,919
were developed

00:19:03,520 --> 00:19:07,840
as well as virtually all other later

00:19:05,919 --> 00:19:09,600
intel vulnerability fixes

00:19:07,840 --> 00:19:11,039
it was done in private and without the

00:19:09,600 --> 00:19:13,600
involvement of the kspp

00:19:11,039 --> 00:19:15,280
list we're likewise seeing that some

00:19:13,600 --> 00:19:17,039
architecture maintainers

00:19:15,280 --> 00:19:19,520
are pushing through security changes on

00:19:17,039 --> 00:19:22,880
their own especially power pc

00:19:19,520 --> 00:19:25,840
and arm 64. a special shout out to

00:19:22,880 --> 00:19:26,559
will deakin and michael ellerman who are

00:19:25,840 --> 00:19:28,000
doing

00:19:26,559 --> 00:19:30,640
good work for their respective

00:19:28,000 --> 00:19:32,960
architectures

00:19:30,640 --> 00:19:34,320
so while this signals waning relevance

00:19:32,960 --> 00:19:37,039
of the kspp

00:19:34,320 --> 00:19:38,480
and matches the decline in mail count

00:19:37,039 --> 00:19:40,720
seen since 2018

00:19:38,480 --> 00:19:42,480
on a previous slide it's good that

00:19:40,720 --> 00:19:44,080
certain maintainers at least have a high

00:19:42,480 --> 00:19:46,080
regard for security

00:19:44,080 --> 00:19:49,200
and don't need the extra nudges that the

00:19:46,080 --> 00:19:51,520
kspb list was designed for

00:19:49,200 --> 00:19:52,400
next i'll be talking about another large

00:19:51,520 --> 00:19:54,720
change with a

00:19:52,400 --> 00:19:56,559
impact on kernel security the

00:19:54,720 --> 00:19:57,840
introduction of extended long-term

00:19:56,559 --> 00:20:00,640
support kernels or

00:19:57,840 --> 00:20:00,640
xlts

00:20:05,600 --> 00:20:11,440
in september of 2017 google announced a

00:20:08,720 --> 00:20:11,919
project treble presentation at a project

00:20:11,440 --> 00:20:14,640
treble

00:20:11,919 --> 00:20:16,720
presentation that greg cage was

00:20:14,640 --> 00:20:19,679
increasing the support of lts kernels

00:20:16,720 --> 00:20:21,840
from two years to a whopping six years

00:20:19,679 --> 00:20:23,760
i haven't been able to find any prior

00:20:21,840 --> 00:20:25,600
public discussion of that move

00:20:23,760 --> 00:20:27,360
which is unusual considering how much a

00:20:25,600 --> 00:20:28,799
stable process depends on public

00:20:27,360 --> 00:20:32,480
participation

00:20:28,799 --> 00:20:34,960
more on that later this is a 3x

00:20:32,480 --> 00:20:36,880
increase in the support period with the

00:20:34,960 --> 00:20:38,880
back ports being increasingly difficult

00:20:36,880 --> 00:20:40,240
due to co-churn and other changes over

00:20:38,880 --> 00:20:41,840
time

00:20:40,240 --> 00:20:43,679
for the first time that i had ever

00:20:41,840 --> 00:20:44,960
observed in a year after the initial

00:20:43,679 --> 00:20:47,039
announcement

00:20:44,960 --> 00:20:49,360
greg published a blog entitled what

00:20:47,039 --> 00:20:51,520
stable kernel should i use

00:20:49,360 --> 00:20:53,840
several pages down in that blog when

00:20:51,520 --> 00:20:55,679
discussing the older lts kernels listed

00:20:53,840 --> 00:20:58,159
on kernel.org

00:20:55,679 --> 00:21:00,640
that greg maintains and mentioned

00:20:58,159 --> 00:21:03,360
nowhere else conspicuously it said this

00:21:00,640 --> 00:21:05,280
which i'll repeat in full and i've

00:21:03,360 --> 00:21:07,919
included the quote here on the

00:21:05,280 --> 00:21:09,600
slide there is one huge caveat when

00:21:07,919 --> 00:21:11,520
using a kernel like this

00:21:09,600 --> 00:21:13,679
the number of security fixes that get

00:21:11,520 --> 00:21:15,520
back ported are not as great as with the

00:21:13,679 --> 00:21:18,080
latest lts release

00:21:15,520 --> 00:21:20,960
because the traditional model of the

00:21:18,080 --> 00:21:23,760
devices that use these older lts kernels

00:21:20,960 --> 00:21:25,840
is a much more reduced user model these

00:21:23,760 --> 00:21:27,520
kernels are not to be used in any type

00:21:25,840 --> 00:21:29,919
of general computing model

00:21:27,520 --> 00:21:31,760
where you have untrusted users or

00:21:29,919 --> 00:21:33,600
virtual machines

00:21:31,760 --> 00:21:36,320
as the ability to do some of the recent

00:21:33,600 --> 00:21:39,200
spectre type fixes for older releases

00:21:36,320 --> 00:21:41,840
is greatly reduced if present at all in

00:21:39,200 --> 00:21:43,360
some branches

00:21:41,840 --> 00:21:44,960
now i hope we can all agree that

00:21:43,360 --> 00:21:47,360
important acknowledgements like these

00:21:44,960 --> 00:21:49,440
shouldn't be hidden multiple pages down

00:21:47,360 --> 00:21:51,120
in a developer's blog given the number

00:21:49,440 --> 00:21:51,840
of systems in the world using these

00:21:51,120 --> 00:21:59,520
kernels

00:21:51,840 --> 00:22:01,760
that are claimed to be supported

00:21:59,520 --> 00:22:03,840
so the question is raised why aren't

00:22:01,760 --> 00:22:06,000
known security issues being fixed in

00:22:03,840 --> 00:22:07,360
kernels marketed as being supported for

00:22:06,000 --> 00:22:09,039
six years

00:22:07,360 --> 00:22:11,679
to answer that we need to look at the

00:22:09,039 --> 00:22:14,400
process on the stable mailing list

00:22:11,679 --> 00:22:15,760
even if a backboard is trivial any get

00:22:14,400 --> 00:22:17,679
cherry pick

00:22:15,760 --> 00:22:18,880
failure results in a mail like the one

00:22:17,679 --> 00:22:22,240
you see

00:22:18,880 --> 00:22:23,919
here on the slide being sent to the list

00:22:22,240 --> 00:22:25,600
it's an automated mail that gets sent

00:22:23,919 --> 00:22:27,280
out

00:22:25,600 --> 00:22:29,120
for the security fix to be applied

00:22:27,280 --> 00:22:29,520
someone needs to manually backport the

00:22:29,120 --> 00:22:31,120
fix

00:22:29,520 --> 00:22:33,280
and then submit it to the mailing list

00:22:31,120 --> 00:22:40,559
for it to get included in the

00:22:33,280 --> 00:22:42,880
future stable release

00:22:40,559 --> 00:22:45,440
so what happens if no one volunteers to

00:22:42,880 --> 00:22:47,200
manually backport the security fix

00:22:45,440 --> 00:22:49,600
the vulnerabilities simply don't get

00:22:47,200 --> 00:22:51,120
fixed and thanks to the upstream policy

00:22:49,600 --> 00:22:52,480
of not recognizing security

00:22:51,120 --> 00:22:53,919
vulnerabilities

00:22:52,480 --> 00:22:56,080
unless you're following every commit

00:22:53,919 --> 00:22:57,200
like we are you have no idea what's

00:22:56,080 --> 00:22:59,280
being fixed

00:22:57,200 --> 00:23:00,559
what's not fixed or if something is

00:22:59,280 --> 00:23:03,440
missing when

00:23:00,559 --> 00:23:04,960
or if it will ever be fixed greg's

00:23:03,440 --> 00:23:07,520
passing mentioned in his blog

00:23:04,960 --> 00:23:08,960
a year after the fact was likely the

00:23:07,520 --> 00:23:11,120
first time the public knew

00:23:08,960 --> 00:23:13,760
some intel vulnerability fixes simply

00:23:11,120 --> 00:23:16,559
weren't being applied to the 4.4 kernel

00:23:13,760 --> 00:23:18,480
that was claimed to be supported we've

00:23:16,559 --> 00:23:20,840
also noticed issues regarding

00:23:18,480 --> 00:23:22,159
review for patches going into the stable

00:23:20,840 --> 00:23:24,159
kernels

00:23:22,159 --> 00:23:25,919
for instance there seems to be lacking a

00:23:24,159 --> 00:23:28,000
process for ensuring

00:23:25,919 --> 00:23:29,600
when a backboard is applied that all

00:23:28,000 --> 00:23:30,880
current commits listing it in their

00:23:29,600 --> 00:23:33,440
fixes tags

00:23:30,880 --> 00:23:34,720
are backboarded as well we've seen

00:23:33,440 --> 00:23:37,280
numerous instances

00:23:34,720 --> 00:23:39,280
where known broken fixes are applied

00:23:37,280 --> 00:23:41,679
with the correct fix already readily

00:23:39,280 --> 00:23:43,679
available

00:23:41,679 --> 00:23:44,960
but it can take several additional

00:23:43,679 --> 00:23:48,480
stable updates

00:23:44,960 --> 00:23:48,799
for those to get applied in one instance

00:23:48,480 --> 00:23:51,919
we

00:23:48,799 --> 00:23:52,960
observed an entirely new un and unused 8

00:23:51,919 --> 00:23:55,919
00:23:52,960 --> 00:23:57,840
line kvm file being back ported all the

00:23:55,919 --> 00:24:00,880
way to the 4.4 kernel

00:23:57,840 --> 00:24:02,720
with no one noticing it for two weeks

00:24:00,880 --> 00:24:04,240
an additional stable kernel was even

00:24:02,720 --> 00:24:06,400
released in the meantime

00:24:04,240 --> 00:24:08,640
back porting another fix to the entirely

00:24:06,400 --> 00:24:12,400
unused file

00:24:08,640 --> 00:24:15,039
originally the result of a bad backboard

00:24:12,400 --> 00:24:17,039
from the diff stack graphic alone which

00:24:15,039 --> 00:24:19,440
appears when you do a git pull

00:24:17,039 --> 00:24:20,720
to that latest release or even in the

00:24:19,440 --> 00:24:23,840
announcement email

00:24:20,720 --> 00:24:26,000
uh it announces the new stable kernel

00:24:23,840 --> 00:24:27,520
it stuck out like a sore thumb and it

00:24:26,000 --> 00:24:28,159
should have raised some red flags for

00:24:27,520 --> 00:24:31,200
people but

00:24:28,159 --> 00:24:35,360
apparently it didn't uh since it took

00:24:31,200 --> 00:24:35,360
two weeks over two weeks to resolve

00:24:40,320 --> 00:24:43,520
as examples of some of these larger

00:24:42,240 --> 00:24:45,919
issues with the stable

00:24:43,520 --> 00:24:47,760
stable process this slide in the next

00:24:45,919 --> 00:24:49,520
slide referenced two of our blog posts

00:24:47,760 --> 00:24:51,520
that go into full detail

00:24:49,520 --> 00:24:53,679
of the path an upstream change took on

00:24:51,520 --> 00:24:55,679
its way through the stable process

00:24:53,679 --> 00:24:57,679
either introducing new vulnerabilities

00:24:55,679 --> 00:24:59,600
through basic lack of review

00:24:57,679 --> 00:25:01,679
or improperly fixing a vulnerability

00:24:59,600 --> 00:25:04,400
that was claimed to be fixed

00:25:01,679 --> 00:25:06,080
in the interest of time i'll skip these

00:25:04,400 --> 00:25:07,600
but if you're curious about the details

00:25:06,080 --> 00:25:09,279
you can just reference these slides

00:25:07,600 --> 00:25:15,279
later because it's got the full

00:25:09,279 --> 00:25:19,039
information in the blog post already

00:25:15,279 --> 00:25:19,039
so i'm skipping this one also

00:25:23,520 --> 00:25:27,760
so based on the previous information and

00:25:26,240 --> 00:25:28,960
public admission from the stable

00:25:27,760 --> 00:25:30,880
maintainer

00:25:28,960 --> 00:25:33,039
we know needed security patches are

00:25:30,880 --> 00:25:34,960
missing from stable kernels

00:25:33,039 --> 00:25:37,279
on kernel.org it's mentioned that the

00:25:34,960 --> 00:25:39,279
4.4 xlts

00:25:37,279 --> 00:25:43,120
will be supported for two more years

00:25:39,279 --> 00:25:45,440
until february of 2022

00:25:43,120 --> 00:25:47,039
one basic way of seeing some of the

00:25:45,440 --> 00:25:50,000
issues that remain would be to look at

00:25:47,039 --> 00:25:51,960
syscaller results for the 4.4 kernel

00:25:50,000 --> 00:25:54,080
so let's see what says

00:25:51,960 --> 00:25:57,200
caller.appspot.com shows for it

00:25:54,080 --> 00:26:00,240
and i've included a screenshot uh from

00:25:57,200 --> 00:26:02,320
that website here in the slide um

00:26:00,240 --> 00:26:03,520
as you can see from the screenshot it's

00:26:02,320 --> 00:26:07,120
listed as broken

00:26:03,520 --> 00:26:08,480
with no bugs listed the android 4.4

00:26:07,120 --> 00:26:10,480
kernel page won't help us

00:26:08,480 --> 00:26:12,559
either as that hasn't been updated in

00:26:10,480 --> 00:26:16,480
nearly two years

00:26:12,559 --> 00:26:19,120
and it's not just 4.4 either the 4.9

00:26:16,480 --> 00:26:20,159
kernel is listed as supported for three

00:26:19,120 --> 00:26:22,240
more years

00:26:20,159 --> 00:26:24,640
and it too is reporting no information

00:26:22,240 --> 00:26:27,520
on the syscaller dashboard

00:26:24,640 --> 00:26:29,520
these kernels are actually also missing

00:26:27,520 --> 00:26:31,600
functionality important for the full use

00:26:29,520 --> 00:26:33,360
of cisco

00:26:31,600 --> 00:26:35,039
so what the public thinks is happening

00:26:33,360 --> 00:26:37,279
in terms of support for these kernels

00:26:35,039 --> 00:26:39,200
simply doesn't match reality

00:26:37,279 --> 00:26:40,640
it's possible that after this talk

00:26:39,200 --> 00:26:42,799
someone will step forward to do

00:26:40,640 --> 00:26:44,960
something about the situation

00:26:42,799 --> 00:26:46,960
but it shouldn't require multiple years

00:26:44,960 --> 00:26:47,919
and a public presentation for this to be

00:26:46,960 --> 00:26:49,600
fixed

00:26:47,919 --> 00:26:51,840
people involved in kernel development

00:26:49,600 --> 00:26:54,480
know this is the current state of things

00:26:51,840 --> 00:26:58,080
but it seems like complacency is set in

00:26:54,480 --> 00:26:59,279
i know that the cisco uh developer is

00:26:58,080 --> 00:27:01,840
aware of it he's

00:26:59,279 --> 00:27:02,559
not posted about it publicly on twitter

00:27:01,840 --> 00:27:05,760
but

00:27:02,559 --> 00:27:09,279
um this is still the

00:27:05,760 --> 00:27:09,279
the way things are currently

00:27:15,360 --> 00:27:19,840
uh so since we have our own independent

00:27:17,600 --> 00:27:21,679
stable backboard process that follows

00:27:19,840 --> 00:27:23,600
the upstream kernel commits

00:27:21,679 --> 00:27:25,840
and other sources regardless of any

00:27:23,600 --> 00:27:27,039
fixes or stable tags which may or may

00:27:25,840 --> 00:27:31,279
not be present

00:27:27,039 --> 00:27:31,279
we have some unique observations here

00:27:31,600 --> 00:27:38,559
as our final as of our final 4.4 patch

00:27:34,960 --> 00:27:39,600
we applied at least 1 250 security

00:27:38,559 --> 00:27:43,039
relevant fixes

00:27:39,600 --> 00:27:45,279
missing in the upstream 4.4 xlts

00:27:43,039 --> 00:27:47,440
this is over a period of about four

00:27:45,279 --> 00:27:50,640
years and three months we

00:27:47,440 --> 00:27:54,159
just retired the 4.4 kernel the

00:27:50,640 --> 00:27:57,360
beginning of april this year

00:27:54,159 --> 00:28:01,039
in recent years we've noticed autocell

00:27:57,360 --> 00:28:02,320
that's a ai based tool developed by

00:28:01,039 --> 00:28:06,320
sasha levin

00:28:02,320 --> 00:28:08,320
um that works in conjunction with some

00:28:06,320 --> 00:28:09,600
manual review by him and i assume some

00:28:08,320 --> 00:28:11,279
other people

00:28:09,600 --> 00:28:13,679
uh we've noticed it getting much better

00:28:11,279 --> 00:28:15,200
at spotting security fixes that

00:28:13,679 --> 00:28:17,520
previously we were the only ones

00:28:15,200 --> 00:28:19,120
backboarding and so these were ones

00:28:17,520 --> 00:28:23,440
where there was no

00:28:19,120 --> 00:28:25,520
fixes or stable cc tag autocell is

00:28:23,440 --> 00:28:27,600
starting to pick a lot a lot more of

00:28:25,520 --> 00:28:29,760
those up

00:28:27,600 --> 00:28:31,600
however without an associated increase

00:28:29,760 --> 00:28:33,679
in people performing the necessary

00:28:31,600 --> 00:28:35,039
manual backboards especially for older

00:28:33,679 --> 00:28:36,559
kernels

00:28:35,039 --> 00:28:38,320
some of these additional patches just

00:28:36,559 --> 00:28:39,520
get dropped at the stable mailing list

00:28:38,320 --> 00:28:42,399
level

00:28:39,520 --> 00:28:43,200
as dan carpenter noted in an lwn comment

00:28:42,399 --> 00:28:45,840
which i've

00:28:43,200 --> 00:28:47,360
linked in the slide here everyone is

00:28:45,840 --> 00:28:49,440
overworked

00:28:47,360 --> 00:28:51,279
we also notice that autocell could use

00:28:49,440 --> 00:28:53,039
some more manual review in deciding

00:28:51,279 --> 00:28:54,799
whether it's appropriate to apply a

00:28:53,039 --> 00:28:56,960
change to an older kernel

00:28:54,799 --> 00:28:59,039
and what changes are necessary rather

00:28:56,960 --> 00:28:59,760
than just being satisfied with the

00:28:59,039 --> 00:29:02,640
change

00:28:59,760 --> 00:29:04,480
cherry picking cleanly we provide here

00:29:02,640 --> 00:29:07,919
an example of a vpf change

00:29:04,480 --> 00:29:10,880
backported thanks to autocell to 5.4

00:29:07,919 --> 00:29:15,200
from the 5.5 kernel that was exploited

00:29:10,880 --> 00:29:15,200
as part of zdi's own to own contests

00:29:15,360 --> 00:29:19,039
all these prior things said i don't want

00:29:16,960 --> 00:29:21,919
to understate the fact that the stable

00:29:19,039 --> 00:29:24,080
process has improved significantly in

00:29:21,919 --> 00:29:26,320
recent years as far as what changes are

00:29:24,080 --> 00:29:29,840
proposed for backboarding this is

00:29:26,320 --> 00:29:34,720
primarily due to auto cell but also

00:29:29,840 --> 00:29:37,840
the increase in use of fixes tag

00:29:34,720 --> 00:29:39,120
you know it used to be much more rarely

00:29:37,840 --> 00:29:42,080
used

00:29:39,120 --> 00:29:44,240
and now it's it's seeing you know much

00:29:42,080 --> 00:29:46,640
more use it's still not

00:29:44,240 --> 00:29:48,880
used across the board but it's getting

00:29:46,640 --> 00:29:48,880
there

00:29:50,880 --> 00:29:54,080
when the stable kernel is recent enough

00:29:52,799 --> 00:29:55,919
and the

00:29:54,080 --> 00:29:58,399
changes are correct and cherry pick

00:29:55,919 --> 00:29:59,360
cleanly the process works reasonably

00:29:58,399 --> 00:30:01,440
well

00:29:59,360 --> 00:30:03,279
if i were to have given this talk even

00:30:01,440 --> 00:30:04,880
three years ago this section would have

00:30:03,279 --> 00:30:06,480
been much more critical

00:30:04,880 --> 00:30:08,720
there are still large areas for

00:30:06,480 --> 00:30:10,000
improvement but the current state is at

00:30:08,720 --> 00:30:12,720
least significantly

00:30:10,000 --> 00:30:14,320
improved over the previous status quo of

00:30:12,720 --> 00:30:16,320
mostly ignoring anything without a

00:30:14,320 --> 00:30:18,080
stable cc

00:30:16,320 --> 00:30:20,240
next i'll be talking about something

00:30:18,080 --> 00:30:23,360
with a bit more positive history

00:30:20,240 --> 00:30:23,360
and that's says collar

00:30:31,200 --> 00:30:35,360
in the past 10 years the adoption of

00:30:33,279 --> 00:30:37,919
cisco has had possibly the largest

00:30:35,360 --> 00:30:40,000
impact on upstream kernel development

00:30:37,919 --> 00:30:41,279
it's integrated nicely into existing

00:30:40,000 --> 00:30:44,080
development processes

00:30:41,279 --> 00:30:44,880
at least for the latest upstream kernel

00:30:44,080 --> 00:30:47,200
as we saw

00:30:44,880 --> 00:30:49,120
in a previous slide and is able to

00:30:47,200 --> 00:30:50,640
notify developers when an issue in their

00:30:49,120 --> 00:30:53,200
code is found

00:30:50,640 --> 00:30:55,120
syscaller is constantly improving and

00:30:53,200 --> 00:30:56,320
integrating new debugging and testing

00:30:55,120 --> 00:30:58,320
features

00:30:56,320 --> 00:31:00,640
some of those features are listed here

00:30:58,320 --> 00:31:02,840
like kcof enable comparisons

00:31:00,640 --> 00:31:04,480
which helps reach code paths more

00:31:02,840 --> 00:31:06,880
quickly

00:31:04,480 --> 00:31:07,919
and the various sanitizers which while

00:31:06,880 --> 00:31:10,399
not part of

00:31:07,919 --> 00:31:12,159
cisco themselves were developed with the

00:31:10,399 --> 00:31:13,039
broader goal of improving fuzzing and

00:31:12,159 --> 00:31:15,360
testing

00:31:13,039 --> 00:31:17,360
with ciscollar being a major vehicle for

00:31:15,360 --> 00:31:19,440
the technologies

00:31:17,360 --> 00:31:22,080
caisson detects use after freeze and

00:31:19,440 --> 00:31:24,559
other out of bounds memory accesses

00:31:22,080 --> 00:31:25,279
km son detects uninitialized memory

00:31:24,559 --> 00:31:28,320
accesses

00:31:25,279 --> 00:31:33,840
and the most recent addition kcson

00:31:28,320 --> 00:31:33,840
detects concurrency issues

00:31:37,279 --> 00:31:41,200
but says color is a bit of a

00:31:39,279 --> 00:31:43,840
double-edged sword it can be used for

00:31:41,200 --> 00:31:44,960
good or bad when it's used to its

00:31:43,840 --> 00:31:46,720
fullest extent

00:31:44,960 --> 00:31:48,720
and keeping up on the reports it

00:31:46,720 --> 00:31:50,320
generates it's a huge benefit for the

00:31:48,720 --> 00:31:52,080
security of the kernel

00:31:50,320 --> 00:31:54,240
but when those reports sit around for a

00:31:52,080 --> 00:31:56,960
long time or when the configurations

00:31:54,240 --> 00:31:58,559
used for the publix's caller instances

00:31:56,960 --> 00:32:01,039
don't reflect what's being used by the

00:31:58,559 --> 00:32:02,640
public it's useful to an attacker to

00:32:01,039 --> 00:32:04,240
find some potentially exploitable

00:32:02,640 --> 00:32:06,240
vulnerabilities

00:32:04,240 --> 00:32:07,840
the rapid pace of kernel development

00:32:06,240 --> 00:32:08,399
means there are always a large number of

00:32:07,840 --> 00:32:10,880
unfixed

00:32:08,399 --> 00:32:13,120
issues particularly when syscaller

00:32:10,880 --> 00:32:16,000
reaches new areas of the kernel

00:32:13,120 --> 00:32:17,919
like with usb or more recently in

00:32:16,000 --> 00:32:20,000
netlink

00:32:17,919 --> 00:32:21,679
more of a philosophical question is i

00:32:20,000 --> 00:32:22,640
don't have data on this but over the

00:32:21,679 --> 00:32:25,760
long term

00:32:22,640 --> 00:32:27,840
is this caller improving code quality or

00:32:25,760 --> 00:32:30,480
making people lazier and more reliant on

00:32:27,840 --> 00:32:33,279
a tool to review their code

00:32:30,480 --> 00:32:36,799
it's something i i think about i've

00:32:33,279 --> 00:32:36,799
mentioned on twitter a few times

00:32:37,519 --> 00:32:43,840
next i'll be diving into some

00:32:39,440 --> 00:32:43,840
exploitation trends

00:32:48,080 --> 00:32:51,440
data-only attacks are on the rise as

00:32:50,399 --> 00:32:53,440
public attacks

00:32:51,440 --> 00:32:55,279
continue to focus on the path of least

00:32:53,440 --> 00:32:57,519
resistance

00:32:55,279 --> 00:32:58,799
some years ago an option called static

00:32:57,519 --> 00:33:01,760
user mode helper that i

00:32:58,799 --> 00:33:03,360
mentioned earlier in the talk was merge

00:33:01,760 --> 00:33:04,399
but it doesn't seem to have caught on at

00:33:03,360 --> 00:33:06,320
all

00:33:04,399 --> 00:33:08,240
attacking user mode helpers are a prime

00:33:06,320 --> 00:33:10,240
target in today's world of containers

00:33:08,240 --> 00:33:12,559
because the kernel itself performs the

00:33:10,240 --> 00:33:14,640
task of breaking out of any container

00:33:12,559 --> 00:33:16,320
and executing the attacker's binary with

00:33:14,640 --> 00:33:18,799
full privileges

00:33:16,320 --> 00:33:20,080
as mentioned earlier public unfixed says

00:33:18,799 --> 00:33:21,519
caller reports

00:33:20,080 --> 00:33:24,000
are a good source of potentially

00:33:21,519 --> 00:33:26,880
exploitable vulnerabilities

00:33:24,000 --> 00:33:27,840
with tweaks to says caller or changes to

00:33:26,880 --> 00:33:30,080
the default config

00:33:27,840 --> 00:33:32,480
use you can uncover vulnerabilities that

00:33:30,080 --> 00:33:34,480
won't be fixed for some time

00:33:32,480 --> 00:33:36,320
for instance our internal syscaller

00:33:34,480 --> 00:33:38,640
instances

00:33:36,320 --> 00:33:40,240
instantly found a memory leak in afs

00:33:38,640 --> 00:33:41,919
triggerable just by creating and

00:33:40,240 --> 00:33:44,960
destroying that namesake

00:33:41,919 --> 00:33:47,440
net namespaces it wasn't rediscovered

00:33:44,960 --> 00:33:51,039
for six months after we tweeted about it

00:33:47,440 --> 00:33:53,360
and the default syscaller config change

00:33:51,039 --> 00:33:55,679
the attack surface exposed by

00:33:53,360 --> 00:33:59,440
unprivileged user name spaces

00:33:55,679 --> 00:34:02,159
isn't uh decreasing anytime soon

00:33:59,440 --> 00:34:05,440
in fact it continues to be added to i've

00:34:02,159 --> 00:34:08,800
provided three commits here where

00:34:05,440 --> 00:34:12,800
additional functionality was exposed

00:34:08,800 --> 00:34:12,800
through unprivileged username spaces

00:34:12,879 --> 00:34:17,119
when exposing this additional

00:34:14,800 --> 00:34:19,839
functionality the question is usually

00:34:17,119 --> 00:34:21,679
do we want this functionality and not

00:34:19,839 --> 00:34:24,639
does this newly allowed code pass

00:34:21,679 --> 00:34:28,240
existing buzzing tests

00:34:24,639 --> 00:34:28,960
it would be good if that became a strict

00:34:28,240 --> 00:34:32,720
requirement

00:34:28,960 --> 00:34:36,079
for exposing a new functionality like

00:34:32,720 --> 00:34:36,079
this to unprivileged users

00:34:40,159 --> 00:34:43,679
project zero exploits for the past years

00:34:42,639 --> 00:34:46,839
have mainly abused

00:34:43,679 --> 00:34:48,000
fuse and user fault fd for exploit

00:34:46,839 --> 00:34:50,480
reliability

00:34:48,000 --> 00:34:52,159
in a continuing trend attackers still

00:34:50,480 --> 00:34:54,720
don't care about whether a vulnerability

00:34:52,159 --> 00:34:56,800
has a cve assigned or not

00:34:54,720 --> 00:34:59,040
as we know with the upstream policies

00:34:56,800 --> 00:35:01,760
it's much more likely that it won't have

00:34:59,040 --> 00:35:04,560
one unless it gets publicly exploited

00:35:01,760 --> 00:35:05,119
is highly visible or is discovered by a

00:35:04,560 --> 00:35:08,240
vendor

00:35:05,119 --> 00:35:10,640
interested in assigning cves

00:35:08,240 --> 00:35:12,400
in the slide here there's a link to a

00:35:10,640 --> 00:35:14,400
project zero blog talking about a

00:35:12,400 --> 00:35:16,800
vulnerability being exploited

00:35:14,400 --> 00:35:19,440
with an in the wild o'day allegedly

00:35:16,800 --> 00:35:22,720
developed by nso group

00:35:19,440 --> 00:35:25,119
in this instance the fix did get applied

00:35:22,720 --> 00:35:28,160
to the upstream stable kernels

00:35:25,119 --> 00:35:30,400
the commit message plainly mentioned the

00:35:28,160 --> 00:35:31,920
use after free mentioned that it was

00:35:30,400 --> 00:35:36,000
found by says caller

00:35:31,920 --> 00:35:36,000
and cc the stable mailing list

00:35:36,400 --> 00:35:40,960
i had read a complaint that it didn't

00:35:38,000 --> 00:35:43,040
have uh a fixes tag but

00:35:40,960 --> 00:35:44,560
the fact that it was applied properly to

00:35:43,040 --> 00:35:46,880
the upstream

00:35:44,560 --> 00:35:48,079
uh stable kernels seems good enough for

00:35:46,880 --> 00:35:50,720
me but uh

00:35:48,079 --> 00:35:51,839
perhaps that was part of the issue as to

00:35:50,720 --> 00:35:55,520
why it wasn't

00:35:51,839 --> 00:35:58,560
applied to the android

00:35:55,520 --> 00:36:00,320
kernel that needed it it may not have

00:35:58,560 --> 00:36:02,560
been clear that it needed to be applied

00:36:00,320 --> 00:36:02,560
there

00:36:03,520 --> 00:36:07,040
yeah so still it wasn't fixed in some

00:36:05,599 --> 00:36:09,040
affected android kernels

00:36:07,040 --> 00:36:11,359
illustrating that downstream security

00:36:09,040 --> 00:36:14,720
gaps will continue to exist

00:36:11,359 --> 00:36:17,119
even if if upstream's process works as

00:36:14,720 --> 00:36:17,119
it should

00:36:18,480 --> 00:36:22,560
finally interpreter security will become

00:36:21,040 --> 00:36:24,839
increasingly important

00:36:22,560 --> 00:36:27,599
the work from microsoft red hat and

00:36:24,839 --> 00:36:30,640
others are necessary steps that

00:36:27,599 --> 00:36:33,520
ideally should have started long ago

00:36:30,640 --> 00:36:35,760
it was always an important topic but the

00:36:33,520 --> 00:36:37,440
typical focus before was avoiding read

00:36:35,760 --> 00:36:39,760
write execute on disk

00:36:37,440 --> 00:36:41,359
binary signing and other techniques so

00:36:39,760 --> 00:36:44,320
the importance of protecting

00:36:41,359 --> 00:36:44,960
interpreter inputs wasn't top of mind uh

00:36:44,320 --> 00:36:47,440
but now

00:36:44,960 --> 00:36:48,400
you know in the days of uh all the rest

00:36:47,440 --> 00:36:50,880
of the

00:36:48,400 --> 00:36:52,320
you know low hanging fruit being locked

00:36:50,880 --> 00:36:55,119
down

00:36:52,320 --> 00:36:58,400
you know now this is becoming much more

00:36:55,119 --> 00:36:58,400
of an important topic

00:37:05,119 --> 00:37:09,280
reactionary security doesn't work

00:37:06,960 --> 00:37:12,000
anymore outside of project zero

00:37:09,280 --> 00:37:14,079
few exploits are published publicly and

00:37:12,000 --> 00:37:16,800
i'd argue from a defense perspective

00:37:14,079 --> 00:37:18,400
project zero x project zeros exploits

00:37:16,800 --> 00:37:20,560
have been of little use

00:37:18,400 --> 00:37:22,000
as they frequently reuse old techniques

00:37:20,560 --> 00:37:24,640
or reuse some of their

00:37:22,000 --> 00:37:26,400
same techniques from previous exploits

00:37:24,640 --> 00:37:28,079
of theirs

00:37:26,400 --> 00:37:30,640
today's security professionals

00:37:28,079 --> 00:37:32,640
especially the younger generation

00:37:30,640 --> 00:37:34,480
expect to be paid for their work

00:37:32,640 --> 00:37:35,440
companies like zorodium will pay them

00:37:34,480 --> 00:37:38,240
for their linux

00:37:35,440 --> 00:37:40,079
kernel exploits as we saw on our earlier

00:37:38,240 --> 00:37:42,160
slide companies like zdi

00:37:40,079 --> 00:37:44,000
will run contests with prizes in order

00:37:42,160 --> 00:37:45,359
to get early protection filters out to

00:37:44,000 --> 00:37:47,359
their customers

00:37:45,359 --> 00:37:48,800
and still other security companies hire

00:37:47,359 --> 00:37:51,680
up these individuals

00:37:48,800 --> 00:37:53,680
to develop and sell such exploits

00:37:51,680 --> 00:37:56,560
there's been some movement recently from

00:37:53,680 --> 00:37:58,720
google to pay out for some of these

00:37:56,560 --> 00:38:00,880
exploits but currently at least

00:37:58,720 --> 00:38:02,560
it appears to be well below market rates

00:38:00,880 --> 00:38:06,560
at least as far as

00:38:02,560 --> 00:38:08,560
what zorodium claims to be offering

00:38:06,560 --> 00:38:10,480
it's always been the case for us but as

00:38:08,560 --> 00:38:11,839
upstream moves further along the path of

00:38:10,480 --> 00:38:13,599
self-protection

00:38:11,839 --> 00:38:14,800
techniques will be increasingly more

00:38:13,599 --> 00:38:16,400
important than individual

00:38:14,800 --> 00:38:19,760
vulnerabilities

00:38:16,400 --> 00:38:22,400
you can't start wait uh you can't

00:38:19,760 --> 00:38:25,520
wait uh for a public exploit to start

00:38:22,400 --> 00:38:28,079
thinking about how to improve security

00:38:25,520 --> 00:38:28,880
as someone mentioned to me recently the

00:38:28,079 --> 00:38:31,040
cat

00:38:28,880 --> 00:38:34,320
the mouse in the cat and mouse game has

00:38:31,040 --> 00:38:34,320
slept into a hole in the wall

00:38:35,440 --> 00:38:38,800
finally something that was published

00:38:37,040 --> 00:38:40,079
late last year but got little public

00:38:38,800 --> 00:38:43,119
attention it seems is

00:38:40,079 --> 00:38:45,280
automatic exploit generation

00:38:43,119 --> 00:38:46,240
the idea has been around uh for some

00:38:45,280 --> 00:38:48,960
time

00:38:46,240 --> 00:38:50,160
but i really feel like the work that was

00:38:48,960 --> 00:38:53,359
presented in

00:38:50,160 --> 00:38:54,560
december of last year was a big

00:38:53,359 --> 00:38:57,839
improvement in the

00:38:54,560 --> 00:38:58,880
state of the art it's become rather

00:38:57,839 --> 00:39:01,040
capable

00:38:58,880 --> 00:39:03,520
able to generate a couple dozen unique

00:39:01,040 --> 00:39:05,920
exploits for an individual vulnerability

00:39:03,520 --> 00:39:07,280
and works reliably as long as cfi isn't

00:39:05,920 --> 00:39:10,320
in place

00:39:07,280 --> 00:39:11,599
if aeg takes off in public use it's

00:39:10,320 --> 00:39:14,320
going to make what are called

00:39:11,599 --> 00:39:15,680
end day or patch gapping exploits and

00:39:14,320 --> 00:39:18,160
the protection against them

00:39:15,680 --> 00:39:19,680
even more important and if you're

00:39:18,160 --> 00:39:22,400
interested in learning more about that

00:39:19,680 --> 00:39:24,320
the link is available here in the slides

00:39:22,400 --> 00:39:25,839
it's an interesting presentation that

00:39:24,320 --> 00:39:27,920
touched on the

00:39:25,839 --> 00:39:30,000
one of the same points from this talk

00:39:27,920 --> 00:39:32,000
that the harsh reality is that we cannot

00:39:30,000 --> 00:39:34,000
patch all bugs immediately

00:39:32,000 --> 00:39:35,280
their idea was neat actually going from

00:39:34,000 --> 00:39:37,520
that base position

00:39:35,280 --> 00:39:40,480
they used aeg to help prioritize the

00:39:37,520 --> 00:39:41,920
fixing of cisco reported vulnerabilities

00:39:40,480 --> 00:39:45,440
based on whether they were able to

00:39:41,920 --> 00:39:47,520
automatically generate exploits for them

00:39:45,440 --> 00:39:48,800
their presentation mentioned that cisco

00:39:47,520 --> 00:39:52,079
reports increased by

00:39:48,800 --> 00:39:56,480
200 bugs each month on the date they

00:39:52,079 --> 00:39:58,640
checked november 24 2019 there are 459

00:39:56,480 --> 00:40:01,040
reports not fixed

00:39:58,640 --> 00:40:02,880
next i'll be giving my recommendations

00:40:01,040 --> 00:40:11,760
for improving linux security

00:40:02,880 --> 00:40:14,640
and its processes in the future

00:40:11,760 --> 00:40:16,319
rather than give you a list of uh what

00:40:14,640 --> 00:40:17,839
all we've been working on the past

00:40:16,319 --> 00:40:19,760
couple years that we think will be

00:40:17,839 --> 00:40:21,760
important in the upcoming decade

00:40:19,760 --> 00:40:23,359
we're going to leave it at defenses for

00:40:21,760 --> 00:40:25,520
data only attacks

00:40:23,359 --> 00:40:27,119
and instead offers suggestions for how

00:40:25,520 --> 00:40:29,119
upstream can refocus

00:40:27,119 --> 00:40:31,359
and put its existing limited security

00:40:29,119 --> 00:40:33,440
resources to the most effective use

00:40:31,359 --> 00:40:36,400
while perhaps also attracting the newer

00:40:33,440 --> 00:40:39,200
generation of security mines

00:40:36,400 --> 00:40:41,920
so the number of bypasses that existed

00:40:39,200 --> 00:40:44,560
and continue to exist for kslr

00:40:41,920 --> 00:40:46,400
still haven't got the message across but

00:40:44,560 --> 00:40:48,880
the fact remains that kslr has been

00:40:46,400 --> 00:40:50,839
repeatedly proven to be security theater

00:40:48,880 --> 00:40:52,400
i don't think there's been a single time

00:40:50,839 --> 00:40:55,040
where

00:40:52,400 --> 00:40:56,400
an exploit needed a kslr bypass where

00:40:55,040 --> 00:40:58,319
one wasn't

00:40:56,400 --> 00:41:00,720
one or multiple weren't readily

00:40:58,319 --> 00:41:02,480
available

00:41:00,720 --> 00:41:04,400
operating under the assumption of no

00:41:02,480 --> 00:41:06,000
information leaks for the linux kernel

00:41:04,400 --> 00:41:08,640
is a losing bet

00:41:06,000 --> 00:41:10,800
across multiple architectures kslr

00:41:08,640 --> 00:41:11,839
continues to consume a lot of developer

00:41:10,800 --> 00:41:14,319
time

00:41:11,839 --> 00:41:16,800
it's resulted in the confused percent p

00:41:14,319 --> 00:41:18,960
hashing effort that's hurt bug reporting

00:41:16,800 --> 00:41:20,400
and is applied inconsistently across the

00:41:18,960 --> 00:41:22,720
board

00:41:20,400 --> 00:41:25,599
as we mentioned earlier it takes up an

00:41:22,720 --> 00:41:29,040
outsized focus on the kspp list

00:41:25,599 --> 00:41:30,800
for example pi support to extend kslr

00:41:29,040 --> 00:41:32,240
for an extra two bits of equally

00:41:30,800 --> 00:41:34,480
leakable entropy

00:41:32,240 --> 00:41:37,520
is currently on version 11 of a patch

00:41:34,480 --> 00:41:41,520
series that started in august of 2017

00:41:37,520 --> 00:41:43,839
nearly three years ago another point

00:41:41,520 --> 00:41:45,680
consider modern and realistic threat

00:41:43,839 --> 00:41:46,480
models and implement security that can

00:41:45,680 --> 00:41:49,280
be effective

00:41:46,480 --> 00:41:50,720
and performant under those models for

00:41:49,280 --> 00:41:53,040
example

00:41:50,720 --> 00:41:53,839
why is yet another secrecy-based kernel

00:41:53,040 --> 00:41:56,079
mitigation

00:41:53,839 --> 00:41:58,079
being proposed to deal with rock when

00:41:56,079 --> 00:41:59,200
cfi has already been demonstrated for

00:41:58,079 --> 00:42:03,839
years

00:41:59,200 --> 00:42:03,839
those discussions need to happen

00:42:08,400 --> 00:42:12,720
seemingly simple mitigations can create

00:42:10,800 --> 00:42:14,480
some cost fallacies

00:42:12,720 --> 00:42:15,839
this happens when they cannot offer the

00:42:14,480 --> 00:42:18,880
security they purport

00:42:15,839 --> 00:42:20,240
under realistic threat models each

00:42:18,880 --> 00:42:22,560
workaround for an attack

00:42:20,240 --> 00:42:24,000
can add performance hit and if you knew

00:42:22,560 --> 00:42:25,760
about all the workarounds that would be

00:42:24,000 --> 00:42:27,280
necessary ahead of time

00:42:25,760 --> 00:42:29,280
you likely would have never merged the

00:42:27,280 --> 00:42:31,280
feature in the first place

00:42:29,280 --> 00:42:33,760
but after you've sunk years of work into

00:42:31,280 --> 00:42:36,000
a particular indefensible mitigation

00:42:33,760 --> 00:42:38,000
will you remove it or keep adding to the

00:42:36,000 --> 00:42:39,760
hacks and performance it

00:42:38,000 --> 00:42:41,839
this kind of thinking hasn't played out

00:42:39,760 --> 00:42:43,599
yet for fine grain kslr

00:42:41,839 --> 00:42:46,400
but i believe it'll prove to be another

00:42:43,599 --> 00:42:46,400
example of this

00:42:47,119 --> 00:42:50,560
we have to resist the thinking of we

00:42:49,200 --> 00:42:53,280
have to do something

00:42:50,560 --> 00:42:55,040
this is something let's do this i've

00:42:53,280 --> 00:42:56,160
linked here to a blog post by

00:42:55,040 --> 00:42:58,400
halvarflake which

00:42:56,160 --> 00:43:00,160
nicely summarizes the steps that should

00:42:58,400 --> 00:43:01,920
be taken before introducing a new

00:43:00,160 --> 00:43:03,680
mitigation

00:43:01,920 --> 00:43:05,040
keep in mind that with the dearth of

00:43:03,680 --> 00:43:06,960
public exploits

00:43:05,040 --> 00:43:09,599
developers only have to convince each

00:43:06,960 --> 00:43:11,599
other to ship a mitigation

00:43:09,599 --> 00:43:14,160
there's little to no independent or

00:43:11,599 --> 00:43:17,680
expert security evaluation happening

00:43:14,160 --> 00:43:21,520
outside of yonhorn so shout out to him

00:43:17,680 --> 00:43:21,520
as he's doing a lot of the heavy lifting

00:43:24,839 --> 00:43:27,839
actually

00:43:29,839 --> 00:43:34,240
the quality of benchmarks for security

00:43:32,240 --> 00:43:35,920
features proposed for inclusion into the

00:43:34,240 --> 00:43:38,319
kernel needs to improve

00:43:35,920 --> 00:43:40,400
if you recall from the academic paper

00:43:38,319 --> 00:43:41,760
for kaiser the feature which later

00:43:40,400 --> 00:43:43,520
became pti

00:43:41,760 --> 00:43:45,440
and actually what ended up getting

00:43:43,520 --> 00:43:48,160
merged in the

00:43:45,440 --> 00:43:49,280
4.4 kernel because they didn't backport

00:43:48,160 --> 00:43:52,480
the uh

00:43:49,280 --> 00:43:55,200
the actual pti implementation

00:43:52,480 --> 00:43:57,599
it once claimed 0.1 per percent

00:43:55,200 --> 00:44:00,640
performance it

00:43:57,599 --> 00:44:02,640
uh which we now know is not true at all

00:44:00,640 --> 00:44:04,560
uh a one percent performance hit was

00:44:02,640 --> 00:44:06,880
claimed for stack league

00:44:04,560 --> 00:44:08,319
reptylines were marketed as low impact

00:44:06,880 --> 00:44:10,720
but ended up having a large

00:44:08,319 --> 00:44:11,680
impact on network throughput requiring a

00:44:10,720 --> 00:44:13,599
lot of manual

00:44:11,680 --> 00:44:15,839
changes to eliminate indirect calls in

00:44:13,599 --> 00:44:17,920
the code paths there

00:44:15,839 --> 00:44:19,599
the benchmarks i see perform mostly

00:44:17,920 --> 00:44:21,280
involve kernel compilation

00:44:19,599 --> 00:44:24,000
and a task that only spends a tiny

00:44:21,280 --> 00:44:25,520
percentage of its time in the kernel

00:44:24,000 --> 00:44:27,359
most changes to the kernel on a

00:44:25,520 --> 00:44:28,880
benchmark that only spends one percent

00:44:27,359 --> 00:44:30,640
of its time in the kernel

00:44:28,880 --> 00:44:32,480
aren't going to see a huge performance

00:44:30,640 --> 00:44:34,319
hit it doesn't mean the hit

00:44:32,480 --> 00:44:36,000
doesn't exist just so you haven't

00:44:34,319 --> 00:44:37,760
adequately profiled the hit

00:44:36,000 --> 00:44:39,040
or have diluted it through the choice of

00:44:37,760 --> 00:44:41,359
benchmark

00:44:39,040 --> 00:44:42,720
ideally a suite of benchmarks should be

00:44:41,359 --> 00:44:45,599
performed on a farm of

00:44:42,720 --> 00:44:46,880
consumer server cpus of at least the

00:44:45,599 --> 00:44:48,240
past five years

00:44:46,880 --> 00:44:51,119
especially with all the intel

00:44:48,240 --> 00:44:53,599
vulnerabilities lately and

00:44:51,119 --> 00:44:55,839
how quickly the performance

00:44:53,599 --> 00:44:59,920
characteristics of certain instructions

00:44:55,839 --> 00:45:05,839
changes or keep waiting for pharonix to

00:44:59,920 --> 00:45:05,839
share the bad news with the public

00:45:08,079 --> 00:45:12,319
development organization is still

00:45:09,760 --> 00:45:14,720
focused on patches and mailing lists

00:45:12,319 --> 00:45:16,480
there have been lots of calls to improve

00:45:14,720 --> 00:45:17,760
that but it doesn't seem like there's

00:45:16,480 --> 00:45:20,640
been any

00:45:17,760 --> 00:45:21,280
traction yet in many instances some of

00:45:20,640 --> 00:45:24,240
the

00:45:21,280 --> 00:45:25,599
examples we discussed earlier including

00:45:24,240 --> 00:45:26,160
some of the examples we discussed

00:45:25,599 --> 00:45:28,000
earlier

00:45:26,160 --> 00:45:30,480
information was available online

00:45:28,000 --> 00:45:32,319
pointing to a bug or a proper fix

00:45:30,480 --> 00:45:35,119
the current process involves essentially

00:45:32,319 --> 00:45:36,960
ignoring that as external information

00:45:35,119 --> 00:45:39,119
until it falls in line with the standard

00:45:36,960 --> 00:45:41,359
linux development process

00:45:39,119 --> 00:45:42,880
maintainers exist to corral patches into

00:45:41,359 --> 00:45:44,800
the upstream kernel

00:45:42,880 --> 00:45:46,000
what about corralling information into a

00:45:44,800 --> 00:45:48,800
centralized location

00:45:46,000 --> 00:45:50,880
to improve the quality of the kernel

00:45:48,800 --> 00:45:53,440
linux has a group of people for handling

00:45:50,880 --> 00:45:55,280
private vulnerability reports what about

00:45:53,440 --> 00:45:57,119
a group that ensures stable kernels

00:45:55,280 --> 00:45:58,160
actually get the security fixes they

00:45:57,119 --> 00:45:59,520
need

00:45:58,160 --> 00:46:01,520
the problem of course is that the

00:45:59,520 --> 00:46:03,680
general public wasn't involved in the

00:46:01,520 --> 00:46:05,839
decision to bump lts support

00:46:03,680 --> 00:46:06,880
from two years to six years to the

00:46:05,839 --> 00:46:09,119
primary

00:46:06,880 --> 00:46:10,400
benefit of phone vendors but that help

00:46:09,119 --> 00:46:15,839
will need to be found

00:46:10,400 --> 00:46:15,839
from somewhere

00:46:18,720 --> 00:46:23,839
fail fast iterate faster a lot of

00:46:21,920 --> 00:46:25,280
the review for security patches is

00:46:23,839 --> 00:46:27,599
trivial nitpicking and can

00:46:25,280 --> 00:46:28,720
kicking almost as a kind of hazing to

00:46:27,599 --> 00:46:30,720
see if the person will

00:46:28,720 --> 00:46:33,440
just go away or whether they'll put in

00:46:30,720 --> 00:46:35,280
the time to address perceived problems

00:46:33,440 --> 00:46:36,480
with security code often touching a

00:46:35,280 --> 00:46:38,800
number of different

00:46:36,480 --> 00:46:40,160
subsystems there end up being too many

00:46:38,800 --> 00:46:41,599
cooks in the kitchen

00:46:40,160 --> 00:46:43,920
with different priorities and

00:46:41,599 --> 00:46:46,000
requirements and this produces wildly

00:46:43,920 --> 00:46:47,599
different standards and timelines

00:46:46,000 --> 00:46:49,839
compared to work submitted for an

00:46:47,599 --> 00:46:51,520
individual subsystem

00:46:49,839 --> 00:46:53,599
in the speaker notes for this slide i've

00:46:51,520 --> 00:46:55,520
included some links on the history of

00:46:53,599 --> 00:46:56,560
constipa fixes that were submitted

00:46:55,520 --> 00:46:59,680
upstream

00:46:56,560 --> 00:47:02,560
uh around 2009

00:46:59,680 --> 00:47:04,160
much of the reason uh constant five

00:47:02,560 --> 00:47:04,960
fixes like the ones that were proposed

00:47:04,160 --> 00:47:06,720
back then

00:47:04,960 --> 00:47:10,160
have been trickling in for the past

00:47:06,720 --> 00:47:12,960
decade is because of this broken process

00:47:10,160 --> 00:47:14,000
of it just being so difficult to

00:47:12,960 --> 00:47:15,920
introduce

00:47:14,000 --> 00:47:18,480
some security changes that affect

00:47:15,920 --> 00:47:22,240
multiple subsystems

00:47:18,480 --> 00:47:23,760
is having the kslr pi or sarah code

00:47:22,240 --> 00:47:26,400
dragged out over three years in

00:47:23,760 --> 00:47:28,400
effective use of developers time

00:47:26,400 --> 00:47:30,319
when an invisible patch is presented

00:47:28,400 --> 00:47:31,440
that has no chance of being merged in

00:47:30,319 --> 00:47:32,880
any form

00:47:31,440 --> 00:47:35,040
is it really helpful to leave the

00:47:32,880 --> 00:47:37,119
submitter on by suggesting trivial

00:47:35,040 --> 00:47:39,200
nitpicks and typo fixes

00:47:37,119 --> 00:47:41,920
and asking them to put out a version 2

00:47:39,200 --> 00:47:44,559
of version 3 of version 20.

00:47:41,920 --> 00:47:46,960
for example when the hksp patch was

00:47:44,559 --> 00:47:48,960
submitted to the kspp list

00:47:46,960 --> 00:47:50,079
the first question wasn't what is your

00:47:48,960 --> 00:47:52,960
threat model

00:47:50,079 --> 00:47:54,160
or what are you trying to accomplish

00:47:52,960 --> 00:47:55,760
let's think about what the most

00:47:54,160 --> 00:47:56,720
effective way of accomplishing this

00:47:55,760 --> 00:48:00,000
would be

00:47:56,720 --> 00:48:02,000
but instead the response was interesting

00:48:00,000 --> 00:48:03,760
are you all going to split this up into

00:48:02,000 --> 00:48:07,839
submittable pieces so that they can get

00:48:03,760 --> 00:48:07,839
proper review emerged upstream

00:48:08,079 --> 00:48:11,440
the time to decide on an unprivileged

00:48:10,160 --> 00:48:13,680
cisctl

00:48:11,440 --> 00:48:15,839
or an easily abused new feature when the

00:48:13,680 --> 00:48:17,119
features is when the feature is first

00:48:15,839 --> 00:48:19,440
introduced

00:48:17,119 --> 00:48:21,280
not years after the necessity is obvious

00:48:19,440 --> 00:48:23,040
via multiple exploits

00:48:21,280 --> 00:48:25,280
with examples provided here of

00:48:23,040 --> 00:48:28,319
unprivileged username spaces

00:48:25,280 --> 00:48:30,400
these are fault fd and perf it must be

00:48:28,319 --> 00:48:33,200
possible to do better here and i

00:48:30,400 --> 00:48:35,839
noted that it is because we've done this

00:48:33,200 --> 00:48:35,839
already

00:48:40,319 --> 00:48:43,520
finally find a way to fund security work

00:48:42,559 --> 00:48:45,920
again

00:48:43,520 --> 00:48:47,680
no obituary was posted for it but the

00:48:45,920 --> 00:48:49,760
cii is long dead

00:48:47,680 --> 00:48:51,920
at least as far as operations outside of

00:48:49,760 --> 00:48:52,559
awarding a security badge to the linux

00:48:51,920 --> 00:48:54,000
kernel

00:48:52,559 --> 00:48:56,800
which happened last month for some

00:48:54,000 --> 00:48:58,960
reason i have included a link to

00:48:56,800 --> 00:49:00,160
one of the members of its advisory board

00:48:58,960 --> 00:49:03,280
mentioning

00:49:00,160 --> 00:49:03,680
the death of the cii on twitter last

00:49:03,280 --> 00:49:08,240
year

00:49:03,680 --> 00:49:10,240
2019. the last announcement from the cii

00:49:08,240 --> 00:49:12,640
was in 2017

00:49:10,240 --> 00:49:14,640
the last mail on the cii discuss mailing

00:49:12,640 --> 00:49:16,000
list was from a non-member in december

00:49:14,640 --> 00:49:19,440
2017 regarding

00:49:16,000 --> 00:49:22,720
the cii uh regarding ci support

00:49:19,440 --> 00:49:24,800
for open ssh having ended in 2016

00:49:22,720 --> 00:49:26,000
but still being listed on the cii

00:49:24,800 --> 00:49:28,079
website

00:49:26,000 --> 00:49:29,520
according to open ssl's website its

00:49:28,079 --> 00:49:33,280
funding from the cii

00:49:29,520 --> 00:49:33,280
also ended in 2016.

00:49:33,520 --> 00:49:38,400
yet on cii's website it shows it as a

00:49:36,400 --> 00:49:40,960
currently supported project

00:49:38,400 --> 00:49:43,280
this is simply dishonest you can't solve

00:49:40,960 --> 00:49:45,040
problems you won't admit exists

00:49:43,280 --> 00:49:47,119
and you can't get funding to solve those

00:49:45,040 --> 00:49:49,200
problems if companies think the funding

00:49:47,119 --> 00:49:52,000
already exists

00:49:49,200 --> 00:49:53,760
finally directly from the still active

00:49:52,000 --> 00:49:56,079
cii website is a

00:49:53,760 --> 00:49:58,000
quote i'd like to read in part because

00:49:56,079 --> 00:50:01,599
it's a good mission statement if it were

00:49:58,000 --> 00:50:01,599
acted on with real intention

00:50:01,680 --> 00:50:06,000
the stakes have never been higher for

00:50:03,599 --> 00:50:07,760
open source software security

00:50:06,000 --> 00:50:10,160
with millions of people around the world

00:50:07,760 --> 00:50:12,160
relying on open source software

00:50:10,160 --> 00:50:13,760
and vulnerabilities like heartbleed

00:50:12,160 --> 00:50:15,920
putting everyone at risk

00:50:13,760 --> 00:50:17,839
it's time to change the way we support

00:50:15,920 --> 00:50:20,559
protect and fortify

00:50:17,839 --> 00:50:26,160
open software and i'll leave you with

00:50:20,559 --> 00:50:28,240
that to think about

00:50:26,160 --> 00:50:29,440
so thank you everyone for your time this

00:50:28,240 --> 00:50:31,680
morning i

00:50:29,440 --> 00:50:33,839
hope that like my talk from 10 years ago

00:50:31,680 --> 00:50:36,720
this talk helps provide

00:50:33,839 --> 00:50:38,720
the public visibility put to push for

00:50:36,720 --> 00:50:40,319
some of the changes that i mentioned

00:50:38,720 --> 00:50:42,319
with the result being a more secure

00:50:40,319 --> 00:50:44,559
linux kernel for everyone

00:50:42,319 --> 00:50:46,079
with the remaining time i have i can

00:50:44,559 --> 00:50:47,359
answer any additional questions you may

00:50:46,079 --> 00:50:55,839
have in the chat

00:50:47,359 --> 00:50:55,839
thanks again

00:50:58,800 --> 00:51:00,880

YouTube URL: https://www.youtube.com/watch?v=CT4G-Rn-sHc


