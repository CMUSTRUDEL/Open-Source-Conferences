Title: SELint - An SELinux Policy Static Analysis Tool - Daniel Burgener, Microsoft
Publication date: 2020-09-08
Playlist: Linux Security Summit NA 2020
Description: 
	SELint - An SELinux Policy Static Analysis Tool - Daniel Burgener, Microsoft
Captions: 
	00:00:02,320 --> 00:00:05,680
hello everyone

00:00:03,439 --> 00:00:07,359
my name is daniel bergener i'm an

00:00:05,680 --> 00:00:09,200
engineer at microsoft

00:00:07,359 --> 00:00:11,440
and i'm going to be talking to you today

00:00:09,200 --> 00:00:15,599
about a tool that i developed

00:00:11,440 --> 00:00:17,680
to do static analysis on se linux policy

00:00:15,599 --> 00:00:19,279
this tool is called se lent so i'm going

00:00:17,680 --> 00:00:20,560
to start with a brief introduction

00:00:19,279 --> 00:00:22,720
i'm going to talk about some of the

00:00:20,560 --> 00:00:24,160
challenges involved in writing essie

00:00:22,720 --> 00:00:25,599
linux policy

00:00:24,160 --> 00:00:28,000
and then i'm going to show some of the

00:00:25,599 --> 00:00:29,920
example checks that essie lint can check

00:00:28,000 --> 00:00:31,679
for and then a brief overview of how to

00:00:29,920 --> 00:00:34,239
use se lens and take advantage of some

00:00:31,679 --> 00:00:36,239
of its features

00:00:34,239 --> 00:00:37,520
so as i said my name is daniel berger

00:00:36,239 --> 00:00:40,239
i've been working on

00:00:37,520 --> 00:00:41,920
sc linux policy for about eight years

00:00:40,239 --> 00:00:45,600
and i'm at microsoft

00:00:41,920 --> 00:00:49,280
and i maintain sc lens and in my time

00:00:45,600 --> 00:00:51,360
working on sc linux policy i've

00:00:49,280 --> 00:00:53,440
spent a lot of time reviewing policy

00:00:51,360 --> 00:00:55,840
written by people who may be newer to

00:00:53,440 --> 00:00:56,719
policy or less experience doing se linux

00:00:55,840 --> 00:00:58,239
policy

00:00:56,719 --> 00:01:00,480
and doing that just like with any kind

00:00:58,239 --> 00:01:02,160
of code review i find myself

00:01:00,480 --> 00:01:03,760
talking about the same issues over and

00:01:02,160 --> 00:01:05,280
over again which are catchable by

00:01:03,760 --> 00:01:08,479
automated analysis

00:01:05,280 --> 00:01:12,320
so the goal here is sc lint is a tool

00:01:08,479 --> 00:01:15,360
to get a lot of that kind of normal

00:01:12,320 --> 00:01:17,520
craft in policy development dealt with

00:01:15,360 --> 00:01:18,560
automatically so it doesn't need human

00:01:17,520 --> 00:01:21,280
review

00:01:18,560 --> 00:01:21,920
uh so there's the github link to where

00:01:21,280 --> 00:01:25,520
you can find

00:01:21,920 --> 00:01:28,960
sc lint and we just released version 1.1

00:01:25,520 --> 00:01:30,720
in may and still ongoing lots of active

00:01:28,960 --> 00:01:33,520
development to improve it

00:01:30,720 --> 00:01:34,079
and add more checks etc so the reason

00:01:33,520 --> 00:01:36,320
for this

00:01:34,079 --> 00:01:38,560
is to improve sc linux policy

00:01:36,320 --> 00:01:41,200
scalability and maintainability

00:01:38,560 --> 00:01:42,799
as i said to save reviewer time uh most

00:01:41,200 --> 00:01:43,759
of the environments that i've worked on

00:01:42,799 --> 00:01:46,000
policy in

00:01:43,759 --> 00:01:47,680
you tend to have a lot of people who are

00:01:46,000 --> 00:01:49,280
very new to policy perhaps

00:01:47,680 --> 00:01:51,280
developers who are writing code and then

00:01:49,280 --> 00:01:52,960
also writing policy for that code

00:01:51,280 --> 00:01:55,439
and then you have a handful of people

00:01:52,960 --> 00:01:56,159
who have more background with se linux

00:01:55,439 --> 00:01:58,240
and using it

00:01:56,159 --> 00:01:59,920
we want to minimize the amount of time

00:01:58,240 --> 00:02:02,799
that those people have to spend

00:01:59,920 --> 00:02:04,079
reviewing the policy to free them up for

00:02:02,799 --> 00:02:06,640
other issues

00:02:04,079 --> 00:02:08,000
we can also help to find issues prior to

00:02:06,640 --> 00:02:09,920
failures in production

00:02:08,000 --> 00:02:11,760
take some of the burden off of testing

00:02:09,920 --> 00:02:13,360
and move it to static analysis

00:02:11,760 --> 00:02:15,040
and one of the main goals here is to

00:02:13,360 --> 00:02:17,520
have something that's good for inclusion

00:02:15,040 --> 00:02:19,599
and automated build pipelines

00:02:17,520 --> 00:02:20,640
as another benefit we've already

00:02:19,599 --> 00:02:24,080
submitted

00:02:20,640 --> 00:02:26,720
quite a few fixes to uh reference policy

00:02:24,080 --> 00:02:27,840
and that means that the issues that

00:02:26,720 --> 00:02:29,760
sclint is finding

00:02:27,840 --> 00:02:31,360
everyone's getting the benefit of those

00:02:29,760 --> 00:02:33,680
upstream and we

00:02:31,360 --> 00:02:35,200
hope to continue submitting upstream

00:02:33,680 --> 00:02:37,440
reference policy fixes

00:02:35,200 --> 00:02:39,040
based on things sc lint finds as we add

00:02:37,440 --> 00:02:40,720
new checks

00:02:39,040 --> 00:02:42,480
so first off let's talk about some of

00:02:40,720 --> 00:02:43,440
the challenges with using sc linux

00:02:42,480 --> 00:02:46,879
policy

00:02:43,440 --> 00:02:47,760
so as a story i recently purchased a new

00:02:46,879 --> 00:02:50,400
scanner

00:02:47,760 --> 00:02:51,120
and i was on the scanner manufacturer's

00:02:50,400 --> 00:02:54,480
website

00:02:51,120 --> 00:02:56,160
trying to get drivers for my scanner

00:02:54,480 --> 00:02:57,920
which worked great and i was able to get

00:02:56,160 --> 00:03:00,080
my scanner set up very easily

00:02:57,920 --> 00:03:00,959
but as i was looking at their faqs i

00:03:00,080 --> 00:03:04,159
noticed a

00:03:00,959 --> 00:03:06,159
what happens if sc linux is

00:03:04,159 --> 00:03:07,360
uh blocking the use of the scanner and

00:03:06,159 --> 00:03:09,519
so they had this

00:03:07,360 --> 00:03:10,560
mess of instructions which is really

00:03:09,519 --> 00:03:12,400
really long

00:03:10,560 --> 00:03:14,239
and intimidating if you don't really

00:03:12,400 --> 00:03:15,760
know what se linux is you've just tried

00:03:14,239 --> 00:03:18,800
to install the scanner

00:03:15,760 --> 00:03:21,200
on your sc linux enabled system and

00:03:18,800 --> 00:03:22,239
what should i do it's also worth noting

00:03:21,200 --> 00:03:24,959
that these

00:03:22,239 --> 00:03:26,159
uh instructions involve editing a

00:03:24,959 --> 00:03:29,040
generated file

00:03:26,159 --> 00:03:31,120
so this may very well not persist after

00:03:29,040 --> 00:03:33,120
a policy update and need to be redone

00:03:31,120 --> 00:03:35,120
which is not indicated here

00:03:33,120 --> 00:03:36,480
but fortunately they do provide

00:03:35,120 --> 00:03:39,200
alternative instructions

00:03:36,480 --> 00:03:41,200
which is how to disable sc linux and

00:03:39,200 --> 00:03:44,239
those are short sweet and simple

00:03:41,200 --> 00:03:47,360
so i imagine that most users

00:03:44,239 --> 00:03:48,560
who are using se linux are going to opt

00:03:47,360 --> 00:03:50,640
for the disable

00:03:48,560 --> 00:03:51,680
now the target here is not your in

00:03:50,640 --> 00:03:52,959
desktop user

00:03:51,680 --> 00:03:54,879
they're not going to write their own

00:03:52,959 --> 00:03:56,720
policy but the target here

00:03:54,879 --> 00:03:58,840
is policy writers who often in my

00:03:56,720 --> 00:04:00,480
experience end up in the same kinds of

00:03:58,840 --> 00:04:02,720
situations where

00:04:00,480 --> 00:04:03,760
se linux is hard and intimidating they

00:04:02,720 --> 00:04:06,159
have a big

00:04:03,760 --> 00:04:08,000
mess of instructions and this is just

00:04:06,159 --> 00:04:08,720
one of the many possible solutions to be

00:04:08,000 --> 00:04:12,879
considered

00:04:08,720 --> 00:04:14,080
so i would say that se linux is not

00:04:12,879 --> 00:04:16,320
necessarily hard

00:04:14,080 --> 00:04:18,160
but it is complex there's a lot of

00:04:16,320 --> 00:04:20,000
granularity exposed

00:04:18,160 --> 00:04:21,759
by sc linux and there's a lot of

00:04:20,000 --> 00:04:23,360
different solutions and it's context

00:04:21,759 --> 00:04:25,360
dependent which one's appropriate

00:04:23,360 --> 00:04:26,880
this is not a blame on the scanner

00:04:25,360 --> 00:04:29,199
manufacturer for providing

00:04:26,880 --> 00:04:30,160
in bad instructions as much as they

00:04:29,199 --> 00:04:31,919
don't know

00:04:30,160 --> 00:04:33,600
what your computer setup is it's hard to

00:04:31,919 --> 00:04:36,080
provide generic instructions

00:04:33,600 --> 00:04:36,720
so if disabling security features is

00:04:36,080 --> 00:04:38,639
common

00:04:36,720 --> 00:04:40,479
then it's important to make the use of

00:04:38,639 --> 00:04:43,040
security features easier

00:04:40,479 --> 00:04:44,720
as a linux security community we don't

00:04:43,040 --> 00:04:46,000
want to spend all of our time developing

00:04:44,720 --> 00:04:49,360
cool security features

00:04:46,000 --> 00:04:51,919
only for people to not use them so

00:04:49,360 --> 00:04:53,759
why is se linux hard i think there's

00:04:51,919 --> 00:04:55,360
fundamentally four reasons and there may

00:04:53,759 --> 00:04:58,320
be more but these are kind of the four

00:04:55,360 --> 00:04:58,720
that i think shows significance so one

00:04:58,320 --> 00:05:00,720
of them

00:04:58,720 --> 00:05:02,400
is that computing systems linux included

00:05:00,720 --> 00:05:04,400
are inherently complicated

00:05:02,400 --> 00:05:05,840
this is you know why we have all these

00:05:04,400 --> 00:05:09,199
discussions at

00:05:05,840 --> 00:05:11,280
lss for example about securing the linux

00:05:09,199 --> 00:05:13,360
kernel and why we spent years and years

00:05:11,280 --> 00:05:14,160
and there's still bugs because code is

00:05:13,360 --> 00:05:16,479
complicated

00:05:14,160 --> 00:05:19,120
it's challenging and there's bugs se

00:05:16,479 --> 00:05:21,919
linux provides very granular exposure

00:05:19,120 --> 00:05:22,400
to the low level implementation details

00:05:21,919 --> 00:05:25,600
of

00:05:22,400 --> 00:05:26,320
linux and the applications on your linux

00:05:25,600 --> 00:05:28,479
system

00:05:26,320 --> 00:05:30,080
and that can really result in some very

00:05:28,479 --> 00:05:32,160
unexpected corner cases

00:05:30,080 --> 00:05:33,919
that the person writing the se linux

00:05:32,160 --> 00:05:35,360
policy was not even aware they needed to

00:05:33,919 --> 00:05:37,360
be thinking at the level of this

00:05:35,360 --> 00:05:39,199
particular library or the level of the

00:05:37,360 --> 00:05:39,919
kernel or the level of a particular user

00:05:39,199 --> 00:05:43,120
space

00:05:39,919 --> 00:05:45,199
daemon or whatever a second reason why

00:05:43,120 --> 00:05:47,520
se linux is complex is there is some

00:05:45,199 --> 00:05:48,160
inherent complexity in se linux as a

00:05:47,520 --> 00:05:51,360
system

00:05:48,160 --> 00:05:52,000
so we've got five different models of

00:05:51,360 --> 00:05:54,080
security

00:05:52,000 --> 00:05:56,160
in sc linux permission denials can come

00:05:54,080 --> 00:05:58,080
from any of those models

00:05:56,160 --> 00:05:59,280
additionally there's various user space

00:05:58,080 --> 00:06:01,840
components that are

00:05:59,280 --> 00:06:02,319
se linux aware so you may be dealing

00:06:01,840 --> 00:06:05,120
with

00:06:02,319 --> 00:06:06,000
a problem related to sc linux that

00:06:05,120 --> 00:06:09,680
actually comes

00:06:06,000 --> 00:06:11,759
from systemd or dbus or pam or any of

00:06:09,680 --> 00:06:13,520
these other se linux aware components

00:06:11,759 --> 00:06:14,960
and now suddenly as an se linux

00:06:13,520 --> 00:06:17,120
developer you're thinking about the

00:06:14,960 --> 00:06:18,720
implementation details of system d

00:06:17,120 --> 00:06:20,960
which is not something you necessarily

00:06:18,720 --> 00:06:22,639
wanted to have to think about

00:06:20,960 --> 00:06:24,720
additionally policies should generally

00:06:22,639 --> 00:06:27,039
conform to high-level security goals

00:06:24,720 --> 00:06:28,720
security can be hard because things like

00:06:27,039 --> 00:06:29,919
threat modeling are hard things

00:06:28,720 --> 00:06:31,759
like understanding the security

00:06:29,919 --> 00:06:32,800
properties of your system are hard now

00:06:31,759 --> 00:06:34,960
hopefully

00:06:32,800 --> 00:06:36,560
having static security policy is a

00:06:34,960 --> 00:06:39,759
helpful solution to that

00:06:36,560 --> 00:06:41,360
and we can enable people to articulate

00:06:39,759 --> 00:06:42,720
their high level security goals in a way

00:06:41,360 --> 00:06:44,800
that's analyzable

00:06:42,720 --> 00:06:46,560
but users have to be thinking about

00:06:44,800 --> 00:06:48,000
high-level security goals and have to

00:06:46,560 --> 00:06:51,520
implement policy that correctly

00:06:48,000 --> 00:06:54,160
implements those goals so

00:06:51,520 --> 00:06:56,560
in terms of finally writing scalable and

00:06:54,160 --> 00:06:58,160
maintainable policy is the fourth issue

00:06:56,560 --> 00:07:01,599
that i see as troubling

00:06:58,160 --> 00:07:03,280
and when we have good policy design

00:07:01,599 --> 00:07:05,199
that makes the security and functional

00:07:03,280 --> 00:07:06,240
implications of our policy a lot more

00:07:05,199 --> 00:07:08,479
clear

00:07:06,240 --> 00:07:10,319
and adherence to conventions just like

00:07:08,479 --> 00:07:12,160
writing any kind of source code can make

00:07:10,319 --> 00:07:14,080
the policy much more readable for

00:07:12,160 --> 00:07:16,080
future maintainers other developers

00:07:14,080 --> 00:07:17,440
reduce the chance of error there

00:07:16,080 --> 00:07:19,039
the proper use of appropriate

00:07:17,440 --> 00:07:20,639
abstractions will make the policy more

00:07:19,039 --> 00:07:23,039
resilient we're going to see an example

00:07:20,639 --> 00:07:25,440
of an issue with that in a little bit

00:07:23,039 --> 00:07:26,319
also portability requires some attention

00:07:25,440 --> 00:07:28,240
from the developer

00:07:26,319 --> 00:07:30,080
again just like using any language if i

00:07:28,240 --> 00:07:31,599
want to write selinux policy that's

00:07:30,080 --> 00:07:35,199
portable to another system

00:07:31,599 --> 00:07:37,120
that may potentially handle correctly

00:07:35,199 --> 00:07:39,120
changing properties of the system i'm

00:07:37,120 --> 00:07:40,560
working on we need to pay attention to

00:07:39,120 --> 00:07:42,960
how we do portability

00:07:40,560 --> 00:07:44,080
and finally uh reference policy which is

00:07:42,960 --> 00:07:46,800
the commonly used

00:07:44,080 --> 00:07:48,879
wrapper layer around sc linux i uses the

00:07:46,800 --> 00:07:49,759
m4 preprocessor language that has some

00:07:48,879 --> 00:07:52,240
subtleties

00:07:49,759 --> 00:07:54,240
and we don't necessarily as someone

00:07:52,240 --> 00:07:56,240
developing security policy

00:07:54,240 --> 00:07:58,000
want to have to become an expert on the

00:07:56,240 --> 00:08:00,000
subtleties of m4 in order to

00:07:58,000 --> 00:08:02,160
write good security policy but sometimes

00:08:00,000 --> 00:08:04,560
those details get exposed

00:08:02,160 --> 00:08:05,599
so how do we address these challenges so

00:08:04,560 --> 00:08:07,520
reference policy

00:08:05,599 --> 00:08:08,720
is a very huge step in terms of

00:08:07,520 --> 00:08:10,960
addressing a lot of these

00:08:08,720 --> 00:08:12,560
reference policy focuses on abstracting

00:08:10,960 --> 00:08:15,360
away the linux complexity

00:08:12,560 --> 00:08:16,240
it focuses on creating a portable base

00:08:15,360 --> 00:08:19,120
policy

00:08:16,240 --> 00:08:20,560
it focuses on allowing scalability by

00:08:19,120 --> 00:08:21,440
having encapsulation in different

00:08:20,560 --> 00:08:22,960
modules

00:08:21,440 --> 00:08:25,280
we also have analysis tools that can

00:08:22,960 --> 00:08:28,879
help check our high-level security goals

00:08:25,280 --> 00:08:30,720
but using reference policy requires the

00:08:28,879 --> 00:08:31,440
correct use of reference policy it's

00:08:30,720 --> 00:08:33,039
very easy

00:08:31,440 --> 00:08:35,279
to have a build system based on

00:08:33,039 --> 00:08:37,279
reference policy and not take advantage

00:08:35,279 --> 00:08:39,680
of the features that it affords to you

00:08:37,279 --> 00:08:40,959
or to take advantage of them incorrectly

00:08:39,680 --> 00:08:43,120
in a way that's going to

00:08:40,959 --> 00:08:45,519
increase the future maintenance burden

00:08:43,120 --> 00:08:48,160
so the overall goal here with sc lint

00:08:45,519 --> 00:08:50,480
is that if users can spend less time on

00:08:48,160 --> 00:08:50,880
reference policy syntax details they can

00:08:50,480 --> 00:08:53,920
spend

00:08:50,880 --> 00:08:55,200
more time on security and the end result

00:08:53,920 --> 00:08:57,680
is hopefully that everyone

00:08:55,200 --> 00:08:59,680
using se linux will have more secure

00:08:57,680 --> 00:09:02,080
systems

00:08:59,680 --> 00:09:03,920
so in terms of goals essie lent wants to

00:09:02,080 --> 00:09:06,240
report violations of

00:09:03,920 --> 00:09:08,080
normal conventions as well as poor style

00:09:06,240 --> 00:09:09,440
violations so i'm grouping convention

00:09:08,080 --> 00:09:11,519
and style differently

00:09:09,440 --> 00:09:13,600
in terms of convention being these are

00:09:11,519 --> 00:09:15,839
the commonly expected norms it's not

00:09:13,600 --> 00:09:16,880
necessarily right or wrong to do one way

00:09:15,839 --> 00:09:19,279
or the other

00:09:16,880 --> 00:09:21,200
but we've all as a community agreed at

00:09:19,279 --> 00:09:22,480
least in general to do things this way

00:09:21,200 --> 00:09:24,720
and so it makes it more readable to

00:09:22,480 --> 00:09:27,040
follow that style things are things that

00:09:24,720 --> 00:09:29,120
are really more objectively wrong

00:09:27,040 --> 00:09:30,480
that you're not necessarily introducing

00:09:29,120 --> 00:09:33,120
a bug or an error

00:09:30,480 --> 00:09:35,440
but it's going to cause you a

00:09:33,120 --> 00:09:37,120
maintenance burden down the road

00:09:35,440 --> 00:09:38,640
we also want to warn about policy that

00:09:37,120 --> 00:09:40,160
could potentially cause unexpected

00:09:38,640 --> 00:09:41,600
errors there's a lot of policy that

00:09:40,160 --> 00:09:43,040
works fine right now

00:09:41,600 --> 00:09:44,640
and then when you change something

00:09:43,040 --> 00:09:46,240
seemingly unrelated

00:09:44,640 --> 00:09:48,320
suddenly you're getting an error at

00:09:46,240 --> 00:09:49,600
compile time or at run time

00:09:48,320 --> 00:09:51,360
and we want to be able to warn about

00:09:49,600 --> 00:09:52,720
those situations early when we're doing

00:09:51,360 --> 00:09:55,680
static analysis

00:09:52,720 --> 00:09:57,680
so that we're not having trouble

00:09:55,680 --> 00:09:59,519
diagnosing a challenging to diagnose air

00:09:57,680 --> 00:10:01,519
down the road

00:09:59,519 --> 00:10:02,560
uh we also want to treat essie linux

00:10:01,519 --> 00:10:05,760
syntax and

00:10:02,560 --> 00:10:08,320
ref policy m4 usage as a unified grammar

00:10:05,760 --> 00:10:09,360
so a lot of existing tools will only

00:10:08,320 --> 00:10:12,640
deal with the base

00:10:09,360 --> 00:10:14,800
se linux language and the ability to

00:10:12,640 --> 00:10:17,360
treat reference policy syntax

00:10:14,800 --> 00:10:18,640
and the subset of m4 that it uses as all

00:10:17,360 --> 00:10:20,560
part of one language

00:10:18,640 --> 00:10:22,399
grammar really enables us to look into

00:10:20,560 --> 00:10:23,360
the style of how reference policy is

00:10:22,399 --> 00:10:25,519
being used

00:10:23,360 --> 00:10:26,959
we also want to be fully configurable uh

00:10:25,519 --> 00:10:28,560
to enable people to turn on

00:10:26,959 --> 00:10:30,240
and off the checks that they do or don't

00:10:28,560 --> 00:10:32,000
want and

00:10:30,240 --> 00:10:33,600
have granular disables so that this can

00:10:32,000 --> 00:10:35,360
be very usable if people are using a

00:10:33,600 --> 00:10:36,959
static analysis tool and it's providing

00:10:35,360 --> 00:10:38,240
them false positives they don't want and

00:10:36,959 --> 00:10:40,079
have no way to turn off they're going to

00:10:38,240 --> 00:10:42,399
stop using it

00:10:40,079 --> 00:10:44,000
and lastly want to make it easy for

00:10:42,399 --> 00:10:46,160
upstream to contribute

00:10:44,000 --> 00:10:47,600
checks so that if there's a particular

00:10:46,160 --> 00:10:48,399
policy development issue that's

00:10:47,600 --> 00:10:51,360
bothering you

00:10:48,399 --> 00:10:52,880
it's easy to add a check for it so i'm

00:10:51,360 --> 00:10:55,120
going to go over just four

00:10:52,880 --> 00:10:56,880
examples of the kinds of issues we find

00:10:55,120 --> 00:10:58,720
uh we actually find quite a bit more i

00:10:56,880 --> 00:11:00,560
have the number on a later slide

00:10:58,720 --> 00:11:02,000
but here's just four examples to give

00:11:00,560 --> 00:11:04,160
you a taste

00:11:02,000 --> 00:11:05,360
so this first one is a nice normal sc

00:11:04,160 --> 00:11:06,959
linux allow rule

00:11:05,360 --> 00:11:08,480
we're going to allow a domain called

00:11:06,959 --> 00:11:11,519
futi to

00:11:08,480 --> 00:11:14,320
read and write its own anonymous pipes

00:11:11,519 --> 00:11:16,480
and um this is based on a rule that i

00:11:14,320 --> 00:11:18,560
saw in a policy i was working on

00:11:16,480 --> 00:11:20,399
and this is the rule that's recommended

00:11:18,560 --> 00:11:22,480
by audit to allow

00:11:20,399 --> 00:11:24,240
and so we you know did some testing we

00:11:22,480 --> 00:11:25,279
observed these denials for these three

00:11:24,240 --> 00:11:28,079
permissions

00:11:25,279 --> 00:11:29,120
and added the rule now no more denials

00:11:28,079 --> 00:11:30,959
then we're going along

00:11:29,120 --> 00:11:33,680
and a few months later we get another

00:11:30,959 --> 00:11:37,120
denial for the ioctal permission

00:11:33,680 --> 00:11:38,480
and so what's happening here is that on

00:11:37,120 --> 00:11:40,560
anonymous pipes

00:11:38,480 --> 00:11:41,760
normal behavior you're only reading and

00:11:40,560 --> 00:11:44,320
writing to these pipes

00:11:41,760 --> 00:11:46,160
however the pipes do accept ioctals and

00:11:44,320 --> 00:11:47,839
there's certain situations where someone

00:11:46,160 --> 00:11:51,760
may want to configure

00:11:47,839 --> 00:11:52,959
the behavior of the particular pipe

00:11:51,760 --> 00:11:55,760
using an iactyl

00:11:52,959 --> 00:11:56,000
it's less common but it does happen and

00:11:55,760 --> 00:11:57,760
so

00:11:56,000 --> 00:11:59,680
if we had just used the appropriate

00:11:57,760 --> 00:12:03,200
reference policy permission macro

00:11:59,680 --> 00:12:04,959
read write fifo file perms we would have

00:12:03,200 --> 00:12:07,040
gotten that iaptil for free we never

00:12:04,959 --> 00:12:08,480
would have had the test failure later on

00:12:07,040 --> 00:12:10,480
when this behavior changed

00:12:08,480 --> 00:12:12,399
and that's why reference policy really

00:12:10,480 --> 00:12:13,839
helps improve policy robustness

00:12:12,399 --> 00:12:15,440
and why we want to be using the

00:12:13,839 --> 00:12:17,760
appropriate permission macros

00:12:15,440 --> 00:12:19,120
so esee lent has a check and here's the

00:12:17,760 --> 00:12:22,240
message it will display

00:12:19,120 --> 00:12:24,560
um so foo dot te line 26 s

00:12:22,240 --> 00:12:26,480
is for style this is a style failure

00:12:24,560 --> 00:12:28,160
that it suggests that you probably

00:12:26,480 --> 00:12:28,880
wanted to use the read write inherited

00:12:28,160 --> 00:12:30,959
fifo file

00:12:28,880 --> 00:12:33,440
perms and then it helpfully tells you

00:12:30,959 --> 00:12:35,279
that you had get adder read and write

00:12:33,440 --> 00:12:37,279
using this interface would add ioctyl

00:12:35,279 --> 00:12:39,279
lock and append so you need to decide if

00:12:37,279 --> 00:12:41,120
there's a security risk associated with

00:12:39,279 --> 00:12:42,560
adding iota lock and append maybe in

00:12:41,120 --> 00:12:44,240
your scenario you actually don't want to

00:12:42,560 --> 00:12:46,240
be allowing this eye octal

00:12:44,240 --> 00:12:47,440
um but that's up to you to make and

00:12:46,240 --> 00:12:50,079
we'll talk in a little bit

00:12:47,440 --> 00:12:51,600
about how you can create an exception in

00:12:50,079 --> 00:12:52,320
your policy if you don't want to allow

00:12:51,600 --> 00:12:54,160
this

00:12:52,320 --> 00:12:55,839
but i think often you do want to allow

00:12:54,160 --> 00:12:58,880
these all right

00:12:55,839 --> 00:12:59,360
a second example check so one of the

00:12:58,880 --> 00:13:01,279
things

00:12:59,360 --> 00:13:03,279
that reference policy does is we create

00:13:01,279 --> 00:13:05,360
interfaces which enable

00:13:03,279 --> 00:13:07,040
encapsulated policy in one module to be

00:13:05,360 --> 00:13:09,040
accessed in a different module

00:13:07,040 --> 00:13:10,720
these interfaces require policy

00:13:09,040 --> 00:13:12,399
developers to declare their own

00:13:10,720 --> 00:13:13,120
dependencies for the usage of those

00:13:12,399 --> 00:13:14,800
interfaces

00:13:13,120 --> 00:13:16,480
so this particular interface is taken

00:13:14,800 --> 00:13:18,240
from upstream ref policy

00:13:16,480 --> 00:13:20,079
and it's called dev read write card

00:13:18,240 --> 00:13:22,079
manager and it allows a

00:13:20,079 --> 00:13:23,519
domain to read and write to the card

00:13:22,079 --> 00:13:26,480
manager device

00:13:23,519 --> 00:13:27,600
and you may notice that this interface

00:13:26,480 --> 00:13:30,639
um

00:13:27,600 --> 00:13:32,399
accesses the device t type but

00:13:30,639 --> 00:13:33,920
it doesn't declare that in the gen

00:13:32,399 --> 00:13:36,480
require

00:13:33,920 --> 00:13:37,440
block up at the top so ordinarily in

00:13:36,480 --> 00:13:38,959
most policies

00:13:37,440 --> 00:13:40,480
this is probably not going to be a

00:13:38,959 --> 00:13:42,639
problem because you probably

00:13:40,480 --> 00:13:43,600
called other interfaces in the device

00:13:42,639 --> 00:13:46,160
module

00:13:43,600 --> 00:13:48,079
that require the device t type and the

00:13:46,160 --> 00:13:51,920
way the macro expansion with ref policy

00:13:48,079 --> 00:13:53,920
works is that these just get plugged in

00:13:51,920 --> 00:13:56,160
as macro expansion so the first time you

00:13:53,920 --> 00:13:57,519
require device t it's now required and

00:13:56,160 --> 00:13:59,600
we won't hit the air

00:13:57,519 --> 00:14:00,959
but if we were to say reorder our

00:13:59,600 --> 00:14:02,880
interfaces or maybe

00:14:00,959 --> 00:14:04,560
use this interface call in a new module

00:14:02,880 --> 00:14:06,480
that didn't require device t

00:14:04,560 --> 00:14:08,639
suddenly we're getting errors and we're

00:14:06,480 --> 00:14:09,279
saying i just reordered a couple of

00:14:08,639 --> 00:14:10,959
lines

00:14:09,279 --> 00:14:13,040
why am i suddenly getting a dependency

00:14:10,959 --> 00:14:15,279
not satisfied kind of error

00:14:13,040 --> 00:14:16,880
so we've got two different checks and

00:14:15,279 --> 00:14:20,160
the one here is showing

00:14:16,880 --> 00:14:22,079
that device t is used but is not

00:14:20,160 --> 00:14:24,480
required in the interface

00:14:22,079 --> 00:14:26,160
and we've uh upstream ref policy

00:14:24,480 --> 00:14:28,399
submitted and had merged a patch

00:14:26,160 --> 00:14:30,000
to correct 57 instances of this so this

00:14:28,399 --> 00:14:32,160
is no longer in upstream ref

00:14:30,000 --> 00:14:34,079
policy this is the situation it was

00:14:32,160 --> 00:14:35,519
before that patch

00:14:34,079 --> 00:14:37,680
and then there's the also the reverse

00:14:35,519 --> 00:14:38,000
problem which we corrected 48 instances

00:14:37,680 --> 00:14:41,120
of

00:14:38,000 --> 00:14:43,279
and that's if we say required device t

00:14:41,120 --> 00:14:44,320
but didn't actually use it this means

00:14:43,279 --> 00:14:45,680
that our interface would have a

00:14:44,320 --> 00:14:47,600
dependency on something it doesn't

00:14:45,680 --> 00:14:49,360
strictly speaking need and so if that

00:14:47,600 --> 00:14:52,399
dependency for whatever reason became

00:14:49,360 --> 00:14:53,760
unavailable we would have a failure that

00:14:52,399 --> 00:14:56,959
we didn't need to have

00:14:53,760 --> 00:14:59,760
and so we recommend um devices line

00:14:56,959 --> 00:15:01,519
1671 here's a warning now because this

00:14:59,760 --> 00:15:02,560
could potentially cause a compiler

00:15:01,519 --> 00:15:06,720
failure

00:15:02,560 --> 00:15:08,560
and um the uh

00:15:06,720 --> 00:15:10,839
it says the type device t is used in the

00:15:08,560 --> 00:15:14,240
interface and not required

00:15:10,839 --> 00:15:17,360
so um the next one this is

00:15:14,240 --> 00:15:20,720
a pretty uncommon situation and

00:15:17,360 --> 00:15:21,760
um it's uh i just think it's kind of

00:15:20,720 --> 00:15:24,880
interesting

00:15:21,760 --> 00:15:28,240
that there's a interface um

00:15:24,880 --> 00:15:28,720
foo and what we've done here is we have

00:15:28,240 --> 00:15:30,240
allow

00:15:28,720 --> 00:15:32,320
dollar one dollar two both of the

00:15:30,240 --> 00:15:33,680
arguments and the critical thing here is

00:15:32,320 --> 00:15:34,959
that they are next to each other without

00:15:33,680 --> 00:15:36,240
anything in between them

00:15:34,959 --> 00:15:38,399
and then if we were to call the

00:15:36,240 --> 00:15:40,079
interface elsewhere without using a

00:15:38,399 --> 00:15:42,160
comma to separate our arguments

00:15:40,079 --> 00:15:44,160
m4 is going to interpret that as being

00:15:42,160 --> 00:15:45,759
one argument rather than two arguments

00:15:44,160 --> 00:15:46,720
which in this case was presumably the

00:15:45,759 --> 00:15:48,399
intention

00:15:46,720 --> 00:15:49,839
and so this means that now instead of

00:15:48,399 --> 00:15:51,680
dollar one being bar t

00:15:49,839 --> 00:15:53,759
and dollar two being baz t as we

00:15:51,680 --> 00:15:56,639
probably

00:15:53,759 --> 00:15:57,839
probably wanted now dollar one is bar t

00:15:56,639 --> 00:15:59,839
space baz t

00:15:57,839 --> 00:16:01,759
in this particular instance that

00:15:59,839 --> 00:16:04,160
actually works fine

00:16:01,759 --> 00:16:06,079
um and i did see this come up in a

00:16:04,160 --> 00:16:08,800
policy once where everything was working

00:16:06,079 --> 00:16:10,720
fine but if later we were to go back and

00:16:08,800 --> 00:16:12,399
modify this interface

00:16:10,720 --> 00:16:14,399
and have something where dollar one was

00:16:12,399 --> 00:16:16,240
not right next to dollar two

00:16:14,399 --> 00:16:17,920
then this call would break and it would

00:16:16,240 --> 00:16:19,839
give you a confusing error message

00:16:17,920 --> 00:16:21,600
and you would say why on earth did

00:16:19,839 --> 00:16:23,440
modifying the interface make the call

00:16:21,600 --> 00:16:26,240
break that shouldn't have happened

00:16:23,440 --> 00:16:27,759
um so selen actually recommends three

00:16:26,240 --> 00:16:30,800
different things

00:16:27,759 --> 00:16:32,720
for this particular interface so the one

00:16:30,800 --> 00:16:34,399
we've been discussing is this first one

00:16:32,720 --> 00:16:36,399
here argument number one bar

00:16:34,399 --> 00:16:38,079
t of called interface foo contains an

00:16:36,399 --> 00:16:39,680
unquoted space

00:16:38,079 --> 00:16:41,040
um generally speaking you don't want to

00:16:39,680 --> 00:16:41,920
include unquoted spaces in your

00:16:41,040 --> 00:16:43,839
interface calls

00:16:41,920 --> 00:16:45,360
unless that's behavior is what you want

00:16:43,839 --> 00:16:47,519
but in that case probably quoting the

00:16:45,360 --> 00:16:49,360
arguments is going to be more clear

00:16:47,519 --> 00:16:51,120
also we have a check that you should

00:16:49,360 --> 00:16:52,560
have a documentation comment before your

00:16:51,120 --> 00:16:56,480
interfaces

00:16:52,560 --> 00:16:58,160
and um there's no documentation comment

00:16:56,480 --> 00:16:59,920
here because i threw this together as an

00:16:58,160 --> 00:17:02,240
example for slides

00:16:59,920 --> 00:17:04,319
and finally we have the same one from

00:17:02,240 --> 00:17:04,959
previously that igen required foo at the

00:17:04,319 --> 00:17:07,199
top of this

00:17:04,959 --> 00:17:08,720
and didn't actually use it because i

00:17:07,199 --> 00:17:10,720
grabbed an interface that allowed dollar

00:17:08,720 --> 00:17:12,319
one foo and changed it and forgot

00:17:10,720 --> 00:17:14,400
and that's a really common problem that

00:17:12,319 --> 00:17:15,600
happens when people are writing policy

00:17:14,400 --> 00:17:16,559
is they're going to copy paste their

00:17:15,600 --> 00:17:17,919
policy block

00:17:16,559 --> 00:17:20,079
and then forget to make all of the

00:17:17,919 --> 00:17:23,280
changes

00:17:20,079 --> 00:17:26,000
so last one we also do file contexts

00:17:23,280 --> 00:17:27,039
um and so there is um there's actually a

00:17:26,000 --> 00:17:28,799
fair amount of

00:17:27,039 --> 00:17:31,200
other tools that can do this same kind

00:17:28,799 --> 00:17:32,640
of work um but it's i think helpful to

00:17:31,200 --> 00:17:34,240
have one

00:17:32,640 --> 00:17:36,240
one stop kind of tool here that gets

00:17:34,240 --> 00:17:37,600
that as well and

00:17:36,240 --> 00:17:39,440
so this is redundant with some other

00:17:37,600 --> 00:17:40,720
tools but i think it's good to have

00:17:39,440 --> 00:17:42,720
multiple tools there

00:17:40,720 --> 00:17:44,160
so this rule here we're going to label

00:17:42,720 --> 00:17:46,799
some script dot sh

00:17:44,160 --> 00:17:48,799
um with our sumscript exec t label and

00:17:46,799 --> 00:17:50,799
this works totally fine on my system

00:17:48,799 --> 00:17:52,320
but there's actually two problems here

00:17:50,799 --> 00:17:54,640
first off the path

00:17:52,320 --> 00:17:56,799
uh portion of the file context is a

00:17:54,640 --> 00:17:58,880
regex which means that dot is a special

00:17:56,799 --> 00:18:01,200
character so this does just fine

00:17:58,880 --> 00:18:03,200
match some script dot sh but it would

00:18:01,200 --> 00:18:03,760
also match any character in place of

00:18:03,200 --> 00:18:05,600
that dot

00:18:03,760 --> 00:18:08,080
which is not the biggest deal in the

00:18:05,600 --> 00:18:10,320
world but it is not what you intended

00:18:08,080 --> 00:18:12,400
and then also the gen context macro

00:18:10,320 --> 00:18:14,240
takes a second argument but m4 doesn't

00:18:12,400 --> 00:18:15,600
care if we just omit arguments it just

00:18:14,240 --> 00:18:17,840
substitutes the empty string

00:18:15,600 --> 00:18:20,000
so we were supposed to supply an mls

00:18:17,840 --> 00:18:20,880
component now this rule came from a

00:18:20,000 --> 00:18:23,760
non-mls

00:18:20,880 --> 00:18:25,679
policy and so everything was fine but if

00:18:23,760 --> 00:18:27,600
we were to later then turn on

00:18:25,679 --> 00:18:29,360
mls in our policy now suddenly we're

00:18:27,600 --> 00:18:30,880
getting all sorts of breakage for what

00:18:29,360 --> 00:18:32,320
should have been a one line config

00:18:30,880 --> 00:18:34,240
change

00:18:32,320 --> 00:18:36,400
so we've got warnings for both of these

00:18:34,240 --> 00:18:38,880
issues reported by sc lint

00:18:36,400 --> 00:18:41,120
and uh you got a style warning that your

00:18:38,880 --> 00:18:42,240
mls levels are not specified in the gen

00:18:41,120 --> 00:18:44,559
context

00:18:42,240 --> 00:18:47,200
and we've also got a warning about the

00:18:44,559 --> 00:18:49,120
file context contains a potentially unex

00:18:47,200 --> 00:18:50,480
unescaped regex character so we don't

00:18:49,120 --> 00:18:51,600
just check for dot

00:18:50,480 --> 00:18:53,280
check for a variety of different

00:18:51,600 --> 00:18:54,799
characters dot is kind of the big one

00:18:53,280 --> 00:18:56,000
that shows up a lot because you get a

00:18:54,799 --> 00:18:57,360
lot of extensions it's

00:18:56,000 --> 00:18:59,919
really easy to forget that you need to

00:18:57,360 --> 00:19:01,760
escape that dot there

00:18:59,919 --> 00:19:03,280
all right so i also want to talk a

00:19:01,760 --> 00:19:05,520
little bit about how to use

00:19:03,280 --> 00:19:07,760
se lens if you're interested in using it

00:19:05,520 --> 00:19:08,080
so you can again get it from our github

00:19:07,760 --> 00:19:10,160
here

00:19:08,080 --> 00:19:11,919
and this is a link to the releases page

00:19:10,160 --> 00:19:14,559
where you can see all the latest

00:19:11,919 --> 00:19:15,919
releases again 1.1 is the latest release

00:19:14,559 --> 00:19:18,240
and there's been a little bit of work

00:19:15,919 --> 00:19:19,919
uh since then but 1.1 is pretty up to

00:19:18,240 --> 00:19:22,080
date at this point

00:19:19,919 --> 00:19:23,360
and then it's just a normal installation

00:19:22,080 --> 00:19:26,000
process

00:19:23,360 --> 00:19:27,840
so we check um whatever the sum of those

00:19:26,000 --> 00:19:30,000
four numbers is number of issues

00:19:27,840 --> 00:19:31,520
there's only three convention checks and

00:19:30,000 --> 00:19:32,640
that's kind of a future work thing that

00:19:31,520 --> 00:19:34,720
i would really like to get

00:19:32,640 --> 00:19:36,240
more convention checks going in this

00:19:34,720 --> 00:19:37,200
convention checks tend to be a lot

00:19:36,240 --> 00:19:39,360
harder to write

00:19:37,200 --> 00:19:40,960
because the conventions are written to

00:19:39,360 --> 00:19:42,559
be human readable or understood to be

00:19:40,960 --> 00:19:44,320
human readable and it can be challenging

00:19:42,559 --> 00:19:45,760
to translate that into machine readable

00:19:44,320 --> 00:19:47,039
so that's a big growth area going

00:19:45,760 --> 00:19:48,799
forward for sc lint

00:19:47,039 --> 00:19:51,200
is to improve the number of convention

00:19:48,799 --> 00:19:52,640
checks we have 10 style checks this is

00:19:51,200 --> 00:19:54,320
really a lot of the bread and butter

00:19:52,640 --> 00:19:56,000
here of things like you aren't using

00:19:54,320 --> 00:19:57,760
this reference policy abstraction

00:19:56,000 --> 00:19:59,120
appropriately or not using it at all and

00:19:57,760 --> 00:20:00,640
you could be taking advantage of it and

00:19:59,120 --> 00:20:02,880
you would get some benefits

00:20:00,640 --> 00:20:05,280
we also have 11 warning checks of things

00:20:02,880 --> 00:20:07,840
that could possibly break down the road

00:20:05,280 --> 00:20:09,280
and six error checks now you might ask

00:20:07,840 --> 00:20:11,200
why have an error check

00:20:09,280 --> 00:20:13,600
if the compiler would just catch it for

00:20:11,200 --> 00:20:16,000
you and that's a really good question

00:20:13,600 --> 00:20:16,640
generally we try to avoid having error

00:20:16,000 --> 00:20:18,640
checks

00:20:16,640 --> 00:20:20,480
if the compiler is going to catch it

00:20:18,640 --> 00:20:23,039
helpfully for us however

00:20:20,480 --> 00:20:24,720
when so and se linux is compiled you've

00:20:23,039 --> 00:20:26,159
got a multi-step process right first

00:20:24,720 --> 00:20:27,840
you're running a preprocessor then

00:20:26,159 --> 00:20:29,280
you're doing the policy compilation then

00:20:27,840 --> 00:20:31,120
you're linking the policy then you're

00:20:29,280 --> 00:20:33,520
loading the policy on your system

00:20:31,120 --> 00:20:34,559
errors coming in at length time or at

00:20:33,520 --> 00:20:36,880
load time

00:20:34,559 --> 00:20:38,799
are often expressed in the common

00:20:36,880 --> 00:20:40,799
intermediary language syntax which can

00:20:38,799 --> 00:20:42,720
be very difficult to debug and now we're

00:20:40,799 --> 00:20:43,360
asking policy developers to also

00:20:42,720 --> 00:20:45,360
understand

00:20:43,360 --> 00:20:46,559
sill syntax if they're trying to figure

00:20:45,360 --> 00:20:49,120
out what this error is

00:20:46,559 --> 00:20:50,799
for compiling policies sometimes errors

00:20:49,120 --> 00:20:52,640
that don't show up until load time which

00:20:50,799 --> 00:20:54,480
is often file context errors

00:20:52,640 --> 00:20:56,240
can be very late if you have a lengthy

00:20:54,480 --> 00:20:58,159
process between a build

00:20:56,240 --> 00:20:59,360
and getting it installed on your system

00:20:58,159 --> 00:21:00,880
that can be troubling

00:20:59,360 --> 00:21:02,480
so we try to provide errors where the

00:21:00,880 --> 00:21:05,520
error message is either unclear

00:21:02,480 --> 00:21:08,320
or comes very late in the process um

00:21:05,520 --> 00:21:09,280
we can enable and disable checks in the

00:21:08,320 --> 00:21:11,120
config file

00:21:09,280 --> 00:21:12,480
or on the command line so here's an

00:21:11,120 --> 00:21:16,080
example enabling check

00:21:12,480 --> 00:21:19,200
w3 and w2 and disabling check w5

00:21:16,080 --> 00:21:20,880
also use the recursive flag here

00:21:19,200 --> 00:21:22,880
it's also possible to do individual

00:21:20,880 --> 00:21:24,320
disables and policy so here's an example

00:21:22,880 --> 00:21:29,600
of adding a comment

00:21:24,320 --> 00:21:31,120
to disable checks style check s010

00:21:29,600 --> 00:21:32,720
and this would be maybe i decided i

00:21:31,120 --> 00:21:34,400
really didn't want the i octal in this

00:21:32,720 --> 00:21:35,679
situation like we decide we discussed

00:21:34,400 --> 00:21:37,280
earlier

00:21:35,679 --> 00:21:39,200
a couple other helpful features uh

00:21:37,280 --> 00:21:41,840
ordinarily essie lent returns

00:21:39,200 --> 00:21:42,880
zero if everything ran successfully even

00:21:41,840 --> 00:21:45,120
if it found issues

00:21:42,880 --> 00:21:47,280
for inclusion in automated pipelines you

00:21:45,120 --> 00:21:48,400
may want to return an error code on any

00:21:47,280 --> 00:21:50,000
issues found

00:21:48,400 --> 00:21:52,559
and so you can do that with the dash

00:21:50,000 --> 00:21:54,640
capital f flag there's also a

00:21:52,559 --> 00:21:55,840
run summary that's the dash capital s

00:21:54,640 --> 00:21:58,400
flag here

00:21:55,840 --> 00:22:00,640
and i also in this example use the dash

00:21:58,400 --> 00:22:03,200
dash summary only flag which says don't

00:22:00,640 --> 00:22:05,679
actually tell me the issues just display

00:22:03,200 --> 00:22:08,159
the uh the summary at the end and so

00:22:05,679 --> 00:22:10,000
this was the state of reference policy

00:22:08,159 --> 00:22:11,440
as of when i generated this slide

00:22:10,000 --> 00:22:13,679
so you'll notice that there's a few

00:22:11,440 --> 00:22:16,320
issues there um obviously the big one is

00:22:13,679 --> 00:22:19,360
this c005 709

00:22:16,320 --> 00:22:21,440
and that is ordering of permissions

00:22:19,360 --> 00:22:22,400
in an allow rule and that's a pretty new

00:22:21,440 --> 00:22:25,440
check that we added

00:22:22,400 --> 00:22:26,960
and haven't had time to go through 709

00:22:25,440 --> 00:22:28,320
reference policy lines and get them all

00:22:26,960 --> 00:22:29,520
fixed up yet but hopefully that'll

00:22:28,320 --> 00:22:32,240
happen soon

00:22:29,520 --> 00:22:33,200
there's also a context flag sometimes

00:22:32,240 --> 00:22:35,679
you may want to

00:22:33,200 --> 00:22:36,799
only report issues on the policy modules

00:22:35,679 --> 00:22:38,799
you're developing

00:22:36,799 --> 00:22:40,400
but since essie lent wants to be aware

00:22:38,799 --> 00:22:42,400
of all of the interfaces used in your

00:22:40,400 --> 00:22:44,159
policy all of the other types declared

00:22:42,400 --> 00:22:46,240
it's helpful for it to have the global

00:22:44,159 --> 00:22:48,480
view of your policy source

00:22:46,240 --> 00:22:50,080
and so this context flag says scan the

00:22:48,480 --> 00:22:54,080
rest of the policy to get the context

00:22:50,080 --> 00:22:56,080
but only report issues on this path

00:22:54,080 --> 00:22:57,600
if anyone wants to help contribute uh

00:22:56,080 --> 00:22:59,360
design contributing checks is designed

00:22:57,600 --> 00:23:00,960
to be really straightforward there's a

00:22:59,360 --> 00:23:02,799
simple function prototype

00:23:00,960 --> 00:23:04,000
it gets two arguments one is some

00:23:02,799 --> 00:23:06,960
metadata about

00:23:04,000 --> 00:23:07,440
the file being scanned um that kind of

00:23:06,960 --> 00:23:09,360
thing

00:23:07,440 --> 00:23:11,520
and then one is a pointer to a notes we

00:23:09,360 --> 00:23:13,039
parse the policy into an abstract syntax

00:23:11,520 --> 00:23:14,640
tree that node should hopefully have

00:23:13,039 --> 00:23:16,000
everything you need to write your check

00:23:14,640 --> 00:23:17,039
all the information about you know this

00:23:16,000 --> 00:23:18,480
is an allow rule it has these

00:23:17,039 --> 00:23:20,400
permissions etc

00:23:18,480 --> 00:23:21,919
and then these checks return null if the

00:23:20,400 --> 00:23:23,360
check passed or a

00:23:21,919 --> 00:23:25,280
check result structure that has the

00:23:23,360 --> 00:23:26,720
information about what failed uh the big

00:23:25,280 --> 00:23:27,919
thing there is a string that you display

00:23:26,720 --> 00:23:30,000
to the user for

00:23:27,919 --> 00:23:32,159
this is the failure so you create a

00:23:30,000 --> 00:23:33,919
function you set up the registration

00:23:32,159 --> 00:23:37,280
which is a couple of lines of code

00:23:33,919 --> 00:23:39,440
and then you can get that merged and

00:23:37,280 --> 00:23:41,679
i think about half of the checks have

00:23:39,440 --> 00:23:44,480
been written by people other than myself

00:23:41,679 --> 00:23:45,360
uh which is really exciting for me um

00:23:44,480 --> 00:23:47,039
don't have a

00:23:45,360 --> 00:23:48,720
huge number of people contributing yet

00:23:47,039 --> 00:23:50,000
but those who have have contributed

00:23:48,720 --> 00:23:52,720
quite a bit

00:23:50,000 --> 00:23:53,919
so that is the end of my talk and it

00:23:52,720 --> 00:23:57,520
does look like some ques

00:23:53,919 --> 00:23:59,440
quite a few questions have come in so um

00:23:57,520 --> 00:24:01,440
so from your experience what is the best

00:23:59,440 --> 00:24:03,440
approach for finding suitable ref policy

00:24:01,440 --> 00:24:05,360
interfaces for a given denial

00:24:03,440 --> 00:24:06,640
um so that's actually something that i

00:24:05,360 --> 00:24:08,880
really hope to

00:24:06,640 --> 00:24:10,640
add as a future feature to sc lint but

00:24:08,880 --> 00:24:12,159
it's not in there yet for sc lint to

00:24:10,640 --> 00:24:14,720
suggest those interfaces

00:24:12,159 --> 00:24:15,600
if you have the allow rule but um my

00:24:14,720 --> 00:24:18,799
recommendation

00:24:15,600 --> 00:24:20,640
in general is to grep ref policy on the

00:24:18,799 --> 00:24:22,799
target type in your denial

00:24:20,640 --> 00:24:23,679
to find which module and reference

00:24:22,799 --> 00:24:26,720
policy

00:24:23,679 --> 00:24:29,360
uh owns that type and then look through

00:24:26,720 --> 00:24:32,480
the interfaces that require that type

00:24:29,360 --> 00:24:34,559
all right um uh

00:24:32,480 --> 00:24:36,320
yes so there's a past research and there

00:24:34,559 --> 00:24:38,159
is the other so there's another tool

00:24:36,320 --> 00:24:40,000
um which i did find out unfortunately

00:24:38,159 --> 00:24:41,840
after we named this sc lint that also

00:24:40,000 --> 00:24:44,960
shares the name essie lint

00:24:41,840 --> 00:24:48,080
um and so sorry about the

00:24:44,960 --> 00:24:49,520
naming conflict there um sc lint the uh

00:24:48,080 --> 00:24:51,360
the other se lan it was developed as a

00:24:49,520 --> 00:24:53,039
research project a few years ago and

00:24:51,360 --> 00:24:55,679
it's focused specifically on

00:24:53,039 --> 00:24:56,799
se android policy and this is focused on

00:24:55,679 --> 00:24:59,440
reference policy

00:24:56,799 --> 00:25:01,279
um this sc lens actually does not

00:24:59,440 --> 00:25:02,080
currently support se android policy

00:25:01,279 --> 00:25:03,760
unfortunately

00:25:02,080 --> 00:25:05,200
that's something i would really like to

00:25:03,760 --> 00:25:08,880
add but

00:25:05,200 --> 00:25:11,760
there is um some future

00:25:08,880 --> 00:25:13,520
um work to be done there some of the the

00:25:11,760 --> 00:25:14,080
ways that jesse android handles its

00:25:13,520 --> 00:25:15,440
policy

00:25:14,080 --> 00:25:16,640
don't work with our current parser

00:25:15,440 --> 00:25:18,000
structure so there's some parser

00:25:16,640 --> 00:25:19,200
refactoring that needs to get done to

00:25:18,000 --> 00:25:22,480
handle see android

00:25:19,200 --> 00:25:24,240
but hopefully soon um is microsoft using

00:25:22,480 --> 00:25:27,600
sc linux in any of its products

00:25:24,240 --> 00:25:30,080
or solutions if so where um

00:25:27,600 --> 00:25:31,919
yes but um and that's why they have

00:25:30,080 --> 00:25:33,760
hired se linux developers

00:25:31,919 --> 00:25:35,120
um i don't know of anything that's

00:25:33,760 --> 00:25:37,679
public that i'm allowed to

00:25:35,120 --> 00:25:38,480
talk about right now so i'm sorry i

00:25:37,679 --> 00:25:42,320
can't really

00:25:38,480 --> 00:25:44,559
give a great answer on that um

00:25:42,320 --> 00:25:46,159
how does sc lint get implemented into

00:25:44,559 --> 00:25:48,000
existing devices

00:25:46,159 --> 00:25:50,159
uh you mentioned the end user early on

00:25:48,000 --> 00:25:53,600
how developers in policy or other rep

00:25:50,159 --> 00:25:54,960
representation other im otherwise make

00:25:53,600 --> 00:25:59,039
implementations of

00:25:54,960 --> 00:26:01,039
sc linux i assume is that that means

00:25:59,039 --> 00:26:02,799
um without sacrificing the use

00:26:01,039 --> 00:26:06,799
usefulness of enabling it i'm not

00:26:02,799 --> 00:26:08,400
100 sure i understand the question so um

00:26:06,799 --> 00:26:09,840
from an sc length standpoint so

00:26:08,400 --> 00:26:10,720
typically when we're developing an sc

00:26:09,840 --> 00:26:12,880
linux policy

00:26:10,720 --> 00:26:14,480
the first thing we do is we start with

00:26:12,880 --> 00:26:16,080
forking reference policy

00:26:14,480 --> 00:26:18,000
and coming up with a policy that's

00:26:16,080 --> 00:26:19,679
custom to our system develop policy

00:26:18,000 --> 00:26:21,360
based on the denials that we see on our

00:26:19,679 --> 00:26:23,520
system so then se lent

00:26:21,360 --> 00:26:25,840
is a good thing to integrate into say a

00:26:23,520 --> 00:26:27,200
build pipeline for your custom policy

00:26:25,840 --> 00:26:30,240
for your system

00:26:27,200 --> 00:26:31,279
and that's a great way to um make the

00:26:30,240 --> 00:26:34,559
implementation

00:26:31,279 --> 00:26:36,000
of se linux a lot easier so i hope i

00:26:34,559 --> 00:26:39,279
kind of addressed that question

00:26:36,000 --> 00:26:41,200
um i'm not sure that um i really

00:26:39,279 --> 00:26:44,480
understood it though sorry

00:26:41,200 --> 00:26:46,640
um what

00:26:44,480 --> 00:26:48,159
what have you done to try to get this

00:26:46,640 --> 00:26:50,159
part of the process for anyone

00:26:48,159 --> 00:26:52,480
developing se linux policies yeah

00:26:50,159 --> 00:26:54,159
so i think a big there's there's been

00:26:52,480 --> 00:26:56,400
kind of two prerequisites

00:26:54,159 --> 00:26:58,080
to get this to become kind of part of

00:26:56,400 --> 00:27:00,720
the general process

00:26:58,080 --> 00:27:02,320
one of those is right now i showed the

00:27:00,720 --> 00:27:04,320
slide a moment ago

00:27:02,320 --> 00:27:06,000
of these are the issues that were in

00:27:04,320 --> 00:27:08,080
reference policy as of about a month

00:27:06,000 --> 00:27:09,760
ago and so if you're going to fork off

00:27:08,080 --> 00:27:11,679
of reference policy develop to build

00:27:09,760 --> 00:27:13,039
your policy or you did it a while ago

00:27:11,679 --> 00:27:14,799
now you're dealing with a bunch of

00:27:13,039 --> 00:27:16,960
reported issues that are upstream

00:27:14,799 --> 00:27:18,640
and so my number one priority in terms

00:27:16,960 --> 00:27:20,799
of policy integration right now

00:27:18,640 --> 00:27:22,480
is getting these fixed upstream so that

00:27:20,799 --> 00:27:23,360
someone can have a clean base to work

00:27:22,480 --> 00:27:25,360
from

00:27:23,360 --> 00:27:26,880
um in terms of part of the process i

00:27:25,360 --> 00:27:28,240
think a big part of it is also just

00:27:26,880 --> 00:27:30,480
getting the tool more mature

00:27:28,240 --> 00:27:32,240
um this tool was originally published

00:27:30,480 --> 00:27:33,360
back in january and so it's gaining a

00:27:32,240 --> 00:27:34,240
lot of maturity done a lot of

00:27:33,360 --> 00:27:36,960
development

00:27:34,240 --> 00:27:37,760
fairly quickly but um continuing to

00:27:36,960 --> 00:27:40,000
mature the tool

00:27:37,760 --> 00:27:41,200
and then lastly there's evangelizing it

00:27:40,000 --> 00:27:42,720
and that's kind of part of why i'm

00:27:41,200 --> 00:27:44,640
wanting to do this talk now is to make

00:27:42,720 --> 00:27:46,399
it aware so that people can get it

00:27:44,640 --> 00:27:48,000
as part of the process we're looking to

00:27:46,399 --> 00:27:50,559
integrate it into some of our pipelines

00:27:48,000 --> 00:27:52,640
here at microsoft

00:27:50,559 --> 00:27:54,720
um how would you debug denials that are

00:27:52,640 --> 00:27:56,159
not due to type enforcement but possibly

00:27:54,720 --> 00:27:57,679
through other selinux

00:27:56,159 --> 00:27:59,760
aware applications or other things like

00:27:57,679 --> 00:28:01,840
constraints those are really difficult

00:27:59,760 --> 00:28:02,799
and that's part of the complexity here

00:28:01,840 --> 00:28:06,000
audit to allow

00:28:02,799 --> 00:28:07,200
does actually display a message if it's

00:28:06,000 --> 00:28:08,480
a constraint violation

00:28:07,200 --> 00:28:11,440
which can be really helpful in that

00:28:08,480 --> 00:28:13,520
regard the se linux aware applications

00:28:11,440 --> 00:28:15,120
can be tricky i think the the real long

00:28:13,520 --> 00:28:18,399
term solution on that

00:28:15,120 --> 00:28:20,720
is to uh update the

00:28:18,399 --> 00:28:22,399
fix issues in those application codes so

00:28:20,720 --> 00:28:24,320
that they do their air reporting more

00:28:22,399 --> 00:28:25,840
cleaner and that's been happening a lot

00:28:24,320 --> 00:28:26,720
i remember back when i got into this

00:28:25,840 --> 00:28:28,320
eight years ago

00:28:26,720 --> 00:28:30,240
it was really challenging and it's

00:28:28,320 --> 00:28:33,120
gotten a lot easier as

00:28:30,240 --> 00:28:33,840
applications like system d and pam etc

00:28:33,120 --> 00:28:35,440
have

00:28:33,840 --> 00:28:37,279
done things like honoring permissive

00:28:35,440 --> 00:28:39,279
mode appropriately added better error

00:28:37,279 --> 00:28:40,799
messages etc so that's the big

00:28:39,279 --> 00:28:42,840
advantage there but i don't know that

00:28:40,799 --> 00:28:44,159
there's a huge shortcut in that

00:28:42,840 --> 00:28:48,240
unfortunately

00:28:44,159 --> 00:28:49,520
um can essie let me use for android i

00:28:48,240 --> 00:28:51,760
said that a moment ago

00:28:49,520 --> 00:28:53,520
unfortunately not but i'm hoping to

00:28:51,760 --> 00:28:54,880
improve that soon i think there's a big

00:28:53,520 --> 00:28:57,679
growth area there

00:28:54,880 --> 00:28:58,399
um definitely welcome your contributions

00:28:57,679 --> 00:28:59,760
but

00:28:58,399 --> 00:29:02,000
that is something that's on my to-do

00:28:59,760 --> 00:29:04,640
list as well

00:29:02,000 --> 00:29:06,000
um i have not uploaded my slides

00:29:04,640 --> 00:29:09,279
anywhere yet i think they will be

00:29:06,000 --> 00:29:11,360
auto-uploaded at the end of this talk

00:29:09,279 --> 00:29:12,720
um how much of this could be applied to

00:29:11,360 --> 00:29:14,799
other m4 inputs

00:29:12,720 --> 00:29:17,039
so the way that this is implemented

00:29:14,799 --> 00:29:20,399
right now is really specific

00:29:17,039 --> 00:29:23,120
to the subset of m4 that's used by

00:29:20,399 --> 00:29:25,360
reference policy um so i'm not sure that

00:29:23,120 --> 00:29:29,039
there's a ton of code reuse for say

00:29:25,360 --> 00:29:31,600
generic m4 but i think the exact

00:29:29,039 --> 00:29:33,200
same techniques could be used for other

00:29:31,600 --> 00:29:35,919
m4 and i'm not sure what's

00:29:33,200 --> 00:29:37,200
out there in terms of auto conf input or

00:29:35,919 --> 00:29:39,440
whatever if they're static

00:29:37,200 --> 00:29:41,520
analyzers but i would think that exactly

00:29:39,440 --> 00:29:42,240
the same sort of technique could be used

00:29:41,520 --> 00:29:45,039
there

00:29:42,240 --> 00:29:47,440
um again this is really targeted at ref

00:29:45,039 --> 00:29:50,480
policy specifically

00:29:47,440 --> 00:29:51,279
so i think that's all the questions in

00:29:50,480 --> 00:29:53,520
my queue

00:29:51,279 --> 00:30:04,799
i hope this was informative to you guys

00:29:53,520 --> 00:30:04,799

YouTube URL: https://www.youtube.com/watch?v=Gx5bxwvzN_Y


