Title: Subsystem Update: Linux Integrity Status Update - Mimi Zohar, IBM
Publication date: 2019-08-28
Playlist: Linux Security Summit NA 2019 - San Diego
Description: 
	Subsystem Update: Linux Integrity Status Update - Mimi Zohar, IBM

The Integrity subsystem status update will provide an overview of the new features and other changes upstreamed this past year, as well as discuss current and future development.
Captions: 
	00:00:00,810 --> 00:00:06,690
I think that you've heard quite a bit

00:00:02,790 --> 00:00:10,460
this week about the integrity subsystem

00:00:06,690 --> 00:00:13,620
in particular you've been hearing about

00:00:10,460 --> 00:00:17,580
secure and trusted boot and attestation

00:00:13,620 --> 00:00:20,189
and there were talks on not necessarily

00:00:17,580 --> 00:00:23,340
the Linux integrity system but about

00:00:20,189 --> 00:00:26,160
boot loaders in general we had talks

00:00:23,340 --> 00:00:29,849
from AMD about this we had talks on

00:00:26,160 --> 00:00:33,989
tools we had discussions about roots of

00:00:29,849 --> 00:00:37,079
trust as well as load time versus run

00:00:33,989 --> 00:00:40,590
time verification missing measurements

00:00:37,079 --> 00:00:43,530
and so on there was a lot about secure

00:00:40,590 --> 00:00:45,989
and trusted boot and you're gonna see

00:00:43,530 --> 00:00:49,590
that this is not gonna be any different

00:00:45,989 --> 00:00:53,000
there's more work going on in the Linux

00:00:49,590 --> 00:00:57,690
integrity subsystem on secure interested

00:00:53,000 --> 00:01:03,899
so so one of the things that you saw by

00:00:57,690 --> 00:01:06,420
Eric's talk and by P Anna his talk is

00:01:03,899 --> 00:01:09,479
that different people different

00:01:06,420 --> 00:01:12,090
scenarios have different policies and

00:01:09,479 --> 00:01:15,659
from the very beginning we defined

00:01:12,090 --> 00:01:18,540
i'muh as being a system level policy

00:01:15,659 --> 00:01:21,270
that can be defined any way than anyone

00:01:18,540 --> 00:01:24,240
wants you want to do appraisal you do

00:01:21,270 --> 00:01:26,850
appraisal you want what you want to

00:01:24,240 --> 00:01:29,520
praise how you want to praise that's

00:01:26,850 --> 00:01:31,290
gonna be that's up to you what you want

00:01:29,520 --> 00:01:33,960
to measure how much you want to measure

00:01:31,290 --> 00:01:36,869
the more you measure if you're using a

00:01:33,960 --> 00:01:39,750
TPM well the slower it's gonna be

00:01:36,869 --> 00:01:43,619
because it's has to be sequentially

00:01:39,750 --> 00:01:45,960
extending the TPM so it's up to you and

00:01:43,619 --> 00:01:49,259
the decision is all yours

00:01:45,960 --> 00:01:53,220
as to what type of risks you're willing

00:01:49,259 --> 00:01:57,119
to take obviously the the less you

00:01:53,220 --> 00:02:02,250
measure the more risk the less that you

00:01:57,119 --> 00:02:08,329
verify the more risks and the more that

00:02:02,250 --> 00:02:08,329
you do there's more performance impact

00:02:08,330 --> 00:02:15,180
one of the things that

00:02:10,679 --> 00:02:19,260
that on our way to up streaming EDM was

00:02:15,180 --> 00:02:22,200
that we needed to be able to verify this

00:02:19,260 --> 00:02:25,579
was before signatures and signature

00:02:22,200 --> 00:02:30,829
verification we were using an H Mac and

00:02:25,579 --> 00:02:37,590
we needed some way to have a master key

00:02:30,829 --> 00:02:40,439
for the to verify the the EDM signature

00:02:37,590 --> 00:02:43,680
to have a signature to create and update

00:02:40,439 --> 00:02:47,819
it and so we upstream trusted and

00:02:43,680 --> 00:02:51,900
encrypted keys and as you saw from

00:02:47,819 --> 00:02:55,980
Matthew they're using encrypted keys and

00:02:51,900 --> 00:02:59,549
as you saw heard from Matt there you

00:02:55,980 --> 00:03:03,180
he's extended it to user space so it's

00:02:59,549 --> 00:03:09,480
not only being used at this point by

00:03:03,180 --> 00:03:11,519
easy for EDM and there are new trusted

00:03:09,480 --> 00:03:13,680
key sources that we're gonna that are

00:03:11,519 --> 00:03:17,609
being proposed that are not TPM based

00:03:13,680 --> 00:03:21,000
and those are being discussed as we go

00:03:17,609 --> 00:03:25,440
there's some tea based mechanisms for

00:03:21,000 --> 00:03:27,150
having a trusted key okay so the

00:03:25,440 --> 00:03:30,090
remainder of the talk is going to be

00:03:27,150 --> 00:03:32,400
what happened this year what we've up

00:03:30,090 --> 00:03:36,829
streamed what's in the process of being

00:03:32,400 --> 00:03:41,340
up streamed and what's expected to come

00:03:36,829 --> 00:03:43,500
so as you're gonna see all of these

00:03:41,340 --> 00:03:47,010
things that have been up streams have

00:03:43,500 --> 00:03:50,310
been up streamed are basically for

00:03:47,010 --> 00:03:52,500
secure interested booth the one

00:03:50,310 --> 00:04:00,090
exception is at the very bottom and

00:03:52,500 --> 00:04:02,010
that's for stre bod goes crypto so if we

00:04:00,090 --> 00:04:07,669
started the the work that's being done

00:04:02,010 --> 00:04:07,669
I'm going to call out Eric Richter and

00:04:10,159 --> 00:04:15,769
at my colleague who's been helping on

00:04:13,260 --> 00:04:15,769
this and

00:04:19,050 --> 00:04:23,880
on doing the work that's involved in

00:04:21,450 --> 00:04:29,760
this for the secure interest to boot for

00:04:23,880 --> 00:04:31,500
power for open power to be specific so

00:04:29,760 --> 00:04:35,100
one of the things that we're doing is

00:04:31,500 --> 00:04:38,580
that instead of modifying the pixie

00:04:35,100 --> 00:04:40,470
bootloader you know and grub and in

00:04:38,580 --> 00:04:46,080
other boot loaders you can do a remote

00:04:40,470 --> 00:04:48,570
boot and instead of being instead of

00:04:46,080 --> 00:04:52,380
modifying the pixie standard or other

00:04:48,570 --> 00:04:55,860
standards to support another piece of

00:04:52,380 --> 00:04:59,690
information such as the signature we

00:04:55,860 --> 00:05:04,130
decided to use appended signatures and

00:04:59,690 --> 00:05:07,110
this code is now queued for the next

00:05:04,130 --> 00:05:10,740
it's now it's acute for the next drill

00:05:07,110 --> 00:05:13,730
open window so you have appended

00:05:10,740 --> 00:05:22,560
signature support in addition to the

00:05:13,730 --> 00:05:25,620
extended attributes and the firmware the

00:05:22,560 --> 00:05:28,410
pre butin keys that are needed these are

00:05:25,620 --> 00:05:31,440
the keys that are now being loaded this

00:05:28,410 --> 00:05:33,660
year we created a new keyring just for

00:05:31,440 --> 00:05:37,800
the purpose so that we can differentiate

00:05:33,660 --> 00:05:41,940
between the pre boot and the pom and the

00:05:37,800 --> 00:05:44,130
kernel based keys and the pre boot key

00:05:41,940 --> 00:05:49,710
is the firmware keys are load being

00:05:44,130 --> 00:05:53,490
loaded into the platform keyring and and

00:05:49,710 --> 00:05:58,320
are used for only for verifying the k

00:05:53,490 --> 00:06:01,230
exec kernel image initially it was for

00:05:58,320 --> 00:06:05,420
the security i'ma extended attribute but

00:06:01,230 --> 00:06:10,110
subsequently it's for the peak off

00:06:05,420 --> 00:06:16,800
signature and for the appended signature

00:06:10,110 --> 00:06:19,470
that we just spoke about the other when

00:06:16,800 --> 00:06:21,870
we initially started with imma we didn't

00:06:19,470 --> 00:06:25,020
want to we wanted it to be enabled by

00:06:21,870 --> 00:06:28,330
the distro without having a policy

00:06:25,020 --> 00:06:31,360
without requiring a policy

00:06:28,330 --> 00:06:34,479
and so when you boot i'ma you don't

00:06:31,360 --> 00:06:37,870
require a policy but if you supply a

00:06:34,479 --> 00:06:41,680
policy then it will enforce whatever

00:06:37,870 --> 00:06:46,419
that policy is the problem is was then

00:06:41,680 --> 00:06:48,699
for for lockdown that you really needed

00:06:46,419 --> 00:06:51,580
to be able to say yes we're going to

00:06:48,699 --> 00:06:54,699
enforce kernel modules we're going to

00:06:51,580 --> 00:06:57,460
enforce that the k exact kernel image is

00:06:54,699 --> 00:06:59,979
going to be signed and so we really

00:06:57,460 --> 00:07:05,379
needed a build time option for that as

00:06:59,979 --> 00:07:08,560
well and so we had the person persistent

00:07:05,379 --> 00:07:13,629
compile build time option of specifying

00:07:08,560 --> 00:07:18,909
of requiring that the kegs at kernel k

00:07:13,629 --> 00:07:23,440
exec module is images signed and at

00:07:18,909 --> 00:07:29,759
runtime on open power what we're working

00:07:23,440 --> 00:07:34,629
on is based on the secure boot modes of

00:07:29,759 --> 00:07:38,979
enabling a runtime policy and Nanna just

00:07:34,629 --> 00:07:46,330
posted this week that policy those those

00:07:38,979 --> 00:07:49,560
patches and we have from Microsoft from

00:07:46,330 --> 00:07:51,430
this group from takara wherever you are

00:07:49,560 --> 00:07:53,319
over there

00:07:51,430 --> 00:07:58,150
we're measuring the boot command line

00:07:53,319 --> 00:08:02,339
thank you so but in addition to

00:07:58,150 --> 00:08:06,150
measuring and having other methods of

00:08:02,339 --> 00:08:09,099
appraising files we want those methods

00:08:06,150 --> 00:08:11,860
the signatures that were used for

00:08:09,099 --> 00:08:16,270
verifying it to be included in the

00:08:11,860 --> 00:08:18,759
measurement list and so you can't so

00:08:16,270 --> 00:08:22,029
currently the only you had one method of

00:08:18,759 --> 00:08:26,710
specifying what your template was going

00:08:22,029 --> 00:08:29,740
to be and with Matthews help we now have

00:08:26,710 --> 00:08:33,130
a runtime option for specifying the

00:08:29,740 --> 00:08:35,349
template and as you see here we can now

00:08:33,130 --> 00:08:38,169
for the command line specify the

00:08:35,349 --> 00:08:41,169
template as being I'm a buff which would

00:08:38,169 --> 00:08:41,529
which would include the boot command

00:08:41,169 --> 00:08:46,269
line

00:08:41,529 --> 00:08:49,329
and for the K exact image it would

00:08:46,269 --> 00:08:52,740
there's a new format called I'm a mod

00:08:49,329 --> 00:08:55,839
sick that would include both the X adder

00:08:52,740 --> 00:09:00,220
extended attribute if it existed and

00:08:55,839 --> 00:09:07,449
also the pended signature and similarly

00:09:00,220 --> 00:09:11,439
you could do this for kernel modules so

00:09:07,449 --> 00:09:13,899
at this point they were based on

00:09:11,439 --> 00:09:19,839
different use cases different things

00:09:13,899 --> 00:09:23,850
come up so in the distro case we had

00:09:19,839 --> 00:09:27,509
been told that that the LSM policies

00:09:23,850 --> 00:09:29,709
that policy rules wouldn't be deleted

00:09:27,509 --> 00:09:34,600
that's not exactly true

00:09:29,709 --> 00:09:36,819
and so Jana helped us so that the

00:09:34,600 --> 00:09:41,319
policies as the policies are being

00:09:36,819 --> 00:09:45,399
updated the LSM policies are updated I'm

00:09:41,319 --> 00:09:48,730
a well I'm a policy will be updated as

00:09:45,399 --> 00:09:55,949
well to reflect the new numbers

00:09:48,730 --> 00:09:59,829
associated with the LSM thank you and

00:09:55,949 --> 00:10:02,500
Stefan burger we had we over we were

00:09:59,829 --> 00:10:04,779
using the audit integrity rule for

00:10:02,500 --> 00:10:07,540
multiple things that has been split out

00:10:04,779 --> 00:10:09,850
now so that the integrity rule is one

00:10:07,540 --> 00:10:11,860
thing and the policy rules that you're

00:10:09,850 --> 00:10:15,699
loading will be a different audit

00:10:11,860 --> 00:10:20,860
message and there were some problems

00:10:15,699 --> 00:10:25,620
with with overlay FS not all of it has

00:10:20,860 --> 00:10:28,839
been on fixed but at least for I'ma the

00:10:25,620 --> 00:10:30,970
extended attribute it's now able to

00:10:28,839 --> 00:10:35,860
write out the extended attribute read

00:10:30,970 --> 00:10:38,679
and write the extended attribute so we

00:10:35,860 --> 00:10:42,879
have a couple of new things we closed a

00:10:38,679 --> 00:10:46,839
couple of new problems the first one was

00:10:42,879 --> 00:10:49,449
if you don't have an I am a policy but

00:10:46,839 --> 00:10:52,300
you want it to be able to prevent

00:10:49,449 --> 00:10:55,120
loading on sine the case

00:10:52,300 --> 00:10:57,820
that kernel image or kernel modules or

00:10:55,120 --> 00:11:00,250
firmware whatever that were unsigned

00:10:57,820 --> 00:11:02,710
there was no way of doing it outside of

00:11:00,250 --> 00:11:07,660
I'ma and this is before the lockdown

00:11:02,710 --> 00:11:10,150
patches has been we're up streamed so so

00:11:07,660 --> 00:11:13,120
with this new hook it was it's possible

00:11:10,150 --> 00:11:19,870
the lockdown patches are not using this

00:11:13,120 --> 00:11:21,850
they could have but they didn't and we

00:11:19,870 --> 00:11:25,890
closed out a couple of the firm err

00:11:21,850 --> 00:11:30,010
firmware issues that were still a

00:11:25,890 --> 00:11:34,630
problem and we warned about others if

00:11:30,010 --> 00:11:36,040
you don't have an iommu then there's

00:11:34,630 --> 00:11:41,200
nothing much that you can do about

00:11:36,040 --> 00:11:44,010
firmware using DMA buffers so at least

00:11:41,200 --> 00:11:48,130
now we're warning that the DMA buffer

00:11:44,010 --> 00:11:52,840
it's possible that a previously used

00:11:48,130 --> 00:11:54,910
buffer that the that the four that the

00:11:52,840 --> 00:12:02,910
firmware could be used before the

00:11:54,910 --> 00:12:07,300
signature verification completed and

00:12:02,910 --> 00:12:10,540
while they were working on overlay at

00:12:07,300 --> 00:12:13,090
best they were they mentioned that there

00:12:10,540 --> 00:12:17,740
is now a concept of a persistent

00:12:13,090 --> 00:12:20,560
temporary file that and those files if

00:12:17,740 --> 00:12:22,270
it's persistent well it needs to be

00:12:20,560 --> 00:12:26,590
measured and appraised and everything

00:12:22,270 --> 00:12:33,840
else and so we you know have a new hook

00:12:26,590 --> 00:12:38,260
for doing that and so for when you load

00:12:33,840 --> 00:12:42,510
when you run a and executable the kernel

00:12:38,260 --> 00:12:45,250
takes care for you some locking issues

00:12:42,510 --> 00:12:47,890
locking so that nobody can modify it

00:12:45,250 --> 00:12:49,990
while you're executing it unfortunately

00:12:47,890 --> 00:12:50,560
that's not the case for MF this is

00:12:49,990 --> 00:12:53,800
nothing new

00:12:50,560 --> 00:12:55,690
other people have known this and there

00:12:53,800 --> 00:13:01,210
have been a couple of different methods

00:12:55,690 --> 00:13:04,210
for proposed Ella Sims as to how to lock

00:13:01,210 --> 00:13:06,580
this for the time being what

00:13:04,210 --> 00:13:11,320
what was up streamed was that at least

00:13:06,580 --> 00:13:13,810
if the file is open for right we're not

00:13:11,320 --> 00:13:14,260
allow and you're verifying the signature

00:13:13,810 --> 00:13:20,160
on it

00:13:14,260 --> 00:13:20,160
we're not allowing you to execute it so

00:13:20,430 --> 00:13:31,390
and so we well that we added some cakes

00:13:27,940 --> 00:13:36,610
Excel tests that originally started out

00:13:31,390 --> 00:13:41,140
in the imma as an I'm a self-test but

00:13:36,610 --> 00:13:44,470
was later moved into the K exec and

00:13:41,140 --> 00:13:45,880
those verify whether or not your system

00:13:44,470 --> 00:13:50,170
will tell you whether or not you're

00:13:45,880 --> 00:13:57,580
verifying the K exact image or not based

00:13:50,170 --> 00:14:00,010
on policies we have the i'ma EVM utils

00:13:57,580 --> 00:14:02,830
package now has supported regression

00:14:00,010 --> 00:14:05,850
some regression testing of the package

00:14:02,830 --> 00:14:09,940
not of the Linux integrity subsystem yet

00:14:05,850 --> 00:14:13,000
but I appreciate the Tally's help in

00:14:09,940 --> 00:14:16,270
getting that getting that there it is

00:14:13,000 --> 00:14:20,670
yet to be up streamed but he posted that

00:14:16,270 --> 00:14:26,800
recently and and we have a couple of new

00:14:20,670 --> 00:14:29,200
LTP tests that were written by Peter so

00:14:26,800 --> 00:14:32,790
the next things that are going to be

00:14:29,200 --> 00:14:36,779
worked on which are being worked on is

00:14:32,790 --> 00:14:43,630
we've tried multiple different ways of

00:14:36,779 --> 00:14:46,150
including X adders and CPI oh and they

00:14:43,630 --> 00:14:48,579
didn't go too far because there were a

00:14:46,150 --> 00:14:53,079
couple of reasons for them not having

00:14:48,579 --> 00:14:56,170
been up streamed one is that every time

00:14:53,079 --> 00:14:58,839
that you try to extend CPI oh well it's

00:14:56,170 --> 00:14:59,890
a standard and there's the standard is

00:14:58,839 --> 00:15:04,510
not being updated

00:14:59,890 --> 00:15:07,000
it's a deprecated standard and and there

00:15:04,510 --> 00:15:11,160
needs to be support a lot of work done

00:15:07,000 --> 00:15:15,740
to change different fields so the CPI Oh

00:15:11,160 --> 00:15:19,640
support is we have a version of it that

00:15:15,740 --> 00:15:23,000
is only adding X adders and not

00:15:19,640 --> 00:15:25,070
extending fixing other fields that need

00:15:23,000 --> 00:15:28,160
to be fixed like the timestamp and other

00:15:25,070 --> 00:15:31,220
things and that is being done by Roberto

00:15:28,160 --> 00:15:35,180
and it just needs some people to review

00:15:31,220 --> 00:15:38,900
it so to review the code to test it and

00:15:35,180 --> 00:15:41,720
to help us I've reviewed it and tested

00:15:38,900 --> 00:15:43,910
it and it's on my cue to get it upstream

00:15:41,720 --> 00:15:50,810
but I would appreciate any help that we

00:15:43,910 --> 00:15:52,640
can get and reviewing it and the other

00:15:50,810 --> 00:15:57,490
major thing then I'm gonna speak about

00:15:52,640 --> 00:16:01,610
the rest are self-explanatory here is is

00:15:57,490 --> 00:16:02,810
the updating of mutable file hashes one

00:16:01,610 --> 00:16:05,030
of the problems that we have with

00:16:02,810 --> 00:16:08,150
mutable files is that if you pull the

00:16:05,030 --> 00:16:11,390
plug at any point before the file closes

00:16:08,150 --> 00:16:14,030
if the file has changed well that file

00:16:11,390 --> 00:16:19,720
will not be in a good state and cannot

00:16:14,030 --> 00:16:23,810
be recovered so Jana is working on on

00:16:19,720 --> 00:16:27,770
updating it and updating it more

00:16:23,810 --> 00:16:30,290
frequently so that we can have be able

00:16:27,770 --> 00:16:36,110
to reboot after a power loss or some

00:16:30,290 --> 00:16:41,420
other type of failure I think the rest

00:16:36,110 --> 00:16:43,790
is pretty self-explanatory and thank you

00:16:41,420 --> 00:16:48,200
so much to everyone who's helped who is

00:16:43,790 --> 00:16:50,690
helping and making the changes and we

00:16:48,200 --> 00:16:56,810
did release a new version of imma EBM

00:16:50,690 --> 00:16:59,270
new chills the new this is from I'm not

00:16:56,810 --> 00:17:02,870
sure that this is readable but this is

00:16:59,270 --> 00:17:05,240
the change log of it was a major release

00:17:02,870 --> 00:17:07,970
because I hadn't released one it in over

00:17:05,240 --> 00:17:15,709
a year closer to a year and a half but

00:17:07,970 --> 00:17:18,560
we now have support from Matthew for EDM

00:17:15,709 --> 00:17:21,880
signatures other larger digests rather

00:17:18,560 --> 00:17:25,300
than just the sha-1 and we have

00:17:21,880 --> 00:17:32,530
support streebek support OpenSSL engine

00:17:25,300 --> 00:17:42,730
support and and being able to read the

00:17:32,530 --> 00:17:51,670
PCRs TPM piece TPM to PCRs with that any

00:17:42,730 --> 00:17:53,920
questions on the new LS m security hook

00:17:51,670 --> 00:17:56,380
security kernel load data is there any

00:17:53,920 --> 00:17:58,600
Ellis M planning on implementing it or

00:17:56,380 --> 00:18:02,920
have they already implemented it for its

00:17:58,600 --> 00:18:06,760
use in the module it's being it's being

00:18:02,920 --> 00:18:13,620
used by i'ma at the moment for

00:18:06,760 --> 00:18:17,890
preventing loading the cake loading

00:18:13,620 --> 00:18:20,590
kernel modules the old Cisco's basically

00:18:17,890 --> 00:18:23,730
so it is being used it's just not being

00:18:20,590 --> 00:18:28,020
used by lockdown not yet

00:18:23,730 --> 00:18:28,020
some new out some new LSMs

00:18:33,200 --> 00:18:37,520
Thanks

00:18:34,840 --> 00:18:37,520

YouTube URL: https://www.youtube.com/watch?v=a968cQWc7zk


