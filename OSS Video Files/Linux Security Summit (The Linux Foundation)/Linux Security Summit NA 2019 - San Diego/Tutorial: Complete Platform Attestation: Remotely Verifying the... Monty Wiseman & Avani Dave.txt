Title: Tutorial: Complete Platform Attestation: Remotely Verifying the... Monty Wiseman & Avani Dave
Publication date: 2019-08-28
Playlist: Linux Security Summit NA 2019 - San Diego
Description: 
	Tutorial: Complete Platform Attestation: Remotely Verifying the Authenticity and Integrity of your Platformâ€™s Hardware, Firmware, and Software - Monty Wiseman & Avani Dave, General Electric

This tutorial will discuss and demonstrate remote verification of a platformâ€™s hardware, firmware and runtime (IMA) events using open source components with industry standard protocols. It will show client utilities to send verifiers a collection of firmware and runtime measurement all in the TCG defined Canonical Event Log format. It will show a utility that suppliers can use to send verifiers a collection of expected firmware and runtime golden measurements in TCG defined signed structures as extensions to SWID Tags. It will show how to use an open source verifier to confirm that the platform booted with the expected firmware and is running the expected software. It will show how these components, along with TPM and Platform Certificates can be part of a complete Trusted Supply Chain solution by integration with the HIRS project (https://github.com/nsacyber/HIRS).
Captions: 
	00:00:00,030 --> 00:00:09,840
Hey welcome back from the break and for

00:00:04,140 --> 00:00:13,200
now we will start the tutorial this will

00:00:09,840 --> 00:00:18,690
be presented by Monty Wiseman and of

00:00:13,200 --> 00:00:21,119
Annie Dave and this is complete platform

00:00:18,690 --> 00:00:22,769
attestation remotely verifying the

00:00:21,119 --> 00:00:25,250
authenticity and integrity of your

00:00:22,769 --> 00:00:30,119
platforms Hardware firmware and software

00:00:25,250 --> 00:00:32,070
which is actually not the longest topic

00:00:30,119 --> 00:00:36,980
subject we've had at this conference I

00:00:32,070 --> 00:00:41,040
think there was a longer one once yeah

00:00:36,980 --> 00:00:50,610
there was a previous one you put was the

00:00:41,040 --> 00:00:56,219
nation state security okay okay well

00:00:50,610 --> 00:00:58,109
good crowd is shrinking so yeah as you

00:00:56,219 --> 00:01:01,789
said my name is Martha Washburn have

00:00:58,109 --> 00:01:07,700
been involved and I'm from GG research

00:01:01,789 --> 00:01:10,799
formerly you know he is from Intel but

00:01:07,700 --> 00:01:16,850
moved over to GE to do industrial

00:01:10,799 --> 00:01:19,799
controllers and critical infrastructure

00:01:16,850 --> 00:01:21,150
so with that with that in mind one of

00:01:19,799 --> 00:01:24,720
the things that we think is really

00:01:21,150 --> 00:01:27,500
important is us to use TBMs for at the

00:01:24,720 --> 00:01:31,369
station and more than just sealing data

00:01:27,500 --> 00:01:35,700
so we been looking at this project and I

00:01:31,369 --> 00:01:38,970
turn over to Avani who's was our intern

00:01:35,700 --> 00:01:41,240
over the summer working on some of the

00:01:38,970 --> 00:01:43,530
research on the current state of

00:01:41,240 --> 00:01:46,110
attestation so we're just going to kind

00:01:43,530 --> 00:01:49,740
of do a survey of what at the station

00:01:46,110 --> 00:01:52,110
tools are available today it's not a

00:01:49,740 --> 00:01:53,340
complete list but is a parcel list as

00:01:52,110 --> 00:01:59,070
well as some of the work that we're

00:01:53,340 --> 00:02:00,810
doing in TCG to try to standardize or in

00:01:59,070 --> 00:02:03,119
an effort to standardize some of the

00:02:00,810 --> 00:02:05,820
data structures so we can continue to

00:02:03,119 --> 00:02:07,910
make forward progress on this at the

00:02:05,820 --> 00:02:12,000
station program

00:02:07,910 --> 00:02:15,150
Thank You Monty so a test station

00:02:12,000 --> 00:02:17,880
overview as the title says that we are

00:02:15,150 --> 00:02:19,770
trying to achieve or say demonstrate

00:02:17,880 --> 00:02:22,680
proof of concept work for hardware

00:02:19,770 --> 00:02:27,350
software and firmware our test station

00:02:22,680 --> 00:02:29,880
as an verifier in one single platform so

00:02:27,350 --> 00:02:33,420
just going for some overview of

00:02:29,880 --> 00:02:35,820
attestation TPM supplier signing

00:02:33,420 --> 00:02:39,120
certificate will be issued by TPM author

00:02:35,820 --> 00:02:43,050
it like the vendor of it it will create

00:02:39,120 --> 00:02:46,110
an EK certificate on the on the TPM

00:02:43,050 --> 00:02:49,739
hardware itself now platform on which

00:02:46,110 --> 00:02:52,170
the TPM module will go with it will have

00:02:49,739 --> 00:02:55,020
its own platform supplied signing

00:02:52,170 --> 00:02:58,260
certificate which will be a tested or

00:02:55,020 --> 00:03:02,670
say which will be bind to the EK

00:02:58,260 --> 00:03:06,180
certificate which TPM is put on the

00:03:02,670 --> 00:03:08,130
platform on which TPM is kept on so the

00:03:06,180 --> 00:03:11,100
binding between the platform certificate

00:03:08,130 --> 00:03:13,140
and ek certificate is must for having

00:03:11,100 --> 00:03:15,600
the platform authenticity or for the

00:03:13,140 --> 00:03:22,410
attestation that's for the part 1 of

00:03:15,600 --> 00:03:30,540
hardware attestation then software so

00:03:22,410 --> 00:03:35,640
then comes the form there ok so for the

00:03:30,540 --> 00:03:37,769
firmware part so after that platform we

00:03:35,640 --> 00:03:40,739
say that that are tested then for the

00:03:37,769 --> 00:03:43,470
firmware part what we need is like the

00:03:40,739 --> 00:03:45,420
firmware BIOS boot process will take

00:03:43,470 --> 00:03:48,150
place and then it will generate certain

00:03:45,420 --> 00:03:51,150
logs those are called the events log in

00:03:48,150 --> 00:03:54,510
TPM 2.0 Event log structure which is a

00:03:51,150 --> 00:03:56,820
CL canonical event log structure we need

00:03:54,510 --> 00:03:58,620
a verifier which will verify first

00:03:56,820 --> 00:04:02,310
Hardware root of trust

00:03:58,620 --> 00:04:06,390
then firmware based root of trust then

00:04:02,310 --> 00:04:10,079
comes the I'm apart so integrity

00:04:06,390 --> 00:04:13,019
measurement i'ma so imma event logs will

00:04:10,079 --> 00:04:15,390
be generated at so so after the boot

00:04:13,019 --> 00:04:16,040
process finishes finishes it will take

00:04:15,390 --> 00:04:18,320
the

00:04:16,040 --> 00:04:21,049
measurement of different modules and it

00:04:18,320 --> 00:04:23,419
will create the IMO measurement that

00:04:21,049 --> 00:04:26,210
will go into the i'ma event log so that

00:04:23,419 --> 00:04:29,360
is called software event log structures

00:04:26,210 --> 00:04:32,139
so if we say our platform is a tested or

00:04:29,360 --> 00:04:35,720
verified that means we need to make sure

00:04:32,139 --> 00:04:37,940
Hardware firmware and software up to

00:04:35,720 --> 00:04:40,790
certain level which we verify that is

00:04:37,940 --> 00:04:46,000
our tested it should be authenticated or

00:04:40,790 --> 00:04:48,530
verified there is a rim form base

00:04:46,000 --> 00:04:50,950
specification which is reference

00:04:48,530 --> 00:04:53,780
integrity measurement from where

00:04:50,950 --> 00:04:56,960
specification which Monty is working

00:04:53,780 --> 00:04:58,490
with earnest and they will be explaining

00:04:56,960 --> 00:05:01,460
the new standard which is coming up

00:04:58,490 --> 00:05:05,090
there is also new standards for event

00:05:01,460 --> 00:05:09,139
log CIL format canonical event log for

00:05:05,090 --> 00:05:12,470
TPM 2.0 and there is I maciel format so

00:05:09,139 --> 00:05:14,690
we are working on getting these three

00:05:12,470 --> 00:05:16,990
pieces combined together for having

00:05:14,690 --> 00:05:19,850
end-to-end attestation for the platform

00:05:16,990 --> 00:05:23,300
the contribution which we make it in the

00:05:19,850 --> 00:05:25,940
in here is like we took the we leveraged

00:05:23,300 --> 00:05:29,419
the tool already developed by NSA called

00:05:25,940 --> 00:05:32,900
horse each IRS what it does it like it

00:05:29,419 --> 00:05:34,970
will take the TPM supplied vendor ek

00:05:32,900 --> 00:05:38,090
certificate it will authenticate it for

00:05:34,970 --> 00:05:40,580
the verifier part then it takes the

00:05:38,090 --> 00:05:42,590
platform certificate it will take the

00:05:40,580 --> 00:05:44,630
root certificate sign it the platform

00:05:42,590 --> 00:05:47,840
certificate and makes the hardware

00:05:44,630 --> 00:05:50,630
verified next part where our

00:05:47,840 --> 00:05:53,590
contribution comes is like we leverage

00:05:50,630 --> 00:05:57,260
the patches which was developed by

00:05:53,590 --> 00:05:59,630
Mathew Garrett of Google and on top of

00:05:57,260 --> 00:06:03,979
it we developed a utility which will

00:05:59,630 --> 00:06:08,110
convert the new standard of event locks

00:06:03,979 --> 00:06:11,330
into TCG specification to dotto

00:06:08,110 --> 00:06:15,440
also we had presented or say the team at

00:06:11,330 --> 00:06:18,530
GE under with which whom I am working on

00:06:15,440 --> 00:06:20,900
they have developed I'ma patches which

00:06:18,530 --> 00:06:24,110
will do the CL conversion canonical

00:06:20,900 --> 00:06:27,020
event lock or you can say that TLV

00:06:24,110 --> 00:06:28,790
format conversion tag length value

00:06:27,020 --> 00:06:32,300
format conversion of the

00:06:28,790 --> 00:06:35,540
my event locks so we have combined i'ma

00:06:32,300 --> 00:06:40,150
patches and the meaning Monty and David

00:06:35,540 --> 00:06:44,960
Vice David suffered at GE presented in

00:06:40,150 --> 00:06:49,520
LSS 2018 the i'ma event log patch and

00:06:44,960 --> 00:06:51,430
the utility so we are combining I my

00:06:49,520 --> 00:06:55,450
event log utility and we are combining

00:06:51,430 --> 00:06:59,690
kernel patches for CL for event log

00:06:55,450 --> 00:07:03,530
together to have a unified place for

00:06:59,690 --> 00:07:05,720
single platform verification now going

00:07:03,530 --> 00:07:08,240
into the background do we need some

00:07:05,720 --> 00:07:10,400
background of TPM it's an audience

00:07:08,240 --> 00:07:15,800
question if we say yes then I'll hand

00:07:10,400 --> 00:07:21,230
over to Monty we need some basics No

00:07:15,800 --> 00:07:24,860
okay so then we'll go yeah so then we go

00:07:21,230 --> 00:07:27,770
it so going into some background of

00:07:24,860 --> 00:07:30,080
platform boot process in order to

00:07:27,770 --> 00:07:32,420
understand how events logs are being

00:07:30,080 --> 00:07:35,390
generated and what we are trying to

00:07:32,420 --> 00:07:38,630
propose here for the new standard and

00:07:35,390 --> 00:07:39,410
what our utility will be helpful in that

00:07:38,630 --> 00:07:43,430
prospect

00:07:39,410 --> 00:07:46,610
so when system boots BIOS reset reset

00:07:43,430 --> 00:07:49,400
vector will go on after that it will go

00:07:46,610 --> 00:07:52,720
to static root of trust measurement then

00:07:49,400 --> 00:07:56,120
it will take the form where component 1

00:07:52,720 --> 00:07:58,400
hash of it then it will extend it into

00:07:56,120 --> 00:08:01,790
some PC R value and it will create a

00:07:58,400 --> 00:08:04,850
structure into event log structure for

00:08:01,790 --> 00:08:07,760
for that for that particular PC R

00:08:04,850 --> 00:08:10,310
extension similarly the chain of trust

00:08:07,760 --> 00:08:13,060
will be established into the boot

00:08:10,310 --> 00:08:16,850
firmware by having next level of

00:08:13,060 --> 00:08:19,760
firmware hash measurement extended into

00:08:16,850 --> 00:08:23,660
the PC R and creating an event lock for

00:08:19,760 --> 00:08:26,870
it so on and so forth for all for the

00:08:23,660 --> 00:08:29,360
BIOS boot process it will create hash of

00:08:26,870 --> 00:08:32,720
each extended PC are extended into the

00:08:29,360 --> 00:08:37,180
PC R 0 to 7 it will generate event logs

00:08:32,720 --> 00:08:40,460
in from very went to firmware memory

00:08:37,180 --> 00:08:41,960
after that bootloader will go it will

00:08:40,460 --> 00:08:44,390
create shrim

00:08:41,960 --> 00:08:47,630
hache off it then it will store it into

00:08:44,390 --> 00:08:49,490
PCR extended pcr eight or nine and then

00:08:47,630 --> 00:08:52,730
it will create a event log of it

00:08:49,490 --> 00:08:55,010
next is extended boot process grub2 will

00:08:52,730 --> 00:08:57,110
be loading and whatever kernel module

00:08:55,010 --> 00:08:59,390
you have provided or whatever kernel you

00:08:57,110 --> 00:09:01,610
want to load it that it will load the OS

00:08:59,390 --> 00:09:04,700
of it it will create a event log

00:09:01,610 --> 00:09:08,959
structure for event log for that as well

00:09:04,700 --> 00:09:09,470
next comes i'ma so this is where OS part

00:09:08,959 --> 00:09:14,450
comes

00:09:09,470 --> 00:09:18,740
so after OS boots up then it will take

00:09:14,450 --> 00:09:21,440
the hash of certain parts which you want

00:09:18,740 --> 00:09:23,930
to make sure it's authenticated or are

00:09:21,440 --> 00:09:27,020
tested you take the hash measurement of

00:09:23,930 --> 00:09:30,350
it storing extending to the PCR ten and

00:09:27,020 --> 00:09:33,980
then it will create an i'ma event log of

00:09:30,350 --> 00:09:37,640
what is are tested at that stage now

00:09:33,980 --> 00:09:41,480
what is currently available in i'ma is

00:09:37,640 --> 00:09:45,800
in different log format and event logs

00:09:41,480 --> 00:09:48,709
for the boot process or BIOS event logs

00:09:45,800 --> 00:09:50,720
are in different format currently so the

00:09:48,709 --> 00:09:54,350
goal of this presentation or our

00:09:50,720 --> 00:09:57,260
contribution is to convert both event

00:09:54,350 --> 00:10:00,140
log structure and i'ma event log in to

00:09:57,260 --> 00:10:04,070
CL format canonical event log format

00:10:00,140 --> 00:10:06,110
which is a new standard TCG has written

00:10:04,070 --> 00:10:09,050
it and published it for PC client

00:10:06,110 --> 00:10:11,390
specification so following that standard

00:10:09,050 --> 00:10:14,390
we have created a utility on top of

00:10:11,390 --> 00:10:17,990
Matthew Garrett's patch to do firmware

00:10:14,390 --> 00:10:21,740
event log conversion and then after with

00:10:17,990 --> 00:10:23,870
last year's patch and utility we are

00:10:21,740 --> 00:10:27,260
converting I my event logs into CL

00:10:23,870 --> 00:10:30,170
format along with the hers and these two

00:10:27,260 --> 00:10:32,900
utility we say that we verify hardware

00:10:30,170 --> 00:10:35,209
then we verify firmware and then we

00:10:32,900 --> 00:10:38,990
verify the software which is running for

00:10:35,209 --> 00:10:41,990
the portion of imma so this is our end

00:10:38,990 --> 00:10:43,820
goal and the contribution is to convert

00:10:41,990 --> 00:10:49,490
it into the CL new standard which is

00:10:43,820 --> 00:10:52,089
coming up so that being said we'll go to

00:10:49,490 --> 00:10:52,089
the next

00:10:53,490 --> 00:10:59,459
let's verify the hardware first part of

00:10:56,319 --> 00:11:01,720
it how we how we can say that our

00:10:59,459 --> 00:11:05,889
hardware which we are trying to verify

00:11:01,720 --> 00:11:08,500
it's actually a tested or say it's legit

00:11:05,889 --> 00:11:11,139
in that in that terms so value

00:11:08,500 --> 00:11:12,939
proposition where this comes from it's

00:11:11,139 --> 00:11:15,970
like we get some hardware which will

00:11:12,939 --> 00:11:18,639
have its TPM module from EXO vendor it

00:11:15,970 --> 00:11:21,189
has its TPM module and we trust on that

00:11:18,639 --> 00:11:23,949
they provide it we ship it through some

00:11:21,189 --> 00:11:26,230
supply chain we it goes through some

00:11:23,949 --> 00:11:29,860
rare houses it will go into the

00:11:26,230 --> 00:11:32,470
installer location we by default current

00:11:29,860 --> 00:11:35,800
current times we trust on all the levels

00:11:32,470 --> 00:11:38,949
with it and we say that if it has a

00:11:35,800 --> 00:11:42,220
public key for a cave and attestation

00:11:38,949 --> 00:11:44,160
key then we use that at the Installer

00:11:42,220 --> 00:11:47,589
location and we say that it is

00:11:44,160 --> 00:11:50,800
authenticated what happens with this is

00:11:47,589 --> 00:11:52,689
like if we don't have a root of trust

00:11:50,800 --> 00:11:55,540
established between the platform

00:11:52,689 --> 00:11:57,839
supplier and EK certificate which we are

00:11:55,540 --> 00:12:02,290
getting it from there TPM module

00:11:57,839 --> 00:12:06,160
certificate then that can be the case of

00:12:02,290 --> 00:12:09,040
counterfeiting and that can be so with

00:12:06,160 --> 00:12:12,069
use of this particular root of trust

00:12:09,040 --> 00:12:16,149
measurement and hearts particularly in

00:12:12,069 --> 00:12:18,339
that terms we can reduce the cost and we

00:12:16,149 --> 00:12:22,329
can increase the trust between the

00:12:18,339 --> 00:12:25,540
supplier and the TPM vendor and across

00:12:22,329 --> 00:12:27,759
the supply chain so that operator or

00:12:25,540 --> 00:12:30,910
plant operator can verify all this thing

00:12:27,759 --> 00:12:34,779
with Hertz a tester that's the proof of

00:12:30,910 --> 00:12:38,309
concept work so you can verify it and

00:12:34,779 --> 00:12:38,309
this can be beneficial

00:12:38,430 --> 00:12:46,089
next is ek to platform certificate

00:12:43,389 --> 00:12:49,899
binding as I said before also what

00:12:46,089 --> 00:12:52,120
happens is like the ek certificate TPM

00:12:49,899 --> 00:12:55,329
supplier will give its TPM supplier

00:12:52,120 --> 00:12:58,980
certificate which which will be loaded

00:12:55,329 --> 00:13:02,769
into the TPM module itself with having

00:12:58,980 --> 00:13:05,670
TPM attributes of it that will be bind

00:13:02,769 --> 00:13:08,720
into the PCR one value of it

00:13:05,670 --> 00:13:12,240
then platform supplier will provide its

00:13:08,720 --> 00:13:15,420
root of trust measurement and platform

00:13:12,240 --> 00:13:18,839
certificate this platform certificate is

00:13:15,420 --> 00:13:22,680
referenced or bind to the EPM which it

00:13:18,839 --> 00:13:26,519
actually loaded onto that platform so

00:13:22,680 --> 00:13:28,680
now a vendor has a TPM which is

00:13:26,519 --> 00:13:32,910
associated with this particular platform

00:13:28,680 --> 00:13:36,660
we are making a binding between the TPM

00:13:32,910 --> 00:13:38,700
vendor and the platform certificate so

00:13:36,660 --> 00:13:42,120
that root of trust measurement is

00:13:38,700 --> 00:13:45,350
required in that case so EK certificate

00:13:42,120 --> 00:13:48,149
will be generated for the root of trust

00:13:45,350 --> 00:13:50,370
measurement now what happens in this

00:13:48,149 --> 00:13:53,190
case is like TPM supplier certificate

00:13:50,370 --> 00:13:57,060
and T platform supplier certificate we

00:13:53,190 --> 00:13:59,430
transfer it one-time trusted Channel we

00:13:57,060 --> 00:14:02,399
are using it to transfer these two

00:13:59,430 --> 00:14:04,649
certificates to the platform owner we

00:14:02,399 --> 00:14:08,100
say that platform owner gets through

00:14:04,649 --> 00:14:11,370
this channel both the certificates what

00:14:08,100 --> 00:14:15,000
we do is like we put we validate that we

00:14:11,370 --> 00:14:17,339
sign the platform and keep ear modules

00:14:15,000 --> 00:14:20,399
with those certificates and we say that

00:14:17,339 --> 00:14:22,560
it are tested now this can be enlarged

00:14:20,399 --> 00:14:26,760
or say we can leverage this particular

00:14:22,560 --> 00:14:27,899
mechanism for having multiple actually

00:14:26,760 --> 00:14:30,420
one more slide here

00:14:27,899 --> 00:14:35,640
so with this similar method we can

00:14:30,420 --> 00:14:39,000
validate multiple platforms with same ek

00:14:35,640 --> 00:14:41,220
and platform certificate say thousands

00:14:39,000 --> 00:14:43,050
of in a warehouse thousands of chips

00:14:41,220 --> 00:14:45,930
will come in the same way so like

00:14:43,050 --> 00:14:49,860
enlarging the concept of validating ek

00:14:45,930 --> 00:14:53,250
and that from binding to make validation

00:14:49,860 --> 00:14:54,779
that this particular TPM is tied to this

00:14:53,250 --> 00:14:57,959
particular platform and we are

00:14:54,779 --> 00:15:00,360
validating that and in a warehouse there

00:14:57,959 --> 00:15:03,120
can be thousands of chips coming in and

00:15:00,360 --> 00:15:08,940
we are validating it for platform as

00:15:03,120 --> 00:15:11,040
well as ek for that one one thing I am

00:15:08,940 --> 00:15:14,569
going back to one slide to explain that

00:15:11,040 --> 00:15:16,750
how ownership or say platform a key is

00:15:14,569 --> 00:15:20,410
established after that

00:15:16,750 --> 00:15:23,110
platform binding with the ATK

00:15:20,410 --> 00:15:27,040
certificate is done what we do after

00:15:23,110 --> 00:15:30,160
that is like we will do the association

00:15:27,040 --> 00:15:34,090
of ownership to that particular TPM

00:15:30,160 --> 00:15:36,880
module so owner will get the key

00:15:34,090 --> 00:15:38,980
certificate which is an attestation key

00:15:36,880 --> 00:15:42,310
which will be like verifying this

00:15:38,980 --> 00:15:44,230
platform after that verifying ek what it

00:15:42,310 --> 00:15:47,020
does it like verify the first platform

00:15:44,230 --> 00:15:49,750
certificate sign signature then verify

00:15:47,020 --> 00:15:53,590
the ek certificate signature then verify

00:15:49,750 --> 00:15:56,350
ek belongs to that platform and then we

00:15:53,590 --> 00:15:58,420
say that if both of them matches then we

00:15:56,350 --> 00:16:01,450
can say that okay now we can generate an

00:15:58,420 --> 00:16:03,370
a key attestation key for that

00:16:01,450 --> 00:16:07,000
particular platform so this is the

00:16:03,370 --> 00:16:10,450
owners establishment part of it after

00:16:07,000 --> 00:16:13,810
that okay so now we are going for the

00:16:10,450 --> 00:16:15,910
demo for the first part hush and then we

00:16:13,810 --> 00:16:27,130
will go for the demo of event log and

00:16:15,910 --> 00:16:29,080
the next is I my event log for that so

00:16:27,130 --> 00:16:34,860
for the setup of Hertz

00:16:29,080 --> 00:16:41,230
I am using a box client which is sent

00:16:34,860 --> 00:16:48,880
os7 verifier and on my local I have

00:16:41,230 --> 00:16:58,510
Hertz provision are installed so I'll

00:16:48,880 --> 00:17:01,300
just provision for DPM with that so side

00:16:58,510 --> 00:17:05,470
by side I'm just showing two things on

00:17:01,300 --> 00:17:07,689
my local I am running Hertz provisioner

00:17:05,470 --> 00:17:11,050
so provisional on this side on the

00:17:07,689 --> 00:17:13,720
terminal which is having a TPM module so

00:17:11,050 --> 00:17:16,680
the device which we are provisioning it

00:17:13,720 --> 00:17:21,160
which should have a TPM module on it and

00:17:16,680 --> 00:17:24,670
the very fire doesn't need to have a TPM

00:17:21,160 --> 00:17:27,760
but for n 2 and verification if you want

00:17:24,670 --> 00:17:30,220
you can have a software TPM IBM's

00:17:27,760 --> 00:17:33,429
implementation of a software TPM with te

00:17:30,220 --> 00:17:35,860
TCG stake or IBM stake and you can

00:17:33,429 --> 00:17:37,870
verify codes on both the side to say

00:17:35,860 --> 00:17:43,530
that it's attesting for the

00:17:37,870 --> 00:17:49,120
proof-of-concept for now I am showing

00:17:43,530 --> 00:17:54,250
first Hertz provisionary started and

00:17:49,120 --> 00:17:57,929
then I am so this particular step what I

00:17:54,250 --> 00:17:57,929
am making is like I am

00:18:20,870 --> 00:18:22,900
Oh

00:18:45,680 --> 00:18:58,880
so I'm running the provisioner now so

00:18:56,060 --> 00:19:02,140
what it does it like it first goes onto

00:18:58,880 --> 00:19:04,790
your system which has a TPM module

00:19:02,140 --> 00:19:07,790
configuring the provisioner deleting

00:19:04,790 --> 00:19:10,780
existing ek key stored into that then

00:19:07,790 --> 00:19:14,030
provisioning the particular platform

00:19:10,780 --> 00:19:17,810
creating an endorsement key sending it

00:19:14,030 --> 00:19:21,560
over to the verifier on this side which

00:19:17,810 --> 00:19:26,240
is a VM in this case and then it will be

00:19:21,560 --> 00:19:29,060
creating all relevant with a new new

00:19:26,240 --> 00:19:31,850
ones nones so that every time it's a

00:19:29,060 --> 00:19:36,800
fresh connection between the client and

00:19:31,850 --> 00:19:40,760
verifier so now second part of it which

00:19:36,800 --> 00:19:44,060
i want to show is like here with we have

00:19:40,760 --> 00:19:47,900
a policy set so what we can do is like

00:19:44,060 --> 00:19:50,180
we can make sure without all policies

00:19:47,900 --> 00:19:53,180
and with policies I'll show two cases

00:19:50,180 --> 00:19:55,790
where we can specify can verify each

00:19:53,180 --> 00:19:59,390
certificate being evaluated on or say

00:19:55,790 --> 00:20:05,890
verified it on so first I'm just

00:19:59,390 --> 00:20:08,690
disabling all so as you can see that

00:20:05,890 --> 00:20:10,970
three basic certificates I have already

00:20:08,690 --> 00:20:13,370
pre-loaded into the store of the

00:20:10,970 --> 00:20:14,630
verifier at this moment just for the

00:20:13,370 --> 00:20:16,730
demo purpose

00:20:14,630 --> 00:20:19,730
those are endorsement credential

00:20:16,730 --> 00:20:22,250
certificates so this is the root

00:20:19,730 --> 00:20:25,220
certificate root CA certificate we get

00:20:22,250 --> 00:20:27,850
it from the platform supplier so first

00:20:25,220 --> 00:20:31,040
endorsement certificate I have already

00:20:27,850 --> 00:20:34,540
put that into the verifier store for now

00:20:31,040 --> 00:20:39,230
for my platform which is like Intel's

00:20:34,540 --> 00:20:42,260
TPM Intel nook and having a TPM module

00:20:39,230 --> 00:20:44,600
of 0 22 so I have already put the root

00:20:42,260 --> 00:20:47,600
certificate into the store then I have

00:20:44,600 --> 00:20:50,780
created so NSA has a utility called

00:20:47,600 --> 00:20:53,140
picker so which it does what it does it

00:20:50,780 --> 00:20:54,380
like with that I have created platform

00:20:53,140 --> 00:20:56,690
credentials

00:20:54,380 --> 00:20:59,390
validation certificate and I

00:20:56,690 --> 00:21:02,540
have created signing key so that is pret

00:20:59,390 --> 00:21:04,610
form attributes so we signed week and I

00:21:02,540 --> 00:21:07,550
have put both the keys into the store

00:21:04,610 --> 00:21:10,820
for the verifier what it does it at this

00:21:07,550 --> 00:21:15,230
moment when I run again the verify or

00:21:10,820 --> 00:21:17,240
say ACA utility on the terminal what it

00:21:15,230 --> 00:21:19,550
will do is like it will verify without

00:21:17,240 --> 00:21:23,090
any certificate check at this moment and

00:21:19,550 --> 00:21:24,830
I'll show you into the UI part first

00:21:23,090 --> 00:21:27,980
I'll show you without and then I'll show

00:21:24,830 --> 00:21:30,530
you with burn in the UI part so right

00:21:27,980 --> 00:21:32,530
now the last test which we had it it had

00:21:30,530 --> 00:21:34,760
all three Greens because it was

00:21:32,530 --> 00:21:36,470
verifying endorsement key it was

00:21:34,760 --> 00:21:39,410
verifying platform certificate and it

00:21:36,470 --> 00:21:41,240
was checking the signing key as well so

00:21:39,410 --> 00:21:44,150
platform attributes that was verifying

00:21:41,240 --> 00:21:46,880
it now I am running it with all three

00:21:44,150 --> 00:21:49,190
disabled so you will see a line which is

00:21:46,880 --> 00:22:00,230
blank which is not checking any of the

00:21:49,190 --> 00:22:04,850
certificates in this case so again now

00:22:00,230 --> 00:22:07,040
if i refresh yeah so it's not checking

00:22:04,850 --> 00:22:10,640
any of the certificate I'll make sure

00:22:07,040 --> 00:22:12,590
now one more run just to have the policy

00:22:10,640 --> 00:22:15,530
set all three certificates will be very

00:22:12,590 --> 00:22:19,640
verified in that case so it gives us or

00:22:15,530 --> 00:22:22,220
as a user or a verifier way to verify

00:22:19,640 --> 00:22:24,710
all the root certificates and platform

00:22:22,220 --> 00:22:26,900
binding with it so that first step

00:22:24,710 --> 00:22:31,540
hardware root of trust verification is

00:22:26,900 --> 00:22:31,540
done with the horse part of it so

00:22:36,330 --> 00:22:41,040
I made all three enable and as I said I

00:22:39,180 --> 00:22:47,180
have already loaded the certificates

00:22:41,040 --> 00:22:47,180
into the store for now so if I run again

00:22:54,210 --> 00:23:04,470
and refresh check the reports all three

00:23:00,840 --> 00:23:09,690
are verified so if there is any breakage

00:23:04,470 --> 00:23:13,679
or if there is some counterfeited part

00:23:09,690 --> 00:23:15,990
or some malicious code injection in that

00:23:13,679 --> 00:23:18,509
certificate relation or somewhere else

00:23:15,990 --> 00:23:21,509
in the line we can say that hardware is

00:23:18,509 --> 00:23:23,340
not verified at that point now comes to

00:23:21,509 --> 00:23:26,490
the second part which is firmware

00:23:23,340 --> 00:23:56,399
validation so and it that two into CL

00:23:26,490 --> 00:23:58,980
format so the next demo is for so this

00:23:56,399 --> 00:24:01,950
is a good breaking point if you have any

00:23:58,980 --> 00:24:06,450
questions that we've got a pointer this

00:24:01,950 --> 00:24:10,679
is provided by the the NS a proof of

00:24:06,450 --> 00:24:14,299
concept code there's a link to it that

00:24:10,679 --> 00:24:16,289
she's been playing with but there's

00:24:14,299 --> 00:24:19,350
there's a little more to to fluent

00:24:16,289 --> 00:24:21,389
asking these questions about where we

00:24:19,350 --> 00:24:23,820
are at this point because we're gonna

00:24:21,389 --> 00:24:29,029
leverage on we leverage this on to the

00:24:23,820 --> 00:24:33,509
next point under the next phase yeah and

00:24:29,029 --> 00:24:37,289
to extend his say NSA's tool is

00:24:33,509 --> 00:24:39,899
supported on CentOS 7 only the problem

00:24:37,289 --> 00:24:42,450
which we had it is like centaurs current

00:24:39,899 --> 00:24:45,769
version of the kernel is 3.10 on the

00:24:42,450 --> 00:24:50,789
main line which doesn't even have TPM

00:24:45,769 --> 00:24:53,909
event log path so in order to or say get

00:24:50,789 --> 00:24:57,749
it up to the patch level of 5.2 kernel

00:24:53,909 --> 00:25:01,110
or above 5.3 kernel in order to get TPM

00:24:57,749 --> 00:25:04,049
2.0 event law we have to either port the

00:25:01,110 --> 00:25:07,019
kernel to or patch the kernel to fight

00:25:04,049 --> 00:25:07,440
or two or higher or we can put it into

00:25:07,019 --> 00:25:10,259
the

00:25:07,440 --> 00:25:12,960
ah colonel so what we have done is like

00:25:10,259 --> 00:25:16,320
we have ported it to the fedora so like

00:25:12,960 --> 00:25:19,470
right now and it says the tool which you

00:25:16,320 --> 00:25:24,500
said saw it here it's running on fedora

00:25:19,470 --> 00:25:27,389
so we ported it to fedora fedora 30 and

00:25:24,500 --> 00:25:29,909
still a CA provisional or say the

00:25:27,389 --> 00:25:32,909
verifier it's still running on CentOS 7

00:25:29,909 --> 00:25:41,370
so both are in different flavor just for

00:25:32,909 --> 00:25:43,950
little bit detail on that you would like

00:25:41,370 --> 00:25:45,509
to see this a little more portable and

00:25:43,950 --> 00:25:48,000
one of the things we'd like to work on

00:25:45,509 --> 00:25:50,039
over the next year is to make this so

00:25:48,000 --> 00:25:53,759
that it can very easily be moved from

00:25:50,039 --> 00:25:56,580
one environment to the other one one of

00:25:53,759 --> 00:26:00,029
the problems just is kind of an aside is

00:25:56,580 --> 00:26:02,220
that platform certificates and this is

00:26:00,029 --> 00:26:04,019
why it's a little more restrictive my

00:26:02,220 --> 00:26:05,309
four certificates are in fact attribute

00:26:04,019 --> 00:26:07,919
certificates they're not key

00:26:05,309 --> 00:26:10,590
certificates and the only library we

00:26:07,919 --> 00:26:12,990
could find to manage keeds or attribute

00:26:10,590 --> 00:26:15,149
certificates was bouncy castle so they

00:26:12,990 --> 00:26:18,960
were restricted to write most of this

00:26:15,149 --> 00:26:21,419
code all in Java we can't seem to get

00:26:18,960 --> 00:26:23,610
the open-source community to support

00:26:21,419 --> 00:26:26,519
attribute certificates if you know

00:26:23,610 --> 00:26:29,070
anybody who will help us along that that

00:26:26,519 --> 00:26:30,450
area that would be really nice then we

00:26:29,070 --> 00:26:35,070
could be a little more flexible and

00:26:30,450 --> 00:26:37,110
write all of this in C so that was one

00:26:35,070 --> 00:26:40,159
of the obstacles that they have as well

00:26:37,110 --> 00:26:42,870
as as well as what we have as well as

00:26:40,159 --> 00:26:47,059
just the most common tool out there

00:26:42,870 --> 00:26:50,820
doesn't support attribute certificates

00:26:47,059 --> 00:26:53,669
so going on to the next part which is

00:26:50,820 --> 00:26:56,159
event log even log to doto structure

00:26:53,669 --> 00:26:58,440
what I'm taking is like I'm taking a

00:26:56,159 --> 00:27:03,529
fresh event log measurement from my

00:26:58,440 --> 00:27:06,179
system system kernel security TPM 0

00:27:03,529 --> 00:27:08,779
binary contamination and then I'm

00:27:06,179 --> 00:27:12,659
putting it into temporary measurement

00:27:08,779 --> 00:27:17,279
what happen okay since I have one system

00:27:12,659 --> 00:27:19,259
kernel I need to be sued ok so now I

00:27:17,279 --> 00:27:20,680
have it in temporary measurement the

00:27:19,259 --> 00:27:22,900
event logs which I

00:27:20,680 --> 00:27:25,060
captured it now I'm running it the

00:27:22,900 --> 00:27:28,480
utility which we developed it to convert

00:27:25,060 --> 00:27:31,750
it into or say parse it into the new CL

00:27:28,480 --> 00:27:35,350
format canonical event log format so

00:27:31,750 --> 00:27:37,150
this is our utility it's the source code

00:27:35,350 --> 00:27:40,450
and everything is available on github so

00:27:37,150 --> 00:27:44,700
we'll be sharing the github link for you

00:27:40,450 --> 00:27:49,120
guys to try it on and for the feedbacks

00:27:44,700 --> 00:27:52,810
temporary measurement so now this is the

00:27:49,120 --> 00:27:55,270
new CL event logs format there are some

00:27:52,810 --> 00:28:01,120
events which are like humongous in terms

00:27:55,270 --> 00:28:03,250
of a data size and which we are not do

00:28:01,120 --> 00:28:12,540
not know the reason like why they are of

00:28:03,250 --> 00:28:12,540
this big of an event data size like this

00:28:13,200 --> 00:28:23,980
yes yes yes this is from where yeah

00:28:18,700 --> 00:28:27,430
and this is new CL or TPM 2.0 event log

00:28:23,980 --> 00:28:30,400
structure so this is the first event

00:28:27,430 --> 00:28:33,100
which is actually in the form of 1.2

00:28:30,400 --> 00:28:37,570
format which will say us the information

00:28:33,100 --> 00:28:40,210
about what algorithms it support so here

00:28:37,570 --> 00:28:42,640
you see that it supports two algorithms

00:28:40,210 --> 00:28:45,160
which are those so these are the hashing

00:28:42,640 --> 00:28:48,760
algorithm by the way sha-1 sha-256 are

00:28:45,160 --> 00:28:51,070
on so in the utility I have created enum

00:28:48,760 --> 00:28:54,030
for support of right now at sha-1

00:28:51,070 --> 00:28:54,030
sha-256 and

00:28:54,040 --> 00:28:58,480
if in future if you want to extend it

00:28:56,200 --> 00:29:01,570
just at the enum value and it should be

00:28:58,480 --> 00:29:04,390
flexible to support that as well most of

00:29:01,570 --> 00:29:06,670
the vendors or say this particular Knox

00:29:04,390 --> 00:29:09,940
system which we have evaluated it

00:29:06,670 --> 00:29:12,610
supports only sha-1 and shadow 56 bios

00:29:09,940 --> 00:29:14,770
all so bios will tell you like what it

00:29:12,610 --> 00:29:17,560
supports on and you can turn it on and

00:29:14,770 --> 00:29:22,120
off the bank and do the analysis the way

00:29:17,560 --> 00:29:25,060
we did it so here 0 4 is sha-1 and 0 B

00:29:22,120 --> 00:29:28,600
is char 256 so two algorithms are

00:29:25,060 --> 00:29:31,600
supported for from the event log 1 or 2

00:29:28,600 --> 00:29:32,299
structure as you can see here all the

00:29:31,600 --> 00:29:34,969
event

00:29:32,299 --> 00:29:38,659
have both algorithms supported that's

00:29:34,969 --> 00:29:43,339
one of the observation which we observed

00:29:38,659 --> 00:29:47,330
while we got the law passed out as you

00:29:43,339 --> 00:29:49,909
can see here and we have made a checking

00:29:47,330 --> 00:29:53,119
on the on the run while it is passing it

00:29:49,909 --> 00:29:56,419
whether both the event types are matched

00:29:53,119 --> 00:29:58,399
or not so number of algorithm supported

00:29:56,419 --> 00:30:01,489
matches meaning like it has both the

00:29:58,399 --> 00:30:04,519
events of sha-1 and shadow 56 because

00:30:01,489 --> 00:30:07,009
the one dot o event log structure

00:30:04,519 --> 00:30:09,320
specifies it has two types there will be

00:30:07,009 --> 00:30:11,329
some events where both the algorithms

00:30:09,320 --> 00:30:13,429
are not supported in at this moment

00:30:11,329 --> 00:30:15,769
that's the observation we are getting it

00:30:13,429 --> 00:30:21,320
so these are the biosimilar which we are

00:30:15,769 --> 00:30:24,459
PI parsing it so om vendors needs to

00:30:21,320 --> 00:30:27,019
have a consistency across different

00:30:24,459 --> 00:30:30,320
supports if they say that both suppose

00:30:27,019 --> 00:30:32,389
this hashing algorithms so then they

00:30:30,320 --> 00:30:36,379
should have consistency between all the

00:30:32,389 --> 00:30:39,679
events which we are seeing it on here so

00:30:36,379 --> 00:30:41,869
that's one of the observation there is

00:30:39,679 --> 00:30:43,669
one more utility or say there is one

00:30:41,869 --> 00:30:48,409
more script provided associated with

00:30:43,669 --> 00:30:51,139
this utility to run it multiple binary

00:30:48,409 --> 00:30:54,079
blobs for the demo purpose we I have

00:30:51,139 --> 00:30:56,799
provided one test file test file folder

00:30:54,079 --> 00:30:59,539
which has couple of binary blobs for

00:30:56,799 --> 00:31:02,329
different sets of algorithms and then

00:30:59,539 --> 00:31:04,399
you can run a report on those saying

00:31:02,329 --> 00:31:07,940
like this many algorithms matches or not

00:31:04,399 --> 00:31:10,279
that's the additional work which you can

00:31:07,940 --> 00:31:13,839
evaluate it on so that's first part

00:31:10,279 --> 00:31:13,839
second is imma

00:31:28,389 --> 00:31:37,669
so for I'ma we have to first sign in in

00:31:34,130 --> 00:31:40,700
order to say verify the signature or say

00:31:37,669 --> 00:31:42,830
get the event log of i'ma this

00:31:40,700 --> 00:31:51,889
particular utility what it does it like

00:31:42,830 --> 00:31:55,090
first we will do it sign the files I

00:31:51,889 --> 00:31:55,090
have it in different

00:32:53,270 --> 00:32:56,570
actually leave it

00:32:58,940 --> 00:33:04,879
so we have a shell script which was

00:33:01,369 --> 00:33:06,889
which is already posted on github which

00:33:04,879 --> 00:33:09,349
will do the signing process but for the

00:33:06,889 --> 00:33:14,419
demo purpose what I will show you it is

00:33:09,349 --> 00:33:16,669
I have already CLE okay so with current

00:33:14,419 --> 00:33:19,159
state of i'ma event logs what is

00:33:16,669 --> 00:33:21,710
happening is like it's currently stores

00:33:19,159 --> 00:33:25,239
into the memory it doesn't get released

00:33:21,710 --> 00:33:28,609
because we don't have a sinking in

00:33:25,239 --> 00:33:32,299
serializing process with CL format we

00:33:28,609 --> 00:33:35,450
take the event log of i'ma and then

00:33:32,299 --> 00:33:38,359
release the memory block after XE boot

00:33:35,450 --> 00:33:41,149
services so that means that being said

00:33:38,359 --> 00:33:44,090
that memory is being freed up so we are

00:33:41,149 --> 00:33:49,849
clearing that portion we have provided

00:33:44,090 --> 00:33:55,720
the utility for that as well to demo the

00:33:49,849 --> 00:33:55,720
I'm apart I already have created same

00:33:55,960 --> 00:34:01,450
data block as I did it for

00:34:07,730 --> 00:34:11,530
oh yeah that's the team

00:34:20,050 --> 00:34:23,500
okay here

00:34:36,790 --> 00:34:42,260
sorry I was in wrong folder for that and

00:34:40,040 --> 00:34:45,320
that's why I was not finding the utility

00:34:42,260 --> 00:34:47,210
so here I'm assigning we'll do the

00:34:45,320 --> 00:34:50,210
signing on the files which we are going

00:34:47,210 --> 00:34:57,980
to I'm assigned out SH we will do the

00:34:50,210 --> 00:35:01,190
signing first it needs to be sudo as you

00:34:57,980 --> 00:35:04,970
can see that it's it will sign the files

00:35:01,190 --> 00:35:07,810
which are which we are doing the Orsay

00:35:04,970 --> 00:35:10,010
which we'll be using it for imma

00:35:07,810 --> 00:35:12,320
provisioning or say I might even clock

00:35:10,010 --> 00:35:14,840
creation eventually so it does the

00:35:12,320 --> 00:35:18,440
signing of it first then after we will

00:35:14,840 --> 00:35:21,950
use the utility to run on the event log

00:35:18,440 --> 00:35:30,530
to parse it into CL format this will

00:35:21,950 --> 00:35:33,170
take some yeah so we're waiting zoo

00:35:30,530 --> 00:35:36,650
buddy understand the issue about where

00:35:33,170 --> 00:35:40,460
I'm a retains the log in memory it's

00:35:36,650 --> 00:35:44,200
often been described as a memory leak we

00:35:40,460 --> 00:35:48,800
had no way of extracting a log out for

00:35:44,200 --> 00:35:51,820
and be able to go back again and put it

00:35:48,800 --> 00:35:55,490
together unless he did a lot of you know

00:35:51,820 --> 00:35:57,560
managing than just blobs of data one of

00:35:55,490 --> 00:36:00,470
the identity one of the key advantages

00:35:57,560 --> 00:36:02,870
of the CEO and so so that in a later

00:36:00,470 --> 00:36:05,150
slide is that we're adding sequence

00:36:02,870 --> 00:36:07,460
numbers to each one of these events so

00:36:05,150 --> 00:36:09,560
which give you now is she's going to

00:36:07,460 --> 00:36:12,160
show is we're gonna pull the event logs

00:36:09,560 --> 00:36:15,560
out put them into this new format and

00:36:12,160 --> 00:36:17,720
with this patch the diva severed has it

00:36:15,560 --> 00:36:20,000
will actually free up the memory inside

00:36:17,720 --> 00:36:21,980
the kernel for the next set of

00:36:20,000 --> 00:36:23,720
measurements that come down so you don't

00:36:21,980 --> 00:36:25,790
lose them you have to save them in a

00:36:23,720 --> 00:36:28,500
file someplace but they're now sequence

00:36:25,790 --> 00:36:30,450
you can send them out you can

00:36:28,500 --> 00:36:32,490
or store them on the local disk for

00:36:30,450 --> 00:36:34,530
saying out later right alysus but

00:36:32,490 --> 00:36:37,710
because those sequenced you can now

00:36:34,530 --> 00:36:41,490
append the mess together again and as we

00:36:37,710 --> 00:36:44,390
skipped over the tutorial as hopefully

00:36:41,490 --> 00:36:47,579
everybody knows the extend sequence is

00:36:44,390 --> 00:36:50,569
you have to maintain the sequence or

00:36:47,579 --> 00:36:50,569
none of it has

00:36:55,320 --> 00:37:01,079
we didn't grab the fastest machine for

00:36:58,359 --> 00:37:01,079
this by the way

00:37:27,920 --> 00:37:31,130
last one

00:37:38,640 --> 00:37:41,640
and

00:38:24,540 --> 00:38:31,680
don't call it taking this long before no

00:38:28,420 --> 00:38:31,680
it was yeah

00:39:03,789 --> 00:39:13,119
yes yes I'm sorry yeah you go ahead yeah

00:39:09,549 --> 00:39:16,149
it's just a file but the integrity of

00:39:13,119 --> 00:39:27,939
the file is verified by the quote of

00:39:16,149 --> 00:39:39,819
PCEHR 10 so it's itself well wouldn't

00:39:27,939 --> 00:39:42,069
you reboot it starts at zero yeah with

00:39:39,819 --> 00:39:44,649
Davis patched the kernel does at each

00:39:42,069 --> 00:39:49,839
booth the the sequence starts at zero

00:39:44,649 --> 00:39:52,719
again sort starting in kernel and then

00:39:49,839 --> 00:39:55,779
as the things running it will just

00:39:52,719 --> 00:39:58,599
continue to accumulate them until let's

00:39:55,779 --> 00:40:00,789
say we get this 580 make up a number

00:39:58,599 --> 00:40:03,809
right if you've got a really dizzy

00:40:00,789 --> 00:40:07,630
system you go read this with her utility

00:40:03,809 --> 00:40:10,239
with previously when you read the sudo

00:40:07,630 --> 00:40:12,519
file it just said and we go read it

00:40:10,239 --> 00:40:14,739
again it's exact same information right

00:40:12,519 --> 00:40:16,899
now when you go read this little file

00:40:14,739 --> 00:40:19,539
it'll return the information assume

00:40:16,899 --> 00:40:21,789
you've kept it and it'll in my case

00:40:19,539 --> 00:40:25,569
it'll start it'll start with sequence

00:40:21,789 --> 00:40:30,369
number 581 right when you reboot it it

00:40:25,569 --> 00:40:34,179
goes back to 0 yeah so now this one is

00:40:30,369 --> 00:40:36,579
done signing is done I already have TLB

00:40:34,179 --> 00:40:40,149
underscore data which is a binary blob

00:40:36,579 --> 00:40:43,929
of TLV data so I'm running this tool

00:40:40,149 --> 00:40:46,149
against TLV and this is the sequence

00:40:43,929 --> 00:40:49,359
number which we were just talking about

00:40:46,149 --> 00:40:51,789
further I my event logs previously it

00:40:49,359 --> 00:40:54,639
was not there so with this new patch and

00:40:51,789 --> 00:40:59,109
the utility we are getting the sequence

00:40:54,639 --> 00:41:01,479
number for imma as well and you can see

00:40:59,109 --> 00:41:03,999
that we are doing check on PCR 10

00:41:01,479 --> 00:41:07,149
calculated matches the original one

00:41:03,999 --> 00:41:10,929
which was supposed to be there so we are

00:41:07,149 --> 00:41:11,890
validating that as well and because

00:41:10,929 --> 00:41:16,859
since this

00:41:11,890 --> 00:41:20,200
a very large number of events in there I

00:41:16,859 --> 00:41:26,160
will just do I do not want to go to the

00:41:20,200 --> 00:41:30,099
top of it but yeah so now with this to

00:41:26,160 --> 00:41:33,160
the utility of both both the side imma

00:41:30,099 --> 00:41:36,490
and event locks we have both in CL

00:41:33,160 --> 00:41:39,779
format the new TCG to dato event log

00:41:36,490 --> 00:41:44,230
structure so here you can see that for

00:41:39,779 --> 00:41:46,839
event logs we have the numbers event

00:41:44,230 --> 00:41:50,650
numbers I started with even number 0 for

00:41:46,839 --> 00:41:52,690
1.2 format event so that that says like

00:41:50,650 --> 00:41:55,150
this will be supporting this many

00:41:52,690 --> 00:41:57,190
algorithms and whatnot the information

00:41:55,150 --> 00:41:59,859
about the platform little bit on that

00:41:57,190 --> 00:42:02,859
and then event number one is actually

00:41:59,859 --> 00:42:07,440
TPM 2.0 first event and so on and so

00:42:02,859 --> 00:42:14,230
forth and for the I'm RT LV this is the

00:42:07,440 --> 00:42:16,839
parser for it that's kind of the demo

00:42:14,230 --> 00:42:31,509
part of it going back to the

00:42:16,839 --> 00:42:36,519
presentation so yeah so we've done now

00:42:31,509 --> 00:42:39,369
is before coming out of the the very top

00:42:36,519 --> 00:42:42,549
line memory basically it was a bob of

00:42:39,369 --> 00:42:44,920
see structures which is how the UEFI

00:42:42,549 --> 00:42:47,740
keeps it and they're not even sequenced

00:42:44,920 --> 00:42:50,410
so if you break that blob of data up and

00:42:47,740 --> 00:42:52,720
as you can see in the demo here it was

00:42:50,410 --> 00:42:56,230
actually quite large larger than I was

00:42:52,720 --> 00:42:58,569
expecting it to be you've got a you've

00:42:56,230 --> 00:43:01,029
got to maintain that and it's not I mean

00:42:58,569 --> 00:43:03,880
you've got tools obviously we can digest

00:43:01,029 --> 00:43:06,730
see structures but it's much better off

00:43:03,880 --> 00:43:10,089
being able to convey this information in

00:43:06,730 --> 00:43:12,239
some standardized format we defined TLB

00:43:10,089 --> 00:43:15,149
which so describe in a minute

00:43:12,239 --> 00:43:17,459
but it's also just as important to make

00:43:15,149 --> 00:43:19,589
sure that the stuff coming out of Lima

00:43:17,459 --> 00:43:22,319
and the stuff coming out of the firmware

00:43:19,589 --> 00:43:30,029
are formatted the same so we can have a

00:43:22,319 --> 00:43:32,939
common set of verifiers these we have

00:43:30,029 --> 00:43:35,399
some screen captures just for like a

00:43:32,939 --> 00:43:38,339
backup for us like just in case their

00:43:35,399 --> 00:43:41,519
mode doesn't work at times so we had in

00:43:38,339 --> 00:43:44,279
slides so like people who wants and yeah

00:43:41,519 --> 00:43:46,229
there is a negative test scenario also

00:43:44,279 --> 00:43:49,229
like where the certificate doesn't match

00:43:46,229 --> 00:43:51,329
you obviously get red indication on the

00:43:49,229 --> 00:43:53,699
horse probationer it's saying that that

00:43:51,329 --> 00:43:58,739
certificate is it doesn't match so we

00:43:53,699 --> 00:44:00,779
covered that as well and here is hers

00:43:58,739 --> 00:44:03,119
captures little bit detail about the

00:44:00,779 --> 00:44:04,979
platform on which we did the

00:44:03,119 --> 00:44:06,869
provisioning it says like these are

00:44:04,979 --> 00:44:09,359
irreplaceable components and the red

00:44:06,869 --> 00:44:12,769
ones and the other it gives the NIC card

00:44:09,359 --> 00:44:15,239
information and rest drivers and some

00:44:12,769 --> 00:44:17,399
what's running on the platform related

00:44:15,239 --> 00:44:20,189
information so if somebody changes a

00:44:17,399 --> 00:44:22,139
particular component of a platform the

00:44:20,189 --> 00:44:24,179
verifier gets notification of that

00:44:22,139 --> 00:44:25,679
whether it wants to trust it or not or

00:44:24,179 --> 00:44:27,719
again root of trust needs to be

00:44:25,679 --> 00:44:29,759
established in that case we can go and

00:44:27,719 --> 00:44:33,719
dig into the details for the verifying

00:44:29,759 --> 00:44:38,239
of the platform and he a k Ã¨k and a que

00:44:33,719 --> 00:44:38,239
generation after that now i'm i'll be

00:44:38,630 --> 00:44:46,649
okay yeah so this was so last year we

00:44:43,499 --> 00:44:49,349
did the monte and david surfer did from

00:44:46,649 --> 00:44:52,679
the GE group did the presentation on

00:44:49,349 --> 00:44:55,469
analysis 2018 we have a link for that as

00:44:52,679 --> 00:44:57,959
well in the presentation so they did

00:44:55,469 --> 00:45:00,809
they explain what is canonical event log

00:44:57,959 --> 00:45:03,689
record structure as you can see that it

00:45:00,809 --> 00:45:06,869
has a record number it has a pcr number

00:45:03,689 --> 00:45:11,219
and these are all in TLV format egg

00:45:06,869 --> 00:45:13,619
length value format so we have we have

00:45:11,219 --> 00:45:15,370
showed you first utility of it and now

00:45:13,619 --> 00:45:17,620
we are showing you the canonical

00:45:15,370 --> 00:45:20,110
Lock structure just to be on the same

00:45:17,620 --> 00:45:23,050
page first its record number than PCR

00:45:20,110 --> 00:45:25,300
then digest if it is only supporting

00:45:23,050 --> 00:45:27,850
sha-1 then that will be the digest of it

00:45:25,300 --> 00:45:31,960
and the event which will have the event

00:45:27,850 --> 00:45:34,780
size and then even type the data of it

00:45:31,960 --> 00:45:38,080
and these will be going into the each

00:45:34,780 --> 00:45:41,440
cell record so T dot car TPM 2.0 if I

00:45:38,080 --> 00:45:44,080
have that open we can verify it it's on

00:45:41,440 --> 00:45:46,630
the new structure so this is the

00:45:44,080 --> 00:45:50,320
structure for event log which it's

00:45:46,630 --> 00:45:54,310
explained in into the presentation

00:45:50,320 --> 00:45:59,770
itself record number PCR digest and even

00:45:54,310 --> 00:46:01,990
contained itself here is the link for

00:45:59,770 --> 00:46:03,910
the last year's alice's presentation

00:46:01,990 --> 00:46:06,400
which we did it there is a video video

00:46:03,910 --> 00:46:09,460
also available and slides available for

00:46:06,400 --> 00:46:13,840
people who wants to review that material

00:46:09,460 --> 00:46:17,290
as well we already covered the demo for

00:46:13,840 --> 00:46:19,690
both of them now I will be transferring

00:46:17,290 --> 00:46:22,000
it to Monte for reference integrity

00:46:19,690 --> 00:46:25,510
measurement the next topic or new

00:46:22,000 --> 00:46:31,240
standard coming up from Anniston TCG yes

00:46:25,510 --> 00:46:34,090
we don't we don't have any tools on this

00:46:31,240 --> 00:46:39,670
year we thought we would do this is a

00:46:34,090 --> 00:46:41,400
very early stage of of development and

00:46:39,670 --> 00:46:43,870
what I wanted to do is at least

00:46:41,400 --> 00:46:47,460
introduce the concept that we are

00:46:43,870 --> 00:46:50,920
working on for how to produce the

00:46:47,460 --> 00:46:53,170
reference measurements from for the

00:46:50,920 --> 00:46:56,020
firmware so right now our focus is

00:46:53,170 --> 00:46:59,770
entirely on the firmware as Avani

00:46:56,020 --> 00:47:02,940
mentioned there are some upcoming NIST

00:46:59,770 --> 00:47:06,820
standards that are going to start

00:47:02,940 --> 00:47:09,670
requiring OMS to provide the reference

00:47:06,820 --> 00:47:13,660
measurements for their BIOS as is the

00:47:09,670 --> 00:47:16,780
coming out and this is an effort to help

00:47:13,660 --> 00:47:21,790
provide help OMS provide a standardized

00:47:16,780 --> 00:47:24,340
version of doing that so with with that

00:47:21,790 --> 00:47:27,230
what what we're working on right now is

00:47:24,340 --> 00:47:31,339
we you know kind of surveyed the

00:47:27,230 --> 00:47:33,559
the what we currently have we being TCG

00:47:31,339 --> 00:47:36,680
and there's actually a spec out there

00:47:33,559 --> 00:47:39,950
for reference measurements but we looked

00:47:36,680 --> 00:47:43,849
at it and it's actually pretty old and

00:47:39,950 --> 00:47:46,940
it was pretty hard coded to XML and we

00:47:43,849 --> 00:47:52,970
thought maybe hard coding XML might not

00:47:46,940 --> 00:47:55,670
be a 20-19 solution and we also looked

00:47:52,970 --> 00:47:58,460
at it we found only one vendor currently

00:47:55,670 --> 00:48:01,030
using it I think it was strung Swan was

00:47:58,460 --> 00:48:05,500
using it and in some very limited cases

00:48:01,030 --> 00:48:08,540
so with with that we were kind of

00:48:05,500 --> 00:48:10,970
enabled if you will to kind of start

00:48:08,540 --> 00:48:14,420
from scratch say let's let's see what we

00:48:10,970 --> 00:48:19,609
can do and provide some new thinking on

00:48:14,420 --> 00:48:22,309
this so as I in my question earlier too

00:48:19,609 --> 00:48:24,680
one of the one of the other presenters

00:48:22,309 --> 00:48:26,569
one of the things that we started

00:48:24,680 --> 00:48:29,569
looking at as well let's not reinvent

00:48:26,569 --> 00:48:32,450
the wheel let's actually start from

00:48:29,569 --> 00:48:35,180
something that's very very much in use

00:48:32,450 --> 00:48:37,490
today and see if we can you know see if

00:48:35,180 --> 00:48:39,740
we can make use of extended and rather

00:48:37,490 --> 00:48:42,020
than creating yet another set of tools

00:48:39,740 --> 00:48:46,280
that that people have to use one of our

00:48:42,020 --> 00:48:48,770
problems though is where we're doing

00:48:46,280 --> 00:48:50,660
we're providing a reference measurements

00:48:48,770 --> 00:48:55,280
for something that's very different from

00:48:50,660 --> 00:48:57,500
a file right so but regardless we

00:48:55,280 --> 00:48:59,480
thought well look let's look at this see

00:48:57,500 --> 00:49:02,480
we can make this work so we took the

00:48:59,480 --> 00:49:04,369
notion of swigs and in thought well

00:49:02,480 --> 00:49:07,089
they're very heavily used and we think

00:49:04,369 --> 00:49:09,380
that there were going to be more used in

00:49:07,089 --> 00:49:11,930
going forward and as I was pointing

00:49:09,380 --> 00:49:14,869
pointed out earlier it is based on an

00:49:11,930 --> 00:49:19,460
ISO spec but this was nice enough to

00:49:14,869 --> 00:49:21,140
produce NIST IR 80/60 as any of you know

00:49:19,460 --> 00:49:25,220
that if you've bought a nice little spec

00:49:21,140 --> 00:49:28,730
they're not cheap so you can go off and

00:49:25,220 --> 00:49:31,460
read 80 60 and probably get about 95% of

00:49:28,730 --> 00:49:33,200
what you need I would have find it so

00:49:31,460 --> 00:49:34,520
it's quite a discount thank you for the

00:49:33,200 --> 00:49:37,369
US government for doing

00:49:34,520 --> 00:49:39,470
so anyway the link is there to go get it

00:49:37,369 --> 00:49:44,450
and that's pretty much the standard that

00:49:39,470 --> 00:49:46,970
we are working from as our basis as I

00:49:44,450 --> 00:49:49,130
also mentioned earlier the question and

00:49:46,970 --> 00:49:52,010
the question to the previous presenter

00:49:49,130 --> 00:49:54,740
is we there's also an effort to provide

00:49:52,010 --> 00:49:57,350
us with tags because with tags are XML

00:49:54,740 --> 00:49:59,030
so that wouldn't solve the problem but

00:49:57,350 --> 00:50:02,330
if we start with an information model

00:49:59,030 --> 00:50:04,040
and which is essentially what we're

00:50:02,330 --> 00:50:06,410
doing with squid tagged with with this

00:50:04,040 --> 00:50:08,630
new format we're gonna say well this is

00:50:06,410 --> 00:50:10,310
the information you need to convey among

00:50:08,630 --> 00:50:12,980
one of the ways of doing it is going to

00:50:10,310 --> 00:50:16,460
be this XML based iso standard but

00:50:12,980 --> 00:50:21,250
thanks to a colleague of mine working in

00:50:16,460 --> 00:50:26,030
TCG Hank they are actually working on

00:50:21,250 --> 00:50:28,940
coast wood which is a concise concise

00:50:26,030 --> 00:50:30,950
binary format instead of XML format so

00:50:28,940 --> 00:50:33,200
there's a link to it there I just saw

00:50:30,950 --> 00:50:36,140
some recent news out of this morning and

00:50:33,200 --> 00:50:37,940
I think it's been promoted as a draft or

00:50:36,140 --> 00:50:39,710
something like that so it's moving right

00:50:37,940 --> 00:50:42,770
along so you're going to be able to

00:50:39,710 --> 00:50:44,780
represent this information provided we

00:50:42,770 --> 00:50:47,440
continue with this wood tag which all

00:50:44,780 --> 00:50:49,490
indications are that we are going to

00:50:47,440 --> 00:50:56,000
you're going to be able to represent it

00:50:49,490 --> 00:50:57,710
as either XML or in concise binary

00:50:56,000 --> 00:50:59,600
format or any other format that somebody

00:50:57,710 --> 00:51:02,450
wants to come up with we envision for

00:50:59,600 --> 00:51:03,859
example a JSON format again because how

00:51:02,450 --> 00:51:05,300
we're gonna do this is based on an

00:51:03,859 --> 00:51:09,680
information model here's the information

00:51:05,300 --> 00:51:11,660
you need to convey and and and it's up

00:51:09,680 --> 00:51:14,270
to a binding specification or binding

00:51:11,660 --> 00:51:18,140
protocol for exactly how to map that to

00:51:14,270 --> 00:51:22,400
a particular set of data structures and

00:51:18,140 --> 00:51:23,960
in part of the reason that we we want to

00:51:22,400 --> 00:51:26,890
stick with suite axes there's a number

00:51:23,960 --> 00:51:29,119
of tools open-source tools available and

00:51:26,890 --> 00:51:32,810
software developers are already used to

00:51:29,119 --> 00:51:34,250
doing this although OMS it's kind of a

00:51:32,810 --> 00:51:36,890
different namespace for them but at

00:51:34,250 --> 00:51:41,540
least they can start from from a common

00:51:36,890 --> 00:51:42,520
set of tools that that we have so it's

00:51:41,540 --> 00:51:45,640
trying to

00:51:42,520 --> 00:51:48,070
I cover everything there okay

00:51:45,640 --> 00:51:51,430
so I just said the problem with sweet

00:51:48,070 --> 00:51:55,480
eggs though is you know sweet eggs if

00:51:51,430 --> 00:51:58,450
you look at the at at the attributes and

00:51:55,480 --> 00:52:01,150
thus would tags they have an attribute

00:51:58,450 --> 00:52:04,330
in there for identifying files and where

00:52:01,150 --> 00:52:06,610
those files are located but there are no

00:52:04,330 --> 00:52:10,440
attributes that map into something like

00:52:06,610 --> 00:52:14,140
a PCR index and a which is critical and

00:52:10,440 --> 00:52:17,560
a and a sequence number if we want to

00:52:14,140 --> 00:52:19,780
provide a set of golden measurements or

00:52:17,560 --> 00:52:22,240
reference measurements for all of the

00:52:19,780 --> 00:52:25,690
events that Avani was showing you in her

00:52:22,240 --> 00:52:30,190
presentation so we needed some other way

00:52:25,690 --> 00:52:32,800
to solve this besides we entertain the

00:52:30,190 --> 00:52:35,110
notion of just simply adding in a bunch

00:52:32,800 --> 00:52:37,630
of new attributes they have to put them

00:52:35,110 --> 00:52:39,010
into either a custom area or we can go

00:52:37,630 --> 00:52:42,010
to ISO and try to get them the

00:52:39,010 --> 00:52:44,770
standardize on a new set of attributes

00:52:42,010 --> 00:52:46,750
and neither one of those solutions seem

00:52:44,770 --> 00:52:50,619
like they seem like they were going to

00:52:46,750 --> 00:52:51,730
be too much work so and so we also

00:52:50,619 --> 00:52:54,030
thought it was gonna add a bunch of

00:52:51,730 --> 00:52:57,790
bloat so we decided to do that he

00:52:54,030 --> 00:52:59,980
decided not to do that so how we decided

00:52:57,790 --> 00:53:02,530
to solve it was as been mentioned many

00:52:59,980 --> 00:53:06,400
times all problems can be solved with

00:53:02,530 --> 00:53:08,890
yet another level of indirection so this

00:53:06,400 --> 00:53:11,410
is our current proposal for solving that

00:53:08,890 --> 00:53:14,800
on the right hand side is what's called

00:53:11,410 --> 00:53:17,770
the base rim so the base rim is a ass

00:53:14,800 --> 00:53:21,580
wood tag but we haven't added any any

00:53:17,770 --> 00:53:23,350
new attributes to it and what we're

00:53:21,580 --> 00:53:24,910
doing is we're looking at this thing

00:53:23,350 --> 00:53:26,890
called the payload which again was

00:53:24,910 --> 00:53:28,540
mentioned earlier so inside the payload

00:53:26,890 --> 00:53:31,780
and you can have multiple of these

00:53:28,540 --> 00:53:33,490
payloads inside of a swig tag we are

00:53:31,780 --> 00:53:36,550
gonna use those and this is where we

00:53:33,490 --> 00:53:38,950
thought well we'll add a new type of

00:53:36,550 --> 00:53:41,320
thing called PC attribute instead of

00:53:38,950 --> 00:53:44,830
payload and substituted so that would be

00:53:41,320 --> 00:53:48,100
PC our index and event or you know

00:53:44,830 --> 00:53:49,960
something and as you saw from the from

00:53:48,100 --> 00:53:53,900
the screen these events can be quite

00:53:49,960 --> 00:53:56,540
large what we decided to do instead was

00:53:53,900 --> 00:53:58,520
use what's there and use the file

00:53:56,540 --> 00:54:01,010
attribute to point to something new this

00:53:58,520 --> 00:54:03,140
is the level of indirection so we're

00:54:01,010 --> 00:54:06,080
going to create these a definition for

00:54:03,140 --> 00:54:09,290
these rim support files and the rims for

00:54:06,080 --> 00:54:11,570
files will have information like PCR

00:54:09,290 --> 00:54:13,880
index and this again the our focus right

00:54:11,570 --> 00:54:16,280
now is on firmware it will have things

00:54:13,880 --> 00:54:18,740
like PCR index and sequence number and

00:54:16,280 --> 00:54:21,290
the information that you need that that

00:54:18,740 --> 00:54:22,820
you want to convey and and I'll go into

00:54:21,290 --> 00:54:24,740
a little more detail of the two classes

00:54:22,820 --> 00:54:27,050
of information actually there there on

00:54:24,740 --> 00:54:30,410
the slide we're looking at the OEM can

00:54:27,050 --> 00:54:33,800
provide the raw the ending PCR value

00:54:30,410 --> 00:54:38,660
itself or this can also contain here's

00:54:33,800 --> 00:54:43,220
the list of events that you will see for

00:54:38,660 --> 00:54:46,070
example in the in in the display that

00:54:43,220 --> 00:54:50,170
Avani showed so these will simply point

00:54:46,070 --> 00:54:53,000
to an array of these support files and

00:54:50,170 --> 00:54:54,740
we are the I'm only showing to the

00:54:53,000 --> 00:54:57,560
attributes here but these are the only

00:54:54,740 --> 00:54:59,480
who we really need to change or make use

00:54:57,560 --> 00:55:01,460
of I should say when is the file and

00:54:59,480 --> 00:55:03,320
points the the support file and then of

00:55:01,460 --> 00:55:06,140
course is the hash of the support file

00:55:03,320 --> 00:55:08,780
we don't see a need to sign each support

00:55:06,140 --> 00:55:11,450
file because the hash of each one is

00:55:08,780 --> 00:55:13,040
inside the Swift AG and then we're going

00:55:11,450 --> 00:55:23,600
to mandate the Swift AG design because

00:55:13,040 --> 00:55:25,880
that's an option first quit alright so

00:55:23,600 --> 00:55:27,770
so basically this would tag is going to

00:55:25,880 --> 00:55:30,320
be signed and that signature is going to

00:55:27,770 --> 00:55:32,090
provide the integrity of all of the

00:55:30,320 --> 00:55:34,430
support files so whole this whole thing

00:55:32,090 --> 00:55:37,160
will be some we're calling this an

00:55:34,430 --> 00:55:39,170
instance and again the names and things

00:55:37,160 --> 00:55:41,470
may change but this is kind of the

00:55:39,170 --> 00:55:49,600
direction that we're heading right now

00:55:41,470 --> 00:55:49,600
alright so so I'm not in page mode

00:55:49,720 --> 00:55:56,550
alright so

00:55:52,740 --> 00:55:59,220
the the the format of the specifications

00:55:56,550 --> 00:56:00,390
we are going to be producing is we're

00:55:59,220 --> 00:56:02,760
going to start with as I mentioned

00:56:00,390 --> 00:56:04,140
before with an information model and

00:56:02,760 --> 00:56:06,240
you're not gonna be able to do anything

00:56:04,140 --> 00:56:08,700
with this information model except write

00:56:06,240 --> 00:56:10,890
another spec and the information and and

00:56:08,700 --> 00:56:13,230
and this gives us the flexibility as I

00:56:10,890 --> 00:56:14,700
indicated earlier of having this

00:56:13,230 --> 00:56:17,520
information in different types of

00:56:14,700 --> 00:56:20,069
formats the pan on the particular use

00:56:17,520 --> 00:56:21,329
case so the information model is simply

00:56:20,069 --> 00:56:23,430
going to describe I'll go to this

00:56:21,329 --> 00:56:24,930
previous will simply describe the

00:56:23,430 --> 00:56:27,300
information that has to be in the base

00:56:24,930 --> 00:56:29,609
room and the information has to be in

00:56:27,300 --> 00:56:31,589
the support file but it's not going to

00:56:29,609 --> 00:56:33,480
talk at all about what format it should

00:56:31,589 --> 00:56:35,250
be in about what sort of standards it

00:56:33,480 --> 00:56:38,490
might even just be a wire for it might

00:56:35,250 --> 00:56:41,790
not even be a file format all right and

00:56:38,490 --> 00:56:43,589
then after that there will be a what's

00:56:41,790 --> 00:56:46,079
called the these binding specifications

00:56:43,589 --> 00:56:48,270
and you know the first one we're gonna

00:56:46,079 --> 00:56:50,040
talk talk about is obviously the binding

00:56:48,270 --> 00:56:54,210
specification for how do you represent

00:56:50,040 --> 00:56:56,099
this stuff on a PC client or we call it

00:56:54,210 --> 00:56:58,380
a PC client but everybody leverages off

00:56:56,099 --> 00:57:01,260
of that specification the servers

00:56:58,380 --> 00:57:05,000
typically use although the PC client

00:57:01,260 --> 00:57:10,680
specs the the network equipment

00:57:05,000 --> 00:57:13,470
workgroup uses that as well so we are

00:57:10,680 --> 00:57:16,650
going to define two types of support

00:57:13,470 --> 00:57:20,510
files as I mentioned before and the

00:57:16,650 --> 00:57:27,030
first type is going to be a snapshot of

00:57:20,510 --> 00:57:30,059
the X or the bottom the simplest format

00:57:27,030 --> 00:57:32,760
would be a snapshot of the individual PC

00:57:30,059 --> 00:57:36,000
RS and I'll show that them in the second

00:57:32,760 --> 00:57:38,460
will be a long list of all of the events

00:57:36,000 --> 00:57:42,390
very similar to what what Ivana showed

00:57:38,460 --> 00:57:44,069
here's all the events that the OEM that

00:57:42,390 --> 00:57:45,780
should come out may be out of the golden

00:57:44,069 --> 00:57:48,720
measurements when the OEMs first

00:57:45,780 --> 00:57:51,510
produces it and then the final thing

00:57:48,720 --> 00:57:54,390
that this binding specification will

00:57:51,510 --> 00:57:57,540
provide is where do you put this stuff

00:57:54,390 --> 00:58:00,450
where do you distribute this stuff and I

00:57:57,540 --> 00:58:02,819
will going we I think during Q&A we can

00:58:00,450 --> 00:58:05,770
have a debate about how this isn't we

00:58:02,819 --> 00:58:09,440
have I'll show one proposal in a minute

00:58:05,770 --> 00:58:11,870
so this is an example here of the very

00:58:09,440 --> 00:58:15,080
simple set of measurements that the OEM

00:58:11,870 --> 00:58:17,570
can provide and one would I'm just

00:58:15,080 --> 00:58:20,960
calling this for right now aggregate PC

00:58:17,570 --> 00:58:23,330
ours so in this very simple case the OEM

00:58:20,960 --> 00:58:25,130
or the IT department it doesn't mean

00:58:23,330 --> 00:58:29,210
this stuff has to come from the OEM we

00:58:25,130 --> 00:58:30,740
want it to but on legacy systems they

00:58:29,210 --> 00:58:33,410
made it out of produce that doesn't mean

00:58:30,740 --> 00:58:35,540
you can't have this stuff today somebody

00:58:33,410 --> 00:58:37,820
can take a system into a lab that they

00:58:35,540 --> 00:58:39,260
believe is pristine and the BIOS is good

00:58:37,820 --> 00:58:41,690
don't we just tampered with it nobody's

00:58:39,260 --> 00:58:44,060
updated and you can just do PCR reads

00:58:41,690 --> 00:58:47,630
and get this information out of here so

00:58:44,060 --> 00:58:50,060
this is the expected values for PCR 0

00:58:47,630 --> 00:58:52,400
through 7 for example which is with PC

00:58:50,060 --> 00:58:54,050
client defines mom in which case that's

00:58:52,400 --> 00:58:56,690
all you really care about is this is

00:58:54,050 --> 00:58:58,910
maybe it's a single point point-of-sale

00:58:56,690 --> 00:59:00,140
terminal it's not something that's

00:58:58,910 --> 00:59:02,540
supposed to change from booth to booth

00:59:00,140 --> 00:59:04,760
and we certainly don't expect people who

00:59:02,540 --> 00:59:07,520
be updating the firmware so in this case

00:59:04,760 --> 00:59:09,790
the use case might very well be it's

00:59:07,520 --> 00:59:13,610
perfectly fine to distribute the golden

00:59:09,790 --> 00:59:16,580
PCR measurements for I just depicted 0 2

00:59:13,610 --> 00:59:18,530
& 4 but all 7 of them for example in

00:59:16,580 --> 00:59:21,290
this one aggregate or there's one

00:59:18,530 --> 00:59:23,210
written firmware instance and it's

00:59:21,290 --> 00:59:24,880
simply just distributed now what I can

00:59:23,210 --> 00:59:27,980
do is I can hand this to the verifier

00:59:24,880 --> 00:59:30,410
the verifier perform the steps to the

00:59:27,980 --> 00:59:33,740
Bonnie talked about earlier go give me

00:59:30,410 --> 00:59:35,510
your your quote information and I'm

00:59:33,740 --> 00:59:39,920
simply gonna do a comparison operation

00:59:35,510 --> 00:59:41,030
on these the other choice this is

00:59:39,920 --> 00:59:42,050
actually what I wanna show the other

00:59:41,030 --> 00:59:45,950
choice would be

00:59:42,050 --> 00:59:48,770
I want more detail if PCRs don't match

00:59:45,950 --> 00:59:51,290
exactly what the OEM said they should be

00:59:48,770 --> 00:59:53,630
I want to be able to decompose this and

00:59:51,290 --> 00:59:56,810
identify something in the middle for

00:59:53,630 --> 00:59:58,610
example and kind of a sole use case but

00:59:56,810 --> 01:00:02,060
I've actually seen it where somebody

00:59:58,610 --> 01:00:04,160
simply swapped the PCI cards on the bus

01:00:02,060 --> 01:00:06,860
well the bios goes through the numerous

01:00:04,160 --> 01:00:10,460
the PCI cards takes a measurement of the

01:00:06,860 --> 01:00:13,130
bios visible portion of the option ROM

01:00:10,460 --> 01:00:15,410
is the older term than EFI application

01:00:13,130 --> 01:00:17,990
that might be sitting on on there in

01:00:15,410 --> 01:00:19,869
which case the VCR 2 and

01:00:17,990 --> 01:00:22,430
case will be very different at the end

01:00:19,869 --> 01:00:24,400
but if you actually look at the events

01:00:22,430 --> 01:00:28,220
in there the only thing that changed is

01:00:24,400 --> 01:00:31,010
the card and slot to thee that event and

01:00:28,220 --> 01:00:32,780
three are now swapped around so if you

01:00:31,010 --> 01:00:35,300
had a more sophisticated verifier

01:00:32,780 --> 01:00:38,360
someone be able if they receive

01:00:35,300 --> 01:00:40,490
something like this from the OEM or from

01:00:38,360 --> 01:00:41,869
a trusted source they would actually be

01:00:40,490 --> 01:00:45,140
able to go through all PCR teams

01:00:41,869 --> 01:00:46,730
different but why is it different and be

01:00:45,140 --> 01:00:49,190
able to go through and look for these or

01:00:46,730 --> 01:00:51,320
maybe added a card ID probably a better

01:00:49,190 --> 01:00:53,330
case you get out of the car or cause

01:00:51,320 --> 01:00:55,010
piece here twos gonna be different but

01:00:53,330 --> 01:00:57,800
I've got this event in the middle of it

01:00:55,010 --> 01:01:00,350
then I wasn't expecting but okay

01:00:57,800 --> 01:01:02,480
someone's authorized open up this this

01:01:00,350 --> 01:01:03,920
machine and put this card in here so

01:01:02,480 --> 01:01:06,350
that's okay I'm gonna let this thing on

01:01:03,920 --> 01:01:08,330
the network because that event that that

01:01:06,350 --> 01:01:10,100
particular digest matched what was

01:01:08,330 --> 01:01:12,650
claimed I can go look that up if I want

01:01:10,100 --> 01:01:14,420
to this is a lot more work but a lot

01:01:12,650 --> 01:01:17,420
more flexible we're going to provide

01:01:14,420 --> 01:01:21,730
we're proposing to provide the option to

01:01:17,420 --> 01:01:21,730
do both or either one of these formats

01:01:22,990 --> 01:01:29,300
so what do you end up with in is again

01:01:27,109 --> 01:01:32,869
what we're calling a bundle we'll just

01:01:29,300 --> 01:01:37,310
make it up these terms for now is in the

01:01:32,869 --> 01:01:40,280
top case you'll have this array of here

01:01:37,310 --> 01:01:43,460
you're providing the detailed events for

01:01:40,280 --> 01:01:45,020
the log you can see it and this is very

01:01:43,460 --> 01:01:47,810
simple right it'd be much bigger than

01:01:45,020 --> 01:01:50,270
this you'd have one of these four for

01:01:47,810 --> 01:01:53,030
each of the seven PCRs and then of

01:01:50,270 --> 01:01:55,880
course down the vertical column you

01:01:53,030 --> 01:01:58,220
would have each one of the events that

01:01:55,880 --> 01:02:00,020
within a log that are associated with

01:01:58,220 --> 01:02:03,590
that particular PCR so this would be an

01:02:00,020 --> 01:02:05,420
awful lot of information to pass the

01:02:03,590 --> 01:02:08,210
bottom one obviously the simpler case

01:02:05,420 --> 01:02:11,210
where you just have one rim firmware

01:02:08,210 --> 01:02:15,080
instance and where you've got you know

01:02:11,210 --> 01:02:17,630
one rims one swift tag structure that

01:02:15,080 --> 01:02:20,750
simply points to in this example three

01:02:17,630 --> 01:02:22,760
but in reality it could be a zero piece

01:02:20,750 --> 01:02:25,010
here zero through seven for each one of

01:02:22,760 --> 01:02:28,130
the preview PC ours now how do you

01:02:25,010 --> 01:02:31,130
distribute this stuff obviously one way

01:02:28,130 --> 01:02:31,819
of doing it is you can provide a well

01:02:31,130 --> 01:02:35,269
known you are

01:02:31,819 --> 01:02:37,789
to to go get them and I think that's

01:02:35,269 --> 01:02:41,799
going to be a viable solution another

01:02:37,789 --> 01:02:47,209
solution that we would love feedback on

01:02:41,799 --> 01:02:50,869
is maybe we allocate and inside the boot

01:02:47,209 --> 01:02:54,169
partition a new place and we're just

01:02:50,869 --> 01:02:58,399
calling it TCG slash manifest where the

01:02:54,169 --> 01:03:00,529
OEM can place this information onto the

01:02:58,399 --> 01:03:02,149
boot drive before they ship it now

01:03:00,529 --> 01:03:04,789
obviously there's problems whatever you

01:03:02,149 --> 01:03:06,309
swap out the boot driver right so we're

01:03:04,789 --> 01:03:08,630
gonna have to find a solution that's why

01:03:06,309 --> 01:03:11,029
my personal belief is we're gonna have

01:03:08,630 --> 01:03:13,339
to support two of them the first having

01:03:11,029 --> 01:03:16,519
it in locally on the machine for

01:03:13,339 --> 01:03:18,319
convenience but I think the whole notion

01:03:16,519 --> 01:03:19,969
of that's the only place it is and if

01:03:18,319 --> 01:03:21,549
you swap on your drive you're out of

01:03:19,969 --> 01:03:24,109
luck and I don't think that's gonna fly

01:03:21,549 --> 01:03:27,049
so I think there's got to be some way of

01:03:24,109 --> 01:03:29,719
replacing it and obviously going back to

01:03:27,049 --> 01:03:31,369
the OEM and asking a question given the

01:03:29,719 --> 01:03:35,899
model number

01:03:31,369 --> 01:03:37,489
it is obviously going to be a I think

01:03:35,899 --> 01:03:40,130
that's gonna have to be an option but

01:03:37,489 --> 01:03:43,009
again we're just working through this

01:03:40,130 --> 01:03:45,529
the point of this discussion the born

01:03:43,009 --> 01:03:48,709
this is to give you the background the

01:03:45,529 --> 01:03:51,009
tutorial on all the attestation this we

01:03:48,709 --> 01:03:54,019
believe is pretty much the final piece

01:03:51,009 --> 01:03:55,609
because we believe we have the canonical

01:03:54,019 --> 01:03:57,769
event log that we can provide to the

01:03:55,609 --> 01:04:00,559
verifiers in a standardized format

01:03:57,769 --> 01:04:02,599
hopefully producing a diverse and rich

01:04:00,559 --> 01:04:05,389
set of verifiers out there and and we

01:04:02,599 --> 01:04:07,699
have a list of the existing ones out

01:04:05,389 --> 01:04:09,619
there in the market today and there were

01:04:07,699 --> 01:04:12,469
actually more than I was expecting so

01:04:09,619 --> 01:04:13,759
that's actually good news I would like

01:04:12,469 --> 01:04:16,880
everybody to start using these

01:04:13,759 --> 01:04:19,369
standardized formats so that vendors or

01:04:16,880 --> 01:04:21,139
customers don't get locked in to a

01:04:19,369 --> 01:04:24,969
particular set of solutions a particular

01:04:21,139 --> 01:04:33,199
OEM what we really don't want is om1

01:04:24,969 --> 01:04:35,209
producing rim or rim formats and one for

01:04:33,199 --> 01:04:37,999
what their favorite way of representing

01:04:35,209 --> 01:04:40,399
and then om2 does it a second way and

01:04:37,999 --> 01:04:41,899
that om3 does it a third and these poor

01:04:40,399 --> 01:04:44,029
verifiers we have to go through the

01:04:41,899 --> 01:04:44,690
parse every one of them and then if

01:04:44,029 --> 01:04:46,069
somebody new

01:04:44,690 --> 01:04:48,230
along the block then they have to go

01:04:46,069 --> 01:04:51,109
figure out how to plug that one in and

01:04:48,230 --> 01:04:53,089
the same exact thing for the series of

01:04:51,109 --> 01:04:54,290
events coming from the the platform

01:04:53,089 --> 01:04:58,579
although we have a little more control

01:04:54,290 --> 01:05:02,770
over them anyway so here's the we have a

01:04:58,579 --> 01:05:07,339
whole page of cool things that we found

01:05:02,770 --> 01:05:09,890
so new things project actually learn

01:05:07,339 --> 01:05:13,190
about this week's are we doing some some

01:05:09,890 --> 01:05:15,829
reading on that but anyway that's pretty

01:05:13,190 --> 01:05:19,839
much our presentation we're just about

01:05:15,829 --> 01:05:24,140
that 20 20 minutes I guess for

01:05:19,839 --> 01:05:26,089
discussion any questions about the

01:05:24,140 --> 01:05:29,180
effort that we're doing again the the

01:05:26,089 --> 01:05:31,099
effort on the rim is very active within

01:05:29,180 --> 01:05:34,069
within TCG and we'd be very much

01:05:31,099 --> 01:05:36,790
interested in getting feedback before we

01:05:34,069 --> 01:05:36,790
get too far along

01:05:49,740 --> 01:05:58,950
I I don't think they they don't appear

01:05:57,140 --> 01:06:02,760
and the bunny's done a little more

01:05:58,950 --> 01:06:05,040
research so correct me they don't appear

01:06:02,760 --> 01:06:08,099
to deal with platform certificate so the

01:06:05,040 --> 01:06:11,750
the hers project ends at the delivery of

01:06:08,099 --> 01:06:14,250
an AI cake or sorry old school a.k.a

01:06:11,750 --> 01:06:16,290
stinky the attestation key that for

01:06:14,250 --> 01:06:21,690
summer we had we're not good they didn't

01:06:16,290 --> 01:06:24,300
like the I so hers ends at delivery and

01:06:21,690 --> 01:06:27,570
a K right and that's it that's as far as

01:06:24,300 --> 01:06:30,089
it goes you know we didn't I talked

01:06:27,570 --> 01:06:31,740
about well what if we expand it firm

01:06:30,089 --> 01:06:35,210
believer in kind of the Linux concept

01:06:31,740 --> 01:06:38,369
all right but each tool do its thing and

01:06:35,210 --> 01:06:42,330
and I think hers giving her as the stock

01:06:38,369 --> 01:06:45,109
at provisioning the system here's the PN

01:06:42,330 --> 01:06:52,080
you know going back to going back to

01:06:45,109 --> 01:06:56,130
what she showed here sorry for the to

01:06:52,080 --> 01:06:58,050
put this into slide boat but one of

01:06:56,130 --> 01:07:01,560
these displays I don't know actually I

01:06:58,050 --> 01:07:05,480
don't think we have a display yeah

01:07:01,560 --> 01:07:10,200
actually this one here yeah yeah this

01:07:05,480 --> 01:07:11,750
yes I do right once this is the a K that

01:07:10,200 --> 01:07:16,440
you labeled it better

01:07:11,750 --> 01:07:19,260
how's my false my slide once this key is

01:07:16,440 --> 01:07:21,750
delivered it's signed by every all the

01:07:19,260 --> 01:07:25,050
other keys on this system are signed by

01:07:21,750 --> 01:07:28,770
an entity outside of the owner either

01:07:25,050 --> 01:07:31,800
the TPM vendor or keeping a supplier the

01:07:28,770 --> 01:07:35,510
platform manufacturer but once you get

01:07:31,800 --> 01:07:38,820
to here that key is signed by the owner

01:07:35,510 --> 01:07:41,310
you know so these or whatever at this

01:07:38,820 --> 01:07:42,839
point they should make the claim this is

01:07:41,310 --> 01:07:45,270
a valid platform I've already checked

01:07:42,839 --> 01:07:47,820
out the rest of this everything on this

01:07:45,270 --> 01:07:50,040
slide can just go away as far as that

01:07:47,820 --> 01:07:52,770
owners concerned until the system is is

01:07:50,040 --> 01:07:55,470
really provision so I still believe that

01:07:52,770 --> 01:07:57,690
this is where her should end right this

01:07:55,470 --> 01:08:01,829
does a great job of getting us there

01:07:57,690 --> 01:08:04,530
from this point you get a key and now

01:08:01,829 --> 01:08:07,200
you use that key to test the firmware to

01:08:04,530 --> 01:08:09,000
test of the software as you know Ken's

01:08:07,200 --> 01:08:11,640
got some tools that does this key lime

01:08:09,000 --> 01:08:13,950
does this I think that's what key lime

01:08:11,640 --> 01:08:15,960
starts is assuming you've got these

01:08:13,950 --> 01:08:18,120
actually I think it starts with an ek

01:08:15,960 --> 01:08:20,250
can start with a platform certificate

01:08:18,120 --> 01:08:22,799
problem with an ek along which is why I

01:08:20,250 --> 01:08:24,660
like you know this is I think to me this

01:08:22,799 --> 01:08:26,609
is the end game you know I have a little

01:08:24,660 --> 01:08:29,759
little daughter board for a Raspberry Pi

01:08:26,609 --> 01:08:32,819
that's got an opinion TPM and that

01:08:29,759 --> 01:08:35,069
Infineon TPM is just as good as the

01:08:32,819 --> 01:08:37,140
Infineon TPM that's inside the twenty

01:08:35,069 --> 01:08:38,969
thousand dollar router right no

01:08:37,140 --> 01:08:41,190
difference between them what's different

01:08:38,969 --> 01:08:43,230
is what platform it's on the platform

01:08:41,190 --> 01:08:44,279
certificate says this stays dead all

01:08:43,230 --> 01:08:46,949
right so we can throw all this stuff

01:08:44,279 --> 01:08:49,259
away but once I get that key I'm done

01:08:46,949 --> 01:08:50,940
and then I can move up the stack and it

01:08:49,259 --> 01:08:52,259
started telling it the firmware this

01:08:50,940 --> 01:08:54,500
stuff that the owner actually cares

01:08:52,259 --> 01:08:54,500
about

01:08:58,279 --> 01:09:04,859
thumbs up thumbs down using Swift eggs

01:09:01,430 --> 01:09:08,790
that's kind of there's two things I want

01:09:04,859 --> 01:09:11,759
to walk away from this is its wit tagged

01:09:08,790 --> 01:09:13,350
the right approach I mean because at the

01:09:11,759 --> 01:09:17,730
end of the day if this goes forward you

01:09:13,350 --> 01:09:20,339
guys gonna have to deal with Oh speak

01:09:17,730 --> 01:09:23,549
now or forever hold your peace and tell

01:09:20,339 --> 01:09:26,790
the next patch no yes

01:09:23,549 --> 01:09:30,750
okay everybody likes with tags

01:09:26,790 --> 01:09:34,529
what about where to put it I think I saw

01:09:30,750 --> 01:09:40,370
a grown I might in this interpreter they

01:09:34,529 --> 01:09:40,370
might be reading you know who knows that

01:09:41,150 --> 01:09:46,469
if we need to put it local and I think

01:09:44,790 --> 01:09:50,219
it is important to carry this stuff

01:09:46,469 --> 01:09:52,950
local and I believe it that's not the

01:09:50,219 --> 01:09:54,840
only place that should be again Knott

01:09:52,950 --> 01:09:56,430
County disfigures and gee I don't like

01:09:54,840 --> 01:09:59,580
this too good Drive and I want to put

01:09:56,430 --> 01:10:06,090
something bigger in is this the right

01:09:59,580 --> 01:10:15,920
approach creating a new space a new

01:10:06,090 --> 01:10:15,920
folder in booth yes

01:10:20,610 --> 01:10:30,390
ah good point yeah so let me ask I'll

01:10:26,700 --> 01:10:31,830
repeat the question so let me repeat the

01:10:30,390 --> 01:10:33,840
question what's the point of keeping

01:10:31,830 --> 01:10:36,390
that vocal it's all right because the

01:10:33,840 --> 01:10:38,790
verifies got to go get it anyway

01:10:36,390 --> 01:10:42,180
off the first used case to me would be

01:10:38,790 --> 01:10:44,850
offline distribution so my company for

01:10:42,180 --> 01:10:46,290
example if we were to move on something

01:10:44,850 --> 01:10:47,940
like this you've got an industrial

01:10:46,290 --> 01:10:52,920
controllers out there you go to point

01:10:47,940 --> 01:10:54,180
just just an example use case right if

01:10:52,920 --> 01:10:56,250
you got an industrial controller out

01:10:54,180 --> 01:11:00,930
there sits on the other side of the Ooty

01:10:56,250 --> 01:11:03,330
sits inside okay you can't call home to

01:11:00,930 --> 01:11:06,780
whoever made this thing you can't cross

01:11:03,330 --> 01:11:08,460
the boundary right so if you I mean the

01:11:06,780 --> 01:11:11,130
other choice is to copy all this stuff

01:11:08,460 --> 01:11:13,730
locally and have it within me within a

01:11:11,130 --> 01:11:17,040
provision or inside but since this

01:11:13,730 --> 01:11:19,320
signed anyway right I don't have to

01:11:17,040 --> 01:11:21,150
worry about somebody tampering with it

01:11:19,320 --> 01:11:22,950
I'll detect that because I have the

01:11:21,150 --> 01:11:25,440
route I have the signers route key that

01:11:22,950 --> 01:11:28,050
I would have had to have gotten right by

01:11:25,440 --> 01:11:30,000
some out-of-band mechanism you know guy

01:11:28,050 --> 01:11:31,680
with a briefcase with a you know

01:11:30,000 --> 01:11:33,600
handcuff for a phone call reading

01:11:31,680 --> 01:11:36,120
thumbprint or whatever right that I have

01:11:33,600 --> 01:11:39,900
to do is a funny described for any of

01:11:36,120 --> 01:11:41,940
this but once I have the root key I I

01:11:39,900 --> 01:11:44,880
want to decide if I trust these things

01:11:41,940 --> 01:11:46,290
are not right and put it in here we

01:11:44,880 --> 01:11:48,570
couldn't think of a better place to put

01:11:46,290 --> 01:11:51,180
them because this is the thing that in

01:11:48,570 --> 01:11:53,310
theory doesn't change until you swap out

01:11:51,180 --> 01:11:56,340
the hard drive and if you go below this

01:11:53,310 --> 01:11:57,900
way well then you know you you know you

01:11:56,340 --> 01:12:00,240
have other things going on if you start

01:11:57,900 --> 01:12:01,650
blown away your boot partition anyway

01:12:00,240 --> 01:12:02,360
right you you've done it for another

01:12:01,650 --> 01:12:05,370
reason

01:12:02,360 --> 01:12:07,050
so yeah I mean no but it is a problem if

01:12:05,370 --> 01:12:16,340
you don't save this and you need it then

01:12:07,050 --> 01:12:16,340
that's a problem no any other

01:12:17,480 --> 01:12:21,130
pretty likes this stuff

01:12:25,290 --> 01:12:35,670
oh cool all right I guess we're done

01:12:28,920 --> 01:12:38,130
early for everybody so and if anybody

01:12:35,670 --> 01:12:42,210
wants to hang right afterwards you know

01:12:38,130 --> 01:12:44,100
the interesting to have a AB off of

01:12:42,210 --> 01:12:46,410
people can leave that aren't really

01:12:44,100 --> 01:12:49,770
interested I'll be happy to hang around

01:12:46,410 --> 01:12:51,930
and this is a lot session this would be

01:12:49,770 --> 01:12:53,670
the time for bops anyway and I'll make

01:12:51,930 --> 01:12:55,890
myself available and anybody who wants

01:12:53,670 --> 01:13:02,760
to join in that would be that would be

01:12:55,890 --> 01:13:06,119
great so thanks Avani and Monty

01:13:02,760 --> 01:13:06,119

YouTube URL: https://www.youtube.com/watch?v=571FQxYk9xs


