Title: Securing TPM Secrets with TXT and Kernel Signatures - Paul Moore, Cisco
Publication date: 2019-08-28
Playlist: Linux Security Summit NA 2019 - San Diego
Description: 
	Securing TPM Secrets with TXT and Kernel Signatures - Paul Moore, Cisco

This presentation will discuss a work in progress to secure data in the TPM2’s NVRAM using Intel’s TXT and extensions to tboot to support kernel signature verification. The ultimate goal being the ability to restrict access to TPM2 stored data to only those kernels which have been signed by an authorized entity while being robust in the face of kernel upgrades and downgrades.The talk will discuss the design, and current progress, in the context of existing solutions using traditional TXT and UEFI Secure Boot; explaining why these solutions fall short either in terms of protection or usability.
Captions: 
	00:00:00,030 --> 00:00:05,850
so hi everybody my name is Paul Moore

00:00:03,140 --> 00:00:07,350
you have any questions and you can't

00:00:05,850 --> 00:00:09,389
find me this week that's my email

00:00:07,350 --> 00:00:11,490
address but I'll be here Monday Tuesday

00:00:09,389 --> 00:00:14,670
Wednesday always happy to talk to you

00:00:11,490 --> 00:00:16,859
guys so if somebody's got any questions

00:00:14,670 --> 00:00:19,140
or if you think this is the worst idea

00:00:16,859 --> 00:00:21,840
you've ever heard of and you are gladly

00:00:19,140 --> 00:00:24,570
to tell me the 37 points why I'd love to

00:00:21,840 --> 00:00:25,830
hear it not really you know if I'm going

00:00:24,570 --> 00:00:28,560
down the wrong path please let me know

00:00:25,830 --> 00:00:31,529
so anyway with that let's go ahead and

00:00:28,560 --> 00:00:33,120
get started so I'm going to start off

00:00:31,529 --> 00:00:35,730
with a bunch of disclaimers I usually

00:00:33,120 --> 00:00:37,469
don't do this but I feel like secure

00:00:35,730 --> 00:00:40,500
boot especially when we started talking

00:00:37,469 --> 00:00:42,210
about txt people come in with a lot of

00:00:40,500 --> 00:00:43,649
misconceptions about what I'm trying to

00:00:42,210 --> 00:00:47,160
talk about here so I just wanted to kind

00:00:43,649 --> 00:00:49,770
of set the stage a little bit this is

00:00:47,160 --> 00:00:51,629
not a talk about secure boot okay even

00:00:49,770 --> 00:00:53,730
though I'm going to spend a lot of time

00:00:51,629 --> 00:00:55,500
talking about secure boot that's not

00:00:53,730 --> 00:00:57,870
actually what I'm trying to solve here

00:00:55,500 --> 00:01:00,600
so please keep that in mind I mean I'm

00:00:57,870 --> 00:01:02,850
I'm one of the things that if this kick

00:01:00,600 --> 00:01:04,710
work continues on no obviously B how do

00:01:02,850 --> 00:01:06,720
we integrate this with different secure

00:01:04,710 --> 00:01:09,450
boot approaches but for right now it's

00:01:06,720 --> 00:01:11,909
not what I'm focusing on this talk is

00:01:09,450 --> 00:01:14,670
all about protecting secrets that we're

00:01:11,909 --> 00:01:16,590
going to store in the TPMS nvram that's

00:01:14,670 --> 00:01:18,450
the problem I'm trying to solve here I'm

00:01:16,590 --> 00:01:20,299
now looking at trying to restrict what

00:01:18,450 --> 00:01:23,790
kernels you can boot out in the system

00:01:20,299 --> 00:01:25,619
in fact as I found out as I'm doing the

00:01:23,790 --> 00:01:27,390
development there's actually some

00:01:25,619 --> 00:01:29,189
advantages to be had for being able to

00:01:27,390 --> 00:01:31,049
boot an arbitrary kernel onto your

00:01:29,189 --> 00:01:32,729
system because when you completely wedge

00:01:31,049 --> 00:01:34,020
it that way you don't have to jump

00:01:32,729 --> 00:01:37,890
through a bunch of hurdles to get your

00:01:34,020 --> 00:01:40,439
develop and kernel back on also the last

00:01:37,890 --> 00:01:44,880
little point this talk focuses on

00:01:40,439 --> 00:01:46,560
Intel's txt implementation the simple

00:01:44,880 --> 00:01:48,869
reason for that is the machine I'm using

00:01:46,560 --> 00:01:51,450
for tests has Intel chipset Intel

00:01:48,869 --> 00:01:54,270
hardware in it in theory

00:01:51,450 --> 00:01:57,210
AMD's SVM should have similar

00:01:54,270 --> 00:02:01,110
capabilities I just don't happen to have

00:01:57,210 --> 00:02:04,350
an AMD system to play with so with that

00:02:01,110 --> 00:02:06,180
let's go into the problem you said

00:02:04,350 --> 00:02:07,860
earlier this is all about you know

00:02:06,180 --> 00:02:10,920
protecting secrets that I've got stored

00:02:07,860 --> 00:02:12,110
in the TPM so this could really be

00:02:10,920 --> 00:02:15,290
anything

00:02:12,110 --> 00:02:16,910
you know but as the strongman example

00:02:15,290 --> 00:02:20,180
I'll use today you know just imagine

00:02:16,910 --> 00:02:22,970
we're storing storage encryption keys in

00:02:20,180 --> 00:02:25,370
the TPM but really could be anything you

00:02:22,970 --> 00:02:27,800
want it's just something that you're

00:02:25,370 --> 00:02:30,170
going to put inside the TPMS and vram

00:02:27,800 --> 00:02:32,690
and you want to protect how do you go

00:02:30,170 --> 00:02:35,390
about doing that and in my particular

00:02:32,690 --> 00:02:38,480
case I want to make it so that only

00:02:35,390 --> 00:02:41,780
kernels which I've authorized can

00:02:38,480 --> 00:02:45,620
actually have access to that protected

00:02:41,780 --> 00:02:48,200
TPM secret and this third point is the

00:02:45,620 --> 00:02:50,000
real rub when I first started looking at

00:02:48,200 --> 00:02:53,000
this this third point is what caused me

00:02:50,000 --> 00:02:55,820
the most anguish I wanted something that

00:02:53,000 --> 00:02:59,120
works on a legacy bio system as well as

00:02:55,820 --> 00:03:01,580
a UEFI based system and it it's worth

00:02:59,120 --> 00:03:04,280
noting too that when I say UEFI I'm

00:03:01,580 --> 00:03:05,690
talking about both a modern UEFI system

00:03:04,280 --> 00:03:07,760
that's got secure boot and all that

00:03:05,690 --> 00:03:09,830
stuff as well as perhaps older UEFI

00:03:07,760 --> 00:03:11,450
systems that maybe don't necessarily

00:03:09,830 --> 00:03:14,530
have all the secure boot functionality

00:03:11,450 --> 00:03:17,060
so I need something that is really as

00:03:14,530 --> 00:03:18,260
firmware agnostic as possible because I

00:03:17,060 --> 00:03:22,610
want to run this on a bunch of different

00:03:18,260 --> 00:03:24,350
systems old and new and the last part I

00:03:22,610 --> 00:03:26,420
feel like I had to throw this in because

00:03:24,350 --> 00:03:28,400
this is kind of an important point as we

00:03:26,420 --> 00:03:31,010
go on but I want this to be easy to

00:03:28,400 --> 00:03:33,290
manage handle kernel updates gracefully

00:03:31,010 --> 00:03:35,630
you know I mean there's a new kernel all

00:03:33,290 --> 00:03:37,280
the time these days and I want to be

00:03:35,630 --> 00:03:39,170
able to throw a new kernel on there and

00:03:37,280 --> 00:03:41,090
have a minimal risk that I'm gonna get

00:03:39,170 --> 00:03:42,800
locked out of my system you know if

00:03:41,090 --> 00:03:44,300
we're talking about like said the

00:03:42,800 --> 00:03:47,630
strongman example of a storage

00:03:44,300 --> 00:03:50,780
encryption key in there if I screw this

00:03:47,630 --> 00:03:51,430
up that means I can't boot right I'm so

00:03:50,780 --> 00:03:55,400
that's bad news

00:03:51,430 --> 00:03:58,760
we also stretch goals of you know world

00:03:55,400 --> 00:04:03,590
peace curing common cold but that's left

00:03:58,760 --> 00:04:06,380
for future following work so this is

00:04:03,590 --> 00:04:08,360
probably not new to most people in the

00:04:06,380 --> 00:04:11,030
room but I just wanted to have a slide

00:04:08,360 --> 00:04:13,459
to talk about protecting TPM secrets how

00:04:11,030 --> 00:04:14,870
do you go about doing that well usually

00:04:13,459 --> 00:04:17,299
go about doing this through something

00:04:14,870 --> 00:04:20,120
called sealing which is where you have

00:04:17,299 --> 00:04:23,150
your little chunk of nvram and you

00:04:20,120 --> 00:04:24,669
protect access to that by sealing it to

00:04:23,150 --> 00:04:27,490
a set of pcr values

00:04:24,669 --> 00:04:29,080
PCRs those registers inside the TPM we

00:04:27,490 --> 00:04:30,639
we heard those mentioned earlier today

00:04:29,080 --> 00:04:32,080
so I don't feel like I need to go over

00:04:30,639 --> 00:04:33,759
it anymore

00:04:32,080 --> 00:04:37,419
but basically sealing it allows you to

00:04:33,759 --> 00:04:39,219
basically take a subset of those PCRs

00:04:37,419 --> 00:04:43,020
and use that effectively as a key to

00:04:39,219 --> 00:04:45,430
lock or unlock those NVRAM sections and

00:04:43,020 --> 00:04:47,680
this works well I mean this isn't

00:04:45,430 --> 00:04:50,620
something new this is you know part of

00:04:47,680 --> 00:04:52,599
the way the TPM works and as a result of

00:04:50,620 --> 00:04:54,580
that TPM has a lot of provisions in

00:04:52,599 --> 00:04:57,129
there for protecting these pcr values

00:04:54,580 --> 00:04:58,479
from being tampered with so we want to

00:04:57,129 --> 00:04:59,830
try and leverage this as much as

00:04:58,479 --> 00:05:04,210
possible we don't want to come up with a

00:04:59,830 --> 00:05:05,860
new mechanism if we don't have to and so

00:05:04,210 --> 00:05:07,629
how do we go about actually you know

00:05:05,860 --> 00:05:09,639
getting the right values into these PC

00:05:07,629 --> 00:05:11,439
ours well this is where I start talking

00:05:09,639 --> 00:05:13,509
about secure boot and once again

00:05:11,439 --> 00:05:15,879
remember this isn't a secure boot talk

00:05:13,509 --> 00:05:18,189
but we do have talked about this because

00:05:15,879 --> 00:05:20,860
secure boot mechanisms are usually the

00:05:18,189 --> 00:05:22,930
way that you get values into these PCRs

00:05:20,860 --> 00:05:25,960
in the early boot stage before you got

00:05:22,930 --> 00:05:27,370
the kernel up and running and as this

00:05:25,960 --> 00:05:28,750
was Gregg's we had talks about this

00:05:27,370 --> 00:05:30,909
earlier in the day so I don't have to go

00:05:28,750 --> 00:05:33,129
into too much detail but you saw before

00:05:30,909 --> 00:05:34,659
that you know the various secure boot

00:05:33,129 --> 00:05:37,810
mechanisms go ahead and you know

00:05:34,659 --> 00:05:40,360
populate or extend these PCR values with

00:05:37,810 --> 00:05:42,639
various parts of the system state you

00:05:40,360 --> 00:05:45,909
know and this is the firmware firmware

00:05:42,639 --> 00:05:47,169
configuration bootloader kernel there's

00:05:45,909 --> 00:05:49,629
actually quite a few different things

00:05:47,169 --> 00:05:52,360
that get stored in these PCRs extend it

00:05:49,629 --> 00:05:55,300
and the nice part about this is if any

00:05:52,360 --> 00:05:56,770
one of those components changes for

00:05:55,300 --> 00:05:58,180
example you know you put a new

00:05:56,770 --> 00:06:00,339
bootloader in or you're loading a

00:05:58,180 --> 00:06:03,610
different kernel these PC are values

00:06:00,339 --> 00:06:06,310
will change okay and so we can use these

00:06:03,610 --> 00:06:07,750
as a way of saying you know in that

00:06:06,310 --> 00:06:10,449
sealing process I talked about

00:06:07,750 --> 00:06:11,770
previously we can use this as you know a

00:06:10,449 --> 00:06:13,539
good way to come up with the key and

00:06:11,770 --> 00:06:18,699
we're saying like okay the system state

00:06:13,539 --> 00:06:20,680
is what we expect of it so now I'm going

00:06:18,699 --> 00:06:22,509
to take a quick little detour once again

00:06:20,680 --> 00:06:23,949
this isn't a secure boot talk but we

00:06:22,509 --> 00:06:26,650
have to talk a little bit give you a

00:06:23,949 --> 00:06:28,629
little background there's two main

00:06:26,650 --> 00:06:30,520
approaches to secure boot we're going to

00:06:28,629 --> 00:06:32,110
talk about probably the big one the one

00:06:30,520 --> 00:06:34,959
that you hear a lot about from past

00:06:32,110 --> 00:06:37,960
several years is UEFI secure boot and

00:06:34,959 --> 00:06:39,940
once again probably not new Tenny

00:06:37,960 --> 00:06:43,840
this room I'm guessing but quick

00:06:39,940 --> 00:06:46,660
overview UEFI secure boot it's a static

00:06:43,840 --> 00:06:48,759
route of trust mechanism it works by

00:06:46,660 --> 00:06:51,039
verifying the signature of everything

00:06:48,759 --> 00:06:52,930
that it executes s-- and this isn't just

00:06:51,039 --> 00:06:55,060
you know the bootloader that your

00:06:52,930 --> 00:06:59,169
firmware starts up this is the firmware

00:06:55,060 --> 00:07:00,310
itself if you have any PCI add-on cards

00:06:59,169 --> 00:07:03,220
in their list let's say you've got a

00:07:00,310 --> 00:07:05,919
RAID controller a network card that you

00:07:03,220 --> 00:07:08,259
might pick see boot it measures all of

00:07:05,919 --> 00:07:09,729
those option roms which is nice because

00:07:08,259 --> 00:07:10,930
you know that will anything that's in

00:07:09,729 --> 00:07:12,699
the system that's going to affect your

00:07:10,930 --> 00:07:15,789
boot it's measured and given the thumbs

00:07:12,699 --> 00:07:17,590
up to and it does this the public keys

00:07:15,789 --> 00:07:21,639
are actually embedded in the firmware by

00:07:17,590 --> 00:07:24,180
your device manufacturer and in general

00:07:21,639 --> 00:07:29,919
Microsoft controls these master keys

00:07:24,180 --> 00:07:33,220
there are mechanisms if you want to put

00:07:29,919 --> 00:07:35,199
your own keys in you can do that however

00:07:33,220 --> 00:07:38,289
you have to be careful sometimes so what

00:07:35,199 --> 00:07:39,639
I talked about the PCI add-on cards you

00:07:38,289 --> 00:07:42,190
know if you want to go ahead and rip out

00:07:39,639 --> 00:07:44,650
the Microsoft key or revoke that yeah

00:07:42,190 --> 00:07:47,020
you might not have access to your PCI

00:07:44,650 --> 00:07:49,090
RAID controller which if that's got your

00:07:47,020 --> 00:07:51,099
boot disc on there that's going to be a

00:07:49,090 --> 00:07:54,490
problem so just something to keep in

00:07:51,099 --> 00:07:55,750
mind one thing that is nice about UEFI

00:07:54,490 --> 00:07:58,990
secure boot which we're going to get

00:07:55,750 --> 00:08:02,229
into a little bit more but get your mind

00:07:58,990 --> 00:08:05,440
going a little bit PCR seven measures

00:08:02,229 --> 00:08:07,120
the Colonel's signing authority and this

00:08:05,440 --> 00:08:09,659
is really great because it's not

00:08:07,120 --> 00:08:12,729
actually measuring the colonel itself

00:08:09,659 --> 00:08:15,130
it's measuring the CA which is used to

00:08:12,729 --> 00:08:17,530
sign the colonel and that's nice because

00:08:15,130 --> 00:08:19,900
that means you can put on a different

00:08:17,530 --> 00:08:21,639
colonel and as long as it's signed by

00:08:19,900 --> 00:08:24,520
the same CA as long as it's signed by

00:08:21,639 --> 00:08:28,360
that same key P cr7 is going to have the

00:08:24,520 --> 00:08:30,070
same value so if you're running a fedora

00:08:28,360 --> 00:08:31,539
colonel or if you're running in a bunch

00:08:30,070 --> 00:08:34,510
of colonel or whatnot as long as you

00:08:31,539 --> 00:08:36,039
stick with that same signer so as you

00:08:34,510 --> 00:08:38,050
keep running fedora Colonels or keep

00:08:36,039 --> 00:08:39,640
running a buncha Colonels PC R seven is

00:08:38,050 --> 00:08:41,860
always going to be the same you can load

00:08:39,640 --> 00:08:43,870
a new patch colonel PC R seven won't

00:08:41,860 --> 00:08:46,300
change which if you remember about the

00:08:43,870 --> 00:08:48,889
sealing talked earlier that's good we're

00:08:46,300 --> 00:08:53,319
looking for stable PC R values

00:08:48,889 --> 00:08:57,319
and UEFI secure boot has that in PC R 7

00:08:53,319 --> 00:09:00,829
and so now intell's txt trusted

00:08:57,319 --> 00:09:02,509
execution technology so this is identity

00:09:00,829 --> 00:09:05,899
met krutov trois we already heard the

00:09:02,509 --> 00:09:09,919
presentation earlier today it's based on

00:09:05,899 --> 00:09:11,359
this s in it ACM which I was going to

00:09:09,919 --> 00:09:15,049
tell you what that stood for but I can't

00:09:11,359 --> 00:09:19,009
right now and basically as we learned

00:09:15,049 --> 00:09:20,389
you know this is a special special part

00:09:19,009 --> 00:09:22,910
of the hardware it's built into the

00:09:20,389 --> 00:09:24,410
chipset it's built into the CPU and it's

00:09:22,910 --> 00:09:27,739
a little bit of firmware blob that gets

00:09:24,410 --> 00:09:30,109
executed and does a bunch of things as

00:09:27,739 --> 00:09:31,699
we saw earlier but one of the big things

00:09:30,109 --> 00:09:34,369
is it's got this measured launch

00:09:31,699 --> 00:09:36,139
environment which actually does the next

00:09:34,369 --> 00:09:37,999
step of verification that's what goes

00:09:36,139 --> 00:09:41,869
out and verifies and bootstraps the

00:09:37,999 --> 00:09:45,859
kernel unit Ram NIT Ram FS the kernel

00:09:41,869 --> 00:09:47,449
command line and in txt that's T boot ok

00:09:45,859 --> 00:09:49,009
probably all heard of that probably

00:09:47,449 --> 00:09:51,619
haven't used it but you at least know

00:09:49,009 --> 00:09:56,779
that it exists and we heard about that

00:09:51,619 --> 00:10:00,470
earlier today as well and for these not

00:09:56,779 --> 00:10:02,029
quite as nice as UEFI secure boot T boot

00:10:00,470 --> 00:10:04,369
once again makes all the measurements

00:10:02,029 --> 00:10:08,059
stores them in the PC arse but in the

00:10:04,369 --> 00:10:11,239
case of T boot those PCRs are based on

00:10:08,059 --> 00:10:13,519
the hash of the annette Rd the kernel

00:10:11,239 --> 00:10:15,949
and the kernel command line so whenever

00:10:13,519 --> 00:10:17,419
you throw in a new kernel whatever you

00:10:15,949 --> 00:10:19,549
just change the command line arguments

00:10:17,419 --> 00:10:23,899
you're gonna get a different value in

00:10:19,549 --> 00:10:25,220
these PCRs so it's great in the sense

00:10:23,899 --> 00:10:27,679
that you can detect when the kernels

00:10:25,220 --> 00:10:29,839
changes but for our purposes of having

00:10:27,679 --> 00:10:32,449
something that's stable and easy to

00:10:29,839 --> 00:10:36,799
manage across kernel upgrades it's not

00:10:32,449 --> 00:10:40,429
quite ideal so how do we go about

00:10:36,799 --> 00:10:42,139
solving our problem well first we want

00:10:40,429 --> 00:10:44,089
to look at okay kind of you know what

00:10:42,139 --> 00:10:46,100
what we have for secure boot how can we

00:10:44,089 --> 00:10:48,259
apply this to our problem UEFI secure

00:10:46,100 --> 00:10:50,989
boot it gives us the stable PC are we

00:10:48,259 --> 00:10:54,529
want downside is it only works on modern

00:10:50,989 --> 00:10:57,049
UEFI systems now that's still a lot of

00:10:54,529 --> 00:11:00,410
systems right and so for most people

00:10:57,049 --> 00:11:01,970
that's probably sufficient but in my

00:11:00,410 --> 00:11:03,860
particular case

00:11:01,970 --> 00:11:05,840
I need to support older systems as well

00:11:03,860 --> 00:11:08,450
so this is kind of I hate to say it's a

00:11:05,840 --> 00:11:11,030
non-starter right out of the gate for me

00:11:08,450 --> 00:11:12,980
the next thing Syntel txt this works on

00:11:11,030 --> 00:11:18,110
older legacy bio systems

00:11:12,980 --> 00:11:20,660
it works on UEFI systems old and new the

00:11:18,110 --> 00:11:23,900
one little asterisks I'm going to put on

00:11:20,660 --> 00:11:25,790
here for anybody who hears this talk was

00:11:23,900 --> 00:11:28,490
like I want to play with T boot now if

00:11:25,790 --> 00:11:31,160
you've got a UEFI system some

00:11:28,490 --> 00:11:34,370
distributions don't build the multi boot

00:11:31,160 --> 00:11:38,540
capability into grub for reasons which

00:11:34,370 --> 00:11:40,970
are long and involved mainly relating to

00:11:38,540 --> 00:11:42,290
UEFI secure boot so if you want to play

00:11:40,970 --> 00:11:45,590
with this you might have to go out and

00:11:42,290 --> 00:11:47,780
build your own grub to enable multi boot

00:11:45,590 --> 00:11:49,990
to support its own little thing I'll

00:11:47,780 --> 00:11:51,980
mention if you actually want to do that

00:11:49,990 --> 00:11:54,740
let me know come and talk to me i can

00:11:51,980 --> 00:11:57,470
give you some other tips too but anyway

00:11:54,740 --> 00:11:59,330
so until txt works everywhere this is

00:11:57,470 --> 00:12:03,320
great the only problem is we have the

00:11:59,330 --> 00:12:06,080
unstable pcr problem which is also a bit

00:12:03,320 --> 00:12:07,640
of a non-starter for us so these are the

00:12:06,080 --> 00:12:09,890
two means without getting into some

00:12:07,640 --> 00:12:11,390
weird esoteric stuff these are two main

00:12:09,890 --> 00:12:14,660
secure boot options and neither one

00:12:11,390 --> 00:12:16,970
works so what can we do to actually you

00:12:14,660 --> 00:12:18,200
know what can we do to fix that where

00:12:16,970 --> 00:12:20,660
are some of lessons that we can take

00:12:18,200 --> 00:12:22,940
from this the first one is that

00:12:20,660 --> 00:12:27,350
signature-based pcr measurements are the

00:12:22,940 --> 00:12:28,550
way to go right you based on hashes it's

00:12:27,350 --> 00:12:30,890
great it tells you in every little

00:12:28,550 --> 00:12:32,840
particular kernel or you know and it Rd

00:12:30,890 --> 00:12:35,990
changes but that's not what we're going

00:12:32,840 --> 00:12:38,450
after this isn't you know one particular

00:12:35,990 --> 00:12:40,010
laptop where when we make a change to

00:12:38,450 --> 00:12:41,120
the kernel it's easy enough to update

00:12:40,010 --> 00:12:43,340
you know this is something we're

00:12:41,120 --> 00:12:45,470
deploying a data center or in a locked

00:12:43,340 --> 00:12:48,860
closet somewhere and just never have to

00:12:45,470 --> 00:12:50,270
you know touch the system so we want to

00:12:48,860 --> 00:12:53,780
make sure our PC our measurements are

00:12:50,270 --> 00:12:55,880
based on signatures as opposed to ashes

00:12:53,780 --> 00:12:56,900
we also we've talked about this we need

00:12:55,880 --> 00:13:00,380
something that works on all the

00:12:56,900 --> 00:13:01,850
different firmwares that's txt and the

00:13:00,380 --> 00:13:05,210
other important part about this this

00:13:01,850 --> 00:13:06,380
last part it's a little difficult when

00:13:05,210 --> 00:13:12,620
you want to start playing around with

00:13:06,380 --> 00:13:14,780
UEFI secure boot because the magic and

00:13:12,620 --> 00:13:15,410
UEFI secure boot that allows the Linux

00:13:14,780 --> 00:13:17,930
kernels

00:13:15,410 --> 00:13:19,790
to work with the Microsoft sign firmware

00:13:17,930 --> 00:13:22,639
something called the Shem which some of

00:13:19,790 --> 00:13:24,980
you may or may not be familiar with and

00:13:22,639 --> 00:13:28,850
that needs to be signed just like every

00:13:24,980 --> 00:13:31,089
other part of the system and getting a

00:13:28,850 --> 00:13:33,949
Shem signed by Microsoft is not

00:13:31,089 --> 00:13:36,860
necessarily a trivial task this is where

00:13:33,949 --> 00:13:38,389
your favorite Linux distribution if you

00:13:36,860 --> 00:13:40,550
ever run across the person that's in

00:13:38,389 --> 00:13:42,410
charge of their secure boot approach buy

00:13:40,550 --> 00:13:43,819
them a drink the next time because they

00:13:42,410 --> 00:13:47,329
have to go through a lot of stuff to

00:13:43,819 --> 00:13:49,579
make that work for you and once again

00:13:47,329 --> 00:13:52,699
you can put your own keys in there so

00:13:49,579 --> 00:13:54,259
there are steps around this but there's

00:13:52,699 --> 00:13:58,579
some trade-offs that come with those so

00:13:54,259 --> 00:14:00,290
anyway the nice part about txt is that

00:13:58,579 --> 00:14:01,670
all the verification of the things that

00:14:00,290 --> 00:14:04,519
we care about for this particular

00:14:01,670 --> 00:14:06,920
problem the kernel the anit Rd the

00:14:04,519 --> 00:14:09,860
command line that all happens in T boot

00:14:06,920 --> 00:14:12,620
T boot is just a piece of software it's

00:14:09,860 --> 00:14:14,660
not that estimate a cm blob that lives

00:14:12,620 --> 00:14:17,149
off in the firmware and asks you do

00:14:14,660 --> 00:14:19,730
magic with the chipset in the processor

00:14:17,149 --> 00:14:23,089
this is just a bootloader that you and I

00:14:19,730 --> 00:14:26,750
can update and do what we want to so

00:14:23,089 --> 00:14:31,189
that makes this problem now something

00:14:26,750 --> 00:14:36,040
possible and so that leads me into the e

00:14:31,189 --> 00:14:37,639
proposed solution it's pretty simple

00:14:36,040 --> 00:14:41,600
basically what we're going to do is

00:14:37,639 --> 00:14:44,180
we're going to extend T boot support to

00:14:41,600 --> 00:14:47,509
enable signature verification using the

00:14:44,180 --> 00:14:51,829
peak off format first of all that you

00:14:47,509 --> 00:14:54,730
can laugh that is a TPM joke extend yeah

00:14:51,829 --> 00:14:56,930
okay thank you somebody had to laugh

00:14:54,730 --> 00:15:00,470
it's also why you don't do slides late

00:14:56,930 --> 00:15:02,300
at night but anyway so the PDF format

00:15:00,470 --> 00:15:05,120
for those of you that don't know that's

00:15:02,300 --> 00:15:07,850
the signed kernel format that gets used

00:15:05,120 --> 00:15:10,939
for UEFI secure boot so the nice part

00:15:07,850 --> 00:15:13,250
about this is you can take all of the

00:15:10,939 --> 00:15:15,829
same build infrastructure you might have

00:15:13,250 --> 00:15:17,089
all the same kernels you could take your

00:15:15,829 --> 00:15:19,279
Fedora kernel you could take your a

00:15:17,089 --> 00:15:20,509
bunch of kernel and use it with this

00:15:19,279 --> 00:15:22,519
approach you wouldn't have to change

00:15:20,509 --> 00:15:24,620
anything of course you just need to get

00:15:22,519 --> 00:15:26,269
a hold of that certificate at the public

00:15:24,620 --> 00:15:28,040
key that they used to sign it and put it

00:15:26,269 --> 00:15:29,649
as part of the policy but you can do it

00:15:28,040 --> 00:15:32,379
so you don't have to come up with

00:15:29,649 --> 00:15:34,660
anything new in that regard so basically

00:15:32,379 --> 00:15:36,670
we extend t boot and then to do the

00:15:34,660 --> 00:15:38,920
actual verification of the Peikoff

00:15:36,670 --> 00:15:41,470
format which is kind of ugly I'll be

00:15:38,920 --> 00:15:43,059
honest with you and then the other thing

00:15:41,470 --> 00:15:45,430
we have to do is we have to extend the t

00:15:43,059 --> 00:15:48,490
boot policy format because t boot is

00:15:45,430 --> 00:15:50,980
actually somewhat flexible and how you

00:15:48,490 --> 00:15:53,679
define the measurement policies and the

00:15:50,980 --> 00:15:56,079
enforcement so we need to extend that to

00:15:53,679 --> 00:15:57,639
contain not just the hashes that you

00:15:56,079 --> 00:16:00,429
want to allow but we need to extend that

00:15:57,639 --> 00:16:01,619
so that as support for the signing

00:16:00,429 --> 00:16:05,410
Authority CA

00:16:01,619 --> 00:16:07,839
like I said before no changes to the SNA

00:16:05,410 --> 00:16:09,970
cm are required so this is something

00:16:07,839 --> 00:16:12,579
that you can do without having get in

00:16:09,970 --> 00:16:17,589
and get some sort of NDA from Intel or

00:16:12,579 --> 00:16:21,730
AMD and and do all that stuff so open

00:16:17,589 --> 00:16:23,439
issues so the big thing is that as it

00:16:21,730 --> 00:16:25,990
stands right now there's no signature

00:16:23,439 --> 00:16:28,029
verification of the anit Rd or the

00:16:25,990 --> 00:16:29,829
kernel command line and this is a

00:16:28,029 --> 00:16:35,019
problem that's shared with UEFI secure

00:16:29,829 --> 00:16:37,149
boot as well at least with T boot you

00:16:35,019 --> 00:16:40,480
can measure those things but it's just a

00:16:37,149 --> 00:16:42,699
hash measurement so there are existing

00:16:40,480 --> 00:16:44,230
digest verification mechanisms for the

00:16:42,699 --> 00:16:47,230
command line and the net argy that would

00:16:44,230 --> 00:16:48,819
work it's also possible that we could

00:16:47,230 --> 00:16:51,089
reuse some of the workarounds that the

00:16:48,819 --> 00:16:53,199
UEFI secure boot people have been doing

00:16:51,089 --> 00:16:55,209
I'm not sure if you're aware of this but

00:16:53,199 --> 00:16:57,370
you can actually take your kernel your

00:16:55,209 --> 00:17:00,910
NIT Rd and your command line and smoosh

00:16:57,370 --> 00:17:04,299
it all into one blob that's bootable and

00:17:00,910 --> 00:17:06,610
execute it there and that's what the

00:17:04,299 --> 00:17:08,649
UEFI secure boot people do from what I

00:17:06,610 --> 00:17:10,659
understand if you want to protect

00:17:08,649 --> 00:17:13,449
everything and in theory that should

00:17:10,659 --> 00:17:14,949
also work with this txt solution because

00:17:13,449 --> 00:17:17,230
once again we're sticking with the same

00:17:14,949 --> 00:17:19,029
format the kernel already knows how to

00:17:17,230 --> 00:17:20,260
unpack that to get the indebt rd in the

00:17:19,029 --> 00:17:23,319
chrome command line so that should work

00:17:20,260 --> 00:17:26,339
I say this without having tried that yet

00:17:23,319 --> 00:17:29,020
but theoretically it should be there

00:17:26,339 --> 00:17:31,750
there's also the open issue of just I

00:17:29,020 --> 00:17:33,850
don't know how receptive the T boot

00:17:31,750 --> 00:17:35,649
upstream is going to be on this the

00:17:33,850 --> 00:17:39,580
prototype is still a work in progress

00:17:35,649 --> 00:17:40,779
my goal is then once I have something

00:17:39,580 --> 00:17:41,340
that at least works and it's

00:17:40,779 --> 00:17:44,250
demonstrated

00:17:41,340 --> 00:17:46,080
that people can play with to post this

00:17:44,250 --> 00:17:48,420
to the tea boot mailing list and get

00:17:46,080 --> 00:17:50,160
their get their feedback on this but

00:17:48,420 --> 00:17:54,690
like I said I want to have something

00:17:50,160 --> 00:17:56,850
that's working first if Intel and the

00:17:54,690 --> 00:17:58,920
tea boot people aren't interested in you

00:17:56,850 --> 00:18:00,330
know taking this on I'll be honest with

00:17:58,920 --> 00:18:02,670
you it's unlikely that I will probably

00:18:00,330 --> 00:18:07,560
fork and continue this as a separate

00:18:02,670 --> 00:18:09,750
project but that's the way it is I would

00:18:07,560 --> 00:18:10,920
be if in I really was interested in

00:18:09,750 --> 00:18:15,470
doing that I'm more than happy to hand

00:18:10,920 --> 00:18:17,750
it off and so the current status

00:18:15,470 --> 00:18:20,130
modifications to tea boot are ongoing

00:18:17,750 --> 00:18:23,280
I've got it right now so that tea boot

00:18:20,130 --> 00:18:26,580
does actually manage to verify all the

00:18:23,280 --> 00:18:28,470
different Peikoff digests and if once

00:18:26,580 --> 00:18:30,000
again now know if you've ever played

00:18:28,470 --> 00:18:32,310
with Peikoff there's a few different

00:18:30,000 --> 00:18:35,130
digests to verify everything checks out

00:18:32,310 --> 00:18:37,590
ok so that means a basically tea boo can

00:18:35,130 --> 00:18:40,650
safely boot a you signed UEFI Colonel

00:18:37,590 --> 00:18:42,660
that's not a problem and that tea boot

00:18:40,650 --> 00:18:44,520
also doesn't do anything bizarre with

00:18:42,660 --> 00:18:46,530
the colonel once it Kasdan memory it

00:18:44,520 --> 00:18:49,140
doesn't munch anything so at the digest

00:18:46,530 --> 00:18:50,940
no longer check out however the

00:18:49,140 --> 00:18:52,110
signature verification part the the

00:18:50,940 --> 00:18:55,260
thing that you really want to work

00:18:52,110 --> 00:18:57,120
that's still failing the code that I've

00:18:55,260 --> 00:18:58,770
written which actually does that it does

00:18:57,120 --> 00:19:00,600
work in the little user space test

00:18:58,770 --> 00:19:02,310
harness I have but I just screwed

00:19:00,600 --> 00:19:05,370
something like when I pulled it in tea

00:19:02,310 --> 00:19:08,510
food it's entirely likely because I

00:19:05,370 --> 00:19:11,340
write crappy code and also because the

00:19:08,510 --> 00:19:13,140
tea boot environment is very interesting

00:19:11,340 --> 00:19:15,750
it's like every other kernel or

00:19:13,140 --> 00:19:19,260
low-level environment

00:19:15,750 --> 00:19:21,090
there's no Lib C there's nothing so I

00:19:19,260 --> 00:19:24,480
had to write a bunch of basically like

00:19:21,090 --> 00:19:28,650
Lib C function replacements and there's

00:19:24,480 --> 00:19:30,570
even some heap allocation that goes on

00:19:28,650 --> 00:19:31,860
in there so that I can you know simulate

00:19:30,570 --> 00:19:34,100
a malloc for some of the crypto

00:19:31,860 --> 00:19:37,950
libraries that I pulled in and that's

00:19:34,100 --> 00:19:40,050
ugly enough that we won't talk about so

00:19:37,950 --> 00:19:42,020
anyway so it's failing but it's largely

00:19:40,050 --> 00:19:45,990
probably just due to errors on my fault

00:19:42,020 --> 00:19:47,490
or on my part rather and I basically had

00:19:45,990 --> 00:19:48,720
to stop working on that so that I could

00:19:47,490 --> 00:19:51,150
come here and put these slides together

00:19:48,720 --> 00:19:52,800
so I do expect to have this working soon

00:19:51,150 --> 00:19:54,810
I

00:19:52,800 --> 00:19:58,410
currently slated to talk about this in

00:19:54,810 --> 00:19:59,730
the link security summit in France in a

00:19:58,410 --> 00:20:01,740
few months so if you're going to be at

00:19:59,730 --> 00:20:02,790
the security summit in France hopefully

00:20:01,740 --> 00:20:04,560
I'll be able to give you a completely

00:20:02,790 --> 00:20:06,240
different story and fill in some of the

00:20:04,560 --> 00:20:09,480
blanks here but that's where we're at

00:20:06,240 --> 00:20:11,850
currently there's also some challenges

00:20:09,480 --> 00:20:14,400
around licensing tabooed is kind of the

00:20:11,850 --> 00:20:17,400
the standard bsd you know very

00:20:14,400 --> 00:20:20,460
permissive license a lot of the crypto

00:20:17,400 --> 00:20:22,860
libraries and the Peikoff libraries that

00:20:20,460 --> 00:20:25,530
i could find were not they were GPL or

00:20:22,860 --> 00:20:27,470
some other so a lot of the stuff I had

00:20:25,530 --> 00:20:30,090
to kind of write from scratch which was

00:20:27,470 --> 00:20:34,380
not ideal but sometimes you gotta do

00:20:30,090 --> 00:20:37,590
that so anyway that's where things stand

00:20:34,380 --> 00:20:39,660
currently if you have any questions I

00:20:37,590 --> 00:20:41,250
wanted to leave a bunch time and we

00:20:39,660 --> 00:20:43,830
actually do have a bunch of time here so

00:20:41,250 --> 00:20:46,350
I'm more than happy to answer any

00:20:43,830 --> 00:20:48,390
questions you have and like I said I'm

00:20:46,350 --> 00:20:50,370
here up through winds up through

00:20:48,390 --> 00:20:51,720
Wednesday that's how you can get a hold

00:20:50,370 --> 00:20:54,290
of me after the fact if you're more

00:20:51,720 --> 00:20:54,290
comfortable that way

00:21:00,490 --> 00:21:04,390
where would I be without Casey

00:21:07,480 --> 00:21:13,210
so what's your end goal with this sorry

00:21:10,600 --> 00:21:15,250
what is your end goal what is my end

00:21:13,210 --> 00:21:17,740
goal to be able to protect secrets in

00:21:15,250 --> 00:21:24,789
the TPM regardless of what the firmware

00:21:17,740 --> 00:21:27,279
is there's no follow-up to that that

00:21:24,789 --> 00:21:29,700
seems like a loaded question alright I

00:21:27,279 --> 00:21:29,700
guess not

00:21:33,899 --> 00:21:38,380
since you're only concerned with the

00:21:36,039 --> 00:21:40,720
signing authority are you doing anything

00:21:38,380 --> 00:21:43,149
to prevent kernel rollback to like an

00:21:40,720 --> 00:21:47,110
earlier less secure kernel or anything

00:21:43,149 --> 00:21:49,200
like that yeah so I think there's dinner

00:21:47,110 --> 00:21:52,960
something about revocation and all that

00:21:49,200 --> 00:21:56,250
for right now the goal is just to prove

00:21:52,960 --> 00:21:58,510
that this works and that this isn't too

00:21:56,250 --> 00:22:00,159
terrible and impossible and that this

00:21:58,510 --> 00:22:01,960
might be something that the Teague

00:22:00,159 --> 00:22:03,519
people would want to take on there

00:22:01,960 --> 00:22:06,070
hasn't been any real serious thought

00:22:03,519 --> 00:22:09,220
given to that I mean it's entirely

00:22:06,070 --> 00:22:11,500
possible if you wanted to if you're

00:22:09,220 --> 00:22:14,500
really concerned about that you know you

00:22:11,500 --> 00:22:18,760
could also look at but my goal would be

00:22:14,500 --> 00:22:20,980
to not replace the txt hash

00:22:18,760 --> 00:22:22,450
measurements so if you were concerned

00:22:20,980 --> 00:22:25,720
about that you could also do something

00:22:22,450 --> 00:22:28,659
with the hash verification the digest

00:22:25,720 --> 00:22:30,580
verification that's in TB and and

00:22:28,659 --> 00:22:33,850
probably any other number of ways to

00:22:30,580 --> 00:22:37,169
solve that but I haven't put any serious

00:22:33,850 --> 00:22:40,149
effort into a solution for that yet no

00:22:37,169 --> 00:22:41,200
all right so you kind of touched down a

00:22:40,149 --> 00:22:43,690
little bit I'm back here

00:22:41,200 --> 00:22:45,630
sorry yeah sorry thanks have you looked

00:22:43,690 --> 00:22:48,039
after the street and authorities

00:22:45,630 --> 00:22:50,380
mechanisms that's defined in the TCG on

00:22:48,039 --> 00:22:53,139
on this because that's they addressed us

00:22:50,380 --> 00:22:54,750
specifically of splitting this Saturday

00:22:53,139 --> 00:22:58,960
as the signing authorities away from the

00:22:54,750 --> 00:23:02,529
data hashing no I haven't what can you

00:22:58,960 --> 00:23:04,720
give me a one or two minute explanation

00:23:02,529 --> 00:23:06,159
so it's exactly what you're discussing

00:23:04,720 --> 00:23:07,899
right there's the discretes which is

00:23:06,159 --> 00:23:09,760
your your code blobs they get hashed

00:23:07,899 --> 00:23:13,539
into one PCR and your authorities get

00:23:09,760 --> 00:23:17,050
hashed into a second PCR txt has adopted

00:23:13,539 --> 00:23:19,720
that since the 202 moved to TPM - Oh

00:23:17,050 --> 00:23:22,000
and tea boot doesn't do it today like

00:23:19,720 --> 00:23:24,100
you said it just hashes everything but

00:23:22,000 --> 00:23:27,940
you could in theory make it follow that

00:23:24,100 --> 00:23:30,220
pattern now is this so there's the and

00:23:27,940 --> 00:23:32,910
you'll have to forgive me I'm notorious

00:23:30,220 --> 00:23:35,530
for swapping these around so there's the

00:23:32,910 --> 00:23:38,350
launch control policy which is actually

00:23:35,530 --> 00:23:39,820
used to measure T boot for example the

00:23:38,350 --> 00:23:41,890
measured launch environment and then

00:23:39,820 --> 00:23:43,870
there's the verified launch policy which

00:23:41,890 --> 00:23:45,730
is actually part of T boot and my

00:23:43,870 --> 00:23:48,160
understanding is that the launch control

00:23:45,730 --> 00:23:52,330
policy can be signed and I believe that

00:23:48,160 --> 00:23:55,150
that's supported but that the verified

00:23:52,330 --> 00:23:57,280
launch policy which is implemented by T

00:23:55,150 --> 00:23:59,620
boot does not support that so that first

00:23:57,280 --> 00:24:01,630
part they do support signatures so that

00:23:59,620 --> 00:24:03,880
you can change your BIOS for example and

00:24:01,630 --> 00:24:06,370
you'd still be ok so this isn't the LCP

00:24:03,880 --> 00:24:09,640
this is ok what the ACM does when it

00:24:06,370 --> 00:24:11,290
does its measurements or it actually

00:24:09,640 --> 00:24:14,550
does the authority measurements at hat

00:24:11,290 --> 00:24:19,420
it measures its ACM key and to the

00:24:14,550 --> 00:24:21,910
authorities PCR but that doesn't help us

00:24:19,420 --> 00:24:22,210
with the kernel though no and that's my

00:24:21,910 --> 00:24:23,770
point

00:24:22,210 --> 00:24:25,480
like if you take that further and

00:24:23,770 --> 00:24:27,280
continue the discretes and the

00:24:25,480 --> 00:24:30,610
authorities for the kernel stuff inside

00:24:27,280 --> 00:24:32,080
of TB then you would get back to the

00:24:30,610 --> 00:24:34,630
rollback question like you could have

00:24:32,080 --> 00:24:38,350
the signature the hash of the data and

00:24:34,630 --> 00:24:39,490
one PCR so if you want to check that and

00:24:38,350 --> 00:24:41,140
then you have your authorities in a

00:24:39,490 --> 00:24:44,230
separate PCR they can know if your

00:24:41,140 --> 00:24:46,780
oneness and yeah force that yeah yeah

00:24:44,230 --> 00:24:49,630
and I think I mean what you get right

00:24:46,780 --> 00:24:51,310
now to boot I think uses 19 and 20

00:24:49,630 --> 00:24:52,840
correct so yeah so I mean there's

00:24:51,310 --> 00:24:56,200
there's provisions for where you could

00:24:52,840 --> 00:25:00,190
do something assuming that you're okay

00:24:56,200 --> 00:25:05,320
changing how 19 20 are behave so 17 17s

00:25:00,190 --> 00:25:07,720
used by the ACM and txt and then 18 is

00:25:05,320 --> 00:25:11,830
used by both of them for the authorities

00:25:07,720 --> 00:25:13,480
yeah and then your VLP des specifies

00:25:11,830 --> 00:25:16,150
whether you want to do them 19 or higher

00:25:13,480 --> 00:25:17,560
sure yeah yeah yeah I mean that's a

00:25:16,150 --> 00:25:21,510
possibility I mean definitely want to

00:25:17,560 --> 00:25:24,580
look at using a signed approach for the

00:25:21,510 --> 00:25:25,780
the launch control policy for similar

00:25:24,580 --> 00:25:27,820
reasons why we want you seeing the

00:25:25,780 --> 00:25:28,810
truths for here so yeah you know

00:25:27,820 --> 00:25:30,360
extending

00:25:28,810 --> 00:25:32,470
[Music]

00:25:30,360 --> 00:25:34,630
extending both of signing authorities

00:25:32,470 --> 00:25:37,120
into the same PCR would be very

00:25:34,630 --> 00:25:43,000
reasonable but I still gotta get the

00:25:37,120 --> 00:25:47,580
code working first thank you one note we

00:25:43,000 --> 00:25:50,289
forgot to grab sorry it's all that

00:25:47,580 --> 00:25:53,049
currently as I remember at heart and

00:25:50,289 --> 00:25:56,799
fidelity I post multi boot - sorry multi

00:25:53,049 --> 00:25:59,799
boot protocols due to some security

00:25:56,799 --> 00:26:02,500
concerns currently this issue is removed

00:25:59,799 --> 00:26:07,059
in upstream grab and if you wish we can

00:26:02,500 --> 00:26:10,059
discuss a bit longer after after the

00:26:07,059 --> 00:26:14,789
presentation dot and one suggestion we

00:26:10,059 --> 00:26:18,370
forgot to in giardi and signing

00:26:14,789 --> 00:26:20,169
currently PE sign tool as a remember

00:26:18,370 --> 00:26:23,440
correctly provides something which is

00:26:20,169 --> 00:26:26,110
called detached signatures of course you

00:26:23,440 --> 00:26:29,169
can use this thing just for peak off

00:26:26,110 --> 00:26:32,740
files but maybe you should consider such

00:26:29,169 --> 00:26:36,639
solution for me energy also grab

00:26:32,740 --> 00:26:39,190
supports PGP that he touched signatures

00:26:36,639 --> 00:26:43,539
so maybe it is possible to do something

00:26:39,190 --> 00:26:46,360
similar which is provided by club and by

00:26:43,539 --> 00:26:49,240
PPE sign so that's it I think

00:26:46,360 --> 00:26:51,340
yeah and I mean I want to say to start

00:26:49,240 --> 00:26:53,919
off I haven't had a chance to look I saw

00:26:51,340 --> 00:26:55,419
the trench boot on the agenda and I saw

00:26:53,919 --> 00:26:57,940
the abstract I was like oh this could be

00:26:55,419 --> 00:26:59,950
actually interesting and obviously I saw

00:26:57,940 --> 00:27:01,419
your talk earlier today that the two of

00:26:59,950 --> 00:27:03,039
you gave and so it's something I

00:27:01,419 --> 00:27:05,950
definitely want to follow up on and look

00:27:03,039 --> 00:27:07,870
I mean it's LSS is a very busy time as

00:27:05,950 --> 00:27:10,059
you know so a lot of times I end up

00:27:07,870 --> 00:27:12,519
collecting bookmarks and then when I get

00:27:10,059 --> 00:27:14,769
back I kind of start digesting it so

00:27:12,519 --> 00:27:18,009
don't be too surprised if you guys you

00:27:14,769 --> 00:27:20,049
know if if this actually looks

00:27:18,009 --> 00:27:23,110
reasonable and ends up working out for

00:27:20,049 --> 00:27:25,899
for my needs you might get some email

00:27:23,110 --> 00:27:27,940
from you guys because I think we have

00:27:25,899 --> 00:27:29,549
very similar goals perhaps not the same

00:27:27,940 --> 00:27:32,049
but I think there's some overlap there

00:27:29,549 --> 00:27:34,299
and yeah as far as all the different

00:27:32,049 --> 00:27:36,429
signatures and detachment out those are

00:27:34,299 --> 00:27:40,210
all things to look at my goal right now

00:27:36,429 --> 00:27:41,140
is to get at least a prototype stood up

00:27:40,210 --> 00:27:43,240
that work

00:27:41,140 --> 00:27:44,530
and then there's all sorts of things you

00:27:43,240 --> 00:27:46,890
know like how do you how do you handle

00:27:44,530 --> 00:27:49,630
the energy how do you handle you know

00:27:46,890 --> 00:27:50,950
rolling back to previous versions all

00:27:49,630 --> 00:27:53,260
that sort of stuff but right now I just

00:27:50,950 --> 00:27:54,910
want to get something to show us an

00:27:53,260 --> 00:27:57,880
example and to see if the tegu people

00:27:54,910 --> 00:27:59,110
are even interested but even if one of

00:27:57,880 --> 00:28:00,900
the things I've taken away from tranch

00:27:59,110 --> 00:28:03,970
Buddhists even if Teague does not

00:28:00,900 --> 00:28:05,610
interested in supporting this there

00:28:03,970 --> 00:28:10,050
might be something we can do with

00:28:05,610 --> 00:28:12,190
upstream Grubbs since you're basically

00:28:10,050 --> 00:28:14,650
replacing tea boot in a lot of the ways

00:28:12,190 --> 00:28:19,690
that was one of the takeaways I had from

00:28:14,650 --> 00:28:21,430
your presentation so yeah so anyway I'm

00:28:19,690 --> 00:28:23,200
sure we'll be talking in the future so

00:28:21,430 --> 00:28:25,780
even if I don't get a chance to sit down

00:28:23,200 --> 00:28:27,130
with you during LSS I'm sure we'll be

00:28:25,780 --> 00:28:32,680
exchanging some email at some point

00:28:27,130 --> 00:28:35,140
thank you my question sorry thank you my

00:28:32,680 --> 00:28:37,510
question here is you're sealing some

00:28:35,140 --> 00:28:39,940
some data based on the PCR value that

00:28:37,510 --> 00:28:43,450
you expect the teapot right right so

00:28:39,940 --> 00:28:46,180
what prevents some unauthorized kernel

00:28:43,450 --> 00:28:49,780
to put that similar value in the PCR and

00:28:46,180 --> 00:28:52,090
get access to the data and the DPM so

00:28:49,780 --> 00:28:55,480
what would prevent someone from going on

00:28:52,090 --> 00:28:59,620
and are you talking about say like there

00:28:55,480 --> 00:29:01,450
was a presentation a long time ago now

00:28:59,620 --> 00:29:05,080
where somebody actually loaded a

00:29:01,450 --> 00:29:08,290
hypervisor in before the executed T vote

00:29:05,080 --> 00:29:10,810
and then something like that this the

00:29:08,290 --> 00:29:14,410
generally accepted solution for that was

00:29:10,810 --> 00:29:16,720
basically that th T and T boot wasn't

00:29:14,410 --> 00:29:19,180
fully leveraging the TPM like there was

00:29:16,720 --> 00:29:22,630
nothing stored in the TPM because you

00:29:19,180 --> 00:29:24,850
can emulate a TPM but unless you happen

00:29:22,630 --> 00:29:27,820
to know beforehand what that secret is

00:29:24,850 --> 00:29:32,020
inside the TPM you can't really

00:29:27,820 --> 00:29:34,650
successfully fool whatever is lying on

00:29:32,020 --> 00:29:37,570
top whatever's you know using T boot for

00:29:34,650 --> 00:29:39,520
verification and in the particular case

00:29:37,570 --> 00:29:42,760
that I'm looking at since I do have

00:29:39,520 --> 00:29:44,380
secrets stored in the TPM that shouldn't

00:29:42,760 --> 00:29:47,140
be an attack vector I have to worry

00:29:44,380 --> 00:29:49,530
about however if there is a if I'm

00:29:47,140 --> 00:29:54,360
missing something please let me know

00:29:49,530 --> 00:29:54,360
like you install a kernel right

00:29:54,420 --> 00:30:00,750
okey so you seal the data based on that

00:29:57,680 --> 00:30:03,630
certificate authority I can go and

00:30:00,750 --> 00:30:06,780
install a kernel a totally different

00:30:03,630 --> 00:30:09,360
kernel right I may not even use D but I

00:30:06,780 --> 00:30:12,270
might use grub or something and then I

00:30:09,360 --> 00:30:16,580
can still get access in restore so

00:30:12,270 --> 00:30:19,710
you're not targeting that kind of attack

00:30:16,580 --> 00:30:22,350
so we're basically a malicious kernel

00:30:19,710 --> 00:30:23,880
would go in and impersonate well this

00:30:22,350 --> 00:30:26,310
kind of gets to that whole point of

00:30:23,880 --> 00:30:29,070
these are kernels that I've authorized

00:30:26,310 --> 00:30:31,650
I've signed this kernel and so I think

00:30:29,070 --> 00:30:35,940
implicit in that signing of the kernel

00:30:31,650 --> 00:30:37,800
is I'm not just physically signing it

00:30:35,940 --> 00:30:40,260
with my digital signature I'm also

00:30:37,800 --> 00:30:43,200
signing off from a perspective of like I

00:30:40,260 --> 00:30:45,780
verify that this kernel is not malicious

00:30:43,200 --> 00:30:47,790
you know this kind of goes to the point

00:30:45,780 --> 00:30:48,690
of like don't take don't run random

00:30:47,790 --> 00:30:51,630
things off the internet

00:30:48,690 --> 00:30:53,280
don't take a random kernel that you know

00:30:51,630 --> 00:30:57,200
some guy off the street gave you and

00:30:53,280 --> 00:30:57,200
sign up with your key and and boot it

00:30:59,240 --> 00:31:05,100
but it's okay to use curl to get

00:31:02,850 --> 00:31:08,460
something from a website and then pipe

00:31:05,100 --> 00:31:12,570
it into sudo that's totally fine no

00:31:08,460 --> 00:31:16,520
problem with that my question is a

00:31:12,570 --> 00:31:19,500
follow-up to her naturally so if do not

00:31:16,520 --> 00:31:22,260
assume that the system has you fiance

00:31:19,500 --> 00:31:24,750
keyboard and you do not validate to boot

00:31:22,260 --> 00:31:27,510
signature itself how do you ensure that

00:31:24,750 --> 00:31:30,660
T boot is all I never said I didn't

00:31:27,510 --> 00:31:33,810
necessarily verify the T boot signature

00:31:30,660 --> 00:31:37,500
itself I mean part of the correct me if

00:31:33,810 --> 00:31:40,710
I'm wrong guys part of the launch

00:31:37,500 --> 00:31:43,230
control policy can measure the T boot

00:31:40,710 --> 00:31:45,180
signature and I think for the same

00:31:43,230 --> 00:31:47,670
reason so is very similar question was

00:31:45,180 --> 00:31:48,900
posted earlier in the talk you know what

00:31:47,670 --> 00:31:51,570
about some of the static route of trust

00:31:48,900 --> 00:31:52,950
measurements you you definitely need to

00:31:51,570 --> 00:31:55,320
make sure that the t boot that you're

00:31:52,950 --> 00:32:01,710
executing is your t boot because

00:31:55,320 --> 00:32:04,340
otherwise i mean how do you do that so t

00:32:01,710 --> 00:32:08,330
boot now and yes NAC

00:32:04,340 --> 00:32:11,840
as part of the launch control policy the

00:32:08,330 --> 00:32:14,240
ACM code looks at a hash what measures

00:32:11,840 --> 00:32:16,280
to boot and that looks at a hash as part

00:32:14,240 --> 00:32:18,080
of the launch control policy and

00:32:16,280 --> 00:32:22,520
compares it and if there's divergence in

00:32:18,080 --> 00:32:24,470
its okay so that that provision is is in

00:32:22,520 --> 00:32:26,480
there because yeah you're right I mean

00:32:24,470 --> 00:32:28,640
definitely if somebody else has you know

00:32:26,480 --> 00:32:34,420
put in a malicious t boot then all bets

00:32:28,640 --> 00:32:37,340
are off right yeah I I think that did I

00:32:34,420 --> 00:32:39,050
he's begrudgingly nodded so I probably

00:32:37,340 --> 00:32:44,780
got about half of it wrong

00:32:39,050 --> 00:32:46,280
but all right I'm not seeing any other

00:32:44,780 --> 00:32:49,960
questions and I'm standing in the way of

00:32:46,280 --> 00:32:52,310
you having coffee break so are we good

00:32:49,960 --> 00:32:55,589
thanks bull all right thanks everybody

00:32:52,310 --> 00:32:55,589

YouTube URL: https://www.youtube.com/watch?v=Qbjz_5jUE9o


