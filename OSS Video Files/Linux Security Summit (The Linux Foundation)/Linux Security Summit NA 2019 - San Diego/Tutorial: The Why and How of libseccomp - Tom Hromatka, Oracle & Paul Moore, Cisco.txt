Title: Tutorial: The Why and How of libseccomp - Tom Hromatka, Oracle & Paul Moore, Cisco
Publication date: 2019-08-28
Playlist: Linux Security Summit NA 2019 - San Diego
Description: 
	Tutorial: The Why and How of libseccomp - Tom Hromatka, Oracle & Paul Moore, Cisco

The Linux Kernel's seccomp feature can restrict the syscalls available to agiven process, thus reducing the attack surface available to untrusted andpotentially malicious programs. It is a critical building block forcontainers and process isolation in general. However, writing a seccompfilter by hand is error prone and difficult to maintain.In this tutorial session, Paul Moore and Tom Hromatka (the libseccompmaintainers) will explain how libseccomp makes this process much easier andwill guide you through making your own seccomp filter using libseccomp.
Captions: 
	00:00:00,030 --> 00:00:06,410
okay folks so we'll start here in the in

00:00:03,149 --> 00:00:09,840
the afternoon the last afternoon session

00:00:06,410 --> 00:00:13,860
of the main conference before the Buffs

00:00:09,840 --> 00:00:17,310
we for the first time doing tutorials as

00:00:13,860 --> 00:00:18,570
part of a Linux security summit so for

00:00:17,310 --> 00:00:21,359
those who want to attend the tutorial

00:00:18,570 --> 00:00:24,060
you can stay here and there is also the

00:00:21,359 --> 00:00:27,480
unconference which is one level below

00:00:24,060 --> 00:00:28,769
outside the room there are four tables

00:00:27,480 --> 00:00:31,650
down there where people can get together

00:00:28,769 --> 00:00:35,000
and work on different problems that they

00:00:31,650 --> 00:00:39,540
may want to discuss so I'm going to

00:00:35,000 --> 00:00:44,239
welcome Paul Moore and Tom Ramat Co to

00:00:39,540 --> 00:00:44,239
give a tutorial on lib second

00:00:49,820 --> 00:00:56,180
you can't escape me so we're going to do

00:00:55,039 --> 00:00:58,489
this I'm going to start off give you a

00:00:56,180 --> 00:01:03,289
quick little introduction to lib second

00:00:58,489 --> 00:01:08,000
hey people in the hallway we're starting

00:01:03,289 --> 00:01:09,409
I just realized I don't know why I was

00:01:08,000 --> 00:01:10,850
cupping my hands that really doesn't

00:01:09,409 --> 00:01:14,570
makes sense when you've got a little

00:01:10,850 --> 00:01:19,970
Bell mic on but can somebody at least

00:01:14,570 --> 00:01:21,350
close those doors maybe alright anyway

00:01:19,970 --> 00:01:23,929
I'm gonna give you a quick little

00:01:21,350 --> 00:01:26,000
introduction to syscall filtering and

00:01:23,929 --> 00:01:28,069
lips comm and I'm gonna hand it over to

00:01:26,000 --> 00:01:31,009
Tom and he's gonna walk you through a

00:01:28,069 --> 00:01:33,649
tutorial and tom is Superman he's gonna

00:01:31,009 --> 00:01:34,700
do it on the fly so if you have any

00:01:33,649 --> 00:01:36,619
questions or whatnot

00:01:34,700 --> 00:01:39,470
feel free to think about it while I'm

00:01:36,619 --> 00:01:43,399
presenting and it'll help make it all

00:01:39,470 --> 00:01:45,500
happen also kind of a bit of a bit of

00:01:43,399 --> 00:01:47,200
applause for Tom Tom just recently

00:01:45,500 --> 00:01:50,830
agreed to step up and help me maintain

00:01:47,200 --> 00:01:53,270
lips at comp upstream which is great

00:01:50,830 --> 00:01:55,280
this is good for you for your selfish

00:01:53,270 --> 00:01:56,690
regions if I get hit by a bus there's at

00:01:55,280 --> 00:01:58,640
least somebody around that can still

00:01:56,690 --> 00:01:59,629
make releases and you know make sure the

00:01:58,640 --> 00:02:03,379
trains run that time

00:01:59,629 --> 00:02:09,739
so anyway fine if you're not gonna clap

00:02:03,379 --> 00:02:10,819
for my will okay so anyway alright so

00:02:09,739 --> 00:02:14,180
let's go ahead and get started

00:02:10,819 --> 00:02:17,000
oh guys first of all why should I use

00:02:14,180 --> 00:02:18,860
lipstick this is part I'll go over and

00:02:17,000 --> 00:02:22,370
and first off the world is a scary place

00:02:18,860 --> 00:02:27,590
right this is once again hopefully not

00:02:22,370 --> 00:02:30,920
news to you if it is I'm really sorry

00:02:27,590 --> 00:02:32,180
so bugs aren't evitable there's nothing

00:02:30,920 --> 00:02:34,849
we can do

00:02:32,180 --> 00:02:36,470
there's better languages out there that

00:02:34,849 --> 00:02:38,090
will help reduce the amount of bugs

00:02:36,470 --> 00:02:40,519
especially they're really stupid ones

00:02:38,090 --> 00:02:45,560
but there's always going to be issues

00:02:40,519 --> 00:02:47,870
with logic decisions and various poor

00:02:45,560 --> 00:02:50,629
practices there's nothing we can do

00:02:47,870 --> 00:02:53,180
about it and bugs can also be a security

00:02:50,629 --> 00:02:55,400
risk you know depending on where that

00:02:53,180 --> 00:02:57,739
bug happens to be and you know the

00:02:55,400 --> 00:02:59,719
context of execution and whatnot there's

00:02:57,739 --> 00:03:01,579
always a risk that that small little bug

00:02:59,719 --> 00:03:02,860
that you thought wasn't a big deal could

00:03:01,579 --> 00:03:05,440
all of a sudden become a very

00:03:02,860 --> 00:03:08,620
deal lead to an escalation of privileges

00:03:05,440 --> 00:03:10,930
you know break some confidentiality

00:03:08,620 --> 00:03:12,790
rules on data you know tamper with the

00:03:10,930 --> 00:03:16,270
data so you know along guy the integrity

00:03:12,790 --> 00:03:19,390
wanted all sorts of things you know

00:03:16,270 --> 00:03:20,740
malicious code execution and in the

00:03:19,390 --> 00:03:22,540
context of what we're talking about

00:03:20,740 --> 00:03:24,310
today with syscall filtering we also

00:03:22,540 --> 00:03:25,900
want to look at that boundary between

00:03:24,310 --> 00:03:27,880
the kernel and user space because that's

00:03:25,900 --> 00:03:29,470
really what we're getting at when we

00:03:27,880 --> 00:03:33,640
start talking about sis call filtering

00:03:29,470 --> 00:03:36,880
and you know sis called filtering allows

00:03:33,640 --> 00:03:39,220
us to shrink down that attack surface

00:03:36,880 --> 00:03:43,300
into the kernel and hopefully prevent

00:03:39,220 --> 00:03:44,920
some of those kernel vulnerabilities so

00:03:43,300 --> 00:03:47,500
anyway that's it I won't spend a whole

00:03:44,920 --> 00:03:49,330
lot of time in this sykes I think like I

00:03:47,500 --> 00:03:51,820
said hopefully this is not new to any of

00:03:49,330 --> 00:03:55,060
you but anyway what's this call

00:03:51,820 --> 00:03:57,220
filtering once again probably not new

00:03:55,060 --> 00:03:59,530
but just in case this is called

00:03:57,220 --> 00:04:01,870
filtering in the context of SEC comp and

00:03:59,530 --> 00:04:04,120
in the context of linux is all about

00:04:01,870 --> 00:04:07,750
allowing the kernel to interrupt the SIS

00:04:04,120 --> 00:04:09,880
calls as they're being taken and perform

00:04:07,750 --> 00:04:12,610
some sort of action you know you can

00:04:09,880 --> 00:04:16,180
call or signal the process notify a

00:04:12,610 --> 00:04:19,239
separate tracing process or simply cause

00:04:16,180 --> 00:04:22,300
this is call to abort early with a

00:04:19,239 --> 00:04:24,669
return code or an error no value and in

00:04:22,300 --> 00:04:25,330
the context of the new version of

00:04:24,669 --> 00:04:29,050
seccomp

00:04:25,330 --> 00:04:32,050
set con BPF SATCOM mode to this is

00:04:29,050 --> 00:04:34,419
configured application runtime it's

00:04:32,050 --> 00:04:37,810
inherited by the processes children so

00:04:34,419 --> 00:04:40,390
you know for example if you set a sitcom

00:04:37,810 --> 00:04:42,100
filter in an it or system D whatever you

00:04:40,390 --> 00:04:44,080
want to call it it's going to get

00:04:42,100 --> 00:04:47,680
inherited across every process on the

00:04:44,080 --> 00:04:49,510
system if you set yourself ill Terr and

00:04:47,680 --> 00:04:51,910
then you know fork and exact a bunch of

00:04:49,510 --> 00:04:55,479
worker processes it's going to get

00:04:51,910 --> 00:04:58,030
inherited and even though it's up to the

00:04:55,479 --> 00:05:00,940
individual process to define the filter

00:04:58,030 --> 00:05:02,350
and install it into the kernel unless

00:05:00,940 --> 00:05:03,820
you're using some of the user

00:05:02,350 --> 00:05:06,220
notification stuff we heard about

00:05:03,820 --> 00:05:08,080
earlier today it's still actually the

00:05:06,220 --> 00:05:10,660
decisions are going to be enforced

00:05:08,080 --> 00:05:13,479
inside the kernel based on the filter

00:05:10,660 --> 00:05:16,180
you installed and even in the case of

00:05:13,479 --> 00:05:18,190
you know where you're delegating that

00:05:16,180 --> 00:05:21,250
to another user space program in the

00:05:18,190 --> 00:05:23,260
user space notification that decision to

00:05:21,250 --> 00:05:25,390
delegate it is still done from inside

00:05:23,260 --> 00:05:30,850
the kernel so once you load this it's

00:05:25,390 --> 00:05:32,680
difficult slash impossible to bypass and

00:05:30,850 --> 00:05:35,430
a bit of a history lesson

00:05:32,680 --> 00:05:38,980
Cisco filtering is actually much older

00:05:35,430 --> 00:05:42,940
than what many of us see today with the

00:05:38,980 --> 00:05:47,170
mode to stuff sitcom mode one traces

00:05:42,940 --> 00:05:49,780
itself back to two 6:23 however very

00:05:47,170 --> 00:05:52,900
crude very minimal wasn't really all

00:05:49,780 --> 00:05:56,440
that useful outside of a very small set

00:05:52,900 --> 00:05:59,440
of you know work or computation types of

00:05:56,440 --> 00:06:01,450
tasks you basically had those four

00:05:59,440 --> 00:06:03,580
syscalls that was it so basically you

00:06:01,450 --> 00:06:06,250
can read and write a file descriptor to

00:06:03,580 --> 00:06:07,990
get the data and do some transforms on

00:06:06,250 --> 00:06:09,970
it send it back out and you could exit

00:06:07,990 --> 00:06:12,660
that that was about all you could safely

00:06:09,970 --> 00:06:15,940
do was a really a general-purpose

00:06:12,660 --> 00:06:19,000
solution you had no way of filtering on

00:06:15,940 --> 00:06:22,720
a be eyes like you do a second you know

00:06:19,000 --> 00:06:24,460
it was a fixed set of sis calls so yeah

00:06:22,720 --> 00:06:29,050
so even though it's been there for ages

00:06:24,460 --> 00:06:31,330
nobody's ever really used it what we

00:06:29,050 --> 00:06:34,060
talk about today with set comp is really

00:06:31,330 --> 00:06:37,150
what this second attempt the second mode

00:06:34,060 --> 00:06:38,950
to second BPF I've heard a lot of people

00:06:37,150 --> 00:06:40,450
even just it's just starting to call set

00:06:38,950 --> 00:06:42,370
comp now because we've pretty much

00:06:40,450 --> 00:06:45,160
ignored the other one because it really

00:06:42,370 --> 00:06:46,870
wasn't any any use this has been around

00:06:45,160 --> 00:06:49,270
since Linux three fives when it first

00:06:46,870 --> 00:06:51,900
made its introduction so it's actually

00:06:49,270 --> 00:06:56,140
pretty old itself at this point it's

00:06:51,900 --> 00:06:59,310
seen a lot of activity since then adding

00:06:56,140 --> 00:07:03,070
multiple architectures new functionality

00:06:59,310 --> 00:07:04,990
we've got pretty much not all of the

00:07:03,070 --> 00:07:07,030
architectures that Linux supports but

00:07:04,990 --> 00:07:10,960
most of them I think the one notable

00:07:07,030 --> 00:07:13,240
exception is still risk five we've been

00:07:10,960 --> 00:07:15,190
talking with them supposedly the kernel

00:07:13,240 --> 00:07:16,690
support is any day now but they've been

00:07:15,190 --> 00:07:20,020
saying that for awhile so I honestly

00:07:16,690 --> 00:07:23,680
don't know but don't worry we do support

00:07:20,020 --> 00:07:25,200
your 32-bit pa-risc machine so that one

00:07:23,680 --> 00:07:27,310
person who's watching on the video

00:07:25,200 --> 00:07:29,830
you're all set

00:07:27,310 --> 00:07:32,260
the Cisco filters are defined by the

00:07:29,830 --> 00:07:34,720
filtering language you know I think

00:07:32,260 --> 00:07:35,740
we're all aware that at this point when

00:07:34,720 --> 00:07:38,290
I first started talking about this

00:07:35,740 --> 00:07:41,110
nobody knew what BPF was now everybody

00:07:38,290 --> 00:07:43,350
seems to know what PPF was there is

00:07:41,110 --> 00:07:48,010
perhaps one important thing to mention

00:07:43,350 --> 00:07:51,820
SEC comp uses classic BPF normal BP F

00:07:48,010 --> 00:07:53,260
naught e BP F from the purposes of Lib

00:07:51,820 --> 00:07:55,000
set comp you don't really care about

00:07:53,260 --> 00:07:57,460
that but just if you are going to be

00:07:55,000 --> 00:08:01,000
writing filters on your own something to

00:07:57,460 --> 00:08:03,490
keep in mind of this also set count mode

00:08:01,000 --> 00:08:06,610
- also allows you to filter on the ABI

00:08:03,490 --> 00:08:09,190
in the architecture most people at first

00:08:06,610 --> 00:08:11,860
glance say why do I care about that but

00:08:09,190 --> 00:08:16,150
since I think most everybody's laptop in

00:08:11,860 --> 00:08:20,800
the room is Intel 64-bit chip and you're

00:08:16,150 --> 00:08:24,340
running a x86 64 OS you probably also

00:08:20,800 --> 00:08:29,050
support 32-bit x86 you might even also

00:08:24,340 --> 00:08:31,330
support 32-bit X 32 second mode - allows

00:08:29,050 --> 00:08:33,880
you to filter not only on the syscall

00:08:31,330 --> 00:08:36,430
but also on the ABI so you could for

00:08:33,880 --> 00:08:39,780
example just completely shut off X 32 or

00:08:36,430 --> 00:08:41,589
32-bit x86 which could be advantageous

00:08:39,780 --> 00:08:43,510
you know if your operating system

00:08:41,589 --> 00:08:45,460
decides it wants to keep supporting that

00:08:43,510 --> 00:08:47,440
and you said now I don't want to support

00:08:45,460 --> 00:08:50,170
all those crufty 32-bit bug-ridden

00:08:47,440 --> 00:08:53,500
applications it's easy to deal with set

00:08:50,170 --> 00:08:55,630
company and once again they kept the

00:08:53,500 --> 00:08:57,970
same provisions missing with first

00:08:55,630 --> 00:09:00,400
attempts till all the enforcement is

00:08:57,970 --> 00:09:01,960
done by the kernel even if it's being

00:09:00,400 --> 00:09:04,210
delegated off to user space - the

00:09:01,960 --> 00:09:06,880
notification mechanism that delegation

00:09:04,210 --> 00:09:09,280
decision is done inside the kernel so

00:09:06,880 --> 00:09:11,290
once again it's very hard to bypass you

00:09:09,280 --> 00:09:14,640
shouldn't be able to bypass this once

00:09:11,290 --> 00:09:16,990
you push a filter down into the kernel

00:09:14,640 --> 00:09:19,240
where I just talked about this filters

00:09:16,990 --> 00:09:21,460
are written in BP f stands for Berkley

00:09:19,240 --> 00:09:24,130
packet filter which can trace its

00:09:21,460 --> 00:09:28,930
origins back to the socket filter which

00:09:24,130 --> 00:09:30,970
is really really old but it works out

00:09:28,930 --> 00:09:32,980
really well in this particular case and

00:09:30,970 --> 00:09:35,600
as we've seen for the past few years it

00:09:32,980 --> 00:09:38,420
actually has a lot of applications way

00:09:35,600 --> 00:09:42,350
beyond this so it's a pretty nice little

00:09:38,420 --> 00:09:45,829
low-level assembly language thing

00:09:42,350 --> 00:09:49,940
there are was I think LLVM actually even

00:09:45,829 --> 00:09:51,649
has a compiler which will do BPF having

00:09:49,940 --> 00:09:53,899
said that I'm not sure if that's classic

00:09:51,649 --> 00:09:56,990
BPF it might be or it might just be BPF

00:09:53,899 --> 00:09:58,220
but either way once again you're

00:09:56,990 --> 00:09:59,720
listening because you want to use

00:09:58,220 --> 00:10:01,430
Lipsett comp and you don't want to have

00:09:59,720 --> 00:10:04,490
to write assembly language yourself and

00:10:01,430 --> 00:10:06,350
I can't blame it so anyway the other

00:10:04,490 --> 00:10:08,540
thing to note about mode 2 is that you

00:10:06,350 --> 00:10:11,509
can have multiple filters loaded on the

00:10:08,540 --> 00:10:13,519
system and these can be filters that

00:10:11,509 --> 00:10:16,759
you've inherited and you're adding onto

00:10:13,519 --> 00:10:19,459
or you could even have one process which

00:10:16,759 --> 00:10:21,079
stacks filters on itself so you could

00:10:19,459 --> 00:10:23,480
set up something so that when you first

00:10:21,079 --> 00:10:26,000
start first thing your process does is

00:10:23,480 --> 00:10:27,889
it loads a somewhat permissive filter

00:10:26,000 --> 00:10:30,860
because you still have to do say a bunch

00:10:27,889 --> 00:10:32,360
of initialization and set up you know

00:10:30,860 --> 00:10:32,990
maybe you need to read your config files

00:10:32,360 --> 00:10:34,759
or whatnot

00:10:32,990 --> 00:10:36,529
but then once you actually get to the

00:10:34,759 --> 00:10:39,589
point where you want to start accepting

00:10:36,529 --> 00:10:41,779
input or your now you're entering in one

00:10:39,589 --> 00:10:43,910
of the riskier aspects of your execution

00:10:41,779 --> 00:10:48,050
phase then you can go ahead and blow to

00:10:43,910 --> 00:10:49,670
an additional filter and it becomes you

00:10:48,050 --> 00:10:52,850
know it becomes additive and basically

00:10:49,670 --> 00:10:54,860
the most restrictive decision wins so

00:10:52,850 --> 00:10:57,350
each of these stacked filters will get

00:10:54,860 --> 00:11:01,130
executed on each syscall invocation and

00:10:57,350 --> 00:11:02,899
if say the filter a says ok I want to

00:11:01,130 --> 00:11:05,990
allow this particular syscall invocation

00:11:02,899 --> 00:11:07,639
and the second second filter said no I

00:11:05,990 --> 00:11:10,399
want to disallow it then it'll be

00:11:07,639 --> 00:11:12,139
disallowed so there it is relatively

00:11:10,399 --> 00:11:14,000
easy to go to that point of you know a

00:11:12,139 --> 00:11:16,339
permissive filter to allow for

00:11:14,000 --> 00:11:18,560
initialization and then as you move

00:11:16,339 --> 00:11:20,149
along in your stages of execution you

00:11:18,560 --> 00:11:23,870
can load more and more restrictive

00:11:20,149 --> 00:11:26,449
filters to meet your needs yeah and

00:11:23,870 --> 00:11:29,449
that's pretty much it for the second

00:11:26,449 --> 00:11:31,699
mode - however there is a lot of room

00:11:29,449 --> 00:11:35,329
for improvement and this is this is

00:11:31,699 --> 00:11:37,689
where Lib comm came about actually the

00:11:35,329 --> 00:11:40,639
idea for Lipscomb came very early when

00:11:37,689 --> 00:11:41,959
the kernel patches for set comp mode -

00:11:40,639 --> 00:11:43,399
were first going in I was kind of

00:11:41,959 --> 00:11:46,430
looking at it was like this is really

00:11:43,399 --> 00:11:48,079
cool but you know kind of looking at it

00:11:46,430 --> 00:11:49,100
from a developer's perspective there was

00:11:48,079 --> 00:11:53,150
a lot of things

00:11:49,100 --> 00:11:54,710
could be done better it makes sense the

00:11:53,150 --> 00:11:56,000
way the kernel does it from the kernels

00:11:54,710 --> 00:11:58,130
perspective but from an application

00:11:56,000 --> 00:12:00,890
developers perspective I think there was

00:11:58,130 --> 00:12:04,370
room for improvement the biggest one is

00:12:00,890 --> 00:12:06,740
that the filters are a bi dependent the

00:12:04,370 --> 00:12:08,770
most obvious thing here is that syscall

00:12:06,740 --> 00:12:12,500
numbers are not consistent across

00:12:08,770 --> 00:12:15,310
architectures you know open on one ABI

00:12:12,500 --> 00:12:17,900
might end up being I octal on another

00:12:15,310 --> 00:12:19,940
and of course the filters are ready not

00:12:17,900 --> 00:12:21,770
with Cisco name so is this called number

00:12:19,940 --> 00:12:24,650
so that's something you need to be aware

00:12:21,770 --> 00:12:27,800
of there's also things like the clone

00:12:24,650 --> 00:12:30,140
system call which who actually thinks

00:12:27,800 --> 00:12:33,610
the clone system call is the same across

00:12:30,140 --> 00:12:36,380
all being ABI is like the parameters

00:12:33,610 --> 00:12:38,180
okay you're smart people usually most

00:12:36,380 --> 00:12:40,460
people think it is but yeah there's a

00:12:38,180 --> 00:12:42,470
bunch of sis calls which actually are

00:12:40,460 --> 00:12:45,320
completely different when you go at

00:12:42,470 --> 00:12:47,270
different api's and not every ABI

00:12:45,320 --> 00:12:49,550
supports every sis call so there's a lot

00:12:47,270 --> 00:12:50,960
of ABI specifics in here that you need

00:12:49,550 --> 00:12:53,360
to be aware of if you're writing Gujrat

00:12:50,960 --> 00:12:55,610
EPF so that's something to keep in mind

00:12:53,360 --> 00:12:57,950
and one of the main reasons why Lib

00:12:55,610 --> 00:13:01,190
seccomp came around the idea being that

00:12:57,950 --> 00:13:04,220
you could abstract away all of the ABI

00:13:01,190 --> 00:13:07,190
specifics into a common API so you could

00:13:04,220 --> 00:13:08,900
write your application for Lipsett coms

00:13:07,190 --> 00:13:12,710
api's and then not have to worry about

00:13:08,900 --> 00:13:16,010
where you run the other problem is that

00:13:12,710 --> 00:13:17,450
the BPF language is 32-bit and that's

00:13:16,010 --> 00:13:20,270
fine there's nothing wrong with that i

00:13:17,450 --> 00:13:22,310
mean you know been doing 64-bit

00:13:20,270 --> 00:13:26,090
computation and 32-bit hosts forever

00:13:22,310 --> 00:13:27,410
that's not new but you have to make sure

00:13:26,090 --> 00:13:29,150
you do that when you're comparing all

00:13:27,410 --> 00:13:31,280
the syscall arguments and that adds a

00:13:29,150 --> 00:13:32,570
level of complexity to it especially

00:13:31,280 --> 00:13:34,910
when we're talking about doing this in

00:13:32,570 --> 00:13:37,280
assembly language and so you know

00:13:34,910 --> 00:13:39,650
perhaps asking you know application

00:13:37,280 --> 00:13:43,100
developers that one they need to go off

00:13:39,650 --> 00:13:46,760
and learn a new assembly level language

00:13:43,100 --> 00:13:48,770
so that they can use second and two it's

00:13:46,760 --> 00:13:51,140
going to be different depending on what

00:13:48,770 --> 00:13:52,850
platform they run on and three all you

00:13:51,140 --> 00:13:56,210
have to convert every single Cisco

00:13:52,850 --> 00:13:59,600
argument comparison you make into you

00:13:56,210 --> 00:14:02,300
know 32-bit comparisons I can let you

00:13:59,600 --> 00:14:04,710
guess how those discussions went over

00:14:02,300 --> 00:14:06,300
and there's there's other things we can

00:14:04,710 --> 00:14:09,450
get into on there's things about you

00:14:06,300 --> 00:14:11,970
know there's the jump is only I think

00:14:09,450 --> 00:14:13,680
like an 8-bit value so once you start

00:14:11,970 --> 00:14:15,240
writing long complex filters you have to

00:14:13,680 --> 00:14:16,920
be careful and start in you know putting

00:14:15,240 --> 00:14:20,610
jumps in there so you can make it and

00:14:16,920 --> 00:14:23,160
like in the assembly level language you

00:14:20,610 --> 00:14:24,720
know once it starts becoming more than

00:14:23,160 --> 00:14:26,280
you know a page or two

00:14:24,720 --> 00:14:27,810
it starts become difficult to maintain

00:14:26,280 --> 00:14:29,550
unless you're really good about

00:14:27,810 --> 00:14:32,670
commenting things and structuring it

00:14:29,550 --> 00:14:35,880
correctly so basically that was why lib

00:14:32,670 --> 00:14:37,860
seccomp was born the idea is like I said

00:14:35,880 --> 00:14:41,190
we wanted to provide a nice API for

00:14:37,860 --> 00:14:44,760
filters that was a bi independent worked

00:14:41,190 --> 00:14:47,460
regardless of 32 or 64-bit systems and

00:14:44,760 --> 00:14:50,040
we didn't want application developers to

00:14:47,460 --> 00:14:54,600
have to go out and learn BPF and how to

00:14:50,040 --> 00:14:56,280
do that we take an effort we take some

00:14:54,600 --> 00:14:59,010
pride in the fact that we we try to

00:14:56,280 --> 00:15:02,250
write decent documentation we've got 33

00:14:59,010 --> 00:15:04,650
different man pages for the api's we

00:15:02,250 --> 00:15:07,590
also have over a hundred tests and

00:15:04,650 --> 00:15:09,960
examples written in both C and Python we

00:15:07,590 --> 00:15:12,120
also have go language bindings but

00:15:09,960 --> 00:15:14,070
because of the hey go does things that's

00:15:12,120 --> 00:15:18,480
actually often a separate repository so

00:15:14,070 --> 00:15:21,030
it is go like as possible and we we

00:15:18,480 --> 00:15:24,990
really try to make sure that we generate

00:15:21,030 --> 00:15:26,280
safe optimized filters by default so you

00:15:24,990 --> 00:15:31,110
don't have to put a whole lot of effort

00:15:26,280 --> 00:15:33,630
into that and here is a bit of an eye

00:15:31,110 --> 00:15:36,270
chart I'm gonna apologize the one on the

00:15:33,630 --> 00:15:37,320
left that's actually Lib comp and I

00:15:36,270 --> 00:15:40,160
think you can see that a little better

00:15:37,320 --> 00:15:42,360
the one on the rights the raw EBP F

00:15:40,160 --> 00:15:44,400
which you really can't I mean that's

00:15:42,360 --> 00:15:46,920
hard for me to read on my laptop screen

00:15:44,400 --> 00:15:49,290
here but you can get kind of a rough

00:15:46,920 --> 00:15:51,870
idea like the the read there those are

00:15:49,290 --> 00:15:54,780
the actual actions the blue is the

00:15:51,870 --> 00:15:56,250
syscall numbers and that green that's

00:15:54,780 --> 00:15:57,660
the argument comparison so I mean that

00:15:56,250 --> 00:15:59,370
gives you an idea you can see on the

00:15:57,660 --> 00:16:01,800
left in Lib comp we're making three

00:15:59,370 --> 00:16:04,160
syscall argument comparisons and you can

00:16:01,800 --> 00:16:07,620
see what that expands out to in the raw

00:16:04,160 --> 00:16:11,610
BPF so and that's three cisco

00:16:07,620 --> 00:16:13,920
comparisons for one just call so you can

00:16:11,610 --> 00:16:14,730
imagine as this were to expand out like

00:16:13,920 --> 00:16:15,870
let's say

00:16:14,730 --> 00:16:17,880
somebody was telling me that some of the

00:16:15,870 --> 00:16:20,640
container runtimes right now have over

00:16:17,880 --> 00:16:22,200
300 rules for syscalls

00:16:20,640 --> 00:16:24,690
because they're taking a whitelist

00:16:22,200 --> 00:16:27,840
approach so you can see here we're doing

00:16:24,690 --> 00:16:29,640
three and only one of those sis calls is

00:16:27,840 --> 00:16:31,350
actually doing any argument comparisons

00:16:29,640 --> 00:16:34,410
so you can see how if you're running the

00:16:31,350 --> 00:16:40,590
raw BPF it gets real complicated real

00:16:34,410 --> 00:16:42,390
fast so anyway that's it for my part I

00:16:40,590 --> 00:16:43,650
was going to hand this over to Tom but

00:16:42,390 --> 00:16:55,290
before I do this anybody any quick

00:16:43,650 --> 00:16:57,420
questions don't know I mean I imagine

00:16:55,290 --> 00:16:59,310
you could you can make some arguments

00:16:57,420 --> 00:17:01,350
about you know not wanting to divulge

00:16:59,310 --> 00:17:05,280
that you know to an application that's

00:17:01,350 --> 00:17:08,490
potentially been compromised you can

00:17:05,280 --> 00:17:10,860
check the system state so you can here's

00:17:08,490 --> 00:17:12,570
everything assuming that set comp hasn't

00:17:10,860 --> 00:17:15,150
turned off the ability to check to see

00:17:12,570 --> 00:17:17,190
whether set comp is enabled there are

00:17:15,150 --> 00:17:20,970
mechanisms to see if set comp is enabled

00:17:17,190 --> 00:17:24,120
but in general rule-of-thumb Lib comp is

00:17:20,970 --> 00:17:27,180
a library so if the kernel were ever to

00:17:24,120 --> 00:17:28,470
grow that capability in case you can't

00:17:27,180 --> 00:17:30,240
get the filters back out if you have

00:17:28,470 --> 00:17:31,770
checkpoint restore enabled on the kernel

00:17:30,240 --> 00:17:33,540
because that was one of the things they

00:17:31,770 --> 00:17:36,930
needed so you can just read the filters

00:17:33,540 --> 00:17:40,250
back out but it's not a general I do

00:17:36,930 --> 00:17:40,250
recommend it yeah

00:17:45,320 --> 00:17:49,890
but with seccomp it's sort of spread

00:17:48,150 --> 00:17:50,820
across a bunch of binaries right so

00:17:49,890 --> 00:17:53,250
we're gonna have a system that's gonna

00:17:50,820 --> 00:17:55,230
have a bunch of binaries using sitcom

00:17:53,250 --> 00:17:57,270
and it would be nice if we could

00:17:55,230 --> 00:17:58,380
understand the state of the system and

00:17:57,270 --> 00:17:59,970
it doesn't even have to be the end of a

00:17:58,380 --> 00:18:04,500
jollification is getting their own but

00:17:59,970 --> 00:18:07,050
some other let's say policy monitor so I

00:18:04,500 --> 00:18:09,510
think there's there's a few differences

00:18:07,050 --> 00:18:13,170
between seccomp and SELinux and I

00:18:09,510 --> 00:18:15,990
there's there always seems to be a

00:18:13,170 --> 00:18:18,090
temptation to compare them right and

00:18:15,990 --> 00:18:19,770
think one could substitute the other and

00:18:18,090 --> 00:18:22,530
they're not I think they're very

00:18:19,770 --> 00:18:24,840
complementary and so SEC convent first

00:18:22,530 --> 00:18:27,480
off is discretionary right it's up to

00:18:24,840 --> 00:18:30,270
the applications themselves they could

00:18:27,480 --> 00:18:33,270
they could inherit it true and in which

00:18:30,270 --> 00:18:35,490
case it's not really their choice but

00:18:33,270 --> 00:18:38,430
the other thing I'll say is if you're

00:18:35,490 --> 00:18:41,340
trying to look at this from a global

00:18:38,430 --> 00:18:43,980
system security policy point of view a

00:18:41,340 --> 00:18:47,030
good set comp filter in my mind that

00:18:43,980 --> 00:18:51,030
don't think of SEC comp as a way to

00:18:47,030 --> 00:18:53,280
enforce access controls between you know

00:18:51,030 --> 00:18:55,650
an application and its various resources

00:18:53,280 --> 00:18:57,690
that's SELinux that's a farmer that's

00:18:55,650 --> 00:19:00,780
Mac that's that's what Nell assignments

00:18:57,690 --> 00:19:02,490
for in my mind a good second filter is

00:19:00,780 --> 00:19:05,070
basically a way of saying you know okay

00:19:02,490 --> 00:19:08,280
I I don't need this kernel functionality

00:19:05,070 --> 00:19:10,200
I don't need this this particular

00:19:08,280 --> 00:19:13,140
mechanism so I want to shut it off

00:19:10,200 --> 00:19:15,030
because if I'm compromised I don't want

00:19:13,140 --> 00:19:18,360
to be the attack vector and into the

00:19:15,030 --> 00:19:21,300
kernel absolutely and what I'm saying is

00:19:18,360 --> 00:19:22,770
like if we're building a system I need

00:19:21,300 --> 00:19:25,590
to be able to look at the system and

00:19:22,770 --> 00:19:30,750
know what the state is right like not

00:19:25,590 --> 00:19:32,280
just assume or guess or yeah I guess

00:19:30,750 --> 00:19:33,690
some of it also comes down to we need to

00:19:32,280 --> 00:19:36,090
talk about state you know what do you

00:19:33,690 --> 00:19:38,430
mean I mean we could probably talk about

00:19:36,090 --> 00:19:41,190
this for the next course I I'll just

00:19:38,430 --> 00:19:43,830
kind of pun say that outside of the

00:19:41,190 --> 00:19:44,970
checkpoint stuff that case just

00:19:43,830 --> 00:19:48,300
mentioned we don't really support that

00:19:44,970 --> 00:19:50,970
but that said if the kernel ever were to

00:19:48,300 --> 00:19:53,179
grow that capability we'd include it in

00:19:50,970 --> 00:19:55,440
lid second sure

00:19:53,179 --> 00:20:03,260
any other questions before I hand it off

00:19:55,440 --> 00:20:03,260
this time all right so it's all

00:20:16,020 --> 00:20:22,659
all right so this questions come up a

00:20:20,440 --> 00:20:26,740
couple times today whitelist or

00:20:22,659 --> 00:20:30,010
blacklist as the LXE guys said white

00:20:26,740 --> 00:20:32,020
lists are generally better um for things

00:20:30,010 --> 00:20:34,510
that you trust or scuse me for the

00:20:32,020 --> 00:20:36,669
further unprivileged ones sorry I'm

00:20:34,510 --> 00:20:39,760
getting his words all mixed up there and

00:20:36,669 --> 00:20:42,789
then he used black lists for his fun

00:20:39,760 --> 00:20:45,159
privileged ones um at Oracle we found

00:20:42,789 --> 00:20:48,280
that the white lists are good for the

00:20:45,159 --> 00:20:49,570
smaller the surgical cases so in other

00:20:48,280 --> 00:20:52,210
words if you want to run this one little

00:20:49,570 --> 00:20:53,380
app in the in your one container a white

00:20:52,210 --> 00:20:55,480
list is really good so you want to allow

00:20:53,380 --> 00:20:58,150
these twelve syscalls or fifteen

00:20:55,480 --> 00:21:01,059
syscalls or whatever they tend to get a

00:20:58,150 --> 00:21:02,470
little more challenging as the larger at

00:21:01,059 --> 00:21:06,789
the white list gets larger for example

00:21:02,470 --> 00:21:09,460
docker has a 305 last I looked I think

00:21:06,789 --> 00:21:12,789
this is called white list and again

00:21:09,460 --> 00:21:15,370
their goal is to block those 4050 odds

00:21:12,789 --> 00:21:17,860
this calls that they don't trust the

00:21:15,370 --> 00:21:21,640
snag with that is it's a 300 syscall

00:21:17,860 --> 00:21:22,960
white list so you have at least 300 BPF

00:21:21,640 --> 00:21:25,570
instructions that the kernel is going to

00:21:22,960 --> 00:21:28,030
walk through now we do have Schwartz

00:21:25,570 --> 00:21:30,760
shortcuts we do in the assembly we write

00:21:28,030 --> 00:21:32,799
in Lib comp and so we may not walk all

00:21:30,760 --> 00:21:35,590
300 but if you happen to hit the sis

00:21:32,799 --> 00:21:38,470
call that is number 299 in that list you

00:21:35,590 --> 00:21:41,080
wash most that e or that CBS CB PF

00:21:38,470 --> 00:21:42,669
filter and that's slow we have a couple

00:21:41,080 --> 00:21:45,820
optimizations we're working on right now

00:21:42,669 --> 00:21:50,110
make that faster but again that is as

00:21:45,820 --> 00:21:52,210
tricky the other downside then of a

00:21:50,110 --> 00:21:55,630
black list so say you want to block

00:21:52,210 --> 00:21:57,429
exact fork whatever the kernel has a new

00:21:55,630 --> 00:22:00,370
syscall we heard that if you are in the

00:21:57,429 --> 00:22:03,220
pipeline that new syscall gets added

00:22:00,370 --> 00:22:05,200
that's not explicit near blacklist now

00:22:03,220 --> 00:22:06,669
that's sudden we got allowed so you may

00:22:05,200 --> 00:22:10,150
have another attack vector if you don't

00:22:06,669 --> 00:22:11,260
keep your kernel in sync with lips at

00:22:10,150 --> 00:22:13,059
comp or however you're writing your

00:22:11,260 --> 00:22:16,270
SATCOM filters so there's a big risk

00:22:13,059 --> 00:22:18,549
there if if security is your highest

00:22:16,270 --> 00:22:20,020
priority that you could you could have

00:22:18,549 --> 00:22:24,580
accidentally have a hole when you do an

00:22:20,020 --> 00:22:26,649
update so other considerations that you

00:22:24,580 --> 00:22:29,030
should take into account do you want to

00:22:26,649 --> 00:22:31,250
block the entire syscall so for example

00:22:29,030 --> 00:22:32,900
you wanna block all of open or they're

00:22:31,250 --> 00:22:34,340
just some sub features of it you want to

00:22:32,900 --> 00:22:37,270
block like maybe you want to allow them

00:22:34,340 --> 00:22:39,110
to open Deb Noll or whatever

00:22:37,270 --> 00:22:42,500
obviously that gets a little more tricky

00:22:39,110 --> 00:22:45,590
the more specific you hate with your

00:22:42,500 --> 00:22:47,390
filters and your arguments do you want

00:22:45,590 --> 00:22:50,330
to support additional architectures like

00:22:47,390 --> 00:22:53,360
Paul mentioned so we're all most of us

00:22:50,330 --> 00:22:56,240
are running NEX 86 64 machines are you

00:22:53,360 --> 00:22:58,340
still running 32-bit applications if so

00:22:56,240 --> 00:22:59,690
that's a technically another ABI and you

00:22:58,340 --> 00:23:01,400
should have a filter for that otherwise

00:22:59,690 --> 00:23:02,810
well either it's gonna be fully allowed

00:23:01,400 --> 00:23:06,110
or fully blocked depending on how your

00:23:02,810 --> 00:23:09,140
system set up then a couple be careful

00:23:06,110 --> 00:23:11,870
be careful with strings set comp uses

00:23:09,140 --> 00:23:13,040
the pointer itself so if you're not

00:23:11,870 --> 00:23:14,390
careful and we'll do this in the

00:23:13,040 --> 00:23:16,490
tutorial if you're not careful with your

00:23:14,390 --> 00:23:17,870
pointer it won't allow or if you have

00:23:16,490 --> 00:23:20,030
multiple copies of the strings at

00:23:17,870 --> 00:23:22,670
different addresses then you may need to

00:23:20,030 --> 00:23:24,770
allow those multiple copies and then

00:23:22,670 --> 00:23:25,760
finally Paul also mentioned this

00:23:24,770 --> 00:23:28,460
parameter filter knee across

00:23:25,760 --> 00:23:30,230
architectures so some syscalls

00:23:28,460 --> 00:23:32,060
the parameters will be different so

00:23:30,230 --> 00:23:34,160
what's parameter two and one OS or in

00:23:32,060 --> 00:23:36,770
one architecture may be parameter three

00:23:34,160 --> 00:23:38,780
in another that can easily be a gotcha

00:23:36,770 --> 00:23:40,640
right now there's no graceful handling

00:23:38,780 --> 00:23:41,870
for that generally that's an exception

00:23:40,640 --> 00:23:45,920
case if you're gonna handle that within

00:23:41,870 --> 00:23:49,670
your code all right who wants to write

00:23:45,920 --> 00:23:56,240
some code cool all right you got him out

00:23:49,670 --> 00:24:00,350
of here sorry bad joke so let's let's

00:23:56,240 --> 00:24:01,550
make a file all right and and feel free

00:24:00,350 --> 00:24:03,320
to jump in if you have questions just

00:24:01,550 --> 00:24:05,780
raise a hand this is cotton is meant to

00:24:03,320 --> 00:24:12,770
be more interactive I've written these

00:24:05,780 --> 00:24:15,470
filters before so they are

00:24:12,770 --> 00:24:17,600
so I want one question that I've just

00:24:15,470 --> 00:24:21,559
started to get into the lipid sub set

00:24:17,600 --> 00:24:23,059
com certainly in the past week and when

00:24:21,559 --> 00:24:25,820
you talk about blacklist versus

00:24:23,059 --> 00:24:28,420
whitelist yes could that be

00:24:25,820 --> 00:24:33,650
characterized as say the default action

00:24:28,420 --> 00:24:35,540
is not allow yes yeah your rules that

00:24:33,650 --> 00:24:37,940
you add are allowed that's a whitelist

00:24:35,540 --> 00:24:40,040
if you say yes that would be a whitelist

00:24:37,940 --> 00:24:42,080
you have white listed in the SIS calls

00:24:40,040 --> 00:24:44,090
you wish to allow so in general that

00:24:42,080 --> 00:24:45,890
will be a slightly safer filter because

00:24:44,090 --> 00:24:48,170
if new syscall show up they will default

00:24:45,890 --> 00:24:49,429
to the and in that case you don't have

00:24:48,170 --> 00:24:50,750
to worry about other architectures

00:24:49,429 --> 00:24:52,250
either if you want them blocked because

00:24:50,750 --> 00:24:53,420
they're blocked by the fault by default

00:24:52,250 --> 00:24:55,400
they will be blocked and by default they

00:24:53,420 --> 00:24:58,250
will be blocked period the question is

00:24:55,400 --> 00:25:01,460
again you're on an x86 61 regime about

00:24:58,250 --> 00:25:03,140
32-bit application wants to run OH

00:25:01,460 --> 00:25:05,870
by default it will be dead if you have

00:25:03,140 --> 00:25:06,980
loaded that filter again remember set

00:25:05,870 --> 00:25:08,510
comp isn't loaded by default so

00:25:06,980 --> 00:25:10,610
obviously it'll just run period so then

00:25:08,510 --> 00:25:13,970
there's a blacklist anything that is an

00:25:10,610 --> 00:25:15,620
action other than allow yes so blacklist

00:25:13,970 --> 00:25:17,929
invert it so for example say you don't

00:25:15,620 --> 00:25:19,640
trust fork exact clone so you would

00:25:17,929 --> 00:25:22,850
explicitly say in your filter set comp

00:25:19,640 --> 00:25:25,309
do not allow fork SATCOM do not allow

00:25:22,850 --> 00:25:26,750
clones so your default in that case and

00:25:25,309 --> 00:25:29,390
then the default then would fall to

00:25:26,750 --> 00:25:32,120
generally and allow yes so anything else

00:25:29,390 --> 00:25:34,940
open readwrite whatever would be allowed

00:25:32,120 --> 00:25:38,300
sorry just one more question that's why

00:25:34,940 --> 00:25:41,480
we're here yeah so if you try to produce

00:25:38,300 --> 00:25:43,700
a filter where let's say your default is

00:25:41,480 --> 00:25:46,940
allow and then you add a rule for a sis

00:25:43,700 --> 00:25:49,250
call that is also allow that throws an

00:25:46,940 --> 00:25:50,570
error no total it's totally legal and so

00:25:49,250 --> 00:25:52,429
this is where I mean so again this is

00:25:50,570 --> 00:25:54,650
just a you're building up a set of

00:25:52,429 --> 00:25:57,020
assembly instructions and so in that

00:25:54,650 --> 00:25:59,510
case um you you would say if sis call

00:25:57,020 --> 00:26:01,220
equals open I'm going to explicitly

00:25:59,510 --> 00:26:02,540
allow this although although they're

00:26:01,220 --> 00:26:05,960
thinking oh I felt through all these

00:26:02,540 --> 00:26:07,130
nothing else happened also then allow so

00:26:05,960 --> 00:26:07,640
that should work that would totally work

00:26:07,130 --> 00:26:10,460
fine

00:26:07,640 --> 00:26:13,630
obviously it's uh Paul's got a do we

00:26:10,460 --> 00:26:17,140
actually catch that in Lib SATCOM okay

00:26:13,630 --> 00:26:21,050
so yeah if in Lipsett comm you'll notice

00:26:17,140 --> 00:26:23,360
when he starts going there's a you know

00:26:21,050 --> 00:26:25,429
in it and in the in it you give it the

00:26:23,360 --> 00:26:25,870
default action so if it doesn't match

00:26:25,429 --> 00:26:29,110
any

00:26:25,870 --> 00:26:32,470
you know kill a lot whatever and so lips

00:26:29,110 --> 00:26:34,030
suck because it does this as a way to

00:26:32,470 --> 00:26:35,440
help you because it doesn't make any

00:26:34,030 --> 00:26:37,600
sense you know if you're saying that the

00:26:35,440 --> 00:26:40,180
default rule is to allow and then you

00:26:37,600 --> 00:26:42,490
also say I want to allow open it's gonna

00:26:40,180 --> 00:26:45,330
return there because well just don't

00:26:42,490 --> 00:26:50,770
write that rule your default is to allow

00:26:45,330 --> 00:26:53,320
so yeah that's cool that was general

00:26:50,770 --> 00:26:54,940
enough to do that and getting her so I

00:26:53,320 --> 00:26:56,440
just wanted to make sure I understood

00:26:54,940 --> 00:26:59,110
what was going from an assembly point of

00:26:56,440 --> 00:27:03,760
view it is legal from thankfully yeah

00:26:59,110 --> 00:27:06,220
lib ii doesn't doesn't guarantee any

00:27:03,760 --> 00:27:07,740
ordering in the rules so like you know

00:27:06,220 --> 00:27:09,490
you might call rule at

00:27:07,740 --> 00:27:12,220
one-two-three-four thinking that that's

00:27:09,490 --> 00:27:14,650
how it's going to generate because we do

00:27:12,220 --> 00:27:16,390
a number of optimizations and we don't

00:27:14,650 --> 00:27:18,250
want to always be stuck with a

00:27:16,390 --> 00:27:19,990
particular optimization we want to be

00:27:18,250 --> 00:27:21,880
able to change it we don't provide any

00:27:19,990 --> 00:27:24,420
hard fast guarantees about the ordering

00:27:21,880 --> 00:27:24,420
of the rules

00:27:24,750 --> 00:27:29,590
you said it throws an error because it

00:27:26,980 --> 00:27:32,530
doesn't make sense but it might make

00:27:29,590 --> 00:27:35,110
sense if application later on changed

00:27:32,530 --> 00:27:36,700
the default policy or or a child process

00:27:35,110 --> 00:27:38,260
change the default policy right so like

00:27:36,700 --> 00:27:40,390
I want to say allow allow allow allow

00:27:38,260 --> 00:27:43,890
but like my regular policies allow and

00:27:40,390 --> 00:27:47,170
then later on did not our you know kill

00:27:43,890 --> 00:27:48,970
so we don't allow so in that case of

00:27:47,170 --> 00:27:51,429
default being allow and then you add a

00:27:48,970 --> 00:27:52,990
rule for open to say allow we don't

00:27:51,429 --> 00:27:54,429
allow that but what you're talking about

00:27:52,990 --> 00:27:59,110
is when you've got stacks multiple

00:27:54,429 --> 00:28:01,360
filters so that's a different filter you

00:27:59,110 --> 00:28:03,700
can have you can have the first filter

00:28:01,360 --> 00:28:05,250
have a default of kill and the second

00:28:03,700 --> 00:28:08,250
filter be a default of allow that's

00:28:05,250 --> 00:28:08,250
acceptable

00:28:09,120 --> 00:28:12,260
[Music]

00:28:16,810 --> 00:28:20,450
okay so if you're going the restrictive

00:28:19,190 --> 00:28:22,340
approach like you talked earlier where

00:28:20,450 --> 00:28:24,320
you've got you know you want to do your

00:28:22,340 --> 00:28:26,510
initialization then later like all right

00:28:24,320 --> 00:28:26,900
now we're doing the real risky stuff do

00:28:26,510 --> 00:28:29,210
a lot

00:28:26,900 --> 00:28:31,250
so obviously you need to make sure that

00:28:29,210 --> 00:28:34,010
your first filter you install has a

00:28:31,250 --> 00:28:36,610
default of allow because otherwise if

00:28:34,010 --> 00:28:38,750
your first filter defaults to kill but

00:28:36,610 --> 00:28:40,340
generally if you're doing that approach

00:28:38,750 --> 00:28:42,170
where you're writing a very permissive

00:28:40,340 --> 00:28:44,690
filter and then you're iteratively

00:28:42,170 --> 00:28:46,430
making it more restrictive the general

00:28:44,690 --> 00:28:49,790
approach is your first one the default

00:28:46,430 --> 00:28:52,760
isn't kill because of the nature of what

00:28:49,790 --> 00:28:55,370
you're trying to do so it in practice

00:28:52,760 --> 00:28:58,580
this no one's ever come back and said

00:28:55,370 --> 00:29:00,650
this has been a real issue just by

00:28:58,580 --> 00:29:02,480
virtue of the way people write code and

00:29:00,650 --> 00:29:09,770
people with post filters and so that's

00:29:02,480 --> 00:29:11,420
the way it is all right so let's first

00:29:09,770 --> 00:29:13,210
just make a really really simple C

00:29:11,420 --> 00:29:16,570
program

00:29:13,210 --> 00:29:21,590
just do something silly like left printf

00:29:16,570 --> 00:29:22,910
sum that standard out main all right and

00:29:21,590 --> 00:29:24,650
we're probably gonna need some pound

00:29:22,910 --> 00:29:30,860
includes right so we'll pound include

00:29:24,650 --> 00:29:32,630
let's see we'll do some standard oh and

00:29:30,860 --> 00:29:37,970
let's see what that happens with this so

00:29:32,630 --> 00:29:40,780
our full our function is pretty lame all

00:29:37,970 --> 00:29:41,930
right all right great we have a function

00:29:40,780 --> 00:29:46,490
congratulations

00:29:41,930 --> 00:29:49,250
C 101 um let's make a child process so

00:29:46,490 --> 00:29:52,370
let's do some forking um so we'll do C

00:29:49,250 --> 00:29:53,330
PID T will make a child pin and again

00:29:52,370 --> 00:29:54,890
feel free to jump in if you have

00:29:53,330 --> 00:29:57,920
questions obviously this part rather

00:29:54,890 --> 00:30:01,790
mundane and boring so um so we'll say

00:29:57,920 --> 00:30:05,030
child kid will fork then all right so

00:30:01,790 --> 00:30:06,560
we've now created a process okay so I

00:30:05,030 --> 00:30:07,700
guess we should surely be good citizens

00:30:06,560 --> 00:30:12,500
yeah we will

00:30:07,700 --> 00:30:14,660
if CP equals equals zero actually we

00:30:12,500 --> 00:30:16,900
should um do some error checking first

00:30:14,660 --> 00:30:16,900
right

00:30:17,000 --> 00:30:24,950
I will print out our on our Fork failed

00:30:22,700 --> 00:30:29,710
for some reason how to processes or

00:30:24,950 --> 00:30:29,710
whatever and maybe the legs it

00:30:29,799 --> 00:30:37,460
all right so we'll kill it um probably

00:30:33,530 --> 00:30:41,840
need some more IO or we need a oh yeah

00:30:37,460 --> 00:30:43,370
ah sorry thank you yeah we approach it

00:30:41,840 --> 00:30:46,700
right that standard out job thank you

00:30:43,370 --> 00:30:49,100
for oh man I do not like this keyboard

00:30:46,700 --> 00:30:51,770
as you can tell this is not my usual

00:30:49,100 --> 00:30:54,590
setup okay

00:30:51,770 --> 00:31:00,230
so we'll probably includes some standard

00:30:54,590 --> 00:31:03,070
Lib and let's see what else do we need

00:31:00,230 --> 00:31:03,070
how we need fork

00:31:12,500 --> 00:31:18,380
all right so let's see what this does

00:31:15,490 --> 00:31:19,730
okay we obviously didn't change any

00:31:18,380 --> 00:31:21,080
printouts yeah so we for it but we

00:31:19,730 --> 00:31:21,980
didn't do anything with it so now let's

00:31:21,080 --> 00:31:24,530
do something with it

00:31:21,980 --> 00:31:33,799
so we'll say if the child paid equals

00:31:24,530 --> 00:31:35,240
equals zero now we're in the child and I

00:31:33,799 --> 00:31:38,020
don't know we'll just say for now well

00:31:35,240 --> 00:31:38,020
after enough

00:31:43,050 --> 00:31:47,490
else this will be who we need to close

00:31:45,420 --> 00:31:50,690
the Thank You somebody heard you say

00:31:47,490 --> 00:31:50,690
that even though it wasn't a hood

00:31:59,299 --> 00:32:03,970
okay

00:32:01,660 --> 00:32:04,720
nothing too exciting so far so now we've

00:32:03,970 --> 00:32:07,419
seen we're in Maine

00:32:04,720 --> 00:32:08,620
we're in a parent we're in a child okay

00:32:07,419 --> 00:32:10,210
this is where we'll start and

00:32:08,620 --> 00:32:12,820
introducing some set comps so feel free

00:32:10,210 --> 00:32:14,559
to jump in if you have questions I'm

00:32:12,820 --> 00:32:16,450
gonna branch off to a function here just

00:32:14,559 --> 00:32:17,830
to keep this a little less spaghetti

00:32:16,450 --> 00:32:21,720
although it's kind of get spaghetti by

00:32:17,830 --> 00:32:24,400
the end so we'll say call child

00:32:21,720 --> 00:32:32,080
obviously that's a bad choice of a name

00:32:24,400 --> 00:32:33,610
but that's okay so typically this is the

00:32:32,080 --> 00:32:35,020
way where you would introduce that comp

00:32:33,610 --> 00:32:36,429
you don't want to introduce it before

00:32:35,020 --> 00:32:38,080
you do the fork because that would be

00:32:36,429 --> 00:32:39,400
assist call you would have to allow so

00:32:38,080 --> 00:32:42,370
this is a common mistake you would see

00:32:39,400 --> 00:32:45,220
in newer filters they would do they

00:32:42,370 --> 00:32:46,210
would do set comp here that's obviously

00:32:45,220 --> 00:32:47,830
not what you would call but they would

00:32:46,210 --> 00:32:48,850
do that they're suddenly fork would have

00:32:47,830 --> 00:32:50,679
to be allowed and their filter and now

00:32:48,850 --> 00:32:52,720
they're if they want to really lock this

00:32:50,679 --> 00:32:54,190
down that child process would also then

00:32:52,720 --> 00:32:57,400
be able to fork now maybe you won't

00:32:54,190 --> 00:33:02,919
allow that maybe you don't but let's say

00:32:57,400 --> 00:33:05,200
we don't want to allow that so inside of

00:33:02,919 --> 00:33:10,179
our child then um we're gonna build up a

00:33:05,200 --> 00:33:12,190
filter and so in insect complan Lipsett

00:33:10,179 --> 00:33:14,919
comp we use something called an S CMP or

00:33:12,190 --> 00:33:16,539
set comp filter of a context and this is

00:33:14,919 --> 00:33:19,090
what we build up the filter inside of

00:33:16,539 --> 00:33:20,890
it's basically a state holder inside of

00:33:19,090 --> 00:33:22,419
this function and then once we build it

00:33:20,890 --> 00:33:25,840
up how we like it we're gonna send that

00:33:22,419 --> 00:33:29,610
into the kernel so we'll need a we'll

00:33:25,840 --> 00:33:29,610
need to include set comp dot H for this

00:33:31,320 --> 00:33:36,039
if you are on a young-bae system so on

00:33:34,390 --> 00:33:38,919
my system I would have to do yum install

00:33:36,039 --> 00:33:40,990
lips at comp yum install lips at comp -

00:33:38,919 --> 00:33:46,330
devel similar idea if you're on your

00:33:40,990 --> 00:33:47,530
Ubuntu system alright so first thing

00:33:46,330 --> 00:33:49,659
we'll do is we're gonna initialize our

00:33:47,530 --> 00:33:52,120
spark our context so we'll scroll set

00:33:49,659 --> 00:33:53,590
comp in it and now this is where we're

00:33:52,120 --> 00:33:56,110
gonna decide do we want a whitelist

00:33:53,590 --> 00:33:57,640
do we want a blacklist um current

00:33:56,110 --> 00:33:59,820
thoughts in my opinion I like the

00:33:57,640 --> 00:34:01,630
whitelist better again there are

00:33:59,820 --> 00:34:03,419
potentially performance trade-offs

00:34:01,630 --> 00:34:06,220
especially if your filter gets large

00:34:03,419 --> 00:34:08,320
Leonard and systemd currently prefer a

00:34:06,220 --> 00:34:11,169
whitelist and they like to return a perm

00:34:08,320 --> 00:34:13,540
as their error his thought process is

00:34:11,169 --> 00:34:15,399
and I think this is valid

00:34:13,540 --> 00:34:17,529
that'll make it look like it doesn't

00:34:15,399 --> 00:34:19,539
hopefully your system or it doesn't it's

00:34:17,529 --> 00:34:20,980
not supported hopefully your system will

00:34:19,539 --> 00:34:22,690
fall back and think it's on an older

00:34:20,980 --> 00:34:25,149
kernel and try to do what it did prior

00:34:22,690 --> 00:34:28,599
to that thing existing that's their

00:34:25,149 --> 00:34:30,669
vision it seems reasonable to me so I'm

00:34:28,599 --> 00:34:33,789
gonna say SCMP and we have a bunch of

00:34:30,669 --> 00:34:35,649
then helpers like this and we'll say a

00:34:33,789 --> 00:34:39,520
perm so by default we're going to

00:34:35,649 --> 00:34:41,470
initialize this filter if the syscall is

00:34:39,520 --> 00:34:44,589
not in the whitelist we're gonna return

00:34:41,470 --> 00:34:46,510
an e perm and so let's actually not go

00:34:44,589 --> 00:34:50,440
too much further just to make sure my

00:34:46,510 --> 00:34:52,839
code isn't crazy so at this point I've

00:34:50,440 --> 00:34:54,329
created an empty filter I haven't loaded

00:34:52,839 --> 00:34:56,649
in the kernel I haven't had any rules

00:34:54,329 --> 00:34:57,849
but just trying to make sure that my

00:34:56,649 --> 00:35:00,099
code is saying before I have too many

00:34:57,849 --> 00:35:04,359
typos and too many bugs okay so I've got

00:35:00,099 --> 00:35:06,779
an error there let's add our pound

00:35:04,359 --> 00:35:06,779
include

00:35:11,300 --> 00:35:15,190
oops that is not great

00:35:19,730 --> 00:35:31,250
okay so let's see undefined referenced

00:35:23,630 --> 00:35:32,720
asset comp release oh yes okay so now

00:35:31,250 --> 00:35:34,579
what I need to do so I'm calling set

00:35:32,720 --> 00:35:37,849
comp properly but I now need to compile

00:35:34,579 --> 00:35:40,190
with it so we need GCC - Cal set comp

00:35:37,849 --> 00:35:41,810
and then I need to tell it my file on

00:35:40,190 --> 00:35:44,780
compiling hey now we're happy

00:35:41,810 --> 00:35:46,040
oops so let's call it okay so as before

00:35:44,780 --> 00:35:49,450
we're not saying anything new and

00:35:46,040 --> 00:35:51,710
exciting and we're still c1 along here

00:35:49,450 --> 00:35:53,570
so we've got our filter let's let's now

00:35:51,710 --> 00:35:55,280
do a little bit more stuff with this

00:35:53,570 --> 00:35:57,800
finally and it maybe finally get to some

00:35:55,280 --> 00:36:02,930
real set comp any questions as far by

00:35:57,800 --> 00:36:05,180
the way yeah let's get it might

00:36:02,930 --> 00:36:11,510
otherwise the viewers at home are gonna

00:36:05,180 --> 00:36:13,520
hate us where did you say whether it was

00:36:11,510 --> 00:36:17,119
a white list or a black list

00:36:13,520 --> 00:36:18,680
so I've implicitly stated that and where

00:36:17,119 --> 00:36:22,640
I've said it right here is my in it and

00:36:18,680 --> 00:36:24,470
so what I've stated by this one is if if

00:36:22,640 --> 00:36:27,230
the syscall doesn't match a rule that

00:36:24,470 --> 00:36:28,220
I've said my default is going to return

00:36:27,230 --> 00:36:30,710
an e perm

00:36:28,220 --> 00:36:32,750
so I've explicitly stated that this is

00:36:30,710 --> 00:36:34,220
I've explicitly stated this is e perm

00:36:32,750 --> 00:36:35,810
which is implicitly saying I've made a

00:36:34,220 --> 00:36:37,430
white list so everything that I've done

00:36:35,810 --> 00:36:39,470
add after this will likely be some sort

00:36:37,430 --> 00:36:41,480
of allow and that's where I'm gonna

00:36:39,470 --> 00:36:43,790
build up my my white list my filters

00:36:41,480 --> 00:36:45,770
that I'm allowing make sense it's kind

00:36:43,790 --> 00:36:46,970
of not tremendously intuitive but it

00:36:45,770 --> 00:36:52,369
wants to play with a little bit it will

00:36:46,970 --> 00:36:54,109
be okay so yeah let's add a little

00:36:52,369 --> 00:36:57,470
comment we can hold that let's repeat

00:36:54,109 --> 00:36:59,180
that for the way yes just example of

00:36:57,470 --> 00:37:01,930
blacklist also how different it would

00:36:59,180 --> 00:37:01,930
like maybe to

00:37:08,150 --> 00:37:15,980
so I would do this I would do something

00:37:10,220 --> 00:37:17,060
like this for a black list and obviously

00:37:15,980 --> 00:37:19,070
doing these both at the same time

00:37:17,060 --> 00:37:22,510
doesn't make sense so this is a bad

00:37:19,070 --> 00:37:22,510
example in its current form

00:37:28,140 --> 00:37:33,240
so if you're doing a whitelist that's

00:37:31,470 --> 00:37:36,330
one question you know normally you would

00:37:33,240 --> 00:37:39,750
be adding allow rules for specific sis

00:37:36,330 --> 00:37:41,490
calls but right is it allowed to add you

00:37:39,750 --> 00:37:45,750
know let's say your your blacklist your

00:37:41,490 --> 00:37:48,600
default action is let's say log can I

00:37:45,750 --> 00:37:51,480
explicitly add rules for sis calls that

00:37:48,600 --> 00:37:54,360
would make them yeah certain syscalls

00:37:51,480 --> 00:37:56,580
would be an error some would be killed

00:37:54,360 --> 00:37:58,920
and correct correct in fact you can um

00:37:56,580 --> 00:38:02,040
one of our tests in fact we we ant ran

00:37:58,920 --> 00:38:04,260
into a really quirky bug and basically I

00:38:02,040 --> 00:38:05,280
I did a bunch of pratensis calls it's

00:38:04,260 --> 00:38:06,780
called one two three four five six maybe

00:38:05,280 --> 00:38:09,780
nine ten twelve and each one returned

00:38:06,780 --> 00:38:12,780
error no 1 2 3 4 5 6 8 9 10 11 12

00:38:09,780 --> 00:38:14,850
eeep erm II whatever but we're just

00:38:12,780 --> 00:38:16,710
using numbers again to try to flesh out

00:38:14,850 --> 00:38:18,630
the bug so yeah totally legit you can

00:38:16,710 --> 00:38:20,310
have different numbers but as Paul said

00:38:18,630 --> 00:38:23,970
it's explicitly compared so if your

00:38:20,310 --> 00:38:26,040
default is error no number 5 and you set

00:38:23,970 --> 00:38:28,370
a rule then error number 5 Bennett will

00:38:26,040 --> 00:38:28,370
yell you

00:38:32,850 --> 00:38:42,390
all right still alive everybody'll awake

00:38:35,540 --> 00:38:45,960
okaylet let's have some rules so we're

00:38:42,390 --> 00:38:48,540
gonna um like most good apps we return

00:38:45,960 --> 00:38:53,100
error codes so we'll say error code and

00:38:48,540 --> 00:38:55,740
we're gonna say um set comp rule add and

00:38:53,100 --> 00:38:57,090
so we need to pass in our context so

00:38:55,740 --> 00:39:02,270
it's gonna build off that context each

00:38:57,090 --> 00:39:05,220
time and then let's add so let's allow I

00:39:02,270 --> 00:39:10,800
want to have a typo in my blacklist I

00:39:05,220 --> 00:39:13,800
forgot by the way there we go so thanks

00:39:10,800 --> 00:39:16,350
for catching me and let's see what our

00:39:13,800 --> 00:39:20,880
we won't allow um so let's do let's just

00:39:16,350 --> 00:39:24,180
allow right all right so I've added a

00:39:20,880 --> 00:39:27,300
rule to allow right again I'm passing

00:39:24,180 --> 00:39:28,620
this into my context allow other sis

00:39:27,300 --> 00:39:30,420
colors right this is our preferred way

00:39:28,620 --> 00:39:32,250
of using it again because the SIS call

00:39:30,420 --> 00:39:34,860
number four right may not be consistent

00:39:32,250 --> 00:39:36,600
across all API is this will let us in

00:39:34,860 --> 00:39:38,040
website comp go and identify the right

00:39:36,600 --> 00:39:40,830
sisters called number you had in your

00:39:38,040 --> 00:39:43,500
mind and get that mapped in and then the

00:39:40,830 --> 00:39:45,120
last year was telling it that there's no

00:39:43,500 --> 00:39:46,500
parameters we're gonna be filtering I'll

00:39:45,120 --> 00:39:47,910
play with that in a second so we allow

00:39:46,500 --> 00:39:50,340
variable arguments so if we want to

00:39:47,910 --> 00:39:53,190
filter on extra parameters we can for

00:39:50,340 --> 00:39:55,050
now let's keep it simple so we're gonna

00:39:53,190 --> 00:39:58,080
allow a right and then we need to load

00:39:55,050 --> 00:39:59,700
this into the kernel so oh I suppose I

00:39:58,080 --> 00:40:01,530
should check my error code to and I can

00:39:59,700 --> 00:40:04,770
have for some heckling from the back

00:40:01,530 --> 00:40:07,800
please do set comp rule at the third

00:40:04,770 --> 00:40:10,170
argument should be a 1 to indicate that

00:40:07,800 --> 00:40:13,550
we're doing one argument comparison

00:40:10,170 --> 00:40:19,770
third argument third third third right

00:40:13,550 --> 00:40:21,390
before the ICMP sis yep oh yes conspire

00:40:19,770 --> 00:40:23,190
are you saying that wouldn't have

00:40:21,390 --> 00:40:25,410
compiled yeah and it probably would have

00:40:23,190 --> 00:40:28,500
given you a really weird compiler just

00:40:25,410 --> 00:40:30,930
why I felt type something we're

00:40:28,500 --> 00:40:32,190
debugging as we go thank you somebody's

00:40:30,930 --> 00:40:34,920
example code they have written up here

00:40:32,190 --> 00:40:39,150
is in a size 10 fun I don't have size 10

00:40:34,920 --> 00:40:40,680
font glasses right now alright so if

00:40:39,150 --> 00:40:42,960
it's less than 0 I don't know we'll do

00:40:40,680 --> 00:40:45,090
some error again I should write probably

00:40:42,960 --> 00:40:55,320
right that the standard error but

00:40:45,090 --> 00:40:58,410
rule add failed and will write out then

00:40:55,320 --> 00:41:02,320
RC something like that

00:40:58,410 --> 00:41:04,840
and then will return and that's actually

00:41:02,320 --> 00:41:08,890
bad I should probably say go to out or

00:41:04,840 --> 00:41:13,690
I'm gonna have a memory leak and then

00:41:08,890 --> 00:41:15,130
we'll say oh alright so this was the

00:41:13,690 --> 00:41:16,570
last point we've got the rule added

00:41:15,130 --> 00:41:18,550
we're checking to see if the rule add

00:41:16,570 --> 00:41:20,110
failed but again we still don't have it

00:41:18,550 --> 00:41:24,120
in the kernel yes so let's add this to

00:41:20,110 --> 00:41:27,760
the kernel so we'll say set comp load

00:41:24,120 --> 00:41:29,410
and I'm gonna heckle you again please do

00:41:27,760 --> 00:41:31,300
actually but this is more of a heckle

00:41:29,410 --> 00:41:33,250
for myself I do apologize that one I

00:41:31,300 --> 00:41:35,620
told you put in take it out cuz you have

00:41:33,250 --> 00:41:38,230
this air at the end that's my mistake

00:41:35,620 --> 00:41:39,520
I'm sorry and no worries remember what I

00:41:38,230 --> 00:41:41,110
told you earlier that time was a

00:41:39,520 --> 00:41:42,790
Superman for doing this and that I would

00:41:41,110 --> 00:41:45,670
never do it this is you're now seeing

00:41:42,790 --> 00:41:47,380
why no it's a good this is so so Paul

00:41:45,670 --> 00:41:49,300
and I talked about this over lunch and I

00:41:47,380 --> 00:41:50,350
mean it's stressful to stand in front of

00:41:49,300 --> 00:41:52,420
people and talk about things like this

00:41:50,350 --> 00:41:53,710
but it shows that even people who have

00:41:52,420 --> 00:41:55,960
been living and breathing this for quite

00:41:53,710 --> 00:41:57,580
a while make mistakes this isn't always

00:41:55,960 --> 00:41:59,470
straightforward and it's it's easy to

00:41:57,580 --> 00:42:02,050
have a screw-up where maybe it won't

00:41:59,470 --> 00:42:03,190
compile or maybe more nefarious ly maybe

00:42:02,050 --> 00:42:04,990
you'll think you've built the filter

00:42:03,190 --> 00:42:06,790
right you haven't so get more eyes on it

00:42:04,990 --> 00:42:08,530
work with a feel free to contact call or

00:42:06,790 --> 00:42:11,140
me I just put you on the spot there

00:42:08,530 --> 00:42:13,060
sorry about that but lettuce I mean if

00:42:11,140 --> 00:42:14,470
you want me to look at your filter I'll

00:42:13,060 --> 00:42:17,830
look at your filter you know I'd rather

00:42:14,470 --> 00:42:19,210
have secure systems in the wild then

00:42:17,830 --> 00:42:22,710
people thinking they know what's working

00:42:19,210 --> 00:42:22,710
and it doesn't so

00:42:26,900 --> 00:42:34,260
yeah yeah yes it's the mic yeah perfect

00:42:31,200 --> 00:42:36,570
sorry I repeat I just it's easy it would

00:42:34,260 --> 00:42:38,430
be easier to verify that what we wanted

00:42:36,570 --> 00:42:46,710
got in if we could get it back out and

00:42:38,430 --> 00:42:49,200
print it I think yeah that just shows

00:42:46,710 --> 00:42:51,900
you that the colonel recorded what you

00:42:49,200 --> 00:42:54,570
wrote you actually want to test that it

00:42:51,900 --> 00:42:55,890
behaves the way you want so you don't

00:42:54,570 --> 00:42:57,570
actually want to pull it out who cares

00:42:55,890 --> 00:43:02,010
you want to be able to test the the

00:42:57,570 --> 00:43:03,600
filter that you handed it and there's

00:43:02,010 --> 00:43:08,070
one there's one other thing I will say

00:43:03,600 --> 00:43:09,600
yeah you guys should sit next to way

00:43:08,070 --> 00:43:12,840
dare thing I'm gonna say is if you've

00:43:09,600 --> 00:43:15,120
looked at if you've looked at the BPF

00:43:12,840 --> 00:43:20,100
that you get from a SATCOM filter if

00:43:15,120 --> 00:43:22,050
it's beyond just a few lines you're

00:43:20,100 --> 00:43:24,090
you're you're now into the problem of

00:43:22,050 --> 00:43:27,240
having to analyze assembly code and

00:43:24,090 --> 00:43:29,100
reverse engineering that back into rules

00:43:27,240 --> 00:43:32,100
I mean I'm not saying it's an impossible

00:43:29,100 --> 00:43:36,300
problem but it's it's not as easy as

00:43:32,100 --> 00:43:39,510
analyzing SELinux policy and just I mean

00:43:36,300 --> 00:43:41,760
uncase you're right you know I I can see

00:43:39,510 --> 00:43:44,880
what I sent in that is gonna be what the

00:43:41,760 --> 00:43:46,680
colonel has the the the harder case is

00:43:44,880 --> 00:43:47,760
when you have a bunch of stacked filters

00:43:46,680 --> 00:43:49,590
that are coming from like different

00:43:47,760 --> 00:43:51,630
processes right like I can set some

00:43:49,590 --> 00:43:53,610
filters in system D and then my process

00:43:51,630 --> 00:43:54,780
can set some more filters in that right

00:43:53,610 --> 00:43:56,670
and that's where we're gonna get into a

00:43:54,780 --> 00:43:59,030
man what the hell is even going on on my

00:43:56,670 --> 00:43:59,030
system

00:44:03,830 --> 00:44:13,490
all right so as we said we we've loaded

00:44:08,870 --> 00:44:15,170
this into the kernel let's add a quick

00:44:13,490 --> 00:44:18,140
little error handling there just so we

00:44:15,170 --> 00:44:23,120
can know in case something went wrong

00:44:18,140 --> 00:44:29,930
and there we go all right let's see what

00:44:23,120 --> 00:44:32,000
fails on this compile nothing so we've

00:44:29,930 --> 00:44:33,500
created a really simple rule we've

00:44:32,000 --> 00:44:36,440
loaded into the kernel we're actually

00:44:33,500 --> 00:44:40,820
not doing anything yet so when we run

00:44:36,440 --> 00:44:43,070
this it still looks the same now let's

00:44:40,820 --> 00:44:48,010
start being a little fancier so after we

00:44:43,070 --> 00:44:48,010
load it let's call all right

00:44:53,049 --> 00:45:00,329
so we've button there we go so we're now

00:44:57,519 --> 00:45:03,249
calling f printf after we've explicitly

00:45:00,329 --> 00:45:11,469
allowed write and theory this should

00:45:03,249 --> 00:45:11,949
work well it I don't know oh it didn't

00:45:11,469 --> 00:45:18,939
work

00:45:11,949 --> 00:45:25,659
hmmm ideas check the message I like that

00:45:18,939 --> 00:45:32,109
I got some protection faults that's kind

00:45:25,659 --> 00:45:39,399
of fun not particularly user-friendly to

00:45:32,109 --> 00:45:42,819
read there but hmm other thoughts audit

00:45:39,399 --> 00:45:46,630
log let's see where's my audit log in

00:45:42,819 --> 00:45:49,209
this machine um let's see where is that

00:45:46,630 --> 00:45:51,669
located on this you know I would type a

00:45:49,209 --> 00:45:54,219
you search a you search back do I need

00:45:51,669 --> 00:45:57,279
to be sued for that Paul ah that's a

00:45:54,219 --> 00:45:59,019
good question yeah I think you probably

00:45:57,279 --> 00:46:03,399
do yeah yeah throw so you do on there

00:45:59,019 --> 00:46:07,749
less than your search - M okay and then

00:46:03,399 --> 00:46:09,099
SEC comp SEC Co MPI capitals may be

00:46:07,749 --> 00:46:14,679
lower case works I don't know I always

00:46:09,099 --> 00:46:17,679
sees capitals Bertrand yeah no matches

00:46:14,679 --> 00:46:19,149
mm-hmm so okay let's let's look through

00:46:17,679 --> 00:46:22,769
and see what we've done here so we've

00:46:19,149 --> 00:46:27,339
said a perm we're allowing the right

00:46:22,769 --> 00:46:29,999
what else do we want to look at here and

00:46:27,339 --> 00:46:29,999
after the load

00:46:36,490 --> 00:46:47,380
you know you want to Mike this is an

00:46:46,119 --> 00:46:49,060
important point that needs to be

00:46:47,380 --> 00:46:53,200
recorded so let's do this in the

00:46:49,060 --> 00:46:58,089
microphone when your default action is

00:46:53,200 --> 00:47:01,240
an error by default the Lib seccomp does

00:46:58,089 --> 00:47:03,099
not blog to audit log so you but there

00:47:01,240 --> 00:47:05,859
is an attribute I forget the exact call

00:47:03,099 --> 00:47:07,330
but you can set the attribute so that it

00:47:05,859 --> 00:47:09,160
locks basically everything except for

00:47:07,330 --> 00:47:12,339
allows and then you'll see a message in

00:47:09,160 --> 00:47:14,940
your auto log the other way to do it is

00:47:12,339 --> 00:47:19,480
to just make your action kill instead of

00:47:14,940 --> 00:47:23,260
yeah so it's gonna say yeah you're right

00:47:19,480 --> 00:47:26,230
there there is recent builds of Lib comp

00:47:23,260 --> 00:47:30,700
and recent kernels does have them much

00:47:26,230 --> 00:47:32,770
improved logging capability and act log

00:47:30,700 --> 00:47:36,910
yeah I was gonna say the people who did

00:47:32,770 --> 00:47:38,920
that are here in this room is so anyway

00:47:36,910 --> 00:47:41,349
so thank you for that but the other

00:47:38,920 --> 00:47:44,980
thing I would suggest that's also handy

00:47:41,349 --> 00:47:46,599
before we go that route got a friend of

00:47:44,980 --> 00:47:48,250
mine who says the most powerful

00:47:46,599 --> 00:47:50,380
debugging tool in the world is s tres

00:47:48,250 --> 00:47:51,400
damn yeah it might be something like

00:47:50,380 --> 00:47:54,280
that as well

00:47:51,400 --> 00:47:55,900
useful showing here now this is

00:47:54,280 --> 00:47:59,560
interesting though I changed the error

00:47:55,900 --> 00:48:04,210
from EEPROM to act log and it printed

00:47:59,560 --> 00:48:08,410
out so and but there we go there's our

00:48:04,210 --> 00:48:12,580
audit the question yeah if you have left

00:48:08,410 --> 00:48:15,359
it as the way was is a perm would F

00:48:12,580 --> 00:48:18,849
printf return code have a perm

00:48:15,359 --> 00:48:21,030
return value so here's what we had

00:48:18,849 --> 00:48:21,030
before

00:48:21,089 --> 00:48:27,190
okay like that yeah and then at line 33

00:48:24,609 --> 00:48:30,330
if you get the return code forever

00:48:27,190 --> 00:48:30,330
enough oh yes

00:48:31,609 --> 00:48:38,759
yeah exactly so now it would work sorry

00:48:37,140 --> 00:48:41,369
if you just run it through s trace

00:48:38,759 --> 00:48:42,900
you'll see the return code - let's do

00:48:41,369 --> 00:48:44,849
that because obviously I don't have a

00:48:42,900 --> 00:48:51,449
graceful way without going to like gdb

00:48:44,849 --> 00:48:53,369
or something oh thank you cool one

00:48:51,449 --> 00:48:54,809
second well the other by a second

00:48:53,369 --> 00:48:56,789
I want a caution if you're in an old

00:48:54,809 --> 00:48:59,539
distribution kernel you're not gonna

00:48:56,789 --> 00:49:01,949
have the logging capabilities haha so

00:48:59,539 --> 00:49:03,420
plugging capabilities is cool don't get

00:49:01,949 --> 00:49:08,789
me wrong but you're not gonna have it on

00:49:03,420 --> 00:49:10,799
all systems so interesting I must not

00:49:08,789 --> 00:49:13,019
have recompiled it or something cuz it

00:49:10,799 --> 00:49:15,209
is now working and I'm gonna say I know

00:49:13,019 --> 00:49:16,499
why but I really don't because that

00:49:15,209 --> 00:49:18,089
really wasn't a question the user I

00:49:16,499 --> 00:49:21,449
really expected that to work and as you

00:49:18,089 --> 00:49:24,229
can see it did but anyway that's trees

00:49:21,449 --> 00:49:24,229
not installed

00:49:30,020 --> 00:49:38,930
like I said I don't use this machine

00:49:32,240 --> 00:49:47,119
tremendously often other questions while

00:49:38,930 --> 00:49:49,270
I wade through YUM that wasn't too

00:49:47,119 --> 00:49:49,270
painful

00:49:53,020 --> 00:49:59,770
there we go this one actually allowed it

00:49:56,250 --> 00:50:02,290
but let's not and let's go look at the s

00:49:59,770 --> 00:50:03,430
trace that's the fun thing about these

00:50:02,290 --> 00:50:05,140
you never know which direction they're

00:50:03,430 --> 00:50:07,420
gonna go and I can't always say I'm

00:50:05,140 --> 00:50:11,080
ready for it and that's okay um we'll

00:50:07,420 --> 00:50:13,590
just say err no 42 arbitrarily picking a

00:50:11,080 --> 00:50:13,590
phone number

00:50:14,490 --> 00:50:18,190
okay so we've recompiled it see what

00:50:17,770 --> 00:50:24,550
happens

00:50:18,190 --> 00:50:26,440
oh yes good point

00:50:24,550 --> 00:50:35,290
um what's the option for that do you

00:50:26,440 --> 00:50:37,090
recall - FF thank you there we go and so

00:50:35,290 --> 00:50:38,920
we got an e perm on the exit which isn't

00:50:37,090 --> 00:50:40,210
a surprise so in this child it's sooner

00:50:38,920 --> 00:50:41,770
or later going to exit but we never

00:50:40,210 --> 00:50:43,540
explicitly allowed that so that will

00:50:41,770 --> 00:50:44,710
obviously not work but we don't care

00:50:43,540 --> 00:50:52,869
because we've kind of done all our

00:50:44,710 --> 00:50:55,270
thinking prior to that oops and our

00:50:52,869 --> 00:51:01,720
right then returned let's see

00:50:55,270 --> 00:51:03,850
you know message and that's 42 thank you

00:51:01,720 --> 00:51:05,380
I'm glad you remembered I should have

00:51:03,850 --> 00:51:10,450
thought of a number you hooked it up

00:51:05,380 --> 00:51:12,820
good thanks I knew that so quick

00:51:10,450 --> 00:51:15,160
question yeah is there a way so I saw

00:51:12,820 --> 00:51:18,580
the audit behavior was excellent

00:51:15,160 --> 00:51:20,770
is there a way to take the audit log of

00:51:18,580 --> 00:51:22,930
a running process and say okay here's

00:51:20,770 --> 00:51:24,520
what this process is supposed to do in

00:51:22,930 --> 00:51:27,460
its correct behavior can I just turn

00:51:24,520 --> 00:51:29,650
that into a policy I don't think there

00:51:27,460 --> 00:51:31,390
is but interestingly I may have known a

00:51:29,650 --> 00:51:33,609
guy who was working on a similar idea

00:51:31,390 --> 00:51:35,920
and it went half-heartedly so if you're

00:51:33,609 --> 00:51:39,310
interested give me your contact info I'm

00:51:35,920 --> 00:51:41,290
interested in having it alas I was as

00:51:39,310 --> 00:51:41,859
well but I don't have the time to write

00:51:41,290 --> 00:51:45,160
it um

00:51:41,859 --> 00:51:47,050
I know there's interests in either

00:51:45,160 --> 00:51:49,270
statically analyzing the program or

00:51:47,050 --> 00:51:51,520
running it or whatever and saying here's

00:51:49,270 --> 00:51:53,410
what it should be calling allow these I

00:51:51,520 --> 00:51:57,480
don't know that there's anything that

00:51:53,410 --> 00:51:57,480
exists at the moment okay thanks

00:51:59,210 --> 00:52:09,150
all right so we still on the same page

00:52:06,320 --> 00:52:12,810
so let's switch this rule back to and

00:52:09,150 --> 00:52:14,609
allow and I don't know let's let's let's

00:52:12,810 --> 00:52:17,010
add some parameters to it so I've

00:52:14,609 --> 00:52:18,420
changed that last zero so I was on line

00:52:17,010 --> 00:52:19,770
19 I've changed it now too

00:52:18,420 --> 00:52:21,750
let's change that to a 1 so in other

00:52:19,770 --> 00:52:23,160
words we're gonna say there's now one

00:52:21,750 --> 00:52:25,680
parameter I'm gonna filter for this

00:52:23,160 --> 00:52:28,140
particular rule and um I don't know

00:52:25,680 --> 00:52:36,030
let's see what do we want to do so we'll

00:52:28,140 --> 00:52:39,320
say SCMP compare oops and oh excuse me I

00:52:36,030 --> 00:52:42,240
needed I'll see what we'll do a zero and

00:52:39,320 --> 00:52:46,830
we'll do SCMP compare and we'll say

00:52:42,240 --> 00:52:49,200
equal and if you've looked at BPF the

00:52:46,830 --> 00:52:50,970
actual assembly language you'll notice

00:52:49,200 --> 00:52:52,440
that this is very reminiscent of it in

00:52:50,970 --> 00:52:54,270
some places and there's only so much we

00:52:52,440 --> 00:52:56,400
can hide it from you unfortunately this

00:52:54,270 --> 00:53:00,150
is one spot where you kind of see some

00:52:56,400 --> 00:53:04,200
of it and I'm gonna allow a standard

00:53:00,150 --> 00:53:05,430
we'll say standard out file no I said

00:53:04,200 --> 00:53:07,920
did I get the right number and that's

00:53:05,430 --> 00:53:10,050
the right number okay so what this rule

00:53:07,920 --> 00:53:12,960
is now doing is I'm allowing the right

00:53:10,050 --> 00:53:16,290
syscall if and only if it's two standard

00:53:12,960 --> 00:53:19,140
out so if I try to write two anything

00:53:16,290 --> 00:53:21,060
else it should get blocked and in fact I

00:53:19,140 --> 00:53:23,820
should fail with a perm um so let's see

00:53:21,060 --> 00:53:27,560
what happens so we'll leave it as is

00:53:23,820 --> 00:53:27,560
right now get rid of that for the moment

00:53:28,400 --> 00:53:36,450
okay compiled let's run it okay so it's

00:53:33,480 --> 00:53:38,040
still allowed that's good um that's kind

00:53:36,450 --> 00:53:39,300
of what we were hoping for let's try to

00:53:38,040 --> 00:53:43,260
change that a little bit so let's now

00:53:39,300 --> 00:53:46,410
write the same thing to a standard error

00:53:43,260 --> 00:53:49,140
so in theory if this didn't work we

00:53:46,410 --> 00:53:50,520
should see hello world twice in theory

00:53:49,140 --> 00:53:53,400
if this did work we should see it once

00:53:50,520 --> 00:53:56,160
what happens and we only got one hello

00:53:53,400 --> 00:53:57,990
world so it blocked I'm gonna argue the

00:53:56,160 --> 00:54:01,340
second one we don't actually know let's

00:53:57,990 --> 00:54:01,340
uh let's verify that quick

00:54:03,860 --> 00:54:07,500
so as you can see it blocked the

00:54:06,060 --> 00:54:09,960
standard error once so it did go and

00:54:07,500 --> 00:54:13,190
properly process that argument say I'm

00:54:09,960 --> 00:54:20,940
only allowing standard Oh pretty cool

00:54:13,190 --> 00:54:23,880
questions on that alright now to get to

00:54:20,940 --> 00:54:26,100
I I'm going to show this just because

00:54:23,880 --> 00:54:29,010
it's annoying and sooner or later it

00:54:26,100 --> 00:54:33,330
will bite you I'm not fond of this so

00:54:29,010 --> 00:54:34,830
strings strings can be awkward again it

00:54:33,330 --> 00:54:36,540
does a pointer comparison and that

00:54:34,830 --> 00:54:38,010
pointer needs to match exactly and

00:54:36,540 --> 00:54:41,150
there's a bazillion ways that it can go

00:54:38,010 --> 00:54:44,640
wrong here's one way it can go right

00:54:41,150 --> 00:54:45,660
maybe so in this case we're gonna do

00:54:44,640 --> 00:54:49,200
we're gonna say we're gonna look at

00:54:45,660 --> 00:54:53,610
parameter a 1 this time and we're gonna

00:54:49,200 --> 00:54:55,410
do a compare equal again and I'm gonna

00:54:53,610 --> 00:54:57,360
intentionally cast this to be very

00:54:55,410 --> 00:55:00,420
careful it may work without it it may

00:54:57,360 --> 00:55:02,910
not I want guaranteed and I'm just gonna

00:55:00,420 --> 00:55:08,720
call something LSS and up here I'm gonna

00:55:02,910 --> 00:55:14,010
make a string and I will say static cost

00:55:08,720 --> 00:55:21,840
character cost and we'll say LSS N

00:55:14,010 --> 00:55:24,330
equals 2019 alright so we've created a

00:55:21,840 --> 00:55:28,440
string completely constant both the

00:55:24,330 --> 00:55:30,090
pointer and the value and I'm now saying

00:55:28,440 --> 00:55:33,090
in parameter one I'm allowing the

00:55:30,090 --> 00:55:35,310
printing of it so but we've got to print

00:55:33,090 --> 00:55:39,060
us here which are not pointing at that

00:55:35,310 --> 00:55:41,100
so these two are gonna be blocked but if

00:55:39,060 --> 00:55:43,110
we allow if we print a standard out

00:55:41,100 --> 00:55:47,750
which is the one we allowed and I say LS

00:55:43,110 --> 00:55:47,750
us we should see that

00:55:49,369 --> 00:55:59,190
on 23 oh yes thank you I'm glad you're

00:55:55,710 --> 00:56:00,150
watching and not me all right the

00:55:59,190 --> 00:56:03,989
compiled good call

00:56:00,150 --> 00:56:09,599
oh but we didn't get it all right what

00:56:03,989 --> 00:56:11,009
did we do this time so let's see and

00:56:09,599 --> 00:56:13,319
again this one isn't a trick I don't

00:56:11,009 --> 00:56:16,739
actually can't ex I don't actually know

00:56:13,319 --> 00:56:18,239
the exact answer um like I said I've

00:56:16,739 --> 00:56:22,259
been bitten by the string stuff enough

00:56:18,239 --> 00:56:28,739
that it's annoying I hate to say it I

00:56:22,259 --> 00:56:30,089
feel like Oh God he Borden is this just

00:56:28,739 --> 00:56:31,440
utterly annoying when I go the wrong way

00:56:30,089 --> 00:56:34,109
and it's all scrolling like that that's

00:56:31,440 --> 00:56:38,069
got to be horrible this should make no

00:56:34,109 --> 00:56:40,579
difference but let's see I still did not

00:56:38,069 --> 00:56:40,579
print it

00:56:44,140 --> 00:56:48,220
you know I think we're gonna astray six

00:56:45,970 --> 00:56:50,920
I don't readily see the why I would try

00:56:48,220 --> 00:56:51,760
getting rid of that cast the cast okay

00:56:50,920 --> 00:56:56,290
yeah

00:56:51,760 --> 00:56:58,360
because remember I feel like that most

00:56:56,290 --> 00:57:00,340
of you probably don't care about but we

00:56:58,360 --> 00:57:01,600
did have a bug and we changed around

00:57:00,340 --> 00:57:03,310
some of those SCMP

00:57:01,600 --> 00:57:06,970
eight zeros and the a ones to better

00:57:03,310 --> 00:57:10,900
support 32 and 64-bit and I think it

00:57:06,970 --> 00:57:12,550
might be funny with that cast and we may

00:57:10,900 --> 00:57:14,110
not I may not actually get it um it

00:57:12,550 --> 00:57:16,000
actually puked on oh that was just a

00:57:14,110 --> 00:57:19,480
warning though wasn't it let's see what

00:57:16,000 --> 00:57:21,820
happens in what that warning so this

00:57:19,480 --> 00:57:23,760
laptop I got it working on this early

00:57:21,820 --> 00:57:26,670
and I don't remember the exact syntax

00:57:23,760 --> 00:57:29,410
again though this is a good example of

00:57:26,670 --> 00:57:31,840
string matching is very very awkward um

00:57:29,410 --> 00:57:34,060
I would use it as a last resort I think

00:57:31,840 --> 00:57:35,880
a better answer would be to do the user

00:57:34,060 --> 00:57:38,440
notification stuff that recently went in

00:57:35,880 --> 00:57:39,730
use that to watch and watch you what

00:57:38,440 --> 00:57:41,740
what you want especially in something

00:57:39,730 --> 00:57:43,300
like this oh I'm gonna allow you to do

00:57:41,740 --> 00:57:45,010
standard error standard out Devon or

00:57:43,300 --> 00:57:46,870
whatever and then return back to the

00:57:45,010 --> 00:57:49,780
kernel allow that rather than trying to

00:57:46,870 --> 00:57:51,820
play this string matching game I

00:57:49,780 --> 00:57:55,060
remember what I was looking in one

00:57:51,820 --> 00:57:56,800
program and they had a string that was

00:57:55,060 --> 00:57:58,540
reproduced in it like 30 different times

00:57:56,800 --> 00:57:59,560
and so would they had they wanted to do

00:57:58,540 --> 00:58:01,690
the string matching they would have had

00:57:59,560 --> 00:58:03,010
to add 30 rules for each instance of

00:58:01,690 --> 00:58:06,730
that pointer wherever was located in

00:58:03,010 --> 00:58:09,190
their code it wasn't saying I don't

00:58:06,730 --> 00:58:12,460
really see a need go ahead there's over

00:58:09,190 --> 00:58:13,900
there Ted so I don't see a need to

00:58:12,460 --> 00:58:17,170
burrow into this rabbit hole unless you

00:58:13,900 --> 00:58:21,910
lose your hand again I didn't see sorry

00:58:17,170 --> 00:58:25,420
about that yeah is it because you're

00:58:21,910 --> 00:58:27,370
using buffered i/o and so using f printf

00:58:25,420 --> 00:58:29,080
if you did it direct right I suspect it

00:58:27,370 --> 00:58:30,820
might work it could be I swear that I

00:58:29,080 --> 00:58:32,560
had it working on this laptop you may be

00:58:30,820 --> 00:58:33,910
right like I said this is I don't want

00:58:32,560 --> 00:58:35,500
it burrow into it other than to show you

00:58:33,910 --> 00:58:37,810
that even people who play with this

00:58:35,500 --> 00:58:39,760
fairly frequently don't get it right you

00:58:37,810 --> 00:58:43,420
could immediately you could dump the Rob

00:58:39,760 --> 00:58:45,750
EPF and we could look at it who asked

00:58:43,420 --> 00:58:45,750
for later

00:58:47,870 --> 00:58:52,160
could you let's get the mic just again

00:58:50,060 --> 00:58:54,020
for the poor Schmucks on the on the

00:58:52,160 --> 00:59:00,050
phone sorry can you raise your hand

00:58:54,020 --> 00:59:01,580
again I didn't see you that was oh I was

00:59:00,050 --> 00:59:04,580
gonna say that you have two standard

00:59:01,580 --> 00:59:06,170
error still in there right I may

00:59:04,580 --> 00:59:07,940
actually that's a good question it's the

00:59:06,170 --> 00:59:10,280
reason why it's probably flunking out

00:59:07,940 --> 00:59:12,230
before oh good call yes thank you yeah

00:59:10,280 --> 00:59:13,640
so we bombed before that yeah let's uh

00:59:12,230 --> 00:59:15,760
let's in fact let's get rid of both of

00:59:13,640 --> 00:59:18,320
those I realize it doesn't matter but I

00:59:15,760 --> 00:59:23,750
think you I think you wouldn't win the

00:59:18,320 --> 00:59:31,850
prize no good try I thought I really

00:59:23,750 --> 00:59:34,610
thought you had that one so um it

00:59:31,850 --> 00:59:36,290
shouldn't be that so like I said I've

00:59:34,610 --> 00:59:38,060
tried this at home and it's been happy

00:59:36,290 --> 00:59:42,940
I'll try it that way just switching it

00:59:38,060 --> 00:59:42,940
to a pointer instead of a ray I don't so

00:59:46,270 --> 00:59:50,050
so anyway um

00:59:51,460 --> 00:59:56,559
well could you grab the Paul can you get

00:59:53,740 --> 00:59:56,950
the Mike please thank you sorry once

00:59:56,559 --> 01:00:00,880
again

00:59:56,950 --> 01:00:03,130
can you breathe yeah so there is a SCMP

01:00:00,880 --> 01:00:05,349
underscore a zero underscore 64 version

01:00:03,130 --> 01:00:07,059
of the same rule just maybe that is a

01:00:05,349 --> 01:00:10,390
problem because you are casting it to 64

01:00:07,059 --> 01:00:12,190
ah so you think I need a underscore 64

01:00:10,390 --> 01:00:13,690
on them maybe I haven't tried it yet but

01:00:12,190 --> 01:00:16,329
I think so I haven't tried it either

01:00:13,690 --> 01:00:20,010
let's see what happens yeah it shouldn't

01:00:16,329 --> 01:00:20,010
matter I'm the first one but for the a1

01:00:20,250 --> 01:00:26,859
so anyway like I said I fully expected

01:00:24,940 --> 01:00:28,990
this part of it to not work and that was

01:00:26,859 --> 01:00:33,400
not tremendously unintentional because

01:00:28,990 --> 01:00:35,890
this is well again awkward let's see

01:00:33,400 --> 01:00:39,420
other directions we want to go so we

01:00:35,890 --> 01:00:39,420
could s race this let's see what happens

01:00:39,960 --> 01:00:52,599
FF all right so let's see we got an e

01:00:51,039 --> 01:00:57,279
perm which isn't a surprise that's our

01:00:52,599 --> 01:00:59,230
default action it didn't say why if like

01:00:57,279 --> 01:01:00,789
if we wanted Paul said we could dump out

01:00:59,230 --> 01:01:03,309
the BP f that's what I would do at home

01:01:00,789 --> 01:01:07,599
but I don't know that that's age

01:01:03,309 --> 01:01:09,940
appropriate for today sorry it's not age

01:01:07,599 --> 01:01:11,289
appropriate for 4:30 either um other

01:01:09,940 --> 01:01:13,119
directions you guys when I go this was

01:01:11,289 --> 01:01:15,460
really mostly what I was thinking about

01:01:13,119 --> 01:01:18,400
covering we could add more like for

01:01:15,460 --> 01:01:19,869
example um we could allow some exits and

01:01:18,400 --> 01:01:21,579
things just to make this child fully

01:01:19,869 --> 01:01:21,970
happy obviously I'll get rid of these

01:01:21,579 --> 01:01:25,150
silly

01:01:21,970 --> 01:01:27,220
um string comparisons it's up to you

01:01:25,150 --> 01:01:31,410
guys what are you guys interested in any

01:01:27,220 --> 01:01:31,410
any where you would like to see this go

01:01:35,470 --> 01:01:39,190
who said that

01:01:41,560 --> 01:01:47,380
so you need a backslash and at the end

01:01:44,080 --> 01:01:50,170
of LSS maybe that is quite possible in

01:01:47,380 --> 01:01:52,540
fact you know what you've intrigued me

01:01:50,170 --> 01:01:56,170
enough that I will try it I thought I

01:01:52,540 --> 01:01:59,140
was done with this we thought we were

01:01:56,170 --> 01:02:01,900
done with this all right so let's add a

01:01:59,140 --> 01:02:08,020
backslash and I like that idea maybe it

01:02:01,900 --> 01:02:11,290
didn't get flushed or something oh yes I

01:02:08,020 --> 01:02:15,330
have angered it again let's see so what

01:02:11,290 --> 01:02:17,530
isn't it line 21

01:02:15,330 --> 01:02:19,270
what's on point get rid of that

01:02:17,530 --> 01:02:19,990
parentheses in the semicolon at the end

01:02:19,270 --> 01:02:22,090
of that line

01:02:19,990 --> 01:02:24,820
oh yes thank you yes yes that I had just

01:02:22,090 --> 01:02:32,260
added and now we need it too there there

01:02:24,820 --> 01:02:33,610
we go thank you Paul okay hey like I

01:02:32,260 --> 01:02:36,760
feel like that we should have a prize

01:02:33,610 --> 01:02:38,650
for this all right so get rid of the get

01:02:36,760 --> 01:02:42,330
rid of the cast do SCMP

01:02:38,650 --> 01:02:42,330
a one underscore 64

01:02:48,730 --> 01:02:54,980
so Colorado that's a very good point

01:02:51,700 --> 01:02:58,010
yeah I will say I had this work on this

01:02:54,980 --> 01:03:02,630
laptop which is change it over to a yeah

01:02:58,010 --> 01:03:05,630
change it over to right all right so

01:03:02,630 --> 01:03:09,050
maybe the problem is that because you

01:03:05,630 --> 01:03:12,800
disallowed exit and then process dies

01:03:09,050 --> 01:03:15,500
and there is no call to FF flush that's

01:03:12,800 --> 01:03:19,280
part then that is probably this is a

01:03:15,500 --> 01:03:22,940
problem yes yes like I said I didn't

01:03:19,280 --> 01:03:25,550
expect this to work syntax for right

01:03:22,940 --> 01:03:27,170
anyone handle II know it is a it's in

01:03:25,550 --> 01:03:37,550
the s trace yeah you just now you need

01:03:27,170 --> 01:03:42,950
the length at the end okay plus one and

01:03:37,550 --> 01:03:45,640
it's I mean just just oh yeah I was

01:03:42,950 --> 01:03:45,640
thinking straight one

01:03:46,180 --> 01:03:50,650
thank you

01:03:47,540 --> 01:03:52,820
this is this is what no this is good I

01:03:50,650 --> 01:04:05,510
it's more fun to hear what people come

01:03:52,820 --> 01:04:08,410
up with file no 39 thank you oh I

01:04:05,510 --> 01:04:08,410
thought that was good

01:04:09,339 --> 01:04:13,940
are you saying I should do like we had a

01:04:12,080 --> 01:04:17,089
standard out file no like I have up

01:04:13,940 --> 01:04:23,150
there I was more from the other so put

01:04:17,089 --> 01:04:28,119
one in there no all right so we got

01:04:23,150 --> 01:04:28,119
let's see a compiled ish

01:04:30,370 --> 01:04:37,300
no you wouldn't sell this code come on

01:04:43,840 --> 01:04:47,570
alright so now we're back to a more

01:04:45,800 --> 01:04:49,100
reasonable amount of warnings um

01:04:47,570 --> 01:04:53,170
again my machine doesn't like that

01:04:49,100 --> 01:04:55,610
comparison but with a hey hey good job

01:04:53,170 --> 01:05:03,470
trial by fire everybody bugged it thank

01:04:55,610 --> 01:05:05,330
you so that is a really good example

01:05:03,470 --> 01:05:07,940
though of all the various pitfalls you

01:05:05,330 --> 01:05:11,150
can face I think that was better than me

01:05:07,940 --> 01:05:11,480
just sitting here and you code yes go

01:05:11,150 --> 01:05:13,850
ahead

01:05:11,480 --> 01:05:15,920
one last example you're missing is how

01:05:13,850 --> 01:05:18,350
do I do the same thing with a messing up

01:05:15,920 --> 01:05:20,120
with my source so how do you do I write

01:05:18,350 --> 01:05:21,410
it separately and load it with a

01:05:20,120 --> 01:05:25,790
touching of my boundaries and

01:05:21,410 --> 01:05:27,620
recompiling ah gotcha um so as was asked

01:05:25,790 --> 01:05:29,480
earlier on you're gonna have to identify

01:05:27,620 --> 01:05:32,720
your Siskel's and you're gonna have to

01:05:29,480 --> 01:05:34,340
allow that um so what I would do if you

01:05:32,720 --> 01:05:36,590
want to allow if you have untrusted code

01:05:34,340 --> 01:05:37,840
you want to run in this so right here

01:05:36,590 --> 01:05:41,450
we'll go to Main

01:05:37,840 --> 01:05:43,580
so we're called we're calling we're

01:05:41,450 --> 01:05:46,250
doing call child so go up to call child

01:05:43,580 --> 01:05:48,710
and you're gonna load in your filter and

01:05:46,250 --> 01:05:50,870
then at that point you called our Cisco

01:05:48,710 --> 01:05:53,540
call that untrusted code however you do

01:05:50,870 --> 01:05:55,190
we want to get into that binary and it

01:05:53,540 --> 01:05:56,870
might be trial by fire just like we saw

01:05:55,190 --> 01:06:00,230
you might be yes tracing you might be

01:05:56,870 --> 01:06:02,510
you might be drunk draw printing out Rob

01:06:00,230 --> 01:06:05,120
UPF if you have to um we also have a not

01:06:02,510 --> 01:06:06,800
quite so unfriendly

01:06:05,120 --> 01:06:08,060
and we call it pseudo filter code where

01:06:06,800 --> 01:06:09,230
we printed out and it's more like human

01:06:08,060 --> 01:06:11,000
readable just let you know if you want

01:06:09,230 --> 01:06:14,600
to debug that as well but yeah it'll be

01:06:11,000 --> 01:06:16,070
a little bit of trial and error so yeah

01:06:14,600 --> 01:06:18,500
I don't have a glorious answer I'm sorry

01:06:16,070 --> 01:06:20,780
so I'm not what it sounded like you were

01:06:18,500 --> 01:06:21,890
trying to say or you're asking if you

01:06:20,780 --> 01:06:25,420
could do this without modifying your

01:06:21,890 --> 01:06:25,420
binaries or modifying your source

01:06:27,980 --> 01:06:37,620
okay okay so so yeah so so system D so

01:06:35,400 --> 01:06:40,400
system D you can actually just sort of

01:06:37,620 --> 01:06:44,250
like pre load your filters and then

01:06:40,400 --> 01:06:46,410
it'll just run with them and and system

01:06:44,250 --> 01:06:50,490
D has like nice little categories so you

01:06:46,410 --> 01:06:52,410
can just sort of like say no unsafe yeah

01:06:50,490 --> 01:06:54,030
I'm probably outside of my scope and I

01:06:52,410 --> 01:06:56,610
probably haven't practiced enough for

01:06:54,030 --> 01:06:57,930
that one but yes the other the other

01:06:56,610 --> 01:07:04,770
thing that you could do if you're on a

01:06:57,930 --> 01:07:06,990
system that didn't have system day the

01:07:04,770 --> 01:07:10,020
point being if you wanted to pre-compute

01:07:06,990 --> 01:07:13,770
the filters and you know write some

01:07:10,020 --> 01:07:16,680
simple little loader for your binary app

01:07:13,770 --> 01:07:19,410
which you didn't have we kind of joked

01:07:16,680 --> 01:07:21,390
about you know exporting the raw BPF lib

01:07:19,410 --> 01:07:24,270
subcon does have a provision for

01:07:21,390 --> 01:07:26,640
exporting the raw BPF so what you could

01:07:24,270 --> 01:07:29,100
do is you could write a small lips a

01:07:26,640 --> 01:07:31,980
comp tool that would generate the filter

01:07:29,100 --> 01:07:34,290
you could export the raw BPF and then

01:07:31,980 --> 01:07:37,710
take that and feed that into another

01:07:34,290 --> 01:07:40,320
small little bootstrapping shim for your

01:07:37,710 --> 01:07:45,180
other program which would load that raw

01:07:40,320 --> 01:07:48,630
BPF or the more sane way you know if you

01:07:45,180 --> 01:07:50,610
were able to compute if you had lip

01:07:48,630 --> 01:07:53,550
seccomp on the system you could just

01:07:50,610 --> 01:07:55,620
write a lip set comp program normally

01:07:53,550 --> 01:07:56,970
that would do this and then the last

01:07:55,620 --> 01:08:01,590
thing that thing would do is it would

01:07:56,970 --> 01:08:03,690
exec your program which but i guess the

01:08:01,590 --> 01:08:06,440
one GOC on that is you're gonna have to

01:08:03,690 --> 01:08:06,440
allow exactly

01:08:09,670 --> 01:08:17,569
has anyone created a s trace post

01:08:15,230 --> 01:08:20,150
processor that you could run a program

01:08:17,569 --> 01:08:22,580
on gather all the system calls all the

01:08:20,150 --> 01:08:26,800
arguments and generate the code from

01:08:22,580 --> 01:08:26,800
that what's what's your email address

01:08:27,069 --> 01:08:34,490
yeah there's there's actually been a lot

01:08:30,020 --> 01:08:36,470
of over the years slip seconds not an

01:08:34,490 --> 01:08:38,720
old project it's also not a new project

01:08:36,470 --> 01:08:42,140
and there's been several people that

01:08:38,720 --> 01:08:43,819
have come along and had various attempts

01:08:42,140 --> 01:08:47,300
at automatically generating filter

01:08:43,819 --> 01:08:50,120
either from s trace how put some people

01:08:47,300 --> 01:08:53,359
have scanned sources other people's scan

01:08:50,120 --> 01:08:56,450
binaries there's a variety of things I

01:08:53,359 --> 01:08:59,510
haven't seen or I'm not aware of a

01:08:56,450 --> 01:09:03,050
project that is properly maintained that

01:08:59,510 --> 01:09:06,080
does any sort of set comp automatic

01:09:03,050 --> 01:09:09,890
filter generation based on existing code

01:09:06,080 --> 01:09:12,109
bases but as we said that's not to say

01:09:09,890 --> 01:09:13,640
it's impossible it's definitely doable I

01:09:12,109 --> 01:09:14,089
mean I think we can all see how that

01:09:13,640 --> 01:09:16,520
would work

01:09:14,089 --> 01:09:18,380
it's just nobody stepped forward and

01:09:16,520 --> 01:09:21,970
done it outside of an academic exercise

01:09:18,380 --> 01:09:21,970
that I know of

01:09:26,570 --> 01:09:33,940
other directions other questions we got

01:09:30,350 --> 01:09:33,940
20 minutes if we want we can hack away

01:09:35,920 --> 01:09:43,670
can you talk a bit about first an easy

01:09:39,590 --> 01:09:46,700
question once the filter was loaded SEC

01:09:43,670 --> 01:09:49,220
implode can we just get rid of can we

01:09:46,700 --> 01:09:51,650
call second release at that point is the

01:09:49,220 --> 01:09:53,600
context yes yes so once it's been loaded

01:09:51,650 --> 01:09:55,010
in the kernel the context is no longer

01:09:53,600 --> 01:09:57,020
needed and you can free it whenever

01:09:55,010 --> 01:09:59,480
you're comfortable ok and my second

01:09:57,020 --> 01:10:01,430
question is what's actually happening

01:09:59,480 --> 01:10:03,650
here at what point is the filter built

01:10:01,430 --> 01:10:06,530
it's not being built as we go is it

01:10:03,650 --> 01:10:08,930
right not each rule ad is building we

01:10:06,530 --> 01:10:10,790
have a big database of instructions but

01:10:08,930 --> 01:10:13,160
they ultimately aren't put into the

01:10:10,790 --> 01:10:16,070
kernel until load we have them ready to

01:10:13,160 --> 01:10:17,390
go and built up into that context but no

01:10:16,070 --> 01:10:24,170
they're not loading the kernel until we

01:10:17,390 --> 01:10:26,900
call load thanks one more question refer

01:10:24,170 --> 01:10:30,620
regard to second please does it mean

01:10:26,900 --> 01:10:33,560
that if you call this function that it

01:10:30,620 --> 01:10:37,430
is not possible after this color restore

01:10:33,560 --> 01:10:40,670
the contexts so you're right if you call

01:10:37,430 --> 01:10:43,670
a second release after that you are not

01:10:40,670 --> 01:10:45,710
able to reconnect the context and drop

01:10:43,670 --> 01:10:48,440
their rules from from from from the

01:10:45,710 --> 01:10:49,850
kernel you cannot know it's once you

01:10:48,440 --> 01:10:52,370
load a second filter in the kernel it's

01:10:49,850 --> 01:10:53,810
there you can't get rid of it okay that

01:10:52,370 --> 01:10:55,250
process I mean cuz otherwise that would

01:10:53,810 --> 01:10:56,360
be a security hole that process and any

01:10:55,250 --> 01:10:58,790
of his children if you allow children

01:10:56,360 --> 01:11:00,800
forever will have that rule that socom

01:10:58,790 --> 01:11:02,720
filter applied to it okay

01:11:00,800 --> 01:11:05,390
thanks Alyssa and again the context is

01:11:02,720 --> 01:11:07,280
purely just our workspace our building

01:11:05,390 --> 01:11:08,930
block area where we build this up we

01:11:07,280 --> 01:11:12,050
remember some temporary state so for

01:11:08,930 --> 01:11:14,810
example again Paul mentioned earlier you

01:11:12,050 --> 01:11:17,240
can only jump like 256 BPF instructions

01:11:14,810 --> 01:11:19,400
and so sometimes while docker for

01:11:17,240 --> 01:11:21,140
example has a 300 instruction filter so

01:11:19,400 --> 01:11:22,640
if we need to go from very top down to

01:11:21,140 --> 01:11:24,320
the very bottom we may need temporary

01:11:22,640 --> 01:11:27,260
jumps in there so we can remember data

01:11:24,320 --> 01:11:28,850
like that as little placeholders and in

01:11:27,260 --> 01:11:30,500
fact one thing that we're working on is

01:11:28,850 --> 01:11:32,690
trying to speed that up by using a

01:11:30,500 --> 01:11:36,260
binary tree so instead of going oh if

01:11:32,690 --> 01:11:37,790
it's equal to 100 2 3 4 no we'll try to

01:11:36,260 --> 01:11:39,390
jump into this tree and skip through

01:11:37,790 --> 01:11:42,150
many many of the instruction

01:11:39,390 --> 01:11:45,540
on some workloads we've seen in fact

01:11:42,150 --> 01:11:49,860
some oracle ones we've seen significant

01:11:45,540 --> 01:11:52,050
improvements yeah for what its oh sorry

01:11:49,860 --> 01:11:53,760
it's just gonna say I'm walking the the

01:11:52,050 --> 01:11:55,650
current approach that Lipsett comp takes

01:11:53,760 --> 01:11:58,949
to optimizing the filter is to try and

01:11:55,650 --> 01:12:02,540
get a very high return density at the

01:11:58,949 --> 01:12:05,690
top of the filter the thought being met

01:12:02,540 --> 01:12:10,020
think you're returned quickly basically

01:12:05,690 --> 01:12:14,580
but there is also a capability set comp

01:12:10,020 --> 01:12:17,910
syscall int or priority you can give

01:12:14,580 --> 01:12:20,070
Lipsett comm some information if you

01:12:17,910 --> 01:12:22,350
know if you've got a very i/o intensive

01:12:20,070 --> 01:12:24,449
thing you do lots of reads and writes

01:12:22,350 --> 01:12:26,219
you can you know tell it to give a

01:12:24,449 --> 01:12:27,900
higher priority that it will move that

01:12:26,219 --> 01:12:32,969
closer to the top so that you'll have

01:12:27,900 --> 01:12:35,280
less less jumps higher cache hits when

01:12:32,969 --> 01:12:37,530
you're doing these programs can you have

01:12:35,280 --> 01:12:38,760
some rules that are more general that

01:12:37,530 --> 01:12:41,580
might be an allow and then a more

01:12:38,760 --> 01:12:44,610
specific one that's a reject we're

01:12:41,580 --> 01:12:46,560
ordering would actually matter or is

01:12:44,610 --> 01:12:48,630
that something that's like not really

01:12:46,560 --> 01:12:51,320
encouraged because it sounds like for

01:12:48,630 --> 01:12:53,760
optimization purposes you want to allow

01:12:51,320 --> 01:12:57,000
Lipsett comp to be able to freely

01:12:53,760 --> 01:13:00,239
reorder rules but that implies that the

01:12:57,000 --> 01:13:03,390
rules can't be you know order sensitive

01:13:00,239 --> 01:13:05,670
as so in theory yes you could do because

01:13:03,390 --> 01:13:07,530
obviously BPF will allow you to do

01:13:05,670 --> 01:13:09,090
greater than comparisons less than

01:13:07,530 --> 01:13:11,160
comparisons greater than equal you know

01:13:09,090 --> 01:13:13,560
all the all the standard stuff we

01:13:11,160 --> 01:13:16,140
currently are doing if it equals equals

01:13:13,560 --> 01:13:18,180
whatever sis call you specified do what

01:13:16,140 --> 01:13:20,250
you specified in theory that be possible

01:13:18,180 --> 01:13:21,719
I can't imagine that would be easy to

01:13:20,250 --> 01:13:24,540
build up programmatically though I'd

01:13:21,719 --> 01:13:25,860
feel bad for the person who had to build

01:13:24,540 --> 01:13:30,239
that but yeah in theory that's possible

01:13:25,860 --> 01:13:31,590
right now we don't do it I mean there's

01:13:30,239 --> 01:13:33,840
always going to be some cases where

01:13:31,590 --> 01:13:35,489
somebody's got a very specific filter

01:13:33,840 --> 01:13:39,600
and they're very performance sensitive

01:13:35,489 --> 01:13:42,300
and I would say Lipsett comp is probably

01:13:39,600 --> 01:13:43,620
not for them you know we're for ninety

01:13:42,300 --> 01:13:45,420
percent you know eighty percent of the

01:13:43,620 --> 01:13:47,219
people out there trying to make this

01:13:45,420 --> 01:13:49,850
more accessible and more available to

01:13:47,219 --> 01:13:49,850
application

01:13:50,060 --> 01:13:54,480
exactly you know I mean my guess is if

01:13:52,710 --> 01:13:57,210
you're if you're that performance

01:13:54,480 --> 01:13:59,460
sensitive you're you know having to

01:13:57,210 --> 01:14:03,090
learn BPF is not the worst thing you've

01:13:59,460 --> 01:14:04,620
had to do in your job so yeah so there's

01:14:03,090 --> 01:14:07,400
always going to be some cases where

01:14:04,620 --> 01:14:09,960
we're just gonna tell you you know hey

01:14:07,400 --> 01:14:11,430
write the Robie PFF I mean we'll help

01:14:09,960 --> 01:14:14,910
you I mean because we've spent a lot of

01:14:11,430 --> 01:14:17,580
time staring at vpf but Lipsett comp is

01:14:14,910 --> 01:14:20,430
not going to be the tool for everybody

01:14:17,580 --> 01:14:22,460
and we've also I I know there's been a

01:14:20,430 --> 01:14:24,780
couple projects that have decided that

01:14:22,460 --> 01:14:26,490
they didn't why you slip second because

01:14:24,780 --> 01:14:29,130
they didn't want another dependency and

01:14:26,490 --> 01:14:31,370
that's that's perfectly fine too and

01:14:29,130 --> 01:14:33,450
that we actually we have an issue open

01:14:31,370 --> 01:14:38,100
you know we talked about you know

01:14:33,450 --> 01:14:39,930
developing a BPF filter outside of it

01:14:38,100 --> 01:14:42,240
and load in separately one of the things

01:14:39,930 --> 01:14:44,130
I'd like to do at some point is develop

01:14:42,240 --> 01:14:44,700
a BPF filter into basically a header

01:14:44,130 --> 01:14:46,230
file

01:14:44,700 --> 01:14:47,760
let's see header file that you could

01:14:46,230 --> 01:14:49,560
just include in so if you didn't want

01:14:47,760 --> 01:14:51,150
the dependency you could still have the

01:14:49,560 --> 01:14:54,360
benefits and do it that way and there

01:14:51,150 --> 01:14:58,200
there's other things as well but the one

01:14:54,360 --> 01:15:01,290
thing I will say is it was in the eye

01:14:58,200 --> 01:15:03,150
chart slide there's some boilerplate and

01:15:01,290 --> 01:15:06,000
some other stuff that Lipsett comm takes

01:15:03,150 --> 01:15:09,000
care of for you yeah like see it's line

01:15:06,000 --> 01:15:09,990
three and four out there but anyway no

01:15:09,000 --> 01:15:14,460
there's certain things like luke

01:15:09,990 --> 01:15:17,160
concubine x86 64 you have to be careful

01:15:14,460 --> 01:15:18,920
about X 32 you have to be careful about

01:15:17,160 --> 01:15:22,230
x86

01:15:18,920 --> 01:15:23,970
there's also I think I think a lot of

01:15:22,230 --> 01:15:25,350
people who write rob EPF get that wrong

01:15:23,970 --> 01:15:27,840
and they leave themselves vulnerable

01:15:25,350 --> 01:15:29,940
because they're not taking care to do

01:15:27,840 --> 01:15:31,830
that there's also annoying little things

01:15:29,940 --> 01:15:33,780
when you start talking about P tracing

01:15:31,830 --> 01:15:36,750
and allowing the negative one syscall

01:15:33,780 --> 01:15:38,610
there's stuff about that there's also

01:15:36,750 --> 01:15:40,350
other ABI weirdness if anybody's

01:15:38,610 --> 01:15:42,660
familiar with the socket and the IPC

01:15:40,350 --> 01:15:45,120
system calls on x86 you know they're

01:15:42,660 --> 01:15:48,330
multiplexed except a few revisions ago

01:15:45,120 --> 01:15:49,920
we now got the direct wired versions so

01:15:48,330 --> 01:15:53,670
you have to make sure that when you're

01:15:49,920 --> 01:15:56,640
writing filters for x86 that you support

01:15:53,670 --> 01:15:59,370
both the multiplexed versions as well as

01:15:56,640 --> 01:15:59,949
the direct wired versions otherwise you

01:15:59,370 --> 01:16:02,199
could add this

01:15:59,949 --> 01:16:04,030
real fun situation where it fails on

01:16:02,199 --> 01:16:05,139
some kernels but works on others and

01:16:04,030 --> 01:16:07,929
you're trying to figure out why is that

01:16:05,139 --> 01:16:09,429
well because on the newer one G ellipses

01:16:07,929 --> 01:16:13,179
calling the direct wired version so

01:16:09,429 --> 01:16:15,729
there's a lot of gotchas in here that

01:16:13,179 --> 01:16:18,219
Lipsett comp just takes care of for you

01:16:15,729 --> 01:16:21,489
so you don't have to worry about it but

01:16:18,219 --> 01:16:22,809
if you're going your own way you have to

01:16:21,489 --> 01:16:27,119
be careful of otherwise you're going to

01:16:22,809 --> 01:16:29,199
have some really weird air conditions

01:16:27,119 --> 01:16:31,619
you know Paul you have a question in

01:16:29,199 --> 01:16:34,780
front I'm sorry

01:16:31,619 --> 01:16:37,719
so does that mean there's a hypothetical

01:16:34,780 --> 01:16:40,719
future where lib sitcom could be

01:16:37,719 --> 01:16:45,099
replaced by just a compile-time tool

01:16:40,719 --> 01:16:47,679
that converts from this lib comp to rob

01:16:45,099 --> 01:16:50,199
EPF or are there other things that libs

01:16:47,679 --> 01:16:54,010
that calm handles at runtime that can't

01:16:50,199 --> 01:16:55,690
be replaced so I think there's one thing

01:16:54,010 --> 01:16:58,269
at compile time you don't necessarily

01:16:55,690 --> 01:17:00,429
know what system you're running on so

01:16:58,269 --> 01:17:02,590
you don't know the kernel support and

01:17:00,429 --> 01:17:05,229
you don't necessarily know the api's

01:17:02,590 --> 01:17:06,639
they're being supported right so those

01:17:05,229 --> 01:17:10,630
are only things that you're ever gonna

01:17:06,639 --> 01:17:11,769
be able own or at runtime but I mean at

01:17:10,630 --> 01:17:16,119
the end of the day it's all just

01:17:11,769 --> 01:17:17,409
software right I mean there's no you can

01:17:16,119 --> 01:17:19,510
look at the sources for a little second

01:17:17,409 --> 01:17:21,159
right I mean you know I always hesitate

01:17:19,510 --> 01:17:22,809
when it comes to software to say no you

01:17:21,159 --> 01:17:24,699
can't do that because somebody there's a

01:17:22,809 --> 01:17:28,269
lot of smart people out there that do

01:17:24,699 --> 01:17:30,489
really clever things but yeah there

01:17:28,269 --> 01:17:34,139
there is runtime stuff that that goes on

01:17:30,489 --> 01:17:34,139
that would be difficult to do a built in

01:17:49,670 --> 01:17:56,360
from an embedded perspective let's say I

01:17:52,730 --> 01:17:59,510
wanted to run busybox

01:17:56,360 --> 01:18:02,780
with live se comp for a very small

01:17:59,510 --> 01:18:05,270
number of applications because busybox

01:18:02,780 --> 01:18:09,410
would basically be Mayan it is there any

01:18:05,270 --> 01:18:11,120
be cams for how to do that or am I kind

01:18:09,410 --> 01:18:15,590
of gonna be left blazing my own trail

01:18:11,120 --> 01:18:16,790
there I don't know Paul yeah so that's

01:18:15,590 --> 01:18:20,570
the interesting point because you've got

01:18:16,790 --> 01:18:22,700
a shared library right so without having

01:18:20,570 --> 01:18:24,770
looked at the busybox sources I'm gonna

01:18:22,700 --> 01:18:26,870
make some assumptions that you basically

01:18:24,770 --> 01:18:29,240
got some sort of selector at the top

01:18:26,870 --> 01:18:30,860
that says how was I called and then it

01:18:29,240 --> 01:18:33,470
goes off and calls a function which

01:18:30,860 --> 01:18:35,420
basically does okay so I think in that

01:18:33,470 --> 01:18:37,490
particular case you could do very

01:18:35,420 --> 01:18:39,470
similar to what we saw Tom do where he

01:18:37,490 --> 01:18:41,090
created the child you know the call

01:18:39,470 --> 01:18:43,490
child function and then he actually

01:18:41,090 --> 01:18:46,040
loaded the filter in the call child what

01:18:43,490 --> 01:18:47,210
I would almost recommend doing is you

01:18:46,040 --> 01:18:48,530
know doing that same thing where you

01:18:47,210 --> 01:18:52,280
have that function which basically

01:18:48,530 --> 01:18:54,890
emulates LS for example I'm just tossing

01:18:52,280 --> 01:18:57,290
one out you'd go ahead and you'd write

01:18:54,890 --> 01:18:58,940
the filter just in that code you know

01:18:57,290 --> 01:19:00,560
just in that function that handled LS

01:18:58,940 --> 01:19:03,110
and that way you could target specific

01:19:00,560 --> 01:19:03,710
functionality that would be my

01:19:03,110 --> 01:19:07,300
suggestion

01:19:03,710 --> 01:19:09,320
but there's probably other ways too and

01:19:07,300 --> 01:19:13,220
I just want to say like if you have

01:19:09,320 --> 01:19:17,330
questions like that beyond today feel

01:19:13,220 --> 01:19:20,750
free to bring it up on the lips comm

01:19:17,330 --> 01:19:24,560
mailing list file an issue in github

01:19:20,750 --> 01:19:26,030
we're more than happy to to help out on

01:19:24,560 --> 01:19:27,380
the on the caller side I mean obviously

01:19:26,030 --> 01:19:31,390
we're not going to be experts in your

01:19:27,380 --> 01:19:31,390
application but we'll do our best

01:19:31,930 --> 01:19:37,730
go bindings for lips a comp

01:19:34,580 --> 01:19:40,640
automatically whitelist the system calls

01:19:37,730 --> 01:19:45,080
that the go runtime makes for you that

01:19:40,640 --> 01:19:49,250
aren't under your control so the go

01:19:45,080 --> 01:19:53,330
bindings I believe do not and I would

01:19:49,250 --> 01:19:54,950
actually so i responsibility for the go

01:19:53,330 --> 01:19:56,330
bindings is somebody else I kind of

01:19:54,950 --> 01:19:59,600
kicked that off because I'm not a go

01:19:56,330 --> 01:20:02,150
expert and he was much better at than I

01:19:59,600 --> 01:20:02,970
was so that's why he's doing it but I

01:20:02,150 --> 01:20:05,520
would kind of

01:20:02,970 --> 01:20:08,220
recommend against that just because I

01:20:05,520 --> 01:20:09,360
don't like having default rules like

01:20:08,220 --> 01:20:12,720
that because if the implementation

01:20:09,360 --> 01:20:18,390
changes you know then and whatnot but

01:20:12,720 --> 01:20:20,100
there are also under github comp we have

01:20:18,390 --> 01:20:22,860
a few other projects Lib comp is the

01:20:20,100 --> 01:20:25,590
main one that's got to see the Python

01:20:22,860 --> 01:20:28,500
there's also the golang bindings there's

01:20:25,590 --> 01:20:32,070
an artwork repository there's there's

01:20:28,500 --> 01:20:33,360
also a go container I'm just going to

01:20:32,070 --> 01:20:35,880
call it toolkit for lack of a better

01:20:33,360 --> 01:20:38,010
term and that does have some defaults

01:20:35,880 --> 01:20:43,500
specifically for container engines and

01:20:38,010 --> 01:20:46,070
whatnot so yeah it's best I can answer

01:20:43,500 --> 01:20:46,070
that probably

01:20:53,150 --> 01:20:56,200
other thoughts

01:20:58,590 --> 01:21:02,489
all right well how about a big thanks

01:21:00,179 --> 01:21:03,840
for Tom for standing up and fielding

01:21:02,489 --> 01:21:08,560
plays I'm gonna cry

01:21:03,840 --> 01:21:08,560

YouTube URL: https://www.youtube.com/watch?v=6lRHK_LLUGI


