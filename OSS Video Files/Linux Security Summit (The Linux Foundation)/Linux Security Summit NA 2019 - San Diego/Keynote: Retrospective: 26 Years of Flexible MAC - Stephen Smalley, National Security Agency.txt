Title: Keynote: Retrospective: 26 Years of Flexible MAC - Stephen Smalley, National Security Agency
Publication date: 2019-08-28
Playlist: Linux Security Summit NA 2019 - San Diego
Description: 
	Keynote: Retrospective: 26 Years of Flexible MAC - Stephen Smalley, National Security Agency

For the past 26 years, the speaker has been engaged in the design, implementation, technology transfer, and application of flexible Mandatory Access Control (MAC). In this talk, he describes the history and lessons learned from this body of work. The background and motivation for MAC is first presented, followed by a discussion of how a flexible MAC architecture was created and matured through a series of research systems. The work to bring this architecture to mainstream systems is then described, along with how the architecture and implementation evolved. The experience with applying this architecture to mobile platforms is examined. The role of MAC in a larger system architecture is reviewed in the context of a secure virtualization system. The state of MAC in mainstream systems is compared before and after our work. Work to bring MAC to emerging operating systems is discussed.
Captions: 
	00:00:00,030 --> 00:00:06,779
thank you James yes so James mentioned

00:00:03,380 --> 00:00:09,330
I've been working with the NSA for a

00:00:06,779 --> 00:00:11,130
little over 26 years now and in that

00:00:09,330 --> 00:00:13,200
time I've been involved in designing

00:00:11,130 --> 00:00:15,440
implementing flexible mandatory access

00:00:13,200 --> 00:00:17,369
control or Mac architectures

00:00:15,440 --> 00:00:18,900
transferring those architectures to

00:00:17,369 --> 00:00:21,359
mainstream operating systems and

00:00:18,900 --> 00:00:22,680
applying them to solve various problems

00:00:21,359 --> 00:00:24,570
in addition to other research and

00:00:22,680 --> 00:00:26,670
development so today I'm going to be

00:00:24,570 --> 00:00:28,230
providing some of the history and

00:00:26,670 --> 00:00:30,300
lessons learned from that body of

00:00:28,230 --> 00:00:33,480
research as well as looking at some

00:00:30,300 --> 00:00:37,230
areas of future exploration and some

00:00:33,480 --> 00:00:38,340
residual challenges I also be providing

00:00:37,230 --> 00:00:40,579
a little bit of the background and

00:00:38,340 --> 00:00:42,840
motivation for mandatory acts control

00:00:40,579 --> 00:00:48,180
including some work that predates my own

00:00:42,840 --> 00:00:51,870
involvement that started in 1993 so many

00:00:48,180 --> 00:00:54,390
of you are probably aware that if you

00:00:51,870 --> 00:00:56,940
have an Android based device released

00:00:54,390 --> 00:00:59,670
any time recently that it's actually

00:00:56,940 --> 00:01:01,949
using a security framework that was

00:00:59,670 --> 00:01:05,549
originally developed by NSA and actually

00:01:01,949 --> 00:01:07,760
running codes which I wrote and so are

00:01:05,549 --> 00:01:11,340
many of the Linux systems in use today

00:01:07,760 --> 00:01:14,580
what's not as widely known although it's

00:01:11,340 --> 00:01:16,229
no secret is that all iOS devices are

00:01:14,580 --> 00:01:18,420
also leveraging a security framework

00:01:16,229 --> 00:01:20,159
that originated out of the same body of

00:01:18,420 --> 00:01:21,810
research and development whose

00:01:20,159 --> 00:01:23,970
development was sponsored by NSA's

00:01:21,810 --> 00:01:25,680
research organization and that same

00:01:23,970 --> 00:01:28,350
framework can also be found in Mac OS

00:01:25,680 --> 00:01:30,390
and FreeBSD systems today so today we'll

00:01:28,350 --> 00:01:31,799
be talking a bit about how we got to

00:01:30,390 --> 00:01:34,710
that point where these security

00:01:31,799 --> 00:01:38,790
frameworks and architectures became so

00:01:34,710 --> 00:01:40,590
widely deployed so the organization I

00:01:38,790 --> 00:01:42,030
worked for within the NSA at the

00:01:40,590 --> 00:01:44,310
laboratory for advanced cybersecurity

00:01:42,030 --> 00:01:46,470
research is tasked with performing

00:01:44,310 --> 00:01:49,950
research and development in support of

00:01:46,470 --> 00:01:52,380
NSA's mission to support the goal of

00:01:49,950 --> 00:01:54,479
protecting what's been deemed national

00:01:52,380 --> 00:01:56,310
security information the national

00:01:54,479 --> 00:01:58,649
security information systems that is

00:01:56,310 --> 00:02:01,530
information information systems critical

00:01:58,649 --> 00:02:03,409
to the defense of the nation and that

00:02:01,530 --> 00:02:05,399
includes both classified data and other

00:02:03,409 --> 00:02:08,310
matters that are relevant to national

00:02:05,399 --> 00:02:09,869
security our organization was originally

00:02:08,310 --> 00:02:11,849
carved out of what was known as the

00:02:09,869 --> 00:02:12,560
national computer security Center the

00:02:11,849 --> 00:02:14,450
NCS

00:02:12,560 --> 00:02:16,370
that originally published the trusted

00:02:14,450 --> 00:02:20,150
computer systems evaluation criteria or

00:02:16,370 --> 00:02:21,170
the orange book back in 1990 and so

00:02:20,150 --> 00:02:23,209
we'll be celebrating our 30th

00:02:21,170 --> 00:02:26,030
anniversary as a separate organization

00:02:23,209 --> 00:02:27,980
with an NSA next year our particular

00:02:26,030 --> 00:02:30,290
team within this research organization

00:02:27,980 --> 00:02:33,020
was the first at NSA and probably within

00:02:30,290 --> 00:02:34,520
the intelligence community at large to

00:02:33,020 --> 00:02:37,730
create and release open source software

00:02:34,520 --> 00:02:39,350
in the form of sa Linux Mac in 2000 but

00:02:37,730 --> 00:02:41,030
even before SEO Linux we had been

00:02:39,350 --> 00:02:43,100
engaged in unclassified research and

00:02:41,030 --> 00:02:44,720
development with universities and other

00:02:43,100 --> 00:02:47,480
external research partners for many

00:02:44,720 --> 00:02:49,760
years since the release of SEO Linux

00:02:47,480 --> 00:02:51,650
we've gone on to a long history of open

00:02:49,760 --> 00:02:54,650
source collaboration and contribution

00:02:51,650 --> 00:02:59,510
touching many different systems some of

00:02:54,650 --> 00:03:01,880
which we'll discuss today so originally

00:02:59,510 --> 00:03:03,410
the motivation underlying our work was

00:03:01,880 --> 00:03:04,730
the inadequacy of the protection

00:03:03,410 --> 00:03:07,130
mechanisms of mainstream operating

00:03:04,730 --> 00:03:08,840
systems and in particular their

00:03:07,130 --> 00:03:10,489
inability to support higher level

00:03:08,840 --> 00:03:12,920
security goals due to the weak

00:03:10,489 --> 00:03:14,720
mechanisms they provided and a

00:03:12,920 --> 00:03:16,610
particular note of these protection

00:03:14,720 --> 00:03:18,380
mechanisms mainstream operating systems

00:03:16,610 --> 00:03:21,079
of the day lacked what's known as

00:03:18,380 --> 00:03:22,100
mandatory access control mechanisms they

00:03:21,079 --> 00:03:23,870
only provided what are known as

00:03:22,100 --> 00:03:26,810
discretionary access control mechanisms

00:03:23,870 --> 00:03:28,280
or DAC and Mac is fundamentally

00:03:26,810 --> 00:03:30,200
necessary in order to address what's

00:03:28,280 --> 00:03:31,549
known as the confinement problem a

00:03:30,200 --> 00:03:34,400
fundamental problem that was identified

00:03:31,549 --> 00:03:36,980
by Butler Lampson back in 1973 and

00:03:34,400 --> 00:03:39,079
subsequently revisited that is ensuring

00:03:36,980 --> 00:03:43,100
that a program cannot leak a user's data

00:03:39,079 --> 00:03:44,480
and violation of the intent while Mac

00:03:43,100 --> 00:03:46,760
was originally focused on the data

00:03:44,480 --> 00:03:48,650
leakage problem over time it's been

00:03:46,760 --> 00:03:50,299
generalized to encompass the bounding

00:03:48,650 --> 00:03:52,519
the damage that can be caused by flawed

00:03:50,299 --> 00:03:54,019
or malicious applications to include

00:03:52,519 --> 00:03:57,980
both confidentiality and integrity

00:03:54,019 --> 00:04:00,019
concerns Mac is a fundamental mechanism

00:03:57,980 --> 00:04:02,600
to being able to enforce system-wide

00:04:00,019 --> 00:04:05,120
security properties across everything

00:04:02,600 --> 00:04:06,980
running on a system including not only

00:04:05,120 --> 00:04:09,049
information flow goals as originally

00:04:06,980 --> 00:04:11,750
conceived but also things such as

00:04:09,049 --> 00:04:13,970
enforcing code and data separation or

00:04:11,750 --> 00:04:15,709
enforcing the desired architecture and

00:04:13,970 --> 00:04:18,829
interrelationships among the software

00:04:15,709 --> 00:04:20,750
components a key motivating aspect for

00:04:18,829 --> 00:04:23,240
Mac is enabling one to gain confidence

00:04:20,750 --> 00:04:24,770
or assurance that a set of security

00:04:23,240 --> 00:04:25,250
goals are being met by a computing

00:04:24,770 --> 00:04:27,740
system

00:04:25,250 --> 00:04:29,630
in a particular Mac was early on

00:04:27,740 --> 00:04:31,940
required for the higher levels of

00:04:29,630 --> 00:04:33,950
evaluation criteria although its

00:04:31,940 --> 00:04:36,860
usefulness spans far beyond just those

00:04:33,950 --> 00:04:38,960
limited use cases one of the benefits

00:04:36,860 --> 00:04:41,750
that Mac brings to a system is simply

00:04:38,960 --> 00:04:44,780
providing visibility into and control

00:04:41,750 --> 00:04:46,580
over the complex interactions of modern

00:04:44,780 --> 00:04:48,530
software systems which are often

00:04:46,580 --> 00:04:53,090
implicit and ill understood even by

00:04:48,530 --> 00:04:55,480
their developers Mac has been variously

00:04:53,090 --> 00:04:57,650
defined and implemented over the years

00:04:55,480 --> 00:04:59,960
but there are three key properties that

00:04:57,650 --> 00:05:02,330
we believe are crucial to any Mac system

00:04:59,960 --> 00:05:04,010
not all systems claiming to provide Mac

00:05:02,330 --> 00:05:06,710
can meet all three properties in fact

00:05:04,010 --> 00:05:08,450
many only provide the first the first

00:05:06,710 --> 00:05:10,220
property is that a Mac system enforces

00:05:08,450 --> 00:05:12,500
an administrative Lee to find security

00:05:10,220 --> 00:05:14,120
policy and is not subject to

00:05:12,500 --> 00:05:17,000
manipulation by users or their

00:05:14,120 --> 00:05:18,820
applications this is key to ensuring

00:05:17,000 --> 00:05:20,960
that the security policy is not

00:05:18,820 --> 00:05:23,570
susceptible to flawed or malicious

00:05:20,960 --> 00:05:26,270
applications or to careless or malicious

00:05:23,570 --> 00:05:28,520
users in some systems not even the

00:05:26,270 --> 00:05:30,800
administrator can change the Mac policy

00:05:28,520 --> 00:05:33,800
it may be fixed by the system builder as

00:05:30,800 --> 00:05:35,540
an Android for example the second key

00:05:33,800 --> 00:05:37,010
property of a Mac system is that it

00:05:35,540 --> 00:05:38,990
provides control over all of the

00:05:37,010 --> 00:05:41,720
subjects objects and operations of the

00:05:38,990 --> 00:05:44,900
system by subjects we mean an active

00:05:41,720 --> 00:05:46,850
entity such as a running process and

00:05:44,900 --> 00:05:50,240
this is crucial to ensuring that the

00:05:46,850 --> 00:05:52,910
system provides complete mediation and

00:05:50,240 --> 00:05:56,390
that the policy cannot be bypassed or

00:05:52,910 --> 00:05:57,770
violated in any way in our view even the

00:05:56,390 --> 00:06:00,650
privileges of the system should be

00:05:57,770 --> 00:06:03,050
encompassed by the Mac mechanism so that

00:06:00,650 --> 00:06:05,210
the full protection state of the system

00:06:03,050 --> 00:06:07,100
is represented in the Mac policy

00:06:05,210 --> 00:06:08,810
including even the protection of the

00:06:07,100 --> 00:06:11,840
privileged subjects which is often

00:06:08,810 --> 00:06:14,870
crucial to providing the system with its

00:06:11,840 --> 00:06:17,000
security guarantees the last property is

00:06:14,870 --> 00:06:19,010
that a Mac system enforces its secure

00:06:17,000 --> 00:06:21,560
decisions based on security labels or

00:06:19,010 --> 00:06:24,280
attributes associated with the subjects

00:06:21,560 --> 00:06:26,900
and objects involved in the operation

00:06:24,280 --> 00:06:28,820
the security labels embody all of the

00:06:26,900 --> 00:06:30,830
security relevant properties of the

00:06:28,820 --> 00:06:32,810
subject or object in question that are

00:06:30,830 --> 00:06:34,610
important to the policy and they have to

00:06:32,810 --> 00:06:35,750
be bound to the subject and object in a

00:06:34,610 --> 00:06:37,790
trustworthy way

00:06:35,750 --> 00:06:39,290
this property is crucial to ensuring

00:06:37,790 --> 00:06:41,570
that security decisions are based upon

00:06:39,290 --> 00:06:44,690
accurate and complete information and

00:06:41,570 --> 00:06:46,460
the use of these labels enables the

00:06:44,690 --> 00:06:48,800
policy to be organized into security

00:06:46,460 --> 00:06:51,320
equivalence classes which facilitates

00:06:48,800 --> 00:06:57,200
scalability and analysis the goals are

00:06:51,320 --> 00:06:59,300
being met historically traditional Mac

00:06:57,200 --> 00:07:01,190
implementations were limited to a set of

00:06:59,300 --> 00:07:02,510
fixed security policy models derived

00:07:01,190 --> 00:07:05,450
from government rules for handling

00:07:02,510 --> 00:07:07,040
classified documents originally there

00:07:05,450 --> 00:07:09,290
was the bail loop agile model developed

00:07:07,040 --> 00:07:11,360
in the 1970s there was a representation

00:07:09,290 --> 00:07:12,860
of the government's multi-level security

00:07:11,360 --> 00:07:14,150
model for protecting these classified

00:07:12,860 --> 00:07:16,000
documents and ensuring that they

00:07:14,150 --> 00:07:18,320
couldn't be leaked

00:07:16,000 --> 00:07:20,030
subsequently Bible introduced an

00:07:18,320 --> 00:07:22,550
integrity model that was the dual of

00:07:20,030 --> 00:07:25,850
this to protect against tainting of data

00:07:22,550 --> 00:07:27,680
from low integrity sources just as these

00:07:25,850 --> 00:07:30,380
traditional max schemes had thick

00:07:27,680 --> 00:07:32,360
security policy models they also had

00:07:30,380 --> 00:07:35,600
security labels that were specific to

00:07:32,360 --> 00:07:38,440
these fixed models and directly included

00:07:35,600 --> 00:07:40,490
certain aspects of the policy

00:07:38,440 --> 00:07:41,960
traditional Mac implementations were

00:07:40,490 --> 00:07:44,240
historically limited to a separate set

00:07:41,960 --> 00:07:45,350
of trusted operating systems there were

00:07:44,240 --> 00:07:47,240
a small number of high assurance

00:07:45,350 --> 00:07:49,010
operating systems with very limited

00:07:47,240 --> 00:07:53,000
functionality and application support

00:07:49,010 --> 00:07:55,640
and then there were a variety of trusted

00:07:53,000 --> 00:07:57,440
variants of the mainstream UNIX products

00:07:55,640 --> 00:07:58,970
that incorporated mandatory acts control

00:07:57,440 --> 00:08:01,400
and other trusted operating system

00:07:58,970 --> 00:08:03,110
features these two tended to lag behind

00:08:01,400 --> 00:08:08,810
their mainstream cousins in terms of

00:08:03,110 --> 00:08:10,729
updates features and support traditional

00:08:08,810 --> 00:08:12,740
Mac suffered from a number of gaps the

00:08:10,729 --> 00:08:16,010
limited both its flexibility and its

00:08:12,740 --> 00:08:18,020
security first in any real-world system

00:08:16,010 --> 00:08:19,820
there was a need to violate these fixed

00:08:18,020 --> 00:08:22,430
security policy models for specific

00:08:19,820 --> 00:08:24,560
processing this then required so-called

00:08:22,430 --> 00:08:27,680
trusted subjects that could violate the

00:08:24,560 --> 00:08:29,120
security model further these Mac systems

00:08:27,680 --> 00:08:31,100
lacked any means of effectively

00:08:29,120 --> 00:08:32,810
confining these trusted subjects to only

00:08:31,100 --> 00:08:35,060
the minimum access required for their

00:08:32,810 --> 00:08:37,219
legitimate function and to protect them

00:08:35,060 --> 00:08:40,219
from influenced by untrusted subjects in

00:08:37,219 --> 00:08:42,159
the system this created a situation much

00:08:40,219 --> 00:08:44,690
like the superuser problem in UNIX

00:08:42,159 --> 00:08:46,010
enabling the system to be violated

00:08:44,690 --> 00:08:49,040
through any flaw and any of these

00:08:46,010 --> 00:08:49,400
trusted subjects this binary nation of

00:08:49,040 --> 00:08:51,050
trust

00:08:49,400 --> 00:08:54,050
was ill-suited deconstructing secure

00:08:51,050 --> 00:08:56,300
systems further since traditional Mac

00:08:54,050 --> 00:08:58,880
had a fixed security policy model

00:08:56,300 --> 00:09:01,310
focused on originally the multi-level

00:08:58,880 --> 00:09:03,320
security goals it couldn't express many

00:09:01,310 --> 00:09:07,610
real-world security goals of interest to

00:09:03,320 --> 00:09:08,930
the commercial sector lastly because

00:09:07,610 --> 00:09:11,360
these traditional Mac schemes were

00:09:08,930 --> 00:09:13,070
focused on information flow for

00:09:11,360 --> 00:09:15,050
confidentiality and integrity purposes

00:09:13,070 --> 00:09:16,850
they generally ignored the particular

00:09:15,050 --> 00:09:18,380
program or code those being executed

00:09:16,850 --> 00:09:20,300
there were only really interested

00:09:18,380 --> 00:09:22,670
ensuring that a process couldn't leak

00:09:20,300 --> 00:09:24,350
data in violation of a security goal or

00:09:22,670 --> 00:09:26,360
that it couldn't be tainted by lower

00:09:24,350 --> 00:09:28,760
integrity data irrespective of what code

00:09:26,360 --> 00:09:30,320
was being executed while this was

00:09:28,760 --> 00:09:32,330
sufficient for the information flow

00:09:30,320 --> 00:09:34,100
goals that were originally conceived it

00:09:32,330 --> 00:09:38,990
was inadequate for many integrity or

00:09:34,100 --> 00:09:40,520
lease privilege goals of interest type

00:09:38,990 --> 00:09:41,900
enforcement was a Mac model that was

00:09:40,520 --> 00:09:43,670
originally introduced to address the

00:09:41,900 --> 00:09:46,030
failings of the Bible integrity model

00:09:43,670 --> 00:09:48,800
and other hierarchical integrity schemes

00:09:46,030 --> 00:09:51,140
in particular type enforcement was

00:09:48,800 --> 00:09:53,300
designed to support enforcing desired

00:09:51,140 --> 00:09:56,330
software architectural goals through the

00:09:53,300 --> 00:09:58,640
use of assured pipelines in an assured

00:09:56,330 --> 00:09:59,960
pipeline type enforcement is employed to

00:09:58,640 --> 00:10:01,730
ensure that one or more security

00:09:59,960 --> 00:10:03,410
relevant subsystems such as an

00:10:01,730 --> 00:10:05,840
encryption transform or a data

00:10:03,410 --> 00:10:08,360
sanitization transform is under bite

00:10:05,840 --> 00:10:10,490
passable and tamper proof and is bound

00:10:08,360 --> 00:10:14,300
to specific code approved for that

00:10:10,490 --> 00:10:16,100
particular function as a model type

00:10:14,300 --> 00:10:18,410
enforcement supports more than just

00:10:16,100 --> 00:10:20,180
integrity it's generalizable to enforce

00:10:18,410 --> 00:10:22,820
many other kinds of security goals as

00:10:20,180 --> 00:10:24,590
well type of enforcement was first

00:10:22,820 --> 00:10:27,770
implemented a system and the logical

00:10:24,590 --> 00:10:30,980
co-processing kernel or lock system an

00:10:27,770 --> 00:10:34,100
in lock type enforcement was originally

00:10:30,980 --> 00:10:35,780
employed to decompose the kernel into a

00:10:34,100 --> 00:10:38,450
set of lower privileged kernel

00:10:35,780 --> 00:10:40,310
extensions that ran alongside the core

00:10:38,450 --> 00:10:43,520
reference monitor each limited only to

00:10:40,310 --> 00:10:45,140
its particular function and purpose as

00:10:43,520 --> 00:10:47,630
well as to layer the trusted computing

00:10:45,140 --> 00:10:48,980
base with each layer constrained only to

00:10:47,630 --> 00:10:51,860
what was needed for its particular

00:10:48,980 --> 00:10:53,540
function originally the lock design

00:10:51,860 --> 00:10:55,190
called for a hardware based design with

00:10:53,540 --> 00:10:56,810
a security code processor in a tagged

00:10:55,190 --> 00:10:58,080
memory model something which seems to be

00:10:56,810 --> 00:10:59,580
coming back into vague

00:10:58,080 --> 00:11:01,380
but eventually transition to a

00:10:59,580 --> 00:11:03,120
software-only implementation and were

00:11:01,380 --> 00:11:09,240
ordered to accommodate commodity

00:11:03,120 --> 00:11:11,970
hardware of the time type enforcement

00:11:09,240 --> 00:11:13,380
has a number of key properties been able

00:11:11,970 --> 00:11:15,570
to overcome the limitations of

00:11:13,380 --> 00:11:17,220
traditional Mac first whereas

00:11:15,570 --> 00:11:19,140
traditional Mac ignored the particular

00:11:17,220 --> 00:11:20,970
program being executed type enforcement

00:11:19,140 --> 00:11:23,519
explicitly takes it into consideration

00:11:20,970 --> 00:11:24,930
this allows binding trust and specific

00:11:23,519 --> 00:11:29,279
permissions to the program being

00:11:24,930 --> 00:11:30,180
executed enabling the trust model to be

00:11:29,279 --> 00:11:32,640
tailored to the particular

00:11:30,180 --> 00:11:34,940
trustworthiness and function of the

00:11:32,640 --> 00:11:36,870
program in question the senesce

00:11:34,940 --> 00:11:38,550
resuscitated distinguishing executed

00:11:36,870 --> 00:11:40,410
from read access enabling it to

00:11:38,550 --> 00:11:43,260
represent goals such as code data

00:11:40,410 --> 00:11:45,779
separation second whereas traditional

00:11:43,260 --> 00:11:47,700
Mac had fixed labeling schemes that

00:11:45,779 --> 00:11:50,220
directly encoded aspects of the policy

00:11:47,700 --> 00:11:52,380
type enforcement cleanly decoupled the

00:11:50,220 --> 00:11:55,110
labeling from the policy the labeling

00:11:52,380 --> 00:11:56,670
simply became tags and the policy was

00:11:55,110 --> 00:11:58,890
separately defined through sparse access

00:11:56,670 --> 00:12:00,600
matrix disabled' type enforcement to

00:11:58,890 --> 00:12:03,290
represent many other security goals

00:12:00,600 --> 00:12:06,839
besides delimited models of IVA and

00:12:03,290 --> 00:12:08,310
Angela whereas traditional Mac was

00:12:06,839 --> 00:12:10,230
primarily focused on information flow

00:12:08,310 --> 00:12:11,970
control and thus sought to map every

00:12:10,230 --> 00:12:14,730
conceivable operation of a system to

00:12:11,970 --> 00:12:16,200
read and/or write flows type and

00:12:14,730 --> 00:12:18,360
forcement provides policy driven

00:12:16,200 --> 00:12:19,410
granularity in which distinct

00:12:18,360 --> 00:12:21,570
permissions are defined for each

00:12:19,410 --> 00:12:23,550
operation and the policy author is able

00:12:21,570 --> 00:12:25,770
to group them as desired to meet his or

00:12:23,550 --> 00:12:27,930
her particular goals or to evolve over

00:12:25,770 --> 00:12:29,279
time as understanding of the particular

00:12:27,930 --> 00:12:31,279
security implications of a given

00:12:29,279 --> 00:12:34,079
operation change

00:12:31,279 --> 00:12:36,329
lastly whereas fictional Mac required

00:12:34,079 --> 00:12:38,070
the notion of trusted subjects that

00:12:36,329 --> 00:12:39,930
could violate the security model and

00:12:38,070 --> 00:12:42,060
became potential attack vectors into the

00:12:39,930 --> 00:12:44,970
system under type enforcement there are

00:12:42,060 --> 00:12:46,709
no all-powerful trusted subjects nothing

00:12:44,970 --> 00:12:49,140
is exempted from the security policy and

00:12:46,709 --> 00:12:50,970
even the notions of trust are defined

00:12:49,140 --> 00:12:53,360
within the context of the policy at very

00:12:50,970 --> 00:12:53,360
fine granularity

00:12:57,260 --> 00:13:01,500
while type enforcement provided a number

00:12:59,580 --> 00:13:03,630
of key advantages over traditional Mac

00:13:01,500 --> 00:13:05,310
we recognize that even type enforcement

00:13:03,630 --> 00:13:07,290
would not suffice for all needs or for

00:13:05,310 --> 00:13:09,540
all time we also recognize the

00:13:07,290 --> 00:13:11,460
flexibility would be key to commercial

00:13:09,540 --> 00:13:14,040
adoption of mandatory access control in

00:13:11,460 --> 00:13:15,270
mainstream systems consequently we

00:13:14,040 --> 00:13:18,150
worked with our research partners to

00:13:15,270 --> 00:13:19,950
create a generalization of type

00:13:18,150 --> 00:13:21,660
enforcement and to create a flexible Mac

00:13:19,950 --> 00:13:23,250
architecture in which type enforcement

00:13:21,660 --> 00:13:25,320
could merely be one of many different

00:13:23,250 --> 00:13:28,350
security models supported behind a

00:13:25,320 --> 00:13:30,450
general security interface this

00:13:28,350 --> 00:13:32,430
architecture grid earlier worked this in

00:13:30,450 --> 00:13:35,310
loc and another system known as trusted

00:13:32,430 --> 00:13:37,320
Mach the flexible Mac architecture was

00:13:35,310 --> 00:13:39,120
prototypes in Carnegie Mellon's Mach 3

00:13:37,320 --> 00:13:42,000
kernel through the distributed trusted

00:13:39,120 --> 00:13:43,680
Mach project rdt Mach and its successor

00:13:42,000 --> 00:13:46,200
the distributed trusted operating system

00:13:43,680 --> 00:13:48,330
project these two projects were both

00:13:46,200 --> 00:13:50,790
part of a broader NSA research program

00:13:48,330 --> 00:13:52,740
than a synergy there was exploring how

00:13:50,790 --> 00:13:54,090
to develop a distributed microkernel

00:13:52,740 --> 00:13:55,770
based operating system security

00:13:54,090 --> 00:13:58,500
architecture that was exploring not only

00:13:55,770 --> 00:13:59,940
flexible Mac but also flexible support

00:13:58,500 --> 00:14:01,680
for other kinds of security needs

00:13:59,940 --> 00:14:05,010
including audit cryptography and

00:14:01,680 --> 00:14:06,810
authentication the use of this

00:14:05,010 --> 00:14:08,160
architecture was motivated both by a

00:14:06,810 --> 00:14:09,780
recognition that microkernel based

00:14:08,160 --> 00:14:11,070
architectures offered significant

00:14:09,780 --> 00:14:14,250
potential security and assurance

00:14:11,070 --> 00:14:16,740
benefits for operating systems and by

00:14:14,250 --> 00:14:25,440
interest in mock by industry players at

00:14:16,740 --> 00:14:28,290
the time Mach at the time had what's

00:14:25,440 --> 00:14:29,670
known as an object capability model but

00:14:28,290 --> 00:14:31,080
mots capability model had a number of

00:14:29,670 --> 00:14:34,250
deficiencies that made it fundamentally

00:14:31,080 --> 00:14:36,930
unsuited to enforcing security policies

00:14:34,250 --> 00:14:39,690
first not provided no means of

00:14:36,930 --> 00:14:41,610
distinguishing the ability to use a

00:14:39,690 --> 00:14:43,530
capability from the ability to transfer

00:14:41,610 --> 00:14:45,900
that capability further providing no

00:14:43,530 --> 00:14:47,730
means of dating the propagation of

00:14:45,900 --> 00:14:48,900
access rights in the system which is key

00:14:47,730 --> 00:14:53,280
to being able to support security

00:14:48,900 --> 00:14:56,070
policies secondly the capability in MOC

00:14:53,280 --> 00:14:59,550
gave the ability to invoke any service

00:14:56,070 --> 00:15:01,440
the object up offered providing no means

00:14:59,550 --> 00:15:04,110
to support a lease privileged goals in

00:15:01,440 --> 00:15:05,940
the system and lastly max capability

00:15:04,110 --> 00:15:07,590
model offered no means of revocation

00:15:05,940 --> 00:15:09,310
thereby limiting its ability to support

00:15:07,590 --> 00:15:12,310
dynamic security policies

00:15:09,310 --> 00:15:13,690
and changes in attributes the dt mark

00:15:12,310 --> 00:15:16,810
and details project addressed these

00:15:13,690 --> 00:15:18,820
limitations of mocs model introducing

00:15:16,810 --> 00:15:22,360
mac policy controls over the propagation

00:15:18,820 --> 00:15:25,000
and use of capabilities the controls of

00:15:22,360 --> 00:15:27,640
reuse also incorporated fine-grained

00:15:25,000 --> 00:15:29,410
support over service invocation allowing

00:15:27,640 --> 00:15:32,529
least privilege policies to be enforced

00:15:29,410 --> 00:15:34,390
a number of technical reports and papers

00:15:32,529 --> 00:15:36,040
were published about the dt map and

00:15:34,390 --> 00:15:41,650
details work and those are publicly

00:15:36,040 --> 00:15:43,540
available the flexible mock Mac

00:15:41,650 --> 00:15:46,950
architecture that came out of the dt

00:15:43,540 --> 00:15:49,180
mark d toss and later Flast work

00:15:46,950 --> 00:15:50,920
encapsulated the security policy logic

00:15:49,180 --> 00:15:53,170
within a separate subsystem known as the

00:15:50,920 --> 00:15:54,970
security server in the microkernel based

00:15:53,170 --> 00:15:56,950
architectures the security server was a

00:15:54,970 --> 00:15:59,200
user space task given the microkernel

00:15:56,950 --> 00:16:02,380
based architecture and the precedent of

00:15:59,200 --> 00:16:03,910
the user space paging model of MOC this

00:16:02,380 --> 00:16:06,040
also fit with our goals for policy

00:16:03,910 --> 00:16:07,450
flexibility the interface to the

00:16:06,040 --> 00:16:10,029
security server was designed to support

00:16:07,450 --> 00:16:11,770
many different security policy models by

00:16:10,029 --> 00:16:14,050
taking a wide range of known security

00:16:11,770 --> 00:16:15,760
policy models and then generalizing

00:16:14,050 --> 00:16:18,460
those to create a generic state machine

00:16:15,760 --> 00:16:22,210
model of any kind of security policy

00:16:18,460 --> 00:16:23,980
goal this interface supported many

00:16:22,210 --> 00:16:26,080
different properties and thus both

00:16:23,980 --> 00:16:29,440
existing known security models as well

00:16:26,080 --> 00:16:30,700
as potential future ones the

00:16:29,440 --> 00:16:32,110
architecture also defined the

00:16:30,700 --> 00:16:34,150
requirements on what was known as the

00:16:32,110 --> 00:16:35,680
object managers of the system that is

00:16:34,150 --> 00:16:37,390
the components of the system that

00:16:35,680 --> 00:16:39,670
implemented the objects and operations

00:16:37,390 --> 00:16:41,440
including this the kernel and user space

00:16:39,670 --> 00:16:44,490
components that provided file systems

00:16:41,440 --> 00:16:47,140
network protocol stacks and the like

00:16:44,490 --> 00:16:49,000
along with these architectural

00:16:47,140 --> 00:16:51,010
requirements a caching component was

00:16:49,000 --> 00:16:53,170
defined to address the concerns about

00:16:51,010 --> 00:16:55,420
needing to call the security server

00:16:53,170 --> 00:16:57,940
frequently this access vector cash

00:16:55,420 --> 00:16:59,770
provided efficient caching of security

00:16:57,940 --> 00:17:01,450
decisions and also provided a protocol

00:16:59,770 --> 00:17:03,400
between the cache and the security

00:17:01,450 --> 00:17:06,780
server to support dynamic policies and

00:17:03,400 --> 00:17:06,780
evolving requirements

00:17:09,630 --> 00:17:15,100
the flexible Mac architecture embodied

00:17:12,819 --> 00:17:18,459
in detox and its successors provided a

00:17:15,100 --> 00:17:20,529
number of key benefits first the

00:17:18,459 --> 00:17:23,409
architecture lent itself to an asurim

00:17:20,529 --> 00:17:25,510
Entei ssin the direct representation of

00:17:23,409 --> 00:17:28,480
security labeling information and access

00:17:25,510 --> 00:17:30,370
controls in the kernel state facilitate

00:17:28,480 --> 00:17:31,659
analysis and validation that security

00:17:30,370 --> 00:17:34,440
goals are being met

00:17:31,659 --> 00:17:37,000
enabling wanted to gain assurance

00:17:34,440 --> 00:17:38,769
capability leaks by any flawed or

00:17:37,000 --> 00:17:41,289
malicious user space component could be

00:17:38,769 --> 00:17:42,990
mitigated by the kernel checks providing

00:17:41,289 --> 00:17:45,580
defense-in-depth

00:17:42,990 --> 00:17:47,350
this then allowed the assurance burden

00:17:45,580 --> 00:17:50,019
on user space components to be scaled

00:17:47,350 --> 00:17:52,299
and bounded to only what was needed for

00:17:50,019 --> 00:17:55,389
this particular functionality and

00:17:52,299 --> 00:17:57,220
security requirements the trusted

00:17:55,389 --> 00:17:59,860
computing base could be decomposed and

00:17:57,220 --> 00:18:02,139
layered with the user space components

00:17:59,860 --> 00:18:08,440
only being trusted for their requisite

00:18:02,139 --> 00:18:09,460
functions and bounded in scope addition

00:18:08,440 --> 00:18:11,919
to providing a more sharable

00:18:09,460 --> 00:18:13,929
implementation the architecture provided

00:18:11,919 --> 00:18:16,120
for centralized security policy thereby

00:18:13,929 --> 00:18:18,909
facilitating analysis of the policy for

00:18:16,120 --> 00:18:20,860
its particular goals auditing that

00:18:18,909 --> 00:18:23,519
certain security goals are being met in

00:18:20,860 --> 00:18:27,159
management of the system as a whole

00:18:23,519 --> 00:18:28,899
lastly the architecture will support for

00:18:27,159 --> 00:18:30,250
security policies offered the greatest

00:18:28,899 --> 00:18:32,380
flexibility of many different

00:18:30,250 --> 00:18:33,970
alternative designs that were considered

00:18:32,380 --> 00:18:37,110
and captured in the technical reports

00:18:33,970 --> 00:18:37,110
and papers that were published

00:18:39,900 --> 00:18:43,740
the default prototype was distributed to

00:18:42,420 --> 00:18:45,450
a number of universities and other

00:18:43,740 --> 00:18:47,610
research partners it was used for

00:18:45,450 --> 00:18:51,180
further research into security policies

00:18:47,610 --> 00:18:55,290
secure windowing systems secured

00:18:51,180 --> 00:18:57,090
databases and other matters however with

00:18:55,290 --> 00:19:00,180
a winding down of the mock project by

00:18:57,090 --> 00:19:01,590
Carnegie Mellon DARPA invited us to

00:19:00,180 --> 00:19:03,570
partner with the University of Utah's

00:19:01,590 --> 00:19:05,910
Fox project which had taken over

00:19:03,570 --> 00:19:07,740
maintenance of Mach and was beginning to

00:19:05,910 --> 00:19:11,790
explore a new microkernel based system

00:19:07,740 --> 00:19:13,440
known as fluke in the context of fluke

00:19:11,790 --> 00:19:15,570
the primary innovation that was

00:19:13,440 --> 00:19:18,270
introduced was to further explore the

00:19:15,570 --> 00:19:21,120
limits on support for dynamic security

00:19:18,270 --> 00:19:24,360
policies beyond even what had been

00:19:21,120 --> 00:19:26,670
supported in details and that enhanced

00:19:24,360 --> 00:19:28,500
architecture became known as flask and

00:19:26,670 --> 00:19:31,710
it's prototype in Flook was also known

00:19:28,500 --> 00:19:34,320
as flask also during this time we noted

00:19:31,710 --> 00:19:36,210
an increased activity in the industry

00:19:34,320 --> 00:19:38,850
and in academia

00:19:36,210 --> 00:19:40,770
attempting to provide security simply at

00:19:38,850 --> 00:19:42,690
the application or middleware layer and

00:19:40,770 --> 00:19:44,340
giving up largely on the protection

00:19:42,690 --> 00:19:47,460
mechanisms of mainstream operating

00:19:44,340 --> 00:19:50,250
systems as a consequence we issued a

00:19:47,460 --> 00:19:51,990
paper calling for increased exploration

00:19:50,250 --> 00:19:53,820
and renewed work in operating system

00:19:51,990 --> 00:19:55,530
security noting the inability to provide

00:19:53,820 --> 00:19:58,500
adequate security purely at the

00:19:55,530 --> 00:20:00,330
application layers this paper called not

00:19:58,500 --> 00:20:02,970
only for flexible Mac but for other key

00:20:00,330 --> 00:20:04,770
features and goals at the operating

00:20:02,970 --> 00:20:06,900
system level and brought significantly

00:20:04,770 --> 00:20:08,790
wider awareness of the need for flexible

00:20:06,900 --> 00:20:11,900
Mac and operating system security beyond

00:20:08,790 --> 00:20:11,900
the academic community

00:20:15,910 --> 00:20:20,090
while details provided limited support

00:20:18,380 --> 00:20:21,559
for dynamic security policies by

00:20:20,090 --> 00:20:23,059
providing an interface between the

00:20:21,559 --> 00:20:24,770
access vector cache and the security

00:20:23,059 --> 00:20:27,050
server and a protocol between them for

00:20:24,770 --> 00:20:28,700
negotiating changes it did not fully

00:20:27,050 --> 00:20:30,860
address the revocation problem

00:20:28,700 --> 00:20:33,530
particularly revocation of permissions

00:20:30,860 --> 00:20:36,050
that had migrated beyond the cache into

00:20:33,530 --> 00:20:37,700
the state of the object manager for

00:20:36,050 --> 00:20:40,730
example in the context of memory

00:20:37,700 --> 00:20:43,220
protections or in established IPC

00:20:40,730 --> 00:20:44,750
connections or further it did not

00:20:43,220 --> 00:20:46,429
address the problems in progress

00:20:44,750 --> 00:20:47,960
operations that have already completed

00:20:46,429 --> 00:20:50,750
the permission check but not yet

00:20:47,960 --> 00:20:52,040
completed the operation in question the

00:20:50,750 --> 00:20:54,200
flask architecture defined the

00:20:52,040 --> 00:20:56,420
requirements on the object managers and

00:20:54,200 --> 00:21:00,290
a protocol for ensuring in an effective

00:20:56,420 --> 00:21:02,179
atomicity in policy changes so that one

00:21:00,290 --> 00:21:04,190
could ensure that a given policy change

00:21:02,179 --> 00:21:05,540
had completed and been fully reflected

00:21:04,190 --> 00:21:07,760
in the state of the object managers

00:21:05,540 --> 00:21:10,820
before other controlled operations would

00:21:07,760 --> 00:21:12,980
be allowed the Fluke microkernel

00:21:10,820 --> 00:21:15,290
interface particularly facilitated the

00:21:12,980 --> 00:21:17,960
support for revocation as a result of

00:21:15,290 --> 00:21:20,420
its support for check pointing and

00:21:17,960 --> 00:21:22,550
transparent process migration a provided

00:21:20,420 --> 00:21:24,860
support for full thread state export

00:21:22,550 --> 00:21:26,510
ability and it cleanly divided all

00:21:24,860 --> 00:21:29,720
kernel operations into cleanly

00:21:26,510 --> 00:21:31,280
restartable atomic stages this enabled

00:21:29,720 --> 00:21:33,559
us to fully implement this revocation

00:21:31,280 --> 00:21:35,750
support in the microkernel although that

00:21:33,559 --> 00:21:37,460
full-scale revocation support could not

00:21:35,750 --> 00:21:41,380
be fully extended to all the user space

00:21:37,460 --> 00:21:41,380
object managers in the flash prototype

00:21:45,540 --> 00:21:49,860
as the University of Utah completed

00:21:48,240 --> 00:21:51,960
their research goals for the flux

00:21:49,860 --> 00:21:53,460
project in the souq microkernel they

00:21:51,960 --> 00:21:56,460
wound down their efforts in that space

00:21:53,460 --> 00:21:59,970
leaving us again looking for a platform

00:21:56,460 --> 00:22:01,920
to carry forward our own research during

00:21:59,970 --> 00:22:03,420
the detox and flask work we had

00:22:01,920 --> 00:22:05,820
approached multiple operating system

00:22:03,420 --> 00:22:07,680
vendors and engage with them to seek to

00:22:05,820 --> 00:22:09,480
gain adoption of flexible mandatory ax

00:22:07,680 --> 00:22:12,030
controls into their respective operating

00:22:09,480 --> 00:22:14,790
systems unfortunately we could not

00:22:12,030 --> 00:22:16,710
convince them of the viability and value

00:22:14,790 --> 00:22:18,510
of flexible metrics control when we

00:22:16,710 --> 00:22:22,110
could only demonstrate it in the context

00:22:18,510 --> 00:22:23,970
of these research systems in order to

00:22:22,110 --> 00:22:26,670
provide us with the means of

00:22:23,970 --> 00:22:30,120
demonstrating that viability value we

00:22:26,670 --> 00:22:32,340
looked to open-source operating systems

00:22:30,120 --> 00:22:35,160
as an opportunity to demonstrate the

00:22:32,340 --> 00:22:39,180
architecture in a real system that could

00:22:35,160 --> 00:22:40,500
be leveraged and pretend at the time the

00:22:39,180 --> 00:22:42,510
National Security Council had actually

00:22:40,500 --> 00:22:44,220
called on the government to begin

00:22:42,510 --> 00:22:49,980
looking at greater leveraging of these

00:22:44,220 --> 00:22:51,300
open-source systems our goals in doing

00:22:49,980 --> 00:22:52,860
this were to not only show us viability

00:22:51,300 --> 00:22:54,480
and value but also provide an

00:22:52,860 --> 00:22:55,590
open-source reference implementation

00:22:54,480 --> 00:22:58,950
from which any operating system

00:22:55,590 --> 00:23:00,720
developer could learn and to provide

00:22:58,950 --> 00:23:02,190
ourselves with a long term research

00:23:00,720 --> 00:23:04,350
platform for further research and

00:23:02,190 --> 00:23:08,070
development that could outlast any given

00:23:04,350 --> 00:23:10,050
academic research project at the time

00:23:08,070 --> 00:23:11,400
Lynch's large developer community

00:23:10,050 --> 00:23:13,170
growing adoption and open development

00:23:11,400 --> 00:23:15,120
model made it an attractive foundation

00:23:13,170 --> 00:23:17,250
for our work even though we ourselves

00:23:15,120 --> 00:23:20,520
had greater familiarity with bsd unix

00:23:17,250 --> 00:23:22,380
and its derivatives at the time we

00:23:20,520 --> 00:23:24,870
created the reference implementation of

00:23:22,380 --> 00:23:26,580
the flask architecture in linux which

00:23:24,870 --> 00:23:29,040
became known as security enhanced linux

00:23:26,580 --> 00:23:31,890
or SC Linux first release to the public

00:23:29,040 --> 00:23:34,560
in 2000 and accompanied by detailed

00:23:31,890 --> 00:23:37,170
technical reports describing its design

00:23:34,560 --> 00:23:39,110
implementation and motivations which was

00:23:37,170 --> 00:23:43,340
followed by a number of published papers

00:23:39,110 --> 00:23:47,030
seeking to gain mindshare and insight

00:23:43,340 --> 00:23:47,030
for those ideas

00:23:49,320 --> 00:23:53,920
in bringing the flask architecture to

00:23:52,120 --> 00:23:55,270
Linux we had to first adapt it from a

00:23:53,920 --> 00:23:57,370
microkernel based architecture to a

00:23:55,270 --> 00:23:58,630
monolithic kernel architecture the

00:23:57,370 --> 00:24:01,030
security server was moved from a user

00:23:58,630 --> 00:24:04,210
space task into the kernel itself as

00:24:01,030 --> 00:24:06,070
this kernel subsystem this was viewed as

00:24:04,210 --> 00:24:07,840
a necessary accommodation to performance

00:24:06,070 --> 00:24:10,510
and complexity and to fit better with

00:24:07,840 --> 00:24:12,430
Linux is natural architecture however in

00:24:10,510 --> 00:24:14,140
doing so we preserve the flexibility of

00:24:12,430 --> 00:24:15,940
the architecture the security policy

00:24:14,140 --> 00:24:17,650
logic remained encapsulated within the

00:24:15,940 --> 00:24:20,980
security server behind its generic

00:24:17,650 --> 00:24:23,320
security interface and the the support

00:24:20,980 --> 00:24:27,090
for the caching infrastructure and the

00:24:23,320 --> 00:24:27,090
other elements remained intact

00:24:29,340 --> 00:24:33,550
Esso annex was presented to the Linux

00:24:31,780 --> 00:24:36,160
kernel developers at the March 2001

00:24:33,550 --> 00:24:37,660
linux kernel's summit at the time there

00:24:36,160 --> 00:24:40,180
are a number of extended access control

00:24:37,660 --> 00:24:44,320
implementations all seeking the game

00:24:40,180 --> 00:24:46,270
support or adoption into Linux our goal

00:24:44,320 --> 00:24:47,560
was slightly different for us

00:24:46,270 --> 00:24:50,950
SEO Linux was simply a reference

00:24:47,560 --> 00:24:52,690
implementation in order to convince the

00:24:50,950 --> 00:24:54,880
community of the importance of flexible

00:24:52,690 --> 00:24:57,670
mandatory access control and demonstrate

00:24:54,880 --> 00:24:59,020
its viability and value we were less

00:24:57,670 --> 00:25:01,350
concerned with the direct adoption of

00:24:59,020 --> 00:25:03,970
SEO Linux itself and more concerned with

00:25:01,350 --> 00:25:06,550
sharing that flexible Mac was something

00:25:03,970 --> 00:25:08,110
that was necessary and valuable the

00:25:06,550 --> 00:25:09,810
flashy architecture provided a sound way

00:25:08,110 --> 00:25:11,800
of doing so

00:25:09,810 --> 00:25:14,020
unfortunately leanness interpreted our

00:25:11,800 --> 00:25:16,320
presentation in much the same way as the

00:25:14,020 --> 00:25:19,570
other extend max control implementations

00:25:16,320 --> 00:25:22,120
as simply seeking direct adoption and

00:25:19,570 --> 00:25:23,770
instead called for the creation of a

00:25:22,120 --> 00:25:25,510
general security framework for the

00:25:23,770 --> 00:25:26,950
kernel that would support any of the

00:25:25,510 --> 00:25:29,920
different security projects as a

00:25:26,950 --> 00:25:31,810
loadable kernel module this led to the

00:25:29,920 --> 00:25:35,470
creation of the Linux security modules

00:25:31,810 --> 00:25:37,330
project by Crispin Cowen at the time we

00:25:35,470 --> 00:25:40,170
had a number of concerns with LSM as an

00:25:37,330 --> 00:25:42,520
approach to operating system security

00:25:40,170 --> 00:25:45,820
nonetheless we chose to work with the

00:25:42,520 --> 00:25:48,400
community to develop LSM as a framework

00:25:45,820 --> 00:25:51,070
and then to adapt selinux - the awesome

00:25:48,400 --> 00:25:52,690
framework moving SEO Linux behind the

00:25:51,070 --> 00:25:54,540
module interface including the

00:25:52,690 --> 00:25:57,250
philosophy architecture components

00:25:54,540 --> 00:25:59,680
assilex helped to drive many of the

00:25:57,250 --> 00:26:02,350
requirements for LSM

00:25:59,680 --> 00:26:05,050
the comprehensiveness of its controls

00:26:02,350 --> 00:26:06,340
and its support for least privilege none

00:26:05,050 --> 00:26:08,350
of the other extend necks control

00:26:06,340 --> 00:26:11,230
implementations provided the same range

00:26:08,350 --> 00:26:14,680
or granularity of control something that

00:26:11,230 --> 00:26:16,750
remains true to this day we then worked

00:26:14,680 --> 00:26:19,270
to get the OSM hooks incorporated into

00:26:16,750 --> 00:26:23,550
the mainline kernel and ultimately SEO

00:26:19,270 --> 00:26:23,550
annex itself which was merged in 2003

00:26:26,760 --> 00:26:32,320
one of our key observations from the

00:26:30,220 --> 00:26:34,810
early list of our work was the

00:26:32,320 --> 00:26:36,370
importance of application security we

00:26:34,810 --> 00:26:38,380
knew that operating system security

00:26:36,370 --> 00:26:40,390
would be inadequate to meet the higher

00:26:38,380 --> 00:26:41,740
level security goals of users and so

00:26:40,390 --> 00:26:43,300
from the beginnings the flask

00:26:41,740 --> 00:26:45,520
architecture supported extensibility

00:26:43,300 --> 00:26:47,530
beyond the operating system to support

00:26:45,520 --> 00:26:50,230
application layer access controls over

00:26:47,530 --> 00:26:51,340
their abstractions and operations so

00:26:50,230 --> 00:26:54,340
that the same guarantees could be

00:26:51,340 --> 00:26:56,620
provided at that layer in Linux we

00:26:54,340 --> 00:26:58,840
preserve this architecture by exporting

00:26:56,620 --> 00:27:01,210
the secure server api is to user space

00:26:58,840 --> 00:27:03,520
and by providing similar components in

00:27:01,210 --> 00:27:07,480
the user space libraries to user space

00:27:03,520 --> 00:27:09,280
object managers we also explored user

00:27:07,480 --> 00:27:11,640
space security servers to support

00:27:09,280 --> 00:27:14,470
alternative access control models not

00:27:11,640 --> 00:27:17,110
suitable to the kernel and a number of

00:27:14,470 --> 00:27:19,330
research programs the flask

00:27:17,110 --> 00:27:20,980
architectural support for policy

00:27:19,330 --> 00:27:23,050
enforcement was implemented in a number

00:27:20,980 --> 00:27:26,110
of different user space components in

00:27:23,050 --> 00:27:27,880
Linux d-bus was an early adopter of this

00:27:26,110 --> 00:27:29,320
support in order to support mandatory

00:27:27,880 --> 00:27:33,490
controls over inter process

00:27:29,320 --> 00:27:35,380
communication through DDoS for xorg

00:27:33,490 --> 00:27:37,780
we developed a general access control

00:27:35,380 --> 00:27:39,670
framework similar to LS m and then an X

00:27:37,780 --> 00:27:41,200
s a Linux module to support labeling

00:27:39,670 --> 00:27:43,240
controls over the windowing system

00:27:41,200 --> 00:27:44,710
abstractions and operations which has

00:27:43,240 --> 00:27:48,610
been leveraged in various multi-level

00:27:44,710 --> 00:27:51,670
desktop solutions SEO Linux community

00:27:48,610 --> 00:27:53,770
members developed Mac's support for

00:27:51,670 --> 00:27:55,600
Postgres applying these same kinds of

00:27:53,770 --> 00:27:57,670
guarantees to database records and

00:27:55,600 --> 00:28:01,810
operations which has subsequently been

00:27:57,670 --> 00:28:03,490
enhanced and productized these

00:28:01,810 --> 00:28:05,320
extensions in the user space provide a

00:28:03,490 --> 00:28:07,780
means of enforcing a uniform access

00:28:05,320 --> 00:28:09,290
control policy over the entire system as

00:28:07,780 --> 00:28:12,110
data is processed

00:28:09,290 --> 00:28:14,900
varying layers of abstraction in

00:28:12,110 --> 00:28:20,960
ordering enabling end-to-end security

00:28:14,900 --> 00:28:22,670
goals to be met while we had some

00:28:20,960 --> 00:28:24,770
success in gaining adoption for this

00:28:22,670 --> 00:28:27,050
user space access control the lack of a

00:28:24,770 --> 00:28:28,760
coherent security story for Linux and

00:28:27,050 --> 00:28:31,220
particularly for the Linux just op

00:28:28,760 --> 00:28:40,970
limited the adoption of the user space

00:28:31,220 --> 00:28:42,650
controls in third-party applications LOC

00:28:40,970 --> 00:28:44,660
Linux provided a successful reference

00:28:42,650 --> 00:28:46,640
implementation of the flask architecture

00:28:44,660 --> 00:28:49,010
in a real operating system showing its

00:28:46,640 --> 00:28:50,330
viability value we wanted to demonstrate

00:28:49,010 --> 00:28:52,490
the applicability of the architecture to

00:28:50,330 --> 00:28:54,380
other operating systems as well and to

00:28:52,490 --> 00:28:56,720
foster wider adoption of flexible Mac

00:28:54,380 --> 00:28:58,730
Beyond Linux toward that end we

00:28:56,720 --> 00:29:00,710
partnered with DARPA to sponsor mentor X

00:28:58,730 --> 00:29:05,240
control frameworks first rifra bsd and

00:29:00,710 --> 00:29:09,980
then for darwin the mac frameworks for

00:29:05,240 --> 00:29:12,110
freebsd provided more extensive

00:29:09,980 --> 00:29:14,240
semantics specifically to mac than

00:29:12,110 --> 00:29:15,710
allison had provided for linux and a

00:29:14,240 --> 00:29:17,360
more consistent set of API s and

00:29:15,710 --> 00:29:20,510
infrastructure specific to mandatory

00:29:17,360 --> 00:29:22,760
access control in case of darwin its

00:29:20,510 --> 00:29:24,440
hybrid bsd mach kernel provide an

00:29:22,760 --> 00:29:25,010
opportunity to revisit our work from d

00:29:24,440 --> 00:29:27,260
toss

00:29:25,010 --> 00:29:31,190
we provided the developers of the the

00:29:27,260 --> 00:29:32,840
darwin work with our details reference

00:29:31,190 --> 00:29:34,280
implementation so they could apply

00:29:32,840 --> 00:29:37,790
similar controls over the mach

00:29:34,280 --> 00:29:39,980
abstractions and operations the freebsd

00:29:37,790 --> 00:29:41,570
darwin work was led by Robert Watson who

00:29:39,980 --> 00:29:43,430
had earlier started the trusted BSD

00:29:41,570 --> 00:29:45,790
project which had earlier explored

00:29:43,430 --> 00:29:48,230
trusted OS features for FreeBSD

00:29:45,790 --> 00:29:50,150
initially traditional Mac in that

00:29:48,230 --> 00:29:52,120
context but Robert also had a similar

00:29:50,150 --> 00:29:56,120
interest in flexible access control that

00:29:52,120 --> 00:29:58,340
aligned with ours the Mac frameworks

00:29:56,120 --> 00:30:00,560
were adopted into FreeBSD first as an

00:29:58,340 --> 00:30:02,480
experimental feature in FreeBSD 5.0 and

00:30:00,560 --> 00:30:06,740
later as a default label feature in

00:30:02,480 --> 00:30:08,540
previous the 8.0 in FreeBSD it's been

00:30:06,740 --> 00:30:10,490
leveraged by various FreeBSD derivatives

00:30:08,540 --> 00:30:12,530
to enforce custom security modules

00:30:10,490 --> 00:30:13,970
including a modern reimplementation of

00:30:12,530 --> 00:30:15,860
what was the first type enforced

00:30:13,970 --> 00:30:18,680
firewall product that predated SELinux

00:30:15,860 --> 00:30:21,400
originally the sidewinder firewall later

00:30:18,680 --> 00:30:24,100
we implemented in the context of FreeBSD

00:30:21,400 --> 00:30:26,020
in Mac OS and iOS the Darwin work was

00:30:24,100 --> 00:30:28,300
adopted and incorporated where it's

00:30:26,020 --> 00:30:30,430
being leveraged as the for a number of

00:30:28,300 --> 00:30:32,590
different security modules that form the

00:30:30,430 --> 00:30:39,040
application sandboxing model in those

00:30:32,590 --> 00:30:44,559
operating systems the detox controls

00:30:39,040 --> 00:30:47,020
over Mach are key to provide a complete

00:30:44,559 --> 00:30:50,890
and coherent controls in a hybrid Mach

00:30:47,020 --> 00:30:52,870
bsd kernel of this sort the absence of

00:30:50,890 --> 00:30:54,940
such Mach controls and earlier versions

00:30:52,870 --> 00:30:56,860
of some of these systems has proven to

00:30:54,940 --> 00:30:58,540
be a source of subtle vulnerabilities

00:30:56,860 --> 00:31:00,190
and the ability to provide consistent

00:30:58,540 --> 00:31:02,890
controls between the Mac framework on

00:31:00,190 --> 00:31:04,840
the bsd side and on corresponding

00:31:02,890 --> 00:31:08,760
controls on the mach side is key to

00:31:04,840 --> 00:31:08,760
being able to provide that consistency

00:31:12,630 --> 00:31:16,929
growing demand for the use of mobile

00:31:15,850 --> 00:31:19,690
devices in secured government

00:31:16,929 --> 00:31:21,429
environments spurred the NSA to begin

00:31:19,690 --> 00:31:23,740
exploring architectures and mechanisms

00:31:21,429 --> 00:31:27,700
to enable the use of such devices in

00:31:23,740 --> 00:31:29,410
government spaces this coincided with

00:31:27,700 --> 00:31:31,600
growing interest by the government in

00:31:29,410 --> 00:31:33,760
android as an open platform that had

00:31:31,600 --> 00:31:35,830
enabled significant functional and

00:31:33,760 --> 00:31:38,940
security customization to be performed

00:31:35,830 --> 00:31:40,870
beyond that of other mobile platforms

00:31:38,940 --> 00:31:42,640
recognizing the need for food security

00:31:40,870 --> 00:31:44,770
in mobile operating systems we initiated

00:31:42,640 --> 00:31:47,080
the security enhanced Android project

00:31:44,770 --> 00:31:49,510
later rebranded secured enhancements for

00:31:47,080 --> 00:31:51,940
Android to comply with the Android brand

00:31:49,510 --> 00:31:53,980
guidelines in the context of this

00:31:51,940 --> 00:31:56,170
project we explored metrics controls in

00:31:53,980 --> 00:31:58,360
two different layers first we explore

00:31:56,170 --> 00:32:00,520
how to adapt selinux to the unique needs

00:31:58,360 --> 00:32:03,400
and usage models of mobile operating

00:32:00,520 --> 00:32:04,960
systems seeking specifically to address

00:32:03,400 --> 00:32:07,320
some of the limitations we encountered

00:32:04,960 --> 00:32:09,730
with SEO Linux and Linux distributions

00:32:07,320 --> 00:32:11,830
we also performed research into new

00:32:09,730 --> 00:32:13,990
forms of mentor X controls suitable for

00:32:11,830 --> 00:32:18,220
androids middleware model and its higher

00:32:13,990 --> 00:32:19,480
level security semantics we created a

00:32:18,220 --> 00:32:22,090
reference implementation that was

00:32:19,480 --> 00:32:24,850
initially released in 2012 demonstrating

00:32:22,090 --> 00:32:27,370
the use of selinux and then presented a

00:32:24,850 --> 00:32:29,350
series of case studies showing how this

00:32:27,370 --> 00:32:32,800
would have blocked exploitation of many

00:32:29,350 --> 00:32:34,840
public android vulnerabilities

00:32:32,800 --> 00:32:36,510
we then submitted this through the

00:32:34,840 --> 00:32:39,070
Android Open Source Project where it was

00:32:36,510 --> 00:32:47,470
incorporated into mainline Android and

00:32:39,070 --> 00:32:48,970
became part of that system today Android

00:32:47,470 --> 00:32:51,820
has become an exemplar of how to apply

00:32:48,970 --> 00:32:54,670
se Linux and Mac in general

00:32:51,820 --> 00:32:56,520
in contrast the Linux distributions SEO

00:32:54,670 --> 00:32:59,770
Linux in the context of Android is

00:32:56,520 --> 00:33:02,170
confining for every process from the

00:32:59,770 --> 00:33:04,540
init process to third-party applications

00:33:02,170 --> 00:33:07,150
providing this protection of privileged

00:33:04,540 --> 00:33:09,070
processes commonly viewed as trusted by

00:33:07,150 --> 00:33:11,140
many systems against untrustworthy

00:33:09,070 --> 00:33:15,790
inputs as well as completely and

00:33:11,140 --> 00:33:17,710
privileged code a feature of SELinux and

00:33:15,790 --> 00:33:19,270
has never allow rules or policy

00:33:17,710 --> 00:33:21,730
assertions have been extensively

00:33:19,270 --> 00:33:24,160
employed in Android to define and

00:33:21,730 --> 00:33:25,750
enforce security goals for the Android

00:33:24,160 --> 00:33:27,730
platform by the Android security team

00:33:25,750 --> 00:33:30,070
and these goals are checked about that

00:33:27,730 --> 00:33:33,040
platform build and through automated

00:33:30,070 --> 00:33:36,220
testing of devices required for Android

00:33:33,040 --> 00:33:38,260
compatibility branding this allows the

00:33:36,220 --> 00:33:42,160
entire security team to enforce certain

00:33:38,260 --> 00:33:44,230
security semantics even over the OEMs in

00:33:42,160 --> 00:33:46,240
the context of Android aesthetics has

00:33:44,230 --> 00:33:48,430
been particularly applied to a range of

00:33:46,240 --> 00:33:52,750
different security goals from protecting

00:33:48,430 --> 00:33:55,600
the trusted computing base including

00:33:52,750 --> 00:33:57,490
this general protection of the various

00:33:55,600 --> 00:34:00,910
services against various forms of attack

00:33:57,490 --> 00:34:02,410
as well as more specific access controls

00:34:00,910 --> 00:34:04,680
even extend up in a user space for

00:34:02,410 --> 00:34:07,409
things such as the keystore to

00:34:04,680 --> 00:34:10,800
significantly cutting attack surface

00:34:07,409 --> 00:34:14,830
exposed to untrusted components

00:34:10,800 --> 00:34:17,590
ranging from limiting access to various

00:34:14,830 --> 00:34:18,940
network protocol families cutting off

00:34:17,590 --> 00:34:22,030
access to various kernel pseudo file

00:34:18,940 --> 00:34:24,550
interfaces even limiting access to

00:34:22,030 --> 00:34:27,159
specific device driver IO control

00:34:24,550 --> 00:34:28,600
commands the support for IO control

00:34:27,159 --> 00:34:30,100
whitelisting was actually developed by

00:34:28,600 --> 00:34:32,530
the Android security team and

00:34:30,100 --> 00:34:34,679
contributed back to SEO Linux as a

00:34:32,530 --> 00:34:37,890
general feature going beyond the

00:34:34,679 --> 00:34:39,730
existing granularity of control

00:34:37,890 --> 00:34:42,040
aesthetics has also been employed in

00:34:39,730 --> 00:34:43,810
android in order to support

00:34:42,040 --> 00:34:44,770
decomposition goals such as the

00:34:43,810 --> 00:34:46,270
decomposition of the

00:34:44,770 --> 00:34:48,310
server that was spurred by the stage

00:34:46,270 --> 00:34:49,990
fright vulnerabilities which was

00:34:48,310 --> 00:34:52,679
initiated in Android 7 has been carried

00:34:49,990 --> 00:34:54,909
forward further in subsequent releases

00:34:52,679 --> 00:34:56,890
the inner security team has also found

00:34:54,909 --> 00:34:58,690
Mac very useful in enforcing their

00:34:56,890 --> 00:35:01,330
separation goals between the core

00:34:58,690 --> 00:35:03,180
Android platform and the platform are

00:35:01,330 --> 00:35:06,490
OEM specific components of the system

00:35:03,180 --> 00:35:07,960
enabling them to rigorously force the

00:35:06,490 --> 00:35:11,200
OEM components to interact through

00:35:07,960 --> 00:35:14,710
well-defined interfaces in the Android 9

00:35:11,200 --> 00:35:16,900
release mainline Android finally

00:35:14,710 --> 00:35:19,000
incorporated the last residual feature

00:35:16,900 --> 00:35:21,280
from our original 2012's the Android

00:35:19,000 --> 00:35:23,980
reference implementation that is per app

00:35:21,280 --> 00:35:27,550
security contexts for application

00:35:23,980 --> 00:35:30,280
sandboxing edition to be an exemplar of

00:35:27,550 --> 00:35:31,540
how to apply matrix controls Android is

00:35:30,280 --> 00:35:33,930
also to our knowledge the largest

00:35:31,540 --> 00:35:37,900
installed base of any Mac system ever

00:35:33,930 --> 00:35:39,880
it's currently fully enforcing on around

00:35:37,900 --> 00:35:41,770
90% of the over 2 billion active Android

00:35:39,880 --> 00:35:43,870
devices and eventually it will reach all

00:35:41,770 --> 00:35:45,790
Android devices once all devices are

00:35:43,870 --> 00:35:48,040
running Android 500 or later at the

00:35:45,790 --> 00:35:52,060
point at which selinux became fully

00:35:48,040 --> 00:35:53,800
enforcing in mandatory for Android it's

00:35:52,060 --> 00:35:56,850
also through this effort that at SU

00:35:53,800 --> 00:35:58,690
Linux Mac has been brought to Chrome OS

00:35:56,850 --> 00:36:00,190
originally this was in the context of

00:35:58,690 --> 00:36:03,070
supporting the Android container on

00:36:00,190 --> 00:36:05,380
Chrome OS since s Linux was a mandatory

00:36:03,070 --> 00:36:06,610
part of Android it was necessary to

00:36:05,380 --> 00:36:08,290
support it in the context of that

00:36:06,610 --> 00:36:10,330
container but there's work-in-progress

00:36:08,290 --> 00:36:12,730
visible in the open source chromium OS

00:36:10,330 --> 00:36:14,590
project that's extending the same

00:36:12,730 --> 00:36:16,810
selinux guarantees to all the

00:36:14,590 --> 00:36:18,460
criminalists processes providing similar

00:36:16,810 --> 00:36:21,060
protection guarantees throughout that

00:36:18,460 --> 00:36:21,060
platform

00:36:24,339 --> 00:36:28,579
in parallel with our broken SELinux

00:36:26,779 --> 00:36:30,650
another research project at the NSA

00:36:28,579 --> 00:36:33,559
began exploring emerging support for

00:36:30,650 --> 00:36:35,390
virtualization on commodity computers in

00:36:33,559 --> 00:36:38,359
combination with mac to support new

00:36:35,390 --> 00:36:40,039
functional and security needs this

00:36:38,359 --> 00:36:43,069
project created an architecture in a

00:36:40,039 --> 00:36:45,529
prototype known as net top the net top

00:36:43,069 --> 00:36:48,229
architecture combined VMware and SELinux

00:36:45,529 --> 00:36:50,420
in order to support connections to

00:36:48,229 --> 00:36:51,979
networks at differing security levels

00:36:50,420 --> 00:36:54,349
from a single unified desktop

00:36:51,979 --> 00:36:58,609
environment at top was an early

00:36:54,349 --> 00:37:00,019
pre-release user of selinux the same

00:36:58,609 --> 00:37:01,910
approach was later commercially realized

00:37:00,019 --> 00:37:03,859
in Red Hat secured virtualization or

00:37:01,910 --> 00:37:06,410
escort model and in its approach to

00:37:03,859 --> 00:37:08,449
using SEO Linux to enforce container

00:37:06,410 --> 00:37:10,189
separation and controls over the

00:37:08,449 --> 00:37:14,809
interactions between containers in the

00:37:10,189 --> 00:37:18,259
host OS as a net top transition to

00:37:14,809 --> 00:37:19,729
product a research group initiated a

00:37:18,259 --> 00:37:22,279
follow-on program known as the secure

00:37:19,729 --> 00:37:24,619
virtual platform secure virtual platform

00:37:22,279 --> 00:37:27,229
RSVP sought to go beyond that tops more

00:37:24,619 --> 00:37:28,969
limited usage of virtualization as well

00:37:27,229 --> 00:37:30,439
as begins being to leverage trusted

00:37:28,969 --> 00:37:32,179
computing technologies such as the

00:37:30,439 --> 00:37:34,759
trusted platform module and later until

00:37:32,179 --> 00:37:36,109
stress of execution technology in order

00:37:34,759 --> 00:37:38,839
to construct a secure system

00:37:36,109 --> 00:37:41,989
architecture in which we could obtain a

00:37:38,839 --> 00:37:44,869
higher assurance system even with lower

00:37:41,989 --> 00:37:46,699
assurance components this research

00:37:44,869 --> 00:37:49,069
program fed into a number of other

00:37:46,699 --> 00:37:51,920
efforts influencing a later NSA program

00:37:49,069 --> 00:37:54,499
and is the highest platform or half as

00:37:51,920 --> 00:37:57,309
well as an air force research research

00:37:54,499 --> 00:38:00,829
laboratory program known as secure view

00:37:57,309 --> 00:38:02,779
it also influenced Citrix Citrix is Zen

00:38:00,829 --> 00:38:06,199
client xt commercial product which was

00:38:02,779 --> 00:38:08,029
later open sourced as open xt and these

00:38:06,199 --> 00:38:10,099
same ideas were also fed into what

00:38:08,029 --> 00:38:11,779
became the first secure wireless laptop

00:38:10,099 --> 00:38:14,779
approved for use in sensitive government

00:38:11,779 --> 00:38:16,249
environments as well as the basis for a

00:38:14,779 --> 00:38:17,900
variety of research programs that we

00:38:16,249 --> 00:38:19,939
engaged in with external partners to

00:38:17,900 --> 00:38:23,079
explore similar ideas in the context of

00:38:19,939 --> 00:38:23,079
smartphones and tablets

00:38:25,060 --> 00:38:30,620
the transition 2 hypervisors was

00:38:28,970 --> 00:38:32,480
recognized as an opportunity to revisit

00:38:30,620 --> 00:38:34,640
microkernel like architectures for

00:38:32,480 --> 00:38:36,440
security some have said the hypervisors

00:38:34,640 --> 00:38:38,930
are micro kernels done right at the

00:38:36,440 --> 00:38:40,130
right level of abstraction in particular

00:38:38,930 --> 00:38:41,900
we're interested in be able to leverage

00:38:40,130 --> 00:38:44,930
hypervisors to isolate untrusted

00:38:41,900 --> 00:38:46,760
components such as drivers such that a

00:38:44,930 --> 00:38:48,050
single flaw and for example a wireless

00:38:46,760 --> 00:38:50,270
driver could no longer take down the

00:38:48,050 --> 00:38:52,190
entire system as well as to be able to

00:38:50,270 --> 00:38:53,740
isolate security critical components

00:38:52,190 --> 00:38:56,450
like a virtual private network or a

00:38:53,740 --> 00:38:58,100
inline disk encryption so that they

00:38:56,450 --> 00:38:59,720
could be strongly protected from the

00:38:58,100 --> 00:39:01,730
rest of the system and couldn't be

00:38:59,720 --> 00:39:03,650
bypassed enable used to provide the same

00:39:01,730 --> 00:39:06,020
notion of assured pipelines that we had

00:39:03,650 --> 00:39:08,480
from type enforcement in the context of

00:39:06,020 --> 00:39:11,870
these systems for this research which is

00:39:08,480 --> 00:39:13,520
Zen as a research platform like Linux in

00:39:11,870 --> 00:39:16,010
the country sir su Linux work then it

00:39:13,520 --> 00:39:18,400
was a viable open source hypervisor with

00:39:16,010 --> 00:39:20,600
the grant community adoption at the time

00:39:18,400 --> 00:39:22,070
wall Zen provide us with a good basis

00:39:20,600 --> 00:39:23,390
for performing our research we also

00:39:22,070 --> 00:39:26,030
recognized the need to make them

00:39:23,390 --> 00:39:28,220
suitable for security this led us to

00:39:26,030 --> 00:39:30,200
extend Zen to support hypervisor level

00:39:28,220 --> 00:39:32,810
mandatory access controls through the

00:39:30,200 --> 00:39:34,790
Zen security modules effort and the

00:39:32,810 --> 00:39:38,030
flask security module bringing the same

00:39:34,790 --> 00:39:40,040
underlying Mac model to Zen that we had

00:39:38,030 --> 00:39:42,110
in Linux which further then allowed us

00:39:40,040 --> 00:39:45,080
to compose this policies and analyze

00:39:42,110 --> 00:39:46,700
them together from our earlier

00:39:45,080 --> 00:39:48,020
microkernel based work we recognized the

00:39:46,700 --> 00:39:49,880
importance of having a secure

00:39:48,020 --> 00:39:52,070
lightweight inter-process communication

00:39:49,880 --> 00:39:53,710
mechanism that could be used and in the

00:39:52,070 --> 00:39:55,850
context of a hypervisor this

00:39:53,710 --> 00:39:57,890
necessitated a need for a secure

00:39:55,850 --> 00:40:00,050
interval machine communication mechanism

00:39:57,890 --> 00:40:01,790
one that wouldn't require for example a

00:40:00,050 --> 00:40:05,060
full network stack to be present or

00:40:01,790 --> 00:40:07,010
exposed by all the VMS in question this

00:40:05,060 --> 00:40:08,900
led to research and experimentation with

00:40:07,010 --> 00:40:11,060
a variety of interview and communication

00:40:08,900 --> 00:40:13,700
mechanisms from some early internal

00:40:11,060 --> 00:40:15,800
prototypes that we had to leveraging and

00:40:13,700 --> 00:40:18,830
generalizing the cubes OS V Chan

00:40:15,800 --> 00:40:21,890
mechanism to the v4 v mechanisms

00:40:18,830 --> 00:40:25,430
embodied in bromium and Xen client XT

00:40:21,890 --> 00:40:28,070
later open XT most recently upstream Zen

00:40:25,430 --> 00:40:29,960
has accepted a new mechanism known as

00:40:28,070 --> 00:40:31,820
Argo which provides many of the features

00:40:29,960 --> 00:40:33,450
and properties that we would desire in

00:40:31,820 --> 00:40:36,810
such a secure interview

00:40:33,450 --> 00:40:39,660
mechanism we also recognized the

00:40:36,810 --> 00:40:40,829
importance in being able to move towards

00:40:39,660 --> 00:40:43,520
higher assurance with the sign of

00:40:40,829 --> 00:40:46,560
decomposing domain zero which hosts

00:40:43,520 --> 00:40:48,329
conventionally a full operating system

00:40:46,560 --> 00:40:49,770
that provides the management stack and

00:40:48,329 --> 00:40:52,530
the device drivers of the system and

00:40:49,770 --> 00:40:53,940
conventional Zen based platforms we

00:40:52,530 --> 00:40:56,400
explored the ability to disaggregate

00:40:53,940 --> 00:40:58,079
that domain 0 through a number of

00:40:56,400 --> 00:41:00,720
research programs including the source

00:40:58,079 --> 00:41:02,910
system and we contributed upstream

00:41:00,720 --> 00:41:05,609
support to be able to split the hardware

00:41:02,910 --> 00:41:06,990
domain from the controlled domain forced

00:41:05,609 --> 00:41:08,270
them to facilitate that kind of

00:41:06,990 --> 00:41:10,470
decomposition

00:41:08,270 --> 00:41:12,420
there's also fed into work to support

00:41:10,470 --> 00:41:14,910
lightweight VMs so that we wouldn't have

00:41:12,420 --> 00:41:16,710
to have an entire OA stack in all the

00:41:14,910 --> 00:41:18,210
VMS of the system both from a

00:41:16,710 --> 00:41:20,359
scalability point of view and from a

00:41:18,210 --> 00:41:26,970
trusted computing base minimization

00:41:20,359 --> 00:41:29,790
perspective SVP embody is much more than

00:41:26,970 --> 00:41:32,849
just mandatory access control but in the

00:41:29,790 --> 00:41:34,950
context of SVP mac enables us to define

00:41:32,849 --> 00:41:38,420
enforce and validate the key security

00:41:34,950 --> 00:41:41,099
goals are being met in the system in SVP

00:41:38,420 --> 00:41:44,520
mac is enforced at multiple different

00:41:41,099 --> 00:41:46,349
layers of abstraction including the

00:41:44,520 --> 00:41:48,270
hypervisor the operating system within

00:41:46,349 --> 00:41:50,280
specific VMS and user space object

00:41:48,270 --> 00:41:52,460
managers running potentially on those

00:41:50,280 --> 00:41:54,930
operating systems or in lightweight VMS

00:41:52,460 --> 00:41:57,230
each of these components enforce Mac at

00:41:54,930 --> 00:42:00,359
the right abstraction layer for the

00:41:57,230 --> 00:42:03,300
goals it has and then leverages the Mac

00:42:00,359 --> 00:42:05,040
facilities and the secure IDC mechanisms

00:42:03,300 --> 00:42:07,260
in order to achieve their underlying

00:42:05,040 --> 00:42:09,510
dependencies the union of these Mac

00:42:07,260 --> 00:42:12,270
policies embodies the overall system

00:42:09,510 --> 00:42:13,980
security goals and provides a means of

00:42:12,270 --> 00:42:15,270
validating that end-to-end goals are

00:42:13,980 --> 00:42:17,160
being provided through the system

00:42:15,270 --> 00:42:18,690
something that's been explored in a

00:42:17,160 --> 00:42:20,930
variety of research efforts we've

00:42:18,690 --> 00:42:20,930
sponsored

00:42:23,130 --> 00:42:26,549
while our work in Monterrey acts

00:42:24,839 --> 00:42:28,470
controlled long predates SEL and I guess

00:42:26,549 --> 00:42:30,150
going back to the early 90s it's

00:42:28,470 --> 00:42:31,769
nonetheless interesting to compare the

00:42:30,150 --> 00:42:33,450
state of metrics control and mainstream

00:42:31,769 --> 00:42:36,029
systems at the time we released the say

00:42:33,450 --> 00:42:38,789
Linux vs. today at the time we release

00:42:36,029 --> 00:42:40,319
SEO Linux in 2000 to our knowledge there

00:42:38,789 --> 00:42:43,259
were no mainstream operating systems

00:42:40,319 --> 00:42:45,720
with Mac features at best there were the

00:42:43,259 --> 00:42:47,880
various trusted variants of the UNIX

00:42:45,720 --> 00:42:49,739
products which as I mentioned before

00:42:47,880 --> 00:42:51,269
tended to lag behind in terms of

00:42:49,739 --> 00:42:54,529
features updates an application support

00:42:51,269 --> 00:42:56,970
to their mainstream cousins today

00:42:54,529 --> 00:42:58,829
flexible metrics control can be found in

00:42:56,970 --> 00:43:01,170
a number of different operating systems

00:42:58,829 --> 00:43:02,460
even better it's not only supported by

00:43:01,170 --> 00:43:04,049
those operating systems it's being

00:43:02,460 --> 00:43:06,289
actively leveraged to achieve real

00:43:04,049 --> 00:43:09,359
security goals of interest to users

00:43:06,289 --> 00:43:12,329
interestingly traditional Mac mechanisms

00:43:09,359 --> 00:43:15,329
were introduced into some operating

00:43:12,329 --> 00:43:18,180
systems after the release of SC Linux in

00:43:15,329 --> 00:43:19,680
case Solaris the mentary x control

00:43:18,180 --> 00:43:21,269
features previously limited to the

00:43:19,680 --> 00:43:23,789
separate trusted Solaris product were

00:43:21,269 --> 00:43:26,420
folded into mainstream Solaris 2 the

00:43:23,789 --> 00:43:31,349
trusted extensions effort beginning in

00:43:26,420 --> 00:43:33,900
2006 and the context of Windows the next

00:43:31,349 --> 00:43:35,430
major release of Windows after the

00:43:33,900 --> 00:43:36,660
release of SC Linux incorporated

00:43:35,430 --> 00:43:38,549
something that they branded mandatory

00:43:36,660 --> 00:43:40,680
integrity controls which was an

00:43:38,549 --> 00:43:44,400
implementation of part of the Bible

00:43:40,680 --> 00:43:46,229
integrity model well these were

00:43:44,400 --> 00:43:49,469
traditional Mac implementations rather

00:43:46,229 --> 00:43:51,509
than flexible Mac nonetheless we can see

00:43:49,469 --> 00:43:54,539
that Mac has transitioned from being a

00:43:51,509 --> 00:43:56,219
nice feature of separate trusted OS

00:43:54,539 --> 00:44:02,190
products to being a mainstream feature

00:43:56,219 --> 00:44:03,569
of many operating systems today over the

00:44:02,190 --> 00:44:05,369
past few years we've also done some

00:44:03,569 --> 00:44:07,380
research and development exploring Mac

00:44:05,369 --> 00:44:08,849
and how it may pertain to emerging

00:44:07,380 --> 00:44:10,200
operating system architectures that are

00:44:08,849 --> 00:44:13,109
fundamentally different from many of the

00:44:10,200 --> 00:44:16,259
mainstream systems of the day which we

00:44:13,109 --> 00:44:18,420
had to talk about at last year's LS s in

00:44:16,259 --> 00:44:21,059
the context of Zephyr Zephyr is a

00:44:18,420 --> 00:44:24,210
real-time OS targeting the embedded

00:44:21,059 --> 00:44:25,769
space where that r2 resource constrained

00:44:24,210 --> 00:44:28,380
to run Linux and so this raises

00:44:25,769 --> 00:44:30,509
interesting questions about how to adapt

00:44:28,380 --> 00:44:32,119
mentor X controls for these highly

00:44:30,509 --> 00:44:34,880
resource constrained devices and

00:44:32,119 --> 00:44:37,910
preserving real time guarantees even an

00:44:34,880 --> 00:44:40,250
Mack based scheme our earliest effort

00:44:37,910 --> 00:44:42,019
was focused more on basic enabling of

00:44:40,250 --> 00:44:44,509
critical features necessary as

00:44:42,019 --> 00:44:46,960
precursors to Mack but this remains an

00:44:44,509 --> 00:44:49,549
area of interest to us going forward

00:44:46,960 --> 00:44:53,059
fuchsia is another emerging operating

00:44:49,549 --> 00:44:54,740
system seemingly targeting more capable

00:44:53,059 --> 00:44:57,349
devices in the internet-of-things space

00:44:54,740 --> 00:44:59,240
and it's of interest because it blends

00:44:57,349 --> 00:45:01,309
some of the historic work on

00:44:59,240 --> 00:45:04,579
capability-based micro kernels as well

00:45:01,309 --> 00:45:06,799
as hypervisor functionality and so it is

00:45:04,579 --> 00:45:08,960
potentially a place to revisit both the

00:45:06,799 --> 00:45:11,420
interaction of Mack and capabilities as

00:45:08,960 --> 00:45:16,460
well as the integration of the secure

00:45:11,420 --> 00:45:18,859
virtual platform concepts there are a

00:45:16,460 --> 00:45:21,049
number of different areas that remain as

00:45:18,859 --> 00:45:22,369
challenges and potential future research

00:45:21,049 --> 00:45:25,039
in development for maximum of which

00:45:22,369 --> 00:45:27,950
we've explored in our prior research but

00:45:25,039 --> 00:45:30,380
have not yet fully been embraced or

00:45:27,950 --> 00:45:32,630
deployed into production systems that

00:45:30,380 --> 00:45:34,609
can be easily used usability remains a

00:45:32,630 --> 00:45:37,549
key challenge for mentor X control

00:45:34,609 --> 00:45:40,309
implementations in general not only su

00:45:37,549 --> 00:45:43,519
Linux but others as well and in

00:45:40,309 --> 00:45:45,400
particular being able to advance the

00:45:43,519 --> 00:45:49,250
usability of these systems without

00:45:45,400 --> 00:45:52,490
sacrificing security remains a key open

00:45:49,250 --> 00:45:55,700
issue that would benefit from further

00:45:52,490 --> 00:45:57,710
examination even in the early days of

00:45:55,700 --> 00:46:00,170
flask we looked at how to compose

00:45:57,710 --> 00:46:03,170
multiple Mac models SEO Linux itself

00:46:00,170 --> 00:46:05,059
embodies multiple Mac models today but

00:46:03,170 --> 00:46:07,910
this problem will become even more

00:46:05,059 --> 00:46:10,460
pressing as systems support stacking

00:46:07,910 --> 00:46:13,039
abilities for example and there's wider

00:46:10,460 --> 00:46:14,569
use of multiple models together the

00:46:13,039 --> 00:46:18,369
simplistic models are simply requiring

00:46:14,569 --> 00:46:20,809
all of the mac schemes to agree will

00:46:18,369 --> 00:46:22,700
gradually be less and less satisfying

00:46:20,809 --> 00:46:24,289
and supporting more complex ways of

00:46:22,700 --> 00:46:26,839
composing them will become more crucial

00:46:24,289 --> 00:46:30,470
and yet in a way that preserves security

00:46:26,839 --> 00:46:33,920
as Mac becomes more widespread being

00:46:30,470 --> 00:46:35,329
able to enforce and manage policies of a

00:46:33,920 --> 00:46:36,440
distributed Mac system whether we're

00:46:35,329 --> 00:46:38,809
talking about a collection of different

00:46:36,440 --> 00:46:41,269
network systems or virtualized system

00:46:38,809 --> 00:46:45,410
with Mac and multiple layers will become

00:46:41,269 --> 00:46:47,269
more pressing and lastly well most

00:46:45,410 --> 00:46:48,359
existing Mac schemes are primarily

00:46:47,269 --> 00:46:50,849
oriented toward support

00:46:48,359 --> 00:46:52,559
single parties interests whereas most

00:46:50,849 --> 00:46:54,029
real-world platforms have multiple

00:46:52,559 --> 00:46:56,730
parties potentially with competing

00:46:54,029 --> 00:46:59,150
interests at stake in them and so being

00:46:56,730 --> 00:47:01,980
able to support these multi party

00:46:59,150 --> 00:47:03,869
situations and be able to reconcile and

00:47:01,980 --> 00:47:10,650
of course the security goals of them all

00:47:03,869 --> 00:47:12,269
will become an increasing need well

00:47:10,650 --> 00:47:14,190
we've come a long way with regard to Mac

00:47:12,269 --> 00:47:16,619
and it's today well established for

00:47:14,190 --> 00:47:18,029
operating system hardening and some core

00:47:16,619 --> 00:47:19,650
concepts such as isolation of

00:47:18,029 --> 00:47:22,710
applications containers of virtual

00:47:19,650 --> 00:47:25,559
machines much of our earlier vision for

00:47:22,710 --> 00:47:27,390
extending Mac up through a user space to

00:47:25,559 --> 00:47:29,640
provide a uniform access control model

00:47:27,390 --> 00:47:32,489
that can be provided to enforce

00:47:29,640 --> 00:47:34,559
end-to-end access control as data goes

00:47:32,489 --> 00:47:37,769
through all the different layers it's

00:47:34,559 --> 00:47:39,630
not fully realized today instead there's

00:47:37,769 --> 00:47:41,880
a tendency to reinvent access control

00:47:39,630 --> 00:47:43,410
models each different layer using

00:47:41,880 --> 00:47:44,849
different abstractions and fundamental

00:47:43,410 --> 00:47:47,009
primitives in a matter that makes

00:47:44,849 --> 00:47:48,480
analysis and validation that a coherent

00:47:47,009 --> 00:47:51,329
set of goals is being met very

00:47:48,480 --> 00:47:53,460
challenging it's also not being truly

00:47:51,329 --> 00:47:55,799
leveraged in emerging technology spaces

00:47:53,460 --> 00:48:01,049
which again are commonly reinventing the

00:47:55,799 --> 00:48:02,369
wheel so just as in 1998 we published a

00:48:01,049 --> 00:48:05,119
paper noting the inevitability of

00:48:02,369 --> 00:48:07,049
failure with respect to security if

00:48:05,119 --> 00:48:09,329
mechanisms such as Mac weren't

00:48:07,049 --> 00:48:10,759
incorporated into operating systems we'd

00:48:09,329 --> 00:48:13,980
have to say much the same is true today

00:48:10,759 --> 00:48:15,930
that the failure to incorporate these

00:48:13,980 --> 00:48:18,690
mechanisms as well as to leverage them

00:48:15,930 --> 00:48:20,279
for meeting the fundamental dependencies

00:48:18,690 --> 00:48:22,739
of higher-level services and emerging

00:48:20,279 --> 00:48:25,440
technologies will fundamentally doom the

00:48:22,739 --> 00:48:27,569
security scheme to failure so my call to

00:48:25,440 --> 00:48:30,569
you is as you engage in security

00:48:27,569 --> 00:48:32,430
developments please where it is

00:48:30,569 --> 00:48:34,349
appropriate leverage the underlying Mac

00:48:32,430 --> 00:48:37,049
schemes to meet the assumptions and

00:48:34,349 --> 00:48:39,059
dependencies your schemes have and then

00:48:37,049 --> 00:48:40,589
seek to extend that so that coherent and

00:48:39,059 --> 00:48:46,160
consistent access control can be applied

00:48:40,589 --> 00:48:56,760
throughout the whole platform thank you

00:48:46,160 --> 00:48:56,760
[Applause]

00:48:57,120 --> 00:49:00,930
we have time for some

00:49:06,829 --> 00:49:11,869
thank you for the interesting talk I

00:49:09,690 --> 00:49:14,579
want to ask about your views on the

00:49:11,869 --> 00:49:17,339
quality of implementation aspects

00:49:14,579 --> 00:49:19,319
especially in the context of unique

00:49:17,339 --> 00:49:22,920
kernels written in memory and safe

00:49:19,319 --> 00:49:24,240
languages like for example Linux so

00:49:22,920 --> 00:49:26,760
let's say there is this unprivileged

00:49:24,240 --> 00:49:30,030
system called $1 the temporaries kernel

00:49:26,760 --> 00:49:32,700
memory and safe leap asily Knox enabled

00:49:30,030 --> 00:49:35,220
flag and then suddenly all of this is

00:49:32,700 --> 00:49:38,849
disabled so you mentioned hypervisors

00:49:35,220 --> 00:49:43,109
and micro kernels several times are

00:49:38,849 --> 00:49:51,020
those required for these to deliver the

00:49:43,109 --> 00:49:53,490
guarantees or not ok so we view

00:49:51,020 --> 00:49:56,310
architectural improvements such as

00:49:53,490 --> 00:49:57,900
hypervisor based technologies they've

00:49:56,310 --> 00:49:59,430
also been a big trend that was discussed

00:49:57,900 --> 00:50:05,040
yesterday about trusted execution

00:49:59,430 --> 00:50:07,050
environments and a number of different

00:50:05,040 --> 00:50:10,410
hardware base capabilities that are

00:50:07,050 --> 00:50:14,119
emerging so I guess I mean tackled two

00:50:10,410 --> 00:50:16,440
different things there so one is while

00:50:14,119 --> 00:50:18,420
we're certainly not opposed to use of

00:50:16,440 --> 00:50:20,970
safer languages where appropriate we

00:50:18,420 --> 00:50:23,160
don't think they magically solve all

00:50:20,970 --> 00:50:25,220
security problems and they often have

00:50:23,160 --> 00:50:29,839
run times that themselves have

00:50:25,220 --> 00:50:32,220
dependencies right that have concerns so

00:50:29,839 --> 00:50:34,230
to the extent possible we want to be

00:50:32,220 --> 00:50:36,359
able to leverage Hardware primitives to

00:50:34,230 --> 00:50:38,849
be able to provide us with some safety

00:50:36,359 --> 00:50:40,740
guarantees so using a hypervisor based

00:50:38,849 --> 00:50:43,710
architecture or doing a microkernel

00:50:40,740 --> 00:50:45,300
based decomposition of the OS provides

00:50:43,710 --> 00:50:47,069
us with more of this Hardware backed

00:50:45,300 --> 00:50:50,700
guarantees rather than just the language

00:50:47,069 --> 00:50:52,920
based securities that said where

00:50:50,700 --> 00:50:55,260
appropriate use the safe languages right

00:50:52,920 --> 00:50:57,869
to make specific components an

00:50:55,260 --> 00:51:00,900
architectural model like this allows us

00:50:57,869 --> 00:51:02,460
to focus attention where most critical

00:51:00,900 --> 00:51:04,770
in the system to get the higher

00:51:02,460 --> 00:51:07,170
assurance and then use the architectural

00:51:04,770 --> 00:51:09,839
guarantees to provide us with the

00:51:07,170 --> 00:51:13,400
overall system goal because it's

00:51:09,839 --> 00:51:13,400
impractical for us to reimplementation

00:51:15,569 --> 00:51:20,609
with regard to trusted execution

00:51:18,329 --> 00:51:23,460
environments and that whole approach to

00:51:20,609 --> 00:51:25,140
things the caveat we have with this is a

00:51:23,460 --> 00:51:27,270
lot of times they're just moving the

00:51:25,140 --> 00:51:30,540
trusted OS problem from one place to

00:51:27,270 --> 00:51:33,150
another right so we might move the

00:51:30,540 --> 00:51:35,040
trusted OS problem from the normal world

00:51:33,150 --> 00:51:37,140
to the secure world and I trust zone

00:51:35,040 --> 00:51:39,180
based architecture for example so we

00:51:37,140 --> 00:51:40,619
have all the same issues still so

00:51:39,180 --> 00:51:42,810
something we still need to address those

00:51:40,619 --> 00:51:45,150
issues and then real-world users still

00:51:42,810 --> 00:51:47,579
have security care abouts in the so

00:51:45,150 --> 00:51:49,770
called non secure untrusted side that

00:51:47,579 --> 00:51:51,329
matter to them and so that itself

00:51:49,770 --> 00:51:54,589
doesn't obviate or eliminate the need

00:51:51,329 --> 00:51:54,589
for those mechanisms

00:52:02,730 --> 00:52:09,060
I so thank you so much for your work

00:52:06,869 --> 00:52:10,800
this is all fantastic stuff I was

00:52:09,060 --> 00:52:12,329
looking for it until you got to the end

00:52:10,800 --> 00:52:15,450
when you were talking about multi-party

00:52:12,329 --> 00:52:19,320
and the usability and both of those are

00:52:15,450 --> 00:52:21,060
concerns that that I think make make a

00:52:19,320 --> 00:52:24,450
lot of these systems very difficult to

00:52:21,060 --> 00:52:26,460
imagine using in a much more broad way I

00:52:24,450 --> 00:52:28,440
think the the places you guys have

00:52:26,460 --> 00:52:29,550
pushed it is really fantastic the other

00:52:28,440 --> 00:52:33,570
thing I was wondering if you could touch

00:52:29,550 --> 00:52:35,880
on a little bit is how a flexible Mac

00:52:33,570 --> 00:52:37,320
architecture deals with the assumption

00:52:35,880 --> 00:52:40,380
of bugs and the assumption of

00:52:37,320 --> 00:52:45,329
vulnerabilities in in components within

00:52:40,380 --> 00:52:48,510
the system and I absolutely like the

00:52:45,329 --> 00:52:50,220
benefit of sandboxing and keeping

00:52:48,510 --> 00:52:53,579
isolating the vulnerability to a

00:52:50,220 --> 00:52:55,410
relatively small area but in the but it

00:52:53,579 --> 00:52:58,530
seems like there are a few assumptions

00:52:55,410 --> 00:53:00,900
of things that we assume that cannot be

00:52:58,530 --> 00:53:03,119
tampered with so for example offline

00:53:00,900 --> 00:53:07,290
vulnerabilities that tamper with labels

00:53:03,119 --> 00:53:10,130
or the presence of a bug that allows you

00:53:07,290 --> 00:53:12,329
to influence one of those fundamental

00:53:10,130 --> 00:53:13,980
primitives that the security system

00:53:12,329 --> 00:53:19,650
depends on so being able to modify

00:53:13,980 --> 00:53:21,450
labels being able to modify the the way

00:53:19,650 --> 00:53:28,980
that types are labeled on objects in the

00:53:21,450 --> 00:53:31,230
system and the same question then with

00:53:28,980 --> 00:53:33,329
regard to offline tampering where the

00:53:31,230 --> 00:53:35,190
system is not running and where we have

00:53:33,329 --> 00:53:37,560
an external actor able to modify those

00:53:35,190 --> 00:53:39,630
things from an offline environment where

00:53:37,560 --> 00:53:42,540
all of the analysis doesn't help us

00:53:39,630 --> 00:53:45,869
because we can't we can't model that

00:53:42,540 --> 00:53:48,690
offline attacker right so with regard to

00:53:45,869 --> 00:53:51,329
the first piece the concern about

00:53:48,690 --> 00:53:53,700
residual vulnerabilities in core

00:53:51,329 --> 00:53:56,640
components that have to be trusted right

00:53:53,700 --> 00:53:58,740
so our goal is architectural we want to

00:53:56,640 --> 00:54:00,540
limit trust in every component of the

00:53:58,740 --> 00:54:04,319
system to only what it has to be trusted

00:54:00,540 --> 00:54:06,720
to do and then we can focus our

00:54:04,319 --> 00:54:08,430
assurance efforts very specifically

00:54:06,720 --> 00:54:10,140
right which is pretty critical if you're

00:54:08,430 --> 00:54:11,880
gonna get assurance right because we

00:54:10,140 --> 00:54:13,440
will never get high surance for a whole

00:54:11,880 --> 00:54:15,180
system or a complex software system

00:54:13,440 --> 00:54:16,630
right well I shouldn't say never but

00:54:15,180 --> 00:54:20,170
it's gonna be a long time

00:54:16,630 --> 00:54:22,120
and so that's a key architecture element

00:54:20,170 --> 00:54:24,100
and then what I didn't talk about in

00:54:22,120 --> 00:54:25,300
this talk because it's not a Mac topic

00:54:24,100 --> 00:54:27,130
is we have a little other body of

00:54:25,300 --> 00:54:28,870
research and development in what's known

00:54:27,130 --> 00:54:32,860
as the measurement and attestation space

00:54:28,870 --> 00:54:35,800
and so in addition to creating these

00:54:32,860 --> 00:54:37,270
architectural guarantees for prevention

00:54:35,800 --> 00:54:41,350
we also have a body of work that's

00:54:37,270 --> 00:54:42,250
looking at how to determine whether the

00:54:41,350 --> 00:54:45,010
different software components of the

00:54:42,250 --> 00:54:47,590
system are both loaded and still in the

00:54:45,010 --> 00:54:51,370
expected state that we expect them to be

00:54:47,590 --> 00:54:53,770
in so we have developed prototypes for

00:54:51,370 --> 00:54:56,470
example to be able to measure a running

00:54:53,770 --> 00:54:59,710
Linux kernel and determine that it's

00:54:56,470 --> 00:55:01,060
still in the expected state not just

00:54:59,710 --> 00:55:03,520
when it's first loaded but at any time

00:55:01,060 --> 00:55:07,360
during its execution and then do like

00:55:03,520 --> 00:55:10,240
inter VM introspection or to run a

00:55:07,360 --> 00:55:13,630
introspection from system management

00:55:10,240 --> 00:55:14,470
mode running on an STM for example and

00:55:13,630 --> 00:55:17,440
we done the same kind of thing for

00:55:14,470 --> 00:55:19,360
hypervisors within context of Zen so

00:55:17,440 --> 00:55:23,320
building out an architecture where we

00:55:19,360 --> 00:55:26,080
can drive our assurance efforts in a way

00:55:23,320 --> 00:55:27,730
that's scalable limit residual

00:55:26,080 --> 00:55:30,550
vulnerabilities in the other components

00:55:27,730 --> 00:55:32,470
and detect vulnerabilities and find the

00:55:30,550 --> 00:55:34,720
key places to stand on the platform from

00:55:32,470 --> 00:55:37,980
which we can conduct those guarantees

00:55:34,720 --> 00:55:41,080
has been a big part of this body of work

00:55:37,980 --> 00:55:42,610
and has also been challenging because

00:55:41,080 --> 00:55:44,050
every time we find a place to stand on

00:55:42,610 --> 00:55:46,990
the platform from which we can do that

00:55:44,050 --> 00:55:48,430
kind of analysis it seems like the

00:55:46,990 --> 00:55:50,980
hardware manufacturers introduce a new

00:55:48,430 --> 00:55:53,290
place to stand that we don't have

00:55:50,980 --> 00:56:00,420
visibility into so we would like that to

00:55:53,290 --> 00:56:00,420
stop sorry one more question

00:56:03,970 --> 00:56:07,630
so one of the things that it always

00:56:05,710 --> 00:56:09,700
jumps out to me about descriptions of

00:56:07,630 --> 00:56:11,410
selinux and similar systems they tend to

00:56:09,700 --> 00:56:13,600
focus on policies coming from the

00:56:11,410 --> 00:56:16,090
administrator in contrast to systems

00:56:13,600 --> 00:56:17,710
like second PPF or Apple's seatbelt

00:56:16,090 --> 00:56:19,900
which tend to sort of place the

00:56:17,710 --> 00:56:23,080
developer at the of the software at the

00:56:19,900 --> 00:56:24,730
center of like policy creation do you

00:56:23,080 --> 00:56:26,680
think these are just like vocabulary

00:56:24,730 --> 00:56:27,940
things just different ways of talking

00:56:26,680 --> 00:56:29,920
about the same thing or do you think

00:56:27,940 --> 00:56:40,630
these descriptions ultimately dictate

00:56:29,920 --> 00:56:43,690
different architectures so Mac can be a

00:56:40,630 --> 00:56:47,950
somewhat relative term right so

00:56:43,690 --> 00:56:49,180
mandatory with respect to whom and so

00:56:47,950 --> 00:56:53,110
you can kind of scale that all the way

00:56:49,180 --> 00:56:55,980
from I have an administrator or system

00:56:53,110 --> 00:56:59,020
builder who dictates the whole policy to

00:56:55,980 --> 00:57:02,110
this component dictates policy for these

00:56:59,020 --> 00:57:03,400
other components and there's even a sort

00:57:02,110 --> 00:57:05,020
of a notion of that in the context of

00:57:03,400 --> 00:57:06,550
our user space object manager model

00:57:05,020 --> 00:57:09,040
because then the user space object

00:57:06,550 --> 00:57:11,050
manager models are enforcing policy

00:57:09,040 --> 00:57:12,460
respective to their objects right so

00:57:11,050 --> 00:57:16,000
there's obviously a delegated trust

00:57:12,460 --> 00:57:18,400
model there the the problem I think we

00:57:16,000 --> 00:57:22,180
often get into the further you take it

00:57:18,400 --> 00:57:24,280
up the discretionary access right is the

00:57:22,180 --> 00:57:26,170
more susceptible you are to or the

00:57:24,280 --> 00:57:28,660
greater the assurance burden then is on

00:57:26,170 --> 00:57:31,090
the user space components to be free of

00:57:28,660 --> 00:57:32,950
vulnerabilities and bugs right and to

00:57:31,090 --> 00:57:34,630
get their respective policies right

00:57:32,950 --> 00:57:35,920
which particularly is you move into the

00:57:34,630 --> 00:57:38,500
set comp world and you have a more

00:57:35,920 --> 00:57:41,170
programmatic type model right analysis

00:57:38,500 --> 00:57:43,600
of a set comp policy I think is much

00:57:41,170 --> 00:57:45,640
more challenging than analysis of a Mac

00:57:43,600 --> 00:57:48,850
policy right and so it can be hard to

00:57:45,640 --> 00:57:51,250
gain assurance there so in general what

00:57:48,850 --> 00:57:53,560
we would like to see is as you build the

00:57:51,250 --> 00:57:55,930
higher level mechanism if you can route

00:57:53,560 --> 00:57:57,580
that in some underlying guarantees like

00:57:55,930 --> 00:58:00,130
that the Mac mechanism provides you that

00:57:57,580 --> 00:58:02,560
are needed for its basic safety right

00:58:00,130 --> 00:58:04,859
then we can get some better granularity

00:58:02,560 --> 00:58:08,369
more dynamic

00:58:04,859 --> 00:58:11,880
controls that are good to have but still

00:58:08,369 --> 00:58:15,650
have some baseline hard bounds on the

00:58:11,880 --> 00:58:15,650
possible range of actions in the system

00:58:20,569 --> 00:58:26,849
okay so we'll finish up with the

00:58:23,640 --> 00:58:31,500
questions there and continue discussions

00:58:26,849 --> 00:58:32,850
during the conference as needed so thank

00:58:31,500 --> 00:58:42,270
you once again Steven

00:58:32,850 --> 00:58:42,270

YouTube URL: https://www.youtube.com/watch?v=AKWFbxbsU3o


