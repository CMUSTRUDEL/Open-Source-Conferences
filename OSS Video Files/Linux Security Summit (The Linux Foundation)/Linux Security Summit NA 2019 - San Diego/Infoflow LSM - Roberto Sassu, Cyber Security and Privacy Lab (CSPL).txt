Title: Infoflow LSM - Roberto Sassu, Cyber Security and Privacy Lab (CSPL)
Publication date: 2019-08-28
Playlist: Linux Security Summit NA 2019 - San Diego
Description: 
	Infoflow LSM - Roberto Sassu, Cyber Security and Privacy Lab (CSPL)
Captions: 
	00:00:00,030 --> 00:00:05,100
so hello everyone good afternoon my name

00:00:02,490 --> 00:00:08,599
is Roberto Sasso I am a senior engineer

00:00:05,100 --> 00:00:12,660
our way today I would like to present

00:00:08,599 --> 00:00:15,540
info floral SM is a new linux security

00:00:12,660 --> 00:00:19,980
module that specifically and force

00:00:15,540 --> 00:00:23,220
integrity policy this is only a piece of

00:00:19,980 --> 00:00:26,490
the puzzle of a solution that allows us

00:00:23,220 --> 00:00:28,500
to have a stable PCR in a system in a

00:00:26,490 --> 00:00:33,390
legacy system which perform integrity

00:00:28,500 --> 00:00:38,250
measurements with I'ma and enable us to

00:00:33,390 --> 00:00:41,640
have a sealing policy forward

00:00:38,250 --> 00:00:43,950
TLS scheme this TLS key can be used only

00:00:41,640 --> 00:00:48,510
with a good software configuration but

00:00:43,950 --> 00:00:50,690
today we talk about only this part for

00:00:48,510 --> 00:00:54,239
the enforcement of the integrity policy

00:00:50,690 --> 00:00:58,020
why we need the enforcement of integrity

00:00:54,239 --> 00:01:01,230
policy why infoproviders i'm then i will

00:00:58,020 --> 00:01:05,390
give an overview of the various security

00:01:01,230 --> 00:01:07,470
module and the demo and the conclusion

00:01:05,390 --> 00:01:10,920
what we need an integrity policy

00:01:07,470 --> 00:01:13,189
basically we have a standard I'm on this

00:01:10,920 --> 00:01:17,250
is the lifecycle of multiple files

00:01:13,189 --> 00:01:20,939
initially the content is known and when

00:01:17,250 --> 00:01:23,040
the reader reads this file this can be

00:01:20,939 --> 00:01:26,610
recognized from a list of reference

00:01:23,040 --> 00:01:30,000
measurement however after the first axis

00:01:26,610 --> 00:01:32,340
there are some rights then the content

00:01:30,000 --> 00:01:35,490
of the file is not known anymore and at

00:01:32,340 --> 00:01:38,790
the next reader then we get in the

00:01:35,490 --> 00:01:41,729
measurement least these new digest and

00:01:38,790 --> 00:01:44,369
this cannot be verified so we send it to

00:01:41,729 --> 00:01:46,560
to automotive early fire that I'm not

00:01:44,369 --> 00:01:48,780
verified checks the digest and it sees

00:01:46,560 --> 00:01:52,680
that there is no reference measurement

00:01:48,780 --> 00:01:53,310
measurement for that so I will solve

00:01:52,680 --> 00:01:56,759
this problem

00:01:53,310 --> 00:01:58,619
first we give you some definition so

00:01:56,759 --> 00:02:01,350
intend integrity has the ability of a

00:01:58,619 --> 00:02:04,290
software to behave as intended of by the

00:02:01,350 --> 00:02:06,270
developer integrity policies of a set of

00:02:04,290 --> 00:02:08,640
a set of a rule that allow us to

00:02:06,270 --> 00:02:12,270
preserve the integrity of software and

00:02:08,640 --> 00:02:14,489
the transit computing base is the set of

00:02:12,270 --> 00:02:16,170
subject and object which don't we

00:02:14,489 --> 00:02:20,400
violated the rules of the integrity

00:02:16,170 --> 00:02:22,140
policy particularly what which policy we

00:02:20,400 --> 00:02:25,770
want to enforce we want a vote enforce

00:02:22,140 --> 00:02:28,140
clerk reason there are the the first

00:02:25,770 --> 00:02:31,830
rule rule is that inori down so a

00:02:28,140 --> 00:02:35,040
subject should not read an object with a

00:02:31,830 --> 00:02:37,379
lower integrity level outside the DCB

00:02:35,040 --> 00:02:40,170
because potentially this file can

00:02:37,379 --> 00:02:42,840
contain malicious data and then the

00:02:40,170 --> 00:02:45,780
software can be corrupted them no very

00:02:42,840 --> 00:02:48,150
top so a process outside the TCB should

00:02:45,780 --> 00:02:48,720
not be allowed to write a file inside

00:02:48,150 --> 00:02:50,280
etcb

00:02:48,720 --> 00:02:54,269
for the same reason because it may

00:02:50,280 --> 00:02:56,760
inject malicious data and the printer

00:02:54,269 --> 00:03:01,260
process inside the TCB may be corrupted

00:02:56,760 --> 00:03:03,930
from this and turn we have a filtering

00:03:01,260 --> 00:03:07,970
interfaces so we allow some violations

00:03:03,930 --> 00:03:10,650
so we allow subject insulate ECB to read

00:03:07,970 --> 00:03:13,100
potentially malicious data with a

00:03:10,650 --> 00:03:15,620
condition that this subject as

00:03:13,100 --> 00:03:18,320
filtering interfacer so it don't does

00:03:15,620 --> 00:03:24,830
not become corrupted when it reads this

00:03:18,320 --> 00:03:29,270
file so when we enforced the clock with

00:03:24,830 --> 00:03:32,240
some policy we know exactly which

00:03:29,270 --> 00:03:33,710
subject and object are in the PCB so we

00:03:32,240 --> 00:03:36,680
are now considering a multiple file

00:03:33,710 --> 00:03:39,020
inside the TCB and we have a reader

00:03:36,680 --> 00:03:41,870
which read the file for the first time

00:03:39,020 --> 00:03:46,270
time so the devil is known and the

00:03:41,870 --> 00:03:48,950
digest season is known and then the

00:03:46,270 --> 00:03:52,790
malodorous control so the Linux security

00:03:48,950 --> 00:03:56,360
model depending on so if the subject is

00:03:52,790 --> 00:03:58,820
in the TCB it allows the writer if the

00:03:56,360 --> 00:04:03,350
subject is not in the disappea then we

00:03:58,820 --> 00:04:09,680
denied that right so if all the brides

00:04:03,350 --> 00:04:11,930
are performant by the TCB we we can we

00:04:09,680 --> 00:04:13,370
can say that the file does not become

00:04:11,930 --> 00:04:14,630
corrupted so the integrity of this

00:04:13,370 --> 00:04:18,830
multiple files good

00:04:14,630 --> 00:04:20,330
so this allow us to say well okay the

00:04:18,830 --> 00:04:22,880
file was good at the beginning so we

00:04:20,330 --> 00:04:25,250
have the initial content is known and

00:04:22,880 --> 00:04:27,140
then the integrity of this file is

00:04:25,250 --> 00:04:29,840
preserved so we can exclude it from the

00:04:27,140 --> 00:04:32,540
measurement which evidence we give to

00:04:29,840 --> 00:04:34,580
the to the verifier then we give the

00:04:32,540 --> 00:04:36,980
evidence of the initial content of the

00:04:34,580 --> 00:04:39,080
file and then the monitor has control

00:04:36,980 --> 00:04:41,420
policy that we are enforcing so the fact

00:04:39,080 --> 00:04:44,210
that we this valleys in the DCP and

00:04:41,420 --> 00:04:50,450
which the subject in that ECB can

00:04:44,210 --> 00:04:53,420
actually write this this file we also

00:04:50,450 --> 00:04:57,710
have a more complicated scheme in which

00:04:53,420 --> 00:05:02,060
we consider a sort of line protection in

00:04:57,710 --> 00:05:03,860
this scheme we have the AVM key that is

00:05:02,060 --> 00:05:07,430
used to calculate the edge Mac for the

00:05:03,860 --> 00:05:09,370
file and this ADM key is actually ceded

00:05:07,430 --> 00:05:11,980
to

00:05:09,370 --> 00:05:14,620
to the makeup or is it to the monetarist

00:05:11,980 --> 00:05:18,730
control policy and to the initial value

00:05:14,620 --> 00:05:21,010
why because when we boot the the system

00:05:18,730 --> 00:05:24,220
the second time so if we provide

00:05:21,010 --> 00:05:27,639
evidence that the integrity policies

00:05:24,220 --> 00:05:29,530
imported them and then we have the key

00:05:27,639 --> 00:05:34,389
policy which is bound to the initial

00:05:29,530 --> 00:05:38,560
content of the file and initial content

00:05:34,389 --> 00:05:41,710
of the file then we can even if we are

00:05:38,560 --> 00:05:42,700
in the in the next boot we know that in

00:05:41,710 --> 00:05:45,040
the first boot

00:05:42,700 --> 00:05:46,990
the file was processed correctly because

00:05:45,040 --> 00:05:49,120
it was processed by the same the same

00:05:46,990 --> 00:05:57,760
manner tourism a notorious control

00:05:49,120 --> 00:06:00,580
policy why we we have a winter looser

00:05:57,760 --> 00:06:03,310
than new last time and why we don't use

00:06:00,580 --> 00:06:06,430
for example say Linux so you actually

00:06:03,310 --> 00:06:09,750
can do can enforce the multi-level

00:06:06,430 --> 00:06:12,940
security policy but actually it's not

00:06:09,750 --> 00:06:15,669
easy because for example we have to

00:06:12,940 --> 00:06:18,370
select a different policy I don't know

00:06:15,669 --> 00:06:23,470
if it is possible easily to specify

00:06:18,370 --> 00:06:27,070
which subject are in the TCB so I was

00:06:23,470 --> 00:06:29,380
thinking to do a different independent

00:06:27,070 --> 00:06:32,680
security model which allow us to to

00:06:29,380 --> 00:06:35,340
define that this be more easily and also

00:06:32,680 --> 00:06:38,470
say Linux does not have the concept of

00:06:35,340 --> 00:06:40,479
filtering subject so with a multi-level

00:06:38,470 --> 00:06:45,640
security we can enforce the Biba

00:06:40,479 --> 00:06:49,330
integrity modern and so they know read

00:06:45,640 --> 00:06:52,419
the down and not write up rules but for

00:06:49,330 --> 00:06:54,430
example if we have some violations so if

00:06:52,419 --> 00:06:56,200
a subsidy the CB tries to read the

00:06:54,430 --> 00:06:59,569
object outside etcb

00:06:56,200 --> 00:07:02,419
then celine oxide is not

00:06:59,569 --> 00:07:04,419
the language the policy language is not

00:07:02,419 --> 00:07:12,679
powerful enough to enforce this kind of

00:07:04,419 --> 00:07:15,409
rule also so when we enforce the

00:07:12,679 --> 00:07:17,929
integrity integrity policy we have to

00:07:15,409 --> 00:07:20,749
know which are the interaction of the

00:07:17,929 --> 00:07:23,749
processor so which file are read by the

00:07:20,749 --> 00:07:25,459
processor which file are written and if

00:07:23,749 --> 00:07:27,889
we try to discover all the process

00:07:25,459 --> 00:07:29,659
interaction from without a subsystem

00:07:27,889 --> 00:07:31,819
this is a particularly difficult

00:07:29,659 --> 00:07:35,449
difficult job because we have many

00:07:31,819 --> 00:07:37,939
duplicates permission because all it

00:07:35,449 --> 00:07:40,849
does not know if the same permission was

00:07:37,939 --> 00:07:43,629
requested before so we have many many

00:07:40,849 --> 00:07:48,499
locks and we have to analyze them and

00:07:43,629 --> 00:07:50,180
also so if we want to support a clerk

00:07:48,499 --> 00:07:52,550
with some policy for example is marker

00:07:50,180 --> 00:07:55,069
or incidence we have to apply the

00:07:52,550 --> 00:07:57,229
modification in every security model

00:07:55,069 --> 00:08:05,599
instead and we can do the enforcement on

00:07:57,229 --> 00:08:07,969
top on a different security module so we

00:08:05,599 --> 00:08:11,360
can enforce it and this integrity policy

00:08:07,969 --> 00:08:14,539
and we use the LSM stocking capability

00:08:11,360 --> 00:08:16,759
to do that so we we don't modify the

00:08:14,539 --> 00:08:19,459
city nukes policy on the or the Smok

00:08:16,759 --> 00:08:21,379
policy and with the field that we define

00:08:19,459 --> 00:08:25,430
our own policy to the integrity

00:08:21,379 --> 00:08:28,969
enforcement in formalism has three main

00:08:25,430 --> 00:08:31,550
mode of operation discovered to to know

00:08:28,969 --> 00:08:34,909
to see which are the operation requested

00:08:31,550 --> 00:08:36,409
by the processes and force and force to

00:08:34,909 --> 00:08:39,050
enforce the de Klerk with some policy on

00:08:36,409 --> 00:08:43,219
the on the TCB and on the multiple files

00:08:39,050 --> 00:08:45,079
and permissive so we check if the

00:08:43,219 --> 00:08:47,449
process operation if they were violated

00:08:45,079 --> 00:08:50,329
and the integrity policy and we record

00:08:47,449 --> 00:08:52,519
the violation so this is to modify the

00:08:50,329 --> 00:08:57,459
policy in case for example we need to

00:08:52,519 --> 00:08:57,459
add more processing into the DCP

00:08:58,620 --> 00:09:05,340
so this is a what happens in the in the

00:09:02,910 --> 00:09:08,310
system when we have multiple security

00:09:05,340 --> 00:09:11,190
models in this case we are using we have

00:09:08,310 --> 00:09:13,530
a lower Linux security model which is

00:09:11,190 --> 00:09:15,720
the numark they can they continue to do

00:09:13,530 --> 00:09:18,960
their own enforcement based on their own

00:09:15,720 --> 00:09:24,540
policy and then we have an info problem

00:09:18,960 --> 00:09:28,230
on top and it performed the decision

00:09:24,540 --> 00:09:31,710
depending on its own policy and LSF

00:09:28,230 --> 00:09:34,020
anyone who works in a way that the final

00:09:31,710 --> 00:09:40,680
decision decision depend on the decision

00:09:34,020 --> 00:09:42,630
of each security model so when we are

00:09:40,680 --> 00:09:45,660
checking the permission on the node

00:09:42,630 --> 00:09:48,660
after the 'selenic that our minds if the

00:09:45,660 --> 00:09:51,120
parameter should be grounded or not then

00:09:48,660 --> 00:09:53,040
we ask the LSM framework which are the

00:09:51,120 --> 00:09:56,340
security identifier of the process which

00:09:53,040 --> 00:09:59,060
which is accessing the file and the

00:09:56,340 --> 00:10:04,020
security identifier of the node a node

00:09:59,060 --> 00:10:05,430
itself and then we pass these two

00:10:04,020 --> 00:10:07,410
security identifiers and their

00:10:05,430 --> 00:10:10,080
operational requester so if it is a read

00:10:07,410 --> 00:10:16,610
or write or read write to our decision

00:10:10,080 --> 00:10:19,950
module and our decision modular ask

00:10:16,610 --> 00:10:22,440
another model called in for politics if

00:10:19,950 --> 00:10:25,200
the subject and the object are in the

00:10:22,440 --> 00:10:27,150
TCB because this is needed to perform

00:10:25,200 --> 00:10:32,220
the decision depending on the clock with

00:10:27,150 --> 00:10:37,140
some policy so we get this information

00:10:32,220 --> 00:10:41,580
and then we perform we performed the

00:10:37,140 --> 00:10:44,820
decision actually if an object is in the

00:10:41,580 --> 00:10:48,090
that is in the DCP or not depends on

00:10:44,820 --> 00:10:51,960
true information one is the the label

00:10:48,090 --> 00:10:56,020
the policy and the other and the other

00:10:51,960 --> 00:10:57,950
source of information is the

00:10:56,020 --> 00:11:01,730
extended attribute so we have an

00:10:57,950 --> 00:11:04,820
extended attribute that we use to to

00:11:01,730 --> 00:11:12,380
determine determine if the the file was

00:11:04,820 --> 00:11:16,670
created by the TCB now the decision part

00:11:12,380 --> 00:11:19,180
so this is the by the Biba write-up rule

00:11:16,670 --> 00:11:21,800
so if an on TC be subject of rights

00:11:19,180 --> 00:11:24,440
unknown this rtcp object and this

00:11:21,800 --> 00:11:26,930
operation is denied the same for Bieber

00:11:24,440 --> 00:11:28,640
read read down so TCP subjective Eden or

00:11:26,930 --> 00:11:32,230
execute an on TCP object

00:11:28,640 --> 00:11:36,140
this operation is denied or if a subject

00:11:32,230 --> 00:11:39,760
tries this abyss object try to read on

00:11:36,140 --> 00:11:42,920
an object with which is not filter Adam

00:11:39,760 --> 00:11:46,220
which is outside ECB and does not have a

00:11:42,920 --> 00:11:51,650
filtering interface then also this

00:11:46,220 --> 00:11:56,900
operation is done item so this is the

00:11:51,650 --> 00:11:59,510
format of the info flow lesson policy so

00:11:56,900 --> 00:12:02,180
we have a TCP object aqua - security

00:11:59,510 --> 00:12:06,470
context which is a 'selenic source mark

00:12:02,180 --> 00:12:10,280
label and we use it to say that the

00:12:06,470 --> 00:12:13,190
object is in the end its ECB DCB subject

00:12:10,280 --> 00:12:16,690
I equal to sexy ticks to put a subject

00:12:13,190 --> 00:12:19,760
in the in the TCB and we have the last

00:12:16,690 --> 00:12:24,140
type of rules which is filter object

00:12:19,760 --> 00:12:27,650
equal to sexy ticks so this object is a

00:12:24,140 --> 00:12:29,150
filter meaning that this object is

00:12:27,650 --> 00:12:30,920
potentially malicious and we have to

00:12:29,150 --> 00:12:34,010
check if the subject has a filtering

00:12:30,920 --> 00:12:37,970
interface to read this this file without

00:12:34,010 --> 00:12:39,980
being corrupted actually we have a two

00:12:37,970 --> 00:12:42,380
type of filter for example in the camera

00:12:39,980 --> 00:12:44,960
we have def no law we can write oderno

00:12:42,380 --> 00:12:46,370
law and we can read from Devon all in

00:12:44,960 --> 00:12:48,710
this case is a filtering interface

00:12:46,370 --> 00:12:51,410
because it is the kernel which is doing

00:12:48,710 --> 00:12:54,620
the sanitization so we don't get by that

00:12:51,410 --> 00:12:56,750
affront from the kernel so in this case

00:12:54,620 --> 00:12:59,120
we are we are saying that every object

00:12:56,750 --> 00:13:03,950
can read from Devon or without being

00:12:59,120 --> 00:13:06,140
corrupted or we specify for an object

00:13:03,950 --> 00:13:09,300
which potential is malicious the set of

00:13:06,140 --> 00:13:13,249
subject which allow it to read that is a

00:13:09,300 --> 00:13:13,249
they obviously without being corrupted

00:13:14,689 --> 00:13:22,050
so we know a lot of the policy in into

00:13:18,209 --> 00:13:26,300
info floral SM we pass the room like any

00:13:22,050 --> 00:13:29,249
other Alice I'm and we are adding at the

00:13:26,300 --> 00:13:33,480
security context so we are discovering

00:13:29,249 --> 00:13:35,850
in the interaction using the 'selenic

00:13:33,480 --> 00:13:41,279
source mark label so this is the input

00:13:35,850 --> 00:13:43,110
that we give to info flower city and we

00:13:41,279 --> 00:13:44,759
are adding we're adding subject and

00:13:43,110 --> 00:13:51,029
object to the DCP and also we are

00:13:44,759 --> 00:13:53,309
setting the filtering subject and lastly

00:13:51,029 --> 00:13:56,790
we are adding this information in memory

00:13:53,309 --> 00:14:01,699
so that the in the security decision can

00:13:56,790 --> 00:14:01,699
be calculated when a valid is as I said

00:14:01,939 --> 00:14:09,269
so lastly we are not able to determine

00:14:06,509 --> 00:14:11,910
precisely all the objects that are in

00:14:09,269 --> 00:14:14,939
the TCB for example when we have a

00:14:11,910 --> 00:14:17,100
subject in the TCB the label of the new

00:14:14,939 --> 00:14:18,959
object depend on the label of the parent

00:14:17,100 --> 00:14:21,709
the process which is creating the file

00:14:18,959 --> 00:14:24,869
plus the label of the parent directory

00:14:21,709 --> 00:14:27,089
so in this case we are saying if a

00:14:24,869 --> 00:14:29,009
subject is in the in the in the DCP

00:14:27,089 --> 00:14:33,809
let's add also the object to the to the

00:14:29,009 --> 00:14:36,569
TCB regardless of its label so we are

00:14:33,809 --> 00:14:38,999
doing it this we are marking the file as

00:14:36,569 --> 00:14:40,649
TCB but this does not depend on the

00:14:38,999 --> 00:14:43,709
policy depend on dependent it is a

00:14:40,649 --> 00:14:47,899
decided at file creation time and we are

00:14:43,709 --> 00:14:50,670
marking this file as this is in the TCB

00:14:47,899 --> 00:14:52,860
so we check first if the subject which

00:14:50,670 --> 00:14:55,199
is creating the file is in the in the in

00:14:52,860 --> 00:14:58,829
the TCB and then we are setting a new

00:14:55,199 --> 00:15:02,040
extended attribute in which we say this

00:14:58,829 --> 00:15:04,529
file is in the disappear we are using a

00:15:02,040 --> 00:15:07,980
bit mask we are setting out a bit to one

00:15:04,529 --> 00:15:09,959
saying okay this file this bit means if

00:15:07,980 --> 00:15:13,799
it has bit this bit is set means that

00:15:09,959 --> 00:15:16,470
the object is in the TCB and when we

00:15:13,799 --> 00:15:19,540
call info flowed instantiate we are

00:15:16,470 --> 00:15:24,340
reading it extended attribute so

00:15:19,540 --> 00:15:26,860
we are saying that when they open the

00:15:24,340 --> 00:15:28,510
file is a visit at the for the first

00:15:26,860 --> 00:15:32,950
time we are saying okay this file is in

00:15:28,510 --> 00:15:35,710
the in the TCB for the management of the

00:15:32,950 --> 00:15:38,760
contacts so we say that the policy

00:15:35,710 --> 00:15:41,200
contain a set of security context and

00:15:38,760 --> 00:15:43,750
when we are loading the policy we are

00:15:41,200 --> 00:15:46,600
actually converting the security context

00:15:43,750 --> 00:15:48,550
into security identifier and we are

00:15:46,600 --> 00:15:51,460
loading this security identifier into a

00:15:48,550 --> 00:15:55,120
red black tree so when we take the

00:15:51,460 --> 00:15:57,520
decision so for example in I know the

00:15:55,120 --> 00:15:59,980
permission and we are getting the

00:15:57,520 --> 00:16:03,370
security identifier we know from this

00:15:59,980 --> 00:16:09,940
tree by searching in this tree if the if

00:16:03,370 --> 00:16:12,730
the file is in the TCP or not now I

00:16:09,940 --> 00:16:16,300
would like to show a case study so we

00:16:12,730 --> 00:16:17,800
have a simple application and we want to

00:16:16,300 --> 00:16:20,410
protect the integrity for this

00:16:17,800 --> 00:16:22,780
application yeah we have a two type of

00:16:20,410 --> 00:16:24,700
files on the top we see a configuration

00:16:22,780 --> 00:16:28,000
file this is an immutable file and can

00:16:24,700 --> 00:16:30,310
be recognized with a reference

00:16:28,000 --> 00:16:32,830
measurement but as I said at the

00:16:30,310 --> 00:16:35,080
beginning we have for multiple files

00:16:32,830 --> 00:16:37,480
this solution does not work so we have

00:16:35,080 --> 00:16:40,060
to do the enforcement with integrity

00:16:37,480 --> 00:16:42,700
policy so my epidote data actually is

00:16:40,060 --> 00:16:47,920
storing the current number of requests

00:16:42,700 --> 00:16:49,990
made by by the user so first the user so

00:16:47,920 --> 00:16:52,810
this is a DNS resolver so the user is

00:16:49,990 --> 00:16:56,230
asking the my app what is the address of

00:16:52,810 --> 00:16:59,410
a server then my app is squaring the the

00:16:56,230 --> 00:17:01,960
DNS and it is increasing the number of

00:16:59,410 --> 00:17:05,290
requests made by the user and writing to

00:17:01,960 --> 00:17:07,449
my app dot statum and lastly is

00:17:05,290 --> 00:17:11,050
returning the IP address of the server

00:17:07,449 --> 00:17:13,360
to the user so we want to protect the

00:17:11,050 --> 00:17:16,900
integrity of the this application so we

00:17:13,360 --> 00:17:20,709
have to first find a TCB of this

00:17:16,900 --> 00:17:22,949
application and I will show how we can

00:17:20,709 --> 00:17:22,949
do it

00:17:33,840 --> 00:17:38,850
so first we are running an Emporium in

00:17:37,080 --> 00:17:42,029
Discovery model so we are putting the

00:17:38,850 --> 00:17:44,509
system and checking what the processes

00:17:42,029 --> 00:17:44,509
are doing

00:17:52,940 --> 00:18:02,570
so the system is booting okay

00:17:57,290 --> 00:18:05,570
and now the output of info flow LSM is

00:18:02,570 --> 00:18:05,570
this

00:18:10,350 --> 00:18:16,320
so this is the set of operation that are

00:18:14,370 --> 00:18:19,559
performed by the system while the system

00:18:16,320 --> 00:18:22,830
is booting and as you can see we are

00:18:19,559 --> 00:18:24,750
using those of the Salinas label attach

00:18:22,830 --> 00:18:28,289
it to that process into the into that

00:18:24,750 --> 00:18:30,090
and file so we are also considering at a

00:18:28,289 --> 00:18:40,559
class for example we have a regular file

00:18:30,090 --> 00:18:42,629
and we have also let's see we have a we

00:18:40,559 --> 00:18:45,740
have a socket for example so we are

00:18:42,629 --> 00:18:53,789
considering a different type of classes

00:18:45,740 --> 00:18:57,210
now executed by up with a we are asking

00:18:53,789 --> 00:18:59,220
the address of google.com and we are

00:18:57,210 --> 00:19:02,700
getting the number of current number of

00:18:59,220 --> 00:19:03,990
requests from the user and we are

00:19:02,700 --> 00:19:07,409
getting the IP address so now we

00:19:03,990 --> 00:19:09,509
discovered all the interaction included

00:19:07,409 --> 00:19:13,500
the interaction performed by my app and

00:19:09,509 --> 00:19:18,210
now we want to see we want to find that

00:19:13,500 --> 00:19:27,830
the TCP for for my app so we are hoping

00:19:18,210 --> 00:19:30,419
this interaction to a file and now we

00:19:27,830 --> 00:19:32,600
determine that this will be for for my

00:19:30,419 --> 00:19:32,600
app

00:19:50,070 --> 00:19:55,290
so this is a user space tool that take

00:19:52,860 --> 00:19:57,420
as input the process interaction that we

00:19:55,290 --> 00:20:02,700
discovered and we pass through it the

00:19:57,420 --> 00:20:04,230
application that we want to protect so

00:20:02,700 --> 00:20:07,620
this tool is analyzing the process

00:20:04,230 --> 00:20:15,630
interaction and the output of this tool

00:20:07,620 --> 00:20:18,330
is this so now we have the target of our

00:20:15,630 --> 00:20:22,230
evaluation is my Apple and we are we see

00:20:18,330 --> 00:20:24,420
that my app is reading a file resolver

00:20:22,230 --> 00:20:27,420
comm which is written by network manager

00:20:24,420 --> 00:20:29,520
but since network manager is not yet in

00:20:27,420 --> 00:20:31,710
the TCB because now that ECB is only the

00:20:29,520 --> 00:20:36,270
application we want to protect this is a

00:20:31,710 --> 00:20:38,850
integrity conflict so potentially

00:20:36,270 --> 00:20:40,940
network manager can write a bad content

00:20:38,850 --> 00:20:43,590
to resolve dot confer and can compromise

00:20:40,940 --> 00:20:45,630
my app if we don't resonate a network

00:20:43,590 --> 00:20:47,100
pager but now we are trusting in a

00:20:45,630 --> 00:20:50,150
network manager so we are the network

00:20:47,100 --> 00:20:50,150
manager to the DCP

00:21:03,290 --> 00:21:12,530
we are the network manager to the TCB

00:21:05,240 --> 00:21:14,990
and we perform again the analysis of the

00:21:12,530 --> 00:21:17,179
integrity analysis and as you can see

00:21:14,990 --> 00:21:19,790
now the situation is much worse because

00:21:17,179 --> 00:21:23,240
we have a new integrity conflict from

00:21:19,790 --> 00:21:26,600
process outside the TCB so these are all

00:21:23,240 --> 00:21:29,630
the process outside at ECB and we see

00:21:26,600 --> 00:21:32,740
that now we have for example note device

00:21:29,630 --> 00:21:36,080
T which is def known so we can say that

00:21:32,740 --> 00:21:37,309
all the subject I can read this file and

00:21:36,080 --> 00:21:40,429
brightest fight without being

00:21:37,309 --> 00:21:47,780
compromised so this is a candidate for

00:21:40,429 --> 00:21:51,130
being a filtering interface for that ok

00:21:47,780 --> 00:21:51,130
let's see first

00:22:00,150 --> 00:22:10,340
so we perform again the analysis and now

00:22:07,200 --> 00:22:14,130
we have still some conflicts we have

00:22:10,340 --> 00:22:16,890
this three file which are outside at ECB

00:22:14,130 --> 00:22:18,720
and those are file which are read by a

00:22:16,890 --> 00:22:23,010
network manager which is in the DCP so

00:22:18,720 --> 00:22:27,900
we have two other more processes also

00:22:23,010 --> 00:22:31,170
the incident ECB in particular these

00:22:27,900 --> 00:22:34,980
tool is also suggesting which subject we

00:22:31,170 --> 00:22:38,930
have to other to the to the TCB so I

00:22:34,980 --> 00:22:38,930
will I will add this subject

00:22:46,180 --> 00:22:51,250
so now you see that the number of

00:22:49,020 --> 00:22:53,470
subject which are violating the

00:22:51,250 --> 00:23:02,500
integrity policy are much more because

00:22:53,470 --> 00:23:05,800
we are adding a process to the TCB and

00:23:02,500 --> 00:23:07,870
now we have we are basically solving the

00:23:05,800 --> 00:23:10,120
the integrity conflicts by adding a

00:23:07,870 --> 00:23:16,000
subject it's in the DCP or filtering

00:23:10,120 --> 00:23:21,420
interfaces now I'm doing some assumption

00:23:16,000 --> 00:23:23,770
I am assuming that some the process can

00:23:21,420 --> 00:23:25,780
so the kernel is able to fill that

00:23:23,770 --> 00:23:29,770
properly filter that are coming from

00:23:25,780 --> 00:23:31,780
from a socket and these essential are

00:23:29,770 --> 00:23:34,420
not necessarily true but now for the for

00:23:31,780 --> 00:23:36,760
the this an example of analysis and then

00:23:34,420 --> 00:23:39,280
we need to verify this assumption

00:23:36,760 --> 00:23:41,020
so if effectively the kernel is able to

00:23:39,280 --> 00:23:49,480
filter the data coming from from a

00:23:41,020 --> 00:23:52,060
socket so now I add this has a kernel T

00:23:49,480 --> 00:23:54,520
socket as a filtering interface I will

00:23:52,060 --> 00:23:56,530
also add in it the FIFO file as a

00:23:54,520 --> 00:24:00,250
fitting interface because I assume that

00:23:56,530 --> 00:24:02,970
all the communication to init them are

00:24:00,250 --> 00:24:06,670
properly filtered so in it should be

00:24:02,970 --> 00:24:13,450
good enough to process to pass the data

00:24:06,670 --> 00:24:20,020
coming from the from and from a FIFO so

00:24:13,450 --> 00:24:23,710
I will complete the analysis and then

00:24:20,020 --> 00:24:26,140
the final result is so this is the

00:24:23,710 --> 00:24:30,370
finalized so it is there are a lot of

00:24:26,140 --> 00:24:34,870
iteration and then at the end you will

00:24:30,370 --> 00:24:37,900
find a set of TCB subject that don't

00:24:34,870 --> 00:24:41,980
don't violate the integrity policy now

00:24:37,900 --> 00:24:44,170
for example you will see that this is

00:24:41,980 --> 00:24:46,900
the set of processor that we added to

00:24:44,170 --> 00:24:50,280
the to the TCB and we have only

00:24:46,900 --> 00:24:54,350
filtering interfaces so this is the

00:24:50,280 --> 00:24:56,750
didn't interaction that you see are

00:24:54,350 --> 00:24:58,940
two objects which are not sided PCB and

00:24:56,750 --> 00:25:01,010
we are assuming that the processing

00:24:58,940 --> 00:25:03,650
inside the DCP are able to properly end

00:25:01,010 --> 00:25:09,410
all the data coming from from this

00:25:03,650 --> 00:25:12,230
object so this is a at the end of the

00:25:09,410 --> 00:25:15,800
the list of this be subject that we have

00:25:12,230 --> 00:25:19,280
to trust in order to have my up dot

00:25:15,800 --> 00:25:21,320
statum the integrity of this valley is

00:25:19,280 --> 00:25:28,400
preservable so this is the set of such a

00:25:21,320 --> 00:25:32,930
subject that we have to trust and now

00:25:28,400 --> 00:25:35,600
the tool we will produce the the policy

00:25:32,930 --> 00:25:38,000
that we have to give it to info floral

00:25:35,600 --> 00:25:41,270
SM as you see there is the CB object

00:25:38,000 --> 00:25:45,440
equal to a security contest we have a

00:25:41,270 --> 00:25:49,130
subject equal to security contest and we

00:25:45,440 --> 00:25:53,450
have also the filtering interface and we

00:25:49,130 --> 00:25:54,770
are hoping this this policy to the to

00:25:53,450 --> 00:25:57,460
the vector machine and now we are

00:25:54,770 --> 00:26:02,980
booting the Builder machine with the

00:25:57,460 --> 00:26:02,980
with a policy enforcement enabled

00:26:07,110 --> 00:26:14,370
I will also recreate the initiative and

00:26:11,940 --> 00:26:17,600
escape because we are loading the the

00:26:14,370 --> 00:26:17,600
policy from the initial on disk

00:26:19,730 --> 00:26:28,769
now it takes few seconds so in this

00:26:26,010 --> 00:26:31,049
particular policy we are excluding the

00:26:28,769 --> 00:26:34,289
subject unconfident team so when we

00:26:31,049 --> 00:26:36,720
login as a route the security context

00:26:34,289 --> 00:26:38,880
that is applied to the process running

00:26:36,720 --> 00:26:42,630
to root is on continuity and we are

00:26:38,880 --> 00:26:45,090
excluding this process from the TCB so

00:26:42,630 --> 00:26:48,450
since this process is in the TCB is

00:26:45,090 --> 00:26:51,659
absolute ECB when we write a file in the

00:26:48,450 --> 00:26:53,370
front which is including the CP we

00:26:51,659 --> 00:26:57,289
expect that that route is not able to

00:26:53,370 --> 00:26:57,289
write this file even if it is route

00:27:04,620 --> 00:27:09,950
okay now we put now in a enforcing model

00:27:17,180 --> 00:27:24,130
okay now the system booted and we log in

00:27:25,390 --> 00:27:31,790
as you can see this is our context

00:27:28,480 --> 00:27:35,560
I'm completely this subject is not in in

00:27:31,790 --> 00:27:39,860
the TCB we execute again

00:27:35,560 --> 00:27:41,390
my up my up still works we have them for

00:27:39,860 --> 00:27:44,150
integrity enforcement and able and now

00:27:41,390 --> 00:27:45,860
we try to attack we are we are trying to

00:27:44,150 --> 00:27:48,560
write the mutable file which is inside

00:27:45,860 --> 00:27:51,190
that ECB from outside that ECB and we

00:27:48,560 --> 00:27:51,190
see what happens

00:27:56,860 --> 00:28:07,850
so the operation is done either and now

00:28:04,940 --> 00:28:12,080
we see the RISM so this is the subject

00:28:07,850 --> 00:28:14,900
which is performing the operation this

00:28:12,080 --> 00:28:19,550
is the object actually should have been

00:28:14,900 --> 00:28:21,530
my up dot state and this is the the

00:28:19,550 --> 00:28:24,530
operation is a bit of right up so in

00:28:21,530 --> 00:28:26,810
this process on Saturday CB is writing

00:28:24,530 --> 00:28:28,790
something inside the TCB so this

00:28:26,810 --> 00:28:32,240
operation is done either as you can see

00:28:28,790 --> 00:28:34,430
these are Fedora 30 operating system

00:28:32,240 --> 00:28:36,680
which is enforcing the Civic's policy so

00:28:34,430 --> 00:28:38,930
we are not touching the Civic's policy

00:28:36,680 --> 00:28:41,720
but whatever we are doing additional

00:28:38,930 --> 00:28:45,220
enforcement on top on top of it and we

00:28:41,720 --> 00:28:48,820
are doing this enforcement with this new

00:28:45,220 --> 00:28:48,820
info flow LSM

00:28:55,710 --> 00:29:04,059
so conclusion we published the code of

00:29:00,780 --> 00:29:07,450
this new software this is published in

00:29:04,059 --> 00:29:09,880
our github repository we also publish at

00:29:07,450 --> 00:29:13,320
the user space to that we use it to to

00:29:09,880 --> 00:29:16,330
find a TCB from process interaction and

00:29:13,320 --> 00:29:18,720
any current running under development

00:29:16,330 --> 00:29:22,590
yesterday I sent the first version of

00:29:18,720 --> 00:29:25,720
the translation of the kernel module and

00:29:22,590 --> 00:29:30,270
I can kindly ask you to have a look at

00:29:25,720 --> 00:29:33,330
the other code and provide any feedback

00:29:30,270 --> 00:29:40,360
possible optimisation now we are

00:29:33,330 --> 00:29:44,070
checking if a subject is in the DC B or

00:29:40,360 --> 00:29:46,780
not for every I know the permission

00:29:44,070 --> 00:29:50,409
every time I know the permission is

00:29:46,780 --> 00:29:52,450
called well this means that we are we

00:29:50,409 --> 00:29:56,700
are doing a search in a red black tree

00:29:52,450 --> 00:30:01,450
for an for every permission request

00:29:56,700 --> 00:30:04,090
actually we can use them less MS lacking

00:30:01,450 --> 00:30:07,059
a second feature to store if a subject

00:30:04,090 --> 00:30:11,409
in a TCB only in specific Oaks for

00:30:07,059 --> 00:30:13,600
example when we have a VP are installed

00:30:11,409 --> 00:30:16,390
creds so when the credential the nuclear

00:30:13,600 --> 00:30:18,640
tension of the is install into a process

00:30:16,390 --> 00:30:21,610
then we can say we can check out that at

00:30:18,640 --> 00:30:24,490
that point if the subsidies in the TCB

00:30:21,610 --> 00:30:30,370
so we don't have to do em every time

00:30:24,490 --> 00:30:34,110
for in an order permission that will be

00:30:30,370 --> 00:30:37,289
an improvement for mass improvement and

00:30:34,110 --> 00:30:37,289
that's it

00:30:39,340 --> 00:30:41,999
yes

00:30:44,650 --> 00:30:56,020
yes now we are data for example this is

00:30:52,930 --> 00:31:00,010
the list of filtering interface that we

00:30:56,020 --> 00:31:03,910
we consider them for example we have

00:31:00,010 --> 00:31:08,890
this PT MX which are the control device

00:31:03,910 --> 00:31:11,410
to set the terminal or we have actually

00:31:08,890 --> 00:31:14,580
for example this FIFO file that I

00:31:11,410 --> 00:31:20,020
mentioned before this in it

00:31:14,580 --> 00:31:22,000
oops so for example we have a dev in it

00:31:20,020 --> 00:31:28,900
a city n which is the interface I think

00:31:22,000 --> 00:31:31,990
is used to for a process to signal to do

00:31:28,900 --> 00:31:33,340
some signaling to system D and I assume

00:31:31,990 --> 00:31:36,100
that this is a filtering interface

00:31:33,340 --> 00:31:37,780
because if system D is corrupted every

00:31:36,100 --> 00:31:41,410
time that a process communicate with it

00:31:37,780 --> 00:31:45,400
then probably system this should do a

00:31:41,410 --> 00:31:47,020
better job to to filter to filter the

00:31:45,400 --> 00:31:49,720
data because the system D is a most

00:31:47,020 --> 00:31:52,780
important process in the system so I'm

00:31:49,720 --> 00:31:55,840
doing I'm doing the assumption that the

00:31:52,780 --> 00:31:58,960
system developers write a parser very

00:31:55,840 --> 00:32:03,270
very a very good passer for the data

00:31:58,960 --> 00:32:03,270
that is coming from in its it Ian

00:32:27,500 --> 00:32:35,840
test okay so a filter is just something

00:32:32,570 --> 00:32:40,370
that you're specifying in the knot is

00:32:35,840 --> 00:32:42,440
this okay so it's it's basically

00:32:40,370 --> 00:32:46,630
whatever you're saying so I could just

00:32:42,440 --> 00:32:50,419
say if I wanted to just just any ol any

00:32:46,630 --> 00:32:52,960
any SELinux context is a filter and then

00:32:50,419 --> 00:32:56,840
it would be treated

00:32:52,960 --> 00:32:58,700
so you're making a Samsung and you are

00:32:56,840 --> 00:32:59,960
saying to the remoter so when you are

00:32:58,700 --> 00:33:02,270
doing a remote attestation you are

00:32:59,960 --> 00:33:06,080
sending this this this polishing that

00:33:02,270 --> 00:33:08,630
you are developing under the the the

00:33:06,080 --> 00:33:10,820
remote over if I can say I trust the

00:33:08,630 --> 00:33:12,860
system D to do the filtering of that are

00:33:10,820 --> 00:33:15,919
coming from any CTL then for me the

00:33:12,860 --> 00:33:18,320
remote authorization is asses or there

00:33:15,919 --> 00:33:20,929
is a remote verify which has more strict

00:33:18,320 --> 00:33:23,210
requirements and may say I don't trust

00:33:20,929 --> 00:33:25,340
that system D is able to properly fill

00:33:23,210 --> 00:33:29,150
that data coming from any process so for

00:33:25,340 --> 00:33:30,970
me in the attestation phase so this

00:33:29,150 --> 00:33:34,700
remote at the station so it's not a

00:33:30,970 --> 00:33:36,440
fixed result but the result of the the

00:33:34,700 --> 00:33:39,190
outcome of the remote a decision depends

00:33:36,440 --> 00:33:42,110
on the requirements of the verifier so

00:33:39,190 --> 00:33:43,730
you was a platform that is being

00:33:42,110 --> 00:33:45,740
verified that you are sending all the

00:33:43,730 --> 00:33:47,900
data that is necessary for the

00:33:45,740 --> 00:33:50,809
verification and is up to the verifier

00:33:47,900 --> 00:33:52,840
to to decide if it acceptable for him or

00:33:50,809 --> 00:33:52,840
not

00:33:57,140 --> 00:34:02,670
so the part you were talking about

00:33:59,700 --> 00:34:06,060
earlier where after the reboot you were

00:34:02,670 --> 00:34:08,730
able to know that you didn't want to

00:34:06,060 --> 00:34:11,790
measure the file so I'm trying to

00:34:08,730 --> 00:34:13,830
understand so my assumption is the

00:34:11,790 --> 00:34:17,250
system gets compromised at some point

00:34:13,830 --> 00:34:21,330
remote attestation must detect that the

00:34:17,250 --> 00:34:23,640
system was tampered with mm-hmm how what

00:34:21,330 --> 00:34:25,580
is saying what happened across the

00:34:23,640 --> 00:34:27,659
reboot that you would be able to detect

00:34:25,580 --> 00:34:30,780
when the system was tampered with

00:34:27,659 --> 00:34:33,270
okay so we can run info flow in two

00:34:30,780 --> 00:34:35,159
modes one is an enforcing mode which

00:34:33,270 --> 00:34:37,800
means that when there is an operation

00:34:35,159 --> 00:34:41,250
which potentially corrupt the multiple

00:34:37,800 --> 00:34:43,590
file we are the nine in the operation so

00:34:41,250 --> 00:34:45,390
we are saying the process outside the

00:34:43,590 --> 00:34:48,960
TCB is not allowed to write a file

00:34:45,390 --> 00:34:51,149
easily TCP or we can have the permissive

00:34:48,960 --> 00:34:56,760
model in which we allow the operation

00:34:51,149 --> 00:34:59,700
but we updated the pcr so we have a TP

00:34:56,760 --> 00:35:03,360
we are using a TPM key and this TPM key

00:34:59,700 --> 00:35:05,700
is a sealer that to a set of PCR so in

00:35:03,360 --> 00:35:07,560
the permissive mode we are saying we can

00:35:05,700 --> 00:35:10,140
allow the operation but we change the

00:35:07,560 --> 00:35:12,810
PCR so it means that at the TPM key that

00:35:10,140 --> 00:35:16,290
is bound to them to a policy is not

00:35:12,810 --> 00:35:18,450
usable anymore but an attacker who who

00:35:16,290 --> 00:35:21,480
compromises the system in a way that is

00:35:18,450 --> 00:35:26,550
not detected by info flow LSM will not

00:35:21,480 --> 00:35:29,070
modify the PCR and after the reboot the

00:35:26,550 --> 00:35:31,800
key will still unseal the same and you

00:35:29,070 --> 00:35:34,890
will say oh remote attestation just me

00:35:31,800 --> 00:35:37,650
because I'm not tampered with okay but

00:35:34,890 --> 00:35:39,480
oh the attacker is able to any other

00:35:37,650 --> 00:35:42,060
vulnerability anywhere else in the

00:35:39,480 --> 00:35:43,770
system okay the attacker didn't

00:35:42,060 --> 00:35:46,380
compromise the system by writing to the

00:35:43,770 --> 00:35:48,270
one file you're protecting i exploited

00:35:46,380 --> 00:35:50,400
some vulnerability okay we're in the

00:35:48,270 --> 00:35:51,900
kernel okay well yeah we I mean we are

00:35:50,400 --> 00:35:53,700
making an assumption it was like no but

00:35:51,900 --> 00:35:55,560
but my my assumption is remote

00:35:53,700 --> 00:35:57,570
attestation must be able to detect

00:35:55,560 --> 00:36:01,740
whether or not the system is in a good

00:35:57,570 --> 00:36:03,660
state or not yes and in the case of a

00:36:01,740 --> 00:36:06,330
remote attestation system that's based

00:36:03,660 --> 00:36:09,349
on predetermined hashes or signatures

00:36:06,330 --> 00:36:11,900
that you can't tamper with on the device

00:36:09,349 --> 00:36:14,630
no attacker can simulate a signature

00:36:11,900 --> 00:36:16,489
from a key in my vault ever an attacker

00:36:14,630 --> 00:36:18,440
can never do that no matter how much

00:36:16,489 --> 00:36:23,299
they compromised that or no but that

00:36:18,440 --> 00:36:26,420
that attestation of the locally modified

00:36:23,299 --> 00:36:28,369
file I have no way of trusting that

00:36:26,420 --> 00:36:30,559
remotely I don't understand why this is

00:36:28,369 --> 00:36:35,299
any better than just a plain selinux

00:36:30,559 --> 00:36:37,459
policy because the cynics policy does

00:36:35,299 --> 00:36:40,400
not have a it's not enforcing any and

00:36:37,459 --> 00:36:43,279
integrity policy so the TCB is something

00:36:40,400 --> 00:36:45,380
which which we are defining depending on

00:36:43,279 --> 00:36:48,049
the report for example the reputation of

00:36:45,380 --> 00:36:50,599
the process so we say this is the

00:36:48,049 --> 00:36:57,170
trisystem D or with Russ Apache but we

00:36:50,599 --> 00:37:00,049
don't trust the postfix so we are doing

00:36:57,170 --> 00:37:02,799
on its own on the device that we want to

00:37:00,049 --> 00:37:05,029
attest we are making our assumption but

00:37:02,799 --> 00:37:06,709
it does not show me that this assumption

00:37:05,029 --> 00:37:11,269
are accepted by the reader by the very

00:37:06,709 --> 00:37:13,489
file so our goal is just to enforce the

00:37:11,269 --> 00:37:18,339
integrity policy according to our policy

00:37:13,489 --> 00:37:18,339
if the policy is not acceptable sure

00:37:18,519 --> 00:37:22,630
then then that the session fail

00:37:36,140 --> 00:37:42,140
so how does this come into play into

00:37:39,650 --> 00:37:44,180
offline tampering of the file Saturday

00:37:42,140 --> 00:37:45,979
so when you system is not running that's

00:37:44,180 --> 00:37:49,249
one question and two actually

00:37:45,979 --> 00:37:52,630
so how does this work across Kay exact

00:37:49,249 --> 00:37:58,269
and other scenarios

00:37:52,630 --> 00:38:01,789
okay so in this particular version

00:37:58,269 --> 00:38:04,849
presentation I didn't mention offline

00:38:01,789 --> 00:38:07,430
protection or at least I just briefly

00:38:04,849 --> 00:38:08,719
mentioned but I didn't want to make the

00:38:07,430 --> 00:38:14,089
presentation too complicated because

00:38:08,719 --> 00:38:18,319
this is a topic itself but for the flame

00:38:14,089 --> 00:38:20,690
protection we are using EVM and so I

00:38:18,319 --> 00:38:25,130
said that we don't measure the file

00:38:20,690 --> 00:38:27,309
where if if it is a multiple file we

00:38:25,130 --> 00:38:33,589
don't measure that anymore

00:38:27,309 --> 00:38:35,299
but we have so i'ma that our minds if

00:38:33,589 --> 00:38:37,999
the file should be measured or not

00:38:35,299 --> 00:38:39,049
because we are talking we are attaching

00:38:37,999 --> 00:38:43,369
to each file

00:38:39,049 --> 00:38:46,489
eh Mac and the key use it to calculate

00:38:43,369 --> 00:38:49,880
this H Mac is silly to a software

00:38:46,489 --> 00:38:52,219
configuration so you can actually get

00:38:49,880 --> 00:38:54,589
the EVM key only if the system is

00:38:52,219 --> 00:38:59,559
enforcing the integrity in the integrity

00:38:54,589 --> 00:39:03,619
if only the initial content is allowed

00:38:59,559 --> 00:39:05,690
so only if the file is a initially is

00:39:03,619 --> 00:39:06,739
good so we are taking for example the

00:39:05,690 --> 00:39:09,170
reference measurement from the

00:39:06,739 --> 00:39:12,829
distribution so we have our or an empty

00:39:09,170 --> 00:39:14,809
file or a file with a header and this is

00:39:12,829 --> 00:39:18,049
the initial initial Phi that and we

00:39:14,809 --> 00:39:19,670
allow the system to access only this so

00:39:18,049 --> 00:39:22,789
that the file must must be in unknown

00:39:19,670 --> 00:39:25,099
unknown state and the VM key can be

00:39:22,789 --> 00:39:29,479
considered only if all this condition

00:39:25,099 --> 00:39:33,380
are met and then we when we reboot if we

00:39:29,479 --> 00:39:35,900
find a valid H Mac it means that in the

00:39:33,380 --> 00:39:38,630
previous boot also the system was

00:39:35,900 --> 00:39:41,989
enforcing the integrity was reading a

00:39:38,630 --> 00:39:46,910
file ship added by the Linux

00:39:41,989 --> 00:39:50,460
distribution and we can continue to

00:39:46,910 --> 00:39:53,069
grant access to the file and we don't we

00:39:50,460 --> 00:39:55,380
don't measure we don't measure it so

00:39:53,069 --> 00:39:58,619
yeah the goal is to have a stable pcr

00:39:55,380 --> 00:40:02,039
like Paula said in a system which is

00:39:58,619 --> 00:40:08,940
performing a file measurement and is

00:40:02,039 --> 00:40:10,920
only one one part of the of the story

00:40:08,940 --> 00:40:14,700
because so we are not measuring

00:40:10,920 --> 00:40:18,660
immutable file we are also using a

00:40:14,700 --> 00:40:20,490
whitelist approach to say that we

00:40:18,660 --> 00:40:23,490
measure the whitelist at the beginning

00:40:20,490 --> 00:40:26,460
when they cannot start and we are not

00:40:23,490 --> 00:40:29,309
doing a porter measurement so if we are

00:40:26,460 --> 00:40:32,099
so we have a wait list for the immutable

00:40:29,309 --> 00:40:34,230
files this is a schema with an integrity

00:40:32,099 --> 00:40:38,069
integrity policy for the multiple files

00:40:34,230 --> 00:40:39,980
so the PCL remains stable if we have the

00:40:38,069 --> 00:40:43,950
permissive mode so we are allowing a

00:40:39,980 --> 00:40:48,450
integrity violation then the PCR will

00:40:43,950 --> 00:40:50,430
change and then we are not able so for

00:40:48,450 --> 00:40:52,440
example we delete the VM key so the

00:40:50,430 --> 00:40:55,349
system is not able to calculate the

00:40:52,440 --> 00:41:04,890
value - Mac anymore and we recognize a

00:40:55,349 --> 00:41:06,359
tampering other than the next boot so

00:41:04,890 --> 00:41:09,119
are you doing your integrity check

00:41:06,359 --> 00:41:12,150
before or after the mandatory access

00:41:09,119 --> 00:41:13,470
control checks after then you're not

00:41:12,150 --> 00:41:16,529
going to get called after mandatory

00:41:13,470 --> 00:41:18,029
access control check fails so no no no

00:41:16,529 --> 00:41:23,509
so if I said you said that is the

00:41:18,029 --> 00:41:27,829
operation we are not we are not getting

00:41:23,509 --> 00:41:30,180
the operation in our mod in our module

00:41:27,829 --> 00:41:32,339
because we are still we are still doing

00:41:30,180 --> 00:41:36,539
the we are not touching the the silly

00:41:32,339 --> 00:41:39,259
Knox enforcement so we are doing an

00:41:36,539 --> 00:41:39,259
enforcement on top

00:41:42,550 --> 00:41:49,940
right but if if you know if you know in

00:41:45,770 --> 00:41:51,890
the module stack the the SELinux gets

00:41:49,940 --> 00:41:54,320
called before you do and yes your Linux

00:41:51,890 --> 00:41:57,140
denies the access then you're not gonna

00:41:54,320 --> 00:42:06,890
get called because no no no no no well

00:41:57,140 --> 00:42:08,630
yes for policies you okay okay yes so if

00:42:06,890 --> 00:42:12,920
the interaction does not happen it is

00:42:08,630 --> 00:42:15,050
not so the processor cannot corrupt a

00:42:12,920 --> 00:42:25,760
file because it is a Linux first which

00:42:15,050 --> 00:42:27,110
is the writing in the operation okay yes

00:42:25,760 --> 00:42:28,520
that makes sense for enforce but for

00:42:27,110 --> 00:42:29,780
audit when you're trying to build the

00:42:28,520 --> 00:42:31,760
model in the first place you have to

00:42:29,780 --> 00:42:35,390
just turn off as a Linux enforcement to

00:42:31,760 --> 00:42:37,760
build that full audit log or we can have

00:42:35,390 --> 00:42:40,580
bought the combination of bottom meaning

00:42:37,760 --> 00:42:42,320
that we assume that so we also measured

00:42:40,580 --> 00:42:44,450
the Civic's policy so we assumed that

00:42:42,320 --> 00:42:48,920
the policy does not change from the

00:42:44,450 --> 00:42:49,730
discovery to to enforcement but I'm just

00:42:48,920 --> 00:42:52,070
saying in order to get a complete

00:42:49,730 --> 00:42:54,290
discovery to really build them yes yes

00:42:52,070 --> 00:42:58,180
yes yes you need that disable SELinux

00:42:54,290 --> 00:42:58,180
yes we'll be able yes

00:43:06,760 --> 00:43:11,920
you shouldn't have to be able to disable

00:43:09,730 --> 00:43:15,190
selinux enforcement you can stickers

00:43:11,920 --> 00:43:17,290
your module in before SELinux and have

00:43:15,190 --> 00:43:21,790
it being called before selinux and have

00:43:17,290 --> 00:43:23,560
selinux come after in the stack hmm yes

00:43:21,790 --> 00:43:26,260
because the signal syllable are applied

00:43:23,560 --> 00:43:28,450
that before not in the permission

00:43:26,260 --> 00:43:30,100
request but they are applied right now

00:43:28,450 --> 00:43:36,119
differ in different talks different

00:43:30,100 --> 00:43:36,119
hooks yeah yes good work yeah thanks

00:43:41,460 --> 00:43:47,780
okay thank you

00:43:44,310 --> 00:43:47,780

YouTube URL: https://www.youtube.com/watch?v=pQHE-GYoXr8


