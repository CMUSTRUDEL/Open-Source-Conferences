Title: Subsystem Update: LSM Stacking - What You Can Do Now and What's Next - Casey Schaufler, Intel
Publication date: 2019-08-28
Playlist: Linux Security Summit NA 2019 - San Diego
Description: 
	Subsystem Update: LSM Stacking - What You Can Do Now and What's Next - Casey Schaufler, Intel 

Before the 5.1 Linux kernel it was only possible to combine Linux security modules (LSM) that don't use extended security "blobs". With the introduction of infrastructure blob management it is now possible for a limited set of extended system security data to be shared, allowing greater flexibility in security module combination. This talk will describe what data can currently be shared. It moves on to describe plans to expand the blobs that can be shared. Plans for achieving the ultimate goal of complete module stacking wrap up the presentation. Feedback on the plans, and suggestions for alternatives and improvements are solicited.
Captions: 
	00:00:00,030 --> 00:00:07,879
so secured module stacking is something

00:00:03,000 --> 00:00:07,879
I've been working on for a few weeks

00:00:09,210 --> 00:00:15,269
it's get it's it's actually been quite

00:00:13,290 --> 00:00:17,660
quite interesting quite challenging and

00:00:15,269 --> 00:00:19,350
planned a whole lot about

00:00:17,660 --> 00:00:21,119
implementations of Linux security

00:00:19,350 --> 00:00:23,820
modules if you were here this morning

00:00:21,119 --> 00:00:28,109
you heard some of that acquired

00:00:23,820 --> 00:00:31,439
knowledge so what are we doing well as

00:00:28,109 --> 00:00:39,680
of got a trend thing on again now let's

00:00:31,439 --> 00:00:44,450
forget to do that okay so as a linux 5.1

00:00:39,680 --> 00:00:47,129
we got the first set of the current

00:00:44,450 --> 00:00:49,770
development effort actually into the

00:00:47,129 --> 00:00:53,489
kernel we have infrastructure managed

00:00:49,770 --> 00:00:57,000
blobs for a small set well actually most

00:00:53,489 --> 00:00:59,219
of the security blobs that means that

00:00:57,000 --> 00:01:03,960
they can be shared by Mint by more than

00:00:59,219 --> 00:01:04,519
one LSM so as a result of this the

00:01:03,960 --> 00:01:07,140
Tamayo

00:01:04,519 --> 00:01:09,210
security module is no longer considered

00:01:07,140 --> 00:01:12,869
a major security module it can it can

00:01:09,210 --> 00:01:18,650
run in cooperation with anybody else and

00:01:12,869 --> 00:01:21,479
it does and this also gives us the

00:01:18,650 --> 00:01:24,090
sharing that we need in order to support

00:01:21,479 --> 00:01:27,030
the the incoming land lock Inserra

00:01:24,090 --> 00:01:30,000
security modules which are in

00:01:27,030 --> 00:01:33,720
development we've also gotten a good

00:01:30,000 --> 00:01:35,939
amount of feedback to the effect of

00:01:33,720 --> 00:01:39,150
other modules that that people are

00:01:35,939 --> 00:01:42,329
wanting to to do that they've they felt

00:01:39,150 --> 00:01:44,579
that they weren't able to do because

00:01:42,329 --> 00:01:46,500
well I can't put it in because I have to

00:01:44,579 --> 00:01:48,960
run Fedora and Fedora has to have have

00:01:46,500 --> 00:01:51,720
selinux and I can't take out SC Linux

00:01:48,960 --> 00:01:54,420
but if I can have this other module is

00:01:51,720 --> 00:01:57,360
in addition to SC Linux I can work on

00:01:54,420 --> 00:01:58,320
that and be happy and my IT department

00:01:57,360 --> 00:02:02,070
isn't going to run me out of the

00:01:58,320 --> 00:02:04,110
building so we're actually getting a lot

00:02:02,070 --> 00:02:07,640
of a lot of good interest a lot of good

00:02:04,110 --> 00:02:07,640
things coming into the pipe

00:02:08,440 --> 00:02:17,530
as of 5.4 the next set of patches that

00:02:14,560 --> 00:02:19,030
are in development and there's got a

00:02:17,530 --> 00:02:21,430
nice little asterisk there because

00:02:19,030 --> 00:02:26,410
there's still a couple of recalcitrant

00:02:21,430 --> 00:02:31,720
individuals who need to be convinced

00:02:26,410 --> 00:02:35,280
that this is the right approach that

00:02:31,720 --> 00:02:35,280
we've addressed actually all the issues

00:02:35,370 --> 00:02:41,530
we should be able to have well we will

00:02:38,440 --> 00:02:45,330
be able to have a Parmer and SELinux

00:02:41,530 --> 00:02:47,800
armor and smack running at the same time

00:02:45,330 --> 00:02:50,110
John talked about a little bit about

00:02:47,800 --> 00:02:52,990
this earlier we actually are seen a

00:02:50,110 --> 00:02:58,540
large number of use cases where people

00:02:52,990 --> 00:03:02,020
want to do sophisticated container

00:02:58,540 --> 00:03:05,470
environments where they want to run and

00:03:02,020 --> 00:03:09,400
a bun to base system and they want to

00:03:05,470 --> 00:03:11,020
run Android containers on it in order to

00:03:09,400 --> 00:03:15,700
do that you need to be able to support

00:03:11,020 --> 00:03:18,520
both security policies that doesn't get

00:03:15,700 --> 00:03:19,840
you everything that you want it doesn't

00:03:18,520 --> 00:03:21,570
get you the ability to have different

00:03:19,840 --> 00:03:24,370
policies in your different containers

00:03:21,570 --> 00:03:29,950
but it is the fact the next step in that

00:03:24,370 --> 00:03:32,350
direction so we still have in order to

00:03:29,950 --> 00:03:33,730
do that there are a couple of there are

00:03:32,350 --> 00:03:36,400
a few things we need to do we need to

00:03:33,730 --> 00:03:39,910
make the key sock and soft and super

00:03:36,400 --> 00:03:44,530
block security blobs infrastructure

00:03:39,910 --> 00:03:46,300
mannered managed that's easy deaths you

00:03:44,530 --> 00:03:48,100
know just a few lines of code since

00:03:46,300 --> 00:03:49,770
we've done it for the other blobs we

00:03:48,100 --> 00:03:53,470
know what we have to do we can actually

00:03:49,770 --> 00:03:55,540
do a couple of things when we do that to

00:03:53,470 --> 00:04:00,010
actually improve performance of all the

00:03:55,540 --> 00:04:02,500
LSMs that use those blobs the way we

00:04:00,010 --> 00:04:07,750
vote I actually improved the use of the

00:04:02,500 --> 00:04:08,980
inode blobs and that's all the blobs

00:04:07,750 --> 00:04:10,959
that we have that we haven't actually

00:04:08,980 --> 00:04:14,170
converted that are used in more than one

00:04:10,959 --> 00:04:15,790
module it's possible that somebody could

00:04:14,170 --> 00:04:17,980
implement a security module that uses

00:04:15,790 --> 00:04:19,330
other blobs that we haven't

00:04:17,980 --> 00:04:22,510
that we won't have infrastructure

00:04:19,330 --> 00:04:26,560
managed but there's nobody using those

00:04:22,510 --> 00:04:27,880
yet and so we taking the approach of if

00:04:26,560 --> 00:04:32,080
it isn't a problem we're not going to

00:04:27,880 --> 00:04:34,150
fix it now one of the things that comes

00:04:32,080 --> 00:04:38,620
up when you decide you're going to have

00:04:34,150 --> 00:04:40,210
multiple security modules what do you do

00:04:38,620 --> 00:04:41,830
about the context now the security

00:04:40,210 --> 00:04:45,160
context is the text string that

00:04:41,830 --> 00:04:49,890
represents your security label or a

00:04:45,160 --> 00:04:53,670
security information and security blob

00:04:49,890 --> 00:04:56,290
so we're adding a couple of interfaces

00:04:53,670 --> 00:05:00,480
to address that issue we tried a whole

00:04:56,290 --> 00:05:04,600
bunch of ways of playing around with

00:05:00,480 --> 00:05:06,610
attributes and backward compatibility

00:05:04,600 --> 00:05:08,560
things that just didn't work and just

00:05:06,610 --> 00:05:10,450
didn't make people happy so finally I

00:05:08,560 --> 00:05:13,420
actually talked to somebody who does

00:05:10,450 --> 00:05:15,010
those application development one of the

00:05:13,420 --> 00:05:17,410
d-bus maintainer z' and he said well

00:05:15,010 --> 00:05:20,320
yeah all these things kind of make sense

00:05:17,410 --> 00:05:24,160
but the way I want it is and as soon as

00:05:20,320 --> 00:05:25,960
he said that he had me okay he could

00:05:24,160 --> 00:05:29,050
have said just about anything at that

00:05:25,960 --> 00:05:31,870
point and I would have said bye that's

00:05:29,050 --> 00:05:34,450
the way I'm gonna do it so what he said

00:05:31,870 --> 00:05:36,940
is I don't want to have to look in in

00:05:34,450 --> 00:05:39,280
proc add or current and switch around

00:05:36,940 --> 00:05:41,440
things or parse what comes out of there

00:05:39,280 --> 00:05:43,870
and guess which LSM it is I want a

00:05:41,440 --> 00:05:47,140
separate interface that will tell me

00:05:43,870 --> 00:05:48,670
what the LSM is and what the data is and

00:05:47,140 --> 00:05:50,590
it's got and I want it to be different

00:05:48,670 --> 00:05:53,320
because I don't want to get confused

00:05:50,590 --> 00:05:54,850
when I write like you know when I write

00:05:53,320 --> 00:05:59,610
the d-bus code which one I'm talking

00:05:54,850 --> 00:06:02,440
about so when we adding proc outer

00:05:59,610 --> 00:06:04,780
context which is like proc out or

00:06:02,440 --> 00:06:08,170
current is today except that it's it has

00:06:04,780 --> 00:06:12,760
data in the format of the LSM name its

00:06:08,170 --> 00:06:15,870
value LSM name a null its value and all

00:06:12,760 --> 00:06:19,840
the next Ella Sims value name and all

00:06:15,870 --> 00:06:22,780
etc and that way it can parse it very

00:06:19,840 --> 00:06:25,600
easily that enter the interface it will

00:06:22,780 --> 00:06:27,940
be null terminated you'll get a certain

00:06:25,600 --> 00:06:31,030
number of bytes it's easy to read out of

00:06:27,940 --> 00:06:31,610
proc pit at our context we also want to

00:06:31,030 --> 00:06:34,250
add

00:06:31,610 --> 00:06:37,789
SOP er context to go along with SOP R

00:06:34,250 --> 00:06:42,110
SEC SOP R SEC gets you the security

00:06:37,789 --> 00:06:43,699
context for one socket connection this

00:06:42,110 --> 00:06:47,810
will get you the same thing for all

00:06:43,699 --> 00:06:50,569
socket connections rather than expecting

00:06:47,810 --> 00:06:52,639
people who are writing new code or code

00:06:50,569 --> 00:06:57,919
that's going to be cognizant to this to

00:06:52,639 --> 00:07:07,449
do anything fancy now we also have a

00:06:57,919 --> 00:07:11,210
case oh haha there's a bug on this slide

00:07:07,449 --> 00:07:13,430
pay no attention to that man began this

00:07:11,210 --> 00:07:19,520
shouldn't say proxy elf at our context

00:07:13,430 --> 00:07:21,889
that should say display there are cases

00:07:19,520 --> 00:07:24,080
where you have legacy applications that

00:07:21,889 --> 00:07:27,860
know what LS M they want to work with

00:07:24,080 --> 00:07:30,199
that may not be getting that out of

00:07:27,860 --> 00:07:34,039
current now for example if you want to

00:07:30,199 --> 00:07:35,719
run the smack test suite it knows that

00:07:34,039 --> 00:07:37,219
what comes out of current is the smack

00:07:35,719 --> 00:07:39,620
value well if you're running it on a

00:07:37,219 --> 00:07:41,990
system that has SC Linux and smack or

00:07:39,620 --> 00:07:45,979
app armor and smack and app armories is

00:07:41,990 --> 00:07:48,500
first in the list smack the the smack

00:07:45,979 --> 00:07:51,349
test suite just gets all confused it's

00:07:48,500 --> 00:07:52,879
actually kind of amusing to watch so we

00:07:51,349 --> 00:07:56,270
do have to have a mechanism where we can

00:07:52,879 --> 00:07:57,940
say environmentally I'm gonna run this

00:07:56,270 --> 00:08:01,099
program and when you run this program

00:07:57,940 --> 00:08:02,389
it's it should get the smack values it's

00:08:01,099 --> 00:08:04,849
not the app armor values

00:08:02,389 --> 00:08:08,659
so there's mechanism proc self adder

00:08:04,849 --> 00:08:11,719
display which if you have cap Mac admin

00:08:08,659 --> 00:08:13,669
you can set that and then run the

00:08:11,719 --> 00:08:17,629
programs that expect things to be the

00:08:13,669 --> 00:08:20,300
old way and it will work this is for

00:08:17,629 --> 00:08:24,639
legacy legacy support only we really

00:08:20,300 --> 00:08:28,069
want people to move move eventually to

00:08:24,639 --> 00:08:30,860
either a system where they're not having

00:08:28,069 --> 00:08:33,140
multiple modules or if they are there go

00:08:30,860 --> 00:08:35,000
on able to use the the new interfaces

00:08:33,140 --> 00:08:36,680
because the new interfaces give them the

00:08:35,000 --> 00:08:40,579
information and the new interfaces will

00:08:36,680 --> 00:08:45,729
work even if you only have one module

00:08:40,579 --> 00:08:45,729
installed audit data

00:08:46,010 --> 00:08:49,760
you need to have more information in the

00:08:47,690 --> 00:08:51,590
audit record if you've got three LSMs

00:08:49,760 --> 00:08:53,690
any one of which could tell could have

00:08:51,590 --> 00:08:55,490
denied you access you really want to

00:08:53,690 --> 00:08:58,340
have it in the audit record which one

00:08:55,490 --> 00:09:02,180
you know what the contexts were for all

00:08:58,340 --> 00:09:04,310
the LSMs that are involved so of course

00:09:02,180 --> 00:09:08,480
we have to honor backward compatibility

00:09:04,310 --> 00:09:13,670
so in addition to the existing jobs

00:09:08,480 --> 00:09:15,770
files and and subfields we're adding

00:09:13,670 --> 00:09:18,500
these additional fields which are bobs

00:09:15,770 --> 00:09:20,630
and then the security module and the

00:09:18,500 --> 00:09:23,740
value and sub underscore and then the

00:09:20,630 --> 00:09:26,570
security module name and then its value

00:09:23,740 --> 00:09:29,330
so that if you've got old tools they'll

00:09:26,570 --> 00:09:30,980
still still find subject and object if

00:09:29,330 --> 00:09:34,010
you've got new tools you can find then

00:09:30,980 --> 00:09:37,160
you find it the new way and if you have

00:09:34,010 --> 00:09:39,500
old tools but you want information that

00:09:37,160 --> 00:09:42,950
isn't in the old

00:09:39,500 --> 00:09:47,110
yeah the old just sub field you can take

00:09:42,950 --> 00:09:49,730
the audit record run it through said and

00:09:47,110 --> 00:09:51,620
filter it so that you get get the right

00:09:49,730 --> 00:09:53,720
information in the right place so all

00:09:51,620 --> 00:09:54,830
the all the cases except the one where

00:09:53,720 --> 00:09:57,200
you're worried about amount of disk

00:09:54,830 --> 00:09:58,280
space yeah are covered and yeah you're

00:09:57,200 --> 00:09:59,420
going to get more information in your

00:09:58,280 --> 00:10:05,030
audit trail because you have more

00:09:59,420 --> 00:10:09,770
information that matters so and five

00:10:05,030 --> 00:10:11,420
point X I'm hoping it's five I just

00:10:09,770 --> 00:10:14,600
realized that I'm kind of making a

00:10:11,420 --> 00:10:17,510
supposition there five point X with

00:10:14,600 --> 00:10:19,910
complete stacking where we'll have all

00:10:17,510 --> 00:10:22,820
the modules working together like horses

00:10:19,910 --> 00:10:25,520
in the troika so what's going to require

00:10:22,820 --> 00:10:28,720
gonna be required there there's some

00:10:25,520 --> 00:10:33,050
really interesting issues with NFS

00:10:28,720 --> 00:10:36,470
labeled NFS has an interesting property

00:10:33,050 --> 00:10:38,810
in that it although there's a field for

00:10:36,470 --> 00:10:45,830
telling you what the format of the data

00:10:38,810 --> 00:10:48,020
you're sending is it's not used so the

00:10:45,830 --> 00:10:50,480
Linux implementation just assumes that

00:10:48,020 --> 00:10:54,709
since there's only one LSM that could

00:10:50,480 --> 00:10:56,629
possibly be reading this information and

00:10:54,709 --> 00:10:57,980
you've got a rational administrator who

00:10:56,629 --> 00:11:00,050
would put a server that would serve

00:10:57,980 --> 00:11:02,600
anything else out on the system out

00:11:00,050 --> 00:11:03,319
there on the network that it's all going

00:11:02,600 --> 00:11:05,120
to be fine

00:11:03,319 --> 00:11:06,740
they're all good they're just going to

00:11:05,120 --> 00:11:09,920
agree so we don't have to worry about it

00:11:06,740 --> 00:11:11,809
that's not a good idea we've had some

00:11:09,920 --> 00:11:14,360
meetings actually over the past couple

00:11:11,809 --> 00:11:16,009
of days with the NFS developers about

00:11:14,360 --> 00:11:18,800
how we're going to go about addressing

00:11:16,009 --> 00:11:21,079
this hopefully we're going to get real

00:11:18,800 --> 00:11:26,059
extended attributes support out of it

00:11:21,079 --> 00:11:28,819
but we'll see how that goes

00:11:26,059 --> 00:11:33,319
net label net label has got a really

00:11:28,819 --> 00:11:36,490
interesting at aspect the way it was

00:11:33,319 --> 00:11:39,259
implemented whereas most security mount

00:11:36,490 --> 00:11:42,620
security hooks are in the the main

00:11:39,259 --> 00:11:45,439
processing line net label requires that

00:11:42,620 --> 00:11:47,899
the LSM call in advance and say here

00:11:45,439 --> 00:11:50,449
when you go do something out here on

00:11:47,899 --> 00:11:53,629
this side here's what I want the the the

00:11:50,449 --> 00:11:56,300
values to be so when it's actually doing

00:11:53,629 --> 00:11:58,069
the processing it's just assuming that

00:11:56,300 --> 00:12:02,059
the the day is already there and it's

00:11:58,069 --> 00:12:05,509
going to go use it what that means is

00:12:02,059 --> 00:12:07,579
it's it's a little bit difficult for two

00:12:05,509 --> 00:12:10,670
LSMs that might want to put label

00:12:07,579 --> 00:12:13,040
packets out on the network to coordinate

00:12:10,670 --> 00:12:19,540
as to whether they're going to to agree

00:12:13,040 --> 00:12:24,490
or not so the solution to this of course

00:12:19,540 --> 00:12:26,899
is for the LSMs

00:12:24,490 --> 00:12:29,319
for the net label system to call a

00:12:26,899 --> 00:12:33,889
callback to the yellow cents and say hey

00:12:29,319 --> 00:12:35,750
do you guys agree and if they agree on

00:12:33,889 --> 00:12:37,939
what the labeling should be on the

00:12:35,750 --> 00:12:42,769
packet then you can send it if they

00:12:37,939 --> 00:12:46,490
don't agree then it's got to get stopped

00:12:42,769 --> 00:12:50,149
because as a system here we're not we're

00:12:46,490 --> 00:12:52,370
not and it turns out that selinux in

00:12:50,149 --> 00:12:55,939
smack have actually got quite different

00:12:52,370 --> 00:12:59,480
ideas as to how this should be used so

00:12:55,939 --> 00:13:00,649
there are actually very few cases where

00:12:59,480 --> 00:13:02,899
you're actually going to get a packet

00:13:00,649 --> 00:13:04,339
out but there are configuration things

00:13:02,899 --> 00:13:05,840
you can do that that'll actually make it

00:13:04,339 --> 00:13:07,490
make it work but that's

00:13:05,840 --> 00:13:11,900
kind of the compromise he had had to

00:13:07,490 --> 00:13:13,730
come up with in in terms of you got to

00:13:11,900 --> 00:13:18,560
LSMs which want to use this how are we

00:13:13,730 --> 00:13:22,220
going to make it so that it's safe okay

00:13:18,560 --> 00:13:29,600
so there's the tree there there several

00:13:22,220 --> 00:13:35,450
branches and if if the disc relabeling

00:13:29,600 --> 00:13:42,890
has finished I'll have a demo let's see

00:13:35,450 --> 00:13:51,830
oh yes it has okay so we're going to do

00:13:42,890 --> 00:13:55,370
this the hard way there we go No why

00:13:51,830 --> 00:13:57,020
isn't okay that's not gonna work

00:13:55,370 --> 00:13:59,960
I'm not gonna I'm not going to try to

00:13:57,020 --> 00:14:02,330
force it okay it's not gonna work I'm

00:13:59,960 --> 00:14:08,830
just not going to force it well and all

00:14:02,330 --> 00:14:12,770
the demo was was was to cat slash slash

00:14:08,830 --> 00:14:15,530
cistern security LSM and you'd see a big

00:14:12,770 --> 00:14:19,250
long list of LSM names including app

00:14:15,530 --> 00:14:21,170
armor SELinux and smack and a couple of

00:14:19,250 --> 00:14:28,430
others one of which you've never heard

00:14:21,170 --> 00:14:31,510
of okay so that's it for the stacking

00:14:28,430 --> 00:14:31,510

YouTube URL: https://www.youtube.com/watch?v=r7EjEHV7sE4


