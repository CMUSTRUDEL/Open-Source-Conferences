Title: Subsystem Update: Seccomp, Yama, and LoadPin - Kees Cook, Google
Publication date: 2019-08-28
Playlist: Linux Security Summit NA 2019 - San Diego
Description: 
	Subsystem Update: Seccomp, Yama, and LoadPin - Kees Cook, Google

This will present an update on development over the last year (and quick demos of new features) of several smaller Linux kernel security areas: the seccomp syscall filtering subsystem, the Yama ptrace-restriction LSM, and the LoadPin kernel-file-reading restriction LSM.
Captions: 
	00:00:00,030 --> 00:00:06,690
yeah I'm I'm case this is gonna be

00:00:03,859 --> 00:00:09,719
hopefully a pretty quick update here the

00:00:06,690 --> 00:00:12,540
agenda covering what James mentioned

00:00:09,719 --> 00:00:16,460
already just a quick background on sort

00:00:12,540 --> 00:00:19,230
of the distinction on the OSM's and

00:00:16,460 --> 00:00:21,119
we'll get through it anyway so sort of

00:00:19,230 --> 00:00:23,430
the regular LSMs are the ones that have

00:00:21,119 --> 00:00:24,779
a comprehensive policy language and

00:00:23,430 --> 00:00:27,710
cover this the sort of the full

00:00:24,779 --> 00:00:30,029
mandatory access control system

00:00:27,710 --> 00:00:33,630
there's also integrity and capabilities

00:00:30,029 --> 00:00:35,940
which are different but use capabilities

00:00:33,630 --> 00:00:39,570
you can't opt out of and integrity is

00:00:35,940 --> 00:00:41,100
sort of next to the LSM stack and the

00:00:39,570 --> 00:00:44,040
small LSM does tend to have a very

00:00:41,100 --> 00:00:47,430
narrow or fixed policy and do a specific

00:00:44,040 --> 00:00:50,760
task that is sort of out of scope for

00:00:47,430 --> 00:00:54,360
some of the other Macs and I maintain

00:00:50,760 --> 00:00:56,430
load pin and Yama and there's also the

00:00:54,360 --> 00:01:00,420
safe set ID that I've talked about

00:00:56,430 --> 00:01:02,250
earlier for narrowing the this chain the

00:01:00,420 --> 00:01:07,890
set user capability and soon we'll have

00:01:02,250 --> 00:01:13,049
the lockdown LSM so the load pin LSM was

00:01:07,890 --> 00:01:15,030
designed due to the fact that signing

00:01:13,049 --> 00:01:17,790
kernel modules doesn't make any sense if

00:01:15,030 --> 00:01:20,130
you already have total control over the

00:01:17,790 --> 00:01:22,110
the device that those modules are going

00:01:20,130 --> 00:01:24,420
to come off of the example being chrome

00:01:22,110 --> 00:01:26,189
OS uses DM Verity that's got a

00:01:24,420 --> 00:01:27,240
cryptographically verified read-only

00:01:26,189 --> 00:01:30,450
root filesystem

00:01:27,240 --> 00:01:32,490
so I don't need to sign those modules I

00:01:30,450 --> 00:01:33,930
their effective Lee already signed I

00:01:32,490 --> 00:01:36,360
just need to make sure they're only

00:01:33,930 --> 00:01:38,430
coming from that block device and that

00:01:36,360 --> 00:01:40,500
was what load pin will do is it says

00:01:38,430 --> 00:01:42,390
wherever I get my first module from

00:01:40,500 --> 00:01:43,860
that's the block device they have to

00:01:42,390 --> 00:01:48,270
that's the file system they have to come

00:01:43,860 --> 00:01:51,780
off of forever and this was extended to

00:01:48,270 --> 00:01:54,060
K exec images firmware security policy

00:01:51,780 --> 00:01:57,689
sorts anything that the kernel reads as

00:01:54,060 --> 00:02:02,219
a file load pin can cover and pin to

00:01:57,689 --> 00:02:04,229
locations thankfully this is pretty

00:02:02,219 --> 00:02:05,219
stable so it's easy to be a maintainer

00:02:04,229 --> 00:02:08,190
of it

00:02:05,219 --> 00:02:10,920
so some minor changes in

00:02:08,190 --> 00:02:15,510
and initialization output and what the

00:02:10,920 --> 00:02:18,990
boot parameter name was turning on Yama

00:02:15,510 --> 00:02:21,990
is mainly about it was only about Petrus

00:02:18,990 --> 00:02:26,520
restrictions it was the first stacked

00:02:21,990 --> 00:02:28,920
LSM sorry not sorry and it tries to

00:02:26,520 --> 00:02:33,060
narrow the scope of Pete racing events

00:02:28,920 --> 00:02:37,800
from what was effectively the same UID

00:02:33,060 --> 00:02:40,980
to sing an ancestor of a process tree or

00:02:37,800 --> 00:02:44,190
an explicitly whitelisted process and

00:02:40,980 --> 00:02:46,260
the goal there was to increase the

00:02:44,190 --> 00:02:48,420
amount of time necessary for an attacker

00:02:46,260 --> 00:02:50,280
to start stealing credentials because if

00:02:48,420 --> 00:02:52,230
someone gets into your system and they

00:02:50,280 --> 00:02:54,630
have to wait around for you to type the

00:02:52,230 --> 00:02:57,510
now backdoored version of ssh you have

00:02:54,630 --> 00:03:00,330
installed you have some time until you

00:02:57,510 --> 00:03:04,170
you made the attack and the user logs in

00:03:00,330 --> 00:03:06,300
and falls in your trap so instead of

00:03:04,170 --> 00:03:08,550
being able to attach to existing ssh

00:03:06,300 --> 00:03:11,130
things or any other credential holding

00:03:08,550 --> 00:03:14,190
processes you can't do that because you

00:03:11,130 --> 00:03:17,100
are not an ancestor of those that was

00:03:14,190 --> 00:03:20,850
the design goal this is also pretty

00:03:17,100 --> 00:03:24,480
stable in five dot o-- says caller found

00:03:20,850 --> 00:03:26,730
a a corner case in RC u races around

00:03:24,480 --> 00:03:30,989
task death that no one else had found

00:03:26,730 --> 00:03:33,300
yet so again pretty stable and and lots

00:03:30,989 --> 00:03:38,010
of distres habit part as part of their

00:03:33,300 --> 00:03:40,200
build set comp is not an alice em but

00:03:38,010 --> 00:03:43,830
i'm it's a sort of a security subsystem

00:03:40,200 --> 00:03:45,360
so i included here it's used all over

00:03:43,830 --> 00:03:48,769
the place

00:03:45,360 --> 00:03:52,110
and it's sort of next to no new proves

00:03:48,769 --> 00:03:54,420
and it's there's some good ideas on ways

00:03:52,110 --> 00:03:56,430
to wrap your code easily if you don't

00:03:54,420 --> 00:03:58,820
wanna write your own stuff lib comp got

00:03:56,430 --> 00:04:01,620
talked about earlier in the conference

00:03:58,820 --> 00:04:03,360
and if you want to do really crazy

00:04:01,620 --> 00:04:05,130
things like I'll show in a second you

00:04:03,360 --> 00:04:08,640
probably need to learn BPF a little bit

00:04:05,130 --> 00:04:12,900
which is a subset of classic BPF inset

00:04:08,640 --> 00:04:15,239
comp and not EBP F and to that end

00:04:12,900 --> 00:04:17,400
seccomp basically looks at this data

00:04:15,239 --> 00:04:18,539
structure in in the kernel that can you

00:04:17,400 --> 00:04:19,830
can match against what's this call

00:04:18,539 --> 00:04:20,560
number it was what architecture you're

00:04:19,830 --> 00:04:22,060
on in case you

00:04:20,560 --> 00:04:24,510
of a compat architecture which has a

00:04:22,060 --> 00:04:27,430
different syscall numbering convention

00:04:24,510 --> 00:04:30,880
the instruction pointer that called you

00:04:27,430 --> 00:04:32,410
and the arguments and you can't see

00:04:30,880 --> 00:04:34,090
anything more than that you cannot

00:04:32,410 --> 00:04:35,800
follow the pointers that might be in an

00:04:34,090 --> 00:04:37,480
argument because that's racy because if

00:04:35,800 --> 00:04:40,090
seccomp checks it then later the syscall

00:04:37,480 --> 00:04:43,180
might see something different so there

00:04:40,090 --> 00:04:46,570
is not yet you know deep argument

00:04:43,180 --> 00:04:48,639
inspection on set comp when that when

00:04:46,570 --> 00:04:51,100
you run right a filter you can return

00:04:48,639 --> 00:04:52,720
these various results like allow this is

00:04:51,100 --> 00:04:55,270
call and then a whole bunch of different

00:04:52,720 --> 00:04:57,669
variations all the way up to kill that

00:04:55,270 --> 00:05:02,440
particular thread or kill the entire

00:04:57,669 --> 00:05:04,930
process so there's a greater you know

00:05:02,440 --> 00:05:07,780
peril for your process depending on the

00:05:04,930 --> 00:05:11,500
filter results new one that got added is

00:05:07,780 --> 00:05:15,790
in the middle there is the second return

00:05:11,500 --> 00:05:17,050
user notification this is when you

00:05:15,790 --> 00:05:18,729
attach the filter you get a file

00:05:17,050 --> 00:05:20,710
descriptor back and can actually

00:05:18,729 --> 00:05:24,669
interact with that file descriptor as it

00:05:20,710 --> 00:05:27,190
gives you an it'll stop signal that file

00:05:24,669 --> 00:05:30,060
descriptor wait for the response skip

00:05:27,190 --> 00:05:32,669
this skip over this is call and then

00:05:30,060 --> 00:05:35,410
return the results that were in that um

00:05:32,669 --> 00:05:38,410
right now it skips there was skips the

00:05:35,410 --> 00:05:40,150
sis call always but there was some

00:05:38,410 --> 00:05:41,940
discussion this week about well can't we

00:05:40,150 --> 00:05:45,340
just also have a way to say okay

00:05:41,940 --> 00:05:46,660
continue with the sis call unmodified I

00:05:45,340 --> 00:05:50,800
worry about this a little bit because

00:05:46,660 --> 00:05:53,440
I'm concerned users will start checking

00:05:50,800 --> 00:05:55,360
like start doing deep inspection and say

00:05:53,440 --> 00:05:57,340
sure that's this call looks good to me

00:05:55,360 --> 00:05:58,900
it should continue but in fact it's the

00:05:57,340 --> 00:06:00,310
reverse which is I want to be able to

00:05:58,900 --> 00:06:02,320
handle something special that you don't

00:06:00,310 --> 00:06:05,650
have access to like outside of a

00:06:02,320 --> 00:06:07,770
container and then we could possibly

00:06:05,650 --> 00:06:09,820
with that we could also change

00:06:07,770 --> 00:06:11,200
notifications you could signal the FD

00:06:09,820 --> 00:06:14,110
and say I don't want to hear from you

00:06:11,200 --> 00:06:18,160
again just carry on forever or come back

00:06:14,110 --> 00:06:20,410
from that so now anger everything with a

00:06:18,160 --> 00:06:22,360
demo luckily there is already a sample

00:06:20,410 --> 00:06:23,740
of how to use user notification called

00:06:22,360 --> 00:06:25,990
user trap I'm going to try to rename

00:06:23,740 --> 00:06:28,939
that file because that's not the

00:06:25,990 --> 00:06:32,009
greatest name for it

00:06:28,939 --> 00:06:41,479
let's see if the demo gods like me or

00:06:32,009 --> 00:06:41,479
not nope can't see me hold on

00:06:48,260 --> 00:06:53,640
okay so this is sort of the set up of of

00:06:52,050 --> 00:06:55,140
where you would do a user notification

00:06:53,640 --> 00:06:56,700
if you're familiar with any of the BPF

00:06:55,140 --> 00:07:00,960
you can see this account returned user

00:06:56,700 --> 00:07:03,540
notification later on and in whatever

00:07:00,960 --> 00:07:05,730
has been confined with this you could

00:07:03,540 --> 00:07:07,200
say in the example that he has he was

00:07:05,730 --> 00:07:08,730
using mount because that's the thing but

00:07:07,200 --> 00:07:10,080
I'm just gonna I'm going to show a even

00:07:08,730 --> 00:07:11,160
more insane version of this we're still

00:07:10,080 --> 00:07:13,170
gonna call mount which would normally

00:07:11,160 --> 00:07:15,780
fail but this will be more fun we're in

00:07:13,170 --> 00:07:18,170
a cowl mount twice and it reports the

00:07:15,780 --> 00:07:21,540
specific err know that we're getting out

00:07:18,170 --> 00:07:22,950
then and on the the management side

00:07:21,540 --> 00:07:24,930
that's listening on this

00:07:22,950 --> 00:07:26,640
it's just performing a control to

00:07:24,930 --> 00:07:33,060
receive notifications and it handles it

00:07:26,640 --> 00:07:40,680
and and sends it back so it make things

00:07:33,060 --> 00:07:44,070
really big so you can see it so this is

00:07:40,680 --> 00:07:48,240
calling mount and we've popped a giant

00:07:44,070 --> 00:07:52,360
notification and let's let's pick an

00:07:48,240 --> 00:07:57,009
error now I don't know what these are

00:07:52,360 --> 00:07:58,360
well it's 104 104 is hold on no

00:07:57,009 --> 00:08:00,460
connection reset by Pierre okay I've

00:07:58,360 --> 00:08:05,080
actually heard of that sure how about in

00:08:00,460 --> 00:08:07,960
the sixties out of streams resources

00:08:05,080 --> 00:08:11,020
sure anyway that's it that's in my

00:08:07,960 --> 00:08:17,350
presentation thank you

00:08:11,020 --> 00:08:17,350

YouTube URL: https://www.youtube.com/watch?v=Jwkcezn6fW0


