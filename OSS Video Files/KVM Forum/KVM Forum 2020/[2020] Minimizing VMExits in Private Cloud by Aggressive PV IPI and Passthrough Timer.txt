Title: [2020] Minimizing VMExits in Private Cloud by Aggressive PV IPI and Passthrough Timer
Publication date: 2020-12-09
Playlist: KVM Forum 2020
Description: 
	VMExits caused by guest accesses to IPIs and timers have been observed as two of major overheads in virtualization. Lots of efforts have been taken in the community to reduce them. Most of them are designed for the public cloud scenarios and must follow the assertion that everything in VMs is untrusted. However, such assertion can be loosen in the private cloud scenarios where VMs can be partially trusted. Therefore, more aggressive optimization can be applied. In this talk, we will introduce our optimizations on guest IPIs and timers for KVM VMs in a private cloud. The optimizations are composed of an aggressive PV IPIs and a passthrough timer, which can eliminate most VMExits on both the setup and the interrupt injection paths. According to our early evaluation in a production environment, above optimizations can bring near bare-metal performance for certain guest workloads.

---

Qiao Hua
Bytedance, Software Engineer

Zhou Yibo
Bytedance, Engineer

zhou yibo is from bytedance, focus on the linux and Virtualization.
Captions: 
	00:00:06,799 --> 00:00:11,440
hello

00:00:08,240 --> 00:00:16,000
everyone thanks for coming

00:00:11,440 --> 00:00:16,000
now let me introduce myself first

00:00:20,320 --> 00:00:27,760
i'm a software engineer for fox arm

00:00:24,720 --> 00:00:31,679
color kvm

00:00:27,760 --> 00:00:32,640
under container now i'm going to talk

00:00:31,679 --> 00:00:35,760
about

00:00:32,640 --> 00:00:36,480
the aggressive pva api and the password

00:00:35,760 --> 00:00:40,399
tamer

00:00:36,480 --> 00:00:45,840
technologies which have been applied

00:00:40,399 --> 00:00:45,840
in our private cloud environment

00:00:51,280 --> 00:00:58,320
now let me begin my topic

00:00:54,800 --> 00:01:01,440
this is a gender of the topic

00:00:58,320 --> 00:01:04,960
firstly i will talk about the back

00:01:01,440 --> 00:01:08,000
background water problems are in

00:01:04,960 --> 00:01:11,119
our scenario and then

00:01:08,000 --> 00:01:12,799
the solutions about these problems will

00:01:11,119 --> 00:01:15,680
be offered

00:01:12,799 --> 00:01:16,560
and lastly we are talking about the

00:01:15,680 --> 00:01:21,360
field

00:01:16,560 --> 00:01:21,360
future work for our solution

00:01:22,080 --> 00:01:30,479
the background firstly

00:01:26,960 --> 00:01:35,040
let's talk about the tamer

00:01:30,479 --> 00:01:37,600
axis the timer axis

00:01:35,040 --> 00:01:38,840
which contributes to the overhead of

00:01:37,600 --> 00:01:41,840
virtualization

00:01:38,840 --> 00:01:44,560
significantly

00:01:41,840 --> 00:01:45,520
constantly the camera of the vm is

00:01:44,560 --> 00:01:50,000
emulated by

00:01:45,520 --> 00:01:54,159
vmware therefore army this army

00:01:50,000 --> 00:01:58,799
firing cameras will cause vm axis

00:01:54,159 --> 00:02:02,159
in our product environment

00:01:58,799 --> 00:02:06,640
most of camera axis are caused by

00:02:02,159 --> 00:02:10,000
reprogramming tamer

00:02:06,640 --> 00:02:13,599
as shown on the graph there are many

00:02:10,000 --> 00:02:15,290
reprogramming camera operations before

00:02:13,599 --> 00:02:18,370
camera very

00:02:15,290 --> 00:02:18,370
[Music]

00:02:20,160 --> 00:02:27,120
okay let's see the problems to ipa

00:02:23,280 --> 00:02:30,400
axis api axis are also

00:02:27,120 --> 00:02:33,760
a big portion of our heart in our

00:02:30,400 --> 00:02:37,599
scenario since not vms

00:02:33,760 --> 00:02:40,959
are widely used the left table

00:02:37,599 --> 00:02:43,440
is the typical skills of vm's user

00:02:40,959 --> 00:02:47,040
impedance

00:02:43,440 --> 00:02:50,879
the statics of the ipa vm axis

00:02:47,040 --> 00:02:54,080
is also present on graph downright

00:02:50,879 --> 00:02:58,879
you can see the ipa

00:02:54,080 --> 00:03:02,159
vmx of our scenario can cause up to

00:02:58,879 --> 00:03:06,159
500 and 50 000 vm axis

00:03:02,159 --> 00:03:09,599
every 5 minutes also features

00:03:06,159 --> 00:03:12,720
of pbpa are implemented

00:03:09,599 --> 00:03:15,200
in upstream but they don't resolve our

00:03:12,720 --> 00:03:15,200
issues

00:03:16,840 --> 00:03:21,680
very

00:03:18,239 --> 00:03:24,080
okay let's say solutions

00:03:21,680 --> 00:03:25,200
as i have talked about issues

00:03:24,080 --> 00:03:28,720
encountered

00:03:25,200 --> 00:03:31,760
in our scenario

00:03:28,720 --> 00:03:35,519
then let's talk about how we

00:03:31,760 --> 00:03:35,519
correct these problems

00:03:40,080 --> 00:03:47,920
to eliminate the overhead caused by

00:03:43,840 --> 00:03:52,560
time axis exit next camera

00:03:47,920 --> 00:03:52,560
need to be developed development

00:03:54,400 --> 00:04:02,319
there are existing solutions developed

00:03:57,920 --> 00:04:05,439
developed by tensing and alibaba cloud

00:04:02,319 --> 00:04:08,720
and but they don't meet our demands

00:04:05,439 --> 00:04:11,280
exit the next camera purpose by knee

00:04:08,720 --> 00:04:13,599
either changing cloud requires

00:04:11,280 --> 00:04:16,799
housekeeping cpus

00:04:13,599 --> 00:04:20,400
and the injector is paired

00:04:16,799 --> 00:04:24,080
camera interrupt through postfit runs

00:04:20,400 --> 00:04:27,360
another design from zhang

00:04:24,080 --> 00:04:28,000
alibaba cloud introduced modifications

00:04:27,360 --> 00:04:31,759
on gas

00:04:28,000 --> 00:04:36,639
color and the reserve of a dedicated cpu

00:04:31,759 --> 00:04:36,639
for handling camera interrupts

00:04:40,880 --> 00:04:47,919
okay let's see our solutions

00:04:44,560 --> 00:04:51,759
to overcome the problems in

00:04:47,919 --> 00:04:55,040
existing solutions we purpose the

00:04:51,759 --> 00:04:57,840
uh new exit nice camera we called

00:04:55,040 --> 00:04:58,560
it a pass-through timer in pass-through

00:04:57,840 --> 00:05:00,479
timer

00:04:58,560 --> 00:05:03,440
the vm can use a physical electric

00:05:00,479 --> 00:05:06,479
camera directly

00:05:03,440 --> 00:05:10,160
so the host camera will be

00:05:06,479 --> 00:05:11,680
offloaded to the preamp camera when vm

00:05:10,160 --> 00:05:15,919
entry

00:05:11,680 --> 00:05:19,280
when external interrupt exit happened

00:05:15,919 --> 00:05:22,639
if the external interrupt vector is

00:05:19,280 --> 00:05:23,440
local camera vector we should inject the

00:05:22,639 --> 00:05:27,280
camera

00:05:23,440 --> 00:05:27,280
interrupt for vm

00:05:28,960 --> 00:05:35,840
you are in r2 vm use the

00:05:32,240 --> 00:05:38,560
physical like the camera whim the

00:05:35,840 --> 00:05:39,600
network camera of the vm should work in

00:05:38,560 --> 00:05:43,039
tlc

00:05:39,600 --> 00:05:48,000
deadline mode and then in

00:05:43,039 --> 00:05:51,199
vmvm the intercept of tsc data msr

00:05:48,000 --> 00:05:51,199
should be disabled

00:05:51,280 --> 00:05:58,800
lastly we must adjust the host tsa value

00:05:55,039 --> 00:06:02,240
from vmware entry for vm

00:05:58,800 --> 00:06:05,680
use the physical tlc successfully

00:06:02,240 --> 00:06:09,039
because the tnc value of the vm

00:06:05,680 --> 00:06:11,600
is less than host tsc value

00:06:09,039 --> 00:06:11,600
of this

00:06:14,000 --> 00:06:19,360
you know in my possible camera

00:06:17,199 --> 00:06:23,520
environment

00:06:19,360 --> 00:06:26,720
the vm uses a physical camera directly

00:06:23,520 --> 00:06:30,319
so if we wanted to

00:06:26,720 --> 00:06:34,000
make a hosted camera work normally

00:06:30,319 --> 00:06:37,199
we must do some things

00:06:34,000 --> 00:06:40,639
in ibm entry we

00:06:37,199 --> 00:06:43,759
must get the latest camera the host host

00:06:40,639 --> 00:06:46,840
which will be expired

00:06:43,759 --> 00:06:48,479
and often upload it to pre ambition

00:06:46,840 --> 00:06:52,800
timer

00:06:48,479 --> 00:06:55,759
when our vmware exists on the vcpu

00:06:52,800 --> 00:06:57,120
pre-block will restart the host html to

00:06:55,759 --> 00:07:00,479
physical camera

00:06:57,120 --> 00:07:04,240
again and then the vm timer

00:07:00,479 --> 00:07:10,319
to soft camera which is emulated by

00:07:04,240 --> 00:07:13,360
vmware um pre-immersion camera is paired

00:07:10,319 --> 00:07:15,360
which indicates that the host clock

00:07:13,360 --> 00:07:18,800
event

00:07:15,360 --> 00:07:18,800
will be called

00:07:23,680 --> 00:07:30,639
this slider shows the difference

00:07:27,360 --> 00:07:32,800
between normal vm network camera and the

00:07:30,639 --> 00:07:36,479
vm password timer

00:07:32,800 --> 00:07:39,680
you can see in our design

00:07:36,479 --> 00:07:45,840
vm can program the left camera

00:07:39,680 --> 00:07:45,840
without trigger vm exit anymore

00:07:46,080 --> 00:07:49,759
okay in this slider the performance test

00:07:49,199 --> 00:07:53,599
result

00:07:49,759 --> 00:07:57,280
is presented you can see throughput of

00:07:53,599 --> 00:07:58,160
sets and gets operations of memory cards

00:07:57,280 --> 00:08:03,120
to

00:07:58,160 --> 00:08:07,120
increase the third 35.5 percent

00:08:03,120 --> 00:08:10,879
after adopting our pastor team

00:08:07,120 --> 00:08:14,080
the another test

00:08:10,879 --> 00:08:17,599
technique test which

00:08:14,080 --> 00:08:19,280
indicates schedule decency also shows

00:08:17,599 --> 00:08:26,319
the improvement

00:08:19,280 --> 00:08:29,919
after use our password timer

00:08:26,319 --> 00:08:34,800
okay let's talk about the

00:08:29,919 --> 00:08:34,800
the ipa vm access

00:08:35,440 --> 00:08:42,080
a possible a possible implementation of

00:08:38,640 --> 00:08:45,360
exit net ipa has been developed

00:08:42,080 --> 00:08:48,720
by me from tencent cloud

00:08:45,360 --> 00:08:52,160
this implementation marks all these

00:08:48,720 --> 00:08:55,600
cpus in a bitmap and

00:08:52,160 --> 00:09:00,399
then sender the ips to

00:08:55,600 --> 00:09:03,760
all these cpus together by one hypercar

00:09:00,399 --> 00:09:08,000
and then the vm scan the bitmap

00:09:03,760 --> 00:09:11,279
and get the distance

00:09:08,000 --> 00:09:14,800
cpus from the bitmap

00:09:11,279 --> 00:09:18,240
and then send the api

00:09:14,800 --> 00:09:21,360
to the cpu

00:09:18,240 --> 00:09:25,680
in bitmap one by one

00:09:21,360 --> 00:09:28,959
in another word this implementation

00:09:25,680 --> 00:09:36,480
merge multimati bmx

00:09:28,959 --> 00:09:39,920
into one varmint exit

00:09:36,480 --> 00:09:42,959
okay in our solutions

00:09:39,920 --> 00:09:48,640
we adopt

00:09:42,959 --> 00:09:48,640
on low exit pv ipa

00:09:48,959 --> 00:09:55,200
we we announced this

00:09:52,000 --> 00:09:57,040
no exit fpv api by pass-through pi

00:09:55,200 --> 00:10:00,560
discrete to guest

00:09:57,040 --> 00:10:05,040
and doesn't

00:10:00,560 --> 00:10:08,800
do not intercept sar msr

00:10:05,040 --> 00:10:11,680
in vm startup we offer

00:10:08,800 --> 00:10:12,560
dedicated pva scr for guests to send

00:10:11,680 --> 00:10:15,839
special

00:10:12,560 --> 00:10:20,959
interrupt such as smi

00:10:15,839 --> 00:10:20,959
and mi and in guest

00:10:21,519 --> 00:10:25,760
it can't send the ipm directly via post

00:10:24,800 --> 00:10:33,600
interrupt

00:10:25,760 --> 00:10:36,880
and without a vm exit

00:10:33,600 --> 00:10:40,320
now this direction will show how low

00:10:36,880 --> 00:10:45,120
exit the pva api works

00:10:40,320 --> 00:10:48,399
for example in guest the vispo

00:10:45,120 --> 00:10:51,760
zero send api to vcp1

00:10:48,399 --> 00:10:53,200
firstly we must get the pid script of

00:10:51,760 --> 00:10:58,160
vcp web

00:10:53,200 --> 00:11:01,279
and then we cite pv ipl vector in

00:10:58,160 --> 00:11:05,279
post interrupt requests a bitmap

00:11:01,279 --> 00:11:09,760
of a pid script of whisper one

00:11:05,279 --> 00:11:13,440
then we set a outstanding notification

00:11:09,760 --> 00:11:14,880
in pid script the outstanding

00:11:13,440 --> 00:11:18,959
notification

00:11:14,880 --> 00:11:22,959
will tear the hardware

00:11:18,959 --> 00:11:26,480
there is a pounding lq to

00:11:22,959 --> 00:11:26,480
reserve to to solve

00:11:26,959 --> 00:11:33,040
and then we get a notification vector

00:11:30,079 --> 00:11:36,519
from the pa described

00:11:33,040 --> 00:11:40,399
and the notification vector is always a

00:11:36,519 --> 00:11:41,839
post-interrupter vector but if the vcpu

00:11:40,399 --> 00:11:44,480
in

00:11:41,839 --> 00:11:45,440
the notification filter is a position

00:11:44,480 --> 00:11:48,480
interrupter

00:11:45,440 --> 00:11:51,760
make up vector and then

00:11:48,480 --> 00:11:55,200
we prepare scr and then lastly

00:11:51,760 --> 00:11:58,399
we read sar

00:11:55,200 --> 00:12:01,680
so the api is triggered

00:11:58,399 --> 00:12:04,079
successfully and without vm

00:12:01,680 --> 00:12:04,079
exit

00:12:05,360 --> 00:12:11,920
okay let's see the test interrupt

00:12:09,519 --> 00:12:12,720
okay sorry sorry let's see the test

00:12:11,920 --> 00:12:17,440
result

00:12:12,720 --> 00:12:17,440
of the low exit pv api

00:12:17,920 --> 00:12:26,000
after adopting low exit fpv api

00:12:21,760 --> 00:12:30,600
the cost of a single ipa operating in vm

00:12:26,000 --> 00:12:33,079
decreased from 115

00:12:30,600 --> 00:12:36,560
486 to

00:12:33,079 --> 00:12:39,920
412 seconds

00:12:36,560 --> 00:12:43,360
single pv api can perform on the

00:12:39,920 --> 00:12:43,360
level of bare metal

00:12:47,279 --> 00:12:54,000
affirm the perspective

00:12:50,480 --> 00:12:54,880
of the application level though exit pv

00:12:54,000 --> 00:12:59,360
api can

00:12:54,880 --> 00:13:02,720
also improve this remote significantly

00:12:59,360 --> 00:13:05,519
in our scenario lamp sets

00:13:02,720 --> 00:13:06,399
and gets operations per second of memory

00:13:05,519 --> 00:13:09,920
capture

00:13:06,399 --> 00:13:15,040
was the 14.8

00:13:09,920 --> 00:13:17,920
percent after intro tools in low exit

00:13:15,040 --> 00:13:17,920
pv rpi

00:13:18,480 --> 00:13:23,440
okay let's see filter work

00:13:24,320 --> 00:13:31,200
also there are many benefits by

00:13:27,519 --> 00:13:32,560
introducing password timer and low exit

00:13:31,200 --> 00:13:36,320
pv api

00:13:32,560 --> 00:13:40,240
but there are some potent potential

00:13:36,320 --> 00:13:43,360
problems needed to be addressed

00:13:40,240 --> 00:13:46,720
in terms of no accident pvipa

00:13:43,360 --> 00:13:49,839
the guest should be trustable because

00:13:46,720 --> 00:13:52,880
the guest can access the sar msr

00:13:49,839 --> 00:13:53,519
and the pid script this will allow

00:13:52,880 --> 00:13:57,440
guests

00:13:53,519 --> 00:13:58,000
cinder pv this this severe allocation

00:13:57,440 --> 00:14:01,920
the

00:13:58,000 --> 00:14:05,760
ips to arbitrary physical cpu

00:14:01,920 --> 00:14:07,519
in our private cloud scenario

00:14:05,760 --> 00:14:09,279
we can accept a trade-off between

00:14:07,519 --> 00:14:12,800
performance and

00:14:09,279 --> 00:14:17,680
security because the guest is generally

00:14:12,800 --> 00:14:20,639
considered to be credible

00:14:17,680 --> 00:14:21,199
but the work of making no accident

00:14:20,639 --> 00:14:24,560
prevent

00:14:21,199 --> 00:14:26,800
more muscle muscular still needs to be

00:14:24,560 --> 00:14:26,800
done

00:14:27,120 --> 00:14:30,639
when security is concert the secretary

00:14:30,320 --> 00:14:34,560
had

00:14:30,639 --> 00:14:37,760
our previous api could be implemented

00:14:34,560 --> 00:14:40,880
for example their eptp

00:14:37,760 --> 00:14:44,399
switch feature of ram think

00:14:40,880 --> 00:14:48,399
for past timer guests couldn't affect

00:14:44,399 --> 00:14:51,760
any other vms so the security of

00:14:48,399 --> 00:14:55,120
pathology is not the major concern

00:14:51,760 --> 00:14:58,720
in future works of supporting

00:14:55,120 --> 00:15:02,800
new migration under dynamic switch

00:14:58,720 --> 00:15:06,800
may be valuable okay

00:15:02,800 --> 00:15:10,079
this is all contents of my topic

00:15:06,800 --> 00:15:25,360
if you have any questions you can click

00:15:10,079 --> 00:15:25,360

YouTube URL: https://www.youtube.com/watch?v=3Wdlokex3ao


