Title: [2020] Keynote: QEMU by Paolo Bonzini
Publication date: 2020-12-09
Playlist: KVM Forum 2020
Description: 
	Paolo Bonzini
Red Hat, Inc., Distinguished Engineer
Turate, Italy

Paolo is a long-time KVM contributor and co-maintainer; he also co-maintains some subsystems in QEMU. He works at Red Hat.
Captions: 
	00:00:05,759 --> 00:00:09,519
good morning or good afternoon

00:00:07,839 --> 00:00:11,360
my name is paulo bondini i'm a

00:00:09,519 --> 00:00:13,840
distinguished engineer at ipad

00:00:11,360 --> 00:00:15,679
and i would like to present qamusta to

00:00:13,840 --> 00:00:17,359
support for 2020

00:00:15,679 --> 00:00:19,920
let's start looking at the previews here

00:00:17,359 --> 00:00:20,520
at lights we had deplocated python to

00:00:19,920 --> 00:00:23,199
support

00:00:20,520 --> 00:00:24,480
introducedkonfig developed faster boot

00:00:23,199 --> 00:00:25,920
and started using sphinx for

00:00:24,480 --> 00:00:27,680
documentation

00:00:25,920 --> 00:00:28,960
this slide comes from the last year

00:00:27,680 --> 00:00:30,480
status report

00:00:28,960 --> 00:00:32,160
and i would like to report further

00:00:30,480 --> 00:00:35,120
progress especially

00:00:32,160 --> 00:00:36,640
on the first and the last bullets the

00:00:35,120 --> 00:00:38,960
big change with respect to python

00:00:36,640 --> 00:00:40,879
support is that we only support python 3

00:00:38,960 --> 00:00:42,800
and we follow the python life cycle

00:00:40,879 --> 00:00:44,800
so we do not support any more python

00:00:42,800 --> 00:00:45,200
releases that have been declared end of

00:00:44,800 --> 00:00:48,559
life

00:00:45,200 --> 00:00:50,320
by this python developers we also

00:00:48,559 --> 00:00:52,320
completed the switch to sphinx

00:00:50,320 --> 00:00:54,960
and i will talk more about the benefits

00:00:52,320 --> 00:00:57,680
that this brought later

00:00:54,960 --> 00:00:58,559
among the other highlights of 2020 i

00:00:57,680 --> 00:01:00,640
want to point out

00:00:58,559 --> 00:01:03,120
new targets and boards because these had

00:01:00,640 --> 00:01:05,760
existed for a long time as force of qmu

00:01:03,120 --> 00:01:06,880
and they were now merged upstream

00:01:05,760 --> 00:01:09,040
another new feature

00:01:06,880 --> 00:01:10,799
is the verteio file system daemon which

00:01:09,040 --> 00:01:12,400
was already presented last year but is

00:01:10,799 --> 00:01:14,320
now merged

00:01:12,400 --> 00:01:15,680
and finally the improved ci and

00:01:14,320 --> 00:01:18,080
measurement build systems

00:01:15,680 --> 00:01:19,840
are both very important for qmo

00:01:18,080 --> 00:01:22,240
developers

00:01:19,840 --> 00:01:24,880
with respect to ci gitlab is now the

00:01:22,240 --> 00:01:26,240
main ci system that we rely upon

00:01:24,880 --> 00:01:28,479
it also takes care of building

00:01:26,240 --> 00:01:30,240
containers for developers to produce ci

00:01:28,479 --> 00:01:32,640
issues on their machines

00:01:30,240 --> 00:01:33,600
and for other ci systems such as ship

00:01:32,640 --> 00:01:35,759
level

00:01:33,600 --> 00:01:38,159
however shippable is being placed out in

00:01:35,759 --> 00:01:40,400
favor of gitlab itself

00:01:38,159 --> 00:01:42,240
we still use travis to test the wide

00:01:40,400 --> 00:01:44,320
variety of big configurations and to

00:01:42,240 --> 00:01:45,680
cover native builds on non x86

00:01:44,320 --> 00:01:49,520
architectures

00:01:45,680 --> 00:01:52,159
mca os bills have moved to serious ci

00:01:49,520 --> 00:01:53,680
and now serous ci covers windows bills

00:01:52,159 --> 00:01:56,000
as well

00:01:53,680 --> 00:01:58,479
we also use it for freebsd as has been

00:01:56,000 --> 00:02:00,560
the case for a long time

00:01:58,479 --> 00:02:02,079
another new addition is the ss pass

00:02:00,560 --> 00:02:04,399
project

00:02:02,079 --> 00:02:05,439
that relies on the fishing support that

00:02:04,399 --> 00:02:07,360
was also merged

00:02:05,439 --> 00:02:09,039
in the beginning of this year and

00:02:07,360 --> 00:02:11,920
finally we are now running coverity

00:02:09,039 --> 00:02:14,080
daily rather than weekly as before

00:02:11,920 --> 00:02:15,599
for the future we plan to limit further

00:02:14,080 --> 00:02:18,080
views of travis

00:02:15,599 --> 00:02:18,800
and we would also like to add non-x86

00:02:18,080 --> 00:02:21,840
runners

00:02:18,800 --> 00:02:24,319
for gitlab that are specific to qmo

00:02:21,840 --> 00:02:25,360
this would let us integrate apache with

00:02:24,319 --> 00:02:26,480
gitlab ci

00:02:25,360 --> 00:02:29,440
and make sure that there is a

00:02:26,480 --> 00:02:31,040
contributor will be able to use those

00:02:29,440 --> 00:02:33,280
runners

00:02:31,040 --> 00:02:34,879
we also have some configurations that

00:02:33,280 --> 00:02:36,720
are not yet covered by ci

00:02:34,879 --> 00:02:38,480
and they are only tested by peter middle

00:02:36,720 --> 00:02:40,160
before applying for requests

00:02:38,480 --> 00:02:42,000
this set should shrink further and

00:02:40,160 --> 00:02:44,239
further until ultimately

00:02:42,000 --> 00:02:46,800
the ci can be used as gate for

00:02:44,239 --> 00:02:49,200
maintainable requests

00:02:46,800 --> 00:02:50,000
now let's talk a bit about technical

00:02:49,200 --> 00:02:51,840
depth how

00:02:50,000 --> 00:02:54,800
kiermu suffered from it and what we did

00:02:51,840 --> 00:02:57,280
about it in 2020

00:02:54,800 --> 00:02:57,920
one common aspect of technical depth is

00:02:57,280 --> 00:02:59,840
that

00:02:57,920 --> 00:03:00,959
often it appears in areas that go by

00:02:59,840 --> 00:03:02,959
accretion and

00:03:00,959 --> 00:03:04,480
without a solid design foundation that

00:03:02,959 --> 00:03:06,000
support that growth

00:03:04,480 --> 00:03:07,920
typically there's also limited

00:03:06,000 --> 00:03:10,800
documentation and few people knowing

00:03:07,920 --> 00:03:12,959
their interviewing details

00:03:10,800 --> 00:03:14,800
if those areas then are modified by many

00:03:12,959 --> 00:03:16,640
people the changes will

00:03:14,800 --> 00:03:19,440
not be reviewed accurately despite the

00:03:16,640 --> 00:03:22,800
best intention of the developers

00:03:19,440 --> 00:03:24,879
and that's how technical depth emerges

00:03:22,800 --> 00:03:26,480
often we also speak of technical network

00:03:24,879 --> 00:03:27,280
areas where the tools we use are

00:03:26,480 --> 00:03:29,519
obsolete

00:03:27,280 --> 00:03:31,040
and have limited interoperability with

00:03:29,519 --> 00:03:32,480
the rest of the world

00:03:31,040 --> 00:03:34,560
for example this was the case for

00:03:32,480 --> 00:03:36,640
documentation

00:03:34,560 --> 00:03:38,879
and documentation together with qrm and

00:03:36,640 --> 00:03:41,360
the build system was one area where qa

00:03:38,879 --> 00:03:43,599
must suffer from technical depth

00:03:41,360 --> 00:03:45,200
camus was using the key info as the

00:03:43,599 --> 00:03:46,000
source format for documentation the key

00:03:45,200 --> 00:03:49,360
for is a perfectly

00:03:46,000 --> 00:03:51,920
fine format but it's hard to extend

00:03:49,360 --> 00:03:54,000
because it's even hard to just find a

00:03:51,920 --> 00:03:55,680
good person for the team for besides the

00:03:54,000 --> 00:03:57,439
making for tour

00:03:55,680 --> 00:03:59,680
therefore it was hard to integrate the

00:03:57,439 --> 00:04:02,799
documentation build with any other tool

00:03:59,680 --> 00:04:04,560
than the shell and make for example

00:04:02,799 --> 00:04:06,159
we have had documentation comments in

00:04:04,560 --> 00:04:06,720
the code for almost 10 years now but

00:04:06,159 --> 00:04:08,879
they were

00:04:06,720 --> 00:04:11,040
basically unused because the developer

00:04:08,879 --> 00:04:15,280
documentation was just a bunch of files

00:04:11,040 --> 00:04:17,359
it wasn't properly bundled into a manual

00:04:15,280 --> 00:04:19,600
also the only time where we built and

00:04:17,359 --> 00:04:22,320
uploaded manuals was at release time

00:04:19,600 --> 00:04:23,440
by using sphinx we were able to extend

00:04:22,320 --> 00:04:26,800
the purposes

00:04:23,440 --> 00:04:27,759
with python code basically creating

00:04:26,800 --> 00:04:30,400
entire parts

00:04:27,759 --> 00:04:31,919
of the documentation programmatically we

00:04:30,400 --> 00:04:33,759
will use the kernel dock script from

00:04:31,919 --> 00:04:35,919
linux to include documentation from the

00:04:33,759 --> 00:04:38,240
source code in the developer manual

00:04:35,919 --> 00:04:41,120
and we use pandoc to convert by existing

00:04:38,240 --> 00:04:43,199
taking for sources to restructure text

00:04:41,120 --> 00:04:45,120
we also have now continuous deployment

00:04:43,199 --> 00:04:46,639
of the manual as a result

00:04:45,120 --> 00:04:48,759
and you can find the latest camera

00:04:46,639 --> 00:04:50,880
manual at any given time on

00:04:48,759 --> 00:04:53,199
camera.readerdocs.io

00:04:50,880 --> 00:04:54,240
the next area that i'd like to touch is

00:04:53,199 --> 00:04:56,080
qrm

00:04:54,240 --> 00:04:58,000
the main problem with qrm probably was

00:04:56,080 --> 00:04:58,880
that it was even even clearer to most

00:04:58,000 --> 00:05:01,919
people

00:04:58,880 --> 00:05:03,600
why qm existed when qm was introduced it

00:05:01,919 --> 00:05:05,759
was presented as a consistent object

00:05:03,600 --> 00:05:07,919
model aiming to unify the configuration

00:05:05,759 --> 00:05:09,759
of devices and backends

00:05:07,919 --> 00:05:11,120
but this doesn't really answer the

00:05:09,759 --> 00:05:14,160
question of why qm

00:05:11,120 --> 00:05:16,320
looks like it does to the programmer it

00:05:14,160 --> 00:05:17,680
doesn't explain the principles of qm to

00:05:16,320 --> 00:05:19,840
developers

00:05:17,680 --> 00:05:20,720
we have made some progress in that area

00:05:19,840 --> 00:05:22,880
first of all

00:05:20,720 --> 00:05:24,000
the qr documentation is more accessible

00:05:22,880 --> 00:05:26,320
now that we have a proper

00:05:24,000 --> 00:05:27,840
developer manual but also through

00:05:26,320 --> 00:05:29,600
mailing these discussions we got to a

00:05:27,840 --> 00:05:30,720
definition of qm's design that looks

00:05:29,600 --> 00:05:32,639
like this

00:05:30,720 --> 00:05:33,840
current stamp system is about objects

00:05:32,639 --> 00:05:36,639
and their properties

00:05:33,840 --> 00:05:38,080
and lets objects expose properties to

00:05:36,639 --> 00:05:40,880
multiple channels

00:05:38,080 --> 00:05:42,720
these channels include qnp the command

00:05:40,880 --> 00:05:45,759
line and the human monitor

00:05:42,720 --> 00:05:48,479
there is a lot of work to do on qm for

00:05:45,759 --> 00:05:50,080
example with respect to introspection

00:05:48,479 --> 00:05:52,320
for now what we did was improving the

00:05:50,080 --> 00:05:54,639
documentation reducing the boilerplate

00:05:52,320 --> 00:05:56,800
that is needed to implement qrm classes

00:05:54,639 --> 00:05:58,000
and also making the udav apis more

00:05:56,800 --> 00:06:01,280
similar to the rest

00:05:58,000 --> 00:06:03,919
of qrm qdev was the pre-existing object

00:06:01,280 --> 00:06:06,720
model that was used for devices

00:06:03,919 --> 00:06:07,520
and while it is now based on qm a lot of

00:06:06,720 --> 00:06:09,780
its apis

00:06:07,520 --> 00:06:11,600
had retained the original flavor

00:06:09,780 --> 00:06:13,759
[Music]

00:06:11,600 --> 00:06:14,880
by making these apis more similar to the

00:06:13,759 --> 00:06:16,400
rest of qm

00:06:14,880 --> 00:06:18,400
we hope to make it easier for new

00:06:16,400 --> 00:06:21,680
developers to log to dev

00:06:18,400 --> 00:06:22,560
and qrm and finally the amazon build

00:06:21,680 --> 00:06:24,080
system

00:06:22,560 --> 00:06:26,000
i will stand for a little bit on a

00:06:24,080 --> 00:06:27,919
soapbox and talk a bit about it because

00:06:26,000 --> 00:06:30,080
it's a very large change

00:06:27,919 --> 00:06:31,520
i don't know who said this but i picked

00:06:30,080 --> 00:06:33,039
your two friends at the bar

00:06:31,520 --> 00:06:34,960
which is the right occurrence this day

00:06:33,039 --> 00:06:36,720
of course one of them

00:06:34,960 --> 00:06:38,000
is a little bit tipsy and says to the

00:06:36,720 --> 00:06:39,440
other you know the problem with

00:06:38,000 --> 00:06:40,000
programmers is that when they have a

00:06:39,440 --> 00:06:42,319
problem

00:06:40,000 --> 00:06:43,039
they start to program and this is true

00:06:42,319 --> 00:06:45,039
and that's how

00:06:43,039 --> 00:06:46,479
you end up with this kind of code in

00:06:45,039 --> 00:06:50,160
your belief system

00:06:46,479 --> 00:06:51,440
and also this code now i must say that

00:06:50,160 --> 00:06:52,560
this beauty was also very well

00:06:51,440 --> 00:06:54,479
documented

00:06:52,560 --> 00:06:55,759
probably it had more lines of comments

00:06:54,479 --> 00:06:57,440
than lines of code

00:06:55,759 --> 00:06:59,599
but that didn't make it any easier to

00:06:57,440 --> 00:07:01,280
debug so

00:06:59,599 --> 00:07:02,880
even though we cannot guarantee that the

00:07:01,280 --> 00:07:04,800
build system will be simple

00:07:02,880 --> 00:07:06,400
maybe we should make sure that people

00:07:04,800 --> 00:07:09,199
need to debug the build system

00:07:06,400 --> 00:07:09,680
as little as possible what does it mean

00:07:09,199 --> 00:07:11,360
to keep

00:07:09,680 --> 00:07:13,919
the build system logic as simple as

00:07:11,360 --> 00:07:15,680
possible the choice for kmu's newbie

00:07:13,919 --> 00:07:16,720
system was that each file should only be

00:07:15,680 --> 00:07:18,960
read once

00:07:16,720 --> 00:07:20,960
so you first gather the data you process

00:07:18,960 --> 00:07:23,599
it and then move on to the next phase

00:07:20,960 --> 00:07:26,080
which operates in the same way in the

00:07:23,599 --> 00:07:27,919
old build system reading the same file

00:07:26,080 --> 00:07:29,680
multiple times for example all the main

00:07:27,919 --> 00:07:31,599
files made it slow

00:07:29,680 --> 00:07:35,360
but also cause namespace collisions and

00:07:31,599 --> 00:07:36,800
ordering issues that were hard to debug

00:07:35,360 --> 00:07:39,120
the problem with doing this kind of

00:07:36,800 --> 00:07:40,960
surgery to a project as large as qmu

00:07:39,120 --> 00:07:42,880
is that it's not really possible to

00:07:40,960 --> 00:07:44,960
convert everything at once

00:07:42,880 --> 00:07:46,400
for camera 5.2 we have established the

00:07:44,960 --> 00:07:47,520
foundation and the beginning of the

00:07:46,400 --> 00:07:49,280
development phase

00:07:47,520 --> 00:07:50,800
and then converted much of the low

00:07:49,280 --> 00:07:52,479
hanging fruit

00:07:50,800 --> 00:07:54,319
everything else can be done in due time

00:07:52,479 --> 00:07:56,319
and for deposits we'll make sure to work

00:07:54,319 --> 00:07:57,840
with middle and upstream

00:07:56,319 --> 00:07:59,360
whenever there is something that can be

00:07:57,840 --> 00:07:59,919
improved in amazon we have noted it

00:07:59,360 --> 00:08:01,680
already

00:07:59,919 --> 00:08:03,759
and we have explained any workloads that

00:08:01,680 --> 00:08:06,479
were needed

00:08:03,759 --> 00:08:08,400
in fact going from make files to amazon

00:08:06,479 --> 00:08:10,160
was a very large change not only in

00:08:08,400 --> 00:08:12,400
terms of the sheer amount of code

00:08:10,160 --> 00:08:14,479
changes but also in terms of paradigm

00:08:12,400 --> 00:08:15,680
and trade-offs shell and make file for

00:08:14,479 --> 00:08:18,319
example

00:08:15,680 --> 00:08:20,400
are very flexible but they are rather

00:08:18,319 --> 00:08:21,840
low level and they only support strings

00:08:20,400 --> 00:08:24,000
as the data types

00:08:21,840 --> 00:08:25,599
on the other hand meson has high level

00:08:24,000 --> 00:08:27,039
constructs and data types

00:08:25,599 --> 00:08:29,440
but it operates at the level of a

00:08:27,039 --> 00:08:30,960
command as an array of strings

00:08:29,440 --> 00:08:32,640
rather than at the level of the shared

00:08:30,960 --> 00:08:35,360
pipeline

00:08:32,640 --> 00:08:37,440
another difference is that make is a

00:08:35,360 --> 00:08:38,240
declarative system and the macros we had

00:08:37,440 --> 00:08:40,080
on top

00:08:38,240 --> 00:08:41,360
were not really declarative but they

00:08:40,080 --> 00:08:43,919
tried to fake

00:08:41,360 --> 00:08:44,399
being declarative amazonia selling stead

00:08:43,919 --> 00:08:47,440
is

00:08:44,399 --> 00:08:50,720
more of the imperative kind

00:08:47,440 --> 00:08:53,600
though it lacks aliasing and mostly has

00:08:50,720 --> 00:08:54,320
unmutable objects and that mitigates the

00:08:53,600 --> 00:08:58,160
difference

00:08:54,320 --> 00:09:00,160
it also makes it harder to misuse meson

00:08:58,160 --> 00:09:01,839
number of lines of code is not really

00:09:00,160 --> 00:09:02,399
different because one of the scripts we

00:09:01,839 --> 00:09:04,080
used

00:09:02,399 --> 00:09:05,839
to ease the transition is actually

00:09:04,080 --> 00:09:09,120
pretty large the script

00:09:05,839 --> 00:09:10,640
called ninja tool will hopefully

00:09:09,120 --> 00:09:12,640
disappear already before the next

00:09:10,640 --> 00:09:14,080
release and once you discount it

00:09:12,640 --> 00:09:17,040
the new build system is already about

00:09:14,080 --> 00:09:18,959
1000 lines or 10 percent smaller

00:09:17,040 --> 00:09:21,920
most of the reduction comes from the

00:09:18,959 --> 00:09:23,760
computer script but the main file says

00:09:21,920 --> 00:09:25,519
also become much smaller

00:09:23,760 --> 00:09:26,959
and especially all of the complicated

00:09:25,519 --> 00:09:29,440
logic from those slides

00:09:26,959 --> 00:09:31,440
is gone of course if make is also gone

00:09:29,440 --> 00:09:32,959
the build is entirely non-recursive

00:09:31,440 --> 00:09:35,360
and the remaining make file logic is

00:09:32,959 --> 00:09:36,800
manageable since it's only about 400

00:09:35,360 --> 00:09:40,240
lines of code

00:09:36,800 --> 00:09:42,160
finally here is the fun part i decided

00:09:40,240 --> 00:09:43,680
not to include the traditional count of

00:09:42,160 --> 00:09:45,519
commit and reviews but rather do a

00:09:43,680 --> 00:09:48,080
little who's who game

00:09:45,519 --> 00:09:49,360
and starting with our interns for google

00:09:48,080 --> 00:09:51,519
summer of code

00:09:49,360 --> 00:09:53,040
we also participated in outreach but

00:09:51,519 --> 00:09:55,920
unfortunately we didn't get

00:09:53,040 --> 00:09:56,800
an intern from that program in summer of

00:09:55,920 --> 00:09:59,200
course however

00:09:56,800 --> 00:10:00,320
we got three and not only did all three

00:09:59,200 --> 00:10:02,959
students pass

00:10:00,320 --> 00:10:04,000
also their code has already been merged

00:10:02,959 --> 00:10:06,959
cesar contributed

00:10:04,000 --> 00:10:09,200
emulation for u2f security keys philip

00:10:06,959 --> 00:10:10,880
worked on linux user and ahmed

00:10:09,200 --> 00:10:14,560
established a framework for continuous

00:10:10,880 --> 00:10:17,519
benchmarking of tcg performance

00:10:14,560 --> 00:10:19,279
moving on here are a few shout outs to

00:10:17,519 --> 00:10:21,279
some members of the community

00:10:19,279 --> 00:10:22,720
in many cases their work has been

00:10:21,279 --> 00:10:23,760
mentioned already earlier in the

00:10:22,720 --> 00:10:26,959
presentation

00:10:23,760 --> 00:10:28,240
for example thomas and alex did a lot of

00:10:26,959 --> 00:10:30,880
work on ci

00:10:28,240 --> 00:10:32,560
the qm to the refactoring was completed

00:10:30,880 --> 00:10:34,800
thanks to marcus and booster daniel

00:10:32,560 --> 00:10:37,120
barangay and eduardo habcost

00:10:34,800 --> 00:10:39,519
and eduardo also worked on documentation

00:10:37,120 --> 00:10:41,600
together with peter my dad

00:10:39,519 --> 00:10:43,680
also richard henderson kept on doing

00:10:41,600 --> 00:10:45,120
great work on tcg and on a lot of other

00:10:43,680 --> 00:10:47,200
parts of camille

00:10:45,120 --> 00:10:48,640
and also i would like to thank lauren

00:10:47,200 --> 00:10:49,440
and philippe for keeping live the

00:10:48,640 --> 00:10:52,480
hobbiest

00:10:49,440 --> 00:10:54,560
origins of kiamu so to speak and of

00:10:52,480 --> 00:10:56,320
course to peter for merging everything

00:10:54,560 --> 00:10:58,079
and then ensuring that qmo development

00:10:56,320 --> 00:11:01,440
runs smoothly

00:10:58,079 --> 00:11:03,200
so what's next for 2021

00:11:01,440 --> 00:11:04,560
it's quite likely that we will use

00:11:03,200 --> 00:11:07,120
gitlab more

00:11:04,560 --> 00:11:08,720
here i listed five features that qmo

00:11:07,120 --> 00:11:11,519
could use from bitlab

00:11:08,720 --> 00:11:14,079
holy we won't use all of them but still

00:11:11,519 --> 00:11:15,920
here are some ideas

00:11:14,079 --> 00:11:17,440
generating and deploying to a new static

00:11:15,920 --> 00:11:19,360
site chemo.org

00:11:17,440 --> 00:11:21,680
could be done throughout gitlab pipeline

00:11:19,360 --> 00:11:23,600
for example and perhaps even the primary

00:11:21,680 --> 00:11:25,839
repository for qmo could be hosted on

00:11:23,600 --> 00:11:28,560
gitlab instead of relying

00:11:25,839 --> 00:11:29,600
on the turbo project's on servers

00:11:28,560 --> 00:11:31,920
release cables

00:11:29,600 --> 00:11:33,279
could also be prepared during gitlab ci

00:11:31,920 --> 00:11:35,680
which we don't

00:11:33,279 --> 00:11:36,480
currently do and this would make the

00:11:35,680 --> 00:11:40,160
process

00:11:36,480 --> 00:11:42,240
of cutting your release more automatic

00:11:40,160 --> 00:11:43,360
gitlab also provides issue tracking and

00:11:42,240 --> 00:11:45,120
the wiki

00:11:43,360 --> 00:11:47,440
currently we use respectively launched

00:11:45,120 --> 00:11:49,279
by the media wiki but migration here

00:11:47,440 --> 00:11:52,320
is more complex because of course we

00:11:49,279 --> 00:11:54,560
would have to move existing data

00:11:52,320 --> 00:11:57,279
a hot topic is going to be rethinking

00:11:54,560 --> 00:11:58,880
the qm api we had a huge mailing list

00:11:57,279 --> 00:11:59,600
thread between last december and last

00:11:58,880 --> 00:12:02,320
february

00:11:59,600 --> 00:12:03,839
and one idea that surfaced it was to

00:12:02,320 --> 00:12:06,240
simplify the relation

00:12:03,839 --> 00:12:07,680
between qmo and management tools by

00:12:06,240 --> 00:12:09,920
making the configuration

00:12:07,680 --> 00:12:11,760
of the vm homogeneous for example right

00:12:09,920 --> 00:12:12,480
now we have substantial differences

00:12:11,760 --> 00:12:15,600
between

00:12:12,480 --> 00:12:17,200
how to configure the vm initially and

00:12:15,600 --> 00:12:20,560
how to later hot plug

00:12:17,200 --> 00:12:23,360
additional hardware back-ends

00:12:20,560 --> 00:12:26,480
this means we would like to look at all

00:12:23,360 --> 00:12:28,800
of qmu's 131 command line options

00:12:26,480 --> 00:12:30,560
and decide for which we would need to

00:12:28,800 --> 00:12:32,000
provide an alternative means to do the

00:12:30,560 --> 00:12:35,040
same configuration

00:12:32,000 --> 00:12:36,800
for example through qapi possibly qmp

00:12:35,040 --> 00:12:38,560
syncs management tools already have to

00:12:36,800 --> 00:12:40,399
deal with it

00:12:38,560 --> 00:12:42,399
and another thing that would help

00:12:40,399 --> 00:12:44,079
management would be to provide

00:12:42,399 --> 00:12:45,760
official bindings for the management

00:12:44,079 --> 00:12:48,160
tools to q api

00:12:45,760 --> 00:12:50,240
this should cover multiple languages of

00:12:48,160 --> 00:12:51,680
which the most important probably are go

00:12:50,240 --> 00:12:54,880
in python

00:12:51,680 --> 00:12:58,639
in order to let people focus on working

00:12:54,880 --> 00:13:01,440
with qmo and enter event the eq api will

00:12:58,639 --> 00:13:02,959
finally for security we would like to be

00:13:01,440 --> 00:13:05,040
able to isolate

00:13:02,959 --> 00:13:07,440
security sensitive parts of qmo to

00:13:05,040 --> 00:13:11,040
multiple processes

00:13:07,440 --> 00:13:13,440
for now we have the host user servers

00:13:11,040 --> 00:13:15,839
supported in cambus storage demon

00:13:13,440 --> 00:13:16,959
but an extension to this idea is to use

00:13:15,839 --> 00:13:19,680
different languages

00:13:16,959 --> 00:13:20,880
not just different processes including

00:13:19,680 --> 00:13:23,120
of course rust

00:13:20,880 --> 00:13:25,839
for this reason malcolm really were as

00:13:23,120 --> 00:13:28,639
looked as qapi bindings for rust

00:13:25,839 --> 00:13:29,279
not so much for consuming qpi as was the

00:13:28,639 --> 00:13:32,079
case

00:13:29,279 --> 00:13:32,800
for the previous slide but for exposing

00:13:32,079 --> 00:13:34,959
grassed

00:13:32,800 --> 00:13:36,639
language constructs through q api

00:13:34,959 --> 00:13:40,000
roughly the same as we do in c

00:13:36,639 --> 00:13:42,079
already so that's it for this year's

00:13:40,000 --> 00:13:49,600
q remove step to support thanks and

00:13:42,079 --> 00:13:51,680
enjoy the rest of kpm4

00:13:49,600 --> 00:13:51,680

YouTube URL: https://www.youtube.com/watch?v=vCby3LZGRRM


