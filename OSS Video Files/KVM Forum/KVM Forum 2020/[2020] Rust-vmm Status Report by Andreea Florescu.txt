Title: [2020] Rust-vmm Status Report by Andreea Florescu
Publication date: 2020-12-09
Playlist: KVM Forum 2020
Description: 
	Andreea Florescu
Amazon, Software Development Engineer

I am a software engineer with the Amazon Web Services Firecracker team. I am passionate about open source and, beyond Firecracker, I am also contributing to rust-vmm, a community effort to create a shared set of Rust-based Virtual Machine Monitor components. So far Iâ€™ve been talking about both rust-vmm and Firecracker at Fosdem, EdgeSys, Open Infrastructure Summit and KubeCon.
Captions: 
	00:00:07,680 --> 00:00:12,480
hello everyone my name is andrea

00:00:10,080 --> 00:00:14,240
and i'm one of the uraspio maintainers

00:00:12,480 --> 00:00:16,320
today i will be talking about

00:00:14,240 --> 00:00:18,480
raspbmm and what we've been doing in

00:00:16,320 --> 00:00:20,960
2020 giving you an overview

00:00:18,480 --> 00:00:22,400
of uh what's in the past in the present

00:00:20,960 --> 00:00:25,519
and also what we are looking

00:00:22,400 --> 00:00:27,119
uh at in the future so

00:00:25,519 --> 00:00:28,560
for those of you who don't know

00:00:27,119 --> 00:00:31,359
raspberry i will just

00:00:28,560 --> 00:00:32,000
quickly go through what trustvm is ras

00:00:31,359 --> 00:00:35,520
vmm

00:00:32,000 --> 00:00:37,680
it's a open source project that provides

00:00:35,520 --> 00:00:39,600
virtualization components

00:00:37,680 --> 00:00:42,000
that are written in rust so these

00:00:39,600 --> 00:00:43,760
components correspond to

00:00:42,000 --> 00:00:46,320
rust packages which are also called

00:00:43,760 --> 00:00:47,200
crates you can find more details about

00:00:46,320 --> 00:00:49,280
it in

00:00:47,200 --> 00:00:51,280
the github page in grassview mmm

00:00:49,280 --> 00:00:53,120
community

00:00:51,280 --> 00:00:55,920
raspberry mm has been used in production

00:00:53,120 --> 00:00:58,320
system since 2019

00:00:55,920 --> 00:00:59,760
and it was mostly used by uh vmm's

00:00:58,320 --> 00:01:03,039
virtual machine monitors

00:00:59,760 --> 00:01:04,720
so uh as examples uh we have firecracker

00:01:03,039 --> 00:01:08,000
cloud hypervisor

00:01:04,720 --> 00:01:09,680
alibaba cloud sandbox and also enacts

00:01:08,000 --> 00:01:13,439
an interesting shift that we've seen in

00:01:09,680 --> 00:01:16,159
2020 uh is that besides vmms there are

00:01:13,439 --> 00:01:17,360
other applications that are using rasmum

00:01:16,159 --> 00:01:19,680
in production

00:01:17,360 --> 00:01:22,479
uh such as lip k run and dragonfly

00:01:19,680 --> 00:01:24,640
container image service

00:01:22,479 --> 00:01:25,680
now before i can actually talk about

00:01:24,640 --> 00:01:28,799
what is the state

00:01:25,680 --> 00:01:31,680
of resvmm now let me just quickly go

00:01:28,799 --> 00:01:32,560
over how we are defining uh several

00:01:31,680 --> 00:01:35,759
stages of

00:01:32,560 --> 00:01:36,880
these components uh in ras vmm so first

00:01:35,759 --> 00:01:39,759
of all we have the

00:01:36,880 --> 00:01:41,520
empty crate so empty components these

00:01:39,759 --> 00:01:42,000
are the components that we agreed to

00:01:41,520 --> 00:01:44,320
have

00:01:42,000 --> 00:01:45,200
uh as part of raspbian mmm and it all

00:01:44,320 --> 00:01:47,759
started from

00:01:45,200 --> 00:01:48,320
one idea that was uh submitted as a

00:01:47,759 --> 00:01:50,159
github

00:01:48,320 --> 00:01:52,159
issue into the russian mm community

00:01:50,159 --> 00:01:54,960
repository

00:01:52,159 --> 00:01:56,960
in this uh in this github issue people

00:01:54,960 --> 00:01:59,439
are supposed to talk about the component

00:01:56,960 --> 00:02:01,520
and um pretty much pretty much

00:01:59,439 --> 00:02:02,960
describing why is this component useful

00:02:01,520 --> 00:02:06,840
for the project and

00:02:02,960 --> 00:02:10,080
um and a short design

00:02:06,840 --> 00:02:13,120
overview after

00:02:10,080 --> 00:02:13,440
after the empty crate uh is created uh

00:02:13,120 --> 00:02:15,680
we

00:02:13,440 --> 00:02:17,840
start the design discussions and we do

00:02:15,680 --> 00:02:18,400
not expect things to be perfect while

00:02:17,840 --> 00:02:21,280
the

00:02:18,400 --> 00:02:22,959
crate is in development so people

00:02:21,280 --> 00:02:26,400
actually can

00:02:22,959 --> 00:02:28,879
submit um incomplete um

00:02:26,400 --> 00:02:30,800
components uh there that they are not uh

00:02:28,879 --> 00:02:32,319
feature complete or maybe don't have the

00:02:30,800 --> 00:02:36,640
full documentation

00:02:32,319 --> 00:02:39,840
or tests um just to get things started

00:02:36,640 --> 00:02:42,400
where we do have requirements for uh

00:02:39,840 --> 00:02:43,840
in terms of quality and documentation is

00:02:42,400 --> 00:02:45,680
before we are publishing these

00:02:43,840 --> 00:02:48,080
components on create io

00:02:45,680 --> 00:02:50,160
so uh in order to publish a component to

00:02:48,080 --> 00:02:51,680
create io from ras vm we are expecting

00:02:50,160 --> 00:02:53,599
to see a few things

00:02:51,680 --> 00:02:55,599
so the most important thing is that we

00:02:53,599 --> 00:02:56,879
want all the crates to have the same

00:02:55,599 --> 00:02:59,519
quality bar

00:02:56,879 --> 00:03:02,239
so all all of the crates need to be

00:02:59,519 --> 00:03:05,120
tested using the raspberry mmci

00:03:02,239 --> 00:03:06,239
in terms of in terms of testing uh we

00:03:05,120 --> 00:03:09,680
are expecting

00:03:06,239 --> 00:03:11,760
a uh line coverage of between 80 and 90

00:03:09,680 --> 00:03:13,360
at least this is what we've been having

00:03:11,760 --> 00:03:16,080
in the past

00:03:13,360 --> 00:03:17,440
in the case that we already published in

00:03:16,080 --> 00:03:19,120
terms of documentation

00:03:17,440 --> 00:03:21,440
one thing that is important and maybe

00:03:19,120 --> 00:03:22,159
special about the uh resume project is

00:03:21,440 --> 00:03:24,560
that

00:03:22,159 --> 00:03:25,840
ras vmm is not providing an application

00:03:24,560 --> 00:03:28,239
it's just providing

00:03:25,840 --> 00:03:29,040
essentially virtualization libraries so

00:03:28,239 --> 00:03:30,720
you will need

00:03:29,040 --> 00:03:33,120
to write the documentation for the

00:03:30,720 --> 00:03:36,799
public interface as well as the

00:03:33,120 --> 00:03:39,280
high level uh design overview

00:03:36,799 --> 00:03:40,080
once all of these things are uh are done

00:03:39,280 --> 00:03:42,640
uh

00:03:40,080 --> 00:03:44,239
we are publishing the crate on crate io

00:03:42,640 --> 00:03:47,440
and we are declaring it

00:03:44,239 --> 00:03:49,200
essentially production already so now we

00:03:47,440 --> 00:03:51,760
can look at the component

00:03:49,200 --> 00:03:53,680
status from from this point of view so

00:03:51,760 --> 00:03:54,319
last year at kvm forum i presented this

00:03:53,680 --> 00:03:56,560
slide

00:03:54,319 --> 00:03:57,920
and i talked a bit of uh what are the

00:03:56,560 --> 00:03:59,920
components that we published

00:03:57,920 --> 00:04:01,599
already and what are the components that

00:03:59,920 --> 00:04:03,760
are in development

00:04:01,599 --> 00:04:04,959
so for the published ones there were

00:04:03,760 --> 00:04:07,840
mostly bindings

00:04:04,959 --> 00:04:09,599
so that is auto-generated code and

00:04:07,840 --> 00:04:13,040
things have changed a bit uh

00:04:09,599 --> 00:04:15,599
last since last year first of all

00:04:13,040 --> 00:04:16,160
uh we have crates that have been moving

00:04:15,599 --> 00:04:18,160
from

00:04:16,160 --> 00:04:20,000
empty grace to actually being crate in

00:04:18,160 --> 00:04:23,919
development one of them is v

00:04:20,000 --> 00:04:28,400
host where uh uh the effort was

00:04:23,919 --> 00:04:32,080
uh mostly uh done by people from um

00:04:28,400 --> 00:04:33,520
ibm intel and alibaba and then we also

00:04:32,080 --> 00:04:36,160
had crates that

00:04:33,520 --> 00:04:37,680
became stale and we had a few pr's

00:04:36,160 --> 00:04:39,040
they're open but nothing really happened

00:04:37,680 --> 00:04:40,800
then we have to go and

00:04:39,040 --> 00:04:42,639
go back and figure out what is with this

00:04:40,800 --> 00:04:45,919
component and how we can

00:04:42,639 --> 00:04:48,880
um how we can

00:04:45,919 --> 00:04:50,560
make it useful in the future then we

00:04:48,880 --> 00:04:51,600
also published a few components so we

00:04:50,560 --> 00:04:54,160
published the

00:04:51,600 --> 00:04:56,160
linux loader and via memory so

00:04:54,160 --> 00:04:59,120
essentially these components are now

00:04:56,160 --> 00:05:01,199
ready to be used in production in terms

00:04:59,120 --> 00:05:03,440
of new development we started working on

00:05:01,199 --> 00:05:05,759
a few new crates uh one of them is

00:05:03,440 --> 00:05:07,120
the host user back end which again uh

00:05:05,759 --> 00:05:10,320
this uh

00:05:07,120 --> 00:05:14,320
the main effort is coming from

00:05:10,320 --> 00:05:17,120
ibm and um intel alibaba

00:05:14,320 --> 00:05:17,520
and also vfio ioctas which is the same

00:05:17,120 --> 00:05:19,759
uh

00:05:17,520 --> 00:05:20,880
group of people that are developing

00:05:19,759 --> 00:05:24,000
these

00:05:20,880 --> 00:05:25,680
components another interesting thing is

00:05:24,000 --> 00:05:27,039
the vmm reference we've been talking

00:05:25,680 --> 00:05:28,560
about it quite a lot and now it's

00:05:27,039 --> 00:05:31,120
finally in development

00:05:28,560 --> 00:05:32,960
uh the vmm reference implementation has

00:05:31,120 --> 00:05:35,600
two purposes so one of them

00:05:32,960 --> 00:05:37,360
is to be able to test the integration of

00:05:35,600 --> 00:05:40,320
raspbmm components

00:05:37,360 --> 00:05:42,160
uh directly in ras um so as part of rsvm

00:05:40,320 --> 00:05:43,199
instead of the products that are using

00:05:42,160 --> 00:05:45,120
raspbmm

00:05:43,199 --> 00:05:46,479
and the second purpose is to give people

00:05:45,120 --> 00:05:49,440
an overview or of

00:05:46,479 --> 00:05:53,840
or an example of how to glue together

00:05:49,440 --> 00:05:53,840
this raspbmm component

00:05:54,000 --> 00:06:00,319
in 2020 we've also looked at adding

00:05:57,759 --> 00:06:02,479
event manager the event manager which is

00:06:00,319 --> 00:06:04,400
providing

00:06:02,479 --> 00:06:06,400
abstractions for event-based

00:06:04,400 --> 00:06:09,440
applications and also

00:06:06,400 --> 00:06:10,000
uh vm superio which is actually the

00:06:09,440 --> 00:06:12,880
first

00:06:10,000 --> 00:06:15,039
crate that we have um that provides

00:06:12,880 --> 00:06:16,800
emulation so this is the first crate

00:06:15,039 --> 00:06:18,960
published on crate iowa with emulation

00:06:16,800 --> 00:06:20,400
so even though it's just legacy devices

00:06:18,960 --> 00:06:23,280
we're pretty excited that we have the

00:06:20,400 --> 00:06:23,280
first code there

00:06:23,600 --> 00:06:27,440
we also invested some time in security

00:06:25,360 --> 00:06:29,520
and testing one of the things

00:06:27,440 --> 00:06:31,199
that we looked at is adding performance

00:06:29,520 --> 00:06:33,840
tests because previously we were only

00:06:31,199 --> 00:06:35,520
doing integration tests and unit tests

00:06:33,840 --> 00:06:37,440
so for the performance test we added the

00:06:35,520 --> 00:06:39,759
pipeline for running the test

00:06:37,440 --> 00:06:41,280
and also we added benchmarks in a few

00:06:39,759 --> 00:06:43,520
repositories

00:06:41,280 --> 00:06:45,520
now there is a catch um because some of

00:06:43,520 --> 00:06:47,280
these benchmarks are actually taking a

00:06:45,520 --> 00:06:49,840
really long time to run

00:06:47,280 --> 00:06:50,639
so uh for some of them we can run them

00:06:49,840 --> 00:06:53,039
as part

00:06:50,639 --> 00:06:54,479
of the continuous integration and on

00:06:53,039 --> 00:06:56,880
each uh pull request

00:06:54,479 --> 00:06:57,919
like for example the event manager but

00:06:56,880 --> 00:07:00,160
for others

00:06:57,919 --> 00:07:02,240
uh it actually takes quite the time

00:07:00,160 --> 00:07:03,919
quite a lot of time to run them uh

00:07:02,240 --> 00:07:06,400
like for example vm memory where the

00:07:03,919 --> 00:07:09,360
benchmarks take more than one hour

00:07:06,400 --> 00:07:10,160
so for uh for the vm memory use case we

00:07:09,360 --> 00:07:12,800
need to find

00:07:10,160 --> 00:07:14,400
some uh infrastructure and set up the

00:07:12,800 --> 00:07:17,520
infrastructure essentially to

00:07:14,400 --> 00:07:20,000
to be able to do nightly runs and report

00:07:17,520 --> 00:07:21,759
the results somehow

00:07:20,000 --> 00:07:23,360
we also started investing more in the

00:07:21,759 --> 00:07:26,800
security aspect

00:07:23,360 --> 00:07:29,199
so the first thing that we did uh was to

00:07:26,800 --> 00:07:31,759
essentially do a code audit for the code

00:07:29,199 --> 00:07:33,919
that is already published on create io

00:07:31,759 --> 00:07:35,520
and we were looking mostly at things

00:07:33,919 --> 00:07:36,240
like what is the input what is the

00:07:35,520 --> 00:07:39,039
output

00:07:36,240 --> 00:07:39,840
um who is what are the trusted actors

00:07:39,039 --> 00:07:42,400
and what

00:07:39,840 --> 00:07:43,120
are the untrusted actors and based on

00:07:42,400 --> 00:07:45,919
this we will

00:07:43,120 --> 00:07:49,199
also work on a threat model which is

00:07:45,919 --> 00:07:51,360
expected to come in the following weeks

00:07:49,199 --> 00:07:53,120
as part of the code audit we were

00:07:51,360 --> 00:07:54,479
actually able to find a few security

00:07:53,120 --> 00:07:58,319
vulnerabilities

00:07:54,479 --> 00:07:59,039
so they are both fixed and new versions

00:07:58,319 --> 00:08:02,160
are released

00:07:59,039 --> 00:08:05,199
one of them is in via memory and the

00:08:02,160 --> 00:08:07,840
vulnerability uh might

00:08:05,199 --> 00:08:09,520
lead to a denial of service so

00:08:07,840 --> 00:08:10,879
essentially the bug in via memory was

00:08:09,520 --> 00:08:14,000
that reads and writes were not

00:08:10,879 --> 00:08:17,360
atomic when we were expecting them to be

00:08:14,000 --> 00:08:18,080
in vms vario the bug was in the serial

00:08:17,360 --> 00:08:21,759
console

00:08:18,080 --> 00:08:24,879
emulation and it could

00:08:21,759 --> 00:08:27,599
again lead to denial of service because

00:08:24,879 --> 00:08:28,879
we were allowing unbounded uh memory to

00:08:27,599 --> 00:08:32,719
be allocated

00:08:28,879 --> 00:08:35,360
for this one uh the uh embargo just

00:08:32,719 --> 00:08:36,800
ended so we have a cv id allocation in

00:08:35,360 --> 00:08:39,039
progress

00:08:36,800 --> 00:08:40,000
but if you want to know more about the

00:08:39,039 --> 00:08:42,719
details

00:08:40,000 --> 00:08:43,279
you can also see this on the on a public

00:08:42,719 --> 00:08:46,640
github

00:08:43,279 --> 00:08:49,200
issue in terms of community

00:08:46,640 --> 00:08:50,800
we were trying to see how is the rise

00:08:49,200 --> 00:08:53,519
pmm community doing

00:08:50,800 --> 00:08:55,519
um for this we use the github apis

00:08:53,519 --> 00:08:58,480
because it was the most accessible thing

00:08:55,519 --> 00:09:00,000
um and unfortunately github only does

00:08:58,480 --> 00:09:03,680
good contributions

00:09:00,000 --> 00:09:06,959
and from um like

00:09:03,680 --> 00:09:08,959
the the general assumption is that

00:09:06,959 --> 00:09:10,959
con contributions code contributions are

00:09:08,959 --> 00:09:12,080
not all contributions so we should be

00:09:10,959 --> 00:09:14,160
also looking at

00:09:12,080 --> 00:09:16,560
issues and discussions because we had

00:09:14,160 --> 00:09:18,320
people finding bugs in russia and them

00:09:16,560 --> 00:09:20,080
and participating at discussions and

00:09:18,320 --> 00:09:21,040
this should count as contributions as

00:09:20,080 --> 00:09:23,360
well but we

00:09:21,040 --> 00:09:24,560
we didn't manage to capture them uh in

00:09:23,360 --> 00:09:27,279
any way

00:09:24,560 --> 00:09:27,760
but looking at the graph on the right

00:09:27,279 --> 00:09:30,080
side

00:09:27,760 --> 00:09:31,519
uh we captured all the rsvm components

00:09:30,080 --> 00:09:34,720
and it looks like the

00:09:31,519 --> 00:09:37,120
uh contributions pretty much stay uh

00:09:34,720 --> 00:09:38,959
the same throughout the year we do have

00:09:37,120 --> 00:09:41,839
a few spikes where

00:09:38,959 --> 00:09:45,680
uh that correspond to the time when we

00:09:41,839 --> 00:09:45,680
added new components to svm

00:09:46,080 --> 00:09:50,320
for contributing we also worked on

00:09:48,399 --> 00:09:52,560
making it easier to start contributing

00:09:50,320 --> 00:09:53,600
on russia mm so we started adding the

00:09:52,560 --> 00:09:57,040
good first

00:09:53,600 --> 00:09:58,800
issue label and actually

00:09:57,040 --> 00:10:00,800
if you click on that link it will take

00:09:58,800 --> 00:10:03,040
you to the github page with all the

00:10:00,800 --> 00:10:05,200
issues in rsvm that are

00:10:03,040 --> 00:10:06,079
good first issues we also added the

00:10:05,200 --> 00:10:08,560
label uh

00:10:06,079 --> 00:10:09,440
help wanted for people that want to

00:10:08,560 --> 00:10:12,000
contribute

00:10:09,440 --> 00:10:13,440
and uh maybe it's not their first pull

00:10:12,000 --> 00:10:16,399
request

00:10:13,440 --> 00:10:18,000
um and then if these two searches are

00:10:16,399 --> 00:10:19,519
still not good enough and you don't find

00:10:18,000 --> 00:10:21,519
something that is interesting

00:10:19,519 --> 00:10:22,560
uh there is also a search for issues

00:10:21,519 --> 00:10:24,320
that not have an

00:10:22,560 --> 00:10:26,240
owner and you can search through those

00:10:24,320 --> 00:10:27,839
to see issues that are not actively

00:10:26,240 --> 00:10:29,920
worked on

00:10:27,839 --> 00:10:32,399
we are also encouraging people to start

00:10:29,920 --> 00:10:35,440
contributing and to ask us any question

00:10:32,399 --> 00:10:36,160
on our rust vmm channel the select

00:10:35,440 --> 00:10:42,160
channel

00:10:36,160 --> 00:10:42,160
and also using our email address

00:10:42,640 --> 00:10:48,079
in terms of future investment

00:10:45,760 --> 00:10:50,560
we are currently in a process of

00:10:48,079 --> 00:10:53,040
gathering feedback we want to understand

00:10:50,560 --> 00:10:54,640
uh if there are areas of improvement

00:10:53,040 --> 00:10:57,440
that we should be looking at

00:10:54,640 --> 00:10:58,320
so we are uh basically asking

00:10:57,440 --> 00:11:00,720
contribution

00:10:58,320 --> 00:11:03,040
contributors to ras vmm but also

00:11:00,720 --> 00:11:03,519
consumers of ras vmm to provide feedback

00:11:03,040 --> 00:11:06,320
so

00:11:03,519 --> 00:11:07,519
if you have any feedback uh on these

00:11:06,320 --> 00:11:10,959
areas you can

00:11:07,519 --> 00:11:12,880
uh either send me an email or just uh

00:11:10,959 --> 00:11:14,000
reach out reach to us on slack that

00:11:12,880 --> 00:11:16,880
would be really really

00:11:14,000 --> 00:11:17,920
helpful we're also working on

00:11:16,880 --> 00:11:20,320
establishing

00:11:17,920 --> 00:11:22,399
a process for reporting security

00:11:20,320 --> 00:11:24,640
vulnerabilities

00:11:22,399 --> 00:11:25,920
in terms of visualization components we

00:11:24,640 --> 00:11:30,320
are mostly

00:11:25,920 --> 00:11:32,720
working now on the host user backend

00:11:30,320 --> 00:11:33,839
for vert io we are starting with verteo

00:11:32,720 --> 00:11:35,519
over mmio

00:11:33,839 --> 00:11:37,839
and again in the following weeks we are

00:11:35,519 --> 00:11:41,200
expecting to see a few pr's here

00:11:37,839 --> 00:11:42,880
related to a block network and if time

00:11:41,200 --> 00:11:45,519
allows also vsoc

00:11:42,880 --> 00:11:45,920
we are also working on vcpu abstractions

00:11:45,519 --> 00:11:49,839
um

00:11:45,920 --> 00:11:50,320
pci via fio and on the security side of

00:11:49,839 --> 00:11:53,680
things

00:11:50,320 --> 00:11:56,160
fuzzing for for emulation code

00:11:53,680 --> 00:11:59,680
that was all i had uh thank you and

00:11:56,160 --> 00:11:59,680
please reach out to me if you have any

00:12:04,600 --> 00:12:07,600

YouTube URL: https://www.youtube.com/watch?v=7XKN2Rvd-2E


