Title: [2020] Libvirt Status Report by Daniel BerrangÃ©
Publication date: 2020-12-09
Playlist: KVM Forum 2020
Description: 
	Daniel BerrangÃ©
Red Hat, Senior Principal Software Engineer

Daniel is a long term contributor in the open source virtualization space working at Red Hat. A lead architect of the libvirt project since its inception, frequent contributor & subsystem maintainer to QEMU and has involved in many other projects including OpenStack, GTK-VNC, libosinfo, Xen. Daniel has given talks related to libvirt and virtualization management technologies at many previous KVM Forum conferences.
Captions: 
	00:00:09,120 --> 00:00:11,360
hi

00:00:09,519 --> 00:00:13,280
my name is daniel berenje and i'm here

00:00:11,360 --> 00:00:17,920
to give you a status report on the

00:00:13,280 --> 00:00:20,320
libvert project covering the past year

00:00:17,920 --> 00:00:20,960
since the start of this calendar year

00:00:20,320 --> 00:00:23,840
we've

00:00:20,960 --> 00:00:24,800
released uh nine nine versions of the

00:00:23,840 --> 00:00:26,800
libvert project

00:00:24,800 --> 00:00:29,519
and we're on course to do our usual 11

00:00:26,800 --> 00:00:31,679
releases by the end of the year

00:00:29,519 --> 00:00:32,880
we have a regular monthly release

00:00:31,679 --> 00:00:36,000
schedule

00:00:32,880 --> 00:00:39,920
except for the start of the year when we

00:00:36,000 --> 00:00:39,920
have two releases six weeks apart

00:00:40,640 --> 00:00:45,840
we've had 144 contributors to the

00:00:44,239 --> 00:00:50,160
releases this year

00:00:45,840 --> 00:00:51,600
and of those 144 87 of them have been

00:00:50,160 --> 00:00:53,440
new contributors to the project who

00:00:51,600 --> 00:00:56,160
haven't submitted any code before this

00:00:53,440 --> 00:00:56,160
calendar year

00:00:56,399 --> 00:01:02,239
the releases comprise 4100 commits

00:01:00,320 --> 00:01:04,640
and we estimate that by the end of this

00:01:02,239 --> 00:01:10,000
year um if the current rate

00:01:04,640 --> 00:01:13,520
continues we'll have up to 5 200.

00:01:10,000 --> 00:01:17,280
about 450 of those commits were sent by

00:01:13,520 --> 00:01:17,280
brand new contributors to the project

00:01:17,680 --> 00:01:22,320
those stats may sound great but

00:01:20,880 --> 00:01:25,040
it's useful to look at them in

00:01:22,320 --> 00:01:26,640
historical context to see whether they

00:01:25,040 --> 00:01:28,880
were getting better or worse than the

00:01:26,640 --> 00:01:30,640
previous years

00:01:28,880 --> 00:01:32,479
so if we take this graph of control

00:01:30,640 --> 00:01:35,840
contributions to the live project

00:01:32,479 --> 00:01:37,840
since it started in 2005

00:01:35,840 --> 00:01:41,280
we can see a good healthy growth in the

00:01:37,840 --> 00:01:44,640
project for the first five or six years

00:01:41,280 --> 00:01:46,880
and then it's kind of leveled out a bit

00:01:44,640 --> 00:01:49,920
between four thousand and five thousand

00:01:46,880 --> 00:01:49,920
commits per year

00:01:50,479 --> 00:01:54,320
we can see that the vast majority of the

00:01:52,399 --> 00:01:56,320
commits are from um

00:01:54,320 --> 00:01:59,280
so-called old authors these are people

00:01:56,320 --> 00:02:02,240
who've been contributing to libvert for

00:01:59,280 --> 00:02:04,799
more than one year and then we have a

00:02:02,240 --> 00:02:07,920
fairly consistent number of commits from

00:02:04,799 --> 00:02:10,239
new authors which are people who have

00:02:07,920 --> 00:02:13,039
been contributing for

00:02:10,239 --> 00:02:13,039
less than one year

00:02:14,560 --> 00:02:17,920
if we now look at the breakdown of the

00:02:16,239 --> 00:02:18,720
authors instead of the breakdown of

00:02:17,920 --> 00:02:21,599
commits

00:02:18,720 --> 00:02:22,000
we can see there's a generally a fairly

00:02:21,599 --> 00:02:25,680
even

00:02:22,000 --> 00:02:29,120
split between the long-term contributors

00:02:25,680 --> 00:02:29,120
and the new contributors

00:02:29,680 --> 00:02:35,519
last year looking at this graph for

00:02:32,800 --> 00:02:36,800
2019 we saw a dip in the new

00:02:35,519 --> 00:02:41,560
contributors

00:02:36,800 --> 00:02:45,440
for the for their um four years between

00:02:41,560 --> 00:02:48,560
2015 and 2019

00:02:45,440 --> 00:02:49,760
it's uh good to see that this year the

00:02:48,560 --> 00:02:52,239
number of new contributors

00:02:49,760 --> 00:02:53,760
has picked up dramatically and we'll

00:02:52,239 --> 00:02:54,480
talk a little bit about why that might

00:02:53,760 --> 00:02:57,599
be

00:02:54,480 --> 00:02:57,599
later in the presentation

00:02:58,000 --> 00:03:02,000
now the lib project comprises multiple

00:03:00,159 --> 00:03:04,879
git repositories

00:03:02,000 --> 00:03:06,319
and it might be interesting to see what

00:03:04,879 --> 00:03:07,840
the breakdown is for the different git

00:03:06,319 --> 00:03:10,319
repositories

00:03:07,840 --> 00:03:11,200
so first we'll look at just the core

00:03:10,319 --> 00:03:14,000
libvert

00:03:11,200 --> 00:03:15,599
library this is um the main c library

00:03:14,000 --> 00:03:17,360
and the library daemon

00:03:15,599 --> 00:03:19,200
which is where the bulk of the project

00:03:17,360 --> 00:03:20,560
code lives

00:03:19,200 --> 00:03:22,959
and we can see there's not much

00:03:20,560 --> 00:03:26,720
difference in the split

00:03:22,959 --> 00:03:26,720
between new and old contributors

00:03:27,440 --> 00:03:30,799
versus the previous slide it's still a

00:03:30,159 --> 00:03:32,640
fairly

00:03:30,799 --> 00:03:34,560
fairly even split and we can see there's

00:03:32,640 --> 00:03:36,159
a marked increase in the number of new

00:03:34,560 --> 00:03:38,560
contributors this year which is

00:03:36,159 --> 00:03:40,400
which is great to see after a few years

00:03:38,560 --> 00:03:45,519
of declining contributors

00:03:40,400 --> 00:03:47,920
we're kind of back up towards our peak

00:03:45,519 --> 00:03:51,040
then if we look at the other git

00:03:47,920 --> 00:03:56,000
repositories this is principally the

00:03:51,040 --> 00:03:57,680
language bindings to the main c library

00:03:56,000 --> 00:04:00,480
we can see this is there's a bit more

00:03:57,680 --> 00:04:03,040
variation from year to year

00:04:00,480 --> 00:04:04,400
but again we've got a growth in new

00:04:03,040 --> 00:04:07,519
contributors

00:04:04,400 --> 00:04:09,360
this year um we're not up

00:04:07,519 --> 00:04:11,519
at the level where we were a few years

00:04:09,360 --> 00:04:14,560
ago but this is this is to be expected

00:04:11,519 --> 00:04:17,440
because most of the language bindings

00:04:14,560 --> 00:04:18,959
um are fairly mature once once they've

00:04:17,440 --> 00:04:21,919
got full api coverage

00:04:18,959 --> 00:04:23,680
then the activity tends to tail off so

00:04:21,919 --> 00:04:27,280
this is this is kind of to be expected

00:04:23,680 --> 00:04:30,800
to a large degree so what's happened

00:04:27,280 --> 00:04:33,759
in the project in the past year

00:04:30,800 --> 00:04:36,720
first of all we've adopted gitlab.com as

00:04:33,759 --> 00:04:38,560
the primary project infrastructure

00:04:36,720 --> 00:04:41,680
this means moving the git repositories

00:04:38,560 --> 00:04:44,080
off the libret.org server onto gitlab

00:04:41,680 --> 00:04:47,199
the issue trackers have moved off the

00:04:44,080 --> 00:04:50,320
red hat bugzilla onto git lab

00:04:47,199 --> 00:04:54,320
the main website is now populated

00:04:50,320 --> 00:04:57,440
based on ci jobs running in git lab

00:04:54,320 --> 00:05:00,160
and the uh the main ci for

00:04:57,440 --> 00:05:02,800
for testing the builds and unit tests of

00:05:00,160 --> 00:05:05,680
libvard has moved off the centos jenkins

00:05:02,800 --> 00:05:07,280
into git labs so as you can see the vast

00:05:05,680 --> 00:05:09,199
majority of the project infrastructure

00:05:07,280 --> 00:05:12,560
is now using git lab

00:05:09,199 --> 00:05:12,560
as its platform

00:05:13,120 --> 00:05:17,520
in in switching to kit lab we've also

00:05:15,440 --> 00:05:19,440
adopted a merge request workflow for a

00:05:17,520 --> 00:05:21,759
number of the repositories

00:05:19,440 --> 00:05:22,880
we rolled this out gradually and this

00:05:21,759 --> 00:05:24,800
now covers

00:05:22,880 --> 00:05:27,120
all of the repositories except for the

00:05:24,800 --> 00:05:29,199
main libert git repository

00:05:27,120 --> 00:05:30,720
so all of the language bindings in

00:05:29,199 --> 00:05:31,919
particular are using the merge request

00:05:30,720 --> 00:05:33,440
workflow

00:05:31,919 --> 00:05:35,440
and this replaces the traditional

00:05:33,440 --> 00:05:40,080
email-based workflow that we've

00:05:35,440 --> 00:05:43,440
used prior to this this year

00:05:40,080 --> 00:05:46,800
the main live dot git repository will

00:05:43,440 --> 00:05:50,000
switch at a later date hopefully in the

00:05:46,800 --> 00:05:50,000
not too distant future

00:05:51,199 --> 00:05:55,680
the translation platform that lib vert

00:05:53,360 --> 00:05:58,240
uses has also changed

00:05:55,680 --> 00:06:01,199
the zanata project that lippert used to

00:05:58,240 --> 00:06:03,680
use was abandoned by its maintainers

00:06:01,199 --> 00:06:05,680
and so fedora adopted the web late

00:06:03,680 --> 00:06:07,600
translation system

00:06:05,680 --> 00:06:09,120
and since lippert outsources its

00:06:07,600 --> 00:06:11,840
translations to the fedora

00:06:09,120 --> 00:06:12,960
translation team we've adopted web late

00:06:11,840 --> 00:06:14,720
as well

00:06:12,960 --> 00:06:16,160
this has a nice property of integrating

00:06:14,720 --> 00:06:18,240
directly with gitlab

00:06:16,160 --> 00:06:20,800
so whenever new translations come in it

00:06:18,240 --> 00:06:23,280
opens merge requests on gitlab

00:06:20,800 --> 00:06:25,600
and as a result we now get accurate

00:06:23,280 --> 00:06:28,720
author attribution in the commits for

00:06:25,600 --> 00:06:28,720
translations as well

00:06:29,680 --> 00:06:34,080
a big focus of the past year has been

00:06:31,360 --> 00:06:37,120
tackling technical debt

00:06:34,080 --> 00:06:39,520
one of the most notable things has been

00:06:37,120 --> 00:06:42,240
the conversion of the build system

00:06:39,520 --> 00:06:43,520
to mison this means we've eliminated the

00:06:42,240 --> 00:06:46,720
majority of shell

00:06:43,520 --> 00:06:49,280
m4 make auto conf and automate code from

00:06:46,720 --> 00:06:53,039
the project

00:06:49,280 --> 00:06:55,759
as well as being a nice build system to

00:06:53,039 --> 00:06:56,319
read and write the mison build system

00:06:55,759 --> 00:06:58,319
has

00:06:56,319 --> 00:07:00,800
led to a dramatic speed up in the build

00:06:58,319 --> 00:07:03,759
time for libbert

00:07:00,800 --> 00:07:04,240
on my on one of my development servers

00:07:03,759 --> 00:07:06,639
the

00:07:04,240 --> 00:07:08,000
the old auto make base system would take

00:07:06,639 --> 00:07:10,800
around three minutes

00:07:08,000 --> 00:07:12,800
to do a complete build of live blurt and

00:07:10,800 --> 00:07:15,039
now with the adoption of mison

00:07:12,800 --> 00:07:16,880
we've pretty much cut that in half to

00:07:15,039 --> 00:07:18,240
one and a half minutes

00:07:16,880 --> 00:07:21,440
so that makes a big difference to

00:07:18,240 --> 00:07:21,440
developer productivity

00:07:22,720 --> 00:07:26,080
the most vast majority of the build

00:07:24,639 --> 00:07:28,720
scripts have been converted to

00:07:26,080 --> 00:07:30,639
python 3. we've got a little bit of

00:07:28,720 --> 00:07:32,400
pearl code left but the majority has

00:07:30,639 --> 00:07:33,919
been converted to python

00:07:32,400 --> 00:07:36,800
and support for python 2 has been

00:07:33,919 --> 00:07:40,080
dropped at the same time

00:07:36,800 --> 00:07:42,880
we adopted the glib project

00:07:40,080 --> 00:07:44,000
and in doing so we managed to remove the

00:07:42,880 --> 00:07:46,000
gnu loop code

00:07:44,000 --> 00:07:48,000
which was a prerequisite for adopting

00:07:46,000 --> 00:07:50,800
mison

00:07:48,000 --> 00:07:54,400
we've also converted a large portion of

00:07:50,800 --> 00:07:56,960
our website documentation to the

00:07:54,400 --> 00:07:59,199
restructured text format and we've also

00:07:56,960 --> 00:08:02,160
converted the manual pages to

00:07:59,199 --> 00:08:02,160
restructured text

00:08:03,680 --> 00:08:10,800
in adopting the glib library we have

00:08:07,360 --> 00:08:15,199
changed our memory management approach

00:08:10,800 --> 00:08:18,160
we now use an abort on out of memory

00:08:15,199 --> 00:08:19,840
paradigm and use the g-lobe allocation

00:08:18,160 --> 00:08:22,720
functions

00:08:19,840 --> 00:08:23,919
we've also adopted use of the gcc or

00:08:22,720 --> 00:08:28,319
c-lang

00:08:23,919 --> 00:08:28,319
extensions for automatic memory cleanup

00:08:28,800 --> 00:08:34,399
combined these these changes lead to

00:08:32,000 --> 00:08:36,640
code flow that's much easier to follow

00:08:34,399 --> 00:08:40,560
we've got fewer memory leaks and overall

00:08:36,640 --> 00:08:42,159
the code is more robust

00:08:40,560 --> 00:08:44,640
now looking at some of the big changes

00:08:42,159 --> 00:08:48,160
in the virtualization drivers

00:08:44,640 --> 00:08:50,800
we have refactored the block device code

00:08:48,160 --> 00:08:54,320
in the qmu driver quite significantly

00:08:50,800 --> 00:08:55,600
we now use the modern block dev approach

00:08:54,320 --> 00:08:57,680
to configuring qmu

00:08:55,600 --> 00:08:58,880
disks instead of the legacy drive

00:08:57,680 --> 00:09:00,480
approach

00:08:58,880 --> 00:09:02,640
and this has an immediate benefit for

00:09:00,480 --> 00:09:04,240
all applications using libvert

00:09:02,640 --> 00:09:05,760
because they are transparently switched

00:09:04,240 --> 00:09:08,080
to the new block dev

00:09:05,760 --> 00:09:09,279
approach and one of the notable things

00:09:08,080 --> 00:09:12,399
that this unlocks

00:09:09,279 --> 00:09:15,680
is support for new checkpoint or backup

00:09:12,399 --> 00:09:15,680
apis in libret

00:09:17,600 --> 00:09:21,440
the other thing we have enabled is

00:09:20,399 --> 00:09:23,760
support for

00:09:21,440 --> 00:09:25,760
firmware image auto selection which is

00:09:23,760 --> 00:09:29,200
useful when configuring

00:09:25,760 --> 00:09:32,560
uefi firmware in libvert

00:09:29,200 --> 00:09:35,040
we've introduced support for verteo fs

00:09:32,560 --> 00:09:35,600
which is a modern alternative to the

00:09:35,040 --> 00:09:39,360
nine p

00:09:35,600 --> 00:09:43,920
file system pass through and we've got

00:09:39,360 --> 00:09:43,920
nick teaming for a failover between

00:09:45,360 --> 00:09:52,160
between pci between assigned pci devices

00:09:49,360 --> 00:09:54,160
and emulated nics which allows you to do

00:09:52,160 --> 00:09:56,640
live migration

00:09:54,160 --> 00:09:58,959
when you have pci device assignment for

00:09:56,640 --> 00:09:58,959
nics

00:09:59,760 --> 00:10:04,160
in the secondary drivers we've

00:10:02,240 --> 00:10:08,000
introduced support for

00:10:04,160 --> 00:10:11,360
nat with ipv6 in our virtual network

00:10:08,000 --> 00:10:14,079
we've removed the old hal device driver

00:10:11,360 --> 00:10:15,040
which was it's been obsolete on linux

00:10:14,079 --> 00:10:18,640
for a long time

00:10:15,040 --> 00:10:19,360
and we kept it around for freebsd but

00:10:18,640 --> 00:10:22,240
now we've

00:10:19,360 --> 00:10:23,040
removed it entirely and you udev is our

00:10:22,240 --> 00:10:26,000
preferred

00:10:23,040 --> 00:10:28,240
device driver we also have support for

00:10:26,000 --> 00:10:30,880
the creation of mediated devices

00:10:28,240 --> 00:10:34,880
which goes along with support for

00:10:30,880 --> 00:10:38,240
mediated devices in the qmu driver

00:10:34,880 --> 00:10:40,800
in the other hypervisor drivers we have

00:10:38,240 --> 00:10:43,279
introduced support for qmu command line

00:10:40,800 --> 00:10:46,160
pass through in the zen driver

00:10:43,279 --> 00:10:47,360
the beehive driver for freebsd has

00:10:46,160 --> 00:10:50,240
gained support for many more

00:10:47,360 --> 00:10:53,200
configuration options

00:10:50,240 --> 00:10:54,160
we've got new active contributions for

00:10:53,200 --> 00:10:57,200
the hyper-v

00:10:54,160 --> 00:10:58,839
driver which has been looking for a

00:10:57,200 --> 00:11:00,079
maintainer for quite a number of years

00:10:58,839 --> 00:11:02,240
now

00:11:00,079 --> 00:11:03,360
and the virtualbox driver has been

00:11:02,240 --> 00:11:08,000
updated to

00:11:03,360 --> 00:11:09,839
the um 6.0 release apis

00:11:08,000 --> 00:11:12,839
and support for the older virtualbox

00:11:09,839 --> 00:11:15,839
releases has been

00:11:12,839 --> 00:11:15,839
discontinued

00:11:16,079 --> 00:11:22,560
and that is a good overall summary of

00:11:19,760 --> 00:11:24,480
the work that's gone on in the last year

00:11:22,560 --> 00:11:25,920
um the the technical debt and

00:11:24,480 --> 00:11:29,040
modernization of the

00:11:25,920 --> 00:11:31,360
of the code is an ongoing effort

00:11:29,040 --> 00:11:32,640
that will continue into the next year

00:11:31,360 --> 00:11:35,440
and

00:11:32,640 --> 00:11:37,040
we think this is is leading to very nice

00:11:35,440 --> 00:11:38,399
improvements in the maintainability of

00:11:37,040 --> 00:11:40,880
libvert

00:11:38,399 --> 00:11:42,000
and making it a more attractive project

00:11:40,880 --> 00:11:45,440
for contributors

00:11:42,000 --> 00:11:45,440
to participate in

00:11:45,839 --> 00:11:49,839
and that concludes my presentation for

00:11:53,000 --> 00:11:56,000

YouTube URL: https://www.youtube.com/watch?v=typ5B2zELJk


