Title: [2020] Hypervisor-managed Linear Address Translation by Chao Gao
Publication date: 2020-12-09
Playlist: KVM Forum 2020
Description: 
	Some security features (e.g. write-protect kernel code, SMEP) are deployed in kernel to raise the bar of vulnerability exploitation. In practice, attackers would defeat or turn off these security features first. A typical way is by breaking code/data integrity of security features through editing page tables. In this case, enforcing linear translation is important to prevent security features being bypassed. But existing approaches to enforce guest linear translation generally lead to much overhead as guest page table changes and CR3 loading must be trapped by VMM. With HLAT enabled, VMM donâ€™t need to monitor guest CR3 page table changes, thus reduces most overhead and improve efficiency. This presentation will first introduce the hardware extensions in HLAT, and then discuss how to build an efficient solution in KVM to enforce guest linear translation.

---

Chao Gao
Intel, Cloud Software Engineer

Chao has work for Intel for 4 years as a software engineer. He is responsible for enabling new Intel virtualization features in KVM/Xen and is familiar with interrupt virtualization, performance tuning and virtualization base security. Currently, Chao is working on using HLAT to enhance guest kernel's security.
Captions: 
	00:00:07,520 --> 00:00:10,639
hello

00:00:08,240 --> 00:00:12,240
thanks for attending this session i'm

00:00:10,639 --> 00:00:14,799
garcia working for intel

00:00:12,240 --> 00:00:15,679
today i'm going to share with you a new

00:00:14,799 --> 00:00:19,920
extension

00:00:15,679 --> 00:00:25,439
to intel vtx the hypervisor manager the

00:00:19,920 --> 00:00:25,439
link address translation or retract

00:00:25,920 --> 00:00:29,679
so here is today's agenda the first

00:00:28,720 --> 00:00:31,920
apartment apparently the

00:00:29,679 --> 00:00:33,600
problem statement basically i will

00:00:31,920 --> 00:00:36,480
explain

00:00:33,600 --> 00:00:37,280
the problem in access control and that's

00:00:36,480 --> 00:00:39,440
the

00:00:37,280 --> 00:00:42,000
background of the reason why each night

00:00:39,440 --> 00:00:44,239
is introduced

00:00:42,000 --> 00:00:45,440
the second part is our introduction to a

00:00:44,239 --> 00:00:48,719
slide

00:00:45,440 --> 00:00:52,000
i will introduce these new

00:00:48,719 --> 00:00:55,039
hardware capabilities and changes in

00:00:52,000 --> 00:00:55,039
hardware behavior

00:00:55,120 --> 00:00:59,039
in the last part i will describe a

00:00:58,239 --> 00:01:02,719
slide-based

00:00:59,039 --> 00:01:05,920
solution to enforce gas translation

00:01:02,719 --> 00:01:08,880
and its secure value its impact to pvm

00:01:05,920 --> 00:01:08,880
and the guest clone

00:01:11,280 --> 00:01:14,640
so the part one

00:01:16,479 --> 00:01:22,240
counted x control is widely used

00:01:19,520 --> 00:01:24,320
in this kernel to reduce the text

00:01:22,240 --> 00:01:26,320
surface

00:01:24,320 --> 00:01:27,840
for example linux kernel marks

00:01:26,320 --> 00:01:32,880
executable code

00:01:27,840 --> 00:01:36,079
non-writable in page table and the max

00:01:32,880 --> 00:01:39,040
data are non-executable in pitch table

00:01:36,079 --> 00:01:40,320
in general pit table base x control is

00:01:39,040 --> 00:01:44,159
efficient

00:01:40,320 --> 00:01:47,600
but in theory if an attacker would

00:01:44,159 --> 00:01:50,720
write would write to every

00:01:47,600 --> 00:01:52,079
memory by exploiting some kind of

00:01:50,720 --> 00:01:54,720
vulnerabilities

00:01:52,079 --> 00:01:55,439
you could override a pitch table and the

00:01:54,720 --> 00:01:58,880
bypass

00:01:55,439 --> 00:02:01,360
x can truly enforce the purpose table so

00:01:58,880 --> 00:02:02,640
to defend against attacks in that

00:02:01,360 --> 00:02:04,560
override page table

00:02:02,640 --> 00:02:06,320
we need to enforce the address

00:02:04,560 --> 00:02:09,599
translation integrity

00:02:06,320 --> 00:02:12,640
in a virtual machine we can use ebt to

00:02:09,599 --> 00:02:17,280
rather protect cr3 page table

00:02:12,640 --> 00:02:20,640
but it leads to high performance penalty

00:02:17,280 --> 00:02:23,840
so we introduced to address the

00:02:20,640 --> 00:02:23,840
performance issue

00:02:24,239 --> 00:02:29,440
okay let's look at the two typical page

00:02:27,760 --> 00:02:31,920
table overriding attacks

00:02:29,440 --> 00:02:33,360
one is alias mapping for example one

00:02:31,920 --> 00:02:37,120
virtual device

00:02:33,360 --> 00:02:40,239
is mapped to a facebook page

00:02:37,120 --> 00:02:44,319
without the right permission i

00:02:40,239 --> 00:02:45,760
assume that the attacker already has

00:02:44,319 --> 00:02:48,319
arbitrary memory excise

00:02:45,760 --> 00:02:51,200
so he can set up a previous map into the

00:02:48,319 --> 00:02:54,800
facebook page and the students

00:02:51,200 --> 00:02:57,360
it is marketing memory write

00:02:54,800 --> 00:03:00,879
writer allowed so the attacker can

00:02:57,360 --> 00:03:04,159
modify the page's content

00:03:00,879 --> 00:03:07,440
maybe he can inject some share code into

00:03:04,159 --> 00:03:10,800
this page now i'm gonna try to execute

00:03:07,440 --> 00:03:14,480
code the sharecode

00:03:10,800 --> 00:03:17,360
is triggered so another

00:03:14,480 --> 00:03:19,440
attack is a page remapping the

00:03:17,360 --> 00:03:20,239
anniversary doesn't need to modify the

00:03:19,440 --> 00:03:23,360
rail page

00:03:20,239 --> 00:03:26,640
just to copy the content

00:03:23,360 --> 00:03:30,080
to another page and modify

00:03:26,640 --> 00:03:32,400
the modifier next page

00:03:30,080 --> 00:03:33,519
and then the attack override pitch table

00:03:32,400 --> 00:03:36,720
to redirect the

00:03:33,519 --> 00:03:39,040
original virtual drives to the modified

00:03:36,720 --> 00:03:39,040
page

00:03:43,840 --> 00:03:48,400
then part two h9 introduction

00:03:50,879 --> 00:03:57,439
here is the visual spec you can

00:03:54,640 --> 00:03:59,920
download the spec from this link and the

00:03:57,439 --> 00:04:02,400
goal of each light is to reinforce guess

00:03:59,920 --> 00:04:04,640
the translation integrity

00:04:02,400 --> 00:04:06,159
and the prevented text in that override

00:04:04,640 --> 00:04:10,239
page table

00:04:06,159 --> 00:04:13,680
so here is the key idea of each slide

00:04:10,239 --> 00:04:16,320
each slide allows vmm to specify a

00:04:13,680 --> 00:04:17,120
virtualized range the so-called

00:04:16,320 --> 00:04:20,720
protected

00:04:17,120 --> 00:04:24,479
linear range or plr here

00:04:20,720 --> 00:04:25,520
for virtual drives in prr cpu page

00:04:24,479 --> 00:04:28,800
worker performs

00:04:25,520 --> 00:04:31,840
address translations through this

00:04:28,800 --> 00:04:35,120
each light piece table for

00:04:31,840 --> 00:04:38,080
virtual test outside pr cpu

00:04:35,120 --> 00:04:40,320
page worker performs address translation

00:04:38,080 --> 00:04:42,800
through csv page table

00:04:40,320 --> 00:04:45,600
the main benefits of a slice are

00:04:42,800 --> 00:04:48,639
security and

00:04:45,600 --> 00:04:50,639
efficiency but over by

00:04:48,639 --> 00:04:51,840
red protecting edge light painting

00:04:50,639 --> 00:04:55,360
structures

00:04:51,840 --> 00:04:58,800
the virtual drives in plr

00:04:55,360 --> 00:05:03,199
won't be redirected to other page so

00:04:58,800 --> 00:05:06,880
it is invulnerable to

00:05:03,199 --> 00:05:10,880
page remapping attack and it's efficient

00:05:06,880 --> 00:05:15,199
compiled with epg based table protection

00:05:10,880 --> 00:05:18,240
because with each light vmm

00:05:15,199 --> 00:05:21,360
doesn't need to intercept the changes to

00:05:18,240 --> 00:05:21,360
csv piece table

00:05:22,000 --> 00:05:29,039
this page is about each letters change

00:05:25,280 --> 00:05:32,320
to last the page table work this

00:05:29,039 --> 00:05:32,800
blue box here is the net net can see

00:05:32,320 --> 00:05:35,360
nested

00:05:32,800 --> 00:05:36,320
pivot table walk for given virtual

00:05:35,360 --> 00:05:39,360
device

00:05:36,320 --> 00:05:41,280
cpu page worker performs the first never

00:05:39,360 --> 00:05:44,560
address translation through

00:05:41,280 --> 00:05:47,840
the csv page table and then

00:05:44,560 --> 00:05:50,160
guide a guest official device then

00:05:47,840 --> 00:05:54,479
performs the epd work to

00:05:50,160 --> 00:05:56,400
translate the gesture fixed address to

00:05:54,479 --> 00:05:59,120
a host of physical address and cache the

00:05:56,400 --> 00:06:03,039
mapping into trb

00:05:59,120 --> 00:06:04,479
with http enabled cpu workers will

00:06:03,039 --> 00:06:07,520
perform a plr

00:06:04,479 --> 00:06:10,880
check first if the

00:06:07,520 --> 00:06:13,360
gas virtual device is in the plr

00:06:10,880 --> 00:06:14,880
cpu page walker performs address

00:06:13,360 --> 00:06:20,720
translation through

00:06:14,880 --> 00:06:24,080
h9 rather than css3 table

00:06:20,720 --> 00:06:26,639
so from the during our hli work

00:06:24,080 --> 00:06:28,800
page worker may encounter restart video

00:06:26,639 --> 00:06:31,520
in each slide page table entry

00:06:28,800 --> 00:06:33,360
so in that case page worker will restart

00:06:31,520 --> 00:06:36,080
a page walk through cr3

00:06:33,360 --> 00:06:37,199
pit table and each night will also

00:06:36,080 --> 00:06:39,680
introduce

00:06:37,199 --> 00:06:42,240
additional check in epg i will introduce

00:06:39,680 --> 00:06:42,240
nominator

00:06:43,120 --> 00:06:47,680
which light painting structures are

00:06:45,120 --> 00:06:48,720
almost the same as ie32e paging

00:06:47,680 --> 00:06:50,800
structures

00:06:48,720 --> 00:06:52,160
it supports both the 5-level and the

00:06:50,800 --> 00:06:56,479
4-level paging

00:06:52,160 --> 00:06:59,440
and the bt-11 is the restart bit

00:06:56,479 --> 00:07:00,960
hitting this bit results net paid work

00:06:59,440 --> 00:07:04,560
which starts with

00:07:00,960 --> 00:07:07,520
cr3 page table and during on

00:07:04,560 --> 00:07:08,560
each network cpu would repeat for the

00:07:07,520 --> 00:07:11,520
exception

00:07:08,560 --> 00:07:12,160
if page worker encounters non-present

00:07:11,520 --> 00:07:15,520
entry

00:07:12,160 --> 00:07:18,960
or misconfiguration for example reserved

00:07:15,520 --> 00:07:22,400
bs assigned in his pte

00:07:18,960 --> 00:07:25,599
in that case cpu cites bit 7

00:07:22,400 --> 00:07:28,800
of page 4 error code to indicate

00:07:25,599 --> 00:07:32,560
that this pitfall is

00:07:28,800 --> 00:07:32,560
on h9 terminal fault

00:07:34,720 --> 00:07:38,080
there are two new epg control beads are

00:07:37,360 --> 00:07:41,599
introduced

00:07:38,080 --> 00:07:42,960
to track earlier that mapping one is the

00:07:41,599 --> 00:07:45,520
patent right

00:07:42,960 --> 00:07:46,879
printing write allows the view to update

00:07:45,520 --> 00:07:49,680
adb some page

00:07:46,879 --> 00:07:50,160
even they are not relatable to software

00:07:49,680 --> 00:07:53,759
well

00:07:50,160 --> 00:07:58,160
for example previously for a

00:07:53,759 --> 00:08:00,720
permission is a sadly

00:07:58,160 --> 00:08:01,680
to address to the page and do adb

00:08:00,720 --> 00:08:04,800
software

00:08:01,680 --> 00:08:08,479
for the pages you use the the page table

00:08:04,800 --> 00:08:12,479
but if the rent permission is cleared

00:08:08,479 --> 00:08:15,919
on epg entry then both sulfur

00:08:12,479 --> 00:08:20,560
writes and the adb's updates are delight

00:08:15,919 --> 00:08:24,400
and they cause ept violation if

00:08:20,560 --> 00:08:26,240
cpu tries to do so

00:08:24,400 --> 00:08:27,440
patient rights introduce a new

00:08:26,240 --> 00:08:31,520
configuration

00:08:27,440 --> 00:08:32,399
if if the rank permission is cleared

00:08:31,520 --> 00:08:36,479
about the

00:08:32,399 --> 00:08:40,000
paging right is inside in a epd entry

00:08:36,479 --> 00:08:43,360
then only software rises delight

00:08:40,000 --> 00:08:45,440
adb sap data allowed

00:08:43,360 --> 00:08:46,560
basically paging rights can improve

00:08:45,440 --> 00:08:50,160
efficiency

00:08:46,560 --> 00:08:51,760
if vmm needs to read owning gastopic

00:08:50,160 --> 00:08:55,279
table under ept

00:08:51,760 --> 00:09:01,279
it can reduce vmax due to adb's update

00:08:55,279 --> 00:09:01,279
and relieve vmm from adb simulation

00:09:03,120 --> 00:09:11,920
the other bit is verified paging right

00:09:08,080 --> 00:09:14,320
verified patent writing enforcement all

00:09:11,920 --> 00:09:16,080
leave guest payment structure page

00:09:14,320 --> 00:09:20,000
encountered during the nested

00:09:16,080 --> 00:09:22,800
work has pw site and ept

00:09:20,000 --> 00:09:25,839
else generates an apt violation

00:09:22,800 --> 00:09:29,519
specifically for this page

00:09:25,839 --> 00:09:31,200
the vpw flag is cited in epd entry the

00:09:29,519 --> 00:09:34,160
cpu would verify

00:09:31,200 --> 00:09:36,160
neither forward links against the

00:09:34,160 --> 00:09:39,600
prising structure page

00:09:36,160 --> 00:09:42,800
they have paid in right

00:09:39,600 --> 00:09:43,519
size under ept otherwise an epd

00:09:42,800 --> 00:09:46,160
violation is

00:09:43,519 --> 00:09:46,160
generated

00:09:48,560 --> 00:09:56,160
vmm can use pw and the

00:09:52,399 --> 00:09:57,279
vpw flags to prevent the memory

00:09:56,160 --> 00:09:59,920
exercises through

00:09:57,279 --> 00:10:01,279
hds mapping for example for guess the

00:09:59,920 --> 00:10:04,560
physical memory to be

00:10:01,279 --> 00:10:05,519
protected vmm consider vpw flag on the

00:10:04,560 --> 00:10:07,920
ept

00:10:05,519 --> 00:10:10,320
and inside the pwl flag for each light

00:10:07,920 --> 00:10:13,760
pitching structure page

00:10:10,320 --> 00:10:16,959
because of the hardware check

00:10:13,760 --> 00:10:19,839
against the vpw this

00:10:16,959 --> 00:10:21,440
protective memory can only be exercised

00:10:19,839 --> 00:10:23,519
through each light

00:10:21,440 --> 00:10:25,680
if an attack tried to set up asmr

00:10:23,519 --> 00:10:29,760
mapping to access

00:10:25,680 --> 00:10:32,720
vpw tagged memory in csvp table

00:10:29,760 --> 00:10:33,120
memory exercise to vpw attack memory

00:10:32,720 --> 00:10:36,240
would

00:10:33,120 --> 00:10:40,480
cause epg violation due to

00:10:36,240 --> 00:10:43,360
low pwl flag in

00:10:40,480 --> 00:10:43,360
india's market

00:10:45,360 --> 00:10:50,959
so number part three our example of

00:10:48,560 --> 00:10:53,680
using h9 to reinforce gas translation

00:10:50,959 --> 00:10:53,680
integrity

00:10:53,920 --> 00:10:58,000
this is the hell of architecture here we

00:10:56,800 --> 00:10:59,839
have a vmm

00:10:58,000 --> 00:11:01,120
and the virtual machine on it in the

00:10:59,839 --> 00:11:02,000
virtual machine guess the column

00:11:01,120 --> 00:11:04,399
maintains

00:11:02,000 --> 00:11:05,839
two page tables there should be stable

00:11:04,399 --> 00:11:07,360
on the h9 page table

00:11:05,839 --> 00:11:10,399
first against the kernel needs to

00:11:07,360 --> 00:11:12,000
identify get the pages on translations

00:11:10,399 --> 00:11:15,360
to be protected

00:11:12,000 --> 00:11:16,480
casa kuna yeah here we use color text

00:11:15,360 --> 00:11:19,040
and raw data as an

00:11:16,480 --> 00:11:20,560
example tester kernel sets up protective

00:11:19,040 --> 00:11:22,959
translation in each lines

00:11:20,560 --> 00:11:24,640
and the right protects h9 page table

00:11:22,959 --> 00:11:27,839
under ept

00:11:24,640 --> 00:11:29,600
so protected translations can be

00:11:27,839 --> 00:11:32,640
redirected

00:11:29,600 --> 00:11:35,680
this translation are mapped to

00:11:32,640 --> 00:11:39,040
some that's the physical page for

00:11:35,680 --> 00:11:42,720
please get the physical page vmms size

00:11:39,040 --> 00:11:43,440
vpw flag from under ept and decide the

00:11:42,720 --> 00:11:45,360
pw

00:11:43,440 --> 00:11:47,760
flag for each line of painting

00:11:45,360 --> 00:11:51,600
structures

00:11:47,760 --> 00:11:56,639
so if an attacker wants to set up a

00:11:51,600 --> 00:11:59,760
linux mapping to protect the memory

00:11:56,639 --> 00:12:02,000
and to access this potential memory the

00:11:59,760 --> 00:12:06,399
earliest mapping

00:12:02,000 --> 00:12:09,760
needs to have pw site on the ept

00:12:06,399 --> 00:12:13,360
so that the attacker needs to

00:12:09,760 --> 00:12:15,920
be able to call some

00:12:13,360 --> 00:12:15,920
headquarters

00:12:17,920 --> 00:12:22,959
so guess the corner may decide to

00:12:20,399 --> 00:12:26,000
protect or unprotect some translations

00:12:22,959 --> 00:12:26,959
the random in that case cancer kernel

00:12:26,000 --> 00:12:29,760
needs to update

00:12:26,959 --> 00:12:31,040
each night page table but wall pages is

00:12:29,760 --> 00:12:33,440
that the

00:12:31,040 --> 00:12:34,480
page paging structures are run protected

00:12:33,440 --> 00:12:37,200
on the ept

00:12:34,480 --> 00:12:38,720
so to update the h9 paging structures

00:12:37,200 --> 00:12:42,880
cathode content needs to

00:12:38,720 --> 00:12:46,560
reverse red production or related h90

00:12:42,880 --> 00:12:48,959
painting structure page which

00:12:46,560 --> 00:12:49,600
you want to update through help call

00:12:48,959 --> 00:12:52,639
then

00:12:49,600 --> 00:12:56,480
update each night pitch table and then

00:12:52,639 --> 00:12:59,440
apply right protection

00:12:56,480 --> 00:13:00,240
hdi page label again so as you can see

00:12:59,440 --> 00:13:02,399
to update

00:13:00,240 --> 00:13:03,839
h9 against the kernel needs to call

00:13:02,399 --> 00:13:06,880
several high course

00:13:03,839 --> 00:13:08,240
the updating h9 is slow but it brings

00:13:06,880 --> 00:13:10,720
one benefit

00:13:08,240 --> 00:13:12,399
yeah because each night page table is

00:13:10,720 --> 00:13:15,680
read only on the abt

00:13:12,399 --> 00:13:15,680
to override a

00:13:15,760 --> 00:13:20,000
pte in each night attack as the first

00:13:18,480 --> 00:13:22,959
invoker have call

00:13:20,000 --> 00:13:25,279
to remote write production on his page

00:13:22,959 --> 00:13:25,279
table

00:13:26,800 --> 00:13:30,079
so what's the security value of this

00:13:29,360 --> 00:13:33,200
solution

00:13:30,079 --> 00:13:33,760
in theory on attack with arbitrary

00:13:33,200 --> 00:13:35,920
memory

00:13:33,760 --> 00:13:36,959
write capability card override page

00:13:35,920 --> 00:13:40,240
table

00:13:36,959 --> 00:13:43,360
to make current attacks of the

00:13:40,240 --> 00:13:44,240
raw data readable and then override the

00:13:43,360 --> 00:13:47,199
kind of text

00:13:44,240 --> 00:13:49,519
under real data if this solution is

00:13:47,199 --> 00:13:50,720
deployed in needless kernels overriding

00:13:49,519 --> 00:13:52,880
the actual piece table

00:13:50,720 --> 00:13:53,839
can't redirect the translation for

00:13:52,880 --> 00:13:57,120
kernel attacks and

00:13:53,839 --> 00:14:00,160
raw data and the override

00:13:57,120 --> 00:14:01,680
h9 page table is much harder because in

00:14:00,160 --> 00:14:04,880
most of the time h9

00:14:01,680 --> 00:14:08,399
page table is read only on the ept

00:14:04,880 --> 00:14:12,079
the attacker needs to turn off h9 first

00:14:08,399 --> 00:14:17,839
or make a science

00:14:12,079 --> 00:14:17,839
page table writable under ept

00:14:18,000 --> 00:14:21,279
someone may have one question in mind

00:14:20,800 --> 00:14:24,079
why

00:14:21,279 --> 00:14:25,920
does coolness not just write pythagoras

00:14:24,079 --> 00:14:28,560
repeats table on the ept

00:14:25,920 --> 00:14:29,120
i think there are two reasons each night

00:14:28,560 --> 00:14:31,680
based

00:14:29,120 --> 00:14:34,160
solution is more efficient it doesn't

00:14:31,680 --> 00:14:34,639
need to intercept the cs3 solution and

00:14:34,160 --> 00:14:37,760
it can

00:14:34,639 --> 00:14:41,120
use prr and restart it in

00:14:37,760 --> 00:14:44,160
h9 page table to

00:14:41,120 --> 00:14:47,760
enforce translation at key

00:14:44,160 --> 00:14:48,880
page granularity where cs3 pin table run

00:14:47,760 --> 00:14:52,959
production will

00:14:48,880 --> 00:14:56,880
impact the setup and the teardown of

00:14:52,959 --> 00:15:00,079
other normal mappings secondly i think

00:14:56,880 --> 00:15:03,279
h9 basis solution is relatively clean

00:15:00,079 --> 00:15:06,800
because it doesn't need change

00:15:03,279 --> 00:15:08,000
in search tables management if you use a

00:15:06,800 --> 00:15:11,279
new piece table

00:15:08,000 --> 00:15:13,760
couldn't just focus on how to

00:15:11,279 --> 00:15:15,279
manage the new page table and doesn't

00:15:13,760 --> 00:15:18,320
need to

00:15:15,279 --> 00:15:20,800
doesn't need intrusive change to current

00:15:18,320 --> 00:15:22,160
memory management and through our poc we

00:15:20,800 --> 00:15:24,560
think the change side is

00:15:22,160 --> 00:15:24,560
small

00:15:25,600 --> 00:15:29,440
we have finished the plc for this

00:15:27,839 --> 00:15:31,680
solution and

00:15:29,440 --> 00:15:32,560
this is a tesla module we use to

00:15:31,680 --> 00:15:36,079
demonstrate

00:15:32,560 --> 00:15:39,040
the effect of agenda's protection to gas

00:15:36,079 --> 00:15:41,759
transactions this module accepts a

00:15:39,040 --> 00:15:44,639
virtual device

00:15:41,759 --> 00:15:45,920
and first you try to modify csv page

00:15:44,639 --> 00:15:48,880
table to

00:15:45,920 --> 00:15:50,320
grant right permission and the line the

00:15:48,880 --> 00:15:53,360
right

00:15:50,320 --> 00:15:54,399
writes a zero to next virtual device and

00:15:53,360 --> 00:15:57,440
then in our test

00:15:54,399 --> 00:15:59,040
we pass the starter drives of a kind of

00:15:57,440 --> 00:16:02,800
text to this module

00:15:59,040 --> 00:16:06,320
without the solution

00:16:02,800 --> 00:16:10,320
this rights would succeed without

00:16:06,320 --> 00:16:14,160
any arrow but with this solution this

00:16:10,320 --> 00:16:17,360
right would cause

00:16:14,160 --> 00:16:18,480
pitfalls and color ops from the current

00:16:17,360 --> 00:16:21,680
message

00:16:18,480 --> 00:16:24,880
here are done so two

00:16:21,680 --> 00:16:28,000
of two page table the first nine is from

00:16:24,880 --> 00:16:30,399
h9 the pit table and the second line is

00:16:28,000 --> 00:16:32,800
from the csv page table we can see now

00:16:30,399 --> 00:16:36,880
that the page table is

00:16:32,800 --> 00:16:41,120
writable in csvp level because the bit

00:16:36,880 --> 00:16:44,720
1 is set in pde

00:16:41,120 --> 00:16:44,720
and now right volume in high

00:16:46,639 --> 00:16:52,240
so based on our qc these may

00:16:50,240 --> 00:16:53,600
need three major changes that are needed

00:16:52,240 --> 00:16:56,800
in cuban side to

00:16:53,600 --> 00:17:00,079
implement this solution

00:16:56,800 --> 00:17:04,000
first equilibrium advertise a

00:17:00,079 --> 00:17:06,720
pv feature through cpuid hypervisor leaf

00:17:04,000 --> 00:17:07,520
generally in this feature tear the gas

00:17:06,720 --> 00:17:10,880
another guest

00:17:07,520 --> 00:17:15,400
can cite each night root and the prr

00:17:10,880 --> 00:17:19,039
through habco and i guess also can cite

00:17:15,400 --> 00:17:23,839
vpwpw and the io flags for gaster page

00:17:19,039 --> 00:17:27,360
on the epg to manage next epd flags

00:17:23,839 --> 00:17:30,960
we can just extend the existing page

00:17:27,360 --> 00:17:34,160
tracking mechanism in kvm

00:17:30,960 --> 00:17:38,160
and because now dancer is able to

00:17:34,160 --> 00:17:38,559
set ept flags then some ept valuations

00:17:38,160 --> 00:17:42,720
may

00:17:38,559 --> 00:17:45,280
result from guest setting so from

00:17:42,720 --> 00:17:46,240
this epd valuation qvm doesn't need to

00:17:45,280 --> 00:17:48,880
handle it

00:17:46,240 --> 00:17:51,360
and adjust reports a virtualization

00:17:48,880 --> 00:17:51,360
exception

00:17:52,000 --> 00:17:57,520
extra kernel also needs to make some

00:17:55,039 --> 00:17:59,520
changes to implement this solution

00:17:57,520 --> 00:18:02,240
gather kernel needs to

00:17:59,520 --> 00:18:03,600
manage each night page table and ept

00:18:02,240 --> 00:18:06,880
flags work as a

00:18:03,600 --> 00:18:10,799
page it just needs to

00:18:06,880 --> 00:18:14,720
place some hooks in certain memory

00:18:10,799 --> 00:18:17,760
ro or rw apis these api are used

00:18:14,720 --> 00:18:19,919
to remove a set of right permissions in

00:18:17,760 --> 00:18:22,480
seo sharepiece table

00:18:19,919 --> 00:18:23,679
cancel kernel also needs to handle page

00:18:22,480 --> 00:18:27,360
for the exception in

00:18:23,679 --> 00:18:30,080
page fault handler from

00:18:27,360 --> 00:18:31,600
the page for the arrow code conor can

00:18:30,080 --> 00:18:35,679
know why the

00:18:31,600 --> 00:18:38,720
the pitfall is on h9 terminal fault

00:18:35,679 --> 00:18:41,760
or not and if the photo device

00:18:38,720 --> 00:18:45,200
is in in the

00:18:41,760 --> 00:18:45,840
plr page 400 might need to walk to each

00:18:45,200 --> 00:18:49,679
united

00:18:45,840 --> 00:18:49,679
table by software well

00:18:51,360 --> 00:18:55,280
and the guest account also needs to

00:18:52,880 --> 00:18:58,400
handle virtualization exception and

00:18:55,280 --> 00:19:01,120
the means on attack is detected about

00:18:58,400 --> 00:19:01,120
hypervisor

00:19:01,440 --> 00:19:05,760
regarding our status we finish the

00:19:05,200 --> 00:19:08,880
chains

00:19:05,760 --> 00:19:12,240
on kvm gas economy and develop

00:19:08,880 --> 00:19:14,960
some tests in qm unit tests and a

00:19:12,240 --> 00:19:18,720
verified needs solution simulator

00:19:14,960 --> 00:19:23,120
and our plan is to send out ifc paths

00:19:18,720 --> 00:19:26,559
in the future and currently

00:19:23,120 --> 00:19:27,440
we focus on protecting non-radical

00:19:26,559 --> 00:19:30,000
mappings

00:19:27,440 --> 00:19:31,200
in the future i would like to explore

00:19:30,000 --> 00:19:33,120
the possibility of

00:19:31,200 --> 00:19:39,840
using each light to enforce the

00:19:33,120 --> 00:19:39,840
integrity of non-executable mappings

00:19:40,880 --> 00:19:44,250
so here that's the wall i want to share

00:19:43,280 --> 00:19:47,309
do you have any

00:19:44,250 --> 00:19:47,309
[Music]

00:19:50,840 --> 00:19:54,960
questions

00:19:52,880 --> 00:19:54,960

YouTube URL: https://www.youtube.com/watch?v=j2T90htYSko


