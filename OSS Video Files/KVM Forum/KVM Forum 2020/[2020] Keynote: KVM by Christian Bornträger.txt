Title: [2020] Keynote: KVM by Christian BorntrÃ¤ger
Publication date: 2020-12-09
Playlist: KVM Forum 2020
Description: 
	Christian Borntraeger
IBM, CPO Linux on IBM Z Development
Captions: 
	00:00:05,520 --> 00:00:08,639
hello um

00:00:06,480 --> 00:00:10,080
welcome to the kvm keynote as part of

00:00:08,639 --> 00:00:12,000
the kvm forum

00:00:10,080 --> 00:00:14,000
um my name is christian bontberger and i

00:00:12,000 --> 00:00:16,080
work for ibm as chief product owner for

00:00:14,000 --> 00:00:20,720
linux and kdm idm z

00:00:16,080 --> 00:00:20,720
as well as the s390 maintainer for kvm

00:00:21,920 --> 00:00:28,240
as usual the

00:00:25,199 --> 00:00:28,880
keynote is more of a status report with

00:00:28,240 --> 00:00:31,679
numbers

00:00:28,880 --> 00:00:32,399
facts and recaps of the last year as

00:00:31,679 --> 00:00:36,079
well as an

00:00:32,399 --> 00:00:38,559
outlook where do we stand um

00:00:36,079 --> 00:00:40,160
as of today paolo banzini is still the

00:00:38,559 --> 00:00:43,920
core maintainer for kvm

00:00:40,160 --> 00:00:44,399
as in the last years but we also have a

00:00:43,920 --> 00:00:48,160
lot of

00:00:44,399 --> 00:00:51,199
architecture maintainers for arm x86

00:00:48,160 --> 00:00:54,719
sr90 power and

00:00:51,199 --> 00:00:56,559
mips in the last time we even got an

00:00:54,719 --> 00:00:58,320
increased number of revenues for

00:00:56,559 --> 00:01:00,160
different architectures

00:00:58,320 --> 00:01:02,559
so this is actually quite good thing

00:01:00,160 --> 00:01:05,680
because that

00:01:02,559 --> 00:01:05,680
helps to to

00:01:05,760 --> 00:01:10,799
put some burden away from maintainers

00:01:08,880 --> 00:01:12,240
and on the architectural side there have

00:01:10,799 --> 00:01:12,960
been some interesting changes for

00:01:12,240 --> 00:01:16,880
example on

00:01:12,960 --> 00:01:17,920
an arm the 32-bit host support was

00:01:16,880 --> 00:01:20,400
removed

00:01:17,920 --> 00:01:21,360
and mips has seen a maintainer change

00:01:20,400 --> 00:01:23,119
after it was

00:01:21,360 --> 00:01:24,880
being unmaintained for a short period of

00:01:23,119 --> 00:01:26,560
time

00:01:24,880 --> 00:01:28,960
last year we already talked about risk

00:01:26,560 --> 00:01:31,680
five and we expected it to have

00:01:28,960 --> 00:01:32,240
the the risk five architecture as part

00:01:31,680 --> 00:01:35,680
of

00:01:32,240 --> 00:01:38,000
of kvm uh today but um we're still

00:01:35,680 --> 00:01:40,720
waiting for architecture finalization

00:01:38,000 --> 00:01:43,200
as the risc-5 kernel maintainers have

00:01:40,720 --> 00:01:46,799
pretty strict rules on

00:01:43,200 --> 00:01:49,119
when to merge code um they

00:01:46,799 --> 00:01:51,920
want to have the architecture settled

00:01:49,119 --> 00:01:54,159
and finalized

00:01:51,920 --> 00:01:57,360
so much for the architectures uh let's

00:01:54,159 --> 00:02:00,479
have a look what are the trends in kvm

00:01:57,360 --> 00:02:03,360
in general and uh

00:02:00,479 --> 00:02:04,960
i see about five big areas of interest

00:02:03,360 --> 00:02:07,200
first is certainly cloud and

00:02:04,960 --> 00:02:08,879
looking back at previous ktm forums and

00:02:07,200 --> 00:02:11,599
this forum as well

00:02:08,879 --> 00:02:14,080
apart from microsoft azure everybody is

00:02:11,599 --> 00:02:16,000
using kvm we have amazon google ibm

00:02:14,080 --> 00:02:17,440
alibaba huawei tencent cloud bright

00:02:16,000 --> 00:02:20,879
dance yandex oracle

00:02:17,440 --> 00:02:23,040
and many many more and we do see kvm

00:02:20,879 --> 00:02:24,480
in different variants from highly

00:02:23,040 --> 00:02:26,720
customized stacks

00:02:24,480 --> 00:02:28,480
like amazon nitro firecracker or google

00:02:26,720 --> 00:02:31,280
cloud

00:02:28,480 --> 00:02:32,160
or we do see kvm used in a pretty

00:02:31,280 --> 00:02:34,720
standard

00:02:32,160 --> 00:02:36,319
software stack based on qmu and this is

00:02:34,720 --> 00:02:39,120
actually a strength of

00:02:36,319 --> 00:02:39,840
of kvm kvm can be used as a building

00:02:39,120 --> 00:02:42,480
block for

00:02:39,840 --> 00:02:44,000
a lot of features we also see that in

00:02:42,480 --> 00:02:47,840
the container space

00:02:44,000 --> 00:02:50,319
for example uh with kubernetes

00:02:47,840 --> 00:02:51,519
um we have actually an orchestrator that

00:02:50,319 --> 00:02:54,400
manages containers

00:02:51,519 --> 00:02:56,480
but with cubeverd um we can use that to

00:02:54,400 --> 00:02:58,720
orchestrate kvm

00:02:56,480 --> 00:02:59,920
virtual machines or with cutter

00:02:58,720 --> 00:03:03,280
containers we can use

00:02:59,920 --> 00:03:05,680
kvm to isolate containers

00:03:03,280 --> 00:03:07,840
but the biggest topic um for kvm at the

00:03:05,680 --> 00:03:10,000
moment is certainly trusted computing

00:03:07,840 --> 00:03:11,120
in the past we already had enclaves like

00:03:10,000 --> 00:03:14,000
sgx

00:03:11,120 --> 00:03:15,840
and this is now being complemented and

00:03:14,000 --> 00:03:19,120
kind of replaced here and there

00:03:15,840 --> 00:03:21,200
by secure virtual machines and

00:03:19,120 --> 00:03:22,480
i will come to that topic later on

00:03:21,200 --> 00:03:25,360
multiple times

00:03:22,480 --> 00:03:27,360
another topic is certainly io and

00:03:25,360 --> 00:03:29,599
hardware pass-through is still a very

00:03:27,360 --> 00:03:31,680
very hot topic as well as the

00:03:29,599 --> 00:03:35,760
enhancements but last but not least

00:03:31,680 --> 00:03:35,760
we have changes in testing

00:03:36,080 --> 00:03:39,840
so this brings the question um is kvm

00:03:38,640 --> 00:03:42,640
stabilizing or

00:03:39,840 --> 00:03:44,400
moving even faster and when you look at

00:03:42,640 --> 00:03:46,159
the kvm commits

00:03:44,400 --> 00:03:48,400
over the the kernel releases over the

00:03:46,159 --> 00:03:51,760
last years you can see that the kvm

00:03:48,400 --> 00:03:54,080
rate is is growing and in fact um

00:03:51,760 --> 00:03:55,120
this trend looks like uh it is

00:03:54,080 --> 00:03:57,920
accelerating

00:03:55,120 --> 00:03:58,480
so the speed has kind of increased and

00:03:57,920 --> 00:04:01,519
not

00:03:58,480 --> 00:04:03,920
being reduced it might be due to

00:04:01,519 --> 00:04:05,200
some bigger things like secure execution

00:04:03,920 --> 00:04:09,360
amd sav

00:04:05,200 --> 00:04:12,000
but it could also be that kdm is really

00:04:09,360 --> 00:04:12,799
more and more actively used in several

00:04:12,000 --> 00:04:15,840
places and

00:04:12,799 --> 00:04:17,680
it's just lots of small things

00:04:15,840 --> 00:04:19,440
so let's have a look at some more

00:04:17,680 --> 00:04:23,360
statistics

00:04:19,440 --> 00:04:26,800
um i counted here the numbers of

00:04:23,360 --> 00:04:28,960
of commits in the last year

00:04:26,800 --> 00:04:31,040
basically from kernel version five four

00:04:28,960 --> 00:04:33,680
till five nine

00:04:31,040 --> 00:04:34,160
and uh i also put the numbers of last

00:04:33,680 --> 00:04:36,000
year

00:04:34,160 --> 00:04:37,840
and roughly speaking we have about forty

00:04:36,000 --> 00:04:41,199
percent more commits

00:04:37,840 --> 00:04:44,240
uh and mergers than last year um

00:04:41,199 --> 00:04:46,800
when we then look at the the reviewed by

00:04:44,240 --> 00:04:47,680
for the the commits that have a reviewed

00:04:46,800 --> 00:04:50,240
bytech

00:04:47,680 --> 00:04:52,000
uh we have a much better ratio we have

00:04:50,240 --> 00:04:54,639
eighty percent increase

00:04:52,000 --> 00:04:57,040
um and at the same time we have less

00:04:54,639 --> 00:05:00,479
changes with the fixes uh

00:04:57,040 --> 00:05:03,680
or less growth in the number of commits

00:05:00,479 --> 00:05:05,360
which have a fixes or cc stable tag

00:05:03,680 --> 00:05:07,120
hopefully this indicates a better

00:05:05,360 --> 00:05:10,479
quality um

00:05:07,120 --> 00:05:13,120
and that would be good for everyone

00:05:10,479 --> 00:05:13,840
um we should also pause to celebrate a

00:05:13,120 --> 00:05:16,320
bit to

00:05:13,840 --> 00:05:17,840
some people here that did an outstanding

00:05:16,320 --> 00:05:20,720
job in kvm uh

00:05:17,840 --> 00:05:22,720
first of all um the authors were the

00:05:20,720 --> 00:05:25,520
most number of commits we have

00:05:22,720 --> 00:05:26,800
um just mentioned the the first three

00:05:25,520 --> 00:05:30,960
sean christopherson

00:05:26,800 --> 00:05:34,160
paolo bonsini and mark sanjay

00:05:30,960 --> 00:05:37,520
these people um really uh drive

00:05:34,160 --> 00:05:38,080
a lot of changes into kvn um but at the

00:05:37,520 --> 00:05:39,919
same time

00:05:38,080 --> 00:05:41,520
it's also important to have people that

00:05:39,919 --> 00:05:44,800
do reviews

00:05:41,520 --> 00:05:46,560
do the quality check and uh

00:05:44,800 --> 00:05:48,560
here the top reviewers are vitaly

00:05:46,560 --> 00:05:52,479
kuznetsov cornelia hook

00:05:48,560 --> 00:05:53,600
and jim matson last but not least we

00:05:52,479 --> 00:05:56,720
also have

00:05:53,600 --> 00:06:00,400
uh people that that um fix this box

00:05:56,720 --> 00:06:03,199
and uh fixes regressions and um

00:06:00,400 --> 00:06:04,800
these people are um almost the same as

00:06:03,199 --> 00:06:07,280
the authors uh

00:06:04,800 --> 00:06:10,080
so we have christopherson paolo bonsini

00:06:07,280 --> 00:06:10,080
and max roger

00:06:10,160 --> 00:06:15,280
so we have seen people working on kvm

00:06:13,120 --> 00:06:16,160
what are the companies that do the kvm

00:06:15,280 --> 00:06:18,880
work

00:06:16,160 --> 00:06:19,280
um similar to to last year we have more

00:06:18,880 --> 00:06:22,319
than

00:06:19,280 --> 00:06:26,479
20 companies working on kvm

00:06:22,319 --> 00:06:29,600
and also the the companies are kind of

00:06:26,479 --> 00:06:32,880
similar with small shifts here and there

00:06:29,600 --> 00:06:34,000
and if you look closely you see that we

00:06:32,880 --> 00:06:37,280
have one one name

00:06:34,000 --> 00:06:39,120
here um and that's because mark did

00:06:37,280 --> 00:06:40,479
uh he used to work for amazon and now

00:06:39,120 --> 00:06:43,600
works for google so

00:06:40,479 --> 00:06:47,039
um it was not that easy to to separate

00:06:43,600 --> 00:06:48,720
the the employer here uh you can do your

00:06:47,039 --> 00:06:50,800
own mass if you like

00:06:48,720 --> 00:06:52,880
but what do we see here is uh that we

00:06:50,800 --> 00:06:54,479
have uh of course cloud providers the

00:06:52,880 --> 00:06:57,039
people that use kdm

00:06:54,479 --> 00:06:59,280
actively participate in development we

00:06:57,039 --> 00:07:02,479
have the distribution so red hat uh

00:06:59,280 --> 00:07:06,080
soother canonical and of course the

00:07:02,479 --> 00:07:10,479
the chip vendors like amd intel ibm

00:07:06,080 --> 00:07:13,520
arm they all participate in kvn

00:07:10,479 --> 00:07:17,520
so now let's have a look into what are

00:07:13,520 --> 00:07:20,960
these companies working on

00:07:17,520 --> 00:07:23,120
and i want to talk about one thing that

00:07:20,960 --> 00:07:26,240
i find

00:07:23,120 --> 00:07:28,880
very important and that's testing

00:07:26,240 --> 00:07:30,880
we have seen a lot of improvements over

00:07:28,880 --> 00:07:33,199
the past years here

00:07:30,880 --> 00:07:34,400
we have two kind of or two frameworks

00:07:33,199 --> 00:07:37,199
for kdm

00:07:34,400 --> 00:07:39,440
the first framework is kvn unit test

00:07:37,199 --> 00:07:41,680
this is a separate repository

00:07:39,440 --> 00:07:45,280
and then we have the kdn self-test which

00:07:41,680 --> 00:07:49,039
is co-bundled with the linux kernel

00:07:45,280 --> 00:07:49,919
and we have seen an increase in number

00:07:49,039 --> 00:07:52,160
of self tests

00:07:49,919 --> 00:07:53,599
we have seen an increased number of km

00:07:52,160 --> 00:07:56,720
unit tests

00:07:53,599 --> 00:07:58,000
and the canon unit test is now actually

00:07:56,720 --> 00:08:01,199
also able to test

00:07:58,000 --> 00:08:01,919
non-kvm hypervisors so this project has

00:08:01,199 --> 00:08:05,680
has grown

00:08:01,919 --> 00:08:08,560
out of its its initial initial um

00:08:05,680 --> 00:08:10,639
idea and it was re-hosted also in gitlab

00:08:08,560 --> 00:08:11,280
so we have now ci support and other nice

00:08:10,639 --> 00:08:13,120
things so

00:08:11,280 --> 00:08:16,400
this is really something where we have

00:08:13,120 --> 00:08:16,400
invested a lot in the past

00:08:16,879 --> 00:08:20,720
when we talk about highlights overall um

00:08:19,039 --> 00:08:22,879
i have to mention trusted computing i

00:08:20,720 --> 00:08:27,360
did it before

00:08:22,879 --> 00:08:31,440
i have to mention here as well um also

00:08:27,360 --> 00:08:32,880
this is not common code or not at all

00:08:31,440 --> 00:08:34,399
so all the trusted computing

00:08:32,880 --> 00:08:35,919
implementations are actually per

00:08:34,399 --> 00:08:38,959
architecture

00:08:35,919 --> 00:08:39,440
and not yet common when you look at the

00:08:38,959 --> 00:08:42,719
right

00:08:39,440 --> 00:08:44,720
hand side top right hand side um

00:08:42,719 --> 00:08:46,399
this graph shows the number of commits

00:08:44,720 --> 00:08:47,839
over the the kernel versions

00:08:46,399 --> 00:08:49,680
it's basically the same number that you

00:08:47,839 --> 00:08:52,399
have seen before and

00:08:49,680 --> 00:08:54,000
the the red color indicates the number

00:08:52,399 --> 00:08:56,240
of commits that

00:08:54,000 --> 00:08:58,000
cannot be attributed to any architecture

00:08:56,240 --> 00:09:00,959
so common code kind of

00:08:58,000 --> 00:09:01,680
and uh this is about things like heavy

00:09:00,959 --> 00:09:04,320
amstart

00:09:01,680 --> 00:09:06,399
if you remember my my talk last year

00:09:04,320 --> 00:09:08,800
about performance data i complained that

00:09:06,399 --> 00:09:10,720
we have a lot of data that can't be used

00:09:08,800 --> 00:09:14,080
by by tooling

00:09:10,720 --> 00:09:17,920
we do ship a tool in kvm called kdmstart

00:09:14,080 --> 00:09:21,120
and that tool now can do logging and

00:09:17,920 --> 00:09:22,959
comma separated values and if you

00:09:21,120 --> 00:09:24,800
remember my talk from two years ago

00:09:22,959 --> 00:09:26,480
i complained about that we do not have

00:09:24,800 --> 00:09:30,959
enough uh

00:09:26,480 --> 00:09:32,959
code that runs cross architecture and um

00:09:30,959 --> 00:09:34,880
we now have a unified shadow mmu cache

00:09:32,959 --> 00:09:37,920
data structure across architecture

00:09:34,880 --> 00:09:39,600
and certainly lots of cleanups and fixes

00:09:37,920 --> 00:09:41,120
the biggest architecture is certainly

00:09:39,600 --> 00:09:43,040
the x86 again

00:09:41,120 --> 00:09:44,640
the red red bar shows the number of

00:09:43,040 --> 00:09:46,399
actually six patches

00:09:44,640 --> 00:09:48,959
we have too many things to mention for

00:09:46,399 --> 00:09:51,760
x86 so i can just

00:09:48,959 --> 00:09:53,120
mention some bigger blocks or some

00:09:51,760 --> 00:09:54,800
specific features

00:09:53,120 --> 00:09:56,720
so for example the asynchronous page

00:09:54,800 --> 00:09:58,640
fault handling was reverbed

00:09:56,720 --> 00:10:01,279
the dirty bitmap which was used for live

00:09:58,640 --> 00:10:04,720
migration was was optimized

00:10:01,279 --> 00:10:05,680
we have done a lot of refactoring and

00:10:04,720 --> 00:10:08,000
optimization in

00:10:05,680 --> 00:10:10,160
a lot of places you can read them here

00:10:08,000 --> 00:10:13,440
i'm not going to read it out loud

00:10:10,160 --> 00:10:14,320
um several works in the specter-like

00:10:13,440 --> 00:10:18,000
area so the

00:10:14,320 --> 00:10:20,880
the hardware side channel attacks

00:10:18,000 --> 00:10:23,279
nested kvm was improved a lot we have

00:10:20,880 --> 00:10:26,720
seen improvements in the amd suv

00:10:23,279 --> 00:10:28,160
the trusted computing variant from amd

00:10:26,720 --> 00:10:29,760
and of course we have also seen

00:10:28,160 --> 00:10:33,200
performance work for

00:10:29,760 --> 00:10:36,959
for example we have a fast pass for ipi

00:10:33,200 --> 00:10:40,240
and tsc deadline timers

00:10:36,959 --> 00:10:43,519
another big architecture is arm

00:10:40,240 --> 00:10:45,440
and arm as i mentioned removed the

00:10:43,519 --> 00:10:47,440
32-bit host support and that actually

00:10:45,440 --> 00:10:50,079
indicates that arm is getting

00:10:47,440 --> 00:10:51,680
larger bigger and more important in the

00:10:50,079 --> 00:10:54,079
server space as well

00:10:51,680 --> 00:10:55,920
while the the small embedded part is

00:10:54,079 --> 00:10:58,240
less and less important i guess

00:10:55,920 --> 00:11:00,240
it's still important but here for kvm

00:10:58,240 --> 00:11:01,680
it's really the server part

00:11:00,240 --> 00:11:03,680
that of course also created a lot of

00:11:01,680 --> 00:11:06,000
cleanups things that we could remove

00:11:03,680 --> 00:11:06,880
but what else do we have in the arm

00:11:06,000 --> 00:11:09,120
space

00:11:06,880 --> 00:11:10,560
of course the usual interrupt controller

00:11:09,120 --> 00:11:13,600
work that we have seen

00:11:10,560 --> 00:11:16,480
for arm in the last years

00:11:13,600 --> 00:11:17,120
also work for the virtualization host

00:11:16,480 --> 00:11:19,680
extension

00:11:17,120 --> 00:11:21,760
um the hypervisor that there runs

00:11:19,680 --> 00:11:23,120
directly in el2 mode

00:11:21,760 --> 00:11:24,959
and it's actually a different way of

00:11:23,120 --> 00:11:28,720
doing things so the code was

00:11:24,959 --> 00:11:30,800
split between the vhe and and ndhe mode

00:11:28,720 --> 00:11:32,640
we also got features like steel time

00:11:30,800 --> 00:11:35,680
point authentication for

00:11:32,640 --> 00:11:36,399
uh ndhe data up attribute report and

00:11:35,680 --> 00:11:38,800
injection

00:11:36,399 --> 00:11:40,000
as well as level-based tlb validation so

00:11:38,800 --> 00:11:43,680
lots of small things

00:11:40,000 --> 00:11:45,920
lots of changes on the mips side we

00:11:43,680 --> 00:11:47,519
basically only have the long zone

00:11:45,920 --> 00:11:50,639
support which is a new

00:11:47,519 --> 00:11:53,200
chip from china

00:11:50,639 --> 00:11:53,680
while this is only a small change it

00:11:53,200 --> 00:11:56,720
actually

00:11:53,680 --> 00:11:59,440
helped to to get new maintained

00:11:56,720 --> 00:12:00,160
containers on board for for mips so hua

00:11:59,440 --> 00:12:03,200
kai chen

00:12:00,160 --> 00:12:03,600
um stepped up to be a maintainer as well

00:12:03,200 --> 00:12:05,680
uh

00:12:03,600 --> 00:12:07,200
together with alexander markovic which

00:12:05,680 --> 00:12:11,200
means that nips is now

00:12:07,200 --> 00:12:14,000
maintained again which is good on the

00:12:11,200 --> 00:12:14,880
power side again trusted computing we

00:12:14,000 --> 00:12:18,320
have seen the

00:12:14,880 --> 00:12:20,480
power pc uh secure guest support um

00:12:18,320 --> 00:12:21,680
of course we also have seen the new

00:12:20,480 --> 00:12:24,880
power 10

00:12:21,680 --> 00:12:26,639
support preliminary and

00:12:24,880 --> 00:12:28,240
several other small improvements like

00:12:26,639 --> 00:12:29,279
more than four thousand guests for hp

00:12:28,240 --> 00:12:31,440
kvm

00:12:29,279 --> 00:12:33,760
interrupt handling signal stepping and

00:12:31,440 --> 00:12:33,760
so on

00:12:34,160 --> 00:12:40,639
on the s290 side again trusted computing

00:12:38,639 --> 00:12:41,839
we have something called secure

00:12:40,639 --> 00:12:45,120
execution which is

00:12:41,839 --> 00:12:46,320
the sr90 variant of that but we have

00:12:45,120 --> 00:12:48,320
invested also in

00:12:46,320 --> 00:12:49,360
testing self-test a lot of kvm unit

00:12:48,320 --> 00:12:52,560
tests

00:12:49,360 --> 00:12:53,760
yield improvement again nested kvm and

00:12:52,560 --> 00:12:55,760
also um

00:12:53,760 --> 00:12:57,680
some kind of small hygiene work that for

00:12:55,760 --> 00:12:59,200
example we implemented diagnose 318

00:12:57,680 --> 00:13:03,200
which is a firmware interface

00:12:59,200 --> 00:13:07,120
that we can now also use in kvm

00:13:03,200 --> 00:13:10,480
so uh this is certainly a

00:13:07,120 --> 00:13:13,040
something where every architecture

00:13:10,480 --> 00:13:14,560
that we have seen is of course doing

00:13:13,040 --> 00:13:17,680
their homework in terms of

00:13:14,560 --> 00:13:17,680
fixes and maintenance

00:13:17,760 --> 00:13:22,800
when you look forward um all these these

00:13:20,480 --> 00:13:26,079
features that i mentioned here are

00:13:22,800 --> 00:13:27,680
until kernel version 5.9 but looking

00:13:26,079 --> 00:13:32,079
beyond that i mean um

00:13:27,680 --> 00:13:35,519
five nine was was released two weeks ago

00:13:32,079 --> 00:13:36,959
and um for xd6 we get a new and new for

00:13:35,519 --> 00:13:40,079
two-dimensional paging

00:13:36,959 --> 00:13:42,000
uh pretty soon you certainly will see

00:13:40,079 --> 00:13:42,800
enhancement in the trusted computing

00:13:42,000 --> 00:13:45,600
world so

00:13:42,800 --> 00:13:48,160
amd suv has uh enhancement for secure

00:13:45,600 --> 00:13:51,440
state or secureness and paging

00:13:48,160 --> 00:13:52,480
arm is working on protected kvm intel

00:13:51,440 --> 00:13:56,079
has something

00:13:52,480 --> 00:13:57,040
called tdx and you can bet that ibm will

00:13:56,079 --> 00:13:59,279
also give you

00:13:57,040 --> 00:14:00,399
additional features for power and sr90

00:13:59,279 --> 00:14:03,199
in that real

00:14:00,399 --> 00:14:06,240
and hopefully we will also get uh risk

00:14:03,199 --> 00:14:06,240
five support soon

00:14:06,399 --> 00:14:11,279
okay um with that

00:14:09,680 --> 00:14:12,959
thank you for your attention uh for

00:14:11,279 --> 00:14:14,160
questions and comments feel free to

00:14:12,959 --> 00:14:15,920
write me or the

00:14:14,160 --> 00:14:18,240
kvn program committee for questions

00:14:15,920 --> 00:14:22,160
regarding the kdm form itself

00:14:18,240 --> 00:14:22,160
and with that enjoy the rest of kvm

00:14:28,120 --> 00:14:31,120

YouTube URL: https://www.youtube.com/watch?v=MfLHmoEbZGE


