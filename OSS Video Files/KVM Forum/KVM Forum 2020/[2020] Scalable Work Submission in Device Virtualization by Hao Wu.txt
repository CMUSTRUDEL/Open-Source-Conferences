Title: [2020] Scalable Work Submission in Device Virtualization by Hao Wu
Publication date: 2020-12-09
Playlist: KVM Forum 2020
Description: 
	Hardware I/O virtualization techniques, such as PCIe SR-IOV and Intel Scalable IOV, allows devices to be shared by multiple clients (e.g. VMs) with minimal emulation cost. However, some devices may not allow fine-grained partitioning of its backend resources, thus imposing a scalability limitation. ENQCMD (Enqueue Command) is a new instruction on future Intel platforms to allow scalable work submission for such devices. The instruction payload includes the work descriptor and a unique PASID to identify the client who is submitting the work, thus allowing a single work queue to be shared between multiple clients. In this talk, Hao will introduce the ENQCMD concept and how to efficiently virtualize it through hardware/software extensions, based on the example implementation on Scalable IOV based device.

---

Hao Wu
Intel, Senior Software Engineer

Hao is from Intel Virtualization Enabling Team and now working on ENQCMD virtualization support and also other Scalable IOV related development. Hao joined Intel at 2009, besides virtualization, he also has a lot of experience on Linux Kernel and device drivers development.
Captions: 
	00:00:05,279 --> 00:00:10,400
hello everyone my name is

00:00:07,279 --> 00:00:13,759
hao i'm from intel

00:00:10,400 --> 00:00:17,440
virtualization enabling team this is

00:00:13,759 --> 00:00:20,560
my topic today scalable work submission

00:00:17,440 --> 00:00:31,840
in device virtualization

00:00:20,560 --> 00:00:31,840
okay let's start

00:00:33,680 --> 00:00:39,840
um this is the agenda of this topic

00:00:37,120 --> 00:00:40,960
first of all i would like to discuss

00:00:39,840 --> 00:00:43,360
scalability

00:00:40,960 --> 00:00:45,200
in virtualization for different types of

00:00:43,360 --> 00:00:48,640
device

00:00:45,200 --> 00:00:50,239
include the dedicated queue

00:00:48,640 --> 00:00:51,760
dedicated work queue and shareable

00:00:50,239 --> 00:00:55,199
cubase the devices

00:00:51,760 --> 00:00:57,520
and also related challenges and then i

00:00:55,199 --> 00:00:58,160
will introduce a new eq command

00:00:57,520 --> 00:01:01,440
instruction

00:00:58,160 --> 00:01:03,840
on intel platforms and also its

00:01:01,440 --> 00:01:05,040
virtualization support virtualized

00:01:03,840 --> 00:01:09,200
scalable

00:01:05,040 --> 00:01:13,600
work submission in device virtualization

00:01:09,200 --> 00:01:17,360
then i will use the virtual addressing

00:01:13,600 --> 00:01:18,400
sba workload submission as one example

00:01:17,360 --> 00:01:21,600
to demonstrate

00:01:18,400 --> 00:01:24,720
how the whole picture looks like

00:01:21,600 --> 00:01:24,720
with eco command

00:01:25,520 --> 00:01:30,720
okay let's start with the first one

00:01:33,840 --> 00:01:39,280
scalability in device virtualization

00:01:36,640 --> 00:01:43,280
there are two devices in this page

00:01:39,280 --> 00:01:47,040
in the left side this is a pcie

00:01:43,280 --> 00:01:50,399
srv based device it supports multiple

00:01:47,040 --> 00:01:53,280
virtual functions each virtual function

00:01:50,399 --> 00:01:54,000
is independent interface which can be

00:01:53,280 --> 00:01:57,040
assigned to

00:01:54,000 --> 00:02:00,960
different virtual machines

00:01:57,040 --> 00:02:01,840
in the right side is a intel scalable lv

00:02:00,960 --> 00:02:05,600
device it

00:02:01,840 --> 00:02:07,360
supports multiple ads design for device

00:02:05,600 --> 00:02:10,160
interface

00:02:07,360 --> 00:02:13,520
and each adis can be assigned to

00:02:10,160 --> 00:02:13,520
different virtual machine

00:02:13,760 --> 00:02:20,640
as dedicated work queue is implemented

00:02:17,599 --> 00:02:23,920
in vfs and adis of

00:02:20,640 --> 00:02:26,160
these two devices so they

00:02:23,920 --> 00:02:27,520
provide the scalability by hard

00:02:26,160 --> 00:02:31,040
partitioning the

00:02:27,520 --> 00:02:31,040
hardware resources

00:02:33,920 --> 00:02:38,160
it will be quite difficult to increase

00:02:36,800 --> 00:02:40,800
the number of

00:02:38,160 --> 00:02:43,040
virtual functions or adis due to limited

00:02:40,800 --> 00:02:46,239
highway resources on some devices

00:02:43,040 --> 00:02:50,800
this is a scalability limitation for

00:02:46,239 --> 00:02:54,000
dedicated workq based device

00:02:50,800 --> 00:02:55,760
so could we implement a shared workflow

00:02:54,000 --> 00:02:58,080
in device instead

00:02:55,760 --> 00:03:00,879
in case that we cannot do hard partition

00:02:58,080 --> 00:03:04,159
for device resources

00:03:00,879 --> 00:03:08,640
and if we really do that how to issue

00:03:04,159 --> 00:03:08,640
scalability in device virtualization

00:03:15,440 --> 00:03:21,760
okay let's see how shareable queue-based

00:03:19,120 --> 00:03:22,959
device looks like here this shareable

00:03:21,760 --> 00:03:26,080
queue

00:03:22,959 --> 00:03:28,400
is used by multiple users in host

00:03:26,080 --> 00:03:29,840
and the typical usage of shareable queue

00:03:28,400 --> 00:03:33,599
is to support the share

00:03:29,840 --> 00:03:36,720
the virtual addressing sva

00:03:33,599 --> 00:03:41,760
sva routes device to use the

00:03:36,720 --> 00:03:41,760
cpu virtual address for dma operation

00:03:41,840 --> 00:03:48,640
and the device also can use the

00:03:44,959 --> 00:03:51,920
passive id process address-based id

00:03:48,640 --> 00:03:54,480
to distinguish the context of different

00:03:51,920 --> 00:03:54,480
workloads

00:03:56,000 --> 00:04:00,879
and dmh address translation will be

00:03:59,760 --> 00:04:04,959
performed by

00:04:00,879 --> 00:04:15,840
rmu at a requester id

00:04:04,959 --> 00:04:15,840
plus psid granularity

00:04:19,600 --> 00:04:24,880
server queue in device virtualization

00:04:22,479 --> 00:04:27,040
for sure we can put the shareable queue

00:04:24,880 --> 00:04:28,880
into a virtual function and then inside

00:04:27,040 --> 00:04:32,240
into a virtual machine

00:04:28,880 --> 00:04:34,560
to allow different users inside inside

00:04:32,240 --> 00:04:36,479
the virtual machine to share this

00:04:34,560 --> 00:04:39,840
interface

00:04:36,479 --> 00:04:42,720
just like device in the left side

00:04:39,840 --> 00:04:44,160
but we also can share the same device

00:04:42,720 --> 00:04:47,840
interface to users

00:04:44,160 --> 00:04:50,880
in both host and virtual machines as

00:04:47,840 --> 00:04:52,960
a device in the right side actually

00:04:50,880 --> 00:04:53,600
there is no hard limitation on the

00:04:52,960 --> 00:04:56,720
number

00:04:53,600 --> 00:05:00,960
of users for a shareable queue so

00:04:56,720 --> 00:05:06,160
it can provide a better scalability

00:05:00,960 --> 00:05:11,520
by adding more and more virtual devices

00:05:06,160 --> 00:05:15,440
on the same shareable queue

00:05:11,520 --> 00:05:16,560
of course one device can implement a

00:05:15,440 --> 00:05:25,840
dedicated work here

00:05:16,560 --> 00:05:25,840
and they should work together

00:05:30,880 --> 00:05:37,520
a challenge in device virtualization

00:05:34,560 --> 00:05:38,240
as shared virtual addressing sba is used

00:05:37,520 --> 00:05:41,360
them

00:05:38,240 --> 00:05:42,639
we are facing a challenge here users in

00:05:41,360 --> 00:05:46,720
virtual machines

00:05:42,639 --> 00:05:51,280
are not aware of host psid

00:05:46,720 --> 00:05:54,639
so workloads are submitted together with

00:05:51,280 --> 00:05:58,240
past guest pass ids but

00:05:54,639 --> 00:06:01,360
device in the iom you are using

00:05:58,240 --> 00:06:05,280
whole space id for the dma

00:06:01,360 --> 00:06:08,800
operation so

00:06:05,280 --> 00:06:14,400
how to convert guest pass id

00:06:08,800 --> 00:06:14,400
to host pass id in device virtualization

00:06:17,600 --> 00:06:21,680
and new instruction echo command is

00:06:20,080 --> 00:06:24,880
introduced to

00:06:21,680 --> 00:06:24,880
address escape

00:06:26,880 --> 00:06:32,560
okay we will move to eco command

00:06:29,840 --> 00:06:32,560
instruction

00:06:32,840 --> 00:06:38,479
introduction

00:06:35,039 --> 00:06:41,520
income command is a new instruction on

00:06:38,479 --> 00:06:44,880
intel platform that autonomically

00:06:41,520 --> 00:06:46,160
submitted workload to your device in the

00:06:44,880 --> 00:06:49,360
optims

00:06:46,160 --> 00:06:53,440
pass id for ios 32

00:06:49,360 --> 00:06:59,360
psd msr and the enqueue store

00:06:53,440 --> 00:07:02,720
64 byte command data to enqueue register

00:06:59,360 --> 00:07:06,720
implemented in device mmo

00:07:02,720 --> 00:07:10,400
this is the format of the command data

00:07:06,720 --> 00:07:13,680
from spec it includes

00:07:10,400 --> 00:07:17,360
the device specific command

00:07:13,680 --> 00:07:20,639
area which can just be a

00:07:17,360 --> 00:07:23,680
work descriptor

00:07:20,639 --> 00:07:31,840
and together with passing id

00:07:23,680 --> 00:07:31,840
which indicates the context of this work

00:07:38,319 --> 00:07:45,120
is32 psid members are as managed by

00:07:41,840 --> 00:07:46,960
excel feature set as the passati

00:07:45,120 --> 00:07:51,680
supervisor state component

00:07:46,960 --> 00:07:55,039
and updated by it per contact switch

00:07:51,680 --> 00:07:58,400
after sba process binding

00:07:55,039 --> 00:08:01,440
is 32 id msr will

00:07:58,400 --> 00:08:04,479
reflect the

00:08:01,440 --> 00:08:06,160
passenger value associated with the

00:08:04,479 --> 00:08:09,120
process

00:08:06,160 --> 00:08:11,280
so when this eq command instruction is

00:08:09,120 --> 00:08:14,240
used by eurospace application

00:08:11,280 --> 00:08:15,599
it doesn't need to worry about the pass

00:08:14,240 --> 00:08:18,319
id

00:08:15,599 --> 00:08:18,879
as your command instruction obtains it

00:08:18,319 --> 00:08:22,639
from

00:08:18,879 --> 00:08:22,639
the msr automatically

00:08:22,720 --> 00:08:30,800
and this mechanism also can prevent

00:08:27,440 --> 00:08:35,760
malicious pass id to be

00:08:30,800 --> 00:08:35,760
written to device from the user's face

00:08:38,839 --> 00:08:44,640
application

00:08:40,959 --> 00:08:46,880
income command is a non-posted inter

00:08:44,640 --> 00:08:48,720
instruction which carries the status

00:08:46,880 --> 00:08:52,320
back if the command was

00:08:48,720 --> 00:08:55,519
accepted by device or not

00:08:52,320 --> 00:08:56,399
for example submission will fail to be

00:08:55,519 --> 00:08:59,600
accepted

00:08:56,399 --> 00:09:02,240
by the device if the shared work queue

00:08:59,600 --> 00:09:05,040
is already full

00:09:02,240 --> 00:09:06,560
this allows the submitter to know the

00:09:05,040 --> 00:09:10,560
submission status and

00:09:06,560 --> 00:09:10,560
perform retry if needed

00:09:16,160 --> 00:09:21,440
inquire command supervisor is similar to

00:09:19,839 --> 00:09:24,800
eq command

00:09:21,440 --> 00:09:25,440
instruction but only works in kernel

00:09:24,800 --> 00:09:29,040
space

00:09:25,440 --> 00:09:37,839
and any options pass added value

00:09:29,040 --> 00:09:42,080
from command data directory

00:09:37,839 --> 00:09:45,440
uh device requirements for your command

00:09:42,080 --> 00:09:50,080
the differable memory right

00:09:45,440 --> 00:09:54,080
is a non-prostate non-posted

00:09:50,080 --> 00:09:55,920
requests defined by pcie spec

00:09:54,080 --> 00:09:58,399
in order to support the eco command

00:09:55,920 --> 00:10:00,959
instruction device need to support

00:09:58,399 --> 00:10:00,959
differable

00:10:02,399 --> 00:10:09,440
memory writes a complete

00:10:06,360 --> 00:10:12,720
capability and requires all

00:10:09,440 --> 00:10:17,519
switch ports and the reports

00:10:12,720 --> 00:10:20,560
have a differable memory

00:10:17,519 --> 00:10:20,560
wrote enabled

00:10:22,079 --> 00:10:29,120
in data streaming accelerator is the

00:10:25,920 --> 00:10:32,640
first device which supports eq command

00:10:29,120 --> 00:10:36,959
this is the latest driver pad set under

00:10:32,640 --> 00:10:39,760
review here is a link to

00:10:36,959 --> 00:10:39,760
that submission

00:10:43,839 --> 00:10:49,920
okay let's move to eq command

00:10:47,600 --> 00:10:52,000
virtualization first of all i want to

00:10:49,920 --> 00:10:53,920
introduce the

00:10:52,000 --> 00:10:56,399
non-rule mode operation of this

00:10:53,920 --> 00:10:59,200
instruction

00:10:56,399 --> 00:11:00,000
actually echo command has different

00:10:59,200 --> 00:11:03,200
operation

00:11:00,000 --> 00:11:05,519
in knowledge mode you go command

00:11:03,200 --> 00:11:06,800
your command and you command supervisor

00:11:05,519 --> 00:11:10,800
or obtain the

00:11:06,800 --> 00:11:14,399
guest pass id firstly and then

00:11:10,800 --> 00:11:17,200
it will perform guest best id to host

00:11:14,399 --> 00:11:20,800
base id translation automatically

00:11:17,200 --> 00:11:24,000
and then enqueue store command data with

00:11:20,800 --> 00:11:27,360
host password to the device

00:11:24,000 --> 00:11:28,079
as knowledge mode enqueue commands

00:11:27,360 --> 00:11:31,519
performs

00:11:28,079 --> 00:11:32,480
the ksps id to host sid translation

00:11:31,519 --> 00:11:36,320
automatically

00:11:32,480 --> 00:11:39,440
then it can address the gap we discussed

00:11:36,320 --> 00:11:43,839
in previous page on

00:11:39,440 --> 00:11:43,839
sva workload submission

00:11:45,680 --> 00:11:48,880
okay let's move to the next page for

00:11:48,079 --> 00:11:57,839
more details

00:11:48,880 --> 00:11:57,839
about psi translation

00:11:58,560 --> 00:12:01,920
has id translation is the new feature

00:12:00,959 --> 00:12:04,959
introduced

00:12:01,920 --> 00:12:08,079
in vmx for

00:12:04,959 --> 00:12:10,560
income command virtualization

00:12:08,079 --> 00:12:11,839
it's enabled by setting secondary

00:12:10,560 --> 00:12:15,440
process-based

00:12:11,839 --> 00:12:18,880
vm execution control and pass ldt

00:12:15,440 --> 00:12:25,839
translation table is required to be

00:12:18,880 --> 00:12:25,839
linked by pointers in the vmcs

00:12:27,399 --> 00:12:31,839
psid translation table has two level

00:12:30,880 --> 00:12:35,360
data structure

00:12:31,839 --> 00:12:38,959
as you see in the right side pass id

00:12:35,360 --> 00:12:40,880
low and high directory and pass edit

00:12:38,959 --> 00:12:44,959
table

00:12:40,880 --> 00:12:48,800
different fields of guest pass id

00:12:44,959 --> 00:12:52,639
are used to select the

00:12:48,800 --> 00:12:53,440
passive id table entry which contains

00:12:52,639 --> 00:12:57,600
the

00:12:53,440 --> 00:13:01,680
associated hostpass id

00:12:57,600 --> 00:13:04,880
when echo command run runs in

00:13:01,680 --> 00:13:06,800
narrow mode the hardware use this table

00:13:04,880 --> 00:13:10,079
for translation

00:13:06,800 --> 00:13:21,839
if it fails to translate the gas

00:13:10,079 --> 00:13:21,839
passage memory exit will be triggered

00:13:23,600 --> 00:13:28,560
kvm is required to manage the speciality

00:13:27,120 --> 00:13:32,160
translation table for

00:13:28,560 --> 00:13:36,560
eco command virtualization

00:13:32,160 --> 00:13:40,560
kvm needs updates translation per io

00:13:36,560 --> 00:13:43,680
address-based id events

00:13:40,560 --> 00:13:44,079
i always said the managers host the pass

00:13:43,680 --> 00:13:49,680
id

00:13:44,079 --> 00:13:52,720
and its association to case pass it

00:13:49,680 --> 00:13:56,079
it will notify users

00:13:52,720 --> 00:13:59,199
on the passive id status change

00:13:56,079 --> 00:14:02,639
so kvm monitor

00:13:59,199 --> 00:14:05,839
ios and by and on by the events for

00:14:02,639 --> 00:14:05,839
translation update

00:14:09,600 --> 00:14:15,199
you you can find more details about this

00:14:12,320 --> 00:14:18,800
in another kvm for your talk which

00:14:15,199 --> 00:14:31,839
title is pass ide management

00:14:18,800 --> 00:14:31,839
in kvm here is a link to that session

00:14:35,040 --> 00:14:40,399
test id translation table is a premium

00:14:37,519 --> 00:14:43,440
table shared by all vmcs

00:14:40,399 --> 00:14:47,040
any modification to this this

00:14:43,440 --> 00:14:48,639
table must be a really new operation

00:14:47,040 --> 00:14:52,320
that means

00:14:48,639 --> 00:14:55,760
kvm needs to kick all these cpus into

00:14:52,320 --> 00:14:59,680
root mode and block vm entry

00:14:55,760 --> 00:15:03,440
until modification is done

00:14:59,680 --> 00:15:06,560
this is a requirement for sdm

00:15:03,440 --> 00:15:09,920
remote modified data structure which is

00:15:06,560 --> 00:15:14,880
referenced by pointers in vmcs

00:15:09,920 --> 00:15:14,880
and controls non-rune mode operation

00:15:20,720 --> 00:15:24,560
pass id translation figure handling

00:15:24,880 --> 00:15:28,320
translation failure only happens when

00:15:27,279 --> 00:15:32,880
guest guest

00:15:28,320 --> 00:15:32,880
is using an embedded guest pass id

00:15:33,839 --> 00:15:40,240
any guest specialty only can be used

00:15:37,199 --> 00:15:45,759
for dma operation after

00:15:40,240 --> 00:15:49,040
a whole space ide is associated to it

00:15:45,759 --> 00:15:54,240
the reason is device and

00:15:49,040 --> 00:15:58,000
rmu always use hostpass id

00:15:54,240 --> 00:16:02,880
for dma operation they never

00:15:58,000 --> 00:16:02,880
know about guest pass id

00:16:03,199 --> 00:16:09,680
so in this vm

00:16:06,320 --> 00:16:12,639
exit handling just set the cf

00:16:09,680 --> 00:16:13,120
flag to 1 to indicate the figure to

00:16:12,639 --> 00:16:16,800
guest

00:16:13,120 --> 00:16:16,800
and skip the instruction

00:16:21,759 --> 00:16:24,500
i recently took passing a message

00:16:23,600 --> 00:16:25,839
virtualization

00:16:24,500 --> 00:16:29,120
[Music]

00:16:25,839 --> 00:16:31,680
as mentioned above in

00:16:29,120 --> 00:16:32,880
income will command the null rule mode

00:16:31,680 --> 00:16:35,600
operation

00:16:32,880 --> 00:16:37,440
income command optims case the pass id

00:16:35,600 --> 00:16:41,680
from

00:16:37,440 --> 00:16:42,720
i 32 pence idms also just pursue this

00:16:41,680 --> 00:16:47,079
msr to

00:16:42,720 --> 00:16:51,199
the guest directory and this

00:16:47,079 --> 00:16:55,120
ie32 pc msr is managed by

00:16:51,199 --> 00:16:59,279
xsav so enable virtualization support

00:16:55,120 --> 00:17:03,120
for xca psid supervisor

00:16:59,279 --> 00:17:03,519
state component so that guests can use

00:17:03,120 --> 00:17:06,959
this

00:17:03,519 --> 00:17:11,120
extension to update

00:17:06,959 --> 00:17:11,120
the ms mapper context switch

00:17:11,600 --> 00:17:16,160
okay these are major changes required to

00:17:15,280 --> 00:17:19,600
support

00:17:16,160 --> 00:17:20,079
equal command virtualization next i will

00:17:19,600 --> 00:17:23,120
use

00:17:20,079 --> 00:17:33,840
sva workload submission as one quick

00:17:23,120 --> 00:17:33,840
example to demonstrate the flow

00:17:34,720 --> 00:17:39,919
this is this is the example that user

00:17:37,679 --> 00:17:41,360
uses income command to submit uh as

00:17:39,919 --> 00:17:45,200
variable cloud and guest

00:17:41,360 --> 00:17:48,480
hope this can give a basic idea on the

00:17:45,200 --> 00:17:52,000
workflow in

00:17:48,480 --> 00:17:55,919
in case case one wants the device to

00:17:52,000 --> 00:17:59,280
perform some right some right

00:17:55,919 --> 00:18:02,880
data to a virtual buffer

00:17:59,280 --> 00:18:05,440
it needs to prepare our work descriptor

00:18:02,880 --> 00:18:08,880
with target buffer information

00:18:05,440 --> 00:18:11,919
including the address so a

00:18:08,880 --> 00:18:16,320
case the virtual address is filled into

00:18:11,919 --> 00:18:19,280
the work descriptor

00:18:16,320 --> 00:18:21,760
then case application can run equal

00:18:19,280 --> 00:18:24,799
command to submit this workload

00:18:21,760 --> 00:18:28,760
to the device directory

00:18:24,799 --> 00:18:32,000
the case pass id will be filled from

00:18:28,760 --> 00:18:38,000
ia32 passive msr and translate

00:18:32,000 --> 00:18:38,000
automatically to the hostpass id

00:18:38,400 --> 00:18:43,679
and the work descriptor will be stored

00:18:42,559 --> 00:18:48,160
to device

00:18:43,679 --> 00:18:48,160
together with the hostpass id

00:18:49,919 --> 00:18:54,400
application is to check the instruction

00:18:52,960 --> 00:18:59,919
status to make sure

00:18:54,400 --> 00:18:59,919
the submission was accepted by device

00:19:00,720 --> 00:19:08,320
if device accepts this workload

00:19:04,799 --> 00:19:11,600
it will perform and dma operation use

00:19:08,320 --> 00:19:14,480
gba and

00:19:11,600 --> 00:19:16,640
payload information indicated by the

00:19:14,480 --> 00:19:21,679
work descriptor

00:19:16,640 --> 00:19:25,200
and also the hostpass id

00:19:21,679 --> 00:19:28,720
iom menu will do the dma

00:19:25,200 --> 00:19:28,720
address translation per

00:19:28,960 --> 00:19:36,960
id plus passive id

00:19:33,840 --> 00:19:40,559
so the gba will be

00:19:36,960 --> 00:19:44,640
translated translated to hpa

00:19:40,559 --> 00:19:44,640
for the dma operation

00:19:45,120 --> 00:19:53,840
okay this is a

00:19:48,320 --> 00:19:53,840
just an example

00:19:56,960 --> 00:20:04,480
okay reference there are some

00:20:00,480 --> 00:20:07,120
reference documentation including kernel

00:20:04,480 --> 00:20:08,880
dog shoot virtual addressing with secure

00:20:07,120 --> 00:20:12,159
command

00:20:08,880 --> 00:20:15,280
and also you could commence back intel

00:20:12,159 --> 00:20:19,440
scalable rv documentation and

00:20:15,280 --> 00:20:21,760
also intel data streaming etc

00:20:19,440 --> 00:20:21,760
spec

00:20:28,000 --> 00:20:32,799
this is a development status

00:20:32,840 --> 00:20:38,799
currently currently

00:20:35,520 --> 00:20:39,440
we already have the eq command native

00:20:38,799 --> 00:20:43,520
support

00:20:39,440 --> 00:20:45,720
merged into the latest kernel ios

00:20:43,520 --> 00:20:47,440
i always say the extension for

00:20:45,720 --> 00:20:51,600
notification

00:20:47,440 --> 00:20:55,440
is under review version 3

00:20:51,600 --> 00:20:58,720
was submitted this is a link to the

00:20:55,440 --> 00:21:03,840
version 3 pass it

00:20:58,720 --> 00:21:03,840
for eq command virtualization support

00:21:04,159 --> 00:21:12,960
will submit soon and

00:21:07,520 --> 00:21:12,960
the code is under internal review now

00:21:13,039 --> 00:21:16,320
line migration support is not covered

00:21:15,840 --> 00:21:23,039
yet

00:21:16,320 --> 00:21:23,039
so it is in the to-do list now

00:21:28,840 --> 00:21:36,960
okay this is a

00:21:32,240 --> 00:21:41,360
summary of this talk dedicated work you

00:21:36,960 --> 00:21:42,240
based on how the partitioning of the

00:21:41,360 --> 00:21:46,559
resources

00:21:42,240 --> 00:21:50,159
has scalability limitation in

00:21:46,559 --> 00:21:53,679
virtualization share work queue

00:21:50,159 --> 00:21:55,840
with eq command support allows

00:21:53,679 --> 00:21:57,200
more scalable usage in device

00:21:55,840 --> 00:21:59,919
virtualization

00:21:57,200 --> 00:22:01,280
and same device interface can be shared

00:21:59,919 --> 00:22:05,600
by multiple users

00:22:01,280 --> 00:22:05,600
in host and virtual machines

00:22:08,320 --> 00:22:12,640
additional hardware support is required

00:22:11,840 --> 00:22:15,919
to

00:22:12,640 --> 00:22:20,240
support echo command virtualization in

00:22:15,919 --> 00:22:23,280
for example pass id translation

00:22:20,240 --> 00:22:26,640
except extension for psid

00:22:23,280 --> 00:22:30,400
and corresponding changes in

00:22:26,640 --> 00:22:33,919
vm io is also required to support

00:22:30,400 --> 00:22:33,919
info command virtualization

00:22:39,840 --> 00:22:44,000
okay that's all for my sharing of this

00:22:43,200 --> 00:22:54,960
talk

00:22:44,000 --> 00:22:57,039
thanks for watching this

00:22:54,960 --> 00:22:57,039

YouTube URL: https://www.youtube.com/watch?v=s1B8tKm7Cx4


