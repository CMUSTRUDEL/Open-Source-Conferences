Title: [2020] A Journey to Support vGPU in Firecracker by Liang Yan
Publication date: 2020-12-09
Playlist: KVM Forum 2020
Description: 
	GPU virtualization for firecracker is quite a controversial topic inside community. One side,  people are quite interested in it as the current popularity of  AI. The other side, it is conflict with some design principal, such mas memory overcommit. This session will present a new proof of concept by refactoring vfio-bind and implementing vfio-ioctl from rust-vmm crates. Further more, we will have a dissuasion on vfio-mmio device experiment.

---

Liang Yan
SUSE, Sr. Virtualization Engineer

Liang is a Virtualization Software Engineer at SUSE Labs. He's been active in the Open Source virtualization area since 2012, mostly on the KVM and QEMU projects, working on IO virtualization and lightVM implementation. He's currently working on GPU virtualization, trying to import vGPU in a lightVM enviroment. He has presented his projects at several events and conferences. Just recently he gave a topic about AI Cloud acceleration in SUSECon 2020.
Captions: 
	00:00:07,279 --> 00:00:12,559
hello everyone

00:00:09,280 --> 00:00:14,799
my name is leon yan i'm here to give you

00:00:12,559 --> 00:00:18,240
a session about the ipo

00:00:14,799 --> 00:00:21,760
which in firecracker and i'm

00:00:18,240 --> 00:00:22,640
really excited to do this prediction

00:00:21,760 --> 00:00:27,359
here

00:00:22,640 --> 00:00:27,599
enjoy so before we start i'll just give

00:00:27,359 --> 00:00:31,359
you

00:00:27,599 --> 00:00:34,640
some intro to example myself so

00:00:31,359 --> 00:00:38,000
i'm a virtualization engineer uh

00:00:34,640 --> 00:00:41,840
from susa so my working area

00:00:38,000 --> 00:00:45,039
is mainly focused on the io utilization

00:00:41,840 --> 00:00:48,160
you know gpu and network before

00:00:45,039 --> 00:00:51,360
and architecture are multifocused on

00:00:48,160 --> 00:00:54,800
arm 64 and s390

00:00:51,360 --> 00:00:58,239
the 9x86 architecture and uh

00:00:54,800 --> 00:01:02,719
also as you know suse dropped openstack

00:00:58,239 --> 00:01:05,519
cloud last year and purchased the

00:01:02,719 --> 00:01:06,880
rancher this year so we had a dummy

00:01:05,519 --> 00:01:09,840
transition

00:01:06,880 --> 00:01:10,240
i started working on the fact crack here

00:01:09,840 --> 00:01:13,360
and

00:01:10,240 --> 00:01:17,520
i like this stuff

00:01:13,360 --> 00:01:20,479
and uh also i work at home

00:01:17,520 --> 00:01:20,960
for four years now i think i know most

00:01:20,479 --> 00:01:22,799
of you

00:01:20,960 --> 00:01:24,479
are also working at home because with

00:01:22,799 --> 00:01:26,960
the coronal virus

00:01:24,479 --> 00:01:27,920
pandemic i hope you can enjoy your

00:01:26,960 --> 00:01:32,000
workout

00:01:27,920 --> 00:01:35,439
home timing and i live in louisville

00:01:32,000 --> 00:01:36,400
kentucky united states so early people

00:01:35,439 --> 00:01:40,000
don't know it

00:01:36,400 --> 00:01:42,720
i just see this is the hometown

00:01:40,000 --> 00:01:44,240
of abraham lincoln people still don't

00:01:42,720 --> 00:01:47,360
know it then

00:01:44,240 --> 00:01:49,759
uh muhammad ali maybe

00:01:47,360 --> 00:01:51,840
still then i said uh just kentucky

00:01:49,759 --> 00:01:55,280
friday cheating kfc

00:01:51,840 --> 00:01:58,399
now they know it so sounds like people

00:01:55,280 --> 00:02:00,240
enjoy food better than sports better

00:01:58,399 --> 00:02:04,079
than politics

00:02:00,240 --> 00:02:08,080
anyway this is a joke so let's back into

00:02:04,079 --> 00:02:09,200
today's topic so for today i'm going to

00:02:08,080 --> 00:02:12,400
give you a

00:02:09,200 --> 00:02:13,840
quick background about the micro vm bike

00:02:12,400 --> 00:02:16,400
rack here

00:02:13,840 --> 00:02:18,160
and also give you some uh uh

00:02:16,400 --> 00:02:19,200
introduction about the gpu utilization

00:02:18,160 --> 00:02:22,879
especially some

00:02:19,200 --> 00:02:25,599
latest update and also

00:02:22,879 --> 00:02:26,480
the motivation why do we want to do it

00:02:25,599 --> 00:02:29,920
and

00:02:26,480 --> 00:02:33,120
how do we do it what should we do

00:02:29,920 --> 00:02:35,519
since this is a journal

00:02:33,120 --> 00:02:37,280
exploration generally so i'll share some

00:02:35,519 --> 00:02:40,720
thoughts after that

00:02:37,280 --> 00:02:42,720
so at last would be the qe part but

00:02:40,720 --> 00:02:45,200
you can type in your question from our

00:02:42,720 --> 00:02:48,879
platform the chat platform so

00:02:45,200 --> 00:02:52,560
i would be glad to answer

00:02:48,879 --> 00:02:54,720
so let's have a take a quick look on the

00:02:52,560 --> 00:02:58,239
microwave here

00:02:54,720 --> 00:02:58,800
uh i think it's another strength for you

00:02:58,239 --> 00:03:01,920
guys

00:02:58,800 --> 00:03:05,680
and for me i also followed this topic

00:03:01,920 --> 00:03:09,200
for a couple years there's a a lot of a

00:03:05,680 --> 00:03:12,480
cup option here like a kmu light

00:03:09,200 --> 00:03:14,879
qm lead amu or qn micro vm

00:03:12,480 --> 00:03:15,680
last year from last year this is qmu

00:03:14,879 --> 00:03:20,000
based

00:03:15,680 --> 00:03:23,200
and uh firecracker rasta vman base

00:03:20,000 --> 00:03:25,920
but it's earlier than last week anyway

00:03:23,200 --> 00:03:26,720
and also some other like uh process

00:03:25,920 --> 00:03:30,319
level

00:03:26,720 --> 00:03:33,360
the api um

00:03:30,319 --> 00:03:35,599
like a divisor here it's um so

00:03:33,360 --> 00:03:36,879
it's not my intention here so we just

00:03:35,599 --> 00:03:40,319
keep it

00:03:36,879 --> 00:03:42,400
uh if you look at those uh

00:03:40,319 --> 00:03:43,360
vms here you you may see something in

00:03:42,400 --> 00:03:46,560
common

00:03:43,360 --> 00:03:50,080
like we're not they're not considered

00:03:46,560 --> 00:03:53,840
as we am but more like a container

00:03:50,080 --> 00:03:54,799
and uh they also work as a container

00:03:53,840 --> 00:03:58,000
there's only like

00:03:54,799 --> 00:03:58,879
one maybe one workload under it and the

00:03:58,000 --> 00:04:01,920
very short

00:03:58,879 --> 00:04:05,040
life cycle and

00:04:01,920 --> 00:04:08,319
just need it it's safe

00:04:05,040 --> 00:04:11,519
and the architecture is light the

00:04:08,319 --> 00:04:11,519
running is fast

00:04:12,000 --> 00:04:19,519
here's a architecture for firecracker

00:04:17,440 --> 00:04:21,440
you could see it's highly integrated

00:04:19,519 --> 00:04:24,560
with container here

00:04:21,440 --> 00:04:28,639
and that's i think that's the

00:04:24,560 --> 00:04:32,560
many uses for them too for the micro vm

00:04:28,639 --> 00:04:33,120
and we are take a quick look to the gpu

00:04:32,560 --> 00:04:37,440
side

00:04:33,120 --> 00:04:39,600
so i think gpu everyone using gpu today

00:04:37,440 --> 00:04:42,880
but looking at the gpu you may see

00:04:39,600 --> 00:04:46,560
there's too many uses for it

00:04:42,880 --> 00:04:49,040
graphic and computing graphic like the

00:04:46,560 --> 00:04:52,320
game streaming 3d rendering

00:04:49,040 --> 00:04:55,680
and computing is

00:04:52,320 --> 00:04:56,240
more like a popular today because of the

00:04:55,680 --> 00:04:59,040
ai

00:04:56,240 --> 00:04:59,680
machine learning and uh you know that

00:04:59,040 --> 00:05:01,600
there's

00:04:59,680 --> 00:05:04,240
two different types for this kind of

00:05:01,600 --> 00:05:07,199
machine learning the training

00:05:04,240 --> 00:05:07,759
training a model based on the huge data

00:05:07,199 --> 00:05:10,800
sets

00:05:07,759 --> 00:05:15,840
and the inference like you already have

00:05:10,800 --> 00:05:15,840
this trend model just do some uh

00:05:15,919 --> 00:05:22,720
judgment so

00:05:19,039 --> 00:05:26,240
and uh then there's puritanization

00:05:22,720 --> 00:05:27,199
and i think a lot of people already down

00:05:26,240 --> 00:05:30,720
this

00:05:27,199 --> 00:05:33,440
topic from a low level and we

00:05:30,720 --> 00:05:34,880
we couldn't know that like you can see

00:05:33,440 --> 00:05:36,320
past the rules if you pass through

00:05:34,880 --> 00:05:39,840
that's a difficult one

00:05:36,320 --> 00:05:43,120
and there is also a forge virtualization

00:05:39,840 --> 00:05:46,240
and there's a software way to do it mdv

00:05:43,120 --> 00:05:50,160
mediated device intel and emitter

00:05:46,240 --> 00:05:54,080
doing it there's a hardware like sroe

00:05:50,160 --> 00:05:58,880
and the did it but uh l video

00:05:54,080 --> 00:06:02,080
is also jump to it too and the arm

00:05:58,880 --> 00:06:04,840
i'm also so you can see here

00:06:02,080 --> 00:06:06,240
this is the 800 just announced this to

00:06:04,840 --> 00:06:09,759
me

00:06:06,240 --> 00:06:12,319
and uh you can see there

00:06:09,759 --> 00:06:14,400
the this automatic instance gpu actually

00:06:12,319 --> 00:06:17,600
are sriv based

00:06:14,400 --> 00:06:20,080
and one interesting part is that

00:06:17,600 --> 00:06:21,680
it could also be used for a good

00:06:20,080 --> 00:06:26,319
application directly

00:06:21,680 --> 00:06:29,840
so and the user case is like

00:06:26,319 --> 00:06:33,120
you can use either a container

00:06:29,840 --> 00:06:36,319
so looks like all about container delay

00:06:33,120 --> 00:06:38,639
and uh um um is pretty new

00:06:36,319 --> 00:06:40,639
and uh they just announced each

00:06:38,639 --> 00:06:43,680
typicalization solution

00:06:40,639 --> 00:06:46,319
uh last month i think

00:06:43,680 --> 00:06:46,800
and intriguing part is a it's a user

00:06:46,319 --> 00:06:50,240
case

00:06:46,800 --> 00:06:53,360
they are mostly working using used for

00:06:50,240 --> 00:06:56,880
vehicle autonomous driving

00:06:53,360 --> 00:07:00,639
and basically for this

00:06:56,880 --> 00:07:01,759
automotive enhancement and this is a new

00:07:00,639 --> 00:07:04,080
user case

00:07:01,759 --> 00:07:04,880
besides the training and inference

00:07:04,080 --> 00:07:08,479
scenario

00:07:04,880 --> 00:07:12,319
there and it's kind of

00:07:08,479 --> 00:07:15,520
interesting make things anyway

00:07:12,319 --> 00:07:18,880
so so they also have and based

00:07:15,520 --> 00:07:22,319
on the architecture here

00:07:18,880 --> 00:07:26,560
it also looks like hardware based

00:07:22,319 --> 00:07:30,000
and yeah there's also other

00:07:26,560 --> 00:07:33,199
gpu i've been working very closely with

00:07:30,000 --> 00:07:37,120
all those with vendors in susa uh

00:07:33,199 --> 00:07:40,639
like an nvidia arm and also amd

00:07:37,120 --> 00:07:44,160
intel and uh and even some other

00:07:40,639 --> 00:07:47,520
hardware accelerator like uh fp

00:07:44,160 --> 00:07:50,720
ga and uh

00:07:47,520 --> 00:07:52,800
neuron mpo like a tpu some stuff there

00:07:50,720 --> 00:07:56,479
so but uh we are talking about the gpu

00:07:52,800 --> 00:08:00,080
here so let's just focus on here

00:07:56,479 --> 00:08:03,440
and uh now comes to the motivation

00:08:00,080 --> 00:08:06,879
why do we want to do it like uh

00:08:03,440 --> 00:08:10,720
i guess generally because people want it

00:08:06,879 --> 00:08:13,919
it's quite popular for animation today

00:08:10,720 --> 00:08:16,639
and uh some people just want more

00:08:13,919 --> 00:08:17,520
for from firecracker like uh yes you are

00:08:16,639 --> 00:08:20,800
wonderful but

00:08:17,520 --> 00:08:22,160
why don't you provide this more on the

00:08:20,800 --> 00:08:25,360
other side is about the

00:08:22,160 --> 00:08:28,560
purification like we could see that

00:08:25,360 --> 00:08:31,680
io tradition is actually become

00:08:28,560 --> 00:08:34,640
the powerful more powerful now and uh

00:08:31,680 --> 00:08:35,039
it has its own utilization capability

00:08:34,640 --> 00:08:38,240
and

00:08:35,039 --> 00:08:39,120
uh which independent with the general

00:08:38,240 --> 00:08:42,719
vmm

00:08:39,120 --> 00:08:45,760
and like we just saw the 800 there

00:08:42,719 --> 00:08:49,040
like they you could just use its

00:08:45,760 --> 00:08:52,640
wii gpu for application so that's

00:08:49,040 --> 00:08:56,240
a good case and

00:08:52,640 --> 00:08:59,279
also people are talking about eta in

00:08:56,240 --> 00:09:03,360
uh in firecracker the

00:08:59,279 --> 00:09:06,160
github is here like a couple here and

00:09:03,360 --> 00:09:06,959
generally people want it but there's

00:09:06,160 --> 00:09:10,160
some

00:09:06,959 --> 00:09:13,279
conflict here like because

00:09:10,160 --> 00:09:16,560
firecracker has its specific purpose

00:09:13,279 --> 00:09:18,880
mainly for the serverless computing and

00:09:16,560 --> 00:09:20,160
so in this case they may need to run

00:09:18,880 --> 00:09:23,360
tons of workloads

00:09:20,160 --> 00:09:25,440
in a host in that case they wanted the

00:09:23,360 --> 00:09:28,320
older subscription

00:09:25,440 --> 00:09:29,279
and also they want a bad performance

00:09:28,320 --> 00:09:33,040
during the

00:09:29,279 --> 00:09:36,880
workload suites and uh wii gpu

00:09:33,040 --> 00:09:40,560
realization seems not good but uh

00:09:36,880 --> 00:09:42,880
anyway i'll just show you how to do it

00:09:40,560 --> 00:09:42,880
here

00:09:45,040 --> 00:09:52,800
uh like i said i just knew

00:09:48,240 --> 00:09:57,519
to firecrack and rust vmm stuff but uh

00:09:52,800 --> 00:10:00,959
i know we gpu and also qmu

00:09:57,519 --> 00:10:04,000
good part is that most of

00:10:00,959 --> 00:10:08,800
its work is still reused

00:10:04,000 --> 00:10:12,160
like uh the host side mdv or sroe

00:10:08,800 --> 00:10:14,720
and is created for the vgpu

00:10:12,160 --> 00:10:16,800
and then we share this and uh the kvm

00:10:14,720 --> 00:10:20,480
set by correct is still using

00:10:16,800 --> 00:10:23,600
kvm for it so those far

00:10:20,480 --> 00:10:24,160
we don't need to care about and we only

00:10:23,600 --> 00:10:27,519
care about

00:10:24,160 --> 00:10:30,800
the vm and the part like if we're using

00:10:27,519 --> 00:10:34,800
the vfi opti passthrough

00:10:30,800 --> 00:10:37,600
basically we are just needed to create a

00:10:34,800 --> 00:10:38,560
pci device based on the hosting

00:10:37,600 --> 00:10:43,920
information

00:10:38,560 --> 00:10:46,959
by like accessed by vfio function here

00:10:43,920 --> 00:10:49,360
and the other part is that uh

00:10:46,959 --> 00:10:51,760
uh cloud hypervisor this is a project

00:10:49,360 --> 00:10:54,640
business vmm

00:10:51,760 --> 00:10:55,360
they it implemented uh we have io

00:10:54,640 --> 00:10:58,959
binding and

00:10:55,360 --> 00:11:02,320
we have ioct errors i think that's

00:10:58,959 --> 00:11:05,680
that that makes the whole process

00:11:02,320 --> 00:11:08,480
much easier dual bomb from here

00:11:05,680 --> 00:11:09,839
the we have bounding is kind of some

00:11:08,480 --> 00:11:13,600
head fires

00:11:09,839 --> 00:11:16,640
automatically generated by the

00:11:13,600 --> 00:11:18,399
binder gene and

00:11:16,640 --> 00:11:21,120
you can see there's just some header

00:11:18,399 --> 00:11:24,240
files for the function definition

00:11:21,120 --> 00:11:27,279
from the kvm or host side and

00:11:24,240 --> 00:11:30,720
we have ioctrs is the main

00:11:27,279 --> 00:11:34,240
implementation so now things get

00:11:30,720 --> 00:11:37,360
clearly and easier so

00:11:34,240 --> 00:11:39,519
what i did here uh as i said earlier i'm

00:11:37,360 --> 00:11:42,640
working on the deep organization

00:11:39,519 --> 00:11:46,560
so i have a lot of fancy hardware here

00:11:42,640 --> 00:11:49,680
the wii gpu 300 nvr 300

00:11:46,560 --> 00:11:53,600
uh in here gpu and i also have this old

00:11:49,680 --> 00:11:58,320
amd gpu here and i'm working

00:11:53,600 --> 00:12:01,839
on based on the 315 fb2

00:11:58,320 --> 00:12:01,839
right here and

00:12:03,519 --> 00:12:10,800
also running the vmm so i

00:12:08,320 --> 00:12:12,560
from my thought i think just i needed to

00:12:10,800 --> 00:12:14,880
run through

00:12:12,560 --> 00:12:16,720
with the cloud provider that would make

00:12:14,880 --> 00:12:19,279
things easier like uh

00:12:16,720 --> 00:12:20,560
if it could work and if not what's the

00:12:19,279 --> 00:12:24,399
problem

00:12:20,560 --> 00:12:30,480
after that i can just back part

00:12:24,399 --> 00:12:30,480
or reflector to the fire tracker so

00:12:31,120 --> 00:12:38,240
things are pretty clear and uh during my

00:12:34,959 --> 00:12:39,120
try on cloud hypervisor i found the most

00:12:38,240 --> 00:12:42,480
of the work

00:12:39,120 --> 00:12:46,560
only like a wii gpu it's like once i

00:12:42,480 --> 00:12:49,839
parsed the mdv inside

00:12:46,560 --> 00:12:52,399
it couldn't it couldn't get

00:12:49,839 --> 00:12:53,600
through so looks something wrong with

00:12:52,399 --> 00:12:57,839
the

00:12:53,600 --> 00:13:01,440
gpu driver during my debugging but uh

00:12:57,839 --> 00:13:04,800
i'll follow that later but anyway i

00:13:01,440 --> 00:13:09,279
i mainly use the intel view here because

00:13:04,800 --> 00:13:09,279
it's open source from either side

00:13:09,760 --> 00:13:16,399
and now back to

00:13:13,040 --> 00:13:18,160
all these like i checked uh how cloud

00:13:16,399 --> 00:13:21,600
hypwizer make it work

00:13:18,160 --> 00:13:23,760
and in order to that i need uh

00:13:21,600 --> 00:13:24,639
these kind of workers here the we have

00:13:23,760 --> 00:13:29,120
our bonding

00:13:24,639 --> 00:13:32,880
and we have ioctrs this is the two main

00:13:29,120 --> 00:13:36,399
uh creates here for for implementation

00:13:32,880 --> 00:13:39,279
and also need a pci

00:13:36,399 --> 00:13:40,240
as you know firecracker only has this

00:13:39,279 --> 00:13:43,440
mmlio

00:13:40,240 --> 00:13:46,560
bus so we needed to

00:13:43,440 --> 00:13:50,480
implement this pti

00:13:46,560 --> 00:13:54,399
bus there and then just uh some vmm

00:13:50,480 --> 00:13:56,160
like uh we needed to follow the whole

00:13:54,399 --> 00:13:59,360
process and then

00:13:56,160 --> 00:14:03,120
implementing in firecracker and also

00:13:59,360 --> 00:14:06,160
needed some defenses like the vm device

00:14:03,120 --> 00:14:08,399
device manager and the vm locker and the

00:14:06,160 --> 00:14:12,639
the full pti implementation

00:14:08,399 --> 00:14:15,360
i probably moved much more codes here

00:14:12,639 --> 00:14:16,720
because i just as the first step i just

00:14:15,360 --> 00:14:19,760
make it work

00:14:16,720 --> 00:14:21,040
then i can get through all the code

00:14:19,760 --> 00:14:23,839
carefully

00:14:21,040 --> 00:14:24,160
and uh also there are some other things

00:14:23,839 --> 00:14:27,920
like

00:14:24,160 --> 00:14:29,040
because over the gpu the the basic of

00:14:27,920 --> 00:14:32,720
the gpu

00:14:29,040 --> 00:14:36,800
we need some the uefi for

00:14:32,720 --> 00:14:40,399
some of the bus bus rebuilds

00:14:36,800 --> 00:14:43,360
set up otherwise it will has a

00:14:40,399 --> 00:14:44,720
driver issue later and also the kernel

00:14:43,360 --> 00:14:47,199
configuration

00:14:44,720 --> 00:14:48,000
the original configuration is quite

00:14:47,199 --> 00:14:52,320
simple

00:14:48,000 --> 00:14:55,600
and uh but we needed to involve extra

00:14:52,320 --> 00:14:57,680
uh modules for just to enable the

00:14:55,600 --> 00:15:01,760
graphic driver

00:14:57,680 --> 00:15:04,720
so and yeah i

00:15:01,760 --> 00:15:06,320
i plan to put all the code here but uh

00:15:04,720 --> 00:15:09,360
where that's

00:15:06,320 --> 00:15:13,120
really not necessary and if you do that

00:15:09,360 --> 00:15:16,480
you may see another benefit

00:15:13,120 --> 00:15:17,760
for the rust is like the whole device

00:15:16,480 --> 00:15:21,920
create

00:15:17,760 --> 00:15:25,760
it's much easier than the qom model

00:15:21,920 --> 00:15:26,160
back in qmu so what i'm doing here is

00:15:25,760 --> 00:15:29,199
like

00:15:26,160 --> 00:15:32,320
during the file tracker i

00:15:29,199 --> 00:15:36,240
press the parameters here i just

00:15:32,320 --> 00:15:38,480
catch this device comes with

00:15:36,240 --> 00:15:40,320
the the path of the device like if you

00:15:38,480 --> 00:15:43,440
use the mdwe

00:15:40,320 --> 00:15:46,399
it will come the uuid number

00:15:43,440 --> 00:15:46,959
and also if just the virtual function it

00:15:46,399 --> 00:15:50,480
will be

00:15:46,959 --> 00:15:53,759
just the ppi

00:15:50,480 --> 00:15:57,839
numbers there and then

00:15:53,759 --> 00:15:58,240
during the vm initialization i needed to

00:15:57,839 --> 00:16:03,360
create

00:15:58,240 --> 00:16:03,360
this pdi bus and then

00:16:04,320 --> 00:16:11,680
i needed to do i needed to

00:16:07,519 --> 00:16:14,720
use the vfio to create a pdi devices

00:16:11,680 --> 00:16:18,480
so i needed to access the host device

00:16:14,720 --> 00:16:22,399
with the device path or id you can see

00:16:18,480 --> 00:16:25,199
and then it will access to the host uh

00:16:22,399 --> 00:16:27,120
cis file system and get the grub and

00:16:25,199 --> 00:16:29,279
device information from host

00:16:27,120 --> 00:16:31,360
and then you just uh use this

00:16:29,279 --> 00:16:34,399
information to create

00:16:31,360 --> 00:16:37,759
your we have our pdi device

00:16:34,399 --> 00:16:42,720
and after that you put it to the

00:16:37,759 --> 00:16:46,560
pvi bus and uh after that i think

00:16:42,720 --> 00:16:50,320
it will be detected by the guest

00:16:46,560 --> 00:16:52,880
vm so so far

00:16:50,320 --> 00:16:54,560
even i said i i think i put more much

00:16:52,880 --> 00:16:58,079
more code here but uh

00:16:54,560 --> 00:17:00,639
it could work with some basic functions

00:16:58,079 --> 00:17:01,680
and it could be detected by the gas

00:17:00,639 --> 00:17:05,199
kernel

00:17:01,680 --> 00:17:08,559
although just a during the

00:17:05,199 --> 00:17:11,120
kernel uh the driver couldn't uh

00:17:08,559 --> 00:17:12,720
work very well there's a lot of issues

00:17:11,120 --> 00:17:13,600
like here the bath table is not

00:17:12,720 --> 00:17:17,360
available

00:17:13,600 --> 00:17:20,400
can't find this one and some a lot of

00:17:17,360 --> 00:17:23,919
drm function failures there the

00:17:20,400 --> 00:17:27,919
uh the math is is kind of a mess

00:17:23,919 --> 00:17:31,039
i needed to go through that anyway

00:17:27,919 --> 00:17:34,320
so anyway like i said this is

00:17:31,039 --> 00:17:36,480
a journey uh explore

00:17:34,320 --> 00:17:36,480
so

00:17:38,480 --> 00:17:43,360
let me just share some thoughts during

00:17:40,480 --> 00:17:43,360
here like uh

00:17:43,600 --> 00:17:50,320
during all the back part working

00:17:47,679 --> 00:17:51,039
i think it's fine i like to reading code

00:17:50,320 --> 00:17:55,120
so

00:17:51,039 --> 00:17:56,880
but i just feel like uh

00:17:55,120 --> 00:18:00,000
during all the working i'm just one

00:17:56,880 --> 00:18:02,880
question i keep asking is it a good fit

00:18:00,000 --> 00:18:03,200
because first the more i back part the

00:18:02,880 --> 00:18:06,880
more

00:18:03,200 --> 00:18:10,240
it it needs like i needed to

00:18:06,880 --> 00:18:14,160
explain this that and

00:18:10,240 --> 00:18:17,360
even after after that i

00:18:14,160 --> 00:18:20,640
the the cracker looks quite different

00:18:17,360 --> 00:18:22,810
the booting time and the memory

00:18:20,640 --> 00:18:24,080
uh food brand

00:18:22,810 --> 00:18:27,360
[Music]

00:18:24,080 --> 00:18:31,280
it's quite it's bigger and

00:18:27,360 --> 00:18:35,039
i must have done something wrong also

00:18:31,280 --> 00:18:39,280
like the during the discussion

00:18:35,039 --> 00:18:43,200
there so the issues there is still

00:18:39,280 --> 00:18:46,559
exists like the design philosophy

00:18:43,200 --> 00:18:48,640
authorities computing like uh since

00:18:46,559 --> 00:18:51,919
there will be

00:18:48,640 --> 00:18:52,320
a lot of uh workload here and so they

00:18:51,919 --> 00:18:55,520
want

00:18:52,320 --> 00:18:56,960
this uh our subscription and they also

00:18:55,520 --> 00:19:00,000
want

00:18:56,960 --> 00:19:03,120
the swift the suites will be

00:19:00,000 --> 00:19:06,960
fast and

00:19:03,120 --> 00:19:10,080
efficient however the

00:19:06,960 --> 00:19:11,100
the wii gpu scheduler probably would be

00:19:10,080 --> 00:19:12,720
a concern

00:19:11,100 --> 00:19:15,120
[Music]

00:19:12,720 --> 00:19:16,480
i didn't test that because i just test

00:19:15,120 --> 00:19:21,280
the one we have here

00:19:16,480 --> 00:19:21,280
the workload is simple

00:19:22,840 --> 00:19:26,640
so

00:19:24,160 --> 00:19:28,000
so with this confusion i'm just asking

00:19:26,640 --> 00:19:32,240
is it a good fit

00:19:28,000 --> 00:19:34,640
and uh so i just stepped back like what

00:19:32,240 --> 00:19:37,840
do we want in the first place

00:19:34,640 --> 00:19:39,520
so like fight right it's for the

00:19:37,840 --> 00:19:44,559
serverless computing

00:19:39,520 --> 00:19:44,559
for sure and uh we don't want a

00:19:44,880 --> 00:19:48,880
graphic we just wanted computing even

00:19:47,520 --> 00:19:51,360
for the computing

00:19:48,880 --> 00:19:52,000
we don't want the training because it

00:19:51,360 --> 00:19:54,080
will last

00:19:52,000 --> 00:19:55,600
long we just thinking about the

00:19:54,080 --> 00:19:58,880
inference

00:19:55,600 --> 00:20:02,640
so we still want it safe

00:19:58,880 --> 00:20:03,520
light and fast so we check back to this

00:20:02,640 --> 00:20:07,039
working load

00:20:03,520 --> 00:20:07,679
like the platform here basically there

00:20:07,039 --> 00:20:10,960
are just

00:20:07,679 --> 00:20:14,480
cuda or opencl mainly like

00:20:10,960 --> 00:20:18,159
even for the arm the arm a it has

00:20:14,480 --> 00:20:20,320
its own platform but uh

00:20:18,159 --> 00:20:21,679
eventually it will still use the opencl

00:20:20,320 --> 00:20:24,960
driver

00:20:21,679 --> 00:20:27,600
for gpu side so maybe

00:20:24,960 --> 00:20:28,240
things would be easier thinking another

00:20:27,600 --> 00:20:31,600
way

00:20:28,240 --> 00:20:34,799
like maybe we

00:20:31,600 --> 00:20:38,480
create a word cuda here or whether

00:20:34,799 --> 00:20:39,760
opencl the method so we can create it as

00:20:38,480 --> 00:20:42,799
the vertical

00:20:39,760 --> 00:20:46,080
mmo device and it's only for the

00:20:42,799 --> 00:20:49,120
general compute and the design

00:20:46,080 --> 00:20:52,320
based on the driver api

00:20:49,120 --> 00:20:53,039
and then use the wii ring to transparent

00:20:52,320 --> 00:20:56,559
to the host

00:20:53,039 --> 00:20:57,200
side and uh so we don't have those

00:20:56,559 --> 00:21:01,120
concerns

00:20:57,200 --> 00:21:05,440
anymore like the memory ping and the

00:21:01,120 --> 00:21:08,799
huge complicated

00:21:05,440 --> 00:21:12,080
machine configuration and the kernel

00:21:08,799 --> 00:21:15,200
configuration so

00:21:12,080 --> 00:21:15,760
maybe so i think i'll probably working

00:21:15,200 --> 00:21:18,400
on it

00:21:15,760 --> 00:21:19,919
there's already started the initial work

00:21:18,400 --> 00:21:22,559
here

00:21:19,919 --> 00:21:23,760
another way is it uh encouraged me is

00:21:22,559 --> 00:21:27,120
that

00:21:23,760 --> 00:21:30,240
about the 800 mig

00:21:27,120 --> 00:21:33,760
the that it could be used directly by

00:21:30,240 --> 00:21:36,960
a container so i i did some research

00:21:33,760 --> 00:21:39,919
back there and

00:21:36,960 --> 00:21:40,960
i thought maybe i can reuse some idea

00:21:39,919 --> 00:21:45,200
about the

00:21:40,960 --> 00:21:48,400
nvidia container but no

00:21:45,200 --> 00:21:48,960
nvidia container is like a mount the

00:21:48,400 --> 00:21:52,080
host

00:21:48,960 --> 00:21:55,280
driver into the container image the

00:21:52,080 --> 00:21:57,679
container root file system so

00:21:55,280 --> 00:21:59,600
it's it's different with a weak virtual

00:21:57,679 --> 00:22:01,840
machine scenario

00:21:59,600 --> 00:22:04,000
but uh maybe still thinking about

00:22:01,840 --> 00:22:07,919
another

00:22:04,000 --> 00:22:11,440
device type or like

00:22:07,919 --> 00:22:15,200
we have i o mro no i don't know

00:22:11,440 --> 00:22:19,039
but uh yeah i'll keep thinking

00:22:15,200 --> 00:22:22,960
so for this whole journey i'm thinking

00:22:19,039 --> 00:22:26,080
like some questions like could we do it

00:22:22,960 --> 00:22:29,520
sure but should we

00:22:26,080 --> 00:22:33,360
that depends like here like a

00:22:29,520 --> 00:22:36,400
wii gpu in firecracker then

00:22:33,360 --> 00:22:39,520
it may be a very good fit like uh

00:22:36,400 --> 00:22:43,200
because it's a you specific

00:22:39,520 --> 00:22:47,280
a case for firecracker

00:22:43,200 --> 00:22:51,360
but if we jump out of this scenario

00:22:47,280 --> 00:22:54,720
thinking about the arm the uh

00:22:51,360 --> 00:22:55,200
terminus driving there that's a

00:22:54,720 --> 00:22:58,799
different

00:22:55,200 --> 00:23:02,880
scenario like maybe we the workload

00:22:58,799 --> 00:23:05,120
maybe not that heavy but we still want

00:23:02,880 --> 00:23:05,120
some

00:23:06,080 --> 00:23:12,960
gpu computing here so and uh

00:23:10,320 --> 00:23:14,080
still would still want it like a safe

00:23:12,960 --> 00:23:17,520
light first

00:23:14,080 --> 00:23:20,960
so this may be a good match

00:23:17,520 --> 00:23:24,000
so yeah so this totally

00:23:20,960 --> 00:23:27,039
depends on how you want to use it

00:23:24,000 --> 00:23:29,360
so i think for this one i will

00:23:27,039 --> 00:23:31,520
still implement eta eventually even not

00:23:29,360 --> 00:23:36,000
for firecracker maybe

00:23:31,520 --> 00:23:39,840
design a new vmm based on the last vmm

00:23:36,000 --> 00:23:42,720
like just for some wii gpu

00:23:39,840 --> 00:23:44,080
scenario or ai machine learning scenario

00:23:42,720 --> 00:23:46,080
that would be fun

00:23:44,080 --> 00:23:48,799
but i really needed to optimize the code

00:23:46,080 --> 00:23:51,279
carefully

00:23:48,799 --> 00:23:54,320
or just that we discussed earlier just

00:23:51,279 --> 00:23:57,039
to use a different device modem

00:23:54,320 --> 00:23:57,840
i think it's doable i i also did some

00:23:57,039 --> 00:24:00,880
research here

00:23:57,840 --> 00:24:01,760
some people some people from school

00:24:00,880 --> 00:24:04,640
already

00:24:01,760 --> 00:24:05,200
implemented it with a different way here

00:24:04,640 --> 00:24:09,120
we just

00:24:05,200 --> 00:24:12,799
needed to do it with rust

00:24:09,120 --> 00:24:15,919
and the kvm one thing

00:24:12,799 --> 00:24:18,960
is i think the the api

00:24:15,919 --> 00:24:21,520
api dependency would be need to be

00:24:18,960 --> 00:24:22,559
really careful we don't want this kind

00:24:21,520 --> 00:24:26,320
of a

00:24:22,559 --> 00:24:29,200
api here and i think

00:24:26,320 --> 00:24:31,200
if we had both ways and then we do

00:24:29,200 --> 00:24:34,559
overall comparison

00:24:31,200 --> 00:24:38,080
would be interesting i think maybe

00:24:34,559 --> 00:24:41,200
next year i'll share some upstate with

00:24:38,080 --> 00:24:44,799
even with upstream and

00:24:41,200 --> 00:24:45,120
the last thing is that yeah i think i

00:24:44,799 --> 00:24:48,000
like

00:24:45,120 --> 00:24:50,320
the raster vm factory very much like

00:24:48,000 --> 00:24:53,600
especially for created us

00:24:50,320 --> 00:24:54,559
it's much easier than to qom if you know

00:24:53,600 --> 00:24:57,760
what i mean

00:24:54,559 --> 00:25:01,440
and i think

00:24:57,760 --> 00:25:04,720
that's it so if you have questions

00:25:01,440 --> 00:25:08,080
and uh typing from the

00:25:04,720 --> 00:25:10,880
chat channel and or email me

00:25:08,080 --> 00:25:11,520
so anyway thank you so much for your

00:25:10,880 --> 00:25:15,120
time

00:25:11,520 --> 00:25:19,200
and it's a really exciting

00:25:15,120 --> 00:25:19,200
it's my honor to present here

00:25:26,840 --> 00:25:31,200
thanks

00:25:29,120 --> 00:25:31,200

YouTube URL: https://www.youtube.com/watch?v=Lz98xv4ZxJo


