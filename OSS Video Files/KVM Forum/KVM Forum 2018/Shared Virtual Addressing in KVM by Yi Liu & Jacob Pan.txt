Title: Shared Virtual Addressing in KVM by Yi Liu & Jacob Pan
Publication date: 2018-11-17
Playlist: KVM Forum 2018
Description: 
	Shared Virtual Addressing in KVM (Liu Yi, Intel) - Shared Virtual Addressing (SVA) is a hardware extension to allow device directly accessing CPU virtual address, thus enables efficient workload submission on accelerators. SVA requires support in PCI bus, endpoint device and IOMMU, which has been made available by major hardware vendors (Intel, AMD, ARM, etc.). Then it becomes a hot area in cloud and data center, where same level of efficiency is expected when those accelerators are assigned to VMs.

This talk will first provide an overview of SVA and then the envisioned architecture of virtualizing SVA in KVM. Following that will be a deep dive of main SVA working flow cross multiple kernel/user components (Qemu, VFIO, IOMMU, etc.), especially about how to design neutral kernel APIs to work with different IOMMU vendors and also different vIOMMU models (emulated or para-virtualized).

---

Yi Liu
Senior Software Engineer
Intel Corporation

Yi is a senior software engineer from OTC, Intel Corp. He focuses on I/O virtualization(IntelÂ® VT-d) and new I/O technology researching and enabling. He is currently working on virtual IOMMU upstreaming within Intel OTC VMM enabling team. As a well-recognized contributor, he was invited to attend and give presentation at Linux Plumbers Conference 2017, Xen Summit 2017 and Linux Conference Beijing 2018. Prior to Intel, Yi works for Hewlett-Packard Company, in where he gained deep understanding on x86 based computing system.

Jacob Pan
Linux Kernel Developer
Intel Corp

Jacob is a Linux kernel developer at Intel since 2005. He worked on PowerPC at Freescale prior to joining Intel.

He has worked in many areas around Linux kernel, including arch/x86, device drivers (USB, I2C, PMIC, sensors, timers). His recent interest and work is on power management, scheduler, IOMMU.
Captions: 
	00:00:01,040 --> 00:00:08,670
[Music]

00:00:05,509 --> 00:00:11,400
okay thank you for joining today's

00:00:08,670 --> 00:00:13,769
session delivered by me and Yakov

00:00:11,400 --> 00:00:19,020
yeah my name is Arielle I come from

00:00:13,769 --> 00:00:21,420
Inter Intel and today I will do some

00:00:19,020 --> 00:00:24,800
sharing about shared virtual addressing

00:00:21,420 --> 00:00:27,960
in KVM and according to Jacob we

00:00:24,800 --> 00:00:33,080
introduced the changes in the IMU

00:00:27,960 --> 00:00:33,080
subsystem so let me go ahead

00:00:33,410 --> 00:00:40,079
sohow was about the spirit of addressing

00:00:37,530 --> 00:00:45,020
so previously is called a shared virtual

00:00:40,079 --> 00:00:48,090
memory but to avoid some conceptor

00:00:45,020 --> 00:00:50,850
confusion from the secure virtual

00:00:48,090 --> 00:00:54,680
machine so we use the Sherrill virtual

00:00:50,850 --> 00:00:57,870
addressing in our community discussion

00:00:54,680 --> 00:01:01,320
in brief share the virtual addressing

00:00:57,870 --> 00:01:04,500
means share address space between our

00:01:01,320 --> 00:01:08,250
device and processor so they can have

00:01:04,500 --> 00:01:12,270
unified address space view when doing

00:01:08,250 --> 00:01:15,600
some workload submission so we start

00:01:12,270 --> 00:01:20,189
watching memory not submission is much

00:01:15,600 --> 00:01:22,290
more efficient and the programming for

00:01:20,189 --> 00:01:27,270
the programs is much much more

00:01:22,290 --> 00:01:35,670
simplified than previous programming

00:01:27,270 --> 00:01:38,700
models yeah so on Imperial time we are

00:01:35,670 --> 00:01:40,470
we have i oh we are which used the I am

00:01:38,700 --> 00:01:43,200
in page table but with the shredder

00:01:40,470 --> 00:01:46,229
virtual addressing we just we use the

00:01:43,200 --> 00:01:48,780
CPU page table so the address space is

00:01:46,229 --> 00:01:51,119
shared between CPU and the device that's

00:01:48,780 --> 00:01:57,180
why is called shared what we're

00:01:51,119 --> 00:01:59,790
addressing and the so third Christ some

00:01:57,180 --> 00:02:02,939
hot water like

00:01:59,790 --> 00:02:08,879
all inter VDD we have process address

00:02:02,939 --> 00:02:11,069
space IDR support this is a PCIe concept

00:02:08,879 --> 00:02:13,530
and we have first level and a second

00:02:11,069 --> 00:02:16,860
level translation this we else

00:02:13,530 --> 00:02:19,920
the different usages like OVA or as we a

00:02:16,860 --> 00:02:21,390
by different translation types and we

00:02:19,920 --> 00:02:23,340
have different translation types like

00:02:21,390 --> 00:02:25,110
First Alert translation second level

00:02:23,340 --> 00:02:26,760
translation and the last is translation

00:02:25,110 --> 00:02:29,640
I will talk more about an asset

00:02:26,760 --> 00:02:35,459
translation since we were you use it to

00:02:29,640 --> 00:02:38,280
implement the virtual as VI in KVM had

00:02:35,459 --> 00:02:42,510
as you may know we have in her heads

00:02:38,280 --> 00:02:45,810
with EDR 3.0 we introduced the scaleable

00:02:42,510 --> 00:02:48,870
mode actually there is no conflict

00:02:45,810 --> 00:02:52,260
between as we understand about we they

00:02:48,870 --> 00:02:58,319
are also picker stop you can use both of

00:02:52,260 --> 00:03:00,540
them okay so for nested translation it

00:02:58,319 --> 00:03:02,690
use these are both first law and the

00:03:00,540 --> 00:03:07,319
second level for address translation

00:03:02,690 --> 00:03:10,050
with first level to do the GPA to GPA

00:03:07,319 --> 00:03:12,620
translation and the second level do the

00:03:10,050 --> 00:03:16,820
GV 8 HP translation so we can achieve

00:03:12,620 --> 00:03:22,079
GPA to GPA and again to HV a translation

00:03:16,820 --> 00:03:23,880
so this is a key to implement to share

00:03:22,079 --> 00:03:27,150
the virtual memory sure the virtual

00:03:23,880 --> 00:03:29,970
addressing in virtual machine actually

00:03:27,150 --> 00:03:33,480
this lead they are not the only choice

00:03:29,970 --> 00:03:36,000
but most of Enders to suppose that's the

00:03:33,480 --> 00:03:40,820
translation for as we usage in virtual

00:03:36,000 --> 00:03:44,549
machine okay so with nested translation

00:03:40,820 --> 00:03:45,299
this is how it'll look like on entire

00:03:44,549 --> 00:03:49,260
VDD

00:03:45,299 --> 00:03:51,600
we have first level which is the

00:03:49,260 --> 00:03:53,850
caster's if you page tables and we have

00:03:51,600 --> 00:03:56,970
we TDP tables which is the second

00:03:53,850 --> 00:04:01,079
vegetable so with this nested the

00:03:56,970 --> 00:04:04,650
translation is a similar to the EPT EVD

00:04:01,079 --> 00:04:09,000
table in CPU side that's why we can

00:04:04,650 --> 00:04:14,130
achieve two level translation even in

00:04:09,000 --> 00:04:17,209
virtualization environment ok on to

00:04:14,130 --> 00:04:19,470
enable us being we am first we needed to

00:04:17,209 --> 00:04:22,740
have a virtual al-mu

00:04:19,470 --> 00:04:25,740
with as we are as we a capability this

00:04:22,740 --> 00:04:27,210
to the BR proper arm emulation at

00:04:25,740 --> 00:04:31,590
according to witness

00:04:27,210 --> 00:04:36,180
specific new specifications and this is

00:04:31,590 --> 00:04:39,180
had no are no specific equipment sir for

00:04:36,180 --> 00:04:42,740
the information you can either be fully

00:04:39,180 --> 00:04:46,410
emanated or what I obey star mu and

00:04:42,740 --> 00:04:48,840
since there is some page table on the

00:04:46,410 --> 00:04:51,620
back cast there is a requirement of a

00:04:48,840 --> 00:04:57,330
notification for the gas the translation

00:04:51,620 --> 00:05:00,240
structure modifications for integrity we

00:04:57,330 --> 00:05:04,470
have caching mode which is which

00:05:00,240 --> 00:05:06,120
requires a translation our cache

00:05:04,470 --> 00:05:10,110
invalidation for any translation

00:05:06,120 --> 00:05:13,440
structure modification in in in software

00:05:10,110 --> 00:05:16,169
so the answer we can share we can check

00:05:13,440 --> 00:05:20,849
the translation structure changes in

00:05:16,169 --> 00:05:25,229
guest and modify modify it in host the

00:05:20,849 --> 00:05:27,720
site and then we will enable nested

00:05:25,229 --> 00:05:31,349
translation on physical mu for given

00:05:27,720 --> 00:05:36,150
procedure as Kevin mentioned in scalar

00:05:31,349 --> 00:05:42,870
mode all the translation tables per

00:05:36,150 --> 00:05:47,099
proceed gorilla T okay so and here is

00:05:42,870 --> 00:05:52,800
what and as we are textured look like in

00:05:47,099 --> 00:05:57,180
Korean we have multiple modules affected

00:05:52,800 --> 00:06:01,469
to introduce this functionality like we

00:05:57,180 --> 00:06:04,620
mu we will have emulation and logical

00:06:01,469 --> 00:06:08,310
logical in that in clear my site and we

00:06:04,620 --> 00:06:11,580
will have we fio2 program host the IMU

00:06:08,310 --> 00:06:15,990
we had verify all interfaces and also we

00:06:11,580 --> 00:06:23,210
have some new api supposed to for to via

00:06:15,990 --> 00:06:28,020
file in every driver okay so on to

00:06:23,210 --> 00:06:31,740
enable as via usage in operating system

00:06:28,020 --> 00:06:32,759
first we needed to find a per seat on

00:06:31,740 --> 00:06:36,599
with ET

00:06:32,759 --> 00:06:39,370
we but we will bind guest CPU page table

00:06:36,599 --> 00:06:43,930
when it's in water hydration

00:06:39,370 --> 00:06:46,900
and it will be forwarded to via file and

00:06:43,930 --> 00:06:50,020
then program to host a new driver so

00:06:46,900 --> 00:06:54,280
that the caster page table will be

00:06:50,020 --> 00:06:58,720
appropriated to the host site second

00:06:54,280 --> 00:07:00,910
since are the guests almost CPU page

00:06:58,720 --> 00:07:03,280
table so there is some catchy

00:07:00,910 --> 00:07:05,740
invalidation to the according to the

00:07:03,280 --> 00:07:08,590
gaseous view page table we needed to

00:07:05,740 --> 00:07:11,320
forward a such kind of a invalidation to

00:07:08,590 --> 00:07:14,590
holster so that holster can do caching

00:07:11,320 --> 00:07:20,880
validation and a gift catch be the

00:07:14,590 --> 00:07:25,780
latest work later version third is since

00:07:20,880 --> 00:07:29,260
there since page turn may be some page

00:07:25,780 --> 00:07:34,000
fault during the translation in how to

00:07:29,260 --> 00:07:38,979
recite the hardware may receive some

00:07:34,000 --> 00:07:42,460
page page water from the the right side

00:07:38,979 --> 00:07:46,630
but sometimes the host can not just

00:07:42,460 --> 00:07:50,020
address such page photo since some liked

00:07:46,630 --> 00:07:53,139
gas the CPU page table is in gas aside

00:07:50,020 --> 00:07:57,030
so we needed to report it to use a space

00:07:53,139 --> 00:08:00,610
like Liam you the virtual elimination

00:07:57,030 --> 00:08:04,000
device model and then inject it to gas

00:08:00,610 --> 00:08:09,180
so that guests I'm Aurora can receive it

00:08:04,000 --> 00:08:12,760
and addressed the page requester and

00:08:09,180 --> 00:08:17,139
after the page request is at rest it

00:08:12,760 --> 00:08:19,960
will stay on the page response and the

00:08:17,139 --> 00:08:23,710
third kind of response will be forwarded

00:08:19,960 --> 00:08:26,700
to host the host will host our meet ammu

00:08:23,710 --> 00:08:35,320
will send either to device that just

00:08:26,700 --> 00:08:38,979
whole path okay so on you may you may

00:08:35,320 --> 00:08:40,539
you may notice that there's some API is

00:08:38,979 --> 00:08:44,350
between the kernel

00:08:40,539 --> 00:08:47,490
I'm a driver and the via file actually

00:08:44,350 --> 00:08:49,870
are as I mentioned we have no specific

00:08:47,490 --> 00:08:52,480
requirements for the water hammer

00:08:49,870 --> 00:08:55,600
implementation you can both

00:08:52,480 --> 00:09:01,570
what are based on so our API will also

00:08:55,600 --> 00:09:03,639
be common for post implementation and my

00:09:01,570 --> 00:09:06,070
colleague at jerk-off will mention more

00:09:03,639 --> 00:09:11,800
about such kind of converge between

00:09:06,070 --> 00:09:15,339
different communications so we have

00:09:11,800 --> 00:09:21,399
changes to their qmue our file an IMU

00:09:15,339 --> 00:09:24,190
so we mu is doing the travel emulation

00:09:21,399 --> 00:09:28,839
and a capture the guest Army translation

00:09:24,190 --> 00:09:32,260
modifications and a program to host and

00:09:28,839 --> 00:09:35,769
the fovea file we will have some new i/o

00:09:32,260 --> 00:09:38,040
controls like binder process by the

00:09:35,769 --> 00:09:42,940
guest page table and ran against

00:09:38,040 --> 00:09:46,209
procedure table and as we are imitation

00:09:42,940 --> 00:09:49,990
a to invited to invert a to a TLB

00:09:46,209 --> 00:09:54,000
forecaster and like the folder of FD

00:09:49,990 --> 00:09:56,350
search this is used for event

00:09:54,000 --> 00:09:59,769
notification like the PR q and the

00:09:56,350 --> 00:10:02,410
default and we also have the gate DMA

00:09:59,769 --> 00:10:05,290
for the information to get to the photo

00:10:02,410 --> 00:10:09,880
data from cano space to usurp a user

00:10:05,290 --> 00:10:12,730
space yeah for the army driver and

00:10:09,880 --> 00:10:20,199
change I will be limited to check off to

00:10:12,730 --> 00:10:22,899
me much more detail so currently I am

00:10:20,199 --> 00:10:26,800
working on the queenside current just

00:10:22,899 --> 00:10:30,819
status is we have to pass like first is

00:10:26,800 --> 00:10:35,680
the what Ramu emulation the air is as we

00:10:30,819 --> 00:10:38,829
as we as we have obviously is 2017 after

00:10:35,680 --> 00:10:41,019
all this is delayed because we have some

00:10:38,829 --> 00:10:45,029
specification change like the Kevin's

00:10:41,019 --> 00:10:47,680
mentioned we needed to do a new

00:10:45,029 --> 00:10:49,990
emulation for scheduled motor so that's

00:10:47,680 --> 00:10:52,569
why it's a long time ago for the heart

00:10:49,990 --> 00:10:54,850
for the first RFC and the second is the

00:10:52,569 --> 00:10:56,860
notification framework between the what

00:10:54,850 --> 00:11:01,449
Ramu device model and the via file

00:10:56,860 --> 00:11:04,920
within klum you I have sent this in we

00:11:01,449 --> 00:11:06,220
three are in this April of this April

00:11:04,920 --> 00:11:10,260
and

00:11:06,220 --> 00:11:12,970
have some proposal to PCRs via aux and

00:11:10,260 --> 00:11:15,550
also there's some work from Erika order

00:11:12,970 --> 00:11:19,510
it is also working on the watch I am you

00:11:15,550 --> 00:11:21,580
work for am platform he has he has

00:11:19,510 --> 00:11:24,040
disease were rushing to and the we are

00:11:21,580 --> 00:11:28,210
we share some notification from workers

00:11:24,040 --> 00:11:31,180
so Nestor Nestor step we will do some

00:11:28,210 --> 00:11:34,470
consolidation for the common common path

00:11:31,180 --> 00:11:37,030
and the further and another thing is

00:11:34,470 --> 00:11:41,280
hardware a new capability query

00:11:37,030 --> 00:11:44,980
interface actually this part is not

00:11:41,280 --> 00:11:49,870
included in our first our sea perch but

00:11:44,980 --> 00:11:55,090
we have play on it and we will include

00:11:49,870 --> 00:12:00,040
it in our Nestor purchase add to to make

00:11:55,090 --> 00:12:04,150
it sink with host before reporter such

00:12:00,040 --> 00:12:10,860
some specific will capabilities to the

00:12:04,150 --> 00:12:13,750
guest okay I think ah I can leave the

00:12:10,860 --> 00:12:18,310
remaining time to my colleague at your

00:12:13,750 --> 00:12:20,830
club yeah hello so for the next few

00:12:18,310 --> 00:12:25,480
slides I I'm trying to give you a brief

00:12:20,830 --> 00:12:28,420
update of the upstream status you notice

00:12:25,480 --> 00:12:31,560
it's a joint effort between he and I and

00:12:28,420 --> 00:12:36,420
also from our friends from redhead and

00:12:31,560 --> 00:12:40,960
engine from arm maybe not so friends but

00:12:36,420 --> 00:12:43,000
anyway so we have to two tracks so we

00:12:40,960 --> 00:12:47,800
have to basically the native as we

00:12:43,000 --> 00:12:51,850
enabling done by young and the iommu I

00:12:47,800 --> 00:12:54,630
mean the virtualized SVA and from our

00:12:51,850 --> 00:13:01,570
patch website and also from Erik Alger

00:12:54,630 --> 00:13:03,100
so so if you get o excited about that my

00:13:01,570 --> 00:13:04,990
previous slides and trying to read about

00:13:03,100 --> 00:13:07,120
the slides I'm I'm sure you get confused

00:13:04,990 --> 00:13:09,520
pretty soon because we have some really

00:13:07,120 --> 00:13:12,370
interesting terminology translation has

00:13:09,520 --> 00:13:14,800
to be done here so under the reference

00:13:12,370 --> 00:13:15,800
that is the VDD so we have some really

00:13:14,800 --> 00:13:17,420
identical

00:13:15,800 --> 00:13:20,420
concepts for the different name so I'm

00:13:17,420 --> 00:13:23,029
trying to hear to balance it out and so

00:13:20,420 --> 00:13:25,490
on the left hand side is the civility we

00:13:23,029 --> 00:13:28,790
caught a passage and on the SMU is

00:13:25,490 --> 00:13:30,620
called a stream ID and pass it a bow of

00:13:28,790 --> 00:13:32,959
course contains all the passes and but

00:13:30,620 --> 00:13:36,290
on an SMU is called a contact descriptor

00:13:32,959 --> 00:13:39,529
table Stage one is is level 1 stage 2 is

00:13:36,290 --> 00:13:41,630
level 2 and all these can go on we can

00:13:39,529 --> 00:13:43,399
go through later but sometimes gets even

00:13:41,630 --> 00:13:44,870
worse when you try to be nice to each

00:13:43,399 --> 00:13:47,630
other and I use the other side of the

00:13:44,870 --> 00:13:50,600
terminology but that's a there should be

00:13:47,630 --> 00:13:53,510
Oh settle down after a time since we're

00:13:50,600 --> 00:13:55,940
short on time and try to do a little bit

00:13:53,510 --> 00:13:59,860
comparison of the kind of the

00:13:55,940 --> 00:14:04,070
differences between to SVA

00:13:59,860 --> 00:14:06,440
implementations first of all he is the

00:14:04,070 --> 00:14:08,240
the passive allocation in the cast on

00:14:06,440 --> 00:14:10,610
the vtd side of asset allocation is

00:14:08,240 --> 00:14:12,230
global even for a guest that the only

00:14:10,610 --> 00:14:14,180
way to our capacities through a virtual

00:14:12,230 --> 00:14:18,050
command interface and exposed through

00:14:14,180 --> 00:14:21,110
the virtual iommu on the on the SMU side

00:14:18,050 --> 00:14:24,520
will be it's solely owned by the Gast

00:14:21,110 --> 00:14:27,940
similar for the path has a table and is

00:14:24,520 --> 00:14:32,329
the under BDD side a passive table is

00:14:27,940 --> 00:14:35,240
shadowed is passive is managed by the

00:14:32,329 --> 00:14:39,500
host and the shadow casts its shadow

00:14:35,240 --> 00:14:42,890
where the SMU cytopathic table it's only

00:14:39,500 --> 00:14:46,550
back asta it's only the the capacity

00:14:42,890 --> 00:14:51,770
table pointer the gene GPA is bind to

00:14:46,550 --> 00:14:55,070
the tutor to the physical iommu and the

00:14:51,770 --> 00:14:57,410
passage the hpa2 GPA the second level

00:14:55,070 --> 00:14:59,300
translation we have a purpose a base

00:14:57,410 --> 00:15:04,579
like Kevin mentioned in the scaleable

00:14:59,300 --> 00:15:06,709
iov mode and where the SMU is per

00:15:04,579 --> 00:15:09,910
basically per device and a prairie

00:15:06,709 --> 00:15:13,449
stream ID and all the context descriptor

00:15:09,910 --> 00:15:17,440
share the same same passes second level

00:15:13,449 --> 00:15:21,260
so passes 0 has a special meaning for

00:15:17,440 --> 00:15:23,899
for smmu that's used for request without

00:15:21,260 --> 00:15:25,430
passage we're in vtd we have a little

00:15:23,899 --> 00:15:28,100
bit more flexibility you can use the

00:15:25,430 --> 00:15:29,900
read to pass it filled in the contact

00:15:28,100 --> 00:15:32,540
Divine's contacts table 2 program which

00:15:29,900 --> 00:15:36,490
pasady want to use for handling requests

00:15:32,540 --> 00:15:40,340
without passage so we both support page

00:15:36,490 --> 00:15:44,900
request a response so we can handle IOH

00:15:40,340 --> 00:15:48,290
fought and but we also kind of diverged

00:15:44,900 --> 00:15:52,040
from the standard PCI page requests a

00:15:48,290 --> 00:15:54,200
little bit on the on the under unit us

00:15:52,040 --> 00:15:56,930
on the unit aside we have some private

00:15:54,200 --> 00:15:59,240
data that needs response on the on the

00:15:56,930 --> 00:16:02,810
arm side we have at a store store model

00:15:59,240 --> 00:16:06,650
and now some no idea not ATS compliant

00:16:02,810 --> 00:16:08,690
interface so I think I owe a maybe

00:16:06,650 --> 00:16:15,470
domain it's it's more the difference

00:16:08,690 --> 00:16:16,430
between the not the not a different

00:16:15,470 --> 00:16:19,520
difference between the 2 architecture

00:16:16,430 --> 00:16:22,220
but rather the the state of the two

00:16:19,520 --> 00:16:24,140
drivers my work we're working on to

00:16:22,220 --> 00:16:26,060
bring them to the same behavior this

00:16:24,140 --> 00:16:27,800
were for VDD specifically we try to

00:16:26,060 --> 00:16:29,810
support the default domain which is

00:16:27,800 --> 00:16:34,400
supported DMA mapping mapping API

00:16:29,810 --> 00:16:37,310
instead of using a private domain so

00:16:34,400 --> 00:16:39,220
this this diagram try to visualize the

00:16:37,310 --> 00:16:41,270
upstream status and the

00:16:39,220 --> 00:16:43,220
interdependencies we don't have to go

00:16:41,270 --> 00:16:45,800
through the combined components but the

00:16:43,220 --> 00:16:48,560
color coding here is the blue for Intel

00:16:45,800 --> 00:16:51,050
green green for arm and the red four red

00:16:48,560 --> 00:16:53,090
head of course and so those are the

00:16:51,050 --> 00:16:54,860
components that we have some shared

00:16:53,090 --> 00:16:58,930
components like device faults and there

00:16:54,860 --> 00:17:07,220
are also individual components for

00:16:58,930 --> 00:17:09,520
virtualized and the native as SVA I'm

00:17:07,220 --> 00:17:12,829
not going to go through all this that

00:17:09,520 --> 00:17:16,160
the API table here but those are reflex

00:17:12,829 --> 00:17:18,320
in the previous pair set if you have

00:17:16,160 --> 00:17:19,730
changed to to read through it and the

00:17:18,320 --> 00:17:21,890
follow the discussion perhaps also

00:17:19,730 --> 00:17:24,260
contribute those are the things you can

00:17:21,890 --> 00:17:25,939
you can look forward in the first place

00:17:24,260 --> 00:17:28,280
I think we're a little bit running out

00:17:25,939 --> 00:17:32,540
of time so I'll just go to the debt

00:17:28,280 --> 00:17:35,020
summary and so we will talk about as

00:17:32,540 --> 00:17:37,370
shared virtual address has been become a

00:17:35,020 --> 00:17:39,650
convenient and efficient way to submit

00:17:37,370 --> 00:17:42,290
workload to express um

00:17:39,650 --> 00:17:45,320
accelerators and really simplified

00:17:42,290 --> 00:17:48,440
programming model and vtd has introduced

00:17:45,320 --> 00:17:49,900
a new spec that has a scalable mode

00:17:48,440 --> 00:17:53,390
which is the only mode that supports

00:17:49,900 --> 00:17:57,380
pass it and share virtual addressing and

00:17:53,390 --> 00:17:59,720
well he has also mentioned the entire

00:17:57,380 --> 00:18:02,210
stack to for the enabling work that's

00:17:59,720 --> 00:18:04,060
including iommu driver via file queue

00:18:02,210 --> 00:18:08,600
and all the way to the guest

00:18:04,060 --> 00:18:11,960
counterparts and and our try our API

00:18:08,600 --> 00:18:15,460
design is cross architecture and also

00:18:11,960 --> 00:18:19,370
across virtual and new solutions

00:18:15,460 --> 00:18:21,560
including PV and 48 million API so so

00:18:19,370 --> 00:18:27,820
now we have I don't know have time for

00:18:21,560 --> 00:18:27,820
for questions happy I'll be around

00:18:31,420 --> 00:18:41,000
so for page faults it's all small

00:18:38,030 --> 00:18:44,180
questions one is where the Europe then

00:18:41,000 --> 00:18:47,920
hearing from PCIe hardware vendors cart

00:18:44,180 --> 00:18:53,240
vendors that they plan to add cards with

00:18:47,920 --> 00:18:55,730
support web interface and ii III guess I

00:18:53,240 --> 00:18:58,130
think that four cards that do have it

00:18:55,730 --> 00:19:03,560
right we could read get rid of the CM

00:18:58,130 --> 00:19:11,680
bit and write only send updates when we

00:19:03,560 --> 00:19:11,680
are invalidating page table entries yes

00:19:12,790 --> 00:19:19,520
page requests ESP standard or PCI

00:19:15,710 --> 00:19:25,220
specification and I don't know exactly

00:19:19,520 --> 00:19:30,080
which page window supported page

00:19:25,220 --> 00:19:34,580
requires to the B standard conception

00:19:30,080 --> 00:19:38,090
PCI Express and yeah so far in Ã¬make to

00:19:34,580 --> 00:19:41,810
militarised ito device had spot each

00:19:38,090 --> 00:19:44,590
part in turn has plan to have what IPS

00:19:41,810 --> 00:19:47,570
suppose the page request to interface

00:19:44,590 --> 00:19:50,020
and the regards to the the question to

00:19:47,570 --> 00:19:53,100
catch him out a cat mode is actually

00:19:50,020 --> 00:19:55,710
requires software to do

00:19:53,100 --> 00:19:58,440
explicit invalidation when there is any

00:19:55,710 --> 00:20:01,260
challenge to the translation structure

00:19:58,440 --> 00:20:06,380
because hosting is to no guests as

00:20:01,260 --> 00:20:09,690
changes and map it to hosters mapping

00:20:06,380 --> 00:20:11,970
structures that's why we need a caching

00:20:09,690 --> 00:20:15,510
mode but catching model is not the only

00:20:11,970 --> 00:20:17,610
choice answer that other vendors may

00:20:15,510 --> 00:20:27,150
have different but the catch mode is

00:20:17,610 --> 00:20:34,559
just interest choice topham and other

00:20:27,150 --> 00:20:36,510
questions yeah it's welcome thank you

00:20:34,559 --> 00:20:39,400
for your time

00:20:36,510 --> 00:20:45,189
[Applause]

00:20:39,400 --> 00:20:45,189

YouTube URL: https://www.youtube.com/watch?v=Kq_nfGK5MwQ


