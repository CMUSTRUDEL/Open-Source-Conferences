Title: Live Migration Support for GPU with SRIOV by Zheng Xiao, Jerry Jiang & Ken Xue
Publication date: 2018-11-17
Playlist: KVM Forum 2018
Description: 
	Full name: Live Migration Support for GPU with SRIOV: Challenges and Solution

As we all known pass-through device is not migration-friendly because of hypervisor hard to track device hardware's internal status. While there are still chance for specific device to support live migration: for example AMD GPU devices. AMD GPU product with SRIOV virtualization already deployed in alibaba cloud to support graphic remote rendering. Right now there are increasing demands from customers to support migration of vGPU. In this session, alibaba engineers will introduce a generic solution in VFIO how to migrate GPU device within VFIO framework, expose what's challenges we have. while AMD engineers will expose details what need to do inside SRIOV PF device driver to overcome these challenges. Last, there will be a short demo video how it looks like for audiences.

---

Yinan Jerry Jiang
staff engineer
Advanced Micro Device Inc.

Jerry is AMD staff engineer working on AMD GPU device driver developing as well as GPU silicon design many years.

Ken Xue
AMD

XIAO ZHENG
staff engineer
Alibaba Group/Alibaba Cloud

Xiao is now staff engineer in alibaba cloud responsible for GPU virtualization and heterogeneous computing service developing. Xiao has many years experience in KVM hypervisor design and implementation, especially skillful in GPU virtualization. During the past few years.

Xiao was in Intel 12years, and represented former employer deliver speak on GPU media cloud in Intel IDF, deliver a talk about GPU migration topic in Xen forum, and many Intel internal conference.
Captions: 
	00:00:01,040 --> 00:00:06,940
[Music]

00:00:11,470 --> 00:00:14,569
[Music]

00:00:19,789 --> 00:00:25,170
this is the cats running the just really

00:00:22,920 --> 00:00:27,689
workload you need to heaven and you will

00:00:25,170 --> 00:00:31,230
say did the library she's the Posada

00:00:27,689 --> 00:00:34,350
will be changed and there is are a small

00:00:31,230 --> 00:00:39,030
pause and it is lag merging how these

00:00:34,350 --> 00:00:52,590
works and ok yeah I will show my stories

00:00:39,030 --> 00:00:55,710
now okay so my section is the light

00:00:52,590 --> 00:00:59,160
machine support for GP always SLV and

00:00:55,710 --> 00:01:01,649
this is the basically approach of

00:00:59,160 --> 00:01:06,780
publishing from the Alibaba and AMD

00:01:01,649 --> 00:01:09,570
together and we have will have talking

00:01:06,780 --> 00:01:11,400
about two part and my part while

00:01:09,570 --> 00:01:13,860
meaningful call focused on the

00:01:11,400 --> 00:01:16,110
hypervisor and the coupons and the

00:01:13,860 --> 00:01:18,240
jewelry from AMD the edge temperature

00:01:16,110 --> 00:01:20,070
from a NGO in Japan Russia introduction

00:01:18,240 --> 00:01:25,259
and more specifically to the cheapest

00:01:20,070 --> 00:01:27,600
basic receives in the second part when

00:01:25,259 --> 00:01:29,790
we talking about the GPU of oil which is

00:01:27,600 --> 00:01:32,310
basically there are several solutions

00:01:29,790 --> 00:01:35,159
the first one we all know it is like the

00:01:32,310 --> 00:01:37,770
pass-through solutions and then it is a

00:01:35,159 --> 00:01:40,770
service rushes which is we are working

00:01:37,770 --> 00:01:44,130
on now with the MD and the sort of

00:01:40,770 --> 00:01:47,790
solution is called mediated apostle and

00:01:44,130 --> 00:01:51,270
we know Intel chip you and NVIDIA GPU

00:01:47,790 --> 00:01:54,110
actually is using this Russia and there

00:01:51,270 --> 00:01:59,040
is also other solutions like Vitello GPU

00:01:54,110 --> 00:02:03,960
our coder and also others but zoned out

00:01:59,040 --> 00:02:07,200
these other solutions is not production

00:02:03,960 --> 00:02:10,470
level or it's not commercialized in the

00:02:07,200 --> 00:02:14,000
data centers so the left of solutions

00:02:10,470 --> 00:02:16,450
/ / solution as always Russia and

00:02:14,000 --> 00:02:19,690
mediated possible solution this

00:02:16,450 --> 00:02:22,880
production level and commercialized and

00:02:19,690 --> 00:02:25,670
they actually are for GPU capabilities

00:02:22,880 --> 00:02:27,980
that means whenever they work road

00:02:25,670 --> 00:02:30,500
running in the native side you're able

00:02:27,980 --> 00:02:34,760
to run it in the guest so this is the

00:02:30,500 --> 00:02:37,790
for GPU capability and for futures we

00:02:34,760 --> 00:02:40,160
also are for the SLV solution and

00:02:37,790 --> 00:02:42,590
immediately the pursue solutions they

00:02:40,160 --> 00:02:44,420
actually have advanced futures for

00:02:42,590 --> 00:02:47,090
example you can support the live

00:02:44,420 --> 00:02:51,830
migrations so we are talking about the

00:02:47,090 --> 00:02:57,020
SLV like Morocco regime today with the

00:02:51,830 --> 00:02:59,540
second solution so I would put a motor

00:02:57,020 --> 00:03:02,390
on this side so obviously the the

00:02:59,540 --> 00:03:05,450
difference with the press true and sov

00:03:02,390 --> 00:03:09,080
they will say there is very similar on

00:03:05,450 --> 00:03:11,540
the cumulative view they both have PDF

00:03:09,080 --> 00:03:13,340
officiai device assigned to the guest

00:03:11,540 --> 00:03:15,110
the kill me actually did not know

00:03:13,340 --> 00:03:19,610
whether it is a pass through or it is

00:03:15,110 --> 00:03:21,890
SLV simple it is treated as the PCI

00:03:19,610 --> 00:03:24,709
device assignment the product but the

00:03:21,890 --> 00:03:27,230
difference is with the pass solutions

00:03:24,709 --> 00:03:30,860
there is no host raja in the host side

00:03:27,230 --> 00:03:33,110
so basically you don't know the host

00:03:30,860 --> 00:03:36,170
actually don't know when the GPO

00:03:33,110 --> 00:03:38,720
actually was doing you are not actually

00:03:36,170 --> 00:03:41,440
you are not even to know what's the

00:03:38,720 --> 00:03:46,850
temperature was the frame buffer usage

00:03:41,440 --> 00:03:48,470
the whole guest was yours so it carry

00:03:46,850 --> 00:03:51,230
the problem is the password solutions

00:03:48,470 --> 00:03:54,100
because he lack of the information so it

00:03:51,230 --> 00:03:57,049
is difficult to support sublime accuracy

00:03:54,100 --> 00:04:00,980
but that the six different change they

00:03:57,049 --> 00:04:05,570
in the service routines so the SLV there

00:04:00,980 --> 00:04:07,850
is a PF Java there is a V F model so the

00:04:05,570 --> 00:04:10,610
PF driver actually knows everything in

00:04:07,850 --> 00:04:13,100
the cast aside so he is able to collect

00:04:10,610 --> 00:04:16,160
information so what is it we are in the

00:04:13,100 --> 00:04:18,169
GPO side so it is possible to do the lab

00:04:16,160 --> 00:04:20,030
macro sees and we are talking about now

00:04:18,169 --> 00:04:24,590
and the hallway was supposes

00:04:20,030 --> 00:04:26,850
futures of course mediated pass through

00:04:24,590 --> 00:04:30,810
this is the framework alike

00:04:26,850 --> 00:04:33,300
two years or maybe three years ago this

00:04:30,810 --> 00:04:36,030
is the new framework and we know in her

00:04:33,300 --> 00:04:38,130
actually already supports GPO lab

00:04:36,030 --> 00:04:41,160
migrations with the mediator pass

00:04:38,130 --> 00:04:43,530
through two years ago and immediate I

00:04:41,160 --> 00:04:47,310
know there was a few days ago a sense

00:04:43,530 --> 00:04:48,360
also send out the patch to support the

00:04:47,310 --> 00:04:51,000
GPO not malicious

00:04:48,360 --> 00:04:54,780
so yeah it's co-state there is a post

00:04:51,000 --> 00:04:56,400
and II inter and a video we are going to

00:04:54,780 --> 00:05:03,540
support an iMac regime yeah this is a

00:04:56,400 --> 00:05:06,770
codices okay let's see the close look at

00:05:03,540 --> 00:05:12,330
the Asahi GPO lab microchips

00:05:06,770 --> 00:05:15,360
so there is a no fishy things here from

00:05:12,330 --> 00:05:18,530
the coupon of view and also from the

00:05:15,360 --> 00:05:23,070
hostile side there is a VSOP side model

00:05:18,530 --> 00:05:25,860
there is a the FIM base driver and the

00:05:23,070 --> 00:05:28,830
via ferrata well mmio Java also with the

00:05:25,860 --> 00:05:31,080
came in Java and it is very similar seen

00:05:28,830 --> 00:05:33,780
how pass rule works but the difference

00:05:31,080 --> 00:05:40,230
is there is a additional model McCrory

00:05:33,780 --> 00:05:43,610
into gene gim Tokyo so this is the SLV

00:05:40,230 --> 00:05:46,050
GPO host Java so what's inside this Java

00:05:43,610 --> 00:05:48,630
this channel this driver actually

00:05:46,050 --> 00:05:51,870
control in the house if you know sauce

00:05:48,630 --> 00:05:55,140
was petitioned how a GPO was time slice

00:05:51,870 --> 00:05:57,500
through the different of EFS so you all

00:05:55,140 --> 00:05:57,500
say are

00:05:57,570 --> 00:06:05,010
SLV GPIOs is something like the MDM DV

00:06:02,610 --> 00:06:08,730
frameworks it is also having the

00:06:05,010 --> 00:06:12,150
petitioned resource it also have some

00:06:08,730 --> 00:06:14,700
slight scheduling between the ETF's

00:06:12,150 --> 00:06:17,760
so what we are from the Casa point of

00:06:14,700 --> 00:06:21,270
view he will assign one of the gears one

00:06:17,760 --> 00:06:22,080
of the VF and then the Casa Java access

00:06:21,270 --> 00:06:24,900
to a memo

00:06:22,080 --> 00:06:28,680
accessed do bells access the frame

00:06:24,900 --> 00:06:31,620
buffers so they always a super sauce

00:06:28,680 --> 00:06:35,160
although was exposed of round from the

00:06:31,620 --> 00:06:38,700
VF interface the VF and the PF actually

00:06:35,160 --> 00:06:40,990
is the PCIe SLV interface but it did not

00:06:38,700 --> 00:06:44,100
define how the GPU will

00:06:40,990 --> 00:06:49,240
was visualized so this is the how

00:06:44,100 --> 00:06:51,190
jing-jin-ji did so the gingival you know

00:06:49,240 --> 00:06:53,740
it's just the introduction he controlled

00:06:51,190 --> 00:06:55,630
the internal Egyptian resource he

00:06:53,740 --> 00:07:00,430
controlled how deep you was visualized

00:06:55,630 --> 00:07:03,490
for the each of years so right now for

00:07:00,430 --> 00:07:05,500
the FLV GPUs there is a graphically

00:07:03,490 --> 00:07:10,270
inching support I think was partitioned

00:07:05,500 --> 00:07:12,670
by the ETF's and also there is video

00:07:10,270 --> 00:07:15,370
encoder engines which is also

00:07:12,670 --> 00:07:19,170
potentially into the match / VF and the

00:07:15,370 --> 00:07:19,170
dream Java controlling all these things

00:07:20,250 --> 00:07:28,630
the current status our project first of

00:07:27,250 --> 00:07:31,150
all first of all as I say it's the

00:07:28,630 --> 00:07:33,460
collaboration between Alibaba crowd for

00:07:31,150 --> 00:07:36,670
July switching and AMD modulation teams

00:07:33,460 --> 00:07:41,170
and actually this is still our product

00:07:36,670 --> 00:07:44,070
solution it is based on the mi-25 AMD

00:07:41,170 --> 00:07:47,170
GPU right now we already support

00:07:44,070 --> 00:07:50,680
rendering 3d in Randall II macro scenes

00:07:47,170 --> 00:07:53,020
and it is developing under the version

00:07:50,680 --> 00:07:57,460
to support the medium workload McRae

00:07:53,020 --> 00:08:00,520
she's Indian future we also support the

00:07:57,460 --> 00:08:03,280
VF with checkpoint support safe to t

00:08:00,520 --> 00:08:05,560
scandalous tours so our look at into the

00:08:03,280 --> 00:08:09,130
service tank time currently it's about

00:08:05,560 --> 00:08:15,400
500 milliseconds with one gig as graphic

00:08:09,130 --> 00:08:18,250
memory yeah it's 500 milliseconds

00:08:15,400 --> 00:08:20,950
D'Antoni is a little large but it is to

00:08:18,250 --> 00:08:23,170
put up codes and we breathe there is a

00:08:20,950 --> 00:08:23,500
still a lot of room to improve in the

00:08:23,170 --> 00:08:28,760
future

00:08:23,500 --> 00:08:30,090
I show some evaluation is loud the first

00:08:28,760 --> 00:08:32,740
[Music]

00:08:30,090 --> 00:08:34,780
the first thing is we have compared with

00:08:32,740 --> 00:08:38,760
the idle workload and also ways that you

00:08:34,780 --> 00:08:42,100
reach heaven which is keep the track GPU

00:08:38,760 --> 00:08:45,880
runs early in G and busy so we also

00:08:42,100 --> 00:08:49,210
compare with the smaller frame buffer

00:08:45,880 --> 00:08:52,960
size with the 512 bigger and also is the

00:08:49,210 --> 00:08:54,490
larger frame perfect slice it's around 1

00:08:52,960 --> 00:08:59,170
gig man

00:08:54,490 --> 00:09:02,200
so I would say with the bigger frame

00:08:59,170 --> 00:09:04,840
buffer size with the busier with a GPU

00:09:02,200 --> 00:09:08,170
so you have the larger service done time

00:09:04,840 --> 00:09:10,780
and where is the idol case it was just

00:09:08,170 --> 00:09:14,140
even into the idle even the smaller

00:09:10,780 --> 00:09:21,970
buffer size it's about 350 milliseconds

00:09:14,140 --> 00:09:24,700
every time time the here is the here is

00:09:21,970 --> 00:09:28,150
the cumulative so how we implement to

00:09:24,700 --> 00:09:31,030
support GPIO lamech machines with the

00:09:28,150 --> 00:09:32,890
service part the basic basically can we

00:09:31,030 --> 00:09:35,320
have several stage to choose to support

00:09:32,890 --> 00:09:40,750
an emigration first thing is the

00:09:35,320 --> 00:09:42,610
marketing star when we the back when you

00:09:40,750 --> 00:09:44,350
start it will send a global

00:09:42,610 --> 00:09:46,810
notifications so we get this

00:09:44,350 --> 00:09:50,280
notification and we tell the ginger ah

00:09:46,810 --> 00:09:53,920
Jimmy is the hostage or two to tell them

00:09:50,280 --> 00:09:57,700
now prepare the micro scenes we are

00:09:53,920 --> 00:09:59,380
going to do to democracy informally and

00:09:57,700 --> 00:10:02,320
then we go into the next stage is the

00:09:59,380 --> 00:10:06,070
Lok sing stage so in this stage there is

00:10:02,320 --> 00:10:09,490
a little literally want coffee and would

00:10:06,070 --> 00:10:12,640
crack it that'll take page and in this

00:10:09,490 --> 00:10:16,390
stage actually we we do the entire of

00:10:12,640 --> 00:10:19,270
the frame buffers memory copy to the

00:10:16,390 --> 00:10:21,700
tackiness site of course at this stage

00:10:19,270 --> 00:10:23,920
the CPU and the GPU is still running so

00:10:21,700 --> 00:10:26,170
it is possible that one once we copied

00:10:23,920 --> 00:10:28,930
the entire frame buffer size as obvious

00:10:26,170 --> 00:10:30,970
to our frame buffer was dirtied but is

00:10:28,930 --> 00:10:34,300
it ok and when we go into the next stage

00:10:30,970 --> 00:10:38,020
the sepia was passed and then we remove

00:10:34,300 --> 00:10:39,970
the chip your scheduler at this time GPO

00:10:38,020 --> 00:10:41,790
was stopped of course you need to wait

00:10:39,970 --> 00:10:44,740
the GPO to Jim she is current workload

00:10:41,790 --> 00:10:46,390
and then we will copy we were collecting

00:10:44,740 --> 00:10:50,620
the information which is dirty

00:10:46,390 --> 00:10:52,780
in post the frame buffer size and also

00:10:50,620 --> 00:10:55,930
because the GPU will access to the

00:10:52,780 --> 00:10:59,170
system memory and also the free buffers

00:10:55,930 --> 00:11:01,900
so what were cracking these dirty pages

00:10:59,170 --> 00:11:04,600
and copy to the tacit aside that so

00:11:01,900 --> 00:11:06,130
after that everything is ready so well

00:11:04,600 --> 00:11:07,960
gets the notification to the tackiness

00:11:06,130 --> 00:11:10,270
side so you get everything

00:11:07,960 --> 00:11:15,600
so you're all ready to reschedule in the

00:11:10,270 --> 00:11:15,600
GP and puts the VMS restart

00:11:17,460 --> 00:11:23,620
okay so what's the challenges we have

00:11:19,899 --> 00:11:25,660
the first thing is when we do the lab

00:11:23,620 --> 00:11:27,370
machines service so there is a true

00:11:25,660 --> 00:11:30,399
processes while you decide to you

00:11:27,370 --> 00:11:33,339
another is GPU so the first question is

00:11:30,399 --> 00:11:36,220
shall we stop a CPU first or shall we

00:11:33,339 --> 00:11:41,050
stop the GPU first the problem here is

00:11:36,220 --> 00:11:44,529
the answer is you can do either way so

00:11:41,050 --> 00:11:46,540
if you stop the gpo first GPU halwa

00:11:44,529 --> 00:11:49,510
remove the scheduling from the

00:11:46,540 --> 00:11:51,760
scheduling the problem here is Scipio

00:11:49,510 --> 00:11:53,620
was still runny and he he was still

00:11:51,760 --> 00:11:56,230
pushing the the context of the DMA

00:11:53,620 --> 00:11:57,820
request to the Java in West Java so the

00:11:56,230 --> 00:12:01,589
device so that the immediate cuts will

00:11:57,820 --> 00:12:03,970
accumulate but even this time I mean the

00:12:01,589 --> 00:12:06,339
accumulator more and more and even it

00:12:03,970 --> 00:12:08,170
exists the value of for example 2

00:12:06,339 --> 00:12:10,000
seconds so it is possible when we

00:12:08,170 --> 00:12:13,029
Margaret is VM to the tackle aside

00:12:10,000 --> 00:12:16,360
attacking the world be at idea tedium is

00:12:13,029 --> 00:12:18,400
that time out detection recovery so

00:12:16,360 --> 00:12:21,550
under the windows it's possible that it

00:12:18,400 --> 00:12:24,100
will crash the VM so our solution is the

00:12:21,550 --> 00:12:26,640
willow stops the gpo first sorry I will

00:12:24,100 --> 00:12:29,380
stop the city of first and then the GPU

00:12:26,640 --> 00:12:32,140
but at this case you will stop the city

00:12:29,380 --> 00:12:34,570
of first then the GT was still run in

00:12:32,140 --> 00:12:36,520
the DME and sometimes you need to wait

00:12:34,570 --> 00:12:39,190
that you mean to complete and it's in

00:12:36,520 --> 00:12:46,089
lecture sometimes it's like a 100

00:12:39,190 --> 00:12:48,100
milliseconds and so you know this once

00:12:46,089 --> 00:12:50,620
the CPU stopped the simulator on time is

00:12:48,100 --> 00:12:53,500
very critical so at this time so we will

00:12:50,620 --> 00:12:56,290
actually perhaps in the back row so this

00:12:53,500 --> 00:12:59,890
is how our journeys team were working on

00:12:56,290 --> 00:13:02,079
this it is working on this and look at

00:12:59,890 --> 00:13:05,589
me the second challenger here is the

00:13:02,079 --> 00:13:07,329
memory checking so we know when we do

00:13:05,589 --> 00:13:10,000
the lab macro issues the first thing is

00:13:07,329 --> 00:13:12,550
how to check the dirty memories so the

00:13:10,000 --> 00:13:15,579
here the dirty memory is from the GPU

00:13:12,550 --> 00:13:19,570
side so GPU access the frame buffer on

00:13:15,579 --> 00:13:21,580
GP also access the system memory so this

00:13:19,570 --> 00:13:25,240
is so here is that the problem is how

00:13:21,580 --> 00:13:27,400
geo-tracking these memories fortunately

00:13:25,240 --> 00:13:32,800
we already support we already resolve

00:13:27,400 --> 00:13:36,120
this and then the book of the perhaps I

00:13:32,800 --> 00:13:38,680
just I I just already talked about and

00:13:36,120 --> 00:13:40,330
so when we start with a CPU and then GPO

00:13:38,680 --> 00:13:42,520
is still running and you kind of wait

00:13:40,330 --> 00:13:44,680
and you need to prep in the workload and

00:13:42,520 --> 00:13:48,100
that thing is the GPO internal status

00:13:44,680 --> 00:13:51,550
civil analyst or you know GPU is very

00:13:48,100 --> 00:13:56,950
complex there is page tables there is

00:13:51,550 --> 00:13:59,740
internal mmm you interrupt status and

00:13:56,950 --> 00:14:05,560
also digest informations and all things

00:13:59,740 --> 00:14:07,690
need to save and restore us and jury

00:14:05,560 --> 00:14:12,160
front am Devo talking more about this

00:14:07,690 --> 00:14:16,170
and yeah this is a pretty pretty much

00:14:12,160 --> 00:14:16,170
from my point that's welcome Jerry

00:14:24,460 --> 00:14:30,520
so I'm from AMD Jaichand working on the

00:14:27,910 --> 00:14:36,000
GPU virtualization for a few years so

00:14:30,520 --> 00:14:39,100
today I'm going to introduce the top the

00:14:36,000 --> 00:14:42,400
the lab my question that we did on the

00:14:39,100 --> 00:14:43,930
SLV here is some backgrounds I will

00:14:42,400 --> 00:14:45,910
start with some background introductions

00:14:43,930 --> 00:14:48,430
before I jump into the lamina equation

00:14:45,910 --> 00:14:51,520
so you might or may not know that about

00:14:48,430 --> 00:14:54,340
the SRB so this is the hierarchy of the

00:14:51,520 --> 00:14:55,990
SR we defined the ballot psi sip since

00:14:54,340 --> 00:14:59,470
I'm running out of time so I will just

00:14:55,990 --> 00:15:02,890
skip this so the end point is that we

00:14:59,470 --> 00:15:06,340
have devices that connect to the power

00:15:02,890 --> 00:15:08,740
connector loop or bridges so each one of

00:15:06,340 --> 00:15:11,590
the function you are going to enable the

00:15:08,740 --> 00:15:15,790
SLV with a PF function we multiple via

00:15:11,590 --> 00:15:18,880
functions on bus so with the SLV we have

00:15:15,790 --> 00:15:22,690
some advantage over the solutions that

00:15:18,880 --> 00:15:24,190
we use the pea sized extender and the

00:15:22,690 --> 00:15:27,750
lightweight vendor-specific

00:15:24,190 --> 00:15:30,670
drivers that shall just mention is the

00:15:27,750 --> 00:15:34,570
the gym driver will run in the host and

00:15:30,670 --> 00:15:35,310
the VM of course they use and modify the

00:15:34,570 --> 00:15:37,800
OS

00:15:35,310 --> 00:15:39,750
and applications and it can also use our

00:15:37,800 --> 00:15:43,140
standard GPU drivers in the case of the

00:15:39,750 --> 00:15:44,760
game the support of the host of VM is

00:15:43,140 --> 00:15:48,360
would be a pre-arranged version that

00:15:44,760 --> 00:15:51,210
managing the partition in a guest right

00:15:48,360 --> 00:15:53,430
even low in the from the total

00:15:51,210 --> 00:15:55,470
generation we are saying that we support

00:15:53,430 --> 00:15:59,310
up to 16 virtual functions with one

00:15:55,470 --> 00:16:04,080
physical function on a single GPU and if

00:15:59,310 --> 00:16:06,600
we have multiple sorry so when one GPU

00:16:04,080 --> 00:16:09,600
can support of course sixteen gets to be

00:16:06,600 --> 00:16:12,029
in mo GPU is a problematic more guest

00:16:09,600 --> 00:16:16,050
and in the guest you have a whole set of

00:16:12,029 --> 00:16:20,040
a GPU that the feature set of a computer

00:16:16,050 --> 00:16:22,050
a sort of the GPU like directs opengl

00:16:20,040 --> 00:16:25,020
open still welcome and welcome

00:16:22,050 --> 00:16:27,900
and it also support the h.264 and its

00:16:25,020 --> 00:16:30,720
EVC encoding the performance wise the

00:16:27,900 --> 00:16:33,750
kids that driver actually interact with

00:16:30,720 --> 00:16:37,350
the GPU directly without any software

00:16:33,750 --> 00:16:39,210
layer and interactions so all of those

00:16:37,350 --> 00:16:41,640
sort where there are copying overhead

00:16:39,210 --> 00:16:45,270
that we encounter in a traditional

00:16:41,640 --> 00:16:47,970
virtualization solutions so here's a

00:16:45,270 --> 00:16:51,720
diagram about a high view on the k vm

00:16:47,970 --> 00:16:54,570
the SLV solutions with the KMD with the

00:16:51,720 --> 00:16:57,930
AMD that on a host we have the GPU

00:16:54,570 --> 00:16:59,930
drivers also it taught with the PFD p

00:16:57,930 --> 00:17:03,810
second deck space it's in the resources

00:16:59,930 --> 00:17:07,770
on hvf is it shows up as in the video of

00:17:03,810 --> 00:17:10,290
the f & GPU passes GPU devices and cased

00:17:07,770 --> 00:17:14,699
and underneath multiple of the engines

00:17:10,290 --> 00:17:17,640
that the valving scheduler as Sean

00:17:14,699 --> 00:17:20,850
mentioned that we have the time slides

00:17:17,640 --> 00:17:24,360
that partition the for each engines they

00:17:20,850 --> 00:17:27,209
can switch individually by himself so in

00:17:24,360 --> 00:17:30,600
the driver stack the PF driver actually

00:17:27,209 --> 00:17:33,120
the dueling initializations the two agro

00:17:30,600 --> 00:17:35,700
detections and also do the reset if this

00:17:33,120 --> 00:17:38,310
error was founded and the live migration

00:17:35,700 --> 00:17:40,350
operations of a course and only catch

00:17:38,310 --> 00:17:43,290
the driver I think we already mentioned

00:17:40,350 --> 00:17:47,550
a lot of lists like is independently on

00:17:43,290 --> 00:17:48,840
the case we we provide each guest HTTP

00:17:47,550 --> 00:17:51,929
you will independent

00:17:48,840 --> 00:17:54,570
buffers intro vectors dedication buffers

00:17:51,929 --> 00:17:57,900
the doorbell resources in GPU State and

00:17:54,570 --> 00:18:01,110
GPU VMS the integrity P you had were

00:17:57,900 --> 00:18:03,480
throughly VF GPU resources the kids

00:18:01,110 --> 00:18:05,760
driver actually is unaware of the war

00:18:03,480 --> 00:18:08,100
switches that why you switched from one

00:18:05,760 --> 00:18:12,179
DF to analogy if all we call context

00:18:08,100 --> 00:18:15,570
switches all of those ApS that you saw

00:18:12,179 --> 00:18:17,490
or you encountered only pair metal OS

00:18:15,570 --> 00:18:20,669
you're going to see exactly the same on

00:18:17,490 --> 00:18:23,820
a kissed alpha load Wiimote we are going

00:18:20,669 --> 00:18:28,020
through the either windows api vp or

00:18:23,820 --> 00:18:30,960
horizon view 33 or h th 3 and this is

00:18:28,020 --> 00:18:34,710
the the background that we are going to

00:18:30,960 --> 00:18:36,659
need when we jump into the migration so

00:18:34,710 --> 00:18:39,149
normally when you have a password

00:18:36,659 --> 00:18:41,820
devices that we talk about a lot of my

00:18:39,149 --> 00:18:44,039
lab migration solutions today and

00:18:41,820 --> 00:18:46,620
yesterday right so normally when you

00:18:44,039 --> 00:18:48,210
have a normal path to devices the

00:18:46,620 --> 00:18:50,700
hypervisor normally has some

00:18:48,210 --> 00:18:52,470
difficulties either you have to endure

00:18:50,700 --> 00:18:54,270
or implement something special in the

00:18:52,470 --> 00:18:57,480
case of driver like you have

00:18:54,270 --> 00:19:00,029
difficulties say stop the devices ok the

00:18:57,480 --> 00:19:02,429
resources device that the devices state

00:19:00,029 --> 00:19:05,190
you copy the resources static a memory

00:19:02,429 --> 00:19:07,080
over or you restore already initialize

00:19:05,190 --> 00:19:10,409
the target devices with the content

00:19:07,080 --> 00:19:12,330
after the migration and also have some

00:19:10,409 --> 00:19:16,559
difficulties say you have to restore the

00:19:12,330 --> 00:19:18,690
technical frame buffer or the notify it

00:19:16,559 --> 00:19:21,409
gets driver saying you'd perform all of

00:19:18,690 --> 00:19:24,750
those operations to save restore all you

00:19:21,409 --> 00:19:28,049
informations over but we exile v right

00:19:24,750 --> 00:19:29,640
and on PF sight it's able to assess to

00:19:28,049 --> 00:19:31,950
everything actually you can take the

00:19:29,640 --> 00:19:35,549
snapshot of the frame buffer techniques

00:19:31,950 --> 00:19:37,679
ratio of GPU state fall of EF you can

00:19:35,549 --> 00:19:39,990
stop we can stop or start of the F

00:19:37,679 --> 00:19:42,510
running I can also reach dollars in a

00:19:39,990 --> 00:19:45,090
shop a target frame buffer content or

00:19:42,510 --> 00:19:47,610
restore the target VF GPUs context and

00:19:45,090 --> 00:19:50,370
in the guest is the same Li migrate of

00:19:47,610 --> 00:19:52,919
3d rendering so all those preempted that

00:19:50,370 --> 00:19:54,630
at migration time it command was not

00:19:52,919 --> 00:19:57,809
finished and it stopped in the middle

00:19:54,630 --> 00:20:00,149
after the migration I can resume from

00:19:57,809 --> 00:20:02,340
the point where you stopped it and gone

00:20:00,149 --> 00:20:04,440
forward and you can suspend the end

00:20:02,340 --> 00:20:07,020
trapped and while coming back we're

00:20:04,440 --> 00:20:11,360
going to resume as well so it seamlessly

00:20:07,020 --> 00:20:13,650
like you just pause by a few hundred

00:20:11,360 --> 00:20:16,470
microseconds or maybe later

00:20:13,650 --> 00:20:18,929
and then you'll continue some of the ebb

00:20:16,470 --> 00:20:23,850
migration right on so the GPU which

00:20:18,929 --> 00:20:25,710
driver we can the TP with driver we can

00:20:23,850 --> 00:20:27,900
do a lot of stuff like I just mentioned

00:20:25,710 --> 00:20:29,820
I you schedule the times light you can

00:20:27,900 --> 00:20:32,100
stop it or you copy the frame buffer or

00:20:29,820 --> 00:20:37,320
system memories overall in and local and

00:20:32,100 --> 00:20:39,270
you also copy the VF CPU so on a target

00:20:37,320 --> 00:20:41,330
on the gym driver it will restore and

00:20:39,270 --> 00:20:44,700
copy restore all of those are memories

00:20:41,330 --> 00:20:46,890
non-local local and the GPU States just

00:20:44,700 --> 00:20:49,590
like I stay more dead on the diagram

00:20:46,890 --> 00:20:51,240
that the via my gracious we if you don't

00:20:49,590 --> 00:20:53,100
need necessarily to migrate through the

00:20:51,240 --> 00:20:56,370
exactly same V of numbers you can

00:20:53,100 --> 00:21:00,029
migrate differently and the GPU state

00:20:56,370 --> 00:21:02,730
what a VF has is just part of the GPU a

00:21:00,029 --> 00:21:05,820
state so you migrate the partial of a

00:21:02,730 --> 00:21:08,850
state of you GPU UV if only from source

00:21:05,820 --> 00:21:10,470
to the destination so after my equation

00:21:08,850 --> 00:21:12,480
you don't need to do linearization

00:21:10,470 --> 00:21:15,090
because the status was or the migrated

00:21:12,480 --> 00:21:17,490
over the pre aimed command is continue

00:21:15,090 --> 00:21:19,020
to run it's good that I don't need to

00:21:17,490 --> 00:21:21,600
show that mo now we are this show the

00:21:19,020 --> 00:21:23,520
demo at the beginning so at the

00:21:21,600 --> 00:21:26,039
beginning when we show the demo right

00:21:23,520 --> 00:21:29,190
you saw that device was that the screen

00:21:26,039 --> 00:21:30,990
was paused for a little while unless the

00:21:29,190 --> 00:21:34,440
down time and we know that we have

00:21:30,990 --> 00:21:36,750
challenges over there so a few

00:21:34,440 --> 00:21:39,500
challenges from GPUs point of view we

00:21:36,750 --> 00:21:42,330
have actually we have three right so

00:21:39,500 --> 00:21:43,169
what first one is the 30-page friend up

00:21:42,330 --> 00:21:46,529
a 30-page

00:21:43,169 --> 00:21:48,750
at this time I think just between those

00:21:46,529 --> 00:21:51,240
two sequential Curie's we should know

00:21:48,750 --> 00:21:53,520
that what page was dirty and fortunately

00:21:51,240 --> 00:21:55,620
our our heart will actually help these

00:21:53,520 --> 00:21:58,140
solutions but we in the prototype we

00:21:55,620 --> 00:22:00,360
haven't implemented solution yet and

00:21:58,140 --> 00:22:02,760
then there's a nano core memory dirty

00:22:00,360 --> 00:22:05,970
pages I think we talked about a lot of

00:22:02,760 --> 00:22:08,490
this right normally I will checking's I

00:22:05,970 --> 00:22:11,220
think this one that current CPU doesn't

00:22:08,490 --> 00:22:13,860
support and I'm not sure sure that our

00:22:11,220 --> 00:22:15,789
next generation of CPU from AMD I wrong

00:22:13,860 --> 00:22:18,119
we are good at

00:22:15,789 --> 00:22:20,320
those days chuckling so I knew so little

00:22:18,119 --> 00:22:22,179
you're going to see that we have a

00:22:20,320 --> 00:22:25,779
driver we know that what's dirty from

00:22:22,179 --> 00:22:27,729
the GPU that we are running on and we

00:22:25,779 --> 00:22:29,440
also know that there's some qemu

00:22:27,729 --> 00:22:31,570
Tracking's I think we talked about this

00:22:29,440 --> 00:22:33,429
we I don't want to repeat that and then

00:22:31,570 --> 00:22:36,399
there's another solution that we can go

00:22:33,429 --> 00:22:39,460
through the GPUs at GPU VM we know that

00:22:36,399 --> 00:22:41,409
GPU VM has the information that which

00:22:39,460 --> 00:22:43,330
page we assess in the system memory we

00:22:41,409 --> 00:22:45,580
can go through that and take time but it

00:22:43,330 --> 00:22:47,350
takes time it would require some

00:22:45,580 --> 00:22:51,119
additional shade of hedges but this is

00:22:47,350 --> 00:22:54,099
also doable that the third one is the

00:22:51,119 --> 00:22:56,080
GPU compatibilities like different

00:22:54,099 --> 00:22:58,899
generations you might not be able to

00:22:56,080 --> 00:23:01,149
migrate from bigger tank - we have 20 or

00:22:58,899 --> 00:23:04,029
something named drive and introduced

00:23:01,149 --> 00:23:06,009
they later or if there's a formula

00:23:04,029 --> 00:23:06,999
difference you might not be able to do

00:23:06,009 --> 00:23:09,519
it

00:23:06,999 --> 00:23:11,619
some GPU graphics driver version you

00:23:09,519 --> 00:23:14,889
might encounter let those handlings are

00:23:11,619 --> 00:23:17,499
different on the same GPU so we provide

00:23:14,889 --> 00:23:20,259
certain api's 40 mu or hypervisor

00:23:17,499 --> 00:23:23,200
applications to check whether the test

00:23:20,259 --> 00:23:24,970
and sauce are the same if the combo is

00:23:23,200 --> 00:23:29,139
the compatible then you can go ahead

00:23:24,970 --> 00:23:33,070
with the migrations so this is roughly

00:23:29,139 --> 00:23:35,499
what we have about by migration but it's

00:23:33,070 --> 00:23:38,349
a summary I know we're running out of

00:23:35,499 --> 00:23:40,989
time but with summaries that the SLV

00:23:38,349 --> 00:23:43,059
virtualization has some benefits here is

00:23:40,989 --> 00:23:45,820
a piece that combines so in negative

00:23:43,059 --> 00:23:48,970
fixed enteric a VM architect you don't

00:23:45,820 --> 00:23:52,720
need to do anything extra in its enhance

00:23:48,970 --> 00:23:54,970
the security so Amy's GPU has Hardware

00:23:52,720 --> 00:23:57,340
protections for the GPU state in the

00:23:54,970 --> 00:24:00,820
frame buffer isolations so none of those

00:23:57,340 --> 00:24:04,090
VF 1vf can assess reality at all either

00:24:00,820 --> 00:24:07,749
PFS but PF is able to control all over

00:24:04,090 --> 00:24:10,929
VF status and it's a load it has a low

00:24:07,749 --> 00:24:13,720
of TLC so the total cost of ownership is

00:24:10,929 --> 00:24:16,179
pretty low because the GPU hardware the

00:24:13,720 --> 00:24:19,450
sources can be partitioned in any way

00:24:16,179 --> 00:24:22,450
you you like to have to have and it also

00:24:19,450 --> 00:24:25,239
is a live migration friendly so we have

00:24:22,450 --> 00:24:28,450
api's on host for qmu to manage all

00:24:25,239 --> 00:24:29,650
night migrations on the cases that you

00:24:28,450 --> 00:24:31,840
will see that these akan

00:24:29,650 --> 00:24:35,440
compute of graphic features all

00:24:31,840 --> 00:24:39,910
available on any guest of the MS so this

00:24:35,440 --> 00:24:43,150
is I hopefully again went over time okay

00:24:39,910 --> 00:24:49,590
so this is what I have for the alumni

00:24:43,150 --> 00:24:49,590
equation on GPU VF any questions for us

00:24:57,720 --> 00:25:06,700
since the we have a GPU snapshot will

00:25:03,250 --> 00:25:10,090
copy to system memory whether or not we

00:25:06,700 --> 00:25:13,390
should reader the system memory you know

00:25:10,090 --> 00:25:19,380
the ones for this stuff oh I will let

00:25:13,390 --> 00:25:22,410
Xiao to answer these questions reserve

00:25:19,380 --> 00:25:25,420
these over the memory advance and

00:25:22,410 --> 00:25:28,780
actually you can do this for

00:25:25,420 --> 00:25:31,420
performances regarding it and you can

00:25:28,780 --> 00:25:34,360
also dynamically allocate because we can

00:25:31,420 --> 00:25:36,910
charge for this and buffer literally and

00:25:34,360 --> 00:25:39,490
you don't need to the FK the whole the

00:25:36,910 --> 00:25:42,520
whole ever be sighs okay in the system

00:25:39,490 --> 00:25:45,220
memory sight actually we have an API for

00:25:42,520 --> 00:25:48,010
queuing little Curie that what memo is

00:25:45,220 --> 00:25:50,320
dirty so in the period of time I'm going

00:25:48,010 --> 00:25:52,600
to tell you that I need how many pages

00:25:50,320 --> 00:25:55,360
you can tell it or kill it you don't

00:25:52,600 --> 00:25:58,360
need to locate it as far as that and

00:25:55,360 --> 00:25:59,740
even go through a few cycles I don't

00:25:58,360 --> 00:26:05,610
need to copy in one chunk

00:25:59,740 --> 00:26:05,610
I really thank you

00:26:08,290 --> 00:26:11,580
actually it can approach me

00:26:13,460 --> 00:26:20,230
you

00:26:14,360 --> 00:26:20,230

YouTube URL: https://www.youtube.com/watch?v=_tB3EbFDcRQ


