Title: Torwards a More Scalable KVM Hypervisor by Wanpeng Li
Publication date: 2018-11-14
Playlist: KVM Forum 2018
Description: 
	Torwards a more scalable KVM hypervisor(Wanpeng Li) - The kvm hypervisor is at the core of cloud computing, Virtual Machine based approaches to workload consolidation, as seen in IaaS cloud as well as datacenter platforms, have long had to contend with performance degradation caused by synchronization primitives inside the guest environments. These primitives can be affected by virtual CPU preemptions by the host scheduler that can introduce delays that are orders of magnitude longer than those primitives were designed for. In this presentation, Wanpeng Li will introduce Paravirtual TLB Shootdown which can mitigate TLB Shootdown Preemption issue. In addition, he will also introduce Exitless IPIs to scale large VMs, and disable mwait/hlt/pause vmexits to improve latency for dedicated instances.

---

Wanpeng Li
Linux Kernel Contributor
Tencent Cloud

Wanpeng Li is a 6 years experienced Linux kernel/virtualization developer who works in Tencent Cloud currently. He mainly focus on KVM, scheduler and memory management. In KVM, he contributes a lot of features to improve performance and stability. He has experience worked in IBM LTC kernel team and INTEL OTC virtualization team before.
Captions: 
	00:00:01,040 --> 00:00:12,150
[Music]

00:00:08,599 --> 00:00:15,450
I work thought heads in the cloud

00:00:12,150 --> 00:00:20,220
this is today's agenda I will introduce

00:00:15,450 --> 00:00:23,699
the payroll PVDF issue down to scale

00:00:20,220 --> 00:00:26,910
large to skill high ratio or workmates

00:00:23,699 --> 00:00:31,740
the second one is actually the last api

00:00:26,910 --> 00:00:35,700
to skill large vm's and the third one is

00:00:31,740 --> 00:00:38,610
to disable em wait how to our post

00:00:35,700 --> 00:00:40,969
we are instructions we are Maxis to

00:00:38,610 --> 00:00:46,620
improve latency for the dedicated

00:00:40,969 --> 00:00:52,170
instance all these features are upstream

00:00:46,620 --> 00:00:54,750
by merest year here is the background of

00:00:52,170 --> 00:00:56,879
the TLB food and preemption while

00:00:54,750 --> 00:01:00,300
executing inside a virtual machine

00:00:56,879 --> 00:01:03,750
environment OS level synchronization

00:01:00,300 --> 00:01:07,560
primitives such as a locking TLB shootin

00:01:03,750 --> 00:01:09,810
and RC you are faced with significant

00:01:07,560 --> 00:01:12,360
challenges due to the scheduling

00:01:09,810 --> 00:01:15,630
behavior of the underlying host the

00:01:12,360 --> 00:01:19,320
scheduler operations that are ensured to

00:01:15,630 --> 00:01:22,280
last only a short amount of time on bare

00:01:19,320 --> 00:01:24,600
mental Halloween are capable of taking

00:01:22,280 --> 00:01:28,860
considerably longer we're running

00:01:24,600 --> 00:01:31,350
virtualized a TLB is a catch of

00:01:28,860 --> 00:01:32,909
translation from memory virtual address

00:01:31,350 --> 00:01:36,210
to physical address

00:01:32,909 --> 00:01:39,060
well CPU changes virtual to physical

00:01:36,210 --> 00:01:42,420
mapping of our dress it needs to

00:01:39,060 --> 00:01:47,460
invalidate other CPUs still mapping in

00:01:42,420 --> 00:01:51,180
their respect to caches this process is

00:01:47,460 --> 00:01:54,030
called shall be true down modern

00:01:51,180 --> 00:01:57,420
operating systems considered here we

00:01:54,030 --> 00:02:02,149
shoot down operations to be performance

00:01:57,420 --> 00:02:05,780
critical and so optimized them to exist

00:02:02,149 --> 00:02:09,170
exhibit very low latency the

00:02:05,780 --> 00:02:12,060
implementation of resolutions is

00:02:09,170 --> 00:02:13,770
therefore architected to ensure that

00:02:12,060 --> 00:02:15,960
true dance can be

00:02:13,770 --> 00:02:21,840
completed with very low latencies

00:02:15,960 --> 00:02:25,710
through the use of IP IP signal remote

00:02:21,840 --> 00:02:29,250
ELP flash does a busy wait which is a

00:02:25,710 --> 00:02:32,580
fine environmental scenario but within

00:02:29,250 --> 00:02:36,660
the guests the vcp you may have been

00:02:32,580 --> 00:02:40,800
printed or plugged in this scenario the

00:02:36,660 --> 00:02:44,250
initiators if you would and out be the

00:02:40,800 --> 00:02:48,210
wait for a long enough time it also

00:02:44,250 --> 00:02:51,480
consumes CPU unnecessarily twig up the

00:02:48,210 --> 00:02:53,130
target of the shrewdest on the time

00:02:51,480 --> 00:02:55,440
between the preemption and the

00:02:53,130 --> 00:03:00,060
rescheduling of a remote haggis recipe

00:02:55,440 --> 00:03:02,760
is often orders of magnitude larger than

00:03:00,060 --> 00:03:05,970
the latency that helped me through down

00:03:02,760 --> 00:03:09,750
operations were didn't fall this is the

00:03:05,970 --> 00:03:11,970
CDF of the do benchmark the TLB food

00:03:09,750 --> 00:03:16,020
emergency we have order

00:03:11,970 --> 00:03:21,780
when we am which means it is not over

00:03:16,020 --> 00:03:26,750
commit to VM it is the over commit ratio

00:03:21,780 --> 00:03:33,150
is too weak under the latency increase

00:03:26,750 --> 00:03:36,030
in several orders of magnitude the pivot

00:03:33,150 --> 00:03:40,020
shall be issued down does not wait for

00:03:36,030 --> 00:03:45,060
recipes that are sleeping instead KVM

00:03:40,020 --> 00:03:48,660
will flash the TLB as soon as the base

00:03:45,060 --> 00:03:51,120
abuse start raining again the

00:03:48,660 --> 00:03:54,450
improvement is clearly visible when the

00:03:51,120 --> 00:03:58,260
horse is over committed in this case the

00:03:54,450 --> 00:04:01,290
PV TLB flash prevents printed we sip you

00:03:58,260 --> 00:04:06,930
from stealing pressures execution time

00:04:01,290 --> 00:04:09,750
from the raining once Jerid to catch

00:04:06,930 --> 00:04:12,959
translation information we are obg is in

00:04:09,750 --> 00:04:16,560
use one is gas the physical mapping it

00:04:12,959 --> 00:04:19,530
is just a physical to host the physical

00:04:16,560 --> 00:04:21,570
mapping the other one is combine mapping

00:04:19,530 --> 00:04:24,540
it is gas the virtual the hostel

00:04:21,570 --> 00:04:26,650
physical mapping operation that are

00:04:24,540 --> 00:04:30,340
architectural e invalid

00:04:26,650 --> 00:04:33,220
did entries in that shall be for example

00:04:30,340 --> 00:04:36,100
through and we LPG instruction will

00:04:33,220 --> 00:04:38,910
invalid combined mapping we are AP teens

00:04:36,100 --> 00:04:44,080
in use we are is a virtualization

00:04:38,910 --> 00:04:47,680
instructions will be PID it also invalid

00:04:44,080 --> 00:04:54,639
combined mapping where EPT is in use so

00:04:47,680 --> 00:04:56,949
the so the effect between cast executed

00:04:54,639 --> 00:05:00,610
and we RPG instruction to invalidate

00:04:56,949 --> 00:05:07,210
that shall be in the same as KVM use and

00:05:00,610 --> 00:05:10,979
weave a PID to invalid the Shelby let's

00:05:07,210 --> 00:05:13,750
see that implementation details I

00:05:10,979 --> 00:05:18,220
introduced a given recipe you a

00:05:13,750 --> 00:05:21,520
primitive flag is flag is you to mark

00:05:18,220 --> 00:05:27,940
whether or not the recipe is active or

00:05:21,520 --> 00:05:31,389
inactive I use our shared memory between

00:05:27,940 --> 00:05:35,130
the shared memory is between the guest

00:05:31,389 --> 00:05:38,860
and host the host record whether

00:05:35,130 --> 00:05:43,440
recalled the flag the recipe primitive

00:05:38,860 --> 00:05:47,020
flag when the CPU is printed on the host

00:05:43,440 --> 00:05:52,720
the flag will be clear before the next

00:05:47,020 --> 00:05:55,539
entry of the V CPU so its release flag

00:05:52,720 --> 00:05:56,740
the in the cast we can determine whether

00:05:55,539 --> 00:06:02,500
or not the target

00:05:56,740 --> 00:06:07,750
P CPU is active or printed or ahead of

00:06:02,500 --> 00:06:11,889
flash therapy other who to the PMMA oops

00:06:07,750 --> 00:06:15,550
oops it will call IP is for the act will

00:06:11,889 --> 00:06:19,960
be used directly as before but further

00:06:15,550 --> 00:06:23,889
inactive base abuse it will record

00:06:19,960 --> 00:06:28,889
another flag Kevin with your Flash TLB

00:06:23,889 --> 00:06:33,160
flag which means the recipe you is

00:06:28,889 --> 00:06:36,820
implemented and we need to another TLB

00:06:33,160 --> 00:06:39,520
flowers should be father of vehement 3qm

00:06:36,820 --> 00:06:42,789
we adjusted to the flash

00:06:39,520 --> 00:06:45,460
we're a maybe PID on the guests that we

00:06:42,789 --> 00:06:48,520
have the next time the way Scipio is

00:06:45,460 --> 00:06:54,190
scheduled if given Mississippi Flood

00:06:48,520 --> 00:06:57,810
shall be flag instead so we do a delay

00:06:54,190 --> 00:07:03,550
TOB a delay that shall be first here

00:06:57,810 --> 00:07:09,970
because the we see at least as long as

00:07:03,550 --> 00:07:13,270
the recipe is not a VM entry again the

00:07:09,970 --> 00:07:18,870
recipe we not consume the still TLB

00:07:13,270 --> 00:07:22,120
mapping so it is stiff to flash the TLB

00:07:18,870 --> 00:07:26,400
by the heavy weather the next time the

00:07:22,120 --> 00:07:30,340
vcp before the next time the vm entry i

00:07:26,400 --> 00:07:38,169
tested the performance on one scaling

00:07:30,340 --> 00:07:43,570
store it has 64 logical CPUs and the VMA

00:07:38,169 --> 00:07:46,030
it is also 64 be CPUs I will try one VM

00:07:43,570 --> 00:07:51,550
which means it is not overcoming

00:07:46,030 --> 00:07:56,110
committed to VM Australian Trivium the

00:07:51,550 --> 00:07:59,849
overcommitted ratio is Swiss and is the

00:07:56,110 --> 00:08:04,360
community ratio is acceptable on the

00:07:59,849 --> 00:08:08,139
public cloud the benchmark is a busy

00:08:04,360 --> 00:08:10,919
it is highly traded and has a large in

00:08:08,139 --> 00:08:14,590
memory work inside it will frequently

00:08:10,919 --> 00:08:19,349
allocate and de-allocate memory so a lot

00:08:14,590 --> 00:08:27,039
of TLB fool done here the result the

00:08:19,349 --> 00:08:29,979
blue his system is the vanilla km the

00:08:27,039 --> 00:08:35,110
orange one is with the pivot he'll be

00:08:29,979 --> 00:08:43,169
few down we have nerve about 2m scenario

00:08:35,110 --> 00:08:49,779
in each VM the performance drop by 49%

00:08:43,169 --> 00:08:52,900
for 3 vm in each VM the IBD score draw

00:08:49,779 --> 00:08:56,920
by 60 file

00:08:52,900 --> 00:09:01,180
percent and after the patch we can of

00:08:56,920 --> 00:09:06,610
the the obvious the performance

00:09:01,180 --> 00:09:08,920
improvement even if for the non over

00:09:06,610 --> 00:09:12,160
community case when we am we still can

00:09:08,920 --> 00:09:18,520
order a little performance improvement

00:09:12,160 --> 00:09:22,240
because the because the house appeal is

00:09:18,520 --> 00:09:26,800
not absolutely isolated as you know the

00:09:22,240 --> 00:09:31,120
Kamioka hats I was read and also hosts

00:09:26,800 --> 00:09:38,050
keeping processes which are running on

00:09:31,120 --> 00:09:42,700
the host as long as your is primitive we

00:09:38,050 --> 00:09:47,110
can get the benefit the second feature

00:09:42,700 --> 00:09:49,680
is actually the last IP is a peak a peak

00:09:47,110 --> 00:09:53,050
which is short for other ones

00:09:49,680 --> 00:09:56,200
programmable interrupt controller it has

00:09:53,050 --> 00:10:01,060
two mode why is a legacy if you as a

00:09:56,200 --> 00:10:04,450
peak mode the other is extended xep mode

00:10:01,060 --> 00:10:08,940
which is also called x2 epic mode the x2

00:10:04,450 --> 00:10:12,040
APO mode is really common in recent into

00:10:08,940 --> 00:10:19,810
generation so we just talked about x2 AP

00:10:12,040 --> 00:10:24,100
mode now the API the OS will write the

00:10:19,810 --> 00:10:26,860
ICR register to send IP is rarer to

00:10:24,100 --> 00:10:31,360
estaba mode to determine the API

00:10:26,860 --> 00:10:34,510
destination when is class mode it will

00:10:31,360 --> 00:10:38,080
the OS just need to write as they are

00:10:34,510 --> 00:10:42,160
register once then the CPU hardware will

00:10:38,080 --> 00:10:46,330
help to broadcast the IP eyes in release

00:10:42,160 --> 00:10:49,950
in your sub set of processors on the

00:10:46,330 --> 00:10:53,830
system bus the subsets a subset of

00:10:49,950 --> 00:10:58,240
processor is the cluster here the it is

00:10:53,830 --> 00:11:00,910
max 16 logical CPUs per cluster the

00:10:58,240 --> 00:11:04,329
other mode is physical mode which means

00:11:00,910 --> 00:11:05,950
the last need to write I see our

00:11:04,329 --> 00:11:08,680
register

00:11:05,950 --> 00:11:15,650
one by one

00:11:08,680 --> 00:11:17,990
currently most cloud providers justice

00:11:15,650 --> 00:11:22,420
support feeling Homo ergaster can just

00:11:17,990 --> 00:11:26,360
enter the physical mode and the and

00:11:22,420 --> 00:11:29,390
several years ago redhead guys push

00:11:26,360 --> 00:11:35,810
posted in her up the remaining patches

00:11:29,390 --> 00:11:40,510
to the VM mu inhuman then we can enter

00:11:35,810 --> 00:11:48,470
the classroom about many most of cloud

00:11:40,510 --> 00:11:55,280
providers have not enable wrists issue

00:11:48,470 --> 00:11:59,930
right I see are actually and the last

00:11:55,280 --> 00:12:02,800
presentation we already know like Google

00:11:59,930 --> 00:12:07,730
we have ones

00:12:02,800 --> 00:12:12,130
60v CPU VMs which means if one we

00:12:07,730 --> 00:12:13,370
receive you broadcast IP eyes to other

00:12:12,130 --> 00:12:17,690
159th

00:12:13,370 --> 00:12:23,890
receive use it will incur 115 IBM

00:12:17,690 --> 00:12:29,420
exceeds pattern on bear mental it is not

00:12:23,890 --> 00:12:33,790
performed we cannot above ears other

00:12:29,420 --> 00:12:35,210
obvious performance drop on

00:12:33,790 --> 00:12:44,450
virtualization

00:12:35,210 --> 00:12:46,570
well we CPM is is large the PM axis two

00:12:44,450 --> 00:12:52,330
too many

00:12:46,570 --> 00:12:57,290
this is the implementation or currently

00:12:52,330 --> 00:12:59,300
his future armor to our swing I will set

00:12:57,290 --> 00:13:02,390
in the destination to up in a member in

00:12:59,300 --> 00:13:06,080
the guest then use a backhaul to send IP

00:13:02,390 --> 00:13:09,440
is to multi evasive use the hammer call

00:13:06,080 --> 00:13:13,390
LEDs or guest and multicast api's with

00:13:09,440 --> 00:13:17,660
and most 128 destinations for Heba

00:13:13,390 --> 00:13:18,980
insisted 4-bit mode and 64-bit CPUs for

00:13:17,660 --> 00:13:21,740
her Pocoyo

00:13:18,980 --> 00:13:24,440
so they debate among the destination are

00:13:21,740 --> 00:13:28,220
represented by a beta map contained in

00:13:24,440 --> 00:13:32,240
the first room arguments of Abaco the

00:13:28,220 --> 00:13:35,120
beta map will be scanned in KVM then to

00:13:32,240 --> 00:13:38,959
stand IPS to attack enemy CPUs

00:13:35,120 --> 00:13:44,029
lastly the the performance evaluation I

00:13:38,959 --> 00:13:48,110
use a scaling server total 8 a logical

00:13:44,029 --> 00:13:55,550
CPUs and the VM is also 18 logical miss

00:13:48,110 --> 00:14:01,610
abuse I use IP I material benchmark we

00:13:55,550 --> 00:14:04,730
have observed the time to send the multi

00:14:01,610 --> 00:14:08,000
class API to other recipients in X 2

00:14:04,730 --> 00:14:11,389
epic physical mode performance it can be

00:14:08,000 --> 00:14:13,610
a great improvement even if you across

00:14:11,389 --> 00:14:19,670
the mode we can still order of some

00:14:13,610 --> 00:14:24,199
benefit the last one is to disable and

00:14:19,670 --> 00:14:27,139
wheat or hot or post their maxes to

00:14:24,199 --> 00:14:32,569
improve agency for guest which has

00:14:27,139 --> 00:14:36,740
dedicated physical CPUs actually are

00:14:32,569 --> 00:14:39,470
three years ago I push the adaptive hard

00:14:36,740 --> 00:14:44,449
pooling to upstream and will not consume

00:14:39,470 --> 00:14:48,980
too much CPUs since the adaptive

00:14:44,449 --> 00:14:53,990
algorithm but if you already can

00:14:48,980 --> 00:14:56,860
tolerate as I know is equal to pour in

00:14:53,990 --> 00:15:04,940
the gasps no crap which means you can

00:14:56,860 --> 00:15:10,940
observe 100% CPU occupation on by a top

00:15:04,940 --> 00:15:13,850
command then you can trace here take it

00:15:10,940 --> 00:15:17,810
easy Bo I'm with as an example to

00:15:13,850 --> 00:15:22,209
disable the Emmett intercept we can give

00:15:17,810 --> 00:15:24,560
just a limited power management

00:15:22,209 --> 00:15:27,560
capability against the camp food our

00:15:24,560 --> 00:15:32,530
physical CPU into a power saving stage

00:15:27,560 --> 00:15:38,510
as the the UNIX bench we can order the

00:15:32,530 --> 00:15:41,890
improvement I hope I do another testing

00:15:38,510 --> 00:15:49,700
to come here this table I'm with and

00:15:41,890 --> 00:15:54,560
other is equal to or too poor here it

00:15:49,700 --> 00:15:58,400
has the texture which has eight logical

00:15:54,560 --> 00:16:01,880
CPUs then to vm each VM is for Bishop

00:15:58,400 --> 00:16:05,780
used to test case the difference is

00:16:01,880 --> 00:16:09,140
testicles testicles one both the other

00:16:05,780 --> 00:16:12,260
is equal to pour in the gastric rub one

00:16:09,140 --> 00:16:16,430
of the VM will run a single stride units

00:16:12,260 --> 00:16:20,960
bench the other has the case is posts

00:16:16,430 --> 00:16:23,870
will disable the am wheat intercept and

00:16:20,960 --> 00:16:27,650
one of them will run single stride units

00:16:23,870 --> 00:16:31,700
bench we can observe the performance

00:16:27,650 --> 00:16:35,300
instant improvement for this table and

00:16:31,700 --> 00:16:40,640
wait we are making Alessi why next night

00:16:35,300 --> 00:16:44,030
we can observe for the top command both

00:16:40,640 --> 00:16:46,880
I do is equal to power and the disabled

00:16:44,030 --> 00:16:54,260
and weight will cause the top command to

00:16:46,880 --> 00:16:59,180
show 100% Scipio occupation but why use

00:16:54,260 --> 00:17:02,500
the power power power atop two for the

00:16:59,180 --> 00:17:06,829
other is equal to pour in gas we can see

00:17:02,500 --> 00:17:13,670
almost all the logical CPUs are entered

00:17:06,829 --> 00:17:18,310
the C 0 but for disabled and we'd be

00:17:13,670 --> 00:17:26,240
amazing just the right which run the

00:17:18,310 --> 00:17:30,080
UNIX bench in C 0 further car scope.c

00:17:26,240 --> 00:17:34,580
state we can see most of time we are in

00:17:30,080 --> 00:17:38,000
stage 3 or c7 yeah yeah in the process

00:17:34,580 --> 00:17:42,250
state which means the singles unit

00:17:38,000 --> 00:17:42,250
Spanish Strider can gather turbo boost

00:17:42,800 --> 00:17:51,140
oh yes all in a question or these

00:17:48,260 --> 00:17:53,480
patches are all merged to upstream so

00:17:51,140 --> 00:18:04,640
you can have a try if you're interested

00:17:53,480 --> 00:18:06,530
in hi

00:18:04,640 --> 00:18:08,720
yeah I've worked a little bit and they

00:18:06,530 --> 00:18:13,370
give you side of the yeah I'm going to

00:18:08,720 --> 00:18:15,230
hold things I would just it's great work

00:18:13,370 --> 00:18:18,170
I would appreciate it if you could share

00:18:15,230 --> 00:18:21,260
maybe the scripts that you used to to

00:18:18,170 --> 00:18:23,720
evaluate the efficiency of there because

00:18:21,260 --> 00:18:26,780
by lighted upstream it and it works

00:18:23,720 --> 00:18:29,450
functionally I don't really know yet how

00:18:26,780 --> 00:18:33,380
to test how good they are how does that

00:18:29,450 --> 00:18:35,060
how well does all this work okay so if I

00:18:33,380 --> 00:18:37,130
could maybe post it on list maybe we

00:18:35,060 --> 00:18:39,140
could put its number and the country

00:18:37,130 --> 00:18:42,400
will give you okay that would be great

00:18:39,140 --> 00:18:42,400
okay thank you

00:18:52,070 --> 00:19:00,859
Hey for the paravirtualization town

00:18:55,669 --> 00:19:06,139
explain again what the preempted vgpu

00:19:00,859 --> 00:19:08,090
flag is used to do please see which one

00:19:06,139 --> 00:19:10,340
you are a to flaner yeah can you explain

00:19:08,090 --> 00:19:15,470
how the guest uses that KB mbcp

00:19:10,340 --> 00:19:18,429
preempted like what because we need to

00:19:15,470 --> 00:19:22,700
know in against whether or not the the

00:19:18,429 --> 00:19:24,739
initiators the idea initiate hers if you

00:19:22,700 --> 00:19:30,379
need to know whether or not a targeted

00:19:24,739 --> 00:19:33,379
CPU is printed on or not so so instead

00:19:30,379 --> 00:19:35,929
of it kind of party the host the host

00:19:33,379 --> 00:19:39,769
can know whether or not be CPU is

00:19:35,929 --> 00:19:41,899
preempted the the preemption not a fear

00:19:39,769 --> 00:19:44,090
on hosta we are notified we CPU is

00:19:41,899 --> 00:19:46,909
printed and be scheduled out each time

00:19:44,090 --> 00:19:50,929
the the visible printed flag will be

00:19:46,909 --> 00:19:53,929
marked and before the kiss we see

00:19:50,929 --> 00:19:58,460
pianist of elementary the flag will be

00:19:53,929 --> 00:20:02,749
clear so in gas another recipe Oh in a

00:19:58,460 --> 00:20:05,359
gas we can know this is the gift memory

00:20:02,749 --> 00:20:06,859
is shared between the guest and host so

00:20:05,359 --> 00:20:10,639
in our case we can know whether or not

00:20:06,859 --> 00:20:13,399
on the target device appeal is active or

00:20:10,639 --> 00:20:16,789
not okay a quick follow-up is there a

00:20:13,399 --> 00:20:19,039
race if if if the guest caesar the vcp

00:20:16,789 --> 00:20:29,950
is preempted and then it gets scheduled

00:20:19,039 --> 00:20:29,950
in right after that okay

00:20:32,010 --> 00:20:35,070
thank you

00:20:41,200 --> 00:20:46,550
this is my third microphone today with

00:20:43,880 --> 00:20:49,400
no batteries cool stuff I have a

00:20:46,550 --> 00:20:53,840
question about the guest support so

00:20:49,400 --> 00:20:55,550
obviously Linux guest support PV MMU ops

00:20:53,840 --> 00:21:02,810
because you have strained it have you

00:20:55,550 --> 00:21:05,030
engaged Microsoft yeah yeah then the

00:21:02,810 --> 00:21:08,000
hyper-v also has a similar feature but

00:21:05,030 --> 00:21:11,090
the implementation is different we use

00:21:08,000 --> 00:21:15,380
or have a car now then took all the VMS

00:21:11,090 --> 00:21:17,090
it instead of my a little different do

00:21:15,380 --> 00:21:23,210
you have any plans to implement that

00:21:17,090 --> 00:21:32,090
hyper-v enlightenment great yeah I

00:21:23,210 --> 00:21:34,040
remember badly implements that my

00:21:32,090 --> 00:21:36,170
question would be how is this BCP you

00:21:34,040 --> 00:21:38,000
preempted flag is gonna work at nested

00:21:36,170 --> 00:21:41,570
environments because when you're running

00:21:38,000 --> 00:21:44,630
in l2 your l1 doesn't really know if

00:21:41,570 --> 00:21:47,630
he's the CPU is preempted or not can we

00:21:44,630 --> 00:21:53,510
make it work so we actually know in l2

00:21:47,630 --> 00:21:57,890
if the CPU is running or not in the nest

00:21:53,510 --> 00:22:00,080
environment from l2 you are observing

00:21:57,890 --> 00:22:02,900
this flag and it tells you that we CPU

00:22:00,080 --> 00:22:06,640
is for example not preempted right but

00:22:02,900 --> 00:22:11,780
this information comes from l1 okay and

00:22:06,640 --> 00:22:14,800
it may not be true right I will check it

00:22:11,780 --> 00:22:14,800
later how do you

00:22:29,770 --> 00:22:36,760
yeah for for the tolerable

00:22:33,280 --> 00:22:38,830
I remember that the people said it is

00:22:36,760 --> 00:22:48,160
don't support of the talking about to

00:22:38,830 --> 00:22:51,220
cast because there's another one is a

00:22:48,160 --> 00:22:54,340
mean yeah yeah yeah

00:22:51,220 --> 00:22:56,700
you mean that in this way the other CPUC

00:22:54,340 --> 00:23:00,220
the simple package can get or proposed

00:22:56,700 --> 00:23:05,260
yeah but the precondition of total worst

00:23:00,220 --> 00:23:08,080
is that you assign all the CPUs of

00:23:05,260 --> 00:23:16,360
accreditation the Hadouken rate in twos

00:23:08,080 --> 00:23:20,230
while they are right the the

00:23:16,360 --> 00:23:21,490
precondition of total boost is that you

00:23:20,230 --> 00:23:25,050
know federal coordination there's

00:23:21,490 --> 00:23:29,500
several processors and other processors

00:23:25,050 --> 00:23:34,270
satisfy some water condition and

00:23:29,500 --> 00:23:39,550
temperature condition then the only the

00:23:34,270 --> 00:23:42,520
soleus abuse can post yeah so do you

00:23:39,550 --> 00:23:45,970
is this do you have the precondition

00:23:42,520 --> 00:23:53,740
that you assign all the CPUs of hard

00:23:45,970 --> 00:23:57,970
cotton correlation to sing waves to you

00:23:53,740 --> 00:24:02,110
mean ran Mattias right benchmark I mean

00:23:57,970 --> 00:24:04,690
if you want to post a sip use of a

00:24:02,110 --> 00:24:08,020
variable do you have the pre-college

00:24:04,690 --> 00:24:12,210
that the order have a correlations abuse

00:24:08,020 --> 00:24:12,210
also in assigned to this interest

00:24:14,770 --> 00:24:21,170
listen if if the difference appears in

00:24:18,230 --> 00:24:46,400
one harder connotation a lot of

00:24:21,170 --> 00:24:51,140
different I'm not sure I understood his

00:24:46,400 --> 00:24:53,480
comment but I think maybe the part that

00:24:51,140 --> 00:24:55,960
was not clear is that the first to

00:24:53,480 --> 00:24:59,450
optimizations that he mentioned were for

00:24:55,960 --> 00:25:01,160
overcommit and this one is not this one

00:24:59,450 --> 00:25:03,620
is not when you're over committing this

00:25:01,160 --> 00:25:07,220
one is only to improve the latency when

00:25:03,620 --> 00:25:09,500
you can do like one to one basically

00:25:07,220 --> 00:25:13,900
when you use your your ghost roll only

00:25:09,500 --> 00:25:13,900
as only to partition it across yeah

00:25:20,350 --> 00:25:28,010
artists abuse of the precondition is

00:25:24,740 --> 00:25:30,350
that I think we should assign all the

00:25:28,010 --> 00:25:36,920
CPUs of one holwick relation to one

00:25:30,350 --> 00:25:42,620
there's only stirs I notice that is a

00:25:36,920 --> 00:25:45,710
versus say five the new instance and

00:25:42,620 --> 00:25:49,850
only when the c5 is a big see fact that

00:25:45,710 --> 00:25:53,980
is we can assign ordered Fisk processors

00:25:49,850 --> 00:25:53,980
to various cables future

00:26:05,600 --> 00:26:08,740
okay thank you

00:26:09,280 --> 00:26:18,429
[Applause]

00:26:12,640 --> 00:26:18,429

YouTube URL: https://www.youtube.com/watch?v=ufqMlVXZzJc


