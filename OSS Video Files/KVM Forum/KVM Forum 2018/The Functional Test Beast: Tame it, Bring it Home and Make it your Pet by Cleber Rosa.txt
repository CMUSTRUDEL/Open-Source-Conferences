Title: The Functional Test Beast: Tame it, Bring it Home and Make it your Pet by Cleber Rosa
Publication date: 2018-11-17
Playlist: KVM Forum 2018
Description: 
	Functional tests have traditionally been kept outside. These poor beasts get beaten by heavy work, but are not allowed to sit in the couch by your side, nor are they given the freedom to run inside your $HOME.

There have been valid reasons for this separation, but what if a far more comprehensive (yet safe and manageable) functional testing environment could be added to the regular developer's work-flow, pretty much for free?

In this talk we'll present QEMU's brand new functional testing architecture and how it lets developers easily write and run advanced functional tests.

Because anything functional demands to be practical, we'll write a test for a real QEMU bug and its fix, running it in different targets and configurations from the very same development tree. Finally, we'll give the test a definitive home alongside that fix, while putting the bug on a permanent tight leash.

---

Cleber Rosa
Sr. Software Engineer
Red Hat

Cleber is a Software Engineer working for Red Hat on the virt team. He helps to develop the testing stack for virtualization technologies, such as KVM, QEMU and Libvirt. He is a maintainer of the Avocado test framework and sub projects such as Avocado-VT.
Captions: 
	00:00:01,040 --> 00:00:08,820
[Music]

00:00:05,450 --> 00:00:11,639
right so welcome everyone my name is

00:00:08,820 --> 00:00:15,599
Claire Rosa I'm a software engineer at

00:00:11,639 --> 00:00:16,949
hat in the virtualization team and we

00:00:15,599 --> 00:00:21,720
are going to talk about actually

00:00:16,949 --> 00:00:24,660
continue talking about testing let's

00:00:21,720 --> 00:00:26,279
talk about the agenda so we're going to

00:00:24,660 --> 00:00:28,830
talk about the functional testing

00:00:26,279 --> 00:00:30,960
challenges how those types of tests

00:00:28,830 --> 00:00:33,930
actually differ from other types of

00:00:30,960 --> 00:00:35,460
tests and the additional implications in

00:00:33,930 --> 00:00:37,500
that we'll talk about the background

00:00:35,460 --> 00:00:41,040
that we have with virtualization tests

00:00:37,500 --> 00:00:43,350
include qmu and leopard how this thing

00:00:41,040 --> 00:00:45,239
called avacado actually fits into the

00:00:43,350 --> 00:00:48,329
picture and then we're going to give you

00:00:45,239 --> 00:00:51,930
a status report on what we're doing now

00:00:48,329 --> 00:00:55,110
and what we plan to do next so

00:00:51,930 --> 00:00:58,260
functional testing challenges just to

00:00:55,110 --> 00:00:59,940
set up a bit of context here most of you

00:00:58,260 --> 00:01:01,739
who have written unit tests you probably

00:00:59,940 --> 00:01:04,199
know that by definition you want to

00:01:01,739 --> 00:01:06,450
focus on a very specific type of problem

00:01:04,199 --> 00:01:09,689
you want disregard everything else

00:01:06,450 --> 00:01:12,630
that's like the whole definition of unit

00:01:09,689 --> 00:01:14,580
testing but with functional tests you

00:01:12,630 --> 00:01:16,500
always have to consider like a much

00:01:14,580 --> 00:01:19,530
bigger picture that's again by

00:01:16,500 --> 00:01:22,439
definition and it has implications with

00:01:19,530 --> 00:01:25,020
regards to its complexity when it comes

00:01:22,439 --> 00:01:27,869
to interactions with unit tests you're

00:01:25,020 --> 00:01:30,930
mostly talking about machine code

00:01:27,869 --> 00:01:32,820
interacting with your code so it's kind

00:01:30,930 --> 00:01:35,430
of a more well controlled environment

00:01:32,820 --> 00:01:39,060
your input is usually hard coded within

00:01:35,430 --> 00:01:42,000
test sometimes like small data files

00:01:39,060 --> 00:01:45,090
that live alongside test but for

00:01:42,000 --> 00:01:48,780
functional tests you usually want to

00:01:45,090 --> 00:01:51,329
mimic how like complex systems behave

00:01:48,780 --> 00:01:53,490
and use your software or how even humans

00:01:51,329 --> 00:01:56,369
actually use your soldier so you have

00:01:53,490 --> 00:01:58,619
the fuzzing factor there one other

00:01:56,369 --> 00:02:00,149
consideration is that usually the input

00:01:58,619 --> 00:02:03,570
that you want your feeding to those

00:02:00,149 --> 00:02:05,520
tests are usually too large to have it

00:02:03,570 --> 00:02:07,469
alongside your test so it's usually

00:02:05,520 --> 00:02:09,119
something that resorts to external

00:02:07,469 --> 00:02:11,790
results

00:02:09,119 --> 00:02:14,220
when it comes to tools and framework

00:02:11,790 --> 00:02:16,319
requirements unit tests are again

00:02:14,220 --> 00:02:19,080
usually given the better treatment so

00:02:16,319 --> 00:02:21,000
they're usually something that lives

00:02:19,080 --> 00:02:23,870
alongside the same tool chain that you

00:02:21,000 --> 00:02:26,250
using to compile your project sometimes

00:02:23,870 --> 00:02:28,470
first-class library butts you pretty

00:02:26,250 --> 00:02:32,129
much at the same level the tools that

00:02:28,470 --> 00:02:34,230
you rely on to develop functional tasks

00:02:32,129 --> 00:02:36,390
on the other hand they usually rely on

00:02:34,230 --> 00:02:38,430
external tools it's not uncommon for

00:02:36,390 --> 00:02:42,359
those external tools should rely on a

00:02:38,430 --> 00:02:44,220
whole bunch of other external tools they

00:02:42,359 --> 00:02:46,590
are highly sensitive to the environment

00:02:44,220 --> 00:02:51,299
they run on and the complications go on

00:02:46,590 --> 00:02:54,690
so usually people start with internal to

00:02:51,299 --> 00:02:57,390
an ad hoc two scripts and things don't

00:02:54,690 --> 00:02:59,640
usually evolve from there and that's the

00:02:57,390 --> 00:03:04,950
reason that they are usually kept apart

00:02:59,640 --> 00:03:07,799
from the main sheet of your code so qmu

00:03:04,950 --> 00:03:09,900
and KVM functional testing background so

00:03:07,799 --> 00:03:11,909
i've been within the virtualization team

00:03:09,900 --> 00:03:17,180
for a while most of this time I've been

00:03:11,909 --> 00:03:20,099
working on what is now called a Vacarro

00:03:17,180 --> 00:03:21,780
the current incarnation of the current

00:03:20,099 --> 00:03:24,780
name that we have for that piece of

00:03:21,780 --> 00:03:27,090
software that was once KTM autotest that

00:03:24,780 --> 00:03:29,879
was once worth test we now call it

00:03:27,090 --> 00:03:31,440
avvocato VT and I really want to stress

00:03:29,879 --> 00:03:35,609
that at this point we were talking about

00:03:31,440 --> 00:03:37,680
avocado VT so keep that in mind so we

00:03:35,609 --> 00:03:41,489
had our own share of challenges with

00:03:37,680 --> 00:03:45,209
avocado VT this is actually like listing

00:03:41,489 --> 00:03:45,810
examples of the topics that I just

00:03:45,209 --> 00:03:47,970
mentioned

00:03:45,810 --> 00:03:49,530
so avocado vixy itself even though

00:03:47,970 --> 00:03:52,340
invested a lot of time on it

00:03:49,530 --> 00:03:54,859
its installation process it's

00:03:52,340 --> 00:03:57,660
non-trivial they're a bunch of packages

00:03:54,859 --> 00:04:00,120
external repos after you have it

00:03:57,660 --> 00:04:03,060
installed you have to bootstrap it you

00:04:00,120 --> 00:04:04,829
select the type of the test provider

00:04:03,060 --> 00:04:08,310
that you want with that you have

00:04:04,829 --> 00:04:11,310
additional requirements you have to

00:04:08,310 --> 00:04:13,139
download images usually ahead of time

00:04:11,310 --> 00:04:16,380
that you want to use during your tasks

00:04:13,139 --> 00:04:19,739
so the bootstrap process it's not simple

00:04:16,380 --> 00:04:22,939
and when it comes to writing a test even

00:04:19,739 --> 00:04:25,370
though I'd like to think we did there

00:04:22,939 --> 00:04:28,750
you still have to follow someone like 24

00:04:25,370 --> 00:04:31,490
steps to get a new test open so

00:04:28,750 --> 00:04:36,979
complexity complexity is a natural part

00:04:31,490 --> 00:04:39,259
of the game and how abakada of please

00:04:36,979 --> 00:04:41,840
note it's not avvocato et pitching the

00:04:39,259 --> 00:04:44,719
picture I'm actually stressing that

00:04:41,840 --> 00:04:48,710
because I heard some feedback earlier on

00:04:44,719 --> 00:04:50,449
that oh there's a picado thing is kind

00:04:48,710 --> 00:04:53,180
of hard to set up but once it's running

00:04:50,449 --> 00:04:54,199
it's nice to have and I really really

00:04:53,180 --> 00:04:58,780
hope that people are talking about

00:04:54,199 --> 00:05:03,199
avocado vt avocado so keep that in mind

00:04:58,780 --> 00:05:05,719
so avocado was designed from the start

00:05:03,199 --> 00:05:08,780
to be really simple when it comes to

00:05:05,719 --> 00:05:11,330
installation and use its reading pythons

00:05:08,780 --> 00:05:13,849
so you can use regular Python tools to

00:05:11,330 --> 00:05:17,539
get that installed you'll find avocado

00:05:13,849 --> 00:05:20,810
is a like package standard package on a

00:05:17,539 --> 00:05:23,629
lot of distros and you can get started

00:05:20,810 --> 00:05:25,430
with avocado run and point somewhere

00:05:23,629 --> 00:05:27,139
like if you want to see a really nice

00:05:25,430 --> 00:05:29,389
experiment you can save a car to run

00:05:27,139 --> 00:05:33,129
slash bean and it's gonna try to run

00:05:29,389 --> 00:05:33,129
everything that's in there as a test

00:05:33,159 --> 00:05:40,430
when it comes to writing a test we also

00:05:36,469 --> 00:05:44,060
try to do the very simple thing that

00:05:40,430 --> 00:05:46,699
would be most familiar to developers so

00:05:44,060 --> 00:05:48,650
you can either do what I just said so

00:05:46,699 --> 00:05:52,250
you can run binaries everything that you

00:05:48,650 --> 00:05:55,279
set the execute meat on you can run and

00:05:52,250 --> 00:05:57,819
treat her as a test but if you decide to

00:05:55,279 --> 00:06:01,819
use what we call our instrumented API

00:05:57,819 --> 00:06:04,339
which is a python-based test class and

00:06:01,819 --> 00:06:06,740
supporting code you get a lot of

00:06:04,339 --> 00:06:09,020
benefits so you get to pass parameters

00:06:06,740 --> 00:06:12,289
to your tests either individually or in

00:06:09,020 --> 00:06:13,909
a what we call with a variation form so

00:06:12,289 --> 00:06:16,250
you can have the same tests being tested

00:06:13,909 --> 00:06:18,529
in different scenarios you have extended

00:06:16,250 --> 00:06:20,449
logging facilities you can easily refer

00:06:18,529 --> 00:06:22,610
to data files that your test is going to

00:06:20,449 --> 00:06:24,139
consume and we have something called

00:06:22,610 --> 00:06:27,259
avocado you choose which is a

00:06:24,139 --> 00:06:30,660
ever-growing set of libraries most of

00:06:27,259 --> 00:06:33,900
them targeted towards functional testing

00:06:30,660 --> 00:06:37,980
now let's see how the sub cutter thing

00:06:33,900 --> 00:06:42,120
has made its way into Q so this is the

00:06:37,980 --> 00:06:43,350
current status of Q mu source tree so

00:06:42,120 --> 00:06:45,960
there is something called test

00:06:43,350 --> 00:06:49,170
acceptance and we're working exactly on

00:06:45,960 --> 00:06:51,780
that so the intention is for higher

00:06:49,170 --> 00:06:54,900
level tests functional tests acceptance

00:06:51,780 --> 00:06:56,490
level tests to live inside the tree

00:06:54,900 --> 00:06:59,610
right now there is supporting code that

00:06:56,490 --> 00:07:04,050
you find in the avocado Q mu it's really

00:06:59,610 --> 00:07:06,270
simple code just a kind of very simple

00:07:04,050 --> 00:07:09,600
but still special in some ways test

00:07:06,270 --> 00:07:14,280
class that gives you some things as a

00:07:09,600 --> 00:07:16,830
head start so with that you can do what

00:07:14,280 --> 00:07:21,750
i just showed before you can do auto run

00:07:16,830 --> 00:07:22,440
test acceptance and is this how it

00:07:21,750 --> 00:07:26,150
should go

00:07:22,440 --> 00:07:30,540
let's see if we have networking that

00:07:26,150 --> 00:07:34,290
yeah so this is these are the tester in

00:07:30,540 --> 00:07:36,720
upstream q mu the most complex which is

00:07:34,290 --> 00:07:39,810
still kind of a demo test as a test at

00:07:36,720 --> 00:07:42,210
boot to linux kernel so it's to you even

00:07:39,810 --> 00:07:44,400
though it's in it's in its infancy it's

00:07:42,210 --> 00:07:46,530
to you a high level test and you

00:07:44,400 --> 00:07:50,370
probably find on a key mu tree at this

00:07:46,530 --> 00:07:52,190
point the avocado queue in you test they

00:07:50,370 --> 00:07:55,740
have a few distinguishing

00:07:52,190 --> 00:07:58,320
characteristics so when you start within

00:07:55,740 --> 00:08:00,990
a method that is your test you have

00:07:58,320 --> 00:08:03,870
access to something that is the vm

00:08:00,990 --> 00:08:07,080
attribute and that vm attribute as a q

00:08:03,870 --> 00:08:09,480
mu machine which we reuse transcripts p

00:08:07,080 --> 00:08:12,420
mu so a lot of people should be familiar

00:08:09,480 --> 00:08:14,040
with that and you can interact with it

00:08:12,420 --> 00:08:18,420
by adding arguments to the command line

00:08:14,040 --> 00:08:20,580
you can launch the vm with launch you

00:08:18,420 --> 00:08:25,170
can send TMP commands with either

00:08:20,580 --> 00:08:31,140
commander command so let's see how we

00:08:25,170 --> 00:08:34,289
can like use this today and i want to go

00:08:31,140 --> 00:08:36,570
to an exercise that I did like really

00:08:34,289 --> 00:08:38,729
recently so I was looking for candidates

00:08:36,570 --> 00:08:41,370
to actually contribute a new test for an

00:08:38,729 --> 00:08:43,310
existing regression because that's how

00:08:41,370 --> 00:08:46,279
you usually want to go like you want to

00:08:43,310 --> 00:08:49,640
a fix with a test to prevent that from

00:08:46,279 --> 00:08:53,000
biting you again so I did a simple get

00:08:49,640 --> 00:08:54,890
log show me something that says fix and

00:08:53,000 --> 00:08:56,450
that one seemed like a very good

00:08:54,890 --> 00:09:02,690
candidate so I would like to thank

00:08:56,450 --> 00:09:04,610
Marcus well allowing me to use his

00:09:02,690 --> 00:09:07,370
comment and there's a very interesting

00:09:04,610 --> 00:09:11,120
thing here in my opinion he actually

00:09:07,370 --> 00:09:12,380
wrote the test so if you look at a

00:09:11,120 --> 00:09:15,260
commit message

00:09:12,380 --> 00:09:17,930
it describes the situations in which qmu

00:09:15,260 --> 00:09:19,670
is failing but should not fail and it

00:09:17,930 --> 00:09:22,070
actually describes the command line that

00:09:19,670 --> 00:09:24,350
should be used the QEP command that is

00:09:22,070 --> 00:09:27,350
sent so the test is all there it just

00:09:24,350 --> 00:09:30,350
needs a place to live and there you go

00:09:27,350 --> 00:09:33,800
you have one last regression avoidance

00:09:30,350 --> 00:09:39,950
so let me actually show how we can map

00:09:33,800 --> 00:09:43,310
that into the test so I came up with

00:09:39,950 --> 00:09:47,630
this which is almost side by side the

00:09:43,310 --> 00:09:50,960
same thing that Marcus wrote so if you

00:09:47,630 --> 00:09:52,790
look at this test run scheme you with

00:09:50,960 --> 00:09:56,030
almost the same command lines that he

00:09:52,790 --> 00:09:57,980
documented I set a machine using a

00:09:56,030 --> 00:10:00,790
slightly different API I launched it I

00:09:57,980 --> 00:10:05,240
send the set newman owed command and

00:10:00,790 --> 00:10:10,160
then i expected to behave this way and

00:10:05,240 --> 00:10:12,710
not actually exit actually not exit at

00:10:10,160 --> 00:10:16,370
that point and not exit with an error so

00:10:12,710 --> 00:10:19,430
with that said within a qmu source tree

00:10:16,370 --> 00:10:22,310
i can just do of a powder let me just

00:10:19,430 --> 00:10:25,570
show test relation gonna show the

00:10:22,310 --> 00:10:25,570
interactions and

00:10:31,170 --> 00:10:39,790
so when I did there you go you have

00:10:37,149 --> 00:10:41,949
actually two passes qmp commands going

00:10:39,790 --> 00:10:43,779
back and forth and this is actually

00:10:41,949 --> 00:10:46,930
something that happened to me and I

00:10:43,779 --> 00:10:50,500
thought I would keep it because while I

00:10:46,930 --> 00:10:53,110
was looking at the original commit

00:10:50,500 --> 00:10:55,690
message and how this thing was supposed

00:10:53,110 --> 00:10:58,720
to behave I learned something that I

00:10:55,690 --> 00:11:01,350
didn't know which is that the Seth

00:10:58,720 --> 00:11:04,569
Newman hood should not be permitted

00:11:01,350 --> 00:11:05,949
outside of the freakin fixed date so it

00:11:04,569 --> 00:11:08,079
was something that I got just from

00:11:05,949 --> 00:11:10,240
reading another commit message related

00:11:08,079 --> 00:11:14,730
to that and I said why not just put that

00:11:10,240 --> 00:11:18,009
in a code in a test so it was easy to me

00:11:14,730 --> 00:11:20,050
I hope it's gonna be easy for most of

00:11:18,009 --> 00:11:25,899
you and this is how you would go about

00:11:20,050 --> 00:11:27,399
sending a test working for qmu using

00:11:25,899 --> 00:11:30,100
this framework it's just a matter of

00:11:27,399 --> 00:11:33,939
putting the test in the test acceptance

00:11:30,100 --> 00:11:36,100
letter now there are a lot of things

00:11:33,939 --> 00:11:40,329
going on I'm not sure if you guys are

00:11:36,100 --> 00:11:42,990
paying attention to topics listing

00:11:40,329 --> 00:11:45,279
acceptance tests in the kmu mailing list

00:11:42,990 --> 00:11:48,339
besides those there are other things

00:11:45,279 --> 00:11:52,329
going on so I'm hoping to give you guys

00:11:48,339 --> 00:11:54,759
an overview of that first of all for for

00:11:52,329 --> 00:11:57,220
this whole strategy to work we don't

00:11:54,759 --> 00:12:00,519
want to be pushing code that doesn't

00:11:57,220 --> 00:12:01,779
belong in qmu turkey Amy so avocado is

00:12:00,519 --> 00:12:04,449
playing

00:12:01,779 --> 00:12:06,459
infrastructure part as a framework and

00:12:04,449 --> 00:12:09,069
we've been operating under that model

00:12:06,459 --> 00:12:12,009
for the last few months so we prototype

00:12:09,069 --> 00:12:14,470
tests and some of the tester I'm going

00:12:12,009 --> 00:12:16,720
to show here we're develop it that way

00:12:14,470 --> 00:12:19,600
so we planned the avocado features that

00:12:16,720 --> 00:12:23,019
are necessary to support that and then

00:12:19,600 --> 00:12:25,389
we release a new local version with that

00:12:23,019 --> 00:12:27,250
you should be able to bump the version

00:12:25,389 --> 00:12:29,259
requirements if your test needs a new

00:12:27,250 --> 00:12:31,870
feature that is in the newer version of

00:12:29,259 --> 00:12:34,000
al carro and everything should be tied

00:12:31,870 --> 00:12:37,329
together so with this concept of

00:12:34,000 --> 00:12:38,649
everything being tied together and we

00:12:37,329 --> 00:12:41,500
should come up with a way to actually

00:12:38,649 --> 00:12:43,060
make use of this information so if we

00:12:41,500 --> 00:12:46,780
say that the test will now require

00:12:43,060 --> 00:12:49,150
specific version of avocado we should

00:12:46,780 --> 00:12:51,010
make that work like that by default and

00:12:49,150 --> 00:12:53,020
that is one of the things are going on

00:12:51,010 --> 00:12:55,960
right now in the upstream mailing list

00:12:53,020 --> 00:12:58,690
so we are proposing what is called make

00:12:55,960 --> 00:13:01,120
check acceptance which should fit well

00:12:58,690 --> 00:13:03,760
into the workflow of most developers you

00:13:01,120 --> 00:13:06,100
know it its goal is to run the

00:13:03,760 --> 00:13:09,220
acceptance tests without any bootstrap

00:13:06,100 --> 00:13:11,830
other than what is already buddy make a

00:13:09,220 --> 00:13:17,020
make check acceptance coming so how does

00:13:11,830 --> 00:13:18,460
work no magic so let me just get another

00:13:17,020 --> 00:13:23,560
environment here

00:13:18,460 --> 00:13:27,880
am I in a beauty no so beauty we meu and

00:13:23,560 --> 00:13:32,880
when I do make check acceptance

00:13:27,880 --> 00:13:32,880
I shouldn't have to have completed

00:13:35,830 --> 00:13:44,830
Lake Shack yeah so it creates a virtual

00:13:42,910 --> 00:13:47,620
environment based on the requirements

00:13:44,830 --> 00:13:50,260
that we just described adding stores and

00:13:47,620 --> 00:13:52,480
via peope it creates a directory within

00:13:50,260 --> 00:13:56,230
your view tree to keep your results and

00:13:52,480 --> 00:13:59,380
it runs avocado for that so if you check

00:13:56,230 --> 00:14:02,010
it you have an allpass here so hopefully

00:13:59,380 --> 00:14:06,250
this is gonna fit into most people

00:14:02,010 --> 00:14:08,410
workflow and this is this directory

00:14:06,250 --> 00:14:09,730
called latest is a special symlinks so

00:14:08,410 --> 00:14:12,130
if you want to take a look at the

00:14:09,730 --> 00:14:14,920
results for your last job you can always

00:14:12,130 --> 00:14:17,010
refer to latest I'm just showing you one

00:14:14,920 --> 00:14:19,150
of the result formats that we ship which

00:14:17,010 --> 00:14:20,890
integrates with some tools but there are

00:14:19,150 --> 00:14:24,070
a whole bunch of other interesting

00:14:20,890 --> 00:14:26,170
information there and with that if you

00:14:24,070 --> 00:14:27,490
have something that Auto provisions the

00:14:26,170 --> 00:14:30,730
environment that you need to run the

00:14:27,490 --> 00:14:32,410
functional tests you can easily have CI

00:14:30,730 --> 00:14:35,710
integration and this is also something

00:14:32,410 --> 00:14:38,560
that we're proposing alongside so on the

00:14:35,710 --> 00:14:41,740
standard Travis configuration file you

00:14:38,560 --> 00:14:45,850
have the right configuration and you get

00:14:41,740 --> 00:14:49,270
for free the acceptance tests when you

00:14:45,850 --> 00:14:52,150
push something to get that now this is

00:14:49,270 --> 00:14:54,400
pretty much basic stuff and as I said

00:14:52,150 --> 00:14:56,560
before we experimenting with features

00:14:54,400 --> 00:14:59,650
and then working on the avocado side of

00:14:56,560 --> 00:15:02,680
things so those those tests are things

00:14:59,650 --> 00:15:06,520
that have been proposed to the mailing

00:15:02,680 --> 00:15:08,710
list or are being worked on in our like

00:15:06,520 --> 00:15:10,450
personal repos but they are also they

00:15:08,710 --> 00:15:13,930
are already using features that we have

00:15:10,450 --> 00:15:15,850
made into avvocato itself so when we got

00:15:13,930 --> 00:15:19,570
into the functional testing level we

00:15:15,850 --> 00:15:21,910
want to both fool inexperienced that's

00:15:19,570 --> 00:15:25,890
that's like the most basic next of your

00:15:21,910 --> 00:15:28,500
step so we came up with both Linux tests

00:15:25,890 --> 00:15:31,300
the source code itself is pretty simple

00:15:28,500 --> 00:15:33,310
so it has a lot to do with reading

00:15:31,300 --> 00:15:37,840
parameters so that you can configure the

00:15:33,310 --> 00:15:41,380
test at the false to two processors for

00:15:37,840 --> 00:15:45,670
gigabytes a uses KVM as a accelerator is

00:15:41,380 --> 00:15:49,690
uses the PC machine it uses a distro 20

00:15:45,670 --> 00:15:51,520
version 28 and with that it uses another

00:15:49,690 --> 00:15:53,650
that is present in avocado which is

00:15:51,520 --> 00:15:56,020
called clouding it should configure that

00:15:53,650 --> 00:16:01,930
machine and should wait for it to ping

00:15:56,020 --> 00:16:06,270
back to call home so just to give you

00:16:01,930 --> 00:16:06,270
guys D idea of how this works

00:16:13,150 --> 00:16:19,240
see ya I cheated a little bit adding an

00:16:16,270 --> 00:16:24,910
stl they're just that you guys have got

00:16:19,240 --> 00:16:26,920
the feeling of what the testers do so

00:16:24,910 --> 00:16:31,600
should be you should see that it's

00:16:26,920 --> 00:16:33,730
getting info r28 it's moving a guest and

00:16:31,600 --> 00:16:39,870
it's basically waiting for the gas to

00:16:33,730 --> 00:16:39,870
call back the testings like the best

00:16:40,949 --> 00:16:47,819
it's nothing magical it's kind of simple

00:16:46,019 --> 00:16:50,489
stuff and that's the whole idea

00:16:47,819 --> 00:16:52,139
and the point and we got a pass and the

00:16:50,489 --> 00:16:54,089
whole thing is that because we're

00:16:52,139 --> 00:16:55,799
leveraging the avocado libraries you

00:16:54,089 --> 00:16:57,929
should be able to do something like okay

00:16:55,799 --> 00:17:00,839
I want to use another distros let's use

00:16:57,929 --> 00:17:03,829
that Ian and I'm gonna cheat about the

00:17:00,839 --> 00:17:10,260
version because it's a complex

00:17:03,829 --> 00:17:13,649
versioning string for that so I'm

00:17:10,260 --> 00:17:18,659
cheating but anyway I should now be

00:17:13,649 --> 00:17:20,939
booting w 9 6 9 5 6 something else and

00:17:18,659 --> 00:17:23,010
the result should just be the same just

00:17:20,939 --> 00:17:26,519
a different district so no major

00:17:23,010 --> 00:17:28,470
surprises there one other thing that

00:17:26,519 --> 00:17:31,169
we're working on it's kind of very

00:17:28,470 --> 00:17:33,000
similar to what was just presented here

00:17:31,169 --> 00:17:35,070
is that we understand that a lot of

00:17:33,000 --> 00:17:36,779
tests should in theory be working on

00:17:35,070 --> 00:17:38,970
more than one target architecture and

00:17:36,779 --> 00:17:41,460
this is there is another thread upstream

00:17:38,970 --> 00:17:43,279
in which we started proposing that

00:17:41,460 --> 00:17:47,159
concept and working on rounded people

00:17:43,279 --> 00:17:48,960
think of it so this is another thing

00:17:47,159 --> 00:17:51,929
that was already sent to the mailing

00:17:48,960 --> 00:17:55,590
list and this is kind of how it feels

00:17:51,929 --> 00:17:59,850
like so there is a test that I showed

00:17:55,590 --> 00:18:01,799
before let me go ahead and show the

00:17:59,850 --> 00:18:05,120
console the test message few

00:18:01,799 --> 00:18:11,429
interactions and run tests acceptance

00:18:05,120 --> 00:18:15,000
Linux so we should be booting a Linux

00:18:11,429 --> 00:18:17,399
kernel there for x86 there you go there

00:18:15,000 --> 00:18:20,039
was a pass and at the same time we

00:18:17,399 --> 00:18:23,399
should be able to do the same thing for

00:18:20,039 --> 00:18:27,269
a PPC 64 so now it's booting open

00:18:23,399 --> 00:18:31,260
framework it's booting qemu PPC 64

00:18:27,269 --> 00:18:34,370
target I got a PVC 6 Parker now as well

00:18:31,260 --> 00:18:36,870
so if you like a lot of tasks could be

00:18:34,370 --> 00:18:38,880
reused in different environments so that

00:18:36,870 --> 00:18:42,779
is a modern initiative that is going on

00:18:38,880 --> 00:18:44,730
upstream and on top of that when we

00:18:42,779 --> 00:18:47,399
really want to get things interesting we

00:18:44,730 --> 00:18:51,299
need to be interacting with guest OS so

00:18:47,399 --> 00:18:52,360
again the features already some basic

00:18:51,299 --> 00:18:55,299
features already present

00:18:52,360 --> 00:18:57,790
an avocado and we came up with this also

00:18:55,299 --> 00:19:02,380
example test called Linux hardware check

00:18:57,790 --> 00:19:03,940
so it basically reuses the keys that we

00:19:02,380 --> 00:19:07,750
already have like we have a private

00:19:03,940 --> 00:19:09,790
public key in the qmu tree we use asset

00:19:07,750 --> 00:19:14,440
and the one SSH library that was I don't

00:19:09,790 --> 00:19:16,720
you avocado and in theory you can

00:19:14,440 --> 00:19:18,610
combine that with qmp commands that

00:19:16,720 --> 00:19:20,410
hot-plug advice and then you check on

00:19:18,610 --> 00:19:24,760
the gas if that device was at it it's

00:19:20,410 --> 00:19:27,549
behaving properly and etc so the code

00:19:24,760 --> 00:19:36,130
for that it's again really simple and it

00:19:27,549 --> 00:19:39,790
works like this so Linux or UNIX I will

00:19:36,130 --> 00:19:42,850
check you sure the source code it sets

00:19:39,790 --> 00:19:45,640
up the same thing so that's a VM image a

00:19:42,850 --> 00:19:50,140
cloud in it and an interesting part is

00:19:45,640 --> 00:19:52,330
really here so it's booting so it

00:19:50,140 --> 00:19:56,380
stablished as a session using the same

00:19:52,330 --> 00:19:58,720
key and then it it knows about how queue

00:19:56,380 --> 00:20:00,820
has started so the amount of CPU the

00:19:58,720 --> 00:20:03,100
amount of memory and it logs into the

00:20:00,820 --> 00:20:05,679
get the guest and it compares those

00:20:03,100 --> 00:20:08,679
results and we have a pass and you can

00:20:05,679 --> 00:20:12,730
see how that was caught from the guest

00:20:08,679 --> 00:20:14,980
site what is happening now so there is

00:20:12,730 --> 00:20:18,220
actually a lot going on we have a Trello

00:20:14,980 --> 00:20:21,870
board in which we're prioritizing and

00:20:18,220 --> 00:20:21,870
documenting the stuff we were working on

00:20:22,590 --> 00:20:29,140
so you you feel free to to see the link

00:20:26,679 --> 00:20:31,780
to to the Trello board in the resources

00:20:29,140 --> 00:20:34,059
section and of course we have to talk

00:20:31,780 --> 00:20:37,090
about what's next we are having weekly

00:20:34,059 --> 00:20:40,030
meetings initially we start with this

00:20:37,090 --> 00:20:41,919
group of people here but we are going to

00:20:40,030 --> 00:20:44,250
post on cumulative a so you guys feel

00:20:41,919 --> 00:20:46,630
free to join us

00:20:44,250 --> 00:20:48,760
migration support is probably the next

00:20:46,630 --> 00:20:50,799
thing coming test sets it's also

00:20:48,760 --> 00:20:53,140
something we've talked about so people

00:20:50,799 --> 00:20:55,870
maintain errs can say I want to run a

00:20:53,140 --> 00:20:59,620
subset of tests so we're working on the

00:20:55,870 --> 00:21:02,200
finding how we're gonna tag or specify

00:20:59,620 --> 00:21:04,540
those job sets and also the use of

00:21:02,200 --> 00:21:06,010
community or independent testing to

00:21:04,540 --> 00:21:08,170
exercise really

00:21:06,010 --> 00:21:10,620
a lot of variations for the same tests

00:21:08,170 --> 00:21:13,150
is something that we are also working

00:21:10,620 --> 00:21:16,600
livered people if you're there you're

00:21:13,150 --> 00:21:18,460
interested let us know and of course

00:21:16,600 --> 00:21:21,880
whatever the community says that's what

00:21:18,460 --> 00:21:25,090
we want to work with a few resources and

00:21:21,880 --> 00:21:27,420
if you have any questions please do

00:21:25,090 --> 00:21:27,420
freak

00:21:33,730 --> 00:21:42,120
so in my opinion sorry maybe I'm

00:21:38,429 --> 00:21:46,419
experience using avocado noticed before

00:21:42,120 --> 00:21:49,059
when the test fail it's painful to like

00:21:46,419 --> 00:21:51,580
connect gdb to the starting to the QM

00:21:49,059 --> 00:21:54,279
binary that the test starting stuff like

00:21:51,580 --> 00:21:57,789
that because either you have to set up a

00:21:54,279 --> 00:21:59,649
breakpoint like modify the Python test

00:21:57,789 --> 00:22:02,470
and that and a read or something that

00:21:59,649 --> 00:22:03,970
just stops at the right time and in

00:22:02,470 --> 00:22:05,620
general this is reporting with debugging

00:22:03,970 --> 00:22:06,940
stuff that is across multiple pauses

00:22:05,620 --> 00:22:09,490
like in this case between Python and

00:22:06,940 --> 00:22:11,529
kamo so since my experience is like

00:22:09,490 --> 00:22:13,330
three years ago I wanted to ask if there

00:22:11,529 --> 00:22:16,480
is anything that you've improved on this

00:22:13,330 --> 00:22:19,029
side was your experience with avocado

00:22:16,480 --> 00:22:21,779
and the gdb functionality or well

00:22:19,029 --> 00:22:24,549
bakudan not the GDP functionality of

00:22:21,779 --> 00:22:26,200
like when you an avocado slash bin slash

00:22:24,549 --> 00:22:29,110
two that's fine

00:22:26,200 --> 00:22:31,570
the problem is if I want to attach for

00:22:29,110 --> 00:22:33,639
example to the QA mu binary that is

00:22:31,570 --> 00:22:37,090
started by QA machining and functional

00:22:33,639 --> 00:22:40,059
test is there anything for that oh I

00:22:37,090 --> 00:22:43,120
think I understand your point and I

00:22:40,059 --> 00:22:46,389
guess we haven't evolved that much

00:22:43,120 --> 00:22:52,120
probably because lack of new use cases

00:22:46,389 --> 00:22:58,570
or that's probably - so we can we can

00:22:52,120 --> 00:23:09,220
always improve on that yeah

00:22:58,570 --> 00:23:11,710
so the GDP function T should work for so

00:23:09,220 --> 00:23:15,399
you should be able to say gdb run been

00:23:11,710 --> 00:23:18,519
something we do know that that is not

00:23:15,399 --> 00:23:20,470
enough for a few process that behave

00:23:18,519 --> 00:23:22,809
like you does so we came up with a

00:23:20,470 --> 00:23:24,940
feature that you can give a set of

00:23:22,809 --> 00:23:27,130
initial commands that you want your gdb

00:23:24,940 --> 00:23:29,710
to run on so tweaking our signals and

00:23:27,130 --> 00:23:33,669
things like that so that that feature is

00:23:29,710 --> 00:23:37,269
there and other than that the fact that

00:23:33,669 --> 00:23:38,919
we really wanted to let people use gdb

00:23:37,269 --> 00:23:42,250
to actually connect to it

00:23:38,919 --> 00:23:45,279
ladders into a g DB server gdb split and

00:23:42,250 --> 00:23:47,559
on my experience depending on the number

00:23:45,279 --> 00:23:49,779
of symbols that you have things take

00:23:47,559 --> 00:23:52,960
some time to actually be pushed to the

00:23:49,779 --> 00:23:56,889
gdb server side so there may be other

00:23:52,960 --> 00:24:06,399
issues so we need to like exercise them

00:23:56,889 --> 00:24:09,850
like you are and yeah yeah wait I get

00:24:06,399 --> 00:24:12,820
the images problem okay so the avocado

00:24:09,850 --> 00:24:16,620
you choose VM image library it has a

00:24:12,820 --> 00:24:20,409
bunch of providers and these are mostly

00:24:16,620 --> 00:24:21,909
cloud based image images so it gets from

00:24:20,409 --> 00:24:24,369
the external repos but there is a

00:24:21,909 --> 00:24:25,960
caching mechanism there so the first

00:24:24,369 --> 00:24:27,820
time you catch them the first time you

00:24:25,960 --> 00:24:31,299
fetch them you're gonna be cached

00:24:27,820 --> 00:24:32,529
locally so you could add any any grief

00:24:31,299 --> 00:24:42,249
or anything to that later

00:24:32,529 --> 00:24:44,080
yeah you can extend it you mean the boot

00:24:42,249 --> 00:24:46,480
test yeah so the load test

00:24:44,080 --> 00:24:50,559
it sets up it creates a unique cloud you

00:24:46,480 --> 00:24:53,470
need I so that tells you that tells the

00:24:50,559 --> 00:24:56,039
guest how kind of a secret the test name

00:24:53,470 --> 00:24:59,289
which is supposed to be unique

00:24:56,039 --> 00:25:01,659
so that goes into the cloud you need ISO

00:24:59,289 --> 00:25:04,330
file and when the gas finishes booting

00:25:01,659 --> 00:25:07,169
the cloud in each agent will actually

00:25:04,330 --> 00:25:11,799
connect back to the testing system

00:25:07,169 --> 00:25:18,610
saying I'm guest foo and I have finished

00:25:11,799 --> 00:25:20,529
booting that means that so we have to

00:25:18,610 --> 00:25:23,399
come up with a secondary method so we're

00:25:20,529 --> 00:25:27,549
starting with the simple stuff the the

00:25:23,399 --> 00:25:30,070
most common and like for avocado VT we

00:25:27,549 --> 00:25:32,649
can monitor the serial session and look

00:25:30,070 --> 00:25:40,440
for patterns but we haven't done that

00:25:32,649 --> 00:25:40,440
here yet Eric

00:25:46,330 --> 00:25:52,340
guess witnessed networking is there

00:25:49,850 --> 00:25:54,290
security concerns for setting up a guest

00:25:52,340 --> 00:25:56,720
with a non ssh password are you

00:25:54,290 --> 00:25:57,980
confining things where we know it's an

00:25:56,720 --> 00:26:00,620
environment where even though it's a

00:25:57,980 --> 00:26:02,360
known SSH key it's only used by this

00:26:00,620 --> 00:26:04,250
guest and we're not gonna compromise the

00:26:02,360 --> 00:26:06,830
system by somebody who knows the

00:26:04,250 --> 00:26:08,390
well-known key so the way it's working

00:26:06,830 --> 00:26:09,800
right now again we're starting with the

00:26:08,390 --> 00:26:12,170
basics and then worrying about the

00:26:09,800 --> 00:26:15,050
details later so they're a pair of

00:26:12,170 --> 00:26:18,170
private pyle in public keys already in

00:26:15,050 --> 00:26:21,290
the qmu tree so what we do is we create

00:26:18,170 --> 00:26:25,040
this cloud you need ISO again with the

00:26:21,290 --> 00:26:26,810
public key that gets configured into the

00:26:25,040 --> 00:26:31,520
guest and that's how the host can

00:26:26,810 --> 00:26:34,140
actually connect into the guest okay

00:26:31,520 --> 00:26:35,480
thank you thank you

00:26:34,140 --> 00:26:41,259
[Applause]

00:26:35,480 --> 00:26:41,259

YouTube URL: https://www.youtube.com/watch?v=kJ1jd86v-v0


