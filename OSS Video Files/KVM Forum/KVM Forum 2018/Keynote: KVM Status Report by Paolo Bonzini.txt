Title: Keynote: KVM Status Report by Paolo Bonzini
Publication date: 2018-11-14
Playlist: KVM Forum 2018
Description: 
	Paolo Bonzini
Senior Principal Software Engineer
Red Hat, Inc.

Paolo is a long-time KVM contributor and co-maintainer; he also co-maintains some subsystems in QEMU. He works at Red Hat.
Captions: 
	00:00:00,350 --> 00:00:02,710
[Music]

00:00:05,960 --> 00:00:14,969
so welcome to the last two days out of

00:00:11,040 --> 00:00:17,070
three of kayvyun from 2019

00:00:14,969 --> 00:00:21,090
I'm Paula bernzini I'm the upstream KVM

00:00:17,070 --> 00:00:24,570
maintainer not alone in this but I'm the

00:00:21,090 --> 00:00:28,080
one that will be giving the update on on

00:00:24,570 --> 00:00:31,769
KVM this year so last year key informant

00:00:28,080 --> 00:00:35,760
was also held in October so Linux 4.14

00:00:31,769 --> 00:00:38,309
was raised released in 2017 in November

00:00:35,760 --> 00:00:42,450
and we're going to have actually we

00:00:38,309 --> 00:00:46,320
already had 4.19 last Sunday so pretty

00:00:42,450 --> 00:00:48,750
much one year between two conferences

00:00:46,320 --> 00:00:51,780
with five religious of Linux and we

00:00:48,750 --> 00:00:53,250
already are heading towards the sixties

00:00:51,780 --> 00:00:54,469
with the multi-window currently in

00:00:53,250 --> 00:00:57,510
progress

00:00:54,469 --> 00:00:58,859
the rhythm of development the pace of

00:00:57,510 --> 00:00:59,600
development is pretty much the same as

00:00:58,859 --> 00:01:02,789
last year

00:00:59,600 --> 00:01:05,939
KVM is still going but it's like not

00:01:02,789 --> 00:01:10,530
growing in speed which is a good thing

00:01:05,939 --> 00:01:12,740
because it's mature software it's wood

00:01:10,530 --> 00:01:15,990
there's still lots of work to do but

00:01:12,740 --> 00:01:19,530
it's something that should be also be

00:01:15,990 --> 00:01:23,100
stable so we have about 1,200 commits

00:01:19,530 --> 00:01:24,509
from 150 authors and employers have

00:01:23,100 --> 00:01:27,090
always difficult to compute exactly

00:01:24,509 --> 00:01:29,220
because people use their personal

00:01:27,090 --> 00:01:32,850
accounts or the university accounts or

00:01:29,220 --> 00:01:37,939
whatever but at least 15 companies have

00:01:32,850 --> 00:01:41,670
contributed their employees work to KPM

00:01:37,939 --> 00:01:43,740
you can see that the number of commits

00:01:41,670 --> 00:01:46,520
in each release goes a bit up and down

00:01:43,740 --> 00:01:49,110
some realities have lots of work for

00:01:46,520 --> 00:01:50,820
maybe just because the stars line and

00:01:49,110 --> 00:01:55,799
all architectures put their work

00:01:50,820 --> 00:01:57,570
together in 4 or 16 other religions are

00:01:55,799 --> 00:02:00,060
a bit more car-like for the taking but

00:01:57,570 --> 00:02:05,490
usually while hovering around 200

00:02:00,060 --> 00:02:08,729
commits per per release so who

00:02:05,490 --> 00:02:11,670
contributes these commits basically

00:02:08,729 --> 00:02:13,650
three categories Hydra vandals

00:02:11,670 --> 00:02:15,959
hypervisor vandals cloud by now

00:02:13,650 --> 00:02:17,459
of course hardware vendors want to make

00:02:15,959 --> 00:02:20,040
even better for their poor source

00:02:17,459 --> 00:02:21,840
hypervisor vendors want to make it even

00:02:20,040 --> 00:02:25,049
better for their products and cloud

00:02:21,840 --> 00:02:28,439
vendors actually have two subgroups one

00:02:25,049 --> 00:02:33,569
subgroup is basically cloud vendors that

00:02:28,439 --> 00:02:37,109
are using KVM for the as they're happy

00:02:33,569 --> 00:02:39,450
files hypervisor and that includes

00:02:37,109 --> 00:02:42,959
Amazon Google $0.10

00:02:39,450 --> 00:02:45,599
and there are many other cloud vendors

00:02:42,959 --> 00:02:49,260
that you CVM usually together with

00:02:45,599 --> 00:02:50,069
OpenStack or with their custom stack as

00:02:49,260 --> 00:02:52,109
their hypervisor

00:02:50,069 --> 00:02:56,959
the other group is basically just

00:02:52,109 --> 00:03:00,359
Microsoft well I'm serious because

00:02:56,959 --> 00:03:04,730
Microsoft is using hyper-v on one answer

00:03:00,359 --> 00:03:11,370
but a lot of Europeans are running

00:03:04,730 --> 00:03:15,540
running Linux and agile supports also an

00:03:11,370 --> 00:03:17,699
asset virtualization in Google supported

00:03:15,540 --> 00:03:19,970
on Anki via Microsoft support on hyper-v

00:03:17,699 --> 00:03:24,540
and they want

00:03:19,970 --> 00:03:26,129
KVM to work well when nested under

00:03:24,540 --> 00:03:29,129
hyper-v so they have their own power

00:03:26,129 --> 00:03:31,169
virtualization techniques which we call

00:03:29,129 --> 00:03:32,790
enlightenment and we've been working on

00:03:31,169 --> 00:03:37,049
any more and more enlightenment to

00:03:32,790 --> 00:03:41,549
exceed 6km I will go back to this topic

00:03:37,049 --> 00:03:44,150
later so you can see that if you look at

00:03:41,549 --> 00:03:47,370
the employers the lion's share is the

00:03:44,150 --> 00:03:50,909
possessor manufacturers Red Hat of

00:03:47,370 --> 00:03:55,260
course contributes a lot both for x86

00:03:50,909 --> 00:03:57,209
and for other architectures and then

00:03:55,260 --> 00:04:02,010
there's Intel or called Google Tencent

00:03:57,209 --> 00:04:05,459
MD and a pretty long tail of commits

00:04:02,010 --> 00:04:10,319
from other companies many of these are

00:04:05,459 --> 00:04:12,299
sometimes also global changes throughout

00:04:10,319 --> 00:04:14,669
the Linux kernel and of course they also

00:04:12,299 --> 00:04:19,500
fact a vm if you look at the

00:04:14,669 --> 00:04:22,919
architecture a lot of changes to x86

00:04:19,500 --> 00:04:25,639
this year last year the top architecture

00:04:22,919 --> 00:04:27,540
by commits was armed this year it's x86

00:04:25,639 --> 00:04:30,510
you can see that

00:04:27,540 --> 00:04:33,780
I be I'm contributing both to be pianist

00:04:30,510 --> 00:04:35,550
90 has quite a few commits as well and

00:04:33,780 --> 00:04:37,770
that's why I be a most basically number

00:04:35,550 --> 00:04:40,610
two in this other chart

00:04:37,770 --> 00:04:42,780
meeps this year had basically no

00:04:40,610 --> 00:04:45,930
activity all those eleven commits

00:04:42,780 --> 00:04:51,060
actually three wide changes but it's

00:04:45,930 --> 00:04:57,930
still active and used and supported in

00:04:51,060 --> 00:05:01,890
cameo and it's it's not like dead code

00:04:57,930 --> 00:05:03,000
or it's not be talking so it's okay they

00:05:01,890 --> 00:05:08,130
don't have work to do

00:05:03,000 --> 00:05:12,450
good for them and so let's look at the

00:05:08,130 --> 00:05:14,730
highlights for this year on xt6 we had

00:05:12,450 --> 00:05:16,530
lots and lots of work on acid

00:05:14,730 --> 00:05:18,680
visualization for Intel with cleanups

00:05:16,530 --> 00:05:21,720
bug fixes support for lab migration

00:05:18,680 --> 00:05:25,260
support for nested nested virtualization

00:05:21,720 --> 00:05:27,320
so VM says shadowing in the l1e

00:05:25,260 --> 00:05:29,940
hypervisor

00:05:27,320 --> 00:05:33,480
md contributed the support for their

00:05:29,940 --> 00:05:35,730
encrypted virtualization technology and

00:05:33,480 --> 00:05:39,990
we had lots of para virtualization both

00:05:35,730 --> 00:05:44,040
cajon specific for TLB shut down and api

00:05:39,990 --> 00:05:48,050
is contributed by $0.10 and Microsoft as

00:05:44,040 --> 00:05:53,700
before contributed hyper-v Enlightenment

00:05:48,050 --> 00:05:56,040
and organist brutalization a lot of the

00:05:53,700 --> 00:06:01,110
experience from this year will be also

00:05:56,040 --> 00:06:03,080
in a talk later today and also we had

00:06:01,110 --> 00:06:05,850
this speculative execution

00:06:03,080 --> 00:06:11,520
vulnerabilities which nobody would have

00:06:05,850 --> 00:06:15,920
expected last year but actually some

00:06:11,520 --> 00:06:18,360
people knew already about last year and

00:06:15,920 --> 00:06:19,860
an interesting outcome

00:06:18,360 --> 00:06:22,500
besides fixing the vulnerabilities that

00:06:19,860 --> 00:06:24,660
we got support for specifying CPU

00:06:22,500 --> 00:06:28,650
features not just through CID bits but

00:06:24,660 --> 00:06:30,960
also through a massage and this is was a

00:06:28,650 --> 00:06:33,900
useful feature was on the to do list for

00:06:30,960 --> 00:06:37,410
a while but now we had a very good

00:06:33,900 --> 00:06:39,639
reason to do it finally I'm actually

00:06:37,410 --> 00:06:43,659
just went and optimized all the

00:06:39,639 --> 00:06:46,449
things they if you look at all the

00:06:43,659 --> 00:06:48,699
commits the merge commits and in the

00:06:46,449 --> 00:06:50,770
poorer classes as optimization some bug

00:06:48,699 --> 00:06:52,210
fixes optimization Mafia's optimization

00:06:50,770 --> 00:06:54,789
my fix is through all the releases

00:06:52,210 --> 00:06:56,560
basically but also support for the new

00:06:54,789 --> 00:06:59,409
interim controller version for geek

00:06:56,560 --> 00:07:02,820
before and also as a stands for

00:06:59,409 --> 00:07:06,539
reliability something an serviceability

00:07:02,820 --> 00:07:08,289
[Laughter]

00:07:06,539 --> 00:07:12,969
liability availability and

00:07:08,289 --> 00:07:14,680
serviceability so machine jacks and that

00:07:12,969 --> 00:07:16,389
kind of things that should happen but

00:07:14,680 --> 00:07:19,060
when you happen you should report it to

00:07:16,389 --> 00:07:22,349
the guest if it happens to the guest so

00:07:19,060 --> 00:07:22,349
that the guys can handle it properly

00:07:22,529 --> 00:07:28,509
power got more support for power nine

00:07:26,650 --> 00:07:29,620
and a stabilization for time as well

00:07:28,509 --> 00:07:32,080
which is kind of interesting because

00:07:29,620 --> 00:07:33,699
they had to basically paravirtualized it

00:07:32,080 --> 00:07:38,409
because of the way the processor works

00:07:33,699 --> 00:07:42,460
and also they had specter meltdown for

00:07:38,409 --> 00:07:44,319
astra 90 exit less interrupts more or

00:07:42,460 --> 00:07:46,060
less the same thing as for those of you

00:07:44,319 --> 00:07:49,000
that are familiar with x86 posted

00:07:46,060 --> 00:07:50,800
interrupts last year they had massive

00:07:49,000 --> 00:07:53,800
virtualization and they have improved on

00:07:50,800 --> 00:07:55,990
it they have acceleration of

00:07:53,800 --> 00:07:57,939
cryptographic accelerated graphics

00:07:55,990 --> 00:08:00,969
accelerator in the host you can use it

00:07:57,939 --> 00:08:02,860
in the gas through the FIU IP which

00:08:00,969 --> 00:08:05,020
needs some support from KTM as well and

00:08:02,860 --> 00:08:07,750
also initial support for host large

00:08:05,020 --> 00:08:12,729
pages which is taken aster 92 the due to

00:08:07,750 --> 00:08:15,899
the way the hypervisor works and also of

00:08:12,729 --> 00:08:20,009
course they have back to be - who didn't

00:08:15,899 --> 00:08:22,389
so let's go back to NASA brutalization

00:08:20,009 --> 00:08:25,589
last year there was already talk talking

00:08:22,389 --> 00:08:28,169
about nested via Maxis performance and

00:08:25,589 --> 00:08:31,210
it pointed out some unnecessary

00:08:28,169 --> 00:08:33,669
operation that were being done on every

00:08:31,210 --> 00:08:37,089
exit so we removed them according to the

00:08:33,669 --> 00:08:40,449
indications of the talk there was also

00:08:37,089 --> 00:08:42,789
very good work on scaling the shadow

00:08:40,449 --> 00:08:46,750
paging especially at the exit time

00:08:42,789 --> 00:08:50,069
between switches between l2 and l1 the

00:08:46,750 --> 00:08:52,320
MMU spinlock was really hit heavily and

00:08:50,069 --> 00:08:54,540
as a result even for

00:08:52,320 --> 00:08:56,880
like for BCPs you could have like four

00:08:54,540 --> 00:08:58,470
times slower or vienna exits which is

00:08:56,880 --> 00:09:01,280
pretty much gone it's like now like

00:08:58,470 --> 00:09:04,370
maybe 20% slower or something like that

00:09:01,280 --> 00:09:07,620
totally bearable

00:09:04,370 --> 00:09:10,260
another one is event injection so what

00:09:07,620 --> 00:09:12,510
happens if you have to inject an

00:09:10,260 --> 00:09:14,220
interrupting the two guys but that

00:09:12,510 --> 00:09:17,580
interact maybe has to be serviced by the

00:09:14,220 --> 00:09:20,550
l1 guests or maybe you injecting the

00:09:17,580 --> 00:09:21,990
interrupt but you find out that in order

00:09:20,550 --> 00:09:23,310
to inject the interrupt you have to take

00:09:21,990 --> 00:09:25,790
a page fault because the interrupt

00:09:23,310 --> 00:09:28,830
handler isn't there or stuff like that

00:09:25,790 --> 00:09:31,800
lots of fixes in this area and the good

00:09:28,830 --> 00:09:34,350
side of this was not only we have fixed

00:09:31,800 --> 00:09:38,090
bugs but everybody understands the event

00:09:34,350 --> 00:09:42,270
injection better and it's a tricky

00:09:38,090 --> 00:09:46,590
mechanism and now it's more understood

00:09:42,270 --> 00:09:49,100
and also cleaner code lab migration

00:09:46,590 --> 00:09:52,140
support for Dell one guys has two sides

00:09:49,100 --> 00:09:56,490
one is reporting the host capabilities

00:09:52,140 --> 00:10:01,100
for v-max because those are stored in a

00:09:56,490 --> 00:10:06,380
massage no not in CID bit and if you

00:10:01,100 --> 00:10:08,490
have your host capabilities in MS our

00:10:06,380 --> 00:10:11,300
user space cannot read it because

00:10:08,490 --> 00:10:14,310
reading an MSR is a privileged operation

00:10:11,300 --> 00:10:17,730
so the new support forums are based

00:10:14,310 --> 00:10:20,490
features also helped a lot for lab

00:10:17,730 --> 00:10:22,980
migration support this way you can

00:10:20,490 --> 00:10:25,950
actually know - which hosts you can live

00:10:22,980 --> 00:10:28,170
migrate your host and of course once you

00:10:25,950 --> 00:10:29,670
know - well you have to migrate it you

00:10:28,170 --> 00:10:31,950
have to save and restore the nasty

00:10:29,670 --> 00:10:34,140
virtualization State this took a while

00:10:31,950 --> 00:10:35,790
was contributed by Google and never

00:10:34,140 --> 00:10:38,340
committed contributed by Amazon and

00:10:35,790 --> 00:10:40,470
never committed and now finally

00:10:38,340 --> 00:10:44,660
contributed by Oracle and with some help

00:10:40,470 --> 00:10:49,560
from reddit committed so nice

00:10:44,660 --> 00:10:53,190
cooperation and the group work and also

00:10:49,560 --> 00:10:54,690
this teaches you that if somebody

00:10:53,190 --> 00:10:57,450
submitted the pass and didn't follow up

00:10:54,690 --> 00:11:00,420
on it but you are interested pick up the

00:10:57,450 --> 00:11:02,160
work finish it and it will be done maybe

00:11:00,420 --> 00:11:03,140
for whatever reason the original

00:11:02,160 --> 00:11:05,930
submitter moved on

00:11:03,140 --> 00:11:09,730
for now all this work on an acid

00:11:05,930 --> 00:11:12,110
virtualization is Intel only but it

00:11:09,730 --> 00:11:14,750
doesn't have to be just nobody what the

00:11:12,110 --> 00:11:20,150
call for AMD but it's possible to bring

00:11:14,750 --> 00:11:22,730
all the improvements also to to AMD now

00:11:20,150 --> 00:11:25,970
in last topic is testing of course we

00:11:22,730 --> 00:11:29,930
have KTM unit test beloved repository

00:11:25,970 --> 00:11:32,810
with lots of new tests especially in a

00:11:29,930 --> 00:11:35,120
civilization tests across 180 commits in

00:11:32,810 --> 00:11:39,590
the last year but we also have the API

00:11:35,120 --> 00:11:41,540
self tests they are new in 4.17 but they

00:11:39,590 --> 00:11:44,360
already have support for both x86 and

00:11:41,540 --> 00:11:52,400
arm so yesterday as the 90 and PowerPC

00:11:44,360 --> 00:11:56,120
guys come on the API self tests have

00:11:52,400 --> 00:12:00,610
guests that run outside of qmo so you

00:11:56,120 --> 00:12:00,610
can actually determine precisely what

00:12:00,940 --> 00:12:06,080
api's are invoked testing the corner

00:12:03,680 --> 00:12:07,490
cases testing race conditions and they

00:12:06,080 --> 00:12:14,510
were all contributed again by Google and

00:12:07,490 --> 00:12:16,310
picked up by Red Hat and for example the

00:12:14,510 --> 00:12:18,230
apply self-test allow testing nested

00:12:16,310 --> 00:12:21,050
virtualization save and restore without

00:12:18,230 --> 00:12:25,880
having support for that in qmo and also

00:12:21,050 --> 00:12:29,180
testing various phases of the vm acts in

00:12:25,880 --> 00:12:32,270
initialization and saying that you can

00:12:29,180 --> 00:12:34,580
do the severest or precisely at all of

00:12:32,270 --> 00:12:37,730
these phases and it would be hard to do

00:12:34,580 --> 00:12:41,990
with just continuous live migration of a

00:12:37,730 --> 00:12:45,410
qm against its its it doesn't allow to

00:12:41,990 --> 00:12:47,750
test you to test anything as easily

00:12:45,410 --> 00:12:50,030
sometimes things are easier to test with

00:12:47,750 --> 00:12:53,030
community tests but there are cases like

00:12:50,030 --> 00:12:55,840
again race conditions for example where

00:12:53,030 --> 00:12:59,300
the api sisters are really life-saving

00:12:55,840 --> 00:13:01,160
the work some old api tests in k vm unit

00:12:59,300 --> 00:13:02,660
tests and we were probably going to

00:13:01,160 --> 00:13:05,210
convert them to the new framework soon

00:13:02,660 --> 00:13:07,010
new frameworks lives in the linux git

00:13:05,210 --> 00:13:08,510
repository to make sense because they

00:13:07,010 --> 00:13:12,740
are essentially unit tests for code

00:13:08,510 --> 00:13:16,270
really just in in linux not healthy in

00:13:12,740 --> 00:13:18,160
excel qmo so you can find them there and

00:13:16,270 --> 00:13:21,930
you want to contribute more tests you're

00:13:18,160 --> 00:13:24,630
done you're welcome I'm done don't worry

00:13:21,930 --> 00:13:28,880
[Laughter]

00:13:24,630 --> 00:13:34,750
[Applause]

00:13:28,880 --> 00:13:34,750

YouTube URL: https://www.youtube.com/watch?v=5wS6MXi4rbU


