Title: “Honey, I Shrunk the Hypervisor” - Building a Legacy Free Platform for QEMU by Robert Bradford
Publication date: 2018-11-14
Playlist: KVM Forum 2018
Description: 
	When virtualization first appeared in hardware platforms it was necessary to use emulation for many parts of the implementation of the virtual machine. However with new virtualization support and the development of paravirtualized devices less of the platform needs to be emulated. The removal of legacy emulation has many benefits including reducing attack surface and reduced binary size.

In this presentation we will describe our effort to produce a legacy free platform using QEMU and the progress so far. We outline the issues we encountered with tightly coupled dependencies, firmware expectations and operating system assumptions and how we go about resolving those. The features required to run Kata Containers, which utilises QEMU functionality not ordinarily used, guides our direction on what our platform needs to look like and acts as one of our validation tools.

---

Rob Bradford
Software Engineer
Intel Corporation

Rob has worked at Intel Open Source Technology Center for over 10 years on a wide variety of projects spanning from client user experiences, to graphics, to system software and now cloud technologies. 

In the field of cloud technologies Rob has been a key contributor to the Cloud Integrated Advanced Orchestrator (Ciao) project and is now working towards reducing the amount of legacy needed in a hypervisor to support Cloud workloads.
Captions: 
	00:00:01,040 --> 00:00:08,189
[Music]

00:00:06,080 --> 00:00:09,300
sorry about the delays it said they

00:00:08,189 --> 00:00:13,170
obviously the years are the next best

00:00:09,300 --> 00:00:14,880
off and my name's robert bradford I hope

00:00:13,170 --> 00:00:17,190
you enjoyed Eric's story through an

00:00:14,880 --> 00:00:19,260
attending I mean I am also in the

00:00:17,190 --> 00:00:20,730
open-source technology center and today

00:00:19,260 --> 00:00:25,350
I'm going to be talking about the work

00:00:20,730 --> 00:00:28,080
of it myself around me doing to help

00:00:25,350 --> 00:00:30,420
shrink the hypervisor and one of the

00:00:28,080 --> 00:00:33,300
major motivations for that is focused on

00:00:30,420 --> 00:00:37,050
security and one thing to think about

00:00:33,300 --> 00:00:41,370
here is that you know we need to be able

00:00:37,050 --> 00:00:43,890
to improve the security of our of our

00:00:41,370 --> 00:00:46,620
stack and one way we look at it is in

00:00:43,890 --> 00:00:50,010
terms of amount of emulation

00:00:46,620 --> 00:00:53,100
that we have so I did a bit of a little

00:00:50,010 --> 00:00:56,370
very back-of-the-envelope statistical

00:00:53,100 --> 00:00:57,719
analysis I'm sure as you're aware 101

00:00:56,370 --> 00:00:59,609
percent of statistics presented on the

00:00:57,719 --> 00:01:03,059
second slide of any slide deck might

00:00:59,609 --> 00:01:06,299
well be made up about about 50% of the

00:01:03,059 --> 00:01:09,650
CVS in the last 5 years against qmu

00:01:06,299 --> 00:01:14,159
featured the comment in the description

00:01:09,650 --> 00:01:17,580
that it was an emulated device and so

00:01:14,159 --> 00:01:19,140
one thing to think about here is that if

00:01:17,580 --> 00:01:21,509
we could remove some of that Hardware

00:01:19,140 --> 00:01:24,150
emulation from CMU particularly

00:01:21,509 --> 00:01:28,140
emulation of like historical legacy

00:01:24,150 --> 00:01:30,270
devices we would be able to remove some

00:01:28,140 --> 00:01:33,659
of the potential security problems that

00:01:30,270 --> 00:01:34,470
you might see with Kimia and the other

00:01:33,659 --> 00:01:37,890
thing to think about that is that

00:01:34,470 --> 00:01:40,350
historically in order to be able to boot

00:01:37,890 --> 00:01:42,299
a virtual machine we needed to have more

00:01:40,350 --> 00:01:44,880
software support but with modern

00:01:42,299 --> 00:01:49,430
hardware we need less software support

00:01:44,880 --> 00:01:52,409
and so we're able to do more work

00:01:49,430 --> 00:01:56,549
without emulation by just exploiting

00:01:52,409 --> 00:01:59,719
heart rate futures and further modern

00:01:56,549 --> 00:02:01,710
distributions feature large amounts of

00:01:59,719 --> 00:02:07,200
drivers for HAMP handling

00:02:01,710 --> 00:02:10,849
paravirtualized vices Verta a etc and so

00:02:07,200 --> 00:02:13,170
when we think about when we think about

00:02:10,849 --> 00:02:13,810
security we often think about how hard

00:02:13,170 --> 00:02:16,600
it be to order

00:02:13,810 --> 00:02:18,760
and one metric yes it's an imperfect

00:02:16,600 --> 00:02:21,459
metric is to think about the lines of

00:02:18,760 --> 00:02:24,040
code and so if you have fewer lines of

00:02:21,459 --> 00:02:27,459
code hopefully you've got fewer bugs and

00:02:24,040 --> 00:02:30,100
also easier to audit

00:02:27,459 --> 00:02:32,970
so what one of the projects that we led

00:02:30,100 --> 00:02:37,270
to was as inspired by this little fishie

00:02:32,970 --> 00:02:42,250
was a project called ninu and Nimue is

00:02:37,270 --> 00:02:46,930
effort to try and minimize the security

00:02:42,250 --> 00:02:49,959
attack surface by by voiding and

00:02:46,930 --> 00:02:53,170
removing emulation so what we'd be doing

00:02:49,959 --> 00:02:54,760
is we're taking qme and we have thought

00:02:53,170 --> 00:02:56,739
about what are the workloads that are

00:02:54,760 --> 00:02:59,319
needed for the modern cloud and

00:02:56,739 --> 00:03:01,840
therefore we will move any of the

00:02:59,319 --> 00:03:05,530
features that are not required for those

00:03:01,840 --> 00:03:07,300
cloud workloads but at the same time we

00:03:05,530 --> 00:03:12,100
keep all the performance and robustness

00:03:07,300 --> 00:03:13,269
that we already get with queue and so we

00:03:12,100 --> 00:03:15,970
want to project

00:03:13,269 --> 00:03:19,120
NIEM you the name you name stands for no

00:03:15,970 --> 00:03:21,180
emulation and as I'll point out in a

00:03:19,120 --> 00:03:24,269
moment we're not quite there

00:03:21,180 --> 00:03:27,519
so our goals I'll mention with for

00:03:24,269 --> 00:03:28,959
smaller attack surface by reducing the

00:03:27,519 --> 00:03:31,420
amount of code we can have a smaller tax

00:03:28,959 --> 00:03:33,730
assessor and at the same time high

00:03:31,420 --> 00:03:37,090
performance it should be comparable to

00:03:33,730 --> 00:03:42,780
queue we don't want any hard elope our

00:03:37,090 --> 00:03:45,430
goal is no harder emulation and in

00:03:42,780 --> 00:03:48,690
associated with that no legacy hardware

00:03:45,430 --> 00:03:51,970
support and related to that aspect

00:03:48,690 --> 00:03:57,670
moving towards modern firmware solutions

00:03:51,970 --> 00:03:59,980
such as VMs and keep it in order to

00:03:57,670 --> 00:04:01,630
facilitate that we set a goal of only

00:03:59,980 --> 00:04:04,570
supporting modern Linux distributions

00:04:01,630 --> 00:04:05,650
and one window modern windows so we

00:04:04,570 --> 00:04:10,329
don't necessarily need to be able to

00:04:05,650 --> 00:04:11,829
support booting Windows XP also related

00:04:10,329 --> 00:04:12,910
to that reducing the set of

00:04:11,829 --> 00:04:16,120
architectures that are supported

00:04:12,910 --> 00:04:21,510
focusing on x86 and sixth work and six

00:04:16,120 --> 00:04:25,360
arm 64 but again up in terms of

00:04:21,510 --> 00:04:27,160
complexity and legacy functionality we

00:04:25,360 --> 00:04:31,360
set the goal of focusing on

00:04:27,160 --> 00:04:33,130
harder reduced a CPI specification in

00:04:31,360 --> 00:04:35,620
order to facilitate use cases such as

00:04:33,130 --> 00:04:37,810
Catholic and heinous we needed to make

00:04:35,620 --> 00:04:45,760
sure we could support ha plug to CPU

00:04:37,810 --> 00:04:53,170
memory envied him put him hardware

00:04:45,760 --> 00:04:55,750
emulation a significant amount of code

00:04:53,170 --> 00:04:56,980
where it's hard I would say harder

00:04:55,750 --> 00:05:00,390
modeling is a better way of describing

00:04:56,980 --> 00:05:03,270
what it was in Hardware emulation and

00:05:00,390 --> 00:05:09,970
any kind of code that is there to

00:05:03,270 --> 00:05:11,080
emulate a device that is not that where

00:05:09,970 --> 00:05:13,360
that where there is a better alternative

00:05:11,080 --> 00:05:14,650
just using para virtualization as I

00:05:13,360 --> 00:05:15,750
think it's properly a good way of

00:05:14,650 --> 00:05:17,950
putting it

00:05:15,750 --> 00:05:19,690
[Music]

00:05:17,950 --> 00:05:23,590
so we came up with an initial proof of

00:05:19,690 --> 00:05:26,650
concept I found this beautiful picture

00:05:23,590 --> 00:05:28,870
from the state archives of Queen and our

00:05:26,650 --> 00:05:30,940
interviews concerts in May and we just

00:05:28,870 --> 00:05:34,060
got together and we just start deleting

00:05:30,940 --> 00:05:36,190
code we took PC q35

00:05:34,060 --> 00:05:37,750
and the arm verb platform and then we

00:05:36,190 --> 00:05:40,650
had some automated tools which I

00:05:37,750 --> 00:05:44,200
developed which are high sophisticated

00:05:40,650 --> 00:05:45,940
iteration bash scripts and just we ran

00:05:44,200 --> 00:05:49,180
the compilation look at all the files

00:05:45,940 --> 00:05:51,310
get touched and then basically you need

00:05:49,180 --> 00:05:52,960
Union bows work out all the files in the

00:05:51,310 --> 00:05:54,610
repo subtract them and set and delete

00:05:52,960 --> 00:05:55,990
everything else and head and hopefully

00:05:54,610 --> 00:05:58,570
it will still build after then it almost

00:05:55,990 --> 00:06:00,510
only does and that gave us a huge

00:05:58,570 --> 00:06:05,140
reduction in code seventy-five percent

00:06:00,510 --> 00:06:07,540
binary reduced a few megabytes machette

00:06:05,140 --> 00:06:11,550
libraries in our honor and our and we

00:06:07,540 --> 00:06:14,050
had a few devices and reduced as well

00:06:11,550 --> 00:06:15,280
now one thing we did do is as well as

00:06:14,050 --> 00:06:18,850
the automatic over if there was some

00:06:15,280 --> 00:06:20,260
manual code removal and we published

00:06:18,850 --> 00:06:21,760
that plug who published his work and

00:06:20,260 --> 00:06:24,640
we've gotten feedback from it

00:06:21,760 --> 00:06:29,460
and one of the things that we sort of

00:06:24,640 --> 00:06:34,030
realized from this was we heard a

00:06:29,460 --> 00:06:38,440
q35 or PC and we deleted some things and

00:06:34,030 --> 00:06:39,800
so it was no longer PC or q35 and there

00:06:38,440 --> 00:06:44,900
were some things in aspects

00:06:39,800 --> 00:06:46,490
that were very hard to remove and it's

00:06:44,900 --> 00:06:49,099
fundamentally in the design of those

00:06:46,490 --> 00:06:51,289
machines that they emulate and they are

00:06:49,099 --> 00:06:54,830
true as to choose possible replicas or

00:06:51,289 --> 00:06:55,849
part of true hardware platforms so we

00:06:54,830 --> 00:06:59,449
thought we need to look at something

00:06:55,849 --> 00:07:02,090
different so we thought how can we go

00:06:59,449 --> 00:07:06,409
smaller and so we built a new machine

00:07:02,090 --> 00:07:09,680
type called vert and this helped us

00:07:06,409 --> 00:07:12,319
align a bit better with our goals we

00:07:09,680 --> 00:07:13,900
were able to implement a hardware

00:07:12,319 --> 00:07:19,009
reduced ACPI

00:07:13,900 --> 00:07:22,490
barcode and so we we have that we ported

00:07:19,009 --> 00:07:24,699
OPM evan and most recently kyboot to run

00:07:22,490 --> 00:07:29,449
on this bird machine type we have

00:07:24,699 --> 00:07:30,409
minimized hardware emulation and we

00:07:29,449 --> 00:07:37,940
don't have that we don't have any legacy

00:07:30,409 --> 00:07:42,199
hardware so no pps2 no is a and we were

00:07:37,940 --> 00:07:44,719
able to develop a CPA hot plug and as we

00:07:42,199 --> 00:07:47,449
were a small team we needed to have a

00:07:44,719 --> 00:07:48,889
good CI system to help us develop and

00:07:47,449 --> 00:07:50,240
test so built all those things together

00:07:48,889 --> 00:07:54,770
and I'll go into a little bit more

00:07:50,240 --> 00:07:57,590
detail on all of those so in terms of

00:07:54,770 --> 00:08:00,460
how to reduce a CPI this is a hardware

00:07:57,590 --> 00:08:02,779
specification it's implemented by a few

00:08:00,460 --> 00:08:05,180
very small number of hardware devices in

00:08:02,779 --> 00:08:07,029
the world but it's very much focused on

00:08:05,180 --> 00:08:10,819
something where you don't need to have

00:08:07,029 --> 00:08:14,539
legacy hardware it does away with the a

00:08:10,819 --> 00:08:16,909
CPI fixed function hardware and it's up

00:08:14,539 --> 00:08:21,190
specific and it's very well suited for a

00:08:16,909 --> 00:08:25,129
virtual a purely virtual machine type

00:08:21,190 --> 00:08:27,610
and the code required to support it both

00:08:25,129 --> 00:08:31,209
inside the kernel and inside qmu is

00:08:27,610 --> 00:08:34,130
significantly smaller unfortunately

00:08:31,209 --> 00:08:37,370
there is you do require a kernel patch

00:08:34,130 --> 00:08:40,969
to be able to build this and use this

00:08:37,370 --> 00:08:43,430
inside in the Linux kernel because the

00:08:40,969 --> 00:08:45,440
the hot-plug support it's only available

00:08:43,430 --> 00:08:46,940
in you can part with config hard reduce

00:08:45,440 --> 00:08:48,800
only which is not useful if you want to

00:08:46,940 --> 00:08:53,290
have a kernel so it's simple make file

00:08:48,800 --> 00:08:56,440
change we added a sport or firmware

00:08:53,290 --> 00:08:58,780
at UF I added changes to OPM f the main

00:08:56,440 --> 00:09:01,680
difference was to work around the AC to

00:08:58,780 --> 00:09:05,260
remove to have a alternative solution to

00:09:01,680 --> 00:09:08,110
the a CPI timer which is used for nano

00:09:05,260 --> 00:09:10,870
sleep and micro sleep instead use KPM

00:09:08,110 --> 00:09:12,330
clock and work it out based on the T and

00:09:10,870 --> 00:09:15,160
T Fe

00:09:12,330 --> 00:09:16,780
we've got rid of the use of the CMOS so

00:09:15,160 --> 00:09:19,450
that we don't need the CMOS to get the

00:09:16,780 --> 00:09:22,210
memory details we can get it from q fw c

00:09:19,450 --> 00:09:24,220
FG is dead and one thing that's

00:09:22,210 --> 00:09:26,290
important is that way you do shut down

00:09:24,220 --> 00:09:28,990
and reboot is different on the whole

00:09:26,290 --> 00:09:30,880
reviews platform we just as hot the hold

00:09:28,990 --> 00:09:33,010
reduce specification says we'll write

00:09:30,880 --> 00:09:35,410
this value to this port i/o address and

00:09:33,010 --> 00:09:38,530
so we just implemented that we have a

00:09:35,410 --> 00:09:39,910
temporary fork throw vmf i hopefully be

00:09:38,530 --> 00:09:43,150
sending those patches that's being very

00:09:39,910 --> 00:09:47,170
very soon so I mentioned minimized

00:09:43,150 --> 00:09:49,900
Hardware emulation we have got some

00:09:47,170 --> 00:09:52,510
emulated hardware we have a PCI host

00:09:49,900 --> 00:09:55,590
bridge this is the host bridge that we

00:09:52,510 --> 00:09:58,390
took from cumuli to the PCI like there

00:09:55,590 --> 00:10:00,160
but it doesn't have any sort of chipset

00:09:58,390 --> 00:10:02,320
and we don't have any chips at emulation

00:10:00,160 --> 00:10:06,910
like you'd get with q35 with you've got

00:10:02,320 --> 00:10:10,120
the MCH and PCH and so we offload as

00:10:06,910 --> 00:10:11,920
much as possible to the host kernel so

00:10:10,120 --> 00:10:15,940
we've got used Colonel irq jet for

00:10:11,920 --> 00:10:19,170
instance we do have a virtual device

00:10:15,940 --> 00:10:21,640
that sits on the scheme uses bus for

00:10:19,170 --> 00:10:27,130
implementing the shut down and reboot

00:10:21,640 --> 00:10:30,490
support we have an implementation of

00:10:27,130 --> 00:10:32,560
poplar using purely a CPI even for PCI

00:10:30,490 --> 00:10:34,210
and this it allows us to run quatre

00:10:32,560 --> 00:10:36,580
container so cata containing is the most

00:10:34,210 --> 00:10:40,720
recent have containers does ship submit

00:10:36,580 --> 00:10:43,090
support for running on emu so this is

00:10:40,720 --> 00:10:46,750
they're not necessarily for coal workers

00:10:43,090 --> 00:10:51,190
but more container abstracted workloads

00:10:46,750 --> 00:10:54,340
such as cata container and I mentioned

00:10:51,190 --> 00:10:56,620
before we built a CI system running and

00:10:54,340 --> 00:10:58,530
they have an automated tool a test suite

00:10:56,620 --> 00:11:00,940
called Nats which are developed using

00:10:58,530 --> 00:11:03,600
which uses like people go v mmm and

00:11:00,940 --> 00:11:06,530
that's a wrapper around qmp and

00:11:03,600 --> 00:11:11,120
launching Kumu

00:11:06,530 --> 00:11:14,720
and so we were able to test pc q 35 and

00:11:11,120 --> 00:11:16,490
x and the arm verse systems and our new

00:11:14,720 --> 00:11:18,980
vert platform so we can check that when

00:11:16,490 --> 00:11:23,540
we're doing work to refactor we are

00:11:18,980 --> 00:11:26,540
breaking other platforms so as it states

00:11:23,540 --> 00:11:29,030
that today we have this open source

00:11:26,540 --> 00:11:33,190
project it's at github.com slash Intel

00:11:29,030 --> 00:11:35,150
slash knee mu we have a no vmf for

00:11:33,190 --> 00:11:38,330
temporarily I'll hopefully be sending

00:11:35,150 --> 00:11:41,450
this patch upstream as I said we are and

00:11:38,330 --> 00:11:44,720
we are able to boot any distribution

00:11:41,450 --> 00:11:48,850
that ships UEFI enabled cloud images so

00:11:44,720 --> 00:11:52,850
that I've been to and clear Linux and

00:11:48,850 --> 00:11:54,650
for fedora and CentOS unfortunately the

00:11:52,850 --> 00:11:56,660
cloud images that they released I don't

00:11:54,650 --> 00:11:57,980
don't support you if I booting but I

00:11:56,660 --> 00:11:59,990
have been able to validate that they do

00:11:57,980 --> 00:12:02,960
work absolutely fine if you installed

00:11:59,990 --> 00:12:07,780
them using the Installer using q35 and

00:12:02,960 --> 00:12:11,990
then boot the resulting image using verb

00:12:07,780 --> 00:12:13,610
yes thank you very much and yes I was

00:12:11,990 --> 00:12:15,710
going to say that is even hopefully it's

00:12:13,610 --> 00:12:17,960
been fixed and this work is published in

00:12:15,710 --> 00:12:19,250
our branch called topic vertex 86 and

00:12:17,960 --> 00:12:23,210
that's the default branch and I'll get

00:12:19,250 --> 00:12:27,050
repository but if you can we go even

00:12:23,210 --> 00:12:29,960
smaller so if you recall we we were

00:12:27,050 --> 00:12:31,850
talking about source code its lines of

00:12:29,960 --> 00:12:34,760
source code as a proxy for metric for

00:12:31,850 --> 00:12:37,760
security and attack surface and it's

00:12:34,760 --> 00:12:39,680
only sort of proxy metric so maybe we

00:12:37,760 --> 00:12:42,200
could build on top of the work that we

00:12:39,680 --> 00:12:46,700
did before weird code removal but

00:12:42,200 --> 00:12:48,650
including the new verb platform so now I

00:12:46,700 --> 00:12:51,430
have integrated I built system

00:12:48,650 --> 00:12:54,830
integration to our CI system that will

00:12:51,430 --> 00:12:57,440
do what sort of that work but in order

00:12:54,830 --> 00:12:59,180
to make most of that we needed to

00:12:57,440 --> 00:13:00,830
improve the some the configure which is

00:12:59,180 --> 00:13:03,110
build so we have some patches in the

00:13:00,830 --> 00:13:06,170
tree that make more of the things inside

00:13:03,110 --> 00:13:08,330
of the hardware directory and people so

00:13:06,170 --> 00:13:12,260
a little a few little things that will

00:13:08,330 --> 00:13:14,630
where these are just mostly devices that

00:13:12,260 --> 00:13:15,890
assumes that they should be there and

00:13:14,630 --> 00:13:19,010
it's dead we just need to put some more

00:13:15,890 --> 00:13:21,240
if that or make those more configure

00:13:19,010 --> 00:13:22,950
one of the big changes that Samuel is

00:13:21,240 --> 00:13:25,170
working on wasn't was that the ombre

00:13:22,950 --> 00:13:26,220
platform pulled in TCG even though it

00:13:25,170 --> 00:13:28,500
wasn't ever using any of the

00:13:26,220 --> 00:13:31,950
functionality from there and so we have

00:13:28,500 --> 00:13:33,420
a little vert make file which defines

00:13:31,950 --> 00:13:36,990
all the features that we have in our

00:13:33,420 --> 00:13:39,510
platform so for the automated code

00:13:36,990 --> 00:13:41,940
removal its integrated to our CI system

00:13:39,510 --> 00:13:45,420
and now when we do a build on the main

00:13:41,940 --> 00:13:48,300
branch it will automatically do it on an

00:13:45,420 --> 00:13:51,380
armed system an exit system work out the

00:13:48,300 --> 00:13:54,240
union of the two two files that all used

00:13:51,380 --> 00:13:57,210
run it through a script to delete any of

00:13:54,240 --> 00:13:59,880
the unused files and then pushes that

00:13:57,210 --> 00:14:01,680
itself to another branch which then

00:13:59,880 --> 00:14:05,300
triggers the CI system and that will

00:14:01,680 --> 00:14:07,260
then validate it that code is correct

00:14:05,300 --> 00:14:11,010
so here are some of the metrics that we

00:14:07,260 --> 00:14:12,390
have from our code removal and as you

00:14:11,010 --> 00:14:14,970
can see we see roughly seeing about 80

00:14:12,390 --> 00:14:17,850
percent decline but just through purely

00:14:14,970 --> 00:14:20,610
automatic Oh movin or removal versus the

00:14:17,850 --> 00:14:23,150
what we have in the default Kumud 3.0

00:14:20,610 --> 00:14:26,670
tree which is what we based artwork off

00:14:23,150 --> 00:14:30,800
and we see a similar reduction in the

00:14:26,670 --> 00:14:30,800
number of devices that are in the model

00:14:31,670 --> 00:14:41,150
so if there any questions we haven't

00:14:37,890 --> 00:14:41,150
validated booting windows yet

00:14:45,869 --> 00:14:56,589
we're getting a microphone fee okay so

00:14:54,100 --> 00:14:58,989
you said that you are only focusing on

00:14:56,589 --> 00:15:01,720
Linux and Windows like modern version

00:14:58,989 --> 00:15:05,199
specifically and only on x86 and AR 64

00:15:01,720 --> 00:15:08,379
what about the likes of FreeBSD or the

00:15:05,199 --> 00:15:10,509
likes of BBC 64 as 490 like are you

00:15:08,379 --> 00:15:14,679
making sure that eventually you will be

00:15:10,509 --> 00:15:16,419
able to add that back yes so it would be

00:15:14,679 --> 00:15:18,759
the case of it wouldn't be too much work

00:15:16,419 --> 00:15:20,859
to add those back because it would just

00:15:18,759 --> 00:15:21,999
be a case of doing the adding those to

00:15:20,859 --> 00:15:24,790
the set of things that we don't remove

00:15:21,999 --> 00:15:27,129
as I said the room the thing about the

00:15:24,790 --> 00:15:28,569
removal is a lot of that is a metric to

00:15:27,129 --> 00:15:29,489
help us understand what it's compiled

00:15:28,569 --> 00:15:33,509
out the build

00:15:29,489 --> 00:15:36,129
right now I'm thinking more of not

00:15:33,509 --> 00:15:39,040
choices about for example using a CPI

00:15:36,129 --> 00:15:40,959
only not locking you out of eventually

00:15:39,040 --> 00:15:42,730
adding back that stuff yeah okay I

00:15:40,959 --> 00:15:44,319
understand yeah keeping that in mind so

00:15:42,730 --> 00:15:47,169
when I mean a CPI only it's the vert

00:15:44,319 --> 00:15:51,459
platform that say CVP the arm 64

00:15:47,169 --> 00:15:53,860
currently is using device 3 okay I think

00:15:51,459 --> 00:15:57,189
a successful fork is a fork that

00:15:53,860 --> 00:15:59,290
actually brings back all the interesting

00:15:57,189 --> 00:16:03,639
changes better surgeons virtually are

00:15:59,290 --> 00:16:05,589
you dia plans and actually identifying

00:16:03,639 --> 00:16:07,839
that the interesting powers of your word

00:16:05,589 --> 00:16:09,819
and bringing that back to the community

00:16:07,839 --> 00:16:11,290
right yeah so we've already started some

00:16:09,819 --> 00:16:13,540
of the up streaming work so Samuel has

00:16:11,290 --> 00:16:15,819
sent a few patches already the hardware

00:16:13,540 --> 00:16:19,239
reduce changes how do I reduce a CPI

00:16:15,819 --> 00:16:21,429
changes the stuff to do with qmu at

00:16:19,239 --> 00:16:23,619
cubed and EMF will be happening

00:16:21,429 --> 00:16:30,009
imminently I'm just waiting for a new PC

00:16:23,619 --> 00:16:33,489
ID to use so the split director chip was

00:16:30,009 --> 00:16:37,089
what one of the reasons it was developed

00:16:33,489 --> 00:16:40,480
was actual security so if you actually

00:16:37,089 --> 00:16:41,980
go back to the qmu the KVM our kinship

00:16:40,480 --> 00:16:44,049
and kernel like one of the reasons

00:16:41,980 --> 00:16:46,959
people didn't want to use that was

00:16:44,049 --> 00:16:48,699
because uranium or codon bring zero I

00:16:46,959 --> 00:16:51,189
wonder what your thoughts are about that

00:16:48,699 --> 00:16:55,269
that's a very good point yeah I can

00:16:51,189 --> 00:16:59,080
understand that I don't really have a

00:16:55,269 --> 00:17:02,860
true explanation for that Russian alpha

00:16:59,080 --> 00:17:07,360
the people that we are working with feel

00:17:02,860 --> 00:17:08,860
that that is fine hi oh can you please

00:17:07,360 --> 00:17:10,690
explain the flight migration already

00:17:08,860 --> 00:17:13,300
works what if it doesn't is it on the

00:17:10,690 --> 00:17:16,690
road man we haven't tested live

00:17:13,300 --> 00:17:19,360
migration we for the for the vert

00:17:16,690 --> 00:17:21,040
machine type there's no reason why it

00:17:19,360 --> 00:17:25,590
doesn't work but we've never even taken

00:17:21,040 --> 00:17:25,590
the steps to validate like yet thank you

00:17:29,160 --> 00:17:34,360
regarding Verdi or do you plan to all

00:17:31,690 --> 00:17:36,100
also support legacy roller i/o devices

00:17:34,360 --> 00:17:38,290
or transitional device or only mother

00:17:36,100 --> 00:17:40,780
modern wearable devices

00:17:38,290 --> 00:17:42,520
so we're currently using the virtual

00:17:40,780 --> 00:17:44,950
device support in queue and haven't

00:17:42,520 --> 00:17:47,260
modified that so if it does support the

00:17:44,950 --> 00:17:48,310
previous prior ones if stuff before

00:17:47,260 --> 00:17:51,250
one's over then it will still continue

00:17:48,310 --> 00:17:54,240
to work but we haven't we haven't we

00:17:51,250 --> 00:17:54,240
haven't removed support for that

00:18:09,190 --> 00:18:14,109
hi um so who gets to decide which

00:18:11,889 --> 00:18:16,029
features are included and which features

00:18:14,109 --> 00:18:18,729
are not is it the case that maybe once

00:18:16,029 --> 00:18:20,470
things get up streamed into cumene it

00:18:18,729 --> 00:18:21,519
will be configurable and if I want to

00:18:20,470 --> 00:18:22,210
have my only thing maybe without

00:18:21,519 --> 00:18:24,629
hot-plug

00:18:22,210 --> 00:18:27,279
I'll be able to compile that out or

00:18:24,629 --> 00:18:30,070
what's the policy for deciding the

00:18:27,279 --> 00:18:31,599
feature set so what are the X's thank

00:18:30,070 --> 00:18:34,659
you that's a good great question one of

00:18:31,599 --> 00:18:37,570
the exercises that we worked on was to

00:18:34,659 --> 00:18:39,759
create a new default make file or Verte

00:18:37,570 --> 00:18:41,590
and which enables a virtual machine tape

00:18:39,759 --> 00:18:44,320
and then also we will try to work out

00:18:41,590 --> 00:18:47,619
what was the smaller set of devices that

00:18:44,320 --> 00:18:49,659
are config values that we have in queue

00:18:47,619 --> 00:18:53,019
that allow us to boot an operating

00:18:49,659 --> 00:18:53,919
system and it was put it was a great

00:18:53,019 --> 00:18:56,019
exercise because it showed that actually

00:18:53,919 --> 00:18:57,970
there's quite a lot on the default x86

00:18:56,019 --> 00:19:00,519
good software mu and the new file that

00:18:57,970 --> 00:19:05,080
isn't like a superfluous should we say

00:19:00,519 --> 00:19:07,119
for many modern workloads and one thing

00:19:05,080 --> 00:19:09,879
that I think one of the things I hope

00:19:07,119 --> 00:19:11,019
comes out of this is with the added

00:19:09,879 --> 00:19:14,129
features to make things more

00:19:11,019 --> 00:19:16,330
configurable maybe we could see more

00:19:14,129 --> 00:19:18,220
default and make files that have

00:19:16,330 --> 00:19:20,169
different levels of scalability in them

00:19:18,220 --> 00:19:21,789
so for instance perhaps one could exist

00:19:20,169 --> 00:19:23,499
in the tree that is focused a lot more

00:19:21,789 --> 00:19:25,989
on modern workloads and then therefore

00:19:23,499 --> 00:19:27,999
removes some of those features that are

00:19:25,989 --> 00:19:30,249
no longer necessary and therefore it

00:19:27,999 --> 00:19:33,669
would be you know the qmu community to

00:19:30,249 --> 00:19:35,049
decide those sort profiles currently we

00:19:33,669 --> 00:19:37,210
just have one yes it's quite

00:19:35,049 --> 00:19:38,859
straightforward to remove some things

00:19:37,210 --> 00:19:41,830
from there but there are some things you

00:19:38,859 --> 00:19:43,859
can't currently remove thank you thank

00:19:41,830 --> 00:19:43,859
you

00:19:50,550 --> 00:19:53,810
getting some exercise

00:20:12,369 --> 00:20:19,220
okay I just wanna know why did you not

00:20:16,460 --> 00:20:22,070
remove the PC machine type so if you

00:20:19,220 --> 00:20:27,379
just care about modern gas q35 and

00:20:22,070 --> 00:20:29,059
you're new so one of the reasons we kept

00:20:27,379 --> 00:20:31,729
the PC machine type was first some of

00:20:29,059 --> 00:20:33,229
our patches do various bits of

00:20:31,729 --> 00:20:35,779
refactoring which is still touches the

00:20:33,229 --> 00:20:38,029
PC type and so we kept it in there just

00:20:35,779 --> 00:20:40,570
so that we could validate it in our CI

00:20:38,029 --> 00:20:43,220
system we have this branch this

00:20:40,570 --> 00:20:46,749
experiment automatic removal branch and

00:20:43,220 --> 00:20:46,749
therefore it's is not in that branch

00:20:56,980 --> 00:21:02,620
last question thank you

00:21:00,100 --> 00:21:03,730
what exactly is the kind of test that

00:21:02,620 --> 00:21:06,399
you are running in the CI environment

00:21:03,730 --> 00:21:09,779
and will that apply also to claim or is

00:21:06,399 --> 00:21:12,309
it specific to your code reduction or

00:21:09,779 --> 00:21:14,830
general to community it's hot plugging

00:21:12,309 --> 00:21:16,630
of devices CPUs checking things of

00:21:14,830 --> 00:21:19,299
checking things have been appeared and

00:21:16,630 --> 00:21:20,830
disappeared it's quite basic at the

00:21:19,299 --> 00:21:22,899
moment but it is a little bit focused on

00:21:20,830 --> 00:21:24,370
areas that we have seen bugs in when we

00:21:22,899 --> 00:21:26,140
were doing our manual testing and

00:21:24,370 --> 00:21:29,470
development it's definitely something

00:21:26,140 --> 00:21:30,970
that could grow and I think it's there's

00:21:29,470 --> 00:21:33,480
I think there's probably scope for

00:21:30,970 --> 00:21:35,380
having it as a wider test system as well

00:21:33,480 --> 00:21:38,010
functional testing is a fair way to

00:21:35,380 --> 00:21:38,010
describe it

00:21:48,279 --> 00:21:52,860
great thank you very much thank you

00:21:52,419 --> 00:21:55,680
everyone

00:21:52,860 --> 00:22:01,459
[Applause]

00:21:55,680 --> 00:22:01,459

YouTube URL: https://www.youtube.com/watch?v=JqdPTXxAS6w


