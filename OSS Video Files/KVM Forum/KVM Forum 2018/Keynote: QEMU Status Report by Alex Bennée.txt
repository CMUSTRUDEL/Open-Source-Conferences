Title: Keynote: QEMU Status Report by Alex Bennée
Publication date: 2018-11-17
Playlist: KVM Forum 2018
Description: 
	Alex Bennée
Senior Software Engineer
Linaro
Captions: 
	00:00:01,040 --> 00:00:09,570
[Music]

00:00:05,629 --> 00:00:10,559
welcome to the last day of KVM forum my

00:00:09,570 --> 00:00:13,590
name is Alex Bonet

00:00:10,559 --> 00:00:16,080
I work for Allen ro I mostly work on web

00:00:13,590 --> 00:00:18,029
muse TCG so this emulation side but I

00:00:16,080 --> 00:00:21,689
have been known to do a bit of KBM in

00:00:18,029 --> 00:00:24,869
the past so first things first happy

00:00:21,689 --> 00:00:31,470
birthday creme you 15 years old this

00:00:24,869 --> 00:00:33,570
year so I thought I'd start this talk by

00:00:31,470 --> 00:00:36,809
having a little bit of a recap of how we

00:00:33,570 --> 00:00:38,640
got to where we are so this is the knot

00:00:36,809 --> 00:00:41,640
point one release notes that Fabrice set

00:00:38,640 --> 00:00:43,950
out and the interesting thing to note

00:00:41,640 --> 00:00:47,219
here is his original aim for creme you

00:00:43,950 --> 00:00:49,079
was to be able to run wine binaries or

00:00:47,219 --> 00:00:52,110
sort of windows binaries with wine on

00:00:49,079 --> 00:00:55,129
non x86 platforms a goal that I think

00:00:52,110 --> 00:00:59,489
everyone can agree that we've achieved

00:00:55,129 --> 00:01:01,590
so some early milestones the acrimony

00:00:59,489 --> 00:01:04,470
was developed collaboratively very early

00:01:01,590 --> 00:01:06,659
on so in April 2003 it went on to

00:01:04,470 --> 00:01:10,140
Savannah which is good news hosting

00:01:06,659 --> 00:01:11,790
infrastructure it's moved on since there

00:01:10,140 --> 00:01:12,750
were the initial bits of system

00:01:11,790 --> 00:01:15,930
emulation

00:01:12,750 --> 00:01:20,700
we're in by June although this was x86

00:01:15,930 --> 00:01:24,150
only by April 2005 it was possible to do

00:01:20,700 --> 00:01:25,680
cross compilation using Linux user mode

00:01:24,150 --> 00:01:28,530
and it's still still something that's

00:01:25,680 --> 00:01:30,900
done quite often with creamy today and

00:01:28,530 --> 00:01:32,700
by May 2006 you're starting to see

00:01:30,900 --> 00:01:34,979
things like the the early arm system

00:01:32,700 --> 00:01:38,340
emulation and additional architectures

00:01:34,979 --> 00:01:40,439
like MIPS being added interestingly one

00:01:38,340 --> 00:01:42,090
of the interesting artifacts of the way

00:01:40,439 --> 00:01:44,700
creme you initially did its emulation it

00:01:42,090 --> 00:01:46,079
was a lot easier to add new backends so

00:01:44,700 --> 00:01:49,920
new hosts that you could run chrome you

00:01:46,079 --> 00:01:51,390
on than it was to add new front ends if

00:01:49,920 --> 00:01:53,250
we have a look at the commit history

00:01:51,390 --> 00:01:55,500
over that time I think you can see some

00:01:53,250 --> 00:01:57,240
of the major inflection points so

00:01:55,500 --> 00:02:00,119
there's naught point one back in January

00:01:57,240 --> 00:02:04,170
and then KVM got merged into the kernel

00:02:00,119 --> 00:02:05,820
in February 2007 but when KVM was first

00:02:04,170 --> 00:02:07,860
merged into the kernel the support for

00:02:05,820 --> 00:02:10,950
it was in a fork of query called

00:02:07,860 --> 00:02:14,160
equipment KVM but by the time we got to

00:02:10,950 --> 00:02:16,620
1.3 in December 2012

00:02:14,160 --> 00:02:18,959
that all the KVM support had been

00:02:16,620 --> 00:02:22,290
finally merged back up into the mainline

00:02:18,959 --> 00:02:23,879
repository and then another point of

00:02:22,290 --> 00:02:29,069
note when Peter took over as maintainer

00:02:23,879 --> 00:02:30,900
at the tail end of 2014 so in that time

00:02:29,069 --> 00:02:32,310
1.3 million lines of code have been

00:02:30,900 --> 00:02:33,780
written although I'm fairly sure more

00:02:32,310 --> 00:02:37,860
has been added and deleted in the

00:02:33,780 --> 00:02:41,519
meantime almost 65,000 commits and one

00:02:37,860 --> 00:02:44,099
and a half thousand contributors if you

00:02:41,519 --> 00:02:46,530
plug those numbers into these software

00:02:44,099 --> 00:02:48,959
estimate models that reckons about 400

00:02:46,530 --> 00:02:51,510
person years of development effort and

00:02:48,959 --> 00:02:54,450
about 50 million dollars of investment

00:02:51,510 --> 00:02:56,130
to write that code so let's have a look

00:02:54,450 --> 00:03:01,650
at what we've done this development

00:02:56,130 --> 00:03:05,489
cycle so in this in the last year almost

00:03:01,650 --> 00:03:08,030
7,000 commits only about 8% of those run

00:03:05,489 --> 00:03:10,230
reviewed and when I say unreviewed I

00:03:08,030 --> 00:03:12,450
counted commits that only had a single

00:03:10,230 --> 00:03:14,670
signed off by by the author as one

00:03:12,450 --> 00:03:18,690
reviewed anything a review by tested by

00:03:14,670 --> 00:03:21,600
counted as reviewed for me 600 merges or

00:03:18,690 --> 00:03:23,730
over 600 merges 123 maintained errs

00:03:21,600 --> 00:03:26,840
listed in the maintained as file 77 of

00:03:23,730 --> 00:03:30,810
them authored commits in the cycle and

00:03:26,840 --> 00:03:33,230
350 authors overall if we have a look at

00:03:30,810 --> 00:03:36,900
some of the growth areas in the code

00:03:33,230 --> 00:03:39,030
hopefully you can see that so the

00:03:36,900 --> 00:03:41,040
biggest growth area is the hardware

00:03:39,030 --> 00:03:44,099
directory this is where all the device

00:03:41,040 --> 00:03:47,700
emulation system emulation device code

00:03:44,099 --> 00:03:49,650
goes then we have target which is where

00:03:47,700 --> 00:03:51,810
all the architecture specific support

00:03:49,650 --> 00:03:55,590
goes in so this is both for translation

00:03:51,810 --> 00:03:57,480
and for things like KVM support for

00:03:55,590 --> 00:03:59,970
individual architectures and in fact

00:03:57,480 --> 00:04:02,310
some of the hypervisors for x86 only

00:03:59,970 --> 00:04:04,139
also went in there and then you include

00:04:02,310 --> 00:04:05,880
always gets touched whenever there's

00:04:04,139 --> 00:04:07,290
something that affects something across

00:04:05,880 --> 00:04:10,260
chrome you you're going to see header

00:04:07,290 --> 00:04:12,269
files being added gratifyingly for me

00:04:10,260 --> 00:04:14,400
test is also quite high up on the list

00:04:12,269 --> 00:04:17,070
and then it all starts to tail off into

00:04:14,400 --> 00:04:21,630
the noise block the block drivers linux

00:04:17,070 --> 00:04:25,409
user and then it drops off Launchpad

00:04:21,630 --> 00:04:26,180
bugs we had 177 bugs new bugs rose this

00:04:25,409 --> 00:04:29,150
year

00:04:26,180 --> 00:04:31,880
we've got about 500 or 600 bugs in total

00:04:29,150 --> 00:04:33,860
in the system it's a bit tricky for me

00:04:31,880 --> 00:04:35,180
to figure out what's going on with them

00:04:33,860 --> 00:04:38,300
because most of them seem to sit at the

00:04:35,180 --> 00:04:40,460
new status if you look at the number of

00:04:38,300 --> 00:04:42,740
users affected and the number of

00:04:40,460 --> 00:04:44,960
comments we've got a very large chunk of

00:04:42,740 --> 00:04:46,639
bugs that are basically been raised by

00:04:44,960 --> 00:04:49,370
one person going this is a problem for

00:04:46,639 --> 00:04:50,690
me no one else has commented and it

00:04:49,370 --> 00:04:53,300
seems to have stuck there forever I

00:04:50,690 --> 00:04:55,460
think part of this is because people

00:04:53,300 --> 00:04:57,770
raising bugs don't seem to read how I

00:04:55,460 --> 00:04:59,599
how to report a bug so a lot of these

00:04:57,770 --> 00:05:01,009
bugs are missing important details like

00:04:59,599 --> 00:05:03,259
what version of kwame's they were

00:05:01,009 --> 00:05:06,250
testing what command-line though they

00:05:03,259 --> 00:05:10,580
were using to run it and stuff like that

00:05:06,250 --> 00:05:12,919
cBS 25 CVS this year it doesn't seem

00:05:10,580 --> 00:05:15,620
super great but compared to 2016 when we

00:05:12,919 --> 00:05:16,669
had 90 and last year when we had 65 it

00:05:15,620 --> 00:05:19,789
definitely seems to be going in the

00:05:16,669 --> 00:05:22,669
right direction a balance of local and

00:05:19,789 --> 00:05:25,479
remote exploits but generally the

00:05:22,669 --> 00:05:28,280
picture seems to be getting better

00:05:25,479 --> 00:05:31,400
feature releases we seem to be sticking

00:05:28,280 --> 00:05:34,370
to a steady three release a year release

00:05:31,400 --> 00:05:35,990
cadence all things being equal I expect

00:05:34,370 --> 00:05:39,289
three point one should be ready by the

00:05:35,990 --> 00:05:41,210
end of this December as well as the

00:05:39,289 --> 00:05:43,729
feature releases we have our stable

00:05:41,210 --> 00:05:44,780
releases I don't know how much people

00:05:43,729 --> 00:05:47,330
actually use this but I know the

00:05:44,780 --> 00:05:49,340
distributions certainly appreciate

00:05:47,330 --> 00:05:51,080
having dot releases so they don't have

00:05:49,340 --> 00:05:54,289
to upgrade to new major version of

00:05:51,080 --> 00:05:57,199
Quenya so I think it's time we look at

00:05:54,289 --> 00:05:59,150
what we've been working on so I

00:05:57,199 --> 00:06:02,990
generated this word cloud by looking at

00:05:59,150 --> 00:06:04,669
the title of the commits in in the last

00:06:02,990 --> 00:06:06,949
year and removing all the boring words I

00:06:04,669 --> 00:06:08,720
actually can see the thing we seem to

00:06:06,949 --> 00:06:12,560
spend most of our time doing is fixing

00:06:08,720 --> 00:06:15,349
stuff but you can also see some of the

00:06:12,560 --> 00:06:18,349
other major areas so block migration the

00:06:15,349 --> 00:06:19,880
architectures PowerPC tests again well

00:06:18,349 --> 00:06:21,620
mentioned so it just gives you an idea

00:06:19,880 --> 00:06:25,340
of the sort of areas that we're working

00:06:21,620 --> 00:06:28,669
on so what sort of features have we been

00:06:25,340 --> 00:06:31,550
adding to Crimea so hardware-assisted

00:06:28,669 --> 00:06:34,490
virtualization traditionally we all

00:06:31,550 --> 00:06:36,229
think of Crimea is using KBM and the

00:06:34,490 --> 00:06:37,610
last development cycle we also added

00:06:36,229 --> 00:06:39,810
support for Intel's

00:06:37,610 --> 00:06:41,130
hacks em this year we

00:06:39,810 --> 00:06:44,340
now got support for the hypervisor

00:06:41,130 --> 00:06:47,040
framework which is the MCOs hardware

00:06:44,340 --> 00:06:49,530
virtualization layer and the windows

00:06:47,040 --> 00:06:54,060
hypervisor platform or basically what a

00:06:49,530 --> 00:06:56,010
zoo as your uses alright the ghost in

00:06:54,060 --> 00:06:57,900
the room you'd have had to been living

00:06:56,010 --> 00:07:00,570
under a rock if you hadn't come across

00:06:57,900 --> 00:07:02,310
Spectre last year there's been quite a

00:07:00,570 --> 00:07:04,770
lot of Spectre across quite a lot of

00:07:02,310 --> 00:07:07,889
work on Spectre across the whole stack

00:07:04,770 --> 00:07:10,230
and I know support has gone into KVM and

00:07:07,889 --> 00:07:13,590
into all the tall chains from Cremonese

00:07:10,230 --> 00:07:15,570
point of view it was mostly a case of

00:07:13,590 --> 00:07:17,820
making sure we report the correct cpuid

00:07:15,570 --> 00:07:22,530
and feature bits up to the guests so

00:07:17,820 --> 00:07:25,200
they can enable their mitigations okay

00:07:22,530 --> 00:07:28,500
some new devices are DMA which is a

00:07:25,200 --> 00:07:30,090
remote Ram solution we've got eaded

00:07:28,500 --> 00:07:31,800
support which allows us to report

00:07:30,090 --> 00:07:33,540
information about monitors to the guests

00:07:31,800 --> 00:07:37,770
so they can properly size their displays

00:07:33,540 --> 00:07:41,310
and features like smmu which is a iommu

00:07:37,770 --> 00:07:46,620
for arms were up to version 3 now on

00:07:41,310 --> 00:07:50,250
that right TCG emulation the big one

00:07:46,620 --> 00:07:51,990
this year was risky so risk V takes

00:07:50,250 --> 00:07:54,030
chromium up so I think 21 guest

00:07:51,990 --> 00:07:58,289
architectures that we now support in our

00:07:54,030 --> 00:08:00,090
emulation engine a more minor one IR 64

00:07:58,289 --> 00:08:01,770
big-endian support which I guess some

00:08:00,090 --> 00:08:08,789
people use probably probably networking

00:08:01,770 --> 00:08:11,160
people internals multi-threaded TCG so

00:08:08,789 --> 00:08:13,350
this was a feature that we mentioned

00:08:11,160 --> 00:08:15,300
last year but it was initially only

00:08:13,350 --> 00:08:17,430
enabled and a couple of architectures

00:08:15,300 --> 00:08:19,919
and we've been slowly backfilling the

00:08:17,430 --> 00:08:21,990
guests that we support risk v actually

00:08:19,919 --> 00:08:23,190
came with multi-threaded TCG already

00:08:21,990 --> 00:08:26,160
enabled because they were using the

00:08:23,190 --> 00:08:28,820
modern atomic primitives but this year

00:08:26,160 --> 00:08:31,650
pa-risc in case anyone wants to use that

00:08:28,820 --> 00:08:34,800
x86 s3 19 extents are all had

00:08:31,650 --> 00:08:37,260
multi-threaded TCG turned on but we've

00:08:34,800 --> 00:08:39,000
not Stood Still there there's also been

00:08:37,260 --> 00:08:42,570
continuing work to increase our

00:08:39,000 --> 00:08:44,400
scalability in emulation and the big one

00:08:42,570 --> 00:08:46,830
this year was multi-threaded translation

00:08:44,400 --> 00:08:49,589
so originally even in a multi-threaded

00:08:46,830 --> 00:08:53,220
TCG setup translation was a serializing

00:08:49,589 --> 00:08:56,069
point now it's fully multi-threaded

00:08:53,220 --> 00:08:57,839
another big chunk of works off floats as

00:08:56,069 --> 00:09:00,119
we were adding support for additional

00:08:57,839 --> 00:09:02,309
guests that needed half precision

00:09:00,119 --> 00:09:06,809
floating point which wasn't supported by

00:09:02,309 --> 00:09:08,160
our original saw floats we had to decide

00:09:06,809 --> 00:09:09,749
how we were going to approach this so

00:09:08,160 --> 00:09:12,600
the the next version of soft flow

00:09:09,749 --> 00:09:14,459
upstream had added this but it was a

00:09:12,600 --> 00:09:15,300
would have involved quite a lot of churn

00:09:14,459 --> 00:09:17,730
to bring that in

00:09:15,300 --> 00:09:19,679
we considered back porting the changes

00:09:17,730 --> 00:09:22,290
from the next version of soft float into

00:09:19,679 --> 00:09:24,689
ours in the end we took a different path

00:09:22,290 --> 00:09:26,279
we decided that it's time to fully own a

00:09:24,689 --> 00:09:28,589
soft load implementations there was a

00:09:26,279 --> 00:09:30,420
large refactoring efforts and now we've

00:09:28,589 --> 00:09:31,980
got a common code path for half

00:09:30,420 --> 00:09:33,629
precision single precision and double

00:09:31,980 --> 00:09:36,660
precision floating point so there's

00:09:33,629 --> 00:09:39,179
still some work to do there 480 bit and

00:09:36,660 --> 00:09:40,379
upcoming 128 bit floating point but at

00:09:39,179 --> 00:09:43,800
least the code is a lot more readable

00:09:40,379 --> 00:09:45,420
now I also mentioned decode tree this

00:09:43,800 --> 00:09:48,569
was something that was written for arms

00:09:45,420 --> 00:09:50,939
sve implementation and it's a way of

00:09:48,569 --> 00:09:53,699
doing a data-driven generation of the

00:09:50,939 --> 00:09:55,800
decoder for translation so you can get

00:09:53,699 --> 00:09:57,839
all the boilerplate for like extracting

00:09:55,800 --> 00:10:00,120
fields and that sort of thing done

00:09:57,839 --> 00:10:01,920
automatically from a data table and

00:10:00,120 --> 00:10:04,620
sanitized and that's the stuff that's

00:10:01,920 --> 00:10:05,910
easy to get wrong by hand but good for a

00:10:04,620 --> 00:10:10,529
tool and then you can just concentrate

00:10:05,910 --> 00:10:11,999
on the translation system models ris via

00:10:10,529 --> 00:10:14,339
again came with a whole bunch of system

00:10:11,999 --> 00:10:17,519
models sci-fi view is one of their dev

00:10:14,339 --> 00:10:19,679
boards spike is the bsd emulator and

00:10:17,519 --> 00:10:21,329
then they also introduced a vert machine

00:10:19,679 --> 00:10:23,339
which is very much like the arm vert

00:10:21,329 --> 00:10:25,470
machine is a completely virtual you use

00:10:23,339 --> 00:10:26,429
vert i devices but if you just want to

00:10:25,470 --> 00:10:27,749
play with the instruction set

00:10:26,429 --> 00:10:29,759
architecture and you're not particularly

00:10:27,749 --> 00:10:33,029
interested in a particular hardware

00:10:29,759 --> 00:10:35,879
device it's a good platform to use we

00:10:33,029 --> 00:10:38,999
had raspberry pi to support in last year

00:10:35,879 --> 00:10:42,149
this year it's we've now got our models

00:10:38,999 --> 00:10:44,990
for raspberry pi 3 and a couple of other

00:10:42,149 --> 00:10:47,100
dev boards have been added

00:10:44,990 --> 00:10:48,839
microcontrollers I thought I'd mentioned

00:10:47,100 --> 00:10:51,179
my controller separately because there's

00:10:48,839 --> 00:10:54,689
been a bit of a renaissance in wanting

00:10:51,179 --> 00:10:57,959
to support these very low-power chips so

00:10:54,689 --> 00:11:00,720
the BBC micro bit was a device invented

00:10:57,959 --> 00:11:02,819
by the BBC to help in education there's

00:11:00,720 --> 00:11:06,930
a low-power device that kids can program

00:11:02,819 --> 00:11:09,240
with with Python the MPs to

00:11:06,930 --> 00:11:10,890
board is a modern microcontroller board

00:11:09,240 --> 00:11:12,840
just trust Sona where so you can play

00:11:10,890 --> 00:11:18,330
with the new features of modern ARM

00:11:12,840 --> 00:11:20,850
chips for IOT type applications and then

00:11:18,330 --> 00:11:24,420
sci-fi also have their a platform which

00:11:20,850 --> 00:11:26,190
is they're embedded platform should also

00:11:24,420 --> 00:11:28,980
mention all the stuff that's been done

00:11:26,190 --> 00:11:31,260
by our outreach students so every year

00:11:28,980 --> 00:11:33,540
the creaming project gets involved in

00:11:31,260 --> 00:11:35,940
various outreach activities so this year

00:11:33,540 --> 00:11:38,160
we had for google Summer of Code and one

00:11:35,940 --> 00:11:39,960
outreach D student and you can see what

00:11:38,160 --> 00:11:42,600
they worked on so junior and Steffen on

00:11:39,960 --> 00:11:44,730
the the micro bit sherpaman patch you

00:11:42,600 --> 00:11:47,820
immanuel on the Q test driver framework

00:11:44,730 --> 00:11:50,550
and Nathan working on the vulcanizing

00:11:47,820 --> 00:11:52,320
virtual I should say that if any teams

00:11:50,550 --> 00:11:53,850
are looking to expand with the junior

00:11:52,320 --> 00:11:55,620
engineers you would do a lot worse than

00:11:53,850 --> 00:11:59,400
looking at the people that have already

00:11:55,620 --> 00:12:02,670
proved their worth in outreach so

00:11:59,400 --> 00:12:05,520
testing very close to my heart

00:12:02,670 --> 00:12:07,280
enable sanitizers was added to configure

00:12:05,520 --> 00:12:09,360
so this basically allows you to build

00:12:07,280 --> 00:12:13,050
Chrome you with all the common

00:12:09,360 --> 00:12:16,500
sanitizers enabled so things like

00:12:13,050 --> 00:12:18,720
address validator address sanitization

00:12:16,500 --> 00:12:20,610
undefined behavior so if you're having

00:12:18,720 --> 00:12:22,800
trouble debugging a problem enable

00:12:20,610 --> 00:12:25,740
sanitizers might be able to point you to

00:12:22,800 --> 00:12:28,350
where the problem is we're starting to

00:12:25,740 --> 00:12:30,690
see avocado tests added to the crema

00:12:28,350 --> 00:12:33,720
resource tree so avocados been in use

00:12:30,690 --> 00:12:35,850
for some time outside the source tree

00:12:33,720 --> 00:12:39,330
for doing validation testing and making

00:12:35,850 --> 00:12:41,910
sure you can do installs and go through

00:12:39,330 --> 00:12:44,750
guided installs of the system and we're

00:12:41,910 --> 00:12:48,690
now starting to see this inside chromium

00:12:44,750 --> 00:12:50,250
TCG tests the TCG test languished for a

00:12:48,690 --> 00:12:51,660
while because a lot not a lot of people

00:12:50,250 --> 00:12:53,760
have worked in cross compilers on their

00:12:51,660 --> 00:12:55,830
system or if people want to set them up

00:12:53,760 --> 00:12:57,650
sometimes it can be a bit of a pain

00:12:55,830 --> 00:12:59,760
now we leverage our docker

00:12:57,650 --> 00:13:01,080
infrastructure to allow us to compile

00:12:59,760 --> 00:13:02,850
test cases for all the foreign

00:13:01,080 --> 00:13:05,460
architectures so you no longer have to

00:13:02,850 --> 00:13:07,380
worry about having a cross compiler and

00:13:05,460 --> 00:13:09,480
finally chrome use synchronization

00:13:07,380 --> 00:13:10,710
profiler so as we live in a more and

00:13:09,480 --> 00:13:12,030
more multi-threaded world and we're

00:13:10,710 --> 00:13:15,750
looking at more and more scalability

00:13:12,030 --> 00:13:17,550
this is a good view to see where the

00:13:15,750 --> 00:13:21,690
bottlenecks are in the code

00:13:17,550 --> 00:13:24,360
and what's causing latencies last year

00:13:21,690 --> 00:13:26,370
we started official deprecation policy

00:13:24,360 --> 00:13:29,100
so some of the things that def created

00:13:26,370 --> 00:13:31,500
this year GT k2 in favor of three SDI

00:13:29,100 --> 00:13:34,380
one in favor of two we drop support for

00:13:31,500 --> 00:13:36,510
building on AIX and we also got rid of

00:13:34,380 --> 00:13:39,180
the backends for Itanium and pa-risc

00:13:36,510 --> 00:13:43,440
and the PA risks we've probably got

00:13:39,180 --> 00:13:45,810
faster hardware in emulation anyway okay

00:13:43,440 --> 00:13:47,250
finally the bit that everyone wants Top

00:13:45,810 --> 00:13:49,230
Trumps so of course I'm referring to the

00:13:47,250 --> 00:13:52,650
card game here where bigger numbers are

00:13:49,230 --> 00:13:54,330
better so nothing orange related okay

00:13:52,650 --> 00:13:56,160
this is the author breakdown I ran these

00:13:54,330 --> 00:13:57,690
numbers last week and we had a dead heat

00:13:56,160 --> 00:14:02,520
at the top so I had to rerun them

00:13:57,690 --> 00:14:04,530
yesterday and Richard Richard has just

00:14:02,520 --> 00:14:06,660
taken the crown as the top of this year

00:14:04,530 --> 00:14:08,490
followed by Peter Phillip who is a

00:14:06,660 --> 00:14:10,290
relatively new member of our community

00:14:08,490 --> 00:14:13,890
has also been doing sterling work and

00:14:10,290 --> 00:14:16,880
then Marcus and Kevin so kind of a round

00:14:13,890 --> 00:14:16,880
of applause for our authors please

00:14:19,580 --> 00:14:24,230
I just thought I'd show you this graph

00:14:22,460 --> 00:14:27,380
that I wanted to get some sort of idea

00:14:24,230 --> 00:14:29,930
of what our development mix was so this

00:14:27,380 --> 00:14:31,820
graph I'm plotting experience so this is

00:14:29,930 --> 00:14:33,620
how many days since your first commit

00:14:31,820 --> 00:14:35,750
went into crime you on the x-axis and

00:14:33,620 --> 00:14:37,040
your project total I'll leave you to get

00:14:35,750 --> 00:14:40,130
through that top right-hand corner

00:14:37,040 --> 00:14:41,720
person is but I think on the size of the

00:14:40,130 --> 00:14:44,030
circles is the number of commits that

00:14:41,720 --> 00:14:46,150
went in this development cycle so I

00:14:44,030 --> 00:14:48,410
think what this is showing is we have a

00:14:46,150 --> 00:14:49,700
relatively broad development community

00:14:48,410 --> 00:14:51,890
and people of all levels of experience

00:14:49,700 --> 00:14:55,760
are able to make significant

00:14:51,890 --> 00:14:57,920
contributions to cream.you right last

00:14:55,760 --> 00:15:00,410
bit reviewers reviewers super important

00:14:57,920 --> 00:15:04,760
we rely on reviewers to catch bugs a

00:15:00,410 --> 00:15:07,850
code review time and this year delete

00:15:04,760 --> 00:15:09,860
tops the charts and then followed by

00:15:07,850 --> 00:15:11,810
Eric Richard Peter and Thomas so let's

00:15:09,860 --> 00:15:17,600
have another hand around reports for our

00:15:11,810 --> 00:15:20,090
review and finally because we're really

00:15:17,600 --> 00:15:21,860
tight on time tested the tested by is

00:15:20,090 --> 00:15:24,170
just a useful way if you've got access

00:15:21,860 --> 00:15:25,880
to hardware that developers don't have

00:15:24,170 --> 00:15:27,940
access to it's a good way of showing

00:15:25,880 --> 00:15:31,760
that you have run their patch set on

00:15:27,940 --> 00:15:34,970
interesting hardware so yes there's our

00:15:31,760 --> 00:15:38,019
testers okay thank you very much you can

00:15:34,970 --> 00:15:41,029
find me on social media

00:15:38,019 --> 00:15:43,380
and with that I think we're ready to

00:15:41,029 --> 00:15:45,520
hand over to the next-door

00:15:43,380 --> 00:15:51,299
[Applause]

00:15:45,520 --> 00:15:51,299

YouTube URL: https://www.youtube.com/watch?v=GZBd3jt5iA8


