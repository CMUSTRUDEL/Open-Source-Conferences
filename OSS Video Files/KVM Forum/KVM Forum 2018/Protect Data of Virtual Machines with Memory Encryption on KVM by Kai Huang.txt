Title: Protect Data of Virtual Machines with Memory Encryption on KVM by Kai Huang
Publication date: 2018-11-14
Playlist: KVM Forum 2018
Description: 
	Today cloud data protection is a critical requirement, and it will be even more important in the future as we have more in-depth and sensitive data in the cloud for new types of workloads (such as IoT and machine learning). Since VM is the key container of such data, it is crucial to protect VM at-rest (as in storage), in-transit (as in network), and during execution. Encryption is considered as the foundation technology for VM protection, and there are established encryption technologies for VMs at-rest and in-transit. Intel® Multi-Key Total Memory Encryption (MKTME) is Intel's new memory encryption technology which supports VM memory encryption to complete VM protection in VM's entire lifecycle. In this presentation we give an introduction to Intel® MKTME, from background, to its hardware architecture, typical use cases in cloud, and our enabling work on Linux/KVM.

---

Kai Huang
Software Engineer
Intel Corporation
Captions: 
	00:00:00,350 --> 00:00:02,710
[Music]

00:00:05,839 --> 00:00:14,599
topic is the protected data of virtual

00:00:09,389 --> 00:00:17,160
machines with Intel's MKT me on KVM

00:00:14,599 --> 00:00:22,789
firstly I'm mark I want from Intel

00:00:17,160 --> 00:00:25,050
Corporation and I'm working on some

00:00:22,789 --> 00:00:27,840
virtualization new feature support for

00:00:25,050 --> 00:00:33,829
Intel's Halliwell father we are

00:00:27,840 --> 00:00:36,030
platforms so today is this my agenda

00:00:33,829 --> 00:00:38,010
firstly I'm going to talk about some

00:00:36,030 --> 00:00:40,620
background and give some introduction

00:00:38,010 --> 00:00:43,260
about him caite me and then I will give

00:00:40,620 --> 00:00:46,620
some user case about MK team and then

00:00:43,260 --> 00:00:54,000
say how are enabling playing hands and

00:00:46,620 --> 00:00:57,360
status so so in the era of the cloud I

00:00:54,000 --> 00:01:00,329
think as a the data in the the data in

00:00:57,360 --> 00:01:01,710
the virtual machines I mean that the

00:01:00,329 --> 00:01:04,739
data of the tenant in version is

00:01:01,710 --> 00:01:06,360
becoming more and more important and how

00:01:04,739 --> 00:01:08,549
can we make them safe

00:01:06,360 --> 00:01:12,439
I mean so we needed to make the virtual

00:01:08,549 --> 00:01:15,479
machines can be can be trusted and

00:01:12,439 --> 00:01:17,670
ideally that's the tenant made may not

00:01:15,479 --> 00:01:20,189
need to trust as a service provider at

00:01:17,670 --> 00:01:23,369
all but that requires some technology

00:01:20,189 --> 00:01:27,930
like the HDX and yeah you know and it's

00:01:23,369 --> 00:01:31,820
a requires lots of enabling work so but

00:01:27,930 --> 00:01:36,270
so so so for the you know other options

00:01:31,820 --> 00:01:39,720
with we think that the in-memory engine

00:01:36,270 --> 00:01:44,970
technology is a fundamental of you know

00:01:39,720 --> 00:01:48,780
of protecting users data so so we think

00:01:44,970 --> 00:01:51,270
that we can't use the use encryption

00:01:48,780 --> 00:01:55,710
technology to make the VM can be trusted

00:01:51,270 --> 00:01:57,990
the dealings of VMs whole lifetime so if

00:01:55,710 --> 00:02:00,119
the VM can be track of the VM can be

00:01:57,990 --> 00:02:03,240
encrypted during during and the rest

00:02:00,119 --> 00:02:07,350
means it means it's it's image is stored

00:02:03,240 --> 00:02:10,890
in stood encrypt in the in the repo and

00:02:07,350 --> 00:02:12,270
I didn't run some wind when it's running

00:02:10,890 --> 00:02:15,480
and during

00:02:12,270 --> 00:02:21,150
during her in transit for example when

00:02:15,480 --> 00:02:23,250
it's being migrated and so that's a so

00:02:21,150 --> 00:02:26,610
that's you know we can some kind of

00:02:23,250 --> 00:02:29,250
trust as as a virtual machine and for

00:02:26,610 --> 00:02:31,560
the encryption technologies at rest and

00:02:29,250 --> 00:02:34,050
in transit we already have some

00:02:31,560 --> 00:02:36,990
technologies for example Sakuma already

00:02:34,050 --> 00:02:40,440
supposes that she is for lie migration

00:02:36,990 --> 00:02:45,420
and there's a Kimi also support two runs

00:02:40,440 --> 00:02:47,910
a encrypt image directly but as a VM

00:02:45,420 --> 00:02:50,040
ransom in vm's around town including

00:02:47,910 --> 00:02:53,370
encryption technology requires hardware

00:02:50,040 --> 00:02:58,400
supporter so MV they have their own

00:02:53,370 --> 00:03:03,510
which is MV SMEs CV and India has MK tme

00:02:58,400 --> 00:03:06,870
and actually before the encryption

00:03:03,510 --> 00:03:10,110
there's there's more

00:03:06,870 --> 00:03:12,480
for example maybe we needed to launch

00:03:10,110 --> 00:03:14,880
the VM and Trustin is verify the host

00:03:12,480 --> 00:03:17,580
for example the we have three factors of

00:03:14,880 --> 00:03:20,130
the physical machine that it can be

00:03:17,580 --> 00:03:22,740
trusted from from you know the vendors

00:03:20,130 --> 00:03:26,730
can be trusted and you know the host

00:03:22,740 --> 00:03:28,770
deck from the from the boughs to the

00:03:26,730 --> 00:03:30,750
operating system to the to the to the

00:03:28,770 --> 00:03:35,040
hypervisor and they are also verified

00:03:30,750 --> 00:03:37,620
that can be trusted so and so in this

00:03:35,040 --> 00:03:42,300
case we can you know the tender tender

00:03:37,620 --> 00:03:44,190
care lunch that a vm safely and for the

00:03:42,300 --> 00:03:46,500
trust nice verification we needed to

00:03:44,190 --> 00:03:48,300
have somehow had web-based a root of

00:03:46,500 --> 00:03:51,060
trust and there's a testing service to

00:03:48,300 --> 00:03:58,470
do that but today's topically is going

00:03:51,060 --> 00:04:02,490
to to focus on the interim KTM e so what

00:03:58,470 --> 00:04:05,040
is MKT me so basically we had a new a s

00:04:02,490 --> 00:04:08,520
xt s memory english engine into a date

00:04:05,040 --> 00:04:10,380
passed to the external memory bus so the

00:04:08,520 --> 00:04:12,120
data when the data you know goes to the

00:04:10,380 --> 00:04:14,610
memory so will be encrypted

00:04:12,120 --> 00:04:16,950
automatically and when it goes to the

00:04:14,610 --> 00:04:21,810
CPU it'll be it will be a decrypt

00:04:16,950 --> 00:04:24,240
automatically and as things we are using

00:04:21,810 --> 00:04:25,120
the aes XTS and it uses a physical

00:04:24,240 --> 00:04:27,760
address as

00:04:25,120 --> 00:04:31,600
quick which means for the same plan text

00:04:27,760 --> 00:04:34,479
and if it is you know in the different

00:04:31,600 --> 00:04:41,740
phases as the ciphertext in the memory

00:04:34,479 --> 00:04:44,410
will be are different and and so and the

00:04:41,740 --> 00:04:47,199
total Timmy is a total M total memory

00:04:44,410 --> 00:04:49,300
memory encryption which means once

00:04:47,199 --> 00:04:52,660
turned out the memory will be the older

00:04:49,300 --> 00:04:55,540
memory will be included by some you buy

00:04:52,660 --> 00:04:59,250
some tMI's key which will be generated

00:04:55,540 --> 00:05:02,470
by CPU when during every reboot and

00:04:59,250 --> 00:05:05,889
Tammy can be enable disabled by boughs

00:05:02,470 --> 00:05:10,449
and so which and so it is a transparent

00:05:05,889 --> 00:05:13,030
to the host and users and MK to me is

00:05:10,449 --> 00:05:14,500
based on is based on the tme so you have

00:05:13,030 --> 00:05:17,949
to turn all the timmy before you can

00:05:14,500 --> 00:05:20,830
turn now to m k TM e and m kt me

00:05:17,949 --> 00:05:26,020
actually adds had supported to use

00:05:20,830 --> 00:05:29,080
multiple keys and it's a it is banned

00:05:26,020 --> 00:05:34,270
it's done by using some upper bits of

00:05:29,080 --> 00:05:36,550
the physical dress as k ID so here is

00:05:34,270 --> 00:05:38,530
the detail about is a key ID basically m

00:05:36,550 --> 00:05:41,800
k TM e repurpose to the upper bits of

00:05:38,530 --> 00:05:49,090
the physical dress as a key ID and you

00:05:41,800 --> 00:05:52,150
know for example we we can and so for

00:05:49,090 --> 00:05:56,289
example as a sub so the physical machine

00:05:52,150 --> 00:05:58,090
it can support some for example how many

00:05:56,289 --> 00:06:02,260
caddy beats and it is reported by the

00:05:58,090 --> 00:06:06,639
MSR and yeah and the operating system

00:06:02,260 --> 00:06:07,539
can't get that information so by using

00:06:06,639 --> 00:06:09,910
the key idea

00:06:07,539 --> 00:06:12,940
it means the physical dress bits is

00:06:09,910 --> 00:06:14,380
reduced and as a different k ID can

00:06:12,940 --> 00:06:18,639
actually refer to the same physical

00:06:14,380 --> 00:06:22,510
address and the key 0 is reserved as TM

00:06:18,639 --> 00:06:24,789
is k so yeah and we have new pekin

00:06:22,510 --> 00:06:28,750
figure instructions to a program you

00:06:24,789 --> 00:06:32,020
know to program because a specific key

00:06:28,750 --> 00:06:35,490
ID to be associated with some particular

00:06:32,020 --> 00:06:35,490
key or some particular modal

00:06:36,830 --> 00:06:42,900
okay so I so I made my philosophy so

00:06:40,740 --> 00:06:47,129
architecture we are up to support in

00:06:42,900 --> 00:06:50,340
affecting bits of key IDs and but in the

00:06:47,129 --> 00:06:54,120
first server inception when we support

00:06:50,340 --> 00:06:58,830
some probably six bits of the six bits

00:06:54,120 --> 00:07:00,900
of the key IDs so we add a new

00:06:58,830 --> 00:07:03,479
instruction pick configure to program a

00:07:00,900 --> 00:07:05,789
particularly Aidid to be associated with

00:07:03,479 --> 00:07:10,050
some particular key and that this

00:07:05,789 --> 00:07:12,539
instruction is / is / is / package which

00:07:10,050 --> 00:07:14,009
means if you program if you call the P

00:07:12,539 --> 00:07:18,900
configure on particular call

00:07:14,009 --> 00:07:22,529
so as mmm actually it's per package so

00:07:18,900 --> 00:07:24,449
and P configure suppose programming one

00:07:22,529 --> 00:07:27,960
carry him to four modes basically the

00:07:24,449 --> 00:07:30,779
first is to use the CPU generated random

00:07:27,960 --> 00:07:32,969
if I'm a key mode as a key will be

00:07:30,779 --> 00:07:35,849
invisible to the software also the

00:07:32,969 --> 00:07:37,949
software camp I can provided some entry

00:07:35,849 --> 00:07:42,389
fees for both key and and the trick

00:07:37,949 --> 00:07:44,849
which will be exiled by the CPU and the

00:07:42,389 --> 00:07:47,339
second way is to use software provided

00:07:44,849 --> 00:07:49,110
key so which means so software can

00:07:47,339 --> 00:07:52,889
provide as a key enters how do I use a

00:07:49,110 --> 00:07:53,819
key directly and as as so the mode is no

00:07:52,889 --> 00:07:56,370
English at all

00:07:53,819 --> 00:07:59,430
I remember that with tme we actually

00:07:56,370 --> 00:08:02,460
have the in have the encryption with the

00:07:59,430 --> 00:08:05,610
TM is key but so we can program the key

00:08:02,460 --> 00:08:08,069
I was a particular key ID to to not

00:08:05,610 --> 00:08:10,409
using pink not using encryption at all

00:08:08,069 --> 00:08:13,680
which means we were stores a plaintext

00:08:10,409 --> 00:08:16,500
in the memory and as the last one is a

00:08:13,680 --> 00:08:21,060
clear key mode which means this caddy

00:08:16,500 --> 00:08:22,979
will effectively use TM is key and this

00:08:21,060 --> 00:08:27,750
p configure also allow software to

00:08:22,979 --> 00:08:32,669
specify some crypto algorithms so you

00:08:27,750 --> 00:08:34,560
have an MSR to query that how many organ

00:08:32,669 --> 00:08:38,669
that so we can support on this platform

00:08:34,560 --> 00:08:41,099
and it can specify one particular one

00:08:38,669 --> 00:08:43,409
when you are doing the P configure but

00:08:41,099 --> 00:08:47,839
in the first server inception we only

00:08:43,409 --> 00:08:47,839
support the AES X J's 128

00:08:48,490 --> 00:08:54,320
so we consider the MKT me as a major

00:08:52,070 --> 00:08:56,870
user case of the MK diem is as memory

00:08:54,320 --> 00:08:59,149
protection and isolation so the

00:08:56,870 --> 00:09:01,460
protection basically means we use some

00:08:59,149 --> 00:09:04,430
particular key ID to inputs of the VMS

00:09:01,460 --> 00:09:06,020
memory at a runtime and as isolation

00:09:04,430 --> 00:09:07,339
basically means a week for different

00:09:06,020 --> 00:09:11,930
virtual machines we can't apply the

00:09:07,339 --> 00:09:14,330
different key IDs so so you know so the

00:09:11,930 --> 00:09:18,170
virtual machines can be ice can be

00:09:14,330 --> 00:09:21,130
isolated and in terms of a software

00:09:18,170 --> 00:09:24,110
enabling it's a quite a straightforward

00:09:21,130 --> 00:09:26,450
for CPU success you just set up the key

00:09:24,110 --> 00:09:29,390
IDs at as a PT and to the page table

00:09:26,450 --> 00:09:31,279
entries for example for the host page

00:09:29,390 --> 00:09:33,500
tables you set up with the key ID in the

00:09:31,279 --> 00:09:37,070
host page tables and for Kevin we set up

00:09:33,500 --> 00:09:37,760
the page to the PT as a caddy in the in

00:09:37,070 --> 00:09:40,880
the EPT

00:09:37,760 --> 00:09:44,630
and we I'm Katie I'm actually also

00:09:40,880 --> 00:09:46,880
supports as a device DMA so for I'm you

00:09:44,630 --> 00:09:49,160
you basically seem I set up the caddy to

00:09:46,880 --> 00:09:51,290
the I'm amused page table and the for

00:09:49,160 --> 00:09:53,480
physical DMA you just apply the caddy to

00:09:51,290 --> 00:09:55,430
the physical address directly since the

00:09:53,480 --> 00:09:57,440
the logic of the can't hear me happens

00:09:55,430 --> 00:10:03,110
ahead to the memory controller layer so

00:09:57,440 --> 00:10:05,300
it can support the DMA as well so let's

00:10:03,110 --> 00:10:08,600
do a recap so this is a highlights of

00:10:05,300 --> 00:10:10,130
MKT me basically the one advantages the

00:10:08,600 --> 00:10:12,560
guests continues to run without

00:10:10,130 --> 00:10:15,470
modification to the guest step basically

00:10:12,560 --> 00:10:17,720
we can we can supporter to impress to

00:10:15,470 --> 00:10:21,470
the guest can be encrypted with either

00:10:17,720 --> 00:10:25,310
TP general key or software provided to

00:10:21,470 --> 00:10:27,950
keep and and as of reserves of ultra

00:10:25,310 --> 00:10:29,660
high including sup the optimizations for

00:10:27,950 --> 00:10:31,910
example we hosted kernels can connect

00:10:29,660 --> 00:10:35,240
and continue to work as long as you can

00:10:31,910 --> 00:10:37,579
set up the correct key ID and as we also

00:10:35,240 --> 00:10:40,790
support as a password the direct i'll

00:10:37,579 --> 00:10:42,770
and for example as sr we call those

00:10:40,790 --> 00:10:45,380
existing technologies will continue to

00:10:42,770 --> 00:10:47,570
work and the live migration can also be

00:10:45,380 --> 00:10:50,660
supported you know a massive performs as

00:10:47,570 --> 00:10:53,060
opposed em get here me theoretically can

00:10:50,660 --> 00:10:54,500
migrated to one vm you know to the other

00:10:53,060 --> 00:10:57,290
machine without aiming team but so that

00:10:54,500 --> 00:11:01,970
will lose the memory in memory

00:10:57,290 --> 00:11:06,350
including corruption and actually MKT me

00:11:01,970 --> 00:11:09,380
also supports nvd so theoretically we

00:11:06,350 --> 00:11:11,750
can support as a virtual home redeem but

00:11:09,380 --> 00:11:14,000
there is some there are some attract

00:11:11,750 --> 00:11:16,700
issues of supporting 17 because of the

00:11:14,000 --> 00:11:21,230
physical physical address trick because

00:11:16,700 --> 00:11:23,660
as encryption uses a physical address as

00:11:21,230 --> 00:11:26,750
a tweak which means as a for different

00:11:23,660 --> 00:11:28,640
physical address even the same plaintext

00:11:26,750 --> 00:11:31,640
we have the you know different

00:11:28,640 --> 00:11:35,690
ciphertext so for that for the enemy

00:11:31,640 --> 00:11:38,090
team so basically it'll require that you

00:11:35,690 --> 00:11:39,890
know during host reboots as a medium

00:11:38,090 --> 00:11:42,470
configuration you can you cannot change

00:11:39,890 --> 00:11:44,150
you you cannot change a medium

00:11:42,470 --> 00:11:45,770
combination has a dim completion

00:11:44,150 --> 00:11:48,080
otherwise if the physical address

00:11:45,770 --> 00:11:50,000
changes it so after reboot you are not

00:11:48,080 --> 00:11:52,520
able to get some tickets as a data back

00:11:50,000 --> 00:11:54,350
and actually if we are going to support

00:11:52,520 --> 00:11:56,690
as a virtual DMA you have to make sure

00:11:54,350 --> 00:11:58,670
that for Kim is a virtual diem of

00:11:56,690 --> 00:12:01,180
virtual of the virtual a medium you have

00:11:58,670 --> 00:12:03,680
to map you have to you know map to that

00:12:01,180 --> 00:12:11,780
exactly the same physical address of the

00:12:03,680 --> 00:12:17,870
NV deem previously right so so so far do

00:12:11,780 --> 00:12:22,580
we have any questions okay so let's go

00:12:17,870 --> 00:12:27,590
through the user cases basically we

00:12:22,580 --> 00:12:29,810
define some user cases and here I'm

00:12:27,590 --> 00:12:32,450
going to talk about the tools so the

00:12:29,810 --> 00:12:34,280
first one is a very basic you know the

00:12:32,450 --> 00:12:37,580
very basically user case we just

00:12:34,280 --> 00:12:39,890
launched a VM which is run time run

00:12:37,580 --> 00:12:42,290
protection of the imitating by using the

00:12:39,890 --> 00:12:44,690
CP generally turkey so in these cases

00:12:42,290 --> 00:12:46,910
you know the the key will be handled by

00:12:44,690 --> 00:12:50,150
szyskii basically using the CP generic e

00:12:46,910 --> 00:12:53,270
may be provided some and some n trophies

00:12:50,150 --> 00:12:57,050
from the CSP and the VM image will be

00:12:53,270 --> 00:13:01,550
provided CSP as well and and the second

00:12:57,050 --> 00:13:04,880
one is complicated to use a case for

00:13:01,550 --> 00:13:08,870
example we can launch the VM with the at

00:13:04,880 --> 00:13:10,889
arrest you know in protected and we can

00:13:08,870 --> 00:13:13,410
answer the VM with the runtime

00:13:10,889 --> 00:13:16,290
a protector as well as MK Timmy and the

00:13:13,410 --> 00:13:19,470
keys can be fully and controlled by that

00:13:16,290 --> 00:13:21,629
car by the tenant and we can have the

00:13:19,470 --> 00:13:24,389
host trust me is verified by using a

00:13:21,629 --> 00:13:27,059
test station service and additionally we

00:13:24,389 --> 00:13:28,769
can also require the VM images integrity

00:13:27,059 --> 00:13:32,699
to be verified before launching the VM

00:13:28,769 --> 00:13:36,269
and the special one is because the key

00:13:32,699 --> 00:13:41,579
ID is Richard key ID as some kind of

00:13:36,269 --> 00:13:43,559
precious resource so so we can support

00:13:41,579 --> 00:13:45,509
actually is a key idea sharing between

00:13:43,559 --> 00:13:49,019
the amount of virtual machines for

00:13:45,509 --> 00:13:52,319
example if the if one tenant is going to

00:13:49,019 --> 00:13:55,559
launch several virtual machines with the

00:13:52,319 --> 00:13:57,629
same and the same tenant key or it does

00:13:55,559 --> 00:14:00,149
it all the tenth does not care what key

00:13:57,629 --> 00:14:03,749
to user Jeter just wants to use a simple

00:14:00,149 --> 00:14:05,549
key so in this case we can actually we

00:14:03,749 --> 00:14:08,069
can actually you know uses a key ID

00:14:05,549 --> 00:14:11,100
sharing - you know just to use one key I

00:14:08,069 --> 00:14:14,609
did - you know to lunch

00:14:11,100 --> 00:14:16,889
all those VMs so the first case is quite

00:14:14,609 --> 00:14:19,769
simple we just launcher the VM with CP

00:14:16,889 --> 00:14:22,199
generally key and security property is

00:14:19,769 --> 00:14:26,429
that we can have the VM runtime

00:14:22,199 --> 00:14:28,949
protection and you know and we can or we

00:14:26,429 --> 00:14:32,329
can choose to have oh you can choose to

00:14:28,949 --> 00:14:36,509
have have no addressed and the transit

00:14:32,329 --> 00:14:39,679
protection and here there is no trust me

00:14:36,509 --> 00:14:43,019
host of trust in a verification Arawak

00:14:39,679 --> 00:14:45,869
and here is a second user case you can

00:14:43,019 --> 00:14:47,850
see that before we launch the there's a

00:14:45,869 --> 00:14:50,549
VM actor is a tender can't can can

00:14:47,850 --> 00:14:52,769
choose to encrypt its VM image by its

00:14:50,549 --> 00:14:55,649
own key and uploaded it to the images a

00:14:52,769 --> 00:14:58,079
repo and then it's issues VM lunch

00:14:55,649 --> 00:14:59,730
commander to the cloud manager and the

00:14:58,079 --> 00:15:02,879
current manager came before the launch

00:14:59,730 --> 00:15:05,249
of iam it can choose to you know to ask

00:15:02,879 --> 00:15:07,739
her whether the node can be trusted by

00:15:05,249 --> 00:15:09,779
asking the test station service so here

00:15:07,739 --> 00:15:12,119
we we needed to ask a computer to

00:15:09,779 --> 00:15:15,269
generate some report based on the

00:15:12,119 --> 00:15:17,939
hardware provided as a root of trust and

00:15:15,269 --> 00:15:22,019
- and send that to as attention as a

00:15:17,939 --> 00:15:24,400
station service - to verify and after

00:15:22,019 --> 00:15:28,810
the compute node is verified so that

00:15:24,400 --> 00:15:30,880
we can launch the VM and we can also you

00:15:28,810 --> 00:15:34,600
know make the VM images integrity

00:15:30,880 --> 00:15:37,930
verified before lunch dat VM and we can

00:15:34,600 --> 00:15:40,810
even that you know because the VM image

00:15:37,930 --> 00:15:43,540
older empty and MK teams key is provided

00:15:40,810 --> 00:15:45,940
by the tenant so the camp you know that

00:15:43,540 --> 00:15:48,580
has to ask her tenant key server to get

00:15:45,940 --> 00:15:51,220
her the key and during this during this

00:15:48,580 --> 00:15:55,840
we can even ask her the computer know

00:15:51,220 --> 00:15:58,510
the to use a TPM right to to generate a

00:15:55,840 --> 00:16:00,970
publicly privately peer to and ask the

00:15:58,510 --> 00:16:02,650
attica the key server to encrypt the key

00:16:00,970 --> 00:16:05,980
before releasing data to the computer

00:16:02,650 --> 00:16:08,860
and order so in this case the VM will

00:16:05,980 --> 00:16:11,140
will launch the with the runtime

00:16:08,860 --> 00:16:15,850
protection and at the rest protection

00:16:11,140 --> 00:16:17,740
and if we use TS it's like migration we

00:16:15,850 --> 00:16:20,440
can support as an entrance interested

00:16:17,740 --> 00:16:22,930
protector as well and the host trust

00:16:20,440 --> 00:16:28,060
niece is verified the VM images

00:16:22,930 --> 00:16:29,890
integrity is verified as well and

00:16:28,060 --> 00:16:33,400
there's a he ID is a carries here and

00:16:29,890 --> 00:16:35,200
the idea is we just we make such as a

00:16:33,400 --> 00:16:36,790
cloud software to make the decision

00:16:35,200 --> 00:16:39,070
whether to share to share with other

00:16:36,790 --> 00:16:41,200
because academ sky software has all the

00:16:39,070 --> 00:16:43,120
knowledge of the virtual machine whether

00:16:41,200 --> 00:16:47,110
they came from the you know the same is

00:16:43,120 --> 00:16:48,630
the same tenant so the cloud software

00:16:47,110 --> 00:16:51,700
should maintain some table for example

00:16:48,630 --> 00:16:54,550
which virtual machines are using which

00:16:51,700 --> 00:16:57,210
which keep from which tenant and when a

00:16:54,550 --> 00:16:59,920
new vm launch request canvases it first

00:16:57,210 --> 00:17:02,560
can can query whether we can reuse some

00:16:59,920 --> 00:17:06,880
sums we can read some key ok IDs and

00:17:02,560 --> 00:17:09,550
then if we can then it's just get that

00:17:06,880 --> 00:17:11,500
key walkie ID and ask you me to lunch -

00:17:09,550 --> 00:17:15,520
lunch that vm otherwise it can create a

00:17:11,500 --> 00:17:17,440
new one and ask you to - to lunch so

00:17:15,520 --> 00:17:21,310
basically the cloud software can update

00:17:17,440 --> 00:17:23,170
this table you know when the vm is

00:17:21,310 --> 00:17:27,700
launched and then when the VM is

00:17:23,170 --> 00:17:32,100
teardown so the last is our enabling

00:17:27,700 --> 00:17:32,100
status so for any questions

00:17:33,910 --> 00:17:40,120
yes so this is overall in the enabling

00:17:37,560 --> 00:17:44,070
so for the normal case it's actually

00:17:40,120 --> 00:17:47,410
quite simple you just have to set up the

00:17:44,070 --> 00:17:50,530
set up as a virtual machine memory you

00:17:47,410 --> 00:17:52,630
know in both hosted hosted the cumulus

00:17:50,530 --> 00:17:56,320
to the page table and they enter the IP

00:17:52,630 --> 00:17:59,890
T so that you know um the reason is that

00:17:56,320 --> 00:18:01,690
circum you has to access sagesses of him

00:17:59,890 --> 00:18:04,390
as a memory for example for some

00:18:01,690 --> 00:18:06,640
immolated device so we have to make sure

00:18:04,390 --> 00:18:10,270
that Camille can as a compressor itself

00:18:06,640 --> 00:18:13,960
can access guesses the memory with a

00:18:10,270 --> 00:18:15,850
correct key ID so this is done by you

00:18:13,960 --> 00:18:18,160
know setting up as the same key ID in

00:18:15,850 --> 00:18:20,890
both EPT and as a whole supreme is host

00:18:18,160 --> 00:18:23,770
a page table and for passel we set up

00:18:20,890 --> 00:18:27,130
the key ID to the MMU and for virtual

00:18:23,770 --> 00:18:29,740
and a/v host you know if the virtual L

00:18:27,130 --> 00:18:32,140
or we host the kernel it requires to

00:18:29,740 --> 00:18:35,080
read as a as a guest the memory directly

00:18:32,140 --> 00:18:37,570
it needs to set up the key ID in the for

00:18:35,080 --> 00:18:41,110
example in the in the key map so that it

00:18:37,570 --> 00:18:43,450
can read out as a guest memory and if we

00:18:41,110 --> 00:18:47,560
are going to DM it directly to the guest

00:18:43,450 --> 00:18:50,050
as a guest as a encrypted memory so we

00:18:47,560 --> 00:18:52,450
have to add the key ID to the to a DMA

00:18:50,050 --> 00:18:54,790
support either through the mu or either

00:18:52,450 --> 00:18:58,150
through the directed DMA and the

00:18:54,790 --> 00:19:00,760
language actually is it involves the DMA

00:18:58,150 --> 00:19:05,220
so basically we can see we need to

00:19:00,760 --> 00:19:08,950
suppose the DMA with with the key ID so

00:19:05,220 --> 00:19:11,290
so a recap is what we needed to do in

00:19:08,950 --> 00:19:13,120
terms of enabling key so from hostel

00:19:11,290 --> 00:19:15,370
currents perspective there are those

00:19:13,120 --> 00:19:18,310
components we need we need to modify so

00:19:15,370 --> 00:19:20,170
firstly is a key key ID management API

00:19:18,310 --> 00:19:22,570
which we are going to use a key

00:19:20,170 --> 00:19:25,150
retention service and we will add a new

00:19:22,570 --> 00:19:27,670
MKT me tab key and it's where just

00:19:25,150 --> 00:19:30,040
returns a handle to a user space but not

00:19:27,670 --> 00:19:32,110
actual key ID and the co mm encoder

00:19:30,040 --> 00:19:35,020
needs to be modified for example to menu

00:19:32,110 --> 00:19:36,820
to manipulate the key ID in the VMA and

00:19:35,020 --> 00:19:38,290
page table and you know set up the

00:19:36,820 --> 00:19:40,210
kitchen table in the page for something

00:19:38,290 --> 00:19:44,410
like that and we will have a new system

00:19:40,210 --> 00:19:46,830
call to to apply some user space the

00:19:44,410 --> 00:19:49,110
processes a particularly address range

00:19:46,830 --> 00:19:51,419
with some you know with MK teams can

00:19:49,110 --> 00:19:53,880
handle and we are going to modify the

00:19:51,419 --> 00:19:55,679
VFR immu and there's a DMA to support

00:19:53,880 --> 00:19:57,450
carrier as well and the KVM is quite

00:19:55,679 --> 00:19:58,679
simple actually we just need to set out

00:19:57,450 --> 00:20:00,870
the key ID in the EPT

00:19:58,679 --> 00:20:02,850
or the shadow a shadow page table and

00:20:00,870 --> 00:20:05,279
commute it does two things

00:20:02,850 --> 00:20:07,590
so firstly it receives the key from the

00:20:05,279 --> 00:20:10,110
cloud software and the second whities

00:20:07,590 --> 00:20:12,120
applies a key handle to all the guesses

00:20:10,110 --> 00:20:16,799
memory by calling that so you had a

00:20:12,120 --> 00:20:19,260
system call so this is our proposed

00:20:16,799 --> 00:20:21,210
modification to cream you basically we

00:20:19,260 --> 00:20:22,919
had a new MK team against the object

00:20:21,210 --> 00:20:26,279
that who carries a hammock a teammate

00:20:22,919 --> 00:20:31,049
handle and this is actually a lander

00:20:26,279 --> 00:20:33,269
with md's SCV guest object and we are

00:20:31,049 --> 00:20:35,639
going to use the memory in encryption

00:20:33,269 --> 00:20:38,519
that property of machine property to

00:20:35,639 --> 00:20:40,710
indicate the vm is associated with some

00:20:38,519 --> 00:20:43,830
some key ID this is a consistent with

00:20:40,710 --> 00:20:46,679
the MDC SSE as well who introduced the

00:20:43,830 --> 00:20:50,340
memory encryption property actually so

00:20:46,679 --> 00:20:52,799
the reason is we do not see that we have

00:20:50,340 --> 00:20:55,320
to set up a multiple key IDs for one

00:20:52,799 --> 00:20:58,260
single virtual machine so currently we

00:20:55,320 --> 00:21:02,820
just you just wanted to reuse this thing

00:20:58,260 --> 00:21:05,519
and here is a simple command to launch

00:21:02,820 --> 00:21:09,960
the VM with particularly we use a new

00:21:05,519 --> 00:21:13,740
object image MKT Emma guest and use use

00:21:09,960 --> 00:21:16,769
a handle from our players so if you

00:21:13,740 --> 00:21:19,769
write us most small script we can you

00:21:16,769 --> 00:21:22,470
know you can't firstly you know use K

00:21:19,769 --> 00:21:25,919
routine shoe service that said at all

00:21:22,470 --> 00:21:29,820
which is key control to add a new MKT me

00:21:25,919 --> 00:21:33,120
tab key and just apply that and you know

00:21:29,820 --> 00:21:36,870
just ended in a saying that that key

00:21:33,120 --> 00:21:39,299
handle to the to me to launch that VM so

00:21:36,870 --> 00:21:41,880
this is our current status specification

00:21:39,299 --> 00:21:46,230
has been published you can find that on

00:21:41,880 --> 00:21:48,659
the website and for the coke there was a

00:21:46,230 --> 00:21:50,610
cool color enabling we have some patches

00:21:48,659 --> 00:21:54,240
already in upstream for example the

00:21:50,610 --> 00:21:57,240
future in emulation and as a supply

00:21:54,240 --> 00:21:58,799
configure stuff and some offices has

00:21:57,240 --> 00:22:00,150
already been centered community for

00:21:58,799 --> 00:22:03,450
feedback for example

00:22:00,150 --> 00:22:05,550
Makeda McKee type implementation and as

00:22:03,450 --> 00:22:08,460
components the working progress in

00:22:05,550 --> 00:22:11,040
internal we have some contacted working

00:22:08,460 --> 00:22:13,740
but its internal Oni and the for Kevin

00:22:11,040 --> 00:22:17,880
Kimi we have done some POC to verify its

00:22:13,740 --> 00:22:19,530
it can actual work and but in terms of

00:22:17,880 --> 00:22:22,700
setting up a tree to the community we

00:22:19,530 --> 00:22:31,740
have to depend on a coconut parts ready

00:22:22,700 --> 00:22:37,050
yeah so that's all it any questions I'm

00:22:31,740 --> 00:22:39,780
sorry yep so basically the tenant key

00:22:37,050 --> 00:22:42,410
will be provided as a tent okay if I go

00:22:39,780 --> 00:22:44,850
back to this slide

00:22:42,410 --> 00:22:47,010
yeah right so basically the tenant key

00:22:44,850 --> 00:22:49,560
we provide its key its key server and

00:22:47,010 --> 00:22:51,450
there's other I think there's other some

00:22:49,560 --> 00:22:54,120
other ways but just the typical ways a

00:22:51,450 --> 00:22:55,830
tenant you know when the VM is a tenant

00:22:54,120 --> 00:23:00,060
send a VM lunch request to the service

00:22:55,830 --> 00:23:02,970
provider and it contains a key server so

00:23:00,060 --> 00:23:05,820
that is a sort of that as a yeah you

00:23:02,970 --> 00:23:17,340
know the cloud software can can can ask

00:23:05,820 --> 00:23:19,800
the key server to release the key yes I

00:23:17,340 --> 00:23:21,090
means a communication between key server

00:23:19,800 --> 00:23:24,240
and the camp you know that can be

00:23:21,090 --> 00:23:26,010
protected by city is right and the other

00:23:24,240 --> 00:23:29,370
thing is that so we can ask as a

00:23:26,010 --> 00:23:32,520
computer to to use the TPM to generate

00:23:29,370 --> 00:23:34,650
some key pair and you dare to to wrap

00:23:32,520 --> 00:23:36,210
the key before sending before before

00:23:34,650 --> 00:23:40,770
releasing that the key to the computer

00:23:36,210 --> 00:23:44,440
know that yeah we can choose to yet to

00:23:40,770 --> 00:23:51,760
wrap to to wrap that key yeah

00:23:44,440 --> 00:23:53,470
I mean Sotiris is a you know a chest can

00:23:51,760 --> 00:23:54,850
be connected can be established between

00:23:53,470 --> 00:23:57,520
the key silver and the computer know the

00:23:54,850 --> 00:24:00,100
right so it so I think basically with

00:23:57,520 --> 00:24:02,560
the tears protection you can't actually

00:24:00,100 --> 00:24:05,170
stand as a key directly you know right

00:24:02,560 --> 00:24:08,050
so because the contents will be in would

00:24:05,170 --> 00:24:10,450
be encrypted by the TRS but in

00:24:08,050 --> 00:24:13,660
additionally additionally you can also

00:24:10,450 --> 00:24:15,550
ask the key computer know that to saying

00:24:13,660 --> 00:24:17,710
that you are public to ascending you'll

00:24:15,550 --> 00:24:20,230
keep here you know by generating

00:24:17,710 --> 00:24:22,000
generally by the TPM so which which

00:24:20,230 --> 00:24:24,490
means only this computer know that can

00:24:22,000 --> 00:24:34,240
decrypt that a key so which will be most

00:24:24,490 --> 00:24:37,540
Curie in our thinking no I think it's

00:24:34,240 --> 00:24:39,280
transparent to to the guests because one

00:24:37,540 --> 00:24:41,860
of the Vantage MK diem is we don't have

00:24:39,280 --> 00:24:43,570
to the only modification to the guests

00:24:41,860 --> 00:24:45,490
you know it's a because we set up the

00:24:43,570 --> 00:24:48,310
key ID in the guest memory so before

00:24:45,490 --> 00:24:50,650
before we copy any data for example base

00:24:48,310 --> 00:24:52,390
image and other images to the VM image

00:24:50,650 --> 00:24:54,610
to the virtual machines of memory

00:24:52,390 --> 00:24:57,780
actually we have already set up the key

00:24:54,610 --> 00:25:00,730
ID so once the data is copied into that

00:24:57,780 --> 00:25:03,250
memory it will be inked which will be

00:25:00,730 --> 00:25:05,470
increment and zag when guest tries to

00:25:03,250 --> 00:25:08,580
access that kind of memory it will be

00:25:05,470 --> 00:25:08,580
difficult automatically

00:25:22,030 --> 00:25:37,210
yeah okay so you're talking about

00:25:34,700 --> 00:25:44,150
exposing him kick him to the gas right

00:25:37,210 --> 00:25:46,160
yeah I think so you have to see the well

00:25:44,150 --> 00:25:48,470
actually applying the caddie to the

00:25:46,160 --> 00:25:51,140
gases the physical dress won't won't

00:25:48,470 --> 00:25:53,750
work because MK team only happens at the

00:25:51,140 --> 00:25:55,370
physical dress level so applying to the

00:25:53,750 --> 00:26:01,000
carats who gets the physical dress won't

00:25:55,370 --> 00:26:01,000
work you know right yep

00:26:14,470 --> 00:26:25,760
yeah yeah so basically the PME we SEOs

00:26:23,720 --> 00:26:28,760
guess the memory right because it has

00:26:25,760 --> 00:26:32,330
the same key ID in its own host the page

00:26:28,760 --> 00:26:39,650
table right so it's just the in terms of

00:26:32,330 --> 00:26:41,600
the memory accesses so if right right

00:26:39,650 --> 00:26:43,610
it's not it's not protected from the

00:26:41,600 --> 00:26:47,740
commute because yeah because Kimmy has

00:26:43,610 --> 00:26:47,740
to be part of the part of the TCB here

00:26:55,700 --> 00:27:13,190
I beg your pardon

00:26:59,290 --> 00:27:16,880
yeah write it so the code needs to be in

00:27:13,190 --> 00:27:19,370
the in the TCB as well yeah right yeah

00:27:16,880 --> 00:27:21,770
for if you if a column is compromised

00:27:19,370 --> 00:27:23,840
that you know you can you can easily you

00:27:21,770 --> 00:27:25,730
know set up some key ID to some other

00:27:23,840 --> 00:27:28,220
place you can you can manipulate it on

00:27:25,730 --> 00:27:29,600
the page table so everything a breaks I

00:27:28,220 --> 00:27:32,450
think so yeah

00:27:29,600 --> 00:27:36,620
for MKT mokona has to be in the tcp yeah

00:27:32,450 --> 00:27:39,710
essentially basically related question

00:27:36,620 --> 00:27:42,950
then what I don't understand is how does

00:27:39,710 --> 00:27:45,669
KBM in the kernel have access to all the

00:27:42,950 --> 00:27:48,799
memory of all guests like it would today

00:27:45,669 --> 00:27:50,929
you mean KVM mod you can't access all

00:27:48,799 --> 00:27:51,980
the right so the KVM module running in

00:27:50,929 --> 00:27:54,830
the kernel yep

00:27:51,980 --> 00:27:57,620
does it have can it read and write all

00:27:54,830 --> 00:28:00,230
guess memory in this scheme yeah sure if

00:27:57,620 --> 00:28:02,030
you yeah if just a like that you know if

00:28:00,230 --> 00:28:04,549
the coding is compromising which means

00:28:02,030 --> 00:28:08,270
you can certainly set up you know any

00:28:04,549 --> 00:28:10,100
caddy in your in the in the page table

00:28:08,270 --> 00:28:12,830
oh you can set up any caddy when you do

00:28:10,100 --> 00:28:15,110
some k-map to accept to access that in

00:28:12,830 --> 00:28:15,860
to access there's a page with some

00:28:15,110 --> 00:28:37,130
particular caddy

00:28:15,860 --> 00:28:40,429
yeah separating out you mean it means so

00:28:37,130 --> 00:28:43,250
you means enhancing the security by

00:28:40,429 --> 00:28:45,110
isolating I'm not sure whether I

00:28:43,250 --> 00:28:56,150
understand your question correctly

00:28:45,110 --> 00:28:59,740
I'm sorry like instead of not using keys

00:28:56,150 --> 00:28:59,740
let's say you

00:29:02,520 --> 00:29:06,420
to see it like it seems like go get you

00:29:04,410 --> 00:29:09,420
to the same place so like it within KVM

00:29:06,420 --> 00:29:12,090
or I'd say between qemu processes that

00:29:09,420 --> 00:29:18,060
should only be able to view a single VM

00:29:12,090 --> 00:29:28,560
you just don't map it in I guess it can

00:29:18,060 --> 00:29:30,420
talk to you after this oh okay okay

00:29:28,560 --> 00:29:32,990
thank you very much okay thank you very

00:29:30,420 --> 00:29:32,990
much thank you

00:29:33,590 --> 00:29:40,020

YouTube URL: https://www.youtube.com/watch?v=u5m2Lv5DRb8


