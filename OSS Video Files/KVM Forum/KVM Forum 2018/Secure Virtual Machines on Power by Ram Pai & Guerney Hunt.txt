Title: Secure Virtual Machines on Power by Ram Pai & Guerney Hunt
Publication date: 2018-11-14
Playlist: KVM Forum 2018
Description: 
	Virtual-machines (VMs) on cloud platform are vulnerable to attacks from sources ranging from other virtual machines, compromised hypervisor to malicious cloud administrator. Securing these VMs requires specialized hardware and software features. Multiple vendors have proposed innovative features to support this need.

Ram and Guerney present the Power9 architectural features that enable a new opensource firmware entity called the Ultravisor. Togather these two components enable the KVM Hypervisor to support a new class of VMs called Secure Virtual Machines (SVMs). This presentation describes the Ultravisor interfaces, the enhancements to KVM and other opensource software entities in the ecosystem.

---

Guerney Hunt
Research Staff Member
IBM Research

Dr. Guerney D. H. Hunt has been a Research Staff Member at IBMâ€™s T. J. Watson Research Center since 1995. He is currently working on transferring security technology into IBM products, and developing additional security technology. He participated in a team funded by the Department of Homeland Security and the Canadian government to develop an end-to-end security architecture. He has been working on developing architectural changes that can be used to increase the security of computer systems since 2008. He joined IBM Research in 1995 in the distributed computing group where he became the co-inventor of layer seven scaling technology. He has worked in the secure intermediary infrastructures, advanced cluster systems, and distributed infrastructure groups before joining the Security Research Department in 2008. He was also the PI of the Next Generation Secure Computer Architecture exploratory research project. He has work on blockchain security. Prior to IBM Research, Dr. Hunt work in IBM development from 1981-1983 and he worked for NCR from 1975-1981. His earlier work was in software and microcode development, IBM product engineering, and OS development for VM/370. Since joining IBM Research he has held management and non management positions. 
His first conference presentation was at WWW7 in Brisbane Australia in 1998. He also did a poster session at SOSP XVII in 1999. Since that time, he has done multiple customer, business and conference presentations.. 
Dr. Hunt holds a BS in mathematics from Michigan Technological University and an MS and Ph.D. in computer science from Cornell University. He is a senior member of the IEEE and a member of the ACM, was a founding member of the editorial board of IEEE Pervasive Computing, he holds more than 21 US and foreign patents, has published papers, and has been an IBM Master Inventor. CV available upon request.

Ram Pai
Software Development Lead
IBM

Ram Pai is a Linux kernel developer since 2001. He works for IBM's Linux Technology Center in Hillboro Oregon. He has enabled the VFS Shared-Subtree and POWER memory-key feature to the Linux Kernel. He has also contributed to enable SRIOV, the page cache readahead algorithm, tools to track exported symbols, and other miscellaneous features to the kernel. Currently he is leading the Secure VM enablement on POWER.
Ram has presented on "Shared subtree" at Ottowa Linux Symposium(OLS) 2006, and "Enhancements to Readahead algorithm" at OLS 2004.
Captions: 
	00:00:01,040 --> 00:00:07,230
[Music]

00:00:05,690 --> 00:00:10,530
welcome everybody

00:00:07,230 --> 00:00:14,820
I'm Rahm I work for IBM for the next

00:00:10,530 --> 00:00:16,500
Technology Center I'm leading the what

00:00:14,820 --> 00:00:18,119
we call as the ultra wiser project which

00:00:16,500 --> 00:00:21,750
is basically a secure virtual machine

00:00:18,119 --> 00:00:24,869
enabling technology we had quite an

00:00:21,750 --> 00:00:27,869
exciting week dis this week we had quite

00:00:24,869 --> 00:00:29,880
an exciting week we booted out first

00:00:27,869 --> 00:00:32,899
secure virtual machine on powerline

00:00:29,880 --> 00:00:35,010
hardware in the lab and that was quite a

00:00:32,899 --> 00:00:37,410
significant like quite an exciting event

00:00:35,010 --> 00:00:39,210
for us so I know most of you will be

00:00:37,410 --> 00:00:43,710
asking what secure virtual machine sees

00:00:39,210 --> 00:00:46,020
and this talk is about that so secure

00:00:43,710 --> 00:00:48,899
virtual machines this is roughly my

00:00:46,020 --> 00:00:50,850
agenda is briefly stating the problem

00:00:48,899 --> 00:00:52,770
statement and then go to the technology

00:00:50,850 --> 00:00:56,850
pieces that make up the secure virtual

00:00:52,770 --> 00:00:58,949
machine so what's the problem the

00:00:56,850 --> 00:01:00,629
problem is not everybody wants to get

00:00:58,949 --> 00:01:02,640
onto the cloud because they are not very

00:01:00,629 --> 00:01:05,250
sure about the security of the virtual

00:01:02,640 --> 00:01:07,170
machine anyone can attack there are bugs

00:01:05,250 --> 00:01:08,909
in the operating system bugs in the

00:01:07,170 --> 00:01:10,830
hypervisor that anybody can exploit it

00:01:08,909 --> 00:01:12,030
even if there's everything is good you

00:01:10,830 --> 00:01:16,110
may not be able to trust the

00:01:12,030 --> 00:01:18,869
administrator so how do we how do how do

00:01:16,110 --> 00:01:22,110
we try to avoid this like give those

00:01:18,869 --> 00:01:25,920
assurances guarantees to workloads like

00:01:22,110 --> 00:01:28,229
like healthcare banking government that

00:01:25,920 --> 00:01:31,259
if you are running on these machines on

00:01:28,229 --> 00:01:32,670
the security of machines your data will

00:01:31,259 --> 00:01:35,670
not be compromised or nobody will be

00:01:32,670 --> 00:01:39,270
able to steal your data so what how do

00:01:35,670 --> 00:01:43,649
we solve that problem and the solution

00:01:39,270 --> 00:01:46,979
to that problem is make sure that the

00:01:43,649 --> 00:01:49,229
operating system none of the the

00:01:46,979 --> 00:01:51,780
hypervisor or any of the software that

00:01:49,229 --> 00:01:53,430
is running on the system can get access

00:01:51,780 --> 00:01:56,430
to the content which is that in the

00:01:53,430 --> 00:01:59,100
virtual machine there are multiple ways

00:01:56,430 --> 00:02:02,670
of doing this one way is making sure

00:01:59,100 --> 00:02:05,880
that the the data in the that is in this

00:02:02,670 --> 00:02:08,250
virtual machine is encrypted

00:02:05,880 --> 00:02:09,750
nobody can if somebody tries to access

00:02:08,250 --> 00:02:10,950
it they will get encrypted data so

00:02:09,750 --> 00:02:13,950
there's no way they can interpret the

00:02:10,950 --> 00:02:17,430
data that is the way I think

00:02:13,950 --> 00:02:19,530
and intel does it we have chosen a

00:02:17,430 --> 00:02:22,620
different approach here we'll make sure

00:02:19,530 --> 00:02:25,019
that neither the hypervisor nor the

00:02:22,620 --> 00:02:26,910
operating system nor anything else which

00:02:25,019 --> 00:02:28,980
is running on the system will be you and

00:02:26,910 --> 00:02:31,050
be able to access the data or the the

00:02:28,980 --> 00:02:33,030
pages which contain the data so we are

00:02:31,050 --> 00:02:35,489
basically fencing the the other

00:02:33,030 --> 00:02:37,830
software's from accessing the data which

00:02:35,489 --> 00:02:40,260
is present in the virtual machine as a

00:02:37,830 --> 00:02:42,690
result there is no way data can be lost

00:02:40,260 --> 00:02:44,489
or compromised so that's the solution

00:02:42,690 --> 00:02:47,430
that we have and the enabling

00:02:44,489 --> 00:02:51,680
technologies for that is what we call as

00:02:47,430 --> 00:02:54,720
an ultra wiser I think this is the yeah

00:02:51,680 --> 00:02:56,970
we call that the the official name for

00:02:54,720 --> 00:02:59,130
that is protected execution authorizer

00:02:56,970 --> 00:03:00,989
firmware it's a piece of firmware that a

00:02:59,130 --> 00:03:03,000
piece of software that is part of the

00:03:00,989 --> 00:03:05,250
machine which gets loaded when you put

00:03:03,000 --> 00:03:08,280
up the machine and that is in control of

00:03:05,250 --> 00:03:10,380
the machine all the time and that is try

00:03:08,280 --> 00:03:13,079
that along with some of the hardware

00:03:10,380 --> 00:03:15,690
features that are then the p9 processor

00:03:13,079 --> 00:03:17,489
will make sure that neither the

00:03:15,690 --> 00:03:19,500
hypervisor nor any other thing that is

00:03:17,489 --> 00:03:20,880
running on the system will be able to

00:03:19,500 --> 00:03:24,389
access the data which is that in the

00:03:20,880 --> 00:03:25,859
virtual machine so we have this piece of

00:03:24,389 --> 00:03:27,269
software which we call as the ultra is a

00:03:25,859 --> 00:03:30,900
firmware which we are in it's in

00:03:27,269 --> 00:03:34,859
development and this is the piece that

00:03:30,900 --> 00:03:39,209
helps us to secure the watch the secure

00:03:34,859 --> 00:03:40,380
of the virtual machine now to understand

00:03:39,209 --> 00:03:42,060
how this thing works

00:03:40,380 --> 00:03:43,739
we need to little bit understand what

00:03:42,060 --> 00:03:46,920
are the features in the hardware that

00:03:43,739 --> 00:03:49,200
helps us enable this technology we have

00:03:46,920 --> 00:03:51,950
something called protection execution

00:03:49,200 --> 00:03:54,450
facility feature in power line processor

00:03:51,950 --> 00:03:57,420
which essentially has a lot of features

00:03:54,450 --> 00:04:01,579
but the main key components of that of

00:03:57,420 --> 00:04:04,380
the feature is one is it lets you

00:04:01,579 --> 00:04:06,359
segregate the physical memory like the

00:04:04,380 --> 00:04:08,340
address space of the physical physical

00:04:06,359 --> 00:04:09,930
address space you have a secure data

00:04:08,340 --> 00:04:12,269
space and you have a normal address

00:04:09,930 --> 00:04:14,609
space right all the memory that is

00:04:12,269 --> 00:04:17,549
sitting behind the security space will

00:04:14,609 --> 00:04:18,690
not is is can be accessed only if you

00:04:17,549 --> 00:04:20,070
have all the privileges

00:04:18,690 --> 00:04:23,490
otherwise you'll not be able to access

00:04:20,070 --> 00:04:25,020
it so we have this secure memory which

00:04:23,490 --> 00:04:27,150
is entirely a different physical address

00:04:25,020 --> 00:04:27,510
space which is accessible to this to the

00:04:27,150 --> 00:04:29,820
soft

00:04:27,510 --> 00:04:33,090
which is running only in a mode which is

00:04:29,820 --> 00:04:35,340
the secure mode right the the secure

00:04:33,090 --> 00:04:39,120
mode is the piece for here that the CPU

00:04:35,340 --> 00:04:41,610
provides you a way where only if you

00:04:39,120 --> 00:04:43,350
have that secure baton when you are

00:04:41,610 --> 00:04:45,120
running you'll be able to access any

00:04:43,350 --> 00:04:46,980
memory on the system including the

00:04:45,120 --> 00:04:49,710
secure memory if you don't have access

00:04:46,980 --> 00:04:51,180
if you don't have that baton then you

00:04:49,710 --> 00:04:53,130
will not be able to access secure memory

00:04:51,180 --> 00:04:55,710
at all right

00:04:53,130 --> 00:04:58,950
and there is a mode called ultra vires

00:04:55,710 --> 00:05:00,240
or mode which is more of which is more

00:04:58,950 --> 00:05:01,680
than the hypervisor mode there's a

00:05:00,240 --> 00:05:03,090
fourth mode that has been added to the

00:05:01,680 --> 00:05:07,020
power processor called the ultra wiser

00:05:03,090 --> 00:05:08,400
mode which is which is more like earlier

00:05:07,020 --> 00:05:10,080
the hypervisor was the guard on the

00:05:08,400 --> 00:05:11,550
system now it is the ultra wiser which

00:05:10,080 --> 00:05:14,430
is the Gardai pair wise it has been

00:05:11,550 --> 00:05:15,990
demoted a little bit it's kind of an it

00:05:14,430 --> 00:05:17,520
has to go through the ultra wiser in

00:05:15,990 --> 00:05:19,560
order to access the all the

00:05:17,520 --> 00:05:23,280
functionalities on the all the

00:05:19,560 --> 00:05:25,110
facilities on the on the system so the

00:05:23,280 --> 00:05:27,150
ultra is our mode it has access to all

00:05:25,110 --> 00:05:29,330
the resources and then the hypervisor

00:05:27,150 --> 00:05:31,260
mode which loses some of the access

00:05:29,330 --> 00:05:34,140
functionality that it had earlier

00:05:31,260 --> 00:05:36,780
without if this mode was not enabled

00:05:34,140 --> 00:05:38,670
that this protection n work sorry if PF

00:05:36,780 --> 00:05:41,220
is not enabled and hypervisor is the

00:05:38,670 --> 00:05:43,170
guard but if PF is enabled then

00:05:41,220 --> 00:05:44,910
hypervisor is not the ultra wisest the

00:05:43,170 --> 00:05:47,640
guard in the way in the sense everything

00:05:44,910 --> 00:05:49,350
has to be permitted by the ultra wiser

00:05:47,640 --> 00:05:52,110
you know if you want to access all the

00:05:49,350 --> 00:05:53,640
resources on the system and now if the

00:05:52,110 --> 00:05:56,670
hypervisor wants to access some of the

00:05:53,640 --> 00:06:00,000
resources which Delta wiser controls

00:05:56,670 --> 00:06:01,800
then the processor provides you a new

00:06:00,000 --> 00:06:03,870
call which we call as the ultra call

00:06:01,800 --> 00:06:04,980
apart from system call hyper call we

00:06:03,870 --> 00:06:07,080
have something called an ultra call

00:06:04,980 --> 00:06:09,030
facility so you can use the alter call

00:06:07,080 --> 00:06:10,800
facility as the ultra vires it to do the

00:06:09,030 --> 00:06:12,120
things on your behalf and I draw eyes

00:06:10,800 --> 00:06:17,010
that will do based on what you are

00:06:12,120 --> 00:06:18,390
asking for right so this is that's the

00:06:17,010 --> 00:06:20,700
functionality in the processor that is

00:06:18,390 --> 00:06:22,650
supported and now I'll quickly run

00:06:20,700 --> 00:06:25,460
through the what is the secure virtual

00:06:22,650 --> 00:06:27,990
machine we have a secure virtual machine

00:06:25,460 --> 00:06:30,810
which image the image that you have

00:06:27,990 --> 00:06:32,700
which is not on the is not the normal

00:06:30,810 --> 00:06:35,070
machine image that you have you have to

00:06:32,700 --> 00:06:38,790
change it a little bit the reason for

00:06:35,070 --> 00:06:40,889
that is you don't want your image to run

00:06:38,790 --> 00:06:42,479
on any hardware you want you will

00:06:40,889 --> 00:06:44,939
and the image on only the hardware that

00:06:42,479 --> 00:06:47,669
you trust in order to for that to happen

00:06:44,939 --> 00:06:51,389
you have to put some lock boxes in the

00:06:47,669 --> 00:06:53,610
sense some kind of binary bits digital

00:06:51,389 --> 00:06:57,560
bits onto the on your image which

00:06:53,610 --> 00:07:00,810
provides which which contains the key to

00:06:57,560 --> 00:07:02,699
decrypt the contents of the image right

00:07:00,810 --> 00:07:06,180
for example if you have the normal

00:07:02,699 --> 00:07:08,550
virtual image over here we have a tool

00:07:06,180 --> 00:07:10,409
which will take a couple of inputs like

00:07:08,550 --> 00:07:11,819
if you have a lot of secrets you can put

00:07:10,409 --> 00:07:14,250
all the secrets in what we call as a

00:07:11,819 --> 00:07:18,419
secure box over here and lock that

00:07:14,250 --> 00:07:20,099
secure box using the the platform keys

00:07:18,419 --> 00:07:22,349
the platforms on which you you want to

00:07:20,099 --> 00:07:24,719
run your virtual machine you encrypt

00:07:22,349 --> 00:07:28,500
that all your secrets using that key and

00:07:24,719 --> 00:07:30,180
what we are the log boxes so for example

00:07:28,500 --> 00:07:32,279
if you want to run your virtual image on

00:07:30,180 --> 00:07:35,069
let's say X hardware wired where and Z

00:07:32,279 --> 00:07:37,409
hardware but not on T Hardware then you

00:07:35,069 --> 00:07:40,520
take the platform keys of those

00:07:37,409 --> 00:07:42,870
hardware's and encrypt all your secret

00:07:40,520 --> 00:07:45,029
secrets to each other or here and keep

00:07:42,870 --> 00:07:48,509
that using that key and this is the log

00:07:45,029 --> 00:07:51,689
box so that way you create what we call

00:07:48,509 --> 00:07:54,330
as a secure virtual image virtual

00:07:51,689 --> 00:07:57,599
machine images VM image and this SEM

00:07:54,330 --> 00:08:00,330
image can then be deployed on the

00:07:57,599 --> 00:08:02,039
hardware so when you deploy the image on

00:08:00,330 --> 00:08:04,919
the hardware what happens is the image

00:08:02,039 --> 00:08:08,580
when you initially start will be in a

00:08:04,919 --> 00:08:10,949
normal mode it will it will not be in a

00:08:08,580 --> 00:08:14,279
secure mode to begin with I think unlike

00:08:10,949 --> 00:08:16,649
other vendors the image has to be

00:08:14,279 --> 00:08:18,270
coordinated by qmu or something else to

00:08:16,649 --> 00:08:20,099
in order to make it secure in this case

00:08:18,270 --> 00:08:22,649
came you need not be changed at all cami

00:08:20,099 --> 00:08:24,750
remains as it is and the images or the

00:08:22,649 --> 00:08:27,210
the image that is running in the virtual

00:08:24,750 --> 00:08:30,300
machine that decides whether it wants to

00:08:27,210 --> 00:08:33,269
go secure or not right so when it runs

00:08:30,300 --> 00:08:35,399
initially it is in a normal mode but

00:08:33,269 --> 00:08:36,899
then when you want to convert when it

00:08:35,399 --> 00:08:38,789
wants to switch to a secure mode it

00:08:36,899 --> 00:08:40,919
makes what we call as the secure all

00:08:38,789 --> 00:08:42,719
track all an ultra call that is made by

00:08:40,919 --> 00:08:44,760
the virtual image it goes to the L

00:08:42,719 --> 00:08:47,130
provider ultra wise the nessus the

00:08:44,760 --> 00:08:49,500
necessary things like allocating secure

00:08:47,130 --> 00:08:51,990
pages moving the data from the

00:08:49,500 --> 00:08:54,020
hypervisor to the secure memory in the

00:08:51,990 --> 00:08:56,160
ultra

00:08:54,020 --> 00:08:57,690
checking the integrity of all the

00:08:56,160 --> 00:09:04,200
kernels all the images that you have

00:08:57,690 --> 00:09:07,320
before switching before mugs providing

00:09:04,200 --> 00:09:09,480
that image the the the virtual machine

00:09:07,320 --> 00:09:11,010
image enabling the secure bit on that

00:09:09,480 --> 00:09:12,870
image before doing that it does all that

00:09:11,010 --> 00:09:14,430
integrity check and finally if

00:09:12,870 --> 00:09:17,430
everything works out well then it gives

00:09:14,430 --> 00:09:19,380
the secure bit enabled on this pre image

00:09:17,430 --> 00:09:22,470
and then it becomes a secure image at

00:09:19,380 --> 00:09:25,110
this point in time all its all the pages

00:09:22,470 --> 00:09:28,529
that the virtual machine had are now

00:09:25,110 --> 00:09:34,380
backed by secure pages so because of

00:09:28,529 --> 00:09:35,760
which the the hypervisor or qmu or any

00:09:34,380 --> 00:09:37,800
other entities that are there in the

00:09:35,760 --> 00:09:40,050
system apart from the ultra vires will

00:09:37,800 --> 00:09:42,120
not be able to access the content of the

00:09:40,050 --> 00:09:47,070
secure virtual machine because it is

00:09:42,120 --> 00:09:50,040
backed by secure pages so this doing by

00:09:47,070 --> 00:09:53,520
doing this we are guarding the virtual

00:09:50,040 --> 00:09:55,830
machine from any kind of bugs in the

00:09:53,520 --> 00:09:57,420
hypervisor or a raga if there's a rogue

00:09:55,830 --> 00:09:59,490
are pair wise it cannot be able it will

00:09:57,420 --> 00:10:01,560
not be able to access the contents of

00:09:59,490 --> 00:10:04,920
the virtual image any kind of

00:10:01,560 --> 00:10:07,650
vulnerability will be will be stopped

00:10:04,920 --> 00:10:09,360
and that is what provides the security

00:10:07,650 --> 00:10:10,860
to the virtual image and that's the

00:10:09,360 --> 00:10:13,529
default this is cura virtual machine

00:10:10,860 --> 00:10:18,050
images so itself secure virtual machine

00:10:13,529 --> 00:10:18,050
is any questions

00:10:40,750 --> 00:10:45,819
p.m. to verify it actually is inside the

00:10:43,569 --> 00:10:47,230
secure part so that that's the one point

00:10:45,819 --> 00:10:51,370
the other one is what I don't understand

00:10:47,230 --> 00:10:53,860
is how do you how do you move that guess

00:10:51,370 --> 00:10:56,170
now um how do you move that memory from

00:10:53,860 --> 00:10:58,089
insecure to secure is that a different

00:10:56,170 --> 00:10:59,649
world is it just attack so does it get

00:10:58,089 --> 00:11:00,730
encrypted a memory or is it a completely

00:10:59,649 --> 00:11:03,610
different section if it's a different

00:11:00,730 --> 00:11:07,449
section how do we tell the colonel that

00:11:03,610 --> 00:11:09,490
it can't page anymore so okay question

00:11:07,449 --> 00:11:10,990
number one was I think you had some

00:11:09,490 --> 00:11:12,519
wrong ISM shanira question can you

00:11:10,990 --> 00:11:15,310
repeat of question number one the

00:11:12,519 --> 00:11:16,660
question one is what is the attacks in

00:11:15,310 --> 00:11:18,670
our you're really trying to protect

00:11:16,660 --> 00:11:20,110
against because from at least this slide

00:11:18,670 --> 00:11:23,920
I don't know maybe do you explaining

00:11:20,110 --> 00:11:27,610
this later on it if I want to modify the

00:11:23,920 --> 00:11:29,949
VM at this at the left's point I can or

00:11:27,610 --> 00:11:31,870
if I had to begin correct you can't

00:11:29,949 --> 00:11:33,339
modify the if we modified the VM then

00:11:31,870 --> 00:11:35,920
the VM will not be able to move to

00:11:33,339 --> 00:11:38,709
secure mode because the ultra vires will

00:11:35,920 --> 00:11:40,329
check the VM for integrity if everything

00:11:38,709 --> 00:11:42,699
is good then only we'll be able to move

00:11:40,329 --> 00:11:44,589
it to the secure mode so what is the

00:11:42,699 --> 00:11:47,860
downside of not being in secure mode

00:11:44,589 --> 00:11:49,839
inside that VM if it is not in secure

00:11:47,860 --> 00:11:51,220
mode then the hypervisor will be able to

00:11:49,839 --> 00:11:52,990
access the content of the virtual

00:11:51,220 --> 00:11:55,360
machine like what is happening here so

00:11:52,990 --> 00:11:56,980
it is encrypted it's not encrypted but

00:11:55,360 --> 00:11:58,629
it will not be able to access the pages

00:11:56,980 --> 00:12:00,819
at all hypervisor will not be able to

00:11:58,629 --> 00:12:03,220
access the pages because the pages are

00:12:00,819 --> 00:12:05,589
now backed by secure pages and secure

00:12:03,220 --> 00:12:07,899
pages can be accessed only if you have

00:12:05,589 --> 00:12:10,180
the s bit on and that s bit on will be

00:12:07,899 --> 00:12:13,329
on only if the authorizers provided you

00:12:10,180 --> 00:12:14,980
that has put okay but if I malicious I'm

00:12:13,329 --> 00:12:17,529
trying to introspect was inside that VM

00:12:14,980 --> 00:12:19,480
I want to modify it I can just fake the

00:12:17,529 --> 00:12:23,860
secure piece I can just take the alter

00:12:19,480 --> 00:12:25,389
call I know I don't know how the how the

00:12:23,860 --> 00:12:29,350
semantics on the architecture work or

00:12:25,389 --> 00:12:31,839
that you can do not a call from say PR

00:12:29,350 --> 00:12:33,519
mode you could make an article well you

00:12:31,839 --> 00:12:35,500
cannot make an ultra call from PR mode

00:12:33,519 --> 00:12:37,209
but you can make on a supervisor mode

00:12:35,500 --> 00:12:40,899
right so what we could do is we could

00:12:37,209 --> 00:12:43,839
just run the VM in PR k vm fake fake all

00:12:40,899 --> 00:12:46,439
of it okay soso I guess Michael can

00:12:43,839 --> 00:12:46,439
explain that to me

00:12:48,160 --> 00:12:52,750
okay so you cannot let's say you are in

00:12:51,220 --> 00:12:54,040
supervisor mode and you can make an

00:12:52,750 --> 00:12:55,300
altar call that's what the point you are

00:12:54,040 --> 00:12:56,890
trying to make right what is in a PR

00:12:55,300 --> 00:12:59,560
mode in PR mode I don't think you can

00:12:56,890 --> 00:13:01,180
make a ultra cop it'll fail in

00:12:59,560 --> 00:13:03,880
supervisor mode you can make an ultra

00:13:01,180 --> 00:13:06,100
cop we will fail or village trap it'll

00:13:03,880 --> 00:13:07,480
fail I think it'll fail okay if it fails

00:13:06,100 --> 00:13:09,490
then it's fine if it traps I could

00:13:07,480 --> 00:13:11,830
emulate yeah it will fail but if you're

00:13:09,490 --> 00:13:13,900
not in a supervisor mode if you make an

00:13:11,830 --> 00:13:16,270
ultra call then yes it will come to the

00:13:13,900 --> 00:13:18,280
ultra Weiser and alt revisers we'll look

00:13:16,270 --> 00:13:20,410
at the image check for integrity because

00:13:18,280 --> 00:13:21,970
we have these locked boxes here go check

00:13:20,410 --> 00:13:24,000
the integrity of the data that is there

00:13:21,970 --> 00:13:27,790
and if you all the integrity check

00:13:24,000 --> 00:13:29,440
verifies then only it will be more all

00:13:27,790 --> 00:13:31,420
the content will be moved into well if

00:13:29,440 --> 00:13:32,890
the content will be more verified and

00:13:31,420 --> 00:13:35,440
everything checks then only it will be

00:13:32,890 --> 00:13:37,690
allowed to continue running by enabling

00:13:35,440 --> 00:13:38,920
the secure baton which means from then

00:13:37,690 --> 00:13:44,350
onwards it will be able to access the

00:13:38,920 --> 00:13:45,790
secure memory so we're not quite

00:13:44,350 --> 00:13:47,080
understanding is the usual scenario that

00:13:45,790 --> 00:13:48,760
people try to protect against with all

00:13:47,080 --> 00:13:51,460
the secure virtual machine pieces like

00:13:48,760 --> 00:13:53,740
the aimed implementation and Intel's

00:13:51,460 --> 00:13:56,370
interesting approach of putting KVM

00:13:53,740 --> 00:14:00,130
underneath Linux and other ones are

00:13:56,370 --> 00:14:01,810
always against protecting begins the

00:14:00,130 --> 00:14:04,270
hypervisor so you assume all of your

00:14:01,810 --> 00:14:05,560
hypothesis malicious correct we assumed

00:14:04,270 --> 00:14:08,980
we don't trust well I don't say

00:14:05,560 --> 00:14:11,440
malicious we don't trust our eyes well

00:14:08,980 --> 00:14:12,970
the hypervisor could have bugs so it may

00:14:11,440 --> 00:14:14,350
not be malicious could have bug somebody

00:14:12,970 --> 00:14:16,390
could exploit them and get into the

00:14:14,350 --> 00:14:18,340
virtual machine so in any case we don't

00:14:16,390 --> 00:14:20,110
trust the hypervisor in this case you

00:14:18,340 --> 00:14:22,210
have to just drop the trust ultra wiser

00:14:20,110 --> 00:14:23,650
because only the ultra wiser is the one

00:14:22,210 --> 00:14:25,510
who can access the content of the

00:14:23,650 --> 00:14:27,190
virtual machine the secure chill machine

00:14:25,510 --> 00:14:29,140
all right so if I throw resource I

00:14:27,190 --> 00:14:32,620
didn't just say I'm going to get my VM

00:14:29,140 --> 00:14:34,420
at this point I will I mean as long as I

00:14:32,620 --> 00:14:37,630
have the insecure part in the beginning

00:14:34,420 --> 00:14:41,200
I can always just fake the fact that it

00:14:37,630 --> 00:14:46,270
is secure now which part are you talking

00:14:41,200 --> 00:14:48,070
about sorry okay so which part is the

00:14:46,270 --> 00:14:49,720
insecure stuff in fact is they insecure

00:14:48,070 --> 00:14:51,670
the key of me apart is the insecure part

00:14:49,720 --> 00:14:53,680
yes you're starting off insecure the vm

00:14:51,670 --> 00:14:54,800
v BM BM basically is just running normal

00:14:53,680 --> 00:14:57,290
execution

00:14:54,800 --> 00:14:58,880
encrypted as there's no verification on

00:14:57,290 --> 00:15:00,980
whether what it's running is correct

00:14:58,880 --> 00:15:03,260
yeah there's no encryption afterwards

00:15:00,980 --> 00:15:04,990
either you don't have any decryption

00:15:03,260 --> 00:15:10,600
step from the authorizer which actually

00:15:04,990 --> 00:15:12,709
unlocks the the guest content based on a

00:15:10,600 --> 00:15:14,660
public/private key mechanism all right

00:15:12,709 --> 00:15:17,120
which means that if instead of running

00:15:14,660 --> 00:15:19,399
in a and on bare metal I just want all

00:15:17,120 --> 00:15:21,050
of that in emulation I can just fake the

00:15:19,399 --> 00:15:22,610
ultra vires I tell the guest yeah sure

00:15:21,050 --> 00:15:24,140
you secure now and the guest will

00:15:22,610 --> 00:15:26,990
happily do whatever the guest does so I

00:15:24,140 --> 00:15:29,000
don't get any security again how would

00:15:26,990 --> 00:15:29,720
you fake that revisor because because I

00:15:29,000 --> 00:15:31,550
don't even acts

00:15:29,720 --> 00:15:34,399
I don't even run PowerPC instructions

00:15:31,550 --> 00:15:37,130
I've just run that did the whole yeah

00:15:34,399 --> 00:15:38,690
okay so if you emulate it are you

00:15:37,130 --> 00:15:40,600
emulating in altruism or are you

00:15:38,690 --> 00:15:43,310
emulating in some other mode system

00:15:40,600 --> 00:15:44,660
which means you're not emulate in ultra

00:15:43,310 --> 00:15:47,360
razor mode you have to have the ultra

00:15:44,660 --> 00:15:49,370
Weiser bit on and a built in order for

00:15:47,360 --> 00:15:50,240
you to do what you're supposed to you

00:15:49,370 --> 00:15:51,709
are thinking of doing

00:15:50,240 --> 00:15:54,140
otherwise you'll not be able to do that

00:15:51,709 --> 00:15:56,360
you have to be in that guard mode which

00:15:54,140 --> 00:15:57,920
is the ultra Weiser mode right you are

00:15:56,360 --> 00:15:59,930
if you are trying to emulate the

00:15:57,920 --> 00:16:01,399
instructions in some other mode then you

00:15:59,930 --> 00:16:02,839
will not be able to provide whatever

00:16:01,399 --> 00:16:05,089
facilities that you are trying to

00:16:02,839 --> 00:16:07,130
provide to her we can take that offline

00:16:05,089 --> 00:16:14,720
because this is going to suppose spoil

00:16:07,130 --> 00:16:19,760
the presentation now what I go ahead I

00:16:14,720 --> 00:16:22,070
think yeah sure so this is how it so i

00:16:19,760 --> 00:16:23,810
roughly talked about I I think I talked

00:16:22,070 --> 00:16:26,029
about how secure virtual machines run

00:16:23,810 --> 00:16:27,470
and I've got only five minutes left so

00:16:26,029 --> 00:16:30,020
I'll quickly introduce what an ultra

00:16:27,470 --> 00:16:32,060
vires it is mostly I think we have

00:16:30,020 --> 00:16:33,350
understood it but go through the

00:16:32,060 --> 00:16:36,110
individual pieces here it's a firmware

00:16:33,350 --> 00:16:40,370
code it's open source and it will be GPL

00:16:36,110 --> 00:16:42,320
zone and that is the first one that gets

00:16:40,370 --> 00:16:44,000
loaded and gets executed in the secure

00:16:42,320 --> 00:16:45,230
memory because it's sitting in a piece

00:16:44,000 --> 00:16:47,540
of memory which cannot be accessed by

00:16:45,230 --> 00:16:47,860
anybody else except only the say ultra

00:16:47,540 --> 00:16:51,860
vires

00:16:47,860 --> 00:16:53,990
so it's job responsibilities are it as I

00:16:51,860 --> 00:16:55,670
told earlier it authorizes and validates

00:16:53,990 --> 00:16:58,250
with all the key mechanisms of that

00:16:55,670 --> 00:17:00,199
which goes and validates the contents of

00:16:58,250 --> 00:17:02,570
the virtual machine before trying to

00:17:00,199 --> 00:17:05,120
move it into secure mode it does that it

00:17:02,570 --> 00:17:07,480
manages the secure memory it backs the

00:17:05,120 --> 00:17:11,260
secured pages to secure virtual machines

00:17:07,480 --> 00:17:13,870
moves the data and also it provides the

00:17:11,260 --> 00:17:16,540
you call handlers like the hypervisor

00:17:13,870 --> 00:17:18,670
can request services from the authorizer

00:17:16,540 --> 00:17:21,610
through you calls same case with the

00:17:18,670 --> 00:17:23,920
virtual machines as well the other thing

00:17:21,610 --> 00:17:27,150
is these most of his responsibilities

00:17:23,920 --> 00:17:30,010
towards managing pages secure pages

00:17:27,150 --> 00:17:32,980
other responsibilities like scheduling

00:17:30,010 --> 00:17:35,680
IO those are still offloaded to the

00:17:32,980 --> 00:17:37,540
hypervisor and that we do by reflecting

00:17:35,680 --> 00:17:39,610
the ultra call and seeing what the first

00:17:37,540 --> 00:17:41,710
we marshal the data when you get an

00:17:39,610 --> 00:17:43,450
article you Marshall late and see

00:17:41,710 --> 00:17:46,120
whether the parameters are right if not

00:17:43,450 --> 00:17:47,260
we filter them out and then you the

00:17:46,120 --> 00:17:49,300
content to the hypervisor and the

00:17:47,260 --> 00:17:50,650
hypervisor does the service for us for

00:17:49,300 --> 00:17:56,530
the secure virtual machine and it turns

00:17:50,650 --> 00:18:00,310
back so changes to the hypervisor as

00:17:56,530 --> 00:18:02,710
such it's a hypervisor continues to work

00:18:00,310 --> 00:18:04,870
but only thing is now the memory that it

00:18:02,710 --> 00:18:07,330
is using its secure memory which it does

00:18:04,870 --> 00:18:11,230
is not in its control so we use some

00:18:07,330 --> 00:18:13,060
what we call as the the QM you still has

00:18:11,230 --> 00:18:14,770
to access the content of the secure

00:18:13,060 --> 00:18:18,070
memory for example for migrating the

00:18:14,770 --> 00:18:19,950
virtual machine for for hibernation or

00:18:18,070 --> 00:18:22,840
any of those kinds of things

00:18:19,950 --> 00:18:24,400
eme will not be able to get the content

00:18:22,840 --> 00:18:26,470
but it will get encrypted content if it

00:18:24,400 --> 00:18:30,130
tries to access it and that that's the

00:18:26,470 --> 00:18:33,100
mechanism done by the ultra vires so we

00:18:30,130 --> 00:18:36,070
have this module called a uhmm module

00:18:33,100 --> 00:18:39,340
which kind of plugs into the hmm and it

00:18:36,070 --> 00:18:46,060
provides a way of accessing the secure

00:18:39,340 --> 00:18:49,420
memory through the hmm interface right

00:18:46,060 --> 00:18:51,400
and that is how you can move pages in

00:18:49,420 --> 00:18:52,900
and out from the ultra vires into the

00:18:51,400 --> 00:18:55,380
normal memory again it will be encrypted

00:18:52,900 --> 00:18:58,990
and decrypted as it moves across and

00:18:55,380 --> 00:19:00,610
then we have some patches to to the

00:18:58,990 --> 00:19:02,710
hypervisor which have been posted on the

00:19:00,610 --> 00:19:04,720
mailing list over here which does the

00:19:02,710 --> 00:19:10,240
necessary things how much more time do I

00:19:04,720 --> 00:19:12,730
have for this am I done okay I think I'm

00:19:10,240 --> 00:19:15,730
done the last slide here thank you a lot

00:19:12,730 --> 00:19:18,610
of backup slides I will post them on the

00:19:15,730 --> 00:19:20,950
website and it contains the steps on how

00:19:18,610 --> 00:19:21,430
we migrate sorry how we switch a virtual

00:19:20,950 --> 00:19:22,990
machine from

00:19:21,430 --> 00:19:25,300
normal mode to secure virtual mode and

00:19:22,990 --> 00:19:39,490
any questions I can always be the here

00:19:25,300 --> 00:19:42,580
to answer this one so how do you handle

00:19:39,490 --> 00:19:48,040
iOS basically like if you do networking

00:19:42,580 --> 00:19:50,320
or like so for to do that I was the

00:19:48,040 --> 00:19:53,140
hypervisor visor has to have access to

00:19:50,320 --> 00:19:55,000
for example work I go right or the

00:19:53,140 --> 00:19:57,940
virtual private network of in the case

00:19:55,000 --> 00:19:59,980
of I go it is a what I go forward I go

00:19:57,940 --> 00:20:02,500
you are doing the hypervisor needs to

00:19:59,980 --> 00:20:03,820
access the buffers for it to access the

00:20:02,500 --> 00:20:06,490
buffers it will not be able to access

00:20:03,820 --> 00:20:10,210
the buffers because it's insecure memory

00:20:06,490 --> 00:20:11,770
so we have to modify or enhance this

00:20:10,210 --> 00:20:14,050
particular kernel in this virtual

00:20:11,770 --> 00:20:16,030
machine for it to do bounce buffers to

00:20:14,050 --> 00:20:17,830
do bonds buffers first it has to share

00:20:16,030 --> 00:20:19,990
some of the pages with the hypervisor

00:20:17,830 --> 00:20:21,760
there's some ultra call which you make

00:20:19,990 --> 00:20:22,990
to the ultra wiser dog the virtual

00:20:21,760 --> 00:20:24,730
machine tells the authorized that can

00:20:22,990 --> 00:20:26,920
you please share this particular range

00:20:24,730 --> 00:20:28,180
with the hypervisor for me and I'll

00:20:26,920 --> 00:20:30,550
revise that will go to the hypervisor

00:20:28,180 --> 00:20:33,100
get some normal pages and back normal

00:20:30,550 --> 00:20:34,810
pages to that range and then onwards it

00:20:33,100 --> 00:20:37,690
will be able to bounce the content from

00:20:34,810 --> 00:20:39,610
the from those pages so the hypervisor

00:20:37,690 --> 00:20:40,330
will be able to access them so that's

00:20:39,610 --> 00:20:43,170
how we do that

00:20:40,330 --> 00:20:46,540
also the encryption is its software

00:20:43,170 --> 00:20:49,180
sorry when you encrypt and decrypt not

00:20:46,540 --> 00:20:52,060
for shared pages if the pair if the for

00:20:49,180 --> 00:20:53,620
for other things yes if the any content

00:20:52,060 --> 00:20:56,200
moves into the hypervisor it will get

00:20:53,620 --> 00:20:58,330
encrypted any content which is take from

00:20:56,200 --> 00:21:00,190
the hypervisor into the secure memory

00:20:58,330 --> 00:21:02,320
will first end will check for the

00:21:00,190 --> 00:21:04,620
integrity and then only decrypt it and

00:21:02,320 --> 00:21:04,620
bring it back

00:21:13,230 --> 00:21:19,390
so you mentioned that it is like another

00:21:16,750 --> 00:21:23,020
set of memory in a system to secure

00:21:19,390 --> 00:21:27,730
memory correct can it be resized or or

00:21:23,020 --> 00:21:30,370
is it really just not a duplicate of the

00:21:27,730 --> 00:21:32,260
other memory no it is entirely a

00:21:30,370 --> 00:21:33,700
different memory it's like GPU memory if

00:21:32,260 --> 00:21:35,500
you know if GPU memory it's like

00:21:33,700 --> 00:21:37,030
heterogeneous memory right it teeters

00:21:35,500 --> 00:21:38,980
teach this memory is heterogeneous

00:21:37,030 --> 00:21:40,540
memory it's a memory which recites an

00:21:38,980 --> 00:21:43,000
entirely different in a different place

00:21:40,540 --> 00:21:45,820
and there is this module which helps to

00:21:43,000 --> 00:21:48,010
bring the pages in and out okay so for

00:21:45,820 --> 00:21:50,320
example if I would like a mutant module

00:21:48,010 --> 00:21:52,180
in my system I would only get half of it

00:21:50,320 --> 00:21:54,790
because the other half is research for

00:21:52,180 --> 00:21:57,520
secure you can configure it at the time

00:21:54,790 --> 00:22:00,220
of boot you can say I want so much

00:21:57,520 --> 00:22:01,960
secure memory and it will allocate I

00:22:00,220 --> 00:22:05,370
don't set aside that much memory for

00:22:01,960 --> 00:22:05,370
secure memory

00:22:11,710 --> 00:22:16,790
hi so when you start the beam do you

00:22:14,600 --> 00:22:18,470
have to reserve the entire memory that

00:22:16,790 --> 00:22:20,450
is required for the VM in the secure

00:22:18,470 --> 00:22:25,100
memory or can you do on demand

00:22:20,450 --> 00:22:26,960
allocation for the pages for the which

00:22:25,100 --> 00:22:29,360
the not so assuming that your guest has

00:22:26,960 --> 00:22:31,730
been you know reserved for like 4gb of

00:22:29,360 --> 00:22:33,770
RAM okay so you need to allocate do you

00:22:31,730 --> 00:22:36,470
allocate 4gb of RAM in the secure memory

00:22:33,770 --> 00:22:39,260
or do you allocate the sacred pages and

00:22:36,470 --> 00:22:41,570
when you go right okay so you is the one

00:22:39,260 --> 00:22:45,200
the authorized is the one who associates

00:22:41,570 --> 00:22:47,590
pages and it can do paging on demand

00:22:45,200 --> 00:22:50,510
like whenever the page is needed it can

00:22:47,590 --> 00:22:52,760
bring you allocate a new secure page and

00:22:50,510 --> 00:22:54,560
associated with it so it can do paging

00:22:52,760 --> 00:22:57,080
on demand so whatever the hypervisor

00:22:54,560 --> 00:22:58,730
does for normal memory normal pages the

00:22:57,080 --> 00:23:00,940
same thing authorizer does for secure

00:22:58,730 --> 00:23:06,290
pages for the secure virtual machine

00:23:00,940 --> 00:23:10,040
does it transfer question so so back to

00:23:06,290 --> 00:23:11,870
the integrity check aha I mean it's kind

00:23:10,040 --> 00:23:13,460
of odd that you boot first the VM into

00:23:11,870 --> 00:23:15,680
normal mode and then you kind of say

00:23:13,460 --> 00:23:17,330
okay now secure it how are you going to

00:23:15,680 --> 00:23:19,970
check the integrity I mean what do you

00:23:17,330 --> 00:23:22,900
check basically you want to take that

00:23:19,970 --> 00:23:22,900
answer sorry

00:23:27,429 --> 00:23:33,260
what we actually do is that the VM has

00:23:30,470 --> 00:23:33,559
what's called an ESN blob and inside of

00:23:33,260 --> 00:23:35,840
that

00:23:33,559 --> 00:23:37,910
sm blob is a bunch of information

00:23:35,840 --> 00:23:40,730
including information allows you to

00:23:37,910 --> 00:23:43,640
check the integrity of the VM so what

00:23:40,730 --> 00:23:46,820
happens is you actually switch to you

00:23:43,640 --> 00:23:49,100
your ESM call embedded in a secure VM is

00:23:46,820 --> 00:23:51,290
right after pom in it you don't get any

00:23:49,100 --> 00:23:53,750
further than prominent what happens is

00:23:51,290 --> 00:23:57,740
the VM is copied into secure memory a

00:23:53,750 --> 00:24:00,200
prominent time and then the the ultra

00:23:57,740 --> 00:24:03,049
vires has a key that allows it to look

00:24:00,200 --> 00:24:05,179
into this secure secure blob and it has

00:24:03,049 --> 00:24:07,880
the integrity information for all the

00:24:05,179 --> 00:24:09,700
poets of the VM it then checks the

00:24:07,880 --> 00:24:11,990
components of the VM that are still

00:24:09,700 --> 00:24:14,150
against the integrity information that

00:24:11,990 --> 00:24:17,299
was created when the VM was created

00:24:14,150 --> 00:24:19,490
if the integrity information that was

00:24:17,299 --> 00:24:22,309
recorded by the tooling when the SVM was

00:24:19,490 --> 00:24:24,080
created doesn't match what was copied

00:24:22,309 --> 00:24:26,660
from normal memory into regular memory

00:24:24,080 --> 00:24:30,290
then the VM will not execute and it

00:24:26,660 --> 00:24:32,000
fails so you don't you can't run the VM

00:24:30,290 --> 00:24:33,470
for an arbitrary amount of time before

00:24:32,000 --> 00:24:35,030
it switches because you're correct that

00:24:33,470 --> 00:24:37,640
wouldn't that would be that doesn't work

00:24:35,030 --> 00:24:41,540
you can't also you can also you can also

00:24:37,640 --> 00:24:44,059
not emulate that we also Rahm didn't

00:24:41,540 --> 00:24:46,549
mention it but the virtual machine disk

00:24:44,059 --> 00:24:48,650
is encrypted and the passphrase for the

00:24:46,549 --> 00:24:50,510
virtual machine disk is inside of the

00:24:48,650 --> 00:24:53,900
integrity information by the authorizer

00:24:50,510 --> 00:24:56,330
and the only way you can get the VM as

00:24:53,900 --> 00:24:58,400
it's as it proceeds into the boot boot

00:24:56,330 --> 00:25:01,070
process can get the passphrase to

00:24:58,400 --> 00:25:04,010
decrypt it's virtual to decrypt its

00:25:01,070 --> 00:25:06,500
virtual disk as if it uses an altar call

00:25:04,010 --> 00:25:08,450
to get the passphrase and if you're not

00:25:06,500 --> 00:25:10,309
running in secure mode that auto call

00:25:08,450 --> 00:25:13,370
will not fail so you will never be able

00:25:10,309 --> 00:25:15,140
to decrypt the disk etc I'm giving a

00:25:13,370 --> 00:25:16,840
detailed talk on the hardware and stuff

00:25:15,140 --> 00:25:19,940
tomorrow

00:25:16,840 --> 00:25:21,710
the cryptographic pieces granny is going

00:25:19,940 --> 00:25:25,429
to touch in the LSS talked with yes

00:25:21,710 --> 00:25:29,600
tomorrow ok I think we have to like and

00:25:25,429 --> 00:25:29,840
now so thank you thank you thank you

00:25:29,600 --> 00:25:32,440
everybody

00:25:29,840 --> 00:25:38,219
[Applause]

00:25:32,440 --> 00:25:38,219

YouTube URL: https://www.youtube.com/watch?v=l4jccqc14Vc


