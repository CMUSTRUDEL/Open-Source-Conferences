Title: vfio-ap: The Perils of the Weird by Halil Pasic
Publication date: 2018-11-14
Playlist: KVM Forum 2018
Description: 
	Pass-through of AP crypto adapters is an ongoing effort spanning KVM, QEMU, and Libvirt. Patches are under discussion. The problem at hand is unique due to the properties of the virtualization facilities provided by the platform. We use vfio-mdev to partition not a single device, but a set of devices. Another peculiarity is that individual cards can be partitioned, but not individually. The cards are partitioned into domains, which are independent from a functional perspective, but span all cards from an access-control perspective.

We have a family of drivers for the different card types on the ap bus. From a pass-through perspective these cards can be treated uniformly, so we ended up adding another driver to the ap bus. Consequently, we had to resolve a set of unique problems, such as how to bind the resources to the right driver and how to react when resources are unbound.

---

Halil Pasic
Software Enigneer
IBM

Halil is working on open source virtualization for IBM Z, with a focus on I/O. This means contributing to QEMU and KVM, while having an eye on integration with the upper management stack (mostly Libvirt).
Captions: 
	00:00:01,040 --> 00:00:09,059
[Music]

00:00:06,170 --> 00:00:10,889
I'm all purchased from IBM's aquarium

00:00:09,059 --> 00:00:14,400
team and I'm gonna cook them talk about

00:00:10,889 --> 00:00:16,049
their five AP grades actually most of

00:00:14,400 --> 00:00:17,940
the work was done by Anthony Crowe yet

00:00:16,049 --> 00:00:20,850
and Pierre Morel but don't worry I took

00:00:17,940 --> 00:00:23,600
the questions please read it very

00:00:20,850 --> 00:00:28,699
carefully for I won't read for you

00:00:23,600 --> 00:00:32,399
Todd bunch you are if I ate be objective

00:00:28,699 --> 00:00:36,290
we want to kayvyun based hard resistance

00:00:32,399 --> 00:00:41,070
path true for AP crypto devices on IBM z

00:00:36,290 --> 00:00:45,180
ib m v is an platform in architecture

00:00:41,070 --> 00:00:47,820
also known as 290 and the programming

00:00:45,180 --> 00:00:50,430
conventions everything that actually

00:00:47,820 --> 00:00:53,579
ninety specific is in room and not

00:00:50,430 --> 00:00:55,920
assumed to be known another typographic

00:00:53,579 --> 00:00:58,469
convention i have a lot of text so

00:00:55,920 --> 00:01:05,400
you'll be fine by reading just the blue

00:00:58,469 --> 00:01:09,650
one and the board on why should anybody

00:01:05,400 --> 00:01:11,330
care about AP krypton care about what

00:01:09,650 --> 00:01:15,900
exactly

00:01:11,330 --> 00:01:19,439
so AP crypto it's our boat these asian

00:01:15,900 --> 00:01:23,430
processors also known as crypto expense

00:01:19,439 --> 00:01:26,310
features which are basically just crypto

00:01:23,430 --> 00:01:30,659
cards for diving z machines and these

00:01:26,310 --> 00:01:35,159
are cool because they provide temple

00:01:30,659 --> 00:01:38,369
sensing tempered responding hsn's that

00:01:35,159 --> 00:01:43,640
means hardware security modules they can

00:01:38,369 --> 00:01:46,710
provide also other stuff you can do

00:01:43,640 --> 00:01:48,960
secure and protected keys with them i

00:01:46,710 --> 00:01:53,250
won't explain that we don't have time

00:01:48,960 --> 00:01:56,340
for it please look it up you can

00:01:53,250 --> 00:01:59,070
configure them dynamically with certain

00:01:56,340 --> 00:01:59,880
three different fermi loads that means

00:01:59,070 --> 00:02:03,110
if 11

00:01:59,880 --> 00:02:05,880
CCA and the seller rater and

00:02:03,110 --> 00:02:11,220
certifications also quite cool so for

00:02:05,880 --> 00:02:12,370
example with cryptographers 6 with I

00:02:11,220 --> 00:02:16,690
took the

00:02:12,370 --> 00:02:22,930
I belong or the CCA a theater or the CCA

00:02:16,690 --> 00:02:25,750
favor would you get 614 - to a lot of

00:02:22,930 --> 00:02:27,519
for certification all these stats

00:02:25,750 --> 00:02:32,440
designed it with tradition in mind

00:02:27,519 --> 00:02:34,510
because it's IBM Z and it's

00:02:32,440 --> 00:02:37,120
complementary to the epoxy earth I'll

00:02:34,510 --> 00:02:43,870
explain back CF right away I don't

00:02:37,120 --> 00:02:46,620
explain but tell us this so here we have

00:02:43,870 --> 00:02:51,040
a mainframe without the fancy doors and

00:02:46,620 --> 00:02:54,400
the c-bucs here it lives in the CPU

00:02:51,040 --> 00:02:58,090
which we call PU for whatever reason and

00:02:54,400 --> 00:03:00,370
those things live in the so called CPC

00:02:58,090 --> 00:03:03,489
that is central processing complex role

00:03:00,370 --> 00:03:05,950
in a machine of course and what you're

00:03:03,489 --> 00:03:12,340
talking about are the crypts

00:03:05,950 --> 00:03:20,099
interrupters thinks these are wrong

00:03:12,340 --> 00:03:24,940
button again yeah so these live in the

00:03:20,099 --> 00:03:28,840
PCIe outdoors and are managed by this PK

00:03:24,940 --> 00:03:32,940
it has three key entry infrastructure

00:03:28,840 --> 00:03:38,230
Kimmelman yeah everything very very cool

00:03:32,940 --> 00:03:42,129
so let's establish some names first the

00:03:38,230 --> 00:03:45,220
letters they have many names AP stands

00:03:42,129 --> 00:03:49,299
for agent processor which is basically

00:03:45,220 --> 00:03:51,639
the same as AP crypto feature and we

00:03:49,299 --> 00:03:53,379
also use adapter for that please try to

00:03:51,639 --> 00:03:53,819
remember adaptor because we will use the

00:03:53,379 --> 00:03:57,090
most

00:03:53,819 --> 00:04:04,959
these are identified on an architectural

00:03:57,090 --> 00:04:09,730
by the AP IDs each of these is adapters

00:04:04,959 --> 00:04:13,540
is partitioned into multiple domains so

00:04:09,730 --> 00:04:16,959
I have graphics for that here you have

00:04:13,540 --> 00:04:23,700
an adapter with a PID 0 and then you

00:04:16,959 --> 00:04:23,700
have domains within each row 2 and

00:04:24,930 --> 00:04:34,090
the domain and the domain are they

00:04:29,289 --> 00:04:36,509
identified by the EPQ I and the domain

00:04:34,090 --> 00:04:39,189
and adapter together view the actual

00:04:36,509 --> 00:04:42,189
functional device which provides you

00:04:39,189 --> 00:04:47,469
some cryptographic stuff like like H

00:04:42,189 --> 00:04:53,560
them and this is in turn identified by

00:04:47,469 --> 00:04:55,509
the AP q1 okay and everything is Poor's

00:04:53,560 --> 00:04:58,300
export the operating system to the

00:04:55,509 --> 00:05:04,750
software via these three instructions

00:04:58,300 --> 00:05:10,509
which means and Q a P the Q a P and

00:05:04,750 --> 00:05:15,520
process a P Q and Q and the Q strictly

00:05:10,509 --> 00:05:19,449
operate on uncouth that means and the

00:05:15,520 --> 00:05:24,340
Epicureans an operand and pick rape is

00:05:19,449 --> 00:05:26,860
special because sometimes operating just

00:05:24,340 --> 00:05:29,740
a Q if you do a reset if you do it for

00:05:26,860 --> 00:05:36,180
just a few but you can get kind of also

00:05:29,740 --> 00:05:36,180
configure Compu ID information from it

00:05:36,719 --> 00:05:46,870
okay some words about the platform I

00:05:43,979 --> 00:05:51,339
didn't know what would be the content of

00:05:46,870 --> 00:05:53,110
your talk so I can cut bit here but you

00:05:51,339 --> 00:05:56,199
need to understand these are big

00:05:53,110 --> 00:05:59,770
machines and here everything is

00:05:56,199 --> 00:06:03,759
virtualized so customer robot is not

00:05:59,770 --> 00:06:05,529
allowed to run native natively and the

00:06:03,759 --> 00:06:09,599
so called out part logical partition

00:06:05,529 --> 00:06:12,879
becomes the blue native and then we have

00:06:09,599 --> 00:06:17,560
gas for example KVM lights in guests

00:06:12,879 --> 00:06:23,110
from level 2 theoretically up to level 8

00:06:17,560 --> 00:06:26,080
and how which was a she is done it's all

00:06:23,110 --> 00:06:31,750
done by the side instruction which

00:06:26,080 --> 00:06:35,440
basically tells okay I won't run I guess

00:06:31,750 --> 00:06:36,790
if your be CPU on a wall CPU and the

00:06:35,440 --> 00:06:45,850
that takes the

00:06:36,790 --> 00:06:48,100
good description I'd noted to it SD as a

00:06:45,850 --> 00:06:50,260
parameter and it has also some

00:06:48,100 --> 00:06:52,870
satellites and then does almost

00:06:50,260 --> 00:06:57,490
everything except these cooperation from

00:06:52,870 --> 00:06:59,080
the hypervisor or the hypervisor wants

00:06:57,490 --> 00:07:00,970
to intervene for example to inject an

00:06:59,080 --> 00:07:03,100
interrupt or stuff happens like machine

00:07:00,970 --> 00:07:07,500
tracks or whatever then you just exit

00:07:03,100 --> 00:07:09,010
out of Zion and do what we need to do

00:07:07,500 --> 00:07:13,390
okay

00:07:09,010 --> 00:07:15,360
you certainly remember Alper is the new

00:07:13,390 --> 00:07:18,040
natives so we have to have

00:07:15,360 --> 00:07:23,020
virtualization for for everything and

00:07:18,040 --> 00:07:26,470
the good news is the guest one there is

00:07:23,020 --> 00:07:30,850
a per side virtualization for AP it

00:07:26,470 --> 00:07:35,290
scales up to two higher level guests so

00:07:30,850 --> 00:07:37,650
I first explain you how it's done on a

00:07:35,290 --> 00:07:40,210
low power level

00:07:37,650 --> 00:07:45,760
Alper is almost always about

00:07:40,210 --> 00:07:48,910
partitioning and AP is partitioned used

00:07:45,760 --> 00:07:54,850
three bit nuts using three bit maps so

00:07:48,910 --> 00:07:58,930
you have the APM and if a bit is not set

00:07:54,850 --> 00:08:02,800
in the APM it means you may not use this

00:07:58,930 --> 00:08:07,420
adapter at all with this guest then we

00:08:02,800 --> 00:08:13,780
have the EQ on if the bit is not set in

00:08:07,420 --> 00:08:18,670
the atrium you may not use this domain

00:08:13,780 --> 00:08:23,560
on any adapter and use is kind of read

00:08:18,670 --> 00:08:26,700
access and a VM is the very same but

00:08:23,560 --> 00:08:30,610
with control access that means modify

00:08:26,700 --> 00:08:32,530
for example changing keys generated

00:08:30,610 --> 00:08:36,700
generating retained case or in such

00:08:32,530 --> 00:08:39,729
operations okay so what you can actually

00:08:36,700 --> 00:08:45,250
do you get by some kind of a Cartesian

00:08:39,729 --> 00:08:47,320
product of APM dqm and IBM Lydian

00:08:45,250 --> 00:08:50,589
respectively

00:08:47,320 --> 00:08:54,430
this is how it works for guess one guest

00:08:50,589 --> 00:08:57,220
- and hire these masks they become

00:08:54,430 --> 00:08:59,740
so-called effective controls that means

00:08:57,220 --> 00:09:03,459
the effective 8:00 p.m. for a

00:08:59,740 --> 00:09:06,100
second-level guest is the bitwise and of

00:09:03,459 --> 00:09:09,040
the guest one 8:00 p.m.

00:09:06,100 --> 00:09:13,569
and to get to a p.m. and basically as a

00:09:09,040 --> 00:09:16,029
KVM we just need to get these masks

00:09:13,569 --> 00:09:17,740
right and everything almost everything

00:09:16,029 --> 00:09:22,839
works by default

00:09:17,740 --> 00:09:25,750
saya takes care of it okay I was told

00:09:22,839 --> 00:09:29,009
that this masks are complicated so I

00:09:25,750 --> 00:09:37,269
will try to explain it three times over

00:09:29,009 --> 00:09:42,250
so what we have I want to do is for VMA

00:09:37,269 --> 00:09:48,699
this is the strange red core give it 4

00:09:42,250 --> 00:09:51,910
Q's we want to use the adapters that

00:09:48,699 --> 00:09:54,519
means cards 0 and 3 for higher ability

00:09:51,910 --> 00:10:01,420
and then we want to pass through the

00:09:54,519 --> 00:10:08,500
main three let's say for gas to usage

00:10:01,420 --> 00:10:12,339
and then also domain 8 let's say because

00:10:08,500 --> 00:10:15,579
it will run a loud three guest and we

00:10:12,339 --> 00:10:21,370
want to pass through to a peak use to

00:10:15,579 --> 00:10:25,410
that - okay very simple we set the

00:10:21,370 --> 00:10:34,540
corresponding bits in the bit masks and

00:10:25,410 --> 00:10:38,199
then you get these four cues okay you

00:10:34,540 --> 00:10:43,269
have noticed that I have put two guests

00:10:38,199 --> 00:10:47,250
into one drawing and of course these

00:10:43,269 --> 00:10:50,170
guests have separate bit nuts because

00:10:47,250 --> 00:10:53,620
the business living in separate state

00:10:50,170 --> 00:10:56,089
description satellites I just made that

00:10:53,620 --> 00:10:59,209
so I can change

00:10:56,089 --> 00:11:01,759
Charice and let's say restrictions

00:10:59,209 --> 00:11:05,569
current is and it's very similar to get

00:11:01,759 --> 00:11:10,209
to so there we have the card to with the

00:11:05,569 --> 00:11:14,889
dominant time five very very simple okay

00:11:10,209 --> 00:11:23,110
let's make it a bit more complicated so

00:11:14,889 --> 00:11:29,660
now we just want to add the q35

00:11:23,110 --> 00:11:34,459
to V and B very simple we set the bit in

00:11:29,660 --> 00:11:41,629
the city prescription satellite and then

00:11:34,459 --> 00:11:44,899
we get this extra Q now it gets more

00:11:41,629 --> 00:11:50,829
complicated now let's say we also want

00:11:44,899 --> 00:11:56,809
to add this Q here so we want to add

00:11:50,829 --> 00:12:02,949
domain 8 but because of the Cartesian

00:11:56,809 --> 00:12:06,499
product we have to get this cute too and

00:12:02,949 --> 00:12:17,779
this actually conflicts with the VMB

00:12:06,499 --> 00:12:22,910
and we can't do that similarly yep you

00:12:17,779 --> 00:12:26,269
can't assign this Q and this Q to one

00:12:22,910 --> 00:12:28,639
guests because Cartesian product you

00:12:26,269 --> 00:12:32,720
just have to get all four if you if you

00:12:28,639 --> 00:12:37,910
do that okay I hope this was as

00:12:32,720 --> 00:12:39,290
effective as ugly let's know I hope we

00:12:37,910 --> 00:12:44,120
have a good understanding of how

00:12:39,290 --> 00:12:48,529
virtualization works with the Alpha and

00:12:44,120 --> 00:12:51,439
with the architecture let's look how do

00:12:48,529 --> 00:12:56,540
we put that into lineups into the

00:12:51,439 --> 00:12:58,309
software and the kernel part where to

00:12:56,540 --> 00:13:02,689
put it it's kind of no-brainer if you

00:12:58,309 --> 00:13:06,100
want to do assignment you do vfi out if

00:13:02,689 --> 00:13:09,570
you want to sign a uniform part of

00:13:06,100 --> 00:13:15,000
device you do it with efi and earth

00:13:09,570 --> 00:13:19,820
I hope you know V if I wonder the kind

00:13:15,000 --> 00:13:24,750
does not a perfect fit but mmm and

00:13:19,820 --> 00:13:27,300
another thing is usually we deal with

00:13:24,750 --> 00:13:31,860
devices that are present in the system

00:13:27,300 --> 00:13:34,590
and that's also not quite what we do

00:13:31,860 --> 00:13:36,870
with these mouths but let's carry on you

00:13:34,590 --> 00:13:42,600
remove we usually have a good match

00:13:36,870 --> 00:13:44,340
between functionality and your model all

00:13:42,600 --> 00:13:47,400
right this will be a bit different in

00:13:44,340 --> 00:13:50,100
our case because we don't really know if

00:13:47,400 --> 00:13:52,920
we pass through any cues or what are

00:13:50,100 --> 00:13:55,680
they doing or whatever person soon as

00:13:52,920 --> 00:13:58,770
it's a peak of course in the loops host

00:13:55,680 --> 00:14:02,790
we already have this all a piece top

00:13:58,770 --> 00:14:05,270
model and it's modeled quite

00:14:02,790 --> 00:14:07,740
straightforward you have the cards and

00:14:05,270 --> 00:14:10,440
then you have the cues which live in the

00:14:07,740 --> 00:14:14,010
context of the cards and then you have a

00:14:10,440 --> 00:14:16,740
so-called decrypt device which provides

00:14:14,010 --> 00:14:20,190
the functionality to the user space and

00:14:16,740 --> 00:14:22,890
it does odd balancing over the cards and

00:14:20,190 --> 00:14:25,980
such that and the problem is if you want

00:14:22,890 --> 00:14:30,480
to visualize this we realize that nature

00:14:25,980 --> 00:14:33,030
cues note cards will do if we want to go

00:14:30,480 --> 00:14:35,400
with the cues is to fine grain because

00:14:33,030 --> 00:14:39,260
you remember we can't express everything

00:14:35,400 --> 00:14:42,930
was possible with with this masks and

00:14:39,260 --> 00:14:48,900
and simply not an option to virtualize

00:14:42,930 --> 00:14:51,440
excuse and if we want to work Troy's all

00:14:48,900 --> 00:14:54,330
cards that won't work either because

00:14:51,440 --> 00:14:58,710
it's two-port grained and we couldn't

00:14:54,330 --> 00:15:00,000
get so many pass through devices as us

00:14:58,710 --> 00:15:03,450
as we want

00:15:00,000 --> 00:15:05,700
you couldn't have as many guests as we

00:15:03,450 --> 00:15:08,730
want with the partial devices so the

00:15:05,700 --> 00:15:13,290
design decision was to regard kind of

00:15:08,730 --> 00:15:18,060
the whole AP subsystem as one device

00:15:13,290 --> 00:15:20,530
that's shared in under sense between the

00:15:18,060 --> 00:15:24,620
host and the different yes

00:15:20,530 --> 00:15:28,610
okay so this is the design we came up

00:15:24,620 --> 00:15:32,450
with surprisingly we have to reify AP

00:15:28,610 --> 00:15:36,440
module that relies on the valium

00:15:32,450 --> 00:15:39,380
hopefully if I run the module and then

00:15:36,440 --> 00:15:47,300
give me a module and right when it's

00:15:39,380 --> 00:15:50,690
loaded it creates these magics that kind

00:15:47,300 --> 00:15:53,900
of virtual device and register citizen

00:15:50,690 --> 00:15:59,710
under parent and then you get your usual

00:15:53,900 --> 00:15:59,710
create attribute for this device and

00:16:00,100 --> 00:16:07,010
logically for each VM you can create

00:16:03,920 --> 00:16:09,020
this ap matrix and that devices that's

00:16:07,010 --> 00:16:14,720
done by the admin by using this

00:16:09,020 --> 00:16:19,790
attribute and that what's the masks okay

00:16:14,720 --> 00:16:24,850
then the admin gives this device here to

00:16:19,790 --> 00:16:29,780
the QM QM eventually starts and in the

00:16:24,850 --> 00:16:34,220
realize of the VF highway P device in Q

00:16:29,780 --> 00:16:38,540
mu we make an open on this device and

00:16:34,220 --> 00:16:42,940
then we have I wonder takes care about

00:16:38,540 --> 00:16:47,510
hooking up the KVM and the under device

00:16:42,940 --> 00:16:51,410
we can put our masks into the state

00:16:47,510 --> 00:16:56,120
description satellite and basically site

00:16:51,410 --> 00:17:01,750
takes care about everything so we went

00:16:56,120 --> 00:17:06,770
with VF I wonder and on one hand it's

00:17:01,750 --> 00:17:08,780
quite a nice fit because and we kind of

00:17:06,770 --> 00:17:13,250
have this shirt scenario between Austin

00:17:08,780 --> 00:17:17,360
and the gas and everything and we get a

00:17:13,250 --> 00:17:19,850
device which stands for for for the past

00:17:17,360 --> 00:17:27,310
route devices we can give to Q mu and

00:17:19,850 --> 00:17:30,700
then yeah and it takes care about this

00:17:27,310 --> 00:17:32,280
let's get a pointer to the kV instruct

00:17:30,700 --> 00:17:38,700
technicality

00:17:32,280 --> 00:17:41,460
but it's not a perfect match because via

00:17:38,700 --> 00:17:43,680
Thailand that merged in GPU

00:17:41,460 --> 00:17:46,500
virtualization context and it's quite

00:17:43,680 --> 00:17:49,190
different than what we do we deeply care

00:17:46,500 --> 00:17:51,030
about what use we pass through because

00:17:49,190 --> 00:17:55,140
there are secrets

00:17:51,030 --> 00:18:00,300
there are gives attached to the queues

00:17:55,140 --> 00:18:05,420
and for vgpu you just care to get one

00:18:00,300 --> 00:18:11,360
slice of the GPU and all are uniform so

00:18:05,420 --> 00:18:15,170
next point and in our kit it's not one

00:18:11,360 --> 00:18:20,330
size fits all we explicitly need to say

00:18:15,170 --> 00:18:20,330
which kills do we want to pass through

00:18:20,480 --> 00:18:30,480
and this available instance this is

00:18:24,240 --> 00:18:35,640
quite good for us because the concept

00:18:30,480 --> 00:18:39,560
doesn't apply at all ok you don't have

00:18:35,640 --> 00:18:39,560
trivial under device

00:18:39,620 --> 00:18:49,260
sharing of cruising is not allowed we

00:18:45,030 --> 00:18:52,710
have a can search problem that we might

00:18:49,260 --> 00:18:57,060
not allowed to share queues between host

00:18:52,710 --> 00:18:59,160
and guest even if device flickers and we

00:18:57,060 --> 00:19:01,860
should be allowed to we should be able

00:18:59,160 --> 00:19:06,030
to as part through devices that are not

00:19:01,860 --> 00:19:10,920
there in the system yet so enforcing

00:19:06,030 --> 00:19:14,850
constraints to enforce these constraints

00:19:10,920 --> 00:19:19,200
that the device had it belongs to host

00:19:14,850 --> 00:19:26,870
or to the gets the AP bus got something

00:19:19,200 --> 00:19:26,870
similar award like this this masks and

00:19:27,230 --> 00:19:32,850
drivers who just binds to the one type

00:19:30,210 --> 00:19:34,890
and and we Fri people just bind to the

00:19:32,850 --> 00:19:37,770
other type and on each assigned

00:19:34,890 --> 00:19:40,920
operation we checked that it's bound to

00:19:37,770 --> 00:19:42,840
the AP driver and that is not cleaned by

00:19:40,920 --> 00:19:47,250
another

00:19:42,840 --> 00:19:51,030
guests so to say okay

00:19:47,250 --> 00:19:54,960
light cycle we have the following light

00:19:51,030 --> 00:19:57,690
cycle usual and death we do create on on

00:19:54,960 --> 00:20:00,720
this part then we assign resources

00:19:57,690 --> 00:20:04,970
that's highly unusual then we include it

00:20:00,720 --> 00:20:11,450
into the VM that's kind of very usual

00:20:04,970 --> 00:20:14,430
and then on open desuka happens and the

00:20:11,450 --> 00:20:16,530
AP device becomes immutable in sense

00:20:14,430 --> 00:20:18,660
that you can't assign you can't reassign

00:20:16,530 --> 00:20:22,590
you can't remove there are some

00:20:18,660 --> 00:20:27,810
challenges here and problem is

00:20:22,590 --> 00:20:30,300
measurement so lipid is not keen on

00:20:27,810 --> 00:20:32,940
measuring the life cycle of android

00:20:30,300 --> 00:20:35,930
devices and particularly not tying it to

00:20:32,940 --> 00:20:40,700
the guest life cycle on the other hand

00:20:35,930 --> 00:20:43,740
we have 30 cents to comparisions

00:20:40,700 --> 00:20:46,350
which are perfectly valid as producing

00:20:43,740 --> 00:20:48,570
configurations but you can't start them

00:20:46,350 --> 00:20:51,660
all at the same time so here we have an

00:20:48,570 --> 00:20:56,460
example it's perfectly valid to have

00:20:51,660 --> 00:21:00,210
three such guests and not be able to

00:20:56,460 --> 00:21:04,500
start guess one and guess two because

00:21:00,210 --> 00:21:07,380
they complete on on this queue yeah so

00:21:04,500 --> 00:21:10,050
because of this creating all anderson

00:21:07,380 --> 00:21:11,880
whole system bringing up is not optimal

00:21:10,050 --> 00:21:14,250
on the other hand

00:21:11,880 --> 00:21:18,930
Burton you got the client of libvirt

00:21:14,250 --> 00:21:22,380
with taking care of this is in my

00:21:18,930 --> 00:21:24,620
opinion also not optimal so we are kind

00:21:22,380 --> 00:21:28,170
of still looking for a solution that and

00:21:24,620 --> 00:21:31,920
interim solution is for us to make the

00:21:28,170 --> 00:21:34,020
bring up own system startup easy and and

00:21:31,920 --> 00:21:35,870
then it will look what what we can do

00:21:34,020 --> 00:21:41,460
which community

00:21:35,870 --> 00:21:43,980
ok what cycle out loud what work is very

00:21:41,460 --> 00:21:49,440
easy right now it's prohibited no hot

00:21:43,980 --> 00:21:51,000
doggers yeah but this is likely to

00:21:49,440 --> 00:21:56,739
change because it's part of an

00:21:51,000 --> 00:22:00,549
architecture okay great

00:21:56,739 --> 00:22:06,100
it's safe CP regarded but it's bought so

00:22:00,549 --> 00:22:08,350
so you can't migrate and we will have to

00:22:06,100 --> 00:22:11,710
take care about this yet not yet their

00:22:08,350 --> 00:22:16,059
resources okay

00:22:11,710 --> 00:22:18,700
oh look out loud calling soon lifecycle

00:22:16,059 --> 00:22:24,100
management you'll have to do something

00:22:18,700 --> 00:22:27,009
about it and here is some future

00:22:24,100 --> 00:22:28,330
directions if you want to learn more

00:22:27,009 --> 00:22:31,989
about the south

00:22:28,330 --> 00:22:46,529
here is some future rating and we can do

00:22:31,989 --> 00:22:49,599
a Q&A so do you also have to implement

00:22:46,529 --> 00:22:52,210
different code and info for the guests

00:22:49,599 --> 00:22:55,029
or does the guest see is very similar

00:22:52,210 --> 00:22:56,889
device as the host sees there are no

00:22:55,029 --> 00:22:59,019
modifications necessary for the gate

00:22:56,889 --> 00:23:01,869
except if you want to do nest bathroom

00:22:59,019 --> 00:23:03,279
then you have to do the very same thing

00:23:01,869 --> 00:23:05,590
you have to do

00:23:03,279 --> 00:23:08,889
I wonder I mean it gets driver for the

00:23:05,590 --> 00:23:11,409
device no no modifications will get if

00:23:08,889 --> 00:23:15,389
you just use the cues everything works

00:23:11,409 --> 00:23:15,389
ok ok

00:23:22,470 --> 00:23:33,850
I'm curious about your house DNA

00:23:25,690 --> 00:23:38,490
isolation isolation yeah very easy we do

00:23:33,850 --> 00:23:42,130
it with maths so you tell these

00:23:38,490 --> 00:23:45,790
resources are dedicated to this guest

00:23:42,130 --> 00:23:49,210
yeah and the server and the hardware

00:23:45,790 --> 00:23:53,170
takes care about it so basically when

00:23:49,210 --> 00:23:56,350
you get an and q AP instruction firmer

00:23:53,170 --> 00:23:59,140
takes care of it and first thing it

00:23:56,350 --> 00:24:05,800
looks this AP human which identifies the

00:23:59,140 --> 00:24:08,910
q does it comply to the masks if it's a

00:24:05,800 --> 00:24:14,350
modified type operation you look at the

00:24:08,910 --> 00:24:19,000
e p.m. and 8:00 p.m. if it's real type

00:24:14,350 --> 00:24:21,730
operation you look at a p.m. and a un

00:24:19,000 --> 00:24:27,840
and that's it if the bit is set it's

00:24:21,730 --> 00:24:27,840
good if not set not good so

00:24:28,380 --> 00:24:39,340
corresponding support in the petition

00:24:31,360 --> 00:24:47,590
engine 3 I mean similar scene to IOM you

00:24:39,340 --> 00:24:50,500
I think what kind of support in the

00:24:47,590 --> 00:24:55,180
platform so the isolation can be done

00:24:50,500 --> 00:25:04,000
yeah but looks like the ideas for the Q

00:24:55,180 --> 00:25:09,000
can choose actual purpose yeah okay we

00:25:04,000 --> 00:25:09,000
say music yeah I'd have the Sun watching

00:25:18,440 --> 00:25:23,519
your problem I think the interesting

00:25:20,789 --> 00:25:25,649
takeaway here is we just set up the mass

00:25:23,519 --> 00:25:28,049
passed them to the side control block

00:25:25,649 --> 00:25:36,269
and then the farmer is doing all of the

00:25:28,049 --> 00:25:39,120
interesting and complicated stuff yeah

00:25:36,269 --> 00:25:43,340
and the isolation Chimel done in El Paso

00:25:39,120 --> 00:25:46,799
the hypervisor below or above KDM

00:25:43,340 --> 00:25:48,539
depending on look like and model is

00:25:46,799 --> 00:25:50,789
basically the saying that you have bit

00:25:48,539 --> 00:25:53,760
master there and KVM in firmware

00:25:50,789 --> 00:25:55,320
basically isolates that as good as it

00:25:53,760 --> 00:25:57,960
can I think probably the question goes

00:25:55,320 --> 00:26:04,740
into the direction of i/o and such stuff

00:25:57,960 --> 00:26:07,380
but we don't need that for as you know

00:26:04,740 --> 00:26:09,600
it from from Exedy six cards yeah it's

00:26:07,380 --> 00:26:11,399
really it's an instruction that is

00:26:09,600 --> 00:26:13,049
provided by firmware it's a molecular

00:26:11,399 --> 00:26:15,600
instruction and that will take care of

00:26:13,049 --> 00:26:18,559
everything so totally transparent for

00:26:15,600 --> 00:26:18,559
for the hypervisor

00:26:26,680 --> 00:26:37,250
is there a software app how ever if

00:26:33,350 --> 00:26:39,260
there yeah yeah you know that in some

00:26:37,250 --> 00:26:42,500
server there's a power tech like

00:26:39,260 --> 00:26:45,710
children to do their part yeah so this

00:26:42,500 --> 00:26:47,630
is a hundred pounder yeah kind of real

00:26:45,710 --> 00:26:51,559
partition what's the what's the career

00:26:47,630 --> 00:26:54,100
of this era can you separate separate

00:26:51,559 --> 00:26:57,800
the hardware resource for your

00:26:54,100 --> 00:27:02,840
requirement all there are some smallest

00:26:57,800 --> 00:27:06,080
green for example in substance observers

00:27:02,840 --> 00:27:10,610
the unit of the basic unit of air prior

00:27:06,080 --> 00:27:14,740
is depending on the IOH so we cannot we

00:27:10,610 --> 00:27:17,740
cannot we cannot partition the platform

00:27:14,740 --> 00:27:17,740
happened

00:27:17,929 --> 00:27:23,090
I think the partition evolved IBM's in

00:27:20,720 --> 00:27:29,000
machines is pretty flexible you do have

00:27:23,090 --> 00:27:33,800
some limits I don't want to recite you

00:27:29,000 --> 00:27:36,920
the limits you have to so basically we

00:27:33,800 --> 00:27:39,250
say okay you want this many of

00:27:36,920 --> 00:27:43,820
processors either shared or not shared

00:27:39,250 --> 00:27:46,400
you can do dedicate it no problem you

00:27:43,820 --> 00:27:54,710
say these i/o resources belong to there

00:27:46,400 --> 00:27:57,380
and this much memory in your first page

00:27:54,710 --> 00:28:05,380
there are some word what word is her

00:27:57,380 --> 00:28:05,380
assistant another word is pass through I

00:28:09,309 --> 00:28:17,030
means that what I meant to say with it

00:28:13,550 --> 00:28:19,700
is that side takes care about almost

00:28:17,030 --> 00:28:22,580
everything because if we want mere the

00:28:19,700 --> 00:28:28,130
translation we could actually intercept

00:28:22,580 --> 00:28:30,170
the instructions and then for example

00:28:28,130 --> 00:28:34,090
present the cue and there are different

00:28:30,170 --> 00:28:37,059
address that causes performance

00:28:34,090 --> 00:28:39,880
but then would make some for example

00:28:37,059 --> 00:28:41,919
immigration scenarios easier but

00:28:39,880 --> 00:28:46,059
migration is very tricky anyway because

00:28:41,919 --> 00:28:48,130
the cards do hold state under certain

00:28:46,059 --> 00:28:50,409
circumstances and it's hard to tell if

00:28:48,130 --> 00:28:53,049
they do or they do not there is no

00:28:50,409 --> 00:28:55,570
interface to get this state out of there

00:28:53,049 --> 00:28:57,070
and for example for eating keys the

00:28:55,570 --> 00:28:59,950
whole point in retain keys

00:28:57,070 --> 00:29:02,919
is that the key never leaves the

00:28:59,950 --> 00:29:07,510
hardware so it would even break the

00:29:02,919 --> 00:29:12,490
security promise and the migration is is

00:29:07,510 --> 00:29:24,570
among the things we may sometime do but

00:29:12,490 --> 00:29:24,570
it's not very likely sorry

00:29:27,779 --> 00:29:34,000
why do we use the next virtualization

00:29:30,520 --> 00:29:35,710
yes you don't have to use it if you

00:29:34,000 --> 00:29:51,190
don't like you don't do this is just

00:29:35,710 --> 00:29:53,590
something we have as a capability have a

00:29:51,190 --> 00:29:55,330
question is small I can oh so you said

00:29:53,590 --> 00:29:57,990
that labor is not really keen on you and

00:29:55,330 --> 00:30:01,059
then management cycle for four devices

00:29:57,990 --> 00:30:04,059
it's not that that much about not being

00:30:01,059 --> 00:30:07,690
keen on doing that it's just you said it

00:30:04,059 --> 00:30:09,730
yourself that the MDF I am the framework

00:30:07,690 --> 00:30:11,710
on its own wasn't enough for you I

00:30:09,730 --> 00:30:15,549
wasn't suitable you had to you know do

00:30:11,710 --> 00:30:17,830
some adjustments and and since the

00:30:15,549 --> 00:30:20,289
migration liver doesn't do any kind of

00:30:17,830 --> 00:30:23,620
device migration yet so this is a huge

00:30:20,289 --> 00:30:26,289
topic we we need to solve first because

00:30:23,620 --> 00:30:30,190
if imagine we we did some kind of

00:30:26,289 --> 00:30:32,529
management and and you guys became all

00:30:30,190 --> 00:30:34,690
the migration will happen I am pretty

00:30:32,529 --> 00:30:36,429
sure that you know we would have got

00:30:34,690 --> 00:30:37,809
that one wrong and we would have to do

00:30:36,429 --> 00:30:40,000
you know adjustments and having a

00:30:37,809 --> 00:30:43,809
library with stable API which we cannot

00:30:40,000 --> 00:30:46,670
you know there break so I tried to say

00:30:43,809 --> 00:30:49,160
for me this is an open open problem

00:30:46,670 --> 00:30:51,950
and on the one hand we need something

00:30:49,160 --> 00:30:55,160
for our customers soon and the other

00:30:51,950 --> 00:30:58,850
hand we have to figure it out how does

00:30:55,160 --> 00:31:02,360
it really work the best I'm not in

00:30:58,850 --> 00:31:06,230
little developer so in the neighboring

00:31:02,360 --> 00:31:08,720
office the review guys told me it won't

00:31:06,230 --> 00:31:10,670
work that way from my perspective it

00:31:08,720 --> 00:31:15,020
would be the most elegant way to manage

00:31:10,670 --> 00:31:17,000
this I'm not saying that it's not going

00:31:15,020 --> 00:31:19,280
to happen it's going to happen at some

00:31:17,000 --> 00:31:21,590
point it's just you know the way things

00:31:19,280 --> 00:31:25,760
will and you know we first have to push

00:31:21,590 --> 00:31:28,850
it through community and since lipid has

00:31:25,760 --> 00:31:32,000
a backwards compatibility contract which

00:31:28,850 --> 00:31:34,040
we cannot break things are moving slow

00:31:32,000 --> 00:31:36,320
hey I know you know you say the

00:31:34,040 --> 00:31:38,540
customers need it fast of course they do

00:31:36,320 --> 00:31:42,260
everything means everyone everything

00:31:38,540 --> 00:31:45,110
fast but it's just sure

00:31:42,260 --> 00:31:48,040
I had this point because we intend to

00:31:45,110 --> 00:32:03,970
push some more and this is the right

00:31:48,040 --> 00:32:07,040
forum to do okay so thank you very much

00:32:03,970 --> 00:32:12,819
[Applause]

00:32:07,040 --> 00:32:12,819

YouTube URL: https://www.youtube.com/watch?v=wBR36WD9lCY


