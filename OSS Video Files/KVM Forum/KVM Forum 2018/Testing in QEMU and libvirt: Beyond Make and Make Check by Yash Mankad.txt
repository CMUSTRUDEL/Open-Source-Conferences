Title: Testing in QEMU and libvirt: Beyond Make and Make Check by Yash Mankad
Publication date: 2018-11-17
Playlist: KVM Forum 2018
Description: 
	Automated testing in the QEMU and libvirt communities is largely focused on running unit tests on various environments using the `make check` command, but has never developed beyond that into a centralized continuous integration environment. In this session, Yash Mankad will give an overview on the initiative undertaken by the Virtualization group at Red Hat to look beyond `make check`, by leveraging Ansible and the Avocado testing framework to expand automated test coverage executing across multiple architectures, operating systems, and testing environments. Yash will also share his ideas on integrating testing initiatives already in place, like patchew and travis CI, with this common platform. This initiative will result in QEMU and libvirt developers gaining three times the platform coverage while providing a central point for continuous integration for the QEMU and libvirt projects.

---

Yash Mankad
Software Engineer - Virtualization, CI, Automation
Red Hat

Yash works in the Virtualization group at Red Hat where he is leading the efforts to implement a continuous integration environment that implements multi-architecture testing for qemu-kvm, and libvirt on RHEL, Fedora, and CentOS. Yash has previously given a talk titled "Avocado and Jenkins: test-automation and continuous integration" at DevConf 2016 in Brno, Czech Republic.
Captions: 
	00:00:01,040 --> 00:00:10,110
[Music]

00:00:06,600 --> 00:00:12,750
hello everyone thank you for coming

00:00:10,110 --> 00:00:14,519
my name is Josh Monken and today we are

00:00:12,750 --> 00:00:17,279
going to talk about testing in community

00:00:14,519 --> 00:00:19,710
board beyond making make check so before

00:00:17,279 --> 00:00:22,380
we get started a little bit about me I

00:00:19,710 --> 00:00:25,189
work in the worst ization group at Red

00:00:22,380 --> 00:00:28,050
Hat and our team is responsible for the

00:00:25,189 --> 00:00:29,849
ward CI test services so we are

00:00:28,050 --> 00:00:32,189
responsible for setting up the CI

00:00:29,849 --> 00:00:35,820
environment for the were station

00:00:32,189 --> 00:00:37,800
components used within Red Hat and for

00:00:35,820 --> 00:00:39,750
the last six months I've been looking

00:00:37,800 --> 00:00:42,420
particularly into setting the same of

00:00:39,750 --> 00:00:46,649
for upstream and this talk is basically

00:00:42,420 --> 00:00:49,500
the result of that so the agenda for the

00:00:46,649 --> 00:00:53,420
talk I'm going to try and answer four

00:00:49,500 --> 00:00:55,949
questions today what why how and where

00:00:53,420 --> 00:00:58,980
I'm going to start with what is the

00:00:55,949 --> 00:01:03,420
state of testing in qumu and live board

00:00:58,980 --> 00:01:06,299
so what is the present see a state of CI

00:01:03,420 --> 00:01:10,409
if there is any what kind of test do we

00:01:06,299 --> 00:01:12,689
run where do they run then I'm going to

00:01:10,409 --> 00:01:15,360
talk about why I think we should change

00:01:12,689 --> 00:01:18,650
what is lacking in the state so we

00:01:15,360 --> 00:01:22,670
should change then how will it work the

00:01:18,650 --> 00:01:27,869
new CI or the new implementation and

00:01:22,670 --> 00:01:29,729
where will it run the last question is

00:01:27,869 --> 00:01:32,729
more of an open question because I don't

00:01:29,729 --> 00:01:34,020
have the right answer for it but as we

00:01:32,729 --> 00:01:37,229
get to it I think things will get more

00:01:34,020 --> 00:01:40,159
interesting so let's get started so this

00:01:37,229 --> 00:01:43,350
so the current state of virtualization

00:01:40,159 --> 00:01:45,689
testing I'll start with Q is that there

00:01:43,350 --> 00:01:46,619
are tests included in the Q mu source

00:01:45,689 --> 00:01:51,299
tree

00:01:46,619 --> 00:01:53,340
they're basically unit tests the CI

00:01:51,299 --> 00:01:55,979
environments the current automated CI

00:01:53,340 --> 00:01:58,490
environments they build q mu from source

00:01:55,979 --> 00:02:00,630
using make and then they run make check

00:01:58,490 --> 00:02:03,479
in the source tree that are also

00:02:00,630 --> 00:02:06,840
subsystem tests such as i/o test quality

00:02:03,479 --> 00:02:10,050
d cg q test framework and other code

00:02:06,840 --> 00:02:12,810
analysis tests but they're not part of

00:02:10,050 --> 00:02:13,860
the CI they are run for they run by

00:02:12,810 --> 00:02:18,210
develop

00:02:13,860 --> 00:02:20,550
work on those sub sub systems for lib

00:02:18,210 --> 00:02:22,320
board the test suit is present again in

00:02:20,550 --> 00:02:25,590
the source code and a trans unit test

00:02:22,320 --> 00:02:28,650
the current CI environment it uses the

00:02:25,590 --> 00:02:31,350
auto gen asset script to build lib board

00:02:28,650 --> 00:02:35,580
and then it runs make and the CI

00:02:31,350 --> 00:02:38,790
environment runs a make check now

00:02:35,580 --> 00:02:41,640
liberties make check doesn't is not like

00:02:38,790 --> 00:02:46,700
you miss make check it checks whether

00:02:41,640 --> 00:02:49,650
the XML that was generated by lib board

00:02:46,700 --> 00:02:53,340
doesn't break him like it works with qmu

00:02:49,650 --> 00:02:56,790
that that wasn't that's what it runs now

00:02:53,340 --> 00:02:59,790
over the last few weeks my discussions

00:02:56,790 --> 00:03:02,760
with maintainer with developers and the

00:02:59,790 --> 00:03:05,220
community in general

00:03:02,760 --> 00:03:06,540
I mean I've spoken about the test and

00:03:05,220 --> 00:03:09,930
the two words that come up the most

00:03:06,540 --> 00:03:11,280
often is that why they run these tests

00:03:09,930 --> 00:03:15,300
is because they're reliable and they're

00:03:11,280 --> 00:03:16,770
sufficient we don't need the field to

00:03:15,300 --> 00:03:19,470
run more tests because you know make

00:03:16,770 --> 00:03:22,080
check is reliable if I write a patch and

00:03:19,470 --> 00:03:25,680
I run make check on my local machine and

00:03:22,080 --> 00:03:30,200
it passes I am fairly confident that it

00:03:25,680 --> 00:03:34,280
won't break the existing CI upstream a

00:03:30,200 --> 00:03:38,330
little bit more about the state of qumu

00:03:34,280 --> 00:03:40,890
testing upstream there are three CI

00:03:38,330 --> 00:03:43,440
environments and the most popular is

00:03:40,890 --> 00:03:46,860
probably patchy that runs for every

00:03:43,440 --> 00:03:51,570
patch sent to commune develop it runs a

00:03:46,860 --> 00:03:52,470
docker environment for Ubuntu mingw and

00:03:51,570 --> 00:03:55,200
sent to us

00:03:52,470 --> 00:03:59,130
it runs check patch it runs make check

00:03:55,200 --> 00:04:01,230
and this is a pre-emerge so so it runs

00:03:59,130 --> 00:04:03,299
for every patch before March

00:04:01,230 --> 00:04:05,340
the other two are Travis CI and

00:04:03,299 --> 00:04:07,560
shippable they run the following

00:04:05,340 --> 00:04:12,269
environments as you can see a one two

00:04:07,560 --> 00:04:15,269
and the Debian the MD 64 version of

00:04:12,269 --> 00:04:17,070
Debian and window both of them run make

00:04:15,269 --> 00:04:19,440
they don't run any functional tests they

00:04:17,070 --> 00:04:22,200
don't make check and they are post-merge

00:04:19,440 --> 00:04:25,050
so once a patch is once a political is

00:04:22,200 --> 00:04:26,910
most then they basically make sure that

00:04:25,050 --> 00:04:32,910
you can still build

00:04:26,910 --> 00:04:36,360
Kumu for lib board there's Travis CI and

00:04:32,910 --> 00:04:40,470
there is a separate Jenkins instance on

00:04:36,360 --> 00:04:43,950
CI dot Santos or org they are they they

00:04:40,470 --> 00:04:46,110
both run VMs the Travis one is a docker

00:04:43,950 --> 00:04:48,360
container running into a trance mix

00:04:46,110 --> 00:04:49,020
index check making solid make dist it's

00:04:48,360 --> 00:04:54,530
post-merge

00:04:49,020 --> 00:04:56,910
and the Jenkins instance has a lot more

00:04:54,530 --> 00:04:59,370
distrust that it test it has debian

00:04:56,910 --> 00:05:01,230
fedora rawhide FreeBSD and Center s

00:04:59,370 --> 00:05:01,890
trans make and make insulin it's

00:05:01,230 --> 00:05:04,410
post-merge

00:05:01,890 --> 00:05:07,230
i think peter cramp i mentioned this in

00:05:04,410 --> 00:05:10,860
his lip board status report in the

00:05:07,230 --> 00:05:13,200
morning that lip board currently lacks

00:05:10,860 --> 00:05:17,490
app or patch testing or a pre-emerge CI

00:05:13,200 --> 00:05:18,540
environment but this both of these have

00:05:17,490 --> 00:05:21,360
come up in the last year and i think

00:05:18,540 --> 00:05:23,910
they're doing a pretty good job so why

00:05:21,360 --> 00:05:24,470
should we change what what are we

00:05:23,910 --> 00:05:27,570
missing

00:05:24,470 --> 00:05:30,030
so all the environments that are that i

00:05:27,570 --> 00:05:30,780
that are running right now or that i

00:05:30,030 --> 00:05:32,700
spoke about

00:05:30,780 --> 00:05:33,900
they are all virtual environments

00:05:32,700 --> 00:05:36,480
they're either docker containers or

00:05:33,900 --> 00:05:40,170
they're they're VMs that are all running

00:05:36,480 --> 00:05:42,780
on x86 so we do not have a testing

00:05:40,170 --> 00:05:45,060
environment that runs on bare metal

00:05:42,780 --> 00:05:48,060
nodes neither do we have a testing

00:05:45,060 --> 00:05:51,960
environment that is running on arm power

00:05:48,060 --> 00:05:55,200
s 390 except for well in the narrows

00:05:51,960 --> 00:05:57,480
lava that that is running yet you see

00:05:55,200 --> 00:06:01,800
four but still no functional tests so we

00:05:57,480 --> 00:06:06,900
just run make check and we run it on a

00:06:01,800 --> 00:06:10,170
VM that is running on an x86 system the

00:06:06,900 --> 00:06:12,510
other issue is there is no integrated

00:06:10,170 --> 00:06:18,990
test framework for either Q mu or

00:06:12,510 --> 00:06:21,840
limpert the the previous talk mentioned

00:06:18,990 --> 00:06:24,120
avocado and avocado BT clever rostov

00:06:21,840 --> 00:06:26,670
mentioned avocado and our core a BT and

00:06:24,120 --> 00:06:32,180
I would like to talk a bit about this

00:06:26,670 --> 00:06:34,880
because we use we use avocado a lot

00:06:32,180 --> 00:06:37,740
internally in our CI

00:06:34,880 --> 00:06:39,919
environments it has its pros it can run

00:06:37,740 --> 00:06:41,840
on both bare metal and virtual and

00:06:39,919 --> 00:06:45,319
it has a lot of functional and

00:06:41,840 --> 00:06:46,759
regression tests but over the last

00:06:45,319 --> 00:06:49,039
couple of months I've found out that

00:06:46,759 --> 00:06:51,979
it's not the ideal solution for running

00:06:49,039 --> 00:06:55,159
in upstream because it pulls in a lot of

00:06:51,979 --> 00:06:57,919
dependencies especially avocado BT it

00:06:55,159 --> 00:07:01,189
requires packages from repos that don't

00:06:57,919 --> 00:07:03,740
come with the distro by itself

00:07:01,189 --> 00:07:08,120
avocado BT is not packaged for all the

00:07:03,740 --> 00:07:11,090
distros and if you can see the amount of

00:07:08,120 --> 00:07:13,400
test at the in the pic the test part

00:07:11,090 --> 00:07:13,879
there are more than 12,000 test for

00:07:13,400 --> 00:07:17,539
libvirt

00:07:13,879 --> 00:07:21,800
and over 3,000 test for cumin so bits

00:07:17,539 --> 00:07:24,680
run a lot of combinatorial testing for

00:07:21,800 --> 00:07:27,500
vash which is not really functional test

00:07:24,680 --> 00:07:33,529
when talking to Lebert developers I have

00:07:27,500 --> 00:07:35,060
I recently learned that combinatorial

00:07:33,529 --> 00:07:38,180
Wars testing cannot be defined as

00:07:35,060 --> 00:07:41,139
functional testing it is at best

00:07:38,180 --> 00:07:48,020
acceptance testing and that is not

00:07:41,139 --> 00:07:49,550
enough so how will it work here is where

00:07:48,020 --> 00:07:51,949
it gets really interesting I have a

00:07:49,550 --> 00:07:55,789
simple two-step process for how it will

00:07:51,949 --> 00:07:58,849
work and it's something like this step

00:07:55,789 --> 00:08:01,399
one is you draw the circles and in step

00:07:58,849 --> 00:08:03,289
two you kind of completed so today I'm

00:08:01,399 --> 00:08:06,349
going to stop today I'm going to talk

00:08:03,289 --> 00:08:09,800
about step one and then step two will be

00:08:06,349 --> 00:08:12,580
you know somewhere down the line so I'll

00:08:09,800 --> 00:08:12,580
try my best

00:08:12,639 --> 00:08:19,430
so for QM you there is already an effort

00:08:16,639 --> 00:08:22,849
underway to add functional tests as part

00:08:19,430 --> 00:08:24,379
of a part of the developer workflow if

00:08:22,849 --> 00:08:27,050
you were in if you were present in the

00:08:24,379 --> 00:08:29,599
room before my talk you you must have

00:08:27,050 --> 00:08:31,759
heard glaber's speak about this if you

00:08:29,599 --> 00:08:36,140
haven't I highly recommend clever roses

00:08:31,759 --> 00:08:41,810
talk on the current state of functional

00:08:36,140 --> 00:08:46,160
testing for 4qm you using avocado so

00:08:41,810 --> 00:08:50,120
what what the if I were to summarize it

00:08:46,160 --> 00:08:52,310
what the effort underway is basically

00:08:50,120 --> 00:08:53,720
the tests are present in the queue

00:08:52,310 --> 00:08:57,110
source tree

00:08:53,720 --> 00:09:00,290
and you the the developer has access to

00:08:57,110 --> 00:09:03,110
a predefined VM that you can launch you

00:09:00,290 --> 00:09:06,709
can add arguments and you can run qmp

00:09:03,110 --> 00:09:08,569
commands with now this will encourage

00:09:06,709 --> 00:09:13,550
developers to write more functional

00:09:08,569 --> 00:09:16,279
tests as features are being added and my

00:09:13,550 --> 00:09:19,399
suggestion or our suggestion is to run

00:09:16,279 --> 00:09:21,920
this with pachu as

00:09:19,399 --> 00:09:27,519
I think it was Connie who mentioned it

00:09:21,920 --> 00:09:30,199
in the moderator Q&A yesterday that U is

00:09:27,519 --> 00:09:31,790
respected by the maintainer and

00:09:30,199 --> 00:09:35,329
developers for the upstream qmu

00:09:31,790 --> 00:09:38,750
community and we feel that patch is the

00:09:35,329 --> 00:09:41,420
right way to get functional testing into

00:09:38,750 --> 00:09:44,930
the developer workflow by making it part

00:09:41,420 --> 00:09:49,189
of patches workflow so every cent every

00:09:44,930 --> 00:09:51,740
patch sent the Kumu double mailing list

00:09:49,189 --> 00:09:56,839
will also have the acceptance test added

00:09:51,740 --> 00:10:00,709
by the developers being run on them for

00:09:56,839 --> 00:10:01,220
Lib but it is a little more in the air

00:10:00,709 --> 00:10:04,370
right now

00:10:01,220 --> 00:10:06,050
so one of the test frames that I will I

00:10:04,370 --> 00:10:07,819
would like to talk about is Liberty CK

00:10:06,050 --> 00:10:10,790
also you see the question mark next to

00:10:07,819 --> 00:10:12,350
it because I actually added that'll last

00:10:10,790 --> 00:10:15,019
night based on feedback I've gotten over

00:10:12,350 --> 00:10:17,870
the last couple of days live with D CK

00:10:15,019 --> 00:10:20,660
is a test test food that's available in

00:10:17,870 --> 00:10:22,550
the polls is for TCK package it has

00:10:20,660 --> 00:10:27,350
functional and integration tests for

00:10:22,550 --> 00:10:30,589
labert drivers and it has a bunch of

00:10:27,350 --> 00:10:34,730
tests for domain storage network filter

00:10:30,589 --> 00:10:37,459
etc it is packaged for fedora but it is

00:10:34,730 --> 00:10:38,240
written poll and based on the feedback

00:10:37,459 --> 00:10:42,860
that I've gotten from the leeward

00:10:38,240 --> 00:10:45,230
community they don't intend to

00:10:42,860 --> 00:10:47,980
contribute to the Liberty CK tests and

00:10:45,230 --> 00:10:50,540
Paul so one of the options may be

00:10:47,980 --> 00:10:55,670
rewriting it in Python but that is a lot

00:10:50,540 --> 00:10:57,709
of effort also labert TCK has a hard

00:10:55,670 --> 00:11:01,339
requirement of lipid 4.4 so it doesn't

00:10:57,709 --> 00:11:06,079
work in fedora 28 but if you try rawhide

00:11:01,339 --> 00:11:07,190
or a b-29 beta it will it it does work

00:11:06,079 --> 00:11:09,320
it's a the

00:11:07,190 --> 00:11:16,850
packages available in the federal

00:11:09,320 --> 00:11:20,180
updates repo and I'm not sure if it's

00:11:16,850 --> 00:11:24,910
packaged for other distros but this is

00:11:20,180 --> 00:11:27,890
one of the options that I looked into

00:11:24,910 --> 00:11:31,130
another thing I would like to discuss is

00:11:27,890 --> 00:11:32,770
the possibility of avocado lip board

00:11:31,130 --> 00:11:35,960
similar to an avocado cream you wear

00:11:32,770 --> 00:11:39,170
functional tests are added into the lip

00:11:35,960 --> 00:11:41,450
word source tree and developers can add

00:11:39,170 --> 00:11:46,510
tests based on the features that they

00:11:41,450 --> 00:11:49,490
are writing does that does having more

00:11:46,510 --> 00:11:52,070
control over the kind of tests running

00:11:49,490 --> 00:11:55,280
with you know like a make check or

00:11:52,070 --> 00:12:01,910
running as part of the build process and

00:11:55,280 --> 00:12:04,070
developer workflow verily front this is

00:12:01,910 --> 00:12:07,550
more of an open-ended question right now

00:12:04,070 --> 00:12:09,470
so before I get into what I recommend I

00:12:07,550 --> 00:12:12,440
would like to talk about the effort that

00:12:09,470 --> 00:12:19,310
is already in place so I found out just

00:12:12,440 --> 00:12:24,650
today morning that both sousei and IBM

00:12:19,310 --> 00:12:28,940
had donated or well they had given they

00:12:24,650 --> 00:12:33,410
they gave gave some hardware for patch

00:12:28,940 --> 00:12:36,740
you to run its tests on so that you

00:12:33,410 --> 00:12:39,980
could not only run on the x86 systems

00:12:36,740 --> 00:12:44,210
that it has but to PPC 64 nodes and an

00:12:39,980 --> 00:12:46,550
SD 90 not but they went down for because

00:12:44,210 --> 00:12:48,080
they were out of space or there was some

00:12:46,550 --> 00:12:52,700
networking issue and then never came

00:12:48,080 --> 00:12:54,650
back up so what seems to be the problem

00:12:52,700 --> 00:12:57,050
when it comes to this question is that

00:12:54,650 --> 00:12:58,970
it's not the hardware resource that's an

00:12:57,050 --> 00:13:03,589
issue vendors and companies are willing

00:12:58,970 --> 00:13:07,310
to donate systems and give more hardware

00:13:03,589 --> 00:13:09,560
it's actually a people issue and I'll

00:13:07,310 --> 00:13:13,040
get to the bigger point in the summary

00:13:09,560 --> 00:13:17,780
slide but the issue with having a

00:13:13,040 --> 00:13:19,990
functional CI is people or the community

00:13:17,780 --> 00:13:23,560
actually having to donate their time

00:13:19,990 --> 00:13:25,600
to make it functional the continuous

00:13:23,560 --> 00:13:28,110
part of continuous integration is very

00:13:25,600 --> 00:13:31,540
important just donating systems and then

00:13:28,110 --> 00:13:33,160
having them run on its own it's it's not

00:13:31,540 --> 00:13:36,459
going to happen we need people who have

00:13:33,160 --> 00:13:38,920
to be admins for this these systems and

00:13:36,459 --> 00:13:42,459
look after their upkeep and make sure

00:13:38,920 --> 00:13:45,790
that they keep on running the tests so

00:13:42,459 --> 00:13:48,550
my suggestion and based on my experience

00:13:45,790 --> 00:13:50,950
running virtualization tests over the

00:13:48,550 --> 00:13:53,040
last year I strongly recommend running

00:13:50,950 --> 00:13:56,320
virtualization tests on bare metal

00:13:53,040 --> 00:14:01,149
systems yes necessary virtualization is

00:13:56,320 --> 00:14:06,580
supported but you will you will only be

00:14:01,149 --> 00:14:09,490
able to run really you will only be able

00:14:06,580 --> 00:14:13,330
to run integration test in in a true

00:14:09,490 --> 00:14:14,880
bare metal environment so my

00:14:13,330 --> 00:14:20,050
recommendation is the sent to a CI

00:14:14,880 --> 00:14:23,350
infrastructure they have 38 x86 64 bare

00:14:20,050 --> 00:14:26,170
metal nodes and they have 64 AR 64 and

00:14:23,350 --> 00:14:27,730
PPC 64 le virtual machines

00:14:26,170 --> 00:14:29,529
they can be requested using an

00:14:27,730 --> 00:14:33,370
open-source provisioners called

00:14:29,529 --> 00:14:35,350
duffy and they're also working on adding

00:14:33,370 --> 00:14:40,390
had 64 hardware to their current

00:14:35,350 --> 00:14:42,459
environment now this takes of the burden

00:14:40,390 --> 00:14:46,000
of some one particular person being the

00:14:42,459 --> 00:14:46,959
admin of an infrastructure because the

00:14:46,000 --> 00:14:49,380
Centaurs

00:14:46,959 --> 00:14:52,450
i think is the word sick group that's

00:14:49,380 --> 00:14:56,230
that will take take care of this like

00:14:52,450 --> 00:14:58,480
the CI cig and the word sig troop you

00:14:56,230 --> 00:15:02,260
can provision a bare metal fedora or

00:14:58,480 --> 00:15:07,029
sent OS node or you can create a Debian

00:15:02,260 --> 00:15:11,800
VM and we can run the test in this

00:15:07,029 --> 00:15:14,200
environment the second option that I

00:15:11,800 --> 00:15:19,270
want to present is getting on board with

00:15:14,200 --> 00:15:22,480
Fedora CI initiative this is part of the

00:15:19,270 --> 00:15:24,310
always ready operating system so test

00:15:22,480 --> 00:15:27,040
will be defined in a standard test

00:15:24,310 --> 00:15:29,890
interface which is basically a ml file

00:15:27,040 --> 00:15:33,250
that will be stored on the disk it tree

00:15:29,890 --> 00:15:36,580
of the package and run using ansible

00:15:33,250 --> 00:15:39,610
for every new build so whenever there is

00:15:36,580 --> 00:15:41,920
a build the test from the test or the

00:15:39,610 --> 00:15:43,740
Yamal file defining the test directory

00:15:41,920 --> 00:15:51,460
of the diskette tree will be drawn

00:15:43,740 --> 00:15:53,470
against at least an x86 system and they

00:15:51,460 --> 00:15:57,130
are planning to add multi multi

00:15:53,470 --> 00:15:58,840
architecture support but most

00:15:57,130 --> 00:16:02,680
importantly what I would like to talk

00:15:58,840 --> 00:16:05,680
about is tying the existing funk the the

00:16:02,680 --> 00:16:08,320
functional test the avocado Kumu or

00:16:05,680 --> 00:16:11,700
Liberty ck or avocado lip board or any

00:16:08,320 --> 00:16:17,760
other lip board test with the current

00:16:11,700 --> 00:16:20,740
environments what I have found out is we

00:16:17,760 --> 00:16:24,010
we need to make functional test part of

00:16:20,740 --> 00:16:27,250
the developer workflow in a way that

00:16:24,010 --> 00:16:29,500
they create a meaningful feel meaningful

00:16:27,250 --> 00:16:31,810
feedback loop for anyone who's trying to

00:16:29,500 --> 00:16:37,450
contribute patches to these communities

00:16:31,810 --> 00:16:40,000
so and it has to be simple it you you

00:16:37,450 --> 00:16:42,820
cannot expect people to set up an

00:16:40,000 --> 00:16:45,040
environment or bootstrap or add a repo

00:16:42,820 --> 00:16:47,440
or add dependencies and not in order to

00:16:45,040 --> 00:16:50,530
run tests it has to be in the source

00:16:47,440 --> 00:16:52,870
tree it has to be simple and it and it

00:16:50,530 --> 00:16:57,760
has to be meaningful to the people

00:16:52,870 --> 00:17:01,390
actually contributing code so one of the

00:16:57,760 --> 00:17:05,530
suggestions that came up from the QC I

00:17:01,390 --> 00:17:09,400
bought that was run yesterday was to

00:17:05,530 --> 00:17:14,230
actually have patchy run functional test

00:17:09,400 --> 00:17:17,050
and then be integrated with both Travis

00:17:14,230 --> 00:17:19,270
and shippable in a way that it becomes

00:17:17,050 --> 00:17:20,650
kind of like the CI dashboard like a

00:17:19,270 --> 00:17:23,079
one-stop shop where you can get

00:17:20,650 --> 00:17:26,230
information about your patch who is

00:17:23,079 --> 00:17:28,390
reputed what is the status of the test

00:17:26,230 --> 00:17:31,240
and whether it has broken the Travis CI

00:17:28,390 --> 00:17:33,190
or well not broken but whether the

00:17:31,240 --> 00:17:35,830
Travis CI or the shippable whose bills

00:17:33,190 --> 00:17:38,920
have passed and we actually already

00:17:35,830 --> 00:17:44,080
spoke to fam and it is possible to do

00:17:38,920 --> 00:17:45,770
this so this makes a lot of sense for us

00:17:44,080 --> 00:17:48,830
to do is to

00:17:45,770 --> 00:17:53,130
that should be that centralized CI

00:17:48,830 --> 00:17:59,400
environment where developers can have a

00:17:53,130 --> 00:18:01,500
overview of their patch reviewed where

00:17:59,400 --> 00:18:05,330
there is review of whether it is being

00:18:01,500 --> 00:18:08,900
test or whether it broke the build

00:18:05,330 --> 00:18:11,930
maintainer x' can also use patch you to

00:18:08,900 --> 00:18:14,340
run their own scripts so we know that

00:18:11,930 --> 00:18:16,350
Peter and Paolo have a set of scripts

00:18:14,340 --> 00:18:18,450
that they run before every pull request

00:18:16,350 --> 00:18:20,700
it would make sense for patchy to let

00:18:18,450 --> 00:18:24,450
them run their scripts as part of this

00:18:20,700 --> 00:18:31,160
workflow so that's one of the

00:18:24,450 --> 00:18:34,680
suggestions that I had so to summarise

00:18:31,160 --> 00:18:37,530
currently qumu and liberal CI they run a

00:18:34,680 --> 00:18:41,190
lot of make and make check which are

00:18:37,530 --> 00:18:43,380
basically unit and acceptance tests my

00:18:41,190 --> 00:18:46,770
recommendation is to start adding more

00:18:43,380 --> 00:18:50,370
functional tests for Kumu and Laborde

00:18:46,770 --> 00:18:53,850
the emphasis on adding and not on

00:18:50,370 --> 00:18:55,680
running because we need to add them into

00:18:53,850 --> 00:18:59,130
the source tree so that we can make it

00:18:55,680 --> 00:19:02,340
easier to run them when I when I

00:18:59,130 --> 00:19:04,950
actually submitted the submitted the

00:19:02,340 --> 00:19:06,780
abstract for this talk the name of the

00:19:04,950 --> 00:19:08,970
talk was beyond makin make check because

00:19:06,780 --> 00:19:11,070
I wanted to look what else is out there

00:19:08,970 --> 00:19:13,560
what are the options can I draw on

00:19:11,070 --> 00:19:15,900
something apart from making make check

00:19:13,560 --> 00:19:21,540
that will let me run functional tests as

00:19:15,900 --> 00:19:23,670
part of for Kumu and labert but as I've

00:19:21,540 --> 00:19:26,730
been learning over the last couple of

00:19:23,670 --> 00:19:29,130
weeks that wouldn't be a solution the

00:19:26,730 --> 00:19:30,900
solution would be to integrate

00:19:29,130 --> 00:19:33,750
functional tests into make and make

00:19:30,900 --> 00:19:35,940
check or make check so that they are so

00:19:33,750 --> 00:19:42,270
they're part of the developer workflow

00:19:35,940 --> 00:19:44,280
and yeah so basically let's start let's

00:19:42,270 --> 00:19:46,290
start adding more tests let's start

00:19:44,280 --> 00:19:48,360
contributing to the avocado QE project

00:19:46,290 --> 00:19:51,300
let's discuss the possibility of avocado

00:19:48,360 --> 00:19:53,010
lipid project so that we have functional

00:19:51,300 --> 00:19:55,620
tests as part of the workflow and then

00:19:53,010 --> 00:19:58,290
we can work towards a functional CI for

00:19:55,620 --> 00:20:11,320
virtualization packages

00:19:58,290 --> 00:20:14,110
thank you questions so for my experience

00:20:11,320 --> 00:20:16,840
with functional tests the best way to

00:20:14,110 --> 00:20:20,640
get them is to do when you're working on

00:20:16,840 --> 00:20:20,640
a bug you have like an image which

00:20:24,120 --> 00:20:28,840
representation of testament in my

00:20:25,780 --> 00:20:30,970
opinion is just a bunch of bugs that you

00:20:28,840 --> 00:20:36,030
fixed and images that helped you

00:20:30,970 --> 00:20:40,450
reproduce right there setup is there

00:20:36,030 --> 00:20:46,570
like an easy way to upload your image or

00:20:40,450 --> 00:20:49,390
something like that so this flow should

00:20:46,570 --> 00:20:52,570
be very easy right should be made very

00:20:49,390 --> 00:20:55,390
easy like uploading your image yes

00:20:52,570 --> 00:21:01,240
creating your setup and this is the fact

00:20:55,390 --> 00:21:04,660
you in effect the function of tests is

00:21:01,240 --> 00:21:08,950
there a way to do it right now or what

00:21:04,660 --> 00:21:15,910
do you think is missing for us too to be

00:21:08,950 --> 00:21:20,700
able to do it I think clever so I'll

00:21:15,910 --> 00:21:24,370
just try to so we have a similar request

00:21:20,700 --> 00:21:28,590
before and we host avocado project or we

00:21:24,370 --> 00:21:30,850
have a reasonable amount of space and

00:21:28,590 --> 00:21:32,910
eventually what we would like to do is

00:21:30,850 --> 00:21:36,390
set it up as like people could ship

00:21:32,910 --> 00:21:38,770
could post upload their images and

00:21:36,390 --> 00:21:41,440
reference damages test in the same way

00:21:38,770 --> 00:21:44,860
that we were using the cloud images so

00:21:41,440 --> 00:21:47,260
we haven't done that before yet because

00:21:44,860 --> 00:21:50,200
there really hasn't been anyone pushing

00:21:47,260 --> 00:21:58,390
it but we we're like we'd like to make

00:21:50,200 --> 00:22:02,200
that available something so for smaller

00:21:58,390 --> 00:22:05,440
images we do have some kind of disk

00:22:02,200 --> 00:22:08,230
images that are compressible and they

00:22:05,440 --> 00:22:10,330
are directly committed into the testing

00:22:08,230 --> 00:22:14,890
directory for example we have

00:22:10,330 --> 00:22:18,669
I own tests that yeah only headers and a

00:22:14,890 --> 00:22:21,190
little data and we also have this VM

00:22:18,669 --> 00:22:24,220
based test with that support a est

00:22:21,190 --> 00:22:28,269
imager is true as a host for queuing you

00:22:24,220 --> 00:22:30,669
so this test before we don't have a good

00:22:28,269 --> 00:22:33,960
way to install them some somewhere so

00:22:30,669 --> 00:22:36,250
Mike turns was true just not upload to

00:22:33,960 --> 00:22:39,789
somewhere that everybody can't download

00:22:36,250 --> 00:22:42,580
and then commit to the URI I truly enjoy

00:22:39,789 --> 00:22:44,500
a test called it can somehow wrong but

00:22:42,580 --> 00:22:54,100
in the future maybe yes we may have

00:22:44,500 --> 00:22:57,250
something better to store images so I'm

00:22:54,100 --> 00:23:00,340
gonna keep talking about images so be

00:22:57,250 --> 00:23:04,179
able to download it be able to download

00:23:00,340 --> 00:23:05,769
images for distros is great and but one

00:23:04,179 --> 00:23:07,539
of the problems we have with chromium is

00:23:05,769 --> 00:23:09,850
the range of architectures that we need

00:23:07,539 --> 00:23:11,320
to support so it's great for all the

00:23:09,850 --> 00:23:13,299
mainline architectures that are

00:23:11,320 --> 00:23:15,250
supported by a fedora and Debian

00:23:13,299 --> 00:23:16,750
whatever and you can be fairly confident

00:23:15,250 --> 00:23:18,970
when you download a curtain from them

00:23:16,750 --> 00:23:20,830
that your GP I'll comply but you can get

00:23:18,970 --> 00:23:23,049
the source code for it but then we've

00:23:20,830 --> 00:23:24,850
got all these other architectures that

00:23:23,049 --> 00:23:26,409
we'd like to be able to have test images

00:23:24,850 --> 00:23:28,750
for and we've I think there's some

00:23:26,409 --> 00:23:30,610
linked on the wiki page but really we

00:23:28,750 --> 00:23:33,700
have no idea of where they were built

00:23:30,610 --> 00:23:35,409
from what the source code that I have

00:23:33,700 --> 00:23:37,090
built from and we're sort of hesitant

00:23:35,409 --> 00:23:39,610
just to have a place where you can dump

00:23:37,090 --> 00:23:42,549
random images that you don't really know

00:23:39,610 --> 00:23:44,350
what where they came from so what we're

00:23:42,549 --> 00:23:47,320
trying to work towards as a solution

00:23:44,350 --> 00:23:49,149
where we've got a verified way of

00:23:47,320 --> 00:23:51,549
building an image that you can use to

00:23:49,149 --> 00:23:53,230
test and then anyone can regenerate it

00:23:51,549 --> 00:23:56,789
and be confident that you've got

00:23:53,230 --> 00:23:56,789
something that's not just some random

00:24:03,700 --> 00:24:10,690
so first one clarification for the liver

00:24:07,660 --> 00:24:12,700
CIA the stuff that runs on Travis CI and

00:24:10,690 --> 00:24:15,810
the stuff they run on DeSanto CI it's

00:24:12,700 --> 00:24:18,640
identical like the only reason it's not

00:24:15,810 --> 00:24:22,270
exactly identical in range is because

00:24:18,640 --> 00:24:24,880
there is a limit to five jobs on Travis

00:24:22,270 --> 00:24:26,830
so we don't have the same range but we

00:24:24,880 --> 00:24:32,020
try to basically cover all of the same

00:24:26,830 --> 00:24:35,410
scenarios okay kind of the other thing

00:24:32,020 --> 00:24:37,090
that I wanted to say is that if I would

00:24:35,410 --> 00:24:39,190
love to have more testing or more

00:24:37,090 --> 00:24:40,660
architectures and and run some

00:24:39,190 --> 00:24:44,320
functional tests

00:24:40,660 --> 00:24:47,770
the problem is mostly that if for

00:24:44,320 --> 00:24:49,930
example in the CI CentOS environment as

00:24:47,770 --> 00:24:53,880
you were saying we only have access to P

00:24:49,930 --> 00:24:57,640
be 64 VMs so how are we supposed to run

00:24:53,880 --> 00:25:00,520
function functional tests on a range of

00:24:57,640 --> 00:25:02,620
different on that architecture on a

00:25:00,520 --> 00:25:04,630
range of distres when that involves

00:25:02,620 --> 00:25:07,840
spawning guests on top of it it becomes

00:25:04,630 --> 00:25:11,650
like super slow because then you end up

00:25:07,840 --> 00:25:13,000
doing using TCG yeah so so that that's

00:25:11,650 --> 00:25:15,310
my main problem with that because

00:25:13,000 --> 00:25:17,680
otherwise I'm totally bored with having

00:25:15,310 --> 00:25:18,300
more architectures more distress the

00:25:17,680 --> 00:25:20,950
more the better

00:25:18,300 --> 00:25:23,740
yeah so this was brought up in the buff

00:25:20,950 --> 00:25:27,250
yesterday is that where do we start how

00:25:23,740 --> 00:25:29,260
do we run on architectures that for

00:25:27,250 --> 00:25:35,140
which bare metal systems are not widely

00:25:29,260 --> 00:25:37,120
available and it comes down to vendors

00:25:35,140 --> 00:25:41,350
or companies who are willing to donate

00:25:37,120 --> 00:25:43,420
hardware towards a CI effort so Red Hat

00:25:41,350 --> 00:25:46,020
is willing to start with you know having

00:25:43,420 --> 00:25:49,000
one third were dedicated to CI

00:25:46,020 --> 00:25:51,100
for example let's run this upstream qmu

00:25:49,000 --> 00:25:56,020
test and our upstream global test and

00:25:51,100 --> 00:26:00,100
then if Leonora wants to donate and here

00:25:56,020 --> 00:26:04,360
are 64 system we can add it to the CI

00:26:00,100 --> 00:26:06,790
pool it can be in their in their data

00:26:04,360 --> 00:26:10,570
center just running upstream test but

00:26:06,790 --> 00:26:13,900
what we want is basically the same set

00:26:10,570 --> 00:26:16,980
of tests that every that the community

00:26:13,900 --> 00:26:19,080
accepts so something like

00:26:16,980 --> 00:26:20,160
PCK I know that's not ideal but

00:26:19,080 --> 00:26:21,270
something like Liberty's you got

00:26:20,160 --> 00:26:23,990
something like our got to come you

00:26:21,270 --> 00:26:26,429
running on all architectures so if your

00:26:23,990 --> 00:26:28,710
company or if you want a particular

00:26:26,429 --> 00:26:30,330
architecture supported then you should

00:26:28,710 --> 00:26:32,220
we need to put up the hardware for it

00:26:30,330 --> 00:26:32,640
and again as I said hardware is not the

00:26:32,220 --> 00:26:35,370
issue

00:26:32,640 --> 00:26:39,809
there were PP c64 systems donated but

00:26:35,370 --> 00:26:41,700
then there was only issue that's true

00:26:39,809 --> 00:26:44,760
how dress is not the only issue

00:26:41,700 --> 00:26:46,799
but the primary issue seems to be time

00:26:44,760 --> 00:26:56,549
and people no one is willing to donate

00:26:46,799 --> 00:26:59,370
people for a dedicated CI job email me

00:26:56,549 --> 00:27:03,650
and continue the discussion on community

00:26:59,370 --> 00:27:06,360
well or loo liberalist thank you

00:27:03,650 --> 00:27:12,150
[Applause]

00:27:06,360 --> 00:27:12,150

YouTube URL: https://www.youtube.com/watch?v=BnbPLakHZeM


