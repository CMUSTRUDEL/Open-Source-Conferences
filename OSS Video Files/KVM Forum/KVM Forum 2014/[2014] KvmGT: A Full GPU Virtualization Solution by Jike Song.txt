Title: [2014] KvmGT: A Full GPU Virtualization Solution by Jike Song
Publication date: 2014-10-29
Playlist: KVM Forum 2014
Description: 
	GPU virtualization is an enabling technology in emerging virtualization scenarios. Unfortunately, existing GPU virtualization approaches are still suboptimal in performance and full feature support. iGVT-g is a product level GPU virtualization implementation with: 1) full GPU virtualization running native graphics driver in guest, and 2) mediated pass-through that achieves both good performance and scalability, and also secure isolation among guests. In this session we will present our work to enable iGVT-g in KVM. With this work, multiple KVM guests could all run 3D workloads with close-to-native performance. It's observed that there will be remarkable improvement of graphics performance for KVM Guest.

Jike Song
Intel Corporation

Jike is working for Intel Corporation, focused on Graphics Virtualization - a full GPU virtualization solution Mediated Pass-Through. Previously this project was called XenGT, with only Xen hypervisor supported. Now it has a new name iGVT-g, and a KVM prototype, which will be referred as KvmGT, is fundamentally working.

Slides: http://events.linuxfoundation.org/sites/events/files/slides/KVMGT-a%20Full%20GPU%20Virtualization%20Solution_1.pdf
Captions: 
	00:00:00,000 --> 00:00:12,210
Oh Joey start one minute okay okay good

00:00:09,030 --> 00:00:16,020
afternoon everyone my name is Jeff son

00:00:12,210 --> 00:00:19,460
i'm working for intel corporation the

00:00:16,020 --> 00:00:24,119
open source technology center gpio

00:00:19,460 --> 00:00:29,400
virtualization projects in zip topic I'm

00:00:24,119 --> 00:00:36,510
like to present the QM GT project full

00:00:29,400 --> 00:00:41,100
review which logicians ruching 4qn this

00:00:36,510 --> 00:00:45,120
is the agenda first I will introduce the

00:00:41,100 --> 00:00:49,500
background of GP utilization and a be

00:00:45,120 --> 00:00:53,329
visiting approaches they let's have a

00:00:49,500 --> 00:00:56,520
in-depth look at the Q MGT internos

00:00:53,329 --> 00:01:01,890
including the architecture overview and

00:00:56,520 --> 00:01:05,450
key changes after that we are summarized

00:01:01,890 --> 00:01:09,570
the current status of this project

00:01:05,450 --> 00:01:15,810
including the implementation status to

00:01:09,570 --> 00:01:19,710
polymers data and since stillness to do

00:01:15,810 --> 00:01:24,299
there will also be with your demo after

00:01:19,710 --> 00:01:30,630
this presentation as well as a q-and-a

00:01:24,299 --> 00:01:35,250
session let's go today well and the more

00:01:30,630 --> 00:01:39,570
tasks require GPU acceleration for

00:01:35,250 --> 00:01:44,789
example gaming video playback web

00:01:39,570 --> 00:01:47,759
experience and so on meanwhile the

00:01:44,789 --> 00:01:52,950
virtualization is more and more

00:01:47,759 --> 00:01:58,409
important so here is the question how to

00:01:52,950 --> 00:02:02,599
GPO accelerate a task running inside a

00:01:58,409 --> 00:02:05,899
working machine that's the cheap

00:02:02,599 --> 00:02:09,690
utilization it already becomes a

00:02:05,899 --> 00:02:14,480
fundamental requirement so what's the

00:02:09,690 --> 00:02:18,180
key requirements of gville addition

00:02:14,480 --> 00:02:23,130
there are three the first one

00:02:18,180 --> 00:02:28,709
performance direct GPU acceleration for

00:02:23,130 --> 00:02:32,870
we have the second one community for GPU

00:02:28,709 --> 00:02:37,680
features for we have to serve and

00:02:32,870 --> 00:02:44,519
sharing can your physical GPU shared

00:02:37,680 --> 00:02:50,069
among multiple which emotions let's have

00:02:44,519 --> 00:02:55,350
a look at the possible approaches the

00:02:50,069 --> 00:02:58,790
first approach is API forwarding in this

00:02:55,350 --> 00:03:03,359
approach there is a front and the driver

00:02:58,790 --> 00:03:06,620
running inside the voting machine and

00:03:03,359 --> 00:03:10,989
back in the dryer running

00:03:06,620 --> 00:03:18,319
inside the host the front enjoy our

00:03:10,989 --> 00:03:21,620
forwards every direct x of opengl api

00:03:18,319 --> 00:03:26,599
function car to the back in the dryer

00:03:21,620 --> 00:03:33,079
work so the GPU acceleration is

00:03:26,599 --> 00:03:37,250
available by this approach good 3d

00:03:33,079 --> 00:03:42,819
performance and the sharing capability

00:03:37,250 --> 00:03:48,920
can be achieved however there is no

00:03:42,819 --> 00:03:54,409
media of gpgpu support and it modifies

00:03:48,920 --> 00:04:02,560
too much in the guest graphics tab that

00:03:54,409 --> 00:04:07,579
means is complex the second approach is

00:04:02,560 --> 00:04:10,940
direct pass rule in this approach the

00:04:07,579 --> 00:04:15,139
physical GPO is passed through to a

00:04:10,940 --> 00:04:21,880
particular we have this we end on the

00:04:15,139 --> 00:04:25,700
GPU exclusively by this approach based

00:04:21,880 --> 00:04:29,900
performance and for GPU features are

00:04:25,700 --> 00:04:34,160
available however there is no sharing

00:04:29,900 --> 00:04:39,800
since the GPU is owned by one single we

00:04:34,160 --> 00:04:44,419
end right and also have a look at the

00:04:39,800 --> 00:04:47,330
third approach Fuji utilization this is

00:04:44,419 --> 00:04:54,550
the water we are talking about in this

00:04:47,330 --> 00:04:54,550
topic as you will see in this approach

00:04:55,760 --> 00:05:04,840
we can achieve a good balance of

00:04:59,810 --> 00:05:11,860
performance capability at sharing we'll

00:05:04,840 --> 00:05:15,680
check out it better intel has

00:05:11,860 --> 00:05:21,830
technologies corresponding to the three

00:05:15,680 --> 00:05:26,870
approaches mentioned above Zea cbs4 API

00:05:21,830 --> 00:05:35,510
forwarding GTD for direct pass through

00:05:26,870 --> 00:05:41,300
and GTG for for cpu utilization from now

00:05:35,510 --> 00:05:45,950
on we are focused on TWiki chip inhale

00:05:41,300 --> 00:05:50,000
getg as a 4g virtualization solution is

00:05:45,950 --> 00:05:52,880
supposed to run the niche of graphics

00:05:50,000 --> 00:05:58,310
driver in which you machine which means

00:05:52,880 --> 00:06:03,590
for feature which EP 04 we have and it

00:05:58,310 --> 00:06:06,800
also can achieve good performance and

00:06:03,590 --> 00:06:11,480
the sharing capability by a measure

00:06:06,800 --> 00:06:15,560
called MPG each year pass role was

00:06:11,480 --> 00:06:19,430
MPG basically the performance critical

00:06:15,560 --> 00:06:23,300
operations are fastest route to vm y ou

00:06:19,430 --> 00:06:30,640
the privilege operations are cheap and

00:06:23,300 --> 00:06:33,610
emulate you also have a look at the q mg

00:06:30,640 --> 00:06:38,060
t.q.m GG is the open source

00:06:33,610 --> 00:06:43,400
implementation of Intel getg 4ql of

00:06:38,060 --> 00:06:48,620
course and the wii wii GG device model

00:06:43,400 --> 00:06:53,550
is actually we am agnostic it doesn't

00:06:48,620 --> 00:06:57,330
depend on any particular wiser

00:06:53,550 --> 00:07:04,140
surely and licensed under the GPL and

00:06:57,330 --> 00:07:08,850
MIT okay let's have a look and the QM

00:07:04,140 --> 00:07:13,380
GTA architecture this picture in this

00:07:08,850 --> 00:07:17,550
picture as you may notice the that there

00:07:13,380 --> 00:07:22,710
are sore changes by the this project

00:07:17,550 --> 00:07:27,560
they are the I'm he Services Inc um the

00:07:22,710 --> 00:07:33,030
witchetty device model the n95 driver

00:07:27,560 --> 00:07:37,140
the changes in canoe and adjusts base

00:07:33,030 --> 00:07:43,140
balloony required by both the host and

00:07:37,140 --> 00:07:47,340
the best drivers please also pay

00:07:43,140 --> 00:07:52,980
attention to the red arrows this means

00:07:47,340 --> 00:07:57,960
direct access for we have this means

00:07:52,980 --> 00:08:03,090
pass through for host linux this means

00:07:57,960 --> 00:08:07,160
direct access and the blue arrows means

00:08:03,090 --> 00:08:11,190
mediation for OEM that means check and

00:08:07,160 --> 00:08:17,280
emily chief for example what we are

00:08:11,190 --> 00:08:21,410
helping if we have one with a FML

00:08:17,280 --> 00:08:26,480
register first it will be checked by the

00:08:21,410 --> 00:08:30,990
mpg services in the qm aha wiser then

00:08:26,480 --> 00:08:35,570
forwarded to the Ouija key US model

00:08:30,990 --> 00:08:39,810
which you will return our value by

00:08:35,570 --> 00:08:46,590
reading the hardware or changing a

00:08:39,810 --> 00:08:48,279
virtualized 120 anyway return a value to

00:08:46,590 --> 00:08:52,689
the mpg services and

00:08:48,279 --> 00:08:57,040
then this value returned to vmware such

00:08:52,689 --> 00:09:01,990
a basic flow of checking and evolution

00:08:57,040 --> 00:09:07,809
in this picture the wii GG device model

00:09:01,990 --> 00:09:12,850
serves as the centralized GPU resource

00:09:07,809 --> 00:09:18,370
manager all other components need to

00:09:12,850 --> 00:09:24,579
interact with we GT ok we are check out

00:09:18,370 --> 00:09:29,379
these changes one by one so first we're

00:09:24,579 --> 00:09:34,509
and he services this is mostly down in

00:09:29,379 --> 00:09:38,379
the QM maha provider the poppers is

00:09:34,509 --> 00:09:44,009
simple to pass through something to

00:09:38,379 --> 00:09:49,360
check at the emulator something next

00:09:44,009 --> 00:09:54,459
witchetty to ass model which gigi is now

00:09:49,360 --> 00:09:58,899
an add-on feature of the host an hour

00:09:54,459 --> 00:10:03,059
five driver it maintains when we chip

00:09:58,899 --> 00:10:07,860
you instance for each weekend and it

00:10:03,059 --> 00:10:10,860
schedules the witch view in a timeshare

00:10:07,860 --> 00:10:10,860
manner

00:10:12,650 --> 00:10:23,400
there are also changes in Camille first

00:10:18,740 --> 00:10:28,140
commun needs to present of which view in

00:10:23,400 --> 00:10:32,850
the virtual pc hierarchy for the wii em

00:10:28,140 --> 00:10:42,630
in particular for intel gvo you need to

00:10:32,850 --> 00:10:48,630
reserve the spatial p CIB DF c bus bus

00:10:42,630 --> 00:10:54,030
to sorry can remember that and the

00:10:48,630 --> 00:10:57,900
second human needs to request with GPU

00:10:54,030 --> 00:11:04,830
instance creation and destroy for rehab

00:10:57,900 --> 00:11:07,910
of course request this from the widget

00:11:04,830 --> 00:11:07,910
e-class model

00:11:09,750 --> 00:11:19,730
also the host ni without a word was

00:11:14,820 --> 00:11:24,030
changed why this is Nydia basically

00:11:19,730 --> 00:11:28,620
because the host I know when 5j were is

00:11:24,030 --> 00:11:33,120
now not allowed to occupy the whole

00:11:28,620 --> 00:11:36,920
physical GPO is that the view is now

00:11:33,120 --> 00:11:41,370
under centralized management by

00:11:36,920 --> 00:11:44,630
witchetty which he shares the GPO

00:11:41,370 --> 00:11:49,470
between the host among the host and

00:11:44,630 --> 00:11:55,820
voting machines this changes in

00:11:49,470 --> 00:12:02,220
particular includes redirect the arrow

00:11:55,820 --> 00:12:06,180
interfaces to widget II and the hardware

00:12:02,220 --> 00:12:09,990
in terms of graphics card is also

00:12:06,180 --> 00:12:18,050
handled by witchetty instead of health

00:12:09,990 --> 00:12:22,320
and I Wi-Fi address space balloony as we

00:12:18,050 --> 00:12:26,900
already know this is required by both

00:12:22,320 --> 00:12:26,900
the host and the guest driver

00:12:29,139 --> 00:12:39,600
why this is Neela as you mean no wife is

00:12:35,410 --> 00:12:46,089
memory access as performance critical

00:12:39,600 --> 00:12:50,739
must be passed through in kill MGT this

00:12:46,089 --> 00:12:55,779
is achieved by partitioning the graphics

00:12:50,739 --> 00:13:00,549
memory address space that means he will

00:12:55,779 --> 00:13:04,720
mgg wheels please splits the brightest

00:13:00,549 --> 00:13:10,619
memories based in two portions allocate

00:13:04,720 --> 00:13:19,480
when pushing for a particular we have

00:13:10,619 --> 00:13:24,009
however the vm can see all physical what

00:13:19,480 --> 00:13:29,309
is memory are just space so the

00:13:24,009 --> 00:13:33,489
transition between guest graphics memory

00:13:29,309 --> 00:13:38,350
address and host graphics memory address

00:13:33,489 --> 00:13:44,799
is not needed since they are simply the

00:13:38,350 --> 00:13:48,809
scene however only one portion of this

00:13:44,799 --> 00:13:53,679
address space is available though we end

00:13:48,809 --> 00:13:58,029
note that knows that during is usually

00:13:53,679 --> 00:14:02,639
addition the GPU driver gets such

00:13:58,029 --> 00:14:06,600
information and mark other portions as

00:14:02,639 --> 00:14:06,600
not available

00:14:07,699 --> 00:14:23,199
by this oh but this approach this is not

00:14:15,679 --> 00:14:28,149
necessary to chess lead brass ajs so

00:14:23,199 --> 00:14:34,309
good performance have achieved and

00:14:28,149 --> 00:14:39,429
what's more he will mgg we are will

00:14:34,309 --> 00:14:46,660
ensure the security by catching any

00:14:39,429 --> 00:14:46,660
adjust based violation from malicious vm

00:14:48,069 --> 00:14:51,730
so

00:14:50,050 --> 00:14:57,430
just to make sure I understand this

00:14:51,730 --> 00:15:01,120
correctly Adam do you use the I oh no

00:14:57,430 --> 00:15:05,890
okay so you basically use the GPUs own

00:15:01,120 --> 00:15:14,260
address translation for the virtual

00:15:05,890 --> 00:15:18,420
memory of the gas exactly so let's have

00:15:14,260 --> 00:15:23,339
a look and the implementation status

00:15:18,420 --> 00:15:27,930
first of all basic features are complete

00:15:23,339 --> 00:15:32,880
linux guest works steadily with PP g dt

00:15:27,930 --> 00:15:37,740
disabled PVD stands for process graphics

00:15:32,880 --> 00:15:41,230
translation table and currently 82 MGT

00:15:37,740 --> 00:15:43,089
supports intel processor graphics built

00:15:41,230 --> 00:15:46,029
into first generation your core

00:15:43,089 --> 00:15:50,140
processor well for with guys that means

00:15:46,029 --> 00:15:56,500
the husband microarchitecture and let's

00:15:50,140 --> 00:16:02,910
just skip the details have a look at the

00:15:56,500 --> 00:16:09,339
performance data we ran for 3d

00:16:02,910 --> 00:16:15,209
benchmarks in k omgg test running linux

00:16:09,339 --> 00:16:20,290
applies of course three of this get

00:16:15,209 --> 00:16:22,899
about nineteen percent of native

00:16:20,290 --> 00:16:29,380
performance the worst of kiss or

00:16:22,899 --> 00:16:33,110
bonterra also get more than eighty

00:16:29,380 --> 00:16:37,610
percent performance so

00:16:33,110 --> 00:16:41,570
the prof the result are pretty good

00:16:37,610 --> 00:16:43,850
right so what do you render into three

00:16:41,570 --> 00:16:47,269
render on the same screen or do you

00:16:43,850 --> 00:16:53,769
render into a shade frame buffer that

00:16:47,269 --> 00:16:53,769
you then just play on the well actually

00:16:55,450 --> 00:17:06,319
if we am including the hospital has

00:17:01,060 --> 00:17:12,020
using the render engine but only only

00:17:06,319 --> 00:17:16,480
one single for a grande OS is displayed

00:17:12,020 --> 00:17:20,480
in the monitor this is a current

00:17:16,480 --> 00:17:25,910
implementation sorry but we are planning

00:17:20,480 --> 00:17:30,760
the recorded a in director display mode

00:17:25,910 --> 00:17:35,720
we are into integrated you know the 3d

00:17:30,760 --> 00:17:42,790
display into the camille window but i'm

00:17:35,720 --> 00:17:42,790
not sure when will this be complete

00:17:43,120 --> 00:17:48,640
sorry what's the main reason that we

00:17:46,780 --> 00:17:52,080
the friends performance ratio between

00:17:48,640 --> 00:17:52,080
the 17

00:17:54,840 --> 00:18:06,570
sorry didn't know you mean that why why

00:18:00,810 --> 00:18:13,890
is he a different sorry I didn't look in

00:18:06,570 --> 00:18:16,740
the data details and so what would it be

00:18:13,890 --> 00:18:18,990
possible them to have a future perhaps

00:18:16,740 --> 00:18:21,990
had three screens connected to each

00:18:18,990 --> 00:18:27,630
other yeah yeah that's possible home

00:18:21,990 --> 00:18:33,560
soon yeah system yeah well I believe s s

00:18:27,630 --> 00:18:40,500
sugar already in the to do list yeah and

00:18:33,560 --> 00:18:44,340
sorry Leslie and is still in the

00:18:40,500 --> 00:18:49,410
prototype status that are missing

00:18:44,340 --> 00:18:53,040
features for example the shadow PPG dt

00:18:49,410 --> 00:18:57,720
which is must to support windows cast

00:18:53,040 --> 00:19:04,460
and fling up under stabilized prototype

00:18:57,720 --> 00:19:10,700
code and was the most important is

00:19:04,460 --> 00:19:15,150
published the obstacle and discuss the

00:19:10,700 --> 00:19:21,540
active trauma and streaming questions

00:19:15,150 --> 00:19:26,580
with you guys so let me summarize this

00:19:21,540 --> 00:19:29,460
topic into getg provides a good balance

00:19:26,580 --> 00:19:32,730
of performance feature and sharing

00:19:29,460 --> 00:19:35,670
capability many more will be impact on

00:19:32,730 --> 00:19:39,690
performance critical operations when

00:19:35,670 --> 00:19:41,470
they need to grasp driver in vm that

00:19:39,690 --> 00:19:48,659
means for GPU feature

00:19:41,470 --> 00:19:53,590
and multiplexing capability and Q MGK

00:19:48,659 --> 00:19:58,020
implements Intel GTG 4qn with more than

00:19:53,590 --> 00:20:03,130
eighty percent of native 3d performance

00:19:58,020 --> 00:20:07,350
car skoda is console and community

00:20:03,130 --> 00:20:22,150
contributions are highly appreciated

00:20:07,350 --> 00:20:25,059
okay let's have a look demo video this

00:20:22,150 --> 00:20:30,610
is a your bomb to linux running of heart

00:20:25,059 --> 00:20:35,200
and intel haswell cpu with to OBX both

00:20:30,610 --> 00:20:44,400
running 3d workload simultaneously this

00:20:35,200 --> 00:20:44,400
is we are one of the arena where I'm too

00:21:00,730 --> 00:21:03,540
look two year

00:21:09,600 --> 00:21:12,320
ok

00:21:13,700 --> 00:21:19,990
the configurations you said GP

00:21:17,600 --> 00:21:26,779
distributes the graphic memory and uh

00:21:19,990 --> 00:21:31,549
sorry i would like to project for my bad

00:21:26,779 --> 00:21:34,880
english skills and cannot help for from

00:21:31,549 --> 00:21:39,620
my college you know nike to my dream for

00:21:34,880 --> 00:21:43,389
help to complete the cute eh eh ok take

00:21:39,620 --> 00:21:45,860
it so Jane I what's the question

00:21:43,389 --> 00:21:48,409
intervention that even GD distributes

00:21:45,860 --> 00:21:51,529
the graphic memory and it shares the GPU

00:21:48,409 --> 00:21:53,330
in a time cycle man time genuine so this

00:21:51,529 --> 00:21:55,190
distribution of graphics memory should

00:21:53,330 --> 00:21:56,870
affect the performance what's your call

00:21:55,190 --> 00:21:59,120
on this table you were the major black

00:21:56,870 --> 00:22:02,200
you know we

00:21:59,120 --> 00:22:05,300
basically it'll graphics memory yeah

00:22:02,200 --> 00:22:09,200
partition like yeah so me memories less

00:22:05,300 --> 00:22:14,000
now so typically Honda has a soft shaped

00:22:09,200 --> 00:22:19,910
memory and usually you know even though

00:22:14,000 --> 00:22:23,510
windows are not using but half yeah yes

00:22:19,910 --> 00:22:25,630
it's okay to reduce graphics when we

00:22:23,510 --> 00:22:25,630
actually

00:22:37,830 --> 00:22:40,830
and

00:22:40,960 --> 00:22:42,960
Oh

00:22:49,210 --> 00:22:53,320
paediatricians realistic and length

00:22:55,700 --> 00:23:03,930
yeah what I'm sure is the worst memory

00:22:59,550 --> 00:23:07,770
is partition partition into sorrel

00:23:03,930 --> 00:23:13,140
portions and each we M including the

00:23:07,770 --> 00:23:15,120
hostel s use one portion of that I think

00:23:13,140 --> 00:23:17,640
the question is even you know people

00:23:15,120 --> 00:23:21,540
worried about you for you reduce in

00:23:17,640 --> 00:23:23,940
other graphics memory right then the

00:23:21,540 --> 00:23:28,770
performance of graphics like we have a

00:23:23,940 --> 00:23:32,270
3d application very credible performance

00:23:28,770 --> 00:23:37,460
regression you mean there will be a

00:23:32,270 --> 00:23:41,820
performance loss yes not that important

00:23:37,460 --> 00:23:46,020
for example what what is what's most

00:23:41,820 --> 00:23:52,080
important is a direct GPU acceleration

00:23:46,020 --> 00:23:59,370
for we have you know in this project the

00:23:52,080 --> 00:24:04,140
gpo the render aging x-rays the you know

00:23:59,370 --> 00:24:07,740
the computing tasks for we we have four

00:24:04,140 --> 00:24:13,460
we m directory without checking of

00:24:07,740 --> 00:24:13,460
ammunition or other you know chicks

00:24:14,730 --> 00:24:22,350
I'll are Christians this is the same

00:24:18,520 --> 00:24:22,350
work that described as deeper

00:24:24,220 --> 00:24:31,700
you make you work yes yes the other

00:24:27,860 --> 00:24:35,590
thing G word actually is another name of

00:24:31,700 --> 00:24:40,700
a kinkajou atg and the q mg gives the

00:24:35,590 --> 00:24:43,430
implementation for qm i see so in that

00:24:40,700 --> 00:24:46,700
paper the there's a lot of plate that is

00:24:43,430 --> 00:24:51,290
completely architecture agnostic and

00:24:46,700 --> 00:24:53,240
that whatever is still done is happen to

00:24:51,290 --> 00:24:55,160
work on himself before being present

00:24:53,240 --> 00:24:57,920
knowledge abused can you expand on that

00:24:55,160 --> 00:25:02,690
directly look into other use arms and

00:24:57,920 --> 00:25:06,470
usability news well the implementations

00:25:02,690 --> 00:25:10,730
for example the QM GT of the day in GTA

00:25:06,470 --> 00:25:14,870
project support intel graphics only

00:25:10,730 --> 00:25:17,720
under the design this inhale getg

00:25:14,870 --> 00:25:22,540
architecture can be ported to other

00:25:17,720 --> 00:25:26,180
graphics card I think not that a big

00:25:22,540 --> 00:25:28,910
problem I think the question is do we

00:25:26,180 --> 00:25:33,380
look at the other you know rockin AKI

00:25:28,910 --> 00:25:35,840
our cars not yet I can textures free

00:25:33,380 --> 00:25:40,160
hands exeter yeah architectures besides

00:25:35,840 --> 00:25:43,370
Exodus it jeje those graphics of Torahs

00:25:40,160 --> 00:25:46,040
nothing to the way the x86 yeah well

00:25:43,370 --> 00:25:48,260
memory on over

00:25:46,040 --> 00:25:51,880
nurse that's a different so I'm curious

00:25:48,260 --> 00:25:58,240
if there's this really works as good as

00:25:51,880 --> 00:26:03,200
flames I can't risk a thing but i will

00:25:58,240 --> 00:26:06,320
publish the coda song so you all you can

00:26:03,200 --> 00:26:11,690
have a try and let me know the result

00:26:06,320 --> 00:26:13,100
that they all the jeep you pass through

00:26:11,690 --> 00:26:18,800
and it's interview with this

00:26:13,100 --> 00:26:23,420
architecture in the GV busting actually

00:26:18,800 --> 00:26:28,490
the cheapest row they inhaled gpo

00:26:23,420 --> 00:26:32,960
postural for key where we don't we don't

00:26:28,490 --> 00:26:36,920
have existing you know in sheer solution

00:26:32,960 --> 00:26:42,230
i only have a prototype and fro what i

00:26:36,920 --> 00:26:45,230
owe you know build upon the legacy kisi

00:26:42,230 --> 00:26:49,400
as I and I didn't measure the

00:26:45,230 --> 00:26:52,310
performance of George pastor oh haha i

00:26:49,400 --> 00:26:54,310
think its path movies of slightly faster

00:26:52,310 --> 00:26:57,360
because

00:26:54,310 --> 00:27:00,970
in this our implementation we trap that

00:26:57,360 --> 00:27:06,010
I will access not all that some of them

00:27:00,970 --> 00:27:10,480
back so still dress assignment is faster

00:27:06,010 --> 00:27:14,680
that communities are the native passed

00:27:10,480 --> 00:27:16,960
bill uses a DTD so sometimes you see

00:27:14,680 --> 00:27:20,549
some aggression because of

00:27:16,960 --> 00:27:20,549
you know I OTA stuff

00:27:22,070 --> 00:27:27,200
you send it for mediated pass through

00:27:24,380 --> 00:27:29,270
privileged operations are entrapped fast

00:27:27,200 --> 00:27:31,790
privileged operations traffic videos are

00:27:29,270 --> 00:27:34,960
is that per car how do you know which

00:27:31,790 --> 00:27:34,960
operations and privilege

00:27:35,900 --> 00:27:44,460
car what do you play Carver hard play

00:27:39,660 --> 00:27:47,460
it's a GPU specific but you need to look

00:27:44,460 --> 00:27:50,910
at Sanford us what kind of registers you

00:27:47,460 --> 00:27:52,559
need to try muchachos okay so for the

00:27:50,910 --> 00:27:54,330
GPU that you've developed around the

00:27:52,559 --> 00:27:58,100
Amazon specified right privilege

00:27:54,330 --> 00:27:58,100
traditionalist yes

00:28:00,020 --> 00:28:18,289
okay thank you should be in bed too I've

00:28:16,980 --> 00:28:21,530
been thinking about it since was not

00:28:18,289 --> 00:28:24,000
because some of us scheduled meetings

00:28:21,530 --> 00:28:27,049
yes just for it was the father

00:28:24,000 --> 00:28:29,700
conference only wants to do it this is

00:28:27,049 --> 00:28:31,169
dusty request air every was saying

00:28:29,700 --> 00:28:33,960
actually many people last year was

00:28:31,169 --> 00:28:36,659
saying what do we do not ask a few some

00:28:33,960 --> 00:28:41,640
so give me some head in the restroom so

00:28:36,659 --> 00:28:44,059
that's so tacky this so thank you so

00:28:41,640 --> 00:28:44,059

YouTube URL: https://www.youtube.com/watch?v=-iuIu7_GuEo


