Title: [2019] ZERO: Next Generation Virtualization Platform for Huawei Cloud by Jinsong Liu & Zhichao Huang
Publication date: 2019-11-09
Playlist: KVM Forum 2019
Description: 
	Virtualization technologies build the infrastructure of cloud computing. However, with more and more VMs and workloads running on cloud, traditional virtualization technologies exposed some weakness under cloud environment, i.e., virtualization overhead, performance fluctuation, and higher cost overhead, etc. ZERO is Huawei’s next generation virtualization platform – targeted achieving 4 '0's: '0' reserved for CPU, '0' reserved for memory, ‘0’virtualization overhead, and ’0’ performance fluctuations. By designing ZERO virtualization chip, ZERO System offloads overhead to ZERO chip&card, including all network I/O, all storage I/O, and all cloud control plane. By designing split-hypervisor, ZERO leaves a very small and silent hypervisor at X86/ARM server, therefor improving overall resource utilization and performance. Currently ZERO1.0 has been launched on Huawei Cloud, supporting both VM and bare metal instances, and supports both X86 and ARM server.

---

Zhichao Huang
Huawei
Senior Software Engineer

Zhichao Huang is a senior software engineer from Huawei. He has 12 years working experience on Linux/Virtualization.

Jinsong Liu
Huawei
Captions: 
	00:00:00,390 --> 00:00:02,750
[Music]

00:00:07,400 --> 00:00:13,620
hi good morning this morning we were

00:00:11,880 --> 00:00:16,220
introduced

00:00:13,620 --> 00:00:19,500
what was their architecture their

00:00:16,220 --> 00:00:25,859
architecture is what was next generation

00:00:19,500 --> 00:00:28,230
fertilizing fertilization platform first

00:00:25,859 --> 00:00:31,500
let me introduce my enemy and my

00:00:28,230 --> 00:00:34,920
colleague to speak at this topic

00:00:31,500 --> 00:00:37,980
I'm the chief architecture of huawei

00:00:34,920 --> 00:00:41,850
fertilization and the general manager of

00:00:37,980 --> 00:00:45,090
Madrid service domain of Huawei cloud my

00:00:41,850 --> 00:00:49,260
colleague Frances how is a very senior

00:00:45,090 --> 00:00:57,210
architecture in fertilization of Huawei

00:00:49,260 --> 00:01:00,329
we were cosmic about this topic you know

00:00:57,210 --> 00:01:04,159
that fertilization is the basic

00:01:00,329 --> 00:01:08,670
fundamental of cloud computing for

00:01:04,159 --> 00:01:12,180
example many cloud certain providers for

00:01:08,670 --> 00:01:15,119
example Amazon Huawei Alibaba and many

00:01:12,180 --> 00:01:18,560
cloud provider use fertilization for

00:01:15,119 --> 00:01:22,110
example there and kayvyun for many years

00:01:18,560 --> 00:01:24,990
basically the water magician is good

00:01:22,110 --> 00:01:27,420
he's very good is good for cloud

00:01:24,990 --> 00:01:30,780
computing but as the clock computer

00:01:27,420 --> 00:01:32,700
requirement more and more the gaps

00:01:30,780 --> 00:01:35,400
between the Cardinal Vitelli is for

00:01:32,700 --> 00:01:37,530
example desire KVM between the cloud

00:01:35,400 --> 00:01:40,229
service requirement is become bigger and

00:01:37,530 --> 00:01:43,380
the bigger for example the cloud server

00:01:40,229 --> 00:01:47,070
cloud service lead considering

00:01:43,380 --> 00:01:53,130
performance cost security and stability

00:01:47,070 --> 00:01:56,100
in posted for fails we see from

00:01:53,130 --> 00:02:00,090
practical experience that the KVM and

00:01:56,100 --> 00:02:04,560
then have some caps for example the

00:02:00,090 --> 00:02:08,849
performance usually both there at kevin

00:02:04,560 --> 00:02:12,040
has some perhaps depend on what cloud

00:02:08,849 --> 00:02:16,769
type usually the gap is

00:02:12,040 --> 00:02:20,530
three percent to 50 percent or more

00:02:16,769 --> 00:02:24,909
another problem is that other current

00:02:20,530 --> 00:02:28,269
architecture the cost cloud provider is

00:02:24,909 --> 00:02:33,310
becoming higher and higher usually we

00:02:28,269 --> 00:02:36,310
spend 10 or 20 percent of our cost to

00:02:33,310 --> 00:02:38,140
serve for cloud provider itself for

00:02:36,310 --> 00:02:40,049
example for what we the while we

00:02:38,140 --> 00:02:43,989
business for example the backend

00:02:40,049 --> 00:02:44,799
back-end the workload and some agent in

00:02:43,989 --> 00:02:48,549
the server

00:02:44,799 --> 00:02:51,010
well consume 10 percent or 20 percent of

00:02:48,549 --> 00:02:53,400
the CPUs and the memories that means a

00:02:51,010 --> 00:02:57,780
lot of time a lot of money for example

00:02:53,400 --> 00:03:00,010
dozens of millions of dollars this

00:02:57,780 --> 00:03:04,420
resource cannot be sold out to the

00:03:00,010 --> 00:03:09,519
customer so the the third problem is

00:03:04,420 --> 00:03:14,019
that security you know that Cuba is a

00:03:09,519 --> 00:03:17,440
very big system and Linux is also a very

00:03:14,019 --> 00:03:21,310
big system so there's a lot of security

00:03:17,440 --> 00:03:24,220
holes at the cumulative edicts so we

00:03:21,310 --> 00:03:27,940
have to repeal again and again for this

00:03:24,220 --> 00:03:33,699
security holes and the last instance

00:03:27,940 --> 00:03:37,180
that stability usually we will reduce

00:03:33,699 --> 00:03:39,639
the fiscal CPUs by different recipes so

00:03:37,180 --> 00:03:44,139
there is a lot of labor noise and the

00:03:39,639 --> 00:03:46,480
performance is unstable that's our

00:03:44,139 --> 00:03:52,109
experience by using their and Kevin in

00:03:46,480 --> 00:03:56,319
cloud practical let's say the history of

00:03:52,109 --> 00:03:58,690
fertilization technology we we said that

00:03:56,319 --> 00:04:04,959
in a very early stage for example before

00:03:58,690 --> 00:04:06,780
2000 2003 the fertilization is a pure

00:04:04,959 --> 00:04:09,729
software fertilizer for example that

00:04:06,780 --> 00:04:12,760
when when we are used up a nurse's

00:04:09,729 --> 00:04:17,349
station and as Angus the PV posted

00:04:12,760 --> 00:04:20,010
technology are very complicated and has

00:04:17,349 --> 00:04:25,330
a lot of security issues

00:04:20,010 --> 00:04:25,940
so during start from 2004 and here to

00:04:25,330 --> 00:04:29,210
sounds

00:04:25,940 --> 00:04:33,950
in Intel and AMD is such kind of a super

00:04:29,210 --> 00:04:36,110
CCP provider provides some hardware

00:04:33,950 --> 00:04:39,290
assisted assistive technology for

00:04:36,110 --> 00:04:42,890
example the video x4 CPU may transition

00:04:39,290 --> 00:04:46,070
VTT for iover transition and the apt for

00:04:42,890 --> 00:04:48,020
member of a transition this technology

00:04:46,070 --> 00:04:49,730
some of this technology are very good

00:04:48,020 --> 00:04:53,750
for example the imputed technology is

00:04:49,730 --> 00:04:55,760
very lightweight and good enough for the

00:04:53,750 --> 00:04:59,320
performance for some technology has some

00:04:55,760 --> 00:05:03,590
issues for example the VTT has some

00:04:59,320 --> 00:05:08,150
ecosystem issues and you know that if we

00:05:03,590 --> 00:05:11,630
pass through that device to the guest we

00:05:08,150 --> 00:05:14,000
cannot easily microwave from one server

00:05:11,630 --> 00:05:17,080
to another that's not that would be a

00:05:14,000 --> 00:05:19,880
really good big problem for cloud

00:05:17,080 --> 00:05:22,970
provider because the cloud provider that

00:05:19,880 --> 00:05:29,230
need to update their infrastructure year

00:05:22,970 --> 00:05:35,510
by year so considering these issues

00:05:29,230 --> 00:05:39,080
start from the start from 2018 some

00:05:35,510 --> 00:05:42,970
cloud provider for example Amazon

00:05:39,080 --> 00:05:46,640
including Amazon Alibaba Huawei and

00:05:42,970 --> 00:05:49,610
manipular cloud providers start to

00:05:46,640 --> 00:05:56,440
develop their new utilization recorded a

00:05:49,610 --> 00:06:00,380
version 3.0 the loofah transition is

00:05:56,440 --> 00:06:01,400
usually the consistent of customized

00:06:00,380 --> 00:06:08,540
hypervisor

00:06:01,400 --> 00:06:11,800
and customer customized chips to to

00:06:08,540 --> 00:06:13,520
satisfy their requirement for example

00:06:11,800 --> 00:06:17,570
for CPUs

00:06:13,520 --> 00:06:20,860
they can design a new hypervisor a very

00:06:17,570 --> 00:06:24,700
simple and the customized hypervisor

00:06:20,860 --> 00:06:30,950
with almost a low vitalization overhead

00:06:24,700 --> 00:06:33,680
for memory we still use reuse the EPD

00:06:30,950 --> 00:06:39,530
technology because i just said that apt

00:06:33,680 --> 00:06:43,490
is good enough and for i/o many of

00:06:39,530 --> 00:06:47,150
whether the cloud vendors offloaded the

00:06:43,490 --> 00:06:49,490
aisle over had to the back end Carla we

00:06:47,150 --> 00:06:54,290
have a bid will have PC car

00:06:49,490 --> 00:06:57,260
the Odin offload that IO overhead and

00:06:54,290 --> 00:06:59,660
the resources for example the CPUs and

00:06:57,260 --> 00:07:01,610
memories that the backend the part of

00:06:59,660 --> 00:07:13,940
the fertilization should use the two

00:07:01,610 --> 00:07:16,630
card okay so for what way we designed a

00:07:13,940 --> 00:07:20,419
new architecture architecture lambda 0

00:07:16,630 --> 00:07:24,560
this is this figure is the architecture

00:07:20,419 --> 00:07:29,919
of what with zero system in the front

00:07:24,560 --> 00:07:36,250
end we support posts Intel's x86 and

00:07:29,919 --> 00:07:40,520
Huawei some server and ended at back end

00:07:36,250 --> 00:07:43,700
it consists of a several cars we can use

00:07:40,520 --> 00:07:46,450
one card or two-car or three car at the

00:07:43,700 --> 00:07:50,180
pequeña depending on your requirement

00:07:46,450 --> 00:07:52,100
for example if you if we use this system

00:07:50,180 --> 00:07:54,530
at the private for wow its private cloud

00:07:52,100 --> 00:07:57,620
we can use one card

00:07:54,530 --> 00:08:01,340
well only one card is is just easy laugh

00:07:57,620 --> 00:08:05,090
but in WoW is public cloud we can use

00:08:01,340 --> 00:08:07,580
two or three cards the interface between

00:08:05,090 --> 00:08:12,400
these two cut these cars and the server

00:08:07,580 --> 00:08:15,770
is the PCI device for example we can use

00:08:12,400 --> 00:08:20,740
Virgil let what else skocy

00:08:15,770 --> 00:08:28,430
what help lock and an nvme is all this a

00:08:20,740 --> 00:08:31,669
hal world by way with chip we have a

00:08:28,430 --> 00:08:35,510
sensor control card then with a resident

00:08:31,669 --> 00:08:39,580
controller this is the control of the

00:08:35,510 --> 00:08:42,469
whole system and we also have some

00:08:39,580 --> 00:08:44,690
auxiliary card for example the LED would

00:08:42,469 --> 00:08:48,980
accelerate card and stor storage

00:08:44,690 --> 00:08:50,150
accelerator as for the hypervisor we

00:08:48,980 --> 00:08:52,190
split the hypervisor

00:08:50,150 --> 00:08:58,160
as the front front

00:08:52,190 --> 00:09:00,890
and the backend of hypervisor oh this is

00:08:58,160 --> 00:09:05,090
the zero components 0 consists of zero

00:09:00,890 --> 00:09:09,100
hypervisor 0 veteran Kanchana or you can

00:09:05,090 --> 00:09:13,970
call 0 Cal Japan and there are aisles

00:09:09,100 --> 00:09:16,340
for zero hypervisors we have the tacky

00:09:13,970 --> 00:09:20,290
the fro 0 so that's the that's the

00:09:16,340 --> 00:09:24,860
reason why we call this project a zero

00:09:20,290 --> 00:09:27,560
currently we have realized what are two

00:09:24,860 --> 00:09:31,730
zeros in WoW is zero the first

00:09:27,560 --> 00:09:34,790
generation of zero online but in the in

00:09:31,730 --> 00:09:38,840
next year and the year after next year

00:09:34,790 --> 00:09:40,930
we still continue to do the hypervisor

00:09:38,840 --> 00:09:45,290
work the fault

00:09:40,930 --> 00:09:50,090
zero is that the first is zero resource

00:09:45,290 --> 00:09:53,330
reserved that means we reserved 0 cpu

00:09:50,090 --> 00:09:57,950
and that zero memory on the frontside

00:09:53,330 --> 00:10:01,340
server the second is the performance

00:09:57,950 --> 00:10:03,830
theater is there on the third is what

00:10:01,340 --> 00:10:07,850
recision overhead is their own you know

00:10:03,830 --> 00:10:12,050
that in cloud there's a lot of

00:10:07,850 --> 00:10:18,740
enterprise customers the very sensitive

00:10:12,050 --> 00:10:27,440
about the performance and the stability

00:10:18,740 --> 00:10:32,860
so so we we set up that the the tracking

00:10:27,440 --> 00:10:32,860
a performance they wrote for calcium and

00:10:33,010 --> 00:10:45,740
fertilization overhead is zero for that

00:10:39,980 --> 00:10:48,070
0 io we use what ways chip to accelerate

00:10:45,740 --> 00:10:51,890
the process post network and a storage

00:10:48,070 --> 00:10:58,339
currently in that work our performance

00:10:51,890 --> 00:11:05,320
is 80 million PPS at first tag and the

00:10:58,339 --> 00:11:07,300
panel is 45 chicopee's for storage

00:11:05,320 --> 00:11:10,230
performance our current preferences one

00:11:07,300 --> 00:11:16,930
meaning our PS plan plus one building

00:11:10,230 --> 00:11:19,330
100 microseconds for the controller for

00:11:16,930 --> 00:11:22,510
the Vitara signature it was also

00:11:19,330 --> 00:11:25,530
implemented implemented by what was

00:11:22,510 --> 00:11:31,050
chief we have an associative this

00:11:25,530 --> 00:11:36,780
associative has to has to has 24 um

00:11:31,050 --> 00:11:41,710
course and really fertilization related

00:11:36,780 --> 00:11:44,170
silicon's to implement fertilization

00:11:41,710 --> 00:11:50,140
syntax for example the vowel syntax and

00:11:44,170 --> 00:11:53,830
only me in text such kind of days it's

00:11:50,140 --> 00:11:55,320
support posts interests x86 and arm

00:11:53,830 --> 00:12:00,640
server

00:11:55,320 --> 00:12:09,040
it's about post modernization vm and the

00:12:00,640 --> 00:12:12,910
parameter from from the cloud side there

00:12:09,040 --> 00:12:23,260
is no difference between the VMS and the

00:12:12,910 --> 00:12:27,030
parameters and containers ok so zero can

00:12:23,260 --> 00:12:31,930
support posts what with PMS VMs and

00:12:27,030 --> 00:12:35,470
containers if we support VMs will lead

00:12:31,930 --> 00:12:38,950
to we will have a very firm that and the

00:12:35,470 --> 00:12:42,040
hypervisor at the server side but if we

00:12:38,950 --> 00:12:48,570
support parameters and containers with

00:12:42,040 --> 00:12:53,890
only needed and at the end of the card

00:12:48,570 --> 00:12:56,160
we have 3 interface one interface is to

00:12:53,890 --> 00:13:00,090
connect to the standard cloud management

00:12:56,160 --> 00:13:02,040
system another interface is storage and

00:13:00,090 --> 00:13:05,350
endpoint in the face

00:13:02,040 --> 00:13:07,840
the third interfaces network endpoint

00:13:05,350 --> 00:13:11,470
interfaces all these interfaces are

00:13:07,840 --> 00:13:14,410
standard as the normal I mean for

00:13:11,470 --> 00:13:16,960
example as the as we support a memo so

00:13:14,410 --> 00:13:19,180
that the VMS and the support of them

00:13:16,960 --> 00:13:22,240
there's no difference so we're

00:13:19,180 --> 00:13:33,370
seamlessly interface with was Public

00:13:22,240 --> 00:13:36,220
Health okay let me introduce my

00:13:33,370 --> 00:13:44,140
colleague one who answers how to do some

00:13:36,220 --> 00:13:48,040
details of their system okay

00:13:44,140 --> 00:13:50,440
as Paul introduced the RO system is a

00:13:48,040 --> 00:13:54,220
whole system and I will give you a brief

00:13:50,440 --> 00:13:57,610
introduction about some more details as

00:13:54,220 --> 00:14:02,320
you can see in this figure the old

00:13:57,610 --> 00:14:06,700
system contains a host controller and IO

00:14:02,320 --> 00:14:10,200
casts the control car is necessary for

00:14:06,700 --> 00:14:15,190
the RO system and it builds on

00:14:10,200 --> 00:14:20,320
virtualization SOC chip it learns

00:14:15,190 --> 00:14:25,180
linnaeus operating system and we offload

00:14:20,320 --> 00:14:28,450
almost all of the management API in to

00:14:25,180 --> 00:14:33,010
racecars suggest creating Liam

00:14:28,450 --> 00:14:35,910
destroying the country will support a

00:14:33,010 --> 00:14:41,200
native OpenStack framework without

00:14:35,910 --> 00:14:44,980
almost no change and this controller

00:14:41,200 --> 00:14:51,880
also need to coordinate all our cars and

00:14:44,980 --> 00:14:55,000
hosts when we need to buy a new web the

00:14:51,880 --> 00:14:58,330
operating the OpenStack central node

00:14:55,000 --> 00:15:01,600
will and only send requests to this

00:14:58,330 --> 00:15:04,630
control card and this controller will

00:15:01,600 --> 00:15:08,320
prepare all of the resources the womenís

00:15:04,630 --> 00:15:14,140
such as how many disk

00:15:08,320 --> 00:15:21,100
how many network and it will create the

00:15:14,140 --> 00:15:26,059
we my internal channel

00:15:21,100 --> 00:15:31,009
the Elkhart are optional there can be

00:15:26,059 --> 00:15:34,519
one storage car and one network car

00:15:31,009 --> 00:15:38,629
the aisle cars stateless for the

00:15:34,519 --> 00:15:42,139
original aisle system the storage card

00:15:38,629 --> 00:15:48,470
supports native e PS interface and the

00:15:42,139 --> 00:15:51,709
network hotspot native VPC interface of

00:15:48,470 --> 00:15:57,110
this is configurable maybe you don't

00:15:51,709 --> 00:16:01,069
need 18 million PPS Network you can just

00:15:57,110 --> 00:16:04,160
remove the network our maybe you do you

00:16:01,069 --> 00:16:07,459
do need 1 million IOPS you can just

00:16:04,160 --> 00:16:10,670
remove the storage car and you can even

00:16:07,459 --> 00:16:14,480
configure start card to be a network

00:16:10,670 --> 00:16:18,889
card yeah everything is configurable

00:16:14,480 --> 00:16:25,120
which make our employee more flexible

00:16:18,889 --> 00:16:29,689
and convict ranging very easy and fast

00:16:25,120 --> 00:16:35,360
ok follow host it can be a worry tiny

00:16:29,689 --> 00:16:40,759
linnaeus maybe with no local disk with

00:16:35,360 --> 00:16:47,360
no network interfaces the controller can

00:16:40,759 --> 00:16:51,439
manage the host wha PCIe channel so we

00:16:47,360 --> 00:16:56,929
can remove the tcp/ip protocol network

00:16:51,439 --> 00:17:04,130
protocol and the alkar can expose as

00:16:56,929 --> 00:17:07,579
many disks to house so we have no need

00:17:04,130 --> 00:17:12,949
to use the local disk and when we use a

00:17:07,579 --> 00:17:18,799
demo disk instead of the local disk we

00:17:12,949 --> 00:17:22,939
can benefit for config changing such as

00:17:18,799 --> 00:17:25,850
we can we can switch this host among

00:17:22,939 --> 00:17:30,730
easiest mode parameter mode container

00:17:25,850 --> 00:17:33,180
mode all we need to do is prepare three

00:17:30,730 --> 00:17:37,650
remotes disks for

00:17:33,180 --> 00:17:44,790
these three modes and the switch remote

00:17:37,650 --> 00:17:48,300
disc to host from one mode to another so

00:17:44,790 --> 00:17:52,590
for a computing system our key points

00:17:48,300 --> 00:17:56,900
are one single control card and multi

00:17:52,590 --> 00:18:00,690
I'll cast we make almost everything

00:17:56,900 --> 00:18:04,710
configurable and we make the host tiny

00:18:00,690 --> 00:18:11,190
we offload almost all of the management

00:18:04,710 --> 00:18:15,620
and i/o to zero casts so all the CPU and

00:18:11,190 --> 00:18:15,620
memory resources can be sold to guests

00:18:16,850 --> 00:18:27,920
so how we offload iosys and the key

00:18:21,120 --> 00:18:31,260
point is pass rule so under traditional

00:18:27,920 --> 00:18:36,030
virtualization system we use humor to

00:18:31,260 --> 00:18:39,360
emulate virtual devices to guest human

00:18:36,030 --> 00:18:45,270
needs to handle or for what each aisle

00:18:39,360 --> 00:18:48,030
packet we waste some of the CPU

00:18:45,270 --> 00:18:51,660
resources they fry assistant and layer

00:18:48,030 --> 00:18:56,120
performance and not very good to solve

00:18:51,660 --> 00:19:00,200
this problem we introduce a SOC chip

00:18:56,120 --> 00:19:05,040
which provides the ability to configure

00:19:00,200 --> 00:19:09,360
PC our hardware devices it means that

00:19:05,040 --> 00:19:13,410
there are many there are many real PCI

00:19:09,360 --> 00:19:17,220
devices we can expose to hosts when we

00:19:13,410 --> 00:19:22,310
use zero cards and all of this PCI

00:19:17,220 --> 00:19:26,040
devices can be software-defined we can

00:19:22,310 --> 00:19:30,690
configure this PCI devices to whatever

00:19:26,040 --> 00:19:35,270
we want it can be without block it can

00:19:30,690 --> 00:19:42,200
be or disguisey it can be only a me and

00:19:35,270 --> 00:19:42,200
we can fast which among above most

00:19:42,830 --> 00:19:52,050
currently we use what house Cassie and

00:19:47,150 --> 00:19:55,290
what how net has devote because almost

00:19:52,050 --> 00:20:01,200
of the guest operating system supported

00:19:55,290 --> 00:20:05,040
without any modification least zero

00:20:01,200 --> 00:20:08,310
casts makes Software Defined PCL

00:20:05,040 --> 00:20:13,080
pass-through possible and at the same

00:20:08,310 --> 00:20:15,540
time we use because we use Pisa pass

00:20:13,080 --> 00:20:22,340
through the i/o dead past don't go

00:20:15,540 --> 00:20:22,340
through house now we benefit a lot from

00:20:25,040 --> 00:20:39,270
we benefit a lot from this and and we

00:20:35,160 --> 00:20:43,440
found that with on that the aisle the

00:20:39,270 --> 00:20:47,190
Woodhouse protocol sometimes becomes the

00:20:43,440 --> 00:20:50,190
bottleneck the what help protocol works

00:20:47,190 --> 00:20:54,570
well while Coomer emulates virtual

00:20:50,190 --> 00:20:58,620
devices but when we use has when we use

00:20:54,570 --> 00:21:02,730
whatever hardware there are too many

00:20:58,620 --> 00:21:05,840
times for EMA read/write and each DMA

00:21:02,730 --> 00:21:14,760
realized wastes CPU time and may cause

00:21:05,840 --> 00:21:18,300
cash missing so and and as we know what

00:21:14,760 --> 00:21:20,810
how one point to protocol may be more

00:21:18,300 --> 00:21:26,220
friendly to hardware what health devices

00:21:20,810 --> 00:21:30,950
but it can work for old operating system

00:21:26,220 --> 00:21:37,710
so we must keep improving performance

00:21:30,950 --> 00:21:41,000
for what her 1.0 protocol and this is

00:21:37,710 --> 00:21:45,720
some of the points about our performance

00:21:41,000 --> 00:21:51,230
optimization for example we may prefetch

00:21:45,720 --> 00:21:55,090
the descriptor did prefetch the

00:21:51,230 --> 00:21:59,500
available ring in one TMA operate

00:21:55,090 --> 00:22:04,690
raishin and we can also batch process

00:21:59,500 --> 00:22:10,000
requests we can even we can even dear

00:22:04,690 --> 00:22:14,940
Mary Tate and DMA light used elements in

00:22:10,000 --> 00:22:20,170
one TMA operating in one tma operation

00:22:14,940 --> 00:22:24,310
so so our key point is reduce the DMA

00:22:20,170 --> 00:22:32,740
frequency and to get shorter I'll pass

00:22:24,310 --> 00:22:36,370
and reduce cash missing so when we

00:22:32,740 --> 00:22:40,030
benefit from PCF house rule we have to

00:22:36,370 --> 00:22:42,430
and why and when we widely use it we

00:22:40,030 --> 00:22:43,650
have to support pass through live

00:22:42,430 --> 00:22:48,280
migration

00:22:43,650 --> 00:22:51,510
so of course several efforts have been

00:22:48,280 --> 00:22:57,160
made for pass through live migration

00:22:51,510 --> 00:22:59,500
such as we DP a scaleable I all they can

00:22:57,160 --> 00:23:03,400
the bounding and there are many good

00:22:59,500 --> 00:23:06,060
ideas but all of these ideas are focus

00:23:03,400 --> 00:23:11,650
on a modified hardware

00:23:06,060 --> 00:23:15,360
of course this consideration makes the

00:23:11,650 --> 00:23:18,610
framework more journal and based

00:23:15,360 --> 00:23:23,890
basically zero system can support all of

00:23:18,610 --> 00:23:27,670
this framework and but think from

00:23:23,890 --> 00:23:32,530
analysis under zero system all of the

00:23:27,670 --> 00:23:37,150
hardware is can be Software Defined so

00:23:32,530 --> 00:23:41,380
why don't we use the most direct and

00:23:37,150 --> 00:23:45,010
good way to get the best performance so

00:23:41,380 --> 00:23:52,020
I will show you our practice in our

00:23:45,010 --> 00:23:55,810
crowd we introduced front-end front-end

00:23:52,020 --> 00:23:59,830
migration framework it's based on WAV

00:23:55,810 --> 00:24:00,700
file and provides all of the migration

00:23:59,830 --> 00:24:03,820
callbacks

00:24:00,700 --> 00:24:06,050
such as rock style log star block sync

00:24:03,820 --> 00:24:13,690
safe restore

00:24:06,050 --> 00:24:18,130
and and at the main time we introduced

00:24:13,690 --> 00:24:22,970
back-end migration framework which also

00:24:18,130 --> 00:24:29,690
shows the different differences of

00:24:22,970 --> 00:24:32,780
device so the key logic long on back-end

00:24:29,690 --> 00:24:36,590
the backend driver the backend travel

00:24:32,780 --> 00:24:41,360
know exactly when the DMA light happened

00:24:36,590 --> 00:24:44,480
and what the DMA addresses so it's

00:24:41,360 --> 00:24:53,270
easier so it's easy for back-end driver

00:24:44,480 --> 00:24:57,170
to lock the dirty page and and to do a

00:24:53,270 --> 00:25:01,580
dirty page checking so it's just me to

00:24:57,170 --> 00:25:05,930
return the dirty bit map while front-end

00:25:01,580 --> 00:25:12,920
require it and in the law system

00:25:05,930 --> 00:25:16,670
everything is stored on software so the

00:25:12,920 --> 00:25:22,630
device days can also be easy to save and

00:25:16,670 --> 00:25:25,520
restore currently the flame the

00:25:22,630 --> 00:25:27,680
migration framework support with help

00:25:25,520 --> 00:25:32,060
block without Scaasi with her net and

00:25:27,680 --> 00:25:38,540
with me and alway nique and of course we

00:25:32,060 --> 00:25:41,870
works well for a modified guest OS so in

00:25:38,540 --> 00:25:45,320
in highway a question is always in our

00:25:41,870 --> 00:25:47,650
mind can you get better performance and

00:25:45,320 --> 00:25:52,960
the answer is always yes

00:25:47,650 --> 00:25:56,740
so we there are also some ideas for

00:25:52,960 --> 00:26:03,290
improving the performance continuously

00:25:56,740 --> 00:26:07,730
suggest we can we can make locking

00:26:03,290 --> 00:26:10,880
safely store concurrently you know in

00:26:07,730 --> 00:26:17,030
human life migration framework it's

00:26:10,880 --> 00:26:19,640
assumed that every log sync is works

00:26:17,030 --> 00:26:24,590
well assume smaller than

00:26:19,640 --> 00:26:28,760
milliseconds but in this system with

00:26:24,590 --> 00:26:33,890
pizza has to lock sync may cause Mullen

00:26:28,760 --> 00:26:38,900
maybe two MIDI second so when we when

00:26:33,890 --> 00:26:43,640
you have 10 we have you may cause 20

00:26:38,900 --> 00:26:47,900
milliseconds for each boxing so so it

00:26:43,640 --> 00:26:51,200
become necessary to concurrent the lock

00:26:47,900 --> 00:26:58,100
sink and the same as the safely store

00:26:51,200 --> 00:27:03,230
and it's the pause and resume I also

00:26:58,100 --> 00:27:07,030
knew process for PCI devices and we also

00:27:03,230 --> 00:27:11,750
need to make the pass and resume

00:27:07,030 --> 00:27:17,419
secondary so there are some ideas and

00:27:11,750 --> 00:27:22,520
you know we achieve 50 milliseconds done

00:27:17,419 --> 00:27:28,390
time and almost the same as the norm PCI

00:27:22,520 --> 00:27:28,390
has to perform this thank you

00:27:29,370 --> 00:27:35,650
[Applause]

00:27:35,940 --> 00:27:39,659
so either Casillas

00:27:40,889 --> 00:27:45,129
unfortunately there's no time for

00:27:42,820 --> 00:27:46,990
questions so maybe you can you can get

00:27:45,129 --> 00:27:48,879
in like you can get in touch with them

00:27:46,990 --> 00:27:50,289
like okay sorry

00:27:48,879 --> 00:27:52,090
thank you there's a lot that we only

00:27:50,289 --> 00:27:55,410
have have hours so we can talk offline

00:27:52,090 --> 00:27:58,800
right okay

00:27:55,410 --> 00:28:05,660
[Applause]

00:27:58,800 --> 00:28:05,660

YouTube URL: https://www.youtube.com/watch?v=6cqxsjipbhY


