Title: [2019] Reports of my Bloat Have Been Greatly Exaggerated by Paolo Bonzini
Publication date: 2019-11-12
Playlist: KVM Forum 2019
Description: 
	Is QEMU bloated? Insecure? Obsolete? What are QEMU's tasks when virtualizing a modern guest, and how do they change for various workloads and scenarios? The aim of this talk is to provide hard data on the security and size of various components of QEMU, explain how the build can be tailored to minimize code size, attack surface and startup time, and give ideas for future development of QEMU. I will also shortly present the tools that helped me gather the data, so that anyone can reproduce my experiments in the future.

---

Paolo Bonzini
Red Hat, Inc.
Sr. Principal Software Engineer

Paolo is a long-time KVM contributor and co-maintainer; he also co-maintains some subsystems in QEMU. He works at Red Hat.

Note: There's no video recording available for this talk due to technical issues.
Captions: 
	00:00:00,390 --> 00:00:02,750
[Music]

00:00:07,069 --> 00:00:13,259
so hello everyone my name is parwans

00:00:10,469 --> 00:00:17,970
Eenie I work at reddit on KVM anger mu

00:00:13,259 --> 00:00:21,630
and topic of my talk is going to be the

00:00:17,970 --> 00:00:24,439
truth about dream was blood or how I

00:00:21,630 --> 00:00:28,920
learned to stop worrying and love q mu

00:00:24,439 --> 00:00:31,160
so why destroy this question these are

00:00:28,920 --> 00:00:34,500
I'm going to show a few questions that

00:00:31,160 --> 00:00:37,110
people ask me and poly people have also

00:00:34,500 --> 00:00:41,370
has some of you such as for example why

00:00:37,110 --> 00:00:43,079
is it worthwhile to invest in qmo what's

00:00:41,370 --> 00:00:45,120
going on with you is it not secure

00:00:43,079 --> 00:00:49,309
because it Witten in Co is not secure

00:00:45,120 --> 00:00:49,309
because it has a floppy disk controller

00:00:49,430 --> 00:00:58,680
so let's start with size and bloat SQ am

00:00:54,690 --> 00:01:01,440
a big and the answer then is absolutely

00:00:58,680 --> 00:01:07,200
yes it's a large program there's no

00:01:01,440 --> 00:01:13,350
denying that's the numerical thing if

00:01:07,200 --> 00:01:15,210
you get common like ls3 you will find

00:01:13,350 --> 00:01:16,799
that excluding sub modules which are

00:01:15,210 --> 00:01:19,740
mostly film work so we can kind of

00:01:16,799 --> 00:01:22,080
ignore them and only counting C files

00:01:19,740 --> 00:01:25,140
there are two thousand eight hundred

00:01:22,080 --> 00:01:28,860
files more than one and a half millions

00:01:25,140 --> 00:01:30,900
lines of C code of these some are tests

00:01:28,860 --> 00:01:33,450
but still it's a lot of code and doesn't

00:01:30,900 --> 00:01:36,060
even count header files build script the

00:01:33,450 --> 00:01:39,600
script written in other languages such

00:01:36,060 --> 00:01:41,220
as qm y OU tests test data and so on the

00:01:39,600 --> 00:01:43,049
question that you really want to ask

00:01:41,220 --> 00:01:46,829
yourself however is not whether Kim is

00:01:43,049 --> 00:01:49,079
big it's whether Kim is too big and then

00:01:46,829 --> 00:01:50,700
the answer is maybe some people may

00:01:49,079 --> 00:01:52,829
answer yes some people may answer no

00:01:50,700 --> 00:01:57,299
some people may answer I don't know and

00:01:52,829 --> 00:02:00,180
those are the best so let's see how you

00:01:57,299 --> 00:02:03,420
can give a sensible answer to deserve to

00:02:00,180 --> 00:02:07,159
this question first of all how many

00:02:03,420 --> 00:02:07,159
people have you think um is too big

00:02:07,860 --> 00:02:14,580
okay I see that at least the cloud

00:02:10,560 --> 00:02:18,380
hypervisor guys show the strength of

00:02:14,580 --> 00:02:22,680
their convictions but the first question

00:02:18,380 --> 00:02:26,190
while other people are not like very

00:02:22,680 --> 00:02:30,000
much convinced that QM is too big so

00:02:26,190 --> 00:02:31,650
that's a good start but still the first

00:02:30,000 --> 00:02:35,520
question if you think that game was too

00:02:31,650 --> 00:02:38,160
big it's different to say whether Kim is

00:02:35,520 --> 00:02:41,640
too big for your use case or in general

00:02:38,160 --> 00:02:44,310
and for example people that are working

00:02:41,640 --> 00:02:45,840
on or Nene acts of course believe that Q

00:02:44,310 --> 00:02:49,140
is too big for their your skis it makes

00:02:45,840 --> 00:02:51,630
no sense to use Q for Linux so in that

00:02:49,140 --> 00:02:53,160
case there's like human is not just to

00:02:51,630 --> 00:02:56,610
be it's just not the right solution to

00:02:53,160 --> 00:02:59,670
the problem the next question that you

00:02:56,610 --> 00:03:01,620
should ask yourself if you think you are

00:02:59,670 --> 00:03:03,630
much too big it's why do you care about

00:03:01,620 --> 00:03:05,220
size and we will go into this a bit

00:03:03,630 --> 00:03:09,330
later but there are many reasons why

00:03:05,220 --> 00:03:13,560
size can be a problem or maybe you are

00:03:09,330 --> 00:03:16,110
thinking that you care about size but Q

00:03:13,560 --> 00:03:19,080
is not too big in that respect so for

00:03:16,110 --> 00:03:20,880
you to Moe is not too big the next one

00:03:19,080 --> 00:03:24,060
is do you know how to measure size

00:03:20,880 --> 00:03:26,850
because sometimes you may look at the

00:03:24,060 --> 00:03:28,830
like matrix like the 2800 source code

00:03:26,850 --> 00:03:29,970
files and think you are much too big but

00:03:28,830 --> 00:03:32,070
actually that's not the way that you

00:03:29,970 --> 00:03:37,110
measure size for other reasons that I

00:03:32,070 --> 00:03:38,700
will go into detail later then even if

00:03:37,110 --> 00:03:41,340
you know how to measure size have you

00:03:38,700 --> 00:03:45,870
measured it already you just heard from

00:03:41,340 --> 00:03:47,760
the grapevine that Q moves to be another

00:03:45,870 --> 00:03:51,180
arrow that many people make not just

00:03:47,760 --> 00:03:53,190
with Q in general like hearsay is not

00:03:51,180 --> 00:03:55,709
often the best source of information and

00:03:53,190 --> 00:03:57,989
finally the thing that you have to ask

00:03:55,709 --> 00:04:02,250
yourself is whether Q much complexity is

00:03:57,989 --> 00:04:04,049
essential or accidental whether qmo is

00:04:02,250 --> 00:04:06,630
just big because it has to do

00:04:04,049 --> 00:04:09,000
complicated stuff so let's look for

00:04:06,630 --> 00:04:11,610
example at what km you can do k you can

00:04:09,000 --> 00:04:13,459
emulate other processor amulet even your

00:04:11,610 --> 00:04:15,680
path so you can

00:04:13,459 --> 00:04:18,049
Thank You mo with features that your

00:04:15,680 --> 00:04:20,389
processor doesn't have because it's not

00:04:18,049 --> 00:04:22,820
any different to emulate an x86

00:04:20,389 --> 00:04:25,850
processor on x86 or emulate an ion

00:04:22,820 --> 00:04:27,919
passes on x86 you can run all the

00:04:25,850 --> 00:04:30,110
operating systems probably not to old

00:04:27,919 --> 00:04:33,199
operating systems but let's say that for

00:04:30,110 --> 00:04:36,310
the last 20 years you should be good it

00:04:33,199 --> 00:04:40,160
can run foreign Linux binaries emulating

00:04:36,310 --> 00:04:44,090
processors so for example an busybox for

00:04:40,160 --> 00:04:46,720
arm or on x86 and it can also use a

00:04:44,090 --> 00:04:49,490
bunch of accelerators for civilizations

00:04:46,720 --> 00:04:52,400
usually only one of them because you

00:04:49,490 --> 00:04:56,330
usually have only 1 kg I'm only nukes

00:04:52,400 --> 00:04:58,660
whp on Windows and so on but it has

00:04:56,330 --> 00:05:02,810
supports for for virtualization

00:04:58,660 --> 00:05:04,490
hypervisors KVM hacks HP f which is

00:05:02,810 --> 00:05:07,820
hypervisor framework from Apple and

00:05:04,490 --> 00:05:10,100
Microsoft W HP so the first thing that

00:05:07,820 --> 00:05:11,870
you have to do if you think that cam was

00:05:10,100 --> 00:05:15,620
too big is try to understand your use

00:05:11,870 --> 00:05:19,789
case for example if you need to emulate

00:05:15,620 --> 00:05:22,310
your passes so you need to I know all

00:05:19,789 --> 00:05:23,930
the operating systems but maybe you

00:05:22,310 --> 00:05:26,270
don't need to learn foreign Linux panels

00:05:23,930 --> 00:05:28,520
you don't need to emulate arm or vice

00:05:26,270 --> 00:05:31,639
versa you need to emulate a but not x86

00:05:28,520 --> 00:05:33,320
and possibly you want to use P

00:05:31,639 --> 00:05:37,010
virtualization what you do is just you

00:05:33,320 --> 00:05:40,970
you build your team with target list it

00:05:37,010 --> 00:05:46,970
will only build one term binary and this

00:05:40,970 --> 00:05:49,070
is for example how some Linux

00:05:46,970 --> 00:05:51,860
distribution can configure qmo and this

00:05:49,070 --> 00:05:53,810
means that you cut away like 1 million

00:05:51,860 --> 00:05:56,630
lines of code in one single fell swoop

00:05:53,810 --> 00:06:00,770
and perhaps you don't even need to

00:05:56,630 --> 00:06:05,360
emulate your path so in that case there

00:06:00,770 --> 00:06:07,280
is handy - - disabled - TCG and you only

00:06:05,360 --> 00:06:09,139
get support for key VM or whatever

00:06:07,280 --> 00:06:12,770
virtualization technology your operating

00:06:09,139 --> 00:06:15,349
system support so this is just a simple

00:06:12,770 --> 00:06:18,770
example of how you can make your much

00:06:15,349 --> 00:06:20,780
smaller and so the right question to ask

00:06:18,770 --> 00:06:23,930
based on all the questions I represented

00:06:20,780 --> 00:06:25,030
before and this simple example is

00:06:23,930 --> 00:06:28,480
whether you

00:06:25,030 --> 00:06:32,530
q exam executable is too big so whether

00:06:28,480 --> 00:06:36,070
you have configured qmo in in an optimal

00:06:32,530 --> 00:06:40,150
way for your use case and now is it

00:06:36,070 --> 00:06:42,820
still too big or not the other question

00:06:40,150 --> 00:06:46,030
to ask is well is how the size affects

00:06:42,820 --> 00:06:47,800
you like does that mean that you have

00:06:46,030 --> 00:06:49,990
more attacks of face does that mean that

00:06:47,800 --> 00:06:53,650
your disk and memory footprint is going

00:06:49,990 --> 00:06:56,320
to be larger and you want absolute the

00:06:53,650 --> 00:06:58,990
best density of your machine on your on

00:06:56,320 --> 00:07:01,150
your host do you care about start a time

00:06:58,990 --> 00:07:03,430
do you care about number of bugs or

00:07:01,150 --> 00:07:06,310
vulnerabilities that you have to fix and

00:07:03,430 --> 00:07:08,650
maintenance cost of them you care about

00:07:06,310 --> 00:07:12,070
what your customer can do and what weird

00:07:08,650 --> 00:07:14,020
things they can report and also the cost

00:07:12,070 --> 00:07:17,620
of folding thing for security if you

00:07:14,020 --> 00:07:20,830
want to be sure that you don't run into

00:07:17,620 --> 00:07:22,510
a glimmer nura bilities or minimize

00:07:20,830 --> 00:07:25,210
number of ugly vulnerabilities that you

00:07:22,510 --> 00:07:29,760
want to have that you will have to

00:07:25,210 --> 00:07:32,530
update the host form so first of all

00:07:29,760 --> 00:07:36,669
let's start with the facts of phase QM

00:07:32,530 --> 00:07:38,290
who has a huge tax of face every popular

00:07:36,669 --> 00:07:39,400
program with the million and half lines

00:07:38,290 --> 00:07:42,550
of code is going to have a pretty

00:07:39,400 --> 00:07:48,490
significant attractive face for example

00:07:42,550 --> 00:07:51,340
it has gas device drivers can attack the

00:07:48,490 --> 00:07:52,930
host device simulation code the

00:07:51,340 --> 00:07:54,729
management interface can be attacked

00:07:52,930 --> 00:08:00,160
with buffer overflows whatever it does

00:07:54,729 --> 00:08:02,860
json parser it's not huge but the json

00:08:00,160 --> 00:08:04,810
parser is just the beginning migration

00:08:02,860 --> 00:08:06,880
data is a pretty bad one because it

00:08:04,810 --> 00:08:08,800
loads data tends to into c structs and

00:08:06,880 --> 00:08:11,220
it will it's all done with the

00:08:08,800 --> 00:08:14,950
introspection and stuff like that and

00:08:11,220 --> 00:08:18,610
it's also a perfect way to get buffer

00:08:14,950 --> 00:08:21,610
overflows in qmo image formats same full

00:08:18,610 --> 00:08:22,320
of pointers full of stuff that can go

00:08:21,610 --> 00:08:25,630
wrong

00:08:22,320 --> 00:08:28,030
yeah Leffler starts to be a bit more

00:08:25,630 --> 00:08:32,680
niche but there have been bugs in

00:08:28,030 --> 00:08:34,940
parsing kernels that you pass to qmo to

00:08:32,680 --> 00:08:37,760
start your guests without

00:08:34,940 --> 00:08:42,020
like grab and finally for example the

00:08:37,760 --> 00:08:44,380
VNC server or other ways of interacting

00:08:42,020 --> 00:08:49,790
and providing the user with the console

00:08:44,380 --> 00:08:52,070
these are all attacks of phase of chemo

00:08:49,790 --> 00:09:00,460
on the other hand they aren't all the

00:08:52,070 --> 00:09:03,370
same only properly configured let's say

00:09:00,460 --> 00:09:05,540
IaaS infrastructure as a service host

00:09:03,370 --> 00:09:07,400
the management interface should

00:09:05,540 --> 00:09:10,880
absolutely not be visible to your

00:09:07,400 --> 00:09:12,800
tenants the migration data should not be

00:09:10,880 --> 00:09:15,740
visible to your tenants although they

00:09:12,800 --> 00:09:19,670
might be able to get to trigger bugs

00:09:15,740 --> 00:09:21,800
through the guests so image format

00:09:19,670 --> 00:09:25,150
should not be visible but you should

00:09:21,800 --> 00:09:31,190
still make sure that they cannot trigger

00:09:25,150 --> 00:09:34,820
some weird detection code and perhaps

00:09:31,190 --> 00:09:37,400
access source files as faxing should

00:09:34,820 --> 00:09:39,440
probably not be visible and anyway it's

00:09:37,400 --> 00:09:42,410
something that you can also vet in

00:09:39,440 --> 00:09:44,120
advance with your own Parcell VNC server

00:09:42,410 --> 00:09:45,980
depends on the use case some cloud

00:09:44,120 --> 00:09:51,710
providers provide the VNC console some

00:09:45,980 --> 00:09:53,660
don't so anyway it does this doesn't

00:09:51,710 --> 00:09:56,930
mean that for this means that for every

00:09:53,660 --> 00:09:59,390
vulnerability that is in qmo what your

00:09:56,930 --> 00:10:02,990
vendor tells you about the importance is

00:09:59,390 --> 00:10:06,020
not what importance the vulnerability

00:10:02,990 --> 00:10:08,270
has for you it's of course something

00:10:06,020 --> 00:10:10,760
that you want to patch but maybe not

00:10:08,270 --> 00:10:13,970
something that you scramble and reboot

00:10:10,760 --> 00:10:16,280
all your machines for so let's look at

00:10:13,970 --> 00:10:21,160
the top 100 vulnerabilities reported for

00:10:16,280 --> 00:10:24,170
qmo going back to like 2010 more or less

00:10:21,160 --> 00:10:27,560
and if you look at them 65 were not

00:10:24,170 --> 00:10:29,510
guest exploitable so you were nothing QM

00:10:27,560 --> 00:10:31,040
at all actually the two of them were in

00:10:29,510 --> 00:10:35,270
the QM against agent and one was

00:10:31,040 --> 00:10:39,800
actually in a VM in the kernel 5 did not

00:10:35,270 --> 00:10:42,020
affect x86 KVM guests 3 were stuff like

00:10:39,800 --> 00:10:44,030
being able to access those file systems

00:10:42,020 --> 00:10:46,720
through

00:10:44,030 --> 00:10:53,720
symlink vulnerabilities stuff like that

00:10:46,720 --> 00:10:55,520
and of these all that remain only six

00:10:53,720 --> 00:11:00,590
actually would have affected the cloud

00:10:55,520 --> 00:11:02,660
provider in a really bad way so also the

00:11:00,590 --> 00:11:03,800
most recent of this six was important

00:11:02,660 --> 00:11:08,330
three years ago

00:11:03,800 --> 00:11:09,920
so this means that absolutely qmo has a

00:11:08,330 --> 00:11:12,620
bit more work to do because it's written

00:11:09,920 --> 00:11:15,350
in c but my impression is that we're

00:11:12,620 --> 00:11:16,280
doing a decent job and the tax office is

00:11:15,350 --> 00:11:19,610
something that you should evaluate

00:11:16,280 --> 00:11:22,540
carefully because the tax office of

00:11:19,610 --> 00:11:25,730
crime was not that big in practice

00:11:22,540 --> 00:11:29,510
because it has a lot of I is looking at

00:11:25,730 --> 00:11:31,910
it and a lot of security fixes have

00:11:29,510 --> 00:11:33,920
already been applied and then a lot of

00:11:31,910 --> 00:11:36,920
whole classes of security

00:11:33,920 --> 00:11:39,220
vulnerabilities have also been fixed by

00:11:36,920 --> 00:11:42,620
having better infrastructure in the code

00:11:39,220 --> 00:11:45,050
so regarding the tax of face before

00:11:42,620 --> 00:11:47,210
caring about GMO size what you should

00:11:45,050 --> 00:11:49,880
ask yourself is whether your network is

00:11:47,210 --> 00:11:53,240
secure what data your customer provides

00:11:49,880 --> 00:11:56,060
to you and how you can vet it outside

00:11:53,240 --> 00:11:59,050
qmo if needed how you send box your

00:11:56,060 --> 00:12:01,760
guests so that you are protected from

00:11:59,050 --> 00:12:03,410
file system symlink attacks and stuff

00:12:01,760 --> 00:12:05,570
like that and whether your kernel

00:12:03,410 --> 00:12:08,930
attitude is up-to-date because if your

00:12:05,570 --> 00:12:13,910
kernel is not up to date and you have

00:12:08,930 --> 00:12:15,590
sent box at the properly actually KVM

00:12:13,910 --> 00:12:20,800
may end up being a much more juicy

00:12:15,590 --> 00:12:20,800
target for attacking and that's it

00:12:20,990 --> 00:12:26,480
q is a big program and read make end

00:12:23,660 --> 00:12:28,610
compiling less code is the perfect way

00:12:26,480 --> 00:12:31,370
to reduce the tax of face so we want to

00:12:28,610 --> 00:12:33,580
hear from you we want to hear what code

00:12:31,370 --> 00:12:36,080
you would like to be configured out and

00:12:33,580 --> 00:12:37,940
if you can send patches that it is

00:12:36,080 --> 00:12:41,810
perfect you just have a suggestion that

00:12:37,940 --> 00:12:44,300
is also very good the next one is

00:12:41,810 --> 00:12:45,500
footprint and startup time I'm putting

00:12:44,300 --> 00:12:47,920
them together because you can measure

00:12:45,500 --> 00:12:51,580
them more or less with the same tools

00:12:47,920 --> 00:12:53,350
Kiev a sensor size binary size

00:12:51,580 --> 00:12:57,040
I'm of sharing libraries that are linked

00:12:53,350 --> 00:13:01,120
and if you look at the qrss more or less

00:12:57,040 --> 00:13:08,079
it's 21 megabytes for the like the least

00:13:01,120 --> 00:13:09,459
capable targeting to mo the for that

00:13:08,079 --> 00:13:12,070
particular target there are so few

00:13:09,459 --> 00:13:17,800
emulated devices that even if you add a

00:13:12,070 --> 00:13:22,209
CPU and an actual hardware board the RSS

00:13:17,800 --> 00:13:24,940
doesn't change at all for x86 64 just

00:13:22,209 --> 00:13:28,269
the amount of coding qmo is bigger of

00:13:24,940 --> 00:13:31,899
course and that's what six megabytes the

00:13:28,269 --> 00:13:37,779
cost of a PC machine type and having a

00:13:31,899 --> 00:13:40,180
CPU is six more six six more megabytes

00:13:37,779 --> 00:13:42,399
the cost of using KVM instead of a fake

00:13:40,180 --> 00:13:45,640
CPU is zero so that's a good thing and

00:13:42,399 --> 00:13:48,730
the cost of adding a gtk interface is 30

00:13:45,640 --> 00:13:51,040
megabytes so just by not having a

00:13:48,730 --> 00:13:53,170
graphics card for example you can

00:13:51,040 --> 00:13:59,649
basically cut the QM RSS in half and

00:13:53,170 --> 00:14:02,529
double the density so it's double and

00:13:59,649 --> 00:14:04,720
double the amount of RAM that you can

00:14:02,529 --> 00:14:07,510
give to your guests instead of wasting

00:14:04,720 --> 00:14:12,250
it in um but actually even that is not

00:14:07,510 --> 00:14:13,870
entirely true so because you should be

00:14:12,250 --> 00:14:18,610
careful about for example how you

00:14:13,870 --> 00:14:21,250
measure RSS because text text the the

00:14:18,610 --> 00:14:24,120
binary code of qmo and any binary that

00:14:21,250 --> 00:14:28,270
you run is shared across multiple gems

00:14:24,120 --> 00:14:33,579
the binary code of shared libraries is

00:14:28,270 --> 00:14:35,320
shared across all programs that use that

00:14:33,579 --> 00:14:39,459
particular library so for example if

00:14:35,320 --> 00:14:42,160
system D uses Ghalib then the fact that

00:14:39,459 --> 00:14:46,930
qmo uses G Lib is completely coming for

00:14:42,160 --> 00:14:48,459
free in terms of memory occupation also

00:14:46,930 --> 00:14:51,070
not all text in a shared library will be

00:14:48,459 --> 00:14:53,500
memory you can have a huge library but

00:14:51,070 --> 00:14:57,130
you maybe you don't even touch anything

00:14:53,500 --> 00:15:01,050
until you hot-plug something that

00:14:57,130 --> 00:15:04,180
requires the particular library and also

00:15:01,050 --> 00:15:04,970
measure not the time to the first guest

00:15:04,180 --> 00:15:06,170
instruction

00:15:04,970 --> 00:15:11,000
the time to the first non-thermal

00:15:06,170 --> 00:15:14,120
instruction fewer code runs as fast as

00:15:11,000 --> 00:15:16,160
hardware and is less less security

00:15:14,120 --> 00:15:18,920
sensitive for example the extreme case

00:15:16,160 --> 00:15:22,699
is yesterday stored where Alex was

00:15:18,920 --> 00:15:25,910
putting the whole emulation in inside

00:15:22,699 --> 00:15:30,019
the guest femur because it's less

00:15:25,910 --> 00:15:32,000
security sensitive target so most of the

00:15:30,019 --> 00:15:37,610
mammal foot wind is actually shared the

00:15:32,000 --> 00:15:40,670
qmo binary from 30 is 12 megabytes big

00:15:37,610 --> 00:15:43,459
it lost 99 shared libraries which is

00:15:40,670 --> 00:15:45,920
another 43 megabytes you can find here

00:15:43,459 --> 00:15:49,189
command to measure it but actually the

00:15:45,920 --> 00:15:51,589
RSS was only 27 megabytes so the sum of

00:15:49,189 --> 00:15:54,970
this is 55 it means that half of the

00:15:51,589 --> 00:15:57,560
code in qmo is never loaded into memory

00:15:54,970 --> 00:15:59,839
and in fact queue is already modular

00:15:57,560 --> 00:16:02,269
there are cubic ends that you can load

00:15:59,839 --> 00:16:05,269
from shared objects and this link to

00:16:02,269 --> 00:16:09,370
some 200 megabytes more go figure what

00:16:05,269 --> 00:16:09,370
self is doing with the 130 megabytes so

00:16:09,730 --> 00:16:16,910
and so if you don't need these modules

00:16:14,360 --> 00:16:21,139
just do not install them at all

00:16:16,910 --> 00:16:24,230
and finally dependencies came become

00:16:21,139 --> 00:16:26,089
figured out we have a total of 150 76

00:16:24,230 --> 00:16:28,610
shared libraries for a non modular build

00:16:26,089 --> 00:16:31,040
but a minimal build will have only 16

00:16:28,610 --> 00:16:34,550
shared libraries with analysis that is

00:16:31,040 --> 00:16:36,470
even reduced from 27 to 16 megabytes and

00:16:34,550 --> 00:16:38,689
these are the libraries that you have

00:16:36,470 --> 00:16:40,279
this is stuff that you are going to have

00:16:38,689 --> 00:16:42,920
running anyway in your system is just

00:16:40,279 --> 00:16:45,350
Lib C the middle one is stuff that you

00:16:42,920 --> 00:16:47,660
probably have in your system picks mine

00:16:45,350 --> 00:16:49,730
is probably bit on the borderline but I

00:16:47,660 --> 00:16:53,509
will see put it in this in this category

00:16:49,730 --> 00:16:56,300
and the things that we mean the weird

00:16:53,509 --> 00:16:58,309
libel is that qmo uses they are so small

00:16:56,300 --> 00:17:00,949
that you might even link them statically

00:16:58,309 --> 00:17:03,529
if you want its second your new mais and

00:17:00,949 --> 00:17:05,630
z lib they probably don't even total up

00:17:03,529 --> 00:17:07,850
one megabyte altogether just link that

00:17:05,630 --> 00:17:11,839
statically if you want to bring the

00:17:07,850 --> 00:17:14,839
number further down and finally another

00:17:11,839 --> 00:17:17,720
important one important one is having

00:17:14,839 --> 00:17:18,380
less bugs to fix having less stuff

00:17:17,720 --> 00:17:22,699
toward it

00:17:18,380 --> 00:17:24,289
having less calls from customers so for

00:17:22,699 --> 00:17:26,089
this again you need to know your

00:17:24,289 --> 00:17:29,419
environment and you and your use case

00:17:26,089 --> 00:17:31,610
your customers may not need to use SD ln

00:17:29,419 --> 00:17:37,250
gtk+ maybe they only use something like

00:17:31,610 --> 00:17:39,230
viewer to show a VNC console maybe your

00:17:37,250 --> 00:17:41,270
customers need a VNC console because

00:17:39,230 --> 00:17:44,120
they are running Windows guests but they

00:17:41,270 --> 00:17:47,539
don't need audio backends and pull so do

00:17:44,120 --> 00:17:51,169
is also a huge amount of shared

00:17:47,539 --> 00:17:53,990
libraries and and it may increase their

00:17:51,169 --> 00:17:56,240
assess increase the startup time and so

00:17:53,990 --> 00:17:59,090
on also which devices will be configured

00:17:56,240 --> 00:18:02,120
in your theater machines and for example

00:17:59,090 --> 00:18:09,049
you may decide to build a custom cue a

00:18:02,120 --> 00:18:11,299
moon that only has the boards and

00:18:09,049 --> 00:18:16,820
devices that you care about let's say

00:18:11,299 --> 00:18:19,480
only q35 and it has only a few devices

00:18:16,820 --> 00:18:23,450
most of them actually shared with other

00:18:19,480 --> 00:18:28,250
targets Soviet or some PCI device and

00:18:23,450 --> 00:18:32,110
the PCI Co scaz device is a CPI but no

00:18:28,250 --> 00:18:35,120
weird emulated devices from the 90s and

00:18:32,110 --> 00:18:40,490
perhaps only a few begins so no spies

00:18:35,120 --> 00:18:42,650
and only BNC no QED and only cue co2 and

00:18:40,490 --> 00:18:44,690
of course how it's always useful to have

00:18:42,650 --> 00:18:47,110
and this will be a smaller qmo that you

00:18:44,690 --> 00:18:49,669
can build to register attacks of face

00:18:47,110 --> 00:18:52,370
how do you do that we've already seen

00:18:49,669 --> 00:18:53,870
configure arguments for most of the band

00:18:52,370 --> 00:18:56,059
they work for most of the backends for

00:18:53,870 --> 00:18:58,789
the accelerator of the targets and also

00:18:56,059 --> 00:19:00,470
some features such as for example block

00:18:58,789 --> 00:19:03,460
device application can also be compelled

00:19:00,470 --> 00:19:05,870
compiled out using configure arguments

00:19:03,460 --> 00:19:08,210
there is also another less known

00:19:05,870 --> 00:19:11,360
features it's called default configs and

00:19:08,210 --> 00:19:13,159
it's where you go and remove boards and

00:19:11,360 --> 00:19:15,230
devices because actually introduced a

00:19:13,159 --> 00:19:18,220
long time ago exactly because rather at

00:19:15,230 --> 00:19:20,900
the same problem of not wanting to ship

00:19:18,220 --> 00:19:24,559
insane and supportable devices to

00:19:20,900 --> 00:19:26,480
customers and we revamped it this year

00:19:24,559 --> 00:19:28,640
with automatic dependencies in a

00:19:26,480 --> 00:19:32,640
conflict like style where you just have

00:19:28,640 --> 00:19:35,310
to say I want various Kazi and it

00:19:32,640 --> 00:19:38,340
bringing by default discussing disk and

00:19:35,310 --> 00:19:44,310
scarcity or emulation for example so

00:19:38,340 --> 00:19:47,100
this is what default config file looks

00:19:44,310 --> 00:19:50,490
like it has first section with commented

00:19:47,100 --> 00:19:53,040
lines and this is where you uncomment

00:19:50,490 --> 00:19:57,750
the lines and disable these optional

00:19:53,040 --> 00:19:59,730
devices and the second part is the

00:19:57,750 --> 00:20:02,430
boards these are by default instead

00:19:59,730 --> 00:20:06,360
enabled and you comment them if you

00:20:02,430 --> 00:20:11,070
don't want a particular board but this

00:20:06,360 --> 00:20:14,150
is just only providing a small part of

00:20:11,070 --> 00:20:17,160
the power of configuring out devices

00:20:14,150 --> 00:20:19,560
what you can do is also configure with

00:20:17,160 --> 00:20:22,590
this option - - without default devices

00:20:19,560 --> 00:20:24,780
and then you get to specify only exactly

00:20:22,590 --> 00:20:27,120
the devices that you want you will get

00:20:24,780 --> 00:20:29,490
the higher dependences of the of those

00:20:27,120 --> 00:20:32,910
devices but you will not get anything

00:20:29,490 --> 00:20:39,420
not default so with the brand-new micro

00:20:32,910 --> 00:20:41,010
vm machine type that was committed to qm

00:20:39,420 --> 00:20:43,560
were like the day before yesterday you

00:20:41,010 --> 00:20:46,560
could have a machine that has eyes a

00:20:43,560 --> 00:20:48,270
serial port and is a watchdog and a

00:20:46,560 --> 00:20:52,920
bunch of detail devices and that's it

00:20:48,270 --> 00:20:56,010
and it will give smaller qmo by now with

00:20:52,920 --> 00:21:00,270
the size that is more or less 40% of a

00:20:56,010 --> 00:21:03,630
full x86 binary and you can get further

00:21:00,270 --> 00:21:06,090
down by disabling features finally then

00:21:03,630 --> 00:21:09,000
very quickly let's talk a bit about

00:21:06,090 --> 00:21:11,640
whether PMO's complexity is essential or

00:21:09,000 --> 00:21:14,370
accidental what does this mean with

00:21:11,640 --> 00:21:16,080
first place essential complexity is the

00:21:14,370 --> 00:21:16,770
property of the problem that you are

00:21:16,080 --> 00:21:18,690
trying to solve

00:21:16,770 --> 00:21:20,760
while accidental complexity is a

00:21:18,690 --> 00:21:23,430
property of the program that solves that

00:21:20,760 --> 00:21:25,440
problem in this particular case and what

00:21:23,430 --> 00:21:29,010
seems accidental complexity to you now

00:21:25,440 --> 00:21:32,400
if you look at qmo code may become

00:21:29,010 --> 00:21:35,070
essential tomorrow you may say that it's

00:21:32,400 --> 00:21:38,850
pointless for queue to support hot-plug

00:21:35,070 --> 00:21:42,000
but maybe tomorrow you encounter a use

00:21:38,850 --> 00:21:44,850
case where hot-plug is just your bread

00:21:42,000 --> 00:21:46,050
and butter or maybe it's just that you

00:21:44,850 --> 00:21:48,120
don't know the parliament

00:21:46,050 --> 00:21:50,940
very well and it's already essential so

00:21:48,120 --> 00:21:57,540
this is certainly accidental complexity

00:21:50,940 --> 00:21:58,950
like it's working around the limitation

00:21:57,540 --> 00:22:01,590
of the programming language that were

00:21:58,950 --> 00:22:05,010
using is accidental complexity it

00:22:01,590 --> 00:22:09,930
happens in C Perl Python rust go

00:22:05,010 --> 00:22:11,930
whatever under your hand this is

00:22:09,930 --> 00:22:14,670
accidental it this is not accidental

00:22:11,930 --> 00:22:17,490
complexity the fact that qmo can run

00:22:14,670 --> 00:22:20,120
more than one hour operation yes there

00:22:17,490 --> 00:22:22,920
are CPU bound workloads where it's

00:22:20,120 --> 00:22:25,920
hardly thing to have a you at all and

00:22:22,920 --> 00:22:27,300
you can live with one eye operation but

00:22:25,920 --> 00:22:29,580
in some cases instead it may be

00:22:27,300 --> 00:22:33,240
something that makes your guests really

00:22:29,580 --> 00:22:34,920
really slow and so the fact that um you

00:22:33,240 --> 00:22:36,870
can do more than one eye operation at

00:22:34,920 --> 00:22:39,000
the same time on a disk in my opinion is

00:22:36,870 --> 00:22:42,780
a sensor complexity being able to

00:22:39,000 --> 00:22:44,220
encrypt the serial port console is also

00:22:42,780 --> 00:22:45,210
essential complexity in my opinion

00:22:44,220 --> 00:22:47,670
hot-plug

00:22:45,210 --> 00:22:49,170
is debatable but for example if you look

00:22:47,670 --> 00:22:50,160
at something like Qatar containers

00:22:49,170 --> 00:22:53,400
hot-plug

00:22:50,160 --> 00:22:56,130
is for better or worse something that

00:22:53,400 --> 00:22:58,770
they have to deal with and you cannot

00:22:56,130 --> 00:23:05,640
get the full Qatar containers feature

00:22:58,770 --> 00:23:07,200
set without having hot-plug support now

00:23:05,640 --> 00:23:11,100
okay the containers may not need live

00:23:07,200 --> 00:23:15,390
migration but live migration is

00:23:11,100 --> 00:23:18,090
certainly a big part of a lot of cloud

00:23:15,390 --> 00:23:19,560
staff and it comes with a big baggage

00:23:18,090 --> 00:23:21,780
because if you want life migrate you

00:23:19,560 --> 00:23:24,060
probably want stable spew models after a

00:23:21,780 --> 00:23:26,160
hardware upgrade or after migrating to a

00:23:24,060 --> 00:23:29,160
different machine and you want stable

00:23:26,160 --> 00:23:30,720
other models in case you have mmm

00:23:29,160 --> 00:23:33,000
upgrades so that you can also use live

00:23:30,720 --> 00:23:36,330
migration to do rolling updates and also

00:23:33,000 --> 00:23:40,020
booting a distribution kernel maybe it's

00:23:36,330 --> 00:23:43,620
a bit debatable whether it's essential

00:23:40,020 --> 00:23:45,780
complexity on the other hand for other

00:23:43,620 --> 00:23:51,690
hypervisor such as fair cracker booting

00:23:45,780 --> 00:23:53,010
it distribution kernel is not something

00:23:51,690 --> 00:23:55,740
that you want they okay with building

00:23:53,010 --> 00:23:57,570
their own kernel fair enough we also now

00:23:55,740 --> 00:23:58,420
with the micro be a machine type of

00:23:57,570 --> 00:24:00,310
something that

00:23:58,420 --> 00:24:03,400
needs especially compiled colonel so

00:24:00,310 --> 00:24:07,120
it's certainly not part of essential

00:24:03,400 --> 00:24:10,000
complexity for all use cases so what can

00:24:07,120 --> 00:24:12,340
we do better we can do multiple split of

00:24:10,000 --> 00:24:14,170
QM which will increase the complexity of

00:24:12,340 --> 00:24:16,180
course but on the other hand will reduce

00:24:14,170 --> 00:24:18,670
the tax of face so if the way that you

00:24:16,180 --> 00:24:22,300
measure size is a tax of face then great

00:24:18,670 --> 00:24:27,040
multiple split is for you if what you

00:24:22,300 --> 00:24:29,320
care about is complexity of the code

00:24:27,040 --> 00:24:31,150
then multiplies the split is something

00:24:29,320 --> 00:24:35,500
that you may not like so again it

00:24:31,150 --> 00:24:38,470
depends on the use case we at least now

00:24:35,500 --> 00:24:40,030
considering the host user as the multi

00:24:38,470 --> 00:24:41,530
possess interface even though there are

00:24:40,030 --> 00:24:46,420
patches on the list for example do

00:24:41,530 --> 00:24:48,550
multi-process QM PCI devices and also

00:24:46,420 --> 00:24:53,680
having an out of process block layer

00:24:48,550 --> 00:24:55,780
will perform will be able to give

00:24:53,680 --> 00:24:58,090
improved performance and final gain

00:24:55,780 --> 00:25:01,240
second filter so input the security in

00:24:58,090 --> 00:25:03,010
multiple access we would like to have

00:25:01,240 --> 00:25:05,200
him even easier configuration click

00:25:03,010 --> 00:25:08,050
config was a big step in that respect

00:25:05,200 --> 00:25:10,300
but we would like users to know exactly

00:25:08,050 --> 00:25:12,880
just by looking at the default config

00:25:10,300 --> 00:25:14,770
file which PCI devices are enabled by

00:25:12,880 --> 00:25:15,580
default and which better devices are

00:25:14,770 --> 00:25:19,060
enabled by default

00:25:15,580 --> 00:25:21,250
not just the onboard devices and also

00:25:19,060 --> 00:25:25,990
something that could replace the

00:25:21,250 --> 00:25:27,910
configure script using text file

00:25:25,990 --> 00:25:31,540
configuration files also for the host

00:25:27,910 --> 00:25:33,550
components and finally better

00:25:31,540 --> 00:25:35,590
documentation is always high in the wish

00:25:33,550 --> 00:25:40,270
list unfortunately not very high in the

00:25:35,590 --> 00:25:42,160
to-do list but but still with gamma 4.0

00:25:40,270 --> 00:25:43,750
we had a national initial port of

00:25:42,160 --> 00:25:46,420
documentation two things which greatly

00:25:43,750 --> 00:25:49,270
improves the usability we are thinking

00:25:46,420 --> 00:25:51,280
of how to reorganize and the manual and

00:25:49,270 --> 00:25:53,470
put all the material there in a way that

00:25:51,280 --> 00:25:54,850
is easier to consume and also document

00:25:53,470 --> 00:25:56,650
the best practice for running human

00:25:54,850 --> 00:25:59,130
securely which includes making a smaller

00:25:56,650 --> 00:26:02,590
QA move on yes because you need it so

00:25:59,130 --> 00:26:04,450
the conclusion is no your use case no

00:26:02,590 --> 00:26:07,870
your customer which is related to no

00:26:04,450 --> 00:26:10,930
your use case and if you have dubs talk

00:26:07,870 --> 00:26:16,210
to developers thank you very much

00:26:10,930 --> 00:26:23,079
[Applause]

00:26:16,210 --> 00:26:23,079

YouTube URL: https://www.youtube.com/watch?v=5TY7m1AneRY


