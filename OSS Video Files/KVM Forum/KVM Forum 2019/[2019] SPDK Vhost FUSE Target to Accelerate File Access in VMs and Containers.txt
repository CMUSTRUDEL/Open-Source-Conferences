Title: [2019] SPDK Vhost FUSE Target to Accelerate File Access in VMs and Containers
Publication date: 2019-11-09
Playlist: KVM Forum 2019
Description: 
	Virtio-fs(https://virtio-fs.gitlab.io/) is proposed recently to provide file system sharing for lightweight VMs and containers workloads, where shared volumes are a requirement.

In this presentation, we propose an SPDK(Storage Performance Development Kit, https://spdk.io) userspace vhost-user-fs solution, which can be used together with QEMU/Kata Container to accelerate virtio-fs. Virtio-fs uses FUSE instead of 9P for communication. We will present this solution in details including the utilization of techniques such as virtio-fs, blobfs (SPDK file system) and the significant performance gain achieved. Blobfs can be built on abstract block device layer in SPDK, which can access local or remote storage services via iSCSI/NVMe/NVMeoF protocols in userspace. Relying on this solution, we are going to build a fast, consistent and secure manner to share directory tree on host to guests.

---

Xiaodong Liu
Intel
Cloud Software Engineer

Xiaodong Liu is a cloud software engineer in Intel and involved in SPDK (storage performance development kit) development work.

Changpeng Liu

Note: We apologize for lower video quality due to technical problems.
Captions: 
	00:00:00,390 --> 00:00:02,750
[Music]

00:00:07,910 --> 00:00:13,670
Iori so today I will introduce

00:00:11,929 --> 00:00:17,070
software's

00:00:13,670 --> 00:00:19,800
accelerator to access the to accelerator

00:00:17,070 --> 00:00:21,869
the Foxes the UVM and the containers

00:00:19,800 --> 00:00:25,560
let's continue the topic of all the

00:00:21,869 --> 00:00:27,840
previous over how ifs so my name is Tran

00:00:25,560 --> 00:00:31,109
neo and I'm a software engineer from

00:00:27,840 --> 00:00:33,840
Intel and now being focused on the open

00:00:31,109 --> 00:00:39,420
source project storage performance the

00:00:33,840 --> 00:00:44,149
WebKit sort has as big in the past five

00:00:39,420 --> 00:00:47,879
years so let's start

00:00:44,149 --> 00:00:51,360
yes today's agenda first I will give an

00:00:47,879 --> 00:00:53,670
introduction to as TV host FS so Stefan

00:00:51,360 --> 00:00:58,829
is in the latter days that what how fast

00:00:53,670 --> 00:01:01,109
D to process the host down into

00:00:58,829 --> 00:01:04,110
processes I all requested from the cast

00:01:01,109 --> 00:01:07,350
in the host side similar with what how I

00:01:04,110 --> 00:01:11,130
first year here we'll name it we host

00:01:07,350 --> 00:01:14,000
the FS so it's the different naming and

00:01:11,130 --> 00:01:17,580
then saying that I will introduce

00:01:14,000 --> 00:01:18,990
without at first with the cutter

00:01:17,580 --> 00:01:21,090
containers and there are some

00:01:18,990 --> 00:01:24,270
limitations with as we will host the

00:01:21,090 --> 00:01:29,509
first target and finally I will give

00:01:24,270 --> 00:01:29,509
some future plans about the what ifs

00:01:32,110 --> 00:01:41,640
so the multi-mission i actually at first

00:01:36,700 --> 00:01:46,270
we are not seeking for a new hotel

00:01:41,640 --> 00:01:48,910
protocol actually we are at first they

00:01:46,270 --> 00:01:51,570
were seen with her name she has the

00:01:48,910 --> 00:01:54,310
first choice and half we are doing some

00:01:51,570 --> 00:01:57,370
investigation we found that the

00:01:54,310 --> 00:02:00,100
committee has started with how fast so

00:01:57,370 --> 00:02:03,430
we changed our mind to switch to the

00:02:00,100 --> 00:02:08,860
with her FS i firstly for this

00:02:03,430 --> 00:02:12,970
application we have used a semi driver

00:02:08,860 --> 00:02:17,400
in the SPD key project and the on top

00:02:12,970 --> 00:02:22,470
how's our mme project driver we have

00:02:17,400 --> 00:02:26,860
blobstore I calculated block a locator

00:02:22,470 --> 00:02:29,830
and on top of the blah blah blah bestow

00:02:26,860 --> 00:02:32,920
we have were absent recently recorded

00:02:29,830 --> 00:02:37,570
blow by FS actually it is only suited

00:02:32,920 --> 00:02:41,350
for the rocks de way so the the

00:02:37,570 --> 00:02:45,010
requirement is there so if we want to

00:02:41,350 --> 00:02:49,840
run some applications as my security be

00:02:45,010 --> 00:02:52,209
in the web we can who can pass it block

00:02:49,840 --> 00:02:55,170
device into the web and then we have a

00:02:52,209 --> 00:03:00,400
matter this per clock device with local

00:02:55,170 --> 00:03:05,920
is 4x f as the file system and what we

00:03:00,400 --> 00:03:08,709
can present foul semantics into the web

00:03:05,920 --> 00:03:11,519
so that's that's the first of the

00:03:08,709 --> 00:03:11,519
motivation

00:03:19,720 --> 00:03:25,350
so currently there are two protocols

00:03:22,060 --> 00:03:28,980
about the file system in the in the

00:03:25,350 --> 00:03:34,210
hosted the first 1990 and as a otherwise

00:03:28,980 --> 00:03:38,410
tariff s so I was to keep this part

00:03:34,210 --> 00:03:40,930
because this is very common so this is

00:03:38,410 --> 00:03:44,830
the existing optional solutions using

00:03:40,930 --> 00:03:50,110
file API see in when when the right part

00:03:44,830 --> 00:03:53,440
is the block device we can present a

00:03:50,110 --> 00:03:55,600
block device into the web we have a host

00:03:53,440 --> 00:03:59,230
a user block driver in the chemo

00:03:55,600 --> 00:04:02,740
actually this was for the right part

00:03:59,230 --> 00:04:05,740
actually we can have very big

00:04:02,740 --> 00:04:08,650
performance numbers has revealed

00:04:05,740 --> 00:04:11,440
mentioned the last yesterday so we can

00:04:08,650 --> 00:04:14,800
can work high proportion of namur

00:04:11,440 --> 00:04:15,670
running the web in the web but for most

00:04:14,800 --> 00:04:20,459
of our users

00:04:15,670 --> 00:04:23,250
they may do not need a block device in

00:04:20,459 --> 00:04:27,940
when they will form a traitor to the

00:04:23,250 --> 00:04:33,400
Yeti for extra fast finally for the real

00:04:27,940 --> 00:04:35,050
usage and the left one is a 9 P so look

00:04:33,400 --> 00:04:38,320
at the two pictures what's the

00:04:35,050 --> 00:04:40,240
difference between that for the most

00:04:38,320 --> 00:04:43,570
important difference between the two

00:04:40,240 --> 00:04:44,590
pictures we can see for the it's EST for

00:04:43,570 --> 00:04:48,820
our system

00:04:44,590 --> 00:04:51,160
the cast has the EST for facet and in

00:04:48,820 --> 00:04:57,730
the cast from a right part and in the

00:04:51,160 --> 00:05:00,060
Left diagram you can see maybe the logic

00:04:57,730 --> 00:05:04,240
model from the cast that will host side

00:05:00,060 --> 00:05:11,590
actually for the most of cases they play

00:05:04,240 --> 00:05:15,340
the same role introduction to the fields

00:05:11,590 --> 00:05:17,680
I think file system is use this is an

00:05:15,340 --> 00:05:20,410
interface for your space programs with

00:05:17,680 --> 00:05:23,560
powder file system to the link kernel so

00:05:20,410 --> 00:05:27,940
think about the the word I've used I

00:05:23,560 --> 00:05:30,840
mean file system in your space so for us

00:05:27,940 --> 00:05:32,750
we can think that we can implement

00:05:30,840 --> 00:05:37,460
totally

00:05:32,750 --> 00:05:43,910
first in my new space not just switch to

00:05:37,460 --> 00:05:47,060
the chrono again so this is a

00:05:43,910 --> 00:05:52,120
compression between the SPD we host a

00:05:47,060 --> 00:05:55,160
fast target and with our fast e the

00:05:52,120 --> 00:05:58,820
actually from the left part from the

00:05:55,160 --> 00:06:02,930
cast and the Kimi part both as pity key

00:05:58,820 --> 00:06:07,670
and what ifs T are the same from the

00:06:02,930 --> 00:06:13,400
right part the top layer is SPD we host

00:06:07,670 --> 00:06:16,370
FS and laura-leigh is watch how FST so

00:06:13,400 --> 00:06:20,060
from the to tag Ram we can see that the

00:06:16,370 --> 00:06:22,930
most the biggest difference between the

00:06:20,060 --> 00:06:26,510
V host FS and the what ifs T is that

00:06:22,930 --> 00:06:29,740
with - t pass through the request the

00:06:26,510 --> 00:06:34,760
center from the where to the local host

00:06:29,740 --> 00:06:38,600
system again it it to the pass through

00:06:34,760 --> 00:06:43,060
and from as the PD part of the owl

00:06:38,600 --> 00:06:47,930
logical process inside SP you space

00:06:43,060 --> 00:06:51,260
process and it will the our request will

00:06:47,930 --> 00:06:56,270
be done inside as we process and for

00:06:51,260 --> 00:06:58,910
this solution actually a speed that has

00:06:56,270 --> 00:07:02,030
some advantages and the distillate is

00:06:58,910 --> 00:07:05,240
compared with what how I firstly the

00:07:02,030 --> 00:07:11,420
first one of course is as Vicki and

00:07:05,240 --> 00:07:13,780
Matias used to Colonel context which by

00:07:11,420 --> 00:07:17,240
providing a us-based file system and

00:07:13,780 --> 00:07:21,290
there are also some difference between

00:07:17,240 --> 00:07:24,740
the house ran module Stefan just mention

00:07:21,290 --> 00:07:29,120
that for the what ifs tease out queue is

00:07:24,740 --> 00:07:32,330
first-rate but we for as we part we use

00:07:29,120 --> 00:07:37,820
one columnist was ready to pull all the

00:07:32,330 --> 00:07:39,830
word cues and the this one did revise we

00:07:37,820 --> 00:07:43,250
will host their first is at a pitch

00:07:39,830 --> 00:07:45,180
Cassie host can be shared for 12 SD

00:07:43,250 --> 00:07:48,810
which is very important the for the

00:07:45,180 --> 00:07:50,759
ninis uses narrows but it's not

00:07:48,810 --> 00:07:55,139
available for us by now

00:07:50,759 --> 00:07:57,990
and of course the biggest advantage

00:07:55,139 --> 00:08:01,340
refers me is that we can easily to add

00:07:57,990 --> 00:08:05,039
some new features in us base because

00:08:01,340 --> 00:08:07,740
let's take the Mme a city as an example

00:08:05,039 --> 00:08:11,449
Mme a city will have some Barracuda

00:08:07,740 --> 00:08:15,720
features such as new spaces and the

00:08:11,449 --> 00:08:19,889
streams and also Mme said so those

00:08:15,720 --> 00:08:22,949
features we can definitely use it in the

00:08:19,889 --> 00:08:24,960
file system it will get us more easier

00:08:22,949 --> 00:08:27,199
to understand that workload from the

00:08:24,960 --> 00:08:27,199
cast

00:08:32,130 --> 00:08:40,890
so this is 1:1 mapping tipo between the

00:08:36,039 --> 00:08:43,300
SPD blob EFS api's and the fuse which is

00:08:40,890 --> 00:08:46,900
by the way also SPE

00:08:43,300 --> 00:08:48,640
ApS are asynchronous so that means all

00:08:46,900 --> 00:08:52,029
the requests the process that you must

00:08:48,640 --> 00:08:55,029
provide a callback and the you will get

00:08:52,029 --> 00:08:58,810
notified get a notification with all the

00:08:55,029 --> 00:09:06,250
requests at a time from the backend as

00:08:58,810 --> 00:09:09,460
big a process and this is the operation

00:09:06,250 --> 00:09:12,990
mapping of the fuse request in the water

00:09:09,460 --> 00:09:17,320
cure actually for this part is the same

00:09:12,990 --> 00:09:19,510
for both what-ifs D and s pv host target

00:09:17,320 --> 00:09:26,680
because this is the protocol T finishing

00:09:19,510 --> 00:09:28,690
and the implementation and this is

00:09:26,680 --> 00:09:32,140
another example for the open and the

00:09:28,690 --> 00:09:35,200
close ap is the open API will help to

00:09:32,140 --> 00:09:39,390
fuse requests in the first one is the

00:09:35,200 --> 00:09:45,190
lookup the otherwise open and

00:09:39,390 --> 00:09:49,450
accordingly there are three VAP eyes to

00:09:45,190 --> 00:09:53,709
address the open request the Sena from

00:09:49,450 --> 00:09:58,990
the cast similar for the clothes I shall

00:09:53,709 --> 00:10:02,740
not go straight this is example for the

00:09:58,990 --> 00:10:05,140
implementation details with read command

00:10:02,740 --> 00:10:08,140
cast will stay in the POSIX reader and

00:10:05,140 --> 00:10:12,339
it will change to the field rate and a

00:10:08,140 --> 00:10:14,680
standard tools what you kill and as we

00:10:12,339 --> 00:10:16,839
will pull this word pew and the process

00:10:14,680 --> 00:10:20,890
and the Senate will be back in the blob

00:10:16,839 --> 00:10:25,320
ifs and finally it will get back from

00:10:20,890 --> 00:10:25,320
the ekend

00:10:28,360 --> 00:10:35,630
so to address the questions are raised

00:10:33,890 --> 00:10:38,960
in the previous slide

00:10:35,630 --> 00:10:45,110
so with this SPD we host our first

00:10:38,960 --> 00:10:51,400
target so we will have rocks TP running

00:10:45,110 --> 00:10:54,770
in the web and it will say wow directory

00:10:51,400 --> 00:10:57,740
in the guest and we understand the

00:10:54,770 --> 00:11:00,320
future read and write command and we'll

00:10:57,740 --> 00:11:08,230
change this command to as be a host

00:11:00,320 --> 00:11:12,950
target this is this is the final process

00:11:08,230 --> 00:11:17,510
for the SPD we host FS so the other part

00:11:12,950 --> 00:11:21,140
is for the container solution so I

00:11:17,510 --> 00:11:24,440
actually we do not mean witness at first

00:11:21,140 --> 00:11:27,800
wit another thing we can run you with

00:11:24,440 --> 00:11:31,760
some container solutions this is but

00:11:27,800 --> 00:11:34,370
finally we if which in the truth AK what

00:11:31,760 --> 00:11:41,360
how fast we found that it can also be

00:11:34,370 --> 00:11:44,300
used in the curriculum so so what how FS

00:11:41,360 --> 00:11:47,180
in the cottage can in a storage so it

00:11:44,300 --> 00:11:51,230
offers local filesystem semantics and

00:11:47,180 --> 00:11:55,790
performance and what has demon will

00:11:51,230 --> 00:11:58,880
handle the VM requests and what OFS

00:11:55,790 --> 00:12:05,780
demon performs the aisle request will

00:11:58,880 --> 00:12:08,240
Faust our system cause so this is a the

00:12:05,780 --> 00:12:11,810
comment a gram from for the what ifs

00:12:08,240 --> 00:12:14,960
deal look at the left part of this

00:12:11,810 --> 00:12:17,920
overlay a fast driver in the host side

00:12:14,960 --> 00:12:21,530
so this is very important for us because

00:12:17,920 --> 00:12:26,650
there is overly a fast driver in the

00:12:21,530 --> 00:12:30,050
host side and I will mention the issue

00:12:26,650 --> 00:12:32,180
for us be a host part because we cannot

00:12:30,050 --> 00:12:34,480
stop all this overlay FS in the host

00:12:32,180 --> 00:12:34,480
side

00:12:36,050 --> 00:12:44,089
so the Challenger for using SP we host

00:12:40,890 --> 00:12:47,130
events in the kulluk cutter containers

00:12:44,089 --> 00:12:49,170
so there is the requirement of the share

00:12:47,130 --> 00:12:52,050
the file system is required for the

00:12:49,170 --> 00:12:55,500
cutter canina for the root offense image

00:12:52,050 --> 00:12:56,180
and this overlay of our system for Canon

00:12:55,500 --> 00:13:01,200
image

00:12:56,180 --> 00:13:04,290
but as men the most important issue for

00:13:01,200 --> 00:13:06,570
SP is that no director view from a

00:13:04,290 --> 00:13:09,450
hostile when using a spear a host FS

00:13:06,570 --> 00:13:12,000
because you cannot use the asked amount

00:13:09,450 --> 00:13:16,880
to list the directories of us in the

00:13:12,000 --> 00:13:20,970
whole side you cannot say that directory

00:13:16,880 --> 00:13:26,580
so for this issue how to use as we host

00:13:20,970 --> 00:13:29,160
FS with cutter containers we how we do

00:13:26,580 --> 00:13:32,850
have some requirement about the route

00:13:29,160 --> 00:13:36,029
EFS use it but we cannot support it for

00:13:32,850 --> 00:13:40,170
now but so so we are children man choose

00:13:36,029 --> 00:13:42,120
deposited volumous so these volumes can

00:13:40,170 --> 00:13:45,440
be used for the share the data between

00:13:42,120 --> 00:13:45,440
different containers

00:13:49,360 --> 00:13:56,360
so this is a speedy will host offense in

00:13:53,060 --> 00:13:58,970
the cotta container storage and the

00:13:56,360 --> 00:14:02,420
users can start as a what how FST to

00:13:58,970 --> 00:14:06,290
study the route FS image and then start

00:14:02,420 --> 00:14:10,580
another process here it is

00:14:06,290 --> 00:14:20,870
as believe a host FS and to provide this

00:14:10,580 --> 00:14:24,380
volume so for this issues again overlay

00:14:20,870 --> 00:14:26,900
FS and maybe some other drivers still

00:14:24,380 --> 00:14:30,230
can be used in the whole society to

00:14:26,900 --> 00:14:33,050
provide a route FS image and for the

00:14:30,230 --> 00:14:36,980
data volume part because the DW is

00:14:33,050 --> 00:14:40,550
persistent to the directory of the

00:14:36,980 --> 00:14:43,640
storage medium so for this part we do

00:14:40,550 --> 00:14:47,030
need a small patch in the cutter

00:14:43,640 --> 00:14:50,030
containers to start a spherical surface

00:14:47,030 --> 00:14:52,240
and to monitor the data volume into the

00:14:50,030 --> 00:14:52,240
web

00:14:59,020 --> 00:15:08,900
so go back to our previous issue so we

00:15:05,690 --> 00:15:11,570
cannot use our ask command in the

00:15:08,900 --> 00:15:15,410
hostile to list the directories and the

00:15:11,570 --> 00:15:21,190
files in the hostile but we do provide a

00:15:15,410 --> 00:15:27,200
few steaming - yes PDK with that demon

00:15:21,190 --> 00:15:30,860
we can see the directory view from the

00:15:27,200 --> 00:15:35,050
whole site to list all the files in a

00:15:30,860 --> 00:15:39,110
created by the web for the data volume

00:15:35,050 --> 00:15:43,640
so that means we can running a few demon

00:15:39,110 --> 00:15:46,910
as we a few stimulus be a host FS you

00:15:43,640 --> 00:15:48,650
know simple app in different process all

00:15:46,910 --> 00:15:57,560
in the same process with different

00:15:48,650 --> 00:16:02,380
threads is post ok so this is the

00:15:57,560 --> 00:16:06,500
summary for the SPV host target share

00:16:02,380 --> 00:16:11,210
serving between dinners come with the

00:16:06,500 --> 00:16:16,870
body and the sharing between antennas in

00:16:11,210 --> 00:16:16,870
different VMs can be supported the tool

00:16:17,140 --> 00:16:29,930
and the serving between containers in

00:16:22,370 --> 00:16:32,330
one way we can support this and there is

00:16:29,930 --> 00:16:35,210
ways you've announced how to share in

00:16:32,330 --> 00:16:39,400
between dinners in different host for

00:16:35,210 --> 00:16:39,400
nowadays it is not stupid

00:16:45,380 --> 00:16:54,230
so as so we'll cool the fandom part as I

00:16:51,170 --> 00:16:57,140
mentioned in the previous slice

00:16:54,230 --> 00:16:59,840
at first the palapa fest is designed for

00:16:57,140 --> 00:17:02,990
the rocks to be only so that means we

00:16:59,840 --> 00:17:09,440
can mr. Potter rocks DP so look hadn't

00:17:02,990 --> 00:17:12,950
lost TVs did dreams actually the the

00:17:09,440 --> 00:17:17,330
streams io from the rock TV is very easy

00:17:12,950 --> 00:17:20,960
because it only thing as a right request

00:17:17,330 --> 00:17:23,900
with a pen right so that means we cannot

00:17:20,960 --> 00:17:26,810
stop or the random right for now but if

00:17:23,900 --> 00:17:30,380
we want to change the blood by fans to

00:17:26,810 --> 00:17:35,510
meet here's a common requirement so we

00:17:30,380 --> 00:17:41,440
may need a run right spot under they the

00:17:35,510 --> 00:17:41,440
other one the other issue is for the

00:17:43,150 --> 00:17:53,540
catch part we have read only catch in

00:17:48,520 --> 00:17:56,920
exist employed by FS but which can use

00:17:53,540 --> 00:18:00,740
that to address the reader head from

00:17:56,920 --> 00:18:04,340
rocks TB but with this sketch we cannot

00:18:00,740 --> 00:18:06,470
enable the random right so if we want to

00:18:04,340 --> 00:18:10,070
enable the run right it means we will

00:18:06,470 --> 00:18:14,960
redesign this sketch module and or we

00:18:10,070 --> 00:18:19,900
can remove this CAD module so so

00:18:14,960 --> 00:18:23,600
actually from this point of view if we

00:18:19,900 --> 00:18:28,250
redesign the pilobolus we may add more

00:18:23,600 --> 00:18:32,540
features in this library and to meet a

00:18:28,250 --> 00:18:36,760
more common requirement so the other

00:18:32,540 --> 00:18:39,650
part is we can integrate with PMT keep

00:18:36,760 --> 00:18:42,800
persistent memory the one kid for the

00:18:39,650 --> 00:18:47,150
metadata management for the common file

00:18:42,800 --> 00:18:49,970
system it means we can use the MVP to

00:18:47,150 --> 00:18:53,220
store the persistence just of the our

00:18:49,970 --> 00:18:56,190
node and leave that it

00:18:53,220 --> 00:19:00,889
livid at it maintained in the SP

00:18:56,190 --> 00:19:05,639
blobstore so this is the work I am

00:19:00,889 --> 00:19:10,529
developing work in progress to design a

00:19:05,639 --> 00:19:16,139
new maybe we will rename it to an MP m

00:19:10,529 --> 00:19:18,299
FS maybe so that's this common

00:19:16,139 --> 00:19:24,979
requirement and the other part is the

00:19:18,299 --> 00:19:28,529
part with first image used with in the

00:19:24,979 --> 00:19:31,349
u.s. baseball system because good

00:19:28,529 --> 00:19:35,580
half-assed image is still very important

00:19:31,349 --> 00:19:39,570
for the continuous scenarios so for this

00:19:35,580 --> 00:19:43,919
part if we want to support this feature

00:19:39,570 --> 00:19:46,649
we must add a snapshots support so for

00:19:43,919 --> 00:19:51,840
this part we have to twice for now so we

00:19:46,649 --> 00:19:55,190
can enable in the block layer or we can

00:19:51,840 --> 00:20:00,049
anybody in this in the file system layer

00:19:55,190 --> 00:20:05,960
but for butter for this part we are

00:20:00,049 --> 00:20:05,960
doing some research for now

00:20:12,150 --> 00:20:19,290
so this is the patch we submitted that

00:20:14,670 --> 00:20:22,110
in our github you can take a look if

00:20:19,290 --> 00:20:25,200
you're interested with this patch of the

00:20:22,110 --> 00:20:28,560
kernel drivers and kimmel drives is

00:20:25,200 --> 00:20:32,490
already there so you do not need the

00:20:28,560 --> 00:20:35,600
actual page to enable this with sp we

00:20:32,490 --> 00:20:35,600
host a first target

00:20:35,720 --> 00:20:39,410
so Q&A

00:20:45,370 --> 00:20:55,360
I so I found the the future items slide

00:20:52,270 --> 00:20:56,740
interesting the idea of using PM DK to

00:20:55,360 --> 00:20:58,900
do stuff because a lot of the existing

00:20:56,740 --> 00:21:01,060
file systems they're not really designed

00:20:58,900 --> 00:21:02,470
for that and things like F sync are very

00:21:01,060 --> 00:21:04,150
slow because you need to put all the

00:21:02,470 --> 00:21:07,690
metadata in place and with p.m. DK you

00:21:04,150 --> 00:21:09,790
can do it very fast and inverted FS is

00:21:07,690 --> 00:21:12,940
Dax what we're doing is we're a mapping

00:21:09,790 --> 00:21:17,170
host memory into the guest so the guest

00:21:12,940 --> 00:21:18,580
has fast access so I wonder can you do

00:21:17,170 --> 00:21:22,570
you think that it might actually be

00:21:18,580 --> 00:21:27,040
possible to map the PM DK or to mark the

00:21:22,570 --> 00:21:29,950
PMM into the guest and then access that

00:21:27,040 --> 00:21:32,200
directly and now it's persistent it's

00:21:29,950 --> 00:21:35,620
not just for for cash do you think there

00:21:32,200 --> 00:21:38,830
are things that can be done there so you

00:21:35,620 --> 00:21:41,080
mean pass through PM DK apart how

00:21:38,830 --> 00:21:43,270
persistent my range was a case that was

00:21:41,080 --> 00:21:46,090
tall the files so instead of

00:21:43,270 --> 00:21:49,720
communicating with SP DK or anything on

00:21:46,090 --> 00:21:53,320
the host side what about just mapping

00:21:49,720 --> 00:21:56,410
that memory that Pima memory into the

00:21:53,320 --> 00:21:58,000
guest and then you could do that you

00:21:56,410 --> 00:22:00,340
could basically go even further than

00:21:58,000 --> 00:22:02,800
Verdi ofs you could bypass even more

00:22:00,340 --> 00:22:06,970
basic I mean I get you a tissue you

00:22:02,800 --> 00:22:08,290
means we can I did some features in the

00:22:06,970 --> 00:22:16,240
what ifs driver

00:22:08,290 --> 00:22:19,210
to enable this feature I think for so

00:22:16,240 --> 00:22:22,510
for this part I we do have some other

00:22:19,210 --> 00:22:25,600
requirements may be the guest client

00:22:22,510 --> 00:22:28,300
maybe is not what high F s so maybe we

00:22:25,600 --> 00:22:33,670
will provide a common library to some

00:22:28,300 --> 00:22:35,830
users Zeke I integrated the SP blah blah

00:22:33,670 --> 00:22:40,620
fest library into their own application

00:22:35,830 --> 00:22:45,120
admission it does not require the guest

00:22:40,620 --> 00:22:49,150
must be with her first client so for us

00:22:45,120 --> 00:22:52,030
I think for the word harvest it may be a

00:22:49,150 --> 00:22:54,190
great idea but for us we will still to

00:22:52,030 --> 00:22:56,830
think about to provide a more common

00:22:54,190 --> 00:22:59,370
libraries to address more requirement

00:22:56,830 --> 00:22:59,370
from Acosta

00:23:10,250 --> 00:23:14,500
there are no what's up I should thank

00:23:12,350 --> 00:23:14,500
you

00:23:15,200 --> 00:23:24,570
[Applause]

00:23:17,350 --> 00:23:24,570

YouTube URL: https://www.youtube.com/watch?v=OQoX4pO5Ddg


