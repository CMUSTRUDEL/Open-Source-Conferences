Title: [2019] Libvirt: Never too Late to Learn New Tricks by Daniel Berrange
Publication date: 2019-11-07
Playlist: KVM Forum 2019
Description: 
	A period of increased disruption has begun in the virtualization
space with new applications such as Kubernetes, KubeVirt and Kata Containers
challenging traditional virtual machine usage paradigms. The libvirt developers have responded with self examination, reconsidering historic decisions, identifying what is required to stay relevant to modern developer & application needs.

The talk will outline the many significant changes and plans to come out of this exercise. Dramatic changes to the build system with the replacement of autotools by a cutting edge, easy to use alternative. The benefits of adoption of the glib2 library to replace current APIs and GNULIB. The potential for using the modern Rust and Golang languages. Modularization of the libvirt daemon and enabling daemon-less embedded use of the KVM driver. A switch from email based development to well known web based tooling.

---

Daniel Berrange
Red hat
Senior Principal Software Engineer

Daniel is a long term contributor in the open source virtualization space working at Red Hat. A lead architect of the libvirt project since its inception, frequent contributor & subsystem maintainer to QEMU and has involved in many other projects including OpenStack, GTK-VNC, libosinfo, Xen. Daniel has given talks related to libvirt and virtualization management technologies at many previous KVM Forum conferences.

Note: We apologize for lower video quality due to technical problems.
Captions: 
	00:00:00,390 --> 00:00:02,750
[Music]

00:00:06,710 --> 00:00:11,670
I'm Daniel boundary those of you who

00:00:10,620 --> 00:00:14,030
know me I've been a long-term

00:00:11,670 --> 00:00:18,140
contributor on the lippert project for

00:00:14,030 --> 00:00:20,660
most of its existence about 14 years now

00:00:18,140 --> 00:00:23,039
and today we're just going to have a

00:00:20,660 --> 00:00:24,510
talk through some of the things that

00:00:23,039 --> 00:00:26,250
have been going on in liber8 in the past

00:00:24,510 --> 00:00:27,930
year and some of the things they're

00:00:26,250 --> 00:00:30,449
gonna even be seeing in liber8 over the

00:00:27,930 --> 00:00:35,010
next year two years and the reasons why

00:00:30,449 --> 00:00:37,170
we're reason why we're doing this now so

00:00:35,010 --> 00:00:39,260
to start off with let's have a quick

00:00:37,170 --> 00:00:42,239
look at a graph of libvirt

00:00:39,260 --> 00:00:43,920
commit history since since day one

00:00:42,239 --> 00:00:47,129
basically it was it was started at the

00:00:43,920 --> 00:00:51,930
end of 2005 and so we've been going

00:00:47,129 --> 00:00:53,489
about 14 years and you can see we've

00:00:51,930 --> 00:00:55,980
kind of in the past 10 years we could

00:00:53,489 --> 00:01:00,449
have got a nice steady state of commits

00:00:55,980 --> 00:01:03,049
per year and I've split it into two two

00:01:00,449 --> 00:01:05,159
groups here there's people who are

00:01:03,049 --> 00:01:07,710
contributors who've been contributing to

00:01:05,159 --> 00:01:09,630
live for more than one year and people

00:01:07,710 --> 00:01:11,610
who are new contributors deliberate in

00:01:09,630 --> 00:01:14,280
in this year so you see we've got a

00:01:11,610 --> 00:01:17,520
fairly steady number of commits from new

00:01:14,280 --> 00:01:20,189
contributors each year which is that's

00:01:17,520 --> 00:01:22,590
that's that's good but then if we look

00:01:20,189 --> 00:01:23,460
at the next next slide a slightly

00:01:22,590 --> 00:01:26,310
different way of looking at the metrics

00:01:23,460 --> 00:01:27,960
is to see how many different authors we

00:01:26,310 --> 00:01:30,869
have committing to live vert each year

00:01:27,960 --> 00:01:33,869
and in this in this graph we can see

00:01:30,869 --> 00:01:35,939
that we have a fairly consistent number

00:01:33,869 --> 00:01:37,710
of long-term maintained long term

00:01:35,939 --> 00:01:40,140
contributors who've been involved in the

00:01:37,710 --> 00:01:42,030
project for more than one year but the

00:01:40,140 --> 00:01:44,340
number of new contributors to the

00:01:42,030 --> 00:01:48,000
project has seen a bit of a decrease in

00:01:44,340 --> 00:01:49,439
the past two years so this is obviously

00:01:48,000 --> 00:01:52,740
this is not good to have a decreasing

00:01:49,439 --> 00:01:54,090
number of new contributors but what's

00:01:52,740 --> 00:01:56,549
interesting is to compare it with the

00:01:54,090 --> 00:01:58,170
previous graph the actual number of

00:01:56,549 --> 00:02:00,450
commits from new contributors is staying

00:01:58,170 --> 00:02:01,740
the same so what this means is that the

00:02:00,450 --> 00:02:04,409
new contributors that are coming to the

00:02:01,740 --> 00:02:06,210
project are writing more code per person

00:02:04,409 --> 00:02:08,970
than the than we were seeing in the past

00:02:06,210 --> 00:02:11,690
there's there's there's good and bad bad

00:02:08,970 --> 00:02:11,690
aspects to that

00:02:12,730 --> 00:02:18,130
part of part part of the reason for part

00:02:17,060 --> 00:02:21,080
of the reason we think there might be a

00:02:18,130 --> 00:02:22,580
decrease in new contributors is that the

00:02:21,080 --> 00:02:23,840
virtualization world is changing a lot

00:02:22,580 --> 00:02:26,030
over the past few years

00:02:23,840 --> 00:02:29,480
containers are getting a lot of interest

00:02:26,030 --> 00:02:31,610
and there's new ways of using KVM

00:02:29,480 --> 00:02:36,380
virtualization & Liber that hasn't

00:02:31,610 --> 00:02:38,030
necessarily been having necessarily had

00:02:36,380 --> 00:02:42,350
the right feature set for these new use

00:02:38,030 --> 00:02:45,470
cases for KVM so we've had a fairly

00:02:42,350 --> 00:02:47,180
stable architecture for the past 14

00:02:45,470 --> 00:02:50,739
years where the monolithic libvirt

00:02:47,180 --> 00:02:52,790
daemon our approaches to handling memory

00:02:50,739 --> 00:02:56,000
allocation are approaches the platform

00:02:52,790 --> 00:02:58,010
portability with new Lib we've done a

00:02:56,000 --> 00:03:00,170
lot of refactoring over that time but

00:02:58,010 --> 00:03:03,200
the refactoring has been called

00:03:00,170 --> 00:03:05,239
evolutionary so it's been getting rid of

00:03:03,200 --> 00:03:07,819
some technical debt but nothing was

00:03:05,239 --> 00:03:09,440
really a tackling the some of the core

00:03:07,819 --> 00:03:14,840
architectural decisions in the liver

00:03:09,440 --> 00:03:16,459
from the early days so we've been we've

00:03:14,840 --> 00:03:19,130
been we've been very much focused on

00:03:16,459 --> 00:03:21,530
data center verts cloud vert and desktop

00:03:19,130 --> 00:03:25,010
vert but you will have been hearing a

00:03:21,530 --> 00:03:28,060
lot about new ways of using KVM such as

00:03:25,010 --> 00:03:30,470
cata containers where KVM is used as the

00:03:28,060 --> 00:03:32,840
containment technology for for your

00:03:30,470 --> 00:03:37,040
container applications you've got cube

00:03:32,840 --> 00:03:39,920
vert where KVM is being run inside a

00:03:37,040 --> 00:03:41,600
container so that you can integrate the

00:03:39,920 --> 00:03:44,299
management of VMs with the management of

00:03:41,600 --> 00:03:46,370
containers in kubernetes and then you've

00:03:44,299 --> 00:03:49,670
got other things like micro containers

00:03:46,370 --> 00:03:53,299
where you have projects like firecracker

00:03:49,670 --> 00:03:56,780
using a VM for running small function

00:03:53,299 --> 00:03:58,880
functional programs so there's those

00:03:56,780 --> 00:04:01,010
kind of use cases that are pushing

00:03:58,880 --> 00:04:02,450
pushing a VM in new directions and

00:04:01,010 --> 00:04:05,690
lip-read hasn't necessarily been

00:04:02,450 --> 00:04:06,980
well-suited to these new directions so

00:04:05,690 --> 00:04:09,200
we've been thinking a bit about what we

00:04:06,980 --> 00:04:11,359
can do to make liver more suitable for

00:04:09,200 --> 00:04:15,370
these these new technologies and new

00:04:11,359 --> 00:04:15,370
uses new usage of KVM

00:04:16,690 --> 00:04:21,010
the key the key theme though is that

00:04:18,670 --> 00:04:23,230
Lippert needs to be sustainable over the

00:04:21,010 --> 00:04:25,300
long term and this this means two things

00:04:23,230 --> 00:04:27,610
we've got to be we've got to be able to

00:04:25,300 --> 00:04:28,810
attract contributors to the project so

00:04:27,610 --> 00:04:32,800
they've got to have interesting things

00:04:28,810 --> 00:04:36,070
to work on and challenging things to

00:04:32,800 --> 00:04:37,540
work on so they feel satisfied in doing

00:04:36,070 --> 00:04:40,660
something good for the lippert project

00:04:37,540 --> 00:04:42,250
but at the same time Lippert has to be

00:04:40,660 --> 00:04:43,960
attractive for application developers

00:04:42,250 --> 00:04:46,360
who are building new technologies with

00:04:43,960 --> 00:04:49,570
KVM and qmu or any of the other

00:04:46,360 --> 00:04:51,880
platforms that live their supports so

00:04:49,570 --> 00:04:55,840
there's this kind of - two things we

00:04:51,880 --> 00:04:57,490
need to think about here so this this

00:04:55,840 --> 00:04:59,770
talk I'm going to focus a lot on things

00:04:57,490 --> 00:05:01,810
we're doing to make live more attractive

00:04:59,770 --> 00:05:03,490
for contributors because that's where

00:05:01,810 --> 00:05:06,700
we've we've spent a lot of time in the

00:05:03,490 --> 00:05:09,100
past year a lot of thought about what

00:05:06,700 --> 00:05:10,870
we're gonna do in the next year I'll

00:05:09,100 --> 00:05:12,820
also mention a few changes we're making

00:05:10,870 --> 00:05:15,580
to make it more interesting for app

00:05:12,820 --> 00:05:21,220
developers but that's more of a we still

00:05:15,580 --> 00:05:22,360
need more thinking in that area so over

00:05:21,220 --> 00:05:24,370
the next year we'll be thinking more

00:05:22,360 --> 00:05:28,380
about what we can do for developers to

00:05:24,370 --> 00:05:30,850
make a little more more attractive

00:05:28,380 --> 00:05:32,080
before contributors the key the key the

00:05:30,850 --> 00:05:34,390
key goal here is that we want

00:05:32,080 --> 00:05:36,210
contributors to spend less time on the

00:05:34,390 --> 00:05:38,410
kind of tedious grunt work and more time

00:05:36,210 --> 00:05:44,770
working on features that actually matter

00:05:38,410 --> 00:05:47,530
for virtualization so the big thing

00:05:44,770 --> 00:05:50,650
that's occupied my personal time over

00:05:47,530 --> 00:05:53,950
the last year has been tackling the

00:05:50,650 --> 00:05:55,960
libvirt demon architecture those of you

00:05:53,950 --> 00:05:57,910
who are familiar with libvirt war will

00:05:55,960 --> 00:06:01,690
know that we have traditionally had a

00:05:57,910 --> 00:06:04,630
single Liberty daemon which has run all

00:06:01,690 --> 00:06:08,830
of the limo driver functionality in in

00:06:04,630 --> 00:06:10,540
one monolithic process one of the one of

00:06:08,830 --> 00:06:12,430
the challenges here is that if you have

00:06:10,540 --> 00:06:14,290
one misbehaving piece of functionality

00:06:12,430 --> 00:06:16,000
in the daemon it affects the entire

00:06:14,290 --> 00:06:17,980
daemon so if you have something go wrong

00:06:16,000 --> 00:06:20,020
in the storage code that affects your

00:06:17,980 --> 00:06:24,250
management of the qmu virtual machines

00:06:20,020 --> 00:06:25,990
and vice versa it's also very

00:06:24,250 --> 00:06:27,850
challenging to provide a meaningful

00:06:25,990 --> 00:06:29,530
security isolation for the libvirt

00:06:27,850 --> 00:06:31,870
daemon because the range of

00:06:29,530 --> 00:06:35,400
functionality that it needs

00:06:31,870 --> 00:06:37,540
expose gives it privileges or gives it

00:06:35,400 --> 00:06:38,680
means that it has it effectively has

00:06:37,540 --> 00:06:41,140
privileges that are equivalent to

00:06:38,680 --> 00:06:43,840
running as routes or equipment to having

00:06:41,140 --> 00:06:46,450
a root shell so it's you can't really

00:06:43,840 --> 00:06:51,880
write a useful SC low SELinux policy

00:06:46,450 --> 00:06:53,590
around that to confine the live demon it

00:06:51,880 --> 00:06:55,960
also does it also does lots of other

00:06:53,590 --> 00:06:58,210
things like one monkey example is it it

00:06:55,960 --> 00:07:04,120
provides the remote IP access to the

00:06:58,210 --> 00:07:06,010
Liberty API that was a convenient way to

00:07:04,120 --> 00:07:07,960
do it but it's not necessarily the best

00:07:06,010 --> 00:07:11,830
way to do it from from a security point

00:07:07,960 --> 00:07:14,170
of view we have the the remote the

00:07:11,830 --> 00:07:17,470
remote RPC interface exposed directly to

00:07:14,170 --> 00:07:20,350
the IP sockets and as I mentioned the

00:07:17,470 --> 00:07:22,390
live demons functionality as equivalent

00:07:20,350 --> 00:07:24,370
to running a root shell so you've got a

00:07:22,390 --> 00:07:28,660
very direct attack surface that if

00:07:24,370 --> 00:07:31,030
you're exposing it over IP so we've

00:07:28,660 --> 00:07:34,540
we've we split up the live demon into

00:07:31,030 --> 00:07:37,960
lots of smaller demons basically one

00:07:34,540 --> 00:07:41,140
demon per functional area in libvirt so

00:07:37,960 --> 00:07:44,140
we've got a Q mu demon a zen demon a

00:07:41,140 --> 00:07:48,160
network demon a firewall demons and

00:07:44,140 --> 00:07:50,650
several others we've also got a separate

00:07:48,160 --> 00:07:53,170
thing called the the lippert proxy demon

00:07:50,650 --> 00:07:55,900
and this is this is responsible for

00:07:53,170 --> 00:07:57,520
providing remote IP based access to the

00:07:55,900 --> 00:08:01,360
Liberty API so it's a completely

00:07:57,520 --> 00:08:03,840
separate process over the network and

00:08:01,360 --> 00:08:08,020
then proxies through to the appropriate

00:08:03,840 --> 00:08:10,360
modular daemon although all of this code

00:08:08,020 --> 00:08:11,860
is committed to live version and in the

00:08:10,360 --> 00:08:15,040
most recent release we've not actually

00:08:11,860 --> 00:08:16,960
activated it by default so you'll you'll

00:08:15,040 --> 00:08:18,660
still see the monolithic libvirt demon

00:08:16,960 --> 00:08:21,730
if you use it today in s you've taken

00:08:18,660 --> 00:08:26,170
specific steps to opt in to the module

00:08:21,730 --> 00:08:27,700
daemons we think we'll probably will

00:08:26,170 --> 00:08:29,950
pretty switch over to using the modular

00:08:27,700 --> 00:08:33,520
demons by defaults in the in the early

00:08:29,950 --> 00:08:34,900
part of next year from an application

00:08:33,520 --> 00:08:36,460
developers point of view this should be

00:08:34,900 --> 00:08:38,050
completely transparent there's no

00:08:36,460 --> 00:08:41,469
there's no change in the API is that

00:08:38,050 --> 00:08:43,030
we're exposing or the only the only

00:08:41,469 --> 00:08:44,990
place where it will impact you is if

00:08:43,030 --> 00:08:47,990
you've got deployment or can

00:08:44,990 --> 00:08:50,830
if you've got something that's building

00:08:47,990 --> 00:08:53,810
a container image containing libvirt

00:08:50,830 --> 00:08:56,360
you'll want change your container image

00:08:53,810 --> 00:08:59,570
recipe to run a different demon or a set

00:08:56,360 --> 00:09:01,390
of demons if you've got ansible or

00:08:59,570 --> 00:09:03,920
puppet scripts for configuring libvirt

00:09:01,390 --> 00:09:06,110
you might need to make them poke at

00:09:03,920 --> 00:09:09,260
different configuration files than you

00:09:06,110 --> 00:09:11,510
would have played in the past so the

00:09:09,260 --> 00:09:13,700
application API is unchanged but there

00:09:11,510 --> 00:09:20,840
are still some still some impacts on the

00:09:13,700 --> 00:09:23,930
deployment level the next fairly recent

00:09:20,840 --> 00:09:27,610
change that we've done is is in our

00:09:23,930 --> 00:09:30,500
approach to handling memory allocation

00:09:27,610 --> 00:09:32,870
we've traditionally taken the approach

00:09:30,500 --> 00:09:35,450
of attempting to catch all errors from

00:09:32,870 --> 00:09:39,200
from any any API call we make and that

00:09:35,450 --> 00:09:41,510
includes memory allocation errors so we

00:09:39,200 --> 00:09:44,090
attempted we attempted to catch today

00:09:41,510 --> 00:09:48,890
over the Eno mem case when when the OS

00:09:44,090 --> 00:09:50,450
runs out of memory but in practice most

00:09:48,890 --> 00:09:52,790
of you know that Linux doesn't really

00:09:50,450 --> 00:09:55,070
ever return an e no man from a Manticore

00:09:52,790 --> 00:09:56,780
because it's it over commits and if it

00:09:55,070 --> 00:09:59,180
starts running low on memory then I'll

00:09:56,780 --> 00:10:03,080
just set the oom killer out and reap

00:09:59,180 --> 00:10:04,610
some poor unfortunate process so we get

00:10:03,080 --> 00:10:06,740
a lot of complexity in the code from

00:10:04,610 --> 00:10:08,600
attempting to handle memory failures

00:10:06,740 --> 00:10:10,790
which will almost never happen in

00:10:08,600 --> 00:10:17,630
practice on Linux other OSS are

00:10:10,790 --> 00:10:19,370
different but even considering that it's

00:10:17,630 --> 00:10:22,370
difficult to test this kind of memory

00:10:19,370 --> 00:10:23,510
allocation failure handling there's a

00:10:22,370 --> 00:10:26,510
lot of there's a lot of different code

00:10:23,510 --> 00:10:27,980
paths there and we have done work in the

00:10:26,510 --> 00:10:30,680
test suite so that we can simulate

00:10:27,980 --> 00:10:32,990
memory allocation failures and when we

00:10:30,680 --> 00:10:35,780
do that we detect quite a significant

00:10:32,990 --> 00:10:37,610
number of bugs in the clean up paths and

00:10:35,780 --> 00:10:40,190
given that the test suite only handles

00:10:37,610 --> 00:10:42,260
this much code out of this much total

00:10:40,190 --> 00:10:43,940
we've got we don't really have high

00:10:42,260 --> 00:10:45,440
confidence so the code base as a whole

00:10:43,940 --> 00:10:48,560
will correctly handle out of memory

00:10:45,440 --> 00:10:50,180
failures so we we can't really deliver

00:10:48,560 --> 00:10:52,280
on what we were promising there so to

00:10:50,180 --> 00:10:54,680
cut a long story short we basically

00:10:52,280 --> 00:10:56,690
decided the best thing to do is just to

00:10:54,680 --> 00:10:58,910
abort on it on out of memory failures

00:10:56,690 --> 00:11:01,760
and then gracefully handle

00:10:58,910 --> 00:11:02,780
restarting of the liver daemon and this

00:11:01,760 --> 00:11:04,430
is good because we need to handle

00:11:02,780 --> 00:11:05,960
graceful restarting of the liver do you

00:11:04,430 --> 00:11:08,330
in any way so that we can deal with

00:11:05,960 --> 00:11:11,360
software upgrades that kind of moves

00:11:08,330 --> 00:11:14,120
moves both scenarios onto the same well

00:11:11,360 --> 00:11:16,400
tested Co path and reduces that

00:11:14,120 --> 00:11:18,950
ultimately reduces the burden on the

00:11:16,400 --> 00:11:21,260
liver maintainer so that they can spend

00:11:18,950 --> 00:11:23,660
less time worrying about complex code

00:11:21,260 --> 00:11:30,860
cleanup paths the more time just working

00:11:23,660 --> 00:11:38,050
on the features that matter closely

00:11:30,860 --> 00:11:40,610
related to that closely related to that

00:11:38,050 --> 00:11:43,250
for for a few years now Lippert as

00:11:40,610 --> 00:11:46,880
mandated the use of either GCC or si

00:11:43,250 --> 00:11:49,640
Lang as the compiler those are available

00:11:46,880 --> 00:11:55,370
on basically every operating system that

00:11:49,640 --> 00:11:58,220
matters to libvirt MOC um you today so

00:11:55,370 --> 00:12:00,590
with that in mind we we have we have

00:11:58,220 --> 00:12:03,380
some freedom to make use of extensions

00:12:00,590 --> 00:12:06,590
to the C language which are supported by

00:12:03,380 --> 00:12:09,320
GCC and si Lang and the most the most

00:12:06,590 --> 00:12:12,710
interesting extension that we see there

00:12:09,320 --> 00:12:16,220
is the ability to do automatic cleanup

00:12:12,710 --> 00:12:20,720
of ave allocated memory so there's a

00:12:16,220 --> 00:12:23,270
fairly ugly syntax for annotating a

00:12:20,720 --> 00:12:24,740
variable declaration to say that when

00:12:23,270 --> 00:12:28,640
this variable goes out of scope

00:12:24,740 --> 00:12:30,350
automatically run this function and the

00:12:28,640 --> 00:12:32,570
classic reason for running a function is

00:12:30,350 --> 00:12:37,360
to just call the free API to reduce

00:12:32,570 --> 00:12:41,210
reduce to to release a block of memory

00:12:37,360 --> 00:12:43,520
so this is this is good because it's it

00:12:41,210 --> 00:12:46,730
eliminates a whole bunch of code paths

00:12:43,520 --> 00:12:48,560
we don't have to we don't have to have a

00:12:46,730 --> 00:12:50,090
whole bunch of go-to jumps to our clean

00:12:48,560 --> 00:12:52,310
up block at the end to make sure that

00:12:50,090 --> 00:12:54,590
memory is always freed on the right in

00:12:52,310 --> 00:12:57,590
the right place so we got a much a much

00:12:54,590 --> 00:13:00,320
simpler flow flow through the code and

00:12:57,590 --> 00:13:01,970
in doing these conversions we've found a

00:13:00,320 --> 00:13:05,930
number of cases where we fixed memory

00:13:01,970 --> 00:13:07,550
leaks by doing this so it's overall it's

00:13:05,930 --> 00:13:11,500
a really it's a really big win for code

00:13:07,550 --> 00:13:11,500
complexity and reliability of the system

00:13:12,510 --> 00:13:18,310
and it's not just it's not just useful

00:13:15,430 --> 00:13:21,490
for releasing memory it can also be used

00:13:18,310 --> 00:13:24,040
for closing file handles it can be used

00:13:21,490 --> 00:13:26,949
for releasing reference counts that are

00:13:24,040 --> 00:13:30,550
held on objects or unlocking mutex as

00:13:26,949 --> 00:13:32,470
you might you might hold a whole a whole

00:13:30,550 --> 00:13:36,070
bunch of potential use cases all of

00:13:32,470 --> 00:13:38,079
which serve to simplify the code improve

00:13:36,070 --> 00:13:41,860
its reliability and reduce the burden on

00:13:38,079 --> 00:13:45,070
the maintainer x' and q mu has actually

00:13:41,860 --> 00:13:46,779
adopted the same usage very recently for

00:13:45,070 --> 00:13:58,389
the for this exactly the same reasons as

00:13:46,779 --> 00:13:59,860
this looking looking at looking at the

00:13:58,389 --> 00:14:02,829
way Lippert is written historically

00:13:59,860 --> 00:14:05,889
we've kind of we've targeted the fairly

00:14:02,829 --> 00:14:08,680
low level POSIX API in general this is

00:14:05,889 --> 00:14:10,930
this is a standard in some sense but in

00:14:08,680 --> 00:14:12,370
practice there was a lot of optional

00:14:10,930 --> 00:14:13,570
functionality in the positive expect

00:14:12,370 --> 00:14:16,839
there's a lot of stuff is undocumented

00:14:13,570 --> 00:14:19,360
behavior a lot of operating systems

00:14:16,839 --> 00:14:22,660
don't follow the POSIX standard very

00:14:19,360 --> 00:14:25,529
well so it's not particularly there's a

00:14:22,660 --> 00:14:28,930
particularly attractive API to target so

00:14:25,529 --> 00:14:31,029
we've used the new Lib project to paper

00:14:28,930 --> 00:14:32,500
over some of these differences or paper

00:14:31,029 --> 00:14:35,769
over some of the cracks between the

00:14:32,500 --> 00:14:37,510
different operating systems this was

00:14:35,769 --> 00:14:38,889
particularly good for Windows but

00:14:37,510 --> 00:14:39,690
there's there's a limit to how far it

00:14:38,889 --> 00:14:42,670
can go

00:14:39,690 --> 00:14:44,170
it's some things are just too different

00:14:42,670 --> 00:14:46,300
between Windows and UNIX operating

00:14:44,170 --> 00:14:49,630
systems for new loop to do it good job

00:14:46,300 --> 00:14:51,399
that so liberal Lippert has also added a

00:14:49,630 --> 00:14:53,740
bunch of its own internal high-level API

00:14:51,399 --> 00:14:58,449
is for for dealing with things like

00:14:53,740 --> 00:14:59,800
sockets and main event loops and all the

00:14:58,449 --> 00:15:02,589
other kind of things you would typically

00:14:59,800 --> 00:15:05,290
see in a standard library for for a

00:15:02,589 --> 00:15:07,240
language the C C really suffers from not

00:15:05,290 --> 00:15:10,240
having a higher-level standard library

00:15:07,240 --> 00:15:11,889
that is used everywhere that you cannot

00:15:10,240 --> 00:15:15,579
see in in almost every other modern

00:15:11,889 --> 00:15:18,640
language so results of a lot of a lot of

00:15:15,579 --> 00:15:20,470
wheel reinvention in in applications

00:15:18,640 --> 00:15:23,950
that are written in C or in libraries

00:15:20,470 --> 00:15:26,690
that are targeting C

00:15:23,950 --> 00:15:30,650
so with that in mind we we decided it

00:15:26,690 --> 00:15:33,500
was it was kind of overdue to try and

00:15:30,650 --> 00:15:36,170
reuse some existing solutions out here

00:15:33,500 --> 00:15:39,890
and G Lib is a library that's been used

00:15:36,170 --> 00:15:43,060
for qmu for quite a few years now so

00:15:39,890 --> 00:15:45,380
this is attractive to live vert because

00:15:43,060 --> 00:15:48,080
we're where possible we'd like to have

00:15:45,380 --> 00:15:50,180
kind of alignment on technical technical

00:15:48,080 --> 00:15:52,910
decisions between Q mu and libvirt so

00:15:50,180 --> 00:15:53,870
that's some are contributing to Q mu if

00:15:52,910 --> 00:15:55,730
they come to live where they have

00:15:53,870 --> 00:15:58,040
familiarity with the libtech code and

00:15:55,730 --> 00:15:59,990
the libraries it uses so so picking G

00:15:58,040 --> 00:16:01,850
lubbers is a really natural choice for

00:15:59,990 --> 00:16:05,270
Lewbert because it just aligns well with

00:16:01,850 --> 00:16:07,520
Q mu we've previously the previously the

00:16:05,270 --> 00:16:09,770
only real real reason we avoided Sheila

00:16:07,520 --> 00:16:11,630
was because it aborts on on out of

00:16:09,770 --> 00:16:13,340
memory conditions but since we decided

00:16:11,630 --> 00:16:17,720
that's okay for libvirt that's no longer

00:16:13,340 --> 00:16:19,580
a blocker and so this is this is

00:16:17,720 --> 00:16:22,700
something that was just adopted in

00:16:19,580 --> 00:16:25,010
Liberty in the past past in the past

00:16:22,700 --> 00:16:27,800
month and so we're going through a

00:16:25,010 --> 00:16:29,870
period of changing over a lot of

00:16:27,800 --> 00:16:32,000
existing lip code to use the G live API

00:16:29,870 --> 00:16:34,640
is discarding live codes we no longer

00:16:32,000 --> 00:16:40,250
need there's going to be an ongoing

00:16:34,640 --> 00:16:41,960
thing over over year to years the same

00:16:40,250 --> 00:16:43,730
time as were adopting Sheila we've got

00:16:41,960 --> 00:16:45,440
to do useful of work on things that

00:16:43,730 --> 00:16:47,360
matter to applications so we can't just

00:16:45,440 --> 00:16:50,030
spend a whole time rewriting stuff for

00:16:47,360 --> 00:16:52,670
no functional gain from application

00:16:50,030 --> 00:16:54,380
point of view well over the long term

00:16:52,670 --> 00:16:57,140
that will give us more more time to work

00:16:54,380 --> 00:16:59,780
on interesting their features because we

00:16:57,140 --> 00:17:04,330
have less less time worrying about

00:16:59,780 --> 00:17:04,330
platform portability problems

00:17:05,569 --> 00:17:12,739
next I want to talk about programming

00:17:08,479 --> 00:17:14,389
languages libvirt is written in C but if

00:17:12,739 --> 00:17:15,769
you look at the lippert code base you

00:17:14,389 --> 00:17:18,619
find well hey there's all these other

00:17:15,769 --> 00:17:20,689
languages in the code we've got Python

00:17:18,619 --> 00:17:22,039
Perl shell I mean how many scripting

00:17:20,689 --> 00:17:26,929
languages do you really need in one

00:17:22,039 --> 00:17:29,330
project so we kind of we want to reduce

00:17:26,929 --> 00:17:31,369
the burden on contributors if you come

00:17:29,330 --> 00:17:33,830
to glib now you have to have you know

00:17:31,369 --> 00:17:35,749
certain certain types of problems you

00:17:33,830 --> 00:17:37,100
need to have knowledge of a really large

00:17:35,749 --> 00:17:38,629
number of different languages and this

00:17:37,100 --> 00:17:43,450
is not very good for new contributors so

00:17:38,629 --> 00:17:47,119
we want to try and boil it down to one

00:17:43,450 --> 00:17:50,090
one language for each kind of each kind

00:17:47,119 --> 00:17:51,950
of logical job so so if we need shell

00:17:50,090 --> 00:17:53,779
scripting in the build system we want to

00:17:51,950 --> 00:17:57,169
standardize on using Python for that and

00:17:53,779 --> 00:17:59,090
not using shell and Perl Python has

00:17:57,169 --> 00:18:02,749
better familiarity around contributors

00:17:59,090 --> 00:18:05,179
that we see for the build system we're

00:18:02,749 --> 00:18:06,470
using Auto conf an auto auto make and

00:18:05,179 --> 00:18:08,809
that that involves you having to know

00:18:06,470 --> 00:18:10,220
four or five different languages some of

00:18:08,809 --> 00:18:14,570
which are really quite horrific if

00:18:10,220 --> 00:18:16,700
you've ever used em for for example for

00:18:14,570 --> 00:18:22,149
documentation we use mixture of HTML

00:18:16,700 --> 00:18:24,619
markdown echo cell qmu i started using

00:18:22,149 --> 00:18:26,119
rst for its documentation and so that's

00:18:24,619 --> 00:18:28,519
kind of a natural choice for libvirt so

00:18:26,119 --> 00:18:30,649
we get alignment there an RSC is also a

00:18:28,519 --> 00:18:34,249
natural choice for Python developers so

00:18:30,649 --> 00:18:37,220
it kind of kind of all open the lines in

00:18:34,249 --> 00:18:38,419
that way so you'll see it you'll see

00:18:37,220 --> 00:18:40,669
over the time we kind of we want to

00:18:38,419 --> 00:18:43,419
consolidate on a on a smaller number of

00:18:40,669 --> 00:18:47,710
languages that are that are chosen to be

00:18:43,419 --> 00:18:47,710
chosen to be friendly to contributors

00:18:48,220 --> 00:18:51,739
this is this is one of the one of the

00:18:50,570 --> 00:18:54,679
features that's really targeting

00:18:51,739 --> 00:18:57,679
application developers the lippert

00:18:54,679 --> 00:18:59,659
design has kind of targeted the kind of

00:18:57,679 --> 00:19:03,200
traditional use cases we have data sent

00:18:59,659 --> 00:19:04,609
over to a cloud vert desktop vote where

00:19:03,200 --> 00:19:06,109
you just want to manage a list of VMs

00:19:04,609 --> 00:19:08,299
you're running some operating systems in

00:19:06,109 --> 00:19:09,979
them but this whole range of use cases

00:19:08,299 --> 00:19:12,519
where you're really using virtualization

00:19:09,979 --> 00:19:14,720
as an as an embedded service technology

00:19:12,519 --> 00:19:17,899
lived guest FS has been around for a

00:19:14,720 --> 00:19:19,309
very long time doing this it uses

00:19:17,899 --> 00:19:22,749
libvirt successfully

00:19:19,309 --> 00:19:25,519
it's it also hits some problems where

00:19:22,749 --> 00:19:29,809
libcast FSS usage interferes with what

00:19:25,519 --> 00:19:31,309
the the OpenStack or over to do so over

00:19:29,809 --> 00:19:34,070
to OpenStack have to explicitly

00:19:31,309 --> 00:19:36,230
explicitly ignore VMs created by Alypius

00:19:34,070 --> 00:19:37,850
de fierceness it's not ideal so we all

00:19:36,230 --> 00:19:39,950
know interview introduced a new way of

00:19:37,850 --> 00:19:42,379
using Lib verbs which we're calling the

00:19:39,950 --> 00:19:44,509
embedded driver and in this case the

00:19:42,379 --> 00:19:46,460
drug the qmu driver code from libvirt

00:19:44,509 --> 00:19:50,690
runs in your own application process

00:19:46,460 --> 00:19:52,730
there's no separate daemon so so your

00:19:50,690 --> 00:19:55,700
usage of qmu is invisible to other

00:19:52,730 --> 00:19:57,710
applications on the host it does mean

00:19:55,700 --> 00:19:59,360
that you can't use tools like varus H

00:19:57,710 --> 00:20:01,039
for interacting with it but if you're

00:19:59,360 --> 00:20:04,669
using vm's in an embedded scenario that

00:20:01,039 --> 00:20:05,899
doesn't really matter so much and all

00:20:04,669 --> 00:20:08,899
the states related to this embedded

00:20:05,899 --> 00:20:12,139
driver is isolated in your own private

00:20:08,899 --> 00:20:13,249
directory subtree so it's it's we think

00:20:12,139 --> 00:20:15,080
that we think this could be a new

00:20:13,249 --> 00:20:23,149
interesting interesting way of using

00:20:15,080 --> 00:20:24,980
libvirt for some some applications going

00:20:23,149 --> 00:20:27,710
back to the topic of programming

00:20:24,980 --> 00:20:29,269
languages there was there was a there

00:20:27,710 --> 00:20:30,980
was a talk by Microsoft at the start of

00:20:29,269 --> 00:20:33,110
this year and and some blog posts they

00:20:30,980 --> 00:20:35,779
put out looking at looking at their

00:20:33,110 --> 00:20:37,129
security vulnerabilities and analyzing

00:20:35,779 --> 00:20:39,019
the vulnerability safes they've seen

00:20:37,129 --> 00:20:41,860
approximately 70% of all of their

00:20:39,019 --> 00:20:45,139
security vulnerabilities are directly

00:20:41,860 --> 00:20:47,899
memory safety errors so heap corruption

00:20:45,139 --> 00:20:49,549
stack for corruption use after free all

00:20:47,899 --> 00:20:51,049
the other things you can do wrong with

00:20:49,549 --> 00:20:54,740
memory management in C

00:20:51,049 --> 00:20:57,100
and despite better compilers better

00:20:54,740 --> 00:20:59,119
Diagnostics better static analysis tools

00:20:57,100 --> 00:21:02,299
they've seen no change in that

00:20:59,119 --> 00:21:06,139
percentage of flaws over more than 12

00:21:02,299 --> 00:21:09,169
years so it's clear that writing writing

00:21:06,139 --> 00:21:10,700
C in a way that is safe from memory

00:21:09,169 --> 00:21:13,990
management errors is not possible for

00:21:10,700 --> 00:21:13,990
for humans at least

00:21:15,070 --> 00:21:20,240
so when libvirt started I mean this is

00:21:18,350 --> 00:21:21,919
not a new problem by any means it's been

00:21:20,240 --> 00:21:26,269
it's been fairly well known for a long

00:21:21,919 --> 00:21:27,860
time but when when Lippert started it

00:21:26,269 --> 00:21:30,880
was still the natural choice for a

00:21:27,860 --> 00:21:34,270
fairly low level systems programming

00:21:30,880 --> 00:21:37,930
tasks other common languages in like

00:21:34,270 --> 00:21:41,110
2005 Java is a fairly common it has a

00:21:37,930 --> 00:21:42,790
high memory overhead and it's not good

00:21:41,110 --> 00:21:46,030
accessibility from other programming

00:21:42,790 --> 00:21:48,630
languages Python obviously has been

00:21:46,030 --> 00:21:50,880
around for a very long time but it has

00:21:48,630 --> 00:21:53,320
limited performance and very poor

00:21:50,880 --> 00:21:55,570
scalability across if you'll do

00:21:53,320 --> 00:21:59,220
concurrent execution because of its

00:21:55,570 --> 00:22:02,440
global interpreter lock so C was kind of

00:21:59,220 --> 00:22:04,690
it was it was it was one of our only

00:22:02,440 --> 00:22:06,430
choices at the time but but these days

00:22:04,690 --> 00:22:10,080
we've got some very compelling new

00:22:06,430 --> 00:22:12,070
languages most notably rust and golang

00:22:10,080 --> 00:22:15,040
and we think these these give a

00:22:12,070 --> 00:22:17,140
performance and memory footprint that's

00:22:15,040 --> 00:22:20,380
close or equivalent or even in some

00:22:17,140 --> 00:22:22,090
cases exceeding C but with a kind of at

00:22:20,380 --> 00:22:23,860
least in the goaline case you get some

00:22:22,090 --> 00:22:25,330
of the simplicity of Python so it makes

00:22:23,860 --> 00:22:28,360
it good for new contributors to the

00:22:25,330 --> 00:22:30,700
project both of these languages are

00:22:28,360 --> 00:22:32,890
fairly young but they're developing very

00:22:30,700 --> 00:22:34,870
quickly we can see them growing and the

00:22:32,890 --> 00:22:40,030
communities and libraries around them

00:22:34,870 --> 00:22:41,950
maturing rapidly so I think that's even

00:22:40,030 --> 00:22:44,790
for our systems programming tasks now C

00:22:41,950 --> 00:22:46,900
is no longer the sensible default choice

00:22:44,790 --> 00:22:49,750
even if your application is currently

00:22:46,900 --> 00:22:52,930
written in C it's compelling to think

00:22:49,750 --> 00:22:55,780
about adopting the use of these new

00:22:52,930 --> 00:22:57,520
languages so over the next year or so

00:22:55,780 --> 00:22:59,950
we're going to be talking about and

00:22:57,520 --> 00:23:02,730
looking about how we can adopt either

00:22:59,950 --> 00:23:05,470
rust or golang or both in libvirt in

00:23:02,730 --> 00:23:07,420
some way we haven't decided which of

00:23:05,470 --> 00:23:10,990
these or how we're going to adopt them

00:23:07,420 --> 00:23:12,160
but we targeted adoption in specific

00:23:10,990 --> 00:23:13,540
areas we don't want to just rewrite

00:23:12,160 --> 00:23:14,620
everything for the sake of rewriting

00:23:13,540 --> 00:23:16,510
there has to be some kind of clear

00:23:14,620 --> 00:23:19,210
benefit when we do decide to rewrite

00:23:16,510 --> 00:23:21,310
something and it'll be a long term

00:23:19,210 --> 00:23:23,350
project 5-10 years

00:23:21,310 --> 00:23:25,030
indefinitely there's kind of no end end

00:23:23,350 --> 00:23:26,980
point because we still need to develop

00:23:25,030 --> 00:23:28,990
important features for application

00:23:26,980 --> 00:23:31,060
developers whilst doing this we can't

00:23:28,990 --> 00:23:32,530
just say no new features for 10 years

00:23:31,060 --> 00:23:34,920
whilst we rewrite to assistance that's

00:23:32,530 --> 00:23:34,920
not viable

00:23:35,720 --> 00:23:40,009
I mentioned the auto tools build system

00:23:37,940 --> 00:23:41,929
earlier it's you have to know at least

00:23:40,009 --> 00:23:44,929
six or seven different languages to be

00:23:41,929 --> 00:23:46,759
proficient in it you still end up

00:23:44,929 --> 00:23:48,740
calling out to Perl Python for doing

00:23:46,759 --> 00:23:50,509
other more complex things and it's just

00:23:48,740 --> 00:23:51,980
it's a very large birder for

00:23:50,509 --> 00:23:55,909
contributors and it's poorly understood

00:23:51,980 --> 00:23:57,200
even by our long-term contributors the

00:23:55,909 --> 00:23:59,179
configure script the year from auto

00:23:57,200 --> 00:24:02,029
tours libvirt it currently clocks in at

00:23:59,179 --> 00:24:04,429
almost two megabytes in size of shell

00:24:02,029 --> 00:24:07,159
script that is is really quite horrific

00:24:04,429 --> 00:24:10,039
it increasingly dominates the compile

00:24:07,159 --> 00:24:12,320
time because it's all serialized whereas

00:24:10,039 --> 00:24:14,389
the rest of the build is paralyzed so

00:24:12,320 --> 00:24:17,929
with with high core counts this is a big

00:24:14,389 --> 00:24:19,639
problem so in common with qmu where

00:24:17,929 --> 00:24:23,179
we're going to be adopting the meson

00:24:19,639 --> 00:24:25,009
build system this is a much simpler

00:24:23,179 --> 00:24:27,049
syntax to use it's a domain-specific

00:24:25,009 --> 00:24:29,870
language so you know you'll only have to

00:24:27,049 --> 00:24:32,179
know one language to be able to deal

00:24:29,870 --> 00:24:33,919
with the build system if there are

00:24:32,179 --> 00:24:36,500
limitations you can still call out to

00:24:33,919 --> 00:24:38,120
pythons to get things done but the

00:24:36,500 --> 00:24:40,779
upstream meson community is very active

00:24:38,120 --> 00:24:42,769
and responsive to new features have

00:24:40,779 --> 00:24:45,679
sensible defaults such as parallel

00:24:42,769 --> 00:24:48,409
compiles only showing you the compiler

00:24:45,679 --> 00:24:50,330
flags where things go wrong and so on

00:24:48,409 --> 00:24:52,009
the only the only kind of potential

00:24:50,330 --> 00:24:53,360
downside is amazon's very new so it's

00:24:52,009 --> 00:24:55,460
not in all the distro so you might have

00:24:53,360 --> 00:24:57,590
to bundle meson but it's better than

00:24:55,460 --> 00:25:02,000
bundling a 1.8 megabyte shell script

00:24:57,590 --> 00:25:04,190
from auto tools the final thing I want

00:25:02,000 --> 00:25:06,590
to talk about very very briefly is is

00:25:04,190 --> 00:25:09,860
our development process we've followed a

00:25:06,590 --> 00:25:11,690
traditional development process where we

00:25:09,860 --> 00:25:16,009
have a mailing list based patch review

00:25:11,690 --> 00:25:17,720
submission and review process I can have

00:25:16,009 --> 00:25:19,730
a whole talk about the pros and cons of

00:25:17,720 --> 00:25:21,519
mailing lists versus web based tools but

00:25:19,730 --> 00:25:23,779
I just want to focus on things that are

00:25:21,519 --> 00:25:27,110
impactful for new contributors to the

00:25:23,779 --> 00:25:28,460
project if someone has written some code

00:25:27,110 --> 00:25:30,740
for libvirt and they want to submit it

00:25:28,460 --> 00:25:31,909
for review there are a lot of things

00:25:30,740 --> 00:25:35,029
that they can get wrong when they're

00:25:31,909 --> 00:25:36,169
submitting the code to us I just spent a

00:25:35,029 --> 00:25:38,419
few minutes thinking about some of the

00:25:36,169 --> 00:25:39,980
things we've seen in libvirt and that's

00:25:38,419 --> 00:25:42,970
already a big long list there are things

00:25:39,980 --> 00:25:45,830
that contributors can get wrong

00:25:42,970 --> 00:25:47,059
ultimately we guide them into how to fix

00:25:45,830 --> 00:25:48,720
their problems when they do these

00:25:47,059 --> 00:25:51,290
mistakes but it's still

00:25:48,720 --> 00:25:54,660
first impressions matter in a project

00:25:51,290 --> 00:25:58,230
the the if the contributors get these

00:25:54,660 --> 00:25:59,970
things wrong they it's it's it's not a

00:25:58,230 --> 00:26:01,770
good feeling they may be put off from

00:25:59,970 --> 00:26:03,300
even sending patches in the first place

00:26:01,770 --> 00:26:06,090
because they're not confident they'll do

00:26:03,300 --> 00:26:08,160
it right there's we can have we can have

00:26:06,090 --> 00:26:09,690
a nice long document telling them

00:26:08,160 --> 00:26:12,030
exactly how to do this but it would be

00:26:09,690 --> 00:26:13,920
much better if it was just obvious how

00:26:12,030 --> 00:26:18,660
to contribute patches in the right way

00:26:13,920 --> 00:26:19,680
with minimal scope for messing it up so

00:26:18,660 --> 00:26:22,830
we've been we've been seriously

00:26:19,680 --> 00:26:25,730
considering the use of web-based code

00:26:22,830 --> 00:26:28,140
review tools such as git lab or github

00:26:25,730 --> 00:26:31,110
we haven't made any decisions in this

00:26:28,140 --> 00:26:32,160
area but I think it's clear it's clear

00:26:31,110 --> 00:26:34,710
to see looking at the open source

00:26:32,160 --> 00:26:36,450
community in general that these

00:26:34,710 --> 00:26:39,570
web-based tools have been very widely

00:26:36,450 --> 00:26:41,700
adopted and projects using mailing lists

00:26:39,570 --> 00:26:43,890
are becoming very much the minority out

00:26:41,700 --> 00:26:45,180
there and contributors to kind of expect

00:26:43,890 --> 00:26:49,230
to be able to scan or send a pull

00:26:45,180 --> 00:26:50,880
request now to a project and that is

00:26:49,230 --> 00:26:53,900
kind of the expected interaction model

00:26:50,880 --> 00:26:58,080
so we thought we'd go seriously consider

00:26:53,900 --> 00:26:59,760
that for libvirt like I said this this

00:26:58,080 --> 00:27:01,290
this pros and cons to both these

00:26:59,760 --> 00:27:04,440
approaches and I don't have time to get

00:27:01,290 --> 00:27:06,630
into it and I think it's from it from a

00:27:04,440 --> 00:27:08,130
from a new country but as a point of

00:27:06,630 --> 00:27:12,930
view it's it's it's a very attractive

00:27:08,130 --> 00:27:14,700
way to go for a for existing free

00:27:12,930 --> 00:27:17,040
service we may have to do some work on

00:27:14,700 --> 00:27:19,590
using the remote API service to build

00:27:17,040 --> 00:27:21,420
some tools to make us more efficient at

00:27:19,590 --> 00:27:24,540
using something like github or gate lab

00:27:21,420 --> 00:27:27,060
because code review of 30 patch long

00:27:24,540 --> 00:27:29,280
series is not that nice through a web UI

00:27:27,060 --> 00:27:31,740
but I think these these are challenges

00:27:29,280 --> 00:27:33,990
that can be can be met using the using

00:27:31,740 --> 00:27:37,380
their remote api's and building suitable

00:27:33,990 --> 00:27:40,260
tools around them in also and other nice

00:27:37,380 --> 00:27:43,950
features that it ties in to bug tracking

00:27:40,260 --> 00:27:46,010
services and CI systems so we a nice and

00:27:43,950 --> 00:27:48,390
you can get a nice end-to-end workflow

00:27:46,010 --> 00:27:51,180
which you kind of you can cobble

00:27:48,390 --> 00:27:52,320
together with with email but it's it's

00:27:51,180 --> 00:27:53,880
not kind of integrated in the Coase

00:27:52,320 --> 00:27:57,690
seamless way they've used you see with

00:27:53,880 --> 00:27:59,940
these these web-based tools the exact

00:27:57,690 --> 00:28:01,380
way we we may not do this is still to be

00:27:59,940 --> 00:28:02,490
decided there's there's active

00:28:01,380 --> 00:28:04,679
discussions on the mailing

00:28:02,490 --> 00:28:07,140
deliver just last week about this topic

00:28:04,679 --> 00:28:08,970
so watch this space but don't be

00:28:07,140 --> 00:28:13,860
surprised if you see this this happening

00:28:08,970 --> 00:28:16,290
in the next year in in libvirt and with

00:28:13,860 --> 00:28:19,740
that we've come to the end pretty much

00:28:16,290 --> 00:28:21,360
on time I think so I don't think we

00:28:19,740 --> 00:28:23,760
really have any type of questions but if

00:28:21,360 --> 00:28:25,350
you want to talk about anything come and

00:28:23,760 --> 00:28:27,110
find me afterwards and I'll be

00:28:25,350 --> 00:28:30,330
publishing a bunch of blog posts

00:28:27,110 --> 00:28:31,830
expanding on most of these topics over

00:28:30,330 --> 00:28:34,080
the over the coming over the coming

00:28:31,830 --> 00:28:36,030
weeks so keep an eye out if you want to

00:28:34,080 --> 00:28:36,900
learn more about these thank you very

00:28:36,030 --> 00:28:40,089
much

00:28:36,900 --> 00:28:40,089
[Applause]

00:28:40,570 --> 00:28:47,820

YouTube URL: https://www.youtube.com/watch?v=XTXE-A49-DU


