Title: [2019] Managing Matryoshkas: Testing Nested Guests by Marc Hartmayer
Publication date: 2019-11-07
Playlist: KVM Forum 2019
Description: 
	The nested virtualization functionality is one of the key functionalities of modern hypervisors. Yet, one central quest is to find an adequate way to write functional tests that check and verify the entire "KVM/QEMU/libvirt" stack in each level of (nested) guest. How can each guest level be supervised, managed, tested without introducing high complexity and without writing duplicated code in each guest level?

In this presentation, Marc Hartmayer will discuss existing test approaches and present an alternative approach by using "self-replicating programs" in combination with the technique of remote proxy objects. Moreover, he will show a demo for a test case in which the pass-through functionality of a device will be tested up to the Nth level. Lastly, he'll give an outlook on how this approach could be integrated into existing frameworks like Avocado and what else could be done.

---

Marc Hartmayer
IBM R&D
Software Engineer

Marc Hartmayer is a software engineer working at IBM Germany. The main project he works on is libvirt.

Note: We apologize for lower video quality due to technical problems.
Captions: 
	00:00:00,390 --> 00:00:02,750
[Music]

00:00:07,400 --> 00:00:12,780
hello everybody good morning i'm

00:00:10,889 --> 00:00:15,450
markiplier and I'm working as a software

00:00:12,780 --> 00:00:17,670
engineer die BM it's a pleasure for me

00:00:15,450 --> 00:00:19,650
to be here today and in this

00:00:17,670 --> 00:00:23,000
presentation I will talk about testing

00:00:19,650 --> 00:00:28,949
there's a gas and nationalizations

00:00:23,000 --> 00:00:31,109
trademarks more trademarks ok first I

00:00:28,949 --> 00:00:33,630
will explain what is nationalization

00:00:31,109 --> 00:00:35,760
then I will discuss existing frameworks

00:00:33,630 --> 00:00:39,210
for testing the civilization after that

00:00:35,760 --> 00:00:41,090
it will present a short demo for no turn

00:00:39,210 --> 00:00:43,739
alternative approach by using

00:00:41,090 --> 00:00:45,539
self-replicating programs and then I

00:00:43,739 --> 00:00:48,390
will explain the technical details of

00:00:45,539 --> 00:00:51,420
this approach and lastly I will given

00:00:48,390 --> 00:00:54,239
short outlook what else could be done so

00:00:51,420 --> 00:00:57,000
first what's nice and virtualization the

00:00:54,239 --> 00:01:00,059
main idea here is to simply turn the gas

00:00:57,000 --> 00:01:02,570
into a host or a new hypervisor a use

00:01:00,059 --> 00:01:06,180
cases are development testing production

00:01:02,570 --> 00:01:08,909
training whatever and this presentation

00:01:06,180 --> 00:01:12,750
will use terminology fewer if the bare

00:01:08,909 --> 00:01:16,950
metal host one KVM one is the VM running

00:01:12,750 --> 00:01:18,960
on 0 acting as a hypervisor 2 years we

00:01:16,950 --> 00:01:20,070
am running on the one called next guest

00:01:18,960 --> 00:01:25,110
and so on

00:01:20,070 --> 00:01:29,369
I've tried that on 390 up to level 7 so

00:01:25,110 --> 00:01:31,860
there's also a 5 a 6 and so on

00:01:29,369 --> 00:01:35,369
required for next budget session on a

00:01:31,860 --> 00:01:37,890
390x first you have to need at least a

00:01:35,369 --> 00:01:42,509
kernel created and for the date then you

00:01:37,890 --> 00:01:44,970
have some Abel KVM in the command line

00:01:42,509 --> 00:01:47,850
parameter and you have to enable the CPU

00:01:44,970 --> 00:01:51,060
host model and for that you have to you

00:01:47,850 --> 00:01:55,290
need at least k mu greater than greater

00:01:51,060 --> 00:01:58,020
equal than 2.9 actually support

00:01:55,290 --> 00:01:58,950
multilevel nursing support and as I told

00:01:58,020 --> 00:02:02,909
you already

00:01:58,950 --> 00:02:06,060
I've tried that up to level 6 7 7 I

00:02:02,909 --> 00:02:11,160
think and it gets lower than more levels

00:02:06,060 --> 00:02:13,470
you have its 290x bias I

00:02:11,160 --> 00:02:16,020
and the migration works even between

00:02:13,470 --> 00:02:18,830
different levels so can migrate and have

00:02:16,020 --> 00:02:22,050
a for guests to a level one guest and so

00:02:18,830 --> 00:02:24,270
we support my question of a level one

00:02:22,050 --> 00:02:28,590
guest for example even if I love the two

00:02:24,270 --> 00:02:30,720
guests is running and on a 390 as you

00:02:28,590 --> 00:02:33,210
can see on the right side we have even

00:02:30,720 --> 00:02:35,700
not a level of virtualization but this

00:02:33,210 --> 00:02:39,420
is just in detail because our partitions

00:02:35,700 --> 00:02:42,180
are already virtualized so now we will

00:02:39,420 --> 00:02:45,140
come to the topic what is available to

00:02:42,180 --> 00:02:48,690
test nationalization so I have looked

00:02:45,140 --> 00:02:51,510
what is available explicitly in the

00:02:48,690 --> 00:02:53,400
scope of my test approach to test the

00:02:51,510 --> 00:02:56,790
whole stack so I mean I would like to

00:02:53,400 --> 00:02:59,700
test okay we am and if possible Leopard

00:02:56,790 --> 00:03:03,830
and there's a locator which he just has

00:02:59,700 --> 00:03:08,280
really manual will you it has a big

00:03:03,830 --> 00:03:10,470
functionality a huge it's a huge way

00:03:08,280 --> 00:03:13,470
work and so on it has many API that you

00:03:10,470 --> 00:03:15,900
can use and our test pool for example

00:03:13,470 --> 00:03:22,140
for lip board and test for either fork

00:03:15,900 --> 00:03:25,140
mu and there's the nest there's a Nestle

00:03:22,140 --> 00:03:27,840
test case described then there's a video

00:03:25,140 --> 00:03:30,420
camera the acceptance test of Jimmy as

00:03:27,840 --> 00:03:33,930
far as notice known as virtualization

00:03:30,420 --> 00:03:36,900
test case right now then the other KP

00:03:33,930 --> 00:03:39,180
I'm unit tests there are nationalization

00:03:36,900 --> 00:03:42,540
test cases for our Vitamix but not for

00:03:39,180 --> 00:03:44,790
every 90 right now then there's look for

00:03:42,540 --> 00:03:49,170
tzk there's known as virtualization test

00:03:44,790 --> 00:03:51,330
and then there's a test but this is

00:03:49,170 --> 00:03:56,220
legacy only because I okay to achieve

00:03:51,330 --> 00:04:01,140
the success of that and test case is

00:03:56,220 --> 00:04:05,130
more test for a test little test to show

00:04:01,140 --> 00:04:09,000
how how much louder can we get or can we

00:04:05,130 --> 00:04:11,460
achieve so I've looked at these

00:04:09,000 --> 00:04:13,620
frameworks and I'm okay which he seems

00:04:11,460 --> 00:04:15,540
to me that seems to be most evolved for

00:04:13,620 --> 00:04:19,229
involved to who I test cases that I

00:04:15,540 --> 00:04:22,770
would like to write so I've looked into

00:04:19,229 --> 00:04:24,810
more detail for a vocative et and I hope

00:04:22,770 --> 00:04:27,750
you can see that on the right side

00:04:24,810 --> 00:04:30,740
there's an example slide from the

00:04:27,750 --> 00:04:36,120
presentation of last year's presentation

00:04:30,740 --> 00:04:38,610
the functional test beast and if you can

00:04:36,120 --> 00:04:41,550
read it the interaction of the host spun

00:04:38,610 --> 00:04:43,919
done by using Paiste but the interaction

00:04:41,550 --> 00:04:47,250
with the guest is actually done by using

00:04:43,919 --> 00:04:50,430
bash via SSH so the first question that

00:04:47,250 --> 00:04:52,230
come up to him to my mind is why do we

00:04:50,430 --> 00:04:53,550
use different levels are they that

00:04:52,230 --> 00:04:56,760
different language for the same

00:04:53,550 --> 00:04:58,919
semantics good thing so for NASA virtual

00:04:56,760 --> 00:05:01,050
stations would be good to simply reuse

00:04:58,919 --> 00:05:04,590
our code that we have already in the

00:05:01,050 --> 00:05:06,389
house in the guest but this new house so

00:05:04,590 --> 00:05:08,460
wasn't it great if you can simply use

00:05:06,389 --> 00:05:12,090
our host code and nest in the nest guest

00:05:08,460 --> 00:05:14,940
the new house then it would be really

00:05:12,090 --> 00:05:17,610
hard to debug if there's some failure

00:05:14,940 --> 00:05:20,520
inside of the guest if you're using ever

00:05:17,610 --> 00:05:23,310
k2 vici for that then for example for

00:05:20,520 --> 00:05:26,430
common tasks like a hot black unplug of

00:05:23,310 --> 00:05:29,610
device there are documents used such

00:05:26,430 --> 00:05:32,190
like they are they're using sleeves they

00:05:29,610 --> 00:05:35,100
are using busy leaps for pull loops for

00:05:32,190 --> 00:05:37,289
pull appalling or the using coarse

00:05:35,100 --> 00:05:40,800
grained commands like you def at main

00:05:37,289 --> 00:05:45,270
settle so they it will simply wait until

00:05:40,800 --> 00:05:48,210
are you deaf events are handled or for

00:05:45,270 --> 00:05:50,430
the timeout and different semantics for

00:05:48,210 --> 00:05:52,830
example they're using key open sometimes

00:05:50,430 --> 00:05:55,710
in the host to start and process and

00:05:52,830 --> 00:05:57,630
this has a different semantics then for

00:05:55,710 --> 00:06:01,410
example sessions of command which uses

00:05:57,630 --> 00:06:03,800
ssh client and in the background so they

00:06:01,410 --> 00:06:07,740
exit codes will be transformed and so on

00:06:03,800 --> 00:06:11,039
and it's how to what's about the error

00:06:07,740 --> 00:06:13,740
handling stack traces and so on so my

00:06:11,039 --> 00:06:18,570
main idea was use your house coat in the

00:06:13,740 --> 00:06:22,050
guest and first of all stop the demo

00:06:18,570 --> 00:06:25,110
this is an example test case so we have

00:06:22,050 --> 00:06:26,940
i have implemented it in our internal

00:06:25,110 --> 00:06:29,250
test framework that's similar to

00:06:26,940 --> 00:06:31,919
advocator which is so it conforms to

00:06:29,250 --> 00:06:33,060
pison convention everything is a pison

00:06:31,919 --> 00:06:36,060
unitary and so on

00:06:33,060 --> 00:06:38,639
and it uses configuration over convent

00:06:36,060 --> 00:06:41,639
as a it used conventional country

00:06:38,639 --> 00:06:44,639
and for example if you define the class

00:06:41,639 --> 00:06:47,009
attribute domain names and define you

00:06:44,639 --> 00:06:51,719
test one then you can it will be ensured

00:06:47,009 --> 00:06:56,009
that you can access a test one to make a

00:06:51,719 --> 00:06:58,710
guess to fine-tune lipfird 15a interest

00:06:56,009 --> 00:07:00,689
one you can access it with the guests

00:06:58,710 --> 00:07:04,560
self-taught guests this is an extra

00:07:00,689 --> 00:07:06,689
domain manager so you can access discuss

00:07:04,560 --> 00:07:08,569
it's defined and it started and you have

00:07:06,689 --> 00:07:11,400
nested each communication channel to it

00:07:08,569 --> 00:07:14,460
so what we can do here is now we can

00:07:11,400 --> 00:07:17,159
simply call a Python function in this

00:07:14,460 --> 00:07:19,289
case check output of the standard

00:07:17,159 --> 00:07:22,800
library from of poison and we can call

00:07:19,289 --> 00:07:25,439
it inside of the guest context so the

00:07:22,800 --> 00:07:27,270
argument I'm passing here is host name

00:07:25,439 --> 00:07:30,620
then I will get a standard out of this

00:07:27,270 --> 00:07:34,050
and this case this should be cambia 390x

00:07:30,620 --> 00:07:36,389
but you could also do simply reuse the

00:07:34,050 --> 00:07:38,939
python function get host name of the

00:07:36,389 --> 00:07:43,409
socket Maat Maat you and call this

00:07:38,939 --> 00:07:46,440
directly in the guest so i will show you

00:07:43,409 --> 00:07:50,279
now our test case testing the nested

00:07:46,440 --> 00:07:53,849
personalization functionality and yeah

00:07:50,279 --> 00:07:56,719
define a nested guest up to level and

00:07:53,849 --> 00:07:56,719
whatever you want to

00:08:04,580 --> 00:08:10,980
okay we did okay so what i'm doing here

00:08:08,820 --> 00:08:15,530
first I'm saying okay the main names

00:08:10,980 --> 00:08:15,530
should be empty so there would be no

00:08:15,650 --> 00:08:22,169
domain name defined and starts by

00:08:18,810 --> 00:08:23,940
default so I'm using nine PFS for the

00:08:22,169 --> 00:08:26,520
path view of the image that I'm using

00:08:23,940 --> 00:08:30,060
for my guest and for my new guest and so

00:08:26,520 --> 00:08:33,900
on for my next guest so I have a super

00:08:30,060 --> 00:08:36,810
loop in this case I'm starting our level

00:08:33,900 --> 00:08:38,419
3 guest up to level 3 but you can

00:08:36,810 --> 00:08:41,640
increase it whatever you would like to

00:08:38,419 --> 00:08:45,240
then I'm preparing the new domain I have

00:08:41,640 --> 00:08:49,020
we have something like the up heisting

00:08:45,240 --> 00:08:52,290
object to examine for this so we will

00:08:49,020 --> 00:08:54,660
get here Nixon air filter with this

00:08:52,290 --> 00:08:58,620
memory size and discount of we see pews

00:08:54,660 --> 00:09:01,290
then we have to enable the KPM nested

00:08:58,620 --> 00:09:04,320
support for adding this to the command

00:09:01,290 --> 00:09:08,190
line then I am creating a file system

00:09:04,320 --> 00:09:12,210
exam builder for the nine PFS our

00:09:08,190 --> 00:09:15,960
Panthers after that I'm using the domain

00:09:12,210 --> 00:09:18,060
miniature object guess and say hey play

00:09:15,960 --> 00:09:21,200
pleased to find this in the guest

00:09:18,060 --> 00:09:24,750
context and after that I will started

00:09:21,200 --> 00:09:27,720
then I have to mount the nine PFS

00:09:24,750 --> 00:09:30,300
directory inside of the guest set the

00:09:27,720 --> 00:09:33,990
name to test underscore nested and now

00:09:30,300 --> 00:09:36,480
should be the domain manager tve domain

00:09:33,990 --> 00:09:38,390
manager of the guest and then I will

00:09:36,480 --> 00:09:40,800
continue simply with the loop that's all

00:09:38,390 --> 00:09:44,010
if I would like to pair through for

00:09:40,800 --> 00:09:48,089
example in Scaasi device I can simply do

00:09:44,010 --> 00:09:50,790
this in this case I'm loading Oscar's

00:09:48,089 --> 00:09:51,300
debug module get the host pass and

00:09:50,790 --> 00:09:54,680
target

00:09:51,300 --> 00:09:57,810
there are addresses of this device and

00:09:54,680 --> 00:10:02,070
in house to fix my builder which I would

00:09:57,810 --> 00:10:03,690
which I'm defying using lipfird and then

00:10:02,070 --> 00:10:09,300
I'm something simply adding it and

00:10:03,690 --> 00:10:12,240
that's all now I can run this okay what

00:10:09,300 --> 00:10:14,579
I have to say here I have inserted and

00:10:12,240 --> 00:10:19,829
failure here so it will stop right there

00:10:14,579 --> 00:10:20,689
I can debug okay it starts left one

00:10:19,829 --> 00:10:25,649
guest

00:10:20,689 --> 00:10:28,790
no two guests level three guests it

00:10:25,649 --> 00:10:28,790
needs some more time

00:10:30,829 --> 00:10:37,100
only some so it will be a lot slower

00:10:52,110 --> 00:10:55,160
some savings

00:11:00,950 --> 00:11:08,820
okay okay now we are in PBA and we will

00:11:06,300 --> 00:11:12,450
see here the failure message click here

00:11:08,820 --> 00:11:14,390
and we will also get in as H command

00:11:12,450 --> 00:11:18,000
line to connect to this gas for example

00:11:14,390 --> 00:11:21,660
to connect to the test nested cast case

00:11:18,000 --> 00:11:26,150
I can use simply this command line from

00:11:21,660 --> 00:11:26,150
calling gosh list I'm seeing hey here's

00:11:26,480 --> 00:11:45,890
guest running so okay and if I'm using a

00:11:36,300 --> 00:11:50,400
Scotty here okay oh I haven't saved it

00:11:45,890 --> 00:11:56,880
otherwise it would work okay I will

00:11:50,400 --> 00:11:58,980
continue okay

00:11:56,880 --> 00:12:04,350
the current state of this code is first

00:11:58,980 --> 00:12:07,320
time only but what I am using is my to

00:12:04,350 --> 00:12:09,029
chain and here will quote David Wilson

00:12:07,320 --> 00:12:11,580
this is the maintainer of this project

00:12:09,029 --> 00:12:13,860
make it child's play to run Python code

00:12:11,580 --> 00:12:16,800
on the mode machines so it's basically

00:12:13,860 --> 00:12:19,140
our Pisan arrival for writing disputed

00:12:16,800 --> 00:12:22,080
self-replicating programs has support

00:12:19,140 --> 00:12:26,700
for a pie tin to crater equal equal then

00:12:22,080 --> 00:12:29,910
2.4 required up feature into guests and

00:12:26,700 --> 00:12:32,520
in this age client must be installed and

00:12:29,910 --> 00:12:35,339
it has your PI's dependency so it uses

00:12:32,520 --> 00:12:37,589
only a standard library

00:12:35,339 --> 00:12:39,720
how does it work first it spins up and

00:12:37,589 --> 00:12:43,290
hooks up our remote and PI's new Twitter

00:12:39,720 --> 00:12:45,480
for example via SSH and this forms a new

00:12:43,290 --> 00:12:48,089
context then you can call functions

00:12:45,480 --> 00:12:49,890
inside this context and for that it uses

00:12:48,089 --> 00:12:53,880
marshaling and for that it uses the

00:12:49,890 --> 00:12:56,100
Pisan module pickle what's really great

00:12:53,880 --> 00:12:57,990
here is it we solve highest novensys new

00:12:56,100 --> 00:12:59,940
mode context transparently so for

00:12:57,990 --> 00:13:05,130
example on the right side you can see in

00:12:59,940 --> 00:13:08,610
6 example usage of this library and it

00:13:05,130 --> 00:13:10,520
establish in context one context to the

00:13:08,610 --> 00:13:13,730
host first host

00:13:10,520 --> 00:13:16,480
then step listen hosts to contacts by

00:13:13,730 --> 00:13:19,430
using hosts one context as an SSH hope

00:13:16,480 --> 00:13:23,780
transparently and then you can call the

00:13:19,430 --> 00:13:25,850
PSU to a function CPU count even if it's

00:13:23,780 --> 00:13:27,650
not installed in the house to context so

00:13:25,850 --> 00:13:31,220
it will be resolved and apparently by my

00:13:27,650 --> 00:13:34,430
teacher for free it forward stumped IO

00:13:31,220 --> 00:13:37,310
to the local host and also the locks

00:13:34,430 --> 00:13:40,610
done by log about logging package and it

00:13:37,310 --> 00:13:42,440
supports a synchronous cause but might

00:13:40,610 --> 00:13:45,140
change not enough because if you're

00:13:42,440 --> 00:13:50,570
looking at the right side how we would

00:13:45,140 --> 00:13:52,490
look up domain by using little Pisan so

00:13:50,570 --> 00:13:55,490
you're calling in the guest one context

00:13:52,490 --> 00:13:58,250
the function lookup and if your

00:13:55,490 --> 00:14:00,140
important lipid pricing module try to

00:13:58,250 --> 00:14:02,000
establish the lipid connection and then

00:14:00,140 --> 00:14:04,070
with right which will try to look up the

00:14:02,000 --> 00:14:06,440
domain and then it will just try to

00:14:04,070 --> 00:14:08,600
return it but what you would actually

00:14:06,440 --> 00:14:11,780
like to have to start domain in the

00:14:08,600 --> 00:14:14,420
guest context because my toes chain

00:14:11,780 --> 00:14:17,720
would try to transfer the extra value

00:14:14,420 --> 00:14:20,690
and we are not interested at the actual

00:14:17,720 --> 00:14:24,410
value but we would like to start the

00:14:20,690 --> 00:14:27,560
guest in the guest one context so we

00:14:24,410 --> 00:14:29,870
should handle this and of course as soon

00:14:27,560 --> 00:14:31,910
as the domains returned there will be no

00:14:29,870 --> 00:14:34,550
reference to it in the guest one context

00:14:31,910 --> 00:14:38,690
and we have to ensure that it's still

00:14:34,550 --> 00:14:41,360
alive and we can use it so the first

00:14:38,690 --> 00:14:45,670
idea was hey we could do this by remote

00:14:41,360 --> 00:14:48,200
invocation by our proxy objects so

00:14:45,670 --> 00:14:52,010
instead of returning the extra value we

00:14:48,200 --> 00:14:53,930
are still with which are on simple proxy

00:14:52,010 --> 00:14:57,370
objects and methods for everything and

00:14:53,930 --> 00:15:00,440
this can even be used for function cards

00:14:57,370 --> 00:15:03,050
then we have to register trusted classes

00:15:00,440 --> 00:15:07,550
because I'm Park and pickling untrusted

00:15:03,050 --> 00:15:09,470
data it's not secure and we have a spare

00:15:07,550 --> 00:15:12,200
I have introduced a special dangle

00:15:09,470 --> 00:15:13,970
method named value for receiving the

00:15:12,200 --> 00:15:16,490
actual object so if you are really

00:15:13,970 --> 00:15:19,910
interested in the actual value we can

00:15:16,490 --> 00:15:22,700
still receive it by using the method

00:15:19,910 --> 00:15:24,150
underscore underscore value and we can

00:15:22,700 --> 00:15:27,270
fast

00:15:24,150 --> 00:15:29,910
taking of untrusted data of trust data

00:15:27,270 --> 00:15:32,460
that we would be can't enforce time

00:15:29,910 --> 00:15:37,080
picking of data by using the keyword

00:15:32,460 --> 00:15:40,770
trust then we have to connect the Python

00:15:37,080 --> 00:15:43,920
object lifecycles so as long as the foxy

00:15:40,770 --> 00:15:46,350
object is LA alive the referred object

00:15:43,920 --> 00:15:48,540
must not be garbage collected and this

00:15:46,350 --> 00:15:51,990
leads to some kinds of 20 chief proxy

00:15:48,540 --> 00:15:55,980
object chains good now we come to the

00:15:51,990 --> 00:15:58,380
conclusions so first guests can run

00:15:55,980 --> 00:16:00,480
Python host code transparently this

00:15:58,380 --> 00:16:03,600
should be lead to less duplicative code

00:16:00,480 --> 00:16:07,980
in different languages then we can reuse

00:16:03,600 --> 00:16:09,960
Python package like PI Yadav and the

00:16:07,980 --> 00:16:13,020
redirection of standard i/o and logging

00:16:09,960 --> 00:16:16,340
in the gas is for free and this should

00:16:13,020 --> 00:16:19,680
be minimize the usage of shell commands

00:16:16,340 --> 00:16:21,600
but there are also some limitations for

00:16:19,680 --> 00:16:23,700
example native dependencies are not

00:16:21,600 --> 00:16:26,640
copied automatically for example the

00:16:23,700 --> 00:16:28,830
lipid shared object so you have to

00:16:26,640 --> 00:16:32,010
prepare that or copy it by yourself

00:16:28,830 --> 00:16:33,870
and the Python tweeter must be available

00:16:32,010 --> 00:16:36,480
in the guest and there's an overhead

00:16:33,870 --> 00:16:39,360
cost by the Python tweeter start but

00:16:36,480 --> 00:16:42,060
luckily this is only needed once and

00:16:39,360 --> 00:16:43,680
there's some pickling limitation because

00:16:42,060 --> 00:16:46,200
lambda functions for example are not

00:16:43,680 --> 00:16:50,670
pick over but you can use now pickle

00:16:46,200 --> 00:16:53,610
module like the for that ok so let me so

00:16:50,670 --> 00:16:55,640
much that there's still much to do the

00:16:53,610 --> 00:16:58,800
test approach nestled virtualization

00:16:55,640 --> 00:17:00,300
already exists but this new approach

00:16:58,800 --> 00:17:03,540
allows the interaction of the host

00:17:00,300 --> 00:17:06,030
guests and guests using Python you can

00:17:03,540 --> 00:17:08,610
recover a few reuse of house calls and

00:17:06,030 --> 00:17:12,690
guests and it allows you an easy

00:17:08,610 --> 00:17:13,830
management of nested guests what's next

00:17:12,690 --> 00:17:14,790
first we have to finish our

00:17:13,830 --> 00:17:17,670
implementation

00:17:14,790 --> 00:17:18,930
up swimming changes to my to churn make

00:17:17,670 --> 00:17:20,700
it easier to debug

00:17:18,930 --> 00:17:23,480
implementing no part in debugger for

00:17:20,700 --> 00:17:25,740
example that should be possible and

00:17:23,480 --> 00:17:28,710
maybe we could integrate off way more

00:17:25,740 --> 00:17:30,690
tests until avvocato it here because as

00:17:28,710 --> 00:17:33,330
you can see on the right side and ok

00:17:30,690 --> 00:17:35,910
Luigi has a huge utilities API that we

00:17:33,330 --> 00:17:37,000
can't simply reuse with this new

00:17:35,910 --> 00:17:41,170
approach

00:17:37,000 --> 00:17:41,170
so thank you for your attention

00:17:41,490 --> 00:17:44,609
[Applause]

00:17:45,880 --> 00:17:58,910
questions hi this is a price and I would

00:17:56,510 --> 00:18:01,670
like to ask how you think we could reuse

00:17:58,910 --> 00:18:05,030
this we can work together also we use

00:18:01,670 --> 00:18:07,010
this in a vocal qmo it would be

00:18:05,030 --> 00:18:10,180
interesting to make this available to

00:18:07,010 --> 00:18:13,820
for the tests we have in the kurma tree

00:18:10,180 --> 00:18:16,550
for testing nests about using in the koe

00:18:13,820 --> 00:18:17,900
mo test case we have and how do you

00:18:16,550 --> 00:18:19,730
think we could work together do you

00:18:17,900 --> 00:18:23,630
think you will publish as a separate

00:18:19,730 --> 00:18:26,930
module or should we just merge these

00:18:23,630 --> 00:18:32,510
inside the qmo Python modules we have

00:18:26,930 --> 00:18:34,820
what are thoughts on that forever k 2q a

00:18:32,510 --> 00:18:41,140
male because a vacuum is inside the

00:18:34,820 --> 00:18:41,140
country and it's the qmo test cases

00:18:41,380 --> 00:18:46,370
because I will talk if the maintain of

00:18:44,360 --> 00:18:48,890
my torch and to absolute thanks some

00:18:46,370 --> 00:18:52,520
things to into margin and then you'll

00:18:48,890 --> 00:18:54,080
simply need to use my teacher inside of

00:18:52,520 --> 00:18:58,100
okay okay I'm you and then you can you

00:18:54,080 --> 00:19:02,150
use it maybe we can also have some

00:18:58,100 --> 00:19:03,890
object you have already your object and

00:19:02,150 --> 00:19:06,340
something like that so we have to adapt

00:19:03,890 --> 00:19:09,050
this but it should be easy

00:19:06,340 --> 00:19:11,450
are you using avocado BT because if you

00:19:09,050 --> 00:19:13,520
don't have a specific reasons to do that

00:19:11,450 --> 00:19:17,050
another cavity I would suggest try to

00:19:13,520 --> 00:19:17,050
include that as part of a curriculum

00:19:24,990 --> 00:19:33,090
other questions it's look like now so

00:19:30,610 --> 00:19:33,090
thank you

00:19:35,800 --> 00:19:43,079

YouTube URL: https://www.youtube.com/watch?v=DPrqCS_G9kU


