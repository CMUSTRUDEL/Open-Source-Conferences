Title: [2019] Boosting Dedicated Instances by KVM Tax Cut by Wanpeng Li
Publication date: 2019-11-12
Playlist: KVM Forum 2019
Description: 
	The KVM hypervisor is at the core of cloud computing, some customers from financial, online shopping, and gaming etc more prefer the dedicated instances to avoid resources contention from multi-tenant, and the security can be guaranteed by isolation. However, without more hypervisor optimizations, cloud providers still can't provide performance that is "indistinguishable from metal."

In this presentation,we will introduce some features which can reduce the tax from kvm hypervisor for dedicated instances include: Exitless Timer, KVM_HINTS_DEDICATED performance hint, allow userspace to disable MWAIT/HLT/PAUSE vmexits, adaptively tune advance lapic timer and adaptive halt-polling in guest/host to reduce latency.

---

Wanpeng Li
Tencent Cloud
Linux Kernel Contributor

Wanpeng Li is a 7 years experienced Linux kernel/virtualization developer who works in Tencent Cloud currently. He mainly focus on KVM, scheduler and memory management. In KVM, he contributes a lot of features to improve performance and stability. He has experience worked in IBM LTC kernel team and INTEL OTC virtualization team before. He was invited to speak at some conferences: KVM FORUM 2019, China CLK 2019, KVM FORUM 2018, LinuxCon 2018, LinuxCon 2017, China CLK 2017.
Captions: 
	00:00:00,390 --> 00:00:02,750
[Music]

00:00:06,890 --> 00:00:17,460
hello i'm lee hwon pomfrit ensign cloud

00:00:12,290 --> 00:00:20,640
i'm active KVM contributor in the Korean

00:00:17,460 --> 00:00:23,400
community today I will introduce the

00:00:20,640 --> 00:00:28,680
solution to boost the dedicated instance

00:00:23,400 --> 00:00:32,840
we are equiv my Scott resist today's

00:00:28,680 --> 00:00:36,149
agenda all the features are a stream now

00:00:32,840 --> 00:00:42,090
except the last one how the pouring

00:00:36,149 --> 00:00:47,850
guest is from Marcelo other patches are

00:00:42,090 --> 00:00:51,899
pushed to Austrian by me the motivation

00:00:47,850 --> 00:00:56,850
of axial I stammer it's both am Tamara

00:00:51,899 --> 00:00:59,180
and Tim affair can incur via Max's that

00:00:56,850 --> 00:01:01,829
he did instance can encounter

00:00:59,180 --> 00:01:05,880
performance treat her if the workloads

00:01:01,829 --> 00:01:09,600
are set adhere to the VM exceeds so your

00:01:05,880 --> 00:01:15,119
are to be a Max is here the excellent

00:01:09,600 --> 00:01:21,540
steamer can cut the second half we can

00:01:15,119 --> 00:01:24,570
implement the injection actually less we

00:01:21,540 --> 00:01:28,350
utilize the host giving subsystems to

00:01:24,570 --> 00:01:33,240
cooperate with given subsystems to

00:01:28,350 --> 00:01:36,150
offload the local epic camera emulation

00:01:33,240 --> 00:01:39,570
to the housekeeping reviews after we

00:01:36,150 --> 00:01:42,390
enable housekeeping subsystem the CPUs

00:01:39,570 --> 00:01:47,850
are separate to housekeeping CPUs are

00:01:42,390 --> 00:01:50,970
now host giving sea views the emulated

00:01:47,850 --> 00:01:54,750
local epic hammer which can be emulated

00:01:50,970 --> 00:01:57,860
by the h-heart hammer on host is upload

00:01:54,750 --> 00:02:02,899
to the host giving CPUs and the VM is

00:01:57,860 --> 00:02:06,060
running on the host giving CPUs the

00:02:02,899 --> 00:02:11,830
despair Cameron arrived fair on the

00:02:06,060 --> 00:02:14,890
housekeeping CPUs and injected to the VM

00:02:11,830 --> 00:02:17,890
by posting rod from the housekeeping

00:02:14,890 --> 00:02:22,720
CPUs the hostel a demain shoulda

00:02:17,890 --> 00:02:27,580
fine-tuned the host like enable know who

00:02:22,720 --> 00:02:31,440
the for and also keep the cpu in root

00:02:27,580 --> 00:02:36,450
mode as possible as we can for example

00:02:31,440 --> 00:02:36,450
disable some instructions via magazines

00:02:37,380 --> 00:02:44,320
the normal kernel KVM in the router

00:02:40,750 --> 00:02:48,280
delivery the external in a wrap will be

00:02:44,320 --> 00:02:52,180
happy on the housekeeping CPUs under

00:02:48,280 --> 00:02:55,750
review will be am we imagine a do to the

00:02:52,180 --> 00:02:58,300
least external in iraq but after

00:02:55,750 --> 00:03:03,520
actualized hammer the external in a row

00:02:58,300 --> 00:03:09,930
is on the host giving cpus the memory in

00:03:03,520 --> 00:03:13,630
arab is injected to the v vm from the

00:03:09,930 --> 00:03:16,860
housekeeping cpus to the novice keeping

00:03:13,630 --> 00:03:21,130
CPUs which though with vm is running on

00:03:16,860 --> 00:03:23,890
let's see the performance number the

00:03:21,130 --> 00:03:26,800
percent of external in a raft of the MxA

00:03:23,890 --> 00:03:34,720
time can be reduced from thirty nine

00:03:26,800 --> 00:03:40,239
percent to around three percent next one

00:03:34,720 --> 00:03:43,360
is axial i stammer axial sigi local epic

00:03:40,239 --> 00:03:46,690
is the interrupt controller in the cpu

00:03:43,360 --> 00:03:50,470
and x2 a pig physical mode is commonly

00:03:46,690 --> 00:03:54,100
used for the local epic while one CPU

00:03:50,470 --> 00:03:59,860
center one one one CPUs and IP i to the

00:03:54,100 --> 00:04:02,310
tacky the cpu in the will the OS need to

00:03:59,860 --> 00:04:05,620
write who i see our registers each

00:04:02,310 --> 00:04:09,900
rights to i see our registers in the

00:04:05,620 --> 00:04:13,330
local epic will cause of a amongst it

00:04:09,900 --> 00:04:15,700
so multicast IP is on the function call

00:04:13,330 --> 00:04:19,570
at the IP is maybe the worst when

00:04:15,700 --> 00:04:23,500
scaling to larger VMS the axle s IV i

00:04:19,570 --> 00:04:25,659
can said the destination if he IDs in

00:04:23,500 --> 00:04:28,849
the in one big map

00:04:25,659 --> 00:04:32,900
then we use a hypercar to send receive a

00:04:28,849 --> 00:04:35,810
map to the provider KVM can scan his

00:04:32,900 --> 00:04:40,759
speedy map to send IP is to target

00:04:35,810 --> 00:04:45,830
reviews under web feed american service

00:04:40,759 --> 00:04:49,159
and most 128 target is abused so we can

00:04:45,830 --> 00:04:53,900
see the vmx is lazy the performance

00:04:49,159 --> 00:05:00,219
number we test on the on skylake server

00:04:53,900 --> 00:05:05,680
- socket 40 cores and it his rights the

00:05:00,219 --> 00:05:11,330
IP a micro benchmark has improved by one

00:05:05,680 --> 00:05:19,759
fifty four percent next one is a

00:05:11,330 --> 00:05:24,169
capability to disable exceeds anybody's

00:05:19,759 --> 00:05:26,900
capability or per VM we can provide user

00:05:24,169 --> 00:05:30,289
space with a way to no longer intercept

00:05:26,900 --> 00:05:32,960
some instructions for improved licensing

00:05:30,289 --> 00:05:36,050
summer were closed for example after we

00:05:32,960 --> 00:05:41,150
expose em we'd to the guest we have

00:05:36,050 --> 00:05:44,180
reserved some product workload the

00:05:41,150 --> 00:05:49,789
performance from 80% of Pierre Monteux

00:05:44,180 --> 00:05:54,680
performance to 95% bear mental

00:05:49,789 --> 00:05:59,569
performance the heck bench time can be

00:05:54,680 --> 00:06:02,870
improved by around 1% if we are not in

00:05:59,569 --> 00:06:05,300
the service loop because we have the VM

00:06:02,870 --> 00:06:09,909
has dedicated the physical CPUs

00:06:05,300 --> 00:06:13,310
we don't need intercept the pause loop

00:06:09,909 --> 00:06:18,110
exciting because both the log holders

00:06:13,310 --> 00:06:24,800
and long readers can run similar similar

00:06:18,110 --> 00:06:29,659
to yesterday so we can avoid the yield

00:06:24,800 --> 00:06:35,870
under retake penalty by La Paz loop

00:06:29,659 --> 00:06:38,960
exciting next one is dedicated the

00:06:35,870 --> 00:06:41,150
performance hint the hypervisor

00:06:38,960 --> 00:06:43,190
thank you the gas dedicated the

00:06:41,150 --> 00:06:47,840
performance hint if the guests are where

00:06:43,190 --> 00:06:51,470
we are we have they take a physical CPUs

00:06:47,840 --> 00:06:54,620
the gas that enables some optimizations

00:06:51,470 --> 00:06:57,319
when running on the dedicated physical

00:06:54,620 --> 00:07:00,050
CPUs for example the gas can choose an

00:06:57,319 --> 00:07:04,729
it he'll use to mean log instead of

00:07:00,050 --> 00:07:09,440
hello world kills me long because the VM

00:07:04,729 --> 00:07:16,759
has dedicated physical CPUs the para

00:07:09,440 --> 00:07:22,610
word Cuban law can incur how to under

00:07:16,759 --> 00:07:25,039
wreaking penalty next one is the caster

00:07:22,610 --> 00:07:27,620
can choose native shall be few down

00:07:25,039 --> 00:07:30,590
instead of hello world shall be freedom

00:07:27,620 --> 00:07:33,830
and also we can't disable para ver

00:07:30,590 --> 00:07:36,710
together scheduled the second one and

00:07:33,830 --> 00:07:39,979
the third one are introduced by me to

00:07:36,710 --> 00:07:43,090
optimize the CPU subscriber scenarios so

00:07:39,979 --> 00:07:48,110
we don't need lists on the dedicated

00:07:43,090 --> 00:07:50,900
scenarios the first one is we can enable

00:07:48,110 --> 00:07:56,750
guest hull pooling in this case I will

00:07:50,900 --> 00:07:59,259
introduce this data next one is a tablet

00:07:56,750 --> 00:08:02,150
tune of the ones local a big hammer

00:07:59,259 --> 00:08:04,940
the other ones locally big camera is

00:08:02,150 --> 00:08:07,550
original introduced by Marcelo from Red

00:08:04,940 --> 00:08:10,280
Hat I gave further optimization and

00:08:07,550 --> 00:08:14,360
added the adapter eternal logic this

00:08:10,280 --> 00:08:16,729
year the original idea of the other ones

00:08:14,360 --> 00:08:19,070
located hammer is to head in the

00:08:16,729 --> 00:08:22,340
overhead between local epic hammer

00:08:19,070 --> 00:08:26,000
affairs and before the entry for for

00:08:22,340 --> 00:08:29,300
example here is the diagram the time of

00:08:26,000 --> 00:08:33,770
the emulate hated him affair in T time T

00:08:29,300 --> 00:08:36,560
2 but we go through a long way in the

00:08:33,770 --> 00:08:40,789
hypervisor before inject the hammer in

00:08:36,560 --> 00:08:43,849
the wrap to the VM in time T for the

00:08:40,789 --> 00:08:46,240
guest can wear start timer delay between

00:08:43,849 --> 00:08:49,730
t2 and t4

00:08:46,240 --> 00:08:52,800
can we expel the tremor in the route in

00:08:49,730 --> 00:08:56,329
other ones for example in t1

00:08:52,800 --> 00:08:59,399
we still go through a long way in the

00:08:56,329 --> 00:09:04,079
hypervisor for example in time in

00:08:59,399 --> 00:09:09,949
history but he but we just the hair was

00:09:04,079 --> 00:09:13,920
small Tamara today live over t2 to t3

00:09:09,949 --> 00:09:16,369
advanced it's very advanced is good but

00:09:13,920 --> 00:09:19,799
what's the best of the world's value

00:09:16,369 --> 00:09:22,350
different CPU generations can have

00:09:19,799 --> 00:09:27,299
different way I max it on the VM entry

00:09:22,350 --> 00:09:30,509
overhead and different caster kernel and

00:09:27,299 --> 00:09:35,279
how the kernel versions on the kernel

00:09:30,509 --> 00:09:37,769
config have had different latency so

00:09:35,279 --> 00:09:41,459
what's the best of the ones value we

00:09:37,769 --> 00:09:47,749
should have said I introduced the tablet

00:09:41,459 --> 00:09:52,319
in logic it has a initial initial value

00:09:47,749 --> 00:09:55,259
then we add every tune the advance value

00:09:52,319 --> 00:09:58,319
of step by step smoothly when the guests

00:09:55,259 --> 00:10:00,809
are where it is twirly determine arrival

00:09:58,319 --> 00:10:04,049
it is too early then we will reduce the

00:10:00,809 --> 00:10:07,529
other ones value when it is too late we

00:10:04,049 --> 00:10:09,329
can increase the other ones value let's

00:10:07,529 --> 00:10:12,360
see the performance number I didn't

00:10:09,329 --> 00:10:15,839
enable the kernel preemption imposed gas

00:10:12,360 --> 00:10:20,009
and house the average circulate has can

00:10:15,839 --> 00:10:22,339
be reduced from nine microseconds to 5

00:10:20,009 --> 00:10:26,040
microseconds

00:10:22,339 --> 00:10:29,730
the last one is attempted a hot bullying

00:10:26,040 --> 00:10:32,610
horse on a guest a message passing

00:10:29,730 --> 00:10:37,879
workloads are mentioned by Rick from

00:10:32,610 --> 00:10:41,639
Facebook and Marcelo from Rick from

00:10:37,879 --> 00:10:44,399
Facebook and TV the from Google several

00:10:41,639 --> 00:10:47,040
years ago started kind workloads can

00:10:44,399 --> 00:10:47,660
frequently switches between Rania and

00:10:47,040 --> 00:10:51,360
ido

00:10:47,660 --> 00:10:54,329
even in travelling workloads like our MP

00:10:51,360 --> 00:10:57,029
servers memory cache ready to hana i

00:10:54,329 --> 00:11:01,220
start kind of were close another example

00:10:57,029 --> 00:11:04,740
is TCP our let's take it easy PR as a

00:11:01,220 --> 00:11:06,329
example the clan and the server can pimp

00:11:04,740 --> 00:11:11,160
on one byte of data

00:11:06,329 --> 00:11:15,059
over establish the TCP connection the

00:11:11,160 --> 00:11:17,970
cleanse sent a 1x2 server in a switch

00:11:15,059 --> 00:11:22,259
from random to Adam the server receiver

00:11:17,970 --> 00:11:26,129
is byte understand vampire bag is switch

00:11:22,259 --> 00:11:28,439
from adult running then it's switch from

00:11:26,129 --> 00:11:33,179
running to a door gain and also the

00:11:28,439 --> 00:11:35,610
cleanse switch from idle to running the

00:11:33,179 --> 00:11:38,759
blooper is the VC pew is running under

00:11:35,610 --> 00:11:41,939
the wet margin between to pollute bars

00:11:38,759 --> 00:11:44,850
are visible is added so some kind of

00:11:41,939 --> 00:11:51,569
warlow's can frequently switch between

00:11:44,850 --> 00:11:54,299
rainy and idle when the OS is idle it

00:11:51,569 --> 00:11:57,329
will execute how the instructions which

00:11:54,299 --> 00:12:01,709
can trap to the hypervisor the host or

00:11:57,329 --> 00:12:06,149
scheduler can schedule the recipe or out

00:12:01,709 --> 00:12:13,049
so your is we are max it under schedule

00:12:06,149 --> 00:12:17,069
out penalty can we optimize is to

00:12:13,049 --> 00:12:19,669
penalties maybe we can add some poor

00:12:17,069 --> 00:12:26,069
logic to the before schedule out like

00:12:19,669 --> 00:12:29,269
something like an API in the network so

00:12:26,069 --> 00:12:33,749
if the next in a raft arrive in the

00:12:29,269 --> 00:12:35,790
report Eurasian before schedule then we

00:12:33,749 --> 00:12:40,169
can be a mentor II immediately without

00:12:35,790 --> 00:12:43,079
scheduled if he is to repo duration next

00:12:40,169 --> 00:12:47,669
in a row is not arrived then we can

00:12:43,079 --> 00:12:49,259
schedule out the poor logic is more

00:12:47,669 --> 00:12:52,350
suitable for the message passing

00:12:49,259 --> 00:12:56,129
workload when or not it can suitable for

00:12:52,350 --> 00:12:59,989
other scenarios for example I do Windows

00:12:56,129 --> 00:13:01,730
guest the other windows guest still has

00:12:59,989 --> 00:13:06,679
frequent

00:13:01,730 --> 00:13:10,799
still has periodic camera in the route

00:13:06,679 --> 00:13:16,139
it doesn't like linear guest has

00:13:10,799 --> 00:13:19,110
ticklish features so the windows guest

00:13:16,139 --> 00:13:20,000
each time it handle the camera in a row

00:13:19,110 --> 00:13:25,460
then it

00:13:20,000 --> 00:13:31,300
we'll stay idle until next camera around

00:13:25,460 --> 00:13:33,650
so it can do for a longer time it

00:13:31,300 --> 00:13:37,370
doesn't like massive housing well Oh

00:13:33,650 --> 00:13:41,360
which will switch between rang and idle

00:13:37,370 --> 00:13:45,700
frequently so which has a shot out the

00:13:41,360 --> 00:13:48,470
other window caster has a long hot so

00:13:45,700 --> 00:13:55,550
what's the best the poor duration we

00:13:48,470 --> 00:14:00,650
should said add the adaptively boolean

00:13:55,550 --> 00:14:03,530
logic the poor duration can be attempted

00:14:00,650 --> 00:14:07,580
a shrink on a girl according to the

00:14:03,530 --> 00:14:10,100
history behavior when we detect a shot

00:14:07,580 --> 00:14:15,640
hot like the message passing workload we

00:14:10,100 --> 00:14:15,640
will grow the food duration aggressively

00:14:15,910 --> 00:14:22,220
we will when the long haul is detected

00:14:19,730 --> 00:14:25,550
that we will shrink the poor duration

00:14:22,220 --> 00:14:29,620
aggressively let's see the performance

00:14:25,550 --> 00:14:35,210
number the party bench can improve by

00:14:29,620 --> 00:14:36,940
28% as I mentioned before we are still

00:14:35,210 --> 00:14:43,310
are we amongst it

00:14:36,940 --> 00:14:46,130
so can we avoid that is veeram exit this

00:14:43,310 --> 00:14:49,310
year the marcelo from redhead introduced

00:14:46,130 --> 00:14:53,089
the cpu at the hot pork and governor

00:14:49,310 --> 00:14:56,720
under how the period or ever since

00:14:53,089 --> 00:15:00,500
either put in the guest it can avoid the

00:14:56,720 --> 00:15:03,730
vm exceed cost and it can also avoid

00:15:00,500 --> 00:15:08,900
sending IP i when performing a wake up

00:15:03,730 --> 00:15:15,589
so is there any drawback for his

00:15:08,900 --> 00:15:17,780
solution since pulling is performed is a

00:15:15,589 --> 00:15:21,320
performed in the guest

00:15:17,780 --> 00:15:25,040
we cannot accurately aware whether or

00:15:21,320 --> 00:15:29,089
not there are other runnable tasks in

00:15:25,040 --> 00:15:33,120
the hosta currently but the poor energy

00:15:29,089 --> 00:15:36,149
VM we can detect whether or not the

00:15:33,120 --> 00:15:39,059
scheduler rank you has other renewable

00:15:36,149 --> 00:15:42,209
tasks if we have other renewable cash on

00:15:39,059 --> 00:15:45,689
the schedule their rank you we can stop

00:15:42,209 --> 00:15:52,399
poor in the hostel but we don't know is

00:15:45,689 --> 00:15:52,399
in the guest so easily limited the

00:15:52,430 --> 00:15:58,019
available of scenarios for the how the

00:15:56,189 --> 00:16:01,079
poor governor and how the poor

00:15:58,019 --> 00:16:03,569
adulterers we not now we enable this

00:16:01,079 --> 00:16:05,939
feature when I have either kill

00:16:03,569 --> 00:16:08,819
delicately the perform and hinder to the

00:16:05,939 --> 00:16:14,819
gas which means that the VM has

00:16:08,819 --> 00:16:18,149
dedicated physical CPUs pour in the gas

00:16:14,819 --> 00:16:22,439
so we are not aware we are not in theory

00:16:18,149 --> 00:16:25,709
another the end let's see the

00:16:22,439 --> 00:16:31,019
performance number pulling the ping-pong

00:16:25,709 --> 00:16:37,079
testing who in the cast has better

00:16:31,019 --> 00:16:40,980
legacy than host then then pour in host

00:16:37,079 --> 00:16:47,519
about a little worse than the native

00:16:40,980 --> 00:16:50,029
House need repair mental so is there any

00:16:47,519 --> 00:16:50,029
questions

00:16:57,350 --> 00:17:06,010
hi my questions about the exit list a

00:17:01,250 --> 00:17:06,010
peck timer in the beginning can you go

00:17:08,650 --> 00:17:20,329
yes yes do we have any plans to omit or

00:17:15,770 --> 00:17:22,670
avoid the the exits for programming the

00:17:20,329 --> 00:17:26,870
epic timer so not the firing handling

00:17:22,670 --> 00:17:30,050
the firing but the programming there are

00:17:26,870 --> 00:17:33,860
no such solution but there are several

00:17:30,050 --> 00:17:36,830
or Tamara pass-through solutions in by

00:17:33,860 --> 00:17:43,870
different cloud companies by the way how

00:17:36,830 --> 00:17:46,490
some limit you know in we cannot get a

00:17:43,870 --> 00:17:53,030
generic solution which can be Austrian

00:17:46,490 --> 00:17:54,500
but we have a specific solution by

00:17:53,030 --> 00:17:57,560
internal use

00:17:54,500 --> 00:18:00,430
so for these there are two possible

00:17:57,560 --> 00:18:04,280
solutions one that I strongly discourage

00:18:00,430 --> 00:18:07,370
which is to do IDT shadowing and a lot

00:18:04,280 --> 00:18:11,360
of ugly stuff such as in the older exit

00:18:07,370 --> 00:18:13,880
less interrupt paper to pass the TAC

00:18:11,360 --> 00:18:16,880
deadline MSR directly to the guest and

00:18:13,880 --> 00:18:19,610
this is possible but not really

00:18:16,880 --> 00:18:22,810
recommended and another possibility I

00:18:19,610 --> 00:18:26,450
think was presented two years ago by

00:18:22,810 --> 00:18:30,440
Alibaba and it involves having a

00:18:26,450 --> 00:18:37,910
perpetual eyes timer and a CPU that

00:18:30,440 --> 00:18:40,820
polls on the on the deadline injecting

00:18:37,910 --> 00:18:42,680
the interrupt so on housekeeping to CPU

00:18:40,820 --> 00:18:45,530
that polling that does polling and this

00:18:42,680 --> 00:18:47,630
is actually feasible the Alibaba patches

00:18:45,530 --> 00:18:49,520
didn't really go anywhere but if

00:18:47,630 --> 00:18:51,700
somebody wants to do it we can discuss

00:18:49,520 --> 00:18:51,700
it

00:19:03,510 --> 00:19:10,120
so normal okay thank you yes thank you

00:19:07,030 --> 00:19:17,030
[Applause]

00:19:10,120 --> 00:19:17,030

YouTube URL: https://www.youtube.com/watch?v=1omOreJmIsw


