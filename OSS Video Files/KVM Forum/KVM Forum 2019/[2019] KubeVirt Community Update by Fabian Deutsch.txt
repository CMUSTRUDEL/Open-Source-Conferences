Title: [2019] KubeVirt Community Update by Fabian Deutsch
Publication date: 2019-11-12
Playlist: KVM Forum 2019
Description: 
	KubeVirt enables Kubernetes to run VMs in addition to containers and got introduced 2 years ago. In these 2 years quite a lot has changed and KubeVirt gained traction. In this talk we are

- giving small demo to illustrate how KubeVirt works
- looking at where KubeVirt stands today
- what features it gained
- what architectural shifts it went through
- how traditional components like libvirt are used
- how the community is using KubeVirt
- and what is laying ahead

---

Fabian Deutsch
Red Hat
Engineering Manager

Fabian Deutsch is working for Red Hat and has been working in the virtualization space for the last couple of years. Initially covering some node level aspects in oVirt and now building a robust virtual machine add-on for Kubernetes with KubeVirt.

Throughout the years he spoke at LinuxCon, KVM Forum, KubeCon, FOSDEM, devconf.cz, and other smaller conferences.

Note: We apologize for lower video quality due to technical problems.
Captions: 
	00:00:00,390 --> 00:00:02,750
[Music]

00:00:07,099 --> 00:00:15,509
hey hello good to see so many of you

00:00:11,450 --> 00:00:19,500
well it's a good time after lunch yeah

00:00:15,509 --> 00:00:21,240
so let's get started hello this is

00:00:19,500 --> 00:00:24,840
security a cube root community update

00:00:21,240 --> 00:00:28,140
talk by me and I'm Farah Dodge hello

00:00:24,840 --> 00:00:31,230
good to see you am I'm working fred-head

00:00:28,140 --> 00:00:33,750
on virtualization since KVM I think zero

00:00:31,230 --> 00:00:36,090
11 or what it was when when I read it

00:00:33,750 --> 00:00:40,649
was releasing it after they had acquired

00:00:36,090 --> 00:00:42,469
chrome home run it later on I was then

00:00:40,649 --> 00:00:45,420
joining red head and working on overt

00:00:42,469 --> 00:00:48,140
and now going over to him to the cubed

00:00:45,420 --> 00:00:50,250
project today I want to talk about the

00:00:48,140 --> 00:00:53,160
accompany the API to run virtual

00:00:50,250 --> 00:00:56,670
machines on kubernetes actually and and

00:00:53,160 --> 00:00:58,739
that is what curious about ultimately is

00:00:56,670 --> 00:01:00,629
so technically qubit then allows you to

00:00:58,739 --> 00:01:02,460
run virtual machines alongside

00:01:00,629 --> 00:01:05,369
containers on top of kubernetes because

00:01:02,460 --> 00:01:08,070
communities itself is by itself only we

00:01:05,369 --> 00:01:09,650
intended to run containers and all the

00:01:08,070 --> 00:01:12,030
entities the high-level Orcas

00:01:09,650 --> 00:01:15,390
orchestrating entities on top of that

00:01:12,030 --> 00:01:17,880
cluster in that API are tuned towards

00:01:15,390 --> 00:01:20,189
supporting 12 factor applications and

00:01:17,880 --> 00:01:24,570
which are usually delivered in

00:01:20,189 --> 00:01:26,580
containers and to look while we are

00:01:24,570 --> 00:01:29,520
actually adding VM support to kubernetes

00:01:26,580 --> 00:01:30,990
through an add-on mechanism we should

00:01:29,520 --> 00:01:32,400
look I mean we are not doing that out of

00:01:30,990 --> 00:01:35,060
the blue without you know just because

00:01:32,400 --> 00:01:39,659
it's fun and so so nice to code and go

00:01:35,060 --> 00:01:41,579
we we need to take a step back and let's

00:01:39,659 --> 00:01:42,930
start with the the fact that develops

00:01:41,579 --> 00:01:44,369
are solving problems I mean our

00:01:42,930 --> 00:01:46,619
employers really hope that we're doing

00:01:44,369 --> 00:01:49,110
so and developers can spend time

00:01:46,619 --> 00:01:50,970
otherwise but ultimately we're there to

00:01:49,110 --> 00:01:53,700
solve problems right so we run an

00:01:50,970 --> 00:01:55,320
application to for an airline to you

00:01:53,700 --> 00:01:57,570
know to handle the booking system or a

00:01:55,320 --> 00:01:59,969
we a bank is writing an application

00:01:57,570 --> 00:02:02,340
through the online banking and so that's

00:01:59,969 --> 00:02:04,649
what is ultimately driving us right

00:02:02,340 --> 00:02:07,799
today these applications may run on an

00:02:04,649 --> 00:02:09,450
openstack platform inside of VMs and

00:02:07,799 --> 00:02:11,129
then Jake buses inside of that and they

00:02:09,450 --> 00:02:13,800
can scale it out they can just route it

00:02:11,129 --> 00:02:17,520
across clusters so that's how it usually

00:02:13,800 --> 00:02:19,380
but the landscape and here I mean really

00:02:17,520 --> 00:02:21,390
the the landscapes not only on the VM

00:02:19,380 --> 00:02:23,360
layer but across the stack and below the

00:02:21,390 --> 00:02:25,710
stack is changing or it's evolving

00:02:23,360 --> 00:02:27,240
containers kubernetes which came up like

00:02:25,710 --> 00:02:28,800
three or four years ago first docker

00:02:27,240 --> 00:02:30,480
with with bringing in the container

00:02:28,800 --> 00:02:33,090
concept and then kubernetes bringing in

00:02:30,480 --> 00:02:34,620
you know how to schedule it nicely or

00:02:33,090 --> 00:02:37,470
leverage neither on a cluster of

00:02:34,620 --> 00:02:39,480
machines came along and that fits nicely

00:02:37,470 --> 00:02:41,030
with you know process changes to what's

00:02:39,480 --> 00:02:42,930
a child and that kind of stuff so

00:02:41,030 --> 00:02:44,580
containers and kubernetes not only

00:02:42,930 --> 00:02:46,290
changed the technical tools but they

00:02:44,580 --> 00:02:48,720
also have an impact to to the broader

00:02:46,290 --> 00:02:50,250
organization right more efficient to to

00:02:48,720 --> 00:02:54,540
write develop and deliver those

00:02:50,250 --> 00:02:56,010
applications and ultimately run the

00:02:54,540 --> 00:02:57,870
developers or the users application on

00:02:56,010 --> 00:03:00,150
top of that and ultimately bringing

00:02:57,870 --> 00:03:01,980
value to that whole process to the whole

00:03:00,150 --> 00:03:06,990
org writing or maintaining such an

00:03:01,980 --> 00:03:09,060
application so with these new tools the

00:03:06,990 --> 00:03:11,280
landscape is actually diverse I mean it

00:03:09,060 --> 00:03:12,870
always was and if we look from a higher

00:03:11,280 --> 00:03:15,240
level the diversity probably didn't

00:03:12,870 --> 00:03:17,850
change that much but I want to refer I

00:03:15,240 --> 00:03:19,770
want to get it is that with containers

00:03:17,850 --> 00:03:21,510
and actually with functions as a service

00:03:19,770 --> 00:03:23,459
which are also no concept popping out on

00:03:21,510 --> 00:03:26,610
top of containers I mean cat og vines

00:03:23,459 --> 00:03:31,140
and all of those firecracker they try to

00:03:26,610 --> 00:03:33,480
target the different form factors to

00:03:31,140 --> 00:03:34,860
actually solve application problems so

00:03:33,480 --> 00:03:38,370
if we look from a developer's

00:03:34,860 --> 00:03:40,980
perspective then developers get many

00:03:38,370 --> 00:03:42,600
more tools to achieve or to solve the

00:03:40,980 --> 00:03:44,040
same problems they always had right

00:03:42,600 --> 00:03:45,959
ranking and writing the banking

00:03:44,040 --> 00:03:48,030
application the only making application

00:03:45,959 --> 00:03:51,660
or providing a service for airline

00:03:48,030 --> 00:03:54,240
customers and and that is where Qbert

00:03:51,660 --> 00:03:56,220
comes in right so that's our logo

00:03:54,240 --> 00:03:59,670
what Cupid covers in because we say from

00:03:56,220 --> 00:04:01,590
a developer's perspective we want to

00:03:59,670 --> 00:04:03,480
help the developer to give him all the

00:04:01,590 --> 00:04:06,360
form factors all the tools to solve

00:04:03,480 --> 00:04:08,970
their problem right but with the options

00:04:06,360 --> 00:04:10,040
we have today right so if he is on

00:04:08,970 --> 00:04:12,540
OpenStack

00:04:10,040 --> 00:04:14,190
he has a VMs to deliver that stuff and

00:04:12,540 --> 00:04:16,290
the process is routed needs to be tuned

00:04:14,190 --> 00:04:18,150
towards you know shipping VMs updating

00:04:16,290 --> 00:04:20,790
VMs maybe there's some additional

00:04:18,150 --> 00:04:23,430
tooling inside of those VMs or you know

00:04:20,790 --> 00:04:23,820
related to the application inside that

00:04:23,430 --> 00:04:26,490
VM

00:04:23,820 --> 00:04:31,139
but ultimately it's tuned towards

00:04:26,490 --> 00:04:32,789
that stack he has now if we join or if

00:04:31,139 --> 00:04:36,509
we provide the tools on a single

00:04:32,789 --> 00:04:38,250
platform then we want to empower the

00:04:36,509 --> 00:04:41,009
developer actually to choose the right

00:04:38,250 --> 00:04:43,139
tool for the job he has to do right so

00:04:41,009 --> 00:04:44,849
ultimately we want to enable with Qbert

00:04:43,139 --> 00:04:47,220
one platform for application developers

00:04:44,849 --> 00:04:50,240
to run any workload inside your VMs

00:04:47,220 --> 00:04:53,880
inside of containers or instead of

00:04:50,240 --> 00:04:57,720
inside of inside function containers

00:04:53,880 --> 00:04:59,280
right so that's helpful because the

00:04:57,720 --> 00:05:02,370
application developer only has to deal

00:04:59,280 --> 00:05:04,110
with a single platform to writing for -

00:05:02,370 --> 00:05:06,569
oh yes the whole docker workflow the

00:05:04,110 --> 00:05:09,000
whole pipeline - to build containers and

00:05:06,569 --> 00:05:10,710
run them and he can use the very same

00:05:09,000 --> 00:05:13,740
platform to actually do that with VMs

00:05:10,710 --> 00:05:15,810
maybe as a process to build VM CSS guest

00:05:13,740 --> 00:05:18,509
lib guest affairs to build containers to

00:05:15,810 --> 00:05:20,580
inject it and the VMS and then run them

00:05:18,509 --> 00:05:23,340
on the cloud platform the developer

00:05:20,580 --> 00:05:25,680
himself has one tool to speak to the

00:05:23,340 --> 00:05:29,610
platform one UI to manage the platform

00:05:25,680 --> 00:05:31,560
that is our story but in reality the

00:05:29,610 --> 00:05:33,780
world is sadly not only about developers

00:05:31,560 --> 00:05:36,889
but about many more stakeholders in such

00:05:33,780 --> 00:05:39,810
in such a set up one of the other

00:05:36,889 --> 00:05:42,150
stakeholders in this picture are

00:05:39,810 --> 00:05:44,219
administrators right I mean they provide

00:05:42,150 --> 00:05:46,070
the platform for an application

00:05:44,219 --> 00:05:47,969
developer and the administrators

00:05:46,070 --> 00:05:49,830
responsibility is to maintain such a

00:05:47,969 --> 00:05:52,080
platform and I mean it's not just the

00:05:49,830 --> 00:05:55,199
platform of just OpenStack or not just

00:05:52,080 --> 00:05:58,770
kubernetes or over to something else but

00:05:55,199 --> 00:06:01,139
they usually especially in smaller organ

00:05:58,770 --> 00:06:04,580
they take care of the storage they take

00:06:01,139 --> 00:06:07,560
of networking wiring it all up and

00:06:04,580 --> 00:06:09,479
that's what the admin has to do so if we

00:06:07,560 --> 00:06:12,389
have two platforms the add one is that

00:06:09,479 --> 00:06:14,159
the admin now has not only the choice

00:06:12,389 --> 00:06:15,900
but he also has the responsibility to

00:06:14,159 --> 00:06:17,729
maintain two platforms right to provide

00:06:15,900 --> 00:06:19,770
storage for two platforms OpenStack and

00:06:17,729 --> 00:06:20,960
kubernetes networking OpenStack and

00:06:19,770 --> 00:06:24,419
kubernetes

00:06:20,960 --> 00:06:26,069
so there's much more to do and that's

00:06:24,419 --> 00:06:29,520
usually what is people not making so

00:06:26,069 --> 00:06:31,650
happy and the admin at the developer are

00:06:29,520 --> 00:06:33,509
not the only personas so if we look what

00:06:31,650 --> 00:06:35,400
what is related to a platform right if

00:06:33,509 --> 00:06:36,540
we consider a platform in this context

00:06:35,400 --> 00:06:38,640
to be something like

00:06:36,540 --> 00:06:41,520
and stack or cubed and is an application

00:06:38,640 --> 00:06:43,590
platform to run workloads right then we

00:06:41,520 --> 00:06:44,970
also monitoring alerting logging

00:06:43,590 --> 00:06:48,870
auditing all this authentication

00:06:44,970 --> 00:06:50,730
authorization which cluster operators

00:06:48,870 --> 00:06:52,140
take care of right they need to audit

00:06:50,730 --> 00:06:55,110
your cluster by bringing it going right

00:06:52,140 --> 00:06:56,910
they need to they need to have a lodging

00:06:55,110 --> 00:06:58,980
in place right so if notes go down that

00:06:56,910 --> 00:07:00,870
they can react to it so there's a lot of

00:06:58,980 --> 00:07:02,700
stuff you know from the operational side

00:07:00,870 --> 00:07:04,980
on such a cluster which we would need to

00:07:02,700 --> 00:07:08,130
do for multiple clusters you know in

00:07:04,980 --> 00:07:10,320
case we had them lifecycle management

00:07:08,130 --> 00:07:12,450
providing support and SAS for internal

00:07:10,320 --> 00:07:14,160
customers or external customers building

00:07:12,450 --> 00:07:15,750
up knowledge and experience which in the

00:07:14,160 --> 00:07:17,370
end is something we really need in order

00:07:15,750 --> 00:07:19,260
to meet those as a days right and

00:07:17,370 --> 00:07:20,910
writing documentation so there are a lot

00:07:19,260 --> 00:07:25,920
of people involved actually with running

00:07:20,910 --> 00:07:29,040
a cluster in large organization and if

00:07:25,920 --> 00:07:31,200
we consider this then having Cubert on

00:07:29,040 --> 00:07:34,020
kubernetes and enabling to have many

00:07:31,200 --> 00:07:35,640
form factors for workloads right VMs

00:07:34,020 --> 00:07:37,010
containers and functions on the same

00:07:35,640 --> 00:07:39,960
platform actually helps an organization

00:07:37,010 --> 00:07:41,670
right not just on the developer to be

00:07:39,960 --> 00:07:43,770
more flexible and efficient right

00:07:41,670 --> 00:07:46,650
because we can concentrate our knowledge

00:07:43,770 --> 00:07:48,810
or building up knowledge the workflows

00:07:46,650 --> 00:07:50,610
the documentation the experience the

00:07:48,810 --> 00:07:52,950
course as we go through to get used to a

00:07:50,610 --> 00:07:54,780
new platform we can focus that on a

00:07:52,950 --> 00:07:57,750
single platform right and that is what

00:07:54,780 --> 00:08:00,480
we believe is beneficial for next

00:07:57,750 --> 00:08:02,280
organization so it does change from the

00:08:00,480 --> 00:08:04,470
developer perspective but also from

00:08:02,280 --> 00:08:06,330
other perspectives and matters right

00:08:04,470 --> 00:08:08,700
with this high-level intro actually

00:08:06,330 --> 00:08:10,650
would like to give a live demo so let's

00:08:08,700 --> 00:08:11,790
go there and there to reference this in

00:08:10,650 --> 00:08:15,180
the script in case that somebody's

00:08:11,790 --> 00:08:18,350
interested to do that himself now let's

00:08:15,180 --> 00:08:23,000
try if we can switch this screens so if

00:08:18,350 --> 00:08:23,000
whoops that's it perfect

00:08:24,920 --> 00:08:32,400
all right is that now - awesome all

00:08:30,450 --> 00:08:43,350
right i I don't see that right now I

00:08:32,400 --> 00:08:46,770
just switch this for a second is this

00:08:43,350 --> 00:08:50,370
good enough all right so what I'm doing

00:08:46,770 --> 00:08:52,500
is kubernetes cuber can be added to any

00:08:50,370 --> 00:08:54,180
Q&A disaster I don't want to play with

00:08:52,500 --> 00:08:57,570
the monitory mirroring and so I think

00:08:54,180 --> 00:08:59,580
that's less risky cube root and run on

00:08:57,570 --> 00:08:59,910
any cluster I'm going just to start with

00:08:59,580 --> 00:09:01,770
that

00:08:59,910 --> 00:09:04,050
so the clusters heart we're going to use

00:09:01,770 --> 00:09:05,940
is actually kind which is communities

00:09:04,050 --> 00:09:09,750
and docker containers and we can

00:09:05,940 --> 00:09:11,640
actually verify that by using cube get

00:09:09,750 --> 00:09:14,460
nodes to see that we have a three nodes

00:09:11,640 --> 00:09:21,140
cluster we've got a control plane and

00:09:14,460 --> 00:09:23,910
two workers let me just describe

00:09:21,140 --> 00:09:26,880
now the next step when having such a

00:09:23,910 --> 00:09:29,810
cluster is actually that we start to

00:09:26,880 --> 00:09:37,650
deploy cubed on it what I'm going to use

00:09:29,810 --> 00:09:39,810
is Cubert 22 or 0 22 we're not stable

00:09:37,650 --> 00:09:41,400
yet and the first step we're going to do

00:09:39,810 --> 00:09:43,530
in the third line is actually we're

00:09:41,400 --> 00:09:45,390
applying our cubed operator to V to the

00:09:43,530 --> 00:09:47,070
cluster the operator can be considered

00:09:45,390 --> 00:09:50,340
to be something like an installer but I

00:09:47,070 --> 00:09:56,430
will go into that later on the next part

00:09:50,340 --> 00:09:58,110
or the next two parts actually - to set

00:09:56,430 --> 00:10:00,420
up a configuration for Qbert which is

00:09:58,110 --> 00:10:02,070
done in the config map in the third line

00:10:00,420 --> 00:10:04,170
from the bottom and the second line from

00:10:02,070 --> 00:10:05,790
the bottom is actually telling the

00:10:04,170 --> 00:10:08,850
installer to install Qbert on the

00:10:05,790 --> 00:10:10,710
cluster we take can get an idea if that

00:10:08,850 --> 00:10:16,140
will happen by looking at all the pods

00:10:10,710 --> 00:10:18,630
running on the cluster and we see that

00:10:16,140 --> 00:10:19,920
now we have a couple of of pods running

00:10:18,630 --> 00:10:23,490
pots are effectively a group of

00:10:19,920 --> 00:10:25,620
containers running an application all

00:10:23,490 --> 00:10:28,080
the stuff in cube system is related to

00:10:25,620 --> 00:10:29,760
the to the core kubernetes cluster

00:10:28,080 --> 00:10:32,490
functionality and we see that the

00:10:29,760 --> 00:10:34,290
operator is also running and it started

00:10:32,490 --> 00:10:36,540
with already deploy certain cubed

00:10:34,290 --> 00:10:39,270
components but it's the API so which is

00:10:36,540 --> 00:10:40,650
deploying let's check again because

00:10:39,270 --> 00:10:43,590
there's some more containers yeah here

00:10:40,650 --> 00:10:45,450
we go we've got the handler which is an

00:10:43,590 --> 00:10:46,320
old agent and controller so all in all

00:10:45,450 --> 00:10:48,180
is looking good

00:10:46,320 --> 00:10:50,190
and we should be done in a second that's

00:10:48,180 --> 00:10:51,960
looking very good there's no caching

00:10:50,190 --> 00:10:55,650
here so it's all life from the internet

00:10:51,960 --> 00:10:58,490
now after we deployed Qbert now what we

00:10:55,650 --> 00:11:02,250
can do is actually we can start

00:10:58,490 --> 00:11:05,850
launching VMs what I'm doing is I

00:11:02,250 --> 00:11:10,980
defined a VM so how does it look cated

00:11:05,850 --> 00:11:11,820
just VM it looks a bit messy here we go

00:11:10,980 --> 00:11:13,650
that's better

00:11:11,820 --> 00:11:18,660
so starting at the top we provide some

00:11:13,650 --> 00:11:20,670
metadata no we defined the VM you see

00:11:18,660 --> 00:11:22,440
the spec contains the specification of

00:11:20,670 --> 00:11:25,620
the VM we say it's not going to run

00:11:22,440 --> 00:11:29,370
right now we provide some devices like

00:11:25,620 --> 00:11:31,560
avert or disk to vert artists actually

00:11:29,370 --> 00:11:35,070
and an interface and down here we define

00:11:31,560 --> 00:11:38,330
what the sources of those devices are so

00:11:35,070 --> 00:11:41,130
for network and a service sir OS disk

00:11:38,330 --> 00:11:43,620
alright so far so good now let's start

00:11:41,130 --> 00:11:45,960
the VM we can actually do that by

00:11:43,620 --> 00:11:50,820
editing the definition of this VM just

00:11:45,960 --> 00:11:52,620
need to go down if we are so kubernetes

00:11:50,820 --> 00:11:55,560
is a declarative system so you

00:11:52,620 --> 00:11:58,470
effectively define where it is true

00:11:55,560 --> 00:12:00,360
sorry you define the state of the world

00:11:58,470 --> 00:12:03,840
how you want it to be and the system is

00:12:00,360 --> 00:12:07,340
then taking care of getting the itself

00:12:03,840 --> 00:12:09,960
into that desired state god bless you so

00:12:07,340 --> 00:12:11,640
here we go so we defined it VM which is

00:12:09,960 --> 00:12:13,320
the test VM we defined them about a

00:12:11,640 --> 00:12:16,740
minute ago who reminds me that the demo

00:12:13,320 --> 00:12:18,510
is going on and now we said it's going

00:12:16,740 --> 00:12:19,860
to be running and running VMs are

00:12:18,510 --> 00:12:21,810
represented in qubit luster with

00:12:19,860 --> 00:12:23,100
instances right so for every William you

00:12:21,810 --> 00:12:24,660
have to find it's not necessary

00:12:23,100 --> 00:12:26,760
consuming resources because it stopped

00:12:24,660 --> 00:12:28,680
but once get started then an instance is

00:12:26,760 --> 00:12:31,170
getting created and we see that here we

00:12:28,680 --> 00:12:33,390
see testing was started 18 seconds ago

00:12:31,170 --> 00:12:36,240
it's no running has no penis located on

00:12:33,390 --> 00:12:39,330
the kinder worker so how can we verify

00:12:36,240 --> 00:12:44,250
that this is really working by logging

00:12:39,330 --> 00:12:46,290
into it right Burt CTL so we've got a

00:12:44,250 --> 00:12:47,320
small tool called word CTL which allows

00:12:46,290 --> 00:12:48,880
us to place

00:12:47,320 --> 00:12:54,029
connect to the serial console of a VM

00:12:48,880 --> 00:12:59,009
which happened now here I go

00:12:54,029 --> 00:13:01,600
go caps go and we see with the uptime

00:12:59,009 --> 00:13:05,649
that we now up for less than a minute

00:13:01,600 --> 00:13:10,300
which is not too bad we can also do the

00:13:05,649 --> 00:13:13,089
very same thing with VNC for example and

00:13:10,300 --> 00:13:17,680
here with the pnc window showing us the

00:13:13,089 --> 00:13:20,350
screen of the VM so we defined and

00:13:17,680 --> 00:13:21,730
started VM that's all good we connect it

00:13:20,350 --> 00:13:24,579
to it so the next thing we can actually

00:13:21,730 --> 00:13:26,949
do is to to LACMA grated I mean we have

00:13:24,579 --> 00:13:28,509
a with a kind cluster which has three

00:13:26,949 --> 00:13:29,949
nodes and two of them more workers so we

00:13:28,509 --> 00:13:32,769
can easily migrate now the VM from one

00:13:29,949 --> 00:13:35,290
node to the other actually if we

00:13:32,769 --> 00:13:40,110
convenience command for that so we can

00:13:35,290 --> 00:13:43,269
just say word CT or my grade test VM

00:13:40,110 --> 00:13:45,690
testing was scheduled to migrate we can

00:13:43,269 --> 00:13:45,690
now check

00:13:51,860 --> 00:13:56,300
we can check actually the note where

00:13:53,810 --> 00:13:58,460
it's running and actually by now

00:13:56,300 --> 00:14:00,230
it's running on kind Walker - if we call

00:13:58,460 --> 00:14:02,690
belly-up right here

00:14:00,230 --> 00:14:04,940
it was located on kind worker now it's

00:14:02,690 --> 00:14:08,170
located can't Walker - now we can

00:14:04,940 --> 00:14:15,530
actually see that by saying K describe

00:14:08,170 --> 00:14:17,840
vm i test vm and we see that the target

00:14:15,530 --> 00:14:21,140
was prepared so a new new slot was found

00:14:17,840 --> 00:14:23,030
on the cluster a few a little bit of

00:14:21,140 --> 00:14:24,620
metadata and ultimately we said virtual

00:14:23,030 --> 00:14:28,040
machine instance was got defiled and

00:14:24,620 --> 00:14:30,410
kind of worker - so that's it I mean

00:14:28,040 --> 00:14:32,750
that is a lock migration of the VM or we

00:14:30,410 --> 00:14:38,180
can obviously access it again let's just

00:14:32,750 --> 00:14:43,700
try that here we go we can actually do

00:14:38,180 --> 00:14:45,620
see rose gold cups go up time and we see

00:14:43,700 --> 00:14:47,840
it's up for two minutes which is close

00:14:45,620 --> 00:14:57,710
to how long the demo took and that's it

00:14:47,840 --> 00:14:59,119
so I turn the laptop around again so we

00:14:57,710 --> 00:15:03,039
can

00:14:59,119 --> 00:15:03,039
take the terminal and switch

00:15:08,490 --> 00:15:12,240
it's not my shift this is kind so it's a

00:15:10,800 --> 00:15:14,490
different presentation right so mini

00:15:12,240 --> 00:15:16,440
shift is using a VM and running

00:15:14,490 --> 00:15:18,420
communities inside here you're actually

00:15:16,440 --> 00:15:20,190
using a local doctor instance and then

00:15:18,420 --> 00:15:21,810
running three containers each represent

00:15:20,190 --> 00:15:24,769
a node and then running the control pin

00:15:21,810 --> 00:15:30,480
one of them and the node stuff on others

00:15:24,769 --> 00:15:44,100
I just need to find my there we are

00:15:30,480 --> 00:15:47,779
again come on yeah five darn it so hard

00:15:44,100 --> 00:15:47,779
to do that the wrong way around

00:15:58,209 --> 00:16:01,989
Christ so

00:16:05,220 --> 00:16:11,550
okay right so that was the demo sorry

00:16:08,370 --> 00:16:12,840
for the switching noise um it was not

00:16:11,550 --> 00:16:15,150
running mini shift of what's running in

00:16:12,840 --> 00:16:16,410
Europe in kind which allows us to do the

00:16:15,150 --> 00:16:17,700
migration because the problem with mini

00:16:16,410 --> 00:16:21,120
shift is that young every single node

00:16:17,700 --> 00:16:22,560
right now we looked at what we believe

00:16:21,120 --> 00:16:24,030
cubed makes sense we looked at how it

00:16:22,560 --> 00:16:25,560
works when you run it on Communities

00:16:24,030 --> 00:16:27,390
cluster and I just want to highlight so

00:16:25,560 --> 00:16:29,460
this was a live installation of Qbert on

00:16:27,390 --> 00:16:31,050
a two node cluster it would work the

00:16:29,460 --> 00:16:32,610
very same way if you're doing it on a I

00:16:31,050 --> 00:16:35,040
don't know 100 nodes cluster or thousand

00:16:32,610 --> 00:16:36,990
or cluster you just do that manifest

00:16:35,040 --> 00:16:38,760
definition is getting all deployed now

00:16:36,990 --> 00:16:40,110
what what does cube or do I can

00:16:38,760 --> 00:16:42,330
obviously not present all the features

00:16:40,110 --> 00:16:44,100
that Qbert has so that's why I wrote at

00:16:42,330 --> 00:16:46,470
least the Delta from last year in this

00:16:44,100 --> 00:16:49,260
slide deck let's start so the

00:16:46,470 --> 00:16:55,410
virtualization features which that's

00:16:49,260 --> 00:16:58,890
getting tricky just second please here

00:16:55,410 --> 00:17:00,240
we go so SRV and vgpu pass through these

00:16:58,890 --> 00:17:02,280
are our two bigger features which were

00:17:00,240 --> 00:17:04,829
added in the last year SRV support was

00:17:02,280 --> 00:17:07,020
mainly added by I couldn't community

00:17:04,829 --> 00:17:09,120
contributors that cough because they're

00:17:07,020 --> 00:17:10,579
doing networking processing inside the

00:17:09,120 --> 00:17:13,500
cube root VMs on top of a bare-metal

00:17:10,579 --> 00:17:15,660
kubernetes cluster vgpu and GPU

00:17:13,500 --> 00:17:17,550
pass-through support is pretty new it

00:17:15,660 --> 00:17:19,410
was actually added by Nvidia because

00:17:17,550 --> 00:17:22,530
they want to run graphical applications

00:17:19,410 --> 00:17:24,329
and AI mlmers workloads inside VMs

00:17:22,530 --> 00:17:26,459
because they just can't the run can't

00:17:24,329 --> 00:17:28,890
run them in containers that was also

00:17:26,459 --> 00:17:34,530
contributed by by community member and

00:17:28,890 --> 00:17:36,510
VD itself himself themselves the next

00:17:34,530 --> 00:17:39,090
features that were added is for example

00:17:36,510 --> 00:17:40,740
CDI so on communities we try to work

00:17:39,090 --> 00:17:42,960
with the storage systems that

00:17:40,740 --> 00:17:46,110
communities is providing so file systems

00:17:42,960 --> 00:17:47,610
and ro block storage but we have cue cow

00:17:46,110 --> 00:17:49,380
in the traditional virtualization world

00:17:47,610 --> 00:17:51,690
and other VM image support like VMDK

00:17:49,380 --> 00:17:53,310
from vmware and CDI is a component to

00:17:51,690 --> 00:17:55,410
actually to to the import and

00:17:53,310 --> 00:17:58,980
translation or transformation of that

00:17:55,410 --> 00:18:02,190
storage into the cube root cubed area we

00:17:58,980 --> 00:18:04,560
also added at this rough support for v2

00:18:02,190 --> 00:18:07,980
v2 import VMs from vmware and other

00:18:04,560 --> 00:18:11,160
platforms into Cubert didst and that is

00:18:07,980 --> 00:18:13,050
still rough around the edges but the

00:18:11,160 --> 00:18:14,550
intention is clear right we want to

00:18:13,050 --> 00:18:16,560
allow or we want to help people to

00:18:14,550 --> 00:18:18,419
converge into a single platform to

00:18:16,560 --> 00:18:20,190
describe what to have what

00:18:18,419 --> 00:18:25,859
Cripe early on was seeing a platform to

00:18:20,190 --> 00:18:31,350
run all of your workloads here we go

00:18:25,859 --> 00:18:34,769
next one life and live block migration

00:18:31,350 --> 00:18:37,019
so as just demonstrated cuber is now

00:18:34,769 --> 00:18:38,429
supporting I mean we supported two years

00:18:37,019 --> 00:18:40,049
ago what we had to rip it out due to the

00:18:38,429 --> 00:18:41,639
implementation details but now we

00:18:40,049 --> 00:18:43,379
finally have have a robust

00:18:41,639 --> 00:18:45,509
implementation for live migration and

00:18:43,379 --> 00:18:46,320
block migration so for shared a non

00:18:45,509 --> 00:18:48,149
shared storage

00:18:46,320 --> 00:18:49,799
it's a classic feature there's nothing

00:18:48,149 --> 00:18:51,960
fancy to it nice thing is that we have

00:18:49,799 --> 00:18:53,879
it by now this also works by the way

00:18:51,960 --> 00:18:55,739
with additional interfaces so VM can

00:18:53,879 --> 00:18:57,720
have multiple interfaces in Cubert and

00:18:55,739 --> 00:18:59,759
you obviously get the same features you

00:18:57,720 --> 00:19:02,399
expect him from OpenStack or overt for

00:18:59,759 --> 00:19:04,830
example where the focus of the last year

00:19:02,399 --> 00:19:07,950
on security so we weren't proofing the

00:19:04,830 --> 00:19:11,309
axillary nodes contain mint and getting

00:19:07,950 --> 00:19:13,230
rid of capabilities on the workload

00:19:11,309 --> 00:19:15,269
container so on the VM which is running

00:19:13,230 --> 00:19:19,350
the workload to more more capabilities

00:19:15,269 --> 00:19:21,389
from from that VM then there's many

00:19:19,350 --> 00:19:22,649
smaller things right so this is mainly

00:19:21,389 --> 00:19:25,440
for reference in case you're interested

00:19:22,649 --> 00:19:28,409
what else can Cuba do please take a look

00:19:25,440 --> 00:19:32,330
at that slide it was just not added in

00:19:28,409 --> 00:19:32,330
the recent year but in the time before

00:19:32,899 --> 00:19:38,190
those were cute personalization features

00:19:35,759 --> 00:19:39,509
now look at what else have we done

00:19:38,190 --> 00:19:41,309
because the virtualizations

00:19:39,509 --> 00:19:43,440
virtualization features are good right

00:19:41,309 --> 00:19:45,299
in order to swirl the workloads that are

00:19:43,440 --> 00:19:48,330
supported or mistaken or other platforms

00:19:45,299 --> 00:19:53,100
but we want to do more so delivery in

00:19:48,330 --> 00:19:56,730
operations first we added or improved

00:19:53,100 --> 00:19:58,559
our CI support and we added CI or to

00:19:56,730 --> 00:19:59,669
deploy cured and do all the integration

00:19:58,559 --> 00:20:01,259
tests and functional testing on

00:19:59,669 --> 00:20:03,210
communities and OpenShift as two

00:20:01,259 --> 00:20:06,059
platforms with different versions and we

00:20:03,210 --> 00:20:07,889
have like roughly two 450 functional

00:20:06,059 --> 00:20:09,419
tests to ensure that the operations are

00:20:07,889 --> 00:20:11,489
really or that we don't need to use

00:20:09,419 --> 00:20:16,080
regressions from tests from release to

00:20:11,489 --> 00:20:17,820
release and that is also to support the

00:20:16,080 --> 00:20:19,529
operator we introduced the operators

00:20:17,820 --> 00:20:21,239
effectively at the Installer

00:20:19,529 --> 00:20:23,519
which we saw early on and the operator

00:20:21,239 --> 00:20:27,269
is also responsible for performing the

00:20:23,519 --> 00:20:29,760
updates of qubit itself in contrast to

00:20:27,269 --> 00:20:31,890
platforms like OpenStack or overt

00:20:29,760 --> 00:20:33,770
the update cadence of container based

00:20:31,890 --> 00:20:38,790
applications is rather days or weeks

00:20:33,770 --> 00:20:39,870
instead of months thank you and yeah we

00:20:38,790 --> 00:20:41,430
actually I think we're actually pretty

00:20:39,870 --> 00:20:43,520
happy to have that operator and it

00:20:41,430 --> 00:20:46,260
actually does allow us to do

00:20:43,520 --> 00:20:50,070
non-disruptive updates of the qubit

00:20:46,260 --> 00:20:55,500
control plane components what happened

00:20:50,070 --> 00:20:56,130
the community so because so first the

00:20:55,500 --> 00:20:58,590
human community

00:20:56,130 --> 00:21:00,300
evolved right so we've quite a lot of

00:20:58,590 --> 00:21:03,200
get up stars with active contribution

00:21:00,300 --> 00:21:07,230
that contributors and users of of Qbert

00:21:03,200 --> 00:21:09,120
Apple Akamai ASAP stack path OSI they

00:21:07,230 --> 00:21:11,670
use it for different use cases many for

00:21:09,120 --> 00:21:13,620
classical vm usage but also for

00:21:11,670 --> 00:21:15,270
higher-level use cases like having

00:21:13,620 --> 00:21:20,370
multi-tenancy in communities itself

00:21:15,270 --> 00:21:21,780
based on those VMs the community also

00:21:20,370 --> 00:21:23,430
then picked up the new features we

00:21:21,780 --> 00:21:25,710
developed of the year like the operator

00:21:23,430 --> 00:21:27,450
is really it really makes it slick to

00:21:25,710 --> 00:21:29,580
install it on top of other communities

00:21:27,450 --> 00:21:30,990
clusters that is why got integrated to

00:21:29,580 --> 00:21:33,270
operate a hub which is effectively

00:21:30,990 --> 00:21:35,460
marketplace for a range of operators for

00:21:33,270 --> 00:21:37,380
I don't know Microsoft SQL servers

00:21:35,460 --> 00:21:42,000
present at there and PostgreSQL and

00:21:37,380 --> 00:21:45,330
others and now cuber as well we added

00:21:42,000 --> 00:21:46,710
HTC o or Red Hat a DAT HCO which is an

00:21:45,330 --> 00:21:48,660
opinionated set of components to

00:21:46,710 --> 00:21:50,520
actually support the classical

00:21:48,660 --> 00:21:52,920
virtualization even more right with

00:21:50,520 --> 00:21:54,510
fencing with storage solutions with all

00:21:52,920 --> 00:21:56,730
the networking stuff you need in order

00:21:54,510 --> 00:22:00,450
to support layer 2 networking and so on

00:21:56,730 --> 00:22:02,580
and so forth katako de we improved our

00:22:00,450 --> 00:22:04,410
documentation side we have cata coda

00:22:02,580 --> 00:22:09,740
scenarios which allow you or users to

00:22:04,410 --> 00:22:09,740
get easier into playing with Qbert and

00:22:10,130 --> 00:22:15,600
ultimately also a very nice thing which

00:22:13,530 --> 00:22:17,430
was interesting to us is that we were

00:22:15,600 --> 00:22:19,830
able to enter the scene thief sandbox

00:22:17,430 --> 00:22:21,720
scene CFUs organization to to be a

00:22:19,830 --> 00:22:24,810
neutral place for cloud native

00:22:21,720 --> 00:22:26,820
applications and we met the criteria and

00:22:24,810 --> 00:22:29,160
could join it which is great and that

00:22:26,820 --> 00:22:33,450
mainly happened because we had users and

00:22:29,160 --> 00:22:35,640
developers developing it vendors so I

00:22:33,450 --> 00:22:37,080
think a sign for our maturity is

00:22:35,640 --> 00:22:40,230
actually that vendors started to pick up

00:22:37,080 --> 00:22:42,000
Qbert the first one is Red Hat so I'm

00:22:40,230 --> 00:22:42,900
working for it and part of the CNB team

00:22:42,000 --> 00:22:46,320
and

00:22:42,900 --> 00:22:48,180
two years ago Cindy was or the EPOC of

00:22:46,320 --> 00:22:49,710
Cindy was presented but earlier this

00:22:48,180 --> 00:22:52,410
year we actually started to provide a

00:22:49,710 --> 00:22:53,790
tech preview base and Hubert which is

00:22:52,410 --> 00:22:56,190
called container native virtualization

00:22:53,790 --> 00:22:57,630
which is now getting shipped and you can

00:22:56,190 --> 00:23:00,090
actually install it using the operator

00:22:57,630 --> 00:23:02,700
we are laundering it or I I showed off

00:23:00,090 --> 00:23:05,220
earlier today not only today but just a

00:23:02,700 --> 00:23:08,790
few seconds ago Lutz is another vendor

00:23:05,220 --> 00:23:10,470
in the community space mainly interested

00:23:08,790 --> 00:23:12,090
in doing cluster labs kubernetes cluster

00:23:10,470 --> 00:23:13,950
lifecycle management and providing

00:23:12,090 --> 00:23:15,990
clusters to customers and they added

00:23:13,950 --> 00:23:17,610
native support for Qbert so what they

00:23:15,990 --> 00:23:19,710
can do now is they can ask a classmate

00:23:17,610 --> 00:23:22,290
to provide a bare-metal OpenShift or

00:23:19,710 --> 00:23:24,570
kubernetes cluster then they point their

00:23:22,290 --> 00:23:26,490
tooling to that cluster and they can

00:23:24,570 --> 00:23:28,440
actually run more kubernetes cluster on

00:23:26,490 --> 00:23:30,810
that bi-metal setup that effectively

00:23:28,440 --> 00:23:32,580
allows customers to not have VMware or

00:23:30,810 --> 00:23:36,330
OpenStack in the space anymore

00:23:32,580 --> 00:23:38,370
so to remove this ya this other platform

00:23:36,330 --> 00:23:39,480
and just work with kubernetes cube CTL

00:23:38,370 --> 00:23:43,320
becomes the tool of choice in that

00:23:39,480 --> 00:23:45,240
scenario we can do the end platform 9

00:23:43,320 --> 00:23:47,820
just recently announced that they picked

00:23:45,240 --> 00:23:49,860
Qbert to actually increase their Halbert

00:23:47,820 --> 00:23:52,080
a hybrid cloud story so they actually

00:23:49,860 --> 00:23:54,210
provide managed kubernetes to cluster

00:23:52,080 --> 00:23:56,970
customers and they added Qbert support

00:23:54,210 --> 00:24:01,710
so that from the same API customers can

00:23:56,970 --> 00:24:03,240
now deploy VMs and containers and what

00:24:01,710 --> 00:24:06,110
the future and I'll make it in time I

00:24:03,240 --> 00:24:08,550
hope that's not so much to say about it

00:24:06,110 --> 00:24:10,350
we want to make sure and we want to meet

00:24:08,550 --> 00:24:11,940
reality so what do I mean I think with

00:24:10,350 --> 00:24:14,760
MIT reality is the more important point

00:24:11,940 --> 00:24:16,910
is we want to get closer to the users

00:24:14,760 --> 00:24:19,320
and really see the adoption of Qbert and

00:24:16,910 --> 00:24:20,880
get to know the pain points I mean we've

00:24:19,320 --> 00:24:23,310
got some experience with virtualization

00:24:20,880 --> 00:24:24,600
but it really is we really want to see

00:24:23,310 --> 00:24:26,280
how does it behave in the kubernetes

00:24:24,600 --> 00:24:29,280
context what are the difficulties what

00:24:26,280 --> 00:24:33,090
are the pain points what what do we need

00:24:29,280 --> 00:24:34,860
to improve and I think that's it I think

00:24:33,090 --> 00:24:37,680
you very much there's a few references

00:24:34,860 --> 00:24:39,360
on here on that slide and I wish you a

00:24:37,680 --> 00:24:42,950
safe travel back home if they're

00:24:39,360 --> 00:24:42,950
questions this is the right time to ask

00:24:45,440 --> 00:24:50,340
that's a great question so I would reply

00:24:48,480 --> 00:24:53,490
that no it's not yet an alternative to

00:24:50,340 --> 00:24:55,140
OpenStack but you can try it if you know

00:24:53,490 --> 00:24:58,350
OpenStack then Cupid is something you

00:24:55,140 --> 00:24:59,790
want to try yeah give it a try and try

00:24:58,350 --> 00:25:05,190
it out you just need kubernetes in the

00:24:59,790 --> 00:25:07,200
middle no it's a different use case to

00:25:05,190 --> 00:25:09,690
quatre containers so quatre containers

00:25:07,200 --> 00:25:11,910
is actually used to isolate containers

00:25:09,690 --> 00:25:14,790
so in case you wonder you know how does

00:25:11,910 --> 00:25:16,710
it fit you can easily use cata to secure

00:25:14,790 --> 00:25:18,540
your containers but you can sadly not

00:25:16,710 --> 00:25:23,070
use it to run VMs in that case you can

00:25:18,540 --> 00:25:26,160
use Cubert sorry I'm not answering any

00:25:23,070 --> 00:25:28,100
political questions ok thank you we are

00:25:26,160 --> 00:25:31,480
out of time

00:25:28,100 --> 00:25:38,619
[Applause]

00:25:31,480 --> 00:25:38,619

YouTube URL: https://www.youtube.com/watch?v=PxYr-gdR8Ko


