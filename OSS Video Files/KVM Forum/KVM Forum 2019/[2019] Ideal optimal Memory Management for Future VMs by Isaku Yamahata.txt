Title: [2019] Ideal optimal Memory Management for Future VMs by Isaku Yamahata
Publication date: 2019-11-12
Playlist: KVM Forum 2019
Description: 
	We argue that memory management for future VMs ought to be different from the one for Linux processes. Recently new types of memory, such as persistent memory, encrypted memory, are emerging, and they have different characteristics or require different (or additional) operations (e.g. flush caches) in terms of memory management. Although KVM has started to reuse the Linux kernel mechanism and benefited, itâ€™s becoming difficult to keep using the kernel memory management for guests to meet those requirements, while achieving performance and simplicity. For example, various aspects of memory management are different: life cycles, page sizes, page invalidation, page access/modification tracking, memory ballooning, security, and isolation (e.g. from the host). In this session we discuss ideal/optimal memory management for guest VMs, possible implementation options, and preliminary PoC.

---

Isaku Yamahata
Intel
Software Engineer

Isaku Yamahata is a Software architect in the
Open Source Technology Center, Intel. His main
focus is virtualization technology, network
virtualization as Software Defined Networking for
multiple years. Isaku is an active on Graphene
LibOS and OpenStack Neutron (networking) and
has in the past contributed significantly to qemu,
kvm, Xen, Ryu SDN framework and OpenDaylight.
He has the experiences of presentation at the
past Linux Foundation event such as CloudOpen,
Linux Plumbers, LinuxCon, KVM Forum, Xen
Summit.

Note: We apologize for lower video quality due to technical problems.
Captions: 
	00:00:00,390 --> 00:00:02,750
[Music]

00:00:06,560 --> 00:00:13,170
hello a video I'm insecure Mahuta and

00:00:10,320 --> 00:00:15,440
working for injured in this session I'd

00:00:13,170 --> 00:00:18,830
like to discuss about that current

00:00:15,440 --> 00:00:23,730
existing kV guests memory management and

00:00:18,830 --> 00:00:28,680
what is missing what is technical job to

00:00:23,730 --> 00:00:31,130
be killed and it's addiction to make

00:00:28,680 --> 00:00:35,160
decision as a starting point for

00:00:31,130 --> 00:00:42,180
discussion of a future to make progress

00:00:35,160 --> 00:00:45,059
in early phase of KVM development the

00:00:42,180 --> 00:00:49,739
this design decision was made to reduce

00:00:45,059 --> 00:00:51,329
the existing Linux infrastructure as

00:00:49,739 --> 00:00:54,960
much as possible

00:00:51,329 --> 00:00:59,370
the main disease KVM is a part of links

00:00:54,960 --> 00:01:08,180
so it should blending links source code

00:00:59,370 --> 00:01:11,520
and it should not reinvent with and in

00:01:08,180 --> 00:01:15,000
the major component of KVM is guest

00:01:11,520 --> 00:01:18,479
memory management and naturally it was

00:01:15,000 --> 00:01:22,409
built around existing links memory

00:01:18,479 --> 00:01:26,159
management in memory margin management

00:01:22,409 --> 00:01:28,500
is basically conversion from butter

00:01:26,159 --> 00:01:33,060
address space to host physical address

00:01:28,500 --> 00:01:36,600
space so KBM guest memory management is

00:01:33,060 --> 00:01:51,000
visit around on sort of a page fault

00:01:36,600 --> 00:01:54,360
interface and stock page and so on but

00:01:51,000 --> 00:01:57,869
yeah it's the design decision was made

00:01:54,360 --> 00:02:01,979
long ago and the station has changed

00:01:57,869 --> 00:02:06,170
changed a lot and we are seeing lots of

00:02:01,979 --> 00:02:09,899
emerging new requirement for memory

00:02:06,170 --> 00:02:13,030
typically yeah use double memory has

00:02:09,899 --> 00:02:18,280
increased so we'd like to you

00:02:13,030 --> 00:02:23,640
is less for performance or for lower low

00:02:18,280 --> 00:02:27,310
overhead memory management because the

00:02:23,640 --> 00:02:31,240
granny granny 82 assign into his memory

00:02:27,310 --> 00:02:34,810
is much larger than guest it's not folk

00:02:31,240 --> 00:02:37,120
about folk abide might be too small on

00:02:34,810 --> 00:02:41,490
the other hand yeah to employ increased

00:02:37,120 --> 00:02:48,010
memory density yeah we like to actively

00:02:41,490 --> 00:02:53,920
swap out guest memory to buy what memory

00:02:48,010 --> 00:02:58,090
by compression by Nvidia technology was

00:02:53,920 --> 00:03:01,300
so and there are several research

00:02:58,090 --> 00:03:03,930
academic paper weight and also we are

00:03:01,300 --> 00:03:09,400
seeing memory encryption to protect

00:03:03,930 --> 00:03:12,690
memory you get data from even from post

00:03:09,400 --> 00:03:18,430
canary hypervisor evening from familiar

00:03:12,690 --> 00:03:20,860
and resolve for security reasons memory

00:03:18,430 --> 00:03:24,720
isolation is also highly desirable to

00:03:20,860 --> 00:03:27,519
isolate post canary user space

00:03:24,720 --> 00:03:32,290
hypervisor even only happy birthday as a

00:03:27,519 --> 00:03:34,600
kayvyun module guests guests memory this

00:03:32,290 --> 00:03:37,480
evening this afternoon yeah there are

00:03:34,600 --> 00:03:40,930
also another sessions for memorized

00:03:37,480 --> 00:03:43,420
isolation and also for faster the reboot

00:03:40,930 --> 00:03:47,640
yeah yesterday there was a session on it

00:03:43,420 --> 00:03:51,100
and you know he is the POC is to utilize

00:03:47,640 --> 00:03:56,200
reserved memory to store guest memory

00:03:51,100 --> 00:03:59,380
but just reserving memories too is not

00:03:56,200 --> 00:04:02,890
flexible so we dragged to only deserve

00:03:59,380 --> 00:04:08,080
all the only frame really vivid wants to

00:04:02,890 --> 00:04:10,150
down so when we drag do we do faster a

00:04:08,080 --> 00:04:14,290
bit yeah we director deserve some memory

00:04:10,150 --> 00:04:16,720
hunting yeah we've to get memory from

00:04:14,290 --> 00:04:21,609
existing one to remember

00:04:16,720 --> 00:04:22,930
so that management will be each and I so

00:04:21,609 --> 00:04:26,050
it's

00:04:22,930 --> 00:04:30,610
so because things has changed a lot so

00:04:26,050 --> 00:04:34,560
it's time to revise it under 200 yeah to

00:04:30,610 --> 00:04:42,630
make KVM gets me more management is for

00:04:34,560 --> 00:04:46,449
new technologies so basically yeah but

00:04:42,630 --> 00:04:52,630
we should for new class of memory and

00:04:46,449 --> 00:04:57,100
the best group guy is the re decision to

00:04:52,630 --> 00:05:05,050
tie KVM case management to management

00:04:57,100 --> 00:05:09,910
and everything is amazing and so basic

00:05:05,050 --> 00:05:15,630
idea is to the top keep him guess memory

00:05:09,910 --> 00:05:15,630
management from memory management and

00:05:17,910 --> 00:05:27,449
fortunately yeah so yeah we don't want

00:05:21,130 --> 00:05:32,710
we don't want to require gift a mapping

00:05:27,449 --> 00:05:38,370
kill him mapping country KVM guess

00:05:32,710 --> 00:05:43,289
memory requires but a memory in GME but

00:05:38,370 --> 00:05:46,750
under so we don't want depend on page

00:05:43,289 --> 00:05:50,199
fortunately yeah right now already gave

00:05:46,750 --> 00:05:53,710
in Canada doesn't depend depend on stage

00:05:50,199 --> 00:05:55,870
already and also we don't want depend on

00:05:53,710 --> 00:05:58,630
Connie direct mapping for security

00:05:55,870 --> 00:06:01,930
reasons and also as a result here we

00:05:58,630 --> 00:06:11,289
don't we don't want to use case of tea

00:06:01,930 --> 00:06:14,740
for so-and-so typically a new memory

00:06:11,289 --> 00:06:25,050
technology is in permitted River and

00:06:14,740 --> 00:06:28,300
then various operations so we'd like to

00:06:25,050 --> 00:06:34,030
modify client

00:06:28,300 --> 00:06:37,780
KVM mismanagement to use all those those

00:06:34,030 --> 00:06:40,240
davis to reverse and also for vomit yeah

00:06:37,780 --> 00:06:43,840
we needed to we drag those yeah

00:06:40,240 --> 00:06:47,470
access be to what that beat in a PTSD be

00:06:43,840 --> 00:06:50,940
did paste it so that scanner was a bad

00:06:47,470 --> 00:06:53,500
candy can identify which page should be

00:06:50,940 --> 00:06:55,979
should be swapped out and then you know

00:06:53,500 --> 00:06:55,979
it can't

00:06:55,990 --> 00:07:02,949
and also yeah oh and also to swap out

00:06:59,050 --> 00:07:06,250
yeah we have to detach those pages from

00:07:02,949 --> 00:07:10,110
apt tables so we need to notification to

00:07:06,250 --> 00:07:19,810
get module and this is a replacement for

00:07:10,110 --> 00:07:22,539
displacement for thing mmm you not so

00:07:19,810 --> 00:07:25,419
yeah essentially yeah what what

00:07:22,539 --> 00:07:31,270
operation needs to be done and yeah i

00:07:25,419 --> 00:07:34,210
think basically we need a conversion we

00:07:31,270 --> 00:07:40,449
need a location with dedication of the

00:07:34,210 --> 00:07:44,409
particle memory it would be on vm

00:07:40,449 --> 00:07:51,039
incision dynamically EPT but it happens

00:07:44,409 --> 00:07:54,159
yeah dynamical and also when EPT virus

00:07:51,039 --> 00:07:57,909
is happened yeah we need to combat from

00:07:54,159 --> 00:08:02,560
guest address address physical address

00:07:57,909 --> 00:08:05,379
and also yeah we need a notification for

00:08:02,560 --> 00:08:08,949
swapping out and access that if it

00:08:05,379 --> 00:08:14,340
english needed and afteri access that

00:08:08,949 --> 00:08:18,300
abit logging is a stable so this

00:08:14,340 --> 00:08:23,110
interface will be are keeping interface

00:08:18,300 --> 00:08:25,840
under the current that pays logging

00:08:23,110 --> 00:08:29,169
interface typically used for live

00:08:25,840 --> 00:08:32,440
migration so for live migration it needs

00:08:29,169 --> 00:08:35,709
to be the page needs to be broken into

00:08:32,440 --> 00:08:39,250
four cable for cabbage because yeah if

00:08:35,709 --> 00:08:40,910
we use simply we use simply large spaces

00:08:39,250 --> 00:08:44,660
yeah probably yeah

00:08:40,910 --> 00:08:49,130
based on combat converse to small small

00:08:44,660 --> 00:08:50,180
working set but for swapping apart well

00:08:49,130 --> 00:08:56,740
overcome it

00:08:50,180 --> 00:09:00,830
yeah we like to keep that speech so

00:08:56,740 --> 00:09:04,970
question is how to implement it and the

00:09:00,830 --> 00:09:09,470
currently emerging technology modifies

00:09:04,970 --> 00:09:13,540
GME and KVM each on on their own and

00:09:09,470 --> 00:09:16,910
they're making changes directly to KVM

00:09:13,540 --> 00:09:20,840
work and that is what the happening

00:09:16,910 --> 00:09:23,420
but it doesn't scale and so another

00:09:20,840 --> 00:09:27,590
choice is to introduce new class of

00:09:23,420 --> 00:09:31,460
device durable and then yeah rewrite the

00:09:27,590 --> 00:09:34,930
existing device driver to adapt it but I

00:09:31,460 --> 00:09:38,200
think this is difficult for example

00:09:34,930 --> 00:09:41,750
positive percent memory yeah it has a

00:09:38,200 --> 00:09:46,280
premium device driver so probably it

00:09:41,750 --> 00:09:50,090
would be difficult to change premium

00:09:46,280 --> 00:09:53,360
deliver only 4k p.m. useless so yeah

00:09:50,090 --> 00:09:56,270
third option is to define your Apple

00:09:53,360 --> 00:09:59,900
interface and to write a adapter but for

00:09:56,270 --> 00:10:05,750
each device to reverse and probably I

00:09:59,900 --> 00:10:09,160
think this option the fish in at least

00:10:05,750 --> 00:10:09,160
in our middle town

00:10:12,120 --> 00:10:20,730
so so then next question is yeah what a

00:10:17,089 --> 00:10:23,480
concrete interface will be and basically

00:10:20,730 --> 00:10:28,939
yeah at the conversion from guest

00:10:23,480 --> 00:10:32,759
physicalist host physical address is

00:10:28,939 --> 00:10:37,430
considered conversion from five logical

00:10:32,759 --> 00:10:39,870
file of to a sector and in this case we

00:10:37,430 --> 00:10:44,639
interpret sector as a host of physical

00:10:39,870 --> 00:10:47,759
others and this this is what textures

00:10:44,639 --> 00:10:49,740
and also file system have provides an

00:10:47,759 --> 00:10:53,309
interface for various options to

00:10:49,740 --> 00:10:56,879
allocate block it's a frk evaluating a

00:10:53,309 --> 00:11:00,089
patient to geolocate block it's a punch

00:10:56,879 --> 00:11:06,930
hole and to prevent future in mapping

00:11:00,089 --> 00:11:11,059
it's a interface and new new VM is

00:11:06,930 --> 00:11:15,329
created and new memories assigned to him

00:11:11,059 --> 00:11:18,209
it can be considered a sort of new file

00:11:15,329 --> 00:11:24,509
creation so it can be mapped to be

00:11:18,209 --> 00:11:32,309
notified so I chose to reuse file system

00:11:24,509 --> 00:11:35,579
interface if we drag to make kbm a sort

00:11:32,309 --> 00:11:38,269
of type 1 hypervisor yeah probably

00:11:35,579 --> 00:11:45,329
we'd like to have our own self-contained

00:11:38,269 --> 00:11:51,749
interface I think long term Dixon so at

00:11:45,329 --> 00:11:54,839
this point I just reuse interface under

00:11:51,749 --> 00:11:59,249
after the conversion from logical file

00:11:54,839 --> 00:12:06,170
of the sector is a very file system

00:11:59,249 --> 00:12:11,059
dependent so we need a file system and

00:12:06,170 --> 00:12:14,089
it can be a very small surface just

00:12:11,059 --> 00:12:17,459
accommodate to use existing things

00:12:14,089 --> 00:12:19,709
versus me interface under under the idea

00:12:17,459 --> 00:12:23,850
we can write a sort of they are the file

00:12:19,709 --> 00:12:26,500
system it may

00:12:23,850 --> 00:12:28,779
complicates looking profitable but I

00:12:26,500 --> 00:12:31,800
think you know it links us already

00:12:28,779 --> 00:12:35,200
layered fire season yeah it can be done

00:12:31,800 --> 00:12:45,190
not not so if it won't be not so

00:12:35,200 --> 00:12:48,480
difficult interface looks like this for

00:12:45,190 --> 00:12:57,430
initialization what Jamie yeah probably

00:12:48,480 --> 00:13:00,310
GME will use instead of only insulation

00:12:57,430 --> 00:13:04,270
we can use map and require and we can

00:13:00,310 --> 00:13:09,160
require Kim Chi Chi M to a muppet and

00:13:04,270 --> 00:13:12,190
the apt violation happens block mapping

00:13:09,160 --> 00:13:17,100
combat block conversion logic can be

00:13:12,190 --> 00:13:20,800
triggered and then it will be Italy

00:13:17,100 --> 00:13:25,870
propagated bugging device durable so

00:13:20,800 --> 00:13:28,750
that it can allocate some memory and she

00:13:25,870 --> 00:13:33,820
came under for swapping out who over

00:13:28,750 --> 00:13:37,839
commit we can use scanner support can

00:13:33,820 --> 00:13:40,120
use a KVM interface to define to

00:13:37,839 --> 00:13:43,050
identify which species needs to be

00:13:40,120 --> 00:13:46,839
subbed out on the fall swapping out

00:13:43,050 --> 00:13:49,510
actually file system interface if out if

00:13:46,839 --> 00:13:54,430
our k2 advanced out transfer can be used

00:13:49,510 --> 00:13:57,850
and then notification the allocation not

00:13:54,430 --> 00:14:03,750
patient center KPN module and then i PT

00:13:57,850 --> 00:14:03,750
will be updated and it carried with lust

00:14:04,830 --> 00:14:09,790
for memory

00:14:06,610 --> 00:14:12,250
isolation yeah for security reasons

00:14:09,790 --> 00:14:16,810
memory isolation is highly desired

00:14:12,250 --> 00:14:19,990
service and basically it removes it as

00:14:16,810 --> 00:14:21,240
it remains is a spaceman mapping it

00:14:19,990 --> 00:14:25,510
removes

00:14:21,240 --> 00:14:29,829
pages from kinetic mapping and probably

00:14:25,510 --> 00:14:33,400
redirected remember any extract page but

00:14:29,829 --> 00:14:36,920
it depends on parking the bus drivers if

00:14:33,400 --> 00:14:40,860
there was durable once struck page

00:14:36,920 --> 00:14:46,040
yeah but at least KVM others related

00:14:40,860 --> 00:14:51,209
Moses struck based on resolve for IO

00:14:46,040 --> 00:14:54,499
communication between guest VM and KVM

00:14:51,209 --> 00:14:59,249
oh yeah we need a shared peace so that

00:14:54,499 --> 00:15:04,649
we need interface for the to tell which

00:14:59,249 --> 00:15:09,839
space will be shared and probably for we

00:15:04,649 --> 00:15:11,220
host user we host user is a process has

00:15:09,839 --> 00:15:14,519
to a muppet

00:15:11,220 --> 00:15:19,680
so because it's for performance so in

00:15:14,519 --> 00:15:24,720
that case we need to use a space in

00:15:19,680 --> 00:15:28,680
mapping so if there is a file system

00:15:24,720 --> 00:15:32,129
interface to see if control sheet but

00:15:28,680 --> 00:15:35,759
it's only simply prevent a map it's all

00:15:32,129 --> 00:15:39,569
or nothing so probably I think some

00:15:35,759 --> 00:15:41,429
interface needs to be introduced or what

00:15:39,569 --> 00:15:48,290
 interface needs to be in house

00:15:41,429 --> 00:15:52,079
somehow okay you know the current status

00:15:48,290 --> 00:15:55,079
right now yeah I have a sort of to the

00:15:52,079 --> 00:15:58,230
file system isn't already written and a

00:15:55,079 --> 00:16:00,290
laptop for reserved memories returned

00:15:58,230 --> 00:16:05,959
and then yeah right now I'm trying to

00:16:00,290 --> 00:16:10,470
remove it I'm trying to remove a

00:16:05,959 --> 00:16:14,189
peaceful interface from right now yeah

00:16:10,470 --> 00:16:17,670
it panics now so I couldn't fix it for

00:16:14,189 --> 00:16:22,199
him unfortunately so it's work in

00:16:17,670 --> 00:16:26,009
progress so future work so I'd like to

00:16:22,199 --> 00:16:28,980
start discussion and also elective

00:16:26,009 --> 00:16:35,540
finished POC and post parties to the

00:16:28,980 --> 00:16:35,540
mailing list and then also needed to

00:16:35,600 --> 00:16:45,209
under the implementation is to enable

00:16:40,579 --> 00:16:48,360
future memory technologies so I need to

00:16:45,209 --> 00:16:50,170
exercise other technology in addition to

00:16:48,360 --> 00:16:52,360
disable memory

00:16:50,170 --> 00:16:55,149
example entropy memory you are memory

00:16:52,360 --> 00:16:58,690
compression under so you know I'd like

00:16:55,149 --> 00:17:02,079
to ensure that live migration will walk

00:16:58,690 --> 00:17:05,650
under stop but I especially the host

00:17:02,079 --> 00:17:13,030
user and also preparation for memory

00:17:05,650 --> 00:17:17,919
isolation okay so yeah I think yeah it's

00:17:13,030 --> 00:17:20,860
time to device and refactoring us keep

00:17:17,919 --> 00:17:26,199
in memory management under yeah and to

00:17:20,860 --> 00:17:30,370
provide paper way for new technology and

00:17:26,199 --> 00:17:47,650
as an exception to align with the

00:17:30,370 --> 00:17:49,720
current existing hi can you elaborate

00:17:47,650 --> 00:17:53,200
about what is exactly the modification

00:17:49,720 --> 00:17:59,490
you did to the KVM model problem to the

00:17:53,200 --> 00:18:03,429
kV model yeah here yeah yeah okay VM has

00:17:59,490 --> 00:18:06,450
conversion from guest physical memory to

00:18:03,429 --> 00:18:09,760
host a physical memory I don't remember

00:18:06,450 --> 00:18:13,270
exact function name but it regards a

00:18:09,760 --> 00:18:15,669
page fault but but today when k vm gets

00:18:13,270 --> 00:18:18,880
an EPT violation then it calls the page

00:18:15,669 --> 00:18:21,280
fault function of the TDP of the TDP

00:18:18,880 --> 00:18:23,620
page fault and then it just looks at the

00:18:21,280 --> 00:18:26,350
page tables of the of qmu and it

00:18:23,620 --> 00:18:28,000
understands what is the PF n yeah and

00:18:26,350 --> 00:18:30,640
then if it says that the PF n is not

00:18:28,000 --> 00:18:33,490
backed by a stock page like like in this

00:18:30,640 --> 00:18:35,799
example then it just tries it just tries

00:18:33,490 --> 00:18:40,660
to create a Dipity entry for that PF n

00:18:35,799 --> 00:18:45,250
and that already was my modification

00:18:40,660 --> 00:18:47,410
easier to to skip work on just the

00:18:45,250 --> 00:18:50,919
trigger corta

00:18:47,410 --> 00:18:56,880
device driver to combat

00:18:50,919 --> 00:18:59,210
fire and fire offset to to to give a

00:18:56,880 --> 00:19:04,760
whole surface card

00:18:59,210 --> 00:19:04,760
and what is the purpose of that so yeah

00:19:05,720 --> 00:19:14,580
it started peaceful title but others so

00:19:11,820 --> 00:19:18,330
we don't want map a map

00:19:14,580 --> 00:19:21,150
the reason GM so you job you try to

00:19:18,330 --> 00:19:22,500
prevent qmu user-mode process from being

00:19:21,150 --> 00:19:24,900
able to access the guest member yeah

00:19:22,500 --> 00:19:26,880
yeah in general yes so this relates to

00:19:24,900 --> 00:19:30,090
the other hardening project in general

00:19:26,880 --> 00:19:39,000
at the vbh project right yeah okay now I

00:19:30,090 --> 00:19:41,310
say thanks so is that basically saying

00:19:39,000 --> 00:19:42,570
that because QM you can't access this

00:19:41,310 --> 00:19:44,040
memory at all you don't have to worry

00:19:42,570 --> 00:19:45,660
about having strict pages because you're

00:19:44,040 --> 00:19:48,570
not going to be doing any get user pages

00:19:45,660 --> 00:19:51,210
on that memory cuz you can't access it

00:19:48,570 --> 00:19:53,940
that's sort of you're saying you're

00:19:51,210 --> 00:19:55,890
gonna remove struct pages from this the

00:19:53,940 --> 00:19:58,380
problem with that is like if you want to

00:19:55,890 --> 00:20:00,630
do a get user pages on that range mmm

00:19:58,380 --> 00:20:03,270
like for example if QEMU does an i/o to

00:20:00,630 --> 00:20:07,650
it mmm but you're saying it's not even

00:20:03,270 --> 00:20:09,540
it's not even accessible by QEMU alright

00:20:07,650 --> 00:20:11,280
how are you gonna deal with these are

00:20:09,540 --> 00:20:14,550
pages in general if there's no page

00:20:11,280 --> 00:20:18,150
there's no instruction pages yeah yeah

00:20:14,550 --> 00:20:22,200
we thought even without struct major it

00:20:18,150 --> 00:20:25,140
is possible to a map with TF in a

00:20:22,200 --> 00:20:31,350
mapping but before I owe ya probably our

00:20:25,140 --> 00:20:37,580
sub system requires so crazy yeah I

00:20:31,350 --> 00:20:43,620
think just KSM work

00:20:37,580 --> 00:20:47,400
KSM deduplication oh yeah probably you

00:20:43,620 --> 00:20:52,010
know boys especially encrypted memory

00:20:47,400 --> 00:20:52,010
yeah we don't we don't want kissing

00:20:55,780 --> 00:21:01,040
so just another wondering that I have so

00:20:59,000 --> 00:21:03,710
if I understand correctly at boot time

00:21:01,040 --> 00:21:06,230
the all the physical memory of the O's

00:21:03,710 --> 00:21:08,570
is still available to the to the entire

00:21:06,230 --> 00:21:10,760
host until you take some memory and

00:21:08,570 --> 00:21:12,680
reserve it for specific dynamically at

00:21:10,760 --> 00:21:17,930
runtime to for the guest right in this

00:21:12,680 --> 00:21:20,390
reserved memory up to Rob bubbly yeah so

00:21:17,930 --> 00:21:22,550
so what I what I'm considered and

00:21:20,390 --> 00:21:24,770
wondering about is that one of the

00:21:22,550 --> 00:21:28,010
issues I see with this is that you still

00:21:24,770 --> 00:21:29,929
have if you this is useful only for use

00:21:28,010 --> 00:21:31,880
case that you use the horse as a VM self

00:21:29,929 --> 00:21:33,860
that only runs VM not as a desktop

00:21:31,880 --> 00:21:35,960
environment so in this case you want

00:21:33,860 --> 00:21:38,510
most of the host memory to be

00:21:35,960 --> 00:21:40,670
pre-allocated for guest usage so if you

00:21:38,510 --> 00:21:42,170
don't do that at boot time then you will

00:21:40,670 --> 00:21:44,030
have documentation issues on the

00:21:42,170 --> 00:21:45,920
physical memory layout and you won't be

00:21:44,030 --> 00:21:49,250
able to allocate 1 gigabyte pages for

00:21:45,920 --> 00:21:51,800
the guest memory for example so so you

00:21:49,250 --> 00:21:53,630
would like to at boot time to preserve

00:21:51,800 --> 00:21:57,890
the memory to this pseudo file system

00:21:53,630 --> 00:22:00,860
and not at runtime hardly needs to be

00:21:57,890 --> 00:22:04,400
created but memory doesn't have to be

00:22:00,860 --> 00:22:06,679
allocated yet and they're apt banishment

00:22:04,400 --> 00:22:09,230
happens yeah I understand I but I think

00:22:06,679 --> 00:22:11,120
this is an issue because you do want to

00:22:09,230 --> 00:22:13,070
make sure that once in the boot

00:22:11,120 --> 00:22:14,630
evaluation will happen you will be able

00:22:13,070 --> 00:22:16,610
to find a one gigabyte page without

00:22:14,630 --> 00:22:18,110
fragmentation issues so you want to

00:22:16,610 --> 00:22:20,780
observe the file system to be able to

00:22:18,110 --> 00:22:31,070
allocate this entire memory range at

00:22:20,780 --> 00:22:37,429
boot time and not at one time file

00:22:31,070 --> 00:22:41,540
system range fire range but the memory

00:22:37,429 --> 00:22:45,640
does not necessarily to be assigned and

00:22:41,540 --> 00:22:45,640
we can talk about that offline ok

00:22:49,740 --> 00:22:57,490
are you just in linking this thing with

00:22:54,670 --> 00:23:00,310
sudo file system you are mentioning so

00:22:57,490 --> 00:23:02,650
that whatever will be the page faults

00:23:00,310 --> 00:23:06,760
and everything will be taken by your

00:23:02,650 --> 00:23:09,490
this pseudo file system part yeah that's

00:23:06,760 --> 00:23:12,340
a plan yeah under I'm sorry it simply

00:23:09,490 --> 00:23:17,230
invoked that device arrival backing

00:23:12,340 --> 00:23:23,380
Davis Loretta Aunt Em device / 103 but

00:23:17,230 --> 00:23:26,710
just sort of a wrapper at least to unify

00:23:23,380 --> 00:23:32,590
the interface for KVM at least I think

00:23:26,710 --> 00:23:37,360
it doesn't scare to modify K both GM and

00:23:32,590 --> 00:23:42,700
KVM for each each technology and what

00:23:37,360 --> 00:23:54,310
about pH cache page cache host page

00:23:42,700 --> 00:23:56,550
cache or animal species already read a

00:23:54,310 --> 00:24:02,470
file page is already handled by the

00:23:56,550 --> 00:24:05,920
existing code so this enhancement will

00:24:02,470 --> 00:24:08,560
be auditors are optional I don't think

00:24:05,920 --> 00:24:12,100
that conversion will happen at once or

00:24:08,560 --> 00:24:17,560
we will have a sort of conversion period

00:24:12,100 --> 00:24:21,570
or we can at least we can have options

00:24:17,560 --> 00:24:21,570
to do this

00:24:26,900 --> 00:24:31,330
any other questions or comments

00:24:42,159 --> 00:24:52,840
at the one to know if it was a model the

00:24:48,429 --> 00:24:54,549
new space wanted to access the memory to

00:24:52,840 --> 00:24:58,539
earning the to mmm

00:24:54,549 --> 00:25:01,179
it's a memory to user space not

00:24:58,539 --> 00:25:04,350
necessarily at least we can utilize we'd

00:25:01,179 --> 00:25:13,960
write interface but probably eating as

00:25:04,350 --> 00:25:18,640
memory copy so Thomas we decrease well

00:25:13,960 --> 00:25:21,970
guest VM allowed to share the page we

00:25:18,640 --> 00:25:29,350
feel hosts you just miss me yeah I'm

00:25:21,970 --> 00:25:34,659
happy that's okay you are you are also

00:25:29,350 --> 00:25:36,549
talking about memory isolation right so

00:25:34,659 --> 00:25:39,450
if you give us a model is on the your

00:25:36,549 --> 00:25:43,929
space how do you make sure the memory

00:25:39,450 --> 00:25:46,960
cannot be processed as a hub whether on

00:25:43,929 --> 00:25:50,860
your space yeah well you just miss ya

00:25:46,960 --> 00:25:53,500
like for now yeah my I'm considering

00:25:50,860 --> 00:25:58,960
about sheer interface if control sheet

00:25:53,500 --> 00:26:02,039
under actually it prevents future in

00:25:58,960 --> 00:26:08,940
mapping and also it is just it's not

00:26:02,039 --> 00:26:14,730
mapped by you mean after use it you will

00:26:08,940 --> 00:26:18,850
you a map it right sorry

00:26:14,730 --> 00:26:21,760
what what do you mean is that after the

00:26:18,850 --> 00:26:28,510
user space used as a memory to your

00:26:21,760 --> 00:26:29,110
space oh well and map it right okay

00:26:28,510 --> 00:26:32,010
later

00:26:29,110 --> 00:26:32,010
okay thank you

00:26:34,000 --> 00:26:41,550
so thank you for talk yes thank you

00:26:39,810 --> 00:26:48,400
[Applause]

00:26:41,550 --> 00:26:48,400

YouTube URL: https://www.youtube.com/watch?v=VbuF038q5uQ


