Title: [2019] Contributor Q&A Panel
Publication date: 2019-11-07
Playlist: KVM Forum 2019
Description: 
	A technical (and end-user oriented) Q&A panel discussion on a variety of topics related to KVM, QEMU and more. The discussion will be for about an hour. Topics will be chosen on the spot from a prepared list, and from the live Etherpad, where an audience (live or remote) can add questions before or during the discussion.

Etherpad: https://etherpad.net/p/KVMForum2019Panel

Moderated by: Kashyap Chamarthy, Red Hat
Panelists
Andrea Arcangeli, Red Hat
David Woodhouse, Amazon
Karen Noel , Red Hat
Konrad Wilk, Oracle
Peter Shier, Google

---

Kashyap Chamarthy
Red Hat
Senior Software Engineer

Kashyap Chamarthy works as part of Red Hat's Cloud Engineering group. He focuses his efforts on ensuring the smooth integration between the OpenStack project and its underlying Virtualization components (based on KVM, QEMU & related tooling).

He's previously presented or participated in the last six editions of
Linux Foundation's events (mostly European, sometimes North American) such as LinuxCon, Open Source Summit, and KVM Forum. And also at other conferences such as FOSDEM.

Andrea Arcangeli
Red Hat
Distinguished Engineer

Andrea Arcangeli joined Red Hat in 2008 because of his interest in working on the KVM Virtualization Hypervisor, with a special interest in virtual machine memory management. He worked on many parts of the Linux Kernel, especially on the Virtual Memory subsystem. Andrea started working with Linux in his spare time shortly after first connecting to the internet back in 1996 while studying at University. He enjoys spending most of his time solving software problems and promoting the adoption of Linux and Open Source software everywhere.

David Woodhouse
Amazon
Principal Engineer, Kernel & Operating System Team

David is a Principal Engineer in Amazon’s Kernel and Operating System team, working on Linux and Xen to support Amazon EC2.

David started hacking on Linux in 1995 when he was an undergraduate at the University of Cambridge. He has since worked at Red Hat, and in Intel’s Open Source Technology Centre.

David was the primary developer of the Linux MTD subsystem for flash memory, and the JFFS2 flash file system. He also wrote the OpenConnect VPN client amongst other random distractions.

Karen Noel
Red Hat
Director

Karen Noel is Director of Platform Virtualization and Network Engineering at Red Hat. She has been working on Operating System kernels her entire career and on Virtualization technologies since 2005. She was formerly with Digital Equipment Corporation and HP and has been with Red Hat since 2011. Karen holds a BS in Computer Science and an MBA degree.

Konrad Rzeszutek Wilk
Oracle
Software Director

Konrad Wilk is a Software Director at Oracle. His group's mission is to make Linux and Xen Project virtualization better and faster. As part of this work, Konrad has been the maintainer of the Xen Project subsystem in Linux kernel, Xen Project maintainer and had been the Release Manager for the 4.5 release of the Xen Project Hypervisor. Konrad has been active in the Linux and Xen Project communities for more than 7 years and was instrumental in adding Xen Project support to the Linux Kernel.

Peter Shier
Google
Software Engineer

Peter Shier works as a Software Engineer at Google, focusing on KVM-related technologies.
Captions: 
	00:00:00,390 --> 00:00:02,750
[Music]

00:00:07,010 --> 00:00:16,289
so welcome to the contributor Q&A panel

00:00:11,280 --> 00:00:19,020
for part of KVM Forman OSS share track

00:00:16,289 --> 00:00:21,689
so some of you may be already familiar

00:00:19,020 --> 00:00:23,910
with this format but for those who are

00:00:21,689 --> 00:00:25,380
not so this is the structure of the

00:00:23,910 --> 00:00:28,289
panel it's like this

00:00:25,380 --> 00:00:34,680
we have a live eater pad there etherpad

00:00:28,289 --> 00:00:37,829
net / p / k vm forum mm panel forward

00:00:34,680 --> 00:00:41,010
slash I mean when I say slash so I hope

00:00:37,829 --> 00:00:43,950
you can see that to go up there and type

00:00:41,010 --> 00:00:49,260
the questions and we'll take it from

00:00:43,950 --> 00:00:51,719
there do the start okay

00:00:49,260 --> 00:00:55,320
I'm kashyap charity and I work for red

00:00:51,719 --> 00:00:59,370
hats cloud engineering group integrating

00:00:55,320 --> 00:01:03,140
KVM based components into OpenStack so I

00:00:59,370 --> 00:01:08,220
interact with a lot of kvn qie BIRT

00:01:03,140 --> 00:01:11,570
components Andrea hi everyone I'm Andrea

00:01:08,220 --> 00:01:16,350
Anjali I work on the Linux kernel and

00:01:11,570 --> 00:01:20,640
KVM I've been involved since more than

00:01:16,350 --> 00:01:21,900
20 years ago and mostly on the memory

00:01:20,640 --> 00:01:25,159
management so memory management

00:01:21,900 --> 00:01:28,439
virtualization memory management

00:01:25,159 --> 00:01:30,509
hey I'm Conrad Wilk I manage the Linux

00:01:28,439 --> 00:01:33,150
security virtualization and containers

00:01:30,509 --> 00:01:35,970
group within Oracle do both upstream

00:01:33,150 --> 00:01:38,700
work and then inside know us working on

00:01:35,970 --> 00:01:41,880
the same project I don't think I've

00:01:38,700 --> 00:01:45,060
worked so long as you but I can't

00:01:41,880 --> 00:01:46,890
remember how long so must be longer yeah

00:01:45,060 --> 00:01:48,659
hi I'm Karen Noel I'm director of

00:01:46,890 --> 00:01:52,770
engineering for virtualization and

00:01:48,659 --> 00:01:55,079
networking at Red Hat and I'm a old

00:01:52,770 --> 00:01:57,090
colonel engineer but not Linux I

00:01:55,079 --> 00:02:00,360
switched over to management to come work

00:01:57,090 --> 00:02:03,299
at Red Hat in 2011 I've act but I've

00:02:00,360 --> 00:02:06,090
actually been doing a kernel memory

00:02:03,299 --> 00:02:07,979
management hypervisors I did the live

00:02:06,090 --> 00:02:13,069
migration project for our hypervisor at

00:02:07,979 --> 00:02:13,069
HP and ported to multiple architectures

00:02:13,490 --> 00:02:18,180
I'm Dave Woodhouse principal engineer in

00:02:16,140 --> 00:02:21,690
Amazon's kernel and operating systems

00:02:18,180 --> 00:02:26,370
team looking after the hypervisors Xen

00:02:21,690 --> 00:02:28,860
and KVM running ec2 Peter Shearer I'm

00:02:26,370 --> 00:02:31,950
from Google I work on the Google cloud

00:02:28,860 --> 00:02:33,720
kernel team my focus is on nested

00:02:31,950 --> 00:02:35,280
virtualization I've only been there

00:02:33,720 --> 00:02:37,950
about two and a half years part of that

00:02:35,280 --> 00:02:43,770
many years at Microsoft and drivers and

00:02:37,950 --> 00:02:45,690
firmware ok so we may not go

00:02:43,770 --> 00:02:47,790
sequentially to the ether path but to

00:02:45,690 --> 00:02:49,800
start off probably gentle

00:02:47,790 --> 00:02:53,190
so what accustoms is the backup

00:02:49,800 --> 00:02:57,420
questions take up the on small footprint

00:02:53,190 --> 00:03:00,600
VMS so there's been a pressure of

00:02:57,420 --> 00:03:04,380
containers and that has triggered a set

00:03:00,600 --> 00:03:08,040
of projects of new virtual machine

00:03:04,380 --> 00:03:11,040
managers and it thoughts on on this

00:03:08,040 --> 00:03:17,490
space and how that comes into picture

00:03:11,040 --> 00:03:20,130
with KVM our stock go for it it's a

00:03:17,490 --> 00:03:21,330
fantastic opportunity to actually remove

00:03:20,130 --> 00:03:23,940
some of the depths that we have

00:03:21,330 --> 00:03:25,950
technical debts because all the stuff

00:03:23,940 --> 00:03:28,320
that's one of the neat features of

00:03:25,950 --> 00:03:29,550
containers is you need to narrow things

00:03:28,320 --> 00:03:32,670
down make it faster

00:03:29,550 --> 00:03:34,080
so by that virtue we can expand it and

00:03:32,670 --> 00:03:40,040
actually trying to make things faster

00:03:34,080 --> 00:03:42,530
which is always great yeah so we've

00:03:40,040 --> 00:03:45,450
we've been driven by this quite a lot

00:03:42,530 --> 00:03:48,000
reducing the footprint and getting stuff

00:03:45,450 --> 00:03:49,709
to spin up really fast and do something

00:03:48,000 --> 00:03:52,800
and then spin down and people want to do

00:03:49,709 --> 00:03:55,380
that in a VM and this is why we have the

00:03:52,800 --> 00:03:56,580
fire cracker project which yes we've got

00:03:55,380 --> 00:03:59,250
to throw away a lot of the technical

00:03:56,580 --> 00:04:01,650
debt we've got something clean and fast

00:03:59,250 --> 00:04:03,870
and it's not just technical debt in the

00:04:01,650 --> 00:04:06,600
implementation it's what we're offering

00:04:03,870 --> 00:04:09,239
to the guests we don't have to offer all

00:04:06,600 --> 00:04:13,080
the legacy hardware it allows us to do a

00:04:09,239 --> 00:04:15,930
lot of interesting things so in the

00:04:13,080 --> 00:04:18,390
kernel specifically there are also page

00:04:15,930 --> 00:04:21,989
hinting and beauty of demand which has

00:04:18,390 --> 00:04:25,410
been emerging recently they both tend to

00:04:21,989 --> 00:04:26,590
make the guests from a memory special

00:04:25,410 --> 00:04:29,410
memory management view

00:04:26,590 --> 00:04:32,139
a footprint bill similar to the host so

00:04:29,410 --> 00:04:35,200
I've been attending many kubernetes

00:04:32,139 --> 00:04:39,040
Meetup and I don't think all the

00:04:35,200 --> 00:04:40,540
containers engineers and old people

00:04:39,040 --> 00:04:42,520
working with containers are aware that

00:04:40,540 --> 00:04:45,280
built machine are getting slimmer and

00:04:42,520 --> 00:04:47,500
since technology for example allows to

00:04:45,280 --> 00:04:51,190
avoid having to assign too much memory

00:04:47,500 --> 00:04:52,870
to a guest and you can use the same

00:04:51,190 --> 00:04:56,530
memory pretty much that you would up on

00:04:52,870 --> 00:04:59,350
the bare metal so I'd like just like to

00:04:56,530 --> 00:05:02,070
mention that from my perspective the

00:04:59,350 --> 00:05:05,639
engineers at Red Hat are working to make

00:05:02,070 --> 00:05:09,010
cume you have a smaller memory footprint

00:05:05,639 --> 00:05:13,090
and you should go to Paolo's talk on

00:05:09,010 --> 00:05:22,240
Friday we're also working on integrating

00:05:13,090 --> 00:05:25,780
kata into fedora okay so next up it's

00:05:22,240 --> 00:05:28,690
about fuzzing so this kbm sis collar

00:05:25,780 --> 00:05:31,630
it's one of the linux fuzzing coverage

00:05:28,690 --> 00:05:34,150
based fuzzing tools and it's finding

00:05:31,630 --> 00:05:38,530
security problems in KVM so there's not

00:05:34,150 --> 00:05:42,039
a systematic structure or systematic

00:05:38,530 --> 00:05:46,870
effort in KVM to have fuzzing so any

00:05:42,039 --> 00:05:50,140
thoughts on fuzzing in KVM go for it

00:05:46,870 --> 00:05:52,270
Peter so one of the things that we've

00:05:50,140 --> 00:05:55,720
seen with his collar is it is is fuzzing

00:05:52,270 --> 00:05:57,190
the KVM interface which is great but I

00:05:55,720 --> 00:05:58,720
think one of the things I would love to

00:05:57,190 --> 00:06:00,039
see and I should I suppose I should

00:05:58,720 --> 00:06:03,970
speak to my own colleague who was behind

00:06:00,039 --> 00:06:06,669
his collar is is fuzzing from the guest

00:06:03,970 --> 00:06:09,520
level at a in a much more organized way

00:06:06,669 --> 00:06:12,900
looking at various guest interfaces and

00:06:09,520 --> 00:06:16,060
trying to break through from the guest I

00:06:12,900 --> 00:06:17,950
wanted to add something that there is

00:06:16,060 --> 00:06:19,840
already work in trying to do some of

00:06:17,950 --> 00:06:22,600
this forever Toyota fuzzing on that side

00:06:19,840 --> 00:06:23,680
but also interesting I think the

00:06:22,600 --> 00:06:26,260
question was geared like how are we

00:06:23,680 --> 00:06:29,050
using yes I mean so Oracle Linux does

00:06:26,260 --> 00:06:31,870
use fuzzer and uses e color to try to

00:06:29,050 --> 00:06:35,680
actually make it better and faster sorry

00:06:31,870 --> 00:06:37,360
less problematic now if you actually had

00:06:35,680 --> 00:06:38,800
a chance to look at the Linux security

00:06:37,360 --> 00:06:41,050
symposium and

00:06:38,800 --> 00:06:44,650
think Dmitri was presenting of noël PC

00:06:41,050 --> 00:06:46,300
you will see that a large percentage of

00:06:44,650 --> 00:06:48,460
people are working on doing closing on

00:06:46,300 --> 00:06:50,350
the upstream because it's in your mind

00:06:48,460 --> 00:06:52,840
right but stable trees are much more

00:06:50,350 --> 00:06:54,640
difficult because it's harder so I'm

00:06:52,840 --> 00:06:56,980
really much looking forward to seeing a

00:06:54,640 --> 00:06:58,960
better evolution of stable trees also

00:06:56,980 --> 00:07:00,670
we're having a lot of this done which

00:06:58,960 --> 00:07:03,010
will make all the enterprise Colonels

00:07:00,670 --> 00:07:05,590
and all the enterprise products be more

00:07:03,010 --> 00:07:07,750
safe or insecure you know I was gonna

00:07:05,590 --> 00:07:11,680
say this collar is great it finds a lot

00:07:07,750 --> 00:07:14,140
of great bugs and running it upstream on

00:07:11,680 --> 00:07:17,710
x86 I was just curious because I've

00:07:14,140 --> 00:07:20,530
heard that it's pretty much finds all

00:07:17,710 --> 00:07:24,310
the bugs on x86 and it doesn't really

00:07:20,530 --> 00:07:26,830
need to be run on other architectures so

00:07:24,310 --> 00:07:30,640
I'm curious if people have opinions on

00:07:26,830 --> 00:07:32,620
that there Celina speaking of other

00:07:30,640 --> 00:07:34,630
architectures and last year there was a

00:07:32,620 --> 00:07:36,820
talk by christian water gear on

00:07:34,630 --> 00:07:40,440
collaborative efforts between malta arc

00:07:36,820 --> 00:07:42,060
so probably we can take a segue into

00:07:40,440 --> 00:07:48,880
supporting

00:07:42,060 --> 00:07:53,530
multiple architectures with KVM i don't

00:07:48,880 --> 00:07:59,680
think you can see me but multi arc

00:07:53,530 --> 00:08:03,910
support what KVM supporting multiple

00:07:59,680 --> 00:08:06,520
other architectures yes it does it does

00:08:03,910 --> 00:08:10,930
but the last year the talk was about

00:08:06,520 --> 00:08:12,760
better collaboration yeah I liked

00:08:10,930 --> 00:08:14,200
Christian that Christians message from

00:08:12,760 --> 00:08:15,910
last year about the different

00:08:14,200 --> 00:08:20,110
architectures collaborating that was a

00:08:15,910 --> 00:08:22,180
really good talk so from my perspective

00:08:20,110 --> 00:08:25,000
what different perspective can I give

00:08:22,180 --> 00:08:27,520
and that is the business perspective

00:08:25,000 --> 00:08:30,150
maybe like we need demand for these

00:08:27,520 --> 00:08:33,670
other architectures or the distributions

00:08:30,150 --> 00:08:37,270
don't need to support them we're working

00:08:33,670 --> 00:08:39,220
on demand for non non X xx and yeah as

00:08:37,270 --> 00:08:41,950
we do that there's a lot of stuff that

00:08:39,220 --> 00:08:44,050
can be more generic and historically in

00:08:41,950 --> 00:08:46,060
linux not just a vm across the board in

00:08:44,050 --> 00:08:48,580
linux we've reimplemented a whole bunch

00:08:46,060 --> 00:08:49,769
of stuff per architecture entirely

00:08:48,580 --> 00:08:53,129
gratuitously

00:08:49,769 --> 00:08:55,050
and yeah and even earlier today question

00:08:53,129 --> 00:08:56,989
was talking about time it's countess

00:08:55,050 --> 00:08:59,459
which are just gratuitously different

00:08:56,989 --> 00:09:01,290
and it we do it all over the place and

00:08:59,459 --> 00:09:03,300
we shouldn't all that we still haven't

00:09:01,290 --> 00:09:12,029
quite learned but we're getting there

00:09:03,300 --> 00:09:14,459
slowly switching gears there's something

00:09:12,029 --> 00:09:18,980
about virtual machine introspection in

00:09:14,459 --> 00:09:22,739
KVM so since apparently 2017 this

00:09:18,980 --> 00:09:24,989
BitDefender pushed a patch to make a VM

00:09:22,739 --> 00:09:28,079
a first-class citizen for VM

00:09:24,989 --> 00:09:28,819
introspection just anybody have any

00:09:28,079 --> 00:09:31,379
thoughts on that

00:09:28,819 --> 00:09:37,549
it's KVM upstream community interested

00:09:31,379 --> 00:09:40,019
in it or any other related thoughts so

00:09:37,549 --> 00:09:43,290
what they do have a neat product which

00:09:40,019 --> 00:09:45,209
allows you to do kind of kernel

00:09:43,290 --> 00:09:47,399
integrity you can figure out things

00:09:45,209 --> 00:09:49,799
those of you guys who don't know if

00:09:47,399 --> 00:09:52,410
hostess or if the guest is working

00:09:49,799 --> 00:09:53,970
correctly and it's it's awesome for

00:09:52,410 --> 00:09:57,119
finding viruses because you can figure

00:09:53,970 --> 00:09:59,759
out things are out of pattern and they

00:09:57,119 --> 00:10:01,439
have all the patches for KVM and also

00:09:59,759 --> 00:10:03,749
full of EMI which is a nice interface

00:10:01,439 --> 00:10:08,009
that does it that's great for academic

00:10:03,749 --> 00:10:09,929
research as well the problem it always

00:10:08,009 --> 00:10:11,189
patches is that they keep on growing

00:10:09,929 --> 00:10:12,540
growing growing it'll get longer and

00:10:11,189 --> 00:10:15,410
longer and that's always a problem but

00:10:12,540 --> 00:10:18,509
it would be fantastic to have it though

00:10:15,410 --> 00:10:21,600
the Intel and AMD both of memory

00:10:18,509 --> 00:10:23,309
encryption mechanism which really throws

00:10:21,600 --> 00:10:24,749
a wrench at this whole family so I don't

00:10:23,309 --> 00:10:25,799
really know what the good answer is and

00:10:24,749 --> 00:10:28,379
I don't think that has been yet answered

00:10:25,799 --> 00:10:30,869
and that should be that's part of what

00:10:28,379 --> 00:10:34,350
the future of it is it's a tricky

00:10:30,869 --> 00:10:36,869
concept for us just operationally

00:10:34,350 --> 00:10:38,699
speaking I mean one of the fundamental

00:10:36,869 --> 00:10:41,480
things about running a cloud provider is

00:10:38,699 --> 00:10:44,309
that our business is based on trust and

00:10:41,480 --> 00:10:46,139
one of the ways we preserve that Trust

00:10:44,309 --> 00:10:48,419
is by having a clear line between

00:10:46,139 --> 00:10:50,309
customer data and our stuff on the

00:10:48,419 --> 00:10:53,459
hypervisor side and if we're ever going

00:10:50,309 --> 00:10:55,230
to do have extra code on the the VMM

00:10:53,459 --> 00:10:58,350
side on the hypervisor side that touches

00:10:55,230 --> 00:10:59,160
customer data we need to have a good

00:10:58,350 --> 00:11:00,569
reason for that

00:10:59,160 --> 00:11:02,740
and so then there is a natural

00:11:00,569 --> 00:11:04,750
resistance to anything like

00:11:02,740 --> 00:11:06,730
where we're just you know looking at

00:11:04,750 --> 00:11:08,950
customer data to see what's going on

00:11:06,730 --> 00:11:10,810
today that that crosses that bright line

00:11:08,950 --> 00:11:14,260
that is our starting point for how we

00:11:10,810 --> 00:11:17,200
how we design things so it's not obvious

00:11:14,260 --> 00:11:21,730
how we would how would we do this in

00:11:17,200 --> 00:11:23,260
practice just have to plus that one plus

00:11:21,730 --> 00:11:26,290
one that as a cloud provider that was

00:11:23,260 --> 00:11:28,510
going to be my comment the same thing

00:11:26,290 --> 00:11:30,130
here we struggle the same thing how do

00:11:28,510 --> 00:11:32,680
you actually make it so that it doesn't

00:11:30,130 --> 00:11:38,380
compromise the privacy and security and

00:11:32,680 --> 00:11:40,120
the customers have okay I'm picking

00:11:38,380 --> 00:11:43,180
something randomly this is gonna be an

00:11:40,120 --> 00:11:46,300
interesting can of worms I think this

00:11:43,180 --> 00:11:51,120
year we had the MDS the micro

00:11:46,300 --> 00:11:54,010
architectural net assembling attacks and

00:11:51,120 --> 00:11:57,810
thoughts on Hartman's implications of

00:11:54,010 --> 00:12:01,870
that especially in context of

00:11:57,810 --> 00:12:06,120
simultaneous and SMT and hyper threading

00:12:01,870 --> 00:12:08,890
what Intel calls it has hyper-threading

00:12:06,120 --> 00:12:12,250
so I don't folks they're probably read

00:12:08,890 --> 00:12:15,790
slash dot Greg gage give a great example

00:12:12,250 --> 00:12:17,170
of performance versus see versus

00:12:15,790 --> 00:12:19,709
security and they kind of both

00:12:17,170 --> 00:12:22,570
contradicting each other

00:12:19,709 --> 00:12:24,520
it's a ongoing struggle we all have

00:12:22,570 --> 00:12:27,630
which is the cloud providers we want to

00:12:24,520 --> 00:12:30,790
make we want to win one of the tenant is

00:12:27,630 --> 00:12:33,670
the privacy and security of customers is

00:12:30,790 --> 00:12:36,130
the most important thing so at the same

00:12:33,670 --> 00:12:38,760
point customers are not really thrilled

00:12:36,130 --> 00:12:42,820
if they're on a speed of 46 so

00:12:38,760 --> 00:12:44,950
performance is also important there's

00:12:42,820 --> 00:12:46,750
multiple ways of attacking this or

00:12:44,950 --> 00:12:48,880
trying to solve it there's a whole bunch

00:12:46,750 --> 00:12:50,560
of work and we're looking forward to one

00:12:48,880 --> 00:12:54,459
of them being addressed space isolation

00:12:50,560 --> 00:12:57,820
which eyes to take a basically carve out

00:12:54,459 --> 00:13:01,690
pieces of the KVM that would be ok to

00:12:57,820 --> 00:13:04,480
run without any we don't have to you

00:13:01,690 --> 00:13:06,520
have to do much of you considered more

00:13:04,480 --> 00:13:08,230
as a clear taxes and if the data gets

00:13:06,520 --> 00:13:10,240
leaked from the kernel that data is ok

00:13:08,230 --> 00:13:12,279
to be leaked but otherwise you have to

00:13:10,240 --> 00:13:13,810
add in like a more more firewall and

00:13:12,279 --> 00:13:15,970
we're looking forward to that being as a

00:13:13,810 --> 00:13:17,680
solution to

00:13:15,970 --> 00:13:25,839
security and performance at the same

00:13:17,680 --> 00:13:28,019
time so at reducta we ship the

00:13:25,839 --> 00:13:31,660
enterprise colonel with the same

00:13:28,019 --> 00:13:34,209
defaults for the mitigation setting as

00:13:31,660 --> 00:13:37,360
the upstream colonel so we don't deviate

00:13:34,209 --> 00:13:39,850
but we go really the extra mile to

00:13:37,360 --> 00:13:44,199
provide you not just low risk for

00:13:39,850 --> 00:13:47,019
example there is risk of an attack based

00:13:44,199 --> 00:13:50,230
on a deep cold stack is considered low

00:13:47,019 --> 00:13:52,300
by some specification well we also

00:13:50,230 --> 00:13:55,240
provide a way not just for you to have

00:13:52,300 --> 00:13:57,879
low risk we were new at every boot that

00:13:55,240 --> 00:14:00,819
in some chip you might have to obtain on

00:13:57,879 --> 00:14:05,319
some IBRS option to get zero risk the

00:14:00,819 --> 00:14:07,389
same is true for no SMT we weren't in

00:14:05,319 --> 00:14:10,029
other places when you install and

00:14:07,389 --> 00:14:12,819
basically we go the extra mile to be

00:14:10,029 --> 00:14:15,040
sure you can reduce this to zero we

00:14:12,819 --> 00:14:17,050
understand that for most people the

00:14:15,040 --> 00:14:19,240
first line of defense and for Moore's

00:14:17,050 --> 00:14:22,480
technology not just the users but also

00:14:19,240 --> 00:14:25,240
from products like I don't know firefox

00:14:22,480 --> 00:14:25,870
or containers or anything which is using

00:14:25,240 --> 00:14:28,300
seccomp

00:14:25,870 --> 00:14:29,949
and we enable a say linux by default so

00:14:28,300 --> 00:14:31,870
you have the first line of defense

00:14:29,949 --> 00:14:34,149
enable it that's probably the most

00:14:31,870 --> 00:14:36,490
important thing but we go the extra mile

00:14:34,149 --> 00:14:38,680
also on the last line of defense where

00:14:36,490 --> 00:14:41,920
if you get tagged and you have a problem

00:14:38,680 --> 00:14:44,050
and you can also have full security and

00:14:41,920 --> 00:14:49,500
zero risk from these speculation

00:14:44,050 --> 00:14:49,500
speculative attacks against

00:14:49,790 --> 00:14:56,920
let's say cpu features so in what sense

00:14:54,589 --> 00:15:00,259
we got lucky because the design of our

00:14:56,920 --> 00:15:04,959
hosts a lot of them do static pinning

00:15:00,259 --> 00:15:08,300
we're not allowing ACP used to roam and

00:15:04,959 --> 00:15:10,730
static setup with memory and even PCI

00:15:08,300 --> 00:15:14,420
pastors so we're not constantly taking

00:15:10,730 --> 00:15:17,389
VM exits for i/o theoretically on modern

00:15:14,420 --> 00:15:19,519
hardware we ought to be able to get to a

00:15:17,389 --> 00:15:21,680
point where we're accounting in you know

00:15:19,519 --> 00:15:24,139
tens of vmx its per minute or we're not

00:15:21,680 --> 00:15:26,959
actually there yet but you could

00:15:24,139 --> 00:15:30,199
hypothesize about getting there and the

00:15:26,959 --> 00:15:33,410
cost of these mitigations is the entry

00:15:30,199 --> 00:15:37,130
and exit and so we can actually be fully

00:15:33,410 --> 00:15:40,310
secure theoretically with with very

00:15:37,130 --> 00:15:46,910
little overhead it gets harder once

00:15:40,310 --> 00:15:48,589
you're doing actual I forgot to say one

00:15:46,910 --> 00:15:50,149
thing which is I'm not sure if I'm

00:15:48,589 --> 00:15:53,810
allowed but I'm going to have a

00:15:50,149 --> 00:15:56,690
presentation Friday is it fair and where

00:15:53,810 --> 00:15:59,540
I'm going to show the effect of all of

00:15:56,690 --> 00:16:01,940
the mitigations on kayvyun specifically

00:15:59,540 --> 00:16:04,459
on the VM exit of KVM so if you are

00:16:01,940 --> 00:16:07,339
interested on the topic I think Friday

00:16:04,459 --> 00:16:11,930
is might be interesting for you to

00:16:07,339 --> 00:16:14,959
attend so we're obviously investing

00:16:11,930 --> 00:16:16,880
heavily in every attack that comes our

00:16:14,959 --> 00:16:18,709
way I think the thing that's hit me

00:16:16,880 --> 00:16:21,410
personally more than anything is that

00:16:18,709 --> 00:16:24,019
this is the new in vogue attack and

00:16:21,410 --> 00:16:26,899
there will only be more and they will be

00:16:24,019 --> 00:16:28,279
coming for a long time I saw a wonderful

00:16:26,899 --> 00:16:30,019
presentation from a researcher at

00:16:28,279 --> 00:16:33,290
University of Michigan in which he asks

00:16:30,019 --> 00:16:35,029
how many side buffers do you think there

00:16:33,290 --> 00:16:36,800
are and Intel processors you know and

00:16:35,029 --> 00:16:38,959
people put up their hands five ten

00:16:36,800 --> 00:16:44,569
fifteen and the answer is nobody knows

00:16:38,959 --> 00:16:46,910
so I don't know if that's true but it's

00:16:44,569 --> 00:16:48,980
more than it's more than that we know to

00:16:46,910 --> 00:16:50,810
deal with today so I think we see this

00:16:48,980 --> 00:16:54,009
as something that we're going to invest

00:16:50,810 --> 00:16:55,850
in we we actually plan our schedules

00:16:54,009 --> 00:16:57,980
assuming that there'll be a couple of

00:16:55,850 --> 00:17:00,130
these a year and that we need to have

00:16:57,980 --> 00:17:02,840
people set aside to deal with them

00:17:00,130 --> 00:17:05,030
although there has been a trend recently

00:17:02,840 --> 00:17:07,910
that they discover a new one and the

00:17:05,030 --> 00:17:10,250
mitigation is still kosher chilling and

00:17:07,910 --> 00:17:13,190
flushing caches and oh you look we all

00:17:10,250 --> 00:17:15,110
need that so from a software mitigation

00:17:13,190 --> 00:17:18,680
point of view okay nothing to do for

00:17:15,110 --> 00:17:20,930
this this week's vulnerability but in

00:17:18,680 --> 00:17:22,520
terms of them eventually maybe one day

00:17:20,930 --> 00:17:24,620
fixing the hardware then they're really

00:17:22,520 --> 00:17:27,550
playing whack-a-mole turtle I don't know

00:17:24,620 --> 00:17:29,720
how the hardware is going to be fixed

00:17:27,550 --> 00:17:33,320
yeah but that'll be interesting

00:17:29,720 --> 00:17:34,970
yeah I'm looking forward to that this

00:17:33,320 --> 00:17:37,160
you know past couple years have been

00:17:34,970 --> 00:17:41,240
really interesting I'm very fortunate to

00:17:37,160 --> 00:17:43,550
have two people on the team that have

00:17:41,240 --> 00:17:46,070
been involved in developing the

00:17:43,550 --> 00:17:48,710
mitigations upstream so it's been really

00:17:46,070 --> 00:17:52,090
interesting watching it and also it sort

00:17:48,710 --> 00:17:56,270
of a new field and a new reason to run

00:17:52,090 --> 00:17:57,770
run KBM new reasons to run encrypted VMs

00:17:56,270 --> 00:17:59,570
so it's great to see all this

00:17:57,770 --> 00:18:02,540
development happening

00:17:59,570 --> 00:18:07,400
I wouldn't say interesting more like

00:18:02,540 --> 00:18:13,460
stressful sometimes stress is fun maybe

00:18:07,400 --> 00:18:15,710
all of our jobs speaking of that same

00:18:13,460 --> 00:18:18,890
topic and the other day I noticed on LWR

00:18:15,710 --> 00:18:21,500
net that the kernel has a new process

00:18:18,890 --> 00:18:23,930
altogether for embargoed issues Hardware

00:18:21,500 --> 00:18:25,490
America ratios I know it was recently

00:18:23,930 --> 00:18:28,870
merged but any thoughts on how that's

00:18:25,490 --> 00:18:28,870
working out or not

00:18:31,780 --> 00:18:46,190
so I'm one of the ambassadors on that

00:18:35,120 --> 00:18:50,030
list and I sorry I can't say anything on

00:18:46,190 --> 00:18:52,160
lwn we can say what you can read on lwn

00:18:50,030 --> 00:18:53,990
right it's it's in the Linux tree it's

00:18:52,160 --> 00:18:58,400
committed in the Linux tree that - right

00:18:53,990 --> 00:19:01,220
of course so the current status is we

00:18:58,400 --> 00:19:03,440
have a very good collaboration right now

00:19:01,220 --> 00:19:05,390
it wasn't the case immediately because

00:19:03,440 --> 00:19:06,950
immediately it's the thing we didn't

00:19:05,390 --> 00:19:10,130
have a process to underlie anything like

00:19:06,950 --> 00:19:12,080
that so we were not prepared and this is

00:19:10,130 --> 00:19:14,690
not only a linux issue ever u.s.

00:19:12,080 --> 00:19:16,610
actually is involved including the ones

00:19:14,690 --> 00:19:21,560
you shouldn't be using by the way so

00:19:16,610 --> 00:19:23,330
basically we had these process started

00:19:21,560 --> 00:19:26,510
now it's really much better

00:19:23,330 --> 00:19:29,150
so we encrypt a mailing list and now

00:19:26,510 --> 00:19:35,960
there is even a process for any new

00:19:29,150 --> 00:19:38,420
issue so if you check Gregg 330s mailing

00:19:35,960 --> 00:19:40,370
list Hardware something at current org

00:19:38,420 --> 00:19:42,110
well I'm sure if you have one of these

00:19:40,370 --> 00:19:44,750
if you to report you will find the right

00:19:42,110 --> 00:19:46,880
mining list and I don't remember the

00:19:44,750 --> 00:19:47,630
exact address I asked him just a few

00:19:46,880 --> 00:19:50,930
seconds ago

00:19:47,630 --> 00:19:53,390
- Thomas but this mailing list is the

00:19:50,930 --> 00:19:56,660
one issues and the message and they will

00:19:53,390 --> 00:19:58,850
take care of creating a proper channel

00:19:56,660 --> 00:20:02,420
and where they will bring the expert and

00:19:58,850 --> 00:20:05,120
this is going to be fluid from now on

00:20:02,420 --> 00:20:07,580
and so even even the latest issues may

00:20:05,120 --> 00:20:10,640
be notices there's not so much press

00:20:07,580 --> 00:20:12,620
coverage anymore on things like MDS and

00:20:10,640 --> 00:20:15,410
one of the reasons also people is a

00:20:12,620 --> 00:20:17,210
little more relaxed it is because you

00:20:15,410 --> 00:20:20,300
know now we have a process it's not

00:20:17,210 --> 00:20:23,270
something you are unprepared so these

00:20:20,300 --> 00:20:26,000
things really should be for you for

00:20:23,270 --> 00:20:28,880
users of the kernel just normal updates

00:20:26,000 --> 00:20:30,950
because if I'm just making an example

00:20:28,880 --> 00:20:33,470
for example the ethical ethical is much

00:20:30,950 --> 00:20:35,000
worse than any of these issues so it's

00:20:33,470 --> 00:20:37,130
not like you shouldn't have updated the

00:20:35,000 --> 00:20:40,450
corner or worried before you you need to

00:20:37,130 --> 00:20:43,250
have a trusted provider trusted software

00:20:40,450 --> 00:20:46,190
distribution where you get the updates

00:20:43,250 --> 00:20:48,830
from to protect from these issues and

00:20:46,190 --> 00:20:51,100
anything like dirty co2 happened before

00:20:48,830 --> 00:20:53,960
and that may happen in the future so

00:20:51,100 --> 00:20:58,400
inspector Milton happened the handling

00:20:53,960 --> 00:20:59,900
of that was well with my branding on oh

00:20:58,400 --> 00:21:00,500
it's probably just say moderately

00:20:59,900 --> 00:21:03,500
suboptimal

00:21:00,500 --> 00:21:05,450
if you watch the stream of invective

00:21:03,500 --> 00:21:09,290
that describes it more accurately after

00:21:05,450 --> 00:21:10,760
Thomas and we've refined the process and

00:21:09,290 --> 00:21:12,680
we worked out how things should happen

00:21:10,760 --> 00:21:15,860
and essentially what we've documented

00:21:12,680 --> 00:21:16,640
now is just how you know how are we

00:21:15,860 --> 00:21:19,220
doing it now

00:21:16,640 --> 00:21:20,990
it's not what is documented there is not

00:21:19,220 --> 00:21:24,680
something new this is how it has evolved

00:21:20,990 --> 00:21:29,810
and it's working tolerably well give him

00:21:24,680 --> 00:21:31,730
her broke and everything is ok um one

00:21:29,810 --> 00:21:34,900
more um along

00:21:31,730 --> 00:21:37,160
sorry gone yeah it's actually someone

00:21:34,900 --> 00:21:38,330
hit the back button just for one for one

00:21:37,160 --> 00:21:40,040
second the other the other thing I

00:21:38,330 --> 00:21:42,410
wanted to mention on on the mic

00:21:40,040 --> 00:21:44,570
architectural tax is my other gut feel

00:21:42,410 --> 00:21:45,890
is they're gonna move lower and they're

00:21:44,570 --> 00:21:48,770
gonna start looking at the iommu

00:21:45,890 --> 00:21:51,140
and common IPS and system architectures

00:21:48,770 --> 00:21:52,790
alright once we once we make the

00:21:51,140 --> 00:21:54,470
processors fairly difficult to attack

00:21:52,790 --> 00:21:55,730
it'll just move to the next layer and I

00:21:54,470 --> 00:22:01,990
think that's something we should just be

00:21:55,730 --> 00:22:04,400
proactively looking at thank you and how

00:22:01,990 --> 00:22:07,640
something along those lines how should

00:22:04,400 --> 00:22:10,610
the KVM community be involved in pushing

00:22:07,640 --> 00:22:13,970
linic to linux virtualization based

00:22:10,610 --> 00:22:17,330
security features so I think similar to

00:22:13,970 --> 00:22:25,130
hyper-v VSM and VBS I don't know what

00:22:17,330 --> 00:22:27,260
they expand to thank you so the person

00:22:25,130 --> 00:22:29,990
we just mentioned that Lee Ron he was

00:22:27,260 --> 00:22:32,000
one of the architects that worked with

00:22:29,990 --> 00:22:36,890
Alex who's worked who is doing a site

00:22:32,000 --> 00:22:38,690
address based isolation so Oracle always

00:22:36,890 --> 00:22:41,000
taking this very aggressive we're

00:22:38,690 --> 00:22:43,490
looking at all the different hypervisors

00:22:41,000 --> 00:22:44,860
technology all the academia materials

00:22:43,490 --> 00:22:49,580
and trying to make sure that

00:22:44,860 --> 00:22:52,100
KVM will become the best that it can be

00:22:49,580 --> 00:22:53,130
and making sure it's secure for every

00:22:52,100 --> 00:23:42,630
workload you can have

00:22:53,130 --> 00:23:45,210
so folks there's other things to also

00:23:42,630 --> 00:23:47,280
look at is that containers provide an

00:23:45,210 --> 00:23:49,590
interesting point of this where virtual

00:23:47,280 --> 00:23:51,299
is a where you the attack surface gets

00:23:49,590 --> 00:23:54,120
smaller with containers and that's also

00:23:51,299 --> 00:23:54,840
a frontier where the existing

00:23:54,120 --> 00:23:57,150
immolations

00:23:54,840 --> 00:23:58,409
could also become less important where

00:23:57,150 --> 00:24:00,480
the focus is going to be on containers

00:23:58,409 --> 00:24:03,630
which doesn't lower the attack surface

00:24:00,480 --> 00:24:05,340
which is another area that we all want

00:24:03,630 --> 00:24:07,980
to lower their tax surface by having

00:24:05,340 --> 00:24:09,630
less code and by making that possible or

00:24:07,980 --> 00:24:13,200
not even less code but let's go being

00:24:09,630 --> 00:24:16,770
executed and that is paramount idea in

00:24:13,200 --> 00:24:18,570
any security idea actually bringing up

00:24:16,770 --> 00:24:21,330
containers and going back to fuzzing I'm

00:24:18,570 --> 00:24:22,679
I'm big on the back button that'd be

00:24:21,330 --> 00:24:25,590
another place I'd love to see fuzzing

00:24:22,679 --> 00:24:29,150
trying to break out of containers okay

00:24:25,590 --> 00:24:33,270
um one more I'm switching gears slightly

00:24:29,150 --> 00:24:35,640
from Peter finer and yes and 32-bit x86

00:24:33,270 --> 00:24:39,390
hypervisor is buggy should we explicitly

00:24:35,640 --> 00:24:41,970
drop support for it I think it's gone I

00:24:39,390 --> 00:24:44,250
just got to follow you and say back

00:24:41,970 --> 00:24:46,080
button and follow you and say okay I

00:24:44,250 --> 00:24:48,000
mention si there's gonna be a talk about

00:24:46,080 --> 00:24:54,659
it I really recommend folks listen to it

00:24:48,000 --> 00:24:58,380
go free ok so and should repeat that one

00:24:54,659 --> 00:24:59,370
I have the 32-bit hyper exhales

00:24:58,380 --> 00:25:03,169
accessories

00:24:59,370 --> 00:25:04,920
apparently buggy and should that be drop

00:25:03,169 --> 00:25:09,740
support for it

00:25:04,920 --> 00:25:13,290
vote for it be dropped a little bit I

00:25:09,740 --> 00:25:15,870
think it's Sam I'm taking some risk

00:25:13,290 --> 00:25:20,940
Exodus question is because I'm not sure

00:25:15,870 --> 00:25:22,830
but I think you might for not KVM okay

00:25:20,940 --> 00:25:26,330
it might hurt something which is running

00:25:22,830 --> 00:25:29,820
part of utilize KVM system it's bugging

00:25:26,330 --> 00:25:33,570
your house your honor 32-bit code yeah

00:25:29,820 --> 00:25:36,420
ABM O's I think nobody questions the

00:25:33,570 --> 00:25:38,730
value of having a 64-bit host being able

00:25:36,420 --> 00:25:43,830
to run the city to the guests yes

00:25:38,730 --> 00:25:47,640
civilian oh they're still studying to be

00:25:43,830 --> 00:25:52,110
hosts that's exactly what I was gonna

00:25:47,640 --> 00:25:55,590
say and there's still 32-bit hosts and

00:25:52,110 --> 00:25:57,710
ran out we don't support any 32-bit so I

00:25:55,590 --> 00:26:01,440
can't say from Red Hat perspective

00:25:57,710 --> 00:26:05,640
however I think it's important to have a

00:26:01,440 --> 00:26:08,850
good deprecation policy because like we

00:26:05,640 --> 00:26:12,360
were talking about technical debt it is

00:26:08,850 --> 00:26:15,300
important to keep a project healthy keep

00:26:12,360 --> 00:26:18,630
the community healthy have you know get

00:26:15,300 --> 00:26:20,970
rid of some of the old code make sure

00:26:18,630 --> 00:26:23,340
that the time to implement new features

00:26:20,970 --> 00:26:31,370
is not hindered by old things that need

00:26:23,340 --> 00:26:34,880
to be supported okay so there's

00:26:31,370 --> 00:26:38,130
switching slightly years different

00:26:34,880 --> 00:26:42,000
question of how should what is advice

00:26:38,130 --> 00:26:44,310
for someone starting out with KVM just

00:26:42,000 --> 00:26:46,530
starting that to try and what's the good

00:26:44,310 --> 00:26:50,450
place for someone to start with any

00:26:46,530 --> 00:26:54,020
advice for a new person starting out

00:26:50,450 --> 00:26:54,020
fixed 32-bit

00:26:55,120 --> 00:27:11,740
I was gonna say get a mentor contribute

00:27:03,190 --> 00:27:13,270
has questions I think that all depends

00:27:11,740 --> 00:27:14,770
on the Verity of the person right if

00:27:13,270 --> 00:27:18,190
you're really wanting to go into old

00:27:14,770 --> 00:27:20,320
level just start looking at KVM tone how

00:27:18,190 --> 00:27:22,240
it creates a guest and just play google

00:27:20,320 --> 00:27:25,120
it and you will find some pretty awesome

00:27:22,240 --> 00:27:27,790
examples of what a couple iock owes you

00:27:25,120 --> 00:27:29,380
can create your own little basically qmu

00:27:27,790 --> 00:27:31,390
that can launch a guest that runs

00:27:29,380 --> 00:27:33,460
nothing like it you know print something

00:27:31,390 --> 00:27:35,500
to a see report but that will give you a

00:27:33,460 --> 00:27:36,820
great idea of how virtualization works

00:27:35,500 --> 00:27:39,400
and going through all different stacks

00:27:36,820 --> 00:27:42,820
and that that now that's that's the

00:27:39,400 --> 00:27:44,260
first step in your journey so I would

00:27:42,820 --> 00:27:48,220
have to agree with the Google I think

00:27:44,260 --> 00:27:50,620
that was a good idea I would say as

00:27:48,220 --> 00:27:52,210
someone who learned Kate KVM in the last

00:27:50,620 --> 00:27:54,010
couple of years I had to start out

00:27:52,210 --> 00:27:55,150
meaning I came from a very experienced

00:27:54,010 --> 00:27:57,520
point of view and I said okay where are

00:27:55,150 --> 00:28:01,680
the books where the docs and the answer

00:27:57,520 --> 00:28:04,090
is there aren't any there are the KVM

00:28:01,680 --> 00:28:06,580
documentation that's in the code is a

00:28:04,090 --> 00:28:08,620
good little starting point there is one

00:28:06,580 --> 00:28:12,070
KVM book that will show you how to run

00:28:08,620 --> 00:28:13,830
stuff with with qemu and that was good

00:28:12,070 --> 00:28:16,480
to just get things going

00:28:13,830 --> 00:28:19,420
my first assignment actually was VF IO

00:28:16,480 --> 00:28:21,490
and what I did because this is the way I

00:28:19,420 --> 00:28:23,980
learned is I just started reading the

00:28:21,490 --> 00:28:25,750
code and documenting it so I have a very

00:28:23,980 --> 00:28:29,290
long document that explains exactly how

00:28:25,750 --> 00:28:30,910
VF IO works in every way and I think

00:28:29,290 --> 00:28:32,110
that's one of the ways you can dig in is

00:28:30,910 --> 00:28:34,120
just really read I'm doing that

00:28:32,110 --> 00:28:35,800
currently on the KVM MMU which is

00:28:34,120 --> 00:28:39,220
probably the most complex piece or at

00:28:35,800 --> 00:28:43,140
least the 88 x86 part so if you are up

00:28:39,220 --> 00:28:43,140
for reading code get in there and read

00:28:46,260 --> 00:28:53,840
it's highly confidential

00:28:49,620 --> 00:28:58,140
it documents what happens in open source

00:28:53,840 --> 00:29:00,330
my suggestion is to to get up to speed

00:28:58,140 --> 00:29:04,590
with things like gdb stub which are

00:29:00,330 --> 00:29:07,409
awesome in qmo and also be PF tracing

00:29:04,590 --> 00:29:08,820
and see things you know can familiarize

00:29:07,409 --> 00:29:09,330
I remember when I started with the

00:29:08,820 --> 00:29:12,450
kernel

00:29:09,330 --> 00:29:14,460
the very first buggy fixed I put print

00:29:12,450 --> 00:29:17,279
cane in every function you know it don't

00:29:14,460 --> 00:29:19,740
have to do that anymore right so these

00:29:17,279 --> 00:29:21,480
things are so much better nowadays and

00:29:19,740 --> 00:29:24,330
and its really good to familiarize with

00:29:21,480 --> 00:29:26,700
all the banging goodies we have there's

00:29:24,330 --> 00:29:30,570
even a new project I used recently to

00:29:26,700 --> 00:29:33,570
find a horrible memory leak occurs in

00:29:30,570 --> 00:29:37,260
some tmpfs file keeping a memory scrub

00:29:33,570 --> 00:29:40,409
pinyon dragon it allows you to scan all

00:29:37,260 --> 00:29:43,380
the kernel memory you can program it

00:29:40,409 --> 00:29:48,000
it's really powerful so if you dragon

00:29:43,380 --> 00:29:50,429
gdb stab VP of tracing you can do really

00:29:48,000 --> 00:29:52,200
really powerful debugging and inspection

00:29:50,429 --> 00:29:57,750
so you can it helps understanding the

00:29:52,200 --> 00:29:59,370
code okay there's a specific question

00:29:57,750 --> 00:30:02,179
next one is for Andrea

00:29:59,370 --> 00:30:04,980
it's about synchronous guest memory

00:30:02,179 --> 00:30:08,520
snapshots depends on user fault FD

00:30:04,980 --> 00:30:11,370
support and any chance of this getting

00:30:08,520 --> 00:30:13,620
merged and how could we improve

00:30:11,370 --> 00:30:16,980
collaboration or cooperation with Linux

00:30:13,620 --> 00:30:18,600
kernel to merge it faster yeah I think

00:30:16,980 --> 00:30:20,940
it's about user fault if you've read

00:30:18,600 --> 00:30:23,309
protection it's a feature which was

00:30:20,940 --> 00:30:24,659
planted from day zero user philippi in

00:30:23,309 --> 00:30:26,659
fact you will see the placeholder

00:30:24,659 --> 00:30:31,710
already in the Linux kernel for it and

00:30:26,659 --> 00:30:33,690
it's the cousin of the post copula

00:30:31,710 --> 00:30:35,460
immigration in this case you can do post

00:30:33,690 --> 00:30:37,289
copy live snapshotting and I think it's

00:30:35,460 --> 00:30:38,880
also going to be great for anything

00:30:37,289 --> 00:30:41,669
which is doing snapshotting even on the

00:30:38,880 --> 00:30:43,770
bare metal so if you have any process

00:30:41,669 --> 00:30:45,659
which is using fork and it's actually

00:30:43,770 --> 00:30:47,940
copying the memory of the process to

00:30:45,659 --> 00:30:49,710
disk to take a snapshot of it while the

00:30:47,940 --> 00:30:52,110
parent is still running and doing

00:30:49,710 --> 00:30:55,980
copying rights since technology use of

00:30:52,110 --> 00:30:58,530
the right protection is going to improve

00:30:55,980 --> 00:31:01,820
that kind of workload of an order of

00:30:58,530 --> 00:31:04,070
magnitude and P Terk sue who

00:31:01,820 --> 00:31:06,980
it was here somewhere I don't see him

00:31:04,070 --> 00:31:08,330
but the ship here is maintaining the

00:31:06,980 --> 00:31:10,490
patch that is did an awesome job

00:31:08,330 --> 00:31:13,940
maintaining it it was improved the page

00:31:10,490 --> 00:31:15,740
faults so I am going to review it again

00:31:13,940 --> 00:31:17,780
I reviewed the previous version we fix

00:31:15,740 --> 00:31:20,870
it up something again and its really

00:31:17,780 --> 00:31:23,660
working well now so I think it's good

00:31:20,870 --> 00:31:25,430
enough and just being very careful in in

00:31:23,660 --> 00:31:26,510
pushing it upstream because we want push

00:31:25,430 --> 00:31:27,800
it upstream it would be helped

00:31:26,510 --> 00:31:31,790
tremendously if Google could do

00:31:27,800 --> 00:31:33,230
something on the just I mean we were

00:31:31,790 --> 00:31:35,390
talking about fast things so it would be

00:31:33,230 --> 00:31:37,880
nice to do the fasting before the stuff

00:31:35,390 --> 00:31:39,890
goes upstream I mean it would be nice to

00:31:37,880 --> 00:31:41,750
fixed both backs before this Kohler

00:31:39,890 --> 00:31:43,250
finds something the other day and we

00:31:41,750 --> 00:31:45,650
have to fix it when it's already merged

00:31:43,250 --> 00:31:47,990
so but from a point of view of designer

00:31:45,650 --> 00:31:52,610
things is Peter is solid and and it's

00:31:47,990 --> 00:31:54,920
going differently to be useful and so it

00:31:52,610 --> 00:31:57,860
just I think matter of months and it

00:31:54,920 --> 00:32:00,080
might be time to merge it upstream we'll

00:31:57,860 --> 00:32:07,100
see how the review goes but I'm

00:32:00,080 --> 00:32:10,430
optimistic okay and since we also have a

00:32:07,100 --> 00:32:14,600
nested and KVM subject matter expert on

00:32:10,430 --> 00:32:17,570
the panel any thoughts on the security

00:32:14,600 --> 00:32:23,210
state of nested virtualization this is

00:32:17,570 --> 00:32:25,310
Gary and particularly yes well it's a

00:32:23,210 --> 00:32:28,010
hole it's it's another large attack

00:32:25,310 --> 00:32:30,260
surface right and it goes through

00:32:28,010 --> 00:32:32,630
multiple layers the complexity is way

00:32:30,260 --> 00:32:35,390
way higher so the risk is there's no

00:32:32,630 --> 00:32:38,330
question it's greater just last week

00:32:35,390 --> 00:32:39,980
actually I was looking at enabling a set

00:32:38,330 --> 00:32:42,890
of features for nested for one of our

00:32:39,980 --> 00:32:44,480
customers and I by default we were

00:32:42,890 --> 00:32:46,670
enabling them by some flag that we

00:32:44,480 --> 00:32:48,490
control internally and I by default

00:32:46,670 --> 00:32:51,200
enabled about half a dozen of them and

00:32:48,490 --> 00:32:53,420
Jim Matson who many of you know from the

00:32:51,200 --> 00:32:55,130
mailing list and who I sit next to and

00:32:53,420 --> 00:32:57,140
work with every day said to me why are

00:32:55,130 --> 00:32:58,640
you why are you enabling all those the

00:32:57,140 --> 00:33:02,750
customer only asked for three out of six

00:32:58,640 --> 00:33:04,310
and I think that is one of the the the

00:33:02,750 --> 00:33:06,200
pessimistic approaches that I really

00:33:04,310 --> 00:33:07,850
like and I sort of caught myself because

00:33:06,200 --> 00:33:09,980
it is one of my themes so I think

00:33:07,850 --> 00:33:12,770
reducing the attack service as best as

00:33:09,980 --> 00:33:15,720
we can invested is one way of dealing

00:33:12,770 --> 00:33:17,280
with it and then going back to the fun

00:33:15,720 --> 00:33:19,950
in question I'd love to see fuzzing

00:33:17,280 --> 00:33:22,110
working in in the nested guests and

00:33:19,950 --> 00:33:24,600
trying to break through I want to add

00:33:22,110 --> 00:33:26,700
something fuzzing is fantastic because

00:33:24,600 --> 00:33:28,880
does find things that you would never

00:33:26,700 --> 00:33:31,049
think of but also wearing test cases so

00:33:28,880 --> 00:33:34,049
one of the endeavors that we have

00:33:31,049 --> 00:33:36,900
tempted as to go to Intel SDM and then

00:33:34,049 --> 00:33:38,309
also DMD one and see what it says and

00:33:36,900 --> 00:33:40,289
compared with the code and actually

00:33:38,309 --> 00:33:41,580
write the test cases to expand the test

00:33:40,289 --> 00:33:44,130
cases to make sure it actually is

00:33:41,580 --> 00:33:45,570
correctly working now you may find

00:33:44,130 --> 00:33:47,610
yourself surprised but sometimes

00:33:45,570 --> 00:33:49,169
sometimes the Intel SDM is actually

00:33:47,610 --> 00:33:52,890
incorrect but you know that happens

00:33:49,169 --> 00:33:54,960
occasionally but also adding actually in

00:33:52,890 --> 00:33:56,549
fixing the bugs and the Nesta to make it

00:33:54,960 --> 00:33:58,440
more secure which is also something

00:33:56,549 --> 00:33:59,760
that's been focused so I think the

00:33:58,440 --> 00:34:01,860
future is bright it's going to take a

00:33:59,760 --> 00:34:03,679
while to get it working to the point

00:34:01,860 --> 00:34:05,940
that we don't have to stress about it

00:34:03,679 --> 00:34:07,980
but then you will get there

00:34:05,940 --> 00:34:10,230
yeah I was gonna mention that I feel

00:34:07,980 --> 00:34:12,000
really good and confident that there's a

00:34:10,230 --> 00:34:16,020
lot of high quality people looking at

00:34:12,000 --> 00:34:16,980
nested KVM and a lot of eyes on the

00:34:16,020 --> 00:34:19,830
security of it

00:34:16,980 --> 00:34:23,129
and now that I'm more plugged into the

00:34:19,830 --> 00:34:29,250
security mitigation work that's going on

00:34:23,129 --> 00:34:34,080
and on going upstream I know that neset

00:34:29,250 --> 00:34:36,089
KVM is taken into account in all that so

00:34:34,080 --> 00:34:40,050
just add that thanks for mentioning the

00:34:36,089 --> 00:34:41,760
SDM Conrad one of the other features I'm

00:34:40,050 --> 00:34:43,889
looking at right now is the monitor trap

00:34:41,760 --> 00:34:46,230
flag which is an Intel DMX feature that

00:34:43,889 --> 00:34:48,990
allows you to single-step the guests if

00:34:46,230 --> 00:34:52,619
you look at the code today in KVM it's

00:34:48,990 --> 00:34:56,070
one line and it is when there is an MTF

00:34:52,619 --> 00:34:58,710
exit for dit to l 1 that means L 2 has

00:34:56,070 --> 00:35:02,130
sorry L 2 the nested guests has executed

00:34:58,710 --> 00:35:03,810
instruction the host gets that exit and

00:35:02,130 --> 00:35:08,369
then it forwards it to the guest

00:35:03,810 --> 00:35:09,900
hypervisor and we're done so we would

00:35:08,369 --> 00:35:12,900
like to enable this feature in

00:35:09,900 --> 00:35:15,420
production and I went and had a look at

00:35:12,900 --> 00:35:18,540
the SDM and I have a spreadsheet that I

00:35:15,420 --> 00:35:22,320
think has 53 lines in it each one is a

00:35:18,540 --> 00:35:24,330
corner case for what happens in MTF so

00:35:22,320 --> 00:35:27,800
yes palette we will have a another big

00:35:24,330 --> 00:35:27,800
patch set coming at some point

00:35:29,910 --> 00:35:33,480
but that's how complicated is I went

00:35:31,680 --> 00:35:37,890
from and and I'm hoping to boil it down

00:35:33,480 --> 00:35:39,480
to I think for for similar cases and I

00:35:37,890 --> 00:35:41,130
think it won't be too many lines of code

00:35:39,480 --> 00:35:42,480
but the amount of work that it took I

00:35:41,130 --> 00:35:44,069
probably spend a month just building up

00:35:42,480 --> 00:35:46,230
that spreadsheet going through every

00:35:44,069 --> 00:35:47,730
corner of the SDM and saying what are

00:35:46,230 --> 00:35:51,839
the possible cases here how could this

00:35:47,730 --> 00:35:54,000
happen so a related question I seize

00:35:51,839 --> 00:35:55,020
that how important or nested memes and

00:35:54,000 --> 00:36:02,460
what depth

00:35:55,020 --> 00:36:05,040
have you tried or tested the most I

00:36:02,460 --> 00:36:08,970
think we've gone I think we've gone to

00:36:05,040 --> 00:36:11,210
three or four I think Oracle runs for if

00:36:08,970 --> 00:36:14,220
I'm not mistaken

00:36:11,210 --> 00:36:16,200
yeah Ravel oh yeah right there's also a

00:36:14,220 --> 00:36:17,339
tool by Richard Jones it should be an

00:36:16,200 --> 00:36:19,290
audience somewhere hopefully be a

00:36:17,339 --> 00:36:23,339
Steffes project it's called super nested

00:36:19,290 --> 00:36:27,299
that tries to run nested KVM guess until

00:36:23,339 --> 00:36:29,520
your host crashes or something that's

00:36:27,299 --> 00:36:33,089
for the importance if you have operating

00:36:29,520 --> 00:36:34,710
systems using it using virtualization to

00:36:33,089 --> 00:36:36,660
give themselves a trusted base as we

00:36:34,710 --> 00:36:38,819
discussed earlier and if you have

00:36:36,660 --> 00:36:41,460
operating system vendors who are saying

00:36:38,819 --> 00:36:44,099
you only you only have Tier one security

00:36:41,460 --> 00:37:00,980
support if you are using this then Ness

00:36:44,099 --> 00:37:00,980
it becomes quite important because

00:37:30,030 --> 00:37:34,630
okay we are almost out of time and

00:37:32,770 --> 00:37:37,540
actually are out of time so one last

00:37:34,630 --> 00:37:39,760
parting thought or a wish list item any

00:37:37,540 --> 00:37:43,690
of the powers or all of the panelists if

00:37:39,760 --> 00:37:49,990
you have parting thought our wish list

00:37:43,690 --> 00:37:54,220
or KVM based stack so you folks a great

00:37:49,990 --> 00:37:56,080
you're developing you're using the more

00:37:54,220 --> 00:37:57,970
you do it the more those things new

00:37:56,080 --> 00:37:59,800
features and ideas and this is really

00:37:57,970 --> 00:38:02,020
fantastic so keep on doing what you guys

00:37:59,800 --> 00:38:04,560
are doing and if you have a friend who

00:38:02,020 --> 00:38:06,790
doesn't know yet about virtualization

00:38:04,560 --> 00:38:08,260
please teach them and tell them it's the

00:38:06,790 --> 00:38:10,360
best thing after sliced bread and they

00:38:08,260 --> 00:38:12,850
should be using it and better yet they

00:38:10,360 --> 00:38:14,410
should listen to how you know rewind 15

00:38:12,850 --> 00:38:19,450
minutes ago and how they can actually

00:38:14,410 --> 00:38:22,770
contribute and work on it I want to get

00:38:19,450 --> 00:38:25,780
to 0 BMX it's a minute really finish

00:38:22,770 --> 00:38:27,580
virtualizing the hardware we're so close

00:38:25,780 --> 00:38:29,950
with pass through and posted interrupts

00:38:27,580 --> 00:38:32,340
and various other things we should be

00:38:29,950 --> 00:38:34,990
able to get there

00:38:32,340 --> 00:38:37,960
so I've been thinking I want more kernel

00:38:34,990 --> 00:38:41,080
engineers to use virtual machines and I

00:38:37,960 --> 00:38:44,020
have a few VIX examples because my

00:38:41,080 --> 00:38:46,720
department does the Linux kernel my team

00:38:44,020 --> 00:38:49,660
does the virtualization but sometimes

00:38:46,720 --> 00:38:51,750
they forget about virtual machines and

00:38:49,660 --> 00:38:53,590
they waste time on physical Hardware

00:38:51,750 --> 00:38:57,730
looking for a machine that does

00:38:53,590 --> 00:38:59,490
something like CPU Hut plug so just run

00:38:57,730 --> 00:39:03,660
things in virtual machines use it and

00:38:59,490 --> 00:39:03,660
especially for kernel engineers

00:39:05,980 --> 00:39:09,579
I would like to thank all the KVM

00:39:08,020 --> 00:39:12,549
contributors here everybody who

00:39:09,579 --> 00:39:14,140
contributes the more CPUs the more human

00:39:12,549 --> 00:39:16,390
CPUs we put on this problem the better

00:39:14,140 --> 00:39:18,670
it's going to get and my ass would be

00:39:16,390 --> 00:39:21,280
that every patch you submit think very

00:39:18,670 --> 00:39:24,130
hard about security and diagnose ability

00:39:21,280 --> 00:39:26,079
and maintainability as someone who's

00:39:24,130 --> 00:39:33,670
read a lot of KVM code I would like to

00:39:26,079 --> 00:39:36,579
have more of that so my view is it would

00:39:33,670 --> 00:39:38,440
be great that the veer technologies

00:39:36,579 --> 00:39:41,440
would be leveraged to get higher

00:39:38,440 --> 00:39:44,200
security because maybe with the surface

00:39:41,440 --> 00:39:46,150
of attack biryeo is much smaller than

00:39:44,200 --> 00:39:48,760
the surface of attack of the Cisco of

00:39:46,150 --> 00:39:51,880
the kernel and Sisyphus and thrash broke

00:39:48,760 --> 00:39:54,400
so security is not black and white thing

00:39:51,880 --> 00:39:58,089
perfect security is probably who knocks

00:39:54,400 --> 00:40:00,010
more and but we should try to get best

00:39:58,089 --> 00:40:01,540
practice across the world stack and

00:40:00,010 --> 00:40:07,180
leverage all the technologies that exist

00:40:01,540 --> 00:40:11,950
including KVM and if you do sacrum k vm

00:40:07,180 --> 00:40:15,520
s a linux you get really really optimal

00:40:11,950 --> 00:40:20,950
combination and there's no reason not to

00:40:15,520 --> 00:40:22,540
do the best you can ok thanks everyone

00:40:20,950 --> 00:40:23,710
and we're out of time there's plenty of

00:40:22,540 --> 00:40:25,030
interesting questions there I'm sure

00:40:23,710 --> 00:40:26,859
there's more responses so thanks

00:40:25,030 --> 00:40:28,950
everyone for joining and have a good

00:40:26,859 --> 00:40:28,950
evening

00:40:29,490 --> 00:40:40,109
[Applause]

00:40:33,260 --> 00:40:40,109

YouTube URL: https://www.youtube.com/watch?v=8lmiZeh-xC0


