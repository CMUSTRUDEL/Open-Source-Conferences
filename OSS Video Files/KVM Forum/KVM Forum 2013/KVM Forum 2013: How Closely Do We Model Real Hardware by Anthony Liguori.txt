Title: KVM Forum 2013: How Closely Do We Model Real Hardware by Anthony Liguori
Publication date: 2014-10-30
Playlist: KVM Forum 2013
Description: 
	Slides: https://docs.google.com/file/d/0BzyAwvVlQckeX0RjanVoSHc5eUE?

As QEMU implements support for more architectures and devices, the limitations of our modeling abstractions are beginning to show.  This talk will walk through hardware diagrams for multiple architectures mapping concepts in hardware such as interrupt delivery and device layout with
how we model these concepts in QEMU.  This talk will pay special attention to those areas where QEMU is currently deficient such as I/O request transversal across complex bus hierarchies.
Captions: 
	00:00:00,000 --> 00:00:52,100
oh I'm going to be talking about how

00:00:47,250 --> 00:00:54,420
closely we have Hardware in q mu and the

00:00:52,100 --> 00:00:56,699
talk really comes out of something that

00:00:54,420 --> 00:00:58,109
I'm sure everybody who participated in

00:00:56,699 --> 00:01:01,440
mailing those discussions I've seen

00:00:58,109 --> 00:01:04,650
quite often any time we run into an

00:01:01,440 --> 00:01:06,570
impact in terms of a design decision the

00:01:04,650 --> 00:01:08,430
question always comes up well cause real

00:01:06,570 --> 00:01:11,189
Hardware do it and how does that compare

00:01:08,430 --> 00:01:13,380
to what we're doing so the purpose of

00:01:11,189 --> 00:01:15,600
the fog is really just to dive into that

00:01:13,380 --> 00:01:18,509
deeper and to walk through a real

00:01:15,600 --> 00:01:19,830
hardware looks like I'm not necessarily

00:01:18,509 --> 00:01:22,170
advocating that we should throw

00:01:19,830 --> 00:01:25,140
everything to do away and do exactly I

00:01:22,170 --> 00:01:32,189
just wanted to paint that extra as an

00:01:25,140 --> 00:01:34,710
informative topic I think something

00:01:32,189 --> 00:01:36,450
that's really fundamental to Q mu fact

00:01:34,710 --> 00:01:39,180
that we are a functional simulative we

00:01:36,450 --> 00:01:43,590
are not cycle accurate simulator our

00:01:39,180 --> 00:01:47,040
goal not to hardware design so from an

00:01:43,590 --> 00:01:50,100
overall disposes of functionalities we

00:01:47,040 --> 00:01:53,549
provide to our users and that means that

00:01:50,100 --> 00:01:56,280
we make simplifying assumptions it's not

00:01:53,549 --> 00:01:59,310
necessarily critical that you'll we

00:01:56,280 --> 00:02:02,100
model the pci bus topology exactly as

00:01:59,310 --> 00:02:06,469
long as what you see is what it expects

00:02:02,100 --> 00:02:09,140
to see in terms of its interactions with

00:02:06,469 --> 00:02:13,200
that doesn't mean though that we

00:02:09,140 --> 00:02:14,090
understand what real hardware does very

00:02:13,200 --> 00:02:18,319
well

00:02:14,090 --> 00:02:18,319
importantly to learn from the mistakes

00:02:18,500 --> 00:02:27,900
especially on the pc hardware started if

00:02:23,610 --> 00:02:31,910
you I sad the sort of the historical

00:02:27,900 --> 00:02:34,410
beginnings of the pc i can work with

00:02:31,910 --> 00:02:38,459
together not really well-designed and

00:02:34,410 --> 00:02:41,760
the evolution to the world of yeah okay

00:02:38,459 --> 00:02:43,500
really was a series of correcting

00:02:41,760 --> 00:02:45,030
previous mistakes which is vision

00:02:43,500 --> 00:02:48,060
understand the stakes and avoid

00:02:45,030 --> 00:02:50,910
repeating the ones that haven't made but

00:02:48,060 --> 00:02:52,470
most importantly when we do baby what

00:02:50,910 --> 00:02:54,420
real hardware does it should be an

00:02:52,470 --> 00:02:57,150
informed decision it's just because we

00:02:54,420 --> 00:02:58,859
understand how DNA works it should be

00:02:57,150 --> 00:03:02,700
because we're making a simplifying

00:02:58,859 --> 00:03:05,459
assumption finally a lot of things that

00:03:02,700 --> 00:03:09,750
we aren't capable today in a robust

00:03:05,459 --> 00:03:12,060
fashion like iom a new emulations and

00:03:09,750 --> 00:03:14,040
sort of advanced pci error propagation

00:03:12,060 --> 00:03:15,810
are things that we will have to be

00:03:14,040 --> 00:03:18,060
better and already have to do better to

00:03:15,810 --> 00:03:20,130
a certain extent so in a lot of ways

00:03:18,060 --> 00:03:21,989
these are the problems or the areas we

00:03:20,130 --> 00:03:23,639
become or other problems that we're

00:03:21,989 --> 00:03:28,169
going to be solving as we get together

00:03:23,639 --> 00:03:32,819
in future kvm forums so it's useful to

00:03:28,169 --> 00:03:35,819
understand that that's coming so let's

00:03:32,819 --> 00:03:37,709
talk a little bit about what typical

00:03:35,819 --> 00:03:39,000
device model and QM you look like the

00:03:37,709 --> 00:03:43,620
rest of the talk is going to be very

00:03:39,000 --> 00:03:45,919
very CC centric I think a lot of the a

00:03:43,620 --> 00:03:48,419
lot of it generalized to other platforms

00:03:45,919 --> 00:03:50,040
apologize to the folks that don't care

00:03:48,419 --> 00:03:54,359
about pcs but that's what we're going to

00:03:50,040 --> 00:03:57,900
talk about so the main entry point of

00:03:54,359 --> 00:04:00,569
the thing that creates everything is our

00:03:57,900 --> 00:04:02,669
machine initialization function and for

00:04:00,569 --> 00:04:08,400
the CC machine types it's just a tank

00:04:02,669 --> 00:04:11,579
that wha it sets up the guests the

00:04:08,400 --> 00:04:14,190
initial memory layout which actually

00:04:11,579 --> 00:04:15,750
includes some hardware details that

00:04:14,190 --> 00:04:18,180
we'll talk about in a bit but that's

00:04:15,750 --> 00:04:20,310
done completely outside the device model

00:04:18,180 --> 00:04:24,020
as from a sort of formal modeling

00:04:20,310 --> 00:04:26,610
perspective it's a a series of

00:04:24,020 --> 00:04:27,720
essentially routing tables is higher

00:04:26,610 --> 00:04:32,040
excuse

00:04:27,720 --> 00:04:33,840
related to forgive i guess it creates

00:04:32,040 --> 00:04:36,210
the i-440 effects which we're going to

00:04:33,840 --> 00:04:40,530
talk a lot more about in the upcoming

00:04:36,210 --> 00:04:43,560
slides and sort of magically the EDD is

00:04:40,530 --> 00:04:47,040
which is the Selfridge also sort of have

00:04:43,560 --> 00:04:50,040
created in the process created nice of

00:04:47,040 --> 00:04:51,780
us that is not tied to any specific type

00:04:50,040 --> 00:04:55,110
of hardware we just sort of create the

00:04:51,780 --> 00:04:57,660
month and then a whole bunch of devices

00:04:55,110 --> 00:05:01,920
that we claim to the IC devices and then

00:04:57,660 --> 00:05:04,620
finally we create the the IDE USB

00:05:01,920 --> 00:05:09,870
functions if it's enabled and some other

00:05:04,620 --> 00:05:12,120
devices the important point though is

00:05:09,870 --> 00:05:16,560
that after all of this initialization is

00:05:12,120 --> 00:05:19,020
done as far as 2 into the world so all

00:05:16,560 --> 00:05:21,210
of these of Isis there is a by Iorg the

00:05:19,020 --> 00:05:26,850
most part all dis that happens through a

00:05:21,210 --> 00:05:30,720
flat cable all devices are essentially

00:05:26,850 --> 00:05:33,300
first class they're all independent

00:05:30,720 --> 00:05:36,810
objects and you can sort of think of a

00:05:33,300 --> 00:05:40,680
the tree as being a tree of death one at

00:05:36,810 --> 00:05:43,100
this point so let's compare this Alec

00:05:40,680 --> 00:05:45,840
trouble or how the real hardware works

00:05:43,100 --> 00:05:49,620
and I should mention the hardware that

00:05:45,840 --> 00:05:51,750
we regulating the I 440 FX is a very old

00:05:49,620 --> 00:05:54,330
ship that I think it was popular in like

00:05:51,750 --> 00:05:57,570
nineteen ninety-four so it's very

00:05:54,330 --> 00:06:01,140
updated and I thought about doing 235

00:05:57,570 --> 00:06:03,120
which is slightly more modern but since

00:06:01,140 --> 00:06:05,330
this is still being used predominantly I

00:06:03,120 --> 00:06:09,419
figured this was a good place to start

00:06:05,330 --> 00:06:13,919
so this box right here is the actual I

00:06:09,419 --> 00:06:18,720
440 of X chipset and in real life this

00:06:13,919 --> 00:06:21,000
is sort of me the universe it connects

00:06:18,720 --> 00:06:25,710
directly to the ECP's as you can see on

00:06:21,000 --> 00:06:29,520
the top yeah essentially of it's fine to

00:06:25,710 --> 00:06:31,530
college as an internship I think there's

00:06:29,520 --> 00:06:34,200
a name for it for the I 440 effects but

00:06:31,530 --> 00:06:37,830
it's not important on modern platforms

00:06:34,200 --> 00:06:41,460
well on relatively modern platforms this

00:06:37,830 --> 00:06:43,680
would be eqp I on very very much

00:06:41,460 --> 00:06:46,620
worms a lot of the functionality eye for

00:06:43,680 --> 00:06:50,340
a pass would be in actual chip packages

00:06:46,620 --> 00:06:52,889
themselves that's beyond the scope of

00:06:50,340 --> 00:06:57,479
this talk so what is the ice for 40th

00:06:52,889 --> 00:07:03,960
responsible for all memory active from

00:06:57,479 --> 00:07:07,319
the Android devices though there is no

00:07:03,960 --> 00:07:09,180
path for a cpu to access memory unless

00:07:07,319 --> 00:07:13,560
it goes through the eye for 40 of that

00:07:09,180 --> 00:07:15,840
it truly is the center of the world the

00:07:13,560 --> 00:07:18,780
part of the eye for 42 secs that manages

00:07:15,840 --> 00:07:21,240
the access to rinse of TMC this is the

00:07:18,780 --> 00:07:25,199
programmable memory controller and then

00:07:21,240 --> 00:07:30,720
the other part of the i-40 FX is the PTI

00:07:25,199 --> 00:07:34,169
post bridge so all the way the devices

00:07:30,720 --> 00:07:36,750
connect to the eye for 40th xspc I

00:07:34,169 --> 00:07:38,669
there's a really critical part here and

00:07:36,750 --> 00:07:42,650
this is one of the areas where we

00:07:38,669 --> 00:07:47,130
probably deviate the most real hard

00:07:42,650 --> 00:07:55,080
every single I Oh connection with the

00:07:47,130 --> 00:08:00,449
exception of yeah a lot erode 0 go on to

00:07:55,080 --> 00:08:06,449
the ECI there is no way you do a pea

00:08:00,449 --> 00:08:10,139
sized action in project and this is very

00:08:06,449 --> 00:08:14,340
common so most systems have a main pile

00:08:10,139 --> 00:08:16,219
of America everything is routed over

00:08:14,340 --> 00:08:23,310
that even if there are multiple types

00:08:16,219 --> 00:08:28,909
hierarchy the other big are if you're

00:08:23,310 --> 00:08:28,909
here to see yes this is actually this

00:08:30,560 --> 00:08:56,090
all of your controller all elected with

00:08:43,979 --> 00:09:02,490
is for tsuburaya or something

00:08:56,090 --> 00:09:06,800
software these days other than

00:09:02,490 --> 00:09:06,800
implementing these like last elected

00:09:08,840 --> 00:09:18,750
this tip that is from the air and came

00:09:12,870 --> 00:09:23,720
up with a lot on log ship that the xbox

00:09:18,750 --> 00:09:29,640
is simply gone Oh point having a nice

00:09:23,720 --> 00:09:45,360
the elf ability to plug in on platform

00:09:29,640 --> 00:09:49,410
or system it sticks out of 50 is created

00:09:45,360 --> 00:09:51,690
three or four finally there's two other

00:09:49,410 --> 00:09:54,540
functions that are implemented in a TI x

00:09:51,690 --> 00:09:56,790
4 and this is an integrated ide

00:09:54,540 --> 00:10:00,000
controller in an integrated USB box I

00:09:56,790 --> 00:10:05,430
show up a function they are not distinct

00:10:00,000 --> 00:10:09,560
devices say very much live in check and

00:10:05,430 --> 00:10:12,390
they're sort of special in that nature

00:10:09,560 --> 00:10:14,370
one more thing I'll point out on the

00:10:12,390 --> 00:10:17,100
slide is that there is a thing called

00:10:14,370 --> 00:10:19,290
the Act bus for our purposes it doesn't

00:10:17,100 --> 00:10:23,220
really matter this is how the bio from

00:10:19,290 --> 00:10:26,730
plums into the system as a whole so

00:10:23,220 --> 00:10:29,190
there is a ROM it's outside of the key

00:10:26,730 --> 00:10:31,350
is for and the export 40 of that which

00:10:29,190 --> 00:10:34,680
is where the actual bios lives and that

00:10:31,350 --> 00:10:36,210
its hooked up via the xbox obviously we

00:10:34,680 --> 00:10:38,400
don't emulate anything like that today

00:10:36,210 --> 00:10:43,190
what we do with be flash but that's

00:10:38,400 --> 00:10:47,520
relatively new one another thing element

00:10:43,190 --> 00:10:53,040
on it is that if you look at the modern

00:10:47,520 --> 00:10:56,880
hardware is black support morning so

00:10:53,040 --> 00:11:03,830
this is where word a model which is the

00:10:56,880 --> 00:11:06,840
way it really works real hardware that

00:11:03,830 --> 00:11:09,740
we don't fill out the people config

00:11:06,840 --> 00:11:09,740
information actually

00:11:24,590 --> 00:11:35,520
mention the ultimate is brutal for 48 50

00:11:33,630 --> 00:11:40,280
p you have a direct connection to ram

00:11:35,520 --> 00:11:43,230
and we flow through the i-40 avec succès

00:11:40,280 --> 00:11:45,480
there's we do this right for the most

00:11:43,230 --> 00:11:48,870
part there is one caveat and that is

00:11:45,480 --> 00:11:50,720
something called ham which I have I

00:11:48,870 --> 00:11:53,820
don't remember what it's been for a fan

00:11:50,720 --> 00:12:02,220
if you've ever had a work that is really

00:11:53,820 --> 00:12:04,140
sort of confusing the boxes and the

00:12:02,220 --> 00:12:07,590
options Rob will talk more about the

00:12:04,140 --> 00:12:10,110
option roms later but they're slow to

00:12:07,590 --> 00:12:14,660
access so doing a read either from the

00:12:10,110 --> 00:12:16,920
by us or from an option it's very slow

00:12:14,660 --> 00:12:19,380
is actually one of the things in the

00:12:16,920 --> 00:12:21,630
early days of the pc caused longer

00:12:19,380 --> 00:12:24,330
started because if you had a run both

00:12:21,630 --> 00:12:26,250
the blocks and roms just reading those

00:12:24,330 --> 00:12:28,950
roms into memory and executing from them

00:12:26,250 --> 00:12:34,940
especially if there was a loop could be

00:12:28,950 --> 00:12:38,880
very very slow so one of the past was

00:12:34,940 --> 00:12:46,950
and it's a feature of the effect at all

00:12:38,880 --> 00:12:49,110
except where the 32 ram but i want right

00:12:46,950 --> 00:12:51,720
together the wrong or you can say that

00:12:49,110 --> 00:12:54,930
one reads to go to the rom right to go

00:12:51,720 --> 00:12:59,760
to Ramses program different tasks for

00:12:54,930 --> 00:13:01,860
reason right what this allows you to do

00:12:59,760 --> 00:13:04,590
it's set up a system to have rights go

00:13:01,860 --> 00:13:06,900
to rim and read the legacy option ROM

00:13:04,590 --> 00:13:10,020
and then you do a little for you read

00:13:06,900 --> 00:13:11,700
from an address and write back and you

00:13:10,020 --> 00:13:13,550
go through when you you do this for all

00:13:11,700 --> 00:13:20,010
the wrong and do this for the bios and

00:13:13,550 --> 00:13:22,470
that's called shackling when you can now

00:13:20,010 --> 00:13:27,210
just cute directly from ram

00:13:22,470 --> 00:13:31,760
and you know run the system as if or run

00:13:27,210 --> 00:13:34,680
the wrong and it's much much faster

00:13:31,760 --> 00:13:36,930
while we emulate random access is

00:13:34,680 --> 00:13:40,020
correctly we don't really emulate am

00:13:36,930 --> 00:13:45,480
very well today but it's really not all

00:13:40,020 --> 00:13:49,170
that poor let's talk about how a typical

00:13:45,480 --> 00:13:51,810
pci access work and this is something

00:13:49,170 --> 00:13:57,360
that we do very differently from the way

00:13:51,810 --> 00:14:02,610
that actual art where works so if a CPU

00:13:57,360 --> 00:14:05,730
wants to do a right to a to a bar this

00:14:02,610 --> 00:14:08,210
is a memory region for an eye of devices

00:14:05,730 --> 00:14:11,700
is a register access to an i/o device

00:14:08,210 --> 00:14:16,110
like every other axis that goes through

00:14:11,700 --> 00:14:20,460
the eye for 40 FX and the iphone 4 EFX

00:14:16,110 --> 00:14:23,540
had some logic it knows what the so it

00:14:20,460 --> 00:14:28,470
knows that if it gets an animal option

00:14:23,540 --> 00:14:30,870
the CI a window that it should route

00:14:28,470 --> 00:14:38,040
that to the PCI gloss and try to round

00:14:30,870 --> 00:14:41,010
out to ram when the request placed on

00:14:38,040 --> 00:14:44,430
the pci bus since we're talking about

00:14:41,010 --> 00:14:46,470
legacy pci the VCF doesn't have the

00:14:44,430 --> 00:14:50,940
ability to rouse the request to a

00:14:46,470 --> 00:14:52,980
specific device not switched instead if

00:14:50,940 --> 00:14:54,630
it is a request on the bus and it waits

00:14:52,980 --> 00:14:57,390
for where the devices on the bus to

00:14:54,630 --> 00:14:59,520
claim and the way the device does this

00:14:57,390 --> 00:15:01,500
is by asserting about 10 this caused

00:14:59,520 --> 00:15:04,290
epsilon basically says I'm the guy to

00:15:01,500 --> 00:15:07,620
handle this well how the device is know

00:15:04,290 --> 00:15:09,150
that they handle specific requests well

00:15:07,620 --> 00:15:11,850
they have writable registers in their

00:15:09,150 --> 00:15:15,980
config space where the opportunism can

00:15:11,850 --> 00:15:15,980
say I want you to live at this address

00:15:16,100 --> 00:15:25,350
there's a very interesting property of a

00:15:21,810 --> 00:15:28,530
model like this because old requests go

00:15:25,350 --> 00:15:32,400
out to the entire pci bus any device you

00:15:28,530 --> 00:15:36,300
can see any requests and there are cases

00:15:32,400 --> 00:15:39,390
certain devices though rather

00:15:36,300 --> 00:15:42,510
the bar for specific threat they just

00:15:39,390 --> 00:15:44,910
ignore it and they expect their bars to

00:15:42,510 --> 00:15:48,090
live it to the guy dresses this is very

00:15:44,910 --> 00:15:50,520
common with devices so in this picture

00:15:48,090 --> 00:15:53,550
here where we have the ide controller in

00:15:50,520 --> 00:15:56,460
the USB controller as part of this sort

00:15:53,550 --> 00:15:58,460
of fundamental platform device this is

00:15:56,460 --> 00:16:01,080
where you types of shortcuts happen

00:15:58,460 --> 00:16:03,390
another common area where you see I've

00:16:01,080 --> 00:16:04,860
subscribe where shortcuts happening rvg

00:16:03,390 --> 00:16:12,660
I devices and that's one of the reasons

00:16:04,860 --> 00:16:16,260
that EJ after it can be a real pain so a

00:16:12,660 --> 00:16:17,760
couple of things to point out we can't

00:16:16,260 --> 00:16:20,850
do this model because we don't have to

00:16:17,760 --> 00:16:23,250
think of them hardware does so every

00:16:20,850 --> 00:16:24,990
hardware device can see this transaction

00:16:23,250 --> 00:16:27,660
and look and compare their tables

00:16:24,990 --> 00:16:30,810
because circuitry that's all live in pal

00:16:27,660 --> 00:16:35,670
in parallel that doesn't work very well

00:16:30,810 --> 00:16:38,460
for us we execute all our code in a

00:16:35,670 --> 00:16:40,590
serial fashion so we're much more

00:16:38,460 --> 00:16:42,660
sophisticated we keep traffic on track

00:16:40,590 --> 00:16:45,300
what's up eti ours are being programmed

00:16:42,660 --> 00:16:49,590
to and we built a dispatch able to that

00:16:45,300 --> 00:16:51,690
we can send each i/o request to the

00:16:49,590 --> 00:16:55,860
device that we know of it so even though

00:16:51,690 --> 00:17:00,060
pc is not a a routing protocol that's

00:16:55,860 --> 00:17:04,200
how we implement it instead there's one

00:17:00,060 --> 00:17:09,120
big caveat pci express is switched so it

00:17:04,200 --> 00:17:11,700
has changed with more modern systems so

00:17:09,120 --> 00:17:13,260
just as an aside here's a topic that i

00:17:11,700 --> 00:17:16,380
think is a lot of fun that i wanted to

00:17:13,260 --> 00:17:19,320
point out and this is something i think

00:17:16,380 --> 00:17:21,120
we do need to fix indian this is not a

00:17:19,320 --> 00:17:23,790
concept when it comes to hardware

00:17:21,120 --> 00:17:26,760
dispatch this is something we get really

00:17:23,790 --> 00:17:29,040
really wrong and queuing me today and i

00:17:26,760 --> 00:17:33,570
think the way the way to think of it is

00:17:29,040 --> 00:17:36,510
that the pci plus whether it's a 32-bit

00:17:33,570 --> 00:17:40,680
or 64-bit bus is literally just a set of

00:17:36,510 --> 00:17:42,540
pins and those pins are numbered so they

00:17:40,680 --> 00:17:49,910
have an order in this case you know 20

00:17:42,540 --> 00:17:54,960
30 31 that's it I mean and the VI

00:17:49,910 --> 00:17:57,600
the e1000 connects to those fins and you

00:17:54,960 --> 00:18:00,060
have integer right and the integer is

00:17:57,600 --> 00:18:03,690
always stored in a fact that you would

00:18:00,060 --> 00:18:06,690
expect there are some caveats to this

00:18:03,690 --> 00:18:08,580
statement which I'll talk about in a

00:18:06,690 --> 00:18:11,070
little bit but I think it's really

00:18:08,580 --> 00:18:13,230
important to just divorce yourself the

00:18:11,070 --> 00:18:17,220
ocean that devices have Indian asst

00:18:13,230 --> 00:18:20,040
because they really don't so why do we

00:18:17,220 --> 00:18:21,780
why do we have to my sending this why do

00:18:20,040 --> 00:18:25,860
we model device and doona thank you i'm

00:18:21,780 --> 00:18:27,450
you and it you know bugs bugs bugs and

00:18:25,860 --> 00:18:32,190
this is actually a really entertaining

00:18:27,450 --> 00:18:34,440
set of bugs so the root causes that

00:18:32,190 --> 00:18:37,320
activity 60 something different than

00:18:34,440 --> 00:18:40,140
most other architectures we actually

00:18:37,320 --> 00:18:43,040
have two different address spaces for

00:18:40,140 --> 00:18:47,210
memory in 14 I oh and this is historic

00:18:43,040 --> 00:18:50,430
back on the original PC the 8086 days

00:18:47,210 --> 00:18:54,030
the i/o space was for devices faceless

00:18:50,430 --> 00:18:57,930
program and the two never had any other

00:18:54,030 --> 00:19:00,390
cross interaction and obviously this

00:18:57,930 --> 00:19:02,940
makes something like such as easier to

00:19:00,390 --> 00:19:04,950
implement you have separate ends that

00:19:02,940 --> 00:19:07,530
you know have to be routed devices and

00:19:04,950 --> 00:19:08,970
then everything else goes to ram you all

00:19:07,530 --> 00:19:12,150
have to maintain a table or anything

00:19:08,970 --> 00:19:13,830
like that as far as i know x86 is the

00:19:12,150 --> 00:19:16,560
only architecture that people use today

00:19:13,830 --> 00:19:19,350
to do this every other architecture just

00:19:16,560 --> 00:19:23,750
has a single combined mio space they

00:19:19,350 --> 00:19:27,180
don't have a separate dedicated iOS 8

00:19:23,750 --> 00:19:30,900
the cooks pc i was designed for dcs as

00:19:27,180 --> 00:19:36,900
the name might imply pti has a concept

00:19:30,900 --> 00:19:39,960
of i/o spaces and faces the variances as

00:19:36,900 --> 00:19:44,640
i mentioned earlier all those goodies

00:19:39,960 --> 00:19:47,850
guy Bob so weird legacy devices which

00:19:44,640 --> 00:19:53,400
you have that ability it has to be at

00:19:47,850 --> 00:19:56,670
the support yeah okay so how does not

00:19:53,400 --> 00:19:59,490
exit architecture the most livable

00:19:56,670 --> 00:20:05,090
approach is it reserved an area of a

00:19:59,490 --> 00:20:05,090
mile acts as the legacy

00:20:06,039 --> 00:20:28,009
right it's early release just going to

00:20:23,419 --> 00:20:31,610
exit a range of so this pageant io

00:20:28,009 --> 00:20:36,710
transact a lot of open folder the

00:20:31,610 --> 00:20:41,830
fridges actually system can decide if i

00:20:36,710 --> 00:20:41,830
want this region's the Alexei I out base

00:20:43,779 --> 00:20:51,139
now the fundamental problem in CMU is

00:20:46,789 --> 00:20:53,210
really that we do linear dispatch so on

00:20:51,139 --> 00:20:55,389
the first couple of slides I mentioned

00:20:53,210 --> 00:21:00,499
that once we set up all over our devices

00:20:55,389 --> 00:21:01,999
the world is flat every device sort of

00:21:00,499 --> 00:21:06,950
sit at the top of the world and we patch

00:21:01,999 --> 00:21:08,419
dispatch directly to the devices so the

00:21:06,950 --> 00:21:11,210
way that we end up implementing this is

00:21:08,419 --> 00:21:14,600
um you is that we create almost like a

00:21:11,210 --> 00:21:19,070
pseudo to register for that at Mile

00:21:14,600 --> 00:21:23,629
window and we get access to that info

00:21:19,070 --> 00:21:28,509
window we really happen it away and turn

00:21:23,629 --> 00:21:32,049
around and propagate that to the piece

00:21:28,509 --> 00:21:37,809
we don't model concept of sending i

00:21:32,049 --> 00:21:41,119
actually just happen so we actually call

00:21:37,809 --> 00:21:44,210
this function if you out the or cpu in b

00:21:41,119 --> 00:21:48,830
or wrl that's really thank for this eve

00:21:44,210 --> 00:21:53,860
you to call the name this causes

00:21:48,830 --> 00:21:53,860
confusion because we do new by swapping

00:21:54,159 --> 00:21:59,360
wheat respected like swap when we

00:21:56,659 --> 00:22:01,970
dispatched as a cpu level because if you

00:21:59,360 --> 00:22:03,470
does have a confident in this we need to

00:22:01,970 --> 00:22:07,340
make sure normal lives before we

00:22:03,470 --> 00:22:10,879
actually call out to the hardware the

00:22:07,340 --> 00:22:14,360
very crazy thing is that there's an

00:22:10,879 --> 00:22:16,860
additional like flop in a lot of hope

00:22:14,360 --> 00:22:20,580
architectures target architectures

00:22:16,860 --> 00:22:24,690
that attempt to make up for the likes

00:22:20,580 --> 00:22:27,000
lot that comes from the CEO and so it's

00:22:24,690 --> 00:22:29,220
creates this uh this level where you

00:22:27,000 --> 00:22:31,710
have invite swap happening in the

00:22:29,220 --> 00:22:33,720
registered I mmio window you have

00:22:31,710 --> 00:22:36,570
nothing swap it's happening as a device

00:22:33,720 --> 00:22:38,549
because of the way the memory of API

00:22:36,570 --> 00:22:42,240
works and those two white sauce just

00:22:38,549 --> 00:22:44,760
cancel each other out so if it works

00:22:42,240 --> 00:22:47,580
today because we have two buds that are

00:22:44,760 --> 00:22:49,650
canceling each other out you would think

00:22:47,580 --> 00:22:50,970
it would be easy to just remove this but

00:22:49,650 --> 00:22:53,400
it's not because all of these different

00:22:50,970 --> 00:22:57,540
architectures have to be audited we have

00:22:53,400 --> 00:22:58,950
to make sure that everything everything

00:22:57,540 --> 00:23:02,460
is working the way we want and a lot of

00:22:58,950 --> 00:23:05,190
the fabric architectures are pretty hard

00:23:02,460 --> 00:23:09,120
to test which is something we have to

00:23:05,190 --> 00:23:11,820
fix takeaway here though is that device

00:23:09,120 --> 00:23:15,630
and in the eye there is no good reason

00:23:11,820 --> 00:23:20,669
for us to have devices and some people

00:23:15,630 --> 00:23:24,870
might not agree with me here that it's

00:23:20,669 --> 00:23:30,929
pretty common yelling anyway back to the

00:23:24,870 --> 00:23:33,870
topics we were discussing so oh yeah

00:23:30,929 --> 00:23:35,130
this is this is a this is a slide that

00:23:33,870 --> 00:23:37,080
just talks about what I talked about

00:23:35,130 --> 00:23:41,040
before about Pam and just to go through

00:23:37,080 --> 00:23:44,340
real quickly when you access when this

00:23:41,040 --> 00:23:46,169
lace I guess the option ROM spaces are

00:23:44,340 --> 00:23:50,790
we can get directed differently than the

00:23:46,169 --> 00:23:54,330
right gets directed this allows Jadwin

00:23:50,790 --> 00:23:57,660
so let's give this oh one thing I should

00:23:54,330 --> 00:24:00,200
mention is that we technically can

00:23:57,660 --> 00:24:04,140
emulate all this correctly into mu

00:24:00,200 --> 00:24:08,669
because the N track we can trap rom

00:24:04,140 --> 00:24:12,870
right and we can actually execute mmio

00:24:08,669 --> 00:24:15,780
space historically KTM has kept us from

00:24:12,870 --> 00:24:19,220
being able to implement this because kvm

00:24:15,780 --> 00:24:24,059
simply couldn't deal up with with true

00:24:19,220 --> 00:24:26,010
read only rom this was fixed in recent

00:24:24,059 --> 00:24:28,650
curls so we can actually have you know

00:24:26,010 --> 00:24:30,750
real read only rom now but we still

00:24:28,650 --> 00:24:36,060
can't technically execute from wrong

00:24:30,750 --> 00:24:38,850
inkay p.m. I think we have to set it up

00:24:36,060 --> 00:24:41,070
his memory it doesn't track like we have

00:24:38,850 --> 00:24:43,800
no way to drop down to cute I mean and

00:24:41,070 --> 00:24:46,020
say I want to read this mmio address and

00:24:43,800 --> 00:24:48,180
then execute from it so we have to

00:24:46,020 --> 00:24:49,380
expose rom is really memory in order to

00:24:48,180 --> 00:24:51,720
be able to execute from it it's not

00:24:49,380 --> 00:24:59,910
technically wrong as far as jenny is

00:24:51,720 --> 00:25:02,220
concerned okay another interesting area

00:24:59,910 --> 00:25:03,630
where we deviate and there's really no

00:25:02,220 --> 00:25:05,340
good reason other than I don't think

00:25:03,630 --> 00:25:09,900
anybody's gone and really done anything

00:25:05,340 --> 00:25:14,090
here is that on modern systems the look

00:25:09,900 --> 00:25:17,070
like it is just part of this video its

00:25:14,090 --> 00:25:19,710
we actually model local apex of separate

00:25:17,070 --> 00:25:23,090
devices and if you put the local a pic

00:25:19,710 --> 00:25:26,040
dispatch code into mu it's really gnarly

00:25:23,090 --> 00:25:28,320
maintain Global's to try to keep track

00:25:26,040 --> 00:25:30,360
of the CPUs days because fundamentally

00:25:28,320 --> 00:25:34,020
the local a pic needs to interact with

00:25:30,360 --> 00:25:38,390
private members of the CPU object and we

00:25:34,020 --> 00:25:41,250
have no way of doing this really so I

00:25:38,390 --> 00:25:43,440
wanted to point out here is that when I

00:25:41,250 --> 00:25:46,470
read or write happens to the local a pic

00:25:43,440 --> 00:25:50,130
it never shows up anywhere on the pci

00:25:46,470 --> 00:25:52,410
bus on the i-40 affect the other thing

00:25:50,130 --> 00:25:54,570
that's important here which is an area

00:25:52,410 --> 00:25:57,060
that is just visible where we deviate is

00:25:54,570 --> 00:26:02,430
that a hardware device had no capability

00:25:57,060 --> 00:26:06,720
to dma to the local a pic you came VMA

00:26:02,430 --> 00:26:09,780
to local ASIC under qm you and it'll go

00:26:06,720 --> 00:26:12,090
to whatever random CQ happens to be

00:26:09,780 --> 00:26:14,820
running at the time in terms of which

00:26:12,090 --> 00:26:16,740
cpu gets its which local a success said

00:26:14,820 --> 00:26:19,200
this is not something that could happen

00:26:16,740 --> 00:26:22,470
in the hardware and this this is an area

00:26:19,200 --> 00:26:27,330
where we do we really just don't have

00:26:22,470 --> 00:26:30,800
the concept of local devices we just

00:26:27,330 --> 00:26:30,800
never really modeled that

00:26:32,540 --> 00:26:40,790
so I made a comic clear that there was

00:26:36,630 --> 00:26:44,340
one device ah come on not actually the

00:26:40,790 --> 00:26:48,930
i-44 tsx itself so information about the

00:26:44,340 --> 00:26:52,200
memory controller is exposed by exposing

00:26:48,930 --> 00:26:54,870
a special pci device on slot 0 function

00:26:52,200 --> 00:26:56,610
0 and instead space as a bunch of

00:26:54,870 --> 00:26:59,580
private registered lets you program

00:26:56,610 --> 00:27:03,060
things like the pan table and other

00:26:59,580 --> 00:27:05,550
things of that nature so there's very

00:27:03,060 --> 00:27:07,370
special logic in the i-440 effect that

00:27:05,550 --> 00:27:11,310
if there's an access happening to

00:27:07,370 --> 00:27:14,250
function 0 device slot Bureau it gets

00:27:11,310 --> 00:27:20,600
handled internally we don't do this in

00:27:14,250 --> 00:27:24,150
qmu we actually treat the I 440 FX's

00:27:20,600 --> 00:27:27,960
slot 0 function 0 as a separate pci

00:27:24,150 --> 00:27:30,600
device that system but it is not i mean

00:27:27,960 --> 00:27:33,480
it's it's special and a lot of ways this

00:27:30,600 --> 00:27:36,230
is this is symptomatic of the over

00:27:33,480 --> 00:27:39,150
generalization that happens in qmu

00:27:36,230 --> 00:27:40,980
hardware it's a lot luckier believe it

00:27:39,150 --> 00:27:44,130
or not there's a lot more special cases

00:27:40,980 --> 00:27:47,130
where they say if address equals this do

00:27:44,130 --> 00:27:50,160
that it's not all sort of an elegant

00:27:47,130 --> 00:27:52,890
pitch back and we don't most try to make

00:27:50,160 --> 00:28:04,650
it elegant I'm you know if that's a

00:27:52,890 --> 00:28:11,010
believable concept um everything lives

00:28:04,650 --> 00:28:13,980
in which so even though I for 40 X is

00:28:11,010 --> 00:28:16,530
really the center of the world relegated

00:28:13,980 --> 00:28:21,870
to the Selfridge for some silly

00:28:16,530 --> 00:28:26,570
historical reason so let's do a real

00:28:21,870 --> 00:28:32,010
device access so in the case of doing a

00:28:26,570 --> 00:28:35,580
ide pti configuration access all pieces

00:28:32,010 --> 00:28:37,650
of a standard especially eeprom or

00:28:35,580 --> 00:28:39,930
whatever you want to think of it that

00:28:37,650 --> 00:28:41,850
stores information about the device and

00:28:39,930 --> 00:28:44,840
also sometimes some special device

00:28:41,850 --> 00:28:44,840
specific registers

00:28:45,000 --> 00:28:53,260
the way this gets routed is it goes on

00:28:50,169 --> 00:28:55,630
the back foot for us it's not an access

00:28:53,260 --> 00:29:00,840
for a function zero slot 0 so it goes

00:28:55,630 --> 00:29:04,380
out onto the pci bus and I x4 response

00:29:00,840 --> 00:29:06,970
because it knows that it has a function

00:29:04,380 --> 00:29:08,440
you know at the specific address and

00:29:06,970 --> 00:29:13,179
this is another thing that we really

00:29:08,440 --> 00:29:15,669
modeling qmu even if we have functions

00:29:13,179 --> 00:29:18,159
we treat those as independent devices

00:29:15,669 --> 00:29:19,840
that have no relationship to you know

00:29:18,159 --> 00:29:23,620
any of the other functions that live on

00:29:19,840 --> 00:29:24,820
that slot but a lot of hardware you see

00:29:23,620 --> 00:29:27,490
like this where you have multiple

00:29:24,820 --> 00:29:29,380
functions that are part of an integrated

00:29:27,490 --> 00:29:31,150
package and sometimes there's backdoor

00:29:29,380 --> 00:29:33,280
communication between those functions

00:29:31,150 --> 00:29:37,690
that it is hard to model through

00:29:33,280 --> 00:29:39,549
traditional mean it gets even more

00:29:37,690 --> 00:29:43,260
complicated because some devices

00:29:39,549 --> 00:29:47,260
actually have the ability to virtualize

00:29:43,260 --> 00:29:49,330
physical function everybody virtual

00:29:47,260 --> 00:29:52,960
function but they're actually devices up

00:29:49,330 --> 00:29:55,630
Aaron and occupy a to pci slot and you

00:29:52,960 --> 00:29:59,590
can control how many functions exposes

00:29:55,630 --> 00:30:03,039
on those pc i floss I mean this was sort

00:29:59,590 --> 00:30:07,000
of done before the days of s ROV SI ROV

00:30:03,039 --> 00:30:08,830
as a way to enable multifunction devices

00:30:07,000 --> 00:30:11,590
and for pass through and things like

00:30:08,830 --> 00:30:16,240
that we have absolutely no way of

00:30:11,590 --> 00:30:22,570
modeling listen q mu is just we don't do

00:30:16,240 --> 00:30:26,320
this so let's look at the opposite that

00:30:22,570 --> 00:30:29,409
is what about a DMA access well in this

00:30:26,320 --> 00:30:32,289
case the e1000 puts the transaction on

00:30:29,409 --> 00:30:34,510
the pci bus again and then the pci host

00:30:32,289 --> 00:30:37,419
solar can route that to ram pretty

00:30:34,510 --> 00:30:40,419
straightforward um this is an area

00:30:37,419 --> 00:30:43,960
that's improving build model very well

00:30:40,419 --> 00:30:47,559
into any member so are a lot we do have

00:30:43,960 --> 00:30:50,650
a DMA API all devices should be using

00:30:47,559 --> 00:30:53,169
the MAAC eyes I don't think that that's

00:30:50,650 --> 00:30:54,669
a universal truth though I think there

00:30:53,169 --> 00:30:57,250
still are a lot of devices that are

00:30:54,669 --> 00:30:59,290
asking ray vs cpu physical memory

00:30:57,250 --> 00:31:01,690
read write and more importantly for

00:30:59,290 --> 00:31:05,080
platform devices especially sis left

00:31:01,690 --> 00:31:08,050
devices we're not even modeling a bus so

00:31:05,080 --> 00:31:11,020
they're certainly using the direct

00:31:08,050 --> 00:31:14,350
memory access functions where this

00:31:11,020 --> 00:31:16,570
matters is i ôm abuse and we've already

00:31:14,350 --> 00:31:19,930
had across this bridge because we've had

00:31:16,570 --> 00:31:26,950
a deal um election this is an area we

00:31:19,930 --> 00:31:33,070
could get a lot better so let's briefly

00:31:26,950 --> 00:31:37,660
talk about okay let's talk about RTC

00:31:33,070 --> 00:31:39,460
access so art the art design flaw is one

00:31:37,660 --> 00:31:43,090
of those flat for devices I was talking

00:31:39,460 --> 00:31:44,680
about historically it was a nice a

00:31:43,090 --> 00:31:49,990
device or you can think of it as a nice

00:31:44,680 --> 00:31:52,530
device it live outside the road was

00:31:49,990 --> 00:31:54,850
actually bothered to the motherboard and

00:31:52,530 --> 00:31:58,200
independent of all other bicycle today

00:31:54,850 --> 00:32:04,900
it's almost always in a super io check

00:31:58,200 --> 00:32:07,900
if you actually look at the tixs yeah

00:32:04,900 --> 00:32:11,830
it's for actually specifically listens

00:32:07,900 --> 00:32:16,030
for right axis or treat accesses to i/o

00:32:11,830 --> 00:32:21,460
address 7 and when it sees transaction

00:32:16,030 --> 00:32:24,220
on the pci bus or i/o port 70 it does

00:32:21,460 --> 00:32:27,370
neve select in response to it this is a

00:32:24,220 --> 00:32:29,590
positive decoding there's very good

00:32:27,370 --> 00:32:31,030
reason why it does this it's faster than

00:32:29,590 --> 00:32:33,880
subtractive coating which we'll talk

00:32:31,030 --> 00:32:38,410
about but I really want to make the

00:32:33,880 --> 00:32:41,770
point that this is handled special there

00:32:38,410 --> 00:32:44,010
literally is a table of addresses that

00:32:41,770 --> 00:32:47,680
the p.i export shifts that claims

00:32:44,010 --> 00:32:51,450
they're not programmed into any bars so

00:32:47,680 --> 00:32:55,000
there it is no bar explain that address

00:32:51,450 --> 00:32:58,290
but because all addresses all of these

00:32:55,000 --> 00:33:03,520
guidelines see i exported claimant

00:32:58,290 --> 00:33:05,260
without surfing a bar entry for it again

00:33:03,520 --> 00:33:07,750
just to reiterate the request never

00:33:05,260 --> 00:33:09,400
entered the ice of us it cannot enter

00:33:07,750 --> 00:33:11,230
the ice of us because it's positively

00:33:09,400 --> 00:33:25,120
decoded by the p IX

00:33:11,230 --> 00:33:27,490
for we don't model this today just I'll

00:33:25,120 --> 00:33:31,780
mention that I de access works pretty

00:33:27,490 --> 00:33:37,510
much the same way with one caveat and

00:33:31,780 --> 00:33:42,179
that's that there is some logic for ide

00:33:37,510 --> 00:33:44,470
accesses and vga accesses so the pci bus

00:33:42,179 --> 00:33:47,080
handles those two things actually be

00:33:44,470 --> 00:33:51,280
four legged reasons but we we're not

00:33:47,080 --> 00:33:52,870
going to have time to cover that let's

00:33:51,280 --> 00:33:54,880
talk about right into a serial port now

00:33:52,870 --> 00:33:57,280
the serial port does at least in this

00:33:54,880 --> 00:33:59,590
error of hardware does actually live on

00:33:57,280 --> 00:34:01,450
the i suppose there's a very good reason

00:33:59,590 --> 00:34:04,270
for the fact that lives on the ice above

00:34:01,450 --> 00:34:06,820
the voltage requirements of the UART

00:34:04,270 --> 00:34:09,310
poor are such that it just it couldn't

00:34:06,820 --> 00:34:11,250
live in this chess set it has to be a

00:34:09,310 --> 00:34:15,090
separate ships that because of the

00:34:11,250 --> 00:34:17,679
antigen voltage requirements for it i

00:34:15,090 --> 00:34:23,530
think i guess this was common in that

00:34:17,679 --> 00:34:26,320
error so so now you have an i/o request

00:34:23,530 --> 00:34:29,290
that's a nice brief left it gets played

00:34:26,320 --> 00:34:35,050
for the PBS but there are no devices

00:34:29,290 --> 00:34:38,109
have that have that in their bar so

00:34:35,050 --> 00:34:42,070
under the normal sort of PCI negotiation

00:34:38,109 --> 00:34:44,710
process what do you do nothing knows

00:34:42,070 --> 00:34:46,810
they claim that and the fact or doesn't

00:34:44,710 --> 00:34:49,270
know that that request should go to the

00:34:46,810 --> 00:34:52,389
ISIS because it has no if knowing that

00:34:49,270 --> 00:34:54,100
this is really a nicer request so what

00:34:52,389 --> 00:34:56,740
happened here is that the transaction

00:34:54,100 --> 00:34:59,650
goes on the pci bus and it essentially

00:34:56,740 --> 00:35:02,619
times out so nothing responds to the

00:34:59,650 --> 00:35:06,550
request and that has a special meaning

00:35:02,619 --> 00:35:08,730
under a pci when I Oh request goes to

00:35:06,550 --> 00:35:12,340
the pci bus and nothing response to it

00:35:08,730 --> 00:35:15,930
the pci bus then looks for the first

00:35:12,340 --> 00:35:20,560
device that can be a pc is bridge and

00:35:15,930 --> 00:35:22,420
that device will then well that is

00:35:20,560 --> 00:35:24,760
attractively the code that's that

00:35:22,420 --> 00:35:26,500
request it's called subtractive decoding

00:35:24,760 --> 00:35:28,240
because you're basically saying nobody

00:35:26,500 --> 00:35:31,780
else handles this therefore I must

00:35:28,240 --> 00:35:35,020
handle them and so then it gets out to

00:35:31,780 --> 00:35:38,380
the TI x 4 chipset which then places it

00:35:35,020 --> 00:35:40,960
on the item us what the curious things

00:35:38,380 --> 00:35:44,140
about ice ax is that there is no concept

00:35:40,960 --> 00:35:47,170
of dev select on ice ax so when you put

00:35:44,140 --> 00:35:49,180
an i/o operation on the ice of us any

00:35:47,170 --> 00:35:52,120
number of devices and respond to it and

00:35:49,180 --> 00:35:56,190
can claim to own it and if you if you

00:35:52,120 --> 00:35:58,600
remember the good old days are like

00:35:56,190 --> 00:36:02,920
could really run into cases where two

00:35:58,600 --> 00:36:06,130
devices we're trying to respond to my Oh

00:36:02,920 --> 00:36:10,270
accesses or uses interrupt and all sorts

00:36:06,130 --> 00:36:13,150
of chaos would ensue again we have no

00:36:10,270 --> 00:36:15,880
concept everything is decoded in a

00:36:13,150 --> 00:36:18,070
positive fashion devices have to say

00:36:15,880 --> 00:36:21,820
which address they respond to up front

00:36:18,070 --> 00:36:26,050
and wow can't model that two devices

00:36:21,820 --> 00:36:27,880
responding to the same requesting you

00:36:26,050 --> 00:36:36,940
know I don't think that's really a

00:36:27,880 --> 00:36:41,760
problem for us sorry in my hand in the

00:36:36,940 --> 00:36:46,840
wrong place apparently so in conclusion

00:36:41,760 --> 00:36:48,580
I our requests are hierarchical we do

00:36:46,840 --> 00:36:52,030
not end like this we emulate a flat

00:36:48,580 --> 00:36:54,340
dispatch table and this is something

00:36:52,030 --> 00:36:59,230
we've argued about for many many years

00:36:54,340 --> 00:37:01,090
before and I'm of the opinion it's not a

00:36:59,230 --> 00:37:03,490
reason why we need to do it today I

00:37:01,090 --> 00:37:07,480
think in future we will left moves the

00:37:03,490 --> 00:37:09,220
more hierarchical dispatch model we

00:37:07,480 --> 00:37:10,990
didn't talk about more modern systems

00:37:09,220 --> 00:37:14,800
but on more modern systems where you

00:37:10,990 --> 00:37:17,350
have complex PCI hierarchy you have a

00:37:14,800 --> 00:37:19,870
pci express bus and maybe a legacy pci

00:37:17,350 --> 00:37:22,600
bus under it and you're also emulating

00:37:19,870 --> 00:37:26,020
an iommu all these details come

00:37:22,600 --> 00:37:28,510
important we get endianness it's very

00:37:26,020 --> 00:37:32,710
wrong there's no reason we should it

00:37:28,510 --> 00:37:34,420
just needs to be fixed um like I said at

00:37:32,710 --> 00:37:37,430
the beginning of the talk we will

00:37:34,420 --> 00:37:41,759
eventually need to fix all these things

00:37:37,430 --> 00:37:46,920
all the said most of these things are

00:37:41,759 --> 00:37:49,289
sort of academic problems we've evolved

00:37:46,920 --> 00:37:51,960
a few device model incrementally over

00:37:49,289 --> 00:37:54,390
time I think we've you know we've been

00:37:51,960 --> 00:38:03,900
able to deliver most functionalities we

00:37:54,390 --> 00:38:07,529
needed to hello Oscar or done great like

00:38:03,900 --> 00:38:09,900
me in the process of it but for the most

00:38:07,529 --> 00:38:12,660
where I think either continue to

00:38:09,900 --> 00:38:17,519
incremental involved and just be aware

00:38:12,660 --> 00:38:19,890
of how we be a criminal hardware so I've

00:38:17,519 --> 00:38:29,210
got a few minutes there's any questions

00:38:19,890 --> 00:38:29,210
or comments folks in the audience okay

00:38:32,479 --> 00:38:41,749
so underrated asking do I think region

00:38:35,579 --> 00:38:44,460
should go away no nothing should go away

00:38:41,749 --> 00:38:48,029
just rewriting a large infrastructure

00:38:44,460 --> 00:38:50,489
that more or less works today when

00:38:48,029 --> 00:38:55,259
memories were first introduced I didn't

00:38:50,489 --> 00:38:58,049
like the idea of continued table for i/o

00:38:55,259 --> 00:39:01,440
devices I argued that we should remember

00:38:58,049 --> 00:39:04,410
the model RAM and something different

00:39:01,440 --> 00:39:06,329
for i 0 if I was going to rewrite show

00:39:04,410 --> 00:39:09,059
me from scratch I would not have a

00:39:06,329 --> 00:39:13,079
single dispatched devices in for

00:39:09,059 --> 00:39:16,380
membrane however memory regions do the

00:39:13,079 --> 00:39:19,619
job fairly well today and so far you

00:39:16,380 --> 00:39:21,119
know we think can buy with it I think

00:39:19,619 --> 00:39:24,150
down the road we probably will need to

00:39:21,119 --> 00:39:28,039
have a way to have memory Regents

00:39:24,150 --> 00:39:30,779
dispatch to eliminate or reasonable back

00:39:28,039 --> 00:39:33,539
there are actually pci host controllers

00:39:30,779 --> 00:39:35,640
that I just do by swapping when they

00:39:33,539 --> 00:39:37,680
dispatch request they can also do like X

00:39:35,640 --> 00:39:41,819
touring and all sorts of crazy stuff

00:39:37,680 --> 00:39:47,029
like that encryption various things so

00:39:41,819 --> 00:39:47,029
there's no voy higher for that

00:39:47,490 --> 00:41:03,700
any other question there too Commissaire

00:40:59,020 --> 00:41:08,680
one with that that once the bars are

00:41:03,700 --> 00:41:16,600
allocated more or less anyway are

00:41:08,680 --> 00:41:18,369
there so why not just that way to us you

00:41:16,600 --> 00:41:21,310
don't have any sort of hierarchy and

00:41:18,369 --> 00:41:31,800
you're not doing island what you're

00:41:21,310 --> 00:41:35,920
doing I element cute you all have domain

00:41:31,800 --> 00:41:39,910
action if you imagine that you have to

00:41:35,920 --> 00:41:52,410
love you everything okay what requests

00:41:39,910 --> 00:41:57,010
are allowed or not reporting where

00:41:52,410 --> 00:42:01,530
access a twisted to an arrogant yeah mmm

00:41:57,010 --> 00:42:01,530
you table public subjective

00:42:04,290 --> 00:42:36,190
whatever you have and mop Oh fine we're

00:42:33,790 --> 00:42:38,650
just thought up the questions don't

00:42:36,190 --> 00:42:40,950
forget I'm in poking afterwards thanks

00:42:38,650 --> 00:42:40,950

YouTube URL: https://www.youtube.com/watch?v=rHkQa_ZZsKA


