Title: KVM Forum 2013: Static system partitioning and KVM by Jan Kiszka
Publication date: 2014-10-30
Playlist: KVM Forum 2013
Description: 
	Slides: https://docs.google.com/file/d/0B6HTUUWSPdd-Zl93MVhlMnRJRjg

Specifically embedded use cases often come with the requirement to isolate realtime from non-realtime workloads or certifiable from non-certifiable software stacks. In such scenarios, KVM's flexibility, its transparency to guests, its ability to overcommit resources etc. is less important than minimal overhead, low latencies and a hypervisor code size that eases validation. This presentation points out the limits of solely KVM-based system partitioning. It then introduces Jailhouse, a new Linux-based open source project to provide static partitioning for multi-core systems. Finally the talk discusses the pros and cons of an architecture to integrate KVM's full virtualization support with a Jailhouse Linux partition.
Captions: 
	00:00:03,200 --> 00:00:14,820
recording race okay okay then welcome

00:00:11,849 --> 00:00:16,980
everyone to this track so I'm the first

00:00:14,820 --> 00:00:21,810
speaker here and see what the final

00:00:16,980 --> 00:00:25,109
piece so my talk is going is going to be

00:00:21,810 --> 00:00:27,330
bad static system positioning and kbm so

00:00:25,109 --> 00:00:29,400
in contrast to my ass or who's not going

00:00:27,330 --> 00:00:33,090
to be about what with kvm that matched

00:00:29,400 --> 00:00:36,180
most how did you experience you know and

00:00:33,090 --> 00:00:38,070
both yet and so I would also like to

00:00:36,180 --> 00:00:40,620
give you the motivation for this we have

00:00:38,070 --> 00:00:44,610
things in here and the requirement we

00:00:40,620 --> 00:00:48,870
have written you approach for additional

00:00:44,610 --> 00:00:51,570
system is called jailhouse and just

00:00:48,870 --> 00:00:53,430
build a bridge to kvm in different

00:00:51,570 --> 00:00:56,160
directions I will also talk about how to

00:00:53,430 --> 00:00:59,489
combine this new approach with a better

00:00:56,160 --> 00:01:02,190
way of doing visualizations and finally

00:00:59,489 --> 00:01:07,500
give a few words on the topic of why we

00:01:02,190 --> 00:01:11,430
are going open source so we may have

00:01:07,500 --> 00:01:15,420
heard about missin area someone would

00:01:11,430 --> 00:01:18,090
like to use the CPU 44 1 part so

00:01:15,420 --> 00:01:22,080
dominate sake or in a multi core system

00:01:18,090 --> 00:01:25,650
or multiple course with just one top one

00:01:22,080 --> 00:01:27,659
hundred percent truly dominated what if

00:01:25,650 --> 00:01:31,590
it was the reason for this kind of sauce

00:01:27,659 --> 00:01:35,100
better well first of all animated we are

00:01:31,590 --> 00:01:36,990
mostly working in Kota so high speed

00:01:35,100 --> 00:01:38,790
control does everything which was late

00:01:36,990 --> 00:01:41,490
on a modern person goes beyond the 10

00:01:38,790 --> 00:01:44,549
kilohertz frequency for a control loop

00:01:41,490 --> 00:01:47,369
and in this domain basically every

00:01:44,549 --> 00:01:49,200
microsecond counts because at first like

00:01:47,369 --> 00:01:51,270
an overhead which uses the maximum

00:01:49,200 --> 00:01:53,850
frequency could reach but as a frequency

00:01:51,270 --> 00:01:56,250
as a frequency of the process get your

00:01:53,850 --> 00:01:59,009
physical process the more accurate the

00:01:56,250 --> 00:02:02,880
calculations of certain controls get and

00:01:59,009 --> 00:02:06,780
so on and so forth so you extend your UK

00:02:02,880 --> 00:02:09,090
and in this domain every small in

00:02:06,780 --> 00:02:12,660
infrequent disturbance of your control

00:02:09,090 --> 00:02:13,770
us can have significant text simply

00:02:12,660 --> 00:02:16,470
because this pollute

00:02:13,770 --> 00:02:18,540
some other processes and that will mean

00:02:16,470 --> 00:02:20,390
that you possibly miss the deadline so

00:02:18,540 --> 00:02:24,690
you can't actually do the calculation

00:02:20,390 --> 00:02:26,010
every cycle besides this one is another

00:02:24,690 --> 00:02:28,560
one actually and that is high

00:02:26,010 --> 00:02:31,200
performance computing there you have

00:02:28,560 --> 00:02:34,440
long running part also ideally

00:02:31,200 --> 00:02:36,720
dominating TV you and for the same

00:02:34,440 --> 00:02:38,220
reason as we have is a rota we also one

00:02:36,720 --> 00:02:40,110
hundred percent because every

00:02:38,220 --> 00:02:43,170
disturbance to get in basically pollutes

00:02:40,110 --> 00:02:48,300
the cash and also it uses us the

00:02:43,170 --> 00:02:50,430
efficiency of of speculation so the race

00:02:48,300 --> 00:02:52,650
answer on this is maybe you follow this

00:02:50,430 --> 00:02:55,590
to some degree and the Quantic know

00:02:52,650 --> 00:02:58,740
except patches and what's happening

00:02:55,590 --> 00:03:02,550
around this context so the idea is

00:02:58,740 --> 00:03:06,630
basically to have linux application with

00:03:02,550 --> 00:03:10,500
one task dominating one core of the

00:03:06,630 --> 00:03:13,020
system there should be no interrupt on

00:03:10,500 --> 00:03:14,880
this core then there should be including

00:03:13,020 --> 00:03:18,000
sama interrupts so nobody scattering

00:03:14,880 --> 00:03:20,490
event I'm get there for me for

00:03:18,000 --> 00:03:22,320
rescheduling actually know how you can

00:03:20,490 --> 00:03:25,650
work which is required for example on a

00:03:22,320 --> 00:03:27,900
few recount odd measurements on the

00:03:25,650 --> 00:03:30,800
fourth and the programming model as i

00:03:27,900 --> 00:03:33,030
said is standard Linux application and

00:03:30,800 --> 00:03:35,700
furthermore requirements of course you

00:03:33,030 --> 00:03:37,470
can do this ad hoc way and easily break

00:03:35,700 --> 00:03:41,070
the whole system and so this model

00:03:37,470 --> 00:03:42,840
should be cleans with respect to all and

00:03:41,070 --> 00:03:44,790
all the use case you have clinics so one

00:03:42,840 --> 00:03:47,010
something breaks this kind of assumption

00:03:44,790 --> 00:03:49,230
about single cars on one core everything

00:03:47,010 --> 00:03:52,200
should work out fine just with less

00:03:49,230 --> 00:03:54,590
domination of the CPU there are some

00:03:52,200 --> 00:03:57,300
important steps or is made in mainstream

00:03:54,590 --> 00:04:00,120
so for example the number of all time

00:03:57,300 --> 00:04:02,880
time I ventyx has been reduced in the

00:04:00,120 --> 00:04:06,810
Cape of SIM cards on one chord to 1h set

00:04:02,880 --> 00:04:08,970
once the second and also you can also

00:04:06,810 --> 00:04:11,880
know offload certain as you task from

00:04:08,970 --> 00:04:15,480
the core so that the star core is more

00:04:11,880 --> 00:04:20,040
isolated however we are not yet one half

00:04:15,480 --> 00:04:22,890
percent one f1 ticks per second is still

00:04:20,040 --> 00:04:25,650
16 per second and furthermore there are

00:04:22,890 --> 00:04:27,690
other tasks which has to run on each and

00:04:25,650 --> 00:04:30,840
every coordinate system once in a while

00:04:27,690 --> 00:04:32,220
just grab four on each CPU invocation of

00:04:30,840 --> 00:04:34,410
the colonel what they doin they

00:04:32,220 --> 00:04:36,030
basically spat a certain task on every

00:04:34,410 --> 00:04:38,700
chord out there and if some core is not

00:04:36,030 --> 00:04:40,380
reacting the system will break so you

00:04:38,700 --> 00:04:44,730
can't really do this kind of

00:04:40,380 --> 00:04:48,060
communication yet also sss programming

00:04:44,730 --> 00:04:51,780
model about behind this is Unix Linux

00:04:48,060 --> 00:04:53,370
application and what if you have to need

00:04:51,780 --> 00:04:54,960
for some kind of might be called as

00:04:53,370 --> 00:04:58,020
metric multiprocessing so you have some

00:04:54,960 --> 00:04:59,940
kind of heterogeneous systems not

00:04:58,020 --> 00:05:02,490
everything is X there might be some

00:04:59,940 --> 00:05:05,970
pre-existing authors there or maybe even

00:05:02,490 --> 00:05:07,890
some bare metal load you would run how

00:05:05,970 --> 00:05:10,740
to use is the proper way mutually you

00:05:07,890 --> 00:05:13,290
add another visualization to this so

00:05:10,740 --> 00:05:15,870
what I talked about the past was real

00:05:13,290 --> 00:05:19,650
time kvm so enabling a vm for this kind

00:05:15,870 --> 00:05:21,810
of use cases with we approach and you

00:05:19,650 --> 00:05:23,730
may also remember a title this kind

00:05:21,810 --> 00:05:26,280
where we actually did this kind of

00:05:23,730 --> 00:05:28,470
measurement a while back don't go into

00:05:26,280 --> 00:05:30,720
details basically the idea was what can

00:05:28,470 --> 00:05:32,730
be achieved with real time will upload

00:05:30,720 --> 00:05:35,340
in a virtual machine which is not

00:05:32,730 --> 00:05:39,120
stressing qmo for the various we talked

00:05:35,340 --> 00:05:41,760
about as reading the kvm core and doing

00:05:39,120 --> 00:05:45,300
20 rocket loop and what we did already

00:05:41,760 --> 00:05:47,250
is isolated this kind of workload on a

00:05:45,300 --> 00:05:50,910
single course so the virtual CPU was

00:05:47,250 --> 00:05:54,419
running on a specific mostly free single

00:05:50,910 --> 00:05:57,480
physical core of the system and still we

00:05:54,419 --> 00:06:02,580
achieved relative agencies in this

00:05:57,480 --> 00:06:04,620
scenario of 100 of microseconds and that

00:06:02,580 --> 00:06:06,600
of course back then without the

00:06:04,620 --> 00:06:09,150
improvements that we have right now this

00:06:06,600 --> 00:06:12,000
configuration set so there is no room to

00:06:09,150 --> 00:06:14,610
improve this and and will should be more

00:06:12,000 --> 00:06:16,410
room in the future once this feature is

00:06:14,610 --> 00:06:19,710
actually reaching the one hundred

00:06:16,410 --> 00:06:21,810
percent nevertheless if we are their

00:06:19,710 --> 00:06:24,540
performance wise that another dimension

00:06:21,810 --> 00:06:27,570
i would like to mention here and that's

00:06:24,540 --> 00:06:29,250
the area well of demanding i would say

00:06:27,570 --> 00:06:31,410
demanding safety and then security

00:06:29,250 --> 00:06:33,150
scenarios so what you have here usually

00:06:31,410 --> 00:06:35,669
is that you have to do some

00:06:33,150 --> 00:06:37,110
certification on your software stack at

00:06:35,669 --> 00:06:40,169
least on those parts which are relevant

00:06:37,110 --> 00:06:41,340
for taking security features so there

00:06:40,169 --> 00:06:44,250
are standards about this

00:06:41,340 --> 00:06:46,889
I want to go to give us left a lot of

00:06:44,250 --> 00:06:48,300
things to do and this romania means that

00:06:46,889 --> 00:06:50,430
you have to look closely into your

00:06:48,300 --> 00:06:52,470
hardware and software aesthetic you have

00:06:50,430 --> 00:06:53,940
to do a review and testing on it and you

00:06:52,470 --> 00:06:56,070
may even have to do some kind of form of

00:06:53,940 --> 00:07:00,470
Education identification depending on

00:06:56,070 --> 00:07:00,470
how how high your standards are

00:07:00,889 --> 00:07:05,790
naturally the love your system gets the

00:07:04,260 --> 00:07:08,729
height of these efforts become and these

00:07:05,790 --> 00:07:11,639
efforts are endowed by you can imagine

00:07:08,729 --> 00:07:14,220
this is a lot of paperwork and a lot of

00:07:11,639 --> 00:07:16,650
times and didn't work costly work so the

00:07:14,220 --> 00:07:19,919
typical approach for this kind of system

00:07:16,650 --> 00:07:21,840
to split at least those parts of which

00:07:19,919 --> 00:07:25,290
are not relevant for the safety or

00:07:21,840 --> 00:07:28,380
security teacher and well one way to

00:07:25,290 --> 00:07:31,740
split off is to do this with

00:07:28,380 --> 00:07:34,710
virtualization the visualization can

00:07:31,740 --> 00:07:36,630
help with such kind of segregation at

00:07:34,710 --> 00:07:38,880
least as long as the visualization

00:07:36,630 --> 00:07:41,610
itself is not more complex than the part

00:07:38,880 --> 00:07:44,490
that you want to set off so if you think

00:07:41,610 --> 00:07:47,970
now is a complete stag of it maybe even

00:07:44,490 --> 00:07:49,979
QE more on top in external side this is

00:07:47,970 --> 00:07:52,830
of course a lot of code and a lot of

00:07:49,979 --> 00:07:55,410
things a lot of yeah infrastructure to

00:07:52,830 --> 00:07:58,260
argue about and to get right in this

00:07:55,410 --> 00:08:01,440
sense for these kinds of destinations

00:07:58,260 --> 00:08:03,630
are kind of useless so the typical

00:08:01,440 --> 00:08:06,000
approach that you find out there in the

00:08:03,630 --> 00:08:09,080
world is to do this with a much smaller

00:08:06,000 --> 00:08:11,849
microphone advertiser so which one is

00:08:09,080 --> 00:08:15,090
focused on on this isolation to us

00:08:11,849 --> 00:08:17,610
spatial and temporal isolation which is

00:08:15,090 --> 00:08:20,310
reduced in its complexity of course

00:08:17,610 --> 00:08:22,289
features which means reduce variation

00:08:20,310 --> 00:08:25,830
effort which also means if you're lucky

00:08:22,289 --> 00:08:30,620
we used latencies let's talk em between

00:08:25,830 --> 00:08:30,620
okay and the hardware means less latency

00:08:31,520 --> 00:08:37,110
unfortunately there's no stand up out

00:08:34,050 --> 00:08:39,479
there so if you go for the cloud and you

00:08:37,110 --> 00:08:42,719
see kvm of course if you go for this

00:08:39,479 --> 00:08:44,640
market you can pick from a large number

00:08:42,719 --> 00:08:49,530
increased large number of commercial

00:08:44,640 --> 00:08:53,140
offerings mobile usually it's a niche

00:08:49,530 --> 00:08:54,910
market though so there's not

00:08:53,140 --> 00:08:57,880
will be interested in getting this kind

00:08:54,910 --> 00:08:59,800
of consolidated and unfortunately also

00:08:57,880 --> 00:09:02,800
very very few open source projects out

00:08:59,800 --> 00:09:06,160
there and they are not well not that a

00:09:02,800 --> 00:09:17,530
larger or they are not harder to use

00:09:06,160 --> 00:09:21,700
cases let be interesting so another

00:09:17,530 --> 00:09:23,380
effect of those hypervisors classic type

00:09:21,700 --> 00:09:26,290
1 hypervisors which are booting

00:09:23,380 --> 00:09:31,150
basically first before your general

00:09:26,290 --> 00:09:34,320
public operating system they basically

00:09:31,150 --> 00:09:39,160
at the controls are two completely and

00:09:34,320 --> 00:09:42,070
have to bring up noncritical of the

00:09:39,160 --> 00:09:45,550
princeton of your system and that of

00:09:42,070 --> 00:09:47,650
course means this is good law either it

00:09:45,550 --> 00:09:49,390
has to be adapted to the scenario

00:09:47,650 --> 00:09:52,240
paravirtualization done by many

00:09:49,390 --> 00:09:53,980
commercial vendors all the hypervisor is

00:09:52,240 --> 00:09:56,380
growing bigger and bigger just please

00:09:53,980 --> 00:09:58,300
this journal / brake system get up so

00:09:56,380 --> 00:10:01,270
there's quite a lot of work to do to get

00:09:58,300 --> 00:10:02,980
just the system running while in the end

00:10:01,270 --> 00:10:04,930
when your system is up and running and

00:10:02,980 --> 00:10:06,880
petitioned I think you have the fridges

00:10:04,930 --> 00:10:09,630
you're not service task from the rhythm

00:10:06,880 --> 00:10:13,330
or safety or security were closed and

00:10:09,630 --> 00:10:15,790
the actual look of everything ideally

00:10:13,330 --> 00:10:18,850
yes 20 when the hardware supporting you

00:10:15,790 --> 00:10:21,940
very well in the isolation book one much

00:10:18,850 --> 00:10:26,950
do still you have to handle all these

00:10:21,940 --> 00:10:30,550
big topic boot up face and that's

00:10:26,950 --> 00:10:33,160
basically where we start to think about

00:10:30,550 --> 00:10:39,970
this and where this new approach called

00:10:33,160 --> 00:10:44,460
jailhouse comes in so what if the usual

00:10:39,970 --> 00:10:49,210
way of booting at liam's would first

00:10:44,460 --> 00:10:52,120
takeoff roll over the hardware and with

00:10:49,210 --> 00:10:54,010
partitioning after linux has booted in

00:10:52,120 --> 00:10:55,630
the end is just adding another stage in

00:10:54,010 --> 00:10:57,970
the boot process Dupree in the firm air

00:10:55,630 --> 00:11:01,270
quality but--look now Linux is not a

00:10:57,970 --> 00:11:03,570
boot loader was running and now we are

00:11:01,270 --> 00:11:06,430
partitioning so now we are moving

00:11:03,570 --> 00:11:08,050
basically this small

00:11:06,430 --> 00:11:12,130
budgeting hypervisors underneath our

00:11:08,050 --> 00:11:13,600
Linux kernel of course it has to have

00:11:12,130 --> 00:11:17,020
some additional information for this

00:11:13,600 --> 00:11:18,850
like configuration and images to end up

00:11:17,020 --> 00:11:20,740
finding just like this that we still

00:11:18,850 --> 00:11:25,360
have this partitioning we have linux

00:11:20,740 --> 00:11:26,950
besides allah critical workloads and the

00:11:25,360 --> 00:11:30,730
goal of this is of course to keep the

00:11:26,950 --> 00:11:35,560
hypervisor much smaller it's about

00:11:30,730 --> 00:11:38,380
finding right balance between features

00:11:35,560 --> 00:11:40,660
on the one side and in this case

00:11:38,380 --> 00:11:42,730
simplicity and we are with this approach

00:11:40,660 --> 00:11:47,370
focusing on simplicity of the hypervisor

00:11:42,730 --> 00:11:47,370
so really just on this partition exhaust

00:11:48,779 --> 00:11:54,820
of the architecture so this is a system

00:11:52,060 --> 00:11:56,920
minutes running basically what do we add

00:11:54,820 --> 00:11:59,580
here well to the standard Linux kernel

00:11:56,920 --> 00:12:03,490
so far unmodified possibly this will

00:11:59,580 --> 00:12:06,450
change in small part and we added a

00:12:03,490 --> 00:12:08,680
standard module this is a loader module

00:12:06,450 --> 00:12:10,540
and just create an interface for

00:12:08,680 --> 00:12:12,580
configuration for starting up to

00:12:10,540 --> 00:12:16,000
integration so we've come on line two

00:12:12,580 --> 00:12:18,010
yes unix environment we load the hyper

00:12:16,000 --> 00:12:21,040
values of the others path including a

00:12:18,010 --> 00:12:22,900
system configuration we also low to them

00:12:21,040 --> 00:12:27,100
yeah the workload we want to spit out

00:12:22,900 --> 00:12:34,029
and its configuration and then we are

00:12:27,100 --> 00:12:38,800
done the point here is thought doing

00:12:34,029 --> 00:12:40,870
axis controller and virtualization so we

00:12:38,800 --> 00:12:43,450
focus on testing and filtering the

00:12:40,870 --> 00:12:45,070
access to any kind of critical resources

00:12:43,450 --> 00:12:48,040
we have in the system with respect to

00:12:45,070 --> 00:12:50,020
this partitioning like any kind of

00:12:48,040 --> 00:12:53,170
physical addresses well unless the

00:12:50,020 --> 00:12:55,690
hostel support considering then I oh of

00:12:53,170 --> 00:12:58,779
course io interrupt and insert interrupt

00:12:55,690 --> 00:13:00,790
anything with targeting other cpu cores

00:12:58,779 --> 00:13:03,430
can also serve of course or critical

00:13:00,790 --> 00:13:06,700
workloads and anything else we have

00:13:03,430 --> 00:13:09,160
possibly crossed the optical stealth so

00:13:06,700 --> 00:13:11,140
maybe the interference so Sigma for

00:13:09,160 --> 00:13:13,060
example if the mixes issuing with it and

00:13:11,140 --> 00:13:14,550
you have frying some critical parts on

00:13:13,060 --> 00:13:18,720
the others I get on one possibly two

00:13:14,550 --> 00:13:18,720
procedures is a real attack to request

00:13:19,310 --> 00:13:26,130
we do what one resources on that means

00:13:22,649 --> 00:13:29,250
no other commitments no scheduling less

00:13:26,130 --> 00:13:32,130
overhead less complexity at

00:13:29,250 --> 00:13:35,009
effectiveness but of course all those

00:13:32,130 --> 00:13:38,009
features and we do not hide the

00:13:35,009 --> 00:13:40,199
existence to have a lot so you don't

00:13:38,009 --> 00:13:43,649
emulate lacking basically specifically

00:13:40,199 --> 00:13:46,290
those bit of course and they see a very

00:13:43,649 --> 00:13:48,209
much reduced system not a full pc like

00:13:46,290 --> 00:13:53,100
or whatever system you have our

00:13:48,209 --> 00:13:57,089
architecture we expose the east and

00:13:53,100 --> 00:13:59,699
resources widely unmodified so think if

00:13:57,089 --> 00:14:02,490
you assign core 52 some of these

00:13:59,699 --> 00:14:06,779
critical partitions it will qualify for

00:14:02,490 --> 00:14:08,160
this position so no matter what yeah but

00:14:06,779 --> 00:14:11,850
normally the system would look like we

00:14:08,160 --> 00:14:13,709
just leave it unmodified Linux won't

00:14:11,850 --> 00:14:16,170
notice this kind of change because the

00:14:13,709 --> 00:14:18,149
already booted it up there and running

00:14:16,170 --> 00:14:22,470
and the other pearls of course need a

00:14:18,149 --> 00:14:25,649
little bit of variance of this if it is

00:14:22,470 --> 00:14:26,970
more well FK vm out there this is

00:14:25,649 --> 00:14:30,630
basically where we want to draw the line

00:14:26,970 --> 00:14:32,279
we don't want to replace even a subset

00:14:30,630 --> 00:14:34,440
of the use cases of kvm you want to

00:14:32,279 --> 00:14:40,500
augment the use case we can do with

00:14:34,440 --> 00:14:42,779
virtualization of the legs then it is

00:14:40,500 --> 00:14:44,519
our friend Eric metro so first of all

00:14:42,779 --> 00:14:46,529
the bootstrap process so the system is

00:14:44,519 --> 00:14:49,110
move up Arthur p configuration is done

00:14:46,529 --> 00:14:50,430
the linux s before otherwise the loading

00:14:49,110 --> 00:14:53,160
and configuration as shown in the

00:14:50,430 --> 00:14:54,690
graphic before is done this way on the

00:14:53,160 --> 00:14:57,360
command line so we have the command line

00:14:54,690 --> 00:14:58,920
tool and you can able it provide the

00:14:57,360 --> 00:15:01,079
configuration of the system and be done

00:14:58,920 --> 00:15:03,000
same for the creation of these kinds of

00:15:01,079 --> 00:15:05,160
petitions written partitions or security

00:15:03,000 --> 00:15:09,300
positions it's done via command line

00:15:05,160 --> 00:15:11,430
tool as well linux both doesn't this

00:15:09,300 --> 00:15:13,620
because nick and do her plugin so we

00:15:11,430 --> 00:15:15,990
pluck abuse others we plug up resources

00:15:13,620 --> 00:15:17,639
like devices before it and then we can

00:15:15,990 --> 00:15:19,350
assign them to something else the next

00:15:17,639 --> 00:15:23,310
will be fine with it because for the

00:15:19,350 --> 00:15:26,100
next non-existing what again we are

00:15:23,310 --> 00:15:28,589
using that Curtis potaka visor and we

00:15:26,100 --> 00:15:29,670
have a unique look and feel like so if

00:15:28,589 --> 00:15:31,949
you think of many of those bare-metal

00:15:29,670 --> 00:15:33,040
hypervisor you have to configure them to

00:15:31,949 --> 00:15:36,130
the bootloader

00:15:33,040 --> 00:15:39,759
or even outside of this context so this

00:15:36,130 --> 00:15:41,680
is much more handy and once the system

00:15:39,759 --> 00:15:43,449
is running again we have the

00:15:41,680 --> 00:15:46,389
environments are running and using it

00:15:43,449 --> 00:15:49,540
for management at us so for example to

00:15:46,389 --> 00:15:52,470
shut down a competition again first

00:15:49,540 --> 00:15:55,329
command for this monitoring logging and

00:15:52,470 --> 00:15:56,920
of course also shutting down all systems

00:15:55,329 --> 00:16:00,509
are getting back to the stage where

00:15:56,920 --> 00:16:04,120
Linux is controlling the whole hardware

00:16:00,509 --> 00:16:05,649
again you can add complexity and also

00:16:04,120 --> 00:16:08,079
sorta turnaround time so if you want to

00:16:05,649 --> 00:16:14,199
configure into those APIs where you

00:16:08,079 --> 00:16:16,540
don't have to reboot in those cases so

00:16:14,199 --> 00:16:19,329
we done some prototyping and normally we

00:16:16,540 --> 00:16:24,100
would only critics these days so for

00:16:19,329 --> 00:16:28,870
water on Intel we whatever for after

00:16:24,100 --> 00:16:31,600
extensions of it just say no facials and

00:16:28,870 --> 00:16:34,060
some other specific features like 106

00:16:31,600 --> 00:16:36,060
gas mode and of course you also need

00:16:34,060 --> 00:16:41,709
some kind of like mu D be incremental

00:16:36,060 --> 00:16:43,360
with interrupt remapping due to the

00:16:41,709 --> 00:16:45,069
current I have another design at least

00:16:43,360 --> 00:16:47,199
an angel it's possible to do direct

00:16:45,069 --> 00:16:48,760
interrupt delivery so even if the CPU is

00:16:47,199 --> 00:16:50,319
not supporting this you sense the

00:16:48,760 --> 00:16:52,449
interfaces to do interrupt delivery

00:16:50,319 --> 00:16:54,149
directly to the virtual machine this is

00:16:52,449 --> 00:16:57,339
not necessary for us we can basically

00:16:54,149 --> 00:16:59,740
avoid trapping interrupt delivery

00:16:57,339 --> 00:17:01,569
physical delivery but because you cannot

00:16:59,740 --> 00:17:04,120
interrupt offs while we are the

00:17:01,569 --> 00:17:06,699
hypervisor code and use different

00:17:04,120 --> 00:17:10,949
innocent demise to signal between the

00:17:06,699 --> 00:17:12,819
different course in the hypervisor state

00:17:10,949 --> 00:17:16,240
minimalistic and my always or

00:17:12,819 --> 00:17:19,659
implemented in just to please resources

00:17:16,240 --> 00:17:22,209
like ìoh well for certain scenarios you

00:17:19,659 --> 00:17:25,449
also need x86 classic one and of course

00:17:22,209 --> 00:17:27,280
for the PCI very much configuration you

00:17:25,449 --> 00:17:29,890
also see to intercept and control

00:17:27,280 --> 00:17:32,350
basically what's going on there it's an

00:17:29,890 --> 00:17:34,690
optimized it just focusing on our use

00:17:32,350 --> 00:17:35,950
case with the next running on top so we

00:17:34,690 --> 00:17:37,270
don't emulate the whole set of

00:17:35,950 --> 00:17:39,750
instructions as those which are

00:17:37,270 --> 00:17:43,120
interested for this kind of excesses and

00:17:39,750 --> 00:17:45,220
this is no part nothing should have in

00:17:43,120 --> 00:17:46,040
your career path and this is usually the

00:17:45,220 --> 00:17:48,710
case with

00:17:46,040 --> 00:17:54,980
onions of infrastructures that's a

00:17:48,710 --> 00:17:57,560
question sure is the aisle handled on on

00:17:54,980 --> 00:17:59,360
the isolated core or the handle this is

00:17:57,560 --> 00:18:02,330
just a blend of the same context so it's

00:17:59,360 --> 00:18:05,330
I always just basically doing again this

00:18:02,330 --> 00:18:07,400
kind of interception controlling what is

00:18:05,330 --> 00:18:11,420
being written to if it's allowed and

00:18:07,400 --> 00:18:13,610
what we originally emulations in this

00:18:11,420 --> 00:18:15,950
case is interpreting what saw what

00:18:13,610 --> 00:18:18,890
instruction is seeing a executed yet

00:18:15,950 --> 00:18:22,700
this is an advertiser diffusion line

00:18:18,890 --> 00:18:25,340
fulfilled currently working program it's

00:18:22,700 --> 00:18:26,960
divisive Simon we have some basic

00:18:25,340 --> 00:18:29,480
isolations working but not yet for all

00:18:26,960 --> 00:18:31,760
devices and all drains and also the

00:18:29,480 --> 00:18:33,680
management of this devices and also the

00:18:31,760 --> 00:18:35,870
interrupt delivery of course also has to

00:18:33,680 --> 00:18:40,430
be controlled still it's an ongoing

00:18:35,870 --> 00:18:43,070
project the prototyping is done was done

00:18:40,430 --> 00:18:46,700
actually completely for the first as

00:18:43,070 --> 00:18:51,020
well few weeks at least and the thing

00:18:46,700 --> 00:18:53,510
running inside GMO kvm this is really a

00:18:51,020 --> 00:18:55,010
very nice develop environment simply

00:18:53,510 --> 00:18:57,590
because you have a very short turnaround

00:18:55,010 --> 00:18:59,900
time so I measured less than 30 seconds

00:18:57,590 --> 00:19:01,610
typically for fixing some minor back in

00:18:59,900 --> 00:19:04,040
you have another which broke everything

00:19:01,610 --> 00:19:05,990
and deploying this kind of fix

00:19:04,040 --> 00:19:08,360
recuperation from deploying it and

00:19:05,990 --> 00:19:10,610
running it innovative environment and

00:19:08,360 --> 00:19:12,590
see if it works out try the same allure

00:19:10,610 --> 00:19:14,990
real Hardware this would take much

00:19:12,590 --> 00:19:19,670
longer moreover sorcerer debugging was

00:19:14,990 --> 00:19:22,070
possible in this context as well we saw

00:19:19,670 --> 00:19:25,040
six several Nexus virtualization attacks

00:19:22,070 --> 00:19:27,500
in this context so for example direct

00:19:25,040 --> 00:19:29,360
interrupt delivery to a desk system

00:19:27,500 --> 00:19:34,160
wasn't implemented at all of wasn't for

00:19:29,360 --> 00:19:37,190
seen in a vm added this not work nessa

00:19:34,160 --> 00:19:38,690
TBT it was fortunately already

00:19:37,190 --> 00:19:40,640
implemented at this point that's not

00:19:38,690 --> 00:19:42,680
completely stabilized so we also looked

00:19:40,640 --> 00:19:46,130
into Elizabeth and had some nice desk is

00:19:42,680 --> 00:19:47,870
for this and I'm sure unrestricted guest

00:19:46,130 --> 00:19:49,610
mode was also not available not

00:19:47,870 --> 00:19:51,320
available well it's going to be

00:19:49,610 --> 00:19:54,080
available so it's just right now in the

00:19:51,320 --> 00:19:57,680
development stage of avian and also the

00:19:54,080 --> 00:19:59,810
preemption timer anvils mobility in the

00:19:57,680 --> 00:20:02,330
account you have to step off the virtual

00:19:59,810 --> 00:20:04,880
arman there is no v TD in this virtual

00:20:02,330 --> 00:20:06,440
environment to do this and have to do is

00:20:04,880 --> 00:20:09,550
continuously right now in through the

00:20:06,440 --> 00:20:11,930
garage so that's different if you just

00:20:09,550 --> 00:20:13,490
program something and the whole system

00:20:11,930 --> 00:20:16,190
is Lofton you have no clue what happened

00:20:13,490 --> 00:20:18,800
right now because you miss configure to

00:20:16,190 --> 00:20:20,930
either the mule table and devices to be

00:20:18,800 --> 00:20:22,940
do anymore or interrupted on not only

00:20:20,930 --> 00:20:25,250
delivers of course this is very unhandy

00:20:22,940 --> 00:20:27,470
to have physical hardware an Oreo

00:20:25,250 --> 00:20:29,180
debugging infrastructure that would be

00:20:27,470 --> 00:20:36,440
much more nice to have in a virtual

00:20:29,180 --> 00:20:37,910
environment okay so everybody for

00:20:36,440 --> 00:20:40,220
several times it is about the weird

00:20:37,910 --> 00:20:50,290
things so let's go even more weird let's

00:20:40,220 --> 00:20:55,790
think about such scenarios oh yeah so I

00:20:50,290 --> 00:20:58,310
assume that your office waiting the

00:20:55,790 --> 00:21:00,410
Linux house that you put it on and to a

00:20:58,310 --> 00:21:03,800
non-root note or whatever the hell

00:21:00,410 --> 00:21:06,530
should um presumably you already had a

00:21:03,800 --> 00:21:08,960
lot of memory from Linux at startup time

00:21:06,530 --> 00:21:11,360
so then you're restricting to memory

00:21:08,960 --> 00:21:16,340
connect so what do you do about like a

00:21:11,360 --> 00:21:19,130
legacy platform devices that aren't

00:21:16,340 --> 00:21:21,860
necessarily controlled by BTD in terms

00:21:19,130 --> 00:21:26,390
of days like I think with ie new DNA and

00:21:21,860 --> 00:21:28,940
then that's not protected by BTE among

00:21:26,390 --> 00:21:30,710
other things well the borders at this

00:21:28,940 --> 00:21:34,130
board yeah of course the appetizers it's

00:21:30,710 --> 00:21:37,520
a very careful in this regard so shut

00:21:34,130 --> 00:21:39,080
down the channels normally mass storage

00:21:37,520 --> 00:21:41,780
is done we are this interfaces these

00:21:39,080 --> 00:21:45,020
days and so you can actually shut that

00:21:41,780 --> 00:21:46,670
down and define with it of course there

00:21:45,020 --> 00:21:49,640
might be sources mod and we do not

00:21:46,670 --> 00:21:51,800
really yeah conform the requirements of

00:21:49,640 --> 00:21:53,410
complete isolation and this case you

00:21:51,800 --> 00:21:56,620
can't use it for such type of use cases

00:21:53,410 --> 00:21:59,720
well but this is no different from other

00:21:56,620 --> 00:22:01,130
scenarios isolation as well but this is

00:21:59,720 --> 00:22:03,470
really what you have to look very

00:22:01,130 --> 00:22:05,900
carefully at the concrete system and see

00:22:03,470 --> 00:22:08,120
what kind of resources get exposed and

00:22:05,900 --> 00:22:10,760
it is way and have to think about

00:22:08,120 --> 00:22:13,080
basically what implication comes from

00:22:10,760 --> 00:22:19,050
exposing them to linux for whatever

00:22:13,080 --> 00:22:22,380
just for scheduling online core and then

00:22:19,050 --> 00:22:26,820
especially now that Arkadia my different

00:22:22,380 --> 00:22:29,940
quarter that's it well if you consider

00:22:26,820 --> 00:22:34,950
more about the kvm section I become too

00:22:29,940 --> 00:22:37,380
but the next slide so that failed is a

00:22:34,950 --> 00:22:39,540
question what to do if you want to think

00:22:37,380 --> 00:22:45,150
what all this kind of this computer is

00:22:39,540 --> 00:22:46,680
not linux so something which are more or

00:22:45,150 --> 00:22:51,840
less depends of the point of view

00:22:46,680 --> 00:22:57,420
shining the interface and not really

00:22:51,840 --> 00:22:59,250
that's well non-climate this requirement

00:22:57,420 --> 00:23:03,870
of this system are much much bigger than

00:22:59,250 --> 00:23:06,030
what linux is one looks like so what

00:23:03,870 --> 00:23:07,710
approach of course is to what Anthony

00:23:06,030 --> 00:23:09,930
was pointing it right nervously

00:23:07,710 --> 00:23:14,600
extension house in a way that we can

00:23:09,930 --> 00:23:18,180
basically host of which are more complex

00:23:14,600 --> 00:23:21,510
the other approach is to vm for this so

00:23:18,180 --> 00:23:26,130
basically host kbm on top of our jade

00:23:21,510 --> 00:23:29,040
house petition for linux again how to

00:23:26,130 --> 00:23:33,210
achieve this goal without getting

00:23:29,040 --> 00:23:36,870
creative about the complexity yes there

00:23:33,210 --> 00:23:39,090
is something wasn't Lee so first

00:23:36,870 --> 00:23:41,850
approach is of course think about full

00:23:39,090 --> 00:23:44,520
virtualization this context so basically

00:23:41,850 --> 00:23:46,260
get a complete operating system non

00:23:44,520 --> 00:23:50,340
linux operating system booting on a

00:23:46,260 --> 00:23:52,920
jailhouse partition and this likely

00:23:50,340 --> 00:23:54,390
means leftovers for the gap because you

00:23:52,920 --> 00:23:56,970
only have one level interaction with the

00:23:54,390 --> 00:23:59,450
specialization interfaces but it will

00:23:56,970 --> 00:24:01,230
require of course more emulation and

00:23:59,450 --> 00:24:03,840
possibly you can follow them

00:24:01,230 --> 00:24:06,660
nevertheless it requires more accurate

00:24:03,840 --> 00:24:08,340
virtualizing me do right now it also

00:24:06,660 --> 00:24:10,380
requires things as a virtual buyers and

00:24:08,340 --> 00:24:14,880
even more if you think about it quickly

00:24:10,380 --> 00:24:16,230
gets complicated and therefore we also

00:24:14,880 --> 00:24:19,110
consider the other parcel it is

00:24:16,230 --> 00:24:21,000
basically enabling that kvm is usable

00:24:19,110 --> 00:24:22,740
again in a jailhouse petition right now

00:24:21,000 --> 00:24:26,010
it is not possible in the first version

00:24:22,740 --> 00:24:28,050
of course because the already using the

00:24:26,010 --> 00:24:32,190
the rude mode for the hypervisor earth

00:24:28,050 --> 00:24:34,650
or we can expose it but if this would be

00:24:32,190 --> 00:24:35,820
possible well of course it means that

00:24:34,650 --> 00:24:37,350
you have to intersect all these

00:24:35,820 --> 00:24:39,380
privileged instruction for doing

00:24:37,350 --> 00:24:42,630
virtualization and the possibly mean

00:24:39,380 --> 00:24:45,360
high / overhead focus on the other hand

00:24:42,630 --> 00:24:46,620
we can focus on virtualization features

00:24:45,360 --> 00:24:50,130
which are going to expose to the guest

00:24:46,620 --> 00:24:51,750
and basically you'll need to visualize

00:24:50,130 --> 00:24:54,000
in religion is much you can just

00:24:51,750 --> 00:24:56,220
validate the excess of this or they

00:24:54,000 --> 00:24:59,130
access to these privileged instructions

00:24:56,220 --> 00:25:00,600
and the large would be to be gaining

00:24:59,130 --> 00:25:02,280
full features that are available to

00:25:00,600 --> 00:25:04,950
scream occurring already right now and

00:25:02,280 --> 00:25:06,960
we benefit also missed ability we don't

00:25:04,950 --> 00:25:09,270
have reason plement and go through the

00:25:06,960 --> 00:25:10,830
painful / faces a p.m. already went

00:25:09,270 --> 00:25:17,430
through for example a bit arbitrary

00:25:10,830 --> 00:25:19,860
windows with a version 1 so what if we

00:25:17,430 --> 00:25:22,830
build this path method virtualization on

00:25:19,860 --> 00:25:24,960
dieters call it well the point is

00:25:22,830 --> 00:25:27,720
basically executed be an X instruction

00:25:24,960 --> 00:25:31,440
intel on behalf of kvm in the context of

00:25:27,720 --> 00:25:34,040
a perversion so for this we of course

00:25:31,440 --> 00:25:36,720
have to control the access to this

00:25:34,040 --> 00:25:39,390
control structure and that is used to

00:25:36,720 --> 00:25:43,650
describe the guest host interaction on

00:25:39,390 --> 00:25:45,870
in terms of the vm CS we have to look in

00:25:43,650 --> 00:25:49,140
whenever these kind of structures change

00:25:45,870 --> 00:25:50,760
our relatives changed are there any kind

00:25:49,140 --> 00:25:52,350
of physical addresses written to the

00:25:50,760 --> 00:25:54,150
structure in the field with the

00:25:52,350 --> 00:25:56,970
requirements we have on the isolation of

00:25:54,150 --> 00:25:58,710
Link's domain and any is there any kind

00:25:56,970 --> 00:26:03,540
of unsupported or critical features

00:25:58,710 --> 00:26:06,510
enabled in this structure actually don't

00:26:03,540 --> 00:26:08,250
don't care that much if the gas of Linux

00:26:06,510 --> 00:26:11,550
configuration configuring things in a

00:26:08,250 --> 00:26:14,550
way that the CPU crashes afterwards when

00:26:11,550 --> 00:26:17,460
executing this context search however it

00:26:14,550 --> 00:26:19,710
doesn't have to affect any other set of

00:26:17,460 --> 00:26:25,320
the system so it doesn't have to spread

00:26:19,710 --> 00:26:27,060
the effect cross the next to me the

00:26:25,320 --> 00:26:29,490
first prototype be basically disabling

00:26:27,060 --> 00:26:32,220
EPT for not slow but simple so guess

00:26:29,490 --> 00:26:35,130
with the shadow pasting and then all the

00:26:32,220 --> 00:26:36,950
question arise the context well we need

00:26:35,130 --> 00:26:38,990
to restrict certain features but

00:26:36,950 --> 00:26:41,570
what if a vm is a pre-loaded and already

00:26:38,990 --> 00:26:45,950
has some of the features well of course

00:26:41,570 --> 00:26:47,630
you can kvm but we may also ask a vm

00:26:45,950 --> 00:26:51,470
with some awareness of this basically

00:26:47,630 --> 00:26:53,179
make it rediscover features and that the

00:26:51,470 --> 00:26:55,250
day knows petition is providing

00:26:53,179 --> 00:26:57,019
everything could set a featured want to

00:26:55,250 --> 00:27:04,669
detects that there's something changing

00:26:57,019 --> 00:27:06,679
the environment underneath and of course

00:27:04,669 --> 00:27:08,330
we will need on the long run has a DVT

00:27:06,679 --> 00:27:12,080
for this otherwise it's getting too slow

00:27:08,330 --> 00:27:14,630
and uncritical the market is basically

00:27:12,080 --> 00:27:16,789
an absolutist position is next one to

00:27:14,630 --> 00:27:19,519
one on the physical out there we can do

00:27:16,789 --> 00:27:21,200
the same as a shadow paging we just need

00:27:19,519 --> 00:27:24,350
to check that the shadow patient

00:27:21,200 --> 00:27:28,130
configured linux like a PM is compliant

00:27:24,350 --> 00:27:31,610
with our domain restrictions so the

00:27:28,130 --> 00:27:34,190
concept right now is basically to a very

00:27:31,610 --> 00:27:36,559
day the EPT is passed over like a vm

00:27:34,190 --> 00:27:39,799
once they are first and all get known to

00:27:36,559 --> 00:27:42,590
the general hypervisor i walk into the

00:27:39,799 --> 00:27:47,059
business and if it's fine no violation

00:27:42,590 --> 00:27:49,250
no exorcist outside really mean and then

00:27:47,059 --> 00:27:51,679
we can mark this EPT this whole

00:27:49,250 --> 00:27:53,659
structure as well as internally we keep

00:27:51,679 --> 00:27:55,820
record of it it also means that we have

00:27:53,659 --> 00:27:57,440
to from now on track basically any

00:27:55,820 --> 00:28:00,230
change to this infrastructure any

00:27:57,440 --> 00:28:02,299
changes this table structure so once the

00:28:00,230 --> 00:28:04,220
gas tries to update it stable structure

00:28:02,299 --> 00:28:06,169
we have to trap it and we have to check

00:28:04,220 --> 00:28:09,380
first of all it is staged still belong

00:28:06,169 --> 00:28:11,720
to the apt if not people off and that

00:28:09,380 --> 00:28:13,940
that is guest right with if it belongs

00:28:11,720 --> 00:28:16,220
to an axis if it is we are tracking then

00:28:13,940 --> 00:28:19,179
basically check if the change makes the

00:28:16,220 --> 00:28:21,860
total EPT invalid if so then mark it

00:28:19,179 --> 00:28:25,250
internally and reject any further entry

00:28:21,860 --> 00:28:27,080
based on this EPT I guess and if it's

00:28:25,250 --> 00:28:30,200
fine then just execute a riot and be

00:28:27,080 --> 00:28:33,289
done so in the end what we want to do is

00:28:30,200 --> 00:28:34,929
basically use the EPT that kvm is

00:28:33,289 --> 00:28:37,940
presenting us to the hypervisor

00:28:34,929 --> 00:28:43,250
unmodified while running tips get to

00:28:37,940 --> 00:28:46,460
writing l2 that's Tara classic so the

00:28:43,250 --> 00:28:47,779
third concept of our well if the artwork

00:28:46,460 --> 00:28:49,940
artists to the concept is not

00:28:47,779 --> 00:28:50,630
implemented father super virtualization

00:28:49,940 --> 00:28:52,460
but really

00:28:50,630 --> 00:28:54,980
one you would like to avoid them as

00:28:52,460 --> 00:28:57,260
possible because I can imagine that

00:28:54,980 --> 00:28:58,790
people to scream at us if we start para

00:28:57,260 --> 00:29:02,740
virtualized all over this H data

00:28:58,790 --> 00:29:02,740
structure just for this weird use case

00:29:03,970 --> 00:29:11,570
well so far from text but it's ever find

00:29:08,210 --> 00:29:13,430
the word on the topic open source so why

00:29:11,570 --> 00:29:15,680
are you doing open source so this is

00:29:13,430 --> 00:29:18,200
some kind of statement not literally

00:29:15,680 --> 00:29:20,570
that I was hearing quite a while back

00:29:18,200 --> 00:29:23,090
internally why do we have to release

00:29:20,570 --> 00:29:28,100
this trivial code you can use immediate

00:29:23,090 --> 00:29:31,190
ourselves um yeah if you look simple on

00:29:28,100 --> 00:29:32,960
the first Lance but SVO Oh at least many

00:29:31,190 --> 00:29:35,750
of us know and it's far from being

00:29:32,960 --> 00:29:38,030
trivial so there is better to have many

00:29:35,750 --> 00:29:41,600
eyes on this and there are many well

00:29:38,030 --> 00:29:43,580
auntie apart and specifications I better

00:29:41,600 --> 00:29:46,160
have other experts looking at it as well

00:29:43,580 --> 00:29:48,130
and sharing participating in the already

00:29:46,160 --> 00:29:50,840
made experience with an infrastructure

00:29:48,130 --> 00:29:51,800
what is safe what is not what looking at

00:29:50,840 --> 00:29:55,550
once with you but on the other hand

00:29:51,800 --> 00:29:57,290
things like this moreover partners are

00:29:55,550 --> 00:29:59,780
pleading out those new CPUs all the time

00:29:57,290 --> 00:30:02,390
and even on x86 we have the more or less

00:29:59,780 --> 00:30:04,820
stable feature set in general the

00:30:02,390 --> 00:30:07,490
details still are involved in deeper

00:30:04,820 --> 00:30:09,110
video or long run not to speak of all

00:30:07,490 --> 00:30:11,720
the embedded words which we are also

00:30:09,110 --> 00:30:14,810
heading for where we have also a lot of

00:30:11,720 --> 00:30:16,850
variations on cpu cores and so this is

00:30:14,810 --> 00:30:18,580
definitely better to be handled in a

00:30:16,850 --> 00:30:21,170
broader community agent dozen ourselves

00:30:18,580 --> 00:30:22,880
so the idea is also track track 20

00:30:21,170 --> 00:30:28,400
beauties including the silicon vendors

00:30:22,880 --> 00:30:29,960
and leaders to the public there it's the

00:30:28,400 --> 00:30:33,140
high chance that the use cases are

00:30:29,960 --> 00:30:35,960
broadening and that means time less

00:30:33,140 --> 00:30:38,690
coverage feel sorry faster realization

00:30:35,960 --> 00:30:40,400
and people may find use cases that we

00:30:38,690 --> 00:30:43,480
haven't thought about and then you have

00:30:40,400 --> 00:30:43,480
more particulars of this of course

00:30:43,540 --> 00:30:47,690
moreover we would like to cooperate

00:30:46,160 --> 00:30:49,970
closely with linux kernel as far as

00:30:47,690 --> 00:30:52,220
possible so if there is actually need to

00:30:49,970 --> 00:30:54,440
do some kind of changes in linux just

00:30:52,220 --> 00:30:55,820
the heat or your face but you can't

00:30:54,440 --> 00:31:00,380
argue whether to be have a proprietary

00:30:55,820 --> 00:31:02,990
episode for sure and moreover maybe one

00:31:00,380 --> 00:31:04,010
day there will be visible use case for

00:31:02,990 --> 00:31:06,140
this and

00:31:04,010 --> 00:31:07,760
then it decides well it's worth keeping

00:31:06,140 --> 00:31:10,160
it internally I remember the discussion

00:31:07,760 --> 00:31:12,110
about what extent was projected budget

00:31:10,160 --> 00:31:15,640
of the colonel this won't happen but

00:31:12,110 --> 00:31:18,290
this monitoring well contained small

00:31:15,640 --> 00:31:22,310
possibly interesting it's an incredible

00:31:18,290 --> 00:31:27,410
it morally achmet in carl willis wasn't

00:31:22,310 --> 00:31:29,660
able to do get yourself on another final

00:31:27,410 --> 00:31:32,000
work and GPL which shows you the other

00:31:29,660 --> 00:31:33,950
than I sins why well actually it has

00:31:32,000 --> 00:31:35,300
internal discussions and of course if

00:31:33,950 --> 00:31:38,180
you are agreeing I would want to release

00:31:35,300 --> 00:31:41,690
this of our own code to the public how

00:31:38,180 --> 00:31:43,520
to make sure GPL is because license for

00:31:41,690 --> 00:31:45,830
this to be because if anyone else would

00:31:43,520 --> 00:31:47,690
like using this product we will be able

00:31:45,830 --> 00:31:52,400
to see it once you buy the product

00:31:47,690 --> 00:31:54,260
otherwise they are some but then you're

00:31:52,400 --> 00:31:57,890
not sure that their competitor possibly

00:31:54,260 --> 00:32:02,600
it's not biggie for its own and not

00:31:57,890 --> 00:32:03,950
contributing back what's changed so let

00:32:02,600 --> 00:32:08,360
me summarize and give some of the

00:32:03,950 --> 00:32:10,040
comments there is a need for isolating

00:32:08,360 --> 00:32:13,370
particular workloads completely unmarked

00:32:10,040 --> 00:32:15,290
or making sure it is not disturbed by

00:32:13,370 --> 00:32:17,450
any kind with the guitars in the system

00:32:15,290 --> 00:32:19,130
specifically multiple system you can use

00:32:17,450 --> 00:32:21,380
in braking buildings that we use gives

00:32:19,130 --> 00:32:24,740
out of this and you can do an all-agency

00:32:21,380 --> 00:32:27,160
exit do I owe this way and well if you

00:32:24,740 --> 00:32:30,350
vote for safety or security scenarios

00:32:27,160 --> 00:32:33,020
you can use radiation as a spotter

00:32:30,350 --> 00:32:35,090
business because it's the kind of fear

00:32:33,020 --> 00:32:37,970
30 block for this these cases for

00:32:35,090 --> 00:32:40,310
particular system it allows specific

00:32:37,970 --> 00:32:42,530
uses full seaview isolation without any

00:32:40,310 --> 00:32:46,460
kind of weird excellent I've seen before

00:32:42,530 --> 00:32:49,070
well it reduces basically the problem to

00:32:46,460 --> 00:32:52,130
the minimum our goal is to keep below a

00:32:49,070 --> 00:32:54,560
10k of lines of code basically but not

00:32:52,130 --> 00:32:56,450
we are not Alfred knowledge probably

00:32:54,560 --> 00:33:00,890
growing all the time but this particular

00:32:56,450 --> 00:33:03,940
limited to have a medical co-pays we

00:33:00,890 --> 00:33:07,930
used to next for infrastructure as well

00:33:03,940 --> 00:33:10,820
configuration setup management tool and

00:33:07,930 --> 00:33:14,500
explain it can possibly also be combined

00:33:10,820 --> 00:33:17,470
with kvm virtualization in the isolated

00:33:14,500 --> 00:33:19,940
separated way

00:33:17,470 --> 00:33:21,320
what next well right now we are finished

00:33:19,940 --> 00:33:24,230
in as I said some of the teacher

00:33:21,320 --> 00:33:25,970
negative six we also need what more on

00:33:24,230 --> 00:33:28,010
the management features which means

00:33:25,970 --> 00:33:31,010
something like if you configure a

00:33:28,010 --> 00:33:33,350
position to run a critical workloads you

00:33:31,010 --> 00:33:35,150
probably don't want to allow linux after

00:33:33,350 --> 00:33:37,100
lots of shoppers but it's not very down

00:33:35,150 --> 00:33:40,250
so it's some kind of access control

00:33:37,100 --> 00:33:42,500
awesome reconfiguration of it and since

00:33:40,250 --> 00:33:46,940
access cavion where's Modell how is this

00:33:42,500 --> 00:33:48,500
other sector is to fight early and will

00:33:46,940 --> 00:33:49,910
probably be one of the next features and

00:33:48,500 --> 00:33:53,090
of course we also the father

00:33:49,910 --> 00:33:55,490
architectures the Raj is added clearly

00:33:53,090 --> 00:33:58,420
on our list for this year is for this

00:33:55,490 --> 00:34:02,030
well our fiscal year started right now

00:33:58,420 --> 00:34:05,690
upcoming months is on each his own port

00:34:02,030 --> 00:34:08,690
and possibly you think the reaction i

00:34:05,690 --> 00:34:09,890
received from from telecom is after

00:34:08,690 --> 00:34:12,890
discussing this kind of architecture

00:34:09,890 --> 00:34:16,580
would it be possible to run linux such a

00:34:12,890 --> 00:34:18,380
kind of isolated at position possibly

00:34:16,580 --> 00:34:20,720
with a lot of taking orders but maybe is

00:34:18,380 --> 00:34:23,420
an interesting use case i don't know is

00:34:20,720 --> 00:34:26,870
not depressing but maybe squares comes

00:34:23,420 --> 00:34:29,270
up with some interesting ok 02 makes it

00:34:26,870 --> 00:34:32,740
possible to have a linux aside linux

00:34:29,270 --> 00:34:35,510
partition system over their house and

00:34:32,740 --> 00:34:37,420
finally you can follow and join us with

00:34:35,510 --> 00:34:40,160
developments it has been pushed

00:34:37,420 --> 00:34:42,440
yesterday on my state your own equal

00:34:40,160 --> 00:34:44,300
airport and it's available now on github

00:34:42,440 --> 00:34:47,630
so you look at the code you can pay with

00:34:44,300 --> 00:34:50,690
their subscription GM of a vm but also

00:34:47,630 --> 00:34:54,590
make it work on if you're after right

00:34:50,690 --> 00:34:56,780
features though so give it a try and I'm

00:34:54,590 --> 00:34:58,760
happy for feedback on this and thank you

00:34:56,780 --> 00:35:01,150
for the attention and the mobile tech

00:34:58,760 --> 00:35:01,150

YouTube URL: https://www.youtube.com/watch?v=tlpxE7AKSkU


