Title: KVM Forum 2013: Block Layer Status Report by Stefan Hajnoczi & Kevin Wolf
Publication date: 2014-10-30
Playlist: KVM Forum 2013
Description: 
	Slides: https://docs.google.com/file/d/0BzyAwvVlQckeQm5pOHYxay1uMlE

In the 3 years since it was founded, the OpenStack project has grown very rapidly, attracting a range of contributors from across the open source ecosystem, and looks on track to assume a dominant position in the open source cloud computing space. At the core of OpenStack, the Nova sub-project provides a compute platform able to leverage a number of virtualization technologies, with KVM as the most prominent choice. Daniel, as a member of the Nova core team, aims to ensure that KVM remains the most feature rich virtualization technology integrated in Nova. The talk will outline the overall OpenStack architecture with a focus on Nova, the capabilities of KVM as used in Nova, how KVM integrates with the OpenStack storage and networking sub-projects, and what developments to expect in future releases of OpenStack.
Captions: 
	00:00:00,000 --> 00:00:10,950
I was talking about is only one left in

00:00:04,950 --> 00:00:14,730
them for their proposed image of the

00:00:10,950 --> 00:00:20,520
block layer and block hear a click on

00:00:14,730 --> 00:00:23,220
just one of the keys the front ends

00:00:20,520 --> 00:00:26,279
which our guest writers recommendation

00:00:23,220 --> 00:00:30,359
in like Renee floppy like this or any

00:00:26,279 --> 00:00:34,260
devices and at the part again which is

00:00:30,359 --> 00:00:36,660
basically math and everything that makes

00:00:34,260 --> 00:00:40,680
give me access the real stars which

00:00:36,660 --> 00:00:46,520
files or network connections or which we

00:00:40,680 --> 00:00:49,160
is the engine um justification is are

00:00:46,520 --> 00:00:54,840
mostly focused on the back end part

00:00:49,160 --> 00:01:02,879
right so that's obviously a min

00:00:54,840 --> 00:01:12,770
imageprograf there ok let's start with

00:01:02,879 --> 00:01:12,770
image for us if it what happened here

00:01:31,800 --> 00:01:38,340
yeah come back to work yes

00:01:47,790 --> 00:02:00,509
okay mucha with others like not

00:01:56,920 --> 00:02:06,490
necessarily um getting back to like I'm

00:02:00,509 --> 00:02:09,780
so the first thing what about QQ one big

00:02:06,490 --> 00:02:12,670
project currently the development is

00:02:09,780 --> 00:02:18,010
chicken feed application basically idea

00:02:12,670 --> 00:02:20,650
is that if you create an image which

00:02:18,010 --> 00:02:26,590
contains in definitely use or eat that

00:02:20,650 --> 00:02:33,420
device detect the paper on in both

00:02:26,590 --> 00:02:38,769
flashers and um so you see applicated

00:02:33,420 --> 00:02:44,650
good morning what's up with this thing

00:02:38,769 --> 00:02:48,310
is that could detect that hardened

00:02:44,650 --> 00:02:55,840
substance lost pain take a piss and

00:02:48,310 --> 00:03:00,850
compare that to the unlock images are

00:02:55,840 --> 00:03:03,910
ready so you can't keep a hatchet for

00:03:00,850 --> 00:03:07,959
the whole image in American on the other

00:03:03,910 --> 00:03:11,410
hand the hardest is very slow and we

00:03:07,959 --> 00:03:16,810
will be doing a separate talk about all

00:03:11,410 --> 00:03:22,030
of this so if you're interested be sure

00:03:16,810 --> 00:03:27,370
to attend pissed off not only featuring

00:03:22,030 --> 00:03:30,370
you care to its progress so um even

00:03:27,370 --> 00:03:33,820
though we haven't had anything to lately

00:03:30,370 --> 00:03:39,660
and um generally are testing and review

00:03:33,820 --> 00:03:47,950
process there are still these areas when

00:03:39,660 --> 00:03:52,080
modify something so in a case that give

00:03:47,950 --> 00:03:52,080
me that never back or you already have

00:03:52,180 --> 00:03:59,980
you want to make sure that pretty much

00:03:56,219 --> 00:04:03,310
wraps is usually such small we don't eat

00:03:59,980 --> 00:04:07,709
like crap and then we overestimated

00:04:03,310 --> 00:04:13,889
actually because of this one wrong entry

00:04:07,709 --> 00:04:19,959
and the only which becomes wrong or less

00:04:13,889 --> 00:04:22,870
so what really desire to do it a lot off

00:04:19,959 --> 00:04:26,080
of the offset of marinara already memory

00:04:22,870 --> 00:04:29,919
so we can virtually just compare before

00:04:26,080 --> 00:04:31,599
each right if it's all riding minute of

00:04:29,919 --> 00:04:33,759
certain types that it is supposed to be

00:04:31,599 --> 00:04:37,060
orange so for example if the gas is

00:04:33,759 --> 00:04:40,419
riding the dis and it auto rights if you

00:04:37,060 --> 00:04:44,220
care to have obviously wrong so we

00:04:40,419 --> 00:04:46,570
compare the offset and if this happens

00:04:44,220 --> 00:04:50,289
Jamie won't actually do the right that

00:04:46,570 --> 00:04:52,599
little baby metropolitan museum with my

00:04:50,289 --> 00:04:55,630
image has dropped it and you have to run

00:04:52,599 --> 00:04:58,750
a camera image check on it before you

00:04:55,630 --> 00:05:02,820
can breathe right again and that's an

00:04:58,750 --> 00:05:07,530
additional safety measure case unit

00:05:02,820 --> 00:05:12,539
across the dimensional somehow during

00:05:07,530 --> 00:05:12,539
transportation or because of a cable box

00:05:14,220 --> 00:05:22,389
okay now don't click find in a Jewish

00:05:17,050 --> 00:05:24,370
this performance and over the past few

00:05:22,389 --> 00:05:29,169
years we have seen a lot of improvements

00:05:24,370 --> 00:05:36,729
and if you have a limit I allocations

00:05:29,169 --> 00:05:44,830
there yes we're doing hope you're right

00:05:36,729 --> 00:05:47,199
if you are see um we have here the the

00:05:44,830 --> 00:05:50,050
white flashes is basically in empty

00:05:47,199 --> 00:05:52,659
image and I guess is doing a write

00:05:50,050 --> 00:05:56,409
request let's jog restore I do this one

00:05:52,659 --> 00:05:59,460
and so the new thing is what actually

00:05:56,409 --> 00:06:02,380
rights to it doesn't try to load faster

00:05:59,460 --> 00:06:05,560
but he writes part of the cash system Oh

00:06:02,380 --> 00:06:09,279
toodles case what you have to do is not

00:06:05,560 --> 00:06:12,610
only write this new area the caption we

00:06:09,279 --> 00:06:16,240
get kissed Jeju is doing allocating

00:06:12,610 --> 00:06:18,599
donate and acceptor granularity so you'd

00:06:16,240 --> 00:06:22,449
have to make sure that the area before

00:06:18,599 --> 00:06:26,889
the blue area and after the area you

00:06:22,449 --> 00:06:28,180
area has another data as well so you

00:06:26,889 --> 00:06:31,180
have a backing file you need to read

00:06:28,180 --> 00:06:35,949
that article be there if you don't have

00:06:31,180 --> 00:06:38,469
you need to read fierce there and that's

00:06:35,949 --> 00:06:43,380
just additional reason right requests

00:06:38,469 --> 00:06:43,380
that you have for each left allocation

00:06:43,409 --> 00:06:48,760
usually or in many cases you have

00:06:45,789 --> 00:06:52,029
sequential writes so the very next thing

00:06:48,760 --> 00:06:56,169
after the f copy of the red areas which

00:06:52,029 --> 00:06:58,510
are the token right area the very next

00:06:56,169 --> 00:07:01,630
thing will be interests the guest since

00:06:58,510 --> 00:07:04,630
request to is actually over Eddie what

00:07:01,630 --> 00:07:10,120
you have just got a copy and you get

00:07:04,630 --> 00:07:15,849
another um copy-on-write area to to make

00:07:10,120 --> 00:07:19,210
the last about it and so on yes blows

00:07:15,849 --> 00:07:23,229
and rides and actually need to do

00:07:19,210 --> 00:07:25,360
another thing at the very beginning it

00:07:23,229 --> 00:07:29,250
is that's quite a character it won't be

00:07:25,360 --> 00:07:34,779
over that at the very end of offered for

00:07:29,250 --> 00:07:37,089
example but the copy-on-write area the

00:07:34,779 --> 00:07:39,219
cross-hatched ones Neddy between between

00:07:37,089 --> 00:07:44,039
they aren't actually editor because it

00:07:39,219 --> 00:07:47,620
will be immediately over something that

00:07:44,039 --> 00:07:51,699
significant fixed up by using what i

00:07:47,620 --> 00:07:53,560
call you later this week actually how

00:07:51,699 --> 00:07:56,620
amazing but we just remember that we

00:07:53,560 --> 00:07:59,650
have to do this and it's a second

00:07:56,620 --> 00:08:03,490
request captain all right it can just

00:07:59,650 --> 00:08:05,349
stop this count as we have to do and for

00:08:03,490 --> 00:08:09,669
a certain time or if the guest free

00:08:05,349 --> 00:08:12,729
question request this flash it to the

00:08:09,669 --> 00:08:15,729
real being right it's a lot of

00:08:12,729 --> 00:08:18,129
improvement actually it's a

00:08:15,729 --> 00:08:25,089
to the revised performance you can't ask

00:08:18,129 --> 00:08:28,289
allocation then there's the second type

00:08:25,089 --> 00:08:33,729
of scope can write operations which is

00:08:28,289 --> 00:08:37,029
inside of a tyrannical episode if this

00:08:33,729 --> 00:08:41,139
happens its internal snapshot arise due

00:08:37,029 --> 00:08:44,470
to the lesser than 65 effector expect

00:08:41,139 --> 00:08:49,209
and you get a copyright as well the same

00:08:44,470 --> 00:08:53,010
way as you had other side before and

00:08:49,209 --> 00:08:55,779
this one is experience because you are

00:08:53,010 --> 00:09:00,040
you need that we just luscious to keep

00:08:55,779 --> 00:09:04,829
operated in the right words even if you

00:09:00,040 --> 00:09:04,829
practically in it or your husband are

00:09:06,300 --> 00:09:14,410
you can see it in in the data here

00:09:11,279 --> 00:09:19,839
revised is basically the the optimum

00:09:14,410 --> 00:09:21,100
that we can achieve yes relegation basis

00:09:19,839 --> 00:09:23,620
what we currently have in an image

00:09:21,100 --> 00:09:27,430
without the backing file with the 7-11

00:09:23,620 --> 00:09:29,740
to culture image different is just

00:09:27,430 --> 00:09:31,720
writing Alex heroes that's the

00:09:29,740 --> 00:09:36,490
difference in performance it's already

00:09:31,720 --> 00:09:37,779
be if it is external snapshot it means

00:09:36,490 --> 00:09:40,930
you also need to read from the banking

00:09:37,779 --> 00:09:43,510
file so it drops even door if you the

00:09:40,930 --> 00:09:48,550
internal snapshot almost nothing of the

00:09:43,510 --> 00:09:51,360
performance left while ago we introduced

00:09:48,550 --> 00:09:55,810
in optimization called lazy reference

00:09:51,360 --> 00:09:57,550
which would you might that we have to

00:09:55,810 --> 00:10:02,889
update the reference count table each

00:09:57,550 --> 00:10:04,930
time which takes flashes which however

00:10:02,889 --> 00:10:07,209
cut that was that if you have a crash

00:10:04,930 --> 00:10:11,230
you need a full risk and of the whole

00:10:07,209 --> 00:10:13,930
image maybe it came a check run to make

00:10:11,230 --> 00:10:17,529
it but this will again so if you apply

00:10:13,930 --> 00:10:20,199
that internal snapshots can benefit

00:10:17,529 --> 00:10:23,220
greatly from it and get up to that level

00:10:20,199 --> 00:10:23,220
of external snapshots

00:10:25,369 --> 00:10:34,529
troubling ya we considered this because

00:10:29,099 --> 00:10:37,339
it seems to be useful for for delayed

00:10:34,529 --> 00:10:42,149
cow it seems to be an obvious way to

00:10:37,339 --> 00:10:44,189
store information that we need to

00:10:42,149 --> 00:10:46,829
remember to do it Collin let me store it

00:10:44,189 --> 00:10:53,579
in the show it would actually allow us

00:10:46,829 --> 00:10:56,879
to delay even across yes um it's

00:10:53,579 --> 00:11:00,059
especially fun if you run with cash if

00:10:56,879 --> 00:11:12,649
you swipe through then up it requests we

00:11:00,059 --> 00:11:17,159
have flashed that is cash it was not so

00:11:12,649 --> 00:11:21,329
pretty much if we can implement it but

00:11:17,159 --> 00:11:28,309
not quite as optimization that s deputy

00:11:21,329 --> 00:11:28,309
and if you look at how international

00:11:28,489 --> 00:11:42,629
legislation it fixes law so we came to

00:11:38,999 --> 00:11:46,789
look into the past would be nice

00:11:42,629 --> 00:11:46,789
optimization but is not a fire chief now

00:11:48,379 --> 00:11:56,489
ok you're the other image format

00:11:52,220 --> 00:12:01,379
basically a vmware cpk we've got support

00:11:56,489 --> 00:12:05,069
for our stuff on that and we actually x

00:12:01,379 --> 00:12:08,389
it's gaining right to form and the image

00:12:05,069 --> 00:12:08,389
creation support right now

00:12:12,350 --> 00:12:20,380
it doesn't want okay next thing is

00:12:15,920 --> 00:12:20,380
actually getting to my consideration

00:12:21,190 --> 00:12:42,140
give you the 50 okay right that it's

00:12:26,030 --> 00:12:44,630
what a bit too much thanks a lot or

00:12:42,140 --> 00:12:49,250
actually I think that's first yep okay

00:12:44,630 --> 00:12:56,600
so um entirely different topic lock the

00:12:49,250 --> 00:13:00,340
configuration correct oh definitely we

00:12:56,600 --> 00:13:03,640
have this test drive option to GM

00:13:00,340 --> 00:13:06,230
certified what I make you watch it and

00:13:03,640 --> 00:13:09,050
if you don't want to use the file you

00:13:06,230 --> 00:13:11,860
just use the file name input some

00:13:09,050 --> 00:13:15,710
different string there thank you a

00:13:11,860 --> 00:13:20,570
separate economy by a colon and say any

00:13:15,710 --> 00:13:24,950
codon localhost colon for example for

00:13:20,570 --> 00:13:27,980
you to say oslo viet nam leaves like you

00:13:24,950 --> 00:13:32,480
replace all options to the block driver

00:13:27,980 --> 00:13:34,310
you're putting in a 5m string as you can

00:13:32,480 --> 00:13:41,030
see with fluffy back you can even put to

00:13:34,310 --> 00:13:45,020
pass there there are some problems with

00:13:41,030 --> 00:13:49,810
this the obvious one is if you use colon

00:13:45,020 --> 00:13:52,760
to separate options from each other or

00:13:49,810 --> 00:13:58,640
well if you have a fine image contains a

00:13:52,760 --> 00:14:03,370
column we have a problem you don't have

00:13:58,640 --> 00:14:07,580
a way to pick anything the top layer um

00:14:03,370 --> 00:14:09,740
of images that you're using for example

00:14:07,580 --> 00:14:12,200
you can change the cache mode of a

00:14:09,740 --> 00:14:19,270
backing file of the Keuka too immature

00:14:12,200 --> 00:14:27,100
using and also you only have options

00:14:19,270 --> 00:14:27,100
which means like me or the project file

00:14:27,460 --> 00:14:34,870
you can't pass any options to format

00:14:30,620 --> 00:14:39,860
like you taught you what you want to do

00:14:34,870 --> 00:14:46,400
so what you introduce is a new ways to

00:14:39,860 --> 00:14:51,200
configure things and yeah it it allows

00:14:46,400 --> 00:14:55,160
drivers to expose pacifica specific to

00:14:51,200 --> 00:14:58,190
the private and you can see examples

00:14:55,160 --> 00:15:00,950
here like you can haces final equals

00:14:58,190 --> 00:15:03,680
test teacher lady restaurant he goes on

00:15:00,950 --> 00:15:05,540
his native responding was on as a option

00:15:03,680 --> 00:15:09,860
that is only the first bike you care to

00:15:05,540 --> 00:15:12,380
the and you often see the exam

00:15:09,860 --> 00:15:14,600
room with ebony where it says I know try

00:15:12,380 --> 00:15:17,990
represent ed father thought it was local

00:15:14,600 --> 00:15:21,230
host instead of having one option or the

00:15:17,990 --> 00:15:23,540
file name which includes everything yes

00:15:21,230 --> 00:15:26,450
production and the options are all part

00:15:23,540 --> 00:15:36,320
so epic own and finally put it different

00:15:26,450 --> 00:15:38,540
it's just order nothing else then

00:15:36,320 --> 00:15:42,740
there's the monitor come and drive back

00:15:38,540 --> 00:15:49,000
and the human manager for the call it

00:15:42,740 --> 00:15:52,720
something eat liver or other metrop

00:15:49,000 --> 00:15:55,310
potlucks new block devices right back

00:15:52,720 --> 00:15:58,670
the same problems as to the next drive

00:15:55,310 --> 00:16:03,560
options it's party time machine instead

00:15:58,670 --> 00:16:05,750
of getting instruction that educated it

00:16:03,560 --> 00:16:10,610
also makes this device configuration

00:16:05,750 --> 00:16:13,030
with egg and configuration so for

00:16:10,610 --> 00:16:17,480
example you can in fact that geometry

00:16:13,030 --> 00:16:24,980
with price where you should predict it

00:16:17,480 --> 00:16:30,980
back and because of the the fact that it

00:16:24,980 --> 00:16:33,860
used to be the way that you create the

00:16:30,980 --> 00:16:36,290
device at the same time as the backend

00:16:33,860 --> 00:16:38,480
which thrive as you don't have a magic

00:16:36,290 --> 00:16:42,170
like um

00:16:38,480 --> 00:16:46,720
if you what I'm dividing it the back end

00:16:42,170 --> 00:16:49,699
suddenly disappears as well so the

00:16:46,720 --> 00:16:50,959
management tool skilled one to use it

00:16:49,699 --> 00:16:53,209
for something else such as you a

00:16:50,959 --> 00:16:57,320
different device locked job on it or

00:16:53,209 --> 00:17:05,510
whatever so that's not really suitable

00:16:57,320 --> 00:17:09,439
for PMT so what we need is to introduce

00:17:05,510 --> 00:17:14,120
it new thing doc app which just arrived

00:17:09,439 --> 00:17:20,329
in communal get master and computers

00:17:14,120 --> 00:17:22,939
don't need a second aspect and usually

00:17:20,329 --> 00:17:25,490
the new drive options which are

00:17:22,939 --> 00:17:28,339
configuring not only top never but I was

00:17:25,490 --> 00:17:29,840
making fires and everything and in a

00:17:28,339 --> 00:17:32,660
structured way instead of encoding

00:17:29,840 --> 00:17:35,200
everything in a fight name so blocked if

00:17:32,660 --> 00:17:45,799
ad is basically this thing that

00:17:35,200 --> 00:17:49,790
education it's currently implemented for

00:17:45,799 --> 00:17:51,679
Jimmy 17 will have it there it does not

00:17:49,790 --> 00:17:55,190
provide everything that is actually

00:17:51,679 --> 00:17:58,330
providing on the command line yet to be

00:17:55,190 --> 00:18:01,910
done especially if you're configuring

00:17:58,330 --> 00:18:06,799
magnet I can affect AB sorry taking

00:18:01,910 --> 00:18:09,919
suspects then options are working some

00:18:06,799 --> 00:18:16,250
art working yet so my tell you this is

00:18:09,919 --> 00:18:20,660
potential in it yet and we also left out

00:18:16,250 --> 00:18:24,020
some of the block drivers or options

00:18:20,660 --> 00:18:29,210
because we wanted to replace them with

00:18:24,020 --> 00:18:30,919
something different or wherever to get

00:18:29,210 --> 00:18:33,110
that the AP is what it wanted it's

00:18:30,919 --> 00:18:35,840
important lower so there are still a lot

00:18:33,110 --> 00:18:39,890
of ongoing development in disputes oh

00:18:35,840 --> 00:18:41,929
yes yes because for example it's

00:18:39,890 --> 00:18:43,940
completely amazing art features we don't

00:18:41,929 --> 00:18:46,210
know yet how you want to represent some

00:18:43,940 --> 00:18:46,210


00:18:47,620 --> 00:18:54,200
it is just an example as you can hear it

00:18:52,130 --> 00:18:56,180
basically matches the command line so if

00:18:54,200 --> 00:18:59,540
you have a test drive you can't age our

00:18:56,180 --> 00:19:02,300
little equals queue ID equals minus this

00:18:59,540 --> 00:19:26,630
Charlie put on a cash direct equals on

00:19:02,300 --> 00:19:35,720
and so on it's going back to this taking

00:19:26,630 --> 00:19:40,640
time well I think that grassy area that

00:19:35,720 --> 00:19:49,010
you can build excellent or that you

00:19:40,640 --> 00:19:52,580
demand and give you 10 where the home it

00:19:49,010 --> 00:19:56,540
is a complex structure which includes

00:19:52,580 --> 00:20:01,520
multiple uses of a block driver state

00:19:56,540 --> 00:20:04,420
and it has like filters you have I

00:20:01,520 --> 00:20:09,110
reserving not implemented as a different

00:20:04,420 --> 00:20:11,480
item in the whole thing so I'm is going

00:20:09,110 --> 00:20:15,010
to talk much about this weekend Marcus I

00:20:11,480 --> 00:20:20,200
will have a separate talk this afternoon

00:20:15,010 --> 00:20:54,860
so if you want to help our but a tempest

00:20:20,200 --> 00:20:57,770
from my pot we just go thank you get

00:20:54,860 --> 00:21:00,170
started so this morning Apollo bandini

00:20:57,770 --> 00:21:00,950
already presented on some of the multi

00:21:00,170 --> 00:21:03,380
present

00:21:00,950 --> 00:21:06,170
movements that we're working on in

00:21:03,380 --> 00:21:09,050
queuing you and another presentation

00:21:06,170 --> 00:21:11,750
later on today that offers some of the

00:21:09,050 --> 00:21:14,090
additional data plane work that's going

00:21:11,750 --> 00:21:16,310
on the block is kind of in the middle of

00:21:14,090 --> 00:21:18,080
all this so I've got a few slides here

00:21:16,310 --> 00:21:21,260
to bring it kind of skipper to show you

00:21:18,080 --> 00:21:24,080
what the full stack looks like from the

00:21:21,260 --> 00:21:28,160
low-level threaded limited although

00:21:24,080 --> 00:21:31,580
introduced to me to the kind of the

00:21:28,160 --> 00:21:34,070
user-visible API in the end the basic

00:21:31,580 --> 00:21:35,900
problem that we started from but that

00:21:34,070 --> 00:21:39,280
Paula described this morning with a

00:21:35,900 --> 00:21:42,530
historically giving these architecture

00:21:39,280 --> 00:21:44,630
works using a big law which is very

00:21:42,530 --> 00:21:46,820
similar to some of the OS kernels what

00:21:44,630 --> 00:21:49,310
they did as well like Linux have the

00:21:46,820 --> 00:21:51,800
same problem because we had smaller

00:21:49,310 --> 00:21:53,540
changes of course it wasn't so much of a

00:21:51,800 --> 00:21:55,880
big deal if you had a big lock it was a

00:21:53,540 --> 00:21:57,500
very easy way to say it block now and

00:21:55,880 --> 00:21:59,300
now I don't have to worry about any race

00:21:57,500 --> 00:22:02,390
conditions any other threads interfering

00:21:59,300 --> 00:22:04,880
it just became scalability problem when

00:22:02,390 --> 00:22:07,010
I'm keen time of course and we're really

00:22:04,880 --> 00:22:08,660
able to start executing coding parallels

00:22:07,010 --> 00:22:10,670
because obviously while you have this

00:22:08,660 --> 00:22:14,180
big lock you're not doing at work in

00:22:10,670 --> 00:22:15,950
parallel so Q still has that although we

00:22:14,180 --> 00:22:19,880
do have some dedicated threads that are

00:22:15,950 --> 00:22:21,860
doing specific work this is really where

00:22:19,880 --> 00:22:24,500
the scalability bottleneck can come in

00:22:21,860 --> 00:22:28,040
when a big thank you get so if you have

00:22:24,500 --> 00:22:30,080
84 be used for more you start to see

00:22:28,040 --> 00:22:33,800
these effects especially lost with this

00:22:30,080 --> 00:22:35,480
lots of course you had availability from

00:22:33,800 --> 00:22:38,210
you realize that the performance you're

00:22:35,480 --> 00:22:39,500
getting under commute it is less than

00:22:38,210 --> 00:22:43,580
what you should be getting from your

00:22:39,500 --> 00:22:46,640
autograph so this is where the data

00:22:43,580 --> 00:22:49,790
plane feature was developed basically

00:22:46,640 --> 00:22:53,270
the idea was to create a separate code

00:22:49,790 --> 00:22:56,300
path a separate thread the data plane

00:22:53,270 --> 00:22:59,720
threat that is executing outside the big

00:22:56,300 --> 00:23:02,060
log and by doing that it was obviously

00:22:59,720 --> 00:23:03,650
able to scale much better because it

00:23:02,060 --> 00:23:05,800
wasn't holding up everything else and it

00:23:03,650 --> 00:23:08,780
wasn't being held up by anything else

00:23:05,800 --> 00:23:10,250
now although was quite polite in his

00:23:08,780 --> 00:23:12,950
presentation he didn't draw too much

00:23:10,250 --> 00:23:14,759
attention to it but the data plane

00:23:12,950 --> 00:23:18,599
thread actually rewrote

00:23:14,759 --> 00:23:21,959
unicode it didn't need software and if

00:23:18,599 --> 00:23:23,940
you use a lot of other QB code and what

00:23:21,959 --> 00:23:26,759
that meant is not only did we duplicate

00:23:23,940 --> 00:23:28,469
a lot of code but we were also missing

00:23:26,759 --> 00:23:31,529
some of the features that you expect

00:23:28,469 --> 00:23:36,139
like image format and block job and I o

00:23:31,529 --> 00:23:38,519
trouble and other things like this so

00:23:36,139 --> 00:23:39,449
you know especially it all software

00:23:38,519 --> 00:23:41,909
engineers in the room are probably

00:23:39,449 --> 00:23:47,219
getting their pitchforks ready we need

00:23:41,909 --> 00:23:49,349
to get rid of this people so need to do

00:23:47,219 --> 00:23:50,879
this properly and not just write

00:23:49,349 --> 00:23:52,979
everything in a separate thread and I'll

00:23:50,879 --> 00:23:56,999
share any codes we need to fix you

00:23:52,979 --> 00:24:00,089
yourself to do we need to move from from

00:23:56,999 --> 00:24:02,339
the front model where we have just a big

00:24:00,089 --> 00:24:05,399
log and some sites that are not using

00:24:02,339 --> 00:24:07,349
Unicode that i'm showing here if you

00:24:05,399 --> 00:24:09,089
move through this model where we

00:24:07,349 --> 00:24:11,159
actually take care of concurrency where

00:24:09,089 --> 00:24:13,229
important it's not important everywhere

00:24:11,159 --> 00:24:15,569
but the data plane where you're doing I

00:24:13,229 --> 00:24:19,319
oh it is important because we want to be

00:24:15,569 --> 00:24:21,199
able to scale and do lots of I offs so

00:24:19,319 --> 00:24:24,859
basically what we need here is we need

00:24:21,199 --> 00:24:27,959
the fine grain walking and other

00:24:24,859 --> 00:24:29,909
red-faced here concurrency primitives we

00:24:27,959 --> 00:24:33,629
need them in qemu we need to music or

00:24:29,909 --> 00:24:35,339
its api to use them and on top of this

00:24:33,629 --> 00:24:38,099
what we'd like to have is it like have

00:24:35,339 --> 00:24:40,859
multiple I otra multiple event loops

00:24:38,099 --> 00:24:43,699
that can be doing work and ideally this

00:24:40,859 --> 00:24:47,549
should be user configurable we want to

00:24:43,699 --> 00:24:50,489
but if you do or you want to test things

00:24:47,549 --> 00:24:53,190
out it would be nice it's machine I want

00:24:50,489 --> 00:24:55,769
to have a sip and I want to find them to

00:24:53,190 --> 00:24:58,619
the GPS you can really excited to get

00:24:55,769 --> 00:25:00,389
the most performance out of it so that's

00:24:58,619 --> 00:25:04,199
kind of where we're heading that's the

00:25:00,389 --> 00:25:05,819
proper solution for data plane now a lot

00:25:04,199 --> 00:25:09,299
of work has been done in the past months

00:25:05,819 --> 00:25:14,279
on converting core qemu infrastructure

00:25:09,299 --> 00:25:17,699
so all the things like bottom halves aio

00:25:14,279 --> 00:25:19,109
context timers all these all these

00:25:17,699 --> 00:25:21,479
primitives that we you think do you

00:25:19,109 --> 00:25:23,879
where traditionally is that oh there's a

00:25:21,479 --> 00:25:25,229
big law I don't need to worry about you

00:25:23,879 --> 00:25:27,089
know a race conditions or anything like

00:25:25,229 --> 00:25:28,990
that they've been converted to that

00:25:27,089 --> 00:25:31,720
lifestyle and now we're getting too

00:25:28,990 --> 00:25:33,880
point where the block layer itself can

00:25:31,720 --> 00:25:39,309
be converted to use these primitives and

00:25:33,880 --> 00:25:41,770
start being safe so what are the next

00:25:39,309 --> 00:25:44,710
steps after this how do we really

00:25:41,770 --> 00:25:46,480
finished projects and expose something

00:25:44,710 --> 00:25:49,090
useful to the users to everyone can take

00:25:46,480 --> 00:25:53,740
advantage of good performance high

00:25:49,090 --> 00:25:55,540
scalability Mike Ross a simple a table

00:25:53,740 --> 00:26:00,160
tomorrow will be presenting something

00:25:55,540 --> 00:26:03,580
called Q context which is basically the

00:26:00,160 --> 00:26:06,429
the API ability to have multiple event

00:26:03,580 --> 00:26:08,620
loops so I see this being integrated

00:26:06,429 --> 00:26:11,320
with data plane so that we can define

00:26:08,620 --> 00:26:14,590
multiple threads that will be executing

00:26:11,320 --> 00:26:16,150
I over time of course we still need to

00:26:14,590 --> 00:26:17,190
do more performance work we need to

00:26:16,150 --> 00:26:21,309
figure out what are the goods

00:26:17,190 --> 00:26:25,920
configurations that should be default in

00:26:21,309 --> 00:26:28,929
order to get the best performance that

00:26:25,920 --> 00:26:33,030
right now the focus on verai of all

00:26:28,929 --> 00:26:36,010
because what I block it and additionally

00:26:33,030 --> 00:26:40,150
disk i/o device that we focus our time

00:26:36,010 --> 00:26:42,190
on is optimized it a lot but these

00:26:40,150 --> 00:26:44,530
concepts and the data frame works

00:26:42,190 --> 00:26:48,100
introduced basically multi bright orange

00:26:44,530 --> 00:26:49,809
cubanía via fight a lot of devices all

00:26:48,100 --> 00:26:51,550
dimensions with a platform devices some

00:26:49,809 --> 00:26:53,470
of the low-level devices in a good idea

00:26:51,550 --> 00:26:56,830
to be able to do the unlock dispatch

00:26:53,470 --> 00:27:00,760
there and we obviously advocacy which

00:26:56,830 --> 00:27:03,070
recognized likely all later and the

00:27:00,760 --> 00:27:06,220
workers we started on also converting

00:27:03,070 --> 00:27:09,309
rodeo next to the data so that it

00:27:06,220 --> 00:27:12,610
doesn't run in the one single iris red

00:27:09,309 --> 00:27:19,740
with one big long so that's where we are

00:27:12,610 --> 00:27:24,490
on move on up to a different set of feed

00:27:19,740 --> 00:27:28,420
all its leading the basically a set of

00:27:24,490 --> 00:27:34,179
features that were QB early snapshots

00:27:28,420 --> 00:27:36,760
and fact this is something of a week in

00:27:34,179 --> 00:27:39,940
qu historically because we didn't offer

00:27:36,760 --> 00:27:42,280
all that much in the way of built-in

00:27:39,940 --> 00:27:42,790
ability to just back up the disc while

00:27:42,280 --> 00:27:47,650
the guests

00:27:42,790 --> 00:27:53,650
running so the first thing we did in QB

00:27:47,650 --> 00:27:56,200
1.6 week a new command and the new

00:27:53,650 --> 00:28:02,380
process of it gives you is it a lot of

00:27:56,200 --> 00:28:04,210
you to copy off running let me can

00:28:02,380 --> 00:28:07,540
actually still be writing to the disc

00:28:04,210 --> 00:28:09,880
while you're taking this map and the

00:28:07,540 --> 00:28:11,920
trick is that when the guests of the

00:28:09,880 --> 00:28:14,080
right we intercept that we don't allow

00:28:11,920 --> 00:28:17,500
us to do the right straightaway instead

00:28:14,080 --> 00:28:19,090
we say if this is destroying some data

00:28:17,500 --> 00:28:22,600
on the disk if it's overriding something

00:28:19,090 --> 00:28:24,460
first copy out that data into the

00:28:22,600 --> 00:28:29,430
external file that we're backing up to

00:28:24,460 --> 00:28:31,990
and then allow the right to proceed and

00:28:29,430 --> 00:28:34,480
so this allows you to basically extract

00:28:31,990 --> 00:28:36,970
a completely independent separate full

00:28:34,480 --> 00:28:39,310
copy of the disk now this is heavy

00:28:36,970 --> 00:28:43,120
weight because if you did you know about

00:28:39,310 --> 00:28:45,400
this device may be copying a couple

00:28:43,120 --> 00:28:46,870
hundred gigabytes out but it allows you

00:28:45,400 --> 00:28:49,750
to do a full backup so this is kind of

00:28:46,870 --> 00:28:52,540
the first step of getting a nice

00:28:49,750 --> 00:28:54,850
snapshot we already do have external

00:28:52,540 --> 00:28:57,400
snapshots which is the backing files we

00:28:54,850 --> 00:28:59,890
linked files together and each file have

00:28:57,400 --> 00:29:03,340
just the Delta of the data that changed

00:28:59,890 --> 00:29:05,620
the bees are a little bit harder to work

00:29:03,340 --> 00:29:09,670
with in some cases you cannot change the

00:29:05,620 --> 00:29:11,080
change without resolving the

00:29:09,670 --> 00:29:14,470
dependencies you if you have to call

00:29:11,080 --> 00:29:16,690
today it's like go time if you go back

00:29:14,470 --> 00:29:18,370
in a time machine if you change some

00:29:16,690 --> 00:29:20,140
things you might never be born it's kind

00:29:18,370 --> 00:29:21,580
of the the same problem because there's

00:29:20,140 --> 00:29:23,170
the tendencies right you can't change

00:29:21,580 --> 00:29:24,190
your back and file change and just

00:29:23,170 --> 00:29:26,650
delete something because you're not

00:29:24,190 --> 00:29:29,320
interested in after anymore they still

00:29:26,650 --> 00:29:32,920
contain data that one of its ancestors

00:29:29,320 --> 00:29:35,440
depends on so if you use drive back up

00:29:32,920 --> 00:29:37,330
you get around that problem because

00:29:35,440 --> 00:29:39,550
you've got an independent copy of the

00:29:37,330 --> 00:29:41,590
full disk but we want to get more

00:29:39,550 --> 00:29:43,390
lightweight we want to support better

00:29:41,590 --> 00:29:48,460
access as well not just copy on a

00:29:43,390 --> 00:29:50,680
full-on fatigue or leopard so the next

00:29:48,460 --> 00:29:53,850
step here is image releasing something

00:29:50,680 --> 00:29:53,850
which is still worked on

00:29:54,210 --> 00:30:00,030
and the idea to give you an API where

00:29:56,760 --> 00:30:03,570
you can say I want an nvd the network

00:30:00,030 --> 00:30:05,750
lock device protocol export that I can

00:30:03,570 --> 00:30:08,730
connect to and I want to see a read-only

00:30:05,750 --> 00:30:10,200
snapshot of the dip and the whole thing

00:30:08,730 --> 00:30:12,810
what we can do here is we can give you

00:30:10,200 --> 00:30:15,540
access to a read-only it's not rather

00:30:12,810 --> 00:30:17,460
with it without actually copying the

00:30:15,540 --> 00:30:20,190
whole thing because internally we just

00:30:17,460 --> 00:30:22,770
use a Kim Kyle to that's pointing back

00:30:20,190 --> 00:30:24,030
to the disk which the guest is using and

00:30:22,770 --> 00:30:25,560
we use the same kind of right

00:30:24,030 --> 00:30:28,710
intersection that i was talking about

00:30:25,560 --> 00:30:30,840
here so what this means is when the gas

00:30:28,710 --> 00:30:32,640
rights which this we intercept that and

00:30:30,840 --> 00:30:34,650
we say wait first we need to put that

00:30:32,640 --> 00:30:37,770
into the 2,000 file so we just a

00:30:34,650 --> 00:30:40,290
away and then we allow the right to

00:30:37,770 --> 00:30:42,630
proceed so this is this is very useful

00:30:40,290 --> 00:30:45,510
for temporary snapshot things like virus

00:30:42,630 --> 00:30:47,400
scanners inventory and also backup

00:30:45,510 --> 00:30:50,310
applications keep things people have

00:30:47,400 --> 00:30:51,930
been wanting to integrate into kvm and

00:30:50,310 --> 00:30:55,830
they couldn't do it efficiently now

00:30:51,930 --> 00:30:58,590
we're very close to having this API to

00:30:55,830 --> 00:30:59,640
love you crazy snapshot and the cool

00:30:58,590 --> 00:31:01,590
thing is when you're done with it you

00:30:59,640 --> 00:31:02,880
just to start it all that happens is

00:31:01,590 --> 00:31:04,980
that the QT up to file is deleted

00:31:02,880 --> 00:31:07,440
there's no data talking so it's

00:31:04,980 --> 00:31:10,130
relatively efficient so it's going to be

00:31:07,440 --> 00:31:13,230
a powerful feature for inspecting this

00:31:10,130 --> 00:31:15,120
okay so then we can build up from this

00:31:13,230 --> 00:31:18,750
once we've got a whole snapshot of the

00:31:15,120 --> 00:31:20,850
ability to inspect it expect that the

00:31:18,750 --> 00:31:23,930
next step is incremental backup the

00:31:20,850 --> 00:31:26,580
ability issue just getting the changes

00:31:23,930 --> 00:31:28,260
from last time if you do periodic

00:31:26,580 --> 00:31:30,690
backups you don't want to copy out the

00:31:28,260 --> 00:31:33,090
400 gigs every time we want to copy just

00:31:30,690 --> 00:31:35,190
the data that change that's what

00:31:33,090 --> 00:31:36,570
incremental backups do stuff it's all

00:31:35,190 --> 00:31:39,510
about finding out which blocks have

00:31:36,570 --> 00:31:42,690
changed it's not yet implemented I think

00:31:39,510 --> 00:31:45,360
it is the next logical step though so if

00:31:42,690 --> 00:31:47,520
if there's anyone in the community who

00:31:45,360 --> 00:31:49,650
is interested in is either has

00:31:47,520 --> 00:31:51,990
requirements and wants to want to

00:31:49,650 --> 00:31:53,640
discuss it this is a great time now to

00:31:51,990 --> 00:31:55,230
kind of start the mailing list threads

00:31:53,640 --> 00:31:56,640
and continue talking about it we

00:31:55,230 --> 00:31:59,760
basically have two ways of doing this by

00:31:56,640 --> 00:32:02,220
the way one is the implicit API where

00:31:59,760 --> 00:32:04,080
you would for example say here's an NBD

00:32:02,220 --> 00:32:05,670
server and Q me would connect to it and

00:32:04,080 --> 00:32:06,840
it would write out all the blocks that

00:32:05,670 --> 00:32:09,060
have changed

00:32:06,840 --> 00:32:11,190
the other two the expletive API where

00:32:09,060 --> 00:32:12,660
you ask you cubic give me a list of all

00:32:11,190 --> 00:32:14,100
the box and then it gives you a list of

00:32:12,660 --> 00:32:16,260
all the blocks that have changed and you

00:32:14,100 --> 00:32:18,540
have to go and fetch them so there's

00:32:16,260 --> 00:32:20,820
still design decisions and things we can

00:32:18,540 --> 00:32:24,600
do here so so this would be the next

00:32:20,820 --> 00:32:26,960
logical step and finally building up on

00:32:24,600 --> 00:32:29,790
top of this something that's further out

00:32:26,960 --> 00:32:31,650
might be the ability to think did it

00:32:29,790 --> 00:32:35,940
kind of builds off the idea of a

00:32:31,650 --> 00:32:38,070
incremental backup in a bitmap dirty

00:32:35,940 --> 00:32:41,730
said not so the problem with incremental

00:32:38,070 --> 00:32:44,130
backup is that what you do when you take

00:32:41,730 --> 00:32:45,390
a snapshot and get the dirty blocks you

00:32:44,130 --> 00:32:47,520
basically clear that list if they

00:32:45,390 --> 00:32:49,290
thanked sector all the 30 blocks now

00:32:47,520 --> 00:32:51,720
that list is 0 again until the guests

00:32:49,290 --> 00:32:53,580
right that's more 30 possible is empty

00:32:51,720 --> 00:32:56,400
so what happens if you're running two

00:32:53,580 --> 00:32:57,420
different backup application well you

00:32:56,400 --> 00:32:59,300
can't really they're going to Spector

00:32:57,420 --> 00:33:01,950
over the 30 list if we only have one

00:32:59,300 --> 00:33:05,190
it's not compatible you can two at a

00:33:01,950 --> 00:33:06,660
time it's not multi-user in most cases

00:33:05,190 --> 00:33:11,520
that probably doesn't matter in some

00:33:06,660 --> 00:33:14,010
cases but another cool thing would be to

00:33:11,520 --> 00:33:16,440
do opportunistic replication so

00:33:14,010 --> 00:33:17,880
basically one of the problems in live

00:33:16,440 --> 00:33:20,340
migration today is unless you have

00:33:17,880 --> 00:33:22,380
shared storage you're going to have to

00:33:20,340 --> 00:33:25,020
copy a lot of things you have to move it

00:33:22,380 --> 00:33:28,200
onto the migration host before you can

00:33:25,020 --> 00:33:29,790
run against their migration well if you

00:33:28,200 --> 00:33:31,980
have something like image sinking where

00:33:29,790 --> 00:33:35,250
you can sink just the part of change you

00:33:31,980 --> 00:33:38,310
can periodically send over a copy of the

00:33:35,250 --> 00:33:39,780
disk let's say it once a day or or

00:33:38,310 --> 00:33:41,010
whatever you want and you can be pretty

00:33:39,780 --> 00:33:43,650
sure that when you do that live

00:33:41,010 --> 00:33:45,450
migration the Delta the amount of me

00:33:43,650 --> 00:33:47,520
which word over the network live

00:33:45,450 --> 00:33:49,260
migration can be small if you've already

00:33:47,520 --> 00:33:52,200
transferred most of it only a few things

00:33:49,260 --> 00:33:55,140
have changed so this is another feature

00:33:52,200 --> 00:33:59,820
that we could build and it's kind of the

00:33:55,140 --> 00:34:01,590
next step after incremental five and

00:33:59,820 --> 00:34:03,180
this is another area where you not

00:34:01,590 --> 00:34:05,550
encourage anyone who's interested to

00:34:03,180 --> 00:34:07,740
kind of step over them and let's start

00:34:05,550 --> 00:34:11,280
that discussion and the final thing i

00:34:07,740 --> 00:34:13,080
want to touch on quickly is the new get

00:34:11,280 --> 00:34:17,150
lock status api it's something that's

00:34:13,080 --> 00:34:20,070
probably added recently to qu and it's

00:34:17,150 --> 00:34:20,639
it's a powerful feature that's allowing

00:34:20,070 --> 00:34:24,629
us to do

00:34:20,639 --> 00:34:28,649
of new things it exports the mapping of

00:34:24,629 --> 00:34:31,260
your image file so you can find out

00:34:28,649 --> 00:34:34,409
where does this block Matthew in an

00:34:31,260 --> 00:34:36,779
image file on the disk not like I really

00:34:34,409 --> 00:34:39,269
wanted to export export with those much

00:34:36,779 --> 00:34:40,649
before but now we have an API so it

00:34:39,269 --> 00:34:43,079
tells you the mapping is helping which

00:34:40,649 --> 00:34:45,059
locks on the disks are allocated it also

00:34:43,079 --> 00:34:47,579
tells you which blocks at 0 if you want

00:34:45,059 --> 00:34:49,529
to officially represent 0 regions on it

00:34:47,579 --> 00:34:51,599
is so you have this gigabytes and

00:34:49,529 --> 00:34:52,769
gigabytes of zeros don't want to score 0

00:34:51,599 --> 00:34:55,260
so you want to have a sparse

00:34:52,769 --> 00:34:57,269
representation and this API allows you

00:34:55,260 --> 00:34:59,519
to query that it allows you to say for

00:34:57,269 --> 00:35:01,559
this disk image what's the state of this

00:34:59,519 --> 00:35:02,819
slop and it will tell you it's 0 or

00:35:01,559 --> 00:35:05,730
there's something there and here's where

00:35:02,819 --> 00:35:08,490
amounts to we've already started taking

00:35:05,730 --> 00:35:11,220
advantage of this API we have a queue

00:35:08,490 --> 00:35:12,990
image subcommand that dumps out a full

00:35:11,220 --> 00:35:15,029
map so if you're writing an external

00:35:12,990 --> 00:35:17,460
tool or script to inspect this images

00:35:15,029 --> 00:35:20,150
you can start using this we're also

00:35:17,460 --> 00:35:22,079
using the API internally go where

00:35:20,150 --> 00:35:24,299
there's patches on the mailing list

00:35:22,079 --> 00:35:26,730
right now that should be ready for merge

00:35:24,299 --> 00:35:29,609
soon which implements farce block

00:35:26,730 --> 00:35:31,019
migration so instead of copying over all

00:35:29,609 --> 00:35:33,690
those rows when we're doing a lot of

00:35:31,019 --> 00:35:35,579
migration for the disk image we can skip

00:35:33,690 --> 00:35:37,890
them because we can officially say these

00:35:35,579 --> 00:35:41,339
are zeros and then the destination code

00:35:37,890 --> 00:35:43,890
make sure they're 0 on dish so for

00:35:41,339 --> 00:35:46,470
anyone here who who does maintain or is

00:35:43,890 --> 00:35:47,880
writing block drivers this is a new API

00:35:46,470 --> 00:35:49,559
we're adding to the interface it's very

00:35:47,880 --> 00:35:51,000
important one to implement if you want

00:35:49,559 --> 00:35:56,180
to be able to efficiently work with

00:35:51,000 --> 00:35:59,400
images that have sparse regions so come

00:35:56,180 --> 00:36:00,839
on it but it's new API but it looks like

00:35:59,400 --> 00:36:04,319
we'll be we'll be using it more and more

00:36:00,839 --> 00:36:13,319
inside qemu and that's all I had I think

00:36:04,319 --> 00:36:16,819
we have time for a question or two okay

00:36:13,319 --> 00:36:16,819
looks like there are no questions

00:36:18,020 --> 00:36:21,950

YouTube URL: https://www.youtube.com/watch?v=rT5gMWqQeH4


