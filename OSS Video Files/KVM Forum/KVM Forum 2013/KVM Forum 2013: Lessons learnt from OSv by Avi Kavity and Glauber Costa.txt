Title: KVM Forum 2013: Lessons learnt from OSv by Avi Kavity and Glauber Costa
Publication date: 2014-10-30
Playlist: KVM Forum 2013
Description: 
	Slides: https://docs.google.com/file/d/1nhEDr0G9KKbbF13q0-8WqnAscIJghvmL0C-L2NwHiXQVcybtHishl2TFHqzS

Another look to C++ as system programming language.
Captions: 
	00:00:00,709 --> 00:00:12,240
okay okay so I everyone at the program

00:00:07,710 --> 00:00:15,059
committee we really appreciate it and

00:00:12,240 --> 00:00:19,410
especially to ask me to maintain and

00:00:15,059 --> 00:00:22,650
under the record see all kvm running on

00:00:19,410 --> 00:00:27,140
the company's high cross record hope to

00:00:22,650 --> 00:00:31,130
continue doing it to take to that and

00:00:27,140 --> 00:00:34,200
we'll talk about the lessons as they're

00:00:31,130 --> 00:00:38,399
doing a piece which operating system

00:00:34,200 --> 00:00:41,270
pasala house I think you ever because

00:00:38,399 --> 00:00:46,320
well they're very different project also

00:00:41,270 --> 00:00:54,570
share a lot of a lot of requirements and

00:00:46,320 --> 00:00:58,289
so the bank was thrilled to be like the

00:00:54,570 --> 00:01:00,120
turtle activity two O's be administered

00:00:58,289 --> 00:01:03,420
probably didn't you always and you don't

00:01:00,120 --> 00:01:06,150
know what it is and then we talked about

00:01:03,420 --> 00:01:08,939
why would think that people thought is a

00:01:06,150 --> 00:01:11,010
good imitation language practicing

00:01:08,939 --> 00:01:14,100
programming OS is resonance people

00:01:11,010 --> 00:01:17,700
suddenly had great experiences it and

00:01:14,100 --> 00:01:20,130
will follow some examples of where it's

00:01:17,700 --> 00:01:22,259
health and how it's done I'm also here

00:01:20,130 --> 00:01:24,780
to tell you from that all of that from a

00:01:22,259 --> 00:01:26,700
different perspective because everybody

00:01:24,780 --> 00:01:28,350
that knows as he knows that he is she

00:01:26,700 --> 00:01:31,229
close to the clover for a very long

00:01:28,350 --> 00:01:33,720
while I come from the other side of the

00:01:31,229 --> 00:01:37,560
spectrum so while the world water

00:01:33,720 --> 00:01:39,390
control over really he would always come

00:01:37,560 --> 00:01:41,400
with this story love Leslie rights

00:01:39,390 --> 00:01:43,439
women's of us must because we will make

00:01:41,400 --> 00:01:45,210
more sense and I keep do not they

00:01:43,439 --> 00:01:45,759
haven't planned assassination attempt on

00:01:45,210 --> 00:01:48,140
his

00:01:45,759 --> 00:01:49,880
and then I'm giving up on that because

00:01:48,140 --> 00:01:52,399
its former military well that's a I'm

00:01:49,880 --> 00:01:56,299
going to die here but that's the level

00:01:52,399 --> 00:01:59,869
of hatred I had for lunch and I managed

00:01:56,299 --> 00:02:04,429
to overcome this so I also would like to

00:01:59,869 --> 00:02:08,420
share the scars from my stylist okay so

00:02:04,429 --> 00:02:10,340
let's start so why is bein a vm was

00:02:08,420 --> 00:02:12,980
similar so they're basically mirror

00:02:10,340 --> 00:02:17,360
images of each other q is all about

00:02:12,980 --> 00:02:19,610
providing devices and providing Virgil

00:02:17,360 --> 00:02:21,890
ice auger and no asleep which is an

00:02:19,610 --> 00:02:25,250
operating system is all about consuming

00:02:21,890 --> 00:02:28,370
those devices and using them so they're

00:02:25,250 --> 00:02:31,730
both abstract of the same kind of

00:02:28,370 --> 00:02:33,470
resources of course not everything is an

00:02:31,730 --> 00:02:35,450
exact mirror image but there are still

00:02:33,470 --> 00:02:37,610
those similarities both of them have a

00:02:35,450 --> 00:02:40,130
management interface that allows you to

00:02:37,610 --> 00:02:42,560
reflect on control objects and presented

00:02:40,130 --> 00:02:45,500
to the user those are a lot of places

00:02:42,560 --> 00:02:47,930
where either you're doing the same thing

00:02:45,500 --> 00:02:50,060
but from different views or is it doing

00:02:47,930 --> 00:02:54,260
the same things but for different kinds

00:02:50,060 --> 00:02:58,519
of objects this is a team two days

00:02:54,260 --> 00:03:02,799
running there for speed but that's the

00:02:58,519 --> 00:03:06,079
younger daughter next day that's not

00:03:02,799 --> 00:03:09,170
okay so this is how a typical clouds

00:03:06,079 --> 00:03:13,130
that looks like so we have a long list

00:03:09,170 --> 00:03:16,340
of layers except if all over time so we

00:03:13,130 --> 00:03:18,560
start with the hard word and tell them

00:03:16,340 --> 00:03:23,269
we have the hypervisor maybe i should

00:03:18,560 --> 00:03:25,850
say in this form and then you have the

00:03:23,269 --> 00:03:28,700
operating system which is all is very

00:03:25,850 --> 00:03:31,850
lost in their linux and a lot of that

00:03:28,700 --> 00:03:33,440
you have one time many definitions stuff

00:03:31,850 --> 00:03:35,329
i can write the record is operating

00:03:33,440 --> 00:03:38,600
system interface because it's fairly

00:03:35,329 --> 00:03:42,049
wrong so you have a run time perhaps

00:03:38,600 --> 00:03:44,480
Ruby but in many many cases it is a java

00:03:42,049 --> 00:03:47,120
virtual machine either running java or

00:03:44,480 --> 00:03:50,329
north jersey and language like Java

00:03:47,120 --> 00:03:53,359
Script rubies or mini or scala many many

00:03:50,329 --> 00:03:55,280
languages can run on top of a JDM and

00:03:53,359 --> 00:03:55,750
then you are feeling that always with

00:03:55,280 --> 00:03:57,520
often

00:03:55,750 --> 00:04:01,180
have an application server which

00:03:57,520 --> 00:04:03,340
provides for the api's the television to

00:04:01,180 --> 00:04:05,350
use and only then you have the

00:04:03,340 --> 00:04:08,170
application that actually does the

00:04:05,350 --> 00:04:13,480
useful work for those are bidding long

00:04:08,170 --> 00:04:16,239
and ball cap now who examined this

00:04:13,480 --> 00:04:19,870
activity seeded that there's one of

00:04:16,239 --> 00:04:21,850
duplication in those players so and we

00:04:19,870 --> 00:04:24,430
could talk to just feel them the

00:04:21,850 --> 00:04:28,450
hypervisor is a operating system and the

00:04:24,430 --> 00:04:30,540
JVM and they all do some kind of

00:04:28,450 --> 00:04:33,460
extraction is some kind of protection so

00:04:30,540 --> 00:04:35,410
terms of a abstraction the hypervisor

00:04:33,460 --> 00:04:37,600
case the various hardware devices that

00:04:35,410 --> 00:04:42,160
represent multi host and he says must

00:04:37,600 --> 00:04:45,460
visualize our devices which are just for

00:04:42,160 --> 00:04:49,419
a very small pool of spice let's say 30

00:04:45,460 --> 00:04:51,580
advices for from KTM and the operating

00:04:49,419 --> 00:04:54,100
system does the same thing it takes

00:04:51,580 --> 00:04:56,050
those devices which was already read

00:04:54,100 --> 00:04:58,600
virtualized mods and say it takes it

00:04:56,050 --> 00:05:01,720
very exists and it's virtual assistants

00:04:58,600 --> 00:05:04,360
again as with device drivers and

00:05:01,720 --> 00:05:06,220
presented as files and if you look at

00:05:04,360 --> 00:05:08,140
the JC and then they gave us another

00:05:06,220 --> 00:05:10,990
player's of distraction he takes the

00:05:08,140 --> 00:05:13,840
operating system AV eyes and abstraction

00:05:10,990 --> 00:05:18,400
into the JDM api's engineer has a very

00:05:13,840 --> 00:05:20,290
rich set of KPIs to access the system so

00:05:18,400 --> 00:05:22,840
all just layers just do the same thing

00:05:20,290 --> 00:05:24,669
and keep adding overhead you have the

00:05:22,840 --> 00:05:26,650
same thing was there a protection

00:05:24,669 --> 00:05:29,800
against oh of course they keep hearing

00:05:26,650 --> 00:05:31,479
about how k here i select virtual

00:05:29,800 --> 00:05:34,419
machines from each other innocent

00:05:31,479 --> 00:05:36,640
infallible 181 a virtual machine cannot

00:05:34,419 --> 00:05:39,040
access another the operating system

00:05:36,640 --> 00:05:41,200
again has the same thing but for process

00:05:39,040 --> 00:05:43,060
as a start and through losers so you

00:05:41,200 --> 00:05:44,500
have different processes are not

00:05:43,060 --> 00:05:47,770
supposed to be able to touch each

00:05:44,500 --> 00:05:49,660
other's every area and again to JDM also

00:05:47,770 --> 00:05:52,960
does protection this time in a different

00:05:49,660 --> 00:05:55,540
way it does it I non-law and pointer

00:05:52,960 --> 00:05:57,910
arithmetic and by validating the code

00:05:55,540 --> 00:06:00,010
before translating and one again

00:05:57,910 --> 00:06:03,910
as though we get in half of its

00:06:00,010 --> 00:06:06,160
duplication and here's a list of the

00:06:03,910 --> 00:06:08,230
things that are duplicated we're not

00:06:06,160 --> 00:06:11,980
going to go to death it just shows how

00:06:08,230 --> 00:06:14,530
much application there in yeah some

00:06:11,980 --> 00:06:18,010
people have also also have always this

00:06:14,530 --> 00:06:20,650
notion that given that so many

00:06:18,010 --> 00:06:23,380
duplication exist in normal states that

00:06:20,650 --> 00:06:26,080
we have sugar a solution like compares

00:06:23,380 --> 00:06:28,960
be used because they attempt on reducing

00:06:26,080 --> 00:06:30,880
this very same level of application some

00:06:28,960 --> 00:06:32,470
also coming directly from a containers

00:06:30,880 --> 00:06:35,710
background I work with that for the past

00:06:32,470 --> 00:06:38,470
almost three years so my perspective on

00:06:35,710 --> 00:06:40,990
this is that we're basically trying to

00:06:38,470 --> 00:06:43,060
save the same problem but using an

00:06:40,990 --> 00:06:45,850
abstraction layer there's more natural

00:06:43,060 --> 00:06:47,590
to do machine so if you select the X

00:06:45,850 --> 00:06:49,450
direction to the abstraction layer of a

00:06:47,590 --> 00:06:51,580
virtual machine instead of rewriting

00:06:49,450 --> 00:06:53,530
everything in software and modifying the

00:06:51,580 --> 00:06:55,600
current provide levels of isolation that

00:06:53,530 --> 00:06:58,270
you didn't have before you just have the

00:06:55,600 --> 00:07:01,330
harder to magically start to help you so

00:06:58,270 --> 00:07:03,610
in a sense you can think that is V is

00:07:01,330 --> 00:07:05,200
something though is not technically that

00:07:03,610 --> 00:07:07,510
you can think that always be something

00:07:05,200 --> 00:07:09,280
almost like a library that you attach to

00:07:07,510 --> 00:07:10,570
your application to your jpn and

00:07:09,280 --> 00:07:13,030
whatever and then you're going to look

00:07:10,570 --> 00:07:15,070
directly on top of vmx and whatever

00:07:13,030 --> 00:07:18,310
hypervisor facilities the hypervisor

00:07:15,070 --> 00:07:21,669
provides you with that's one comparison

00:07:18,310 --> 00:07:23,470
point but the in reality when you start

00:07:21,669 --> 00:07:25,330
to look not only at what this

00:07:23,470 --> 00:07:27,669
abstraction layer provides you in terms

00:07:25,330 --> 00:07:32,250
of facilities about what can you do with

00:07:27,669 --> 00:07:34,810
that then it gets it then it gets more

00:07:32,250 --> 00:07:37,410
we get more from it even though we have

00:07:34,810 --> 00:07:39,400
this long even less is more so reductive

00:07:37,410 --> 00:07:44,560
reducing the size of the stack and

00:07:39,400 --> 00:07:46,810
reducing the level of the vacation okay

00:07:44,560 --> 00:07:49,810
and then this is the what they are

00:07:46,810 --> 00:07:51,970
poisoning look like so okay its new

00:07:49,810 --> 00:07:53,980
operating system it's not a little skirt

00:07:51,970 --> 00:07:57,340
on that has been modified it's something

00:07:53,980 --> 00:07:59,290
with it from scratch and the differences

00:07:57,340 --> 00:08:01,720
between a traditional operating system

00:07:59,290 --> 00:08:04,210
is that it has just whatever space and

00:08:01,720 --> 00:08:07,270
only was incredible so there are no

00:08:04,210 --> 00:08:10,500
public switches between different other

00:08:07,270 --> 00:08:13,260
spaces in different processes and

00:08:10,500 --> 00:08:16,530
is no chair switches between user space

00:08:13,260 --> 00:08:21,060
and criminal space harvest it saves a

00:08:16,530 --> 00:08:22,650
lot of overhead and eliminated the

00:08:21,060 --> 00:08:25,560
Occupational the other hat even though

00:08:22,650 --> 00:08:27,750
we had a pretty massive change under the

00:08:25,560 --> 00:08:30,810
book doesn't see any change because it's

00:08:27,750 --> 00:08:34,380
written against an API of the JDM API

00:08:30,810 --> 00:08:38,390
that's concept we haven't changes so it

00:08:34,380 --> 00:08:38,390
just continues to run without any change

00:08:38,570 --> 00:08:45,240
with it's the one in the orange the one

00:08:42,930 --> 00:08:47,880
that we also modifying the JTF in order

00:08:45,240 --> 00:08:50,310
to its use is logical ality but we're

00:08:47,880 --> 00:09:00,180
not changing daily eyes classifications

00:08:50,310 --> 00:09:03,690
rather change so here's a common all

00:09:00,180 --> 00:09:06,450
comprehensive list quite foolish things

00:09:03,690 --> 00:09:08,190
we're changing things we're doing I'm

00:09:06,450 --> 00:09:09,570
not going to go through all of it the

00:09:08,190 --> 00:09:11,430
you can see for example that we were

00:09:09,570 --> 00:09:14,280
aiming for loveless algorithms whenever

00:09:11,430 --> 00:09:15,990
possible so it's my to avoid a lot of

00:09:14,280 --> 00:09:18,060
other variation problems that's probably

00:09:15,990 --> 00:09:20,520
familiar with all shuttered and we have

00:09:18,060 --> 00:09:22,170
huge pages from the very beginning and a

00:09:20,520 --> 00:09:24,960
lot of other advantages of being written

00:09:22,170 --> 00:09:28,440
with your mother to chain and from other

00:09:24,960 --> 00:09:30,270
mindset when I when I told you that if

00:09:28,440 --> 00:09:32,040
we can actually do a lot more like using

00:09:30,270 --> 00:09:33,120
this approach from not only doing the

00:09:32,040 --> 00:09:35,310
things that we aren't any more

00:09:33,120 --> 00:09:37,680
efficiently were actually the more this

00:09:35,310 --> 00:09:40,500
is one of the examples of what kind of

00:09:37,680 --> 00:09:42,630
things are talking about so if you think

00:09:40,500 --> 00:09:44,580
about how networking happens at the

00:09:42,630 --> 00:09:46,770
little square for instance you have a

00:09:44,580 --> 00:09:49,320
pedicure is the writing and that packet

00:09:46,770 --> 00:09:52,290
is going through a series of things with

00:09:49,320 --> 00:09:55,770
serious acts in serial manner so you're

00:09:52,290 --> 00:09:58,530
pregnant leads to its heavenly determine

00:09:55,770 --> 00:10:00,900
intertemporal then you allocate an esky

00:09:58,530 --> 00:10:03,000
buffer and it keeps going until you find

00:10:00,900 --> 00:10:04,920
out and reach the application so we

00:10:03,000 --> 00:10:06,720
haven't tried punching use of different

00:10:04,920 --> 00:10:08,880
mechanism it's not fully implemented yet

00:10:06,720 --> 00:10:10,170
but we're on our way we try to use the

00:10:08,880 --> 00:10:12,360
different mechanism as proposed by

00:10:10,170 --> 00:10:14,910
friend Jacob son that doesn't do it

00:10:12,360 --> 00:10:16,530
almost any word endings or counter so

00:10:14,910 --> 00:10:19,230
the nature of telomere just get the

00:10:16,530 --> 00:10:21,990
package and relation fragments and we

00:10:19,230 --> 00:10:24,839
can do that because we can do that with

00:10:21,990 --> 00:10:26,459
fairly easy a fairly easy way because we

00:10:24,839 --> 00:10:28,709
want them thing in the same address

00:10:26,459 --> 00:10:30,420
space so we can we can have the colonel

00:10:28,709 --> 00:10:32,459
and the application running at the same

00:10:30,420 --> 00:10:34,980
address space without any boundaries

00:10:32,459 --> 00:10:36,839
between it we can just postpone the

00:10:34,980 --> 00:10:38,940
processing on packet the processing of

00:10:36,839 --> 00:10:40,920
everything given the allocation of the

00:10:38,940 --> 00:10:42,810
memory buffer too close to the

00:10:40,920 --> 00:10:45,029
invitation already in the city you it

00:10:42,810 --> 00:10:47,430
will be consumed in the very same cache

00:10:45,029 --> 00:10:49,350
lines so we get our own performance by

00:10:47,430 --> 00:10:51,240
you for everyone in this room this

00:10:49,350 --> 00:10:52,920
should be very easy to understand the

00:10:51,240 --> 00:10:55,649
costs behind it because it's pretty much

00:10:52,920 --> 00:10:57,510
what we're here with us so we can just

00:10:55,649 --> 00:10:59,730
do networking in a different manner in a

00:10:57,510 --> 00:11:01,500
manner that we believe given that we

00:10:59,730 --> 00:11:03,600
already have the hypervisor is relating

00:11:01,500 --> 00:11:10,170
everything it's a more efficient way to

00:11:03,600 --> 00:11:13,290
do that also what the JVM is now running

00:11:10,170 --> 00:11:15,480
in kernel space the JVM has access 12

00:11:13,290 --> 00:11:18,450
the hard work we can start changing the

00:11:15,480 --> 00:11:21,060
JDM to do things like gave him our

00:11:18,450 --> 00:11:22,740
virtualization lights but display so we

00:11:21,060 --> 00:11:25,800
have in the process right now of

00:11:22,740 --> 00:11:27,510
implementing JDM aluminum system so for

00:11:25,800 --> 00:11:30,149
all of you that had the unfortunate

00:11:27,510 --> 00:11:34,290
event in your best types of using the GV

00:11:30,149 --> 00:11:38,190
m im sue sue plus plus i'm a new board

00:11:34,290 --> 00:11:40,380
convert the JVM story in my way so we

00:11:38,190 --> 00:11:41,970
need you statically allocate the heap so

00:11:40,380 --> 00:11:44,430
you tell the JVM how much remember you

00:11:41,970 --> 00:11:46,649
when to use for that suspect the stack

00:11:44,430 --> 00:11:48,750
from you if you need to change it you

00:11:46,649 --> 00:11:50,760
usually can so we're trying to implement

00:11:48,750 --> 00:11:53,360
a little driver maybe you i will take as

00:11:50,760 --> 00:11:55,980
much very as you have and as the JDM

00:11:53,360 --> 00:11:57,660
needs less memory and then the operating

00:11:55,980 --> 00:11:59,670
system needs more men where you can get

00:11:57,660 --> 00:12:02,970
some memory back from the JDM and then

00:11:59,670 --> 00:12:09,120
give give it back and back and forth as

00:12:02,970 --> 00:12:10,920
you need it ok a little bit about

00:12:09,120 --> 00:12:13,560
occupation force that gives the

00:12:10,920 --> 00:12:18,060
operating system we started by kpmg

00:12:13,560 --> 00:12:20,820
started from an x86 or 64-bit only for

00:12:18,060 --> 00:12:23,550
some reason we started with KTM much

00:12:20,820 --> 00:12:26,399
greater data we also have a sample

00:12:23,550 --> 00:12:29,700
it's available on there on the Amazon

00:12:26,399 --> 00:12:33,149
Web Services it still slow we are

00:12:29,700 --> 00:12:37,500
concluding this team and we also stand

00:12:33,149 --> 00:12:41,040
to a report for enterprises that are not

00:12:37,500 --> 00:12:44,220
yet on on the cloud also in cataluña

00:12:41,040 --> 00:12:45,990
64-bit on board and if you have another

00:12:44,220 --> 00:12:48,390
market areas that you'd like to be if

00:12:45,990 --> 00:12:50,399
you'd like to see supported that you can

00:12:48,390 --> 00:12:55,860
send your calculation will be very happy

00:12:50,399 --> 00:12:58,070
to merchant okay this is a slide shows

00:12:55,860 --> 00:13:00,089
just a little bit about how

00:12:58,070 --> 00:13:02,790
knowledgeable sleep then it's

00:13:00,089 --> 00:13:04,709
interesting for their pitchforks so we

00:13:02,790 --> 00:13:07,380
have a rest api that allows you to

00:13:04,709 --> 00:13:12,060
upload card stock the applications and

00:13:07,380 --> 00:13:15,360
it's also available shell which will

00:13:12,060 --> 00:13:21,570
with ssh and the web interface which is

00:13:15,360 --> 00:13:23,490
what you see on the slide okay so we're

00:13:21,570 --> 00:13:26,459
the scatter store right now with their

00:13:23,490 --> 00:13:28,440
runs java toaster ones see obligations

00:13:26,459 --> 00:13:30,510
we don't run everybody application

00:13:28,440 --> 00:13:33,450
because you don't have full kazakh

00:13:30,510 --> 00:13:36,390
support for example before chemxtech are

00:13:33,450 --> 00:13:38,700
not supported not be supported but some

00:13:36,390 --> 00:13:42,870
subset of the sea of efficient space is

00:13:38,700 --> 00:13:45,600
important we run the Ruby applications

00:13:42,870 --> 00:13:47,459
here's a jiggling project its color you

00:13:45,600 --> 00:13:51,540
never to transfer a clear the messaging

00:13:47,459 --> 00:13:54,029
here supporting movie closure javascript

00:13:51,540 --> 00:13:58,950
or several JavaScript engines closing

00:13:54,029 --> 00:14:01,700
all one directly oh boy sleepy dog good

00:13:58,950 --> 00:14:04,050
performance numbers so right now the

00:14:01,700 --> 00:14:06,990
differences compared to that absurd not

00:14:04,050 --> 00:14:09,570
huge but we're just starting out we

00:14:06,990 --> 00:14:13,079
already see differences it before one

00:14:09,570 --> 00:14:14,730
small to present and if you look at the

00:14:13,079 --> 00:14:17,790
model benchmark that you see dramatic

00:14:14,730 --> 00:14:19,680
changes course that's not unexpected if

00:14:17,790 --> 00:14:22,230
you have something that is small edge

00:14:19,680 --> 00:14:24,720
specialized it will perform well and you

00:14:22,230 --> 00:14:26,930
see that the scheduler context which

00:14:24,720 --> 00:14:30,029
benchmarks which are really really fast

00:14:26,930 --> 00:14:32,839
the system moves very fast because it

00:14:30,029 --> 00:14:36,450
has little baggage cool

00:14:32,839 --> 00:14:39,930
really small you're running the the

00:14:36,450 --> 00:14:42,839
offensive foul system from opensolaris

00:14:39,930 --> 00:14:45,390
originally which is a great positive for

00:14:42,839 --> 00:14:49,950
the policy does a lot of self Gilligan

00:14:45,390 --> 00:14:52,529
cars plus administration and there tons

00:14:49,950 --> 00:14:54,260
of glaze like huge pages Ferb built into

00:14:52,529 --> 00:14:59,180
the system and not retrofitted

00:14:54,260 --> 00:15:02,790
afterwards if you look at this timeline

00:14:59,180 --> 00:15:05,430
you can see that Mosby is not around for

00:15:02,790 --> 00:15:08,640
a very long while it was started around

00:15:05,430 --> 00:15:11,220
cember shortly after came in for mize

00:15:08,640 --> 00:15:13,800
children not that sharpness mr. round

00:15:11,220 --> 00:15:16,709
summer and by sep tember we were going

00:15:13,800 --> 00:15:18,870
bullet with it so our development with

00:15:16,709 --> 00:15:22,560
it was quite aggressive we wanted to do

00:15:18,870 --> 00:15:25,440
a lot in a very small timeframe and

00:15:22,560 --> 00:15:28,290
that's one of one of the ways initiative

00:15:25,440 --> 00:15:30,899
decisions of what what tooling to use a

00:15:28,290 --> 00:15:33,450
factory when you write any kind of

00:15:30,899 --> 00:15:35,820
system software via TKO an emulator or

00:15:33,450 --> 00:15:37,520
an operating system you have your core

00:15:35,820 --> 00:15:40,410
you have a things that you are doing

00:15:37,520 --> 00:15:42,270
then emulation itself or the operating

00:15:40,410 --> 00:15:44,990
system or whatever and then you have a

00:15:42,270 --> 00:15:48,060
lot of support software like libraries

00:15:44,990 --> 00:15:50,130
containers in a sense of things in which

00:15:48,060 --> 00:15:53,459
your data structure goes to the very

00:15:50,130 --> 00:15:55,829
latest structures themselves and usually

00:15:53,459 --> 00:15:58,260
you have to write all of them both this

00:15:55,829 --> 00:16:00,779
software and all the supporting software

00:15:58,260 --> 00:16:03,570
to call it this way which are not only

00:16:00,779 --> 00:16:05,040
library so we need for example a listing

00:16:03,570 --> 00:16:06,630
them edition which is not that hard

00:16:05,040 --> 00:16:08,399
where you need to cover 1 i'm going to

00:16:06,630 --> 00:16:10,050
be the three implementation you also

00:16:08,399 --> 00:16:11,670
eventually need to come up with what

00:16:10,050 --> 00:16:13,350
because if they're not standardized and

00:16:11,670 --> 00:16:16,470
libraries you're not necessary can use

00:16:13,350 --> 00:16:18,149
the ones that are out there so one of

00:16:16,470 --> 00:16:19,890
the one of the things that allow us to

00:16:18,149 --> 00:16:22,290
have such an aggressive time frame an

00:16:19,890 --> 00:16:24,029
aggressive development case of having

00:16:22,290 --> 00:16:27,029
something writing around eight months

00:16:24,029 --> 00:16:30,300
was exactly they use of c++ and that's

00:16:27,029 --> 00:16:32,250
the thing we want to talk about that so

00:16:30,300 --> 00:16:34,500
as i told you in the beginning i have a

00:16:32,250 --> 00:16:38,100
very strong hatred for c++ at the

00:16:34,500 --> 00:16:41,670
beginning turns out there is no one c++

00:16:38,100 --> 00:16:45,300
standard there are two so simplest plus

00:16:41,670 --> 00:16:45,699
is actually two lanius first is this

00:16:45,300 --> 00:16:47,829
true

00:16:45,699 --> 00:16:50,019
type object oriented language that is

00:16:47,829 --> 00:16:51,879
specialized in leveraging synergies we

00:16:50,019 --> 00:16:54,369
get business processes for all the men

00:16:51,879 --> 00:16:57,790
needs of global companies in dynamic

00:16:54,369 --> 00:17:01,269
paradigm shift and that is the c++ it

00:16:57,790 --> 00:17:02,649
don't weigh very much not really that

00:17:01,269 --> 00:17:05,439
that's because this was suppose I've

00:17:02,649 --> 00:17:07,269
always always seemed like the Tyler said

00:17:05,439 --> 00:17:08,769
it's not anymore with the compilers that

00:17:07,269 --> 00:17:11,139
were supported it very well because the

00:17:08,769 --> 00:17:12,669
sender is so complex and you can do all

00:17:11,139 --> 00:17:16,000
sorts of interesting and not so

00:17:12,669 --> 00:17:18,069
interesting things with it once we

00:17:16,000 --> 00:17:20,500
started developing these interlocking my

00:17:18,069 --> 00:17:23,589
mentor master I learned that there is

00:17:20,500 --> 00:17:28,539
another sequel sports ok so these others

00:17:23,589 --> 00:17:31,269
think it's not it's not about huge

00:17:28,539 --> 00:17:33,460
object or entity rupees or art paradigms

00:17:31,269 --> 00:17:35,649
or about functional programming it's not

00:17:33,460 --> 00:17:39,850
about any of this it's just about

00:17:35,649 --> 00:17:41,470
generating C code or equivalency coke I

00:17:39,850 --> 00:17:43,899
know there's a lot of C programmers

00:17:41,470 --> 00:17:45,820
myself included BBC as the way to

00:17:43,899 --> 00:17:47,409
generate assembly in when we might seem

00:17:45,820 --> 00:17:50,200
to think about what they assembling it

00:17:47,409 --> 00:17:52,299
will look like eventually so I dream

00:17:50,200 --> 00:17:54,220
sequence fast in the same way it's just

00:17:52,299 --> 00:17:58,779
a way to get the compiler to generate

00:17:54,220 --> 00:18:02,409
the code that alive and whenever I find

00:17:58,779 --> 00:18:05,200
myself getting a lot of code in C 0 and

00:18:02,409 --> 00:18:07,630
that happens many many caps you all

00:18:05,200 --> 00:18:10,990
familiar with it then I just say fine on

00:18:07,630 --> 00:18:14,769
20 business in C++ and its really allows

00:18:10,990 --> 00:18:16,750
you to drop all that go to play and you

00:18:14,769 --> 00:18:18,580
dog in the steam Marcos which nobody

00:18:16,750 --> 00:18:20,470
lies hope you myself was a different

00:18:18,580 --> 00:18:23,740
style of macros but they're a lot more

00:18:20,470 --> 00:18:26,580
time integrated so that way if you

00:18:23,740 --> 00:18:28,899
actually get to be usable libraries so

00:18:26,580 --> 00:18:31,210
we know about that comes to duel

00:18:28,899 --> 00:18:34,090
interesting in macro state most it work

00:18:31,210 --> 00:18:36,220
but they're very like to use but tryna

00:18:34,090 --> 00:18:38,769
get it written actually or something

00:18:36,220 --> 00:18:42,250
more complicated it's very very hard and

00:18:38,769 --> 00:18:46,510
the result is also not very pretty so

00:18:42,250 --> 00:18:51,130
with C++ you can just use the language

00:18:46,510 --> 00:18:53,169
to generate your quote for you and this

00:18:51,130 --> 00:18:55,970
is an example it says cock-blocking

00:18:53,169 --> 00:18:58,870
we've all seen this many many times and

00:18:55,970 --> 00:19:01,790
external also in m2m oh and you have a

00:18:58,870 --> 00:19:04,400
cool off sitar protect taking estacado

00:19:01,790 --> 00:19:06,980
checking your resource and then you need

00:19:04,400 --> 00:19:09,260
to do some kind of access so you need to

00:19:06,980 --> 00:19:11,960
lock one and not the other and then we

00:19:09,260 --> 00:19:13,640
have to do all sorts of China then they

00:19:11,960 --> 00:19:16,190
allow you have to make sure you unlock

00:19:13,640 --> 00:19:18,140
them the correct order you don't unlock

00:19:16,190 --> 00:19:19,880
something that we have a clock or you

00:19:18,140 --> 00:19:22,520
don't think so negative lock unlock

00:19:19,880 --> 00:19:24,980
other violent things work and since

00:19:22,520 --> 00:19:27,310
these are usually ever have because i

00:19:24,980 --> 00:19:32,570
usually don't work in the field of

00:19:27,310 --> 00:19:34,610
underinvestment so with C++ a little bit

00:19:32,570 --> 00:19:39,320
of a library magic then you can actually

00:19:34,610 --> 00:19:42,890
do lexically scoped locks whereas he

00:19:39,320 --> 00:19:45,470
immediately clear what section of code

00:19:42,890 --> 00:19:47,420
is under a lot what is not and it's also

00:19:45,470 --> 00:19:50,210
there it means that if you leave that

00:19:47,420 --> 00:19:53,420
this hope that that's the block in any

00:19:50,210 --> 00:19:55,220
way whether it be here dropping off the

00:19:53,420 --> 00:19:57,200
end of the block or a return statement

00:19:55,220 --> 00:20:00,680
or an exception of anything including

00:19:57,200 --> 00:20:02,960
unlock and that means you have to worry

00:20:00,680 --> 00:20:05,300
about fewer things when you write the

00:20:02,960 --> 00:20:06,830
code and also add more importantly you

00:20:05,300 --> 00:20:09,380
have to worry about your things

00:20:06,830 --> 00:20:13,360
political nothing to verify with phasers

00:20:09,380 --> 00:20:13,360
but you're somewhere in that path

00:20:14,110 --> 00:20:20,090
another thing that we use the sequence

00:20:17,630 --> 00:20:24,470
bus for and take a requirement that is

00:20:20,090 --> 00:20:26,450
shared with the qm is a crazy so we have

00:20:24,470 --> 00:20:28,820
had Chris funk facility that allows you

00:20:26,450 --> 00:20:33,380
to declare and trace book is just one

00:20:28,820 --> 00:20:36,020
line of code no crazy Marcos and no coal

00:20:33,380 --> 00:20:38,990
generation is it or compilation and that

00:20:36,020 --> 00:20:40,550
actually allows them to have a variable

00:20:38,990 --> 00:20:42,650
where they look list or you have any

00:20:40,550 --> 00:20:47,450
number of arguments in dignity of any

00:20:42,650 --> 00:20:50,300
types and think laterally generates the

00:20:47,450 --> 00:20:52,580
code for the basement including the

00:20:50,300 --> 00:20:55,640
magic that converted into an office it's

00:20:52,580 --> 00:20:58,190
not used and the magic set she realises

00:20:55,640 --> 00:21:02,420
the argument whatever their types and

00:20:58,190 --> 00:21:05,330
sizes are into a buffer and then we have

00:21:02,420 --> 00:21:08,240
from the shell this is a post OC shell

00:21:05,330 --> 00:21:10,510
speed shop you can have a quotient

00:21:08,240 --> 00:21:14,030
those crates going to run time and

00:21:10,510 --> 00:21:15,890
measures how often they're involved or

00:21:14,030 --> 00:21:19,160
you can you can dump them into a file

00:21:15,890 --> 00:21:22,280
and use a lighter so instead one line to

00:21:19,160 --> 00:21:24,610
declare Oh what might use if you found

00:21:22,280 --> 00:21:27,470
this and littles you know that it's

00:21:24,610 --> 00:21:30,020
pretty much pain to the very first boy I

00:21:27,470 --> 00:21:35,510
think Eric Young was better but it also

00:21:30,020 --> 00:21:38,809
uses and fecal color so it's not nice

00:21:35,510 --> 00:21:44,059
and here is very easy to do the sort of

00:21:38,809 --> 00:21:46,090
thing and also extended as you need so

00:21:44,059 --> 00:21:49,429
yeah if you look at everything

00:21:46,090 --> 00:21:52,160
precompiler is actually just stick just

00:21:49,429 --> 00:21:55,160
generating same thing this this one is

00:21:52,160 --> 00:21:58,790
already there are no no no together no

00:21:55,160 --> 00:22:00,470
surplus plus but this and so it's more

00:21:58,790 --> 00:22:03,080
likely that you already know and like it

00:22:00,470 --> 00:22:05,590
or not but in my case it was something

00:22:03,080 --> 00:22:08,030
that I found very nice all the

00:22:05,590 --> 00:22:10,790
visualization and allocation of objects

00:22:08,030 --> 00:22:13,250
is extremely to pay forward and this is

00:22:10,790 --> 00:22:15,679
something to do all the time so not and

00:22:13,250 --> 00:22:17,660
destruction as well so this is all done

00:22:15,679 --> 00:22:19,550
automatically not only three little

00:22:17,660 --> 00:22:22,070
structures and destructors by the very

00:22:19,550 --> 00:22:23,660
fact that the allocation is atomic so

00:22:22,070 --> 00:22:25,460
both the allocation and the actual

00:22:23,660 --> 00:22:27,740
initialization of the object theory they

00:22:25,460 --> 00:22:29,840
happen atomically if you allocate and

00:22:27,740 --> 00:22:32,840
something goes wrong then we need to go

00:22:29,840 --> 00:22:34,670
in your written in your code checking

00:22:32,840 --> 00:22:36,590
for IRS checking for excitement for

00:22:34,670 --> 00:22:40,250
exceptions to see if everything is going

00:22:36,590 --> 00:22:42,320
right so it's the kind of example of the

00:22:40,250 --> 00:22:43,850
compiler generated code for you all the

00:22:42,320 --> 00:22:45,470
error verification is already in

00:22:43,850 --> 00:22:47,660
benefits what's happening over there

00:22:45,470 --> 00:22:52,010
between the steps that's nothing we need

00:22:47,660 --> 00:22:53,480
to do personal you also have as I

00:22:52,010 --> 00:22:55,580
mentioned all the kinds of containers

00:22:53,480 --> 00:22:58,100
that are already ready so for all kinds

00:22:55,580 --> 00:22:59,660
of data structures not all obviously not

00:22:58,100 --> 00:23:01,340
all kinds of data structures but at

00:22:59,660 --> 00:23:03,530
least the most common data structures

00:23:01,340 --> 00:23:05,390
and they're all very flexible than the

00:23:03,530 --> 00:23:07,280
way you use it so you have for example

00:23:05,390 --> 00:23:12,890
of vector which is basically a Grove

00:23:07,280 --> 00:23:15,890
over a robo hash as an order a map and

00:23:12,890 --> 00:23:18,710
if you can use a list to have a list as

00:23:15,890 --> 00:23:19,200
well and tweeze as in set we also make

00:23:18,710 --> 00:23:21,120
it

00:23:19,200 --> 00:23:23,669
use of red black trees which are not

00:23:21,120 --> 00:23:26,370
normal trees but the same way as lives

00:23:23,669 --> 00:23:28,860
if you look at our definitions in our

00:23:26,370 --> 00:23:31,230
usage however they are nothing like the

00:23:28,860 --> 00:23:33,000
little one the it's a lot more

00:23:31,230 --> 00:23:35,610
straightforward the data structure

00:23:33,000 --> 00:23:38,070
already works is quite efficient so the

00:23:35,610 --> 00:23:40,799
result of this is that the decision of

00:23:38,070 --> 00:23:44,309
which which data structure you should

00:23:40,799 --> 00:23:46,200
use is no longer by its own determined

00:23:44,309 --> 00:23:48,149
by our license which my case is very

00:23:46,200 --> 00:23:49,950
very hot so if you have for example

00:23:48,149 --> 00:23:51,299
something that you could use the data

00:23:49,950 --> 00:23:53,490
structure there is a little bit better

00:23:51,299 --> 00:23:56,039
but it's going to take a very long time

00:23:53,490 --> 00:23:57,990
to implement or to integrate and the

00:23:56,039 --> 00:24:00,659
gains are not going to be that that they

00:23:57,990 --> 00:24:03,809
develop using is lesser than structure

00:24:00,659 --> 00:24:06,480
as a result and with since is so is it

00:24:03,809 --> 00:24:08,070
she used to integrate declare and almost

00:24:06,480 --> 00:24:10,380
all the code is already generated

00:24:08,070 --> 00:24:12,510
automatically then the decisions or

00:24:10,380 --> 00:24:16,340
whatever structure to user come to the

00:24:12,510 --> 00:24:18,779
needs that you actually have okay

00:24:16,340 --> 00:24:21,630
another thing that you can do with C++

00:24:18,779 --> 00:24:24,659
is that enforced concept or rules of

00:24:21,630 --> 00:24:27,899
haha so this is an example for our our

00:24:24,659 --> 00:24:30,649
seal implementation with our CEO you you

00:24:27,899 --> 00:24:33,600
have a foyer to there's a specific type

00:24:30,649 --> 00:24:35,460
but you have constraints of how you use

00:24:33,600 --> 00:24:37,080
it you can't just assigned to be

00:24:35,460 --> 00:24:41,149
referenced it you need to go to a

00:24:37,080 --> 00:24:44,039
specific set of memories errors or rules

00:24:41,149 --> 00:24:47,250
so in see you have two options one of

00:24:44,039 --> 00:24:49,769
them is to have some sort of API well

00:24:47,250 --> 00:24:52,500
but then since she doesn't have isn't

00:24:49,769 --> 00:24:55,080
parametric on types usually have to lose

00:24:52,500 --> 00:24:57,990
five information and use one point or

00:24:55,080 --> 00:25:02,820
something and that just makes everything

00:24:57,990 --> 00:25:05,130
aware and it also introduces locations

00:25:02,820 --> 00:25:07,529
where you can have errors the other

00:25:05,130 --> 00:25:10,289
option is to start use marcos patel you

00:25:07,529 --> 00:25:14,610
lose a lot of generality and starts

00:25:10,289 --> 00:25:16,380
looking finger or interest of placing

00:25:14,610 --> 00:25:19,139
order nor the user and have gems

00:25:16,380 --> 00:25:21,149
knowledgeable in instance bust you can

00:25:19,139 --> 00:25:24,470
actually have tags that are per metric

00:25:21,149 --> 00:25:27,539
ton of the type user-defined types and

00:25:24,470 --> 00:25:30,000
that allows you to enforce the rule

00:25:27,539 --> 00:25:31,620
either type itself while remaining very

00:25:30,000 --> 00:25:35,910
generous so here

00:25:31,620 --> 00:25:38,700
we have a pointer to a vector which is

00:25:35,910 --> 00:25:40,290
controlled by RC you'll so if you want

00:25:38,700 --> 00:25:42,960
to we need you have to use the API

00:25:40,290 --> 00:25:45,210
sweetie and you actually get a bug into

00:25:42,960 --> 00:25:47,190
that Becker anything what the changes

00:25:45,210 --> 00:25:52,130
and it was assigned you get the correct

00:25:47,190 --> 00:25:52,130
every variable places in in both places

00:25:54,110 --> 00:25:59,340
okay another thing that we see

00:25:56,130 --> 00:26:03,090
extensively both in Nick giardino SD is

00:25:59,340 --> 00:26:05,130
the reference counting it's really hard

00:26:03,090 --> 00:26:07,380
to track the except lifetime as objects

00:26:05,130 --> 00:26:08,690
when you have multiple users versus

00:26:07,380 --> 00:26:11,670
objects and when you have that

00:26:08,690 --> 00:26:13,559
concurrency so you do reference counting

00:26:11,670 --> 00:26:16,260
and that's really really boiled her to

00:26:13,559 --> 00:26:19,860
always be the same thing again and again

00:26:16,260 --> 00:26:21,960
and again and we have the C++ facilities

00:26:19,860 --> 00:26:24,720
to automate that and we have actually

00:26:21,960 --> 00:26:27,150
more than what so just tennis facility

00:26:24,720 --> 00:26:29,940
is the shared pointer which is fully

00:26:27,150 --> 00:26:32,190
automatic you just drag your you're

00:26:29,940 --> 00:26:34,350
hiding in them and the brackets in

00:26:32,190 --> 00:26:36,809
return for in front and it does not

00:26:34,350 --> 00:26:39,420
plated reference count if you copy that

00:26:36,809 --> 00:26:42,210
vulture a reference system the reference

00:26:39,420 --> 00:26:45,030
 is incremented if it goes out of

00:26:42,210 --> 00:26:48,590
scope it's sticker and go to zero boom

00:26:45,030 --> 00:26:52,070
is destroyed very easily loosen and

00:26:48,590 --> 00:26:54,960
they're fairly efficient there is also

00:26:52,070 --> 00:26:57,600
another facility called it received by

00:26:54,960 --> 00:27:01,050
your phone booth library which is a sort

00:26:57,600 --> 00:27:03,360
of a bridge between C code that sequence

00:27:01,050 --> 00:27:05,370
code because it allows you to also have

00:27:03,360 --> 00:27:07,290
and not alone management of the

00:27:05,370 --> 00:27:09,900
reference com you can specify exactly

00:27:07,290 --> 00:27:11,490
entry field inside the object create a

00:27:09,900 --> 00:27:13,679
reference count to lulu's for

00:27:11,490 --> 00:27:16,380
recommending a diplomatic what happens

00:27:13,679 --> 00:27:18,929
when there is talk to you which option

00:27:16,380 --> 00:27:22,559
you call everything is configurable and

00:27:18,929 --> 00:27:25,260
in turn and since it can work on Plan C

00:27:22,559 --> 00:27:26,659
object it's good when you have we're in

00:27:25,260 --> 00:27:28,639
transition and you convert

00:27:26,659 --> 00:27:30,859
thing from see Lucy was possible where

00:27:28,639 --> 00:27:35,299
you have to share code between the two

00:27:30,859 --> 00:27:37,700
languages another life nice thing is a

00:27:35,299 --> 00:27:40,129
generic call back those are also very

00:27:37,700 --> 00:27:43,940
very common you have something that

00:27:40,129 --> 00:27:45,739
happens asynchronously so you want to

00:27:43,940 --> 00:27:49,429
register your callback in advance and

00:27:45,739 --> 00:27:51,320
then call it you always interpreted just

00:27:49,429 --> 00:27:53,720
a function pointer that you can aw you

00:27:51,320 --> 00:27:55,999
always need some kind of context that

00:27:53,720 --> 00:27:58,429
you don't have to write some code to

00:27:55,999 --> 00:28:01,489
convert it from the type of the complex

00:27:58,429 --> 00:28:03,489
from it'll pay boy pointer to whatever

00:28:01,489 --> 00:28:06,049
type you using to store your data and

00:28:03,489 --> 00:28:09,259
you have to write all that hold and if

00:28:06,049 --> 00:28:12,200
you get it wrong it just grazed whereas

00:28:09,259 --> 00:28:15,909
with the sequence of us is a function

00:28:12,200 --> 00:28:18,559
often you declare a call back and you

00:28:15,909 --> 00:28:22,129
specify exactly the signature of the

00:28:18,559 --> 00:28:24,799
function that it can there because Laura

00:28:22,129 --> 00:28:26,840
and it also stores will use the context

00:28:24,799 --> 00:28:32,619
they thought context with the same type

00:28:26,840 --> 00:28:35,570
you created so this allows you to have

00:28:32,619 --> 00:28:38,299
any call that dispatch to any object to

00:28:35,570 --> 00:28:44,269
like with any parameters very easily and

00:28:38,299 --> 00:28:45,950
its all checked at the palatine another

00:28:44,269 --> 00:28:47,809
mechanism that extensive

00:28:45,950 --> 00:28:51,889
dysfunctionality is the signals at the

00:28:47,809 --> 00:28:54,139
last equal example for TMO is the system

00:28:51,889 --> 00:28:55,309
reset there are a lot of biscuit handler

00:28:54,139 --> 00:28:58,429
and they all want to know what the

00:28:55,309 --> 00:29:01,729
system is reset and you also generate

00:28:58,429 --> 00:29:04,879
the research from some central place so

00:29:01,729 --> 00:29:07,999
this example which also shows how to get

00:29:04,879 --> 00:29:09,799
there anonymous cartoons numbers in

00:29:07,999 --> 00:29:12,649
single cells form shows where you can

00:29:09,799 --> 00:29:15,789
connect a function is an object called

00:29:12,649 --> 00:29:19,309
we should bar 0 you can connect it to

00:29:15,789 --> 00:29:22,249
the signal for system resetting and when

00:29:19,309 --> 00:29:23,570
you eventually invoke system reset input

00:29:22,249 --> 00:29:27,340
you invoke just like an ordinary

00:29:23,570 --> 00:29:29,749
function call it was over the list of

00:29:27,340 --> 00:29:32,659
sloth connected to that signal and

00:29:29,749 --> 00:29:35,210
involves in one by one and that list and

00:29:32,659 --> 00:29:37,039
the bottom for the place and everything

00:29:35,210 --> 00:29:38,279
else is completely managed by the

00:29:37,039 --> 00:29:40,379
library this is

00:29:38,279 --> 00:29:41,969
the library is not an average feature so

00:29:40,379 --> 00:29:44,999
you can implement something I connect up

00:29:41,969 --> 00:29:47,399
yourself but just think of how many how

00:29:44,999 --> 00:29:50,519
much guesswork ready to doing this sort

00:29:47,399 --> 00:29:52,799
of thing over and over again not just in

00:29:50,519 --> 00:29:59,309
forever but in all the large system of a

00:29:52,799 --> 00:30:02,009
programming programs are you seem okay I

00:29:59,309 --> 00:30:08,609
think so so what our traditions the

00:30:02,009 --> 00:30:12,239
first was not bad yeah so we've shown

00:30:08,609 --> 00:30:14,309
that it's the signals as really is it

00:30:12,239 --> 00:30:17,089
would manage for systems programming it

00:30:14,309 --> 00:30:20,549
the advertising in this case was correct

00:30:17,089 --> 00:30:22,469
and we really enjoyed it it said we'd

00:30:20,549 --> 00:30:24,570
use this a lot that the amount of code

00:30:22,469 --> 00:30:26,849
that we have to write all this part of

00:30:24,570 --> 00:30:29,249
into positive running and also by the

00:30:26,849 --> 00:30:33,749
fact that you're using libraries that he

00:30:29,249 --> 00:30:36,029
will have been able to use before it's

00:30:33,749 --> 00:30:39,149
also at least remains it's fun it's a

00:30:36,029 --> 00:30:41,549
rich language with interesting features

00:30:39,149 --> 00:30:44,190
and you learn a lot of them it's also

00:30:41,549 --> 00:30:46,649
fun to teach others about it and see how

00:30:44,190 --> 00:30:49,409
you can convert your apt a swimming like

00:30:46,649 --> 00:30:53,190
a fish in my couch and then you can show

00:30:49,409 --> 00:30:55,889
that it can be checked into a 1-iron and

00:30:53,190 --> 00:30:58,769
it isn't that the all of the art almost

00:30:55,889 --> 00:31:00,330
didn't OSD is applicable just as well to

00:30:58,769 --> 00:31:06,929
qi all you need to do is convince

00:31:00,330 --> 00:31:09,419
half-naked hood that's it from from my

00:31:06,929 --> 00:31:13,080
point of view escuela I came up here and

00:31:09,419 --> 00:31:15,659
say it's been fun but it's uh it's

00:31:13,080 --> 00:31:18,089
definitely not the way of you but the

00:31:15,659 --> 00:31:20,279
only reason is to like I cannot say that

00:31:18,089 --> 00:31:21,989
yet in my view that I was to getting

00:31:20,279 --> 00:31:23,849
used to that so it takes time for you to

00:31:21,989 --> 00:31:29,119
learn everything I'm obviously mystical

00:31:23,849 --> 00:31:31,919
this hobby just this is les plus game

00:31:29,119 --> 00:31:34,049
but it's also not that hard to catch up

00:31:31,919 --> 00:31:37,320
so I I think it would be possible to get

00:31:34,049 --> 00:31:39,089
to do what we've done it's soaking so

00:31:37,320 --> 00:31:41,369
much little time if it wasn't for the

00:31:39,089 --> 00:31:43,649
fact that you using C++ without all the

00:31:41,369 --> 00:31:45,499
weather way we probably right in Iran

00:31:43,649 --> 00:31:48,450
win this with annotations in this case

00:31:45,499 --> 00:31:50,680
so I think it was a personal experience

00:31:48,450 --> 00:31:56,740
in the end

00:31:50,680 --> 00:31:59,310
questions yeah and that's how you

00:31:56,740 --> 00:32:04,030
connect we'll see when I talk shows the

00:31:59,310 --> 00:32:13,990
IRC email any other method as perhaps a

00:32:04,030 --> 00:32:15,730
changin IRC its last on the list I can

00:32:13,990 --> 00:32:19,440
go to as many details as you can they

00:32:15,730 --> 00:32:22,000
don't exist but they will exist so uh

00:32:19,440 --> 00:32:26,200
we're trying to know when we get it open

00:32:22,000 --> 00:32:27,610
to decay as a basis it's still all work

00:32:26,200 --> 00:32:30,280
in progress so we don't have anything

00:32:27,610 --> 00:32:32,590
finished yet and the ballooning stuff I

00:32:30,280 --> 00:32:35,410
may be possible to it without chaining

00:32:32,590 --> 00:32:36,700
the gym via so actually to run the JVM

00:32:35,410 --> 00:32:40,030
always feel don't need to change

00:32:36,700 --> 00:32:43,960
anything ages Admiral class folder so

00:32:40,030 --> 00:32:46,090
the very very basic stuff ourselves but

00:32:43,960 --> 00:32:48,730
the runtime environment isn't changed so

00:32:46,090 --> 00:32:50,760
far so where the belonging we might be

00:32:48,730 --> 00:32:53,860
able to play tricks with vegetables and

00:32:50,760 --> 00:32:56,350
avoid changing the JVM Oh together

00:32:53,860 --> 00:32:58,390
that's obviously prefer perfect as they

00:32:56,350 --> 00:33:00,610
can not work across a range of different

00:32:58,390 --> 00:33:03,550
ATMs but others that would definitely

00:33:00,610 --> 00:33:15,150
required changes to the GM there's two

00:33:03,550 --> 00:33:19,090
own planets and the midi utama for class

00:33:15,150 --> 00:33:20,830
so for example garbage collection is one

00:33:19,090 --> 00:33:22,780
of the problem with a je nu help you

00:33:20,830 --> 00:33:25,540
have caused half you have a large eat

00:33:22,780 --> 00:33:27,130
and then you have a problem that

00:33:25,540 --> 00:33:30,220
generates a lot of objects and they need

00:33:27,130 --> 00:33:33,220
to be disposed of so what Jay David does

00:33:30,220 --> 00:33:34,990
is it scans all of memory and tries to

00:33:33,220 --> 00:33:37,690
fight objects don't have any references

00:33:34,990 --> 00:33:39,670
and just get rid of him as that causes

00:33:37,690 --> 00:33:42,220
his clothes we have a lot of memory to

00:33:39,670 --> 00:33:44,770
be trying to speed it up and you do that

00:33:42,220 --> 00:33:47,890
by exposing hardware that was previously

00:33:44,770 --> 00:33:49,510
used by traditional operating system and

00:33:47,890 --> 00:33:51,730
now is available because most being

00:33:49,510 --> 00:33:55,630
suspicious the hardware that I'm talking

00:33:51,730 --> 00:33:58,920
about is at a stable so northern ranges

00:33:55,630 --> 00:34:02,890
the users and wait tables for protection

00:33:58,920 --> 00:34:06,550
but we have available for any reason

00:34:02,890 --> 00:34:08,740
what we do is we exposed the dirty bits

00:34:06,550 --> 00:34:11,380
in the page table entries so that the

00:34:08,740 --> 00:34:12,880
JDM can keep track of which parts of

00:34:11,380 --> 00:34:15,100
memory have changed and which have

00:34:12,880 --> 00:34:17,770
thought so if you see that between two

00:34:15,100 --> 00:34:20,290
different election cycles piece of

00:34:17,770 --> 00:34:22,690
memory has not changed then he know that

00:34:20,290 --> 00:34:25,720
it doesn't mean to scan it again for

00:34:22,690 --> 00:34:28,540
references to other objects and this way

00:34:25,720 --> 00:34:30,399
we reduce the amount of time to expense

00:34:28,540 --> 00:34:32,200
and the JK already does this

00:34:30,399 --> 00:34:36,070
optimization but it doesn't lose it page

00:34:32,200 --> 00:34:38,649
just and manual a dirty bit nap that is

00:34:36,070 --> 00:34:42,399
maintained by the generated code to

00:34:38,649 --> 00:34:49,179
Jacob just the Java code and so far Gaza

00:34:42,399 --> 00:34:51,429
it tax on a big update to every right so

00:34:49,179 --> 00:34:53,710
we're going to avoid that by using the

00:34:51,429 --> 00:34:55,720
patient with dirty have the cpu

00:34:53,710 --> 00:34:57,550
maintain all of that for three that

00:34:55,720 --> 00:35:01,450
since the cpu captures all that

00:34:57,550 --> 00:35:05,560
information the tob that it's going to

00:35:01,450 --> 00:35:09,940
be much faster than the JDM then the

00:35:05,560 --> 00:35:13,120
unmodified JPM there are similar things

00:35:09,940 --> 00:35:15,460
that we can do and also because the ad

00:35:13,120 --> 00:35:17,950
eyes are open there is trust between the

00:35:15,460 --> 00:35:22,180
JTF into operating system then we can

00:35:17,950 --> 00:35:24,250
expose eid eyes that traditional system

00:35:22,180 --> 00:35:26,800
would for example we can there a

00:35:24,250 --> 00:35:31,660
disabled preemption a critical point or

00:35:26,800 --> 00:35:33,490
things like that yes the vote will

00:35:31,660 --> 00:35:35,500
convince me about writing see what bus

00:35:33,490 --> 00:35:38,410
but I spend a lot more time you voting

00:35:35,500 --> 00:35:40,030
in surprising so how did you learn okay

00:35:38,410 --> 00:35:44,710
so if there are changes or our

00:35:40,030 --> 00:35:47,740
challenges the shall we say so for

00:35:44,710 --> 00:35:49,540
example a C++ it uses something called a

00:35:47,740 --> 00:35:54,700
mapping it generates really enormous

00:35:49,540 --> 00:35:56,680
names and it also has a las extraction

00:35:54,700 --> 00:35:58,870
layers for example as a vector that is

00:35:56,680 --> 00:36:02,470
all it's actually two nested structures

00:35:58,870 --> 00:36:05,530
be at cid contain exactly the same

00:36:02,470 --> 00:36:08,170
parameters that you would expect if

00:36:05,530 --> 00:36:10,960
you're running agency but still it's

00:36:08,170 --> 00:36:12,730
more complicated but luckily the butter

00:36:10,960 --> 00:36:15,850
has a good support for

00:36:12,730 --> 00:36:17,920
or c plus us it's not perfect but if you

00:36:15,850 --> 00:36:19,900
down the vector then if it doesn't just

00:36:17,920 --> 00:36:22,030
dump the raw data structures but it also

00:36:19,900 --> 00:36:24,700
has a critic traitor for that's vector

00:36:22,030 --> 00:36:26,530
and it just so using contents of the

00:36:24,700 --> 00:36:28,090
vector without going through all the

00:36:26,530 --> 00:36:29,740
people you can still patch to the

00:36:28,090 --> 00:36:34,780
details if you suspect there's a problem

00:36:29,740 --> 00:36:36,700
there but usually it's pretty easy and

00:36:34,780 --> 00:36:38,140
you don't need to do that you can also

00:36:36,700 --> 00:36:40,990
write those pretty pissed yourself

00:36:38,140 --> 00:36:44,710
you're writing a data structure by

00:36:40,990 --> 00:36:46,660
yourself it's still not as

00:36:44,710 --> 00:36:49,300
straightforward asleep it's not that it

00:36:46,660 --> 00:36:51,460
comes I'm not saying that C++ only has

00:36:49,300 --> 00:36:54,070
advantages over see also has

00:36:51,460 --> 00:36:56,620
disadvantages and because it doesn't

00:36:54,070 --> 00:36:58,600
more work for you then the parts that it

00:36:56,620 --> 00:37:00,520
doesn't what you need to that are

00:36:58,600 --> 00:37:02,620
surprising when you depart of course you

00:37:00,520 --> 00:37:05,170
get used to it after a while and you

00:37:02,620 --> 00:37:08,410
know what to expect but when you first

00:37:05,170 --> 00:37:11,830
try to debug it it takes a while to

00:37:08,410 --> 00:37:30,310
understand or is it cold cake but

00:37:11,830 --> 00:37:41,470
overall is it soft there yeah no

00:37:30,310 --> 00:37:43,000
exceptions a security you okay okay so

00:37:41,470 --> 00:37:44,980
that's that's actually it happens that

00:37:43,000 --> 00:37:47,230
comes up often when people talk about

00:37:44,980 --> 00:37:50,310
signals boss it's virtually put secondly

00:37:47,230 --> 00:37:53,620
constraints from to use as possible two

00:37:50,310 --> 00:37:56,140
exceptions so often people say that the

00:37:53,620 --> 00:37:58,660
simplest bus is saying if you stop

00:37:56,140 --> 00:38:00,790
submitting time you have someone go of

00:37:58,660 --> 00:38:02,950
all the features and decide which wishes

00:38:00,790 --> 00:38:05,380
are okay which features are not we don't

00:38:02,950 --> 00:38:07,510
do that we allow all of the features but

00:38:05,380 --> 00:38:09,640
the constraint is eternity have to make

00:38:07,510 --> 00:38:12,190
sense where you use it so not every

00:38:09,640 --> 00:38:13,960
feature makes sense everywhere and we

00:38:12,190 --> 00:38:18,400
point out if someone tries to go

00:38:13,960 --> 00:38:20,730
overboard and so we don't build very

00:38:18,400 --> 00:38:22,920
deep classier case because these are

00:38:20,730 --> 00:38:24,450
fragile there are some places where it

00:38:22,920 --> 00:38:27,210
might make sense I don't know media

00:38:24,450 --> 00:38:31,190
windowing manager with a lot of widgets

00:38:27,210 --> 00:38:36,660
at my dog park mix-ins there but our

00:38:31,190 --> 00:38:38,910
level of her inheritance the maximum of

00:38:36,660 --> 00:38:42,180
distance between the base class and the

00:38:38,910 --> 00:38:45,090
most derived class is one we don't have

00:38:42,180 --> 00:38:48,360
very deep yerkes we use composition

00:38:45,090 --> 00:38:51,360
instead of inheritance so usually have a

00:38:48,360 --> 00:38:55,290
basic as that if item interface just

00:38:51,360 --> 00:38:57,390
virtual function and then all sorts of

00:38:55,290 --> 00:38:59,040
derived classes that are not in Iraq

00:38:57,390 --> 00:39:01,050
each other just from the base class they

00:38:59,040 --> 00:39:05,280
can use each other but they don't divide

00:39:01,050 --> 00:39:09,360
them but does of course it is problem

00:39:05,280 --> 00:39:14,960
has its own best solutions not rule

00:39:09,360 --> 00:39:18,720
dismiss everything yes well you use

00:39:14,960 --> 00:39:24,240
simple words of these unions same space

00:39:18,720 --> 00:39:25,950
we r ich9 given unto death okay so the

00:39:24,240 --> 00:39:28,650
question of the bottle unions which is a

00:39:25,950 --> 00:39:31,310
tricky see feature and traditional in

00:39:28,650 --> 00:39:34,950
C++ didn't have very good supports or

00:39:31,310 --> 00:39:37,440
kind of a stepchild just became the sea

00:39:34,950 --> 00:39:39,140
semantics but it didn't work well with

00:39:37,440 --> 00:39:41,520
the rest of her simple space features

00:39:39,140 --> 00:39:43,500
but we are not using just as evil as

00:39:41,520 --> 00:39:45,780
possible using the latest a creation

00:39:43,500 --> 00:39:49,460
which is the simplest possible data and

00:39:45,780 --> 00:39:52,050
that actually has very good support for

00:39:49,460 --> 00:39:54,120
Union turn our first class objects in

00:39:52,050 --> 00:39:56,970
that you can do anything that you can do

00:39:54,120 --> 00:39:59,970
to a class you cannot do to a union so

00:39:56,970 --> 00:40:01,800
that obstacle is no longer there you can

00:39:59,970 --> 00:40:05,010
just use unions and it works very well

00:40:01,800 --> 00:40:07,710
there are also other additions to the

00:40:05,010 --> 00:40:10,920
language explicitly support things like

00:40:07,710 --> 00:40:25,130
alignment that you mentioned but that's

00:40:10,920 --> 00:40:25,130
sergeant money yes as a forehead so I

00:40:27,180 --> 00:40:39,819
a shoebox what is that too old it's a

00:40:37,480 --> 00:40:44,520
question may be a recurring qualms it's

00:40:39,819 --> 00:40:44,520
about CFS and whatever I could change it

00:40:56,520 --> 00:41:02,800
yes so whether we revisit facet of the

00:40:59,230 --> 00:41:06,130
hospital yes sir all sorts of things

00:41:02,800 --> 00:41:09,700
that you can do there is the p90 fest

00:41:06,130 --> 00:41:12,400
that is available in there curated even

00:41:09,700 --> 00:41:15,880
used to expose the most possible to get

00:41:12,400 --> 00:41:18,099
on Amazon there is a FB object store

00:41:15,880 --> 00:41:21,609
which is too innocent file system that

00:41:18,099 --> 00:41:23,170
we considered today both but you can't

00:41:21,609 --> 00:41:26,500
do everything at once even though we're

00:41:23,170 --> 00:41:30,540
using C++ so we decided to do something

00:41:26,500 --> 00:41:33,970
that works everywhere it's not tied

00:41:30,540 --> 00:41:35,980
20-20 specific cloud or any specific

00:41:33,970 --> 00:41:39,450
facilities and for them a traditional

00:41:35,980 --> 00:41:44,920
file system is the it works everywhere

00:41:39,450 --> 00:41:54,790
and of course grocers that's an

00:41:44,920 --> 00:41:59,700
invitation anymore yes just a quick it's

00:41:54,790 --> 00:42:03,450
kind of deja vu for me this was his

00:41:59,700 --> 00:42:03,450
seasonal colors

00:42:08,380 --> 00:42:26,329
this actually acquired by a sudden it's

00:42:20,299 --> 00:42:37,880
already working I'm probably art so but

00:42:26,329 --> 00:42:40,369
the issue of efficiency language

00:42:37,880 --> 00:42:43,940
medicine people taking so much about the

00:42:40,369 --> 00:42:47,269
language as about how is optimizing

00:42:43,940 --> 00:42:51,019
always used and what will said help

00:42:47,269 --> 00:42:55,010
which is registries and actually how

00:42:51,019 --> 00:43:00,430
many of the sea world see that having

00:42:55,010 --> 00:43:06,579
text issues then the question becomes

00:43:00,430 --> 00:43:11,079
one further job and really good seats

00:43:06,579 --> 00:43:14,569
yeah well actually uh well first of all

00:43:11,079 --> 00:43:16,609
people we rarely do new things in there

00:43:14,569 --> 00:43:19,309
in the computer world we keep

00:43:16,609 --> 00:43:24,079
reinventing star fair when i presented

00:43:19,309 --> 00:43:26,960
kk m seven years ago it was another

00:43:24,079 --> 00:43:29,299
hundred water in the seals next 36

00:43:26,960 --> 00:43:31,309
hypervisors and what we were and it

00:43:29,299 --> 00:43:33,589
shows the first x86 type of mother it

00:43:31,309 --> 00:43:35,630
was it doesn't hypervisor which was

00:43:33,589 --> 00:43:40,519
already done many times before with IBM

00:43:35,630 --> 00:43:45,680
with a fact so we there's a little me

00:43:40,519 --> 00:43:49,460
whether it's um yeah i know it is

00:43:45,680 --> 00:43:51,980
committed group and then we got to the

00:43:49,460 --> 00:43:53,509
knowledge wall yes there is a i know

00:43:51,980 --> 00:43:55,549
there are some research operating

00:43:53,509 --> 00:43:59,539
systems that are within an even higher

00:43:55,549 --> 00:44:01,549
level languages like microsoft research

00:43:59,539 --> 00:44:05,599
is sealed rd which is a very interesting

00:44:01,549 --> 00:44:08,990
project and IBM also has i think it's

00:44:05,599 --> 00:44:12,529
called a giant stay here which is a JDM

00:44:08,990 --> 00:44:15,259
that is written in java so these are all

00:44:12,529 --> 00:44:17,140
possible but they're all research

00:44:15,259 --> 00:44:19,750
projects and

00:44:17,140 --> 00:44:22,210
we're not very severe automatically

00:44:19,750 --> 00:44:25,510
tonics to get employed in one field

00:44:22,210 --> 00:44:28,450
applications so exist it's very

00:44:25,510 --> 00:44:32,140
interesting languages are also something

00:44:28,450 --> 00:44:34,150
that I'm very interested in but for

00:44:32,140 --> 00:44:36,750
systems programming right now or I think

00:44:34,150 --> 00:44:39,640
there is an alternative to a ski or

00:44:36,750 --> 00:44:42,369
androids not written in Java converts we

00:44:39,640 --> 00:44:47,500
can see it's just students car only the

00:44:42,369 --> 00:44:50,829
SDK dramatist yes good stuff America

00:44:47,500 --> 00:44:53,200
never all the actual system functions

00:44:50,829 --> 00:44:57,549
from the upper and sister it's basically

00:44:53,200 --> 00:45:00,400
the limbs curve yeah that's that's

00:44:57,549 --> 00:45:03,400
department I assignment up in that sense

00:45:00,400 --> 00:45:05,109
of that's the actual art which writing

00:45:03,400 --> 00:45:07,420
things in higher-level languages is to

00:45:05,109 --> 00:45:09,819
the people to the actual communication

00:45:07,420 --> 00:45:17,740
with the hardware moving pointers rather

00:45:09,819 --> 00:45:20,799
I i can work where you do construction

00:45:17,740 --> 00:45:22,240
oh yeah another screw but what we know

00:45:20,799 --> 00:45:23,950
you know we were doing both because

00:45:22,240 --> 00:45:27,130
we're actually trying to aggressively

00:45:23,950 --> 00:45:29,140
change the JDM now and in the future to

00:45:27,130 --> 00:45:31,690
integrate more with with the harbor so

00:45:29,140 --> 00:45:34,509
there is a bunch of Java and of course

00:45:31,690 --> 00:45:36,130
our lives we enough weapon in javas we

00:45:34,509 --> 00:45:41,109
have some J&I and then we call the

00:45:36,130 --> 00:45:42,670
function in JavaScript yeah one question

00:45:41,109 --> 00:45:44,500
which I have is if it's such a great

00:45:42,670 --> 00:45:47,140
operating system why doesn't have that

00:45:44,500 --> 00:45:49,000
t-shirt and fiance is it does have

00:45:47,140 --> 00:45:53,440
issues that we did britain predicts that

00:45:49,000 --> 00:45:59,880
will be there tomorrow by okay there

00:45:53,440 --> 00:45:59,880
were more half as well

00:46:03,290 --> 00:46:07,470
so that's that's google and it will do

00:46:06,150 --> 00:46:09,840
that the question was why don't run

00:46:07,470 --> 00:46:12,360
multiple JK actions so you can do that

00:46:09,840 --> 00:46:14,250
but not know how cloud for or at least

00:46:12,360 --> 00:46:16,730
positive there are all sorts of things

00:46:14,250 --> 00:46:18,920
but the usual

00:46:16,730 --> 00:46:21,840
infrastructure-as-a-service glove is

00:46:18,920 --> 00:46:23,610
hypervisor base and also many pilots are

00:46:21,840 --> 00:46:26,790
moving to running everything on a

00:46:23,610 --> 00:46:29,300
hypervisor it's really so flexible and

00:46:26,790 --> 00:46:31,470
with the light vibration and

00:46:29,300 --> 00:46:33,780
consolidation and all of that it's so

00:46:31,470 --> 00:46:35,550
easy then you're going to have to

00:46:33,780 --> 00:46:40,080
hypervisor so we take the hypervisor

00:46:35,550 --> 00:46:41,730
that's a given and then we try to reduce

00:46:40,080 --> 00:46:43,920
the other layers the other approaches

00:46:41,730 --> 00:46:45,960
are also valid there is your approach of

00:46:43,920 --> 00:46:47,970
containers to take your voice you have

00:46:45,960 --> 00:46:51,320
been wiser and use the container for

00:46:47,970 --> 00:46:54,090
isolation there is our coaches of doing

00:46:51,320 --> 00:46:58,320
multi-tenancy in titanium itself run one

00:46:54,090 --> 00:47:02,790
pic JDM and have it isolate different

00:46:58,320 --> 00:47:05,160
complications everything goes and this

00:47:02,790 --> 00:47:07,290
is articulate who believe that it fits

00:47:05,160 --> 00:47:09,140
how the trend is going into interest

00:47:07,290 --> 00:47:12,780
rate of virtualizing everything and that

00:47:09,140 --> 00:47:15,210
the hypervisor is a new barber so that's

00:47:12,780 --> 00:47:17,790
where your mind I don't see we advocate

00:47:15,210 --> 00:47:19,500
for high profile of this will see that

00:47:17,790 --> 00:47:21,060
they have a conservation is already

00:47:19,500 --> 00:47:23,520
there's Rangers difficult there are

00:47:21,060 --> 00:47:25,530
other options that's the option people

00:47:23,520 --> 00:47:28,470
are usually select oh so there might be

00:47:25,530 --> 00:47:30,990
a reason why and once the hypervisor is

00:47:28,470 --> 00:47:37,190
there then I believe that being given

00:47:30,990 --> 00:47:40,740
our cook makes sense one question yes

00:47:37,190 --> 00:47:42,930
that's right how much of the area of

00:47:40,740 --> 00:47:49,470
your question from scratch but it really

00:47:42,930 --> 00:47:51,270
exists you license is awesome right okay

00:47:49,470 --> 00:47:54,320
good question what panini Reitsma

00:47:51,270 --> 00:47:56,940
scratch and what we did we import so

00:47:54,320 --> 00:47:59,880
basically in with the two things one

00:47:56,940 --> 00:48:03,480
time is it is the networking stack PCP

00:47:59,880 --> 00:48:04,730
and the other words that CFS oh actually

00:48:03,480 --> 00:48:08,130
more

00:48:04,730 --> 00:48:12,240
regulatory that we took all their str

00:48:08,130 --> 00:48:16,710
Stevie of that but the poor scheduling

00:48:12,240 --> 00:48:19,830
code every management boots draft the

00:48:16,710 --> 00:48:23,460
tracing trace point that all that is is

00:48:19,830 --> 00:48:25,440
for public at the people i will pour in

00:48:23,460 --> 00:48:34,230
10 drivers from VST as well as was

00:48:25,440 --> 00:48:42,600
afraid of fighting toasters is you see

00:48:34,230 --> 00:48:44,700
this face the heck is going to hold so

00:48:42,600 --> 00:48:47,220
the question is coming on to replace yet

00:48:44,700 --> 00:48:49,680
sold all their cut replacing headaches

00:48:47,220 --> 00:48:52,530
first we need minute down there on the

00:48:49,680 --> 00:48:55,590
host to run us but also there is a

00:48:52,530 --> 00:48:57,840
limited number of rock low-dose deep in

00:48:55,590 --> 00:49:01,200
racket it's very broad because there are

00:48:57,840 --> 00:49:03,450
so many rules last jzm and go to support

00:49:01,200 --> 00:49:05,760
is super close but in more complicated

00:49:03,450 --> 00:49:08,610
more plugs and the ones that don't use

00:49:05,760 --> 00:49:12,300
the JDM will continue to the sale in our

00:49:08,610 --> 00:49:15,060
staff as a desktop that the wittle six

00:49:12,300 --> 00:49:16,950
steals he lurks everywhere and you know

00:49:15,060 --> 00:49:26,250
it's a great awesome we love it but with

00:49:16,950 --> 00:49:29,970
it there's room for four more yes thank

00:49:26,250 --> 00:49:34,830
you if you go i'll try to run DNA tests

00:49:29,970 --> 00:49:40,610
in your instruments right uh not only

00:49:34,830 --> 00:49:58,230
accessing plans learn from us see the

00:49:40,610 --> 00:50:02,010
station okay the comment was that if

00:49:58,230 --> 00:50:04,470
you're using CSS in the guest then we

00:50:02,010 --> 00:50:06,810
are hopeful heading there is the link

00:50:04,470 --> 00:50:10,860
blocks that underneath and it's correct

00:50:06,810 --> 00:50:13,590
and include exposed it fastest them from

00:50:10,860 --> 00:50:14,870
the host of the guests but that's really

00:50:13,590 --> 00:50:18,360
hard to do with

00:50:14,870 --> 00:50:20,310
how inter-country plugging don't usually

00:50:18,360 --> 00:50:23,100
have that you have just a flock advice

00:50:20,310 --> 00:50:25,890
and they need in that part of the staff

00:50:23,100 --> 00:50:29,190
we are not reducing the beneficent Allah

00:50:25,890 --> 00:50:30,570
and because the FS is just a powerful

00:50:29,190 --> 00:50:33,120
and heavyweight causes them you're

00:50:30,570 --> 00:50:35,010
actually increasing it a little bit

00:50:33,120 --> 00:50:36,720
equal see if it does a lot of extra

00:50:35,010 --> 00:50:38,970
checking that you might think is a

00:50:36,720 --> 00:50:42,000
necessary in a cloud if you trust

00:50:38,970 --> 00:50:48,090
account provider to have a perfect there

00:50:42,000 --> 00:50:50,580
is that so yes it's not sort of a

00:50:48,090 --> 00:50:54,840
nutshell you're not solving everything

00:50:50,580 --> 00:50:56,490
we've started with TFS because for the

00:50:54,840 --> 00:50:58,110
most general info bility be can only

00:50:56,490 --> 00:51:00,810
assume that there is the lockbox the

00:50:58,110 --> 00:51:03,860
Catholic skill that you have a sort of a

00:51:00,810 --> 00:51:06,750
fluid file system from the host vigus

00:51:03,860 --> 00:51:08,700
there are trust issues as well just

00:51:06,750 --> 00:51:12,090
exposing the horse power system that

00:51:08,700 --> 00:51:14,370
could be obtained if you look at amazon

00:51:12,090 --> 00:51:15,960
for example the way manager images on

00:51:14,370 --> 00:51:18,780
amazon which is one of our main target

00:51:15,960 --> 00:51:21,330
is being the biggest public cloud up

00:51:18,780 --> 00:51:24,330
there i'm going to give you that way to

00:51:21,330 --> 00:51:26,460
heaven you have one block west whatever

00:51:24,330 --> 00:51:29,580
everything all your step foot in there

00:51:26,460 --> 00:51:33,660
the original by the way was the is an FB

00:51:29,580 --> 00:51:35,760
as the path wisdom no but dad has

00:51:33,660 --> 00:51:38,580
limited applicability and also it's not

00:51:35,760 --> 00:51:40,350
that performance so we decided to go

00:51:38,580 --> 00:51:49,610
with it traditional solution first and

00:51:40,350 --> 00:51:49,610
they are making a trap yes your honor

00:51:52,310 --> 00:51:57,300
okay I've just learned okay I wasn't

00:51:56,010 --> 00:52:06,450
expecting anything different from you

00:51:57,300 --> 00:52:11,010
anyway I love your uncle what's a few

00:52:06,450 --> 00:52:12,369
questions all right okay thank you

00:52:11,010 --> 00:52:14,430
everyone

00:52:12,369 --> 00:52:14,430

YouTube URL: https://www.youtube.com/watch?v=-_hYnJEp1ZE


