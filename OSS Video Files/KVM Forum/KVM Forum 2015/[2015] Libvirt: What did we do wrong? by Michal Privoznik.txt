Title: [2015] Libvirt: What did we do wrong? by Michal Privoznik
Publication date: 2015-09-08
Playlist: KVM Forum 2015
Description: 
	Libvirt is a mature project which started back in 2005. However, because it was only a Xen wrapper initially, many APIs were too tied to the Xen world. But that was not the only problem, we have made some major errors even fairly recently. And it's not bugs what I have in ming here. It's API design issues, broken XML schema and others. What was the source of that problems and more interestingly, how can we avoid (most of) them repeating in the future? Lets not repeat those mistakes in other projects too.

Michal Privoznik
Software Engineer, Red Hat
I'm a senior software enginneer at Red Hat, joined 2011 and working on virtualization (mostly libvirt).

Slides: https://drive.google.com/open?id=0BzyAwvVlQckeQW03MjJORVlkY3c
Captions: 
	00:00:14,389 --> 00:00:19,949
hi guys my name is Macario sneak I work

00:00:17,850 --> 00:00:23,189
for redhead I'm a senior software

00:00:19,949 --> 00:00:26,760
engineer there I'm on reddit board for

00:00:23,189 --> 00:00:29,550
nearly five years now and for all the

00:00:26,760 --> 00:00:34,079
time I've been working on the bird and I

00:00:29,550 --> 00:00:36,450
feel slightly bad about my topic for the

00:00:34,079 --> 00:00:40,110
tote after all the nice thing that easy

00:00:36,450 --> 00:00:42,239
told about me but today I will tell you

00:00:40,110 --> 00:00:45,870
something about what we did wrong in the

00:00:42,239 --> 00:00:49,260
world but more importantly I will

00:00:45,870 --> 00:00:52,350
analyze why we did that and hopefully i

00:00:49,260 --> 00:00:54,539
will give you some advices so we don't

00:00:52,350 --> 00:00:58,949
have to necessarily repeat those

00:00:54,539 --> 00:01:01,170
mistakes in your projects so before we

00:00:58,949 --> 00:01:04,229
start just to make sure that we are more

00:01:01,170 --> 00:01:06,479
or less on the same level here was lib

00:01:04,229 --> 00:01:09,810
weird liberty is a standard c library

00:01:06,479 --> 00:01:12,390
for managing virtual machines so even

00:01:09,810 --> 00:01:15,960
though we are written in c we do have

00:01:12,390 --> 00:01:20,250
bindings too many languages out there

00:01:15,960 --> 00:01:23,939
like Perl Python Java Ruby whatever you

00:01:20,250 --> 00:01:26,850
name it we do provide a stable API which

00:01:23,939 --> 00:01:29,640
means whenever an API was released we

00:01:26,850 --> 00:01:32,460
keep it around for the rest of liberals

00:01:29,640 --> 00:01:34,650
lifetime and buy API I do not

00:01:32,460 --> 00:01:37,290
necessarily mean just and you know see

00:01:34,650 --> 00:01:38,939
functions but every other way the

00:01:37,290 --> 00:01:41,549
liberal communicates with the outside

00:01:38,939 --> 00:01:46,409
world you've probably noticed that we

00:01:41,549 --> 00:01:49,799
communicate in XML or via XML we do

00:01:46,409 --> 00:01:53,100
provide multiple hypervisors is usually

00:01:49,799 --> 00:01:56,810
pointed out p mu is our most intense

00:01:53,100 --> 00:02:03,799
developed driver but we do provide other

00:01:56,810 --> 00:02:07,069
hypervisors like like Zen VirtualBox ESX

00:02:03,799 --> 00:02:09,780
UML user mode Linux believe it or not

00:02:07,069 --> 00:02:15,000
lose containers of course and

00:02:09,780 --> 00:02:17,730
and others when it comes to launching

00:02:15,000 --> 00:02:20,850
your virtual machines and playing around

00:02:17,730 --> 00:02:23,819
with them you need to or you may want to

00:02:20,850 --> 00:02:27,390
prepare the host environment for that

00:02:23,819 --> 00:02:29,910
you know recreate some some mutual

00:02:27,390 --> 00:02:33,720
interfaces or something like that so

00:02:29,910 --> 00:02:36,030
that's other side of lib weird we have a

00:02:33,720 --> 00:02:39,959
very strong host management system as

00:02:36,030 --> 00:02:42,600
well because you know we need to just do

00:02:39,959 --> 00:02:45,690
very quick introduction into into libya

00:02:42,600 --> 00:02:48,570
internals this picture will show you

00:02:45,690 --> 00:02:52,140
what what is basically done under hood

00:02:48,570 --> 00:02:54,780
when an API is called so we have an

00:02:52,140 --> 00:03:00,120
application here which suddenly called

00:02:54,780 --> 00:03:06,180
an illiberal API as you will see later

00:03:00,120 --> 00:03:08,400
every API has an argument well either

00:03:06,180 --> 00:03:12,600
directly it will it will get an

00:03:08,400 --> 00:03:14,970
connection object or indirectly and it

00:03:12,600 --> 00:03:17,100
will get another object where the key

00:03:14,970 --> 00:03:20,280
Emmy where the connection object is

00:03:17,100 --> 00:03:25,230
hidden in directly from the connection

00:03:20,280 --> 00:03:28,500
object we will see the URI to wear yup

00:03:25,230 --> 00:03:31,019
you are connected to in this particular

00:03:28,500 --> 00:03:33,630
case we see that you are connected to a

00:03:31,019 --> 00:03:37,560
Linux container running on a distant

00:03:33,630 --> 00:03:40,590
host which means the D request is

00:03:37,560 --> 00:03:43,590
handled by our remote driver which does

00:03:40,590 --> 00:03:46,290
nothing more than just pack all the

00:03:43,590 --> 00:03:49,859
arguments into a single packet and send

00:03:46,290 --> 00:03:53,310
them over network to the distant demon

00:03:49,859 --> 00:03:57,570
running on a distant host here the demon

00:03:53,310 --> 00:04:00,900
will unpack the incoming packet and hand

00:03:57,570 --> 00:04:04,400
it over to the actual driver where all

00:04:00,900 --> 00:04:07,980
the interesting work takes place once

00:04:04,400 --> 00:04:12,120
the driver is done with the with the

00:04:07,980 --> 00:04:15,049
request the flow is basically reversed

00:04:12,120 --> 00:04:20,280
and the remote driver on the client side

00:04:15,049 --> 00:04:22,440
will receive the reply it will pair the

00:04:20,280 --> 00:04:23,200
incoming reply with the request sent

00:04:22,440 --> 00:04:25,030
earlier

00:04:23,200 --> 00:04:28,240
because you know it all read it already

00:04:25,030 --> 00:04:34,150
may have sent another request to say

00:04:28,240 --> 00:04:36,850
this different demon and it will yet

00:04:34,150 --> 00:04:41,680
again unpack the packet this here lies

00:04:36,850 --> 00:04:45,240
the reply and for some reason my

00:04:41,680 --> 00:04:51,030
notebook oh no right and it will end

00:04:45,240 --> 00:04:54,970
over the control to the application so

00:04:51,030 --> 00:04:59,080
let's get let's get started imagine you

00:04:54,970 --> 00:05:01,300
have a domain running and you want to

00:04:59,080 --> 00:05:03,370
shut it down so what are your options

00:05:01,300 --> 00:05:08,440
what will you what will you do any

00:05:03,370 --> 00:05:12,370
suggestions do I hear we're shut down

00:05:08,440 --> 00:05:14,890
somewhere no yeah so this is this is

00:05:12,370 --> 00:05:16,600
basically one of the option you may call

00:05:14,890 --> 00:05:19,720
we're shut down which will basically

00:05:16,600 --> 00:05:22,780
boil down to calling we're domain shut

00:05:19,720 --> 00:05:26,560
down you give it a domain pointer to

00:05:22,780 --> 00:05:30,570
work with and liquid will somehow

00:05:26,560 --> 00:05:33,370
magically shut down the main foyer but

00:05:30,570 --> 00:05:35,710
hold on a second there are multiple ways

00:05:33,370 --> 00:05:38,860
how you can shut down on domain are they

00:05:35,710 --> 00:05:41,350
for instance you can you can press or in

00:05:38,860 --> 00:05:43,810
the real world you can press the power

00:05:41,350 --> 00:05:47,260
button on the case which will initiate

00:05:43,810 --> 00:05:49,810
you know and a CPI event to reach a CP

00:05:47,260 --> 00:05:53,470
demon will hopefully respond somehow or

00:05:49,810 --> 00:05:55,530
you can have a small program running

00:05:53,470 --> 00:05:59,830
within your system which will initiate

00:05:55,530 --> 00:06:03,300
the shutdown for yeah but there's no way

00:05:59,830 --> 00:06:07,120
how you can choose these two approaches

00:06:03,300 --> 00:06:10,830
with the current API so we had to create

00:06:07,120 --> 00:06:14,590
a new API we're dementia down with flex

00:06:10,830 --> 00:06:17,140
which gained the Flex argument where you

00:06:14,590 --> 00:06:19,120
can select all the approaches the

00:06:17,140 --> 00:06:22,630
liberal should undergo when trying to

00:06:19,120 --> 00:06:27,040
shut down a domain this actually was

00:06:22,630 --> 00:06:30,460
important example because after after

00:06:27,040 --> 00:06:34,420
this we've made an internal rule so to

00:06:30,460 --> 00:06:36,270
say that every new API must have the

00:06:34,420 --> 00:06:39,000
flex argument so it's

00:06:36,270 --> 00:06:43,980
somewhat some some in some sense

00:06:39,000 --> 00:06:45,810
extensible for the future you could say

00:06:43,980 --> 00:06:49,070
this is Justin you know an isolated

00:06:45,810 --> 00:06:51,570
example that I've intentionally pick up

00:06:49,070 --> 00:06:55,170
but it's not the case as you will see on

00:06:51,570 --> 00:06:58,710
the next slide so yet again imagine you

00:06:55,170 --> 00:07:01,920
have a domain running but for some

00:06:58,710 --> 00:07:05,910
reason it starts misbehaving it's in the

00:07:01,920 --> 00:07:09,060
wrong state for some reason luckily you

00:07:05,910 --> 00:07:13,230
are hypervisor developer and you know

00:07:09,060 --> 00:07:17,370
something about it so we want to you

00:07:13,230 --> 00:07:22,020
know get get under under hood you may

00:07:17,370 --> 00:07:24,690
want to get a core dump luckily liberal

00:07:22,020 --> 00:07:28,440
has an API for that you can you give it

00:07:24,690 --> 00:07:31,230
a domain to work with you tell where the

00:07:28,440 --> 00:07:33,480
core dump should be saved and you give

00:07:31,230 --> 00:07:35,910
it some flex so which basically tells

00:07:33,480 --> 00:07:39,840
you know what to do with the domain once

00:07:35,910 --> 00:07:42,060
the core dump has been has been done for

00:07:39,840 --> 00:07:45,150
instance whether domain should be kept

00:07:42,060 --> 00:07:47,520
running or whether it should crash or

00:07:45,150 --> 00:07:49,710
you know since you are going to write a

00:07:47,520 --> 00:07:52,370
lot chunks of data you may want to

00:07:49,710 --> 00:07:57,690
bypass the file system cache and

00:07:52,370 --> 00:08:03,060
something like so and collided but hold

00:07:57,690 --> 00:08:06,540
on many hypervisors have ability to

00:08:03,060 --> 00:08:08,790
choose many formats of the core dumps

00:08:06,540 --> 00:08:10,530
and yet again that's something you

00:08:08,790 --> 00:08:13,890
cannot really do with the current API

00:08:10,530 --> 00:08:18,770
there is no argument to do that for

00:08:13,890 --> 00:08:24,240
instance p.m. you can take and build

00:08:18,770 --> 00:08:27,750
them can take columns in say roll files

00:08:24,240 --> 00:08:30,510
or apply multiple compressions to it so

00:08:27,750 --> 00:08:33,240
we had to invent a new API weirdo man

00:08:30,510 --> 00:08:37,860
khodam with format which gained a new

00:08:33,240 --> 00:08:41,310
argument sorry this one where you can

00:08:37,860 --> 00:08:43,860
choose the corresponding argument what's

00:08:41,310 --> 00:08:46,779
even worse not only we've missed the

00:08:43,860 --> 00:08:51,730
boat on the on the format

00:08:46,779 --> 00:08:55,720
we've missed also both what does 2

00:08:51,730 --> 00:08:58,420
refers to you know where the cord am

00:08:55,720 --> 00:09:02,170
should be safe does it refer to the

00:08:58,420 --> 00:09:05,139
clients are or or server side should the

00:09:02,170 --> 00:09:12,910
path be absolute or relative if relative

00:09:05,139 --> 00:09:17,860
then relative to what so let's that's

00:09:12,910 --> 00:09:21,029
one set of mistakes with it the the

00:09:17,860 --> 00:09:26,110
second set of mistakes that we did and

00:09:21,029 --> 00:09:28,870
let me just well short crash cars into

00:09:26,110 --> 00:09:33,689
labor history libby earth started

00:09:28,870 --> 00:09:38,019
initially is nothing but a Zen wrapper

00:09:33,689 --> 00:09:44,259
which read some subset of that Zen api's

00:09:38,019 --> 00:09:47,769
into into sea world and late later you

00:09:44,259 --> 00:09:49,720
know as many hypervisors were developed

00:09:47,769 --> 00:09:55,149
liberal gain support for them as well

00:09:49,720 --> 00:09:59,430
for instance when ki m you showed up we

00:09:55,149 --> 00:10:02,559
rightly be written and driver for that

00:09:59,430 --> 00:10:05,170
then Alex C came around and yet again

00:10:02,559 --> 00:10:07,959
we've gained support for it but this

00:10:05,170 --> 00:10:13,720
development has left some marks on our

00:10:07,959 --> 00:10:17,110
API stew so for instance we're doing

00:10:13,720 --> 00:10:21,910
create this is this is dated back to Zen

00:10:17,110 --> 00:10:24,250
only days and actually the this is the

00:10:21,910 --> 00:10:27,430
reason why we refer to virtual machines

00:10:24,250 --> 00:10:32,319
as domains because you know in Zen world

00:10:27,430 --> 00:10:34,540
you have domains not virtual machines so

00:10:32,319 --> 00:10:37,089
yet again you have rhythm and create

00:10:34,540 --> 00:10:40,509
because in Zen you couldn't you just

00:10:37,089 --> 00:10:43,089
launched the case and that's it but

00:10:40,509 --> 00:10:47,829
later qme came around and you were

00:10:43,089 --> 00:10:52,360
suddenly able to launch a guest into a

00:10:47,829 --> 00:10:53,980
posts a steak for instance ID yet again

00:10:52,360 --> 00:10:56,620
there's no way how to do it with the

00:10:53,980 --> 00:11:00,310
current API is there so we invented new

00:10:56,620 --> 00:11:02,830
one we're going to create with flex

00:11:00,310 --> 00:11:04,660
in flex you can send multiple things to

00:11:02,830 --> 00:11:09,910
do with the main ones it's once it's

00:11:04,660 --> 00:11:13,120
launched launched then later after some

00:11:09,910 --> 00:11:15,010
some time Alex II came around and these

00:11:13,120 --> 00:11:18,310
news containers have really nice feature

00:11:15,010 --> 00:11:23,650
that you can pass file descriptors into

00:11:18,310 --> 00:11:26,380
it well while is it starting up so yet

00:11:23,650 --> 00:11:30,100
again a new API will demand create with

00:11:26,380 --> 00:11:31,870
files where you can pass both of file

00:11:30,100 --> 00:11:36,450
descriptors an array of file descriptors

00:11:31,870 --> 00:11:41,200
and you have a flex fortunately this API

00:11:36,450 --> 00:11:43,660
is future proof enough so we don't have

00:11:41,200 --> 00:11:47,310
to invent a new one in foreseeable

00:11:43,660 --> 00:11:52,870
future I'm holding my finger crossed oh

00:11:47,310 --> 00:11:55,300
yeah this is another example and

00:11:52,870 --> 00:11:59,500
actually it's very important example

00:11:55,300 --> 00:12:01,779
that have made us change our minds so

00:11:59,500 --> 00:12:07,720
let me just quickly explain what's going

00:12:01,779 --> 00:12:11,610
on we try to we ask me where to get us

00:12:07,720 --> 00:12:16,180
the number of currently running domains

00:12:11,610 --> 00:12:19,900
then we try to allocate an array to hold

00:12:16,180 --> 00:12:23,950
the IDS of the domains and then we ask

00:12:19,900 --> 00:12:28,330
libby r to fill in the array with the

00:12:23,950 --> 00:12:31,540
IDS of the domains after that we iterate

00:12:28,330 --> 00:12:34,360
over the array and looking up the domain

00:12:31,540 --> 00:12:37,180
and hopefully do something useful with

00:12:34,360 --> 00:12:38,890
the video running domains I don't know

00:12:37,180 --> 00:12:45,190
for instance gather some statistics or

00:12:38,890 --> 00:12:47,350
whatever one question what's wrong here

00:12:45,190 --> 00:12:49,209
beside the fact that I'm not checking

00:12:47,350 --> 00:12:53,230
obviously for errors because you know

00:12:49,209 --> 00:12:57,000
it's an example after all would it help

00:12:53,230 --> 00:13:01,180
you if I tell you there are two races

00:12:57,000 --> 00:13:02,589
now so the first race is here in the

00:13:01,180 --> 00:13:06,250
first block and the second one is this

00:13:02,589 --> 00:13:09,550
is in the second so where's race by the

00:13:06,250 --> 00:13:12,370
time I'm allocating an array to hold the

00:13:09,550 --> 00:13:13,410
IDS another domain just could have been

00:13:12,370 --> 00:13:16,620
started

00:13:13,410 --> 00:13:19,769
which means at the third line I will not

00:13:16,620 --> 00:13:25,350
get the food full list of running

00:13:19,769 --> 00:13:28,620
domains and the second race is here

00:13:25,350 --> 00:13:30,540
because by the time I'm iterating over

00:13:28,620 --> 00:13:34,319
the array and by the time I will get to

00:13:30,540 --> 00:13:40,290
the last element in the array the domain

00:13:34,319 --> 00:13:44,430
may have been already gone and this is

00:13:40,290 --> 00:13:48,329
something that you cannot really well

00:13:44,430 --> 00:13:51,180
client cannot really you know avoid

00:13:48,329 --> 00:13:58,290
doing because there's no way for a

00:13:51,180 --> 00:14:01,170
client to do this atomically so we have

00:13:58,290 --> 00:14:04,050
changed our minds in that sense that

00:14:01,170 --> 00:14:07,339
we've invented a new API that will

00:14:04,050 --> 00:14:12,240
allocate an array for you and this is

00:14:07,339 --> 00:14:15,089
well leaf we tried to resist that but

00:14:12,240 --> 00:14:18,060
this example has made change our minds

00:14:15,089 --> 00:14:20,730
made us change our minds about that so

00:14:18,060 --> 00:14:27,089
we have a new API which will do all of

00:14:20,730 --> 00:14:30,810
these atomically for you oh yeah this is

00:14:27,089 --> 00:14:34,639
actually my personal favorite I believe

00:14:30,810 --> 00:14:38,720
many of you here know some see at least

00:14:34,639 --> 00:14:43,790
to some extent so what does what is

00:14:38,720 --> 00:14:46,199
calling free over a null pointer in C do

00:14:43,790 --> 00:14:50,550
nothing it's perfectly valid you can do

00:14:46,199 --> 00:14:54,750
that but it's not the case in libert you

00:14:50,550 --> 00:14:57,769
have we're domain free which for some

00:14:54,750 --> 00:15:03,149
reason well historical reasons will

00:14:57,769 --> 00:15:05,370
cause an error when cold over now and to

00:15:03,149 --> 00:15:08,699
make things worse we are not even

00:15:05,370 --> 00:15:12,000
consistent with our free api's because

00:15:08,699 --> 00:15:14,639
another public a public free API we have

00:15:12,000 --> 00:15:18,509
we're gonna interface free is perfectly

00:15:14,639 --> 00:15:21,269
okay when called over now there has been

00:15:18,509 --> 00:15:23,130
a plenty of discussion on unleased

00:15:21,269 --> 00:15:26,910
whether we should change it finally or

00:15:23,130 --> 00:15:28,470
not but I think that we cannot really

00:15:26,910 --> 00:15:34,020
changed it because somebody may have

00:15:28,470 --> 00:15:42,660
been relying on this illness behavior

00:15:34,020 --> 00:15:48,030
well we will see maybe oh yeah been

00:15:42,660 --> 00:15:50,340
aiming as Eric already pointed out what

00:15:48,030 --> 00:15:53,910
would you think that destroying a domain

00:15:50,340 --> 00:15:56,150
will do the name suggests that you know

00:15:53,910 --> 00:16:00,120
it will completely destroy the domain

00:15:56,150 --> 00:16:01,380
without leaving any traces of it but

00:16:00,120 --> 00:16:05,340
nothing can be further away from the

00:16:01,380 --> 00:16:07,980
truth because if your domain is

00:16:05,340 --> 00:16:11,490
persistent it's merrily like plugging

00:16:07,980 --> 00:16:13,830
the power cord of the domain between

00:16:11,490 --> 00:16:20,690
shutting it down not gracefully but

00:16:13,830 --> 00:16:26,040
shutting it down yeah in another example

00:16:20,690 --> 00:16:31,170
from just from the recent future which

00:16:26,040 --> 00:16:35,310
brings us to exam else in the main.xml

00:16:31,170 --> 00:16:38,250
you can have the controller and you can

00:16:35,310 --> 00:16:40,530
choose the type of it for instance

00:16:38,250 --> 00:16:43,770
whether it should be you know SATA

00:16:40,530 --> 00:16:48,990
controller USB pci controller and such

00:16:43,770 --> 00:16:52,260
and such things then for PCI controllers

00:16:48,990 --> 00:16:55,080
you can choose well not model but this

00:16:52,260 --> 00:16:58,770
is something that was mistakenly named

00:16:55,080 --> 00:17:01,530
as model because you know the pci

00:16:58,770 --> 00:17:04,980
express root board is not really a model

00:17:01,530 --> 00:17:08,310
of a controller is it therefore we had

00:17:04,980 --> 00:17:12,870
to invent a new sub element just to

00:17:08,310 --> 00:17:15,150
refer to actual actual model which

00:17:12,870 --> 00:17:17,460
brings us to domain exam else this is

00:17:15,150 --> 00:17:20,880
just really a placeholder because I

00:17:17,460 --> 00:17:25,980
could talk for really long time about

00:17:20,880 --> 00:17:29,040
our mistakes in in domain exam l's or in

00:17:25,980 --> 00:17:33,650
other exam else for I know network or or

00:17:29,040 --> 00:17:37,920
something like that just a

00:17:33,650 --> 00:17:40,830
personal note I've I've tried to set up

00:17:37,920 --> 00:17:44,340
a new my guests recently few days ago

00:17:40,830 --> 00:17:47,280
and I had to edit domain exam l three

00:17:44,340 --> 00:17:51,000
different places which is not very

00:17:47,280 --> 00:17:54,960
pleasant thing to do but I guess if

00:17:51,000 --> 00:17:57,900
you've seen our domain exam L at least

00:17:54,960 --> 00:18:04,140
once you certainly know what I'm trying

00:17:57,900 --> 00:18:06,720
to tell you here and I I believe my

00:18:04,140 --> 00:18:10,020
colleagues will really agree with me on

00:18:06,720 --> 00:18:11,430
this slide that this is well you know

00:18:10,020 --> 00:18:14,130
whenever you are trying to introduce a

00:18:11,430 --> 00:18:16,050
new feature to Lee beard and sometimes

00:18:14,130 --> 00:18:24,030
required to provide a significant

00:18:16,050 --> 00:18:26,370
portion of the code but enough of the OD

00:18:24,030 --> 00:18:30,180
bad stuff let's talk about something

00:18:26,370 --> 00:18:34,200
bright so what we did what do we do

00:18:30,180 --> 00:18:37,590
right firstly there are plenty of things

00:18:34,200 --> 00:18:42,270
to talk about to but i will just

00:18:37,590 --> 00:18:45,710
pinpoint a few i think one of the best

00:18:42,270 --> 00:18:48,780
thing that we done is that we keep our

00:18:45,710 --> 00:18:56,910
internal well the majority of our

00:18:48,780 --> 00:18:59,850
internal is api is internal when when

00:18:56,910 --> 00:19:03,590
liber tries tries to start a domain or

00:18:59,850 --> 00:19:07,590
you know during its lifetime it has to

00:19:03,590 --> 00:19:11,070
spawn multiple system commands for

00:19:07,590 --> 00:19:13,560
instance just only when setting the

00:19:11,070 --> 00:19:15,720
bandwidth limiting control over visual

00:19:13,560 --> 00:19:18,390
interfaces this is done why are

00:19:15,720 --> 00:19:20,040
constructing the DC command line and

00:19:18,390 --> 00:19:22,470
spawning it and either granular again

00:19:20,040 --> 00:19:26,850
just to construct some you know bend

00:19:22,470 --> 00:19:29,280
with limiting three but four for

00:19:26,850 --> 00:19:32,340
spawning the comments we have grown very

00:19:29,280 --> 00:19:36,300
really powerful subsystem to which we

00:19:32,340 --> 00:19:40,170
refer to as we're command and there has

00:19:36,300 --> 00:19:44,160
been plenty of requests other oil no I

00:19:40,170 --> 00:19:45,840
RC or or the list that we should make

00:19:44,160 --> 00:19:50,789
the rear comment

00:19:45,840 --> 00:19:52,260
for others to use as well personally I

00:19:50,789 --> 00:19:54,090
don't think this this is something that

00:19:52,260 --> 00:19:57,870
we want to do because once we do that

00:19:54,090 --> 00:19:59,789
leave your comment is AP eyes are just

00:19:57,870 --> 00:20:06,120
written in stone and we cannot change

00:19:59,789 --> 00:20:08,070
them but the fact that others are

00:20:06,120 --> 00:20:13,200
requesting for it means that we have

00:20:08,070 --> 00:20:16,500
done a really good job there yeah the

00:20:13,200 --> 00:20:19,860
second interesting point is internal

00:20:16,500 --> 00:20:23,240
objects if you recall all these api's

00:20:19,860 --> 00:20:26,309
I've shown you they don't really take

00:20:23,240 --> 00:20:29,570
object itself they take Justin are

00:20:26,309 --> 00:20:34,200
Justin pointer to the object which means

00:20:29,570 --> 00:20:36,480
the internal object the internals of the

00:20:34,200 --> 00:20:40,529
object are kept private and we can

00:20:36,480 --> 00:20:43,799
change them whenever we want to and we

00:20:40,529 --> 00:20:46,020
really did that for instance the vir

00:20:43,799 --> 00:20:48,840
connect object has been adjusted more

00:20:46,020 --> 00:20:56,010
than 20 times well after 20 times i

00:20:48,840 --> 00:21:00,330
stopped counting so some really yep so

00:20:56,010 --> 00:21:03,090
let's analyze what was the source of the

00:21:00,330 --> 00:21:08,490
mistakes well firstly as I've only

00:21:03,090 --> 00:21:13,500
unlined the historical reasons you know

00:21:08,490 --> 00:21:16,260
the the sale of the of the hypervisors

00:21:13,500 --> 00:21:20,450
that we wanted to support his change

00:21:16,260 --> 00:21:25,140
during the time moreover solely the

00:21:20,450 --> 00:21:27,029
requirements which means it's really

00:21:25,140 --> 00:21:28,559
hard to you know whenever you are

00:21:27,029 --> 00:21:31,679
introducing a new API it's hard to

00:21:28,559 --> 00:21:34,799
follow or to you know follow any

00:21:31,679 --> 00:21:41,360
software engineering methodology to do

00:21:34,799 --> 00:21:48,270
with the proper analysis and design and

00:21:41,360 --> 00:21:50,760
of course we struggle with some well we

00:21:48,270 --> 00:21:53,429
we don't have a many developers on some

00:21:50,760 --> 00:21:56,610
drivers some drivers are really just one

00:21:53,429 --> 00:21:58,919
man show for instance and and well and

00:21:56,610 --> 00:22:02,070
some hasn't been touched in

00:21:58,919 --> 00:22:06,259
really long time for instance virtual

00:22:02,070 --> 00:22:12,080
box that has been touched for years or

00:22:06,259 --> 00:22:15,480
the usermod' Linux which means since

00:22:12,080 --> 00:22:18,840
majority of us work on emu driver then

00:22:15,480 --> 00:22:24,389
whenever whenever you propose a patch or

00:22:18,840 --> 00:22:26,220
an API that fits into a key mu world you

00:22:24,389 --> 00:22:29,309
can be fairly certain that it will get

00:22:26,220 --> 00:22:35,369
in although it may not as well fit in to

00:22:29,309 --> 00:22:38,789
say I don't know virtualbox world or

00:22:35,369 --> 00:22:44,460
something but the problem is there's

00:22:38,789 --> 00:22:46,549
nobody to tell you that and then I have

00:22:44,460 --> 00:22:50,419
really I he really have to mention that

00:22:46,549 --> 00:22:56,159
the pressure of downstream really sees

00:22:50,419 --> 00:22:59,249
well we we have we have some situations

00:22:56,159 --> 00:23:02,970
where when we've pushed an API without

00:22:59,249 --> 00:23:06,389
an implementation and it in just only

00:23:02,970 --> 00:23:09,359
during implementation it acute that the

00:23:06,389 --> 00:23:13,999
api's were not as well designed as they

00:23:09,359 --> 00:23:19,489
could be and we had to work around that

00:23:13,999 --> 00:23:24,359
so but now more generally not just into

00:23:19,489 --> 00:23:25,619
into liber itself with traditional well

00:23:24,359 --> 00:23:29,059
you know what what's the difference

00:23:25,619 --> 00:23:31,769
between traditional open source with

00:23:29,059 --> 00:23:34,080
open source it's really hard to follow

00:23:31,769 --> 00:23:37,109
Adam traditional software engineer

00:23:34,080 --> 00:23:39,419
methodologies for instance in

00:23:37,109 --> 00:23:42,259
traditional software you can you can

00:23:39,419 --> 00:23:45,720
follow a waterfall model or something

00:23:42,259 --> 00:23:48,720
similar it's not the case in open source

00:23:45,720 --> 00:23:52,080
because for instance in water for model

00:23:48,720 --> 00:23:55,440
the testing is done only when

00:23:52,080 --> 00:23:57,690
development has finished or the

00:23:55,440 --> 00:24:01,080
development starts only after design

00:23:57,690 --> 00:24:06,289
phase have finished in open source it's

00:24:01,080 --> 00:24:09,840
it's done all at the same time and

00:24:06,289 --> 00:24:12,290
moreover open source software is able to

00:24:09,840 --> 00:24:14,700
go back and forth in these it is model

00:24:12,290 --> 00:24:17,429
because for instance if it turns out

00:24:14,700 --> 00:24:22,320
during testing phase that something

00:24:17,429 --> 00:24:26,820
something is broken or some API is not

00:24:22,320 --> 00:24:29,970
good designed you can go back into into

00:24:26,820 --> 00:24:36,240
you know design phase or into analyzes

00:24:29,970 --> 00:24:39,110
face and redo things so okay maybe some

00:24:36,240 --> 00:24:41,880
enjoy methodologies you know after all

00:24:39,110 --> 00:24:44,340
open source software and dermatologists

00:24:41,880 --> 00:24:47,540
share many similarities for instance

00:24:44,340 --> 00:24:50,480
like they both have incremental cycle

00:24:47,540 --> 00:24:53,070
they are both cooperative you know

00:24:50,480 --> 00:24:56,580
customers and developers work closely

00:24:53,070 --> 00:25:01,980
together and they are both adaptive to

00:24:56,580 --> 00:25:05,220
last moment changes but not only not all

00:25:01,980 --> 00:25:09,240
of these can be applied because you know

00:25:05,220 --> 00:25:13,290
the open source after all is based on a

00:25:09,240 --> 00:25:16,740
network of welder developers are just

00:25:13,290 --> 00:25:19,230
you know volunteers they are scattered

00:25:16,740 --> 00:25:21,540
all over their arm the globe so we

00:25:19,230 --> 00:25:24,270
cannot really follow all Ajay

00:25:21,540 --> 00:25:26,520
methodologies but there there are some

00:25:24,270 --> 00:25:29,940
or there are some points that you can

00:25:26,520 --> 00:25:34,190
pick from some methodologies for

00:25:29,940 --> 00:25:38,940
instance I've seen this really cool

00:25:34,190 --> 00:25:41,550
lecture about extreme programming and we

00:25:38,940 --> 00:25:43,980
do follow and I just realized we do

00:25:41,550 --> 00:25:48,170
follow some of them and since we've

00:25:43,980 --> 00:25:51,840
started to follow some some points I

00:25:48,170 --> 00:25:54,240
think we are doing much much better for

00:25:51,840 --> 00:25:56,309
instance we tried to refactor the code

00:25:54,240 --> 00:26:00,480
whenever we can whenever you have a

00:25:56,309 --> 00:26:02,850
spare time I cannot really stress how

00:26:00,480 --> 00:26:05,850
important the refactoring thing is

00:26:02,850 --> 00:26:10,170
because it not only helps you to keep

00:26:05,850 --> 00:26:13,760
your code life it makes it may help you

00:26:10,170 --> 00:26:19,080
to understand the cold better you may

00:26:13,760 --> 00:26:21,390
make to look you into the area of code

00:26:19,080 --> 00:26:22,840
that you are you know just trying to

00:26:21,390 --> 00:26:25,730
avoid

00:26:22,840 --> 00:26:28,880
you could make the code and you will

00:26:25,730 --> 00:26:31,520
make the code much more easier to

00:26:28,880 --> 00:26:34,820
maintain you can even reduce the code in

00:26:31,520 --> 00:26:40,450
size and I guess everybody knows how

00:26:34,820 --> 00:26:44,120
know how refactoring is actually good

00:26:40,450 --> 00:26:46,580
test yeah testing is really something

00:26:44,120 --> 00:26:50,840
that developers don't like but I think

00:26:46,580 --> 00:26:56,120
we need to test whenever we we can here

00:26:50,840 --> 00:26:59,690
at Libby r whenever he well either the

00:26:56,120 --> 00:27:01,340
developer himself or the reviewer will

00:26:59,690 --> 00:27:04,310
make sure that whenever you are

00:27:01,340 --> 00:27:07,790
introducing a new APR or new feature or

00:27:04,310 --> 00:27:12,760
something that there is a unit test or

00:27:07,790 --> 00:27:17,030
there are any tests for that and we

00:27:12,760 --> 00:27:22,490
really have grown this extensive unit

00:27:17,030 --> 00:27:26,000
testing module in Libert we we also have

00:27:22,490 --> 00:27:28,360
an integration tests that we've that we

00:27:26,000 --> 00:27:33,430
are running both publicly and privately

00:27:28,360 --> 00:27:39,410
at bed redhead and we switched to

00:27:33,430 --> 00:27:41,870
monthly release cycle which really helps

00:27:39,410 --> 00:27:44,690
both customers and us because for

00:27:41,870 --> 00:27:47,060
instance you know our consumers our

00:27:44,690 --> 00:27:52,600
upstream consumers doesn't have to wait

00:27:47,060 --> 00:27:52,600
for too long for their back to be fixed

00:27:52,660 --> 00:28:06,080
so yeah I think we did some mistakes but

00:27:59,090 --> 00:28:08,000
we've really learned from them if you if

00:28:06,080 --> 00:28:10,340
you would take just one thing from from

00:28:08,000 --> 00:28:12,650
this presentation is that you should use

00:28:10,340 --> 00:28:17,240
the common sense because it's the best

00:28:12,650 --> 00:28:19,040
friend of you and the third point is you

00:28:17,240 --> 00:28:21,770
should be nice to new contributors

00:28:19,040 --> 00:28:24,080
because if as you've seen we struggle

00:28:21,770 --> 00:28:26,330
with the problem that we have we don't

00:28:24,080 --> 00:28:30,080
have enough contributors for some

00:28:26,330 --> 00:28:32,570
drivers I'm trying to change that with

00:28:30,080 --> 00:28:34,930
Google some of cold but I'm holding my

00:28:32,570 --> 00:28:34,930
finger crossed

00:28:35,240 --> 00:28:41,370
yeah and after all you know OSS is just

00:28:39,090 --> 00:28:46,710
a network of volunteers so you should be

00:28:41,370 --> 00:28:50,190
nice to new people and that concludes my

00:28:46,710 --> 00:28:56,070
talk so if you have any questions points

00:28:50,190 --> 00:29:01,500
to make first of all there is a missing

00:28:56,070 --> 00:29:05,280
/ thank you oh yeah so I what school is

00:29:01,500 --> 00:29:08,520
about the what exactly do you think went

00:29:05,280 --> 00:29:10,680
wrong with XML especially because the as

00:29:08,520 --> 00:29:14,220
far as i remember the usage of XML in

00:29:10,680 --> 00:29:17,220
libvirt is also what allows you to keep

00:29:14,220 --> 00:29:19,230
the structure of the objects internal

00:29:17,220 --> 00:29:22,290
yeah i mean the clients talk to the

00:29:19,230 --> 00:29:24,870
library a lot via XML instead of using C

00:29:22,290 --> 00:29:26,880
and this also allowed if I remember

00:29:24,870 --> 00:29:30,320
correctly a lot of back bottom

00:29:26,880 --> 00:29:33,960
functionality because it only occurred

00:29:30,320 --> 00:29:36,540
through new XML elements not through new

00:29:33,960 --> 00:29:38,760
API is so I'm clueless exactly what went

00:29:36,540 --> 00:29:42,120
one with XML and what would be the

00:29:38,760 --> 00:29:46,710
better solution yeah it's not bad thing

00:29:42,120 --> 00:29:51,360
itself that we've chosen XML as our

00:29:46,710 --> 00:29:58,890
formats you to describe the settings of

00:29:51,360 --> 00:30:01,500
domains it's just that some is sometimes

00:29:58,890 --> 00:30:04,620
the structure of the exam L of some

00:30:01,500 --> 00:30:10,500
elements well either some elements are

00:30:04,620 --> 00:30:13,530
badly named or they are in some it at

00:30:10,500 --> 00:30:19,260
some wrong place I would place them

00:30:13,530 --> 00:30:22,350
somewhere doing differently and then of

00:30:19,260 --> 00:30:27,360
course as you said the back parking

00:30:22,350 --> 00:30:31,400
thingy liberal hasn't liberal does not

00:30:27,360 --> 00:30:36,330
expose what exam what is ml elements it

00:30:31,400 --> 00:30:39,930
understands so if you have it has been

00:30:36,330 --> 00:30:42,360
pointed out already by marcos that the

00:30:39,930 --> 00:30:44,440
version of Liberty just meaningless or

00:30:42,360 --> 00:30:46,909
any any

00:30:44,440 --> 00:30:51,950
project is just meaningless whenever you

00:30:46,909 --> 00:30:55,369
come to backport so you cannot really

00:30:51,950 --> 00:30:57,710
know if you have a little bit of certain

00:30:55,369 --> 00:31:00,169
version what elements does it understand

00:30:57,710 --> 00:31:01,669
you doesn't leave it have the schemas

00:31:00,169 --> 00:31:05,629
that are placed somewhere in the file

00:31:01,669 --> 00:31:09,409
systems orangey or whatever yeah it has

00:31:05,629 --> 00:31:12,830
it has some but for a long time there

00:31:09,409 --> 00:31:16,070
have been broken and just recently we've

00:31:12,830 --> 00:31:19,519
switched to so let's say enforcing mode

00:31:16,070 --> 00:31:22,129
when which is when you are defining a

00:31:19,519 --> 00:31:27,230
domain or communicating with libby r

00:31:22,129 --> 00:31:30,649
Dwyer XML we firstly check the XML why

00:31:27,230 --> 00:31:34,129
are our schema but we haven't done that

00:31:30,649 --> 00:31:36,440
we started doing that just recently so

00:31:34,129 --> 00:31:40,450
hopefully and it already has sketched

00:31:36,440 --> 00:31:40,450
many errors in our schemas

00:31:46,880 --> 00:31:49,750
no more questions

00:31:50,230 --> 00:31:55,360
okay in that case I finished slightly

00:31:52,960 --> 00:31:56,919
earlier than i planned but I think it

00:31:55,360 --> 00:32:01,770
doesn't really matter since I'm followed

00:31:56,919 --> 00:32:01,770

YouTube URL: https://www.youtube.com/watch?v=eFmPzqlzrzY


