Title: [2015] Using IPMI in QEMU by Corey Minyard
Publication date: 2015-09-14
Playlist: KVM Forum 2015
Description: 
	IPMI has been used for a while for server maintenance. Some of these function can also be used in virtual environments for handling maintenance of virtual machines. This talk will discuss what IPMI functions might be useful for VM management and how to set up and use IPMI in QEMU.

Corey Minyard
Montavista

Corey has worked on Linux since kernel version 0.02 (he downloaded 0.01 and booted from floppy, but it didn't support the hard disk controller he had). He has done both professional work and personal work throughout. He currently works for MontaVista software, maintains the Linux IPMI driver and the OpenIPMI library, ser2net, and a few other projects.
Captions: 
	00:00:37,040 --> 00:00:43,890
and I started this long and I also have

00:00:41,250 --> 00:00:46,980
a background this I also have maintained

00:00:43,890 --> 00:00:48,660
a user LAN library for ipmi that it's

00:00:46,980 --> 00:00:51,829
fairly extensive and it's fairly fairly

00:00:48,660 --> 00:00:55,680
complicated so I originally developed

00:00:51,829 --> 00:00:57,090
software there to emulate a BMC so I can

00:00:55,680 --> 00:00:58,500
test stuff out without I've actually

00:00:57,090 --> 00:01:01,199
haven't had a real BMC I could run

00:00:58,500 --> 00:01:04,710
automated tests people send me bad stuff

00:01:01,199 --> 00:01:06,930
I can simulate it reproduce the bad

00:01:04,710 --> 00:01:08,909
stuff and then handle it properly or

00:01:06,930 --> 00:01:12,720
tell them how to fix their their

00:01:08,909 --> 00:01:14,670
incorrect implementations and that

00:01:12,720 --> 00:01:16,830
eventually grew and grew and grew and

00:01:14,670 --> 00:01:19,080
grew and people actually took that and

00:01:16,830 --> 00:01:24,060
it's actually been used to make a real

00:01:19,080 --> 00:01:25,979
ipmi BMC and in the meantime my people

00:01:24,060 --> 00:01:29,630
are sending me Hardware reports about

00:01:25,979 --> 00:01:31,979
bad Hardware in ipmi implementations and

00:01:29,630 --> 00:01:33,390
having to go back and forth is this fix

00:01:31,979 --> 00:01:39,479
the problem though is fix the problem

00:01:33,390 --> 00:01:41,880
was a was a painful process and and I uh

00:01:39,479 --> 00:01:43,680
so I that's why I start put the

00:01:41,880 --> 00:01:48,020
implementation into qvm use so i could

00:01:43,680 --> 00:01:52,619
emulate things emulate bad hardware and

00:01:48,020 --> 00:01:55,259
and make that cycle a lot faster but

00:01:52,619 --> 00:01:58,409
first of all what's IPMI how many people

00:01:55,259 --> 00:02:00,719
have used IPM I hear almost everybody

00:01:58,409 --> 00:02:04,680
but if you haven't so I'll talk about

00:02:00,719 --> 00:02:07,250
what it is so an IPM eye is a platform

00:02:04,680 --> 00:02:09,869
management interface and it's designed

00:02:07,250 --> 00:02:13,379
to allow you to remotely control

00:02:09,869 --> 00:02:14,909
Hardware without having to actually

00:02:13,379 --> 00:02:17,310
have something running on the system to

00:02:14,909 --> 00:02:20,639
be able to make to work on it so you

00:02:17,310 --> 00:02:23,879
have a you have a microcontroller that's

00:02:20,639 --> 00:02:25,549
always running on the system and you can

00:02:23,879 --> 00:02:27,840
communicate with that over the network

00:02:25,549 --> 00:02:29,249
so there's generally an extra plug on

00:02:27,840 --> 00:02:30,930
the back of these systems you plug it in

00:02:29,249 --> 00:02:34,230
and it talks to the IP of my controller

00:02:30,930 --> 00:02:35,670
and not to the main system hardware so

00:02:34,230 --> 00:02:37,319
that little microcontroller on there

00:02:35,670 --> 00:02:40,469
they're actually not so little anymore

00:02:37,319 --> 00:02:42,389
sometimes but it has actually and as a

00:02:40,469 --> 00:02:43,859
communication interface with the host

00:02:42,389 --> 00:02:47,459
processor to talk to the host processor

00:02:43,859 --> 00:02:50,879
and the protocols are the what runs over

00:02:47,459 --> 00:02:52,349
those are the same commands so you can

00:02:50,879 --> 00:02:53,669
if you commands from the host processor

00:02:52,349 --> 00:02:55,889
or from the network can do the same

00:02:53,669 --> 00:03:00,180
things but that little microcontroller

00:02:55,889 --> 00:03:02,400
there has on it hookups to sensors so

00:03:00,180 --> 00:03:05,939
measuring voltage current temperature or

00:03:02,400 --> 00:03:07,439
things like that it has through data so

00:03:05,939 --> 00:03:09,540
you can get to like W prompt through

00:03:07,439 --> 00:03:14,639
data and then through data about the

00:03:09,540 --> 00:03:16,290
actual system itself and then on the BMC

00:03:14,639 --> 00:03:19,109
generally do you have something called

00:03:16,290 --> 00:03:21,540
STRs and these describe all these

00:03:19,109 --> 00:03:23,250
sensors the fruit data everything so

00:03:21,540 --> 00:03:28,680
this so is self discovery that's where

00:03:23,250 --> 00:03:29,729
the intelligent comes in for my PMI so

00:03:28,680 --> 00:03:32,639
you can look through these things you

00:03:29,729 --> 00:03:33,750
can find out what Management Court or in

00:03:32,639 --> 00:03:36,120
the system what crew data is available

00:03:33,750 --> 00:03:37,229
what sensors are available how do I read

00:03:36,120 --> 00:03:42,479
them how do I convert them to human

00:03:37,229 --> 00:03:47,129
readable values a whole whole slew of

00:03:42,479 --> 00:03:48,870
things there's also an event log the SEL

00:03:47,129 --> 00:03:51,419
which holds events that have happened

00:03:48,870 --> 00:03:54,709
sensors go out of range system reboots

00:03:51,419 --> 00:03:57,030
watchdog timer goes off things like that

00:03:54,709 --> 00:04:00,449
there's internal fruit data that talks

00:03:57,030 --> 00:04:01,889
about the BMC itself and there's a power

00:04:00,449 --> 00:04:03,659
supply hookups

00:04:01,889 --> 00:04:05,519
so these orbits more than likely not to

00:04:03,659 --> 00:04:07,739
the power supply it's up to the local

00:04:05,519 --> 00:04:11,870
power control on the board but to be

00:04:07,739 --> 00:04:14,430
able to turn the power on and off that's

00:04:11,870 --> 00:04:16,070
in a nutshell that I come in any

00:04:14,430 --> 00:04:21,079
questions about this before I go on

00:04:16,070 --> 00:04:21,079
about what IPM is okay

00:04:21,509 --> 00:04:29,699
so I have implemented IPMI inside of

00:04:26,289 --> 00:04:31,900
QEMU and there's two basic

00:04:29,699 --> 00:04:34,660
implementations that you've got you have

00:04:31,900 --> 00:04:36,639
an internal BMC and that BMC is very

00:04:34,660 --> 00:04:39,340
basic although it can basically do is do

00:04:36,639 --> 00:04:44,350
a watchdog timer and support the very

00:04:39,340 --> 00:04:46,360
basic ipmi commands and then there's an

00:04:44,350 --> 00:04:49,509
external interface where you can hook to

00:04:46,360 --> 00:04:52,900
the big simulator that I wrote or

00:04:49,509 --> 00:04:54,550
anything else you'd like to write and it

00:04:52,900 --> 00:04:57,160
supports a fairly complete BMC

00:04:54,550 --> 00:04:59,320
implementation so you can create sensors

00:04:57,160 --> 00:05:00,400
you can have Roo data you can do all the

00:04:59,320 --> 00:05:06,449
kinds of things like that you can do it

00:05:00,400 --> 00:05:10,449
an IP mi system so you have the basic

00:05:06,449 --> 00:05:12,610
interface works like this you have qemu

00:05:10,449 --> 00:05:15,849
well actually the whole right side of

00:05:12,610 --> 00:05:19,320
QEMU you got the simulator it looks

00:05:15,849 --> 00:05:24,270
through char dev to an internal BMC

00:05:19,320 --> 00:05:26,620
front end then it hooks over the

00:05:24,270 --> 00:05:29,050
physical interfaces to the local host

00:05:26,620 --> 00:05:30,789
processor and then it has some things

00:05:29,050 --> 00:05:33,070
that it talks to qiyam you to do resets

00:05:30,789 --> 00:05:37,870
and shuts downs and nm eyes and things

00:05:33,070 --> 00:05:40,270
like that and then in the eternal

00:05:37,870 --> 00:05:43,870
internal one is similar it has a very

00:05:40,270 --> 00:05:46,840
basic watchdog timer one SDR describes

00:05:43,870 --> 00:05:50,289
the watchdog timer watchdog timer a

00:05:46,840 --> 00:05:52,060
sensor and then a little event log it

00:05:50,289 --> 00:05:54,340
caches watchdog timer events and that's

00:05:52,060 --> 00:05:58,900
all that it does and then the same basic

00:05:54,340 --> 00:06:00,550
thing on the right hand side so why

00:05:58,900 --> 00:06:03,039
would you want to use this well I was a

00:06:00,550 --> 00:06:04,449
little shocked when I when I started

00:06:03,039 --> 00:06:06,509
this I put it out there primarily

00:06:04,449 --> 00:06:09,849
because I didn't want to maintain it and

00:06:06,509 --> 00:06:11,680
and I'd like to eventually get it and QM

00:06:09,849 --> 00:06:13,060
you just for my own use but a lot of

00:06:11,680 --> 00:06:16,060
people were interested in this I've had

00:06:13,060 --> 00:06:17,530
several you know five or four or five

00:06:16,060 --> 00:06:20,050
queries about this people that actually

00:06:17,530 --> 00:06:22,419
use this in implementations to be able

00:06:20,050 --> 00:06:28,509
to do this to maintain their systems

00:06:22,419 --> 00:06:31,539
with IPMI and so so why watch why watch

00:06:28,509 --> 00:06:32,680
you want to do this there's that one is

00:06:31,539 --> 00:06:34,240
you can use your existing management

00:06:32,680 --> 00:06:41,830
software basically to

00:06:34,240 --> 00:06:43,960
maintain a QEMU virtual machine another

00:06:41,830 --> 00:06:45,400
thing you can do with this is you can

00:06:43,960 --> 00:06:47,080
cause things to happen that you can't

00:06:45,400 --> 00:06:49,360
really cause happen in the real world

00:06:47,080 --> 00:06:51,340
it's real hard to make voltage sensors

00:06:49,360 --> 00:06:57,220
go out of range in a real physical piece

00:06:51,340 --> 00:07:00,340
of hardware it can be done but I

00:06:57,220 --> 00:07:05,740
wouldn't I wouldn't recommend it oh he

00:07:00,340 --> 00:07:07,449
was that's right you can it allows the

00:07:05,740 --> 00:07:09,580
ipmi maintainer to reproduce bad

00:07:07,449 --> 00:07:14,470
hardware I do this I've done this four

00:07:09,580 --> 00:07:18,250
or five times this year III did it on

00:07:14,470 --> 00:07:21,759
the way here on the plane I did it and

00:07:18,250 --> 00:07:23,409
then there's a lot of software that that

00:07:21,759 --> 00:07:25,389
people have that might expect IPMI to be

00:07:23,409 --> 00:07:27,280
there just to make it feel better or

00:07:25,389 --> 00:07:28,780
something like that it might fool piece

00:07:27,280 --> 00:07:31,389
of software running in a virtual machine

00:07:28,780 --> 00:07:36,280
saying well I have IP Amaya

00:07:31,389 --> 00:07:38,139
I'm happy and then you might you might

00:07:36,280 --> 00:07:40,030
want a standard watchdog timer interface

00:07:38,139 --> 00:07:43,870
that's probably not a big deal but I

00:07:40,030 --> 00:07:45,820
thought I'd mention it so how does it

00:07:43,870 --> 00:07:48,669
work it's actually it's actually fairly

00:07:45,820 --> 00:07:51,460
simple so to create you create a BMC and

00:07:48,669 --> 00:07:52,659
then you hook an interface to it so

00:07:51,460 --> 00:07:55,780
there's the two different types of BMC

00:07:52,659 --> 00:07:58,599
there's a simulator and then there's the

00:07:55,780 --> 00:08:03,729
hookup to the external emulator and that

00:07:58,599 --> 00:08:05,949
goes over a char dev there's all we

00:08:03,729 --> 00:08:09,190
added the reconnect thing and I'll show

00:08:05,949 --> 00:08:11,020
that later but if your if your BMC fails

00:08:09,190 --> 00:08:12,009
the external BMC fails you just start it

00:08:11,020 --> 00:08:14,560
back up and it'll reconnect and

00:08:12,009 --> 00:08:16,810
everything's happy and then you attach

00:08:14,560 --> 00:08:18,370
that to an interface it's a pretty

00:08:16,810 --> 00:08:20,229
standard eisah device you can have

00:08:18,370 --> 00:08:22,690
interrupts you can set the port you want

00:08:20,229 --> 00:08:26,740
it to be on and things like that

00:08:22,690 --> 00:08:33,070
all this is reported through s sm bios

00:08:26,740 --> 00:08:34,599
and a CPI well there's a it's coming but

00:08:33,070 --> 00:08:35,589
that eventually it'll all be reported

00:08:34,599 --> 00:08:37,180
through that so it all works

00:08:35,589 --> 00:08:40,329
automatically you can see that you'll

00:08:37,180 --> 00:08:43,360
see that in a demo that I have actually

00:08:40,329 --> 00:08:45,670
I'll I'll skip the demos for now I'm

00:08:43,360 --> 00:08:48,230
gonna come back so what's left well

00:08:45,670 --> 00:08:52,790
there's obviously up streaming the

00:08:48,230 --> 00:08:53,960
code I've been well I went on us I spent

00:08:52,790 --> 00:08:55,610
a week hiking the mountains in Colorado

00:08:53,960 --> 00:08:57,170
and then it's been two weeks in India

00:08:55,610 --> 00:08:58,430
then we're doing audit right now so I

00:08:57,170 --> 00:08:59,930
haven't had a lot of time in the past

00:08:58,430 --> 00:09:03,350
month and a half or two to work on it

00:08:59,930 --> 00:09:05,770
but when the audits over I'll have some

00:09:03,350 --> 00:09:09,080
time left I'll be able to get back to it

00:09:05,770 --> 00:09:10,670
there's three basic interface well

00:09:09,080 --> 00:09:11,930
there's really four basic interfaces in

00:09:10,670 --> 00:09:14,330
IPMI to hook to the host processor

00:09:11,930 --> 00:09:17,390
there's um the most popular is called

00:09:14,330 --> 00:09:19,490
Casey s & Casey s stands for keyboard

00:09:17,390 --> 00:09:23,000
style controller it actually looks like

00:09:19,490 --> 00:09:25,010
a keyboard I don't know why but that's

00:09:23,000 --> 00:09:27,050
that's the most common interface you'll

00:09:25,010 --> 00:09:28,850
see block transfer which is allows you

00:09:27,050 --> 00:09:30,800
to do full block transfers it's a lot

00:09:28,850 --> 00:09:33,110
faster than Casey s I bite at a time

00:09:30,800 --> 00:09:34,370
there's an old one called smack which is

00:09:33,110 --> 00:09:36,530
a bite at time and you only see on

00:09:34,370 --> 00:09:40,100
really old HP systems and then there's

00:09:36,530 --> 00:09:42,710
SSI F which is ipmi / SM bus or I

00:09:40,100 --> 00:09:45,200
squared C and that I have code that

00:09:42,710 --> 00:09:47,060
works that does that but it's it's got a

00:09:45,200 --> 00:09:48,740
lot of things that touches well first of

00:09:47,060 --> 00:09:51,080
all the PM bus system the PMS and bus

00:09:48,740 --> 00:09:53,630
code is completely broken in qu me right

00:09:51,080 --> 00:09:55,070
now but but there's a lot of other

00:09:53,630 --> 00:09:56,990
things that have to be done to make it

00:09:55,070 --> 00:09:57,880
work like like SN bus alerts and things

00:09:56,990 --> 00:10:00,790
like that

00:09:57,880 --> 00:10:02,770
and these are where you can get it now

00:10:00,790 --> 00:10:05,360
to basic

00:10:02,770 --> 00:10:08,420
to basic places the Q mu changes are on

00:10:05,360 --> 00:10:13,070
github for historical reasons the open

00:10:08,420 --> 00:10:16,390
IPMI project is on SourceForge and i

00:10:13,070 --> 00:10:16,390
just i just didn't want to move it

00:10:17,230 --> 00:10:25,160
issues if you notice there's a there's a

00:10:22,220 --> 00:10:29,330
charge of connection between the between

00:10:25,160 --> 00:10:30,740
the vm c and qemu and obviously if

00:10:29,330 --> 00:10:31,940
you're not careful about that or maybe

00:10:30,740 --> 00:10:34,640
even if you are careful about that

00:10:31,940 --> 00:10:39,470
that's a security hole you might be able

00:10:34,640 --> 00:10:41,870
to hijack that somehow and and do bad

00:10:39,470 --> 00:10:45,650
things to your qemu implementation or

00:10:41,870 --> 00:10:46,670
full the full the ipmi stuff into

00:10:45,650 --> 00:10:49,490
thinking something's actually out there

00:10:46,670 --> 00:10:53,540
which is not there's probably other

00:10:49,490 --> 00:10:55,340
security problems here ipmi is not known

00:10:53,540 --> 00:10:59,000
for its great security I mean there is

00:10:55,340 --> 00:11:00,320
security in there there is a encryption

00:10:59,000 --> 00:11:01,990
authentication and things like that

00:11:00,320 --> 00:11:04,790
standard stuff you see any security it's

00:11:01,990 --> 00:11:07,430
it's not the best in the world but it is

00:11:04,790 --> 00:11:09,470
it is there generally people run their

00:11:07,430 --> 00:11:10,790
control networks at least separately

00:11:09,470 --> 00:11:14,450
from their data networks to help

00:11:10,790 --> 00:11:16,760
alleviate a lot of those problems but

00:11:14,450 --> 00:11:21,620
IPMI is very common in in the data in

00:11:16,760 --> 00:11:23,270
the IT realm and in telecom realm the

00:11:21,620 --> 00:11:25,970
other big problem is if you're gonna

00:11:23,270 --> 00:11:27,920
take say your board or your system and

00:11:25,970 --> 00:11:31,130
create an IP mi simulation of it that's

00:11:27,920 --> 00:11:33,350
a huge problem a huge amount of work it

00:11:31,130 --> 00:11:35,990
requires extensive knowledge of the

00:11:33,350 --> 00:11:39,020
insides of ipmi how it all works and

00:11:35,990 --> 00:11:40,550
there's a there are unfortunately or

00:11:39,020 --> 00:11:41,840
fortunately I don't know not many people

00:11:40,550 --> 00:11:45,710
in the world that know that kind of

00:11:41,840 --> 00:11:47,860
stuff I know five or six people that

00:11:45,710 --> 00:11:51,410
could that could do something like this

00:11:47,860 --> 00:11:54,290
and I know more than most probably the

00:11:51,410 --> 00:11:56,180
good news is 95% of the people in the

00:11:54,290 --> 00:11:58,640
world use IPMI for power management and

00:11:56,180 --> 00:12:01,940
reset and that's a fairly simple problem

00:11:58,640 --> 00:12:04,100
to solve there's actually a guy who did

00:12:01,940 --> 00:12:06,500
this with the older implementation that

00:12:04,100 --> 00:12:08,510
I that I had out there and he posted it

00:12:06,500 --> 00:12:10,730
out this is how I did this and this is

00:12:08,510 --> 00:12:14,089
how it made my software happy so you can

00:12:10,730 --> 00:12:15,680
go go look on that look at that and he's

00:12:14,089 --> 00:12:17,330
got a big long description of how the

00:12:15,680 --> 00:12:18,200
whole procedure - how to set it up it's

00:12:17,330 --> 00:12:19,520
pretty impressive because the

00:12:18,200 --> 00:12:23,060
documentation on it right now it's

00:12:19,520 --> 00:12:24,589
pretty scanty so he he did a little bit

00:12:23,060 --> 00:12:28,760
of work on that but it made him very

00:12:24,589 --> 00:12:30,440
happy so I guess that's good okay any

00:12:28,760 --> 00:12:32,920
questions so far

00:12:30,440 --> 00:12:32,920
yeah

00:12:33,380 --> 00:12:39,000
that is a good question I came I just

00:12:36,090 --> 00:12:43,740
support in the standard the ability to

00:12:39,000 --> 00:12:45,330
do a serial port over the land through a

00:12:43,740 --> 00:12:46,140
standard secure interface and so you

00:12:45,330 --> 00:12:47,670
have to go through all the

00:12:46,140 --> 00:12:50,160
authentication and everything like that

00:12:47,670 --> 00:12:52,710
to get to it that could be very easily

00:12:50,160 --> 00:12:54,900
supported edit IP Maya simulator right

00:12:52,710 --> 00:12:56,340
now actually support serial over LAN but

00:12:54,900 --> 00:12:59,310
right now it would only talk to a real

00:12:56,340 --> 00:13:00,480
serial port they won't talk over

00:12:59,310 --> 00:13:04,680
something it had to talk over there the

00:13:00,480 --> 00:13:06,030
char dev to to qemu and I don't have

00:13:04,680 --> 00:13:09,900
support for that it wouldn't be terribly

00:13:06,030 --> 00:13:12,990
hard to add I'm not gonna do video or

00:13:09,900 --> 00:13:14,910
anything like that so there are there

00:13:12,990 --> 00:13:19,290
are implementations of video over IP mi

00:13:14,910 --> 00:13:22,710
people will do consoles over IP mi it's

00:13:19,290 --> 00:13:25,320
not standard and it doesn't sound like a

00:13:22,710 --> 00:13:27,440
good idea to me but a lot of people do

00:13:25,320 --> 00:13:27,440
it

00:13:33,790 --> 00:13:39,730
if the VM is off there's there is a it

00:13:38,350 --> 00:13:43,900
uses the network connection if you look

00:13:39,730 --> 00:13:47,380
back on the little picture here from

00:13:43,900 --> 00:13:50,430
IPMI point of view how does it

00:13:47,380 --> 00:13:50,430
communicate with

00:14:01,350 --> 00:14:05,660
oh okay we can go into the demos now

00:14:06,860 --> 00:14:16,860
okay this narrow screen doesn't do much

00:14:11,610 --> 00:14:19,470
for me here all right so this is the

00:14:16,860 --> 00:14:21,150
configuration file from open ipmi it has

00:14:19,470 --> 00:14:25,100
things like you know sitting at the land

00:14:21,150 --> 00:14:29,540
connection authentication gyd

00:14:25,100 --> 00:14:29,540
but one of the things that has down here

00:14:29,660 --> 00:14:33,420
part of it will be very familiar with

00:14:31,680 --> 00:14:35,880
you before you week my lot of you guys

00:14:33,420 --> 00:14:43,560
that the serial connection right here to

00:14:35,880 --> 00:14:45,510
a VM and a command to start QEMU it can

00:14:43,560 --> 00:14:47,550
use lipfird or whatever you want to do

00:14:45,510 --> 00:14:50,370
to start qemu i just this is just i've

00:14:47,550 --> 00:14:52,380
hacked this in for my own use and you

00:14:50,370 --> 00:14:53,610
can have it start when you power this

00:14:52,380 --> 00:14:55,230
when you starts up or you can have it

00:14:53,610 --> 00:14:57,410
start later right now I have it starting

00:14:55,230 --> 00:14:57,410
later

00:14:58,040 --> 00:15:04,920
so which the screen wasn't quite so

00:15:01,710 --> 00:15:08,060
small so if I start open a PMI here it

00:15:04,920 --> 00:15:08,060
creates a very basic system

00:15:12,580 --> 00:15:19,430
so I can satisfy can see the powers off

00:15:15,080 --> 00:15:21,860
I don't have a connection to there's no

00:15:19,430 --> 00:15:36,560
VM out there right now so I can say

00:15:21,860 --> 00:15:46,690
power login and do whatever I can save

00:15:36,560 --> 00:15:46,690
power off so it's powering off right now

00:15:49,030 --> 00:15:56,900
that's off so you can see the normal

00:15:52,610 --> 00:15:59,680
power management kind of things work we

00:15:56,900 --> 00:15:59,680
can power back on

00:16:06,949 --> 00:16:13,769
we can reset it all the normal things

00:16:11,970 --> 00:16:15,870
you can do but this is what 95% of

00:16:13,769 --> 00:16:18,360
people do over IPMI I come from the

00:16:15,870 --> 00:16:20,310
telecom world and they do they do data

00:16:18,360 --> 00:16:22,740
trending on voltages and temperatures

00:16:20,310 --> 00:16:24,750
and things like that but it's mostly

00:16:22,740 --> 00:16:26,839
what I focus on but this is what most

00:16:24,750 --> 00:16:32,100
people do that's it

00:16:26,839 --> 00:16:34,639
so the watchdog timers work so I can go

00:16:32,100 --> 00:16:34,639
in and say

00:16:49,129 --> 00:16:53,309
so it's not stopping the watchdog we had

00:16:51,959 --> 00:16:57,839
about five seconds that's why I have it

00:16:53,309 --> 00:17:07,110
the timeout set to three weeks and also

00:16:57,839 --> 00:17:09,600
you can go over here you can say and you

00:17:07,110 --> 00:17:10,799
can see there the watchdog actually got

00:17:09,600 --> 00:17:13,309
a censor log that said the watchdog

00:17:10,799 --> 00:17:13,309
timer went off

00:17:23,140 --> 00:17:27,300
oh yeah you can have open IPMI here

00:17:35,000 --> 00:17:39,520
I can get the whole command in

00:17:48,250 --> 00:17:56,520
remember all this stuff on the top of my

00:17:50,260 --> 00:17:56,520
head oh yeah they were connected here

00:17:58,409 --> 00:18:09,390
there's our sensor clear it out so of

00:18:06,400 --> 00:18:09,390
course it's not going to be there

00:18:15,100 --> 00:18:18,600
the watchdog goes off

00:18:19,030 --> 00:18:25,300
in a second here you can see the sensor

00:18:23,620 --> 00:18:30,690
coming and there's that there's the

00:18:25,300 --> 00:18:33,520
Raider record you can see that is it

00:18:30,690 --> 00:18:35,380
well it was an assertion that the

00:18:33,520 --> 00:18:39,190
watchdog timer went off it's like I have

00:18:35,380 --> 00:18:40,390
a problem in my STRs but yeah so you can

00:18:39,190 --> 00:18:41,560
have open up and connect and do all this

00:18:40,390 --> 00:18:48,750
kind of stuff you can do the same at the

00:18:41,560 --> 00:18:48,750
same power off I'm here so you can say

00:19:05,890 --> 00:19:10,140
so it's all pretty transparent it works

00:19:10,470 --> 00:19:15,150
anything else anybody wants to see oh

00:19:12,640 --> 00:19:24,420
there's sensor setting I can set sensors

00:19:15,150 --> 00:19:24,420
so let's see I have a if you look in my

00:19:28,570 --> 00:19:34,680
my emulator I've got two sensors that

00:19:31,750 --> 00:19:34,680
are temperature sensors

00:19:41,750 --> 00:19:49,670
so I can go into here I can set my

00:19:48,290 --> 00:19:53,960
temperature sensor whatever value I want

00:19:49,670 --> 00:19:56,750
to set it to 130 degrees Oh something

00:19:53,960 --> 00:20:01,580
wrong there so you get an event saying

00:19:56,750 --> 00:20:03,380
it's a temperature sensor win hi so this

00:20:01,580 --> 00:20:06,350
is a an internal sensor you can also

00:20:03,380 --> 00:20:18,160
have sensors that are external so I can

00:20:06,350 --> 00:20:18,160
go over here this actual sensor

00:20:22,530 --> 00:20:26,070
nope there it went off again I should

00:20:24,809 --> 00:20:27,390
have put it there different value but it

00:20:26,070 --> 00:20:30,750
went to 30 degrees there on this

00:20:27,390 --> 00:20:33,419
different sensor and that since there is

00:20:30,750 --> 00:20:36,510
a pole based sensor so you can look down

00:20:33,419 --> 00:20:37,950
here that sensor actually monitors this

00:20:36,510 --> 00:20:41,880
file right here it pulls it every set

00:20:37,950 --> 00:20:43,860
every second for data this was primarily

00:20:41,880 --> 00:20:45,720
this is actually used in real there's

00:20:43,860 --> 00:20:48,480
this can be used for real BMC's so this

00:20:45,720 --> 00:20:51,780
is actually mostly for monitoring the

00:20:48,480 --> 00:20:55,590
slash test file system for for physical

00:20:51,780 --> 00:20:56,580
sensors but yeah you can do it for you

00:20:55,590 --> 00:21:01,080
can simulate whatever you want to with

00:20:56,580 --> 00:21:02,760
it and I works the IP my to open up EMI

00:21:01,080 --> 00:21:05,460
it all works pretty transparently I

00:21:02,760 --> 00:21:11,000
haven't tried free free ipmi I assume it

00:21:05,460 --> 00:21:11,000
would work to standard protocol yes

00:21:16,530 --> 00:21:19,670
you can

00:21:30,150 --> 00:21:34,159
it's all available here so you can run

00:21:41,480 --> 00:21:45,909
so you've got all the stuff available

00:21:42,889 --> 00:21:48,830
here the same same basic interface

00:21:45,909 --> 00:21:50,690
through the through the case yes or BT

00:21:48,830 --> 00:21:53,510
or whatever that's the local host

00:21:50,690 --> 00:21:55,730
interface so you can a lot of people do

00:21:53,510 --> 00:21:59,779
that too they'll monitor other's stuff

00:21:55,730 --> 00:22:10,010
locally and pass it upstream it works

00:21:59,779 --> 00:22:13,149
either way okay that's a that's a Dell

00:22:10,010 --> 00:22:13,149
thing I think yeah

00:22:14,350 --> 00:22:18,710
assuming you have everything to make

00:22:16,279 --> 00:22:20,179
light lights off work hap-happy it would

00:22:18,710 --> 00:22:22,789
work but it would you could do it though

00:22:20,179 --> 00:22:24,710
we require a lot of setup I don't know

00:22:22,789 --> 00:22:26,539
if they use any proprietary commands but

00:22:24,710 --> 00:22:29,769
proprietary commands can be added to the

00:22:26,539 --> 00:22:29,769
IP of my simulator if necessary

00:22:30,070 --> 00:22:39,309
this would mean they'll give you the

00:22:32,419 --> 00:22:39,309
information write them anything else

00:22:50,570 --> 00:22:54,799
wouldn't they go through libvirt or

00:22:52,500 --> 00:22:54,799
something like that

00:23:09,350 --> 00:23:13,640
stimulation is a great deal for testing

00:23:22,050 --> 00:23:27,910
yeah you can open up the Amaya's open

00:23:24,730 --> 00:23:29,560
source is extensible or the LAN

00:23:27,910 --> 00:23:31,600
simulator 16 it's all it's all open

00:23:29,560 --> 00:23:33,520
source and extensible but the Lansing

00:23:31,600 --> 00:23:35,940
later part is the part that does does

00:23:33,520 --> 00:23:35,940
this thing

00:23:53,290 --> 00:24:02,120
right the patches are I'm working on

00:23:56,809 --> 00:24:04,370
getting them in yeah I think the the

00:24:02,120 --> 00:24:06,530
basic patches are are pretty much

00:24:04,370 --> 00:24:09,770
accepted there's patches dealing with a

00:24:06,530 --> 00:24:11,210
CPI to do the to do the system tables so

00:24:09,770 --> 00:24:14,630
that you can Auto be Auto discovered I

00:24:11,210 --> 00:24:15,830
nessam BIOS and those are those have

00:24:14,630 --> 00:24:30,860
some issues that need to be worked

00:24:15,830 --> 00:24:33,770
through it's just like a normal system

00:24:30,860 --> 00:24:46,070
if you you force the power up and it

00:24:33,770 --> 00:24:47,990
powers off it powers off right that's

00:24:46,070 --> 00:24:51,650
that you I mean you saw that the normal

00:24:47,990 --> 00:24:55,000
power offs does a dozen ACPI operation

00:24:51,650 --> 00:24:55,000
integration with me powers it down

00:25:10,110 --> 00:25:19,680
right sure anything else okay

00:25:27,310 --> 00:25:33,190
not exactly I mean that's probably the

00:25:29,920 --> 00:25:34,480
best scenario you could I mean it's all

00:25:33,190 --> 00:25:37,450
set up and it will work right now you

00:25:34,480 --> 00:25:39,340
could have multiple multiple bmc's or

00:25:37,450 --> 00:25:41,740
multiple management controllers and each

00:25:39,340 --> 00:25:44,350
management controller could have a could

00:25:41,740 --> 00:25:47,350
have a qemu behind it so you could have

00:25:44,350 --> 00:25:49,300
one BMC and then multiple other

00:25:47,350 --> 00:25:52,690
management controllers in the system and

00:25:49,300 --> 00:25:54,370
have better that you can talk through

00:25:52,690 --> 00:25:56,950
the BMC those management controllers and

00:25:54,370 --> 00:25:58,720
those can have each have their own QEMU

00:25:56,950 --> 00:26:03,510
so you could have one IPMI simulator and

00:25:58,720 --> 00:26:06,010
have an arbitrary well up to 127 or so

00:26:03,510 --> 00:26:08,370
QAM um some implementations behind it if

00:26:06,010 --> 00:26:08,370
you wanted

00:26:12,409 --> 00:26:17,989
no I don't know a whole lot about

00:26:15,919 --> 00:26:21,489
libvirt and how I didn't interfaces with

00:26:17,989 --> 00:26:21,489
with QEMU I assume

00:26:42,210 --> 00:26:48,460
yeah I mean it should work as long as it

00:26:46,990 --> 00:26:52,570
has all the proper configuration to

00:26:48,460 --> 00:26:54,310
connect back to the to the simulator so

00:26:52,570 --> 00:27:10,510
that over the char debited hooks back it

00:26:54,310 --> 00:27:12,430
should just work it uh it doesn't well

00:27:10,510 --> 00:27:14,230
there's a little bit of monitoring it'll

00:27:12,430 --> 00:27:17,110
work either way so it will start it and

00:27:14,230 --> 00:27:19,960
if it has the pit it will it can kill it

00:27:17,110 --> 00:27:21,790
that way if like as a ipmi has stage

00:27:19,960 --> 00:27:23,380
kill so the first thing it does is a

00:27:21,790 --> 00:27:25,240
graceful kill if nothing happens within

00:27:23,380 --> 00:27:26,950
a certain period of time it you know

00:27:25,240 --> 00:27:31,240
goes one level up and then it finally

00:27:26,950 --> 00:27:33,010
just sends that kill -9 to it so if it

00:27:31,240 --> 00:27:36,880
has a pit it'll do that if not it just

00:27:33,010 --> 00:27:39,930
uses the the interface over the char

00:27:36,880 --> 00:27:39,930
depth to shut it down

00:27:41,140 --> 00:27:46,610
that's that's already in there actually

00:27:43,780 --> 00:27:56,390
so that's actually part of the part of

00:27:46,610 --> 00:28:02,530
the protocol right now yes wouldn't work

00:27:56,390 --> 00:28:02,530
with liver yeah

00:28:19,659 --> 00:28:25,059
anybody wants to work on the inverted

00:28:21,619 --> 00:28:25,059
integration that would be okay with me

00:28:33,729 --> 00:28:42,139
we'd have to actually have all of them

00:28:35,929 --> 00:28:43,339
by hand right now yeah you would yeah so

00:28:42,139 --> 00:28:45,319
that it would have to be configured by

00:28:43,339 --> 00:28:48,949
and there's no reason there's no reload

00:28:45,319 --> 00:28:55,629
right now in the simulator there's stuff

00:28:48,949 --> 00:28:55,629
that needs to be fixed to make it right

00:29:00,070 --> 00:29:15,259
okay anything else oh that's the

00:29:11,389 --> 00:29:16,460
internal simulator yes yeah but it

00:29:15,259 --> 00:29:18,799
doesn't have a network connection or

00:29:16,460 --> 00:29:21,200
anything like that so it doesn't have

00:29:18,799 --> 00:29:23,389
that whole side of things like the code

00:29:21,200 --> 00:29:25,460
to do that is fairly large I mean you

00:29:23,389 --> 00:29:28,130
could put it in qemu but it it'd be

00:29:25,460 --> 00:29:30,080
twenty thirty thousand lines of code or

00:29:28,130 --> 00:29:34,539
more and then it requires a lot of

00:29:30,080 --> 00:29:37,610
special networking stuff it's it's nasty

00:29:34,539 --> 00:29:40,639
the authentication algorithms and stuff

00:29:37,610 --> 00:29:44,440
are pretty nasty it could be done but

00:29:40,639 --> 00:29:44,440
I'd like to avoid it if possible

00:29:53,060 --> 00:29:55,690
right

00:30:11,400 --> 00:30:17,270
yeah there's a whole legal side of

00:30:15,000 --> 00:30:24,510
things but Intel is pretty much said

00:30:17,270 --> 00:30:26,130
it's okay with us so they're there the

00:30:24,510 --> 00:30:28,620
basic stance they have taken is any

00:30:26,130 --> 00:30:34,860
software implementation does not just

00:30:28,620 --> 00:30:43,070
not infringe upon their legal the legal

00:30:34,860 --> 00:30:43,070
documents so so I'm I'm okay with that

00:30:50,410 --> 00:30:55,200
red fish I'm not familiar with red fish

00:31:02,040 --> 00:31:05,040
hmm

00:31:13,120 --> 00:31:19,180
oh really IPM I should be fairly

00:31:17,620 --> 00:31:21,580
scalable I think open up whom I will

00:31:19,180 --> 00:31:25,420
support thousands of thousands of

00:31:21,580 --> 00:31:28,690
systems that's a that's an

00:31:25,420 --> 00:31:32,050
implementation you know that has to do

00:31:28,690 --> 00:31:34,030
with one IPMI simulator how many QM use

00:31:32,050 --> 00:31:37,480
could you put behind that that's the

00:31:34,030 --> 00:31:39,880
implementation of this is the protocol

00:31:37,480 --> 00:31:41,410
so from talking from open our PMI to a

00:31:39,880 --> 00:31:45,010
bunch of systems you could have many

00:31:41,410 --> 00:31:46,360
thousands I would imagine that the

00:31:45,010 --> 00:31:48,580
better thing would be that you since

00:31:46,360 --> 00:31:50,350
you're running HTTP you can do HTTP you

00:31:48,580 --> 00:31:51,940
have much better security that would be

00:31:50,350 --> 00:31:53,650
the bigger deal for that I would I would

00:31:51,940 --> 00:31:55,680
think and that would be a good thing I

00:31:53,650 --> 00:31:55,680
think

00:32:07,429 --> 00:32:10,520

YouTube URL: https://www.youtube.com/watch?v=oUv2RZa9uM0


