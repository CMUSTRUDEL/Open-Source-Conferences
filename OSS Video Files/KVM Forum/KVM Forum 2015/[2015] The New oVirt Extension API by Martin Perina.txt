Title: [2015] The New oVirt Extension API by Martin Perina
Publication date: 2015-09-09
Playlist: KVM Forum 2015
Description: 
	Prior to version 3.5 oVirt did not have a standard API for creating custom modules/extension. There were some parts of oVirt that allowed limited extensibility like UI plugins or VDSM hooks, but there was no standard solution. In this session we will take a look at the new extension API introduced in oVirt 3.5. We will take a look at the features this API offers and we will demonstrate how to create new extension. We will also take a look at the different functionality in oVirt that already leverages this API, like AAA and logging, and will present our future plans around it.

Martin Perina
Red Hat
Senior Software Engineer
Czech Republic

My name is Martin PeÅ™ina and I work as Senior Software Engineer at Red Hat. I have an M.Sc. degree in Computer Science with 15 years experience in the industry. For the last 2 years I've been an active developer in the oVirt project (the community project of Red Hat Enterprise Virtualization), I specialize on host lifecycle and extensions and modularity infrastructure of the project. I have given several technical sessions at a few conferences and consulted on different virtualization/cloud features with customers.
Captions: 
	00:00:20,869 --> 00:00:29,279
so welcome everybody my name is Marty

00:00:25,260 --> 00:00:33,360
lagina and i work at red head on over

00:00:29,279 --> 00:00:38,969
and the ref project today we'll be

00:00:33,360 --> 00:00:41,280
talking about over extension API we will

00:00:38,969 --> 00:00:44,850
noticed some already existing

00:00:41,280 --> 00:00:48,270
implementations or API and we will talk

00:00:44,850 --> 00:00:52,920
about future plans would we will

00:00:48,270 --> 00:00:57,930
hopefully do with those so just a brief

00:00:52,920 --> 00:01:02,039
introduction in over this centralized

00:00:57,930 --> 00:01:05,790
management systems for virtualization we

00:01:02,039 --> 00:01:10,740
have three main parts it's the engine

00:01:05,790 --> 00:01:13,740
which is brain of whole solution we have

00:01:10,740 --> 00:01:18,000
a lot of hosts on which is running VD sm

00:01:13,740 --> 00:01:21,420
and on the host we are executing our

00:01:18,000 --> 00:01:23,820
virtual machines and we also have the

00:01:21,420 --> 00:01:30,540
storage which is shared across these

00:01:23,820 --> 00:01:33,329
posts prior to version 3 dot for the

00:01:30,540 --> 00:01:37,500
extensibility of over was pretty limited

00:01:33,329 --> 00:01:41,720
because we have only two types how to

00:01:37,500 --> 00:01:45,090
extend overt without you know going to

00:01:41,720 --> 00:01:48,530
into the project and with the code so we

00:01:45,090 --> 00:01:53,220
have engineer plugins which were

00:01:48,530 --> 00:01:55,979
possible to to inject custom plugins

00:01:53,220 --> 00:01:58,140
into overt management UI and those

00:01:55,979 --> 00:02:02,640
plugins were able to communicate with

00:01:58,140 --> 00:02:05,939
engine using REST API and on the host we

00:02:02,640 --> 00:02:08,940
have VD sm hooks which was let's say

00:02:05,939 --> 00:02:11,560
some custom scripts or programs which

00:02:08,940 --> 00:02:15,250
could be executed at

00:02:11,560 --> 00:02:18,280
certain predefined even so the

00:02:15,250 --> 00:02:22,200
extensibility was pretty limited and the

00:02:18,280 --> 00:02:27,599
whole project is was pretty monolithic

00:02:22,200 --> 00:02:31,569
just brief what is the magic AAA so it's

00:02:27,599 --> 00:02:33,580
authentication which just verify that

00:02:31,569 --> 00:02:35,880
the user tries to log into system is

00:02:33,580 --> 00:02:39,580
really the one who claims to do

00:02:35,880 --> 00:02:42,700
authorization just verification of the

00:02:39,580 --> 00:02:45,370
resources that users can access and

00:02:42,700 --> 00:02:49,989
accounting it's the statistics about all

00:02:45,370 --> 00:02:54,970
of those stuff so when we plant the

00:02:49,989 --> 00:02:57,519
overt three dot five we have we know

00:02:54,970 --> 00:03:03,069
that our a implementation was pretty

00:02:57,519 --> 00:03:07,019
monolithic it wasn't good it was very

00:03:03,069 --> 00:03:10,989
complex using Kerberos and LD ap it

00:03:07,019 --> 00:03:16,090
didn't support all the LD AP hosts we

00:03:10,989 --> 00:03:19,150
need and it was kinda know that we

00:03:16,090 --> 00:03:23,470
really need to rewrite this and when we

00:03:19,150 --> 00:03:26,739
decide how to do it we kinda have a

00:03:23,470 --> 00:03:29,500
discussion if it should do the same way

00:03:26,739 --> 00:03:32,650
as it does so it directly injected into

00:03:29,500 --> 00:03:34,840
a genus another monolithic park or we

00:03:32,650 --> 00:03:38,109
could do this using some kind of

00:03:34,840 --> 00:03:41,350
extension API so in the future we could

00:03:38,109 --> 00:03:43,530
use this extension to split the

00:03:41,350 --> 00:03:49,889
monolithic engine into several

00:03:43,530 --> 00:03:53,980
communicating parts so we choose this

00:03:49,889 --> 00:03:59,190
extension based because it's much more

00:03:53,980 --> 00:04:01,630
you know extensible or easier to to

00:03:59,190 --> 00:04:05,859
create just the new extension using

00:04:01,630 --> 00:04:09,220
stable API we also wanted to be able to

00:04:05,859 --> 00:04:12,880
use some other languages which is which

00:04:09,220 --> 00:04:16,690
can be injected into JVM such as Python

00:04:12,880 --> 00:04:20,620
JavaScript and also we wanted this API

00:04:16,690 --> 00:04:21,970
to be exportable to whole parts of

00:04:20,620 --> 00:04:24,220
engines so

00:04:21,970 --> 00:04:27,610
in future we hope that the same

00:04:24,220 --> 00:04:31,110
extension API will be used on VD sm and

00:04:27,610 --> 00:04:36,850
also on the UI side to have just one

00:04:31,110 --> 00:04:39,310
single piece of of extension API so

00:04:36,850 --> 00:04:44,440
overt extension API was introduced in

00:04:39,310 --> 00:04:46,480
over three to five at the moment when we

00:04:44,440 --> 00:04:49,390
have stable free at five and three to

00:04:46,480 --> 00:04:55,300
six version at the door it's used for

00:04:49,390 --> 00:04:59,050
AAA and for logging but it's possible to

00:04:55,300 --> 00:05:02,440
to create a new code using this API for

00:04:59,050 --> 00:05:04,660
pretty much everything we are currently

00:05:02,440 --> 00:05:08,620
using jboss modules to load those

00:05:04,660 --> 00:05:13,950
extensions and the extension is

00:05:08,620 --> 00:05:13,950
configured using text property files

00:05:14,850 --> 00:05:22,300
when we decide how the extension API

00:05:19,180 --> 00:05:25,030
should look like we decided it should be

00:05:22,300 --> 00:05:27,760
as simple as possible so the whole

00:05:25,030 --> 00:05:31,000
extension has just invoke method with

00:05:27,760 --> 00:05:38,590
Matt Mac of input parameters and map of

00:05:31,000 --> 00:05:44,130
output parameters and that's it each

00:05:38,590 --> 00:05:47,229
each map has its keys these keys are

00:05:44,130 --> 00:05:52,770
simple classes which contain just the

00:05:47,229 --> 00:05:56,919
name of the key uuid to be able identify

00:05:52,770 --> 00:06:03,000
exactly what this is is and also a class

00:05:56,919 --> 00:06:03,000
which get us the type of the value

00:06:05,539 --> 00:06:14,339
engine extension API it's contains some

00:06:10,639 --> 00:06:17,039
let's say basic basic types so extension

00:06:14,339 --> 00:06:19,909
you XD ID is a class that contains you

00:06:17,039 --> 00:06:24,989
ID and did the descriptive name of it

00:06:19,909 --> 00:06:27,629
this is injected into X key which

00:06:24,989 --> 00:06:31,829
context of this XD ID and the type of

00:06:27,629 --> 00:06:36,229
the value that this this key is used for

00:06:31,829 --> 00:06:40,709
and the whole extension next map is

00:06:36,229 --> 00:06:43,619
let's say the map which enforces a rant

00:06:40,709 --> 00:06:46,079
on runtime type checking for the value

00:06:43,619 --> 00:06:51,599
based on the type that is presented in

00:06:46,079 --> 00:06:55,589
the key everything that is needed for

00:06:51,599 --> 00:06:59,039
for extensions is contained in a base

00:06:55,589 --> 00:07:02,939
class which contains common constants

00:06:59,039 --> 00:07:08,610
for all the extensions so there are in

00:07:02,939 --> 00:07:12,059
vogue keys which can be used for keys in

00:07:08,610 --> 00:07:15,239
the invoke methods there are basic

00:07:12,059 --> 00:07:18,179
invoke commands so if in the just plain

00:07:15,239 --> 00:07:21,209
extensions we have only free commands

00:07:18,179 --> 00:07:23,959
load which is used to loading the

00:07:21,209 --> 00:07:27,269
configuration and then the classes

00:07:23,959 --> 00:07:30,360
obvious tension initialize which is

00:07:27,269 --> 00:07:32,819
called next to initialize everything

00:07:30,360 --> 00:07:36,059
that extensions need and terminate which

00:07:32,819 --> 00:07:39,029
is called when the engine goes down or

00:07:36,059 --> 00:07:43,949
when you ask to terminate your extension

00:07:39,029 --> 00:07:48,109
and there is also invoke result which is

00:07:43,949 --> 00:07:53,609
some kind of special key because every

00:07:48,109 --> 00:07:56,179
every invoke method can have just three

00:07:53,609 --> 00:07:59,099
types of result either success or

00:07:56,179 --> 00:08:01,679
unsupported if this type of command is

00:07:59,099 --> 00:08:05,099
not supported by extension or failed and

00:08:01,679 --> 00:08:10,069
in this case you can get in the output

00:08:05,099 --> 00:08:12,820
math the reason why the operation fails

00:08:10,069 --> 00:08:18,700
as I said before

00:08:12,820 --> 00:08:22,510
the extension is or contains two type 2

00:08:18,700 --> 00:08:26,620
part the first past is a jar file which

00:08:22,510 --> 00:08:30,850
is placed into jboss module structure

00:08:26,620 --> 00:08:34,570
and this is just put into into engines

00:08:30,850 --> 00:08:37,150
tables modules cross paths and the

00:08:34,570 --> 00:08:40,360
configuration the configuration file

00:08:37,150 --> 00:08:43,630
which contains everything that is needed

00:08:40,360 --> 00:08:48,690
for the extension to be loaded into

00:08:43,630 --> 00:08:52,000
engine and used this configuration file

00:08:48,690 --> 00:08:55,090
should be placed under etc' over tangent

00:08:52,000 --> 00:08:58,270
extension d and this is the directory

00:08:55,090 --> 00:09:02,800
that is scanned and loaded for four new

00:08:58,270 --> 00:09:07,630
extensions how this configuration file

00:09:02,800 --> 00:09:10,930
looks like it's pretty simple we have a

00:09:07,630 --> 00:09:14,080
name here which is which identifies the

00:09:10,930 --> 00:09:17,620
name of the intention we have a loading

00:09:14,080 --> 00:09:20,290
method at the moment it's only a JBoss

00:09:17,620 --> 00:09:26,530
module but there might be more in the

00:09:20,290 --> 00:09:29,530
future we have the name of the module in

00:09:26,530 --> 00:09:32,440
the jboss module structure we have the

00:09:29,530 --> 00:09:38,020
class that this extension is implemented

00:09:32,440 --> 00:09:40,800
in and we have the API that this

00:09:38,020 --> 00:09:44,650
extension provides at this simple

00:09:40,800 --> 00:09:46,900
example it's just the extension so just

00:09:44,650 --> 00:09:52,600
the basic one with free commands and

00:09:46,900 --> 00:09:56,050
Teicher before so how does the startup

00:09:52,600 --> 00:09:58,660
process is going on so when engine is

00:09:56,050 --> 00:10:03,610
started up one of the first command is

00:09:58,660 --> 00:10:06,640
is the core from from to the engine

00:10:03,610 --> 00:10:10,350
extensions manager to initialize the

00:10:06,640 --> 00:10:14,340
extension so he just scan all the

00:10:10,350 --> 00:10:18,400
configuration directory so sorts this

00:10:14,340 --> 00:10:22,420
configuration file that he found and for

00:10:18,400 --> 00:10:26,200
each configuration file he tries to

00:10:22,420 --> 00:10:28,779
load the extension using low command if

00:10:26,200 --> 00:10:31,510
something bad happens he just throw an

00:10:28,779 --> 00:10:35,110
error that this extension cannot be

00:10:31,510 --> 00:10:38,800
loaded after that for our successfully

00:10:35,110 --> 00:10:42,070
loaded extension he called initialized

00:10:38,800 --> 00:10:44,680
command and also when something bad

00:10:42,070 --> 00:10:47,920
happened he gets an error that this

00:10:44,680 --> 00:10:51,699
extension cannot be initialized 1 this

00:10:47,920 --> 00:10:54,670
is done we have a list of successfully

00:10:51,699 --> 00:11:01,079
initialized extensions which can be used

00:10:54,670 --> 00:11:04,300
later to be to get access into the

00:11:01,079 --> 00:11:07,000
successfully initialized extension in

00:11:04,300 --> 00:11:10,990
engine we have extension manager class

00:11:07,000 --> 00:11:14,440
with swisscom how API for the engine to

00:11:10,990 --> 00:11:19,269
get the extensions and work for them so

00:11:14,440 --> 00:11:21,850
we have 4 i would say methods or

00:11:19,269 --> 00:11:24,850
important methods its get extension by

00:11:21,850 --> 00:11:29,130
service which you can say for example i

00:11:24,850 --> 00:11:34,360
want all extensions that supports a

00:11:29,130 --> 00:11:37,060
lager or n you can also get specific

00:11:34,360 --> 00:11:39,630
extension by its name you can get all

00:11:37,060 --> 00:11:43,390
loaded and initialized exception

00:11:39,630 --> 00:11:51,610
extensions or all extensions that we are

00:11:43,390 --> 00:11:55,810
able to find out when we when we get

00:11:51,610 --> 00:11:58,990
into the extension implementation it's

00:11:55,810 --> 00:12:01,959
set in the documentation that extension

00:11:58,990 --> 00:12:05,230
when the command is it work should not

00:12:01,959 --> 00:12:07,959
fire any exception at all everything

00:12:05,230 --> 00:12:12,569
should be handled inside the extension

00:12:07,959 --> 00:12:15,579
and put properly into the output map but

00:12:12,569 --> 00:12:20,160
we want to ensure that this is true so

00:12:15,579 --> 00:12:25,660
each loaded except extension is somehow

00:12:20,160 --> 00:12:29,360
covered with extension proxy which makes

00:12:25,660 --> 00:12:32,240
this real for engine so every time you

00:12:29,360 --> 00:12:35,930
in you execute invoke and the extension

00:12:32,240 --> 00:12:38,660
its invoked under this extension proxy

00:12:35,930 --> 00:12:42,649
class and this handles possible

00:12:38,660 --> 00:12:50,750
exception that can happen during this

00:12:42,649 --> 00:12:55,420
invoke come on so this is it it's pretty

00:12:50,750 --> 00:12:55,420
simple do you have some questions so far

00:12:57,790 --> 00:13:07,970
ok so if not I will go on and I will

00:13:02,240 --> 00:13:12,550
show you what extensions currently we

00:13:07,970 --> 00:13:15,920
have and what things we can do with them

00:13:12,550 --> 00:13:19,070
the first extension that that was

00:13:15,920 --> 00:13:24,860
implemented was the extension API for

00:13:19,070 --> 00:13:29,630
logging it's pretty simple it's used

00:13:24,860 --> 00:13:32,300
mainly you know to get logs produced by

00:13:29,630 --> 00:13:36,470
engine to be able to forward them to

00:13:32,300 --> 00:13:39,410
some kind of external logging

00:13:36,470 --> 00:13:43,010
infrastructure at the moment it's used

00:13:39,410 --> 00:13:48,339
mainly to get engine locks into sizzle

00:13:43,010 --> 00:13:53,089
of the demon in some other server so

00:13:48,339 --> 00:13:57,350
everything that is needed to create some

00:13:53,089 --> 00:14:02,260
more extensions for this for this logger

00:13:57,350 --> 00:14:05,000
API is stored in this logger class

00:14:02,260 --> 00:14:08,839
currently in this log r.i.p I we

00:14:05,000 --> 00:14:12,500
supports free commands so the publish

00:14:08,839 --> 00:14:16,120
the log record flash to log records if

00:14:12,500 --> 00:14:19,120
it's needed then close this logger

00:14:16,120 --> 00:14:19,120
extension

00:14:20,670 --> 00:14:29,100
at the moment we have one implementation

00:14:23,829 --> 00:14:35,170
of this logger API its logo log4j and

00:14:29,100 --> 00:14:40,120
it's just publishes the engine log-in

00:14:35,170 --> 00:14:42,790
records using log4j and that allow us to

00:14:40,120 --> 00:14:48,220
use all lock for j offenders that is

00:14:42,790 --> 00:14:50,680
available to pass this login record from

00:14:48,220 --> 00:14:54,370
over the engine and as I said it is

00:14:50,680 --> 00:15:00,069
primarily used to get logging records

00:14:54,370 --> 00:15:03,189
from engine to the syslog new moon I

00:15:00,069 --> 00:15:09,790
will try to show you some some sample

00:15:03,189 --> 00:15:12,459
code now so if we take a look at what is

00:15:09,790 --> 00:15:15,910
the extension it's pretty simple

00:15:12,459 --> 00:15:19,389
interface just as I suggest one invoke

00:15:15,910 --> 00:15:22,410
method input map output map nothing more

00:15:19,389 --> 00:15:28,389
so this is the only thing that your

00:15:22,410 --> 00:15:32,800
extension needs to implement if we take

00:15:28,389 --> 00:15:36,279
a look at this logger extension API so

00:15:32,800 --> 00:15:40,259
we know that we have the key log record

00:15:36,279 --> 00:15:43,769
which is the key which will contain the

00:15:40,259 --> 00:15:46,180
logging record it's the instance of

00:15:43,769 --> 00:15:50,290
java.util logging govori code class so

00:15:46,180 --> 00:15:53,980
we don't do anything special here and we

00:15:50,290 --> 00:15:58,209
have free commands that are implemented

00:15:53,980 --> 00:16:02,620
in this logging api so publish log

00:15:58,209 --> 00:16:06,459
record close the logging extension or

00:16:02,620 --> 00:16:10,509
flush the records if we take a look at

00:16:06,459 --> 00:16:14,980
actual implementation so this is the

00:16:10,509 --> 00:16:19,000
log4j implementation just implements the

00:16:14,980 --> 00:16:25,240
extension let's take a look at the

00:16:19,000 --> 00:16:27,430
invoke method so we just get from the

00:16:25,240 --> 00:16:32,620
input matt type of command if its load

00:16:27,430 --> 00:16:35,320
execute in it or publish

00:16:32,620 --> 00:16:37,780
currently 4 log4j we don't need to

00:16:35,320 --> 00:16:43,540
implement flash or close method because

00:16:37,780 --> 00:16:47,200
it's done automatically in log4j so if

00:16:43,540 --> 00:16:50,350
we take a look for example in load the

00:16:47,200 --> 00:16:55,030
only thing that is needed we just get

00:16:50,350 --> 00:16:57,850
the information that is contained in

00:16:55,030 --> 00:17:04,210
property files which is already loaded

00:16:57,850 --> 00:17:07,210
into our contact our config class and we

00:17:04,210 --> 00:17:10,330
just put it into this output map so

00:17:07,210 --> 00:17:13,030
extension manager will know what is this

00:17:10,330 --> 00:17:18,460
extension what it's very urgent license

00:17:13,030 --> 00:17:22,030
and so on to be able to identify it now

00:17:18,460 --> 00:17:25,000
if we so in it it's just not that

00:17:22,030 --> 00:17:29,020
interesting if we take a look into the

00:17:25,000 --> 00:17:32,800
publish it's pretty simple we just take

00:17:29,020 --> 00:17:36,630
the log record create new logging event

00:17:32,800 --> 00:17:41,160
in in lock for J for this we have to

00:17:36,630 --> 00:17:46,360
somehow map the log level from Java util

00:17:41,160 --> 00:17:49,420
logging API to block for japi and we put

00:17:46,360 --> 00:17:52,510
the message an exception if accepted and

00:17:49,420 --> 00:17:56,440
flush this everything to a lot for J

00:17:52,510 --> 00:18:01,540
which is already configured with its

00:17:56,440 --> 00:18:07,590
offenders so this is I would say pretty

00:18:01,540 --> 00:18:07,590
simple any question about the code

00:18:18,230 --> 00:18:26,300
yes just another extension

00:18:21,530 --> 00:18:29,930
yeah you can at any moment there can be

00:18:26,300 --> 00:18:32,870
any multiple invocations of this you

00:18:29,930 --> 00:18:35,590
know logging command there are no locks

00:18:32,870 --> 00:18:35,590
or something

00:18:38,510 --> 00:18:41,230
sorry

00:18:47,690 --> 00:18:57,900
now just take you know what 4j xml file

00:18:54,510 --> 00:19:01,920
that is discontinued at the extension

00:18:57,900 --> 00:19:04,770
and you just push everything according

00:19:01,920 --> 00:19:07,440
to this law for changes on our part so

00:19:04,770 --> 00:19:12,450
there are there are there is no you I

00:19:07,440 --> 00:19:15,810
have to continue it but tomorrow why did

00:19:12,450 --> 00:19:21,090
you choose the extension mark interface

00:19:15,810 --> 00:19:23,700
API well I could show you the standard

00:19:21,090 --> 00:19:28,760
API but there is no implementation so

00:19:23,700 --> 00:19:32,580
you know there is no implementation of

00:19:28,760 --> 00:19:36,450
extension you know the bar extension so

00:19:32,580 --> 00:19:38,670
this is the the simplest extension

00:19:36,450 --> 00:19:43,850
implementation we have I can show you

00:19:38,670 --> 00:19:43,850
the AAA but it's far more complex

00:19:47,170 --> 00:19:58,550
yeah currently the extension API is part

00:19:53,870 --> 00:20:00,760
of overt engine source code we hope that

00:19:58,550 --> 00:20:04,580
for next version we will split it in two

00:20:00,760 --> 00:20:08,570
separate packages so you if you try to

00:20:04,580 --> 00:20:10,790
introduce new API won't be needed to you

00:20:08,570 --> 00:20:17,000
know get it into engine code we will

00:20:10,790 --> 00:20:20,660
just create a new api specification and

00:20:17,000 --> 00:20:22,880
put it into your own package and using

00:20:20,660 --> 00:20:26,800
just this package you can create your

00:20:22,880 --> 00:20:26,800
own extension implementation

00:20:32,679 --> 00:20:36,059
for now difficult

00:20:39,450 --> 00:20:45,580
outside of the engine so for example

00:20:43,350 --> 00:20:47,380
like to actually will have it

00:20:45,580 --> 00:20:49,840
unfortunately go outside of the engine

00:20:47,380 --> 00:20:52,300
and running somewhere else how do people

00:20:49,840 --> 00:20:58,360
wouldn't be actually with current code

00:20:52,300 --> 00:21:02,050
ways to do it well currently we don't

00:20:58,360 --> 00:21:04,930
have any you know communication part to

00:21:02,050 --> 00:21:07,960
have engine running on one JVM and the

00:21:04,930 --> 00:21:10,060
extension on the other one so I can

00:21:07,960 --> 00:21:13,030
imagine at the simplest that you could

00:21:10,060 --> 00:21:15,520
introduce some communication extension

00:21:13,030 --> 00:21:18,760
which would you know just passes the

00:21:15,520 --> 00:21:22,480
commands from one JVM to dig another and

00:21:18,760 --> 00:21:25,180
on this another JVM you will just have

00:21:22,480 --> 00:21:26,890
implementation of or execute

00:21:25,180 --> 00:21:29,550
implementation of extension manager

00:21:26,890 --> 00:21:34,900
which will manage the extension on the

00:21:29,550 --> 00:21:38,590
only you know on the second JVM so this

00:21:34,900 --> 00:21:42,400
this can be done but at the moment we

00:21:38,590 --> 00:21:48,070
just suspect that all the extensions run

00:21:42,400 --> 00:21:50,620
on the same jvms engine but i don't

00:21:48,070 --> 00:21:54,640
think i don't see there you know really

00:21:50,620 --> 00:21:58,440
big issues to to expand this using just

00:21:54,640 --> 00:21:58,440
some kind of communication extension

00:22:00,780 --> 00:22:05,930
so if there are no other questions I

00:22:03,180 --> 00:22:09,780
will continue with the presentation and

00:22:05,930 --> 00:22:16,920
we will take a look at the AAA extension

00:22:09,780 --> 00:22:19,140
API so as I said before the AAA consists

00:22:16,920 --> 00:22:22,670
of authentication authorization and

00:22:19,140 --> 00:22:26,940
accounting for each of this part we have

00:22:22,670 --> 00:22:33,090
special API so for authentications we

00:22:26,940 --> 00:22:35,480
have Al's an which is used to verify the

00:22:33,090 --> 00:22:39,120
user that's trying to access the system

00:22:35,480 --> 00:22:42,210
at the moment we are we support either

00:22:39,120 --> 00:22:46,770
username password verification or we

00:22:42,210 --> 00:22:50,760
support negotiation the output of this

00:22:46,770 --> 00:22:54,660
extension is authentication record which

00:22:50,760 --> 00:22:58,650
you know contains the principle of this

00:22:54,660 --> 00:23:01,020
verified user and it also contains some

00:22:58,650 --> 00:23:07,260
kind of time integral which tells the

00:23:01,020 --> 00:23:12,090
engine after how long this this this

00:23:07,260 --> 00:23:17,430
interval is is passed and and the

00:23:12,090 --> 00:23:20,220
records are no longer valid another part

00:23:17,430 --> 00:23:28,080
of this API is authorization we called

00:23:20,220 --> 00:23:31,590
out Z it's so used to provide details

00:23:28,080 --> 00:23:35,670
about the user so at the moment you you

00:23:31,590 --> 00:23:38,690
can get using this API user information

00:23:35,670 --> 00:23:42,890
that West first name last name email

00:23:38,690 --> 00:23:46,740
whatever that is configured you can use

00:23:42,890 --> 00:23:51,500
you can get all the groups and even

00:23:46,740 --> 00:23:51,500
nested groups that user is part of and

00:23:52,130 --> 00:23:58,650
so as I said the input is the this

00:23:55,670 --> 00:24:00,590
principle record the output is this

00:23:58,650 --> 00:24:05,660
authentication record with all

00:24:00,590 --> 00:24:12,300
additional records the first part is

00:24:05,660 --> 00:24:13,070
accounting AK acct at the moment we get

00:24:12,300 --> 00:24:17,230
some

00:24:13,070 --> 00:24:20,750
basic basic informations about

00:24:17,230 --> 00:24:24,019
successful unsuccessful login login time

00:24:20,750 --> 00:24:26,779
logout time and so on in future we will

00:24:24,019 --> 00:24:29,840
hope to extend this to the fully

00:24:26,779 --> 00:24:31,789
auditing capabilities of this so at the

00:24:29,840 --> 00:24:36,590
moment it's i would say at the basic

00:24:31,789 --> 00:24:41,630
level that we currently have another

00:24:36,590 --> 00:24:46,509
part of this a api is scope mapping it's

00:24:41,630 --> 00:24:51,080
used for for a very special you know

00:24:46,509 --> 00:24:55,250
username or login name information to

00:24:51,080 --> 00:25:00,679
transforming them for the format that we

00:24:55,250 --> 00:25:05,299
need for example if you log in with you

00:25:00,679 --> 00:25:11,090
know the windows style like domain under

00:25:05,299 --> 00:25:13,460
domain pick the username it will you

00:25:11,090 --> 00:25:17,259
know separate domain name and the

00:25:13,460 --> 00:25:21,500
username so we can use it just for

00:25:17,259 --> 00:25:24,799
logging the username as we need we also

00:25:21,500 --> 00:25:26,690
using it from removing the carrboro

00:25:24,799 --> 00:25:32,720
suffix and so on it's pretty

00:25:26,690 --> 00:25:38,899
configurable not much to say and the

00:25:32,720 --> 00:25:41,690
last part of the a is filters it's let's

00:25:38,899 --> 00:25:44,929
say it's not really part of the API but

00:25:41,690 --> 00:25:49,039
it's it's part of the engine which

00:25:44,929 --> 00:25:53,690
somehow is needed for the AAPI to work

00:25:49,039 --> 00:25:57,350
so at the basic its consist of the

00:25:53,690 --> 00:26:01,879
filters which process you know the input

00:25:57,350 --> 00:26:04,389
result either get from from UI web admin

00:26:01,879 --> 00:26:11,090
or use the portal or from rest api and

00:26:04,389 --> 00:26:15,460
tries to get this request authenticated

00:26:11,090 --> 00:26:17,929
authorized and so on so it's there

00:26:15,460 --> 00:26:22,400
currently at the moment as I said we

00:26:17,929 --> 00:26:26,360
support basic authentications we support

00:26:22,400 --> 00:26:33,380
kerberos negotiations and we uses those

00:26:26,360 --> 00:26:38,060
filters also for session management so

00:26:33,380 --> 00:26:40,250
this is all of this is part of a API and

00:26:38,060 --> 00:26:45,380
the moment we have several

00:26:40,250 --> 00:26:51,770
implementations of these a AP I the

00:26:45,380 --> 00:26:55,780
first one is internal it's it was part

00:26:51,770 --> 00:27:00,410
of the engine before you know the a

00:26:55,780 --> 00:27:03,650
extension transformation we just get

00:27:00,410 --> 00:27:06,980
this internal to be proper extension so

00:27:03,650 --> 00:27:09,550
we can use it it the only thing that it

00:27:06,980 --> 00:27:14,390
provides it provides just the one user

00:27:09,550 --> 00:27:17,570
with configurable password and nothing

00:27:14,390 --> 00:27:19,640
more so it's pretty simple but that's

00:27:17,570 --> 00:27:22,880
what we need at least for the very

00:27:19,640 --> 00:27:24,590
minimal installation of engine so after

00:27:22,880 --> 00:27:27,950
installation we have at least one user

00:27:24,590 --> 00:27:32,120
that is able to login into engine and do

00:27:27,950 --> 00:27:34,700
something more the second extension we

00:27:32,120 --> 00:27:38,600
have and now we call it legacy its car

00:27:34,700 --> 00:27:41,480
bello sai da p it's the whole code that

00:27:38,600 --> 00:27:44,600
i talked about was in 3 dot 4 and

00:27:41,480 --> 00:27:46,910
earlier that we want to get rid of but

00:27:44,600 --> 00:27:50,660
we need to support upgrades so we

00:27:46,910 --> 00:27:56,240
somehow covered this old API into proper

00:27:50,660 --> 00:27:59,380
extension and currently at the next or

00:27:56,240 --> 00:28:03,200
the incoming version field at six it's

00:27:59,380 --> 00:28:05,480
deprecated and all users that are

00:28:03,200 --> 00:28:09,320
currently still using it should migrate

00:28:05,480 --> 00:28:11,770
to the new Ald AP which i'll be talking

00:28:09,320 --> 00:28:11,770
next

00:28:13,370 --> 00:28:21,650
so these two were old now the new

00:28:18,470 --> 00:28:25,730
extensions for philly at five introduced

00:28:21,650 --> 00:28:31,610
a a a lv AP extension it's a complete

00:28:25,730 --> 00:28:34,940
rewrite of extension to get to provide

00:28:31,610 --> 00:28:38,570
us users and groups from aldi AP server

00:28:34,940 --> 00:28:42,830
it doesn't use kerberos finally it just

00:28:38,570 --> 00:28:47,090
used blind LD AP it's fully configurable

00:28:42,830 --> 00:28:50,990
using simple text property files so if

00:28:47,090 --> 00:28:55,160
we won't support some kind of new LD AP

00:28:50,990 --> 00:28:57,559
server or some very special customer

00:28:55,160 --> 00:28:59,750
base structure of the records in the

00:28:57,559 --> 00:29:02,330
early ap server everything can be

00:28:59,750 --> 00:29:07,809
configured using just txt file no more

00:29:02,330 --> 00:29:12,880
coding it also is very optimized it

00:29:07,809 --> 00:29:15,740
supports us some things like SSL or TLS

00:29:12,880 --> 00:29:19,309
authentication we can have pool of

00:29:15,740 --> 00:29:23,510
connection to al dat server and two more

00:29:19,309 --> 00:29:26,960
and more so every users that use the RDA

00:29:23,510 --> 00:29:32,300
p over before is advised to migrate its

00:29:26,960 --> 00:29:36,380
configuration into a a LD ap the other

00:29:32,300 --> 00:29:40,820
extension is what we have is a Miss it's

00:29:36,380 --> 00:29:45,820
kinda i would say utilities utilities

00:29:40,820 --> 00:29:50,059
extension that allow us especially to

00:29:45,820 --> 00:29:53,570
use kerberos authentication for our

00:29:50,059 --> 00:29:56,510
users because when overt is deployed

00:29:53,570 --> 00:29:59,410
behind the apache server the apache

00:29:56,510 --> 00:30:03,559
server can be configured using mod alpha

00:29:59,410 --> 00:30:08,000
care and when the user is authenticated

00:30:03,559 --> 00:30:11,960
to apache using Kerberos this module

00:30:08,000 --> 00:30:16,160
just passed this negotiation information

00:30:11,960 --> 00:30:18,860
into a a mist and we are able to get

00:30:16,160 --> 00:30:22,960
this authenticated user no need to

00:30:18,860 --> 00:30:22,960
prompt for username or whatever

00:30:23,260 --> 00:30:32,170
and the last implementation is a jdbc

00:30:28,960 --> 00:30:37,150
it's introduced in the upcoming version

00:30:32,170 --> 00:30:39,940
filtered 6 and it's just do the same

00:30:37,150 --> 00:30:42,130
thing as a LD ap just the users and

00:30:39,940 --> 00:30:46,900
groups are stored in a relational

00:30:42,130 --> 00:30:49,330
database in this new free texts version

00:30:46,900 --> 00:30:53,350
we will install this extension as

00:30:49,330 --> 00:30:57,880
default so we will have when you install

00:30:53,350 --> 00:31:00,640
/ 306 you will have installed a JDBC so

00:30:57,880 --> 00:31:03,490
you don't no longer need any rd ap or

00:31:00,640 --> 00:31:07,390
external server if you wish all your

00:31:03,490 --> 00:31:10,930
users can be defined in the same

00:31:07,390 --> 00:31:14,200
database as overt and you can manage

00:31:10,930 --> 00:31:17,320
those users using command line tool with

00:31:14,200 --> 00:31:20,920
all capabilities that it needs so you

00:31:17,320 --> 00:31:24,160
can create user you can edit user change

00:31:20,920 --> 00:31:27,610
the password you can create edit groups

00:31:24,160 --> 00:31:30,790
added groups into other groups using

00:31:27,610 --> 00:31:35,560
nesting ad groups to users provides

00:31:30,790 --> 00:31:43,570
every information about those pictures

00:31:35,560 --> 00:31:46,000
that we need so these are current

00:31:43,570 --> 00:31:49,360
existing extensions do you have any

00:31:46,000 --> 00:31:51,630
questions about them our extension is

00:31:49,360 --> 00:31:51,630
being

00:31:52,380 --> 00:32:04,360
if I can put an extension it's worse

00:31:58,140 --> 00:32:07,030
yeah because when you want to upload the

00:32:04,360 --> 00:32:10,480
extension to the engine you need access

00:32:07,030 --> 00:32:14,740
to the you know the server and you need

00:32:10,480 --> 00:32:17,200
to have the rights to restart engine

00:32:14,740 --> 00:32:21,430
service or upload the files and proper

00:32:17,200 --> 00:32:25,570
at the proper places so when you are

00:32:21,430 --> 00:32:28,120
able to do this you can inject any

00:32:25,570 --> 00:32:35,110
extensions you want that is you know I

00:32:28,120 --> 00:32:37,720
don't see any any any good in have some

00:32:35,110 --> 00:32:39,880
kind of other authentication that okay

00:32:37,720 --> 00:32:44,610
this is the extension and it can be used

00:32:39,880 --> 00:32:44,610
only for some specific task

00:32:52,210 --> 00:33:00,520
no more questions okay so the last part

00:32:55,630 --> 00:33:07,480
is engine extension tools at the moment

00:33:00,520 --> 00:33:13,900
we have we have the tool that enables us

00:33:07,480 --> 00:33:16,900
you know to or in free dot fire version

00:33:13,900 --> 00:33:19,420
the only thing how cunha can you find

00:33:16,900 --> 00:33:21,670
out what extensions are installed would

00:33:19,420 --> 00:33:25,270
they provide where they are located you

00:33:21,670 --> 00:33:28,030
just get to the proper directories take

00:33:25,270 --> 00:33:30,160
a look at these configuration files edit

00:33:28,030 --> 00:33:33,430
them and find out what's in what's in

00:33:30,160 --> 00:33:36,490
them in three dot six we introduce this

00:33:33,430 --> 00:33:39,550
over text engine tool which has the

00:33:36,490 --> 00:33:43,320
ability to list extensions show the

00:33:39,550 --> 00:33:45,730
configuration showed what their

00:33:43,320 --> 00:33:50,800
implementation where are the files

00:33:45,730 --> 00:33:54,100
placed and it also has very important

00:33:50,800 --> 00:33:57,430
things for developers you can test your

00:33:54,100 --> 00:34:00,640
API or you can call API or the

00:33:57,430 --> 00:34:03,040
extensions outside the running engine so

00:34:00,640 --> 00:34:07,170
for example you have running instant of

00:34:03,040 --> 00:34:11,500
the engine and you want to add another a

00:34:07,170 --> 00:34:14,800
a provider for example for a new LG AP

00:34:11,500 --> 00:34:16,540
server and so will configure it but you

00:34:14,800 --> 00:34:18,880
are not sure if everything's worked and

00:34:16,540 --> 00:34:22,060
you don't want to restart the engine so

00:34:18,880 --> 00:34:25,060
it will be visible to use it before you

00:34:22,060 --> 00:34:28,210
actually validate that it works so using

00:34:25,060 --> 00:34:32,380
this tool you can just put you know the

00:34:28,210 --> 00:34:34,570
property files to proper places execute

00:34:32,380 --> 00:34:37,140
this tool and for example you can test

00:34:34,570 --> 00:34:44,080
if the your user is able to authenticate

00:34:37,140 --> 00:34:48,370
you can test what what groups are in

00:34:44,080 --> 00:34:50,590
this user so whole API that is provided

00:34:48,370 --> 00:34:54,190
by the extension can be tested in this

00:34:50,590 --> 00:34:57,730
tool for example for log and extension

00:34:54,190 --> 00:35:00,400
you can test if your login info is

00:34:57,730 --> 00:35:02,860
really get screwed to the final

00:35:00,400 --> 00:35:05,100
destination that you wants to

00:35:02,860 --> 00:35:05,100
Judas

00:35:08,380 --> 00:35:18,160
so this is this is to any questions

00:35:11,860 --> 00:35:22,420
about the tool if not let's take a look

00:35:18,160 --> 00:35:26,160
at future plans for the future we would

00:35:22,420 --> 00:35:32,410
like to create extension which will

00:35:26,160 --> 00:35:35,470
connects over to sssd implementation at

00:35:32,410 --> 00:35:38,820
the moment we are not able to do this

00:35:35,470 --> 00:35:42,430
because it current SS the implementation

00:35:38,820 --> 00:35:45,370
relax a few things that we need to be

00:35:42,430 --> 00:35:48,820
able to support it but once sssd

00:35:45,370 --> 00:35:52,840
developers finishes their implementation

00:35:48,820 --> 00:35:57,610
we will be glad to to have this

00:35:52,840 --> 00:36:00,670
extension what is really plant and what

00:35:57,610 --> 00:36:04,060
is I would say almost finished is single

00:36:00,670 --> 00:36:07,000
sign-on service for over we want to get

00:36:04,060 --> 00:36:10,570
this into three da six unfortunately we

00:36:07,000 --> 00:36:14,140
didn't make it so its plant to be in the

00:36:10,570 --> 00:36:18,040
next release and it will allow us to do

00:36:14,140 --> 00:36:22,120
the proper single sign-on for all parts

00:36:18,040 --> 00:36:24,250
of overt infrastructure so you can use

00:36:22,120 --> 00:36:27,490
single sign-on for logging to user

00:36:24,250 --> 00:36:31,360
portal to logging to web admin portal

00:36:27,490 --> 00:36:35,650
login to rest api and also accessing the

00:36:31,360 --> 00:36:41,230
reports and and dwh API using this

00:36:35,650 --> 00:36:46,060
single sign-on and at the moment over 30

00:36:41,230 --> 00:36:48,940
sixes i'm coming in very few weeks and

00:36:46,060 --> 00:36:52,330
we are currently discussing what other

00:36:48,940 --> 00:36:56,100
parts of api we could expose or what

00:36:52,330 --> 00:36:59,950
other extensions we could create so

00:36:56,100 --> 00:37:03,130
mature but hopefully and let's say a few

00:36:59,950 --> 00:37:06,670
years every the monolithic engine will

00:37:03,130 --> 00:37:09,730
be splitted into many extension path

00:37:06,670 --> 00:37:12,580
which will communicate using API and it

00:37:09,730 --> 00:37:13,690
would be much easier for new developers

00:37:12,580 --> 00:37:19,330
to get in

00:37:13,690 --> 00:37:21,780
and started to cooperate with us any

00:37:19,330 --> 00:37:21,780
questions

00:37:27,559 --> 00:37:37,839
if not thanks for your time hahahaha wah

00:37:33,170 --> 00:37:37,839

YouTube URL: https://www.youtube.com/watch?v=9b9WVFsy_yg


