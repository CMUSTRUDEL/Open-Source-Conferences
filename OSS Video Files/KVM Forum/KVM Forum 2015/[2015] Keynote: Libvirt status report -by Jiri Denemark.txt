Title: [2015] Keynote: Libvirt status report -by Jiri Denemark
Publication date: 2015-09-08
Playlist: KVM Forum 2015
Description: 
	JiÅ™i Denemark
Red Hat
Jiri joined Red Hat to help maintain Xen in Red Hat Enterprise Linux 6 years ago. After one year he moved to the libvirt team at Red Hat where he works as a Senior Software Engineer and maintainer of libvirt packages.

Slides: https://drive.google.com/open?id=0BzyAwvVlQckeT2NaM2ZrRFRhR1E
Captions: 
	00:00:15,410 --> 00:00:21,869
so good morning everyone my name is

00:00:18,720 --> 00:00:25,410
Susie dramatic and I'm one of the core

00:00:21,869 --> 00:00:27,090
liver developers and the maintainer of

00:00:25,410 --> 00:00:31,920
flavored packages in Red Hat Enterprise

00:00:27,090 --> 00:00:33,890
Linux and in this last keynote I'm going

00:00:31,920 --> 00:00:40,739
to present you a status report of

00:00:33,890 --> 00:00:44,820
libvirt during the last year so as you

00:00:40,739 --> 00:00:46,829
can see we had fewer commits it seems

00:00:44,820 --> 00:00:50,070
the last kvm forum then we had the year

00:00:46,829 --> 00:00:53,670
before but that's mostly because it's

00:00:50,070 --> 00:00:58,289
only 10 months since the kvm forum in

00:00:53,670 --> 00:01:01,920
diesel Dorf if we divided by the number

00:00:58,289 --> 00:01:05,100
of months we are still at about what at

00:01:01,920 --> 00:01:11,880
about 250 commits per month so it's

00:01:05,100 --> 00:01:15,299
roughly the same we had 108 contributors

00:01:11,880 --> 00:01:18,270
and 46 of them were first-time

00:01:15,299 --> 00:01:24,140
contributors who never sent any patches

00:01:18,270 --> 00:01:28,409
delivered before so that's a good sign

00:01:24,140 --> 00:01:32,790
and when we group comets according to

00:01:28,409 --> 00:01:34,799
company they're out of work with we can

00:01:32,790 --> 00:01:38,100
see that the vast majority of comets

00:01:34,799 --> 00:01:44,100
come from red hair developers which is

00:01:38,100 --> 00:01:47,100
it's about 75% and it's not a big

00:01:44,100 --> 00:01:52,259
surprise especially giving that the top

00:01:47,100 --> 00:01:56,969
three developers made about thirty four

00:01:52,259 --> 00:01:59,759
percent of all comets in levert and I

00:01:56,969 --> 00:02:02,430
would like to thank to these three

00:01:59,759 --> 00:02:04,710
developers and they are namely Peter

00:02:02,430 --> 00:02:08,270
grandpa John Farrell on and we help

00:02:04,710 --> 00:02:08,270
ribbeting so big thanks to them

00:02:13,319 --> 00:02:19,209
we also had quite a lot of contributions

00:02:16,930 --> 00:02:23,590
from individuals who don't really work

00:02:19,209 --> 00:02:28,000
for any company they made about seven

00:02:23,590 --> 00:02:30,450
percent of all comments and then the

00:02:28,000 --> 00:02:34,840
other big contributors were a Suzy and

00:02:30,450 --> 00:02:39,579
virtuous or developers virtue is or it

00:02:34,840 --> 00:02:45,310
actually is a big jumper in in this

00:02:39,579 --> 00:02:47,500
field the year before they made about I

00:02:45,310 --> 00:02:53,230
think 17 comments or something like that

00:02:47,500 --> 00:02:57,640
and this year it's 10 times more so the

00:02:53,230 --> 00:03:02,170
virtue as a driver got some really good

00:02:57,640 --> 00:03:04,959
traction so let's look at the most

00:03:02,170 --> 00:03:07,780
active areas in levert during the last

00:03:04,959 --> 00:03:11,079
year naturally most of the changes

00:03:07,780 --> 00:03:15,430
touched the shared code infrastructure

00:03:11,079 --> 00:03:20,260
such as utility functions and storage

00:03:15,430 --> 00:03:26,620
drivers security drivers and other staff

00:03:20,260 --> 00:03:30,099
and among the hypervisor drivers the

00:03:26,620 --> 00:03:35,190
most active one was key mu which is also

00:03:30,099 --> 00:03:35,190
one of the reasons while libvirt

00:03:35,400 --> 00:03:43,079
developers are invited to talk at

00:03:39,010 --> 00:03:47,650
acadian forum so the second most active

00:03:43,079 --> 00:03:50,669
hypervisor rose e VZ driver which is

00:03:47,650 --> 00:03:54,160
done mostly by a virtuoso developers and

00:03:50,669 --> 00:03:57,400
if the name doesn't sound familiar to

00:03:54,160 --> 00:03:59,230
you it was called parallels the year

00:03:57,400 --> 00:04:02,319
before so they change the name of the

00:03:59,230 --> 00:04:06,209
driver but otherwise it's it's not

00:04:02,319 --> 00:04:06,209
really visible to the users

00:04:07,549 --> 00:04:19,590
and yet qe driver got about fifty

00:04:13,439 --> 00:04:22,289
percent of all changes so some of the

00:04:19,590 --> 00:04:27,330
most interesting new features in here me

00:04:22,289 --> 00:04:30,750
driver first one is memorial plaque some

00:04:27,330 --> 00:04:35,460
liberal supports changing guests memory

00:04:30,750 --> 00:04:39,539
for quite a long time already but that's

00:04:35,460 --> 00:04:43,139
the way is called memory ballooning and

00:04:39,539 --> 00:04:45,720
it has a lot of disadvantages first the

00:04:43,139 --> 00:04:48,360
domain starts with the full memory and

00:04:45,720 --> 00:04:49,979
then we can ask to the one or the guest

00:04:48,360 --> 00:04:55,830
operating system to written some memory

00:04:49,979 --> 00:04:57,960
back so it's you can't really start a

00:04:55,830 --> 00:05:00,060
lot of big domains at the same time if

00:04:57,960 --> 00:05:02,190
you are going to over commit to memory

00:05:00,060 --> 00:05:07,229
because they were just don't fit there

00:05:02,190 --> 00:05:08,970
you need to start one wait wait until it

00:05:07,229 --> 00:05:12,630
returns some memory and then we need to

00:05:08,970 --> 00:05:16,080
start another one and so far on the

00:05:12,630 --> 00:05:18,870
other hand Memorial Park works like in a

00:05:16,080 --> 00:05:25,380
real Hardware you basically define a

00:05:18,870 --> 00:05:29,460
demand you tell it that it has several

00:05:25,380 --> 00:05:32,099
free memory slots and how much memory in

00:05:29,460 --> 00:05:34,740
total can be put in these memory slots

00:05:32,099 --> 00:05:37,530
and then you start the mind with some

00:05:34,740 --> 00:05:39,659
minimum amount of memory and any time

00:05:37,530 --> 00:05:42,389
you want you can just insert new memory

00:05:39,659 --> 00:05:44,849
module in any of the free slots or you

00:05:42,389 --> 00:05:51,659
can remove some modules from the slots

00:05:44,849 --> 00:05:55,470
the tour guide so it really works like a

00:05:51,659 --> 00:06:00,090
real hardware so it doesn't doesn't need

00:05:55,470 --> 00:06:02,729
any special drivers inside the u.s. it

00:06:00,090 --> 00:06:05,539
only needs to be supported by the

00:06:02,729 --> 00:06:05,539
operating system itself

00:06:05,569 --> 00:06:12,339
and another disadvantage of memory

00:06:10,219 --> 00:06:15,409
bombing is that you can't really say

00:06:12,339 --> 00:06:17,839
where the memory that is going to be

00:06:15,409 --> 00:06:21,619
returned comes from which Numa node for

00:06:17,839 --> 00:06:25,509
example while with the memory roadblock

00:06:21,619 --> 00:06:29,119
you can specify in which in one owed a

00:06:25,509 --> 00:06:30,979
new memory module should be attached and

00:06:29,119 --> 00:06:32,869
when you are removing it.you are

00:06:30,979 --> 00:06:40,369
naturally removing it from that Numa

00:06:32,869 --> 00:06:42,139
node where it was a touch before so

00:06:40,369 --> 00:06:45,349
another interesting feature is I will

00:06:42,139 --> 00:06:48,649
threats we already implemented basic io

00:06:45,349 --> 00:06:53,240
thread support before the last kvm forum

00:06:48,649 --> 00:06:59,899
but during the previous here we improved

00:06:53,240 --> 00:07:05,719
support for our threats all threads are

00:06:59,899 --> 00:07:07,490
basically data plane in q mu and I think

00:07:05,719 --> 00:07:12,229
Stefan was talking about it last year in

00:07:07,490 --> 00:07:14,499
these lurve and currently it's supported

00:07:12,229 --> 00:07:19,330
only by a verte i'll block but

00:07:14,499 --> 00:07:23,300
vertically support is hopefully coming

00:07:19,330 --> 00:07:25,550
it's currently in development so what

00:07:23,300 --> 00:07:29,899
what r io threads there are dedicated

00:07:25,550 --> 00:07:35,479
threads for processing I all coming from

00:07:29,899 --> 00:07:37,399
this individual machines and you can

00:07:35,479 --> 00:07:39,829
either specify how many other threads

00:07:37,399 --> 00:07:42,680
you want to have when the domain is

00:07:39,829 --> 00:07:47,599
started or you can even hook block the

00:07:42,680 --> 00:07:50,990
aisle threats and then you can pin these

00:07:47,599 --> 00:07:56,149
all threads separately from the cpu

00:07:50,990 --> 00:08:02,360
threats to host cpus and you can also

00:07:56,149 --> 00:08:05,599
attach individual disks to individual

00:08:02,360 --> 00:08:09,199
all threads so you can have dedicated

00:08:05,599 --> 00:08:14,360
hosi bhi use to just process I all from

00:08:09,199 --> 00:08:15,230
some critical disk Tony's can bring up

00:08:14,360 --> 00:08:17,950
some

00:08:15,230 --> 00:08:28,430
some performance improvements especially

00:08:17,950 --> 00:08:30,440
with multiprocessor set up so last big

00:08:28,430 --> 00:08:34,669
new feature I'm going to talk about our

00:08:30,440 --> 00:08:39,140
migration events finally thanks to who

00:08:34,669 --> 00:08:43,550
I'm congela from GMU 24 we have support

00:08:39,140 --> 00:08:46,220
for migration events in Liberty the

00:08:43,550 --> 00:08:50,150
support was released about a month

00:08:46,220 --> 00:08:54,590
before qe2 for because we we were making

00:08:50,150 --> 00:08:57,670
the purchase synchronously and why are

00:08:54,590 --> 00:09:00,710
we so excited about migration events

00:08:57,670 --> 00:09:05,690
it's because traditional libvirt used

00:09:00,710 --> 00:09:08,810
bowling and it pulled every 50

00:09:05,690 --> 00:09:12,430
milliseconds for migration status which

00:09:08,810 --> 00:09:15,110
naturally brings a lot of overhead and

00:09:12,430 --> 00:09:20,000
the overhead conveyor and see if you

00:09:15,110 --> 00:09:22,700
turned on debug messages because while

00:09:20,000 --> 00:09:28,640
you were migrating single machines the

00:09:22,700 --> 00:09:31,850
debug look really good lot lots of

00:09:28,640 --> 00:09:34,490
messages like every 50 milliseconds

00:09:31,850 --> 00:09:37,880
there were several messages about asking

00:09:34,490 --> 00:09:43,220
Camille processing you reply and so on

00:09:37,880 --> 00:09:46,520
and of course since we are pulling every

00:09:43,220 --> 00:09:48,890
50 milliseconds so if the migration

00:09:46,520 --> 00:09:51,500
finished or failed at the beginning of

00:09:48,890 --> 00:09:53,990
that interval we waited the rest of the

00:09:51,500 --> 00:09:58,190
interval until we noticed that something

00:09:53,990 --> 00:10:00,050
happened so with migration events we

00:09:58,190 --> 00:10:03,440
don't need to Paul we just wait until

00:10:00,050 --> 00:10:07,510
EMS ends an event that migration state

00:10:03,440 --> 00:10:12,279
changed and then we handle it

00:10:07,510 --> 00:10:18,110
appropriately so

00:10:12,279 --> 00:10:20,320
since the last liberally Stevie the

00:10:18,110 --> 00:10:24,589
migration is completely event-driven

00:10:20,320 --> 00:10:27,710
including storage migration and stuff

00:10:24,589 --> 00:10:29,660
like connection status changes if you

00:10:27,710 --> 00:10:31,399
are doing teatro pier migration so if

00:10:29,660 --> 00:10:34,520
the connection between the two early

00:10:31,399 --> 00:10:42,190
birds demons is dropped we immediately

00:10:34,520 --> 00:10:45,320
notice that and cancel migration so

00:10:42,190 --> 00:10:48,860
other improvements in Cuba driver are

00:10:45,320 --> 00:10:51,589
for example done in a NUMA area there

00:10:48,860 --> 00:10:53,930
were a lot of cleanups and fixes in this

00:10:51,589 --> 00:10:58,430
areas for example we had some

00:10:53,930 --> 00:11:00,320
compatibility issues with old qmu or we

00:10:58,430 --> 00:11:02,920
couldn't migrate from new one to the old

00:11:00,320 --> 00:11:09,709
one because it isn't supported the new

00:11:02,920 --> 00:11:13,430
new interfaces so we fixed that and the

00:11:09,709 --> 00:11:16,580
work now supports a arc 64 and Power

00:11:13,430 --> 00:11:19,520
Architecture even better than before but

00:11:16,580 --> 00:11:23,839
it's still not perfect but we are

00:11:19,520 --> 00:11:27,440
working on that and we have dedicated in

00:11:23,839 --> 00:11:30,709
developers work just on power for

00:11:27,440 --> 00:11:33,200
example in delivered and also in KML so

00:11:30,709 --> 00:11:37,180
we are working on that in a cooperation

00:11:33,200 --> 00:11:40,670
with GME developers he also added

00:11:37,180 --> 00:11:42,740
several guests facing a P is for stuff

00:11:40,670 --> 00:11:45,709
like changing passwords in the guest

00:11:42,740 --> 00:11:48,130
operating systems listing surmounted

00:11:45,709 --> 00:11:51,800
file systems and stuff like that and

00:11:48,130 --> 00:11:56,329
this is naturally done using eq August

00:11:51,800 --> 00:12:01,399
agent so it's

00:11:56,329 --> 00:12:04,549
let's it about GMU and to name the most

00:12:01,399 --> 00:12:08,389
interesting changes in like generic

00:12:04,549 --> 00:12:12,049
levert I think I need to mention admin

00:12:08,389 --> 00:12:16,459
API and continuous integration admin a

00:12:12,049 --> 00:12:19,040
p.i is a big thing because so far you

00:12:16,459 --> 00:12:21,350
had to restart Liberty if you wanted to

00:12:19,040 --> 00:12:23,720
change the level of messages that are

00:12:21,350 --> 00:12:26,540
going to be locked or a number of

00:12:23,720 --> 00:12:29,989
clients that can connect to running

00:12:26,540 --> 00:12:34,009
Liberty with admit I you will be able to

00:12:29,989 --> 00:12:36,980
do this while liberating is running we

00:12:34,009 --> 00:12:41,540
are not there yet we have given you for

00:12:36,980 --> 00:12:44,089
structure in place and one of our google

00:12:41,540 --> 00:12:46,489
Summer of Code students mentored by

00:12:44,089 --> 00:12:49,339
Michael Provo sneak is working on

00:12:46,489 --> 00:12:52,249
implementing the individual IP is that

00:12:49,339 --> 00:12:54,889
would allow you to change this

00:12:52,249 --> 00:12:57,369
configuration and is also working on a

00:12:54,889 --> 00:13:00,019
client similar to reverse that

00:12:57,369 --> 00:13:03,129
administrators can use to actually

00:13:00,019 --> 00:13:10,549
change the settings in running liberty

00:13:03,129 --> 00:13:13,360
and on CI Santos org we started to

00:13:10,549 --> 00:13:18,919
Jenkins instance that is periodically

00:13:13,360 --> 00:13:24,799
trying to build current get the purpose

00:13:18,919 --> 00:13:28,970
of the snapshot of rebirth and we are

00:13:24,799 --> 00:13:33,049
going to integrate it with avocado so we

00:13:28,970 --> 00:13:35,720
don't only in addition to checking if

00:13:33,049 --> 00:13:38,749
delivered actually builds we will also

00:13:35,720 --> 00:13:41,259
check that it works which is the

00:13:38,749 --> 00:13:41,259
important thing

00:13:42,390 --> 00:13:49,080
so thank you for our attention and enjoy

00:13:46,290 --> 00:13:52,760
the last day of kvm forum here in

00:13:49,080 --> 00:13:52,760

YouTube URL: https://www.youtube.com/watch?v=zjy0rehZmC0


