Title: [2015] Real-Time KVM for the Masses by Jan Kiszka
Publication date: 2015-08-25
Playlist: KVM Forum 2015
Description: 
	There are more and more reasons to improve KVM for hosting guests with real-time requirements, like migrating existing RT systems or virtualizing network functions. Many low-level optimizations have been done already. What is missing yet is integration with a complete management stack so that users do not have to tune every detail themselves. In this talk, we will present concepts and first results of an ongoing project to enable a stack of Preempt-RT Linux, QEMU/KVM, libvirt and OpenStack for RT CPU and network virtualization. Derived from a generic use case, we will describe UI extensions and changes to other OpenStack services. We will look into new tasks of libvirt when applying real-time on the computing nodes. We will describe the integration with QEMU/KVM and provide an update on the RT quality level that can be achieved. Our talk closes with plans and ideas for future work.

Jan Kiszka
Senior Key Expert, Siemens AG
Jan Kiszka is working as consultant and senior software engineer in the Competence Center for Embedded Linux at Siemens Corporate Technology. He is supporting Siemens sectors with adapting and enhancing open source as platform for their products. For customer projects and whenever his spare time permits, he is contributing to open source projects, specifically in the area of real-time and virtualization.

Slides: http://events.linuxfoundation.org/sites/events/files/slides/KVM-Forum-2015-RT-OpenStack_0.pdf
Captions: 
	00:00:17,119 --> 00:00:28,320
okay welcome everyone so I'm actually

00:00:24,960 --> 00:00:31,260
happy to have this year to talks on the

00:00:28,320 --> 00:00:35,000
topic of free time kvm right-hand

00:00:31,260 --> 00:00:38,579
virtualization so I'm going to continue

00:00:35,000 --> 00:00:40,829
basically at the point where Rick was

00:00:38,579 --> 00:00:43,860
dealing with low-level stuff with more

00:00:40,829 --> 00:00:47,160
high-level things and up to the

00:00:43,860 --> 00:00:49,140
management layer and but I would also

00:00:47,160 --> 00:00:53,910
like to give some short introduction

00:00:49,140 --> 00:00:57,449
basically too well the structure of the

00:00:53,910 --> 00:00:59,460
of my presentation will turn kvm for the

00:00:57,449 --> 00:01:01,620
masses so I'll talk a little bit about

00:00:59,460 --> 00:01:04,379
motivation expand the space a little bit

00:01:01,620 --> 00:01:05,880
and the requirements and come up with a

00:01:04,379 --> 00:01:09,270
reference architecture that we would

00:01:05,880 --> 00:01:12,150
propose for the first steps and just to

00:01:09,270 --> 00:01:15,479
move forward and look on the compute

00:01:12,150 --> 00:01:17,670
node site setup so picking up out of

00:01:15,479 --> 00:01:20,340
what Rick was presenting igniting it a

00:01:17,670 --> 00:01:22,650
bit and then look into an OpenStack

00:01:20,340 --> 00:01:25,439
adaption that are required to manage

00:01:22,650 --> 00:01:29,369
such kind of virtual machines with this

00:01:25,439 --> 00:01:31,829
management layer so we already heard

00:01:29,369 --> 00:01:35,060
about one typical use case scenario for

00:01:31,829 --> 00:01:37,350
for root and virtualization

00:01:35,060 --> 00:01:38,610
communication system switching systems

00:01:37,350 --> 00:01:40,829
everyone is talking about energy and

00:01:38,610 --> 00:01:43,250
things like this and there's also

00:01:40,829 --> 00:01:46,649
trading systems where this it's about

00:01:43,250 --> 00:01:49,200
real low latency and it's really about

00:01:46,649 --> 00:01:51,840
money in this case and from our domain

00:01:49,200 --> 00:01:55,530
they are coming the control systems of

00:01:51,840 --> 00:01:57,540
all kind which are ya for various reason

00:01:55,530 --> 00:02:00,600
now being considered as virtual I zabal

00:01:57,540 --> 00:02:02,540
or to be virtualized reasons like the

00:02:00,600 --> 00:02:05,430
consolidation of physical machines

00:02:02,540 --> 00:02:08,009
hardware standardization simpler

00:02:05,430 --> 00:02:11,069
maintenance and also faster failover so

00:02:08,009 --> 00:02:14,170
now it's basically all the same in the

00:02:11,069 --> 00:02:17,000
digit of course are some differences

00:02:14,170 --> 00:02:18,710
so we are only alert this early this

00:02:17,000 --> 00:02:21,920
morning that will come k beam is working

00:02:18,710 --> 00:02:25,910
cool so expression of forces can have

00:02:21,920 --> 00:02:28,100
this in my clout f and well as our

00:02:25,910 --> 00:02:30,260
project internally is also Elias this

00:02:28,100 --> 00:02:32,060
route I'm cloud we get these kind of

00:02:30,260 --> 00:02:34,310
questions all the time and they say orl

00:02:32,060 --> 00:02:36,920
time clouds no problem you can have of

00:02:34,310 --> 00:02:39,560
course and then we talk further and how

00:02:36,920 --> 00:02:43,640
you want to do I oh yeah it is actually

00:02:39,560 --> 00:02:46,910
the problem because even if you have

00:02:43,640 --> 00:02:48,650
your cloud deployment enabled for real

00:02:46,910 --> 00:02:50,600
time and you're running time critical

00:02:48,650 --> 00:02:55,430
senator who upload their you usually

00:02:50,600 --> 00:02:58,280
have some physical process some whales

00:02:55,430 --> 00:02:59,900
and this somewhere else is actually a

00:02:58,280 --> 00:03:02,810
problem which is blocking this kind of

00:02:59,900 --> 00:03:04,459
thing that you have for real-time cloud

00:03:02,810 --> 00:03:07,040
in the one side of the ocean and the

00:03:04,459 --> 00:03:08,360
process on the other side you know the

00:03:07,040 --> 00:03:10,700
latency is you probably get all those

00:03:08,360 --> 00:03:13,760
kind of links they might be fine for

00:03:10,700 --> 00:03:15,320
some scenarios of real-time control

00:03:13,760 --> 00:03:18,680
because we time is not just bought real

00:03:15,320 --> 00:03:21,470
fast it can also be real slow but it a

00:03:18,680 --> 00:03:23,180
monistic but anyway also even if the

00:03:21,470 --> 00:03:25,340
link is just slow it may also be in

00:03:23,180 --> 00:03:28,519
deterministic so these kind of scenarios

00:03:25,340 --> 00:03:30,290
are not yet really likely the same

00:03:28,519 --> 00:03:32,780
scenario or same problem you have if

00:03:30,290 --> 00:03:35,870
your target system is a bit more mobile

00:03:32,780 --> 00:03:39,170
and maybe the link is also in stable or

00:03:35,870 --> 00:03:41,209
just thin connection so you really have

00:03:39,170 --> 00:03:46,790
to talk about what is realistic in this

00:03:41,209 --> 00:03:49,430
scenario and this is basically as kvm is

00:03:46,790 --> 00:03:52,880
no rate i'm capable defined by closing

00:03:49,430 --> 00:03:54,590
the loop over the process so starting

00:03:52,880 --> 00:03:56,840
with the data acquisition you have in

00:03:54,590 --> 00:03:59,420
what form ever in the physical world

00:03:56,840 --> 00:04:01,489
transferring the data to your real-time

00:03:59,420 --> 00:04:04,489
virtual machine processing it they are

00:04:01,489 --> 00:04:07,070
generating some output getting it back

00:04:04,489 --> 00:04:09,230
and then applying it on the physical

00:04:07,070 --> 00:04:10,910
world that's basically loop you have to

00:04:09,230 --> 00:04:14,390
consider and then you can think about

00:04:10,910 --> 00:04:16,820
what kind of setups deployment to remain

00:04:14,390 --> 00:04:19,669
and there are well basically things that

00:04:16,820 --> 00:04:22,460
we call private cloud local data center

00:04:19,669 --> 00:04:24,280
or kind of a kind of server clusters you

00:04:22,460 --> 00:04:27,070
run virtualization on you want to

00:04:24,280 --> 00:04:28,930
deploy your virtual machines are close

00:04:27,070 --> 00:04:33,700
to the physical process that you want to

00:04:28,930 --> 00:04:36,460
enable and these kind of real-time

00:04:33,700 --> 00:04:38,790
virtual machines will require naturally

00:04:36,460 --> 00:04:41,530
from my all excess and that is usually

00:04:38,790 --> 00:04:44,230
connected in our domain at least with

00:04:41,530 --> 00:04:46,980
some special more special networks so it

00:04:44,230 --> 00:04:50,230
can be either some isolated standard

00:04:46,980 --> 00:04:52,240
networks it can be some specialized

00:04:50,230 --> 00:04:55,060
real-time Ethernet there are many on

00:04:52,240 --> 00:04:56,860
this on the field or even if you think

00:04:55,060 --> 00:04:59,410
about the older installations some field

00:04:56,860 --> 00:05:01,810
passes special proprietary interfaces to

00:04:59,410 --> 00:05:06,970
get to the physical world and they need

00:05:01,810 --> 00:05:09,400
to be attached somehow so basically to

00:05:06,970 --> 00:05:11,169
enable a real time and we first of all

00:05:09,400 --> 00:05:12,490
have to fine a little bit our scope and

00:05:11,169 --> 00:05:14,890
we already learned that for example

00:05:12,490 --> 00:05:16,390
chemo is not a good idea to have in this

00:05:14,890 --> 00:05:20,440
loop and although I was talking about

00:05:16,390 --> 00:05:22,750
this kind of scenarios in the past it

00:05:20,440 --> 00:05:24,220
was still a tough job made quite a good

00:05:22,750 --> 00:05:27,280
progress on this but it's still

00:05:24,220 --> 00:05:30,640
something if we want to go for it really

00:05:27,280 --> 00:05:32,050
big deployment manageable diploma we

00:05:30,640 --> 00:05:35,770
should exclude for the first steps

00:05:32,050 --> 00:05:37,270
definitely also one thing you to think

00:05:35,770 --> 00:05:39,789
about what storage is probably not the

00:05:37,270 --> 00:05:42,039
first started you want to address in the

00:05:39,789 --> 00:05:44,380
real-time setups well we can't you don't

00:05:42,039 --> 00:05:47,350
have a use case urgent use case for this

00:05:44,380 --> 00:05:49,300
that may have there's also the problem

00:05:47,350 --> 00:05:51,820
that the backends may not be that asset

00:05:49,300 --> 00:05:53,200
urbanistic as you need them to be and so

00:05:51,820 --> 00:05:57,250
let's first of all don't think about

00:05:53,200 --> 00:05:59,500
this yeah then also consolidate over

00:05:57,250 --> 00:06:01,300
some I oh we could support all the world

00:05:59,500 --> 00:06:02,789
but this of course is not manageable so

00:06:01,300 --> 00:06:04,600
let's think about confining

00:06:02,789 --> 00:06:07,240
consolidating over internet it's a

00:06:04,600 --> 00:06:08,740
common denominator basically and for the

00:06:07,240 --> 00:06:10,330
things i mentioned like the field passes

00:06:08,740 --> 00:06:12,580
there usually some gateway some

00:06:10,330 --> 00:06:16,930
interfaces available so you can all map

00:06:12,580 --> 00:06:20,080
them all also internet variants device

00:06:16,930 --> 00:06:21,820
pass through of requested of course

00:06:20,080 --> 00:06:24,070
there are some downside in the in the

00:06:21,820 --> 00:06:26,110
cloud world it may bind you to some

00:06:24,070 --> 00:06:27,430
physical nose and things like this for

00:06:26,110 --> 00:06:30,490
the real-time point of view there are

00:06:27,430 --> 00:06:32,560
some complexity involved so let's first

00:06:30,490 --> 00:06:34,900
of all skip over this we will come to

00:06:32,560 --> 00:06:36,980
this possibly later on

00:06:34,900 --> 00:06:38,600
another thing that people think about

00:06:36,980 --> 00:06:41,090
when they hear real-time and

00:06:38,600 --> 00:06:43,220
virtualization of virtualization music

00:06:41,090 --> 00:06:46,790
in life my great cool and now in real

00:06:43,220 --> 00:06:49,040
time and yes not really people working

00:06:46,790 --> 00:06:51,020
in this area but probability could agree

00:06:49,040 --> 00:06:53,360
on this that is currently not designed

00:06:51,020 --> 00:06:57,080
the live migration mechanisms to do any

00:06:53,360 --> 00:06:58,760
kind of things in real time as long as

00:06:57,080 --> 00:07:00,770
the real time process is running its

00:06:58,760 --> 00:07:02,060
fine basically to shut down your virtual

00:07:00,770 --> 00:07:03,830
machine to park it in a certain

00:07:02,060 --> 00:07:05,630
non-operational state and then do the

00:07:03,830 --> 00:07:08,150
live migration which will still

00:07:05,630 --> 00:07:12,080
accelerate a lot of things but not doing

00:07:08,150 --> 00:07:13,940
operation let's exclude this so this

00:07:12,080 --> 00:07:16,940
leaves us with a more they are

00:07:13,940 --> 00:07:19,190
manageable a bill of material regarding

00:07:16,940 --> 00:07:21,770
the real-time needs we have so we need

00:07:19,190 --> 00:07:26,840
to real-time cpus and we eat real turn

00:07:21,770 --> 00:07:29,990
networking okay but you also need

00:07:26,840 --> 00:07:32,690
something yet to manage this and this is

00:07:29,990 --> 00:07:34,550
basically now where we came from so we

00:07:32,690 --> 00:07:39,169
had some running systems for quite a

00:07:34,550 --> 00:07:42,380
while too yeah Clavers real-time kvm to

00:07:39,169 --> 00:07:44,360
enable certain setups running various

00:07:42,380 --> 00:07:45,910
kind of guests inside of this and but

00:07:44,360 --> 00:07:48,230
it's all more or less handcrafted

00:07:45,910 --> 00:07:49,669
handcrafted deployment the start of

00:07:48,230 --> 00:07:53,300
scripts all the things we have

00:07:49,669 --> 00:07:56,750
individual host we have some dozens vm /

00:07:53,300 --> 00:07:59,540
host maybe at most so yeah it's the lab

00:07:56,750 --> 00:08:01,550
setup but we want to go of course bigger

00:07:59,540 --> 00:08:03,290
on the long run so we want to go into

00:08:01,550 --> 00:08:06,620
some data centers that means you have to

00:08:03,290 --> 00:08:08,270
manage hundreds of pm's and some of them

00:08:06,620 --> 00:08:11,030
might be real time others may be non

00:08:08,270 --> 00:08:13,190
real-time usually they come together to

00:08:11,030 --> 00:08:15,160
a certain degree and you have to manage

00:08:13,190 --> 00:08:17,060
a lot of networks in this case

00:08:15,160 --> 00:08:18,740
specifically as real terms about

00:08:17,060 --> 00:08:22,130
isolation there might really large

00:08:18,740 --> 00:08:25,730
number of networks not really connected

00:08:22,130 --> 00:08:27,530
to each other yeah and you also want to

00:08:25,730 --> 00:08:29,180
have flexible management for all this

00:08:27,530 --> 00:08:31,280
noise or things of like accounting for

00:08:29,180 --> 00:08:34,370
example various models would be

00:08:31,280 --> 00:08:36,110
imaginable of these kind of setups so in

00:08:34,370 --> 00:08:38,210
the end the requirements end up to

00:08:36,110 --> 00:08:41,060
something that you eat yeah a proper

00:08:38,210 --> 00:08:43,010
tooling for this and well a cloud great

00:08:41,060 --> 00:08:47,030
real-time capable management stickers

00:08:43,010 --> 00:08:49,310
required and so we picked one OpenStack

00:08:47,030 --> 00:08:51,140
and simply because well it's broadly

00:08:49,310 --> 00:08:54,050
used for private cloud set up sort of

00:08:51,140 --> 00:08:56,420
private clouds similar setups and it is

00:08:54,050 --> 00:08:58,250
a good integration of kpn there are

00:08:56,420 --> 00:08:59,630
others on the market but let's say one

00:08:58,250 --> 00:09:04,100
has to be picked and that's basically

00:08:59,630 --> 00:09:06,200
how much less so let's look into some

00:09:04,100 --> 00:09:08,570
possible architecture with this kind of

00:09:06,200 --> 00:09:10,250
system so as we learned well you have

00:09:08,570 --> 00:09:13,100
the physical happy or the compute node

00:09:10,250 --> 00:09:16,010
and of course you need linux running

00:09:13,100 --> 00:09:18,470
this pram dirty and kvn woke up then we

00:09:16,010 --> 00:09:21,890
have some real time guests and we have

00:09:18,470 --> 00:09:23,780
here a mole somewhere so the first thing

00:09:21,890 --> 00:09:27,080
that you learn we need to partition so

00:09:23,780 --> 00:09:29,060
we need to enable certain set of CPUs

00:09:27,080 --> 00:09:32,420
with time CPUs on the computer hardware

00:09:29,060 --> 00:09:35,150
to isolate for real time use so that the

00:09:32,420 --> 00:09:38,360
guests can use them exclusively with

00:09:35,150 --> 00:09:41,210
their real time workload but we still

00:09:38,360 --> 00:09:43,010
also need a little bit CPUs for other

00:09:41,210 --> 00:09:44,750
purpose and like the emulation so

00:09:43,010 --> 00:09:47,660
whenever the guests trigger something in

00:09:44,750 --> 00:09:50,150
chemo which is as in Cronus the current

00:09:47,660 --> 00:09:53,210
events will happen on the under their

00:09:50,150 --> 00:09:55,280
cpu context but as in kunis things

00:09:53,210 --> 00:09:57,260
scheme has a number of threads running

00:09:55,280 --> 00:09:58,820
in peril they have to run somewhere and

00:09:57,260 --> 00:10:00,380
they don't it shouldn't run on the road

00:09:58,820 --> 00:10:04,820
to impose though they need some best

00:10:00,380 --> 00:10:06,860
effort course remaining ok so far so

00:10:04,820 --> 00:10:10,430
clear that of course we need some

00:10:06,860 --> 00:10:12,290
management stack make it simple well in

00:10:10,430 --> 00:10:14,090
a larger diplôme usually have separate

00:10:12,290 --> 00:10:15,770
machines for this because the various

00:10:14,090 --> 00:10:18,170
services or mistake adorable to go into

00:10:15,770 --> 00:10:22,250
detail TX general expert on this I just

00:10:18,170 --> 00:10:23,990
learned it's complex and but what you

00:10:22,250 --> 00:10:25,910
have is open today of course as well is

00:10:23,990 --> 00:10:28,730
something you control the compute node

00:10:25,910 --> 00:10:30,980
and the usual spec looks like this that

00:10:28,730 --> 00:10:33,020
you have lip vert and the lowest level

00:10:30,980 --> 00:10:35,450
to talk to kmo do the management of this

00:10:33,020 --> 00:10:38,690
level and on top you have some some

00:10:35,450 --> 00:10:40,640
local agent no variation for the compute

00:10:38,690 --> 00:10:44,720
node which is basically then instructing

00:10:40,640 --> 00:10:47,450
lipoid what to do so that's the setup

00:10:44,720 --> 00:10:49,940
for real-time sea views much missing you

00:10:47,450 --> 00:10:54,290
of course is the network over I all so

00:10:49,940 --> 00:10:56,720
how to get this in well we have some

00:10:54,290 --> 00:10:58,310
options to do I owe would be already

00:10:56,720 --> 00:11:00,030
ruled them out emulation is not an

00:10:58,310 --> 00:11:02,280
option because involve screamo

00:11:00,030 --> 00:11:05,070
pass through we want to exclude for now

00:11:02,280 --> 00:11:07,290
so but believes left basic use

00:11:05,070 --> 00:11:11,640
paravirtualization in case of TMO kbm

00:11:07,290 --> 00:11:14,060
that means that I oh ok so we have a

00:11:11,640 --> 00:11:18,120
need for a real-time data plane now

00:11:14,060 --> 00:11:20,220
there are basically two options if you

00:11:18,120 --> 00:11:22,650
want to exclude qmo doing this data

00:11:20,220 --> 00:11:26,040
plane which we want to let us be host

00:11:22,650 --> 00:11:27,810
net in the host Colonel and it is since

00:11:26,040 --> 00:11:29,900
recent development we host the user

00:11:27,810 --> 00:11:33,180
which is basically the same interface

00:11:29,900 --> 00:11:36,680
but then available to a separate user

00:11:33,180 --> 00:11:41,340
space process running on this host carlo

00:11:36,680 --> 00:11:43,650
and we went for the second option simply

00:11:41,340 --> 00:11:45,480
and because it's well for more wonder if

00:11:43,650 --> 00:11:49,950
you can't be more manageable easier

00:11:45,480 --> 00:11:52,710
manageable so we classic setup you have

00:11:49,950 --> 00:11:55,850
in this kind of scenario is some data

00:11:52,710 --> 00:11:58,560
plan management DP DK is pretty popular

00:11:55,850 --> 00:12:02,010
right now and it even comes with an

00:11:58,560 --> 00:12:04,470
implementation for v host user simple

00:12:02,010 --> 00:12:07,050
setup so it's quite easy to work with

00:12:04,470 --> 00:12:09,690
another advantage has basically in this

00:12:07,050 --> 00:12:11,310
model is that you can if you're running

00:12:09,690 --> 00:12:13,740
the data plane dedicated course you can

00:12:11,310 --> 00:12:15,960
do aggressive falling basically polling

00:12:13,740 --> 00:12:18,030
on the physical hardware that you want

00:12:15,960 --> 00:12:20,370
to connect to but also polling on the

00:12:18,030 --> 00:12:23,460
virtual hardware that the guests will

00:12:20,370 --> 00:12:25,860
use an interactive you just need

00:12:23,460 --> 00:12:27,630
basically one event channel if the guest

00:12:25,860 --> 00:12:30,360
is not calling as well and that's

00:12:27,630 --> 00:12:33,000
basically the notification about

00:12:30,360 --> 00:12:36,660
incoming packages from this real-time

00:12:33,000 --> 00:12:39,000
switch router to the guests and well we

00:12:36,660 --> 00:12:41,670
look at this we were concerned initially

00:12:39,000 --> 00:12:43,110
would be problematic regarding setup and

00:12:41,670 --> 00:12:45,870
configuration under a time constraint

00:12:43,110 --> 00:12:48,630
but actually it's a no brainer and what

00:12:45,870 --> 00:12:52,200
it is is Justin anaya QFT so it's an i

00:12:48,630 --> 00:12:55,020
oh sorry neither event ft mechanism

00:12:52,200 --> 00:12:57,810
where the switch site just writes the

00:12:55,020 --> 00:13:01,290
event in form of her rights is fall into

00:12:57,810 --> 00:13:04,380
this and on the guest site basically on

00:13:01,290 --> 00:13:06,930
the kvm side Justin guest interrupts

00:13:04,380 --> 00:13:08,460
injected into the world I'm CPU this

00:13:06,930 --> 00:13:10,530
part does you don't have to tune

00:13:08,460 --> 00:13:13,550
anything in this is very very convenient

00:13:10,530 --> 00:13:13,550
and it's very fast

00:13:13,800 --> 00:13:20,050
so if you take this and extend our

00:13:17,009 --> 00:13:22,240
architecture well the guest now has some

00:13:20,050 --> 00:13:25,170
virtual nic for the real time part it

00:13:22,240 --> 00:13:28,000
may have further nicks for non real-time

00:13:25,170 --> 00:13:30,040
communication practices and you have the

00:13:28,000 --> 00:13:35,730
physical Nick down there which is

00:13:30,040 --> 00:13:38,769
supposed to oops that's the wrong button

00:13:35,730 --> 00:13:40,000
it was a people anyway and you have the

00:13:38,769 --> 00:13:41,980
physical Nick which is supposed to

00:13:40,000 --> 00:13:46,240
connect you to the real-time world out

00:13:41,980 --> 00:13:49,630
there so in between we now put some real

00:13:46,240 --> 00:13:51,220
time data plane and exposing the videos

00:13:49,630 --> 00:13:54,459
user interface or using vuze user

00:13:51,220 --> 00:13:56,980
interface and yeah that's basically the

00:13:54,459 --> 00:14:01,329
architecture that we propose basically

00:13:56,980 --> 00:14:09,100
as a first step to also see what is

00:14:01,329 --> 00:14:10,899
possible based on this so now we're

00:14:09,100 --> 00:14:14,170
going to look in how to set this up on

00:14:10,899 --> 00:14:15,759
the compute node so oh we already

00:14:14,170 --> 00:14:18,040
learned about Prem that he has to run

00:14:15,759 --> 00:14:20,170
their configuration tuning what I can

00:14:18,040 --> 00:14:21,880
just refer to what Rick was saying the

00:14:20,170 --> 00:14:24,420
information available on the web and the

00:14:21,880 --> 00:14:26,920
Internet one thing to add basically this

00:14:24,420 --> 00:14:29,889
is the power tuning power management

00:14:26,920 --> 00:14:32,139
tuning it can also be done in the bios

00:14:29,889 --> 00:14:34,209
sometimes and have very interesting nice

00:14:32,139 --> 00:14:36,130
positive effects so look into this

00:14:34,209 --> 00:14:40,029
otherwise looking forward Rick was

00:14:36,130 --> 00:14:42,639
suggesting and then we have this topic

00:14:40,029 --> 00:14:46,750
of the set set up of the isolated CPU

00:14:42,639 --> 00:14:49,480
set so basically we need two sets for

00:14:46,750 --> 00:14:51,639
real time and what it can be one set but

00:14:49,480 --> 00:14:53,709
it has to be logically split one is for

00:14:51,639 --> 00:14:55,720
the virtual CPU threats which are real

00:14:53,709 --> 00:14:58,510
time and one is for the real time

00:14:55,720 --> 00:15:00,699
switching data plan threats can be one

00:14:58,510 --> 00:15:05,290
can be many depending on how picky a set

00:15:00,699 --> 00:15:07,899
of this then we need of course

00:15:05,290 --> 00:15:10,329
sufficient non-isolated CPUs for the

00:15:07,899 --> 00:15:12,639
other workload so anything which is

00:15:10,329 --> 00:15:14,500
ready to management task management

00:15:12,639 --> 00:15:17,110
threats and which is ready to cure a

00:15:14,500 --> 00:15:19,420
more advanced threats they should end up

00:15:17,110 --> 00:15:23,199
on these course without any kind of

00:15:19,420 --> 00:15:25,059
special prioritization and isolation but

00:15:23,199 --> 00:15:27,609
we also played with in the past was

00:15:25,059 --> 00:15:29,649
I'll see you no call back so it's

00:15:27,609 --> 00:15:31,929
basically tuning thing we played also

00:15:29,649 --> 00:15:33,879
for a while with the new no H set stuff

00:15:31,929 --> 00:15:36,189
but at that point basically it was not

00:15:33,879 --> 00:15:38,229
yet ready and we had a bug that was

00:15:36,189 --> 00:15:40,539
fixed now regarding the interruption but

00:15:38,229 --> 00:15:41,739
still you have you shouldn't expect too

00:15:40,539 --> 00:15:43,509
much with me from my point of view

00:15:41,739 --> 00:15:46,269
because it's still we have the one

00:15:43,509 --> 00:15:48,069
second pic with no H set full so this

00:15:46,269 --> 00:15:50,859
from the domestic point of view it's

00:15:48,069 --> 00:15:51,909
actually not perfect yet but well we

00:15:50,859 --> 00:15:54,219
were really very date with a newer

00:15:51,909 --> 00:15:55,629
colonel right now we on three dot 18 was

00:15:54,219 --> 00:15:57,489
pre-emptive and probably do a

00:15:55,629 --> 00:16:01,389
rehabilitation than you are preempted he

00:15:57,489 --> 00:16:03,639
corner how what delivers Rick was

00:16:01,389 --> 00:16:05,199
already talking about an important thing

00:16:03,639 --> 00:16:09,189
is about the prioritization of your

00:16:05,199 --> 00:16:12,519
real-time vcpu and how they can

00:16:09,189 --> 00:16:14,889
basically manage yeah the problem of

00:16:12,519 --> 00:16:17,049
starvation on the whole system so the

00:16:14,889 --> 00:16:19,119
colonel has a feature for this to avoid

00:16:17,049 --> 00:16:20,979
the real-time sweat can staff the host

00:16:19,119 --> 00:16:24,369
completely simply by running in a

00:16:20,979 --> 00:16:26,679
infinite loop and this is this guitar ki

00:16:24,369 --> 00:16:29,469
aarti threats rattling mechanism is

00:16:26,679 --> 00:16:31,419
before typical default it's on this many

00:16:29,469 --> 00:16:34,059
distribution so you have some throttling

00:16:31,419 --> 00:16:36,129
there that after one nine hundred

00:16:34,059 --> 00:16:37,599
milliseconds of continuous running of

00:16:36,129 --> 00:16:40,589
the real-time sweat it will be suspended

00:16:37,599 --> 00:16:43,779
for a period and of course this may be

00:16:40,589 --> 00:16:45,279
undesired for real-time threat on the

00:16:43,779 --> 00:16:47,529
other hand what we already heard about

00:16:45,279 --> 00:16:49,389
that if you leave the guest under

00:16:47,529 --> 00:16:51,609
control in this scenario it actually

00:16:49,389 --> 00:16:53,289
pulls infinitely you may run into a

00:16:51,609 --> 00:16:54,819
system that lock so this is basically a

00:16:53,289 --> 00:16:57,459
trade of you have to make depending on

00:16:54,819 --> 00:16:59,139
your workloads and depending on how safe

00:16:57,459 --> 00:17:01,479
your system are maybe you can increase

00:16:59,139 --> 00:17:05,829
the period and leave the guest more time

00:17:01,479 --> 00:17:07,600
to finally do some idle operation yeah

00:17:05,829 --> 00:17:10,809
or you trust your guests it also be a

00:17:07,600 --> 00:17:14,999
scenario that it does an idle call and

00:17:10,809 --> 00:17:14,999
therefore break yes this infinite loop

00:17:16,110 --> 00:17:21,490
one thing to notice eyes all cpus manage

00:17:19,389 --> 00:17:24,459
the threats but it doesn't it doesn't

00:17:21,490 --> 00:17:26,799
manage the iock you affinity so you will

00:17:24,459 --> 00:17:28,600
end up this i accuse by default first of

00:17:26,799 --> 00:17:31,659
all also showing up on this I soul

00:17:28,600 --> 00:17:33,899
isolated CPUs so ji-sub meaning to

00:17:31,659 --> 00:17:33,899
change

00:17:36,830 --> 00:17:41,370
it's but this is actually a kernel thing

00:17:39,390 --> 00:17:43,410
I equivalent to the service in user

00:17:41,370 --> 00:17:46,740
space so you can of course you can tune

00:17:43,410 --> 00:17:49,650
this and Iook you balance this way but

00:17:46,740 --> 00:17:51,300
the colonel by default has the mask set

00:17:49,650 --> 00:17:53,400
broadly so you have to tune it somewhere

00:17:51,300 --> 00:17:55,020
and IQ balance demon this would cause

00:17:53,400 --> 00:17:56,970
one way you can have I think it's

00:17:55,020 --> 00:17:58,980
already available thing there was a

00:17:56,970 --> 00:18:00,600
parameter and IQ balance t to do this

00:17:58,980 --> 00:18:05,280
anyway it has to be done is to be

00:18:00,600 --> 00:18:07,980
configured that's important to note well

00:18:05,280 --> 00:18:10,530
there's more tuning possible you can

00:18:07,980 --> 00:18:12,930
play with SMI disabling and things like

00:18:10,530 --> 00:18:14,850
this but um depends of course what your

00:18:12,930 --> 00:18:16,950
latency requirements are and and if we

00:18:14,850 --> 00:18:19,650
heard about 40 micro seconds earlier and

00:18:16,950 --> 00:18:21,900
what we are already happy with 100

00:18:19,650 --> 00:18:23,250
microseconds with our setups it really

00:18:21,900 --> 00:18:24,780
depends on what kind of guest you're

00:18:23,250 --> 00:18:29,520
running how much effort you want to

00:18:24,780 --> 00:18:31,860
invest here so the bad news on this is

00:18:29,520 --> 00:18:33,840
still lot of tuning necessary on the

00:18:31,860 --> 00:18:36,600
compute node side the good news is if

00:18:33,840 --> 00:18:38,340
you have more or less similar setup

00:18:36,600 --> 00:18:40,020
larger set up you can replicate of

00:18:38,340 --> 00:18:41,850
course is tuning done once for one

00:18:40,020 --> 00:18:44,670
machine replicated many times you're

00:18:41,850 --> 00:18:46,080
fine and but the even better news is

00:18:44,670 --> 00:18:47,550
there are some frameworks and I

00:18:46,080 --> 00:18:49,770
mentioned before it was discussing with

00:18:47,550 --> 00:18:52,410
the question regarding what you can do

00:18:49,770 --> 00:18:56,220
this see groups and there's a tool by

00:18:52,410 --> 00:19:00,480
the Oakland Nia Linux project it's

00:18:56,220 --> 00:19:02,010
called part RT which targets basically

00:19:00,480 --> 00:19:04,710
partitioning later and partitioning

00:19:02,010 --> 00:19:07,020
using G groups and some other tricks

00:19:04,710 --> 00:19:08,610
like offloading on learning CPUs to push

00:19:07,020 --> 00:19:10,440
the time eyes away and things like this

00:19:08,610 --> 00:19:12,090
so on the first glance it looks

00:19:10,440 --> 00:19:16,050
interesting but we haven't done a full

00:19:12,090 --> 00:19:18,090
evaluation ourselves so far but at least

00:19:16,050 --> 00:19:19,740
it's a starting point and if this is not

00:19:18,090 --> 00:19:21,630
something which is totally impossible

00:19:19,740 --> 00:19:23,040
right now without corner patches it

00:19:21,630 --> 00:19:25,830
might be very interesting thing to

00:19:23,040 --> 00:19:29,130
follow on and maybe it in Hants this

00:19:25,830 --> 00:19:31,110
thing is simple Python scripts you can

00:19:29,130 --> 00:19:33,720
simply collect the information that you

00:19:31,110 --> 00:19:37,200
need for tuning the system partitioning

00:19:33,720 --> 00:19:41,370
way this way it's one way I would say

00:19:37,200 --> 00:19:44,900
it's good one possibly so next things

00:19:41,370 --> 00:19:46,490
look at this libvirt well libvirt

00:19:44,900 --> 00:19:48,620
also one thing that we learned this way

00:19:46,490 --> 00:19:52,040
again it's just the policy is a policy

00:19:48,620 --> 00:19:53,690
free management layer and so it's just

00:19:52,040 --> 00:19:55,640
executing basically what's been told

00:19:53,690 --> 00:19:58,160
from the buff higher management layers

00:19:55,640 --> 00:20:00,980
there is nothing really done inside

00:19:58,160 --> 00:20:04,130
libvirt to enable this kind of real-time

00:20:00,980 --> 00:20:06,740
things besides basically executing what

00:20:04,130 --> 00:20:09,080
has been told and the good news is that

00:20:06,740 --> 00:20:11,510
all required control we need for

00:20:09,080 --> 00:20:14,480
enabling this real-time setup is already

00:20:11,510 --> 00:20:18,200
upstream and basically since version 2

00:20:14,480 --> 00:20:22,100
12 to 13 available that means for

00:20:18,200 --> 00:20:24,140
real-time cpus and we have the pinning

00:20:22,100 --> 00:20:26,510
feature available we have the

00:20:24,140 --> 00:20:29,180
availability of settings of scheduling

00:20:26,510 --> 00:20:31,460
parameters of your VC views like the

00:20:29,180 --> 00:20:33,530
policies in the priority and we also

00:20:31,460 --> 00:20:36,320
have the ability and to tell you in mood

00:20:33,530 --> 00:20:38,930
to memory lock the guest memory or the

00:20:36,320 --> 00:20:42,050
process memory it's also required for

00:20:38,930 --> 00:20:44,390
return purposes regarding will time

00:20:42,050 --> 00:20:46,190
networking well as we are looking at V

00:20:44,390 --> 00:20:49,850
host user we of course look for videos

00:20:46,190 --> 00:20:52,340
user support it's there and you need the

00:20:49,850 --> 00:20:56,150
ability to use user basically enables

00:20:52,340 --> 00:20:57,530
that the switch has full inside the

00:20:56,150 --> 00:21:00,830
switching process has to have full

00:20:57,530 --> 00:21:02,870
insight into the guest memory because

00:21:00,830 --> 00:21:05,780
well it has to execute the DMA request

00:21:02,870 --> 00:21:08,600
the virtual DMA request and that the

00:21:05,780 --> 00:21:11,240
guest is issuing and for this to enable

00:21:08,600 --> 00:21:13,550
you have to set up specifically and yeah

00:21:11,240 --> 00:21:15,200
the memory the guest memory according to

00:21:13,550 --> 00:21:18,020
some came upon the parameters and

00:21:15,200 --> 00:21:20,660
support for this is now there what you

00:21:18,020 --> 00:21:23,270
also need of course is to connecting the

00:21:20,660 --> 00:21:25,970
queue emo networking backend for bit io

00:21:23,270 --> 00:21:28,430
to this specific switchport virtual

00:21:25,970 --> 00:21:30,950
switch port and this is done this we

00:21:28,430 --> 00:21:33,380
host user based on on sockets well just

00:21:30,950 --> 00:21:35,180
have to identify basically which part

00:21:33,380 --> 00:21:38,360
you want to plug in the guest fear and

00:21:35,180 --> 00:21:41,600
some socket pulse was available problem

00:21:38,360 --> 00:21:44,810
solved file the actual work that has to

00:21:41,600 --> 00:21:46,820
be done is now in OpenStack but also

00:21:44,810 --> 00:21:49,700
they are surprisingly many pieces are

00:21:46,820 --> 00:21:52,790
already there well you have vcp opening

00:21:49,700 --> 00:21:55,280
available due to work in this area also

00:21:52,790 --> 00:21:57,080
due to work on Umeh areas and you have P

00:21:55,280 --> 00:21:59,420
CPU dedication even available

00:21:57,080 --> 00:22:03,320
also that only one gas is using one

00:21:59,420 --> 00:22:06,470
physical CPU and then there's a

00:22:03,320 --> 00:22:08,510
blueprint and that is basically

00:22:06,470 --> 00:22:11,240
proposing real time extension for other

00:22:08,510 --> 00:22:14,480
atomic spent extension for for OpenStack

00:22:11,240 --> 00:22:18,830
it showed up or I think some three or

00:22:14,480 --> 00:22:20,720
four months ago by Daniel branch and yet

00:22:18,830 --> 00:22:24,170
still in the discussion what it

00:22:20,720 --> 00:22:27,800
introduced basically is a new flavor

00:22:24,170 --> 00:22:30,280
properties or flavors special via type

00:22:27,800 --> 00:22:34,640
in OpenStack for for virtual machines

00:22:30,280 --> 00:22:37,130
which is saying okay this virtual

00:22:34,640 --> 00:22:41,840
machine should be created with real-time

00:22:37,130 --> 00:22:43,610
CPUs you can tack this way yeah startup

00:22:41,840 --> 00:22:45,740
instances of virtual machines but you

00:22:43,610 --> 00:22:47,960
can also take images so basically

00:22:45,740 --> 00:22:50,210
whenever you install the instance e8

00:22:47,960 --> 00:22:55,480
this image you get a real time in this

00:22:50,210 --> 00:23:01,540
office it depends on the pre-existing

00:22:55,480 --> 00:23:04,790
flavor of isolated CPU of dedicated CPUs

00:23:01,540 --> 00:23:07,610
so both have to be able to able to pull

00:23:04,790 --> 00:23:10,190
real time and it basically triggers that

00:23:07,610 --> 00:23:14,050
came with us the memory locking and that

00:23:10,190 --> 00:23:16,430
the v CPUs are properly prioritized and

00:23:14,050 --> 00:23:18,770
yeah policy the policy is probably

00:23:16,430 --> 00:23:21,080
applied to this however they are still

00:23:18,770 --> 00:23:22,270
some deficits and during the discussions

00:23:21,080 --> 00:23:25,430
and analytics of this thing and

00:23:22,270 --> 00:23:28,130
derivative past days interestingly and

00:23:25,430 --> 00:23:30,320
we found some yeah not a good optimal

00:23:28,130 --> 00:23:31,730
solution yet so one thing Randy the

00:23:30,320 --> 00:23:33,320
implementation but also the

00:23:31,730 --> 00:23:35,000
specification is not really talking

00:23:33,320 --> 00:23:36,860
about priorities which property to use

00:23:35,000 --> 00:23:40,220
which policy to use is just hard coating

00:23:36,860 --> 00:23:42,140
things that's probably fine again for

00:23:40,220 --> 00:23:43,970
most of the scenarios that you confine

00:23:42,140 --> 00:23:45,560
on one priority but the currently picked

00:23:43,970 --> 00:23:47,570
one priority one is not really a

00:23:45,560 --> 00:23:50,570
fortunate one because a lot of things

00:23:47,570 --> 00:23:52,340
run at priority one by default in the

00:23:50,570 --> 00:23:55,460
auditorium kurata so you should at least

00:23:52,340 --> 00:23:57,350
pick something higher and in the end

00:23:55,460 --> 00:23:59,210
what you want is a control over this a

00:23:57,350 --> 00:24:00,980
reasonable default but still then the

00:23:59,210 --> 00:24:03,710
ability to control this is an extension

00:24:00,980 --> 00:24:05,120
of the configuration format here another

00:24:03,710 --> 00:24:07,280
thing which is required which was a

00:24:05,120 --> 00:24:09,860
discussion if I can force is regarding

00:24:07,280 --> 00:24:12,590
how many CPU masks do I need

00:24:09,860 --> 00:24:15,530
Carly you tell Nova okay this is the set

00:24:12,590 --> 00:24:17,720
of CPUs you can run gasps son but it's

00:24:15,530 --> 00:24:20,929
not sufficient for this because actually

00:24:17,720 --> 00:24:23,260
what is run there is both the vcp use as

00:24:20,929 --> 00:24:28,059
well as the event chemo emulator threats

00:24:23,260 --> 00:24:30,620
and we want to tell them apart but lower

00:24:28,059 --> 00:24:32,270
opens Dec has no knowledge about what is

00:24:30,620 --> 00:24:35,270
the other part where can I put them as

00:24:32,270 --> 00:24:37,280
well and so the unity next Mass the

00:24:35,270 --> 00:24:39,049
second mask for this cpu mask which is

00:24:37,280 --> 00:24:40,670
supposed telling us so the one massive

00:24:39,049 --> 00:24:42,799
tell us which are the root I'm CPUs and

00:24:40,670 --> 00:24:44,750
the other master tell us in one way or

00:24:42,799 --> 00:24:46,790
the other which is the remaining set of

00:24:44,750 --> 00:24:49,070
CPU so you can use for anything non

00:24:46,790 --> 00:24:53,590
real-time when you are starting up a

00:24:49,070 --> 00:24:56,299
guest system so based on the existing

00:24:53,590 --> 00:24:59,990
blueprint there is already some pet set

00:24:56,299 --> 00:25:02,360
available where site I can't pronounce

00:24:59,990 --> 00:25:06,679
as an awesome story and was working on

00:25:02,360 --> 00:25:09,230
is working on and follow the link to

00:25:06,679 --> 00:25:12,679
find a patch a series of four patches I

00:25:09,230 --> 00:25:16,090
think right now and implements yeah the

00:25:12,679 --> 00:25:20,720
existing blueprint of a get master of

00:25:16,090 --> 00:25:22,730
OpenStack it has not this page has been

00:25:20,720 --> 00:25:24,620
actually explicitly rejected recently

00:25:22,730 --> 00:25:27,260
based on the argumentation that the blue

00:25:24,620 --> 00:25:29,120
plane is not it accepted and that means

00:25:27,260 --> 00:25:31,340
regarding the timeline because now the

00:25:29,120 --> 00:25:33,200
window is closed to accept blueprints

00:25:31,340 --> 00:25:34,820
which of lower priority approves

00:25:33,200 --> 00:25:37,030
obviously this is falling in this

00:25:34,820 --> 00:25:39,650
criteria we will miss the currently

00:25:37,030 --> 00:25:41,390
window for liberties or next release

00:25:39,650 --> 00:25:43,400
coming out for OpenStack and the new

00:25:41,390 --> 00:25:46,340
touch this meet our cuts or the next one

00:25:43,400 --> 00:25:47,840
and then only when the blue pin is

00:25:46,340 --> 00:25:50,590
merged we also have to implementation

00:25:47,840 --> 00:25:52,910
same same much the implementation of it

00:25:50,590 --> 00:25:54,890
so we are at siemens currently

00:25:52,910 --> 00:25:56,480
integrating the existing patches and our

00:25:54,890 --> 00:25:59,570
deployment we played with some other

00:25:56,480 --> 00:26:02,630
solutions before learned a lot about ops

00:25:59,570 --> 00:26:05,270
taking this way and we want to yeah well

00:26:02,630 --> 00:26:06,950
now evaluate them and basically also

00:26:05,270 --> 00:26:09,760
address what we identified as

00:26:06,950 --> 00:26:12,230
shortcomings so we will contribute some

00:26:09,760 --> 00:26:15,580
information and from access to the

00:26:12,230 --> 00:26:15,580
blueprint is worth of the code soon

00:26:16,600 --> 00:26:22,330
let's look at the networking aspect so

00:26:20,130 --> 00:26:24,940
depending on what your requirements are

00:26:22,330 --> 00:26:26,530
if you are fine basically what neutron

00:26:24,940 --> 00:26:28,810
is management layer for networking in

00:26:26,530 --> 00:26:31,540
OpenStack what Newton is doing the

00:26:28,810 --> 00:26:34,120
networks that its many explained in IP

00:26:31,540 --> 00:26:37,540
way you might be already fine but what

00:26:34,120 --> 00:26:39,280
comes out of the box we aren't fine with

00:26:37,540 --> 00:26:41,380
it because we have the requirement of

00:26:39,280 --> 00:26:44,620
our real-time networks are a kind of

00:26:41,380 --> 00:26:47,860
special usually some of them well they

00:26:44,620 --> 00:26:50,740
are not managed by by the matrix by by

00:26:47,860 --> 00:26:53,800
guest essentially or external instances

00:26:50,740 --> 00:26:55,360
nothing within the scope of OpenStack so

00:26:53,800 --> 00:26:58,150
there are network which are just there

00:26:55,360 --> 00:27:00,540
and you should just use them and they

00:26:58,150 --> 00:27:02,920
may not even have tcp/ip at all and

00:27:00,540 --> 00:27:05,200
neutron is very much about network

00:27:02,920 --> 00:27:08,770
master have IP address and less you

00:27:05,200 --> 00:27:11,170
can't really create it so there is a

00:27:08,770 --> 00:27:14,230
need to for a new kind of network type

00:27:11,170 --> 00:27:17,110
in neutral and that's basically what we

00:27:14,230 --> 00:27:19,330
are currently also implementing this new

00:27:17,110 --> 00:27:22,000
type but it introduced the concept of an

00:27:19,330 --> 00:27:27,490
anime news network so a p3 know a teach

00:27:22,000 --> 00:27:29,500
DHCP in this just blank but you will

00:27:27,490 --> 00:27:32,890
need in this context as well it's an

00:27:29,500 --> 00:27:34,630
agent on the individual nodes which is

00:27:32,890 --> 00:27:37,150
aware of the connectivity of these

00:27:34,630 --> 00:27:38,890
networks so where is this specific

00:27:37,150 --> 00:27:40,720
network available on which compute node

00:27:38,890 --> 00:27:44,500
it may not be available on all networks

00:27:40,720 --> 00:27:46,210
because it's a wiring issue and if you

00:27:44,500 --> 00:27:48,250
have the knowledge and you can say ok if

00:27:46,210 --> 00:27:49,780
I want to instantiate a virtual machine

00:27:48,250 --> 00:27:51,490
real-time virtual machine which has to

00:27:49,780 --> 00:27:54,760
be connected to a little Network blue

00:27:51,490 --> 00:27:56,560
where is blue available ok it's only on

00:27:54,760 --> 00:27:59,440
these notes then I will automatically

00:27:56,560 --> 00:28:01,000
deploy the machines on these notes that

00:27:59,440 --> 00:28:02,350
can be all done transparent before the

00:28:01,000 --> 00:28:09,010
user but in the back end something has

00:28:02,350 --> 00:28:11,650
to happen so originally I wanted to give

00:28:09,010 --> 00:28:13,720
some nice numbers at this point so it

00:28:11,650 --> 00:28:17,050
function is not really properly defined

00:28:13,720 --> 00:28:19,120
and so we were putting things together

00:28:17,050 --> 00:28:21,820
in the past weeks and in the end we will

00:28:19,120 --> 00:28:25,060
know blanc lot is having a full cut

00:28:21,820 --> 00:28:27,730
through of all the pieces basically and

00:28:25,060 --> 00:28:30,050
idea is in one point to measure

00:28:27,730 --> 00:28:32,480
basically the round-trip time you have

00:28:30,050 --> 00:28:35,120
over network so the virtual machine

00:28:32,480 --> 00:28:36,710
doing some network in communication over

00:28:35,120 --> 00:28:38,600
this completes take to another different

00:28:36,710 --> 00:28:40,370
machine and measuring the round-trip

00:28:38,600 --> 00:28:42,530
time in the worst case case so i will

00:28:40,370 --> 00:28:45,260
expect numbers well a little bit later

00:28:42,530 --> 00:28:49,340
probably in a few weeks but right now

00:28:45,260 --> 00:28:52,010
it's a piece of a collection of pieces

00:28:49,340 --> 00:28:55,490
not yet really capable of doing the full

00:28:52,010 --> 00:28:58,100
measurement okay to summarize the

00:28:55,490 --> 00:29:00,800
results and well there is a need to

00:28:58,100 --> 00:29:04,250
simplify real time for data centers and

00:29:00,800 --> 00:29:06,530
similar setups there simply means that

00:29:04,250 --> 00:29:08,630
we standardize the setups of these basic

00:29:06,530 --> 00:29:10,160
real-time scenarios and there will

00:29:08,630 --> 00:29:11,690
always be special cases where the time

00:29:10,160 --> 00:29:13,970
is always about a lot of special cases

00:29:11,690 --> 00:29:16,010
but at least this default things should

00:29:13,970 --> 00:29:18,620
be run out of the box again built on top

00:29:16,010 --> 00:29:19,970
of these and we really want to make

00:29:18,620 --> 00:29:21,710
their the real time management

00:29:19,970 --> 00:29:25,790
manageable the real time machine

00:29:21,710 --> 00:29:27,860
manageable accountable so for do this

00:29:25,790 --> 00:29:31,730
and there's a need for a full root x

00:29:27,860 --> 00:29:35,120
take off yeah que bien and an open

00:29:31,730 --> 00:29:38,000
stakes is feasible baseline is branded a

00:29:35,120 --> 00:29:39,830
we can use standard chemo libvirt with

00:29:38,000 --> 00:29:41,870
these reference architectures were no

00:29:39,830 --> 00:29:43,610
changes required in this area they are

00:29:41,870 --> 00:29:46,850
some meat or changes in over a neutron

00:29:43,610 --> 00:29:48,460
and OpenStack and yeah the compute node

00:29:46,850 --> 00:29:51,320
tuning is still some area of improvement

00:29:48,460 --> 00:29:55,010
where well probably most of the effort

00:29:51,320 --> 00:29:56,960
is to spend on what we want to work on

00:29:55,010 --> 00:29:59,870
the near future as I said device owners

00:29:56,960 --> 00:30:02,510
can't be excluded from the first set up

00:29:59,870 --> 00:30:04,670
but immediately if you discuss things

00:30:02,510 --> 00:30:06,020
these requirement pop up again so we

00:30:04,670 --> 00:30:08,150
will probably look and do this very soon

00:30:06,020 --> 00:30:10,400
the major problem actually bought my son

00:30:08,150 --> 00:30:13,220
is not mention the interrupt because it

00:30:10,400 --> 00:30:15,440
drops on Linux is still nasty thing to

00:30:13,220 --> 00:30:17,780
manage regarding affinity and also the

00:30:15,440 --> 00:30:19,910
real-time sweat priority they are

00:30:17,780 --> 00:30:21,950
missing knobs to control this and this

00:30:19,910 --> 00:30:24,470
yeah you can work around with hex but

00:30:21,950 --> 00:30:26,150
basically we end up falling on interrupt

00:30:24,470 --> 00:30:28,450
just popping up and then hearing them

00:30:26,150 --> 00:30:31,820
afterwards so this should be improved

00:30:28,450 --> 00:30:34,370
and then basically becomes natural also

00:30:31,820 --> 00:30:36,980
ball form for the higher layers yeah

00:30:34,370 --> 00:30:39,680
again we want to look into this party

00:30:36,980 --> 00:30:42,290
tool set to encode more of the knowledge

00:30:39,680 --> 00:30:45,110
more of a default work into this area

00:30:42,290 --> 00:30:49,250
and basically keep the knowledge this

00:30:45,110 --> 00:30:51,380
way in a code form available and finally

00:30:49,250 --> 00:30:54,080
last but not least real-time device

00:30:51,380 --> 00:30:57,080
emulation is not completely from the

00:30:54,080 --> 00:30:59,750
table it requires more work but

00:30:57,080 --> 00:31:02,240
eventually it can work it will work we

00:30:59,750 --> 00:31:04,370
have use cases and requirements for this

00:31:02,240 --> 00:31:09,080
so in the future we will also address

00:31:04,370 --> 00:31:13,990
this size suppose ok thank you for

00:31:09,080 --> 00:31:13,990
attention and open for further questions

00:31:22,990 --> 00:31:28,040
I'm wondering that have you ever

00:31:25,070 --> 00:31:30,590
considered using containers in your

00:31:28,040 --> 00:31:32,210
solution because as we know Colonel

00:31:30,590 --> 00:31:34,880
scheduler tag and I have is a knowledge

00:31:32,210 --> 00:31:37,790
of RT tasking the ends and but for

00:31:34,880 --> 00:31:41,870
continuous it won't be a problem and it

00:31:37,790 --> 00:31:44,750
also can have have the other one change

00:31:41,870 --> 00:31:48,950
like isolation and imagine ability like

00:31:44,750 --> 00:31:52,970
either 11 thank you I'm not sure I fully

00:31:48,950 --> 00:31:55,430
got the question so is it about para

00:31:52,970 --> 00:31:57,470
virtualizing much-discussed again about

00:31:55,430 --> 00:32:02,390
power virtualizing the guests to enable

00:31:57,470 --> 00:32:04,310
this well we had a proposal for this a

00:32:02,390 --> 00:32:05,630
long time ago all this could be done but

00:32:04,310 --> 00:32:07,940
we never really follow it at to the

00:32:05,630 --> 00:32:11,060
point and it's really about the trait of

00:32:07,940 --> 00:32:13,640
but this paravirtualization in order to

00:32:11,060 --> 00:32:16,370
enable the inside with a guest what is

00:32:13,640 --> 00:32:19,400
this costing was what is here buying you

00:32:16,370 --> 00:32:20,930
and for this reference scenario there is

00:32:19,400 --> 00:32:23,300
actually no need to have this and

00:32:20,930 --> 00:32:26,180
because we assume the gas as a whole is

00:32:23,300 --> 00:32:28,550
one block it's real-time study what's

00:32:26,180 --> 00:32:32,060
done inside we can't do anything about

00:32:28,550 --> 00:32:35,380
it this is basically I think a feature

00:32:32,060 --> 00:32:39,710
which would enable more compression more

00:32:35,380 --> 00:32:42,860
consolidation thicker yeah consolidation

00:32:39,710 --> 00:32:44,870
of the setup and but I wouldn't go for

00:32:42,860 --> 00:32:46,850
this is the first steps let's get the

00:32:44,870 --> 00:32:49,250
basic things running and have a good

00:32:46,850 --> 00:32:51,330
feeling that it's manageable and then we

00:32:49,250 --> 00:32:54,240
can look for optimization steps

00:32:51,330 --> 00:33:06,510
it's probably nice area two flavors but

00:32:54,240 --> 00:33:10,350
right now is not of high so I was just

00:33:06,510 --> 00:33:13,640
curious about be host user and we first

00:33:10,350 --> 00:33:16,560
met you mentioned that the host user was

00:33:13,640 --> 00:33:19,410
more manageable for you and I'm curious

00:33:16,560 --> 00:33:21,690
what exactly are the management in the

00:33:19,410 --> 00:33:24,630
basis that you require versa you can add

00:33:21,690 --> 00:33:25,680
them to weho smith as well well the

00:33:24,630 --> 00:33:28,950
first thing is that you are more

00:33:25,680 --> 00:33:31,070
flexible regarding what you do then how

00:33:28,950 --> 00:33:36,180
you set up your system and while we use

00:33:31,070 --> 00:33:38,580
net in the kernel is just a responsible

00:33:36,180 --> 00:33:40,080
for a tuning or for quantification of

00:33:38,580 --> 00:33:43,410
the guests then you still need to attach

00:33:40,080 --> 00:33:45,690
a physical Nick to it and you have a lot

00:33:43,410 --> 00:33:48,810
of complex paths going through just to

00:33:45,690 --> 00:33:51,810
drive this physical nicht to ya connect

00:33:48,810 --> 00:33:55,680
to switch basically the physical package

00:33:51,810 --> 00:33:57,330
to the virtual mix and this is simply

00:33:55,680 --> 00:33:59,060
more complex because mokona code is

00:33:57,330 --> 00:34:01,950
involved you couldn't probably to unit

00:33:59,060 --> 00:34:04,170
but we didn't look into it as the model

00:34:01,950 --> 00:34:07,680
basically between for being a was the

00:34:04,170 --> 00:34:09,420
user they just have one threat running

00:34:07,680 --> 00:34:12,750
with root and priorities and a specific

00:34:09,420 --> 00:34:16,020
or pulling basically all cues that are

00:34:12,750 --> 00:34:17,970
involved in this is way simpler for my

00:34:16,020 --> 00:34:20,400
point of view I see so it's not just

00:34:17,970 --> 00:34:23,610
about managing the biggest net itself

00:34:20,400 --> 00:34:25,410
it's also about managing the Linux host

00:34:23,610 --> 00:34:27,900
the host linux network is a full

00:34:25,410 --> 00:34:30,600
real-time path from the physic to the

00:34:27,900 --> 00:34:33,870
virtual nic this has to be managed to

00:34:30,600 --> 00:34:36,420
some degree so the linux networking

00:34:33,870 --> 00:34:41,120
stack yes it does need some work for for

00:34:36,420 --> 00:34:41,120
real-time task I see thanks

00:34:45,589 --> 00:34:53,820
so you mentioned the irq latencies in

00:34:50,190 --> 00:34:56,669
devices my assignment why does it matter

00:34:53,820 --> 00:35:01,079
if you are running some bowling mordida

00:34:56,669 --> 00:35:03,390
k like stack in the guests for forty BDK

00:35:01,079 --> 00:35:05,430
and it's not an issue because the BTK is

00:35:03,390 --> 00:35:08,700
not doing interrupts for the physic

00:35:05,430 --> 00:35:10,650
factor that's not the problem the the

00:35:08,700 --> 00:35:12,210
issue is when you design the physical

00:35:10,650 --> 00:35:14,730
device directly to the virtual machine

00:35:12,210 --> 00:35:18,000
at the reservation is not using the PDK

00:35:14,730 --> 00:35:20,700
the virtual machine may use dpd k but

00:35:18,000 --> 00:35:30,780
this is for us it's a black box in this

00:35:20,700 --> 00:35:33,089
model you can do it of course yeah I

00:35:30,780 --> 00:35:36,800
just wondering how many CPUs are you

00:35:33,089 --> 00:35:39,480
assigning to the DPD case I'd mean

00:35:36,800 --> 00:35:41,640
currently only one on the one well we

00:35:39,480 --> 00:35:43,099
have one physically the current setup is

00:35:41,640 --> 00:35:46,430
pretty simply of one physical Nick

00:35:43,099 --> 00:35:49,260
representing the real-time network

00:35:46,430 --> 00:35:51,240
putting it make it available for for

00:35:49,260 --> 00:35:54,390
various guests well we would say

00:35:51,240 --> 00:35:57,720
basically it's reasonable to have one

00:35:54,390 --> 00:36:01,050
Corp physical interface if you have a

00:35:57,720 --> 00:36:03,270
significant high throughput you can have

00:36:01,050 --> 00:36:05,339
multiple physical Nick's driven by one

00:36:03,270 --> 00:36:08,569
physical core if you like to it really

00:36:05,339 --> 00:36:11,579
depends on what data rate you have but

00:36:08,569 --> 00:36:13,260
in our setups the the data it actually

00:36:11,579 --> 00:36:15,359
is not that high it's about the latency

00:36:13,260 --> 00:36:18,150
it's not that much about the throughput

00:36:15,359 --> 00:36:21,839
I suppose in nav scenarios it's really

00:36:18,150 --> 00:36:24,060
about a full physical screw food you can

00:36:21,839 --> 00:36:27,359
get from the physical mix and there you

00:36:24,060 --> 00:36:29,550
may possibly go for one Corp physical

00:36:27,359 --> 00:36:32,760
interface or so okay and then you run

00:36:29,550 --> 00:36:36,359
that the DPD k process as a real time

00:36:32,760 --> 00:36:39,690
process or just our normal we run at

00:36:36,359 --> 00:36:42,359
convey as its tuning itself so we have

00:36:39,690 --> 00:36:45,270
one it's using two course one is the

00:36:42,359 --> 00:36:47,910
management core 40 and the other things

00:36:45,270 --> 00:36:50,310
data paying for and it's tuning itself

00:36:47,910 --> 00:36:52,020
according to the default set ups and so

00:36:50,310 --> 00:36:54,670
it end ups with

00:36:52,020 --> 00:36:57,339
due to the assignment basically on an

00:36:54,670 --> 00:36:59,829
isolated CPUs data plane and there we

00:36:57,339 --> 00:37:01,839
get yeah Carly don't do it that much but

00:36:59,829 --> 00:37:03,819
this is work in progress basic able to

00:37:01,839 --> 00:37:05,289
also three validate what has to be done

00:37:03,819 --> 00:37:07,270
there it's easy basically it's the same

00:37:05,289 --> 00:37:10,270
scenario you have with a virtual CPU

00:37:07,270 --> 00:37:13,780
thread it has to be above real time wise

00:37:10,270 --> 00:37:16,000
above anything unimportant on that core

00:37:13,780 --> 00:37:17,950
and it can't dominate the core

00:37:16,000 --> 00:37:20,650
completely so there has to be a need to

00:37:17,950 --> 00:37:23,079
reschedule it once in a while so this

00:37:20,650 --> 00:37:25,089
has to be tuned somehow that the city

00:37:23,079 --> 00:37:27,910
was not starving a system of starting

00:37:25,089 --> 00:37:30,069
this way but ideally it has the core

00:37:27,910 --> 00:37:32,079
completely so one day when we have

00:37:30,069 --> 00:37:34,000
complete fool no edge sets it would be

00:37:32,079 --> 00:37:36,520
ideal just to run the thread there and

00:37:34,000 --> 00:37:39,789
leave the CPU alone well as part of you

00:37:36,520 --> 00:37:44,020
it's not the DPD are obsd BDK or just

00:37:39,789 --> 00:37:46,119
the DB DK it's a sturdy faulty pdk ok

00:37:44,020 --> 00:37:48,520
now you have no special about the OBS

00:37:46,119 --> 00:37:49,660
part i'm not aware what actually is the

00:37:48,520 --> 00:37:59,470
difference between both so I'm gonna

00:37:49,660 --> 00:38:03,880
just looking at the defaults ok ok how

00:37:59,470 --> 00:38:06,400
yeah just a comment about no hurts that

00:38:03,880 --> 00:38:09,849
you know the no hurts colonel feature to

00:38:06,400 --> 00:38:13,089
observe of the chick you said that you

00:38:09,849 --> 00:38:16,240
didn't find it useful or getting prove

00:38:13,089 --> 00:38:18,490
your numbers but we had two issues with

00:38:16,240 --> 00:38:22,359
it first of all it's still one second

00:38:18,490 --> 00:38:25,029
kick interruption anyway so it's not

00:38:22,359 --> 00:38:26,500
complete no headset well it's maybe no

00:38:25,029 --> 00:38:28,599
scheduler tick but it's still happening

00:38:26,500 --> 00:38:29,859
something once in a while and the other

00:38:28,599 --> 00:38:31,270
thing is actually give us an older

00:38:29,859 --> 00:38:33,010
version so therefore still the problem

00:38:31,270 --> 00:38:34,569
but Rick was describing that

00:38:33,010 --> 00:38:36,880
interruption were actually more frequent

00:38:34,569 --> 00:38:40,420
than just one once per second alright

00:38:36,880 --> 00:38:42,819
1000 is different then one second but

00:38:40,420 --> 00:38:46,480
what I'd like to say is that what we

00:38:42,819 --> 00:38:51,309
have found this far they host it seems

00:38:46,480 --> 00:38:55,119
to be always usable and in the guest he

00:38:51,309 --> 00:38:57,309
depends on the workload cyclic test is

00:38:55,119 --> 00:39:00,690
able depending on how your rents a

00:38:57,309 --> 00:39:04,680
psychic test it is able to trigger some

00:39:00,690 --> 00:39:07,619
worst cases but for Aggie pdk as far as

00:39:04,680 --> 00:39:10,020
I think it seems to be always usable

00:39:07,619 --> 00:39:15,800
okay all right well we will try to get

00:39:10,020 --> 00:39:18,480
unlimited hi so you have some

00:39:15,800 --> 00:39:21,240
recommendations for the host how to tune

00:39:18,480 --> 00:39:23,250
the host the Linux kernel the bias and

00:39:21,240 --> 00:39:25,560
things like that but as we described

00:39:23,250 --> 00:39:27,210
clearly also plays a big role in the

00:39:25,560 --> 00:39:30,089
latency so do you have any

00:39:27,210 --> 00:39:32,300
recommendations for the factors in km

00:39:30,089 --> 00:39:35,609
you like a particular type of devices or

00:39:32,300 --> 00:39:37,050
the pmu thread may be pinning that or

00:39:35,609 --> 00:39:40,140
any of that do you have any

00:39:37,050 --> 00:39:41,819
recommendations for that what currently

00:39:40,140 --> 00:39:43,950
the best thing about we have to have the

00:39:41,819 --> 00:39:46,710
partitioning so at the point county we

00:39:43,950 --> 00:39:49,410
have a queue emo exit on our real-time

00:39:46,710 --> 00:39:52,140
guest course we have lost that's the

00:39:49,410 --> 00:39:54,180
current model if you would like to

00:39:52,140 --> 00:39:56,550
include it then we are back basically in

00:39:54,180 --> 00:39:58,920
making sure able real-time capable there

00:39:56,550 --> 00:40:02,250
are some steps we have started to break

00:39:58,920 --> 00:40:04,230
up the locking so certain data planes in

00:40:02,250 --> 00:40:06,510
qmo emulation can actually be now split

00:40:04,230 --> 00:40:08,099
up you have multiple io thread suppose

00:40:06,510 --> 00:40:09,420
ability for this you can also tune them

00:40:08,099 --> 00:40:11,819
to a certain degree but in the end the

00:40:09,420 --> 00:40:13,800
device model has to be capable of

00:40:11,819 --> 00:40:19,680
running independent of the big Humalog

00:40:13,800 --> 00:40:23,339
and they're not many of these 213 I

00:40:19,680 --> 00:40:24,960
don't know and so this is not working

00:40:23,339 --> 00:40:26,550
out of the box definitely once we have

00:40:24,960 --> 00:40:28,500
such thing the scenario basically

00:40:26,550 --> 00:40:30,839
remains the same all the rest will

00:40:28,500 --> 00:40:33,690
remain workload for non real-time force

00:40:30,839 --> 00:40:36,119
and individual things individual devices

00:40:33,690 --> 00:40:38,220
with individual IO threats or with a

00:40:36,119 --> 00:40:41,550
pool of oil threats for real-time Hyun

00:40:38,220 --> 00:40:43,740
can then be split out can be put on a

00:40:41,550 --> 00:40:46,500
dedicated course as well real-time k put

00:40:43,740 --> 00:40:49,800
pause and then do the work then you may

00:40:46,500 --> 00:40:52,079
possibly accept certain user space cream

00:40:49,800 --> 00:40:54,450
or exits from your guests for these

00:40:52,079 --> 00:40:58,079
starting these specific real-time

00:40:54,450 --> 00:40:59,849
capability devices well it's a special

00:40:58,079 --> 00:41:02,160
case but in most case i think that the

00:40:59,849 --> 00:41:04,800
scenario where you are doing a network I

00:41:02,160 --> 00:41:07,530
all is fine for the real time we have

00:41:04,800 --> 00:41:09,210
currently in mind there are basically

00:41:07,530 --> 00:41:10,740
the legacy scenarios where this comes

00:41:09,210 --> 00:41:12,450
into play so if you have guests

00:41:10,740 --> 00:41:13,950
pre-existing guest machines which are

00:41:12,450 --> 00:41:16,480
expected certain

00:41:13,950 --> 00:41:18,579
devices on physical hardware people

00:41:16,480 --> 00:41:20,740
behaving deterministically also in the

00:41:18,579 --> 00:41:22,420
virtual environment they are basically

00:41:20,740 --> 00:41:24,130
have to look into this and possibly

00:41:22,420 --> 00:41:25,599
enabled we had a scenario like this it

00:41:24,130 --> 00:41:30,579
was pretending or setting two years ago

00:41:25,599 --> 00:41:32,200
about an RTC pc RTC o'clock which had to

00:41:30,579 --> 00:41:35,220
be enabled for real-time this would be

00:41:32,200 --> 00:41:46,059
such a candidate legacy i would say

00:41:35,220 --> 00:41:49,720
thanks please take the mug are there any

00:41:46,059 --> 00:41:51,880
plans to any great real-time profiling

00:41:49,720 --> 00:41:55,930
team d config any time in the future

00:41:51,880 --> 00:41:57,519
like one of the profile options so I

00:41:55,930 --> 00:42:00,339
didn't get the Christian are then he

00:41:57,519 --> 00:42:06,900
plans to include real time as a profile

00:42:00,339 --> 00:42:06,900
for Tod few Oh

00:42:15,330 --> 00:42:37,560
oh great what what kernel version is not

00:42:20,610 --> 00:42:41,220
required I did get a good conversation

00:42:37,560 --> 00:42:46,980
so sorry i would like to repeat but

00:42:41,220 --> 00:42:49,590
anyway yeah that's good the question i

00:42:46,980 --> 00:42:52,770
think was well we've used shouldn't we

00:42:49,590 --> 00:42:54,270
use to need to do the tuning and i was

00:42:52,770 --> 00:42:56,880
telling them that we've already got to

00:42:54,270 --> 00:42:59,100
start on a 2d profile called 2d profile

00:42:56,880 --> 00:43:02,660
real time mm-hmm right now the main

00:42:59,100 --> 00:43:06,750
thing it does is cpu an irq isolation so

00:43:02,660 --> 00:43:13,320
okay they may be keep that pride thank

00:43:06,750 --> 00:43:18,230
you so the question otherwise thank you

00:43:13,320 --> 00:43:18,230

YouTube URL: https://www.youtube.com/watch?v=SyhfctYqjc8


