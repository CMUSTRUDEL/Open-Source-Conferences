Title: [2015] Virtualizing the Locomotive: Ready, Set, Go! by Mark Kraeling
Publication date: 2015-09-02
Playlist: KVM Forum 2015
Description: 
	Virtualization has so far been largely absent on locomotives in North America. As railroad customers move to view their locomotives as networked assets, and with the introduction of concepts such as mobile data centers, In 2015, standard platforms will be deployed by GE that utilize Xen for x86-based processors, and KVM for ARM-based processors. This end-user session will discuss the desired features that are needed for a hypervisor, the enhancements that could be considered in the locomotive real-time environment, and the applications that will utilize this technology. Finally, as an option, actual locomotive control systems equipment will be brought to the presentation to show a quick demonstration of the applications, how they communicate data off-board, and the industrial hardware that it runs on.

Mark Kraeling
GE
Mark is a product manager at GE Transportation developing architectures for onboard locomotive control and information systems. He is a regular speaker at the Embedded Systems Conference where he presents papers on embedded software, communications protocols, and safety-critical architectures. Mark co-authored a book "Software Engineering for Embedded Systems" in 2013. He currently is working on virtualization-enabled platforms on locomotives to support "Big Data" diagnostics and prognostics.

Slides: https://drive.google.com/file/d/0B2NUUd2i8z9UQ05tRHQyQWU5VjA/view?usp=sharing

Note: We apologize for missing slide screenshots. Our version of presentation does not contain them as author updated it after providing it to us and we were unable to obtain updated version due to technical issues.
Captions: 
	00:00:00,000 --> 00:00:19,140
I thought this is interesting when I

00:00:16,920 --> 00:00:20,850
looked up the whole conference linux

00:00:19,140 --> 00:00:22,710
foundation's on kvm one of the

00:00:20,850 --> 00:00:26,820
submission categories they had was an

00:00:22,710 --> 00:00:29,070
end-user presentation so I thought hey

00:00:26,820 --> 00:00:30,539
this will be fantastic as an end user I

00:00:29,070 --> 00:00:32,520
can come and actually talk about how we

00:00:30,539 --> 00:00:35,160
plan to use kvm Zen and how we're using

00:00:32,520 --> 00:00:36,840
it today so I spoke at the Zen

00:00:35,160 --> 00:00:39,180
developers conference don't throw things

00:00:36,840 --> 00:00:41,510
at me on Monday and now I'm here to talk

00:00:39,180 --> 00:00:44,520
about kvm today so I will keep this to

00:00:41,510 --> 00:00:46,320
specifically kvm but I'll answer

00:00:44,520 --> 00:00:47,789
questions for both of you have it so

00:00:46,320 --> 00:00:50,309
again I'm an end user I'm not a

00:00:47,789 --> 00:00:51,750
developer I haven't contributed the

00:00:50,309 --> 00:00:53,579
upstream or anything like that though I

00:00:51,750 --> 00:00:56,309
probably should at some point when we

00:00:53,579 --> 00:00:58,350
start getting really going on the path

00:00:56,309 --> 00:00:59,460
with this I thought it'd be a great way

00:00:58,350 --> 00:01:03,030
to kind of give you an end-user

00:00:59,460 --> 00:01:04,229
perspective of how we use kvm maybe some

00:01:03,030 --> 00:01:06,000
of you our end users and you kind of

00:01:04,229 --> 00:01:08,280
maybe learn something from us or learn

00:01:06,000 --> 00:01:12,299
what not to do either way is fine I

00:01:08,280 --> 00:01:14,010
suppose this is something I put in this

00:01:12,299 --> 00:01:16,350
is like the little slider the thing you

00:01:14,010 --> 00:01:17,729
get in front of a TV show says don't do

00:01:16,350 --> 00:01:19,409
the stunts you're getting ready to see

00:01:17,729 --> 00:01:21,990
you know that type of thing so just a

00:01:19,409 --> 00:01:23,790
quick disclosure I am presenting on

00:01:21,990 --> 00:01:26,220
behalf of myself I do work at GE

00:01:23,790 --> 00:01:29,040
transportation but this is not anyway a

00:01:26,220 --> 00:01:30,630
GE transportation presentation where

00:01:29,040 --> 00:01:32,729
we're selling you something or showing

00:01:30,630 --> 00:01:35,689
our products or anything like that this

00:01:32,729 --> 00:01:37,650
is basically mark railing use and GE

00:01:35,689 --> 00:01:40,290
letterheads at the bottom of the slides

00:01:37,650 --> 00:01:41,970
and of course I energy employees so keep

00:01:40,290 --> 00:01:43,380
in mind that this if you've heard a GE

00:01:41,970 --> 00:01:46,110
person say something completely

00:01:43,380 --> 00:01:48,119
different yeah that that can happen so

00:01:46,110 --> 00:01:50,610
here's the agenda I thought we would go

00:01:48,119 --> 00:01:53,369
through first talk a little bit about

00:01:50,610 --> 00:01:54,540
the locomotive system that will kind of

00:01:53,369 --> 00:01:56,759
give you a flavor for where we're

00:01:54,540 --> 00:01:59,040
thinking about using virtualization they

00:01:56,759 --> 00:02:01,200
actually have some use cases for us and

00:01:59,040 --> 00:02:04,439
why we think virtualization is important

00:02:01,200 --> 00:02:05,729
on our locomotive systems third I want

00:02:04,439 --> 00:02:08,369
to actually talk about what we use for

00:02:05,729 --> 00:02:11,670
hardware platform because it's certainly

00:02:08,369 --> 00:02:13,050
a lot different than what typically is

00:02:11,670 --> 00:02:15,900
used in maybe a back office

00:02:13,050 --> 00:02:18,150
so things like 32 gigabytes of ram it's

00:02:15,900 --> 00:02:19,230
like no no no we have much much less

00:02:18,150 --> 00:02:21,540
than that so I do want to talk about

00:02:19,230 --> 00:02:24,510
that a little bit and then finally kind

00:02:21,540 --> 00:02:27,600
of wrapping things up is what we as end

00:02:24,510 --> 00:02:29,400
users at GE feel is important to us in

00:02:27,600 --> 00:02:30,570
virtualization so hopefully a lot of

00:02:29,400 --> 00:02:32,700
that I'm actually talked about during

00:02:30,570 --> 00:02:34,500
the presentation but this will be kind

00:02:32,700 --> 00:02:37,770
of a nice wrap up at the end to kind of

00:02:34,500 --> 00:02:39,560
tie it all together so just a little bit

00:02:37,770 --> 00:02:41,760
of background about G transportation I

00:02:39,560 --> 00:02:45,060
did talk to somebody yesterday and they

00:02:41,760 --> 00:02:46,980
said GE makes trains locomotives I

00:02:45,060 --> 00:02:48,360
didn't know that so I figured I'd go

00:02:46,980 --> 00:02:51,590
ahead and throw these slides in here at

00:02:48,360 --> 00:02:54,510
the last minute G transportation is a

00:02:51,590 --> 00:02:56,940
5.6 billion dollar business for GE so

00:02:54,510 --> 00:02:58,560
we're pretty darn large we sell

00:02:56,940 --> 00:03:01,140
locomotives not only to the US but

00:02:58,560 --> 00:03:03,120
worldwide we sell into Saudi Arabia

00:03:01,140 --> 00:03:06,090
North Africa Australia's a big customer

00:03:03,120 --> 00:03:06,960
Brazil so we sell all over the world our

00:03:06,090 --> 00:03:10,260
headquarters are actually in chicago

00:03:06,960 --> 00:03:12,960
illinois they were moved there about two

00:03:10,260 --> 00:03:14,250
years ago but prior to that our

00:03:12,960 --> 00:03:15,960
headquarters was always in Erie

00:03:14,250 --> 00:03:18,810
Pennsylvania which is where our primary

00:03:15,960 --> 00:03:20,790
locomotive building facility is and that

00:03:18,810 --> 00:03:24,480
facility is actually the third largest

00:03:20,790 --> 00:03:26,340
excuse me third oldest GE facility that

00:03:24,480 --> 00:03:29,670
GE has so we were the number three I

00:03:26,340 --> 00:03:31,170
think and it was built around 1910 1915

00:03:29,670 --> 00:03:33,720
something like that was when they

00:03:31,170 --> 00:03:34,800
started making locomotives obviously the

00:03:33,720 --> 00:03:36,000
other industries that you see they

00:03:34,800 --> 00:03:41,190
weren't kind of involved all over the

00:03:36,000 --> 00:03:42,390
world as far as GE goes these are the

00:03:41,190 --> 00:03:44,880
sorts of things that we work on is

00:03:42,390 --> 00:03:46,830
products and I promise you this will be

00:03:44,880 --> 00:03:48,000
the last marketing fluff side you can

00:03:46,830 --> 00:03:49,410
tell the marketing fluff sides because

00:03:48,000 --> 00:03:51,510
they look really really good my slides

00:03:49,410 --> 00:03:52,980
are not going to look so good but it's

00:03:51,510 --> 00:03:54,900
when I borrowed these are the different

00:03:52,980 --> 00:03:58,830
businesses that we're in I am sitting up

00:03:54,900 --> 00:04:00,720
here basically in this top right if

00:03:58,830 --> 00:04:03,690
there are electronics that are on board

00:04:00,720 --> 00:04:05,430
a locomotive that's going to be in our

00:04:03,690 --> 00:04:08,120
business in our cab electronic business

00:04:05,430 --> 00:04:11,100
so we do different control systems

00:04:08,120 --> 00:04:13,680
information systems etc again on the cab

00:04:11,100 --> 00:04:16,890
of a locomotive exporting lots and lots

00:04:13,680 --> 00:04:19,380
of data off the locomotive a couple of

00:04:16,890 --> 00:04:21,000
products that we do have in cab

00:04:19,380 --> 00:04:23,669
electronics the first one I actually

00:04:21,000 --> 00:04:25,300
just described to you if you've ever

00:04:23,669 --> 00:04:27,430
seen a train that has

00:04:25,300 --> 00:04:29,020
is one or two locomotives in the front

00:04:27,430 --> 00:04:30,490
and then a bunch of rail cars and then

00:04:29,020 --> 00:04:33,699
maybe there's a locomotive in the middle

00:04:30,490 --> 00:04:35,560
or the back obviously there's no

00:04:33,699 --> 00:04:37,030
engineers on board that any locomotives

00:04:35,560 --> 00:04:38,860
you see throughout the train they're all

00:04:37,030 --> 00:04:41,590
basically controlled by radio control

00:04:38,860 --> 00:04:43,090
from the operator in the front another

00:04:41,590 --> 00:04:44,680
interesting tidbit is that those

00:04:43,090 --> 00:04:47,259
locomotives that are in the middle or in

00:04:44,680 --> 00:04:49,270
the back don't necessarily follow

00:04:47,259 --> 00:04:50,229
exactly what the front is doing the

00:04:49,270 --> 00:04:52,150
engineer could command it to do

00:04:50,229 --> 00:04:53,970
something different so if you think

00:04:52,150 --> 00:04:57,879
about a train that's two miles long

00:04:53,970 --> 00:04:59,889
going over a hill it is very normal to

00:04:57,879 --> 00:05:02,319
have the locomotives in the front have

00:04:59,889 --> 00:05:04,330
full braking on and the locomotives in

00:05:02,319 --> 00:05:05,680
the back actually have traction on to

00:05:04,330 --> 00:05:07,569
push the rest of the train up the hill

00:05:05,680 --> 00:05:09,009
so it's kind of it's basically it's a

00:05:07,569 --> 00:05:11,500
product called distributed power that is

00:05:09,009 --> 00:05:14,440
one of our products another one that

00:05:11,500 --> 00:05:16,419
I'll mention for cab electronics a lot

00:05:14,440 --> 00:05:17,979
of the switchers or older locomotives

00:05:16,419 --> 00:05:19,449
you see in a yard a lot of them all have

00:05:17,979 --> 00:05:21,610
a little yellow strobe light on it if

00:05:19,449 --> 00:05:24,909
you've ever seen that there's nobody on

00:05:21,610 --> 00:05:26,409
board those locomotives there's people

00:05:24,909 --> 00:05:28,000
in the yard to have a little handheld

00:05:26,409 --> 00:05:30,460
unit and are basically controlling

00:05:28,000 --> 00:05:31,930
locomotive and it's a lot safer and

00:05:30,460 --> 00:05:33,340
somebody on the ground using a radio

00:05:31,930 --> 00:05:34,569
telling engineer what to do so that

00:05:33,340 --> 00:05:36,460
person can actually control the

00:05:34,569 --> 00:05:40,180
locomotive remotely so it's like a giant

00:05:36,460 --> 00:05:41,860
train set basically okay so a lot of

00:05:40,180 --> 00:05:45,130
cool things I get to do play with trains

00:05:41,860 --> 00:05:48,520
drivetrains whatever so it's a lot of

00:05:45,130 --> 00:05:50,440
fun so this is me yes the picture is

00:05:48,520 --> 00:05:51,909
about five years old I keep using it at

00:05:50,440 --> 00:05:54,460
some point I'm going to not be able to

00:05:51,909 --> 00:05:56,319
use it anymore but again I work for cab

00:05:54,460 --> 00:05:58,750
electronics I'm actually based in

00:05:56,319 --> 00:06:00,610
Melbourne Florida so I am not in Erie

00:05:58,750 --> 00:06:02,440
Pennsylvania so that's actually kind of

00:06:00,610 --> 00:06:05,440
a nice nice thing as our cab electronics

00:06:02,440 --> 00:06:09,550
group is down in Florida and have a

00:06:05,440 --> 00:06:11,590
product manager / architect in GE lingo

00:06:09,550 --> 00:06:13,599
I always introduce myself as a product

00:06:11,590 --> 00:06:16,330
manager because in GE everybody knows

00:06:13,599 --> 00:06:18,849
what a product manager does outside of

00:06:16,330 --> 00:06:21,729
GE like for instance in this forum I am

00:06:18,849 --> 00:06:23,080
a product architect I'm actually a

00:06:21,729 --> 00:06:25,180
product manager that doesn't have a

00:06:23,080 --> 00:06:27,849
product most product managers actually

00:06:25,180 --> 00:06:29,770
have a product I basically work in a cab

00:06:27,849 --> 00:06:32,560
like electronics group to define

00:06:29,770 --> 00:06:34,539
architectures that is my job so whether

00:06:32,560 --> 00:06:36,500
it's product or system architecture even

00:06:34,539 --> 00:06:40,130
software architecture that's what I do

00:06:36,500 --> 00:06:44,060
my forte because I started out doing

00:06:40,130 --> 00:06:45,500
real-time controls classical definition

00:06:44,060 --> 00:06:47,510
of me as an embedded software engineer

00:06:45,500 --> 00:06:48,830
so my schooling in fact most of my

00:06:47,510 --> 00:06:51,230
experience has been doing embedded

00:06:48,830 --> 00:06:53,000
real-time software I also do a lot of

00:06:51,230 --> 00:06:55,460
the wired and wireless communication

00:06:53,000 --> 00:06:58,220
designs but for the products i just

00:06:55,460 --> 00:07:00,320
described earlier and i'm a huge linux

00:06:58,220 --> 00:07:01,820
and armed guy everybody GE knows me at

00:07:00,320 --> 00:07:03,290
this because every time i walk into a

00:07:01,820 --> 00:07:05,810
meeting and they talk about other os's

00:07:03,290 --> 00:07:07,460
or other architectures I'm the one says

00:07:05,810 --> 00:07:09,830
why didn't we use this or can't we use

00:07:07,460 --> 00:07:11,990
this or did you consider this so I am

00:07:09,830 --> 00:07:13,880
known around the circles at GE of being

00:07:11,990 --> 00:07:16,460
the the Linux and armed guy big time so

00:07:13,880 --> 00:07:17,990
hopefully that is okay with people in

00:07:16,460 --> 00:07:21,050
the room nobody's throwing things I

00:07:17,990 --> 00:07:23,930
guess that's good so I want to talk a

00:07:21,050 --> 00:07:26,720
little about the locomotive system the

00:07:23,930 --> 00:07:28,550
locomotive system is basically defined

00:07:26,720 --> 00:07:31,400
is the easiest way to do it it's a power

00:07:28,550 --> 00:07:34,610
plan on wheels there's a very large

00:07:31,400 --> 00:07:37,700
diesel engine typically between 12 and

00:07:34,610 --> 00:07:40,610
16 cylinders that generates power and

00:07:37,700 --> 00:07:43,430
the power is basically put to traction

00:07:40,610 --> 00:07:47,000
motors electric traction motors this is

00:07:43,430 --> 00:07:49,610
not a mechanical device meaning the

00:07:47,000 --> 00:07:51,530
motor itself the 12 or 16 valve engine

00:07:49,610 --> 00:07:53,450
is not directly connected to the wheels

00:07:51,530 --> 00:07:56,090
there isn't a transmission in the world

00:07:53,450 --> 00:07:57,350
that can handle 40 400 horsepower so

00:07:56,090 --> 00:07:58,729
even the haul trucks that you see

00:07:57,350 --> 00:08:00,470
running around the mines it's all

00:07:58,729 --> 00:08:02,000
electric drive it's the only way you can

00:08:00,470 --> 00:08:04,850
do it mechanical linkages wouldn't be

00:08:02,000 --> 00:08:06,290
possible with having a power plant on

00:08:04,850 --> 00:08:09,140
wheels one of the things I always tell

00:08:06,290 --> 00:08:11,900
people is things like wait are not

00:08:09,140 --> 00:08:13,450
important the more way to locomotive has

00:08:11,900 --> 00:08:15,710
actually the more traction you'll have

00:08:13,450 --> 00:08:17,150
for the wheels on the rail in fact a lot

00:08:15,710 --> 00:08:19,280
of locomotives when they're rebuilt or

00:08:17,150 --> 00:08:21,680
built with newer engines that might be

00:08:19,280 --> 00:08:23,870
lighter they actually add weight they'll

00:08:21,680 --> 00:08:25,910
add huge concrete blocks with stealing

00:08:23,870 --> 00:08:28,160
them whatever just to add weight so

00:08:25,910 --> 00:08:30,229
weights not a big concern for us really

00:08:28,160 --> 00:08:32,990
powers not a big concern right we gotta

00:08:30,229 --> 00:08:34,669
power plan on wheels so whether I use 10

00:08:32,990 --> 00:08:37,159
watts or 8 watts it really doesn't make

00:08:34,669 --> 00:08:38,780
any difference for us and our

00:08:37,159 --> 00:08:41,510
electronics design the most important

00:08:38,780 --> 00:08:44,390
thing is heat heat and heat which does

00:08:41,510 --> 00:08:46,459
kind of translate to power we all of our

00:08:44,390 --> 00:08:49,010
electronics need to operate minus 42

00:08:46,459 --> 00:08:49,790
plus 70 the middle australia gets really

00:08:49,010 --> 00:08:51,380
really hot

00:08:49,790 --> 00:08:53,810
and a lot of you know northern County

00:08:51,380 --> 00:08:56,420
gets really really cold so we need to

00:08:53,810 --> 00:08:58,340
survive basically all those different

00:08:56,420 --> 00:09:01,550
temperature extremes I do have a couple

00:08:58,340 --> 00:09:02,780
of videos and I'm going to kind of talk

00:09:01,550 --> 00:09:05,210
through them hopefully the sound will be

00:09:02,780 --> 00:09:07,640
turned down enough where I can talk over

00:09:05,210 --> 00:09:10,070
them so for us it's actually all about

00:09:07,640 --> 00:09:12,080
information when we start thinking about

00:09:10,070 --> 00:09:14,690
virtualization yes I got to it 10

00:09:12,080 --> 00:09:16,220
minutes in just like I scheduled for us

00:09:14,690 --> 00:09:19,100
it's really about information so I don't

00:09:16,220 --> 00:09:20,690
want to show you in this video we have a

00:09:19,100 --> 00:09:21,860
locomotive that's basically proceeding

00:09:20,690 --> 00:09:24,140
to sighting and there's an old

00:09:21,860 --> 00:09:25,670
locomotive that's supposed to meet him

00:09:24,140 --> 00:09:27,560
there we're going to go to the right

00:09:25,670 --> 00:09:28,640
that of the locomotive sitting a left

00:09:27,560 --> 00:09:31,280
now a couple of things you're going to

00:09:28,640 --> 00:09:32,630
see in this video number one is that at

00:09:31,280 --> 00:09:34,190
this point with the data on our

00:09:32,630 --> 00:09:35,870
locomotive and the data on the on the

00:09:34,190 --> 00:09:38,330
other locomotive we know there's a

00:09:35,870 --> 00:09:40,880
problem here that other locomotive

00:09:38,330 --> 00:09:42,950
doesn't have any more air it's still

00:09:40,880 --> 00:09:45,830
moving so the driver cannot stop the

00:09:42,950 --> 00:09:47,600
train he knows this but us us as a

00:09:45,830 --> 00:09:49,430
locomotive coming to the siding we

00:09:47,600 --> 00:09:51,200
really don't know the signals are

00:09:49,430 --> 00:09:52,460
actually set for us to be just fine to

00:09:51,200 --> 00:09:53,990
go into the siding but we don't know

00:09:52,460 --> 00:09:55,910
that that locomotives actually can see

00:09:53,990 --> 00:09:57,170
it just creeping and if you look right

00:09:55,910 --> 00:09:59,870
here the guys actually going to jump off

00:09:57,170 --> 00:10:03,520
that engineers like I'm out of here see

00:09:59,870 --> 00:10:05,300
he jumped off and oops big collision

00:10:03,520 --> 00:10:07,130
locomotives are right around two and a

00:10:05,300 --> 00:10:10,910
half three million dollars the cargo on

00:10:07,130 --> 00:10:14,260
board also expensive if things like

00:10:10,910 --> 00:10:16,310
vehicles are on board guess what

00:10:14,260 --> 00:10:17,630
railroad company may be paying for a lot

00:10:16,310 --> 00:10:18,830
of vehicles have just got hurt if

00:10:17,630 --> 00:10:20,150
they're sitting on some cars in the back

00:10:18,830 --> 00:10:21,320
you know brand new Fords brand new

00:10:20,150 --> 00:10:25,610
Chevrolet's whatever may be getting

00:10:21,320 --> 00:10:28,310
shipped another video again talking

00:10:25,610 --> 00:10:30,560
about information this engineer is

00:10:28,310 --> 00:10:32,570
assuming because he sees another train

00:10:30,560 --> 00:10:34,310
parked there but he's actually going to

00:10:32,570 --> 00:10:35,950
go on the sighting that doesn't have a

00:10:34,310 --> 00:10:38,080
train on it

00:10:35,950 --> 00:10:39,880
but he's not he's actually supposed to

00:10:38,080 --> 00:10:42,130
go and sit at this sighting while

00:10:39,880 --> 00:10:44,230
another one comes in he just now

00:10:42,130 --> 00:10:46,720
realizes it and knows he's going to hit

00:10:44,230 --> 00:10:49,780
the back of this train again the signals

00:10:46,720 --> 00:10:51,970
were aligned for him just by the way

00:10:49,780 --> 00:10:54,640
that little foot aluminum foil looking

00:10:51,970 --> 00:10:55,900
stuff is quarter-inch plate steel it

00:10:54,640 --> 00:10:59,470
crinkles like that when you hit it with

00:10:55,900 --> 00:11:01,660
a lot of force again we know a lot of

00:10:59,470 --> 00:11:04,150
information about us moving signal

00:11:01,660 --> 00:11:05,440
aspects the way the track is aligned we

00:11:04,150 --> 00:11:06,970
know the other locomotive sitting there

00:11:05,440 --> 00:11:08,710
so when we start thinking about

00:11:06,970 --> 00:11:10,480
virtualization we actually want to run

00:11:08,710 --> 00:11:12,400
multiple sets of software concurrently

00:11:10,480 --> 00:11:14,290
at the same time on our locomotive

00:11:12,400 --> 00:11:16,180
hardware now some of that software might

00:11:14,290 --> 00:11:17,800
be written by third parties some of it

00:11:16,180 --> 00:11:19,180
may be written by GE but that's what we

00:11:17,800 --> 00:11:24,130
want to do is have it all running on the

00:11:19,180 --> 00:11:26,470
same platform so let's jump this is the

00:11:24,130 --> 00:11:29,230
way GE in fact I think a lot of people

00:11:26,470 --> 00:11:30,910
probably used to do things as soon as we

00:11:29,230 --> 00:11:36,280
wanted to have an application we thought

00:11:30,910 --> 00:11:38,260
of a new product we'd find a box we find

00:11:36,280 --> 00:11:42,460
a software team and asked us they wanted

00:11:38,260 --> 00:11:44,290
to use we put a cell antenna and a GPS

00:11:42,460 --> 00:11:45,880
on the roof and basically it started

00:11:44,290 --> 00:11:48,040
looking like that everybody their own

00:11:45,880 --> 00:11:50,080
box their own alas nothing talked

00:11:48,040 --> 00:11:51,820
together everybody had their own cell

00:11:50,080 --> 00:11:54,900
phone plan and we started basically

00:11:51,820 --> 00:11:57,520
putting all kinds of boxes on locomotive

00:11:54,900 --> 00:11:58,990
what we've started to do and this was

00:11:57,520 --> 00:12:00,520
kind of the first step is we took all of

00:11:58,990 --> 00:12:02,260
those boxes and said okay you don't get

00:12:00,520 --> 00:12:03,670
your own cell phone modem anymore

00:12:02,260 --> 00:12:05,530
because we're tired of paying cell phone

00:12:03,670 --> 00:12:07,540
bills the customer was too i'll be

00:12:05,530 --> 00:12:11,440
honest and we started networking

00:12:07,540 --> 00:12:14,050
together into new hardware i actually

00:12:11,440 --> 00:12:16,270
have it up here it's extremely hard to

00:12:14,050 --> 00:12:18,160
see I know I've kind of hold it up but

00:12:16,270 --> 00:12:20,170
basically this is what a standard

00:12:18,160 --> 00:12:22,540
locomotive platform looks like it's just

00:12:20,170 --> 00:12:24,280
extremely heavy this is a four slot

00:12:22,540 --> 00:12:27,160
version that's an 8 slot it basically

00:12:24,280 --> 00:12:30,180
has one wireless card LTE that everybody

00:12:27,160 --> 00:12:32,110
can use a lot of networking ports and

00:12:30,180 --> 00:12:33,910
this particular box which I'll talk

00:12:32,110 --> 00:12:36,160
about more in a second actually has two

00:12:33,910 --> 00:12:37,870
processor cards in it but we'd like to

00:12:36,160 --> 00:12:40,360
be able to do if we start moving to this

00:12:37,870 --> 00:12:42,550
slide is get rid of those boxes and

00:12:40,360 --> 00:12:45,550
actually have the applications move to

00:12:42,550 --> 00:12:48,010
those cards that's GE software third

00:12:45,550 --> 00:12:49,270
party software from other suppliers

00:12:48,010 --> 00:12:50,950
even the customers go and write their

00:12:49,270 --> 00:12:52,360
own as well so we want all of that

00:12:50,950 --> 00:12:54,730
software actually running on those two

00:12:52,360 --> 00:12:59,230
cards maybe even migrating between the

00:12:54,730 --> 00:13:00,610
two cards as conditions change so again

00:12:59,230 --> 00:13:02,020
that's what we're thinking you know

00:13:00,610 --> 00:13:04,870
whether it's business apps customers

00:13:02,020 --> 00:13:06,010
apps GE apps third-party apps we all

00:13:04,870 --> 00:13:09,160
want them to run on that that

00:13:06,010 --> 00:13:12,340
virtualization of mobile data center if

00:13:09,160 --> 00:13:14,670
for lack of a better word so I'm going

00:13:12,340 --> 00:13:17,140
to kind of jump through these use cases

00:13:14,670 --> 00:13:19,360
again this is exactly what we always did

00:13:17,140 --> 00:13:21,370
I was hoping you see some nods or

00:13:19,360 --> 00:13:23,380
something so maybe we're just may we're

00:13:21,370 --> 00:13:25,510
all goofed up this is what we always

00:13:23,380 --> 00:13:27,420
used to do we got a great idea for a new

00:13:25,510 --> 00:13:31,420
product great idea for a new solution

00:13:27,420 --> 00:13:34,450
we'd go and create our own box from some

00:13:31,420 --> 00:13:36,970
supplier proprietary again most times

00:13:34,450 --> 00:13:39,130
ask the software engineers what OS you

00:13:36,970 --> 00:13:40,930
guys want how much memory do you need

00:13:39,130 --> 00:13:44,380
and they'd give some sort of an answer

00:13:40,930 --> 00:13:46,510
based on the thought of the day then

00:13:44,380 --> 00:13:48,670
they go and write an app and when it was

00:13:46,510 --> 00:13:50,890
done we plopped on a box and it didn't

00:13:48,670 --> 00:13:52,530
talk to anything else it certainly

00:13:50,890 --> 00:13:54,400
served whatever purpose it was serving

00:13:52,530 --> 00:13:57,100
but it was not part of an overall

00:13:54,400 --> 00:13:59,710
network strategy so that is exactly what

00:13:57,100 --> 00:14:01,600
what we used to do and that we're moving

00:13:59,710 --> 00:14:03,040
away from as we speak in fact we've

00:14:01,600 --> 00:14:05,340
we've the platform you see here has

00:14:03,040 --> 00:14:08,230
actually been out for about three years

00:14:05,340 --> 00:14:11,100
so one of the things for our use case

00:14:08,230 --> 00:14:13,720
I'll put together for GE transportation

00:14:11,100 --> 00:14:17,650
obviously the first one first benefit

00:14:13,720 --> 00:14:19,540
for us is cost reduction so instead of

00:14:17,650 --> 00:14:21,570
having six or seven or eight different

00:14:19,540 --> 00:14:24,180
black boxes all doing their own thing

00:14:21,570 --> 00:14:26,770
all with their own obsolescence plan

00:14:24,180 --> 00:14:28,600
parts are going obsolete some have power

00:14:26,770 --> 00:14:30,910
pcs some have completely different

00:14:28,600 --> 00:14:32,920
processors we thought it'd be much more

00:14:30,910 --> 00:14:35,020
effective to move to a virtualized space

00:14:32,920 --> 00:14:39,540
where we can actually reuse existing

00:14:35,020 --> 00:14:44,020
hardware and have more utilization

00:14:39,540 --> 00:14:46,840
second we want to try to have a way that

00:14:44,020 --> 00:14:48,940
we can actually separate our software

00:14:46,840 --> 00:14:50,650
applications I did mention that we

00:14:48,940 --> 00:14:52,300
actually have software applications

00:14:50,650 --> 00:14:55,330
running on this written by different

00:14:52,300 --> 00:14:56,920
people so if they crash or they need to

00:14:55,330 --> 00:14:58,150
do a reboot or something we don't want

00:14:56,920 --> 00:14:59,320
it to affect all the other operating

00:14:58,150 --> 00:15:00,720
systems and applications that are

00:14:59,320 --> 00:15:02,220
running in the system

00:15:00,720 --> 00:15:04,860
so we see it as being able to do that

00:15:02,220 --> 00:15:07,170
and secondly an area that we're working

00:15:04,860 --> 00:15:09,509
on right now is actually having what we

00:15:07,170 --> 00:15:11,670
call high availability so we want to

00:15:09,509 --> 00:15:13,079
label applications as this is the most

00:15:11,670 --> 00:15:15,810
important thing that needs to be running

00:15:13,079 --> 00:15:18,000
so if we do have a hardware processor

00:15:15,810 --> 00:15:20,310
card go down or processor module go down

00:15:18,000 --> 00:15:22,709
we'd like to actually move over

00:15:20,310 --> 00:15:24,389
dynamically to the other hardware and

00:15:22,709 --> 00:15:28,589
keep running so that's another use case

00:15:24,389 --> 00:15:30,779
that we have for sure next one is

00:15:28,589 --> 00:15:33,959
flexibility and scalability once we

00:15:30,779 --> 00:15:36,000
start getting into thinking about okay

00:15:33,959 --> 00:15:39,240
at whether it's OS is written by

00:15:36,000 --> 00:15:41,540
particular third parties or by GE we

00:15:39,240 --> 00:15:43,949
also like to have the flexibility of

00:15:41,540 --> 00:15:46,769
separating a lot of our different

00:15:43,949 --> 00:15:50,310
software elements one of the things that

00:15:46,769 --> 00:15:52,050
we get into edgy transportation is if we

00:15:50,310 --> 00:15:53,129
have a very large software image and

00:15:52,050 --> 00:15:56,399
maybe there's a couple of applications

00:15:53,129 --> 00:15:57,899
that are running if we go and change one

00:15:56,399 --> 00:16:00,420
application especially for thinking

00:15:57,899 --> 00:16:02,550
about something that's has some safety

00:16:00,420 --> 00:16:06,059
implications to it we end up having to

00:16:02,550 --> 00:16:08,069
go and retest everything that's in that

00:16:06,059 --> 00:16:10,050
application now certainly you can do an

00:16:08,069 --> 00:16:12,240
analysis and say well I change this here

00:16:10,050 --> 00:16:13,889
I shouldn't have to do that but the

00:16:12,240 --> 00:16:16,680
point is is that we do at least have to

00:16:13,889 --> 00:16:18,149
retest portions of it in fact we have to

00:16:16,680 --> 00:16:19,709
do an overall system test which can

00:16:18,149 --> 00:16:22,649
actually take quite a bit of time and

00:16:19,709 --> 00:16:25,139
resources so by us going and separating

00:16:22,649 --> 00:16:27,389
some of these functions out we see it as

00:16:25,139 --> 00:16:29,850
a nice way to be able to make changes

00:16:27,389 --> 00:16:35,699
internal to the application and not have

00:16:29,850 --> 00:16:37,230
to go and retest the entire system this

00:16:35,699 --> 00:16:39,649
is kind of a summary of all of our use

00:16:37,230 --> 00:16:42,569
cases the one that I did want to mention

00:16:39,649 --> 00:16:44,370
it's in the top right corner there that

00:16:42,569 --> 00:16:46,199
we've just started really taking

00:16:44,370 --> 00:16:48,689
advantage of is something i'll just call

00:16:46,199 --> 00:16:51,660
San boxing maybe that's a general

00:16:48,689 --> 00:16:54,629
industry term we really really really

00:16:51,660 --> 00:16:57,540
love to have a flexibility of releasing

00:16:54,629 --> 00:17:01,529
software that quote unquote isn't quite

00:16:57,540 --> 00:17:04,829
ready yet at GE when we go and put

00:17:01,529 --> 00:17:06,900
sophomore locomotive we may not see that

00:17:04,829 --> 00:17:10,829
locomotive again for a very long period

00:17:06,900 --> 00:17:12,839
of time months there's been locomotive

00:17:10,829 --> 00:17:13,410
had incorrect software releases running

00:17:12,839 --> 00:17:15,030
on them

00:17:13,410 --> 00:17:17,000
and it can take months for us to

00:17:15,030 --> 00:17:19,560
actually catch up to it to put saffron

00:17:17,000 --> 00:17:22,920
locomotives being such expensive assets

00:17:19,560 --> 00:17:24,510
don't stay idle very long they go to a

00:17:22,920 --> 00:17:27,810
yard they get serviced very quickly

00:17:24,510 --> 00:17:29,580
refuel add water add coolant whatever

00:17:27,810 --> 00:17:31,770
sort of things they do their safety

00:17:29,580 --> 00:17:34,170
check out their checked every 24 hours

00:17:31,770 --> 00:17:35,730
for a daily inspection but then they're

00:17:34,170 --> 00:17:39,540
on the next train moving something along

00:17:35,730 --> 00:17:41,100
not dissimilar to an airplane Delta

00:17:39,540 --> 00:17:43,530
Airlines doesn't have air like airplanes

00:17:41,100 --> 00:17:46,410
just sitting around in random cities you

00:17:43,530 --> 00:17:49,020
know just as spares locomotives are very

00:17:46,410 --> 00:17:50,160
much the same way so with sandboxing it

00:17:49,020 --> 00:17:51,840
actually allows us to take an

00:17:50,160 --> 00:17:54,300
application that may not quite be ready

00:17:51,840 --> 00:17:57,240
yet we know that even if it runs for

00:17:54,300 --> 00:18:00,180
15-20 minutes before it crashes or maybe

00:17:57,240 --> 00:18:01,620
it collects data only in the morning and

00:18:00,180 --> 00:18:02,580
doesn't run in the afternoon we know

00:18:01,620 --> 00:18:04,970
that we can actually put that

00:18:02,580 --> 00:18:08,430
application on our platform habit run

00:18:04,970 --> 00:18:09,810
provide some useful information but then

00:18:08,430 --> 00:18:11,640
again won't interfere with the other

00:18:09,810 --> 00:18:14,340
applications that are running in our

00:18:11,640 --> 00:18:15,600
system so there's a that's a huge one

00:18:14,340 --> 00:18:18,300
for us that we're just now starting to

00:18:15,600 --> 00:18:21,480
take advantage of okay so let's talk

00:18:18,300 --> 00:18:23,580
about our hardware platform everything

00:18:21,480 --> 00:18:24,780
for us basically resides in UC and I

00:18:23,580 --> 00:18:26,490
know in the back is probably more

00:18:24,780 --> 00:18:28,680
difficult to see I'll hold up one more

00:18:26,490 --> 00:18:30,630
time but basically rosat resides in this

00:18:28,680 --> 00:18:35,820
particular chassis that you see right

00:18:30,630 --> 00:18:38,790
here over here on the left yeah your

00:18:35,820 --> 00:18:41,490
left is a router card and then there's

00:18:38,790 --> 00:18:43,380
actually two processor cards with

00:18:41,490 --> 00:18:45,210
virtualization installed and the one

00:18:43,380 --> 00:18:46,290
over here on the very far right with

00:18:45,210 --> 00:18:48,630
those funny-looking orange things

00:18:46,290 --> 00:18:51,720
sticking out that's our network storage

00:18:48,630 --> 00:18:53,550
device so our network storage device

00:18:51,720 --> 00:18:56,550
basically has two modules of four

00:18:53,550 --> 00:18:58,200
terabytes each so let's just do a lot of

00:18:56,550 --> 00:19:00,240
different things we can you know pixie

00:18:58,200 --> 00:19:03,180
boot off the the processor cards run

00:19:00,240 --> 00:19:04,350
images off the network storage and in

00:19:03,180 --> 00:19:06,480
the situation where we have high

00:19:04,350 --> 00:19:08,370
availability applications those

00:19:06,480 --> 00:19:11,220
applications are resident on our network

00:19:08,370 --> 00:19:12,690
storage device because obviously if you

00:19:11,220 --> 00:19:15,420
have your processor card go down which

00:19:12,690 --> 00:19:18,750
has local storage if it goes down that

00:19:15,420 --> 00:19:20,700
image is not going to be available so we

00:19:18,750 --> 00:19:22,070
want to do something like this modules

00:19:20,700 --> 00:19:24,960
instead of these black boxes again

00:19:22,070 --> 00:19:27,180
simplification reduced costs already

00:19:24,960 --> 00:19:28,920
mentioned freeing up space

00:19:27,180 --> 00:19:31,830
lastly with high availability having

00:19:28,920 --> 00:19:32,970
some redundancy on board so now I'm

00:19:31,830 --> 00:19:34,410
going to jump right into the modules

00:19:32,970 --> 00:19:35,730
that we have to give you kind of some

00:19:34,410 --> 00:19:39,270
information in the context which i think

00:19:35,730 --> 00:19:42,570
is important we have network what I'll

00:19:39,270 --> 00:19:44,040
call networking based modules the array

00:19:42,570 --> 00:19:46,610
card by the way our network storage

00:19:44,040 --> 00:19:49,920
device I consider that a networking card

00:19:46,610 --> 00:19:53,450
that one in particular in this case has

00:19:49,920 --> 00:19:56,850
a free scale LS 1021 processor on it a

00:19:53,450 --> 00:19:59,060
32-bit arm device it does have the

00:19:56,850 --> 00:20:04,110
virtualization extensions built into the

00:19:59,060 --> 00:20:05,550
v7 ARM architecture which is nice and we

00:20:04,110 --> 00:20:07,200
do have a variety of processor so I'll

00:20:05,550 --> 00:20:10,770
cover the other one are the primary one

00:20:07,200 --> 00:20:13,320
that we have for these types of

00:20:10,770 --> 00:20:17,900
architectures networking based right now

00:20:13,320 --> 00:20:20,970
we're using kvm to support those on

00:20:17,900 --> 00:20:23,760
64-bit which we're waiting for certainly

00:20:20,970 --> 00:20:25,740
not quite released yet for us and the

00:20:23,760 --> 00:20:29,450
flavor that we're looking for we're

00:20:25,740 --> 00:20:33,420
definitely targeting the a 53 series and

00:20:29,450 --> 00:20:35,190
I didn't say it it's on the next slide

00:20:33,420 --> 00:20:37,410
maybe I'll just jump the next slide no i

00:20:35,190 --> 00:20:40,050
won't i'll talk about it our processing

00:20:37,410 --> 00:20:42,150
cards that we have today they discuss

00:20:40,050 --> 00:20:44,910
that's in this chassis they're both x86

00:20:42,150 --> 00:20:46,560
based I do have a slide in a little bit

00:20:44,910 --> 00:20:49,650
it talks about what those are let me

00:20:46,560 --> 00:20:52,770
give you the another one maybe I get

00:20:49,650 --> 00:20:55,590
tomatoes thrown at me for x86 modules

00:20:52,770 --> 00:20:58,710
we're actually using Zen so we're using

00:20:55,590 --> 00:20:59,850
kvm and arm in Zen on x86 and I'll talk

00:20:58,710 --> 00:21:03,330
about that here in a little bit as to

00:20:59,850 --> 00:21:06,270
why here's our processors that we use

00:21:03,330 --> 00:21:08,970
for our 32-bit arm environment again the

00:21:06,270 --> 00:21:11,460
ls10 21 you can see they're two

00:21:08,970 --> 00:21:13,920
gigabytes of memory we've got em SATA

00:21:11,460 --> 00:21:15,990
device the thing we like about the most

00:21:13,920 --> 00:21:18,030
it has an ECC bus throughout the part

00:21:15,990 --> 00:21:19,530
which is great for a lot of the things

00:21:18,030 --> 00:21:22,530
that we do that are more networking

00:21:19,530 --> 00:21:24,570
centric so for us this is basically our

00:21:22,530 --> 00:21:28,560
go-to processor for different things

00:21:24,570 --> 00:21:30,870
that we use that our data intensive the

00:21:28,560 --> 00:21:34,290
second one that we're using is the zinc

00:21:30,870 --> 00:21:35,370
7020 whenever we have interfaces that we

00:21:34,290 --> 00:21:37,830
have to support that are a little

00:21:35,370 --> 00:21:39,360
different that aren't standard that our

00:21:37,830 --> 00:21:42,870
networking base

00:21:39,360 --> 00:21:44,309
this is the processor that we turn to it

00:21:42,870 --> 00:21:47,040
only we're basically have a gig of

00:21:44,309 --> 00:21:48,960
memory on board you can see the NAND

00:21:47,040 --> 00:21:50,910
msata and then of course with the zinc

00:21:48,960 --> 00:21:53,670
part a lot of you know the nice thing

00:21:50,910 --> 00:21:56,220
about it is a dual core arm part but

00:21:53,670 --> 00:21:58,350
then it has logic cells and DSP slices

00:21:56,220 --> 00:22:00,780
on board so we can go and program the

00:21:58,350 --> 00:22:02,850
the fabric to do whatever we needed to

00:22:00,780 --> 00:22:04,410
do so if there's a specialized thing we

00:22:02,850 --> 00:22:06,210
need to drop down if we wanted to do

00:22:04,410 --> 00:22:08,580
something in the relative to

00:22:06,210 --> 00:22:09,570
time-sensitive networking very easy to

00:22:08,580 --> 00:22:12,150
put those things right down on the

00:22:09,570 --> 00:22:16,110
fabric and use them so those are the two

00:22:12,150 --> 00:22:17,250
that we use the processing based ones

00:22:16,110 --> 00:22:19,230
which basically just have a raw

00:22:17,250 --> 00:22:23,280
application that we need to run we've

00:22:19,230 --> 00:22:26,549
got two variants the first is an e 3845

00:22:23,280 --> 00:22:28,200
it's an intel bay trail processor it is

00:22:26,549 --> 00:22:30,720
a quad core that runs around 1.9

00:22:28,200 --> 00:22:32,370
gigahertz that is pretty much our

00:22:30,720 --> 00:22:35,910
standard in fact the two cards that i

00:22:32,370 --> 00:22:37,200
have up here today are that flavor the

00:22:35,910 --> 00:22:39,000
one that we're launching and actually

00:22:37,200 --> 00:22:41,549
testing with right now is an Intel

00:22:39,000 --> 00:22:44,690
broadwell processor that was released in

00:22:41,549 --> 00:22:47,910
the first quarter 2015 it's a 5500 you

00:22:44,690 --> 00:22:49,559
it's actually dual-core does have four

00:22:47,910 --> 00:22:52,470
threads right so that's how they kind of

00:22:49,559 --> 00:22:53,580
walk around that one now one of the

00:22:52,470 --> 00:22:55,919
things that you'll notice is it's

00:22:53,580 --> 00:22:58,860
certainly a lot different than the quad

00:22:55,919 --> 00:23:01,980
core you know I 7 32 gigabytes of memory

00:22:58,860 --> 00:23:03,720
sort of processor lines and the biggest

00:23:01,980 --> 00:23:06,049
reason for that is that all of our

00:23:03,720 --> 00:23:09,450
processors that we have in this box

00:23:06,049 --> 00:23:14,309
again with 70 CE ambient temperature

00:23:09,450 --> 00:23:16,290
there are no fans so we spend a lot of

00:23:14,309 --> 00:23:19,350
time getting our heat sink design right

00:23:16,290 --> 00:23:21,390
getting our heat sink for the RAM design

00:23:19,350 --> 00:23:25,080
right to make sure that our platform can

00:23:21,390 --> 00:23:27,299
operate at 70 °c with no fans I can tell

00:23:25,080 --> 00:23:30,350
you that running a even running that

00:23:27,299 --> 00:23:33,450
5500 you Broadwell is pretty difficult

00:23:30,350 --> 00:23:35,760
to get there so certainly if we went to

00:23:33,450 --> 00:23:37,919
a more traditional i7 we'd have no

00:23:35,760 --> 00:23:40,380
chance of getting there that one I think

00:23:37,919 --> 00:23:41,850
is around a 15 watt processor so it kind

00:23:40,380 --> 00:23:45,570
of gives an idea why the desktop ones

00:23:41,850 --> 00:23:48,090
are 35 40 65 so that one's actually a 15

00:23:45,570 --> 00:23:50,760
watt processor the Bay Trail runs around

00:23:48,090 --> 00:23:52,740
10 watts again it's just for the CPU

00:23:50,760 --> 00:23:56,470
basically running full out

00:23:52,740 --> 00:23:59,860
to date we've used then for these why

00:23:56,470 --> 00:24:01,570
you ask well because when we started

00:23:59,860 --> 00:24:04,180
with our bay trail processor third

00:24:01,570 --> 00:24:06,190
quarter of last year kvm just didn't

00:24:04,180 --> 00:24:07,570
work right and maybe lots of

00:24:06,190 --> 00:24:10,540
improvements been made since that I'm

00:24:07,570 --> 00:24:12,700
sure but it's just the old mountain

00:24:10,540 --> 00:24:14,680
overhead that was basically going on

00:24:12,700 --> 00:24:16,690
with our little bay trail processor with

00:24:14,680 --> 00:24:19,390
four gigs of memory it just wasn't

00:24:16,690 --> 00:24:21,370
keeping up when we installed Zen it

00:24:19,390 --> 00:24:24,400
worked pretty well so we kind of went

00:24:21,370 --> 00:24:25,930
with that certainly over the next six to

00:24:24,400 --> 00:24:27,730
nine months we're going to try to

00:24:25,930 --> 00:24:29,260
consolidate so we don't are not using

00:24:27,730 --> 00:24:31,300
two separate completely separate

00:24:29,260 --> 00:24:33,460
families for hypervisors we'd like to do

00:24:31,300 --> 00:24:35,320
one or the other so we're going to be

00:24:33,460 --> 00:24:36,430
reassessing this but it's just kind of

00:24:35,320 --> 00:24:38,200
the thing one of the things we've done

00:24:36,430 --> 00:24:39,850
to date and yes we don't want to have to

00:24:38,200 --> 00:24:43,330
support to as an end user we don't have

00:24:39,850 --> 00:24:45,550
to support to if we don't have to I'm

00:24:43,330 --> 00:24:47,110
going to throw this up to we have

00:24:45,550 --> 00:24:51,100
started looking at Linux containers i

00:24:47,110 --> 00:24:54,100
did say don't shoot the messenger we

00:24:51,100 --> 00:24:56,620
feel like there could be some importance

00:24:54,100 --> 00:24:58,330
for us using linux containers but we

00:24:56,620 --> 00:25:01,600
don't see actually using linux

00:24:58,330 --> 00:25:04,060
containers outside of using you using

00:25:01,600 --> 00:25:06,630
either Zen or kvm so we think it might

00:25:04,060 --> 00:25:09,430
be a really effective way to within a

00:25:06,630 --> 00:25:12,250
guest OS actually being able to separate

00:25:09,430 --> 00:25:14,140
our applications a bit again using the

00:25:12,250 --> 00:25:15,340
same kernel but now going and actually

00:25:14,140 --> 00:25:17,020
having applications to be a more

00:25:15,340 --> 00:25:18,640
separate I think it's actually just

00:25:17,020 --> 00:25:21,190
going to help our whole testing scenario

00:25:18,640 --> 00:25:24,060
so it's May baby makes things a further

00:25:21,190 --> 00:25:27,160
level of instantiation for us so we

00:25:24,060 --> 00:25:29,470
don't see actually using them without a

00:25:27,160 --> 00:25:30,610
hypervisor except maybe in the 32-bit

00:25:29,470 --> 00:25:33,130
case where we just don't have enough

00:25:30,610 --> 00:25:37,240
processor horsepower to handle either

00:25:33,130 --> 00:25:40,120
basically handle kvm so this is again

00:25:37,240 --> 00:25:43,900
are my opinion my opinion based on

00:25:40,120 --> 00:25:48,130
development to date so for Intel again

00:25:43,900 --> 00:25:50,020
we said we're basically using Zen 64-bit

00:25:48,130 --> 00:25:51,280
ARM that's where we're really really

00:25:50,020 --> 00:25:53,890
really going to make sure that we use

00:25:51,280 --> 00:25:55,210
kvm that's our target though the

00:25:53,890 --> 00:25:56,530
processor that we're looking to use

00:25:55,210 --> 00:25:59,110
isn't quite out yet it'll be out next

00:25:56,530 --> 00:26:01,540
year and then for 32-bit I did put a

00:25:59,110 --> 00:26:03,040
circle around kvm there at the bottom

00:26:01,540 --> 00:26:05,049
because I know it's love that is

00:26:03,040 --> 00:26:07,869
something that we're going to reassess

00:26:05,049 --> 00:26:09,820
just because we had poor luck basically

00:26:07,869 --> 00:26:12,429
a year ago now now you know certainly

00:26:09,820 --> 00:26:14,739
doesn't mean ramp poor luck now just 12

00:26:12,429 --> 00:26:16,659
times etc and we had to kind of make a

00:26:14,739 --> 00:26:18,249
quick decision and move on it so you

00:26:16,659 --> 00:26:19,299
know that's kind of the thing to date

00:26:18,249 --> 00:26:20,830
and certainly if you if we have

00:26:19,299 --> 00:26:23,320
questions at the end you want entertain

00:26:20,830 --> 00:26:24,700
that we can do that I'm kind of

00:26:23,320 --> 00:26:28,059
targeting to have about 10 minutes at

00:26:24,700 --> 00:26:29,710
the end for questions so what's

00:26:28,059 --> 00:26:33,519
important to us in virtualization kind

00:26:29,710 --> 00:26:35,799
of last section here for us boot times

00:26:33,519 --> 00:26:37,059
are not important so I know I went to a

00:26:35,799 --> 00:26:38,289
couple of discussions throughout the

00:26:37,059 --> 00:26:40,359
conference talking about boot times

00:26:38,289 --> 00:26:41,950
that's not important because for us once

00:26:40,359 --> 00:26:46,269
an applications up it's going to stay up

00:26:41,950 --> 00:26:48,879
for days weeks months the look moment

00:26:46,269 --> 00:26:52,710
get turned off so for us boot times is

00:26:48,879 --> 00:26:55,090
not very important for 32-bit processors

00:26:52,710 --> 00:26:58,419
certainly the amount of resources that

00:26:55,090 --> 00:27:00,249
are required for any hypervisor we use

00:26:58,419 --> 00:27:04,210
that's probably the most important thing

00:27:00,249 --> 00:27:05,919
for us low CPU and RAM memory overhead

00:27:04,210 --> 00:27:06,970
if we only have a gigabyte to deal with

00:27:05,919 --> 00:27:09,730
we certainly don't want to have to

00:27:06,970 --> 00:27:11,259
devote a large portion of it to two kvm

00:27:09,730 --> 00:27:14,080
we need to have some of that devoted to

00:27:11,259 --> 00:27:16,480
our guest operating systems so the

00:27:14,080 --> 00:27:18,999
overhead is switching etc going between

00:27:16,480 --> 00:27:22,629
guest operating systems is important for

00:27:18,999 --> 00:27:26,049
our 32-bit space I'm guessing that we

00:27:22,629 --> 00:27:28,179
would have we would like to have target

00:27:26,049 --> 00:27:29,230
around three guest operating systems

00:27:28,179 --> 00:27:31,090
running concurrently if we could

00:27:29,230 --> 00:27:33,369
probably not more than that we'd

00:27:31,090 --> 00:27:35,200
probably have one be like a supervisor

00:27:33,369 --> 00:27:37,239
kind of checking to make sure everything

00:27:35,200 --> 00:27:39,460
else is ok that the other two guests are

00:27:37,239 --> 00:27:42,190
fine and then the guests obey either be

00:27:39,460 --> 00:27:44,230
split by application type or be split by

00:27:42,190 --> 00:27:45,909
actual supplier so we may have one

00:27:44,230 --> 00:27:47,649
supplier write software in one space

00:27:45,909 --> 00:27:49,179
another soft another person right

00:27:47,649 --> 00:27:51,129
software in the other space and then

00:27:49,179 --> 00:27:54,970
have a supervisor kind of overlooks the

00:27:51,129 --> 00:28:00,429
whole situation a local management of

00:27:54,970 --> 00:28:05,039
guests this is one that we are dealing

00:28:00,429 --> 00:28:07,419
with today it's basically making it so

00:28:05,039 --> 00:28:09,429
how do we go and make it so that we can

00:28:07,419 --> 00:28:11,980
have applications automatically restart

00:28:09,429 --> 00:28:13,619
make sure that somebody's not started

00:28:11,980 --> 00:28:17,139
using the resources than he should

00:28:13,619 --> 00:28:18,220
behaving badly etc so the way that we've

00:28:17,139 --> 00:28:19,690
thought about doing that

00:28:18,220 --> 00:28:22,150
as I said in the previous slide having

00:28:19,690 --> 00:28:23,770
like a supervisor guessed it kind of

00:28:22,150 --> 00:28:26,500
overlooks the situation everywhere else

00:28:23,770 --> 00:28:30,190
and works with the hypervisor as to what

00:28:26,500 --> 00:28:33,730
the condition is certainly for us having

00:28:30,190 --> 00:28:36,100
better pool management and migrating of

00:28:33,730 --> 00:28:39,549
guests I mean we literally will have in

00:28:36,100 --> 00:28:43,600
a given platform fact this for slot one

00:28:39,549 --> 00:28:46,600
right here we have a three 32-bit ARM

00:28:43,600 --> 00:28:48,280
processors running I would love to think

00:28:46,600 --> 00:28:50,409
of things just as applications since

00:28:48,280 --> 00:28:53,350
everything is very networking based if

00:28:50,409 --> 00:28:54,520
we have a card that's heating up all of

00:28:53,350 --> 00:28:56,320
our modules have at least four

00:28:54,520 --> 00:28:57,909
temperature sensors so for some reason

00:28:56,320 --> 00:29:00,580
we have a module it's heating out maybe

00:28:57,909 --> 00:29:02,380
the POA is being stretched power over

00:29:00,580 --> 00:29:05,289
you that's being stretched you know

00:29:02,380 --> 00:29:06,700
migrating applications from one card to

00:29:05,289 --> 00:29:08,770
another car to have them communicate

00:29:06,700 --> 00:29:11,080
over our Ethernet backplane would be

00:29:08,770 --> 00:29:12,309
ideal so the whole guest management

00:29:11,080 --> 00:29:15,490
thing is something that we that we

00:29:12,309 --> 00:29:16,780
really need to focus on at GE and

00:29:15,490 --> 00:29:18,070
anything it can be anything in the

00:29:16,780 --> 00:29:22,990
industry that's done in that regard will

00:29:18,070 --> 00:29:26,860
be helpful for us lastly standardized

00:29:22,990 --> 00:29:29,409
imaging we have dealt with headaches and

00:29:26,860 --> 00:29:32,530
head aches and headaches of this but and

00:29:29,409 --> 00:29:34,330
I'm sure there's ways around it but we

00:29:32,530 --> 00:29:35,830
want all of our os's actually since

00:29:34,330 --> 00:29:37,840
because we're not running them in a data

00:29:35,830 --> 00:29:39,370
center a centralized data center we're

00:29:37,840 --> 00:29:42,010
running in a distributed fashion all

00:29:39,370 --> 00:29:44,409
over the network we want these images to

00:29:42,010 --> 00:29:47,320
move freely from one hardware space to

00:29:44,409 --> 00:29:51,909
another so freeing up any sort of you

00:29:47,320 --> 00:29:54,190
know uuid fixes etc is just as a good

00:29:51,909 --> 00:29:56,020
way to for us to be able to manage

00:29:54,190 --> 00:29:59,620
applications the other thing that's

00:29:56,020 --> 00:30:02,440
interesting is that whenever we do have

00:29:59,620 --> 00:30:03,909
a hardware fault and it goes into a

00:30:02,440 --> 00:30:06,159
service shop they literally going to

00:30:03,909 --> 00:30:07,809
pull a module out all these modules that

00:30:06,159 --> 00:30:09,880
are up here I know back you can't see it

00:30:07,809 --> 00:30:11,919
you literally take one out and put one

00:30:09,880 --> 00:30:14,289
in so it has a fault they're looking to

00:30:11,919 --> 00:30:16,049
yank one card and put another one in so

00:30:14,289 --> 00:30:18,070
us being able to manage and say okay

00:30:16,049 --> 00:30:20,230
we're going to load you now with the

00:30:18,070 --> 00:30:21,490
correct software because maybe that card

00:30:20,230 --> 00:30:23,559
has been sitting on the shelf for two

00:30:21,490 --> 00:30:24,700
years we're going to load you with right

00:30:23,559 --> 00:30:26,950
software make sure you're running the

00:30:24,700 --> 00:30:30,940
right image etc etc etc I think our

00:30:26,950 --> 00:30:31,600
whole time frame for how long we need to

00:30:30,940 --> 00:30:32,650
support

00:30:31,600 --> 00:30:35,020
software and support hardware in the

00:30:32,650 --> 00:30:36,880
field is probably longer than most so

00:30:35,020 --> 00:30:39,039
it's very difficult for us to just

00:30:36,880 --> 00:30:40,809
upgrade to new kernels whenever a new

00:30:39,039 --> 00:30:42,850
kernel comes out we kind of need to fix

00:30:40,809 --> 00:30:44,799
on something when we sell hardware or

00:30:42,850 --> 00:30:47,799
software to it to our railroad customers

00:30:44,799 --> 00:30:49,840
we basically give them 15 to 20 years

00:30:47,799 --> 00:30:52,570
support package on it it's extremely

00:30:49,840 --> 00:30:55,630
long time so we tend to keep our stuff

00:30:52,570 --> 00:30:57,700
around a lot longer locomotives that you

00:30:55,630 --> 00:31:02,380
see in a rail yard most of them were

00:30:57,700 --> 00:31:03,970
built between 1950 and 1970 GP 38s are

00:31:02,380 --> 00:31:06,250
very you see those on the road all the

00:31:03,970 --> 00:31:07,659
time those were built in 1960s so you

00:31:06,250 --> 00:31:09,250
just keep your using equipment over and

00:31:07,659 --> 00:31:10,870
over and over again repower it replace

00:31:09,250 --> 00:31:12,970
the wheels replace the traction motors

00:31:10,870 --> 00:31:15,270
they're used to using keeping and using

00:31:12,970 --> 00:31:17,470
stuff for a very very very long time I

00:31:15,270 --> 00:31:21,159
did want to show this is a kind of a

00:31:17,470 --> 00:31:24,159
typical configuration that we may use in

00:31:21,159 --> 00:31:26,260
fact the left side of this slide is

00:31:24,159 --> 00:31:29,110
exactly the way that this is configured

00:31:26,260 --> 00:31:31,090
right now is we have you no hypervisor

00:31:29,110 --> 00:31:34,330
base running on two of our Bay Trail

00:31:31,090 --> 00:31:36,850
processors the array actually holds the

00:31:34,330 --> 00:31:39,010
images and then we basically just a

00:31:36,850 --> 00:31:40,450
start start start start start and when

00:31:39,010 --> 00:31:42,970
they start they basically go to the

00:31:40,450 --> 00:31:45,309
application card that's most appropriate

00:31:42,970 --> 00:31:47,520
we don't care because it's pulled

00:31:45,309 --> 00:31:50,530
together enough they go when they run

00:31:47,520 --> 00:31:51,760
our broad well sort of series again sort

00:31:50,530 --> 00:31:55,080
of thing kind of maybe more heavy

00:31:51,760 --> 00:31:57,429
lifting maybe you have the images again

00:31:55,080 --> 00:32:00,490
directly on the card itself running on

00:31:57,429 --> 00:32:02,020
the msata drive and I did mention we're

00:32:00,490 --> 00:32:06,159
looking at using some sort of containers

00:32:02,020 --> 00:32:08,289
here on a particular image I did put

00:32:06,159 --> 00:32:11,350
them blue two up there we're not fixed

00:32:08,289 --> 00:32:13,960
on any particular distribution our

00:32:11,350 --> 00:32:16,780
customers very regularly run Red Hat

00:32:13,960 --> 00:32:18,130
Enterprise Linux again I was just an

00:32:16,780 --> 00:32:19,480
open platform so if somebody wants to

00:32:18,130 --> 00:32:21,610
use a different operating system than

00:32:19,480 --> 00:32:24,220
what we have they can another one that

00:32:21,610 --> 00:32:27,270
comes up a lot with our x86 processor

00:32:24,220 --> 00:32:30,039
line is windows a lot of countries

00:32:27,270 --> 00:32:32,289
application developers in Brazil use

00:32:30,039 --> 00:32:34,240
windows 7 windows ce e they use a lot

00:32:32,289 --> 00:32:36,070
older quote unquote older operating

00:32:34,240 --> 00:32:38,440
systems that what we may be used to here

00:32:36,070 --> 00:32:41,350
and we sell this platform again we have

00:32:38,440 --> 00:32:43,120
developers in Brazil South Africa and

00:32:41,350 --> 00:32:44,050
when they go and write their software a

00:32:43,120 --> 00:32:45,640
lot of the old

00:32:44,050 --> 00:32:47,140
kind of clinical older operating systems

00:32:45,640 --> 00:32:49,030
you might figure come into play with

00:32:47,140 --> 00:32:50,260
this platform as well so just because I

00:32:49,030 --> 00:32:52,390
put in boot you up there don't think I'm

00:32:50,260 --> 00:32:56,160
uh I'm stuck in a boot to it can be any

00:32:52,390 --> 00:32:58,180
any particular less that we may need so

00:32:56,160 --> 00:33:01,180
getting the conclusions hitting the

00:32:58,180 --> 00:33:03,250
time's right here I think you can kind

00:33:01,180 --> 00:33:06,040
of understand and the lot of things I

00:33:03,250 --> 00:33:08,680
talked about whether its customers other

00:33:06,040 --> 00:33:10,990
suppliers GE writing software

00:33:08,680 --> 00:33:13,120
virtualization has to be a standard

00:33:10,990 --> 00:33:15,760
product for us we need to run all of

00:33:13,120 --> 00:33:17,590
those applications concurrently ideally

00:33:15,760 --> 00:33:19,030
on the same hardware platform so

00:33:17,590 --> 00:33:22,420
virtualization is can be a big play for

00:33:19,030 --> 00:33:24,550
us 32-bit hardware again I did say that

00:33:22,420 --> 00:33:26,260
when we assessed it didn't quite have

00:33:24,550 --> 00:33:28,840
enough horsepower to date to run it

00:33:26,260 --> 00:33:31,750
effectively our wait times etc where

00:33:28,840 --> 00:33:32,920
little we're a little off but we're

00:33:31,750 --> 00:33:34,570
going to take a look at that again to

00:33:32,920 --> 00:33:36,160
see because we would like to have again

00:33:34,570 --> 00:33:38,170
since we have so many 32-bit ARM

00:33:36,160 --> 00:33:39,280
processors on our platform we'd love to

00:33:38,170 --> 00:33:44,260
have the capability of moving around

00:33:39,280 --> 00:33:46,110
images freely and lastly 64-bit hardware

00:33:44,260 --> 00:33:47,830
we're not going to launch it without

00:33:46,110 --> 00:33:49,990
virtualization we're going to make it

00:33:47,830 --> 00:33:52,000
standard right on right out front we do

00:33:49,990 --> 00:33:55,120
have some 32-bit processors we had older

00:33:52,000 --> 00:33:56,470
software and it kind of got inherited

00:33:55,120 --> 00:33:59,980
brought along but when we start with our

00:33:56,470 --> 00:34:01,600
64-bit processing line next year we're

00:33:59,980 --> 00:34:03,640
certainly going to virtualization right

00:34:01,600 --> 00:34:08,470
out the box and lastly I did want to

00:34:03,640 --> 00:34:11,380
mention too we kind of expect our 64-bit

00:34:08,470 --> 00:34:13,720
ARM platform to maybe offload a little

00:34:11,380 --> 00:34:16,350
bit of our x86 development right now the

00:34:13,720 --> 00:34:19,270
x86 processors is great for application

00:34:16,350 --> 00:34:21,010
collecting data off boarding into the

00:34:19,270 --> 00:34:22,900
cloud etc it's Gaelic certainly a lot of

00:34:21,010 --> 00:34:25,419
horsepower to do that we're hoping the

00:34:22,900 --> 00:34:26,890
64-bit ARM processors that we select

00:34:25,419 --> 00:34:27,790
will be able to be able to start running

00:34:26,890 --> 00:34:31,270
with some of those sorts of applications

00:34:27,790 --> 00:34:35,220
as well and with that I'll open up for

00:34:31,270 --> 00:34:35,220
any questions with ten minutes remaining

00:34:40,980 --> 00:34:46,159
hey so what do you use for our

00:34:42,960 --> 00:34:50,820
castration do use like a locally

00:34:46,159 --> 00:34:53,070
installed management to manage these and

00:34:50,820 --> 00:34:56,609
install these VMS already use OpenStack

00:34:53,070 --> 00:34:58,410
all years so the question was what tools

00:34:56,609 --> 00:35:00,990
are we using right now to manage the

00:34:58,410 --> 00:35:03,180
different virtualization environments

00:35:00,990 --> 00:35:05,160
right now we're not using any particular

00:35:03,180 --> 00:35:08,160
tools we're trying a lot of them

00:35:05,160 --> 00:35:10,470
OpenStack you mentioned xenserver is

00:35:08,160 --> 00:35:11,820
another one so we're kind of Zen Center

00:35:10,470 --> 00:35:13,200
so we're trying out a lot of different

00:35:11,820 --> 00:35:15,030
ones right now we do not have a

00:35:13,200 --> 00:35:16,500
standardized tool that is one of the

00:35:15,030 --> 00:35:17,760
things our customers are asking for is

00:35:16,500 --> 00:35:19,490
how you gonna support these things in

00:35:17,760 --> 00:35:22,170
the field so certainly if there are

00:35:19,490 --> 00:35:23,430
people in the room here the work at

00:35:22,170 --> 00:35:26,600
companies that have those sorts of tools

00:35:23,430 --> 00:35:30,330
and solutions I'd love to hear about it

00:35:26,600 --> 00:35:32,670
and you mentioned you earlier the last

00:35:30,330 --> 00:35:35,010
year of a new used kvm compared to zen

00:35:32,670 --> 00:35:37,140
you ran into some problems can you throw

00:35:35,010 --> 00:35:39,810
some light on that what kind of problems

00:35:37,140 --> 00:35:44,430
is it with networking a storage or just

00:35:39,810 --> 00:35:46,080
be a performance problems yeah so the

00:35:44,430 --> 00:35:47,730
question was what sort of problems did

00:35:46,080 --> 00:35:49,680
you run into when you tried kvm last

00:35:47,730 --> 00:35:52,050
year for us we basically just did a

00:35:49,680 --> 00:35:54,690
straight on our x86 platform we did a

00:35:52,050 --> 00:35:57,720
straight kvm Zen we installed them both

00:35:54,690 --> 00:35:59,730
and we ran processes and each of the

00:35:57,720 --> 00:36:01,920
guests I think we did for guests and

00:35:59,730 --> 00:36:03,690
then measure how much time it took for

00:36:01,920 --> 00:36:05,820
switching between the gust operating

00:36:03,690 --> 00:36:07,020
systems and the amount of ram and cpu

00:36:05,820 --> 00:36:09,450
that was being taken up by the

00:36:07,020 --> 00:36:11,670
hypervisor i'm not saying it's entirely

00:36:09,450 --> 00:36:14,100
completely scientific but for our

00:36:11,670 --> 00:36:17,400
hardware which at the time was the Bay

00:36:14,100 --> 00:36:18,780
Trail ether t 8 45 you know maybe at the

00:36:17,400 --> 00:36:20,369
times n had better support for the

00:36:18,780 --> 00:36:22,740
drivers that space again pretty

00:36:20,369 --> 00:36:24,920
non-scientific but we kind of had to

00:36:22,740 --> 00:36:28,290
move quickly so that's what we did I

00:36:24,920 --> 00:36:31,340
mentioned that VMs they should not use

00:36:28,290 --> 00:36:34,080
the UID but i'm not sure what kind of

00:36:31,340 --> 00:36:37,200
user space applications you're going to

00:36:34,080 --> 00:36:40,050
run there but the licensing is usually

00:36:37,200 --> 00:36:42,570
tight to the UID so have you guys

00:36:40,050 --> 00:36:46,770
thought about how licensing of the

00:36:42,570 --> 00:36:50,200
guests are going to work no we have not

00:36:46,770 --> 00:36:51,850
one of the things with licensing with

00:36:50,200 --> 00:36:55,300
the companies that with either GE has

00:36:51,850 --> 00:36:58,450
worked with or our customers like a CSX

00:36:55,300 --> 00:37:00,670
BNSF who ever worked with typically when

00:36:58,450 --> 00:37:02,610
things like that have come up where hey

00:37:00,670 --> 00:37:05,080
the licensing is tied just like this

00:37:02,610 --> 00:37:08,500
maybe because it's GE or maybe it's

00:37:05,080 --> 00:37:11,650
because they have big names to companies

00:37:08,500 --> 00:37:14,020
so far have been very willing to figure

00:37:11,650 --> 00:37:15,790
out how to work with us I know red hat

00:37:14,020 --> 00:37:17,980
enterprise linux is one has worked very

00:37:15,790 --> 00:37:19,480
well it's okay i understand how you're

00:37:17,980 --> 00:37:21,220
trying to do this let's do a different

00:37:19,480 --> 00:37:22,720
type of licensing so maybe it's more of

00:37:21,220 --> 00:37:28,240
a deployment license as opposed to

00:37:22,720 --> 00:37:30,790
individual thanks yeah for then are you

00:37:28,240 --> 00:37:36,100
using virtual domain so it's beyond

00:37:30,790 --> 00:37:38,200
domains hvm yeah I wanted to ask whether

00:37:36,100 --> 00:37:40,090
you are actually running any train

00:37:38,200 --> 00:37:43,270
safety critical applications on that or

00:37:40,090 --> 00:37:45,610
using separate boxes for that I can

00:37:43,270 --> 00:37:48,430
repeat the question one more time but we

00:37:45,610 --> 00:37:50,260
are using any safety drain safety

00:37:48,430 --> 00:37:52,330
critical applications on the like in

00:37:50,260 --> 00:37:56,320
Europe use the European train control

00:37:52,330 --> 00:38:00,330
system which did it which requires a lot

00:37:56,320 --> 00:38:02,410
of paperwork on top of that so right

00:38:00,330 --> 00:38:04,780
excellent excellent question especially

00:38:02,410 --> 00:38:06,130
since I i did say safety critical I

00:38:04,780 --> 00:38:08,050
didn't maybe didn't say safety realize

00:38:06,130 --> 00:38:09,310
its safety important right I always stay

00:38:08,050 --> 00:38:10,990
away from that critical word because

00:38:09,310 --> 00:38:14,620
that means something very very specific

00:38:10,990 --> 00:38:16,450
i can tell you gee he has not nor has

00:38:14,620 --> 00:38:18,670
plans to have safety critical

00:38:16,450 --> 00:38:21,400
applications running on in a hypervisor

00:38:18,670 --> 00:38:24,070
type of environment for us it's all

00:38:21,400 --> 00:38:25,810
about voting methods you know multiple

00:38:24,070 --> 00:38:27,880
processors looking all the same data and

00:38:25,810 --> 00:38:29,950
having a voting type of architecture so

00:38:27,880 --> 00:38:31,660
it doesn't really fit with this yeah

00:38:29,950 --> 00:38:34,810
that's used in europe too so that's why

00:38:31,660 --> 00:38:36,340
i was asking ok thank you can you talk

00:38:34,810 --> 00:38:39,130
about the different use cases you have

00:38:36,340 --> 00:38:42,580
for arm 32 vs 64 and why you'd pick a

00:38:39,130 --> 00:38:45,790
32-bit processor over the 64-bit one yes

00:38:42,580 --> 00:38:47,980
so I'm going to probably answer your

00:38:45,790 --> 00:38:50,560
question in probably reverse order one

00:38:47,980 --> 00:38:53,140
of the things for us and I did mention a

00:38:50,560 --> 00:38:55,630
couple times heat heat more heat we

00:38:53,140 --> 00:38:57,400
can't handle heat so the 64-bit ARM

00:38:55,630 --> 00:38:58,140
designs that we had had to date that we

00:38:57,400 --> 00:39:00,630
evaluate

00:38:58,140 --> 00:39:02,940
where was from calles ADA last year some

00:39:00,630 --> 00:39:05,279
newer ones this year the number of watts

00:39:02,940 --> 00:39:07,589
of a 64-bit processor even our muse was

00:39:05,279 --> 00:39:09,420
it was too excessive based on the

00:39:07,589 --> 00:39:12,569
performance that you got one of the

00:39:09,420 --> 00:39:14,880
reasons why we picked the a7 arm core

00:39:12,569 --> 00:39:17,670
was because it had more MIPS per

00:39:14,880 --> 00:39:19,559
milliwatts than any other arm cortex a

00:39:17,670 --> 00:39:22,349
series lines so again we kind of target

00:39:19,559 --> 00:39:24,210
that however we think with introductions

00:39:22,349 --> 00:39:26,549
of more introductions ice which they

00:39:24,210 --> 00:39:29,730
have some a53 designs with some core

00:39:26,549 --> 00:39:30,900
shrinkage court I shrinkage that next

00:39:29,730 --> 00:39:34,250
year will be a well positioned to

00:39:30,900 --> 00:39:34,250
actually pick up and start using 64-bit

00:39:34,760 --> 00:39:40,650
so given that you are not short of power

00:39:38,400 --> 00:39:43,950
but you do have a heat problem what's

00:39:40,650 --> 00:39:46,019
the reason for not using fans ok

00:39:43,950 --> 00:39:48,470
excellent question why in the world just

00:39:46,019 --> 00:39:51,299
don't you use fans and be done with this

00:39:48,470 --> 00:39:52,950
interestingly enough the and you can

00:39:51,299 --> 00:39:55,319
probably see a little bit better there's

00:39:52,950 --> 00:39:57,809
some slots on the bottom of this chassis

00:39:55,319 --> 00:40:00,869
that are about two inches high that are

00:39:57,809 --> 00:40:02,339
designed for fan modules and there's

00:40:00,869 --> 00:40:05,400
backplane connectors in there to

00:40:02,339 --> 00:40:08,250
accommodate said such fan modules but

00:40:05,400 --> 00:40:10,589
our customers don't like fans because

00:40:08,250 --> 00:40:12,420
they see them as a maintenance issue and

00:40:10,589 --> 00:40:14,099
nightmare and cleaning out filters and

00:40:12,420 --> 00:40:17,910
stuff again these locomotives when they

00:40:14,099 --> 00:40:19,890
launch and they just wanted to run we

00:40:17,910 --> 00:40:22,829
have worked directly with our customers

00:40:19,890 --> 00:40:24,420
to explain maybe more about hey if you

00:40:22,829 --> 00:40:26,730
keep things cooler your equipment to

00:40:24,420 --> 00:40:28,289
last longer things like that and we're

00:40:26,730 --> 00:40:30,150
starting those discussions and having it

00:40:28,289 --> 00:40:32,609
but for the electronics to date they've

00:40:30,150 --> 00:40:34,279
been so used to not having fans that

00:40:32,609 --> 00:40:36,660
we've spent a lot of time designing

00:40:34,279 --> 00:40:38,670
processor architectures heatsink design

00:40:36,660 --> 00:40:42,359
and the ruggedness of these things to

00:40:38,670 --> 00:40:44,970
not require any fans do you have any

00:40:42,359 --> 00:40:47,279
plans to support of the air update so

00:40:44,970 --> 00:40:50,160
interesting I'd say it one more time I'm

00:40:47,279 --> 00:40:55,369
sorry over the air update so that

00:40:50,160 --> 00:40:58,140
e-board on it and so yes absolutely yes

00:40:55,369 --> 00:41:01,289
ok I don't know how sincere it's a

00:40:58,140 --> 00:41:03,029
question gee this is getting real

00:41:01,289 --> 00:41:05,309
specific to like most G has a program

00:41:03,029 --> 00:41:05,920
right now that's launching actually in

00:41:05,309 --> 00:41:09,190
the fourth

00:41:05,920 --> 00:41:11,170
where the control system the displays

00:41:09,190 --> 00:41:14,109
things are on board the cab will

00:41:11,170 --> 00:41:16,720
actually be updated by back office so

00:41:14,109 --> 00:41:19,420
the way it works is that the back office

00:41:16,720 --> 00:41:21,760
will transfer all of the data images

00:41:19,420 --> 00:41:26,980
software images etc to a central

00:41:21,760 --> 00:41:28,599
repository and sit on there until time

00:41:26,980 --> 00:41:31,390
that it can actually go through the real

00:41:28,599 --> 00:41:33,220
physical update so all the software is

00:41:31,390 --> 00:41:36,040
transferred its its resident you know

00:41:33,220 --> 00:41:38,079
network storage right here locomotive

00:41:36,040 --> 00:41:40,690
has some time that's important if it's

00:41:38,079 --> 00:41:43,210
got to come in go go go there's no time

00:41:40,690 --> 00:41:45,220
but if it does have time whether it's

00:41:43,210 --> 00:41:47,140
the fuel depot or a service track a

00:41:45,220 --> 00:41:49,720
maintainer will get on board he'll have

00:41:47,140 --> 00:41:53,619
to answer some questions like is the you

00:41:49,720 --> 00:41:55,150
know handbrake on do you have 45 minutes

00:41:53,619 --> 00:41:56,710
to do this update whatever the case may

00:41:55,150 --> 00:41:58,869
be and he will actually on the screen go

00:41:56,710 --> 00:42:00,369
launch the update and it'll tell them

00:41:58,869 --> 00:42:02,980
hey come back in 45 minutes at all be

00:42:00,369 --> 00:42:04,510
done so the update process is I'll

00:42:02,980 --> 00:42:06,210
manage right on that box and it goes and

00:42:04,510 --> 00:42:10,210
actually updates all the software on it

00:42:06,210 --> 00:42:12,910
that is let me jump to why I think your

00:42:10,210 --> 00:42:14,790
question is really really important we

00:42:12,910 --> 00:42:16,750
need to figure out as we move forward

00:42:14,790 --> 00:42:18,520
even though we have guest operating

00:42:16,750 --> 00:42:20,530
systems running etc we need to update

00:42:18,520 --> 00:42:21,579
portions of that operating system we

00:42:20,530 --> 00:42:23,170
don't want to have to update the whole

00:42:21,579 --> 00:42:26,170
thing because transferring that much

00:42:23,170 --> 00:42:27,910
data over cell obviously gets expensive

00:42:26,170 --> 00:42:29,740
and then second just going through and

00:42:27,910 --> 00:42:31,569
doing the actual update you know so

00:42:29,740 --> 00:42:32,980
we're trying to focus on things within

00:42:31,569 --> 00:42:36,390
the guest as opposed to actually

00:42:32,980 --> 00:42:36,390
updating the whole entire guest itself

00:42:36,990 --> 00:42:43,000
so this isn't as much a question as

00:42:40,569 --> 00:42:44,650
maybe an advertisement um you mentioned

00:42:43,000 --> 00:42:48,880
that you were concerned about how to

00:42:44,650 --> 00:42:51,910
manage the guests and also you've said

00:42:48,880 --> 00:42:55,480
that you in some cases you use n in some

00:42:51,910 --> 00:42:56,620
cases KBM in other cases you're thinking

00:42:55,480 --> 00:43:01,430
about container

00:42:56,620 --> 00:43:04,190
I just wanted to point out that well and

00:43:01,430 --> 00:43:06,710
also it seems like your your management

00:43:04,190 --> 00:43:08,840
case it doesn't really fit any any

00:43:06,710 --> 00:43:10,910
existing management tool that I've heard

00:43:08,840 --> 00:43:14,030
about so you may end up writing around

00:43:10,910 --> 00:43:16,520
but i just wanted to point out that the

00:43:14,030 --> 00:43:19,070
libvirt library was written specifically

00:43:16,520 --> 00:43:21,710
to be able to talk to multiple different

00:43:19,070 --> 00:43:25,550
hypervisors including zen and kb m and

00:43:21,710 --> 00:43:28,460
containers and it might make it easier

00:43:25,550 --> 00:43:31,190
for you when you decide to switch from

00:43:28,460 --> 00:43:35,060
one hypervisor to another ok so I

00:43:31,190 --> 00:43:39,920
appreciate that thank you any other

00:43:35,060 --> 00:43:41,420
questions or comments ok well I really

00:43:39,920 --> 00:43:42,710
appreciate the opportunity as an end

00:43:41,420 --> 00:43:44,750
user to speak to you all today I hope

00:43:42,710 --> 00:43:47,950
you enjoyed the presentation I'll see

00:43:44,750 --> 00:43:47,950

YouTube URL: https://www.youtube.com/watch?v=Qg8BLHjLiSo


