Title: [2015] Avocado: Next generation virt testing by Cleber Rosa
Publication date: 2015-09-04
Playlist: KVM Forum 2015
Description: 
	Avocado: Next generation virt testing

In the beginning of the KVM test efforts, there was KVM autotest. The framework evolved, and today, we have virt-test. Virt-test has a test matrix that spawns 1800 tests for QEMU and 7800 tests for libvirt, with active usage and development by testing teams and key virt stack developers. It's a sucessful and established project, but we can do even better. Enters Avocado (http://avocado framework.github.io/), a new test framework with a smart test runner, easier to use and more extensible than the previous framework used, Autotest. Besides being developer friendly, it also meets the needs of QE teams. Avocado-virt is an extension (APIs and plugins) that allows virt tests to be executed alongside other tests supported by Avocado. This presentation will cover the base Avocado tools, together with the capabilities of the Virt extension, including the new APIs for virt test writers. 

Cleber Rosa

Cleber is a Software Engineer working for Red Hat on the virt team (KVM/QEMU for over 5 years, helping to develop the testing stack for virtualization technologies, such as KVM, QEMU and Libvirt. He is a co-maintainer of the Autotest test framework, and an early contributor to virt-test virtualization testing suite. He and his team are now working on the development of a new testing framework that will eventually replace Autotest, codenamed Avocado.
Captions: 
	00:00:38,420 --> 00:00:46,170
take a look at its architecture features

00:00:42,590 --> 00:00:47,850
extensive demo on the features and take

00:00:46,170 --> 00:00:51,780
a look at the road network planning for

00:00:47,850 --> 00:00:55,440
it so first of all little bit of our

00:00:51,780 --> 00:00:58,620
team so as most of you know we are on

00:00:55,440 --> 00:01:00,989
the virtualization team at Red Hat we've

00:00:58,620 --> 00:01:04,290
been developing test tools for like the

00:01:00,989 --> 00:01:06,930
vert stack mainly KVM and Libert we have

00:01:04,290 --> 00:01:12,210
maintained auto test and vert test for a

00:01:06,930 --> 00:01:14,790
while now and it's been like two years

00:01:12,210 --> 00:01:17,490
ago when year-and-a-half that we have

00:01:14,790 --> 00:01:19,619
like started working on this new project

00:01:17,490 --> 00:01:23,340
leveraging all the experience that we

00:01:19,619 --> 00:01:26,100
got on this previous projects and what

00:01:23,340 --> 00:01:28,170
we are going to demo here it's based on

00:01:26,100 --> 00:01:34,740
all that that experience that we

00:01:28,170 --> 00:01:37,140
gathered so avvocato is a set of tools

00:01:34,740 --> 00:01:40,979
and libraries to perform automated

00:01:37,140 --> 00:01:43,350
testing on Linux platforms the one of

00:01:40,979 --> 00:01:46,979
the big goals here is to actually try to

00:01:43,350 --> 00:01:49,200
get developers and qyy together so we

00:01:46,979 --> 00:01:51,780
what we saw for a long time is that

00:01:49,200 --> 00:01:54,960
tools that were quite well suited for

00:01:51,780 --> 00:01:59,420
Huey were not that handy for developers

00:01:54,960 --> 00:02:03,719
and flow of information and and and

00:01:59,420 --> 00:02:05,670
contribution was an ideal so that one of

00:02:03,719 --> 00:02:08,060
the main goes are avocado

00:02:05,670 --> 00:02:13,680
we know that QE in development actually

00:02:08,060 --> 00:02:16,079
had different approaches towards testing

00:02:13,680 --> 00:02:19,099
Kiwi actually tries really really really

00:02:16,079 --> 00:02:22,140
hard to crash and burn the software and

00:02:19,099 --> 00:02:24,480
there there moto's probably something

00:02:22,140 --> 00:02:27,299
like we have to crash it if you don't

00:02:24,480 --> 00:02:31,319
crash it we may be missing something and

00:02:27,299 --> 00:02:34,069
developers are by definition larry wall

00:02:31,319 --> 00:02:36,689
used to say that more like relaxed

00:02:34,069 --> 00:02:38,310
actually he used to say lazy and we

00:02:36,689 --> 00:02:42,299
actually trust the code that we write

00:02:38,310 --> 00:02:45,000
and that's one of the big differences

00:02:42,299 --> 00:02:48,239
between approaches of how how the two

00:02:45,000 --> 00:02:50,190
teams how the chip groups actually sees

00:02:48,239 --> 00:02:53,400
software testing

00:02:50,190 --> 00:02:56,370
but in the end testing is necessary for

00:02:53,400 --> 00:02:58,170
both and we actually want to have the

00:02:56,370 --> 00:03:03,720
same tools the same information actually

00:02:58,170 --> 00:03:08,959
flowing between both so avocado is a new

00:03:03,720 --> 00:03:12,420
test toolbox it's tools and libraries we

00:03:08,959 --> 00:03:14,340
understand that testing shouldn't really

00:03:12,420 --> 00:03:17,069
get in your way it should help you it

00:03:14,340 --> 00:03:19,949
should be a - and not really require you

00:03:17,069 --> 00:03:24,810
to do a lot of stuff to get like tests

00:03:19,949 --> 00:03:27,690
run and results recorded so avocado is

00:03:24,810 --> 00:03:31,230
initially a test runner simple tool that

00:03:27,690 --> 00:03:34,590
you can add more feature to it in the

00:03:31,230 --> 00:03:37,470
form of two games we tried for four

00:03:34,590 --> 00:03:39,299
avocados to not restrict what kind of

00:03:37,470 --> 00:03:41,519
language of technology you can use to

00:03:39,299 --> 00:03:43,859
actually develop your tests so you're

00:03:41,519 --> 00:03:45,959
free to use any kind of language

00:03:43,859 --> 00:03:48,989
whatsoever but of course you get

00:03:45,959 --> 00:03:53,239
benefits if we use the library part of

00:03:48,989 --> 00:03:57,299
avocado you actually get your test

00:03:53,239 --> 00:03:59,310
and one key point here as we said in a

00:03:57,299 --> 00:04:01,560
couple of other ways before is that the

00:03:59,310 --> 00:04:03,810
same to that's supposed to be run on the

00:04:01,560 --> 00:04:06,000
developers laptop is the same tool

00:04:03,810 --> 00:04:08,069
that's supposed to run on the grid so

00:04:06,000 --> 00:04:10,669
the same kind of output the same kind of

00:04:08,069 --> 00:04:14,879
experience the same kind of test results

00:04:10,669 --> 00:04:18,479
so avocado for users that's a general

00:04:14,879 --> 00:04:20,760
overview of the architecture here we

00:04:18,479 --> 00:04:22,800
have a user that's interacting with the

00:04:20,760 --> 00:04:26,810
test runner as I mentioned before a test

00:04:22,800 --> 00:04:29,840
Runner is extensible by means of plugins

00:04:26,810 --> 00:04:33,380
every single job that it's run actually

00:04:29,840 --> 00:04:37,340
has a unique sha-1 and the goal here is

00:04:33,380 --> 00:04:40,280
to have unique jobs so unique results

00:04:37,340 --> 00:04:43,330
results that we can merge that we can

00:04:40,280 --> 00:04:47,830
import export and we can actually

00:04:43,330 --> 00:04:51,260
compare in a centralized fashion so

00:04:47,830 --> 00:04:54,320
every single job can actually output

00:04:51,260 --> 00:04:56,510
results to different formats and we have

00:04:54,320 --> 00:04:59,990
like buting formats that are machinable

00:04:56,510 --> 00:05:02,390
readable like Jason and xunit and we

00:04:59,990 --> 00:05:06,380
have human readable formats like HTML

00:05:02,390 --> 00:05:09,110
and the console output and we can either

00:05:06,380 --> 00:05:14,000
C even send that those results to a

00:05:09,110 --> 00:05:16,669
centralized result server so avocado for

00:05:14,000 --> 00:05:18,680
the test writer of course you're going

00:05:16,669 --> 00:05:21,470
to write your test that's going to be

00:05:18,680 --> 00:05:24,830
run by the previous big block here that

00:05:21,470 --> 00:05:27,320
is the test runner and you're actually

00:05:24,830 --> 00:05:30,169
writing this test to actually a play

00:05:27,320 --> 00:05:32,630
with a given application or a set of

00:05:30,169 --> 00:05:37,040
applications as a stack or something

00:05:32,630 --> 00:05:39,260
like that so by writing a test you have

00:05:37,040 --> 00:05:42,050
a couple of options you can go with

00:05:39,260 --> 00:05:45,979
simple tests and simple tests are seen

00:05:42,050 --> 00:05:48,410
po tests actually return zero footers

00:05:45,979 --> 00:05:52,130
for success and non zero for failure

00:05:48,410 --> 00:05:55,700
it's a very very simple agreement

00:05:52,130 --> 00:05:58,100
between avocado and and simple tests or

00:05:55,700 --> 00:06:01,340
you can go the other route and actually

00:05:58,100 --> 00:06:03,919
use the API that avocado provides you

00:06:01,340 --> 00:06:07,690
would have to conform to the API but you

00:06:03,919 --> 00:06:10,640
get a lot more and a lot more out of it

00:06:07,690 --> 00:06:13,220
could mean that you get to use features

00:06:10,640 --> 00:06:16,070
like gdb to actually poking to the

00:06:13,220 --> 00:06:19,310
program that you're testing wrappers to

00:06:16,070 --> 00:06:23,210
get any execution of these programs that

00:06:19,310 --> 00:06:28,970
you're testing with different programs a

00:06:23,210 --> 00:06:31,370
per se any kind of intermediary program

00:06:28,970 --> 00:06:35,659
that you want you have your program run

00:06:31,370 --> 00:06:39,639
under so this is a general overview of

00:06:35,659 --> 00:06:41,560
what avocado is for test writers so

00:06:39,639 --> 00:06:44,110
one of the things that we have learned

00:06:41,560 --> 00:06:48,879
in the past and we've seen that the the

00:06:44,110 --> 00:06:52,090
whole testing test that's too box

00:06:48,879 --> 00:06:55,810
actually requires it's a way to describe

00:06:52,090 --> 00:06:58,120
these large matrices of tests in

00:06:55,810 --> 00:07:00,819
virtualization itself we actually get to

00:06:58,120 --> 00:07:03,370
deal with so many variations of so many

00:07:00,819 --> 00:07:05,409
different items we could briefly say we

00:07:03,370 --> 00:07:09,610
have so many disk formats we have so

00:07:05,409 --> 00:07:12,669
many Nix Nick types we have many guests

00:07:09,610 --> 00:07:14,800
and hosts OSS and at the end we probably

00:07:12,669 --> 00:07:19,210
want to test as much as it makes sense

00:07:14,800 --> 00:07:20,530
and what we had in the past in out of

00:07:19,210 --> 00:07:23,139
tests in the form of the Cartesian

00:07:20,530 --> 00:07:23,680
config file was something that helped us

00:07:23,139 --> 00:07:27,879
a lot

00:07:23,680 --> 00:07:29,860
qe gets a lot out of it but we believe

00:07:27,879 --> 00:07:31,750
we could go a little bit further and

00:07:29,860 --> 00:07:34,270
actually improve on that

00:07:31,750 --> 00:07:37,029
so the multiplexer is a way to create

00:07:34,270 --> 00:07:39,849
those large test matrices it is

00:07:37,029 --> 00:07:43,000
yamo based it is very very easy to

00:07:39,849 --> 00:07:46,840
describe an X it's actually kind of

00:07:43,000 --> 00:07:48,340
powerful because you can within the the

00:07:46,840 --> 00:07:50,289
y'know file which has a three

00:07:48,340 --> 00:07:52,120
representation at the end you can

00:07:50,289 --> 00:07:54,750
actually limit the scope and actually

00:07:52,120 --> 00:07:58,089
filter parts that don't make sense so

00:07:54,750 --> 00:07:59,740
let's suppose things like vertigo scuzzy

00:07:58,089 --> 00:08:02,259
doesn't make sense with a given a last

00:07:59,740 --> 00:08:04,029
guest you know how in where in the tree

00:08:02,259 --> 00:08:06,520
one thing is wearing the tree the other

00:08:04,029 --> 00:08:08,319
thing is and actually say that this

00:08:06,520 --> 00:08:10,960
thing actually doesn't go with the other

00:08:08,319 --> 00:08:15,520
so it's a very easy way to actually

00:08:10,960 --> 00:08:18,430
express those matrices this is a very

00:08:15,520 --> 00:08:22,330
simple and kind of real world lunch

00:08:18,430 --> 00:08:25,569
example for in a multiplexer on the left

00:08:22,330 --> 00:08:29,500
on the right hand side your left hand

00:08:25,569 --> 00:08:32,140
side we have a list of bread topping and

00:08:29,500 --> 00:08:33,789
filling with two choices for each and at

00:08:32,140 --> 00:08:35,919
the end we have what the multiplexer

00:08:33,789 --> 00:08:37,750
generates so you have every single

00:08:35,919 --> 00:08:41,440
possible kind of sandwich that you can

00:08:37,750 --> 00:08:45,459
make out of those ingredients and this

00:08:41,440 --> 00:08:48,850
is a again a very very simple example a

00:08:45,459 --> 00:08:51,610
more complex and close to the real world

00:08:48,850 --> 00:08:52,610
example is actually something like this

00:08:51,610 --> 00:08:56,570
it actually

00:08:52,610 --> 00:09:00,890
I'm not sure if it's readable but this

00:08:56,570 --> 00:09:04,310
actually shows a virtualization testing

00:09:00,890 --> 00:09:06,800
like example so we have a 73 line llamo

00:09:04,310 --> 00:09:08,870
file that describes two different

00:09:06,800 --> 00:09:11,690
environments production in the book it

00:09:08,870 --> 00:09:15,380
has like two different kernel

00:09:11,690 --> 00:09:18,680
configurations in a couple of Gaston

00:09:15,380 --> 00:09:21,350
asses at the end is this column on

00:09:18,680 --> 00:09:23,630
middle it's a tree representation what

00:09:21,350 --> 00:09:26,720
we define in the yellow file and it

00:09:23,630 --> 00:09:30,350
actually generates fourteen hundred

00:09:26,720 --> 00:09:34,190
thousand variants plus so it's a really

00:09:30,350 --> 00:09:36,769
concise way of describing and actually

00:09:34,190 --> 00:09:39,620
visualizing and actually generating all

00:09:36,769 --> 00:09:43,790
the test matrix that you probably want

00:09:39,620 --> 00:09:46,160
to test so without taking too long let's

00:09:43,790 --> 00:09:51,190
get to the more interesting part which

00:09:46,160 --> 00:09:55,010
is actually getting avacado working

00:09:51,190 --> 00:10:00,279
since we are at KVM forum we talk about

00:09:55,010 --> 00:10:03,170
kind of close to real-world scenario and

00:10:00,279 --> 00:10:05,829
let's let's imagine that we're working

00:10:03,170 --> 00:10:08,630
on a cue a new feature that actually

00:10:05,829 --> 00:10:14,450
touches three different targets let's

00:10:08,630 --> 00:10:18,339
say x86 64 I 686 the 32-bit Intel and

00:10:14,450 --> 00:10:23,170
arm so if you if you're working on your

00:10:18,339 --> 00:10:26,120
source QAM you like I hold my code and

00:10:23,170 --> 00:10:27,950
you're working on a feature that touches

00:10:26,120 --> 00:10:30,140
these three architectures these three

00:10:27,950 --> 00:10:32,750
targets you probably want to make sure

00:10:30,140 --> 00:10:36,620
that your code first of all with buttes

00:10:32,750 --> 00:10:40,490
so what a developer would probably do

00:10:36,620 --> 00:10:44,209
what I would do initially would be to

00:10:40,490 --> 00:10:48,529
write something like um you dot beaut SH

00:10:44,209 --> 00:10:51,680
which is a very very simple shell script

00:10:48,529 --> 00:10:54,560
it has a source dear where I want to

00:10:51,680 --> 00:10:56,839
build from the branch that I will to be

00:10:54,560 --> 00:10:59,089
I want to be from if I once you get the

00:10:56,839 --> 00:11:01,459
latest code or not in the targets that

00:10:59,089 --> 00:11:04,780
I'm working on like I said before so I

00:11:01,459 --> 00:11:09,460
optionally pull from the latest

00:11:04,780 --> 00:11:10,690
from from my origin and I go for each

00:11:09,460 --> 00:11:13,540
one of the targets

00:11:10,690 --> 00:11:17,920
I run configure and make so this should

00:11:13,540 --> 00:11:19,930
actually get me the three architectures

00:11:17,920 --> 00:11:22,690
the three targets built that I'm working

00:11:19,930 --> 00:11:25,930
on and if something goes wrong then I'll

00:11:22,690 --> 00:11:28,410
probably notice it and avacado was

00:11:25,930 --> 00:11:31,060
actually designed to run any kind of

00:11:28,410 --> 00:11:33,700
acceptable including shell scripts

00:11:31,060 --> 00:11:37,960
including binaries written and compiled

00:11:33,700 --> 00:11:40,330
out of any language whatsoever so what

00:11:37,960 --> 00:11:41,950
we could do with this shell script which

00:11:40,330 --> 00:11:44,140
I'm not going to do because we don't

00:11:41,950 --> 00:11:46,450
want to wait all the time it should

00:11:44,140 --> 00:11:48,730
actually run anything and running

00:11:46,450 --> 00:11:49,540
anything means running safe slash means

00:11:48,730 --> 00:11:52,870
less true

00:11:49,540 --> 00:11:55,630
what avvocato does here it's you

00:11:52,870 --> 00:11:59,350
actually run this binary identifies that

00:11:55,630 --> 00:12:02,740
I returned a 0 a 0 status code and

00:11:59,350 --> 00:12:06,370
actually considers the test as success

00:12:02,740 --> 00:12:09,700
so the test passed if the same if

00:12:06,370 --> 00:12:12,190
another binary has a test that it's just

00:12:09,700 --> 00:12:13,780
similar to it and acceptable actually we

00:12:12,190 --> 00:12:16,960
turned something different than that

00:12:13,780 --> 00:12:19,150
then we have a failure so the shell

00:12:16,960 --> 00:12:21,070
script if it returned any error code

00:12:19,150 --> 00:12:25,089
that was different from zero would get a

00:12:21,070 --> 00:12:27,339
failure so you may be thinking all right

00:12:25,089 --> 00:12:30,040
I could run the shell script by by

00:12:27,339 --> 00:12:33,820
myself so why would I actually want to

00:12:30,040 --> 00:12:36,100
wrap everything in avocado and what we

00:12:33,820 --> 00:12:38,830
believe here is they're actually running

00:12:36,100 --> 00:12:43,870
tests if you consider your built test a

00:12:38,830 --> 00:12:45,670
test without actually to actually help

00:12:43,870 --> 00:12:47,830
you out it's probably something like

00:12:45,670 --> 00:12:51,820
writing code about version control

00:12:47,830 --> 00:12:53,980
you run a test and you know what that

00:12:51,820 --> 00:12:55,750
sign what you doing you know the results

00:12:53,980 --> 00:12:58,560
at that very time but when you clear up

00:12:55,750 --> 00:13:01,780
the screen you forgot about everything

00:12:58,560 --> 00:13:05,320
so by writing avocado what you get here

00:13:01,780 --> 00:13:07,750
is persistence of results so even the

00:13:05,320 --> 00:13:13,260
simple beauty test like this can

00:13:07,750 --> 00:13:16,860
actually help you a lot so these last

00:13:13,260 --> 00:13:18,400
simple job runs that I run they actually

00:13:16,860 --> 00:13:24,460
populated our

00:13:18,400 --> 00:13:26,530
Ferro job results and we have three jobs

00:13:24,460 --> 00:13:28,780
that we run and we have a pointer to the

00:13:26,530 --> 00:13:37,320
latest one and if I run another one and

00:13:28,780 --> 00:13:39,910
ask for a browser I'll get a browser

00:13:37,320 --> 00:13:43,240
with the results and these results are

00:13:39,910 --> 00:13:45,250
persisted as I said before they include

00:13:43,240 --> 00:13:47,740
human readable results and they also

00:13:45,250 --> 00:13:49,900
include machinable readable results and

00:13:47,740 --> 00:13:52,180
with machine will readable results we

00:13:49,900 --> 00:13:55,330
have a couple of options we can output

00:13:52,180 --> 00:13:58,960
say 2x unit I'm asking it actually I'll

00:13:55,330 --> 00:14:02,700
put that on the command on the on the

00:13:58,960 --> 00:14:05,830
standard output and I could ask for

00:14:02,700 --> 00:14:06,370
other formats to actually go in the same

00:14:05,830 --> 00:14:11,020
direction

00:14:06,370 --> 00:14:12,910
so the the main thing here about using

00:14:11,020 --> 00:14:15,430
avocado is that you get persistence of

00:14:12,910 --> 00:14:18,820
result you could probably ask a month

00:14:15,430 --> 00:14:21,190
from now if a month ago that even commit

00:14:18,820 --> 00:14:24,100
actually compile on your system on a

00:14:21,190 --> 00:14:25,780
given version of GCC because one of the

00:14:24,100 --> 00:14:28,090
things that you get for free with

00:14:25,780 --> 00:14:31,600
avocado is the system information

00:14:28,090 --> 00:14:34,210
collection so this is this is all

00:14:31,600 --> 00:14:37,000
collected for free it's a configurable

00:14:34,210 --> 00:14:40,110
system so you have a predefined set of

00:14:37,000 --> 00:14:44,470
information so this is the CPU info

00:14:40,110 --> 00:14:47,080
taken out of proc you have the DF

00:14:44,470 --> 00:14:49,290
command D message and a whole bunch of

00:14:47,080 --> 00:14:53,170
them as I said before this is actually

00:14:49,290 --> 00:14:54,850
configurable you can go to avacados info

00:14:53,170 --> 00:14:57,490
and if you want to collect on our

00:14:54,850 --> 00:14:59,560
command you just drop a line here if you

00:14:57,490 --> 00:15:03,130
want to collect another file you just

00:14:59,560 --> 00:15:04,990
drop a line here and there you have it

00:15:03,130 --> 00:15:06,850
you don't have to do anything else to

00:15:04,990 --> 00:15:10,600
actually have that recorded in your

00:15:06,850 --> 00:15:13,600
history so having said a little bit

00:15:10,600 --> 00:15:16,120
about what running any kind of binary

00:15:13,600 --> 00:15:19,120
inside avocado any kind of executable

00:15:16,120 --> 00:15:21,010
inside avocado actually gets you let's

00:15:19,120 --> 00:15:24,220
see what the library part of avocado

00:15:21,010 --> 00:15:29,950
actually helps you to do so instead of

00:15:24,220 --> 00:15:31,720
the qm you build shell script that I

00:15:29,950 --> 00:15:34,600
briefly showed you

00:15:31,720 --> 00:15:39,009
or let's try to do an avocado version of

00:15:34,600 --> 00:15:41,949
that so we have a carro version s cube u

00:15:39,009 --> 00:15:44,680
dot P Y and let's go briefly through

00:15:41,949 --> 00:15:47,740
this code so the code is intended to be

00:15:44,680 --> 00:15:52,689
simple and avocado test is mainly

00:15:47,740 --> 00:15:54,610
defined by a test actually a Python

00:15:52,689 --> 00:15:57,490
class that actually inherits from the

00:15:54,610 --> 00:15:59,560
avocado test class so this is where you

00:15:57,490 --> 00:16:02,379
import from the avocado namespace you

00:15:59,560 --> 00:16:04,899
define a class in this class can

00:16:02,379 --> 00:16:06,430
actually have one or many tests one

00:16:04,899 --> 00:16:08,529
thing that it's worth noticing is that

00:16:06,430 --> 00:16:11,769
you actually get to use all the

00:16:08,529 --> 00:16:14,740
background if you used to write write

00:16:11,769 --> 00:16:16,689
Python unit tests this is not actually

00:16:14,740 --> 00:16:19,300
like python unit tests but it's also

00:16:16,689 --> 00:16:22,870
compatible with python unit tests so you

00:16:19,300 --> 00:16:25,420
could have python unit tests runners run

00:16:22,870 --> 00:16:28,089
avocado test and avocado running Python

00:16:25,420 --> 00:16:31,660
unit tests so we have compatibility

00:16:28,089 --> 00:16:35,050
there so we have a setup method here

00:16:31,660 --> 00:16:37,360
which does a little bit of getting

00:16:35,050 --> 00:16:40,420
parameters and these parameters we

00:16:37,360 --> 00:16:43,959
either get come from default sources or

00:16:40,420 --> 00:16:46,059
from the multiplexer and a real action

00:16:43,959 --> 00:16:49,480
here on the setup just like on the shell

00:16:46,059 --> 00:16:51,339
script is actually to do git checkout on

00:16:49,480 --> 00:16:53,860
the right branch and optionally do a git

00:16:51,339 --> 00:16:56,769
book so pretty simple stuff the test

00:16:53,860 --> 00:16:59,649
itself is this method here let me try to

00:16:56,769 --> 00:17:03,279
get everything on the screen we have a

00:16:59,649 --> 00:17:05,949
decorator which means it's named fail on

00:17:03,279 --> 00:17:08,470
and what it means is that you if you

00:17:05,949 --> 00:17:11,319
actually get a horse on your test on

00:17:08,470 --> 00:17:13,990
this specific way that we are describing

00:17:11,319 --> 00:17:16,299
without any parameters these failures

00:17:13,990 --> 00:17:17,799
these errors inside the tests are

00:17:16,299 --> 00:17:21,370
actually going to be translated as

00:17:17,799 --> 00:17:23,409
failures so if you want to say that if

00:17:21,370 --> 00:17:25,659
anything happens and anything bad

00:17:23,409 --> 00:17:27,640
happens within your tests you want to

00:17:25,659 --> 00:17:31,000
get a failure and not a test error

00:17:27,640 --> 00:17:33,580
that's how you do it so here we have the

00:17:31,000 --> 00:17:36,460
matter the method itself the test method

00:17:33,580 --> 00:17:38,710
itself these bunch of lines are actually

00:17:36,460 --> 00:17:40,690
related to getting parameters that I

00:17:38,710 --> 00:17:43,659
said before either from the faults or

00:17:40,690 --> 00:17:44,930
from the multiplexer and the real action

00:17:43,659 --> 00:17:47,390
is also really simple

00:17:44,930 --> 00:17:50,720
and like quite comparable to the shell

00:17:47,390 --> 00:17:52,340
squid version we saw before so we create

00:17:50,720 --> 00:17:55,130
a view directly if it doesn't exist

00:17:52,340 --> 00:17:58,010
before we run configure with the right

00:17:55,130 --> 00:18:00,380
parameters right here and then we do a

00:17:58,010 --> 00:18:03,380
make and additionally to what we were

00:18:00,380 --> 00:18:06,050
doing inside a shell script we also run

00:18:03,380 --> 00:18:10,730
the generated binary so this is our test

00:18:06,050 --> 00:18:12,740
it is quite simple and it actually helps

00:18:10,730 --> 00:18:16,070
us to go a little bit further than the

00:18:12,740 --> 00:18:19,100
first version so let's just think that

00:18:16,070 --> 00:18:23,800
right now we have decided that we have a

00:18:19,100 --> 00:18:28,220
plan and this plan is to actually have

00:18:23,800 --> 00:18:32,960
two different beauty types we want to

00:18:28,220 --> 00:18:34,880
build this as release Bude and we want

00:18:32,960 --> 00:18:38,090
to do some heavy performance testing on

00:18:34,880 --> 00:18:41,750
the release beaut and we also want to do

00:18:38,090 --> 00:18:44,480
to have the versions for obvious reasons

00:18:41,750 --> 00:18:46,730
because we want you debug them and for

00:18:44,480 --> 00:18:53,150
targets as we had before we want to have

00:18:46,730 --> 00:18:55,610
this compiled for x86 64 for i6 86 and

00:18:53,150 --> 00:18:57,650
for arm so that's our current plan

00:18:55,610 --> 00:19:01,700
that's what we want to do that's how we

00:18:57,650 --> 00:19:04,610
want to build given U and what we can do

00:19:01,700 --> 00:19:07,040
here is to actually express this as a

00:19:04,610 --> 00:19:09,410
young file for the multiplexer so key

00:19:07,040 --> 00:19:12,200
when you build oh yeah no it's actually

00:19:09,410 --> 00:19:14,690
similar to what we've done so we have

00:19:12,200 --> 00:19:17,420
two beauties which is release and a bug

00:19:14,690 --> 00:19:22,610
and we have to target three targets with

00:19:17,420 --> 00:19:26,450
which are x86 64 I 386 and arm out of

00:19:22,610 --> 00:19:29,660
this Yama file what we can see with

00:19:26,450 --> 00:19:35,390
avocado let's actually take a look at

00:19:29,660 --> 00:19:37,430
the tree version so beautiful targets

00:19:35,390 --> 00:19:39,860
this is actually really similar to what

00:19:37,430 --> 00:19:42,380
we were planning to do so we kind of

00:19:39,860 --> 00:19:45,980
achieve what we're planning and we can

00:19:42,380 --> 00:19:48,980
take a look at what each part of the

00:19:45,980 --> 00:19:51,200
tree actually contains so so for buttes

00:19:48,980 --> 00:19:53,480
hype release we are actually using c

00:19:51,200 --> 00:19:55,550
cache to speed up the build and for the

00:19:53,480 --> 00:19:59,300
bug we're actually doing enable debug

00:19:55,550 --> 00:20:03,000
and for the targets we have

00:19:59,300 --> 00:20:04,950
the individual target names so if we

00:20:03,000 --> 00:20:07,860
want to see what actually comes out of

00:20:04,950 --> 00:20:09,720
this we have six variants so six

00:20:07,860 --> 00:20:13,230
variants generated with everything that

00:20:09,720 --> 00:20:16,560
we plant so what can we do here we can

00:20:13,230 --> 00:20:18,930
run the QA new Beauty test and just say

00:20:16,560 --> 00:20:22,830
that we want to multiplex that using a

00:20:18,930 --> 00:20:25,100
new Beauty MO let me get out of this is

00:20:22,830 --> 00:20:28,140
six tests

00:20:25,100 --> 00:20:30,990
let's just stay you in the latest of a

00:20:28,140 --> 00:20:33,810
catalog and see what's going on so it's

00:20:30,990 --> 00:20:35,610
now on the second beaut so I'm using C

00:20:33,810 --> 00:20:39,180
cache there was a previous view so

00:20:35,610 --> 00:20:43,560
things should be like really really fast

00:20:39,180 --> 00:20:45,990
so we have the first three release

00:20:43,560 --> 00:20:51,510
builds almost down and we actually

00:20:45,990 --> 00:20:53,940
heading now debug deals so you can see

00:20:51,510 --> 00:20:57,030
briefly here oh it's gone and enable

00:20:53,940 --> 00:21:00,150
debug so these are actually being built

00:20:57,030 --> 00:21:04,710
so this is one how you can get a single

00:21:00,150 --> 00:21:09,420
test a very simple test written in the

00:21:04,710 --> 00:21:14,520
avocado API to actually increase your

00:21:09,420 --> 00:21:18,120
coverage of testing so this is one thing

00:21:14,520 --> 00:21:21,000
so avocado was able to run what we call

00:21:18,120 --> 00:21:23,220
simple tests jet just test a return

00:21:21,000 --> 00:21:25,380
either zero or nonzero as a result

00:21:23,220 --> 00:21:27,630
values and we were able to run native

00:21:25,380 --> 00:21:30,560
test with multiplexer to increase the

00:21:27,630 --> 00:21:33,510
scope of coverage but we also know that

00:21:30,560 --> 00:21:36,030
in most software projects test actually

00:21:33,510 --> 00:21:39,780
Spurs out of the creativity of

00:21:36,030 --> 00:21:41,880
developers so and actually to suit

00:21:39,780 --> 00:21:45,450
necessity the needs of the project

00:21:41,880 --> 00:21:47,490
itself and that it's kind of true in

00:21:45,450 --> 00:21:50,970
virtually every project and very very

00:21:47,490 --> 00:21:54,060
true in qmu so if we take a look at

00:21:50,970 --> 00:21:56,400
briefly look at what qmu has to offer in

00:21:54,060 --> 00:21:58,770
the test directory alone there is a

00:21:56,400 --> 00:22:02,250
whole bunch of stuff so let's take a

00:21:58,770 --> 00:22:04,980
look for instance at UM ey o tests these

00:22:02,250 --> 00:22:08,460
guys are kind of funny they're really

00:22:04,980 --> 00:22:11,770
interesting and we have here a bunch of

00:22:08,460 --> 00:22:16,060
tests actually look like shell scripts

00:22:11,770 --> 00:22:21,220
take a look at 0:01 it is shell based

00:22:16,060 --> 00:22:24,910
but it actually has us some extra

00:22:21,220 --> 00:22:28,120
payments so you cannot run 0 0 1 or 2 or

00:22:24,910 --> 00:22:30,670
121 or 135 any of those tests by

00:22:28,120 --> 00:22:33,610
themselves but you actually have to use

00:22:30,670 --> 00:22:36,940
check to run them and the extra thing is

00:22:33,610 --> 00:22:39,520
that check it doesn't it doesn't it

00:22:36,940 --> 00:22:41,680
cannot run from the source directory so

00:22:39,520 --> 00:22:44,500
it needs to be run from the Beauty

00:22:41,680 --> 00:22:46,120
directory so here's our Q mu tree

00:22:44,500 --> 00:22:49,390
here is the view directory that our

00:22:46,120 --> 00:22:51,370
tests actually created here we see that

00:22:49,390 --> 00:22:53,020
I created the bug and release versions

00:22:51,370 --> 00:22:56,370
for each of the targets that we were

00:22:53,020 --> 00:23:01,320
talking about and now we want to run

00:22:56,370 --> 00:23:04,270
let's say the release version of x86 64

00:23:01,320 --> 00:23:07,150
let's get your Q 1 Q new are your tests

00:23:04,270 --> 00:23:10,960
from there and now we have check here

00:23:07,150 --> 00:23:13,360
and check can actually run and pass on

00:23:10,960 --> 00:23:16,420
this on this on this one example here

00:23:13,360 --> 00:23:18,400
and that actually gets us back to the

00:23:16,420 --> 00:23:21,280
first example which was the shell

00:23:18,400 --> 00:23:25,210
version of the the Q I the the Q mu

00:23:21,280 --> 00:23:28,840
beauty which is okay that's nice it runs

00:23:25,210 --> 00:23:31,540
but oh I'll forget about it once I clean

00:23:28,840 --> 00:23:35,500
the screen it's gone I'm not sure what I

00:23:31,540 --> 00:23:38,620
used where it was but well I remember I

00:23:35,500 --> 00:23:40,630
vaguely remember that a pest so what we

00:23:38,620 --> 00:23:43,120
want here is to actually help you guys

00:23:40,630 --> 00:23:45,370
to concentrate all the test results and

00:23:43,120 --> 00:23:48,280
we want avvocato to be able to actually

00:23:45,370 --> 00:23:49,960
run those tests and persist the result

00:23:48,280 --> 00:23:52,560
these results so they can actually be

00:23:49,960 --> 00:23:55,240
kept exchanged look it up in the future

00:23:52,560 --> 00:23:58,840
merge to a central database server and

00:23:55,240 --> 00:24:01,390
so on so what we can do here

00:23:58,840 --> 00:24:04,780
it's a Scavo car oh let's get back to

00:24:01,390 --> 00:24:07,360
avocado and say avocado please run test

00:24:04,780 --> 00:24:11,290
use your one zero zero two and zero zero

00:24:07,360 --> 00:24:13,720
three but she run the sting you actually

00:24:11,290 --> 00:24:16,750
need an extra two and we call this thing

00:24:13,720 --> 00:24:18,760
in a runner so check is the actually guy

00:24:16,750 --> 00:24:22,900
is the actual guy that's going to run

00:24:18,760 --> 00:24:24,999
the test so this inner runner is located

00:24:22,900 --> 00:24:29,079
in qmu Butte let's

00:24:24,999 --> 00:24:32,739
the release version x86 64 sq m UI your

00:24:29,079 --> 00:24:37,299
test check and this runner it actually

00:24:32,739 --> 00:24:39,579
needs to be run from there its own

00:24:37,299 --> 00:24:42,099
directory so we are going to actually

00:24:39,579 --> 00:24:43,959
change the directory to where a check is

00:24:42,099 --> 00:24:46,389
because that's the only way check

00:24:43,959 --> 00:24:48,999
actually works and we're going to run

00:24:46,389 --> 00:24:52,749
test one two and three and when we do

00:24:48,999 --> 00:24:56,859
this it actually runs them we can take a

00:24:52,749 --> 00:24:59,649
look at the job results here mean let's

00:24:56,859 --> 00:25:02,229
take a look in the HTML format and we

00:24:59,649 --> 00:25:03,839
have test one two and three can take a

00:25:02,229 --> 00:25:12,159
look at what happened

00:25:03,839 --> 00:25:16,329
let's take okay but anyway the result is

00:25:12,159 --> 00:25:19,329
collected and we had three passes so

00:25:16,329 --> 00:25:21,519
everything the human readable resort the

00:25:19,329 --> 00:25:24,729
results the machine readable results

00:25:21,519 --> 00:25:28,179
they're all there just likes very very

00:25:24,729 --> 00:25:32,159
simple tests any questions so far before

00:25:28,179 --> 00:25:32,159
we move a little bit further

00:25:35,460 --> 00:25:40,240
the names because the names can get

00:25:38,200 --> 00:26:03,340
really really long and there is no

00:25:40,240 --> 00:26:05,740
magical way yet of actually yeah at the

00:26:03,340 --> 00:26:09,730
very very least you get to actually see

00:26:05,740 --> 00:26:13,350
the variant expansion on the logs so you

00:26:09,730 --> 00:26:16,960
know which variant number actually means

00:26:13,350 --> 00:26:20,760
no so you would get something like

00:26:16,960 --> 00:26:20,760
avocado multi flax

00:26:46,990 --> 00:26:55,850
we know I know I know

00:26:53,480 --> 00:26:58,820
I know we know that this is a current

00:26:55,850 --> 00:27:00,140
kind of limitation that we have but like

00:26:58,820 --> 00:27:02,840
they said we didn't reach an agreement

00:27:00,140 --> 00:27:12,140
on how to name them so this is the

00:27:02,840 --> 00:27:14,470
current state of things but we you can

00:27:12,140 --> 00:27:14,470
relate

00:28:08,280 --> 00:28:17,110
what yeah

00:28:10,740 --> 00:28:19,750
and we I know and we we have actually

00:28:17,110 --> 00:28:21,730
discussed some options one of them is

00:28:19,750 --> 00:28:23,799
actually to be able to name them like

00:28:21,730 --> 00:28:25,840
match plea or if the user can somehow

00:28:23,799 --> 00:28:46,020
tag how he wants the variant should be

00:28:25,840 --> 00:28:46,020
named it's known it's a known limitation

00:28:46,320 --> 00:28:50,740
and have all like the complete yeah

00:28:49,990 --> 00:28:57,520
makes sense

00:28:50,740 --> 00:29:00,100
Thanks so having run qmu IO test out of

00:28:57,520 --> 00:29:03,240
the qmu beauty tree that we have just

00:29:00,100 --> 00:29:08,410
compiled let's see what else we can do

00:29:03,240 --> 00:29:11,110
let's take a look at a simple qmu based

00:29:08,410 --> 00:29:14,230
test um you IMG based test and see how

00:29:11,110 --> 00:29:16,000
it how Accardo can help with that so

00:29:14,230 --> 00:29:20,590
this is another example of a very simple

00:29:16,000 --> 00:29:22,900
test that still uses the same test class

00:29:20,590 --> 00:29:25,600
from the avocado namespace and still

00:29:22,900 --> 00:29:27,600
uses the same value on it just goes into

00:29:25,600 --> 00:29:31,840
a little bit more in detail about the

00:29:27,600 --> 00:29:35,920
where it should actually consider a test

00:29:31,840 --> 00:29:40,300
or a failure so if any of process run

00:29:35,920 --> 00:29:42,160
actually raises command a or DS is

00:29:40,300 --> 00:29:44,440
actually going to be considered a test

00:29:42,160 --> 00:29:46,780
failure if anything else happens like

00:29:44,440 --> 00:29:48,400
any other exceptions raised it's going

00:29:46,780 --> 00:29:51,190
to be considered a test errors so

00:29:48,400 --> 00:29:53,920
avocado wants you to be assertive on

00:29:51,190 --> 00:29:55,330
what you testing and be precise and be

00:29:53,920 --> 00:29:57,190
able to tell that something was a

00:29:55,330 --> 00:29:58,960
failure from the program that you're

00:29:57,190 --> 00:30:01,780
actually testing or know it could be

00:29:58,960 --> 00:30:03,970
something that actually it's broken on

00:30:01,780 --> 00:30:04,810
your test or no test infrastructure or

00:30:03,970 --> 00:30:08,200
something like that

00:30:04,810 --> 00:30:12,090
so here we have the test method itself

00:30:08,200 --> 00:30:15,790
it actually refers to two images Q

00:30:12,090 --> 00:30:18,460
resources that the test use and these

00:30:15,790 --> 00:30:21,370
are good you Cal and bad you cow so we

00:30:18,460 --> 00:30:24,160
have two images and two ways to fail so

00:30:21,370 --> 00:30:27,700
the first way to fail just saying it

00:30:24,160 --> 00:30:29,500
again as if process run fails it's going

00:30:27,700 --> 00:30:31,870
to raise command error and it's going

00:30:29,500 --> 00:30:34,420
result in the test fader the other way

00:30:31,870 --> 00:30:36,490
is to be really assertive just like

00:30:34,420 --> 00:30:38,920
Python unit test does this actually

00:30:36,490 --> 00:30:42,850
comes from the unit test class and says

00:30:38,920 --> 00:30:45,190
that I want this to actually raise an

00:30:42,850 --> 00:30:47,290
exception so bad should raise this

00:30:45,190 --> 00:30:51,640
command every exception if it doesn't do

00:30:47,290 --> 00:30:56,680
this it's a failure so let's try to run

00:30:51,640 --> 00:30:58,750
this avocado run qmu IMG and a well it

00:30:56,680 --> 00:31:01,030
passed no major surprises

00:30:58,750 --> 00:31:03,430
but one nice thing about actually having

00:31:01,030 --> 00:31:06,610
avocados really to the resources that

00:31:03,430 --> 00:31:09,280
you actually use during a test is that

00:31:06,610 --> 00:31:13,780
avocado can do things like running tests

00:31:09,280 --> 00:31:16,450
on remote machines and by knowing that

00:31:13,780 --> 00:31:20,110
kind of thing let me fire up the machine

00:31:16,450 --> 00:31:22,570
that I need oh it's already running so

00:31:20,110 --> 00:31:26,890
by knowing that kind of stuff I can do

00:31:22,570 --> 00:31:31,570
avocados run qmu IMG dot P why I want to

00:31:26,890 --> 00:31:40,150
run this on a domain called kayvyun form

00:31:31,570 --> 00:31:43,450
for the word 22 and the VM host name and

00:31:40,150 --> 00:31:48,610
when I do this it's actually being run

00:31:43,450 --> 00:31:51,760
on the remote system yeah and we can

00:31:48,610 --> 00:31:54,220
take a look at the locks see what

00:31:51,760 --> 00:31:55,990
actually happened so you see there is a

00:31:54,220 --> 00:31:57,490
canonical name here that is different

00:31:55,990 --> 00:31:59,080
from the origin because the test was

00:31:57,490 --> 00:32:01,420
actually copied over to the other

00:31:59,080 --> 00:32:03,340
machine so it actually expands on the

00:32:01,420 --> 00:32:06,430
full local path but was the path that

00:32:03,340 --> 00:32:08,110
was located on and we can actually take

00:32:06,430 --> 00:32:10,330
a look at the seasons information that

00:32:08,110 --> 00:32:12,640
was collected there I want to prove that

00:32:10,330 --> 00:32:15,250
I'm not cheating so let's take a look Oh

00:32:12,640 --> 00:32:17,260
host name is K game farm for 23 we can

00:32:15,250 --> 00:32:19,810
take a look say the command line I'm

00:32:17,260 --> 00:32:23,710
running a different kernel here so yes

00:32:19,810 --> 00:32:25,900
it run on the other place and things can

00:32:23,710 --> 00:32:29,680
go a little bit more interesting let's

00:32:25,900 --> 00:32:32,440
imagine that you're running tester kind

00:32:29,680 --> 00:32:34,510
of dangerous so let's say we want to run

00:32:32,440 --> 00:32:37,210
them as route and a VM it's probably the

00:32:34,510 --> 00:32:39,160
best place to do that and if everything

00:32:37,210 --> 00:32:41,290
is set up properly this will actually

00:32:39,160 --> 00:32:45,899
run as root on a VM but it can also

00:32:41,290 --> 00:33:02,080
damage the VM so why don't we do

00:32:45,899 --> 00:33:03,850
yeah still yep yep yes it's on a leap

00:33:02,080 --> 00:33:06,610
ver to find VM that has avocado

00:33:03,850 --> 00:33:10,139
pre-installed and it has either SSH key

00:33:06,610 --> 00:33:10,139
or it's going to ask you for a password

00:33:14,640 --> 00:33:29,590
yes yes it does it actually does I could

00:33:26,380 --> 00:33:41,830
actually shut down with the M here so

00:33:29,590 --> 00:33:45,690
let's do this what we actually did not

00:33:41,830 --> 00:33:49,480
actually kind of come to an agreement is

00:33:45,690 --> 00:33:51,610
that actually sometimes a VM can

00:33:49,480 --> 00:33:53,380
actually take longer or more time to

00:33:51,610 --> 00:33:57,190
boot we have a very short timeout here

00:33:53,380 --> 00:34:01,090
so if I do this it's probably going to

00:33:57,190 --> 00:34:03,520
fail the first time yes it did because

00:34:01,090 --> 00:34:08,290
the machine is booting let's see the

00:34:03,520 --> 00:34:11,070
second time yeah

00:34:08,290 --> 00:34:11,070
so now it's ready

00:34:12,260 --> 00:34:17,750
the time out it's actually now currently

00:34:15,860 --> 00:34:21,400
hard-coded but it would be like pretty

00:34:17,750 --> 00:34:21,400
trivial to actually make it optional

00:34:23,450 --> 00:34:26,200
uh-huh

00:34:43,089 --> 00:34:47,599
mmm-hmm we could actually ping the port

00:34:45,919 --> 00:34:50,089
and things like that but here they are

00:34:47,599 --> 00:34:52,399
configurable as well I mean this is a

00:34:50,089 --> 00:34:54,529
feature that can like ain't like

00:34:52,399 --> 00:35:06,680
everything in avocado can get the nice

00:34:54,529 --> 00:35:10,089
little touches in it no it's yeah yeah

00:35:06,680 --> 00:35:14,299
and this feature actually it actually

00:35:10,089 --> 00:35:17,299
came from a feature that its remote host

00:35:14,299 --> 00:35:19,460
so you could have something that is not

00:35:17,299 --> 00:35:27,140
a VM form filler words mean each new

00:35:19,460 --> 00:35:29,119
remote user so it could be any kind of

00:35:27,140 --> 00:35:31,630
machine it doesn't need to be a virtual

00:35:29,119 --> 00:35:35,180
machine can be a remote machine so

00:35:31,630 --> 00:35:36,980
that's why we kind of seems we inherited

00:35:35,180 --> 00:35:38,569
the functionality from the other one we

00:35:36,980 --> 00:35:40,759
don't know if that machine and actually

00:35:38,569 --> 00:35:43,369
needs to boot up or is it running is it

00:35:40,759 --> 00:35:44,690
not so we had a shorter time out but

00:35:43,369 --> 00:35:50,599
it's easy to actually make it

00:35:44,690 --> 00:35:52,489
configurable yeah so like so like I was

00:35:50,599 --> 00:35:54,849
saying suppose you're running have a

00:35:52,489 --> 00:35:54,849
question

00:36:00,330 --> 00:36:12,760
yes yes yes sure sure that is bland we

00:36:10,630 --> 00:36:14,830
want to be really really flexible on

00:36:12,760 --> 00:36:33,400
what avocados can run as a test and

00:36:14,830 --> 00:36:36,670
where it can actually run it so in case

00:36:33,400 --> 00:36:39,460
you guys missed it it's actually quite

00:36:36,670 --> 00:36:42,010
easy in the first slides I show that

00:36:39,460 --> 00:36:44,230
avocado is actually this kind of small

00:36:42,010 --> 00:36:46,510
test runner that is actually pluggable

00:36:44,230 --> 00:36:49,420
if we take a look here at avocado

00:36:46,510 --> 00:36:51,760
plugins we get a sense of that so these

00:36:49,420 --> 00:36:53,859
are the features there look kind of core

00:36:51,760 --> 00:36:58,150
but he actually implemented as plugins

00:36:53,859 --> 00:36:59,950
so the VM the run on the run test one of

00:36:58,150 --> 00:37:02,349
your two machine is a plugging the run

00:36:59,950 --> 00:37:05,200
remote is another plugin so running

00:37:02,349 --> 00:37:07,480
something on docker on a clock image or

00:37:05,200 --> 00:37:09,910
things like that could be done Lucas

00:37:07,480 --> 00:37:13,089
actually wrote a docker plugin we didn't

00:37:09,910 --> 00:37:17,650
actually committed that but could be

00:37:13,089 --> 00:37:20,770
done so getting back to the virtual

00:37:17,650 --> 00:37:22,660
example let's say we have to we we have

00:37:20,770 --> 00:37:25,390
something kind of dangerous running as a

00:37:22,660 --> 00:37:30,580
test let's let's you know what let's

00:37:25,390 --> 00:37:34,859
make it dangerous so let's do something

00:37:30,580 --> 00:37:34,859
like open since I know this is

00:37:35,269 --> 00:37:45,059
and I want to write some garbage to it

00:37:39,470 --> 00:37:47,309
okay so let's run this and say VM please

00:37:45,059 --> 00:37:51,420
clean up after you run it and you're

00:37:47,309 --> 00:37:54,029
running his route so what happens here

00:37:51,420 --> 00:37:56,099
is that the test runs a snapshot was

00:37:54,029 --> 00:37:58,200
taken before the test was run and the

00:37:56,099 --> 00:38:00,089
state was reverted so I could run this

00:37:58,200 --> 00:38:02,609
like a million times reboot the machine

00:38:00,089 --> 00:38:04,950
and everything and your test you just

00:38:02,609 --> 00:38:10,380
run over there and get you back the

00:38:04,950 --> 00:38:13,500
state that you had before I delete the

00:38:10,380 --> 00:38:17,420
snapshot I take a snapshot I run the

00:38:13,500 --> 00:38:17,420
test and I delete the snapshot

00:38:18,790 --> 00:38:23,670
yep

00:38:21,070 --> 00:38:23,670
yep

00:38:29,170 --> 00:38:34,990
yeah actually it can pause the VM and

00:38:31,970 --> 00:38:37,670
actually restore the state as well the

00:38:34,990 --> 00:38:40,510
not only the snapshot in disk but also

00:38:37,670 --> 00:38:40,510
the state

00:38:50,430 --> 00:38:56,190
mm-hmm okay

00:39:30,460 --> 00:39:35,270
well we're probably talking about

00:39:33,080 --> 00:39:38,360
creating a plugin we're going to go

00:39:35,270 --> 00:39:40,820
through the or we call now of car VT

00:39:38,360 --> 00:39:44,060
which is an extension to avocado that

00:39:40,820 --> 00:39:46,310
does testing on the verge stack and by

00:39:44,060 --> 00:39:48,770
meat by vert stack I mean Q&U itself

00:39:46,310 --> 00:39:51,170
live vert so the same kind of thing

00:39:48,770 --> 00:39:59,110
could be done with probably overt or

00:39:51,170 --> 00:40:02,110
Gloucester fast running any any test

00:39:59,110 --> 00:40:02,110
yeah

00:40:02,200 --> 00:40:08,120
no the test itself does not in this in

00:40:05,900 --> 00:40:14,330
this case here in this feature year no

00:40:08,120 --> 00:40:18,880
it's just a matter we do actually I

00:40:14,330 --> 00:40:21,740
actually showed one of the tests commute

00:40:18,880 --> 00:40:23,870
and the test itself it has to set up it

00:40:21,740 --> 00:40:26,900
can have a teardown I actually don't

00:40:23,870 --> 00:40:29,840
have this one but they actually inherit

00:40:26,900 --> 00:40:38,540
all this even logic incompatibility from

00:40:29,840 --> 00:40:40,820
Python unit test test case class oh yeah

00:40:38,540 --> 00:40:42,650
I will actually give you a couple of

00:40:40,820 --> 00:40:45,200
options on how to use avocado with

00:40:42,650 --> 00:40:47,120
existing tools one of the things that

00:40:45,200 --> 00:40:49,880
have occurred I can actually run I can

00:40:47,120 --> 00:40:52,940
actually do is let's say we have the

00:40:49,880 --> 00:40:55,250
same QM you Beauty test and it was

00:40:52,940 --> 00:40:57,680
written it was specifically written

00:40:55,250 --> 00:41:00,920
using the avocado API there's no way to

00:40:57,680 --> 00:41:03,920
run QM you viewed without it so we can

00:41:00,920 --> 00:41:08,030
actually let me see if I give you the

00:41:03,920 --> 00:41:11,840
straight image so if we import from

00:41:08,030 --> 00:41:19,310
avocado this thing called say that again

00:41:11,840 --> 00:41:21,760
oh yeah good I wouldn't be able because

00:41:19,310 --> 00:41:28,700
I'm running as a regular user anyway so

00:41:21,760 --> 00:41:43,550
so let's say if name is main we can do

00:41:28,700 --> 00:41:46,610
main and let's make this acceptable and

00:41:43,550 --> 00:41:48,740
we can run this just like this and it's

00:41:46,610 --> 00:41:51,470
actually going to report either success

00:41:48,740 --> 00:41:53,810
or failure so you could see you leverage

00:41:51,470 --> 00:41:57,110
all the avocado API and not use the

00:41:53,810 --> 00:41:59,030
avocado test Runner itself and actually

00:41:57,110 --> 00:42:04,910
get things working that's one of the

00:41:59,030 --> 00:42:08,570
options so all right let's see what else

00:42:04,910 --> 00:42:12,040
we have was a bunch of interesting

00:42:08,570 --> 00:42:14,960
questions and interesting suggestions so

00:42:12,040 --> 00:42:17,480
okay we have run things on the remote

00:42:14,960 --> 00:42:19,180
machine and now we're going to pause and

00:42:17,480 --> 00:42:23,060
actually take a look at of a car ovt

00:42:19,180 --> 00:42:25,880
which is not running tests on virtual

00:42:23,060 --> 00:42:30,350
machines but actually running tests that

00:42:25,880 --> 00:42:31,520
test the actual word stack so on the

00:42:30,350 --> 00:42:35,240
previous week's

00:42:31,520 --> 00:42:38,090
we actually had some kind of major

00:42:35,240 --> 00:42:40,880
releases and major announcements about

00:42:38,090 --> 00:42:42,680
avocado VT and we actually came to the

00:42:40,880 --> 00:42:47,420
point where we actually released

00:42:42,680 --> 00:42:49,860
avocado VT in a very very good shape so

00:42:47,420 --> 00:42:53,400
what I'm doing here

00:42:49,860 --> 00:42:55,770
just to speed things up I have one rpm

00:42:53,400 --> 00:43:01,410
which as the latest released I'm going

00:42:55,770 --> 00:43:05,820
to stall this thing it's hopefully not

00:43:01,410 --> 00:43:08,010
going to ask for ya no dependencies

00:43:05,820 --> 00:43:12,680
whatsoever I get back as a regular user

00:43:08,010 --> 00:43:16,380
and when I run over cut off plugins I

00:43:12,680 --> 00:43:18,840
actually get quite useful error messages

00:43:16,380 --> 00:43:21,600
saying that these two guys here they

00:43:18,840 --> 00:43:24,630
cannot actually run they're missing an

00:43:21,600 --> 00:43:27,960
environment so avocado VT just like very

00:43:24,630 --> 00:43:30,600
TAS it actually needs some kind of stuff

00:43:27,960 --> 00:43:34,800
to actually get started that means a

00:43:30,600 --> 00:43:36,330
couple of git repos downloaded gos image

00:43:34,800 --> 00:43:38,850
that's actually going to be used by

00:43:36,330 --> 00:43:42,390
default by the tests and a little bit

00:43:38,850 --> 00:43:44,460
more so just to speed things up I can

00:43:42,390 --> 00:43:46,920
actually cheat here I have a bootstrap

00:43:44,460 --> 00:43:49,050
shortcut we just copy stuff from a

00:43:46,920 --> 00:43:50,420
previous location but we're still going

00:43:49,050 --> 00:43:54,870
to do the real thing

00:43:50,420 --> 00:43:58,380
avocado v te bootstrap just going to

00:43:54,870 --> 00:44:03,240
take little less time so this process

00:43:58,380 --> 00:44:04,860
should be mostly automatic it would

00:44:03,240 --> 00:44:07,590
probably ask you if you want to download

00:44:04,860 --> 00:44:10,020
this image which I copied so we wouldn't

00:44:07,590 --> 00:44:12,690
have to wait for the download it's a 200

00:44:10,020 --> 00:44:16,670
megabyte image and after we have done

00:44:12,690 --> 00:44:19,650
this then avocado VT is ready to run so

00:44:16,670 --> 00:44:22,350
avocado is able to actually inspect and

00:44:19,650 --> 00:44:24,480
look at the tests on a Vacarro VT the

00:44:22,350 --> 00:44:27,510
test that we used to have on vert test

00:44:24,480 --> 00:44:29,670
and when we do do a list it takes a

00:44:27,510 --> 00:44:32,490
little bit more time then not having a

00:44:29,670 --> 00:44:36,510
Baqarah VT because it has to go to the

00:44:32,490 --> 00:44:39,450
whole birth test stuff but here we have

00:44:36,510 --> 00:44:42,540
a whole bunch of tests that come from of

00:44:39,450 --> 00:44:44,760
a car VT and chew avocado they're just

00:44:42,540 --> 00:44:46,740
tests so we could say something like

00:44:44,760 --> 00:44:49,080
runs lash being slash through together

00:44:46,740 --> 00:44:52,460
with another test so let's pick a test

00:44:49,080 --> 00:44:52,460
let's say

00:44:59,140 --> 00:45:06,890
yeah so I'm deciding that I want to get

00:45:03,109 --> 00:45:09,050
this one from the menu and run /bin

00:45:06,890 --> 00:45:13,930
slash two which is like a simple test

00:45:09,050 --> 00:45:15,290
and run are you github autotest cute

00:45:13,930 --> 00:45:18,530
with it

00:45:15,290 --> 00:45:29,330
so what we have here come on let's do it

00:45:18,530 --> 00:45:33,500
fast I just got so it was actually

00:45:29,330 --> 00:45:36,290
running the VM actually starting QM you

00:45:33,500 --> 00:45:37,820
actually SSH into it you check if things

00:45:36,290 --> 00:45:40,520
are actually doing all right

00:45:37,820 --> 00:45:42,560
so this is actually the same kind of

00:45:40,520 --> 00:45:45,109
test the same very test we used to have

00:45:42,560 --> 00:45:49,220
on the virtus repo actually run inside

00:45:45,109 --> 00:45:51,830
avocado all along with every most more

00:45:49,220 --> 00:45:55,580
about everything that we have demo so if

00:45:51,830 --> 00:45:58,910
we want say X unit out of this we could

00:45:55,580 --> 00:46:01,400
simply wait because we asked only for X

00:45:58,910 --> 00:46:04,310
unit and X unit is atomic and we only

00:46:01,400 --> 00:46:06,109
have the result at the end but we can

00:46:04,310 --> 00:46:08,510
take a look here and see the test is

00:46:06,109 --> 00:46:11,330
actually running we're ssh in there and

00:46:08,510 --> 00:46:13,609
all right there we go so we have X unit

00:46:11,330 --> 00:46:17,810
and we could plug this into another -

00:46:13,609 --> 00:46:20,630
such as Jenkins or anything so this is

00:46:17,810 --> 00:46:25,850
one of the features that you get by

00:46:20,630 --> 00:46:29,420
having avocado running the advert tests

00:46:25,850 --> 00:46:32,300
the current vertex and not running using

00:46:29,420 --> 00:46:34,310
run itself to do that we have a couple

00:46:32,300 --> 00:46:38,410
of interesting command-line options here

00:46:34,310 --> 00:46:43,550
so let's suppose we want to run this

00:46:38,410 --> 00:46:44,390
with the qmu that we've built on the qmu

00:46:43,550 --> 00:46:46,940
buta

00:46:44,390 --> 00:46:50,560
so here we have let's pick up the book

00:46:46,940 --> 00:46:50,560
version x86 64

00:46:50,970 --> 00:46:59,160
there we go so we want to run the boot

00:46:54,089 --> 00:47:02,430
test we want you I actually wanted only

00:46:59,160 --> 00:47:09,089
one of those windows but anyway so it's

00:47:02,430 --> 00:47:13,230
running there with the actual binary

00:47:09,089 --> 00:47:16,410
that we built and we can actually this

00:47:13,230 --> 00:47:22,859
is the latest result let me go to the

00:47:16,410 --> 00:47:25,170
latest latest and HTML results XML

00:47:22,859 --> 00:47:29,670
that's the human the boot resort is here

00:47:25,170 --> 00:47:32,819
and we if we go to the blog it's okay it

00:47:29,670 --> 00:47:38,430
just loves Emacs right so we can see

00:47:32,819 --> 00:47:42,329
here that it actually use the qmu binary

00:47:38,430 --> 00:47:49,890
that we just built and this is the

00:47:42,329 --> 00:47:52,550
command line itself so one extra feature

00:47:49,890 --> 00:47:57,420
one of the extra features that we have

00:47:52,550 --> 00:47:59,819
in avocado that you get here is we

00:47:57,420 --> 00:48:02,010
demoed last year a feature that actually

00:47:59,819 --> 00:48:06,270
allows you to get into the running app

00:48:02,010 --> 00:48:08,220
and actually runs be able to run a given

00:48:06,270 --> 00:48:12,450
binary letter which you have on your

00:48:08,220 --> 00:48:15,720
test inside gdb so we could do just the

00:48:12,450 --> 00:48:18,660
same thing here with the boot test so

00:48:15,720 --> 00:48:20,400
gdb run bean and the same binary it

00:48:18,660 --> 00:48:23,520
means that whenever the test actually

00:48:20,400 --> 00:48:27,810
runs this it's actually going to be

00:48:23,520 --> 00:48:29,730
stopped by avocado it's going to take a

00:48:27,810 --> 00:48:31,680
little bit more than you probably expect

00:48:29,730 --> 00:48:33,990
the reasons that we're using not only

00:48:31,680 --> 00:48:36,839
GDB GDB servers so you can actually

00:48:33,990 --> 00:48:39,810
attach to this running instance with

00:48:36,839 --> 00:48:42,390
whatever planes DB or any kind of

00:48:39,810 --> 00:48:47,880
front-end that you want and gdb server

00:48:42,390 --> 00:48:50,280
doesn't perform so speedily playing gdb

00:48:47,880 --> 00:48:53,730
so while that happens it actually has to

00:48:50,280 --> 00:48:56,069
copy all the the symbols and everything

00:48:53,730 --> 00:48:58,440
else to the other to the other places

00:48:56,069 --> 00:49:00,690
let's talk a little bit more of what I

00:48:58,440 --> 00:49:02,520
also Vacarro has and we'll get down to

00:49:00,690 --> 00:49:04,920
gdb in

00:49:02,520 --> 00:49:06,900
well it's not like this huge amount of

00:49:04,920 --> 00:49:11,250
time but it's probably like 60 seconds

00:49:06,900 --> 00:49:12,750
or so so what else have Accardo has and

00:49:11,250 --> 00:49:15,210
what else have occurred of does so right

00:49:12,750 --> 00:49:17,940
now avvocato also has this project

00:49:15,210 --> 00:49:20,520
called avocados server it is intended to

00:49:17,940 --> 00:49:24,120
be a consolidation central place for

00:49:20,520 --> 00:49:30,570
test results it exposed as results

00:49:24,120 --> 00:49:32,850
through HTTP rest-based API so this is

00:49:30,570 --> 00:49:34,650
actually preloaded with results it's not

00:49:32,850 --> 00:49:37,080
the results we were running but we

00:49:34,650 --> 00:49:40,260
should do things like get me the list of

00:49:37,080 --> 00:49:42,900
jobs that would return those if we went

00:49:40,260 --> 00:49:44,700
and said oh just show me a given job it

00:49:42,900 --> 00:49:47,490
would return information on that just

00:49:44,700 --> 00:49:50,070
show me the tests there or just show me

00:49:47,490 --> 00:49:52,380
the summary of the tests so it's a

00:49:50,070 --> 00:49:55,050
rest-based interface you could actually

00:49:52,380 --> 00:49:58,170
say just show me a summary of the jobs

00:49:55,050 --> 00:49:59,910
and we'll show you that you have one

00:49:58,170 --> 00:50:03,540
jobs that fail on the job that failed

00:49:59,910 --> 00:50:05,880
and she jobs the past and we also have

00:50:03,540 --> 00:50:07,590
the initial working version of a

00:50:05,880 --> 00:50:11,010
dashboard so this information actually

00:50:07,590 --> 00:50:14,160
comes from the rest base server it just

00:50:11,010 --> 00:50:16,350
presents it like in a better way for

00:50:14,160 --> 00:50:18,840
human beings so we want to consolidate

00:50:16,350 --> 00:50:21,360
all kind of results there and you should

00:50:18,840 --> 00:50:25,770
be able to create using this rest based

00:50:21,360 --> 00:50:27,840
interface another another thing that

00:50:25,770 --> 00:50:30,900
avocado actually plays really well with

00:50:27,840 --> 00:50:35,490
it is Jenkins we actually have a couple

00:50:30,900 --> 00:50:41,870
of instances running inside the brno

00:50:35,490 --> 00:50:41,870
office right is a porno office anyway

00:50:43,250 --> 00:50:49,590
okay machines are actually in the US

00:50:46,170 --> 00:50:52,830
right so this just just shows a couple

00:50:49,590 --> 00:50:55,710
of real-world avocado vtu running on arm

00:50:52,830 --> 00:50:58,830
64 and on PowerPC 64

00:50:55,710 --> 00:51:02,220
actually integrated Jenkins and this is

00:50:58,830 --> 00:51:07,410
not really that I mean it's not really

00:51:02,220 --> 00:51:09,060
that hard to get avocado running we with

00:51:07,410 --> 00:51:11,520
Jenkins so let's do something like

00:51:09,060 --> 00:51:14,070
really quick here let's create a new job

00:51:11,520 --> 00:51:15,450
let's call this perfect because it

00:51:14,070 --> 00:51:20,579
should be perfect

00:51:15,450 --> 00:51:22,680
it's a freestyle project let's add a

00:51:20,579 --> 00:51:26,099
butte stat here and we're just going to

00:51:22,680 --> 00:51:30,180
say avocados please run slash means less

00:51:26,099 --> 00:51:31,650
to run sleep test and run pass test so

00:51:30,180 --> 00:51:33,720
we won everything should be perfect

00:51:31,650 --> 00:51:35,760
going to take one second because of

00:51:33,720 --> 00:51:39,750
sleep test everything else would be

00:51:35,760 --> 00:51:43,980
perfect we want to output X unit this is

00:51:39,750 --> 00:51:46,200
going to be yeah this is going to be

00:51:43,980 --> 00:51:48,710
true that's going to be saved on

00:51:46,200 --> 00:51:54,869
workspace which is defined by Jenkins

00:51:48,710 --> 00:52:04,200
result XML and we also want to save the

00:51:54,869 --> 00:52:08,819
job results dear to work and see if I

00:52:04,200 --> 00:52:10,500
did not have a type of workspace okay so

00:52:08,819 --> 00:52:12,900
this is a command that we want to run

00:52:10,500 --> 00:52:15,720
here we could have if we had properly

00:52:12,900 --> 00:52:18,030
setup say avvocato VT or anything we

00:52:15,720 --> 00:52:20,609
could just like give the list of tests

00:52:18,030 --> 00:52:24,119
here and we actually want to read from

00:52:20,609 --> 00:52:26,520
the X unit result so we just put risotto

00:52:24,119 --> 00:52:27,089
XML here that's going to come from this

00:52:26,520 --> 00:52:31,530
place

00:52:27,089 --> 00:52:40,049
Oh results I'm sorry so yeah so let's

00:52:31,530 --> 00:52:43,940
save this and build now and yes we have

00:52:40,049 --> 00:52:47,369
a build that actually succeeded so

00:52:43,940 --> 00:52:49,700
status everything is nice we have only

00:52:47,369 --> 00:52:56,099
have one beaut let's do another one

00:52:49,700 --> 00:52:57,900
so it's raining again ok it took a

00:52:56,099 --> 00:53:03,660
second everything is nice and perfect

00:52:57,900 --> 00:53:06,599
and suppose we somehow screwed test but

00:53:03,660 --> 00:53:10,790
let's just used failure test here to see

00:53:06,599 --> 00:53:10,790
me like that so now we viewed it again

00:53:13,000 --> 00:53:19,510
and yes we start to get failures so this

00:53:17,050 --> 00:53:21,609
is how this is how trivial and how easy

00:53:19,510 --> 00:53:24,119
it is to actually get anything that can

00:53:21,609 --> 00:53:27,010
run inside avocado to actually

00:53:24,119 --> 00:53:29,890
communicate with other systems such as

00:53:27,010 --> 00:53:33,599
rankings so I promise you it did not

00:53:29,890 --> 00:53:36,609
take like five minutes to get here

00:53:33,599 --> 00:53:39,160
let's just see what happened here so we

00:53:36,609 --> 00:53:42,340
have avocados still running here and

00:53:39,160 --> 00:53:44,710
it's it tells us that the test is paused

00:53:42,340 --> 00:53:46,780
because with the Google break point to

00:53:44,710 --> 00:53:49,060
the boogie application run this script

00:53:46,780 --> 00:53:51,730
this script is no magic is just like

00:53:49,060 --> 00:53:54,010
utility so we could take a look at it it

00:53:51,730 --> 00:53:55,960
just runs gdb and asks gdb to run a

00:53:54,010 --> 00:53:58,450
couple of commands and when we actually

00:53:55,960 --> 00:54:01,840
exit gdb it tells of a kado to actually

00:53:58,450 --> 00:54:04,359
keep on going so you could use either

00:54:01,840 --> 00:54:06,790
gdb itself your own version of GEB your

00:54:04,359 --> 00:54:08,800
own front-end anything else so we're

00:54:06,790 --> 00:54:13,630
just going to run the script and when we

00:54:08,800 --> 00:54:16,920
run it we are inside qme with self so we

00:54:13,630 --> 00:54:21,300
could try like two step we could try to

00:54:16,920 --> 00:54:30,760
make bad things a set with ones equals

00:54:21,300 --> 00:54:33,369
beef okay so we cannot access that

00:54:30,760 --> 00:54:34,869
memory and that's expected but anyway we

00:54:33,369 --> 00:54:37,869
could do whatever we want here inside

00:54:34,869 --> 00:54:40,780
gdb and let the program actually keep on

00:54:37,869 --> 00:54:43,240
going so here the test is resuming and

00:54:40,780 --> 00:54:48,280
you actually get your poke inside the

00:54:43,240 --> 00:54:52,599
binary that you're running inside from

00:54:48,280 --> 00:54:54,369
within an avocado session so we could

00:54:52,599 --> 00:54:56,380
expand this a little bit we are let's

00:54:54,369 --> 00:54:59,800
talk a little bit about what our card is

00:54:56,380 --> 00:55:02,020
probably heading we are obviously

00:54:59,800 --> 00:55:04,119
looking for external contributions so if

00:55:02,020 --> 00:55:07,599
avocado actually looks anything like

00:55:04,119 --> 00:55:09,339
interesting to your use cases I want to

00:55:07,599 --> 00:55:13,119
stress that it's actually extendable

00:55:09,339 --> 00:55:17,530
it's pluggable so let's let's add more

00:55:13,119 --> 00:55:20,520
features to it we are actually going to

00:55:17,530 --> 00:55:22,660
work really hard in the near future on

00:55:20,520 --> 00:55:25,570
improving the virtualization support

00:55:22,660 --> 00:55:26,130
what avocado VT is it is the port of

00:55:25,570 --> 00:55:28,410
your

00:55:26,130 --> 00:55:30,869
to actually make use of the features

00:55:28,410 --> 00:55:34,079
that avocado has but we want to come up

00:55:30,869 --> 00:55:37,289
with a new API easier to use API so

00:55:34,079 --> 00:55:40,289
that's probably one big area that we're

00:55:37,289 --> 00:55:42,539
going to work on in the near future

00:55:40,289 --> 00:55:44,460
integrate even more with CI tools and

00:55:42,539 --> 00:55:47,609
provisioning too so the cloud based

00:55:44,460 --> 00:55:50,039
image question it's definitely something

00:55:47,609 --> 00:55:51,960
we've been thinking about our Cairo

00:55:50,039 --> 00:55:55,410
server is also something we want to

00:55:51,960 --> 00:55:58,069
invest on and there is one feature which

00:55:55,410 --> 00:56:00,930
is partially implemented the the basic

00:55:58,069 --> 00:56:04,559
infrastructure is there we used to have

00:56:00,930 --> 00:56:07,619
this in in autotest which is what we

00:56:04,559 --> 00:56:09,569
call component isolation and after that

00:56:07,619 --> 00:56:12,329
we could go towards what we call it

00:56:09,569 --> 00:56:14,430
mated by section and concept here for a

00:56:12,329 --> 00:56:16,710
component isolation is that since

00:56:14,430 --> 00:56:18,630
avocado already collects system

00:56:16,710 --> 00:56:21,200
information it actually knows what's

00:56:18,630 --> 00:56:25,170
your machine is like what's installed

00:56:21,200 --> 00:56:27,539
from given point of success to a given

00:56:25,170 --> 00:56:30,420
point of failure it's actually going to

00:56:27,539 --> 00:56:32,789
be able to tell you what change in your

00:56:30,420 --> 00:56:36,029
system and what probably caused the

00:56:32,789 --> 00:56:37,769
failure so you know to test we used to

00:56:36,029 --> 00:56:41,099
have this command-line option called

00:56:37,769 --> 00:56:43,710
regression point it would say give me

00:56:41,099 --> 00:56:46,200
the last regression point for even test

00:56:43,710 --> 00:56:49,380
and would say oh this package got

00:56:46,200 --> 00:56:50,759
updated or something else so that's

00:56:49,380 --> 00:56:53,880
where we're going and once we have that

00:56:50,759 --> 00:56:55,619
we can actually ask agree to actually

00:56:53,880 --> 00:56:59,720
run a bunch of tests and actually tell

00:56:55,619 --> 00:57:05,069
us to pinpoint where regression possibly

00:56:59,720 --> 00:57:07,319
happened so the last item it's really

00:57:05,069 --> 00:57:09,660
really true you get to the side please

00:57:07,319 --> 00:57:13,769
join us please influence the future of

00:57:09,660 --> 00:57:17,759
avocado and that's it if you guys have

00:57:13,769 --> 00:57:19,950
questions we have like three more

00:57:17,759 --> 00:57:24,289
minutes so I'm not going to jump in

00:57:19,950 --> 00:57:24,289
through another yeah

00:57:48,680 --> 00:57:53,930
how does cheat those things actually

00:57:51,210 --> 00:57:53,930
play together

00:58:08,360 --> 00:58:13,080
maybe maybe Lucas wants to answer that

00:58:11,040 --> 00:58:28,080
he actually wrote something we called

00:58:13,080 --> 00:58:54,000
Frankenstein mode it's not mandatory if

00:58:28,080 --> 00:58:56,280
that's what you want so just make it

00:58:54,000 --> 00:58:59,550
clear the old Cartesian config files are

00:58:56,280 --> 00:59:02,450
still there yeah you can only you can

00:58:59,550 --> 00:59:02,450
still use only

00:59:20,230 --> 00:59:23,010
oh yeah

00:59:28,340 --> 00:59:39,820
okay

00:59:30,770 --> 00:59:39,820
that's sure yeah that's good idea yeah

01:00:18,660 --> 01:00:29,230
so you want to keep it you want to keep

01:00:21,730 --> 01:00:31,770
the image between tests that's okay okay

01:00:29,230 --> 01:00:31,770
okay

01:00:43,450 --> 01:00:57,530
most of the command-line switches the

01:00:46,790 --> 01:01:00,520
same motor should have been preserved if

01:00:57,530 --> 01:01:00,520
for some reason

01:01:14,870 --> 01:01:20,640
so I think Paulo is saying that you have

01:01:18,690 --> 01:01:23,190
a local patch for a very test anyone

01:01:20,640 --> 01:01:25,560
should do the same thing to avocado well

01:01:23,190 --> 01:01:27,300
yeah you could you could use either

01:01:25,560 --> 01:01:38,600
avocado from source tree that's

01:01:27,300 --> 01:01:38,600
supported or but yeah I mean in a system

01:01:44,690 --> 01:01:51,300
in a system wide in a system wide

01:01:48,990 --> 01:02:13,350
installed you would get avocado in the

01:01:51,300 --> 01:02:16,790
Python standard place you could you

01:02:13,350 --> 01:02:16,790
could fetch it from here as well

01:02:33,650 --> 01:02:47,610
so so we kind of you don't have much

01:02:45,690 --> 01:02:49,650
time I just want to say that we have a

01:02:47,610 --> 01:02:53,250
couple of resources here one is the

01:02:49,650 --> 01:02:54,570
avocado website which is this one we

01:02:53,250 --> 01:02:57,480
also have a quite extensive

01:02:54,570 --> 01:02:58,980
documentation it is on read the docs you

01:02:57,480 --> 01:03:01,800
guys feel free to actually browse

01:02:58,980 --> 01:03:03,870
through it so everything from getting

01:03:01,800 --> 01:03:06,510
started through writing simple tests you

01:03:03,870 --> 01:03:09,270
having any kind of outputs come out of

01:03:06,510 --> 01:03:11,970
avocado using the multiplexer everything

01:03:09,270 --> 01:03:14,790
should be documented there we don't have

01:03:11,970 --> 01:03:17,970
time to get into each one of them of

01:03:14,790 --> 01:03:20,370
course but please go there and we also

01:03:17,970 --> 01:03:22,500
have a copy repo with ready to use

01:03:20,370 --> 01:03:24,960
packages the same ones that I'm using on

01:03:22,500 --> 01:03:28,250
corporate or our project comm coppers

01:03:24,960 --> 01:03:28,250
elomar autotest

01:03:28,820 --> 01:03:36,240
come on slides inside should show up in

01:03:32,670 --> 01:03:41,300
the full screen they're not oh it's

01:03:36,240 --> 01:03:41,300
right here all right thank you

01:03:55,680 --> 01:03:57,770

YouTube URL: https://www.youtube.com/watch?v=tdEg07BfdBw


