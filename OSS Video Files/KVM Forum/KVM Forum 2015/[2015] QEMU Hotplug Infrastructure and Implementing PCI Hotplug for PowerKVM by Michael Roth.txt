Title: [2015] QEMU Hotplug Infrastructure and Implementing PCI Hotplug for PowerKVM by Michael Roth
Publication date: 2015-09-05
Playlist: KVM Forum 2015
Description: 
	Just as with physical machines, the ability to hotplug resources into virtual machines is a commonly used and often critical feature for allowing users to modify network/storage/cpu/memory configurations for running guest instances without incurring unecessary downtime. This talk provides an overview of the infrastructure within QEMU to handle hotplug/unplug operations, device lifecycles, and how this infrastructure is used for various platforms/resources. It will also go into detail on how this infrastructure was used for implementing PCI hotplug for PowerKVM guests.

Michael Roth
Software Engineer, IBM
Mike Roth is a software engineer at IBM who's been working on | QEMU/KVM virtualization for the past 5 years. He's also the author/maintainer | of the QEMU Guest Agent, and stable release maintainer for QEMU. Most recently | he gave a talk about multiple main-loops/dataplanes in QEMU at KVM Forum 2013.

Slides: https://drive.google.com/file/d/0BzyAwvVlQckecUx0UERXZngzdVk/view?usp=sharing
Captions: 
	00:00:14,990 --> 00:00:19,980
my name is Michael Ross I'm a software

00:00:17,850 --> 00:00:22,680
engineer at the IBM Linux Technology

00:00:19,980 --> 00:00:25,410
Center and I'm here to talk about qmu

00:00:22,680 --> 00:00:30,810
hot-plug infrastructure and implementing

00:00:25,410 --> 00:00:41,700
pci hot plug on power kbm so first of

00:00:30,810 --> 00:00:45,450
all that is okay so why pci hot-plug why

00:00:41,700 --> 00:00:48,120
is that useful for us the obvious reason

00:00:45,450 --> 00:00:50,940
is we have servers that might be running

00:00:48,120 --> 00:00:52,590
critical services and we don't want

00:00:50,940 --> 00:00:55,079
those services to have to go down

00:00:52,590 --> 00:00:58,469
because we need to add adapters to the

00:00:55,079 --> 00:01:01,640
system or potentially replace adapters

00:00:58,469 --> 00:01:06,270
because of serviceability reasons so

00:01:01,640 --> 00:01:07,770
know if you have a pci adapter that's to

00:01:06,270 --> 00:01:10,290
run into some driver issues and you need

00:01:07,770 --> 00:01:12,560
to take it out and put a new adapter in

00:01:10,290 --> 00:01:16,350
the system that might be a reason for

00:01:12,560 --> 00:01:20,640
wanting to do pci hot-plug another

00:01:16,350 --> 00:01:23,670
reason might be you want to upgrade your

00:01:20,640 --> 00:01:25,439
your hardware maybe there's adapters

00:01:23,670 --> 00:01:26,820
that have some additional features that

00:01:25,439 --> 00:01:29,759
are useful for what you're using the

00:01:26,820 --> 00:01:32,329
system for maybe you're upgrading to a

00:01:29,759 --> 00:01:34,409
higher performance hardware but you

00:01:32,329 --> 00:01:37,650
can't afford to have your services go

00:01:34,409 --> 00:01:42,659
down in the meantime but the the main

00:01:37,650 --> 00:01:46,170
reason for pci hot-plug generally is

00:01:42,659 --> 00:01:49,170
expandability it's hard to judge

00:01:46,170 --> 00:01:51,750
beforehand what will end up needing to

00:01:49,170 --> 00:01:53,430
use our systems for there may be cases

00:01:51,750 --> 00:01:55,079
where we start off with the one gene

00:01:53,430 --> 00:01:58,049
network and everything's fine and then

00:01:55,079 --> 00:02:03,240
later down the road you upgrade to a

00:01:58,049 --> 00:02:04,380
tension network you might find that the

00:02:03,240 --> 00:02:05,820
amount of storage in the system is

00:02:04,380 --> 00:02:08,550
insufficient so you want to add a

00:02:05,820 --> 00:02:09,900
storage arrays so you want a hot plug an

00:02:08,550 --> 00:02:12,040
HBA into the system

00:02:09,900 --> 00:02:15,490
without having your services go down in

00:02:12,040 --> 00:02:17,200
the meantime just very basic

00:02:15,490 --> 00:02:19,900
straightforward reasons why we want that

00:02:17,200 --> 00:02:21,970
on physical machines mostly those still

00:02:19,900 --> 00:02:26,590
apply to virtual machines in too many

00:02:21,970 --> 00:02:29,530
cases at least for expandability they're

00:02:26,590 --> 00:02:33,600
even more important so in the case of

00:02:29,530 --> 00:02:36,520
physical machines it's it's not a very

00:02:33,600 --> 00:02:38,560
common occurrence that you're running

00:02:36,520 --> 00:02:40,210
into the lab and plugging new things

00:02:38,560 --> 00:02:42,940
into your machine on behalf of a

00:02:40,210 --> 00:02:46,060
customer or for yourself but in the case

00:02:42,940 --> 00:02:50,130
of virtual machines a lot of management

00:02:46,060 --> 00:02:52,860
interfaces they expose things like

00:02:50,130 --> 00:02:55,560
modifying your network configuration or

00:02:52,860 --> 00:03:00,220
adding additional storage to your vm

00:02:55,560 --> 00:03:04,420
they expose as a first class supported

00:03:00,220 --> 00:03:06,640
feature and it's important that you know

00:03:04,420 --> 00:03:09,040
we make sure that things right that

00:03:06,640 --> 00:03:10,870
things work correctly on the q mu side

00:03:09,040 --> 00:03:13,600
because a lot of these management stacks

00:03:10,870 --> 00:03:17,800
just they assume that PCI hot plug is a

00:03:13,600 --> 00:03:19,660
given but in some cases it's it's it's

00:03:17,800 --> 00:03:21,960
pretty involved so there's a lot of work

00:03:19,660 --> 00:03:26,050
that goes into implementing that and

00:03:21,960 --> 00:03:28,750
talk is a kind of go over how we

00:03:26,050 --> 00:03:31,060
implement that in the QM you today some

00:03:28,750 --> 00:03:34,990
of the newer developments in how we

00:03:31,060 --> 00:03:39,040
support PCI hot plug so what are the

00:03:34,990 --> 00:03:42,120
basic requirements for PCI hot-plug what

00:03:39,040 --> 00:03:45,730
when we implement hot-plug support or

00:03:42,120 --> 00:03:48,520
when we're implementing a you know a CPI

00:03:45,730 --> 00:03:51,300
based hot plug or SH pc-based hot plug

00:03:48,520 --> 00:03:54,970
what's the basic criteria that we need

00:03:51,300 --> 00:03:56,980
mainly you want to be able to plug in

00:03:54,970 --> 00:03:58,540
the device and then after plug in the

00:03:56,980 --> 00:04:00,010
device in you need to notify the

00:03:58,540 --> 00:04:02,320
operating system that there's a new

00:04:00,010 --> 00:04:05,410
device there so the operating system can

00:04:02,320 --> 00:04:07,750
probe the device enable it bring it

00:04:05,410 --> 00:04:10,120
online and then ideally you want a way

00:04:07,750 --> 00:04:11,470
for the operating system to then let you

00:04:10,120 --> 00:04:13,000
know that the device has been brought

00:04:11,470 --> 00:04:16,450
online so that you could begin making

00:04:13,000 --> 00:04:18,040
use of it the other side of that is a

00:04:16,450 --> 00:04:19,990
unplug

00:04:18,040 --> 00:04:22,570
only when you want to unplug a pci

00:04:19,990 --> 00:04:24,910
adapter you want to notify the operating

00:04:22,570 --> 00:04:26,920
system because prior to that there's

00:04:24,910 --> 00:04:28,800
really nothing you can do you you don't

00:04:26,920 --> 00:04:31,060
want to yank the device out of the slot

00:04:28,800 --> 00:04:34,000
operating system might be using it or

00:04:31,060 --> 00:04:36,580
you know on real hardware you could end

00:04:34,000 --> 00:04:39,280
up frying your system so all you can do

00:04:36,580 --> 00:04:42,610
is ask the OS to hand you control of the

00:04:39,280 --> 00:04:46,030
device or to bring the device offline

00:04:42,610 --> 00:04:48,520
for you I'm configuring it disable the

00:04:46,030 --> 00:04:50,860
device and then signal that that's been

00:04:48,520 --> 00:04:55,300
done at which point you can actually

00:04:50,860 --> 00:04:59,560
pull the device out of the system so in

00:04:55,300 --> 00:05:02,020
the case of qmu the user is it's not a

00:04:59,560 --> 00:05:04,930
physical person it's the Q mu management

00:05:02,020 --> 00:05:06,700
interface that's going to be the human

00:05:04,930 --> 00:05:09,220
monitor protocol like you modern or

00:05:06,700 --> 00:05:11,080
protocol some sort of management

00:05:09,220 --> 00:05:13,660
interface that management stack is going

00:05:11,080 --> 00:05:16,540
to use to add and remove devices from

00:05:13,660 --> 00:05:20,470
your virtual machine the main interfaces

00:05:16,540 --> 00:05:23,080
that that we're going to be using here

00:05:20,470 --> 00:05:26,290
are device add so in this case we're

00:05:23,080 --> 00:05:28,930
creating a ver de l nett pci device and

00:05:26,290 --> 00:05:33,040
we're going to plug it into the the

00:05:28,930 --> 00:05:36,280
default pci bus and then there's the

00:05:33,040 --> 00:05:40,380
device delete which is going to unplug

00:05:36,280 --> 00:05:43,060
it from the system what actually happens

00:05:40,380 --> 00:05:47,680
during the plug and unplug phase is

00:05:43,060 --> 00:05:50,830
going to depend on the variety of things

00:05:47,680 --> 00:05:53,680
but mainly it's going to depend on the

00:05:50,830 --> 00:05:58,210
platform and the architecture the way we

00:05:53,680 --> 00:06:00,130
do things on a PCIe capable machine are

00:05:58,210 --> 00:06:03,870
going to be different than the way we do

00:06:00,130 --> 00:06:11,410
things on see the default I 440 FX

00:06:03,870 --> 00:06:14,890
machine so the way that we register the

00:06:11,410 --> 00:06:17,430
handler to handle hop look operations on

00:06:14,890 --> 00:06:22,090
the pci bus is that we have an interface

00:06:17,430 --> 00:06:24,460
cube us set hot-plug handler we're going

00:06:22,090 --> 00:06:26,860
to pass it the pci bus that we wanted to

00:06:24,460 --> 00:06:28,750
handle hot-plug operations for and we're

00:06:26,860 --> 00:06:29,240
going to pass it the device that we want

00:06:28,750 --> 00:06:33,500
it to you

00:06:29,240 --> 00:06:36,889
to to arbitrate plug and unplug

00:06:33,500 --> 00:06:40,069
operations that device is going to

00:06:36,889 --> 00:06:43,789
implement a hot plug interface and that

00:06:40,069 --> 00:06:46,849
interface is basically three three

00:06:43,789 --> 00:06:50,060
callbacks there's the plug call back so

00:06:46,849 --> 00:06:52,250
once we once qmu actually places the

00:06:50,060 --> 00:06:54,169
device on the bus it's going to execute

00:06:52,250 --> 00:06:57,220
the plug it's going to look up the

00:06:54,169 --> 00:06:59,120
handler and execute the plug call back

00:06:57,220 --> 00:07:00,590
and that's going to do everything it

00:06:59,120 --> 00:07:01,940
needs to do to notify the operating

00:07:00,590 --> 00:07:04,819
system that a new device has been

00:07:01,940 --> 00:07:08,900
plugged in and bring now online we also

00:07:04,819 --> 00:07:12,490
have request unplug and unplug requests

00:07:08,900 --> 00:07:16,370
unplug is the main interface that we use

00:07:12,490 --> 00:07:17,990
it's named that because like I said

00:07:16,370 --> 00:07:20,509
earlier you generally can't pull the

00:07:17,990 --> 00:07:22,909
device out of a system while that device

00:07:20,509 --> 00:07:24,470
is still online so we have an interface

00:07:22,909 --> 00:07:27,349
to request that the operating system

00:07:24,470 --> 00:07:29,960
bring that device down and then once

00:07:27,349 --> 00:07:34,219
we're notify we can remove it in some

00:07:29,960 --> 00:07:35,900
cases we may have a use for actually

00:07:34,219 --> 00:07:39,889
being able to force unplug the device

00:07:35,900 --> 00:07:41,690
just rip it out of the system I'm not

00:07:39,889 --> 00:07:45,820
sure if there's any situations where we

00:07:41,690 --> 00:07:48,979
really do things that way in qmu pci-e

00:07:45,820 --> 00:07:54,440
on real physical hardware does actually

00:07:48,979 --> 00:07:56,630
have that sort of support in some cases

00:07:54,440 --> 00:07:59,990
so you know we have an interface here

00:07:56,630 --> 00:08:03,800
that can potentially be used for that so

00:07:59,990 --> 00:08:05,240
these are the the main device models

00:08:03,800 --> 00:08:12,229
that we use for implementing hot plug in

00:08:05,240 --> 00:08:15,770
columbia today is a CPI sh pc pc I

00:08:12,229 --> 00:08:19,430
native hot plug and one that's been

00:08:15,770 --> 00:08:22,159
recently added as of q2 dot 4 which is

00:08:19,430 --> 00:08:25,610
the p-series based dynamic

00:08:22,159 --> 00:08:31,009
reconfiguration which we use for power

00:08:25,610 --> 00:08:34,640
kvm guests so a little bit more on a CPI

00:08:31,009 --> 00:08:36,529
based hot-plug acpi it's it's a firmware

00:08:34,640 --> 00:08:38,360
interface it

00:08:36,529 --> 00:08:43,610
it defines an interface that we could

00:08:38,360 --> 00:08:45,379
use to configure a device and manage to

00:08:43,610 --> 00:08:47,779
do power management so if we need to put

00:08:45,379 --> 00:08:50,029
the device in the sleep state things of

00:08:47,779 --> 00:08:55,249
that nature acpi provides an interface

00:08:50,029 --> 00:08:58,069
to do that and it does so using a set of

00:08:55,249 --> 00:08:59,990
tables that basically act like a device

00:08:58,069 --> 00:09:03,920
tree they provide a description of the

00:08:59,990 --> 00:09:06,699
devices in some cases or pretty much

00:09:03,920 --> 00:09:09,769
always they also contain in the tables

00:09:06,699 --> 00:09:11,809
platform code that might be executed by

00:09:09,769 --> 00:09:17,360
the operating system to interact with

00:09:11,809 --> 00:09:21,769
hardware we can do hot-plug with regular

00:09:17,360 --> 00:09:25,069
pci and also pci express using a acpi

00:09:21,769 --> 00:09:29,269
based hot-plug we also support memory

00:09:25,069 --> 00:09:31,959
and CPU although in the case of qmu we

00:09:29,269 --> 00:09:35,959
don't use a CPI based hot plug for pci

00:09:31,959 --> 00:09:40,160
express instead we only support native

00:09:35,959 --> 00:09:43,879
pci express in that situation acpi is an

00:09:40,160 --> 00:09:46,819
older standard came out like 1999 and

00:09:43,879 --> 00:09:50,029
has actually been superseded by sh pc

00:09:46,819 --> 00:09:53,059
and pci native hot plug but we still use

00:09:50,029 --> 00:09:55,129
an n qm you today and it will probably

00:09:53,059 --> 00:10:00,259
continue to be supported for for quite

00:09:55,129 --> 00:10:03,709
some time this is the basic workflow for

00:10:00,259 --> 00:10:08,509
doing a CPI based hot plug when you're

00:10:03,709 --> 00:10:13,250
plugging a device in just the the main I

00:10:08,509 --> 00:10:16,339
guess hardware interfaces that come into

00:10:13,250 --> 00:10:19,579
play here there's a there's an acpi

00:10:16,339 --> 00:10:23,089
general-purpose event register that

00:10:19,579 --> 00:10:25,370
event register is going is is what

00:10:23,089 --> 00:10:28,309
provides information to the operating

00:10:25,370 --> 00:10:33,259
system about what sort of hot plug event

00:10:28,309 --> 00:10:37,790
just occurred so we support hot plug for

00:10:33,259 --> 00:10:39,920
PCI CPU and memory so and when we use

00:10:37,790 --> 00:10:43,429
PCI hot-plug there's a particular flag

00:10:39,920 --> 00:10:45,110
that gets set in that gpe register and

00:10:43,429 --> 00:10:47,449
then when we want to notify the

00:10:45,110 --> 00:10:48,520
operating system to check the event we

00:10:47,449 --> 00:10:50,410
raised in

00:10:48,520 --> 00:10:53,440
see I interrupt a system control

00:10:50,410 --> 00:10:55,600
interrupt and the system will operating

00:10:53,440 --> 00:11:01,180
system will then check those registers

00:10:55,600 --> 00:11:06,640
and then to interact with the SH well

00:11:01,180 --> 00:11:10,420
with the acpi mechanisms for handling

00:11:06,640 --> 00:11:13,180
bringing down a slot and notifying the

00:11:10,420 --> 00:11:16,360
user or notifying Q management that the

00:11:13,180 --> 00:11:20,740
device is now safe to eject there's a

00:11:16,360 --> 00:11:25,300
set of registers that are provided by

00:11:20,740 --> 00:11:29,590
the hot plug handler for the PCI bus in

00:11:25,300 --> 00:11:32,910
this case that handler is the P IX for

00:11:29,590 --> 00:11:37,360
device that's basically the South Branch

00:11:32,910 --> 00:11:45,970
for x86 machines when we're running the

00:11:37,360 --> 00:11:50,230
default I 440 FX chipset so how do these

00:11:45,970 --> 00:11:52,480
registers get used so device ad is going

00:11:50,230 --> 00:11:54,610
to as we discussed earlier it's going to

00:11:52,480 --> 00:11:56,890
find the handler for the bus that we're

00:11:54,610 --> 00:11:58,510
trying to add a device to that handler

00:11:56,890 --> 00:12:00,910
is going to provide a plug interface in

00:11:58,510 --> 00:12:06,030
the case of a CPI that plug interface is

00:12:00,910 --> 00:12:10,990
it's going to set a flag and that ACP I

00:12:06,030 --> 00:12:13,780
register notifying that tells the

00:12:10,990 --> 00:12:16,180
operating system which slot is affected

00:12:13,780 --> 00:12:19,930
and there's an up-and-down slot the up

00:12:16,180 --> 00:12:23,290
slot is what signifies that a device has

00:12:19,930 --> 00:12:26,080
been added to that slot we then set the

00:12:23,290 --> 00:12:28,120
status register we set the bit

00:12:26,080 --> 00:12:30,340
corresponding to a pci hot-plug events

00:12:28,120 --> 00:12:33,370
we've raised an interrupt and then the

00:12:30,340 --> 00:12:39,810
OS bring up things the device online at

00:12:33,370 --> 00:12:39,810
that point for a device delete

00:12:41,080 --> 00:12:46,090
same thing we pull out the handler we

00:12:44,140 --> 00:12:49,240
call the request unplugged method on

00:12:46,090 --> 00:12:51,390
that handler which is going to record

00:12:49,240 --> 00:12:53,770
the slot that we're attempting to unplug

00:12:51,390 --> 00:12:56,740
it's going to record that in the acpi

00:12:53,770 --> 00:12:59,350
register raise the pci hot-plug status

00:12:56,740 --> 00:13:01,900
event raised an interrupt and then the

00:12:59,350 --> 00:13:04,990
operating system will then I'm configure

00:13:01,900 --> 00:13:07,870
device power it down and once it's done

00:13:04,990 --> 00:13:09,250
it'll actually notify us that that's

00:13:07,870 --> 00:13:10,450
been completed so we'll know when to

00:13:09,250 --> 00:13:13,780
actually pull the device out of the

00:13:10,450 --> 00:13:17,590
system and it does that using a an

00:13:13,780 --> 00:13:21,820
additional register provided by that

00:13:17,590 --> 00:13:24,730
acpi set of registers and once that's

00:13:21,820 --> 00:13:31,930
done qme will finally clean up the

00:13:24,730 --> 00:13:37,150
device for sh pc-based hot plug well SH

00:13:31,930 --> 00:13:38,800
pc it's a newer standard than a CPI it

00:13:37,150 --> 00:13:42,150
was released by the same group that

00:13:38,800 --> 00:13:46,000
released the pci and pci you standards

00:13:42,150 --> 00:13:49,180
it's generally considered preferable

00:13:46,000 --> 00:13:53,260
over a CPI in the sense that if an

00:13:49,180 --> 00:13:58,540
operating system advertises that it

00:13:53,260 --> 00:14:00,310
supports SHP CSH pc-based hot plug a CPI

00:13:58,540 --> 00:14:06,220
is expected to hand over control to the

00:14:00,310 --> 00:14:09,160
operating system we do use it in qmu but

00:14:06,220 --> 00:14:13,390
we only use it for pci bridges so we

00:14:09,160 --> 00:14:16,300
always use a CPI for the default well

00:14:13,390 --> 00:14:19,900
for the default bus on the default x86

00:14:16,300 --> 00:14:22,450
machine type as I said earlier we don't

00:14:19,900 --> 00:14:27,790
use a CPI in the case we don't use a CP

00:14:22,450 --> 00:14:31,210
obvious PCI hot plug for the q35 x86

00:14:27,790 --> 00:14:33,880
machine and there are also other

00:14:31,210 --> 00:14:36,340
architectures that use a CPI but as far

00:14:33,880 --> 00:14:40,200
as the ones that we support in qmu none

00:14:36,340 --> 00:14:44,710
of those use the pci based acpi based

00:14:40,200 --> 00:14:48,970
unplug but sh pc is just it's a pci

00:14:44,710 --> 00:14:51,610
bridge so in theory any any machine type

00:14:48,970 --> 00:14:52,730
that supports a pci bus that we could

00:14:51,610 --> 00:14:57,079
plug

00:14:52,730 --> 00:14:59,570
an S HPC capable pci bridge into could

00:14:57,079 --> 00:15:04,180
if the operating system supports it make

00:14:59,570 --> 00:15:04,180
use of hot plug to that secondary bus

00:15:09,450 --> 00:15:17,580
so the way we utilize SHP see there's a

00:15:18,180 --> 00:15:26,290
so we have a pcr bridge and that in the

00:15:23,590 --> 00:15:30,820
config space for that pci device there's

00:15:26,290 --> 00:15:33,760
a sh pc capability that can be set if

00:15:30,820 --> 00:15:39,610
that if that capability is advertised

00:15:33,760 --> 00:15:42,790
then that bridge provides us with mainly

00:15:39,610 --> 00:15:45,760
two additional registers there's a slot

00:15:42,790 --> 00:15:47,860
select register which the operating

00:15:45,760 --> 00:15:50,350
system could use to select a particular

00:15:47,860 --> 00:15:52,330
slot to perform an operation on and then

00:15:50,350 --> 00:15:55,570
there's the slot operation register

00:15:52,330 --> 00:15:58,420
which the operating system can use to do

00:15:55,570 --> 00:16:02,200
things like turn on and off attention

00:15:58,420 --> 00:16:04,170
LEDs and power indicators and also turn

00:16:02,200 --> 00:16:06,490
the slot off disable the device

00:16:04,170 --> 00:16:12,730
everything it needs to do to handle hot

00:16:06,490 --> 00:16:18,760
plug so in this situation when we

00:16:12,730 --> 00:16:22,060
perform hot plug will the handler in

00:16:18,760 --> 00:16:26,070
this case will be the SH PC controller

00:16:22,060 --> 00:16:26,070
and that controller will

00:16:32,449 --> 00:16:43,519
that's that's it seems okay well mr l is

00:16:39,679 --> 00:16:47,829
the the mechanical retention latch or

00:16:43,519 --> 00:16:50,359
something like that i would think that

00:16:47,829 --> 00:16:53,089
closing that latch after you plug the

00:16:50,359 --> 00:17:02,290
device in is something that would occur

00:16:53,089 --> 00:17:08,720
before we actually get to the SHP see

00:17:02,290 --> 00:17:10,779
routines right yeah so this this is a

00:17:08,720 --> 00:17:13,579
little bit misleading the the act of

00:17:10,779 --> 00:17:14,809
closing the mrl and pushing the

00:17:13,579 --> 00:17:19,010
attention button they're not actually

00:17:14,809 --> 00:17:20,720
things that are done by the SHP see

00:17:19,010 --> 00:17:23,439
controller they're just things that need

00:17:20,720 --> 00:17:29,029
to be done prior to notifying the

00:17:23,439 --> 00:17:30,559
operating system and upon notifying the

00:17:29,029 --> 00:17:32,899
operating system the operating system

00:17:30,559 --> 00:17:35,090
will check that make sure that that mrl

00:17:32,899 --> 00:17:36,590
latch is secured it's going to check

00:17:35,090 --> 00:17:38,210
that there's actually a card in the slot

00:17:36,590 --> 00:17:40,159
and it's going to check that the card's

00:17:38,210 --> 00:17:42,860
power it off and if it meets all the

00:17:40,159 --> 00:17:45,769
criteria then it'll actually power on

00:17:42,860 --> 00:17:48,590
the device configure the device and then

00:17:45,769 --> 00:17:51,919
it will set an LED indicator to tell the

00:17:48,590 --> 00:17:56,019
user that that device is ready in the

00:17:51,919 --> 00:17:56,019
case of device deletes

00:17:59,510 --> 00:18:03,860
yeah so we have a button that we pushed

00:18:02,300 --> 00:18:05,750
it notifies the operating system that we

00:18:03,860 --> 00:18:12,440
intend to unplug the device from that

00:18:05,750 --> 00:18:13,930
slot the SH pc controller will once that

00:18:12,440 --> 00:18:16,040
button is pressed it will send that and

00:18:13,930 --> 00:18:17,420
interrupt to the operating system and in

00:18:16,040 --> 00:18:20,540
the operating system I'm configures the

00:18:17,420 --> 00:18:23,920
device powers it off sets an LED to let

00:18:20,540 --> 00:18:23,920
us know it's safe to remove the device

00:18:29,720 --> 00:18:38,240
so pcie native hot-plug this was a

00:18:36,010 --> 00:18:41,090
standard that was actually built into

00:18:38,240 --> 00:18:43,970
pcie so whereas with pci initially it

00:18:41,090 --> 00:18:46,310
didn't have an official specification

00:18:43,970 --> 00:18:49,550
for hot plug and that was added later as

00:18:46,310 --> 00:18:54,350
kind of an addendum with PCIe that's

00:18:49,550 --> 00:18:57,850
been built into the spec it actually

00:18:54,350 --> 00:19:01,820
turns out to be very similar to SH

00:18:57,850 --> 00:19:06,890
pc-based hot plug the main difference is

00:19:01,820 --> 00:19:10,040
that in the case of SH PC we have a pci

00:19:06,890 --> 00:19:14,420
bridge with a sh pc hot-plug capability

00:19:10,040 --> 00:19:17,330
in the case of pcie we have a root port

00:19:14,420 --> 00:19:19,100
or a downstream port and each of those

00:19:17,330 --> 00:19:22,330
reports are downstream ports manage a

00:19:19,100 --> 00:19:25,580
single slot and that single slot is what

00:19:22,330 --> 00:19:31,610
or that single port is what advertises

00:19:25,580 --> 00:19:34,640
the hot plug capability so it's it's

00:19:31,610 --> 00:19:37,430
it's different from SH pc and that we

00:19:34,640 --> 00:19:40,220
have one sh pc controller per slot

00:19:37,430 --> 00:19:43,430
basically but it's similar if you

00:19:40,220 --> 00:19:46,970
consider that on pcie each port is

00:19:43,430 --> 00:19:51,700
itself a bridge so it's it's a very

00:19:46,970 --> 00:19:51,700
similar mechanism s HPC

00:19:57,080 --> 00:19:59,740
whoops

00:20:01,740 --> 00:20:10,900
so we basically support it in Q mu for

00:20:06,130 --> 00:20:17,230
any any guest type that can emulate a

00:20:10,900 --> 00:20:21,430
pcie root complex if we have a pcie root

00:20:17,230 --> 00:20:24,130
complex then we can associate root and

00:20:21,430 --> 00:20:28,120
balanced reports with that complex that

00:20:24,130 --> 00:20:34,560
then provide the hot plug capability we

00:20:28,120 --> 00:20:39,550
don't support hot plug directly to a pci

00:20:34,560 --> 00:20:43,570
internal bus so unlike with the x86 I

00:20:39,550 --> 00:20:45,880
440 FX chipset once we start the guests

00:20:43,570 --> 00:20:47,560
we could we can immediately start hot

00:20:45,880 --> 00:20:52,210
plugging into it we don't need to add an

00:20:47,560 --> 00:20:55,110
S hpc device we use a CPI to handle hot

00:20:52,210 --> 00:20:57,700
plug to the the default bus but for pcie

00:20:55,110 --> 00:21:02,890
the only way to do that is the specified

00:20:57,700 --> 00:21:09,400
beforehand that there's a downstream

00:21:02,890 --> 00:21:11,620
port or a switch attached to a slot or

00:21:09,400 --> 00:21:13,870
to the bus and then it's those

00:21:11,620 --> 00:21:17,290
downstream ports that actually provide

00:21:13,870 --> 00:21:19,210
the hot plug capability so if you want

00:21:17,290 --> 00:21:21,760
to support hot plug on q35 you need to

00:21:19,210 --> 00:21:25,600
do some additional setup before hands to

00:21:21,760 --> 00:21:28,150
add that topology theoretically this

00:21:25,600 --> 00:21:31,960
would work for arm verte machines as

00:21:28,150 --> 00:21:34,390
well but i haven't tested it and i

00:21:31,960 --> 00:21:37,470
haven't seen anything where people

00:21:34,390 --> 00:21:37,470
really use that much so

00:21:41,730 --> 00:21:47,010
and and that's basically the sort of

00:21:44,520 --> 00:21:52,680
command line you need to do to add hot

00:21:47,010 --> 00:21:56,310
plug to a q35 machine the io h 3 4 20 is

00:21:52,680 --> 00:21:59,520
a is a root port in the situation and

00:21:56,310 --> 00:22:03,180
we're assigning that report to the

00:21:59,520 --> 00:22:05,580
internal pci e bus and that report

00:22:03,180 --> 00:22:12,590
provides the the pci you need a popular

00:22:05,580 --> 00:22:16,200
capability and when we attempt to well

00:22:12,590 --> 00:22:19,860
one of the other differences between PCI

00:22:16,200 --> 00:22:21,980
you native hot plug and SH pc is the way

00:22:19,860 --> 00:22:24,630
that we advertise the hot plug

00:22:21,980 --> 00:22:27,200
capability is is not through a separate

00:22:24,630 --> 00:22:31,140
sh PC capability it's actually built

00:22:27,200 --> 00:22:36,570
into the PCI Express capabilities

00:22:31,140 --> 00:22:40,650
structure so every PCIe device has this

00:22:36,570 --> 00:22:45,090
PCIe express capability structure and if

00:22:40,650 --> 00:22:50,040
that PCIe device is a downstream port or

00:22:45,090 --> 00:22:52,500
a root port it can also have a slot

00:22:50,040 --> 00:22:54,570
associated with it and if it has a slot

00:22:52,500 --> 00:22:57,450
associated associated with it it can

00:22:54,570 --> 00:23:03,750
then also advertise a plug support for

00:22:57,450 --> 00:23:05,160
that slot via an additional flag the

00:23:03,750 --> 00:23:09,840
workflow when we're adding and removing

00:23:05,160 --> 00:23:15,540
devices is similar to SH pc so i won't

00:23:09,840 --> 00:23:17,100
go into too much detail there the the

00:23:15,540 --> 00:23:21,480
last one we're going to cover here is a

00:23:17,100 --> 00:23:29,630
s papper in p series based dynamic

00:23:21,480 --> 00:23:29,630
reconfiguration that's not quite right

00:23:33,830 --> 00:23:41,929
so this slide is obviously for pcie and

00:23:37,070 --> 00:23:43,880
not for s papper but s papper it has

00:23:41,929 --> 00:23:46,220
some similarities just ignore everything

00:23:43,880 --> 00:23:50,690
on the screen it has some similarities

00:23:46,220 --> 00:23:54,740
to a CPI and that we use we use the

00:23:50,690 --> 00:24:01,340
device table to provide a description of

00:23:54,740 --> 00:24:07,850
the devices and we have a platform code

00:24:01,340 --> 00:24:12,200
that could be used to to interface with

00:24:07,850 --> 00:24:15,019
those devices but instead of with a CPI

00:24:12,200 --> 00:24:17,659
where we have a code that's actually in

00:24:15,019 --> 00:24:21,820
the tables we tend to use a an interface

00:24:17,659 --> 00:24:24,740
called our tests our task is a runtime

00:24:21,820 --> 00:24:26,389
abstraction services and that's

00:24:24,740 --> 00:24:28,429
basically what the operating system is

00:24:26,389 --> 00:24:32,750
going to use to communicate with

00:24:28,429 --> 00:24:35,289
firmware to to handle how plug

00:24:32,750 --> 00:24:35,289
management

00:24:39,530 --> 00:24:44,990
and then we also support memory CPU in

00:24:41,900 --> 00:24:51,220
PHP hot-plug using that interface using

00:24:44,990 --> 00:24:55,910
dynamic reconfiguration it's a basic

00:24:51,220 --> 00:24:59,300
basic topology for a guess that supports

00:24:55,910 --> 00:25:02,600
dynamic reconfiguration is we have a dr

00:24:59,300 --> 00:25:04,670
connector which is not necessarily a

00:25:02,600 --> 00:25:06,860
real connector a real device it's more

00:25:04,670 --> 00:25:10,790
of a firmware abstraction that the

00:25:06,860 --> 00:25:12,980
operating system can use to manage hot

00:25:10,790 --> 00:25:17,320
plug operations on the resource

00:25:12,980 --> 00:25:19,730
associated with that dr connector we

00:25:17,320 --> 00:25:22,310
allocate one dr connector for each

00:25:19,730 --> 00:25:24,740
resource so each pci slot has a dr

00:25:22,310 --> 00:25:28,520
connector if we're using dynamic

00:25:24,740 --> 00:25:34,340
reconfiguration for memory or cpu then

00:25:28,520 --> 00:25:38,030
each each memory block has a dr

00:25:34,340 --> 00:25:39,710
connector associated with it each CPU

00:25:38,030 --> 00:25:42,860
has a dr connector associated with it

00:25:39,710 --> 00:25:45,230
and then on the q mu side we can attach

00:25:42,860 --> 00:25:46,910
devices to that dr connector and then

00:25:45,230 --> 00:25:50,360
the operating system could use that dr

00:25:46,910 --> 00:25:52,940
connector interface through our tasks to

00:25:50,360 --> 00:25:56,990
then bring the devices online or bring

00:25:52,940 --> 00:25:58,700
them offline and notify the management

00:25:56,990 --> 00:26:00,230
when it's ok to remove devices or when

00:25:58,700 --> 00:26:06,290
devices have been successfully brought

00:26:00,230 --> 00:26:08,210
online we have a way that the dr

00:26:06,290 --> 00:26:11,600
connectors are described to the

00:26:08,210 --> 00:26:17,690
operating system is through a device

00:26:11,600 --> 00:26:22,730
tree there's three or four main arrays

00:26:17,690 --> 00:26:26,950
that are used to specify all the dr

00:26:22,730 --> 00:26:26,950
connectors in the system whether they be

00:26:26,980 --> 00:26:35,360
pci dr connectors memory cpu we

00:26:32,510 --> 00:26:39,050
basically have a flat array and in this

00:26:35,360 --> 00:26:45,490
case we have a dr connector for say slot

00:26:39,050 --> 00:26:45,490
one of our PHP's pci bus

00:26:46,340 --> 00:26:57,780
the way we would figure out the way that

00:26:49,679 --> 00:27:01,500
we would tell the operating system what

00:26:57,780 --> 00:27:04,309
sort of operations it needs to perform

00:27:01,500 --> 00:27:07,679
on a vice what's the type of advice we

00:27:04,309 --> 00:27:10,650
have a DRC indexes which contains a

00:27:07,679 --> 00:27:13,830
unique identifier for each DRC and then

00:27:10,650 --> 00:27:16,320
at that index in each of the other

00:27:13,830 --> 00:27:20,130
arrays we have a description of the dr

00:27:16,320 --> 00:27:22,110
connector type we have DRC names which

00:27:20,130 --> 00:27:24,750
is basically just a human readable name

00:27:22,110 --> 00:27:28,950
just a different way to refer to the dr

00:27:24,750 --> 00:27:31,740
connector and we can also specify the

00:27:28,950 --> 00:27:33,390
power domain so in some cases we might

00:27:31,740 --> 00:27:36,330
have a number of devices that are

00:27:33,390 --> 00:27:38,370
attached to the same power domain and to

00:27:36,330 --> 00:27:42,840
describe that sort of apology we have

00:27:38,370 --> 00:27:47,820
this array here in the case of PCI we

00:27:42,840 --> 00:27:49,440
have what's called an in Auto it's an

00:27:47,820 --> 00:27:52,500
automatic power domain so it's just

00:27:49,440 --> 00:27:53,940
assume that the operating system doesn't

00:27:52,500 --> 00:27:57,530
have to worry about turning a device on

00:27:53,940 --> 00:27:57,530
and off that just happens automatically

00:27:57,590 --> 00:28:06,870
to notify the operating system we have a

00:28:00,990 --> 00:28:09,929
epale interrupts epale is a notification

00:28:06,870 --> 00:28:14,070
system that we use for power events

00:28:09,929 --> 00:28:17,240
things like shutting down the guest we

00:28:14,070 --> 00:28:21,750
do that using an epale interrupt and a

00:28:17,240 --> 00:28:24,390
an event log structure that describes

00:28:21,750 --> 00:28:27,030
the sort of the event that were we're

00:28:24,390 --> 00:28:30,059
interrupting the operating system for in

00:28:27,030 --> 00:28:32,880
the case of PCI hot plug that interface

00:28:30,059 --> 00:28:36,780
has been extended to also notify the

00:28:32,880 --> 00:28:39,960
operating system of hot plug events and

00:28:36,780 --> 00:28:41,460
as I mentioned earlier the operating

00:28:39,960 --> 00:28:45,270
system in response to those hot plug

00:28:41,460 --> 00:28:47,040
events will use our tasks to communicate

00:28:45,270 --> 00:28:50,450
with the firmware to

00:28:47,040 --> 00:28:54,570
to handle the hot plug operations

00:28:50,450 --> 00:28:58,830
there's four main interfaces that we

00:28:54,570 --> 00:29:03,120
make use of four main our task calls set

00:28:58,830 --> 00:29:04,830
indicator it does a lot of the same sort

00:29:03,120 --> 00:29:08,340
of stuff that we did with SH PC

00:29:04,830 --> 00:29:10,410
controller turn LEDs on and off to

00:29:08,340 --> 00:29:13,890
signify when a device is ready to be

00:29:10,410 --> 00:29:17,520
removed or when it's successfully been

00:29:13,890 --> 00:29:20,750
brought online we have a notion of

00:29:17,520 --> 00:29:24,590
isolation and allocation States

00:29:20,750 --> 00:29:30,300
isolation states or basically a way of

00:29:24,590 --> 00:29:32,550
the firmware to hand over control of the

00:29:30,300 --> 00:29:36,600
resource that it manages to an operating

00:29:32,550 --> 00:29:38,790
system so if if we don't hand over

00:29:36,600 --> 00:29:40,950
control of the resource then it's

00:29:38,790 --> 00:29:43,020
considered to be in an isolated state

00:29:40,950 --> 00:29:44,670
once we hand it to the guess we assume

00:29:43,020 --> 00:29:48,000
that the guest has access to that device

00:29:44,670 --> 00:29:51,300
and it's in an isolated state allocation

00:29:48,000 --> 00:29:54,600
state is it's not really something we

00:29:51,300 --> 00:29:56,790
use for for PCI it's more for memory and

00:29:54,600 --> 00:30:02,580
CPU hot plugs I won't go into that much

00:29:56,790 --> 00:30:04,020
here configure connector is the

00:30:02,580 --> 00:30:05,610
interface that we use to fetch device

00:30:04,020 --> 00:30:12,060
trees for devices that have been plugged

00:30:05,610 --> 00:30:14,400
in s papper relies heavily on device

00:30:12,060 --> 00:30:16,770
trees to be able to configure devices so

00:30:14,400 --> 00:30:18,470
when we hot plug a device in we need a

00:30:16,770 --> 00:30:20,490
way to provide the device tree and

00:30:18,470 --> 00:30:24,450
configure connectors the interface we

00:30:20,490 --> 00:30:26,640
use their get sensor state that's

00:30:24,450 --> 00:30:29,580
basically what that's the interface that

00:30:26,640 --> 00:30:30,990
will be called to detect whether or not

00:30:29,580 --> 00:30:35,190
there's actually a card present in the

00:30:30,990 --> 00:30:38,130
slot and get inset power domain we don't

00:30:35,190 --> 00:30:40,710
really use those much because we have an

00:30:38,130 --> 00:30:43,770
auto sensing power domain in the case of

00:30:40,710 --> 00:30:46,260
PCI a plug so the operating system will

00:30:43,770 --> 00:30:50,940
see that and basically just just not use

00:30:46,260 --> 00:30:52,320
it and so in this with dynamic

00:30:50,940 --> 00:30:55,800
reconfiguration when we do the device

00:30:52,320 --> 00:30:58,370
add the handler is going to be the dr

00:30:55,800 --> 00:31:04,850
connector associated with

00:30:58,370 --> 00:31:06,800
with that slot and since we're at that

00:31:04,850 --> 00:31:10,000
point handing control of the device over

00:31:06,800 --> 00:31:12,680
to the operating system we we set the

00:31:10,000 --> 00:31:15,170
isolation state of the device to uh nice

00:31:12,680 --> 00:31:17,720
elated so another thing that the the dr

00:31:15,170 --> 00:31:19,820
connectors do is they have an internal

00:31:17,720 --> 00:31:21,620
state machine that manages the state of

00:31:19,820 --> 00:31:24,710
all these resources whether than

00:31:21,620 --> 00:31:27,020
isolator unless an isolated state they

00:31:24,710 --> 00:31:31,070
manage whether LED indicators are on or

00:31:27,020 --> 00:31:33,200
off and so in the case of the bias add

00:31:31,070 --> 00:31:35,150
we uh nice late the device we generate

00:31:33,200 --> 00:31:37,429
the hot plug event using the de pal

00:31:35,150 --> 00:31:39,530
interrupt i mentioned earlier the

00:31:37,429 --> 00:31:42,350
operating system will fetch the device

00:31:39,530 --> 00:31:43,970
tree via config connector and at that

00:31:42,350 --> 00:31:46,040
point the operating system can bring the

00:31:43,970 --> 00:31:54,559
device successfully online and then

00:31:46,040 --> 00:31:57,410
notify us of completion and device

00:31:54,559 --> 00:32:01,550
delete is similar we we have a separate

00:31:57,410 --> 00:32:03,260
hot plug event that we notify the

00:32:01,550 --> 00:32:06,250
operating system of using the EPO

00:32:03,260 --> 00:32:09,770
interrupt the operating system will then

00:32:06,250 --> 00:32:12,260
do the device clean up and then put the

00:32:09,770 --> 00:32:13,520
device back into an isolated state which

00:32:12,260 --> 00:32:15,200
is what tells us that it's handed

00:32:13,520 --> 00:32:17,300
control of the device back over to us

00:32:15,200 --> 00:32:23,090
and at that point we know it's safe to

00:32:17,300 --> 00:32:24,710
remove the device yes and that's that

00:32:23,090 --> 00:32:27,820
basically everything all is looking the

00:32:24,710 --> 00:32:27,820
covers there are any questions

00:32:34,020 --> 00:32:37,190

YouTube URL: https://www.youtube.com/watch?v=1Yl5YBmxnn8


