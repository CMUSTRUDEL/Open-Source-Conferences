Title: [2015] CPU hot-plug - status and challenges by Andreas Färber
Publication date: 2015-09-05
Playlist: KVM Forum 2015
Description: 
	Scalability of virtual machines has become a growing trend. QEMU is able to hot-add x86 vCPUs during runtime. The ability to hot-remove x86 vCPUs is being prepared. Larger discussions are ongoing for how to bring CPU hot-plug to further architectures and for how management interfaces like libvirt can drive and monitor vCPUs. This presentation will provide an overview of the currently available CPU hot-plug features as well as remaining challenges and possible solutions.

Andreas Färber
Expert Virtualization, SUSE
Andreas has been a regular speaker at KVM Forum, working as a QEMU maintainer for SUSE. He is also part of the openSUSE ARM team, speaking at openSUSE Conference and LinuxCon Japan, and has been studying for a Master's in Software Engineering for Embedded Systems.

Slides: https://drive.google.com/file/d/0BzyAwvVlQckedy1maVBGNDlQTHc/view?usp=sharing
Captions: 
	00:00:14,120 --> 00:00:19,710
so as I said the topic of this

00:00:17,220 --> 00:00:22,939
presentation is going to be the status

00:00:19,710 --> 00:00:28,560
and challenges surrounding CPU hot-plug

00:00:22,939 --> 00:00:32,700
it's not an entirely new topic so I'm

00:00:28,560 --> 00:00:35,790
going to go into slightly why we're

00:00:32,700 --> 00:00:37,260
actually doing this then how it

00:00:35,790 --> 00:00:39,210
historically evolve where we currently

00:00:37,260 --> 00:00:41,399
are and afterwards some of the

00:00:39,210 --> 00:00:46,140
challenges that we're still facing and

00:00:41,399 --> 00:00:49,579
then hopefully we can discuss about how

00:00:46,140 --> 00:00:49,579
to go about some of those challenges

00:00:51,140 --> 00:01:02,489
some key words here kvm Kim he has his

00:00:59,340 --> 00:01:04,470
trolley had various audiences so on the

00:01:02,489 --> 00:01:06,180
one hand side there is a linux

00:01:04,470 --> 00:01:08,700
developers who may be interested in

00:01:06,180 --> 00:01:10,409
actually testing cpu hot-plug without

00:01:08,700 --> 00:01:11,939
going to a server in the server room and

00:01:10,409 --> 00:01:14,880
physically plugging anything in and out

00:01:11,939 --> 00:01:17,970
that's much more convenient for in

00:01:14,880 --> 00:01:21,299
particular for Linux drivers another

00:01:17,970 --> 00:01:23,790
topic has been that for instance on the

00:01:21,299 --> 00:01:27,570
data center some providers want to

00:01:23,790 --> 00:01:30,659
actually you know Bill customers by the

00:01:27,570 --> 00:01:33,659
CPU time by the resources allocated for

00:01:30,659 --> 00:01:36,119
virtual machine but customers sometimes

00:01:33,659 --> 00:01:40,380
have workloads that are quite long

00:01:36,119 --> 00:01:42,720
running and where workloads can actually

00:01:40,380 --> 00:01:45,630
be scaled by having more virtual CPUs

00:01:42,720 --> 00:01:47,880
but you don't need those all the time so

00:01:45,630 --> 00:01:52,500
some form of scalability of having more

00:01:47,880 --> 00:01:54,689
cpus during the lifetime of a virtual

00:01:52,500 --> 00:01:57,840
machine whereas not having them all the

00:01:54,689 --> 00:02:01,320
time can be at least convenient the

00:01:57,840 --> 00:02:03,990
alternative obviously is you can always

00:02:01,320 --> 00:02:06,299
just configure a cpu to have a certain

00:02:03,990 --> 00:02:08,700
number of CPUs shut it down at some

00:02:06,299 --> 00:02:12,000
point if it's not really a long running

00:02:08,700 --> 00:02:14,750
you know days long running calculation

00:02:12,000 --> 00:02:17,370
or anything and then configure the

00:02:14,750 --> 00:02:19,440
reconfigure the machine definition to

00:02:17,370 --> 00:02:21,330
have more or less CPUs and then booted

00:02:19,440 --> 00:02:23,160
up again that has always been possible

00:02:21,330 --> 00:02:26,660
in this case it's really about

00:02:23,160 --> 00:02:32,060
dynamically scaling up and down the

00:02:26,660 --> 00:02:34,560
amount of virtual CPUs so historically

00:02:32,060 --> 00:02:37,590
originally kvm was supported by a

00:02:34,560 --> 00:02:42,510
separate project called emu kvm for gov

00:02:37,590 --> 00:02:48,510
qmu and this had at some point a command

00:02:42,510 --> 00:02:50,910
called CPU set this was essentially a

00:02:48,510 --> 00:02:53,489
pre allocation of a certain number of

00:02:50,910 --> 00:02:56,640
CPUs and you could then choose to set

00:02:53,489 --> 00:02:58,079
one of those CPU threads as online or

00:02:56,640 --> 00:02:59,459
offline which would meant that it would

00:02:58,079 --> 00:03:01,860
you know pretty much consume no

00:02:59,459 --> 00:03:05,220
resources when it was unused you could

00:03:01,860 --> 00:03:10,200
then make it appear as if the CPU was

00:03:05,220 --> 00:03:11,700
added if you think about this concept

00:03:10,200 --> 00:03:13,350
this is pretty much what we're doing

00:03:11,700 --> 00:03:15,750
with the verdi Oh balloon machine or

00:03:13,350 --> 00:03:18,209
have been historically doing and that is

00:03:15,750 --> 00:03:20,040
your you start with an upper limit and

00:03:18,209 --> 00:03:23,900
then you have the option of going down

00:03:20,040 --> 00:03:23,900
but you cannot go above that limit ever

00:03:25,160 --> 00:03:31,829
at some point I don't know the exact

00:03:29,069 --> 00:03:34,410
reasons why it stopped working was no

00:03:31,829 --> 00:03:36,690
longer maintained in CMU kvm and we

00:03:34,410 --> 00:03:39,389
never had that functionality in km you

00:03:36,690 --> 00:03:45,209
from the start so what we currently have

00:03:39,389 --> 00:03:49,650
in q mu is a qmp and since recently an

00:03:45,209 --> 00:03:52,049
hmp method called cpu add which takes as

00:03:49,650 --> 00:03:57,180
an argument a single number the ID of

00:03:52,049 --> 00:04:04,019
the CPU to be added and on the command

00:03:57,180 --> 00:04:07,370
line you specify Mac CPUs that is a

00:04:04,019 --> 00:04:11,849
maximum limit of CPUs that you allow the

00:04:07,370 --> 00:04:13,919
machine to have during run time but you

00:04:11,849 --> 00:04:17,220
do not create all those CPUs initially

00:04:13,919 --> 00:04:20,159
you have you know maybe you create say

00:04:17,220 --> 00:04:21,390
four cpus and you say as a maximum

00:04:20,159 --> 00:04:22,230
you're going to have eight that means

00:04:21,390 --> 00:04:24,150
you can add

00:04:22,230 --> 00:04:29,850
more cpus dynamically during runtime of

00:04:24,150 --> 00:04:37,470
the virtual machine if you're running

00:04:29,850 --> 00:04:40,440
Linux that means the CPU is dynamically

00:04:37,470 --> 00:04:43,100
created inside Cree mu and inside the

00:04:40,440 --> 00:04:47,100
colonel via the corresponding I octal

00:04:43,100 --> 00:04:50,250
but in the guest it is not immediately

00:04:47,100 --> 00:04:52,530
usable it is seen in the offline state

00:04:50,250 --> 00:04:54,810
initially and in order to bring it to

00:04:52,530 --> 00:04:56,190
the online stage you need to for

00:04:54,810 --> 00:04:58,230
instance you know right in the

00:04:56,190 --> 00:05:06,630
corresponding value to the M disk file

00:04:58,230 --> 00:05:10,130
system for that particular CPU so far so

00:05:06,630 --> 00:05:13,220
good so initially this was based on the

00:05:10,130 --> 00:05:16,200
huge and sorry very invasive

00:05:13,220 --> 00:05:18,210
refactorings around the CPU state so

00:05:16,200 --> 00:05:20,640
that it was encapsulated as a qualm

00:05:18,210 --> 00:05:27,180
object so that it was easily instantiate

00:05:20,640 --> 00:05:28,950
able dynamically and ego mamedov who's

00:05:27,180 --> 00:05:33,780
not here in the room I believe today but

00:05:28,950 --> 00:05:36,180
Eduardo Oh moved around yeah is here

00:05:33,780 --> 00:05:39,030
today he did the final touches on top of

00:05:36,180 --> 00:05:41,600
actually integrating it into the acpi

00:05:39,030 --> 00:05:43,620
code and making those dynamically

00:05:41,600 --> 00:05:47,390
available to to the guest operating

00:05:43,620 --> 00:05:47,390
system so that they can be discovered

00:05:48,140 --> 00:05:52,890
I'm going to name a few few names like

00:05:51,000 --> 00:05:54,330
this in the upcoming slides it's

00:05:52,890 --> 00:05:56,270
probably never going to be all people

00:05:54,330 --> 00:06:00,420
who contributed to it so please don't be

00:05:56,270 --> 00:06:06,270
mad definitely just saying that this is

00:06:00,420 --> 00:06:08,520
not all built on my own code now I've

00:06:06,270 --> 00:06:13,080
been talking about CPU add this is only

00:06:08,520 --> 00:06:18,600
about CPU hot-plug what we don't have at

00:06:13,080 --> 00:06:20,640
the moment is CPU hot unplug originally

00:06:18,600 --> 00:06:23,610
at the time when when this was first

00:06:20,640 --> 00:06:27,060
written a kernel interface did not exist

00:06:23,610 --> 00:06:31,170
to dynamically unallocated vcpu

00:06:27,060 --> 00:06:32,790
resources for for kvm i'm not entirely

00:06:31,170 --> 00:06:34,710
sure if that has been much there were

00:06:32,790 --> 00:06:35,910
definitely patches I believe that is

00:06:34,710 --> 00:06:39,420
pretty much settled by an

00:06:35,910 --> 00:06:44,670
now but we've been having the discussion

00:06:39,420 --> 00:06:46,550
about how does the Q mu user interface

00:06:44,670 --> 00:06:50,010
for making use of this has to look like

00:06:46,550 --> 00:06:52,140
so basically this discussion is going to

00:06:50,010 --> 00:06:54,660
follow through the next three slides and

00:06:52,140 --> 00:07:00,410
it's all going to be mostly about a bi

00:06:54,660 --> 00:07:03,120
stability so Q mu strives or no M we

00:07:00,410 --> 00:07:05,570
require ourselves to keep the command

00:07:03,120 --> 00:07:09,560
line compatible from version to version

00:07:05,570 --> 00:07:11,580
so that means that if we have specific

00:07:09,560 --> 00:07:14,580
properties that we're setting through

00:07:11,580 --> 00:07:16,110
the command line they need to remain the

00:07:14,580 --> 00:07:19,230
same type and the same name throughout

00:07:16,110 --> 00:07:23,150
versions so that Laprade can easily

00:07:19,230 --> 00:07:26,990
continue to use them and other users and

00:07:23,150 --> 00:07:29,610
also on the QM side I've made

00:07:26,990 --> 00:07:33,030
presentations about the details of those

00:07:29,610 --> 00:07:36,000
stability rules we are not where we are

00:07:33,030 --> 00:07:38,760
restricting ourselves in not changing

00:07:36,000 --> 00:07:42,150
the type of an existing property of an

00:07:38,760 --> 00:07:44,460
object the the exact location where

00:07:42,150 --> 00:07:49,440
objects are that might rain somewhere in

00:07:44,460 --> 00:07:51,840
the composition tree but the type needs

00:07:49,440 --> 00:07:54,290
to be the same so that a client

00:07:51,840 --> 00:07:56,790
accessing it does not have surprises

00:07:54,290 --> 00:08:00,870
when reading or writing to two

00:07:56,790 --> 00:08:05,370
particular properties another issue was

00:08:00,870 --> 00:08:08,520
that there was a very simple assumption

00:08:05,370 --> 00:08:11,150
that when CPUs get created you simply

00:08:08,520 --> 00:08:14,550
loop through the amount of CPUs and

00:08:11,150 --> 00:08:16,440
increment the index of that if you start

00:08:14,550 --> 00:08:18,660
removing sleepy used and suddenly you

00:08:16,440 --> 00:08:20,880
might end up you know not removing the

00:08:18,660 --> 00:08:24,120
last CPU in the sequence but someone

00:08:20,880 --> 00:08:25,890
some vcpu in the middle which would

00:08:24,120 --> 00:08:28,500
leave holes in the namespace and

00:08:25,890 --> 00:08:31,380
therefore am confused code that is

00:08:28,500 --> 00:08:33,690
something that IBM's Brad Rao has been

00:08:31,380 --> 00:08:36,140
contributing code to use a bitmap

00:08:33,690 --> 00:08:36,140
instead

00:08:37,570 --> 00:08:48,370
as I said originally the CPU well

00:08:45,640 --> 00:08:50,770
originally the CPU was a struct

00:08:48,370 --> 00:08:53,920
completely open so not connected to all

00:08:50,770 --> 00:08:57,990
the devices then it was made an object

00:08:53,920 --> 00:09:01,000
and in the meantime it's also a device

00:08:57,990 --> 00:09:04,090
in the past we couldn't use the device

00:09:01,000 --> 00:09:06,490
infrastructure for creating CPUs simply

00:09:04,090 --> 00:09:08,610
because it wasn't a device now it is so

00:09:06,490 --> 00:09:11,830
the question is can we actually use

00:09:08,610 --> 00:09:14,050
device add for adding a CPU we've tried

00:09:11,830 --> 00:09:16,780
some some steps into that direction and

00:09:14,050 --> 00:09:17,800
we're hoping to make that work but there

00:09:16,780 --> 00:09:21,790
are still some open questions

00:09:17,800 --> 00:09:23,980
surrounding that for instance what

00:09:21,790 --> 00:09:28,090
exactly is the type name going to be

00:09:23,980 --> 00:09:32,770
that you use for creating the object is

00:09:28,090 --> 00:09:35,110
it going to be like a xeon e5 42 42

00:09:32,770 --> 00:09:38,040
which then means that you you know for

00:09:35,110 --> 00:09:40,090
instance create six threads at a time

00:09:38,040 --> 00:09:41,710
probably that's not going to be the use

00:09:40,090 --> 00:09:44,620
case that most people are going to want

00:09:41,710 --> 00:09:47,860
to use however it is what we would need

00:09:44,620 --> 00:09:53,440
to model to have it match what is done

00:09:47,860 --> 00:09:56,440
in actual an actual hardware so I'm

00:09:53,440 --> 00:09:59,350
hoping to show that live in a few

00:09:56,440 --> 00:10:01,840
minutes if the bill that i was doing

00:09:59,350 --> 00:10:08,710
duke improving break due to the power

00:10:01,840 --> 00:10:12,070
outage the other aspect is that not

00:10:08,710 --> 00:10:14,620
every machine is a cpu i'm going to have

00:10:12,070 --> 00:10:16,990
to two more examples of architectures

00:10:14,620 --> 00:10:19,480
where we're working on cpu and support

00:10:16,990 --> 00:10:25,200
to show what the the exact differences

00:10:19,480 --> 00:10:32,740
may look like but obviously a pc assumes

00:10:25,200 --> 00:10:34,870
that you have one board with multiple

00:10:32,740 --> 00:10:38,170
sockets and usually all those sockets

00:10:34,870 --> 00:10:40,450
are going to be of the same not just

00:10:38,170 --> 00:10:45,480
architecture but mostly also the same

00:10:40,450 --> 00:10:48,610
model that is being added when you

00:10:45,480 --> 00:10:50,860
attended the session by by Edgar

00:10:48,610 --> 00:10:54,360
Iglesias on the darlings

00:10:50,860 --> 00:10:57,340
p sock modeling and machine there's like

00:10:54,360 --> 00:11:02,470
three different types of CPUs in there

00:10:57,340 --> 00:11:05,050
are even multi-target in k mu terms so

00:11:02,470 --> 00:11:08,200
one of the questions is where do we

00:11:05,050 --> 00:11:10,660
actually plug the CPUs quam offers

00:11:08,200 --> 00:11:13,570
partially a solution for that also the

00:11:10,660 --> 00:11:19,480
hot plug interfaces that ego and others

00:11:13,570 --> 00:11:22,090
M had been contributing earlier but this

00:11:19,480 --> 00:11:25,420
means that you cannot just take a CPU

00:11:22,090 --> 00:11:27,640
add command with an i with with an ID as

00:11:25,420 --> 00:11:30,520
the only argument for adding a CPU it

00:11:27,640 --> 00:11:34,030
means we need a different interface the

00:11:30,520 --> 00:11:37,770
question is how can we make use of the

00:11:34,030 --> 00:11:45,550
device add interface in that particular

00:11:37,770 --> 00:11:48,280
point in time as far as the topology

00:11:45,550 --> 00:11:50,920
goes device add does not allow us to

00:11:48,280 --> 00:11:54,220
specify where exactly that the CPU is

00:11:50,920 --> 00:11:56,970
going so we cannot say that we want to

00:11:54,220 --> 00:11:59,590
connect this device to a particular

00:11:56,970 --> 00:12:04,540
logical you know cpu core sitting on a

00:11:59,590 --> 00:12:07,750
particular Numa node or so but rather it

00:12:04,540 --> 00:12:10,420
would automatically end up by default on

00:12:07,750 --> 00:12:12,310
a bus or by some distribution scheme

00:12:10,420 --> 00:12:18,220
that we would have to implement per

00:12:12,310 --> 00:12:19,450
machine the bright side obviously is

00:12:18,220 --> 00:12:21,490
that we have all the infrastructure

00:12:19,450 --> 00:12:23,560
elderly there in particular we already

00:12:21,490 --> 00:12:27,550
have a device del command where we could

00:12:23,560 --> 00:12:32,860
do the opposite of device add and there

00:12:27,550 --> 00:12:38,020
would be less code duplication so let's

00:12:32,860 --> 00:12:40,330
take a look at Power PC next as I

00:12:38,020 --> 00:12:43,570
mentioned Bharata has been doing some

00:12:40,330 --> 00:12:48,880
some great work and there this is one

00:12:43,570 --> 00:12:51,670
example of where the p-series machine

00:12:48,880 --> 00:12:54,700
that we're implementing in canggu to run

00:12:51,670 --> 00:12:59,830
MK BM guests does not actually match

00:12:54,700 --> 00:13:00,579
hardware so on Hardware you usually have

00:12:59,830 --> 00:13:04,269
a

00:13:00,579 --> 00:13:08,160
yeah a hypervisor running on bare metal

00:13:04,269 --> 00:13:10,449
and then you have this s pepper

00:13:08,160 --> 00:13:13,239
interface with para virtual devices

00:13:10,449 --> 00:13:17,230
being provided to those guests so you

00:13:13,239 --> 00:13:19,869
don't really have a hardware model to to

00:13:17,230 --> 00:13:21,910
simply copy from I'm you can interrupt

00:13:19,869 --> 00:13:25,809
me at any time Paul if I'm if I'm saying

00:13:21,910 --> 00:13:31,959
it wrong so what we have been discussing

00:13:25,809 --> 00:13:34,929
there is that for powerpc it would make

00:13:31,959 --> 00:13:38,529
the most sense to do CPU hot add on a

00:13:34,929 --> 00:13:42,989
core level so not on the thread level

00:13:38,529 --> 00:13:46,629
because the thread is just a numeric

00:13:42,989 --> 00:13:49,959
property on the cpu device node in the

00:13:46,629 --> 00:13:55,809
the flat device tree and this is so far

00:13:49,959 --> 00:14:07,689
always fixed fixed at two or was it

00:13:55,809 --> 00:14:13,509
eight or okay okay but this depends on

00:14:07,689 --> 00:14:17,949
the on the model of the for instance if

00:14:13,509 --> 00:14:24,189
I choose a power 8v what the two dot one

00:14:17,949 --> 00:14:27,759
or something like that ok eight for all

00:14:24,189 --> 00:14:30,519
parade ok so it might change if there

00:14:27,759 --> 00:14:32,499
was a power 9 generation coming out but

00:14:30,519 --> 00:14:35,819
so far it's fixed for this generation at

00:14:32,499 --> 00:14:35,819
that number particular number 8

00:14:40,690 --> 00:14:43,470
ok

00:14:48,010 --> 00:14:58,800
for System z the other IBM architecture

00:14:54,070 --> 00:15:07,240
it's even slightly more complicated so

00:14:58,800 --> 00:15:09,970
the actual CPU books are abstracted by

00:15:07,240 --> 00:15:12,370
what is called prism which is also from

00:15:09,970 --> 00:15:14,470
our view kind of a hypervisor running on

00:15:12,370 --> 00:15:16,900
the actual bare metal machine that no

00:15:14,470 --> 00:15:18,520
one except IBM has access to and all

00:15:16,900 --> 00:15:24,790
Linux guests are running in a logical

00:15:18,520 --> 00:15:27,940
partition so that means that similarly

00:15:24,790 --> 00:15:30,580
we don't want to do hot black level on a

00:15:27,940 --> 00:15:32,560
full book but instead we would actually

00:15:30,580 --> 00:15:34,810
like to do it on you know what we see as

00:15:32,560 --> 00:15:38,320
they thread level or maybe consider that

00:15:34,810 --> 00:15:51,130
a core with just one with one thread per

00:15:38,320 --> 00:15:54,310
core the yes so historically what kmu

00:15:51,130 --> 00:15:57,280
considers the CPU is what Intel

00:15:54,310 --> 00:15:59,140
considers a hyper thread or you know

00:15:57,280 --> 00:16:03,340
that that's what did the SMT is in in

00:15:59,140 --> 00:16:05,010
the power world so that's the the

00:16:03,340 --> 00:16:07,830
logical thing where the code is actually

00:16:05,010 --> 00:16:13,000
executed and where the state resides

00:16:07,830 --> 00:16:14,920
from a topology that is part of the

00:16:13,000 --> 00:16:19,720
things that I've been looking into for

00:16:14,920 --> 00:16:23,020
for x86 there was a patch series that

00:16:19,720 --> 00:16:25,750
was trying to model this as like a you

00:16:23,020 --> 00:16:28,870
know a legal model where you have 11

00:16:25,750 --> 00:16:31,060
stone that is the actual socket the

00:16:28,870 --> 00:16:33,130
socket then consists of multiple cores

00:16:31,060 --> 00:16:37,600
and the core consists of multiple

00:16:33,130 --> 00:16:39,730
threads so this is to to reflect in our

00:16:37,600 --> 00:16:42,870
internal modeling how the thing is going

00:16:39,730 --> 00:16:42,870
to be represented to the guest

00:16:48,200 --> 00:16:53,140
I mean the video this this plan

00:16:53,590 --> 00:16:56,400
apology

00:16:58,180 --> 00:17:05,860
so for x86 we do is we're recycling

00:17:03,620 --> 00:17:08,679
about humans for some information

00:17:05,860 --> 00:17:10,290
I guess that makes the best thing there

00:17:08,679 --> 00:17:14,170
are multiple bars

00:17:10,290 --> 00:17:16,620
so the guest sees it as representing a

00:17:14,170 --> 00:17:19,990
certain topology but the binding between

00:17:16,620 --> 00:17:23,320
what the guest topology is and what the

00:17:19,990 --> 00:17:26,040
host topology is is well to some degree

00:17:23,320 --> 00:17:26,040
configurable

00:17:30,680 --> 00:17:39,020
and maybe add to that if we're seeing in

00:17:35,630 --> 00:17:40,940
the kernel space then it is you know

00:17:39,020 --> 00:17:42,410
that they're treated equally as a flat

00:17:40,940 --> 00:17:44,750
space of these cpus as far as I

00:17:42,410 --> 00:17:46,910
understand so from scheduling wise and

00:17:44,750 --> 00:17:49,340
so on about exposing some ideas to the

00:17:46,910 --> 00:17:53,180
guests of inside you they're just at

00:17:49,340 --> 00:17:55,720
least of trajan message so if you

00:17:53,180 --> 00:17:55,720
subscribe

00:18:06,610 --> 00:18:12,860
well it's not what besides the statics

00:18:10,220 --> 00:18:16,150
doesn't get you to actually separate the

00:18:12,860 --> 00:18:16,150
work clump them into

00:18:16,310 --> 00:18:20,900
something

00:18:18,260 --> 00:18:25,400
inside the static like one point but 10

00:18:20,900 --> 00:18:28,040
stories aren't I was on x86 it on other

00:18:25,400 --> 00:18:30,500
ethics in general just curious so the

00:18:28,040 --> 00:18:32,600
real world you you have my by socket

00:18:30,500 --> 00:18:34,870
that I'll get all so tough let's uncork

00:18:32,600 --> 00:18:37,760
function is he really uncorked

00:18:34,870 --> 00:18:39,530
you may confuse guest operating systems

00:18:37,760 --> 00:18:41,390
because they are going to say oh there's

00:18:39,530 --> 00:18:43,850
a new threat here on this target that's

00:18:41,390 --> 00:18:47,059
supposed to have for trans or whatever

00:18:43,850 --> 00:18:48,890
and you see each one of you in at

00:18:47,059 --> 00:18:50,929
different times so they were deployed

00:18:48,890 --> 00:18:52,850
along with the illusion of the guest

00:18:50,929 --> 00:18:54,290
operating system yeah and it's running

00:18:52,850 --> 00:18:56,179
on real hardware okay I don't know about

00:18:54,290 --> 00:18:59,450
the architecture they may have

00:18:56,179 --> 00:19:06,350
requirements that we must be of a solid

00:18:59,450 --> 00:19:08,630
metal so from a modeling view I'm hoping

00:19:06,350 --> 00:19:11,390
to show that here in a you know in a

00:19:08,630 --> 00:19:17,650
screen dump from from the eme monitor

00:19:11,390 --> 00:19:22,220
output or you may be familiar with the

00:19:17,650 --> 00:19:27,290
UML component connector syntax so it's

00:19:22,220 --> 00:19:31,340
like the QQ m model has these linked

00:19:27,290 --> 00:19:36,890
properties and a link property is like a

00:19:31,340 --> 00:19:43,640
a reference to a pointer so that means

00:19:36,890 --> 00:19:46,850
that you can actually that is that the

00:19:43,640 --> 00:19:48,530
point that you plug things into and we

00:19:46,850 --> 00:19:50,240
need to make a decision at certain

00:19:48,530 --> 00:19:52,790
points of whether we want to have a

00:19:50,240 --> 00:19:54,590
child property in which case it's an

00:19:52,790 --> 00:19:57,290
aggregate so they are always connected

00:19:54,590 --> 00:19:59,390
together or whether it's a link property

00:19:57,290 --> 00:20:01,220
in which case we can configure as a user

00:19:59,390 --> 00:20:03,140
how those things you know are connected

00:20:01,220 --> 00:20:12,919
together we can't do both at the same

00:20:03,140 --> 00:20:18,080
time and if we choose to do if we choose

00:20:12,919 --> 00:20:23,450
to have a model where we have a socket

00:20:18,080 --> 00:20:26,900
as the the atomic entity on 86 at least

00:20:23,450 --> 00:20:30,049
and that was what I was suggesting in in

00:20:26,900 --> 00:20:33,290
my pet series it means that we then have

00:20:30,049 --> 00:20:36,110
the core as a child property to that and

00:20:33,290 --> 00:20:38,990
to the core at the trial property the

00:20:36,110 --> 00:20:42,400
actual thread with the state but we

00:20:38,990 --> 00:20:46,460
can't mix that and then add another

00:20:42,400 --> 00:20:48,260
hyper thread to an existing core we

00:20:46,460 --> 00:20:50,420
don't have the infrastructure for that

00:20:48,260 --> 00:20:53,570
at least not today and not in the near

00:20:50,420 --> 00:20:55,610
future so we need to in that case we

00:20:53,570 --> 00:20:58,850
would simply need to do the scalability

00:20:55,610 --> 00:21:00,650
by using different kinds of sockets with

00:20:58,850 --> 00:21:02,690
different numbers of course and threads

00:21:00,650 --> 00:21:04,700
to have the same effect so if you want

00:21:02,690 --> 00:21:10,270
to just add one cpu you would have to

00:21:04,700 --> 00:21:13,280
have sufficient sockets to attach sorry

00:21:10,270 --> 00:21:16,820
well sufficient link properties to

00:21:13,280 --> 00:21:19,370
attach socket objects to so that you can

00:21:16,820 --> 00:21:22,790
have a socket object with one core and

00:21:19,370 --> 00:21:25,160
one Corp with one thread per core so

00:21:22,790 --> 00:21:28,640
that you can effectively just em have

00:21:25,160 --> 00:21:31,190
one vcpu added that's kind of the the

00:21:28,640 --> 00:21:34,640
effect that results out of those those

00:21:31,190 --> 00:21:37,100
days that decisions yes apparently is

00:21:34,640 --> 00:21:39,050
having different cores with different

00:21:37,100 --> 00:21:43,280
number of threads would really confuse a

00:21:39,050 --> 00:21:46,850
linux guests will it not confuse the

00:21:43,280 --> 00:21:51,070
nexus film Isco I understand gave us

00:21:46,850 --> 00:21:51,070
where the gas gets very help you

00:21:53,090 --> 00:22:02,280
so we have a mobile Frenchman in the

00:21:57,240 --> 00:22:03,570
colonel the this bubble canal system and

00:22:02,280 --> 00:22:10,410
if it was different for different course

00:22:03,570 --> 00:22:12,150
that would be so when we're seeing can

00:22:10,410 --> 00:22:22,010
confuse the guest as many about the

00:22:12,150 --> 00:22:24,330
scheduling part right yeah okay yeah

00:22:22,010 --> 00:22:26,910
well sure that other think it would be

00:22:24,330 --> 00:22:29,810
possible to crash the guest grendel at

00:22:26,910 --> 00:22:29,810
least on power and

00:22:29,830 --> 00:22:35,510
those days again

00:22:32,500 --> 00:22:38,150
yeah sure if they if they make certain

00:22:35,510 --> 00:22:42,410
assumptions definitely it's not a common

00:22:38,150 --> 00:22:45,280
thing in particular one thing that I've

00:22:42,410 --> 00:22:47,690
been told is something that we should

00:22:45,280 --> 00:22:50,390
well it's been under discussion should

00:22:47,690 --> 00:22:52,640
we prohibit people to plug different

00:22:50,390 --> 00:22:54,200
types of CPUs together you know not just

00:22:52,640 --> 00:22:56,600
different core accounts that's just a

00:22:54,200 --> 00:23:00,260
number but what if you actually plug a

00:22:56,600 --> 00:23:02,420
haswell cpu and abroad will CPU and you

00:23:00,260 --> 00:23:04,490
know something furred together in the

00:23:02,420 --> 00:23:06,290
same CPU machine that would certainly

00:23:04,490 --> 00:23:13,730
confuse the guests because it's nothing

00:23:06,290 --> 00:23:15,500
that is is normally being done there's

00:23:13,730 --> 00:23:16,760
always multiple levels of difficulty as

00:23:15,500 --> 00:23:22,940
we can we can add you know come

00:23:16,760 --> 00:23:25,610
complexity event I'm sorry I'm not

00:23:22,940 --> 00:23:27,590
saying that I want to do that it's if we

00:23:25,610 --> 00:23:30,080
actually saw it I'm sorry I'm really

00:23:27,590 --> 00:23:36,020
sorry these these slides are really

00:23:30,080 --> 00:23:39,200
dense so device add takes as its first

00:23:36,020 --> 00:23:42,110
parameter in a parameter called driver

00:23:39,200 --> 00:23:43,880
which is the exact type name so if we

00:23:42,110 --> 00:23:51,710
wanted to go with this approach it would

00:23:43,880 --> 00:23:56,450
look like device dash ad space has well

00:23:51,710 --> 00:24:03,050
dash x86 underscore 64 dash CPU and then

00:23:56,450 --> 00:24:05,120
you can have like comma ok there are

00:24:03,050 --> 00:24:06,530
syntax like you know plus minus for

00:24:05,120 --> 00:24:08,300
adding features maybe let's skip that

00:24:06,530 --> 00:24:11,060
because that's a different complexity of

00:24:08,300 --> 00:24:16,010
its own but you can add more properties

00:24:11,060 --> 00:24:18,410
even on the the per per device level so

00:24:16,010 --> 00:24:20,900
the question is whether to fail the

00:24:18,410 --> 00:24:24,950
operation if they're not all the same

00:24:20,900 --> 00:24:27,350
extra steps are they all identical in is

00:24:24,950 --> 00:24:30,680
not fail and whether we want even do

00:24:27,350 --> 00:24:34,630
that exactly it's the classical question

00:24:30,680 --> 00:24:37,010
of do we want to allow users to M

00:24:34,630 --> 00:24:39,710
experiment with weird things do we want

00:24:37,010 --> 00:24:42,560
to stop them from doing so or do we just

00:24:39,710 --> 00:24:44,750
see that as a user fault and try to just

00:24:42,560 --> 00:24:48,560
you know print some some error message

00:24:44,750 --> 00:24:50,690
or maybe just let everything happen or

00:24:48,560 --> 00:24:53,000
maybe pretty warning instead of an error

00:24:50,690 --> 00:24:54,830
message and let things happen until you

00:24:53,000 --> 00:24:56,870
know the guest locks up or whatever

00:24:54,830 --> 00:24:59,390
happens in the particular Gaston's at

00:24:56,870 --> 00:25:01,490
the Q mu kvm level we don't know what

00:24:59,390 --> 00:25:03,110
guest actually the the user obviously is

00:25:01,490 --> 00:25:04,670
running in most cases it's going to be

00:25:03,110 --> 00:25:07,340
Linux that's the most common that in

00:25:04,670 --> 00:25:08,660
particular you know Suzy redhead and

00:25:07,340 --> 00:25:13,070
other companies are going to be looking

00:25:08,660 --> 00:25:17,680
at but you know universities do do weird

00:25:13,070 --> 00:25:17,680
stuff from time to time and that's good

00:25:17,740 --> 00:25:23,210
news is I've never heard of anything

00:25:21,230 --> 00:25:25,790
like that they've never actually six but

00:25:23,210 --> 00:25:29,790
they have told us this morning

00:25:25,790 --> 00:25:32,269
that has like two different sorts of our

00:25:29,790 --> 00:25:34,470
and to package lasers

00:25:32,269 --> 00:25:37,650
stuff on the Zion system

00:25:34,470 --> 00:25:39,810
so having multiple cds of different time

00:25:37,650 --> 00:25:41,870
the real thing like six machines but

00:25:39,810 --> 00:25:45,530
it's a good thing

00:25:41,870 --> 00:25:48,500
and that's also another good point is if

00:25:45,530 --> 00:25:50,660
we look in particular at arm it's much

00:25:48,500 --> 00:25:56,840
less standardized how the dark actually

00:25:50,660 --> 00:25:58,370
looks like so not just that the you know

00:25:56,840 --> 00:26:00,380
they might have some some form of

00:25:58,370 --> 00:26:02,330
coprocessor on the same trip that we

00:26:00,380 --> 00:26:04,160
could maybe ignore in this context if we

00:26:02,330 --> 00:26:06,610
don't really want to you know execute

00:26:04,160 --> 00:26:09,950
the main operating system on that but

00:26:06,610 --> 00:26:11,930
we're in the exact object hierarchy that

00:26:09,950 --> 00:26:14,510
we have internally in DME do we want to

00:26:11,930 --> 00:26:16,070
add the new cpu if we if we're looking

00:26:14,510 --> 00:26:18,260
at those of mods that would also affect

00:26:16,070 --> 00:26:24,380
like when when freescale is doing and

00:26:18,260 --> 00:26:25,929
Power PC and networking trips so you

00:26:24,380 --> 00:26:28,580
know what when you're thinking about

00:26:25,929 --> 00:26:31,340
topologies including different clusters

00:26:28,580 --> 00:26:33,559
that can be power switch between you

00:26:31,340 --> 00:26:36,020
know like the little things like that it

00:26:33,559 --> 00:26:39,080
also gets complicated where you actually

00:26:36,020 --> 00:26:41,090
want to do that because device add does

00:26:39,080 --> 00:26:43,010
not allow us to specify at least today

00:26:41,090 --> 00:26:46,370
where the thing is supposed to go so we

00:26:43,010 --> 00:26:51,050
can't say okay we want this new vcpu

00:26:46,370 --> 00:26:52,670
thread to go to that existing core we

00:26:51,050 --> 00:26:55,100
can only say okay we want to add this

00:26:52,670 --> 00:26:56,990
and then we need to have a machine level

00:26:55,100 --> 00:27:01,820
logic that takes care of we actually

00:26:56,990 --> 00:27:06,050
actually place it and so far we've been

00:27:01,820 --> 00:27:10,910
using a virtual icc bus for for x86

00:27:06,050 --> 00:27:16,059
where both the cpus and the epics have

00:27:10,910 --> 00:27:16,059
been added but we're trying to actually

00:27:18,520 --> 00:27:29,860
deprecated that way by simply moving on

00:27:22,520 --> 00:27:32,960
to the bus less qm model of having of

00:27:29,860 --> 00:27:35,300
having those objects composed to each

00:27:32,960 --> 00:27:37,490
other so that the the apec actually sits

00:27:35,300 --> 00:27:40,610
on the cpu and you then have the cpu or

00:27:37,490 --> 00:27:42,710
GPU thread core socket whatever exactly

00:27:40,610 --> 00:27:44,390
as the atomic level that you then add

00:27:42,710 --> 00:27:47,270
and everything just sits on that and

00:27:44,390 --> 00:27:52,000
goes with it gets reset with it another

00:27:47,270 --> 00:27:52,000
ongoing issue that we've been seeing

00:27:52,070 --> 00:28:04,039
and well obviously the diversity the the

00:28:01,860 --> 00:28:06,179
Unreal ization in particular of the

00:28:04,039 --> 00:28:09,539
migration state and and things like that

00:28:06,179 --> 00:28:12,210
also goes along with on which level we

00:28:09,539 --> 00:28:20,789
actually start on which level the user

00:28:12,210 --> 00:28:28,909
interface operates I think I'm going to

00:28:20,789 --> 00:28:33,450
go into the demo right now we are almost

00:28:28,909 --> 00:28:38,450
pretty much any overtime actually so so

00:28:33,450 --> 00:28:40,799
in qualms we have this hierarchy where

00:28:38,450 --> 00:28:43,649
among others we have a node called

00:28:40,799 --> 00:28:45,929
machine kind of file system like and

00:28:43,649 --> 00:28:49,519
under there we have when we heart at

00:28:45,929 --> 00:28:53,940
things it's called Perry Farrell and

00:28:49,519 --> 00:28:56,399
then there's also peripheral an on when

00:28:53,940 --> 00:29:00,480
we don't give an ID to particular device

00:28:56,399 --> 00:29:02,039
so that's where the bucket were the

00:29:00,480 --> 00:29:10,139
things without a name actually land in

00:29:02,039 --> 00:29:13,259
so we would have like a device no so if

00:29:10,139 --> 00:29:16,159
we named this for instance CPU 0 it

00:29:13,259 --> 00:29:20,399
would show up something like this and

00:29:16,159 --> 00:29:23,190
this is whatever gets added on either

00:29:20,399 --> 00:29:27,659
the command line level or in particular

00:29:23,190 --> 00:29:29,879
on the queue mph MP level when we have a

00:29:27,659 --> 00:29:33,029
device add command this is where the the

00:29:29,879 --> 00:29:34,799
nodes show up and what I was talking

00:29:33,029 --> 00:29:38,190
about here about this this composition

00:29:34,799 --> 00:29:41,309
tree is that with that below this

00:29:38,190 --> 00:29:43,080
assuming this is a vcpu thread then in

00:29:41,309 --> 00:29:45,690
this place for instance we would have

00:29:43,080 --> 00:29:50,190
the a pic as a sub node rather than just

00:29:45,690 --> 00:29:55,200
weather than having the a peak sitting

00:29:50,190 --> 00:29:58,399
somewhere here as a device in red square

00:29:55,200 --> 00:29:58,399
brackets 42

00:29:58,750 --> 00:30:06,630
and depending on how we actually model

00:30:03,040 --> 00:30:13,680
this we would in this place then have

00:30:06,630 --> 00:30:16,030
cpu socket zero under that a core say

00:30:13,680 --> 00:30:19,720
zoom in there is one maybe start by

00:30:16,030 --> 00:30:24,430
indexing at zero and and the core we

00:30:19,720 --> 00:30:26,620
would have a thread 0 that has all x86

00:30:24,430 --> 00:30:29,590
specific here obviously and then below

00:30:26,620 --> 00:30:33,190
that the apec those were those modeling

00:30:29,590 --> 00:30:38,500
questions that I was touching upon the

00:30:33,190 --> 00:30:42,760
in this case the type of the particular

00:30:38,500 --> 00:30:53,850
property here so the core 0 that would

00:30:42,760 --> 00:30:56,230
be a child what did I call it x86 64

00:30:53,850 --> 00:31:01,890
socket something like that maybe our CPU

00:30:56,230 --> 00:31:06,250
socket oh no no that that sorry yeah and

00:31:01,890 --> 00:31:14,640
that type of the CPU socket would be one

00:31:06,250 --> 00:31:23,149
rebuff in this case it is the decor and

00:31:14,640 --> 00:31:28,799
this one would be I

00:31:23,149 --> 00:31:32,730
no this is the filesystem view of the

00:31:28,799 --> 00:31:34,559
Quan composition tree so M when an

00:31:32,730 --> 00:31:36,179
object and has a number of properties

00:31:34,559 --> 00:31:38,100
some of those properties can be

00:31:36,179 --> 00:31:40,380
childhood properties and those child

00:31:38,100 --> 00:31:42,120
properties they construct this this

00:31:40,380 --> 00:31:44,539
hierarchy of how those objects are

00:31:42,120 --> 00:31:44,539
composed

00:31:50,150 --> 00:31:56,780
at that time in modified below to see

00:31:53,510 --> 00:31:59,260
valves and incline

00:31:56,780 --> 00:31:59,260
set some

00:31:59,990 --> 00:32:09,140
now this is independent of a CPI so this

00:32:06,890 --> 00:32:11,450
is the internal management view of how

00:32:09,140 --> 00:32:13,220
qmu handles these these object in

00:32:11,450 --> 00:32:15,130
particular how p.m. you internally

00:32:13,220 --> 00:32:17,840
handle those objects and how the brute

00:32:15,130 --> 00:32:21,550
interacts with those objects or whatever

00:32:17,840 --> 00:32:21,550
the management user particular is

00:32:23,770 --> 00:32:28,309
exactly so not strictly you know using

00:32:26,450 --> 00:32:35,270
these names and structures so on but

00:32:28,309 --> 00:32:38,690
from the information we have here funny

00:32:35,270 --> 00:32:42,290
I think today the acpi view is flat and

00:32:38,690 --> 00:32:45,620
you may also try to change that I'd also

00:32:42,290 --> 00:32:49,870
if you work at all how much how it gasps

00:32:45,620 --> 00:32:49,870
expects the processes of you

00:32:50,200 --> 00:32:59,010
artwork on the socket rebel all my own

00:32:53,740 --> 00:32:59,010
honest it alone once again too so that's

00:32:59,990 --> 00:33:06,080
and it's matt is on x86 I don't know

00:33:04,380 --> 00:33:08,799
the other adventures

00:33:06,080 --> 00:33:11,750
but its independent from changing that

00:33:08,799 --> 00:33:18,190
located flexes the I am change later or

00:33:11,750 --> 00:33:22,399
in particularly it's that we have a lot

00:33:18,190 --> 00:33:24,919
this this whole qualms idea was never

00:33:22,399 --> 00:33:26,899
fully thought through in implementing it

00:33:24,919 --> 00:33:29,419
there were a lot of ideas in people's

00:33:26,899 --> 00:33:31,940
head but it's still pretty much a large

00:33:29,419 --> 00:33:34,610
flat namespace of devices that are

00:33:31,940 --> 00:33:36,890
objects are just lying around and those

00:33:34,610 --> 00:33:40,610
objects in particular have information

00:33:36,890 --> 00:33:42,559
about new merch apologies about CPU

00:33:40,610 --> 00:33:44,299
topologies but they're not being

00:33:42,559 --> 00:33:46,309
reflected internally in what we're

00:33:44,299 --> 00:33:48,769
modeling here so that is part of what

00:33:46,309 --> 00:33:51,590
I'm have been looking into and obviously

00:33:48,769 --> 00:33:53,659
that is in whether you save it in the

00:33:51,590 --> 00:33:55,190
the qualms hierarchy or whether you have

00:33:53,659 --> 00:33:57,470
an integer field that says the same

00:33:55,190 --> 00:33:59,929
information you can generate the acpi

00:33:57,470 --> 00:34:01,730
tables from it either way that that's

00:33:59,929 --> 00:34:05,960
not restricting what the guest sees it's

00:34:01,730 --> 00:34:08,599
about in which way can we modify the the

00:34:05,960 --> 00:34:13,399
machines and you know if you say you

00:34:08,599 --> 00:34:16,879
know how does this Alibaba one to

00:34:13,399 --> 00:34:20,599
actually use cpu hot-plug i mean are you

00:34:16,879 --> 00:34:23,240
using it today and you're using it like

00:34:20,599 --> 00:34:25,520
one cpu at a time the user does you know

00:34:23,240 --> 00:34:31,520
like a check box somewhere to do that or

00:34:25,520 --> 00:34:33,530
you know what exactly is the use case

00:34:31,520 --> 00:34:36,429
and what is the grenye granularity that

00:34:33,530 --> 00:34:36,429
you are using for that

00:34:37,210 --> 00:34:45,149
because some customers want extended

00:34:40,330 --> 00:34:45,149
their sexual members

00:34:46,850 --> 00:34:56,890
sometimes did the most handlers Chris

00:34:50,180 --> 00:34:59,150
they want to add as if you alive but at

00:34:56,890 --> 00:35:01,370
which granularity they do it is

00:34:59,150 --> 00:35:04,460
completely up to them right so they're

00:35:01,370 --> 00:35:06,920
going to say oh I need to add one more

00:35:04,460 --> 00:35:09,290
CPU or do they say oh but you know now

00:35:06,920 --> 00:35:10,790
it was idle the Machine and now I'm

00:35:09,290 --> 00:35:15,050
going to do something and I want to add

00:35:10,790 --> 00:35:19,940
like 15 CPUs or you know at which level

00:35:15,050 --> 00:35:21,620
you don't know okay yeah I guess most of

00:35:19,940 --> 00:35:24,500
us don't and so there is you know trying

00:35:21,620 --> 00:35:27,680
to keep our options as open as possible

00:35:24,500 --> 00:35:31,520
but also trying to get some sanity into

00:35:27,680 --> 00:35:33,230
not you know developing one thing for

00:35:31,520 --> 00:35:35,570
for x86 that is completely different

00:35:33,230 --> 00:35:41,900
from what ms 290 is going to be using

00:35:35,570 --> 00:35:45,320
here but it seems that the time here is

00:35:41,900 --> 00:35:51,380
is not sufficient for really reaching a

00:35:45,320 --> 00:35:54,140
final conclusion so is there any last

00:35:51,380 --> 00:35:57,110
minute questions suggestion or issue

00:35:54,140 --> 00:35:59,240
that someone wants to bring up because

00:35:57,110 --> 00:36:01,300
if not then thank you very much for your

00:35:59,240 --> 00:36:01,300

YouTube URL: https://www.youtube.com/watch?v=wTgWFwzAFOQ


