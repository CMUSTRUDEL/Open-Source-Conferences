Title: [2015] QEMU interface introspection: from hacks to solutions by Markus Armbruster
Publication date: 2015-09-05
Playlist: KVM Forum 2015
Description: 
	QEMU sports many compile-time configuration knobs, and is evolving rapidly. Software interfacing with QEMU frequently needs to figure out whether certain features or interfaces are available in a particular binary. The presenter will take you on a journey from the entertaining hacks of old to the much more robust (if less entertaining) interface introspection of today and the near future.

Markus Armbruster
Red Hat
Markus Armbruster is a senior software engineer at Red Hat, and a long term contributor to QEMU. He has worked on block devices, QAPI/QMP, Coverity modelling, device model infrastructure, and more, and is currently maintaining a few of these subsystems. He enjoys a reputation as thorough patch reviewer.

Slides: https://drive.google.com/file/d/0BzyAwvVlQckeWW5DRldRU2tKYlU/view?usp=sharing
Captions: 
	00:00:14,599 --> 00:00:20,820
hello my name is my cousin blossom and

00:00:18,140 --> 00:00:24,210
my topic today is cure me interface

00:00:20,820 --> 00:00:28,310
introspection from hacks to solutions so

00:00:24,210 --> 00:00:28,310
what's this about why is it interesting

00:00:29,840 --> 00:00:36,899
um who provides interfaces the qmp

00:00:34,440 --> 00:00:39,750
monitor and the command line to other

00:00:36,899 --> 00:00:43,620
programs notably to management

00:00:39,750 --> 00:00:45,899
applications such as Libert GMO evolves

00:00:43,620 --> 00:00:49,050
rapidly so we got many interface

00:00:45,899 --> 00:00:54,899
versions let's have a look at the

00:00:49,050 --> 00:00:57,020
command line right now we have 139 total

00:00:54,899 --> 00:00:59,760
options if I deduct the hypocrite

00:00:57,020 --> 00:01:03,539
duplicated ones and the internal use

00:00:59,760 --> 00:01:07,380
ones I still left with 123 supported

00:01:03,539 --> 00:01:10,380
options is that the big number or small

00:01:07,380 --> 00:01:13,409
number well if I had a coin for each of

00:01:10,380 --> 00:01:19,590
them I'd be carrying more than half a

00:01:13,409 --> 00:01:22,439
kilo of metal and wear baggy pants it's

00:01:19,590 --> 00:01:24,630
big this is the output of dash help an

00:01:22,439 --> 00:01:29,970
artist's impression of a first-time

00:01:24,630 --> 00:01:31,920
users reaction to it really big it's a

00:01:29,970 --> 00:01:33,810
section of the manual dealing with the

00:01:31,920 --> 00:01:40,200
command line makes a good bedtime

00:01:33,810 --> 00:01:43,009
reading and this is how it's used in the

00:01:40,200 --> 00:01:43,009
real world outside

00:01:47,150 --> 00:01:56,729
QP is in bigger it's 126 commands 33

00:01:52,530 --> 00:01:58,920
rents more than 700 named arguments and

00:01:56,729 --> 00:02:02,220
results in them and it's defined in the

00:01:58,920 --> 00:02:03,900
book sais quoi p schema so the scrappage

00:02:02,220 --> 00:02:05,940
scheme are defines a bunch of other

00:02:03,900 --> 00:02:09,240
things too so and if i omit them all

00:02:05,940 --> 00:02:12,360
just keep the QP stuff i end up with

00:02:09,240 --> 00:02:15,270
about twenty two thousand words again

00:02:12,360 --> 00:02:18,150
it's a big number or a small number now

00:02:15,270 --> 00:02:20,730
this book is about the same size as the

00:02:18,150 --> 00:02:24,209
Gospel of Luke it's a bit smaller than

00:02:20,730 --> 00:02:26,070
the book of Genesis it's a good deal

00:02:24,209 --> 00:02:32,040
larger than our company source code of

00:02:26,070 --> 00:02:33,630
our complete user manual let's see how

00:02:32,040 --> 00:02:37,950
the command line has evolved over the

00:02:33,630 --> 00:02:39,870
past two years the red line with around

00:02:37,950 --> 00:02:43,290
marks that's the number of pages in the

00:02:39,870 --> 00:02:45,390
manual the black line with the square

00:02:43,290 --> 00:02:49,709
marks that's the number of lines in dash

00:02:45,390 --> 00:02:51,450
help as you can see the letter has been

00:02:49,709 --> 00:02:55,110
growing by about twenty percent

00:02:51,450 --> 00:02:56,940
year-over-year the manual has been

00:02:55,110 --> 00:02:59,989
growing bit more slowly but that's

00:02:56,940 --> 00:02:59,989
probably not a good sign

00:03:02,770 --> 00:03:08,270
QP evolved even faster here the red line

00:03:06,410 --> 00:03:10,640
is the number of commands and events and

00:03:08,270 --> 00:03:13,070
the black line is the number of words in

00:03:10,640 --> 00:03:18,250
the schema and it's been growing by

00:03:13,070 --> 00:03:22,250
twenty-five percent year-over-year so

00:03:18,250 --> 00:03:26,140
why interface introspection GMO provides

00:03:22,250 --> 00:03:29,240
big rapidly evolving interfaces a

00:03:26,140 --> 00:03:31,070
program interfacing to QMI you can deal

00:03:29,240 --> 00:03:33,890
with that by tying to a specific build

00:03:31,070 --> 00:03:37,880
of PM you the Ron talk you can break for

00:03:33,890 --> 00:03:43,580
lunch now or it can figure out what the

00:03:37,880 --> 00:03:45,830
KMA it got can do this is easiest when

00:03:43,580 --> 00:03:48,950
the interfaces support introspection so

00:03:45,830 --> 00:03:52,010
you can just ask means to inquire what

00:03:48,950 --> 00:03:57,620
they can do trouble is our interfaces

00:03:52,010 --> 00:04:01,190
don't fully supported yet in the next

00:03:57,620 --> 00:04:03,320
part we'll explore what they do support

00:04:01,190 --> 00:04:06,800
what has been done so far to crack this

00:04:03,320 --> 00:04:10,510
problem this would be a journey from

00:04:06,800 --> 00:04:13,160
Impractical ideas through hacks to

00:04:10,510 --> 00:04:17,900
working solutions that aren't quite good

00:04:13,160 --> 00:04:21,020
enough let's start with an idea the

00:04:17,900 --> 00:04:23,870
obvious one check the version number I

00:04:21,020 --> 00:04:29,660
got a key mu here it says it's zero dot

00:04:23,870 --> 00:04:31,490
year 12 1 but it's around 6pm oh and it

00:04:29,660 --> 00:04:35,120
has changed a little bit since we forked

00:04:31,490 --> 00:04:37,490
of upstream the graph shows how it has

00:04:35,120 --> 00:04:40,220
changed the black line with the square

00:04:37,490 --> 00:04:42,380
marks that's the number of lines in

00:04:40,220 --> 00:04:45,920
their help and it has grown by

00:04:42,380 --> 00:04:48,080
thirty-five percent the red line with

00:04:45,920 --> 00:04:49,820
the round marks that's the number of QP

00:04:48,080 --> 00:04:53,630
commands and events and it has grown by

00:04:49,820 --> 00:04:58,190
two hundred and fifty percent back parts

00:04:53,630 --> 00:05:01,580
make the upstream version meaningless in

00:04:58,190 --> 00:05:03,800
a lighter shade I graphed the same

00:05:01,580 --> 00:05:06,110
things for upstream and there you can

00:05:03,800 --> 00:05:09,800
see our stream has been growing even

00:05:06,110 --> 00:05:13,390
faster and I think that shows that we r

00:05:09,800 --> 00:05:13,390
l developers are the entirely crazy

00:05:14,210 --> 00:05:23,460
oops so why not check the downstreamers

00:05:20,160 --> 00:05:26,810
and then after all we provide means for

00:05:23,460 --> 00:05:29,130
that one seems to add the rosin well

00:05:26,810 --> 00:05:31,800
counseling's don't always step it for

00:05:29,130 --> 00:05:33,810
each and every build so the downstream

00:05:31,800 --> 00:05:38,160
version is in practice of meaningless

00:05:33,810 --> 00:05:40,020
too and even if it wasn't the number of

00:05:38,160 --> 00:05:42,750
town streams times the number of

00:05:40,020 --> 00:05:45,480
releases results in a huge number of

00:05:42,750 --> 00:05:48,150
versions and keeping track of what each

00:05:45,480 --> 00:05:53,400
and every one of them can do that's a

00:05:48,150 --> 00:05:55,320
nightmare so you may say mother I care

00:05:53,400 --> 00:05:58,290
that's a downstream problem that found

00:05:55,320 --> 00:06:02,100
seems very about it let me rephrase it

00:05:58,290 --> 00:06:05,280
as an upstream problem for you have a

00:06:02,100 --> 00:06:09,990
look at the 24 development cycle in

00:06:05,280 --> 00:06:18,120
about four months we touched over 70,000

00:06:09,990 --> 00:06:22,830
lines in 2147 commits for 1901 out of

00:06:18,120 --> 00:06:27,890
these the version was to 350 if you're

00:06:22,830 --> 00:06:30,720
developing software interfacing with qmu

00:06:27,890 --> 00:06:32,610
you don't want to wait for a month for

00:06:30,720 --> 00:06:37,520
the verse number to change before you

00:06:32,610 --> 00:06:41,760
start interfacing with new stuff so

00:06:37,520 --> 00:06:46,410
where's numbers of no use no practical

00:06:41,760 --> 00:06:49,770
use to deal with this problem here's

00:06:46,410 --> 00:06:52,860
another idea just try to use it if it's

00:06:49,770 --> 00:06:55,500
not supported it'll fail this one

00:06:52,860 --> 00:06:59,880
actually works fine in simple cases for

00:06:55,500 --> 00:07:02,850
example Liberata tries just rice QP

00:06:59,880 --> 00:07:05,460
command inject nmi and if it fails it

00:07:02,850 --> 00:07:09,660
falls back to the old hmp command n MRI

00:07:05,460 --> 00:07:15,860
in not so simple cases however it can be

00:07:09,660 --> 00:07:20,000
complex slow and fragile you may have to

00:07:15,860 --> 00:07:23,370
look at the error to figure out whether

00:07:20,000 --> 00:07:24,849
the thing failed because of something in

00:07:23,370 --> 00:07:27,550
there you try to do is

00:07:24,849 --> 00:07:31,080
supported whether it failed for some

00:07:27,550 --> 00:07:35,050
other reason and that's always a pain

00:07:31,080 --> 00:07:36,639
you may want to figure out whether this

00:07:35,050 --> 00:07:39,610
thing is supported before you actually

00:07:36,639 --> 00:07:42,459
try it in anger so you want to run a

00:07:39,610 --> 00:07:46,059
probe and that probe my knee may need

00:07:42,459 --> 00:07:48,159
complex scaffolding it must also avoid

00:07:46,059 --> 00:07:51,969
unwanted side effects and that adds to

00:07:48,159 --> 00:07:53,409
the complexity but this is our theory so

00:07:51,969 --> 00:07:57,339
let's look at a practical real-world

00:07:53,409 --> 00:08:00,459
failure of just right we added command

00:07:57,339 --> 00:08:04,269
block commit in 13 and it works roughly

00:08:00,459 --> 00:08:06,909
like this you run block commit it starts

00:08:04,269 --> 00:08:10,119
a block sharp and complete a compound

00:08:06,909 --> 00:08:13,659
and succeeds the blocks of runs for a

00:08:10,119 --> 00:08:17,019
while and when it's done it sends event

00:08:13,659 --> 00:08:19,839
block top completed labour just try to

00:08:17,019 --> 00:08:24,879
use it run block emit if it succeeds

00:08:19,839 --> 00:08:28,959
wait for the event worked fine until two

00:08:24,879 --> 00:08:32,709
not before to not lock on it fails for

00:08:28,959 --> 00:08:36,069
the active layer but then we implemented

00:08:32,709 --> 00:08:39,000
that it succeeds but the block job it

00:08:36,069 --> 00:08:43,290
starts doesn't complete all by itself

00:08:39,000 --> 00:08:46,959
you need to initiate completion with an

00:08:43,290 --> 00:08:50,050
explicit block top complete command old

00:08:46,959 --> 00:08:54,160
elaborate has no idea and hangs rating

00:08:50,050 --> 00:08:56,439
for the event that never comes the

00:08:54,160 --> 00:08:59,050
lesson to take away from this example is

00:08:56,439 --> 00:09:02,889
that relying on behavior in error cases

00:08:59,050 --> 00:09:05,910
is inherently fragile and that's what

00:09:02,889 --> 00:09:05,910
you do when you just try

00:09:08,400 --> 00:09:17,100
time to get desperate camera already

00:09:13,320 --> 00:09:19,650
tells us what it can do sort of inhale

00:09:17,100 --> 00:09:21,150
plex many ways to get help that she'll

00:09:19,650 --> 00:09:25,370
just device help and so forth and so

00:09:21,150 --> 00:09:28,590
forth but this has serious drawbacks

00:09:25,370 --> 00:09:30,870
passing help is painful and fragile but

00:09:28,590 --> 00:09:34,680
most seriously the help text becomes

00:09:30,870 --> 00:09:37,710
defective ABI we've been in situations

00:09:34,680 --> 00:09:42,780
very couldn't improve help for our human

00:09:37,710 --> 00:09:45,540
users for fear of breaking tools finally

00:09:42,780 --> 00:09:47,310
help is perpetually incomplete for

00:09:45,540 --> 00:09:49,500
instance there is test drive formerly

00:09:47,310 --> 00:09:53,580
cross help but there is no desk drive

00:09:49,500 --> 00:09:57,800
ife cross out nevertheless everybody did

00:09:53,580 --> 00:09:57,800
this until u qm e gu real interfaces

00:09:58,400 --> 00:10:05,160
here's the first one of those interfaces

00:10:01,610 --> 00:10:06,780
qmp command query commands looks like

00:10:05,160 --> 00:10:11,250
this you're on Prairie commands you get

00:10:06,780 --> 00:10:14,790
back a modest effect effectively an area

00:10:11,250 --> 00:10:17,400
of command names this is actually qmp

00:10:14,790 --> 00:10:20,190
intersection just a very limited form of

00:10:17,400 --> 00:10:22,650
it you can use it to check for presence

00:10:20,190 --> 00:10:26,540
of command but it's entirely silent on

00:10:22,650 --> 00:10:29,250
arguments and results it's very useful

00:10:26,540 --> 00:10:35,490
but we really need arguments and results

00:10:29,250 --> 00:10:38,940
now for the command line we got

00:10:35,490 --> 00:10:41,490
something similar if more ambitious you

00:10:38,940 --> 00:10:44,310
run the command command line options you

00:10:41,490 --> 00:10:46,500
get back an area of objects and each

00:10:44,310 --> 00:10:50,340
object describes an option gives the

00:10:46,500 --> 00:10:54,450
option I'm and an area of option

00:10:50,340 --> 00:10:58,230
parameters names and types this tries to

00:10:54,450 --> 00:11:01,170
be command line introspection why try

00:10:58,230 --> 00:11:07,320
what's wrong with it dear God rather be

00:11:01,170 --> 00:11:08,760
in this chart shows status of credit

00:11:07,320 --> 00:11:13,200
command line options for all the support

00:11:08,760 --> 00:11:15,540
options the dark green pie is where the

00:11:13,200 --> 00:11:19,950
information it returns is correct and

00:11:15,540 --> 00:11:21,840
complete the yellow screen tyrelle it's

00:11:19,950 --> 00:11:24,660
correct and complete except

00:11:21,840 --> 00:11:26,220
the option name is pointlessly wrong so

00:11:24,660 --> 00:11:27,690
you need to know how to map the

00:11:26,220 --> 00:11:30,090
incorrect option aims to the correct

00:11:27,690 --> 00:11:34,950
ones but that's just a minor annoyance

00:11:30,090 --> 00:11:37,440
so it's still green from you the small

00:11:34,950 --> 00:11:40,860
yellow slice you might not be able to

00:11:37,440 --> 00:11:43,230
see it that's when it tells you about

00:11:40,860 --> 00:11:47,550
some parameters parameters but forgets

00:11:43,230 --> 00:11:49,050
about others the orange slice that's

00:11:47,550 --> 00:11:53,490
when it forgets about all of the

00:11:49,050 --> 00:11:57,870
parameters and the red slices is when it

00:11:53,490 --> 00:11:59,910
has no information at all so for some of

00:11:57,870 --> 00:12:03,030
those red options I can engage in a bit

00:11:59,910 --> 00:12:05,280
of hand waving and say okay this option

00:12:03,030 --> 00:12:07,320
is in essential it's a say it's a

00:12:05,280 --> 00:12:09,720
convenient option for human users and

00:12:07,320 --> 00:12:13,820
tools want to use a more powerful long

00:12:09,720 --> 00:12:16,770
form anyway and I painted that daya grid

00:12:13,820 --> 00:12:20,730
but the biggest slice by far that's

00:12:16,770 --> 00:12:22,230
missing no excuse prior to read now this

00:12:20,730 --> 00:12:24,030
is probably better still better than

00:12:22,230 --> 00:12:28,590
nothing but it's certainly less than

00:12:24,030 --> 00:12:30,830
needed moreover it's insufficiently

00:12:28,590 --> 00:12:35,160
expressive there are legitimate

00:12:30,830 --> 00:12:38,400
introspection questions we just can't

00:12:35,160 --> 00:12:42,030
answer for instance what formats are

00:12:38,400 --> 00:12:44,190
supported by desh drive it can only tell

00:12:42,030 --> 00:12:48,950
us that formats permit format is a

00:12:44,190 --> 00:12:51,990
string well we already knew what

00:12:48,950 --> 00:12:55,770
parameters are supported by the scarlet

00:12:51,990 --> 00:12:59,520
socket it can only tell us the

00:12:55,770 --> 00:13:02,130
parameters supported by some back-end it

00:12:59,520 --> 00:13:08,070
can't tell us the parameters support by

00:13:02,130 --> 00:13:10,500
this particular againt socket these are

00:13:08,070 --> 00:13:14,300
structural weaknesses so the command is

00:13:10,500 --> 00:13:14,300
in worse shape than merely incomplete

00:13:16,220 --> 00:13:21,020
here's a technique I like to call look

00:13:18,800 --> 00:13:27,440
for a witness and it's best explained by

00:13:21,020 --> 00:13:31,570
example in 0 14 we added an option def

00:13:27,440 --> 00:13:33,770
spice and liver needs to probe for it

00:13:31,570 --> 00:13:35,750
and there was no queria command-line

00:13:33,770 --> 00:13:37,070
options back then rendering the question

00:13:35,750 --> 00:13:42,410
whether it tells us anything about

00:13:37,070 --> 00:13:47,030
special spice mood so what to do we

00:13:42,410 --> 00:13:49,070
didn't want to scan the help however

00:13:47,030 --> 00:13:52,610
together with the spice we had a qmp

00:13:49,070 --> 00:13:56,330
command Crary spice and we can probe

00:13:52,610 --> 00:13:58,490
that with query commands so we used

00:13:56,330 --> 00:14:00,140
curry spice as a witness for dash spice

00:13:58,490 --> 00:14:02,390
we look for crazy spice and if it's

00:14:00,140 --> 00:14:06,500
there we just assume that touch spice is

00:14:02,390 --> 00:14:08,930
also also there this is useful when a

00:14:06,500 --> 00:14:15,170
direct probe is impractical and a

00:14:08,930 --> 00:14:17,180
suitable witness exists so what if

00:14:15,170 --> 00:14:19,850
everything all of these techniques file

00:14:17,180 --> 00:14:21,920
and we still need to know something what

00:14:19,850 --> 00:14:24,800
can we do that's one thing we can always

00:14:21,920 --> 00:14:28,430
do we had a special ad hoc credit

00:14:24,800 --> 00:14:30,110
command that returns whatever we are

00:14:28,430 --> 00:14:33,080
interested in and we've done that a

00:14:30,110 --> 00:14:36,170
couple of times there's very CPU

00:14:33,080 --> 00:14:39,440
definitions create machines correct EPM

00:14:36,170 --> 00:14:42,470
type square a square e that the question

00:14:39,440 --> 00:14:46,520
is how many more of these ad hoc queries

00:14:42,470 --> 00:14:49,720
do you want maybe it's time they had a

00:14:46,520 --> 00:14:49,720
more powerful query instead

00:14:51,560 --> 00:14:58,910
so where do we stand now on this problem

00:14:56,050 --> 00:15:01,460
current introspection select solutions

00:14:58,910 --> 00:15:04,580
work that they won't cut it from much

00:15:01,460 --> 00:15:07,190
longer query command line options is to

00:15:04,580 --> 00:15:08,570
incomplete and in expressive credit

00:15:07,190 --> 00:15:11,750
commands is to limit it we need

00:15:08,570 --> 00:15:14,320
arguments and results and adding a query

00:15:11,750 --> 00:15:17,420
through very few will result in a mess

00:15:14,320 --> 00:15:22,190
it's time to correct ump introspection

00:15:17,420 --> 00:15:28,880
for real and that's what i'll show you

00:15:22,190 --> 00:15:31,430
next here's the basic idea interface

00:15:28,880 --> 00:15:33,710
introspection turns the interface into

00:15:31,430 --> 00:15:38,930
data that are the client can retrieve

00:15:33,710 --> 00:15:44,900
and analyze the QB is defined by the

00:15:38,930 --> 00:15:50,089
copy schema the schema is data so why

00:15:44,900 --> 00:15:51,470
not let clients ready for it this looks

00:15:50,089 --> 00:15:53,750
like a good idea but actually isn't

00:15:51,470 --> 00:15:56,270
because the schema is geared toward

00:15:53,750 --> 00:15:59,750
humans not machines and more seriously

00:15:56,270 --> 00:16:03,860
it mixes up ABI aspects with internal

00:15:59,750 --> 00:16:06,140
detail so a refinement of the idea is

00:16:03,860 --> 00:16:09,740
instead of simply dumping the crappie

00:16:06,140 --> 00:16:12,950
schema you expose only its qmp wire kbi

00:16:09,740 --> 00:16:18,170
aspects in a format that's easily

00:16:12,950 --> 00:16:21,230
consumed by machines and that's what I

00:16:18,170 --> 00:16:24,740
got cooking in my tree there's a command

00:16:21,230 --> 00:16:27,070
curry schema looks like this you run it

00:16:24,740 --> 00:16:32,330
you get back an array of objects and

00:16:27,070 --> 00:16:36,200
those objects expose the QP wire ABI as

00:16:32,330 --> 00:16:38,230
defined in the schema commands and

00:16:36,200 --> 00:16:41,420
events with arguments and results

00:16:38,230 --> 00:16:43,339
Argon's and results are fully typed we

00:16:41,420 --> 00:16:45,800
have a reasonably expressive type system

00:16:43,339 --> 00:16:49,430
they're in operation so you can find out

00:16:45,800 --> 00:16:51,680
acceptable values their compound types

00:16:49,430 --> 00:16:54,020
and so forth and so forth and this work

00:16:51,680 --> 00:16:56,180
has been done by myself with he prefer

00:16:54,020 --> 00:17:01,040
from eric blake just the other day

00:16:56,180 --> 00:17:02,720
observes that i know'd Snipes him so

00:17:01,040 --> 00:17:03,529
that's right let's introspect the

00:17:02,720 --> 00:17:06,289
command the simple

00:17:03,529 --> 00:17:08,030
one I picked ready block it's takes no

00:17:06,289 --> 00:17:11,959
argument returns an area flock info

00:17:08,030 --> 00:17:14,600
whatever that is on the top you see the

00:17:11,959 --> 00:17:16,789
crappy schema for the command and on the

00:17:14,600 --> 00:17:19,819
bottom you see what create schema

00:17:16,789 --> 00:17:24,350
returns from for it and now let's say

00:17:19,819 --> 00:17:31,610
let me show you how to read this credit

00:17:24,350 --> 00:17:35,780
block is a command it has an empty

00:17:31,610 --> 00:17:38,210
argument type that's a bit weird but in

00:17:35,780 --> 00:17:40,640
the schema the 3 raised to say a command

00:17:38,210 --> 00:17:44,929
has no arguments you meet the argument

00:17:40,640 --> 00:17:48,409
ski or you say arguments open curly

00:17:44,929 --> 00:17:50,210
nothing close curly or you say arguments

00:17:48,409 --> 00:17:53,120
is this type over there and that type s

00:17:50,210 --> 00:17:59,960
is empty so I normalized to empty object

00:17:53,120 --> 00:18:08,330
for simplicity finally its return type

00:17:59,960 --> 00:18:10,850
is an area of block info except the

00:18:08,330 --> 00:18:18,320
timeline block my info is masked because

00:18:10,850 --> 00:18:21,440
it's not a VI overall this is tediously

00:18:18,320 --> 00:18:26,720
explicit on purpose because that's how

00:18:21,440 --> 00:18:28,309
machines like the input easy isn't it so

00:18:26,720 --> 00:18:30,440
let's start do something more fun and

00:18:28,309 --> 00:18:35,360
it's interesting instead let's

00:18:30,440 --> 00:18:38,630
introspect introspection so here's the

00:18:35,360 --> 00:18:41,090
top again schema for the command grey

00:18:38,630 --> 00:18:43,130
schema instead of cry block and on the

00:18:41,090 --> 00:18:47,059
bottom what Kreisky my return through it

00:18:43,130 --> 00:18:52,370
and it's really the same except this

00:18:47,059 --> 00:18:53,870
tema info instead of blog info so the

00:18:52,370 --> 00:18:58,179
new part the part we want to look into

00:18:53,870 --> 00:19:00,890
now let's ski my info let's explore it

00:18:58,179 --> 00:19:03,830
this is how schema info is defined in

00:19:00,890 --> 00:19:08,690
the copy schema and I'm afraid resolve

00:19:03,830 --> 00:19:11,299
comic book to normal people so let me

00:19:08,690 --> 00:19:14,450
decode it for you schema info is a

00:19:11,299 --> 00:19:15,660
variant record it has common members

00:19:14,450 --> 00:19:20,490
name and merit

00:19:15,660 --> 00:19:22,410
type it has variant members and the

00:19:20,490 --> 00:19:26,430
barrett members depend on the value of

00:19:22,410 --> 00:19:29,520
meta type if meta type is command there

00:19:26,430 --> 00:19:32,100
are members archetype and red type for

00:19:29,520 --> 00:19:34,680
Ray there's element type for object

00:19:32,100 --> 00:19:43,160
members tagged variants and so forth and

00:19:34,680 --> 00:19:51,240
so forth let's introspect schema info

00:19:43,160 --> 00:19:56,160
read it real slow it's an object type it

00:19:51,240 --> 00:20:01,650
is a name and a meta type it is variance

00:19:56,160 --> 00:20:04,410
a meta type is the type tech problem it

00:20:01,650 --> 00:20:06,780
has a bunch of variant cases in each

00:20:04,410 --> 00:20:11,490
case applies to a value of the text type

00:20:06,780 --> 00:20:15,710
and the very members for each case are

00:20:11,490 --> 00:20:15,710
given by yet another object type i

00:20:17,180 --> 00:20:22,350
glossed over the types of name and meta

00:20:20,190 --> 00:20:27,090
type so let's have a closer look names

00:20:22,350 --> 00:20:32,550
type is STR it's a built-in type and on

00:20:27,090 --> 00:20:35,940
the wire its Jason string meta types

00:20:32,550 --> 00:20:37,590
type is an enumeration with these

00:20:35,940 --> 00:20:42,870
members and they shouldn't surprise

00:20:37,590 --> 00:20:46,350
anyone by now finally let's have a

00:20:42,870 --> 00:20:51,570
closer look at one variant I pick Dean

00:20:46,350 --> 00:20:54,870
on so the variant cases type is an

00:20:51,570 --> 00:20:57,240
object type as I said it would be the

00:20:54,870 --> 00:21:02,090
object type is just one member called

00:20:57,240 --> 00:21:05,880
values and it's type is array of string

00:21:02,090 --> 00:21:08,760
taken together when the meta type is

00:21:05,880 --> 00:21:11,280
enum there is one additional member

00:21:08,760 --> 00:21:13,640
called values and it's type is array of

00:21:11,280 --> 00:21:13,640
string

00:21:15,790 --> 00:21:25,040
time for a quick peek under the hood the

00:21:22,580 --> 00:21:27,440
crappy schemas compile-time static so we

00:21:25,040 --> 00:21:30,230
can generate scheme of info from it

00:21:27,440 --> 00:21:32,810
that's what we do the generator is a

00:21:30,230 --> 00:21:36,470
small Python program it's just 160 lines

00:21:32,810 --> 00:21:39,940
of code the necessary refactorings to

00:21:36,470 --> 00:21:43,490
make it possible there was a bigger job

00:21:39,940 --> 00:21:46,280
the complete info them but cry schema

00:21:43,490 --> 00:21:49,730
returns that's a bit over 70 kilobytes

00:21:46,280 --> 00:21:52,610
right now so we should probably support

00:21:49,730 --> 00:21:56,150
cashing it by putting a hash or

00:21:52,610 --> 00:21:58,370
something in the QP greeting the whole

00:21:56,150 --> 00:22:05,480
thing is still a work in progress and

00:21:58,370 --> 00:22:07,540
check it out in my key to repo as always

00:22:05,480 --> 00:22:14,150
the reward for useful work is more work

00:22:07,540 --> 00:22:19,880
and hear some of it TMP introspection

00:22:14,150 --> 00:22:23,900
has limitations it can only see

00:22:19,880 --> 00:22:25,610
qualified commands and there's one left

00:22:23,900 --> 00:22:31,510
that is still isn't qualified that's

00:22:25,610 --> 00:22:34,160
device it so you can't see that likewise

00:22:31,510 --> 00:22:36,710
it can only see coop ified arguments and

00:22:34,160 --> 00:22:40,010
results nice one command very cheat

00:22:36,710 --> 00:22:45,440
that's native ad so you can't see mode

00:22:40,010 --> 00:22:48,290
of most of native ads arguments in

00:22:45,440 --> 00:22:52,790
general it can only be as good as the

00:22:48,290 --> 00:22:56,260
qualification for instance QP command at

00:22:52,790 --> 00:23:00,020
client takes arguments protocol and TLS

00:22:56,260 --> 00:23:02,330
TLS is an optional boolean it is

00:23:00,020 --> 00:23:08,060
accepted only when the protocol supports

00:23:02,330 --> 00:23:12,590
it unfortunately the copy schema isn't

00:23:08,060 --> 00:23:14,510
written in a way to express that so you

00:23:12,590 --> 00:23:16,400
can't see any interest bc in

00:23:14,510 --> 00:23:21,340
introspection whether the protocol

00:23:16,400 --> 00:23:21,340
supports TLS sure would be useful

00:23:22,730 --> 00:23:31,760
how could we clean up the crop ification

00:23:26,070 --> 00:23:36,090
of net effort the problem is well it has

00:23:31,760 --> 00:23:37,890
common arguments and among them argument

00:23:36,090 --> 00:23:39,990
type and then it has type specific

00:23:37,890 --> 00:23:44,010
arguments and the type specific

00:23:39,990 --> 00:23:46,590
arguments are all missing we need to

00:23:44,010 --> 00:23:50,700
qualify them without upsetting the QP

00:23:46,590 --> 00:23:53,940
wire format turns out this Maya format

00:23:50,700 --> 00:23:57,420
matches crappy QPS flat Union type and

00:23:53,940 --> 00:24:00,930
that leads to a possible solution if we

00:23:57,420 --> 00:24:02,550
support unions as command arguments then

00:24:00,930 --> 00:24:09,030
all we need to do is code up the

00:24:02,550 --> 00:24:11,310
matching flat Union type done actually

00:24:09,030 --> 00:24:14,820
there is a problem that native ad is not

00:24:11,310 --> 00:24:17,310
type-safe you can passaport a TCP port

00:24:14,820 --> 00:24:18,960
as a string at it will accept it so it

00:24:17,310 --> 00:24:21,390
hasn't messaged a union tight that's a

00:24:18,960 --> 00:24:22,980
horrible miss feature and we have to

00:24:21,390 --> 00:24:31,380
hike around it so it's not quite that

00:24:22,980 --> 00:24:34,710
easy so I lie to you how could we

00:24:31,380 --> 00:24:37,320
qualify divisor now on the surface it's

00:24:34,710 --> 00:24:39,780
just like net effete it has a bunch of a

00:24:37,320 --> 00:24:41,460
few common arguments one of them drive

00:24:39,780 --> 00:24:45,480
on and then it has driver specific

00:24:41,460 --> 00:24:47,100
arguments unlike meta that the drivers

00:24:45,480 --> 00:24:50,280
are collected and their arguments are

00:24:47,100 --> 00:24:54,710
collected only at runtime but the crappy

00:24:50,280 --> 00:24:57,510
schema is fixed at compile-time choices

00:24:54,710 --> 00:25:03,390
we could collect the rivals at compile

00:24:57,510 --> 00:25:06,930
time but that would be work we could

00:25:03,390 --> 00:25:12,150
make the copy schema dynamic interesting

00:25:06,930 --> 00:25:14,370
but even more work we could forgo driver

00:25:12,150 --> 00:25:17,520
specific arguments in the schema of the

00:25:14,370 --> 00:25:20,240
defeats introspection we haven't decided

00:25:17,520 --> 00:25:20,240
what to do yet

00:25:22,450 --> 00:25:29,180
this work to do on copy itself on the

00:25:27,590 --> 00:25:31,640
way to introspection we got ourselves

00:25:29,180 --> 00:25:33,680
real test coverage we completely

00:25:31,640 --> 00:25:36,440
replaced our internal representation of

00:25:33,680 --> 00:25:39,170
the schema we fixed many bugs and Mike

00:25:36,440 --> 00:25:43,220
Morris fix me and be plugged many

00:25:39,170 --> 00:25:47,870
documentation holes work left to do

00:25:43,220 --> 00:25:49,370
includes fix the fix miss of course we

00:25:47,870 --> 00:25:52,610
need to finish the transition to the

00:25:49,370 --> 00:25:55,100
internal new internal representation and

00:25:52,610 --> 00:25:57,110
there are opportunities to clean up the

00:25:55,100 --> 00:26:00,760
schema language and the code generated

00:25:57,110 --> 00:26:03,440
for it and I'd like to explore them and

00:26:00,760 --> 00:26:05,990
I think we should review the schema for

00:26:03,440 --> 00:26:13,850
emphasize crop ification such as at

00:26:05,990 --> 00:26:18,770
clients so with QB wrapped what about

00:26:13,850 --> 00:26:22,840
the command line the same basic idea

00:26:18,770 --> 00:26:26,510
applies turn the interfacing the dollar

00:26:22,840 --> 00:26:30,970
the good news is our command line

00:26:26,510 --> 00:26:34,340
definition is data you define it in data

00:26:30,970 --> 00:26:36,290
the bad news it's not copied it's

00:26:34,340 --> 00:26:40,520
something else which is less expressive

00:26:36,290 --> 00:26:43,280
and lease more quote he left the choices

00:26:40,520 --> 00:26:46,070
we can build nan copy command line

00:26:43,280 --> 00:26:50,930
introspection but it can only be as good

00:26:46,070 --> 00:26:52,630
as the data which means not weary or we

00:26:50,930 --> 00:26:57,710
can rebase the command line on the copy

00:26:52,630 --> 00:27:00,590
that's another big chunk of work you

00:26:57,710 --> 00:27:04,640
could try to rely on QP introspection to

00:27:00,590 --> 00:27:06,290
provide as a witness that that assumes

00:27:04,640 --> 00:27:13,280
that we can always find a suitable

00:27:06,290 --> 00:27:15,350
witness no conclusion yet and with that

00:27:13,280 --> 00:27:18,670
I'd like to conclude my talk say thank

00:27:15,350 --> 00:27:18,670
you and open it up for questions

00:27:20,500 --> 00:27:26,710
so it's not a question that party has

00:27:24,220 --> 00:27:31,620
can have an immediate answer but what

00:27:26,710 --> 00:27:33,880
about the qualms schema so queering

00:27:31,620 --> 00:27:36,130
properties do you have any ideas or any

00:27:33,880 --> 00:27:46,210
plans or something it's just a sort of

00:27:36,130 --> 00:27:47,770
like device that just holla hi how does

00:27:46,210 --> 00:27:49,930
that about some kind of versioning I

00:27:47,770 --> 00:27:52,870
thinking about the case where we extend

00:27:49,930 --> 00:27:55,300
the functionality of existing common but

00:27:52,870 --> 00:27:57,220
we don't really change the API how do we

00:27:55,300 --> 00:28:00,190
know if the common to pursue new

00:27:57,220 --> 00:28:02,980
functionality or not don't change the

00:28:00,190 --> 00:28:08,850
API but there's there's cases work we

00:28:02,980 --> 00:28:08,850
are not changing it we shouldn't look

00:28:09,060 --> 00:28:17,500
Lak commit yes that was that was badly

00:28:12,460 --> 00:28:21,660
done the change should be visible in the

00:28:17,500 --> 00:28:24,100
a in the ABI really when I'm actually

00:28:21,660 --> 00:28:25,960
working in the stand in the vlog stream

00:28:24,100 --> 00:28:27,820
command and initially my plan was to

00:28:25,960 --> 00:28:29,380
actually change the API then I was

00:28:27,820 --> 00:28:32,140
suggested not to change it but to reuse

00:28:29,380 --> 00:28:36,970
the dough extend existing API keeping

00:28:32,140 --> 00:28:39,460
the same arguments you need to change

00:28:36,970 --> 00:28:42,730
something or qmp introspection will be

00:28:39,460 --> 00:28:45,880
of no use to you and that might might be

00:28:42,730 --> 00:28:47,440
just fine depends on them in this

00:28:45,880 --> 00:28:49,750
particular case is not really a problem

00:28:47,440 --> 00:28:53,410
because there's other ways to to figure

00:28:49,750 --> 00:28:56,670
out the death machine ality but I was

00:28:53,410 --> 00:28:56,670
thinking more about the general case

00:29:01,039 --> 00:29:08,729
you had a few not decided yet they're

00:29:05,059 --> 00:29:22,429
strongly argue for the work to your

00:29:08,729 --> 00:29:22,429
queue API to make dynamic job security

00:29:23,479 --> 00:29:37,009
in the long run some small steps towards

00:29:28,529 --> 00:29:41,090
oh it's a good solution anything else

00:29:37,009 --> 00:29:41,090

YouTube URL: https://www.youtube.com/watch?v=IEa8Ao8_B9o


