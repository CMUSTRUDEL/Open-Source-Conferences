Title: [2015] oVirt SR-IOV support by Barak Azulay
Publication date: 2015-09-04
Playlist: KVM Forum 2015
Description: 
	In this session Barak will provide an explanation of how to configure and manage SR-IOV network interfaces via the oVirt virtualization management system (REST API and GUI). It will include creating virtual functions (persistent cross reboots), dynamically attaching virtual functions to virtual machines, setting VLAN tag (using logical networks) and MAC address on virtual functions, mixed configuration (virtual functions and bridges) and much more. The session will also include a brief overview of the current oVirt networking virtualization and description of future SR-IOV related features.
Barak Azulay
Red Hat
Senior Manager, Red Hat
Captions: 
	00:00:19,400 --> 00:00:26,880
okay hi everyone my name is Barack I

00:00:23,970 --> 00:00:30,890
work for reddit mainly on the overt

00:00:26,880 --> 00:00:33,570
project and i'll be speaking today about

00:00:30,890 --> 00:00:38,100
introducing us our every support native

00:00:33,570 --> 00:00:42,120
support in overt coming up in over the

00:00:38,100 --> 00:00:45,000
three-dot 6 i'm a substitute the

00:00:42,120 --> 00:00:47,280
original speaker should have been Alona

00:00:45,000 --> 00:00:51,449
was the main developer of the feature

00:00:47,280 --> 00:00:54,090
but she couldn't show up so I'm doing it

00:00:51,449 --> 00:00:58,890
instead of her the real credits belong

00:00:54,090 --> 00:01:03,899
to ilona who did mostly the engine side

00:00:58,890 --> 00:01:09,510
martin who did the vfa apart and ido ido

00:01:03,899 --> 00:01:13,320
broken so it's always a challenge to

00:01:09,510 --> 00:01:19,650
speak after lunch I hope you'll stay

00:01:13,320 --> 00:01:26,880
with me all the way how many actually no

00:01:19,650 --> 00:01:32,460
overt okay nice how many actually tried

00:01:26,880 --> 00:01:36,299
overt good well for those of you who are

00:01:32,460 --> 00:01:39,890
not aware overt or no over it is an

00:01:36,299 --> 00:01:43,020
enterprise virtualization DC management

00:01:39,890 --> 00:01:45,060
it's a single point of management for

00:01:43,020 --> 00:01:49,049
the entire needs of the virtual data

00:01:45,060 --> 00:01:52,950
center okay so what we'll be covering

00:01:49,049 --> 00:01:57,530
today is this for topic since most high

00:01:52,950 --> 00:02:01,110
level management people not don't really

00:01:57,530 --> 00:02:03,960
not always familiar with the SRV I'll

00:02:01,110 --> 00:02:06,689
talk a bit about the SRV basics I will

00:02:03,960 --> 00:02:10,739
be covering also a bit over networking

00:02:06,689 --> 00:02:12,660
basics it's a big topic and we can speak

00:02:10,739 --> 00:02:13,440
about it for hours but it is necessary

00:02:12,660 --> 00:02:16,080
to

00:02:13,440 --> 00:02:18,990
continued on to talk about Avant

00:02:16,080 --> 00:02:22,100
implementation for SRV support and

00:02:18,990 --> 00:02:28,410
eventually we will talk about future

00:02:22,100 --> 00:02:36,380
improvements so what is sr what is

00:02:28,410 --> 00:02:39,750
actually a SRV SRV is basically giving a

00:02:36,380 --> 00:02:42,720
piece of software pci device the

00:02:39,750 --> 00:02:46,230
possibility to partition it to several

00:02:42,720 --> 00:02:50,100
virtual a parts which can be accessible

00:02:46,230 --> 00:02:54,120
separately on the hypervisor and can be

00:02:50,100 --> 00:02:56,490
used separately the purpose it was it's

00:02:54,120 --> 00:02:59,970
actually a several specification

00:02:56,490 --> 00:03:02,760
introduced by the pci-sig which

00:02:59,970 --> 00:03:07,260
introduced several specification in this

00:03:02,760 --> 00:03:09,900
area pci-sig is a is a group of hardware

00:03:07,260 --> 00:03:12,810
vendors about 700 I think they

00:03:09,900 --> 00:03:16,550
introduced the specification around 2008

00:03:12,810 --> 00:03:20,340
and they they introduced several

00:03:16,550 --> 00:03:22,620
specifications regarding that issue we

00:03:20,340 --> 00:03:28,580
will be talking about SRV which is a

00:03:22,620 --> 00:03:28,580
single root I of virtualization device

00:03:29,030 --> 00:03:34,310
one can think about when you talk about

00:03:31,739 --> 00:03:37,080
hardware and virtualization and using

00:03:34,310 --> 00:03:40,620
directly attached how the hardware to a

00:03:37,080 --> 00:03:44,900
virtualization up to I think seven years

00:03:40,620 --> 00:03:46,739
ago it would have been conceived like

00:03:44,900 --> 00:03:49,320
not the right place because

00:03:46,739 --> 00:03:53,730
virtualization in the early days was

00:03:49,320 --> 00:03:57,150
considered as the next hardware platform

00:03:53,730 --> 00:03:59,190
and it is flexible enables you to manage

00:03:57,150 --> 00:04:03,390
your data center move parts around and

00:03:59,190 --> 00:04:04,920
so on so attaching specific harder from

00:04:03,390 --> 00:04:09,120
the hypervisor to a virtual machine

00:04:04,920 --> 00:04:14,100
machine was a conceived as kind of not

00:04:09,120 --> 00:04:16,080
the right place but as time evolved it's

00:04:14,100 --> 00:04:19,530
not just that the hardware vendors

00:04:16,080 --> 00:04:21,269
wanted to sell mode hardware it's maybe

00:04:19,530 --> 00:04:23,840
also related to that but there were

00:04:21,269 --> 00:04:26,840
actually specific needs for the

00:04:23,840 --> 00:04:26,840
virtualization

00:04:26,870 --> 00:04:33,240
applications to actually enhance

00:04:29,370 --> 00:04:37,410
performance and do specific things to

00:04:33,240 --> 00:04:40,710
give servers the ability to a near

00:04:37,410 --> 00:04:43,349
native performance so this is one of the

00:04:40,710 --> 00:04:47,340
reason and NFV of course which in some

00:04:43,349 --> 00:04:49,620
use cases will require some near to

00:04:47,340 --> 00:04:56,220
native performance so this is the reason

00:04:49,620 --> 00:04:58,560
it came up so what is it comprised of it

00:04:56,220 --> 00:05:00,930
is comprised of of so we have a device a

00:04:58,560 --> 00:05:03,840
single root device a single pci pci

00:05:00,930 --> 00:05:07,440
express and it is hooked into a server

00:05:03,840 --> 00:05:10,680
and what is there so there are two parts

00:05:07,440 --> 00:05:12,720
for the SRV there is the physical

00:05:10,680 --> 00:05:17,099
functions that which we see this is the

00:05:12,720 --> 00:05:20,720
actually actual part that when you that

00:05:17,099 --> 00:05:26,130
enables the administrator to actually

00:05:20,720 --> 00:05:28,949
manage this device and it's visible to

00:05:26,130 --> 00:05:32,419
the host and it is it has some

00:05:28,949 --> 00:05:36,300
additional capabilities that actually

00:05:32,419 --> 00:05:38,400
expose this feature and the other parts

00:05:36,300 --> 00:05:42,030
are the virtual functions the virtual

00:05:38,400 --> 00:05:44,610
functions once the the physical function

00:05:42,030 --> 00:05:47,880
is configured you can view the virtual

00:05:44,610 --> 00:05:51,479
functions as a list of devices under the

00:05:47,880 --> 00:05:53,580
physical device and you can actually

00:05:51,479 --> 00:05:57,599
utilize them in a virtualized

00:05:53,580 --> 00:06:01,500
environment one thing about the virtual

00:05:57,599 --> 00:06:03,449
function its lightweight and it's less

00:06:01,500 --> 00:06:06,659
configurable than the physical function

00:06:03,449 --> 00:06:08,909
because all the administration part is

00:06:06,659 --> 00:06:10,710
done through the physical functions how

00:06:08,909 --> 00:06:13,740
does it look like it's a simple example

00:06:10,710 --> 00:06:17,969
you can see an IP link you see on the

00:06:13,740 --> 00:06:21,330
top level three physical devices and

00:06:17,969 --> 00:06:24,509
then one of them is the loopback so two

00:06:21,330 --> 00:06:27,090
physical devices and at this point you

00:06:24,509 --> 00:06:30,870
cannot tell whether it's an SRV device

00:06:27,090 --> 00:06:33,900
once you are configure it through the

00:06:30,870 --> 00:06:37,229
sea surface to have a number of virtual

00:06:33,900 --> 00:06:38,680
functions so you see below the lower

00:06:37,229 --> 00:06:41,770
part you see

00:06:38,680 --> 00:06:49,810
for virtual functions is specified under

00:06:41,770 --> 00:06:52,060
the physical function the question was

00:06:49,810 --> 00:06:54,130
do I determine the number of physical

00:06:52,060 --> 00:06:57,280
functions yes there are two aspects for

00:06:54,130 --> 00:06:59,590
that one of them is a hardware vendor

00:06:57,280 --> 00:07:01,330
specification there is a limit it's not

00:06:59,590 --> 00:07:03,220
unlimited you cannot partition it

00:07:01,330 --> 00:07:07,440
forever so every piece of hardware

00:07:03,220 --> 00:07:10,180
supports a different a max number and

00:07:07,440 --> 00:07:15,570
you can choose as an administrator to

00:07:10,180 --> 00:07:21,270
configure it as you wish yeah any other

00:07:15,570 --> 00:07:29,380
it's dynamic up to the max number yes

00:07:21,270 --> 00:07:32,320
yeah this is an administrative so how

00:07:29,380 --> 00:07:34,750
does it look like on a real hypervisor

00:07:32,320 --> 00:07:36,430
as you can see we have two virtual

00:07:34,750 --> 00:07:38,979
machines with virtual functions

00:07:36,430 --> 00:07:41,349
connected to it on on the physical

00:07:38,979 --> 00:07:43,810
function on the right side you can see

00:07:41,349 --> 00:07:46,330
that it's actually visible in the

00:07:43,810 --> 00:07:48,220
hypervisor it can also be utilized as a

00:07:46,330 --> 00:07:53,349
physical device and we'll discuss about

00:07:48,220 --> 00:07:55,630
it a bit later about this possibility by

00:07:53,349 --> 00:07:59,680
the way this by itself can be achieved

00:07:55,630 --> 00:08:03,610
as is by a different feature called the

00:07:59,680 --> 00:08:06,849
via vfi oh so the fao actually can aim

00:08:03,610 --> 00:08:10,659
is the basic mechanism that we implement

00:08:06,849 --> 00:08:13,150
the desire v on top so you can actually

00:08:10,659 --> 00:08:14,800
do it without this are every support

00:08:13,150 --> 00:08:16,960
only with v fio support but the

00:08:14,800 --> 00:08:18,550
limitation is once you hook a virtual

00:08:16,960 --> 00:08:21,970
function into a virtual machine using

00:08:18,550 --> 00:08:23,830
vfi oh it's actually pinning the virtual

00:08:21,970 --> 00:08:27,639
machine to the host and which kind of

00:08:23,830 --> 00:08:30,340
misses the point of having it in a data

00:08:27,639 --> 00:08:35,140
center management environment but it is

00:08:30,340 --> 00:08:37,360
still usable in some other a VF io is a

00:08:35,140 --> 00:08:40,209
very important feature that enables

00:08:37,360 --> 00:08:43,899
other things we introduced the ability

00:08:40,209 --> 00:08:47,520
to actually have scheduling as a part of

00:08:43,899 --> 00:08:47,520
the solution

00:08:48,020 --> 00:08:55,110
yeah later on so what are the advantages

00:08:52,500 --> 00:08:59,790
the advantages there are the obvious

00:08:55,110 --> 00:09:02,610
advantages like scale near to a native

00:08:59,790 --> 00:09:09,029
performance in terms of networking I

00:09:02,610 --> 00:09:12,450
will focus on the bottom two items first

00:09:09,029 --> 00:09:15,360
of all is virtualization means isolation

00:09:12,450 --> 00:09:17,820
security how can we share the same

00:09:15,360 --> 00:09:19,740
physical device and still enjoy that so

00:09:17,820 --> 00:09:23,220
this was a part of the work being done

00:09:19,740 --> 00:09:26,700
in the kernel and support for SRV

00:09:23,220 --> 00:09:29,970
actually takes care of this isolation

00:09:26,700 --> 00:09:33,720
using iommu groups I will not cover too

00:09:29,970 --> 00:09:37,350
much there iommu group thing but I will

00:09:33,720 --> 00:09:42,210
talk later on about some issues with us

00:09:37,350 --> 00:09:46,380
without implementation and the last part

00:09:42,210 --> 00:09:47,910
is somewhat sometimes may be considered

00:09:46,380 --> 00:09:52,110
less significant but it is very

00:09:47,910 --> 00:09:54,120
significant vm scan shows the single

00:09:52,110 --> 00:09:57,300
physical device which means first of all

00:09:54,120 --> 00:09:59,970
the hardware is smaller it means that

00:09:57,300 --> 00:10:02,850
less power in that which is significant

00:09:59,970 --> 00:10:09,120
less cooling and the servers can be

00:10:02,850 --> 00:10:15,120
small which is important for vendors so

00:10:09,120 --> 00:10:17,850
what are the limitations well the most

00:10:15,120 --> 00:10:20,700
significant one is live migration the

00:10:17,850 --> 00:10:22,320
bottom one all the rest are you need to

00:10:20,700 --> 00:10:26,790
do that manually nina t understand

00:10:22,320 --> 00:10:28,560
exactly what you're doing and and so on

00:10:26,790 --> 00:10:30,270
but live migration is the biggest

00:10:28,560 --> 00:10:34,770
challenge live migration because if

00:10:30,270 --> 00:10:36,930
you're pinning the hardware a specific

00:10:34,770 --> 00:10:41,100
pci virtual function to a virtual

00:10:36,930 --> 00:10:43,650
machine so migration qmu while migrating

00:10:41,100 --> 00:10:45,360
takes care of all its memory of the

00:10:43,650 --> 00:10:47,370
memory of the guests so it migrated to

00:10:45,360 --> 00:10:50,730
the other machine but there is a state

00:10:47,370 --> 00:10:53,400
in the physical device that cannot be

00:10:50,730 --> 00:10:56,520
migrated that's the reason it's a

00:10:53,400 --> 00:10:59,740
challenge to migrate with virtual

00:10:56,520 --> 00:11:02,779
functions attached to a virtual machine

00:10:59,740 --> 00:11:06,199
so require what do I need in order to

00:11:02,779 --> 00:11:08,290
have as users are our V so here are the

00:11:06,199 --> 00:11:10,970
specific data the basic ones like

00:11:08,290 --> 00:11:12,880
hardware iommu support which is

00:11:10,970 --> 00:11:15,860
basically supporting virtualization

00:11:12,880 --> 00:11:20,810
kernel and enable iommu support which is

00:11:15,860 --> 00:11:23,329
practically telling the kernel to load

00:11:20,810 --> 00:11:27,949
the appropriate support for a I ome new

00:11:23,329 --> 00:11:29,600
group SI RV capable hardwar you cannot

00:11:27,949 --> 00:11:32,589
use this ROV if you don't have a card

00:11:29,600 --> 00:11:35,569
and the appropriate colonel we

00:11:32,589 --> 00:11:38,300
implemented on top of red seven Center

00:11:35,569 --> 00:11:40,430
seven and of course the last part which

00:11:38,300 --> 00:11:43,550
is not less significant is the guest

00:11:40,430 --> 00:11:45,920
driver the driver should reside in the

00:11:43,550 --> 00:11:47,810
guest operating system because otherwise

00:11:45,920 --> 00:11:49,790
you will see a pci device you will not

00:11:47,810 --> 00:11:58,670
have other and you will not be able to

00:11:49,790 --> 00:12:01,370
use it questions so far ok so till now

00:11:58,670 --> 00:12:05,990
we cover the SRV basics now we will

00:12:01,370 --> 00:12:08,660
cover the overt networking basics what

00:12:05,990 --> 00:12:11,209
is originated what it is is it comprised

00:12:08,660 --> 00:12:13,519
of so a logical network we're not the

00:12:11,209 --> 00:12:15,829
first one to invent it everyone is using

00:12:13,519 --> 00:12:18,829
some kind of logical networks the

00:12:15,829 --> 00:12:22,459
logical networks help us to disassociate

00:12:18,829 --> 00:12:25,310
day a host networking from the guest

00:12:22,459 --> 00:12:28,069
networking so in our case we have

00:12:25,310 --> 00:12:30,740
several often several types of logical

00:12:28,069 --> 00:12:33,889
networks we have vm and non vm we have

00:12:30,740 --> 00:12:36,470
required optional and so on but what's

00:12:33,889 --> 00:12:40,939
important here is the vm and non vm

00:12:36,470 --> 00:12:44,660
because we're talking about a vm network

00:12:40,939 --> 00:12:47,300
is till today is built on top of linux

00:12:44,660 --> 00:12:50,209
bridge and obvious if you're using the

00:12:47,300 --> 00:12:56,630
new trunk support that we introduced in

00:12:50,209 --> 00:12:59,990
overt so this is about the understanding

00:12:56,630 --> 00:13:02,990
what is the network setup network is

00:12:59,990 --> 00:13:06,199
about configuring the logical network

00:13:02,990 --> 00:13:10,610
which we explained earlier on the

00:13:06,199 --> 00:13:13,279
hypervisor but then again how can we

00:13:10,610 --> 00:13:15,259
associate a virtual machine to

00:13:13,279 --> 00:13:19,550
logical Network for that every logical

00:13:15,259 --> 00:13:22,779
Network can have several things that we

00:13:19,550 --> 00:13:26,930
call Vinick profile Vinick profile is

00:13:22,779 --> 00:13:30,019
giving the giving overt the ability to

00:13:26,930 --> 00:13:31,850
later on associate the Vinick device

00:13:30,019 --> 00:13:34,850
which is which belongs to the virtual

00:13:31,850 --> 00:13:38,120
machine to the right network which

00:13:34,850 --> 00:13:43,069
already exists after we did the setup

00:13:38,120 --> 00:13:46,129
networks so basically all the three

00:13:43,069 --> 00:13:48,019
first points like defining the logical

00:13:46,129 --> 00:13:50,420
network setting it up on a specific

00:13:48,019 --> 00:13:52,069
hypervisor and defining the Vinick

00:13:50,420 --> 00:13:55,069
profile is a part of the general setup

00:13:52,069 --> 00:13:57,439
and it is done once in a while very long

00:13:55,069 --> 00:14:00,649
time but eventually when you write when

00:13:57,439 --> 00:14:03,829
you create a virtual machine and you

00:14:00,649 --> 00:14:05,149
decide you create the Vinick then you

00:14:03,829 --> 00:14:07,339
associate the Vinick with the

00:14:05,149 --> 00:14:10,040
appropriate Vinick profile which you

00:14:07,339 --> 00:14:13,009
defined earlier and then on execution

00:14:10,040 --> 00:14:19,689
this VM is immediately associated to the

00:14:13,009 --> 00:14:22,759
logical network so this is a bit a bit

00:14:19,689 --> 00:14:24,980
of an overview what is a logical Network

00:14:22,759 --> 00:14:27,199
so a logical Network here is displayed

00:14:24,980 --> 00:14:29,480
as a part of the cluster because all the

00:14:27,199 --> 00:14:31,850
hosting the cluster in overt all the

00:14:29,480 --> 00:14:34,639
hosts in the cluster share the same type

00:14:31,850 --> 00:14:37,579
of networks same networks exactly that's

00:14:34,639 --> 00:14:40,850
enable us to do migration within the

00:14:37,579 --> 00:14:42,709
cluster so we see the hypervisor it's

00:14:40,850 --> 00:14:45,680
kind of a logical network across the

00:14:42,709 --> 00:14:47,360
cluster of the same network and on top

00:14:45,680 --> 00:14:50,990
of that we have virtual machines and

00:14:47,360 --> 00:14:56,439
that enables us to migrate between those

00:14:50,990 --> 00:15:01,069
virtual machines a little bit more about

00:14:56,439 --> 00:15:04,069
set up networks just to make everyone

00:15:01,069 --> 00:15:06,079
understand what it is so in this image

00:15:04,069 --> 00:15:09,800
what we can see the setup networks takes

00:15:06,079 --> 00:15:12,139
care of configuring the entire network

00:15:09,800 --> 00:15:15,499
configuration of the hypervisor and this

00:15:12,139 --> 00:15:18,439
is done once in a while it's not done on

00:15:15,499 --> 00:15:20,360
a setup when you change things on the

00:15:18,439 --> 00:15:22,370
cluster or you want to change some

00:15:20,360 --> 00:15:24,399
Network configure it for configurations

00:15:22,370 --> 00:15:26,630
which are considered quite where and

00:15:24,399 --> 00:15:29,060
this is done

00:15:26,630 --> 00:15:30,650
we will see later on while they're on

00:15:29,060 --> 00:15:32,750
the right side you can see the Vinick

00:15:30,650 --> 00:15:36,500
which is assaulted associated to the vm

00:15:32,750 --> 00:15:38,900
and this is actually executed on the it

00:15:36,500 --> 00:15:43,310
is actually applied on the execution of

00:15:38,900 --> 00:15:46,550
the vm so on the execution of the vm we

00:15:43,310 --> 00:15:54,050
actually attach the Vinick to the right

00:15:46,550 --> 00:15:56,630
network now I have showed them of this

00:15:54,050 --> 00:15:59,420
exactly flow just to get a full

00:15:56,630 --> 00:16:02,780
understanding of what what we can see

00:15:59,420 --> 00:16:05,450
here is we can see creation of a new

00:16:02,780 --> 00:16:07,910
network it has nothing to do with this

00:16:05,450 --> 00:16:11,060
érovir right now it's simple creation we

00:16:07,910 --> 00:16:13,760
create a network we define which cluster

00:16:11,060 --> 00:16:16,670
it's optional or required and then once

00:16:13,760 --> 00:16:18,860
the network is created you can see that

00:16:16,670 --> 00:16:21,980
there is a Vinick profile underneath

00:16:18,860 --> 00:16:24,580
that is created and this vinegar profile

00:16:21,980 --> 00:16:26,990
has a name you can see it here it has

00:16:24,580 --> 00:16:29,450
specifications that you can add quality

00:16:26,990 --> 00:16:33,530
of service now you go to the host and

00:16:29,450 --> 00:16:34,970
once you go to the host you open this

00:16:33,530 --> 00:16:37,130
dialog which is about setting the

00:16:34,970 --> 00:16:40,700
network you drag the network you have

00:16:37,130 --> 00:16:42,500
defined to a specific Nick that you

00:16:40,700 --> 00:16:44,660
already have on the host and you have it

00:16:42,500 --> 00:16:48,200
visible now when you click at this point

00:16:44,660 --> 00:16:50,000
it runs set up networks so does this

00:16:48,200 --> 00:16:52,160
network actually exist on this

00:16:50,000 --> 00:16:56,960
hypervisor now you go to a virtual

00:16:52,160 --> 00:17:00,130
machine you added which Vinick and when

00:16:56,960 --> 00:17:03,320
you add the Vinick you simply define the

00:17:00,130 --> 00:17:05,480
Vinick profile you would like to use now

00:17:03,320 --> 00:17:08,089
I chose the Vinick profile that was

00:17:05,480 --> 00:17:10,280
created earlier and then all you need to

00:17:08,089 --> 00:17:16,459
do is simply run the VM and everything

00:17:10,280 --> 00:17:18,829
will be connected all together so you

00:17:16,459 --> 00:17:25,640
will see soon see that the vm is up and

00:17:18,829 --> 00:17:29,030
it's running and it has networks so so

00:17:25,640 --> 00:17:32,390
far we've covered SRV basics and overt

00:17:29,030 --> 00:17:36,050
network basics and now we will approach

00:17:32,390 --> 00:17:39,830
the main subject which is over it SRV

00:17:36,050 --> 00:17:43,250
implementation ok the problem

00:17:39,830 --> 00:17:46,610
SRV is hard work and we're talking

00:17:43,250 --> 00:17:49,909
logical network and hardware in Hardware

00:17:46,610 --> 00:17:52,940
logical network doesn't fly doesn't is

00:17:49,909 --> 00:17:54,919
not connected hard Wiz hardware so how

00:17:52,940 --> 00:17:58,490
can we define a logical network on top

00:17:54,919 --> 00:18:01,039
of a harder because if we can then we

00:17:58,490 --> 00:18:02,480
cannot associate the Vinick to a logical

00:18:01,039 --> 00:18:05,090
Network which is the standard

00:18:02,480 --> 00:18:08,690
approaching overt so the solution and

00:18:05,090 --> 00:18:11,240
will touch it in deep later on in

00:18:08,690 --> 00:18:14,299
advance we define the list of Nate when

00:18:11,240 --> 00:18:16,880
we identify an SRV device we define

00:18:14,299 --> 00:18:19,490
ahead of time the list of networks that

00:18:16,880 --> 00:18:21,950
can actually live on the physical layer

00:18:19,490 --> 00:18:24,559
for example you hook the server to a

00:18:21,950 --> 00:18:27,740
switch the switch you define a trunk

00:18:24,559 --> 00:18:32,450
with several villains and then on those

00:18:27,740 --> 00:18:35,330
video when you hook this port to the SRV

00:18:32,450 --> 00:18:38,659
device eventually you can support

00:18:35,330 --> 00:18:41,750
multiple networks so we define those set

00:18:38,659 --> 00:18:44,059
of networks ahead of time and in

00:18:41,750 --> 00:18:46,970
addition so once we did that we know on

00:18:44,059 --> 00:18:49,100
execution that this physical device can

00:18:46,970 --> 00:18:53,149
support this network in addition we are

00:18:49,100 --> 00:18:55,610
added to the Vinick profile the specific

00:18:53,149 --> 00:18:57,649
attribute to say this should be password

00:18:55,610 --> 00:18:58,909
which means that once it's passed

00:18:57,649 --> 00:19:01,220
through then the connection of the

00:18:58,909 --> 00:19:03,980
entire virtual function to the virtual

00:19:01,220 --> 00:19:05,659
machine is done on the fly on the vm

00:19:03,980 --> 00:19:08,510
execution at the same time without

00:19:05,659 --> 00:19:12,350
having a real logical network on the

00:19:08,510 --> 00:19:14,450
hypervisor so how does it look like so

00:19:12,350 --> 00:19:20,690
here what we can see we can see that we

00:19:14,450 --> 00:19:24,139
have two devices which are actually SRV

00:19:20,690 --> 00:19:26,210
devices you can see the icon SRV and we

00:19:24,139 --> 00:19:29,960
can do we can treat it as a physical

00:19:26,210 --> 00:19:33,470
device by itself but once we click the

00:19:29,960 --> 00:19:36,289
Edit for this physical device we will

00:19:33,470 --> 00:19:38,929
have additional dialogue which actually

00:19:36,289 --> 00:19:41,630
on the top level you can see we can set

00:19:38,929 --> 00:19:43,669
up the number of virtual functions which

00:19:41,630 --> 00:19:46,610
means that at this point if you click ok

00:19:43,669 --> 00:19:49,909
and you set the virtual number change

00:19:46,610 --> 00:19:52,010
the number of physical function the

00:19:49,909 --> 00:19:53,549
engine will actually asked the video

00:19:52,010 --> 00:19:55,649
same on the host to

00:19:53,549 --> 00:19:59,279
figure it and persisted accordingly so

00:19:55,649 --> 00:20:01,830
it will survive reboot in addition to

00:19:59,279 --> 00:20:04,409
that this is the place where I define

00:20:01,830 --> 00:20:07,559
exactly the list of networks that this

00:20:04,409 --> 00:20:10,230
physical layer can support you can do it

00:20:07,559 --> 00:20:12,450
in various ways like you can say I

00:20:10,230 --> 00:20:14,369
support all networks on this cluster I

00:20:12,450 --> 00:20:17,940
can choose specific networks from this

00:20:14,369 --> 00:20:21,059
cluster to actually say this is only

00:20:17,940 --> 00:20:23,489
partial a subset of the networking

00:20:21,059 --> 00:20:27,840
networks in this cluster or you can use

00:20:23,489 --> 00:20:30,480
labels as apart labels are defined and

00:20:27,840 --> 00:20:33,600
thus data center level but this is not

00:20:30,480 --> 00:20:35,899
the issue for of this presentation is a

00:20:33,600 --> 00:20:35,899
question

00:20:43,080 --> 00:20:54,370
because it's a physical device whether

00:20:52,480 --> 00:20:57,310
it's working or not ascetics challenge

00:20:54,370 --> 00:21:09,190
and if you want to support migration

00:20:57,310 --> 00:21:13,000
will miss me the same on follow me no it

00:21:09,190 --> 00:21:15,790
has not as I you can you can have

00:21:13,000 --> 00:21:17,950
several networks all networks or part of

00:21:15,790 --> 00:21:19,720
the network's you we can in future

00:21:17,950 --> 00:21:22,410
currently we don't have it but we can

00:21:19,720 --> 00:21:24,490
support like if you have a survey

00:21:22,410 --> 00:21:26,290
virtual function available for this

00:21:24,490 --> 00:21:38,140
virtual machine allocate if not then use

00:21:26,290 --> 00:21:42,340
the standard network so it's I hope so

00:21:38,140 --> 00:21:45,010
once you do that required once and the

00:21:42,340 --> 00:21:49,540
most will be basically operation right

00:21:45,010 --> 00:21:52,480
if they're good point good point it's a

00:21:49,540 --> 00:21:56,550
good point it's a good point currently

00:21:52,480 --> 00:22:03,580
we support this part as only for

00:21:56,550 --> 00:22:06,670
optional networks any other questions ok

00:22:03,580 --> 00:22:10,750
so what we again when we when we add it

00:22:06,670 --> 00:22:12,670
this SRV device and we choose to change

00:22:10,750 --> 00:22:15,850
the amount of virtual functions and

00:22:12,670 --> 00:22:18,370
define all the other association and

00:22:15,850 --> 00:22:20,260
click OK at this point there is a

00:22:18,370 --> 00:22:23,350
specific API to set everything on video

00:22:20,260 --> 00:22:26,980
sam on the host hypervisor to make it

00:22:23,350 --> 00:22:28,990
happen this is actually the Vinick

00:22:26,980 --> 00:22:31,030
profile vm interface profile that i

00:22:28,990 --> 00:22:33,520
talked about so we have here another

00:22:31,030 --> 00:22:37,120
check box to say this is a pass-through

00:22:33,520 --> 00:22:38,860
device and once you set that as a

00:22:37,120 --> 00:22:42,400
pass-through device all you need to do

00:22:38,860 --> 00:22:45,580
when you edit Vinick then all you need

00:22:42,400 --> 00:22:50,440
to do is simply define what profile you

00:22:45,580 --> 00:22:52,900
are using and define the type of device

00:22:50,440 --> 00:22:55,190
and in this case we added a specific

00:22:52,900 --> 00:22:57,800
device specific type which

00:22:55,190 --> 00:23:00,710
is called pci pass through and once

00:22:57,800 --> 00:23:03,800
you're done you've done that i have

00:23:00,710 --> 00:23:06,530
additional demo here so what we will see

00:23:03,800 --> 00:23:08,930
here is we have a Davidic 45 we defined

00:23:06,530 --> 00:23:11,780
earlier now we will change it to be a

00:23:08,930 --> 00:23:15,260
pass through device we will simply name

00:23:11,780 --> 00:23:18,230
it differently and we will click the

00:23:15,260 --> 00:23:20,660
pass through device and we're just about

00:23:18,230 --> 00:23:23,720
it and that's it now we go to the host

00:23:20,660 --> 00:23:27,950
and on the host as you see as you saw

00:23:23,720 --> 00:23:31,430
earlier we have SRV devices and we

00:23:27,950 --> 00:23:33,020
simply edit the host you see I will not

00:23:31,430 --> 00:23:35,210
I did not change you the number of

00:23:33,020 --> 00:23:39,160
virtual functions but I can associate

00:23:35,210 --> 00:23:41,920
the same network I defined earlier as

00:23:39,160 --> 00:23:47,180
available on this SRV device and

00:23:41,920 --> 00:23:49,280
eventually i click ok and what i will do

00:23:47,180 --> 00:24:00,110
later on i will go to the virtual

00:23:49,280 --> 00:24:03,950
machine open the Vinick itself in here I

00:24:00,110 --> 00:24:07,220
will give it I will change the Vinick

00:24:03,950 --> 00:24:10,790
profile to us to be associated with the

00:24:07,220 --> 00:24:13,850
pass through a profile that I defined in

00:24:10,790 --> 00:24:16,190
addition i define the type as PCI pass

00:24:13,850 --> 00:24:20,260
through click OK and then I can simply

00:24:16,190 --> 00:24:25,400
run this virtual machine and it comes up

00:24:20,260 --> 00:24:31,340
anywhere that is supports this SRV by

00:24:25,400 --> 00:24:33,680
hard work so what other capabilities so

00:24:31,340 --> 00:24:36,910
we actually make sure to configure and

00:24:33,680 --> 00:24:39,560
persist the virtual functions manage

00:24:36,910 --> 00:24:41,360
physical functions connectivity

00:24:39,560 --> 00:24:44,770
whitelist which is the predefined list

00:24:41,360 --> 00:24:47,450
of networks that we support scheduling

00:24:44,770 --> 00:24:49,340
scheduling is the biggest part so we

00:24:47,450 --> 00:24:51,560
don't need to worry about scheduling so

00:24:49,340 --> 00:24:54,110
what happens when you run a vm with such

00:24:51,560 --> 00:24:56,290
a profile it will check all the

00:24:54,110 --> 00:24:58,640
available hypervisor with this specific

00:24:56,290 --> 00:25:00,590
configuration and that has available

00:24:58,640 --> 00:25:03,890
virtual function and it will allocate

00:25:00,590 --> 00:25:06,710
this machine on that specific host of

00:25:03,890 --> 00:25:08,650
course this is a part of the support

00:25:06,710 --> 00:25:10,990
with SRV it's setting the villain

00:25:08,650 --> 00:25:14,050
mark address everything on the virtual

00:25:10,990 --> 00:25:19,180
function itself so it will enjoy the

00:25:14,050 --> 00:25:21,130
same connectivity good point it's a part

00:25:19,180 --> 00:25:27,250
of the future work I will touch it in

00:25:21,130 --> 00:25:29,710
one of the last slide next ok I will

00:25:27,250 --> 00:25:31,690
answer it later ok what is a mixed mode

00:25:29,710 --> 00:25:33,880
mixed mode is actually having the

00:25:31,690 --> 00:25:37,840
ability to define on the physical

00:25:33,880 --> 00:25:39,670
function standard vm network or whatever

00:25:37,840 --> 00:25:42,310
Network we choose we can bring at a

00:25:39,670 --> 00:25:44,920
bridge on that and still enjoy the

00:25:42,310 --> 00:25:49,540
virtual function and the connectivity to

00:25:44,920 --> 00:25:51,430
those networks we define the blast that

00:25:49,540 --> 00:25:53,620
the additional capability is specifying

00:25:51,430 --> 00:25:57,700
boot order but this is standard in a qm

00:25:53,620 --> 00:26:00,240
you ok future capabilities that we plan

00:25:57,700 --> 00:26:04,870
currently we don't have hot plug unplug

00:26:00,240 --> 00:26:08,020
for a pci pass through devices this is

00:26:04,870 --> 00:26:10,030
supported by kvm libert still didn't

00:26:08,020 --> 00:26:12,660
make it to 36 probably will make it to

00:26:10,030 --> 00:26:15,700
the next version this is a necessary

00:26:12,660 --> 00:26:19,480
building block to an able live migration

00:26:15,700 --> 00:26:20,620
there is a talk later on about SI o VN

00:26:19,480 --> 00:26:23,440
live migration there are several

00:26:20,620 --> 00:26:26,080
approaches to support that we actually

00:26:23,440 --> 00:26:30,520
discussed it with the guys from q mu and

00:26:26,080 --> 00:26:33,310
libert the idea is to have two devices 1

00:26:30,520 --> 00:26:35,890
vo thi o device and one virtual function

00:26:33,310 --> 00:26:40,660
associated into the guest and teamed

00:26:35,890 --> 00:26:42,670
together it's steaming is a new it's

00:26:40,660 --> 00:26:45,730
slightly different but it's very much

00:26:42,670 --> 00:26:48,940
equivalent to bonding slightly different

00:26:45,730 --> 00:26:51,970
and then once you want to migrate you

00:26:48,940 --> 00:26:54,550
simply hot plug odd unplug the virtual

00:26:51,970 --> 00:26:59,620
function migrate the vm the vm still

00:26:54,550 --> 00:27:04,480
enjoys the video network and then post

00:26:59,620 --> 00:27:06,850
the migration it actually hoop hot plug

00:27:04,480 --> 00:27:09,640
the virtual function back to the virtual

00:27:06,850 --> 00:27:12,640
machine and you have back the support

00:27:09,640 --> 00:27:15,700
for SRV this is the general idea it's

00:27:12,640 --> 00:27:18,280
not it didn't happen yet probably happen

00:27:15,700 --> 00:27:20,710
in the next version and a post to mystic

00:27:18,280 --> 00:27:22,119
pass through Vinick exactly what you

00:27:20,710 --> 00:27:26,769
mentioned earlier it

00:27:22,119 --> 00:27:29,019
if I have a virtual function use it if I

00:27:26,769 --> 00:27:32,469
don't then use the standard bridge it's

00:27:29,019 --> 00:27:35,339
still not implemented will be

00:27:32,469 --> 00:27:39,039
implemented probably for next version

00:27:35,339 --> 00:27:41,499
what is missing VF missing functionality

00:27:39,039 --> 00:27:44,319
means MTU you need to configure it

00:27:41,499 --> 00:27:48,129
through the guest because now the guest

00:27:44,319 --> 00:27:51,819
control it and the qos qsr support it

00:27:48,129 --> 00:27:55,209
was introduced in the three-dot 6 and it

00:27:51,819 --> 00:28:01,059
is still not supported on this on SI of

00:27:55,209 --> 00:28:05,499
it okay how do I issues it's the last

00:28:01,059 --> 00:28:09,059
slide so I know I'm a bit ahead of that

00:28:05,499 --> 00:28:14,529
I stole a bit a few minutes from you

00:28:09,059 --> 00:28:17,469
okay so well the great story about the

00:28:14,529 --> 00:28:21,249
SRV is that it's there the specification

00:28:17,469 --> 00:28:22,899
is there but with our testing and during

00:28:21,249 --> 00:28:26,409
development cycles we encountered so

00:28:22,899 --> 00:28:29,829
many issues on the hardware level

00:28:26,409 --> 00:28:34,389
support like we I try to enumerate some

00:28:29,829 --> 00:28:36,159
of the things so some hardware sees all

00:28:34,389 --> 00:28:39,489
the virtual functions under the same

00:28:36,159 --> 00:28:41,079
iommu group which means that you don't

00:28:39,489 --> 00:28:45,159
have real separation between virtual

00:28:41,079 --> 00:28:51,689
machines some have all kinds of weird

00:28:45,159 --> 00:28:55,419
errors about the errors about the bus

00:28:51,689 --> 00:28:57,969
allocation and so on so the kernel

00:28:55,419 --> 00:28:59,889
developers came up with some hacks and

00:28:57,969 --> 00:29:02,459
tricks to overcome some of the issues

00:28:59,889 --> 00:29:04,629
but not all the hardware out there is

00:29:02,459 --> 00:29:06,459
good enough for the colonel so only

00:29:04,629 --> 00:29:08,469
what's supported but what is supported

00:29:06,459 --> 00:29:12,099
by the kernel officially and tested

00:29:08,469 --> 00:29:14,439
whether tests and support specific list

00:29:12,099 --> 00:29:18,279
of SLV devices and this is what we

00:29:14,439 --> 00:29:20,679
support so it's not that every SRV

00:29:18,279 --> 00:29:22,209
device is supported so it's a narrowed

00:29:20,679 --> 00:29:28,289
list and there are some hacks to be

00:29:22,209 --> 00:29:28,289
aware of questions

00:29:32,360 --> 00:29:42,429

YouTube URL: https://www.youtube.com/watch?v=o4mwoatSyF8


