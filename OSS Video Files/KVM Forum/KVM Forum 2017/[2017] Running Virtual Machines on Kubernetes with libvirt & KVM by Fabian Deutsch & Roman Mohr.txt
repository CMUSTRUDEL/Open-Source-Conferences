Title: [2017] Running Virtual Machines on Kubernetes with libvirt & KVM by Fabian Deutsch & Roman Mohr
Publication date: 2017-11-08
Playlist: KVM Forum 2017
Description: 
	Libvirt has long provided the standard API for managing virtual machines on individual hosts. It has delegated the task of managing clusters of hosts to higher level applications like OpenSack, oVirt, or Proxmox, just to name just a few. Despite their differences, these applications have a lot of infrastructure needs in common and as a result have often re-invented the same solutions to problems.

In this talk we are going to look at how to leverage libvirt and KVM to enable general purpose management of virtual machines with Kubernetes. It will show how the Kubernetes platform can be used to support application container, data center virtualization and cloud virtualization use cases from a single application & API. At a technical level it will examine some of the challenges integrating virtual machines with the Kubernetes architecture.

---

Fabian Deutsch
Red Hat, Inc.

Fabian Deutsch is working at Red Hat and used to be much more active in the Fedora community as he is today, worked on the oVirt project for a few years, and is now involved in KubeVirt.
In the past he had the opportunity to speak at several conferences (KubeCon EU, oVirt workshops, FrOsCon, and devconf.cz).

Roman Mohr
Red Hat
Passau Area, Germany

Roman Mohr is Senior Software Developer at Red Hat. There he works on topics around VMs, containers and quality of service efforts in oVirt. He is involved in various Open Source projects around containers, VMs, Fedora and Continuous Integration. Lately he spends most of his time on KubeVirt.
Captions: 
	00:00:00,390 --> 00:00:02,709
[Music]

00:00:05,750 --> 00:00:17,130
so good morning nice to see all of you I

00:00:10,250 --> 00:00:19,320
hear they're good talks going on so we

00:00:17,130 --> 00:00:21,630
would like to start to speak about our

00:00:19,320 --> 00:00:26,099
topic which is running virtual machines

00:00:21,630 --> 00:00:27,960
on kubernetes with deliberate and KVM so

00:00:26,099 --> 00:00:30,630
before we start let me introduce myself

00:00:27,960 --> 00:00:32,460
so my name is Fabian Deutsch I'm I

00:00:30,630 --> 00:00:34,230
started off with fedora and a few other

00:00:32,460 --> 00:00:37,140
Linux distributions quite a few years

00:00:34,230 --> 00:00:39,540
ago and I'm now working for Red Hat on

00:00:37,140 --> 00:00:45,390
virtualization in in overt and now a

00:00:39,540 --> 00:00:46,500
Qbert and yeah and yeah I contributed

00:00:45,390 --> 00:00:48,600
more or less than many open-source

00:00:46,500 --> 00:00:51,090
project and I'm working for the last

00:00:48,600 --> 00:00:53,670
years on overt and also switched over to

00:00:51,090 --> 00:00:58,199
keep her to bring virtual machines

00:00:53,670 --> 00:01:01,109
Tiffany's right so let's dive into it

00:00:58,199 --> 00:01:03,030
so we are looking to run virtual

00:01:01,109 --> 00:01:05,510
machines on communities but why the heck

00:01:03,030 --> 00:01:05,510
would we do that

00:01:05,570 --> 00:01:09,360
anybody who knows kubernetes knows that

00:01:07,830 --> 00:01:11,220
it's not so much intended for running

00:01:09,360 --> 00:01:12,060
virtual machines right now but why are

00:01:11,220 --> 00:01:14,100
we looking at that

00:01:12,060 --> 00:01:15,840
so virtualization is here today and has

00:01:14,100 --> 00:01:17,430
been here for quite a while for many

00:01:15,840 --> 00:01:19,200
years we are all here because we

00:01:17,430 --> 00:01:21,570
optimize virtualization in the recent

00:01:19,200 --> 00:01:23,159
years to be running very good in our

00:01:21,570 --> 00:01:26,369
private scale you know it's a small

00:01:23,159 --> 00:01:29,100
scale on our laptop or in our left home

00:01:26,369 --> 00:01:30,869
or in universities or at the broader

00:01:29,100 --> 00:01:33,600
scale in the public cloud and private

00:01:30,869 --> 00:01:36,299
clouds so virtualization is here and has

00:01:33,600 --> 00:01:38,640
a lot of users so there's a lot of a lot

00:01:36,299 --> 00:01:40,920
of applications are are created to be

00:01:38,640 --> 00:01:42,540
working optimized in virtual machines a

00:01:40,920 --> 00:01:45,630
lot of stuff is there optimized for

00:01:42,540 --> 00:01:47,670
virtualization but as we know containers

00:01:45,630 --> 00:01:49,770
are coming up as well so containers is

00:01:47,670 --> 00:01:52,140
that buzz word which docker and we

00:01:49,770 --> 00:01:54,390
really recognize them to have brought

00:01:52,140 --> 00:01:55,439
containers up to to usable state so

00:01:54,390 --> 00:01:58,439
containers

00:01:55,439 --> 00:02:01,020
you know they look taste and smell the

00:01:58,439 --> 00:02:03,149
same light like VM is just so much

00:02:01,020 --> 00:02:04,740
better than VMs so they will actually

00:02:03,149 --> 00:02:06,090
solve everything all the problems we

00:02:04,740 --> 00:02:07,310
have a virtual machines they're more

00:02:06,090 --> 00:02:09,540
efficient they have

00:02:07,310 --> 00:02:11,880
versatile they are scalable you can put

00:02:09,540 --> 00:02:14,970
more containers on a single post than

00:02:11,880 --> 00:02:17,460
VMS eventually they're community driven

00:02:14,970 --> 00:02:19,290
and they're supporting DevOps so they're

00:02:17,460 --> 00:02:21,660
just so good you know what why do you

00:02:19,290 --> 00:02:24,030
need to be MC anyway but you know take

00:02:21,660 --> 00:02:26,010
that with a grain of salt I mean here we

00:02:24,030 --> 00:02:29,340
we all know that there are technically

00:02:26,010 --> 00:02:31,620
different but as a user or even as an

00:02:29,340 --> 00:02:33,420
admin you might ask yourself how do we

00:02:31,620 --> 00:02:35,520
get there how do we get to that brand

00:02:33,420 --> 00:02:37,110
new landscape where containers are all

00:02:35,520 --> 00:02:39,180
over the place and where there are so

00:02:37,110 --> 00:02:41,100
many fancy tools which we can use I mean

00:02:39,180 --> 00:02:43,050
it's not containers themselves which are

00:02:41,100 --> 00:02:46,410
there but also a lot of supporting

00:02:43,050 --> 00:02:48,560
tooling so you've got a range of

00:02:46,410 --> 00:02:50,970
projects which are there to support

00:02:48,560 --> 00:02:55,080
monitoring of containers deploying

00:02:50,970 --> 00:02:57,360
containers updating containers doing all

00:02:55,080 --> 00:02:59,430
that kind of lock Eric aggregation and

00:02:57,360 --> 00:03:02,190
lock collection across containers so

00:02:59,430 --> 00:03:04,170
they're moving a little bit up the stack

00:03:02,190 --> 00:03:05,700
so on the in the virtualization world we

00:03:04,170 --> 00:03:07,410
are pretty much on that operating system

00:03:05,700 --> 00:03:08,940
level and they're moving up the stack to

00:03:07,410 --> 00:03:11,459
the application level and try to do all

00:03:08,940 --> 00:03:13,709
kinds of nifty stuff there which can be

00:03:11,459 --> 00:03:16,709
efficient because it helps you to yeah

00:03:13,709 --> 00:03:19,709
get a bit and get a better insight of of

00:03:16,709 --> 00:03:21,209
what is happening on your cluster so at

00:03:19,709 --> 00:03:23,070
some point you might ask yourself or

00:03:21,209 --> 00:03:25,950
users asking themselves actually today

00:03:23,070 --> 00:03:28,110
how can it replace my VM with containers

00:03:25,950 --> 00:03:29,790
I want to replace all my VMs because

00:03:28,110 --> 00:03:32,430
they're just so good and and there's no

00:03:29,790 --> 00:03:36,450
mobi and and rocket so all these fancy

00:03:32,430 --> 00:03:37,950
names so what can I do before you can

00:03:36,450 --> 00:03:41,040
answer that you actually need to see or

00:03:37,950 --> 00:03:42,780
I just want to highlight that we should

00:03:41,040 --> 00:03:45,810
ask ourselves are containers really a

00:03:42,780 --> 00:03:47,850
substitute for VMs and you need to

00:03:45,810 --> 00:03:50,100
consider that that I mean in the end

00:03:47,850 --> 00:03:51,930
it's a feature set but there are many

00:03:50,100 --> 00:03:54,360
many small differences between

00:03:51,930 --> 00:03:56,130
containers and VMs so they speak about

00:03:54,360 --> 00:03:58,230
isolation but containers as you know

00:03:56,130 --> 00:03:59,550
probably are based on C groups and

00:03:58,230 --> 00:04:01,950
namespaces which gives you different

00:03:59,550 --> 00:04:04,050
guarantee than the virtualization we

00:04:01,950 --> 00:04:07,440
then in the virtualization world if we

00:04:04,050 --> 00:04:09,230
speak of isolation there are approaches

00:04:07,440 --> 00:04:12,120
in the container world to leverage

00:04:09,230 --> 00:04:14,329
virtualization for isolation as well so

00:04:12,120 --> 00:04:18,660
you really need to look at your specific

00:04:14,329 --> 00:04:20,220
you know workload and requirements of

00:04:18,660 --> 00:04:20,519
the application you're running inside

00:04:20,220 --> 00:04:22,919
you

00:04:20,519 --> 00:04:25,860
today to understand if you can move it

00:04:22,919 --> 00:04:28,590
over to container it's it's not so

00:04:25,860 --> 00:04:30,840
straightforward so in the end it can be

00:04:28,590 --> 00:04:35,669
working that it cannot be it really

00:04:30,840 --> 00:04:37,199
depends on your workload but if you get

00:04:35,669 --> 00:04:39,660
into that situation and then ask

00:04:37,199 --> 00:04:41,880
yourself so now I've got my specific VM

00:04:39,660 --> 00:04:43,710
here I've got my 20 VMs my thousand VMs

00:04:41,880 --> 00:04:45,810
and I want to migrate them over because

00:04:43,710 --> 00:04:47,099
there is this container world there are

00:04:45,810 --> 00:04:50,639
container systems container management

00:04:47,099 --> 00:04:52,080
systems they are lean they are good to

00:04:50,639 --> 00:04:54,090
manage they integrate well with my

00:04:52,080 --> 00:04:55,979
monitoring and logging tools so I want

00:04:54,090 --> 00:04:58,979
to see that I moved some of my my VMs

00:04:55,979 --> 00:05:02,150
over so if you can do that if your app

00:04:58,979 --> 00:05:05,520
is really where your workload is really

00:05:02,150 --> 00:05:07,289
well well optimized or not well

00:05:05,520 --> 00:05:09,030
optimized but rather well well-suited to

00:05:07,289 --> 00:05:11,550
be moved over to containers then that's

00:05:09,030 --> 00:05:13,139
really cool go ahead and do it but in

00:05:11,550 --> 00:05:15,210
reality as said we've got a lot of

00:05:13,139 --> 00:05:17,430
legacy or not legacy applications but

00:05:15,210 --> 00:05:20,130
classical application monoliths which

00:05:17,430 --> 00:05:22,020
were built over the last decades to fit

00:05:20,130 --> 00:05:23,849
into our virtualization world and what's

00:05:22,020 --> 00:05:25,740
with them can you move them over if

00:05:23,849 --> 00:05:28,050
they're depending on a specific virtual

00:05:25,740 --> 00:05:30,090
hardware if they are tuned towards

00:05:28,050 --> 00:05:31,979
specific properties of the

00:05:30,090 --> 00:05:33,990
virtualization environment then you

00:05:31,979 --> 00:05:35,880
might say oh I can't move them right now

00:05:33,990 --> 00:05:38,490
I need some more time to to modify my

00:05:35,880 --> 00:05:41,820
application to be able to move over to

00:05:38,490 --> 00:05:45,780
that other world or sometimes you say I

00:05:41,820 --> 00:05:48,060
don't even want to move my workload in

00:05:45,780 --> 00:05:49,800
reality you probably have both so you

00:05:48,060 --> 00:05:51,780
have some Williams which you can replace

00:05:49,800 --> 00:05:53,759
right away like your web server your

00:05:51,780 --> 00:05:55,500
Engineering's instance we have tens of

00:05:53,759 --> 00:05:59,280
thousands and Jing's instances you have

00:05:55,500 --> 00:06:00,810
but there are others like VDI setups we

00:05:59,280 --> 00:06:05,990
cannot just replace a VM with a

00:06:00,810 --> 00:06:08,400
container so in the case that you can

00:06:05,990 --> 00:06:11,099
move your workload from a container to

00:06:08,400 --> 00:06:12,960
from VM to a container you're looking

00:06:11,099 --> 00:06:14,849
for migration path so we all know it's

00:06:12,960 --> 00:06:16,139
not like the snip of a finger to get it

00:06:14,849 --> 00:06:17,729
from the VM to container but you're

00:06:16,139 --> 00:06:19,800
rather need to see ok I've got my

00:06:17,729 --> 00:06:22,620
production workload and I'm now want to

00:06:19,800 --> 00:06:25,380
really take it serious I did my PLC I

00:06:22,620 --> 00:06:28,169
did my private set up but how do I not

00:06:25,380 --> 00:06:30,870
get my my production setup my production

00:06:28,169 --> 00:06:32,009
VM into into a container so I need a

00:06:30,870 --> 00:06:34,949
migration path need

00:06:32,009 --> 00:06:38,069
how do I do that and in the end if you

00:06:34,949 --> 00:06:39,419
say if I can't replace my VM then for

00:06:38,069 --> 00:06:42,719
the production case I need to consider

00:06:39,419 --> 00:06:45,089
so right now now I do I need a second

00:06:42,719 --> 00:06:48,180
infrastructure just to run my my my

00:06:45,089 --> 00:06:49,919
containers so I need to keep my

00:06:48,180 --> 00:06:51,659
production ready virtual machine

00:06:49,919 --> 00:06:54,089
infrastructure I need to add a second

00:06:51,659 --> 00:06:56,399
infrastructure set to to support

00:06:54,089 --> 00:06:58,319
containers to the same degree of or in

00:06:56,399 --> 00:07:00,300
the same in the same manner in the same

00:06:58,319 --> 00:07:02,610
production many men are there separate

00:07:00,300 --> 00:07:04,020
ways of how that double infrastructure

00:07:02,610 --> 00:07:05,999
can look you can either put it

00:07:04,020 --> 00:07:06,569
side-by-side or you can stack it on top

00:07:05,999 --> 00:07:08,399
of each other

00:07:06,569 --> 00:07:10,499
I mean OpenStack and kubernetes there's

00:07:08,399 --> 00:07:12,389
a common combination but at least you

00:07:10,499 --> 00:07:16,919
have got to infrastructure layers which

00:07:12,389 --> 00:07:19,199
you need to manage so I said in the end

00:07:16,919 --> 00:07:21,499
you need both virtualization and

00:07:19,199 --> 00:07:24,539
containers probably for quite a while

00:07:21,499 --> 00:07:26,399
and that is what cubed comes in and now

00:07:24,539 --> 00:07:28,589
we get to the point and it will be now a

00:07:26,399 --> 00:07:30,479
bit more specific so cubed is exactly

00:07:28,589 --> 00:07:32,069
about that so cube root is about running

00:07:30,479 --> 00:07:33,869
containers and virtual machines on the

00:07:32,069 --> 00:07:35,789
very same infrastructure so that we

00:07:33,869 --> 00:07:37,589
reduce the burden from the user to

00:07:35,789 --> 00:07:40,199
maintain two separate infrastructure

00:07:37,589 --> 00:07:45,509
sets and we even give the user the

00:07:40,199 --> 00:07:50,939
ability to manage to them on that same

00:07:45,509 --> 00:07:55,019
infrastructure with the same API so how

00:07:50,939 --> 00:07:56,639
does it look it will allow you to use

00:07:55,019 --> 00:07:58,229
the same management plane or it does

00:07:56,639 --> 00:08:00,479
allow you we have it today and we'll get

00:07:58,229 --> 00:08:03,419
into the details in a moment we have the

00:08:00,479 --> 00:08:05,129
management plane which is taking care of

00:08:03,419 --> 00:08:07,649
many of you managing your storage and

00:08:05,129 --> 00:08:09,240
network and even all that other cluster

00:08:07,649 --> 00:08:11,339
aspects like scheduling and resource

00:08:09,240 --> 00:08:13,649
management resource where scheduling

00:08:11,339 --> 00:08:15,059
that kind of stuff and you are you are

00:08:13,649 --> 00:08:17,129
able to run your virtual machines on

00:08:15,059 --> 00:08:18,809
that and then gracefully move over

00:08:17,129 --> 00:08:20,939
containers as you like so you can

00:08:18,809 --> 00:08:22,740
transition parts of it or you can keep

00:08:20,939 --> 00:08:27,240
your VMs in the end if you cannot

00:08:22,740 --> 00:08:30,539
migrate your stuff so tell me more now

00:08:27,240 --> 00:08:32,069
we get really to to how that's done our

00:08:30,539 --> 00:08:34,560
Orchestrator our management layers

00:08:32,069 --> 00:08:36,750
communities so because communities has

00:08:34,560 --> 00:08:38,130
come up in the container world as an

00:08:36,750 --> 00:08:40,110
Orchestrator for containers there are

00:08:38,130 --> 00:08:42,649
others like there's mesos which is a bit

00:08:40,110 --> 00:08:44,600
low level eventually and docker swarm

00:08:42,649 --> 00:08:48,710
which emerged

00:08:44,600 --> 00:08:51,140
now I wouldn't say deprecated about not

00:08:48,710 --> 00:08:53,500
a safe favorable anymore but kubernetes

00:08:51,140 --> 00:08:56,090
at least allows you to use your cluster

00:08:53,500 --> 00:08:58,940
classic resources so storage network our

00:08:56,090 --> 00:09:01,360
classical resources on your cluster and

00:08:58,940 --> 00:09:04,460
cumin allows you to to use them and

00:09:01,360 --> 00:09:06,710
today kubernetes allows you to use those

00:09:04,460 --> 00:09:08,960
class resources with containers but it

00:09:06,710 --> 00:09:14,000
doesn't allows you to to run virtual

00:09:08,960 --> 00:09:16,310
machines on it so as simple as it is you

00:09:14,000 --> 00:09:19,400
just add cuber to that mix and you're

00:09:16,310 --> 00:09:21,490
able to run virtual machines on that

00:09:19,400 --> 00:09:24,950
same infrastructure through the same API

00:09:21,490 --> 00:09:26,330
and now manning over the woman to let

00:09:24,950 --> 00:09:31,580
him say how that really works on the

00:09:26,330 --> 00:09:34,190
detail if you want to use that one I

00:09:31,580 --> 00:09:35,870
think before I start with how we

00:09:34,190 --> 00:09:37,550
integrate the kubernetes is probably a

00:09:35,870 --> 00:09:40,820
good idea for all those peoples with

00:09:37,550 --> 00:09:42,680
people which so far successfully avoided

00:09:40,820 --> 00:09:44,690
kubernetes and openshift

00:09:42,680 --> 00:09:46,610
kubernetes is an open source system for

00:09:44,690 --> 00:09:48,830
automating deployment deploying and

00:09:46,610 --> 00:09:50,630
scaling and managing containerized

00:09:48,830 --> 00:09:53,780
implications with other words you can

00:09:50,630 --> 00:09:58,130
manage your containers on a cluster

00:09:53,780 --> 00:10:00,470
scale and but you're not directly

00:09:58,130 --> 00:10:03,140
managing containers there you are

00:10:00,470 --> 00:10:08,360
actually managing a workload called pod

00:10:03,140 --> 00:10:12,140
and a pod is a sum of containers which

00:10:08,360 --> 00:10:14,990
share storage and network and you have a

00:10:12,140 --> 00:10:18,920
specification which you post to the

00:10:14,990 --> 00:10:20,210
runtime and that 10 kubernetes will do

00:10:18,920 --> 00:10:21,830
the work for you here you have an

00:10:20,210 --> 00:10:23,540
example of a pod definition you have a

00:10:21,830 --> 00:10:25,580
kind which says is it support it's a

00:10:23,540 --> 00:10:27,320
yama manifest you have a media data

00:10:25,580 --> 00:10:29,540
section where you can give the workload

00:10:27,320 --> 00:10:31,580
a name you can add labels to it which

00:10:29,540 --> 00:10:32,900
are useful for identification or from

00:10:31,580 --> 00:10:35,510
scheduling you have a specification

00:10:32,900 --> 00:10:38,150
section where you can describe your

00:10:35,510 --> 00:10:43,760
containers which run in that part you

00:10:38,150 --> 00:10:46,190
have the possibility to specify a select

00:10:43,760 --> 00:10:48,200
selectors for a node placement which is

00:10:46,190 --> 00:10:50,300
useful for the scheduler you have a

00:10:48,200 --> 00:10:52,520
status section which tells you how your

00:10:50,300 --> 00:10:55,480
workload is processing if it's done if

00:10:52,520 --> 00:10:57,670
it's still running all that stuff and so

00:10:55,480 --> 00:11:01,540
whenever you

00:10:57,670 --> 00:11:04,360
talk about Khan yeah whenever you talk

00:11:01,540 --> 00:11:07,750
about containers in communities you

00:11:04,360 --> 00:11:10,360
actually talk about ports now there is

00:11:07,750 --> 00:11:12,610
one interesting thing in communities and

00:11:10,360 --> 00:11:14,380
that's they have on the node layer they

00:11:12,610 --> 00:11:16,590
have on the node level they have their

00:11:14,380 --> 00:11:19,660
demon running with this the cubelet and

00:11:16,590 --> 00:11:20,740
it is kind of a layer in front of

00:11:19,660 --> 00:11:22,390
different container anthem

00:11:20,740 --> 00:11:24,760
implementations there is stalker there

00:11:22,390 --> 00:11:26,680
is rocket and there are some hypervisor

00:11:24,760 --> 00:11:29,050
based runtime implementations like vert

00:11:26,680 --> 00:11:32,410
LED or clear container you can go

00:11:29,050 --> 00:11:33,940
downstairs to the interest booth and ask

00:11:32,410 --> 00:11:38,500
them about containers there are some

00:11:33,940 --> 00:11:41,230
geister and what they do is they they

00:11:38,500 --> 00:11:46,450
take the container anthem specification

00:11:41,230 --> 00:11:48,850
and just start VMs instead of of parts

00:11:46,450 --> 00:11:50,470
in there instead of containers in the

00:11:48,850 --> 00:11:53,950
end to provide a better isolation and

00:11:50,470 --> 00:11:56,770
security and now one could think yeah

00:11:53,950 --> 00:11:58,750
with our general with our approach to

00:11:56,770 --> 00:11:59,920
support generic VMs we could do pretty

00:11:58,750 --> 00:12:01,240
much the same thing we can just

00:11:59,920 --> 00:12:03,760
implement another container anthem

00:12:01,240 --> 00:12:05,940
implementation put all the details about

00:12:03,760 --> 00:12:09,130
the devices into the annotation section

00:12:05,940 --> 00:12:11,950
go to every node roll out our own

00:12:09,130 --> 00:12:14,890
container runtime implementation I have

00:12:11,950 --> 00:12:16,570
have to deal with a few quirks like when

00:12:14,890 --> 00:12:18,700
a migrate of em I finally have two pots

00:12:16,570 --> 00:12:20,410
running at the same time and it's hard

00:12:18,700 --> 00:12:21,880
to see where it's actually my VM really

00:12:20,410 --> 00:12:25,360
running in is a DEP are there is a dead

00:12:21,880 --> 00:12:27,970
pod and of course make sure that you

00:12:25,360 --> 00:12:29,530
really support all parts of what a

00:12:27,970 --> 00:12:32,050
container runtime needs to implement and

00:12:29,530 --> 00:12:33,760
that's actually built to suit the needs

00:12:32,050 --> 00:12:36,580
of containers and not virtual machines

00:12:33,760 --> 00:12:38,890
so it's a hard chase to do that right

00:12:36,580 --> 00:12:40,990
and finally for the user it's really

00:12:38,890 --> 00:12:43,810
hard to see how we're now talking about

00:12:40,990 --> 00:12:47,260
a VM port which is actually the emergent

00:12:43,810 --> 00:12:52,450
or is it a pot pot and so a different

00:12:47,260 --> 00:12:54,370
approach might be to extend the

00:12:52,450 --> 00:12:57,750
communities API and provide a proper

00:12:54,370 --> 00:13:00,850
virtual machine specification which is

00:12:57,750 --> 00:13:03,760
structured in the way pod specification

00:13:00,850 --> 00:13:06,130
would look like but which really allows

00:13:03,760 --> 00:13:08,550
you to express your virtual machine

00:13:06,130 --> 00:13:12,029
needs in a

00:13:08,550 --> 00:13:14,670
I built for expressing them further you

00:13:12,029 --> 00:13:17,100
can say I really wanna run my VM inside

00:13:14,670 --> 00:13:20,430
a part instead of running it instead of

00:13:17,100 --> 00:13:21,930
a part that allows you to really ship on

00:13:20,430 --> 00:13:23,610
top of kubernetes without having to

00:13:21,930 --> 00:13:25,769
modify the host at all so you can really

00:13:23,610 --> 00:13:27,329
just have your set of daemon sets and

00:13:25,769 --> 00:13:29,820
manifests which you roll out in

00:13:27,329 --> 00:13:32,750
communities and you just get the

00:13:29,820 --> 00:13:35,010
virtualization functionality there

00:13:32,750 --> 00:13:39,360
further if you have a real virtual

00:13:35,010 --> 00:13:41,310
machine endpoint you can you can always

00:13:39,360 --> 00:13:42,570
talk to that word to a machine and point

00:13:41,310 --> 00:13:44,040
to see how your virtual machine is

00:13:42,570 --> 00:13:46,230
processing no matter if you need one or

00:13:44,040 --> 00:13:49,140
more parts maybe ten parts to provide

00:13:46,230 --> 00:13:51,120
all the infrastructure to properly feed

00:13:49,140 --> 00:13:53,339
the VM with with everything it needs you

00:13:51,120 --> 00:13:55,050
just have one way em and you can really

00:13:53,339 --> 00:13:57,570
just go there and say that's my VM and

00:13:55,050 --> 00:13:59,220
then go on from there instead of trying

00:13:57,570 --> 00:14:02,459
to chase the right pods to see what's

00:13:59,220 --> 00:14:04,230
going on further when we run the virtual

00:14:02,459 --> 00:14:06,060
would run the virtual machine inside a

00:14:04,230 --> 00:14:09,899
pod we can already leverage the whole

00:14:06,060 --> 00:14:11,970
pod functionality which kubernetes

00:14:09,899 --> 00:14:13,860
provides us instead of having to

00:14:11,970 --> 00:14:16,649
replicate it we can build on top of it

00:14:13,860 --> 00:14:18,570
and finally the user can really talk

00:14:16,649 --> 00:14:20,100
about the aims when he talks about VMS

00:14:18,570 --> 00:14:24,899
on communities and about talks when he

00:14:20,100 --> 00:14:28,560
talks about thoughts on communities so

00:14:24,899 --> 00:14:30,420
when we talk about Qbert we think about

00:14:28,560 --> 00:14:33,959
it as a virtual machine API and

00:14:30,420 --> 00:14:36,300
kubernetes with a runtime for virtual

00:14:33,959 --> 00:14:38,720
machines on top of kubernetes which is

00:14:36,300 --> 00:14:40,860
not a container runtime implementation

00:14:38,720 --> 00:14:43,350
when we look at the details how we're

00:14:40,860 --> 00:14:44,670
doing that internally here it gets more

00:14:43,350 --> 00:14:49,170
interesting right regarding to

00:14:44,670 --> 00:14:51,630
liberating KVM so we have on the on the

00:14:49,170 --> 00:14:53,279
cluster level we have an additional API

00:14:51,630 --> 00:14:56,279
server to the communities API server

00:14:53,279 --> 00:14:58,589
which can be which in the future can

00:14:56,279 --> 00:15:00,630
also be tied into the API server as one

00:14:58,589 --> 00:15:02,160
class citizen with their every gated API

00:15:00,630 --> 00:15:03,630
server concept so it's really a native

00:15:02,160 --> 00:15:07,199
extension to kubernetes Cooney's

00:15:03,630 --> 00:15:09,690
provides the functionality and on the

00:15:07,199 --> 00:15:12,360
and a set of controllers which do all

00:15:09,690 --> 00:15:14,190
the work for us and on the node we just

00:15:12,360 --> 00:15:19,140
have the typical cube root which is the

00:15:14,190 --> 00:15:20,370
kubernetes teaming and inside of parts

00:15:19,140 --> 00:15:22,040
we actually deliver all our

00:15:20,370 --> 00:15:24,529
infrastructure and you have one

00:15:22,040 --> 00:15:28,670
part on every node which delivers

00:15:24,529 --> 00:15:30,680
Liberty with Cuomo and we have in that

00:15:28,670 --> 00:15:35,089
and we have another part which also

00:15:30,680 --> 00:15:37,279
delivers our demon who is more community

00:15:35,089 --> 00:15:41,589
suited to translate between Liberty and

00:15:37,279 --> 00:15:44,600
kubernetes and when we then start a

00:15:41,589 --> 00:15:46,370
virtual machine you just post with two

00:15:44,600 --> 00:15:48,680
machine machine specification to your

00:15:46,370 --> 00:15:50,389
runtime and the controllers make sure

00:15:48,680 --> 00:15:52,100
that you start a part and schedule a

00:15:50,389 --> 00:15:54,980
part for that virtual machine and then

00:15:52,100 --> 00:15:56,990
on the node or it was scheduled with a

00:15:54,980 --> 00:16:02,209
liberal to place the virtual machine as

00:15:56,990 --> 00:16:05,360
an application inside that part and now

00:16:02,209 --> 00:16:07,910
the virtual machine specification itself

00:16:05,360 --> 00:16:11,389
can really be expressed very nicely in

00:16:07,910 --> 00:16:13,579
real communities terms you can just have

00:16:11,389 --> 00:16:15,290
another machine manifest with just a

00:16:13,579 --> 00:16:17,300
kind of virtual machine you can have a

00:16:15,290 --> 00:16:19,370
metadata section again where you can add

00:16:17,300 --> 00:16:23,959
names annotations and everything you can

00:16:19,370 --> 00:16:25,910
have a specification in this case in the

00:16:23,959 --> 00:16:27,170
devices section we just attach a

00:16:25,910 --> 00:16:29,990
persistent volume claim that's a

00:16:27,170 --> 00:16:31,339
specific type of volume in kubernetes to

00:16:29,990 --> 00:16:33,980
the virtual machine but you can also

00:16:31,339 --> 00:16:37,550
pass through liber8 low-level details

00:16:33,980 --> 00:16:39,440
there if needed we can have plus the

00:16:37,550 --> 00:16:42,800
specific stuff there like notes election

00:16:39,440 --> 00:16:44,180
hints for the scheduler and status which

00:16:42,800 --> 00:16:47,319
shows you if you REM is running if it's

00:16:44,180 --> 00:16:50,839
migrating all that kind of stuff and

00:16:47,319 --> 00:16:51,949
that all gives you also the typical cube

00:16:50,839 --> 00:16:54,230
CTL feeling when you're using

00:16:51,949 --> 00:16:56,959
communities when you use parts and

00:16:54,230 --> 00:16:59,209
communities you have to keep C cube CTL

00:16:56,959 --> 00:17:01,100
tool which allows you to create parts

00:16:59,209 --> 00:17:02,930
out of the manifest file you can just

00:17:01,100 --> 00:17:06,350
delete them with the command line you

00:17:02,930 --> 00:17:08,390
can enter the containers which running

00:17:06,350 --> 00:17:10,730
inside the pods remotely will keep by a

00:17:08,390 --> 00:17:12,589
cube city exact and for virtual machines

00:17:10,730 --> 00:17:16,010
we get pretty much for free with a

00:17:12,589 --> 00:17:17,299
little bit of integration work almost

00:17:16,010 --> 00:17:19,040
the same functionality for virtual

00:17:17,299 --> 00:17:20,870
machines we can create virtual machines

00:17:19,040 --> 00:17:23,929
out of manifests we can deliver to

00:17:20,870 --> 00:17:27,110
machines we can access consoles where

00:17:23,929 --> 00:17:29,299
WebSocket there we can we can fetch

00:17:27,110 --> 00:17:32,240
spiced connection details and open or

00:17:29,299 --> 00:17:34,760
spice connections and that all gives a

00:17:32,240 --> 00:17:34,990
really nice feeling regarding to be part

00:17:34,760 --> 00:17:38,140
of

00:17:34,990 --> 00:17:41,740
and and got into reuse of communities

00:17:38,140 --> 00:17:43,929
and there is apart from this basic

00:17:41,740 --> 00:17:47,340
integration there is one is interesting

00:17:43,929 --> 00:17:50,320
additional difference to what parts are

00:17:47,340 --> 00:17:52,330
compared to to virtual machines and that

00:17:50,320 --> 00:17:54,070
that you can create you can migrate

00:17:52,330 --> 00:17:57,640
virtual machines but you can't make

00:17:54,070 --> 00:17:59,110
great migrate parts I've already talked

00:17:57,640 --> 00:18:00,340
about it briefly before that if we would

00:17:59,110 --> 00:18:02,559
migrate a virtual machine people would

00:18:00,340 --> 00:18:05,890
have to schedule two parts since they

00:18:02,559 --> 00:18:08,260
can't migrate themselves and so we came

00:18:05,890 --> 00:18:10,750
up with another migration object in

00:18:08,260 --> 00:18:13,270
communities where you can where you have

00:18:10,750 --> 00:18:15,340
a specification which allows you to to

00:18:13,270 --> 00:18:17,410
influence the target of the migration

00:18:15,340 --> 00:18:19,210
with the node selector here here I'm

00:18:17,410 --> 00:18:23,050
just telling communities with the cube

00:18:19,210 --> 00:18:24,580
root or / hostname node one key value

00:18:23,050 --> 00:18:27,580
pair that I wanted my great novel

00:18:24,580 --> 00:18:29,140
machine to node 1 and with the selector

00:18:27,580 --> 00:18:30,910
can select actual um which is called

00:18:29,140 --> 00:18:32,970
test VM and their ever status again the

00:18:30,910 --> 00:18:35,650
received emigration succeeded or not and

00:18:32,970 --> 00:18:38,220
this migration object in combination

00:18:35,650 --> 00:18:41,440
with the virtual machine object or

00:18:38,220 --> 00:18:43,390
specification provides us the same kind

00:18:41,440 --> 00:18:45,850
of abstraction like with like kubernetes

00:18:43,390 --> 00:18:48,580
provides with pots pots already are the

00:18:45,850 --> 00:18:50,760
atomic workload type in the communities

00:18:48,580 --> 00:18:53,530
world in our world we can now take

00:18:50,760 --> 00:18:55,540
migrations and virtual machines and take

00:18:53,530 --> 00:19:00,340
everything all the functionality we need

00:18:55,540 --> 00:19:03,010
on top of these atomic workloads but I

00:19:00,340 --> 00:19:06,309
mean that while that all is great that

00:19:03,010 --> 00:19:09,150
all also involves a lot of thinking on

00:19:06,309 --> 00:19:11,770
how they write API should look like and

00:19:09,150 --> 00:19:15,490
it's actually pretty telling challenging

00:19:11,770 --> 00:19:17,590
because on one hand our API should be as

00:19:15,490 --> 00:19:19,630
powerful as liberties and liberties

00:19:17,590 --> 00:19:22,210
pretty powerful when you look under

00:19:19,630 --> 00:19:24,940
domain XML but on the other hand it's

00:19:22,210 --> 00:19:27,130
all it's not just a node API you know

00:19:24,940 --> 00:19:28,540
specific API it's also a cluster API so

00:19:27,130 --> 00:19:30,160
there are some features which should be

00:19:28,540 --> 00:19:31,870
expressible on the cluster level there

00:19:30,160 --> 00:19:34,059
are some features which but they should

00:19:31,870 --> 00:19:36,880
be protected by access control there are

00:19:34,059 --> 00:19:39,429
features which shouldn't be because they

00:19:36,880 --> 00:19:41,200
need to be abstracted away then we have

00:19:39,429 --> 00:19:44,590
then kubernetes has it has their own

00:19:41,200 --> 00:19:46,450
concepts which regarding to storage and

00:19:44,590 --> 00:19:47,920
networking which not necessarily

00:19:46,450 --> 00:19:50,130
want one a liberabit so we have to do a

00:19:47,920 --> 00:19:54,730
lot of translation we're thinking there

00:19:50,130 --> 00:19:56,710
and of course the most important

00:19:54,730 --> 00:19:59,350
difference is that while in our

00:19:56,710 --> 00:20:02,260
traditional management applications we

00:19:59,350 --> 00:20:04,120
are used to do all our work imperative

00:20:02,260 --> 00:20:07,150
kubernetes completely works declarative

00:20:04,120 --> 00:20:10,540
so we have to do a lot of background

00:20:07,150 --> 00:20:12,250
work to actually synchronize our states

00:20:10,540 --> 00:20:14,410
of the virtual machines with dead what

00:20:12,250 --> 00:20:15,970
do you want ink and that's completely

00:20:14,410 --> 00:20:17,980
different when you think about four over

00:20:15,970 --> 00:20:19,930
there for instance there also it just

00:20:17,980 --> 00:20:21,430
tells the node what to do it's

00:20:19,930 --> 00:20:23,290
completely different in kubernetes you

00:20:21,430 --> 00:20:25,240
just tell the complete cluster what do

00:20:23,290 --> 00:20:27,100
you want from it and then internally

00:20:25,240 --> 00:20:28,540
everything starts working and tries to

00:20:27,100 --> 00:20:31,390
fulfill that and later on you can see

00:20:28,540 --> 00:20:37,270
yeah it worked or didn't work and that's

00:20:31,390 --> 00:20:40,180
a huge charge further we have a very

00:20:37,270 --> 00:20:42,640
another very important challenge is how

00:20:40,180 --> 00:20:44,380
to properly integrate the virtual

00:20:42,640 --> 00:20:49,870
machine lifecycle with the pod life

00:20:44,380 --> 00:20:51,550
cycle on a node and there for instance

00:20:49,870 --> 00:20:54,270
they have their you have all kind of

00:20:51,550 --> 00:20:56,560
differences for instance that kubernetes

00:20:54,270 --> 00:21:00,010
normally talks about volumes when they

00:20:56,560 --> 00:21:02,020
talk about storage so you have ice Kazi

00:21:00,010 --> 00:21:03,730
backends you have Gloucester backends

00:21:02,020 --> 00:21:05,650
safe backends and all that kind of stuff

00:21:03,730 --> 00:21:07,840
but whenever they mount something and

00:21:05,650 --> 00:21:09,580
provides something to you they normally

00:21:07,840 --> 00:21:11,050
just mount the directory and you can

00:21:09,580 --> 00:21:12,640
write there and read there that's not

00:21:11,050 --> 00:21:14,320
really what we need we need disks which

00:21:12,640 --> 00:21:15,610
we attach to virtual machines so on one

00:21:14,320 --> 00:21:18,280
hand there is a lot of infrastructure

00:21:15,610 --> 00:21:20,560
work already done for us to attach all

00:21:18,280 --> 00:21:22,030
that somehow to our node or to express

00:21:20,560 --> 00:21:24,180
it on the cluster level but it's not

00:21:22,030 --> 00:21:26,970
really done in the way we need it and

00:21:24,180 --> 00:21:29,380
does a lot of work is going on there

00:21:26,970 --> 00:21:31,450
regarding to networking that's also

00:21:29,380 --> 00:21:33,850
pretty challenging because kubernetes

00:21:31,450 --> 00:21:35,200
has its own networking model which

00:21:33,850 --> 00:21:37,480
basically says we don't care about

00:21:35,200 --> 00:21:41,560
networking at all we just tell an

00:21:37,480 --> 00:21:43,510
external provider give us an IP which

00:21:41,560 --> 00:21:44,920
should be the IP of the container and

00:21:43,510 --> 00:21:46,750
then we just propagate it around the

00:21:44,920 --> 00:21:48,280
cluster and that's not really how it

00:21:46,750 --> 00:21:51,730
works with virtual machines in virtual

00:21:48,280 --> 00:21:54,190
machines you you can't just configure

00:21:51,730 --> 00:21:57,370
your your controller

00:21:54,190 --> 00:21:59,800
you can't just configure your your

00:21:57,370 --> 00:22:01,660
container or you virtual machine with

00:21:59,800 --> 00:22:03,310
therapy inside you just have to go

00:22:01,660 --> 00:22:05,800
through DHCP servers and all the kind of

00:22:03,310 --> 00:22:07,990
stuff so it's actually the entry point

00:22:05,800 --> 00:22:09,430
for networking is different we have to

00:22:07,990 --> 00:22:11,470
configure them from outside whereas

00:22:09,430 --> 00:22:13,030
kubernetes is used to yeah let the

00:22:11,470 --> 00:22:14,800
networking namespace be configured right

00:22:13,030 --> 00:22:19,350
and then give us the IP and we reported

00:22:14,800 --> 00:22:22,030
everywhere another interesting issue or

00:22:19,350 --> 00:22:24,660
task which is on our list to solve is

00:22:22,030 --> 00:22:27,520
that we have human Liberty inside a pod

00:22:24,660 --> 00:22:30,610
I'm not aware how how many of you are

00:22:27,520 --> 00:22:32,110
aware of the fact that if for a very

00:22:30,610 --> 00:22:34,960
long time it was the case that if you

00:22:32,110 --> 00:22:36,850
just restarted your taka daemon and

00:22:34,960 --> 00:22:38,170
enrolled in communities all your your

00:22:36,850 --> 00:22:40,240
containers suddenly stopped

00:22:38,170 --> 00:22:42,010
now with drought that's no longer an

00:22:40,240 --> 00:22:43,240
issue that's in another implementation

00:22:42,010 --> 00:22:45,220
for the docker container on time

00:22:43,240 --> 00:22:47,500
implementation but we basically have the

00:22:45,220 --> 00:22:49,390
same issue right now with liberty and

00:22:47,500 --> 00:22:51,610
human report if we restore a liberal pot

00:22:49,390 --> 00:22:54,790
all our qml instances are still somehow

00:22:51,610 --> 00:22:57,100
bound to the mount namespace of the

00:22:54,790 --> 00:22:59,260
Liberty pod and are stopped so when you

00:22:57,100 --> 00:23:01,120
don't think of this combination of you

00:22:59,260 --> 00:23:03,070
restart talk all your containers go away

00:23:01,120 --> 00:23:05,470
and if you restart Liberatore Wims go

00:23:03,070 --> 00:23:07,140
away that's kind of a fragile thing so

00:23:05,470 --> 00:23:12,070
we're still trying to find the right

00:23:07,140 --> 00:23:13,660
solution for that part also we have to

00:23:12,070 --> 00:23:15,810
integrate with the C groups of the pot

00:23:13,660 --> 00:23:18,190
so that the scheduling decisions and the

00:23:15,810 --> 00:23:21,550
resource usage of the virtual machine is

00:23:18,190 --> 00:23:23,620
really taking to count properly and yeah

00:23:21,550 --> 00:23:25,780
we have to provide migration on top of

00:23:23,620 --> 00:23:28,300
kubernetes which itself doesn't have any

00:23:25,780 --> 00:23:29,530
concept of migration so we have to make

00:23:28,300 --> 00:23:31,450
sure that the timings are right

00:23:29,530 --> 00:23:32,890
everywhere that we really the map is

00:23:31,450 --> 00:23:34,860
already amis already gone away before

00:23:32,890 --> 00:23:37,950
the pot time and all that stuff right

00:23:34,860 --> 00:23:40,480
now we already provide a kind of

00:23:37,950 --> 00:23:42,580
interesting set of features we have

00:23:40,480 --> 00:23:43,870
cloud in its support on the on the

00:23:42,580 --> 00:23:47,350
keyboard right now you can access

00:23:43,870 --> 00:23:51,070
consoles in spice we have virtually in

00:23:47,350 --> 00:23:52,780
virtual machine replicas set based on

00:23:51,070 --> 00:23:54,910
kubernetes which allows you to scan

00:23:52,780 --> 00:23:57,580
liver to ephemeral go to machines up and

00:23:54,910 --> 00:23:58,630
down that works pretty nicely and we

00:23:57,580 --> 00:24:00,730
have a cloud cloud provide

00:23:58,630 --> 00:24:04,000
implementation for kubernetes with and

00:24:00,730 --> 00:24:07,300
communities has a project which allows

00:24:04,000 --> 00:24:10,310
you to stay in your kubernetes nodes on

00:24:07,300 --> 00:24:13,280
Amazon Web Services or on Google

00:24:10,310 --> 00:24:15,710
mention and we also have clock provider

00:24:13,280 --> 00:24:17,840
plugin for Qbert which works on bare

00:24:15,710 --> 00:24:20,900
metal kubernetes installations to scale

00:24:17,840 --> 00:24:22,910
notes on kubernetes installations which

00:24:20,900 --> 00:24:25,460
are nested inside there so you can kind

00:24:22,910 --> 00:24:26,840
of and you can kind of have kind of two

00:24:25,460 --> 00:24:29,270
different notes that you can have your

00:24:26,840 --> 00:24:31,760
real nested kubernetes cluster instance

00:24:29,270 --> 00:24:34,040
inside those scaled environments or you

00:24:31,760 --> 00:24:35,210
can just provision additional notes for

00:24:34,040 --> 00:24:36,890
the bare metal installation which are

00:24:35,210 --> 00:24:39,950
virtualized which allow you to separate

00:24:36,890 --> 00:24:42,680
some workloads from others and there's a

00:24:39,950 --> 00:24:45,920
lot more to come and giving back to

00:24:42,680 --> 00:24:47,090
Fabian - oh I forgot the demo we also

00:24:45,920 --> 00:24:49,280
have a nice team if you want to try it

00:24:47,090 --> 00:24:51,710
out yeah forget about it but it's very

00:24:49,280 --> 00:24:54,590
important so there's a mini cube T mu

00:24:51,710 --> 00:24:56,600
which and mini cube is a very famous

00:24:54,590 --> 00:24:58,220
dimmable in the communities world you

00:24:56,600 --> 00:25:00,680
can just run these commands and that

00:24:58,220 --> 00:25:04,510
will start a one-note kubernetes cluster

00:25:00,680 --> 00:25:07,550
for you with cube root installed and

00:25:04,510 --> 00:25:10,280
then you can run the demo script and it

00:25:07,550 --> 00:25:12,080
will start a vm there you can connect to

00:25:10,280 --> 00:25:13,760
the console and everything it yeah I

00:25:12,080 --> 00:25:22,520
hope you will try it out and now I'm

00:25:13,760 --> 00:25:24,140
doing yeah so we've seen for much so

00:25:22,520 --> 00:25:26,420
we've started quite high on the high

00:25:24,140 --> 00:25:28,160
level looking at you know what why do we

00:25:26,420 --> 00:25:32,600
do all this at all and then we looked at

00:25:28,160 --> 00:25:35,870
how do we do it actually so and what's

00:25:32,600 --> 00:25:38,690
coming up so we asked you bird I mean we

00:25:35,870 --> 00:25:41,270
had a lot of challenges doing on the 8 -

00:25:38,690 --> 00:25:43,340
2 - face on the API level of the node

00:25:41,270 --> 00:25:46,550
level but what would really a mat or a

00:25:43,340 --> 00:25:47,990
vision clarified a little bit we want to

00:25:46,550 --> 00:25:49,640
become a kubernetes and Native

00:25:47,990 --> 00:25:51,400
communities addon so that you can really

00:25:49,640 --> 00:25:54,770
deploy ourselves with a single command

00:25:51,400 --> 00:26:00,620
on your kubernetes cluster by the way

00:25:54,770 --> 00:26:02,600
who have you ever tried kubernetes that

00:26:00,620 --> 00:26:06,050
is cool and how many of you have have

00:26:02,600 --> 00:26:08,590
tried either of overt trots marks or

00:26:06,050 --> 00:26:08,590
OpenStack

00:26:09,650 --> 00:26:13,060
that's that's interesting it's like it's

00:26:11,690 --> 00:26:15,620
a comparable number so it's not

00:26:13,060 --> 00:26:18,730
significantly different than and two of

00:26:15,620 --> 00:26:18,730
you has tried Liberty

00:26:19,910 --> 00:26:24,510
interesting so there's no real real

00:26:22,890 --> 00:26:25,050
dominant player in here but that's

00:26:24,510 --> 00:26:26,850
interesting

00:26:25,050 --> 00:26:29,220
never mind so whenever you try

00:26:26,850 --> 00:26:31,140
kubernetes you will be able to deploy

00:26:29,220 --> 00:26:33,030
Qbert with a single command line we're

00:26:31,140 --> 00:26:34,200
not there yet we make good progress on

00:26:33,030 --> 00:26:36,270
that but we're not there yet

00:26:34,200 --> 00:26:38,370
in order to achieve that we need to

00:26:36,270 --> 00:26:40,320
stabilize so we're doing a lot of

00:26:38,370 --> 00:26:42,600
changes because we are experimenting we

00:26:40,320 --> 00:26:44,880
try to see what solution is fitting best

00:26:42,600 --> 00:26:46,980
you know and as you know what we're

00:26:44,880 --> 00:26:48,810
going forward we see this is not working

00:26:46,980 --> 00:26:50,010
out as we expect it so we need to choose

00:26:48,810 --> 00:26:51,990
a different path but we want to

00:26:50,010 --> 00:26:53,820
stabilize in order to be able to be

00:26:51,990 --> 00:26:54,750
easily deployable on different clusters

00:26:53,820 --> 00:26:57,270
because you need to understand

00:26:54,750 --> 00:26:59,040
kubernetes has a lot of commercial

00:26:57,270 --> 00:27:01,050
distributions so it's like with weave

00:26:59,040 --> 00:27:03,200
OpenStack we see that different vendors

00:27:01,050 --> 00:27:05,880
provide their support and their specific

00:27:03,200 --> 00:27:07,860
version with eventual add-ons and in

00:27:05,880 --> 00:27:09,300
communities it's the same so many

00:27:07,860 --> 00:27:11,610
vendors have their distribution of

00:27:09,300 --> 00:27:14,640
communities and we want to see that we

00:27:11,610 --> 00:27:16,770
are really agnostic to to that specific

00:27:14,640 --> 00:27:18,420
distribution and yet

00:27:16,770 --> 00:27:24,060
agnostic you'll specific distribution

00:27:18,420 --> 00:27:27,180
and contributing to communities so the

00:27:24,060 --> 00:27:29,430
thing is we come with the background of

00:27:27,180 --> 00:27:31,080
overt but we have also people from

00:27:29,430 --> 00:27:33,330
OpenStack look into Qbert and

00:27:31,080 --> 00:27:36,300
contributing and our background is that

00:27:33,330 --> 00:27:38,450
we come from management systems and we

00:27:36,300 --> 00:27:40,890
used to implement a lot of stuff

00:27:38,450 --> 00:27:42,330
managing clusters so we have our

00:27:40,890 --> 00:27:44,010
specialists about doing storage while

00:27:42,330 --> 00:27:46,140
doing networking to virtualization is

00:27:44,010 --> 00:27:49,500
scheduling and the interesting but here

00:27:46,140 --> 00:27:51,450
with Qbert is what what are we intended

00:27:49,500 --> 00:27:53,370
to do because kubernetes is already

00:27:51,450 --> 00:27:54,960
doing so much kubernetes doing

00:27:53,370 --> 00:27:57,000
everything the communities are so

00:27:54,960 --> 00:27:59,790
amazing but it can't do everything yet

00:27:57,000 --> 00:28:02,010
so there are bugs and and and our work

00:27:59,790 --> 00:28:05,310
changes so we want to do we want to

00:28:02,010 --> 00:28:07,320
develop which is it we want to enhance

00:28:05,310 --> 00:28:09,000
communities to be able to run virtual

00:28:07,320 --> 00:28:10,980
machines decently and we can manage them

00:28:09,000 --> 00:28:14,040
but in order to do so we need to improve

00:28:10,980 --> 00:28:15,600
kubernetes as well so our focus is not

00:28:14,040 --> 00:28:18,510
exclusively on improving cube root

00:28:15,600 --> 00:28:20,970
itself but also improving kubernetes to

00:28:18,510 --> 00:28:22,500
to provide what we need one example is

00:28:20,970 --> 00:28:25,770
for example a block storage in

00:28:22,500 --> 00:28:28,320
kubernetes so far kubernetes provides

00:28:25,770 --> 00:28:31,260
storage as file systems but if you're

00:28:28,320 --> 00:28:31,760
not using verticals then you need roblox

00:28:31,260 --> 00:28:34,670
origin

00:28:31,760 --> 00:28:37,070
order to use it with QE mu you can you

00:28:34,670 --> 00:28:40,550
know you can use files and or I don't

00:28:37,070 --> 00:28:41,840
know there's a device member and if

00:28:40,550 --> 00:28:43,340
that's blocked our drive if I'm not

00:28:41,840 --> 00:28:45,620
mistaking so you could use that as well

00:28:43,340 --> 00:28:48,560
but in reality we want to block device

00:28:45,620 --> 00:28:50,420
in order to use it with QE mu and so we

00:28:48,560 --> 00:28:52,250
want from communities that they provide

00:28:50,420 --> 00:28:54,500
block devices to us so that we can

00:28:52,250 --> 00:28:57,020
efficiently use those volume concepts

00:28:54,500 --> 00:28:59,270
with our VMS and that is what we need to

00:28:57,020 --> 00:29:01,190
push and there are other areas like

00:28:59,270 --> 00:29:03,530
we've got custom virtualization specific

00:29:01,190 --> 00:29:05,030
metrics we need to be able to expose

00:29:03,530 --> 00:29:08,090
them to the cluster to make the

00:29:05,030 --> 00:29:09,980
kubernetes scheduler able to consider

00:29:08,090 --> 00:29:11,720
them when doing scheduling decisions and

00:29:09,980 --> 00:29:13,550
that is the kind of stuff which we don't

00:29:11,720 --> 00:29:15,560
want to solve an hour side but rather

00:29:13,550 --> 00:29:18,080
work with kubernetes to see that we

00:29:15,560 --> 00:29:20,180
enhance it so that it's useful for us

00:29:18,080 --> 00:29:22,210
but also eventually for others because

00:29:20,180 --> 00:29:24,620
in the end the problems we have are

00:29:22,210 --> 00:29:26,030
sometimes also applicable to others like

00:29:24,620 --> 00:29:29,450
the block storage is also interesting

00:29:26,030 --> 00:29:31,820
for example for database workloads all

00:29:29,450 --> 00:29:33,560
right so that's what we also want to in

00:29:31,820 --> 00:29:36,970
foster to start looking to communities

00:29:33,560 --> 00:29:39,860
and contributing more over there

00:29:36,970 --> 00:29:42,230
so now we're getting to the end so the

00:29:39,860 --> 00:29:45,680
summary is that Cuba is is a lot of work

00:29:42,230 --> 00:29:47,330
in progress and a lot of Rd and there's

00:29:45,680 --> 00:29:49,460
a lot of stuff happening on the cupid

00:29:47,330 --> 00:29:51,260
side and on the community side and if

00:29:49,460 --> 00:29:52,730
you've got many moving parts then it's a

00:29:51,260 --> 00:29:57,310
great party if you have to the right

00:29:52,730 --> 00:29:59,840
party lights but we also see that we

00:29:57,310 --> 00:30:02,570
with the work which Roman presented we

00:29:59,840 --> 00:30:04,220
are able to provide a unified API so

00:30:02,570 --> 00:30:06,530
what does that mean we do have our

00:30:04,220 --> 00:30:08,810
specific API to manage virtual machines

00:30:06,530 --> 00:30:11,150
on top of kubernetes but by adding that

00:30:08,810 --> 00:30:13,100
to communities itself you then have an

00:30:11,150 --> 00:30:15,020
API which provides you with both so you

00:30:13,100 --> 00:30:17,360
have an API tremendous containers and on

00:30:15,020 --> 00:30:20,510
on the same transport level you have is

00:30:17,360 --> 00:30:23,000
another API or more resources to manage

00:30:20,510 --> 00:30:24,980
virtual machines so in the end as a user

00:30:23,000 --> 00:30:27,410
as an admin as a developer you've got a

00:30:24,980 --> 00:30:31,670
single pane of glass to manage both your

00:30:27,410 --> 00:30:34,910
VMs and your container workloads and at

00:30:31,670 --> 00:30:37,340
the same time as I'll I did in the

00:30:34,910 --> 00:30:39,440
beginning you can end up with a

00:30:37,340 --> 00:30:41,300
converged infrastructure so that means

00:30:39,440 --> 00:30:43,460
what does it mean effectively it means

00:30:41,300 --> 00:30:45,470
you can deploy kubernetes ones on your

00:30:43,460 --> 00:30:47,780
bare metal or even a nested you know

00:30:45,470 --> 00:30:49,549
and stack if you want to try it out but

00:30:47,780 --> 00:30:52,250
on bare metal you can deploy kubernetes

00:30:49,549 --> 00:30:53,450
and you can use that very same

00:30:52,250 --> 00:30:55,480
infrastructure for both of your

00:30:53,450 --> 00:30:57,710
workloads so you don't have to do

00:30:55,480 --> 00:30:58,850
kubernetes on top of OpenStack or the

00:30:57,710 --> 00:31:01,159
other way around open certain

00:30:58,850 --> 00:31:03,409
communities or kubernetes on Rev or

00:31:01,159 --> 00:31:06,400
overt you don't have to do that but you

00:31:03,409 --> 00:31:08,690
can rather use that one infrastructure

00:31:06,400 --> 00:31:10,480
yeah we are actually there today it's

00:31:08,690 --> 00:31:15,020
now it's about improving stabilizing

00:31:10,480 --> 00:31:17,030
what we have right I think we finished

00:31:15,020 --> 00:31:19,640
quite on time I think thank you very

00:31:17,030 --> 00:31:22,120
much for your attention and now it's

00:31:19,640 --> 00:31:24,440
time for questions if there are any and

00:31:22,120 --> 00:31:27,020
if you have a question there's actually

00:31:24,440 --> 00:31:30,070
the opportunity to win a small sticker

00:31:27,020 --> 00:31:33,700
of a limited set of Qbert stickers a

00:31:30,070 --> 00:31:33,700
very limited set

00:31:47,240 --> 00:31:52,909
can you hear me can you explain a little

00:31:50,539 --> 00:31:54,740
bit more about the declarative versus

00:31:52,909 --> 00:31:57,730
intuitive modes where do you see it in

00:31:54,740 --> 00:32:00,770
OpenStack innovate and how do you not

00:31:57,730 --> 00:32:02,840
yep so the question was can we explain a

00:32:00,770 --> 00:32:05,120
little bit more about clear declarative

00:32:02,840 --> 00:32:07,429
against imperative so one nice thing

00:32:05,120 --> 00:32:10,250
about communities is that you declared

00:32:07,429 --> 00:32:12,409
the state of the cluster so if we look

00:32:10,250 --> 00:32:14,779
at let's take over I know best

00:32:12,409 --> 00:32:17,240
personally so in over you go to the API

00:32:14,779 --> 00:32:19,429
and say I want to create a VM so you're

00:32:17,240 --> 00:32:22,490
doing to create API call to create that

00:32:19,429 --> 00:32:26,090
VM you need a disk so you do an API call

00:32:22,490 --> 00:32:28,399
to create a disk and if your class owner

00:32:26,090 --> 00:32:31,039
goes down because your house burned or

00:32:28,399 --> 00:32:33,110
the lab was destroyed by your dog you

00:32:31,039 --> 00:32:35,570
need to do the same API calls in order

00:32:33,110 --> 00:32:37,850
to bring up the same cluster again in

00:32:35,570 --> 00:32:39,980
communities it's different so there it's

00:32:37,850 --> 00:32:41,840
decorative so you declare the state of

00:32:39,980 --> 00:32:43,940
the cluster you want to have so you say

00:32:41,840 --> 00:32:47,570
I want a VM and put that declaration

00:32:43,940 --> 00:32:49,429
into kubernetes and you say I want that

00:32:47,570 --> 00:32:53,059
specific I want that volume to be

00:32:49,429 --> 00:32:54,529
available and then it's so called

00:32:53,059 --> 00:32:55,880
designed around the operator pattern

00:32:54,529 --> 00:32:59,090
then there are operators in the cluster

00:32:55,880 --> 00:33:01,549
which see these declarations and perform

00:32:59,090 --> 00:33:03,590
the API calls on behalf of you so they

00:33:01,549 --> 00:33:06,799
will do the right calls to bring up a VM

00:33:03,590 --> 00:33:08,690
or to schedule a VM on the cluster and

00:33:06,799 --> 00:33:11,419
get it up and running or to create the

00:33:08,690 --> 00:33:13,190
disk using some storage back-end why

00:33:11,419 --> 00:33:14,960
does it make a difference because in

00:33:13,190 --> 00:33:18,110
this is a in this example where the

00:33:14,960 --> 00:33:20,539
cluster went down if you bring up the

00:33:18,110 --> 00:33:23,210
cluster again the declarations are still

00:33:20,539 --> 00:33:25,880
there and the operators are also there

00:33:23,210 --> 00:33:28,580
again so the operators will see that the

00:33:25,880 --> 00:33:30,020
declarations are there and see well my

00:33:28,580 --> 00:33:32,570
cluster stay is different so I do

00:33:30,020 --> 00:33:35,299
everything in order to get my cluster

00:33:32,570 --> 00:33:38,960
into the declared state and so you don't

00:33:35,299 --> 00:33:40,730
you are not requested to do the same API

00:33:38,960 --> 00:33:43,669
calls again and build up your cluster

00:33:40,730 --> 00:33:45,529
but rather the cluster itself is working

00:33:43,669 --> 00:33:47,720
on on reaching that state and that's

00:33:45,529 --> 00:33:50,559
very handy in case of disaster recovery

00:33:47,720 --> 00:33:50,559
for example

00:33:54,220 --> 00:34:00,620
thank you I was wondering do you have an

00:33:58,520 --> 00:34:03,140
expectation how long it will take that

00:34:00,620 --> 00:34:07,880
you get in sort of stable mode so to say

00:34:03,140 --> 00:34:10,610
that you are able to pre-production used

00:34:07,880 --> 00:34:13,070
like like not only in mini cube but but

00:34:10,610 --> 00:34:14,660
also to really get it running in a real

00:34:13,070 --> 00:34:17,750
environment as far as I understood in

00:34:14,660 --> 00:34:18,710
the in the documentation we are able to

00:34:17,750 --> 00:34:21,050
yeah

00:34:18,710 --> 00:34:23,720
apply the plug in the mini cube but not

00:34:21,050 --> 00:34:28,370
yet on a real running communities

00:34:23,720 --> 00:34:30,290
environment so when we would be will be

00:34:28,370 --> 00:34:38,240
me will we be more stable what's a

00:34:30,290 --> 00:34:42,380
question soon no in reality we've got it

00:34:38,240 --> 00:34:44,560
so I said we I think not too long so I

00:34:42,380 --> 00:34:46,940
think we can think in weeks

00:34:44,560 --> 00:34:47,950
we've been struggling with that for

00:34:46,940 --> 00:34:51,470
quite a while

00:34:47,950 --> 00:34:56,210
but we see a light at the end of the

00:34:51,470 --> 00:34:57,590
tunnel and what does it mean so we are

00:34:56,210 --> 00:34:59,660
actually working in all important points

00:34:57,590 --> 00:35:01,700
to make the manifests we have agnostic

00:34:59,660 --> 00:35:03,680
to a cluster and that is the most

00:35:01,700 --> 00:35:08,980
important step to be able to deploy us

00:35:03,680 --> 00:35:08,980
to other to other clusters but about

00:35:09,370 --> 00:35:15,290
pre-production quality I think that will

00:35:11,450 --> 00:35:16,970
still take some time so I can't tell yet

00:35:15,290 --> 00:35:19,940
when we will reach that because it's

00:35:16,970 --> 00:35:21,680
really yeah it's you know the part of

00:35:19,940 --> 00:35:23,450
moving some features we need like the

00:35:21,680 --> 00:35:26,570
roblox or support kubernetes is just

00:35:23,450 --> 00:35:28,280
coming up or if really think about who

00:35:26,570 --> 00:35:28,580
is using virtual machines with multiple

00:35:28,280 --> 00:35:30,410
NICs

00:35:28,580 --> 00:35:32,150
I think that a lot of people are doing

00:35:30,410 --> 00:35:35,420
that and that's currently not possible

00:35:32,150 --> 00:35:37,010
with stock kubernetes so and this work

00:35:35,420 --> 00:35:39,500
for example in the networking area is

00:35:37,010 --> 00:35:41,480
really just emerging

00:35:39,500 --> 00:35:43,370
I mean kubernetes is just starting to

00:35:41,480 --> 00:35:44,150
think that it might make sense to have

00:35:43,370 --> 00:35:46,100
multiple NICs

00:35:44,150 --> 00:35:48,560
or multiple IP addresses per pod which

00:35:46,100 --> 00:35:51,700
is necessary for us to provide multiple

00:35:48,560 --> 00:35:55,520
multiple Nick's to a virtual machine

00:35:51,700 --> 00:35:59,260
some dip to rephrase depending on the

00:35:55,520 --> 00:35:59,260
feature set could be sooner or later

00:35:59,630 --> 00:36:06,320
oh and you get on both if you get a

00:36:03,380 --> 00:36:09,520
sticker actually to because there are

00:36:06,320 --> 00:36:12,920
not so many questions anymore okay I

00:36:09,520 --> 00:36:14,510
think going once twice three times

00:36:12,920 --> 00:36:16,720
thank you very much for taking up a good

00:36:14,510 --> 00:36:16,720
thing

00:36:19,100 --> 00:36:25,300

YouTube URL: https://www.youtube.com/watch?v=Wh-ejUyuHJ0


