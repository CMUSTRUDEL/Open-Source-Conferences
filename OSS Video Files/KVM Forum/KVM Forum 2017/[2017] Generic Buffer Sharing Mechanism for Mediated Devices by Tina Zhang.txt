Title: [2017] Generic Buffer Sharing Mechanism for Mediated Devices by Tina Zhang
Publication date: 2017-11-08
Playlist: KVM Forum 2017
Description: 
	VFIO mediated device framework is the cornerstone of enabling shared GPU virtualization usages. While the framework provides a general mechanism to implement mediated device, there are still device specific usage problems which requires new extension. A key usage requirement in GPU virtualization is to render guest framebuffer in the host side. Remote display protocol (e.g. SPICE) needs to access and stream guest framebuffer to remote clients. Local display may copy or map guest framebuffer to surface which is then composited or directly shown by host window system.

In this talk we will introduce our extension to VFIO mediated device framework to support efficient buffer sharing for GPU virtualization usages, which is general enough for other I/O mediators too. In addition, we will talk about how this mechanism is used by various Qemu graphics user interface (e.g. SPICE).

---

Tina Zhang
Intel

Tina Zhang is a senior software engineer working on GPU Virtualization at Intel Open Source Technology Center.
Captions: 
	00:00:00,390 --> 00:00:02,709
[Music]

00:00:05,930 --> 00:00:12,090
good afternoon everyone my name is Tina

00:00:09,300 --> 00:00:14,940
Chang I come from in help ourselves

00:00:12,090 --> 00:00:16,650
Technology Center I am a software

00:00:14,940 --> 00:00:19,289
engineer and the work on GPU

00:00:16,650 --> 00:00:22,800
virtualization currently I'm working on

00:00:19,289 --> 00:00:26,699
g bt g project which is in-house for GPU

00:00:22,800 --> 00:00:30,420
virtualization solution then let me

00:00:26,699 --> 00:00:33,450
introduce this topic so this session is

00:00:30,420 --> 00:00:37,110
basically about how to share buffers of

00:00:33,450 --> 00:00:39,329
minute device with the host side we

00:00:37,110 --> 00:00:41,579
propose we propose a general power

00:00:39,329 --> 00:00:44,850
sharing mechanism for midi device to

00:00:41,579 --> 00:00:47,399
share their powers with the help of this

00:00:44,850 --> 00:00:50,700
mechanism meaning the workshop GPU can

00:00:47,399 --> 00:00:54,989
expose this frame buffer as a standard

00:00:50,700 --> 00:00:57,629
en path object to the hosts aside so

00:00:54,989 --> 00:01:01,469
this mechanism is originally designed

00:00:57,629 --> 00:01:06,080
for GPU virtualization but it is also

00:01:01,469 --> 00:01:06,080
generally enough for other our mediators

00:01:07,100 --> 00:01:11,939
here is agenda so we only have four

00:01:10,020 --> 00:01:13,650
paths here in the first part we are

00:01:11,939 --> 00:01:16,619
going to talk bad background and the

00:01:13,650 --> 00:01:18,630
motivations the second part is about the

00:01:16,619 --> 00:01:21,180
design of the power for share mechanism

00:01:18,630 --> 00:01:26,430
the third part is the stickers and the

00:01:21,180 --> 00:01:29,430
last part is a summary so today as we

00:01:26,430 --> 00:01:32,880
know that we have our minute device work

00:01:29,430 --> 00:01:35,869
is the cornerstone of enabling share GPU

00:01:32,880 --> 00:01:39,030
work lifesaver usages among Williams

00:01:35,869 --> 00:01:41,340
well if IO is askew user space drummer

00:01:39,030 --> 00:01:47,759
framework which can directly assign

00:01:41,340 --> 00:01:50,880
physical IO device to bands minute

00:01:47,759 --> 00:01:54,750
device framework utilizes we are file

00:01:50,880 --> 00:01:58,560
framework which can be used to meet it a

00:01:54,750 --> 00:02:02,850
physical device into several virtual

00:01:58,560 --> 00:02:06,090
minute mini devices which can be

00:02:02,850 --> 00:02:08,910
assigned to we'ums it also provides the

00:02:06,090 --> 00:02:11,270
user interface for management which can

00:02:08,910 --> 00:02:13,150
be can be leveraged the paddle rebirth

00:02:11,270 --> 00:02:16,840
so

00:02:13,150 --> 00:02:20,610
software built on live work can create

00:02:16,840 --> 00:02:25,840
and configure a minute device

00:02:20,610 --> 00:02:28,739
minute device has a PID after the user

00:02:25,840 --> 00:02:33,010
passed the MIDI device to RIT to Kumu

00:02:28,739 --> 00:02:37,030
this mitad device can be attached to the

00:02:33,010 --> 00:02:38,920
cumulus s and use the palaremus meaning

00:02:37,030 --> 00:02:42,819
the virtual GPU is a kind of military

00:02:38,920 --> 00:02:47,940
wise which provide a GPU virtualization

00:02:42,819 --> 00:02:51,549
for Wiens by sharing a physical GPU

00:02:47,940 --> 00:02:55,209
while the way i found me devise

00:02:51,549 --> 00:02:59,739
framework price or general mechanism to

00:02:55,209 --> 00:03:02,620
implement a midi device there are asked

00:02:59,739 --> 00:03:06,190
you device specific problems which

00:03:02,620 --> 00:03:09,099
require new extensions key usage

00:03:06,190 --> 00:03:10,989
requirement in GPU virtualization is to

00:03:09,099 --> 00:03:16,810
render guest frame buffer in the host

00:03:10,989 --> 00:03:20,190
aside the first scenario is in remote

00:03:16,810 --> 00:03:23,380
worker desktop or maybe cloud came in

00:03:20,190 --> 00:03:27,489
the remote display protocol for example

00:03:23,380 --> 00:03:29,769
spice needs to directly access the guest

00:03:27,489 --> 00:03:34,989
frame buffer and the streaming to the

00:03:29,769 --> 00:03:38,739
remote klutz the second scenario is

00:03:34,989 --> 00:03:42,690
about the automotive virtualization host

00:03:38,739 --> 00:03:45,639
the GPU mediator meteor click config

00:03:42,690 --> 00:03:50,500
guess the frame buffer to the local

00:03:45,639 --> 00:03:55,329
display panels the third scenario is

00:03:50,500 --> 00:03:58,419
inclin'd host compositor may map the

00:03:55,329 --> 00:04:01,120
guest free buffer into a surface which

00:03:58,419 --> 00:04:06,900
can be composited into some fancy

00:04:01,120 --> 00:04:09,209
effects through OpenGL so those are the

00:04:06,900 --> 00:04:12,790
usages of for cheap huge realization

00:04:09,209 --> 00:04:15,130
other many other other militarize

00:04:12,790 --> 00:04:18,099
may also have the requirement to share

00:04:15,130 --> 00:04:20,560
their puffers with the host side so

00:04:18,099 --> 00:04:24,240
that's why we want to propose buffer

00:04:20,560 --> 00:04:24,240
share mechanism to midi device

00:04:25,290 --> 00:04:29,850
and next part we are going to talk about

00:04:27,510 --> 00:04:35,700
the design of the power sharing

00:04:29,850 --> 00:04:39,270
mechanism so the design aims to provide

00:04:35,700 --> 00:04:42,750
a generic way for hosts to access the

00:04:39,270 --> 00:04:46,580
military's powers in order to achieve it

00:04:42,750 --> 00:04:51,950
we choose the solution based on TN path

00:04:46,580 --> 00:04:55,620
subsystem the team buff subs implies a

00:04:51,950 --> 00:04:58,740
framework for sharing buffers for

00:04:55,620 --> 00:05:01,740
hardware access across multiple device

00:04:58,740 --> 00:05:03,930
drivers and the subsystems and for

00:05:01,740 --> 00:05:07,560
synchronizing asynchronous Holloway

00:05:03,930 --> 00:05:11,220
access it's the generic way provided by

00:05:07,560 --> 00:05:13,350
Colonel to share DMA buffers and has

00:05:11,220 --> 00:05:17,580
already been supported by many device

00:05:13,350 --> 00:05:20,190
drivers besides in the user space it is

00:05:17,580 --> 00:05:24,840
also supported by the Linux graphic

00:05:20,190 --> 00:05:26,670
steps for example egl has an api to to

00:05:24,840 --> 00:05:29,970
create an easier image according to the

00:05:26,670 --> 00:05:34,760
temple 50 scripture and it is also used

00:05:29,970 --> 00:05:37,470
by remote protocol for example spice

00:05:34,760 --> 00:05:39,900
considering different kinds of midi

00:05:37,470 --> 00:05:44,700
device may have different operation

00:05:39,900 --> 00:05:47,310
attributes a set of of AP is is proposed

00:05:44,700 --> 00:05:53,150
by different midi device in the same

00:05:47,310 --> 00:05:58,140
category as a case study who implement a

00:05:53,150 --> 00:06:03,920
set of API s4 mini virtual GPU to share

00:05:58,140 --> 00:06:07,550
his buffers and the GPU to talk with the

00:06:03,920 --> 00:06:07,550
user space clouds

00:06:07,580 --> 00:06:13,980
ok then before we go into the

00:06:11,310 --> 00:06:16,830
implementation details let's give a

00:06:13,980 --> 00:06:21,330
short review of TM path so there are

00:06:16,830 --> 00:06:22,170
many three components the the bar

00:06:21,330 --> 00:06:24,660
exporter

00:06:22,170 --> 00:06:28,290
the puffer user and the TM path itself

00:06:24,660 --> 00:06:28,950
so the theme of object is actually a

00:06:28,290 --> 00:06:32,400
streetable

00:06:28,950 --> 00:06:35,490
which keeps scalar list to save the TM

00:06:32,400 --> 00:06:39,030
ers of the buffer if we only consider

00:06:35,490 --> 00:06:42,270
the simple use case the public

00:06:39,030 --> 00:06:44,190
water is usually a buffer producer it

00:06:42,270 --> 00:06:47,400
needs to implement all the temp of

00:06:44,190 --> 00:06:50,310
operations and exposed at the end path

00:06:47,400 --> 00:06:52,980
as a file descriptor to a user space

00:06:50,310 --> 00:06:55,460
which can be sent over UNIX domain

00:06:52,980 --> 00:06:59,360
sockets to be shared with applications

00:06:55,460 --> 00:07:03,300
the power user imposed the empath object

00:06:59,360 --> 00:07:06,150
and guess the scalar is industry table

00:07:03,300 --> 00:07:09,300
so after it Maps the buffered rest to

00:07:06,150 --> 00:07:13,020
its own address space then the buffer

00:07:09,300 --> 00:07:15,720
can be used by the buffer user that's

00:07:13,020 --> 00:07:21,810
the way the standard involve subsystem

00:07:15,720 --> 00:07:24,420
works so here is a the architecture

00:07:21,810 --> 00:07:28,860
picture of our proposed buffer sharing

00:07:24,420 --> 00:07:31,440
mechanism the mechanism a network works

00:07:28,860 --> 00:07:35,220
as the Patrick's folder and all the

00:07:31,440 --> 00:07:38,160
others in the host side in the chrono

00:07:35,220 --> 00:07:47,310
space which would like to use this

00:07:38,160 --> 00:07:51,050
pattern are working as a buffer user so

00:07:47,310 --> 00:07:53,390
these blue components are protein by the

00:07:51,050 --> 00:07:56,010
implementation of this mechanism

00:07:53,390 --> 00:07:59,070
including the API is defined he and

00:07:56,010 --> 00:08:02,540
minimize framework and all these stuff

00:07:59,070 --> 00:08:07,160
things in the specific militarize to our

00:08:02,540 --> 00:08:11,130
so military as to our need to manage and

00:08:07,160 --> 00:08:15,560
implement the empath operations of the

00:08:11,130 --> 00:08:19,340
media device buffer and a streetable a

00:08:15,560 --> 00:08:23,250
streetable management needs to decide

00:08:19,340 --> 00:08:26,940
the location the buffer doctrine space

00:08:23,250 --> 00:08:31,560
the place where the power is actually

00:08:26,940 --> 00:08:34,860
allocated the exposed pages can be

00:08:31,560 --> 00:08:35,730
wrapped into some device specific

00:08:34,860 --> 00:08:39,690
objects

00:08:35,730 --> 00:08:46,460
managing the health of our details of

00:08:39,690 --> 00:08:46,460
power okay so

00:08:46,600 --> 00:08:54,970
well I knew the wrong to want to get

00:08:50,010 --> 00:08:58,900
exposed media too much puffer it needs

00:08:54,970 --> 00:09:02,830
to first to carry the use this a by two

00:08:58,900 --> 00:09:04,540
to query the puffer information this how

00:09:02,830 --> 00:09:07,390
control can also be used to check

00:09:04,540 --> 00:09:16,300
whether the midi device driver is ready

00:09:07,390 --> 00:09:18,700
to expose buffers after the first EP is

00:09:16,300 --> 00:09:23,020
returned successfully the user can

00:09:18,700 --> 00:09:25,450
evokes the second api to get to ask the

00:09:23,020 --> 00:09:28,390
midi device to our to create a tempeh

00:09:25,450 --> 00:09:30,820
object and then you stole a 5g scripture

00:09:28,390 --> 00:09:32,920
with it and at last returned the file

00:09:30,820 --> 00:09:38,440
descriptor to the user so to a user

00:09:32,920 --> 00:09:41,230
space then the user space applications

00:09:38,440 --> 00:09:47,130
may send this file descriptor to the

00:09:41,230 --> 00:09:51,520
real user and with this file descriptor

00:09:47,130 --> 00:09:53,080
the puffer user can directly first in of

00:09:51,520 --> 00:09:55,810
course in need to map the red pepper

00:09:53,080 --> 00:10:01,630
trust to its own address space then it

00:09:55,810 --> 00:10:05,470
can directly access the patters so

00:10:01,630 --> 00:10:08,650
specific to our minute worker GPU will

00:10:05,470 --> 00:10:12,420
propose to api's and this is the first

00:10:08,650 --> 00:10:13,710
one kravid graphics plan

00:10:12,420 --> 00:10:17,530
[Music]

00:10:13,710 --> 00:10:21,310
actually we this API is used to return

00:10:17,530 --> 00:10:23,530
the information of the frame buffer we

00:10:21,310 --> 00:10:25,900
have several types of frame buffer

00:10:23,530 --> 00:10:29,010
currently we support cursor player and

00:10:25,900 --> 00:10:31,540
and the primer plant so user needs to

00:10:29,010 --> 00:10:35,290
actor to tell the militarize tremor

00:10:31,540 --> 00:10:38,710
which which plan it once then the minute

00:10:35,290 --> 00:10:43,200
worker GPS rubber can return these

00:10:38,710 --> 00:10:46,180
informations to the user space and it

00:10:43,200 --> 00:10:49,450
the turn buff idea is the most important

00:10:46,180 --> 00:10:55,150
one which is a token of the frame buffer

00:10:49,450 --> 00:10:59,500
and cannot be used in the second API so

00:10:55,150 --> 00:11:03,460
this is the second API with 30 n buff ID

00:10:59,500 --> 00:11:06,550
as the input parameter this structure

00:11:03,460 --> 00:11:15,700
can return the temp of about the

00:11:06,550 --> 00:11:18,339
scripture of that of that damn bath so

00:11:15,700 --> 00:11:22,770
then let's come back to our scenario our

00:11:18,339 --> 00:11:26,530
usage scenarios in the remote desktop

00:11:22,770 --> 00:11:30,070
with the help of this mechanism Hume you

00:11:26,530 --> 00:11:32,410
can get a fight at the end before the

00:11:30,070 --> 00:11:36,730
scripture of the expose the case the

00:11:32,410 --> 00:11:39,300
frame buffer then it pass it to the

00:11:36,730 --> 00:11:46,150
remote protocol server for example

00:11:39,300 --> 00:11:49,860
spiced with five descriptor spice can

00:11:46,150 --> 00:11:53,500
spice Tommy remote protocol server can

00:11:49,860 --> 00:11:55,000
directly access the expose the against a

00:11:53,500 --> 00:12:00,150
frame buffer and the streaming through

00:11:55,000 --> 00:12:08,080
the remote clients for the automotive

00:12:00,150 --> 00:12:10,120
scenario similarly humor can get DM

00:12:08,080 --> 00:12:13,120
party scripture is the half of this

00:12:10,120 --> 00:12:15,640
mechanism and a pass it to the to a

00:12:13,120 --> 00:12:18,839
display switcher that this place measure

00:12:15,640 --> 00:12:23,080
is actually user space applications

00:12:18,839 --> 00:12:26,710
which can use the Lib Lib DRM a mess if

00:12:23,080 --> 00:12:29,589
api's to directly control the local

00:12:26,710 --> 00:12:32,500
display panels so with the foggy

00:12:29,589 --> 00:12:35,320
scripture of with the unbuffered

00:12:32,500 --> 00:12:38,110
scripture the displays return first

00:12:35,320 --> 00:12:41,440
needs to college the RM prime ft to

00:12:38,110 --> 00:12:44,560
handle to create a partial handle

00:12:41,440 --> 00:12:48,760
according to the faulty scripture then

00:12:44,560 --> 00:12:51,460
you can use the mod add half P to create

00:12:48,760 --> 00:12:54,400
a local frame buffer object according to

00:12:51,460 --> 00:12:56,620
the buffer handle and at last use the

00:12:54,400 --> 00:13:03,880
most self control to to render a guest

00:12:56,620 --> 00:13:08,800
frame buffer to the display panel in the

00:13:03,880 --> 00:13:11,200
class I'd again come you can get the

00:13:08,800 --> 00:13:15,400
temple file descriptor with the hop

00:13:11,200 --> 00:13:19,450
our mechanism and sense the faulty

00:13:15,400 --> 00:13:21,730
scripture to the host compositor comes

00:13:19,450 --> 00:13:24,880
with her campers use this eg I'll create

00:13:21,730 --> 00:13:26,740
image to create a ETL image according to

00:13:24,880 --> 00:13:28,720
the file at the end path of the

00:13:26,740 --> 00:13:32,020
scripture and then use the chip and

00:13:28,720 --> 00:13:36,130
texture to panelist image eg our image

00:13:32,020 --> 00:13:40,300
to a texture after exposed to case frame

00:13:36,130 --> 00:13:43,480
buffer being bonded a to texture the

00:13:40,300 --> 00:13:46,120
cast of frame buffer can be composed a

00:13:43,480 --> 00:13:55,050
data into some fancy effects through

00:13:46,120 --> 00:13:57,280
OpenGL biopsy compositor here are some

00:13:55,050 --> 00:13:59,740
implementation details we don't want to

00:13:57,280 --> 00:14:03,750
list all of them because many of them

00:13:59,740 --> 00:14:06,430
are related to the EMF suppose just

00:14:03,750 --> 00:14:11,620
three three right hands here so first

00:14:06,430 --> 00:14:14,110
why is the path management as a buffer

00:14:11,620 --> 00:14:18,310
exposure we need to implement all the

00:14:14,110 --> 00:14:22,390
above operations when the user in

00:14:18,310 --> 00:14:26,050
students space ask asks for TM poverty

00:14:22,390 --> 00:14:29,110
scripture we need to create a TM path

00:14:26,050 --> 00:14:30,820
object and they used for this scripture

00:14:29,110 --> 00:14:33,430
with it and return the file descriptor

00:14:30,820 --> 00:14:35,380
to the user space here we need to pay

00:14:33,430 --> 00:14:38,290
attention to the reference count of TN

00:14:35,380 --> 00:14:41,500
path we need to make sure that when

00:14:38,290 --> 00:14:44,470
there's ten paths all the all the

00:14:41,500 --> 00:14:48,250
fattest creepers are file descriptors of

00:14:44,470 --> 00:14:51,700
this TN path object a closed by the user

00:14:48,250 --> 00:14:55,780
in the user space the TN path object can

00:14:51,700 --> 00:14:58,990
be released a timely so many device

00:14:55,780 --> 00:15:02,770
driver may would like to catch the

00:14:58,990 --> 00:15:05,800
expose that the only path paths the

00:15:02,770 --> 00:15:10,510
benefit is with cached at the end both

00:15:05,800 --> 00:15:12,310
lists mini device travel doesn't need it

00:15:10,510 --> 00:15:15,610
will create a new

00:15:12,310 --> 00:15:20,170
TM path object with each time the user

00:15:15,610 --> 00:15:21,760
asks it can just can catch the list to

00:15:20,170 --> 00:15:25,480
see whether there is and

00:15:21,760 --> 00:15:30,250
can be reused and this can also benefit

00:15:25,480 --> 00:15:33,040
the users face as a user also can reuse

00:15:30,250 --> 00:15:39,190
the old resources according to the audit

00:15:33,040 --> 00:15:42,070
and path object the SG management as

00:15:39,190 --> 00:15:46,150
treatable management including creating

00:15:42,070 --> 00:15:48,850
using on a release as accessory table we

00:15:46,150 --> 00:15:53,130
need to pay attention to the to the

00:15:48,850 --> 00:15:57,010
buffer address as this petrest may be

00:15:53,130 --> 00:16:02,650
may be decoded from some guys shadow

00:15:57,010 --> 00:16:05,290
page table so the the the hosts needed

00:16:02,650 --> 00:16:07,420
to translate the miscibility the driver

00:16:05,290 --> 00:16:10,660
needs to translated to the host address

00:16:07,420 --> 00:16:15,330
space before using it and the last one

00:16:10,660 --> 00:16:15,330
is the is the information collection

00:16:15,810 --> 00:16:21,490
media device Trevor needs to need to get

00:16:19,090 --> 00:16:29,650
this information by decoding the values

00:16:21,490 --> 00:16:35,490
in the mid 80s virtual registers and

00:16:29,650 --> 00:16:41,490
here is the here is the current St ders

00:16:35,490 --> 00:16:47,530
our implementation for inhale water GPU

00:16:41,490 --> 00:16:52,600
Spach age they send out and then the

00:16:47,530 --> 00:16:57,130
latest version is 15 it is tested with

00:16:52,600 --> 00:16:59,530
the Linux kernel 4.13 and we are working

00:16:57,130 --> 00:17:03,490
with the community for the upstream work

00:16:59,530 --> 00:17:08,350
and beside the user space Camila all so

00:17:03,490 --> 00:17:10,780
how to patch sets to use the mechanism

00:17:08,350 --> 00:17:13,449
and they are almost they are both

00:17:10,780 --> 00:17:23,949
designed and implemented a biker frogmen

00:17:13,449 --> 00:17:26,829
okay so here is the is a summary would

00:17:23,949 --> 00:17:28,870
live the design of the proposed the

00:17:26,829 --> 00:17:32,350
puffer share mechanism is generic enough

00:17:28,870 --> 00:17:34,930
for IO mediators to share buffers with

00:17:32,350 --> 00:17:35,830
her side as we choose the solution based

00:17:34,930 --> 00:17:39,600
on

00:17:35,830 --> 00:17:43,360
the and puff subsystem as a case study

00:17:39,600 --> 00:17:47,200
we implement this mechanism for MIDI the

00:17:43,360 --> 00:17:50,559
virtual GPUs and then we will like to

00:17:47,200 --> 00:17:53,009
see that all kinds of minute virtual GPU

00:17:50,559 --> 00:17:55,659
would be aligned to leverage the

00:17:53,009 --> 00:17:58,419
proposed IP is and the buffer share

00:17:55,659 --> 00:18:02,080
mechanism to expose guests frame buffer

00:17:58,419 --> 00:18:04,240
to the hostile and at last

00:18:02,080 --> 00:18:08,159
well we work our innovations based on

00:18:04,240 --> 00:18:08,159
this generic buffer sharing mechanism

00:18:08,370 --> 00:18:18,669
yeah okay this is our our gvg repo you

00:18:15,279 --> 00:18:19,330
can access it and to get the idea of

00:18:18,669 --> 00:18:23,169
intel's

00:18:19,330 --> 00:18:25,090
foo GPU virtualization solution you can

00:18:23,169 --> 00:18:29,620
get the latest information of our work

00:18:25,090 --> 00:18:33,820
there we also have a wiki for user to to

00:18:29,620 --> 00:18:35,440
try and and deploy the solution we hope

00:18:33,820 --> 00:18:38,009
you can have fun with it

00:18:35,440 --> 00:18:38,009
thank you

00:18:38,350 --> 00:18:47,980
[Applause]

00:18:42,120 --> 00:18:47,980

YouTube URL: https://www.youtube.com/watch?v=cHMLBcHplhk


