Title: [2016] Microsoft Failover Clustering by Vadim Rozenfeld
Publication date: 2016-09-12
Playlist: KVM Forum 2016
Description: 
	Thinking about failover clustering as one of the features which helps to make high availability more achievable for KVM based Windows VM setups, Vadim is going to talk about adding Microsoft Failover Clustering compatibility to the existing Windows virtio-scsi miniport device drive, as well as about the relevant changes that need to be done at QEMU level in order to support Microsoft Failofer Clustering. 

Vadim Rozenfeld
Red Hat
Software Engineer

I'm a software engineer, working at Red Hat for almost nine years, and mostly specializing on developing para-virtualized device drivers for Windows platforms. I'm currently working on making Windows virtio-scsi miniport driver compatible with Microsoft Failover Clustering requirements. Last time I participated as a speaker at KVM Forum was in 2012 when I was speaking about Hyper-V enlightenment features, recently added to KVM http://www.linux-kvm.org/images/0/0a/2012-forum-kvm_hyperv.pdf 

Slides: http://www.linux-kvm.org/images/0/09/02x09B-Vadim_Rozenfeld-Microsoft_Failover_Clustering_on_KVM.pdf
Captions: 
	00:00:12,030 --> 00:00:18,949
well my name's madam Rosenfeld I'm

00:00:14,880 --> 00:00:23,550
working for redhead for quite long time

00:00:18,949 --> 00:00:26,580
in 2007 and it was all the time I was

00:00:23,550 --> 00:00:33,239
involved in wait are you in development

00:00:26,580 --> 00:00:35,280
so behind the row through drivers and

00:00:33,239 --> 00:00:41,399
retie we know you also can find my

00:00:35,280 --> 00:00:42,960
fingerprints on ayperi staff but today

00:00:41,399 --> 00:00:47,700
we are going to talk about adding

00:00:42,960 --> 00:00:50,809
Microsoft support clattering running

00:00:47,700 --> 00:00:56,160
Microsoft class drink on top of TBM and

00:00:50,809 --> 00:00:59,160
basically the step that we did to make

00:00:56,160 --> 00:01:03,030
which I use crazy be one of the capital

00:00:59,160 --> 00:01:07,170
to to run Microsoft Partner ink on top

00:01:03,030 --> 00:01:09,720
of your thigh was Kathy we are going to

00:01:07,170 --> 00:01:11,310
talk a little bit about cluster itself

00:01:09,720 --> 00:01:13,950
about I sky as equals

00:01:11,310 --> 00:01:17,880
i skies is still one of the valid

00:01:13,950 --> 00:01:22,500
solution and it works pretty stable it

00:01:17,880 --> 00:01:24,330
works pretty pretty good for class drink

00:01:22,500 --> 00:01:26,880
as well as we are going to talk about

00:01:24,330 --> 00:01:30,829
wilt I was carrying what was our reason

00:01:26,880 --> 00:01:34,700
what was our motivation to add support

00:01:30,829 --> 00:01:42,150
so this existing quit I was crazy driver

00:01:34,700 --> 00:01:45,090
the tepid was done making it I mean

00:01:42,150 --> 00:01:48,509
whatever scary driver clustering career

00:01:45,090 --> 00:01:51,479
the changes from inside of without scary

00:01:48,509 --> 00:01:58,070
driver itself also changes from qmu site

00:01:51,479 --> 00:02:03,000
and kappa what about our current status

00:01:58,070 --> 00:02:05,030
well it turns to clusters so we're out

00:02:03,000 --> 00:02:05,030
of

00:02:05,079 --> 00:02:09,259
definition what technical collateral is

00:02:07,189 --> 00:02:11,810
but basically we know that you know the

00:02:09,259 --> 00:02:13,760
idea is just to improve availability and

00:02:11,810 --> 00:02:15,170
scalability from one point of view from

00:02:13,760 --> 00:02:16,819
another point of view definition of

00:02:15,170 --> 00:02:18,770
clutter it's a group of independent

00:02:16,819 --> 00:02:23,150
system running together so we have

00:02:18,770 --> 00:02:26,540
several nodes at least two running

00:02:23,150 --> 00:02:28,810
together and we have three different

00:02:26,540 --> 00:02:33,260
kind of connection between those nodes

00:02:28,810 --> 00:02:37,459
basically we have public network it can

00:02:33,260 --> 00:02:40,670
be either net we also to note should be

00:02:37,459 --> 00:02:42,190
connected by some kind of private

00:02:40,670 --> 00:02:46,190
network

00:02:42,190 --> 00:02:47,630
well technically it should be it's it's

00:02:46,190 --> 00:02:49,130
not a mass to be connected to through

00:02:47,630 --> 00:02:50,810
private network is just no kind of

00:02:49,130 --> 00:02:52,640
recommendation from Microsoft right and

00:02:50,810 --> 00:03:00,670
they also should be connected to the

00:02:52,640 --> 00:03:04,160
same shared storage also picking about

00:03:00,670 --> 00:03:06,470
clatter since it's a kind of distributed

00:03:04,160 --> 00:03:09,170
system should be some kind of health

00:03:06,470 --> 00:03:10,880
monitoring mechanism crying inside of

00:03:09,170 --> 00:03:16,180
the class turret it's why we have this

00:03:10,880 --> 00:03:19,459
private network most important inhabit

00:03:16,180 --> 00:03:20,930
Microsoft it's not just just a standard

00:03:19,459 --> 00:03:25,480
pink it's Sam security could be

00:03:20,930 --> 00:03:31,050
differences more click like handshake

00:03:25,480 --> 00:03:34,120
and well basically that's it

00:03:31,050 --> 00:03:40,150
nothing special about collateral itself

00:03:34,120 --> 00:03:42,970
and then we will come to another issue

00:03:40,150 --> 00:03:45,640
fellow walk last echoes hello clarify

00:03:42,970 --> 00:03:48,810
fellow class sir usually has as I said

00:03:45,640 --> 00:03:53,170
at least two notes it can be more

00:03:48,810 --> 00:03:59,380
witness 2012 r2 if I remember correctly

00:03:53,170 --> 00:04:03,990
it's supported up to 64 notes and

00:03:59,380 --> 00:04:08,170
cluster and it's usually work we have

00:04:03,990 --> 00:04:10,120
say node 1 it's currently active and we

00:04:08,170 --> 00:04:14,410
have requests coming from client and

00:04:10,120 --> 00:04:16,450
then some reason if for not one just

00:04:14,410 --> 00:04:20,520
creation should be you know bring down

00:04:16,450 --> 00:04:23,440
then node 2 will take over and from the

00:04:20,520 --> 00:04:25,960
Euler from the clients point of view it

00:04:23,440 --> 00:04:31,500
will be absolutely and with a bow it

00:04:25,960 --> 00:04:31,500
should be absolutely invisible and

00:04:31,620 --> 00:04:37,600
really not equation the question about

00:04:33,820 --> 00:04:42,120
how shared storage should be connected

00:04:37,600 --> 00:04:47,020
to how we connect a storage to the those

00:04:42,120 --> 00:04:48,810
nodes in the cluster Microsoft support

00:04:47,020 --> 00:04:54,130
several solutions one of them is crazy

00:04:48,810 --> 00:04:55,990
another one its serial Scottie SAS and

00:04:54,130 --> 00:05:00,160
another one fibre channel

00:04:55,990 --> 00:05:02,970
they several kind of variation for

00:05:00,160 --> 00:05:05,650
example like Fibre Channel over Ethernet

00:05:02,970 --> 00:05:10,090
sizes also it can be no different kind

00:05:05,650 --> 00:05:13,030
of cells like no work that bunch of

00:05:10,090 --> 00:05:15,070
these colleges were done by ensuring

00:05:13,030 --> 00:05:17,740
disk it's technically it doesn't matter

00:05:15,070 --> 00:05:22,540
what we know there are three major

00:05:17,740 --> 00:05:25,450
interface to work with the class twink I

00:05:22,540 --> 00:05:26,620
scuzzy SAS and Fibre Channel Academy

00:05:25,450 --> 00:05:28,120
already here

00:05:26,620 --> 00:05:31,169
so basically we don't have any problem

00:05:28,120 --> 00:05:36,370
we can use I scuzzy as a reference and

00:05:31,169 --> 00:05:39,580
let's see if we do modify our guitar

00:05:36,370 --> 00:05:43,999
skies driver if we get any any benefit

00:05:39,580 --> 00:05:48,289
from that or no and where is

00:05:43,999 --> 00:05:51,049
about a scuzzy setting up ask as a

00:05:48,289 --> 00:05:52,309
connection work in Windows here is

00:05:51,049 --> 00:05:55,189
pretty pretty simple

00:05:52,309 --> 00:05:57,919
we basically need to activate a SCADA

00:05:55,189 --> 00:06:00,469
initiator there are three pages we just

00:05:57,919 --> 00:06:05,959
need to fill up them and then we just

00:06:00,469 --> 00:06:08,689
need to configure our ask as a target

00:06:05,959 --> 00:06:14,719
for all my developing for all my

00:06:08,689 --> 00:06:17,269
experiment I use what they call Linux

00:06:14,719 --> 00:06:20,299
i/o targets devoted by that data I

00:06:17,269 --> 00:06:24,139
believe yeah it's pretty simple to set

00:06:20,299 --> 00:06:27,409
up the system doesn't take a lot of time

00:06:24,139 --> 00:06:29,329
and then you know technically in several

00:06:27,409 --> 00:06:33,639
minutes you can have this setup ready

00:06:29,329 --> 00:06:33,639
and ready for I'm ready for testing and

00:06:35,379 --> 00:06:44,959
the idea we'll just build two different

00:06:38,659 --> 00:06:46,929
setups one based on a SCADA solution

00:06:44,959 --> 00:06:50,959
another one on will Taiyo strategy and

00:06:46,929 --> 00:06:56,019
check and see if we really get any any

00:06:50,959 --> 00:06:59,329
benefit from using real time skies so

00:06:56,019 --> 00:07:01,759
the idea we'll just run several stress

00:06:59,329 --> 00:07:04,399
tests and self one configuration and

00:07:01,759 --> 00:07:09,139
another just to can get some numbers to

00:07:04,399 --> 00:07:15,249
compare make decision and let me speak

00:07:09,139 --> 00:07:18,019
about rank performing test one of the

00:07:15,249 --> 00:07:20,899
most simple solution which came to the

00:07:18,019 --> 00:07:22,909
mind it's just running iron meter it's

00:07:20,899 --> 00:07:25,309
very simple very very powerful you can

00:07:22,909 --> 00:07:30,079
just run it also in several minutes just

00:07:25,309 --> 00:07:36,669
install run it and get some results we

00:07:30,079 --> 00:07:41,989
decided to check two different laws for

00:07:36,669 --> 00:07:47,749
kilobyte box words and also 256 just to

00:07:41,989 --> 00:07:52,519
see how how will tie us Kazi behave

00:07:47,749 --> 00:07:55,210
comparing to ask as a result they really

00:07:52,519 --> 00:08:03,770
were not so bad so we

00:07:55,210 --> 00:08:08,870
or better than I Scotty for 4k read and

00:08:03,770 --> 00:08:13,699
write test we also wore better than

00:08:08,870 --> 00:08:18,770
ice-crazy for 256 requires at least 4 is

00:08:13,699 --> 00:08:22,789
4 right it was almost the same as I said

00:08:18,770 --> 00:08:26,060
I am it with a kind of synthetic test it

00:08:22,789 --> 00:08:30,879
can give you a lot of information but

00:08:26,060 --> 00:08:33,440
after all you you definitely need to get

00:08:30,879 --> 00:08:36,110
other kinds probably other kind of

00:08:33,440 --> 00:08:39,440
information from from different from

00:08:36,110 --> 00:08:45,500
different performance too just to make a

00:08:39,440 --> 00:08:49,339
decision and you just need to create

00:08:45,500 --> 00:08:53,120
some sort of real-life Lord like for

00:08:49,339 --> 00:09:01,209
example like sequel server or Microsoft

00:08:53,120 --> 00:09:03,800
exchanger and it's pretty doable

00:09:01,209 --> 00:09:06,020
nowadays cause Microsoft they have what

00:09:03,800 --> 00:09:09,200
they call Microsoft Exchange edge stress

00:09:06,020 --> 00:09:11,380
is a kind of stand-alone - you can just

00:09:09,200 --> 00:09:13,850
install this - doesn't need you know

00:09:11,380 --> 00:09:16,370
basically install the binaries you also

00:09:13,850 --> 00:09:19,990
need to copy throw banner is from

00:09:16,370 --> 00:09:27,620
Microsoft Exchange Server I don't like

00:09:19,990 --> 00:09:29,959
secrets equal sequel stress you don't

00:09:27,620 --> 00:09:32,839
need anything else you just install this

00:09:29,959 --> 00:09:35,750
test and you can run it the main test

00:09:32,839 --> 00:09:38,060
takes around 2 hours it's a very

00:09:35,750 --> 00:09:40,490
powerful tool by the way this test

00:09:38,060 --> 00:09:43,130
creates a lot of lot inside of the guest

00:09:40,490 --> 00:09:46,370
it's a acquire a huge amount of

00:09:43,130 --> 00:09:48,740
different performance counters including

00:09:46,370 --> 00:09:54,620
CPU including file system including

00:09:48,740 --> 00:10:00,560
cache memory and disk but for our tests

00:09:54,620 --> 00:10:01,640
we are mostly interesting in to in two

00:10:00,560 --> 00:10:06,370
points with two parameters

00:10:01,640 --> 00:10:10,000
one of them is our database read

00:10:06,370 --> 00:10:12,730
average latency and another one is I'll

00:10:10,000 --> 00:10:21,580
look right originating see because there

00:10:12,730 --> 00:10:26,230
are two key characteristic form for say

00:10:21,580 --> 00:10:29,710
for sickle cell wall for Microsoft

00:10:26,230 --> 00:10:30,760
Exchange server and for that test we

00:10:29,710 --> 00:10:34,089
also are

00:10:30,760 --> 00:10:39,160
I mean without Scotty also a little bit

00:10:34,089 --> 00:10:42,990
better than I Scotty well trying to

00:10:39,160 --> 00:10:46,510
speak both of them bad but you know

00:10:42,990 --> 00:10:50,010
which I scared is better because we can

00:10:46,510 --> 00:10:55,500
see that you know that average latency

00:10:50,010 --> 00:10:59,140
is quite small for real-time scale and

00:10:55,500 --> 00:11:02,830
then basically it was a key point we

00:10:59,140 --> 00:11:06,490
said yeah let's try to make Rita of

00:11:02,830 --> 00:11:10,089
Cascia device driver to be aware of

00:11:06,490 --> 00:11:12,760
clustering and the third thing that we

00:11:10,089 --> 00:11:16,240
did it's pretty obvious cause we know

00:11:12,760 --> 00:11:19,690
that it should be such that we should be

00:11:16,240 --> 00:11:25,270
it it has to be serial schedule disk we

00:11:19,690 --> 00:11:28,029
just know change it one single line in

00:11:25,270 --> 00:11:31,440
INF hoping that it will be enough you

00:11:28,029 --> 00:11:36,640
just know checking and changing by step

00:11:31,440 --> 00:11:44,010
from Scalia to thirth and the driver

00:11:36,640 --> 00:11:46,959
started run for Pamela cluster

00:11:44,010 --> 00:11:49,529
validation Microsoft has a very good to

00:11:46,959 --> 00:11:53,709
just comes together with the activating

00:11:49,529 --> 00:11:57,430
fellow clattering feature name for this

00:11:53,709 --> 00:12:00,130
tool is parallel clutter manager in as

00:11:57,430 --> 00:12:05,400
part of its failure clatter manager they

00:12:00,130 --> 00:12:10,830
have validation or wizard inside and

00:12:05,400 --> 00:12:10,830
it's a very powerful tool cause it

00:12:11,200 --> 00:12:15,820
there are four different categories

00:12:13,720 --> 00:12:17,529
inside of these two one of them in just

00:12:15,820 --> 00:12:22,779
the first one it's inventory because

00:12:17,529 --> 00:12:26,800
when we ran this to its inventory they

00:12:22,779 --> 00:12:30,750
just get information about your hardware

00:12:26,800 --> 00:12:33,310
trying to find if we have any hardware

00:12:30,750 --> 00:12:37,930
capable to work with Microsoft

00:12:33,310 --> 00:12:38,589
clustering and first time we ran this

00:12:37,930 --> 00:12:43,420
test

00:12:38,589 --> 00:12:45,880
you know it was kind of really bad we

00:12:43,420 --> 00:12:47,740
expected it but you know yes in any case

00:12:45,880 --> 00:12:50,740
of all was a little bit depressing

00:12:47,740 --> 00:12:53,769
because you know fellow classroom

00:12:50,740 --> 00:13:00,279
manager just didn't recognize our device

00:12:53,769 --> 00:13:04,240
as as SAS as serial Scotty HBA

00:13:00,279 --> 00:13:07,180
so something called meeting even so that

00:13:04,240 --> 00:13:10,149
we made the changes in INF something

00:13:07,180 --> 00:13:14,589
time 16 what meeting and we started to

00:13:10,149 --> 00:13:18,910
geek to dick inside this problem and the

00:13:14,589 --> 00:13:21,490
first thing would just no just take any

00:13:18,910 --> 00:13:24,810
sort of existing solution and see how it

00:13:21,490 --> 00:13:29,350
works and the glitching solution was

00:13:24,810 --> 00:13:33,790
fueling very fusion because they have

00:13:29,350 --> 00:13:36,010
full emulated LSI cell device and we

00:13:33,790 --> 00:13:39,310
tried to build a pelvic last week on top

00:13:36,010 --> 00:13:43,209
of for being very fusion twelve run run

00:13:39,310 --> 00:13:45,160
the same test and well else I said

00:13:43,209 --> 00:13:47,290
device was just no mentioned in this

00:13:45,160 --> 00:13:51,699
list so something was wrong cause you

00:13:47,290 --> 00:13:56,110
know something was missing from inside

00:13:51,699 --> 00:13:59,860
of our driver and we started digging in

00:13:56,110 --> 00:14:04,769
this problem the funny thing was that we

00:13:59,860 --> 00:14:09,610
tried to raise all requests coming from

00:14:04,769 --> 00:14:11,100
from this validation cluster manager at

00:14:09,610 --> 00:14:14,680
the monument when we run this

00:14:11,100 --> 00:14:16,510
application all requests coming to to

00:14:14,680 --> 00:14:19,690
the driver and the interesting thing was

00:14:16,510 --> 00:14:23,170
that you know no a Serb is no Yocto were

00:14:19,690 --> 00:14:24,610
coming from from our dread to total

00:14:23,170 --> 00:14:28,420
driver so you know

00:14:24,610 --> 00:14:31,989
for some reason it's like even before

00:14:28,420 --> 00:14:33,730
touching our device driver federal

00:14:31,989 --> 00:14:38,739
collateral manager or already knew that

00:14:33,730 --> 00:14:41,619
we are not good and yeah and it was kind

00:14:38,739 --> 00:14:43,929
of interesting situation cause from one

00:14:41,619 --> 00:14:46,449
point of view our application without

00:14:43,929 --> 00:14:49,809
even communicating with our driver can

00:14:46,449 --> 00:14:58,199
know that we are not good from the other

00:14:49,809 --> 00:15:02,529
point of view Microsoft has a wonderful

00:14:58,199 --> 00:15:04,389
very powerful drink integrated into the

00:15:02,529 --> 00:15:08,980
operating system itself it just lives

00:15:04,389 --> 00:15:10,689
also in kernel and user mode but the

00:15:08,980 --> 00:15:13,269
name of the thing is windows management

00:15:10,689 --> 00:15:18,389
instrumentation it's WMI it's

00:15:13,269 --> 00:15:24,399
technically built for to simplify

00:15:18,389 --> 00:15:30,100
machine management but not only we can

00:15:24,399 --> 00:15:33,489
also look at WMS kind of database which

00:15:30,100 --> 00:15:35,679
require auto information from from the

00:15:33,489 --> 00:15:37,569
drivers from from the software if

00:15:35,679 --> 00:15:41,769
software definitely wants to publish

00:15:37,569 --> 00:15:45,879
this information and if you look at the

00:15:41,769 --> 00:15:49,919
stack a WMI stack we see Scottie mini

00:15:45,879 --> 00:15:52,929
pool driver almost on bottom of the

00:15:49,919 --> 00:15:55,839
image so Scotty manipulators should

00:15:52,929 --> 00:15:59,110
provide something to provide some kind

00:15:55,839 --> 00:16:03,549
of information that we didn't provide

00:15:59,110 --> 00:16:07,079
yet the to make basically to make to

00:16:03,549 --> 00:16:11,199
notify Windows that we do support

00:16:07,079 --> 00:16:18,999
Microsoft clustering and well at the

00:16:11,199 --> 00:16:24,009
point we just started studying our size

00:16:18,999 --> 00:16:29,199
as dragon just trying to disassemble it

00:16:24,009 --> 00:16:31,089
well to see what what what technical

00:16:29,199 --> 00:16:33,360
what technically happens inside stuff

00:16:31,089 --> 00:16:33,360
and

00:16:34,670 --> 00:16:41,089
one of the franching basically

00:16:38,389 --> 00:16:44,970
implemented by many people driver is

00:16:41,089 --> 00:16:47,040
kind of W in my installation function

00:16:44,970 --> 00:16:48,989
and we started deep inside of this

00:16:47,040 --> 00:16:51,119
function trying to disassemble it and

00:16:48,989 --> 00:16:57,059
see what what what's going on what's

00:16:51,119 --> 00:17:00,259
inside and as you can see instead part

00:16:57,059 --> 00:17:06,140
of this function just initialization of

00:17:00,259 --> 00:17:10,439
SAS Global ideally global UID list and

00:17:06,140 --> 00:17:12,120
looking into wdk documentation pretty

00:17:10,439 --> 00:17:19,649
pretty easy to find the structure

00:17:12,120 --> 00:17:22,770
because we have heavy structure inside

00:17:19,649 --> 00:17:26,610
we have basically one number that what

00:17:22,770 --> 00:17:29,370
we have what they call sky aduba WMI

00:17:26,610 --> 00:17:32,779
leap context it's pretty huge structure

00:17:29,370 --> 00:17:32,779
one of the member of the structure is

00:17:34,580 --> 00:17:44,070
Scotty William o WM I give ad reg info

00:17:40,020 --> 00:17:45,630
which contains pointer to global your

00:17:44,070 --> 00:17:48,630
idea so from that point it was pretty

00:17:45,630 --> 00:17:51,779
pretty much either pretty much simple we

00:17:48,630 --> 00:17:57,870
just can go try to disassemble its

00:17:51,779 --> 00:18:00,330
forward and well it is one to two

00:17:57,870 --> 00:18:02,760
numbers basically you see there are

00:18:00,330 --> 00:18:08,100
three but well to the most interesting

00:18:02,760 --> 00:18:13,679
and you have kind of bad string you just

00:18:08,100 --> 00:18:19,799
need to rebuild gid from the bio stream

00:18:13,679 --> 00:18:22,139
and then just back to WD key those two

00:18:19,799 --> 00:18:25,429
class they define it inside of WD key so

00:18:22,139 --> 00:18:31,529
which means that there are two classes

00:18:25,429 --> 00:18:34,919
to WMA classes that we need to implement

00:18:31,529 --> 00:18:36,620
one of them adapter information query

00:18:34,919 --> 00:18:40,710
and another one is port information

00:18:36,620 --> 00:18:43,200
method and as soon as we managed

00:18:40,710 --> 00:18:46,169
implemented staff and driver build

00:18:43,200 --> 00:18:47,549
driver Ron driver it was better cause

00:18:46,169 --> 00:18:53,869
you know windows

00:18:47,549 --> 00:18:56,489
recognize that our driver as a well it

00:18:53,869 --> 00:19:00,299
Scotty cereals Cassie

00:18:56,489 --> 00:19:07,460
HBA and we just moved a little bit

00:19:00,299 --> 00:19:13,590
forward the next step was part of

00:19:07,460 --> 00:19:21,029
storage validation test and at that

00:19:13,590 --> 00:19:24,109
stage windows this clutter manager tries

00:19:21,029 --> 00:19:28,049
to find try to figure out if

00:19:24,109 --> 00:19:34,799
disconnected attach it to HBA is

00:19:28,049 --> 00:19:40,759
eligible for to be used for clustering

00:19:34,799 --> 00:19:44,220
and at that moment you see it just both

00:19:40,759 --> 00:19:46,619
falls and it was also kind of very

00:19:44,220 --> 00:19:50,269
interesting information cuz we knew that

00:19:46,619 --> 00:19:52,769
disk because if you go to Microsoft

00:19:50,269 --> 00:19:56,639
website and try to find any information

00:19:52,769 --> 00:19:59,399
regarding to eligibility it's very

00:19:56,639 --> 00:20:04,109
simple the list is also pretty pretty

00:19:59,399 --> 00:20:11,759
simple your disk has to be base disk it

00:20:04,109 --> 00:20:15,629
can be GPT or mass booster MBR it should

00:20:11,759 --> 00:20:20,190
be system it has to support skies III

00:20:15,629 --> 00:20:26,100
and it also need support persistent

00:20:20,190 --> 00:20:28,769
reservation we tried to see what what's

00:20:26,100 --> 00:20:31,769
wrong what went wrong cause you know we

00:20:28,769 --> 00:20:34,609
haven't seen any requests regarding to

00:20:31,769 --> 00:20:39,419
procedural reservation of the player

00:20:34,609 --> 00:20:42,090
this was basically it was formatted as

00:20:39,419 --> 00:20:46,679
NTFS and everything will look like we

00:20:42,090 --> 00:20:51,090
fulfilled all the requirements and then

00:20:46,679 --> 00:20:54,710
well we started looking into log file

00:20:51,090 --> 00:20:54,710
coming together with

00:20:57,010 --> 00:21:04,120
with this test and there are two

00:21:00,670 --> 00:21:09,790
messages like his class star supported

00:21:04,120 --> 00:21:13,660
and well she's resulted without message

00:21:09,790 --> 00:21:15,460
that that poor driver does not support

00:21:13,660 --> 00:21:17,760
class drink and this message is

00:21:15,460 --> 00:21:21,580
extremely misleading because you know

00:21:17,760 --> 00:21:24,070
when you think about poor driver we are

00:21:21,580 --> 00:21:26,710
even not at the level of poor Darrow we

00:21:24,070 --> 00:21:32,650
are taking a little bit we are sitting

00:21:26,710 --> 00:21:34,690
beneath of that poor driver and women

00:21:32,650 --> 00:21:36,370
don't don't don't own this poor driver

00:21:34,690 --> 00:21:36,790
because it's part of for Microsoft astir

00:21:36,370 --> 00:21:43,660
bution

00:21:36,790 --> 00:21:48,760
and well we started and we tried to

00:21:43,660 --> 00:21:51,070
figure out what's wrong the first and

00:21:48,760 --> 00:21:53,860
third thing that we did is just try to

00:21:51,070 --> 00:21:59,170
find function each class this class has

00:21:53,860 --> 00:22:04,060
supported as a part of cluster cluster

00:21:59,170 --> 00:22:06,490
manager keep tall said we trying to find

00:22:04,060 --> 00:22:09,210
it inside of binaries and here finally

00:22:06,490 --> 00:22:13,690
some attempt well yes we found this

00:22:09,210 --> 00:22:23,770
function exported by a cluster da layer

00:22:13,690 --> 00:22:25,930
and it was good yeah cuz well because by

00:22:23,770 --> 00:22:28,870
these assembly this financing we we

00:22:25,930 --> 00:22:34,470
managed to find that the piece would one

00:22:28,870 --> 00:22:39,070
of the piece which was meeting its what

00:22:34,470 --> 00:22:41,380
Microsoft call its one special New York

00:22:39,070 --> 00:22:46,150
though it's one special healthy Tier III

00:22:41,380 --> 00:22:49,090
CTL schedule miniport not quorum capable

00:22:46,150 --> 00:22:52,690
and another thing that Microsoft sent

00:22:49,090 --> 00:22:55,330
through ICT else Casimir port our CTL

00:22:52,690 --> 00:22:58,570
which kind of handshake between

00:22:55,330 --> 00:23:00,970
applications and miniport driver and the

00:22:58,570 --> 00:23:02,110
problem is that this stuff is not

00:23:00,970 --> 00:23:04,860
documented

00:23:02,110 --> 00:23:04,860
really

00:23:06,400 --> 00:23:11,880
and it's a kind of once against the kind

00:23:09,910 --> 00:23:17,470
of handshake between application and

00:23:11,880 --> 00:23:23,440
storage vendor as soon as we implemented

00:23:17,470 --> 00:23:27,850
this warm warm capable I have a CTL it

00:23:23,440 --> 00:23:33,250
was it was better because we managed to

00:23:27,850 --> 00:23:36,580
pass all storage related issues except

00:23:33,250 --> 00:23:41,140
for probably the last one and this one

00:23:36,580 --> 00:23:43,300
was related to procedural generation and

00:23:41,140 --> 00:23:44,740
the finally thing was cause we knew that

00:23:43,300 --> 00:23:46,540
procedural iteration works with a

00:23:44,740 --> 00:23:51,070
back-end that works pretty pretty well

00:23:46,540 --> 00:23:53,170
with the atera Beck bent back end but

00:23:51,070 --> 00:23:56,730
for some reason it was failing when we

00:23:53,170 --> 00:24:00,630
use qmu Stefan but it was probably that

00:23:56,730 --> 00:24:03,670
probably some problem inside of qmu and

00:24:00,630 --> 00:24:07,480
after debating the stuff of the basic

00:24:03,670 --> 00:24:09,280
traits iterating this stuff we managed

00:24:07,480 --> 00:24:16,440
to find this problem this problem was

00:24:09,280 --> 00:24:16,440
fixed by my power was pretty elegant

00:24:18,600 --> 00:24:25,270
solution the problem was just when we

00:24:22,900 --> 00:24:32,370
use precision reservation

00:24:25,270 --> 00:24:37,120
target target identified the initiator

00:24:32,370 --> 00:24:39,520
with sketchy status blue sky status and

00:24:37,120 --> 00:24:44,520
this guy status support for the sky

00:24:39,520 --> 00:24:49,090
status was missing inside of qmu it was

00:24:44,520 --> 00:24:51,220
almost fully implemented for for a optos

00:24:49,090 --> 00:24:55,120
but for read and write requested it was

00:24:51,220 --> 00:24:57,790
just absolutely meeting and after panel

00:24:55,120 --> 00:24:59,559
fix this problem in qmu well we we

00:24:57,790 --> 00:25:06,330
managed to pass all this test we managed

00:24:59,559 --> 00:25:10,630
to build cluster and just handle two to

00:25:06,330 --> 00:25:15,429
two key for testing and really current

00:25:10,630 --> 00:25:18,070
status for now we now for sure that this

00:25:15,429 --> 00:25:20,140
solution works pretty pretty well with a

00:25:18,070 --> 00:25:26,230
scale invariant it also works

00:25:20,140 --> 00:25:29,790
for fiber channel we expecting to get

00:25:26,230 --> 00:25:33,100
more result more back ends in the future

00:25:29,790 --> 00:25:35,950
if anyone of you want to try it you're

00:25:33,100 --> 00:25:39,160
welcome just you know try to do it at

00:25:35,950 --> 00:25:43,030
home and get back with result will be

00:25:39,160 --> 00:25:43,780
happy to to get any feedback from the

00:25:43,030 --> 00:25:48,310
community

00:25:43,780 --> 00:25:54,210
well that's basically that's it well any

00:25:48,310 --> 00:25:54,210

YouTube URL: https://www.youtube.com/watch?v=FWc44WgCk8o


