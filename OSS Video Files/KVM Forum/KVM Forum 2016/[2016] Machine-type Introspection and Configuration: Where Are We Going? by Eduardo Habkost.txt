Title: [2016] Machine-type Introspection and Configuration: Where Are We Going? by Eduardo Habkost
Publication date: 2016-09-07
Playlist: KVM Forum 2016
Description: 
	In the past years we have developed multiple solutions to try to make QEMU configuration more introspectable and machine-friendly (e.g.: -readconfig/-writeconfig, qdev, QOM, QMP, and others). Those solutions have addressed many problems, but don't cover all aspects of QEMU configuration and introspection. Some areas, such as machine-types and other command-line options lack machine-friendly configuration/introspection interfaces that effectively help management software.
In this talk, we will discuss existing deficiencies and possible approaches to cover them using our existing configuration and introspection mechanisms. The talk will touch some topics discussed at previous KVM Forum 2015 talks: "Rethinking machine types" by David Gibson, and "QEMU interface introspection: from hacks to solutions" by Markus Armbruster.

Eduardo Habkost
Software Engineer, Red Hat Inc

Eduardo Habkost is a Software Engineer in the KVM team at Red Hat, who lives in Curitiba, Brazil. Having worked maintaining kernel-xen in Fedora, now he works mostly in KVM and QEMU.Before joining Red Hat in 2007, Eduardo worked for 6 years for Conectiva (which later become Mandriva), in multiple areas, including kernel code, device drivers, and packaging for the Conectiva Linux distribution.4

Slides: http://www.linux-kvm.org/images/4/46/03x06A-Eduardo_HabkostMachine-type_Introspection_and_Configuration_Where_Are_We_Going.pdf
Captions: 
	00:00:10,219 --> 00:00:19,199
my name is Eduardo i start work I

00:00:14,269 --> 00:00:22,439
started working on on qmo dealing with

00:00:19,199 --> 00:00:27,210
x86 CP models and today I'm the

00:00:22,439 --> 00:00:30,300
container of the x86 architecture code

00:00:27,210 --> 00:00:32,640
and numa and the Machine Co Co that's

00:00:30,300 --> 00:00:39,930
basically the como code for four

00:00:32,640 --> 00:00:46,190
machines in chemo question how many live

00:00:39,930 --> 00:00:46,190
where developers we have here ok this

00:00:46,480 --> 00:00:52,660
this is this taxes has a focus on the

00:00:50,380 --> 00:00:55,270
interactions between qmo and leave Earth

00:00:52,660 --> 00:01:00,640
so it's something I want to work with

00:00:55,270 --> 00:01:05,800
liver developers so I first introduced a

00:01:00,640 --> 00:01:08,250
few basic concepts about how much what r

00:01:05,800 --> 00:01:10,479
machine types how they work inside qmo

00:01:08,250 --> 00:01:12,250
then I'm going to talk about the current

00:01:10,479 --> 00:01:14,460
needs and current issues with that we

00:01:12,250 --> 00:01:17,500
have today and then discuss a few

00:01:14,460 --> 00:01:21,369
possible solutions to address the issues

00:01:17,500 --> 00:01:23,619
that and I'm going to talk about this

00:01:21,369 --> 00:01:26,590
dog has a few some overlap with previous

00:01:23,619 --> 00:01:28,690
talks on kvm forum at the rethinking

00:01:26,590 --> 00:01:30,700
machine-type stock from David Gibson and

00:01:28,690 --> 00:01:33,580
the kom interface introspection talk

00:01:30,700 --> 00:01:36,220
from Marcos and booster but I'm not

00:01:33,580 --> 00:01:38,440
addressing exactly the same issues but

00:01:36,220 --> 00:01:41,259
it's it's related but not exactly the

00:01:38,440 --> 00:01:45,810
same issue so I need to keep that in

00:01:41,259 --> 00:01:50,470
mind so first I do a few basic concept

00:01:45,810 --> 00:01:52,630
machine types are basically an

00:01:50,470 --> 00:01:54,759
abstraction side qmo that's expose it to

00:01:52,630 --> 00:02:00,459
the cash machine command line option and

00:01:54,759 --> 00:02:02,410
it has two different goals so the older

00:02:00,459 --> 00:02:06,250
go and the first goal that when they

00:02:02,410 --> 00:02:07,720
were introduced in 2013 in five was to

00:02:06,250 --> 00:02:10,149
allow the same commando binary to

00:02:07,720 --> 00:02:13,360
emulate different machines that was

00:02:10,149 --> 00:02:15,640
really simple when these ones was

00:02:13,360 --> 00:02:18,099
introduced it was just all our different

00:02:15,640 --> 00:02:23,319
powerpc machines to be emulated I I

00:02:18,099 --> 00:02:25,599
think but today you have other goals

00:02:23,319 --> 00:02:28,770
with this interface that's basically

00:02:25,599 --> 00:02:31,030
keeping backwards compatibility

00:02:28,770 --> 00:02:34,330
regarding common line compatibility

00:02:31,030 --> 00:02:36,610
migration compatibility and gas ABI so

00:02:34,330 --> 00:02:40,569
you could keep a prevailing p.m. and

00:02:36,610 --> 00:02:44,500
keep all these things working and they

00:02:40,569 --> 00:02:47,520
do that by hiding something's behind a

00:02:44,500 --> 00:02:50,470
machine-type name so machine type name

00:02:47,520 --> 00:02:54,010
encapsulate the construction of basic

00:02:50,470 --> 00:02:56,890
devices of a virtual machine it

00:02:54,010 --> 00:02:57,730
encapsulates some options related to my

00:02:56,890 --> 00:03:00,730
fish migrate

00:02:57,730 --> 00:03:02,290
dream and lots of other defaults that

00:03:00,730 --> 00:03:05,409
you don't want to break when you upgrade

00:03:02,290 --> 00:03:07,569
qmo so it basically tried to tries to

00:03:05,409 --> 00:03:12,340
hide everything behind a simple machine

00:03:07,569 --> 00:03:14,440
type name this is how machine types look

00:03:12,340 --> 00:03:17,739
alike when they were introduced in 2005

00:03:14,440 --> 00:03:20,950
it was really simple it had basically a

00:03:17,739 --> 00:03:24,549
name a description and initialization

00:03:20,950 --> 00:03:27,879
function it every all the magic happen

00:03:24,549 --> 00:03:29,769
inside that code so it just allows you

00:03:27,879 --> 00:03:31,060
to call different nations ation

00:03:29,769 --> 00:03:34,030
functions depending on the machine Type

00:03:31,060 --> 00:03:37,870
O were using and when we introduce that

00:03:34,030 --> 00:03:42,310
we have five different machines today

00:03:37,870 --> 00:03:44,799
this is how it looks like so since that

00:03:42,310 --> 00:03:46,420
time lots of different things happen

00:03:44,799 --> 00:03:51,700
don't worry about understand everything

00:03:46,420 --> 00:03:54,670
that said just to compare the two stages

00:03:51,700 --> 00:03:56,920
today so basically machine class the

00:03:54,670 --> 00:03:59,500
machines were converted to be home

00:03:56,920 --> 00:04:08,889
classes to use the comb object como

00:03:59,500 --> 00:04:10,480
object model and lots of things that

00:04:08,889 --> 00:04:13,810
were hidden inside the initialization

00:04:10,480 --> 00:04:16,090
function will move it to the machine now

00:04:13,810 --> 00:04:19,410
called machine class object but basic

00:04:16,090 --> 00:04:21,820
basically the same as before to help

00:04:19,410 --> 00:04:23,530
reusing common code to do the same

00:04:21,820 --> 00:04:26,740
things relate to different machines and

00:04:23,530 --> 00:04:29,320
to help expose additional introspection

00:04:26,740 --> 00:04:31,180
information to the outside and today

00:04:29,320 --> 00:04:36,400
this thing has grown you have more than

00:04:31,180 --> 00:04:42,460
120 different machines and now we are

00:04:36,400 --> 00:04:45,639
going to see to have to see to see the

00:04:42,460 --> 00:04:49,240
effects of that growth so basically

00:04:45,639 --> 00:04:51,160
today we try to encapsulate the

00:04:49,240 --> 00:04:52,990
differences between machine types in two

00:04:51,160 --> 00:04:55,150
different different ways we have the

00:04:52,990 --> 00:04:57,760
basically by this simple way the old way

00:04:55,150 --> 00:04:59,949
that's basically running different code

00:04:57,760 --> 00:05:02,669
when you use machine types so you call

00:04:59,949 --> 00:05:05,950
different initial initial unit functions

00:05:02,669 --> 00:05:08,349
then you have other difference that are

00:05:05,950 --> 00:05:10,040
basically inside machine class that's

00:05:08,349 --> 00:05:13,130
basically as data

00:05:10,040 --> 00:05:14,570
and we have been trying to move stuff

00:05:13,130 --> 00:05:16,970
that's hidden inside that code to the

00:05:14,570 --> 00:05:19,480
machine class over time that's wide

00:05:16,970 --> 00:05:22,220
machine constructed so large today and

00:05:19,480 --> 00:05:23,630
that we need to keep that in mind when

00:05:22,220 --> 00:05:28,160
we are going to address these other

00:05:23,630 --> 00:05:30,650
issues so that's it that's what the

00:05:28,160 --> 00:05:32,990
machine types do they just run different

00:05:30,650 --> 00:05:33,980
code implement different behavior

00:05:32,990 --> 00:05:37,310
depends on the machine type you are

00:05:33,980 --> 00:05:40,280
using and what are the current needs we

00:05:37,310 --> 00:05:41,630
have or current issues we have when I'm

00:05:40,280 --> 00:05:45,380
going to talk about current needs I

00:05:41,630 --> 00:05:47,000
basically focus on libvirt and the

00:05:45,380 --> 00:05:48,770
starting point to see what are the

00:05:47,000 --> 00:05:52,790
current needs but to take a look at the

00:05:48,770 --> 00:05:59,150
liver code and this is what i have found

00:05:52,790 --> 00:06:01,460
so i reckon leave word to code that set

00:05:59,150 --> 00:06:04,730
jacket the machine type name trying to

00:06:01,460 --> 00:06:06,830
figure out something and what I found

00:06:04,730 --> 00:06:09,980
was lots of case where machine types

00:06:06,830 --> 00:06:12,170
were hard coded inside chemical so it

00:06:09,980 --> 00:06:14,770
basically shows that the abstraction has

00:06:12,170 --> 00:06:17,450
failed it's not hiding the Aussie tails

00:06:14,770 --> 00:06:19,520
it's basically trying to hide it but we

00:06:17,450 --> 00:06:20,990
were just trying to extract that somehow

00:06:19,520 --> 00:06:23,090
and they don't have that information

00:06:20,990 --> 00:06:26,630
they just need to check the machine type

00:06:23,090 --> 00:06:29,750
name that's all they have and many of

00:06:26,630 --> 00:06:33,260
these cases are inside helper functions

00:06:29,750 --> 00:06:34,850
that are used elsewhere so some

00:06:33,260 --> 00:06:37,670
functions are basically trying to check

00:06:34,850 --> 00:06:40,430
some what's the basic family of the

00:06:37,670 --> 00:06:42,260
machine type some of the helper

00:06:40,430 --> 00:06:45,170
functions are trying to check for

00:06:42,260 --> 00:06:52,250
specific devices or specific features of

00:06:45,170 --> 00:06:53,900
the machine type so this is what shows

00:06:52,250 --> 00:06:59,180
what Liberty needs and what we are not

00:06:53,900 --> 00:07:04,940
providing to them and so before I try to

00:06:59,180 --> 00:07:07,220
address solutions let's show you how

00:07:04,940 --> 00:07:11,180
exactly lead word is communicating to

00:07:07,220 --> 00:07:13,940
with qm so basically divided

00:07:11,180 --> 00:07:15,350
communicator runs qmo in at two

00:07:13,940 --> 00:07:18,510
different moments this is a very

00:07:15,350 --> 00:07:21,720
simplified model so

00:07:18,510 --> 00:07:24,320
if if I'm wrong liberty the virus could

00:07:21,720 --> 00:07:28,500
correct me and we could discuss that

00:07:24,320 --> 00:07:31,020
there are 20 so leave word runs qmo when

00:07:28,500 --> 00:07:33,780
it rises a when initializing to check

00:07:31,020 --> 00:07:36,000
what qm escape of the cable of capable

00:07:33,780 --> 00:07:38,790
of doing so it starts going with a

00:07:36,000 --> 00:07:42,660
machine on and it makes a few questions

00:07:38,790 --> 00:07:44,520
too quick to qmo to cook unp using a few

00:07:42,660 --> 00:07:46,560
different comments there are some query

00:07:44,520 --> 00:07:49,890
comments I will focus on Cora machines

00:07:46,560 --> 00:07:52,620
but there are others and it saves that

00:07:49,890 --> 00:07:56,910
song on a cache that the qmo capability

00:07:52,620 --> 00:08:00,060
sketch and when we are going to start a

00:07:56,910 --> 00:08:01,740
vm leave work is going to run to them

00:08:00,060 --> 00:08:05,160
again with all the right parameters

00:08:01,740 --> 00:08:08,700
depending on the vm config and then you

00:08:05,160 --> 00:08:13,740
have a vm run the issue we have here is

00:08:08,700 --> 00:08:15,900
that this data that is returned here is

00:08:13,740 --> 00:08:19,320
not complete that's why the birds has

00:08:15,900 --> 00:08:24,060
all this code tries to deal with machine

00:08:19,320 --> 00:08:26,010
types and another issue I'm not I not

00:08:24,060 --> 00:08:29,220
sure we can say issue but I see that as

00:08:26,010 --> 00:08:32,580
an issue is that before qm is started

00:08:29,220 --> 00:08:33,840
here no data is written there is no data

00:08:32,580 --> 00:08:35,510
flowing from campbell to leave word

00:08:33,840 --> 00:08:38,669
arrow because Graham is not running yet

00:08:35,510 --> 00:08:40,440
so if you need to do a screamo any

00:08:38,669 --> 00:08:46,620
questions before one in the vm you have

00:08:40,440 --> 00:08:49,470
no opportunity to do that so a little

00:08:46,620 --> 00:08:52,680
bit about coding machines the quarry

00:08:49,470 --> 00:08:55,770
machines comment is really simple it

00:08:52,680 --> 00:09:00,210
simply returns a list of machinery

00:08:55,770 --> 00:09:02,820
structs it's a clumpy comment and it is

00:09:00,210 --> 00:09:06,270
it returns are really tiny a really

00:09:02,820 --> 00:09:08,460
small subset of the machine type

00:09:06,270 --> 00:09:11,610
information we have inside pool so we

00:09:08,460 --> 00:09:14,670
have all these fields inside qmo and

00:09:11,610 --> 00:09:16,230
right today we have just five fields so

00:09:14,670 --> 00:09:20,760
that's a really small amount of

00:09:16,230 --> 00:09:23,610
information we have here but ok

00:09:20,760 --> 00:09:26,730
extending power machines is easy I don't

00:09:23,610 --> 00:09:29,480
know what why we don't have the will you

00:09:26,730 --> 00:09:29,480
don't do that today

00:09:29,580 --> 00:09:35,040
that is supposed to be easy so we just

00:09:33,180 --> 00:09:37,740
move data to machine class if it's not

00:09:35,040 --> 00:09:40,050
there yet and you add new foods to

00:09:37,740 --> 00:09:48,890
machining info and if it can ask for

00:09:40,050 --> 00:09:48,890
that so that's supposed to be easy but I

00:09:49,100 --> 00:09:55,260
believe there's some information you

00:09:51,300 --> 00:09:57,210
can't return that way so just to

00:09:55,260 --> 00:10:00,750
summarize what kind of queries you might

00:09:57,210 --> 00:10:02,370
might want to do to make two qmo we can

00:10:00,750 --> 00:10:03,990
ask for a step that depends only on the

00:10:02,370 --> 00:10:07,170
kurma binary you want to know what

00:10:03,990 --> 00:10:09,240
combiner is capable of doing which can p

00:10:07,170 --> 00:10:13,800
comments are available you may want to

00:10:09,240 --> 00:10:16,860
copy schema that's what related to Marco

00:10:13,800 --> 00:10:18,300
stock from last year and this is the

00:10:16,860 --> 00:10:21,420
things are already working it's already

00:10:18,300 --> 00:10:22,830
available then you might want to ask

00:10:21,420 --> 00:10:24,750
something that depends only on the

00:10:22,830 --> 00:10:26,670
machine type name and we have Corey

00:10:24,750 --> 00:10:31,350
machines and it should supposed to be

00:10:26,670 --> 00:10:34,380
easy to extend I just don't know how

00:10:31,350 --> 00:10:38,360
much that we can grow but can still make

00:10:34,380 --> 00:10:41,940
it grow I don't know for how long but

00:10:38,360 --> 00:10:43,890
now we have we might want to ask live

00:10:41,940 --> 00:10:46,800
word perceptive that depends on the

00:10:43,890 --> 00:10:49,970
machine type and machine options and

00:10:46,800 --> 00:10:52,890
machine options include the accelerator

00:10:49,970 --> 00:10:56,220
either you're using kvm or TCG some

00:10:52,890 --> 00:10:59,310
there may be some differences and set

00:10:56,220 --> 00:11:00,810
like that and you can ask you a move for

00:10:59,310 --> 00:11:03,350
that information because qm is not

00:11:00,810 --> 00:11:06,330
running at you can ask questions only

00:11:03,350 --> 00:11:07,500
before you start the vm on the very

00:11:06,330 --> 00:11:09,090
beginning you don't know what the

00:11:07,500 --> 00:11:12,900
options you are going to use and can

00:11:09,090 --> 00:11:15,120
query that and the same happens if you

00:11:12,900 --> 00:11:18,900
have any information that depends on

00:11:15,120 --> 00:11:23,850
other options and you can s can move for

00:11:18,900 --> 00:11:28,560
that so I'll try to give a few examples

00:11:23,850 --> 00:11:32,970
of things I think that may apply to k is

00:11:28,560 --> 00:11:36,150
two and three and on some case we may

00:11:32,970 --> 00:11:38,970
try to move information to category one

00:11:36,150 --> 00:11:39,940
but we need to see if we can do that or

00:11:38,970 --> 00:11:51,020
not

00:11:39,940 --> 00:11:56,540
so one example here is CPU slots so so

00:11:51,020 --> 00:12:00,230
basically today we have cpu hot plug and

00:11:56,540 --> 00:12:03,020
we models if you're hot plug as just

00:12:00,230 --> 00:12:06,650
adding devices to to the machine using

00:12:03,020 --> 00:12:09,050
the vice head when you do that we have a

00:12:06,650 --> 00:12:13,280
common core called query hot pluggable

00:12:09,050 --> 00:12:15,770
CPUs that tells us how exactly you can

00:12:13,280 --> 00:12:17,660
where exactly you can plug CPUs what are

00:12:15,770 --> 00:12:19,490
the values parameters you can do that

00:12:17,660 --> 00:12:24,260
where you can do that because on some

00:12:19,490 --> 00:12:26,480
machines you can attach digital threads

00:12:24,260 --> 00:12:29,630
directly also machines you can attach

00:12:26,480 --> 00:12:31,310
only entire sockets and you need that

00:12:29,630 --> 00:12:34,520
information to be able to know what can

00:12:31,310 --> 00:12:37,390
be hot plug it but what if you want to

00:12:34,520 --> 00:12:39,800
do that same for no hot plug cpus and

00:12:37,390 --> 00:12:42,650
one of the things we have been trying to

00:12:39,800 --> 00:12:44,330
do is to move the SNP configuration to

00:12:42,650 --> 00:12:48,170
something that's closer to the other

00:12:44,330 --> 00:12:49,520
devices but how exactly do you know what

00:12:48,170 --> 00:12:51,830
are the available sockets on your

00:12:49,520 --> 00:12:59,390
machine if you didn't you didn't start

00:12:51,830 --> 00:13:02,770
it yet so on this case it's on PC it's

00:12:59,390 --> 00:13:06,470
quite easy you have sequential circuits

00:13:02,770 --> 00:13:09,110
but on some other or some these sets of

00:13:06,470 --> 00:13:11,270
sockets are available CP parameters

00:13:09,110 --> 00:13:15,740
depend on the machine so you you need to

00:13:11,270 --> 00:13:18,610
ask the machine forget another example I

00:13:15,740 --> 00:13:24,530
think this is the most complex one is

00:13:18,610 --> 00:13:30,230
address assignment so address assignment

00:13:24,530 --> 00:13:33,740
code the the set of addresses available

00:13:30,230 --> 00:13:36,589
where you can put devices on qmo depends

00:13:33,740 --> 00:13:39,230
on both the machine type the default

00:13:36,589 --> 00:13:42,500
device you have on machine the buses you

00:13:39,230 --> 00:13:45,320
have a machine and depends on the audio

00:13:42,500 --> 00:13:47,660
other devices you add to the machine the

00:13:45,320 --> 00:13:50,440
solution we have today is that liver

00:13:47,660 --> 00:13:50,440
duplicates

00:13:50,460 --> 00:13:55,290
all the logic that's implicit inside qmo

00:13:53,430 --> 00:13:57,570
for address assignment inside livered

00:13:55,290 --> 00:13:59,520
code so we have this file Q and the

00:13:57,570 --> 00:14:01,860
domain address that's it that's

00:13:59,520 --> 00:14:06,930
basically a very large collection of

00:14:01,860 --> 00:14:09,120
special cases that tells us okay water

00:14:06,930 --> 00:14:11,460
dresses are available what are the rules

00:14:09,120 --> 00:14:16,230
depending on the machine type so for

00:14:11,460 --> 00:14:18,870
example this is from that file it has

00:14:16,230 --> 00:14:21,330
some code that needs to check okay is it

00:14:18,870 --> 00:14:24,420
using a high-poverty machine so we need

00:14:21,330 --> 00:14:27,090
to validate the addresses in those rules

00:14:24,420 --> 00:14:28,980
are using a cuter defied machine and it

00:14:27,090 --> 00:14:32,190
validates the addresses using those

00:14:28,980 --> 00:14:36,330
other rules then it gets more and more

00:14:32,190 --> 00:14:39,600
complex so I have other cases so if

00:14:36,330 --> 00:14:42,420
you're adding a serial port and you're

00:14:39,600 --> 00:14:46,110
on a p-series machine then you need to

00:14:42,420 --> 00:14:47,730
know that the device type of that that

00:14:46,110 --> 00:14:49,890
the serial device is going to use

00:14:47,730 --> 00:14:51,750
spectra vio so it's going to use an

00:14:49,890 --> 00:14:55,170
address so we need to take the extreme

00:14:51,750 --> 00:14:57,960
account into account and do that I

00:14:55,170 --> 00:15:00,330
locate an address to the serial port all

00:14:57,960 --> 00:15:05,220
because you can't ask you a MOOC am is

00:15:00,330 --> 00:15:08,430
not running yet so those are the issues

00:15:05,220 --> 00:15:11,660
i want to address now about the

00:15:08,430 --> 00:15:11,660
solutions you might have for that

00:15:18,350 --> 00:15:26,340
so back to the way qmo is run by

00:15:22,500 --> 00:15:29,640
liberals and they communicate one

00:15:26,340 --> 00:15:32,730
solution is to okay let's run qmo and

00:15:29,640 --> 00:15:36,410
ask the questions you need ask all those

00:15:32,730 --> 00:15:39,930
questions and then run to em again and

00:15:36,410 --> 00:15:44,160
start the vm the problem with this is

00:15:39,930 --> 00:15:47,630
that live word we are trying very hard

00:15:44,160 --> 00:15:50,070
to reduce the good time of vm so Libert

00:15:47,630 --> 00:15:53,370
does not do that because you don't want

00:15:50,070 --> 00:15:55,620
to order latency involved loading cream

00:15:53,370 --> 00:15:59,760
again asking those questions and then

00:15:55,620 --> 00:16:03,180
restarting it another solution we may

00:15:59,760 --> 00:16:06,420
have that's what I'm going to propose

00:16:03,180 --> 00:16:11,570
and I want to hear feedback about that

00:16:06,420 --> 00:16:14,970
is that you could have a mechanism that

00:16:11,570 --> 00:16:21,930
could that could allow you to ask us

00:16:14,970 --> 00:16:24,090
questions before configuring the vm this

00:16:21,930 --> 00:16:27,120
way you could have let live what have

00:16:24,090 --> 00:16:28,650
all the information you need that

00:16:27,120 --> 00:16:30,930
couldn't be carried at the very

00:16:28,650 --> 00:16:36,000
beginning and then you could configure

00:16:30,930 --> 00:16:40,770
the vm and start vm and problem would be

00:16:36,000 --> 00:16:43,500
addressed the only issue with that is

00:16:40,770 --> 00:16:46,860
that we will need to change some things

00:16:43,500 --> 00:16:49,290
inside qm so this is shows how

00:16:46,860 --> 00:16:50,790
initialization works on qmo and that's

00:16:49,290 --> 00:16:54,060
probably one of the reasons you don't

00:16:50,790 --> 00:16:57,060
have something like that though

00:16:54,060 --> 00:17:00,180
basically when qm is started it's going

00:16:57,060 --> 00:17:03,240
to parse the the options initialize the

00:17:00,180 --> 00:17:06,240
machine and then execute it on the

00:17:03,240 --> 00:17:08,819
thermal main loop only when you start

00:17:06,240 --> 00:17:10,380
the execution phase the monitor is going

00:17:08,819 --> 00:17:13,140
to be available for corrine so that's

00:17:10,380 --> 00:17:14,699
too late you can ask more questions that

00:17:13,140 --> 00:17:17,670
would allow you to configure the machine

00:17:14,699 --> 00:17:20,100
correctly because it's the machines

00:17:17,670 --> 00:17:22,950
already initialize it another issue is

00:17:20,100 --> 00:17:26,100
that all these steps

00:17:22,950 --> 00:17:28,200
sets global variables everywhere instead

00:17:26,100 --> 00:17:29,940
of just having a single place where

00:17:28,200 --> 00:17:33,720
everything is configured but that's

00:17:29,940 --> 00:17:38,940
something yet we need to address so we

00:17:33,720 --> 00:17:41,250
would need to extend kon would do

00:17:38,940 --> 00:17:44,040
something like this if you want to make

00:17:41,250 --> 00:17:46,920
you cannot be available so we would need

00:17:44,040 --> 00:17:49,860
to start um uh main loop before the

00:17:46,920 --> 00:17:53,460
machine is initializing allow qmp

00:17:49,860 --> 00:17:56,220
queries to be made then allows vm

00:17:53,460 --> 00:18:00,140
options to be set and then you can ask

00:17:56,220 --> 00:18:03,600
Jeremy to proceed with initialization I

00:18:00,140 --> 00:18:06,780
check well I had a question mark here

00:18:03,600 --> 00:18:09,030
because I'm not sure how exactly would

00:18:06,780 --> 00:18:11,370
configure that but we will need to set

00:18:09,030 --> 00:18:19,170
some more option somewhere and then

00:18:11,370 --> 00:18:23,640
initialize the machine so to proceed

00:18:19,170 --> 00:18:25,980
with that what do we need to do so first

00:18:23,640 --> 00:18:27,930
step is we need to enumerate what we are

00:18:25,980 --> 00:18:30,990
not providing to liberate and divert

00:18:27,930 --> 00:18:35,940
needs is something I mean I took a look

00:18:30,990 --> 00:18:38,160
at the code found some cases but it's a

00:18:35,940 --> 00:18:42,360
lot I didn't check every single place

00:18:38,160 --> 00:18:44,640
where information is lacking then we can

00:18:42,360 --> 00:18:47,400
scale it we can extend great machine so

00:18:44,640 --> 00:18:49,410
that should be the easy part there are

00:18:47,400 --> 00:18:52,410
some cases where the new solution I i

00:18:49,410 --> 00:18:54,720
I'm talking about is not necessary and

00:18:52,410 --> 00:18:56,520
some people may might even where I go

00:18:54,720 --> 00:18:58,320
okay you should never need that and

00:18:56,520 --> 00:19:03,320
everything should be available before

00:18:58,320 --> 00:19:06,900
you start qmo on the problem step and

00:19:03,320 --> 00:19:09,900
then we could we need to design new PMP

00:19:06,900 --> 00:19:13,610
calories for all that information I'm

00:19:09,900 --> 00:19:16,050
saying this is hard not because it's

00:19:13,610 --> 00:19:18,480
necessarily a hard task but before

00:19:16,050 --> 00:19:21,180
because it's going to involve both

00:19:18,480 --> 00:19:22,830
designing the interface discussing with

00:19:21,180 --> 00:19:25,560
liver developers chrome developers to

00:19:22,830 --> 00:19:29,060
find what's the proper way to do that so

00:19:25,560 --> 00:19:29,060
it might take take a little while

00:19:29,140 --> 00:19:35,050
and then we could implement something

00:19:31,990 --> 00:19:37,720
that could allow coverage to be made

00:19:35,050 --> 00:19:39,280
before initializing machine so we would

00:19:37,720 --> 00:19:43,210
need to make the monitor available for

00:19:39,280 --> 00:19:46,750
machining it's like I said and we would

00:19:43,210 --> 00:19:49,300
need to implement comments that was

00:19:46,750 --> 00:19:55,270
allowed allow options to be set before

00:19:49,300 --> 00:20:01,360
starting the vm I think that's doable so

00:19:55,270 --> 00:20:04,960
I want to hear feedback and see what are

00:20:01,360 --> 00:20:08,470
the choices we have when doing that if

00:20:04,960 --> 00:20:11,860
you're open questions are we still have

00:20:08,470 --> 00:20:16,830
is how exactly we are going to configure

00:20:11,860 --> 00:20:20,770
the vm so today we have the common line

00:20:16,830 --> 00:20:23,710
we need to map that to come p comment

00:20:20,770 --> 00:20:25,450
somehow and what abstractions we are

00:20:23,710 --> 00:20:27,670
going to use for that because today we

00:20:25,450 --> 00:20:33,130
have a few different abstractions to

00:20:27,670 --> 00:20:35,290
represent configuration and inside qmo

00:20:33,130 --> 00:20:38,260
we have clem wats that basically

00:20:35,290 --> 00:20:41,410
represents configuration options in a

00:20:38,260 --> 00:20:44,650
generic way you have qualms distractions

00:20:41,410 --> 00:20:46,900
that basically is completely separate a

00:20:44,650 --> 00:20:49,960
completely separate but have their own

00:20:46,900 --> 00:20:53,470
abstractions on interfaces to check

00:20:49,960 --> 00:20:59,260
what's available do we have a copy the

00:20:53,470 --> 00:21:01,690
GOP a new API that separate from the

00:20:59,260 --> 00:21:03,820
contractions that have their own way to

00:21:01,690 --> 00:21:08,560
represent what's available what can be

00:21:03,820 --> 00:21:13,510
said what can't be set so how we are

00:21:08,560 --> 00:21:16,960
going to model that and one big open

00:21:13,510 --> 00:21:19,990
question is how exactly we are going to

00:21:16,960 --> 00:21:22,840
encode those complex rules especially

00:21:19,990 --> 00:21:25,270
the address allocation rumors can we

00:21:22,840 --> 00:21:26,770
represent that as a static data that's

00:21:25,270 --> 00:21:28,750
available in the very beginning or

00:21:26,770 --> 00:21:31,330
should we make something more dynamic

00:21:28,750 --> 00:21:36,610
that would need to be queried later

00:21:31,330 --> 00:21:38,830
based on the vm configuration so we need

00:21:36,610 --> 00:21:40,930
to find ways to encode that instead of

00:21:38,830 --> 00:21:43,630
just duplicating logic

00:21:40,930 --> 00:21:48,310
kmon divert and this is probably the

00:21:43,630 --> 00:21:51,700
hardest part and one thing we still

00:21:48,310 --> 00:21:56,080
don't know is how works how much exactly

00:21:51,700 --> 00:21:57,670
can we make query machines row because

00:21:56,080 --> 00:22:01,240
today it is very simple very simple

00:21:57,670 --> 00:22:03,310
fields but can we encode the machine and

00:22:01,240 --> 00:22:05,920
buses and all that information ecstatic

00:22:03,310 --> 00:22:08,110
for machines or do we need new new code

00:22:05,920 --> 00:22:11,680
requirements this is related to the

00:22:08,110 --> 00:22:13,480
second item I mean what can be included

00:22:11,680 --> 00:22:18,250
in query machines what need new

00:22:13,480 --> 00:22:21,880
abstractions so this is basically the

00:22:18,250 --> 00:22:23,920
proposal the open questions I have and I

00:22:21,880 --> 00:22:29,950
hope we are going to figure this out

00:22:23,920 --> 00:22:31,990
soon and after we do that we may even

00:22:29,950 --> 00:22:36,490
consider it is something i have been

00:22:31,990 --> 00:22:39,190
thinking about so can we use this this

00:22:36,490 --> 00:22:40,720
mechanism to avoid having to run

00:22:39,190 --> 00:22:42,820
Kermit's very beginning to ask for

00:22:40,720 --> 00:22:47,850
capabilities because you could just ask

00:22:42,820 --> 00:22:51,640
when necessary can we use that to make

00:22:47,850 --> 00:22:53,790
better more machine friendly not machine

00:22:51,640 --> 00:22:56,530
lacking machine types but machine like

00:22:53,790 --> 00:22:58,630
software software friendly ever

00:22:56,530 --> 00:23:02,800
reporting when initializing a machine

00:22:58,630 --> 00:23:04,960
using the new interface and there is

00:23:02,800 --> 00:23:07,470
like about splitting the machine

00:23:04,960 --> 00:23:10,000
initialization and execution because

00:23:07,470 --> 00:23:12,940
this is related to the david gibson

00:23:10,000 --> 00:23:16,710
stock from from the sea about we could

00:23:12,940 --> 00:23:20,080
make the default devices available in a

00:23:16,710 --> 00:23:22,270
more abstract way so it could be used or

00:23:20,080 --> 00:23:25,030
stored believe it or whatever this only

00:23:22,270 --> 00:23:29,760
I'm not addressing here but it could be

00:23:25,030 --> 00:23:31,870
an unsteady and this is something I I

00:23:29,760 --> 00:23:33,820
remember when people do to do this

00:23:31,870 --> 00:23:35,700
machine known one of the ideas was you

00:23:33,820 --> 00:23:38,500
could start of kilowatt machine know

00:23:35,700 --> 00:23:40,480
create all those devices link everything

00:23:38,500 --> 00:23:44,080
and you could have a working machine and

00:23:40,480 --> 00:23:47,230
this is far from being possible but do

00:23:44,080 --> 00:23:50,050
we want to do that do you want to make

00:23:47,230 --> 00:23:52,650
sure everything related to machine types

00:23:50,050 --> 00:23:55,500
could be represented as data somehow

00:23:52,650 --> 00:23:57,630
as just a device 3 somehow so it could

00:23:55,500 --> 00:24:01,220
save it somewhere else and load it

00:23:57,630 --> 00:24:04,680
instead of being represented as cold

00:24:01,220 --> 00:24:06,420
this is something actually this one of

00:24:04,680 --> 00:24:08,160
the things I wanted to address and then

00:24:06,420 --> 00:24:11,910
when preparing the material I know it's

00:24:08,160 --> 00:24:15,510
okay we need to tackle the those basic

00:24:11,910 --> 00:24:22,920
issues before we try to to cover the

00:24:15,510 --> 00:24:30,630
entire world so this is it and thank you

00:24:22,920 --> 00:24:33,720
for for your attention questions so

00:24:30,630 --> 00:24:36,060
until now it was basically like this

00:24:33,720 --> 00:24:38,700
that at one point when we were able to

00:24:36,060 --> 00:24:41,910
stop TMU of example with minus uppercase

00:24:38,700 --> 00:24:45,120
s all stating GMU was fully initialized

00:24:41,910 --> 00:24:47,400
so in order we could like just assume

00:24:45,120 --> 00:24:50,010
that third and stuff was there if we

00:24:47,400 --> 00:24:52,140
know like don't fully initialized

00:24:50,010 --> 00:24:55,050
everything that would mean that for

00:24:52,140 --> 00:24:57,120
example certain GMP commands could

00:24:55,050 --> 00:25:00,840
suddenly break for example because there

00:24:57,120 --> 00:25:04,410
are no virtual CPU the thing is do we

00:25:00,840 --> 00:25:06,750
really want to spend the effort and all

00:25:04,410 --> 00:25:10,110
the involve complexity just to avoid

00:25:06,750 --> 00:25:13,950
maybe in the end starting one additional

00:25:10,110 --> 00:25:17,550
2 mu instance for probing on the loop

00:25:13,950 --> 00:25:19,110
road side I think I'm not the right

00:25:17,550 --> 00:25:20,460
person to write this transfer that they

00:25:19,110 --> 00:25:23,160
have a liberal developers who could

00:25:20,460 --> 00:25:25,110
explain the issues I mean I know this is

00:25:23,160 --> 00:25:28,200
a problem I know we don't want to recite

00:25:25,110 --> 00:25:32,670
qmo multiple times but I haven't

00:25:28,200 --> 00:25:35,460
delivered never did that and one of the

00:25:32,670 --> 00:25:38,580
reasons so it's my limited view it seems

00:25:35,460 --> 00:25:41,110
to be startup time but we have other

00:25:38,580 --> 00:25:46,100
real reason so that

00:25:41,110 --> 00:25:49,399
additional setup we are always required

00:25:46,100 --> 00:25:53,279
here before running nokia even

00:25:49,399 --> 00:25:55,800
also I'm quite sure that there is but

00:25:53,279 --> 00:25:59,190
there might be laid out that you

00:25:55,800 --> 00:26:01,500
that still you would not be able to

00:25:59,190 --> 00:26:03,960
query before all you would need to make

00:26:01,500 --> 00:26:07,080
multiple iterations of this so that year

00:26:03,960 --> 00:26:11,490
because you start something and another

00:26:07,080 --> 00:26:13,260
day the fence them yeah I I hope you're

00:26:11,490 --> 00:26:15,330
not going to have cases like that but it

00:26:13,260 --> 00:26:17,580
might for example device addressing is

00:26:15,330 --> 00:26:20,700
an example so you when you add one

00:26:17,580 --> 00:26:23,490
device did available addresses is going

00:26:20,700 --> 00:26:26,430
to change then you add another one so if

00:26:23,490 --> 00:26:29,010
we need something more iterative I i'm

00:26:26,430 --> 00:26:30,690
not sure we really need it but it would

00:26:29,010 --> 00:26:32,640
involve running among multiple times so

00:26:30,690 --> 00:26:35,190
it's one limitation we would have

00:26:32,640 --> 00:26:37,230
exactly I just make you like want to

00:26:35,190 --> 00:26:40,440
make everybody aware that like simply

00:26:37,230 --> 00:26:42,750
doing such things could evolve a lot of

00:26:40,440 --> 00:26:45,780
complexity on the Grammy aside for

00:26:42,750 --> 00:26:47,970
example also like if we would like want

00:26:45,780 --> 00:26:49,620
to ask a running to MU instance for

00:26:47,970 --> 00:26:52,200
example what does it look like under

00:26:49,620 --> 00:26:53,820
different accelerators like with one

00:26:52,200 --> 00:26:56,790
running instance they could be done but

00:26:53,820 --> 00:26:59,070
like the complexity involved may not be

00:26:56,790 --> 00:27:04,830
worth it so that's like the same thing

00:26:59,070 --> 00:27:08,520
here that's just my comment there is

00:27:04,830 --> 00:27:10,620
another reason for wanting to do this as

00:27:08,520 --> 00:27:13,230
if we do many things two ways on the

00:27:10,620 --> 00:27:14,730
command line and in qmp it's kind of

00:27:13,230 --> 00:27:18,570
redundant and this is long-standing

00:27:14,730 --> 00:27:22,110
dream of just starting the starting qmu

00:27:18,570 --> 00:27:24,030
with next to no options at all an empty

00:27:22,110 --> 00:27:27,500
board and plug in everything configure

00:27:24,030 --> 00:27:29,880
everything over EMP once you can do that

00:27:27,500 --> 00:27:35,400
migration becomes much simpler because

00:27:29,880 --> 00:27:37,800
you can transfer the configuration why

00:27:35,400 --> 00:27:39,900
are their migration stream and the whole

00:27:37,800 --> 00:27:41,580
class of problems where a source and

00:27:39,900 --> 00:27:43,920
destination need to have exactly the

00:27:41,580 --> 00:27:45,240
same options unless you know what you're

00:27:43,920 --> 00:27:48,150
doing and then they can be slightly

00:27:45,240 --> 00:27:52,170
different that all goes away yeah so

00:27:48,150 --> 00:27:54,000
just try to illustrate that I didn't

00:27:52,170 --> 00:27:58,290
mention that but this is one different

00:27:54,000 --> 00:28:00,510
here so today when you are configuring

00:27:58,290 --> 00:28:02,670
the machine option parts and

00:28:00,510 --> 00:28:05,250
configuration effects lots of I'm using

00:28:02,670 --> 00:28:06,660
global state as something mainly okay

00:28:05,250 --> 00:28:07,080
they are global variables everywhere

00:28:06,660 --> 00:28:09,299
that

00:28:07,080 --> 00:28:10,890
don't know where they are and it's going

00:28:09,299 --> 00:28:14,549
to affect that and you don't know where

00:28:10,890 --> 00:28:18,149
it is if we do that option settings

00:28:14,549 --> 00:28:20,519
supposed to affect one thing that is

00:28:18,149 --> 00:28:22,529
tracking at the same place it might

00:28:20,519 --> 00:28:26,700
become ops I don't want to say it's

00:28:22,529 --> 00:28:29,549
going to be but I don't think I we need

00:28:26,700 --> 00:28:31,260
to use let's discuss that later so it's

00:28:29,549 --> 00:28:33,330
going to be all in one place and that's

00:28:31,260 --> 00:28:34,799
going can be transferred more easily I

00:28:33,330 --> 00:28:38,519
think that's what you're talking about

00:28:34,799 --> 00:28:41,789
right here co-ops and qmp don't mix well

00:28:38,519 --> 00:28:45,029
I know because I screwed it up myself a

00:28:41,789 --> 00:28:47,250
couple of times it would be wonderful if

00:28:45,029 --> 00:28:51,510
the command line could be co-op if I'd

00:28:47,250 --> 00:28:53,190
but it's a really big job yeah I'm maybe

00:28:51,510 --> 00:28:57,929
I'm synchronoss as something different

00:28:53,190 --> 00:29:00,450
than not an interface but just as a

00:28:57,929 --> 00:29:01,980
place where you put these stuff because

00:29:00,450 --> 00:29:04,500
we are red save that stuff there but

00:29:01,980 --> 00:29:06,389
that's not what it is it also passes and

00:29:04,500 --> 00:29:08,760
if yeah we should remove the parsing

00:29:06,389 --> 00:29:10,769
just use the saving part but maybe it

00:29:08,760 --> 00:29:13,190
won't be coops and more it's going to be

00:29:10,769 --> 00:29:26,220
something like that we need to talk

00:29:13,190 --> 00:29:29,010
vinced what okay thank you if you I

00:29:26,220 --> 00:29:31,230
think another question was how bought

00:29:29,010 --> 00:29:35,070
you are want to make a scope bosses I

00:29:31,230 --> 00:29:38,010
think it would be easier and you could

00:29:35,070 --> 00:29:41,039
get the most useful of this if you live

00:29:38,010 --> 00:29:44,250
meetings us to the guest all the options

00:29:41,039 --> 00:29:47,250
we make affecting guest state for

00:29:44,250 --> 00:29:51,899
example test you wise and other thing

00:29:47,250 --> 00:29:54,779
yeah state and we have fish dry for the

00:29:51,899 --> 00:29:58,470
harvest for the hot side configuration

00:29:54,779 --> 00:30:00,630
also cause the user interfaces and I

00:29:58,470 --> 00:30:02,639
think it would be a bit easier to get

00:30:00,630 --> 00:30:05,220
this going if you're just doing the

00:30:02,639 --> 00:30:08,639
guest state and also think that's well

00:30:05,220 --> 00:30:12,120
most machines basic stuff is involved

00:30:08,639 --> 00:30:15,029
and also which is most interesting for

00:30:12,120 --> 00:30:16,710
the equation use case that's true we

00:30:15,029 --> 00:30:18,520
don't have this separation today you

00:30:16,710 --> 00:30:24,540
have just this option

00:30:18,520 --> 00:30:24,540

YouTube URL: https://www.youtube.com/watch?v=dB6t91F_jv4


