Title: [2016] Virtualization Developer Panel
Publication date: 2016-09-01
Playlist: KVM Forum 2016
Description: 
	A panel discussion with current active contributors to (and maintainers of) KVM, QEMU, and libvirt (and related Virtualization infrastructure projects).

Topics were chosen on the spot from areas including security, new hardware features, and development process.


Stefan Hajnoczi
Red Hat, Principal Software Engineer

Stefan Hajnoczi has contributed to QEMU since 2010. He currently co-maintains the QEMU block layer together with Kevin Wolf. Now at Red Hat and previously at IBM's Linux Technology Center, Stefan has worked on disk image formats, storage migration, multi-core device emulation, and I/O performance optimization in QEMU. He also maintains the QEMU tracing subsystem and co-maintains the QEMU net subsystem, and is organization administrator for QEMU's Google Summer of Code and Outreachy involvement.

Daniel Berrange
Red Hat
Software Engineer

Daniel is a Principal Software Engineer, working in a variety of roles at Red Hat over the last 12 years. Since 2006, he has been specialized in the development of technologies related to virtualization management, as lead developer of Libvirt, GTK-VNC, Libvirt Perl, Libvirt GObject and Libvirt Sandbox, and contributor to the Xen, KVM, oVirt and OpenStack projects. Daniel is a passionate believer in the value of open source software and the benefits it brings to the world. Outside of his day job at Red Hat, he is also maintainer of the DBus Perl binding and the Entangle remote camera control & capture software.

Paolo Bonzini
Red Hat, Senior Principal Software Engineer

Paolo Bonzini works on virtualization for Red Hat, where he is a Senior Principal Software Engineer. He is currently the maintainer of the KVM hypervisor and a contributor and submaintainer for QEMU.

Andrew Honig
Tech Lead - Cloud Platform Security, Google

Den Lunev
Team Lead, Virtuozzo
Denis Lunev has started his work for Virtuozzo (ex Parallels, ex SWsoft) more than 15 years ago. From that time he has dealt with Linux namespaces for Virtuozzo, OpenVZ, Linux containers. The next big bit of work was devices emulation for Parallels Desktop and Parallels Server, proprietary virtualization products for Mac and Linux. Now he is the lead of the team in Virtuozzo supporting QEMU/KVM.
Captions: 
	00:00:09,559 --> 00:00:17,279
okay so let's get started this is the

00:00:13,110 --> 00:00:20,220
developer panel we have four panelists

00:00:17,279 --> 00:00:22,710
here but the way this really works is

00:00:20,220 --> 00:00:24,990
that we need questions from the audience

00:00:22,710 --> 00:00:28,529
we already have a list of questions here

00:00:24,990 --> 00:00:31,199
topics that we're going to discuss but

00:00:28,529 --> 00:00:33,690
you can go to this URL and you can add

00:00:31,199 --> 00:00:35,520
questions any time during the talk or if

00:00:33,690 --> 00:00:39,030
you want you can get the microphone to

00:00:35,520 --> 00:00:41,550
ask questions live and we'll just go

00:00:39,030 --> 00:00:45,059
through the questions that we get on the

00:00:41,550 --> 00:00:51,000
etherpad here so the URL is etherpad net

00:00:45,059 --> 00:00:54,480
/ lowercase P kvm forum panel okay and

00:00:51,000 --> 00:00:57,480
we'll start off by introducing the the

00:00:54,480 --> 00:01:03,210
panelists my name is Stefan harden see I

00:00:57,480 --> 00:01:04,949
work for red hat on kbm and let's just

00:01:03,210 --> 00:01:13,170
go through one out of time Dennis do you

00:01:04,949 --> 00:01:17,189
want to start your microphone yeah let's

00:01:13,170 --> 00:01:20,000
let's check the mic now it's on all the

00:01:17,189 --> 00:01:20,000
top there's a little switch

00:01:22,200 --> 00:01:29,490
my name my name is the insulin if I'm

00:01:25,409 --> 00:01:40,439
working for each other maybe 15 years at

00:01:29,490 --> 00:01:43,200
the moment not sure how to follow that

00:01:40,439 --> 00:01:45,319
one my name is Annie honig i leave the

00:01:43,200 --> 00:01:48,539
virtualization security team at Google

00:01:45,319 --> 00:01:51,360
we use kvm for Google compute engine

00:01:48,539 --> 00:01:52,890
which is our public vm offering as well

00:01:51,360 --> 00:01:55,740
as a number of other projects internal

00:01:52,890 --> 00:01:58,470
and external my entire focus is on

00:01:55,740 --> 00:02:00,360
security the way I see it KTMs value

00:01:58,470 --> 00:02:02,280
proposition is that allows you to run

00:02:00,360 --> 00:02:04,679
untrusted people's code right on your

00:02:02,280 --> 00:02:08,030
real machines so that's the number one

00:02:04,679 --> 00:02:10,769
most important feature to me and my team

00:02:08,030 --> 00:02:12,900
my main focus so may feel security up

00:02:10,769 --> 00:02:14,370
first emanator I'm fortunately vmware is

00:02:12,900 --> 00:02:21,599
the best answer I can give which is

00:02:14,370 --> 00:02:24,810
sorta sad I'm Daniel Barry I've worked

00:02:21,599 --> 00:02:26,850
for red hat for almost 15 years in the

00:02:24,810 --> 00:02:31,079
last ten years or so has been on

00:02:26,850 --> 00:02:34,680
virtualization lippert sin que VA MQM

00:02:31,079 --> 00:02:36,690
you and most bits of the user space

00:02:34,680 --> 00:02:42,560
stack above that and most recently

00:02:36,690 --> 00:02:47,310
openstax first emulator was probably

00:02:42,560 --> 00:02:51,989
dosbox or some I'm a legal console

00:02:47,310 --> 00:02:54,209
emulator so I already introduced myself

00:02:51,989 --> 00:02:58,680
for my name is Paul windy i work for

00:02:54,209 --> 00:03:01,500
headed I'm maintainer for kvm and some

00:02:58,680 --> 00:03:04,560
areas of qmo first emulator i use was of

00:03:01,500 --> 00:03:07,260
course a Commodore 64 emulator i also

00:03:04,560 --> 00:03:09,450
tried to wipe my own it managed to show

00:03:07,260 --> 00:03:11,250
commodore basic the two and then I lost

00:03:09,450 --> 00:03:12,959
interested and went back to playing

00:03:11,250 --> 00:03:15,209
games with the first and monitor i use

00:03:12,959 --> 00:03:16,530
things then is what about you you want

00:03:15,209 --> 00:03:20,549
to share what was the first emulator

00:03:16,530 --> 00:03:27,450
that you ever used just emulate i have

00:03:20,549 --> 00:03:30,150
used was buttles desktop okay cool so

00:03:27,450 --> 00:03:31,860
let's start moving on to the topics and

00:03:30,150 --> 00:03:34,049
everyone feel free if you have questions

00:03:31,860 --> 00:03:34,540
for the panel to go to this etherpad and

00:03:34,049 --> 00:03:37,360
to

00:03:34,540 --> 00:03:40,569
add them or to request a mic and we can

00:03:37,360 --> 00:03:42,340
just do them live so the first topic

00:03:40,569 --> 00:03:46,030
that a lot of people have who come to

00:03:42,340 --> 00:03:48,069
the conference especially if you are you

00:03:46,030 --> 00:03:50,469
have a team and you want to start

00:03:48,069 --> 00:03:53,290
contributing and becoming active in the

00:03:50,469 --> 00:03:56,049
kvm community in the bird and qemu and

00:03:53,290 --> 00:03:59,049
any of the projects is contributing to

00:03:56,049 --> 00:04:03,310
these projects and we always try to make

00:03:59,049 --> 00:04:04,989
it easier to contribute so let's find

00:04:03,310 --> 00:04:09,310
out let's talk a little bit about how

00:04:04,989 --> 00:04:11,769
how that's been going over time how has

00:04:09,310 --> 00:04:14,409
contributing patches has it gotten

00:04:11,769 --> 00:04:17,859
better has it got easier worse since you

00:04:14,409 --> 00:04:20,049
started contributing we don't have to go

00:04:17,859 --> 00:04:21,820
in order anyone who feels like they have

00:04:20,049 --> 00:04:24,910
something to say about this topic can

00:04:21,820 --> 00:04:27,880
just speak up go ahead what are your

00:04:24,910 --> 00:04:30,460
thoughts guys um I mean from my point of

00:04:27,880 --> 00:04:31,990
view contributing to cure view the ease

00:04:30,460 --> 00:04:36,250
of contribution is just night and day

00:04:31,990 --> 00:04:37,889
from when i first started 10 years ago i

00:04:36,250 --> 00:04:40,930
mean back in those days there was

00:04:37,889 --> 00:04:44,500
fabrice and all patches went went

00:04:40,930 --> 00:04:48,130
through him and now with the subsystem

00:04:44,500 --> 00:04:50,349
maintainer model the it's just far

00:04:48,130 --> 00:04:52,960
easier to country patches and get them

00:04:50,349 --> 00:04:57,070
accepted and and reviewed in a

00:04:52,960 --> 00:04:58,180
reasonable time since it's I'm sure

00:04:57,070 --> 00:05:00,010
there's room for improvement but it's

00:04:58,180 --> 00:05:04,990
working so much better than it used to

00:05:00,010 --> 00:05:07,120
work in the past okay so I remember a

00:05:04,990 --> 00:05:08,830
dentist the first time that we met a kvm

00:05:07,120 --> 00:05:10,599
form i think pretty much the first thing

00:05:08,830 --> 00:05:11,919
that then it said to me it was why

00:05:10,599 --> 00:05:15,940
you're not merging and reviewing our

00:05:11,919 --> 00:05:20,620
patches so i do have any i think that

00:05:15,940 --> 00:05:23,919
the station is a bit too fault sending a

00:05:20,620 --> 00:05:27,280
patch to a popular subsystem is not a

00:05:23,919 --> 00:05:31,300
big problem it will be reviewed and

00:05:27,280 --> 00:05:34,330
accepted the problem is when you unknown

00:05:31,300 --> 00:05:37,720
to community and send a patch to a

00:05:34,330 --> 00:05:42,009
subsystem which is not widely used in

00:05:37,720 --> 00:05:47,320
this case it's very difficult to get the

00:05:42,009 --> 00:05:47,980
patch merged yeah go here in the half

00:05:47,320 --> 00:05:51,520
ago

00:05:47,980 --> 00:05:54,910
I have spent a lot of time are trying to

00:05:51,520 --> 00:05:59,230
rewrite on popular disc format driver in

00:05:54,910 --> 00:06:01,630
qmo it was a real problem to get this

00:05:59,230 --> 00:06:05,580
patch is reviewed because this subsystem

00:06:01,630 --> 00:06:08,320
was needed only for me and my company

00:06:05,580 --> 00:06:12,700
right now they are working with a more

00:06:08,320 --> 00:06:19,210
common stuff and I think that the most

00:06:12,700 --> 00:06:22,680
important i think that the person could

00:06:19,210 --> 00:06:26,920
do is to collect personal reputation

00:06:22,680 --> 00:06:34,330
this is a good reputation patches are

00:06:26,920 --> 00:06:38,800
going really fast so the word is fair

00:06:34,330 --> 00:06:40,570
but it's very difficult to start if you

00:06:38,800 --> 00:06:45,610
want to start you should start from

00:06:40,570 --> 00:06:48,040
something popular so I think of course I

00:06:45,610 --> 00:06:50,950
mean we are humans so reputation is

00:06:48,040 --> 00:06:54,280
certainly a part of it but I think it's

00:06:50,950 --> 00:06:56,800
also experienced people should not be

00:06:54,280 --> 00:07:00,430
discouraged if their submissions gets to

00:06:56,800 --> 00:07:02,500
version 8 version 9 version 10 like we

00:07:00,430 --> 00:07:05,440
maintain yrs maybe can get things merge

00:07:02,500 --> 00:07:09,370
the only after two or three versions

00:07:05,440 --> 00:07:12,760
maybe even the first time but rest

00:07:09,370 --> 00:07:15,540
assured that v1 is the public v1 there

00:07:12,760 --> 00:07:19,150
were at least three or four that we

00:07:15,540 --> 00:07:21,550
threw away before we've done our own

00:07:19,150 --> 00:07:25,270
review of our own called a lot before

00:07:21,550 --> 00:07:27,940
posting so don't be afraid of iterating

00:07:25,270 --> 00:07:30,550
a lot on the patches because that's the

00:07:27,940 --> 00:07:35,050
same thing that maintain errs do just

00:07:30,550 --> 00:07:37,810
not publicly because we wait more maybe

00:07:35,050 --> 00:07:40,450
before forcing the first before passing

00:07:37,810 --> 00:07:47,530
the first version so it's perfectly

00:07:40,450 --> 00:07:49,540
normal to get more heavy reviews on the

00:07:47,530 --> 00:07:52,390
first attempts it's normal to that

00:07:49,540 --> 00:07:53,770
people don't find everything the first

00:07:52,390 --> 00:07:57,940
time that they look at the code as the

00:07:53,770 --> 00:07:59,480
code becomes more complete and as they

00:07:57,940 --> 00:08:05,480
really low-hanging for

00:07:59,480 --> 00:08:07,550
is a fixed we get we can get a better

00:08:05,480 --> 00:08:11,380
picture of the code then we find more

00:08:07,550 --> 00:08:14,600
needs so merging things takes time but

00:08:11,380 --> 00:08:18,170
if you believe that the maintenance

00:08:14,600 --> 00:08:20,060
don't want your code you're wrong we

00:08:18,170 --> 00:08:23,090
really want your code and we're not

00:08:20,060 --> 00:08:26,480
trying to make it harder for you believe

00:08:23,090 --> 00:08:27,800
me well I'll just point out i think i

00:08:26,480 --> 00:08:29,660
think that's gotten better over time I

00:08:27,800 --> 00:08:30,860
think earlier I'm under previous

00:08:29,660 --> 00:08:32,840
maintainer czar a lot of times where you

00:08:30,860 --> 00:08:34,130
send a patch and you get crickets and

00:08:32,840 --> 00:08:35,360
nobody even wants to review it or look

00:08:34,130 --> 00:08:37,160
at it I think Paulo has done a good job

00:08:35,360 --> 00:08:38,540
of being much more proactive in

00:08:37,160 --> 00:08:41,600
reviewing every patch even ones that

00:08:38,540 --> 00:08:45,290
seem a little early that person I think

00:08:41,600 --> 00:08:48,950
that we could discuss the contract in

00:08:45,290 --> 00:08:50,750
between submitters and maintenance the

00:08:48,950 --> 00:08:53,000
main problem is not the amount of

00:08:50,750 --> 00:08:55,250
iteration the main problem is the

00:08:53,000 --> 00:08:58,030
latency in between iterations when we

00:08:55,250 --> 00:09:01,100
have sent a patch and there is no answer

00:08:58,030 --> 00:09:05,050
maybe it would be a google it would be

00:09:01,100 --> 00:09:08,360
good if by serious will be smaller and

00:09:05,050 --> 00:09:16,370
on the other hand maintenance will

00:09:08,360 --> 00:09:17,810
respond r is less time out yeah so so

00:09:16,370 --> 00:09:20,060
actually what I was going to move on to

00:09:17,810 --> 00:09:22,700
is we have a follow-up question thats

00:09:20,060 --> 00:09:24,980
related to some of these things and for

00:09:22,700 --> 00:09:26,720
example from what you just said before

00:09:24,980 --> 00:09:28,700
Dennis it seems like there are certain

00:09:26,720 --> 00:09:30,560
techniques that you can use some

00:09:28,700 --> 00:09:32,480
approaches that you can take to make it

00:09:30,560 --> 00:09:34,430
easier to get your stuff accepted like

00:09:32,480 --> 00:09:35,900
you said start contributing to something

00:09:34,430 --> 00:09:37,760
that's well maintained and popular

00:09:35,900 --> 00:09:41,300
because if you send a big feature in a

00:09:37,760 --> 00:09:43,130
new area but no one reviews and works on

00:09:41,300 --> 00:09:44,650
it's going to be hard to get it merged

00:09:43,130 --> 00:09:46,820
because people won't be confident

00:09:44,650 --> 00:09:48,080
there'll be no one there who knows you

00:09:46,820 --> 00:09:52,970
they'll be no one there who understands

00:09:48,080 --> 00:09:55,850
that area and so what what approaches

00:09:52,970 --> 00:09:58,310
have you guys found besides that that

00:09:55,850 --> 00:10:00,290
helped I mean I think started with bug

00:09:58,310 --> 00:10:01,610
fixes always gets people's attention it

00:10:00,290 --> 00:10:03,530
shows that you understand the code and

00:10:01,610 --> 00:10:06,700
it almost no one will refuse a bug fix

00:10:03,530 --> 00:10:06,700
it actually if it actually fixes a bug

00:10:07,270 --> 00:10:10,580
that's a good way to sort of build up

00:10:09,170 --> 00:10:12,800
reputation as someone who knows the code

00:10:10,580 --> 00:10:14,089
I think I think it's also I mean it's

00:10:12,800 --> 00:10:16,130
true pretty much every open source

00:10:14,089 --> 00:10:17,810
project I've worked on is that there's

00:10:16,130 --> 00:10:22,040
always more patches and there is review

00:10:17,810 --> 00:10:23,570
at time so I think people who are

00:10:22,040 --> 00:10:25,100
contributing to QMI you shouldn't think

00:10:23,570 --> 00:10:27,589
that maintain errs are the only people

00:10:25,100 --> 00:10:28,970
should be reviewing anyone anyone who's

00:10:27,589 --> 00:10:30,709
on the queue mailing this should feel

00:10:28,970 --> 00:10:32,660
free to review patches that are sent

00:10:30,709 --> 00:10:36,140
there if they think they understand that

00:10:32,660 --> 00:10:38,149
area of code that just helps break the

00:10:36,140 --> 00:10:41,029
review burden across more people and

00:10:38,149 --> 00:10:43,910
also demonstrates your own ability as

00:10:41,029 --> 00:10:46,490
someone who understands the code that

00:10:43,910 --> 00:10:49,339
helps build build your reputation as a

00:10:46,490 --> 00:10:51,050
new contributor yeah yeah i mean i

00:10:49,339 --> 00:10:54,070
remember in the early days when i

00:10:51,050 --> 00:10:56,390
started contributing someone you know i

00:10:54,070 --> 00:10:58,670
noticed that my patches weren't getting

00:10:56,390 --> 00:11:01,910
viewed as quickly emerged as quickly as

00:10:58,670 --> 00:11:03,589
possible and someone told me why don't

00:11:01,910 --> 00:11:05,000
you go and ask the maintainer what you

00:11:03,589 --> 00:11:06,680
can do to help them because obviously

00:11:05,000 --> 00:11:09,709
they're busy and they don't have time to

00:11:06,680 --> 00:11:11,959
review your patches and so I did that

00:11:09,709 --> 00:11:14,930
and they basically asked me to help and

00:11:11,959 --> 00:11:16,910
start reviewing the other patches that

00:11:14,930 --> 00:11:19,279
are in their review queue and so I was

00:11:16,910 --> 00:11:21,620
able to make their life easier so I

00:11:19,279 --> 00:11:27,740
think that helped get you know get my

00:11:21,620 --> 00:11:29,450
code upstream quicker as well so there's

00:11:27,740 --> 00:11:30,709
a question here that I think Paolo who

00:11:29,450 --> 00:11:32,990
just did the keynote can probably

00:11:30,709 --> 00:11:34,520
answers how healthy is a contributor

00:11:32,990 --> 00:11:37,130
base to cuum you so you showed some of

00:11:34,520 --> 00:11:41,480
the stats on kvm you showed the

00:11:37,130 --> 00:11:44,420
contributions how are we doing for CUNY

00:11:41,480 --> 00:11:47,240
so I would have wanted to defer to Alex

00:11:44,420 --> 00:11:49,339
who's giving the same kind of poker this

00:11:47,240 --> 00:11:50,930
afternoon no yeah this afternoon i think

00:11:49,339 --> 00:11:54,140
tomorrow morning Oh tomorrow morning so

00:11:50,930 --> 00:11:57,620
let's add vanilla vs. Cartman I can talk

00:11:54,140 --> 00:12:02,480
in general about tem como le work

00:11:57,620 --> 00:12:05,779
together I think it's healthy the it

00:12:02,480 --> 00:12:07,310
varies so redhead generally has the

00:12:05,779 --> 00:12:10,490
majority of the

00:12:07,310 --> 00:12:14,960
means to add the stack it varies from

00:12:10,490 --> 00:12:17,900
about thirty percent for KDM because of

00:12:14,960 --> 00:12:21,620
the reason as I mentioned before to

00:12:17,900 --> 00:12:27,640
sixty percent for qmo and around 85 for

00:12:21,620 --> 00:12:27,640
liberal but on the other hand we have

00:12:27,790 --> 00:12:34,670
stable contributors from other companies

00:12:30,529 --> 00:12:39,170
throughout the stack we have a long tail

00:12:34,670 --> 00:12:42,470
of people i think we appreciate the

00:12:39,170 --> 00:12:46,610
efforts of people that drive by leave a

00:12:42,470 --> 00:12:49,580
patch and almost all of them sooner or

00:12:46,610 --> 00:12:52,430
later do return so maybe we have one

00:12:49,580 --> 00:12:54,589
patch every year from some person but

00:12:52,430 --> 00:12:57,260
you can see that really a lot of

00:12:54,589 --> 00:13:03,250
contributors even the not so frequent

00:12:57,260 --> 00:13:03,250
one are returning care about helping and

00:13:03,730 --> 00:13:10,130
another question is the one just below

00:13:07,640 --> 00:13:13,970
so how likely is the maintainer based

00:13:10,130 --> 00:13:16,100
for trim and are they have maintained

00:13:13,970 --> 00:13:19,130
sections of you an issue and how do we

00:13:16,100 --> 00:13:20,720
improve the situation I don't have an

00:13:19,130 --> 00:13:25,850
answer for this the only thing I know is

00:13:20,720 --> 00:13:29,589
that damn maintain sections of qmo have

00:13:25,850 --> 00:13:32,870
a pretty good defect rate in Coverity

00:13:29,589 --> 00:13:38,270
that's just a data point but at least it

00:13:32,870 --> 00:13:41,080
shows that the important code that we

00:13:38,270 --> 00:13:43,580
care about sometimes is in worse shape

00:13:41,080 --> 00:13:45,500
because that's obvious because it's

00:13:43,580 --> 00:13:48,370
complicated most of the maintenance

00:13:45,500 --> 00:13:52,360
sections of camera are really simple

00:13:48,370 --> 00:13:59,709
most of them you can even compile out

00:13:52,360 --> 00:13:59,709
and so they are not an issue and

00:14:00,029 --> 00:14:09,459
to improve the situation just ask you

00:14:04,750 --> 00:14:12,699
become a maintainer for them I mean the

00:14:09,459 --> 00:14:17,500
overall the factory for human Coverity

00:14:12,699 --> 00:14:21,430
is really low it's like 0.07 defects for

00:14:17,500 --> 00:14:23,920
every 10,000 lines of code and for the

00:14:21,430 --> 00:14:26,709
unmaintained sections is 0.03 so both of

00:14:23,920 --> 00:14:28,240
them are really low but it's even lower

00:14:26,709 --> 00:14:30,250
for the parties are not maintained

00:14:28,240 --> 00:14:35,470
mostly because it's simpler than the

00:14:30,250 --> 00:14:36,939
others okay we do have some other topics

00:14:35,470 --> 00:14:38,800
that we're going to move on to but we

00:14:36,939 --> 00:14:40,810
can we can definitely still do one of

00:14:38,800 --> 00:14:42,550
these questions I there is one here

00:14:40,810 --> 00:14:45,339
lamenting kind of the state of

00:14:42,550 --> 00:14:46,930
documentation in qmu a lot of people who

00:14:45,339 --> 00:14:49,209
start contributing hume you realize that

00:14:46,930 --> 00:14:50,350
the code is the documentation because we

00:14:49,209 --> 00:14:53,680
don't have that much internal

00:14:50,350 --> 00:14:57,279
documentation for qemu so it can be hard

00:14:53,680 --> 00:14:59,379
for new contributors because you

00:14:57,279 --> 00:15:01,990
basically just have to read a lot of the

00:14:59,379 --> 00:15:05,319
code in order to figure out how things

00:15:01,990 --> 00:15:09,339
work are there any things that should be

00:15:05,319 --> 00:15:12,430
doing to improve this or is that is that

00:15:09,339 --> 00:15:14,230
just just the nature of it for example

00:15:12,430 --> 00:15:15,819
the linux kernel does have more

00:15:14,230 --> 00:15:18,370
documentation for people who want to

00:15:15,819 --> 00:15:24,279
write new drivers you know it's a little

00:15:18,370 --> 00:15:30,100
bit easier to get into any thoughts yeah

00:15:24,279 --> 00:15:33,029
we need more dogs no but I mean we we we

00:15:30,100 --> 00:15:35,319
did have a discussion about this in emu

00:15:33,029 --> 00:15:38,139
maintainer summit yesterday and there's

00:15:35,319 --> 00:15:43,740
various things that we could be doing

00:15:38,139 --> 00:15:43,740
better for internal stuff we could be

00:15:44,459 --> 00:15:48,850
doing more formal internal API

00:15:46,660 --> 00:15:51,430
documentation and actually generating

00:15:48,850 --> 00:15:54,629
that into the documentation pages you

00:15:51,430 --> 00:15:57,250
can actually read we could have better

00:15:54,629 --> 00:16:00,129
general internal architecture concept

00:15:57,250 --> 00:16:04,600
documentation whether that's in tree or

00:16:00,129 --> 00:16:09,769
on the on the wiki we talked about

00:16:04,600 --> 00:16:12,439
having putting together the kind of

00:16:09,769 --> 00:16:14,660
up-to-date presentations people have

00:16:12,439 --> 00:16:16,189
done on on various topics so a lot of

00:16:14,660 --> 00:16:18,230
the sessions here when all of the

00:16:16,189 --> 00:16:20,749
sessions here are being recorded and a

00:16:18,230 --> 00:16:24,709
lot of those give useful information

00:16:20,749 --> 00:16:26,569
about the state of internals and if we

00:16:24,709 --> 00:16:27,999
can encourage maintainer zor people

00:16:26,569 --> 00:16:30,920
submitting new features to actually

00:16:27,999 --> 00:16:33,559
write up their new feature in a in a

00:16:30,920 --> 00:16:37,189
blog post or in a wiki feature page

00:16:33,559 --> 00:16:39,230
that's that all helps so there's a lot

00:16:37,189 --> 00:16:44,629
more we could be doing and encouraging

00:16:39,230 --> 00:16:47,839
maintenance to be doing okay yeah and so

00:16:44,629 --> 00:16:49,249
there are always a half in kvm forum

00:16:47,839 --> 00:16:51,230
presentations and there continue to be

00:16:49,249 --> 00:16:54,860
kvm forum presentations that give a good

00:16:51,230 --> 00:16:57,019
overview there's been presentations

00:16:54,860 --> 00:16:59,329
about writing new block drivers has been

00:16:57,019 --> 00:17:00,769
presentations about how does TCG work if

00:16:59,329 --> 00:17:03,439
you want to implement maybe a new

00:17:00,769 --> 00:17:07,419
architecture for example but we don't

00:17:03,439 --> 00:17:09,439
have good single source of documentation

00:17:07,419 --> 00:17:11,089
we can come back to this at the end if

00:17:09,439 --> 00:17:13,130
we have time but let's move on we have a

00:17:11,089 --> 00:17:15,579
few other topics the next one the next

00:17:13,130 --> 00:17:18,049
big one is security we've already heard

00:17:15,579 --> 00:17:20,929
for example that nested virtualization

00:17:18,049 --> 00:17:22,549
there's been a recent security push but

00:17:20,929 --> 00:17:24,829
in general how satisfied are you with

00:17:22,549 --> 00:17:27,740
the state of security and what has

00:17:24,829 --> 00:17:30,350
happened in the past year the the CVE is

00:17:27,740 --> 00:17:33,770
the code quality okay are we in heading

00:17:30,350 --> 00:17:35,990
in the right direction I guess I'll take

00:17:33,770 --> 00:17:37,909
this one I'm pretty satisfied with it i

00:17:35,990 --> 00:17:39,200
think i think the way i see that graph

00:17:37,909 --> 00:17:40,760
and the number of commits go up it

00:17:39,200 --> 00:17:42,440
certainly makes me nervous I feel like

00:17:40,760 --> 00:17:44,570
the speed of development has increased

00:17:42,440 --> 00:17:46,880
and I don't know that the speed of sort

00:17:44,570 --> 00:17:48,620
of security of you one of the things

00:17:46,880 --> 00:17:49,789
that the power brought up in his keynote

00:17:48,620 --> 00:17:51,830
a couple years ago that I didn't see

00:17:49,789 --> 00:17:53,270
today was how many patches were reviewed

00:17:51,830 --> 00:17:55,760
by someone other than mid the maintainer

00:17:53,270 --> 00:17:57,110
and a couple years ago that seemed to be

00:17:55,760 --> 00:18:00,549
going up and I think that's going down

00:17:57,110 --> 00:18:03,889
again which i think is bad for security

00:18:00,549 --> 00:18:05,179
so you know i wouldn't say i'm not sure

00:18:03,889 --> 00:18:07,940
if satisfied is right word but i think

00:18:05,179 --> 00:18:09,720
it's not terrible we use it at Google

00:18:07,940 --> 00:18:11,700
obviously have some confidence in it

00:18:09,720 --> 00:18:13,860
okay well I think there's a follow-up

00:18:11,700 --> 00:18:19,710
question to that obviously okay go ahead

00:18:13,860 --> 00:18:23,640
I have one side note both recent

00:18:19,710 --> 00:18:30,510
securities security updates has have

00:18:23,640 --> 00:18:39,620
broken my pattern of work we get vga

00:18:30,510 --> 00:18:43,380
security has broken windows 2008 and

00:18:39,620 --> 00:18:46,680
recent update is ever tire has also

00:18:43,380 --> 00:18:50,610
broken suspense resume so it should

00:18:46,680 --> 00:18:55,980
maybe pay more attention on tasting of

00:18:50,610 --> 00:18:58,440
that stuff some backward yes it's good

00:18:55,980 --> 00:19:02,160
what's your keys released in time but

00:18:58,440 --> 00:19:09,030
maybe it should be a better tested okay

00:19:02,160 --> 00:19:10,500
yeah okay so given given the security

00:19:09,030 --> 00:19:12,270
work that has happened in qemu

00:19:10,500 --> 00:19:14,550
especially I know the Google team has

00:19:12,270 --> 00:19:17,730
been focusing on not knocking your on

00:19:14,550 --> 00:19:20,790
kvm kernel module on all the auditing

00:19:17,730 --> 00:19:22,980
how has that changed over time because

00:19:20,790 --> 00:19:26,490
you've used buzzers I guess you've done

00:19:22,980 --> 00:19:28,320
manual auditing and probably the types

00:19:26,490 --> 00:19:30,180
of bugs that you find and you still

00:19:28,320 --> 00:19:31,350
expect to lurk out there must have

00:19:30,180 --> 00:19:33,300
changed because you've gotten the

00:19:31,350 --> 00:19:36,840
low-hanging fruit so what's what's the

00:19:33,300 --> 00:19:39,030
state of bugs that are still still on

00:19:36,840 --> 00:19:42,480
your mind sure I mean there's definitely

00:19:39,030 --> 00:19:43,890
still the micro architectural side

00:19:42,480 --> 00:19:46,350
channels which which are always an issue

00:19:43,890 --> 00:19:48,630
and you can't really stamp those out and

00:19:46,350 --> 00:19:51,090
sort of the row hammer type problems for

00:19:48,630 --> 00:19:54,300
any was no real hammers a attack where

00:19:51,090 --> 00:19:56,550
you do read operations and the drains

00:19:54,300 --> 00:19:59,430
power from the DRAM on it flips bits in

00:19:56,550 --> 00:20:01,950
a nearby line things like that certainly

00:19:59,430 --> 00:20:03,690
worry us today in terms of kbm we

00:20:01,950 --> 00:20:05,250
actually feel pretty good about where

00:20:03,690 --> 00:20:08,130
we're at with the features we use and we

00:20:05,250 --> 00:20:10,170
only write new fuzzies when you when you

00:20:08,130 --> 00:20:13,800
guys write new features and that's

00:20:10,170 --> 00:20:16,410
usually when we find new bugs so I know

00:20:13,800 --> 00:20:18,960
that we kind of I think we found all of

00:20:16,410 --> 00:20:20,130
the even low and medium hanging fruit

00:20:18,960 --> 00:20:22,380
anywhere near

00:20:20,130 --> 00:20:26,370
we use and as you guys add more stuff we

00:20:22,380 --> 00:20:28,290
go looking harder Paolo do you have any

00:20:26,370 --> 00:20:31,740
thoughts as kvm maintainer about

00:20:28,290 --> 00:20:33,690
security of kvm no yeah everybody

00:20:31,740 --> 00:20:40,200
mentions Nestor message globalization

00:20:33,690 --> 00:20:42,780
and the the world the very fact that

00:20:40,200 --> 00:20:48,690
works as workers started on securing a

00:20:42,780 --> 00:20:50,490
nest in virtualization means that the

00:20:48,690 --> 00:20:54,090
low and medium hanging fruits is

00:20:50,490 --> 00:20:57,590
basically done because it's a completely

00:20:54,090 --> 00:21:04,940
new part of the code to focus on and

00:20:57,590 --> 00:21:07,770
it's by our own admission never been

00:21:04,940 --> 00:21:11,580
with him with too much with security

00:21:07,770 --> 00:21:13,800
mind they found the time of check time

00:21:11,580 --> 00:21:19,920
of fuse bugs they found release stuff

00:21:13,800 --> 00:21:21,690
that we expected that we expect it to be

00:21:19,920 --> 00:21:24,210
there but on the other hand maybe

00:21:21,690 --> 00:21:27,660
shouldn't be there I mean if the code is

00:21:24,210 --> 00:21:32,220
considered secure so I think it's

00:21:27,660 --> 00:21:34,470
exciting to to move to this kind of more

00:21:32,220 --> 00:21:36,270
complicated features because they are

00:21:34,470 --> 00:21:40,950
going to be used more and more in the

00:21:36,270 --> 00:21:42,630
future and I'm very happy that that

00:21:40,950 --> 00:21:44,970
we're finally attacking it and maybe

00:21:42,630 --> 00:21:47,210
next year I can say that we are enabling

00:21:44,970 --> 00:21:50,100
nest of utilization by default I

00:21:47,210 --> 00:21:54,000
wouldn't do that today but maybe next

00:21:50,100 --> 00:21:56,040
year with okay I think I mean there's a

00:21:54,000 --> 00:21:58,050
lot of focus on security is on on

00:21:56,040 --> 00:22:01,110
obviously the guest attack surface but

00:21:58,050 --> 00:22:03,750
Hank what's been largely largely ignored

00:22:01,110 --> 00:22:06,540
as is the management host side for

00:22:03,750 --> 00:22:08,790
example I can't believe we've we've gone

00:22:06,540 --> 00:22:12,660
for 10-plus years without having

00:22:08,790 --> 00:22:14,280
encryption of migration for example has

00:22:12,660 --> 00:22:16,500
just been this kind of assumption that

00:22:14,280 --> 00:22:19,380
the internal hosting network is secure

00:22:16,500 --> 00:22:21,510
and I think in the modern world it's

00:22:19,380 --> 00:22:23,160
it's pretty clear that internal networks

00:22:21,510 --> 00:22:27,090
have to be considered as insecure as the

00:22:23,160 --> 00:22:28,170
internet and so we've that's part of the

00:22:27,090 --> 00:22:31,050
motivation for the work I've been doing

00:22:28,170 --> 00:22:32,460
over the past year is to try and give

00:22:31,050 --> 00:22:33,259
some credible security to the host

00:22:32,460 --> 00:22:39,330
management

00:22:33,259 --> 00:22:42,749
side network interactions that all right

00:22:39,330 --> 00:22:44,340
thanks so another interesting security

00:22:42,749 --> 00:22:47,909
thing which is more of a future feature

00:22:44,340 --> 00:22:50,639
is that a new hardware features are

00:22:47,909 --> 00:22:54,269
adding memory encryption support and

00:22:50,639 --> 00:22:56,999
sync your secure and claves and

00:22:54,269 --> 00:22:59,370
basically they may be able to get us to

00:22:56,999 --> 00:23:02,370
this holy grail of if you have a hosting

00:22:59,370 --> 00:23:05,970
provider or a cloud that cloud cannot

00:23:02,370 --> 00:23:09,029
actually reach into your vm so what what

00:23:05,970 --> 00:23:11,549
do you guys think is that something that

00:23:09,029 --> 00:23:16,860
will be able to achieve in kvm with

00:23:11,549 --> 00:23:21,149
memory encryption and the Intel SGX kind

00:23:16,860 --> 00:23:23,009
of stuff heading in that direction so so

00:23:21,149 --> 00:23:25,080
I'll give my opinion I think i think the

00:23:23,009 --> 00:23:26,789
AMD memory encryption is a nice feature

00:23:25,080 --> 00:23:28,919
i think as some security benefits I as

00:23:26,789 --> 00:23:30,509
designed now and I'm interested to talk

00:23:28,919 --> 00:23:32,669
later I don't see it taking the

00:23:30,509 --> 00:23:35,190
hypervisor out of the trust boundary the

00:23:32,669 --> 00:23:38,029
way it's designed I do see that Intel

00:23:35,190 --> 00:23:39,600
SGX but until us Jax just seems so

00:23:38,029 --> 00:23:40,470
restrictive it's going to be interesting

00:23:39,600 --> 00:23:42,509
if you could actually do something

00:23:40,470 --> 00:23:44,100
interesting in there so I think I think

00:23:42,509 --> 00:23:45,899
I'm you know my team is certainly

00:23:44,100 --> 00:23:47,190
excited about it and we're experimenting

00:23:45,899 --> 00:23:50,999
it and we're playing on me and we hope

00:23:47,190 --> 00:23:56,129
we get there what yeah I agree so for

00:23:50,999 --> 00:23:58,049
the feature the main part that it

00:23:56,129 --> 00:24:02,909
doesn't cover is all the side channels

00:23:58,049 --> 00:24:06,240
the hypervisor can still lick a lot from

00:24:02,909 --> 00:24:12,210
from the guests to side channels from

00:24:06,240 --> 00:24:16,799
registers by hardware breakpoints page

00:24:12,210 --> 00:24:19,139
faults so I don't think that at least as

00:24:16,799 --> 00:24:21,690
it's currently designed it can protect

00:24:19,139 --> 00:24:23,730
formerly from a malicious hypervisor and

00:24:21,690 --> 00:24:25,799
I think the md guys totally admit that

00:24:23,730 --> 00:24:30,210
but it's a very good feature for

00:24:25,799 --> 00:24:32,410
protecting for malicious guests so you

00:24:30,210 --> 00:24:40,090
don't have to be worried of being

00:24:32,410 --> 00:24:43,060
the same host as someone nasty but I him

00:24:40,090 --> 00:24:46,660
vert Arbus will come at a price because

00:24:43,060 --> 00:24:50,350
in this case I will have paid Sharon

00:24:46,660 --> 00:24:56,440
disabled and this place patient is able

00:24:50,350 --> 00:24:59,400
to also are will get lost SEO subchannel

00:24:56,440 --> 00:25:05,950
to lick information within the guests

00:24:59,400 --> 00:25:15,070
from other guests and the role hammer

00:25:05,950 --> 00:25:17,170
will not be an issue okay and well and

00:25:15,070 --> 00:25:19,690
another benefit of memory encryption is

00:25:17,170 --> 00:25:22,260
that it heavily makes makes it much

00:25:19,690 --> 00:25:24,250
harder to exploit the bitter flipping

00:25:22,260 --> 00:25:26,740
attacks that you mentioned before

00:25:24,250 --> 00:25:30,280
because you flip one big and everything

00:25:26,740 --> 00:25:34,810
changes you maybe can still do things

00:25:30,280 --> 00:25:39,270
like hoping that the RSA crimes are not

00:25:34,810 --> 00:25:39,270
pine by flipping bits but not much more

00:25:41,190 --> 00:25:46,960
okay we have another topic and that's

00:25:44,380 --> 00:25:48,460
lightweight VMs and containers obviously

00:25:46,960 --> 00:25:51,070
your containers have you know become

00:25:48,460 --> 00:25:53,080
very popular and they've caused people

00:25:51,070 --> 00:25:54,760
to re-examine virtual machines to see

00:25:53,080 --> 00:25:58,840
what we can do to make virtual machines

00:25:54,760 --> 00:26:00,190
boot faster have a lighter footprint so

00:25:58,840 --> 00:26:03,670
that it becomes possible to get more

00:26:00,190 --> 00:26:07,410
density but also to use this kind of

00:26:03,670 --> 00:26:10,240
container workflow with layered images

00:26:07,410 --> 00:26:11,860
and maybe kind of the docker style just

00:26:10,240 --> 00:26:13,270
running an application but running it

00:26:11,860 --> 00:26:15,700
inside a vm so you have the full

00:26:13,270 --> 00:26:19,450
isolation and work has been done on this

00:26:15,700 --> 00:26:20,920
for the past year or two definitely so

00:26:19,450 --> 00:26:22,810
we have a couple of questions in this

00:26:20,920 --> 00:26:24,040
area and maybe actually this is a good

00:26:22,810 --> 00:26:26,740
one to start with the one that came from

00:26:24,040 --> 00:26:29,320
the audience how fast do you need a vm

00:26:26,740 --> 00:26:30,760
to start up and i was a little bit

00:26:29,320 --> 00:26:33,430
involved in some of the work that has

00:26:30,760 --> 00:26:36,880
gone on optimizing lightweight the MS

00:26:33,430 --> 00:26:39,070
and our target for qemu from launching

00:26:36,880 --> 00:26:41,830
the qm you command to getting to the

00:26:39,070 --> 00:26:44,370
colonel entry inside the guest was 40

00:26:41,830 --> 00:26:47,160
milliseconds and that was achieved

00:26:44,370 --> 00:26:50,430
but it's not upstream it did require you

00:26:47,160 --> 00:26:53,730
know optimizations that are you know

00:26:50,430 --> 00:26:55,620
build time and we're quite aggressive so

00:26:53,730 --> 00:26:58,320
over time I guess the goal is to always

00:26:55,620 --> 00:27:00,450
have that 40 milliseconds even with

00:26:58,320 --> 00:27:05,220
mainline qmu the binary you would get

00:27:00,450 --> 00:27:07,220
from your linux distro any other

00:27:05,220 --> 00:27:10,650
comments on the speed of booting up

00:27:07,220 --> 00:27:14,730
starting a new vm i think that we should

00:27:10,650 --> 00:27:16,860
think not only about booting up clear

00:27:14,730 --> 00:27:19,790
booting up because it's real they're not

00:27:16,860 --> 00:27:24,150
fat fast but maybe we should think about

00:27:19,790 --> 00:27:28,559
a faster snapshot well in light vm keys

00:27:24,150 --> 00:27:32,030
the vm will be able to boot not to boot

00:27:28,559 --> 00:27:34,020
but to resume in those 30 milliseconds

00:27:32,030 --> 00:27:35,850
yeah yeah I agree with that I mean your

00:27:34,020 --> 00:27:38,250
foot the 40 millisecond timer doesn't

00:27:35,850 --> 00:27:40,770
really matter if it takes the vos 15

00:27:38,250 --> 00:27:42,179
seconds to boot yes yes that's right i

00:27:40,770 --> 00:27:44,730
mean i think i think it's entirely

00:27:42,179 --> 00:27:47,460
depends on what you're doing with with

00:27:44,730 --> 00:27:49,470
the guest OS i mean if there's if

00:27:47,460 --> 00:27:51,900
there's something if booting the guest

00:27:49,470 --> 00:27:53,580
is in the critical path of responding to

00:27:51,900 --> 00:27:55,559
some requests and that request has to be

00:27:53,580 --> 00:27:58,470
served in a timely manner then obviously

00:27:55,559 --> 00:28:00,750
the shorter booting the shorter startup

00:27:58,470 --> 00:28:02,610
time is important but if the if the

00:28:00,750 --> 00:28:06,420
process of booting the guest is not in

00:28:02,610 --> 00:28:08,070
the critical path then the time is not

00:28:06,420 --> 00:28:10,800
so much it's not so important it could

00:28:08,070 --> 00:28:14,490
be one second two seconds but not

00:28:10,800 --> 00:28:15,750
necessarily 30 seconds also i think it's

00:28:14,490 --> 00:28:17,220
important to note if you're if you're

00:28:15,750 --> 00:28:20,040
comparing if you're comparing this with

00:28:17,220 --> 00:28:21,929
with say docker then you're not actually

00:28:20,040 --> 00:28:23,520
going to be running a full OS inside

00:28:21,929 --> 00:28:27,600
this this virtual machine you're going

00:28:23,520 --> 00:28:29,070
to be booting the loop starting kvm

00:28:27,600 --> 00:28:31,170
boots the Linux kernel and then

00:28:29,070 --> 00:28:33,600
immediately execute your design

00:28:31,170 --> 00:28:35,280
application there's now an its system to

00:28:33,600 --> 00:28:37,460
start up 30 different services you just

00:28:35,280 --> 00:28:40,730
start your application directly since

00:28:37,460 --> 00:28:45,000
you eliminate that OS startup time I

00:28:40,730 --> 00:28:47,280
think it's important to remember that

00:28:45,000 --> 00:28:48,600
there's nothing inherent about virtual

00:28:47,280 --> 00:28:51,870
machines which say you have to run a

00:28:48,600 --> 00:28:53,970
full OS that they're perfectly capable

00:28:51,870 --> 00:28:57,360
of running single single applications

00:28:53,970 --> 00:28:58,029
just as containers are and containers

00:28:57,360 --> 00:29:01,119
can run a full

00:28:58,029 --> 00:29:03,039
is just like virtual machines Candace

00:29:01,119 --> 00:29:08,739
they can put their compose they can post

00:29:03,039 --> 00:29:09,580
serve the same use cases really okay and

00:29:08,739 --> 00:29:12,789
by the way if there are any questions

00:29:09,580 --> 00:29:15,190
from from the audience feel free to we

00:29:12,789 --> 00:29:18,369
we do have a mic so you can ask

00:29:15,190 --> 00:29:20,109
questions and participate so half of

00:29:18,369 --> 00:29:22,950
half of the whole lightweight vm thing

00:29:20,109 --> 00:29:25,539
is making sure that you can start VMs

00:29:22,950 --> 00:29:28,450
quickly but the other half and harder

00:29:25,539 --> 00:29:30,940
problem is the memory management because

00:29:28,450 --> 00:29:32,859
when you have a virtual machine you know

00:29:30,940 --> 00:29:34,869
you give it a block of memory and that's

00:29:32,859 --> 00:29:37,839
its physical memory that's the the guest

00:29:34,869 --> 00:29:40,330
physical memory and of course if you

00:29:37,839 --> 00:29:42,339
compare that to processes processes are

00:29:40,330 --> 00:29:44,440
much more flexible process is running on

00:29:42,339 --> 00:29:47,229
the host Colonel and so are containers

00:29:44,440 --> 00:29:49,509
so one of the big challenges is what new

00:29:47,229 --> 00:29:52,029
memory management things beside verte

00:29:49,509 --> 00:29:55,330
I'll balloon do we have to do in order

00:29:52,029 --> 00:29:59,289
to make light wavelength as flexible as

00:29:55,330 --> 00:30:02,349
containers I think that the question is

00:29:59,289 --> 00:30:05,830
not about balloon at all the question is

00:30:02,349 --> 00:30:09,729
where the host colonel knows how to

00:30:05,830 --> 00:30:13,629
manage this exact place of ram it knows

00:30:09,729 --> 00:30:17,320
that it have Rama beacon or it can just

00:30:13,629 --> 00:30:20,979
drop it it knows that this page is hot

00:30:17,320 --> 00:30:23,249
or not if the page is inside the M the

00:30:20,979 --> 00:30:26,710
host Colonel doesn't know all this stuff

00:30:23,249 --> 00:30:33,369
it just could put the page to the slope

00:30:26,710 --> 00:30:35,889
and if the colonel put page cache page

00:30:33,369 --> 00:30:38,619
to the swap we will not get anything

00:30:35,889 --> 00:30:41,710
good with this approach fortunately

00:30:38,619 --> 00:30:45,339
white vm has reduced the amount of page

00:30:41,710 --> 00:30:49,479
cache page in the guest using executing

00:30:45,339 --> 00:30:53,289
place but the data pages when the guest

00:30:49,479 --> 00:30:55,509
is working this its own files will still

00:30:53,289 --> 00:30:57,969
be in page cache and something quite

00:30:55,509 --> 00:31:01,089
well this problem should be somehow

00:30:57,969 --> 00:31:05,250
addressed and result in this case light

00:31:01,089 --> 00:31:10,020
vm will really work like containers

00:31:05,250 --> 00:31:11,850
think that the co-operative guess my

00:31:10,020 --> 00:31:16,320
guest host memory management isn't

00:31:11,850 --> 00:31:17,820
exactly the right way to put it if you

00:31:16,320 --> 00:31:22,110
have this kind of microservice

00:31:17,820 --> 00:31:24,240
architectures where vm went for 300

00:31:22,110 --> 00:31:27,390
milliseconds they don't even have time

00:31:24,240 --> 00:31:29,640
to manage memory so the point is not

00:31:27,390 --> 00:31:32,430
ready to get cooperative for this kind

00:31:29,640 --> 00:31:35,220
of architecture but just to leave memory

00:31:32,430 --> 00:31:39,150
management to the host so stuff like

00:31:35,220 --> 00:31:41,310
executing place is good because or Dex

00:31:39,150 --> 00:31:44,310
how it's called in Linux it's good

00:31:41,310 --> 00:31:46,710
because you just use the host page cache

00:31:44,310 --> 00:31:49,980
there's no memory management to do it

00:31:46,710 --> 00:31:53,010
all basically it again so the flip the

00:31:49,980 --> 00:31:56,760
co-operative memory management with

00:31:53,010 --> 00:31:59,700
ballooning is suitable for longer leave

00:31:56,760 --> 00:32:02,910
VMS it's suitable if un containers

00:31:59,700 --> 00:32:05,040
inside the vm if you go for lightweight

00:32:02,910 --> 00:32:07,620
games I think it's a completely

00:32:05,040 --> 00:32:09,840
different problem domain and as you said

00:32:07,620 --> 00:32:12,750
it's it's harder and it's harder also

00:32:09,840 --> 00:32:18,590
because it's new and different I think

00:32:12,750 --> 00:32:21,570
but right vm can be used for full

00:32:18,590 --> 00:32:24,180
operating system containers which will

00:32:21,570 --> 00:32:26,700
live more than 100 milliseconds and this

00:32:24,180 --> 00:32:30,510
would be good because this partners also

00:32:26,700 --> 00:32:36,060
needed so some memory management is a

00:32:30,510 --> 00:32:37,830
good idea I think I just slightly

00:32:36,060 --> 00:32:39,780
slightly off topic but i think one thing

00:32:37,830 --> 00:32:43,500
that's missed in talking about the

00:32:39,780 --> 00:32:44,520
lightweight VMs is is just in terms of

00:32:43,500 --> 00:32:47,940
performers you're going to want these

00:32:44,520 --> 00:32:50,700
lightweight vm is using kvm and a lot of

00:32:47,940 --> 00:32:52,680
these container based workloads there

00:32:50,700 --> 00:32:53,940
already the containers management

00:32:52,680 --> 00:32:55,890
software is running inside of the am

00:32:53,940 --> 00:32:57,660
already so if you want to replace this

00:32:55,890 --> 00:32:59,700
usage of containers with usage of

00:32:57,660 --> 00:33:02,700
lightweight VMs you kind of inherently

00:32:59,700 --> 00:33:04,080
need nested virtualization if you want

00:33:02,700 --> 00:33:06,300
to if you want to swap out like

00:33:04,080 --> 00:33:10,050
like4like in their current deployment

00:33:06,300 --> 00:33:12,240
environments so so that work on

00:33:10,050 --> 00:33:15,600
improving security of nested

00:33:12,240 --> 00:33:18,690
virtualization i think is pretty pretty

00:33:15,600 --> 00:33:20,790
key to making use of lightweight vm

00:33:18,690 --> 00:33:25,940
viable in the in the moat in the general

00:33:20,790 --> 00:33:28,110
case well that's that's a good that's

00:33:25,940 --> 00:33:30,000
good for the next topic because the next

00:33:28,110 --> 00:33:31,590
topic is nested virtualization nessa

00:33:30,000 --> 00:33:33,420
virtualization has been around for a

00:33:31,590 --> 00:33:35,070
while but it hasn't been heavily used

00:33:33,420 --> 00:33:39,660
and it's not really kind of a production

00:33:35,070 --> 00:33:42,270
feature at least for most people and so

00:33:39,660 --> 00:33:45,720
I guess the question is now that there's

00:33:42,270 --> 00:33:48,210
this security discussion about nested

00:33:45,720 --> 00:33:49,770
word the other discussion has to be what

00:33:48,210 --> 00:33:51,690
else is on the to-do list what needs to

00:33:49,770 --> 00:33:58,520
be done in order to make it

00:33:51,690 --> 00:34:02,400
production-ready one big deal is that

00:33:58,520 --> 00:34:08,280
there are many different SKUs that you

00:34:02,400 --> 00:34:10,310
can buy for from intel OU ND and they

00:34:08,280 --> 00:34:13,170
have different fertilization features

00:34:10,310 --> 00:34:15,210
son of a pick me some don't have some

00:34:13,170 --> 00:34:18,150
maybe it's just that you have all the

00:34:15,210 --> 00:34:21,860
processes in the data center that they

00:34:18,150 --> 00:34:24,630
back to before the interaction and other

00:34:21,860 --> 00:34:27,270
virtualization features currently we

00:34:24,630 --> 00:34:30,060
don't have any way to disable or enable

00:34:27,270 --> 00:34:32,400
features in the guest something like the

00:34:30,060 --> 00:34:38,460
CPU models that I mentioned for forest

00:34:32,400 --> 00:34:43,110
e90 before and this is not a hundred

00:34:38,460 --> 00:34:47,520
percent necessary feature but it does

00:34:43,110 --> 00:34:51,360
make management life much easier for for

00:34:47,520 --> 00:34:55,380
management software so it's not an easy

00:34:51,360 --> 00:34:57,240
polym salt because of the wide variety

00:34:55,380 --> 00:34:59,340
of pasta sauce that are around and it's

00:34:57,240 --> 00:35:02,940
not really well documented which

00:34:59,340 --> 00:35:05,550
processor type which cpu features that

00:35:02,940 --> 00:35:08,670
soundly accessible from ms ours not with

00:35:05,550 --> 00:35:10,530
the CPI diesel user space cannot easily

00:35:08,670 --> 00:35:12,900
figure out what are the available

00:35:10,530 --> 00:35:15,300
refrigeration features under their hand

00:35:12,900 --> 00:35:18,510
is it's a problem that we solved for for

00:35:15,300 --> 00:35:21,250
cid and its with roughly the same domain

00:35:18,510 --> 00:35:27,430
but i think it's an important thing to

00:35:21,250 --> 00:35:30,190
to have for production in some scenarios

00:35:27,430 --> 00:35:41,800
other people never my great games don't

00:35:30,190 --> 00:35:43,900
care but okay well if there no no more

00:35:41,800 --> 00:35:47,740
thoughts on nested virtualization and

00:35:43,900 --> 00:35:50,710
may say one thing go ahead ah I think

00:35:47,740 --> 00:35:52,140
that one of the most important problem

00:35:50,710 --> 00:35:55,720
is a problem of heterogeneous

00:35:52,140 --> 00:35:58,920
environment when they have our one

00:35:55,720 --> 00:36:01,650
hypervisor and host which is key vm and

00:35:58,920 --> 00:36:06,460
here to know the hypervisor and guests

00:36:01,650 --> 00:36:09,220
like hyper did i do think that this will

00:36:06,460 --> 00:36:14,650
be a problem because it requires a lot

00:36:09,220 --> 00:36:18,190
of knowledge to test hyper-v chauffage

00:36:14,650 --> 00:36:20,140
inside the guest I think that we as a

00:36:18,190 --> 00:36:24,180
community working with Linux locks

00:36:20,140 --> 00:36:24,180
expertise in this area sam puckett

00:36:38,340 --> 00:36:40,340
I

00:37:10,460 --> 00:37:18,380
and recommended by not necessarily

00:37:52,700 --> 00:37:57,600
okay thanks fun done so in case anyone

00:37:55,260 --> 00:37:59,670
didn't hear because of the microphone I

00:37:57,600 --> 00:38:00,900
think I don't really understand the

00:37:59,670 --> 00:38:02,520
internals of nested verte I've never

00:38:00,900 --> 00:38:04,410
looked at it but it sounded like the

00:38:02,520 --> 00:38:06,780
problem is that with nested bird you've

00:38:04,410 --> 00:38:09,180
got not just kvm but you could have any

00:38:06,780 --> 00:38:11,040
hypervisor underneath and in fact these

00:38:09,180 --> 00:38:14,130
hypervisors in order for make nesting

00:38:11,040 --> 00:38:15,960
work they don't all make the same

00:38:14,130 --> 00:38:18,750
assumptions and provide the same

00:38:15,960 --> 00:38:21,000
environment so yeah so there's probably

00:38:18,750 --> 00:38:22,830
going to be integration challenges I

00:38:21,000 --> 00:38:24,930
think that's not that different than

00:38:22,830 --> 00:38:26,370
than how kdms started because you know

00:38:24,930 --> 00:38:29,220
you could say the same thing about LS is

00:38:26,370 --> 00:38:31,950
because Kevin isn't a perfect x86 system

00:38:29,220 --> 00:38:33,270
emulator and it was broken and and I've

00:38:31,950 --> 00:38:34,710
broken no asses I've never heard of

00:38:33,270 --> 00:38:37,500
before with patches and then had to fix

00:38:34,710 --> 00:38:38,760
that so I think that's just one of those

00:38:37,500 --> 00:38:42,390
things that will get better out with

00:38:38,760 --> 00:38:44,460
time and experimentation I want to point

00:38:42,390 --> 00:38:46,020
out a kind of a conflict of interest

00:38:44,460 --> 00:38:48,870
between what the the previous commenter

00:38:46,020 --> 00:38:51,120
said in a comment paulo recently made

00:38:48,870 --> 00:38:53,610
which is about are we trying to emulate

00:38:51,120 --> 00:38:55,830
you know a particular cpu that was

00:38:53,610 --> 00:38:57,420
shipped or do we want to emulate all of

00:38:55,830 --> 00:39:00,000
the features that somebody would like to

00:38:57,420 --> 00:39:04,580
have and these are often in conflict so

00:39:00,000 --> 00:39:07,920
you may find that the features that kvm

00:39:04,580 --> 00:39:09,960
requires from the l0 hypervisor in order

00:39:07,920 --> 00:39:13,350
to afford l1 certain virtualization

00:39:09,960 --> 00:39:14,610
features are dictated by what kind of

00:39:13,350 --> 00:39:16,650
chip you would have ever actually seen

00:39:14,610 --> 00:39:18,780
in the wild so for example if you had

00:39:16,650 --> 00:39:21,530
EPT then you would have also had the

00:39:18,780 --> 00:39:24,060
kind of invalidation that you described

00:39:21,530 --> 00:39:26,340
one other comment about testing

00:39:24,060 --> 00:39:28,500
different guests or different payloads

00:39:26,340 --> 00:39:32,700
this is a comment about nesting but

00:39:28,500 --> 00:39:35,580
testing in general the philosophy that

00:39:32,700 --> 00:39:38,070
we've started adopting kind of along the

00:39:35,580 --> 00:39:40,440
lines of kvm unit s is not so much to

00:39:38,070 --> 00:39:44,910
test you know those hyper-v work or does

00:39:40,440 --> 00:39:48,720
does does does ESX work or does kvm work

00:39:44,910 --> 00:39:51,450
but is this is this a vtx implementation

00:39:48,720 --> 00:39:54,180
so testing for architectural conformance

00:39:51,450 --> 00:39:55,790
rather than rather than kind of special

00:39:54,180 --> 00:39:58,650
cases of making sure you didn't screw up

00:39:55,790 --> 00:40:00,660
and that and you can apply this as well

00:39:58,650 --> 00:40:02,460
for this philosophy to just seeing if

00:40:00,660 --> 00:40:06,720
you're doing virtualization properly

00:40:02,460 --> 00:40:08,310
and that's a I think kvm has a you know

00:40:06,720 --> 00:40:16,890
it's a sore knee toward benefit from

00:40:08,310 --> 00:40:19,830
from nurturing in this area ok so we've

00:40:16,890 --> 00:40:22,380
reached the and I just do want to go out

00:40:19,830 --> 00:40:24,240
with a bang someone here posted thoughts

00:40:22,380 --> 00:40:26,160
on replacing code reviews on the mailing

00:40:24,240 --> 00:40:28,859
list with Garrett and I think that's

00:40:26,160 --> 00:40:39,660
really easy to answer guys what do you

00:40:28,859 --> 00:40:42,359
think he'll know I mean I think we need

00:40:39,660 --> 00:40:47,210
to do more work on continuous

00:40:42,359 --> 00:40:51,180
integration we now have started the

00:40:47,210 --> 00:40:57,570
automatic recording star reviews for QA

00:40:51,180 --> 00:40:59,490
mu but no but I mean it more seriously I

00:40:57,570 --> 00:41:02,280
think there are there are some good

00:40:59,490 --> 00:41:03,869
things about Garrett the thing that I

00:41:02,280 --> 00:41:05,910
think is people find really compelling

00:41:03,869 --> 00:41:07,589
is that it it actually tracks every

00:41:05,910 --> 00:41:09,869
patch that's submitted and you can see

00:41:07,589 --> 00:41:11,430
the status of every patch that that kind

00:41:09,869 --> 00:41:13,560
of status often gets lost in the long

00:41:11,430 --> 00:41:15,060
threads of emails but just from the

00:41:13,560 --> 00:41:16,890
point of view of actually doing the code

00:41:15,060 --> 00:41:20,640
reviews it's really really painful

00:41:16,890 --> 00:41:23,820
particularly for patch series and Q mu

00:41:20,640 --> 00:41:26,580
has a lot of big patch series that just

00:41:23,820 --> 00:41:28,200
wouldn't be well-suited to Garrett can

00:41:26,580 --> 00:41:29,820
answer a question what what tool do you

00:41:28,200 --> 00:41:31,770
use to do code review I mean I see me

00:41:29,820 --> 00:41:33,270
not reading the email yeah but this

00:41:31,770 --> 00:41:36,599
business really the email of looking at

00:41:33,270 --> 00:41:38,220
code it's the basic workflow yeah yeah

00:41:36,599 --> 00:41:39,510
you can even have to money to us one

00:41:38,220 --> 00:41:43,260
with the terminal and one with

00:41:39,510 --> 00:41:45,960
determiner of any month yeah so what am

00:41:43,260 --> 00:41:47,790
I IL officer state down popular venue

00:41:45,960 --> 00:41:50,040
for a minute one things I don't like

00:41:47,790 --> 00:41:51,690
about the Colonel's email review styles

00:41:50,040 --> 00:41:53,790
that it really encourages you to just

00:41:51,690 --> 00:41:55,380
look at the small hatch and its impact

00:41:53,790 --> 00:41:56,849
and I think you know if you look at

00:41:55,380 --> 00:42:00,000
security bugs which is really the only

00:41:56,849 --> 00:42:02,040
thing I really care about you know a lot

00:42:00,000 --> 00:42:03,720
of those are because it looked good here

00:42:02,040 --> 00:42:04,920
but have some interaction that you

00:42:03,720 --> 00:42:07,560
didn't realize somewhere else and when

00:42:04,920 --> 00:42:09,359
I'm trying to review like the recent

00:42:07,560 --> 00:42:11,220
break the a pic barrier bug sort of

00:42:09,359 --> 00:42:13,470
going back and forth you know I just

00:42:11,220 --> 00:42:15,210
have ingesting download it all merge on

00:42:13,470 --> 00:42:16,320
review everything from there to get any

00:42:15,210 --> 00:42:18,170
sort of good feeling in from the

00:42:16,320 --> 00:42:20,190
students I think that makes it harder

00:42:18,170 --> 00:42:24,330
I've got the chair would fix that

00:42:20,190 --> 00:42:26,970
problem yeah I've input / are two points

00:42:24,330 --> 00:42:30,119
here first point is how review is

00:42:26,970 --> 00:42:33,150
performed usually you write a review is

00:42:30,119 --> 00:42:37,230
performed I safe patches to file system

00:42:33,150 --> 00:42:40,530
I apply them I read one third and write

00:42:37,230 --> 00:42:44,609
an answer and another question is about

00:42:40,530 --> 00:42:48,810
tricking but the patch which has been

00:42:44,609 --> 00:42:52,280
sent will be reviewed in some time so

00:42:48,810 --> 00:42:55,950
maybe if they are speaking about the

00:42:52,280 --> 00:43:01,230
review process the two is not the

00:42:55,950 --> 00:43:03,480
purpose to the forum actual review it's

00:43:01,230 --> 00:43:06,510
doing by maintains and maintains doing

00:43:03,480 --> 00:43:09,840
this well maybe it's a matter of dragon

00:43:06,510 --> 00:43:12,210
of what should be done so there are

00:43:09,840 --> 00:43:14,820
other tools like much work or something

00:43:12,210 --> 00:43:18,170
like that okay unfortunately we need to

00:43:14,820 --> 00:43:18,170

YouTube URL: https://www.youtube.com/watch?v=S6Sjj6OtyvY


