Title: [2016] Qemu as a USB-MTP Responder by Bandan Das
Publication date: 2016-09-09
Playlist: KVM Forum 2016
Description: 
	Media Transfer Protocol (MTP) is an extension to Picture Transfer Protocol for handling transfer of media files. MTP exposes a file oriented protocol where the MTP responder is in control of the file operations and capabilities. Atomicity guarantees by the MTP server thereby help with eliminating data corruption which are seen with block based file sharing. This talk is an overview of the Media Protocol Server implementation in Qemu. By exposing itself as a MTP server, file sharing between hosts and guests is as simple as choosing a guest file browser with an integrated MTP client. We will delve into implementation details such as file operations and monitoring, usage scenarios, and unimplemented features such as write support. We will also discuss the pros and cons with respect to other host-guest sharing mechanisms available in Qemu.

Bandan Das
Software Engineer, Red Hat

Bandan Das is a Software Engineer in the Virtualization group at Red Hat. He likes working on the Linux kernel, he usually picks up work that everyone else has forgotten about or don't want to work on.

Slides: http://www.linux-kvm.org/images/6/6f/03x09B-Bandan_Das-Qemu_as_a_USB-MTP_Responder.pdf
Captions: 
	00:00:09,380 --> 00:00:18,810
hi my name is bundan and this is a talk

00:00:12,719 --> 00:00:22,920
about qmu MTP implementation most of the

00:00:18,810 --> 00:00:25,920
initial work was actually done by good

00:00:22,920 --> 00:00:29,369
and you know I added a few more features

00:00:25,920 --> 00:00:32,640
and we have an intern who just finished

00:00:29,369 --> 00:00:35,520
so this is a quick update on what's the

00:00:32,640 --> 00:00:39,570
current status so it's been around for a

00:00:35,520 --> 00:00:41,730
while and the I believe that there is

00:00:39,570 --> 00:00:43,829
there hasn't been a lot of testing lot

00:00:41,730 --> 00:00:45,090
of people are not aware of it so I

00:00:43,829 --> 00:00:48,230
thought this is this would be a good way

00:00:45,090 --> 00:00:54,300
to be a short introduction to the topic

00:00:48,230 --> 00:00:57,420
so to start with the the first thing is

00:00:54,300 --> 00:01:01,079
you know when we have a case where we

00:00:57,420 --> 00:01:02,879
have to share a folder between the

00:01:01,079 --> 00:01:06,299
guests in the host and there are many

00:01:02,879 --> 00:01:10,140
ways you can do that with Q mu and owing

00:01:06,299 --> 00:01:13,020
to the you know the use case inevitably

00:01:10,140 --> 00:01:17,270
we always use you know think of network

00:01:13,020 --> 00:01:19,890
based solutions like NFS or sshfs samba

00:01:17,270 --> 00:01:21,630
there are also device based solutions

00:01:19,890 --> 00:01:26,030
which are on top of word I or like nine

00:01:21,630 --> 00:01:29,189
PFS but I or cereal and then last forum

00:01:26,030 --> 00:01:31,049
there was a talk on be sock you can

00:01:29,189 --> 00:01:34,979
actually you know build this on top of

00:01:31,049 --> 00:01:37,170
visa so USB MTP is also a device based

00:01:34,979 --> 00:01:42,360
solution which is on top of the u.s.

00:01:37,170 --> 00:01:46,110
killer in queue and so each one of them

00:01:42,360 --> 00:01:47,460
have you know it's each one of them has

00:01:46,110 --> 00:01:51,210
have their own advantages and

00:01:47,460 --> 00:01:52,680
disadvantages with network the interface

00:01:51,210 --> 00:01:55,350
could be different between the host and

00:01:52,680 --> 00:01:58,610
the guests so you you know that the

00:01:55,350 --> 00:02:00,899
firewall can always kind of be a problem

00:01:58,610 --> 00:02:02,610
but the good thing about network based

00:02:00,899 --> 00:02:04,530
solutions like NFS is that it's more

00:02:02,610 --> 00:02:08,429
prevalent it's everywhere so it's easy

00:02:04,530 --> 00:02:09,810
to set up with device based solutions

00:02:08,429 --> 00:02:12,599
the problem is you there could be a

00:02:09,810 --> 00:02:13,950
situation where you know though you

00:02:12,599 --> 00:02:17,160
don't have a client

00:02:13,950 --> 00:02:20,370
for whatever you're trying to achieve so

00:02:17,160 --> 00:02:24,810
USB MTP chalk is meant as kind of

00:02:20,370 --> 00:02:26,190
another solution to this problem for

00:02:24,810 --> 00:02:27,660
which we have so many options it's not

00:02:26,190 --> 00:02:30,360
meant to be the best because I know it's

00:02:27,660 --> 00:02:32,580
not the best it's just an another option

00:02:30,360 --> 00:02:37,019
that you can think of and you know

00:02:32,580 --> 00:02:39,120
probably use in certain use cases so

00:02:37,019 --> 00:02:41,160
whether the question whether more

00:02:39,120 --> 00:02:44,910
options is good is actually not the

00:02:41,160 --> 00:02:49,110
point of this discussion so just a quick

00:02:44,910 --> 00:02:50,880
introduction so MTP was an extension to

00:02:49,110 --> 00:02:56,489
PTP which is pictures gentle transfer

00:02:50,880 --> 00:02:58,349
protocol which was which that was that

00:02:56,489 --> 00:02:59,910
came upon because most of the camera

00:02:58,349 --> 00:03:02,489
manufacturers there they were using

00:02:59,910 --> 00:03:05,640
their own proprietary formats to share

00:03:02,489 --> 00:03:08,670
pictures between the you know the camera

00:03:05,640 --> 00:03:10,110
device and the computer so there was

00:03:08,670 --> 00:03:12,329
this common standard so that the camera

00:03:10,110 --> 00:03:15,269
manufacturers don't have to expose their

00:03:12,329 --> 00:03:17,459
file system internals and yet be able to

00:03:15,269 --> 00:03:21,420
easily transfer file images through a

00:03:17,459 --> 00:03:22,859
USB so MTP is just an extension to it so

00:03:21,420 --> 00:03:25,980
that you can actually that applies to

00:03:22,859 --> 00:03:29,069
just not images but rather all kind of

00:03:25,980 --> 00:03:32,670
current kinds of binary files and we

00:03:29,069 --> 00:03:35,130
have new names here so the client is

00:03:32,670 --> 00:03:38,549
called the initiator and which and the

00:03:35,130 --> 00:03:40,319
server is called the responder and in

00:03:38,549 --> 00:03:43,470
terms of between if you consider like a

00:03:40,319 --> 00:03:45,569
mobile phone and a computer so the

00:03:43,470 --> 00:03:47,310
initiator is the computer and the cell

00:03:45,569 --> 00:03:50,819
phone is the responder and the reason

00:03:47,310 --> 00:03:53,069
they're called that way is because the

00:03:50,819 --> 00:03:55,920
responder or the cell phone cannot

00:03:53,069 --> 00:03:57,690
initiate a USB MTP any kind of USB mtpa

00:03:55,920 --> 00:04:00,540
transaction on its own it cannot

00:03:57,690 --> 00:04:02,730
advertise whatever you know features it

00:04:00,540 --> 00:04:04,680
has properties it has the initiator or

00:04:02,730 --> 00:04:06,299
the host computer has to kind of

00:04:04,680 --> 00:04:08,459
initiate the transaction saying that I

00:04:06,299 --> 00:04:10,799
want this file or I want information

00:04:08,459 --> 00:04:13,829
about this file so and that's why they

00:04:10,799 --> 00:04:15,870
are named such and one important point

00:04:13,829 --> 00:04:20,039
to note about MTP is that all applicable

00:04:15,870 --> 00:04:23,580
operations are atomic so if you initiate

00:04:20,039 --> 00:04:25,620
a right for example the server is going

00:04:23,580 --> 00:04:26,820
to finish that right before it can do

00:04:25,620 --> 00:04:34,800
anything else

00:04:26,820 --> 00:04:36,900
so it's 11 operation at a time and some

00:04:34,800 --> 00:04:40,040
other features or disadvantages rather

00:04:36,900 --> 00:04:43,290
are it has limited file system support

00:04:40,040 --> 00:04:46,980
but it manages to get the thing done it

00:04:43,290 --> 00:04:49,140
has a you know read modify copy move

00:04:46,980 --> 00:04:50,670
delete but it does not have direct right

00:04:49,140 --> 00:04:53,430
so you have to copy it over to your

00:04:50,670 --> 00:04:57,180
temporary location and then edit it and

00:04:53,430 --> 00:04:59,490
copy it back it can be on top of many

00:04:57,180 --> 00:05:01,530
transport layers like the spec doesn't

00:04:59,490 --> 00:05:02,940
say exactly what kind of transport to

00:05:01,530 --> 00:05:04,710
use you could just use anything as long

00:05:02,940 --> 00:05:08,940
as there's some certain requirements are

00:05:04,710 --> 00:05:11,280
met but there is a USB media MTP devices

00:05:08,940 --> 00:05:15,240
in it's a recognized device class so

00:05:11,280 --> 00:05:18,270
it's more common on USB transport so

00:05:15,240 --> 00:05:21,540
linked to the way it is MTP is a server

00:05:18,270 --> 00:05:26,160
controlled file system if you will think

00:05:21,540 --> 00:05:27,480
of so it supports drm and because the

00:05:26,160 --> 00:05:29,760
server has control over what kind of

00:05:27,480 --> 00:05:32,960
files to and how much of the files to

00:05:29,760 --> 00:05:35,070
you know transfer to the to the

00:05:32,960 --> 00:05:36,750
initiator so it's supposed to a diamond

00:05:35,070 --> 00:05:40,050
I actually think windows media player

00:05:36,750 --> 00:05:42,690
actually uses MTP for enforcing drm i

00:05:40,050 --> 00:05:49,020
mean i'm not sure i don't use windows

00:05:42,690 --> 00:05:50,970
and and oh so and but it's the standard

00:05:49,020 --> 00:05:53,250
it's pretty much the default in android

00:05:50,970 --> 00:05:56,610
though because i have a later slide

00:05:53,250 --> 00:05:58,050
which explains the reasoning but it's of

00:05:56,610 --> 00:06:00,930
course very common in windows because

00:05:58,050 --> 00:06:03,420
you know even an old version of windows

00:06:00,930 --> 00:06:06,900
is going to work with mtv and with linux

00:06:03,420 --> 00:06:10,530
i think any any recent file system file

00:06:06,900 --> 00:06:12,600
manager that is should be you know bass

00:06:10,530 --> 00:06:18,060
basically plug and play should not be a

00:06:12,600 --> 00:06:20,520
lot of effort so this brings us to you

00:06:18,060 --> 00:06:23,640
know the common the other common common

00:06:20,520 --> 00:06:27,060
way to share our USB device which is USB

00:06:23,640 --> 00:06:31,710
mass storage or your um s so that is the

00:06:27,060 --> 00:06:34,770
advantage of mt p / UMS is that with MTP

00:06:31,710 --> 00:06:38,490
as we mentioned before the storage is in

00:06:34,770 --> 00:06:40,289
control of the device so just the

00:06:38,490 --> 00:06:43,819
there could be a possibility that but

00:06:40,289 --> 00:06:46,560
the chances are minimal that us you know

00:06:43,819 --> 00:06:49,770
the computer with which you are sharing

00:06:46,560 --> 00:06:52,259
a folder is able to corrupt your file

00:06:49,770 --> 00:06:53,910
system in your share this is because you

00:06:52,259 --> 00:06:55,349
know the server has control over what

00:06:53,910 --> 00:06:58,259
kind of changes to do to the file system

00:06:55,349 --> 00:07:00,060
and if it can actually reject as a

00:06:58,259 --> 00:07:05,520
change that it thinks is not nice for

00:07:00,060 --> 00:07:09,750
itself so and as I mentioned Android

00:07:05,520 --> 00:07:13,050
used to use ums before and then what

00:07:09,750 --> 00:07:15,330
used to happen was all the OEMs they

00:07:13,050 --> 00:07:17,460
used to have partitions and they used to

00:07:15,330 --> 00:07:20,250
only expose a tube which is for example

00:07:17,460 --> 00:07:21,630
video in just an example videos and

00:07:20,250 --> 00:07:23,340
pictures that used to assign lots of

00:07:21,630 --> 00:07:24,720
spaces for video and pictures but they

00:07:23,340 --> 00:07:27,030
did not assign a lot of space for

00:07:24,720 --> 00:07:29,039
applications data or whatever the system

00:07:27,030 --> 00:07:31,080
folders are so you would end up with a

00:07:29,039 --> 00:07:34,590
phone where you have like 16 gigs of

00:07:31,080 --> 00:07:35,940
space for images and videos but no space

00:07:34,590 --> 00:07:39,030
for applications so you would pretty

00:07:35,940 --> 00:07:42,270
much be full very very soon if you

00:07:39,030 --> 00:07:44,729
install a lot of application so to to

00:07:42,270 --> 00:07:47,460
take care of that they made MTP the

00:07:44,729 --> 00:07:49,169
default and an interesting side effect

00:07:47,460 --> 00:07:51,389
of that was at that point I think they

00:07:49,169 --> 00:07:53,759
were used trying to use ext3 as the file

00:07:51,389 --> 00:07:55,169
system on the phone and they were being

00:07:53,759 --> 00:08:02,250
forced to use vfat because you know

00:07:55,169 --> 00:08:04,740
every system out there was windows so so

00:08:02,250 --> 00:08:07,319
this is a high level workflow of what

00:08:04,740 --> 00:08:09,060
happens when you plug in us MTP device

00:08:07,319 --> 00:08:10,680
and does it doesn't necessarily just

00:08:09,060 --> 00:08:14,159
apply to kill me but it's most kind of a

00:08:10,680 --> 00:08:17,789
generic so when you connect MTP device

00:08:14,159 --> 00:08:22,020
to the USB core in the system or the

00:08:17,789 --> 00:08:23,580
host computer that the you know finds

00:08:22,020 --> 00:08:26,009
out that the MTP device is connected and

00:08:23,580 --> 00:08:28,199
this is us be transported dependent or

00:08:26,009 --> 00:08:32,430
the device descriptors show that this is

00:08:28,199 --> 00:08:34,110
an ftp device and then at that point the

00:08:32,430 --> 00:08:35,729
system can decide what you do with it it

00:08:34,110 --> 00:08:38,219
can either just ignore or just let it

00:08:35,729 --> 00:08:41,940
sit or you know it can ask you open a

00:08:38,219 --> 00:08:44,159
session request you know device features

00:08:41,940 --> 00:08:46,440
capabilities names what are what the

00:08:44,159 --> 00:08:49,320
what are the file term contents and two

00:08:46,440 --> 00:08:50,380
in response to that the the MTP device

00:08:49,320 --> 00:08:53,170
can then you know say

00:08:50,380 --> 00:08:55,300
an array of integers which are basically

00:08:53,170 --> 00:08:59,380
object handles which point to the

00:08:55,300 --> 00:09:01,270
contents of the shared folder and the

00:08:59,380 --> 00:09:03,010
and the initiator or the host computer

00:09:01,270 --> 00:09:05,590
can then also request specific

00:09:03,010 --> 00:09:08,620
information about these object handles

00:09:05,590 --> 00:09:10,600
and then and this goes on and the device

00:09:08,620 --> 00:09:13,390
sends back metadata of the file name the

00:09:10,600 --> 00:09:15,160
file size for the file format for

00:09:13,390 --> 00:09:17,920
example and then the actual exchange

00:09:15,160 --> 00:09:19,600
request can happen when the initiator

00:09:17,920 --> 00:09:21,850
decides that it needs a specific object

00:09:19,600 --> 00:09:25,090
handle and then it sends that object ID

00:09:21,850 --> 00:09:31,300
back to the you know MTP device and the

00:09:25,090 --> 00:09:34,900
data transfer takes place so with

00:09:31,300 --> 00:09:37,050
respect to Q mu everything that we

00:09:34,900 --> 00:09:40,780
discussed in the last few slides applies

00:09:37,050 --> 00:09:42,490
and I'm sorry the font size of the the

00:09:40,780 --> 00:09:47,710
code section is too small I try to

00:09:42,490 --> 00:09:49,930
increase it i could not so so that's a

00:09:47,710 --> 00:09:52,660
very minimal you know user scenario

00:09:49,930 --> 00:09:56,590
where you can just define a device USB

00:09:52,660 --> 00:09:58,180
MTP and specify an extrude which is the

00:09:56,590 --> 00:10:00,880
shared folder and you can describe it

00:09:58,180 --> 00:10:03,630
with a name and the same thing applies

00:10:00,880 --> 00:10:07,960
it one it's one file operation at a time

00:10:03,630 --> 00:10:10,930
it supports you notify changes from the

00:10:07,960 --> 00:10:12,430
host in the guest basically the guests

00:10:10,930 --> 00:10:14,140
can see what kind of changes have

00:10:12,430 --> 00:10:17,260
happened to your file based on I notify

00:10:14,140 --> 00:10:20,410
which is Lin eccentric and it supports

00:10:17,260 --> 00:10:23,530
greater than four gig files and that

00:10:20,410 --> 00:10:25,120
that is interesting because the size the

00:10:23,530 --> 00:10:28,360
size field in the structure is actually

00:10:25,120 --> 00:10:30,820
32 bits so they have a way to transfer

00:10:28,360 --> 00:10:32,110
more than four games and of course the

00:10:30,820 --> 00:10:34,420
most important part that's missing right

00:10:32,110 --> 00:10:36,820
now is it's not exactly right support

00:10:34,420 --> 00:10:38,830
but rather changing an object that isn't

00:10:36,820 --> 00:10:42,250
the share by the client or the initiator

00:10:38,830 --> 00:10:44,830
and that that was partially being done

00:10:42,250 --> 00:10:47,500
as part of the you know the internship

00:10:44,830 --> 00:10:49,830
that we had our teacher internship that

00:10:47,500 --> 00:10:49,830
we had

00:10:52,030 --> 00:11:00,340
so since MTP runs on top of us be this

00:10:58,480 --> 00:11:02,740
is a quick primer on USB although I

00:11:00,340 --> 00:11:04,360
don't know much about us p I think these

00:11:02,740 --> 00:11:06,160
this is just a basic understanding of

00:11:04,360 --> 00:11:09,670
what you need to know so that you can

00:11:06,160 --> 00:11:11,560
understand what how MTP works so

00:11:09,670 --> 00:11:14,140
basically the communication in USP

00:11:11,560 --> 00:11:16,090
happens to our endpoints so you know

00:11:14,140 --> 00:11:19,150
there are two main endpoints that we

00:11:16,090 --> 00:11:21,730
need to care about and the and the there

00:11:19,150 --> 00:11:23,530
are n which is basically from the device

00:11:21,730 --> 00:11:25,660
to the host or the responder to the

00:11:23,530 --> 00:11:28,540
initiator and the out which is basically

00:11:25,660 --> 00:11:31,570
the opposite way and as far as the types

00:11:28,540 --> 00:11:33,400
are concerned this control and this bulk

00:11:31,570 --> 00:11:34,870
which is the one that we are most

00:11:33,400 --> 00:11:38,620
concerned about because that's being

00:11:34,870 --> 00:11:42,400
used to transfer the actual data in the

00:11:38,620 --> 00:11:43,930
files and that's an interrupt endpoint

00:11:42,400 --> 00:11:47,110
which is used to which we use to

00:11:43,930 --> 00:11:48,940
actually implement the final

00:11:47,110 --> 00:11:51,280
notification changes that we just I just

00:11:48,940 --> 00:11:52,630
showed in the last slide the control

00:11:51,280 --> 00:11:55,150
endpoint is something I don't think we

00:11:52,630 --> 00:11:58,360
use because that's mostly used for by

00:11:55,150 --> 00:12:00,910
the book by the USB you know the USB

00:11:58,360 --> 00:12:02,650
cord to probe the device and you know

00:12:00,910 --> 00:12:04,570
recognize its abilities and all that

00:12:02,650 --> 00:12:09,430
stuff I don't think MTP actually uses it

00:12:04,570 --> 00:12:10,660
for anything so with that does this is a

00:12:09,430 --> 00:12:13,540
quick look at the data structures we

00:12:10,660 --> 00:12:15,900
have first of all when we so any any

00:12:13,540 --> 00:12:18,940
type of transaction that we have in MTP

00:12:15,900 --> 00:12:20,950
is associated with a session so the

00:12:18,940 --> 00:12:25,660
moment you kind of open the MTP share

00:12:20,950 --> 00:12:27,700
its the session is created so and that

00:12:25,660 --> 00:12:30,220
thing is associated with the MTP

00:12:27,700 --> 00:12:32,440
strapped now most of the important

00:12:30,220 --> 00:12:37,930
fields over there are the USB device and

00:12:32,440 --> 00:12:40,300
we have MTP data and this data in and

00:12:37,930 --> 00:12:42,430
this data out so data and data in is

00:12:40,300 --> 00:12:46,450
basically it's confusing but data in

00:12:42,430 --> 00:12:48,610
basically means from the responder q de

00:12:46,450 --> 00:12:50,920
initiator or from q mu to the guest and

00:12:48,610 --> 00:12:53,080
data out means from the guest to the

00:12:50,920 --> 00:12:56,770
house so if there's any data that needs

00:12:53,080 --> 00:12:59,470
to be sent from the responder to the to

00:12:56,770 --> 00:13:00,790
the guest then the data in field is used

00:12:59,470 --> 00:13:04,720
and the data out is the opposite

00:13:00,790 --> 00:13:05,680
direction now the situation where data

00:13:04,720 --> 00:13:08,710
out would be used

00:13:05,680 --> 00:13:10,779
for example the client actually makes a

00:13:08,710 --> 00:13:12,279
change to the object so it can fill up

00:13:10,779 --> 00:13:14,110
the data out structure and then set it

00:13:12,279 --> 00:13:15,790
to the responder and since we don't have

00:13:14,110 --> 00:13:18,970
right support right now so that's pretty

00:13:15,790 --> 00:13:22,360
typically just unused right now MTP

00:13:18,970 --> 00:13:25,000
control is it's just a it's a genetic

00:13:22,360 --> 00:13:28,630
structure to either send a command and

00:13:25,000 --> 00:13:30,279
also get the status of a command in this

00:13:28,630 --> 00:13:33,930
context is basically used by the

00:13:30,279 --> 00:13:36,610
responder to send back the status of a

00:13:33,930 --> 00:13:40,230
you know a command that the aura query

00:13:36,610 --> 00:13:43,300
that the that the initiator initiated

00:13:40,230 --> 00:13:46,080
the config inotify part is the base is

00:13:43,300 --> 00:13:48,910
the desert now I notify FD which is the

00:13:46,080 --> 00:13:50,950
notification you know ft 45 change

00:13:48,910 --> 00:13:53,709
monitoring and there's a list of events

00:13:50,950 --> 00:13:57,640
that we keep sending when when the host

00:13:53,709 --> 00:14:01,290
asks for it the other important data

00:13:57,640 --> 00:14:04,510
structure is MTP object which is

00:14:01,290 --> 00:14:07,000
basically the one that actually defines

00:14:04,510 --> 00:14:08,470
the contents of the file so the most

00:14:07,000 --> 00:14:10,750
important part is the handle which is

00:14:08,470 --> 00:14:12,430
the integer idea that I spoke about

00:14:10,750 --> 00:14:15,550
because that actually signifies the

00:14:12,430 --> 00:14:17,020
contents and there are other feeds but

00:14:15,550 --> 00:14:18,940
that's the best the one that the

00:14:17,020 --> 00:14:24,100
initiator is going to use to request the

00:14:18,940 --> 00:14:25,900
contents of a file and finally as far as

00:14:24,100 --> 00:14:28,600
the interaction between USB and MTP is

00:14:25,900 --> 00:14:31,480
concerned this is the hook USB MTP

00:14:28,600 --> 00:14:35,580
handle data so there are three cases

00:14:31,480 --> 00:14:38,740
basically data in is when there are

00:14:35,580 --> 00:14:40,570
responses from the MTP device or qmu

00:14:38,740 --> 00:14:42,880
that needs to be sent out that's where

00:14:40,570 --> 00:14:45,610
they get filled up with the MTP data

00:14:42,880 --> 00:14:47,470
structure and then they get sent out if

00:14:45,610 --> 00:14:50,380
there is a request from the host that's

00:14:47,470 --> 00:14:54,310
then the data out case is the one that

00:14:50,380 --> 00:14:57,089
the code looks for it form it gets the

00:14:54,310 --> 00:14:59,320
USB packet formats the MTP control

00:14:57,089 --> 00:15:02,470
structure and gets the whatever request

00:14:59,320 --> 00:15:04,540
the you the guest has regarding MTP and

00:15:02,470 --> 00:15:07,750
then processes it and then wait for the

00:15:04,540 --> 00:15:10,420
next EP data any event and as far as

00:15:07,750 --> 00:15:13,450
five changes are concerned that's the

00:15:10,420 --> 00:15:16,300
case where you know they if this is the

00:15:13,450 --> 00:15:19,240
case reaches there then

00:15:16,300 --> 00:15:20,680
and the cumulative implementation is

00:15:19,240 --> 00:15:22,180
going to check for if there are any

00:15:20,680 --> 00:15:23,410
pending events as far as five changes

00:15:22,180 --> 00:15:29,860
are concerned and then it's going to

00:15:23,410 --> 00:15:31,930
send out to the to the host so with that

00:15:29,860 --> 00:15:34,870
in mind so there are four major sections

00:15:31,930 --> 00:15:38,050
in MTP first of all this object

00:15:34,870 --> 00:15:39,940
enumeration this notification changes

00:15:38,050 --> 00:15:42,220
that's the actual data transfer and then

00:15:39,940 --> 00:15:44,170
there's file operations side like so

00:15:42,220 --> 00:15:47,320
right just not exactly is right but

00:15:44,170 --> 00:15:49,090
rather the copy delete move those file

00:15:47,320 --> 00:15:52,360
operations so let's quickly go through

00:15:49,090 --> 00:15:56,170
one them one by one as far as object

00:15:52,360 --> 00:15:57,370
enumeration is concerned when the when

00:15:56,170 --> 00:16:01,750
the device is connected and the

00:15:57,370 --> 00:16:04,480
initiator wants the list of you know

00:16:01,750 --> 00:16:07,810
files or whatever objects if you will in

00:16:04,480 --> 00:16:10,420
the shared space it sets up MTP control

00:16:07,810 --> 00:16:12,660
package with this specific field set to

00:16:10,420 --> 00:16:15,490
0 or all apps which basically means that

00:16:12,660 --> 00:16:17,440
you know try iterating through the all

00:16:15,490 --> 00:16:19,540
the starting from the root of the share

00:16:17,440 --> 00:16:23,500
go through all the folders and find out

00:16:19,540 --> 00:16:25,090
what files and folders I have and then

00:16:23,500 --> 00:16:27,400
it fills up that control packet and then

00:16:25,090 --> 00:16:28,840
sends CMD get object handles which is

00:16:27,400 --> 00:16:33,550
the command that is used to get the list

00:16:28,840 --> 00:16:35,470
of get a list of objects and in the

00:16:33,550 --> 00:16:37,060
responder or the key mu implementation

00:16:35,470 --> 00:16:39,070
of mt p is going to you know do some

00:16:37,060 --> 00:16:40,960
sanity checks and then it does a read

00:16:39,070 --> 00:16:44,260
dir standard system call in the shared

00:16:40,960 --> 00:16:45,700
folder that we have and then as it goes

00:16:44,260 --> 00:16:48,070
through each of the files and folders it

00:16:45,700 --> 00:16:50,950
fills up mt p object structures at that

00:16:48,070 --> 00:16:53,530
time and you know recursively and then

00:16:50,950 --> 00:16:56,200
once it's all completely done and then

00:16:53,530 --> 00:16:58,420
it will take a mt p data struct and then

00:16:56,200 --> 00:17:01,570
fill it up with you know integer32

00:16:58,420 --> 00:17:07,720
handles and send it back to the back to

00:17:01,570 --> 00:17:10,030
the initiator and at that point and at

00:17:07,720 --> 00:17:12,760
that point the the initiator has a list

00:17:10,030 --> 00:17:15,430
of like integer values which correspond

00:17:12,760 --> 00:17:16,720
to the file names not really the filings

00:17:15,430 --> 00:17:19,480
for the files and the objects and the

00:17:16,720 --> 00:17:22,330
shared it can it can actually just use

00:17:19,480 --> 00:17:24,100
that integer value to request contents

00:17:22,330 --> 00:17:27,070
of a file but that's completely useless

00:17:24,100 --> 00:17:29,740
right you so you have to use the next

00:17:27,070 --> 00:17:30,100
command get which is CMD get object info

00:17:29,740 --> 00:17:32,460
based

00:17:30,100 --> 00:17:35,320
on this specific integer value you could

00:17:32,460 --> 00:17:37,210
fill up a new empty p control packet and

00:17:35,320 --> 00:17:38,770
then send a get object info in the

00:17:37,210 --> 00:17:41,350
response to which will be the name of

00:17:38,770 --> 00:17:43,900
the file the size of the file the format

00:17:41,350 --> 00:17:48,130
and you know some other information and

00:17:43,900 --> 00:17:49,840
that can help the the initiator decide

00:17:48,130 --> 00:17:52,600
if this is a file i want if it's gonna

00:17:49,840 --> 00:17:55,059
be too big for me if this is a format

00:17:52,600 --> 00:17:56,740
that i don't support us and once it's

00:17:55,059 --> 00:17:58,900
done with that it can then decide to

00:17:56,740 --> 00:18:03,730
actually get the file contents ocmd get

00:17:58,900 --> 00:18:05,830
object the amount of data that the

00:18:03,730 --> 00:18:08,679
responder can spend is limited by the

00:18:05,830 --> 00:18:10,299
size of the USB packet but the responder

00:18:08,679 --> 00:18:12,490
is going to keep track of the offset at

00:18:10,299 --> 00:18:15,190
the lat the the last offset as it left

00:18:12,490 --> 00:18:16,780
of it and you know in the next time it

00:18:15,190 --> 00:18:18,309
starts up the second offset in fits of a

00:18:16,780 --> 00:18:24,789
new packet and sent it over and this way

00:18:18,309 --> 00:18:29,530
the whole file is transferred the next

00:18:24,789 --> 00:18:33,039
thing is the notifications so usually we

00:18:29,530 --> 00:18:34,840
know of we know that if the device any

00:18:33,039 --> 00:18:36,880
device needs servicing it interrupts the

00:18:34,840 --> 00:18:41,260
host but with the USB it's actually the

00:18:36,880 --> 00:18:43,570
opposite the the USB host actually pulls

00:18:41,260 --> 00:18:44,950
the device for events if there are

00:18:43,570 --> 00:18:46,780
events needs to be serviced and that's

00:18:44,950 --> 00:18:51,520
when the host is going to find out

00:18:46,780 --> 00:18:53,169
there's no interrupts so so and this is

00:18:51,520 --> 00:18:56,679
the basis for five change notification

00:18:53,169 --> 00:19:00,340
in the in the qme MTP implementation it

00:18:56,679 --> 00:19:02,260
uses I notify as we just saw in the one

00:19:00,340 --> 00:19:04,690
of the last slides which is you know

00:19:02,260 --> 00:19:06,309
linux centric it works only with Linux

00:19:04,690 --> 00:19:08,230
host but it will definitely work with

00:19:06,309 --> 00:19:12,520
any kind of guests as far as there are

00:19:08,230 --> 00:19:14,830
no bugs so the way it's implemented is

00:19:12,520 --> 00:19:17,590
basically when you enumerate the objects

00:19:14,830 --> 00:19:20,260
in the shear you register watch points

00:19:17,590 --> 00:19:22,900
for the I notify and handler and then if

00:19:20,260 --> 00:19:25,150
a new file is created you create a new

00:19:22,900 --> 00:19:26,740
you know watch point if a file is

00:19:25,150 --> 00:19:28,090
changed you know that it has been an

00:19:26,740 --> 00:19:31,840
event because you had a watch point on

00:19:28,090 --> 00:19:35,230
it and you store this these events in a

00:19:31,840 --> 00:19:37,030
queue and when when the host actually

00:19:35,230 --> 00:19:38,050
pulls this EP endpoint that we saw in

00:19:37,030 --> 00:19:41,980
the USB

00:19:38,050 --> 00:19:44,980
hook in the one of the last slides you

00:19:41,980 --> 00:19:46,990
you get one of the events and send it so

00:19:44,980 --> 00:19:48,340
that the so that the initiator knows

00:19:46,990 --> 00:19:58,030
that there has been a change to one of

00:19:48,340 --> 00:19:59,620
the files and so so right is a as I keep

00:19:58,030 --> 00:20:03,970
writing right but it's not really right

00:19:59,620 --> 00:20:07,900
but so there are two steps to making a

00:20:03,970 --> 00:20:11,950
change to an object on the initiator

00:20:07,900 --> 00:20:14,920
side or the guest and it really doesn't

00:20:11,950 --> 00:20:17,410
matter when the file was created or you

00:20:14,920 --> 00:20:19,510
know when it was modified as long as

00:20:17,410 --> 00:20:22,900
there are two steps the first step is

00:20:19,510 --> 00:20:24,580
sent object info which is basically the

00:20:22,900 --> 00:20:26,950
initiator has to just do the opposite of

00:20:24,580 --> 00:20:30,250
what the what they responded did when it

00:20:26,950 --> 00:20:31,990
was animating objects so it needs to set

00:20:30,250 --> 00:20:34,780
up a control packet with the name of the

00:20:31,990 --> 00:20:36,370
file the size of the file the the format

00:20:34,780 --> 00:20:38,440
and everything else just exactly as the

00:20:36,370 --> 00:20:42,700
responder would do and it's going to

00:20:38,440 --> 00:20:43,720
send it to the to the responder and the

00:20:42,700 --> 00:20:45,570
responder is going to check and make

00:20:43,720 --> 00:20:47,740
sure that this is a file i can accept

00:20:45,570 --> 00:20:49,300
like the file size is probably very

00:20:47,740 --> 00:20:52,390
critical the format is also very

00:20:49,300 --> 00:20:54,610
critical and if it sends an ok back to

00:20:52,390 --> 00:20:56,590
the initiator saying that this is a file

00:20:54,610 --> 00:20:58,170
i can accept then that then the next

00:20:56,590 --> 00:21:00,460
step is going to be object in for where

00:20:58,170 --> 00:21:02,440
the responder is going to do the exact

00:21:00,460 --> 00:21:04,690
same thing that the initiator had done

00:21:02,440 --> 00:21:10,390
when the when the guests had acts asked

00:21:04,690 --> 00:21:13,330
for a specific file and so basically if

00:21:10,390 --> 00:21:16,360
we have to implement right we have to

00:21:13,330 --> 00:21:19,690
support both these new commands and I

00:21:16,360 --> 00:21:23,020
think as part of the internship I think

00:21:19,690 --> 00:21:25,420
the next slide is about that yeah so I

00:21:23,020 --> 00:21:30,310
said Lozano was our outreach intern and

00:21:25,420 --> 00:21:32,920
he added support for for gate file

00:21:30,310 --> 00:21:34,660
transfers which was basically if you

00:21:32,920 --> 00:21:36,370
remember I mentioned that the size of

00:21:34,660 --> 00:21:38,200
the file structure and the size of the

00:21:36,370 --> 00:21:40,480
field and the structure is 32 bits so

00:21:38,200 --> 00:21:43,060
basically you can what you can what you

00:21:40,480 --> 00:21:45,100
have to do is you have to set it to all

00:21:43,060 --> 00:21:47,740
apps that means that this the size of

00:21:45,100 --> 00:21:49,150
this file is greater than that and the

00:21:47,740 --> 00:21:51,360
client is going to know that yeah this

00:21:49,150 --> 00:21:53,429
this is I need to keep

00:21:51,360 --> 00:21:55,860
getting data and I have to assemble it

00:21:53,429 --> 00:22:00,690
at my end because the file size is

00:21:55,860 --> 00:22:03,720
greater than 4 gig and he also um

00:22:00,690 --> 00:22:05,070
figured out testing MTP on windows

00:22:03,720 --> 00:22:07,830
because that was something that we

00:22:05,070 --> 00:22:10,350
hadn't tested before he found out some

00:22:07,830 --> 00:22:11,640
specific mt p values that windows was

00:22:10,350 --> 00:22:13,040
specifically looking for that was

00:22:11,640 --> 00:22:16,620
actually not mentioned in the spec and

00:22:13,040 --> 00:22:19,290
he's also he he was halfway through the

00:22:16,620 --> 00:22:23,250
right support when this all ended so so

00:22:19,290 --> 00:22:25,020
he he did the send object info part

00:22:23,250 --> 00:22:27,000
which is basically sending information

00:22:25,020 --> 00:22:31,350
about the file metadata rather not the

00:22:27,000 --> 00:22:33,750
file content itself so so right to put

00:22:31,350 --> 00:22:42,330
is basically you know ongoing in that

00:22:33,750 --> 00:22:47,240
sense so with that we have some to-do

00:22:42,330 --> 00:22:50,549
items in no way complete but so the

00:22:47,240 --> 00:22:53,580
solar specs is that MTP operations are

00:22:50,549 --> 00:22:55,530
synchronous but but it also has a

00:22:53,580 --> 00:22:58,190
section which says that you can also

00:22:55,530 --> 00:23:01,470
have simulate asynchronous operations

00:22:58,190 --> 00:23:03,299
where there's a request from the

00:23:01,470 --> 00:23:05,100
initiator to the responder and they

00:23:03,299 --> 00:23:07,410
responded keeps doing the work in the

00:23:05,100 --> 00:23:09,540
background and then uses the EP the

00:23:07,410 --> 00:23:12,299
event the event endpoint to basically

00:23:09,540 --> 00:23:14,700
tell the client that you know the thing

00:23:12,299 --> 00:23:17,429
is done and then I'm ready for the next

00:23:14,700 --> 00:23:19,200
operation now I'm not sure exactly I'm

00:23:17,429 --> 00:23:20,820
actually I'm pretty sure that this needs

00:23:19,200 --> 00:23:23,850
the help of the client it's not

00:23:20,820 --> 00:23:26,100
something that you could just do on your

00:23:23,850 --> 00:23:29,070
own so that's something that we could

00:23:26,100 --> 00:23:30,720
implement to simulate the idea of having

00:23:29,070 --> 00:23:33,240
multiple operations at the same time

00:23:30,720 --> 00:23:34,440
probably along with having support for

00:23:33,240 --> 00:23:37,549
multiple sessions where we can actually

00:23:34,440 --> 00:23:41,250
open up multiple windows for the same

00:23:37,549 --> 00:23:46,500
you know share and then start having

00:23:41,250 --> 00:23:48,390
different operations at the same time so

00:23:46,500 --> 00:23:51,120
the spec says that if there are multiple

00:23:48,390 --> 00:23:55,200
operations and they are incompatible the

00:23:51,120 --> 00:23:57,750
responder should be sending back a some

00:23:55,200 --> 00:23:59,760
kind of an error message but I think

00:23:57,750 --> 00:24:01,470
that should not be even there should not

00:23:59,760 --> 00:24:03,300
be a problem because you can just you

00:24:01,470 --> 00:24:04,269
hold off on one of the operations until

00:24:03,300 --> 00:24:06,099
the next operation

00:24:04,269 --> 00:24:08,049
previous operation is done and then you

00:24:06,099 --> 00:24:09,669
can in this way simulate and at some

00:24:08,049 --> 00:24:11,229
point actually probably based on the

00:24:09,669 --> 00:24:14,559
internal implementation of the responder

00:24:11,229 --> 00:24:17,109
you can also probably do multiple

00:24:14,559 --> 00:24:19,809
operations inside the responder and send

00:24:17,109 --> 00:24:21,759
data back one after the other so it's

00:24:19,809 --> 00:24:25,719
not exactly a synchronous but it could

00:24:21,759 --> 00:24:27,129
be something that could simulate this is

00:24:25,719 --> 00:24:29,200
not something that's in the spec is just

00:24:27,129 --> 00:24:34,389
kind of the ideas that I think of would

00:24:29,200 --> 00:24:36,879
be you know next steps so one of the

00:24:34,389 --> 00:24:41,379
previous USB and slides and that good

00:24:36,879 --> 00:24:43,119
had had mentioned that synchronous

00:24:41,379 --> 00:24:44,289
operations you know they utilize a lot

00:24:43,119 --> 00:24:46,779
of CPU and that's something that I

00:24:44,289 --> 00:24:49,629
haven't tried out at this stage I don't

00:24:46,779 --> 00:24:51,309
know if that's true or not so that's me

00:24:49,629 --> 00:24:52,389
that's you know the lot of performance

00:24:51,309 --> 00:24:53,739
audit is missing because a lot of

00:24:52,389 --> 00:24:57,609
testing is missing which is the last

00:24:53,739 --> 00:25:01,749
point also most of the USB work is based

00:24:57,609 --> 00:25:03,700
on running a Linux guests so you know we

00:25:01,749 --> 00:25:05,440
D have to so that I think the first we

00:25:03,700 --> 00:25:08,109
know now that it works with windows

00:25:05,440 --> 00:25:09,879
because our intern has been working on

00:25:08,109 --> 00:25:12,149
that primarily but you know that's

00:25:09,879 --> 00:25:16,629
something we need to do to test it out

00:25:12,149 --> 00:25:19,539
with different you know guests and of

00:25:16,629 --> 00:25:22,779
course as I mentioned know adding a few

00:25:19,539 --> 00:25:26,409
more file operations probably just move

00:25:22,779 --> 00:25:28,089
or copy is probably enough but something

00:25:26,409 --> 00:25:31,929
like delete is also something that could

00:25:28,089 --> 00:25:38,259
like make life more easier so oh yeah

00:25:31,929 --> 00:25:45,359
and I guess that's pretty much it if i'm

00:25:38,259 --> 00:25:45,359
not wrong yeah so yep i'm done questions

00:25:48,140 --> 00:25:59,530
if it's a difficult one then he will

00:25:49,880 --> 00:26:03,320
answer it yeah hi so I have one question

00:25:59,530 --> 00:26:04,940
how does it work when you know your so

00:26:03,320 --> 00:26:07,370
kim is trying to do a file operation

00:26:04,940 --> 00:26:09,980
because it was told by guest yeah fit

00:26:07,370 --> 00:26:13,970
some file or something so what happens

00:26:09,980 --> 00:26:17,240
if for some reason key mu fails in that

00:26:13,970 --> 00:26:20,150
operation is there a way so that you can

00:26:17,240 --> 00:26:22,220
tell back the guest why are empty people

00:26:20,150 --> 00:26:24,500
to call something and then yeah there's

00:26:22,220 --> 00:26:27,590
definitely a way to notify that there an

00:26:24,500 --> 00:26:29,720
error has happened so the guest is going

00:26:27,590 --> 00:26:31,820
to know that this operation did not

00:26:29,720 --> 00:26:34,790
complete okay cuz I'm thinking of how to

00:26:31,820 --> 00:26:38,930
expose it in liber that if we are gonna

00:26:34,790 --> 00:26:41,240
yeah so I did see some patches on

00:26:38,930 --> 00:26:44,480
livered but I think they are just there

00:26:41,240 --> 00:26:46,490
I didn't see any discussions about them

00:26:44,480 --> 00:26:48,890
there's a v3 but I didn't see what what

00:26:46,490 --> 00:26:50,840
happened after that yeah and one more

00:26:48,890 --> 00:26:52,670
thing that Stefan mentioned to me was

00:26:50,840 --> 00:26:57,830
that and there has been issues with some

00:26:52,670 --> 00:27:00,440
other in another case where since live

00:26:57,830 --> 00:27:02,540
libvirt or PM you runs as a separate

00:27:00,440 --> 00:27:04,610
specific user it does not have

00:27:02,540 --> 00:27:06,170
permissions to a specific location so

00:27:04,610 --> 00:27:09,140
that's also something that I don't know

00:27:06,170 --> 00:27:10,940
how is the question okay so yeah I don't

00:27:09,140 --> 00:27:14,440
know that's something you have to think

00:27:10,940 --> 00:27:14,440
about okay thank you yeah

00:27:18,500 --> 00:27:23,100
yeah I was just wondering about the

00:27:21,029 --> 00:27:26,010
out-of-the-box windows support

00:27:23,100 --> 00:27:28,110
friendship in the guests I edit walking

00:27:26,010 --> 00:27:29,940
out of the box with all windows version

00:27:28,110 --> 00:27:32,760
I've got memories trying that awhile ago

00:27:29,940 --> 00:27:36,179
unlike windows XP unity to install some

00:27:32,760 --> 00:27:37,890
drivers or somehow it worked I'm I kind

00:27:36,179 --> 00:27:40,049
of have a feeling that even with windows

00:27:37,890 --> 00:27:42,779
XP should just work because it's a USB

00:27:40,049 --> 00:27:50,299
device and yeah the USB part is okay at

00:27:42,779 --> 00:27:50,299
the empty people oh the empty people oh

00:27:51,110 --> 00:28:00,470
okay what you want it for more reason

00:27:54,110 --> 00:28:02,360
than just MGP anyways okay and an hour

00:28:00,470 --> 00:28:07,059
in turn try it with I think windows 7

00:28:02,360 --> 00:28:11,420
and h2 so those work but ok yeah even in

00:28:07,059 --> 00:28:13,660
speakers that some additional steps from

00:28:11,420 --> 00:28:16,060
up higher you have

00:28:13,660 --> 00:28:19,210
through this process but catches fire

00:28:16,060 --> 00:28:24,220
Oh Kate can do it automatically I got a

00:28:19,210 --> 00:28:26,080
bigger problem yeah what I thought I

00:28:24,220 --> 00:28:28,420
remember was having to hunt on some be

00:28:26,080 --> 00:28:36,370
nervous somewhere and install it and

00:28:28,420 --> 00:28:38,680
then get any pee okay good yes um so I

00:28:36,370 --> 00:28:40,900
just think that you know I know MGP has

00:28:38,680 --> 00:28:43,420
a bad rep you know no one uses it but

00:28:40,900 --> 00:28:51,990
there are good things about it and I

00:28:43,420 --> 00:28:54,040
mean you have to admit it exactly yeah i

00:28:51,990 --> 00:28:55,750
mean i just spoke to you a few more

00:28:54,040 --> 00:28:59,440
people over here and every one of them

00:28:55,750 --> 00:29:07,450
was about how MTP screwed up their

00:28:59,440 --> 00:29:09,780
device or did something wrong so okay

00:29:07,450 --> 00:29:09,780

YouTube URL: https://www.youtube.com/watch?v=hx09yJmOeXs


