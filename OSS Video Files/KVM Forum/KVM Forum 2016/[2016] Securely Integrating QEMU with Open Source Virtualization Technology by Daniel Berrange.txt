Title: [2016] Securely Integrating QEMU with Open Source Virtualization Technology by Daniel Berrange
Publication date: 2016-08-31
Playlist: KVM Forum 2016
Description: 
	The QEMU projects provides the foundation for the overwhelming majority of open source virtualization deployments, being used for both KVM and Xen. This large deployment footprint makes QEMU an attractive target for exploitation and its wide variety of features offer many avenues for attack, whether from the guest or from other infrastructure on the managment LAN. The presentation will outline the technologies available that should be used in all deployments to protect QEMU and its communication channels from compromise. This will cover confinement of the QEMU process, security of its network services, security of its disk storage and future gaps in protection that remain to be addressed.

Daniel Berrange
Red Hat, Software Engineer

Daniel is a Principal Software Engineer, working in a variety of roles at Red Hat over the last 12 years. Since 2006, he has been specialized in the development of technologies related to virtualization management, as lead developer of Libvirt, GTK-VNC, Libvirt Perl, Libvirt GObject and Libvirt Sandbox, and contributor to the Xen, KVM, oVirt and OpenStack projects. Daniel is a passionate believer in the value of open source software and the benefits it brings to the world. Outside of his day job at Red Hat, he is also maintainer of the DBus Perl binding and the Entangle remote camera control & capture software.

Slides: http://www.linux-kvm.org/images/8/8c/01x03-Daniel_Berrange-Securely_Integrating_QEMU_with_Open_Source_Virtualization_Technology.pdf
Captions: 
	00:00:09,200 --> 00:00:14,509
okay I think we can start now thanks for

00:00:12,300 --> 00:00:16,949
coming to this talk just after lunch and

00:00:14,509 --> 00:00:20,160
those who don't know me I'm Daniel

00:00:16,949 --> 00:00:25,050
boundary and I've been working for about

00:00:20,160 --> 00:00:29,929
10 years on virtualization on lipids Zen

00:00:25,050 --> 00:00:32,219
kvm and most recently OpenStack and

00:00:29,929 --> 00:00:34,500
today I'm going to talk a bit about work

00:00:32,219 --> 00:00:37,649
I've been doing over the past year on Q

00:00:34,500 --> 00:00:41,430
mu and to improve the security of Q mu

00:00:37,649 --> 00:00:48,420
from the point of view of the host and

00:00:41,430 --> 00:00:50,399
internal network management stack so

00:00:48,420 --> 00:00:53,969
we're not with specifically not talking

00:00:50,399 --> 00:00:55,829
about security of the guest ABI which

00:00:53,969 --> 00:00:57,989
was what the previous talk in this room

00:00:55,829 --> 00:01:02,550
was about we're focusing exclusively on

00:00:57,989 --> 00:01:06,540
the on the host side security and I'm

00:01:02,550 --> 00:01:10,229
going to talk about providing secrets as

00:01:06,540 --> 00:01:14,070
in passwords or keys to QMI you about

00:01:10,229 --> 00:01:17,250
encryption of data at rest and data in

00:01:14,070 --> 00:01:24,000
transit and on authorization of network

00:01:17,250 --> 00:01:26,400
access and suggest to set the scene this

00:01:24,000 --> 00:01:30,090
this diagram is an exceedingly

00:01:26,400 --> 00:01:33,090
simplified view of a small part of the

00:01:30,090 --> 00:01:35,479
OpenStack infrastructure and so we

00:01:33,090 --> 00:01:41,340
typically have a number of compute hosts

00:01:35,479 --> 00:01:42,720
running multiple VMs on the hosts and if

00:01:41,340 --> 00:01:45,720
you're doing live migration you'll have

00:01:42,720 --> 00:01:48,329
a migration data channel between 2pm use

00:01:45,720 --> 00:01:52,079
on two hosts and if you're doing block

00:01:48,329 --> 00:01:56,670
migration you'll also have a NBD network

00:01:52,079 --> 00:01:58,829
connection between the two hosts and you

00:01:56,670 --> 00:02:00,420
probably have a network connection to

00:01:58,829 --> 00:02:04,229
your storage whether it's like scuzzy

00:02:00,420 --> 00:02:07,500
rbd or NFS or some other network based

00:02:04,229 --> 00:02:10,789
storage rbd is the most popular in

00:02:07,500 --> 00:02:10,789
OpenStack land and

00:02:10,840 --> 00:02:15,010
and from the point of view of actually

00:02:13,450 --> 00:02:19,319
interacting with the guest the tenant

00:02:15,010 --> 00:02:22,930
user on the internet and connects over

00:02:19,319 --> 00:02:25,780
web sockets proxies to a VNC proxy

00:02:22,930 --> 00:02:28,799
server or a serial console proxy and

00:02:25,780 --> 00:02:33,940
then that's then forwards data onto qmu

00:02:28,799 --> 00:02:36,610
on qm use VNC VNC server or serial

00:02:33,940 --> 00:02:39,519
console server the problem which 10

00:02:36,610 --> 00:02:42,670
attack is that all of these network

00:02:39,519 --> 00:02:44,590
connections on the internal lan they're

00:02:42,670 --> 00:02:47,290
all going in clear-text currently

00:02:44,590 --> 00:02:50,290
there's no encryption whatsoever so if

00:02:47,290 --> 00:02:53,799
if any adversary gets onto the internal

00:02:50,290 --> 00:02:56,730
network of the cloud they basically have

00:02:53,799 --> 00:02:58,629
a very easy time to compromise or access

00:02:56,730 --> 00:03:02,349
data that's flowing between the

00:02:58,629 --> 00:03:03,549
different components that's kind of

00:03:02,349 --> 00:03:07,750
that's kind of the goal of what I've

00:03:03,549 --> 00:03:11,440
been working to address it's the first

00:03:07,750 --> 00:03:13,750
thing I'd like to talk about is a little

00:03:11,440 --> 00:03:15,280
bit of infrastructure that we had to

00:03:13,750 --> 00:03:19,000
deal with before we got to the real

00:03:15,280 --> 00:03:21,220
meaty stuff q mu has never really had a

00:03:19,000 --> 00:03:24,220
good way to provide to provide its

00:03:21,220 --> 00:03:26,549
secrets people ago done it on an ad hoc

00:03:24,220 --> 00:03:29,319
basis so for example the rbd

00:03:26,549 --> 00:03:31,989
configuration just takes a password on

00:03:29,319 --> 00:03:33,700
the command line in clear text so anyone

00:03:31,989 --> 00:03:37,180
running PS on the machine can see that

00:03:33,700 --> 00:03:39,010
password and for disk encryption we've

00:03:37,180 --> 00:03:41,319
had to provide a password out of band

00:03:39,010 --> 00:03:43,750
where the Q mu monitor and this is

00:03:41,319 --> 00:03:47,049
created all sorts of pain for the

00:03:43,750 --> 00:03:48,910
internal q mu block infrastructure to

00:03:47,049 --> 00:03:52,269
have to wait for the password to be

00:03:48,910 --> 00:03:53,889
provided before it can set things up or

00:03:52,269 --> 00:03:55,419
we've even had stuff which is prompts

00:03:53,889 --> 00:03:58,060
interactively on the on the console

00:03:55,419 --> 00:04:00,180
which is mostly useless for people

00:03:58,060 --> 00:04:02,049
wanting to automate management of Q mu

00:04:00,180 --> 00:04:03,669
those complex for management

00:04:02,049 --> 00:04:08,410
applications and as complex with Q mu

00:04:03,669 --> 00:04:09,639
maintain errs and so we decided the

00:04:08,410 --> 00:04:11,579
first we need to do is provide a

00:04:09,639 --> 00:04:14,019
standardized way of getting secret

00:04:11,579 --> 00:04:18,430
secret tokens or passwords whenever you

00:04:14,019 --> 00:04:23,740
wanna call them into Q mu so we created

00:04:18,430 --> 00:04:24,800
this secret object type and you can

00:04:23,740 --> 00:04:27,409
provide the secret

00:04:24,800 --> 00:04:31,400
in either raw format or base64 encoding

00:04:27,409 --> 00:04:34,430
and you can provide it either in line as

00:04:31,400 --> 00:04:40,069
a property on the object or indirectly

00:04:34,430 --> 00:04:42,050
via a file on disk and the secret data

00:04:40,069 --> 00:04:44,479
itself can be in clear text so it can be

00:04:42,050 --> 00:04:47,750
encrypted with a master key which you

00:04:44,479 --> 00:04:50,810
have provided to cure mu separately and

00:04:47,750 --> 00:04:53,780
we've got this wired up for the rbd

00:04:50,810 --> 00:04:57,370
driver the ice kazi driver the curl

00:04:53,780 --> 00:05:02,090
block driver the recent Lux driver and

00:04:57,370 --> 00:05:03,650
also for x.509 certificates while the

00:05:02,090 --> 00:05:06,020
rather the private key associated with a

00:05:03,650 --> 00:05:08,650
certificate and it's nice to be able to

00:05:06,020 --> 00:05:12,319
encrypt those whose private keys as well

00:05:08,650 --> 00:05:13,729
and from the point of view actually

00:05:12,319 --> 00:05:16,099
using this there's kind of two

00:05:13,729 --> 00:05:21,830
approaches you can either provide the

00:05:16,099 --> 00:05:26,629
secrets directly for each each each

00:05:21,830 --> 00:05:30,889
thing you're configuring in inline and

00:05:26,629 --> 00:05:34,759
encrypted or you can have one master

00:05:30,889 --> 00:05:36,229
master secrets you provide you provide

00:05:34,759 --> 00:05:37,880
secure mu and then you encrypt all of

00:05:36,229 --> 00:05:41,479
the individual sequence with that master

00:05:37,880 --> 00:05:43,219
secret I've got an exam a few examples

00:05:41,479 --> 00:05:47,659
here of how you would configure this in

00:05:43,219 --> 00:05:49,340
Q mu and the first one is first example

00:05:47,659 --> 00:05:52,219
is totally insecure you don't want to do

00:05:49,340 --> 00:05:54,979
this except in development it just

00:05:52,219 --> 00:05:58,370
passes the secret data as a as a field

00:05:54,979 --> 00:06:00,800
on the command line and the second

00:05:58,370 --> 00:06:03,259
option is you pass the secret equate a

00:06:00,800 --> 00:06:05,710
text file put the secret data in that

00:06:03,259 --> 00:06:07,669
file and just pass Q mu Phi 0 name

00:06:05,710 --> 00:06:09,379
assuming the file permissions are

00:06:07,669 --> 00:06:14,000
suitably restrictive than that's that's

00:06:09,379 --> 00:06:16,279
secure and the file can be in plain text

00:06:14,000 --> 00:06:18,529
or it can be in base64 format if that's

00:06:16,279 --> 00:06:21,469
more convenient for your management

00:06:18,529 --> 00:06:23,060
application what we're actually doing in

00:06:21,469 --> 00:06:25,430
lib verte when we use this feature is

00:06:23,060 --> 00:06:28,099
that we create a single master secrets

00:06:25,430 --> 00:06:30,500
which we provide q mu viral file when

00:06:28,099 --> 00:06:33,680
you first start qm you know for

00:06:30,500 --> 00:06:37,860
everything else after that we we provide

00:06:33,680 --> 00:06:39,689
the secrets as encrypted data in line

00:06:37,860 --> 00:06:41,550
and so you just have to tell QMI you

00:06:39,689 --> 00:06:43,560
what the idea of the master secret is

00:06:41,550 --> 00:06:46,819
and the cipher text and the

00:06:43,560 --> 00:06:49,770
initialization vector but nqm you can

00:06:46,819 --> 00:06:51,120
decrypt the secret of that object so the

00:06:49,770 --> 00:06:52,710
benefit of doing this is that you don't

00:06:51,120 --> 00:06:54,449
have to create lots and lots of files on

00:06:52,710 --> 00:06:56,879
disk for each password you need to give

00:06:54,449 --> 00:06:58,379
qmu you have one file on disk and then

00:06:56,879 --> 00:07:00,930
everything else can be provided in line

00:06:58,379 --> 00:07:07,740
the cove simplifies life and the

00:07:00,930 --> 00:07:09,539
management applications and so once

00:07:07,740 --> 00:07:11,090
you've defined the secret and loaded it

00:07:09,539 --> 00:07:13,169
into Q you've got to be able to

00:07:11,090 --> 00:07:17,279
associate the secret with the thing

00:07:13,169 --> 00:07:19,860
you're configuring it's the rbd server

00:07:17,279 --> 00:07:22,909
for example and when qme authenticates

00:07:19,860 --> 00:07:25,710
with rbd has to provide a password and

00:07:22,909 --> 00:07:28,379
so we put a new property for the rbd

00:07:25,710 --> 00:07:30,120
configuration password secrets where you

00:07:28,379 --> 00:07:34,289
just provide the ID of the secret which

00:07:30,120 --> 00:07:37,949
has the rbd password in it and a similar

00:07:34,289 --> 00:07:40,620
kind of idea applies for the TLS private

00:07:37,949 --> 00:07:42,839
key and slightly different property name

00:07:40,620 --> 00:07:45,930
here we again you just providing a

00:07:42,839 --> 00:07:48,180
reference to the secret object so qme

00:07:45,930 --> 00:07:49,710
you can go and grab a secret that needs

00:07:48,180 --> 00:07:53,159
for that particular thing that is

00:07:49,710 --> 00:07:56,159
configuring and so this is provided as a

00:07:53,159 --> 00:07:59,909
nice flexible way of getting passwords

00:07:56,159 --> 00:08:02,580
keys pass phrases into qmu in a secure

00:07:59,909 --> 00:08:10,080
manner and that standardized across

00:08:02,580 --> 00:08:13,789
everything qmu does the the next thing I

00:08:10,080 --> 00:08:17,159
want to talk about is the TLS encryption

00:08:13,789 --> 00:08:19,909
many many years ago I added support for

00:08:17,159 --> 00:08:23,669
TLS encryption in the VNC server and

00:08:19,909 --> 00:08:25,830
when we did that the code for handing

00:08:23,669 --> 00:08:27,689
all of this was just all in the VNC

00:08:25,830 --> 00:08:30,210
server code inside qm use it wasn't

00:08:27,689 --> 00:08:33,180
really reusable so we extracted all of

00:08:30,210 --> 00:08:38,250
that code into a and another standalone

00:08:33,180 --> 00:08:40,079
object and called the TLS credentials

00:08:38,250 --> 00:08:43,699
object and there's kind of two of these

00:08:40,079 --> 00:08:46,949
objects you can use one and provides

00:08:43,699 --> 00:08:49,079
anonymous credentials you know what you

00:08:46,949 --> 00:08:50,490
want to use this because it's pretty

00:08:49,079 --> 00:08:51,410
much useless from a security point of

00:08:50,490 --> 00:08:53,240
view but

00:08:51,410 --> 00:08:55,519
we needed to provide this for backwards

00:08:53,240 --> 00:08:58,009
compatibility with existing features in

00:08:55,519 --> 00:09:02,230
the VNC server with the one you want to

00:08:58,009 --> 00:09:04,459
be using is the x.509 certificates and

00:09:02,230 --> 00:09:06,980
when you configure this you provide a

00:09:04,459 --> 00:09:10,959
path to a directory which contains the

00:09:06,980 --> 00:09:10,959
certificate files in the private key and

00:09:13,389 --> 00:09:17,149
when when you're configuring these

00:09:15,920 --> 00:09:19,279
credentials you can say whether these

00:09:17,149 --> 00:09:21,709
credentials will require a client

00:09:19,279 --> 00:09:24,050
certificate as well so normally when our

00:09:21,709 --> 00:09:27,139
when our network client connects to a

00:09:24,050 --> 00:09:28,939
TLS server the client verifies the

00:09:27,139 --> 00:09:30,379
server identity but it's it's less

00:09:28,939 --> 00:09:33,470
common for the server to verify the

00:09:30,379 --> 00:09:36,199
client identity and that's something we

00:09:33,470 --> 00:09:38,660
we kind of want to do in a lot of

00:09:36,199 --> 00:09:40,899
deployments of QM you so there's there's

00:09:38,660 --> 00:09:44,449
the ability to tell QMI you to mandate a

00:09:40,899 --> 00:09:48,189
client certificate so you can get mutual

00:09:44,449 --> 00:09:48,189
authentication in both directions I

00:09:48,310 --> 00:09:52,910
mentioned on the previous slide that you

00:09:50,629 --> 00:09:54,889
can now tell QMI you you can now give qm

00:09:52,910 --> 00:09:57,050
you a private key that's encrypted so

00:09:54,889 --> 00:09:58,910
you don't have to have your your private

00:09:57,050 --> 00:10:01,730
keys lying around in plain text on disk

00:09:58,910 --> 00:10:04,399
and most recently in this forthcoming

00:10:01,730 --> 00:10:07,519
release you can now set the cipher

00:10:04,399 --> 00:10:09,139
priority so there's ever-changing

00:10:07,519 --> 00:10:11,660
guidance on what are the best

00:10:09,139 --> 00:10:15,199
cryptographic ciphers and modes to use

00:10:11,660 --> 00:10:16,939
with TLS so no single hard coded default

00:10:15,199 --> 00:10:20,329
is suitable for all so we can now

00:10:16,939 --> 00:10:27,319
configure that Sam as needed without

00:10:20,329 --> 00:10:31,579
having to do any code changes if

00:10:27,319 --> 00:10:33,769
anyone's if anyone's deployed services

00:10:31,579 --> 00:10:36,529
with with TLS encryption or try to debug

00:10:33,769 --> 00:10:39,259
problems using them you'll find that

00:10:36,529 --> 00:10:40,790
it's a horrific thing to debug you

00:10:39,259 --> 00:10:43,430
generally just get our error message

00:10:40,790 --> 00:10:45,829
saying the handshake failed and no

00:10:43,430 --> 00:10:48,639
further information at all and unless

00:10:45,829 --> 00:10:52,339
you really know a decent amount about

00:10:48,639 --> 00:10:55,009
TNS and x.509 certificates the chances

00:10:52,339 --> 00:10:57,730
of debugging it is quite low and it's

00:10:55,009 --> 00:11:01,300
hit or miss

00:10:57,730 --> 00:11:04,480
so in this new certificate handling

00:11:01,300 --> 00:11:07,660
curly q mu we added some sanity checking

00:11:04,480 --> 00:11:09,970
so when you load the city of gets into Q

00:11:07,660 --> 00:11:13,149
mu it'll do a number of checks and the

00:11:09,970 --> 00:11:14,709
certificates and it'll make sure various

00:11:13,149 --> 00:11:17,889
basic constraints are set in the

00:11:14,709 --> 00:11:21,970
certificates metadata which are things

00:11:17,889 --> 00:11:25,500
look um you once wants to have set it'll

00:11:21,970 --> 00:11:27,670
check the key purpose and key usage

00:11:25,500 --> 00:11:30,519
values that have been declared was again

00:11:27,670 --> 00:11:32,110
Q mu has some predefined requirements

00:11:30,519 --> 00:11:34,660
for what it expects if you don't get

00:11:32,110 --> 00:11:39,130
those right then your your sessions

00:11:34,660 --> 00:11:40,810
going to fail to fail to handshake it

00:11:39,130 --> 00:11:43,510
checks the stupid things like expiry

00:11:40,810 --> 00:11:45,040
time of validity time which a surprising

00:11:43,510 --> 00:11:47,680
number of people will accidentally get

00:11:45,040 --> 00:11:50,230
that wrong and of course it also checks

00:11:47,680 --> 00:11:53,079
the certificate chain to make sure that

00:11:50,230 --> 00:11:55,360
the certificate certificate authority

00:11:53,079 --> 00:11:56,949
you've given Q mu is the same as the one

00:11:55,360 --> 00:11:59,110
that's actually signed the certificates

00:11:56,949 --> 00:12:00,760
you've given Q mu because if you don't

00:11:59,110 --> 00:12:09,180
get those matching then you're not going

00:12:00,760 --> 00:12:12,540
to have much success so the the new TLS

00:12:09,180 --> 00:12:15,550
object framework was added in Q mu 2.5

00:12:12,540 --> 00:12:19,920
we converted over the VNC server in that

00:12:15,550 --> 00:12:22,690
release in the 2.6 release of pure mu we

00:12:19,920 --> 00:12:25,240
added support for using TLS with the

00:12:22,690 --> 00:12:28,209
character device backends that's that's

00:12:25,240 --> 00:12:31,690
used with typically the serial ports in

00:12:28,209 --> 00:12:36,339
q mu we also added it to the NBD server

00:12:31,690 --> 00:12:40,269
we worked with the MBD maintain errs and

00:12:36,339 --> 00:12:42,940
got a an enhancement to the mvd protocol

00:12:40,269 --> 00:12:45,519
specification for how to use TLS in

00:12:42,940 --> 00:12:47,529
combination with NBD and then we

00:12:45,519 --> 00:12:50,740
implemented that that protocol

00:12:47,529 --> 00:12:54,010
enhancement in Q mu and we also

00:12:50,740 --> 00:12:55,389
implemented it in a another NBD server

00:12:54,010 --> 00:12:59,800
just so that we can verify

00:12:55,389 --> 00:13:02,350
interoperability and most recently in

00:12:59,800 --> 00:13:04,120
this forthcoming release we finally got

00:13:02,350 --> 00:13:07,120
support for TLS encryption with

00:13:04,120 --> 00:13:08,949
migration so when the when the guests

00:13:07,120 --> 00:13:11,290
Ram contents has been transferred from

00:13:08,949 --> 00:13:11,800
one host to the other the RAM isn't all

00:13:11,290 --> 00:13:18,700
there in

00:13:11,800 --> 00:13:21,370
plain text for anyone to see it's when

00:13:18,700 --> 00:13:23,200
configuring TLS certificates there's

00:13:21,370 --> 00:13:26,170
kind of a couple of different ways you

00:13:23,200 --> 00:13:28,360
can go about this and the way you want

00:13:26,170 --> 00:13:31,690
to choose depends on your deployment

00:13:28,360 --> 00:13:34,660
scenarios really you could just have one

00:13:31,690 --> 00:13:39,790
set of TLS certificates for the entire

00:13:34,660 --> 00:13:42,670
host so VNC serial console migration all

00:13:39,790 --> 00:13:45,100
use the same certificates or you might

00:13:42,670 --> 00:13:46,209
have different Sam you might want to

00:13:45,100 --> 00:13:48,880
give different certificates the

00:13:46,209 --> 00:13:50,500
different services so the VNC server and

00:13:48,880 --> 00:13:53,200
serial console might want to have one

00:13:50,500 --> 00:13:54,579
set of credentials and the migration and

00:13:53,200 --> 00:13:57,820
NBD server might want have a different

00:13:54,579 --> 00:14:00,130
set of TLS credentials and so you can

00:13:57,820 --> 00:14:02,950
you can flexibly choose which model you

00:14:00,130 --> 00:14:05,290
want and all you might want to choose

00:14:02,950 --> 00:14:08,230
the credentials based on which network

00:14:05,290 --> 00:14:09,670
the service is listening on so there's

00:14:08,230 --> 00:14:12,220
this quite a bit of flexibility there

00:14:09,670 --> 00:14:14,110
and how you configure the TLS

00:14:12,220 --> 00:14:16,410
credentials with each network service in

00:14:14,110 --> 00:14:16,410
Q mu

00:14:26,580 --> 00:14:33,580
the thing I've been working on most

00:14:28,810 --> 00:14:36,510
recently and in this of the past well

00:14:33,580 --> 00:14:42,280
it's been 6 or 12 months in fact and is

00:14:36,510 --> 00:14:45,070
disk encryption there's kind of two

00:14:42,280 --> 00:14:48,160
goals with the disk encryption and pmu

00:14:45,070 --> 00:14:50,500
and the kind of their kind of threat

00:14:48,160 --> 00:14:53,440
model is that the the person who is

00:14:50,500 --> 00:14:55,480
administrating the computer hosts that a

00:14:53,440 --> 00:14:57,460
running qm you might not be the same as

00:14:55,480 --> 00:14:59,950
the people who are looking after the

00:14:57,460 --> 00:15:01,240
storage servers and one group of people

00:14:59,950 --> 00:15:04,810
might not trust the other group of

00:15:01,240 --> 00:15:06,670
people so the the the the computers

00:15:04,810 --> 00:15:08,050
administrators don't want the storage

00:15:06,670 --> 00:15:11,110
administrators to be able to compromise

00:15:08,050 --> 00:15:14,500
any of the the users data from their vm

00:15:11,110 --> 00:15:17,500
so there's there's a clear need to have

00:15:14,500 --> 00:15:19,690
some kind of disk encryption in play

00:15:17,500 --> 00:15:22,150
here now you could say you might say

00:15:19,690 --> 00:15:23,770
well the guest OS can do disk encryption

00:15:22,150 --> 00:15:29,170
already so why do we need it in the qm

00:15:23,770 --> 00:15:32,140
use side and that's true to some extent

00:15:29,170 --> 00:15:35,410
but doing disk encryption inside the

00:15:32,140 --> 00:15:36,730
guest has a few downsides first you've

00:15:35,410 --> 00:15:40,900
got the problem of how do you provide

00:15:36,730 --> 00:15:42,100
the the key for the virtual machine how

00:15:40,900 --> 00:15:44,890
do you provide the key to the virtual

00:15:42,100 --> 00:15:46,570
machine when it boots up and because

00:15:44,890 --> 00:15:48,570
typically on a physical machine you'll

00:15:46,570 --> 00:15:51,010
be entering a password when it boots and

00:15:48,570 --> 00:15:52,060
if you're hundreds of VMS running you

00:15:51,010 --> 00:15:53,830
don't want to have to have someone

00:15:52,060 --> 00:15:57,430
manually enter a password in the vm

00:15:53,830 --> 00:15:59,020
console every time they boot and I mean

00:15:57,430 --> 00:16:01,780
this happened to me just just yesterday

00:15:59,020 --> 00:16:04,120
in fact my my hosting provider had their

00:16:01,780 --> 00:16:06,700
their host go down and rebooted my vm

00:16:04,120 --> 00:16:09,880
and my vm was dead until i went in an

00:16:06,700 --> 00:16:13,410
nth of the the deluxe password at the

00:16:09,880 --> 00:16:13,410
boot prompt it's kind of inconvenient

00:16:13,680 --> 00:16:19,390
it's a kind of a virtualization specific

00:16:16,480 --> 00:16:20,800
problem is in a cloud environment at

00:16:19,390 --> 00:16:23,140
least it's quite common to upload a

00:16:20,800 --> 00:16:25,180
prebuilt disk image and then spawn

00:16:23,140 --> 00:16:27,420
multiple virtual machines from that same

00:16:25,180 --> 00:16:30,250
disk image if you're doing the

00:16:27,420 --> 00:16:33,040
encryption inside that inside the guest

00:16:30,250 --> 00:16:35,620
OS all of those VMs you you boots are

00:16:33,040 --> 00:16:37,600
going to be using the same luxe

00:16:35,620 --> 00:16:39,399
encryption password and

00:16:37,600 --> 00:16:41,769
for encrypting the payload data and

00:16:39,399 --> 00:16:43,509
that's that's generally undesirable from

00:16:41,769 --> 00:16:45,100
a security point of view you don't want

00:16:43,509 --> 00:16:47,529
to have multiple VMs all with the same

00:16:45,100 --> 00:16:50,170
decryption key for their for their disk

00:16:47,529 --> 00:16:51,910
so that's the only way to get around

00:16:50,170 --> 00:16:54,339
that is you'd have to re-encrypt the

00:16:51,910 --> 00:16:57,279
guest disk image each time you booted a

00:16:54,339 --> 00:16:59,199
new vm from that same single image and

00:16:57,279 --> 00:17:00,399
that's that's kind of a time penalty you

00:16:59,199 --> 00:17:07,689
don't want to pay when you're booting

00:17:00,399 --> 00:17:09,909
new VM instances and also as a as a

00:17:07,689 --> 00:17:11,919
hosting provider you might want to you

00:17:09,909 --> 00:17:13,480
might want to provide some you might

00:17:11,919 --> 00:17:16,780
wanna have some strong guarantees about

00:17:13,480 --> 00:17:18,939
the security of your customers data you

00:17:16,780 --> 00:17:20,079
don't want as a business you might you

00:17:18,939 --> 00:17:22,360
don't want to have the risk that some of

00:17:20,079 --> 00:17:24,159
your customers data gets leaked if you

00:17:22,360 --> 00:17:26,709
get compromised in some way so you don't

00:17:24,159 --> 00:17:28,750
want to necessarily rely on the customer

00:17:26,709 --> 00:17:30,789
to a provided encryption for their for

00:17:28,750 --> 00:17:33,039
their vm disk images you want to

00:17:30,789 --> 00:17:35,230
guarantee that all VMS running in in

00:17:33,039 --> 00:17:37,630
your hosting environment have got disk

00:17:35,230 --> 00:17:39,690
encryption regardless of whether the the

00:17:37,630 --> 00:17:43,000
user thought to turn it on themselves

00:17:39,690 --> 00:17:50,080
just to protect you against compromise

00:17:43,000 --> 00:17:51,520
of your infrastructure so there's a

00:17:50,080 --> 00:17:55,030
compelling is a compelling need to have

00:17:51,520 --> 00:17:56,799
disk encryption and in qmu itself this

00:17:55,030 --> 00:17:59,890
in fact already existed for many many

00:17:56,799 --> 00:18:02,320
years if if you've looked at the cuke

00:17:59,890 --> 00:18:04,390
out disk image formats in any kind of

00:18:02,320 --> 00:18:08,440
close detail you might have noticed that

00:18:04,390 --> 00:18:10,090
it has an encryption facility and and

00:18:08,440 --> 00:18:13,120
this sounded like a really great great

00:18:10,090 --> 00:18:14,470
idea at the time it was written and the

00:18:13,120 --> 00:18:17,320
fast forward a couple of years and

00:18:14,470 --> 00:18:19,450
people with some cryptographic knowledge

00:18:17,320 --> 00:18:22,770
actually looked at this and found that

00:18:19,450 --> 00:18:26,320
it was lacking in quite a number of ways

00:18:22,770 --> 00:18:30,159
for starts the Keuka to encryption is

00:18:26,320 --> 00:18:34,419
hard-coded to use bas encryption cipher

00:18:30,159 --> 00:18:36,340
in CBC mode with a and plain 64

00:18:34,419 --> 00:18:39,159
algorithm for generating initialization

00:18:36,340 --> 00:18:42,250
vectors and this is this is quite an

00:18:39,159 --> 00:18:44,260
undesirable configuration and because it

00:18:42,250 --> 00:18:46,020
allows a number of attacks on the on the

00:18:44,260 --> 00:18:50,100
content of the disk image and

00:18:46,020 --> 00:18:50,100
specifically a watermarking attack

00:18:50,610 --> 00:18:54,160
that wouldn't be in the end of the world

00:18:52,600 --> 00:18:56,950
if you could configure the the

00:18:54,160 --> 00:18:59,350
algorithms that cue car to used but in

00:18:56,950 --> 00:19:01,120
another great bit of design the choice

00:18:59,350 --> 00:19:03,550
of encryption modes was completely hard

00:19:01,120 --> 00:19:07,360
coded so there's there's no ability to

00:19:03,550 --> 00:19:09,810
change change lixin in q2 without

00:19:07,360 --> 00:19:15,970
breaking compatibility with with

00:19:09,810 --> 00:19:20,050
previous Cure Muse and the other really

00:19:15,970 --> 00:19:22,150
undesirable factor is that the password

00:19:20,050 --> 00:19:25,690
the decryption password you gave to the

00:19:22,150 --> 00:19:29,080
queue cow to is directly used to encrypt

00:19:25,690 --> 00:19:30,910
the payload of the disk so if you want

00:19:29,080 --> 00:19:33,070
to change the password the used for York

00:19:30,910 --> 00:19:36,520
you care to image that means re-encrypt

00:19:33,070 --> 00:19:38,770
entire payload of your disk which is

00:19:36,520 --> 00:19:44,290
just not something you want to be doing

00:19:38,770 --> 00:19:46,300
really and that also means that if you

00:19:44,290 --> 00:19:49,060
if you come to delete you will you want

00:19:46,300 --> 00:19:51,970
to delete the disk or if the password if

00:19:49,060 --> 00:19:54,010
the password has been compromised and it

00:19:51,970 --> 00:19:55,810
means you've got no easy way to protect

00:19:54,010 --> 00:19:58,060
the data you could have actually

00:19:55,810 --> 00:20:01,480
override all of the data blocks to

00:19:58,060 --> 00:20:03,040
prevent any of them being decrypted was

00:20:01,480 --> 00:20:05,440
where if you know a lot it a little bit

00:20:03,040 --> 00:20:07,740
about the good lucks formats they don't

00:20:05,440 --> 00:20:10,990
directly encrypt the payload with the

00:20:07,740 --> 00:20:14,380
user password and the password is just

00:20:10,990 --> 00:20:17,590
used to write unlock a master key so in

00:20:14,380 --> 00:20:19,330
the event of your user password being

00:20:17,590 --> 00:20:20,830
compromised in Lux you just help you can

00:20:19,330 --> 00:20:24,190
change the password and it doesn't have

00:20:20,830 --> 00:20:26,020
to re-encrypt the entire payload and you

00:20:24,190 --> 00:20:28,270
can just destroy the lux header and that

00:20:26,020 --> 00:20:28,990
makes the entire payload inaccessible so

00:20:28,270 --> 00:20:32,880
you don't have to worry about

00:20:28,990 --> 00:20:32,880
overwriting the entire payload with lux

00:20:33,030 --> 00:20:41,050
so for all of these are all of all of

00:20:36,940 --> 00:20:43,810
these reasons why the Q how to code is

00:20:41,050 --> 00:20:47,830
horrible and we decided to deprecate it

00:20:43,810 --> 00:20:49,690
in the 2.3 release and and then as luck

00:20:47,830 --> 00:20:53,830
would have it we accidentally broke it

00:20:49,690 --> 00:20:56,860
completely in the 2.4 release and we got

00:20:53,830 --> 00:21:00,850
until about a month ago when we realize

00:20:56,860 --> 00:21:02,919
this and so we've had we've had 2.4 2.5

00:21:00,850 --> 00:21:04,779
and 2.6 out there

00:21:02,919 --> 00:21:06,369
where we had completely broken the cuke

00:21:04,779 --> 00:21:08,769
how to encryption such that no one could

00:21:06,369 --> 00:21:11,440
use it and no one complained so

00:21:08,769 --> 00:21:13,119
evidently no one was using this which

00:21:11,440 --> 00:21:17,049
was good because it's terrifically

00:21:13,119 --> 00:21:18,580
insecure and so we finally actually

00:21:17,049 --> 00:21:21,340
despite it being broken we've now

00:21:18,580 --> 00:21:24,009
explicitly Brock blocked it and when the

00:21:21,340 --> 00:21:25,720
forthcoming 2.7 release so even if you

00:21:24,009 --> 00:21:29,019
wanted to use it you now can't use it

00:21:25,720 --> 00:21:31,059
and so the only if you have if in the

00:21:29,019 --> 00:21:33,580
very unlikely event you have any Q

00:21:31,059 --> 00:21:35,769
cattle images which were encrypted you

00:21:33,580 --> 00:21:38,549
have to use qmu image or q mu m BD to

00:21:35,769 --> 00:21:43,359
liberate the data into a better format

00:21:38,549 --> 00:21:48,940
and that better format that better

00:21:43,359 --> 00:21:50,350
format is of course going to be lux so I

00:21:48,940 --> 00:21:53,139
said we need to have some encryption

00:21:50,350 --> 00:21:55,239
supporting it in Q mu we knew the

00:21:53,139 --> 00:21:57,190
existing scheme was terribly badly

00:21:55,239 --> 00:21:58,869
designed we didn't really fancy

00:21:57,190 --> 00:22:01,779
inventing our own disk encryption

00:21:58,869 --> 00:22:04,389
formats because getting that rights is

00:22:01,779 --> 00:22:06,549
there's not a trivial thing so it's much

00:22:04,389 --> 00:22:09,309
better to take a format that already

00:22:06,549 --> 00:22:12,549
exists as being peer-reviewed over many

00:22:09,309 --> 00:22:16,480
years has been studied as weaknesses and

00:22:12,549 --> 00:22:19,899
strengths of well understood and so we

00:22:16,480 --> 00:22:25,629
picked the lux formats and implemented a

00:22:19,899 --> 00:22:27,100
block driver for this in q mu and the

00:22:25,629 --> 00:22:29,590
reason we decided to implement a block

00:22:27,100 --> 00:22:33,159
driver in q mu itself as opposed to just

00:22:29,590 --> 00:22:35,139
telling q mu t user Alex volume exposed

00:22:33,159 --> 00:22:39,340
by the kernel is is all around

00:22:35,139 --> 00:22:41,679
simplicity of management q mu you

00:22:39,340 --> 00:22:45,850
typically want Q mu to run without admin

00:22:41,679 --> 00:22:49,869
privileges and setting up and tearing

00:22:45,850 --> 00:22:52,960
down Lux volumes using set up and

00:22:49,869 --> 00:23:00,100
be encrypt requires admin privileges on

00:22:52,960 --> 00:23:02,710
your host if you've got the the lux

00:23:00,100 --> 00:23:04,480
driver works over block devices and if

00:23:02,710 --> 00:23:06,489
you've got plain files you want to use

00:23:04,480 --> 00:23:09,879
it with you'd have to first set up a

00:23:06,489 --> 00:23:12,730
loopback device and we'll use q mu MBD

00:23:09,879 --> 00:23:15,309
to turn that q cal file into a block

00:23:12,730 --> 00:23:16,450
device and then learn looks over the top

00:23:15,309 --> 00:23:18,190
of it so that just

00:23:16,450 --> 00:23:19,900
as more layers of complexity and the

00:23:18,190 --> 00:23:22,330
stack and more things to go wrong when

00:23:19,900 --> 00:23:24,970
you're when you're setting up Q mu and

00:23:22,330 --> 00:23:27,070
of course all that would be linux linux

00:23:24,970 --> 00:23:31,840
specific so if you wanted to use q mu on

00:23:27,070 --> 00:23:33,790
bsd or OSX or windows or whatever you

00:23:31,840 --> 00:23:36,850
wouldn't you'd be locked out of using

00:23:33,790 --> 00:23:38,080
the encryption so there were quite a few

00:23:36,850 --> 00:23:43,210
reasons why we wanted to have luck

00:23:38,080 --> 00:23:46,090
supporting in q mu natively and so to

00:23:43,210 --> 00:23:48,960
say we well i wrote a driver for this in

00:23:46,090 --> 00:23:52,270
q mu it's it's merged and it's going to

00:23:48,960 --> 00:23:57,540
it's available in the 2.6 release of q

00:23:52,270 --> 00:24:01,290
mu it's interoperable of course with the

00:23:57,540 --> 00:24:04,720
colonel DM crypt and crib set up tools

00:24:01,290 --> 00:24:07,900
and we've actually written written a

00:24:04,720 --> 00:24:10,660
test Suites a guarantee that and so

00:24:07,900 --> 00:24:13,300
we've got tests that format a volume

00:24:10,660 --> 00:24:15,160
using q mu and then read and rights and

00:24:13,300 --> 00:24:16,540
open it with the colonel and format of

00:24:15,160 --> 00:24:19,150
volume of the colonel and read and write

00:24:16,540 --> 00:24:23,680
it with q mu to make sure we've got

00:24:19,150 --> 00:24:26,230
interoperability in both directions the

00:24:23,680 --> 00:24:28,420
q mu driver can of course be used if q

00:24:26,230 --> 00:24:29,740
is running unprivileged you don't need

00:24:28,420 --> 00:24:32,650
to do you don't need to run any

00:24:29,740 --> 00:24:38,770
privilege setup steps it works on any

00:24:32,650 --> 00:24:42,030
platform that q mu works on and the q mu

00:24:38,770 --> 00:24:47,470
the q mu blah claire has quite a nice

00:24:42,030 --> 00:24:49,540
test suite along with it it's theirs 30

00:24:47,470 --> 00:24:52,120
or 40 yards different test scenarios

00:24:49,540 --> 00:24:55,570
that you can set up to run across any

00:24:52,120 --> 00:24:57,430
emu block driver so we've we've got and

00:24:55,570 --> 00:24:59,830
the vast majority of those working with

00:24:57,430 --> 00:25:00,880
the lux driver to prove that it's

00:24:59,830 --> 00:25:02,470
working on all the different scenarios

00:25:00,880 --> 00:25:05,490
like hearing your blog drivers are

00:25:02,470 --> 00:25:05,490
expected to work under

00:25:10,639 --> 00:25:16,309
and so I said that stuff was all

00:25:13,889 --> 00:25:20,460
available in the 2.6 release of Q mu and

00:25:16,309 --> 00:25:21,809
the work isn't finished and there's

00:25:20,460 --> 00:25:23,940
there's more things we want to do that

00:25:21,809 --> 00:25:29,970
was basically the first first stepping

00:25:23,940 --> 00:25:32,070
stone when Q mu formats Lux volumes it's

00:25:29,970 --> 00:25:34,860
just hard coded to always use the first

00:25:32,070 --> 00:25:37,320
key slot and if you know anything about

00:25:34,860 --> 00:25:39,360
Lux you can have up to eight key slots

00:25:37,320 --> 00:25:42,570
with different using with different

00:25:39,360 --> 00:25:46,830
passwords for each key slots so we'd

00:25:42,570 --> 00:25:51,299
like to be able to let Q mu manage the

00:25:46,830 --> 00:25:54,240
manage the keys in each key slot and we

00:25:51,299 --> 00:25:57,809
want to be able to do a secure deletion

00:25:54,240 --> 00:25:59,700
of disk images so if when you when you

00:25:57,809 --> 00:26:02,940
delete a volume you don't you don't want

00:25:59,700 --> 00:26:04,649
to leave you don't to leave the lux

00:26:02,940 --> 00:26:06,659
header there because if someone can

00:26:04,649 --> 00:26:09,570
recover that volume they can potentially

00:26:06,659 --> 00:26:12,990
brute force the the user pass phrases

00:26:09,570 --> 00:26:15,090
use to unlock the master key so if when

00:26:12,990 --> 00:26:17,519
when you want to delete a vm disk image

00:26:15,090 --> 00:26:20,519
you really want to overwrite the deluxe

00:26:17,519 --> 00:26:22,649
header at the very least so we want to

00:26:20,519 --> 00:26:27,720
add some kind of facility in q mu to let

00:26:22,649 --> 00:26:29,100
you do that overwriting in some kind of

00:26:27,720 --> 00:26:35,399
manner we haven't decided what that

00:26:29,100 --> 00:26:37,409
would look like exactly yet we want to

00:26:35,399 --> 00:26:40,379
be able to integrate this directly with

00:26:37,409 --> 00:26:43,529
QQ 2 and so that when you have a cuke a

00:26:40,379 --> 00:26:45,080
2 image you can determine that is

00:26:43,529 --> 00:26:47,269
actually encrypted with Lux

00:26:45,080 --> 00:26:50,460
automatically and set up the right

00:26:47,269 --> 00:26:51,720
decryption structures so you don't the

00:26:50,460 --> 00:26:53,850
management app doesn't have the burden

00:26:51,720 --> 00:26:55,740
of remembering whether this particular

00:26:53,850 --> 00:26:57,029
image is encrypted or not we should be

00:26:55,740 --> 00:27:02,460
able to record whether that's encrypted

00:26:57,029 --> 00:27:04,110
and just do the right thing there's

00:27:02,460 --> 00:27:06,840
already a number of two Nobles when your

00:27:04,110 --> 00:27:08,629
formatting Lux volumes with Q mu you can

00:27:06,840 --> 00:27:10,980
you can change you can set the

00:27:08,629 --> 00:27:14,840
encryption cypher the encryption mode

00:27:10,980 --> 00:27:16,679
the initialization vector algorithm and

00:27:14,840 --> 00:27:21,299
there's a few more things we want to

00:27:16,679 --> 00:27:23,380
make configurable in particularly the

00:27:21,299 --> 00:27:25,960
algorithm that's used for

00:27:23,380 --> 00:27:29,260
encrypting the master password with the

00:27:25,960 --> 00:27:34,810
users pass phrase which is known as pbk

00:27:29,260 --> 00:27:38,440
tf2 it's theirs you want to be able to

00:27:34,810 --> 00:27:39,700
configure the running type of that

00:27:38,440 --> 00:27:43,810
algorithm by setting the number of

00:27:39,700 --> 00:27:49,590
iterations it does as as computers get

00:27:43,810 --> 00:27:52,090
faster at but faster it's doing doing

00:27:49,590 --> 00:27:54,640
cryptographic hashes and so forth you

00:27:52,090 --> 00:27:59,190
need to be able to increase the

00:27:54,640 --> 00:27:59,190
complexity of the the PB kdf algorithm

00:27:59,310 --> 00:28:07,810
looks normally and the deluxe encryption

00:28:05,560 --> 00:28:09,970
header is just a one megabyte block and

00:28:07,810 --> 00:28:11,650
start of a volume there is actually the

00:28:09,970 --> 00:28:13,840
ability to have the the header in a

00:28:11,650 --> 00:28:15,940
completely separate volume the colonel

00:28:13,840 --> 00:28:18,070
supports that so for the sake of

00:28:15,940 --> 00:28:21,850
interoperability we want to be able to

00:28:18,070 --> 00:28:23,800
support that and Q mu as well as we need

00:28:21,850 --> 00:28:30,910
we need to be able to point at the

00:28:23,800 --> 00:28:32,260
separate header header volume so far the

00:28:30,910 --> 00:28:34,180
work is all been about getting it

00:28:32,260 --> 00:28:36,060
functionally enabled and we haven't

00:28:34,180 --> 00:28:39,460
really focused too much on performance

00:28:36,060 --> 00:28:41,380
testing an optimization obviously it's

00:28:39,460 --> 00:28:44,740
all very well having this this ability

00:28:41,380 --> 00:28:46,030
to use Luxan inside q mu but if it's if

00:28:44,740 --> 00:28:47,440
it's a lot slower than the colonel

00:28:46,030 --> 00:28:49,710
implementation no one's going to use

00:28:47,440 --> 00:28:51,700
that so we need to do some work on on

00:28:49,710 --> 00:28:53,560
benchmarking to see exactly how it

00:28:51,700 --> 00:28:56,110
compares with the colonel implementation

00:28:53,560 --> 00:28:58,120
and putting on the results of that do

00:28:56,110 --> 00:29:01,630
performance optimization to make sure

00:28:58,120 --> 00:29:06,840
it's within the same ballpark as using

00:29:01,630 --> 00:29:06,840
the colonel Lux encryption features

00:29:12,610 --> 00:29:21,170
so just want to give a few examples of

00:29:17,350 --> 00:29:26,090
how you actually use the lux supporting

00:29:21,170 --> 00:29:28,880
qm you first of all you need to be able

00:29:26,090 --> 00:29:30,980
to pass the the passphrase for the lung

00:29:28,880 --> 00:29:32,480
volume to QMI you if you remember the

00:29:30,980 --> 00:29:35,350
side of the talk i taught a start of

00:29:32,480 --> 00:29:39,110
this talk I I mentioned the EMU sequence

00:29:35,350 --> 00:29:40,760
facility well provide the the password

00:29:39,110 --> 00:29:43,220
you need to define our secret objects

00:29:40,760 --> 00:29:45,140
and in this case I'm showing how you

00:29:43,220 --> 00:29:50,750
provide the passphrase via a base64

00:29:45,140 --> 00:29:53,630
encrypted base64 encoded file then using

00:29:50,750 --> 00:29:55,640
the Q mu image tool and the create

00:29:53,630 --> 00:29:59,240
command that you'll know about already

00:29:55,640 --> 00:30:03,350
and you have to provide the ID of the

00:29:59,240 --> 00:30:05,570
secret that has the password and tether

00:30:03,350 --> 00:30:09,800
that you want to create a luxe encrypted

00:30:05,570 --> 00:30:12,500
formats image and then just the file

00:30:09,800 --> 00:30:14,840
name and the disk size neck this will

00:30:12,500 --> 00:30:16,910
create you a plain file that's using the

00:30:14,840 --> 00:30:19,250
luxe encryption floor net using the

00:30:16,910 --> 00:30:24,350
default parameters and which we've

00:30:19,250 --> 00:30:28,010
chosen to be aes-256 the XTS cipher mode

00:30:24,350 --> 00:30:31,220
and the plane 64 initialization vector

00:30:28,010 --> 00:30:33,140
algorithm those defaults were chosen to

00:30:31,220 --> 00:30:38,780
match the current defaults that are used

00:30:33,140 --> 00:30:40,640
in rail and fedora but we don't

00:30:38,780 --> 00:30:43,370
guarantee we'll keep those defaults as

00:30:40,640 --> 00:30:46,490
the defaults forever so if you want to

00:30:43,370 --> 00:30:50,240
have specific characteristics for the

00:30:46,490 --> 00:30:52,370
encryption options when you're using

00:30:50,240 --> 00:30:54,610
hewage you can say you want a particular

00:30:52,370 --> 00:30:58,100
cipher modes you a particular

00:30:54,610 --> 00:31:00,350
initialization vector generator and a

00:30:58,100 --> 00:31:04,190
particular cipher algorithm although I

00:31:00,350 --> 00:31:06,620
haven't shown that one here so this this

00:31:04,190 --> 00:31:07,820
just shows how you use the option string

00:31:06,620 --> 00:31:10,390
to configure the different crypto

00:31:07,820 --> 00:31:10,390
parameters

00:31:12,170 --> 00:31:19,770
the deluxe supporting qmu and can be

00:31:16,710 --> 00:31:22,500
layered over any qmu block driver so not

00:31:19,770 --> 00:31:25,650
just not just plain files so in this

00:31:22,500 --> 00:31:29,070
example I'm showing how you can use an

00:31:25,650 --> 00:31:32,460
RPD and network volume and you can

00:31:29,070 --> 00:31:35,010
format that using luxe it's not very

00:31:32,460 --> 00:31:39,960
difficult at all use it's the normal rbd

00:31:35,010 --> 00:31:41,760
and URI like format for the file name

00:31:39,960 --> 00:31:44,220
then you just say you want the lux

00:31:41,760 --> 00:31:46,560
format and that's the password you want

00:31:44,220 --> 00:31:50,100
to encrypt it with that's that's all

00:31:46,560 --> 00:31:52,590
very straightforward and as I mentioned

00:31:50,100 --> 00:31:55,740
we want to integrate this natively in 2q

00:31:52,590 --> 00:31:58,290
car to currently if you set encryption

00:31:55,740 --> 00:32:00,000
equals on it uses the the horribly

00:31:58,290 --> 00:32:03,210
broken encryption method that we've now

00:32:00,000 --> 00:32:04,590
disabled we want to update that so that

00:32:03,210 --> 00:32:08,480
if you specify encryption equals on it

00:32:04,590 --> 00:32:08,480
will use the lux format instead and

00:32:08,690 --> 00:32:17,730
probably get to that in the 2.8 release

00:32:11,160 --> 00:32:20,610
of QM you if all goes to plan so that's

00:32:17,730 --> 00:32:22,950
how to create volumes and how do you

00:32:20,610 --> 00:32:26,790
actually launch a vm using that volume

00:32:22,950 --> 00:32:30,060
and again the first thing you had to do

00:32:26,790 --> 00:32:32,240
is provide qmu with the passphrase for

00:32:30,060 --> 00:32:38,670
that Lux volume using the secrets

00:32:32,240 --> 00:32:41,430
mechanism then using the the existing

00:32:38,670 --> 00:32:44,730
drive option yet specify the driver is

00:32:41,430 --> 00:32:47,940
lux the ID of the secret object you

00:32:44,730 --> 00:32:51,240
created and then the file name for the

00:32:47,940 --> 00:32:53,550
image and that's that's about it so it's

00:32:51,240 --> 00:32:56,390
slightly more complicated than the

00:32:53,550 --> 00:33:01,620
non-encrypted case but not not very much

00:32:56,390 --> 00:33:03,120
and and using our BD volumes it's it's

00:33:01,620 --> 00:33:05,880
much the same much the same kind of

00:33:03,120 --> 00:33:08,010
thing you again in this case we've

00:33:05,880 --> 00:33:09,500
actually got two passwords provided

00:33:08,010 --> 00:33:12,210
because we're first providing the

00:33:09,500 --> 00:33:14,520
decryption key for the lux volume and

00:33:12,210 --> 00:33:17,600
then providing the password to

00:33:14,520 --> 00:33:20,850
authenticate with the rbd server and

00:33:17,600 --> 00:33:23,780
that's that's just the the only slight

00:33:20,850 --> 00:33:23,780
difference here really

00:33:24,660 --> 00:33:31,060
that's that's that's it about the deluxe

00:33:27,520 --> 00:33:34,450
formats today and it's out there in emu

00:33:31,060 --> 00:33:37,750
2.6 is usable it should be interop

00:33:34,450 --> 00:33:40,150
interoperable with the colonel all so

00:33:37,750 --> 00:33:42,640
that's that's broadly ready ready for

00:33:40,150 --> 00:33:46,240
use the support being worked on in

00:33:42,640 --> 00:33:48,160
libvirt the release of lib that last

00:33:46,240 --> 00:33:51,070
month introduced support for our Luck's

00:33:48,160 --> 00:33:53,170
with plain files and there's work in

00:33:51,070 --> 00:33:57,850
progress to make to extend that to cover

00:33:53,170 --> 00:33:59,530
other disc formats like our BD and so

00:33:57,850 --> 00:34:01,270
that will be a will the rest of that'll

00:33:59,530 --> 00:34:05,050
be available in liver time in the near

00:34:01,270 --> 00:34:08,350
future and then the intention is to also

00:34:05,050 --> 00:34:09,790
wire that up into OpenStack to start

00:34:08,350 --> 00:34:14,650
getting encryption of the different

00:34:09,790 --> 00:34:17,940
storage drivers and OpenStack so the

00:34:14,650 --> 00:34:22,210
last thing I want to talk about is

00:34:17,940 --> 00:34:26,050
access control I mentioned earlier about

00:34:22,210 --> 00:34:30,190
the the the way we've enabled TLS for

00:34:26,050 --> 00:34:33,270
the VNC server the migration data

00:34:30,190 --> 00:34:38,050
channel that the MBD data channel and

00:34:33,270 --> 00:34:41,350
serial console having TLS encryption is

00:34:38,050 --> 00:34:43,480
great but if anyone connects your VNC

00:34:41,350 --> 00:34:46,390
server TLS encryption on its own doesn't

00:34:43,480 --> 00:34:47,710
really do very much for you so you ought

00:34:46,390 --> 00:34:49,300
to be able to have some kind of access

00:34:47,710 --> 00:34:54,130
control over who can actually connect in

00:34:49,300 --> 00:34:57,670
the first place and its simplest you can

00:34:54,130 --> 00:34:59,470
do this using the x.509 certificates if

00:34:57,670 --> 00:35:04,770
you if you tell QMI you to require a

00:34:59,470 --> 00:35:08,170
client certificate and you create a

00:35:04,770 --> 00:35:10,540
subordinate certificate authority for

00:35:08,170 --> 00:35:13,180
each service you want to have different

00:35:10,540 --> 00:35:16,390
access rules for then you can tell QMI

00:35:13,180 --> 00:35:19,140
you to only allow clients who have

00:35:16,390 --> 00:35:22,840
certificates signed by this subordinate

00:35:19,140 --> 00:35:25,570
cityca certificate authority so that's

00:35:22,840 --> 00:35:28,120
that may be sufficient for some use

00:35:25,570 --> 00:35:30,790
cases but it's depending on how you

00:35:28,120 --> 00:35:33,760
manage x.509 certificates in your

00:35:30,790 --> 00:35:35,740
environment in may or may or may not be

00:35:33,760 --> 00:35:38,320
practical to use this approach

00:35:35,740 --> 00:35:42,460
so we want to add a more flexible access

00:35:38,320 --> 00:35:44,440
control mechanism so to this end we're

00:35:42,460 --> 00:35:49,869
writing our general purpose

00:35:44,440 --> 00:35:52,150
authorization and subsystem eqm you the

00:35:49,869 --> 00:35:55,020
initial implementation and just

00:35:52,150 --> 00:35:58,119
maintains a simple access control list

00:35:55,020 --> 00:36:00,610
so when a client connects to qmu it

00:35:58,119 --> 00:36:02,680
presents its client certificate qm you

00:36:00,610 --> 00:36:04,660
can then go and say is this certificate

00:36:02,680 --> 00:36:07,150
in the access control list that I

00:36:04,660 --> 00:36:09,460
configured in this attic access control

00:36:07,150 --> 00:36:11,680
lists will just be a simple allow deny

00:36:09,460 --> 00:36:13,380
ordered list and it will just go through

00:36:11,680 --> 00:36:16,150
the list until it finds a match and

00:36:13,380 --> 00:36:20,500
apply the policy that match is

00:36:16,150 --> 00:36:22,060
associated with mmm that's a nice simple

00:36:20,500 --> 00:36:25,630
approach it doesn't rely on any external

00:36:22,060 --> 00:36:30,580
infrastructure will be able to use that

00:36:25,630 --> 00:36:36,790
with VNC character devices migration NBD

00:36:30,580 --> 00:36:39,670
and hopefully in the 2.8 release that

00:36:36,790 --> 00:36:41,890
will be used with it'll you if if the

00:36:39,670 --> 00:36:44,200
service is using x.509 certificates

00:36:41,890 --> 00:36:47,920
it'll match against the distinguished

00:36:44,200 --> 00:36:51,010
name field in the certificate for VNC

00:36:47,920 --> 00:36:53,619
only if you're using the sasal

00:36:51,010 --> 00:36:55,540
authentication mechanism it'll also be

00:36:53,619 --> 00:37:01,660
able to do our match against the sasal

00:36:55,540 --> 00:37:05,920
username the slightly more advanced

00:37:01,660 --> 00:37:09,580
access control mechanism and people

00:37:05,920 --> 00:37:12,400
often have existing systems that they

00:37:09,580 --> 00:37:15,090
may use for controlling access and it's

00:37:12,400 --> 00:37:17,530
fairly common to have some kind of ldap

00:37:15,090 --> 00:37:19,420
server way you maintain access control

00:37:17,530 --> 00:37:20,890
rules or you might have some kind of

00:37:19,420 --> 00:37:22,930
sequel database somewhere where you want

00:37:20,890 --> 00:37:24,250
to manage this all centrally instead of

00:37:22,930 --> 00:37:28,630
configuring access control on each

00:37:24,250 --> 00:37:33,460
individual host so we're creating a a

00:37:28,630 --> 00:37:36,520
pam plugin for qmu so you'll be able to

00:37:33,460 --> 00:37:40,210
tell QMI you to use the power object for

00:37:36,520 --> 00:37:42,730
access control and that'll delegate to

00:37:40,210 --> 00:37:45,310
the pam configuration file on the host

00:37:42,730 --> 00:37:47,260
and if anyone knows anything about pam

00:37:45,310 --> 00:37:48,300
there's this countless different

00:37:47,260 --> 00:37:50,520
backends repair

00:37:48,300 --> 00:37:52,650
that can authenticate against all manner

00:37:50,520 --> 00:37:56,250
of different things that will give us a

00:37:52,650 --> 00:37:58,380
nice pluggable mechanism for integrating

00:37:56,250 --> 00:38:00,840
with arbitrary authentication systems

00:37:58,380 --> 00:38:02,730
that people may have deployed whether

00:38:00,840 --> 00:38:04,590
they're open source will proprietary it

00:38:02,730 --> 00:38:07,260
kiram you won't care it will just be

00:38:04,590 --> 00:38:09,750
able to integrate with them with fairly

00:38:07,260 --> 00:38:11,280
minimal effort and again this is

00:38:09,750 --> 00:38:17,940
something I hope to get into the Q mu

00:38:11,280 --> 00:38:20,940
2.8 release and that's that's basically

00:38:17,940 --> 00:38:23,400
all that I wanted to talk about and it's

00:38:20,940 --> 00:38:24,930
quite a whirlwind tour of what I've been

00:38:23,400 --> 00:38:26,310
working for the past year and there's a

00:38:24,930 --> 00:38:30,000
hell of a lot of details that I've

00:38:26,310 --> 00:38:31,440
glossed over not really explained so if

00:38:30,000 --> 00:38:33,840
part of this work I've been writing a

00:38:31,440 --> 00:38:36,300
lot of blog posts explaining this in

00:38:33,840 --> 00:38:40,200
more detail so if anyone wants to follow

00:38:36,300 --> 00:38:42,840
up we read about this in detail then if

00:38:40,200 --> 00:38:46,350
you if you go to this topic link you'll

00:38:42,840 --> 00:38:48,660
find a series of blog posts titled qmu

00:38:46,350 --> 00:38:53,040
security and you'll find all of the

00:38:48,660 --> 00:38:56,250
detailed information and unrelated to

00:38:53,040 --> 00:38:59,250
this talk there's a poll asking for your

00:38:56,250 --> 00:39:00,750
opinions about the kvm forum so that we

00:38:59,250 --> 00:39:03,360
can better plan what we do in future

00:39:00,750 --> 00:39:05,430
years so if everyone can fill in the kvm

00:39:03,360 --> 00:39:08,850
forum poll that'll be very helpful to

00:39:05,430 --> 00:39:10,860
the program committee and so that's it

00:39:08,850 --> 00:39:13,710
if anyone's got any questions there's a

00:39:10,860 --> 00:39:16,260
mic in the center there so please please

00:39:13,710 --> 00:39:18,860
feel free to ask or come and catch me

00:39:16,260 --> 00:39:18,860
afterwards

00:39:23,340 --> 00:39:29,490
well I guess I already confused everyone

00:39:26,310 --> 00:39:35,330
who's there's no questions oh we do have

00:39:29,490 --> 00:39:37,610
a volunteer I have a couple okay so

00:39:35,330 --> 00:39:43,130
first of all you're talking about

00:39:37,610 --> 00:39:51,180
getting getting secrets into into qm you

00:39:43,130 --> 00:39:56,670
for using TLS is it possible to change a

00:39:51,180 --> 00:39:59,090
cert in use of a running it's not care

00:39:56,670 --> 00:40:03,420
so that you've got a really long running

00:39:59,090 --> 00:40:04,770
qmu yeah those sir expires d it's not

00:40:03,420 --> 00:40:08,040
currently possible but it's something

00:40:04,770 --> 00:40:10,170
that we want to be able to support and

00:40:08,040 --> 00:40:12,480
the new more modular framework for

00:40:10,170 --> 00:40:14,820
dealing with TLS enables us to do that

00:40:12,480 --> 00:40:17,160
much much more easily than would have

00:40:14,820 --> 00:40:18,840
been possible in the past so it's it's

00:40:17,160 --> 00:40:21,420
something that is actually on the to-do

00:40:18,840 --> 00:40:22,680
list so it slipped my mind but it's

00:40:21,420 --> 00:40:24,450
definitely something we want to be able

00:40:22,680 --> 00:40:31,440
to support for exactly the reason you

00:40:24,450 --> 00:40:34,500
say so my other question was possibly

00:40:31,440 --> 00:40:37,170
slightly off topic and you're talking

00:40:34,500 --> 00:40:40,980
about encryption the guest I'm wondering

00:40:37,170 --> 00:40:44,340
is there any or it is is it even

00:40:40,980 --> 00:40:46,140
feasible to virtualize a TPM and with it

00:40:44,340 --> 00:40:48,170
and would it be able to use any of this

00:40:46,140 --> 00:40:51,810
infrastructure would that be relevant um

00:40:48,170 --> 00:40:54,360
there is already supports and QM you for

00:40:51,810 --> 00:40:55,950
doing passed through of tpms so if you

00:40:54,360 --> 00:40:58,830
have a TPM on the host you can pass that

00:40:55,950 --> 00:41:00,630
through to the guest and that's existed

00:40:58,830 --> 00:41:03,600
in qm you for excuse me it's cute

00:41:00,630 --> 00:41:05,820
existing to come you for a while there

00:41:03,600 --> 00:41:09,210
are patches proposed to enable you to

00:41:05,820 --> 00:41:10,230
expose a virtualized TPM to the guest so

00:41:09,210 --> 00:41:12,000
you don't have to have a one-to-one

00:41:10,230 --> 00:41:16,110
mapping between a host and a guest TPM

00:41:12,000 --> 00:41:18,840
so that would definitely be beneficial

00:41:16,110 --> 00:41:21,480
if your guest disk encryption mechanism

00:41:18,840 --> 00:41:22,470
can make use of tpms then that would be

00:41:21,480 --> 00:41:26,850
something that will be useful in that

00:41:22,470 --> 00:41:28,290
context but that's the still under quite

00:41:26,850 --> 00:41:30,960
there's quite active debate over the

00:41:28,290 --> 00:41:33,690
design of that but I think eventually

00:41:30,960 --> 00:41:38,000
we'll get proper virtualized TPM support

00:41:33,690 --> 00:41:38,000
in q mu is just unclear exactly when

00:41:39,500 --> 00:41:44,820
yeah there's I mean on a site related

00:41:41,970 --> 00:41:47,400
topic there's the ver tire RNG driver

00:41:44,820 --> 00:41:49,680
which allows you to inject entropy into

00:41:47,400 --> 00:41:51,750
the guest or inject more than more

00:41:49,680 --> 00:41:54,570
specifically inject random random bytes

00:41:51,750 --> 00:41:57,420
into the day into the guess which is

00:41:54,570 --> 00:41:59,160
helpful in various cryptographic

00:41:57,420 --> 00:42:00,420
primitives especially during an early

00:41:59,160 --> 00:42:03,440
boot when the guest probably doesn't

00:42:00,420 --> 00:42:03,440
have any entropy of its own

00:42:12,180 --> 00:42:16,810
in a general way I can I guess I can

00:42:15,520 --> 00:42:18,340
talk about it a little bit I haven't I

00:42:16,810 --> 00:42:20,320
don't have any hard performance

00:42:18,340 --> 00:42:25,900
benchmarks to back up what I'll say but

00:42:20,320 --> 00:42:28,240
and with moderately recent CPUs you've

00:42:25,900 --> 00:42:32,619
got native hardware support for doing

00:42:28,240 --> 00:42:34,300
aes encryption and that helps reduce the

00:42:32,619 --> 00:42:39,190
burden of encryption compared to doing

00:42:34,300 --> 00:42:42,790
it all in software and certainly the the

00:42:39,190 --> 00:42:44,710
TLS support and the TLS libraries were

00:42:42,790 --> 00:42:46,090
using certainly make make use of the

00:42:44,710 --> 00:42:50,500
hardware encryption instructions where

00:42:46,090 --> 00:42:52,420
available for the lux encryption I don't

00:42:50,500 --> 00:42:54,910
believe the the primitives were using

00:42:52,420 --> 00:42:56,860
for that will make use of hardware

00:42:54,910 --> 00:43:00,700
encryption but that's certainly some an

00:42:56,860 --> 00:43:03,700
area for further work what I should have

00:43:00,700 --> 00:43:06,130
mentioned is that as part of this this

00:43:03,700 --> 00:43:08,580
work q mu is now able to choose between

00:43:06,130 --> 00:43:12,670
either using the g crypt library or the

00:43:08,580 --> 00:43:16,390
nettle library which are the two most

00:43:12,670 --> 00:43:24,490
commonly found see crypto libraries in

00:43:16,390 --> 00:43:26,890
Linux distributions because we linked

00:43:24,490 --> 00:43:29,619
against ganute els and depend on which

00:43:26,890 --> 00:43:31,090
version of canoe TLS you use the new TLS

00:43:29,619 --> 00:43:33,700
full-length with either nettle orgy

00:43:31,090 --> 00:43:35,290
crypt so to avoid bringing in multiple

00:43:33,700 --> 00:43:37,300
crypto libraries we want to link against

00:43:35,290 --> 00:43:39,970
the same crypto library the canoe TLS

00:43:37,300 --> 00:43:41,950
links against but in the reality or any

00:43:39,970 --> 00:43:44,619
modern OS is going to be using metal

00:43:41,950 --> 00:43:50,290
those cheek rip is kind of on its way

00:43:44,619 --> 00:43:53,020
out and not as favoured anymore as I

00:43:50,290 --> 00:43:54,940
think we're probably yeah they were

00:43:53,020 --> 00:43:56,200
basically out of time it was point so if

00:43:54,940 --> 00:43:58,980
anyone's got any further questions come

00:43:56,200 --> 00:44:02,550
and see me afterwards or use email and

00:43:58,980 --> 00:44:02,550

YouTube URL: https://www.youtube.com/watch?v=2A0BaxFvq8Y


