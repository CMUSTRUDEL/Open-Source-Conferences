Title: [2016] Libvirt Admin API - A Different Kind of Management for libvirt by Erik Skultety
Publication date: 2016-09-09
Playlist: KVM Forum 2016
Description: 
	Libvirt has been well known for providing a stable abstract middleware layer that hides hypervisor specifics from its users in order to provide a uniform way of management, while having most of its features available through libvirtd daemon. Although libvirtd can be configured through a configuration file, there has not been a way to change the configuration nor manage the daemon itself during runtime. And that is exactly where libvirt Admin API comes in.
This presentation will explore this new administration interface the goal of which is to support runtime daemon management. During the presentation, scenarios like tweaking the log settings to make the daemon more or less verbose and, thus tailoring it to one's linking, threadpool management, as well as looking at clients currently connected to the daemon will be addressed and demonstrated by using the virt-admin utility.

Erik Skultety
Associate Software Engineer, Red Hat

Erik Skultety is an associate software engineer at Red Hat working on libvirt project. At the same time he's finishing his studies in computer science at Brno University of Technology.

Slides: http://www.linux-kvm.org/images/d/d6/03x10B-Erik_Skultety-Libvirt_Admin_API-A_Different_Kind_of_Management_for_libvirt.pdf
Captions: 
	00:00:09,920 --> 00:00:16,139
my name is Eric school Teti I work for a

00:00:13,469 --> 00:00:18,779
high for the virtualization team as a

00:00:16,139 --> 00:00:22,880
liver developer and today I'd like to

00:00:18,779 --> 00:00:27,779
talk about liver administration API

00:00:22,880 --> 00:00:33,420
which we recently enable within our

00:00:27,779 --> 00:00:38,520
labor daemon before diving into the

00:00:33,420 --> 00:00:41,129
interface and its functionality and I

00:00:38,520 --> 00:00:43,320
would like to talk about the daemon for

00:00:41,129 --> 00:00:46,550
a bit a few words about its internals

00:00:43,320 --> 00:00:53,640
and how we actually enable the admin

00:00:46,550 --> 00:00:57,000
within where within it but for for the

00:00:53,640 --> 00:01:01,260
last few weeks I have bit of a hard time

00:00:57,000 --> 00:01:03,780
to find out what we what would be the

00:01:01,260 --> 00:01:06,510
proper introduction to my presentation

00:01:03,780 --> 00:01:08,610
because I was continuously being

00:01:06,510 --> 00:01:10,770
discouraged by my co-workers not to

00:01:08,610 --> 00:01:12,900
start my presentation about what liver

00:01:10,770 --> 00:01:23,490
is everyone knows what labor is right

00:01:12,900 --> 00:01:26,460
and so so where is it now I would like

00:01:23,490 --> 00:01:28,790
to talk to you so I ask you about it so

00:01:26,460 --> 00:01:33,450
any volunteers

00:01:28,790 --> 00:01:36,360
they'll come on corporate Bay so AIDS

00:01:33,450 --> 00:01:40,950
it's a tool set virtualization tool set

00:01:36,360 --> 00:01:43,470
that enables us allows us to utilize the

00:01:40,950 --> 00:01:45,210
visualizing capabilities of the

00:01:43,470 --> 00:01:48,869
underlying hypervisor and is it it

00:01:45,210 --> 00:01:51,000
consists of a C library with some

00:01:48,869 --> 00:01:54,390
bindings for different kinds of

00:01:51,000 --> 00:01:57,780
languages it does Kuusisto for daemon

00:01:54,390 --> 00:02:00,030
which acts as a back-end for for the

00:01:57,780 --> 00:02:02,969
library implementing most of the

00:02:00,030 --> 00:02:05,640
functionality and then we have a

00:02:02,969 --> 00:02:09,330
command-line interface called vish which

00:02:05,640 --> 00:02:12,360
acts as a front-end to expose all the

00:02:09,330 --> 00:02:13,890
functionality to connect to the daemon

00:02:12,360 --> 00:02:18,630
which does have

00:02:13,890 --> 00:02:22,290
it's also a scriptable - and it the

00:02:18,630 --> 00:02:25,590
advantage of using verge is that if you

00:02:22,290 --> 00:02:28,200
want to just play with Libya a bit you

00:02:25,590 --> 00:02:30,240
don't really have to write their own

00:02:28,200 --> 00:02:33,680
application right it does link to live

00:02:30,240 --> 00:02:38,040
there so it's a yeah it's a

00:02:33,680 --> 00:02:40,739
functionality preview now um I'm pretty

00:02:38,040 --> 00:02:43,590
sure you've already seen a picture like

00:02:40,739 --> 00:02:46,160
this what liver is that it works as a

00:02:43,590 --> 00:02:48,780
glue between the management layer and

00:02:46,160 --> 00:02:51,870
the virtualization layer except for the

00:02:48,780 --> 00:02:56,850
went vert manga their home so it should

00:02:51,870 --> 00:03:00,450
be obviously their manager so to put it

00:02:56,850 --> 00:03:03,810
a bit technical in one sentence that

00:03:00,450 --> 00:03:08,730
libvirt dance provide it creates a

00:03:03,810 --> 00:03:13,260
abstract middle layer that provides you

00:03:08,730 --> 00:03:16,440
a stable and yeah this is the most

00:03:13,260 --> 00:03:19,230
important uniform and also portable to

00:03:16,440 --> 00:03:23,010
the extent of the operating system

00:03:19,230 --> 00:03:26,160
support interface for your applications

00:03:23,010 --> 00:03:28,950
to dealing with the underlying

00:03:26,160 --> 00:03:32,220
hypervisor specifics and inconsistencies

00:03:28,950 --> 00:03:35,010
and I say inconsistencies because some

00:03:32,220 --> 00:03:37,350
of the hypervisors actually do tend to

00:03:35,010 --> 00:03:40,680
break the backwards compatibility they

00:03:37,350 --> 00:03:42,959
API constantly so it's a nice thing if

00:03:40,680 --> 00:03:46,350
you just do not have to deal about it in

00:03:42,959 --> 00:03:49,620
your application right and besides that

00:03:46,350 --> 00:03:53,220
so it does provide an stable interface

00:03:49,620 --> 00:03:55,829
right so you can manage not just virtual

00:03:53,220 --> 00:03:57,840
machines but also we do provide some

00:03:55,829 --> 00:04:00,630
means to manage virtual networks and

00:03:57,840 --> 00:04:04,650
also support different kinds of storage

00:04:00,630 --> 00:04:07,170
solutions now to the daemon I mentioned

00:04:04,650 --> 00:04:11,070
that we do have a back-end two slides

00:04:07,170 --> 00:04:12,350
ago so if you do not have any previous

00:04:11,070 --> 00:04:16,769
experience with libvirt

00:04:12,350 --> 00:04:20,600
you might ask a question why do we

00:04:16,769 --> 00:04:23,760
actually need the daemon why not just um

00:04:20,600 --> 00:04:26,490
hard-coded - why not just use libvirt

00:04:23,760 --> 00:04:27,590
is a translation layer between to

00:04:26,490 --> 00:04:30,110
providing year

00:04:27,590 --> 00:04:32,870
the uniform interface and translated to

00:04:30,110 --> 00:04:37,490
all those different kinds of different

00:04:32,870 --> 00:04:39,490
and hypervisor specific interfaces the

00:04:37,490 --> 00:04:42,350
first reason the main reason is that

00:04:39,490 --> 00:04:45,080
some of the virtualization solutions

00:04:42,350 --> 00:04:48,710
actually do not provide any means for

00:04:45,080 --> 00:04:51,080
any there is no way how to manage it

00:04:48,710 --> 00:04:53,710
remotely you can only do locally so

00:04:51,080 --> 00:04:57,919
which is not really convenient is it so

00:04:53,710 --> 00:05:01,070
lipid D then provides the tunnel it

00:04:57,919 --> 00:05:02,930
tunnels it creator I mean - it creates

00:05:01,070 --> 00:05:05,600
the remote management the remote tunnel

00:05:02,930 --> 00:05:08,210
and you can use to communicate with the

00:05:05,600 --> 00:05:12,940
local all the local virtualization

00:05:08,210 --> 00:05:16,490
solutions a second one would be that it

00:05:12,940 --> 00:05:18,919
stores the VM state and it tracks all

00:05:16,490 --> 00:05:20,900
the other specifics all the devices that

00:05:18,919 --> 00:05:24,310
you actually plugged into hook blocked

00:05:20,900 --> 00:05:28,460
into the VM without the need to Paul

00:05:24,310 --> 00:05:30,289
everytime and ask about it ask the

00:05:28,460 --> 00:05:34,460
hypervisor about the domain it knows it

00:05:30,289 --> 00:05:37,280
so that will be it now so we know that

00:05:34,460 --> 00:05:40,789
it can manage virtual machines storage

00:05:37,280 --> 00:05:44,990
solutions and virtual virtual networks

00:05:40,789 --> 00:05:50,260
how about managing itself can it manage

00:05:44,990 --> 00:05:55,190
itself well now it can but originally

00:05:50,260 --> 00:05:59,450
the only way how to manage configure it

00:05:55,190 --> 00:06:03,590
was via its configuration file which

00:05:59,450 --> 00:06:07,010
live with a con but they're provided us

00:06:03,590 --> 00:06:08,300
only with existing configuration which

00:06:07,010 --> 00:06:12,440
means that there was no way how to

00:06:08,300 --> 00:06:15,530
change it during wrong time and a second

00:06:12,440 --> 00:06:17,889
thing which now is needed every time you

00:06:15,530 --> 00:06:20,870
change the configuration which can be

00:06:17,889 --> 00:06:24,080
inconvenient but is a bit is the rest

00:06:20,870 --> 00:06:25,700
are bad well it isn't the rest are takes

00:06:24,080 --> 00:06:28,340
they're in the worst case scenario only

00:06:25,700 --> 00:06:30,530
a few seconds are usually few

00:06:28,340 --> 00:06:33,680
milliseconds and I recall there were

00:06:30,530 --> 00:06:36,530
some speed up since the last kayvyun

00:06:33,680 --> 00:06:39,950
forum so usually doesn't pose a problem

00:06:36,530 --> 00:06:41,060
and all of the jobs are asynchronous so

00:06:39,950 --> 00:06:42,770
usually you

00:06:41,060 --> 00:06:44,570
you can recover all the jobs and no

00:06:42,770 --> 00:06:47,350
problem with that age is unconvenient

00:06:44,570 --> 00:06:49,790
because if you restart a demon it

00:06:47,350 --> 00:06:54,440
automatically kills all the existing

00:06:49,790 --> 00:06:58,720
connections to all its clients and let's

00:06:54,440 --> 00:07:03,350
say there is my ongoing migration offer

00:06:58,720 --> 00:07:06,160
several tens maybe hundreds in that case

00:07:03,350 --> 00:07:08,750
imagine you restarted a man an admin

00:07:06,160 --> 00:07:11,510
restarts daemon well the person that

00:07:08,750 --> 00:07:13,990
issued the ongoing migration would be

00:07:11,510 --> 00:07:17,900
really happy about the woman will they

00:07:13,990 --> 00:07:22,160
because it saves time so it's a matter

00:07:17,900 --> 00:07:25,070
of convenience also restarting the

00:07:22,160 --> 00:07:28,340
daemon means that you lose the current

00:07:25,070 --> 00:07:31,310
session which might be interesting we

00:07:28,340 --> 00:07:34,700
want the current session and I'll get to

00:07:31,310 --> 00:07:39,919
the point why we need it so now to the

00:07:34,700 --> 00:07:44,630
admin itself where is it it's new and

00:07:39,919 --> 00:07:47,750
completely separate set of api's there

00:07:44,630 --> 00:07:50,930
are shipped within a new standalone

00:07:47,750 --> 00:07:56,419
library separate library liberate admin

00:07:50,930 --> 00:07:59,330
and why did we actually did why would

00:07:56,419 --> 00:08:03,350
did we do this why did we incorporate a

00:07:59,330 --> 00:08:07,760
new library instead of doing it into the

00:08:03,350 --> 00:08:11,260
existing library well it's we thought

00:08:07,760 --> 00:08:14,150
that it's much more self contained and

00:08:11,260 --> 00:08:15,650
we want it to be separate and also it's

00:08:14,150 --> 00:08:19,130
much more self insane

00:08:15,650 --> 00:08:23,180
and which is skillful maintainability

00:08:19,130 --> 00:08:25,750
reasons and also we are within the

00:08:23,180 --> 00:08:28,669
package we also share bit admin binary

00:08:25,750 --> 00:08:30,110
which is based on the British client so

00:08:28,669 --> 00:08:32,539
if you if you're familiar with the

00:08:30,110 --> 00:08:36,440
British client it works pretty much the

00:08:32,539 --> 00:08:38,599
same just different commands why should

00:08:36,440 --> 00:08:42,229
you be interested in it now I said that

00:08:38,599 --> 00:08:46,910
you can you can configure the daemon

00:08:42,229 --> 00:08:50,990
during runtime but it also provides us

00:08:46,910 --> 00:08:54,020
with some monitoring we had a customer

00:08:50,990 --> 00:08:55,010
case for this so it would be nice to

00:08:54,020 --> 00:08:57,680
provide some

00:08:55,010 --> 00:09:01,910
to do some monitoring you know a threat

00:08:57,680 --> 00:09:04,040
for monitoring how many to know about

00:09:01,910 --> 00:09:06,740
the amount of current active workers

00:09:04,040 --> 00:09:08,810
within the threat pool and also do some

00:09:06,740 --> 00:09:09,860
client monitoring so we would like to

00:09:08,810 --> 00:09:13,700
know about the clients that are

00:09:09,860 --> 00:09:17,030
connected to us we don't we well when

00:09:13,700 --> 00:09:21,500
they did they connect or from where they

00:09:17,030 --> 00:09:25,580
could connect so that's about it we can

00:09:21,500 --> 00:09:27,770
do right now to be more specific so it

00:09:25,580 --> 00:09:30,650
does live reconfiguration of locking

00:09:27,770 --> 00:09:34,880
parameters like logging level if it's

00:09:30,650 --> 00:09:36,980
debug.error warning error or info it

00:09:34,880 --> 00:09:39,260
doesn't read pool management so you can

00:09:36,980 --> 00:09:41,270
fiddle bit with the amounts of workers

00:09:39,260 --> 00:09:42,950
they are active in the threat pool and

00:09:41,270 --> 00:09:45,110
also some client management yeah I

00:09:42,950 --> 00:09:47,930
already said that which is listing you

00:09:45,110 --> 00:09:50,690
can get some details out of it and you

00:09:47,930 --> 00:09:54,740
can also disconnect a client a forceful

00:09:50,690 --> 00:09:57,650
manner if you if you decide so and oh

00:09:54,740 --> 00:10:01,790
yeah and there are some limits to we do

00:09:57,650 --> 00:10:04,550
use client limits in the configuration

00:10:01,790 --> 00:10:07,550
file so let's say in the configuration

00:10:04,550 --> 00:10:10,790
file says you can only allow a hunter

00:10:07,550 --> 00:10:13,760
intrinsic clients so why would you why

00:10:10,790 --> 00:10:16,190
do we have actually such a limit if it

00:10:13,760 --> 00:10:20,300
didn't there will be a high possibility

00:10:16,190 --> 00:10:25,030
of making a do s attack of depleting all

00:10:20,300 --> 00:10:28,070
the resources we have if we allowed

00:10:25,030 --> 00:10:30,860
almost in yeah that's how we're limited

00:10:28,070 --> 00:10:36,410
I'd say infinitely infinite number of

00:10:30,860 --> 00:10:38,720
client connections so now we're getting

00:10:36,410 --> 00:10:42,740
a bit more into the detail for each of

00:10:38,720 --> 00:10:44,540
the parts I ice talked about and on

00:10:42,740 --> 00:10:45,110
their slide so to the threat poor

00:10:44,540 --> 00:10:51,220
management

00:10:45,110 --> 00:10:51,220
imagine you have a virtual server and

00:10:51,250 --> 00:10:58,400
yeah as as it happens average do tend to

00:10:55,360 --> 00:11:01,970
four for load so there is this server

00:10:58,400 --> 00:11:04,490
load and which causes there all of the

00:11:01,970 --> 00:11:06,410
workers for the amount of requests that

00:11:04,490 --> 00:11:08,720
comes to the server that all of the

00:11:06,410 --> 00:11:11,870
worker threads you have working on

00:11:08,720 --> 00:11:15,680
the server just occupied with all the

00:11:11,870 --> 00:11:19,310
requests so in our case are any other

00:11:15,680 --> 00:11:24,170
requests to come woodblock which causes

00:11:19,310 --> 00:11:31,310
delay in service delivery and that delay

00:11:24,170 --> 00:11:33,800
may vary so first if we that means you

00:11:31,310 --> 00:11:37,189
either what can you do about if you have

00:11:33,800 --> 00:11:38,149
a server log if you are utilized to your

00:11:37,189 --> 00:11:40,069
full potential

00:11:38,149 --> 00:11:43,100
it is really nothing you can do if

00:11:40,069 --> 00:11:45,410
you're not or if you is as is it's a

00:11:43,100 --> 00:11:47,959
virtual server you can hop block more

00:11:45,410 --> 00:11:51,529
resources in that case you could

00:11:47,959 --> 00:11:53,689
actually make use of those resources by

00:11:51,529 --> 00:11:58,129
spawning more worker threads within the

00:11:53,689 --> 00:12:01,819
daemon in our case we should identify

00:11:58,129 --> 00:12:05,870
which of the daemon service is hitting

00:12:01,819 --> 00:12:10,250
the limit now what is a server shouldn't

00:12:05,870 --> 00:12:13,040
the daemon pose act as a as a server in

00:12:10,250 --> 00:12:16,610
the client-server communication model it

00:12:13,040 --> 00:12:19,339
should so let's let's talk about the de

00:12:16,610 --> 00:12:21,730
menthe internals for a bit - understood

00:12:19,339 --> 00:12:25,069
understand what is a server actually oh

00:12:21,730 --> 00:12:27,860
well before that when talking about

00:12:25,069 --> 00:12:29,930
liver internals usually you will see a

00:12:27,860 --> 00:12:35,209
picture kind of like this there is an

00:12:29,930 --> 00:12:38,290
application that connect and you that

00:12:35,209 --> 00:12:41,949
you they would like to connect or

00:12:38,290 --> 00:12:45,319
execute some action on the daemon on on

00:12:41,949 --> 00:12:48,170
on some hypervisor so we connect using

00:12:45,319 --> 00:12:50,209
the API so it invokes the public API

00:12:48,170 --> 00:12:53,589
which translates to the driver specific

00:12:50,209 --> 00:12:56,839
API then goes to the driver

00:12:53,589 --> 00:12:58,910
implementation and through the RPC comes

00:12:56,839 --> 00:13:01,579
to the daemon itself which issues the

00:12:58,910 --> 00:13:04,509
same public API and translates to a

00:13:01,579 --> 00:13:07,279
different and now is really specific

00:13:04,509 --> 00:13:10,579
hypervisor driver and execute the action

00:13:07,279 --> 00:13:12,889
but we do treat the daemon as a black

00:13:10,579 --> 00:13:16,189
box we usually do not talk about its

00:13:12,889 --> 00:13:19,339
internals so underneath what you find

00:13:16,189 --> 00:13:22,250
this is the service just take the daemon

00:13:19,339 --> 00:13:22,610
as an entity as an object so within the

00:13:22,250 --> 00:13:24,800
day

00:13:22,610 --> 00:13:27,260
they use a server and he's called lib

00:13:24,800 --> 00:13:31,160
veggie yeah might be a bit confusing but

00:13:27,260 --> 00:13:34,370
why we did this is if we go back usually

00:13:31,160 --> 00:13:37,250
what we tell is that you connect

00:13:34,370 --> 00:13:39,890
directly to the R to the hypervisor well

00:13:37,250 --> 00:13:41,959
you connect to the daemon which provides

00:13:39,890 --> 00:13:45,890
the tunnel so it's completely

00:13:41,959 --> 00:13:48,769
transparent so what we did name the

00:13:45,890 --> 00:13:51,709
server liberty just because we wanted to

00:13:48,769 --> 00:13:54,200
express the usually you connected to

00:13:51,709 --> 00:13:55,790
this server instead of the demon itself

00:13:54,200 --> 00:13:56,390
all the hypervisor as you might have

00:13:55,790 --> 00:13:59,630
thought

00:13:56,390 --> 00:14:03,230
so this is the original server it does

00:13:59,630 --> 00:14:05,300
have a thread pool in it and it is

00:14:03,230 --> 00:14:08,000
responsible for accepting all the can

00:14:05,300 --> 00:14:12,100
client connections now so you accept the

00:14:08,000 --> 00:14:15,290
client connections it does comprised of

00:14:12,100 --> 00:14:18,890
several sub entities we call service and

00:14:15,290 --> 00:14:21,190
there is two kinds of services we

00:14:18,890 --> 00:14:24,649
actually provide first of all our UNIX

00:14:21,190 --> 00:14:27,140
services that are that do you create a

00:14:24,649 --> 00:14:30,380
UNIX socket you can connect to and so

00:14:27,140 --> 00:14:34,130
are the two types of them rewrite every

00:14:30,380 --> 00:14:37,279
only UNIX socket and then there are ya

00:14:34,130 --> 00:14:41,420
know two or three services actually so

00:14:37,279 --> 00:14:45,260
there is a TCP service which works on

00:14:41,420 --> 00:14:47,899
top of it classic tcp/ip is okay and

00:14:45,260 --> 00:14:50,120
there is but this one is unencrypted and

00:14:47,899 --> 00:14:53,750
shouldn't be using in production and

00:14:50,120 --> 00:14:56,269
also there is the TLS service which does

00:14:53,750 --> 00:14:58,670
provide an encrypted connection so now

00:14:56,269 --> 00:15:04,970
when a request comes to the service the

00:14:58,670 --> 00:15:10,220
service within the service the request

00:15:04,970 --> 00:15:11,630
will be passed because it's in XDR so

00:15:10,220 --> 00:15:14,839
will be Dussehra lized but only the

00:15:11,630 --> 00:15:17,570
header will be realized and according to

00:15:14,839 --> 00:15:20,600
the header a job will be created put

00:15:17,570 --> 00:15:24,140
into job queue and insert it into the

00:15:20,600 --> 00:15:28,339
thread pool so the first worker that is

00:15:24,140 --> 00:15:31,069
free we take it out of the the job queue

00:15:28,339 --> 00:15:33,589
and then with deserialize the message

00:15:31,069 --> 00:15:35,699
payload that the rest of it to know the

00:15:33,589 --> 00:15:38,579
procedure arguments

00:15:35,699 --> 00:15:42,989
and now on wit with issue as I said the

00:15:38,579 --> 00:15:45,359
public API which would translate to to

00:15:42,989 --> 00:15:49,109
some kind of driver which is in a driver

00:15:45,359 --> 00:15:51,359
table now one solution to the army

00:15:49,109 --> 00:15:54,749
hunter enabled admin within the demon

00:15:51,359 --> 00:15:58,649
would be to put it as it as a driver

00:15:54,749 --> 00:16:01,100
into the driver table when that case it

00:15:58,649 --> 00:16:06,839
will be pretty general as we wanted to

00:16:01,100 --> 00:16:09,779
it be separate in that if we put it into

00:16:06,839 --> 00:16:13,230
the driver table via verge could

00:16:09,779 --> 00:16:15,119
actually connect to it and that wasn't

00:16:13,230 --> 00:16:19,019
what we wanted to because verge couldn't

00:16:15,119 --> 00:16:21,179
know what to do with it so what we

00:16:19,019 --> 00:16:23,549
actually did to separate completely and

00:16:21,179 --> 00:16:26,759
is I think I hope it's much much more

00:16:23,549 --> 00:16:29,369
self-contained was that we created a new

00:16:26,759 --> 00:16:32,189
server which our modular architecture

00:16:29,369 --> 00:16:34,790
allowed us to do we created a completely

00:16:32,189 --> 00:16:37,739
new server called admin which for now

00:16:34,790 --> 00:16:40,470
employs only one kind of service is

00:16:37,739 --> 00:16:43,459
unique service and you can only connect

00:16:40,470 --> 00:16:46,529
to the admin server through a real only

00:16:43,459 --> 00:16:49,169
socket and that is because if you

00:16:46,529 --> 00:16:52,259
previously if you wanted to such the

00:16:49,169 --> 00:16:57,329
liberty config actually ye had to be you

00:16:52,259 --> 00:16:59,549
had to have four routes permissions so

00:16:57,329 --> 00:17:02,339
in that case that it makes kind of sense

00:16:59,549 --> 00:17:07,669
to allow on their route to connect to

00:17:02,339 --> 00:17:11,579
the socket so this is just what I say in

00:17:07,669 --> 00:17:14,039
text form now back to the thread pool

00:17:11,579 --> 00:17:16,829
management so we identify we know what

00:17:14,039 --> 00:17:21,120
kind of service do we have and we would

00:17:16,829 --> 00:17:23,870
like to know what which of the service

00:17:21,120 --> 00:17:26,789
is hitting on the limit so we could

00:17:23,870 --> 00:17:29,610
fiddle with the fiddle with the lemons

00:17:26,789 --> 00:17:32,250
and spawn more more or less or kill some

00:17:29,610 --> 00:17:36,889
workers I do have a small demo so maybe

00:17:32,250 --> 00:17:36,889
I will manage to

00:17:43,040 --> 00:17:48,920
maybe not can you see it

00:17:50,750 --> 00:18:02,610
not anymore all right

00:18:00,060 --> 00:18:04,770
let's do it some other way because I'm

00:18:02,610 --> 00:18:07,890
slowly running out of time let's do the

00:18:04,770 --> 00:18:11,220
demo at the end of the presentation so

00:18:07,890 --> 00:18:13,740
when you were issue the command server

00:18:11,220 --> 00:18:17,730
fretful info to get the limits on the

00:18:13,740 --> 00:18:19,080
workers and that you will set some you

00:18:17,730 --> 00:18:21,090
will actually change the limits for the

00:18:19,080 --> 00:18:23,790
workers and you respond more or you

00:18:21,090 --> 00:18:27,000
would kill some of the existing thread

00:18:23,790 --> 00:18:29,640
pool workers now to the client

00:18:27,000 --> 00:18:32,850
management as I said you would like to

00:18:29,640 --> 00:18:36,870
know how many client connections are are

00:18:32,850 --> 00:18:40,730
there so you would make some you would

00:18:36,870 --> 00:18:44,910
be able to make some statistics and you

00:18:40,730 --> 00:18:46,800
could you can fiddle with the with the

00:18:44,910 --> 00:18:52,050
limits on the client so that would be

00:18:46,800 --> 00:18:54,600
more tailored to your use case now for

00:18:52,050 --> 00:18:57,030
that you will issue that this command

00:18:54,600 --> 00:19:02,100
what is much more interesting about the

00:18:57,030 --> 00:19:03,390
clients than this is we expect that

00:19:02,100 --> 00:19:05,070
there will be some third party

00:19:03,390 --> 00:19:08,430
applications that will be interested

00:19:05,070 --> 00:19:11,460
into implementing some policy

00:19:08,430 --> 00:19:13,680
enforcement which liquid won't do so in

00:19:11,460 --> 00:19:15,540
that case if you want to implement some

00:19:13,680 --> 00:19:18,720
policy enforcement on the existing

00:19:15,540 --> 00:19:21,510
connections you need to know all the

00:19:18,720 --> 00:19:24,000
details about the clients like wait if

00:19:21,510 --> 00:19:26,640
which IP it connected from where is the

00:19:24,000 --> 00:19:29,010
timestamp de user authentication they

00:19:26,640 --> 00:19:30,600
use a recently connection so we would

00:19:29,010 --> 00:19:33,720
like to list all the connections and

00:19:30,600 --> 00:19:35,250
provide the details for it so these are

00:19:33,720 --> 00:19:37,050
the commands and hopefully I will still

00:19:35,250 --> 00:19:39,330
make it at the end of the presentations

00:19:37,050 --> 00:19:41,370
now logging this is actually the bit the

00:19:39,330 --> 00:19:46,250
only bit that still haven't been pushed

00:19:41,370 --> 00:19:50,190
and so upstream is under review process

00:19:46,250 --> 00:19:51,870
now everyone knows why we do have

00:19:50,190 --> 00:19:55,320
logging

00:19:51,870 --> 00:19:57,740
but it happens their customers do you

00:19:55,320 --> 00:20:00,750
have problems they usually do not have

00:19:57,740 --> 00:20:04,410
what usually it happens they do not have

00:20:00,750 --> 00:20:07,140
debugging enabled so there you have to

00:20:04,410 --> 00:20:08,430
enable their debugging and set the level

00:20:07,140 --> 00:20:14,220
of the debug prop right

00:20:08,430 --> 00:20:17,910
appropriately well the problem is it

00:20:14,220 --> 00:20:22,620
requires a Manresa as I said you can

00:20:17,910 --> 00:20:24,720
most of the times you can you can repeat

00:20:22,620 --> 00:20:26,340
the command to actually when there is a

00:20:24,720 --> 00:20:30,330
failure you can repeat the command and

00:20:26,340 --> 00:20:32,190
they ever we reoccur no problem but it

00:20:30,330 --> 00:20:35,370
happened there are some anomalies in

00:20:32,190 --> 00:20:36,929
which case you would like to you will

00:20:35,370 --> 00:20:40,230
really would like to inspect the current

00:20:36,929 --> 00:20:43,800
state of the domain so in that case you

00:20:40,230 --> 00:20:46,170
have to do it runtime and that is the

00:20:43,800 --> 00:20:47,760
main reason why I won't we want to do

00:20:46,170 --> 00:20:53,160
that we want to inspect the current

00:20:47,760 --> 00:20:55,920
session now we start the daemon so if

00:20:53,160 --> 00:21:01,710
you just enable the logging there will

00:20:55,920 --> 00:21:04,020
be plenty of logs and you just you only

00:21:01,710 --> 00:21:06,809
the only thing you can find yeah you use

00:21:04,020 --> 00:21:11,520
grep and you see then then is there is

00:21:06,809 --> 00:21:12,809
an error but there is a some is loads of

00:21:11,520 --> 00:21:15,750
logs because some modules are really

00:21:12,809 --> 00:21:19,320
verbis without adding no information at

00:21:15,750 --> 00:21:22,350
all so if you do not provide any

00:21:19,320 --> 00:21:23,940
filtering so you are fine looking for

00:21:22,350 --> 00:21:26,250
the culprit you're looking looking and

00:21:23,940 --> 00:21:27,990
then you find something like this you

00:21:26,250 --> 00:21:31,830
happy because you find you found the

00:21:27,990 --> 00:21:35,400
culprit but Leafly provides a filtering

00:21:31,830 --> 00:21:37,530
method yes it did and we would like to

00:21:35,400 --> 00:21:40,140
do it on the fly now to the filtering

00:21:37,530 --> 00:21:43,020
why do we actually have a filtering Jun

00:21:40,140 --> 00:21:46,200
LD provides some sort of filtering but

00:21:43,020 --> 00:21:48,179
if I understood correctly it only does

00:21:46,200 --> 00:21:51,030
some rate limiting it doesn't provide

00:21:48,179 --> 00:21:53,700
any regular expression filtering in that

00:21:51,030 --> 00:21:56,370
case you cannot know you don't you don't

00:21:53,700 --> 00:22:00,090
know our internals in that case it would

00:21:56,370 --> 00:22:03,750
be better if you used our filtering on

00:22:00,090 --> 00:22:05,639
top before applying your own filtering

00:22:03,750 --> 00:22:08,429
using another filtering safe

00:22:05,639 --> 00:22:10,649
them like journal D so I already

00:22:08,429 --> 00:22:13,919
mentioned and there we can change the

00:22:10,649 --> 00:22:16,889
locking level from debug info but debug

00:22:13,919 --> 00:22:21,359
will be most of the time the thing you

00:22:16,889 --> 00:22:27,119
want so we want to provide a custom set

00:22:21,359 --> 00:22:29,849
of filters to bring bring the filtering

00:22:27,119 --> 00:22:32,639
to a whole another level to clear the

00:22:29,849 --> 00:22:38,869
logging files a bit and also if you want

00:22:32,639 --> 00:22:42,869
to add just more filtering outputs you

00:22:38,869 --> 00:22:49,609
specify you define a new set of logging

00:22:42,869 --> 00:22:52,200
outputs to the future improvements yeah

00:22:49,609 --> 00:22:53,849
we would like to implement some client

00:22:52,200 --> 00:22:56,039
discover event so as I was talking about

00:22:53,849 --> 00:23:00,599
the third-party applications that would

00:22:56,039 --> 00:23:03,570
implement the policy enforcement if they

00:23:00,599 --> 00:23:06,779
decided they disconnect the client in

00:23:03,570 --> 00:23:09,659
that case if the client reconnects which

00:23:06,779 --> 00:23:14,700
usually they will try to because they

00:23:09,659 --> 00:23:16,679
will implement just the loop they they

00:23:14,700 --> 00:23:18,479
found out there they were disconnected

00:23:16,679 --> 00:23:21,509
so they just reckon I oughta matically

00:23:18,479 --> 00:23:24,509
so we would like to provide a set and

00:23:21,509 --> 00:23:26,279
event to that will be registered by

00:23:24,509 --> 00:23:28,109
these third-party applications that it

00:23:26,279 --> 00:23:31,799
would tell them hey there is a client

00:23:28,109 --> 00:23:34,529
trying to connect do you do with it we

00:23:31,799 --> 00:23:37,429
want we know these and these information

00:23:34,529 --> 00:23:41,969
about it so do with it what you want

00:23:37,429 --> 00:23:44,639
then yeah I told I told you that we

00:23:41,969 --> 00:23:47,339
currently only support connecting

00:23:44,639 --> 00:23:53,519
through the very only UNIX socket and

00:23:47,339 --> 00:24:00,259
that's because we were a bit we employ a

00:23:53,519 --> 00:24:03,329
bit of a defending approach when

00:24:00,259 --> 00:24:06,509
thinking about it and that means that we

00:24:03,329 --> 00:24:08,700
didn't want to rely on the SSH there

00:24:06,509 --> 00:24:12,419
might be a bark in the SSH that will

00:24:08,700 --> 00:24:16,169
lead to real privilege elevation and in

00:24:12,419 --> 00:24:18,269
our case you could just use the

00:24:16,169 --> 00:24:19,440
privilege elevation to disconnect all

00:24:18,269 --> 00:24:22,409
the clients

00:24:19,440 --> 00:24:24,419
zero and that would create deos attack

00:24:22,409 --> 00:24:27,750
and also that comes with their applies

00:24:24,419 --> 00:24:30,690
to the thread pool as well so in the

00:24:27,750 --> 00:24:36,570
future we might decide to support remote

00:24:30,690 --> 00:24:38,639
access we'll see about that I would like

00:24:36,570 --> 00:24:41,340
to encourage you on some debate on the

00:24:38,639 --> 00:24:42,480
upstream about that and also to improve

00:24:41,340 --> 00:24:46,700
the experience for the third-party

00:24:42,480 --> 00:24:49,409
applications they're implementing the

00:24:46,700 --> 00:24:52,110
policy enforcement it will be also nice

00:24:49,409 --> 00:24:54,929
to log the clients because the clients

00:24:52,110 --> 00:24:57,299
are anonymous so we could lock some

00:24:54,929 --> 00:25:02,279
activity and they will improve their

00:24:57,299 --> 00:25:06,389
policy decisions lastly if you would

00:25:02,279 --> 00:25:08,309
like to reach us just you can contact us

00:25:06,389 --> 00:25:10,500
on our mailing list depending if you

00:25:08,309 --> 00:25:14,299
want that you help from users point of

00:25:10,500 --> 00:25:18,210
view a little bit users or you have

00:25:14,299 --> 00:25:21,059
developer message that we like to send

00:25:18,210 --> 00:25:24,389
us so you can if you want to post

00:25:21,059 --> 00:25:26,940
patches you can post in here make sure

00:25:24,389 --> 00:25:29,399
you look on your our contributor

00:25:26,940 --> 00:25:33,179
guidelines on lipid or orc or you can

00:25:29,399 --> 00:25:35,220
find us on the IRC now yeah before

00:25:33,179 --> 00:25:37,139
questions since this is the last

00:25:35,220 --> 00:25:43,740
presentation I have still five minutes

00:25:37,139 --> 00:25:47,240
left I'll try to fix the terminal and it

00:25:43,740 --> 00:25:47,240
might work it might not work

00:25:50,810 --> 00:25:53,650
yep ah

00:26:02,710 --> 00:26:23,950
so to the threat poor management so in

00:26:20,809 --> 00:26:26,690
that case if you if you inspect the

00:26:23,950 --> 00:26:28,850
deliberate D server right now is the

00:26:26,690 --> 00:26:31,160
differe configuration it's the limits

00:26:28,850 --> 00:26:34,850
are min minimum workers is 5 and max

00:26:31,160 --> 00:26:37,760
workers 20 and currently there is 5

00:26:34,850 --> 00:26:39,620
workers 5 free there's nothing to to go

00:26:37,760 --> 00:26:46,820
warm and there is nothing in the queue

00:26:39,620 --> 00:26:51,110
to simulate the the load I will probably

00:26:46,820 --> 00:27:09,559
the best way to do it will be to set the

00:26:51,110 --> 00:27:14,950
I really cannot see that like this for

00:27:09,559 --> 00:27:14,950
pool set which server

00:27:18,620 --> 00:27:30,260
it's been workers yeah

00:27:37,809 --> 00:27:49,790
we'll live that maybe yeah great so

00:27:46,130 --> 00:27:52,550
let's look at it now yeah in that case

00:27:49,790 --> 00:28:02,120
if you try to connect or do something

00:27:52,550 --> 00:28:12,140
useful with it like listing domains yeah

00:28:02,120 --> 00:28:14,720
wait what oh it but that doesn't matter

00:28:12,140 --> 00:28:18,429
if you're already connected since I do

00:28:14,720 --> 00:28:21,170
not have any workers left is she just

00:28:18,429 --> 00:28:27,080
maybe it's cash they probably will be

00:28:21,170 --> 00:28:31,910
cashed let's start the domain yep yeah

00:28:27,080 --> 00:28:37,130
okay listing is priority maybe it could

00:28:31,910 --> 00:28:44,590
be the issue they feed you don't mean

00:28:37,130 --> 00:28:44,590
for yeah

00:28:46,030 --> 00:28:54,080
so the first information that you got it

00:28:49,340 --> 00:28:56,720
was cashed that the info that is getting

00:28:54,080 --> 00:29:00,040
from the server is hanging because they

00:28:56,720 --> 00:29:03,679
are more workers left to do it if we

00:29:00,040 --> 00:29:08,059
reset the workers like to five and spawn

00:29:03,679 --> 00:29:12,140
more with like two so we do have now two

00:29:08,059 --> 00:29:13,790
workers and the job finished the same we

00:29:12,140 --> 00:29:18,130
go week liar I would like to show you

00:29:13,790 --> 00:29:18,130
the disconnect so

00:29:26,970 --> 00:29:39,910
so why not have one TCP client connected

00:29:30,880 --> 00:29:41,830
let's get some info out of it it reminds

00:29:39,910 --> 00:29:43,090
me that we should really implement the

00:29:41,830 --> 00:29:46,840
feature that the server will be

00:29:43,090 --> 00:29:49,990
automatically filled out so we know that

00:29:46,840 --> 00:29:52,120
the client does have ID 1 connection

00:29:49,990 --> 00:29:53,080
time we know the transfer layer we know

00:29:52,120 --> 00:29:55,330
that reason Lea

00:29:53,080 --> 00:29:58,060
it doesn't use read only connection it

00:29:55,330 --> 00:30:01,000
did use because I was already connected

00:29:58,060 --> 00:30:03,190
it did use some authentication which and

00:30:01,000 --> 00:30:07,300
the authentication name for Sasha was

00:30:03,190 --> 00:30:11,260
test we also know that it was its IP

00:30:07,300 --> 00:30:16,140
address which was local no I have we can

00:30:11,260 --> 00:30:16,140
now client disconnect

00:30:20,900 --> 00:30:30,830
sorry now and a day rate Reconnective

00:30:28,500 --> 00:30:30,830
but

00:30:39,970 --> 00:30:56,720
yeah IIIi see yep yep thank you

00:30:53,360 --> 00:30:59,450
I always knew there will be some fair

00:30:56,720 --> 00:31:02,809
chance of a malfunction maybe SEC Falls

00:30:59,450 --> 00:31:05,539
yeah I'm I've run out of time I'm sorry

00:31:02,809 --> 00:31:09,590
I I could have make more after the demo

00:31:05,539 --> 00:31:12,200
so uh yeah I could put the slides again

00:31:09,590 --> 00:31:18,919
but I've that's a matter so any

00:31:12,200 --> 00:31:21,470
questions for my presentation not a

00:31:18,919 --> 00:31:23,750
question just a bit tiny remark we

00:31:21,470 --> 00:31:25,970
already discussed that the commands yeah

00:31:23,750 --> 00:31:29,830
they will be named slightly differently

00:31:25,970 --> 00:31:33,740
pretty soon because there is a weird

00:31:29,830 --> 00:31:35,390
disconnect between us SRV versus client

00:31:33,740 --> 00:31:38,299
as a prefix that will change and it

00:31:35,390 --> 00:31:43,669
would be very beautiful yeah it there is

00:31:38,299 --> 00:31:47,059
a bit of yeah it is a bit weird the

00:31:43,669 --> 00:31:49,460
naming now yeah there was a big problem

00:31:47,059 --> 00:31:51,649
with the naming year it's always a

00:31:49,460 --> 00:31:54,440
problem when you try to make up some new

00:31:51,649 --> 00:31:56,360
and nice names for for the commands yeah

00:31:54,440 --> 00:31:59,240
we can provide some aliases for it

00:31:56,360 --> 00:32:01,850
definitely going to be better yep sure

00:31:59,240 --> 00:32:03,289
lot of times thank you very much I like

00:32:01,850 --> 00:32:05,409
they're ready to please move over to the

00:32:03,289 --> 00:32:05,409

YouTube URL: https://www.youtube.com/watch?v=K7C4SZTwOfw


