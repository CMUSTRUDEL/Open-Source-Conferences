Title: [2016] Backups with QEMU by Max Reitz
Publication date: 2016-09-12
Playlist: KVM Forum 2016
Description: 
	QEMU has various different ways of creating backups of disk images while the VM is running: External snapshots, internal snapshots, a “backup” block job, and a “mirror” block job. In turn, each of these may have sub-varieties. After explaining what these things are, this talk will give a high-level user-oriented overview of the characteristics and distinctive features of each approach to serve as a guideline on when and maybe even more importantly on how to use which.

Max Reitz
Red Hat

Max Reitz is a computer science student at TU Dresden and a Red Hat intern co-maintaining QEMU's block layer core. Together with Kevin Wolf, he has held talks at KVM Forum 2014 and 2015.

Slides: http://www.linux-kvm.org/images/6/65/02x08B-Max_Reitz-Backups_with_QEMU.pdf
Captions: 
	00:00:09,920 --> 00:00:15,509
welcome and I'm glad you joined to join

00:00:12,660 --> 00:00:18,359
me to my talk backups and snapshots with

00:00:15,509 --> 00:00:22,410
qmu I'm max working as an intern for red

00:00:18,359 --> 00:00:24,300
head and I hope I won't bore you to

00:00:22,410 --> 00:00:28,050
death especially after we've had like

00:00:24,300 --> 00:00:31,050
two talks in that direction before Jon's

00:00:28,050 --> 00:00:33,690
talk just at 2 p.m. and cache episode

00:00:31,050 --> 00:00:35,399
yesterday so if you're a very much bored

00:00:33,690 --> 00:00:37,079
you can just ask me very very

00:00:35,399 --> 00:00:39,899
complicated but interesting questions in

00:00:37,079 --> 00:00:42,570
the end and make me sweat by that but

00:00:39,899 --> 00:00:44,070
let's start first so that we actually

00:00:42,570 --> 00:00:47,520
have some time in the end that you can

00:00:44,070 --> 00:00:49,739
ask me questions in so first I'm going

00:00:47,520 --> 00:00:51,449
to start off with what kinds of backups

00:00:49,739 --> 00:00:54,210
there are general and especially what

00:00:51,449 --> 00:00:56,760
CUNY supports mostly in the scope of

00:00:54,210 --> 00:00:58,530
this talk of course so the most basic

00:00:56,760 --> 00:01:00,000
and versatile kind of backup of courses

00:00:58,530 --> 00:01:00,780
you have some file and you copy it

00:01:00,000 --> 00:01:03,359
somewhere else

00:01:00,780 --> 00:01:05,189
very very basic but also very versatile

00:01:03,359 --> 00:01:06,780
because you can copy it anywhere you can

00:01:05,189 --> 00:01:09,510
copy it on the same disk into another

00:01:06,780 --> 00:01:11,939
directory or you can copy it into some

00:01:09,510 --> 00:01:15,720
submarine bunker depending on what your

00:01:11,939 --> 00:01:18,000
needs are now of course this is not very

00:01:15,720 --> 00:01:19,229
efficient but efficiency is something

00:01:18,000 --> 00:01:21,240
you should solve after you've done it

00:01:19,229 --> 00:01:24,000
right and this talks mostly about doing

00:01:21,240 --> 00:01:26,270
it right not optimizing stuff so when it

00:01:24,000 --> 00:01:28,710
comes to QM you have this configuration

00:01:26,270 --> 00:01:30,180
you have a VM which has a couple of

00:01:28,710 --> 00:01:32,400
guest disks attached to it and when

00:01:30,180 --> 00:01:34,020
you're doing a backup of the VM what you

00:01:32,400 --> 00:01:35,939
want to do is of course save all the

00:01:34,020 --> 00:01:38,490
data of the VM which is mostly situated

00:01:35,939 --> 00:01:41,520
on the guest disks so this talk is going

00:01:38,490 --> 00:01:44,280
up it's going to be about what you can

00:01:41,520 --> 00:01:46,380
backup a disk which is attached to a

00:01:44,280 --> 00:01:48,630
virtual machine while the VM is running

00:01:46,380 --> 00:01:50,250
to some other file and of course since

00:01:48,630 --> 00:01:52,530
every guest this can be represented by

00:01:50,250 --> 00:01:54,860
some image file this backup will also be

00:01:52,530 --> 00:01:56,790
such an image file which you could then

00:01:54,860 --> 00:01:59,909
reattach to some guest disk and then

00:01:56,790 --> 00:02:01,560
have the same VM running basically now

00:01:59,909 --> 00:02:02,549
as I said this is not very efficient of

00:02:01,560 --> 00:02:05,280
course

00:02:02,549 --> 00:02:06,930
so besides these real full backups we

00:02:05,280 --> 00:02:08,610
also have this very light method of

00:02:06,930 --> 00:02:11,730
doing a backup which is called a

00:02:08,610 --> 00:02:13,500
snapshot which comes in very handy in

00:02:11,730 --> 00:02:13,980
certain circumstances so let's say you

00:02:13,500 --> 00:02:15,569
have

00:02:13,980 --> 00:02:17,340
your machine and you want to do some

00:02:15,569 --> 00:02:20,220
stuff in it where you think it'll make

00:02:17,340 --> 00:02:21,750
it may break anything or everything like

00:02:20,220 --> 00:02:24,180
install a new operating system where you

00:02:21,750 --> 00:02:27,330
think oh not sure how well that's going

00:02:24,180 --> 00:02:28,950
to be so of course you've want to do a

00:02:27,330 --> 00:02:31,080
backup first before you destroy

00:02:28,950 --> 00:02:33,000
everything but doing a full backup takes

00:02:31,080 --> 00:02:34,680
a lot of time and also you don't need

00:02:33,000 --> 00:02:36,360
the data security requirements of a full

00:02:34,680 --> 00:02:37,920
backup you don't need that data to stay

00:02:36,360 --> 00:02:39,900
in a secure place it's fine to stay

00:02:37,920 --> 00:02:43,230
where it is so what you can do is to

00:02:39,900 --> 00:02:45,209
take a snapshot first snapshot is this

00:02:43,230 --> 00:02:47,730
you have some file which is currently

00:02:45,209 --> 00:02:52,019
actively in use by input and output

00:02:47,730 --> 00:02:53,519
operations running on it and then what

00:02:52,019 --> 00:02:55,319
you do when you're taking the snapshot

00:02:53,519 --> 00:02:57,599
is you replace it atomically by some

00:02:55,319 --> 00:02:59,849
overlay file which is completely empty

00:02:57,599 --> 00:03:01,739
so whenever you try to read something

00:02:59,849 --> 00:03:03,450
from the overlay file all the read

00:03:01,739 --> 00:03:05,099
operations get redirected to the

00:03:03,450 --> 00:03:08,390
snapshot because you can't read from the

00:03:05,099 --> 00:03:11,160
overlay because it is empty so far

00:03:08,390 --> 00:03:13,140
therefore the overlay file appears to be

00:03:11,160 --> 00:03:16,260
exactly the same as the old file which

00:03:13,140 --> 00:03:17,910
is now the snapshot and the snapshot is

00:03:16,260 --> 00:03:20,269
no longer written to it's locked

00:03:17,910 --> 00:03:23,280
so it's frozen in time as the snapshot

00:03:20,269 --> 00:03:26,099
instead everything is now going through

00:03:23,280 --> 00:03:27,630
the overlay and when you're writing

00:03:26,099 --> 00:03:29,760
stuff to the overlay of course it gets

00:03:27,630 --> 00:03:32,130
put there and then when you're reading

00:03:29,760 --> 00:03:34,530
that back it gets red from the overlay

00:03:32,130 --> 00:03:37,440
and that from the original file of

00:03:34,530 --> 00:03:40,919
course so this allows you to have a

00:03:37,440 --> 00:03:44,459
point in time snapshot like a freeze a

00:03:40,919 --> 00:03:46,260
file in time so you can later return to

00:03:44,459 --> 00:03:49,470
it if you find out that what you did was

00:03:46,260 --> 00:03:51,180
actually bad and of course you can also

00:03:49,470 --> 00:03:54,840
take just another snapshot of an

00:03:51,180 --> 00:03:56,430
existing snapshot or an existing overlay

00:03:54,840 --> 00:03:58,530
and then have multiple points in time

00:03:56,430 --> 00:04:01,099
where you have these snapshots and later

00:03:58,530 --> 00:04:03,660
return to any of them if she's so desire

00:04:01,099 --> 00:04:05,819
if qmu looks like this you have some

00:04:03,660 --> 00:04:07,109
guest disk to which a disk image is

00:04:05,819 --> 00:04:10,319
attached and then taking a snapshot

00:04:07,109 --> 00:04:14,430
means you replace that disk image by

00:04:10,319 --> 00:04:17,820
some other disk image which is partially

00:04:14,430 --> 00:04:20,099
allocated that means the format of this

00:04:17,820 --> 00:04:22,590
file has to have a way of storing which

00:04:20,099 --> 00:04:24,180
areas are allocated and which are not so

00:04:22,590 --> 00:04:26,490
that you know which erase has been

00:04:24,180 --> 00:04:27,720
written to already and if you encounter

00:04:26,490 --> 00:04:29,790
an area that has not been

00:04:27,720 --> 00:04:30,780
- of course you fall back to the

00:04:29,790 --> 00:04:32,940
original file

00:04:30,780 --> 00:04:36,810
so the foreman also has to have a way of

00:04:32,940 --> 00:04:38,700
specifying where the original file is

00:04:36,810 --> 00:04:41,160
that is that is it has to support

00:04:38,700 --> 00:04:46,020
backing images for instance Keuka - is

00:04:41,160 --> 00:04:47,220
of course such a format these for these

00:04:46,020 --> 00:04:51,060
snapshots are what we call external

00:04:47,220 --> 00:04:53,670
snapshots because the snapshot and the

00:04:51,060 --> 00:04:56,190
overlay are two different files but

00:04:53,670 --> 00:04:59,310
certain image formats supported by qmu

00:04:56,190 --> 00:05:01,830
mostly Keuka to also support internal

00:04:59,310 --> 00:05:03,540
snapshots where all the overlays and all

00:05:01,830 --> 00:05:06,450
the snapshots are stored within a single

00:05:03,540 --> 00:05:08,130
file in this case the snapshots are then

00:05:06,450 --> 00:05:12,750
identified through some name instead of

00:05:08,130 --> 00:05:14,820
a file name yeah we'll get later to

00:05:12,750 --> 00:05:17,130
whether you should use internal or

00:05:14,820 --> 00:05:19,170
external shots but I can say now that

00:05:17,130 --> 00:05:20,820
it's mostly a matter of case there's I

00:05:19,170 --> 00:05:24,470
don't think there is a real reason

00:05:20,820 --> 00:05:24,470
whether you should use one or the other

00:05:24,830 --> 00:05:30,000
now after we've seen what kind of

00:05:27,600 --> 00:05:31,710
backups there are we can talk about how

00:05:30,000 --> 00:05:34,080
not to do backups because a lot of

00:05:31,710 --> 00:05:36,750
people do that wrong which is also a

00:05:34,080 --> 00:05:39,180
reason why this talk exists so we've

00:05:36,750 --> 00:05:42,600
received a couple of PAC reports which

00:05:39,180 --> 00:05:45,660
were like help everything's broken so

00:05:42,600 --> 00:05:47,880
zooming in on this we can see that all

00:05:45,660 --> 00:05:51,080
in all of these back reports Hume you

00:05:47,880 --> 00:05:53,220
was corrupting hyouka two images that is

00:05:51,080 --> 00:05:55,080
someone did something to the VM and

00:05:53,220 --> 00:05:57,570
suddenly Combe you was not able to open

00:05:55,080 --> 00:06:01,260
a cue car 200 anymore because it was

00:05:57,570 --> 00:06:02,910
completely broken this is always bad

00:06:01,260 --> 00:06:05,040
because it means that people have lost

00:06:02,910 --> 00:06:06,650
all their valuable data and it's

00:06:05,040 --> 00:06:09,900
something that just should never happen

00:06:06,650 --> 00:06:12,180
but zooming in on them even further we

00:06:09,900 --> 00:06:14,310
find our found out that it's not really

00:06:12,180 --> 00:06:16,890
fully cue music

00:06:14,310 --> 00:06:19,140
but the people who reported the bugs

00:06:16,890 --> 00:06:21,780
were doing something wrong and that is

00:06:19,140 --> 00:06:24,180
they took internal snapshots using the Q

00:06:21,780 --> 00:06:26,270
mu mg tool on a cue car - image file

00:06:24,180 --> 00:06:29,130
while the virtual machine was running

00:06:26,270 --> 00:06:31,800
which is a bit like you're going on the

00:06:29,130 --> 00:06:33,720
highway at 100 kilometres an hour and

00:06:31,800 --> 00:06:35,850
your brakes are gone and you think well

00:06:33,720 --> 00:06:37,800
I'm just going to use the handbrake it's

00:06:35,850 --> 00:06:40,110
a bad idea that might work if you know

00:06:37,800 --> 00:06:40,980
exactly what you're doing but it's still

00:06:40,110 --> 00:06:43,560
a bad idea

00:06:40,980 --> 00:06:45,450
and in general we can say that you

00:06:43,560 --> 00:06:47,160
should just never write to a disk and

00:06:45,450 --> 00:06:49,440
that's from two processes at the same

00:06:47,160 --> 00:06:53,010
time because it just may break horribly

00:06:49,440 --> 00:06:55,320
and it probably will but still of course

00:06:53,010 --> 00:06:57,450
this is a bad issue Kim you should never

00:06:55,320 --> 00:06:59,160
corrupt kyouko two images so we have to

00:06:57,450 --> 00:07:01,830
do something about this we can't just

00:06:59,160 --> 00:07:03,720
say well you did it wrong so the first

00:07:01,830 --> 00:07:06,000
thing that's currently being worked on

00:07:03,720 --> 00:07:08,700
is image locking which means that once

00:07:06,000 --> 00:07:10,920
you attach a virtual image a disk image

00:07:08,700 --> 00:07:12,960
to a virtual machine then the virtual

00:07:10,920 --> 00:07:14,880
machine process the cumec process has to

00:07:12,960 --> 00:07:16,710
make sure that the image is locked and

00:07:14,880 --> 00:07:19,110
that the external process can no longer

00:07:16,710 --> 00:07:21,480
access it this is being worked on but

00:07:19,110 --> 00:07:24,570
this will just prevent people from doing

00:07:21,480 --> 00:07:25,980
from corrupting their images but it will

00:07:24,570 --> 00:07:28,050
also prevent them from doing their

00:07:25,980 --> 00:07:30,000
backups now of course they did the back

00:07:28,050 --> 00:07:32,760
of strong so this is a good thing but

00:07:30,000 --> 00:07:34,830
still so we have to do something more

00:07:32,760 --> 00:07:36,720
positive which is inform people on how

00:07:34,830 --> 00:07:39,600
to do backups right which of course is

00:07:36,720 --> 00:07:41,520
why this talk exists because it's

00:07:39,600 --> 00:07:43,110
actually very simple just to tell the

00:07:41,520 --> 00:07:45,510
virtual machine process itself the cume

00:07:43,110 --> 00:07:47,340
you process to take a snapshot and to do

00:07:45,510 --> 00:07:49,770
backups and all of that and we'll do

00:07:47,340 --> 00:07:52,710
that for you and it's very very simple

00:07:49,770 --> 00:07:54,480
if you know how to do it this is why

00:07:52,710 --> 00:07:59,430
this talk exists so that I to tell

00:07:54,480 --> 00:08:01,440
everyone how to do it which is what this

00:07:59,430 --> 00:08:04,200
part of support of course first we'll

00:08:01,440 --> 00:08:07,140
have to talk about the interface you

00:08:04,200 --> 00:08:09,720
have to use to access qmu and to tell it

00:08:07,140 --> 00:08:12,380
to do something which Kashyap and John

00:08:09,720 --> 00:08:16,590
have already talked about which is GM P

00:08:12,380 --> 00:08:18,360
Q P stands for cumulative protocol so as

00:08:16,590 --> 00:08:21,150
the name implies is mostly a protocol

00:08:18,360 --> 00:08:23,070
and an API for management applications

00:08:21,150 --> 00:08:25,440
to control virtual machine while it is

00:08:23,070 --> 00:08:27,360
running so for instance lipfird it can

00:08:25,440 --> 00:08:29,100
pause the virtual machine can resume it

00:08:27,360 --> 00:08:31,680
can add devices remove devices and much

00:08:29,100 --> 00:08:33,930
more when you build your queue new you

00:08:31,680 --> 00:08:36,300
get a file called Q and P commands so

00:08:33,930 --> 00:08:38,220
txt in the bill directory which contains

00:08:36,300 --> 00:08:40,280
all the commands there are within

00:08:38,220 --> 00:08:43,169
description all the parameters and so on

00:08:40,280 --> 00:08:44,520
now while this is mainly thought for

00:08:43,169 --> 00:08:46,710
management applications it's based on

00:08:44,520 --> 00:08:49,350
JSON so you can actually very very poor

00:08:46,710 --> 00:08:51,630
just use it yourself just append this

00:08:49,350 --> 00:08:54,120
option to the cumin cumin line - qnp sed

00:08:51,630 --> 00:08:54,750
IO and you will get a Q and P interface

00:08:54,120 --> 00:08:57,090
on the common

00:08:54,750 --> 00:08:59,550
line and then you can go wild and just

00:08:57,090 --> 00:09:01,500
try it out for yourself so on the line

00:08:59,550 --> 00:09:04,080
qmp looks like this it consists of JSON

00:09:01,500 --> 00:09:05,970
objects when you want to send a comb and

00:09:04,080 --> 00:09:07,830
you use you send a JSON object which

00:09:05,970 --> 00:09:10,290
contains an execute key whose value is

00:09:07,830 --> 00:09:12,240
just the name of the comb an and then

00:09:10,290 --> 00:09:13,860
you can pass some arguments all of

00:09:12,240 --> 00:09:16,440
course with the name and their value and

00:09:13,860 --> 00:09:18,600
if that argument was executed

00:09:16,440 --> 00:09:20,400
successfully then you'll get a JSON

00:09:18,600 --> 00:09:22,650
object back from qmu which contains a

00:09:20,400 --> 00:09:24,870
return key maybe with symbol you maybe

00:09:22,650 --> 00:09:26,190
not depends on the Komen if you did

00:09:24,870 --> 00:09:28,260
something wrong then you'll get an error

00:09:26,190 --> 00:09:30,990
which is just a JSON object with an

00:09:28,260 --> 00:09:33,180
arrow key and the all of these are of

00:09:30,990 --> 00:09:34,770
course synchronous operations so you

00:09:33,180 --> 00:09:38,550
send a comment and you get a response

00:09:34,770 --> 00:09:40,290
which may be a return or an arrow there

00:09:38,550 --> 00:09:42,960
is also the s and currents event the

00:09:40,290 --> 00:09:45,690
p.m. you may send you a JSON object with

00:09:42,960 --> 00:09:47,310
an event key at any time and then you

00:09:45,690 --> 00:09:47,610
have to do something with it or you

00:09:47,310 --> 00:09:50,790
don't

00:09:47,610 --> 00:09:53,010
depends on you so it's actually just

00:09:50,790 --> 00:09:54,840
very simple to write as a human - you

00:09:53,010 --> 00:09:57,360
can of course use your own scripts

00:09:54,840 --> 00:10:00,300
Kashyap talked yesterday about being

00:09:57,360 --> 00:10:02,880
this the qmp script a helper script

00:10:00,300 --> 00:10:05,370
which is part of QM use so that you can

00:10:02,880 --> 00:10:06,839
have a more bit more simple syntax but

00:10:05,370 --> 00:10:11,310
of course you can also just include it

00:10:06,839 --> 00:10:13,080
in your scripts if you so desire for

00:10:11,310 --> 00:10:14,640
instance let's say you have a virtual

00:10:13,080 --> 00:10:17,160
machine which you want to pause you can

00:10:14,640 --> 00:10:20,580
do that using the stop command so you

00:10:17,160 --> 00:10:24,030
just send JSON object with the execute

00:10:20,580 --> 00:10:25,740
key whose value stop and then what Q is

00:10:24,030 --> 00:10:27,839
executing that command you will get a

00:10:25,740 --> 00:10:30,510
stop event telling you that the machine

00:10:27,839 --> 00:10:32,730
has actually stopped execution and after

00:10:30,510 --> 00:10:35,130
that the command will have been executed

00:10:32,730 --> 00:10:39,060
successfully so QE will just return

00:10:35,130 --> 00:10:41,760
again to you in the following slides

00:10:39,060 --> 00:10:43,650
I'll use a slightly slightly shorter

00:10:41,760 --> 00:10:46,260
comment notation which looks like this

00:10:43,650 --> 00:10:48,660
so instead of just writing the full JSON

00:10:46,260 --> 00:10:50,040
object for executing some Coleman I just

00:10:48,660 --> 00:10:52,050
write the name of the comment in front

00:10:50,040 --> 00:10:53,280
of the parentheses and then write all

00:10:52,050 --> 00:10:54,780
the arguments with their names and

00:10:53,280 --> 00:10:57,150
values in the parentheses so it

00:10:54,780 --> 00:10:58,380
shouldn't be surprised to anyone I think

00:10:57,150 --> 00:11:01,380
it should be pretty obvious so that

00:10:58,380 --> 00:11:03,690
works now let's come to the interesting

00:11:01,380 --> 00:11:05,550
part which is how can you use Q and P to

00:11:03,690 --> 00:11:07,650
actually create snapshots on a virtual

00:11:05,550 --> 00:11:08,610
machine while it is running and there's

00:11:07,650 --> 00:11:10,829
actually not much just

00:11:08,610 --> 00:11:12,660
there's the block to snapshot internal

00:11:10,829 --> 00:11:14,369
sink come on for internal snapshot which

00:11:12,660 --> 00:11:16,619
takes two parameters the first of which

00:11:14,369 --> 00:11:18,059
is the name of the d-block device to

00:11:16,619 --> 00:11:19,709
which the disk image is attached that

00:11:18,059 --> 00:11:21,839
you want to create an internal snapshot

00:11:19,709 --> 00:11:23,459
in and the other one is the name you

00:11:21,839 --> 00:11:24,929
want to give to the new snapshot so

00:11:23,459 --> 00:11:28,379
let's say you have this configuration

00:11:24,929 --> 00:11:31,589
where you have a disk in a virtual guest

00:11:28,379 --> 00:11:33,660
drive to which it gives disk image is

00:11:31,589 --> 00:11:35,369
attached which already has two internal

00:11:33,660 --> 00:11:38,759
snapshots called 1 and 2 very

00:11:35,369 --> 00:11:40,319
imaginative very imaginative and you

00:11:38,759 --> 00:11:42,929
want to create a third node snapshot

00:11:40,319 --> 00:11:44,489
called it 3 so you execute the block to

00:11:42,929 --> 00:11:47,699
snapshot internal sync command with the

00:11:44,489 --> 00:11:51,420
parameters device is just 0 and a new

00:11:47,699 --> 00:11:53,670
name is number 3 so what happens is that

00:11:51,420 --> 00:11:56,790
qmu will do that for you so it's

00:11:53,670 --> 00:11:58,259
actually very very simple for external

00:11:56,790 --> 00:12:00,389
snapshots there's the blocked of

00:11:58,259 --> 00:12:02,759
snapshot sync command which works very

00:12:00,389 --> 00:12:06,239
similarly takes the name of the block

00:12:02,759 --> 00:12:07,860
device again and the name of the overlay

00:12:06,239 --> 00:12:09,569
image you want to create now this

00:12:07,860 --> 00:12:11,040
parameter is called the snapshot file

00:12:09,569 --> 00:12:12,869
parameter but it actually takes the name

00:12:11,040 --> 00:12:14,730
of the overlay you want to create not of

00:12:12,869 --> 00:12:16,889
the snapshot because you don't move that

00:12:14,730 --> 00:12:20,309
anywhere so that's a bit of confusing

00:12:16,889 --> 00:12:23,279
but yeah it's just how it is and finally

00:12:20,309 --> 00:12:25,319
it takes the format you want to you

00:12:23,279 --> 00:12:27,660
overlay image to be in so normally cue

00:12:25,319 --> 00:12:29,579
car - I guess and it also takes a couple

00:12:27,660 --> 00:12:32,369
of more parameters but those are all

00:12:29,579 --> 00:12:38,149
listed in the qmp commands the TC file

00:12:32,369 --> 00:12:40,499
if you're so inclined now if you want to

00:12:38,149 --> 00:12:41,790
basically create an external snapshot

00:12:40,499 --> 00:12:44,429
with the same configuration we had

00:12:41,790 --> 00:12:46,919
before we have a guest disk called disk

00:12:44,429 --> 00:12:49,589
0 to which a disk image is attached that

00:12:46,919 --> 00:12:51,449
you now want to snapshot you can execute

00:12:49,589 --> 00:12:55,559
the block to snapshot sync command on

00:12:51,449 --> 00:12:57,540
disk 0 the new file is supposed to be

00:12:55,559 --> 00:12:59,579
named food at Keuka - and it's supposed

00:12:57,540 --> 00:13:03,239
to be in cuba - format so you just

00:12:59,579 --> 00:13:06,419
execute that common in qmp and that will

00:13:03,239 --> 00:13:09,179
happen so no surprise there very simple

00:13:06,419 --> 00:13:12,269
so there's really no reason to use q mu

00:13:09,179 --> 00:13:14,699
mg on an image while it is attached to a

00:13:12,269 --> 00:13:18,350
VM because you can really just use the

00:13:14,699 --> 00:13:18,350
VM itself it's very very simple

00:13:18,400 --> 00:13:24,590
or you can of course use libvirt but I

00:13:21,530 --> 00:13:26,840
guess these people have reasons for not

00:13:24,590 --> 00:13:28,100
using the effort or you know because

00:13:26,840 --> 00:13:31,970
maybe you want to write your own

00:13:28,100 --> 00:13:35,450
management tools now when we're talking

00:13:31,970 --> 00:13:38,120
about backups itself copying data off

00:13:35,450 --> 00:13:40,610
that gets it gets a bit more complicated

00:13:38,120 --> 00:13:42,080
because the problem is that all these

00:13:40,610 --> 00:13:44,420
black a snapshot coal mines were

00:13:42,080 --> 00:13:45,950
synchronous you start them they do

00:13:44,420 --> 00:13:47,420
something for a very very short time and

00:13:45,950 --> 00:13:48,370
then they basically instantaneously

00:13:47,420 --> 00:13:51,920
return to you

00:13:48,370 --> 00:13:53,540
the problem with backups the real

00:13:51,920 --> 00:13:56,060
backups is that you have to copy data

00:13:53,540 --> 00:13:59,090
somewhere so it takes a lot of time now

00:13:56,060 --> 00:14:01,400
qmp basically blocks the VM execution so

00:13:59,090 --> 00:14:03,170
when you're executing a comment the VM

00:14:01,400 --> 00:14:05,780
will more or less stop during that time

00:14:03,170 --> 00:14:08,300
so you don't really want to have

00:14:05,780 --> 00:14:10,820
long-running command because that would

00:14:08,300 --> 00:14:13,100
be bad so that's what we have block jobs

00:14:10,820 --> 00:14:15,590
for block drops work like this you have

00:14:13,100 --> 00:14:17,810
some background operation which you can

00:14:15,590 --> 00:14:20,720
start using a qmp comment so you just

00:14:17,810 --> 00:14:23,060
invoke the cube peek oh man and it will

00:14:20,720 --> 00:14:24,980
again immediately return to you but in

00:14:23,060 --> 00:14:27,560
the background the black the block drop

00:14:24,980 --> 00:14:29,780
itself will continue to run and after it

00:14:27,560 --> 00:14:31,880
has continued after it has completed it

00:14:29,780 --> 00:14:37,730
will send you a an event that it

00:14:31,880 --> 00:14:40,790
actually has for example or generally

00:14:37,730 --> 00:14:42,080
this looks like this you have some

00:14:40,790 --> 00:14:43,460
comment which starts the block shop

00:14:42,080 --> 00:14:46,700
which is generally just the name of the

00:14:43,460 --> 00:14:48,200
block job and by executing this you will

00:14:46,700 --> 00:14:50,690
just start the block job of course in

00:14:48,200 --> 00:14:53,390
CUNY would join instantly to you you can

00:14:50,690 --> 00:14:55,570
give a job ID to the job so you can

00:14:53,390 --> 00:14:57,860
later identify it which makes sense and

00:14:55,570 --> 00:15:00,350
then after some time you just get a

00:14:57,860 --> 00:15:02,660
block job completed event with the name

00:15:00,350 --> 00:15:04,460
of the block job in there the fact that

00:15:02,660 --> 00:15:07,610
this is called device here instead of

00:15:04,460 --> 00:15:09,560
job ID is legacy craft which of course

00:15:07,610 --> 00:15:13,550
we always have to deal with in all areas

00:15:09,560 --> 00:15:15,470
and here too now there are block jobs

00:15:13,550 --> 00:15:16,970
which don't immediately complete but

00:15:15,470 --> 00:15:20,390
they have a ready phase first

00:15:16,970 --> 00:15:22,130
that means after the initial operation

00:15:20,390 --> 00:15:23,960
has completed they will not send a

00:15:22,130 --> 00:15:25,730
blocked or completed event but a blocked

00:15:23,960 --> 00:15:27,530
job ready event and then you have to

00:15:25,730 --> 00:15:29,870
manually tell it to complete using the

00:15:27,530 --> 00:15:31,080
block shop complete command and only

00:15:29,870 --> 00:15:33,570
then will it generate it

00:15:31,080 --> 00:15:36,090
recent event which on the line looks

00:15:33,570 --> 00:15:38,610
like you'd expected you get a block job

00:15:36,090 --> 00:15:40,380
ready event and then you send props up

00:15:38,610 --> 00:15:44,430
complete command and then you get a

00:15:40,380 --> 00:15:45,840
block of completed event this doesn't

00:15:44,430 --> 00:15:47,490
make it probably doesn't make much sense

00:15:45,840 --> 00:15:49,800
as you're seeing this for the first time

00:15:47,490 --> 00:15:52,020
but we will later see a block job for

00:15:49,800 --> 00:15:57,510
this for which this is necessary and

00:15:52,020 --> 00:15:59,580
we'll see why this is the case okay now

00:15:57,510 --> 00:16:01,860
we can actually see what kinds of block

00:15:59,580 --> 00:16:05,520
jobs there are that can help us doing a

00:16:01,860 --> 00:16:07,920
backup and not much surprisingly that

00:16:05,520 --> 00:16:11,400
block job the main block job is called

00:16:07,920 --> 00:16:14,790
Drive backup which just copies it guest

00:16:11,400 --> 00:16:16,650
disks data to another file and the state

00:16:14,790 --> 00:16:18,600
of the other file is the state of the

00:16:16,650 --> 00:16:21,150
data that will be contained therein is

00:16:18,600 --> 00:16:22,890
just the same as the state of the guest

00:16:21,150 --> 00:16:25,110
disk was at the start of the block job

00:16:22,890 --> 00:16:28,440
so you will always get a consistent

00:16:25,110 --> 00:16:32,370
state in the backup but that also means

00:16:28,440 --> 00:16:35,040
that whenever the guest writes to some

00:16:32,370 --> 00:16:37,860
area and the image file on the virtual

00:16:35,040 --> 00:16:40,110
disk and qmu has not yet written that

00:16:37,860 --> 00:16:42,150
area to the backup file kim you will

00:16:40,110 --> 00:16:44,100
first have to copy that off and can only

00:16:42,150 --> 00:16:47,010
then let the guest continue writing to

00:16:44,100 --> 00:16:48,390
that area so if you have heavy i/o and

00:16:47,010 --> 00:16:50,940
the guess and you're doing it backup at

00:16:48,390 --> 00:16:52,290
the same time then the guest may get

00:16:50,940 --> 00:16:54,750
slowed down by quite a bit

00:16:52,290 --> 00:16:58,260
which I don't think it's too surprising

00:16:54,750 --> 00:17:00,270
but it's worth mentioning anyway the

00:16:58,260 --> 00:17:02,820
four main arguments for Drive backup are

00:17:00,270 --> 00:17:05,370
these first again takes the name of the

00:17:02,820 --> 00:17:07,830
source device you want to copy second is

00:17:05,370 --> 00:17:10,470
the target file where you want to copy

00:17:07,830 --> 00:17:13,320
the data to and this file name of course

00:17:10,470 --> 00:17:15,390
can be in there can be any file that QM

00:17:13,320 --> 00:17:18,870
you would support for creating and

00:17:15,390 --> 00:17:22,980
opening so it may be for instance on

00:17:18,870 --> 00:17:24,600
some SSH server to the sync parameter

00:17:22,980 --> 00:17:26,699
specifies what exactly to copy we'll

00:17:24,600 --> 00:17:28,440
come to that in a second and with the

00:17:26,699 --> 00:17:30,600
mote parameter you can specify whether

00:17:28,440 --> 00:17:34,830
you want to create the target file or

00:17:30,600 --> 00:17:36,600
reuse an existing one so the sync

00:17:34,830 --> 00:17:38,760
parameter becomes very useful when you

00:17:36,600 --> 00:17:40,140
have a snapshot chain like this attached

00:17:38,760 --> 00:17:42,530
to a guest disk where you have multiple

00:17:40,140 --> 00:17:45,620
overlays and multiple snapshots and all

00:17:42,530 --> 00:17:47,990
reference each other and now you can't

00:17:45,620 --> 00:17:50,240
specify using the sync parameter what of

00:17:47,990 --> 00:17:51,920
this data you exactly want to copy if

00:17:50,240 --> 00:17:54,110
you specify sync equals full then you

00:17:51,920 --> 00:17:55,910
will just copy everything that is all

00:17:54,110 --> 00:17:58,160
the data will be collapsed into the

00:17:55,910 --> 00:18:00,290
backup image and the backup image will

00:17:58,160 --> 00:18:02,480
then be a standalone representation of

00:18:00,290 --> 00:18:06,320
the original guest disk so this is

00:18:02,480 --> 00:18:08,660
probably the most basic one you can also

00:18:06,320 --> 00:18:10,340
use sync equals top which will just copy

00:18:08,660 --> 00:18:12,050
the data contained in the topmost

00:18:10,340 --> 00:18:15,140
overlay image but this of course means

00:18:12,050 --> 00:18:17,060
that then your backup image will depend

00:18:15,140 --> 00:18:19,130
on all the other images in the back and

00:18:17,060 --> 00:18:22,850
chain or in the snapshot chain we also

00:18:19,130 --> 00:18:24,110
call that the back and chain and then of

00:18:22,850 --> 00:18:26,480
course your backup becomes pretty much

00:18:24,110 --> 00:18:28,910
useless if in the event of data loss you

00:18:26,480 --> 00:18:31,310
also lose this image these images but of

00:18:28,910 --> 00:18:35,120
course the backup is faster and requires

00:18:31,310 --> 00:18:37,550
less space then there is sync equals

00:18:35,120 --> 00:18:39,770
none which however is pretty weird for

00:18:37,550 --> 00:18:41,720
Drive backup so I won't go into that to

00:18:39,770 --> 00:18:43,820
further detail if you want to take a

00:18:41,720 --> 00:18:47,210
look you can look into qmp command so

00:18:43,820 --> 00:18:49,640
txt and it will roughly explain what it

00:18:47,210 --> 00:18:51,830
does but it's most definitely otoscope

00:18:49,640 --> 00:18:53,840
for this talk also out of scope for this

00:18:51,830 --> 00:18:55,760
talk is sync equals incremental for

00:18:53,840 --> 00:18:57,500
which john a vladimir did a great talk

00:18:55,760 --> 00:18:59,360
last year actually it was just on

00:18:57,500 --> 00:19:03,620
because letting me was unfortunately not

00:18:59,360 --> 00:19:05,390
able to be there in person and this is

00:19:03,620 --> 00:19:07,330
not Alice cope because it's so weird but

00:19:05,390 --> 00:19:10,190
it's otoscope because it's so complex

00:19:07,330 --> 00:19:12,020
it's very very very useful actually

00:19:10,190 --> 00:19:13,640
because it allows you to copy all the

00:19:12,020 --> 00:19:16,010
data that has changed from the last

00:19:13,640 --> 00:19:17,690
backup you did so I guess you can see

00:19:16,010 --> 00:19:21,680
how that is useful because it saves to

00:19:17,690 --> 00:19:24,680
disk space and time during the copy so

00:19:21,680 --> 00:19:25,820
definitely take a look into that talk if

00:19:24,680 --> 00:19:28,340
you're interested I hope you're

00:19:25,820 --> 00:19:30,260
interested and beside for a backup we

00:19:28,340 --> 00:19:32,930
also have the drive mirror block job

00:19:30,260 --> 00:19:35,330
which there's more or less the same but

00:19:32,930 --> 00:19:38,750
it's for another use for another use

00:19:35,330 --> 00:19:41,180
case because what it does is that it

00:19:38,750 --> 00:19:43,340
also copies data to another location but

00:19:41,180 --> 00:19:44,990
it does not copy the data as it was at

00:19:43,340 --> 00:19:46,910
the beginning of the backup but at the

00:19:44,990 --> 00:19:48,440
end of the backup which of course is

00:19:46,910 --> 00:19:51,740
essential for storage migration where

00:19:48,440 --> 00:19:53,900
you want to move some disk image to

00:19:51,740 --> 00:19:55,850
another host so you can use drive mirror

00:19:53,900 --> 00:19:56,419
to do that for you where you copy all

00:19:55,850 --> 00:19:58,639
the data to the

00:19:56,419 --> 00:20:01,190
new host and once the driver of block

00:19:58,639 --> 00:20:05,330
shop completes you can move over to the

00:20:01,190 --> 00:20:07,249
new host and abandon the old image in

00:20:05,330 --> 00:20:09,440
contrast to drive backup drive mirror

00:20:07,249 --> 00:20:11,419
also does not stall the guests on any

00:20:09,440 --> 00:20:13,519
guest requests but it may copy the same

00:20:11,419 --> 00:20:15,769
error repeatedly so if you have already

00:20:13,519 --> 00:20:17,450
if some data has already been been

00:20:15,769 --> 00:20:19,190
written to the target image and the

00:20:17,450 --> 00:20:22,519
guest writes to that area again of

00:20:19,190 --> 00:20:24,109
course you have to recopy that in this

00:20:22,519 --> 00:20:25,970
block job in contrast to drive backup

00:20:24,109 --> 00:20:27,619
actually has already faced and if you

00:20:25,970 --> 00:20:30,019
then issue the block type complete

00:20:27,619 --> 00:20:31,730
command then cube you does what it is

00:20:30,019 --> 00:20:34,309
supposed to do for storage migration

00:20:31,730 --> 00:20:36,499
which is it will pivot to the target

00:20:34,309 --> 00:20:38,749
that is it will abandon the old image

00:20:36,499 --> 00:20:41,419
and instead open the target image and

00:20:38,749 --> 00:20:42,859
attach that to the guest disk which is

00:20:41,419 --> 00:20:44,929
probably not what you want for a drive

00:20:42,859 --> 00:20:46,549
back for a backup in that case you

00:20:44,929 --> 00:20:48,919
probably want to run block job cancel

00:20:46,549 --> 00:20:50,899
which will then just leave the target

00:20:48,919 --> 00:20:55,429
image alone and leave it as a backup

00:20:50,899 --> 00:20:57,289
kind of the question whether you should

00:20:55,429 --> 00:20:59,359
be using drive mirror or drive backup is

00:20:57,289 --> 00:21:00,859
basically up to you it's kind of a

00:20:59,359 --> 00:21:02,960
matter of taste I personally would use

00:21:00,859 --> 00:21:04,549
Drive backup because the name implies

00:21:02,960 --> 00:21:06,379
that it's to be used for backups and

00:21:04,549 --> 00:21:08,330
also because Drive backup actually

00:21:06,379 --> 00:21:10,100
supports the incremental sync up sync

00:21:08,330 --> 00:21:11,960
mode which track mirror does not and

00:21:10,100 --> 00:21:13,730
this is not just the case of we don't

00:21:11,960 --> 00:21:15,019
want to have it for a camera but it's a

00:21:13,730 --> 00:21:19,009
case of it would be very hard to

00:21:15,019 --> 00:21:20,210
implement it so if you have a very if

00:21:19,009 --> 00:21:22,460
you have very good reason for using

00:21:20,210 --> 00:21:24,559
drive mirror go ahead use it lipfird us

00:21:22,460 --> 00:21:27,230
to as far as i'm aware if you want to

00:21:24,559 --> 00:21:30,559
use track backup go ahead so matter of

00:21:27,230 --> 00:21:32,629
taste there now when you've done a block

00:21:30,559 --> 00:21:34,970
when you've done it back up normally you

00:21:32,629 --> 00:21:36,649
have to do something with it - there are

00:21:34,970 --> 00:21:39,139
two things you can do with it the first

00:21:36,649 --> 00:21:42,320
thing is you can roll back to it that is

00:21:39,139 --> 00:21:44,269
your fresh a system or your hardware has

00:21:42,320 --> 00:21:48,220
failed and you now want to get the old

00:21:44,269 --> 00:21:50,629
data back so how can you do that for

00:21:48,220 --> 00:21:52,669
backups and external snapshots that

00:21:50,629 --> 00:21:54,710
means you switch off the virtual machine

00:21:52,669 --> 00:21:56,779
and then you just replace the active

00:21:54,710 --> 00:21:59,840
image which is attached to the virtual

00:21:56,779 --> 00:22:01,129
machine by the backup so just some file

00:21:59,840 --> 00:22:03,499
operations and that's it

00:22:01,129 --> 00:22:05,119
for internal snapshots you also have to

00:22:03,499 --> 00:22:08,149
first switch off the VM and then you can

00:22:05,119 --> 00:22:09,170
use the key mu mg tool to revert to an

00:22:08,149 --> 00:22:10,940
old snapshot

00:22:09,170 --> 00:22:12,590
now in both cases you have to switch off

00:22:10,940 --> 00:22:14,780
the VM first so as far as I'm aware

00:22:12,590 --> 00:22:17,030
there is no life operation to revert to

00:22:14,780 --> 00:22:18,920
an old snapshot to an old backup but

00:22:17,030 --> 00:22:20,930
that wouldn't make much sense anyway

00:22:18,920 --> 00:22:23,180
because reverting to an old snapshot

00:22:20,930 --> 00:22:24,650
means that you actively modify the data

00:22:23,180 --> 00:22:26,480
that the guest sees which is something

00:22:24,650 --> 00:22:31,640
you probably don't want to do while the

00:22:26,480 --> 00:22:33,740
guest is running anyway hopefully you

00:22:31,640 --> 00:22:36,260
don't have to roll back hopefully you

00:22:33,740 --> 00:22:37,880
just have to discard your backup which

00:22:36,260 --> 00:22:41,150
you have to do if you run out of disk

00:22:37,880 --> 00:22:43,070
space or a backing chain it's a chain of

00:22:41,150 --> 00:22:44,660
external snapshots if it gets very long

00:22:43,070 --> 00:22:47,840
then you get kind of a performance

00:22:44,660 --> 00:22:50,240
degradation because qm you may have to

00:22:47,840 --> 00:22:52,040
visit very very large number of images

00:22:50,240 --> 00:22:54,200
until it finds that image where the data

00:22:52,040 --> 00:22:55,310
is actually contained and so at some

00:22:54,200 --> 00:22:58,490
point in time you probably want to

00:22:55,310 --> 00:23:01,430
shorten that chain maybe because of

00:22:58,490 --> 00:23:03,110
performance maybe because of space so

00:23:01,430 --> 00:23:04,940
how can you do that for internal

00:23:03,110 --> 00:23:07,160
snapshots it's the most simplest one

00:23:04,940 --> 00:23:09,050
because we have the blocked of snapshot

00:23:07,160 --> 00:23:11,900
delete internal sync command which is

00:23:09,050 --> 00:23:14,450
instant incidentally the longest name of

00:23:11,900 --> 00:23:16,790
any qmp command that we have and it

00:23:14,450 --> 00:23:18,500
takes two parameters or more if you saw

00:23:16,790 --> 00:23:20,270
if you're so inclined first of which is

00:23:18,500 --> 00:23:21,980
the name of the block device again just

00:23:20,270 --> 00:23:24,200
like any other and the second of which

00:23:21,980 --> 00:23:27,070
is the name of the snapshot you want to

00:23:24,200 --> 00:23:30,020
delete and you just execute that and

00:23:27,070 --> 00:23:31,220
then we'll do that for you for external

00:23:30,020 --> 00:23:35,120
snapshots it's a bit more complicated

00:23:31,220 --> 00:23:37,370
because in the external snapshot case

00:23:35,120 --> 00:23:38,750
let's say you have this chain of

00:23:37,370 --> 00:23:41,000
snapshots in overlay and you want to

00:23:38,750 --> 00:23:43,100
drop these two images from the chain so

00:23:41,000 --> 00:23:44,750
of course these images contain some data

00:23:43,100 --> 00:23:46,340
that may be visible to the guest so you

00:23:44,750 --> 00:23:47,960
first have to copy that data somewhere

00:23:46,340 --> 00:23:50,870
else before you can delete these files

00:23:47,960 --> 00:23:52,640
and for that we have to block shots what

00:23:50,870 --> 00:23:54,880
you can do that first of which is the

00:23:52,640 --> 00:23:58,220
block stream block show up which will

00:23:54,880 --> 00:24:00,230
copy that data up the chain that is to

00:23:58,220 --> 00:24:04,880
go contained copy that to the topmost

00:24:00,230 --> 00:24:06,520
overlay and this block job takes a base

00:24:04,880 --> 00:24:09,740
argument with which you can specify

00:24:06,520 --> 00:24:11,930
which images you want to keep so if this

00:24:09,740 --> 00:24:14,060
image were you was your base image then

00:24:11,930 --> 00:24:17,960
only this image would be copied to the

00:24:14,060 --> 00:24:19,940
overlay file and after all the data has

00:24:17,960 --> 00:24:22,970
been copied then qmu will just drop

00:24:19,940 --> 00:24:24,830
these images from this snapshot chain

00:24:22,970 --> 00:24:27,520
and you can then manually delete the

00:24:24,830 --> 00:24:30,260
files because they're no longer in use

00:24:27,520 --> 00:24:34,340
this is the same text form if you want

00:24:30,260 --> 00:24:35,810
to read it at home and you can also copy

00:24:34,340 --> 00:24:37,570
the data in the other direction for

00:24:35,810 --> 00:24:40,190
which we have the block commit block job

00:24:37,570 --> 00:24:42,080
which does of course just copy the data

00:24:40,190 --> 00:24:44,690
the other direction but it also takes

00:24:42,080 --> 00:24:47,210
two parameters though and those are top

00:24:44,690 --> 00:24:49,070
and base so you can also specify the top

00:24:47,210 --> 00:24:51,440
image which you want to keep or which

00:24:49,070 --> 00:24:53,900
you don't want to keep anymore so if

00:24:51,440 --> 00:24:55,520
this image was your top image then only

00:24:53,900 --> 00:24:59,300
this image would be copied to the base

00:24:55,520 --> 00:25:00,680
image so the difference between block

00:24:59,300 --> 00:25:02,570
commit and block stream is basically

00:25:00,680 --> 00:25:04,160
that in the case of block commit what

00:25:02,570 --> 00:25:06,680
you're doing is you're updating an old

00:25:04,160 --> 00:25:08,540
snapshot whereas in the case of block

00:25:06,680 --> 00:25:11,870
stream you're updating in overlay so if

00:25:08,540 --> 00:25:12,890
you don't want to update a snapshot

00:25:11,870 --> 00:25:14,350
which may be reasonable because

00:25:12,890 --> 00:25:17,210
snapshots are supposed to be read-only

00:25:14,350 --> 00:25:21,380
then you can just use block stream in

00:25:17,210 --> 00:25:26,510
the other direction then same text form

00:25:21,380 --> 00:25:29,030
again and for backups it just kind of

00:25:26,510 --> 00:25:30,470
depends if you have a standalone back

00:25:29,030 --> 00:25:32,660
after this you just create all your

00:25:30,470 --> 00:25:33,890
backups using single post full then of

00:25:32,660 --> 00:25:36,440
course you can just delete the backup

00:25:33,890 --> 00:25:38,420
file if you don't need it anymore but if

00:25:36,440 --> 00:25:40,280
you're using incremental backups or any

00:25:38,420 --> 00:25:42,260
way where the backups depend on each

00:25:40,280 --> 00:25:45,350
other in a backing fire relationship

00:25:42,260 --> 00:25:47,060
then you have to use some tool to copy

00:25:45,350 --> 00:25:50,200
the data somewhere else such as you have

00:25:47,060 --> 00:25:52,310
to do in the external snapshot case and

00:25:50,200 --> 00:25:53,780
qmg commit can do that for you it

00:25:52,310 --> 00:25:56,000
actually just very same thing as the

00:25:53,780 --> 00:25:57,620
commit block job so that's what you can

00:25:56,000 --> 00:25:59,240
use that and after you've copied the

00:25:57,620 --> 00:26:04,550
data somewhere else you can then just

00:25:59,240 --> 00:26:06,610
delete the backup file now the question

00:26:04,550 --> 00:26:10,010
of course is which one should you use

00:26:06,610 --> 00:26:12,710
and the question is only easily answered

00:26:10,010 --> 00:26:15,290
for the snapshot versus backup case

00:26:12,710 --> 00:26:17,780
because you probably always want to do a

00:26:15,290 --> 00:26:20,000
snapshot if you can but there are many

00:26:17,780 --> 00:26:21,740
cases where you can if you need the data

00:26:20,000 --> 00:26:23,950
security of course you have to do a

00:26:21,740 --> 00:26:26,750
backup because you have to do a backup

00:26:23,950 --> 00:26:28,610
if for some reason you don't want to use

00:26:26,750 --> 00:26:31,220
Cukor two at all you have to do a full

00:26:28,610 --> 00:26:32,840
backup because you use and you need to

00:26:31,220 --> 00:26:35,700
use some format such as to go to with

00:26:32,840 --> 00:26:39,730
packing and its support for snapshots

00:26:35,700 --> 00:26:41,620
so that's impressive but the comparison

00:26:39,730 --> 00:26:44,470
between internal and external snapshots

00:26:41,620 --> 00:26:45,340
is more difficult it's as I said mostly

00:26:44,470 --> 00:26:47,200
a matter of taste

00:26:45,340 --> 00:26:49,660
if you've used internal snapshots all

00:26:47,200 --> 00:26:52,120
your life long then go ahead continue to

00:26:49,660 --> 00:26:53,590
use them if you like external snapshots

00:26:52,120 --> 00:26:55,900
more because you know them I don't know

00:26:53,590 --> 00:26:58,030
from the vert or stuff then just

00:26:55,900 --> 00:27:00,040
continue to use external snapshots there

00:26:58,030 --> 00:27:02,710
is a small difference in the speed in

00:27:00,040 --> 00:27:04,990
which the operations go so taking

00:27:02,710 --> 00:27:07,570
rolling back and discarding an internal

00:27:04,990 --> 00:27:09,490
snapshot always takes kind of a bit of

00:27:07,570 --> 00:27:11,740
time because you have to do some

00:27:09,490 --> 00:27:14,650
metadata updates in the queue go to file

00:27:11,740 --> 00:27:17,290
so it's not as quick as it could be but

00:27:14,650 --> 00:27:18,880
it's reasonably quick whereas for

00:27:17,290 --> 00:27:20,110
external snapshots taking them and

00:27:18,880 --> 00:27:22,210
rolling back to them is very quick

00:27:20,110 --> 00:27:25,570
because it just means creating a

00:27:22,210 --> 00:27:27,370
basically empty new file or moving a

00:27:25,570 --> 00:27:29,440
file or renaming a file or stuff like

00:27:27,370 --> 00:27:31,450
that but discarding an external snapshot

00:27:29,440 --> 00:27:33,160
takes a lot of time because as it's ever

00:27:31,450 --> 00:27:34,840
seen you have to use the block stream or

00:27:33,160 --> 00:27:35,560
block commit block chop to copy it

00:27:34,840 --> 00:27:38,140
somewhere else

00:27:35,560 --> 00:27:40,840
so if that makes a difference to you

00:27:38,140 --> 00:27:42,430
then this is a criterium on which you

00:27:40,840 --> 00:27:46,930
can decide whether to use internal or

00:27:42,430 --> 00:27:50,380
external snapshots now I hope I haven't

00:27:46,930 --> 00:27:53,460
bought you too much if I have you can

00:27:50,380 --> 00:27:53,460
now pay me back of course

00:27:55,770 --> 00:28:02,940
this isn't the question its remarked

00:28:00,080 --> 00:28:05,850
internal versus external snapshots may

00:28:02,940 --> 00:28:08,820
be a matter of taste but if you happen

00:28:05,850 --> 00:28:10,760
to have a taste for thoroughly tested

00:28:08,820 --> 00:28:14,190
code that is in heavy production use

00:28:10,760 --> 00:28:18,809
let's take two external actions that's

00:28:14,190 --> 00:28:20,760
right thank you I have two remarks and

00:28:18,809 --> 00:28:25,590
one question can you show previous slide

00:28:20,760 --> 00:28:29,070
please yes there is one thing but we

00:28:25,590 --> 00:28:31,770
should also take into account the amount

00:28:29,070 --> 00:28:32,490
of space we will need to perform that

00:28:31,770 --> 00:28:38,160
duration

00:28:32,490 --> 00:28:40,140
yeah so this for internal and external

00:28:38,160 --> 00:28:41,850
snapshot that's kind of the same because

00:28:40,140 --> 00:28:44,850
you always need to store all the new

00:28:41,850 --> 00:28:46,350
data you have written somewhere for a

00:28:44,850 --> 00:28:49,800
backup you need more data of course I

00:28:46,350 --> 00:28:52,740
think no for internal snapshot they do

00:28:49,800 --> 00:28:55,650
not space at all and for external

00:28:52,740 --> 00:28:58,350
snapshot this recurrent deployment ation

00:28:55,650 --> 00:29:00,720
will need additional space on this card

00:28:58,350 --> 00:29:02,700
because during this card you will have

00:29:00,720 --> 00:29:05,610
to have that right yes

00:29:02,700 --> 00:29:08,130
Spurs place equal to the Delta you are

00:29:05,610 --> 00:29:10,340
going to discard that's it yes that's

00:29:08,130 --> 00:29:10,340
right

00:29:10,460 --> 00:29:17,720
second side note is about internal

00:29:12,990 --> 00:29:20,940
snapshot you can use say VM to create

00:29:17,720 --> 00:29:24,179
internal snapshot with Ram so you will

00:29:20,940 --> 00:29:28,530
be able to get to the packet up state in

00:29:24,179 --> 00:29:32,670
Runyon state without a downtime and you

00:29:28,530 --> 00:29:36,690
will obtain the M is in exactly the wet

00:29:32,670 --> 00:29:41,100
state you have to form the backup and

00:29:36,690 --> 00:29:43,530
the question is if we are using backup

00:29:41,100 --> 00:29:46,050
we have a fundamental problem right now

00:29:43,530 --> 00:29:48,600
is recurrent implementation because we

00:29:46,050 --> 00:29:49,559
use synchronous native here to perform

00:29:48,600 --> 00:29:52,200
the operation

00:29:49,559 --> 00:29:55,080
the first right we did to backup and

00:29:52,200 --> 00:29:59,730
when the separation is completed without

00:29:55,080 --> 00:30:02,520
perform operation on the main disk if we

00:29:59,730 --> 00:30:05,130
perform the backup on the network

00:30:02,520 --> 00:30:08,580
storage for example like an FS the guest

00:30:05,130 --> 00:30:10,890
L stole and you if here in FS somehow

00:30:08,580 --> 00:30:13,019
we'll go down and that could be a

00:30:10,890 --> 00:30:18,779
problem yes that's when you you should

00:30:13,019 --> 00:30:20,880
use drive mirror because that would yeah

00:30:18,779 --> 00:30:22,980
I'm the speaking of dry mirrors a live

00:30:20,880 --> 00:30:26,399
bird uses dry mirror for its back of

00:30:22,980 --> 00:30:29,039
mechanism so oftentimes an IRC or on

00:30:26,399 --> 00:30:31,260
mailing list people ask you to the

00:30:29,039 --> 00:30:33,419
limitation of not able to restart a copy

00:30:31,260 --> 00:30:36,539
job while the guest is running

00:30:33,419 --> 00:30:39,210
deliberate does this hack of undefined a

00:30:36,539 --> 00:30:43,669
guest definition perform the copy job

00:30:39,210 --> 00:30:46,679
once it's finished you redefine it so

00:30:43,669 --> 00:30:55,559
how could this be solved and I've heard

00:30:46,679 --> 00:31:01,769
of lists as well as well okay unless

00:30:55,559 --> 00:31:03,809
that's all about persistence yeah this

00:31:01,769 --> 00:31:06,450
is a persistent dirty bitmaps would be a

00:31:03,809 --> 00:31:09,149
part of the incremental backup stuff

00:31:06,450 --> 00:31:11,610
which John talked extensively about in

00:31:09,149 --> 00:31:13,889
his last talk so it's still under

00:31:11,610 --> 00:31:15,210
development area void persistent dirty

00:31:13,889 --> 00:31:17,220
business are still completely under

00:31:15,210 --> 00:31:19,559
development so that is something we

00:31:17,220 --> 00:31:21,840
don't have yet and we'll hopefully have

00:31:19,559 --> 00:31:24,029
in the future so yeah of course you can

00:31:21,840 --> 00:31:29,309
use that to continue a backup after it's

00:31:24,029 --> 00:31:32,159
failed to two questions or two concerns

00:31:29,309 --> 00:31:38,279
actually with I've been using as a lot

00:31:32,159 --> 00:31:40,620
and one is when a disk goes full there's

00:31:38,279 --> 00:31:43,590
no notification back to the VM as far as

00:31:40,620 --> 00:31:46,620
I know I think there should be maybe

00:31:43,590 --> 00:31:50,970
normally you get a block job error event

00:31:46,620 --> 00:31:54,260
that the doctor has stopped and I mean

00:31:50,970 --> 00:31:57,899
if you just if you have a QM yeah

00:31:54,260 --> 00:32:02,549
instance running and host this console

00:31:57,899 --> 00:32:05,730
yeah yes you should there is a there is

00:32:02,549 --> 00:32:07,830
a block job error event so I don't know

00:32:05,730 --> 00:32:09,570
about the exact details but as far as

00:32:07,830 --> 00:32:11,159
I'm aware that should there is an event

00:32:09,570 --> 00:32:12,480
that you get and it should be a block up

00:32:11,159 --> 00:32:14,039
every event which tells you that there

00:32:12,480 --> 00:32:15,630
is no space left on the target device

00:32:14,039 --> 00:32:17,190
and you can configure whether you want

00:32:15,630 --> 00:32:19,049
to stop your block up in that case or

00:32:17,190 --> 00:32:20,440
whether you want to report an error just

00:32:19,049 --> 00:32:24,030
or don't want to do anything

00:32:20,440 --> 00:32:26,920
yeah okay and the second question is

00:32:24,030 --> 00:32:29,170
kind of concerned more I don't know if

00:32:26,920 --> 00:32:31,960
you have any thoughts made any thoughts

00:32:29,170 --> 00:32:34,300
around it and that is when you have an

00:32:31,960 --> 00:32:37,330
operating system that writes a lot of

00:32:34,300 --> 00:32:39,100
files and then removes them again or if

00:32:37,330 --> 00:32:40,720
you have meaning the guest the guest

00:32:39,100 --> 00:32:43,690
yeah the guest is running for a while

00:32:40,720 --> 00:32:46,930
and creates a lot of space and there's

00:32:43,690 --> 00:32:49,360
numerous ways you can zero out disks

00:32:46,930 --> 00:32:51,850
again and then there's kind of lots of

00:32:49,360 --> 00:32:54,550
work to get them trimmed down again once

00:32:51,850 --> 00:32:57,340
you use the snapshot mechanism if you

00:32:54,550 --> 00:33:01,150
use snapshots over time they will a lot

00:32:57,340 --> 00:33:02,410
of kind of data will accumulate yes so

00:33:01,150 --> 00:33:04,210
you mean every snapshot will have

00:33:02,410 --> 00:33:05,710
redundant data yeah

00:33:04,210 --> 00:33:08,140
and we have the queue you have the

00:33:05,710 --> 00:33:09,730
offline tool q mu mg which has a repeat

00:33:08,140 --> 00:33:12,520
a rebase command which you can use to

00:33:09,730 --> 00:33:15,010
trim snapshots down so you can just

00:33:12,520 --> 00:33:17,380
rebase it on the on its own backing file

00:33:15,010 --> 00:33:19,810
and then it will remove all that's all

00:33:17,380 --> 00:33:21,550
the craft but it's an offline tool so as

00:33:19,810 --> 00:33:23,650
far as I'm aware we don't have a online

00:33:21,550 --> 00:33:26,140
operation for that so there's no kind of

00:33:23,650 --> 00:33:29,410
bodies or whether or not it's possible

00:33:26,140 --> 00:33:31,420
to do something no but I think actually

00:33:29,410 --> 00:33:32,980
I've heard about the replace command

00:33:31,420 --> 00:33:34,870
only yesterday I think it would maybe

00:33:32,980 --> 00:33:39,330
actually be a good idea to have a rebase

00:33:34,870 --> 00:33:39,330
block job I think that would make sense

00:33:41,640 --> 00:33:44,640
yes

00:33:46,340 --> 00:33:49,830
yeah but it doesn't do anything if

00:33:48,480 --> 00:33:53,660
you've already taken a snapshot that

00:33:49,830 --> 00:33:53,660

YouTube URL: https://www.youtube.com/watch?v=Yo3fTh7L2tA


