Title: [2016] Lightning Talk: Analyzing libvirt cgroup CPU reservations by Gaurav Poothia
Publication date: 2016-09-07
Playlist: KVM Forum 2016
Description: 
	Short talk on using cgroup by libvirt.

Gaurav Poothia
Nutanix
Captions: 
	00:00:08,719 --> 00:00:16,830
so my name is Gaurav from mechanics we

00:00:14,700 --> 00:00:20,850
were playing with the getting high

00:00:16,830 --> 00:00:25,050
density VMS sorry hi vm density on a HP

00:00:20,850 --> 00:00:26,640
on kvm and we discovered some

00:00:25,050 --> 00:00:30,119
interesting things about how we can

00:00:26,640 --> 00:00:32,809
squeeze more out of the host by taking

00:00:30,119 --> 00:00:37,739
the way cgroups cpu reservation is done

00:00:32,809 --> 00:00:40,050
on kvm this is not to criticize this is

00:00:37,739 --> 00:00:41,700
just something to think about it's a

00:00:40,050 --> 00:00:43,980
combination of the way lipid sets of

00:00:41,700 --> 00:00:45,059
defaults and the way C Group group

00:00:43,980 --> 00:00:47,940
scheduling is done in the layoffs

00:00:45,059 --> 00:00:50,219
colonel so I just put forth some things

00:00:47,940 --> 00:00:53,039
that we observed and you could evaluate

00:00:50,219 --> 00:00:55,680
whether that helps you so just very

00:00:53,039 --> 00:00:58,770
briefly what a CPC groups it's basically

00:00:55,680 --> 00:01:01,260
you set up a hierarchy of scheduling

00:00:58,770 --> 00:01:03,539
entities and at the leaf nodes you

00:01:01,260 --> 00:01:05,970
assigned task IDs and because of these

00:01:03,539 --> 00:01:07,920
weights that you've provided the weights

00:01:05,970 --> 00:01:09,960
get partially filtered down and those

00:01:07,920 --> 00:01:12,570
are the reservations that are given to

00:01:09,960 --> 00:01:15,450
the tasks in the leaf nodes and how does

00:01:12,570 --> 00:01:16,920
it work in libvirt as most probably a

00:01:15,450 --> 00:01:19,860
lot of you are familiar and some of a

00:01:16,920 --> 00:01:22,560
coated a tap this is the default

00:01:19,860 --> 00:01:24,689
hierarchy right Sophie if you look at

00:01:22,560 --> 00:01:27,600
Hollywood sets it up by default it sets

00:01:24,689 --> 00:01:29,970
up a depth of three or four and then it

00:01:27,600 --> 00:01:32,220
sets up tasks for emulators and we CPU

00:01:29,970 --> 00:01:35,189
separately and it gives equal choice to

00:01:32,220 --> 00:01:37,500
everything now as just an artifact of

00:01:35,189 --> 00:01:39,119
the way CPU shares works the denominator

00:01:37,500 --> 00:01:41,430
is always changing right so if you add

00:01:39,119 --> 00:01:43,860
more VMs more of these nodes based in

00:01:41,430 --> 00:01:47,070
saturated and so you really can't do fix

00:01:43,860 --> 00:01:48,990
a absolute reservation for a vm so

00:01:47,070 --> 00:01:50,159
that's kind of unfortunate it's got

00:01:48,990 --> 00:01:52,290
nothing to deliberate it's just none

00:01:50,159 --> 00:01:55,860
fortunate to be a cpu shares works in

00:01:52,290 --> 00:01:58,110
the in the linux operating system and so

00:01:55,860 --> 00:02:00,570
what happens here is that if you do

00:01:58,110 --> 00:02:01,829
nothing which is if uses if you say if

00:02:00,570 --> 00:02:03,960
you have never looked at this part of

00:02:01,829 --> 00:02:05,939
your configuration this is relevant here

00:02:03,960 --> 00:02:10,830
because by default everything comes up

00:02:05,939 --> 00:02:13,020
with equal shares and so the VMS are all

00:02:10,830 --> 00:02:13,260
equally weighted irrespective of how

00:02:13,020 --> 00:02:15,269
many

00:02:13,260 --> 00:02:17,010
p CPUs they have something something to

00:02:15,269 --> 00:02:18,810
think about if you haven't ever thought

00:02:17,010 --> 00:02:20,220
about it right so that's probably not

00:02:18,810 --> 00:02:21,480
what you want that's probably not how to

00:02:20,220 --> 00:02:24,450
build a public cloud for example right

00:02:21,480 --> 00:02:26,189
you would give the ends of know v.v CPUs

00:02:24,450 --> 00:02:27,989
higher shares so that's something you

00:02:26,189 --> 00:02:30,690
want to keep in mind and there's also no

00:02:27,989 --> 00:02:33,000
way to reason about the VMS reservations

00:02:30,690 --> 00:02:34,170
against the non virtualization threads

00:02:33,000 --> 00:02:36,060
which are not in this picture because

00:02:34,170 --> 00:02:37,709
those end up in the root and their

00:02:36,060 --> 00:02:40,200
weights that's an interior node of the

00:02:37,709 --> 00:02:42,239
other tree and the way interior nodes

00:02:40,200 --> 00:02:44,489
are weighted is through nice levels so

00:02:42,239 --> 00:02:46,099
it's it's very hard to reason about what

00:02:44,489 --> 00:02:48,329
really is going on between

00:02:46,099 --> 00:02:49,620
virtualization threads were seen on

00:02:48,329 --> 00:02:51,510
virtualization threats so again

00:02:49,620 --> 00:02:53,879
something to you want to think through

00:02:51,510 --> 00:02:56,519
if you don't have if this gives you a

00:02:53,879 --> 00:02:59,370
picture about how intra vm shares a

00:02:56,519 --> 00:03:02,190
setup but not vm verse vegetation with

00:02:59,370 --> 00:03:05,549
sonam virtualization and so the key

00:03:02,190 --> 00:03:07,560
takeaway is that implementing the way

00:03:05,549 --> 00:03:09,599
the layoffs scheduler does cpu see

00:03:07,560 --> 00:03:12,329
groups and not this picture in general

00:03:09,599 --> 00:03:14,639
is it has to run the CFS schedule has to

00:03:12,329 --> 00:03:17,430
pick a scheduling entity at every level

00:03:14,639 --> 00:03:19,590
of the tree so the D by a tree the more

00:03:17,430 --> 00:03:21,480
work the schedule has to do and so that

00:03:19,590 --> 00:03:23,190
means that there is some serious

00:03:21,480 --> 00:03:25,680
overhead if you are interested in

00:03:23,190 --> 00:03:28,139
pushing a lot of packing a lot of VMs so

00:03:25,680 --> 00:03:29,819
just the final thought is when if you

00:03:28,139 --> 00:03:31,109
flatten this hierarchy you might get

00:03:29,819 --> 00:03:35,329
twenty or thirty percent more vm density

00:03:31,109 --> 00:03:38,849
and that may not be practical for you

00:03:35,329 --> 00:03:41,250
for us that extent extreme end of the

00:03:38,849 --> 00:03:42,870
spectrum was not practical because we

00:03:41,250 --> 00:03:44,730
have a special vm that we need

00:03:42,870 --> 00:03:46,889
reservations for but we simplify this

00:03:44,730 --> 00:03:49,349
hierarchy to get but you know a big

00:03:46,889 --> 00:03:50,790
boost nonetheless so just something you

00:03:49,349 --> 00:03:55,970
want to look at the configuration and

00:03:50,790 --> 00:03:55,970
see if it can help you Thanks

00:03:59,170 --> 00:04:01,230

YouTube URL: https://www.youtube.com/watch?v=isYf-TwNtnY


