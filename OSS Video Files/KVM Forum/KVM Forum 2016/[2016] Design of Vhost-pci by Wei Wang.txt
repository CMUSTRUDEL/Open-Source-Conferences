Title: [2016] Design of Vhost-pci by Wei Wang
Publication date: 2016-09-13
Playlist: KVM Forum 2016
Description: 
	Current vhost-user based backend designs for virtio-net devices present scaling challenges, as communication intensive applications (e.g. virtual network functions) running in VMs start to stress this centralized design and resources assigned to it. vhost-pci offers a protected and point-to-point based inter-VM communication mechanism and we present a comprehensive design of vhost-pci in this talk. A VM with a vhost-pci device is able to copy data to another VM’s memory directly. The vhost-pci design is further extended to support communicating to multiple VM destinations.
The vhost-pci based inter-VM communication framework consists of a vhost-pci device, its driver, and an extension to the vhost-user/DPDK to set up the path between VMs. Initial results demonstrate desired scaling advantages due to vhost-pci’s decentralized approach to inter-VM communication.


Wei Wang
Virtualization Software Developer, Intel

Wei is currently a virtualization software developer at Intel. He earned a Master degree from the University of Ottawa, Canada, and he was a research assistant there working on hardware/software co-design solutions to virtualize FPGA accelerators.

Slides: http://www.linux-kvm.org/images/5/55/02x07A-Wei_Wang-Design_of-Vhost-pci.pdf
Captions: 
	00:00:12,320 --> 00:00:17,460
and I'm based in Shanghai so like a

00:00:15,900 --> 00:00:20,760
foreigner Shanghai is the biggest city

00:00:17,460 --> 00:00:22,199
and its advanced in many areas but there

00:00:20,760 --> 00:00:24,660
is the one thing I wanted to complain

00:00:22,199 --> 00:00:27,150
about Shanghai it slaughter the crazy

00:00:24,660 --> 00:00:29,429
house price today there but the better

00:00:27,150 --> 00:00:31,890
traffic especially in the morning or

00:00:29,429 --> 00:00:34,230
weekdays cars fastest and the trucks

00:00:31,890 --> 00:00:36,540
from different corners centralized on

00:00:34,230 --> 00:00:38,910
the main road which gives rise to a

00:00:36,540 --> 00:00:41,850
bumper-to-bumper traffic the throughput

00:00:38,910 --> 00:00:44,700
and latency of such a centralized air

00:00:41,850 --> 00:00:46,770
traffic are horribly bad like some of my

00:00:44,700 --> 00:00:48,600
co-workers even spend like four hours

00:00:46,770 --> 00:00:51,480
per day on the road it's incredible

00:00:48,600 --> 00:00:54,149
right so what is interesting here is

00:00:51,480 --> 00:00:57,510
that we find a similar problem with

00:00:54,149 --> 00:00:58,980
today's level traffic between VMs so

00:00:57,510 --> 00:01:00,600
that's basically the reason I'm

00:00:58,980 --> 00:01:03,750
presenting this because the piece I

00:01:00,600 --> 00:01:07,049
design so in the design of vehicles the

00:01:03,750 --> 00:01:09,750
PCI device is a is a live at i/o device

00:01:07,049 --> 00:01:13,619
and it enables appointed pointer interim

00:01:09,750 --> 00:01:18,420
communication which eliminates start to

00:01:13,619 --> 00:01:20,509
centralize the traffic so let's first

00:01:18,420 --> 00:01:26,490
have a look at the agenda of today's

00:01:20,509 --> 00:01:29,189
presentation so pata why is the part of

00:01:26,490 --> 00:01:31,650
the usage and the motivation network of

00:01:29,189 --> 00:01:33,840
function virtualization every is a use

00:01:31,650 --> 00:01:36,720
case which relies on a high performance

00:01:33,840 --> 00:01:39,780
in the VM communication scheme so in

00:01:36,720 --> 00:01:41,909
this part our our introduced wide the

00:01:39,780 --> 00:01:45,509
existing solution is not suitable for

00:01:41,909 --> 00:01:47,909
every case and how we host the PCI

00:01:45,509 --> 00:01:51,720
improves it and I will show some results

00:01:47,909 --> 00:01:54,360
our of our POC work and the importer to

00:01:51,720 --> 00:01:56,280
I will introduce the details of the

00:01:54,360 --> 00:01:59,189
design this is actually the theme of

00:01:56,280 --> 00:02:03,950
this presentation so in part 3 I will

00:01:59,189 --> 00:02:03,950
summarize the current status of our work

00:02:04,340 --> 00:02:09,149
so starting from part one that's the

00:02:07,020 --> 00:02:11,430
first I have a local water and Lee is

00:02:09,149 --> 00:02:14,310
just in case some of you may be a lot of

00:02:11,430 --> 00:02:16,680
knowing this concept so basically every

00:02:14,310 --> 00:02:19,829
is about the transformation of network

00:02:16,680 --> 00:02:22,909
appliances the network appliance today

00:02:19,829 --> 00:02:25,620
is a lateral function implemented in

00:02:22,909 --> 00:02:28,859
implants implemented by using hardware

00:02:25,620 --> 00:02:31,739
so what the people want is to transform

00:02:28,859 --> 00:02:33,780
each of those Hardware based Network a

00:02:31,739 --> 00:02:36,420
function to stop to I implemented a

00:02:33,780 --> 00:02:41,090
virtual network of virtual network of

00:02:36,420 --> 00:02:46,769
function v NF v NF basically runs on a

00:02:41,090 --> 00:02:48,629
VM so this transformation relies on high

00:02:46,769 --> 00:02:54,120
performance interval communication

00:02:48,629 --> 00:02:55,950
scheme so here I got a figure from ETSI

00:02:54,120 --> 00:02:59,159
from the architectural firm were

00:02:55,950 --> 00:03:03,450
completed by ETSI so what this figure in

00:02:59,159 --> 00:03:07,230
the streets is v NF warden graph so to

00:03:03,450 --> 00:03:10,799
be more precise the package here of the

00:03:07,230 --> 00:03:14,099
package first reached VF 1 and then

00:03:10,799 --> 00:03:17,250
after some processing they are for what

00:03:14,099 --> 00:03:19,650
is that UV f28 and then we are either

00:03:17,250 --> 00:03:22,379
for what you that you have to be or to

00:03:19,650 --> 00:03:25,290
see and finally in the ridge of the f3

00:03:22,379 --> 00:03:29,459
those of the MS work together to provide

00:03:25,290 --> 00:03:32,689
a service so here it actually has two

00:03:29,459 --> 00:03:35,370
data flows and those two data flows

00:03:32,689 --> 00:03:39,479
generates generate very free from the

00:03:35,370 --> 00:03:41,699
intra vm complication so clear i'll show

00:03:39,479 --> 00:03:45,139
you how we can use vhosts the p-side you

00:03:41,699 --> 00:03:49,079
to set how this this through data flow

00:03:45,139 --> 00:03:51,629
so here we f1 is equipped with a V host

00:03:49,079 --> 00:03:54,780
of PCI device and if the communicates

00:03:51,629 --> 00:03:57,659
directly to the what whole data device

00:03:54,780 --> 00:04:01,590
of VN f28 to the packets go like this

00:03:57,659 --> 00:04:04,739
and in we are fqa it had to be host the

00:04:01,590 --> 00:04:06,479
PCI devices so the package can be

00:04:04,739 --> 00:04:10,889
directly for what is that you either

00:04:06,479 --> 00:04:14,400
this harlot won't go through this motor

00:04:10,889 --> 00:04:19,500
net and then finally though the packets

00:04:14,400 --> 00:04:23,000
are 40 the truth a f3 so here we have

00:04:19,500 --> 00:04:23,000
the true data flows here

00:04:23,300 --> 00:04:28,590
now I think it's time to introduce why

00:04:26,160 --> 00:04:30,330
the existing solution is not suitable

00:04:28,590 --> 00:04:34,650
for saturation the interview

00:04:30,330 --> 00:04:38,550
communication so here in this example we

00:04:34,650 --> 00:04:42,720
have four VMs connected into one central

00:04:38,550 --> 00:04:46,020
this switch so each of them is encrypted

00:04:42,720 --> 00:04:48,450
with legacy what how later device and

00:04:46,020 --> 00:04:51,540
this letter letter device is backed by

00:04:48,450 --> 00:04:53,430
our traditionally hosts the user back

00:04:51,540 --> 00:04:57,450
hand implemented in the V switcher

00:04:53,430 --> 00:04:59,760
traverse such as DP DP the code path of

00:04:57,450 --> 00:05:01,920
transmitting a packet is long here

00:04:59,760 --> 00:05:04,800
because the packet has to reach the

00:05:01,920 --> 00:05:06,930
central V switch first and then the

00:05:04,800 --> 00:05:08,330
central the switchdriver copies the pack

00:05:06,930 --> 00:05:10,890
to its destination

00:05:08,330 --> 00:05:13,230
so the implementation is a little

00:05:10,890 --> 00:05:15,720
different but if we animate the process

00:05:13,230 --> 00:05:17,880
that all the lamps transmit the packets

00:05:15,720 --> 00:05:24,240
through their destination it will be

00:05:17,880 --> 00:05:26,580
like this so here are a bumper to bumper

00:05:24,240 --> 00:05:29,640
traffic shows up in the central base

00:05:26,580 --> 00:05:31,710
switch and those packets needed to be

00:05:29,640 --> 00:05:34,280
popular to their to their destination

00:05:31,710 --> 00:05:34,280
one by one

00:05:38,710 --> 00:05:44,480
so this is actually a lot of scalable

00:05:41,690 --> 00:05:47,360
because if we have more VMS connecting

00:05:44,480 --> 00:05:50,030
to this central switch so here become a

00:05:47,360 --> 00:05:51,830
bottleneck and the throughput the we are

00:05:50,030 --> 00:05:55,520
chopped significant Catanese I will show

00:05:51,830 --> 00:05:58,280
you the results in later slides so here

00:05:55,520 --> 00:06:01,700
it shows how how this is improved by the

00:05:58,280 --> 00:06:04,520
we host the PCI device so you see the

00:06:01,700 --> 00:06:07,580
central switch now is distributed at you

00:06:04,520 --> 00:06:09,950
each VM since this presentation mainly

00:06:07,580 --> 00:06:11,600
focuses on the on the velocities are

00:06:09,950 --> 00:06:14,120
designed with which is the part of the

00:06:11,600 --> 00:06:15,860
transport layer did I so yeah I'm not

00:06:14,120 --> 00:06:18,440
going to talk about the switching

00:06:15,860 --> 00:06:21,050
technologies here the key point here is

00:06:18,440 --> 00:06:23,600
that each VM is equipped with a width of

00:06:21,050 --> 00:06:26,690
the host PCI device and this device

00:06:23,600 --> 00:06:29,660
enables a director copy of packets from

00:06:26,690 --> 00:06:32,600
the source to the destination so if we

00:06:29,660 --> 00:06:34,550
animated the same process here all the

00:06:32,600 --> 00:06:37,550
process all the packets are transferred

00:06:34,550 --> 00:06:41,540
to their destination at once so this one

00:06:37,550 --> 00:06:43,850
has the better scalability so we've

00:06:41,540 --> 00:06:48,730
basically down or purely walk to compare

00:06:43,850 --> 00:06:52,370
the two solutions and we we we use a

00:06:48,730 --> 00:06:55,790
benchmarking method from opf week or the

00:06:52,370 --> 00:06:57,500
worst worst proof and I've posted all

00:06:55,790 --> 00:07:01,220
the testing environment here but a lot

00:06:57,500 --> 00:07:03,380
of image into details the key point here

00:07:01,220 --> 00:07:03,890
is that we wanted to change two to five

00:07:03,380 --> 00:07:08,060
Williams

00:07:03,890 --> 00:07:10,130
so in the traditional way we chain the

00:07:08,060 --> 00:07:12,440
five million VMs through this central

00:07:10,130 --> 00:07:14,510
message and the packets go to the

00:07:12,440 --> 00:07:16,370
central via switch we should direct the

00:07:14,510 --> 00:07:19,280
package through that second of the M and

00:07:16,370 --> 00:07:22,310
the N and so the packets go all the way

00:07:19,280 --> 00:07:25,310
down to the fifth VM so in the way host

00:07:22,310 --> 00:07:27,800
the PCI device is the chain like in this

00:07:25,310 --> 00:07:29,690
way so the packets go to the host

00:07:27,800 --> 00:07:31,930
efficient device which a directory

00:07:29,690 --> 00:07:34,610
pass the packet through the m2 and

00:07:31,930 --> 00:07:39,410
finally the packets are transported to

00:07:34,610 --> 00:07:42,410
the last of em vm v so here we can see

00:07:39,410 --> 00:07:44,800
the results in the we host the user case

00:07:42,410 --> 00:07:47,570
where we have four VMs chained together

00:07:44,800 --> 00:07:51,770
the throughput the job significantly

00:07:47,570 --> 00:07:54,889
it's almost like a 40 or 42 percentage

00:07:51,770 --> 00:07:57,590
here so butter in the we host the P side

00:07:54,889 --> 00:08:04,789
is there is no status significant the

00:07:57,590 --> 00:08:06,919
performance job here okay here comes to

00:08:04,789 --> 00:08:10,220
the most exciting part the designed

00:08:06,919 --> 00:08:12,590
repairs so by far I've talked a lot

00:08:10,220 --> 00:08:14,840
about because the PCI for networking use

00:08:12,590 --> 00:08:18,349
it is but I wanted to mention here is

00:08:14,840 --> 00:08:21,490
that this did I is not an image that you

00:08:18,349 --> 00:08:24,080
networking usages we basically wanted to

00:08:21,490 --> 00:08:26,590
enable we host the P site you support

00:08:24,080 --> 00:08:29,479
order front end about how devices like

00:08:26,590 --> 00:08:31,390
what I was Cassie but how a console with

00:08:29,479 --> 00:08:33,890
her blog and so on

00:08:31,390 --> 00:08:36,320
so let's start from our high-level

00:08:33,890 --> 00:08:40,070
overview of this we host the peace ideal

00:08:36,320 --> 00:08:43,490
design so here we have one key new gets

00:08:40,070 --> 00:08:46,370
booted and what's special here is that

00:08:43,490 --> 00:08:49,459
this Q quiz of the hosts the P side

00:08:46,370 --> 00:08:51,920
server and this server is implemented

00:08:49,459 --> 00:08:55,399
are using tree in your socket so it's

00:08:51,920 --> 00:08:57,880
oculus it's a socket a server and this

00:08:55,399 --> 00:09:01,250
server manages will host the PCI devices

00:08:57,880 --> 00:09:05,480
like a device creation hot blood and

00:09:01,250 --> 00:09:07,550
destruction yeah we have a stagnant

00:09:05,480 --> 00:09:11,959
Camille gets booted what's special here

00:09:07,550 --> 00:09:15,050
is this this premium Chris a front end

00:09:11,959 --> 00:09:17,920
about how later device and the front app

00:09:15,050 --> 00:09:21,050
and the net advice is associated with a

00:09:17,920 --> 00:09:24,320
client a client socket which is also

00:09:21,050 --> 00:09:27,140
implemented a using Kumi socket so this

00:09:24,320 --> 00:09:29,570
client socket connects to the server and

00:09:27,140 --> 00:09:32,390
the leak communicate to each other why

00:09:29,570 --> 00:09:35,450
we host the piece a protocol then the

00:09:32,390 --> 00:09:38,690
server Chris Alou of do we host the

00:09:35,450 --> 00:09:41,270
piece I device and hot glocks this

00:09:38,690 --> 00:09:46,310
device to the VM and initialize the

00:09:41,270 --> 00:09:48,500
because the PCI driver so here we have

00:09:46,310 --> 00:09:51,440
stack in the cream you get booted

00:09:48,500 --> 00:09:53,750
so the difference here is that this

00:09:51,440 --> 00:09:57,350
creamy Prius is three but higher devices

00:09:53,750 --> 00:09:58,730
of different device types like the word

00:09:57,350 --> 00:10:01,399
house car see net

00:09:58,730 --> 00:10:04,130
block and each of those front-end the

00:10:01,399 --> 00:10:05,130
device creates a client and all the

00:10:04,130 --> 00:10:07,830
clients call

00:10:05,130 --> 00:10:09,420
acta to the server and they talk to the

00:10:07,830 --> 00:10:12,720
server wider because if you send

00:10:09,420 --> 00:10:15,180
protocol as well so the what is the

00:10:12,720 --> 00:10:18,690
server does is to create a you will host

00:10:15,180 --> 00:10:20,460
the PCI device device to and hot-plug

00:10:18,690 --> 00:10:22,580
this device through the VM and

00:10:20,460 --> 00:10:26,160
initialized to the ready to the driver

00:10:22,580 --> 00:10:28,320
so we can see from this figure data the

00:10:26,160 --> 00:10:32,430
we host the pieces over quits because

00:10:28,320 --> 00:10:35,160
the PCI device for each VM and all and

00:10:32,430 --> 00:10:36,810
all the front-end the devices from the

00:10:35,160 --> 00:10:40,740
thing we am we are share the same

00:10:36,810 --> 00:10:43,800
because the PCI device so I picked out

00:10:40,740 --> 00:10:45,690
all those components which are looted

00:10:43,800 --> 00:10:48,030
through the current regime you and I

00:10:45,690 --> 00:10:51,380
will talk to them one by one in the

00:10:48,030 --> 00:10:54,180
later slides and the remaining parts

00:10:51,380 --> 00:10:57,060
like what how later

00:10:54,180 --> 00:10:59,070
what how later driver and all this will

00:10:57,060 --> 00:11:03,690
have what higher drivers remain

00:10:59,070 --> 00:11:05,880
unchanged so let's start from the hosts

00:11:03,690 --> 00:11:08,700
the pieces over which plays a hero in

00:11:05,880 --> 00:11:11,640
the whole design so to use of your host

00:11:08,700 --> 00:11:14,790
PC app is the inter VM communication so

00:11:11,640 --> 00:11:18,300
ok VM screaming is to crater of the host

00:11:14,790 --> 00:11:20,400
official server using these comments so

00:11:18,300 --> 00:11:23,370
the relevance here are the new your

00:11:20,400 --> 00:11:25,800
comments I'm going to patch the corn the

00:11:23,370 --> 00:11:29,490
cream you like the connections here we

00:11:25,800 --> 00:11:32,460
just specifies how many clients can

00:11:29,490 --> 00:11:36,180
connect to this server so in currently

00:11:32,460 --> 00:11:38,700
puny implementation it only supports one

00:11:36,180 --> 00:11:41,880
server to be connected by one client

00:11:38,700 --> 00:11:45,510
only so here I wanted you other the

00:11:41,880 --> 00:11:49,160
support to make the like one server to

00:11:45,510 --> 00:11:53,850
be connected by multiple clients

00:11:49,160 --> 00:11:56,640
next is the vehicles to PCI client so to

00:11:53,850 --> 00:11:59,340
use vhosts the PCI device or another VM

00:11:56,640 --> 00:12:00,960
or the backhand so the originating was

00:11:59,340 --> 00:12:03,960
how device that is the front-end

00:12:00,960 --> 00:12:06,870
supplies a shooter supply of a host of

00:12:03,960 --> 00:12:09,300
is a client and it connects to the front

00:12:06,870 --> 00:12:12,870
and the server so here are the command

00:12:09,300 --> 00:12:15,990
example to create this client this one

00:12:12,870 --> 00:12:17,580
is due here and the client communicates

00:12:15,990 --> 00:12:18,030
to the server while the we host the

00:12:17,580 --> 00:12:19,920
pizza

00:12:18,030 --> 00:12:24,390
protocol to set half of the interview

00:12:19,920 --> 00:12:26,280
communication channel so here's

00:12:24,390 --> 00:12:28,980
something about the we host the PCM

00:12:26,280 --> 00:12:32,610
protocol so basically this protocol

00:12:28,980 --> 00:12:35,430
consists of two message types one is the

00:12:32,610 --> 00:12:38,790
socket a message which is used between

00:12:35,430 --> 00:12:41,250
the client socket and the silver sake so

00:12:38,790 --> 00:12:44,010
and another one is the contribute

00:12:41,250 --> 00:12:46,800
message this one is used to between the

00:12:44,010 --> 00:12:50,340
we host the PCI device and the via host

00:12:46,800 --> 00:12:52,490
PC driver so whenever there is whenever

00:12:50,340 --> 00:12:55,920
the climate has made a message to the

00:12:52,490 --> 00:12:58,680
user server if we are sending pockets

00:12:55,920 --> 00:13:01,950
from the device to the driver so if it's

00:12:58,680 --> 00:13:04,320
stand up for this contribute regarding

00:13:01,950 --> 00:13:07,950
the protocol message I've listed the

00:13:04,320 --> 00:13:11,430
main contents here the first one is the

00:13:07,950 --> 00:13:15,090
host PC I get a new ID so your ID is

00:13:11,430 --> 00:13:17,220
used to identify a front-end VM now get

00:13:15,090 --> 00:13:19,290
in the previous case of VM Chris is

00:13:17,220 --> 00:13:21,360
three front and the devices when the

00:13:19,290 --> 00:13:25,140
communicator to the server the new your

00:13:21,360 --> 00:13:28,020
ID we are remain the same and the second

00:13:25,140 --> 00:13:31,140
one is memory info this memory for is

00:13:28,020 --> 00:13:34,620
basically transfer the by the trying to

00:13:31,140 --> 00:13:37,500
the to the server now the server the

00:13:34,620 --> 00:13:39,420
device use this memory foam to map with

00:13:37,500 --> 00:13:43,710
the entire memory of the front-end the

00:13:39,420 --> 00:13:46,110
VM so that this was the PCI driver can

00:13:43,710 --> 00:13:49,260
access any memory that belongs to the

00:13:46,110 --> 00:13:52,560
front-end now sort of why is about that

00:13:49,260 --> 00:13:53,970
device info it's also transmitted by the

00:13:52,560 --> 00:13:56,730
client to the server

00:13:53,970 --> 00:13:59,460
so this info includes things like a

00:13:56,730 --> 00:14:01,680
device type which specifies if this is

00:13:59,460 --> 00:14:04,710
the vertical at front-end or without

00:14:01,680 --> 00:14:07,170
blog without console and so on and it

00:14:04,710 --> 00:14:09,000
also contains two leaving address so

00:14:07,170 --> 00:14:11,220
that is the front-end can copy the

00:14:09,000 --> 00:14:14,940
package to the correct place by

00:14:11,220 --> 00:14:18,390
accessing the VV and the last one is the

00:14:14,940 --> 00:14:21,720
future bits like other funny and what

00:14:18,390 --> 00:14:23,430
how devices have future bits and the ID

00:14:21,720 --> 00:14:26,940
that should be transmitted at you the

00:14:23,430 --> 00:14:29,610
truth a video tribute negotiated with

00:14:26,940 --> 00:14:31,770
the backend we host a piece a device so

00:14:29,610 --> 00:14:34,140
that we host a piece our driver

00:14:31,770 --> 00:14:41,400
can behave correctly by either copy

00:14:34,140 --> 00:14:43,500
packets through the front end so here

00:14:41,400 --> 00:14:46,050
shows the how of vehicles the PCI device

00:14:43,500 --> 00:14:49,140
is a creative so first of those silver

00:14:46,050 --> 00:14:50,850
Chris Pizza device instance which is

00:14:49,140 --> 00:14:54,150
like all the device structure and

00:14:50,850 --> 00:14:56,400
occasion initialization things and then

00:14:54,150 --> 00:14:58,080
it is set up in the memory basically in

00:14:56,400 --> 00:15:01,680
the premium apps the memory from the

00:14:58,080 --> 00:15:04,200
front end and according to the size of

00:15:01,680 --> 00:15:06,270
the front end it'll be are reserved like

00:15:04,200 --> 00:15:09,000
double size of the memory size data

00:15:06,270 --> 00:15:11,550
received from the front end for example

00:15:09,000 --> 00:15:14,880
the front end the sizes and then the

00:15:11,550 --> 00:15:17,970
memory region size will be 2 n so the

00:15:14,880 --> 00:15:23,340
remaining part is reserved the full

00:15:17,970 --> 00:15:25,140
memory hot block and then this memory

00:15:23,340 --> 00:15:28,620
region is a roughly stitch with a VM

00:15:25,140 --> 00:15:33,870
vial bar and funnily the device is a hot

00:15:28,620 --> 00:15:36,390
plug to choose a VM okay here comes to

00:15:33,870 --> 00:15:38,370
the V host efficient rubber so you may

00:15:36,390 --> 00:15:40,260
be curious about the how a single

00:15:38,370 --> 00:15:43,920
because the PCI can support there's so

00:15:40,260 --> 00:15:47,070
many kinds of front-end devices the

00:15:43,920 --> 00:15:49,500
secret is here so the driver contains

00:15:47,070 --> 00:15:52,080
multiple functionalities just a lighter

00:15:49,500 --> 00:15:54,300
or transformer data you see that you saw

00:15:52,080 --> 00:15:57,180
in a science-fiction movie which has a

00:15:54,300 --> 00:15:59,780
lot of functionalities so here we have

00:15:57,180 --> 00:16:02,490
all the backend of functionalities

00:15:59,780 --> 00:16:05,790
contained in a single we host a piece a

00:16:02,490 --> 00:16:07,920
driver like the we host the pizza that

00:16:05,790 --> 00:16:11,070
corresponds to the front-end what how

00:16:07,920 --> 00:16:12,690
loud the velocipedes gauzy corresponds

00:16:11,070 --> 00:16:16,020
to the front end of a boat higher

00:16:12,690 --> 00:16:18,450
viscosity and so on so if we think more

00:16:16,020 --> 00:16:20,580
body it's actually more sophisticated or

00:16:18,450 --> 00:16:23,550
than a transformer data you saw in the

00:16:20,580 --> 00:16:26,100
movie because as far as us as far as

00:16:23,550 --> 00:16:28,560
your transformer can only transform to

00:16:26,100 --> 00:16:31,380
use the one of its functionalities at a

00:16:28,560 --> 00:16:33,240
time but here all the backend of

00:16:31,380 --> 00:16:36,180
functionalities can function and at the

00:16:33,240 --> 00:16:40,850
same time as long as this VM has elapsed

00:16:36,180 --> 00:16:44,040
CPU resources so to be more precise the

00:16:40,850 --> 00:16:45,150
the data the lead functionality is the

00:16:44,040 --> 00:16:47,040
gauzy functionality

00:16:45,150 --> 00:16:48,570
and the blog functionality can copy

00:16:47,040 --> 00:16:51,900
packets through the friend and the

00:16:48,570 --> 00:16:55,050
devices at the same time if we look at

00:16:51,900 --> 00:16:58,320
into the code a little bit so we will

00:16:55,050 --> 00:17:01,830
have an array of because the PCI device

00:16:58,320 --> 00:17:04,980
and this structure includes the three

00:17:01,830 --> 00:17:06,030
fuse and the first one specifies the

00:17:04,980 --> 00:17:09,210
type is that

00:17:06,030 --> 00:17:12,260
Scotty block and at all and the device

00:17:09,210 --> 00:17:14,790
ID is used that you identify the device

00:17:12,260 --> 00:17:17,339
for example if for the front end device

00:17:14,790 --> 00:17:19,050
is a letter device then this device ID

00:17:17,339 --> 00:17:23,790
can be used that you store the MAC

00:17:19,050 --> 00:17:26,850
address and finally is a pointer home to

00:17:23,790 --> 00:17:30,480
the device specific of structural like

00:17:26,850 --> 00:17:34,530
if it's a letter device it will point to

00:17:30,480 --> 00:17:36,930
a letter TAV structure and in the

00:17:34,530 --> 00:17:38,760
initialization code either we are in it

00:17:36,930 --> 00:17:40,410
it will create a letter TAV to the

00:17:38,760 --> 00:17:43,110
corners so that other corner lateral the

00:17:40,410 --> 00:17:45,210
stack candles air isn't you allude as a

00:17:43,110 --> 00:17:52,530
deaf device so that it can use it to

00:17:45,210 --> 00:17:54,840
transmit a package so here I'm going to

00:17:52,530 --> 00:17:57,480
talk about how the backhander

00:17:54,840 --> 00:17:59,490
functionality is a designed so I will

00:17:57,480 --> 00:18:03,450
use the host epistle letter as a example

00:17:59,490 --> 00:18:05,910
here so in this example the front end

00:18:03,450 --> 00:18:10,950
driver but how lap driver has a pair of

00:18:05,910 --> 00:18:13,950
the a pair of earrings a txt and r3 so

00:18:10,950 --> 00:18:17,550
for to this is used that you transmit

00:18:13,950 --> 00:18:19,890
and receive packets and what we are

00:18:17,550 --> 00:18:23,460
doing in the backend functionality here

00:18:19,890 --> 00:18:26,130
is to be read when I see me read I mean

00:18:23,460 --> 00:18:30,530
we share the the view into the backend

00:18:26,130 --> 00:18:35,280
and then now we crisscross the leavings

00:18:30,530 --> 00:18:37,260
so like that the arcs way in the front

00:18:35,280 --> 00:18:39,120
end will be the check swing in the back

00:18:37,260 --> 00:18:41,880
hand and the check three in the front

00:18:39,120 --> 00:18:45,960
end will be the arcs way in the back

00:18:41,880 --> 00:18:48,720
hand and this this back hand

00:18:45,960 --> 00:18:51,510
functionality is responsible for copying

00:18:48,720 --> 00:18:54,440
packets in an odd of the originating

00:18:51,510 --> 00:18:54,440
device events

00:18:57,460 --> 00:19:04,030
so here is the last part I will

00:19:00,650 --> 00:19:06,740
summarize the current status of our walk

00:19:04,030 --> 00:19:09,830
so currently everything is going well

00:19:06,740 --> 00:19:13,490
and we've down initial pure C walk and

00:19:09,830 --> 00:19:16,970
the results have been shared and I've

00:19:13,490 --> 00:19:21,200
also send out the design of C with u2 q

00:19:16,970 --> 00:19:24,110
+ kv m meninist and in the meantime I've

00:19:21,200 --> 00:19:29,420
started that you implemented these are

00:19:24,110 --> 00:19:31,490
CV to design okay here comes to the end

00:19:29,420 --> 00:19:43,130
of this presentation thank you do you

00:19:31,490 --> 00:19:46,520
have any questions I would like to

00:19:43,130 --> 00:19:50,420
understand what is the different from

00:19:46,520 --> 00:19:55,730
existing be host user in terms of

00:19:50,420 --> 00:20:00,740
abilities since because user also can

00:19:55,730 --> 00:20:04,510
enable to back end and another qmo and

00:20:00,740 --> 00:20:10,070
another qm can serve theoretically as

00:20:04,510 --> 00:20:16,150
back end and also to give the access to

00:20:10,070 --> 00:20:20,560
the another guest memory so what

00:20:16,150 --> 00:20:25,880
specific abilities the host pc i gives

00:20:20,560 --> 00:20:28,280
comparing to be host user I think the

00:20:25,880 --> 00:20:30,140
for the lag cv for the user so the

00:20:28,280 --> 00:20:33,980
packet has to go through the central V

00:20:30,140 --> 00:20:37,250
switch first like obvious I'm talking

00:20:33,980 --> 00:20:41,780
about interest protocol since because

00:20:37,250 --> 00:20:46,070
the user is not to be connected to a

00:20:41,780 --> 00:20:50,290
central party but be directly connected

00:20:46,070 --> 00:20:53,800
to another qmo if it implements

00:20:50,290 --> 00:20:53,800
functionality of back end

00:21:10,880 --> 00:21:17,150
right so have you tried possibly using

00:21:14,000 --> 00:21:20,150
four different switches there and just

00:21:17,150 --> 00:21:22,460
connect pairs of VMs to two to four

00:21:20,150 --> 00:21:24,200
different be switches and then you would

00:21:22,460 --> 00:21:26,000
just basically get more threats to do a

00:21:24,200 --> 00:21:27,530
packet processing and then data path

00:21:26,000 --> 00:21:30,500
will look exactly like what's on the

00:21:27,530 --> 00:21:32,990
right well if we split this switch to

00:21:30,500 --> 00:21:35,390
four switches then we need a dime more

00:21:32,990 --> 00:21:41,000
resulted through them the switch is

00:21:35,390 --> 00:21:42,920
right right what was far as I see the

00:21:41,000 --> 00:21:45,290
switchdriver is like a Tiki Tiki it's

00:21:42,920 --> 00:21:46,790
the using the podium cover and there's

00:21:45,290 --> 00:21:48,380
only if you need to pull Hardware right

00:21:46,790 --> 00:21:50,120
there's no hardware which is a V switch

00:21:48,380 --> 00:21:52,250
then you can just wait for kicks and

00:21:50,120 --> 00:21:54,410
throws right

00:21:52,250 --> 00:21:56,360
I think Anthony's the with you that you

00:21:54,410 --> 00:21:58,220
already can't kick you out you should

00:21:56,360 --> 00:21:59,720
probably like do that experiment and see

00:21:58,220 --> 00:22:01,010
you know if you actually do get the

00:21:59,720 --> 00:22:02,960
performance performance gains

00:22:01,010 --> 00:22:05,750
I mean either work has more resource

00:22:02,960 --> 00:22:06,800
consumption here you can disable the

00:22:05,750 --> 00:22:11,450
polling right there's a little pulley

00:22:06,800 --> 00:22:15,980
and then and then try it out you don't

00:22:11,450 --> 00:22:21,110
have to busy call then this is where I

00:22:15,980 --> 00:22:23,750
increased latency all right I mean on

00:22:21,110 --> 00:22:25,700
the other you you you have to have

00:22:23,750 --> 00:22:28,010
something that's waiting for the even

00:22:25,700 --> 00:22:29,960
ft2 to kick and stuff like that right I

00:22:28,010 --> 00:22:32,030
mean this seems to me the difference

00:22:29,960 --> 00:22:34,190
between these two pictures is how many

00:22:32,030 --> 00:22:35,420
threads I can process these data paths

00:22:34,190 --> 00:22:41,600
in parallel that's really the difference

00:22:35,420 --> 00:22:43,430
right yep but another thing is if we

00:22:41,600 --> 00:22:45,740
have a central message here the latency

00:22:43,430 --> 00:22:48,320
is also longer the practice has to be

00:22:45,740 --> 00:22:51,620
standard to the central message like

00:22:48,320 --> 00:22:54,910
it'll will be true copies are using a

00:22:51,620 --> 00:22:58,250
VSD BDK yeah then there is a vehicle

00:22:54,910 --> 00:23:00,440
user implementation inside the V switch

00:22:58,250 --> 00:23:03,440
right and that's yeah ping the the ring

00:23:00,440 --> 00:23:05,600
yeah I think I shouldn't give you extra

00:23:03,440 --> 00:23:08,600
lanes or maybe possibly try to be host

00:23:05,600 --> 00:23:14,150
bridge like without any of the any of

00:23:08,600 --> 00:23:17,960
the OBS logic in there yeah I mean so if

00:23:14,150 --> 00:23:20,210
we use the V switch it the packet we are

00:23:17,960 --> 00:23:21,680
first to be copied at to the M buffer of

00:23:20,210 --> 00:23:22,400
DVD key if you will see the

00:23:21,680 --> 00:23:24,770
implementation

00:23:22,400 --> 00:23:27,170
and then the PPT key driver will copy

00:23:24,770 --> 00:23:29,360
the package from the info video the N

00:23:27,170 --> 00:23:30,770
buffer to the destination I think it's

00:23:29,360 --> 00:23:32,630
the PD but that's something you can

00:23:30,770 --> 00:23:34,970
optimize if you write a V switch that

00:23:32,630 --> 00:23:38,059
all it does is switch packet bit into VM

00:23:34,970 --> 00:24:01,429
so you can optimize that right to try

00:23:38,059 --> 00:24:04,429
out the V host bridge my question is a

00:24:01,429 --> 00:24:07,820
kind of similar with previous to yes I I

00:24:04,429 --> 00:24:10,220
think if we use a switch ways to be host

00:24:07,820 --> 00:24:12,800
use reports and connect the two VM so I

00:24:10,220 --> 00:24:15,500
think is one one copyright but I'm not

00:24:12,800 --> 00:24:18,410
quite sure okay I'm I'm asking other

00:24:15,500 --> 00:24:20,809
questions and firstly you say that the

00:24:18,410 --> 00:24:22,940
PCI devices are a hot plug right when

00:24:20,809 --> 00:24:23,570
the connecting is happening and I want

00:24:22,940 --> 00:24:26,540
to know

00:24:23,570 --> 00:24:29,660
so because psi is very compact strategy

00:24:26,540 --> 00:24:32,690
and you just plug into somewhere you

00:24:29,660 --> 00:24:34,309
like or so the first question and the

00:24:32,690 --> 00:24:36,710
second question is I want to know

00:24:34,309 --> 00:24:39,830
basically this is to solve something

00:24:36,710 --> 00:24:42,530
related to memory sharing right share

00:24:39,830 --> 00:24:45,830
memories between me MSI and I'm I'm

00:24:42,530 --> 00:24:47,780
still not quite familiar with existing

00:24:45,830 --> 00:24:50,480
methods to share memory something like

00:24:47,780 --> 00:24:52,700
share hmm I don't know but could you

00:24:50,480 --> 00:24:54,800
explain more about the difference

00:24:52,700 --> 00:24:58,640
between the methods

00:24:54,800 --> 00:25:02,360
thank you okay regarding your first

00:24:58,640 --> 00:25:04,760
question you are talking about the

00:25:02,360 --> 00:25:11,510
hot-plug of the PCI device right I think

00:25:04,760 --> 00:25:14,000
it should be yeah I mean we host PCI

00:25:11,510 --> 00:25:16,309
device when when there is a connect and

00:25:14,000 --> 00:25:19,940
you will create a device and hot pipe

00:25:16,309 --> 00:25:24,050
into the VM right yeah I mean that wise

00:25:19,940 --> 00:25:28,370
it should be attached to something like

00:25:24,050 --> 00:25:31,700
a PCI bridge or route right yeah so

00:25:28,370 --> 00:25:35,750
where will be attached for example if I

00:25:31,700 --> 00:25:38,960
had two bridges two PCI bus and we

00:25:35,750 --> 00:25:42,440
should I attach it I think the corner

00:25:38,960 --> 00:25:44,030
but her device also can hot-plug which

00:25:42,440 --> 00:25:46,910
has a whole plant or other what how

00:25:44,030 --> 00:25:51,200
device it you the VM quite right but it

00:25:46,910 --> 00:25:53,600
will be the theme I think yeah yeah I

00:25:51,200 --> 00:25:56,360
didn't haven't play a lot on the hot

00:25:53,600 --> 00:25:58,520
part but I think we need to specify do

00:25:56,360 --> 00:26:00,980
we need to specify for example I want to

00:25:58,520 --> 00:26:06,650
plug a piece I wrote down an PCI device

00:26:00,980 --> 00:26:09,380
on their specific bus and I yes right so

00:26:06,650 --> 00:26:12,080
so you are automatically attacking

00:26:09,380 --> 00:26:14,240
something so maybe it's not a bit a very

00:26:12,080 --> 00:26:16,670
important question I'm just curious

00:26:14,240 --> 00:26:20,440
about it maybe you can move on to the

00:26:16,670 --> 00:26:23,060
next if you like about the difference

00:26:20,440 --> 00:26:26,300
different methods to share memory

00:26:23,060 --> 00:26:29,330
between VMs do you have any research on

00:26:26,300 --> 00:26:32,690
existing projects or methodologies that

00:26:29,330 --> 00:26:35,630
can achieve the same goal regarding the

00:26:32,690 --> 00:26:37,970
memory sharing so it's the lightness of

00:26:35,630 --> 00:26:41,600
your host the user which transforms this

00:26:37,970 --> 00:26:43,190
membrane info like this address used to

00:26:41,600 --> 00:26:45,830
be addressed something like that

00:26:43,190 --> 00:26:47,720
so the current view for the user it

00:26:45,830 --> 00:26:49,430
protocol supports this memory

00:26:47,720 --> 00:26:52,310
information transferred from the

00:26:49,430 --> 00:26:55,240
friendly attitude to the parent in the V

00:26:52,310 --> 00:26:58,310
switch so we were transformed the Sims

00:26:55,240 --> 00:27:01,340
the same information from the front end

00:26:58,310 --> 00:27:10,010
to the back end and we set up with using

00:27:01,340 --> 00:27:13,130
the cream your memory region my question

00:27:10,010 --> 00:27:16,250
is actually about the old wise to share

00:27:13,130 --> 00:27:18,830
memory between the VMs and and if you

00:27:16,250 --> 00:27:20,930
want to talk more about the V host user

00:27:18,830 --> 00:27:22,850
case it would be ok as well because

00:27:20,930 --> 00:27:27,110
that's always my question I think there

00:27:22,850 --> 00:27:30,680
is only one copy so obvious should only

00:27:27,110 --> 00:27:34,640
copy a data from vme from IBM agreeing

00:27:30,680 --> 00:27:37,700
to the BMI building moving from the host

00:27:34,640 --> 00:27:42,260
port 1 to B host port copy that's what I

00:27:37,700 --> 00:27:45,470
thought I think that one is true copy so

00:27:42,260 --> 00:27:48,500
first it will copy package from the

00:27:45,470 --> 00:27:49,370
sauce buffer to the intermedia buffer in

00:27:48,500 --> 00:27:52,400
the in the vs

00:27:49,370 --> 00:27:55,010
which I'm tackling allocated by TPD cake

00:27:52,400 --> 00:27:58,550
yeah okay it's Anna's although it's like

00:27:55,010 --> 00:28:00,470
young and old for for for like out an e

00:27:58,550 --> 00:28:03,140
for out either girl has a one copy and

00:28:00,470 --> 00:28:05,059
for indigo has another copy okay so I'm

00:28:03,140 --> 00:28:11,240
not from there voiceover yes but why not

00:28:05,059 --> 00:28:15,160
we just maybe maybe there's some reason

00:28:11,240 --> 00:28:15,160
maybe so okay thank you

00:28:17,150 --> 00:28:24,410
what happens when your VM that is

00:28:20,840 --> 00:28:28,280
running your V host PCI device what if

00:28:24,410 --> 00:28:33,740
that crashes so if you go back like one

00:28:28,280 --> 00:28:39,440
one slide for example what happens when

00:28:33,740 --> 00:28:41,960
V M two crashes yeah so beam 2 contains

00:28:39,440 --> 00:28:43,910
all the state that basically the V like

00:28:41,960 --> 00:28:45,820
that contact like basically contains all

00:28:43,910 --> 00:28:49,550
the state of that PCI device doesn't it

00:28:45,820 --> 00:28:51,710
and you can you assume can you somehow

00:28:49,550 --> 00:28:54,050
sentient the other host sorry I got like

00:28:51,710 --> 00:28:56,800
a machine check the PCI error ier

00:28:54,050 --> 00:29:00,290
whatever to reinitialize the device or

00:28:56,800 --> 00:29:01,880
the nice thing about normal network

00:29:00,290 --> 00:29:04,580
connections is that everything

00:29:01,880 --> 00:29:08,210
self-contained not sure how how V host

00:29:04,580 --> 00:29:10,370
user to use with that to be honest but

00:29:08,210 --> 00:29:11,990
in that scenario you suddenly put your

00:29:10,370 --> 00:29:14,540
device simulation into a different VM

00:29:11,990 --> 00:29:19,550
which then again can crash separately

00:29:14,540 --> 00:29:22,730
from your normal operation the VM to

00:29:19,550 --> 00:29:25,100
crashes yeah so you do mean a other

00:29:22,730 --> 00:29:26,840
chain where P broke oh right the chain

00:29:25,100 --> 00:29:28,520
is broken and that Verdi o-net device

00:29:26,840 --> 00:29:30,920
there is dangling and trying to talk to

00:29:28,520 --> 00:29:37,220
somebody is even the thing with the lack

00:29:30,920 --> 00:29:39,710
of the case like her I can show it so

00:29:37,220 --> 00:29:43,070
here if this VM quits then the package

00:29:39,710 --> 00:29:44,720
cannot be is damaged of m3 right so in

00:29:43,070 --> 00:29:46,700
that case if the V switch crashes I

00:29:44,720 --> 00:29:48,770
don't know what happens to be honest if

00:29:46,700 --> 00:29:51,130
the other VM questions it just restarts

00:29:48,770 --> 00:29:54,170
and you can talk to the other VM again

00:29:51,130 --> 00:29:56,690
yeah so in this case if this suite of

00:29:54,170 --> 00:29:59,620
crashes then basically the package

00:29:56,690 --> 00:30:00,940
cannot be standard between VM okay

00:29:59,620 --> 00:30:02,740
I'm not gonna go into the invasion

00:30:00,940 --> 00:30:05,830
details of whether open peace which is

00:30:02,740 --> 00:30:08,320
good or not or whether like V host use

00:30:05,830 --> 00:30:11,080
ourselves or the issues today but in

00:30:08,320 --> 00:30:12,309
your case you basically so we open visa

00:30:11,080 --> 00:30:13,749
just like this one piece that you

00:30:12,309 --> 00:30:17,200
basically you have to guarantee doesn't

00:30:13,749 --> 00:30:19,570
crash ever whereas your VM is like one

00:30:17,200 --> 00:30:21,309
more attack surface one more whatever it

00:30:19,570 --> 00:30:23,259
could even be just killed by the OEM

00:30:21,309 --> 00:30:25,600
killer and you don't realize it it's

00:30:23,259 --> 00:30:28,090
just more complexity and that on that

00:30:25,600 --> 00:30:30,220
layer which means you really need to

00:30:28,090 --> 00:30:33,399
take into account the case that that VM

00:30:30,220 --> 00:30:34,869
just goes down and restart whatever was

00:30:33,399 --> 00:30:36,249
happening before you Paul II want to

00:30:34,869 --> 00:30:39,909
have the same on orbit these two it

00:30:36,249 --> 00:30:41,710
doesn't do it today I don't know the

00:30:39,909 --> 00:30:43,600
departing point of this design is that

00:30:41,710 --> 00:30:45,850
away enable a pointer to pointer

00:30:43,600 --> 00:30:47,529
intervene communication if we see we

00:30:45,850 --> 00:30:49,659
have two guys communicated to each other

00:30:47,529 --> 00:30:50,980
and the one guy it has a gone

00:30:49,659 --> 00:30:53,470
so there is no communication action

00:30:50,980 --> 00:30:59,110
there should be every every piece in

00:30:53,470 --> 00:31:02,320
okay in your traditional VM model if

00:30:59,110 --> 00:31:04,509
your qumu instance crashes your driver

00:31:02,320 --> 00:31:06,519
crashes everything crashes everything is

00:31:04,509 --> 00:31:07,779
gone period two VMs goes down you

00:31:06,519 --> 00:31:09,549
restart the VM everything's good

00:31:07,779 --> 00:31:11,259
everybody's happy again he goes to just

00:31:09,549 --> 00:31:13,029
connect your VM to whatever you have

00:31:11,259 --> 00:31:14,679
from the networking side in that case

00:31:13,029 --> 00:31:15,940
you can suddenly have you splitting off

00:31:14,679 --> 00:31:18,549
your device model in two different

00:31:15,940 --> 00:31:20,049
processes at which case you basically

00:31:18,549 --> 00:31:23,740
have to make sure that they either all

00:31:20,049 --> 00:31:26,080
go down together or you just be are able

00:31:23,740 --> 00:31:27,429
to restart individual pieces and I think

00:31:26,080 --> 00:31:30,490
restarting individual pieces is probably

00:31:27,429 --> 00:31:35,159
smarter because you get more time okay I

00:31:30,490 --> 00:31:35,159
get to a point so here if

00:31:40,260 --> 00:31:50,320
if if we I'm to cast down and the way we

00:31:44,340 --> 00:31:52,690
reported this system like if him to if

00:31:50,320 --> 00:31:54,220
the upper right goes down and it goes

00:31:52,690 --> 00:31:56,170
back at you restarting the ghost back up

00:31:54,220 --> 00:31:59,730
it can still talk to the upper left but

00:31:56,170 --> 00:31:59,730
it can no longer talk to the lower right

00:32:00,240 --> 00:32:04,090
yeah and that's the following you prolly

00:32:02,470 --> 00:32:11,470
want to solve before you consider this

00:32:04,090 --> 00:32:13,630
production usable so one solution to

00:32:11,470 --> 00:32:15,750
this one I think is we can nether the

00:32:13,630 --> 00:32:18,520
crime is sender a pure article message

00:32:15,750 --> 00:32:20,020
through this server and you can you can

00:32:18,520 --> 00:32:23,020
just have the server send a message

00:32:20,020 --> 00:32:26,500
saying hi he I am I'm now initialized

00:32:23,020 --> 00:32:28,660
and if the client was connected to

00:32:26,500 --> 00:32:31,030
something beforehand it just like

00:32:28,660 --> 00:32:32,830
submits a pci whatever we said in IAE

00:32:31,030 --> 00:32:35,830
Armas anything that basically tells the

00:32:32,830 --> 00:32:37,300
guest that device just broke and you

00:32:35,830 --> 00:32:38,470
have to reinitialize something either

00:32:37,300 --> 00:32:42,660
way we're not gonna have to go to

00:32:38,470 --> 00:32:42,660
details but it's something you consider

00:32:49,800 --> 00:33:03,480
comparing the performance for we host

00:32:51,880 --> 00:33:03,480
user again we have a VM packet to

00:33:04,320 --> 00:33:10,890
another VM so I have the source and in

00:33:08,170 --> 00:33:13,960
that case there was no V switch involved

00:33:10,890 --> 00:33:17,440
so and for memory sharing also we can

00:33:13,960 --> 00:33:20,080
use a shared mmmm or we can directly M

00:33:17,440 --> 00:33:22,420
map memory and there was no research

00:33:20,080 --> 00:33:23,950
involved in that communication so that

00:33:22,420 --> 00:33:27,850
was the first point I want to make and

00:33:23,950 --> 00:33:29,230
the second one in the be switch apart

00:33:27,850 --> 00:33:31,210
from just you you told about

00:33:29,230 --> 00:33:32,860
bumper-to-bumper traffic it makes many

00:33:31,210 --> 00:33:36,010
more important decisions about routing

00:33:32,860 --> 00:33:39,970
etcetera so how those will be made in

00:33:36,010 --> 00:33:42,940
your architecture and third thing you

00:33:39,970 --> 00:33:45,880
talked about PCI net PCI bulk pack and

00:33:42,940 --> 00:33:49,300
control rings so how these control rings

00:33:45,880 --> 00:33:51,400
will be handled for will there be a

00:33:49,300 --> 00:33:52,730
separate control ring for PCI net PCI

00:33:51,400 --> 00:34:01,580
bulk or are you trying to

00:33:52,730 --> 00:34:02,929
combine those rings so yeah I have a

00:34:01,580 --> 00:34:06,200
working solution where this piece which

00:34:02,929 --> 00:34:09,290
is not used and yeah so I didn't get at

00:34:06,200 --> 00:34:10,669
the point of your first question that's

00:34:09,290 --> 00:34:12,740
what I want to say this which is not

00:34:10,669 --> 00:34:14,869
used I have a solution we have this

00:34:12,740 --> 00:34:16,820
packet goes from VM to be host user and

00:34:14,869 --> 00:34:19,550
again to VM without any involvement of

00:34:16,820 --> 00:34:22,250
the switch oh you mean the the switching

00:34:19,550 --> 00:34:24,230
side of the VM sorry do you mean the

00:34:22,250 --> 00:34:31,250
switch inside of the wheel like how this

00:34:24,230 --> 00:34:33,500
figure yeah standard VM do you mean this

00:34:31,250 --> 00:34:35,840
why is a lot a letter it will be here no

00:34:33,500 --> 00:34:37,429
no if you go to the initial slide in the

00:34:35,840 --> 00:34:39,859
in the present architecture you said

00:34:37,429 --> 00:34:41,300
that we be switches involved and traffic

00:34:39,859 --> 00:34:43,010
from all the VMS will come to this which

00:34:41,300 --> 00:34:48,649
what I am saying is that as you

00:34:43,010 --> 00:34:51,010
mentioned it's 310 if anybody wants to

00:34:48,649 --> 00:34:54,740
live for the break feel free to do that

00:34:51,010 --> 00:34:56,869
others might either discuss it now

00:34:54,740 --> 00:34:58,520
during the break or even better during

00:34:56,869 --> 00:35:01,820
the buff session there's already a

00:34:58,520 --> 00:35:05,900
session about the hospice islet and in

00:35:01,820 --> 00:35:09,550
general NFV that we worked on the easel

00:35:05,900 --> 00:35:09,550

YouTube URL: https://www.youtube.com/watch?v=xITj0qsaSJQ


