Title: [2016] I O Prefetch Cache as QEMU Block Filter Driver by Pavel Butsykin
Publication date: 2016-09-08
Playlist: KVM Forum 2016
Description: 
	Prefetch (aka readahead) is a well-known technique to improve sequential data read performance. However, making it generally useful is challenging, because real-world workloads are typically dominated by random access patterns, which defeat the prefetch efficiency for sequential accesses, and vice versa, latency of random requests may degrade due to prefetch.
In this presentation, Pavel presents an implementation of the prefetch cache as a QEMU block filter driver which improves the I/O performance while maintaining the adverse effects under control. He demonstrates the results of the tests that measure QEMU I/O performance in different configurations of the QEMU block subsystem including the one using virtio-block data plane scheme.

Pavel Butsykin
Software Engineer, Virtuozzo

Pavel is a member of a team at Virtuozzo working on QEMU/KVM-based opensource hypervisor for the next generation of Virtuozzo virtualization platform.

Slides: http://www.linux-kvm.org/images/9/92/02x07B-Pavel_Butsykin-IO_Prefetch_Cache_as_QEMU_Block_Filter_Driver.pdf
Captions: 
	00:00:10,910 --> 00:00:18,990
hello my name's pile boo chicken I'm

00:00:15,269 --> 00:00:21,570
from your toes in this presentation I

00:00:18,990 --> 00:00:24,920
would like to talk about the rift cash

00:00:21,570 --> 00:00:28,650
about the implementation based cash in

00:00:24,920 --> 00:00:32,840
Hugh about what problems had faced

00:00:28,650 --> 00:00:35,430
during the development process now given

00:00:32,840 --> 00:00:38,760
her active istic have as a block

00:00:35,430 --> 00:00:44,280
subsystem come you and water lot it lead

00:00:38,760 --> 00:00:47,180
to begin with let's go fi what is a

00:00:44,280 --> 00:00:47,180
breakage cash

00:00:50,600 --> 00:00:57,079
the braeak idea is that we can reach

00:00:55,190 --> 00:01:01,190
legislature board before it is knit in

00:00:57,079 --> 00:01:02,600
the near future there are different type

00:01:01,190 --> 00:01:05,540
of the implementation of the prefetch

00:01:02,600 --> 00:01:08,330
cache and main difference between them

00:01:05,540 --> 00:01:11,330
is method of divine location of the data

00:01:08,330 --> 00:01:15,619
let's hang my need for example the

00:01:11,330 --> 00:01:20,000
windows professor which remembers

00:01:15,619 --> 00:01:23,000
variable area of the disk and use this

00:01:20,000 --> 00:01:26,990
information for following start to speed

00:01:23,000 --> 00:01:33,020
up by his boot but in this presentation

00:01:26,990 --> 00:01:38,149
we focus on professional screen shell

00:01:33,020 --> 00:01:41,420
data rate in also sometimes called ahead

00:01:38,149 --> 00:01:53,060
but in my opening in just a region of

00:01:41,420 --> 00:02:00,289
the cash per paycheck so if for each

00:01:53,060 --> 00:02:04,430
request we will replace data block it

00:02:00,289 --> 00:02:10,880
can improve performance for screen share

00:02:04,430 --> 00:02:13,070
data small chunks but but also it can

00:02:10,880 --> 00:02:20,510
reduce performance for other case such

00:02:13,070 --> 00:02:22,970
as random read when random accessing the

00:02:20,510 --> 00:02:26,290
head can only increase Lawtons disk but

00:02:22,970 --> 00:02:29,359
will benefit will not because the cash

00:02:26,290 --> 00:02:38,200
will get letterbox are almost never eat

00:02:29,359 --> 00:02:43,340
from the cash even if we have only if I

00:02:38,200 --> 00:02:48,170
mean if will be screenshot read a

00:02:43,340 --> 00:02:52,250
balance of random request can

00:02:48,170 --> 00:02:58,340
will be displaced this whole block from

00:02:52,250 --> 00:03:01,520
the cache and Matt was additional and

00:02:58,340 --> 00:03:05,720
useless professor grass can affect

00:03:01,520 --> 00:03:10,190
performance for success separation of

00:03:05,720 --> 00:03:12,470
such type with cash we need to detection

00:03:10,190 --> 00:03:15,140
sequential read data and on in this case

00:03:12,470 --> 00:03:17,540
to do with the head yes implemented

00:03:15,140 --> 00:03:20,330
mastered ahead caches for example in

00:03:17,540 --> 00:03:31,519
Linux kernel and this approach is public

00:03:20,330 --> 00:03:33,730
here say implementation some additional

00:03:31,519 --> 00:03:37,459
cars in large project may be

00:03:33,730 --> 00:03:39,110
controversial decision because on the

00:03:37,459 --> 00:03:41,560
one head it could be useful features

00:03:39,110 --> 00:03:48,100
which can improve performance for

00:03:41,560 --> 00:03:51,709
sequential for the block up system

00:03:48,100 --> 00:03:54,560
chrome you on the other hand it could be

00:03:51,709 --> 00:04:04,700
difficult news it can't add additional

00:03:54,560 --> 00:04:09,079
changes and also bugs KU mu has a much

00:04:04,700 --> 00:04:12,560
lower block subsystem that aloft

00:04:09,079 --> 00:04:17,590
embedded between sunblock layers and

00:04:12,560 --> 00:04:17,590
just implemented blogs are filters

00:04:23,500 --> 00:04:31,969
the cash implementation in front of the

00:04:27,789 --> 00:04:36,050
therapy dog he'll allow result resolve

00:04:31,969 --> 00:04:39,050
hello mentioned problem because we will

00:04:36,050 --> 00:04:42,020
get isolated piece of code which can be

00:04:39,050 --> 00:04:44,990
enable/disable and without any changes

00:04:42,020 --> 00:04:51,169
and other companies offering you the

00:04:44,990 --> 00:04:53,900
base place the content p cash is between

00:04:51,169 --> 00:04:58,960
layer of whipped all devices and player

00:04:53,900 --> 00:05:02,150
for my dryers because the cash is I'm to

00:04:58,960 --> 00:05:05,779
optimize request coming from the guest

00:05:02,150 --> 00:05:09,650
account account some features of farmer

00:05:05,779 --> 00:05:11,740
drives also special read from the gas

00:05:09,650 --> 00:05:16,279
doesn't mean screenshot read from the

00:05:11,740 --> 00:05:20,120
file English because English format can

00:05:16,279 --> 00:05:26,389
hassle own question editing quite like a

00:05:20,120 --> 00:05:29,110
co2 and so data infile can has a

00:05:26,389 --> 00:05:29,110
different order

00:05:35,080 --> 00:05:42,759
is the guest we can have some threats

00:05:38,740 --> 00:05:44,979
with sequential read but for the block

00:05:42,759 --> 00:05:50,530
subsystem cream you in Turkish it can

00:05:44,979 --> 00:05:52,629
look like a random rate even if we have

00:05:50,530 --> 00:05:54,370
only one plate this screenshot reads the

00:05:52,629 --> 00:05:59,139
guests can has all toxins you can

00:05:54,370 --> 00:06:03,219
generate many requests and soulful the

00:05:59,139 --> 00:06:09,430
block layer whom you is also required

00:06:03,219 --> 00:06:14,219
ass heap of mixed request so we need the

00:06:09,430 --> 00:06:14,219
solid way to detection screenshot read

00:06:16,319 --> 00:06:30,370
and this way is pull requests based on

00:06:22,330 --> 00:06:33,000
red black tree sorry red black tree the

00:06:30,370 --> 00:06:38,050
idea is that we keep statistic of

00:06:33,000 --> 00:06:40,690
request comes from the guest just in

00:06:38,050 --> 00:06:44,050
fact we add note entry and no

00:06:40,690 --> 00:06:49,060
description is just all sit n sizeof I

00:06:44,050 --> 00:06:52,719
request the bull quest has a limited

00:06:49,060 --> 00:06:58,300
size as the size limited by Prince first

00:06:52,719 --> 00:07:00,669
in first out but mother has a small size

00:06:58,300 --> 00:07:07,719
and so we can keep a large number of

00:07:00,669 --> 00:07:10,029
requests for the cash I'll go is

00:07:07,719 --> 00:07:16,810
detection sequential read and for this

00:07:10,029 --> 00:07:21,789
we do request to pull statistic to found

00:07:16,810 --> 00:07:25,360
the screenshot i request by lengths for

00:07:21,789 --> 00:07:28,300
example 180 lbs before current requests

00:07:25,360 --> 00:07:30,930
and if returns the positive result we

00:07:28,300 --> 00:07:34,089
can do assumption the current request is

00:07:30,930 --> 00:07:37,390
sequential and then we can do a little

00:07:34,089 --> 00:07:45,070
hat but of course

00:07:37,390 --> 00:07:47,980
not facts that request is sequential but

00:07:45,070 --> 00:07:51,100
cash is time to type call time to

00:07:47,980 --> 00:07:56,160
optimize typical behavior of the guests

00:07:51,100 --> 00:08:08,680
in mass cases special it will be

00:07:56,160 --> 00:08:13,000
identified correctly by technical point

00:08:08,680 --> 00:08:18,340
of view request to posta tistic is just

00:08:13,000 --> 00:08:23,550
a search in three where k is austin size

00:08:18,340 --> 00:08:29,260
of range for which can confront note

00:08:23,550 --> 00:08:32,320
some nodes and the search range can be

00:08:29,260 --> 00:08:35,920
ballooning multiply notes can be done in

00:08:32,320 --> 00:08:39,280
only one notes can no one notes also

00:08:35,920 --> 00:08:42,970
note that not all regrets come to put

00:08:39,280 --> 00:08:48,310
statistic for example because children

00:08:42,970 --> 00:08:53,970
large request then because the cash just

00:08:48,310 --> 00:08:53,970
can't optimize large requests

00:08:57,379 --> 00:09:04,669
let's look at the main stages of

00:09:00,459 --> 00:09:08,379
chanukah hurry request and the first

00:09:04,669 --> 00:09:11,299
stage is logically s if a guest house in

00:09:08,379 --> 00:09:14,749
64 kilobytes by default the required

00:09:11,299 --> 00:09:19,249
just skipped and goes to a block layer

00:09:14,749 --> 00:09:25,669
below the second stage is update request

00:09:19,249 --> 00:09:27,829
district request skips a filter bowl and

00:09:25,669 --> 00:09:30,859
then in any case requests come to post

00:09:27,829 --> 00:09:34,059
acoustic but about this point I had told

00:09:30,859 --> 00:09:36,829
in various slides by the next point we

00:09:34,059 --> 00:09:40,779
try raise data from the cache and

00:09:36,829 --> 00:09:48,679
because requested data can avoid using

00:09:40,779 --> 00:09:52,069
contain is the cash and next we can have

00:09:48,679 --> 00:09:54,619
our three cases its cache heat partial

00:09:52,069 --> 00:10:00,829
cash heat and cache miss the last stage

00:09:54,619 --> 00:10:06,619
is a read ahead which include check

00:10:00,829 --> 00:10:09,470
sequential data and tell it interquest

00:10:06,619 --> 00:10:11,739
chunk of data from enter the current

00:10:09,470 --> 00:10:11,739
request

00:10:16,220 --> 00:10:22,080
what does the cache memory where the

00:10:18,960 --> 00:10:23,700
cache memory we are similar to pull

00:10:22,080 --> 00:10:30,540
statistic fostering statistic of

00:10:23,700 --> 00:10:33,840
requests cache memory also based grid

00:10:30,540 --> 00:10:35,850
red black trees but here no the house

00:10:33,840 --> 00:10:39,690
but touch chunk of memory which

00:10:35,850 --> 00:10:45,450
contained date from the disk and K

00:10:39,690 --> 00:10:51,420
describes location of the data in mask

00:10:45,450 --> 00:10:53,310
case says notice eyes will be head size

00:10:51,420 --> 00:10:57,450
but in summary kisses know they can has

00:10:53,310 --> 00:11:00,000
a smaller size for example when a part

00:10:57,450 --> 00:11:07,950
of the head already contained in the

00:11:00,000 --> 00:11:11,840
cash we just catch the missing data the

00:11:07,950 --> 00:11:16,710
missing piece of memory the slide show

00:11:11,840 --> 00:11:18,840
an example storing chunk of cash and you

00:11:16,710 --> 00:11:21,750
have a interview of that memory but it

00:11:18,840 --> 00:11:28,410
is not really working package because

00:11:21,750 --> 00:11:33,480
it's just different variation not note

00:11:28,410 --> 00:11:38,880
for supply changing schedule a actually

00:11:33,480 --> 00:11:44,370
very hard to do them okay become very

00:11:38,880 --> 00:11:46,200
fragmented the cache memory has a

00:11:44,370 --> 00:11:51,660
limited size by default four megabytes

00:11:46,200 --> 00:11:55,830
in size limited by Princip l are you but

00:11:51,660 --> 00:11:59,460
why eldri you ask you because the cash

00:11:55,830 --> 00:12:02,810
is no type of cash if it could be useful

00:11:59,460 --> 00:12:02,810
every you

00:12:04,279 --> 00:12:13,850
are you is only one hello hidden node

00:12:09,249 --> 00:12:16,610
from the cash if part of node has been

00:12:13,850 --> 00:12:20,800
written because there are possibilities

00:12:16,610 --> 00:12:24,379
and after in the art of note the note

00:12:20,800 --> 00:12:26,829
can be displaced it but it's not very

00:12:24,379 --> 00:12:34,399
good because we lose in a small cache

00:12:26,829 --> 00:12:39,439
which actively used and the photo Holt

00:12:34,399 --> 00:12:46,269
activity is not we just move it up the

00:12:39,439 --> 00:12:46,269
list of course is we have an explosive

00:12:49,120 --> 00:12:56,930
displays nodes and three hopes at the

00:12:52,370 --> 00:12:59,480
last note will be displaced next useful

00:12:56,930 --> 00:13:01,519
node and the whole last note that make

00:12:59,480 --> 00:13:05,449
sense but it's not true because if

00:13:01,519 --> 00:13:12,110
happened and read node the cash could

00:13:05,449 --> 00:13:15,920
get extra nodes and so Holt actually

00:13:12,110 --> 00:13:23,170
snowed will be quite useful also not

00:13:15,920 --> 00:13:29,809
have a counter which counted on size of

00:13:23,170 --> 00:13:34,879
data written for the cash and ran

00:13:29,809 --> 00:13:38,899
counter became more than notice signs

00:13:34,879 --> 00:13:42,610
and then note is removed it will all

00:13:38,899 --> 00:13:42,610
effectively use their memory asses

00:13:47,540 --> 00:13:54,120
partial cash hit this foolish kiddo oh

00:13:50,400 --> 00:14:00,480
gosh this is oh yeah but what do we do

00:13:54,120 --> 00:14:05,550
if happen partial cash hit the slideshow

00:14:00,480 --> 00:14:10,800
to example of real example of a read

00:14:05,550 --> 00:14:13,140
request on the one hand a large part

00:14:10,800 --> 00:14:16,470
request can already contained in the

00:14:13,140 --> 00:14:20,820
cash and we can raise it and for other

00:14:16,470 --> 00:14:26,210
part of regret just make new request it

00:14:20,820 --> 00:14:26,210
you can make sex but on the other hand

00:14:26,270 --> 00:14:37,110
request can hit the fragmented cash and

00:14:32,480 --> 00:14:38,910
in this case race small chunk of money

00:14:37,110 --> 00:14:42,360
does make sense it's just that relies

00:14:38,910 --> 00:14:47,720
request for SSG but some cases going to

00:14:42,360 --> 00:14:47,720
gain demise request HD so for the

00:14:48,200 --> 00:14:59,880
missing data into crash just cashed

00:14:53,370 --> 00:15:03,440
missing John my way very fragmented cash

00:14:59,880 --> 00:15:03,440
happens in rare cases

00:15:08,580 --> 00:15:15,339
prakash's I'm to demise cerrito quest

00:15:13,630 --> 00:15:21,839
but try to quest also need to handle

00:15:15,339 --> 00:15:27,010
because if happen right request or

00:15:21,839 --> 00:15:29,980
crushed region then data into cash

00:15:27,010 --> 00:15:32,140
become arrogant for sold their problem

00:15:29,980 --> 00:15:34,770
we can drop all nodes in the section

00:15:32,140 --> 00:15:37,930
with right request all do right through

00:15:34,770 --> 00:15:42,040
the implementation right true is a bad

00:15:37,930 --> 00:15:49,899
solution because it is increase change

00:15:42,040 --> 00:15:58,300
of very fragmented cash and in some

00:15:49,899 --> 00:16:04,029
cases it can it increase cash heat very

00:15:58,300 --> 00:16:09,160
great is one of the main po

00:16:04,029 --> 00:16:14,190
interpolation Rakesh is organization

00:16:09,160 --> 00:16:18,970
request completion the request can come

00:16:14,190 --> 00:16:23,070
faster much faster than our X cute but

00:16:18,970 --> 00:16:31,899
good to do if Ferguson node is a flight

00:16:23,070 --> 00:16:34,329
of us to wait but then can happen

00:16:31,899 --> 00:16:39,339
situation before request completion to

00:16:34,329 --> 00:16:42,940
wait true or 28 completion two or three

00:16:39,339 --> 00:16:48,190
other requests for organization

00:16:42,940 --> 00:16:54,690
organization management a link of having

00:16:48,190 --> 00:16:58,029
earlier of sorry for organization

00:16:54,690 --> 00:17:01,680
management Cornell of an entire grade

00:16:58,029 --> 00:17:04,680
completion was lamented ability to

00:17:01,680 --> 00:17:04,680
creation

00:17:06,010 --> 00:17:12,640
the creation communication went into

00:17:08,689 --> 00:17:12,640
many between the request and cash note

00:17:14,920 --> 00:17:24,709
to implementation such a pipe connection

00:17:19,630 --> 00:17:34,000
request has a list of note which need to

00:17:24,709 --> 00:17:37,160
add entry as part of cash also not note

00:17:34,000 --> 00:17:43,970
has our list of requests which need to

00:17:37,160 --> 00:17:50,299
wait our great completion also note has

00:17:43,970 --> 00:17:55,730
our status status so it helped hand

00:17:50,299 --> 00:18:00,910
linker and help the result Headley

00:17:55,730 --> 00:18:05,870
request for example if with requests

00:18:00,910 --> 00:18:08,450
cover no tuition flights and request

00:18:05,870 --> 00:18:11,510
just wait no the completion but if we to

00:18:08,450 --> 00:18:14,750
quest a partially cover note which is

00:18:11,510 --> 00:18:19,990
flight it's two equivalent partial cash

00:18:14,750 --> 00:18:22,760
heat I mean all note though I'm going to

00:18:19,990 --> 00:18:26,290
request will be completing then the

00:18:22,760 --> 00:18:26,290
request will be completed

00:18:29,580 --> 00:18:43,490
a little more about the request

00:18:31,350 --> 00:18:43,490
completion request and note has have

00:18:44,750 --> 00:18:51,750
defense culture and for request and if

00:18:48,930 --> 00:18:56,040
county is a culture of rate note for

00:18:51,750 --> 00:19:02,700
note ref counting is counted of object

00:18:56,040 --> 00:19:09,630
which using this node such of object can

00:19:02,700 --> 00:19:13,590
be request or j of nodes if reference

00:19:09,630 --> 00:19:15,630
Carter of requests become 00 request is

00:19:13,590 --> 00:19:19,440
completed if a difference culture of

00:19:15,630 --> 00:19:25,550
node become zero the node is removed now

00:19:19,440 --> 00:19:29,040
a lot completion can be described as

00:19:25,550 --> 00:19:31,170
decrease reference to node which can be

00:19:29,040 --> 00:19:38,310
decreased reference to request request

00:19:31,170 --> 00:19:42,360
completion can lead to completion all

00:19:38,310 --> 00:19:44,940
new nodes will into requests and node

00:19:42,360 --> 00:19:53,010
completion lead to the reference all

00:19:44,940 --> 00:19:56,610
requests pending completion sis nodes so

00:19:53,010 --> 00:20:01,200
request completion for one node can lead

00:19:56,610 --> 00:20:03,480
to completion minute so the question is

00:20:01,200 --> 00:20:06,330
for one arrow ethic and a little

00:20:03,480 --> 00:20:08,870
condition may note and our other

00:20:06,330 --> 00:20:08,870
requests

00:20:13,750 --> 00:20:20,710
the last stage in Hank I or to quest in

00:20:17,230 --> 00:20:22,600
serie de head first knowledge that our

00:20:20,710 --> 00:20:28,450
quest crimes of the guests not cash

00:20:22,600 --> 00:20:35,740
advance but used to dota 2 update

00:20:28,450 --> 00:20:38,350
statistic on request because the cash is

00:20:35,740 --> 00:20:45,390
time to optimize pattern sequential read

00:20:38,350 --> 00:20:48,400
data and just don't make sense tri-color

00:20:45,390 --> 00:20:51,760
other vector optimization because for

00:20:48,400 --> 00:20:55,060
this they are different type of the

00:20:51,760 --> 00:21:01,660
caches read ahead is not a little bit by

00:20:55,060 --> 00:21:04,990
the condition if before current with the

00:21:01,660 --> 00:21:07,480
a sequential read data in our size this

00:21:04,990 --> 00:21:10,420
information could get posted istic

00:21:07,480 --> 00:21:13,420
requests but of course then this metal

00:21:10,420 --> 00:21:21,940
detection is not very reliable but in

00:21:13,420 --> 00:21:24,610
most cases it will work also note if

00:21:21,940 --> 00:21:30,820
part of the height awakened at the cash

00:21:24,610 --> 00:21:32,850
we just cash it the machine chunk of my

00:21:30,820 --> 00:21:32,850
life

00:21:38,030 --> 00:21:50,240
the slideshow our result graduated test

00:21:45,180 --> 00:21:56,490
which cover different pattern sequential

00:21:50,240 --> 00:22:03,140
additional powder read in small child

00:21:56,490 --> 00:22:05,370
chunks by four kilobytes it is random

00:22:03,140 --> 00:22:09,450
sequential read it is synchronized a

00:22:05,370 --> 00:22:14,970
synchronized within 14 16 players is a

00:22:09,450 --> 00:22:20,640
few in four and thirty two requests the

00:22:14,970 --> 00:22:22,590
toast test will run on as a detour avoid

00:22:20,640 --> 00:22:29,750
flow in texas in two different part of

00:22:22,590 --> 00:22:33,840
the disk and the test present

00:22:29,750 --> 00:22:45,470
compositions out for the are for

00:22:33,840 --> 00:22:52,440
configuration in first column this is

00:22:45,470 --> 00:22:59,940
base configuration with p mu 2 dot six

00:22:52,440 --> 00:23:04,010
with IO and go to the second down to

00:22:59,940 --> 00:23:09,480
base configuration at data plane which

00:23:04,010 --> 00:23:16,890
allow in additional trade I are heading

00:23:09,480 --> 00:23:20,240
higher quests that in generally it can

00:23:16,890 --> 00:23:20,240
speed up I O'Hanlon

00:23:22,520 --> 00:23:32,790
here we can see about forty percent

00:23:30,500 --> 00:23:37,080
performance increase for the test with a

00:23:32,790 --> 00:23:42,510
synchronous sequential read data with

00:23:37,080 --> 00:23:48,090
you and for request for the same test

00:23:42,510 --> 00:23:54,110
bus with few in sub to request happen a

00:23:48,090 --> 00:23:57,810
small overhead but in general we can see

00:23:54,110 --> 00:24:03,500
positive changes in performance sort

00:23:57,810 --> 00:24:06,090
column is base configuration plus p cash

00:24:03,500 --> 00:24:14,010
there you can see improve performance

00:24:06,090 --> 00:24:17,210
for all special retest and result of

00:24:14,010 --> 00:24:19,860
freedom the test also reported because

00:24:17,210 --> 00:24:26,460
they are performance doesn't change it

00:24:19,860 --> 00:24:28,820
is very good at expected result in first

00:24:26,460 --> 00:24:28,820
column

00:24:33,120 --> 00:24:43,710
combined data plane into p cash and each

00:24:39,400 --> 00:24:45,670
get a good result first about such a

00:24:43,710 --> 00:24:48,180
person to prove performance for

00:24:45,670 --> 00:24:52,870
synchronized crenshaw test and second

00:24:48,180 --> 00:25:00,610
left negative effect of our head because

00:24:52,870 --> 00:25:02,760
now must part of requests hit to the

00:25:00,610 --> 00:25:02,760
cash

00:25:07,770 --> 00:25:17,050
small but positive effect of the cash

00:25:10,920 --> 00:25:22,630
also editors read the test iterates

00:25:17,050 --> 00:25:24,940
through the tree of victories in total

00:25:22,630 --> 00:25:29,640
size and thousand directors in thousands

00:25:24,940 --> 00:25:34,390
of files by test result in orage

00:25:29,640 --> 00:25:38,080
recursively volcan conductors tree with

00:25:34,390 --> 00:25:42,760
p cash by 2 percent faster this effect

00:25:38,080 --> 00:25:48,430
happy because when our voltage Reuters 3

00:25:42,760 --> 00:25:57,160
the some block some physician blocks can

00:25:48,430 --> 00:26:01,380
be placed sequentially and so Rakesh can

00:25:57,160 --> 00:26:01,380
speed up research in file systems

00:26:06,000 --> 00:26:20,380
Grimaud Inc diligence in gluten mu has

00:26:12,850 --> 00:26:23,230
option branch which hello quickly and

00:26:20,380 --> 00:26:31,470
easily test our performance just fun i

00:26:23,230 --> 00:26:44,640
decide to test i urge request and this

00:26:31,470 --> 00:26:48,600
Picasso week increase in speed but with

00:26:44,640 --> 00:26:48,600
increasing rent of you

00:26:51,770 --> 00:26:59,670
there are different becomes less and

00:26:54,120 --> 00:27:09,360
less but is that even this pic ash and

00:26:59,670 --> 00:27:20,130
his Q in 64 request speakers test run a

00:27:09,360 --> 00:27:22,200
bit faster the slideshow histogram it

00:27:20,130 --> 00:27:25,230
describes requests I synchronized

00:27:22,200 --> 00:27:27,900
control reach by four kilobytes grab

00:27:25,230 --> 00:27:41,210
coming from the guest obtained by belk a

00:27:27,900 --> 00:27:44,299
trace on the host red means request this

00:27:41,210 --> 00:27:52,280
green calculation como and grain rich

00:27:44,299 --> 00:27:56,790
men's event means request as in

00:27:52,280 --> 00:28:03,950
configuration game of poker slot game

00:27:56,790 --> 00:28:03,950
plus cash and there you can see

00:28:09,840 --> 00:28:19,630
all requests by 64 club 64 kilobytes

00:28:16,720 --> 00:28:26,500
because of the head size 64 kilobytes it

00:28:19,630 --> 00:28:29,250
is in generalities expected result more

00:28:26,500 --> 00:28:36,880
it isn't result we can see if compared

00:28:29,250 --> 00:28:41,440
configuration bit peckish in

00:28:36,880 --> 00:28:46,420
configuration package was data plain red

00:28:41,440 --> 00:28:53,290
marked tiempo ? to camp Rakesh as data

00:28:46,420 --> 00:28:56,740
play freaking see requests by 64

00:28:53,290 --> 00:28:59,220
kilobytes incubation campo cash plus

00:28:56,740 --> 00:28:59,220
data plane

00:29:09,760 --> 00:29:24,970
by twenty percent less there because

00:29:15,490 --> 00:29:29,960
this request shift are right in

00:29:24,970 --> 00:29:36,290
direction of large request just because

00:29:29,960 --> 00:29:39,490
thanks bye yo trade requests requests

00:29:36,290 --> 00:29:42,980
faster delete into Colonel where it is

00:29:39,490 --> 00:29:50,390
merged in a lot of in the rest of large

00:29:42,980 --> 00:29:56,080
size so Mukesh can optimize certain I

00:29:50,390 --> 00:30:00,350
have returned without this amazing other

00:29:56,080 --> 00:30:09,080
be cash if limitation in form of dr

00:30:00,350 --> 00:30:11,840
leader is anniversary and the cash is

00:30:09,080 --> 00:30:15,980
that not a genetic cash so because

00:30:11,840 --> 00:30:21,710
because the Gascon has only the head

00:30:15,980 --> 00:30:25,100
cash and also the host can run the cash

00:30:21,710 --> 00:30:30,340
and before use the cash we need to this

00:30:25,100 --> 00:30:30,340
dent the cash can optimize our target

00:30:31,870 --> 00:30:50,590
and also note that recently at the

00:30:39,020 --> 00:30:54,850
moment I sent our see version p cash and

00:30:50,590 --> 00:30:54,850
so you can

00:30:55,720 --> 00:31:08,410
even look look after patches so now n

00:31:06,200 --> 00:31:08,410
equations

00:31:14,880 --> 00:31:22,270
hi I was wondering did you run your

00:31:18,640 --> 00:31:24,700
benchmarks against cash equals right

00:31:22,270 --> 00:31:27,250
back so that we can compare it against

00:31:24,700 --> 00:31:29,140
the linux kernel's you know buffer dial

00:31:27,250 --> 00:31:31,420
read ahead because the linux kernel can

00:31:29,140 --> 00:31:33,040
already do read ahead for us but we

00:31:31,420 --> 00:31:35,860
would need to be using cash equals right

00:31:33,040 --> 00:31:37,150
back instead of cash equals none I think

00:31:35,860 --> 00:31:40,720
that would be an interesting benchmark

00:31:37,150 --> 00:31:42,940
just to see you know what what you are

00:31:40,720 --> 00:31:44,530
doing different because if there's not

00:31:42,940 --> 00:31:46,750
much difference then it seems like what

00:31:44,530 --> 00:31:48,720
users should be doing who want this is

00:31:46,750 --> 00:31:51,850
they should use cash equals right back

00:31:48,720 --> 00:31:57,310
instead of adding this to qemu if you

00:31:51,850 --> 00:32:00,160
see what I mean ah yes news colonel has

00:31:57,310 --> 00:32:05,490
are the hip caches of but these caches

00:32:00,160 --> 00:32:10,690
attach it on FG file descriptor and this

00:32:05,490 --> 00:32:14,110
can't but p cash placed on some work

00:32:10,690 --> 00:32:17,670
layer above and this can optimize more

00:32:14,110 --> 00:32:23,610
cases for example the church in

00:32:17,670 --> 00:32:26,590
directors 3 and of course i agree that

00:32:23,610 --> 00:32:35,760
the cash can improve performance for a

00:32:26,590 --> 00:32:41,320
synthetic test but in some rare cases it

00:32:35,760 --> 00:32:48,790
can optimize circus for life test but i

00:32:41,320 --> 00:32:53,020
think it is point from which we can move

00:32:48,790 --> 00:33:01,480
a ball and implementation and test and

00:32:53,020 --> 00:33:04,210
implementation more other tests ok i had

00:33:01,480 --> 00:33:06,610
i had another question and that's about

00:33:04,210 --> 00:33:10,620
request merging because the Vertigo

00:33:06,610 --> 00:33:15,960
block device can merge read requests so

00:33:10,620 --> 00:33:20,880
when you when you did your benchmarks if

00:33:15,960 --> 00:33:23,980
the roadblock device receives multiple

00:33:20,880 --> 00:33:26,320
sequential iOS on the vert q within a

00:33:23,980 --> 00:33:27,900
single kick so when the handle function

00:33:26,320 --> 00:33:29,670
gets called in q mu and

00:33:27,900 --> 00:33:32,400
goes through the vert queue and it sees

00:33:29,670 --> 00:33:34,590
multiple requests it can already do

00:33:32,400 --> 00:33:36,360
merging and what can happen is that the

00:33:34,590 --> 00:33:38,370
benchmark inside the guests might be

00:33:36,360 --> 00:33:41,040
configured with four kilobyte request

00:33:38,370 --> 00:33:42,990
sizes but when you look on the host it

00:33:41,040 --> 00:33:46,410
turns out that Q mutually converts that

00:33:42,990 --> 00:33:47,850
into larger reads so I was wondering if

00:33:46,410 --> 00:33:50,570
you notice that because I think it's

00:33:47,850 --> 00:33:52,980
enabled by default so that can sometimes

00:33:50,570 --> 00:33:56,370
affect benchmarks that can sometimes

00:33:52,980 --> 00:33:58,050
interfere because if that happens and

00:33:56,370 --> 00:34:00,060
what happens is that your p cash will be

00:33:58,050 --> 00:34:01,770
getting different request sizes than

00:34:00,060 --> 00:34:03,810
what the benchmark inside the guest is

00:34:01,770 --> 00:34:05,400
trying to do do you see what I mean

00:34:03,810 --> 00:34:09,120
because the verdi Oh block device will

00:34:05,400 --> 00:34:10,740
merge the requests into bigger ones if

00:34:09,120 --> 00:34:12,120
you have sequential I oh so often

00:34:10,740 --> 00:34:14,490
sequential i/o is not a good benchmark

00:34:12,120 --> 00:34:20,750
for q me because we mess with the

00:34:14,490 --> 00:34:20,750
request pattern yeah maybe all right but

00:34:22,909 --> 00:34:37,320
I also note I trade can parallel I'm

00:34:32,100 --> 00:34:42,450
link I requests and it can speed up the

00:34:37,320 --> 00:34:45,840
lift our quest to colonel and it can

00:34:42,450 --> 00:34:52,280
help not request because without a trait

00:34:45,840 --> 00:34:59,250
i get doesn't merge request double

00:34:52,280 --> 00:35:09,020
obtained by belk a trace and also i have

00:34:59,250 --> 00:35:13,800
noted on the host if we run only one way

00:35:09,020 --> 00:35:21,000
we can use cash it it will be ok but if

00:35:13,800 --> 00:35:26,610
we have many friends the host cassius

00:35:21,000 --> 00:35:31,980
will be always displays and usually cash

00:35:26,610 --> 00:35:35,880
on host disables and for this case maybe

00:35:31,980 --> 00:35:38,790
for you cash and yeah i was wondering if

00:35:35,880 --> 00:35:40,030
see groups can can do that if see groups

00:35:38,790 --> 00:35:41,770
can say

00:35:40,030 --> 00:35:43,450
this this process or this group of

00:35:41,770 --> 00:35:45,820
processes have a certain amount of

00:35:43,450 --> 00:35:47,290
buffer like page kasha they can use it

00:35:45,820 --> 00:35:48,430
that way you can isolate them so they

00:35:47,290 --> 00:35:53,070
don't have this problem that you're

00:35:48,430 --> 00:35:58,870
mentioning but I am tried I don't know

00:35:53,070 --> 00:36:04,890
yes thank you for questions I will think

00:35:58,870 --> 00:36:07,900
about it so and so also i thought i sent

00:36:04,890 --> 00:36:10,710
official version catchment we can

00:36:07,900 --> 00:36:18,210
discussion about this thank you for

00:36:10,710 --> 00:36:18,210

YouTube URL: https://www.youtube.com/watch?v=VfnyBKhRuUg


