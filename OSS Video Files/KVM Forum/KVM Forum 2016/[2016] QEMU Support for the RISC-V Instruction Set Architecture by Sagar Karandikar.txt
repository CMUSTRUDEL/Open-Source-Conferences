Title: [2016] QEMU Support for the RISC-V Instruction Set Architecture by Sagar Karandikar
Publication date: 2016-09-08
Playlist: KVM Forum 2016
Description: 
	RISC-V is a new instruction set architecture originally designed to support computer architecture research and education at UC Berkeley. RISC-V is now set to become a standard open architecture for industry implementations under the governance of the RISC-V Foundation.

This talk will summarize the benefits of RISC-V and open ISAs for the open-source systems-software community. The first section of the talk will focus on the draft RISC-V privileged specification, including the RISC-V vision for cleaner abstraction between hardware, hypervisors, and operating systems.

The talk will also discuss my experience bringing up RISC-V emulation support in QEMU, including adding architectural support, experimental devices, and fuzz testing against Spike, the “golden reference” RISC-V simulator. The talk will conclude by outlining opportunities to contribute to RISC-V ISA support in QEMU. 

Sagar Karandikar
Graduate Student Researcher, UC Berkeley

Sagar Karandikar is a first-year graduate student researcher focusing in computer architecture in the Electrical Engineering and Computer Sciences department at UC Berkeley. His research focuses on hardware and software design of next-generation datacenters. He has also been involved in the RISC-V project, contributing to the development of infrastructure surrounding the open RISC-V Instruction Set Architecture.

Slides: http://www.linux-kvm.org/images/6/6a/02x04B-QEMU-Support_for_the_RISC-V_Instruction_Set_Architecture.pdf
Captions: 
	00:00:04,930 --> 00:00:12,269
[Music]

00:00:09,000 --> 00:00:14,790
so hi I'm Sagar karna car I'm a first

00:00:12,269 --> 00:00:17,070
year PhD student at Berkeley but I've

00:00:14,790 --> 00:00:18,300
been working on adding support for the

00:00:17,070 --> 00:00:22,740
risk five instructions at architecture

00:00:18,300 --> 00:00:26,730
to qmu so quick outline I'll talk about

00:00:22,740 --> 00:00:28,380
why risk 5 was created just generally

00:00:26,730 --> 00:00:29,609
the benefits of having an open is a

00:00:28,380 --> 00:00:33,360
hopefully that won't be too much of a

00:00:29,609 --> 00:00:36,239
tough sell here I'll talk a little bit

00:00:33,360 --> 00:00:37,950
about the ISA itself a little bit about

00:00:36,239 --> 00:00:39,629
the architectural features of the ISA

00:00:37,950 --> 00:00:41,700
why is designed the way it is

00:00:39,629 --> 00:00:43,860
I'll talk about I'll talk a little bit

00:00:41,700 --> 00:00:46,410
about virtualization support in kind of

00:00:43,860 --> 00:00:48,420
more classical virtualization terms and

00:00:46,410 --> 00:00:51,270
then also we kind of have a gap in the

00:00:48,420 --> 00:00:54,809
hypervisor spec that I'll ask for your

00:00:51,270 --> 00:00:57,059
help with and then I'll talk about the

00:00:54,809 --> 00:01:00,030
actual qmu target support for risk 5

00:00:57,059 --> 00:01:01,859
that's that's been developed and then

00:01:00,030 --> 00:01:03,600
some more information about kind of the

00:01:01,859 --> 00:01:07,560
work in progress what we need to do to

00:01:03,600 --> 00:01:09,869
upstream and then some future plans ok

00:01:07,560 --> 00:01:11,880
so first thing you could argue that is a

00:01:09,869 --> 00:01:14,670
is don't really matter right so if you

00:01:11,880 --> 00:01:15,600
look at a full computer system there are

00:01:14,670 --> 00:01:17,280
a lot of different things that

00:01:15,600 --> 00:01:19,530
contribute to the performance and energy

00:01:17,280 --> 00:01:21,750
characteristics of some application

00:01:19,530 --> 00:01:23,759
running on a machine right so you know

00:01:21,750 --> 00:01:26,180
from the beginning you design some

00:01:23,759 --> 00:01:28,110
algorithm right has some runtime

00:01:26,180 --> 00:01:30,060
complexity that you have to worry about

00:01:28,110 --> 00:01:31,650
then you actually write the code your

00:01:30,060 --> 00:01:33,390
implementation quality matters a lot

00:01:31,650 --> 00:01:35,520
then you have to go through a compiler

00:01:33,390 --> 00:01:36,960
your OS and your runtime whether you're

00:01:35,520 --> 00:01:40,229
using a managed language or something

00:01:36,960 --> 00:01:42,270
else and then in here is the ISA it's

00:01:40,229 --> 00:01:44,009
one particular component of this but

00:01:42,270 --> 00:01:45,780
even after the ISA there a ton of things

00:01:44,009 --> 00:01:46,860
that matter so how you design your

00:01:45,780 --> 00:01:48,299
microarchitecture

00:01:46,860 --> 00:01:50,070
what kind of trade-offs you make when

00:01:48,299 --> 00:01:51,869
you're actually designing your core how

00:01:50,070 --> 00:01:54,060
large your caches are all of that stuff

00:01:51,869 --> 00:01:55,829
and then even once you do the

00:01:54,060 --> 00:01:57,270
architecture work then you actually have

00:01:55,829 --> 00:01:58,740
to go down in fab a chip right so

00:01:57,270 --> 00:02:01,020
there's lots of stuff there that that

00:01:58,740 --> 00:02:03,899
impacts how your actual system performs

00:02:01,020 --> 00:02:05,369
right so from this perspective it looks

00:02:03,899 --> 00:02:07,229
like ISA is don't really matter right

00:02:05,369 --> 00:02:11,310
just one small sliver of this giant

00:02:07,229 --> 00:02:13,170
stack but you know you can also say you

00:02:11,310 --> 00:02:13,650
can also argue that your instruction set

00:02:13,170 --> 00:02:16,290
matters

00:02:13,650 --> 00:02:17,790
right and if you think about the answers

00:02:16,290 --> 00:02:19,620
to some of these questions well why

00:02:17,790 --> 00:02:22,260
can't Intel sell mobile chips it's

00:02:19,620 --> 00:02:25,409
because most existing mobile devices are

00:02:22,260 --> 00:02:28,230
based on the RM is a why can't arm cell

00:02:25,409 --> 00:02:30,569
servers well most existing servers are

00:02:28,230 --> 00:02:33,569
built on the amd64 ISA and most of those

00:02:30,569 --> 00:02:36,269
machines are supplied by Intel and how

00:02:33,569 --> 00:02:39,060
can i BM still sell mainframes with the

00:02:36,269 --> 00:02:41,280
oldest being IBM 360 based ones with

00:02:39,060 --> 00:02:43,680
kind of an ISA that has survived over 50

00:02:41,280 --> 00:02:45,420
years right and the answer for a lot of

00:02:43,680 --> 00:02:47,609
this is that software development cost

00:02:45,420 --> 00:02:49,109
is really high right to build software

00:02:47,609 --> 00:02:51,599
that runs well on these different

00:02:49,109 --> 00:02:54,000
machine types takes a lot of effort so

00:02:51,599 --> 00:02:55,799
given this you can argue that your ISA

00:02:54,000 --> 00:02:57,269
is in fact the most important interface

00:02:55,799 --> 00:02:58,920
in a computer system right this is

00:02:57,269 --> 00:03:00,420
ultimately where you go from just

00:02:58,920 --> 00:03:01,530
building a piece of fixed-function

00:03:00,420 --> 00:03:04,769
hardware to something that's really

00:03:01,530 --> 00:03:07,650
programmable and if we look even further

00:03:04,769 --> 00:03:10,049
to like modern systems there's more than

00:03:07,650 --> 00:03:12,750
just one is a on something like a system

00:03:10,049 --> 00:03:14,340
on chip right so there's for example an

00:03:12,750 --> 00:03:15,720
nvidia tegra here there are tons and

00:03:14,340 --> 00:03:17,340
tons of different types of processors

00:03:15,720 --> 00:03:20,069
onboard so of course there's the

00:03:17,340 --> 00:03:21,389
application processor generally arm but

00:03:20,069 --> 00:03:23,519
then there's tons of other kind of

00:03:21,389 --> 00:03:25,380
accelerator class processors so there's

00:03:23,519 --> 00:03:28,260
graphics processors image processors all

00:03:25,380 --> 00:03:29,730
kinds of DSPs security processors power

00:03:28,260 --> 00:03:32,639
management units that are sometimes just

00:03:29,730 --> 00:03:36,359
small regular cores and then the list

00:03:32,639 --> 00:03:38,400
goes on and on right but generally

00:03:36,359 --> 00:03:41,129
speaking the application processor is a

00:03:38,400 --> 00:03:44,699
is much too large to be used used well

00:03:41,129 --> 00:03:45,989
for the small accelerators and in fact a

00:03:44,699 --> 00:03:47,760
lot of times when you're building a

00:03:45,989 --> 00:03:50,129
system on chip you're buying IP from a

00:03:47,760 --> 00:03:52,319
variety of vendors and each one of these

00:03:50,129 --> 00:03:55,530
pieces of IP will have their own

00:03:52,319 --> 00:03:57,540
proprietary is a frequently and

00:03:55,530 --> 00:03:59,730
sometimes you want to develop your own

00:03:57,540 --> 00:04:01,199
cores right if you're building one of

00:03:59,730 --> 00:04:03,030
these accelerators or even building your

00:04:01,199 --> 00:04:05,280
own CPU people will implement their own

00:04:03,030 --> 00:04:06,840
ISA right because they need some

00:04:05,280 --> 00:04:08,760
constrained feature set or they need to

00:04:06,840 --> 00:04:10,379
add things that don't exist and as a

00:04:08,760 --> 00:04:12,870
result they all have to keep bringing up

00:04:10,379 --> 00:04:15,900
new sets of compilers runtimes operating

00:04:12,870 --> 00:04:18,269
systems to go on top of this so some SOC

00:04:15,900 --> 00:04:20,250
s today have over a dozen ISAs onboard

00:04:18,269 --> 00:04:21,930
and like I said every single one has to

00:04:20,250 --> 00:04:23,849
have its own unique software stack so

00:04:21,930 --> 00:04:26,490
this is a ton of engineering effort to

00:04:23,849 --> 00:04:28,520
to kind of do things that have already

00:04:26,490 --> 00:04:32,069
been done over

00:04:28,520 --> 00:04:34,530
so a couple of questions then do we need

00:04:32,069 --> 00:04:37,080
all these different ISAs do they have to

00:04:34,530 --> 00:04:38,789
be proprietary and the most important

00:04:37,080 --> 00:04:40,199
one what if there were one free and open

00:04:38,789 --> 00:04:43,349
ISA that you could use just for

00:04:40,199 --> 00:04:46,319
everything so argue that is a should be

00:04:43,349 --> 00:04:49,199
free and open not bound by kind of legal

00:04:46,319 --> 00:04:51,389
constraints right so lots of is a's are

00:04:49,199 --> 00:04:53,880
proprietary for a variety of reasons but

00:04:51,389 --> 00:04:56,069
largely these reasons are historical or

00:04:53,880 --> 00:04:57,360
business reasons right so you know

00:04:56,069 --> 00:04:59,310
there's not really a good technical

00:04:57,360 --> 00:05:01,500
reason for why we don't have an open ISA

00:04:59,310 --> 00:05:02,970
so far so it's not an Arab omission it's

00:05:01,500 --> 00:05:04,650
not like someone working at one of these

00:05:02,970 --> 00:05:06,810
big companies woke up one day and goes

00:05:04,650 --> 00:05:09,930
oh man I forgot to open source our ISA

00:05:06,810 --> 00:05:11,520
right it's not because companies do most

00:05:09,930 --> 00:05:12,660
of the software development as we see in

00:05:11,520 --> 00:05:15,660
settings like these there are lots and

00:05:12,660 --> 00:05:18,590
lots of contributors - even - system

00:05:15,660 --> 00:05:20,940
software that runs on these machines

00:05:18,590 --> 00:05:23,130
companies also don't exclusively have

00:05:20,940 --> 00:05:24,630
the experience to design a competent ISA

00:05:23,130 --> 00:05:26,669
there are lots and lots of text books

00:05:24,630 --> 00:05:28,349
about how different IAS behave what

00:05:26,669 --> 00:05:30,479
kinds of ISA features are good and bad

00:05:28,349 --> 00:05:33,210
and modern and with modern

00:05:30,479 --> 00:05:34,830
implementation techniques and so on the

00:05:33,210 --> 00:05:36,690
most popular is a czar definitely not

00:05:34,830 --> 00:05:37,949
the most wonderful is azor all kinds of

00:05:36,690 --> 00:05:41,699
complications that have built up over

00:05:37,949 --> 00:05:43,800
time with legacy and neither cannoli

00:05:41,699 --> 00:05:45,719
companies verify is a compatibility

00:05:43,800 --> 00:05:47,909
right you can have just as easily some

00:05:45,719 --> 00:05:49,949
type of foundation that creates

00:05:47,909 --> 00:05:51,650
compatibility Suites to make sure that

00:05:49,949 --> 00:05:54,539
some process are implemented by someone

00:05:51,650 --> 00:05:56,520
who's unknown kind of matches a spec

00:05:54,539 --> 00:05:58,889
right or as close to matching a spec as

00:05:56,520 --> 00:06:00,750
we can determine and then lastly

00:05:58,889 --> 00:06:02,280
proprietary ices are not guaranteed to

00:06:00,750 --> 00:06:04,560
las so there have been lots of big

00:06:02,280 --> 00:06:06,509
companies having their own ISAs in the

00:06:04,560 --> 00:06:08,310
past those companies are gone those ISAs

00:06:06,509 --> 00:06:09,360
are unsupported so there's no guarantee

00:06:08,310 --> 00:06:11,550
that just because there's a large

00:06:09,360 --> 00:06:16,560
corporation backing something like an

00:06:11,550 --> 00:06:18,240
ISA that it's gonna last forever so what

00:06:16,560 --> 00:06:20,969
are the benefits of having a free and

00:06:18,240 --> 00:06:22,770
open ISA well some of these are kind of

00:06:20,969 --> 00:06:23,849
obvious so greater innovation would be a

00:06:22,770 --> 00:06:26,460
free market competition

00:06:23,849 --> 00:06:28,349
so because the ISA is standardized and

00:06:26,460 --> 00:06:30,960
anybody is allowed to implement cores

00:06:28,349 --> 00:06:32,909
that match that is a you can have lots

00:06:30,960 --> 00:06:35,130
of different cores both closed source

00:06:32,909 --> 00:06:38,250
and open source and you get competition

00:06:35,130 --> 00:06:41,150
that way you can have shared open core

00:06:38,250 --> 00:06:43,540
designs so most are I'd say large Quon

00:06:41,150 --> 00:06:46,760
of systems that get built the

00:06:43,540 --> 00:06:48,500
performance of the actual core onboard

00:06:46,760 --> 00:06:50,990
is not the differentiator of the product

00:06:48,500 --> 00:06:52,370
right so in that case really all the all

00:06:50,990 --> 00:06:53,660
the designer needs is just some core

00:06:52,370 --> 00:06:56,240
that works and executes instructions

00:06:53,660 --> 00:06:58,810
fairly well and so having these shared

00:06:56,240 --> 00:07:00,680
open designs is really good

00:06:58,810 --> 00:07:02,480
processors need to become more

00:07:00,680 --> 00:07:04,760
affordable for more and more types of

00:07:02,480 --> 00:07:06,470
devices so their devices like IOT

00:07:04,760 --> 00:07:08,390
devices where you really want cheap

00:07:06,470 --> 00:07:10,220
things so if you can get something free

00:07:08,390 --> 00:07:12,050
and open-source and you know it doesn't

00:07:10,220 --> 00:07:14,480
need to be the fastest CPU out there

00:07:12,050 --> 00:07:18,050
this is this is another good way to do

00:07:14,480 --> 00:07:19,580
it and software stacks can survive a

00:07:18,050 --> 00:07:21,200
long time when kind of the people

00:07:19,580 --> 00:07:23,660
working on them are distributed not

00:07:21,200 --> 00:07:25,520
related to just one company and you can

00:07:23,660 --> 00:07:27,530
upgrade the software you need to be able

00:07:25,520 --> 00:07:28,790
to upgrade the software in systems that

00:07:27,530 --> 00:07:31,160
for example have been embedded in

00:07:28,790 --> 00:07:33,920
concrete right for IOT type devices so

00:07:31,160 --> 00:07:36,740
you need long-term support to make these

00:07:33,920 --> 00:07:39,350
kinds of things work and then lastly a

00:07:36,740 --> 00:07:40,940
big thing that has developed in the

00:07:39,350 --> 00:07:43,040
systems research community is that you

00:07:40,940 --> 00:07:44,600
can do really good practical research

00:07:43,040 --> 00:07:46,430
because of all the open-source system

00:07:44,600 --> 00:07:49,010
software that's available there so in

00:07:46,430 --> 00:07:51,320
architecture kind of the the field is

00:07:49,010 --> 00:07:52,670
more narrow in this regard so we want to

00:07:51,320 --> 00:07:54,890
make architecture research much more

00:07:52,670 --> 00:07:59,180
real by having fully open hardware

00:07:54,890 --> 00:08:01,430
stacks and coming and then having all

00:07:59,180 --> 00:08:02,960
the software pre-built on top so someone

00:08:01,430 --> 00:08:04,490
who's doing research can modify real

00:08:02,960 --> 00:08:06,620
cores that are actually used in real

00:08:04,490 --> 00:08:08,540
devices if they're open-source and they

00:08:06,620 --> 00:08:10,400
get all the software effort that's been

00:08:08,540 --> 00:08:15,770
put into you know porting things like

00:08:10,400 --> 00:08:17,480
GCC and all that stuff for free so where

00:08:15,770 --> 00:08:21,050
did risk 5 come from

00:08:17,480 --> 00:08:23,620
so back in 2010 after lots and lots of

00:08:21,050 --> 00:08:25,370
years using various ISAs for projects

00:08:23,620 --> 00:08:28,220
computer architecture research

00:08:25,370 --> 00:08:30,200
researchers at Berkeley took a look at

00:08:28,220 --> 00:08:33,590
what kinds of ISAs they wanted to use

00:08:30,200 --> 00:08:35,750
for their next sets of projects a couple

00:08:33,590 --> 00:08:37,910
of obvious choices here so there's x86

00:08:35,750 --> 00:08:40,250
and arm if you think about implanting

00:08:37,910 --> 00:08:41,660
with x86 well first off it's too

00:08:40,250 --> 00:08:44,030
complicated so you know we'll probably

00:08:41,660 --> 00:08:46,190
take a couple of PhDs to get a processor

00:08:44,030 --> 00:08:49,280
that works in the first place and then

00:08:46,190 --> 00:08:51,710
you get sued right so that's no good and

00:08:49,280 --> 00:08:53,390
you know just as a sample of this

00:08:51,710 --> 00:08:54,660
complexity you can look at something

00:08:53,390 --> 00:08:57,300
like the AAA

00:08:54,660 --> 00:09:00,000
instruction Intel x86 you know this does

00:08:57,300 --> 00:09:02,129
something really complicated for for BCD

00:09:00,000 --> 00:09:04,769
math but it's a single byte instruction

00:09:02,129 --> 00:09:06,600
and you know it's not really that

00:09:04,769 --> 00:09:07,740
important in modern machines but

00:09:06,600 --> 00:09:11,069
something you have to implement if you

00:09:07,740 --> 00:09:13,199
want an x86 compatible processor we can

00:09:11,069 --> 00:09:14,730
say the same thing about arm when you're

00:09:13,199 --> 00:09:17,009
trying to implement kind of a nice

00:09:14,730 --> 00:09:18,899
simple processor it's pretty complicated

00:09:17,009 --> 00:09:20,399
and then in the end you either have to

00:09:18,899 --> 00:09:23,730
pay a lot of money or you get sued so

00:09:20,399 --> 00:09:25,709
same problem in the end and so at

00:09:23,730 --> 00:09:28,319
berkeley we started a three month

00:09:25,709 --> 00:09:30,930
project back in the summer of 2010 to

00:09:28,319 --> 00:09:33,259
develop our own clean slate is a so the

00:09:30,930 --> 00:09:36,029
principal designers are listed here

00:09:33,259 --> 00:09:37,439
and a lot of them are now involved in a

00:09:36,029 --> 00:09:41,430
start-up that's that's building cores

00:09:37,439 --> 00:09:43,350
based on risk v some more background so

00:09:41,430 --> 00:09:45,930
I said so I said three-month project

00:09:43,350 --> 00:09:49,230
it's in quotes for a reason if you jump

00:09:45,930 --> 00:09:52,470
to four years later in May 2014 we

00:09:49,230 --> 00:09:54,480
released the base frozen user spec and

00:09:52,470 --> 00:09:55,860
on the way we had lots of chip tape outs

00:09:54,480 --> 00:09:57,720
that we'll talk about in a couple of

00:09:55,860 --> 00:09:59,790
slides and lots of research publications

00:09:57,720 --> 00:10:02,009
we're really dogfooding this and using

00:09:59,790 --> 00:10:06,269
risk v to actually develop systems that

00:10:02,009 --> 00:10:09,000
we use for research the name risk v was

00:10:06,269 --> 00:10:11,250
chosen to represent the kind of history

00:10:09,000 --> 00:10:13,110
of RISC design at Berkeley so there are

00:10:11,250 --> 00:10:16,199
the original risk publications back in

00:10:13,110 --> 00:10:18,209
1981 and a variety of revisions of that

00:10:16,199 --> 00:10:19,800
and further developments all the way to

00:10:18,209 --> 00:10:22,290
spur and a lot of these implement

00:10:19,800 --> 00:10:25,050
influenced architectures like spark for

00:10:22,290 --> 00:10:27,290
example so risk 5 is kind of the fifth

00:10:25,050 --> 00:10:30,800
version of risk coming out of Berkeley

00:10:27,290 --> 00:10:33,120
and then if you jump forward August 2014

00:10:30,800 --> 00:10:35,310
Articles of Incorporation were filed to

00:10:33,120 --> 00:10:37,529
create a non-profit risk v foundation to

00:10:35,310 --> 00:10:39,389
govern the ISA and kind of make sure it

00:10:37,529 --> 00:10:40,889
develops without a particular special

00:10:39,389 --> 00:10:45,269
interest like berkeley controlling the

00:10:40,889 --> 00:10:47,309
whole thing so what is risk v not so

00:10:45,269 --> 00:10:49,079
it's important to distinguish the fact

00:10:47,309 --> 00:10:51,420
that risk v is not an open-source

00:10:49,079 --> 00:10:54,149
processor so it's just an is a

00:10:51,420 --> 00:10:55,709
specification not any set of course so

00:10:54,149 --> 00:10:59,160
at berkeley we do develop open source

00:10:55,709 --> 00:11:01,529
cores that that implements the RS 5 is a

00:10:59,160 --> 00:11:03,660
but the ISA stands alone it's its own

00:11:01,529 --> 00:11:06,389
entity and it's open source because

00:11:03,660 --> 00:11:08,310
anybody is allowed to implement things

00:11:06,389 --> 00:11:09,570
that conform to the ISA

00:11:08,310 --> 00:11:13,380
you won't get sued for implementing a

00:11:09,570 --> 00:11:15,029
risk five core for example and the

00:11:13,380 --> 00:11:16,950
reason for doing this this way is that

00:11:15,029 --> 00:11:18,600
most of the costs of chip design is in

00:11:16,950 --> 00:11:20,400
the software so bringing up the huge

00:11:18,600 --> 00:11:23,279
software stacks that run on a particular

00:11:20,400 --> 00:11:25,200
chip in advance conforming to one

00:11:23,279 --> 00:11:26,820
standard is a means you can reuse this

00:11:25,200 --> 00:11:30,210
across a bunch of different chip designs

00:11:26,820 --> 00:11:32,820
and the goal the foundation essentially

00:11:30,210 --> 00:11:35,730
is to kind of make sure the ISA grows

00:11:32,820 --> 00:11:37,950
well has feedback from the community and

00:11:35,730 --> 00:11:39,660
and we want to encourage both open

00:11:37,950 --> 00:11:41,970
source and proprietary implementations

00:11:39,660 --> 00:11:44,640
of the RISC 5 specification so it's not

00:11:41,970 --> 00:11:46,589
it's not designed so that everything has

00:11:44,640 --> 00:11:47,970
to be open source so this way companies

00:11:46,589 --> 00:11:50,040
can use it to kind of build their own

00:11:47,970 --> 00:11:52,260
closed source cores with special sauce

00:11:50,040 --> 00:11:53,880
on top so that they don't have to open

00:11:52,260 --> 00:11:57,330
source that kind of stuff they don't

00:11:53,880 --> 00:11:59,339
want to a brief history of the cores at

00:11:57,330 --> 00:12:01,350
Berkeley so these are all cores that

00:11:59,339 --> 00:12:03,390
have been designed at Berkeley fabbed

00:12:01,350 --> 00:12:05,250
and we actually have the chips back they

00:12:03,390 --> 00:12:07,020
run things like Linux on top they're

00:12:05,250 --> 00:12:08,279
fairly performant especially given that

00:12:07,020 --> 00:12:11,400
they're written by you know a couple of

00:12:08,279 --> 00:12:13,560
grad students and we fab them in pretty

00:12:11,400 --> 00:12:15,420
modern processes and you know this this

00:12:13,560 --> 00:12:17,520
timeline keeps going we keep sending out

00:12:15,420 --> 00:12:19,350
chips to fab we can keep getting them

00:12:17,520 --> 00:12:21,150
back and they get better and better so

00:12:19,350 --> 00:12:24,630
we have actual implementations of RISC

00:12:21,150 --> 00:12:26,130
five out there and there are other

00:12:24,630 --> 00:12:28,350
companies and startups working on

00:12:26,130 --> 00:12:30,510
building them too

00:12:28,350 --> 00:12:32,040
just quickly to show you the backing

00:12:30,510 --> 00:12:36,210
behind RISC 5 now there are a lot of

00:12:32,040 --> 00:12:37,620
companies that have joined into the into

00:12:36,210 --> 00:12:39,990
the RIS 5 foundation so there's a bunch

00:12:37,620 --> 00:12:41,630
of industrial sponsors who have paid

00:12:39,990 --> 00:12:44,339
money to participate in the RISC 5

00:12:41,630 --> 00:12:45,960
standards standardization processes and

00:12:44,339 --> 00:12:48,660
kind of directing however escribe works

00:12:45,960 --> 00:12:50,670
and into the future another set another

00:12:48,660 --> 00:12:55,110
slide full of more companies that are

00:12:50,670 --> 00:12:59,820
also contributing so I'll talk quickly

00:12:55,110 --> 00:13:02,010
about the actual ISA itself so there are

00:12:59,820 --> 00:13:04,110
at the base three different address

00:13:02,010 --> 00:13:05,970
space variants defined so there's 32-bit

00:13:04,110 --> 00:13:08,160
four you know embedded type system

00:13:05,970 --> 00:13:09,959
64-bit which is your current you know

00:13:08,160 --> 00:13:12,600
standard server class desktop class

00:13:09,959 --> 00:13:15,870
machine and then there's also a 128-bit

00:13:12,600 --> 00:13:17,610
address space provision in the ISA for

00:13:15,870 --> 00:13:19,140
kind of future use and larger data

00:13:17,610 --> 00:13:22,060
center global address space type

00:13:19,140 --> 00:13:25,210
environments the base

00:13:22,060 --> 00:13:27,100
is a consists of only about less than 50

00:13:25,210 --> 00:13:28,960
integer instructions but this is enough

00:13:27,100 --> 00:13:30,850
to you know some support compiler linker

00:13:28,960 --> 00:13:35,230
your operating system - privileged

00:13:30,850 --> 00:13:37,090
instructions and then the designer risk

00:13:35,230 --> 00:13:39,880
5 makes it really easy to add extensions

00:13:37,090 --> 00:13:43,090
on top so the idea is that unlike other

00:13:39,880 --> 00:13:45,100
ISAs or previous ISAs things that get

00:13:43,090 --> 00:13:46,960
bolted on later get bolted on into

00:13:45,100 --> 00:13:48,970
specific areas that are predefined in

00:13:46,960 --> 00:13:51,010
the specification so that it's very easy

00:13:48,970 --> 00:13:53,620
to you know in the future have a piece

00:13:51,010 --> 00:13:55,570
of software that can tell exactly what

00:13:53,620 --> 00:13:57,220
version of the ISA the processor

00:13:55,570 --> 00:13:59,410
implements and all of that functionality

00:13:57,220 --> 00:14:00,370
is based it baked into the ISA at the

00:13:59,410 --> 00:14:02,080
beginning so all of that feature

00:14:00,370 --> 00:14:05,590
detection all that stuff is pre planned

00:14:02,080 --> 00:14:07,510
out and so more standard extensions

00:14:05,590 --> 00:14:11,020
provide things for the general purpose I

00:14:07,510 --> 00:14:13,900
say like floating point and and Atomics

00:14:11,020 --> 00:14:17,050
and stuff like that so if you look at is

00:14:13,900 --> 00:14:19,120
a level metrics so the very comparable

00:14:17,050 --> 00:14:20,920
to other risks and in fact there's some

00:14:19,120 --> 00:14:22,990
recent tech reports out of Berkeley that

00:14:20,920 --> 00:14:25,750
do things like compared to even more is

00:14:22,990 --> 00:14:28,060
A's x86 arm talked about cool things

00:14:25,750 --> 00:14:31,660
like makarov fusion and breaking things

00:14:28,060 --> 00:14:33,790
in a micro ops and so on so like I said

00:14:31,660 --> 00:14:36,040
earlier the ISA is really designed for

00:14:33,790 --> 00:14:37,720
extension and customization so the idea

00:14:36,040 --> 00:14:39,070
is that we know that people are going to

00:14:37,720 --> 00:14:41,590
want to add things to the ISA in the

00:14:39,070 --> 00:14:43,750
future both in standard extensions and

00:14:41,590 --> 00:14:46,140
non-standard extensions so the ISA is

00:14:43,750 --> 00:14:49,270
designed to be able to adapt very well

00:14:46,140 --> 00:14:50,530
to to future extension without breaking

00:14:49,270 --> 00:14:53,740
everything and making things like

00:14:50,530 --> 00:14:55,840
virtualization really hard and like I

00:14:53,740 --> 00:14:57,520
said earlier we've had 12 64-bit silicon

00:14:55,840 --> 00:14:59,920
prototypes so they're actually real

00:14:57,520 --> 00:15:03,820
implementations of RISC 5 that we have

00:14:59,920 --> 00:15:06,070
we run Linux on stuff like that so more

00:15:03,820 --> 00:15:07,510
stuff about the actual is a so there are

00:15:06,070 --> 00:15:10,120
a couple of instruction formats for the

00:15:07,510 --> 00:15:12,460
base is a all the instructions in the

00:15:10,120 --> 00:15:15,130
base I say are 32-bit fixed-width

00:15:12,460 --> 00:15:18,490
naturally aligned relatively simple

00:15:15,130 --> 00:15:19,650
there's the usual 31 integer registers

00:15:18,490 --> 00:15:24,730
plus a hardwired

00:15:19,650 --> 00:15:26,250
0x0 register a neat thing is that RDR s

00:15:24,730 --> 00:15:28,870
1 and RS 2 are all in a fixed location

00:15:26,250 --> 00:15:31,240
and there are no implicit registers like

00:15:28,870 --> 00:15:34,030
for example in that AAA instruction that

00:15:31,240 --> 00:15:35,730
uses some some specific set of registers

00:15:34,030 --> 00:15:38,040
that's not actually part of not

00:15:35,730 --> 00:15:41,279
noted in the instruction itself so here

00:15:38,040 --> 00:15:43,560
you know like Rd is specified you know

00:15:41,279 --> 00:15:44,070
what at when you look at the instruction

00:15:43,560 --> 00:15:45,750
itself

00:15:44,070 --> 00:15:48,170
what registers it's using and there's no

00:15:45,750 --> 00:15:50,339
magic happening behind the scenes

00:15:48,170 --> 00:15:52,380
another feature is that the immediate

00:15:50,339 --> 00:15:53,639
field is always sign extended so if you

00:15:52,380 --> 00:15:56,070
look at something like MIPS there are a

00:15:53,639 --> 00:15:57,600
bunch of rules about how when things get

00:15:56,070 --> 00:15:59,610
sign extended your extended none of that

00:15:57,600 --> 00:16:02,810
stuff happening here it's easy to

00:15:59,610 --> 00:16:05,040
remember everything get sign extended

00:16:02,810 --> 00:16:06,959
floating-point adding the floating-point

00:16:05,040 --> 00:16:08,910
extension adds floating point registers

00:16:06,959 --> 00:16:11,579
floating point control status registers

00:16:08,910 --> 00:16:14,579
and also some extra instruction formats

00:16:11,579 --> 00:16:16,440
for example for fuse multiply add where

00:16:14,579 --> 00:16:20,100
you need additional registers in your in

00:16:16,440 --> 00:16:21,959
specified in your instruction and the

00:16:20,100 --> 00:16:23,519
base is a is designed to very neatly

00:16:21,959 --> 00:16:25,350
allow things like position independent

00:16:23,519 --> 00:16:31,170
code and dynamic linking without kind of

00:16:25,350 --> 00:16:33,060
weird hacks okay so what is our V 64 G

00:16:31,170 --> 00:16:34,769
so I'm pointing out our V 64 G because

00:16:33,060 --> 00:16:37,620
this is the general-purpose is a and

00:16:34,769 --> 00:16:41,430
this is what qmu implements right now in

00:16:37,620 --> 00:16:43,079
in our version of QM u so G stands for G

00:16:41,430 --> 00:16:46,620
is general-purpose but includes the

00:16:43,079 --> 00:16:48,329
standard extensions ima FD so I is the

00:16:46,620 --> 00:16:49,620
base integer is a that I was talking

00:16:48,329 --> 00:16:52,050
about on the previous couple of slides

00:16:49,620 --> 00:16:53,339
then you have a bunch of other standard

00:16:52,050 --> 00:16:54,959
things that you might want in kind of

00:16:53,339 --> 00:16:57,569
regular desktop class or server class

00:16:54,959 --> 00:16:59,610
system so you have standard integer

00:16:57,569 --> 00:17:02,329
multiply and divide extension standard

00:16:59,610 --> 00:17:05,699
Atomics and then 32-bit and 64-bit

00:17:02,329 --> 00:17:06,689
floating-point extensions and like I

00:17:05,699 --> 00:17:08,520
said this is the standard

00:17:06,689 --> 00:17:10,740
general-purpose version of the ISA and

00:17:08,520 --> 00:17:11,730
this is what qmu implements - the

00:17:10,740 --> 00:17:16,740
privileged part which we'll talk about

00:17:11,730 --> 00:17:18,600
in a second so so so far what I showed

00:17:16,740 --> 00:17:20,699
you is stuff that's standardized so the

00:17:18,600 --> 00:17:24,270
user level is a is frozen standardized

00:17:20,699 --> 00:17:25,380
and not subject to change so on the

00:17:24,270 --> 00:17:26,579
other hand we have our privilege

00:17:25,380 --> 00:17:29,520
specification which is still under

00:17:26,579 --> 00:17:31,740
development so I'll tell you how it is

00:17:29,520 --> 00:17:33,030
kind of as it stands but some of this

00:17:31,740 --> 00:17:35,280
stuff is subject to change in the future

00:17:33,030 --> 00:17:37,049
so right now there are four privileged

00:17:35,280 --> 00:17:39,929
modes so you have user supervisor

00:17:37,049 --> 00:17:42,510
hypervisor and machine mode machine mode

00:17:39,929 --> 00:17:44,159
is required in every single system but a

00:17:42,510 --> 00:17:46,350
common case is to do something like

00:17:44,159 --> 00:17:47,880
provide machine mode supervisor mode and

00:17:46,350 --> 00:17:49,400
user mode for running things like

00:17:47,880 --> 00:17:53,030
unix-like operating systems

00:17:49,400 --> 00:17:54,620
this is what qmu does right now then you

00:17:53,030 --> 00:17:57,470
have to worry about kind of your memory

00:17:54,620 --> 00:17:59,540
translation type stuff so the virtual

00:17:57,470 --> 00:18:01,070
memory architecture is basically

00:17:59,540 --> 00:18:03,020
designed to support you know standard

00:18:01,070 --> 00:18:04,400
unix-like operating system so there's

00:18:03,020 --> 00:18:07,250
nothing crazy going on here

00:18:04,400 --> 00:18:11,750
for example the SV 39 spec that's used

00:18:07,250 --> 00:18:12,950
in risk in RB 64 which 64-bit risk 5 you

00:18:11,750 --> 00:18:14,630
know you got the regular stuff so you

00:18:12,950 --> 00:18:17,660
get a demand page virtual address space

00:18:14,630 --> 00:18:20,030
in this case SV 39 means it's a 30 39

00:18:17,660 --> 00:18:22,040
bit virtual address space 3 level page

00:18:20,030 --> 00:18:25,600
table and you can have pages of various

00:18:22,040 --> 00:18:28,190
size with the standard being 4 KB and

00:18:25,600 --> 00:18:29,810
there are a variety of different address

00:18:28,190 --> 00:18:31,010
space sizes depending on what your

00:18:29,810 --> 00:18:34,330
system needs and these are all

00:18:31,010 --> 00:18:37,010
standardized in the specification so

00:18:34,330 --> 00:18:38,120
this is a particularly interesting here

00:18:37,010 --> 00:18:39,920
I'll talk very briefly about

00:18:38,120 --> 00:18:42,200
virtualization kind of in the classic

00:18:39,920 --> 00:18:44,180
sense so virtualization is something

00:18:42,200 --> 00:18:46,010
that is sort of baked into the ISA from

00:18:44,180 --> 00:18:47,870
the beginning so we're trying to pay

00:18:46,010 --> 00:18:50,300
attention and make sure that you know

00:18:47,870 --> 00:18:52,310
it's easy to virtualize our system so

00:18:50,300 --> 00:18:55,010
even if you're just using user

00:18:52,310 --> 00:18:57,680
supervisor and machine modes respite is

00:18:55,010 --> 00:18:59,360
designed to be virtualized able in that

00:18:57,680 --> 00:19:00,830
sense so this is a quote directly from

00:18:59,360 --> 00:19:02,570
the manual to show that designers are

00:19:00,830 --> 00:19:04,940
paying attention right the privileged

00:19:02,570 --> 00:19:06,770
architecture is designed to simplify the

00:19:04,940 --> 00:19:09,020
use of classic virtualization techniques

00:19:06,770 --> 00:19:11,360
where the guest OS is run at user level

00:19:09,020 --> 00:19:13,400
and as the few privileged instructions

00:19:11,360 --> 00:19:16,280
can be easily detected and tracked right

00:19:13,400 --> 00:19:18,800
so I'll talk briefly about avoiding some

00:19:16,280 --> 00:19:21,200
classical virtualization pitfalls in the

00:19:18,800 --> 00:19:23,210
context of the original VMware paper

00:19:21,200 --> 00:19:26,300
that described some of the hardships

00:19:23,210 --> 00:19:28,070
they had in adding virtualization on an

00:19:26,300 --> 00:19:30,830
operating system running on top of x86

00:19:28,070 --> 00:19:32,840
so one of these things was handling

00:19:30,830 --> 00:19:35,360
sensitive but unprivileged instructions

00:19:32,840 --> 00:19:38,090
so if you look at this paper when they

00:19:35,360 --> 00:19:40,040
were building vmware for x86 they have

00:19:38,090 --> 00:19:41,930
this quote table to lists the 19

00:19:40,040 --> 00:19:43,700
instructions of the x86 architecture

00:19:41,930 --> 00:19:46,400
that unfortunately violated copic and

00:19:43,700 --> 00:19:48,800
Goldberg's rule and hence made the x86

00:19:46,400 --> 00:19:50,540
non-virtualized bowl at least without

00:19:48,800 --> 00:19:53,630
without kind of hacking things

00:19:50,540 --> 00:19:55,780
so in RISC 5 there's no such hidden

00:19:53,630 --> 00:19:58,370
privilege state reads or writes going on

00:19:55,780 --> 00:20:00,320
so there's a small set of privileged

00:19:58,370 --> 00:20:02,060
instructions that can modify the space

00:20:00,320 --> 00:20:03,320
of privileged state which we call

00:20:02,060 --> 00:20:05,390
control status register

00:20:03,320 --> 00:20:07,910
and this is kind of its own address

00:20:05,390 --> 00:20:10,100
space of specific registers and encoded

00:20:07,910 --> 00:20:12,290
in the register numbers themselves is

00:20:10,100 --> 00:20:14,390
information about permissions like what

00:20:12,290 --> 00:20:16,880
kind of mode you have to be in to read

00:20:14,390 --> 00:20:20,059
or write this particular register and as

00:20:16,880 --> 00:20:21,799
a result it's very easy to to tell you

00:20:20,059 --> 00:20:23,480
know based on what mode you're in what

00:20:21,799 --> 00:20:25,160
kind of modifications are allowed so as

00:20:23,480 --> 00:20:27,770
a result it's very easy to do you know

00:20:25,160 --> 00:20:29,179
the regular run things natively and do

00:20:27,770 --> 00:20:30,920
trap and emulate for privileged

00:20:29,179 --> 00:20:32,870
instructions when you encounter them

00:20:30,920 --> 00:20:34,490
when you're trying to virtualize so risk

00:20:32,870 --> 00:20:36,140
five basically doesn't have this this

00:20:34,490 --> 00:20:39,200
problem of hidden privilege state reads

00:20:36,140 --> 00:20:41,090
and writes next up is dealing with

00:20:39,200 --> 00:20:44,059
changes in virtual machine memory so

00:20:41,090 --> 00:20:46,400
kind of management stuff so for the

00:20:44,059 --> 00:20:47,780
original vmware this is quote privileged

00:20:46,400 --> 00:20:49,700
hardware registers contain the address

00:20:47,780 --> 00:20:52,299
of segment descriptor tables and page

00:20:49,700 --> 00:20:54,890
tables but these things get modified by

00:20:52,299 --> 00:20:58,130
regular loads and stores that obviously

00:20:54,890 --> 00:20:59,260
don't trap and so you can't tell this is

00:20:58,130 --> 00:21:01,700
going on

00:20:59,260 --> 00:21:03,350
so in RISC five you still use regular

00:21:01,700 --> 00:21:06,169
loads and stores to modify memory

00:21:03,350 --> 00:21:08,419
management state but by spec you're

00:21:06,169 --> 00:21:11,210
required to have this s fence VM

00:21:08,419 --> 00:21:14,240
instruction after your loads and stores

00:21:11,210 --> 00:21:15,980
that modify like a page table so this is

00:21:14,240 --> 00:21:17,210
a privilege instruction as a result if

00:21:15,980 --> 00:21:18,799
you're running this in user mode it'll

00:21:17,210 --> 00:21:21,830
trap and you'll know and you can do your

00:21:18,799 --> 00:21:25,460
usual emulation to fix things up in your

00:21:21,830 --> 00:21:27,530
monitor last up is virtualizing

00:21:25,460 --> 00:21:30,020
segmentation this is kind of easiest fix

00:21:27,530 --> 00:21:31,490
so I had to paraphrase this paragraph

00:21:30,020 --> 00:21:34,040
here because it's too complicated to put

00:21:31,490 --> 00:21:36,380
on the slide but essentially there's you

00:21:34,040 --> 00:21:37,970
know a variety of hidden state that a

00:21:36,380 --> 00:21:40,460
large amount of hidden state that gets

00:21:37,970 --> 00:21:42,169
modified in x86 when you do things like

00:21:40,460 --> 00:21:45,140
mess with segment descriptor tables and

00:21:42,169 --> 00:21:47,690
registers in RISC five the fix is easy

00:21:45,140 --> 00:21:48,590
there's no x86 style segmentation so

00:21:47,690 --> 00:21:51,620
there's no this none of this

00:21:48,590 --> 00:21:53,660
segmentation on top of paging so if you

00:21:51,620 --> 00:21:56,720
want this kind of limited base inbounds

00:21:53,660 --> 00:21:58,940
mode this is this is available in in

00:21:56,720 --> 00:22:00,290
machine mode and stuff like that and you

00:21:58,940 --> 00:22:02,720
get a couple of segments you get this

00:22:00,290 --> 00:22:04,730
kind of neat easy protection but we

00:22:02,720 --> 00:22:08,059
expect that regular systems will use

00:22:04,730 --> 00:22:09,169
paging instead and so as we're low we

00:22:08,059 --> 00:22:10,850
don't have this problem with hidden

00:22:09,169 --> 00:22:12,530
state getting modified with segment

00:22:10,850 --> 00:22:14,390
dealing with segments and stuff like

00:22:12,530 --> 00:22:16,190
that so all of our memory management

00:22:14,390 --> 00:22:18,909
happens through pages and it's

00:22:16,190 --> 00:22:22,039
and easy to detect what's going on

00:22:18,909 --> 00:22:24,470
another thing about the ISA is that the

00:22:22,039 --> 00:22:26,389
sort of logical breakdown of software

00:22:24,470 --> 00:22:28,340
inside the ISA is designed to make it

00:22:26,389 --> 00:22:29,990
very easy to virtualize so this idea of

00:22:28,340 --> 00:22:32,059
having these like clean abstractions

00:22:29,990 --> 00:22:34,429
inside of software that's running on the

00:22:32,059 --> 00:22:36,139
I say is supposed to make it very easy

00:22:34,429 --> 00:22:39,200
to kind of swap out any of these base

00:22:36,139 --> 00:22:40,789
components and virtualize so the idea is

00:22:39,200 --> 00:22:43,700
that we want to provide very clean

00:22:40,789 --> 00:22:46,429
well-defined layers inside the software

00:22:43,700 --> 00:22:47,629
stack itself so you know something

00:22:46,429 --> 00:22:50,059
that's already common you know your

00:22:47,629 --> 00:22:52,250
applications communicate with the OS 4

00:22:50,059 --> 00:22:56,299
via some application binary interface so

00:22:52,250 --> 00:22:57,860
that's no different but what we want to

00:22:56,299 --> 00:22:59,870
do in RISC fives extend this all the way

00:22:57,860 --> 00:23:01,850
down the stack so for example your OS

00:22:59,870 --> 00:23:04,220
now is going to communicate via some

00:23:01,850 --> 00:23:05,990
supervisor binary interface to a

00:23:04,220 --> 00:23:07,820
supervisor execution environment that's

00:23:05,990 --> 00:23:10,370
provided by some more privileged

00:23:07,820 --> 00:23:13,250
software and you can extend this down to

00:23:10,370 --> 00:23:15,139
hypervisors and so on so the idea is

00:23:13,250 --> 00:23:19,039
that all levels of the ISA are designed

00:23:15,139 --> 00:23:21,110
in advance to support virtualization but

00:23:19,039 --> 00:23:23,419
of course we need your help for this so

00:23:21,110 --> 00:23:25,340
the hypervisor specification right now

00:23:23,419 --> 00:23:26,600
is an empty chapter in the privileged

00:23:25,340 --> 00:23:28,820
specification so it's something that's

00:23:26,600 --> 00:23:30,769
kind of being worked on right now what

00:23:28,820 --> 00:23:33,169
you can do with the current privileged

00:23:30,769 --> 00:23:35,149
design is have this m-mode monitor that

00:23:33,169 --> 00:23:36,830
provides very simple physical resource

00:23:35,149 --> 00:23:39,110
partitioning and can act as a very

00:23:36,830 --> 00:23:41,179
simple hypervisor of course we want to

00:23:39,110 --> 00:23:42,919
have more full-featured hypervisors on

00:23:41,179 --> 00:23:45,740
top so there will be a hypervisor

00:23:42,919 --> 00:23:47,149
extension specification like I said it's

00:23:45,740 --> 00:23:49,460
an empty slot in the privileged

00:23:47,149 --> 00:23:51,289
architecture design right now if you're

00:23:49,460 --> 00:23:53,149
interested in getting involved in this I

00:23:51,289 --> 00:23:56,360
would encourage you to join the is a dev

00:23:53,149 --> 00:23:57,889
mailing list the idea is that someone

00:23:56,360 --> 00:23:59,480
will write up kind of a first draft of

00:23:57,889 --> 00:24:01,759
this and then drafts will make the

00:23:59,480 --> 00:24:04,429
rounds on the is a dev mailing list we

00:24:01,759 --> 00:24:06,500
take feedback things get fixed up and

00:24:04,429 --> 00:24:09,080
and it'll make its way through different

00:24:06,500 --> 00:24:10,730
committees in the in the foundation and

00:24:09,080 --> 00:24:16,279
eventually get approved after we kind of

00:24:10,730 --> 00:24:17,929
know it works well last kind of specific

00:24:16,279 --> 00:24:20,389
thing about risk 5 I'll talk about the

00:24:17,929 --> 00:24:23,419
risk 5 ecosystem itself so we have a

00:24:20,389 --> 00:24:25,340
bunch of software built up so you know

00:24:23,419 --> 00:24:29,119
your regular compilers and stuff we have

00:24:25,340 --> 00:24:29,660
GCC we have G Lib C gdb available LLVM

00:24:29,119 --> 00:24:32,000
and clang

00:24:29,660 --> 00:24:34,550
there - we have a Linux port that's

00:24:32,000 --> 00:24:36,290
being improved on pretty rapidly but

00:24:34,550 --> 00:24:38,510
boots up you can kind of work with it

00:24:36,290 --> 00:24:41,180
type in commands a command line run a

00:24:38,510 --> 00:24:43,490
shell whatever we have Yocto which

00:24:41,180 --> 00:24:45,410
generates embedded distributions for

00:24:43,490 --> 00:24:47,300
kind of small embedded systems we also

00:24:45,410 --> 00:24:50,200
have a verification suite of standard

00:24:47,300 --> 00:24:52,430
tests that we hope will be expanded on -

00:24:50,200 --> 00:24:55,190
I'll quickly go through the hardware we

00:24:52,430 --> 00:24:57,140
have so we have some FPGA infrastructure

00:24:55,190 --> 00:24:59,330
if you want to buy an FPGA and put your

00:24:57,140 --> 00:25:02,270
own risk 5 cores on there I'll talk

00:24:59,330 --> 00:25:03,860
about chisel and a couple of slides so

00:25:02,270 --> 00:25:05,690
I'll skip that for now in terms of

00:25:03,860 --> 00:25:07,340
software implementations we have spike

00:25:05,690 --> 00:25:09,200
which is our golden standard is a

00:25:07,340 --> 00:25:10,970
simulator so the thing about spike and

00:25:09,200 --> 00:25:12,530
the reason we call it golden standard is

00:25:10,970 --> 00:25:15,710
that spike is written by the same people

00:25:12,530 --> 00:25:18,020
that write the specs for the ISA and so

00:25:15,710 --> 00:25:20,540
as a result you know you can run against

00:25:18,020 --> 00:25:22,370
it and kind of say that if spike does

00:25:20,540 --> 00:25:24,110
something you're allowed to do it and

00:25:22,370 --> 00:25:25,690
that's that's how we do some testing and

00:25:24,110 --> 00:25:28,220
I'll talk about that towards the end

00:25:25,690 --> 00:25:29,570
then we have angel javascript is a

00:25:28,220 --> 00:25:31,670
simulator if you're interested you can

00:25:29,570 --> 00:25:35,300
go to risk 5 org slash angel and watch

00:25:31,670 --> 00:25:36,740
it boot Linux in a browser then qmu

00:25:35,300 --> 00:25:38,090
obviously which i'll talk about in a

00:25:36,740 --> 00:25:39,260
second and then we have a bunch of

00:25:38,090 --> 00:25:41,450
hardware implementation so we have

00:25:39,260 --> 00:25:44,300
rocket chip or the rocket core which is

00:25:41,450 --> 00:25:46,520
a RB 64g single issue in order pipeline

00:25:44,300 --> 00:25:48,200
we have the sodor processors which are

00:25:46,520 --> 00:25:49,790
educational processors and then we also

00:25:48,200 --> 00:25:52,280
have boom which is our kind of

00:25:49,790 --> 00:25:54,160
large-scale out-of-order processor and

00:25:52,280 --> 00:25:56,300
we have we've shown in the past

00:25:54,160 --> 00:26:01,100
comparable metrics to a variety of ARM

00:25:56,300 --> 00:26:02,840
cores ok so why this talk is here right

00:26:01,100 --> 00:26:05,750
I'll talk a little bit about risk 5

00:26:02,840 --> 00:26:07,940
target support for qmu so right now this

00:26:05,750 --> 00:26:08,990
is maintained on the RISC 5 organization

00:26:07,940 --> 00:26:10,700
on github

00:26:08,990 --> 00:26:12,170
we're obviously hoping to upstream and

00:26:10,700 --> 00:26:14,600
I'll talk about what we want to do for

00:26:12,170 --> 00:26:17,000
up streaming in a couple of slides this

00:26:14,600 --> 00:26:18,920
is maintained here we have qmu full

00:26:17,000 --> 00:26:22,760
system emulation no Linux user mode

00:26:18,920 --> 00:26:25,040
right now on modern x86 the kind of

00:26:22,760 --> 00:26:28,760
funny thing is that qmu is the fastest

00:26:25,040 --> 00:26:31,700
RISC 5 implementation so this will

00:26:28,760 --> 00:26:33,710
probably be in clips in you know a year

00:26:31,700 --> 00:26:36,770
or two as real core start to come out

00:26:33,710 --> 00:26:37,850
but right now we're the fastest and a

00:26:36,770 --> 00:26:39,710
cool thing is that this has been a

00:26:37,850 --> 00:26:41,480
really big help in developing software

00:26:39,710 --> 00:26:43,220
for RISC 5 especially when we don't have

00:26:41,480 --> 00:26:46,309
you know really powerful

00:26:43,220 --> 00:26:48,200
in grade cores to develop software on so

00:26:46,309 --> 00:26:50,630
real quick I got to show the obligatory

00:26:48,200 --> 00:26:52,340
you know slide that shows it work so on

00:26:50,630 --> 00:26:53,840
the left-hand side a spike booting Linux

00:26:52,340 --> 00:26:56,809
on the right-hand side QM you already

00:26:53,840 --> 00:26:59,059
finished and so you'll see spike finish

00:26:56,809 --> 00:27:02,450
up and you know you can run commands and

00:26:59,059 --> 00:27:05,270
do whatever with it so that show it

00:27:02,450 --> 00:27:07,250
works I'll talk briefly about the

00:27:05,270 --> 00:27:10,370
timeline of RISC 5 first a lot of things

00:27:07,250 --> 00:27:12,080
happened first on qmu because we started

00:27:10,370 --> 00:27:15,440
qmu development back when i was an

00:27:12,080 --> 00:27:17,059
undergrad in 2014 it was like May 2014

00:27:15,440 --> 00:27:19,340
or something and I started working on

00:27:17,059 --> 00:27:22,400
qmu about a month later we had the first

00:27:19,340 --> 00:27:26,030
Linux boot on qmu and it was immediately

00:27:22,400 --> 00:27:27,950
the fastest risk 5 implementation then

00:27:26,030 --> 00:27:29,690
it was also the first verse 5

00:27:27,950 --> 00:27:32,240
implementation that had tcp/ip

00:27:29,690 --> 00:27:33,950
networking so we had Verdejo networking

00:27:32,240 --> 00:27:36,350
devices you could associate into this

00:27:33,950 --> 00:27:39,289
you know you could interact with a GUI

00:27:36,350 --> 00:27:42,409
on top of Linux running through VNC and

00:27:39,289 --> 00:27:43,960
stuff like that then it was also part of

00:27:42,409 --> 00:27:47,000
the first Python bring up so the first

00:27:43,960 --> 00:27:50,260
time that real software and Python was

00:27:47,000 --> 00:27:52,940
run on top of RISC 5 happened on qmu

00:27:50,260 --> 00:27:54,799
also the first Java bring up happened on

00:27:52,940 --> 00:27:56,870
qmu and something I think is

00:27:54,799 --> 00:27:59,150
particularly cool is that the first risk

00:27:56,870 --> 00:28:03,289
5 core built on a risk on a risk 5

00:27:59,150 --> 00:28:04,909
system happened in qmu so I'll talk

00:28:03,289 --> 00:28:08,210
briefly about how we build chips at

00:28:04,909 --> 00:28:10,100
Berkeley so we have our own DSL for

00:28:08,210 --> 00:28:12,350
developing chips called chisel so the

00:28:10,100 --> 00:28:14,570
idea it's not like high-level synthesis

00:28:12,350 --> 00:28:16,429
it's not like you write a C program and

00:28:14,570 --> 00:28:18,080
it converts it into a circuit chisel is

00:28:16,429 --> 00:28:19,820
a way to make it easier to develop

00:28:18,080 --> 00:28:21,320
Hardware kind of in this in a similar

00:28:19,820 --> 00:28:23,059
fashion to what you would do in Barrel

00:28:21,320 --> 00:28:25,220
logs you still are describing hardware

00:28:23,059 --> 00:28:27,110
but the idea is that you apply good

00:28:25,220 --> 00:28:30,710
software engineering techniques and good

00:28:27,110 --> 00:28:32,990
programming language features to to

00:28:30,710 --> 00:28:35,539
designing hardware so chisel is a DSL

00:28:32,990 --> 00:28:37,909
that's embedded in Scala for for

00:28:35,539 --> 00:28:39,260
generating hardware so in order to

00:28:37,909 --> 00:28:42,320
actually fab chips though we ultimately

00:28:39,260 --> 00:28:43,789
need to produce very log so we write all

00:28:42,320 --> 00:28:45,590
of our chips and chisels so all of those

00:28:43,789 --> 00:28:47,390
chips and all those dye photos I showed

00:28:45,590 --> 00:28:49,460
a couple of slides ago those are all

00:28:47,390 --> 00:28:52,700
written in chisel and then we run the

00:28:49,460 --> 00:28:54,289
chisel compiler runs on the JVM to to

00:28:52,700 --> 00:28:56,870
emit very log that then goes through all

00:28:54,289 --> 00:28:59,090
the CAD tools so here pretty cool

00:28:56,870 --> 00:29:01,640
had an undergrad who brought up a simple

00:28:59,090 --> 00:29:05,210
JVM port the interpreted version after

00:29:01,640 --> 00:29:06,950
quite a bit of work and so here this is

00:29:05,210 --> 00:29:09,140
running inside qmu it's probably hard to

00:29:06,950 --> 00:29:11,120
see back there but this is taking the

00:29:09,140 --> 00:29:14,960
chisel source for our Sodor one stays

00:29:11,120 --> 00:29:16,850
one stage educational course and running

00:29:14,960 --> 00:29:18,650
that on top of QM you on a risk five

00:29:16,850 --> 00:29:20,510
system and annum it's very log that then

00:29:18,650 --> 00:29:22,190
you can do then then you can for example

00:29:20,510 --> 00:29:23,780
put through CAD tool so although this is

00:29:22,190 --> 00:29:25,760
pretty cool it's kind of sort of the

00:29:23,780 --> 00:29:29,450
first self hosting risk five system in a

00:29:25,760 --> 00:29:33,050
way then continuing with risk by first

00:29:29,450 --> 00:29:35,570
so next thing we did early 2016 is bump

00:29:33,050 --> 00:29:37,490
privilege spec so the privilege spec is

00:29:35,570 --> 00:29:38,570
still evolving and this was a pretty big

00:29:37,490 --> 00:29:41,270
jump

00:29:38,570 --> 00:29:44,840
and so we upgraded to a new privilege

00:29:41,270 --> 00:29:45,920
spec along with that came the first

00:29:44,840 --> 00:29:48,440
verse five system that you could

00:29:45,920 --> 00:29:51,530
remotely debug with gdb using TM use gdb

00:29:48,440 --> 00:29:54,170
server and then we did another bump to

00:29:51,530 --> 00:29:56,540
the privilege 1.9 spec a couple of weeks

00:29:54,170 --> 00:29:59,120
ago and hopefully we want to start up

00:29:56,540 --> 00:30:00,470
streaming very soon as soon as I

00:29:59,120 --> 00:30:04,580
finished my preliminary exams in

00:30:00,470 --> 00:30:07,010
mid-september so a little bit more about

00:30:04,580 --> 00:30:09,230
risk 5 target support so what do we

00:30:07,010 --> 00:30:11,270
support well we started support back in

00:30:09,230 --> 00:30:13,370
2014 as I showed you on the last slide

00:30:11,270 --> 00:30:16,820
and we've been revising things as the

00:30:13,370 --> 00:30:19,970
ISA evolves itself so we support our V

00:30:16,820 --> 00:30:22,280
64 G full system emulation user is a

00:30:19,970 --> 00:30:24,080
support has been largely unchanged since

00:30:22,280 --> 00:30:26,540
then it's been standardized at version

00:30:24,080 --> 00:30:29,420
2.0 the privilege I say is getting close

00:30:26,540 --> 00:30:32,480
to standardization at least the machine

00:30:29,420 --> 00:30:34,850
supervisor and user modes that's at 1.9

00:30:32,480 --> 00:30:37,880
so in risk v 2.0 usually means you know

00:30:34,850 --> 00:30:39,500
standard frozen version the nice thing

00:30:37,880 --> 00:30:41,480
though is that future privilege spec

00:30:39,500 --> 00:30:44,120
upgrades to key mu will be much simpler

00:30:41,480 --> 00:30:45,620
because we we kind of embedded some

00:30:44,120 --> 00:30:49,400
spike code at least in the non

00:30:45,620 --> 00:30:52,040
performance critical areas to into qmu

00:30:49,400 --> 00:30:54,440
so it's much easier to embed fit to bump

00:30:52,040 --> 00:30:56,510
things in the future so before we did

00:30:54,440 --> 00:30:58,880
this so back in the pre privileges back

00:30:56,510 --> 00:31:01,550
1.7 days when I had to bump it to the

00:30:58,880 --> 00:31:03,679
1.7 spec it took like a month to do the

00:31:01,550 --> 00:31:06,410
to do the bring up and make sure that

00:31:03,679 --> 00:31:09,140
everything works correctly but then a

00:31:06,410 --> 00:31:10,820
couple of weeks ago I did the 1.7 to 1.9

00:31:09,140 --> 00:31:12,590
bump I basically generated

00:31:10,820 --> 00:31:14,659
giant diff with spike and then applied

00:31:12,590 --> 00:31:16,399
it manually kind of thinking of looking

00:31:14,659 --> 00:31:18,259
at what changed this time it only took

00:31:16,399 --> 00:31:20,779
three days instead of a month and so

00:31:18,259 --> 00:31:23,029
it's much cleaner to to have changes go

00:31:20,779 --> 00:31:26,210
on here obviously kind of once things

00:31:23,029 --> 00:31:28,279
are solid in privilege land we want to

00:31:26,210 --> 00:31:32,149
optimize anything that's optimizable and

00:31:28,279 --> 00:31:33,529
clean things up there another important

00:31:32,149 --> 00:31:35,570
feature is that I oh right now is

00:31:33,529 --> 00:31:38,149
limited to host target interface devices

00:31:35,570 --> 00:31:40,190
so host target interface or H diff is

00:31:38,149 --> 00:31:42,710
are is kind of a relic from the days

00:31:40,190 --> 00:31:45,200
when we when we built so from when we

00:31:42,710 --> 00:31:46,850
build test ships essentially but right

00:31:45,200 --> 00:31:48,350
now this is enough to boot Linux you can

00:31:46,850 --> 00:31:50,600
interact with it through a console

00:31:48,350 --> 00:31:52,159
there's a hdf console device we

00:31:50,600 --> 00:31:53,720
previously had lots of other devices

00:31:52,159 --> 00:31:55,639
kind of shoehorned in before we had a

00:31:53,720 --> 00:31:58,370
real privilege before sorry before we

00:31:55,639 --> 00:31:59,600
had a real platform substation right now

00:31:58,370 --> 00:32:01,700
we're working on platform

00:31:59,600 --> 00:32:03,409
standardization and adding back software

00:32:01,700 --> 00:32:06,230
support for a bunch of devices

00:32:03,409 --> 00:32:09,559
especially things like linux but to look

00:32:06,230 --> 00:32:11,990
at what hardware is kind of in qmu right

00:32:09,559 --> 00:32:13,970
now this is a memory map that you'll see

00:32:11,990 --> 00:32:16,610
and it's providing a reference board

00:32:13,970 --> 00:32:19,129
that's designed to match what spike does

00:32:16,610 --> 00:32:21,470
right now so it's giving a very simple

00:32:19,129 --> 00:32:23,450
hardware configuration there's an H diff

00:32:21,470 --> 00:32:25,100
based console that's used for kind of

00:32:23,450 --> 00:32:27,529
boot messages and Linux and you know you

00:32:25,100 --> 00:32:29,480
get your terminal to work with

00:32:27,529 --> 00:32:31,580
there's also loopback software interrupt

00:32:29,480 --> 00:32:34,639
emulation as the privileged spec

00:32:31,580 --> 00:32:35,870
requires there's also an RTC and timers

00:32:34,639 --> 00:32:38,659
that are compliant with the privileged

00:32:35,870 --> 00:32:40,070
spec then a reset vector this is ideally

00:32:38,659 --> 00:32:42,830
where you'd put like a secure boot ROM

00:32:40,070 --> 00:32:44,000
or something like that but it's just a

00:32:42,830 --> 00:32:45,679
little bit of embedded code right now

00:32:44,000 --> 00:32:48,019
embedded risk 5 assembly right now and

00:32:45,679 --> 00:32:49,789
then there's a configuration string so

00:32:48,019 --> 00:32:51,830
there's discussion going on on the

00:32:49,789 --> 00:32:53,570
mailing list exactly how about how this

00:32:51,830 --> 00:32:55,159
configuration string should look right

00:32:53,570 --> 00:32:56,899
now it's kind of a custom thing I think

00:32:55,159 --> 00:32:59,179
they're moving towards having standard

00:32:56,899 --> 00:33:00,980
device tree instead of this custom

00:32:59,179 --> 00:33:02,330
configuration string but basically this

00:33:00,980 --> 00:33:04,129
gets mapped into memory you have your

00:33:02,330 --> 00:33:05,990
DRAM up here and then all of your

00:33:04,129 --> 00:33:09,649
devices live down in the lower region of

00:33:05,990 --> 00:33:12,799
memory very quickly what is happening to

00:33:09,649 --> 00:33:15,559
H diff and our new debug system so like

00:33:12,799 --> 00:33:18,350
I said H diff is a relic of Berkley test

00:33:15,559 --> 00:33:20,779
chips it's getting phased out basically

00:33:18,350 --> 00:33:22,279
it was to 64-bit registers called from

00:33:20,779 --> 00:33:24,470
hosts and to hosts and these were a

00:33:22,279 --> 00:33:26,510
largely tethered system so you'd have

00:33:24,470 --> 00:33:28,549
FPGA with a dotter board where the chip

00:33:26,510 --> 00:33:32,120
that we got fabbed would sit on top and

00:33:28,549 --> 00:33:33,890
all io would be dealt with by by stuff

00:33:32,120 --> 00:33:36,919
on the FPGA so that we didn't have to

00:33:33,890 --> 00:33:38,900
have big complicated custom io IP on

00:33:36,919 --> 00:33:39,980
these test ships so this is something

00:33:38,900 --> 00:33:41,390
that's getting phased out

00:33:39,980 --> 00:33:43,220
it used to be able to provide things

00:33:41,390 --> 00:33:45,200
like networking a block device and a

00:33:43,220 --> 00:33:48,169
console in addition to the standard

00:33:45,200 --> 00:33:51,020
Verdi of stuff that qmu had now it's

00:33:48,169 --> 00:33:53,570
only for console and signalling test

00:33:51,020 --> 00:33:55,820
completion which I'll talk about in a

00:33:53,570 --> 00:33:57,950
second but what we want to replace this

00:33:55,820 --> 00:34:00,020
with is the RISC five standard debug

00:33:57,950 --> 00:34:02,000
spec so the idea is that we want to make

00:34:00,020 --> 00:34:03,980
it much easier to debug real chips once

00:34:02,000 --> 00:34:05,840
you get them this is something that's in

00:34:03,980 --> 00:34:08,330
the process of being standardized - and

00:34:05,840 --> 00:34:10,359
it's going to replace h-24 sort of the

00:34:08,330 --> 00:34:13,460
debugging features that HTF used to have

00:34:10,359 --> 00:34:15,619
and of course for real hardware and real

00:34:13,460 --> 00:34:18,020
software simulators and virtualization

00:34:15,619 --> 00:34:20,060
environments they'll phase out htif and

00:34:18,020 --> 00:34:22,429
move to standard devices as soon as

00:34:20,060 --> 00:34:24,109
software support progresses so kind of

00:34:22,429 --> 00:34:26,419
what happened is that all of the H diff

00:34:24,109 --> 00:34:28,940
code and Linux got stripped out first

00:34:26,419 --> 00:34:30,440
before we had other device support but

00:34:28,940 --> 00:34:33,589
other device support is slowly getting

00:34:30,440 --> 00:34:35,750
added back in so I'll very quickly talk

00:34:33,589 --> 00:34:38,359
about what the software stack running

00:34:35,750 --> 00:34:41,060
inside qmu will look like so essentially

00:34:38,359 --> 00:34:44,629
you have some m-mode that runs your

00:34:41,060 --> 00:34:46,220
secure boot and some monitor code so in

00:34:44,629 --> 00:34:48,260
this case it's called bbl it's the

00:34:46,220 --> 00:34:49,820
berkeley bootloader and i'll talk about

00:34:48,260 --> 00:34:52,159
exactly what that does in the next slide

00:34:49,820 --> 00:34:54,740
then s mode supervisor mode will run

00:34:52,159 --> 00:34:57,430
your your OS and the idea here is the OS

00:34:54,740 --> 00:34:59,300
always runs virtualized so the OS has

00:34:57,430 --> 00:35:01,099
interacts with the rest of the hardware

00:34:59,300 --> 00:35:03,320
through the SBI and if you get these

00:35:01,099 --> 00:35:05,210
nice clean interfaces and so operating

00:35:03,320 --> 00:35:06,859
systems can run directly on Hardware if

00:35:05,210 --> 00:35:09,080
if you have hardware that provides an

00:35:06,859 --> 00:35:11,240
SBI and does kind of all the management

00:35:09,080 --> 00:35:13,700
in elsewhere either in hardware or other

00:35:11,240 --> 00:35:15,260
cores or something like that but you can

00:35:13,700 --> 00:35:17,089
also do this you know using a bootloader

00:35:15,260 --> 00:35:19,220
and having some monitor mode or having

00:35:17,089 --> 00:35:23,089
you know hypervisors and stuff sitting

00:35:19,220 --> 00:35:25,040
there providing the spi and then user

00:35:23,089 --> 00:35:26,930
mode can run applications on top of

00:35:25,040 --> 00:35:28,810
either the OS or directly on em mode if

00:35:26,930 --> 00:35:31,700
your M mode monitor supports doing that

00:35:28,810 --> 00:35:33,830
so how this thing boots up so you supply

00:35:31,700 --> 00:35:35,750
a binary to qmu which contains the

00:35:33,830 --> 00:35:38,030
bootloader and as the bootloader is

00:35:35,750 --> 00:35:40,490
payload you have Linux for

00:35:38,030 --> 00:35:42,590
so the bootloader berkley bootloader

00:35:40,490 --> 00:35:44,750
performs machine mode management of the

00:35:42,590 --> 00:35:46,760
system and it exposes an SBI to

00:35:44,750 --> 00:35:49,070
operating system so for example when

00:35:46,760 --> 00:35:52,190
Linux wants to print to the HTF console

00:35:49,070 --> 00:35:54,920
it'll make an SBI call and M mode the M

00:35:52,190 --> 00:35:57,020
mode machine M mode management code will

00:35:54,920 --> 00:35:59,060
do that for Linux so Linux doesn't have

00:35:57,020 --> 00:36:01,730
to deal with this the idea here is that

00:35:59,060 --> 00:36:05,030
in the long term you can write device

00:36:01,730 --> 00:36:06,470
drivers that run in in kind of outside

00:36:05,030 --> 00:36:08,240
of the OS so that you don't have to keep

00:36:06,470 --> 00:36:09,170
writing new drivers for every new OS

00:36:08,240 --> 00:36:11,120
that gets developed

00:36:09,170 --> 00:36:12,650
instead OS is interact with the outside

00:36:11,120 --> 00:36:15,380
world through a standardized interface

00:36:12,650 --> 00:36:18,440
in this case our Linux also includes

00:36:15,380 --> 00:36:21,050
entry on FS so that we don't have to

00:36:18,440 --> 00:36:22,520
deal with block devices but we had to

00:36:21,050 --> 00:36:25,190
support for that previously and it'll

00:36:22,520 --> 00:36:27,290
get put back in very soon so the way

00:36:25,190 --> 00:36:29,090
this thing boots up is system boots into

00:36:27,290 --> 00:36:31,250
your hard coded boot ROM it'll jump into

00:36:29,090 --> 00:36:34,070
bbl bbl will do all this management

00:36:31,250 --> 00:36:35,780
that's listed up here it'll initialize

00:36:34,070 --> 00:36:38,210
the supervisor execution environment

00:36:35,780 --> 00:36:41,240
that the OS expects to see and then it

00:36:38,210 --> 00:36:44,300
will run the the kernel in this case

00:36:41,240 --> 00:36:46,820
Linux I'll talk a little bit about

00:36:44,300 --> 00:36:48,110
testing and debugging so of course when

00:36:46,820 --> 00:36:50,090
you're bringing it up you have the usual

00:36:48,110 --> 00:36:53,600
you know gdb brute force thinking really

00:36:50,090 --> 00:36:56,060
hard type debugging but now it passes

00:36:53,600 --> 00:36:58,430
the risk 5 standard test suite it boots

00:36:56,060 --> 00:37:00,290
Linux - as I showed earlier we can run

00:36:58,430 --> 00:37:02,360
reasonably large software stacks on top

00:37:00,290 --> 00:37:04,880
so on Python we've done things like

00:37:02,360 --> 00:37:07,760
running image processing research stuff

00:37:04,880 --> 00:37:09,350
on top so we developed all this stuff in

00:37:07,760 --> 00:37:10,760
qmu and then eventually with some

00:37:09,350 --> 00:37:14,600
fiddling got it to run on real hardware

00:37:10,760 --> 00:37:17,240
- we did stuff on top of the JVM like I

00:37:14,600 --> 00:37:18,860
showed you building things in chisel and

00:37:17,240 --> 00:37:22,610
so we've run reasonably large software

00:37:18,860 --> 00:37:24,950
stock stacks on top of qmu on Linux

00:37:22,610 --> 00:37:28,580
I'll talk real quick about fuzz testing

00:37:24,950 --> 00:37:30,410
against the golden standard so we have

00:37:28,580 --> 00:37:32,270
this framework called risk 5 torture

00:37:30,410 --> 00:37:33,560
essentially what it does is it'll

00:37:32,270 --> 00:37:35,300
generate a random sequence of

00:37:33,560 --> 00:37:37,100
instructions based on some parameters

00:37:35,300 --> 00:37:38,900
that you supply it so you give it some

00:37:37,100 --> 00:37:40,310
mix that you expect you know some

00:37:38,900 --> 00:37:42,350
fraction of memory instructions some

00:37:40,310 --> 00:37:44,420
fraction of floating-point Atomics

00:37:42,350 --> 00:37:46,460
whatever it'll generate a sequence and

00:37:44,420 --> 00:37:48,320
then since we have this golden standard

00:37:46,460 --> 00:37:50,840
implementation that is always supposed

00:37:48,320 --> 00:37:51,960
to be right which is spiked essentially

00:37:50,840 --> 00:37:55,440
what we do

00:37:51,960 --> 00:37:57,660
is we run we run our code this generated

00:37:55,440 --> 00:37:58,980
code on both spike and some alternate

00:37:57,660 --> 00:38:00,960
implementation that you have in this

00:37:58,980 --> 00:38:03,180
case P mu and then what happens at the

00:38:00,960 --> 00:38:04,800
end is you dump some signature in this

00:38:03,180 --> 00:38:07,530
case just all the registers State and

00:38:04,800 --> 00:38:09,180
you compare so if you generate if you

00:38:07,530 --> 00:38:11,400
output something that doesn't match what

00:38:09,180 --> 00:38:12,900
spike says it should be then you do some

00:38:11,400 --> 00:38:14,670
type of binary search to pinpoint

00:38:12,900 --> 00:38:16,260
exactly the instruction where things go

00:38:14,670 --> 00:38:19,170
wrong and I get to report it to the

00:38:16,260 --> 00:38:21,300
person running the tests and I made

00:38:19,170 --> 00:38:24,359
scripts to run torture on top of our

00:38:21,300 --> 00:38:27,780
version of QM you publicly available and

00:38:24,359 --> 00:38:29,580
I've we have accumulated 384 hours of

00:38:27,780 --> 00:38:31,260
failure free testing since I restarted

00:38:29,580 --> 00:38:33,119
the thing after the priviledge 1.9

00:38:31,260 --> 00:38:34,770
update so I kind of took a bet hard

00:38:33,119 --> 00:38:36,030
coding this number in here since I had

00:38:34,770 --> 00:38:37,410
to submit the slides a couple days ago

00:38:36,030 --> 00:38:39,359
but luckily it didn't crash in the last

00:38:37,410 --> 00:38:41,670
two days so the number is still correct

00:38:39,359 --> 00:38:43,650
so ever since we did the privilege 1.9

00:38:41,670 --> 00:38:46,410
update we haven't had any crashes

00:38:43,650 --> 00:38:48,180
reported by torture so things looking

00:38:46,410 --> 00:38:50,550
good in that regard

00:38:48,180 --> 00:38:53,970
last thing I'll do is compare lines of

00:38:50,550 --> 00:38:58,530
code which I know is very unfair but arm

00:38:53,970 --> 00:39:02,760
has 45,000 MIPS s 37,000 x86 is 30,000

00:38:58,530 --> 00:39:04,170
risk 5 is only 5,000 at this point so of

00:39:02,760 --> 00:39:05,880
course you know this is not fair because

00:39:04,170 --> 00:39:07,859
we don't have all the legacy to deal

00:39:05,880 --> 00:39:09,240
with but this is just a show that we

00:39:07,859 --> 00:39:10,980
have kind of reasonable amount of code

00:39:09,240 --> 00:39:13,770
and this is with essentially no work

00:39:10,980 --> 00:39:15,869
done to to kind of simplify things or

00:39:13,770 --> 00:39:18,060
you know clean out things that are

00:39:15,869 --> 00:39:20,670
duplicated in places so this could

00:39:18,060 --> 00:39:21,660
probably be improved pretty decently and

00:39:20,670 --> 00:39:25,050
that's definitely something we want to

00:39:21,660 --> 00:39:26,670
do so last thing I'll talk about is what

00:39:25,050 --> 00:39:28,890
we have left to do and what we want to

00:39:26,670 --> 00:39:30,390
do in the future so in terms of

00:39:28,890 --> 00:39:33,630
functionality we definitely want to add

00:39:30,390 --> 00:39:36,060
standard device support so this is

00:39:33,630 --> 00:39:38,550
mostly on the Linux end thing that needs

00:39:36,060 --> 00:39:40,349
to be done on Linux there's some stuff

00:39:38,550 --> 00:39:42,060
to be done in qmu like the standard

00:39:40,349 --> 00:39:42,869
platform level interrupt controller but

00:39:42,060 --> 00:39:45,180
of course that hasn't really been

00:39:42,869 --> 00:39:47,040
standardized there is a version of that

00:39:45,180 --> 00:39:48,300
specked out in the current privileged

00:39:47,040 --> 00:39:50,430
specification though so that's something

00:39:48,300 --> 00:39:51,930
that needs to be implemented and of

00:39:50,430 --> 00:39:54,750
course up streaming so we're planning to

00:39:51,930 --> 00:39:57,510
start up streaming in mid-september I

00:39:54,750 --> 00:40:00,230
submitted a very large patch as I was

00:39:57,510 --> 00:40:03,000
advised to just to show that the the

00:40:00,230 --> 00:40:05,350
target support exists because we were

00:40:03,000 --> 00:40:07,930
interested in potentially doing chuseok

00:40:05,350 --> 00:40:10,720
and we got some feedback anyway on that

00:40:07,930 --> 00:40:12,700
patch some good stuff for example has

00:40:10,720 --> 00:40:14,290
already been done like using the

00:40:12,700 --> 00:40:17,170
built-in FPU instead of our custom

00:40:14,290 --> 00:40:18,820
version of soft float and the torture

00:40:17,170 --> 00:40:20,860
tester also helps make sure that

00:40:18,820 --> 00:40:23,710
something like this is done right which

00:40:20,860 --> 00:40:26,020
is pretty useful more recently I bumped

00:40:23,710 --> 00:40:27,430
to the 1.9 privilege spec which took a

00:40:26,020 --> 00:40:29,710
lot less time than previously so

00:40:27,430 --> 00:40:31,720
hopefully that's encouraging as to how

00:40:29,710 --> 00:40:33,250
stable things are getting there a couple

00:40:31,720 --> 00:40:34,540
of two news left to do so there's a

00:40:33,250 --> 00:40:36,970
little bit more cleanup to be done

00:40:34,540 --> 00:40:38,770
mostly I think style wise to get things

00:40:36,970 --> 00:40:41,620
in the right place before we upstream

00:40:38,770 --> 00:40:43,780
then we need to rebase the master so

00:40:41,620 --> 00:40:45,160
it's kupets we're currently using a

00:40:43,780 --> 00:40:49,720
version of qmu from I think like

00:40:45,160 --> 00:40:51,370
December January 2016 so we need to

00:40:49,720 --> 00:40:53,170
rebase and then we also need to break

00:40:51,370 --> 00:40:55,000
things into you know small neat patches

00:40:53,170 --> 00:40:57,670
to get things up streaming luckily I

00:40:55,000 --> 00:40:59,650
have the maintainer of tricor helping me

00:40:57,670 --> 00:41:02,050
out here who recently up upstream that

00:40:59,650 --> 00:41:03,670
and then in the future we also want to

00:41:02,050 --> 00:41:05,770
do things like support other is a

00:41:03,670 --> 00:41:07,660
variants so our v32

00:41:05,770 --> 00:41:09,570
the compressed is a and then also add

00:41:07,660 --> 00:41:12,400
support for things like linux user mode

00:41:09,570 --> 00:41:19,420
and with that thank you and i'll open up

00:41:12,400 --> 00:41:20,830
for questions we only have three minutes

00:41:19,420 --> 00:41:23,380
left so let's just quickly go through my

00:41:20,830 --> 00:41:24,820
like ten nodes line of you the first

00:41:23,380 --> 00:41:29,230
thing is how does it compare to open

00:41:24,820 --> 00:41:30,550
risk so compared to open risk there are

00:41:29,230 --> 00:41:32,920
a couple of kind of administrative

00:41:30,550 --> 00:41:35,320
things there I think the main one was

00:41:32,920 --> 00:41:36,940
when they started working on risk 5 so

00:41:35,320 --> 00:41:38,740
I'm not directly involved in actual

00:41:36,940 --> 00:41:40,570
development of specs or anything when

00:41:38,740 --> 00:41:42,280
they started working on risk 5 open risk

00:41:40,570 --> 00:41:44,920
I think didn't have like 64-bit support

00:41:42,280 --> 00:41:46,090
it wasn't exactly clear how that support

00:41:44,920 --> 00:41:48,250
would be added and stuff like that

00:41:46,090 --> 00:41:50,320
especially the same just a different

00:41:48,250 --> 00:41:52,270
like Varian yeah all right make sense

00:41:50,320 --> 00:41:56,170
all the new as h4 stuff that is not at

00:41:52,270 --> 00:41:57,490
age 4 yeah all right so some some

00:41:56,170 --> 00:42:00,310
pitfalls that we've seen in the arm

00:41:57,490 --> 00:42:02,140
world it gets complicated once you get

00:42:00,310 --> 00:42:03,430
to privileged load in unlike real chips

00:42:02,140 --> 00:42:05,440
not not an emulation because an

00:42:03,430 --> 00:42:07,360
emulation everything's easy but if you

00:42:05,440 --> 00:42:09,640
go for real chips and try to model

00:42:07,360 --> 00:42:11,590
caches and you try to model like cache

00:42:09,640 --> 00:42:13,870
coherency big cross a cluster across

00:42:11,590 --> 00:42:16,780
cluster of clusters it starts getting

00:42:13,870 --> 00:42:17,810
messy very quickly yeah so give that

00:42:16,780 --> 00:42:21,230
more

00:42:17,810 --> 00:42:22,730
than you thought you should since that's

00:42:21,230 --> 00:42:25,310
a really good chance you you will do it

00:42:22,730 --> 00:42:28,790
wrong and in general the basic rule of

00:42:25,310 --> 00:42:31,100
thumb is make software easier that will

00:42:28,790 --> 00:42:32,380
eventually make your life easier as well

00:42:31,100 --> 00:42:35,720
yeah

00:42:32,380 --> 00:42:39,740
do you know resume sorry do you know a

00:42:35,720 --> 00:42:41,890
project called resue RI as you know it's

00:42:39,740 --> 00:42:45,110
basically your torture test forearm okay

00:42:41,890 --> 00:42:46,610
well for any platform that you like but

00:42:45,110 --> 00:42:48,200
right now I don't think it implements

00:42:46,610 --> 00:42:50,360
anything but oh okay

00:42:48,200 --> 00:42:52,130
but it's the same framework same thing

00:42:50,360 --> 00:42:54,050
just a generic framework for for torture

00:42:52,130 --> 00:42:55,370
testing and you might want to take a

00:42:54,050 --> 00:42:57,500
look you basically just define a set of

00:42:55,370 --> 00:43:01,160
instructions and run that it realized

00:42:57,500 --> 00:43:04,040
some Linux use emulation okay one thing

00:43:01,160 --> 00:43:08,120
I totally have to talk about is as OBS

00:43:04,040 --> 00:43:10,010
so we basically had Sousa did the didn't

00:43:08,120 --> 00:43:12,500
I'm 64 bring off a fold it looks like

00:43:10,010 --> 00:43:14,150
top to bottom way way way way way before

00:43:12,500 --> 00:43:15,560
there was any hardware any working

00:43:14,150 --> 00:43:17,090
simulator that you would really want to

00:43:15,560 --> 00:43:20,050
use because the arm simulator is

00:43:17,090 --> 00:43:23,210
probably slower than even your slow one

00:43:20,050 --> 00:43:24,530
all using the Knox use emulation so we

00:43:23,210 --> 00:43:27,530
basically have all the frameworks there

00:43:24,530 --> 00:43:29,300
if you want them to just completely run

00:43:27,530 --> 00:43:31,010
everything on the next 36 or even on a

00:43:29,300 --> 00:43:32,720
cluster of x86 boxes the whole thing

00:43:31,010 --> 00:43:33,890
distributes all your builds as much as

00:43:32,720 --> 00:43:37,550
you like and you just build a full

00:43:33,890 --> 00:43:40,670
distro okay if you care I guess you will

00:43:37,550 --> 00:43:41,530
event at me and then vegetation is well

00:43:40,670 --> 00:43:44,750
that's why we're here right

00:43:41,530 --> 00:43:47,600
KVM when you design which is asian

00:43:44,750 --> 00:43:50,390
extensions keep two major pitfalls in

00:43:47,600 --> 00:43:51,740
mind the first is I don't know if well

00:43:50,390 --> 00:43:53,750
you've been following the Army's their

00:43:51,740 --> 00:43:55,340
development but basically they realized

00:43:53,750 --> 00:43:56,630
after they put the first ambush now

00:43:55,340 --> 00:43:59,150
which had a very similar structure to

00:43:56,630 --> 00:44:02,000
you that there was a be a really bad

00:43:59,150 --> 00:44:04,760
idea because you do have Linux that

00:44:02,000 --> 00:44:06,380
wants to run KVM and does not want to

00:44:04,760 --> 00:44:08,120
jump back to hypervisor mode just to be

00:44:06,380 --> 00:44:11,000
able to run into to go back into a VM

00:44:08,120 --> 00:44:12,860
yeah so the whole layer mode that is the

00:44:11,000 --> 00:44:14,900
typical university approach of doing

00:44:12,860 --> 00:44:18,410
things it's not what the real world

00:44:14,900 --> 00:44:20,690
looks like so take that back as feedback

00:44:18,410 --> 00:44:23,690
so you totally do want to make sure that

00:44:20,690 --> 00:44:26,120
you well you either can go really really

00:44:23,690 --> 00:44:28,670
quickly between kernel and in hypervisor

00:44:26,120 --> 00:44:30,290
mode or just do something different like

00:44:28,670 --> 00:44:31,180
arm did where they bolted on registers

00:44:30,290 --> 00:44:32,859
to their

00:44:31,180 --> 00:44:34,329
to the hypervisor mode but then you

00:44:32,859 --> 00:44:36,550
running it to the next issue which is

00:44:34,329 --> 00:44:39,069
the other one and that's nesting keep

00:44:36,550 --> 00:44:41,260
nesting in mind even through people out

00:44:39,069 --> 00:44:42,730
basically I mean we've had that seven

00:44:41,260 --> 00:44:44,710
years ago when I first did nesting on

00:44:42,730 --> 00:44:46,510
x86 and people came along and today who

00:44:44,710 --> 00:44:48,099
needs nesting nobody cares and now you

00:44:46,510 --> 00:44:49,569
basically have already implement nesting

00:44:48,099 --> 00:44:51,730
and toilets they're the biggest thing

00:44:49,569 --> 00:44:52,750
ever we had the same thing on arm and

00:44:51,730 --> 00:44:55,210
I'm pretty sure in seven years we'll

00:44:52,750 --> 00:44:57,550
have the same discussion there it will

00:44:55,210 --> 00:45:02,160
happen to keep keep nesting in mind from

00:44:57,550 --> 00:45:02,160
the beginning there thank you

00:45:06,760 --> 00:45:16,939
[Applause]

00:45:10,240 --> 00:45:16,939

YouTube URL: https://www.youtube.com/watch?v=b5g8u3GA-lo


