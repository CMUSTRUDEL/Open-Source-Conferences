Title: Jeff Crum | Simplifying the World of Open Source Usage for Financial Institutions | FINOS OSSF 2019
Publication date: 2021-01-11
Playlist: FINOS Open Source Strategy Forum 2019
Description: 
	Jeff Crum | WhiteSource | James McLeod | FINOS | WhiteSource & FINOS: Simplifying the World of Open Source Usage for Financial Institutions | FINOS OSSF 2019

Jeff Crum, Senior Director, Product Marketing , WhiteSource
James McLeod, Director of Community, FINOS

Jeff Crum's BIO

Jeff currently leads product marketing at WhiteSource, the leader in open source security and license compliance management, and has over twenty years of experience driving company growth and building and marketing products & solutions for data protection, security, backup, storage, disaster recovery, and more. His experience includes roles in product marketing, product management, and software development at Veeam Software, EMC, Veritas.

James McLeod's BIO

James is the Director of Community at FINOS and wholeheartedly believes the transformation of Financial Services can only be fulfilled if Open Source is embraced under the three pillars of Contribution, Consumption and Community.

James has a twenty year career in software engineering having worked for telecommunication startups, the gaming industry, digital streaming platforms and financial services. Prior to joining FINOS James worked at Lloyds Banking Group where he focused on building engineering communities for Lloyds Bank, Halifax, Bank of Scotland, Scottish Widows and other LBG banks. While at Lloyds Banking Group, James also drove the adoption of Inner Source and Open Source partly through the creation of engineering guilds providing in-person and remote educational sessions and large hackathon events. James also spent a number of years consulting on software engineering projects for RBS, NatWest and Barclays.

As a member of the FINOS team, James’ ambition is to bring his extensive experience building communities to grow Financial Services into a powerhouse of Open Source. James is a true open source advocate and founded the “React London – Bring Your Own Project” meetup to provide an interactive forum for ReactJS and Javascript developers to come together. In the last two years it has grown to a membership of over 1500 individuals.

You reach James at james@finos.org to find out how you can contribute to the amazing work of the Fintech Open Source Foundation (FINOS).

-=-=-=-=-

This video is from the FINOS Open Source Strategy Forum (OSSF) NYC 2019. 

►►For free access to all 2019 videos from the conference - visit our website here: https://www.finos.org/ossf-2019-recap
 
►► More information HERE: https://events.linuxfoundation.org/open-source-strategy-forum/

Learn more about FINOS and how we deliver the power of open source to financial services:
►► FINOS: https://www.finos.org/
Captions: 
	00:00:03,690 --> 00:00:11,890
[Music]

00:00:13,200 --> 00:00:16,800
hi

00:00:13,519 --> 00:00:18,560
good afternoon so very first

00:00:16,800 --> 00:00:20,240
thing that i'd like to ask is can you

00:00:18,560 --> 00:00:22,320
hear me okay

00:00:20,240 --> 00:00:24,240
so i think that we're good to go there's

00:00:22,320 --> 00:00:25,920
um a big light in front of us and so we

00:00:24,240 --> 00:00:26,640
can't see the the guys at the back and

00:00:25,920 --> 00:00:28,800
so

00:00:26,640 --> 00:00:30,960
if you can give us a nod then i'm happy

00:00:28,800 --> 00:00:33,440
to to start

00:00:30,960 --> 00:00:35,120
right i think that's good so thank you

00:00:33,440 --> 00:00:36,559
thank you i really appreciate that

00:00:35,120 --> 00:00:38,640
so thank you everybody for being here

00:00:36,559 --> 00:00:39,360
this afternoon so my name is james

00:00:38,640 --> 00:00:41,200
macleod

00:00:39,360 --> 00:00:43,440
and i'm the director of community at

00:00:41,200 --> 00:00:44,000
finos and thank you everybody for being

00:00:43,440 --> 00:00:46,160
at the event

00:00:44,000 --> 00:00:47,280
today and thank you very much for for

00:00:46,160 --> 00:00:50,320
jeff a white source

00:00:47,280 --> 00:00:51,840
um for uh taking part in this talk you

00:00:50,320 --> 00:00:53,520
know with me as well

00:00:51,840 --> 00:00:55,280
so what we're here to talk about today

00:00:53,520 --> 00:00:56,160
is simplifying the world of open source

00:00:55,280 --> 00:00:58,559
usage

00:00:56,160 --> 00:01:01,039
for financial services and financial

00:00:58,559 --> 00:01:04,479
institutions

00:01:01,039 --> 00:01:07,520
now hands up if you are part of part of

00:01:04,479 --> 00:01:09,119
a a financial institution or a financial

00:01:07,520 --> 00:01:12,640
firm

00:01:09,119 --> 00:01:13,280
okay and the people who aren't so i know

00:01:12,640 --> 00:01:15,439
who

00:01:13,280 --> 00:01:16,880
has kind of come to our event today

00:01:15,439 --> 00:01:18,320
wanting to learn more is there anybody

00:01:16,880 --> 00:01:19,920
here who isn't part of financial

00:01:18,320 --> 00:01:23,920
services or doesn't have

00:01:19,920 --> 00:01:26,560
any right so that's great right so

00:01:23,920 --> 00:01:28,080
for those who are here and are fresh to

00:01:26,560 --> 00:01:29,360
this type of environment within

00:01:28,080 --> 00:01:31,439
financial services

00:01:29,360 --> 00:01:32,960
traditionally the people who are here

00:01:31,439 --> 00:01:35,520
who are part of finance

00:01:32,960 --> 00:01:37,200
financial institutions will recognize

00:01:35,520 --> 00:01:39,600
they're traditionally

00:01:37,200 --> 00:01:42,560
deploying software through financial

00:01:39,600 --> 00:01:44,640
services has traditionally been slow

00:01:42,560 --> 00:01:46,880
very much like the industrial revolution

00:01:44,640 --> 00:01:49,200
where products were manufactured

00:01:46,880 --> 00:01:50,720
on conveyor belts and then they would be

00:01:49,200 --> 00:01:53,280
distributed you know through

00:01:50,720 --> 00:01:54,000
another milestone and so you'll get you

00:01:53,280 --> 00:01:55,600
know to a

00:01:54,000 --> 00:01:57,360
natural release then you would

00:01:55,600 --> 00:01:58,240
distribute it you know you would take it

00:01:57,360 --> 00:02:00,960
to a factory you

00:01:58,240 --> 00:02:02,320
manufacture it then you would market it

00:02:00,960 --> 00:02:04,719
and then that marketing

00:02:02,320 --> 00:02:06,640
would actually target your customers and

00:02:04,719 --> 00:02:08,080
it was only really at the point where

00:02:06,640 --> 00:02:10,239
you got to the end of that

00:02:08,080 --> 00:02:13,040
huge chain that you actually got a

00:02:10,239 --> 00:02:14,959
feedback leap from your customers

00:02:13,040 --> 00:02:16,720
now that is you know kind of like the

00:02:14,959 --> 00:02:18,239
industrial revolution model you know and

00:02:16,720 --> 00:02:19,200
that actually applies with a lot of

00:02:18,239 --> 00:02:21,280
other products

00:02:19,200 --> 00:02:22,319
both within financial institution you

00:02:21,280 --> 00:02:24,160
know development

00:02:22,319 --> 00:02:26,319
but also outside of that as well it's

00:02:24,160 --> 00:02:28,400
basically a manufacturing model

00:02:26,319 --> 00:02:29,440
but if you apply that to software

00:02:28,400 --> 00:02:31,599
engineering

00:02:29,440 --> 00:02:33,280
and if you look at your own teams so

00:02:31,599 --> 00:02:35,360
there there are going to be some of you

00:02:33,280 --> 00:02:36,400
in the room here who might also be doing

00:02:35,360 --> 00:02:39,040
this

00:02:36,400 --> 00:02:40,400
so when it comes to actually producing

00:02:39,040 --> 00:02:42,400
software

00:02:40,400 --> 00:02:43,519
your engineering teams are kind of

00:02:42,400 --> 00:02:46,400
bringing

00:02:43,519 --> 00:02:48,080
open source materials into their

00:02:46,400 --> 00:02:50,000
development teams right at the beginning

00:02:48,080 --> 00:02:54,480
of the life cycle of their um

00:02:50,000 --> 00:02:56,560
open of their um development process

00:02:54,480 --> 00:02:58,239
and then once that is actually done that

00:02:56,560 --> 00:03:00,959
integration testing so

00:02:58,239 --> 00:03:02,800
if you then rely on any apis you know

00:03:00,959 --> 00:03:05,280
outside of your development team

00:03:02,800 --> 00:03:06,959
and if you've integrated into those apis

00:03:05,280 --> 00:03:07,840
the testing of that then goes on to

00:03:06,959 --> 00:03:10,000
another team

00:03:07,840 --> 00:03:12,159
you know and that that team then just

00:03:10,000 --> 00:03:13,519
specifically tests that integration you

00:03:12,159 --> 00:03:14,480
know whether it's working or whether

00:03:13,519 --> 00:03:16,560
it's not

00:03:14,480 --> 00:03:18,239
and then after that has come back it's

00:03:16,560 --> 00:03:20,879
passed that gets um

00:03:18,239 --> 00:03:23,519
passed down the chain to quality testing

00:03:20,879 --> 00:03:24,879
say qas or quality engineering

00:03:23,519 --> 00:03:26,959
and then when they're happy with you

00:03:24,879 --> 00:03:28,000
know the way that your application has

00:03:26,959 --> 00:03:29,840
been developed

00:03:28,000 --> 00:03:31,440
that will then go on to your security

00:03:29,840 --> 00:03:33,280
testing who does

00:03:31,440 --> 00:03:35,040
deep penetration testing or

00:03:33,280 --> 00:03:37,120
accessibility testing or

00:03:35,040 --> 00:03:38,799
anything that's um there to make sure

00:03:37,120 --> 00:03:40,000
that you're actually operating safely

00:03:38,799 --> 00:03:41,680
and securely

00:03:40,000 --> 00:03:43,360
both within the way that you're

00:03:41,680 --> 00:03:45,280
manufacturing or developing

00:03:43,360 --> 00:03:46,480
your features but also in the way that

00:03:45,280 --> 00:03:48,799
you are developing your

00:03:46,480 --> 00:03:50,959
open source as well and it's only at

00:03:48,799 --> 00:03:51,840
that point through that entire life

00:03:50,959 --> 00:03:53,840
cycle

00:03:51,840 --> 00:03:55,280
that if there's a failure you know at

00:03:53,840 --> 00:03:56,879
the end of security

00:03:55,280 --> 00:03:59,040
it comes right back to the beginning to

00:03:56,879 --> 00:04:00,080
your development team so if you've got a

00:03:59,040 --> 00:04:02,560
vulnerability in

00:04:00,080 --> 00:04:04,080
anything to do with open source at the

00:04:02,560 --> 00:04:05,599
end of that development process

00:04:04,080 --> 00:04:07,280
that's when we find out about it and

00:04:05,599 --> 00:04:10,560
that's when we need to fix it and then

00:04:07,280 --> 00:04:12,879
we have to swing back through again

00:04:10,560 --> 00:04:14,000
now in order to mitigate this and in in

00:04:12,879 --> 00:04:16,160
order to

00:04:14,000 --> 00:04:17,600
accelerate development you know we have

00:04:16,160 --> 00:04:19,840
devops now

00:04:17,600 --> 00:04:21,600
and we also have automation and we also

00:04:19,840 --> 00:04:23,759
have continuous integration and

00:04:21,600 --> 00:04:25,840
continuous you know deployment and

00:04:23,759 --> 00:04:26,800
people who are here who recognize this

00:04:25,840 --> 00:04:28,960
will see

00:04:26,800 --> 00:04:31,600
that within the development life cycle

00:04:28,960 --> 00:04:33,360
of a new wave of kind of engineering

00:04:31,600 --> 00:04:36,160
and a new way of doing things that both

00:04:33,360 --> 00:04:40,400
combines agile and software engineering

00:04:36,160 --> 00:04:40,400
we are combining um the

00:04:40,479 --> 00:04:43,680
combined power or kind of combined

00:04:43,040 --> 00:04:45,759
intellect

00:04:43,680 --> 00:04:47,360
of us as engineers into the way that

00:04:45,759 --> 00:04:49,199
we're actually um

00:04:47,360 --> 00:04:52,160
manufacturing our products now so rather

00:04:49,199 --> 00:04:54,560
than having massive life cycles and huge

00:04:52,160 --> 00:04:56,080
cycle times between development all of

00:04:54,560 --> 00:04:57,120
those manual steps and manual

00:04:56,080 --> 00:04:59,759
interventions

00:04:57,120 --> 00:05:00,960
are being automated away both with open

00:04:59,759 --> 00:05:02,720
source toolings

00:05:00,960 --> 00:05:05,120
and also other toolings that can

00:05:02,720 --> 00:05:07,039
actually remove all of those milestones

00:05:05,120 --> 00:05:09,600
and actually shorten the cycle

00:05:07,039 --> 00:05:11,520
and give us developing extremely fast

00:05:09,600 --> 00:05:13,759
and this is what cicd is

00:05:11,520 --> 00:05:16,400
and you can go from code from within

00:05:13,759 --> 00:05:18,160
github or another version control system

00:05:16,400 --> 00:05:19,520
all the way through your unit testing or

00:05:18,160 --> 00:05:21,039
your bdd testing

00:05:19,520 --> 00:05:23,120
and all the way through vulnerability

00:05:21,039 --> 00:05:24,960
scanning and other forms of security

00:05:23,120 --> 00:05:26,560
scanning all the way through into the

00:05:24,960 --> 00:05:29,280
cloud now through

00:05:26,560 --> 00:05:30,400
containers and kubernetes and other ways

00:05:29,280 --> 00:05:33,039
of getting

00:05:30,400 --> 00:05:37,120
your materials into external

00:05:33,039 --> 00:05:37,120
repositories so people can consume them

00:05:37,360 --> 00:05:41,759
now in order to accelerate further and

00:05:39,919 --> 00:05:43,440
in order to keep ourselves safe

00:05:41,759 --> 00:05:46,000
because we are actually within a

00:05:43,440 --> 00:05:47,840
regulated environment and security and

00:05:46,000 --> 00:05:51,600
keeping our consumers safe

00:05:47,840 --> 00:05:54,639
is paramount we can then bring security

00:05:51,600 --> 00:05:55,440
into this life cycle so what we actually

00:05:54,639 --> 00:05:56,880
have here

00:05:55,440 --> 00:05:58,639
are all of those kind of like

00:05:56,880 --> 00:06:00,800
manufacturing conveyor belt

00:05:58,639 --> 00:06:02,400
people that i've represented with you

00:06:00,800 --> 00:06:04,479
know like a production line

00:06:02,400 --> 00:06:06,240
out of car manufacturers being brought

00:06:04,479 --> 00:06:08,880
together in feature teams

00:06:06,240 --> 00:06:09,440
and the the kind of cycle that's um in

00:06:08,880 --> 00:06:11,039
the middle

00:06:09,440 --> 00:06:12,960
is kind of the continuous cycle of

00:06:11,039 --> 00:06:14,240
development that these feature teams

00:06:12,960 --> 00:06:17,120
bring together

00:06:14,240 --> 00:06:19,440
um so everyone's working within one team

00:06:17,120 --> 00:06:20,639
we're consuming from github and other

00:06:19,440 --> 00:06:21,840
you know kind of open source

00:06:20,639 --> 00:06:24,720
repositories in the top

00:06:21,840 --> 00:06:25,520
left and then as part of this devops

00:06:24,720 --> 00:06:27,199
cycle

00:06:25,520 --> 00:06:30,000
we're doing our vulnerability scanning

00:06:27,199 --> 00:06:31,919
as well so security follows

00:06:30,000 --> 00:06:33,199
with us and this is the premise behind

00:06:31,919 --> 00:06:35,440
devsecops

00:06:33,199 --> 00:06:37,360
so when you have devsecops you're

00:06:35,440 --> 00:06:39,759
bringing the security

00:06:37,360 --> 00:06:41,680
capability into your team and you're

00:06:39,759 --> 00:06:43,759
running the vulnerability scanning

00:06:41,680 --> 00:06:45,840
and you're also bringing security

00:06:43,759 --> 00:06:49,039
engineers into the team as well

00:06:45,840 --> 00:06:49,919
so we can get a continuous forward agile

00:06:49,039 --> 00:06:51,680
delivery

00:06:49,919 --> 00:06:53,759
and really shorten in those feedback

00:06:51,680 --> 00:06:55,120
leaps between your development teams

00:06:53,759 --> 00:06:57,360
and actually getting things out to

00:06:55,120 --> 00:06:59,680
market so your consumers also have a

00:06:57,360 --> 00:07:02,800
voice

00:06:59,680 --> 00:07:03,759
now as we accelerate fast we also need

00:07:02,800 --> 00:07:06,160
to be aware

00:07:03,759 --> 00:07:06,960
especially when we're operating in open

00:07:06,160 --> 00:07:08,720
source

00:07:06,960 --> 00:07:11,039
and where we have open source feature

00:07:08,720 --> 00:07:13,840
teams that the way that we communicate

00:07:11,039 --> 00:07:15,840
can be seen by everybody okay and so we

00:07:13,840 --> 00:07:17,360
can move fast we can mitigate things to

00:07:15,840 --> 00:07:18,960
automation and devops

00:07:17,360 --> 00:07:20,720
but we also need to be aware that

00:07:18,960 --> 00:07:21,360
anything that we write whether it's an

00:07:20,720 --> 00:07:23,120
issue

00:07:21,360 --> 00:07:24,560
or whether it's a comment or whether

00:07:23,120 --> 00:07:26,080
it's any form of feedback

00:07:24,560 --> 00:07:28,319
if it's against an open source

00:07:26,080 --> 00:07:31,360
repository within an organization

00:07:28,319 --> 00:07:34,000
that can be seen and so say for instance

00:07:31,360 --> 00:07:35,840
uh within production we actually uh find

00:07:34,000 --> 00:07:37,039
a vulnerability that needs to be solved

00:07:35,840 --> 00:07:39,120
by a team

00:07:37,039 --> 00:07:41,199
we need to be really aware that if you

00:07:39,120 --> 00:07:42,720
actually highlight that vulnerability to

00:07:41,199 --> 00:07:45,440
that team

00:07:42,720 --> 00:07:46,639
using a github issue on a public repo

00:07:45,440 --> 00:07:48,080
then a bad actor

00:07:46,639 --> 00:07:50,319
so somebody who wants to cause you

00:07:48,080 --> 00:07:53,360
damage could actually read that

00:07:50,319 --> 00:07:55,280
and so as part of finos we've actually

00:07:53,360 --> 00:07:56,160
come up with a responsible disclosure

00:07:55,280 --> 00:07:59,440
policy

00:07:56,160 --> 00:08:01,120
that we have within our uh wiki so if

00:07:59,440 --> 00:08:03,840
you go to finnos.org

00:08:01,120 --> 00:08:04,400
and then take a look at our wiki and

00:08:03,840 --> 00:08:05,840
also

00:08:04,400 --> 00:08:07,759
you know if we publish these slides

00:08:05,840 --> 00:08:10,560
after this tool you'll come to our

00:08:07,759 --> 00:08:11,120
responsible disclosure um advice and

00:08:10,560 --> 00:08:13,280
policy

00:08:11,120 --> 00:08:14,240
about what happens if you find a

00:08:13,280 --> 00:08:16,479
vulnerability

00:08:14,240 --> 00:08:17,680
within a live repo who should you

00:08:16,479 --> 00:08:20,479
actually

00:08:17,680 --> 00:08:21,520
contact within the pmc team of that

00:08:20,479 --> 00:08:23,360
project team

00:08:21,520 --> 00:08:24,720
so you can have a real discreet

00:08:23,360 --> 00:08:26,080
conversation with them

00:08:24,720 --> 00:08:28,720
and they can actually take that

00:08:26,080 --> 00:08:31,199
conversation into a private space

00:08:28,720 --> 00:08:32,640
and then do the conversations and fix it

00:08:31,199 --> 00:08:34,640
and then move forward with that

00:08:32,640 --> 00:08:36,000
and then publish that fix for everyone

00:08:34,640 --> 00:08:38,839
to consume

00:08:36,000 --> 00:08:40,159
and then mitigate that from

00:08:38,839 --> 00:08:43,279
vulnerability

00:08:40,159 --> 00:08:43,919
and that way we're able to then look to

00:08:43,279 --> 00:08:45,680
the future

00:08:43,919 --> 00:08:47,760
you know how can we accelerate this even

00:08:45,680 --> 00:08:49,279
further so now that we have devops now

00:08:47,760 --> 00:08:51,120
that we have devsecops

00:08:49,279 --> 00:08:52,399
now that we have responsible disclosure

00:08:51,120 --> 00:08:53,920
that's keeping us safe

00:08:52,399 --> 00:08:55,440
and teaching us how to communicate

00:08:53,920 --> 00:08:57,839
properly what next

00:08:55,440 --> 00:08:58,480
and so as part of finos we are actually

00:08:57,839 --> 00:09:01,680
looking at

00:08:58,480 --> 00:09:04,399
get ops for how we actually describe our

00:09:01,680 --> 00:09:05,920
infrastructure within repositories so

00:09:04,399 --> 00:09:08,320
we're not actually kind of like

00:09:05,920 --> 00:09:08,959
um creating environments time and time

00:09:08,320 --> 00:09:10,880
again

00:09:08,959 --> 00:09:12,959
the description of the actual

00:09:10,880 --> 00:09:14,720
environment will be within the repos

00:09:12,959 --> 00:09:16,399
with the code within the system

00:09:14,720 --> 00:09:18,399
and so this is how we're moving forward

00:09:16,399 --> 00:09:19,920
into the future and if you are a

00:09:18,399 --> 00:09:22,000
contributor or would like to be a

00:09:19,920 --> 00:09:23,760
contributor into this type of model then

00:09:22,000 --> 00:09:25,040
come and find me because you know as

00:09:23,760 --> 00:09:28,399
director of community

00:09:25,040 --> 00:09:31,440
i'm looking for contributors

00:09:28,399 --> 00:09:33,920
and then we get like a continuous in a

00:09:31,440 --> 00:09:36,320
continuous ecosystem of contribution

00:09:33,920 --> 00:09:38,240
consumption and usage from our uses

00:09:36,320 --> 00:09:40,080
which actually kind of like empowers

00:09:38,240 --> 00:09:40,959
financial services to have this real

00:09:40,080 --> 00:09:43,839
rich

00:09:40,959 --> 00:09:46,720
in innovation kind of feedback leap and

00:09:43,839 --> 00:09:48,240
cycle through financial services

00:09:46,720 --> 00:09:50,560
and with that i'm going to pass over to

00:09:48,240 --> 00:09:53,200
jeff who can talk about

00:09:50,560 --> 00:09:54,399
white sauce great thanks james thanks

00:09:53,200 --> 00:09:55,279
thanks again for everybody for being

00:09:54,399 --> 00:09:57,440
here this afternoon

00:09:55,279 --> 00:09:58,800
again my name is jeff crum senior

00:09:57,440 --> 00:10:00,560
director of product marketing at white

00:09:58,800 --> 00:10:02,320
source and i kind of wanted to take

00:10:00,560 --> 00:10:04,880
where james left off and go into a

00:10:02,320 --> 00:10:07,279
little bit more of a vendor

00:10:04,880 --> 00:10:08,880
perspective this only just a little bit

00:10:07,279 --> 00:10:10,399
on white source itself so it's not going

00:10:08,880 --> 00:10:11,440
to be a vendor commercial but just kind

00:10:10,399 --> 00:10:12,800
of taking things

00:10:11,440 --> 00:10:14,640
where he left off and he talked about

00:10:12,800 --> 00:10:16,000
the trend of

00:10:14,640 --> 00:10:18,079
basically you know from a more of a

00:10:16,000 --> 00:10:20,320
waterfall model into that devops model

00:10:18,079 --> 00:10:22,000
and integrating security into that

00:10:20,320 --> 00:10:23,920
and then as part of that this movement

00:10:22,000 --> 00:10:25,040
to shift things left so i'll talk about

00:10:23,920 --> 00:10:28,000
that a little bit

00:10:25,040 --> 00:10:29,839
as well as you know in that context how

00:10:28,000 --> 00:10:32,399
far left can you really go

00:10:29,839 --> 00:10:33,600
who then owns the process of security as

00:10:32,399 --> 00:10:34,959
you move left

00:10:33,600 --> 00:10:36,160
and then what are the right tools that

00:10:34,959 --> 00:10:37,279
you can use in order to do that and

00:10:36,160 --> 00:10:37,839
that's where i'll give a little bit of a

00:10:37,279 --> 00:10:39,760
nod

00:10:37,839 --> 00:10:41,200
to our product line at white source if

00:10:39,760 --> 00:10:42,720
you do want to hear more about

00:10:41,200 --> 00:10:44,320
what we do specifically we do have a

00:10:42,720 --> 00:10:45,680
table out here and i invite you to go

00:10:44,320 --> 00:10:47,440
to check that out afterwards if you

00:10:45,680 --> 00:10:50,160
haven't already uh

00:10:47,440 --> 00:10:52,000
so in terms of the optimal point to

00:10:50,160 --> 00:10:54,000
integrate security checks into the

00:10:52,000 --> 00:10:55,360
software development life cycle really

00:10:54,000 --> 00:10:57,040
there's if you look at the lifecycle

00:10:55,360 --> 00:10:58,800
itself there's of course a number of

00:10:57,040 --> 00:10:59,519
places you could potentially do this and

00:10:58,800 --> 00:11:01,760
most

00:10:59,519 --> 00:11:03,200
of the vendors in this space now provide

00:11:01,760 --> 00:11:05,440
multiple checkpoints

00:11:03,200 --> 00:11:06,640
into where you can do security checks

00:11:05,440 --> 00:11:08,000
whether it's in the planning or the

00:11:06,640 --> 00:11:11,279
coding or the build stage

00:11:08,000 --> 00:11:13,200
etc but what what we found over time

00:11:11,279 --> 00:11:16,000
what the industry has found over time

00:11:13,200 --> 00:11:17,279
is that the earlier you can detect these

00:11:16,000 --> 00:11:18,160
kinds of things and this is pretty

00:11:17,279 --> 00:11:21,279
intuitive

00:11:18,160 --> 00:11:23,279
um the the less expensive it is the more

00:11:21,279 --> 00:11:25,200
benefit you gain by actually

00:11:23,279 --> 00:11:26,160
detecting these things earlier so of

00:11:25,200 --> 00:11:27,279
course if you're going to detect a

00:11:26,160 --> 00:11:28,399
security issue while you're in the

00:11:27,279 --> 00:11:30,160
coding phase

00:11:28,399 --> 00:11:32,640
it's relatively inexpensive to kind of

00:11:30,160 --> 00:11:33,920
resolve that versus in the build phase

00:11:32,640 --> 00:11:34,480
or all the way down in the production

00:11:33,920 --> 00:11:36,079
phase

00:11:34,480 --> 00:11:37,360
or if you're not discovering security

00:11:36,079 --> 00:11:38,240
issues until you're actually out in the

00:11:37,360 --> 00:11:40,079
production

00:11:38,240 --> 00:11:42,000
it's obviously a much more expensive

00:11:40,079 --> 00:11:43,600
proposition to address that

00:11:42,000 --> 00:11:45,519
than it is earlier on so there's an

00:11:43,600 --> 00:11:47,440
incentive here not just

00:11:45,519 --> 00:11:49,519
from you know productivity in terms of

00:11:47,440 --> 00:11:51,680
the developers themselves but in terms

00:11:49,519 --> 00:11:54,839
of a financial impact as well

00:11:51,680 --> 00:11:56,079
into where you address security uh

00:11:54,839 --> 00:11:58,160
defects

00:11:56,079 --> 00:11:59,440
and in fact we've seen now roughly

00:11:58,160 --> 00:12:00,959
two-thirds of all the companies that

00:11:59,440 --> 00:12:02,880
have already implemented application

00:12:00,959 --> 00:12:04,399
testing during that build or even

00:12:02,880 --> 00:12:06,079
pre-build stages

00:12:04,399 --> 00:12:07,839
so we're seeing this trend out there in

00:12:06,079 --> 00:12:09,680
real life now where

00:12:07,839 --> 00:12:11,120
earlier stages in the software

00:12:09,680 --> 00:12:12,959
development life cycle

00:12:11,120 --> 00:12:15,120
is where security measures are starting

00:12:12,959 --> 00:12:17,279
to be implemented

00:12:15,120 --> 00:12:20,399
and then you know if the goal of course

00:12:17,279 --> 00:12:21,920
is to integrate that security pre-build

00:12:20,399 --> 00:12:23,519
then who should own that right that was

00:12:21,920 --> 00:12:25,200
the second part i talked about is

00:12:23,519 --> 00:12:26,880
or that i mentioned at the beginning

00:12:25,200 --> 00:12:27,839
here who should own this as it moves

00:12:26,880 --> 00:12:29,440
left well

00:12:27,839 --> 00:12:31,200
clearly if you're going to move things

00:12:29,440 --> 00:12:32,560
further toward the left into that coding

00:12:31,200 --> 00:12:34,399
into that building phase

00:12:32,560 --> 00:12:36,240
there's going to be a greater emphasis

00:12:34,399 --> 00:12:37,519
on software developers taking on this

00:12:36,240 --> 00:12:39,279
sort of process

00:12:37,519 --> 00:12:41,120
right in fact and we've seen here 72

00:12:39,279 --> 00:12:43,120
percent of respondents stating that

00:12:41,120 --> 00:12:44,639
ownership over appsec is happening more

00:12:43,120 --> 00:12:46,000
on the software development side

00:12:44,639 --> 00:12:47,279
so this of course is a natural

00:12:46,000 --> 00:12:48,079
occurrence you would expect to see in

00:12:47,279 --> 00:12:51,440
the industry

00:12:48,079 --> 00:12:53,279
as things move left and then research

00:12:51,440 --> 00:12:54,880
shows that organizations of all sizes

00:12:53,279 --> 00:12:56,480
are shifting at left or we're seeing a

00:12:54,880 --> 00:12:57,360
little bit more of that movement more

00:12:56,480 --> 00:12:58,959
rapidly

00:12:57,360 --> 00:13:00,880
in smaller and medium-sized

00:12:58,959 --> 00:13:02,240
organizations as you would expect

00:13:00,880 --> 00:13:04,320
being a little bit more agile than

00:13:02,240 --> 00:13:06,160
larger ones you might have larger

00:13:04,320 --> 00:13:07,600
process changes they need they may need

00:13:06,160 --> 00:13:08,240
to make in order to make this kind of a

00:13:07,600 --> 00:13:09,680
change

00:13:08,240 --> 00:13:11,600
but you can see the movement out there

00:13:09,680 --> 00:13:15,360
particularly really across the board

00:13:11,600 --> 00:13:16,959
particularly on smaller organizations

00:13:15,360 --> 00:13:19,360
now when we get into what are what are

00:13:16,959 --> 00:13:20,800
the right tools to implement this sort

00:13:19,360 --> 00:13:22,079
of thing there's a lot of approaches out

00:13:20,800 --> 00:13:23,200
there and a lot of different vendors in

00:13:22,079 --> 00:13:25,120
this space now

00:13:23,200 --> 00:13:26,720
and more entering is it's pretty you

00:13:25,120 --> 00:13:27,360
know open source usage as you all know

00:13:26,720 --> 00:13:29,440
is

00:13:27,360 --> 00:13:31,040
is been you know on the rise and

00:13:29,440 --> 00:13:32,560
continues to rise so there's a lot of

00:13:31,040 --> 00:13:34,880
vendors in this space

00:13:32,560 --> 00:13:36,399
that want to get involved in this and so

00:13:34,880 --> 00:13:38,959
there's different parts of this that

00:13:36,399 --> 00:13:40,720
they'll address but what we found

00:13:38,959 --> 00:13:42,320
developers tools of course are important

00:13:40,720 --> 00:13:43,519
because as you shift left and as i

00:13:42,320 --> 00:13:45,440
mentioned earlier

00:13:43,519 --> 00:13:47,440
software developers are taking more and

00:13:45,440 --> 00:13:48,959
more of a role in security

00:13:47,440 --> 00:13:51,199
you want to be able to have developers

00:13:48,959 --> 00:13:52,480
tools that are fully integrated into

00:13:51,199 --> 00:13:54,560
their environment whether it's in the

00:13:52,480 --> 00:13:56,000
ide whether it's in the repository

00:13:54,560 --> 00:13:58,160
whether there's browser integration

00:13:56,000 --> 00:14:00,560
those kinds of things having remediation

00:13:58,160 --> 00:14:02,000
take place as seamlessly as possible

00:14:00,560 --> 00:14:04,240
really the goal here if you're going to

00:14:02,000 --> 00:14:06,399
shift left is to be able to do so in a

00:14:04,240 --> 00:14:08,959
way that makes developers lives

00:14:06,399 --> 00:14:10,160
easier and as less as little disruption

00:14:08,959 --> 00:14:11,519
as possible

00:14:10,160 --> 00:14:13,279
but on the other hand you want you don't

00:14:11,519 --> 00:14:15,199
want to go completely there and leave

00:14:13,279 --> 00:14:16,800
all of the other stakeholders out

00:14:15,199 --> 00:14:19,199
so there's a need for these governance

00:14:16,800 --> 00:14:20,720
solutions as well you need to have a way

00:14:19,199 --> 00:14:22,560
so that the security teams and the

00:14:20,720 --> 00:14:24,399
devops professionals and others

00:14:22,560 --> 00:14:26,399
across the organization can still have

00:14:24,399 --> 00:14:27,839
visibility into what's going on with

00:14:26,399 --> 00:14:30,480
application security

00:14:27,839 --> 00:14:31,440
what sort of severity of defects are

00:14:30,480 --> 00:14:33,040
being discovered

00:14:31,440 --> 00:14:34,959
how things are being resolved all of

00:14:33,040 --> 00:14:36,720
those things so you really need to have

00:14:34,959 --> 00:14:39,199
both components of that in order to have

00:14:36,720 --> 00:14:40,480
like a comprehensive solution

00:14:39,199 --> 00:14:42,240
and so this is where i'll talk about

00:14:40,480 --> 00:14:44,399
white source a little bit here just for

00:14:42,240 --> 00:14:45,920
a preview

00:14:44,399 --> 00:14:47,519
when you look at our solution we have

00:14:45,920 --> 00:14:49,199
two major components

00:14:47,519 --> 00:14:50,720
there's a white source for developers

00:14:49,199 --> 00:14:52,320
part which of course is a developer

00:14:50,720 --> 00:14:54,240
oriented one as you might guess

00:14:52,320 --> 00:14:56,240
and that corresponds to these areas up

00:14:54,240 --> 00:14:57,680
in blue that i just mentioned really

00:14:56,240 --> 00:15:00,240
browser integration we have chrome

00:14:57,680 --> 00:15:02,800
extension ide integration we

00:15:00,240 --> 00:15:04,480
support intellij and eclipse repository

00:15:02,800 --> 00:15:05,839
integration we have github gitlab and

00:15:04,480 --> 00:15:07,600
bitbucket support

00:15:05,839 --> 00:15:09,279
and then we also have remediation with

00:15:07,600 --> 00:15:11,519
automated pull requests

00:15:09,279 --> 00:15:12,560
so that you can build security into your

00:15:11,519 --> 00:15:14,800
workflow

00:15:12,560 --> 00:15:16,399
so that when a vulnerability is

00:15:14,800 --> 00:15:16,959
published in the open source community

00:15:16,399 --> 00:15:18,320
if it's made

00:15:16,959 --> 00:15:20,320
available and that fix is published

00:15:18,320 --> 00:15:21,600
along with it you can do an automated

00:15:20,320 --> 00:15:22,480
pull request and work that into your

00:15:21,600 --> 00:15:24,000
workflow

00:15:22,480 --> 00:15:26,000
so that you're bringing those fixes into

00:15:24,000 --> 00:15:27,839
your application development as quickly

00:15:26,000 --> 00:15:29,519
and seamlessly as possible

00:15:27,839 --> 00:15:31,360
that's on the developer side and then on

00:15:29,519 --> 00:15:33,040
the light source core component which is

00:15:31,360 --> 00:15:35,360
what i was referring to

00:15:33,040 --> 00:15:36,959
as a governance solution earlier that's

00:15:35,360 --> 00:15:38,959
where you have the detection

00:15:36,959 --> 00:15:40,639
capabilities the automated policies and

00:15:38,959 --> 00:15:43,120
reporting alerts

00:15:40,639 --> 00:15:44,079
as well as a prioritization capability

00:15:43,120 --> 00:15:46,240
and that's something

00:15:44,079 --> 00:15:47,440
i'm not going to go into detail here but

00:15:46,240 --> 00:15:49,759
just at a high level

00:15:47,440 --> 00:15:51,360
prioritization is a really critical part

00:15:49,759 --> 00:15:51,680
of the process here if you think about

00:15:51,360 --> 00:15:53,759
the

00:15:51,680 --> 00:15:55,360
the huge universe of security

00:15:53,759 --> 00:15:56,240
vulnerabilities particularly on the open

00:15:55,360 --> 00:15:57,839
source side

00:15:56,240 --> 00:16:00,160
that's been emerging and growing over

00:15:57,839 --> 00:16:01,759
the years and getting bigger and bigger

00:16:00,160 --> 00:16:03,440
being able to figure out which of those

00:16:01,759 --> 00:16:04,720
you really need to address most

00:16:03,440 --> 00:16:06,720
critically in order to move your

00:16:04,720 --> 00:16:09,120
application development forward

00:16:06,720 --> 00:16:10,079
is really key in in this whole process

00:16:09,120 --> 00:16:11,519
and so

00:16:10,079 --> 00:16:13,519
we have a lot of material on that

00:16:11,519 --> 00:16:14,880
because it's a big differentiator for us

00:16:13,519 --> 00:16:17,040
and if you'd like to i can certainly ask

00:16:14,880 --> 00:16:18,880
more answer questions about that or

00:16:17,040 --> 00:16:20,160
or talk to folks at the booth about that

00:16:18,880 --> 00:16:21,040
as well but that's a really important

00:16:20,160 --> 00:16:22,639
part as well

00:16:21,040 --> 00:16:24,000
but the overall message here complete

00:16:22,639 --> 00:16:24,880
solution that caters to both the

00:16:24,000 --> 00:16:26,880
developers

00:16:24,880 --> 00:16:28,639
so that you can shift left more easily

00:16:26,880 --> 00:16:31,519
as well as to the security managers and

00:16:28,639 --> 00:16:32,720
the devops professionals

00:16:31,519 --> 00:16:34,320
and so when you then when you look at

00:16:32,720 --> 00:16:36,000
the portfolio in terms of the software

00:16:34,320 --> 00:16:37,519
development lifecycle and i had this up

00:16:36,000 --> 00:16:39,920
earlier more generically

00:16:37,519 --> 00:16:41,199
you can see the planning and the coding

00:16:39,920 --> 00:16:42,560
components happening

00:16:41,199 --> 00:16:44,639
being addressed by white source for

00:16:42,560 --> 00:16:46,240
developers and integration points in the

00:16:44,639 --> 00:16:47,839
build deploy and maintaining your code

00:16:46,240 --> 00:16:49,600
later in white source core

00:16:47,839 --> 00:16:53,199
so we are able to integrate throughout

00:16:49,600 --> 00:16:53,199
this software development life cycle

00:16:53,680 --> 00:16:56,639
and so that's that's kind of what i had

00:16:55,279 --> 00:16:57,680
for a few slides here just to kind of

00:16:56,639 --> 00:16:59,920
recap how far

00:16:57,680 --> 00:17:01,040
left can you go well really is as

00:16:59,920 --> 00:17:03,360
leftward as you can

00:17:01,040 --> 00:17:04,400
into that software development process

00:17:03,360 --> 00:17:05,760
without

00:17:04,400 --> 00:17:07,360
leaving out the other stakeholders in

00:17:05,760 --> 00:17:09,039
the organizations as i mentioned earlier

00:17:07,360 --> 00:17:10,559
it gets less expensive

00:17:09,039 --> 00:17:12,400
the further left you're able to address

00:17:10,559 --> 00:17:13,600
these kinds of things who owns it by

00:17:12,400 --> 00:17:14,799
nature if you're going to go left you're

00:17:13,600 --> 00:17:15,760
going to be dealing with that software

00:17:14,799 --> 00:17:17,679
developers

00:17:15,760 --> 00:17:19,360
world more so you're going to have those

00:17:17,679 --> 00:17:20,720
folks on more of the process

00:17:19,360 --> 00:17:22,959
that said you want to have the right

00:17:20,720 --> 00:17:24,480
tools so that you're not only

00:17:22,959 --> 00:17:26,000
meeting the needs of the developers but

00:17:24,480 --> 00:17:29,039
also the other stakeholders in the

00:17:26,000 --> 00:17:31,120
organization as well

00:17:29,039 --> 00:17:32,320
and that's what i had for slides i don't

00:17:31,120 --> 00:17:34,080
know if we have time for questions we

00:17:32,320 --> 00:17:37,520
might

00:17:34,080 --> 00:17:39,840
see hi

00:17:37,520 --> 00:17:41,280
hi um first thank you for the

00:17:39,840 --> 00:17:43,600
presentation

00:17:41,280 --> 00:17:43,600
my name

00:17:45,520 --> 00:17:49,679
because you is about cdci constantly you

00:17:47,919 --> 00:17:51,360
know throughout the presentation

00:17:49,679 --> 00:17:52,880
and i'm wondering from developer

00:17:51,360 --> 00:17:54,160
perspective you know i'm saying on my

00:17:52,880 --> 00:17:57,200
computer

00:17:54,160 --> 00:17:59,280
i attempt to commit code to a given repo

00:17:57,200 --> 00:18:01,520
then what specifically happens at that

00:17:59,280 --> 00:18:04,160
point you kind of hijack that limit

00:18:01,520 --> 00:18:04,880
scan the code try to identify anything

00:18:04,160 --> 00:18:07,679
in it

00:18:04,880 --> 00:18:08,559
or something else before it actually

00:18:07,679 --> 00:18:11,280
gets

00:18:08,559 --> 00:18:12,559
you know into there yeah yeah so that's

00:18:11,280 --> 00:18:15,760
actually a really good

00:18:12,559 --> 00:18:19,360
question thank you very much um

00:18:15,760 --> 00:18:22,559
so i'm going to rewind on a few slides

00:18:19,360 --> 00:18:25,760
i will do absolutely i will do

00:18:22,559 --> 00:18:27,679
uh so the question was referring to this

00:18:25,760 --> 00:18:28,960
kind of figure of eight kind of is the

00:18:27,679 --> 00:18:31,200
continuous delivery

00:18:28,960 --> 00:18:32,080
um continuous continuous integration

00:18:31,200 --> 00:18:34,720
continuous

00:18:32,080 --> 00:18:36,480
um delivery model and how we actually

00:18:34,720 --> 00:18:37,360
intercept all of those various different

00:18:36,480 --> 00:18:40,080
pull requests

00:18:37,360 --> 00:18:40,400
and where they actually go okay so what

00:18:40,080 --> 00:18:43,280
i'm

00:18:40,400 --> 00:18:45,360
what i'm going to talk about um is a

00:18:43,280 --> 00:18:46,720
platform that within finos we are

00:18:45,360 --> 00:18:49,840
actually developing

00:18:46,720 --> 00:18:52,160
both as a an open source

00:18:49,840 --> 00:18:53,200
um program of which i am actually the

00:18:52,160 --> 00:18:55,440
product owner for

00:18:53,200 --> 00:18:56,960
and so having people from within the

00:18:55,440 --> 00:18:57,360
community coming in and helping with

00:18:56,960 --> 00:18:59,679
this

00:18:57,360 --> 00:19:02,080
is actually really useful and so when we

00:18:59,679 --> 00:19:03,440
actually talk from code into the cloud

00:19:02,080 --> 00:19:06,000
we have something called the open

00:19:03,440 --> 00:19:06,720
developer platform which is a platform

00:19:06,000 --> 00:19:09,440
that

00:19:06,720 --> 00:19:10,000
enables financial services organizations

00:19:09,440 --> 00:19:13,600
to be able

00:19:10,000 --> 00:19:14,960
to use github.com in the public but also

00:19:13,600 --> 00:19:18,000
make sure that it's done

00:19:14,960 --> 00:19:19,280
in a very kind of safe way both using

00:19:18,000 --> 00:19:22,640
devsecops

00:19:19,280 --> 00:19:24,640
but then also using a cla bot

00:19:22,640 --> 00:19:26,480
which is basically your contributor

00:19:24,640 --> 00:19:29,840
licensing agreement

00:19:26,480 --> 00:19:33,039
so basically the the life cycle of the

00:19:29,840 --> 00:19:35,440
odp the open developer platform

00:19:33,039 --> 00:19:37,280
is that within github we actually kind

00:19:35,440 --> 00:19:39,760
of anchor

00:19:37,280 --> 00:19:40,720
or we provide a trigger a trigger using

00:19:39,760 --> 00:19:43,200
a web hook

00:19:40,720 --> 00:19:44,000
within github that when a pull request

00:19:43,200 --> 00:19:47,840
is actually

00:19:44,000 --> 00:19:49,360
made we trigger our cla bot which then

00:19:47,840 --> 00:19:52,480
looks at

00:19:49,360 --> 00:19:56,160
the people who have given permission

00:19:52,480 --> 00:19:58,960
to kind of delegate or give back the ip

00:19:56,160 --> 00:20:01,360
to that project team because within

00:19:58,960 --> 00:20:04,400
financial services what we don't want

00:20:01,360 --> 00:20:05,760
is for people to be raising call

00:20:04,400 --> 00:20:08,240
requests without signing

00:20:05,760 --> 00:20:09,440
signing a cla and so this is actually

00:20:08,240 --> 00:20:12,400
quite a standard thing

00:20:09,440 --> 00:20:13,360
it's basically somebody or a firm saying

00:20:12,400 --> 00:20:16,640
we're okay

00:20:13,360 --> 00:20:17,039
um with people there we go i thought

00:20:16,640 --> 00:20:18,960
that

00:20:17,039 --> 00:20:20,320
that would be immune to that right so

00:20:18,960 --> 00:20:21,120
i've lost the slide but i'll keep on

00:20:20,320 --> 00:20:23,200
talking

00:20:21,120 --> 00:20:24,480
oh we're back um so it's basically

00:20:23,200 --> 00:20:26,240
saying i'm okay with

00:20:24,480 --> 00:20:27,840
you owning our pull request you know i'm

00:20:26,240 --> 00:20:29,440
gonna you know give you

00:20:27,840 --> 00:20:31,600
our pull request so you can't claim the

00:20:29,440 --> 00:20:32,880
ip so i can't claim the ip back so

00:20:31,600 --> 00:20:34,799
that's the first thing

00:20:32,880 --> 00:20:36,159
making sure that legally that person is

00:20:34,799 --> 00:20:38,480
able to contribute

00:20:36,159 --> 00:20:41,280
then the second thing is um making sure

00:20:38,480 --> 00:20:44,080
that if there are any tests applied

00:20:41,280 --> 00:20:45,600
with that actual build itself so unit

00:20:44,080 --> 00:20:47,840
tests bdd scripts

00:20:45,600 --> 00:20:49,679
linting or anything that kind of make

00:20:47,840 --> 00:20:53,520
sure that the quality is actually

00:20:49,679 --> 00:20:56,000
really kind of in there with your agile

00:20:53,520 --> 00:20:58,240
definitions of done all of these various

00:20:56,000 --> 00:20:59,760
different checks and balances which are

00:20:58,240 --> 00:21:02,480
represented by the various different

00:20:59,760 --> 00:21:05,200
tools across this pipeline

00:21:02,480 --> 00:21:06,480
are kind of invoked and if any of those

00:21:05,200 --> 00:21:09,200
tests fail

00:21:06,480 --> 00:21:11,440
so if the cla bot comes back in negative

00:21:09,200 --> 00:21:13,760
or if any of these tests fail

00:21:11,440 --> 00:21:15,520
then you don't continue around this

00:21:13,760 --> 00:21:18,080
cycle around this loop

00:21:15,520 --> 00:21:18,880
and so part of your agile definition of

00:21:18,080 --> 00:21:21,600
done is

00:21:18,880 --> 00:21:22,559
you must have a cla and all of your

00:21:21,600 --> 00:21:24,720
tests must pass

00:21:22,559 --> 00:21:26,240
you know whatever those tests are and um

00:21:24,720 --> 00:21:27,919
normally it's the development team who

00:21:26,240 --> 00:21:29,280
say what tests need to pass in order for

00:21:27,919 --> 00:21:31,200
that to happen

00:21:29,280 --> 00:21:32,400
and then at that point when all of your

00:21:31,200 --> 00:21:34,000
tests have passed

00:21:32,400 --> 00:21:36,000
we then take you through a vulnerability

00:21:34,000 --> 00:21:39,120
scanning process which is why

00:21:36,000 --> 00:21:40,320
where both finnos and white source are

00:21:39,120 --> 00:21:42,720
working together

00:21:40,320 --> 00:21:44,000
which basically make sure that number

00:21:42,720 --> 00:21:46,960
one you know you aren't

00:21:44,000 --> 00:21:49,440
inheriting any um vulnerabilities from

00:21:46,960 --> 00:21:51,200
open source through nested dependencies

00:21:49,440 --> 00:21:53,520
um and number two that all of the

00:21:51,200 --> 00:21:55,919
licenses that you are consuming

00:21:53,520 --> 00:21:58,320
um through that process of you know

00:21:55,919 --> 00:22:00,159
bringing dependencies into your project

00:21:58,320 --> 00:22:02,400
you're not bringing in any bad licenses

00:22:00,159 --> 00:22:03,280
or trial licenses or anything that's out

00:22:02,400 --> 00:22:05,120
of date

00:22:03,280 --> 00:22:06,960
and also making sure that the version of

00:22:05,120 --> 00:22:09,440
open source is consistent and

00:22:06,960 --> 00:22:10,640
actually new so it kind of does all of

00:22:09,440 --> 00:22:13,520
that and

00:22:10,640 --> 00:22:14,080
when all of those kind of like uh checks

00:22:13,520 --> 00:22:17,120
and balance

00:22:14,080 --> 00:22:18,480
balances have passed that's at the point

00:22:17,120 --> 00:22:18,960
where you can actually go into your

00:22:18,480 --> 00:22:21,840
build

00:22:18,960 --> 00:22:23,039
you know so um we're using travis ci on

00:22:21,840 --> 00:22:26,080
odp

00:22:23,039 --> 00:22:27,520
but then when everything is um uh passed

00:22:26,080 --> 00:22:30,320
and build we then go into

00:22:27,520 --> 00:22:32,000
open shift and then we either create a

00:22:30,320 --> 00:22:35,440
container that can be passed

00:22:32,000 --> 00:22:37,360
somewhere or we actually um will make a

00:22:35,440 --> 00:22:39,360
deployment into an open source um

00:22:37,360 --> 00:22:40,320
registry whether it's npm or you know

00:22:39,360 --> 00:22:41,840
somewhere else

00:22:40,320 --> 00:22:43,520
for somebody to consume it in a

00:22:41,840 --> 00:22:44,159
different way and this is where it kind

00:22:43,520 --> 00:22:46,640
of spa

00:22:44,159 --> 00:22:47,600
spikes out and coming back to what jeff

00:22:46,640 --> 00:22:49,919
was saying about

00:22:47,600 --> 00:22:50,960
shifting left with all of these checks

00:22:49,919 --> 00:22:53,360
that happen

00:22:50,960 --> 00:22:55,360
at the point of commit or at the point

00:22:53,360 --> 00:22:57,120
of pull request

00:22:55,360 --> 00:22:59,039
you're actually figuring out these

00:22:57,120 --> 00:23:00,400
issues really early so your team can

00:22:59,039 --> 00:23:02,240
actually fix it there and then

00:23:00,400 --> 00:23:04,240
rather than taking it all the way down

00:23:02,240 --> 00:23:06,080
that lead time right to the end of you

00:23:04,240 --> 00:23:07,120
know your deployment and going into your

00:23:06,080 --> 00:23:09,760
route to life

00:23:07,120 --> 00:23:10,480
only to have to loop all the way back

00:23:09,760 --> 00:23:13,360
plus then

00:23:10,480 --> 00:23:14,720
the other side effect which is positive

00:23:13,360 --> 00:23:15,760
is that if you can get out into

00:23:14,720 --> 00:23:17,919
production

00:23:15,760 --> 00:23:19,679
your consumers start using your software

00:23:17,919 --> 00:23:21,360
a lot quicker

00:23:19,679 --> 00:23:23,360
and then you get a feedback with your

00:23:21,360 --> 00:23:24,480
customers as well you know and then and

00:23:23,360 --> 00:23:26,080
actually that is

00:23:24,480 --> 00:23:27,919
a real benefit as well because you're

00:23:26,080 --> 00:23:30,480
literally taking

00:23:27,919 --> 00:23:32,080
issues or feeding features back into the

00:23:30,480 --> 00:23:33,919
team from the people who are using your

00:23:32,080 --> 00:23:36,159
software

00:23:33,919 --> 00:23:38,400
i hope that answered your question i

00:23:36,159 --> 00:23:42,159
just gave another lightning talk on adp

00:23:38,400 --> 00:23:43,440
but that's cool any other questions i

00:23:42,159 --> 00:23:46,320
don't know if we're out of time

00:23:43,440 --> 00:23:47,039
i don't have um yeah about a minute yeah

00:23:46,320 --> 00:23:48,400
so

00:23:47,039 --> 00:23:51,840
yeah feel free put your hand up if

00:23:48,400 --> 00:23:51,840
you've got another question

00:23:52,880 --> 00:23:56,320
okay so me and jeff are here this

00:23:54,720 --> 00:23:58,240
afternoon so white sauce have got to

00:23:56,320 --> 00:24:00,320
stand just outside the door here

00:23:58,240 --> 00:24:02,159
uh finos have a stand a little bit

00:24:00,320 --> 00:24:03,840
further to the left where i'll be

00:24:02,159 --> 00:24:05,600
if you've got any questions feel free to

00:24:03,840 --> 00:24:06,960
swing by and ask us both

00:24:05,600 --> 00:24:08,000
but thank you very much for coming this

00:24:06,960 --> 00:24:08,799
afternoon it's been really great

00:24:08,000 --> 00:24:19,840
speaking to you

00:24:08,799 --> 00:24:19,840
thanks everyone

00:24:23,310 --> 00:24:28,000
[Music]

00:24:25,919 --> 00:24:28,000

YouTube URL: https://www.youtube.com/watch?v=9O-MRjvlL5s


