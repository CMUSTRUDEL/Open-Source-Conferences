Title: Oskar Swirtun | AI-Powered M&A Audits for Open Source License Compliance | FINOS OSSF 2019
Publication date: 2021-01-11
Playlist: FINOS Open Source Strategy Forum 2019
Description: 
	Oskar Swirtun | FOSSID | Artificial Intelligence-Powered M&A Audits for Open Source License Compliance | FINOS OSSF 2019

Oskar Swirtun, CEO, FIX Trading Community

Most software products and services today are based on free and open source software. It is a great catalyst for rapid development and standardization, but if the R&D teams are not properly trained in incorporating open source software components into the products they build, unnecessary risks and costs are introduced.

In an M&A transaction context it is particularly important to know the details of the software you acquire and have full control of its origins and licensing terms. This is typically revealed in an M&A open source audit.

M&A audits should be performed quickly and accurately under the utmost confidentiality, with tools that provide high degrees of accuracy, performance, privacy and automation. In this equation, Artificial Intelligence (AI) is a fundamental component.

In this session the audience is given an update on how AI can dramatically lower costs and reduce risks in the software auditing of an M&A transaction process.

Oskar Swirtun's BIO

Oskar Swirtun is the Founder and CEO of FOSSID AB, a company offering the most innovative and effective open source compliance solution on the market today. Oskar has worked extensively with open source software since 2001, when he introduced Linux and wrote the directive for use and contributions to open source at Ericsson. Since then he has held several leadership positions, focusing on open source software as a business strategy and an R&D tool to drive collaboration and innovation. As part of his involvement with open source initiative, Oskar also served as President and Board Member of the OpenFastPath Foundation, a non-profit organization, with the goal to create and develop an open source fast path TCP/IP stack for Linux.

-=-=-=-=-

This video is from the FINOS Open Source Strategy Forum (OSSF) NYC 2019. 

►►For free access to all 2019 videos from the conference - visit our website here: https://www.finos.org/ossf-2019-recap
 
►► More information HERE: https://events.linuxfoundation.org/open-source-strategy-forum/

Learn more about FINOS and how we deliver the power of open source to financial services:
►► FINOS: https://www.finos.org/
Captions: 
	00:00:03,690 --> 00:00:11,890
[Music]

00:00:13,040 --> 00:00:18,800
hello everyone

00:00:15,440 --> 00:00:21,840
my name is oscar sveton and i am

00:00:18,800 --> 00:00:24,080
the ceo and founder of foss id

00:00:21,840 --> 00:00:26,800
force id is a open source compliance

00:00:24,080 --> 00:00:28,960
company we're based in sweden

00:00:26,800 --> 00:00:30,640
and i'm going to talk today about the

00:00:28,960 --> 00:00:32,480
benefits of using

00:00:30,640 --> 00:00:35,040
artificial intelligence in open source

00:00:32,480 --> 00:00:35,040
compliance

00:00:36,160 --> 00:00:41,040
the agenda i'm going to talk a little

00:00:38,960 --> 00:00:44,399
bit about

00:00:41,040 --> 00:00:49,680
open source auditing two phases

00:00:44,399 --> 00:00:52,239
the scan phase and then analysis phase

00:00:49,680 --> 00:00:52,879
how it's done basically how we do it

00:00:52,239 --> 00:00:56,800
when we do

00:00:52,879 --> 00:00:58,559
do maybe emerging acquisitions audits or

00:00:56,800 --> 00:01:01,359
when we've done it when we're using our

00:00:58,559 --> 00:01:03,520
own tools with customers

00:01:01,359 --> 00:01:05,439
and then the auditor's decision making

00:01:03,520 --> 00:01:08,400
process the analysis

00:01:05,439 --> 00:01:12,320
a few things about lesson learned and

00:01:08,400 --> 00:01:17,680
the artificial intelligence

00:01:12,320 --> 00:01:19,920
so introduction to open source auditing

00:01:17,680 --> 00:01:20,720
i guess you many of you have done this

00:01:19,920 --> 00:01:24,159
but it's

00:01:20,720 --> 00:01:26,479
basically about finding uh

00:01:24,159 --> 00:01:27,280
what open source you're using in your in

00:01:26,479 --> 00:01:30,240
your products

00:01:27,280 --> 00:01:30,799
and it could be entire components it

00:01:30,240 --> 00:01:33,680
could be

00:01:30,799 --> 00:01:35,439
files that you're using or just snippets

00:01:33,680 --> 00:01:39,040
of code or modified

00:01:35,439 --> 00:01:43,200
modified files

00:01:39,040 --> 00:01:46,000
and the whole process is basically from

00:01:43,200 --> 00:01:46,640
you have a software deliverable and you

00:01:46,000 --> 00:01:50,399
generate

00:01:46,640 --> 00:01:53,280
an open source inventory

00:01:50,399 --> 00:01:54,640
out of a software deliverable and have

00:01:53,280 --> 00:01:56,560
an

00:01:54,640 --> 00:01:59,360
inventory bill of material for that open

00:01:56,560 --> 00:01:59,360
source in the end

00:02:00,960 --> 00:02:05,280
the process consists of basically we

00:02:03,680 --> 00:02:09,039
sometimes describe it as

00:02:05,280 --> 00:02:11,360
two stages the scan which is a

00:02:09,039 --> 00:02:12,720
machine a computer does basically scans

00:02:11,360 --> 00:02:16,319
compares

00:02:12,720 --> 00:02:18,160
what you have to a large knowledge base

00:02:16,319 --> 00:02:20,160
in this case the size of the knowledge

00:02:18,160 --> 00:02:23,680
base is very important

00:02:20,160 --> 00:02:25,360
because if you there's somewhere around

00:02:23,680 --> 00:02:26,879
probably 100 million open source

00:02:25,360 --> 00:02:28,319
projects out there

00:02:26,879 --> 00:02:30,239
if you have them in your knowledge base

00:02:28,319 --> 00:02:31,360
then you find it if you don't you don't

00:02:30,239 --> 00:02:32,879
find it

00:02:31,360 --> 00:02:34,800
and then of course accuracy of the

00:02:32,879 --> 00:02:36,959
results and scan speed

00:02:34,800 --> 00:02:38,640
these things are done continuously our

00:02:36,959 --> 00:02:39,760
customers are integrating this kind of

00:02:38,640 --> 00:02:41,599
scans

00:02:39,760 --> 00:02:43,760
into the continuous integration so it

00:02:41,599 --> 00:02:45,760
needs to go fast

00:02:43,760 --> 00:02:46,879
and then the analysis is really the face

00:02:45,760 --> 00:02:50,000
that takes

00:02:46,879 --> 00:02:53,280
most of the time and

00:02:50,000 --> 00:02:55,040
it depends the quality of your results

00:02:53,280 --> 00:02:57,760
it depends on the quality

00:02:55,040 --> 00:02:59,920
of the results from your tool but also

00:02:57,760 --> 00:03:04,720
knowledge of your auditor

00:02:59,920 --> 00:03:08,720
and how easy it is to use these tools

00:03:04,720 --> 00:03:12,400
so if you take the scan in theory it's

00:03:08,720 --> 00:03:13,440
fairly simple you have a codebase you

00:03:12,400 --> 00:03:15,120
scan it

00:03:13,440 --> 00:03:16,560
and you get a number of components you

00:03:15,120 --> 00:03:19,840
get a

00:03:16,560 --> 00:03:22,959
number of files maybe some snippets

00:03:19,840 --> 00:03:25,120
but in reality it can be a little bit

00:03:22,959 --> 00:03:28,319
more complex first of all

00:03:25,120 --> 00:03:31,200
uh it's not just few files i think

00:03:28,319 --> 00:03:32,400
2018 most of the audits that we've done

00:03:31,200 --> 00:03:33,920
for our customers in

00:03:32,400 --> 00:03:35,519
merging acquisitions and this kind of

00:03:33,920 --> 00:03:38,560
situations

00:03:35,519 --> 00:03:41,680
they've consisted of at least

00:03:38,560 --> 00:03:43,519
around fifty thousand files so there's a

00:03:41,680 --> 00:03:45,040
lot of software that we scan

00:03:43,519 --> 00:03:47,280
and just the linux kernel is somewhere

00:03:45,040 --> 00:03:49,280
around 40 000 files

00:03:47,280 --> 00:03:50,560
so first of all it's a lot of files that

00:03:49,280 --> 00:03:54,640
you need to

00:03:50,560 --> 00:03:57,680
to scan and then

00:03:54,640 --> 00:04:00,239
when you find components it's not always

00:03:57,680 --> 00:04:01,439
obvious where they come from if you take

00:04:00,239 --> 00:04:05,200
a component like

00:04:01,439 --> 00:04:07,200
zlib 1.2.7 in our knowledge base we have

00:04:05,200 --> 00:04:09,920
some around two and a half thousand

00:04:07,200 --> 00:04:10,879
matches to that component and we need to

00:04:09,920 --> 00:04:13,280
pinpoint

00:04:10,879 --> 00:04:16,320
which is actually the correct match

00:04:13,280 --> 00:04:19,280
somewhere around 900 of those are

00:04:16,320 --> 00:04:19,280
forks or clones

00:04:19,359 --> 00:04:25,680
so that adds to complexity and of course

00:04:23,280 --> 00:04:27,199
those components often include other

00:04:25,680 --> 00:04:29,840
components inside

00:04:27,199 --> 00:04:29,840
libraries

00:04:30,800 --> 00:04:36,800
and then there are snippets of code you

00:04:33,280 --> 00:04:36,800
find the snippets both in the

00:04:37,360 --> 00:04:41,199
components that you are identified by

00:04:39,360 --> 00:04:42,560
but also in the propriety code that you

00:04:41,199 --> 00:04:45,600
have there may be

00:04:42,560 --> 00:04:49,120
snippets of code there so it all becomes

00:04:45,600 --> 00:04:52,800
much more complex there and then

00:04:49,120 --> 00:04:54,960
you add to these fault positives

00:04:52,800 --> 00:04:56,960
some of the files you get matches that

00:04:54,960 --> 00:05:00,400
probably are irrelevant

00:04:56,960 --> 00:05:03,520
and then all the licenses

00:05:00,400 --> 00:05:06,800
and although i mean

00:05:03,520 --> 00:05:10,160
there are some around three 300

00:05:06,800 --> 00:05:11,919
declared licenses but if you for example

00:05:10,160 --> 00:05:12,400
in our knowledge base if you look at the

00:05:11,919 --> 00:05:15,600
number

00:05:12,400 --> 00:05:16,160
unique licenses we have some around 300

00:05:15,600 --> 00:05:18,000
00:05:16,160 --> 00:05:20,720
different unique licenses in our

00:05:18,000 --> 00:05:20,720
knowledge base

00:05:21,600 --> 00:05:25,600
so they correspond to the to the

00:05:24,000 --> 00:05:28,240
licenses that you

00:05:25,600 --> 00:05:30,000
identify but there's a lot of different

00:05:28,240 --> 00:05:34,400
variants of those

00:05:30,000 --> 00:05:36,960
and somewhere around 109 million

00:05:34,400 --> 00:05:37,759
uh source code files that have a

00:05:36,960 --> 00:05:40,479
licensed

00:05:37,759 --> 00:05:40,479
declaration

00:05:40,800 --> 00:05:46,080
so basically this is

00:05:44,000 --> 00:05:48,080
the audit process and to add to

00:05:46,080 --> 00:05:49,840
complexity when we do this

00:05:48,080 --> 00:05:51,919
we actually don't see the source code we

00:05:49,840 --> 00:05:54,960
only look at the

00:05:51,919 --> 00:05:56,639
the hashes the digital signatures of the

00:05:54,960 --> 00:05:58,240
source code so we don't actually compare

00:05:56,639 --> 00:06:00,080
with origin when we do for example

00:05:58,240 --> 00:06:01,440
merger and acquisitions

00:06:00,080 --> 00:06:03,759
this is something that many of our

00:06:01,440 --> 00:06:05,199
customers are special especially

00:06:03,759 --> 00:06:07,199
the target companies that are being

00:06:05,199 --> 00:06:09,440
acquired

00:06:07,199 --> 00:06:11,039
like without process because they don't

00:06:09,440 --> 00:06:11,440
they don't like showing their source

00:06:11,039 --> 00:06:13,680
code

00:06:11,440 --> 00:06:16,000
to someone who is paid by the potential

00:06:13,680 --> 00:06:16,000
buyer

00:06:17,440 --> 00:06:20,800
and then when the scan is done it's

00:06:19,360 --> 00:06:23,280
actually

00:06:20,800 --> 00:06:25,039
when the decision-making process starts

00:06:23,280 --> 00:06:29,039
an analysis by

00:06:25,039 --> 00:06:32,840
by an auditor and

00:06:29,039 --> 00:06:36,319
we like to kind of

00:06:32,840 --> 00:06:39,120
uh put those decisions that the

00:06:36,319 --> 00:06:40,160
auditor makes into five categories uh

00:06:39,120 --> 00:06:44,160
the first one

00:06:40,160 --> 00:06:46,160
to determine the code origin

00:06:44,160 --> 00:06:48,400
and then then analyze validity of the

00:06:46,160 --> 00:06:51,759
matches especially partial

00:06:48,400 --> 00:06:52,080
fine matches inspect license declaration

00:06:51,759 --> 00:06:57,280
and

00:06:52,080 --> 00:07:00,800
also license text and then in some cases

00:06:57,280 --> 00:07:04,639
run external investigations and these

00:07:00,800 --> 00:07:06,160
last in external investigation it gets

00:07:04,639 --> 00:07:08,080
more and more seldom that we need to do

00:07:06,160 --> 00:07:09,840
it but still there are cases when we

00:07:08,080 --> 00:07:13,199
need to do it

00:07:09,840 --> 00:07:14,400
but as i said to to determine the origin

00:07:13,199 --> 00:07:17,039
of the code

00:07:14,400 --> 00:07:19,039
sometimes it's easy sometimes it's not

00:07:17,039 --> 00:07:21,039
here

00:07:19,039 --> 00:07:22,759
you have a file that i already mentioned

00:07:21,039 --> 00:07:26,080
is at lib

00:07:22,759 --> 00:07:27,840
1.2.7 and as i mentioned it's somewhere

00:07:26,080 --> 00:07:29,759
around two and a half thousand

00:07:27,840 --> 00:07:31,759
matches in the community for this file

00:07:29,759 --> 00:07:34,800
this particular file

00:07:31,759 --> 00:07:36,720
but here it's relatively easy it's in

00:07:34,800 --> 00:07:38,720
the header

00:07:36,720 --> 00:07:39,919
it specifies what file it is what what

00:07:38,720 --> 00:07:41,759
is the origin so

00:07:39,919 --> 00:07:43,599
in this case it's relatively

00:07:41,759 --> 00:07:45,680
straightforward for a scanner to just

00:07:43,599 --> 00:07:48,800
find the origin

00:07:45,680 --> 00:07:49,120
it's not always this easy but sometimes

00:07:48,800 --> 00:07:51,759
it is

00:07:49,120 --> 00:07:54,319
[Music]

00:07:51,759 --> 00:07:57,120
and then to analyze validity of the

00:07:54,319 --> 00:07:57,120
partial matches

00:07:57,360 --> 00:08:01,840
if you look at this file here actually

00:07:59,919 --> 00:08:03,120
we actually took a proprietary file and

00:08:01,840 --> 00:08:06,160
we put a

00:08:03,120 --> 00:08:07,840
linux function into this file so what we

00:08:06,160 --> 00:08:10,639
do here on the

00:08:07,840 --> 00:08:12,560
left hand side is our proprietary

00:08:10,639 --> 00:08:15,120
proprietary file with the

00:08:12,560 --> 00:08:17,280
function included in the linux function

00:08:15,120 --> 00:08:19,039
and then the community file on the

00:08:17,280 --> 00:08:21,120
right hand side and you if you look at

00:08:19,039 --> 00:08:24,000
those side by side you see

00:08:21,120 --> 00:08:24,000
these are actually

00:08:24,400 --> 00:08:27,919
there has been a function copied into

00:08:26,080 --> 00:08:29,680
your proprietary file

00:08:27,919 --> 00:08:31,120
you can see that you see it's a valid

00:08:29,680 --> 00:08:32,560
function you

00:08:31,120 --> 00:08:35,039
you understand you need to do it

00:08:32,560 --> 00:08:37,120
something about it or

00:08:35,039 --> 00:08:38,560
it may or may not be a problem it

00:08:37,120 --> 00:08:41,039
depends on your policies within the

00:08:38,560 --> 00:08:43,360
company and so on and so forth

00:08:41,039 --> 00:08:44,800
this is a gpl file from from the linux

00:08:43,360 --> 00:08:49,680
kernel

00:08:44,800 --> 00:08:49,680
but in some cases it's

00:08:49,920 --> 00:08:55,839
the snippet of code that you find may

00:08:52,240 --> 00:08:58,959
not be relevant and one such

00:08:55,839 --> 00:09:00,800
case could be an import statement

00:08:58,959 --> 00:09:02,880
in java that i mean this is not

00:09:00,800 --> 00:09:04,080
something you would have copyright for

00:09:02,880 --> 00:09:05,920
so you just

00:09:04,080 --> 00:09:07,120
so what the scanner needs to do here is

00:09:05,920 --> 00:09:09,600
you need to determine this

00:09:07,120 --> 00:09:11,040
file is not relevant you need to discard

00:09:09,600 --> 00:09:14,080
it

00:09:11,040 --> 00:09:17,279
so initially we highlighted these files

00:09:14,080 --> 00:09:23,040
but now we have means

00:09:17,279 --> 00:09:26,800
with ai to actually discard this kind of

00:09:23,040 --> 00:09:26,800
matches so we just don't show those

00:09:28,080 --> 00:09:30,480
and then

00:09:31,200 --> 00:09:36,080
the next thing is to actually inspect

00:09:34,080 --> 00:09:38,640
license declarations

00:09:36,080 --> 00:09:42,080
and as with the other cases there are

00:09:38,640 --> 00:09:42,080
cases when this is very simple

00:09:42,720 --> 00:09:50,000
here node.js it is an

00:09:47,040 --> 00:09:50,480
mit component and in this specific file

00:09:50,000 --> 00:09:53,279
that

00:09:50,480 --> 00:09:55,200
belongs to node.js it's actually another

00:09:53,279 --> 00:09:56,000
license but it's also here declared in

00:09:55,200 --> 00:09:58,080
the

00:09:56,000 --> 00:10:00,800
in the license header it's a mozilla

00:09:58,080 --> 00:10:00,800
public license

00:10:00,880 --> 00:10:07,600
so this is relatively straightforward

00:10:04,800 --> 00:10:08,399
the scanner will find it and will

00:10:07,600 --> 00:10:11,839
determine

00:10:08,399 --> 00:10:12,640
correctly what it is but it's not always

00:10:11,839 --> 00:10:16,079
that easy

00:10:12,640 --> 00:10:19,120
because for a scanner if you have

00:10:16,079 --> 00:10:20,800
a license declaration like this one

00:10:19,120 --> 00:10:23,519
it actually doesn't say which license it

00:10:20,800 --> 00:10:26,880
is but rather which license it is not

00:10:23,519 --> 00:10:26,880
here specifically it says

00:10:27,120 --> 00:10:35,600
this is not an mit

00:10:33,040 --> 00:10:37,680
this is not the gpl v3 file this

00:10:35,600 --> 00:10:41,040
specifically says that this is

00:10:37,680 --> 00:10:44,399
a public domain file unlicensed

00:10:41,040 --> 00:10:45,680
so it's more difficult for a scanner to

00:10:44,399 --> 00:10:49,440
actually determine

00:10:45,680 --> 00:10:53,200
what this is so here you need to

00:10:49,440 --> 00:10:54,160
engage employ some ai technologies to

00:10:53,200 --> 00:10:57,839
actually

00:10:54,160 --> 00:11:01,839
identify this file correctly

00:10:57,839 --> 00:11:01,839
and the same thing can happen with

00:11:03,279 --> 00:11:06,240
license texts

00:11:06,800 --> 00:11:14,000
if you have a component you have

00:11:11,680 --> 00:11:14,959
often a file which is called the license

00:11:14,000 --> 00:11:17,920
or copying

00:11:14,959 --> 00:11:18,800
where the information about the file is

00:11:17,920 --> 00:11:21,120
included and

00:11:18,800 --> 00:11:22,560
in this case you have the information

00:11:21,120 --> 00:11:24,880
it's a

00:11:22,560 --> 00:11:25,920
ghost script and it's licensed on the

00:11:24,880 --> 00:11:28,959
gpl

00:11:25,920 --> 00:11:31,120
v2 it's specified there so

00:11:28,959 --> 00:11:32,800
so as soon as the scanner finds this

00:11:31,120 --> 00:11:36,480
information it can mark the

00:11:32,800 --> 00:11:39,839
this file as gpl gpl file

00:11:36,480 --> 00:11:42,000
this is relatively easy and

00:11:39,839 --> 00:11:43,680
this is another case it's actually not

00:11:42,000 --> 00:11:47,200
so easy if

00:11:43,680 --> 00:11:50,160
an auditor looks at this one he sees

00:11:47,200 --> 00:11:53,200
a license header it's apache license

00:11:50,160 --> 00:11:55,839
it's apache license v2

00:11:53,200 --> 00:11:56,880
it comes from a projected github pocket

00:11:55,839 --> 00:11:59,920
warriors

00:11:56,880 --> 00:12:02,079
and you can actually you probably would

00:11:59,920 --> 00:12:05,279
consider this as an apache

00:12:02,079 --> 00:12:07,920
file which it is actually not because if

00:12:05,279 --> 00:12:07,920
you look at the

00:12:08,399 --> 00:12:15,360
github repo for this one you actually

00:12:11,839 --> 00:12:18,639
find that there were some additions and

00:12:15,360 --> 00:12:21,680
deletions from the license

00:12:18,639 --> 00:12:23,120
and so basically here is a screenshot

00:12:21,680 --> 00:12:26,320
from our tool

00:12:23,120 --> 00:12:29,839
where you see that some words have been

00:12:26,320 --> 00:12:32,720
replaced instead of you may you now

00:12:29,839 --> 00:12:35,440
the license now say says you cannot

00:12:32,720 --> 00:12:40,000
reproduce and distribute copies of this

00:12:35,440 --> 00:12:42,000
software under change some more

00:12:40,000 --> 00:12:43,040
of the license text and even add a

00:12:42,000 --> 00:12:46,320
section

00:12:43,040 --> 00:12:50,880
section 10 which specifically says

00:12:46,320 --> 00:12:53,360
usage of these files are allowed by

00:12:50,880 --> 00:12:54,800
the legal owner under these terms you do

00:12:53,360 --> 00:12:57,600
not edit

00:12:54,800 --> 00:12:59,760
them under any circumstances you only

00:12:57,600 --> 00:13:01,480
use these files for pocket mine api

00:12:59,760 --> 00:13:04,160
website

00:13:01,480 --> 00:13:04,639
pocketmine.net so this is actually no

00:13:04,160 --> 00:13:07,680
longer

00:13:04,639 --> 00:13:09,519
it's certainly not apache it's not even

00:13:07,680 --> 00:13:12,399
open source

00:13:09,519 --> 00:13:14,560
and an auditor who would see this file

00:13:12,399 --> 00:13:17,279
who would see

00:13:14,560 --> 00:13:17,839
that license initially probably doesn't

00:13:17,279 --> 00:13:19,920
wouldn't

00:13:17,839 --> 00:13:22,880
discover it unless you run some kind of

00:13:19,920 --> 00:13:22,880
investigation here

00:13:24,480 --> 00:13:29,680
and the last part is

00:13:27,920 --> 00:13:32,959
another difficulty there are corner

00:13:29,680 --> 00:13:36,160
cases where

00:13:32,959 --> 00:13:41,120
here you have a file an example

00:13:36,160 --> 00:13:41,120
you identify this file as a

00:13:42,000 --> 00:13:49,360
load loading image view

00:13:46,160 --> 00:13:51,519
an mit license and it all looks good but

00:13:49,360 --> 00:13:54,639
actually if you look into this file

00:13:51,519 --> 00:13:57,839
you find that there are snippets of code

00:13:54,639 --> 00:13:57,839
in this file from

00:13:57,920 --> 00:14:02,480
from stack overflow specifically there

00:14:01,680 --> 00:14:04,240
is

00:14:02,480 --> 00:14:06,639
if you go to the stack overflow and look

00:14:04,240 --> 00:14:08,079
at at the description there's a problem

00:14:06,639 --> 00:14:10,320
in that stack overflow

00:14:08,079 --> 00:14:11,440
and stack overflow i guess most of you

00:14:10,320 --> 00:14:13,360
know it's a

00:14:11,440 --> 00:14:15,600
website where you can find solutions to

00:14:13,360 --> 00:14:20,320
your programming

00:14:15,600 --> 00:14:22,880
problems and there is a

00:14:20,320 --> 00:14:23,680
there's an article about how how to get

00:14:22,880 --> 00:14:26,720
the position

00:14:23,680 --> 00:14:28,639
of a picture inside the image view

00:14:26,720 --> 00:14:30,079
and there is some code associated to it

00:14:28,639 --> 00:14:34,079
and that code has been copied

00:14:30,079 --> 00:14:37,440
into that component so

00:14:34,079 --> 00:14:40,000
coming from stack overflow

00:14:37,440 --> 00:14:41,920
it's not mit license it's the license

00:14:40,000 --> 00:14:44,800
that is used for the contribute to

00:14:41,920 --> 00:14:46,880
contribute to the code to stack overflow

00:14:44,800 --> 00:14:50,880
which is a

00:14:46,880 --> 00:14:55,760
weak copy left license basically so

00:14:50,880 --> 00:14:55,760
the whole component is no longer mit

00:14:57,680 --> 00:15:05,120
so this is kind of some of the

00:15:01,920 --> 00:15:06,160
problems that you face and if we think

00:15:05,120 --> 00:15:09,920
about the lessons

00:15:06,160 --> 00:15:13,680
lesson learned i think

00:15:09,920 --> 00:15:16,160
most of the problems you

00:15:13,680 --> 00:15:17,519
face when you audit when you when you

00:15:16,160 --> 00:15:22,800
scan the code are actually

00:15:17,519 --> 00:15:22,800
truly pretty simple but there are

00:15:23,680 --> 00:15:28,000
the important thing is that the

00:15:25,120 --> 00:15:30,800
complexity of auditing increasing

00:15:28,000 --> 00:15:32,800
we reuse more and more code we put code

00:15:30,800 --> 00:15:34,079
from one project into another project we

00:15:32,800 --> 00:15:36,480
mix licenses

00:15:34,079 --> 00:15:37,199
so actually all these effects affects

00:15:36,480 --> 00:15:39,279
the

00:15:37,199 --> 00:15:41,120
the complexity i think github we found

00:15:39,279 --> 00:15:41,600
out that on github there is one new

00:15:41,120 --> 00:15:45,040
project

00:15:41,600 --> 00:15:49,040
added on github in a second

00:15:45,040 --> 00:15:51,759
and of course most of those are forks

00:15:49,040 --> 00:15:54,160
but they're actually real projects and

00:15:51,759 --> 00:15:57,199
reusing this and mixing is it's actually

00:15:54,160 --> 00:16:00,000
increasing complexity

00:15:57,199 --> 00:16:00,480
quite a lot and as i said i think today

00:16:00,000 --> 00:16:02,880
there's

00:16:00,480 --> 00:16:04,399
some already 100 million projects in the

00:16:02,880 --> 00:16:06,320
open source

00:16:04,399 --> 00:16:09,839
but the vast majority of the decision is

00:16:06,320 --> 00:16:09,839
actually simple and monotonous

00:16:11,040 --> 00:16:13,279
and

00:16:14,959 --> 00:16:18,800
but then when you review something

00:16:16,880 --> 00:16:21,600
simple and monotonous and then

00:16:18,800 --> 00:16:23,120
at some point you get a corner case like

00:16:21,600 --> 00:16:26,399
the one with apache

00:16:23,120 --> 00:16:27,279
you you actually quite easily miss that

00:16:26,399 --> 00:16:29,600
because

00:16:27,279 --> 00:16:30,959
it's just we are not that good at

00:16:29,600 --> 00:16:35,199
finding

00:16:30,959 --> 00:16:39,120
when someone replaced may with cannot

00:16:35,199 --> 00:16:39,120
it's not what humans are good at

00:16:39,600 --> 00:16:43,519
and of course this other part with

00:16:42,399 --> 00:16:46,800
auditing is the

00:16:43,519 --> 00:16:47,360
most time consuming and costly part of

00:16:46,800 --> 00:16:49,759
the

00:16:47,360 --> 00:16:51,519
whole compliance process license

00:16:49,759 --> 00:16:53,120
compliance process

00:16:51,519 --> 00:16:55,199
that's where you have all the people

00:16:53,120 --> 00:16:57,120
that work with it we've talked to some

00:16:55,199 --> 00:16:59,519
of our customers they have

00:16:57,120 --> 00:17:00,320
upwards 100 people working with

00:16:59,519 --> 00:17:04,240
compliance

00:17:00,320 --> 00:17:06,319
it's a 400 000 people company but

00:17:04,240 --> 00:17:08,319
still 100 people working with compliance

00:17:06,319 --> 00:17:12,799
and most of them are working with this

00:17:08,319 --> 00:17:15,919
audit audit work

00:17:12,799 --> 00:17:17,679
so actually adding ai

00:17:15,919 --> 00:17:19,520
and solving some of those problems in

00:17:17,679 --> 00:17:23,360
more automatic automated way

00:17:19,520 --> 00:17:26,000
is the only way to go to improve

00:17:23,360 --> 00:17:26,720
compliance and the thing that we are

00:17:26,000 --> 00:17:30,080
doing with

00:17:26,720 --> 00:17:32,640
using two kind of two ways to do this

00:17:30,080 --> 00:17:35,760
expert systems and machine learning and

00:17:32,640 --> 00:17:35,760
expert systems are

00:17:36,080 --> 00:17:42,080
basically rules that we describe so

00:17:39,280 --> 00:17:44,240
recurring problems are can be described

00:17:42,080 --> 00:17:46,320
in this way

00:17:44,240 --> 00:17:48,080
it's usually faster than machine

00:17:46,320 --> 00:17:50,080
learning

00:17:48,080 --> 00:17:51,520
but at the same time if you have corner

00:17:50,080 --> 00:17:55,440
cases

00:17:51,520 --> 00:17:58,000
you need other means to do this you need

00:17:55,440 --> 00:17:58,000
basically

00:17:58,480 --> 00:18:03,360
learning data and you need to teach your

00:18:01,440 --> 00:18:05,760
algorithms how to make the decisions the

00:18:03,360 --> 00:18:09,039
correct decisions

00:18:05,760 --> 00:18:15,760
so just a kind of overview

00:18:09,039 --> 00:18:17,440
today when we in our tools we have

00:18:15,760 --> 00:18:19,280
knowledge base on top of this we have

00:18:17,440 --> 00:18:22,240
something we call scan engine

00:18:19,280 --> 00:18:24,160
and there we have a software that we

00:18:22,240 --> 00:18:26,240
call alfred which determines the code

00:18:24,160 --> 00:18:29,280
origin and analyzes

00:18:26,240 --> 00:18:31,360
the validity of the partial file matches

00:18:29,280 --> 00:18:32,640
and then we have in up in the command

00:18:31,360 --> 00:18:35,840
line interface

00:18:32,640 --> 00:18:37,440
we have shinobi

00:18:35,840 --> 00:18:40,000
which inspects slacks license

00:18:37,440 --> 00:18:43,520
declaration and

00:18:40,000 --> 00:18:45,520
license texts these are kind of the

00:18:43,520 --> 00:18:47,440
where we use some of the intelligence

00:18:45,520 --> 00:18:50,960
that we have in our

00:18:47,440 --> 00:18:57,840
systems so this was

00:18:50,960 --> 00:18:57,840
really my 25 minutes any questions

00:19:04,640 --> 00:19:11,840
thank you

00:19:12,280 --> 00:19:18,770
[Music]

00:19:22,890 --> 00:19:27,520
[Music]

00:19:25,440 --> 00:19:27,520

YouTube URL: https://www.youtube.com/watch?v=kdt5Hl_U4X8


