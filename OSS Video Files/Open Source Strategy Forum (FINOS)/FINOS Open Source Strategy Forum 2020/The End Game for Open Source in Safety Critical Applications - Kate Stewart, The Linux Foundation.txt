Title: The End Game for Open Source in Safety Critical Applications - Kate Stewart, The Linux Foundation
Publication date: 2020-12-22
Playlist: FINOS Open Source Strategy Forum 2020
Description: 
	The End Game for Open Source in Safety Critical Applications - Kate Stewart, The Linux Foundation
Captions: 
	00:00:07,040 --> 00:00:09,679
good day

00:00:07,919 --> 00:00:12,080
my name is kate stewart and i'm a

00:00:09,679 --> 00:00:13,920
director here at the linux foundation

00:00:12,080 --> 00:00:15,519
and i've been looking at a lot of issues

00:00:13,920 --> 00:00:19,439
around embedded

00:00:15,519 --> 00:00:20,160
and safety critical applications and

00:00:19,439 --> 00:00:21,520
working to see

00:00:20,160 --> 00:00:23,519
how we can get it so that we can be

00:00:21,520 --> 00:00:26,080
safely using open source

00:00:23,519 --> 00:00:27,119
projects in these very important and

00:00:26,080 --> 00:00:28,840
relevant realms that

00:00:27,119 --> 00:00:31,119
we're seeing a lot of innovation

00:00:28,840 --> 00:00:34,719
occurring

00:00:31,119 --> 00:00:36,559
one of the um inspirations for me has

00:00:34,719 --> 00:00:40,160
been margaret hamilton

00:00:36,559 --> 00:00:42,719
and she was the person that basically

00:00:40,160 --> 00:00:44,079
programmed the apollo space mission and

00:00:42,719 --> 00:00:45,760
working with the team there and did the

00:00:44,079 --> 00:00:46,800
testing to make sure that the astronauts

00:00:45,760 --> 00:00:50,000
could get to the

00:00:46,800 --> 00:00:51,360
back safely over 50 years ago and a lot

00:00:50,000 --> 00:00:51,920
of the things that she was talking about

00:00:51,360 --> 00:00:55,039
then

00:00:51,920 --> 00:00:58,320
um this slide is from the ixi um

00:00:55,039 --> 00:01:01,280
conference in 2019 2018 sorry

00:00:58,320 --> 00:01:03,359
and um you know in there she's pretty

00:01:01,280 --> 00:01:04,879
much saying

00:01:03,359 --> 00:01:06,799
you know the challenges you had to build

00:01:04,879 --> 00:01:07,680
man-made software meaning astronauts

00:01:06,799 --> 00:01:08,960
lives were at stake

00:01:07,680 --> 00:01:11,119
and that's pretty much the definition

00:01:08,960 --> 00:01:12,799
safety critical when people's lives are

00:01:11,119 --> 00:01:14,240
at stake we need to make sure that our

00:01:12,799 --> 00:01:16,000
software works

00:01:14,240 --> 00:01:18,479
it has to work the first time it has to

00:01:16,000 --> 00:01:21,680
be reliable and tested and dependable

00:01:18,479 --> 00:01:23,360
um so you need also to potentially be

00:01:21,680 --> 00:01:24,560
able to detect errors and recover in

00:01:23,360 --> 00:01:29,439
real time

00:01:24,560 --> 00:01:29,439
you know fast forward to today and

00:01:30,000 --> 00:01:34,479
um we've just finished seeing you know

00:01:32,000 --> 00:01:37,759
spacex's rockets and with the

00:01:34,479 --> 00:01:40,799
numb capsule um go up to

00:01:37,759 --> 00:01:43,840
the space station and dock

00:01:40,799 --> 00:01:46,079
and um you know

00:01:43,840 --> 00:01:47,360
those are all being run with linux and

00:01:46,079 --> 00:01:50,159
so

00:01:47,360 --> 00:01:51,680
uh making sure that we have you know

00:01:50,159 --> 00:01:54,960
these applications there

00:01:51,680 --> 00:01:57,040
um and that the right level of safety

00:01:54,960 --> 00:01:57,600
analysis is important is going to be key

00:01:57,040 --> 00:02:01,439
because

00:01:57,600 --> 00:02:02,880
we're still going back to space um

00:02:01,439 --> 00:02:04,399
other things are even like you know down

00:02:02,880 --> 00:02:05,360
on the daily streets we're going to be

00:02:04,399 --> 00:02:07,280
seeing more and more of these

00:02:05,360 --> 00:02:08,800
self-driving cars emerging

00:02:07,280 --> 00:02:10,160
and then we're going to be having to see

00:02:08,800 --> 00:02:12,239
the smart cities that have the

00:02:10,160 --> 00:02:15,599
infrastructure to support them

00:02:12,239 --> 00:02:17,040
um there is iot that's emerging it's a

00:02:15,599 --> 00:02:18,879
very pervasive field that will be in

00:02:17,040 --> 00:02:21,200
cars and around us

00:02:18,879 --> 00:02:22,080
and at the part of it all is going to be

00:02:21,200 --> 00:02:24,560
the fact that we've got

00:02:22,080 --> 00:02:25,200
safety and then even to a more recent

00:02:24,560 --> 00:02:27,200
example

00:02:25,200 --> 00:02:28,959
obviously um we're in the midst of one

00:02:27,200 --> 00:02:30,160
of the you know worst endemics of my

00:02:28,959 --> 00:02:32,319
lifetime

00:02:30,160 --> 00:02:33,680
and when i first started searching

00:02:32,319 --> 00:02:35,599
earlier in the summer

00:02:33,680 --> 00:02:36,879
there was a lot of initial momentum

00:02:35,599 --> 00:02:38,400
around making sure that there were open

00:02:36,879 --> 00:02:39,680
source solutions for ventilators that

00:02:38,400 --> 00:02:41,920
were available

00:02:39,680 --> 00:02:43,920
that could be you know had fundamental

00:02:41,920 --> 00:02:47,200
testing reliability

00:02:43,920 --> 00:02:48,560
um where it will be manufactured and

00:02:47,200 --> 00:02:50,400
are able to be used in the field and so

00:02:48,560 --> 00:02:52,319
forth and an open source

00:02:50,400 --> 00:02:54,080
initiative came up to look at which open

00:02:52,319 --> 00:02:54,720
source options are there for programming

00:02:54,080 --> 00:02:57,599
them

00:02:54,720 --> 00:02:59,760
and building them and you know we've

00:02:57,599 --> 00:03:02,159
seen

00:02:59,760 --> 00:03:03,680
these systems and people are wanting to

00:03:02,159 --> 00:03:04,000
create people wanting to help and open

00:03:03,680 --> 00:03:08,640
source

00:03:04,000 --> 00:03:10,560
gives them a way to do it so given that

00:03:08,640 --> 00:03:12,640
open source is already being used in

00:03:10,560 --> 00:03:14,159
safety critical applications

00:03:12,640 --> 00:03:16,800
so i guess the challenge is now how do

00:03:14,159 --> 00:03:18,800
we make it safe

00:03:16,800 --> 00:03:20,159
um and just a little bit more stats

00:03:18,800 --> 00:03:23,920
around this you know

00:03:20,159 --> 00:03:26,000
99 of the code bases audited last year

00:03:23,920 --> 00:03:27,120
and um had open source components in

00:03:26,000 --> 00:03:29,040
them and

00:03:27,120 --> 00:03:30,159
of those audited code bases over 70

00:03:29,040 --> 00:03:33,680
percent

00:03:30,159 --> 00:03:35,599
were made up of open source projects so

00:03:33,680 --> 00:03:37,360
um this isn't all the case in safety

00:03:35,599 --> 00:03:39,920
critical space but nonetheless

00:03:37,360 --> 00:03:41,760
um it's here as a pervasive influence

00:03:39,920 --> 00:03:44,799
over technology and

00:03:41,760 --> 00:03:46,720
it is moving into the safety space um

00:03:44,799 --> 00:03:47,920
this was from blackduck report earlier

00:03:46,720 --> 00:03:49,840
this year

00:03:47,920 --> 00:03:51,200
and then some type had a report last

00:03:49,840 --> 00:03:52,640
year that says they're seeing double and

00:03:51,200 --> 00:03:53,599
triple digit growth and open source

00:03:52,640 --> 00:03:54,720
components

00:03:53,599 --> 00:03:55,920
and these are the components that make

00:03:54,720 --> 00:03:57,360
these really cool applications that

00:03:55,920 --> 00:03:59,200
they've already put together

00:03:57,360 --> 00:04:00,799
and there's no slowdown in site so open

00:03:59,200 --> 00:04:03,680
source is here and

00:04:00,799 --> 00:04:04,879
it is the seed for innovation so the

00:04:03,680 --> 00:04:06,159
challenge is now if we're going to be

00:04:04,879 --> 00:04:08,000
using open source in these safety

00:04:06,159 --> 00:04:10,319
critical applications how can we make it

00:04:08,000 --> 00:04:10,319
safe

00:04:10,400 --> 00:04:14,400
and when we talk about safety and safety

00:04:12,640 --> 00:04:15,120
critical um there's a lot of standards

00:04:14,400 --> 00:04:18,639
out there

00:04:15,120 --> 00:04:21,440
and depending on certain domains um

00:04:18,639 --> 00:04:22,560
there is the desire of certain things

00:04:21,440 --> 00:04:23,919
that they test but they have a lot of

00:04:22,560 --> 00:04:28,160
underlying common

00:04:23,919 --> 00:04:29,280
elements 61 508 is pretty much a general

00:04:28,160 --> 00:04:30,960
standard

00:04:29,280 --> 00:04:33,040
and a lot of the initiatives are

00:04:30,960 --> 00:04:34,560
focusing on it initially

00:04:33,040 --> 00:04:36,560
because it's a key for automotive

00:04:34,560 --> 00:04:38,320
railways nuclear machine safety and

00:04:36,560 --> 00:04:40,000
industrial processes

00:04:38,320 --> 00:04:41,680
so if we can get the generic standards

00:04:40,000 --> 00:04:42,240
in place and it's a smaller gap to go to

00:04:41,680 --> 00:04:45,040
the other

00:04:42,240 --> 00:04:46,320
domain specific ones however all of

00:04:45,040 --> 00:04:47,759
these have in common as you know

00:04:46,320 --> 00:04:49,120
margaret was saying

00:04:47,759 --> 00:04:50,880
is you know we need to minimize and

00:04:49,120 --> 00:04:52,320
mitigate the systemic faults and we need

00:04:50,880 --> 00:04:54,000
to make sure that it is safe and needs

00:04:52,320 --> 00:04:56,880
to be known tested and managed and needs

00:04:54,000 --> 00:04:58,240
to work and recover from problems

00:04:56,880 --> 00:04:59,919
and so these properties are still going

00:04:58,240 --> 00:05:02,880
to be needed here um

00:04:59,919 --> 00:05:04,000
the thing is that the open source um has

00:05:02,880 --> 00:05:05,520
had a different methodology for

00:05:04,000 --> 00:05:06,800
development than these standards were

00:05:05,520 --> 00:05:08,840
written in front of

00:05:06,800 --> 00:05:11,360
and so the question is how can we

00:05:08,840 --> 00:05:14,000
reconcile

00:05:11,360 --> 00:05:15,600
the other challenge out here is the fact

00:05:14,000 --> 00:05:18,080
that

00:05:15,600 --> 00:05:19,600
most companies are not able to today to

00:05:18,080 --> 00:05:21,600
accurately summarize the software that's

00:05:19,600 --> 00:05:24,000
running on their systems

00:05:21,600 --> 00:05:25,759
the modern digital infrastructure um you

00:05:24,000 --> 00:05:28,880
know it's a very sophisticated

00:05:25,759 --> 00:05:30,639
um layering of software and you know we

00:05:28,880 --> 00:05:31,520
build on the shoulders of giants well in

00:05:30,639 --> 00:05:32,639
the same way

00:05:31,520 --> 00:05:34,639
some of the modern applications are

00:05:32,639 --> 00:05:36,479
building on layers and layers and layers

00:05:34,639 --> 00:05:41,199
of other information

00:05:36,479 --> 00:05:43,039
and you know um as this xkcd cartoon

00:05:41,199 --> 00:05:44,320
neatly illustrates is family there is

00:05:43,039 --> 00:05:46,320
some project out there

00:05:44,320 --> 00:05:47,440
that all this stuff is depending on that

00:05:46,320 --> 00:05:49,360
um

00:05:47,440 --> 00:05:50,320
that's not as sustainable as we'd like

00:05:49,360 --> 00:05:51,280
and so how do we get these things

00:05:50,320 --> 00:05:52,560
sustainable

00:05:51,280 --> 00:05:54,000
and how do we get this infrastructure to

00:05:52,560 --> 00:05:55,360
be clear and understood part of that's

00:05:54,000 --> 00:05:57,919
going to be coming up with some software

00:05:55,360 --> 00:06:00,400
transparency

00:05:57,919 --> 00:06:02,800
so these are the gaps that we're looking

00:06:00,400 --> 00:06:04,240
at with what we want to be going after

00:06:02,800 --> 00:06:06,479
and what we need to be going after for

00:06:04,240 --> 00:06:08,960
that matter and what

00:06:06,479 --> 00:06:10,160
we have available to us today and so

00:06:08,960 --> 00:06:11,520
we've got to figure out how we can close

00:06:10,160 --> 00:06:13,360
these gaps between what the safety

00:06:11,520 --> 00:06:16,319
standards are looking for

00:06:13,360 --> 00:06:18,840
and what we have today in this rapid

00:06:16,319 --> 00:06:21,919
evolving exciting open source

00:06:18,840 --> 00:06:24,160
ecosystem so the first step is actually

00:06:21,919 --> 00:06:25,520
being able to understand what you're

00:06:24,160 --> 00:06:27,440
actually running on your system

00:06:25,520 --> 00:06:29,520
and improving the software transparency

00:06:27,440 --> 00:06:32,080
by using some sort of standardized

00:06:29,520 --> 00:06:32,080
materials

00:06:32,560 --> 00:06:36,000
in the last couple years has been an

00:06:34,080 --> 00:06:39,199
excellent effort from

00:06:36,000 --> 00:06:41,440
uh ntia um they've basically been

00:06:39,199 --> 00:06:42,800
acting as a servant neutral broker to

00:06:41,440 --> 00:06:43,600
try to bring a bunch of stakeholders

00:06:42,800 --> 00:06:45,120
together

00:06:43,600 --> 00:06:46,400
and come up with a common definition of

00:06:45,120 --> 00:06:48,479
what a software bill material is it

00:06:46,400 --> 00:06:50,000
should be and what a minimum viable

00:06:48,479 --> 00:06:52,479
like what fields are you really need to

00:06:50,000 --> 00:06:55,360
keep in a software build materials

00:06:52,479 --> 00:06:56,479
and we need to make sure that these um

00:06:55,360 --> 00:06:58,960
this information

00:06:56,479 --> 00:07:00,240
is there and the connections between

00:06:58,960 --> 00:07:01,520
components to components and

00:07:00,240 --> 00:07:04,960
relationships

00:07:01,520 --> 00:07:07,440
articulated and

00:07:04,960 --> 00:07:09,680
this covers you know open source and

00:07:07,440 --> 00:07:11,039
proprietary free and paid

00:07:09,680 --> 00:07:15,199
it's just a question we need to figure

00:07:11,039 --> 00:07:15,199
out how we can map what's being used

00:07:15,680 --> 00:07:19,280
and you know when well actually pretty

00:07:18,720 --> 00:07:20,800
much

00:07:19,280 --> 00:07:22,960
any point in a software life cycle

00:07:20,800 --> 00:07:24,880
development there's a use for an s-bomb

00:07:22,960 --> 00:07:26,479
a software build materials because you

00:07:24,880 --> 00:07:28,080
need to know what you've got

00:07:26,479 --> 00:07:30,319
you need to know if you've added a patch

00:07:28,080 --> 00:07:31,440
to it how has it been built is there any

00:07:30,319 --> 00:07:33,919
certifications that are

00:07:31,440 --> 00:07:35,599
effective with it you know are there you

00:07:33,919 --> 00:07:37,280
know configs that have been used

00:07:35,599 --> 00:07:38,960
for the version you're using that might

00:07:37,280 --> 00:07:40,800
have a relevance in a safety

00:07:38,960 --> 00:07:44,000
argumentation

00:07:40,800 --> 00:07:45,280
all of these elements here um

00:07:44,000 --> 00:07:46,800
it could be you should be able to

00:07:45,280 --> 00:07:48,400
generate a software build materials at

00:07:46,800 --> 00:07:50,240
any point in your lifecycle

00:07:48,400 --> 00:07:51,840
is what it's coming down to and be able

00:07:50,240 --> 00:07:53,360
to ask for a software bill of materials

00:07:51,840 --> 00:07:54,240
for any time you're taking and consuming

00:07:53,360 --> 00:07:56,240
in a

00:07:54,240 --> 00:07:57,360
piece of open source as part of a larger

00:07:56,240 --> 00:07:58,960
product

00:07:57,360 --> 00:08:00,240
and quite frankly you want to know what

00:07:58,960 --> 00:08:03,039
else is in the product in addition to

00:08:00,240 --> 00:08:03,039
open source too

00:08:03,520 --> 00:08:06,879
so why is there a lot of people starting

00:08:06,160 --> 00:08:08,080
to wake up

00:08:06,879 --> 00:08:08,879
and start caring about this well

00:08:08,080 --> 00:08:10,879
actually it's because there's money

00:08:08,879 --> 00:08:13,039
involved um

00:08:10,879 --> 00:08:14,400
and the vulnerabilities and the impact

00:08:13,039 --> 00:08:16,080
of vulnerabilities are in the news

00:08:14,400 --> 00:08:17,520
you know pretty much every couple weeks

00:08:16,080 --> 00:08:18,720
you're seeing a new vulnerability that's

00:08:17,520 --> 00:08:20,160
impacting someone

00:08:18,720 --> 00:08:22,080
and some of these are actually impacting

00:08:20,160 --> 00:08:23,599
people's lives um you know when there's

00:08:22,080 --> 00:08:25,440
a denial of service attack going on a

00:08:23,599 --> 00:08:26,720
hospital and people can't get access to

00:08:25,440 --> 00:08:28,560
machines they need because they're being

00:08:26,720 --> 00:08:31,039
denied service

00:08:28,560 --> 00:08:32,240
that starts to impact people's lives so

00:08:31,039 --> 00:08:35,360
we there's a large

00:08:32,240 --> 00:08:37,839
a wide interest worldwide pretty much

00:08:35,360 --> 00:08:39,120
improving the cyber security in the

00:08:37,839 --> 00:08:40,479
supply chain

00:08:39,120 --> 00:08:42,719
and the initiatives that are happening

00:08:40,479 --> 00:08:43,919
in the us are mostly revolving around

00:08:42,719 --> 00:08:45,440
the software building materials coming

00:08:43,919 --> 00:08:48,320
out of the ntia effort and

00:08:45,440 --> 00:08:50,480
determining how we make that better but

00:08:48,320 --> 00:08:52,640
you know

00:08:50,480 --> 00:08:54,399
what is merging is you know these things

00:08:52,640 --> 00:08:56,160
are true and we are seeing like things

00:08:54,399 --> 00:08:59,040
like containers emerge

00:08:56,160 --> 00:09:00,080
and containers um are abstracting and

00:08:59,040 --> 00:09:01,839
hiding even further

00:09:00,080 --> 00:09:03,440
all those detailed pieces are being used

00:09:01,839 --> 00:09:06,880
in a system

00:09:03,440 --> 00:09:09,040
and so having that transparency

00:09:06,880 --> 00:09:10,560
and having that ability to understand

00:09:09,040 --> 00:09:12,320
exactly what you're looking at

00:09:10,560 --> 00:09:13,920
is a prerequisite for any type of safety

00:09:12,320 --> 00:09:15,360
analysis and we need to figure out how

00:09:13,920 --> 00:09:16,800
to get it there

00:09:15,360 --> 00:09:19,040
and we're also seeing some of the

00:09:16,800 --> 00:09:20,800
regulatory authorities um

00:09:19,040 --> 00:09:22,320
decide weighing in on this now

00:09:20,800 --> 00:09:22,800
especially in the safety critical spaces

00:09:22,320 --> 00:09:25,040
like

00:09:22,800 --> 00:09:26,000
the fda has um signaled that they will

00:09:25,040 --> 00:09:28,160
be looking for one

00:09:26,000 --> 00:09:29,680
they have not given a date but it has

00:09:28,160 --> 00:09:31,200
been signaled so the medical industry is

00:09:29,680 --> 00:09:32,240
paying you know very close attention to

00:09:31,200 --> 00:09:35,440
this

00:09:32,240 --> 00:09:37,360
and then uh recently the um energy

00:09:35,440 --> 00:09:39,279
for the federal energy regulatory

00:09:37,360 --> 00:09:41,040
committee has weighed in and expects

00:09:39,279 --> 00:09:43,279
saying that they are expecting to see

00:09:41,040 --> 00:09:45,279
i have that expectation that software

00:09:43,279 --> 00:09:48,720
transparency

00:09:45,279 --> 00:09:50,560
and so a lot of these stakeholders are

00:09:48,720 --> 00:09:50,959
coming together and working to actually

00:09:50,560 --> 00:09:53,760
come up

00:09:50,959 --> 00:09:55,760
with um this minimum bible that i was

00:09:53,760 --> 00:09:58,959
chatting about

00:09:55,760 --> 00:09:59,440
and here's um like you say from the next

00:09:58,959 --> 00:10:02,800
sip

00:09:59,440 --> 00:10:05,040
13. you know it's all about

00:10:02,800 --> 00:10:06,160
supply chain risk management and it has

00:10:05,040 --> 00:10:07,680
that expectation

00:10:06,160 --> 00:10:08,720
that you will have some sort of way of

00:10:07,680 --> 00:10:09,519
understanding what software you're

00:10:08,720 --> 00:10:11,120
running

00:10:09,519 --> 00:10:13,839
so you can do the risk assessment it's

00:10:11,120 --> 00:10:13,839
simple as that

00:10:14,240 --> 00:10:17,920
so who should be using an s bomb well

00:10:16,399 --> 00:10:20,480
pretty much anyone that's making up

00:10:17,920 --> 00:10:21,760
um software and deploying software on

00:10:20,480 --> 00:10:22,720
their systems you should be asking for

00:10:21,760 --> 00:10:24,079
them if you

00:10:22,720 --> 00:10:26,880
for anything you're buying and you

00:10:24,079 --> 00:10:28,399
should also be um being able to produce

00:10:26,880 --> 00:10:29,680
them on the fly so that if there's a

00:10:28,399 --> 00:10:31,600
vulnerability coming out you'll be able

00:10:29,680 --> 00:10:32,560
to know what exactly is in your system

00:10:31,600 --> 00:10:33,519
and what you're running

00:10:32,560 --> 00:10:35,839
and whether you're not you need to

00:10:33,519 --> 00:10:37,920
remediate or not and

00:10:35,839 --> 00:10:38,959
a lot of the aspects that are coming in

00:10:37,920 --> 00:10:40,160
could be coming in from the country

00:10:38,959 --> 00:10:41,839
actual the legal

00:10:40,160 --> 00:10:42,959
or the technical from the vulnerability

00:10:41,839 --> 00:10:44,399
side but it also could be from the

00:10:42,959 --> 00:10:46,079
dependency side and it could be the

00:10:44,399 --> 00:10:48,480
analysis side the systemic analysis

00:10:46,079 --> 00:10:50,560
side to make sure your system is safe in

00:10:48,480 --> 00:10:52,800
context and then deploy

00:10:50,560 --> 00:10:55,680
and so all of these things are leading

00:10:52,800 --> 00:10:57,440
us to this type of presence

00:10:55,680 --> 00:10:58,720
and at the end of the day um software

00:10:57,440 --> 00:10:59,200
build materials just make financial

00:10:58,720 --> 00:11:02,320
sense

00:10:59,200 --> 00:11:04,720
um there's been quote um that's come out

00:11:02,320 --> 00:11:05,920
from um you know it's sending you know

00:11:04,720 --> 00:11:07,600
saving hundreds of thousands of man

00:11:05,920 --> 00:11:08,640
hours rather than scrambling around fire

00:11:07,600 --> 00:11:09,920
drill mode

00:11:08,640 --> 00:11:12,320
if you know that you can just look it up

00:11:09,920 --> 00:11:13,920
as a query on your system

00:11:12,320 --> 00:11:15,440
and understand which components you have

00:11:13,920 --> 00:11:16,880
and where they're being deployed

00:11:15,440 --> 00:11:19,680
where these software components are and

00:11:16,880 --> 00:11:21,680
what systems they've been deployed on

00:11:19,680 --> 00:11:24,720
um you can much more effectively manage

00:11:21,680 --> 00:11:27,120
radiations as well as

00:11:24,720 --> 00:11:28,160
ensure that the system can stay up and

00:11:27,120 --> 00:11:29,920
operational and

00:11:28,160 --> 00:11:32,079
fulfill any safety obligations you have

00:11:29,920 --> 00:11:33,760
with it

00:11:32,079 --> 00:11:35,360
so at the lynx foundation we're looking

00:11:33,760 --> 00:11:39,120
at a few projects

00:11:35,360 --> 00:11:41,839
in this space to help with these efforts

00:11:39,120 --> 00:11:42,959
there's common processes and norms

00:11:41,839 --> 00:11:46,480
working with open chain

00:11:42,959 --> 00:11:47,680
and that's now an iso standard that is

00:11:46,480 --> 00:11:49,200
able to

00:11:47,680 --> 00:11:50,880
specify what the obligations and

00:11:49,200 --> 00:11:52,079
expectations are

00:11:50,880 --> 00:11:53,920
we're looking at working towards

00:11:52,079 --> 00:11:55,760
building up common data formats uh

00:11:53,920 --> 00:11:57,440
software package data exchange or spdx

00:11:55,760 --> 00:11:59,519
has been around for 10 years

00:11:57,440 --> 00:12:00,800
it's able to satisfy the minimum viable

00:11:59,519 --> 00:12:04,800
that's been

00:12:00,800 --> 00:12:06,560
arrived at from the ntia process

00:12:04,800 --> 00:12:08,639
and then we also are starting to work on

00:12:06,560 --> 00:12:10,480
pulling together all the tooling to make

00:12:08,639 --> 00:12:11,120
effective workflows for generating and

00:12:10,480 --> 00:12:13,120
consuming

00:12:11,120 --> 00:12:14,880
software materials so you understand

00:12:13,120 --> 00:12:16,000
what you've got on your systems at any

00:12:14,880 --> 00:12:18,000
point in time

00:12:16,000 --> 00:12:19,680
and those workflows and are happening

00:12:18,000 --> 00:12:22,480
within the automated compliance tooling

00:12:19,680 --> 00:12:22,480
project direct

00:12:23,040 --> 00:12:26,800
and if you go actually into the

00:12:24,480 --> 00:12:27,519
specification um for open chain you'll

00:12:26,800 --> 00:12:30,320
actually see

00:12:27,519 --> 00:12:30,880
that um you know right at the very start

00:12:30,320 --> 00:12:32,320
like you know

00:12:30,880 --> 00:12:34,240
one section it's very it's a short

00:12:32,320 --> 00:12:37,440
specification it's easy to read

00:12:34,240 --> 00:12:39,120
it's about 10 pages um

00:12:37,440 --> 00:12:40,480
and it's calling for the material that

00:12:39,120 --> 00:12:41,680
you're you're summarizing and passing

00:12:40,480 --> 00:12:43,120
through the supply chain is the software

00:12:41,680 --> 00:12:45,360
build materials

00:12:43,120 --> 00:12:46,480
and it has open source components that

00:12:45,360 --> 00:12:49,279
are listed and so

00:12:46,480 --> 00:12:50,800
this is part of pulling together having

00:12:49,279 --> 00:12:52,560
sort of standard ways of exchanging the

00:12:50,800 --> 00:12:54,880
information and having standard formats

00:12:52,560 --> 00:12:56,320
that everyone can consume

00:12:54,880 --> 00:12:57,519
is going to be part of improving that

00:12:56,320 --> 00:12:58,560
transparency that we're all going to be

00:12:57,519 --> 00:13:01,680
looking for

00:12:58,560 --> 00:13:04,240
especially in the safety cases

00:13:01,680 --> 00:13:07,760
so next step is well if there's

00:13:04,240 --> 00:13:10,880
functional safety considerations

00:13:07,760 --> 00:13:12,399
how do we focus on understanding the

00:13:10,880 --> 00:13:13,600
interfaces quality and safety

00:13:12,399 --> 00:13:15,920
characteristics of the open source

00:13:13,600 --> 00:13:18,560
projects involved

00:13:15,920 --> 00:13:20,000
we need to actually you know up the

00:13:18,560 --> 00:13:23,200
level of analysis information

00:13:20,000 --> 00:13:26,480
that's available and is a digestible

00:13:23,200 --> 00:13:28,399
for projects and so that when

00:13:26,480 --> 00:13:30,320
there are in a safety argumentation

00:13:28,399 --> 00:13:32,639
someone integrates them in with their

00:13:30,320 --> 00:13:34,160
value the system can be looked at and

00:13:32,639 --> 00:13:37,440
studied and determined that

00:13:34,160 --> 00:13:38,720
yes there is a safety you know issue or

00:13:37,440 --> 00:13:40,399
and what are the mitigations we might

00:13:38,720 --> 00:13:41,519
have played to improve the risk things

00:13:40,399 --> 00:13:43,920
like that

00:13:41,519 --> 00:13:45,600
so that hasn't been a consideration to a

00:13:43,920 --> 00:13:47,199
large extent in a lot of open source

00:13:45,600 --> 00:13:48,639
projects up till now and that's starting

00:13:47,199 --> 00:13:50,240
to shift

00:13:48,639 --> 00:13:51,920
um here at the lynx foundation there's

00:13:50,240 --> 00:13:55,279
several of our projects that

00:13:51,920 --> 00:13:57,360
are actively looking at being able to be

00:13:55,279 --> 00:13:59,440
used in functional safety

00:13:57,360 --> 00:14:00,639
um from zephyr and cell 4 which have

00:13:59,440 --> 00:14:02,240
smaller footprints

00:14:00,639 --> 00:14:03,680
to you know acorn and sandwich or

00:14:02,240 --> 00:14:05,440
hypervisors

00:14:03,680 --> 00:14:06,800
automotive grade linux is looking at it

00:14:05,440 --> 00:14:07,680
and then alisa is

00:14:06,800 --> 00:14:10,959
looking at trying to pull these

00:14:07,680 --> 00:14:12,800
frameworks together to work with linux

00:14:10,959 --> 00:14:14,079
and so let me start with the bigger one

00:14:12,800 --> 00:14:16,320
which is elisa

00:14:14,079 --> 00:14:17,440
and then i'll um go down to one of the

00:14:16,320 --> 00:14:20,880
other ones

00:14:17,440 --> 00:14:22,480
so elisa um started off because it

00:14:20,880 --> 00:14:23,920
stands for enabling linux and safety

00:14:22,480 --> 00:14:25,600
critical applications which is pretty

00:14:23,920 --> 00:14:28,160
much on spot for this

00:14:25,600 --> 00:14:29,279
um over the last you know 30 years linux

00:14:28,160 --> 00:14:30,079
has pretty much grown to be the most

00:14:29,279 --> 00:14:32,639
important open source

00:14:30,079 --> 00:14:34,240
project in the world and 69 of the

00:14:32,639 --> 00:14:35,040
embedded systems marketplace is already

00:14:34,240 --> 00:14:36,959
running linux

00:14:35,040 --> 00:14:40,160
by estimates that have come up um in the

00:14:36,959 --> 00:14:43,279
last years and from other studies

00:14:40,160 --> 00:14:45,440
and as a result of that um

00:14:43,279 --> 00:14:46,720
you know we need to be able to temple

00:14:45,440 --> 00:14:47,839
linux in because

00:14:46,720 --> 00:14:50,800
a lot of these applications you were

00:14:47,839 --> 00:14:52,959
just are seeing um they're using linux

00:14:50,800 --> 00:14:54,240
in them right now and the automotive

00:14:52,959 --> 00:14:57,199
cars

00:14:54,240 --> 00:14:58,639
and the you know spacex rockets so forth

00:14:57,199 --> 00:14:59,920
these are all systems that have linux in

00:14:58,639 --> 00:15:00,480
them and we need to make sure that it's

00:14:59,920 --> 00:15:02,240
staying

00:15:00,480 --> 00:15:03,760
um when it's being used as being safe so

00:15:02,240 --> 00:15:04,480
we're trying to figure out how do we

00:15:03,760 --> 00:15:06,160
actually do

00:15:04,480 --> 00:15:07,680
you know how do we actually get the

00:15:06,160 --> 00:15:09,920
information and do the right level of

00:15:07,680 --> 00:15:11,680
analysis

00:15:09,920 --> 00:15:12,959
and so at the end of at the heart of it

00:15:11,680 --> 00:15:14,639
you know you need to assess whether a

00:15:12,959 --> 00:15:16,480
system is safe it's not the linux itself

00:15:14,639 --> 00:15:17,760
is safe it's how are you using linux

00:15:16,480 --> 00:15:20,160
it's that safe

00:15:17,760 --> 00:15:20,880
and you have to understand your system

00:15:20,160 --> 00:15:24,000
for it

00:15:20,880 --> 00:15:24,800
to be effective um and that is at the

00:15:24,000 --> 00:15:27,440
key of the argument

00:15:24,800 --> 00:15:27,920
you know the thinking here is okay how

00:15:27,440 --> 00:15:29,279
do

00:15:27,920 --> 00:15:31,040
you know how do we are we able to

00:15:29,279 --> 00:15:32,079
articulate how linux is being used and

00:15:31,040 --> 00:15:36,560
can we move that

00:15:32,079 --> 00:15:36,560
forward so

00:15:37,199 --> 00:15:41,680
understanding how you use it is at the

00:15:39,680 --> 00:15:42,959
key you have to understand your system

00:15:41,680 --> 00:15:45,040
you have to understand the linux

00:15:42,959 --> 00:15:46,079
interactions okay what apis are you

00:15:45,040 --> 00:15:47,920
using

00:15:46,079 --> 00:15:49,600
you know what dependencies may there be

00:15:47,920 --> 00:15:51,519
in your system that have also

00:15:49,600 --> 00:15:53,440
are working with linux how are the

00:15:51,519 --> 00:15:57,040
interactions how does it be configured

00:15:53,440 --> 00:16:00,320
all of these are key elements here and

00:15:57,040 --> 00:16:02,079
you need to work with

00:16:00,320 --> 00:16:05,519
when you're using depending on certain

00:16:02,079 --> 00:16:06,959
properties in linux like a scheduler

00:16:05,519 --> 00:16:09,199
you need to ensure that the quality is

00:16:06,959 --> 00:16:11,839
there as well as

00:16:09,199 --> 00:16:13,519
the um behaviors are as expected and

00:16:11,839 --> 00:16:16,240
when errors happen can you recover

00:16:13,519 --> 00:16:16,720
back to you know the days of uh margaret

00:16:16,240 --> 00:16:18,720
you know

00:16:16,720 --> 00:16:20,320
hamilton's analysis for rockets same

00:16:18,720 --> 00:16:20,639
things are holding true today but we

00:16:20,320 --> 00:16:22,240
need

00:16:20,639 --> 00:16:24,800
we've got a very much more sophisticated

00:16:22,240 --> 00:16:24,800
code base

00:16:25,120 --> 00:16:32,480
and so the safety standards

00:16:28,160 --> 00:16:34,079
um you know were

00:16:32,480 --> 00:16:37,600
designed with a certain methodology in

00:16:34,079 --> 00:16:39,759
mind linux has evolved over 29 years

00:16:37,600 --> 00:16:41,440
and it's continuously being developed

00:16:39,759 --> 00:16:42,560
and so it does have a very high level of

00:16:41,440 --> 00:16:44,000
quality

00:16:42,560 --> 00:16:45,759
um you know there's continuous

00:16:44,000 --> 00:16:47,440
improvement processes in place there's

00:16:45,759 --> 00:16:48,639
things that a lot of the standards are

00:16:47,440 --> 00:16:49,920
hinting that they want they're just

00:16:48,639 --> 00:16:51,120
being expressed slightly differently in

00:16:49,920 --> 00:16:52,480
linux

00:16:51,120 --> 00:16:54,959
and there's a lot of evidence from the

00:16:52,480 --> 00:16:56,320
testing that goes on that the process

00:16:54,959 --> 00:16:57,920
quality and the process improvement

00:16:56,320 --> 00:16:58,320
quality already exists there's you know

00:16:57,920 --> 00:16:59,839
there's

00:16:58,320 --> 00:17:01,360
the develop maintainers get together

00:16:59,839 --> 00:17:02,240
there's a self-reflection period every

00:17:01,360 --> 00:17:03,519
year

00:17:02,240 --> 00:17:06,240
to try to figure out what needs to be

00:17:03,519 --> 00:17:07,760
done better and we have a lot of testing

00:17:06,240 --> 00:17:09,919
infrastructures and frameworks that are

00:17:07,760 --> 00:17:11,679
out there that are working with linux

00:17:09,919 --> 00:17:13,439
um being able to pull this evidence

00:17:11,679 --> 00:17:15,520
together and make it accessible

00:17:13,439 --> 00:17:18,799
for people doing the safety analysis is

00:17:15,520 --> 00:17:20,959
at the heart of what elise is going for

00:17:18,799 --> 00:17:22,799
so the mission statement for the project

00:17:20,959 --> 00:17:26,240
is to define maintain

00:17:22,799 --> 00:17:28,799
a common set of elements which

00:17:26,240 --> 00:17:30,720
on processes and tools that can be

00:17:28,799 --> 00:17:32,400
incorporated into specific

00:17:30,720 --> 00:17:35,120
linux based safety critical systems

00:17:32,400 --> 00:17:38,640
amendable to safety certification

00:17:35,120 --> 00:17:40,320
so what we need to do is

00:17:38,640 --> 00:17:42,000
figuring out this gap closure that we're

00:17:40,320 --> 00:17:43,360
talking about um

00:17:42,000 --> 00:17:45,200
there's a lot of information that safety

00:17:43,360 --> 00:17:46,960
standards are looking for

00:17:45,200 --> 00:17:48,400
there's a working group inside lisa

00:17:46,960 --> 00:17:49,600
that's looking at how to close those

00:17:48,400 --> 00:17:50,880
gaps

00:17:49,600 --> 00:17:53,039
and they're working with the kernel

00:17:50,880 --> 00:17:55,039
community um

00:17:53,039 --> 00:17:56,240
on you know understanding what's there

00:17:55,039 --> 00:17:57,760
we want to try to get you know

00:17:56,240 --> 00:17:59,440
elements upstream we want to get

00:17:57,760 --> 00:18:00,960
documentation published we want to get

00:17:59,440 --> 00:18:04,160
this information

00:18:00,960 --> 00:18:04,480
available in the upstream as well as

00:18:04,160 --> 00:18:06,640
have

00:18:04,480 --> 00:18:08,559
reference material available for people

00:18:06,640 --> 00:18:12,400
who are going after

00:18:08,559 --> 00:18:14,080
safety argumentations drawn and then

00:18:12,400 --> 00:18:15,760
in the components like the scheduler

00:18:14,080 --> 00:18:16,320
like the memory management units things

00:18:15,760 --> 00:18:17,679
like that

00:18:16,320 --> 00:18:19,200
well there's various properties because

00:18:17,679 --> 00:18:20,000
people are depending on these systems to

00:18:19,200 --> 00:18:21,520
work

00:18:20,000 --> 00:18:23,679
and how do we do the right analysis of

00:18:21,520 --> 00:18:28,080
the interfaces coming into them

00:18:23,679 --> 00:18:29,679
as well as um understanding these um you

00:18:28,080 --> 00:18:31,200
know what will happen if a fault happens

00:18:29,679 --> 00:18:33,120
can we recover

00:18:31,200 --> 00:18:34,720
and making sure that these components

00:18:33,120 --> 00:18:36,559
are well analyzed

00:18:34,720 --> 00:18:39,520
and so that people can build it into the

00:18:36,559 --> 00:18:39,520
rest of their analysis

00:18:40,880 --> 00:18:44,559
part of alisa is also working with um

00:18:43,120 --> 00:18:46,559
you know okay

00:18:44,559 --> 00:18:47,840
you can't just look at linux zones as we

00:18:46,559 --> 00:18:49,440
sort of said it has been a system so

00:18:47,840 --> 00:18:51,840
we've been looking for open source

00:18:49,440 --> 00:18:52,480
um applications that are available out

00:18:51,840 --> 00:18:54,160
there

00:18:52,480 --> 00:18:56,240
there's a medical devices working group

00:18:54,160 --> 00:18:58,160
that's looking at the open aps

00:18:56,240 --> 00:18:59,280
which is an artificial pancreas loop

00:18:58,160 --> 00:19:02,480
system between

00:18:59,280 --> 00:19:04,240
a glucose monitor and an insulin pump um

00:19:02,480 --> 00:19:05,600
that's a hobbyist project but everything

00:19:04,240 --> 00:19:07,679
is nicely open it's running on a

00:19:05,600 --> 00:19:08,799
raspberry pi so it gives us a basis to

00:19:07,679 --> 00:19:11,200
analyze down to

00:19:08,799 --> 00:19:12,640
what linux doing in the system and then

00:19:11,200 --> 00:19:13,440
there's the automotive working group as

00:19:12,640 --> 00:19:15,520
well

00:19:13,440 --> 00:19:16,880
that is looking at various applications

00:19:15,520 --> 00:19:18,799
that will be in automotive so we're

00:19:16,880 --> 00:19:19,760
using linux for like tail tail apps and

00:19:18,799 --> 00:19:21,440
so forth

00:19:19,760 --> 00:19:23,760
and doing the analysis again to figure

00:19:21,440 --> 00:19:24,400
out what parts of links are being used

00:19:23,760 --> 00:19:27,520
um

00:19:24,400 --> 00:19:29,440
and building from there um elise is able

00:19:27,520 --> 00:19:30,880
to spin up any other working groups any

00:19:29,440 --> 00:19:32,160
there's a lot of interest in industrial

00:19:30,880 --> 00:19:34,080
and robotics and hopefully we'll get one

00:19:32,160 --> 00:19:35,919
of some of those going in the next year

00:19:34,080 --> 00:19:37,760
key is that any applications we start

00:19:35,919 --> 00:19:39,520
looking at that will feed into the rest

00:19:37,760 --> 00:19:40,320
of the analysis need to be not under

00:19:39,520 --> 00:19:41,919
ndas

00:19:40,320 --> 00:19:44,880
and we need to have them on the open so

00:19:41,919 --> 00:19:44,880
we can do the analysis

00:19:45,440 --> 00:19:51,360
and collaborate um yeah the heart

00:19:48,640 --> 00:19:52,960
lisa is a collaboration we're not gonna

00:19:51,360 --> 00:19:54,240
be engineering a specific system to be

00:19:52,960 --> 00:19:56,480
safe

00:19:54,240 --> 00:19:57,919
um you know we can't ensure that people

00:19:56,480 --> 00:19:59,440
who are using it actually

00:19:57,919 --> 00:20:01,440
let's read the documentation and

00:19:59,440 --> 00:20:02,799
understand the processes however we're

00:20:01,440 --> 00:20:04,640
gonna try to create some so that those

00:20:02,799 --> 00:20:06,320
who are motivated can

00:20:04,640 --> 00:20:08,240
and you know we're not creating a

00:20:06,320 --> 00:20:08,640
standalone linux distro or anything like

00:20:08,240 --> 00:20:10,320
that

00:20:08,640 --> 00:20:13,280
it's just how do you use the upstream

00:20:10,320 --> 00:20:15,120
kernel and how to be effective

00:20:13,280 --> 00:20:16,159
at this and you know we're not going to

00:20:15,120 --> 00:20:17,200
be able to leave you from any

00:20:16,159 --> 00:20:18,480
responsibilities from the obvious

00:20:17,200 --> 00:20:19,679
conditions

00:20:18,480 --> 00:20:21,280
but we are going to be trying to provide

00:20:19,679 --> 00:20:22,000
a path forward and people to collaborate

00:20:21,280 --> 00:20:23,679
with

00:20:22,000 --> 00:20:25,280
and so that's what elise is there and so

00:20:23,679 --> 00:20:26,880
if you've got an interesting case

00:20:25,280 --> 00:20:28,960
um we'd encourage you to come and look

00:20:26,880 --> 00:20:32,159
and work with us in the project

00:20:28,960 --> 00:20:33,120
when we're done um we should hopefully

00:20:32,159 --> 00:20:35,840
have

00:20:33,120 --> 00:20:37,120
you know the assets help ready for

00:20:35,840 --> 00:20:38,720
helping people go through safety

00:20:37,120 --> 00:20:40,159
certification

00:20:38,720 --> 00:20:42,320
so we want to have you know here's your

00:20:40,159 --> 00:20:44,159
process here so you do your analysis

00:20:42,320 --> 00:20:45,840
here's the features you need to look at

00:20:44,159 --> 00:20:47,280
here's where evidence is

00:20:45,840 --> 00:20:49,440
here's some tools to help you understand

00:20:47,280 --> 00:20:51,039
do your analysis in your system

00:20:49,440 --> 00:20:52,640
and we want to show that it's feasible

00:20:51,039 --> 00:20:54,880
to do this in some reference systems

00:20:52,640 --> 00:20:55,760
that everyone can look at like the key

00:20:54,880 --> 00:20:57,200
is

00:20:55,760 --> 00:20:59,280
a lot of this work happens right now in

00:20:57,200 --> 00:21:00,720
companies today under nda so no one can

00:20:59,280 --> 00:21:02,240
see it so what we're trying to do is do

00:21:00,720 --> 00:21:03,919
things in the open so we can share it

00:21:02,240 --> 00:21:06,480
with others

00:21:03,919 --> 00:21:07,679
we want to be able to help educate those

00:21:06,480 --> 00:21:09,600
system integrators on the things that

00:21:07,679 --> 00:21:11,600
they need to look at

00:21:09,600 --> 00:21:13,120
and with the view that this seems to

00:21:11,600 --> 00:21:15,280
have to be maintained over

00:21:13,120 --> 00:21:16,159
industrial life cycles which can be you

00:21:15,280 --> 00:21:18,000
know anywhere

00:21:16,159 --> 00:21:19,919
from you know two years which is your

00:21:18,000 --> 00:21:22,480
standard end of life on your you know

00:21:19,919 --> 00:21:22,960
on a device or five years for your phone

00:21:22,480 --> 00:21:25,520
or

00:21:22,960 --> 00:21:27,200
you know 20 years for a piece of

00:21:25,520 --> 00:21:30,799
infrastructure in your city

00:21:27,200 --> 00:21:30,799
or even longer in some cases

00:21:30,960 --> 00:21:35,280
but there is a lot of information we

00:21:34,320 --> 00:21:37,520
ought to make sure that

00:21:35,280 --> 00:21:39,440
the information we're putting providing

00:21:37,520 --> 00:21:41,280
is accepted by the safety community and

00:21:39,440 --> 00:21:42,640
certification authorities

00:21:41,280 --> 00:21:44,240
and so that you know there's multiple

00:21:42,640 --> 00:21:45,760
independent people who are going to be

00:21:44,240 --> 00:21:46,880
doing these audits who understand the

00:21:45,760 --> 00:21:47,760
evidence that's there and can help

00:21:46,880 --> 00:21:49,520
educate

00:21:47,760 --> 00:21:50,720
slash make sure that the right factors

00:21:49,520 --> 00:21:52,240
are considered to make sure these

00:21:50,720 --> 00:21:54,799
systems are safe when these third-party

00:21:52,240 --> 00:21:58,080
audits are happening

00:21:54,799 --> 00:21:58,720
and um you know we also for us to be

00:21:58,080 --> 00:22:00,480
effective here

00:21:58,720 --> 00:22:01,760
the latest community needs to be able to

00:22:00,480 --> 00:22:04,000
understand what we're doing and

00:22:01,760 --> 00:22:05,440
recognize it and make sure that you know

00:22:04,000 --> 00:22:07,360
some of the things we'd like to upstream

00:22:05,440 --> 00:22:08,000
into the documentation as we do the

00:22:07,360 --> 00:22:10,559
analysis

00:22:08,000 --> 00:22:11,120
and you'll be able to share we have a

00:22:10,559 --> 00:22:13,760
way

00:22:11,120 --> 00:22:15,280
mostly the chrome community is very much

00:22:13,760 --> 00:22:17,120
motivated to fixing bugs and a lot of

00:22:15,280 --> 00:22:18,640
these things are just bugs so we need to

00:22:17,120 --> 00:22:20,480
fix these bugs and we need to make sure

00:22:18,640 --> 00:22:22,720
that we've documented how you know the

00:22:20,480 --> 00:22:24,159
information that's out there

00:22:22,720 --> 00:22:25,919
and eventually we will want to have hard

00:22:24,159 --> 00:22:27,760
work viral

00:22:25,919 --> 00:22:29,039
as well from the various vendors we need

00:22:27,760 --> 00:22:29,520
the hardware vendors to be bought in

00:22:29,039 --> 00:22:31,280
because

00:22:29,520 --> 00:22:34,159
we're running on their silicon and their

00:22:31,280 --> 00:22:35,520
boards for that matter

00:22:34,159 --> 00:22:37,919
so if you want more information about

00:22:35,520 --> 00:22:38,720
elisa um i encourage you to probably go

00:22:37,919 --> 00:22:41,919
to our next

00:22:38,720 --> 00:22:43,600
2021 virtual workshop um

00:22:41,919 --> 00:22:45,520
we've been doing workshops roughly every

00:22:43,600 --> 00:22:47,520
quarter we were doing it in person

00:22:45,520 --> 00:22:48,960
and then with the latest pandemic we've

00:22:47,520 --> 00:22:50,799
been having switched to virtual

00:22:48,960 --> 00:22:52,720
we've actually had more people attending

00:22:50,799 --> 00:22:54,880
and we've had a lot more engagement as

00:22:52,720 --> 00:22:55,840
well so i think we're working on a

00:22:54,880 --> 00:22:58,480
format that helps

00:22:55,840 --> 00:22:59,200
encourage discussion and engagement so i

00:22:58,480 --> 00:23:00,880
think

00:22:59,200 --> 00:23:02,320
you know feel free to check us out just

00:23:00,880 --> 00:23:04,000
lurk or i'll start participating in the

00:23:02,320 --> 00:23:04,559
discussions and if you want to get more

00:23:04,000 --> 00:23:06,400
engaged

00:23:04,559 --> 00:23:08,159
feel free to sign up for the mail list

00:23:06,400 --> 00:23:10,320
it's open to anyone

00:23:08,159 --> 00:23:11,360
and you can start looking at our sources

00:23:10,320 --> 00:23:15,360
and

00:23:11,360 --> 00:23:18,080
the github repos are there

00:23:15,360 --> 00:23:19,039
now switching over from linux and a big

00:23:18,080 --> 00:23:20,720
abstract system

00:23:19,039 --> 00:23:23,200
let's go and look down at what's

00:23:20,720 --> 00:23:25,919
happening on those sensors and actuators

00:23:23,200 --> 00:23:26,880
and zephyr project is been designed

00:23:25,919 --> 00:23:28,960
pretty much to

00:23:26,880 --> 00:23:30,240
work where linux is just too big linux

00:23:28,960 --> 00:23:31,840
doesn't get much smaller than 2megs

00:23:30,240 --> 00:23:34,799
these days and a lot of

00:23:31,840 --> 00:23:36,000
the embedded space is you know very very

00:23:34,799 --> 00:23:39,280
cost constrained footprint

00:23:36,000 --> 00:23:40,799
constrained very tight on memory

00:23:39,280 --> 00:23:42,960
and so zephyr has been designed to act

00:23:40,799 --> 00:23:45,520
in this area and

00:23:42,960 --> 00:23:48,159
when we started the project off about

00:23:45,520 --> 00:23:50,960
four and a half years ago

00:23:48,159 --> 00:23:52,720
we wanted to make sure that it would be

00:23:50,960 --> 00:23:54,159
able to be a real-time operating system

00:23:52,720 --> 00:23:55,120
and we built it right from the start

00:23:54,159 --> 00:23:56,960
with the view that we're going to be

00:23:55,120 --> 00:23:58,320
going after safety certifications and

00:23:56,960 --> 00:24:00,480
security certification so we built it

00:23:58,320 --> 00:24:02,640
with safety and security in mind

00:24:00,480 --> 00:24:04,000
and the community is lined up around the

00:24:02,640 --> 00:24:06,000
fact that we are going to need to

00:24:04,000 --> 00:24:07,440
have some discipline in certain areas to

00:24:06,000 --> 00:24:09,840
be able to go after and work with the

00:24:07,440 --> 00:24:13,279
standards as they exist today

00:24:09,840 --> 00:24:16,400
so it's cross architecture has a broad

00:24:13,279 --> 00:24:18,799
um base of

00:24:16,400 --> 00:24:20,640
hardware platforms there's over 200 um

00:24:18,799 --> 00:24:22,400
boards that have imported into it

00:24:20,640 --> 00:24:23,840
it has vendor neutral governance no one

00:24:22,400 --> 00:24:27,039
company owned you know

00:24:23,840 --> 00:24:28,080
is in dominant control of it and the

00:24:27,039 --> 00:24:30,400
checks and balances are in the

00:24:28,080 --> 00:24:32,000
governance document so that um you know

00:24:30,400 --> 00:24:33,600
the technical steering committee

00:24:32,000 --> 00:24:35,200
determines you know which direction the

00:24:33,600 --> 00:24:37,440
projects are going

00:24:35,200 --> 00:24:38,720
um it's permissively licensed which

00:24:37,440 --> 00:24:41,919
makes it suitable and cert

00:24:38,720 --> 00:24:44,159
from certain companies minds and

00:24:41,919 --> 00:24:45,120
it is you know very modular like the

00:24:44,159 --> 00:24:48,559
linux kernel is

00:24:45,120 --> 00:24:50,640
and highly flexible and

00:24:48,559 --> 00:24:53,440
like the linux kernel it's also adopted

00:24:50,640 --> 00:24:54,880
the notion of a long-term support kernel

00:24:53,440 --> 00:24:56,720
and this is where we're encouraging

00:24:54,880 --> 00:25:00,000
people to work for for products

00:24:56,720 --> 00:25:01,760
and a subset of those the next lts

00:25:00,000 --> 00:25:03,039
will actually be ready to go through the

00:25:01,760 --> 00:25:04,960
safe the

00:25:03,039 --> 00:25:08,000
audits and so we're working towards that

00:25:04,960 --> 00:25:08,000
goal in the project now

00:25:08,240 --> 00:25:11,120
as you can see it's a rather full

00:25:09,600 --> 00:25:12,799
architecture these are all modular

00:25:11,120 --> 00:25:13,279
components it can be enabled as needed

00:25:12,799 --> 00:25:14,400
so

00:25:13,279 --> 00:25:15,600
this way you can sort of scale your

00:25:14,400 --> 00:25:17,039
footprint based on what your

00:25:15,600 --> 00:25:19,360
functionality you need is

00:25:17,039 --> 00:25:21,039
and then work from there and it's a wide

00:25:19,360 --> 00:25:22,000
range of communication technologies

00:25:21,039 --> 00:25:24,480
because it's iot

00:25:22,000 --> 00:25:25,039
we need to obviously communicate off of

00:25:24,480 --> 00:25:28,080
these

00:25:25,039 --> 00:25:30,480
um and so

00:25:28,080 --> 00:25:31,120
if you're interested in more details it

00:25:30,480 --> 00:25:33,039
is

00:25:31,120 --> 00:25:34,480
they're available from the project and

00:25:33,039 --> 00:25:36,000
as you can see it's pre-fully featured

00:25:34,480 --> 00:25:38,480
os at this point in time

00:25:36,000 --> 00:25:41,679
that lets people be that to be a good

00:25:38,480 --> 00:25:42,799
rtos basis for applications

00:25:41,679 --> 00:25:45,440
and we've actually been seeing now

00:25:42,799 --> 00:25:47,919
products emerge in the marketplace um

00:25:45,440 --> 00:25:49,440
none of these here listed per se are

00:25:47,919 --> 00:25:50,559
safety critical but they're wearables

00:25:49,440 --> 00:25:51,440
and they're getting into some of the

00:25:50,559 --> 00:25:53,120
performances

00:25:51,440 --> 00:25:55,600
so you're sort of seeing this project

00:25:53,120 --> 00:25:57,679
shift and as a safety critical

00:25:55,600 --> 00:25:58,880
certifications emerge we're expecting to

00:25:57,679 --> 00:26:01,919
see more of the safety critical

00:25:58,880 --> 00:26:01,919
applications coming in

00:26:02,240 --> 00:26:06,080
there's a couple of products here that

00:26:04,400 --> 00:26:08,080
are being used in

00:26:06,080 --> 00:26:09,679
they were spun up very quickly there's

00:26:08,080 --> 00:26:12,720
things like the distancer from phi

00:26:09,679 --> 00:26:14,159
tech which lets you know um you know

00:26:12,720 --> 00:26:14,640
with when you're coming within a zone of

00:26:14,159 --> 00:26:17,279
people

00:26:14,640 --> 00:26:20,880
the six foot zone and then centurious

00:26:17,279 --> 00:26:20,880
from their technologies is also

00:26:20,960 --> 00:26:24,320
you know designed for monitoring the

00:26:23,520 --> 00:26:27,279
distances

00:26:24,320 --> 00:26:29,120
and the characteristics including you

00:26:27,279 --> 00:26:30,720
know there's also the safety pods um

00:26:29,120 --> 00:26:32,159
from breaking in the factories

00:26:30,720 --> 00:26:34,000
and for giving feedback if you're

00:26:32,159 --> 00:26:35,200
getting too close or

00:26:34,000 --> 00:26:36,960
recording who you've been getting close

00:26:35,200 --> 00:26:38,240
to and things like that for track and

00:26:36,960 --> 00:26:40,080
traceability

00:26:38,240 --> 00:26:41,840
so we're seeing zephyr being deployed in

00:26:40,080 --> 00:26:44,240
situations that are going to be helpful

00:26:41,840 --> 00:26:45,520
for um us getting through this next few

00:26:44,240 --> 00:26:47,039
years

00:26:45,520 --> 00:26:49,200
and they can't they were able to spin up

00:26:47,039 --> 00:26:52,720
these applications very quickly from the

00:26:49,200 --> 00:26:54,720
product base

00:26:52,720 --> 00:26:56,400
so but like i say we'll be getting after

00:26:54,720 --> 00:26:58,080
more safety critical we're in wearables

00:26:56,400 --> 00:27:00,320
type of deal right now but i think it's

00:26:58,080 --> 00:27:03,600
going to be emerging into getting into

00:27:00,320 --> 00:27:04,840
more of these tight loops and

00:27:03,600 --> 00:27:07,279
more of the safety critical

00:27:04,840 --> 00:27:08,880
functionality so we just we established

00:27:07,279 --> 00:27:10,960
our safety committee for the project

00:27:08,880 --> 00:27:12,400
in 2019 we're probably mature enough

00:27:10,960 --> 00:27:15,840
we're meeting every two weeks

00:27:12,400 --> 00:27:17,600
and the participants are

00:27:15,840 --> 00:27:19,440
people who understand safety

00:27:17,600 --> 00:27:21,440
considerations and the implications

00:27:19,440 --> 00:27:23,520
in that committee and are working to

00:27:21,440 --> 00:27:24,480
help educate the rest of the community

00:27:23,520 --> 00:27:26,159
on that

00:27:24,480 --> 00:27:28,240
the initial target for the project is

00:27:26,159 --> 00:27:31,840
going to be 61 508

00:27:28,240 --> 00:27:33,279
sold level 3 and

00:27:31,840 --> 00:27:34,640
we've already been established our

00:27:33,279 --> 00:27:36,720
coding guidelines and those are being

00:27:34,640 --> 00:27:37,760
applied through the project right now

00:27:36,720 --> 00:27:39,440
and we're working on getting the

00:27:37,760 --> 00:27:40,720
continuous integration enforcement going

00:27:39,440 --> 00:27:42,240
in

00:27:40,720 --> 00:27:43,679
and then there's multiple safety

00:27:42,240 --> 00:27:45,600
activities that are going on to

00:27:43,679 --> 00:27:47,039
establish the traceability

00:27:45,600 --> 00:27:48,640
the requirements test coverage the

00:27:47,039 --> 00:27:50,399
tooling and so forth

00:27:48,640 --> 00:27:52,960
and safety committee is taking the lead

00:27:50,399 --> 00:27:54,240
on this and then working with the tsc to

00:27:52,960 --> 00:27:56,559
make sure it goes through the

00:27:54,240 --> 00:27:57,919
entire ecosystem and we are also

00:27:56,559 --> 00:27:59,919
engaging with the certification

00:27:57,919 --> 00:28:02,960
authorities in this project right now

00:27:59,919 --> 00:28:06,480
um we are looking at how do we

00:28:02,960 --> 00:28:07,679
um you know how do we basically go

00:28:06,480 --> 00:28:08,799
through the safety plans and the

00:28:07,679 --> 00:28:11,760
argumentation

00:28:08,799 --> 00:28:12,640
so it's a much more traditional safety

00:28:11,760 --> 00:28:15,279
path

00:28:12,640 --> 00:28:16,080
than we're doing in linux at the heart

00:28:15,279 --> 00:28:17,679
of it although

00:28:16,080 --> 00:28:19,279
um quality is going to be the foundation

00:28:17,679 --> 00:28:21,919
and high quality code

00:28:19,279 --> 00:28:23,279
and making sure that we have our defects

00:28:21,919 --> 00:28:26,399
under control

00:28:23,279 --> 00:28:26,960
um it's not additional from because of

00:28:26,399 --> 00:28:27,760
safety

00:28:26,960 --> 00:28:29,520
but we have to have it there

00:28:27,760 --> 00:28:30,640
fundamentally for security as well as

00:28:29,520 --> 00:28:33,760
for safety

00:28:30,640 --> 00:28:36,399
we need to have that quality level there

00:28:33,760 --> 00:28:38,399
and what we've been trying to do though

00:28:36,399 --> 00:28:39,840
is with open source we have a very rapid

00:28:38,399 --> 00:28:41,679
change where new functionalities add in

00:28:39,840 --> 00:28:44,720
new features are added and so forth

00:28:41,679 --> 00:28:48,720
and so we've been working on a

00:28:44,720 --> 00:28:50,480
development repository and that has a

00:28:48,720 --> 00:28:52,720
release every four months

00:28:50,480 --> 00:28:54,720
and so it has a fairly frequent cadence

00:28:52,720 --> 00:28:57,919
and it comes up with

00:28:54,720 --> 00:28:59,520
here's what we need to be doing and

00:28:57,919 --> 00:29:00,960
here's new features and then we you know

00:28:59,520 --> 00:29:02,399
sort of make sure we have a release that

00:29:00,960 --> 00:29:03,360
we keep the squad keep squashing the

00:29:02,399 --> 00:29:05,679
bugs down

00:29:03,360 --> 00:29:07,200
things like that and then every two

00:29:05,679 --> 00:29:07,840
years we came up with our long-term

00:29:07,200 --> 00:29:10,320
support

00:29:07,840 --> 00:29:12,480
and we agreed to maintain that and put

00:29:10,320 --> 00:29:14,559
security fixes and back ports in

00:29:12,480 --> 00:29:16,080
over time and then the safety and

00:29:14,559 --> 00:29:16,720
security processes will be taking a

00:29:16,080 --> 00:29:19,279
subset

00:29:16,720 --> 00:29:20,320
of that lts and that's that subset is

00:29:19,279 --> 00:29:23,039
what we'll be taking through the first

00:29:20,320 --> 00:29:23,039
certifications

00:29:24,320 --> 00:29:29,120
so that audible subset is you know

00:29:27,360 --> 00:29:30,399
um it's going to be established from

00:29:29,120 --> 00:29:32,799
that lts

00:29:30,399 --> 00:29:34,799
and our lts next lts will be next year

00:29:32,799 --> 00:29:36,399
in the summer

00:29:34,799 --> 00:29:38,159
and we'll be keeping the code bases in

00:29:36,399 --> 00:29:39,520
sync with it and obviously the more

00:29:38,159 --> 00:29:41,360
rigorous processes we need the

00:29:39,520 --> 00:29:44,480
traceability we need for those

00:29:41,360 --> 00:29:46,720
elements in there are going to be um

00:29:44,480 --> 00:29:47,520
what we're focusing on the natural

00:29:46,720 --> 00:29:49,600
processes

00:29:47,520 --> 00:29:51,440
are being you know developed by the

00:29:49,600 --> 00:29:52,840
safety and security committees and we

00:29:51,440 --> 00:29:54,640
coordinate with the technical steering

00:29:52,840 --> 00:29:56,399
committees

00:29:54,640 --> 00:29:57,760
and for this for zephyr we're basically

00:29:56,399 --> 00:29:59,039
trying to follow the more of a

00:29:57,760 --> 00:30:03,200
traditional veeam model

00:29:59,039 --> 00:30:04,799
with um understanding you know the

00:30:03,200 --> 00:30:06,320
specification the features

00:30:04,799 --> 00:30:09,279
um you know making sure we've got the

00:30:06,320 --> 00:30:11,360
documentation the traceability

00:30:09,279 --> 00:30:13,360
you know the committers are known and

00:30:11,360 --> 00:30:14,640
information is known about them

00:30:13,360 --> 00:30:16,559
and then the goal is to improve the

00:30:14,640 --> 00:30:19,360
evidence

00:30:16,559 --> 00:30:21,039
that open source development can map so

00:30:19,360 --> 00:30:22,960
what we're looking at is okay as we

00:30:21,039 --> 00:30:24,159
understand um a requirement for a

00:30:22,960 --> 00:30:25,679
reference system and zephyr is a

00:30:24,159 --> 00:30:28,799
component in there

00:30:25,679 --> 00:30:30,320
you know do we have um you know the

00:30:28,799 --> 00:30:32,080
requirements documented

00:30:30,320 --> 00:30:33,840
and visible to everyone to provide

00:30:32,080 --> 00:30:35,120
feedback you know how is the

00:30:33,840 --> 00:30:36,880
architecture going to work

00:30:35,120 --> 00:30:39,440
and then let's test all these steps all

00:30:36,880 --> 00:30:39,440
the way down

00:30:40,240 --> 00:30:43,840
and because zephyr is a very modular

00:30:42,000 --> 00:30:46,480
framework we're taking advantage of that

00:30:43,840 --> 00:30:50,640
to just focus on some initial

00:30:46,480 --> 00:30:52,399
elements there was certain parts of that

00:30:50,640 --> 00:30:53,919
are stacked up in declaring focus

00:30:52,399 --> 00:30:56,799
initially

00:30:53,919 --> 00:30:58,320
and so the apis and then the um

00:30:56,799 --> 00:31:00,640
basically subsets

00:30:58,320 --> 00:31:01,600
of some of the devices and the kernel

00:31:00,640 --> 00:31:03,039
scheduler

00:31:01,600 --> 00:31:04,559
as well as interrupt handler power

00:31:03,039 --> 00:31:06,000
management so forth these are all common

00:31:04,559 --> 00:31:09,120
elements that most systems need

00:31:06,000 --> 00:31:12,000
and that'll be the focus of the first um

00:31:09,120 --> 00:31:14,159
you know our first one for 61 508 and

00:31:12,000 --> 00:31:16,720
then over time we hope to extend out

00:31:14,159 --> 00:31:18,320
to more and more of zephyr as resources

00:31:16,720 --> 00:31:20,480
and interests emerge from our members

00:31:18,320 --> 00:31:21,440
and from the community as a whole you

00:31:20,480 --> 00:31:22,960
know some of the things we've been

00:31:21,440 --> 00:31:26,240
talking about have been like crypto

00:31:22,960 --> 00:31:27,440
and the flash and the posix apis

00:31:26,240 --> 00:31:30,159
these are all elements that will

00:31:27,440 --> 00:31:32,799
probably be added as resources

00:31:30,159 --> 00:31:33,919
and interest merges in there we've got

00:31:32,799 --> 00:31:37,600
this initial base

00:31:33,919 --> 00:31:39,519
um stabilized so

00:31:37,600 --> 00:31:41,360
um right now we just finished putting

00:31:39,519 --> 00:31:43,279
out our 2.4 release

00:31:41,360 --> 00:31:44,559
and we have as part of that there was a

00:31:43,279 --> 00:31:45,360
project coding guidelines that were made

00:31:44,559 --> 00:31:47,519
visible

00:31:45,360 --> 00:31:49,360
we're working on our tooling processes

00:31:47,519 --> 00:31:50,799
right now

00:31:49,360 --> 00:31:52,080
and starting to work up the

00:31:50,799 --> 00:31:52,880
documentation that we're going to be

00:31:52,080 --> 00:31:55,440
needing

00:31:52,880 --> 00:31:56,960
for the safety scope and working on the

00:31:55,440 --> 00:31:59,440
tool evaluation

00:31:56,960 --> 00:32:01,039
so engaging the certification

00:31:59,440 --> 00:32:02,320
authorities so we're working towards

00:32:01,039 --> 00:32:04,159
making sure we actually have all the

00:32:02,320 --> 00:32:06,320
evidence necessary

00:32:04,159 --> 00:32:07,600
for the argumentation and we're working

00:32:06,320 --> 00:32:10,480
towards having that ready

00:32:07,600 --> 00:32:13,440
um when we get to the lts then we can be

00:32:10,480 --> 00:32:15,039
able to go through an assessment

00:32:13,440 --> 00:32:17,039
so if you're interested in learning more

00:32:15,039 --> 00:32:19,360
about zephyr um

00:32:17,039 --> 00:32:22,480
there's information up on our github

00:32:19,360 --> 00:32:25,519
repo or check out the website

00:32:22,480 --> 00:32:27,519
and um we also have a slack channel

00:32:25,519 --> 00:32:29,360
and there's a lot of orientation

00:32:27,519 --> 00:32:31,679
information out there too

00:32:29,360 --> 00:32:32,799
so feel free to have a look or subscribe

00:32:31,679 --> 00:32:35,440
to the mail list and work

00:32:32,799 --> 00:32:36,799
um all's fine but certainly we welcome

00:32:35,440 --> 00:32:40,960
anyone's participation

00:32:36,799 --> 00:32:40,960
and um obviously patches are welcome

00:32:41,679 --> 00:32:47,120
so in summary um i think functional

00:32:45,279 --> 00:32:48,399
safety standards can coexist with the

00:32:47,120 --> 00:32:50,159
open source projects but we need to

00:32:48,399 --> 00:32:52,559
become efficient at scale

00:32:50,159 --> 00:32:53,760
part of that efficiency at scale is

00:32:52,559 --> 00:32:56,080
doing some abstraction

00:32:53,760 --> 00:32:57,440
and summarizing okay do we actually know

00:32:56,080 --> 00:32:58,720
all the components that are there

00:32:57,440 --> 00:33:00,799
can we put it at our fingertips

00:32:58,720 --> 00:33:02,880
immediately um

00:33:00,799 --> 00:33:04,640
and so we need to look at getting that

00:33:02,880 --> 00:33:07,679
that part abstracted

00:33:04,640 --> 00:33:10,480
and getting that part automated and

00:33:07,679 --> 00:33:11,519
as you can sort of see um in both linux

00:33:10,480 --> 00:33:13,519
and in zephyr and

00:33:11,519 --> 00:33:15,039
the other projects we need to make a

00:33:13,519 --> 00:33:16,799
very strict focus on quality and

00:33:15,039 --> 00:33:18,559
shrinking down the bugs

00:33:16,799 --> 00:33:20,399
and you know we have to focus at that

00:33:18,559 --> 00:33:21,679
quality at each of those components has

00:33:20,399 --> 00:33:23,039
to be quality because when they're all

00:33:21,679 --> 00:33:25,200
put together we have to have a quality

00:33:23,039 --> 00:33:26,960
system so we need to focus at quality at

00:33:25,200 --> 00:33:28,320
the project level

00:33:26,960 --> 00:33:29,679
and then we also need to quite frankly

00:33:28,320 --> 00:33:31,440
manage developer and certification

00:33:29,679 --> 00:33:33,440
authority expectations

00:33:31,440 --> 00:33:35,760
you know we have to well-defined scopes

00:33:33,440 --> 00:33:37,519
and we have to focus on our interfaces

00:33:35,760 --> 00:33:39,919
and then we have to understanding of you

00:33:37,519 --> 00:33:41,840
know the blocks inside those interfaces

00:33:39,919 --> 00:33:43,279
um and if we can get all of that pulled

00:33:41,840 --> 00:33:44,960
together i think we'll actually start to

00:33:43,279 --> 00:33:46,720
be in a really good position for doing

00:33:44,960 --> 00:33:49,120
the analysis and feeling confident that

00:33:46,720 --> 00:33:50,559
the software we're using in systems

00:33:49,120 --> 00:33:52,399
and particularly for safety critical

00:33:50,559 --> 00:33:54,000
systems is as safe as we know how to

00:33:52,399 --> 00:33:55,919
make it

00:33:54,000 --> 00:33:57,679
with that i will say thank you and i

00:33:55,919 --> 00:34:06,320
will be available in the channel for any

00:33:57,679 --> 00:34:06,320

YouTube URL: https://www.youtube.com/watch?v=dtGFnLN4UOU


