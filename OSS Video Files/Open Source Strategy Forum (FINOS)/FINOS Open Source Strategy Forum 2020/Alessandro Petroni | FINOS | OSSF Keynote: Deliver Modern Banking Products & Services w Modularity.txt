Title: Alessandro Petroni | FINOS | OSSF Keynote: Deliver Modern Banking Products & Services w Modularity
Publication date: 2020-12-21
Playlist: FINOS Open Source Strategy Forum 2020
Description: 
	Alessandro Petroni | FINOS | OSSF Keynote: Quickly Deliver Modern Banking Products & Services with Modularity, the Enterprise Open Source Way  | FINOS OSSF 2020

Alessandro Petroni, Global Director & Head, Strategy Financial Services, Red Hat

Banks are looking for ways to adopt new technologies that will allow their customers to expand their financial activities in a friction-free and seamless way, but delivering customer value in a legacy environment is immensely challenging. Restricted by business processes or infrastructure badly in need of modernization, banks need to adopt industry standards, open architectures to quickly embrace business capabilities from vendors, using industry blueprints, that allow them to quickly build offerings that meet digital customer needs.  In this session, Alessandro Petroni will explore Red Hat's experience of building and deploying a modular business microservices-based open architecture - with a code blueprint to accompany it - that helps banks innovate at will, rapidly composing new customer offerings within hours instead of months.

Alessandro Petroni's BIO

Global Director Head Strategy and Solutions for the Financial Services
Alessandro leads the business and technology strategy to accelerate the adoption of Red Hat open source technologies in the FinServ/FinTech industry working with customers, technology and service partners across product management, engineering, marketing and sales.

In his role, he leads Red Hat in assisting banks and other financial services firms in the go-to-cloud journey, adopting DevOps, influencing Red Hat R&D to focus on solving Finserv line of business' challenges developing open source reference architectures and open collaborative environments.

Prior to Red Hat, Alessandro has spent sixteen years serving top financial institutions including Lehman Brothers, Merrill Lynch Bank of America, Societe Generale, Citicorp and Deutsche Bank. He has covered leading roles as a consultant covering engineering, operations, software development, and consulting. As banking IT director he has implemented mission-critical distributed solutions for capital markets and retail banking, managing large international teams.

Alessandro graduated in Master Computer Engineering and Business Administration at the University of Trento, Italy, and lives in New York.

-=-=-=-=-

This video is from the FINOS / Linux Foundation Open Source Strategy Forum (OSSF) Virtual 2020. 

►►For free access to all 2020 videos from the conference - please register HERE: https://events.linuxfoundation.org/open-source-strategy-forum/register/
 
►► More information HERE: https://events.linuxfoundation.org/open-source-strategy-forum/
►► 2020 Schedule HERE: https://events.linuxfoundation.org/open-source-strategy-forum/program/schedule/

Learn more about FINOS and how we deliver the power of open source to financial services:
►► FINOS: https://www.finos.org/
Captions: 
	00:00:01,720 --> 00:00:07,520
[Music]

00:00:06,399 --> 00:00:09,920
our next speaker

00:00:07,520 --> 00:00:10,960
alessandro petroni from our gold member

00:00:09,920 --> 00:00:14,000
red hat and

00:00:10,960 --> 00:00:16,160
a fellow italian he leads the business

00:00:14,000 --> 00:00:18,080
and technology strategy to accelerate

00:00:16,160 --> 00:00:20,240
the adoption of red hat open source

00:00:18,080 --> 00:00:22,240
technologies in the financial services

00:00:20,240 --> 00:00:24,640
and fintech industry

00:00:22,240 --> 00:00:26,000
additionally he leads red hat in

00:00:24,640 --> 00:00:28,720
assisting banks

00:00:26,000 --> 00:00:30,960
and other financial firms to go in the

00:00:28,720 --> 00:00:33,120
go to cloud journey

00:00:30,960 --> 00:00:34,079
today you'll be take you'll be talking

00:00:33,120 --> 00:00:37,280
about how

00:00:34,079 --> 00:00:38,640
quickly you can deliver modern banking

00:00:37,280 --> 00:00:41,520
products and services

00:00:38,640 --> 00:00:42,960
with modularity in and in the enterprise

00:00:41,520 --> 00:00:45,440
open source way

00:00:42,960 --> 00:00:47,970
please welcome alessandro petroni from

00:00:45,440 --> 00:00:54,140
red hat

00:00:47,970 --> 00:00:54,140
[Music]

00:00:55,199 --> 00:01:01,760
good day we are here to discuss

00:00:58,239 --> 00:01:05,040
how can we modernize banks

00:01:01,760 --> 00:01:06,400
using a modular approach in the open

00:01:05,040 --> 00:01:08,720
source way

00:01:06,400 --> 00:01:10,880
my name is alexander patroni and i lead

00:01:08,720 --> 00:01:12,960
the strategy for financial services at

00:01:10,880 --> 00:01:13,439
red hat i'd like to introduce this topic

00:01:12,960 --> 00:01:15,759
to you

00:01:13,439 --> 00:01:17,680
and also an experience that we had at

00:01:15,759 --> 00:01:18,560
radet and other partners in the banking

00:01:17,680 --> 00:01:21,360
industry

00:01:18,560 --> 00:01:22,479
how to tackle this quite difficult

00:01:21,360 --> 00:01:24,560
problem

00:01:22,479 --> 00:01:25,680
so while we are approaching this concept

00:01:24,560 --> 00:01:27,840
of modularization

00:01:25,680 --> 00:01:29,119
if we take an x-ray of the application

00:01:27,840 --> 00:01:32,159
portfolio in a bank

00:01:29,119 --> 00:01:34,240
it's quite complex we have probably

00:01:32,159 --> 00:01:36,640
in the range of 10 000 type of different

00:01:34,240 --> 00:01:39,920
application highly interconnected

00:01:36,640 --> 00:01:40,400
with spaghetti integration a thousand

00:01:39,920 --> 00:01:43,840
plus

00:01:40,400 --> 00:01:47,360
databases where data are difficult to

00:01:43,840 --> 00:01:49,759
uh be fetched and reuse across the the

00:01:47,360 --> 00:01:51,200
the firm and also the mod the

00:01:49,759 --> 00:01:53,520
granularity how these

00:01:51,200 --> 00:01:54,799
interfaces between applications being

00:01:53,520 --> 00:01:57,280
developed over the years

00:01:54,799 --> 00:01:59,040
is not consistent and it's not granular

00:01:57,280 --> 00:02:00,719
at the same level

00:01:59,040 --> 00:02:03,040
does the bank in indus has been working

00:02:00,719 --> 00:02:05,360
for the past decade to formulate

00:02:03,040 --> 00:02:07,680
the business framework from a functional

00:02:05,360 --> 00:02:10,000
perspective of business capability

00:02:07,680 --> 00:02:11,599
of the part of the bank coming out with

00:02:10,000 --> 00:02:14,239
the blueprint which defines

00:02:11,599 --> 00:02:15,760
modules that can be eventually reused

00:02:14,239 --> 00:02:18,959
and recomposed to create

00:02:15,760 --> 00:02:18,959
business applications

00:02:19,440 --> 00:02:23,280
but why we're talking about modules

00:02:21,440 --> 00:02:24,800
we've been using modules since ever in

00:02:23,280 --> 00:02:27,040
the industry even though we

00:02:24,800 --> 00:02:28,239
we've been using in a different form and

00:02:27,040 --> 00:02:30,239
shapes why

00:02:28,239 --> 00:02:31,920
because we didn't adhere to one

00:02:30,239 --> 00:02:34,080
framework or business framework

00:02:31,920 --> 00:02:36,879
technology framework altogether

00:02:34,080 --> 00:02:38,000
that's the opportunity here to work

00:02:36,879 --> 00:02:39,760
collaboratively

00:02:38,000 --> 00:02:42,239
to work at the parts and also the

00:02:39,760 --> 00:02:44,800
assembly of the solution in order to

00:02:42,239 --> 00:02:45,840
better provide services to the associate

00:02:44,800 --> 00:02:48,400
in the bank

00:02:45,840 --> 00:02:50,720
and also of course the customers and

00:02:48,400 --> 00:02:53,519
modules are essentially common

00:02:50,720 --> 00:02:55,200
languages to define boundaries of roles

00:02:53,519 --> 00:02:58,159
and responsibilities

00:02:55,200 --> 00:02:58,720
and liabilities operationally speaking

00:02:58,159 --> 00:03:03,519
and then

00:02:58,720 --> 00:03:04,000
are also a particular type of definition

00:03:03,519 --> 00:03:07,040
how to

00:03:04,000 --> 00:03:07,760
access such capability in form of co for

00:03:07,040 --> 00:03:10,720
example of

00:03:07,760 --> 00:03:12,159
open apis and furthermore in a more

00:03:10,720 --> 00:03:16,080
modern architecture

00:03:12,159 --> 00:03:18,640
of open eventing where information flows

00:03:16,080 --> 00:03:20,720
from inside the bank to outside the bank

00:03:18,640 --> 00:03:22,879
from the customer that are behaving

00:03:20,720 --> 00:03:24,080
and engaging with the bank and other

00:03:22,879 --> 00:03:27,360
constituencies

00:03:24,080 --> 00:03:30,400
and also inside to detect patterns

00:03:27,360 --> 00:03:33,280
so the integration comes in much

00:03:30,400 --> 00:03:35,040
more loosely coupled way and eventually

00:03:33,280 --> 00:03:36,400
all the business functions are somehow

00:03:35,040 --> 00:03:39,200
listening to

00:03:36,400 --> 00:03:41,040
what is happening and they can react to

00:03:39,200 --> 00:03:42,720
re-engage further for example the

00:03:41,040 --> 00:03:45,360
customer

00:03:42,720 --> 00:03:47,760
and the certification and the quality of

00:03:45,360 --> 00:03:48,159
such componentry and the specification

00:03:47,760 --> 00:03:51,040
are

00:03:48,159 --> 00:03:52,080
important to create this kind of modular

00:03:51,040 --> 00:03:54,319
solutioning

00:03:52,080 --> 00:03:56,080
without the ecosystem participation of

00:03:54,319 --> 00:03:58,080
course is not possible

00:03:56,080 --> 00:03:59,439
because the part becomes just basically

00:03:58,080 --> 00:04:02,799
produced by one

00:03:59,439 --> 00:04:05,120
and only one producer maybe the bank

00:04:02,799 --> 00:04:06,959
itself which doesn't scale

00:04:05,120 --> 00:04:10,640
we have been using services in banking

00:04:06,959 --> 00:04:12,879
for quite a while amqp is a technology

00:04:10,640 --> 00:04:14,959
standard that has actually been built by

00:04:12,879 --> 00:04:16,400
j.p morgan and eventually open source

00:04:14,959 --> 00:04:18,400
with the help of red hat

00:04:16,400 --> 00:04:20,560
but also understanding the business like

00:04:18,400 --> 00:04:23,919
fix for a brokerage and

00:04:20,560 --> 00:04:25,040
trading in the effects industry iso 222

00:04:23,919 --> 00:04:28,639
for payments

00:04:25,040 --> 00:04:31,360
down to fdx for customer consent

00:04:28,639 --> 00:04:33,199
fdc3 the very standard we have been

00:04:31,360 --> 00:04:35,479
creating here at finos

00:04:33,199 --> 00:04:37,600
for a business for desktop

00:04:35,479 --> 00:04:40,320
interoperability on the trading floor

00:04:37,600 --> 00:04:42,560
and also frameworks like the business

00:04:40,320 --> 00:04:44,800
industry association network buy-in

00:04:42,560 --> 00:04:47,120
that has created with the banks in the

00:04:44,800 --> 00:04:50,720
past 10 years a business framework

00:04:47,120 --> 00:04:52,560
to define the partition of the bank

00:04:50,720 --> 00:04:54,240
but while we're talking about modules if

00:04:52,560 --> 00:04:56,080
you take solutions

00:04:54,240 --> 00:04:58,240
there seems to be in different domain

00:04:56,080 --> 00:05:00,320
like could be a lone origination

00:04:58,240 --> 00:05:01,280
versus an e-wallet procurement if you

00:05:00,320 --> 00:05:03,120
dig inside

00:05:01,280 --> 00:05:04,560
there are certain capabilities and

00:05:03,120 --> 00:05:08,080
function they are all

00:05:04,560 --> 00:05:09,600
basically the very same we need to

00:05:08,080 --> 00:05:11,120
we need to work with the product

00:05:09,600 --> 00:05:14,240
category or directory

00:05:11,120 --> 00:05:15,199
and also we need to deploy the loan or

00:05:14,240 --> 00:05:18,320
the e-wallet

00:05:15,199 --> 00:05:19,759
itself meaning we need to uh get the

00:05:18,320 --> 00:05:21,840
loan to the customer or

00:05:19,759 --> 00:05:23,120
we need to install the e-wallet into the

00:05:21,840 --> 00:05:27,280
customer's cell phone

00:05:23,120 --> 00:05:30,080
to start for example making a payment

00:05:27,280 --> 00:05:30,400
open source here comes into many layers

00:05:30,080 --> 00:05:33,120
so

00:05:30,400 --> 00:05:34,000
the business layers where companies and

00:05:33,120 --> 00:05:36,880
partners can

00:05:34,000 --> 00:05:38,880
build capabilities that stick to the

00:05:36,880 --> 00:05:39,440
standard it can eventually be plugged

00:05:38,880 --> 00:05:42,160
into

00:05:39,440 --> 00:05:44,240
the solution at the bank but also the

00:05:42,160 --> 00:05:45,520
open source framework itself how this

00:05:44,240 --> 00:05:47,440
component connect

00:05:45,520 --> 00:05:49,840
how they are described how they're

00:05:47,440 --> 00:05:51,840
looked after where to find them

00:05:49,840 --> 00:05:53,520
is very important and it is important

00:05:51,840 --> 00:05:55,600
that this framework remains open

00:05:53,520 --> 00:05:56,560
because it's like the lattice the

00:05:55,600 --> 00:05:58,800
framework

00:05:56,560 --> 00:05:59,600
for the interconnectivity between the

00:05:58,800 --> 00:06:02,240
players

00:05:59,600 --> 00:06:04,479
if we go down into stack into the

00:06:02,240 --> 00:06:07,360
technologies where such component our

00:06:04,479 --> 00:06:09,199
operator are deployed are developed we

00:06:07,360 --> 00:06:12,160
recognize of course open source

00:06:09,199 --> 00:06:14,000
starting with languages with java with

00:06:12,160 --> 00:06:16,560
kafka for streaming for example and

00:06:14,000 --> 00:06:20,400
moreover down in the infrastructure the

00:06:16,560 --> 00:06:23,280
the de facto frameworks at standard

00:06:20,400 --> 00:06:25,440
like linux and now moreover the cloud

00:06:23,280 --> 00:06:28,080
world the kubernetes framework which is

00:06:25,440 --> 00:06:31,759
common to every industry and every

00:06:28,080 --> 00:06:32,960
um and every vendor but why is important

00:06:31,759 --> 00:06:36,080
this component

00:06:32,960 --> 00:06:36,479
mindset the idea is that if there is a

00:06:36,080 --> 00:06:39,120
pool

00:06:36,479 --> 00:06:40,479
of suppliers that adhere to a certain

00:06:39,120 --> 00:06:44,240
specification

00:06:40,479 --> 00:06:47,520
i can have a choice who to shop with

00:06:44,240 --> 00:06:48,160
and moreover i can always decide to

00:06:47,520 --> 00:06:51,759
either

00:06:48,160 --> 00:06:54,400
shop or build or rent the capability

00:06:51,759 --> 00:06:56,240
elsewhere so the opportunity here to

00:06:54,400 --> 00:06:58,400
have a collaboration between fintech and

00:06:56,240 --> 00:06:59,440
banks is kind of clear but it's very

00:06:58,400 --> 00:07:02,000
well defined

00:06:59,440 --> 00:07:02,800
given specific business function

00:07:02,000 --> 00:07:05,440
moreover

00:07:02,800 --> 00:07:07,520
from a technology perspective innovation

00:07:05,440 --> 00:07:09,360
every function can be implemented in

00:07:07,520 --> 00:07:12,400
many different ways

00:07:09,360 --> 00:07:12,800
that does not imply that this function

00:07:12,400 --> 00:07:15,599
is

00:07:12,800 --> 00:07:16,400
changing the way is being consumed by

00:07:15,599 --> 00:07:18,639
other

00:07:16,400 --> 00:07:20,560
because the interface is stable so we

00:07:18,639 --> 00:07:20,880
might see technology they are connected

00:07:20,560 --> 00:07:23,840
to

00:07:20,880 --> 00:07:25,599
legacy mainframe or maybe using very new

00:07:23,840 --> 00:07:28,080
technology in the hardware space like

00:07:25,599 --> 00:07:30,319
accelerator like gpus or maybe

00:07:28,080 --> 00:07:32,560
even quantum compute for new risk

00:07:30,319 --> 00:07:35,840
calculation or whatever else

00:07:32,560 --> 00:07:36,479
and applications are not even part of

00:07:35,840 --> 00:07:38,639
the

00:07:36,479 --> 00:07:40,880
solution deployed at the bank because

00:07:38,639 --> 00:07:43,199
are consumed as a service over the cloud

00:07:40,880 --> 00:07:45,840
like could be salesforce or servicenow

00:07:43,199 --> 00:07:45,840
of the likes

00:07:46,800 --> 00:07:50,639
but the best way to explain is to

00:07:48,319 --> 00:07:52,240
leading by example and creating a proof

00:07:50,639 --> 00:07:53,360
of concept so that's what we've done

00:07:52,240 --> 00:07:55,280
here at red hat

00:07:53,360 --> 00:07:56,400
with the participation of few banks and

00:07:55,280 --> 00:07:58,080
also fintech

00:07:56,400 --> 00:07:59,919
and we'll build collaboratively one

00:07:58,080 --> 00:08:02,319
example we took a process

00:07:59,919 --> 00:08:03,680
we did was important like a new one in

00:08:02,319 --> 00:08:05,919
procurement

00:08:03,680 --> 00:08:07,840
for a customer wanted to pay using the

00:08:05,919 --> 00:08:10,080
phone and not cash

00:08:07,840 --> 00:08:12,240
which is kind of important during covet

00:08:10,080 --> 00:08:15,120
and so the solution end up to be

00:08:12,240 --> 00:08:16,960
uh composed by four business function

00:08:15,120 --> 00:08:19,199
which are depicted here

00:08:16,960 --> 00:08:20,960
and eventually by orchestrating those

00:08:19,199 --> 00:08:23,680
function we created

00:08:20,960 --> 00:08:24,080
the solution of the aggregation by using

00:08:23,680 --> 00:08:27,120
um

00:08:24,080 --> 00:08:28,560
some web technology this was important

00:08:27,120 --> 00:08:30,879
to understand

00:08:28,560 --> 00:08:33,519
the effort to build application using

00:08:30,879 --> 00:08:37,120
this capability in a modular fashion

00:08:33,519 --> 00:08:40,560
and here is an opportunity

00:08:37,120 --> 00:08:41,120
to work a little much wider scope in the

00:08:40,560 --> 00:08:43,760
com

00:08:41,120 --> 00:08:44,320
at the community level it is clear that

00:08:43,760 --> 00:08:47,200
wide

00:08:44,320 --> 00:08:49,040
problem in the world like for example

00:08:47,200 --> 00:08:52,399
disaster management

00:08:49,040 --> 00:08:55,120
for um for natural disaster

00:08:52,399 --> 00:08:56,160
is a quite complex business solution

00:08:55,120 --> 00:08:58,240
that also

00:08:56,160 --> 00:08:59,920
is the correlation between different

00:08:58,240 --> 00:09:02,880
different business providers

00:08:59,920 --> 00:09:04,880
the bank maybe a retailer an insurance

00:09:02,880 --> 00:09:06,480
company even the government itself that

00:09:04,880 --> 00:09:08,640
comes in the form of

00:09:06,480 --> 00:09:11,680
regulation and also subsidy to the

00:09:08,640 --> 00:09:15,839
family that are impacted by a disaster

00:09:11,680 --> 00:09:19,040
we model all this using this business

00:09:15,839 --> 00:09:21,120
architecture methodologies one by one we

00:09:19,040 --> 00:09:24,240
selected all the capability needed

00:09:21,120 --> 00:09:25,680
to understand the various phases of the

00:09:24,240 --> 00:09:27,519
recovery

00:09:25,680 --> 00:09:28,959
going from you know an immediate

00:09:27,519 --> 00:09:31,440
response of the disaster

00:09:28,959 --> 00:09:33,920
all the way down to re-establishing the

00:09:31,440 --> 00:09:36,399
axis where we focused on later on

00:09:33,920 --> 00:09:39,360
and all the way back to the new normal

00:09:36,399 --> 00:09:42,240
after the disaster is gone

00:09:39,360 --> 00:09:44,320
how is it possible well first you look

00:09:42,240 --> 00:09:46,640
at the model from a business perspective

00:09:44,320 --> 00:09:49,200
you dissect in the capabilities

00:09:46,640 --> 00:09:50,880
you create the values use cases that you

00:09:49,200 --> 00:09:53,519
want to accomplish

00:09:50,880 --> 00:09:55,760
and eventually you given the use case

00:09:53,519 --> 00:09:57,120
you select the business capability

00:09:55,760 --> 00:09:59,519
and now you start looking at the

00:09:57,120 --> 00:10:04,240
choreography of the business capability

00:09:59,519 --> 00:10:06,240
and eventually you lead to defining how

00:10:04,240 --> 00:10:08,320
people can start collaborating because

00:10:06,240 --> 00:10:09,839
the interfaces between the different

00:10:08,320 --> 00:10:12,720
components are very clear

00:10:09,839 --> 00:10:14,399
and the case that we have shown is

00:10:12,720 --> 00:10:16,000
working with the fintech we were

00:10:14,399 --> 00:10:18,800
mimicking the bank side

00:10:16,000 --> 00:10:20,000
and the other team was working as a

00:10:18,800 --> 00:10:21,920
fintech side

00:10:20,000 --> 00:10:23,600
and we were essentially only talking

00:10:21,920 --> 00:10:24,399
about this business capability and

00:10:23,600 --> 00:10:27,040
exchanges

00:10:24,399 --> 00:10:27,839
and eventually was off doing their own

00:10:27,040 --> 00:10:30,000
implementation

00:10:27,839 --> 00:10:31,839
independently and then we met again at

00:10:30,000 --> 00:10:33,279
the interface level and recombine all

00:10:31,839 --> 00:10:36,240
together

00:10:33,279 --> 00:10:36,959
combine a quite compelling application

00:10:36,240 --> 00:10:40,640
the idea

00:10:36,959 --> 00:10:42,240
then was to describe what has happened

00:10:40,640 --> 00:10:44,079
we have been able to create an

00:10:42,240 --> 00:10:45,920
experience that goes from

00:10:44,079 --> 00:10:47,120
formulating the business scenario with

00:10:45,920 --> 00:10:49,920
business analyst

00:10:47,120 --> 00:10:51,920
and business practitioner down to a

00:10:49,920 --> 00:10:54,079
technology and business architecture

00:10:51,920 --> 00:10:56,720
that is eventually translated into

00:10:54,079 --> 00:10:58,399
component and microservices how to

00:10:56,720 --> 00:11:00,399
connect them how to build them

00:10:58,399 --> 00:11:02,880
and eventually how do we deploy them

00:11:00,399 --> 00:11:03,519
into maybe a construct of a cloud so we

00:11:02,880 --> 00:11:06,640
use

00:11:03,519 --> 00:11:08,640
kubernetes open shift red hat which is

00:11:06,640 --> 00:11:11,360
the implementation the enterprise

00:11:08,640 --> 00:11:14,000
and eventually we ran this application

00:11:11,360 --> 00:11:16,800
in production using different clouds and

00:11:14,000 --> 00:11:20,720
we succeeded doing so

00:11:16,800 --> 00:11:22,160
just to recap why we should collaborate

00:11:20,720 --> 00:11:24,240
of course you know we collaborate

00:11:22,160 --> 00:11:26,240
because we want to scale faster

00:11:24,240 --> 00:11:28,160
the resolution of problem might be

00:11:26,240 --> 00:11:28,800
bigger than the boundary of the bank

00:11:28,160 --> 00:11:30,880
itself

00:11:28,800 --> 00:11:33,040
or the fintech and supporting the

00:11:30,880 --> 00:11:36,160
standardization standardization

00:11:33,040 --> 00:11:37,839
and open apis increase this consistency

00:11:36,160 --> 00:11:39,680
between the ecosystem of the industry

00:11:37,839 --> 00:11:41,760
player to build together

00:11:39,680 --> 00:11:43,040
we also reduce the risk because having

00:11:41,760 --> 00:11:44,880
more people

00:11:43,040 --> 00:11:46,160
supplying capability and consuming

00:11:44,880 --> 00:11:49,519
capability

00:11:46,160 --> 00:11:51,600
the overall reliability is augmented

00:11:49,519 --> 00:11:53,920
because we don't depend on the fuel but

00:11:51,600 --> 00:11:55,440
we have a network of support

00:11:53,920 --> 00:11:57,680
and of course more important we

00:11:55,440 --> 00:12:00,399
continuously improve

00:11:57,680 --> 00:12:02,720
using the open source fit up loop to

00:12:00,399 --> 00:12:04,240
generate new ideas and improve

00:12:02,720 --> 00:12:06,399
concentration requirements and

00:12:04,240 --> 00:12:09,279
implementation and moreover i would

00:12:06,399 --> 00:12:10,639
say because we like to have more fun

00:12:09,279 --> 00:12:13,839
working in a community

00:12:10,639 --> 00:12:16,000
is really awesome with that i'll

00:12:13,839 --> 00:12:17,200
like to conclude seeing how you can how

00:12:16,000 --> 00:12:19,120
can you work with us

00:12:17,200 --> 00:12:20,800
well you know you can call red hat you

00:12:19,120 --> 00:12:23,440
can call venus

00:12:20,800 --> 00:12:24,639
you can also moreover contribute your

00:12:23,440 --> 00:12:26,880
peace your idea

00:12:24,639 --> 00:12:27,680
there are many ways to contribute and

00:12:26,880 --> 00:12:31,200
everything

00:12:27,680 --> 00:12:33,680
since everything and everybody is really

00:12:31,200 --> 00:12:35,600
important for us and everything matters

00:12:33,680 --> 00:12:36,240
and eventually more important share your

00:12:35,600 --> 00:12:38,959
ideas

00:12:36,240 --> 00:12:40,079
write blog contribute with your code

00:12:38,959 --> 00:12:44,160
with your artifact

00:12:40,079 --> 00:12:46,639
whatever you feel able to consume and

00:12:44,160 --> 00:12:48,480
contribute and with this i'd like to

00:12:46,639 --> 00:12:50,839
thank you very much for your time

00:12:48,480 --> 00:12:53,780
and i hope you'll enjoy this beautiful

00:12:50,839 --> 00:12:58,650
conference

00:12:53,780 --> 00:12:58,650

YouTube URL: https://www.youtube.com/watch?v=WVnH9J2e1ig


