Title: David Watkins | FINOS | OSSF 2020: Introducing Waltz: An Open Approach to Enterprise Architecture
Publication date: 2020-12-22
Playlist: FINOS Open Source Strategy Forum 2020
Description: 
	David Watkins | FINOS | OSSF 2020: Introducing Waltz: An Open Approach to Enterprise Architecture | FINOS OSSF 2020

David Watkins, Director & Waltz Lead Maintainer, Deutsche Bank

Introducing Waltz: An Open Approach to Enterprise Architecture - OSSF 2020

David Watkins' BIO

David is a London-based director at Deutsche Bank currently working in finance within the Enterprise Architecture group. David primarily works on the FINOS open source Waltz project, which allows organizations to document, visualize, and define their enterprise level technology landscapes.

-=-=-=-=-

This video is from the FINOS / Linux Foundation Open Source Strategy Forum (OSSF) Virtual 2020. 

►►For free access to all 2020 videos from the conference - please register HERE: https://events.linuxfoundation.org/open-source-strategy-forum/register/
 
►► More information HERE: https://events.linuxfoundation.org/open-source-strategy-forum/
►► 2020 Schedule HERE: https://events.linuxfoundation.org/open-source-strategy-forum/program/schedule/

Learn more about FINOS and how we deliver the power of open source to financial services:
►► FINOS: https://www.finos.org/
Captions: 
	00:00:01,720 --> 00:00:08,480
[Music]

00:00:07,680 --> 00:00:10,639
hello

00:00:08,480 --> 00:00:12,240
my name is dave watkins i work at

00:00:10,639 --> 00:00:14,880
deutsche bank and today we're going to

00:00:12,240 --> 00:00:17,279
be talking about waltz

00:00:14,880 --> 00:00:18,480
so over the course of this talk we'll be

00:00:17,279 --> 00:00:21,439
going over

00:00:18,480 --> 00:00:22,720
what waltz is um a high level summary

00:00:21,439 --> 00:00:23,199
we'll talk a little bit about his

00:00:22,720 --> 00:00:25,359
history

00:00:23,199 --> 00:00:27,039
and we'll devote quite a bit of time to

00:00:25,359 --> 00:00:29,679
going through its feature set

00:00:27,039 --> 00:00:31,279
and how we use it uh then we'll talk a

00:00:29,679 --> 00:00:33,040
little bit about the future

00:00:31,279 --> 00:00:35,440
how to get started with waltz in your

00:00:33,040 --> 00:00:38,160
organization and how to contribute back

00:00:35,440 --> 00:00:38,160
to the code base

00:00:38,559 --> 00:00:42,320
so what exactly is waltz uh walt's an

00:00:41,360 --> 00:00:44,160
enterprise system

00:00:42,320 --> 00:00:46,480
uh we like to think of it as an open

00:00:44,160 --> 00:00:48,960
approach to enterprise architecture

00:00:46,480 --> 00:00:49,760
uh we're trying to help organizations

00:00:48,960 --> 00:00:52,480
deal with

00:00:49,760 --> 00:00:52,960
very large and complex technical estates

00:00:52,480 --> 00:00:54,879
uh

00:00:52,960 --> 00:00:56,719
so to that end we're primarily

00:00:54,879 --> 00:00:58,079
interested in applications as our sort

00:00:56,719 --> 00:00:59,520
of primary unit

00:00:58,079 --> 00:01:01,199
we look at how they fit together in

00:00:59,520 --> 00:01:03,840
terms of data flows

00:01:01,199 --> 00:01:05,360
who's working on them and we look at

00:01:03,840 --> 00:01:07,280
their sort of characteristics in terms

00:01:05,360 --> 00:01:08,880
of what functions do they offer what

00:01:07,280 --> 00:01:11,760
services do they provide

00:01:08,880 --> 00:01:12,960
what process they participate in we look

00:01:11,760 --> 00:01:15,600
at how they

00:01:12,960 --> 00:01:16,640
applications are entwined within

00:01:15,600 --> 00:01:19,920
regulations

00:01:16,640 --> 00:01:21,920
and compliance issues and

00:01:19,920 --> 00:01:23,040
ultimately how the organization is

00:01:21,920 --> 00:01:25,040
changing as

00:01:23,040 --> 00:01:27,119
applications are commissioned and

00:01:25,040 --> 00:01:31,600
decommissioned and functions

00:01:27,119 --> 00:01:35,840
are moved around the organization

00:01:31,600 --> 00:01:40,640
we've got a wide set of users

00:01:35,840 --> 00:01:43,200
uh developers project managers analysts

00:01:40,640 --> 00:01:44,479
we've got about 15 000 active users in

00:01:43,200 --> 00:01:46,320
the bank

00:01:44,479 --> 00:01:48,560
uh and we're seeing about two and a half

00:01:46,320 --> 00:01:50,560
thousand user driven changes per month

00:01:48,560 --> 00:01:52,560
plus people coming into once and

00:01:50,560 --> 00:01:56,640
amending the data in there

00:01:52,560 --> 00:01:56,640
to correct it or to keep it up to date

00:01:57,520 --> 00:02:01,759
walt is now around six years old started

00:02:00,000 --> 00:02:02,479
as a purely open source project up on

00:02:01,759 --> 00:02:04,240
github

00:02:02,479 --> 00:02:06,560
so all of the commits are available

00:02:04,240 --> 00:02:08,239
going back to project inception

00:02:06,560 --> 00:02:10,239
and it started before i joined the bank

00:02:08,239 --> 00:02:12,160
however denture bank were a very early

00:02:10,239 --> 00:02:13,040
adopter and has since become by far the

00:02:12,160 --> 00:02:16,080
largest

00:02:13,040 --> 00:02:18,400
single contributor to the code base

00:02:16,080 --> 00:02:20,160
over that time uh there's been probably

00:02:18,400 --> 00:02:21,920
around three to four developers at any

00:02:20,160 --> 00:02:23,599
one time working on walls plus an

00:02:21,920 --> 00:02:26,239
analyst or two

00:02:23,599 --> 00:02:26,720
which has added up to quite a bit of

00:02:26,239 --> 00:02:29,840
effort

00:02:26,720 --> 00:02:31,599
over the years and the project

00:02:29,840 --> 00:02:32,959
earlier this year transitioned to the

00:02:31,599 --> 00:02:34,840
finnos organizations

00:02:32,959 --> 00:02:36,319
who went through their project

00:02:34,840 --> 00:02:39,920
activation uh

00:02:36,319 --> 00:02:44,720
criteria ensuring that we've got a clean

00:02:39,920 --> 00:02:47,040
ip and our code meets their standards

00:02:44,720 --> 00:02:48,400
we've been in production for four years

00:02:47,040 --> 00:02:50,959
uh deutsche bank

00:02:48,400 --> 00:02:53,680
and now west markets have been in for a

00:02:50,959 --> 00:02:53,680
couple of years

00:02:55,840 --> 00:02:59,280
now i'm going to talk a little bit about

00:02:57,440 --> 00:03:01,120
uh the vaults in detail

00:02:59,280 --> 00:03:03,920
so we'll look at its feature set the

00:03:01,120 --> 00:03:06,879
core entities and how those entities and

00:03:03,920 --> 00:03:08,400
features are used together um this will

00:03:06,879 --> 00:03:11,360
take the form of a demo

00:03:08,400 --> 00:03:12,480
um which will be covering the following

00:03:11,360 --> 00:03:13,680
topics

00:03:12,480 --> 00:03:15,920
uh we're going to look at the building

00:03:13,680 --> 00:03:16,800
blocks so applications of units for

00:03:15,920 --> 00:03:18,640
example

00:03:16,800 --> 00:03:20,080
we'll look at how data flow is modeled

00:03:18,640 --> 00:03:21,519
in waltz

00:03:20,080 --> 00:03:23,599
look at some of the aggregation

00:03:21,519 --> 00:03:24,799
capabilities and some of the reporting

00:03:23,599 --> 00:03:27,040
that's built in

00:03:24,799 --> 00:03:28,159
uh we're looking at surveys uh for

00:03:27,040 --> 00:03:30,840
capturing ad hoc

00:03:28,159 --> 00:03:32,000
data requests and looking at

00:03:30,840 --> 00:03:37,440
attestations

00:03:32,000 --> 00:03:37,440
or ensuring that data is up to date

00:03:43,040 --> 00:03:46,400
applications are one of the fundamental

00:03:44,799 --> 00:03:49,120
building blocks in waltz

00:03:46,400 --> 00:03:50,239
so let's take a quick look at one using

00:03:49,120 --> 00:03:53,200
a recent list

00:03:50,239 --> 00:03:54,560
to open up this sample application uh so

00:03:53,200 --> 00:03:55,360
here we can see the basics about the

00:03:54,560 --> 00:03:57,439
application

00:03:55,360 --> 00:03:59,040
its name where it is in production what

00:03:57,439 --> 00:04:02,799
sort of application it is

00:03:59,040 --> 00:04:05,120
in-house is it off the shelf etc

00:04:02,799 --> 00:04:07,280
uh who owns it so this is a link into

00:04:05,120 --> 00:04:08,799
the organizational hierarchy

00:04:07,280 --> 00:04:10,560
and we can see you know with the

00:04:08,799 --> 00:04:13,280
application being invested

00:04:10,560 --> 00:04:15,040
um aces we found it useful uh quite

00:04:13,280 --> 00:04:15,840
often applications are known by multiple

00:04:15,040 --> 00:04:17,759
names

00:04:15,840 --> 00:04:18,959
or undergo name changes throughout their

00:04:17,759 --> 00:04:21,280
life cycle

00:04:18,959 --> 00:04:22,639
and so in the aliases field we can track

00:04:21,280 --> 00:04:24,880
those

00:04:22,639 --> 00:04:26,560
um complexity rating is currently kind

00:04:24,880 --> 00:04:28,639
of uses things like

00:04:26,560 --> 00:04:30,800
looking at the number of servers or the

00:04:28,639 --> 00:04:31,280
number of links an application has to

00:04:30,800 --> 00:04:34,160
other

00:04:31,280 --> 00:04:34,960
other applications to try and give a

00:04:34,160 --> 00:04:38,160
ballpark

00:04:34,960 --> 00:04:39,840
uh complexity estimate alongside

00:04:38,160 --> 00:04:42,160
a bunch of other bits and pieces such as

00:04:39,840 --> 00:04:44,400
retirement dates etc

00:04:42,160 --> 00:04:46,000
um going into more detail we have these

00:04:44,400 --> 00:04:46,960
sections so we have one first day

00:04:46,000 --> 00:04:49,120
bookmarks

00:04:46,960 --> 00:04:51,040
where we look at uh key bookmarks and

00:04:49,120 --> 00:04:53,120
applications so

00:04:51,040 --> 00:04:55,199
we might ask for people to fill in

00:04:53,120 --> 00:04:57,040
things like links to source code

00:04:55,199 --> 00:04:58,560
links to documentation links to issue

00:04:57,040 --> 00:05:00,560
trackers

00:04:58,560 --> 00:05:02,000
we'll ask or we can bring in information

00:05:00,560 --> 00:05:04,000
about costs

00:05:02,000 --> 00:05:05,199
so this is typically imported from other

00:05:04,000 --> 00:05:07,440
systems

00:05:05,199 --> 00:05:09,520
to give us a feel for relative sizes of

00:05:07,440 --> 00:05:12,320
applications

00:05:09,520 --> 00:05:13,919
we have some basic stats that we capture

00:05:12,320 --> 00:05:15,440
around every application

00:05:13,919 --> 00:05:17,120
uh quite often these are things like

00:05:15,440 --> 00:05:20,560
compliance measures

00:05:17,120 --> 00:05:24,639
or stats say number of uh

00:05:20,560 --> 00:05:26,880
database tables etc um people

00:05:24,639 --> 00:05:29,280
um this is looking at we've got usually

00:05:26,880 --> 00:05:33,039
bring in the entire organizational

00:05:29,280 --> 00:05:35,199
tree uh and link people to applications

00:05:33,039 --> 00:05:36,080
uh this allows them to quickly show all

00:05:35,199 --> 00:05:38,960
of the

00:05:36,080 --> 00:05:40,080
apps belonging to people uh and pivot

00:05:38,960 --> 00:05:42,880
the data that way

00:05:40,080 --> 00:05:44,400
which we'll see so shortly um the other

00:05:42,880 --> 00:05:47,120
one i want to focus on right now

00:05:44,400 --> 00:05:48,800
is on technology uh so here we can start

00:05:47,120 --> 00:05:50,560
see okay these are

00:05:48,800 --> 00:05:52,479
brought in it's a list of servers

00:05:50,560 --> 00:05:55,280
associated with the applications

00:05:52,479 --> 00:05:56,400
or databases or software for instance

00:05:55,280 --> 00:05:59,520
we've linked

00:05:56,400 --> 00:06:00,080
our instance of waltz to artifactory to

00:05:59,520 --> 00:06:02,960
bring in

00:06:00,080 --> 00:06:04,080
a detailed software breakdown for each

00:06:02,960 --> 00:06:06,560
application

00:06:04,080 --> 00:06:07,720
and from there we can work out licenses

00:06:06,560 --> 00:06:10,880
and things like

00:06:07,720 --> 00:06:14,000
vulnerabilities in terms of risk

00:06:10,880 --> 00:06:14,720
for license risk looking at incompatible

00:06:14,000 --> 00:06:21,360
licenses

00:06:14,720 --> 00:06:23,199
for example

00:06:21,360 --> 00:06:24,720
two of the mechanisms that walt offers

00:06:23,199 --> 00:06:27,280
for capturing custom data around

00:06:24,720 --> 00:06:28,639
applications are assessments and ratings

00:06:27,280 --> 00:06:30,479
assessments are kind of like a single

00:06:28,639 --> 00:06:32,400
data point about an application

00:06:30,479 --> 00:06:34,160
so we have assessment definitions for

00:06:32,400 --> 00:06:37,039
things like records management

00:06:34,160 --> 00:06:37,840
legal holes compliance with various

00:06:37,039 --> 00:06:40,960
policies

00:06:37,840 --> 00:06:42,639
etc they're stored here and users can

00:06:40,960 --> 00:06:44,560
either input them directly

00:06:42,639 --> 00:06:46,840
into the application or they can be

00:06:44,560 --> 00:06:48,240
provided programmatically and marked as

00:06:46,840 --> 00:06:51,199
read-only

00:06:48,240 --> 00:06:53,440
in addition to assessments walt supports

00:06:51,199 --> 00:06:55,120
aligning applications to taxonomies via

00:06:53,440 --> 00:06:56,800
the ratings mechanism

00:06:55,120 --> 00:06:58,400
so in here we've got ratings for an

00:06:56,800 --> 00:07:00,080
application in this case it's just

00:06:58,400 --> 00:07:02,240
aligned against one of the taxonomies

00:07:00,080 --> 00:07:03,919
involves the functional taxonomy

00:07:02,240 --> 00:07:05,759
and we can see here that three items

00:07:03,919 --> 00:07:08,000
have been uh chosen

00:07:05,759 --> 00:07:10,160
so it's got positions risk and reporting

00:07:08,000 --> 00:07:11,120
uh little icons next to them indicate

00:07:10,160 --> 00:07:14,000
things like

00:07:11,120 --> 00:07:16,319
this function is being retired from this

00:07:14,000 --> 00:07:19,199
application at a certain date uh

00:07:16,319 --> 00:07:21,120
the handover icon implies that this

00:07:19,199 --> 00:07:22,960
application is taking on board this

00:07:21,120 --> 00:07:24,560
function from another application

00:07:22,960 --> 00:07:26,400
and the little pointer says that this

00:07:24,560 --> 00:07:28,000
application is handing off this function

00:07:26,400 --> 00:07:30,160
somewhere else

00:07:28,000 --> 00:07:31,520
so i can see from here just at a glance

00:07:30,160 --> 00:07:34,080
that this application is really

00:07:31,520 --> 00:07:36,960
consolidating around the risk function

00:07:34,080 --> 00:07:38,639
uh the little pie charts indicate that

00:07:36,960 --> 00:07:39,919
there are allocations associated with

00:07:38,639 --> 00:07:42,000
this application

00:07:39,919 --> 00:07:43,360
so here we can see okay there's a cost

00:07:42,000 --> 00:07:45,039
allocation scheme

00:07:43,360 --> 00:07:47,120
and we can see what the breakdown is for

00:07:45,039 --> 00:07:50,400
this application these are of course

00:07:47,120 --> 00:07:54,479
either user editable or can be provided

00:07:50,400 --> 00:07:54,479
via external systems and marketers read

00:07:56,840 --> 00:07:59,840
only

00:08:05,520 --> 00:08:09,199
another key aspect of waltz is looking

00:08:07,440 --> 00:08:11,680
at data and data flows

00:08:09,199 --> 00:08:13,280
within an organization to that end we

00:08:11,680 --> 00:08:14,560
have a data taxonomy

00:08:13,280 --> 00:08:16,319
uh which you may declare which is

00:08:14,560 --> 00:08:17,599
register all the data types

00:08:16,319 --> 00:08:20,240
uh here's a sample one that we've

00:08:17,599 --> 00:08:23,280
generated for the test data

00:08:20,240 --> 00:08:25,120
and we can also declare uh

00:08:23,280 --> 00:08:26,479
which systems are authoritative for

00:08:25,120 --> 00:08:29,199
those data types

00:08:26,479 --> 00:08:30,319
so this table here shows okay for this

00:08:29,199 --> 00:08:32,640
data type

00:08:30,319 --> 00:08:33,760
for this part of the organization and

00:08:32,640 --> 00:08:35,599
this is either an

00:08:33,760 --> 00:08:38,159
authoritative or a secondary source of

00:08:35,599 --> 00:08:40,800
data for that

00:08:38,159 --> 00:08:41,839
for that data type uh we look at how

00:08:40,800 --> 00:08:43,599
that looks in practice

00:08:41,839 --> 00:08:45,040
on an application level let's go and

00:08:43,599 --> 00:08:47,040
take another look at

00:08:45,040 --> 00:08:50,560
the application we're looking at earlier

00:08:47,040 --> 00:08:52,640
and look at the data flow section

00:08:50,560 --> 00:08:54,800
so here we can see a breakdown of

00:08:52,640 --> 00:08:56,240
various aspects of the data flows that

00:08:54,800 --> 00:08:59,040
we have for this application

00:08:56,240 --> 00:09:00,959
but the main bit concerned with is this

00:08:59,040 --> 00:09:03,279
diagram at the bottom

00:09:00,959 --> 00:09:04,080
this shows fairly clearly the upstream

00:09:03,279 --> 00:09:06,959
systems

00:09:04,080 --> 00:09:07,600
the downstream systems and our system in

00:09:06,959 --> 00:09:10,320
the middle

00:09:07,600 --> 00:09:12,000
fox terrier it's broken down by the data

00:09:10,320 --> 00:09:15,519
types

00:09:12,000 --> 00:09:17,360
that it consumes or produces and we can

00:09:15,519 --> 00:09:19,839
see okay these systems are feeding it

00:09:17,360 --> 00:09:21,600
these it's sending out to the system

00:09:19,839 --> 00:09:22,959
these little annotations here

00:09:21,600 --> 00:09:25,200
that are showing you whether or not we

00:09:22,959 --> 00:09:26,320
have examples of the types of data

00:09:25,200 --> 00:09:28,000
that's being fed

00:09:26,320 --> 00:09:30,800
so whether people have documented the

00:09:28,000 --> 00:09:34,240
actual flow specifications

00:09:30,800 --> 00:09:36,240
um if we take a

00:09:34,240 --> 00:09:38,160
closer look at these and we can see okay

00:09:36,240 --> 00:09:39,839
here's the file

00:09:38,160 --> 00:09:41,200
and in this one there should be more

00:09:39,839 --> 00:09:42,800
than one file because the icon is

00:09:41,200 --> 00:09:44,160
slightly different

00:09:42,800 --> 00:09:46,080
uh just indicating that there are

00:09:44,160 --> 00:09:48,000
multiple files there

00:09:46,080 --> 00:09:49,519
the colors on these lines go back to

00:09:48,000 --> 00:09:51,040
those authoritative sources we talked

00:09:49,519 --> 00:09:53,519
about a few minutes ago

00:09:51,040 --> 00:09:55,839
so american foxhound for example has

00:09:53,519 --> 00:09:55,839
been

00:09:56,640 --> 00:09:59,920
identified as an authoritative source

00:09:58,399 --> 00:10:03,440
for transaction data

00:09:59,920 --> 00:10:05,839
hence this arc is in green

00:10:03,440 --> 00:10:05,839
whereas

00:10:06,480 --> 00:10:09,920
uh these applications safe transaction

00:10:08,720 --> 00:10:12,160
data there may

00:10:09,920 --> 00:10:13,519
there is an authoritative source uh but

00:10:12,160 --> 00:10:16,640
it isn't tiffany

00:10:13,519 --> 00:10:18,880
um which is why it'd be red where the

00:10:16,640 --> 00:10:19,839
line is black that's just indicating

00:10:18,880 --> 00:10:22,160
that no

00:10:19,839 --> 00:10:23,200
authoritative statement covers this type

00:10:22,160 --> 00:10:24,720
of data for this

00:10:23,200 --> 00:10:27,279
part of the bank or part of the

00:10:24,720 --> 00:10:30,480
organization

00:10:27,279 --> 00:10:32,000
um we can focus in on these especially

00:10:30,480 --> 00:10:33,120
useful when the diagrams get more

00:10:32,000 --> 00:10:36,160
complex

00:10:33,120 --> 00:10:37,760
and we can add new ones fairly simply

00:10:36,160 --> 00:10:40,560
although there's a mixture at the moment

00:10:37,760 --> 00:10:42,720
of these things being registered by hand

00:10:40,560 --> 00:10:44,480
and registered programmatically from

00:10:42,720 --> 00:10:46,800
other sources

00:10:44,480 --> 00:10:49,200
um we've also had this other annotation

00:10:46,800 --> 00:10:50,720
here which shows a pending change

00:10:49,200 --> 00:10:52,399
uh so this is something that's fairly

00:10:50,720 --> 00:10:55,600
new uh if we look at

00:10:52,399 --> 00:10:57,279
change sets coming into this application

00:10:55,600 --> 00:11:00,320
we can see that there's

00:10:57,279 --> 00:11:01,360
one change set associated with it and

00:11:00,320 --> 00:11:05,440
it's got him

00:11:01,360 --> 00:11:08,000
in particular a bunch of uh flow changes

00:11:05,440 --> 00:11:10,160
which are potentially affecting this

00:11:08,000 --> 00:11:13,839
application so here we can see one

00:11:10,160 --> 00:11:16,880
that there is a retirement of this

00:11:13,839 --> 00:11:18,079
pending as part of this change which can

00:11:16,880 --> 00:11:23,040
optionally be linked

00:11:18,079 --> 00:11:26,800
to a change initiative declaration

00:11:23,040 --> 00:11:29,920
if we go back to our application

00:11:26,800 --> 00:11:31,600
we can start looking at the flows in

00:11:29,920 --> 00:11:32,000
more detail taking more of a lineage

00:11:31,600 --> 00:11:33,600
view

00:11:32,000 --> 00:11:36,160
so this has given us very much a sort of

00:11:33,600 --> 00:11:37,760
point point of neighbors

00:11:36,160 --> 00:11:39,519
kind of view you know upstream and

00:11:37,760 --> 00:11:40,839
downstream neighbors

00:11:39,519 --> 00:11:43,040
but we may want to show more of a

00:11:40,839 --> 00:11:45,200
lineage type view

00:11:43,040 --> 00:11:46,079
now to that end we have the diagram

00:11:45,200 --> 00:11:48,560
section

00:11:46,079 --> 00:11:49,680
and you can create diagrams in walls

00:11:48,560 --> 00:11:52,720
quite quickly

00:11:49,680 --> 00:11:54,560
using a kind of constrained editor

00:11:52,720 --> 00:11:56,079
so this is one i just drew earlier

00:11:54,560 --> 00:11:56,880
starting at foxteria and worked

00:11:56,079 --> 00:11:58,959
backwards

00:11:56,880 --> 00:12:01,519
through the systems showing you know

00:11:58,959 --> 00:12:02,959
which data is being fed by which systems

00:12:01,519 --> 00:12:05,440
so it's just showing you the upstream

00:12:02,959 --> 00:12:07,680
systems and these little

00:12:05,440 --> 00:12:08,639
things in the circles just where we have

00:12:07,680 --> 00:12:10,399
documentation

00:12:08,639 --> 00:12:13,519
for the actual flows that have been

00:12:10,399 --> 00:12:15,680
passed the question marks when we don't

00:12:13,519 --> 00:12:16,800
and you can add basic annotations onto

00:12:15,680 --> 00:12:18,800
the diagram

00:12:16,800 --> 00:12:20,399
changing the diagram is quite simple if

00:12:18,800 --> 00:12:22,959
we wanted to add

00:12:20,399 --> 00:12:25,120
a new system it then goes and queries

00:12:22,959 --> 00:12:26,720
the

00:12:25,120 --> 00:12:28,720
the flow information that we have in

00:12:26,720 --> 00:12:31,360
waltz and just shows you

00:12:28,720 --> 00:12:33,360
only the possible upstream systems so we

00:12:31,360 --> 00:12:36,399
can say okay i want to show

00:12:33,360 --> 00:12:38,560
these three systems

00:12:36,399 --> 00:12:39,760
and go through and again using the

00:12:38,560 --> 00:12:42,240
constraints

00:12:39,760 --> 00:12:44,160
we can say okay i want to show just

00:12:42,240 --> 00:12:47,920
those two flows

00:12:44,160 --> 00:12:50,320
once this is saved uh

00:12:47,920 --> 00:12:51,920
this diagram will be cross-referenced

00:12:50,320 --> 00:12:52,560
against every system that is mentioned

00:12:51,920 --> 00:12:55,279
within it

00:12:52,560 --> 00:12:56,720
so i think we just included one bat so

00:12:55,279 --> 00:12:57,600
if we go and have a look at one batch we

00:12:56,720 --> 00:12:59,920
can see

00:12:57,600 --> 00:13:00,880
it is now being cross-referenced on that

00:12:59,920 --> 00:13:02,320
diagram

00:13:00,880 --> 00:13:04,880
effectively we're starting to kind of

00:13:02,320 --> 00:13:06,560
bill it materials uh behind each diagram

00:13:04,880 --> 00:13:07,279
so that we can do that cross-referencing

00:13:06,560 --> 00:13:08,959
quickly

00:13:07,279 --> 00:13:10,480
and that goes down to every part of the

00:13:08,959 --> 00:13:12,000
diagram so every

00:13:10,480 --> 00:13:14,560
flow that's mentioned on there every

00:13:12,000 --> 00:13:18,639
file will be

00:13:14,560 --> 00:13:18,639
indexed and cross-referenced to this

00:13:18,839 --> 00:13:21,839
diagram

00:13:24,800 --> 00:13:29,440
so far we've been primarily looking at

00:13:27,040 --> 00:13:31,839
individual applications in waltz and

00:13:29,440 --> 00:13:32,480
uh describing the characteristics of

00:13:31,839 --> 00:13:35,680
those

00:13:32,480 --> 00:13:36,880
mods can also be used to aggregate

00:13:35,680 --> 00:13:39,920
applications

00:13:36,880 --> 00:13:41,440
either by sort of intrinsic uh

00:13:39,920 --> 00:13:44,720
aggregation groups

00:13:41,440 --> 00:13:47,680
such as old units people or via

00:13:44,720 --> 00:13:48,399
sort of user-defined mechanisms such as

00:13:47,680 --> 00:13:51,279
ad hoc

00:13:48,399 --> 00:13:52,079
application groups so we take a look at

00:13:51,279 --> 00:13:55,199
uh

00:13:52,079 --> 00:13:57,120
say org unit as a grouping mechanism so

00:13:55,199 --> 00:14:00,160
we look at one of the old units

00:13:57,120 --> 00:14:01,680
cio office i can see it's got 24

00:14:00,160 --> 00:14:04,880
applications in this group

00:14:01,680 --> 00:14:08,000
sample data we can see you know the

00:14:04,880 --> 00:14:12,000
applications that make this up

00:14:08,000 --> 00:14:15,199
uh the costs complexity etc

00:14:12,000 --> 00:14:15,680
any indicators that are there which are

00:14:15,199 --> 00:14:18,000
the

00:14:15,680 --> 00:14:20,079
we use extensively in the bank for some

00:14:18,000 --> 00:14:23,360
kpis kris

00:14:20,079 --> 00:14:25,519
um this lets us

00:14:23,360 --> 00:14:27,040
quickly view how well we're doing i

00:14:25,519 --> 00:14:28,800
guess across these measures

00:14:27,040 --> 00:14:30,320
but also jump off to get more detail

00:14:28,800 --> 00:14:32,320
about we know what actually makes up

00:14:30,320 --> 00:14:34,800
those numbers and also to do quick

00:14:32,320 --> 00:14:37,120
comparison so we can compare across

00:14:34,800 --> 00:14:38,720
parts of the bank quite quickly by using

00:14:37,120 --> 00:14:42,000
this little uh

00:14:38,720 --> 00:14:44,240
mini navigation selector here

00:14:42,000 --> 00:14:46,000
um going back to this list here you can

00:14:44,240 --> 00:14:47,040
see we've also got things such as

00:14:46,000 --> 00:14:48,800
stations

00:14:47,040 --> 00:14:50,959
so uh in this case we've got notice

00:14:48,800 --> 00:14:53,120
stations but we can schedule attestation

00:14:50,959 --> 00:14:56,079
runs for different types of data

00:14:53,120 --> 00:14:56,639
so far um once we've got attestation

00:14:56,079 --> 00:15:00,160
support

00:14:56,639 --> 00:15:04,000
for flows critical flows and

00:15:00,160 --> 00:15:07,839
for the taxonomy

00:15:04,000 --> 00:15:09,519
ratings we

00:15:07,839 --> 00:15:11,440
can have bookmarks linked exchange

00:15:09,519 --> 00:15:13,360
initiatives data flows

00:15:11,440 --> 00:15:15,519
is where we start seeing the data in

00:15:13,360 --> 00:15:16,720
aggregate here so we've got a force

00:15:15,519 --> 00:15:18,480
directed graph

00:15:16,720 --> 00:15:19,920
uh obviously due to the sample date of

00:15:18,480 --> 00:15:22,160
nature uh

00:15:19,920 --> 00:15:23,519
it looks a bit of a mess but we can do

00:15:22,160 --> 00:15:27,279
things like filter it out

00:15:23,519 --> 00:15:31,440
according to data type

00:15:27,279 --> 00:15:31,440
or show only inbound flows

00:15:32,959 --> 00:15:35,920
or outbound flows

00:15:36,880 --> 00:15:40,800
and obviously the full data is available

00:15:38,959 --> 00:15:43,440
as well should you wish to

00:15:40,800 --> 00:15:43,440
export it

00:15:44,480 --> 00:15:52,160
the ratings section is quite useful

00:15:48,079 --> 00:15:53,759
uh the ratings that we were looking at

00:15:52,160 --> 00:15:57,920
earlier so we've

00:15:53,759 --> 00:15:59,519
i think uh foxterria to risk

00:15:57,920 --> 00:16:01,839
we can see now for this group of

00:15:59,519 --> 00:16:02,880
applications within the cio office of

00:16:01,839 --> 00:16:05,920
unit

00:16:02,880 --> 00:16:07,279
this is their sort of functional makeup

00:16:05,920 --> 00:16:09,440
and we can also see here some of the

00:16:07,279 --> 00:16:10,240
other taxonomies during this sample data

00:16:09,440 --> 00:16:12,240
sets we've got

00:16:10,240 --> 00:16:14,800
an example process tax on your product

00:16:12,240 --> 00:16:17,120
tax on your regulatory taxonomy

00:16:14,800 --> 00:16:17,120
um

00:16:20,000 --> 00:16:24,320
trillionaire of these shows actually the

00:16:22,639 --> 00:16:26,079
data underneath

00:16:24,320 --> 00:16:27,759
so we can drill in and say okay these

00:16:26,079 --> 00:16:28,880
are the applications that make up these

00:16:27,759 --> 00:16:31,279
little bar charts

00:16:28,880 --> 00:16:32,639
which are aggregated up and color-coded

00:16:31,279 --> 00:16:35,839
according to the

00:16:32,639 --> 00:16:37,440
ratings used within that taxonomy

00:16:35,839 --> 00:16:39,120
so in this example we've got a very

00:16:37,440 --> 00:16:43,120
simple sort of

00:16:39,120 --> 00:16:46,240
uh rgb it's like rgb uh

00:16:43,120 --> 00:16:49,920
rag rank status uh

00:16:46,240 --> 00:16:51,440
for the ratings on those applications to

00:16:49,920 --> 00:16:54,800
the function

00:16:51,440 --> 00:16:56,880
um reports is kind of new uh so we've

00:16:54,800 --> 00:16:58,320
added this thing called the data grid

00:16:56,880 --> 00:16:59,519
it's another interesting one let me

00:16:58,320 --> 00:17:01,279
switch to this one

00:16:59,519 --> 00:17:03,519
this is to support uh some of the cloud

00:17:01,279 --> 00:17:06,640
readiness thing that we're doing

00:17:03,519 --> 00:17:07,520
in the bank at the moment so this allows

00:17:06,640 --> 00:17:10,640
us to

00:17:07,520 --> 00:17:12,160
cherry pick a set of attributes so

00:17:10,640 --> 00:17:15,439
either assessments

00:17:12,160 --> 00:17:16,559
or the measurables sorry the taxonomy

00:17:15,439 --> 00:17:19,839
ratings

00:17:16,559 --> 00:17:21,120
and define them in a grid and then the

00:17:19,839 --> 00:17:24,079
applications

00:17:21,120 --> 00:17:24,799
in this group or any group would be the

00:17:24,079 --> 00:17:26,240
rows

00:17:24,799 --> 00:17:28,640
and we can quickly see we've got this

00:17:26,240 --> 00:17:32,000
nice data grid

00:17:28,640 --> 00:17:35,039
and we can add these to the

00:17:32,000 --> 00:17:35,840
summarizing columns so we added into

00:17:35,039 --> 00:17:37,440
summaries

00:17:35,840 --> 00:17:39,120
we can quickly use these as sort of

00:17:37,440 --> 00:17:41,360
filter mechanisms

00:17:39,120 --> 00:17:42,960
to say show me you know all the

00:17:41,360 --> 00:17:45,440
applications

00:17:42,960 --> 00:17:47,360
uh which are good or adequate for bcbs

00:17:45,440 --> 00:17:49,360
and adequate for governance

00:17:47,360 --> 00:17:52,080
obviously these ratings would make more

00:17:49,360 --> 00:17:53,919
sense uh with realistic data

00:17:52,080 --> 00:17:55,600
but we're finding that quite useful in

00:17:53,919 --> 00:17:56,640
particular we're looking at it for cloud

00:17:55,600 --> 00:18:00,080
readiness

00:17:56,640 --> 00:18:02,559
so we have assessments based upon how

00:18:00,080 --> 00:18:04,480
much how well suited your we think

00:18:02,559 --> 00:18:08,640
applications are

00:18:04,480 --> 00:18:08,640
to migrate to cloud infrastructure

00:18:12,000 --> 00:18:19,520
other types of um aggregation

00:18:16,160 --> 00:18:21,840
uh things like people

00:18:19,520 --> 00:18:23,440
you can see here we've got a person we

00:18:21,840 --> 00:18:24,640
can see they've got a very similar set

00:18:23,440 --> 00:18:27,120
of views

00:18:24,640 --> 00:18:29,039
they've got costs and things we've got

00:18:27,120 --> 00:18:30,559
the same ratings type of view

00:18:29,039 --> 00:18:32,480
we've got the same reports which are

00:18:30,559 --> 00:18:34,559
dynamically generated just for that

00:18:32,480 --> 00:18:36,640
person and the applications that they

00:18:34,559 --> 00:18:40,240
are involved with

00:18:36,640 --> 00:18:42,799
we can do the same for the functions or

00:18:40,240 --> 00:18:44,480
any of the taxonomy items so looking at

00:18:42,799 --> 00:18:46,559
risk for function

00:18:44,480 --> 00:18:48,240
uh we can see you know the same sort of

00:18:46,559 --> 00:18:52,240
thing we've got the applications

00:18:48,240 --> 00:18:56,960
the data flows uh we've got the

00:18:52,240 --> 00:19:00,160
the ratings and reports etc

00:18:56,960 --> 00:19:01,760
we can also define custom map groups so

00:19:00,160 --> 00:19:04,960
when there isn't a sort of

00:19:01,760 --> 00:19:05,280
intrinsic uh organizing mechanism such

00:19:04,960 --> 00:19:08,960
as

00:19:05,280 --> 00:19:10,799
people or gears taxonomy items

00:19:08,960 --> 00:19:12,240
we can define ad hoc groups where we can

00:19:10,799 --> 00:19:15,039
just create a new group

00:19:12,240 --> 00:19:15,760
and add applications to it there's also

00:19:15,039 --> 00:19:18,000
a

00:19:15,760 --> 00:19:19,120
app group for every person called the

00:19:18,000 --> 00:19:20,880
favorite group

00:19:19,120 --> 00:19:22,480
where if you add applications to that

00:19:20,880 --> 00:19:25,440
group

00:19:22,480 --> 00:19:27,520
either by editing the group or as you're

00:19:25,440 --> 00:19:30,559
navigating through waltz

00:19:27,520 --> 00:19:32,080
you can add them by the little bookmark

00:19:30,559 --> 00:19:34,799
icon here

00:19:32,080 --> 00:19:35,520
uh then you get added to your favorite

00:19:34,799 --> 00:19:37,679
group

00:19:35,520 --> 00:19:38,720
and then any time the application or any

00:19:37,679 --> 00:19:41,760
of the apps in this group

00:19:38,720 --> 00:19:43,840
change in terms of you know their

00:19:41,760 --> 00:19:45,919
records and waltz get updated so new

00:19:43,840 --> 00:19:49,120
flows new functions

00:19:45,919 --> 00:19:52,799
uh any bookmarks then

00:19:49,120 --> 00:19:55,120
this calendar chart will be filled in

00:19:52,799 --> 00:19:56,320
uh letting you know that there's been

00:19:55,120 --> 00:19:57,679
some changes

00:19:56,320 --> 00:19:59,840
to apps that you're possibly interested

00:19:57,679 --> 00:20:01,840
in and you can drill in and say hey

00:19:59,840 --> 00:20:04,320
what's actually happened

00:20:01,840 --> 00:20:06,640
so here i'm drilling and see okay for

00:20:04,320 --> 00:20:08,400
this application on this day

00:20:06,640 --> 00:20:09,919
you know there's a flow added remove

00:20:08,400 --> 00:20:12,400
data from application modify the

00:20:09,919 --> 00:20:12,400
application

00:20:17,200 --> 00:20:22,640
another key usage of waltz within

00:20:19,679 --> 00:20:26,080
organizations is around its ability to

00:20:22,640 --> 00:20:29,120
issue surveys to collect uh data

00:20:26,080 --> 00:20:29,679
on an ad hoc basis surveys can be

00:20:29,120 --> 00:20:32,640
defined

00:20:29,679 --> 00:20:34,480
by administrators for example here's the

00:20:32,640 --> 00:20:37,200
one we created earlier

00:20:34,480 --> 00:20:38,799
made the templates get a demo survey so

00:20:37,200 --> 00:20:39,440
we've got a very simple survey which has

00:20:38,799 --> 00:20:42,240
got some

00:20:39,440 --> 00:20:43,600
questions uh says fictitious cloud

00:20:42,240 --> 00:20:46,000
migration

00:20:43,600 --> 00:20:47,679
uh but we can also have things like

00:20:46,000 --> 00:20:48,080
conditional questions and conditional

00:20:47,679 --> 00:20:52,320
questions

00:20:48,080 --> 00:20:54,240
can take two forms they can either be

00:20:52,320 --> 00:20:55,600
predicated questions can be predicated

00:20:54,240 --> 00:20:58,320
on

00:20:55,600 --> 00:20:59,679
previous answers within the same survey

00:20:58,320 --> 00:21:02,640
so this is a simple

00:20:59,679 --> 00:21:03,440
this question appears if this value is

00:21:02,640 --> 00:21:05,520
checked

00:21:03,440 --> 00:21:07,120
uh this one appears if this value is

00:21:05,520 --> 00:21:09,039
greater than six

00:21:07,120 --> 00:21:10,400
but there can also be ones that are more

00:21:09,039 --> 00:21:12,880
environmental

00:21:10,400 --> 00:21:14,400
predicates so this is looking at a

00:21:12,880 --> 00:21:15,360
attribute of the application being

00:21:14,400 --> 00:21:17,200
surveyed

00:21:15,360 --> 00:21:18,960
and saying does its sensitive data

00:21:17,200 --> 00:21:21,600
assessment rating equal s

00:21:18,960 --> 00:21:23,039
which is the code for sensitive in our

00:21:21,600 --> 00:21:25,520
data model

00:21:23,039 --> 00:21:26,559
uh that we've defined uh we're going to

00:21:25,520 --> 00:21:27,600
have a look at how that works in

00:21:26,559 --> 00:21:30,240
practice

00:21:27,600 --> 00:21:32,000
have a look at foxterria currently

00:21:30,240 --> 00:21:33,200
started sensitive data flag to just

00:21:32,000 --> 00:21:36,480
internal

00:21:33,200 --> 00:21:38,240
or we could set it to lower and just say

00:21:36,480 --> 00:21:40,159
it's public

00:21:38,240 --> 00:21:42,559
so now when we look at this assessment

00:21:40,159 --> 00:21:45,200
also when let's look at this survey

00:21:42,559 --> 00:21:45,919
we should see okay we've got uh even

00:21:45,200 --> 00:21:48,000
scope

00:21:45,919 --> 00:21:49,360
yes now with the first predicate the

00:21:48,000 --> 00:21:50,559
other question was you know if it was

00:21:49,360 --> 00:21:53,280
greater than six than

00:21:50,559 --> 00:21:56,080
a high estimate uh but we're not seeing

00:21:53,280 --> 00:22:00,000
that question about sensitive data

00:21:56,080 --> 00:22:03,200
if we uh go back

00:22:00,000 --> 00:22:04,000
and we change the sensitive data

00:22:03,200 --> 00:22:05,919
assessment

00:22:04,000 --> 00:22:07,679
for this application and say that it is

00:22:05,919 --> 00:22:10,640
strictly confidential

00:22:07,679 --> 00:22:11,200
so if that we go go back into the survey

00:22:10,640 --> 00:22:14,320
you can see

00:22:11,200 --> 00:22:17,280
we've now got this question

00:22:14,320 --> 00:22:18,320
appearing for the sensitive data

00:22:17,280 --> 00:22:21,679
question

00:22:18,320 --> 00:22:24,799
once once the survey is submitted

00:22:21,679 --> 00:22:27,039
it can be sent back to its owners

00:22:24,799 --> 00:22:28,159
people who issued it and they can either

00:22:27,039 --> 00:22:30,159
approve or

00:22:28,159 --> 00:22:31,440
reject the survey if it needs more work

00:22:30,159 --> 00:22:35,120
doing to it

00:22:31,440 --> 00:22:37,360
um also when surveys are created

00:22:35,120 --> 00:22:39,360
there's two real ways of initiating a

00:22:37,360 --> 00:22:42,480
survey one is kind of ad hoc

00:22:39,360 --> 00:22:44,880
applications can sort of self well

00:22:42,480 --> 00:22:45,679
i'm sorry applications can sort of raise

00:22:44,880 --> 00:22:48,720
their own

00:22:45,679 --> 00:22:51,120
issues or people can raise them on a

00:22:48,720 --> 00:22:52,400
case-by-case basis the other way of

00:22:51,120 --> 00:22:58,080
raising surveys

00:22:52,400 --> 00:22:58,080
is you can create a survey run

00:22:58,640 --> 00:23:03,039
where we go into the template we can say

00:23:01,120 --> 00:23:04,720
okay i want to create a run

00:23:03,039 --> 00:23:07,200
and here we say what we're actually

00:23:04,720 --> 00:23:09,679
doing is we want to issue this survey

00:23:07,200 --> 00:23:10,640
to a set of applications or change

00:23:09,679 --> 00:23:12,799
initiatives

00:23:10,640 --> 00:23:14,240
uh which meets certain criteria so give

00:23:12,799 --> 00:23:16,799
it a run name

00:23:14,240 --> 00:23:17,440
uh some contact details but here's the

00:23:16,799 --> 00:23:18,880
key bit

00:23:17,440 --> 00:23:20,640
we can say okay send it to everyone in

00:23:18,880 --> 00:23:22,000
this app group send it to everyone in

00:23:20,640 --> 00:23:26,400
this org unit send it to

00:23:22,000 --> 00:23:29,679
applications that do this taxonomy item

00:23:26,400 --> 00:23:30,320
the exact is whether or not you want to

00:23:29,679 --> 00:23:32,720
send it to

00:23:30,320 --> 00:23:34,559
children of this org unit as well so say

00:23:32,720 --> 00:23:36,320
we just sent it to

00:23:34,559 --> 00:23:38,720
the risk department we might want all of

00:23:36,320 --> 00:23:41,039
the uh the sub departments to also fill

00:23:38,720 --> 00:23:41,039
this in

00:23:43,039 --> 00:23:46,240
a uh risk that would include all the

00:23:45,360 --> 00:23:49,039
other items

00:23:46,240 --> 00:23:49,840
the risk departments uh there is a

00:23:49,039 --> 00:23:51,760
question of who

00:23:49,840 --> 00:23:53,440
is going to be filling this in this is

00:23:51,760 --> 00:23:54,640
again where we start reaching into the

00:23:53,440 --> 00:23:56,640
waltz data model

00:23:54,640 --> 00:23:57,760
and say okay we now know from this

00:23:56,640 --> 00:23:59,679
selector

00:23:57,760 --> 00:24:01,200
uh which applications are involved so

00:23:59,679 --> 00:24:03,360
everything to do with riska

00:24:01,200 --> 00:24:04,400
everything associated with risk i.t the

00:24:03,360 --> 00:24:06,320
og unit

00:24:04,400 --> 00:24:07,919
and now what we want to do is we want it

00:24:06,320 --> 00:24:10,320
to be the data owner

00:24:07,919 --> 00:24:11,840
the architect the it architect and the

00:24:10,320 --> 00:24:14,159
it lead

00:24:11,840 --> 00:24:16,400
and we can then say okay who how do you

00:24:14,159 --> 00:24:19,760
want this to be filled in

00:24:16,400 --> 00:24:21,520
is it um for a group as in anyone can

00:24:19,760 --> 00:24:23,760
fill it in or is this an individual

00:24:21,520 --> 00:24:26,640
everyone has to fill it in and once

00:24:23,760 --> 00:24:28,880
we've filled in the rest of the data

00:24:26,640 --> 00:24:31,360
then we should be able to issue that

00:24:28,880 --> 00:24:31,360
survey

00:24:31,679 --> 00:24:38,960
nope and we haven't managed to catch

00:24:34,720 --> 00:24:41,279
my sample day to anyone who is

00:24:38,960 --> 00:24:41,279
oops

00:24:43,520 --> 00:24:48,720
is there we issue the survey and now

00:24:46,080 --> 00:24:51,520
that survey run has been generated

00:24:48,720 --> 00:24:52,320
click create an email if you wish to uh

00:24:51,520 --> 00:24:54,799
but we can also

00:24:52,320 --> 00:24:56,559
see we've got a new run uh where we can

00:24:54,799 --> 00:24:58,400
see that there are seven

00:24:56,559 --> 00:24:59,679
uh surveys outstanding now you may have

00:24:58,400 --> 00:25:00,640
noticed that there was a lot more people

00:24:59,679 --> 00:25:02,400
listed there

00:25:00,640 --> 00:25:04,480
is because the job selecting everyone

00:25:02,400 --> 00:25:06,799
and the group nature of the survey

00:25:04,480 --> 00:25:08,720
means it was only actually seven surveys

00:25:06,799 --> 00:25:10,799
issued but more people have been invited

00:25:08,720 --> 00:25:13,200
to participate

00:25:10,799 --> 00:25:14,320
um yes surveys have proven to be quite

00:25:13,200 --> 00:25:16,159
popular

00:25:14,320 --> 00:25:17,760
we use them a lot around sort of some of

00:25:16,159 --> 00:25:21,120
the governance metrics

00:25:17,760 --> 00:25:23,760
also the governance processes so funding

00:25:21,120 --> 00:25:24,640
processes and also some of the records

00:25:23,760 --> 00:25:28,159
management

00:25:24,640 --> 00:25:30,559
type of processes

00:25:28,159 --> 00:25:32,080
where we are doing uh in-depth

00:25:30,559 --> 00:25:35,360
questionnaires for applications which

00:25:32,080 --> 00:25:35,360
meet certain criteria

00:25:37,279 --> 00:25:41,360
okay that concludes the demo part i'm

00:25:40,000 --> 00:25:42,320
now going to talk a little bit about you

00:25:41,360 --> 00:25:44,799
know

00:25:42,320 --> 00:25:46,400
futures you know where walt is heading

00:25:44,799 --> 00:25:49,360
um how to get started

00:25:46,400 --> 00:25:50,159
with waltz and how you can start making

00:25:49,360 --> 00:25:53,200
contributions

00:25:50,159 --> 00:25:54,840
should you wish you so uh

00:25:53,200 --> 00:25:57,679
one of the key challenges that we're

00:25:54,840 --> 00:26:00,960
facing uh in the coming sort of months

00:25:57,679 --> 00:26:03,600
years is uh the gradual shift

00:26:00,960 --> 00:26:04,240
of the unit of sort of deployment moving

00:26:03,600 --> 00:26:06,240
from sort of

00:26:04,240 --> 00:26:07,360
applications or monolithic type

00:26:06,240 --> 00:26:08,880
applications

00:26:07,360 --> 00:26:10,720
towards much smaller components

00:26:08,880 --> 00:26:13,360
microservices lambdas

00:26:10,720 --> 00:26:14,640
etc trying to figure out you know how do

00:26:13,360 --> 00:26:17,919
we document those

00:26:14,640 --> 00:26:20,400
what is the correct unit of sort of

00:26:17,919 --> 00:26:21,760
measurement what policies and procedures

00:26:20,400 --> 00:26:25,919
need to be in place

00:26:21,760 --> 00:26:28,159
how can we aggregate them so as not to

00:26:25,919 --> 00:26:31,120
basically bombard the owners with lots

00:26:28,159 --> 00:26:34,880
and lots of documentation requests

00:26:31,120 --> 00:26:38,480
another key part is opening up vaults

00:26:34,880 --> 00:26:38,960
the data set via apis so that we've been

00:26:38,480 --> 00:26:40,640
asked to

00:26:38,960 --> 00:26:42,559
do quite a lot we've done some of that

00:26:40,640 --> 00:26:44,240
internally within the bank

00:26:42,559 --> 00:26:45,360
so be looking to how we can

00:26:44,240 --> 00:26:46,880
industrialize some of that and

00:26:45,360 --> 00:26:48,400
contribute that to the open source

00:26:46,880 --> 00:26:52,000
project

00:26:48,400 --> 00:26:54,400
um automated data capture so quite often

00:26:52,000 --> 00:26:55,120
some of the data sets are manual and

00:26:54,400 --> 00:26:58,000
we've written

00:26:55,120 --> 00:26:59,120
various feeds into other systems to

00:26:58,000 --> 00:27:01,840
bring data in

00:26:59,120 --> 00:27:03,120
it would be nice to start exploring uh

00:27:01,840 --> 00:27:06,240
some more sort of

00:27:03,120 --> 00:27:08,880
official integrations with

00:27:06,240 --> 00:27:10,799
other products to bring data sets in

00:27:08,880 --> 00:27:11,360
workflow support we've seen some basic

00:27:10,799 --> 00:27:13,840
workflow

00:27:11,360 --> 00:27:14,880
around things like the surveys um how

00:27:13,840 --> 00:27:18,159
we've been asked

00:27:14,880 --> 00:27:21,440
increasingly to um

00:27:18,159 --> 00:27:24,880
put workflow around various

00:27:21,440 --> 00:27:27,360
change sets within waltz um so that

00:27:24,880 --> 00:27:29,440
data can be tracked and assigned to

00:27:27,360 --> 00:27:32,960
reviewers etc

00:27:29,440 --> 00:27:35,600
um finally the cloud migration kind of

00:27:32,960 --> 00:27:36,080
dovetails into the first point is that

00:27:35,600 --> 00:27:38,480
we're

00:27:36,080 --> 00:27:40,399
really looking at sort of visualizations

00:27:38,480 --> 00:27:41,840
uh to help support

00:27:40,399 --> 00:27:43,520
the cloud migration so a lot of the

00:27:41,840 --> 00:27:45,919
recent work we've been doing

00:27:43,520 --> 00:27:46,799
has been sort of rooted in some of those

00:27:45,919 --> 00:27:48,720
efforts

00:27:46,799 --> 00:27:49,919
uh the dashboarding thing you saw the

00:27:48,720 --> 00:27:51,520
grid report

00:27:49,919 --> 00:27:53,919
uh certainly a lot of the assessments

00:27:51,520 --> 00:27:57,520
and the ratings i sort of gave it

00:27:53,919 --> 00:28:01,360
now towards looking at how

00:27:57,520 --> 00:28:05,520
we can document applications as they

00:28:01,360 --> 00:28:07,360
move from on-prem to sort of cloud

00:28:05,520 --> 00:28:09,440
systems and all of the changes that will

00:28:07,360 --> 00:28:12,559
be wrought on them as part of that

00:28:09,440 --> 00:28:13,840
move i'm getting started

00:28:12,559 --> 00:28:15,600
okay there's a couple of ways to get

00:28:13,840 --> 00:28:16,960
started with waltz

00:28:15,600 --> 00:28:20,000
one of the easiest is if you just want

00:28:16,960 --> 00:28:22,960
to try out waltz on on your own machines

00:28:20,000 --> 00:28:24,000
you can download a simple docker image

00:28:22,960 --> 00:28:25,679
as

00:28:24,000 --> 00:28:27,039
a little bit out of date a moment but

00:28:25,679 --> 00:28:28,880
i'll get that updated in the next few

00:28:27,039 --> 00:28:32,240
days

00:28:28,880 --> 00:28:35,279
which has a waltz instance running uh

00:28:32,240 --> 00:28:36,000
with some sample data uh if you'd rather

00:28:35,279 --> 00:28:37,919
do a more

00:28:36,000 --> 00:28:40,320
of an installation process it's quite

00:28:37,919 --> 00:28:41,440
simple to set up on a tomcat container

00:28:40,320 --> 00:28:44,559
or you can run it

00:28:41,440 --> 00:28:46,080
as a simple uber jar database creation

00:28:44,559 --> 00:28:48,320
is pretty straightforward we just use

00:28:46,080 --> 00:28:50,480
liquid base

00:28:48,320 --> 00:28:52,399
and if you want sample data there are

00:28:50,480 --> 00:28:53,919
some sample data generators available in

00:28:52,399 --> 00:28:56,000
the source code

00:28:53,919 --> 00:28:58,480
it's all documented up on github look

00:28:56,000 --> 00:29:02,159
inside the docs folder uh reach out

00:28:58,480 --> 00:29:06,399
if you need some help um we support

00:29:02,159 --> 00:29:06,399
sql server postgres and mariadb

00:29:07,200 --> 00:29:10,720
those are the main three that we support

00:29:09,520 --> 00:29:13,279
uh let us know

00:29:10,720 --> 00:29:15,200
if there's anything you would like us to

00:29:13,279 --> 00:29:16,960
support we can certainly investigate to

00:29:15,200 --> 00:29:19,279
see how hard it would be to

00:29:16,960 --> 00:29:21,600
add support for other databases

00:29:19,279 --> 00:29:24,480
relatively database agnostic

00:29:21,600 --> 00:29:26,320
um finally on getting started it's worth

00:29:24,480 --> 00:29:28,960
pointing out we have a blog

00:29:26,320 --> 00:29:30,399
uh the blog has a couple of articles on

00:29:28,960 --> 00:29:31,840
how to get started in quite a few

00:29:30,399 --> 00:29:35,520
screencasts

00:29:31,840 --> 00:29:36,799
uh basically aimed at both uh users of

00:29:35,520 --> 00:29:41,120
waltz administrators

00:29:36,799 --> 00:29:42,320
and developers uh which brings us to

00:29:41,120 --> 00:29:43,679
contributing

00:29:42,320 --> 00:29:46,159
so should you wish to make a

00:29:43,679 --> 00:29:50,399
contribution then you would be delighted

00:29:46,159 --> 00:29:52,080
um reach out to us via the github

00:29:50,399 --> 00:29:53,520
issues probably best or contact us

00:29:52,080 --> 00:29:54,960
directly

00:29:53,520 --> 00:29:58,399
there's some good first issues that

00:29:54,960 --> 00:30:01,679
we've tagged in the github issues

00:29:58,399 --> 00:30:03,840
repository uh and again we'll be

00:30:01,679 --> 00:30:05,919
more than happy to help out uh there's

00:30:03,840 --> 00:30:09,120
some getting started tutorials

00:30:05,919 --> 00:30:11,440
uh on our github uh blog so

00:30:09,120 --> 00:30:13,200
on our finnos blog uh and some

00:30:11,440 --> 00:30:15,760
screencasts to help you uh

00:30:13,200 --> 00:30:17,279
take your first steps in contributing to

00:30:15,760 --> 00:30:19,840
waltz

00:30:17,279 --> 00:30:21,039
okay that wraps everything up um thanks

00:30:19,840 --> 00:30:22,880
very much for your time

00:30:21,039 --> 00:30:24,720
and we hope you've enjoyed the

00:30:22,880 --> 00:30:26,880
presentation

00:30:24,720 --> 00:30:35,600
and look forward to hearing from you

00:30:26,880 --> 00:30:35,600

YouTube URL: https://www.youtube.com/watch?v=fVPKOFsC9Gs


