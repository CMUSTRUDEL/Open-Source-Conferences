Title: Riko Eksteen | FINOS | OSSF 2020: Building an FDC3 enabled web application
Publication date: 2020-12-22
Playlist: FINOS Open Source Strategy Forum 2020
Description: 
	Riko Eksteen | FINOS | OSSF 2020: Building an FDC3 enabled web application  | FINOS OSSF 2020

Riko Eksteen, Head of Desktop Strategy, Adaptive Financial Consulting

Building an FDC3 enabled web application - OSSF 2020

The FDC3 1.1 standard was released in April of 2020, and more and more vendors and organisations are supporting the standards. During this talk, Riko will explain the benefits of an FDC3 1.1-enabled web application, what features are available to use, and walk the audience through a practical example of building such an application. The talk will demonstrate the tooling and libraries available for FDC3 applications, how to engage with the community, and how workflow-driven design is important for successful application interoperability projects.

Riko Eksteen's BIO

Riko Eksteen is the Head of Desktop Strategy at Adaptive Financial Consulting. An active member of the FINOS Community, Riko has nearly 15 years of experience in technology and financial services with knowledge and skills spanning multiple technologies, front- and back-end systems, and everything in between (a true all-rounder). Riko loves to champion the power of interoperability – making systems "speak the same language" – to help support the vision of digital transformation. In advising clients on desktop strategy, Riko enjoys bringing the dream of interoperability to life by creating user workflows that flow seamlessly between multiple applications in order to improve customer experience, increase cross selling, and deliver more meaningful data to support process improvement. In the past two years Riko has been a significant contributor to the FDC3 Program and Standards, bringing his industry insights, technical expertise and diplomatic style to discussions and contributions. He played a key role in the 1.0 and 1.1 releases of the FDC3 standards, and co-chairs the FDC3 project. In his spare time he loves to teach and play modern board games, which is really just another excuse to get everyone together around a table!

-=-=-=-=-

This video is from the FINOS / Linux Foundation Open Source Strategy Forum (OSSF) Virtual 2020. 

►►For free access to all 2020 videos from the conference - please register HERE: https://events.linuxfoundation.org/open-source-strategy-forum/register/
 
►► More information HERE: https://events.linuxfoundation.org/open-source-strategy-forum/
►► 2020 Schedule HERE: https://events.linuxfoundation.org/open-source-strategy-forum/program/schedule/

Learn more about FINOS and how we deliver the power of open source to financial services:
►► FINOS: https://www.finos.org/
Captions: 
	00:00:08,960 --> 00:00:12,320
hello everyone i'm really happy to be

00:00:11,200 --> 00:00:15,360
with you today

00:00:12,320 --> 00:00:16,400
my name is rico ecstin and today we're

00:00:15,360 --> 00:00:21,199
going to talk about

00:00:16,400 --> 00:00:23,199
building ftc3 enabled web applications

00:00:21,199 --> 00:00:24,720
uh about a year ago round about this

00:00:23,199 --> 00:00:27,920
time

00:00:24,720 --> 00:00:29,199
i was up on stage off broadway new york

00:00:27,920 --> 00:00:33,360
at ossf

00:00:29,199 --> 00:00:36,160
2019 it was very exciting

00:00:33,360 --> 00:00:37,920
this year things are a bit different i'm

00:00:36,160 --> 00:00:41,840
doing this talk virtually

00:00:37,920 --> 00:00:43,920
but in in some ways i am

00:00:41,840 --> 00:00:45,760
even more excited about the talk this

00:00:43,920 --> 00:00:49,039
year because

00:00:45,760 --> 00:00:52,719
what i want to do today is make fdc3 uh

00:00:49,039 --> 00:00:54,960
really practical for people in terms of

00:00:52,719 --> 00:00:59,840
a set of steps that you can use

00:00:54,960 --> 00:00:59,840
to build real ftc iii workflows

00:01:00,160 --> 00:01:04,159
so yeah what are we going to talk about

00:01:02,960 --> 00:01:07,600
today um

00:01:04,159 --> 00:01:10,000
first uh a short introduction to myself

00:01:07,600 --> 00:01:12,000
um and then we're gonna just briefly

00:01:10,000 --> 00:01:13,600
talk about why ftc3

00:01:12,000 --> 00:01:16,479
you know why should you be interested in

00:01:13,600 --> 00:01:19,840
ftc 3 why are we using it

00:01:16,479 --> 00:01:22,400
and then just a quick recap about

00:01:19,840 --> 00:01:24,320
what ftc 3 is for people who are not

00:01:22,400 --> 00:01:26,880
that familiar with it

00:01:24,320 --> 00:01:27,920
and then i'm going to show you uh in

00:01:26,880 --> 00:01:32,479
five steps

00:01:27,920 --> 00:01:35,119
how you can build an ftc3 workflow

00:01:32,479 --> 00:01:36,000
then i'll um say something about fdc3 in

00:01:35,119 --> 00:01:38,640
practice

00:01:36,000 --> 00:01:41,280
uh in the out in the real world and and

00:01:38,640 --> 00:01:44,000
how people are using it today

00:01:41,280 --> 00:01:45,520
and lastly um you know there will be

00:01:44,000 --> 00:01:47,280
some time for questions

00:01:45,520 --> 00:01:51,040
and i'll share my contact details with

00:01:47,280 --> 00:01:51,040
you um in case you want to get in touch

00:01:52,000 --> 00:01:57,360
so a little bit about me i started out

00:01:55,280 --> 00:02:02,560
as a software developer in cape town

00:01:57,360 --> 00:02:04,159
um almost 18 years ago and

00:02:02,560 --> 00:02:06,320
i've been working in the financial

00:02:04,159 --> 00:02:09,520
industry in london for

00:02:06,320 --> 00:02:12,959
more than 15 years i started out

00:02:09,520 --> 00:02:17,840
doing everything from delphi and asp

00:02:12,959 --> 00:02:21,200
through to wpf and flash

00:02:17,840 --> 00:02:24,319
and nowadays i do html5 and

00:02:21,200 --> 00:02:25,040
and react you know but i've also done

00:02:24,319 --> 00:02:28,080
devops

00:02:25,040 --> 00:02:29,760
and back-end services um a whole lot of

00:02:28,080 --> 00:02:32,720
different things

00:02:29,760 --> 00:02:34,319
at adaptive financial consulting i'm the

00:02:32,720 --> 00:02:36,160
head of desktop strategy

00:02:34,319 --> 00:02:37,840
and what that means is that i've worked

00:02:36,160 --> 00:02:40,720
on several industry

00:02:37,840 --> 00:02:41,519
leading desktop platforms over the years

00:02:40,720 --> 00:02:43,840
and i

00:02:41,519 --> 00:02:45,440
advise clients on what desktop

00:02:43,840 --> 00:02:48,480
technologies to use

00:02:45,440 --> 00:02:51,840
um how to build collaborative workflows

00:02:48,480 --> 00:02:51,840
and and really how to

00:02:52,239 --> 00:02:57,200
put in place digital transformation uh

00:02:55,040 --> 00:03:00,000
in their organizations when it comes to

00:02:57,200 --> 00:03:02,560
their financial desktops

00:03:00,000 --> 00:03:04,080
um at fenos it's my great privilege to

00:03:02,560 --> 00:03:07,440
be the co-chair of the ftc

00:03:04,080 --> 00:03:09,680
3 project and i am an active finance

00:03:07,440 --> 00:03:13,200
contributor you'll see a pull request

00:03:09,680 --> 00:03:17,680
from me every now and then

00:03:13,200 --> 00:03:20,800
but enough about me why fdc3

00:03:17,680 --> 00:03:24,480
why are we here today talking about it

00:03:20,800 --> 00:03:26,480
well what's interesting is that

00:03:24,480 --> 00:03:29,200
you know for a long time we've kind of

00:03:26,480 --> 00:03:31,760
been building um front-end systems this

00:03:29,200 --> 00:03:35,440
way you have a bunch of microservices

00:03:31,760 --> 00:03:37,120
and then you have a big monolithic

00:03:35,440 --> 00:03:38,799
application that aggregates all of those

00:03:37,120 --> 00:03:41,519
services together

00:03:38,799 --> 00:03:42,879
and displays a single front-end to the

00:03:41,519 --> 00:03:44,840
user

00:03:42,879 --> 00:03:46,080
that might be a single-page web

00:03:44,840 --> 00:03:49,760
application uh

00:03:46,080 --> 00:03:52,959
and it might be a rich wpf

00:03:49,760 --> 00:03:55,200
application on the desktop

00:03:52,959 --> 00:03:56,000
and this approach has um you know some

00:03:55,200 --> 00:03:59,040
advantages

00:03:56,000 --> 00:04:02,400
there's a single code base um it's often

00:03:59,040 --> 00:04:04,400
easier to to deploy that way um but it

00:04:02,400 --> 00:04:07,120
also becomes unwieldy over time

00:04:04,400 --> 00:04:08,319
and and it's sometimes difficult for um

00:04:07,120 --> 00:04:11,680
lots of people to

00:04:08,319 --> 00:04:14,959
work on this single application together

00:04:11,680 --> 00:04:15,599
so uh you know what we've seen over the

00:04:14,959 --> 00:04:18,560
last

00:04:15,599 --> 00:04:19,359
um two years or so maybe even a bit

00:04:18,560 --> 00:04:21,280
longer than that

00:04:19,359 --> 00:04:22,720
um in the financial industry is that

00:04:21,280 --> 00:04:26,800
people have started doing

00:04:22,720 --> 00:04:30,560
this type of thing where you

00:04:26,800 --> 00:04:33,680
break things up into uh smaller pieces

00:04:30,560 --> 00:04:36,199
and you have individual micro front ends

00:04:33,680 --> 00:04:38,639
running on the desktop you kind of

00:04:36,199 --> 00:04:39,600
componentize your desktop into smaller

00:04:38,639 --> 00:04:41,840
pieces

00:04:39,600 --> 00:04:44,479
much like you do with microservices on

00:04:41,840 --> 00:04:44,479
the back end

00:04:45,040 --> 00:04:48,320
and the interesting thing to me about

00:04:47,360 --> 00:04:51,199
this approach

00:04:48,320 --> 00:04:53,280
is uh you know even if you think about

00:04:51,199 --> 00:04:57,680
the microservices on the back end

00:04:53,280 --> 00:04:58,639
is that just putting the components in

00:04:57,680 --> 00:05:00,960
place

00:04:58,639 --> 00:05:01,759
whether it's on the desktop or on the

00:05:00,960 --> 00:05:06,000
back end

00:05:01,759 --> 00:05:08,960
um it's not necessarily enough by itself

00:05:06,000 --> 00:05:10,560
you need a way to orchestrate these

00:05:08,960 --> 00:05:14,080
components together

00:05:10,560 --> 00:05:16,720
you need a way to to discover them

00:05:14,080 --> 00:05:18,880
to make it easier to deploy them you

00:05:16,720 --> 00:05:20,880
need to establish patterns for them

00:05:18,880 --> 00:05:23,039
to communicate and collaborate with one

00:05:20,880 --> 00:05:26,320
another

00:05:23,039 --> 00:05:28,240
on the back end uh you know

00:05:26,320 --> 00:05:30,080
kubernetes is an example of an

00:05:28,240 --> 00:05:31,520
orchestrator that people often use

00:05:30,080 --> 00:05:36,080
nowadays to

00:05:31,520 --> 00:05:38,400
um to manage their microservices

00:05:36,080 --> 00:05:39,520
and really the same thing is true of the

00:05:38,400 --> 00:05:42,800
front end

00:05:39,520 --> 00:05:44,960
uh you need an orchestrator to help you

00:05:42,800 --> 00:05:48,000
with the micro front ends that you want

00:05:44,960 --> 00:05:50,000
to deploy to desktops uh

00:05:48,000 --> 00:05:53,039
there are a lot of vendors that operate

00:05:50,000 --> 00:05:55,280
in the space that offer products

00:05:53,039 --> 00:05:56,240
that make it easier to deploy micro

00:05:55,280 --> 00:05:58,240
front ends

00:05:56,240 --> 00:05:59,600
for example in web containers running on

00:05:58,240 --> 00:06:01,759
the desktop

00:05:59,600 --> 00:06:05,039
they also help with things like like

00:06:01,759 --> 00:06:08,319
window management ease of deployment

00:06:05,039 --> 00:06:11,280
registering applications etc

00:06:08,319 --> 00:06:13,440
and this is really the space that ftc 3

00:06:11,280 --> 00:06:15,600
is targeted at

00:06:13,440 --> 00:06:17,280
it is an attempt to standardize the

00:06:15,600 --> 00:06:20,400
patterns that we use

00:06:17,280 --> 00:06:23,560
on desktops for

00:06:20,400 --> 00:06:26,880
um orchestrating uh

00:06:23,560 --> 00:06:28,479
microfrontends and uh

00:06:26,880 --> 00:06:30,240
it's particularly important in the

00:06:28,479 --> 00:06:32,000
financial industry because people have

00:06:30,240 --> 00:06:33,520
multiple monitors they're using

00:06:32,000 --> 00:06:35,680
applications from

00:06:33,520 --> 00:06:37,120
third parties multiple departments

00:06:35,680 --> 00:06:38,639
internally

00:06:37,120 --> 00:06:40,400
people want to do windowing and

00:06:38,639 --> 00:06:42,240
workspaces and all of these type of

00:06:40,400 --> 00:06:46,479
things

00:06:42,240 --> 00:06:50,080
so in ftc 3 there's a concept of a

00:06:46,479 --> 00:06:52,160
a desktop agent which is

00:06:50,080 --> 00:06:54,000
really a standardized way a standard

00:06:52,160 --> 00:06:58,080
context for managing

00:06:54,000 --> 00:06:58,080
front-end widgets or components

00:06:58,160 --> 00:07:04,560
and the true power of

00:07:01,639 --> 00:07:07,840
componentization comes

00:07:04,560 --> 00:07:11,120
when components don't work in isolation

00:07:07,840 --> 00:07:13,520
but when you can connect them together

00:07:11,120 --> 00:07:15,280
which is one of the most important parts

00:07:13,520 --> 00:07:19,560
of ftc3 is that it

00:07:15,280 --> 00:07:22,160
offers a way to a standard way for

00:07:19,560 --> 00:07:23,120
interoperability between components on

00:07:22,160 --> 00:07:25,520
the desktop

00:07:23,120 --> 00:07:26,880
and while the analogy isn't perfect i

00:07:25,520 --> 00:07:29,639
sometimes think of it

00:07:26,880 --> 00:07:31,440
as the equivalent of rest for

00:07:29,639 --> 00:07:33,199
microservices

00:07:31,440 --> 00:07:36,080
which is a way to pull microservices

00:07:33,199 --> 00:07:37,680
together ftc3 provides a standard way to

00:07:36,080 --> 00:07:41,759
do that

00:07:37,680 --> 00:07:41,759
when you're orchestrating on the desktop

00:07:41,919 --> 00:07:46,720
so why do we want to componentize

00:07:44,560 --> 00:07:48,800
components this way and compose them

00:07:46,720 --> 00:07:50,319
together this way

00:07:48,800 --> 00:07:52,080
well it has several benefits for

00:07:50,319 --> 00:07:53,680
organizations and and really they're

00:07:52,080 --> 00:07:55,759
analogous with some of the benefits you

00:07:53,680 --> 00:07:58,560
get from microservices

00:07:55,759 --> 00:08:00,800
one of them is that you can you can

00:07:58,560 --> 00:08:02,879
reduce costs this way

00:08:00,800 --> 00:08:04,000
you can work on particular desktop

00:08:02,879 --> 00:08:07,360
components

00:08:04,000 --> 00:08:08,479
independently which means that different

00:08:07,360 --> 00:08:11,520
teams can

00:08:08,479 --> 00:08:14,160
build different components in parallel

00:08:11,520 --> 00:08:15,759
you can release them independently they

00:08:14,160 --> 00:08:19,199
can be decoupled

00:08:15,759 --> 00:08:20,960
um you know which means that everything

00:08:19,199 --> 00:08:21,680
doesn't have to be necessarily on the

00:08:20,960 --> 00:08:24,160
same

00:08:21,680 --> 00:08:26,160
timeline and and you remove this new

00:08:24,160 --> 00:08:28,560
sort of big bang releases of a big

00:08:26,160 --> 00:08:31,199
monolithic ui

00:08:28,560 --> 00:08:32,719
you can use different technologies for

00:08:31,199 --> 00:08:34,479
different components and they can still

00:08:32,719 --> 00:08:37,360
all work together

00:08:34,479 --> 00:08:39,039
so we can just be much more efficient

00:08:37,360 --> 00:08:42,240
about how we build

00:08:39,039 --> 00:08:42,240
front-end components

00:08:43,039 --> 00:08:47,440
similarly we can unlock new

00:08:45,560 --> 00:08:50,000
opportunities

00:08:47,440 --> 00:08:51,040
we can pull together applications that

00:08:50,000 --> 00:08:54,000
were previously

00:08:51,040 --> 00:08:54,640
not able to pull together because they

00:08:54,000 --> 00:08:57,120
are built

00:08:54,640 --> 00:08:58,959
in different departments they're

00:08:57,120 --> 00:09:01,040
completely isolated from one another

00:08:58,959 --> 00:09:05,360
there's no way for them to interact

00:09:01,040 --> 00:09:07,600
with these type of patterns we can

00:09:05,360 --> 00:09:09,120
create new opportunities new user

00:09:07,600 --> 00:09:13,440
workflows by

00:09:09,120 --> 00:09:15,920
by connecting previously isolated pieces

00:09:13,440 --> 00:09:17,519
it also offers a path to migration for

00:09:15,920 --> 00:09:19,600
those

00:09:17,519 --> 00:09:21,279
big legacy applications which are so

00:09:19,600 --> 00:09:22,000
hard to make migrate because you can

00:09:21,279 --> 00:09:24,399
start to break

00:09:22,000 --> 00:09:26,560
things apart into smaller components

00:09:24,399 --> 00:09:29,680
still keep the workflows in place

00:09:26,560 --> 00:09:33,279
and migrate them bit by bit or just

00:09:29,680 --> 00:09:33,920
the bits that make sense we can even

00:09:33,279 --> 00:09:36,080
have

00:09:33,920 --> 00:09:37,760
new opportunities in the industry across

00:09:36,080 --> 00:09:40,959
organizations for

00:09:37,760 --> 00:09:44,480
various vendor products

00:09:40,959 --> 00:09:48,959
third party systems stps to

00:09:44,480 --> 00:09:52,560
all work together

00:09:48,959 --> 00:09:54,560
and finally we can uh start to leverage

00:09:52,560 --> 00:09:57,519
network effects on our desktops

00:09:54,560 --> 00:09:59,760
my talk my talk at ossf last year was um

00:09:57,519 --> 00:10:01,760
about leveraging the network effect so

00:09:59,760 --> 00:10:04,800
uh if you're interested in this please

00:10:01,760 --> 00:10:08,000
go and look up that talk on youtube

00:10:04,800 --> 00:10:11,519
you can you can find it there

00:10:08,000 --> 00:10:15,200
and really all of that this is about is

00:10:11,519 --> 00:10:16,880
putting more nodes into place connecting

00:10:15,200 --> 00:10:19,440
making more connections between those

00:10:16,880 --> 00:10:23,360
nodes and you start to reach a

00:10:19,440 --> 00:10:26,399
critical mass where you start seeing

00:10:23,360 --> 00:10:28,480
in the exponential value from

00:10:26,399 --> 00:10:30,720
putting more pieces in place in your

00:10:28,480 --> 00:10:31,360
network and this effect is behind a lot

00:10:30,720 --> 00:10:35,279
of

00:10:31,360 --> 00:10:37,040
transformative movements in technology

00:10:35,279 --> 00:10:38,880
so we really want to create an

00:10:37,040 --> 00:10:42,079
environment where we can

00:10:38,880 --> 00:10:46,640
start leveraging that effect

00:10:42,079 --> 00:10:50,399
when we work with smaller components

00:10:46,640 --> 00:10:52,240
so what is ftc3 well

00:10:50,399 --> 00:10:53,839
it stands for the financial desktop

00:10:52,240 --> 00:10:55,120
connectivity and collaboration

00:10:53,839 --> 00:10:58,240
consortium

00:10:55,120 --> 00:10:59,040
and it was started by open fin in 2017

00:10:58,240 --> 00:11:01,760
and then

00:10:59,040 --> 00:11:02,800
i contributed to the fintech open source

00:11:01,760 --> 00:11:06,240
foundation

00:11:02,800 --> 00:11:08,640
phenos and fdc3

00:11:06,240 --> 00:11:11,440
aims to establish open standards for the

00:11:08,640 --> 00:11:15,200
financial desktop

00:11:11,440 --> 00:11:18,480
the 1.0 specifications were released

00:11:15,200 --> 00:11:20,880
last year and adopted

00:11:18,480 --> 00:11:21,600
by quite a few organizations in april of

00:11:20,880 --> 00:11:24,720
this year we

00:11:21,600 --> 00:11:28,000
released the 1.1 specifications and

00:11:24,720 --> 00:11:30,880
the ftc 3 standards working group is

00:11:28,000 --> 00:11:32,320
actively working on the 1.2 version at

00:11:30,880 --> 00:11:36,399
the moment

00:11:32,320 --> 00:11:38,480
we have a web portal at ftc3.fenos.org

00:11:36,399 --> 00:11:40,079
where we've tried really hard to make it

00:11:38,480 --> 00:11:43,040
easy for people to

00:11:40,079 --> 00:11:44,560
understand ftc3 understand the patterns

00:11:43,040 --> 00:11:46,959
there's usage examples

00:11:44,560 --> 00:11:48,240
api references um and other

00:11:46,959 --> 00:11:51,200
documentation

00:11:48,240 --> 00:11:53,040
um please go and have a look and get

00:11:51,200 --> 00:11:55,040
involved in the community

00:11:53,040 --> 00:11:56,480
um it's all open source on github so

00:11:55,040 --> 00:11:58,959
everybody

00:11:56,480 --> 00:12:01,519
can can do pull requests contribute

00:11:58,959 --> 00:12:04,800
raise issues etc

00:12:01,519 --> 00:12:06,079
very recently we've been able to publish

00:12:04,800 --> 00:12:09,360
an npm package

00:12:06,079 --> 00:12:11,760
for ftc 3 which is something

00:12:09,360 --> 00:12:12,720
we've wanted to do for a long time and

00:12:11,760 --> 00:12:14,560
for those

00:12:12,720 --> 00:12:15,839
ftc 3 applications using web

00:12:14,560 --> 00:12:18,160
technologies

00:12:15,839 --> 00:12:19,519
this offers a great entry point and

00:12:18,160 --> 00:12:22,880
standardization

00:12:19,519 --> 00:12:26,240
of the types and operations you can use

00:12:22,880 --> 00:12:28,880
in an ftc3 desktop context

00:12:26,240 --> 00:12:30,079
so we're quite excited to be able to

00:12:28,880 --> 00:12:33,279
offer that to people

00:12:30,079 --> 00:12:33,279
please go and check it out

00:12:35,120 --> 00:12:41,200
fdc3 is is made up out of um

00:12:39,120 --> 00:12:42,399
four specifications really in the

00:12:41,200 --> 00:12:45,040
standard

00:12:42,399 --> 00:12:46,320
and the first one is the upper directory

00:12:45,040 --> 00:12:48,880
uh specification

00:12:46,320 --> 00:12:50,519
which just offers a shared way to

00:12:48,880 --> 00:12:54,320
register and discover

00:12:50,519 --> 00:12:57,519
applications the second specification

00:12:54,320 --> 00:12:59,120
is the intense specification

00:12:57,519 --> 00:13:00,639
if you've done android development in

00:12:59,120 --> 00:13:03,279
the past you might have come

00:13:00,639 --> 00:13:04,720
across intense the concept of intents

00:13:03,279 --> 00:13:07,120
and all they really are

00:13:04,720 --> 00:13:09,519
um are well-known verbs that you can

00:13:07,120 --> 00:13:12,720
invoke or reference

00:13:09,519 --> 00:13:18,000
so for example an application might

00:13:12,720 --> 00:13:20,720
raise the star chat intent or the

00:13:18,000 --> 00:13:21,680
view chart intent and these intents are

00:13:20,720 --> 00:13:24,959
examples of

00:13:21,680 --> 00:13:28,240
standard public ftc 3 intents

00:13:24,959 --> 00:13:29,680
so their well-known applications can use

00:13:28,240 --> 00:13:32,320
them

00:13:29,680 --> 00:13:33,360
and another application will then be

00:13:32,320 --> 00:13:35,680
launched to

00:13:33,360 --> 00:13:37,279
respond to that intent with the idea

00:13:35,680 --> 00:13:38,240
that the applications don't need to know

00:13:37,279 --> 00:13:42,079
about each other

00:13:38,240 --> 00:13:42,079
they just need to know about the intent

00:13:42,320 --> 00:13:48,560
and what goes closely in hand with this

00:13:45,920 --> 00:13:50,320
is the data that you exchange as part of

00:13:48,560 --> 00:13:52,720
the intent being raised

00:13:50,320 --> 00:13:54,320
so uh you know if it's a star chat

00:13:52,720 --> 00:13:55,360
intent some information about the

00:13:54,320 --> 00:13:59,120
contact

00:13:55,360 --> 00:14:02,240
uh that you want to chat to if it's a

00:13:59,120 --> 00:14:04,000
view chart intent you might want to send

00:14:02,240 --> 00:14:06,480
the instrument information that you want

00:14:04,000 --> 00:14:09,760
to view the chart for

00:14:06,480 --> 00:14:12,959
so ftc provides a standard envelope for

00:14:09,760 --> 00:14:15,760
exchanging contextual data

00:14:12,959 --> 00:14:17,120
and it also includes some standardized

00:14:15,760 --> 00:14:19,040
contacts for things like

00:14:17,120 --> 00:14:20,399
instruments and contacts that people can

00:14:19,040 --> 00:14:24,639
use

00:14:20,399 --> 00:14:26,959
and finally there's a shared set of

00:14:24,639 --> 00:14:28,000
deliberately small and lightweight

00:14:26,959 --> 00:14:30,160
operations

00:14:28,000 --> 00:14:31,839
that applications can use to collaborate

00:14:30,160 --> 00:14:34,959
with ftc3

00:14:31,839 --> 00:14:36,959
and ftc 3 is agnostic of which

00:14:34,959 --> 00:14:38,240
desktop environment or which technology

00:14:36,959 --> 00:14:41,279
it's running in

00:14:38,240 --> 00:14:41,279
a lot of people use

00:14:41,360 --> 00:14:45,760
web technology to to write desktop

00:14:43,680 --> 00:14:47,839
applications at the moment so

00:14:45,760 --> 00:14:49,440
that's where we see it use most common

00:14:47,839 --> 00:14:51,519
but you can also use

00:14:49,440 --> 00:14:54,240
the apis and the other specifications

00:14:51,519 --> 00:14:57,279
with for example.net applications

00:14:54,240 --> 00:14:57,279
running on the desktop

00:14:57,760 --> 00:15:02,320
so that's ftc3 um let's let's try and

00:15:00,639 --> 00:15:05,920
make things practical now

00:15:02,320 --> 00:15:08,800
um so what i want to do today is

00:15:05,920 --> 00:15:09,440
share just five steps with you that you

00:15:08,800 --> 00:15:12,399
can

00:15:09,440 --> 00:15:13,600
follow for building ftc3 enabled web

00:15:12,399 --> 00:15:17,760
applications

00:15:13,600 --> 00:15:20,480
and the key point here is really that

00:15:17,760 --> 00:15:23,040
we are not building a single application

00:15:20,480 --> 00:15:25,519
but we're building a workflow

00:15:23,040 --> 00:15:28,480
when you're doing componentized desktops

00:15:25,519 --> 00:15:31,360
and interoperability on the desktop

00:15:28,480 --> 00:15:34,240
you're really thinking about how

00:15:31,360 --> 00:15:36,639
multiple applications work together

00:15:34,240 --> 00:15:38,399
so you're not designing the behavior and

00:15:36,639 --> 00:15:40,399
the look and feel of a

00:15:38,399 --> 00:15:41,600
single application anymore you you're

00:15:40,399 --> 00:15:43,360
designing the

00:15:41,600 --> 00:15:45,279
collective behavior and look and feel of

00:15:43,360 --> 00:15:49,199
multiple applications

00:15:45,279 --> 00:15:51,920
and um the designing the workflow is an

00:15:49,199 --> 00:15:53,120
important step that that people often

00:15:51,920 --> 00:15:55,040
miss out

00:15:53,120 --> 00:15:56,800
you've got to think carefully about how

00:15:55,040 --> 00:15:59,040
everything is going to interact

00:15:56,800 --> 00:16:02,320
because that informs everything else so

00:15:59,040 --> 00:16:04,560
we're going to start off by doing that

00:16:02,320 --> 00:16:05,920
then we're going to define the actions

00:16:04,560 --> 00:16:07,120
that the applications are going to use

00:16:05,920 --> 00:16:08,880
to collaborate

00:16:07,120 --> 00:16:10,639
we're going to model the data for those

00:16:08,880 --> 00:16:13,199
actions we're going to register

00:16:10,639 --> 00:16:14,320
the applications with the ftc 3 desktop

00:16:13,199 --> 00:16:17,360
agent

00:16:14,320 --> 00:16:22,720
and finally we're going to use the ftc

00:16:17,360 --> 00:16:26,720
380 apis to make it all come together

00:16:22,720 --> 00:16:30,560
so the workflow i've chosen for today

00:16:26,720 --> 00:16:32,639
is an ftc3 trading app

00:16:30,560 --> 00:16:34,880
with which you can trade fx currency

00:16:32,639 --> 00:16:37,759
pairs so there's some streaming prices

00:16:34,880 --> 00:16:39,360
you can click buy or sell and then it

00:16:37,759 --> 00:16:41,600
will

00:16:39,360 --> 00:16:42,959
say that there's a pending trade for a

00:16:41,600 --> 00:16:46,000
particular notion

00:16:42,959 --> 00:16:49,839
at that price the buttons then become

00:16:46,000 --> 00:16:53,440
disabled while that trade is pending

00:16:49,839 --> 00:16:56,880
will then launch automatically

00:16:53,440 --> 00:16:57,680
dynamically an execution app which will

00:16:56,880 --> 00:17:00,720
receive

00:16:57,680 --> 00:17:03,920
the information about the trade that

00:17:00,720 --> 00:17:06,240
that needs to be done and that trade can

00:17:03,920 --> 00:17:09,199
then be accepted or rejected

00:17:06,240 --> 00:17:10,079
uh which will remove it from the status

00:17:09,199 --> 00:17:13,120
and add it

00:17:10,079 --> 00:17:14,000
to the trade blotter and then it will

00:17:13,120 --> 00:17:16,480
return

00:17:14,000 --> 00:17:17,039
the um the status either accept or

00:17:16,480 --> 00:17:20,240
reject

00:17:17,039 --> 00:17:21,120
for of the trade to the trading

00:17:20,240 --> 00:17:24,880
application

00:17:21,120 --> 00:17:24,880
which will update its status

00:17:25,199 --> 00:17:30,960
so this is a relatively

00:17:28,720 --> 00:17:32,000
contrived example but i wanted to

00:17:30,960 --> 00:17:34,960
simplify things

00:17:32,000 --> 00:17:36,799
down um to something that is nice and

00:17:34,960 --> 00:17:40,640
simple for us to work with

00:17:36,799 --> 00:17:42,320
um in the real world uh the same person

00:17:40,640 --> 00:17:44,080
might not do all of these actions and

00:17:42,320 --> 00:17:48,000
what might not all

00:17:44,080 --> 00:17:50,400
be happening on the same desktop but um

00:17:48,000 --> 00:17:51,520
yeah i think if we if we follow the

00:17:50,400 --> 00:17:54,640
steps that i

00:17:51,520 --> 00:17:54,960
mentioned um for this workflow uh it

00:17:54,640 --> 00:17:57,440
will

00:17:54,960 --> 00:17:58,559
help to illustrate how you can do some

00:17:57,440 --> 00:18:01,840
similar things with

00:17:58,559 --> 00:18:04,799
real workflows

00:18:01,840 --> 00:18:05,360
so now we need to define the actions

00:18:04,799 --> 00:18:08,320
that the

00:18:05,360 --> 00:18:09,760
applications need to collaborate and how

00:18:08,320 --> 00:18:11,600
do we start with that

00:18:09,760 --> 00:18:14,799
well the great thing is we now have a

00:18:11,600 --> 00:18:17,360
workflow so we can use that to help

00:18:14,799 --> 00:18:18,400
inform the actions that need to take

00:18:17,360 --> 00:18:21,760
place

00:18:18,400 --> 00:18:24,880
so the first thing is the trading app

00:18:21,760 --> 00:18:26,160
needs to raise an intent so that the

00:18:24,880 --> 00:18:28,320
execution app

00:18:26,160 --> 00:18:30,000
can come up and respond to that so we're

00:18:28,320 --> 00:18:32,000
going to call that intent

00:18:30,000 --> 00:18:34,000
execute trade we're going to raise and

00:18:32,000 --> 00:18:35,919
execute trade intent

00:18:34,000 --> 00:18:37,200
and that's going to carry along the data

00:18:35,919 --> 00:18:39,200
of the trade that

00:18:37,200 --> 00:18:40,799
needs to be executed so that the other

00:18:39,200 --> 00:18:43,520
application can use it

00:18:40,799 --> 00:18:44,640
and then when the user clicks accept or

00:18:43,520 --> 00:18:48,000
reject

00:18:44,640 --> 00:18:51,760
it needs to return the trade result

00:18:48,000 --> 00:18:51,760
to the original application

00:18:51,840 --> 00:18:59,280
now at the moment in ftc 3 1.1

00:18:55,360 --> 00:19:02,880
intents are sort of one-way

00:18:59,280 --> 00:19:03,840
they don't return data but in ftc 3 1.2

00:19:02,880 --> 00:19:06,960
we're currently

00:19:03,840 --> 00:19:10,080
working on intense battery

00:19:06,960 --> 00:19:13,280
return data because this is a

00:19:10,080 --> 00:19:14,559
ftc3 1.1 workflow um i'm going to use a

00:19:13,280 --> 00:19:18,880
different mechanism from

00:19:14,559 --> 00:19:21,360
from ftc through fdc3 to return the data

00:19:18,880 --> 00:19:22,640
um and this is called channels or

00:19:21,360 --> 00:19:26,240
broadcasting

00:19:22,640 --> 00:19:26,960
so we can create um what's called an app

00:19:26,240 --> 00:19:28,799
channel

00:19:26,960 --> 00:19:30,480
which is a a channel that both

00:19:28,799 --> 00:19:33,520
applications know about

00:19:30,480 --> 00:19:37,679
um and we can return the trade result

00:19:33,520 --> 00:19:39,919
via that channel and this is also serves

00:19:37,679 --> 00:19:43,600
to show off a bit more about the

00:19:39,919 --> 00:19:45,360
available ftc 3 apis

00:19:43,600 --> 00:19:47,360
so we know that the two actions we're

00:19:45,360 --> 00:19:49,440
going to need are to raise an intent and

00:19:47,360 --> 00:19:51,919
to broadcast on a channel

00:19:49,440 --> 00:19:54,080
and for each of these actions we

00:19:51,919 --> 00:19:56,080
basically need an identifier

00:19:54,080 --> 00:19:58,080
so in the case of raising an intent

00:19:56,080 --> 00:19:58,880
we've already said this is the execute

00:19:58,080 --> 00:20:02,080
trade

00:19:58,880 --> 00:20:05,280
intent that we're going to define

00:20:02,080 --> 00:20:06,320
and along with that intent we need to

00:20:05,280 --> 00:20:08,960
define the

00:20:06,320 --> 00:20:10,480
data that will come with it and how that

00:20:08,960 --> 00:20:12,320
payload looks and we're going to call

00:20:10,480 --> 00:20:15,440
that a trade request

00:20:12,320 --> 00:20:18,000
so for the raise intent action

00:20:15,440 --> 00:20:20,000
the identify and the data is really the

00:20:18,000 --> 00:20:21,600
only two things that both applications

00:20:20,000 --> 00:20:23,600
need to know about they don't need to

00:20:21,600 --> 00:20:26,480
know about

00:20:23,600 --> 00:20:30,240
anything else or about each other but

00:20:26,480 --> 00:20:30,240
these are the two pieces of shared

00:20:30,640 --> 00:20:37,120
and agreed data or identifiers

00:20:34,320 --> 00:20:39,600
that the collaboration is going to be

00:20:37,120 --> 00:20:39,600
based on

00:20:39,840 --> 00:20:45,360
for the broadcast on the channel

00:20:43,039 --> 00:20:47,200
we need to agree what to call the

00:20:45,360 --> 00:20:48,559
channel so that both applications can

00:20:47,200 --> 00:20:50,159
reference it so we're going to call it

00:20:48,559 --> 00:20:53,120
the trade result channel

00:20:50,159 --> 00:20:53,600
that's going to be its identifier and we

00:20:53,120 --> 00:20:56,000
need to

00:20:53,600 --> 00:20:57,840
model a trade result that can be

00:20:56,000 --> 00:21:00,320
exchanged on that channel

00:20:57,840 --> 00:21:02,799
so for the two actions these are the

00:21:00,320 --> 00:21:05,760
four pieces of

00:21:02,799 --> 00:21:06,080
data that are the minimum that we need

00:21:05,760 --> 00:21:08,559
to

00:21:06,080 --> 00:21:10,960
to couple and connect this workflow

00:21:08,559 --> 00:21:10,960
together

00:21:12,159 --> 00:21:17,760
right so how do we model a trade request

00:21:15,039 --> 00:21:20,880
now that we know we need it

00:21:17,760 --> 00:21:22,320
so in ftc 3 we've adopted json schema to

00:21:20,880 --> 00:21:26,480
help model data

00:21:22,320 --> 00:21:28,720
and some of the existing ftc 3

00:21:26,480 --> 00:21:31,200
data types are modeled with json schema

00:21:28,720 --> 00:21:33,600
it's not the only way to do it

00:21:31,200 --> 00:21:34,320
but like i've come to kind of like json

00:21:33,600 --> 00:21:36,559
schema

00:21:34,320 --> 00:21:38,480
i find it intuitive and logical once you

00:21:36,559 --> 00:21:40,159
understand how it works

00:21:38,480 --> 00:21:42,080
and i'm going to try and show you today

00:21:40,159 --> 00:21:45,280
how you can use it to

00:21:42,080 --> 00:21:47,120
model the trade request so

00:21:45,280 --> 00:21:49,120
to start off with you need to say what

00:21:47,120 --> 00:21:51,440
version of the schema you're using

00:21:49,120 --> 00:21:53,679
um and the identifier of the schema and

00:21:51,440 --> 00:21:55,840
then just that we're

00:21:53,679 --> 00:21:57,520
modeling an object which we're going to

00:21:55,840 --> 00:22:00,320
call trade requests so that's kind of

00:21:57,520 --> 00:22:03,360
the header of the schema

00:22:00,320 --> 00:22:03,919
so this is the first nice thing is we

00:22:03,360 --> 00:22:07,200
can now

00:22:03,919 --> 00:22:07,520
reference existing ftc 3 schemas to help

00:22:07,200 --> 00:22:09,600
us

00:22:07,520 --> 00:22:11,760
in this case what i'm saying is i'm

00:22:09,600 --> 00:22:15,120
going to base my schema on

00:22:11,760 --> 00:22:18,480
the ftc 3 1.1

00:22:15,120 --> 00:22:20,960
base context schema

00:22:18,480 --> 00:22:21,600
so that has the minimum properties that

00:22:20,960 --> 00:22:25,200
an

00:22:21,600 --> 00:22:28,320
fcc3 context type needs to have

00:22:25,200 --> 00:22:31,360
and really all that is in that schema

00:22:28,320 --> 00:22:33,760
is a a type property which is

00:22:31,360 --> 00:22:36,080
needs to be a string which identifies

00:22:33,760 --> 00:22:40,000
the type of data we're exchanging

00:22:36,080 --> 00:22:41,600
so when we are extending that schema

00:22:40,000 --> 00:22:43,039
into a trade request we're going to be a

00:22:41,600 --> 00:22:43,760
bit more specific and we're going to say

00:22:43,039 --> 00:22:45,919
well

00:22:43,760 --> 00:22:47,360
it's not any string anymore we know what

00:22:45,919 --> 00:22:50,640
the type is in this case

00:22:47,360 --> 00:22:51,760
it's an adaptive.trade request and here

00:22:50,640 --> 00:22:54,880
we're using a convention

00:22:51,760 --> 00:22:57,840
in ftc3 which is to prefix

00:22:54,880 --> 00:22:59,760
context types with the organization

00:22:57,840 --> 00:23:03,039
who's defining the type so that

00:22:59,760 --> 00:23:06,840
standardized ftc three schemas um

00:23:03,039 --> 00:23:08,000
use ftc3 dot and then the name of the

00:23:06,840 --> 00:23:09,960
type

00:23:08,000 --> 00:23:12,000
so we're gonna have an

00:23:09,960 --> 00:23:13,200
adaptive.traderequest type on our

00:23:12,000 --> 00:23:16,480
payload

00:23:13,200 --> 00:23:19,039
and then um what ftc3 also has is

00:23:16,480 --> 00:23:19,679
sort of a bag of identifiers for this

00:23:19,039 --> 00:23:23,280
data

00:23:19,679 --> 00:23:25,600
which applications can use to decide if

00:23:23,280 --> 00:23:28,080
the data is relevant to them

00:23:25,600 --> 00:23:31,760
so in our case we are just going to

00:23:28,080 --> 00:23:35,200
require that there's a trade request id

00:23:31,760 --> 00:23:36,799
as as a minimum that's going to be the

00:23:35,200 --> 00:23:39,039
only identifier for this

00:23:36,799 --> 00:23:40,799
um object that we're going to require

00:23:39,039 --> 00:23:43,039
applications can stick other things in

00:23:40,799 --> 00:23:46,320
in that bag if they want to but

00:23:43,039 --> 00:23:48,960
um this is our only requirement

00:23:46,320 --> 00:23:50,799
and then we need to represent the

00:23:48,960 --> 00:23:53,200
instrument that is being traded and

00:23:50,799 --> 00:23:55,120
here is a great example of how we can

00:23:53,200 --> 00:23:58,159
compose more complex types

00:23:55,120 --> 00:24:00,880
from existing ftc 3 context types so

00:23:58,159 --> 00:24:02,080
i'm using the ftc3 1.1 instrument schema

00:24:00,880 --> 00:24:03,360
here and i'm just saying

00:24:02,080 --> 00:24:05,279
we're going to have an instrument

00:24:03,360 --> 00:24:09,039
property which has

00:24:05,279 --> 00:24:09,840
an object which um has the shape of an

00:24:09,039 --> 00:24:12,880
ftc3

00:24:09,840 --> 00:24:15,039
instrument schema then we're going to

00:24:12,880 --> 00:24:16,960
add some additional things like

00:24:15,039 --> 00:24:20,240
is it a buyer a cell what the notional

00:24:16,960 --> 00:24:23,039
is what the price is

00:24:20,240 --> 00:24:25,440
and if i want to i can also use some

00:24:23,039 --> 00:24:27,200
other ftc three schemas to represent the

00:24:25,440 --> 00:24:28,000
counterparty or the contact for the

00:24:27,200 --> 00:24:29,840
trade

00:24:28,000 --> 00:24:32,559
i'm not using that in this workflow but

00:24:29,840 --> 00:24:34,880
i just wanted to show

00:24:32,559 --> 00:24:36,000
how you can use composition to build up

00:24:34,880 --> 00:24:39,200
you know complex

00:24:36,000 --> 00:24:40,640
types so for this example they're not

00:24:39,200 --> 00:24:43,440
going to be required

00:24:40,640 --> 00:24:45,600
as part of the data type so i haven't

00:24:43,440 --> 00:24:47,679
included the counterparty or contact

00:24:45,600 --> 00:24:50,159
in the required list of properties but

00:24:47,679 --> 00:24:53,440
they can still be used

00:24:50,159 --> 00:24:55,200
optionally so there's our trade request

00:24:53,440 --> 00:24:58,000
schema

00:24:55,200 --> 00:24:59,600
how would that look in practice well

00:24:58,000 --> 00:25:00,960
there's an example of a trade request

00:24:59,600 --> 00:25:03,760
that adheres to the schema

00:25:00,960 --> 00:25:05,120
so there's the type at the top the

00:25:03,760 --> 00:25:07,600
identifiers which

00:25:05,120 --> 00:25:09,840
includes the trade request id the

00:25:07,600 --> 00:25:12,799
instrument which uses the shape of an

00:25:09,840 --> 00:25:15,120
ftc 3 instrument schema

00:25:12,799 --> 00:25:16,240
and then decide notional price and the

00:25:15,120 --> 00:25:19,279
counterparty

00:25:16,240 --> 00:25:20,960
um just to show how that would look and

00:25:19,279 --> 00:25:23,440
there's our trade request

00:25:20,960 --> 00:25:25,120
um for trade result it's much the same

00:25:23,440 --> 00:25:26,960
thing

00:25:25,120 --> 00:25:29,520
we're gonna have a type which in this

00:25:26,960 --> 00:25:31,600
case is adaptive to a trade result

00:25:29,520 --> 00:25:33,120
we're going to have some identifiers

00:25:31,600 --> 00:25:35,039
let's say in this case we kind of want

00:25:33,120 --> 00:25:36,159
to know both the trade id and the trade

00:25:35,039 --> 00:25:39,440
request id

00:25:36,159 --> 00:25:40,960
for this trade result and now i can

00:25:39,440 --> 00:25:44,400
reuse my trade request

00:25:40,960 --> 00:25:44,799
schema in this trade result schema by

00:25:44,400 --> 00:25:46,480
just

00:25:44,799 --> 00:25:48,000
referencing it so i can say there's

00:25:46,480 --> 00:25:51,840
going to be a trade request

00:25:48,000 --> 00:25:52,720
which is going to have an object that

00:25:51,840 --> 00:25:56,720
appears to the

00:25:52,720 --> 00:25:58,640
trade request schema inside it and i

00:25:56,720 --> 00:26:00,080
might want to add the status which is

00:25:58,640 --> 00:26:03,760
accepted or rejected

00:26:00,080 --> 00:26:07,520
and the timestamp for the trade to that

00:26:03,760 --> 00:26:11,679
so that gives me my trade results schema

00:26:07,520 --> 00:26:14,720
and now we're done modeling the data

00:26:11,679 --> 00:26:16,880
and what i want to show you now

00:26:14,720 --> 00:26:18,320
um is quite a cool little tool that

00:26:16,880 --> 00:26:22,159
we've used in a few

00:26:18,320 --> 00:26:24,799
projects that are ftc3 related

00:26:22,159 --> 00:26:26,080
and this tool is called quick type and

00:26:24,799 --> 00:26:29,200
it can be used

00:26:26,080 --> 00:26:31,279
to to generate code from

00:26:29,200 --> 00:26:33,039
json schema for the types that you want

00:26:31,279 --> 00:26:34,720
to use in applications

00:26:33,039 --> 00:26:37,039
so i'm just going to quickly show that

00:26:34,720 --> 00:26:37,039
to you

00:26:37,279 --> 00:26:40,799
what i've got here is the same trade

00:26:39,279 --> 00:26:44,320
request schema that we've just

00:26:40,799 --> 00:26:46,400
modeled um and by just sticking it into

00:26:44,320 --> 00:26:48,240
quick type it will generate um

00:26:46,400 --> 00:26:53,120
typescript types for me

00:26:48,240 --> 00:26:56,640
and a utility method to uh

00:26:53,120 --> 00:27:00,640
go from and to json payloads

00:26:56,640 --> 00:27:02,720
uh with those types so

00:27:00,640 --> 00:27:04,559
that is quite cool i think um you can

00:27:02,720 --> 00:27:07,919
also do things like

00:27:04,559 --> 00:27:10,559
say that you wanted to verify uh

00:27:07,919 --> 00:27:12,159
it validate it according to the schema

00:27:10,559 --> 00:27:14,240
if you wanted to it will generate all of

00:27:12,159 --> 00:27:17,039
that code for you

00:27:14,240 --> 00:27:19,360
and it really works for just about any

00:27:17,039 --> 00:27:21,840
language that you want to use

00:27:19,360 --> 00:27:23,440
so for example if you want to generate

00:27:21,840 --> 00:27:27,120
the code in java

00:27:23,440 --> 00:27:29,360
it will uh use jackson to and do all of

00:27:27,120 --> 00:27:31,919
the formatters for you to

00:27:29,360 --> 00:27:33,520
serialize and deserialize to and from

00:27:31,919 --> 00:27:37,279
json

00:27:33,520 --> 00:27:40,960
um similarly if you're using c-sharp

00:27:37,279 --> 00:27:42,880
you know it will use json.net to create

00:27:40,960 --> 00:27:44,559
the types with the right attributes for

00:27:42,880 --> 00:27:47,200
you

00:27:44,559 --> 00:27:49,440
and quick type is open source project is

00:27:47,200 --> 00:27:51,440
on github and it is also an npm

00:27:49,440 --> 00:27:52,640
package with a command line tool that

00:27:51,440 --> 00:27:56,799
you can install

00:27:52,640 --> 00:27:59,679
to to use it in your projects um

00:27:56,799 --> 00:28:01,440
so that's quick type it's a nice tool

00:27:59,679 --> 00:28:04,080
when you're doing data modeling to then

00:28:01,440 --> 00:28:05,840
use those types in your code

00:28:04,080 --> 00:28:09,200
and that what that's what we've done in

00:28:05,840 --> 00:28:12,640
this example as well

00:28:09,200 --> 00:28:14,240
so what have we done so far we have

00:28:12,640 --> 00:28:16,640
we've designed the workflow that we're

00:28:14,240 --> 00:28:20,399
going to use we've

00:28:16,640 --> 00:28:22,320
defined the actions for that workflow

00:28:20,399 --> 00:28:25,039
and we've modeled the data that those

00:28:22,320 --> 00:28:27,840
actions are going to use

00:28:25,039 --> 00:28:28,240
now we need to register our applications

00:28:27,840 --> 00:28:32,080
with

00:28:28,240 --> 00:28:33,600
the ftc 3 desktop agent why do we need

00:28:32,080 --> 00:28:36,880
to do that

00:28:33,600 --> 00:28:38,960
well if you think about it what

00:28:36,880 --> 00:28:40,880
what's really happening here is that one

00:28:38,960 --> 00:28:43,279
application is going to

00:28:40,880 --> 00:28:44,000
raise an intent and then the other

00:28:43,279 --> 00:28:48,080
application

00:28:44,000 --> 00:28:50,799
is going to magically appear

00:28:48,080 --> 00:28:51,440
what's happening happening in reality is

00:28:50,799 --> 00:28:54,480
there's

00:28:51,440 --> 00:28:56,240
an ftc3 compliant app directory

00:28:54,480 --> 00:28:58,799
which has a record of all of the

00:28:56,240 --> 00:29:01,520
applications and

00:28:58,799 --> 00:29:03,760
when one applications raises an intent

00:29:01,520 --> 00:29:07,200
the desktop agent is going to

00:29:03,760 --> 00:29:10,399
use the app directory to find

00:29:07,200 --> 00:29:11,120
the right application to raise that will

00:29:10,399 --> 00:29:14,720
accept that

00:29:11,120 --> 00:29:17,760
intent so the app directory

00:29:14,720 --> 00:29:19,279
is uh an open api rest schema so it's

00:29:17,760 --> 00:29:22,399
sitting somewhere in the cloud

00:29:19,279 --> 00:29:24,320
and it will the applications are

00:29:22,399 --> 00:29:26,399
registered with it and the desktop agent

00:29:24,320 --> 00:29:29,760
use it to

00:29:26,399 --> 00:29:32,000
pull the workflows together you know so

00:29:29,760 --> 00:29:33,520
if we've registered our trading app with

00:29:32,000 --> 00:29:36,399
it um it will then

00:29:33,520 --> 00:29:37,279
go and find the right app to meet the

00:29:36,399 --> 00:29:40,399
intent and

00:29:37,279 --> 00:29:42,320
launch it on demand um

00:29:40,399 --> 00:29:43,760
so to make it work what we've got to do

00:29:42,320 --> 00:29:47,279
is we've just got to add

00:29:43,760 --> 00:29:47,840
um a record with the rest api or with

00:29:47,279 --> 00:29:50,640
the ui

00:29:47,840 --> 00:29:52,559
to the app directory uh with the

00:29:50,640 --> 00:29:54,240
identifier for the app the name for the

00:29:52,559 --> 00:29:57,200
app the manifest

00:29:54,240 --> 00:29:58,960
um for example you know it will have

00:29:57,200 --> 00:30:02,799
windowing information

00:29:58,960 --> 00:30:05,120
um etc that is needed to launch the app

00:30:02,799 --> 00:30:06,159
and other properties like icons or

00:30:05,120 --> 00:30:08,960
descriptions

00:30:06,159 --> 00:30:10,880
that you need might need or use for an

00:30:08,960 --> 00:30:13,200
application launcher

00:30:10,880 --> 00:30:15,120
uh but you know those are sort of the

00:30:13,200 --> 00:30:16,799
minimum things you you need to define

00:30:15,120 --> 00:30:19,120
for the app

00:30:16,799 --> 00:30:22,399
and then for the execution app we need a

00:30:19,120 --> 00:30:22,399
little bit more than that

00:30:22,799 --> 00:30:28,080
we need to to tell the

00:30:26,000 --> 00:30:29,600
app directory and the desktop agent

00:30:28,080 --> 00:30:33,200
which intense

00:30:29,600 --> 00:30:37,120
this app responds to so that it

00:30:33,200 --> 00:30:39,360
it knows to launch the app on demand

00:30:37,120 --> 00:30:41,520
so in this case we're going to add

00:30:39,360 --> 00:30:42,080
execute trade intent to the intense

00:30:41,520 --> 00:30:45,120
array

00:30:42,080 --> 00:30:46,159
for this application and we're also

00:30:45,120 --> 00:30:49,600
going to say that

00:30:46,159 --> 00:30:52,960
the contexts that this app

00:30:49,600 --> 00:30:55,440
understands for the execute trade

00:30:52,960 --> 00:30:56,720
intent is the adaptive.trade request

00:30:55,440 --> 00:31:00,000
that we've defined

00:30:56,720 --> 00:31:03,519
i can specify as many contexts as i want

00:31:00,000 --> 00:31:05,519
but the key thing here is that

00:31:03,519 --> 00:31:06,799
the desktop agent can use this

00:31:05,519 --> 00:31:09,440
information to route

00:31:06,799 --> 00:31:11,919
to the right application uh and now you

00:31:09,440 --> 00:31:14,480
also understand why the type property of

00:31:11,919 --> 00:31:15,679
of context data in ftc 3 is the only

00:31:14,480 --> 00:31:18,880
required

00:31:15,679 --> 00:31:21,519
bit because it's used for

00:31:18,880 --> 00:31:23,600
filtering and routing requests between

00:31:21,519 --> 00:31:26,240
applications

00:31:23,600 --> 00:31:28,640
right so doing this we've registered our

00:31:26,240 --> 00:31:30,559
applications with the app directory

00:31:28,640 --> 00:31:33,279
and now the only thing that's left to do

00:31:30,559 --> 00:31:36,320
is to actually write the code

00:31:33,279 --> 00:31:39,360
and use the ftc3 apis to

00:31:36,320 --> 00:31:42,240
put the workflow together so

00:31:39,360 --> 00:31:44,159
that's easier than it might sound

00:31:42,240 --> 00:31:45,519
there's just a few operations we need to

00:31:44,159 --> 00:31:48,880
use

00:31:45,519 --> 00:31:50,960
to start off with we probably

00:31:48,880 --> 00:31:52,399
both applications need a reference to

00:31:50,960 --> 00:31:54,960
this channel that has been

00:31:52,399 --> 00:31:57,919
agreed ahead of time so that the trade

00:31:54,960 --> 00:31:59,840
result can be exchanged

00:31:57,919 --> 00:32:01,440
so having got a reference to that

00:31:59,840 --> 00:32:03,279
channel

00:32:01,440 --> 00:32:05,679
the trading app then wants to add a

00:32:03,279 --> 00:32:07,679
context listener for the adaptive.trade

00:32:05,679 --> 00:32:10,799
result type that we've defined

00:32:07,679 --> 00:32:12,960
um so that it can receive it and

00:32:10,799 --> 00:32:14,799
um so that it can then update the status

00:32:12,960 --> 00:32:15,840
about whether the tray has been accepted

00:32:14,799 --> 00:32:19,279
or rejected

00:32:15,840 --> 00:32:22,720
and it probably wants to to do this

00:32:19,279 --> 00:32:24,559
before it raises the intent because um

00:32:22,720 --> 00:32:26,480
if it does it after raising the intent

00:32:24,559 --> 00:32:28,000
it might miss the trade result while

00:32:26,480 --> 00:32:31,279
it's still setting up the listener so

00:32:28,000 --> 00:32:31,279
we're doing it ahead of time

00:32:32,000 --> 00:32:36,480
then we're going to you know build up

00:32:34,080 --> 00:32:39,840
the trade request according to the

00:32:36,480 --> 00:32:41,919
schema that we've defined and then

00:32:39,840 --> 00:32:43,679
we just raise the intent the execute

00:32:41,919 --> 00:32:45,600
trade intent and we pass it the trade

00:32:43,679 --> 00:32:49,039
request

00:32:45,600 --> 00:32:51,760
that the other application will need

00:32:49,039 --> 00:32:53,200
all that the execution app needs to do

00:32:51,760 --> 00:32:55,200
is

00:32:53,200 --> 00:32:56,960
it needs to set up an intent listener

00:32:55,200 --> 00:32:59,760
for the execute trade intent

00:32:56,960 --> 00:33:00,720
and it will receive the trade request

00:32:59,760 --> 00:33:03,840
and then

00:33:00,720 --> 00:33:06,080
um you know it displays it

00:33:03,840 --> 00:33:08,880
and the user accepts or rejects the

00:33:06,080 --> 00:33:10,880
trade so we build up the trade result we

00:33:08,880 --> 00:33:12,159
embed the trade request in it according

00:33:10,880 --> 00:33:15,440
to our schema

00:33:12,159 --> 00:33:18,640
and then we are going to

00:33:15,440 --> 00:33:21,200
broadcast the trade result back

00:33:18,640 --> 00:33:22,880
to the trading app on the channel that

00:33:21,200 --> 00:33:24,880
we've defined

00:33:22,880 --> 00:33:27,360
at which point it will go to the context

00:33:24,880 --> 00:33:29,360
listener on the trading app

00:33:27,360 --> 00:33:32,240
and that's all we need to that's all we

00:33:29,360 --> 00:33:32,480
need to do um we've now um followed all

00:33:32,240 --> 00:33:36,399
of

00:33:32,480 --> 00:33:39,919
the steps to build our ftc 3 workflow

00:33:36,399 --> 00:33:43,360
so yeah let's see it in action um

00:33:39,919 --> 00:33:46,640
i'm going to show you a demo

00:33:43,360 --> 00:33:47,440
of this trade workflow now that follows

00:33:46,640 --> 00:33:52,640
these steps

00:33:47,440 --> 00:33:55,760
that we've defined right

00:33:52,640 --> 00:33:58,880
uh so what i've got here is a

00:33:55,760 --> 00:34:01,679
sandbox that we use at adaptive to um

00:33:58,880 --> 00:34:03,039
to test and and experiment with ftc3

00:34:01,679 --> 00:34:06,159
applications

00:34:03,039 --> 00:34:06,880
um and this sandbox just runs in the

00:34:06,159 --> 00:34:09,119
browser

00:34:06,880 --> 00:34:10,800
um it opens other browser windows and it

00:34:09,119 --> 00:34:14,000
uses post message

00:34:10,800 --> 00:34:16,879
to communicate between windows

00:34:14,000 --> 00:34:18,960
so this just goes to show that ftc 3

00:34:16,879 --> 00:34:20,639
isn't opinionated about what desktop

00:34:18,960 --> 00:34:24,320
framework it is running in

00:34:20,639 --> 00:34:24,960
um it just provides uh the the standards

00:34:24,320 --> 00:34:28,159
and and

00:34:24,960 --> 00:34:29,760
the connectivity to to bring the

00:34:28,159 --> 00:34:34,159
workflows together

00:34:29,760 --> 00:34:37,280
so um from this desktop agent um

00:34:34,159 --> 00:34:40,639
from the sandbox i can launch

00:34:37,280 --> 00:34:44,240
my trading app i can

00:34:40,639 --> 00:34:47,359
launch my execution app right

00:34:44,240 --> 00:34:48,000
and what you will see is i'm now going

00:34:47,359 --> 00:34:50,720
to try and do

00:34:48,000 --> 00:34:52,480
a trade and and show off the workflow as

00:34:50,720 --> 00:34:54,079
we've designed it so

00:34:52,480 --> 00:34:56,639
here i'm going to click sell and it's

00:34:54,079 --> 00:34:59,040
going to say that the trade is pending

00:34:56,639 --> 00:35:00,160
um but the top problem is that the

00:34:59,040 --> 00:35:03,200
execution app

00:35:00,160 --> 00:35:06,079
hasn't come up to respond to that and

00:35:03,200 --> 00:35:07,359
the reason for that is that i haven't

00:35:06,079 --> 00:35:10,160
written that code yet

00:35:07,359 --> 00:35:12,160
and we're now going to do that together

00:35:10,160 --> 00:35:14,240
so

00:35:12,160 --> 00:35:16,320
what i've got here is the code for the

00:35:14,240 --> 00:35:18,400
trading app and the execution app

00:35:16,320 --> 00:35:19,680
they're both relatively simple react

00:35:18,400 --> 00:35:22,800
applications

00:35:19,680 --> 00:35:24,160
that use react hooks um to wire

00:35:22,800 --> 00:35:27,920
everything together

00:35:24,160 --> 00:35:31,760
um so they both define some state

00:35:27,920 --> 00:35:35,680
and what you will see here is that

00:35:31,760 --> 00:35:39,200
both applications get the trade results

00:35:35,680 --> 00:35:39,200
channel that we've defined

00:35:39,599 --> 00:35:42,800
and then the trading app sets up a

00:35:42,240 --> 00:35:44,640
context

00:35:42,800 --> 00:35:46,400
listener for the trade result and if it

00:35:44,640 --> 00:35:48,079
receives a trade result it will add it

00:35:46,400 --> 00:35:51,280
to the state

00:35:48,079 --> 00:35:54,560
and and this is the code for

00:35:51,280 --> 00:35:57,040
handling a trade so when

00:35:54,560 --> 00:35:58,079
a trade button is clicked we build up

00:35:57,040 --> 00:35:59,920
the trade request

00:35:58,079 --> 00:36:01,760
with the information from that trade

00:35:59,920 --> 00:36:03,760
action like the side and the notion on

00:36:01,760 --> 00:36:07,280
the price

00:36:03,760 --> 00:36:09,760
and we set it as the pending trade

00:36:07,280 --> 00:36:11,520
but now we need to raise the intent so

00:36:09,760 --> 00:36:12,079
that it can transfer to the other

00:36:11,520 --> 00:36:14,480
application

00:36:12,079 --> 00:36:15,280
so i'm going to do that now so i'm going

00:36:14,480 --> 00:36:18,640
to say

00:36:15,280 --> 00:36:21,040
await ftc3 dot raise intent

00:36:18,640 --> 00:36:22,880
and the intent i want to raise is called

00:36:21,040 --> 00:36:26,160
execute trade

00:36:22,880 --> 00:36:30,079
oops and i am going to pass our

00:36:26,160 --> 00:36:33,440
trade request to the intent

00:36:30,079 --> 00:36:36,960
so i'm gonna save this file

00:36:33,440 --> 00:36:40,079
um this is uh live watching

00:36:36,960 --> 00:36:43,520
the code the web application so

00:36:40,079 --> 00:36:44,240
hopefully if the live watching works

00:36:43,520 --> 00:36:47,680
correctly

00:36:44,240 --> 00:36:50,560
um by adding this line and it will now

00:36:47,680 --> 00:36:52,839
my workflow will now work correctly so

00:36:50,560 --> 00:36:55,839
let's see if that worked

00:36:52,839 --> 00:36:58,800
um so i'm just going to close it down

00:36:55,839 --> 00:36:58,800
and open it again

00:36:59,520 --> 00:37:02,800
right so let's see if that works oh it

00:37:02,240 --> 00:37:04,880
worked

00:37:02,800 --> 00:37:06,400
so just by raising the intent the

00:37:04,880 --> 00:37:08,560
desktop agent has now

00:37:06,400 --> 00:37:10,079
brought forward the right application

00:37:08,560 --> 00:37:14,240
it's displaying

00:37:10,079 --> 00:37:16,079
the data and i can now accept or reject

00:37:14,240 --> 00:37:17,520
this might not be a surprise to you but

00:37:16,079 --> 00:37:20,160
when i accept or

00:37:17,520 --> 00:37:21,920
or reject it's going to add the trade to

00:37:20,160 --> 00:37:23,680
the plotter but it doesn't report back

00:37:21,920 --> 00:37:25,680
to the original application

00:37:23,680 --> 00:37:27,920
and again that's because i haven't

00:37:25,680 --> 00:37:31,839
implemented that bit yet

00:37:27,920 --> 00:37:31,839
so i'm going to do that now

00:37:32,960 --> 00:37:39,839
so on this side is the execution app

00:37:36,480 --> 00:37:41,359
we've taken the channel we've added to

00:37:39,839 --> 00:37:43,599
the application state

00:37:41,359 --> 00:37:45,760
we've set up an intent listener and when

00:37:43,599 --> 00:37:48,320
the trade request comes in

00:37:45,760 --> 00:37:49,040
we're adding it to the application state

00:37:48,320 --> 00:37:50,880
so

00:37:49,040 --> 00:37:52,240
here i'm going to handle the trade

00:37:50,880 --> 00:37:54,800
execution when you click

00:37:52,240 --> 00:37:56,800
the accept or reject button so we're

00:37:54,800 --> 00:37:58,400
building up our trade result according

00:37:56,800 --> 00:37:58,880
to the schema we're putting our trade

00:37:58,400 --> 00:38:00,880
request

00:37:58,880 --> 00:38:02,560
inside it along with the status whether

00:38:00,880 --> 00:38:04,880
it's except reject

00:38:02,560 --> 00:38:06,320
um here we're adding it to the blotter

00:38:04,880 --> 00:38:08,560
so what i need to know

00:38:06,320 --> 00:38:10,240
now is i need to use the channel that

00:38:08,560 --> 00:38:15,760
i've got a reference to

00:38:10,240 --> 00:38:19,359
and just broadcast back the trade result

00:38:15,760 --> 00:38:22,000
which will hopefully hit the

00:38:19,359 --> 00:38:23,440
context listener on the other side so

00:38:22,000 --> 00:38:24,480
i'm going to do that now i'm going to

00:38:23,440 --> 00:38:26,320
save it

00:38:24,480 --> 00:38:27,680
again if the live watching is working

00:38:26,320 --> 00:38:30,720
correctly and

00:38:27,680 --> 00:38:32,960
the workflow should now work so i'm

00:38:30,720 --> 00:38:37,040
going to close this guy down

00:38:32,960 --> 00:38:39,440
let's just reload this guy right

00:38:37,040 --> 00:38:40,880
so let's see if our workflow works so

00:38:39,440 --> 00:38:43,520
i'm going to buy the trade

00:38:40,880 --> 00:38:45,760
i'm going to reject it and now this

00:38:43,520 --> 00:38:46,160
application is updated with the status

00:38:45,760 --> 00:38:48,320
so

00:38:46,160 --> 00:38:50,880
just with that i've implemented my

00:38:48,320 --> 00:38:53,040
workflow using the ftc 3 apis

00:38:50,880 --> 00:38:54,160
the desktop agent is smart enough to

00:38:53,040 --> 00:38:56,720
know

00:38:54,160 --> 00:38:57,760
if i do it again that this application

00:38:56,720 --> 00:38:59,599
is already

00:38:57,760 --> 00:39:01,280
running it doesn't have to launch it

00:38:59,599 --> 00:39:05,119
again and i can

00:39:01,280 --> 00:39:08,320
it can just do the same thing over again

00:39:05,119 --> 00:39:12,320
right so there's my fcc3 workflow

00:39:08,320 --> 00:39:14,560
implemented um and just to show you that

00:39:12,320 --> 00:39:17,119
ftc3 isn't opinionated about what

00:39:14,560 --> 00:39:19,839
desktop environment it runs in

00:39:17,119 --> 00:39:22,400
i'm now going to be brave and try and

00:39:19,839 --> 00:39:26,320
run this workflow in another

00:39:22,400 --> 00:39:26,320
desktop agent

00:39:26,560 --> 00:39:31,680
openfin in this case um and i'm going to

00:39:29,680 --> 00:39:32,400
use the same applications and register

00:39:31,680 --> 00:39:35,440
them with

00:39:32,400 --> 00:39:39,280
the ftc3 app directory of openfin

00:39:35,440 --> 00:39:43,280
and hopefully that will work

00:39:39,280 --> 00:39:46,000
so let's bring up

00:39:43,280 --> 00:39:48,720
my console so what i'm going to do now

00:39:46,000 --> 00:39:52,800
is i'm going to say

00:39:48,720 --> 00:39:52,800
i'm going to run everything up in open

00:39:54,839 --> 00:39:59,599
fin

00:39:56,079 --> 00:40:00,960
and so this is now the same sandbox that

00:39:59,599 --> 00:40:02,720
is running in open fin

00:40:00,960 --> 00:40:04,240
um but in this case it's just an

00:40:02,720 --> 00:40:06,400
application now and

00:40:04,240 --> 00:40:08,560
it's delegating all desktop agent

00:40:06,400 --> 00:40:10,960
responsibilities to open fin who

00:40:08,560 --> 00:40:12,640
which is acting as a desktop agent now

00:40:10,960 --> 00:40:14,480
so i'm no longer running in the browser

00:40:12,640 --> 00:40:17,599
window i'm running on an open fin

00:40:14,480 --> 00:40:19,920
window on the desktop and

00:40:17,599 --> 00:40:21,839
i should still be able to launch my app

00:40:19,920 --> 00:40:25,359
just like before

00:40:21,839 --> 00:40:26,079
and it will come up and if i click buy

00:40:25,359 --> 00:40:28,400
or sell

00:40:26,079 --> 00:40:30,560
it will still use raise intent but in

00:40:28,400 --> 00:40:32,160
this case open fin will resolve that

00:40:30,560 --> 00:40:33,839
intent and should launch the right

00:40:32,160 --> 00:40:38,240
application for me

00:40:33,839 --> 00:40:39,520
so if i do that the execution app comes

00:40:38,240 --> 00:40:42,160
up

00:40:39,520 --> 00:40:43,680
and i can now accept or reject the trade

00:40:42,160 --> 00:40:46,640
and it worked just like

00:40:43,680 --> 00:40:49,119
i've showed you but it's now doing it in

00:40:46,640 --> 00:40:52,000
a different

00:40:49,119 --> 00:40:52,400
desktop agent because both are using the

00:40:52,000 --> 00:40:56,079
same

00:40:52,400 --> 00:41:01,440
ftc3 standards and that's really um

00:40:56,079 --> 00:41:05,040
the true power and beauty of ftc3

00:41:01,440 --> 00:41:08,560
right so

00:41:05,040 --> 00:41:11,599
so that's our trade workflow um

00:41:08,560 --> 00:41:12,560
so just to summarize um we've gone

00:41:11,599 --> 00:41:15,280
through five steps

00:41:12,560 --> 00:41:16,079
to build an ftc three workflow and i

00:41:15,280 --> 00:41:19,440
just

00:41:16,079 --> 00:41:22,319
want to list them again and notice how

00:41:19,440 --> 00:41:24,960
each step follows into the next one um

00:41:22,319 --> 00:41:27,599
so this kind of a logical order to them

00:41:24,960 --> 00:41:30,720
we design the workflow which then helps

00:41:27,599 --> 00:41:34,880
us to define the actions we want to use

00:41:30,720 --> 00:41:36,880
which then um it determines how we model

00:41:34,880 --> 00:41:38,880
the data

00:41:36,880 --> 00:41:39,920
then we register the applications with

00:41:38,880 --> 00:41:43,359
the types

00:41:39,920 --> 00:41:48,079
that we've defined and then we can use

00:41:43,359 --> 00:41:52,400
the ftc3 apis for the workflow

00:41:48,079 --> 00:41:53,920
uh so just to show that this is not all

00:41:52,400 --> 00:41:57,359
smoke and mirrors um

00:41:53,920 --> 00:41:59,280
i want to show uh just to tell you about

00:41:57,359 --> 00:42:01,200
a project that i've worked on where we

00:41:59,280 --> 00:42:03,599
used ftc3 in practice

00:42:01,200 --> 00:42:06,480
in the real world for a successful

00:42:03,599 --> 00:42:08,079
project that adaptive has done

00:42:06,480 --> 00:42:10,400
very often we can't talk about the

00:42:08,079 --> 00:42:12,880
projects we do for our clients

00:42:10,400 --> 00:42:13,839
but in this particular case the client

00:42:12,880 --> 00:42:16,319
at west markets

00:42:13,839 --> 00:42:18,160
has agreed to do some publicity with us

00:42:16,319 --> 00:42:19,040
and i can tell you about the scout

00:42:18,160 --> 00:42:21,200
project

00:42:19,040 --> 00:42:22,720
uh there's a case study on our website

00:42:21,200 --> 00:42:24,000
which you can go and download and read

00:42:22,720 --> 00:42:27,359
more about it

00:42:24,000 --> 00:42:29,520
and what we built um i uh

00:42:27,359 --> 00:42:30,560
was involved with this project and and i

00:42:29,520 --> 00:42:32,960
was the tech lead

00:42:30,560 --> 00:42:36,319
for this project along with some um

00:42:32,960 --> 00:42:39,440
people at adaptive and that was markets

00:42:36,319 --> 00:42:41,839
we put in place a full desktop workflow

00:42:39,440 --> 00:42:45,200
incorporating the symphony chat platform

00:42:41,839 --> 00:42:46,960
open finland ensemble and rfq desktop

00:42:45,200 --> 00:42:50,880
components some of which were written

00:42:46,960 --> 00:42:54,800
in wpf and some which were written

00:42:50,880 --> 00:42:57,119
in web technologies with react running

00:42:54,800 --> 00:43:00,640
on the desktop

00:42:57,119 --> 00:43:01,280
and for this we used um ftc three

00:43:00,640 --> 00:43:03,839
intents

00:43:01,280 --> 00:43:05,839
we used the ftc three context data

00:43:03,839 --> 00:43:07,839
schemas and modeled some data we used

00:43:05,839 --> 00:43:11,920
the ftc three apis

00:43:07,839 --> 00:43:12,400
and uh it was a wonderful workflow where

00:43:11,920 --> 00:43:14,640
um

00:43:12,400 --> 00:43:16,319
you know uk sales people could chat to

00:43:14,640 --> 00:43:19,200
customers in symphony

00:43:16,319 --> 00:43:19,680
um and at the click of a button they

00:43:19,200 --> 00:43:22,480
could

00:43:19,680 --> 00:43:24,480
transfer into um components running on

00:43:22,480 --> 00:43:29,040
the desktop where they can do pricing

00:43:24,480 --> 00:43:31,599
and then send those uh prices for an rfq

00:43:29,040 --> 00:43:32,400
back to um to the customer they were

00:43:31,599 --> 00:43:35,359
talking out

00:43:32,400 --> 00:43:35,760
all seamlessly all done with ftc three

00:43:35,359 --> 00:43:39,200
and

00:43:35,760 --> 00:43:42,319
um and desktop agents uh yeah so

00:43:39,200 --> 00:43:45,760
that was a a very successful project and

00:43:42,319 --> 00:43:46,640
it shows how people are leveraging ftc

00:43:45,760 --> 00:43:49,839
iii

00:43:46,640 --> 00:43:52,880
um in the real world to to solve

00:43:49,839 --> 00:43:55,119
problems on the desktop

00:43:52,880 --> 00:43:56,319
and that's really what uh what we do at

00:43:55,119 --> 00:43:59,520
adaptive we

00:43:56,319 --> 00:44:02,240
we um you know deliver bespoke software

00:43:59,520 --> 00:44:04,319
solutions for our clients um we've been

00:44:02,240 --> 00:44:07,359
doing it for more than eight years

00:44:04,319 --> 00:44:10,640
um we've you know delivered more than

00:44:07,359 --> 00:44:12,880
75 solutions of uh

00:44:10,640 --> 00:44:14,880
i i counted them and i think at least 18

00:44:12,880 --> 00:44:15,599
of those were desktop integration

00:44:14,880 --> 00:44:17,280
projects

00:44:15,599 --> 00:44:18,800
using many of the same patterns and

00:44:17,280 --> 00:44:22,560
approaches that i've talked

00:44:18,800 --> 00:44:25,599
uh with you about today and so much more

00:44:22,560 --> 00:44:27,680
uh so if you uh

00:44:25,599 --> 00:44:29,599
want to come and speak to us about a

00:44:27,680 --> 00:44:30,800
similar project at your organization

00:44:29,599 --> 00:44:32,960
please do so

00:44:30,800 --> 00:44:34,000
uh we we'd be more than happy to talk to

00:44:32,960 --> 00:44:37,680
you and and

00:44:34,000 --> 00:44:39,359
and help you with that uh in addition

00:44:37,680 --> 00:44:41,599
uh you know we're willing to share our

00:44:39,359 --> 00:44:42,160
expertise with the community we can come

00:44:41,599 --> 00:44:44,560
and do

00:44:42,160 --> 00:44:47,680
a presentation inside your organization

00:44:44,560 --> 00:44:51,359
about ftc3 about desktop strategy

00:44:47,680 --> 00:44:53,680
um and uh you know we've also offered

00:44:51,359 --> 00:44:55,040
to do workshops and training for

00:44:53,680 --> 00:44:57,440
organizations

00:44:55,040 --> 00:44:59,520
about ftc three whether that's for your

00:44:57,440 --> 00:45:01,599
developers or your stakeholders

00:44:59,520 --> 00:45:05,760
uh please get in touch with us if you're

00:45:01,599 --> 00:45:08,319
interested in that

00:45:05,760 --> 00:45:10,160
yeah so so that's everything i've put my

00:45:08,319 --> 00:45:12,880
contact details up there

00:45:10,160 --> 00:45:13,920
if you'd like me to send me a message to

00:45:12,880 --> 00:45:17,760
ask a question

00:45:13,920 --> 00:45:19,680
or to comment please feel free to do so

00:45:17,760 --> 00:45:20,800
it's been wonderful to be able to speak

00:45:19,680 --> 00:45:33,599
to you today and

00:45:20,800 --> 00:45:33,599

YouTube URL: https://www.youtube.com/watch?v=sTyEphOHPKw


