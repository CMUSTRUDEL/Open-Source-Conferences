Title: Tools, Bots and Automation for better Open Source Projects - Colin Eberhardt - OSSF 2018
Publication date: 2019-03-14
Playlist: Open Source Strategy Forum 2018
Description: 
	Speaker: Colin Eberhardt, Technology Director, Scott Logic
Presentation: Tools, Bots and Automation for better Open Source Projects

When developing software we typically work with our friends, peers and colleagues, in small close-knit teams where we share a common goal. With open source projects, we often work with strangers, people we may never speak to, let alone meet. Creating a quality product, with such a disparate team can be quite a challenge. This talk takes a look at how tools and automation are a critical component when creating a successful open source project. Tooling can be used to enforce code standards, testing, licensing and other legal requirements, and much more. In this talk we’ll look at some of the tools that are available to you – and how to build your own!
Captions: 
	00:00:00,000 --> 00:00:06,059
[Music]

00:00:09,830 --> 00:00:15,260
okay my next clinic parts are gonna talk

00:00:12,809 --> 00:00:22,410
about school spots and automation for

00:00:15,260 --> 00:00:27,480
projects so the way I've been writing

00:00:22,410 --> 00:00:29,429
software I was reminded that that quite

00:00:27,480 --> 00:00:31,320
recently like in our company's back

00:00:29,429 --> 00:00:33,420
channel so will point out that this

00:00:31,320 --> 00:00:44,239
thing that the debug magazine has been

00:00:33,420 --> 00:00:46,980
scandalous I see if you have yeah on

00:00:44,239 --> 00:00:49,550
yeah yeah I used to have a BBC micro

00:00:46,980 --> 00:00:52,649
years ago and the B bug magazine was a

00:00:49,550 --> 00:00:54,300
postal magazine for for BBC micro

00:00:52,649 --> 00:00:57,000
enthusiasts and when this appeared

00:00:54,300 --> 00:00:59,460
online I suddenly remembered years ago

00:00:57,000 --> 00:01:02,539
I'd written a letter to be bug magazine

00:00:59,460 --> 00:01:04,830
so I spent the next probably two hours

00:01:02,539 --> 00:01:05,820
scrolling through pages of pages to see

00:01:04,830 --> 00:01:07,680
if I could find it and I couldn't

00:01:05,820 --> 00:01:08,850
remember what it was I was hoping it was

00:01:07,680 --> 00:01:11,400
going to be something quite insightful

00:01:08,850 --> 00:01:13,979
and awesome and pointing to her future

00:01:11,400 --> 00:01:15,600
career in software and I found it dear

00:01:13,979 --> 00:01:20,280
sir I've beaten the high scoring

00:01:15,600 --> 00:01:21,750
Hedgehog my score was 2080 I like your

00:01:20,280 --> 00:01:25,820
magazine because it has lots of good

00:01:21,750 --> 00:01:25,820
games Colin aged 8

00:01:33,890 --> 00:01:42,750
yeah I was at home so anyway one thing

00:01:40,439 --> 00:01:44,429
that struck me while I was scrolling

00:01:42,750 --> 00:01:46,229
through pages and pages of be bug

00:01:44,429 --> 00:01:48,869
magazine was just how much of this stuff

00:01:46,229 --> 00:01:51,000
there was lots and lots of source code

00:01:48,869 --> 00:01:53,460
and funnily enough my first experience

00:01:51,000 --> 00:01:55,590
with software and computing was very

00:01:53,460 --> 00:01:58,470
much about open source because this was

00:01:55,590 --> 00:02:00,119
the only way to really ship your code to

00:01:58,470 --> 00:02:01,979
someone else and we're obviously a few

00:02:00,119 --> 00:02:03,990
commercial products at the time but much

00:02:01,979 --> 00:02:06,720
of the software on the BBC micro was

00:02:03,990 --> 00:02:09,420
open source and hand coded by what

00:02:06,720 --> 00:02:11,280
copied transcribed by people who got

00:02:09,420 --> 00:02:14,160
very used to syntax errors and things

00:02:11,280 --> 00:02:16,799
like that and I guess that early

00:02:14,160 --> 00:02:18,390
experience in software probably defined

00:02:16,799 --> 00:02:21,690
the way that I've treated software ever

00:02:18,390 --> 00:02:23,880
since I'm now incredibly active on

00:02:21,690 --> 00:02:26,579
github as gab said this is kind of your

00:02:23,880 --> 00:02:28,590
CV so here's my wonderful CV you can see

00:02:26,579 --> 00:02:30,260
that that rash of green across the

00:02:28,590 --> 00:02:32,519
bottom means I spend far too much time

00:02:30,260 --> 00:02:34,620
doing open source stuff and I'm a member

00:02:32,519 --> 00:02:37,410
of a number of organizations and that is

00:02:34,620 --> 00:02:40,200
again because I see software very much

00:02:37,410 --> 00:02:42,090
as as a craft and one of the things you

00:02:40,200 --> 00:02:43,709
do with craft is is you share it that's

00:02:42,090 --> 00:02:47,190
that's fundamentally well it's for and

00:02:43,709 --> 00:02:49,230
and yes in my commercial career we build

00:02:47,190 --> 00:02:50,730
software for our clients but I still

00:02:49,230 --> 00:02:54,650
think there's a tremendous value in in

00:02:50,730 --> 00:02:58,040
sharing your software there was a

00:02:54,650 --> 00:03:00,840
announcement earlier by JP Morgan their

00:02:58,040 --> 00:03:02,609
open sourcing perspective j/s which uses

00:03:00,840 --> 00:03:04,319
webassembly one of my recent hobby

00:03:02,609 --> 00:03:06,930
projects is i've been contributing to a

00:03:04,319 --> 00:03:08,430
project called webassembly j/s i've been

00:03:06,930 --> 00:03:10,709
helping them come up with a standardised

00:03:08,430 --> 00:03:12,180
abstract syntax tree yeah they're very

00:03:10,709 --> 00:03:14,130
geeky it doesn't matter if you don't

00:03:12,180 --> 00:03:16,500
understand that for webassembly

00:03:14,130 --> 00:03:18,359
and it's a small contribution but that

00:03:16,500 --> 00:03:20,790
little contribution has become part of

00:03:18,359 --> 00:03:23,340
of Babel which has become part of what

00:03:20,790 --> 00:03:26,579
pack and it may well actually be be

00:03:23,340 --> 00:03:28,790
contributing to the JPMorgan project I'm

00:03:26,579 --> 00:03:31,049
also a member of finis interestingly

00:03:28,790 --> 00:03:33,060
Scott logic isn't a member of finis I'm

00:03:31,049 --> 00:03:35,549
the first community member and they call

00:03:33,060 --> 00:03:36,659
it an at-large member and I quite like

00:03:35,549 --> 00:03:38,790
that because it makes it sound like a

00:03:36,659 --> 00:03:40,560
I'm a criminal on the run

00:03:38,790 --> 00:03:46,859
I'm still at large Mao hasn't caught me

00:03:40,560 --> 00:03:48,599
yet so anyway I can run faster so yeah

00:03:46,859 --> 00:03:51,090
I'm the technology director at Scott

00:03:48,599 --> 00:03:54,060
logic we write lots of fancy software

00:03:51,090 --> 00:03:55,859
lots of it involving open source but

00:03:54,060 --> 00:03:57,480
today I want to talk about tools bots

00:03:55,859 --> 00:04:00,480
and automation now I don't know how many

00:03:57,480 --> 00:04:01,920
of you have been in the earlier talks in

00:04:00,480 --> 00:04:05,450
this session there's been some great

00:04:01,920 --> 00:04:07,829
stuff about licenses about

00:04:05,450 --> 00:04:11,939
vulnerabilities and really interesting

00:04:07,829 --> 00:04:13,560
talks but ah this is kind of what my

00:04:11,939 --> 00:04:15,410
take-home impression of the talks so far

00:04:13,560 --> 00:04:18,750
this morning there's been quite a lot of

00:04:15,410 --> 00:04:20,579
concern and fear about some of the bad

00:04:18,750 --> 00:04:22,919
things that can happen to you but by

00:04:20,579 --> 00:04:24,090
entering into open source I'm hoping

00:04:22,919 --> 00:04:26,490
that my talk is going to be a bit more

00:04:24,090 --> 00:04:28,259
like this I want to look at the kind of

00:04:26,490 --> 00:04:30,120
their their happier elements that the

00:04:28,259 --> 00:04:34,800
beneficial elements of working in

00:04:30,120 --> 00:04:35,940
open-source so in common with some of

00:04:34,800 --> 00:04:37,530
the other presenters this morning

00:04:35,940 --> 00:04:40,080
obviously I'm talking about tools and

00:04:37,530 --> 00:04:41,639
automation and I'm treating it as a

00:04:40,080 --> 00:04:43,110
given that I don't have to convince you

00:04:41,639 --> 00:04:44,820
that automation is a good thing we all

00:04:43,110 --> 00:04:46,500
know about DevOps

00:04:44,820 --> 00:04:48,300
the coming together of development

00:04:46,500 --> 00:04:52,320
practices with operational practices and

00:04:48,300 --> 00:04:55,139
and and developers through automation

00:04:52,320 --> 00:04:56,669
improving operations and operations

00:04:55,139 --> 00:04:58,229
giving developers an understanding of

00:04:56,669 --> 00:05:00,180
what it's like to run software in

00:04:58,229 --> 00:05:03,630
production it's it's a it's a great

00:05:00,180 --> 00:05:05,940
concept so why do we use DevOps we use

00:05:03,630 --> 00:05:08,460
it for a reproducibility configuration

00:05:05,940 --> 00:05:10,710
as code it reduces defects it allows us

00:05:08,460 --> 00:05:12,720
to release with confidence we use it for

00:05:10,710 --> 00:05:14,669
speed through test automation we can

00:05:12,720 --> 00:05:16,919
deploy rapidly we can reduce time to

00:05:14,669 --> 00:05:18,659
market we use it for agility this is

00:05:16,919 --> 00:05:19,979
actually in the financial sector I think

00:05:18,659 --> 00:05:22,500
one of the things they're most keen on

00:05:19,979 --> 00:05:24,360
is with DevOps and cloud is the ability

00:05:22,500 --> 00:05:27,300
to move more quickly than they have been

00:05:24,360 --> 00:05:30,599
able to in the past and collaboration

00:05:27,300 --> 00:05:32,400
faster resolution times my cynical

00:05:30,599 --> 00:05:33,930
feeling is part of the reason why we use

00:05:32,400 --> 00:05:35,490
DevOps is because we've got this new

00:05:33,930 --> 00:05:37,520
thing called micro services and it's

00:05:35,490 --> 00:05:39,830
impossible to use micro services without

00:05:37,520 --> 00:05:42,750
infrastructure as code

00:05:39,830 --> 00:05:46,849
so does automation ensure quality

00:05:42,750 --> 00:05:49,439
products of course not

00:05:46,849 --> 00:05:52,769
what ensures a quality product is that

00:05:49,439 --> 00:05:54,149
you hire technically able people not

00:05:52,769 --> 00:05:56,309
only do you hire technically able people

00:05:54,149 --> 00:05:58,080
you influence their behavior by your

00:05:56,309 --> 00:06:01,080
culture some of its cultural some of

00:05:58,080 --> 00:06:02,639
it's probably contractual this is

00:06:01,080 --> 00:06:04,800
imparted by their company through

00:06:02,639 --> 00:06:06,389
onboarding and so on but an open-source

00:06:04,800 --> 00:06:08,519
one the important things here is the

00:06:06,389 --> 00:06:10,050
cultural element is lost you don't have

00:06:08,519 --> 00:06:11,939
that the people contributing to your

00:06:10,050 --> 00:06:13,919
project aren't part of your company they

00:06:11,939 --> 00:06:15,209
haven't signed a contract they're not in

00:06:13,919 --> 00:06:17,639
your building they're not being

00:06:15,209 --> 00:06:19,439
influenced by your inherent culture

00:06:17,639 --> 00:06:22,529
which is a significant challenge for

00:06:19,439 --> 00:06:24,749
open-source so what are these cultural

00:06:22,529 --> 00:06:27,139
challenges well the thing is you're

00:06:24,749 --> 00:06:29,849
working with a highly distributed team

00:06:27,139 --> 00:06:31,889
and again I'm working on the premise

00:06:29,849 --> 00:06:34,079
that you're open sourcing your code in

00:06:31,889 --> 00:06:36,949
the hope that others will contribute it

00:06:34,079 --> 00:06:38,939
contribute to it and make it better

00:06:36,949 --> 00:06:40,889
you're working with a fluid and

00:06:38,939 --> 00:06:42,300
ever-changing team so some sometimes

00:06:40,889 --> 00:06:43,860
you'll have someone come along and make

00:06:42,300 --> 00:06:47,610
a large contribution and you might not

00:06:43,860 --> 00:06:48,959
hear from them however again a trickier

00:06:47,610 --> 00:06:50,639
challenge is you're working with people

00:06:48,959 --> 00:06:51,809
that have different levels of skill and

00:06:50,639 --> 00:06:53,159
a different level different

00:06:51,809 --> 00:06:54,629
communication skills they might not

00:06:53,159 --> 00:06:56,279
speak the same language as you or they

00:06:54,629 --> 00:06:59,009
simply might not be terribly good at

00:06:56,279 --> 00:07:00,749
communicating I've worked on open source

00:06:59,009 --> 00:07:02,969
projects where someone's just dumped a

00:07:00,749 --> 00:07:06,679
massive pull request a big contribution

00:07:02,969 --> 00:07:08,819
and they simply haven't explained why

00:07:06,679 --> 00:07:10,259
you're also working with people who have

00:07:08,819 --> 00:07:12,029
got different needs different goals

00:07:10,259 --> 00:07:14,219
different ambitions you construct a

00:07:12,029 --> 00:07:15,959
project because it fulfills one of your

00:07:14,219 --> 00:07:17,729
needs that the great thing about open

00:07:15,959 --> 00:07:19,259
source is you'll find other people who

00:07:17,729 --> 00:07:20,459
use your project for a completely

00:07:19,259 --> 00:07:22,110
different purpose they have different

00:07:20,459 --> 00:07:25,169
needs and that's a good thing but again

00:07:22,110 --> 00:07:27,989
it's a challenge so just for a bit of

00:07:25,169 --> 00:07:30,029
fun ah I want to go talk about when

00:07:27,989 --> 00:07:31,379
open-source goes bad so grab your

00:07:30,029 --> 00:07:33,629
popcorn here's some there's some good

00:07:31,379 --> 00:07:39,329
ones here does anyone recognize this bit

00:07:33,629 --> 00:07:42,199
of code JavaScript that's a good start

00:07:39,329 --> 00:07:44,159
and I'll fill in the top bit left pad so

00:07:42,199 --> 00:07:46,879
you might have heard about this before

00:07:44,159 --> 00:07:49,409
so it said it's 11 lines of code

00:07:46,879 --> 00:07:53,459
unfortunately what happens is the

00:07:49,409 --> 00:07:55,019
developer behind it had a a copyright or

00:07:53,459 --> 00:07:56,819
trademark disagreement with a company

00:07:55,019 --> 00:07:58,709
and he was very upset about it and it

00:07:56,819 --> 00:07:59,980
caused him to not just withdraw one of

00:07:58,709 --> 00:08:02,770
his packages he withdrew

00:07:59,980 --> 00:08:04,750
all 250 of them one of them was this 11

00:08:02,770 --> 00:08:06,610
lines of code which has downloaded two

00:08:04,750 --> 00:08:07,660
and a half million times a month and it

00:08:06,610 --> 00:08:11,050
broke everything

00:08:07,660 --> 00:08:13,150
Babel reacts everything was broken as as

00:08:11,050 --> 00:08:15,790
a result I must submit this is probably

00:08:13,150 --> 00:08:17,260
a good source of mockery from people

00:08:15,790 --> 00:08:18,460
that do c-sharp and Java that you have

00:08:17,260 --> 00:08:20,950
to have a package to be able to left

00:08:18,460 --> 00:08:23,160
path of string but yeah that was

00:08:20,950 --> 00:08:27,280
interesting another one quite recently

00:08:23,160 --> 00:08:29,110
learner learner's a package is a tool

00:08:27,280 --> 00:08:32,979
that allows you to manage multiple

00:08:29,110 --> 00:08:36,280
instant projects one of the maintainer

00:08:32,979 --> 00:08:38,800
of this had was particularly upset about

00:08:36,280 --> 00:08:41,979
a political issue and decided to update

00:08:38,800 --> 00:08:44,260
the MIT license to explicitly exclude

00:08:41,979 --> 00:08:46,440
the use of learner by a whole host of

00:08:44,260 --> 00:08:49,300
companies like Microsoft Corporation

00:08:46,440 --> 00:08:51,880
Amazon basically they were saying MIT

00:08:49,300 --> 00:08:54,490
license apart from you guys in

00:08:51,880 --> 00:08:56,950
interesting es limps another this is

00:08:54,490 --> 00:08:58,780
very very recent actually what someone

00:08:56,950 --> 00:09:00,280
managed to do was they managed to steal

00:08:58,780 --> 00:09:02,890
the credentials of one of the maintainer

00:09:00,280 --> 00:09:05,350
x' and basically insert a virus which

00:09:02,890 --> 00:09:06,850
was immediately propagated to thousands

00:09:05,350 --> 00:09:08,890
of machines and the whole idea behind

00:09:06,850 --> 00:09:10,570
the virus was it was it was intended to

00:09:08,890 --> 00:09:14,860
steal their credentials so he could

00:09:10,570 --> 00:09:16,480
effectively spider out all quite scary

00:09:14,860 --> 00:09:18,130
things so I guess the only conclusion I

00:09:16,480 --> 00:09:20,800
can really draw from this is a people

00:09:18,130 --> 00:09:22,660
are a little bit unpredictable and most

00:09:20,800 --> 00:09:24,760
of the activities you saw there I guess

00:09:22,660 --> 00:09:26,830
apart from the last one the people were

00:09:24,760 --> 00:09:29,560
doing what they generally thought was a

00:09:26,830 --> 00:09:32,560
good thing fighting against political

00:09:29,560 --> 00:09:33,940
issues or yeah they thought they would

00:09:32,560 --> 00:09:34,540
do the good thing but you know in

00:09:33,940 --> 00:09:36,220
practice

00:09:34,540 --> 00:09:39,430
strange things happen when you move into

00:09:36,220 --> 00:09:41,140
the world of open-source so what tools

00:09:39,430 --> 00:09:44,710
should you be equipping yourself with

00:09:41,140 --> 00:09:46,420
now I could give you a huge just list of

00:09:44,710 --> 00:09:47,890
tools and dump them on you but what I

00:09:46,420 --> 00:09:49,120
want to do is look at the tools that

00:09:47,890 --> 00:09:51,880
will help you address some of these

00:09:49,120 --> 00:09:54,850
cultural challenges so distributed teams

00:09:51,880 --> 00:09:57,340
fluid and changing team what do these

00:09:54,850 --> 00:10:01,000
people fundamentally need from the

00:09:57,340 --> 00:10:03,220
project and how controlling help them so

00:10:01,000 --> 00:10:05,080
to do that you have to put yourself in

00:10:03,220 --> 00:10:06,580
their shoes so say for example you're

00:10:05,080 --> 00:10:09,900
trying to attract a contributor to your

00:10:06,580 --> 00:10:12,790
open-source project what are their needs

00:10:09,900 --> 00:10:13,510
firstly understand the goals of your

00:10:12,790 --> 00:10:15,640
project so

00:10:13,510 --> 00:10:17,290
their contributions are in line with you

00:10:15,640 --> 00:10:20,980
with your goals as well an alignment

00:10:17,290 --> 00:10:22,210
means less friction they want in simple

00:10:20,980 --> 00:10:25,000
terms they want to be able to rapidly

00:10:22,210 --> 00:10:27,520
clone and build your project locally

00:10:25,000 --> 00:10:29,950
they want to test and verify changes

00:10:27,520 --> 00:10:32,320
they don't want to spend too much time

00:10:29,950 --> 00:10:34,660
reading documentation code style naming

00:10:32,320 --> 00:10:36,520
conventions that sort of thing they also

00:10:34,660 --> 00:10:38,350
want rapid feedback if they create a

00:10:36,520 --> 00:10:41,170
pull request if they contribute code if

00:10:38,350 --> 00:10:42,670
they write an issue ideally they'd like

00:10:41,170 --> 00:10:44,950
a fairly quick response they want to

00:10:42,670 --> 00:10:46,900
engage with you flip it around the other

00:10:44,950 --> 00:10:49,870
way as a maintainer what what are what

00:10:46,900 --> 00:10:51,550
are my needs as a baseline it's the same

00:10:49,870 --> 00:10:53,020
as a contribution Tanner's typically

00:10:51,550 --> 00:10:54,460
contributes as well but there are a

00:10:53,020 --> 00:10:57,340
number of additional requirements they

00:10:54,460 --> 00:10:59,170
have they want it to be easy to release

00:10:57,340 --> 00:11:01,090
and as you probably know yourselves

00:10:59,170 --> 00:11:04,630
often release processes are quite

00:11:01,090 --> 00:11:06,820
laborious they want to communicate with

00:11:04,630 --> 00:11:08,320
and grow their community they want to

00:11:06,820 --> 00:11:09,640
enforce license requirements I'm not

00:11:08,320 --> 00:11:11,530
going to label that point too much we've

00:11:09,640 --> 00:11:13,030
had a bit of that this morning they also

00:11:11,530 --> 00:11:15,550
want to manage dependencies and

00:11:13,030 --> 00:11:17,440
vulnerabilities so bring on the tools

00:11:15,550 --> 00:11:21,070
what what tools are there out there that

00:11:17,440 --> 00:11:22,420
can help us so the first one and I was

00:11:21,070 --> 00:11:23,770
going to write this kind of like

00:11:22,420 --> 00:11:25,750
requirements type I got a little bit

00:11:23,770 --> 00:11:27,610
bored but as a contributor I want to

00:11:25,750 --> 00:11:29,320
easily test and verify my changes so

00:11:27,610 --> 00:11:31,000
that I can maximize the time I spend on

00:11:29,320 --> 00:11:33,940
feature development I'm not going to do

00:11:31,000 --> 00:11:35,860
them all like that don't worry so yeah I

00:11:33,940 --> 00:11:37,920
want to easily test and verify my

00:11:35,860 --> 00:11:40,240
changes how do we how do we achieve that

00:11:37,920 --> 00:11:41,470
the obvious thing is continuous

00:11:40,240 --> 00:11:43,540
integration and continuous integration

00:11:41,470 --> 00:11:45,580
has been mentioned I think by every

00:11:43,540 --> 00:11:47,950
speaker this morning and again I don't

00:11:45,580 --> 00:11:49,930
think I have to sell the concept of

00:11:47,950 --> 00:11:51,670
continuous integration to you but one

00:11:49,930 --> 00:11:53,080
thing to remind yourself is continued

00:11:51,670 --> 00:11:55,270
continuous integration is just the

00:11:53,080 --> 00:11:57,370
backbone continuous integration by

00:11:55,270 --> 00:12:00,010
itself doesn't actually do anything

00:11:57,370 --> 00:12:01,570
it's the tools that you integrate with

00:12:00,010 --> 00:12:03,790
your continuous integration pipeline

00:12:01,570 --> 00:12:06,130
that actually bring you benefits so the

00:12:03,790 --> 00:12:08,440
obvious one is is running unit tests

00:12:06,130 --> 00:12:10,930
which is these days considered standard

00:12:08,440 --> 00:12:12,700
hygiene for a project the important

00:12:10,930 --> 00:12:15,040
thing is it gives both contributors and

00:12:12,700 --> 00:12:18,160
maintain as confidence and I found this

00:12:15,040 --> 00:12:19,900
very very useful actually when making a

00:12:18,160 --> 00:12:22,360
first contribution to someone else's

00:12:19,900 --> 00:12:23,890
open source project you want to note

00:12:22,360 --> 00:12:26,200
your understanding of that project

00:12:23,890 --> 00:12:28,329
initially is going to be fairly limited

00:12:26,200 --> 00:12:30,279
and minimal if you can make a small

00:12:28,329 --> 00:12:31,510
change and then allow the unit tests to

00:12:30,279 --> 00:12:34,089
reassure you that you haven't broken

00:12:31,510 --> 00:12:36,970
anything that's a massive benefit and

00:12:34,089 --> 00:12:39,010
again most internal projects that I've

00:12:36,970 --> 00:12:42,519
worked on don't have enough unit tests

00:12:39,010 --> 00:12:44,380
and again the culture of the the culture

00:12:42,519 --> 00:12:46,300
of the environment props that up you've

00:12:44,380 --> 00:12:47,860
got people either side of you to talk to

00:12:46,300 --> 00:12:48,430
to work out whether you've done the

00:12:47,860 --> 00:12:50,350
right thing

00:12:48,430 --> 00:12:54,459
whereas in open-source you don't have

00:12:50,350 --> 00:12:56,139
that I want to rapidly clone and build

00:12:54,459 --> 00:12:58,930
locally so there are few things you need

00:12:56,139 --> 00:13:01,120
to do here firstly is use tools to

00:12:58,930 --> 00:13:02,949
manage your dependencies again I think

00:13:01,120 --> 00:13:05,320
most people do they do this these days

00:13:02,949 --> 00:13:07,180
but every language out there has some

00:13:05,320 --> 00:13:10,089
form of package manager so again

00:13:07,180 --> 00:13:12,100
historically you quite often saw people

00:13:10,089 --> 00:13:13,870
taking their dependencies and copying

00:13:12,100 --> 00:13:15,310
them directly into their repository and

00:13:13,870 --> 00:13:17,889
you shouldn't really be doing that

00:13:15,310 --> 00:13:19,300
there's things like NPM crates cocoa

00:13:17,889 --> 00:13:21,810
pods whichever language you're working

00:13:19,300 --> 00:13:25,449
with it will have a mechanism for

00:13:21,810 --> 00:13:27,579
dependency management the next thing

00:13:25,449 --> 00:13:30,490
something I see people miss far too

00:13:27,579 --> 00:13:32,890
often ensure your project is OS agnostic

00:13:30,490 --> 00:13:35,260
and now most people within financial

00:13:32,890 --> 00:13:38,110
services they use Windows computers most

00:13:35,260 --> 00:13:40,810
people outside of financial services

00:13:38,110 --> 00:13:46,690
like Mac's Oh break it

00:13:40,810 --> 00:13:52,000
go on come back yeah very reliable

00:13:46,690 --> 00:13:54,699
Macintosh computers man I'm not going to

00:13:52,000 --> 00:13:56,800
touch it I'm just go very gently yeah

00:13:54,699 --> 00:13:58,360
so as I mentioned most of you will

00:13:56,800 --> 00:14:01,000
probably have a Windows PC on your desk

00:13:58,360 --> 00:14:02,320
but not of potential contributors let's

00:14:01,000 --> 00:14:04,360
say for example you might be trying to

00:14:02,320 --> 00:14:05,410
attract a contributor from Facebook or

00:14:04,360 --> 00:14:08,589
Twitter they'll probably have Mac

00:14:05,410 --> 00:14:11,560
computers so it's very important to my

00:14:08,589 --> 00:14:13,209
minds to enforce the our stagnant OS

00:14:11,560 --> 00:14:15,310
agnostic nature of your project through

00:14:13,209 --> 00:14:17,500
continuous integration so you can do

00:14:15,310 --> 00:14:20,110
that by having Windows builds by having

00:14:17,500 --> 00:14:21,310
Linux builds because probably yourself

00:14:20,110 --> 00:14:23,850
you might not want to switch between

00:14:21,310 --> 00:14:27,069
different OSS as you're developing

00:14:23,850 --> 00:14:29,519
another thing is consider tools like

00:14:27,069 --> 00:14:32,769
docker if your open source project has

00:14:29,519 --> 00:14:34,810
dependencies on databases and services

00:14:32,769 --> 00:14:36,010
don't give someone a huge long list of

00:14:34,810 --> 00:14:37,630
how to install these different things

00:14:36,010 --> 00:14:38,780
give them a docker image so they can get

00:14:37,630 --> 00:14:42,800
up and running

00:14:38,780 --> 00:14:44,150
again reducing the time from checking

00:14:42,800 --> 00:14:46,340
out a project to be able to make a

00:14:44,150 --> 00:14:48,850
meaningful change is very very important

00:14:46,340 --> 00:14:51,320
for attracting first-time contributors I

00:14:48,850 --> 00:14:53,780
don't want to spend time reading about

00:14:51,320 --> 00:14:58,400
code style naming conventions etc yeah

00:14:53,780 --> 00:15:00,380
just have a drink we've all heard about

00:14:58,400 --> 00:15:02,480
the big kind of spaces versus tabs

00:15:00,380 --> 00:15:06,430
debates and that is the tip of the

00:15:02,480 --> 00:15:08,660
iceberg anything anything that you can

00:15:06,430 --> 00:15:10,790
stylistically change in in a language

00:15:08,660 --> 00:15:14,060
people will argue about it's the way it

00:15:10,790 --> 00:15:15,830
is so how do we tackle that now the

00:15:14,060 --> 00:15:18,020
current tools we use to tackle that are

00:15:15,830 --> 00:15:19,820
in my opinion not very good they're

00:15:18,020 --> 00:15:21,800
typically enforced by static code

00:15:19,820 --> 00:15:23,510
analysis so you will have within your

00:15:21,800 --> 00:15:25,310
continuous integration pipeline you'll

00:15:23,510 --> 00:15:28,550
have static code analysis which will say

00:15:25,310 --> 00:15:30,890
yes they're using tabs great or yes

00:15:28,550 --> 00:15:33,770
they've got two spaces between I design

00:15:30,890 --> 00:15:35,450
this and that and sometimes people try

00:15:33,770 --> 00:15:37,490
to support it by providing an editor

00:15:35,450 --> 00:15:39,800
configuration so they might give you a

00:15:37,490 --> 00:15:42,110
configuration for visual studio so that

00:15:39,800 --> 00:15:43,150
you can automatically format but there

00:15:42,110 --> 00:15:45,200
are a few problems with that approach

00:15:43,150 --> 00:15:47,060
firstly it doesn't support multiple

00:15:45,200 --> 00:15:49,010
editors so again you're assuming that a

00:15:47,060 --> 00:15:50,750
contributor has the same environment as

00:15:49,010 --> 00:15:55,580
yourself they might be one thing to use

00:15:50,750 --> 00:15:57,860
as I VI or your visual studio code or a

00:15:55,580 --> 00:15:59,540
term or something else so having a

00:15:57,860 --> 00:16:02,750
single editor configurations not very

00:15:59,540 --> 00:16:04,610
useful also it catches the problem later

00:16:02,750 --> 00:16:06,260
on you're giving someone a slap after

00:16:04,610 --> 00:16:09,560
they've done all this hard work for not

00:16:06,260 --> 00:16:11,690
following your conventions some static

00:16:09,560 --> 00:16:13,850
analysis tools some lenses have a fixed

00:16:11,690 --> 00:16:17,000
mode but typically they can't fix and

00:16:13,850 --> 00:16:18,170
resolve everything so in the JavaScript

00:16:17,000 --> 00:16:19,400
world where I think a lot of the

00:16:18,170 --> 00:16:23,030
creativity is going on these days

00:16:19,400 --> 00:16:25,760
there's a new and a new tool called

00:16:23,030 --> 00:16:27,440
prettier and it has some very very

00:16:25,760 --> 00:16:28,760
interesting features one of the most

00:16:27,440 --> 00:16:31,490
interesting features from my perspective

00:16:28,760 --> 00:16:33,110
is it's a reformat er so it's not there

00:16:31,490 --> 00:16:34,970
to slap you on the wrist if you get it

00:16:33,110 --> 00:16:36,920
wrong what it does is it takes all of

00:16:34,970 --> 00:16:38,840
your code and transforms it into an

00:16:36,920 --> 00:16:40,370
abstract syntax tree so that's a tree

00:16:38,840 --> 00:16:42,920
like representation of your code and

00:16:40,370 --> 00:16:44,960
then spits it back out as JavaScript

00:16:42,920 --> 00:16:47,720
following their predefined conventions

00:16:44,960 --> 00:16:49,730
so what that means is there's nothing to

00:16:47,720 --> 00:16:52,170
check it's reformatted everything for

00:16:49,730 --> 00:16:54,060
you in an entirely reproducible fashion

00:16:52,170 --> 00:16:56,040
it's opinionated as well it's not

00:16:54,060 --> 00:16:57,990
designed to be configured the ethos

00:16:56,040 --> 00:17:00,240
behind this project is we've made a few

00:16:57,990 --> 00:17:03,330
decisions to be honest code style isn't

00:17:00,240 --> 00:17:05,250
worth arguing about it's a waste of time

00:17:03,330 --> 00:17:06,839
follow this convention and off we go

00:17:05,250 --> 00:17:08,820
and a lot of big companies have now

00:17:06,839 --> 00:17:11,100
adopted it and obviously it can be run

00:17:08,820 --> 00:17:13,589
on CI and editor so this means the

00:17:11,100 --> 00:17:15,750
problems caught earlier on but you can

00:17:13,589 --> 00:17:18,209
actually catch it sooner than that

00:17:15,750 --> 00:17:21,270
so something that a lot of people don't

00:17:18,209 --> 00:17:23,160
use is get hooks so with git you can

00:17:21,270 --> 00:17:25,020
actually execute scripts at the point of

00:17:23,160 --> 00:17:26,520
check-in and one of the reasons people

00:17:25,020 --> 00:17:28,950
don't use git hooks is they're actually

00:17:26,520 --> 00:17:30,840
quite hard to configure and and there

00:17:28,950 --> 00:17:32,880
are open source tools husky's a good one

00:17:30,840 --> 00:17:34,920
which make it a lot easier to configure

00:17:32,880 --> 00:17:37,530
get hooks the problem with get hooks is

00:17:34,920 --> 00:17:40,110
you don't the hooks themselves aren't

00:17:37,530 --> 00:17:44,070
part of the clone process so you have to

00:17:40,110 --> 00:17:45,600
manually advocate hooks so Huskie and

00:17:44,070 --> 00:17:47,820
various other tools make sure that this

00:17:45,600 --> 00:17:49,950
happens post installation basically it

00:17:47,820 --> 00:17:51,540
automates the whole thing but in a

00:17:49,950 --> 00:17:53,610
nutshell these six lines of code will

00:17:51,540 --> 00:17:55,530
mean that in this example prettier will

00:17:53,610 --> 00:17:58,110
be run every time someone commits code

00:17:55,530 --> 00:18:01,500
so the whole argument about code style

00:17:58,110 --> 00:18:02,640
goes away also by having code style

00:18:01,500 --> 00:18:05,700
enforced in this fashion

00:18:02,640 --> 00:18:08,160
it means diffs easier to follow it's

00:18:05,700 --> 00:18:10,440
highly frustrating when someone makes a

00:18:08,160 --> 00:18:12,510
contribution and they add value in maybe

00:18:10,440 --> 00:18:14,220
ten lines of code but then they change

00:18:12,510 --> 00:18:16,320
50 files just because they've got a

00:18:14,220 --> 00:18:20,820
different editor configuration big waste

00:18:16,320 --> 00:18:24,420
of time as a contributor I want rapid

00:18:20,820 --> 00:18:26,070
feedback on issues this can actually be

00:18:24,420 --> 00:18:27,450
really really challenging and I think

00:18:26,070 --> 00:18:30,480
this is one the biggest challenge is an

00:18:27,450 --> 00:18:32,400
open source that it's challenging in so

00:18:30,480 --> 00:18:33,930
many different contexts it your your

00:18:32,400 --> 00:18:35,340
open source project could be a hobby

00:18:33,930 --> 00:18:38,250
project that you don't have much time

00:18:35,340 --> 00:18:39,870
for or on the flip side you might be

00:18:38,250 --> 00:18:42,300
Facebook or Microsoft you might have a

00:18:39,870 --> 00:18:44,730
project like react or Visual Studio code

00:18:42,300 --> 00:18:46,560
where every day there are hundreds and

00:18:44,730 --> 00:18:50,190
hundreds of people raising issues so

00:18:46,560 --> 00:18:52,670
tackling this is is a big problem this

00:18:50,190 --> 00:18:54,570
is where bots are actually quite useful

00:18:52,670 --> 00:18:57,150
there are a number of different bots

00:18:54,570 --> 00:18:59,280
that you can you can find on the web an

00:18:57,150 --> 00:19:01,410
interesting project is pro bot and it's

00:18:59,280 --> 00:19:03,450
a framework for building BOTS

00:19:01,410 --> 00:19:05,040
and it's also a effectively a

00:19:03,450 --> 00:19:05,549
marketplace for BOTS so I'm just going

00:19:05,040 --> 00:19:06,960
to show you

00:19:05,549 --> 00:19:09,809
couple of the bots that I've used in the

00:19:06,960 --> 00:19:13,409
past I think are quite useful the first

00:19:09,809 --> 00:19:15,690
one is is one that basically looks when

00:19:13,409 --> 00:19:17,249
people raise issues it looks at the

00:19:15,690 --> 00:19:18,989
description of the issue and determines

00:19:17,249 --> 00:19:20,909
whether you need to request more

00:19:18,989 --> 00:19:22,830
information and this is a very common

00:19:20,909 --> 00:19:24,869
problem asking people you know what

00:19:22,830 --> 00:19:26,909
version are you using or or can you

00:19:24,869 --> 00:19:30,149
please elaborate this bot will take away

00:19:26,909 --> 00:19:32,789
some of that jury also I think there are

00:19:30,149 --> 00:19:35,399
opportunities here too to do things like

00:19:32,789 --> 00:19:37,110
welcome new users and as an example

00:19:35,399 --> 00:19:38,669
you'll often have a code of conduct and

00:19:37,110 --> 00:19:41,039
to be honest most people will never read

00:19:38,669 --> 00:19:42,869
it but if at the point when someone

00:19:41,039 --> 00:19:44,429
opens an issue or a report request you

00:19:42,869 --> 00:19:46,049
say oh by the way thanks to your

00:19:44,429 --> 00:19:47,519
contribution would you mind reading the

00:19:46,049 --> 00:19:49,169
code of conduct it gives them something

00:19:47,519 --> 00:19:50,639
useful to do and he gives you a bit more

00:19:49,169 --> 00:19:54,299
time to actually look at their

00:19:50,639 --> 00:19:55,799
contribution another one is when you

00:19:54,299 --> 00:19:58,289
merge pull requests you can add a

00:19:55,799 --> 00:20:01,200
message for example maybe a shocked

00:19:58,289 --> 00:20:02,820
cat's not the best way to use this but

00:20:01,200 --> 00:20:04,409
maybe a more productive thing to do

00:20:02,820 --> 00:20:06,629
would be to set expectations about

00:20:04,409 --> 00:20:09,899
review timing you could have the bot up

00:20:06,629 --> 00:20:11,999
front tell them by the way this is a

00:20:09,899 --> 00:20:13,679
side project of mine too it might take

00:20:11,999 --> 00:20:16,169
me a week to get back to you and setting

00:20:13,679 --> 00:20:17,489
expectations will mean it is much better

00:20:16,169 --> 00:20:20,789
for both the contributor and the

00:20:17,489 --> 00:20:22,950
maintainer and they've got loads more

00:20:20,789 --> 00:20:24,720
bots so things like work in progress to

00:20:22,950 --> 00:20:26,460
do and the great thing with the robot

00:20:24,720 --> 00:20:28,289
framework is as well as giving you a

00:20:26,460 --> 00:20:30,690
framework to build BOTS they also host

00:20:28,289 --> 00:20:34,200
them as well so you don't have to deploy

00:20:30,690 --> 00:20:35,820
these on your own infrastructure as I

00:20:34,200 --> 00:20:37,769
maintain I learn to easily release

00:20:35,820 --> 00:20:41,639
updates so I can do better things with

00:20:37,769 --> 00:20:43,139
my time releases are complex releases

00:20:41,639 --> 00:20:45,059
are sometimes the most challenging thing

00:20:43,139 --> 00:20:47,039
you have to do as someone who's managing

00:20:45,059 --> 00:20:48,509
a project you might have to deploy to

00:20:47,039 --> 00:20:51,899
service if you're running as a service

00:20:48,509 --> 00:20:54,299
you release two repositories or CDNs you

00:20:51,899 --> 00:20:56,039
typically have some closing of issues

00:20:54,299 --> 00:20:57,210
tagging branch twiddling you know you

00:20:56,039 --> 00:20:59,159
might have to close a bunch of branches

00:20:57,210 --> 00:21:01,019
you have to increment version numbers

00:20:59,159 --> 00:21:02,999
you have to communicate changes there's

00:21:01,019 --> 00:21:05,460
a lot of stuff you have to do and it's a

00:21:02,999 --> 00:21:07,230
pain one of the tools that I've found

00:21:05,460 --> 00:21:09,119
really quite useful recently as a thing

00:21:07,230 --> 00:21:10,440
called semantic release and I'll explain

00:21:09,119 --> 00:21:12,179
it in a little bit more detail because

00:21:10,440 --> 00:21:14,580
it's it's quite tricky to get your head

00:21:12,179 --> 00:21:16,230
around the first thing it relies on is a

00:21:14,580 --> 00:21:17,249
thing called semantic versioning just

00:21:16,230 --> 00:21:18,250
have interests it hands up if you know

00:21:17,249 --> 00:21:20,920
what semantic version

00:21:18,250 --> 00:21:26,380
is okay loads do you wanna explain

00:21:20,920 --> 00:21:28,180
Patrick okay so yeah semantic versioning

00:21:26,380 --> 00:21:29,560
is basically a set of rules about how

00:21:28,180 --> 00:21:32,110
you manage version numbers and which

00:21:29,560 --> 00:21:33,940
ones you increment it's it's a very

00:21:32,110 --> 00:21:37,780
useful tool to use although there's a

00:21:33,940 --> 00:21:39,310
lot of ambiguity in practice so with

00:21:37,780 --> 00:21:41,620
semantic release it combines two

00:21:39,310 --> 00:21:43,660
concepts semantic versioning and the

00:21:41,620 --> 00:21:46,150
concept of semantic commit messages a

00:21:43,660 --> 00:21:48,790
lot of commit messages that you see will

00:21:46,150 --> 00:21:51,010
be next to useless one-liners and

00:21:48,790 --> 00:21:52,540
sometimes they put a lot of superfluous

00:21:51,010 --> 00:21:54,180
detail coming up with a good commit

00:21:52,540 --> 00:21:56,800
message is actually quite challenging

00:21:54,180 --> 00:21:58,480
semantic commit messages have a set of

00:21:56,800 --> 00:22:00,520
rules about how you should construct

00:21:58,480 --> 00:22:02,770
your commit message so for example the

00:22:00,520 --> 00:22:05,020
first few characters are the type is it

00:22:02,770 --> 00:22:06,130
a chore is a documentation update is it

00:22:05,020 --> 00:22:09,280
a feature is it a fix

00:22:06,130 --> 00:22:11,410
there's conventions for indicating

00:22:09,280 --> 00:22:13,860
breaking changes so it provides a good

00:22:11,410 --> 00:22:15,970
set of rules about your commit messages

00:22:13,860 --> 00:22:18,790
semantic release combines these all

00:22:15,970 --> 00:22:20,260
together so commit messages dictate the

00:22:18,790 --> 00:22:21,910
version number so what it can do is it

00:22:20,260 --> 00:22:23,860
can look at your commit history at the

00:22:21,910 --> 00:22:25,960
point you merge a branch look at all the

00:22:23,860 --> 00:22:27,430
semantic messages and work out which of

00:22:25,960 --> 00:22:30,190
the three version numbers to increment

00:22:27,430 --> 00:22:31,960
it will tag your repository it will

00:22:30,190 --> 00:22:33,670
generate release notes and again those

00:22:31,960 --> 00:22:35,860
release notes are generated from your

00:22:33,670 --> 00:22:39,160
semantic commit messages it will deploy

00:22:35,860 --> 00:22:42,070
packages to to github as zip files to

00:22:39,160 --> 00:22:44,350
NPM and other package managers and it

00:22:42,070 --> 00:22:45,880
the great thing is it allows continuous

00:22:44,350 --> 00:22:48,190
deployment of libraries and frameworks

00:22:45,880 --> 00:22:50,410
which is something that not many people

00:22:48,190 --> 00:22:52,240
do and we've got an open source project

00:22:50,410 --> 00:22:53,770
at scott logic we've been maintaining

00:22:52,240 --> 00:22:55,990
for a while and we actually practice

00:22:53,770 --> 00:22:58,360
continuous deployment which means every

00:22:55,990 --> 00:23:01,410
time we make a change we release because

00:22:58,360 --> 00:23:04,510
it's easy now and why wouldn't you

00:23:01,410 --> 00:23:06,100
manage vulnerabilities licenses yeah all

00:23:04,510 --> 00:23:08,380
that good stuff I'm not going to labor

00:23:06,100 --> 00:23:10,030
this too much because most of the

00:23:08,380 --> 00:23:12,070
speakers this morning have covered this

00:23:10,030 --> 00:23:14,470
topic but the issues you're mainly

00:23:12,070 --> 00:23:16,600
concerned with are my dependencies up to

00:23:14,470 --> 00:23:18,940
date are there abilities that affect me

00:23:16,600 --> 00:23:20,260
have I violated license terms and so on

00:23:18,940 --> 00:23:23,400
yeah we're getting depressing again

00:23:20,260 --> 00:23:25,930
aren't we all my dependencies up to date

00:23:23,400 --> 00:23:27,730
Jamie I think it was from github pointed

00:23:25,930 --> 00:23:29,560
out this one green keeper so what green

00:23:27,730 --> 00:23:31,750
keeper does is it looks at all your

00:23:29,560 --> 00:23:33,730
dependencies and every time it

00:23:31,750 --> 00:23:35,800
sees a new release of one of these

00:23:33,730 --> 00:23:37,840
dependencies it creates a branch on your

00:23:35,800 --> 00:23:40,150
repository runs your tests and lets you

00:23:37,840 --> 00:23:41,830
know whether it's safe to merge it's a

00:23:40,150 --> 00:23:43,840
nice idea in practice but to be

00:23:41,830 --> 00:23:46,090
perfectly honest I haven't found it

00:23:43,840 --> 00:23:50,800
terribly useful it creates a lot of

00:23:46,090 --> 00:23:53,170
noise personally a lot of the issues I

00:23:50,800 --> 00:23:54,580
find are semantic semantic versioning

00:23:53,170 --> 00:23:55,900
has a set of rules but the rules

00:23:54,580 --> 00:23:58,000
themselves have a large amount of

00:23:55,900 --> 00:24:00,130
ambiguity what someone might consider to

00:23:58,000 --> 00:24:02,020
be a bug you might consider to be a

00:24:00,130 --> 00:24:04,090
feature and if you disagree about that

00:24:02,020 --> 00:24:06,700
tools like greenkeeper aren't going to

00:24:04,090 --> 00:24:09,280
help you I generally prefer to pin

00:24:06,700 --> 00:24:11,710
version numbers and only update my

00:24:09,280 --> 00:24:14,140
dependencies when I need to because

00:24:11,710 --> 00:24:15,550
oftentimes if you just go for automatic

00:24:14,140 --> 00:24:16,960
updating and you've got a large number

00:24:15,550 --> 00:24:20,290
of dependencies you'll find it just

00:24:16,960 --> 00:24:22,120
breaks so here it might work for you to

00:24:20,290 --> 00:24:23,500
be honest have there been any disclosed

00:24:22,120 --> 00:24:25,600
vulnerabilities and again there are lots

00:24:23,500 --> 00:24:28,360
of products out there

00:24:25,600 --> 00:24:29,950
snick is a yet another one again it will

00:24:28,360 --> 00:24:31,780
do the usual thing it will keep an eye

00:24:29,950 --> 00:24:33,790
on your dependencies if anything has

00:24:31,780 --> 00:24:37,090
been disclosed it will inform you in

00:24:33,790 --> 00:24:38,890
this case by github have I violated any

00:24:37,090 --> 00:24:41,500
of my license terms again there are lots

00:24:38,890 --> 00:24:43,180
and lots of products out there within

00:24:41,500 --> 00:24:46,120
scott logic actually for a bit of fun we

00:24:43,180 --> 00:24:49,150
created a little tool that would crawl

00:24:46,120 --> 00:24:50,980
all the dependencies of a a package on

00:24:49,150 --> 00:24:52,930
on npm so that's the JavaScript

00:24:50,980 --> 00:24:55,720
repository and as you'll have seen from

00:24:52,930 --> 00:24:58,270
left pad JavaScript applications are

00:24:55,720 --> 00:25:00,490
generally built up of thousands of very

00:24:58,270 --> 00:25:02,260
very little parts and unfortunately a

00:25:00,490 --> 00:25:05,700
lot of the problems you have with

00:25:02,260 --> 00:25:08,740
vulnerabilities licenses and so on are

00:25:05,700 --> 00:25:11,230
massively inflated in the JavaScript

00:25:08,740 --> 00:25:13,510
world so we we built this little tool

00:25:11,230 --> 00:25:17,620
and this is looking at electron which is

00:25:13,510 --> 00:25:19,570
a html5 container and you can see all

00:25:17,620 --> 00:25:21,010
the different licenses in the blue pills

00:25:19,570 --> 00:25:22,390
I know it's not terribly readable all

00:25:21,010 --> 00:25:23,890
the blue pills at the top tell you all

00:25:22,390 --> 00:25:25,870
the different licenses that have

00:25:23,890 --> 00:25:27,880
occurred in the thousand dependencies of

00:25:25,870 --> 00:25:29,590
electron and funnily enough we found

00:25:27,880 --> 00:25:32,140
this thing called JSON fi at the bottom

00:25:29,590 --> 00:25:34,780
which doesn't have a license at all and

00:25:32,140 --> 00:25:36,220
if you know anything about licensing you

00:25:34,780 --> 00:25:37,300
know you've got to do is google this if

00:25:36,220 --> 00:25:41,440
something doesn't actually express a

00:25:37,300 --> 00:25:42,850
license you cannot use it so version one

00:25:41,440 --> 00:25:44,440
point eight point two of electron you

00:25:42,850 --> 00:25:46,180
can't use it

00:25:44,440 --> 00:25:48,370
so it's a bit crazy the funny thing is

00:25:46,180 --> 00:25:51,130
if you look at JSON if I it gets worse

00:25:48,370 --> 00:25:52,930
it's actually a in the documentation for

00:25:51,130 --> 00:25:54,370
the project it says this is some code

00:25:52,930 --> 00:25:56,590
that was created by Douglas Crockford

00:25:54,370 --> 00:26:02,440
that I've copied pasted put on github

00:25:56,590 --> 00:26:04,240
and released marvelous yeah I must admit

00:26:02,440 --> 00:26:06,940
I think people are turning a blind eye

00:26:04,240 --> 00:26:11,920
to this it's a difficult problem but

00:26:06,940 --> 00:26:13,450
yeah I'm not gonna going to that okay

00:26:11,920 --> 00:26:16,030
the final thing I wanted to talk about

00:26:13,450 --> 00:26:17,260
is I want to enforce my license

00:26:16,030 --> 00:26:18,490
requirements and that's something that

00:26:17,260 --> 00:26:20,620
hasn't been covered this morning a lot

00:26:18,490 --> 00:26:23,320
of what's been talked about is the

00:26:20,620 --> 00:26:25,420
license of the things you depend on I'm

00:26:23,320 --> 00:26:27,160
talking about as an O as someone who's

00:26:25,420 --> 00:26:31,660
maintaining an open-source project I

00:26:27,160 --> 00:26:33,940
want to be sure that contributions from

00:26:31,660 --> 00:26:37,030
third parties are fit for purpose and I

00:26:33,940 --> 00:26:38,950
can use them so as a contributor I want

00:26:37,030 --> 00:26:40,600
to I want to ensure that a contributor

00:26:38,950 --> 00:26:43,180
is authorized to submit that piece of

00:26:40,600 --> 00:26:44,770
work and I also want to ensure that my

00:26:43,180 --> 00:26:46,420
project can then distribute their work

00:26:44,770 --> 00:26:47,860
and their if a couple of different ways

00:26:46,420 --> 00:26:49,960
of doing this one of them is a

00:26:47,860 --> 00:26:52,780
contributor License Agreement so that's

00:26:49,960 --> 00:26:55,420
where you invite all contributors to

00:26:52,780 --> 00:26:58,360
sign a legal agreements which basically

00:26:55,420 --> 00:26:59,620
enforces those two principles there's

00:26:58,360 --> 00:27:00,880
another one which is a more lightweight

00:26:59,620 --> 00:27:03,430
approach called the developer

00:27:00,880 --> 00:27:06,100
certificate of origin and most large

00:27:03,430 --> 00:27:08,800
enterprises opt for the the CLA the

00:27:06,100 --> 00:27:11,430
contributors License Agreement I think I

00:27:08,800 --> 00:27:13,660
believe it's a bit more watertight

00:27:11,430 --> 00:27:15,460
unfortunately both require significant

00:27:13,660 --> 00:27:18,010
overhead every single contribution every

00:27:15,460 --> 00:27:20,170
single commit requires you to to check

00:27:18,010 --> 00:27:22,720
that either the CLA or the DCO has been

00:27:20,170 --> 00:27:24,100
signed and when I first started working

00:27:22,720 --> 00:27:25,360
with finis back when it was called

00:27:24,100 --> 00:27:26,890
simply foundation they didn't actually

00:27:25,360 --> 00:27:29,470
have an existing mechanism to enforce

00:27:26,890 --> 00:27:31,030
this check so they had a number of open

00:27:29,470 --> 00:27:32,410
source projects on the website and I

00:27:31,030 --> 00:27:35,260
believe someone was having to manually

00:27:32,410 --> 00:27:36,400
check the commits and I thought let's

00:27:35,260 --> 00:27:39,250
have a look see if there are any tools

00:27:36,400 --> 00:27:41,110
out there and what I found was there

00:27:39,250 --> 00:27:44,980
weren't any tools that actually works

00:27:41,110 --> 00:27:46,510
for for finis and the problem is if

00:27:44,980 --> 00:27:48,220
you're tackling two things the first

00:27:46,510 --> 00:27:50,950
thing is you need a process to allow

00:27:48,220 --> 00:27:52,960
people to sign legal agreements and then

00:27:50,950 --> 00:27:54,520
you need the the boring mechanical

00:27:52,960 --> 00:27:57,789
process that just checks all the commits

00:27:54,520 --> 00:27:59,320
against a list of people who have signed

00:27:57,789 --> 00:28:01,869
and there were already frameworks and

00:27:59,320 --> 00:28:03,720
BOTS and tools out there that did both

00:28:01,869 --> 00:28:05,710
but the problem with conte with

00:28:03,720 --> 00:28:08,019
contributes of license agreements is

00:28:05,710 --> 00:28:09,669
they're often quite bespoke as an

00:28:08,019 --> 00:28:10,779
example I checked JP Morgan's this

00:28:09,669 --> 00:28:13,690
morning when they were talking about

00:28:10,779 --> 00:28:15,489
perspective their CLA approach involves

00:28:13,690 --> 00:28:17,259
printing a document signing it and

00:28:15,489 --> 00:28:19,600
emailing it someone everyone has a

00:28:17,259 --> 00:28:21,009
slightly different approach so to my

00:28:19,600 --> 00:28:23,499
mind the only way to really make this

00:28:21,009 --> 00:28:26,889
work would be to D couple or to allow

00:28:23,499 --> 00:28:29,889
each institution organization to manage

00:28:26,889 --> 00:28:32,229
how CLA signing is is performed and then

00:28:29,889 --> 00:28:34,629
create a bot that checks against a white

00:28:32,229 --> 00:28:36,190
list of contributors so that's yet

00:28:34,629 --> 00:28:39,700
another one of my hobby projects that I

00:28:36,190 --> 00:28:41,590
built and the great thing is it's used

00:28:39,700 --> 00:28:43,359
by finis and within about six months

00:28:41,590 --> 00:28:46,149
I've got quite a lot of other users

00:28:43,359 --> 00:28:48,789
gauge as a thought works projects predix

00:28:46,149 --> 00:28:51,519
so using it for their style guides dev

00:28:48,789 --> 00:28:52,929
color gardius stores skylights there are

00:28:51,519 --> 00:28:54,849
quite a lot of people using this little

00:28:52,929 --> 00:28:56,190
bot that I created now which is a kind

00:28:54,849 --> 00:28:58,389
of it's a great feeling

00:28:56,190 --> 00:29:00,190
so what happens is whenever someone

00:28:58,389 --> 00:29:01,899
creates a pull request the bot pops up

00:29:00,190 --> 00:29:03,849
and says oh by the way you need to sign

00:29:01,899 --> 00:29:05,289
this contributed license agreement so

00:29:03,849 --> 00:29:09,190
again it's so it's a very friendly way

00:29:05,289 --> 00:29:09,519
of enforcing this legal requirements so

00:29:09,190 --> 00:29:13,419
yeah

00:29:09,519 --> 00:29:15,039
finally to wrap up use automation to

00:29:13,419 --> 00:29:16,899
make life easier for contributors and

00:29:15,039 --> 00:29:19,119
maintainer x' and there are a lot of

00:29:16,899 --> 00:29:21,369
good tools out there I've only really

00:29:19,119 --> 00:29:24,609
scratched the surface but again rather

00:29:21,369 --> 00:29:24,999
than looking for shiny tools don't do

00:29:24,609 --> 00:29:26,769
that

00:29:24,999 --> 00:29:28,419
think about the requirements and the

00:29:26,769 --> 00:29:30,419
needs of the contributor and the

00:29:28,419 --> 00:29:32,349
maintainer and then find tools that fit

00:29:30,419 --> 00:29:34,059
they allow you to reduce your

00:29:32,349 --> 00:29:36,070
maintenance overhead and allow you to

00:29:34,059 --> 00:29:38,049
focus on on the real problem the real

00:29:36,070 --> 00:29:41,799
business value which is building a great

00:29:38,049 --> 00:29:43,779
library or a framework or at all and if

00:29:41,799 --> 00:29:45,759
a suitable tool doesn't exist build it

00:29:43,779 --> 00:29:47,830
an open source it as I did with the the

00:29:45,759 --> 00:29:49,960
CLA bot one other thing I learned from

00:29:47,830 --> 00:29:51,609
doing the CLA bot and a few other open

00:29:49,960 --> 00:29:53,590
source projects is it can be a bit

00:29:51,609 --> 00:29:55,779
lonely doing open source at times you

00:29:53,590 --> 00:29:58,059
create something and you sit there

00:29:55,779 --> 00:29:59,529
anything no one's using it no one's

00:29:58,059 --> 00:30:01,330
saying anything and the interesting

00:29:59,529 --> 00:30:03,879
thing is he only finds a lot of your

00:30:01,330 --> 00:30:05,739
users when you actually break it it's

00:30:03,879 --> 00:30:07,869
quite it's quite good fun I've had a few

00:30:05,739 --> 00:30:10,059
projects where I've known to me

00:30:07,869 --> 00:30:11,510
broken something flood of issues never

00:30:10,059 --> 00:30:13,190
heard anything from these people

00:30:11,510 --> 00:30:17,120
in the past but all of a sudden they all

00:30:13,190 --> 00:30:19,400
want to shout at me so yeah so basically

00:30:17,120 --> 00:30:21,650
if you as a take-home message if you use

00:30:19,400 --> 00:30:24,410
anything on github hit the star button

00:30:21,650 --> 00:30:27,170
it makes people happy okay final

00:30:24,410 --> 00:30:30,470
thoughts though open-source software is

00:30:27,170 --> 00:30:31,460
built by people and I've talked a lot at

00:30:30,470 --> 00:30:34,460
the beginning or a bit at the beginning

00:30:31,460 --> 00:30:35,990
about their culture now these tools will

00:30:34,460 --> 00:30:37,460
help you a little bit with the culture

00:30:35,990 --> 00:30:40,310
but you can only go so far

00:30:37,460 --> 00:30:43,360
with with tools and BOTS and automation

00:30:40,310 --> 00:30:45,440
and what I found quite useful our

00:30:43,360 --> 00:30:48,410
collaboration tools things like slack

00:30:45,440 --> 00:30:50,540
skype hangouts it's a little bit weird

00:30:48,410 --> 00:30:52,190
when you end up on on meetings I mean I

00:30:50,540 --> 00:30:54,500
guess with finish we do this as well we

00:30:52,190 --> 00:30:56,120
have a distributed team of people often

00:30:54,500 --> 00:30:57,350
who have not met each other and it can

00:30:56,120 --> 00:30:59,480
be a little bit real at first but

00:30:57,350 --> 00:31:01,700
there's a huge amount of benefit to

00:30:59,480 --> 00:31:03,890
actually talking to people face-to-face

00:31:01,700 --> 00:31:05,960
or at least through videos cause I've

00:31:03,890 --> 00:31:07,580
had a chat with people in the babel team

00:31:05,960 --> 00:31:10,610
for example it's a bit funny at first

00:31:07,580 --> 00:31:13,580
but it means you can discuss some of the

00:31:10,610 --> 00:31:15,290
things like your needs your motivations

00:31:13,580 --> 00:31:17,600
your personal situation which will

00:31:15,290 --> 00:31:21,260
really help when that person comes to

00:31:17,600 --> 00:31:22,790
contribute or vice versa so tools are

00:31:21,260 --> 00:31:25,670
great but do not forget the human

00:31:22,790 --> 00:31:27,320
element and that's it so hopefully

00:31:25,670 --> 00:31:30,190
that's been useful to you and good luck

00:31:27,320 --> 00:31:30,190
with your projects

00:31:34,860 --> 00:31:39,399
say anyone's got any questions as long

00:31:38,110 --> 00:32:04,120
as they're not about security or

00:31:39,399 --> 00:32:07,480
licenses right yeah oh yeah pie-ya

00:32:04,120 --> 00:32:09,220
there are some quite esoteric version

00:32:07,480 --> 00:32:10,630
numbering I can't remember which project

00:32:09,220 --> 00:32:12,100
it is whether it's Linux or something

00:32:10,630 --> 00:32:13,990
there is one where every new release

00:32:12,100 --> 00:32:17,230
they just add another digit and there

00:32:13,990 --> 00:32:18,840
they're heading towards PI so is it is

00:32:17,230 --> 00:32:22,269
that they're using PI versioning as well

00:32:18,840 --> 00:32:33,279
no it's just coincidental yeah that's

00:32:22,269 --> 00:32:35,799
called romantic versioning so go yeah

00:32:33,279 --> 00:32:37,240
the great thing about github actions was

00:32:35,799 --> 00:32:38,679
I actually started building something

00:32:37,240 --> 00:32:40,269
which looked a bit like github actions

00:32:38,679 --> 00:32:43,389
and I was really annoyed when github

00:32:40,269 --> 00:32:46,809
actions appeared because when I wrote

00:32:43,389 --> 00:32:48,010
the CLA bot I realized that the vast

00:32:46,809 --> 00:32:50,320
amount of what I was doing was

00:32:48,010 --> 00:32:52,779
fundamentally plumbing and actually if

00:32:50,320 --> 00:32:56,139
we go back to back back back back back

00:32:52,779 --> 00:32:58,000
back back a lot of these features apps

00:32:56,139 --> 00:33:00,580
here things like work in progress all

00:32:58,000 --> 00:33:02,049
that does is it checks the title of a

00:33:00,580 --> 00:33:04,330
pull request and if it has the

00:33:02,049 --> 00:33:08,679
characters WIP in it it prohibits

00:33:04,330 --> 00:33:10,480
submerge it's an if this else that it's

00:33:08,679 --> 00:33:13,960
it you can express it in five lines of

00:33:10,480 --> 00:33:15,669
code so I did start trying to create a a

00:33:13,960 --> 00:33:18,279
sort of live coding environment where

00:33:15,669 --> 00:33:19,870
you could construct automations but then

00:33:18,279 --> 00:33:21,429
I found out that github has done it so

00:33:19,870 --> 00:33:27,279
yeah I think it's a wonderful idea

00:33:21,429 --> 00:33:31,440
basically anyway you just know you gonna

00:33:27,279 --> 00:33:31,440
add another digit now 3.14159

00:33:33,530 --> 00:33:41,180
I don't yeah I'm some scrap before but I

00:33:36,590 --> 00:33:43,190
had Julie a language and you're talking

00:33:41,180 --> 00:33:45,940
Linux and Windows was set package which

00:33:43,190 --> 00:33:49,420
installed enveloping Linux doesn't

00:33:45,940 --> 00:33:49,420
windows yeah

00:33:57,670 --> 00:34:03,560
replied to the issue the person who

00:34:02,150 --> 00:34:07,070
replied quickly we could have entered

00:34:03,560 --> 00:34:12,860
into yeah productive let's get this

00:34:07,070 --> 00:34:14,870
effects button but thank you to the guy

00:34:12,860 --> 00:34:16,100
at guy I sit next to at work I think

00:34:14,870 --> 00:34:18,350
probably holds the record for this he

00:34:16,100 --> 00:34:20,480
submitted a fix to Google closure and

00:34:18,350 --> 00:34:23,899
that he didn't hear back from them for

00:34:20,480 --> 00:34:25,610
two years and eventually he got what was

00:34:23,899 --> 00:34:27,830
quite a grumpy code review from someone

00:34:25,610 --> 00:34:29,690
two years later and to his credit he

00:34:27,830 --> 00:34:30,679
actually installed all the tools again

00:34:29,690 --> 00:34:32,960
he couldn't remember what it was had

00:34:30,679 --> 00:34:34,879
done but he actually worked with this

00:34:32,960 --> 00:34:41,210
guy to finally get his code merged but

00:34:34,879 --> 00:34:43,790
yeah two years yeah it's it's a funny

00:34:41,210 --> 00:34:49,129
it's a funny thing anyone else so how we

00:34:43,790 --> 00:34:54,470
redone for time I won't go in one more

00:34:49,129 --> 00:35:02,470
question okay yeah any more questions or

00:34:54,470 --> 00:35:02,470
he atomist

00:35:03,760 --> 00:35:23,660
they're trying to do is all right it's

00:35:14,059 --> 00:35:25,190
the same CI pipeline yeah yeah I've not

00:35:23,660 --> 00:35:32,480
I've not had a go with atomist I've seen

00:35:25,190 --> 00:35:35,150
it's a commercial product isn't it yeah

00:35:32,480 --> 00:35:37,670
now I don't know much about that but I

00:35:35,150 --> 00:35:44,150
mean anything that can make automation

00:35:37,670 --> 00:35:48,650
and CI tolling is know I've not used it

00:35:44,150 --> 00:35:50,240
hey Kylie its smell disappeared let's

00:35:48,650 --> 00:35:52,250
begin the next speaker all right thanks

00:35:50,240 --> 00:35:55,050
so much for listening everyone

00:35:52,250 --> 00:35:58,539
[Applause]

00:35:55,050 --> 00:35:58,539

YouTube URL: https://www.youtube.com/watch?v=pEWRMtCibFw


