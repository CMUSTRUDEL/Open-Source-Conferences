Title: Building Mission- and Business-Critical Software with Open Source - Greg Olson - OSSF 2018
Publication date: 2019-03-14
Playlist: Open Source Strategy Forum 2018
Description: 
	Speaker: Greg Olson, Principal Consultant, Open Source Sense LLC
Presentation: Building Mission- and Business-Critical Software with Open Source

Today, open source dominates IT and communications infrastructure from the cloud to corporate data centers and the emerging edge. But open source with its rapid pace of development, frequent releases, and prolific patch set defies traditional practices and conditions for building mission- and business-critical software: stability, auditability and standards-compliance.
 
This talk will examine how companies address this “impedance mismatch” in consuming, integrating and deploying open source in applications that demand predictability and sustainability. In particular, the presentation will cover
 

(re)defining mission- and business-critical in the context of open source
technology-centric and process-based approaches to OSS-derived product life-cycles
forking and minimizing technical debt
building community visibility to support derived product roadmaps
Captions: 
	00:00:00,000 --> 00:00:06,059
[Music]

00:00:09,019 --> 00:00:16,920
and I'm with it's a small specialized

00:00:14,099 --> 00:00:18,529
consultancy called open-source sense we

00:00:16,920 --> 00:00:20,789
actually used to be Linux Foundation

00:00:18,529 --> 00:00:23,369
consulting until we ran into problems

00:00:20,789 --> 00:00:26,550
with non-disclosure agreements and

00:00:23,369 --> 00:00:29,010
foundations so we spun the the

00:00:26,550 --> 00:00:32,160
organization out I'm going to talk today

00:00:29,010 --> 00:00:34,440
about what it takes to make business

00:00:32,160 --> 00:00:38,940
critical software our mission critical

00:00:34,440 --> 00:00:42,300
software using open open source and it's

00:00:38,940 --> 00:00:43,770
actually a very very big topic so what

00:00:42,300 --> 00:00:47,430
we're gonna get here is a very quick

00:00:43,770 --> 00:00:50,579
overview and for those of you who have

00:00:47,430 --> 00:00:52,770
questions and want to drill down please

00:00:50,579 --> 00:00:56,190
find me after this session weekend we

00:00:52,770 --> 00:00:58,910
can talk it really could easily spend we

00:00:56,190 --> 00:01:03,480
could easily spend a week on this topic

00:00:58,910 --> 00:01:04,920
in terms of the details now one thing is

00:01:03,480 --> 00:01:08,810
as we go through this I'm kind of

00:01:04,920 --> 00:01:11,939
curious the orientation of this group

00:01:08,810 --> 00:01:13,430
are you folks how many how many people

00:01:11,939 --> 00:01:17,220
are more interested in the strategic

00:01:13,430 --> 00:01:23,040
elements versus the nuts and bolts best

00:01:17,220 --> 00:01:27,560
practices strategic nuts and bolts best

00:01:23,040 --> 00:01:31,350
practices yeah we got 5050 okay well I'm

00:01:27,560 --> 00:01:34,020
try and cover both again if you want

00:01:31,350 --> 00:01:35,670
more depth find me after well I'd be

00:01:34,020 --> 00:01:37,409
glad to drill down with you so the

00:01:35,670 --> 00:01:39,060
agenda that we'll talk about today first

00:01:37,409 --> 00:01:41,790
of all you know what what do we mean by

00:01:39,060 --> 00:01:43,619
business critical software and

00:01:41,790 --> 00:01:45,270
particularly in the context of open

00:01:43,619 --> 00:01:48,750
source next we're going to talk about

00:01:45,270 --> 00:01:52,579
the difference between technology and

00:01:48,750 --> 00:01:54,990
engineering focused approaches and

00:01:52,579 --> 00:01:58,350
process based approaches which are

00:01:54,990 --> 00:02:00,479
typical to large organizations next

00:01:58,350 --> 00:02:05,520
we're going to talk also about the issue

00:02:00,479 --> 00:02:07,259
of forking and technical debt and maybe

00:02:05,520 --> 00:02:09,899
a little bit about building visibility

00:02:07,259 --> 00:02:12,420
within communities but mostly I want to

00:02:09,899 --> 00:02:14,490
get down to the elements that are

00:02:12,420 --> 00:02:17,430
necessary in order to ensure that we've

00:02:14,490 --> 00:02:20,069
got business critical software using

00:02:17,430 --> 00:02:22,319
open source so what I mean by business

00:02:20,069 --> 00:02:24,000
critical software here is systems are

00:02:22,319 --> 00:02:26,310
applications that are important to the

00:02:24,000 --> 00:02:29,310
strategy or the operation of the

00:02:26,310 --> 00:02:31,170
business and have to operate whenever

00:02:29,310 --> 00:02:33,090
the business is operating so in other

00:02:31,170 --> 00:02:36,630
words they're important they have to be

00:02:33,090 --> 00:02:40,260
reliable and some requirements are

00:02:36,630 --> 00:02:44,099
implied high availability a recovery

00:02:40,260 --> 00:02:46,890
capability comprehensive security expert

00:02:44,099 --> 00:02:48,810
support behind the package these are the

00:02:46,890 --> 00:02:50,819
things that we generally mean when we

00:02:48,810 --> 00:02:53,160
talk about business critical software

00:02:50,819 --> 00:02:54,810
you folks are from the financial

00:02:53,160 --> 00:02:56,880
services industry so you've already got

00:02:54,810 --> 00:02:59,819
a lot of software in this in this

00:02:56,880 --> 00:03:02,850
category I'm quite sure now when it

00:02:59,819 --> 00:03:06,299
comes to the best practices for building

00:03:02,850 --> 00:03:09,810
these kind of systems this is this is

00:03:06,299 --> 00:03:11,760
not new for our in-house operational

00:03:09,810 --> 00:03:14,280
systems and I'm sure that all of you

00:03:11,760 --> 00:03:17,160
have got mature practices in your

00:03:14,280 --> 00:03:19,980
organizations for the critical

00:03:17,160 --> 00:03:22,579
operational systems what's interesting

00:03:19,980 --> 00:03:25,680
here is that when we start talking about

00:03:22,579 --> 00:03:27,780
open source as opposed to completely

00:03:25,680 --> 00:03:29,190
in-house controlled applications the

00:03:27,780 --> 00:03:32,459
picture gets a little bit more

00:03:29,190 --> 00:03:34,560
complicated so the fact is now you're

00:03:32,459 --> 00:03:38,180
dealing with development that's

00:03:34,560 --> 00:03:40,560
happening elsewhere and if this is a

00:03:38,180 --> 00:03:42,720
core capability there's a lot of

00:03:40,560 --> 00:03:45,150
development happening elsewhere and so

00:03:42,720 --> 00:03:50,570
you've got everything from new features

00:03:45,150 --> 00:03:55,859
coming in vulnerabilities appearing on a

00:03:50,570 --> 00:03:58,980
random basis bug reports new releases on

00:03:55,859 --> 00:04:02,299
a regular schedule hopefully new

00:03:58,980 --> 00:04:05,459
requirements coming from the community

00:04:02,299 --> 00:04:07,350
dependencies creeping in from from new

00:04:05,459 --> 00:04:09,269
releases and new modules that are put

00:04:07,350 --> 00:04:11,850
into the package and then on the other

00:04:09,269 --> 00:04:13,530
side you've got big issues like you know

00:04:11,850 --> 00:04:14,940
which way is this project going are

00:04:13,530 --> 00:04:18,650
you're going to emphasize the things

00:04:14,940 --> 00:04:22,080
that I need to emphasize in my business

00:04:18,650 --> 00:04:25,140
and then how do we get clients involved

00:04:22,080 --> 00:04:26,270
in this project and and do they care and

00:04:25,140 --> 00:04:27,919
what about business part

00:04:26,270 --> 00:04:29,599
that are involved with this software and

00:04:27,919 --> 00:04:33,500
so now you've got all these other

00:04:29,599 --> 00:04:35,539
dimensions that are not under your

00:04:33,500 --> 00:04:37,159
in-house control and so what we're going

00:04:35,539 --> 00:04:40,789
to talk about today is how do we manage

00:04:37,159 --> 00:04:42,500
this new complexity now one of the

00:04:40,789 --> 00:04:44,000
things that's fundamental and I'm going

00:04:42,500 --> 00:04:48,970
to talk about a couple underlying

00:04:44,000 --> 00:04:54,319
concepts here to get started our

00:04:48,970 --> 00:04:57,259
companies are process oriented entities

00:04:54,319 --> 00:04:59,960
if you will basically industrial

00:04:57,259 --> 00:05:02,690
processes are used to build systems that

00:04:59,960 --> 00:05:07,099
are that are critical nor does it have

00:05:02,690 --> 00:05:10,909
to work top-down management formal

00:05:07,099 --> 00:05:13,819
methodologies processes with metrics all

00:05:10,909 --> 00:05:15,880
along the development cycle and then the

00:05:13,819 --> 00:05:20,360
relationships with the customers are

00:05:15,880 --> 00:05:22,460
governed by contracts and SLA s so all

00:05:20,360 --> 00:05:24,979
of this is locked down pretty tight in

00:05:22,460 --> 00:05:28,009
the contract environment on the other

00:05:24,979 --> 00:05:31,699
hand this part that's coming from open

00:05:28,009 --> 00:05:34,880
source is on a whole different basis so

00:05:31,699 --> 00:05:37,630
you've got communities based on

00:05:34,880 --> 00:05:40,039
essentially collaborative processes

00:05:37,630 --> 00:05:44,810
decisions are made not by top-down

00:05:40,039 --> 00:05:46,580
management but consensus and officialy

00:05:44,810 --> 00:05:48,620
around technical merit but it may

00:05:46,580 --> 00:05:52,039
actually not be so pure as that

00:05:48,620 --> 00:05:54,050
depending on the community the processes

00:05:52,039 --> 00:05:56,180
for deciding what goes into different

00:05:54,050 --> 00:05:59,029
releases and what gets fixed and what's

00:05:56,180 --> 00:06:01,310
get added depends on you know the

00:05:59,029 --> 00:06:04,400
sponsors of the community the developers

00:06:01,310 --> 00:06:07,009
may be the members of the community a

00:06:04,400 --> 00:06:08,840
lot of the mechanisms instead of formal

00:06:07,009 --> 00:06:11,750
processes are done with tools and

00:06:08,840 --> 00:06:15,650
scripts and the communication with the

00:06:11,750 --> 00:06:18,430
users is just through repositories

00:06:15,650 --> 00:06:21,080
wiki's it's a very sort of amorphous

00:06:18,430 --> 00:06:23,150
sort of connection now there may be more

00:06:21,080 --> 00:06:25,880
connection because of because of the

00:06:23,150 --> 00:06:28,789
nature of the internet but it's totally

00:06:25,880 --> 00:06:31,009
unstructured in general and so what this

00:06:28,789 --> 00:06:33,380
does is it creates a conceptual divide

00:06:31,009 --> 00:06:36,289
that is quite difficult for a lot of

00:06:33,380 --> 00:06:39,080
companies to deal with I worked with a

00:06:36,289 --> 00:06:40,070
number of clients that that had trouble

00:06:39,080 --> 00:06:42,550
understanding

00:06:40,070 --> 00:06:45,200
these differences and dealing with the

00:06:42,550 --> 00:06:46,700
impedance mismatch between these

00:06:45,200 --> 00:06:48,830
completely different approaches to

00:06:46,700 --> 00:06:51,200
software I'll talk a little bit about

00:06:48,830 --> 00:06:53,420
the mechanisms to do with that

00:06:51,200 --> 00:06:55,310
another thing that's critical is we talk

00:06:53,420 --> 00:06:59,000
about these mechanisms there's a lot of

00:06:55,310 --> 00:07:01,790
decisions that are different if the

00:06:59,000 --> 00:07:04,550
software that we're talking about is

00:07:01,790 --> 00:07:06,410
strategic to your business or whether

00:07:04,550 --> 00:07:08,480
it's just tactical and some of the

00:07:06,410 --> 00:07:10,280
characteristics to help you decide which

00:07:08,480 --> 00:07:12,710
we're dealing with is on the strategic

00:07:10,280 --> 00:07:15,430
side probably the most strategic thing

00:07:12,710 --> 00:07:17,540
is that is there's a unique ecosystem

00:07:15,430 --> 00:07:19,520
position that's critical here in other

00:07:17,540 --> 00:07:22,820
words the value proposition depends on

00:07:19,520 --> 00:07:27,640
say the University of this project as as

00:07:22,820 --> 00:07:29,810
a as a standard or is a common basis for

00:07:27,640 --> 00:07:32,210
interacting with the functionality that

00:07:29,810 --> 00:07:34,280
we want to bring to market another one

00:07:32,210 --> 00:07:37,790
is if we're trying to establish a new a

00:07:34,280 --> 00:07:39,620
new standard for doing something a new

00:07:37,790 --> 00:07:44,330
process interface for instance in the

00:07:39,620 --> 00:07:45,830
industry but strategic could also mean

00:07:44,330 --> 00:07:47,510
that the project just has unique

00:07:45,830 --> 00:07:49,280
functionality you can't find anywhere

00:07:47,510 --> 00:07:53,840
else so it's it's strategically

00:07:49,280 --> 00:07:57,080
important or the implementation is

00:07:53,840 --> 00:08:00,070
uniquely compatible with what you're

00:07:57,080 --> 00:08:04,370
doing in other words say it's the only

00:08:00,070 --> 00:08:06,020
it's the only no js' implementation and

00:08:04,370 --> 00:08:11,780
you're the rest of your system is done

00:08:06,020 --> 00:08:13,670
in no js' or or just in general the

00:08:11,780 --> 00:08:16,130
complexity and the nature this is so

00:08:13,670 --> 00:08:17,780
complicated that the switching costs to

00:08:16,130 --> 00:08:19,700
a different project or different

00:08:17,780 --> 00:08:20,000
technologies just too high to even think

00:08:19,700 --> 00:08:22,430
about

00:08:20,000 --> 00:08:25,310
so those things for strategic on the

00:08:22,430 --> 00:08:28,250
tactical side this is software that

00:08:25,310 --> 00:08:30,580
really there's no ecosystem issue at all

00:08:28,250 --> 00:08:33,950
it's more an incidental piece of code

00:08:30,580 --> 00:08:40,430
there's multiple implementations that

00:08:33,950 --> 00:08:42,169
you could pick you can use interfaces

00:08:40,430 --> 00:08:44,120
the interfaces are more or less

00:08:42,169 --> 00:08:50,600
interchangeable so you've got other

00:08:44,120 --> 00:08:52,430
options to these minor pieces another

00:08:50,600 --> 00:08:54,080
theme that you're going to hear

00:08:52,430 --> 00:08:56,840
throughout as we talk

00:08:54,080 --> 00:08:59,360
about the best practices is this one

00:08:56,840 --> 00:09:01,430
around modification of open source and

00:08:59,360 --> 00:09:04,730
the technical debt that accumulates as

00:09:01,430 --> 00:09:07,820
you modify it the reality is that

00:09:04,730 --> 00:09:09,680
modifying open source is very expensive

00:09:07,820 --> 00:09:11,480
now of course one of the one of the

00:09:09,680 --> 00:09:13,430
reasons open source is great is because

00:09:11,480 --> 00:09:16,160
you can change it if you need to but -

00:09:13,430 --> 00:09:19,730
and that can be very valuable but when

00:09:16,160 --> 00:09:21,590
you do that you you incur a big

00:09:19,730 --> 00:09:25,340
lifecycle cost which is generally called

00:09:21,590 --> 00:09:27,410
technical debt in addition to the

00:09:25,340 --> 00:09:29,270
initial design encoding of your change

00:09:27,410 --> 00:09:31,550
you're going to have to integrate and

00:09:29,270 --> 00:09:33,350
test that with every new release and

00:09:31,550 --> 00:09:37,310
patch that comes from the open source

00:09:33,350 --> 00:09:39,410
community forever and that just adds up

00:09:37,310 --> 00:09:42,080
especially as you get more and more of

00:09:39,410 --> 00:09:43,820
these it can add up terribly there are a

00:09:42,080 --> 00:09:45,920
couple things you can do to help with

00:09:43,820 --> 00:09:48,560
this if you take a modular approach so

00:09:45,920 --> 00:09:50,840
for instance instead of putting your

00:09:48,560 --> 00:09:52,910
patch in line with the open source code

00:09:50,840 --> 00:09:55,850
you just put a hook in it and it lives

00:09:52,910 --> 00:10:00,110
in a different file that can make the

00:09:55,850 --> 00:10:01,670
merging a lot cheaper another fact that

00:10:00,110 --> 00:10:06,710
you need to keep in mind is once you get

00:10:01,670 --> 00:10:09,530
to about 15 20 maybe 25 percent of the

00:10:06,710 --> 00:10:11,750
files get modified it would have been

00:10:09,530 --> 00:10:13,520
less expensive for you to start from

00:10:11,750 --> 00:10:14,090
scratch and build the whole thing by

00:10:13,520 --> 00:10:17,090
yourself

00:10:14,090 --> 00:10:20,300
that's how expensive this debt gets with

00:10:17,090 --> 00:10:22,010
all of the updates and the complications

00:10:20,300 --> 00:10:27,230
of merging with what comes from the

00:10:22,010 --> 00:10:28,790
community over time forking is when you

00:10:27,230 --> 00:10:30,350
say ah forget the community I'm just

00:10:28,790 --> 00:10:35,660
going to take this code and pretend I

00:10:30,350 --> 00:10:40,220
wrote it that that is that is an option

00:10:35,660 --> 00:10:42,010
with open source but you lose certain

00:10:40,220 --> 00:10:44,210
things when you do that certainly any

00:10:42,010 --> 00:10:47,690
association with the project brand or

00:10:44,210 --> 00:10:50,230
technology all of the contributions that

00:10:47,690 --> 00:10:54,260
would come from other community members

00:10:50,230 --> 00:10:56,390
the confidence about the integration

00:10:54,260 --> 00:10:58,460
because it's known to come from a

00:10:56,390 --> 00:11:01,570
reliable community all those things are

00:10:58,460 --> 00:11:04,910
lost now you've got a one-off code and

00:11:01,570 --> 00:11:07,460
any of the changes back in the community

00:11:04,910 --> 00:11:10,010
if you have any sort of connection

00:11:07,460 --> 00:11:13,100
with that basis are going to be lost you

00:11:10,010 --> 00:11:16,220
you you've gone your own way and so you

00:11:13,100 --> 00:11:19,310
know that may be okay but in a lot of

00:11:16,220 --> 00:11:22,370
cases it's it's painful down the road

00:11:19,310 --> 00:11:26,750
and and I've seen a lot of companies end

00:11:22,370 --> 00:11:32,089
up regretting this approach to be

00:11:26,750 --> 00:11:34,910
thought carefully so now I'm going to

00:11:32,089 --> 00:11:38,870
get down more into the nuts and bolts

00:11:34,910 --> 00:11:41,390
here a typical product development cycle

00:11:38,870 --> 00:11:44,200
looks something like this

00:11:41,390 --> 00:11:49,089
starts with product strategy definition

00:11:44,200 --> 00:11:52,760
planning product development after that

00:11:49,089 --> 00:11:54,680
the testing to qualify for release and

00:11:52,760 --> 00:11:57,560
then you launch and go into a cycle of

00:11:54,680 --> 00:11:59,570
maintenance and patching now I have to

00:11:57,560 --> 00:12:02,630
apologize that this is an old-fashioned

00:11:59,570 --> 00:12:04,880
waterfall okay but we don't have much

00:12:02,630 --> 00:12:06,980
time today and it's easier to lay this

00:12:04,880 --> 00:12:10,850
out in this context in the case of in

00:12:06,980 --> 00:12:13,820
the case of agile methodologies you

00:12:10,850 --> 00:12:16,160
typically have strategy and definition

00:12:13,820 --> 00:12:19,070
occurring upfront and then everything

00:12:16,160 --> 00:12:20,750
down through to launch becomes or

00:12:19,070 --> 00:12:24,050
actually to qualification as an

00:12:20,750 --> 00:12:26,300
iterative process instead but it's it

00:12:24,050 --> 00:12:28,790
contains the same elements and then

00:12:26,300 --> 00:12:31,610
you've got a next release that depending

00:12:28,790 --> 00:12:34,610
on how extensive it is it may go back to

00:12:31,610 --> 00:12:37,490
different places in this cycle this is

00:12:34,610 --> 00:12:41,029
familiar and your in-house systems to

00:12:37,490 --> 00:12:43,700
build high-quality business critical

00:12:41,029 --> 00:12:51,730
software it's probably built into this

00:12:43,700 --> 00:12:51,730
process already so with

00:12:53,740 --> 00:13:02,710
open-source we now need to build links

00:12:57,840 --> 00:13:04,090
into the outside world and so one place

00:13:02,710 --> 00:13:06,580
you're going to start is with the

00:13:04,090 --> 00:13:09,160
open-source community strategy and Don

00:13:06,580 --> 00:13:11,680
talked about this really from the

00:13:09,160 --> 00:13:16,960
specific aspect of contributing there's

00:13:11,680 --> 00:13:18,700
more to that it's has to do with your

00:13:16,960 --> 00:13:21,130
strategic relationships with the

00:13:18,700 --> 00:13:24,430
community and a planned approach about

00:13:21,130 --> 00:13:26,560
how involved you are going to be with

00:13:24,430 --> 00:13:28,690
this community in order to meet your

00:13:26,560 --> 00:13:32,320
business objectives and then how you're

00:13:28,690 --> 00:13:35,260
going to go about doing that at the

00:13:32,320 --> 00:13:36,880
beginning of the cycle you need to

00:13:35,260 --> 00:13:40,450
choose which open source you're going to

00:13:36,880 --> 00:13:41,980
use to build this capability and the the

00:13:40,450 --> 00:13:44,130
the most important of course of the

00:13:41,980 --> 00:13:46,630
strategic ones typically these are

00:13:44,130 --> 00:13:48,810
platform level decisions in other words

00:13:46,630 --> 00:13:51,010
we're going to build this beauty

00:13:48,810 --> 00:13:53,830
distributed computing environment on

00:13:51,010 --> 00:13:55,720
kubernetes and it's going to that that

00:13:53,830 --> 00:13:57,520
runt environment it is going to be

00:13:55,720 --> 00:14:02,140
mostly kubernetes so that would be a

00:13:57,520 --> 00:14:04,690
strategic decision for instance another

00:14:02,140 --> 00:14:08,620
thing that happens as soon as as soon as

00:14:04,690 --> 00:14:11,230
you begin to look at this you're going

00:14:08,620 --> 00:14:13,570
to realize that there are aspects that

00:14:11,230 --> 00:14:15,400
you want to keep proprietary and aspects

00:14:13,570 --> 00:14:17,770
that you want to contribute to the open

00:14:15,400 --> 00:14:19,840
source community and so you need to go

00:14:17,770 --> 00:14:21,550
through what we call differentiation

00:14:19,840 --> 00:14:24,520
analysis and I'll explain what that is

00:14:21,550 --> 00:14:27,130
in more detail but these decisions about

00:14:24,520 --> 00:14:30,700
what to open-source and what to keep are

00:14:27,130 --> 00:14:33,220
going to be chronic in a proprietary

00:14:30,700 --> 00:14:34,960
system the other thing you're going to

00:14:33,220 --> 00:14:36,820
do is you get down to product definition

00:14:34,960 --> 00:14:38,290
it's the tactical decision so okay what

00:14:36,820 --> 00:14:40,780
are all these other pieces that I'm

00:14:38,290 --> 00:14:42,130
going to pull in in an agile development

00:14:40,780 --> 00:14:46,300
environment these are going to occur

00:14:42,130 --> 00:14:47,980
iteratively as you cycle through the

00:14:46,300 --> 00:14:50,980
different the different levels that

00:14:47,980 --> 00:14:56,710
evolve at the different in the different

00:14:50,980 --> 00:14:58,330
sprints for instance then as you go to

00:14:56,710 --> 00:15:00,910
project planning you're going to have to

00:14:58,330 --> 00:15:04,210
also do an open-source integration plan

00:15:00,910 --> 00:15:07,319
and an open-source test plan to deal

00:15:04,210 --> 00:15:09,449
with the community related aspects

00:15:07,319 --> 00:15:12,009
then when you get to product development

00:15:09,449 --> 00:15:14,889
you're adding in addition to your own

00:15:12,009 --> 00:15:17,079
development the bringing in and

00:15:14,889 --> 00:15:20,769
integration of the open-source

00:15:17,079 --> 00:15:22,899
technologies immediately you're going to

00:15:20,769 --> 00:15:24,910
start with your open source test program

00:15:22,899 --> 00:15:29,170
which of course continues all the way

00:15:24,910 --> 00:15:30,490
through maintenance as you get into the

00:15:29,170 --> 00:15:32,350
product development pretty soon you're

00:15:30,490 --> 00:15:36,069
going to discover a bug and so you're

00:15:32,350 --> 00:15:38,170
gonna need to invoke a bug reporting and

00:15:36,069 --> 00:15:41,019
an approach to doing patches and up

00:15:38,170 --> 00:15:45,069
streaming of the fixes that you make and

00:15:41,019 --> 00:15:47,319
then finally we're going to manage the

00:15:45,069 --> 00:15:49,480
incoming patches from the community

00:15:47,319 --> 00:15:52,180
merge them into our code on an ongoing

00:15:49,480 --> 00:15:54,699
basis and then also of course you're

00:15:52,180 --> 00:15:57,610
going to get new releases typically

00:15:54,699 --> 00:16:00,009
major communities will release once or

00:15:57,610 --> 00:16:01,720
twice a year and you'll need to bring

00:16:00,009 --> 00:16:04,959
those in and merge them with all of your

00:16:01,720 --> 00:16:07,089
code so these are the interfaces to the

00:16:04,959 --> 00:16:09,399
outside world of open source communities

00:16:07,089 --> 00:16:12,939
which need to be designed in a way that

00:16:09,399 --> 00:16:16,839
preserve this business-critical kind of

00:16:12,939 --> 00:16:22,209
reliability in your system going to

00:16:16,839 --> 00:16:25,779
drill down now the community strategies

00:16:22,209 --> 00:16:28,269
will evolve as you go along inevitably

00:16:25,779 --> 00:16:29,470
because your company changes to the

00:16:28,269 --> 00:16:31,809
service you're building is going to

00:16:29,470 --> 00:16:34,540
change and the communities are gonna

00:16:31,809 --> 00:16:38,470
change so sorry the markets are going to

00:16:34,540 --> 00:16:40,870
change so but but of course you want to

00:16:38,470 --> 00:16:43,240
start with an orientation and a plan

00:16:40,870 --> 00:16:44,800
because there's many decisions down the

00:16:43,240 --> 00:16:47,800
road as we build the system that will

00:16:44,800 --> 00:16:52,179
depend upon what your strategy is around

00:16:47,800 --> 00:16:55,839
this technology so typically companies

00:16:52,179 --> 00:16:58,779
will pick a set of important open source

00:16:55,839 --> 00:17:00,819
projects and in general there will be

00:16:58,779 --> 00:17:04,600
all the ones that are strategic to the

00:17:00,819 --> 00:17:06,549
business in some way or other in those

00:17:04,600 --> 00:17:08,079
projects that are important to you you

00:17:06,549 --> 00:17:09,939
probably want to seek emitter and

00:17:08,079 --> 00:17:14,380
maintain your roles in those projects

00:17:09,939 --> 00:17:16,630
that gives you control influence and the

00:17:14,380 --> 00:17:20,439
ability to get patches into those

00:17:16,630 --> 00:17:22,059
products on an ongoing basis and those

00:17:20,439 --> 00:17:25,030
things are all important for controlling

00:17:22,059 --> 00:17:29,039
the direction and minimizing your

00:17:25,030 --> 00:17:31,120
overhead at working with the open source

00:17:29,039 --> 00:17:33,730
the other thing is you're going to want

00:17:31,120 --> 00:17:36,130
to adapt your development teams to the

00:17:33,730 --> 00:17:37,899
open source project culture now one

00:17:36,130 --> 00:17:39,669
solution that was talked about earlier

00:17:37,899 --> 00:17:41,350
is hiring people that were part of those

00:17:39,669 --> 00:17:43,059
communities well though they already

00:17:41,350 --> 00:17:44,590
know how to work with that particular

00:17:43,059 --> 00:17:46,990
community they already know the culture

00:17:44,590 --> 00:17:50,860
but in a lot of cases that's not that's

00:17:46,990 --> 00:17:52,600
not an option and so you need to make

00:17:50,860 --> 00:17:54,850
sure that you give people the

00:17:52,600 --> 00:17:56,980
opportunity in the direction to to learn

00:17:54,850 --> 00:17:59,200
about their project learn how to be part

00:17:56,980 --> 00:18:01,360
of that culture learn how to adopt the

00:17:59,200 --> 00:18:03,669
practices and make sure that they've got

00:18:01,360 --> 00:18:09,280
the tools to work with the community in

00:18:03,669 --> 00:18:13,690
a seamless way the next area is the

00:18:09,280 --> 00:18:15,340
evaluation and selection this this is

00:18:13,690 --> 00:18:18,159
probably the point of greatest leverage

00:18:15,340 --> 00:18:20,260
in in this whole set of processes

00:18:18,159 --> 00:18:22,570
because if you pick the right open

00:18:20,260 --> 00:18:26,440
source components and and and projects

00:18:22,570 --> 00:18:29,409
in the first place you can either give

00:18:26,440 --> 00:18:32,500
yourself great leverage for success or a

00:18:29,409 --> 00:18:35,440
lot of headaches forever so this this is

00:18:32,500 --> 00:18:37,780
very important most companies requires

00:18:35,440 --> 00:18:39,669
some kind of due diligence here I have

00:18:37,780 --> 00:18:43,480
to say that in my experience of working

00:18:39,669 --> 00:18:45,970
with more than three hundred companies

00:18:43,480 --> 00:18:49,780
to date around open source processes

00:18:45,970 --> 00:18:53,919
that it's not adequate particularly for

00:18:49,780 --> 00:18:56,139
business critical functions projects

00:18:53,919 --> 00:18:58,659
that are tactical versus projects that

00:18:56,139 --> 00:19:01,360
are strategic require different kinds of

00:18:58,659 --> 00:19:03,220
evaluations so the tactical stuff you

00:19:01,360 --> 00:19:05,169
always want to do you need to make sure

00:19:03,220 --> 00:19:07,029
that that the architecture is right and

00:19:05,169 --> 00:19:09,010
it fits with what you want to do that

00:19:07,029 --> 00:19:11,289
the licenses are compatible with what

00:19:09,010 --> 00:19:15,549
you want to do that the security

00:19:11,289 --> 00:19:17,500
vulnerability history is good and and

00:19:15,549 --> 00:19:19,330
there aren't two dart unfixed

00:19:17,500 --> 00:19:22,240
vulnerabilities for instance before you

00:19:19,330 --> 00:19:24,850
build something critical on this you

00:19:22,240 --> 00:19:26,909
might want to look at the code quality

00:19:24,850 --> 00:19:29,200
to see if it's good enough to work with

00:19:26,909 --> 00:19:31,720
there's documentation so you can

00:19:29,200 --> 00:19:33,040
understand it and also is there a good

00:19:31,720 --> 00:19:35,350
community behind it

00:19:33,040 --> 00:19:37,270
that's richer enough to stand up and

00:19:35,350 --> 00:19:39,970
keep this software running for the

00:19:37,270 --> 00:19:42,670
lifetime of your critical system these

00:19:39,970 --> 00:19:44,140
things are basic everything better have

00:19:42,670 --> 00:19:46,900
these characteristics if you're putting

00:19:44,140 --> 00:19:48,370
it into a business critical system if

00:19:46,900 --> 00:19:51,820
its strategic there's additional

00:19:48,370 --> 00:19:55,420
criteria you need to have all the

00:19:51,820 --> 00:19:57,580
technical criteria plus does this open

00:19:55,420 --> 00:19:59,680
source project fit in to the industry in

00:19:57,580 --> 00:20:02,110
a way that will be good for our business

00:19:59,680 --> 00:20:04,570
does it establish the standard of the

00:20:02,110 --> 00:20:07,540
way of doing things or the interfaces to

00:20:04,570 --> 00:20:10,360
partners that we are expecting because

00:20:07,540 --> 00:20:12,370
it's open source is the direction of the

00:20:10,360 --> 00:20:14,890
community compatible with the direction

00:20:12,370 --> 00:20:16,150
we're going in or is it going to is it

00:20:14,890 --> 00:20:18,010
going to serve a different kind of

00:20:16,150 --> 00:20:22,510
market and a different set of technical

00:20:18,010 --> 00:20:24,940
needs down the road who are the other

00:20:22,510 --> 00:20:27,460
project participants and what's their

00:20:24,940 --> 00:20:29,380
level of commitment if something's

00:20:27,460 --> 00:20:31,600
important to you strategically you want

00:20:29,380 --> 00:20:35,970
to know that you're not all alone in

00:20:31,600 --> 00:20:40,150
terms of this project and its success

00:20:35,970 --> 00:20:41,620
the other issue is whether you really

00:20:40,150 --> 00:20:43,990
have an opportunity to participate in

00:20:41,620 --> 00:20:45,820
the project's leadership if this is

00:20:43,990 --> 00:20:48,340
strategically important to you you want

00:20:45,820 --> 00:20:49,720
to have a say about where it's going you

00:20:48,340 --> 00:20:51,880
want to have a say about how resources

00:20:49,720 --> 00:20:57,850
allocated you want to make sure that

00:20:51,880 --> 00:21:03,160
you're a player in this technology the

00:20:57,850 --> 00:21:05,500
next category and set of processes have

00:21:03,160 --> 00:21:09,220
to do with differentiation analysis and

00:21:05,500 --> 00:21:12,130
this is really asking the question as we

00:21:09,220 --> 00:21:14,830
create a new feature for our for our use

00:21:12,130 --> 00:21:16,600
of this technology are we going to keep

00:21:14,830 --> 00:21:20,140
it to ourselves are we going to give it

00:21:16,600 --> 00:21:22,060
out as open source and this happens

00:21:20,140 --> 00:21:24,340
again and again and again anytime you're

00:21:22,060 --> 00:21:26,230
taking open source and a commercial

00:21:24,340 --> 00:21:28,600
business context you're gonna have to

00:21:26,230 --> 00:21:31,990
answer these questions on an ongoing

00:21:28,600 --> 00:21:34,120
basis and the answer should be what

00:21:31,990 --> 00:21:39,460
supports your company's product and

00:21:34,120 --> 00:21:41,680
market strategies the best the other

00:21:39,460 --> 00:21:43,420
thing is is you have to realize that the

00:21:41,680 --> 00:21:45,900
answer to that question may change next

00:21:43,420 --> 00:21:48,210
year as the communities

00:21:45,900 --> 00:21:51,810
your Markus changes your partners and

00:21:48,210 --> 00:21:55,260
customers change so the key here is to

00:21:51,810 --> 00:21:57,750
have some kind of mechanism for doing

00:21:55,260 --> 00:22:01,050
this agreed ahead of time otherwise this

00:21:57,750 --> 00:22:03,180
this can result in endless arguments in

00:22:01,050 --> 00:22:05,370
your company about whether to

00:22:03,180 --> 00:22:07,200
open-source this or whether whether to

00:22:05,370 --> 00:22:09,870
keep it if you've got a standardized way

00:22:07,200 --> 00:22:14,640
of making this decision it will it will

00:22:09,870 --> 00:22:16,860
go much better the other the other risk

00:22:14,640 --> 00:22:18,420
here in fact is of course you can make

00:22:16,860 --> 00:22:20,580
it simple and saying everything we build

00:22:18,420 --> 00:22:21,750
we're going to keep to ourselves we're

00:22:20,580 --> 00:22:24,960
not going to open-source any of this

00:22:21,750 --> 00:22:27,780
stuff and the issue here is technical

00:22:24,960 --> 00:22:29,520
debt these are things that in fact you

00:22:27,780 --> 00:22:30,690
could you could give them away and have

00:22:29,520 --> 00:22:34,440
them pre-integrated

00:22:30,690 --> 00:22:36,600
and you can get out of the expense of

00:22:34,440 --> 00:22:38,460
maintaining this particular software

00:22:36,600 --> 00:22:40,230
feature or additional software for the

00:22:38,460 --> 00:22:41,960
life of the project why would you want

00:22:40,230 --> 00:22:45,240
to keep that when it when it has no

00:22:41,960 --> 00:22:46,770
competitive value for instance so that

00:22:45,240 --> 00:22:50,370
you know that's the risk of not not

00:22:46,770 --> 00:22:53,970
doing this correctly often neglected in

00:22:50,370 --> 00:22:55,320
a corporate environment so the other

00:22:53,970 --> 00:22:57,180
thing to remember here is if you do

00:22:55,320 --> 00:23:00,330
features or customizations that the

00:22:57,180 --> 00:23:03,390
project won't take you they're gonna be

00:23:00,330 --> 00:23:05,220
proprietary you're stuck with them one

00:23:03,390 --> 00:23:06,900
way that you can deal with this and I

00:23:05,220 --> 00:23:09,000
think Don mentioned this is you can

00:23:06,900 --> 00:23:10,950
pre-sell ideas if you want to add a new

00:23:09,000 --> 00:23:14,070
capability a feature if you talk to the

00:23:10,950 --> 00:23:15,720
the committers on the project and you

00:23:14,070 --> 00:23:17,910
get them to understand that this is

00:23:15,720 --> 00:23:20,340
something that would be great and other

00:23:17,910 --> 00:23:22,440
people will want it then they'll

00:23:20,340 --> 00:23:25,740
probably take it but it requires that

00:23:22,440 --> 00:23:29,100
sort of participation so the best

00:23:25,740 --> 00:23:31,950
practices here is to establish a

00:23:29,100 --> 00:23:36,860
standard evaluation technique that deals

00:23:31,950 --> 00:23:41,310
with both business support and and

00:23:36,860 --> 00:23:43,380
customer dimensions and you want to

00:23:41,310 --> 00:23:46,560
apply that to every single new

00:23:43,380 --> 00:23:51,440
proprietary feature proposal during the

00:23:46,560 --> 00:23:57,300
lifetime of that project next is

00:23:51,440 --> 00:23:58,590
integration and test planning if most of

00:23:57,300 --> 00:24:00,659
the source

00:23:58,590 --> 00:24:04,320
or something your building is coming

00:24:00,659 --> 00:24:06,929
from open source project there's a great

00:24:04,320 --> 00:24:08,460
advantage in making your own internal

00:24:06,929 --> 00:24:12,000
processes for development and

00:24:08,460 --> 00:24:14,250
maintenance highly compatible with the

00:24:12,000 --> 00:24:21,150
project so for instance if you're doing

00:24:14,250 --> 00:24:24,809
a a cloud facility and 90 plus percent

00:24:21,150 --> 00:24:26,250
of the code is coming from OpenStack you

00:24:24,809 --> 00:24:29,070
want to make sure that your engineering

00:24:26,250 --> 00:24:31,590
processes is highly compatible and it

00:24:29,070 --> 00:24:34,289
will mesh very easily with the way

00:24:31,590 --> 00:24:38,130
OpenStack develops and releases software

00:24:34,289 --> 00:24:40,140
that that seamless interoperability with

00:24:38,130 --> 00:24:41,880
the repository and the bug tracking in

00:24:40,140 --> 00:24:47,640
the release process will save you

00:24:41,880 --> 00:24:49,110
tremendous trouble down the road now so

00:24:47,640 --> 00:24:51,330
you know if that's not possible

00:24:49,110 --> 00:24:54,630
obviously you're going to have to figure

00:24:51,330 --> 00:25:00,950
out how to integrate these as best you

00:24:54,630 --> 00:25:00,950
can test and QA

00:25:07,070 --> 00:25:12,200
need to be done even with the open

00:25:09,620 --> 00:25:14,480
source code these are these are business

00:25:12,200 --> 00:25:16,580
critical systems so you before you

00:25:14,480 --> 00:25:19,310
integrate you want to do essentially

00:25:16,580 --> 00:25:21,380
check the unit testing on the open

00:25:19,310 --> 00:25:23,420
source code and you may want to add to

00:25:21,380 --> 00:25:25,430
that too because if your requirements

00:25:23,420 --> 00:25:30,260
for instance some open source projects

00:25:25,430 --> 00:25:32,210
test very rigorously some just do the

00:25:30,260 --> 00:25:34,280
slightest bit of testing to see if it

00:25:32,210 --> 00:25:37,610
seems to work in which case you're gonna

00:25:34,280 --> 00:25:39,520
have to add to that suite and you want

00:25:37,610 --> 00:25:43,190
to do those tests before you integrate

00:25:39,520 --> 00:25:46,580
and then the other thing that that's

00:25:43,190 --> 00:25:48,590
that's highly useful here and again this

00:25:46,580 --> 00:25:50,060
is towards minimizing your technical

00:25:48,590 --> 00:25:52,250
debt over the life of the project it's

00:25:50,060 --> 00:25:54,320
contribute to tests back to the project

00:25:52,250 --> 00:25:57,020
if the tests only deal with the open

00:25:54,320 --> 00:25:58,580
source they're not uniquely competitive

00:25:57,020 --> 00:26:00,470
to you if you've given them back to the

00:25:58,580 --> 00:26:05,420
project they'll do the testing before

00:26:00,470 --> 00:26:07,430
you even get it and as new facilities

00:26:05,420 --> 00:26:09,830
get put in they will be tested and made

00:26:07,430 --> 00:26:14,060
compatible because they run your tests

00:26:09,830 --> 00:26:16,790
so there's some real leverage there next

00:26:14,060 --> 00:26:20,750
is the open source integration and you

00:26:16,790 --> 00:26:25,820
want to integrate directly from the open

00:26:20,750 --> 00:26:28,010
source trees wherever possible typically

00:26:25,820 --> 00:26:31,880
the product teams have the option to

00:26:28,010 --> 00:26:34,220
choose releases and the cycles that work

00:26:31,880 --> 00:26:36,860
best given your business and your needs

00:26:34,220 --> 00:26:39,080
for updates versus the rate of the

00:26:36,860 --> 00:26:43,310
project and and the updates that are

00:26:39,080 --> 00:26:45,410
coming from them again at this point we

00:26:43,310 --> 00:26:47,950
want to strictly minimize the

00:26:45,410 --> 00:26:52,370
customization of open source software

00:26:47,950 --> 00:26:55,190
the the every time you change something

00:26:52,370 --> 00:26:57,680
you're gonna maintain it forever and so

00:26:55,190 --> 00:26:59,480
it makes it maybe quick in the beginning

00:26:57,680 --> 00:27:01,330
but you got to remember you're gonna pay

00:26:59,480 --> 00:27:03,260
forever

00:27:01,330 --> 00:27:07,270
whenever possible you want to

00:27:03,260 --> 00:27:10,400
marginalize the changes as opposed to

00:27:07,270 --> 00:27:14,720
making inline changes to the open source

00:27:10,400 --> 00:27:17,480
code that reduces the cost of merging

00:27:14,720 --> 00:27:19,580
code in the future and to the extent

00:27:17,480 --> 00:27:22,010
possible you want to automate

00:27:19,580 --> 00:27:29,000
this with a with your continuous

00:27:22,010 --> 00:27:31,850
integration model next the test program

00:27:29,000 --> 00:27:34,250
and you do need to continue to test the

00:27:31,850 --> 00:27:34,880
open source for the whole life of the

00:27:34,250 --> 00:27:38,000
product

00:27:34,880 --> 00:27:40,160
this isn't just a development aspect and

00:27:38,000 --> 00:27:42,410
it is important to test the open source

00:27:40,160 --> 00:27:45,260
before you even begin integrating and

00:27:42,410 --> 00:27:50,930
then as a whole with your integrated

00:27:45,260 --> 00:27:54,140
product so typically this is a single

00:27:50,930 --> 00:27:57,620
module level project and subsystem may

00:27:54,140 --> 00:28:01,600
be platform testing and then a full full

00:27:57,620 --> 00:28:06,400
integrated or functional testing as well

00:28:01,600 --> 00:28:08,780
the best practices here involve

00:28:06,400 --> 00:28:10,790
contributing your test code back to the

00:28:08,780 --> 00:28:13,310
project to the greatest possible extent

00:28:10,790 --> 00:28:16,580
that reduces the amount of work that you

00:28:13,310 --> 00:28:20,090
have to carry in your organization for

00:28:16,580 --> 00:28:21,920
the life of the product and it's also

00:28:20,090 --> 00:28:24,020
really good to develop relationships

00:28:21,920 --> 00:28:26,510
with the open source project leaders

00:28:24,020 --> 00:28:28,340
again for strategic projects so you've

00:28:26,510 --> 00:28:30,320
probably already trying to step up to

00:28:28,340 --> 00:28:33,350
become a committer that makes this very

00:28:30,320 --> 00:28:34,880
simple but you want to make sure that

00:28:33,350 --> 00:28:38,630
you have those relationships so they'll

00:28:34,880 --> 00:28:40,550
absorb your tests tests are not

00:28:38,630 --> 00:28:41,990
particularly competitive usually if they

00:28:40,550 --> 00:28:44,510
have to do with the open source only

00:28:41,990 --> 00:28:46,040
they're definitely not competitive and

00:28:44,510 --> 00:28:48,410
if you've got the right relationships

00:28:46,040 --> 00:28:54,050
they'll love to take these tests up and

00:28:48,410 --> 00:28:59,110
you don't have to bear the burden next

00:28:54,050 --> 00:28:59,110
is what do you do when you find problems

00:28:59,530 --> 00:29:08,990
most most successful organizations in

00:29:04,040 --> 00:29:12,290
this area upstream early and Don talked

00:29:08,990 --> 00:29:13,940
a little bit about this what's critical

00:29:12,290 --> 00:29:16,100
is you need to have the community and

00:29:13,940 --> 00:29:19,310
maintainer relationships in place so

00:29:16,100 --> 00:29:23,710
they will trust you and absorb these

00:29:19,310 --> 00:29:29,870
fixes and contributions quickly and and

00:29:23,710 --> 00:29:33,290
reliably if you've got your changes you

00:29:29,870 --> 00:29:37,370
can retain those as your value added

00:29:33,290 --> 00:29:40,710
preferably through modular interfaces

00:29:37,370 --> 00:29:42,570
now even with large organizations like

00:29:40,710 --> 00:29:44,160
Samsung and Red Hat where they've got

00:29:42,570 --> 00:29:46,380
lots of committers the company's

00:29:44,160 --> 00:29:50,820
reputation and ID doesn't really

00:29:46,380 --> 00:29:53,040
guarantee upstream patch acceptances the

00:29:50,820 --> 00:29:55,050
committers to assign if you if you have

00:29:53,040 --> 00:29:58,710
committers on the project though your

00:29:55,050 --> 00:30:00,840
odds are much much better in a lot of

00:29:58,710 --> 00:30:03,630
cases committers have to have the right

00:30:00,840 --> 00:30:06,210
to just take anything in their area that

00:30:03,630 --> 00:30:09,630
they're responsible for and so if you

00:30:06,210 --> 00:30:12,390
your company employs a committer on the

00:30:09,630 --> 00:30:15,720
project you've got a very high rate of

00:30:12,390 --> 00:30:19,260
acceptance to your patches smaller

00:30:15,720 --> 00:30:21,810
organizations their patches are going to

00:30:19,260 --> 00:30:24,090
be reviewed on merit this is a place

00:30:21,810 --> 00:30:26,010
where relationships with the project

00:30:24,090 --> 00:30:29,610
committers are very important to getting

00:30:26,010 --> 00:30:32,940
things accepted and in this case it's

00:30:29,610 --> 00:30:34,950
also even more important to consider

00:30:32,940 --> 00:30:37,980
things like the project style so your

00:30:34,950 --> 00:30:40,350
code looks like it fits in the project

00:30:37,980 --> 00:30:42,180
roadmap and whether the this this patch

00:30:40,350 --> 00:30:44,070
that you're adding fits in to where the

00:30:42,180 --> 00:30:48,690
project is going you know in a way

00:30:44,070 --> 00:30:49,980
that's arguably add of it advantage and

00:30:48,690 --> 00:30:51,240
these are the these are the ways that

00:30:49,980 --> 00:30:53,070
you're going to get your patches

00:30:51,240 --> 00:30:55,800
accepted even if you're a smaller

00:30:53,070 --> 00:30:58,550
organization with a minor relationship

00:30:55,800 --> 00:30:58,550
to the project

00:31:02,070 --> 00:31:07,409
and finally we've got to deal with the

00:31:04,110 --> 00:31:10,890
patches and new releases coming back

00:31:07,409 --> 00:31:13,950
down from the open source project the

00:31:10,890 --> 00:31:15,270
fact is that if it's a major project you

00:31:13,950 --> 00:31:17,789
you're probably going to start seeing

00:31:15,270 --> 00:31:20,970
patches come but come back down within

00:31:17,789 --> 00:31:24,600
within weeks of when you start using the

00:31:20,970 --> 00:31:27,419
software and the the complicated thing

00:31:24,600 --> 00:31:28,919
in here is there's four sources of these

00:31:27,419 --> 00:31:31,260
patches okay

00:31:28,919 --> 00:31:33,900
the open source project development is

00:31:31,260 --> 00:31:37,950
continuing your own project is

00:31:33,900 --> 00:31:39,990
continuing to develop open source

00:31:37,950 --> 00:31:42,750
project is producing patches on a

00:31:39,990 --> 00:31:44,820
regular basis and once you've got a

00:31:42,750 --> 00:31:46,409
product out there your team your

00:31:44,820 --> 00:31:49,350
engineering maintenance team is going to

00:31:46,409 --> 00:31:51,780
be producing new patches to the code

00:31:49,350 --> 00:31:55,590
that you've added to create your

00:31:51,780 --> 00:31:57,600
particular service so we've got we've

00:31:55,590 --> 00:32:01,169
got this stream it's a four way merge

00:31:57,600 --> 00:32:02,460
okay and and it is complicated and I

00:32:01,169 --> 00:32:04,559
have to tell you that you know the

00:32:02,460 --> 00:32:07,440
complexity in this area has bogged down

00:32:04,559 --> 00:32:09,780
many companies and and and major

00:32:07,440 --> 00:32:11,700
companies with great technical expertise

00:32:09,780 --> 00:32:16,190
find that all of a sudden they've got a

00:32:11,700 --> 00:32:20,130
merge that takes weeks or even months

00:32:16,190 --> 00:32:21,929
with each new release and and it affects

00:32:20,130 --> 00:32:23,580
the quality of their service and the

00:32:21,929 --> 00:32:26,669
competitiveness or the competitiveness

00:32:23,580 --> 00:32:30,299
of their product so some of the things

00:32:26,669 --> 00:32:32,490
that you can do here again strictly

00:32:30,299 --> 00:32:34,919
minimizing the customizations this is

00:32:32,490 --> 00:32:36,120
the place where you really pay for all

00:32:34,919 --> 00:32:40,169
that technical debt

00:32:36,120 --> 00:32:43,440
so that's yours your single best point

00:32:40,169 --> 00:32:47,309
of leverage here if you keep the the

00:32:43,440 --> 00:32:51,600
patches that you've that your your your

00:32:47,309 --> 00:32:55,650
retaining is private a small and modular

00:32:51,600 --> 00:33:00,720
as possible that reduces the complexity

00:32:55,650 --> 00:33:03,120
and an effort to do these merges if you

00:33:00,720 --> 00:33:06,510
cultivate the project relationships and

00:33:03,120 --> 00:33:09,860
communication so that what comes in and

00:33:06,510 --> 00:33:13,260
your version is on the same wavelength

00:33:09,860 --> 00:33:15,120
and compatible you'll save a lot of

00:33:13,260 --> 00:33:16,740
trouble and also you

00:33:15,120 --> 00:33:20,220
get more up streaming so that there's

00:33:16,740 --> 00:33:22,140
fewer changes to merge investing in the

00:33:20,220 --> 00:33:24,300
project test code helps a lot because

00:33:22,140 --> 00:33:26,010
new features that the project will have

00:33:24,300 --> 00:33:28,380
gone through the test code you up

00:33:26,010 --> 00:33:31,530
streamed already and so you won't have

00:33:28,380 --> 00:33:34,080
surprises at merge time and then there's

00:33:31,530 --> 00:33:35,880
a whole set of tools here that that can

00:33:34,080 --> 00:33:38,580
help with this and particularly if

00:33:35,880 --> 00:33:41,610
you're using the same tools as the

00:33:38,580 --> 00:33:45,690
project for these merges you'll get the

00:33:41,610 --> 00:33:48,090
best efficiency you can so that's the

00:33:45,690 --> 00:33:50,490
that's the end of my very quick tour

00:33:48,090 --> 00:33:53,010
here about how to build business

00:33:50,490 --> 00:33:56,220
critical products with the additional

00:33:53,010 --> 00:33:57,870
complexity of open source we know

00:33:56,220 --> 00:34:00,090
there's many techniques well-established

00:33:57,870 --> 00:34:03,450
and probably in your organization you've

00:34:00,090 --> 00:34:04,890
already got a detailed rulebook for how

00:34:03,450 --> 00:34:10,560
to build your business critical

00:34:04,890 --> 00:34:12,210
applications with open source there are

00:34:10,560 --> 00:34:15,720
these additional techniques that have

00:34:12,210 --> 00:34:18,750
been proven by many companies now for

00:34:15,720 --> 00:34:22,669
building the business critical process

00:34:18,750 --> 00:34:24,870
they rely heavily on your already

00:34:22,669 --> 00:34:26,790
established development process and then

00:34:24,870 --> 00:34:29,210
they add these processes that we've just

00:34:26,790 --> 00:34:32,879
done a quick tour of in order to

00:34:29,210 --> 00:34:34,740
reliably couple with the open source

00:34:32,879 --> 00:34:37,919
communities and by employing these

00:34:34,740 --> 00:34:41,310
techniques you can realize all the

00:34:37,919 --> 00:34:43,770
benefits of open source software but at

00:34:41,310 --> 00:34:45,659
the same time maintain the quality and

00:34:43,770 --> 00:34:50,760
reliability of your business critical

00:34:45,659 --> 00:34:53,840
systems do we have any questions we

00:34:50,760 --> 00:34:53,840
still have a little bit of time

00:34:59,030 --> 00:35:16,870
pardon well about this deep there's a

00:35:14,210 --> 00:35:16,870
lot to this

00:35:17,470 --> 00:35:24,440
so is this obvious to everyone do you

00:35:20,210 --> 00:35:28,900
already know all this is that why don't

00:35:24,440 --> 00:35:28,900
questions yes

00:36:07,060 --> 00:36:19,510
right yeah the the discussion about

00:36:17,530 --> 00:36:22,320
technical debt and then it showed up at

00:36:19,510 --> 00:36:26,680
several levels here the fact is that

00:36:22,320 --> 00:36:29,050
freeloading has its own penalties and

00:36:26,680 --> 00:36:31,600
you know if you're just doing a casual

00:36:29,050 --> 00:36:33,610
system if you're writing a an internal

00:36:31,600 --> 00:36:36,970
conference room scheduling app and

00:36:33,610 --> 00:36:39,160
you're freeloading hey this the the

00:36:36,970 --> 00:36:40,720
penalties aren't gonna kill you but if

00:36:39,160 --> 00:36:44,470
you're building a business critical

00:36:40,720 --> 00:36:47,350
system and it's going to be deployed

00:36:44,470 --> 00:36:49,210
with real customers for a long time you

00:36:47,350 --> 00:36:50,470
are going to have to go through all this

00:36:49,210 --> 00:36:53,470
maintenance and coupling with the

00:36:50,470 --> 00:36:57,400
project and freeloading is not a win you

00:36:53,470 --> 00:36:59,140
will pay if you do that now does that

00:36:57,400 --> 00:37:01,810
help the project's no it doesn't really

00:36:59,140 --> 00:37:06,100
but at least as companies become more

00:37:01,810 --> 00:37:28,000
aware of this they they're disincentive

00:37:06,100 --> 00:37:30,720
to take the approach most of the major

00:37:28,000 --> 00:37:30,720
planks

00:37:36,410 --> 00:37:39,510
[Music]

00:38:15,930 --> 00:38:21,700
well let this the first point is the the

00:38:20,200 --> 00:38:25,920
leverage you have its selection time

00:38:21,700 --> 00:38:28,509
okay you probably don't want to make a

00:38:25,920 --> 00:38:31,960
strategic decision for something

00:38:28,509 --> 00:38:34,869
critical in a banking system for a

00:38:31,960 --> 00:38:36,400
one-person project right and there are

00:38:34,869 --> 00:38:38,859
projects like that I mean you know one

00:38:36,400 --> 00:38:41,319
guy in a garage in Romania write great

00:38:38,859 --> 00:38:44,710
software but but that's that's all it's

00:38:41,319 --> 00:38:48,460
behind it so when just just to draw the

00:38:44,710 --> 00:38:51,099
analogy if you're building if you were

00:38:48,460 --> 00:38:53,529
going to a vendor for that software you

00:38:51,099 --> 00:38:55,660
would look at their financials and you'd

00:38:53,529 --> 00:38:57,670
look at their support capability and

00:38:55,660 --> 00:38:59,739
you'd say no I'm not gonna rely on that

00:38:57,670 --> 00:39:02,170
guy they don't they can't support me for

00:38:59,739 --> 00:39:04,869
10 years so with open source you've got

00:39:02,170 --> 00:39:07,269
a similar situation now with open source

00:39:04,869 --> 00:39:10,480
you've got more degrees of freedom so

00:39:07,269 --> 00:39:12,009
the fact is I mean and I think one of

00:39:10,480 --> 00:39:14,170
the things that's interesting is fee

00:39:12,009 --> 00:39:16,329
notes might be helpful here I mean some

00:39:14,170 --> 00:39:18,960
of these projects could be absorbed into

00:39:16,329 --> 00:39:22,079
Fino so that you've got a focus for

00:39:18,960 --> 00:39:25,450
maintaining support for these projects

00:39:22,079 --> 00:39:28,059
and and I think that that's that's a

00:39:25,450 --> 00:39:30,160
case now I work on a project with Airbus

00:39:28,059 --> 00:39:34,390
for instance and on those planes they've

00:39:30,160 --> 00:39:36,640
got a thirty-year 30-year maintenance

00:39:34,390 --> 00:39:38,589
window so they had to decide upfront

00:39:36,640 --> 00:39:40,029
before they chose to take some open

00:39:38,589 --> 00:39:41,499
source that they had a plan

00:39:40,029 --> 00:39:44,140
to ensure that there was maintenance for

00:39:41,499 --> 00:39:46,930
30 years and they had to step up in fact

00:39:44,140 --> 00:39:48,849
to providing a framework that ensured

00:39:46,930 --> 00:39:50,440
that support on the projects they chose

00:39:48,849 --> 00:39:52,119
so I think you

00:39:50,440 --> 00:39:54,099
those are the kind of options that are

00:39:52,119 --> 00:39:56,829
available you know with open source what

00:39:54,099 --> 00:39:59,170
you get is more degrees of freedom but

00:39:56,829 --> 00:40:05,500
you can't neglect to cover your

00:39:59,170 --> 00:40:07,869
requirements I think we're kind of out

00:40:05,500 --> 00:40:09,730
of time officially but if any of you

00:40:07,869 --> 00:40:12,579
have questions I will be here for both

00:40:09,730 --> 00:40:15,280
days and I'd be glad to talk to you

00:40:12,579 --> 00:40:16,960
about the ins and outs as I said there's

00:40:15,280 --> 00:40:19,270
a lot there's a lot of depth in these

00:40:16,960 --> 00:40:21,490
topics and I'd be glad to share some of

00:40:19,270 --> 00:40:24,920
our experience with them thank you

00:40:21,490 --> 00:40:28,459
[Applause]

00:40:24,920 --> 00:40:28,459

YouTube URL: https://www.youtube.com/watch?v=jwVZebHPmZY


