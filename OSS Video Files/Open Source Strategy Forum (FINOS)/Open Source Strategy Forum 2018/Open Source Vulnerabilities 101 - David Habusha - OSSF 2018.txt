Title: Open Source Vulnerabilities 101 - David Habusha - OSSF 2018
Publication date: 2019-03-14
Playlist: Open Source Strategy Forum 2018
Description: 
	Speaker:David Habusha, VP Product, Whitesource
Presentation: Open Source Vulnerabilities 101


Open source components have become a key building block for application development in todayâ€™s market where companies are under constant pressure to deploy products as fast as possible. The recent increase in open source usage, however, has introduced many new security challenges. Over the past few years, we have seen a variety of open source vulnerabilities wreak havoc across the web (Heartbleed, Shellshock, and POODLE) which woke organizations up to the risks that come along with the convenience of using open source components.
Captions: 
	00:00:00,000 --> 00:00:03,800
[Music]

00:00:08,960 --> 00:00:14,460
with white source we help businesses

00:00:11,849 --> 00:00:17,580
develop better software by harnessing

00:00:14,460 --> 00:00:19,080
the power of open source and today I'm

00:00:17,580 --> 00:00:22,230
going to talk to you a little bit about

00:00:19,080 --> 00:00:25,350
how open source vulnerabilities are

00:00:22,230 --> 00:00:27,900
being handled by modern organizations

00:00:25,350 --> 00:00:30,119
what are the current challenges and how

00:00:27,900 --> 00:00:32,219
what is the right way to actually deal

00:00:30,119 --> 00:00:37,800
with these types of vulnerabilities in

00:00:32,219 --> 00:00:39,780
an effective way so how many of you here

00:00:37,800 --> 00:00:43,520
are dealing with open source security

00:00:39,780 --> 00:00:43,520
vulnerabilities in your day-to-day work

00:00:45,440 --> 00:00:50,899
okay the others are doing legal and

00:00:48,570 --> 00:00:54,739
compliance or software development

00:00:50,899 --> 00:00:57,899
compliance legal software development

00:00:54,739 --> 00:01:02,030
okay so there that's good we have a lot

00:00:57,899 --> 00:01:04,199
to talk about software development so

00:01:02,030 --> 00:01:07,909
you know what let's let's start by

00:01:04,199 --> 00:01:11,189
another question the guys that actually

00:01:07,909 --> 00:01:14,189
develop software how many of you really

00:01:11,189 --> 00:01:20,790
but really love resolving security

00:01:14,189 --> 00:01:24,869
issues in your code that's a typical

00:01:20,790 --> 00:01:26,580
answer and that's the actual I think

00:01:24,869 --> 00:01:28,229
that you know when when this session

00:01:26,580 --> 00:01:30,600
ends you'll understand exactly why it

00:01:28,229 --> 00:01:31,979
happens and because actually real ways

00:01:30,600 --> 00:01:32,840
to accommodate with these kinds of

00:01:31,979 --> 00:01:38,549
situations

00:01:32,840 --> 00:01:43,320
I'm sure it's an essence right you have

00:01:38,549 --> 00:01:44,909
to do it right right so there's actually

00:01:43,320 --> 00:01:48,810
really nice ways to do it and we'll talk

00:01:44,909 --> 00:01:50,790
about that so um I just stopped a quick

00:01:48,810 --> 00:01:54,420
recap on what is an open source

00:01:50,790 --> 00:01:57,170
vulnerability what is the lifecycle of a

00:01:54,420 --> 00:02:00,060
typical open source vulnerability

00:01:57,170 --> 00:02:02,490
usually it starts with a white hat

00:02:00,060 --> 00:02:06,689
hacker that wants to help the open

00:02:02,490 --> 00:02:09,420
source community they'll work on finding

00:02:06,689 --> 00:02:11,160
new exploits in open source components

00:02:09,420 --> 00:02:13,200
you would usually hear the names of

00:02:11,160 --> 00:02:16,530
patchy strata participating

00:02:13,200 --> 00:02:18,090
no js' and the known frameworks they'll

00:02:16,530 --> 00:02:22,410
usually attack these because they're

00:02:18,090 --> 00:02:25,110
very common with businesses and when

00:02:22,410 --> 00:02:28,080
they find a new vulnerability they'll

00:02:25,110 --> 00:02:30,120
verify it but they will not publish it

00:02:28,080 --> 00:02:32,340
that what what they'll do is they'll

00:02:30,120 --> 00:02:36,959
open a new what's called CVE

00:02:32,340 --> 00:02:40,410
in in a database called might record the

00:02:36,959 --> 00:02:43,319
new cv will have a grace period in which

00:02:40,410 --> 00:02:44,970
they will contact the person or the

00:02:43,319 --> 00:02:48,030
company in charge of that open-source

00:02:44,970 --> 00:02:49,709
component and we'll give them enough

00:02:48,030 --> 00:02:52,640
time to actually resolve the issue

00:02:49,709 --> 00:02:55,860
before they publish it the window of

00:02:52,640 --> 00:02:58,170
resolution is usually 90 days which is

00:02:55,860 --> 00:02:59,670
enough to resolve the issue that you

00:02:58,170 --> 00:03:01,849
would usually also tell you what the

00:02:59,670 --> 00:03:06,569
issue is so you have all the necessary

00:03:01,849 --> 00:03:09,060
data to resolve that issue and then most

00:03:06,569 --> 00:03:12,239
of the fixes are by by number it's

00:03:09,060 --> 00:03:14,459
almost 80% of those fixed of one sorry

00:03:12,239 --> 00:03:17,130
of these vulnerabilities are published

00:03:14,459 --> 00:03:19,319
in the enve didn't the national

00:03:17,130 --> 00:03:22,010
vulnerability database together with a

00:03:19,319 --> 00:03:25,340
fix so the idea is to help the community

00:03:22,010 --> 00:03:27,920
some of these vulnerabilities do not

00:03:25,340 --> 00:03:30,959
actually publish with the fix because

00:03:27,920 --> 00:03:33,180
the the owner didn't find the fix or

00:03:30,959 --> 00:03:35,280
there was not enough time but usually

00:03:33,180 --> 00:03:38,130
the fix will come up later some of they

00:03:35,280 --> 00:03:40,470
will not have any fix at all but you may

00:03:38,130 --> 00:03:42,480
find somewhere on the internet somebody

00:03:40,470 --> 00:03:44,489
who already fixed it usually the fix

00:03:42,480 --> 00:03:47,389
would include an upgrade to the next

00:03:44,489 --> 00:03:55,109
version of that component

00:03:47,389 --> 00:03:57,299
now if the open source owner cannot or

00:03:55,109 --> 00:04:00,420
doesn't have the means to resolve the

00:03:57,299 --> 00:04:03,780
issue we have a very large companies

00:04:00,420 --> 00:04:07,380
that support this community so Google

00:04:03,780 --> 00:04:09,989
Microsoft Yahoo Facebook Twitter and

00:04:07,380 --> 00:04:11,669
others are helping so if you as an open

00:04:09,989 --> 00:04:14,040
source owner cannot resolve that you can

00:04:11,669 --> 00:04:15,510
ask each one of these companies to

00:04:14,040 --> 00:04:17,370
actually help you and they actually do

00:04:15,510 --> 00:04:20,310
that they have teams in place to support

00:04:17,370 --> 00:04:23,300
these types of open source security

00:04:20,310 --> 00:04:27,560
vulnerabilities now nvd is the major

00:04:23,300 --> 00:04:27,560
security advisory most of the

00:04:27,600 --> 00:04:33,850
vulnerabilities or weaknesses directly

00:04:30,510 --> 00:04:36,970
ones that cannot be exploit exploited

00:04:33,850 --> 00:04:39,940
are called CWA a common weakness

00:04:36,970 --> 00:04:41,380
enumeration usually you just need to be

00:04:39,940 --> 00:04:41,980
aware of it you can't really take any

00:04:41,380 --> 00:04:46,740
action

00:04:41,980 --> 00:04:49,360
but all these cwe's and CV is in in MVD

00:04:46,740 --> 00:04:50,710
they have a number attached digitally

00:04:49,360 --> 00:04:53,830
it's the number of the year and then

00:04:50,710 --> 00:04:57,520
four or five digit number like the one

00:04:53,830 --> 00:05:01,720
that happened in in Equifax that was

00:04:57,520 --> 00:05:04,210
related to Apaches trots was CVA 2018

00:05:01,720 --> 00:05:06,820
five six three eight that's the number

00:05:04,210 --> 00:05:08,770
and everybody knows it by the number but

00:05:06,820 --> 00:05:10,420
NVD is not the only security advisory

00:05:08,770 --> 00:05:13,090
there's multiple different security

00:05:10,420 --> 00:05:15,670
advisories out there some of them are

00:05:13,090 --> 00:05:19,840
NVD like so they have similar

00:05:15,670 --> 00:05:22,270
nomenclature some of them are bad

00:05:19,840 --> 00:05:26,440
crackers open-source bug trackers like

00:05:22,270 --> 00:05:28,120
bugzilla or or JIRA or even in github

00:05:26,440 --> 00:05:31,330
you can find github issues or github

00:05:28,120 --> 00:05:34,690
bugs in open source components and

00:05:31,330 --> 00:05:37,150
there's a lot of industry specific

00:05:34,690 --> 00:05:40,480
language specific package specific like

00:05:37,150 --> 00:05:43,570
for NPM there's a specific advisory for

00:05:40,480 --> 00:05:44,920
Ruby there's a specific advisory for the

00:05:43,570 --> 00:05:48,610
automotive industry there is a specific

00:05:44,920 --> 00:05:50,320
advisory so it's really hard to keep

00:05:48,610 --> 00:05:52,450
track on all these open-source

00:05:50,320 --> 00:05:54,790
vulnerabilities that affect your

00:05:52,450 --> 00:05:57,220
applications and your code and it is

00:05:54,790 --> 00:06:00,640
that if you really want to keep your app

00:05:57,220 --> 00:06:03,580
secured you need to be aware of all of

00:06:00,640 --> 00:06:07,660
these security advisories to be able to

00:06:03,580 --> 00:06:13,570
actually understand the risk on your

00:06:07,660 --> 00:06:16,060
applications and be able to fix that so

00:06:13,570 --> 00:06:18,960
are we in right source we have an annual

00:06:16,060 --> 00:06:23,800
report we conducted a survey among our

00:06:18,960 --> 00:06:25,900
650 developers plus we took many of our

00:06:23,800 --> 00:06:29,950
data we have more than 500 customers

00:06:25,900 --> 00:06:33,670
worldwide to kind of provide some

00:06:29,950 --> 00:06:36,340
conclusions for the industry about the

00:06:33,670 --> 00:06:38,380
state of open source security

00:06:36,340 --> 00:06:39,669
vulnerabilities we have the full report

00:06:38,380 --> 00:06:41,979
on our website

00:06:39,669 --> 00:06:43,539
of Georgia can download it what I'm

00:06:41,979 --> 00:06:47,139
going to touch here is the on the main

00:06:43,539 --> 00:06:48,729
points of the report and actually if

00:06:47,139 --> 00:06:53,020
there's one takeaway from this session

00:06:48,729 --> 00:06:57,639
is is how you can resolve the friction

00:06:53,020 --> 00:06:59,800
between security teams legal DevOps and

00:06:57,639 --> 00:07:02,139
the actual development teams because

00:06:59,800 --> 00:07:04,539
this is at the end of the day the major

00:07:02,139 --> 00:07:06,999
concern if there's a process in place if

00:07:04,539 --> 00:07:10,150
there's a cooperation in place the

00:07:06,999 --> 00:07:11,680
security issues correctly prioritized it

00:07:10,150 --> 00:07:14,349
will happen and you will have secured

00:07:11,680 --> 00:07:17,529
applications but the truth the matters

00:07:14,349 --> 00:07:19,349
is that the situation today is that most

00:07:17,529 --> 00:07:24,719
organizations are not there yet and

00:07:19,349 --> 00:07:27,789
we'll just show how it is right now so I

00:07:24,719 --> 00:07:30,189
have another graph actually that shows

00:07:27,789 --> 00:07:33,819
the exponential use of open source but

00:07:30,189 --> 00:07:36,430
if we were in an adoption rate of five

00:07:33,819 --> 00:07:38,310
to ten percents 20 years ago and then 40

00:07:36,430 --> 00:07:41,710
to 50 percents 10 years ago

00:07:38,310 --> 00:07:43,719
analysts talk today about 80 to 90

00:07:41,710 --> 00:07:45,759
percent of every piece of software is

00:07:43,719 --> 00:07:47,889
comprised of or from open source code

00:07:45,759 --> 00:07:50,379
meaning that you if you have a hundred

00:07:47,889 --> 00:07:53,650
thousand lines of code application at

00:07:50,379 --> 00:07:56,529
least eighty thousand lines of code will

00:07:53,650 --> 00:08:00,039
be provided by open source components

00:07:56,529 --> 00:08:02,889
you import to your app and that means

00:08:00,039 --> 00:08:05,050
that it requires the right attention and

00:08:02,889 --> 00:08:07,060
the right understanding on how to handle

00:08:05,050 --> 00:08:09,939
security vulnerabilities in in these

00:08:07,060 --> 00:08:12,580
lines of code in these components and if

00:08:09,939 --> 00:08:14,289
we look at the the rate of security

00:08:12,580 --> 00:08:17,319
vulnerabilities published for open

00:08:14,289 --> 00:08:19,629
source components then we see we were

00:08:17,319 --> 00:08:24,339
seeing kind of like a small growth up

00:08:19,629 --> 00:08:27,789
until 2016 and then the number grew by

00:08:24,339 --> 00:08:30,669
more than 50 percent in 2017 and we have

00:08:27,789 --> 00:08:34,149
the numbers for the first three quarters

00:08:30,669 --> 00:08:36,310
of 2018 it's already surpassed the

00:08:34,149 --> 00:08:39,219
number of 2017 and it's probably going

00:08:36,310 --> 00:08:43,719
to grow the same rate because hackers

00:08:39,219 --> 00:08:47,019
white hat black bracket hackers they

00:08:43,719 --> 00:08:48,970
understand that corporates today rely on

00:08:47,019 --> 00:08:51,610
open source whether it's in their

00:08:48,970 --> 00:08:54,670
application server web server

00:08:51,610 --> 00:08:57,460
why's anything that's facing the world

00:08:54,670 --> 00:09:00,610
usually runs on an open-source software

00:08:57,460 --> 00:09:04,330
and they have the code they know how to

00:09:00,610 --> 00:09:07,300
attack it they know how to penetrate

00:09:04,330 --> 00:09:10,210
into systems this is why the awareness

00:09:07,300 --> 00:09:12,910
of handling open-source security

00:09:10,210 --> 00:09:17,410
vulnerabilities has also grown by the

00:09:12,910 --> 00:09:22,240
same rate and this is from from our

00:09:17,410 --> 00:09:24,390
survey so if you ask any developer how

00:09:22,240 --> 00:09:27,460
often do you use open source components

00:09:24,390 --> 00:09:29,290
only three percent said they are not

00:09:27,460 --> 00:09:31,900
using open source components at all most

00:09:29,290 --> 00:09:33,730
of the developers use it very widely in

00:09:31,900 --> 00:09:35,740
their applications and if we're looking

00:09:33,730 --> 00:09:38,200
at you know if we have customers in the

00:09:35,740 --> 00:09:40,420
of course financial industries but also

00:09:38,200 --> 00:09:43,810
government's can highly secure the

00:09:40,420 --> 00:09:46,540
customers they're all using open source

00:09:43,810 --> 00:09:49,000
if it was kind of a taboo that open

00:09:46,540 --> 00:09:50,470
source is unsecured and it's illegal to

00:09:49,000 --> 00:09:52,840
use it that's not the case anymore and

00:09:50,470 --> 00:09:54,730
we all know that so open source is

00:09:52,840 --> 00:09:58,890
everywhere and developers know that they

00:09:54,730 --> 00:10:01,330
understand that it helps them to reduce

00:09:58,890 --> 00:10:03,490
the time to market because they want to

00:10:01,330 --> 00:10:05,710
focus on their own business logic on

00:10:03,490 --> 00:10:07,780
these things that are unique to their

00:10:05,710 --> 00:10:09,880
specific application everything else

00:10:07,780 --> 00:10:13,770
that's already ready like a web server

00:10:09,880 --> 00:10:16,630
like SSL like communication layers like

00:10:13,770 --> 00:10:19,360
modern UI frameworks it's all open

00:10:16,630 --> 00:10:21,520
source why I mean the community is very

00:10:19,360 --> 00:10:23,650
good at maintaining it resolving issues

00:10:21,520 --> 00:10:25,870
updating it why shouldn't I be using

00:10:23,650 --> 00:10:28,210
that I just want to focus on what's

00:10:25,870 --> 00:10:29,860
right for my business and it's a it's a

00:10:28,210 --> 00:10:33,300
very competitive environment you have to

00:10:29,860 --> 00:10:36,880
be fast so everybody understands that

00:10:33,300 --> 00:10:39,970
so while only seven and a half percent

00:10:36,880 --> 00:10:42,940
of open-source projects are vulnerable

00:10:39,970 --> 00:10:46,600
it's essentially the long tail of these

00:10:42,940 --> 00:10:49,510
projects it's not the vast majority of

00:10:46,600 --> 00:10:51,880
the high profile projects if we look at

00:10:49,510 --> 00:10:54,190
the top 100 projects and we take this

00:10:51,880 --> 00:10:56,980
information from sources like data the

00:10:54,190 --> 00:10:58,290
number of contributors commits Watchers

00:10:56,980 --> 00:11:01,690
and so on

00:10:58,290 --> 00:11:04,600
32 percents of all of them have at least

00:11:01,690 --> 00:11:04,899
one security vulnerability if you take

00:11:04,600 --> 00:11:07,019
the

00:11:04,899 --> 00:11:09,189
they will have multiple dozens of

00:11:07,019 --> 00:11:12,759
vulnerabilities like strata in spring

00:11:09,189 --> 00:11:13,480
and nodejs and Django and Python and

00:11:12,759 --> 00:11:18,129
many others

00:11:13,480 --> 00:11:20,649
so the highest-profile the open-source

00:11:18,129 --> 00:11:22,899
project is the higher the higher the

00:11:20,649 --> 00:11:24,490
number of vulnerabilities detached so

00:11:22,899 --> 00:11:26,589
just you know you just need to be aware

00:11:24,490 --> 00:11:28,449
of that it doesn't mean that it's bad it

00:11:26,589 --> 00:11:32,309
means that you just need to take extra

00:11:28,449 --> 00:11:35,829
caution when you use these components

00:11:32,309 --> 00:11:38,290
and as I mentioned most of the open

00:11:35,829 --> 00:11:41,829
source security vulnerabilities that are

00:11:38,290 --> 00:11:45,699
being published already have a fix 80%

00:11:41,829 --> 00:11:48,369
of them are in the NVD others can be

00:11:45,699 --> 00:11:52,439
found in the table or in the other bug

00:11:48,369 --> 00:11:55,839
trackers like I mentioned JIRA bitbucket

00:11:52,439 --> 00:11:57,579
bugzilla and others so essentially all

00:11:55,839 --> 00:12:00,339
the information is out there both to

00:11:57,579 --> 00:12:03,309
understand your risk and also how to

00:12:00,339 --> 00:12:06,279
resolve it it's just a very big task to

00:12:03,309 --> 00:12:08,610
actually accumulate all this information

00:12:06,279 --> 00:12:11,759
and digest it and generate the right

00:12:08,610 --> 00:12:13,389
path to action and the right

00:12:11,759 --> 00:12:18,189
recommendations on how to handle

00:12:13,389 --> 00:12:20,410
security vulnerabilities so yeah as I

00:12:18,189 --> 00:12:24,970
mentioned our information is scattered

00:12:20,410 --> 00:12:27,939
you have to have the right robot or the

00:12:24,970 --> 00:12:31,179
right people usually companies will

00:12:27,939 --> 00:12:33,249
employ security analyst teams to track

00:12:31,179 --> 00:12:35,819
these back trackers these also these

00:12:33,249 --> 00:12:39,360
security advisories and to prioritize

00:12:35,819 --> 00:12:45,189
security issues based on data being

00:12:39,360 --> 00:12:48,639
harvested from these sources this is a

00:12:45,189 --> 00:12:50,829
key point and I mentioned that by the

00:12:48,639 --> 00:12:53,769
way the numbers here are the the yellow

00:12:50,829 --> 00:12:57,399
are companies that are larger than 1,000

00:12:53,769 --> 00:13:02,889
employees orange should be 500 to a

00:12:57,399 --> 00:13:06,160
thousand and blue should be below 500

00:13:02,889 --> 00:13:07,600
employees so if you see the chop the top

00:13:06,160 --> 00:13:10,360
challenges in using open source

00:13:07,600 --> 00:13:12,040
components the focus is on

00:13:10,360 --> 00:13:15,639
vulnerabilities and the largest the

00:13:12,040 --> 00:13:18,140
company is the largest focuses so while

00:13:15,639 --> 00:13:20,120
small customers may be a less concern

00:13:18,140 --> 00:13:21,680
about vulnerabilities very large

00:13:20,120 --> 00:13:25,010
customers are really concerned about

00:13:21,680 --> 00:13:27,020
that they understand the impact and I

00:13:25,010 --> 00:13:30,590
know how many of you heard about the

00:13:27,020 --> 00:13:33,320
Equifax case in the u.s. yeah most of

00:13:30,590 --> 00:13:36,710
you I just thought in one sentence it's

00:13:33,320 --> 00:13:42,890
one of the largest consumer databases

00:13:36,710 --> 00:13:44,900
for credit risk or credit scoring that

00:13:42,890 --> 00:13:47,240
was hacked that you were using Apache

00:13:44,900 --> 00:13:50,690
strats open-source components back in

00:13:47,240 --> 00:13:52,430
2017 it took them almost four months

00:13:50,690 --> 00:13:54,110
from the day they discovered the

00:13:52,430 --> 00:13:57,020
vulnerability to the day they fixed it

00:13:54,110 --> 00:13:59,780
this window of opportunities was used to

00:13:57,020 --> 00:14:02,510
hack into the system to extract all the

00:13:59,780 --> 00:14:05,090
personal information of almost 200

00:14:02,510 --> 00:14:08,030
million Americans which is huge

00:14:05,090 --> 00:14:10,160
now see I had to resign the stock

00:14:08,030 --> 00:14:12,770
plummeted in all companies under kind of

00:14:10,160 --> 00:14:15,110
a restructure right now just because

00:14:12,770 --> 00:14:19,330
they didn't resolve this security issue

00:14:15,110 --> 00:14:19,330
on time and doesn't have to be this way

00:14:21,100 --> 00:14:26,450
this is really interesting because it it

00:14:24,110 --> 00:14:31,700
varied between different types of

00:14:26,450 --> 00:14:35,180
companies but developers do invest in

00:14:31,700 --> 00:14:39,320
resolving security issues and they spent

00:14:35,180 --> 00:14:41,930
almost two days out of the week to do

00:14:39,320 --> 00:14:43,700
that they may not be doing that two days

00:14:41,930 --> 00:14:47,390
every week they may have like an end of

00:14:43,700 --> 00:14:49,400
Sprint or end of release time where they

00:14:47,390 --> 00:14:52,390
dedicate more days to security

00:14:49,400 --> 00:14:55,520
vulnerabilities but usually they will

00:14:52,390 --> 00:14:58,670
they will use a lot of their time to

00:14:55,520 --> 00:15:00,170
update pieces of code and resolving a

00:14:58,670 --> 00:15:02,690
security vulnerability doesn't mean that

00:15:00,170 --> 00:15:04,340
the reward code easily they will just

00:15:02,690 --> 00:15:06,950
use a new version of a package or

00:15:04,340 --> 00:15:09,200
multiple different packages but when

00:15:06,950 --> 00:15:10,760
they do that they have to make sure that

00:15:09,200 --> 00:15:13,460
the software is compatible with previous

00:15:10,760 --> 00:15:15,020
versions they have me to rerun all the

00:15:13,460 --> 00:15:17,060
tests they have to make sure that

00:15:15,020 --> 00:15:18,740
nothing is getting broken and they have

00:15:17,060 --> 00:15:20,840
to merge that to the master branch and

00:15:18,740 --> 00:15:22,490
see what's the impact on the overall

00:15:20,840 --> 00:15:25,420
applications in the organization and

00:15:22,490 --> 00:15:25,420
that takes a lot of time

00:15:27,400 --> 00:15:33,660
and this is a really important

00:15:30,540 --> 00:15:35,890
understanding we've asked developers

00:15:33,660 --> 00:15:39,550
when you find out on the ability what's

00:15:35,890 --> 00:15:43,180
the process what do you do no common

00:15:39,550 --> 00:15:45,480
answer there's like it's all over it's

00:15:43,180 --> 00:15:47,980
all over because organizations

00:15:45,480 --> 00:15:50,190
acknowledge the importance of resolving

00:15:47,980 --> 00:15:53,770
security vulnerabilities in open source

00:15:50,190 --> 00:15:56,230
but they don't have the right processes

00:15:53,770 --> 00:15:58,720
in place and it's not really clear who's

00:15:56,230 --> 00:16:02,710
the owner when they do that and what's

00:15:58,720 --> 00:16:03,820
the validation process even if they did

00:16:02,710 --> 00:16:08,350
if they've done that

00:16:03,820 --> 00:16:10,690
so most other like a third of them they

00:16:08,350 --> 00:16:12,940
said that they will use some of the open

00:16:10,690 --> 00:16:14,950
source community recommendations to

00:16:12,940 --> 00:16:18,339
remediate but some of them says I'm

00:16:14,950 --> 00:16:20,529
going to research I'm going to take that

00:16:18,339 --> 00:16:24,670
with my security team but there was no

00:16:20,529 --> 00:16:26,980
clear answer and that means that usually

00:16:24,670 --> 00:16:28,810
this process of resolving security

00:16:26,980 --> 00:16:32,170
vulnerabilities is inefficient in

00:16:28,810 --> 00:16:36,190
companies and there needs to be a new

00:16:32,170 --> 00:16:40,270
way to address these issues so the key

00:16:36,190 --> 00:16:42,820
actually to do that is besides of having

00:16:40,270 --> 00:16:44,380
the right process in place is to first

00:16:42,820 --> 00:16:48,490
focus on what matters

00:16:44,380 --> 00:16:50,920
focus on prioritizing the right security

00:16:48,490 --> 00:16:54,390
vulnerabilities first and if you look at

00:16:50,920 --> 00:16:57,480
it it's kind of like a marketing funnel

00:16:54,390 --> 00:17:01,060
where you first look at what are the

00:16:57,480 --> 00:17:02,860
business priorities for my applications

00:17:01,060 --> 00:17:05,199
I would take the probably the

00:17:02,860 --> 00:17:06,699
front-facing applications first the ones

00:17:05,199 --> 00:17:09,640
that are very important to my business

00:17:06,699 --> 00:17:11,770
and then probably the internal apps

00:17:09,640 --> 00:17:13,480
second and then some test applications

00:17:11,770 --> 00:17:16,089
the third but first of all it's the

00:17:13,480 --> 00:17:18,010
business impact and then it would be

00:17:16,089 --> 00:17:20,470
what is the severity of the of the

00:17:18,010 --> 00:17:22,510
vulnerability there's a common way of

00:17:20,470 --> 00:17:25,990
scoring security vulnerabilities called

00:17:22,510 --> 00:17:27,970
CVS's scores between zero and ten which

00:17:25,990 --> 00:17:29,770
they have some internal metrics like

00:17:27,970 --> 00:17:33,490
what is the impact how easy it is to

00:17:29,770 --> 00:17:36,310
actually exploitable the the

00:17:33,490 --> 00:17:37,900
vulnerability is what what is the attack

00:17:36,310 --> 00:17:39,600
vector was reach you the network

00:17:37,900 --> 00:17:42,000
database and so on

00:17:39,600 --> 00:17:44,070
although they provide one grade that's

00:17:42,000 --> 00:17:46,350
called a CBS escort for vulnerabilities

00:17:44,070 --> 00:17:48,570
by the way this Apache struts has a 10

00:17:46,350 --> 00:17:51,809
it has a 10 score so it was like the

00:17:48,570 --> 00:17:53,480
highest possible but if you speak to

00:17:51,809 --> 00:17:56,240
analysts or anybody in the industry

00:17:53,480 --> 00:17:58,770
everybody understands that there's no

00:17:56,240 --> 00:18:01,020
zero risk I mean you always have

00:17:58,770 --> 00:18:03,390
something it could be a low priority or

00:18:01,020 --> 00:18:05,580
a low severity vulnerability to be one

00:18:03,390 --> 00:18:08,549
of your low priority applications and

00:18:05,580 --> 00:18:10,650
it's okay but focus on what matters what

00:18:08,549 --> 00:18:16,260
impact your business that's the key to

00:18:10,650 --> 00:18:18,900
actually doing it right and then if you

00:18:16,260 --> 00:18:21,169
look at okay and then we've asked some

00:18:18,900 --> 00:18:23,580
developers how do you prioritize

00:18:21,169 --> 00:18:26,640
handling of security vulnerabilities in

00:18:23,580 --> 00:18:28,530
open source again no clear answer some

00:18:26,640 --> 00:18:30,780
set by the business impact some set by

00:18:28,530 --> 00:18:34,710
the severity of the vulnerability some

00:18:30,780 --> 00:18:37,020
set by by mind my personal knowledge of

00:18:34,710 --> 00:18:39,120
the of the vulnerability if there's a

00:18:37,020 --> 00:18:41,130
fix or not and I would take the ones

00:18:39,120 --> 00:18:43,590
with a fixed first because it's easier

00:18:41,130 --> 00:18:46,770
to to do that but there was no clear

00:18:43,590 --> 00:18:50,429
process and at the end of the day if you

00:18:46,770 --> 00:18:53,730
prioritize correctly then DevOps

00:18:50,429 --> 00:18:55,169
security legal they'll go to the dev

00:18:53,730 --> 00:18:57,210
teams with a small number of

00:18:55,169 --> 00:19:00,750
vulnerabilities that really matter the

00:18:57,210 --> 00:19:03,299
cooperation will be much better if we

00:19:00,750 --> 00:19:05,880
install our tool Don and I would say

00:19:03,299 --> 00:19:09,000
three to five applications usually in a

00:19:05,880 --> 00:19:11,730
proof of concept we will end up with

00:19:09,000 --> 00:19:13,740
dozens or sometimes hundreds of open

00:19:11,730 --> 00:19:16,730
source security vulnerabilities and if

00:19:13,740 --> 00:19:19,740
I'm going back to the previous session

00:19:16,730 --> 00:19:22,200
most of them will actually be in the

00:19:19,740 --> 00:19:25,049
transitively deployment packages so you

00:19:22,200 --> 00:19:27,840
may use an open source package file of

00:19:25,049 --> 00:19:31,590
vulnerabilities inside but this open

00:19:27,840 --> 00:19:33,570
source package brings with it 50 other

00:19:31,590 --> 00:19:36,200
like if you take a structural screen

00:19:33,570 --> 00:19:39,870
there's so many different open source

00:19:36,200 --> 00:19:42,690
packages that are brought together with

00:19:39,870 --> 00:19:45,450
these packages that may depend on them

00:19:42,690 --> 00:19:47,309
that they have vulnerabilities inside so

00:19:45,450 --> 00:19:49,020
all in all it's really overwhelming and

00:19:47,309 --> 00:19:51,780
they just don't know where to start and

00:19:49,020 --> 00:19:53,220
the way to really start right is to

00:19:51,780 --> 00:19:57,419
prioritize these

00:19:53,220 --> 00:20:00,630
security vulnerabilities the really

00:19:57,419 --> 00:20:04,409
important aspect of prioritization and

00:20:00,630 --> 00:20:08,130
this is a very new technology in the

00:20:04,409 --> 00:20:10,380
industry is to understand out of these

00:20:08,130 --> 00:20:15,559
dozens or hundreds of vulnerabilities

00:20:10,380 --> 00:20:18,450
what really impacts my application so

00:20:15,559 --> 00:20:22,799
there was the patchy strata liability

00:20:18,450 --> 00:20:26,820
that Equifax were actually vulnerable to

00:20:22,799 --> 00:20:29,070
but I may have this one durability

00:20:26,820 --> 00:20:31,710
reported because I'm using the save

00:20:29,070 --> 00:20:33,990
version of Apache struts but my

00:20:31,710 --> 00:20:35,490
application may never call the

00:20:33,990 --> 00:20:38,789
vulnerable code or the vulnerable

00:20:35,490 --> 00:20:41,100
function so that means that it's risky

00:20:38,789 --> 00:20:43,950
maybe the next release will eventually

00:20:41,100 --> 00:20:47,610
get there but for now I'd rather focus

00:20:43,950 --> 00:20:50,520
on other priorities first and with

00:20:47,610 --> 00:20:54,799
whether we have such a technology in

00:20:50,520 --> 00:20:58,770
place and we found out that out of

00:20:54,799 --> 00:21:03,030
thousands of different applications more

00:20:58,770 --> 00:21:04,980
than 70% of the reported open source

00:21:03,030 --> 00:21:08,039
security vulnerabilities associated with

00:21:04,980 --> 00:21:09,870
packages the customers used we're never

00:21:08,039 --> 00:21:12,299
going to be called and there will not be

00:21:09,870 --> 00:21:14,760
an effective so they can take actions

00:21:12,299 --> 00:21:17,760
they can prioritize them but they better

00:21:14,760 --> 00:21:20,970
focus on the other 30% that actually

00:21:17,760 --> 00:21:24,299
impact their specific applications and

00:21:20,970 --> 00:21:27,000
that's our that's kind of our news to

00:21:24,299 --> 00:21:30,020
the industry in which you reduce a lot

00:21:27,000 --> 00:21:32,280
of false positives a lot of noise you

00:21:30,020 --> 00:21:34,860
when you speak to the developers you

00:21:32,280 --> 00:21:36,990
bring them just a handful number of open

00:21:34,860 --> 00:21:39,150
source security vulnerabilities and you

00:21:36,990 --> 00:21:40,860
don't have to work with them on your

00:21:39,150 --> 00:21:43,020
dozens or hundreds of our abilities that

00:21:40,860 --> 00:21:45,210
will never get really addressed because

00:21:43,020 --> 00:21:47,840
it's too much and nobody really loves to

00:21:45,210 --> 00:21:50,880
do it I'm gonna accept this guy here

00:21:47,840 --> 00:21:51,060
yeah are you looking for a job by the

00:21:50,880 --> 00:21:54,140
way

00:21:51,060 --> 00:22:00,840
[Laughter]

00:21:54,140 --> 00:22:04,340
yeah ok so this is a this is some

00:22:00,840 --> 00:22:06,830
results from the test we ran with 25

00:22:04,340 --> 00:22:09,510
commercial applications

00:22:06,830 --> 00:22:11,760
all these applications were found to be

00:22:09,510 --> 00:22:14,400
vulnerable we didn't take the latest

00:22:11,760 --> 00:22:16,530
release but a one before and usually

00:22:14,400 --> 00:22:18,180
that means that if there is the latest

00:22:16,530 --> 00:22:20,750
release somebody already resolved some

00:22:18,180 --> 00:22:24,780
security issues usually they will

00:22:20,750 --> 00:22:26,790
release a new update for that 90% of

00:22:24,780 --> 00:22:28,440
these vulnerabilities were found

00:22:26,790 --> 00:22:30,840
actually in the transitively dependent

00:22:28,440 --> 00:22:32,700
packages not in the packages they used

00:22:30,840 --> 00:22:34,680
themselves which is really important to

00:22:32,700 --> 00:22:37,230
understand first how do you know what

00:22:34,680 --> 00:22:40,560
you have to resolve the right

00:22:37,230 --> 00:22:44,070
vulnerabilities and then out of these

00:22:40,560 --> 00:22:46,440
vulnerabilities more than 85% were not

00:22:44,070 --> 00:22:49,050
really effective so although the number

00:22:46,440 --> 00:22:51,570
of vulnerabilities to handle was so low

00:22:49,050 --> 00:22:53,730
that it would be really easy to go in

00:22:51,570 --> 00:22:56,550
speculative to the development teams to

00:22:53,730 --> 00:22:59,070
resolve that so all the testing and

00:22:56,550 --> 00:23:00,900
impact and all that if you just resolve

00:22:59,070 --> 00:23:03,210
three or five vulnerabilities that

00:23:00,900 --> 00:23:06,300
something a developer can handle in a

00:23:03,210 --> 00:23:09,240
few hours not days and these 15 hours

00:23:06,300 --> 00:23:11,210
can be easily turned out to be two or

00:23:09,240 --> 00:23:15,320
three hours which you know just makes

00:23:11,210 --> 00:23:20,880
makes it easy on the development teams

00:23:15,320 --> 00:23:23,850
so just a few facts about us we write

00:23:20,880 --> 00:23:27,090
source we're part of FEMA's were based

00:23:23,850 --> 00:23:30,060
out of Tel Aviv we have offices in New

00:23:27,090 --> 00:23:32,940
York and Boston a little bit more than

00:23:30,060 --> 00:23:36,540
120 employees more than 500 customers

00:23:32,940 --> 00:23:39,230
worldwide we have millions of developers

00:23:36,540 --> 00:23:42,270
using the software many of the Fortune

00:23:39,230 --> 00:23:44,370
100 companies or customers of ours and

00:23:42,270 --> 00:23:46,380
we're growing really really fast just

00:23:44,370 --> 00:23:48,690
because the industry and the awareness

00:23:46,380 --> 00:23:52,560
of open source compliance and security

00:23:48,690 --> 00:23:54,540
is on a big rise so and there's tool to

00:23:52,560 --> 00:23:57,240
actually remediate that and use tool to

00:23:54,540 --> 00:23:59,220
automate the whole process so many of

00:23:57,240 --> 00:24:02,700
these organizations acknowledge that and

00:23:59,220 --> 00:24:06,560
use that so we have a few minutes for

00:24:02,700 --> 00:24:06,560
Q&A right oh good

00:24:20,010 --> 00:24:24,429
well it's a very good question

00:24:22,179 --> 00:24:26,770
the technology was released for Java and

00:24:24,429 --> 00:24:33,490
it's now in beta stages for JavaScript

00:24:26,770 --> 00:24:36,100
it's a very hard task and we are doing

00:24:33,490 --> 00:24:38,110
very good there we're working in it for

00:24:36,100 --> 00:24:41,790
the last year or so with many beta

00:24:38,110 --> 00:24:44,620
customers and we have a guy who's a PhD

00:24:41,790 --> 00:24:48,700
in X IBM who has done reachability

00:24:44,620 --> 00:24:51,220
analysis in his master's and PhD that

00:24:48,700 --> 00:24:56,169
actually works on these types of tools

00:24:51,220 --> 00:24:58,000
that actually generated JavaScript it's

00:24:56,169 --> 00:25:30,280
really hard because it's a very dynamic

00:24:58,000 --> 00:25:32,620
environment so we were integrated pretty

00:25:30,280 --> 00:25:34,900
much anywhere in the CI CD struggling

00:25:32,620 --> 00:25:37,360
with your IDE where when you build

00:25:34,900 --> 00:25:38,860
something we will analyze there we have

00:25:37,360 --> 00:25:39,610
a command-line agent that you can fire

00:25:38,860 --> 00:25:42,340
anywhere

00:25:39,610 --> 00:25:45,700
we have customers running us in the CI

00:25:42,340 --> 00:25:48,250
process in Jenkins Travie circle of TFS

00:25:45,700 --> 00:25:50,440
BSP pretty much anywhere there we have

00:25:48,250 --> 00:25:52,240
customers running us on the repos when

00:25:50,440 --> 00:25:55,240
people push code or when they do a pull

00:25:52,240 --> 00:25:57,880
request a trigger scan we have customers

00:25:55,240 --> 00:26:01,120
who scan containers whether in

00:25:57,880 --> 00:26:03,850
production at scale or even in a

00:26:01,120 --> 00:26:06,040
container orchestration platform and we

00:26:03,850 --> 00:26:08,740
have the we have the technology to

00:26:06,040 --> 00:26:10,660
actually alert on new vulnerabilities

00:26:08,740 --> 00:26:12,850
that impact existing applications as

00:26:10,660 --> 00:26:15,090
well so it's pretty much anywhere in the

00:26:12,850 --> 00:26:15,090
CIC

00:26:30,350 --> 00:26:35,539
you scan that as well hold up your

00:26:33,049 --> 00:26:38,210
scanning only when he's scanning at the

00:26:35,539 --> 00:26:40,789
build stage before the build stage but

00:26:38,210 --> 00:26:42,350
you actually got so for the normal

00:26:40,789 --> 00:26:44,090
scanning not the effective visit

00:26:42,350 --> 00:26:45,830
scanning we scan at the build stage

00:26:44,090 --> 00:26:49,130
behavior usually we have the package

00:26:45,830 --> 00:26:51,020
manifest files like people mentioned

00:26:49,130 --> 00:26:53,330
maven it could be grade or it could be

00:26:51,020 --> 00:26:55,520
any we have like more than 40 different

00:26:53,330 --> 00:26:56,990
package managers that we support to

00:26:55,520 --> 00:27:00,200
understand all the dependencies and

00:26:56,990 --> 00:27:02,240
transitive dependencies and then we have

00:27:00,200 --> 00:27:03,860
all the picture to actually provide you

00:27:02,240 --> 00:27:05,539
with a bill of materials for licensing

00:27:03,860 --> 00:27:07,100
on one hand and your security

00:27:05,539 --> 00:27:09,140
vulnerabilities on the other hand and

00:27:07,100 --> 00:27:12,289
the effective use of generalities we we

00:27:09,140 --> 00:27:15,440
analyze the binaries as well we know how

00:27:12,289 --> 00:27:18,460
to decompose a jar file or a wire file

00:27:15,440 --> 00:27:21,740
to the holy executable pathways and

00:27:18,460 --> 00:27:32,630
construct the which reachability --vs

00:27:21,740 --> 00:27:34,429
you have the growth yeah we do the

00:27:32,630 --> 00:27:37,159
docker image scanning we understand all

00:27:34,429 --> 00:27:40,880
the layers or the Linux packages rpm WM

00:27:37,159 --> 00:27:43,309
we went to all that and also all the

00:27:40,880 --> 00:27:46,429
applications inside the image and if you

00:27:43,309 --> 00:27:47,870
have a security vulnerability even after

00:27:46,429 --> 00:27:49,640
the image is built we will let you know

00:27:47,870 --> 00:27:52,570
that these images were impacted by the

00:27:49,640 --> 00:27:55,570
security vulnerability you may store the

00:27:52,570 --> 00:27:55,570
sorry

00:27:55,700 --> 00:28:03,460
[Music]

00:27:57,669 --> 00:28:08,539
August August September yeah yeah okay

00:28:03,460 --> 00:28:10,520
why from oh yeah yeah and now we are

00:28:08,539 --> 00:28:12,470
launching a solution for kubernetes so

00:28:10,520 --> 00:28:15,169
we ran in a container orchestration

00:28:12,470 --> 00:28:23,929
platform as well why destroy the docker

00:28:15,169 --> 00:28:26,350
images today oh oh okay okay yeah so

00:28:23,929 --> 00:28:26,350
that's coming

00:28:35,360 --> 00:28:40,560
so the Nexus lifecycle is kind of a

00:28:38,730 --> 00:28:43,610
software composition analysis product

00:28:40,560 --> 00:28:46,440
that resembles the same type of solution

00:28:43,610 --> 00:28:47,850
the the question is the coverage and the

00:28:46,440 --> 00:28:49,290
accuracy of the results and the

00:28:47,850 --> 00:28:52,230
technologies like effective usage

00:28:49,290 --> 00:28:54,990
analysis that differentiate between the

00:28:52,230 --> 00:28:56,850
various tools but essentially both

00:28:54,990 --> 00:28:59,430
companies offer a software composition

00:28:56,850 --> 00:29:01,500
analysis to Surma type also offers a bio

00:28:59,430 --> 00:29:03,410
repo called Nexus that that's something

00:29:01,500 --> 00:29:05,490
we don't have but on the other hand when

00:29:03,410 --> 00:29:08,390
analyzing and understanding open source

00:29:05,490 --> 00:29:08,390
that's what we do best

00:29:28,910 --> 00:29:37,350
you mean in terms of the process of

00:29:31,740 --> 00:29:39,420
handling vulnerabilities yes so what we

00:29:37,350 --> 00:29:41,970
say is first prioritize correctly so

00:29:39,420 --> 00:29:44,550
have a kind of a prioritization scheme

00:29:41,970 --> 00:29:46,410
in place first of all which apps are

00:29:44,550 --> 00:29:48,420
being impacted by the vulnerability is

00:29:46,410 --> 00:29:50,580
evolve on a really really effective or

00:29:48,420 --> 00:29:52,710
ineffective and what is the severity of

00:29:50,580 --> 00:29:55,350
the vulnerability could be low severity

00:29:52,710 --> 00:29:57,630
then you might you know do the medium

00:29:55,350 --> 00:29:59,310
and eyes first once you have this funnel

00:29:57,630 --> 00:30:03,090
and you have this kind of rating system

00:29:59,310 --> 00:30:04,470
you start a process of assigning the

00:30:03,090 --> 00:30:06,720
vulnerability to a developer or

00:30:04,470 --> 00:30:09,060
development team to resolve that and

00:30:06,720 --> 00:30:11,160
there will be in charge of upgrading to

00:30:09,060 --> 00:30:12,630
the latest version we also provide with

00:30:11,160 --> 00:30:14,820
the fixed recommendation so you don't

00:30:12,630 --> 00:30:17,430
have to work hard just apply this

00:30:14,820 --> 00:30:20,340
recommendation that could be upgrade to

00:30:17,430 --> 00:30:21,570
the latest version of the package delete

00:30:20,340 --> 00:30:24,000
this file change this configuration

00:30:21,570 --> 00:30:26,310
there's multiple different advices that

00:30:24,000 --> 00:30:29,370
the developers can apply on the code and

00:30:26,310 --> 00:30:32,760
then the risk I need the CI because if

00:30:29,370 --> 00:30:35,310
they push to the repo if they deploy a

00:30:32,760 --> 00:30:37,020
new version to testing they will fire a

00:30:35,310 --> 00:30:40,050
new scan and anishka will actually

00:30:37,020 --> 00:30:43,800
remove this alert or this specific task

00:30:40,050 --> 00:30:45,270
for remediating the security issue so if

00:30:43,800 --> 00:30:47,280
you have this process in place it

00:30:45,270 --> 00:30:48,659
doesn't have to be able to it if to just

00:30:47,280 --> 00:30:50,159
automates the process

00:30:48,659 --> 00:30:52,080
but if you have this process in place

00:30:50,159 --> 00:30:55,619
and you prioritize correctly you're

00:30:52,080 --> 00:30:57,899
pretty much you pretty much you know are

00:30:55,619 --> 00:31:00,629
taking this problem down to the level of

00:30:57,899 --> 00:31:10,379
just a simple interaction between the

00:31:00,629 --> 00:31:12,119
various things questions okay I'll be

00:31:10,379 --> 00:31:15,350
around if there's anything else during

00:31:12,119 --> 00:31:19,630
the rest of the day thank you so much

00:31:15,350 --> 00:31:22,889
[Applause]

00:31:19,630 --> 00:31:22,889

YouTube URL: https://www.youtube.com/watch?v=ZTnQJZWXWZQ


