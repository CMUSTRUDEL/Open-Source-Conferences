Title: FINOS Open Source in Fintech Meetup | Secure the Electron Container for Capital Markets | May 2020
Publication date: 2021-01-08
Playlist: FINOS Guest Speakers & Meetups
Description: 
	This video is from the FINOS Open Source in Fintech Meetup | How to Secure the Electron Container for Capital Markets | Kris West & Ian Mesner | Cosaic | May 2020

►► Wrap up article with slides from the meetup: https://www.finos.org/blog/how-to-secure-the-electron-container-for-capital-markets-kris-west-and-ian-mesner

-=-=-=-=-

►► Learn more about FINOS and how we deliver the power of open source to financial services:
FINOS: https://www.finos.org/

►► Playlist for all of our 2019 / 2020 Meetups and Guest Speakers: https://www.youtube.com/playlist?list=PLmPXh6nBuhJsYg1tP9dh3pNq2pVrGTdWs
 
►► Enjoy our FINOS Open Source in Fintech Podcast

All 2020 Podcasts: https://www.finos.org/blog/2020-finos-open-source-in-fintech-podcast-episodes

iTunes: https://podcasts.apple.com/us/podcast/finos-open-source-in-fintech-podcast/id1512371068

Spotify: https://open.spotify.com/show/431XdfX2fBdCUsopwh8td3

Google Podcasts: https://podcasts.google.com/feed/aHR0cHM6Ly9hbmNob3IuZm0vcy8xZjQ0NTg4MC9wb2RjYXN0L3Jzcw==

Stitcher: https://www.stitcher.com/show/finos-open-source-in-fintech-podcast
4

Anchor.fm (for all platform links): https://anchor.fm/finos
Captions: 
	00:00:03,690 --> 00:00:11,890
[Music]

00:00:12,950 --> 00:00:18,420
good afternoon and good morning to

00:00:15,660 --> 00:00:20,400
everybody on this finis virtual Meetup

00:00:18,420 --> 00:00:23,039
I'm James McLeod the director of

00:00:20,400 --> 00:00:25,619
community of finis and you're joining me

00:00:23,039 --> 00:00:28,320
today with Chris West director of

00:00:25,619 --> 00:00:31,080
solutions engineering and Ian messner

00:00:28,320 --> 00:00:34,860
chief architect at chart IQ who are

00:00:31,080 --> 00:00:37,739
Finnis members and today both Chris and

00:00:34,860 --> 00:00:40,379
Ian have joined us to present how to

00:00:37,739 --> 00:00:42,629
secure the electron container for

00:00:40,379 --> 00:00:44,250
capital markets but before we get

00:00:42,629 --> 00:00:46,170
started with the presentation this

00:00:44,250 --> 00:00:49,140
afternoon I'd like to let everybody know

00:00:46,170 --> 00:00:52,199
that we'll be given away a free finished

00:00:49,140 --> 00:00:54,930
t-shirt to a couple of people maybe two

00:00:52,199 --> 00:00:58,260
or three picked at random if you have

00:00:54,930 --> 00:01:00,510
actually registered and subscribed for

00:00:58,260 --> 00:01:04,010
this event if you haven't registered for

00:01:00,510 --> 00:01:07,229
this event please head over to the finis

00:01:04,010 --> 00:01:10,850
blog where you can register and then be

00:01:07,229 --> 00:01:13,260
in with the chance of actually winning

00:01:10,850 --> 00:01:16,770
thinnest t-shirt that we will ship to

00:01:13,260 --> 00:01:19,820
you and also remember to subscribe to

00:01:16,770 --> 00:01:22,710
the final speech on LinkedIn and also

00:01:19,820 --> 00:01:25,619
literal thinness foundation on Twitter

00:01:22,710 --> 00:01:27,869
where you can follow us and head over to

00:01:25,619 --> 00:01:30,630
Finister org where you can register for

00:01:27,869 --> 00:01:33,360
all of our newsletters and also find a

00:01:30,630 --> 00:01:34,799
very helpful get involved page where you

00:01:33,360 --> 00:01:36,900
can learn how to become a famous

00:01:34,799 --> 00:01:39,960
contributor and get involved in all of

00:01:36,900 --> 00:01:41,939
our projects if you are a developer and

00:01:39,960 --> 00:01:44,180
you would like to actually start raising

00:01:41,939 --> 00:01:47,250
pool requests in contributing to finis

00:01:44,180 --> 00:01:49,110
head over to github.com forward slash

00:01:47,250 --> 00:01:51,930
finis where you'll find our github

00:01:49,110 --> 00:01:54,530
organization you'll be able to engage

00:01:51,930 --> 00:01:57,600
with all of our github issues and start

00:01:54,530 --> 00:02:01,049
having conversations with our teams and

00:01:57,600 --> 00:02:03,329
if you've got any questions with regards

00:02:01,049 --> 00:02:06,780
to the webinar this afternoon feel free

00:02:03,329 --> 00:02:08,340
to use the chat window in WebEx where

00:02:06,780 --> 00:02:10,590
you'll see the social commentary running

00:02:08,340 --> 00:02:13,319
and we'll relay all of your questions

00:02:10,590 --> 00:02:13,680
over to the presenters or we'll ask and

00:02:13,319 --> 00:02:16,890
for

00:02:13,680 --> 00:02:19,379
you during the Q&A session and this is

00:02:16,890 --> 00:02:21,780
also the area where Grizz will be

00:02:19,379 --> 00:02:24,299
putting all of the links so with that

00:02:21,780 --> 00:02:28,200
I'd like to pass the mic over to Kris

00:02:24,299 --> 00:02:31,859
West hi Kris over to you thanks James

00:02:28,200 --> 00:02:34,049
so the purpose of today's talk is to

00:02:31,859 --> 00:02:36,000
familiarize you with security concepts

00:02:34,049 --> 00:02:38,400
as they relate to the electron framework

00:02:36,000 --> 00:02:41,040
and how we attach our IQ work with

00:02:38,400 --> 00:02:42,989
electron in a secure fashion so today

00:02:41,040 --> 00:02:44,909
we're going to discuss electrons make up

00:02:42,989 --> 00:02:47,340
at a high level how it's most commonly

00:02:44,909 --> 00:02:49,739
used and then how that differs from

00:02:47,340 --> 00:02:51,659
typical typical use cases in capital

00:02:49,739 --> 00:02:54,329
markets and the problem that that

00:02:51,659 --> 00:02:56,549
presents us with we're going to cover

00:02:54,329 --> 00:02:58,829
web application security and the browser

00:02:56,549 --> 00:03:01,379
the comfort of the browser sandbox and

00:02:58,829 --> 00:03:04,230
how that differs from security for the

00:03:01,379 --> 00:03:06,510
smart desktop or desktop Interop has

00:03:04,230 --> 00:03:08,459
some people bullet then we'll move on to

00:03:06,510 --> 00:03:10,859
implementing the electron project

00:03:08,459 --> 00:03:13,650
security checklist for untrusted content

00:03:10,859 --> 00:03:16,769
and our approach to that via policy

00:03:13,650 --> 00:03:18,599
based security finally we're going to

00:03:16,769 --> 00:03:20,220
introduce you to the secure electron of

00:03:18,599 --> 00:03:22,409
that so that we've recently contributed

00:03:20,220 --> 00:03:25,109
to finish and how that's based on

00:03:22,409 --> 00:03:27,180
security policies secure communication

00:03:25,109 --> 00:03:29,010
methods and an approach to application

00:03:27,180 --> 00:03:35,010
management that we use in our flagship

00:03:29,010 --> 00:03:36,359
smart desktop product Vince omble if

00:03:35,010 --> 00:03:38,430
you're attending this webinar

00:03:36,359 --> 00:03:40,769
you probably already know something

00:03:38,430 --> 00:03:43,290
about the open source electron framework

00:03:40,769 --> 00:03:45,780
which as the electron quick start guide

00:03:43,290 --> 00:03:47,939
puts it enables you to create desktop

00:03:45,780 --> 00:03:50,040
applications with pure JavaScript by

00:03:47,939 --> 00:03:54,180
providing a runtime with rich native

00:03:50,040 --> 00:03:56,759
api's and electron uses web pages as its

00:03:54,180 --> 00:03:58,259
GUI allowing developers to leverage the

00:03:56,759 --> 00:04:01,799
many and varied advances in web

00:03:58,259 --> 00:04:03,689
technology html5 and the truly awesome

00:04:01,799 --> 00:04:05,759
number of JavaScript frameworks and

00:04:03,689 --> 00:04:09,599
libraries out there in creating user

00:04:05,759 --> 00:04:11,759
interfaces but they're out now there are

00:04:09,599 --> 00:04:13,859
loads of applications out there already

00:04:11,759 --> 00:04:15,989
based on electron several which you're

00:04:13,859 --> 00:04:18,750
probably already using including Skype

00:04:15,989 --> 00:04:21,090
Microsoft teams Symphony slack Evernote

00:04:18,750 --> 00:04:23,550
and for the developers amongst you vs

00:04:21,090 --> 00:04:25,010
code and github desktop to name but a

00:04:23,550 --> 00:04:26,780
few

00:04:25,010 --> 00:04:28,850
it's also the foundation on which we

00:04:26,780 --> 00:04:33,190
build one of our products since omble

00:04:28,850 --> 00:04:33,190
the smart desktop framework for finance

00:04:33,790 --> 00:04:38,720
electron is based on and incorporates

00:04:36,650 --> 00:04:40,360
two other very important open-source

00:04:38,720 --> 00:04:43,160
projects that you will have heard of

00:04:40,360 --> 00:04:45,920
nodejs which is a JavaScript runtime

00:04:43,160 --> 00:04:48,100
focus on servers that extends javascript

00:04:45,920 --> 00:04:51,260
to use cases outside of the browser and

00:04:48,100 --> 00:04:52,940
chromium an open source browser project

00:04:51,260 --> 00:04:55,160
that forms the basis for Google Chrome

00:04:52,940 --> 00:04:58,310
and is also a fully featured web browser

00:04:55,160 --> 00:05:00,800
in its own right quoting from the

00:04:58,310 --> 00:05:03,290
electron QuickStart guide you could see

00:05:00,800 --> 00:05:05,600
electron as a variant of the node.js

00:05:03,290 --> 00:05:07,900
runtime that is focused on desktop

00:05:05,600 --> 00:05:11,660
applications instead of web servers and

00:05:07,900 --> 00:05:13,670
as electron uses web pages as its GUI

00:05:11,660 --> 00:05:15,050
you could also see it as a minimal

00:05:13,670 --> 00:05:18,680
chromium browser controlled by

00:05:15,050 --> 00:05:20,510
JavaScript electron combines web server

00:05:18,680 --> 00:05:23,120
technology with web browser technology

00:05:20,510 --> 00:05:28,550
to allow us to use web technologies to

00:05:23,120 --> 00:05:30,880
build desktop applications there's

00:05:28,550 --> 00:05:34,010
essentially a dichotomy in how these two

00:05:30,880 --> 00:05:35,930
technologies and projects access content

00:05:34,010 --> 00:05:38,150
which bleeds over into electron and

00:05:35,930 --> 00:05:39,920
affects how you might use it and how you

00:05:38,150 --> 00:05:43,670
might think about and provide security

00:05:39,920 --> 00:05:45,500
for that use if you're an application

00:05:43,670 --> 00:05:46,970
vendor you're probably looking to use

00:05:45,500 --> 00:05:49,160
electron as the runtime for your app

00:05:46,970 --> 00:05:51,230
with a polished GUI built with web

00:05:49,160 --> 00:05:52,880
technologies but it's actually packaged

00:05:51,230 --> 00:05:55,640
and shipped with it to be installed on a

00:05:52,880 --> 00:05:57,800
user's computer plus some powerful desk

00:05:55,640 --> 00:05:59,810
and file system api is from node and

00:05:57,800 --> 00:06:04,070
electron itself that allow you to easily

00:05:59,810 --> 00:06:05,540
create a great desktop app experience if

00:06:04,070 --> 00:06:08,690
you're looking to build what so many of

00:06:05,540 --> 00:06:10,550
us are in capital markets and ecosystem

00:06:08,690 --> 00:06:12,320
of separate applications from multiple

00:06:10,550 --> 00:06:15,050
sources that are all talking to each

00:06:12,320 --> 00:06:17,990
other in interoperating what we attract

00:06:15,050 --> 00:06:19,550
you think of as a smart desktop then

00:06:17,990 --> 00:06:21,680
you're probably also looking to gain the

00:06:19,550 --> 00:06:24,800
myriad benefits of web deployment and

00:06:21,680 --> 00:06:26,990
interrupt such as the ability to update

00:06:24,800 --> 00:06:28,970
code without having to run installers or

00:06:26,990 --> 00:06:32,330
have lengthy conversations with your IT

00:06:28,970 --> 00:06:34,160
departments and deploy might be looking

00:06:32,330 --> 00:06:35,840
for ways to combine apps or components

00:06:34,160 --> 00:06:38,570
from different teams or vendors and

00:06:35,840 --> 00:06:40,610
enjoy loose coupling between compare

00:06:38,570 --> 00:06:42,680
rather than having to build monolithic

00:06:40,610 --> 00:06:44,920
projects as many of us have had to in

00:06:42,680 --> 00:06:44,920
the past

00:06:45,160 --> 00:06:51,140
do we need to secure electron well for

00:06:48,680 --> 00:06:52,640
single application vendors the answer is

00:06:51,140 --> 00:06:54,830
no not really

00:06:52,640 --> 00:06:56,510
now if you think back to when you last

00:06:54,830 --> 00:06:58,850
installed one of these products but

00:06:56,510 --> 00:07:01,730
already based on electron did you worry

00:06:58,850 --> 00:07:03,560
about security probably not if you're a

00:07:01,730 --> 00:07:06,200
single application vendor then the same

00:07:03,560 --> 00:07:07,430
most likely applies to your users they

00:07:06,200 --> 00:07:09,410
don't have to worry about the app

00:07:07,430 --> 00:07:11,300
attacking the desktop they've already

00:07:09,410 --> 00:07:13,220
decided to trust you when they install

00:07:11,300 --> 00:07:16,670
your app just like you decided to trust

00:07:13,220 --> 00:07:18,080
Microsoft when you installed Skype you

00:07:16,670 --> 00:07:20,390
may have to provide some answers or

00:07:18,080 --> 00:07:22,160
insurances to their own prosecco IT

00:07:20,390 --> 00:07:25,400
teams but ultimately they've decided to

00:07:22,160 --> 00:07:27,410
trust you there's also only one vendor

00:07:25,400 --> 00:07:29,690
involved here so little need to worry

00:07:27,410 --> 00:07:31,430
about multiple apps attacking or spying

00:07:29,690 --> 00:07:34,400
on each other or just generally

00:07:31,430 --> 00:07:36,770
interfering with each other you know our

00:07:34,400 --> 00:07:39,230
smart desktops on the other hand there's

00:07:36,770 --> 00:07:41,510
a very different level of complexity and

00:07:39,230 --> 00:07:43,340
security concerns to deal with but have

00:07:41,510 --> 00:07:48,440
more in common with consuming software

00:07:43,340 --> 00:07:49,850
from the web you might be thinking hang

00:07:48,440 --> 00:07:51,770
on I don't worry about this when

00:07:49,850 --> 00:07:53,960
accessing a web app in my browser and

00:07:51,770 --> 00:07:55,760
that's because developers have been

00:07:53,960 --> 00:07:58,670
building business apps on the web for

00:07:55,760 --> 00:07:59,990
many many years now we're all used to

00:07:58,670 --> 00:08:02,480
worrying about things like cross-site

00:07:59,990 --> 00:08:05,420
scripting and SQL injections and we

00:08:02,480 --> 00:08:07,610
follow standards and best practices plus

00:08:05,420 --> 00:08:09,440
both common vulnerabilities and best

00:08:07,610 --> 00:08:11,660
practices for web app development are

00:08:09,440 --> 00:08:14,060
analyzed and published by organizations

00:08:11,660 --> 00:08:17,330
like the open web application security

00:08:14,060 --> 00:08:20,060
project a wasp who published their list

00:08:17,330 --> 00:08:22,190
of the top 10 web app security risks

00:08:20,060 --> 00:08:24,380
there's also to the software engineering

00:08:22,190 --> 00:08:26,930
Institute current Carnegie Mellon which

00:08:24,380 --> 00:08:28,700
runs the cert program and the US

00:08:26,930 --> 00:08:31,810
Department of Homeland Security cyber

00:08:28,700 --> 00:08:33,919
and infrastructure security agency sisa

00:08:31,810 --> 00:08:35,540
along with a number of other national

00:08:33,919 --> 00:08:37,460
level organizations from other parts of

00:08:35,540 --> 00:08:41,650
the world all of whom maintain their own

00:08:37,460 --> 00:08:41,650
lists of active exploits and security

00:08:42,729 --> 00:08:48,590
this list comes from the wasp project

00:08:46,370 --> 00:08:50,670
it's known as the OWASP top 10 web

00:08:48,590 --> 00:08:53,360
application security risks

00:08:50,670 --> 00:08:55,860
most of these lists have similar themes

00:08:53,360 --> 00:08:57,570
cleanser inputs establish user

00:08:55,860 --> 00:09:00,000
credentials with encryption or off

00:08:57,570 --> 00:09:03,150
source that's a sam'l l doubt post some

00:09:00,000 --> 00:09:05,160
SSO system control access to resources

00:09:03,150 --> 00:09:07,980
through role based authorization and

00:09:05,160 --> 00:09:10,680
access control lists audit dependencies

00:09:07,980 --> 00:09:13,070
and audit all your code and then log

00:09:10,680 --> 00:09:15,690
access and lockdown login information

00:09:13,070 --> 00:09:17,580
these things are well known in the

00:09:15,690 --> 00:09:19,530
industry they are best practices and

00:09:17,580 --> 00:09:21,330
they are religiously adhered to with

00:09:19,530 --> 00:09:23,010
numerous firms available to

00:09:21,330 --> 00:09:27,470
independently evaluate your product

00:09:23,010 --> 00:09:27,470
security through penetration testing

00:09:28,670 --> 00:09:34,560
we're all also used to working in a very

00:09:32,070 --> 00:09:39,210
safe environment that is the browser tab

00:09:34,560 --> 00:09:41,160
a large team of engineers browsers are

00:09:39,210 --> 00:09:43,890
able to quickly respond to newly

00:09:41,160 --> 00:09:45,390
discovered security threats and they

00:09:43,890 --> 00:09:47,790
were designed from the beginning to

00:09:45,390 --> 00:09:49,740
execute remote untrusted code and we

00:09:47,790 --> 00:09:52,620
relied on that underlying security for

00:09:49,740 --> 00:09:54,960
decades browsers include a very

00:09:52,620 --> 00:09:57,090
restricted offering of operating system

00:09:54,960 --> 00:09:59,370
API so you don't get access to the file

00:09:57,090 --> 00:10:02,730
system the registry user settings etc

00:09:59,370 --> 00:10:04,260
and there's a permission API to ask the

00:10:02,730 --> 00:10:06,690
user before granting access to

00:10:04,260 --> 00:10:10,320
facilities like the microphone camera

00:10:06,690 --> 00:10:12,240
geolocation data etc they also have an

00:10:10,320 --> 00:10:14,400
integrated sandbox so that all comes

00:10:12,240 --> 00:10:16,500
between browser instances is broken

00:10:14,400 --> 00:10:18,180
through the main process but token

00:10:16,500 --> 00:10:20,010
validation used to ensure that it's

00:10:18,180 --> 00:10:23,760
coming from the assumed browser instance

00:10:20,010 --> 00:10:25,560
and they implemented site isolation so

00:10:23,760 --> 00:10:28,080
every web browser instance is launched

00:10:25,560 --> 00:10:30,690
in a new process which you can see in

00:10:28,080 --> 00:10:32,310
your task manager which also ensures

00:10:30,690 --> 00:10:34,020
that memory and settings running within

00:10:32,310 --> 00:10:36,200
one web browser instance can't be

00:10:34,020 --> 00:10:38,880
accessed or modified by another and

00:10:36,200 --> 00:10:41,100
finally they've implemented web security

00:10:38,880 --> 00:10:43,800
policies that restrict communication

00:10:41,100 --> 00:10:46,320
based on the origin of the data the page

00:10:43,800 --> 00:10:49,040
that's being displayed the dreaded cause

00:10:46,320 --> 00:10:49,040
policies

00:10:49,610 --> 00:10:55,200
didn't I say electron was based on a web

00:10:52,260 --> 00:10:57,600
browser well it is based on chromium

00:10:55,200 --> 00:10:59,160
which does take significant steps to

00:10:57,600 --> 00:11:01,530
ensure that the remote code loaded

00:10:59,160 --> 00:11:04,470
within a webpage can't affect the system

00:11:01,530 --> 00:11:07,470
or the contents of other browser windows

00:11:04,470 --> 00:11:08,790
but it's also based on nodejs which

00:11:07,470 --> 00:11:10,530
we've already established is a web

00:11:08,790 --> 00:11:13,020
server and server-side general-purpose

00:11:10,530 --> 00:11:14,940
programming language and isn't actually

00:11:13,020 --> 00:11:19,050
designed out-of-the-box for running

00:11:14,940 --> 00:11:20,910
remote code plus the electron project

00:11:19,050 --> 00:11:22,170
provided loads more powerful tools help

00:11:20,910 --> 00:11:24,150
you build your desktop app experience

00:11:22,170 --> 00:11:27,360
and have your various apps and windows

00:11:24,150 --> 00:11:29,220
talk to each other electron isn't

00:11:27,360 --> 00:11:31,140
necessarily designed with security in

00:11:29,220 --> 00:11:33,180
mind because you don't always need it

00:11:31,140 --> 00:11:35,130
and it can actually get in the way when

00:11:33,180 --> 00:11:37,260
you're building up an application we're

00:11:35,130 --> 00:11:38,880
going to look at more in a minute it

00:11:37,260 --> 00:11:41,700
does contain all the technology

00:11:38,880 --> 00:11:43,770
necessary to secure it it just doesn't

00:11:41,700 --> 00:11:50,810
ship with it all set up for our use case

00:11:43,770 --> 00:11:53,640
to recap on our smart desktop use case

00:11:50,810 --> 00:11:56,220
we're integrating apps from multiple

00:11:53,640 --> 00:11:57,840
sources we're using web technology to

00:11:56,220 --> 00:12:00,630
build applications outside of the

00:11:57,840 --> 00:12:03,120
browser we also want to enable

00:12:00,630 --> 00:12:06,630
communications in Interop but in those

00:12:03,120 --> 00:12:08,430
applications safely so how do we protect

00:12:06,630 --> 00:12:09,840
the operating system and the various

00:12:08,430 --> 00:12:12,840
apps from each other while still

00:12:09,840 --> 00:12:14,460
enabling interoperability and safely

00:12:12,840 --> 00:12:20,640
gaining the benefits of access its

00:12:14,460 --> 00:12:22,650
desktop api's a smart desktop or desktop

00:12:20,640 --> 00:12:24,150
interrupt product offers a unique set of

00:12:22,650 --> 00:12:26,600
challenges because similar to the web

00:12:24,150 --> 00:12:29,700
browsers they launch remote applications

00:12:26,600 --> 00:12:32,190
these must be assumed to be corrupted by

00:12:29,700 --> 00:12:34,110
or otherwise represent a bad actor

00:12:32,190 --> 00:12:36,960
trying to get access to both the system

00:12:34,110 --> 00:12:40,110
itself and the content of apps or users

00:12:36,960 --> 00:12:42,150
and unlike web browsers the smart

00:12:40,110 --> 00:12:43,920
desktop needs to offer a much richer set

00:12:42,150 --> 00:12:46,350
of functionality similar to desktop

00:12:43,920 --> 00:12:49,950
applications interacting directly with

00:12:46,350 --> 00:12:54,030
the operating system and each other this

00:12:49,950 --> 00:12:56,220
leads to two classes of issues security

00:12:54,030 --> 00:12:58,170
between applications that are now

00:12:56,220 --> 00:12:59,940
allowed to communicate with each other

00:12:58,170 --> 00:13:02,640
in a way that was never contemplated by

00:12:59,940 --> 00:13:05,040
the browser for example an online

00:13:02,640 --> 00:13:07,020
banking tab and a facebook tab don't

00:13:05,040 --> 00:13:08,940
often talk to each other con talk to

00:13:07,020 --> 00:13:11,160
each other so developers don't need to

00:13:08,940 --> 00:13:13,770
worry about their instance but in an

00:13:11,160 --> 00:13:17,750
unsecured desktop web container but it

00:13:13,770 --> 00:13:19,700
possibly can now we call this content

00:13:17,750 --> 00:13:21,950
are you making sure that hostile apps

00:13:19,700 --> 00:13:24,710
can't scrape information from each other

00:13:21,950 --> 00:13:27,670
in personally each other or sniff

00:13:24,710 --> 00:13:30,230
messages sent between other applications

00:13:27,670 --> 00:13:32,030
the second issue is applications

00:13:30,230 --> 00:13:34,670
interfacing with the desktop without the

00:13:32,030 --> 00:13:37,310
security of the browser sandbox and we

00:13:34,670 --> 00:13:38,810
call that system security or protecting

00:13:37,310 --> 00:13:45,620
the operating system from hostile

00:13:38,810 --> 00:13:48,770
applications content security and system

00:13:45,620 --> 00:13:50,180
security of report broad topics and a

00:13:48,770 --> 00:13:53,060
tchotchke we've developed a framework

00:13:50,180 --> 00:13:55,340
that's inspired by the OWASP top ten to

00:13:53,060 --> 00:13:57,290
break down the core elements employed

00:13:55,340 --> 00:14:00,340
our own work on pentonville which we

00:13:57,290 --> 00:14:02,480
refer to internally is the big aid

00:14:00,340 --> 00:14:04,820
system security we need to ensure that

00:14:02,480 --> 00:14:06,920
the best practices are followed for

00:14:04,820 --> 00:14:08,900
scrubbing inputs verifying credentials

00:14:06,920 --> 00:14:11,420
locking down access and running audits

00:14:08,900 --> 00:14:12,680
and for content security we need to

00:14:11,420 --> 00:14:14,930
offer functionality that makes it

00:14:12,680 --> 00:14:17,390
trivial to have secure communication and

00:14:14,930 --> 00:14:20,510
storage and lock down runtime state and

00:14:17,390 --> 00:14:22,480
configuration we must provide a smart

00:14:20,510 --> 00:14:25,760
desktop experience without having

00:14:22,480 --> 00:14:27,500
multiple gaping security holes so both

00:14:25,760 --> 00:14:30,020
classes the problem needs to be

00:14:27,500 --> 00:14:32,240
addressed and it's really the job of a

00:14:30,020 --> 00:14:34,310
smart desktop application the container

00:14:32,240 --> 00:14:36,110
for the other apps to solve these

00:14:34,310 --> 00:14:39,140
problems or at least ensure they are

00:14:36,110 --> 00:14:40,970
solvable rather than putting that down

00:14:39,140 --> 00:14:47,210
to the applications that it's actually

00:14:40,970 --> 00:14:49,490
hosting fortunately the team of electron

00:14:47,210 --> 00:14:51,740
are well aware of the problem and they

00:14:49,490 --> 00:14:53,360
go to pains to ensure that the users of

00:14:51,740 --> 00:14:56,600
the electron framework understand it's

00:14:53,360 --> 00:14:59,270
not web browser and stay in the electron

00:14:56,600 --> 00:15:01,610
security tutorial but it allows you to

00:14:59,270 --> 00:15:04,070
build feature-rich desktop applications

00:15:01,610 --> 00:15:07,490
with familiar web technologies but your

00:15:04,070 --> 00:15:09,890
code wields much greater power we also

00:15:07,490 --> 00:15:12,200
make clear that most popular electronics

00:15:09,890 --> 00:15:14,420
display primarily local content or

00:15:12,200 --> 00:15:17,630
trusted secure remote content without

00:15:14,420 --> 00:15:20,150
node integration and if you must run

00:15:17,630 --> 00:15:22,610
arbitrary content from untrusted sources

00:15:20,150 --> 00:15:26,089
as we definitely need to in a smart

00:15:22,610 --> 00:15:28,580
desktop app they provide a checklist of

00:15:26,089 --> 00:15:31,310
17 recommendations to ensure that you

00:15:28,580 --> 00:15:33,080
remain secure now these include things

00:15:31,310 --> 00:15:35,480
like only loading secure content

00:15:33,080 --> 00:15:37,880
disabling nodejs integration in all the

00:15:35,480 --> 00:15:39,680
renders enabling context isolation in

00:15:37,880 --> 00:15:42,230
all the render it I'm not gonna read the

00:15:39,680 --> 00:15:43,430
whole list because it's long but goes

00:15:42,230 --> 00:15:45,710
right the way down to disabling

00:15:43,430 --> 00:15:47,779
electrons remote module or filtering X

00:15:45,710 --> 00:15:50,630
prompts and it off and using the current

00:15:47,779 --> 00:15:52,640
version of electron now these

00:15:50,630 --> 00:15:55,730
recommendations don't directly address

00:15:52,640 --> 00:15:58,040
every point on our big 8 but if we don't

00:15:55,730 --> 00:16:00,260
adopt them any solutions we do attempt

00:15:58,040 --> 00:16:04,130
will be corrupted by gaping security

00:16:00,260 --> 00:16:06,560
holes so the obvious next step is to

00:16:04,130 --> 00:16:08,000
implement the checklist and by hearing

00:16:06,560 --> 00:16:12,110
to wall of electron security

00:16:08,000 --> 00:16:14,029
recommendations content security because

00:16:12,110 --> 00:16:17,510
our apps are isolated from each other by

00:16:14,029 --> 00:16:18,770
that context isolation it's gonna

00:16:17,510 --> 00:16:22,360
struggle twintop

00:16:18,770 --> 00:16:24,950
operate with each other will also gain

00:16:22,360 --> 00:16:26,810
system security because the electron

00:16:24,950 --> 00:16:28,610
main process and by extension the

00:16:26,810 --> 00:16:31,640
operating system will be insulated from

00:16:28,610 --> 00:16:33,320
our apps but at the cost of those apps

00:16:31,640 --> 00:16:35,150
being cut off from the very desktop

00:16:33,320 --> 00:16:39,020
api's we needed electron to give us

00:16:35,150 --> 00:16:43,850
access to in the first place that's not

00:16:39,020 --> 00:16:46,339
an ideal situation so what do we do now

00:16:43,850 --> 00:16:49,370
if we lock down our entire framework we

00:16:46,339 --> 00:16:51,710
might as well go back to the browser the

00:16:49,370 --> 00:16:54,560
answer is to separate our secure trusted

00:16:51,710 --> 00:16:56,930
code from the arbitrary content from

00:16:54,560 --> 00:16:59,720
untrusted sources and handle them

00:16:56,930 --> 00:17:01,940
differently that's going to allow us to

00:16:59,720 --> 00:17:04,490
build a set of Micra services for the

00:17:01,940 --> 00:17:06,650
desktop what we refer to in fins on most

00:17:04,490 --> 00:17:08,060
desktop services it will help us

00:17:06,650 --> 00:17:10,310
implement that rich desktop

00:17:08,060 --> 00:17:12,079
functionality and these should be able

00:17:10,310 --> 00:17:14,030
to talk to the electron main process to

00:17:12,079 --> 00:17:15,650
do what they need to do but it should

00:17:14,030 --> 00:17:18,500
also be isolated from the untrusted

00:17:15,650 --> 00:17:20,360
content to keep them secure and then

00:17:18,500 --> 00:17:22,420
we'll implement a system for

00:17:20,360 --> 00:17:27,319
inter-process communication to permit

00:17:22,420 --> 00:17:29,780
controlled access to these services to

00:17:27,319 --> 00:17:31,730
do this all efficiently we need to be

00:17:29,780 --> 00:17:34,100
able to simply declare what privileges

00:17:31,730 --> 00:17:37,130
each piece of code and each associated

00:17:34,100 --> 00:17:40,910
render process has access to and we call

00:17:37,130 --> 00:17:42,890
that policy based security JP is

00:17:40,910 --> 00:17:45,080
accessed within the electron layer can

00:17:42,890 --> 00:17:47,779
be enabled or disabled through confit

00:17:45,080 --> 00:17:49,220
Harrap basis or by assigning apps to

00:17:47,779 --> 00:17:53,960
groups that have their own set of

00:17:49,220 --> 00:17:55,909
permissions so security policies this

00:17:53,960 --> 00:17:57,679
practice basically enables the principle

00:17:55,909 --> 00:17:59,570
of least privilege that's a well

00:17:57,679 --> 00:18:02,119
respected security practice of ensuring

00:17:59,570 --> 00:18:04,249
that a given module or individual has

00:18:02,119 --> 00:18:08,450
access to what is needed and nothing

00:18:04,249 --> 00:18:10,340
more and web deployment by a declarative

00:18:08,450 --> 00:18:13,190
or convict driven approach to defining

00:18:10,340 --> 00:18:15,080
your apps just something we attract you

00:18:13,190 --> 00:18:16,639
believe is key to being able to achieve

00:18:15,080 --> 00:18:20,749
the full benefits of web deployment

00:18:16,639 --> 00:18:22,669
wraps Desktop Services and that

00:18:20,749 --> 00:18:25,039
configure implement croch and by

00:18:22,669 --> 00:18:26,840
extension the policy based security are

00:18:25,039 --> 00:18:32,090
pretty much the corner stones on which

00:18:26,840 --> 00:18:35,059
fence or ball is built on to the

00:18:32,090 --> 00:18:36,649
announcement traffic you with firm

00:18:35,059 --> 00:18:38,779
believers in both open source software

00:18:36,649 --> 00:18:40,989
which all products like almost anything

00:18:38,779 --> 00:18:43,519
involved in the web are based on and

00:18:40,989 --> 00:18:45,169
collaboration which is why we offer full

00:18:43,519 --> 00:18:48,649
source access to all our clients using

00:18:45,169 --> 00:18:50,929
feeds humble we also believe that the

00:18:48,649 --> 00:18:52,340
best way to stay secure is to be open

00:18:50,929 --> 00:18:54,649
and transparent about how we approach

00:18:52,340 --> 00:18:56,149
security on the desktop and to

00:18:54,649 --> 00:18:58,039
collaborate with a community that shares

00:18:56,149 --> 00:19:01,129
the same goals and benefits from the

00:18:58,039 --> 00:19:03,200
same work and today we're thrilled to

00:19:01,129 --> 00:19:06,169
announce the secure electron an actor or

00:19:03,200 --> 00:19:07,700
SEO for short which uses the same code

00:19:06,169 --> 00:19:09,289
and approach that we do in the fence on

00:19:07,700 --> 00:19:12,169
ball electron adapter that ships with

00:19:09,289 --> 00:19:14,330
Vince on ball and that we've contributed

00:19:12,169 --> 00:19:18,249
that to finish the FinTech open source

00:19:14,330 --> 00:19:18,249
foundation and of course our hosts today

00:19:18,970 --> 00:19:23,330
adheres to electrons own security

00:19:21,289 --> 00:19:25,399
recommendations by design including

00:19:23,330 --> 00:19:28,639
enabling context isolation removing

00:19:25,399 --> 00:19:30,710
direct access to node disabling and/or

00:19:28,639 --> 00:19:34,639
filtering the remote module etc and

00:19:30,710 --> 00:19:37,070
provides a ready to use systems policy

00:19:34,639 --> 00:19:39,919
based security and electron with

00:19:37,070 --> 00:19:41,779
inter-process comms work with that

00:19:39,919 --> 00:19:43,609
security to ensure that your renderer

00:19:41,779 --> 00:19:50,299
processes can do what they need to do

00:19:43,609 --> 00:19:52,190
and no more hands-on ata as if expect

00:19:50,299 --> 00:19:54,139
from finishes get up and the address is

00:19:52,190 --> 00:19:56,840
shown where you'll find two repositories

00:19:54,139 --> 00:19:58,140
for SE a one containing the main SEO

00:19:56,840 --> 00:19:59,700
module

00:19:58,140 --> 00:20:02,880
and a second containing the SE a

00:19:59,700 --> 00:20:04,860
QuickStart project that that's a minimal

00:20:02,880 --> 00:20:07,860
electron app using se a we'll have a

00:20:04,860 --> 00:20:09,750
look at it in a minute and it's based on

00:20:07,860 --> 00:20:11,880
the electron QuickStart guide for

00:20:09,750 --> 00:20:14,610
inspiration and it demonstrates the

00:20:11,880 --> 00:20:18,000
basics of using a TA including a sample

00:20:14,610 --> 00:20:19,860
manifest file some configured components

00:20:18,000 --> 00:20:24,840
and preloads for customizing your

00:20:19,860 --> 00:20:27,360
windows the most important thing to note

00:20:24,840 --> 00:20:29,700
about SEO is that it is convict driven

00:20:27,360 --> 00:20:31,290
by a manifest file an example which

00:20:29,700 --> 00:20:35,160
you'll find in the se a QuickStart

00:20:31,290 --> 00:20:37,410
project which was shown here the

00:20:35,160 --> 00:20:39,690
manifest is used to configure the main

00:20:37,410 --> 00:20:43,140
window which is loaded from a remote

00:20:39,690 --> 00:20:44,790
application remote location even and as

00:20:43,140 --> 00:20:46,860
we learned earlier it should probably be

00:20:44,790 --> 00:20:49,890
loaded virus secure transport from a

00:20:46,860 --> 00:20:52,500
trusted location only now that can be a

00:20:49,890 --> 00:20:54,150
visible window or non visible once used

00:20:52,500 --> 00:20:55,620
more like a service to manage your

00:20:54,150 --> 00:20:58,170
application that essentially the

00:20:55,620 --> 00:21:00,720
approach we're using fins omble and it

00:20:58,170 --> 00:21:02,970
can have additional content creel Oh

00:21:00,720 --> 00:21:04,710
lead-in to it which is JavaScript

00:21:02,970 --> 00:21:09,060
functions that you're essentially adding

00:21:04,710 --> 00:21:11,250
to the window mixed you can configure

00:21:09,060 --> 00:21:13,650
other windows or components of your

00:21:11,250 --> 00:21:15,630
desktop app these are also loaded from

00:21:13,650 --> 00:21:18,150
remote locations and again can be

00:21:15,630 --> 00:21:19,320
visible windows or hidden ones that'll

00:21:18,150 --> 00:21:21,860
allow you to build application

00:21:19,320 --> 00:21:25,530
components or your own desktop services

00:21:21,860 --> 00:21:27,600
and they can have permissions specified

00:21:25,530 --> 00:21:29,250
on them given them you fine-grained

00:21:27,600 --> 00:21:31,830
control over what each of those

00:21:29,250 --> 00:21:34,590
components is able to do for example

00:21:31,830 --> 00:21:36,900
this untrusted component has been denied

00:21:34,590 --> 00:21:39,480
access to system API for clearing the

00:21:36,900 --> 00:21:41,220
cache or exiting the runtime as well as

00:21:39,480 --> 00:21:42,990
having its access to certain JavaScript

00:21:41,220 --> 00:21:46,530
functions and chromium web preferences

00:21:42,990 --> 00:21:48,120
2-tailed finally you can say overall

00:21:46,530 --> 00:21:50,520
preferences for the electron adapter

00:21:48,120 --> 00:21:52,500
such as a list of trusted preloads which

00:21:50,520 --> 00:21:59,460
can then be applied to the components in

00:21:52,500 --> 00:22:01,110
the main window onto a demo now we're

00:21:59,460 --> 00:22:05,640
going to try and leave this alive so

00:22:01,110 --> 00:22:07,560
fingers crossed here's my BS code where

00:22:05,640 --> 00:22:11,040
I've got the SE a Quick Start project

00:22:07,560 --> 00:22:12,000
loaded up showing the index dot HTML

00:22:11,040 --> 00:22:13,830
file

00:22:12,000 --> 00:22:15,510
we're going to use this for a number of

00:22:13,830 --> 00:22:18,360
different components we mean is the same

00:22:15,510 --> 00:22:21,780
file for brevity and sort of to prove

00:22:18,360 --> 00:22:23,490
the security policies use case on

00:22:21,780 --> 00:22:27,690
manna-fest that you've already seen is

00:22:23,490 --> 00:22:29,670
here along with those components as you

00:22:27,690 --> 00:22:32,160
can see you're using index.html

00:22:29,670 --> 00:22:34,260
add-in a preload and in the case of the

00:22:32,160 --> 00:22:38,340
untrusted child having submissions set

00:22:34,260 --> 00:22:40,710
own just contains some functions we want

00:22:38,340 --> 00:22:43,220
to add into the window it's a great way

00:22:40,710 --> 00:22:47,160
to add api to your services

00:22:43,220 --> 00:22:49,530
and finally this renderer dot JS file

00:22:47,160 --> 00:22:52,230
which is loaded into index joint jeaious

00:22:49,530 --> 00:22:53,850
to do something interesting with SCA for

00:22:52,230 --> 00:22:56,910
example we can get a reference to the

00:22:53,850 --> 00:23:00,090
current window version informational

00:22:56,910 --> 00:23:01,800
monitor information for the system and

00:23:00,090 --> 00:23:06,390
we could also use that current window to

00:23:01,800 --> 00:23:08,880
do things like moving a window around so

00:23:06,390 --> 00:23:10,770
we could get the bounds book for that

00:23:08,880 --> 00:23:13,530
window we can set the bounds to actually

00:23:10,770 --> 00:23:16,740
move it well we could also use the SEO

00:23:13,530 --> 00:23:18,510
main process to get hold of the manifest

00:23:16,740 --> 00:23:21,540
to give us details of other components

00:23:18,510 --> 00:23:25,280
and actually launch of Windows so let's

00:23:21,540 --> 00:23:28,770
try this out I've already installed my

00:23:25,280 --> 00:23:31,260
dependencies of them VM so we'll start

00:23:28,770 --> 00:23:33,900
her up and here we go this is our main

00:23:31,260 --> 00:23:35,310
windows visible in this case you can see

00:23:33,900 --> 00:23:37,290
we can do things within it it's

00:23:35,310 --> 00:23:40,950
rendering some details about his current

00:23:37,290 --> 00:23:45,750
bounds the monitor information etc and I

00:23:40,950 --> 00:23:49,500
can launch trusted application it is

00:23:45,750 --> 00:23:52,380
here same index file it's just I can't

00:23:49,500 --> 00:23:55,520
fit so named and again it can do all the

00:23:52,380 --> 00:24:03,810
usual things including extended runtime

00:23:55,520 --> 00:24:05,430
so let's just stop one more time here he

00:24:03,810 --> 00:24:09,360
is again this time I'm going to launch

00:24:05,430 --> 00:24:12,810
the untrusted child application which is

00:24:09,360 --> 00:24:14,490
here and this one and as I mentioned has

00:24:12,810 --> 00:24:17,270
been denied the permission to exit the

00:24:14,490 --> 00:24:19,350
runtime so if I hit exit nothing happens

00:24:17,270 --> 00:24:21,150
and if I go ahead and launch a

00:24:19,350 --> 00:24:23,000
JavaScript console you can actually see

00:24:21,150 --> 00:24:25,440
we're getting an error message back from

00:24:23,000 --> 00:24:28,440
SCA whenever we hit that button

00:24:25,440 --> 00:24:33,110
and access is denied a system door exit

00:24:28,440 --> 00:24:33,110
so there's our security policy in action

00:24:34,970 --> 00:24:42,240
so even back to our presentation

00:24:39,409 --> 00:24:44,299
what does SEO not do well it doesn't

00:24:42,240 --> 00:24:47,639
include detailed desktop services

00:24:44,299 --> 00:24:49,259
already made UI components or in fact

00:24:47,639 --> 00:24:51,480
full solutions to the whole of the big

00:24:49,259 --> 00:24:54,059
aids rather it's focused on a secure

00:24:51,480 --> 00:24:55,500
foundation on which to build these we're

00:24:54,059 --> 00:24:57,330
also obviously being a non commercial

00:24:55,500 --> 00:25:00,240
product it doesn't have any support

00:24:57,330 --> 00:25:01,679
services included so if you need more

00:25:00,240 --> 00:25:02,940
than that for your project then of

00:25:01,679 --> 00:25:04,950
course we'd encourage you to come and

00:25:02,940 --> 00:25:06,779
talk to us about finn's on wall which is

00:25:04,950 --> 00:25:09,090
a fully featured smart desktop for

00:25:06,779 --> 00:25:11,070
finance and makes use of the same

00:25:09,090 --> 00:25:12,960
techniques and code as the secure

00:25:11,070 --> 00:25:14,370
electronic doctor but it does take

00:25:12,960 --> 00:25:16,350
things a lot further with the full set

00:25:14,370 --> 00:25:19,529
of desktop services for facilities such

00:25:16,350 --> 00:25:21,360
as secure storage messaging for inter

00:25:19,529 --> 00:25:23,220
our workspace management easy

00:25:21,360 --> 00:25:25,220
integration for all systems search

00:25:23,220 --> 00:25:27,600
Federation hotkeys and a whole lot more

00:25:25,220 --> 00:25:30,059
and as mentioned during our discussion

00:25:27,600 --> 00:25:32,279
fin Samba way POS act through services

00:25:30,059 --> 00:25:34,500
that run in separate processes creating

00:25:32,279 --> 00:25:37,289
an air gap between your applications and

00:25:34,500 --> 00:25:39,299
pin samel system code it also ships with

00:25:37,289 --> 00:25:41,610
a fully fledged user interface that you

00:25:39,299 --> 00:25:44,039
can label and customize and it can even

00:25:41,610 --> 00:25:46,049
extend its desktop services and window

00:25:44,039 --> 00:25:47,700
management user experience to the native

00:25:46,049 --> 00:25:50,039
apps that can be seamlessly integrated

00:25:47,700 --> 00:25:54,570
into the same smart desktop alongside

00:25:50,039 --> 00:25:57,330
your HTML proud to base Vince on born

00:25:54,570 --> 00:25:59,279
electron chromium and nodejs and now

00:25:57,330 --> 00:26:02,190
also the techniques in code that form

00:25:59,279 --> 00:26:03,600
the secure electron adapter we're also

00:26:02,190 --> 00:26:06,029
the only container vendor to provide

00:26:03,600 --> 00:26:09,330
100% full source code access to our

00:26:06,029 --> 00:26:11,399
clients and are of course happy to share

00:26:09,330 --> 00:26:16,470
our most recent third-party security

00:26:11,399 --> 00:26:19,470
assessment by Bishop Fox so to summarize

00:26:16,470 --> 00:26:21,740
what we've learned today electron isn't

00:26:19,470 --> 00:26:24,149
designed to be secure out of the box as

00:26:21,740 --> 00:26:28,289
that would complicate things for desktop

00:26:24,149 --> 00:26:30,330
app developers but building a smart

00:26:28,289 --> 00:26:32,250
desktop leveraging web deployment

00:26:30,330 --> 00:26:34,919
basically creates new risks for us to

00:26:32,250 --> 00:26:36,960
manage but the electron project does

00:26:34,919 --> 00:26:38,280
care deeply about the security of the

00:26:36,960 --> 00:26:40,320
applications you build that

00:26:38,280 --> 00:26:42,330
as does any responsible software

00:26:40,320 --> 00:26:44,790
developer or vendor they actually

00:26:42,330 --> 00:26:47,160
provide a detailed 17 point security

00:26:44,790 --> 00:26:50,070
checklist for securing untrusted content

00:26:47,160 --> 00:26:52,020
running in your app however implementing

00:26:50,070 --> 00:26:53,760
that checklist can eliminate many of the

00:26:52,020 --> 00:26:55,800
benefits of using the container in the

00:26:53,760 --> 00:26:59,190
first place

00:26:55,800 --> 00:27:01,770
so we attract you have come up with and

00:26:59,190 --> 00:27:05,720
believed in a policy based security

00:27:01,770 --> 00:27:08,370
approach and Desktop Services and I'm

00:27:05,720 --> 00:27:10,950
provided a sort of practical answer to

00:27:08,370 --> 00:27:12,860
developing within that container and

00:27:10,950 --> 00:27:15,900
then finally the secure electronic

00:27:12,860 --> 00:27:19,950
provides an ideal foundation to build

00:27:15,900 --> 00:27:22,110
all of that on top of so that concludes

00:27:19,950 --> 00:27:24,180
the main presentation today and I'll

00:27:22,110 --> 00:27:25,890
hand back over to James who I think is

00:27:24,180 --> 00:27:27,390
going to pose us any questions that have

00:27:25,890 --> 00:27:30,330
been asked during the session and

00:27:27,390 --> 00:27:32,310
joining me of course is Ian Messner and

00:27:30,330 --> 00:27:33,450
chief architect Charlie who will

00:27:32,310 --> 00:27:36,810
actually help answer some of those

00:27:33,450 --> 00:27:39,060
questions thank you very much Chris

00:27:36,810 --> 00:27:40,830
and thank you very much everybody for

00:27:39,060 --> 00:27:43,410
being here this afternoon and we do

00:27:40,830 --> 00:27:47,550
actually have our first question from

00:27:43,410 --> 00:27:49,740
Isabel which is is electron intended for

00:27:47,550 --> 00:27:52,110
use by application providers square

00:27:49,740 --> 00:27:54,780
bracket to build web application with

00:27:52,110 --> 00:27:56,820
desktop versions play square bracket or

00:27:54,780 --> 00:27:59,190
by application users lots of square

00:27:56,820 --> 00:28:00,960
brackets here for use as a adapter for

00:27:59,190 --> 00:28:09,840
web based applications by an

00:28:00,960 --> 00:28:15,860
organization I think that I would say

00:28:09,840 --> 00:28:18,840
both use cases are pretty common many

00:28:15,860 --> 00:28:22,740
organizations that were maybe web

00:28:18,840 --> 00:28:25,950
technology first are offering a desktop

00:28:22,740 --> 00:28:29,400
version of their application through

00:28:25,950 --> 00:28:33,600
electron that simply loads content from

00:28:29,400 --> 00:28:37,620
their web servers and that allows to add

00:28:33,600 --> 00:28:41,010
some rich functionality such as local

00:28:37,620 --> 00:28:44,460
caching or proxying or window management

00:28:41,010 --> 00:28:46,860
child windows so in that sense it's

00:28:44,460 --> 00:28:49,650
really just a more fully featured

00:28:46,860 --> 00:28:51,450
version of the existing web technology

00:28:49,650 --> 00:28:54,720
and also

00:28:51,450 --> 00:28:59,250
it is used as a bit of an integration

00:28:54,720 --> 00:29:02,960
platform for adding functionality to

00:28:59,250 --> 00:29:06,289
existing websites or combining

00:29:02,960 --> 00:29:10,769
functionalities across websites and

00:29:06,289 --> 00:29:15,799
Vince omble smart desktop we tell our

00:29:10,769 --> 00:29:18,630
clients that this can be used to slowly

00:29:15,799 --> 00:29:21,240
integrate their existing applications

00:29:18,630 --> 00:29:23,190
together into common workflows and

00:29:21,240 --> 00:29:27,960
automate some of the connections between

00:29:23,190 --> 00:29:31,139
them so I think both our our our active

00:29:27,960 --> 00:29:33,450
use cases for the electron framework and

00:29:31,139 --> 00:29:34,830
I just wanted to be sure I understood

00:29:33,450 --> 00:29:37,830
that correctly and appreciate your

00:29:34,830 --> 00:29:41,460
answer another may be small follow-up

00:29:37,830 --> 00:29:44,179
question I know that if a nose has been

00:29:41,460 --> 00:29:46,830
kind of an active component of the FDC 3

00:29:44,179 --> 00:29:51,080
can you maybe develop a little bit on

00:29:46,830 --> 00:29:56,000
how a framework like that fits in with

00:29:51,080 --> 00:29:57,809
electron and I guess how one would I

00:29:56,000 --> 00:29:59,850
completely different things that I'm

00:29:57,809 --> 00:30:01,820
aware of that I guess some I'm trying to

00:29:59,850 --> 00:30:11,039
piece in my head how to fit it together

00:30:01,820 --> 00:30:15,960
sure so electron allows a developer to

00:30:11,039 --> 00:30:21,049
preload functionality that can be called

00:30:15,960 --> 00:30:24,539
by a web application to gain access to

00:30:21,049 --> 00:30:29,880
kind of rich desktop functionality and

00:30:24,539 --> 00:30:34,500
so that can be just arbitrary code for

00:30:29,880 --> 00:30:38,250
the SCA project we included kind of very

00:30:34,500 --> 00:30:42,450
common basic operations of moving

00:30:38,250 --> 00:30:43,340
windows some messaging so on and so

00:30:42,450 --> 00:30:48,029
forth

00:30:43,340 --> 00:30:50,659
FDC 3 tries to establish an open

00:30:48,029 --> 00:30:53,429
standard for common communication

00:30:50,659 --> 00:30:57,600
mechanisms such as the description of an

00:30:53,429 --> 00:31:02,340
application or the launching of an of an

00:30:57,600 --> 00:31:05,070
action through intense so that is trying

00:31:02,340 --> 00:31:08,850
to put a standard

00:31:05,070 --> 00:31:13,620
an open standard around otherwise kind

00:31:08,850 --> 00:31:16,289
of common very specific one-off pieces

00:31:13,620 --> 00:31:21,299
of functionality so fence omble for

00:31:16,289 --> 00:31:24,419
instance contains FDC 3 functionality

00:31:21,299 --> 00:31:27,179
for managing applications from an app D

00:31:24,419 --> 00:31:31,139
server allowing an application to

00:31:27,179 --> 00:31:33,960
register for an intent and that

00:31:31,139 --> 00:31:36,740
application might fit into another

00:31:33,960 --> 00:31:39,450
integration platform that supports FDC 3

00:31:36,740 --> 00:31:45,120
automatically simply because they're

00:31:39,450 --> 00:31:47,490
adhering to an open standard right

00:31:45,120 --> 00:31:49,679
that's amazing and Thank You Isabelle

00:31:47,490 --> 00:31:52,470
for that for that question and thank you

00:31:49,679 --> 00:31:54,330
for answering our minion so whilst we've

00:31:52,470 --> 00:31:58,710
been having the Q&A Chris has been

00:31:54,330 --> 00:32:00,779
working busy in the background with a

00:31:58,710 --> 00:32:02,789
random person generated to pool two

00:32:00,779 --> 00:32:04,440
names out the Hat for a free finished

00:32:02,789 --> 00:32:07,889
Esha and I'm pleased to announce that

00:32:04,440 --> 00:32:09,870
actually Isabelle Gonzalez you did win a

00:32:07,889 --> 00:32:11,700
finished t-shirt and I can guarantee it

00:32:09,870 --> 00:32:14,450
was at random so not only did you ask

00:32:11,700 --> 00:32:18,899
questions but you won a t-shirt as well

00:32:14,450 --> 00:32:21,990
and also R is a Alavi from Wipro you've

00:32:18,899 --> 00:32:26,279
also won a finished t-shirt T thank you

00:32:21,990 --> 00:32:27,509
very much my pleasure thank you

00:32:26,279 --> 00:32:30,809
everybody for being here this afternoon

00:32:27,509 --> 00:32:34,860
it's now 2 minutes past the hour I'd

00:32:30,809 --> 00:32:41,929
like to thank Chris and Ian from Chora

00:32:34,860 --> 00:32:44,250
Keith I think that you're off mute now

00:32:41,929 --> 00:32:46,379
but while some groceries talking in the

00:32:44,250 --> 00:32:49,440
background I'd like to say thank you to

00:32:46,379 --> 00:32:52,350
Chris and Ian for your wonderful

00:32:49,440 --> 00:32:54,210
presentation and demo thank you to the

00:32:52,350 --> 00:32:55,740
colossi key team for you know coming

00:32:54,210 --> 00:32:57,720
forward and presenting to finish and

00:32:55,740 --> 00:33:00,899
thank you for everybody who's joined us

00:32:57,720 --> 00:33:02,309
today it's been wonderful having you and

00:33:00,899 --> 00:33:04,169
please follow us on LinkedIn where

00:33:02,309 --> 00:33:06,149
you'll find out more of our web webinars

00:33:04,169 --> 00:33:10,200
that are happening in the future thank

00:33:06,149 --> 00:33:10,559
you very much thank you James Thank You

00:33:10,200 --> 00:33:14,179
June

00:33:10,559 --> 00:33:14,179
thank you thank you

00:33:16,660 --> 00:33:24,859

YouTube URL: https://www.youtube.com/watch?v=foMHm5qmxsc


