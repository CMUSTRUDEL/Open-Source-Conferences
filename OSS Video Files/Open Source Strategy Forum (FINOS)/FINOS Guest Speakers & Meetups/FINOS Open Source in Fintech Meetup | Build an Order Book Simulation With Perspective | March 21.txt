Title: FINOS Open Source in Fintech Meetup | Build an Order Book Simulation With Perspective | March 21
Publication date: 2021-04-11
Playlist: FINOS Guest Speakers & Meetups
Description: 
	At our most recent FINOS Open Source in Fintech Meetup, Andrew Stein of J.P. Morgan Chase, presented and demoed "How to Build an Order Book Simulation with Perspective".

This video is from a live virtual meetup conducted in New York on 31 March 2021.

TALK ABSTRACT
Learn how to build a real-time Order Book Dashboard from a simple Python market simulation using Perspective. Participants will learn how to use Perspective’s JupyterLab integration to first interactively develop, test and visualize a simple market model in a Jupyter Notebook; then, using that same model, we’ll develop a production-caliber, high-performance streaming server and interactive web client with Perspective and Apache Arrow.

BACKGROUND FOR THE FINOS PERSPECTIVE PROJECT
Perspective is an interactive visualization component for large, real-time datasets. Originally developed for J.P. Morgan's trading business, Perspective makes it simple to build real-time & user configurable analytics entirely in the browser, or in concert with Python and/or Jupyterlab. Use it to create reports, dashboards, notebooks and applications, with static data or streaming updates via Apache Arrow. As a library, Perspective provides both:

A fast, memory efficient streaming query engine, written in C++ and compiled for both WebAssembly and Python, with read/write/stream/virtual support for Apache Arrow.
A framework-agnostic User Interface Custom Element and Jupyterlab Widget, via WebWorker (WebAssembly) or virtually via WebSocket (Python/Node), and a suite of Datagrid and D3FC Chart plugins.

SPEAKER BIO
Andrew Stein, Executive Director, J.P. Morgan Chase

Andrew has been a web developer for 15 years. Despite winning the 2018 Nueske’s Bacon Night Award as a member of team “Lard and In Charge” at “Hogs for the Cause” BBQ festival, Andrew rejected a life of perennial BBQ fame and returned to programming full-time where he currently works on Perspective at JPMC.

►►Visit here for more FINOS Events https://finos.org/hosted-events

►►Visit the FINOS website https://finos.org/ and Get Involved https://finos.org/get-involved)
 
►►Join us for the FINOS & Linux Foundation Open Source Strategy Forum (OSSF)

London https://events.linuxfoundation.org/open-source-strategy-forum-london

New York https://events.linuxfoundation.org/open-source-strategy-forum-new-york/

►►Listen to all of our podcasts on these platforms as well as others: 

Apple Podcasts https://podcasts.apple.com/us/podcast/finos-open-source-in-fintech-podcast/id1512371068

Anchor.fm https://anchor.fm/finos

Spotify https://open.spotify.com/show/431XdfX2fBdCUsopwh8td3

Check it out, subscribe, and don’t forget to rate us (5 stars)!
Captions: 
	00:00:03,650 --> 00:00:11,849
[Music]

00:00:13,679 --> 00:00:15,759
so

00:00:14,160 --> 00:00:17,440
hi good morning good afternoon good

00:00:15,759 --> 00:00:19,600
evening wherever you are and welcome to

00:00:17,440 --> 00:00:21,600
the finos open source and fintech meetup

00:00:19,600 --> 00:00:23,279
i'm your host chris griswold marketing

00:00:21,600 --> 00:00:25,039
manager for finos

00:00:23,279 --> 00:00:26,960
this is part of a series of meetups and

00:00:25,039 --> 00:00:29,039
podcasts that we produce and co-produce

00:00:26,960 --> 00:00:32,559
with partners in the united states

00:00:29,039 --> 00:00:35,200
as well as the uk and apac regions

00:00:32,559 --> 00:00:36,239
these meetups and podcasts focus on

00:00:35,200 --> 00:00:37,840
famous projects

00:00:36,239 --> 00:00:40,000
open source readiness and thought

00:00:37,840 --> 00:00:42,559
leadership in open source

00:00:40,000 --> 00:00:44,000
and financial services in fintech and

00:00:42,559 --> 00:00:46,399
today we're pleased to have andrew

00:00:44,000 --> 00:00:47,120
stein executive director at jpmorgan

00:00:46,399 --> 00:00:48,879
chase

00:00:47,120 --> 00:00:50,559
and lead of the finnos perspective

00:00:48,879 --> 00:00:52,640
project and here's a little bit about

00:00:50,559 --> 00:00:54,719
andrew

00:00:52,640 --> 00:00:58,160
andrew has been a web developer for 15

00:00:54,719 --> 00:00:59,440
years despite winning the 2018 i'm just

00:00:58,160 --> 00:01:03,760
going to mess it up the

00:00:59,440 --> 00:01:06,159
newest case sure nuesque

00:01:03,760 --> 00:01:07,920
bacon night award as a member of the

00:01:06,159 --> 00:01:10,799
team lard and in charge

00:01:07,920 --> 00:01:12,960
at hogs for a cause barbecue festival

00:01:10,799 --> 00:01:14,560
andrew rejected a life of perennial

00:01:12,960 --> 00:01:15,280
barbecue fame and returned to

00:01:14,560 --> 00:01:17,520
programming

00:01:15,280 --> 00:01:20,000
full-time where he currently works at on

00:01:17,520 --> 00:01:22,400
perspective at jp morgan chase

00:01:20,000 --> 00:01:24,080
now let andrew disguise describe the

00:01:22,400 --> 00:01:26,240
perspective project but today

00:01:24,080 --> 00:01:28,080
andrew is going to be speaking on how to

00:01:26,240 --> 00:01:29,280
build an order book simulation with

00:01:28,080 --> 00:01:32,320
perspective

00:01:29,280 --> 00:01:35,439
and he'll be demoing that for you

00:01:32,320 --> 00:01:38,079
as far as q a and questions

00:01:35,439 --> 00:01:39,119
please send those through the q a or

00:01:38,079 --> 00:01:41,200
raise your hand

00:01:39,119 --> 00:01:42,560
we'll be asking andrew those questions

00:01:41,200 --> 00:01:45,759
at the end

00:01:42,560 --> 00:01:47,920
we'll also be giving away t-shirts uh

00:01:45,759 --> 00:01:49,200
at the end too so please make sure that

00:01:47,920 --> 00:01:53,439
you stay

00:01:49,200 --> 00:01:56,479
and i believe this

00:01:53,439 --> 00:01:58,880
uh this meetup is being recorded um but

00:01:56,479 --> 00:02:00,320
uh all that should be on here is uh

00:01:58,880 --> 00:02:02,960
andrew and then um

00:02:00,320 --> 00:02:03,680
we will make sure that nobody else

00:02:02,960 --> 00:02:06,719
really shows

00:02:03,680 --> 00:02:08,319
up on the recording um

00:02:06,719 --> 00:02:10,959
and if you have any other questions for

00:02:08,319 --> 00:02:13,120
us again ask in the q a

00:02:10,959 --> 00:02:15,680
and with that andrew the virtual floor

00:02:13,120 --> 00:02:15,680
is yours

00:02:16,560 --> 00:02:20,000
my screen share here hey everybody can

00:02:19,040 --> 00:02:21,599
everybody see that

00:02:20,000 --> 00:02:23,280
oh i'm not going to hear an answer i'll

00:02:21,599 --> 00:02:26,400
assume everybody can see that

00:02:23,280 --> 00:02:28,239
uh my name is andrew uh thank you my

00:02:26,400 --> 00:02:29,360
name is andrew i'm a developer at jp

00:02:28,239 --> 00:02:30,800
morgan and i work on

00:02:29,360 --> 00:02:32,800
uh perspective if you're not familiar

00:02:30,800 --> 00:02:33,840
with perspective you can see it on your

00:02:32,800 --> 00:02:36,640
screen right now

00:02:33,840 --> 00:02:37,519
perspective is a project that we've been

00:02:36,640 --> 00:02:39,760
working on

00:02:37,519 --> 00:02:41,760
for quite a while actually uh predating

00:02:39,760 --> 00:02:43,840
uh open source actually

00:02:41,760 --> 00:02:45,519
so i don't um we give a lot of tech

00:02:43,840 --> 00:02:46,239
talks on perspective and we talk about a

00:02:45,519 --> 00:02:48,560
lot in

00:02:46,239 --> 00:02:50,000
you know technology context and other

00:02:48,560 --> 00:02:51,519
technologies but we don't always get a

00:02:50,000 --> 00:02:52,879
chance to talk to it to a uh to the

00:02:51,519 --> 00:02:55,040
finos audience

00:02:52,879 --> 00:02:56,239
so i wanted to take a couple minutes

00:02:55,040 --> 00:02:57,440
right up top to

00:02:56,239 --> 00:02:58,560
give you a little bit more of an

00:02:57,440 --> 00:02:59,760
introduction about where perspective

00:02:58,560 --> 00:03:01,599
came from

00:02:59,760 --> 00:03:03,760
and why it's relevant to open source

00:03:01,599 --> 00:03:07,599
perspective was originally a

00:03:03,760 --> 00:03:10,480
c plus plus data engine that we used

00:03:07,599 --> 00:03:11,360
internally at jpmorgan to power many of

00:03:10,480 --> 00:03:14,640
our

00:03:11,360 --> 00:03:18,080
real-time risk and trading systems

00:03:14,640 --> 00:03:21,040
for desktop applications at jpmorgan

00:03:18,080 --> 00:03:22,720
and a couple years ago we had the

00:03:21,040 --> 00:03:25,519
opportunity to

00:03:22,720 --> 00:03:26,159
take this engine that had only been

00:03:25,519 --> 00:03:29,440
designed

00:03:26,159 --> 00:03:32,239
with desktop systems in mind and

00:03:29,440 --> 00:03:33,120
repurpose it for a new generation and a

00:03:32,239 --> 00:03:36,319
new type

00:03:33,120 --> 00:03:37,280
of uh application specifically uh web

00:03:36,319 --> 00:03:39,200
applications

00:03:37,280 --> 00:03:40,480
uh we ported it to webassembly and we

00:03:39,200 --> 00:03:42,720
made a new front end for it

00:03:40,480 --> 00:03:43,920
and we uh open sourced it and with

00:03:42,720 --> 00:03:45,519
partnership through finos

00:03:43,920 --> 00:03:47,200
have been developing it as an open

00:03:45,519 --> 00:03:49,200
source project ever since

00:03:47,200 --> 00:03:50,560
um i want to specifically just talk a

00:03:49,200 --> 00:03:52,879
little bit about

00:03:50,560 --> 00:03:54,319
the impact of open source and why this

00:03:52,879 --> 00:03:55,040
was you know relevant specifically to

00:03:54,319 --> 00:03:56,640
perspective

00:03:55,040 --> 00:03:58,400
um you know i know a lot of the people

00:03:56,640 --> 00:04:00,159
on this call are either working in the

00:03:58,400 --> 00:04:01,760
finance industry or working you know

00:04:00,159 --> 00:04:03,680
periphery to finance industry or in the

00:04:01,760 --> 00:04:06,000
financial technology industry

00:04:03,680 --> 00:04:07,680
and you know i don't think i'm spending

00:04:06,000 --> 00:04:10,159
any tails if i were to say

00:04:07,680 --> 00:04:11,280
that open source is still kind of a

00:04:10,159 --> 00:04:14,799
little bit of a taboo

00:04:11,280 --> 00:04:17,199
in the financial world um

00:04:14,799 --> 00:04:19,359
you know uh financial technology and

00:04:17,199 --> 00:04:22,720
finance technologists have been involved

00:04:19,359 --> 00:04:26,240
in uh software and technology

00:04:22,720 --> 00:04:29,360
since before google was you know a gleam

00:04:26,240 --> 00:04:30,800
in sergey brin's eye right and i think

00:04:29,360 --> 00:04:32,080
because of that kind of long history

00:04:30,800 --> 00:04:34,960
with technology

00:04:32,080 --> 00:04:35,759
um the familiarity with kind of like

00:04:34,960 --> 00:04:39,520
taking all of your

00:04:35,759 --> 00:04:43,199
proprietary code and your uh your

00:04:39,520 --> 00:04:45,120
market uh advantage

00:04:43,199 --> 00:04:46,960
and giving it away um is something that

00:04:45,120 --> 00:04:50,320
i think people have always been kind of

00:04:46,960 --> 00:04:52,320
apprehensive of um our experience with

00:04:50,320 --> 00:04:54,080
perspective and open sourcing specific

00:04:52,320 --> 00:04:56,960
was absolutely not what i was expecting

00:04:54,080 --> 00:04:59,520
it was the exact opposite of that

00:04:56,960 --> 00:05:00,880
the ability for us or the the exposure

00:04:59,520 --> 00:05:02,639
that we got in the ability for us to

00:05:00,880 --> 00:05:06,160
actually kind of like focus on

00:05:02,639 --> 00:05:09,039
compatibility um stability uh

00:05:06,160 --> 00:05:10,240
uh you know uh being able to be flexible

00:05:09,039 --> 00:05:11,680
and being able to use

00:05:10,240 --> 00:05:13,360
the technology and use cases that we

00:05:11,680 --> 00:05:14,320
hadn't thought of these are the kind of

00:05:13,360 --> 00:05:16,240
opportunities that

00:05:14,320 --> 00:05:18,560
would not have come up as a proprietary

00:05:16,240 --> 00:05:20,400
technology and they really took

00:05:18,560 --> 00:05:23,039
this engine the c-plus plus engine we've

00:05:20,400 --> 00:05:26,160
been using internally for years

00:05:23,039 --> 00:05:28,800
that would have otherwise died with

00:05:26,160 --> 00:05:30,479
all of the desktop uis that we no longer

00:05:28,800 --> 00:05:32,560
use and that have been replaced with web

00:05:30,479 --> 00:05:36,160
uis over the last decade

00:05:32,560 --> 00:05:37,120
um and we got an entirely new generation

00:05:36,160 --> 00:05:40,880
of value at

00:05:37,120 --> 00:05:43,120
um i i could it's probably true that

00:05:40,880 --> 00:05:44,880
we actually use perspective dramatically

00:05:43,120 --> 00:05:46,400
more in its current implementation than

00:05:44,880 --> 00:05:48,479
we ever used it in its previous

00:05:46,400 --> 00:05:51,039
implementation so

00:05:48,479 --> 00:05:51,600
if you are a technology manager or you

00:05:51,039 --> 00:05:53,120
are

00:05:51,600 --> 00:05:55,280
looking at open sourcing your own

00:05:53,120 --> 00:05:56,400
technology or or embracing open source

00:05:55,280 --> 00:05:58,720
development model

00:05:56,400 --> 00:06:02,080
for your own internal projects if you

00:05:58,720 --> 00:06:03,600
take one thing away from perspective

00:06:02,080 --> 00:06:05,440
what i want you to take away is do not

00:06:03,600 --> 00:06:08,080
be scared of open source

00:06:05,440 --> 00:06:10,000
it is really a for core technology for

00:06:08,080 --> 00:06:11,680
honest technology and for powerful uh

00:06:10,000 --> 00:06:14,400
technology in this industry um

00:06:11,680 --> 00:06:16,400
it's a really amazing tool to build

00:06:14,400 --> 00:06:17,919
things that are competitive

00:06:16,400 --> 00:06:20,319
uh so what we're gonna be talking about

00:06:17,919 --> 00:06:23,840
today is uh

00:06:20,319 --> 00:06:26,720
an order book um sorry

00:06:23,840 --> 00:06:28,800
an order book simulation uh the

00:06:26,720 --> 00:06:32,000
distinction is very important

00:06:28,800 --> 00:06:35,280
um perspective is effectively

00:06:32,000 --> 00:06:36,720
a database engine kind of like a sql

00:06:35,280 --> 00:06:39,840
database

00:06:36,720 --> 00:06:41,440
um but unlike a sql database um

00:06:39,840 --> 00:06:45,520
perspective is designed

00:06:41,440 --> 00:06:47,120
to be used in the in the front end

00:06:45,520 --> 00:06:49,199
it's designed to bring kind of the

00:06:47,120 --> 00:06:50,720
analytics and queryability

00:06:49,199 --> 00:06:52,240
of the data and performance of a

00:06:50,720 --> 00:06:54,479
database

00:06:52,240 --> 00:06:56,560
all the way down right up in front of

00:06:54,479 --> 00:06:59,199
the user just behind the pixels

00:06:56,560 --> 00:07:00,800
so the user the business user right the

00:06:59,199 --> 00:07:02,080
non-technical user somebody who doesn't

00:07:00,800 --> 00:07:04,720
really necessarily understand

00:07:02,080 --> 00:07:05,919
what a left outer join or an order by

00:07:04,720 --> 00:07:08,000
clause is

00:07:05,919 --> 00:07:09,039
can still use those same kinds of data

00:07:08,000 --> 00:07:10,800
transforms

00:07:09,039 --> 00:07:12,720
to learn things about their data read

00:07:10,800 --> 00:07:15,919
stuff about their data

00:07:12,720 --> 00:07:16,880
and play with their data because of

00:07:15,919 --> 00:07:19,280
webassembly

00:07:16,880 --> 00:07:20,160
because of the uh power and speed

00:07:19,280 --> 00:07:21,759
stability

00:07:20,160 --> 00:07:23,680
um of the underlying engine that we have

00:07:21,759 --> 00:07:25,919
developed over years internally

00:07:23,680 --> 00:07:26,720
um it's very very fast very very high

00:07:25,919 --> 00:07:28,800
performance

00:07:26,720 --> 00:07:30,160
it scales extremely well horizontally

00:07:28,800 --> 00:07:33,120
with additional users

00:07:30,160 --> 00:07:33,840
as they connect to one shared web server

00:07:33,120 --> 00:07:35,759
but

00:07:33,840 --> 00:07:37,280
it is not designed to replace a

00:07:35,759 --> 00:07:39,440
traditional database

00:07:37,280 --> 00:07:41,280
specifically while this talk is about

00:07:39,440 --> 00:07:44,479
building an order book simulation

00:07:41,280 --> 00:07:46,560
exclusively using perspective do not

00:07:44,479 --> 00:07:49,919
build an order book using only

00:07:46,560 --> 00:07:51,919
perspective in your own applications

00:07:49,919 --> 00:07:53,440
to be clear the code that i'm going to

00:07:51,919 --> 00:07:55,759
show you today is

00:07:53,440 --> 00:07:56,960
very very similar maybe in some cases

00:07:55,759 --> 00:07:59,840
nearly identical

00:07:56,960 --> 00:08:01,440
to the real code that we deploy using

00:07:59,840 --> 00:08:04,080
perspective

00:08:01,440 --> 00:08:05,440
but it is for visualization servers

00:08:04,080 --> 00:08:06,240
right it is for users to be able to

00:08:05,440 --> 00:08:08,720
connect and

00:08:06,240 --> 00:08:10,400
look at things um just like for example

00:08:08,720 --> 00:08:12,879
perspective is nowhere close to

00:08:10,400 --> 00:08:14,720
acid compliant um you should not do

00:08:12,879 --> 00:08:17,919
things like execute trades

00:08:14,720 --> 00:08:19,520
or you know uh try to keep transaction

00:08:17,919 --> 00:08:20,639
logs or things like that directly in

00:08:19,520 --> 00:08:22,560
perspective

00:08:20,639 --> 00:08:24,800
not because it won't perform but because

00:08:22,560 --> 00:08:26,240
it was not built for that and if you you

00:08:24,800 --> 00:08:28,400
know your building loses power

00:08:26,240 --> 00:08:29,759
or something like that um it's not gonna

00:08:28,400 --> 00:08:31,840
be a fun time

00:08:29,759 --> 00:08:33,120
uh the way that you know well this

00:08:31,840 --> 00:08:34,959
example is gonna use perspective for

00:08:33,120 --> 00:08:36,240
everything to show you that it is easy

00:08:34,959 --> 00:08:38,719
to do and to show that

00:08:36,240 --> 00:08:40,479
the api is designed to be really simple

00:08:38,719 --> 00:08:42,320
and symmetric

00:08:40,479 --> 00:08:44,320
in a real application you're going to

00:08:42,320 --> 00:08:46,320
want to actually do your data processing

00:08:44,320 --> 00:08:47,519
in a database that has durability that

00:08:46,320 --> 00:08:49,120
can write to disk that is going to be

00:08:47,519 --> 00:08:51,760
recoverable

00:08:49,120 --> 00:08:53,200
and then use perspective to then fan

00:08:51,760 --> 00:08:55,360
that data out

00:08:53,200 --> 00:08:56,720
and stream it to as many browser clients

00:08:55,360 --> 00:08:58,480
as you want and then let your

00:08:56,720 --> 00:08:59,440
uh your users then take that data and do

00:08:58,480 --> 00:09:01,440
whatever they want with it in the

00:08:59,440 --> 00:09:06,160
browser

00:09:01,440 --> 00:09:08,160
uh so let's get started here

00:09:06,160 --> 00:09:09,200
okay so what is perspective it's already

00:09:08,160 --> 00:09:12,720
said that it is a

00:09:09,200 --> 00:09:14,399
database um and here's a little

00:09:12,720 --> 00:09:16,080
i need to zoom out slightly i hope

00:09:14,399 --> 00:09:20,080
everybody can still see this

00:09:16,080 --> 00:09:22,640
um perspective is database and if you

00:09:20,080 --> 00:09:23,519
recall what a a general database is it

00:09:22,640 --> 00:09:27,120
is a

00:09:23,519 --> 00:09:28,240
columnar table a set of rows and columns

00:09:27,120 --> 00:09:30,959
that have the same

00:09:28,240 --> 00:09:32,240
where every column is the same type um

00:09:30,959 --> 00:09:35,519
and a query

00:09:32,240 --> 00:09:36,240
you give a table a small declarative

00:09:35,519 --> 00:09:38,720
program

00:09:36,240 --> 00:09:40,640
and a language like sql and it gives you

00:09:38,720 --> 00:09:43,040
back a result set

00:09:40,640 --> 00:09:44,320
um and perspective is similar um we have

00:09:43,040 --> 00:09:48,160
tables

00:09:44,320 --> 00:09:50,800
um and we have an object called a view

00:09:48,160 --> 00:09:52,720
unlike a traditional database um

00:09:50,800 --> 00:09:55,760
perspective does not have its own

00:09:52,720 --> 00:09:57,120
language like sql um instead perspective

00:09:55,760 --> 00:09:59,440
is embedded

00:09:57,120 --> 00:10:00,560
in another language in this case what

00:09:59,440 --> 00:10:02,399
i'm showing you now is perspective

00:10:00,560 --> 00:10:04,079
embedded in python

00:10:02,399 --> 00:10:06,079
but perspective is also embedded in

00:10:04,079 --> 00:10:08,079
javascript via webassembly

00:10:06,079 --> 00:10:09,680
and they actually have uh the exact same

00:10:08,079 --> 00:10:10,880
api so it's really easy to take kind of

00:10:09,680 --> 00:10:12,320
any of the api

00:10:10,880 --> 00:10:13,519
calls and demonstrations i'm going to

00:10:12,320 --> 00:10:14,800
show you today and transfer them between

00:10:13,519 --> 00:10:17,839
languages

00:10:14,800 --> 00:10:18,399
um instead of query um we have an object

00:10:17,839 --> 00:10:21,760
called view

00:10:18,399 --> 00:10:25,120
and view is a lot like a query um

00:10:21,760 --> 00:10:26,959
but it's live so when you

00:10:25,120 --> 00:10:28,880
use the dsl that you've embedded

00:10:26,959 --> 00:10:31,200
perspective in to ask

00:10:28,880 --> 00:10:32,640
a table about the data what you get back

00:10:31,200 --> 00:10:35,200
is an object

00:10:32,640 --> 00:10:36,160
that has the answer in it but that

00:10:35,200 --> 00:10:38,240
answer will also

00:10:36,160 --> 00:10:39,279
update as the underlying table is

00:10:38,240 --> 00:10:41,440
updated

00:10:39,279 --> 00:10:43,279
and this diagram uh that i'm showing you

00:10:41,440 --> 00:10:45,600
right now is kind of a

00:10:43,279 --> 00:10:47,440
uh it's a made up architecture just kind

00:10:45,600 --> 00:10:50,720
of showing you

00:10:47,440 --> 00:10:52,880
a bird's-eye picture of how perspective

00:10:50,720 --> 00:10:54,399
fits in in a python in a javascript

00:10:52,880 --> 00:10:55,120
application so over here you can see

00:10:54,399 --> 00:10:58,480
that

00:10:55,120 --> 00:10:59,920
this is a browser and this is an html

00:10:58,480 --> 00:11:01,839
page and there's a couple of little

00:10:59,920 --> 00:11:02,800
perspective widgets on it

00:11:01,839 --> 00:11:04,160
and you can see these little dotted

00:11:02,800 --> 00:11:07,120
lines that kind of point back to where

00:11:04,160 --> 00:11:10,079
those the data is coming from

00:11:07,120 --> 00:11:12,480
in this top section you can see a couple

00:11:10,079 --> 00:11:15,200
little perspective

00:11:12,480 --> 00:11:16,800
widgets connected to various views

00:11:15,200 --> 00:11:20,240
running in a web worker

00:11:16,800 --> 00:11:22,160
um and this is uh the implementation

00:11:20,240 --> 00:11:24,640
pattern that you can see for example

00:11:22,160 --> 00:11:25,920
on the prospective website so if you

00:11:24,640 --> 00:11:26,959
click on any of these examples on the

00:11:25,920 --> 00:11:30,720
prospective website

00:11:26,959 --> 00:11:33,839
and go this application for example

00:11:30,720 --> 00:11:35,440
is running a data set in a web worker

00:11:33,839 --> 00:11:36,880
and it's just generating fake data and

00:11:35,440 --> 00:11:37,839
the entire thing is running in your

00:11:36,880 --> 00:11:40,399
browser

00:11:37,839 --> 00:11:41,600
now how we got data into it in this case

00:11:40,399 --> 00:11:44,320
was just making it up

00:11:41,600 --> 00:11:45,920
but um what's kind of implied in this

00:11:44,320 --> 00:11:47,519
diagram is that

00:11:45,920 --> 00:11:49,519
you as a developer have written some

00:11:47,519 --> 00:11:51,120
code to load data into the browser it's

00:11:49,519 --> 00:11:52,320
already in the browser when you start

00:11:51,120 --> 00:11:56,399
and you're kind of using

00:11:52,320 --> 00:11:58,079
this pattern to run it um

00:11:56,399 --> 00:11:59,440
in this very bottom row you see

00:11:58,079 --> 00:12:00,800
something completely different this line

00:11:59,440 --> 00:12:02,399
goes directly through the browser

00:12:00,800 --> 00:12:04,720
out of the browser and all the way down

00:12:02,399 --> 00:12:07,839
into python um

00:12:04,720 --> 00:12:10,959
and if you've ever done any uh

00:12:07,839 --> 00:12:12,320
you know ui work in markets or or

00:12:10,959 --> 00:12:14,800
finance or anything you've probably seen

00:12:12,320 --> 00:12:17,680
a pattern like this before a virtual

00:12:14,800 --> 00:12:18,720
pattern where you have a very large data

00:12:17,680 --> 00:12:21,760
set

00:12:18,720 --> 00:12:24,639
you want to visualize it in a browser

00:12:21,760 --> 00:12:26,160
and you don't want to serialize the

00:12:24,639 --> 00:12:27,519
entirety of the state

00:12:26,160 --> 00:12:29,920
you don't want to ship all the data to

00:12:27,519 --> 00:12:31,839
the browser um you basically just want

00:12:29,920 --> 00:12:34,560
to have whatever window on the screen

00:12:31,839 --> 00:12:36,399
is visible be fetched and have it do

00:12:34,560 --> 00:12:38,000
more fetching as the user wants to see

00:12:36,399 --> 00:12:40,560
more so maybe pagination or

00:12:38,000 --> 00:12:42,000
virtual scroll or you know queryability

00:12:40,560 --> 00:12:43,279
or you know an aggregate dataset or

00:12:42,000 --> 00:12:46,000
something like that

00:12:43,279 --> 00:12:47,519
um and that's what this uh bottom

00:12:46,000 --> 00:12:48,880
diagram shows i'm going to show you

00:12:47,519 --> 00:12:50,639
how to set that up why that's relevant

00:12:48,880 --> 00:12:51,920
in a bit but i just want to kind of give

00:12:50,639 --> 00:12:53,040
you an idea of what these things look

00:12:51,920 --> 00:12:54,160
like

00:12:53,040 --> 00:12:56,160
the key takeaway from this should be

00:12:54,160 --> 00:12:58,880
that these apis are almost identical

00:12:56,160 --> 00:12:59,760
and moving from this model to this model

00:12:58,880 --> 00:13:01,360
is like

00:12:59,760 --> 00:13:03,120
basically a matter of configuration

00:13:01,360 --> 00:13:04,959
rather than a matter of code

00:13:03,120 --> 00:13:06,240
you can kind of choose do i want to run

00:13:04,959 --> 00:13:08,160
the entire model on the server

00:13:06,240 --> 00:13:09,519
don't pull any data off the server and

00:13:08,160 --> 00:13:10,560
have a completely lightweight client or

00:13:09,519 --> 00:13:12,480
do i want to

00:13:10,560 --> 00:13:14,320
literally download the entire database

00:13:12,480 --> 00:13:16,959
runtime and the data

00:13:14,320 --> 00:13:18,079
into the browser and run it all in one

00:13:16,959 --> 00:13:19,600
place

00:13:18,079 --> 00:13:21,360
and then in this middle section um you

00:13:19,600 --> 00:13:23,440
actually see a hybrid model um

00:13:21,360 --> 00:13:25,279
the interesting part is right here what

00:13:23,440 --> 00:13:26,000
we're what you can literally do with

00:13:25,279 --> 00:13:28,720
perspective

00:13:26,000 --> 00:13:30,560
is you can use both you can run the

00:13:28,720 --> 00:13:34,560
database

00:13:30,560 --> 00:13:37,600
in python load your data um populate it

00:13:34,560 --> 00:13:41,120
pivot it to queries on it

00:13:37,600 --> 00:13:43,839
and then when a browser connects it has

00:13:41,120 --> 00:13:45,360
that exact same database code that the

00:13:43,839 --> 00:13:46,560
exact same instance perspective with the

00:13:45,360 --> 00:13:48,399
same c plus plus code

00:13:46,560 --> 00:13:49,760
that's running in python it downloads it

00:13:48,399 --> 00:13:52,000
to the browser

00:13:49,760 --> 00:13:53,839
and it stinks the entire table so any

00:13:52,000 --> 00:13:56,160
changes that are made on the server

00:13:53,839 --> 00:13:57,279
go through this little dot yellow line

00:13:56,160 --> 00:14:00,560
show up in the client

00:13:57,279 --> 00:14:01,519
and you get this really cool simple

00:14:00,560 --> 00:14:04,240
architecture

00:14:01,519 --> 00:14:05,440
where you can use the perspective api on

00:14:04,240 --> 00:14:07,600
the server to put

00:14:05,440 --> 00:14:09,279
data into the engine and then in your

00:14:07,600 --> 00:14:10,720
browser application use the exact same

00:14:09,279 --> 00:14:12,639
api to pull data out of it and

00:14:10,720 --> 00:14:14,079
everything in between is handled for you

00:14:12,639 --> 00:14:16,079
you get really really good performance

00:14:14,079 --> 00:14:17,839
for downloading everything is serialized

00:14:16,079 --> 00:14:21,279
via apache arrow

00:14:17,839 --> 00:14:22,800
which is a actually i can show you

00:14:21,279 --> 00:14:24,240
because this is a nice little diagram

00:14:22,800 --> 00:14:25,519
that the apache arrow folks have on

00:14:24,240 --> 00:14:26,800
their website it is an in-memory

00:14:25,519 --> 00:14:29,360
calendar data

00:14:26,800 --> 00:14:30,399
format that is extremely fast to

00:14:29,360 --> 00:14:33,040
deserialize

00:14:30,399 --> 00:14:34,800
um perspective does delta updates on uh

00:14:33,040 --> 00:14:35,760
using apache arrow to send them across a

00:14:34,800 --> 00:14:37,680
wire and it is

00:14:35,760 --> 00:14:39,760
an extremely fast way to load large

00:14:37,680 --> 00:14:41,680
amounts of data into the browser

00:14:39,760 --> 00:14:43,600
um and keep it up to date as the

00:14:41,680 --> 00:14:48,720
underlying data changes

00:14:43,600 --> 00:14:48,720
um so let's get to the uh

00:14:50,320 --> 00:14:58,959
the actual code part so um

00:14:54,720 --> 00:15:01,120
on the perspective website this guy

00:14:58,959 --> 00:15:02,079
um this is actually one of the examples

00:15:01,120 --> 00:15:04,399
that we're going to have up

00:15:02,079 --> 00:15:05,680
at some point um it's not quite ready

00:15:04,399 --> 00:15:09,839
yet

00:15:05,680 --> 00:15:11,360
but it will be and when it is ready

00:15:09,839 --> 00:15:13,600
so this is the pr that it's going to

00:15:11,360 --> 00:15:14,639
actually be merged in after talk if

00:15:13,600 --> 00:15:15,839
you're interested in following up or

00:15:14,639 --> 00:15:17,040
everything if i haven't gone through any

00:15:15,839 --> 00:15:19,600
of these things in enough

00:15:17,040 --> 00:15:20,560
detail for you you're welcome to log in

00:15:19,600 --> 00:15:22,800
to github

00:15:20,560 --> 00:15:24,639
and take a look at the pr hopefully in

00:15:22,800 --> 00:15:25,120
the next couple of days we'll have this

00:15:24,639 --> 00:15:27,040
stuff

00:15:25,120 --> 00:15:29,920
merged and then you will be able to find

00:15:27,040 --> 00:15:31,440
it in the

00:15:29,920 --> 00:15:33,920
examples directory along with all of

00:15:31,440 --> 00:15:35,759
these other interesting examples

00:15:33,920 --> 00:15:37,680
and there's some good instructions on

00:15:35,759 --> 00:15:38,800
the documentation page which you can

00:15:37,680 --> 00:15:41,839
find also

00:15:38,800 --> 00:15:41,839
down here

00:15:41,920 --> 00:15:45,680
on how to run the examples

00:15:46,000 --> 00:15:53,440
anyway so back to the code um

00:15:49,839 --> 00:15:54,880
so this is the project and i apologize

00:15:53,440 --> 00:15:57,040
uh if this is

00:15:54,880 --> 00:15:59,120
a little uh scatter shot in its

00:15:57,040 --> 00:15:59,680
presentation um i want to make sure that

00:15:59,120 --> 00:16:01,440
you know

00:15:59,680 --> 00:16:02,720
this isn't just a bunch of slides kind

00:16:01,440 --> 00:16:04,320
of obscuring uh

00:16:02,720 --> 00:16:06,320
the actual you know what's actually

00:16:04,320 --> 00:16:08,560
going on this is the real code that

00:16:06,320 --> 00:16:10,639
um is going to be running there's no

00:16:08,560 --> 00:16:12,639
smoke and mirrors or anything like that

00:16:10,639 --> 00:16:14,000
but i'm not going to go over completely

00:16:12,639 --> 00:16:14,880
everything that it does i just want to

00:16:14,000 --> 00:16:16,000
kind of go over the high level

00:16:14,880 --> 00:16:19,440
architecture points

00:16:16,000 --> 00:16:22,480
um the it

00:16:19,440 --> 00:16:24,639
involves two files basically one

00:16:22,480 --> 00:16:26,079
python file that's your server um and

00:16:24,639 --> 00:16:28,560
one javascript file which is

00:16:26,079 --> 00:16:29,759
the front end so let's start at server

00:16:28,560 --> 00:16:31,920
and take a look at kind of what this

00:16:29,759 --> 00:16:35,040
architecture looks from the python side

00:16:31,920 --> 00:16:38,880
bunch of imports and

00:16:35,040 --> 00:16:39,920
market class um if you recall my caveat

00:16:38,880 --> 00:16:42,320
earlier about uh

00:16:39,920 --> 00:16:43,199
not taking my market simulation uh

00:16:42,320 --> 00:16:44,800
seriously

00:16:43,199 --> 00:16:46,560
just want to reiterate um i'm a

00:16:44,800 --> 00:16:49,600
programmer not a quant

00:16:46,560 --> 00:16:53,040
so this is a very naive market um

00:16:49,600 --> 00:16:55,680
specifically it is a video game

00:16:53,040 --> 00:16:56,639
um we kind of built this as an idea of

00:16:55,680 --> 00:17:00,480
like

00:16:56,639 --> 00:17:01,839
uh we wanted to build something that was

00:17:00,480 --> 00:17:03,519
safe and that somebody could see the

00:17:01,839 --> 00:17:04,880
entire workflow without having it kind

00:17:03,519 --> 00:17:07,679
of obscured behind a

00:17:04,880 --> 00:17:09,439
uh you know uh somebody else's api or

00:17:07,679 --> 00:17:11,679
data fetching api or something like that

00:17:09,439 --> 00:17:12,480
um specifically if you're interested in

00:17:11,679 --> 00:17:16,240
a more

00:17:12,480 --> 00:17:17,679
like uh a real

00:17:16,240 --> 00:17:20,319
illustration of what perspective can do

00:17:17,679 --> 00:17:22,400
vis-a-vis data with real market data

00:17:20,319 --> 00:17:24,000
um joon tam who also works on

00:17:22,400 --> 00:17:26,400
perspective of jpmorgan did an

00:17:24,000 --> 00:17:27,679
exceptional talk on perspective at

00:17:26,400 --> 00:17:31,200
jupitercon last year

00:17:27,679 --> 00:17:33,440
there's a video of it on the

00:17:31,200 --> 00:17:35,039
prospective website which is one of

00:17:33,440 --> 00:17:38,320
these guys

00:17:35,039 --> 00:17:39,039
right here um and it's kind of similar

00:17:38,320 --> 00:17:41,120
to this talk

00:17:39,039 --> 00:17:42,960
um it doesn't go into the how the server

00:17:41,120 --> 00:17:44,160
part works as much but it goes way way

00:17:42,960 --> 00:17:45,600
more into depth into how the jupiter

00:17:44,160 --> 00:17:46,000
part works and specifically how to

00:17:45,600 --> 00:17:49,120
integrate

00:17:46,000 --> 00:17:50,799
it with iex which is a live

00:17:49,120 --> 00:17:52,160
real market that you can subscribe to

00:17:50,799 --> 00:17:54,480
and get real book and

00:17:52,160 --> 00:17:56,240
price history data but this simulation

00:17:54,480 --> 00:17:58,080
is making stuff up

00:17:56,240 --> 00:17:59,440
if you're familiar with an order book an

00:17:58,080 --> 00:18:00,559
order book is basically something that

00:17:59,440 --> 00:18:02,880
shows you

00:18:00,559 --> 00:18:05,600
uh all of the open orders for your

00:18:02,880 --> 00:18:06,799
security or for a financial instrument

00:18:05,600 --> 00:18:07,840
um and there are various ways you can

00:18:06,799 --> 00:18:09,200
visualize this and i'm going to show you

00:18:07,840 --> 00:18:10,559
some of them in perspective before i do

00:18:09,200 --> 00:18:11,600
that i want to want to quickly show you

00:18:10,559 --> 00:18:13,280
what kind of data structure we're

00:18:11,600 --> 00:18:14,720
dealing with

00:18:13,280 --> 00:18:16,320
here's our market object it's just a

00:18:14,720 --> 00:18:18,640
normal python class

00:18:16,320 --> 00:18:19,679
and in its little knit method here um

00:18:18,640 --> 00:18:21,280
you can see we're calling this little

00:18:19,679 --> 00:18:24,480
block of code

00:18:21,280 --> 00:18:26,240
um which uh if you're familiar sql

00:18:24,480 --> 00:18:29,039
will look pretty familiar right um we're

00:18:26,240 --> 00:18:30,960
creating a table object

00:18:29,039 --> 00:18:33,440
and we're passing it in this dictionary

00:18:30,960 --> 00:18:36,480
structure that has some names

00:18:33,440 --> 00:18:38,480
and some types and

00:18:36,480 --> 00:18:40,240
obviously this is a schema right it's

00:18:38,480 --> 00:18:40,559
describing what the table should look

00:18:40,240 --> 00:18:43,679
like

00:18:40,559 --> 00:18:46,400
and this is going to be an orders table

00:18:43,679 --> 00:18:47,200
every row in it is going to be a market

00:18:46,400 --> 00:18:49,280
order

00:18:47,200 --> 00:18:51,520
specifically this market simulation is

00:18:49,280 --> 00:18:52,960
going to be very simple it is going

00:18:51,520 --> 00:18:54,720
you're going to be able to enter a

00:18:52,960 --> 00:18:58,240
market order

00:18:54,720 --> 00:19:01,840
either a buy or sell for a price

00:18:58,240 --> 00:19:01,840
um and a number of shares some

00:19:02,000 --> 00:19:06,240
limit price and a number of shares and

00:19:04,240 --> 00:19:07,600
the order will

00:19:06,240 --> 00:19:09,440
act like a market order and clear

00:19:07,600 --> 00:19:11,039
immediately up until there's no longer

00:19:09,440 --> 00:19:13,120
orders on the books to cover it and then

00:19:11,039 --> 00:19:16,480
it will convert to a limit order

00:19:13,120 --> 00:19:18,559
for the rest of with no expiration

00:19:16,480 --> 00:19:20,799
um so you can see that the schema for

00:19:18,559 --> 00:19:24,640
this order table has values like

00:19:20,799 --> 00:19:26,960
symbol for which security it is um

00:19:24,640 --> 00:19:27,760
uh price for the limit price the order

00:19:26,960 --> 00:19:30,400
um

00:19:27,760 --> 00:19:30,880
the quantity uh the of shares that you

00:19:30,400 --> 00:19:32,880
wanna

00:19:30,880 --> 00:19:34,080
uh make the order for and how many of

00:19:32,880 --> 00:19:37,039
them have already been filled

00:19:34,080 --> 00:19:38,080
um which user it is that's created the

00:19:37,039 --> 00:19:40,080
order

00:19:38,080 --> 00:19:42,240
whether it's a buy or a cell whether

00:19:40,080 --> 00:19:44,640
it's been completely filled or not

00:19:42,240 --> 00:19:46,240
and the time that it was created and

00:19:44,640 --> 00:19:46,559
this keyword argument id which basically

00:19:46,240 --> 00:19:48,400
just

00:19:46,559 --> 00:19:50,240
is a primary key that's exactly what

00:19:48,400 --> 00:19:51,520
you're familiar with with sql

00:19:50,240 --> 00:19:53,440
there's some other tables in here that

00:19:51,520 --> 00:19:54,799
we use for uh uh

00:19:53,440 --> 00:19:55,919
doing some other visualization and

00:19:54,799 --> 00:19:57,360
debugging stuff in the front end that

00:19:55,919 --> 00:20:00,640
i'll show you a second but

00:19:57,360 --> 00:20:02,240
it's not super relevant um

00:20:00,640 --> 00:20:04,000
and then the rest of this class is

00:20:02,240 --> 00:20:05,280
really simple uh

00:20:04,000 --> 00:20:07,760
you can see that it's got some methods

00:20:05,280 --> 00:20:11,039
on it that call things like

00:20:07,760 --> 00:20:13,760
update um cancel

00:20:11,039 --> 00:20:15,039
um and they are calling methods on this

00:20:13,760 --> 00:20:16,880
table object so in a

00:20:15,039 --> 00:20:18,159
in a typical sql database um you'll have

00:20:16,880 --> 00:20:18,480
a database of memory it'll say something

00:20:18,159 --> 00:20:19,679
like

00:20:18,480 --> 00:20:22,000
update table something something

00:20:19,679 --> 00:20:23,840
something in a sql dsl

00:20:22,000 --> 00:20:25,679
in perspective you'll use the

00:20:23,840 --> 00:20:26,320
perspective language bindings in this

00:20:25,679 --> 00:20:28,559
case

00:20:26,320 --> 00:20:29,760
the methods that are on your table

00:20:28,559 --> 00:20:31,840
object

00:20:29,760 --> 00:20:32,880
in this case i want to update the table

00:20:31,840 --> 00:20:36,400
with a

00:20:32,880 --> 00:20:38,640
array of rows and this row

00:20:36,400 --> 00:20:40,159
i'm going to set its order to whatever

00:20:38,640 --> 00:20:41,919
the order id

00:20:40,159 --> 00:20:44,640
was and i'm going to set its filled

00:20:41,919 --> 00:20:49,039
value to its old field value plus

00:20:44,640 --> 00:20:50,480
the quantity of this fill

00:20:49,039 --> 00:20:52,000
these small methods on this class are

00:20:50,480 --> 00:20:53,919
literally just doing these very very

00:20:52,000 --> 00:20:56,720
simple sql operations to update the

00:20:53,919 --> 00:20:59,840
state of this one order table

00:20:56,720 --> 00:21:01,200
to reflect whatever operation i want to

00:20:59,840 --> 00:21:03,600
do create a new order

00:21:01,200 --> 00:21:05,200
or in this case partially fill an order

00:21:03,600 --> 00:21:07,280
because another market order came in and

00:21:05,200 --> 00:21:10,720
cleared some of the entries on it

00:21:07,280 --> 00:21:12,400
um i don't

00:21:10,720 --> 00:21:14,400
want to go through all of these little

00:21:12,400 --> 00:21:15,840
things they're not entirely interesting

00:21:14,400 --> 00:21:16,640
in and of themselves and some of these

00:21:15,840 --> 00:21:19,840
are really kind of

00:21:16,640 --> 00:21:23,360
game bits instead what i wanted to show

00:21:19,840 --> 00:21:24,799
was how easy it is to then take this

00:21:23,360 --> 00:21:25,919
kind of iterative development this

00:21:24,799 --> 00:21:27,840
market simulation

00:21:25,919 --> 00:21:29,280
that is very very simple based on sql

00:21:27,840 --> 00:21:30,080
model and then pulling it into an

00:21:29,280 --> 00:21:31,760
entirely different

00:21:30,080 --> 00:21:34,480
context and start visualizing it

00:21:31,760 --> 00:21:37,120
immediately so this is jupiter notebook

00:21:34,480 --> 00:21:39,200
um and i'm going to import perspective

00:21:37,120 --> 00:21:41,200
and a couple little other things

00:21:39,200 --> 00:21:42,320
um and server which is the file we're

00:21:41,200 --> 00:21:44,320
just looking at

00:21:42,320 --> 00:21:46,640
i'm going to set the logging level um so

00:21:44,320 --> 00:21:49,120
you don't see a bunch of order spam

00:21:46,640 --> 00:21:50,799
i'm going to create some objects and

00:21:49,120 --> 00:21:51,919
some threads which i will describe in a

00:21:50,799 --> 00:21:53,760
little bit

00:21:51,919 --> 00:21:56,799
and then i'm going to create a

00:21:53,760 --> 00:21:56,799
perspective widget

00:21:57,520 --> 00:22:01,280
and i'm going to pass it the order table

00:21:59,919 --> 00:22:06,799
that we were just looking at

00:22:01,280 --> 00:22:06,799
literally this object

00:22:07,039 --> 00:22:13,600
when i do so you can see that i get

00:22:10,240 --> 00:22:16,400
a table um this is perspective

00:22:13,600 --> 00:22:18,400
uh hooked up to that market running

00:22:16,400 --> 00:22:20,480
within this jupiter widget

00:22:18,400 --> 00:22:22,000
um so it doesn't look very impressive

00:22:20,480 --> 00:22:22,880
right now it doesn't even look like it's

00:22:22,000 --> 00:22:25,440
moving

00:22:22,880 --> 00:22:27,360
but it is and you can tell by taking the

00:22:25,440 --> 00:22:28,640
time column and dragging it over here to

00:22:27,360 --> 00:22:31,200
sort

00:22:28,640 --> 00:22:32,559
descending now you can see that um kind

00:22:31,200 --> 00:22:35,039
of like a

00:22:32,559 --> 00:22:36,400
trade blotter i'm sorry i'm scrolling

00:22:35,039 --> 00:22:38,000
all over the place here and like a trade

00:22:36,400 --> 00:22:38,559
blogger you can see new orders coming in

00:22:38,000 --> 00:22:42,640
at the top

00:22:38,559 --> 00:22:45,919
now um there are uh

00:22:42,640 --> 00:22:46,960
some ai ai players running in the

00:22:45,919 --> 00:22:48,720
background that are kind of making

00:22:46,960 --> 00:22:50,559
random orders

00:22:48,720 --> 00:22:53,520
and as you can see they're not

00:22:50,559 --> 00:22:56,240
particularly smart

00:22:53,520 --> 00:22:58,080
but they are running um but this isn't

00:22:56,240 --> 00:23:01,039
an order book right this is just a raw

00:22:58,080 --> 00:23:01,600
dump of the orders as they are coming in

00:23:01,039 --> 00:23:03,600
um

00:23:01,600 --> 00:23:05,600
well what is an order book well you

00:23:03,600 --> 00:23:08,960
really want to see the

00:23:05,600 --> 00:23:10,320
depth um let's start by actually

00:23:08,960 --> 00:23:11,600
segregating these out right you can see

00:23:10,320 --> 00:23:12,720
that like some of these are closed

00:23:11,600 --> 00:23:14,159
immediately because they're filled as

00:23:12,720 --> 00:23:15,840
soon as they put in and some of them are

00:23:14,159 --> 00:23:17,360
still open and i really only want to see

00:23:15,840 --> 00:23:18,559
the open ones so let's go ahead and do

00:23:17,360 --> 00:23:20,320
that

00:23:18,559 --> 00:23:23,679
by filtering down to only the open

00:23:20,320 --> 00:23:27,520
orders you now see only the orders that

00:23:23,679 --> 00:23:29,600
have unfilled

00:23:27,520 --> 00:23:30,640
shares left in them obviously we don't

00:23:29,600 --> 00:23:33,039
want to see all the orders have already

00:23:30,640 --> 00:23:34,640
closed out in our book

00:23:33,039 --> 00:23:37,600
we want to discriminate you can see that

00:23:34,640 --> 00:23:39,360
these are mixed buy and sell orders

00:23:37,600 --> 00:23:41,039
we want to discriminate on these so

00:23:39,360 --> 00:23:43,039
let's split by

00:23:41,039 --> 00:23:44,880
side and now we have a column for all of

00:23:43,039 --> 00:23:46,799
our buy orders over here

00:23:44,880 --> 00:23:48,720
and a column for all of our sell orders

00:23:46,799 --> 00:23:51,600
over here

00:23:48,720 --> 00:23:52,000
um that's pretty close to what we want

00:23:51,600 --> 00:23:55,200
um

00:23:52,000 --> 00:23:57,360
we don't need to see the uh id

00:23:55,200 --> 00:23:58,480
i don't think and players probably not

00:23:57,360 --> 00:24:01,840
relevant um

00:23:58,480 --> 00:24:04,080
but uh these are still in time order

00:24:01,840 --> 00:24:05,360
and what we really want to see is price

00:24:04,080 --> 00:24:08,720
order right we want to see

00:24:05,360 --> 00:24:10,559
all of the bids um

00:24:08,720 --> 00:24:12,240
and then all of the asks kind of

00:24:10,559 --> 00:24:13,120
arranged in price order so we know where

00:24:12,240 --> 00:24:15,039
the spread is

00:24:13,120 --> 00:24:16,799
it's really easy to do in perspective by

00:24:15,039 --> 00:24:19,919
simply grouping by price

00:24:16,799 --> 00:24:20,320
and now you can see price in order on

00:24:19,919 --> 00:24:21,919
the oh

00:24:20,320 --> 00:24:23,600
sorry i'm still sorting by time so i'll

00:24:21,919 --> 00:24:25,600
remove that there we go

00:24:23,600 --> 00:24:26,960
and price is actually upside down

00:24:25,600 --> 00:24:28,799
because conventionally we won't see the

00:24:26,960 --> 00:24:30,400
other direction there we go

00:24:28,799 --> 00:24:32,880
uh so okay so now you can see all of

00:24:30,400 --> 00:24:35,200
these rows grouped by price

00:24:32,880 --> 00:24:36,159
highest price at the top lowest price at

00:24:35,200 --> 00:24:39,919
the bottom

00:24:36,159 --> 00:24:42,559
um and sorry

00:24:39,919 --> 00:24:43,760
still scrolling all over the place why

00:24:42,559 --> 00:24:47,840
don't i pop this

00:24:43,760 --> 00:24:48,320
out um create new view for output there

00:24:47,840 --> 00:24:51,679
we go

00:24:48,320 --> 00:24:54,080
okay cool okay

00:24:51,679 --> 00:24:55,440
so now this is starting to look a little

00:24:54,080 --> 00:24:58,320
more like an order book right

00:24:55,440 --> 00:24:59,200
um you can see the buys over here cells

00:24:58,320 --> 00:25:00,640
over here

00:24:59,200 --> 00:25:02,320
and all your prices range lowest to

00:25:00,640 --> 00:25:03,039
highest on the left but we're not quite

00:25:02,320 --> 00:25:04,640
there yet

00:25:03,039 --> 00:25:06,640
you'll notice there's a lot cross over

00:25:04,640 --> 00:25:07,600
here and these numbers are not making

00:25:06,640 --> 00:25:10,320
sense

00:25:07,600 --> 00:25:12,080
um the numbers are defined by these

00:25:10,320 --> 00:25:14,159
aggregates when you group values in

00:25:12,080 --> 00:25:16,640
perspective

00:25:14,159 --> 00:25:18,640
each one of these rows now represents

00:25:16,640 --> 00:25:19,120
more than one row in the underlying data

00:25:18,640 --> 00:25:22,960
set

00:25:19,120 --> 00:25:26,640
so we need to be able to uh change these

00:25:22,960 --> 00:25:29,679
to something like um

00:25:26,640 --> 00:25:31,120
let's say uh no that's right uh let's

00:25:29,679 --> 00:25:33,279
take this this and this

00:25:31,120 --> 00:25:35,039
and we'll make leaf time in there so we

00:25:33,279 --> 00:25:35,840
can see when the last update time is but

00:25:35,039 --> 00:25:37,840
we'll make it

00:25:35,840 --> 00:25:39,039
the last aggregate so what i've done is

00:25:37,840 --> 00:25:40,480
i've taken this column and i've said

00:25:39,039 --> 00:25:41,840
instead of telling me how many unique

00:25:40,480 --> 00:25:43,279
times are in this column i want to see

00:25:41,840 --> 00:25:44,880
the last time that this column was

00:25:43,279 --> 00:25:47,360
updated

00:25:44,880 --> 00:25:49,360
and then the last thing that really

00:25:47,360 --> 00:25:51,120
doesn't make this an order book

00:25:49,360 --> 00:25:52,640
is this weird crossover here and the

00:25:51,120 --> 00:25:54,720
reason it's there is because this is

00:25:52,640 --> 00:25:56,640
every order for every security in one

00:25:54,720 --> 00:25:57,760
giant book we really only want to see

00:25:56,640 --> 00:25:59,440
one at a time

00:25:57,760 --> 00:26:00,960
so let's take this symbol function drag

00:25:59,440 --> 00:26:04,080
it over to filter and

00:26:00,960 --> 00:26:05,200
just look at apple and suddenly we have

00:26:04,080 --> 00:26:06,559
something that actually looks very much

00:26:05,200 --> 00:26:09,440
like an order book

00:26:06,559 --> 00:26:10,559
um well it would if my mark simulation

00:26:09,440 --> 00:26:12,640
was better

00:26:10,559 --> 00:26:14,000
um in a data grid you can't really see

00:26:12,640 --> 00:26:15,760
how poorly these

00:26:14,000 --> 00:26:17,679
ais are actually trading but if i were

00:26:15,760 --> 00:26:20,799
to change this over to a bar chart

00:26:17,679 --> 00:26:22,080
you can now see the um bias on the

00:26:20,799 --> 00:26:24,559
bottom

00:26:22,080 --> 00:26:26,880
the cells on the top um and you can see

00:26:24,559 --> 00:26:29,360
that if these were real traders we would

00:26:26,880 --> 00:26:31,279
they would be wiped out because they're

00:26:29,360 --> 00:26:34,799
not actually making good decisions

00:26:31,279 --> 00:26:36,640
uh so uh the

00:26:34,799 --> 00:26:38,000
you know again this is a simulation but

00:26:36,640 --> 00:26:39,760
the point does is just kind of show you

00:26:38,000 --> 00:26:41,200
that it is very very easy to go directly

00:26:39,760 --> 00:26:44,159
from data to kind of a

00:26:41,200 --> 00:26:45,360
working visualization of kind of

00:26:44,159 --> 00:26:48,960
traditional

00:26:45,360 --> 00:26:50,480
financial uh charts graphs

00:26:48,960 --> 00:26:52,320
and kind of visualizations of financial

00:26:50,480 --> 00:26:55,200
data very quickly with perspective

00:26:52,320 --> 00:26:55,440
interactively but it's also easy to do

00:26:55,200 --> 00:26:58,080
it

00:26:55,440 --> 00:26:59,440
programmatically so take it for example

00:26:58,080 --> 00:27:00,720
this widget that you just saw me

00:26:59,440 --> 00:27:02,960
configure

00:27:00,720 --> 00:27:04,240
every widget in perspective in python

00:27:02,960 --> 00:27:07,520
and javascript

00:27:04,240 --> 00:27:09,200
has a method called save and if i call

00:27:07,520 --> 00:27:12,400
it

00:27:09,200 --> 00:27:13,279
whoops that's not four it's seven there

00:27:12,400 --> 00:27:15,520
we go

00:27:13,279 --> 00:27:16,400
if i call it i get a dictionary um if

00:27:15,520 --> 00:27:18,799
you'll notice

00:27:16,400 --> 00:27:20,559
the dictionary that is returned actually

00:27:18,799 --> 00:27:22,640
reflects exactly what i have

00:27:20,559 --> 00:27:24,240
set up in the setting and every

00:27:22,640 --> 00:27:26,399
perspective um can be

00:27:24,240 --> 00:27:28,080
reinflated from that dictionary exactly

00:27:26,399 --> 00:27:31,120
in the state that you left it

00:27:28,080 --> 00:27:31,679
so let me give you an example um over

00:27:31,120 --> 00:27:35,840
here

00:27:31,679 --> 00:27:35,840
i have running

00:27:36,559 --> 00:27:41,760
i'm just going to start up this server

00:27:40,480 --> 00:27:44,080
so the exact same code that i was just

00:27:41,760 --> 00:27:46,720
showing you in jupyter i'm now running

00:27:44,080 --> 00:27:50,640
as a standalone python file

00:27:46,720 --> 00:27:53,760
here and what it has done is it has

00:27:50,640 --> 00:27:56,880
started uh a couple of threads the same

00:27:53,760 --> 00:27:59,360
threads that you saw me start in jupiter

00:27:56,880 --> 00:27:59,919
these two um and what it's typically

00:27:59,360 --> 00:28:02,159
done is

00:27:59,919 --> 00:28:03,600
it's uh the ai threat is just so i have

00:28:02,159 --> 00:28:04,320
a bunch of ai players kind of trading in

00:28:03,600 --> 00:28:05,600
the background

00:28:04,320 --> 00:28:07,440
but the perspective thread is actually

00:28:05,600 --> 00:28:08,240
quite interesting one of the neat things

00:28:07,440 --> 00:28:10,960
that we can do with

00:28:08,240 --> 00:28:12,480
perspective is uh in traditional python

00:28:10,960 --> 00:28:12,960
because it's a single threaded language

00:28:12,480 --> 00:28:14,159
um

00:28:12,960 --> 00:28:15,440
especially in finance where you

00:28:14,159 --> 00:28:17,200
potentially have operations on the

00:28:15,440 --> 00:28:20,000
server that are very time consuming or

00:28:17,200 --> 00:28:24,159
take a long time to calculate

00:28:20,000 --> 00:28:26,159
it can be an engineering

00:28:24,159 --> 00:28:27,760
challenge to get good performance right

00:28:26,159 --> 00:28:28,720
because user connects they make some

00:28:27,760 --> 00:28:30,720
long running query

00:28:28,720 --> 00:28:32,720
and the entire server is frozen for the

00:28:30,720 --> 00:28:34,080
entire time that the query is executing

00:28:32,720 --> 00:28:35,919
because perspective is written entirely

00:28:34,080 --> 00:28:38,000
in c plus plus and because once the data

00:28:35,919 --> 00:28:40,320
is put into a table and it is protected

00:28:38,000 --> 00:28:41,919
entirely behind the python interface

00:28:40,320 --> 00:28:44,000
perspective can actually release what's

00:28:41,919 --> 00:28:45,200
called the global interpreter lock which

00:28:44,000 --> 00:28:47,120
allows perspective to

00:28:45,200 --> 00:28:48,559
run entirely in parallel of the

00:28:47,120 --> 00:28:51,520
background so

00:28:48,559 --> 00:28:52,080
unlike a traditional python application

00:28:51,520 --> 00:28:54,559
when you

00:28:52,080 --> 00:28:56,480
give a query to perspective it takes it

00:28:54,559 --> 00:28:58,320
off onto another thread and runs it in

00:28:56,480 --> 00:28:58,960
parallel with whatever else your server

00:28:58,320 --> 00:29:00,000
is doing

00:28:58,960 --> 00:29:02,000
this is one of the secrets to

00:29:00,000 --> 00:29:03,679
perspective being able to attain

00:29:02,000 --> 00:29:05,919
exceptional performance in python in

00:29:03,679 --> 00:29:08,000
terms of scalability in queries that

00:29:05,919 --> 00:29:10,399
come in don't necessarily have to

00:29:08,000 --> 00:29:11,919
conflate with each other or stack up or

00:29:10,399 --> 00:29:13,840
block the performance of other users

00:29:11,919 --> 00:29:16,320
that are connecting which happens by

00:29:13,840 --> 00:29:19,520
default in a normal python application

00:29:16,320 --> 00:29:20,640
um and this application you know is

00:29:19,520 --> 00:29:21,840
literally just doing the exact same

00:29:20,640 --> 00:29:24,159
thing i did in the jupiter application

00:29:21,840 --> 00:29:26,960
right it's starting these threads

00:29:24,159 --> 00:29:28,399
um and it's using an internal uh tool

00:29:26,960 --> 00:29:29,840
that is part of the perspective toolkit

00:29:28,399 --> 00:29:31,440
called perspective manager

00:29:29,840 --> 00:29:33,520
which is literally just a little tiny

00:29:31,440 --> 00:29:36,159
class that allows you to plug

00:29:33,520 --> 00:29:38,960
some perspective tables into a tornado

00:29:36,159 --> 00:29:41,679
server and expose it to the internet

00:29:38,960 --> 00:29:43,120
um and once you've done so in javascript

00:29:41,679 --> 00:29:44,399
connecting back to that server is

00:29:43,120 --> 00:29:46,480
incredibly easy

00:29:44,399 --> 00:29:48,720
you create a websocket object and you

00:29:46,480 --> 00:29:49,840
pass it the url of the server you

00:29:48,720 --> 00:29:51,679
created

00:29:49,840 --> 00:29:53,360
and suddenly every table that you've

00:29:51,679 --> 00:29:56,480
instantiated with python

00:29:53,360 --> 00:29:59,840
is now available to open in perspective

00:29:56,480 --> 00:30:02,320
you can open it virtually

00:29:59,840 --> 00:30:02,320
as in

00:30:04,799 --> 00:30:09,679
as in this model where you are

00:30:08,240 --> 00:30:11,520
opening the object but the object is a

00:30:09,679 --> 00:30:14,559
proxy and you're not loading the data

00:30:11,520 --> 00:30:16,080
um you can also load it in this model

00:30:14,559 --> 00:30:18,240
where you're loading it and actually

00:30:16,080 --> 00:30:20,480
duplicating the whole engine down into

00:30:18,240 --> 00:30:22,720
the browser and syncing it live as the

00:30:20,480 --> 00:30:23,840
as the server updates in this case we're

00:30:22,720 --> 00:30:26,000
going to do the ladder

00:30:23,840 --> 00:30:27,120
we're going to take a view of this

00:30:26,000 --> 00:30:30,640
server table

00:30:27,120 --> 00:30:32,799
and create a web worker clone of it

00:30:30,640 --> 00:30:33,919
so this line basically takes that orders

00:30:32,799 --> 00:30:34,720
table that we're just looking at at

00:30:33,919 --> 00:30:37,440
jupiter

00:30:34,720 --> 00:30:39,120
creates a browser version of it and

00:30:37,440 --> 00:30:39,520
connects it in lock sync so they will

00:30:39,120 --> 00:30:40,720
all

00:30:39,520 --> 00:30:44,240
any updates that happen on the server

00:30:40,720 --> 00:30:48,399
happening on the client um

00:30:44,240 --> 00:30:49,919
then uh does some other simple setup and

00:30:48,399 --> 00:30:50,799
there's a little bit down here that you

00:30:49,919 --> 00:30:52,880
don't need to

00:30:50,799 --> 00:30:54,799
worry about that is simply setting up

00:30:52,880 --> 00:30:57,760
this

00:30:54,799 --> 00:30:57,760
side bit

00:30:59,360 --> 00:31:03,600
okay cool so this little part over here

00:31:02,000 --> 00:31:04,880
on the left was the rest of the code

00:31:03,600 --> 00:31:06,799
that i didn't talk about and it's a

00:31:04,880 --> 00:31:07,279
little control panel um that allows you

00:31:06,799 --> 00:31:10,159
to

00:31:07,279 --> 00:31:12,720
kind of click on things and enter your

00:31:10,159 --> 00:31:14,880
prices and what you want to

00:31:12,720 --> 00:31:16,320
order the reason i'm not going through

00:31:14,880 --> 00:31:17,600
it is because this has nothing to do

00:31:16,320 --> 00:31:19,519
with perspective it doesn't even have to

00:31:17,600 --> 00:31:20,480
do with any real framework um this stuff

00:31:19,519 --> 00:31:22,960
is just pure

00:31:20,480 --> 00:31:24,000
regular html this is an input this is an

00:31:22,960 --> 00:31:25,519
html button

00:31:24,000 --> 00:31:27,200
and i'm just using plain javascript to

00:31:25,519 --> 00:31:28,559
hook these things up but if you're

00:31:27,200 --> 00:31:30,399
interested in how this works uh it's

00:31:28,559 --> 00:31:34,080
available on the

00:31:30,399 --> 00:31:37,679
gui um and then uh just

00:31:34,080 --> 00:31:39,519
one last thing you can see that

00:31:37,679 --> 00:31:40,720
you know pulling this data and i get

00:31:39,519 --> 00:31:42,559
this exact same view that you were just

00:31:40,720 --> 00:31:44,880
looking at in jupiter lab

00:31:42,559 --> 00:31:46,159
this flat kind of nonsense uh market

00:31:44,880 --> 00:31:47,120
view that doesn't really reflect what we

00:31:46,159 --> 00:31:49,039
wanted to see

00:31:47,120 --> 00:31:51,519
if you remember when i called the save

00:31:49,039 --> 00:31:53,440
method i got back a data structure

00:31:51,519 --> 00:31:55,200
that data structure looks kind of like

00:31:53,440 --> 00:31:58,880
this data structure in fact

00:31:55,200 --> 00:31:59,679
this json file i got by playing around

00:31:58,880 --> 00:32:01,440
with the ui

00:31:59,679 --> 00:32:02,960
until it looked the way i wanted and

00:32:01,440 --> 00:32:05,440
then calling save

00:32:02,960 --> 00:32:06,559
and copying that token and just pasting

00:32:05,440 --> 00:32:08,960
it in this file

00:32:06,559 --> 00:32:10,880
and because i did that i can now add

00:32:08,960 --> 00:32:14,080
this line

00:32:10,880 --> 00:32:16,320
to literally restore the json that i had

00:32:14,080 --> 00:32:20,000
previously saved

00:32:16,320 --> 00:32:24,320
which transforms perspective

00:32:20,000 --> 00:32:28,159
from this flat uninteresting view

00:32:24,320 --> 00:32:30,000
to this interesting market view that

00:32:28,159 --> 00:32:34,240
shows me my

00:32:30,000 --> 00:32:36,399
order book my order uh volume graph and

00:32:34,240 --> 00:32:39,600
this cool little price history and

00:32:36,399 --> 00:32:42,240
transaction log and

00:32:39,600 --> 00:32:43,120
if i think if i actually select one of

00:32:42,240 --> 00:32:46,159
these

00:32:43,120 --> 00:32:49,200
so you can see that like uh when i

00:32:46,159 --> 00:32:50,240
select jpmc out of this ticker list all

00:32:49,200 --> 00:32:52,960
i'm doing here is

00:32:50,240 --> 00:32:54,640
adding jpmc as a filter to all of these

00:32:52,960 --> 00:32:56,080
views but it has the effect of cross

00:32:54,640 --> 00:32:57,039
filtering all these down to what i'm

00:32:56,080 --> 00:33:00,399
interested in

00:32:57,039 --> 00:33:01,679
um if i were to select say tesla which

00:33:00,399 --> 00:33:02,480
doesn't seem to be doing good in this

00:33:01,679 --> 00:33:03,600
situation

00:33:02,480 --> 00:33:07,120
uh you can see at the top here that

00:33:03,600 --> 00:33:10,000
there are 536 orders outstanding

00:33:07,120 --> 00:33:11,840
or 536 shares outstanding uh let's see

00:33:10,000 --> 00:33:14,080
if i can actually wipe out this book i

00:33:11,840 --> 00:33:17,679
want to buy 536 shares

00:33:14,080 --> 00:33:20,000
the highest price is 106. so let's offer

00:33:17,679 --> 00:33:23,200
a 150

00:33:20,000 --> 00:33:25,760
and sorry i'm not a good trader

00:33:23,200 --> 00:33:26,799
and let's see if i can wipe them out i

00:33:25,760 --> 00:33:28,320
can

00:33:26,799 --> 00:33:30,320
and as you can see i completely wiped

00:33:28,320 --> 00:33:33,600
out the sell side on the book and the

00:33:30,320 --> 00:33:34,960
market price for tesla went through the

00:33:33,600 --> 00:33:40,080
roof

00:33:34,960 --> 00:33:40,080
um so yeah uh that's a

00:33:40,799 --> 00:33:44,320
very condensed overview of kind of the

00:33:43,600 --> 00:33:46,480
high level

00:33:44,320 --> 00:33:48,080
uh viewer perspective i know i glossed

00:33:46,480 --> 00:33:48,880
over some things but i want to emphasize

00:33:48,080 --> 00:33:50,240
specifically that

00:33:48,880 --> 00:33:52,399
we're not talking about a lot of code

00:33:50,240 --> 00:33:55,039
here the entirety of the front end is

00:33:52,399 --> 00:33:56,720
less than 150 lines um plus this one

00:33:55,039 --> 00:33:58,240
json file that i literally copy and

00:33:56,720 --> 00:34:00,480
pasted out of jupiter

00:33:58,240 --> 00:34:02,640
and the entirety of the server is 500

00:34:00,480 --> 00:34:07,039
lines but the vast majority of this

00:34:02,640 --> 00:34:09,919
is these kind of canned queries

00:34:07,039 --> 00:34:10,480
sql like queries that come that are uh

00:34:09,919 --> 00:34:13,520
direct

00:34:10,480 --> 00:34:15,839
corollaries to the uh the settings that

00:34:13,520 --> 00:34:19,280
you can put in these viewers

00:34:15,839 --> 00:34:23,040
um i think that's all time i have

00:34:19,280 --> 00:34:25,599
uh i hope you enjoyed this

00:34:23,040 --> 00:34:26,639
very quick overview of how the

00:34:25,599 --> 00:34:29,359
perspective

00:34:26,639 --> 00:34:29,760
environment works and how we use it um

00:34:29,359 --> 00:34:31,919
i'm

00:34:29,760 --> 00:34:35,839
kind of what a again simulation order

00:34:31,919 --> 00:34:39,359
book looks like and

00:34:35,839 --> 00:34:39,359
i guess it's time for questions

00:34:39,520 --> 00:34:46,839
um i think we should probably just uh

00:34:42,960 --> 00:34:50,720
plan on doing a longer form

00:34:46,839 --> 00:34:52,560
uh this at some point uh um but also

00:34:50,720 --> 00:34:55,040
uh for those of you interested we will

00:34:52,560 --> 00:34:55,919
be recording a podcast with andrew and

00:34:55,040 --> 00:34:57,680
we'll go

00:34:55,919 --> 00:34:59,440
a little bit deeper into perspective and

00:34:57,680 --> 00:35:00,320
a little bit deeper into this too but i

00:34:59,440 --> 00:35:02,880
i

00:35:00,320 --> 00:35:04,320
but uh watching this and seeing how many

00:35:02,880 --> 00:35:06,320
attendees we're staying on

00:35:04,320 --> 00:35:07,680
plus getting some comments from our

00:35:06,320 --> 00:35:10,560
internal team

00:35:07,680 --> 00:35:11,119
um i feel like uh we may need to do this

00:35:10,560 --> 00:35:13,760
again

00:35:11,119 --> 00:35:14,880
in a much longer time period so um thank

00:35:13,760 --> 00:35:18,880
you andrew

00:35:14,880 --> 00:35:21,760
um and just real quickly

00:35:18,880 --> 00:35:23,599
um uh we do have some questions but i

00:35:21,760 --> 00:35:26,640
think we're gonna have to answer them

00:35:23,599 --> 00:35:28,480
offline possibly i did want to say that

00:35:26,640 --> 00:35:31,119
we do try to make uh

00:35:28,480 --> 00:35:33,200
these meetups more like in-person

00:35:31,119 --> 00:35:33,839
meetups and sorry there's no pizza today

00:35:33,200 --> 00:35:36,000
but uh

00:35:33,839 --> 00:35:36,880
we do have t-shirts from a random

00:35:36,000 --> 00:35:40,640
drawing

00:35:36,880 --> 00:35:44,400
for justin s from 66 east and julia w

00:35:40,640 --> 00:35:46,480
from rbc justin julia will be

00:35:44,400 --> 00:35:49,040
sending an email out to you to get your

00:35:46,480 --> 00:35:52,880
information and size for the t-shirts

00:35:49,040 --> 00:35:56,640
um again i'm sorry

00:35:52,880 --> 00:35:59,599
we will um andrew i will um

00:35:56,640 --> 00:36:00,800
we'll stay on after this and i'll uh

00:35:59,599 --> 00:36:03,040
give you the questions

00:36:00,800 --> 00:36:04,160
uh that we did have and then we can pass

00:36:03,040 --> 00:36:06,720
those on to

00:36:04,160 --> 00:36:07,280
the attendees who asked if that's cool

00:36:06,720 --> 00:36:10,640
uh

00:36:07,280 --> 00:36:12,000
sure okay awesome um

00:36:10,640 --> 00:36:13,760
but i want to thank all of you for

00:36:12,000 --> 00:36:15,359
attending today's open source info date

00:36:13,760 --> 00:36:17,359
meetup uh in april

00:36:15,359 --> 00:36:19,440
we have an open source readiness panel

00:36:17,359 --> 00:36:21,200
on the 7th so next wednesday

00:36:19,440 --> 00:36:22,640
on running an open source project from

00:36:21,200 --> 00:36:24,720
inside the bank uh

00:36:22,640 --> 00:36:26,880
plus we will have all of our comm or we

00:36:24,720 --> 00:36:28,000
will have our all community call on the

00:36:26,880 --> 00:36:29,520
28th

00:36:28,000 --> 00:36:32,079
if you're already on the mailing list we

00:36:29,520 --> 00:36:36,000
have information on our next us uk

00:36:32,079 --> 00:36:39,359
and apec meetups that will be out soon

00:36:36,000 --> 00:36:41,680
also please look out and subscribe to

00:36:39,359 --> 00:36:43,119
our open source and fintech podcast our

00:36:41,680 --> 00:36:45,200
bi-weekly newsletter

00:36:43,119 --> 00:36:46,880
our weekly this week at find us email

00:36:45,200 --> 00:36:48,560
and follow us on twitter and linkedin

00:36:46,880 --> 00:36:50,640
and join the finos slide channels that

00:36:48,560 --> 00:36:52,240
james put in the chat earlier

00:36:50,640 --> 00:36:53,920
if you have any questions about events

00:36:52,240 --> 00:36:55,760
contact us at events

00:36:53,920 --> 00:36:57,920
fenoz.org if you have any questions

00:36:55,760 --> 00:37:00,640
about the phenols community or getting

00:36:57,920 --> 00:37:02,320
involved info fenos.org you can speak

00:37:00,640 --> 00:37:03,440
directly to our director of community

00:37:02,320 --> 00:37:07,040
james mccloud

00:37:03,440 --> 00:37:08,880
who is right now starting office hours

00:37:07,040 --> 00:37:10,160
and i can put that link in the chat if

00:37:08,880 --> 00:37:13,119
you're interested in

00:37:10,160 --> 00:37:15,040
uh talking to him um or reach out to any

00:37:13,119 --> 00:37:18,320
of our fellows team members

00:37:15,040 --> 00:37:19,280
um and and andrew we'll go ahead and

00:37:18,320 --> 00:37:21,440
what we'll do is

00:37:19,280 --> 00:37:23,200
for the video that we're producing we'll

00:37:21,440 --> 00:37:26,000
go ahead and answer the question

00:37:23,200 --> 00:37:26,960
uh that we did have uh but i want to go

00:37:26,000 --> 00:37:28,880
ahead and say

00:37:26,960 --> 00:37:30,640
uh thank you good day good night

00:37:28,880 --> 00:37:31,119
wherever you go so much for hosting us

00:37:30,640 --> 00:37:33,119
it's

00:37:31,119 --> 00:37:34,640
we really appreciate it yeah we did a

00:37:33,119 --> 00:37:36,400
great job again

00:37:34,640 --> 00:37:38,640
we're getting good comments from

00:37:36,400 --> 00:37:41,680
everywhere um

00:37:38,640 --> 00:37:45,119
and um so so

00:37:41,680 --> 00:37:47,040
let's go ahead uh kind of anybody who

00:37:45,119 --> 00:37:49,440
wish to stay on please go ahead

00:37:47,040 --> 00:37:51,280
um but let's go ahead and answer some of

00:37:49,440 --> 00:37:55,040
the questions that we

00:37:51,280 --> 00:37:58,640
uh did have and if that's cool

00:37:55,040 --> 00:37:59,680
yep okay so um about custom aggregate

00:37:58,640 --> 00:38:02,160
functions

00:37:59,680 --> 00:38:04,320
right ryan ryan asks is there a way to

00:38:02,160 --> 00:38:06,640
do user-defined

00:38:04,320 --> 00:38:08,160
aggregate functions so the answer is in

00:38:06,640 --> 00:38:10,240
current perspective no

00:38:08,160 --> 00:38:12,640
um we have this button called the new

00:38:10,240 --> 00:38:15,200
column button which supports things like

00:38:12,640 --> 00:38:17,359
a good example of using the new column

00:38:15,200 --> 00:38:20,560
button effectively would be for example

00:38:17,359 --> 00:38:21,359
taking this market chart that i have

00:38:20,560 --> 00:38:24,800
right here

00:38:21,359 --> 00:38:26,880
and saying uh instead of showing me all

00:38:24,800 --> 00:38:28,800
the times maybe i want to say the

00:38:26,880 --> 00:38:31,680
minute bucket of all the times right and

00:38:28,800 --> 00:38:34,240
i would say minute bucket time

00:38:31,680 --> 00:38:35,599
it creates a new column right which then

00:38:34,240 --> 00:38:37,839
i can

00:38:35,599 --> 00:38:38,800
put on the y axis instead of time and

00:38:37,839 --> 00:38:40,640
now i get a

00:38:38,800 --> 00:38:42,880
much lower granularity version of that

00:38:40,640 --> 00:38:43,599
same chart this is not a custom

00:38:42,880 --> 00:38:45,280
aggregate

00:38:43,599 --> 00:38:46,880
but a lot of the things that you could

00:38:45,280 --> 00:38:48,640
do with an aggregate

00:38:46,880 --> 00:38:50,800
you can break up into the aggregates we

00:38:48,640 --> 00:38:52,000
currently have and a new column step

00:38:50,800 --> 00:38:54,240
that does kind of the map

00:38:52,000 --> 00:38:55,839
operation to the aggregates reduce

00:38:54,240 --> 00:38:57,760
operation

00:38:55,839 --> 00:38:58,960
in the next version of perspective that

00:38:57,760 --> 00:39:01,280
is coming out

00:38:58,960 --> 00:39:03,440
we are releasing uh this new feature

00:39:01,280 --> 00:39:05,920
which is a rewrite of that engine

00:39:03,440 --> 00:39:07,680
using a very powerful embedded dsl

00:39:05,920 --> 00:39:10,000
called expert tk

00:39:07,680 --> 00:39:11,040
um an expert tk allows all sorts of cool

00:39:10,000 --> 00:39:14,880
uh stuff

00:39:11,040 --> 00:39:17,920
my fingers crossed my

00:39:14,880 --> 00:39:19,599
dream is to do the next uh next time we

00:39:17,920 --> 00:39:21,200
are hopefully invited to do a phenos

00:39:19,599 --> 00:39:22,240
talk on perspective i really want to

00:39:21,200 --> 00:39:25,599
show off how to do

00:39:22,240 --> 00:39:28,160
a ray tracing engine

00:39:25,599 --> 00:39:30,240
built entirely in perspective

00:39:28,160 --> 00:39:34,160
expressions within this

00:39:30,240 --> 00:39:36,000
api anyway once this feature lands

00:39:34,160 --> 00:39:37,280
it's going to allow you to still do the

00:39:36,000 --> 00:39:38,160
same thing as i just showed you with new

00:39:37,280 --> 00:39:40,640
columns but

00:39:38,160 --> 00:39:43,040
massively more complicated expressions

00:39:40,640 --> 00:39:46,320
and in a future version we intend on

00:39:43,040 --> 00:39:48,960
using this dsl to apply to not just

00:39:46,320 --> 00:39:49,760
um new columns and filters but also to

00:39:48,960 --> 00:39:51,839
aggregates

00:39:49,760 --> 00:39:53,359
and sorts and all sorts of other

00:39:51,839 --> 00:39:54,480
features so the idea is to kind of take

00:39:53,359 --> 00:39:56,400
this dsl

00:39:54,480 --> 00:39:57,839
and make it so that anywhere where

00:39:56,400 --> 00:39:59,440
there's a column name or anywhere want

00:39:57,839 --> 00:40:00,960
to use a column you can turn it into an

00:39:59,440 --> 00:40:01,760
expression that includes split like

00:40:00,960 --> 00:40:04,720
criteria

00:40:01,760 --> 00:40:10,880
uh group by criteria aggregate functions

00:40:04,720 --> 00:40:12,960
filters sorts etc

00:40:10,880 --> 00:40:14,240
he said thank you uh let's be very

00:40:12,960 --> 00:40:17,440
useful for debugging

00:40:14,240 --> 00:40:21,040
um so uh do you mind if i well

00:40:17,440 --> 00:40:21,040
go ahead what do you mean by list

00:40:23,599 --> 00:40:27,119
uh yes actually so uh yes the dsl does

00:40:26,720 --> 00:40:29,440
help

00:40:27,119 --> 00:40:30,400
uh with composing filters not just does

00:40:29,440 --> 00:40:32,240
it help so

00:40:30,400 --> 00:40:34,160
obviously you can use the dsl to do

00:40:32,240 --> 00:40:36,319
things like take any column and turn it

00:40:34,160 --> 00:40:37,839
into an arbitrary boolean value that you

00:40:36,319 --> 00:40:41,920
can use as a filter

00:40:37,839 --> 00:40:41,920
but you can also use uh

00:40:42,000 --> 00:40:44,800
where's the feature

00:40:45,280 --> 00:40:49,920
it can also do stuff like this which is

00:40:47,760 --> 00:40:51,760
use filters instead of reducing the data

00:40:49,920 --> 00:40:53,760
set you can then use the expression to

00:40:51,760 --> 00:40:54,960
basically split the data set into the

00:40:53,760 --> 00:40:55,440
things that apply to the filter and

00:40:54,960 --> 00:40:58,480
things that

00:40:55,440 --> 00:40:59,280
don't apply to filter um there is an

00:40:58,480 --> 00:41:03,760
operation

00:40:59,280 --> 00:41:03,760
built into perspective that might not

00:41:04,839 --> 00:41:07,839
work

00:41:10,079 --> 00:41:12,400
um

00:41:13,760 --> 00:41:20,720
now we might only have it turned on for

00:41:15,440 --> 00:41:22,000
strings let me see here

00:41:20,720 --> 00:41:24,000
now we don't have enabled um the

00:41:22,000 --> 00:41:25,920
internal engine uh has an operation

00:41:24,000 --> 00:41:29,520
called join that's list basically so

00:41:25,920 --> 00:41:30,240
uh if you are interested actually that

00:41:29,520 --> 00:41:33,440
would be an

00:41:30,240 --> 00:41:34,160
awesome um i don't mean to impose but if

00:41:33,440 --> 00:41:36,079
you were interested

00:41:34,160 --> 00:41:37,920
in uh contributing to perspective that

00:41:36,079 --> 00:41:39,200
would be an awesome project um it's an

00:41:37,920 --> 00:41:41,040
operation that's already implemented in

00:41:39,200 --> 00:41:42,160
the engine because it was implemented

00:41:41,040 --> 00:41:43,200
for our desktop engine

00:41:42,160 --> 00:41:44,560
but we haven't exposed it in the

00:41:43,200 --> 00:41:45,599
javascript yet and it would be fairly

00:41:44,560 --> 00:41:47,280
straightforward to

00:41:45,599 --> 00:41:48,800
to expose it as a javascript function to

00:41:47,280 --> 00:41:50,880
be available in the ui

00:41:48,800 --> 00:41:51,920
um if you'd like your we'd love a

00:41:50,880 --> 00:41:53,119
contribution um

00:41:51,920 --> 00:41:54,960
and you're also welcome to just fill out

00:41:53,119 --> 00:41:56,000
an issue and we take our issues and

00:41:54,960 --> 00:41:58,160
feature requests and stuff on

00:41:56,000 --> 00:41:59,839
perspective very seriously

00:41:58,160 --> 00:42:02,160
we anything that we leave open we are

00:41:59,839 --> 00:42:02,800
going to address at some point and we do

00:42:02,160 --> 00:42:04,880
have jobs

00:42:02,800 --> 00:42:07,200
so please be patient with some of the

00:42:04,880 --> 00:42:08,480
implementations of these things um but

00:42:07,200 --> 00:42:09,760
you know if you if it's something you're

00:42:08,480 --> 00:42:11,520
really interested in you'd like us to

00:42:09,760 --> 00:42:12,880
track it um just open up a brief uh

00:42:11,520 --> 00:42:17,520
feature request issue on the prospective

00:42:12,880 --> 00:42:19,119
github page and we'll comment on it

00:42:17,520 --> 00:42:21,200
oh sorry actually another thing you can

00:42:19,119 --> 00:42:22,240
do is uh yeah so you can't actually do

00:42:21,200 --> 00:42:23,680
joins except

00:42:22,240 --> 00:42:25,359
explicitly but you can do multi-level

00:42:23,680 --> 00:42:27,760
pivots so for example like

00:42:25,359 --> 00:42:28,800
here i'm pivoting by name um and i'm

00:42:27,760 --> 00:42:30,480
showing client

00:42:28,800 --> 00:42:32,079
right i mean you can see that there are

00:42:30,480 --> 00:42:32,800
three clients under each one of these

00:42:32,079 --> 00:42:34,640
names

00:42:32,800 --> 00:42:36,400
but if i were to make client the next

00:42:34,640 --> 00:42:37,680
level pivot you can actually see

00:42:36,400 --> 00:42:40,000
all of the clients that are underneath

00:42:37,680 --> 00:42:43,119
each of those it's not quite

00:42:40,000 --> 00:42:46,400
visually what you're asking for but

00:42:43,119 --> 00:42:46,400
it does show you that information

00:42:48,079 --> 00:42:51,520
well it looks like uh ryan has said he's

00:42:50,240 --> 00:42:54,640
interested in helping

00:42:51,520 --> 00:42:58,160
so that so all of this is worth it

00:42:54,640 --> 00:42:58,800
all of it that is awesome we love free

00:42:58,160 --> 00:43:01,440
code

00:42:58,800 --> 00:43:04,000
[Laughter]

00:43:01,440 --> 00:43:06,720
that's awesome um does anybody else have

00:43:04,000 --> 00:43:06,720
any questions

00:43:07,440 --> 00:43:10,560
awesome uh andrew there are some

00:43:09,839 --> 00:43:13,760
compliments

00:43:10,560 --> 00:43:15,680
in the chat um again

00:43:13,760 --> 00:43:16,960
from the attendees but like i said we're

00:43:15,680 --> 00:43:20,319
getting them from your team

00:43:16,960 --> 00:43:23,599
so uh yeah um so i think

00:43:20,319 --> 00:43:25,520
with that uh uh again we're going to be

00:43:23,599 --> 00:43:26,079
recording the podcast we'll try to take

00:43:25,520 --> 00:43:29,280
some

00:43:26,079 --> 00:43:33,680
uh or those questions into account here

00:43:29,280 --> 00:43:35,280
and um if you have any other questions

00:43:33,680 --> 00:43:38,319
please put them in chat but uh

00:43:35,280 --> 00:43:40,720
otherwise we will see you folks uh

00:43:38,319 --> 00:43:42,560
again we have the open source readiness

00:43:40,720 --> 00:43:45,200
uh meeting next week with

00:43:42,560 --> 00:43:45,760
um with us speakers there we'll have an

00:43:45,200 --> 00:43:48,319
all call

00:43:45,760 --> 00:43:50,800
on the 28th and we'll be doing another

00:43:48,319 --> 00:43:54,319
one of these meetups for the us

00:43:50,800 --> 00:43:57,520
um i believe in may but we may have

00:43:54,319 --> 00:44:00,400
a uk one uh between there so uh

00:43:57,520 --> 00:44:01,119
andrew again thank you so much for um

00:44:00,400 --> 00:44:04,240
for uh

00:44:01,119 --> 00:44:06,560
speaking today and um

00:44:04,240 --> 00:44:23,839
uh hope everybody has a great day and

00:44:06,560 --> 00:44:23,839

YouTube URL: https://www.youtube.com/watch?v=no0qChjvdgQ


