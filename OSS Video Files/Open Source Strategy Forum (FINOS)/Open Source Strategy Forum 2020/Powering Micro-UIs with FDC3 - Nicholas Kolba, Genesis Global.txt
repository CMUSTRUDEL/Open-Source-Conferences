Title: Powering Micro-UIs with FDC3 - Nicholas Kolba, Genesis Global
Publication date: 2020-11-19
Playlist: Open Source Strategy Forum 2020
Description: 
	Powering Micro-UIs with FDC3 - Nicholas Kolba, Genesis Global
Captions: 
	00:00:06,160 --> 00:00:09,200
hello

00:00:06,879 --> 00:00:11,599
and welcome to powering micro uis with

00:00:09,200 --> 00:00:14,960
ftc 3.

00:00:11,599 --> 00:00:15,360
i'm nick colba i am co-chair of the ftc

00:00:14,960 --> 00:00:17,680
00:00:15,360 --> 00:00:20,320
project at finos and the global header

00:00:17,680 --> 00:00:23,279
platform at genesis

00:00:20,320 --> 00:00:25,039
first of all i want to thank finnos and

00:00:23,279 --> 00:00:26,000
the linux foundation for all their

00:00:25,039 --> 00:00:29,199
amazing work

00:00:26,000 --> 00:00:31,119
in organizing and hosting ossf

00:00:29,199 --> 00:00:32,880
and in general for supporting open

00:00:31,119 --> 00:00:35,040
source development and finance

00:00:32,880 --> 00:00:37,520
it's been an incredible long journey

00:00:35,040 --> 00:00:40,160
with finnos for me personally and

00:00:37,520 --> 00:00:41,440
they're an amazing group of people and

00:00:40,160 --> 00:00:44,160
it's just

00:00:41,440 --> 00:00:46,800
terrific and humbling to work with them

00:00:44,160 --> 00:00:50,239
over the years

00:00:46,800 --> 00:00:51,920
a little bit about genesis genesis is

00:00:50,239 --> 00:00:54,320
the only financial markets

00:00:51,920 --> 00:00:56,000
native low code application platform or

00:00:54,320 --> 00:00:58,800
lcap

00:00:56,000 --> 00:01:01,280
we have a library that provides

00:00:58,800 --> 00:01:06,560
ready-to-build building blocks

00:01:01,280 --> 00:01:09,360
that address complex financial workflows

00:01:06,560 --> 00:01:11,360
our platform enables us to build highly

00:01:09,360 --> 00:01:15,119
performant scalable and secure

00:01:11,360 --> 00:01:15,840
solutions and to do this much faster

00:01:15,119 --> 00:01:19,119
than

00:01:15,840 --> 00:01:19,119
if you're building from scratch

00:01:20,640 --> 00:01:24,840
so many of you probably are very

00:01:22,880 --> 00:01:27,600
familiar with fdc3

00:01:24,840 --> 00:01:29,759
already but i do think it would be good

00:01:27,600 --> 00:01:33,280
to give a quick tour and background

00:01:29,759 --> 00:01:37,280
onto the history and purpose of ftc3

00:01:33,280 --> 00:01:39,520
so ftc3 itself is a standard

00:01:37,280 --> 00:01:41,360
for application interoperability and

00:01:39,520 --> 00:01:44,960
finance

00:01:41,360 --> 00:01:48,799
it covers three main areas app directory

00:01:44,960 --> 00:01:52,399
or describing the metadata for catalog

00:01:48,799 --> 00:01:55,840
of applications that can interoperate

00:01:52,399 --> 00:01:58,880
context data intense which is a taxonomy

00:01:55,840 --> 00:02:00,960
of the verbs and nouns uh

00:01:58,880 --> 00:02:02,320
describing interactivity between

00:02:00,960 --> 00:02:05,840
applications

00:02:02,320 --> 00:02:09,840
and then finally the api which is

00:02:05,840 --> 00:02:12,640
um a standard for the

00:02:09,840 --> 00:02:14,160
interface between applications and

00:02:12,640 --> 00:02:16,000
platforms

00:02:14,160 --> 00:02:19,440
or containers that provide the

00:02:16,000 --> 00:02:19,440
interoperability to them

00:02:21,599 --> 00:02:28,319
so fdc3 itself started way back

00:02:24,879 --> 00:02:31,519
in october of 2017

00:02:28,319 --> 00:02:35,120
so over three years ago uh we started

00:02:31,519 --> 00:02:37,920
open fin with a slide deck

00:02:35,120 --> 00:02:39,120
and about 12 technologists from across

00:02:37,920 --> 00:02:42,560
the industry

00:02:39,120 --> 00:02:46,400
got people together and uh

00:02:42,560 --> 00:02:50,319
started this group we broke up into four

00:02:46,400 --> 00:02:53,200
working groups at the time and uh

00:02:50,319 --> 00:02:53,920
built a lot of momentum there were

00:02:53,200 --> 00:02:57,040
roughly

00:02:53,920 --> 00:02:59,519
40 community firms involved with

00:02:57,040 --> 00:03:01,519
the creation and the feedback phase of

00:02:59,519 --> 00:03:03,280
the initial standards

00:03:01,519 --> 00:03:06,720
and those standards themselves were

00:03:03,280 --> 00:03:09,599
released in march of 2019

00:03:06,720 --> 00:03:10,400
uh in the meantime ftc 3 been

00:03:09,599 --> 00:03:15,080
contributed

00:03:10,400 --> 00:03:17,200
into finos and we launched

00:03:15,080 --> 00:03:20,400
ftc3.finos.org

00:03:17,200 --> 00:03:23,840
and created a lot of tooling around

00:03:20,400 --> 00:03:27,599
supporting the standard and

00:03:23,840 --> 00:03:30,560
in this year in march we had our

00:03:27,599 --> 00:03:32,640
1.1 release which was a really major

00:03:30,560 --> 00:03:36,000
improvement to the standard

00:03:32,640 --> 00:03:40,000
and we've also seen a lot of

00:03:36,000 --> 00:03:40,879
production uh implementations go into

00:03:40,000 --> 00:03:43,680
the wild

00:03:40,879 --> 00:03:45,599
over the past year or more uh some

00:03:43,680 --> 00:03:48,959
notables including facts factset

00:03:45,599 --> 00:03:52,799
jpmorgan obviously open fin

00:03:48,959 --> 00:03:55,920
glue 42 and kosaic ensemble

00:03:52,799 --> 00:03:55,920
and there are many many more

00:03:56,080 --> 00:04:00,319
and finally this year we've been focused

00:03:58,400 --> 00:04:02,560
on the one two release

00:04:00,319 --> 00:04:03,680
which i'm going to touch on a little bit

00:04:02,560 --> 00:04:08,480
and

00:04:03,680 --> 00:04:15,840
you're hoping to put the 1.2

00:04:08,480 --> 00:04:15,840
ftc 3 release out in q1 of next year

00:04:16,479 --> 00:04:24,320
so what was the motivation behind ftc3

00:04:21,120 --> 00:04:25,840
uh so let's take a little bit of a look

00:04:24,320 --> 00:04:29,280
at what the world looked like

00:04:25,840 --> 00:04:32,080
uh before fdc3

00:04:29,280 --> 00:04:33,360
so apps get built as always as they

00:04:32,080 --> 00:04:35,919
always do

00:04:33,360 --> 00:04:38,080
and you have different apps coming from

00:04:35,919 --> 00:04:42,720
different development teams

00:04:38,080 --> 00:04:45,919
and when they want to interoperate often

00:04:42,720 --> 00:04:47,919
developer a will talk to developer b

00:04:45,919 --> 00:04:51,919
and they may create some informal

00:04:47,919 --> 00:04:51,919
bilateral protocols or apis

00:04:53,120 --> 00:04:57,520
as this matures they may create a more

00:04:56,880 --> 00:05:00,720
specific

00:04:57,520 --> 00:05:03,360
proprietary api that they can go through

00:05:00,720 --> 00:05:05,039
so developers don't have to kind of like

00:05:03,360 --> 00:05:06,720
send emails back and forth or get on the

00:05:05,039 --> 00:05:09,039
phone to figure out how to make things

00:05:06,720 --> 00:05:09,039
work

00:05:09,600 --> 00:05:15,199
then as this scales and we get

00:05:12,800 --> 00:05:16,320
more applications and more developers

00:05:15,199 --> 00:05:19,520
into the mix

00:05:16,320 --> 00:05:22,720
this starts to get really quite messy

00:05:19,520 --> 00:05:26,080
as developers need to track

00:05:22,720 --> 00:05:28,320
different apis that may be formal

00:05:26,080 --> 00:05:29,919
or informal across different

00:05:28,320 --> 00:05:33,600
applications

00:05:29,919 --> 00:05:37,120
and try to make everything work

00:05:33,600 --> 00:05:37,120
so with ftc3

00:05:37,199 --> 00:05:43,680
all everybody just speaks ftc3

00:05:40,639 --> 00:05:47,680
so each developer only needs to

00:05:43,680 --> 00:05:49,759
speak to this one api and

00:05:47,680 --> 00:05:50,880
as more applications are dropped into an

00:05:49,759 --> 00:05:53,440
environment

00:05:50,880 --> 00:05:54,639
they'll simply because they're talking

00:05:53,440 --> 00:05:58,639
ftc3

00:05:54,639 --> 00:05:58,639
be able to interoperate with each other

00:06:00,160 --> 00:06:05,360
fdc3 also works across a

00:06:03,360 --> 00:06:07,199
number of different technologies

00:06:05,360 --> 00:06:11,120
including as mentioned before

00:06:07,199 --> 00:06:14,479
open fin ensemble blue 42 but also any

00:06:11,120 --> 00:06:17,199
electron uh based container also

00:06:14,479 --> 00:06:18,560
runs in wpf there's implementations in

00:06:17,199 --> 00:06:20,560
java as well

00:06:18,560 --> 00:06:21,680
and there's even implementations

00:06:20,560 --> 00:06:23,360
directly in chrome

00:06:21,680 --> 00:06:26,240
which you'll actually see a little bit

00:06:23,360 --> 00:06:26,240
about later

00:06:27,440 --> 00:06:34,800
so let's talk about micro uis

00:06:31,199 --> 00:06:37,680
um so a micro ui is kind of a

00:06:34,800 --> 00:06:39,280
you know it's become a bit of a buzzword

00:06:37,680 --> 00:06:42,400
but

00:06:39,280 --> 00:06:45,600
what these are really about is uh

00:06:42,400 --> 00:06:46,720
creating small self-contained front ends

00:06:45,600 --> 00:06:50,720
that can be

00:06:46,720 --> 00:06:54,080
put together kind of like lego bricks

00:06:50,720 --> 00:06:54,960
so micro services have been hugely

00:06:54,080 --> 00:06:56,880
successful

00:06:54,960 --> 00:06:59,120
in enabling platforms to scale on the

00:06:56,880 --> 00:07:02,560
back end side of things

00:06:59,120 --> 00:07:04,160
but until recently most micro service

00:07:02,560 --> 00:07:06,560
platforms

00:07:04,160 --> 00:07:08,000
have been fronted by what are monolithic

00:07:06,560 --> 00:07:11,199
uis

00:07:08,000 --> 00:07:12,800
so here we have all of your nicely

00:07:11,199 --> 00:07:15,360
decoupled microservices

00:07:12,800 --> 00:07:17,840
going into a single monolithic

00:07:15,360 --> 00:07:21,440
application

00:07:17,840 --> 00:07:24,400
so when we create

00:07:21,440 --> 00:07:25,599
an analogous set of services using micro

00:07:24,400 --> 00:07:28,400
uis

00:07:25,599 --> 00:07:30,800
uh you can scale the front end in in a

00:07:28,400 --> 00:07:32,720
kind of analogous way to microservices

00:07:30,800 --> 00:07:35,759
on the back end

00:07:32,720 --> 00:07:38,080
uh so

00:07:35,759 --> 00:07:40,160
design systems which have been very

00:07:38,080 --> 00:07:43,120
popular

00:07:40,160 --> 00:07:44,879
in application development are only

00:07:43,120 --> 00:07:45,840
concerned with visual language but micro

00:07:44,879 --> 00:07:50,479
uis

00:07:45,840 --> 00:07:50,479
create a functional workflow language

00:07:50,560 --> 00:07:54,720
they create building blocks that combine

00:07:52,639 --> 00:07:57,120
both front end experience and back-end

00:07:54,720 --> 00:07:59,440
functionality and data

00:07:57,120 --> 00:08:01,599
so let's look at some of the major

00:07:59,440 --> 00:08:03,919
advantages of micro uis and application

00:08:01,599 --> 00:08:07,199
development

00:08:03,919 --> 00:08:09,680
so big one is reusability

00:08:07,199 --> 00:08:10,639
micro uis make it very easy to stamp out

00:08:09,680 --> 00:08:14,240
front ends

00:08:10,639 --> 00:08:17,919
into minor with minor variants

00:08:14,240 --> 00:08:20,560
uh flexibility is also critical and you

00:08:17,919 --> 00:08:23,280
can configure micro uis very easily

00:08:20,560 --> 00:08:23,759
uh using them as building blocks uh to

00:08:23,280 --> 00:08:27,759
make

00:08:23,759 --> 00:08:31,120
very different shapes

00:08:27,759 --> 00:08:34,479
and finally uh personalization

00:08:31,120 --> 00:08:36,880
the uh componentized ui makes it easy

00:08:34,479 --> 00:08:39,839
for end users to configure the front end

00:08:36,880 --> 00:08:40,880
and to meet to meet their specific needs

00:08:39,839 --> 00:08:43,360
it also makes it

00:08:40,880 --> 00:08:45,200
easier for applications to fit into an

00:08:43,360 --> 00:08:48,000
end user's preferred workflow

00:08:45,200 --> 00:08:48,800
through embeddable components there are

00:08:48,000 --> 00:08:51,040
examples of

00:08:48,800 --> 00:08:54,080
embeddable components everywhere from

00:08:51,040 --> 00:08:57,200
google maps widgets to

00:08:54,080 --> 00:08:59,680
sign in with x sso buttons

00:08:57,200 --> 00:09:01,040
embedding symphony or other chats into

00:08:59,680 --> 00:09:04,640
applications or

00:09:01,040 --> 00:09:08,080
embedding youtube videos these are

00:09:04,640 --> 00:09:09,120
all examples of self-contained micro uis

00:09:08,080 --> 00:09:14,080
that can be

00:09:09,120 --> 00:09:14,080
uh injected into a workflow

00:09:14,480 --> 00:09:17,839
so here's an example of micro uis that

00:09:17,040 --> 00:09:20,880
we've built

00:09:17,839 --> 00:09:22,959
using the genesis platform

00:09:20,880 --> 00:09:24,080
actually in this particular case uh

00:09:22,959 --> 00:09:26,080
these

00:09:24,080 --> 00:09:27,519
these uh applications are running in

00:09:26,080 --> 00:09:28,959
open fin

00:09:27,519 --> 00:09:31,519
and using as a container for the

00:09:28,959 --> 00:09:33,839
presentation layer and this allows um

00:09:31,519 --> 00:09:35,120
each ui to run as its own app but to be

00:09:33,839 --> 00:09:37,360
composable

00:09:35,120 --> 00:09:38,399
with with the other applications in

00:09:37,360 --> 00:09:43,360
these kinds of

00:09:38,399 --> 00:09:43,360
tabs or split

00:09:48,839 --> 00:09:53,680
layouts

00:09:50,480 --> 00:09:56,720
so but the micro ui

00:09:53,680 --> 00:09:59,760
approach isn't without its challenges

00:09:56,720 --> 00:10:02,640
uh when we give up

00:09:59,760 --> 00:10:04,560
the control of a monolithic application

00:10:02,640 --> 00:10:06,160
front end

00:10:04,560 --> 00:10:08,480
there are a number of new problems that

00:10:06,160 --> 00:10:08,480
emerge

00:10:10,160 --> 00:10:16,800
the first one we can think about is

00:10:13,760 --> 00:10:18,240
kind of component inflation so in this

00:10:16,800 --> 00:10:21,120
case if components aren't

00:10:18,240 --> 00:10:22,480
shareable uh the reuse of those

00:10:21,120 --> 00:10:24,720
components can create

00:10:22,480 --> 00:10:26,320
kind of bloat noise and poor user

00:10:24,720 --> 00:10:29,760
experience

00:10:26,320 --> 00:10:32,079
um this means that because it's so

00:10:29,760 --> 00:10:33,760
you know because these components can

00:10:32,079 --> 00:10:36,959
proliferate so easily

00:10:33,760 --> 00:10:40,399
we just end up with a lot of

00:10:36,959 --> 00:10:43,440
access noise within our user interface

00:10:40,399 --> 00:10:45,680
so common services and capabilities

00:10:43,440 --> 00:10:46,480
uh and information can just end up being

00:10:45,680 --> 00:10:49,519
repeated

00:10:46,480 --> 00:10:51,279
across lots of places

00:10:49,519 --> 00:10:53,839
a really simple example of this

00:10:51,279 --> 00:10:54,399
phenomena is the proliferation of tabs

00:10:53,839 --> 00:10:57,600
right we

00:10:54,399 --> 00:10:57,600
experienced in browsers

00:10:57,839 --> 00:11:01,279
now consider that versus repurposing of

00:11:00,480 --> 00:11:04,480
apps

00:11:01,279 --> 00:11:08,079
when we go across contexts in mobile

00:11:04,480 --> 00:11:10,480
where we we don't end up with you know

00:11:08,079 --> 00:11:11,200
20 different instances of the google

00:11:10,480 --> 00:11:15,440
maps app

00:11:11,200 --> 00:11:18,560
opening up every time we open a new map

00:11:15,440 --> 00:11:21,760
well if you're running in a browser

00:11:18,560 --> 00:11:21,760
that can very well happen

00:11:23,040 --> 00:11:29,680
another issue is discoverability

00:11:26,560 --> 00:11:30,240
when workflows are divided up into many

00:11:29,680 --> 00:11:33,200
different

00:11:30,240 --> 00:11:34,320
independent components how is an end

00:11:33,200 --> 00:11:36,480
user

00:11:34,320 --> 00:11:38,079
going to discover relevant content and

00:11:36,480 --> 00:11:40,560
functions at the right time

00:11:38,079 --> 00:11:41,120
right so you make everything into a lego

00:11:40,560 --> 00:11:43,920
brick

00:11:41,120 --> 00:11:44,959
but pretty soon your pile starts to look

00:11:43,920 --> 00:11:48,320
like this

00:11:44,959 --> 00:11:50,160
and it becomes very hard especially the

00:11:48,320 --> 00:11:54,160
more generic you get

00:11:50,160 --> 00:11:54,160
to find the right things

00:11:54,839 --> 00:12:00,000
finally um once you have everything as a

00:11:58,480 --> 00:12:03,279
micro ui

00:12:00,000 --> 00:12:06,079
where does your workflow logic live uh

00:12:03,279 --> 00:12:07,519
when you have things as monoliths uh you

00:12:06,079 --> 00:12:11,440
can have controllers that

00:12:07,519 --> 00:12:14,240
orchestrate across your monolith

00:12:11,440 --> 00:12:15,600
quite easily but when things are

00:12:14,240 --> 00:12:19,839
decoupled

00:12:15,600 --> 00:12:22,959
uh doing that orchestration uh becomes

00:12:19,839 --> 00:12:28,160
trickier and you need a mechanism that

00:12:22,959 --> 00:12:28,160
components can rely on to communicate

00:12:30,240 --> 00:12:37,200
so in summary micro ui strategies

00:12:34,160 --> 00:12:38,959
are good at disassembling

00:12:37,200 --> 00:12:40,480
monolithic applications into more

00:12:38,959 --> 00:12:44,560
flexible and personalized

00:12:40,480 --> 00:12:49,120
dashboards but

00:12:44,560 --> 00:12:51,440
creating uh multi-step workflows

00:12:49,120 --> 00:12:52,639
sharing common components enabling end

00:12:51,440 --> 00:12:54,800
user discovery

00:12:52,639 --> 00:12:56,800
and integrating second and third-party

00:12:54,800 --> 00:13:00,959
components

00:12:56,800 --> 00:13:00,959
is quite a bit more complicated

00:13:02,880 --> 00:13:08,800
so ftc3 helps us solve

00:13:06,000 --> 00:13:08,800
these problems

00:13:13,600 --> 00:13:17,360
those areas of fdc3 we talked about

00:13:16,320 --> 00:13:19,920
before

00:13:17,360 --> 00:13:20,560
bring huge amounts of value when we're

00:13:19,920 --> 00:13:23,680
working

00:13:20,560 --> 00:13:26,880
with micro uis to build uh

00:13:23,680 --> 00:13:31,120
interactive user workflows so

00:13:26,880 --> 00:13:31,120
app directory and intents

00:13:31,360 --> 00:13:37,360
solve for discoverability across

00:13:34,399 --> 00:13:38,320
applications and across uis context

00:13:37,360 --> 00:13:40,720
sharing

00:13:38,320 --> 00:13:42,240
solves for workflow integration across

00:13:40,720 --> 00:13:45,279
those uis

00:13:42,240 --> 00:13:45,600
and finally data-driven intents solves

00:13:45,279 --> 00:13:49,839
for

00:13:45,600 --> 00:13:49,839
service reuse

00:13:50,880 --> 00:13:57,440
so let's look at the first use case of

00:13:53,760 --> 00:13:57,440
connecting to the app directory

00:13:59,839 --> 00:14:05,199
so in this example we have a grid of

00:14:03,680 --> 00:14:09,040
instruments

00:14:05,199 --> 00:14:09,040
running in one application

00:14:09,600 --> 00:14:17,120
and when right-clicking on a ticker

00:14:14,399 --> 00:14:19,040
ftc 3 is going to allow us to easily

00:14:17,120 --> 00:14:20,959
search an app directory and discover

00:14:19,040 --> 00:14:24,000
the applications and intents that are

00:14:20,959 --> 00:14:27,199
relevant to that ticker

00:14:24,000 --> 00:14:30,240
you can see here you've now

00:14:27,199 --> 00:14:45,839
gotten a whole list of applications

00:14:30,240 --> 00:14:45,839
organized by intents

00:14:49,600 --> 00:14:54,480
and let's look at the code that enabled

00:14:52,800 --> 00:14:56,800
that

00:14:54,480 --> 00:14:58,720
you can see it's quite simple to

00:14:56,800 --> 00:15:01,519
implement this kind of functionality in

00:14:58,720 --> 00:15:01,519
ftc3

00:15:01,839 --> 00:15:09,600
in this case we're using a

00:15:04,959 --> 00:15:13,199
api called find intense by context

00:15:09,600 --> 00:15:14,639
which we see here we pass in a context

00:15:13,199 --> 00:15:19,360
it's going to come to us

00:15:14,639 --> 00:15:22,800
off of the grid context

00:15:19,360 --> 00:15:26,639
and we get back

00:15:22,800 --> 00:15:30,079
a this is actually

00:15:26,639 --> 00:15:32,720
it's an asynchronous response we wait

00:15:30,079 --> 00:15:35,040
um and in fact what this this is getting

00:15:32,720 --> 00:15:37,680
back a data response that we then

00:15:35,040 --> 00:15:39,600
pass into what actually is a web

00:15:37,680 --> 00:15:43,360
component that we're using here

00:15:39,600 --> 00:15:45,440
to render that menu interestingly enough

00:15:43,360 --> 00:15:48,560
one of the things that

00:15:45,440 --> 00:15:52,880
we are doing in ftc 3

00:15:48,560 --> 00:15:55,519
1.2 is making this kind of workflow even

00:15:52,880 --> 00:15:58,320
easier to implement for an application

00:15:55,519 --> 00:15:59,920
because you'll be able to pass just a

00:15:58,320 --> 00:16:04,000
single api

00:15:59,920 --> 00:16:06,800
to the desktop agent on the ftc 3 ap

00:16:04,000 --> 00:16:07,440
basically ftc 3 api provider and then

00:16:06,800 --> 00:16:10,480
they'll

00:16:07,440 --> 00:16:11,360
draw to be responsible for drawing that

00:16:10,480 --> 00:16:13,360
menu

00:16:11,360 --> 00:16:17,120
for you in this case the application

00:16:13,360 --> 00:16:17,120
itself is drawing the menu

00:16:18,959 --> 00:16:23,360
so let's go to the use case of sharing

00:16:22,160 --> 00:16:26,880
context

00:16:23,360 --> 00:16:28,959
with using channels in ftc3

00:16:26,880 --> 00:16:30,000
so once we've discovered our

00:16:28,959 --> 00:16:31,440
applications

00:16:30,000 --> 00:16:34,000
we want to be able to keep them

00:16:31,440 --> 00:16:36,000
synchronized through sharing context

00:16:34,000 --> 00:16:39,199
and there's been a lot of work that's

00:16:36,000 --> 00:16:42,480
gone into especially ftc 311

00:16:39,199 --> 00:16:46,959
to enable rich context sharing

00:16:42,480 --> 00:16:46,959
using this concept called channels

00:16:48,560 --> 00:16:53,600
so in this example here we're going to

00:16:51,440 --> 00:16:53,600
see

00:16:53,680 --> 00:16:59,440
um using the

00:16:57,040 --> 00:17:01,440
ftc3 desktop agent here to select a

00:16:59,440 --> 00:17:04,480
color channel

00:17:01,440 --> 00:17:07,600
that i'm going to put this application

00:17:04,480 --> 00:17:10,400
on i just put it onto the red channel

00:17:07,600 --> 00:17:19,839
and now i can i'll receive and be able

00:17:10,400 --> 00:17:19,839
to broadcast context over that channel

00:17:20,000 --> 00:17:25,600
and then in this example

00:17:23,520 --> 00:17:26,559
we can see that in action in a little

00:17:25,600 --> 00:17:29,440
more detail

00:17:26,559 --> 00:17:31,039
and also combine combined with intents

00:17:29,440 --> 00:17:34,240
so

00:17:31,039 --> 00:17:36,960
i'm going to again

00:17:34,240 --> 00:17:38,320
discover applications by intents for

00:17:36,960 --> 00:17:41,440
this context

00:17:38,320 --> 00:17:43,520
i open up a news application and now

00:17:41,440 --> 00:17:46,320
i'm going to put the news application

00:17:43,520 --> 00:17:49,440
onto the red channel

00:17:46,320 --> 00:17:51,200
and i'm going to move that app over to

00:17:49,440 --> 00:17:52,160
the side so you can see both these in

00:17:51,200 --> 00:17:55,440
action

00:17:52,160 --> 00:17:57,280
and i'm going to have my grid already on

00:17:55,440 --> 00:17:58,640
the red channel so as i click through

00:17:57,280 --> 00:18:00,720
new contacts

00:17:58,640 --> 00:18:04,160
it's going to reload the news with the

00:18:00,720 --> 00:18:04,160
new context i selected

00:18:05,360 --> 00:18:10,960
and you can see how doing this really

00:18:08,559 --> 00:18:14,000
enables end users to

00:18:10,960 --> 00:18:14,960
discover functionality and also to build

00:18:14,000 --> 00:18:28,000
new connections

00:18:14,960 --> 00:18:32,480
between unrelated apps

00:18:28,000 --> 00:18:32,480
this is really okay so

00:18:34,320 --> 00:18:38,880
let's look at now taking the channel

00:18:37,360 --> 00:18:42,400
concept

00:18:38,880 --> 00:18:43,039
and publishing data with channels so

00:18:42,400 --> 00:18:46,160
taking

00:18:43,039 --> 00:18:49,360
ftc3 channels we can take that

00:18:46,160 --> 00:18:51,679
color channel example but there's also

00:18:49,360 --> 00:18:52,880
another kind of channel in ftc3 that's

00:18:51,679 --> 00:18:56,960
called an app

00:18:52,880 --> 00:19:00,080
channel that essentially allows

00:18:56,960 --> 00:19:04,160
the creation of uh we can think of as

00:19:00,080 --> 00:19:07,799
private channels for applications

00:19:04,160 --> 00:19:10,960
so we can actually adapt

00:19:07,799 --> 00:19:14,080
that uh api

00:19:10,960 --> 00:19:17,120
excuse me that api

00:19:14,080 --> 00:19:21,039
to allow us to

00:19:17,120 --> 00:19:24,799
publish data to other applications

00:19:21,039 --> 00:19:29,919
using those channels

00:19:24,799 --> 00:19:33,039
so in this video you're going to see

00:19:29,919 --> 00:19:34,000
this is the ftc3 channel manager demo

00:19:33,039 --> 00:19:37,520
app

00:19:34,000 --> 00:19:40,320
that i've now created

00:19:37,520 --> 00:19:41,360
a a private channel or app channel

00:19:40,320 --> 00:19:43,360
called my channel

00:19:41,360 --> 00:19:45,360
on both these apps so they both have

00:19:43,360 --> 00:19:48,559
created the same

00:19:45,360 --> 00:19:52,559
channel so they're synchronized to it

00:19:48,559 --> 00:19:55,679
and they are now uh

00:19:52,559 --> 00:19:58,160
exchanging context

00:19:55,679 --> 00:20:00,960
back and forth over that channel so this

00:19:58,160 --> 00:20:00,960
could be used

00:20:01,200 --> 00:20:06,000
to create this kind of private

00:20:02,799 --> 00:20:10,240
interaction but it could also be used

00:20:06,000 --> 00:20:13,360
to broadcast uh or to publish

00:20:10,240 --> 00:20:16,400
let's say streaming updates

00:20:13,360 --> 00:20:18,559
uh for some data over

00:20:16,400 --> 00:20:21,840
a specific context channel right so

00:20:18,559 --> 00:20:24,080
there's it's a very flexible api

00:20:21,840 --> 00:20:25,039
that allows you to do a number of

00:20:24,080 --> 00:20:27,520
different

00:20:25,039 --> 00:20:27,520
things

00:20:29,679 --> 00:20:35,520
so this is what that api

00:20:33,760 --> 00:20:37,679
looks like so this is some of the code

00:20:35,520 --> 00:20:41,600
that went into that app

00:20:37,679 --> 00:20:43,760
again it's not a whole lot of code to

00:20:41,600 --> 00:20:47,280
implement ftc3

00:20:43,760 --> 00:20:49,440
so in this case when i clicked on

00:20:47,280 --> 00:20:50,880
the button to create the channel it's

00:20:49,440 --> 00:20:53,679
using the ftc3

00:20:50,880 --> 00:20:54,400
get or create channel api and i pass in

00:20:53,679 --> 00:20:58,240
a name

00:20:54,400 --> 00:21:02,159
so this is going to either return

00:20:58,240 --> 00:21:03,200
that my channel app channel if it

00:21:02,159 --> 00:21:04,960
already exists

00:21:03,200 --> 00:21:07,120
if it doesn't it's going to create it

00:21:04,960 --> 00:21:10,640
and then return it to me

00:21:07,120 --> 00:21:12,799
once i have a channel object i can now

00:21:10,640 --> 00:21:15,120
both add a context listener to it i can

00:21:12,799 --> 00:21:18,799
also broadcast over it

00:21:15,120 --> 00:21:21,440
um and in this case you see the code for

00:21:18,799 --> 00:21:23,200
me to broadcast i'm sorry to add a

00:21:21,440 --> 00:21:27,200
context listener onto it

00:21:23,200 --> 00:21:29,760
um and then once i get a context on it i

00:21:27,200 --> 00:21:34,240
can just respond to that

00:21:29,760 --> 00:21:34,240
the uh so

00:21:37,520 --> 00:21:43,520
this is great but there are problems

00:21:41,440 --> 00:21:45,360
with this kind of pattern using app

00:21:43,520 --> 00:21:50,000
channels

00:21:45,360 --> 00:21:53,840
if we wanted to build a kind of client

00:21:50,000 --> 00:21:57,360
provider relationship

00:21:53,840 --> 00:21:58,000
so where an app maybe is streaming data

00:21:57,360 --> 00:22:02,080
out to

00:21:58,000 --> 00:22:04,240
a number of subscriber apps one

00:22:02,080 --> 00:22:05,679
there's no service discovery here for

00:22:04,240 --> 00:22:08,880
for app channels

00:22:05,679 --> 00:22:10,640
uh app channels because actually because

00:22:08,880 --> 00:22:13,840
of number two because they rely on

00:22:10,640 --> 00:22:17,440
security through obscurity

00:22:13,840 --> 00:22:20,320
there's no mechanism for

00:22:17,440 --> 00:22:20,880
publishing the identity of those

00:22:20,320 --> 00:22:24,159
channels

00:22:20,880 --> 00:22:28,640
or the built-in deft ec3

00:22:24,159 --> 00:22:31,200
or to uh sort of discover

00:22:28,640 --> 00:22:31,840
that through uh another mechanism like

00:22:31,200 --> 00:22:34,559
we have

00:22:31,840 --> 00:22:36,000
for example for intents where i can say

00:22:34,559 --> 00:22:38,720
i want to view a chart

00:22:36,000 --> 00:22:40,240
and i can get a list provided by the

00:22:38,720 --> 00:22:43,280
desktop agent

00:22:40,240 --> 00:22:46,559
of applications that uh

00:22:43,280 --> 00:22:49,919
support that functionality

00:22:46,559 --> 00:22:52,799
um this also risks

00:22:49,919 --> 00:22:53,200
fragmentation of standards so if we

00:22:52,799 --> 00:22:56,400
create

00:22:53,200 --> 00:22:59,520
lots of kind of private channels

00:22:56,400 --> 00:23:01,200
to do various functionalities across our

00:22:59,520 --> 00:23:04,559
applications

00:23:01,200 --> 00:23:07,280
chances are it's going to be very hard

00:23:04,559 --> 00:23:08,159
to upstream anything we're doing there

00:23:07,280 --> 00:23:11,120
back into

00:23:08,159 --> 00:23:13,440
the standard it's not really it's not

00:23:11,120 --> 00:23:15,520
really helping advance a common language

00:23:13,440 --> 00:23:19,200
it's really creating more opportunity

00:23:15,520 --> 00:23:22,400
for just private conversations to happen

00:23:19,200 --> 00:23:24,559
and then finally it

00:23:22,400 --> 00:23:26,480
really creates a lot of need for

00:23:24,559 --> 00:23:28,400
handshakes and life cycle management so

00:23:26,480 --> 00:23:31,039
the example we just looked at

00:23:28,400 --> 00:23:32,880
is very simple we're just broadcasting

00:23:31,039 --> 00:23:36,000
context back and forth but

00:23:32,880 --> 00:23:39,280
in a real example if i wanted to

00:23:36,000 --> 00:23:42,400
like share a data feed to something

00:23:39,280 --> 00:23:43,200
i need to know uh first of all i need to

00:23:42,400 --> 00:23:46,799
be able to

00:23:43,200 --> 00:23:48,640
initiate the uh back and forth between

00:23:46,799 --> 00:23:52,559
two applications

00:23:48,640 --> 00:23:54,720
and then um

00:23:52,559 --> 00:23:55,840
i would need to know when an application

00:23:54,720 --> 00:23:59,039
goes away

00:23:55,840 --> 00:24:02,159
um if it's uh

00:23:59,039 --> 00:24:05,360
when it's loaded etc so so

00:24:02,159 --> 00:24:07,200
there's uh really no space

00:24:05,360 --> 00:24:10,000
in that api for that kind of

00:24:07,200 --> 00:24:10,000
functionality

00:24:11,279 --> 00:24:17,120
so this leads us to

00:24:14,400 --> 00:24:18,159
data driven intents which is a proposal

00:24:17,120 --> 00:24:21,279
that

00:24:18,159 --> 00:24:23,360
actually we've discussed for quite some

00:24:21,279 --> 00:24:26,000
time on and off

00:24:23,360 --> 00:24:27,360
within the ftc iii community and there's

00:24:26,000 --> 00:24:32,240
uh

00:24:27,360 --> 00:24:36,480
we're now been working on a a formal pr

00:24:32,240 --> 00:24:38,960
around this for the 1.2

00:24:36,480 --> 00:24:38,960
standard

00:24:39,679 --> 00:24:45,840
so what is the proposal

00:24:43,840 --> 00:24:47,840
at the heart of the id of data-driven

00:24:45,840 --> 00:24:50,960
intents is

00:24:47,840 --> 00:24:54,960
is that you can have an intent

00:24:50,960 --> 00:24:58,400
that's going to return data or initiate

00:24:54,960 --> 00:24:58,400
a sort of data stream

00:24:58,640 --> 00:25:01,919
as opposed to the intents that have

00:25:01,120 --> 00:25:05,360
existed in

00:25:01,919 --> 00:25:07,919
ftc three so far which have been

00:25:05,360 --> 00:25:09,520
largely kind of fire and forget you say

00:25:07,919 --> 00:25:13,520
i want to view a chart

00:25:09,520 --> 00:25:16,400
erase that send a context over to

00:25:13,520 --> 00:25:17,679
some application that gets resolved to

00:25:16,400 --> 00:25:20,480
context goes over

00:25:17,679 --> 00:25:21,520
and you never hear from that app again

00:25:20,480 --> 00:25:25,520
um

00:25:21,520 --> 00:25:29,039
so that has its place

00:25:25,520 --> 00:25:32,080
but it's also fairly limited

00:25:29,039 --> 00:25:33,840
so at the heart of the proposal for

00:25:32,080 --> 00:25:35,919
data-driven intents

00:25:33,840 --> 00:25:37,120
is really the concept of the app

00:25:35,919 --> 00:25:40,320
instance

00:25:37,120 --> 00:25:43,600
that we can get

00:25:40,320 --> 00:25:46,640
a reference to an app instance

00:25:43,600 --> 00:25:48,960
as part of a

00:25:46,640 --> 00:25:50,400
resolution of an intent or an exchange

00:25:48,960 --> 00:25:53,520
of context data

00:25:50,400 --> 00:25:54,000
and that i can as an application use

00:25:53,520 --> 00:25:58,159
that

00:25:54,000 --> 00:26:02,640
app instance identifier

00:25:58,159 --> 00:26:05,919
to then either listen to context events

00:26:02,640 --> 00:26:10,480
from the app instance or to

00:26:05,919 --> 00:26:14,559
broadcast additional context to it

00:26:10,480 --> 00:26:17,039
so again the app instance

00:26:14,559 --> 00:26:17,679
will provide a reference to a specific

00:26:17,039 --> 00:26:20,720
app

00:26:17,679 --> 00:26:23,440
a specific app instance not the app as a

00:26:20,720 --> 00:26:23,440
kind of class

00:26:23,520 --> 00:26:27,760
it can be created from a source

00:26:24,960 --> 00:26:28,400
identifier now the source identifier was

00:26:27,760 --> 00:26:32,159
something

00:26:28,400 --> 00:26:34,400
that existed in ftc 310

00:26:32,159 --> 00:26:35,440
as part of the intent resolution object

00:26:34,400 --> 00:26:37,520
so after

00:26:35,440 --> 00:26:40,080
you've raised an intent it gets resolved

00:26:37,520 --> 00:26:43,039
and routed to some other application

00:26:40,080 --> 00:26:43,840
in the resolution you get back in the

00:26:43,039 --> 00:26:47,279
api

00:26:43,840 --> 00:26:52,080
you will get a source but this has been

00:26:47,279 --> 00:26:53,760
fairly vague what it is um

00:26:52,080 --> 00:26:56,000
with this update to the spec we're

00:26:53,760 --> 00:26:59,039
saying that a source identifier

00:26:56,000 --> 00:27:01,600
is a identifier a token

00:26:59,039 --> 00:27:02,480
i can use to return back to the desktop

00:27:01,600 --> 00:27:05,279
agent

00:27:02,480 --> 00:27:06,159
and then it will give me a reference to

00:27:05,279 --> 00:27:09,120
that specific

00:27:06,159 --> 00:27:10,799
application instance based on that on

00:27:09,120 --> 00:27:13,840
that token

00:27:10,799 --> 00:27:15,919
um so

00:27:13,840 --> 00:27:17,200
and that will be returned not just from

00:27:15,919 --> 00:27:19,440
intent resolution

00:27:17,200 --> 00:27:22,559
but also from context messages so if i

00:27:19,440 --> 00:27:26,000
get context broadcast to me

00:27:22,559 --> 00:27:29,200
there will be a source token

00:27:26,000 --> 00:27:31,679
associated with that message that

00:27:29,200 --> 00:27:32,960
i can then use if i receive context from

00:27:31,679 --> 00:27:35,120
another application

00:27:32,960 --> 00:27:37,120
to get a reference back to the

00:27:35,120 --> 00:27:40,720
application that

00:27:37,120 --> 00:27:40,720
sent me that context

00:27:41,840 --> 00:27:48,159
the uh app instance object itself will

00:27:45,840 --> 00:27:49,360
support both broadcast and on context

00:27:48,159 --> 00:27:53,200
listener methods

00:27:49,360 --> 00:27:55,600
as well as life cycle events so you'll

00:27:53,200 --> 00:27:56,640
be able to listen to the status of that

00:27:55,600 --> 00:28:00,000
instance

00:27:56,640 --> 00:28:03,840
and know when it's gone away

00:28:00,000 --> 00:28:03,840
and when it's loaded

00:28:05,279 --> 00:28:12,399
so let's look at the uh draft

00:28:08,480 --> 00:28:16,080
type for app instance for a second

00:28:12,399 --> 00:28:19,120
just to illustrate uh

00:28:16,080 --> 00:28:22,000
the the previous points

00:28:19,120 --> 00:28:22,919
uh again this is a draft it says

00:28:22,000 --> 00:28:26,080
essentially

00:28:22,919 --> 00:28:30,080
pre-pr um

00:28:26,080 --> 00:28:33,919
meaning that there's uh this code exists

00:28:30,080 --> 00:28:36,960
in a on my fork to be honest today

00:28:33,919 --> 00:28:40,960
but it will be uh there will be a pr

00:28:36,960 --> 00:28:44,480
uh coming soon uh

00:28:40,960 --> 00:28:46,960
you can see that we have uh the

00:28:44,480 --> 00:28:48,240
standard interfaces for add context

00:28:46,960 --> 00:28:51,120
listener

00:28:48,240 --> 00:28:52,080
you can listen both uh you can add a

00:28:51,120 --> 00:28:54,159
listener about just

00:28:52,080 --> 00:28:56,080
adding a function or using a context

00:28:54,159 --> 00:28:59,120
type filter

00:28:56,080 --> 00:29:01,039
um you can broadcast

00:28:59,120 --> 00:29:02,480
uh and then there's this on status

00:29:01,039 --> 00:29:05,520
change

00:29:02,480 --> 00:29:07,679
which um supports

00:29:05,520 --> 00:29:08,720
a handler can be passed into it and

00:29:07,679 --> 00:29:12,000
there is

00:29:08,720 --> 00:29:16,000
a status uh property that can be

00:29:12,000 --> 00:29:16,000
ready loading or unregistered

00:29:18,720 --> 00:29:25,679
so let's go to a demo

00:29:22,399 --> 00:29:28,880
you can see uh what this looks like

00:29:25,679 --> 00:29:32,640
this is uh built using

00:29:28,880 --> 00:29:36,399
some tooling from the genesis platform

00:29:32,640 --> 00:29:39,840
uh and then using the uh

00:29:36,399 --> 00:29:42,960
ftc3 desktop agent project

00:29:39,840 --> 00:29:46,799
to model out the functionality

00:29:42,960 --> 00:29:50,640
that's being proposed so in this case

00:29:46,799 --> 00:29:51,120
i've got two client applications on the

00:29:50,640 --> 00:29:52,840
left

00:29:51,120 --> 00:29:54,880
i'm just going to pause that for a

00:29:52,840 --> 00:29:59,039
second and

00:29:54,880 --> 00:30:00,320
a three provider applications on the

00:29:59,039 --> 00:30:03,360
right

00:30:00,320 --> 00:30:06,880
the provider applications are providing

00:30:03,360 --> 00:30:11,200
uh well it's all mock data but

00:30:06,880 --> 00:30:13,279
uh fx uh pricing on currency pairs

00:30:11,200 --> 00:30:14,799
from each from a different liquidity

00:30:13,279 --> 00:30:18,000
provider

00:30:14,799 --> 00:30:19,200
and then the client applications on the

00:30:18,000 --> 00:30:22,640
left

00:30:19,200 --> 00:30:26,240
are going to uh create

00:30:22,640 --> 00:30:27,600
uh raise intents for a specific currency

00:30:26,240 --> 00:30:30,240
pair

00:30:27,600 --> 00:30:32,799
uh actually send over an instrument uh

00:30:30,240 --> 00:30:36,399
context for that

00:30:32,799 --> 00:30:39,200
um to get pricing for that currency pair

00:30:36,399 --> 00:30:40,159
and then what's going to happen is that

00:30:39,200 --> 00:30:43,679
since there are

00:30:40,159 --> 00:30:47,200
multiple providers of pricing

00:30:43,679 --> 00:30:50,320
running in this desktop

00:30:47,200 --> 00:30:51,440
agent instance the end user will get

00:30:50,320 --> 00:30:53,760
prompted

00:30:51,440 --> 00:30:56,640
for which provider they want to get the

00:30:53,760 --> 00:30:56,640
pricing from

00:31:00,399 --> 00:31:06,960
so there is our intent resolver

00:31:04,159 --> 00:31:09,440
we've chosen bnp and we start getting

00:31:06,960 --> 00:31:11,600
pricing back and you'll see that also

00:31:09,440 --> 00:31:13,360
pricing should update in this case we've

00:31:11,600 --> 00:31:16,399
now chosen city

00:31:13,360 --> 00:31:18,480
for the other currency pair and we can

00:31:16,399 --> 00:31:20,240
actually switch

00:31:18,480 --> 00:31:21,840
uh to a different provider we're gonna

00:31:20,240 --> 00:31:25,440
switch to db here

00:31:21,840 --> 00:31:28,799
and you can see the pricing gets updated

00:31:25,440 --> 00:31:33,039
um so that

00:31:28,799 --> 00:31:36,640
is data driven intents

00:31:33,039 --> 00:31:39,919
uh going across ftc3

00:31:36,640 --> 00:31:43,919
again we have uh

00:31:39,919 --> 00:31:46,559
two different clients that are

00:31:43,919 --> 00:31:48,240
raising intents to request pricing

00:31:46,559 --> 00:31:52,399
they're presented with options

00:31:48,240 --> 00:31:52,399
of different registered

00:31:52,480 --> 00:31:56,640
providers for that from different

00:31:54,799 --> 00:32:01,600
liquidity sources

00:31:56,640 --> 00:32:04,720
and once a

00:32:01,600 --> 00:32:05,679
provider is chosen by the end user that

00:32:04,720 --> 00:32:07,840
application now

00:32:05,679 --> 00:32:09,840
listens to context updates from the

00:32:07,840 --> 00:32:11,039
provider the provider is sending those

00:32:09,840 --> 00:32:13,840
updates

00:32:11,039 --> 00:32:14,880
specifically to that client so they

00:32:13,840 --> 00:32:19,039
they're forming

00:32:14,880 --> 00:32:22,000
a a one-to-one relationship

00:32:19,039 --> 00:32:22,000
with that handshake

00:32:22,960 --> 00:32:26,840
so let's look a little bit what that

00:32:24,720 --> 00:32:29,760
code looks like

00:32:26,840 --> 00:32:32,880
so this is uh

00:32:29,760 --> 00:32:36,640
the code for within

00:32:32,880 --> 00:32:40,159
the uh data provider

00:32:36,640 --> 00:32:42,240
they are handling the intent

00:32:40,159 --> 00:32:44,080
so at the top here you can see that

00:32:42,240 --> 00:32:48,640
we're using ftc three add

00:32:44,080 --> 00:32:51,360
intent listener we've created a um

00:32:48,640 --> 00:32:52,559
in this case just a genesis name spaced

00:32:51,360 --> 00:32:55,440
um

00:32:52,559 --> 00:32:58,559
uh intent name that's you know just a

00:32:55,440 --> 00:33:01,279
working title find fx price

00:32:58,559 --> 00:33:02,240
um and we're passing in a handler which

00:33:01,279 --> 00:33:06,799
is this uh

00:33:02,240 --> 00:33:10,640
handle price intent function within that

00:33:06,799 --> 00:33:14,080
um what's interesting is we have this

00:33:10,640 --> 00:33:17,200
we um get

00:33:14,080 --> 00:33:18,559
from the intent the source is handed is

00:33:17,200 --> 00:33:22,880
passed into us

00:33:18,559 --> 00:33:27,120
from the intent handler so this is new

00:33:22,880 --> 00:33:30,320
and from this source um

00:33:27,120 --> 00:33:33,360
we are resolving that

00:33:30,320 --> 00:33:37,200
into an app instance

00:33:33,360 --> 00:33:40,880
uh and then we do some things

00:33:37,200 --> 00:33:40,880
to get data

00:33:41,279 --> 00:33:48,480
and we also do some things to um

00:33:44,799 --> 00:33:49,120
to create uh to push the last value cash

00:33:48,480 --> 00:33:53,840
when

00:33:49,120 --> 00:33:53,840
the subscriptions first made

00:33:58,159 --> 00:34:03,600
so as a service provider

00:34:04,320 --> 00:34:08,000
when we want to when we get our data

00:34:06,640 --> 00:34:10,800
update from

00:34:08,000 --> 00:34:10,800
the back end

00:34:11,119 --> 00:34:20,079
uh we now um are going to

00:34:15,919 --> 00:34:23,919
so we've basically taken our

00:34:20,079 --> 00:34:28,000
instances and we've created a

00:34:23,919 --> 00:34:33,200
map of them called subscribers

00:34:28,000 --> 00:34:36,720
and then we get an update for specific

00:34:33,200 --> 00:34:39,359
a currency pair we are now

00:34:36,720 --> 00:34:40,720
going to push that to any subscribers

00:34:39,359 --> 00:34:44,079
for the currency pair

00:34:40,720 --> 00:34:46,079
obviously there's a bunch of uh

00:34:44,079 --> 00:34:48,159
details that are fudged here for the

00:34:46,079 --> 00:34:50,720
demo but

00:34:48,159 --> 00:34:51,280
you know you can see the structure of

00:34:50,720 --> 00:34:55,280
how this

00:34:51,280 --> 00:34:58,160
would work um

00:34:55,280 --> 00:35:00,000
when we get our subscriber we're just

00:34:58,160 --> 00:35:03,200
going to

00:35:00,000 --> 00:35:04,160
we've basically put the instances into

00:35:03,200 --> 00:35:06,720
the map that we

00:35:04,160 --> 00:35:07,760
resolved originally when the handshake

00:35:06,720 --> 00:35:09,280
was made

00:35:07,760 --> 00:35:12,320
and now we're just going to broadcast

00:35:09,280 --> 00:35:12,320
the new context

00:35:12,560 --> 00:35:17,280
back to that instance once again i think

00:35:15,599 --> 00:35:19,520
it's important to point out that

00:35:17,280 --> 00:35:20,480
we're not doing a broadcast over a

00:35:19,520 --> 00:35:22,800
channel that

00:35:20,480 --> 00:35:24,640
anything could listen to we're doing a

00:35:22,800 --> 00:35:25,520
broadcast specifically to that instance

00:35:24,640 --> 00:35:28,839
so it's only

00:35:25,520 --> 00:35:30,240
it's a it's a direct message to that

00:35:28,839 --> 00:35:33,359
instance

00:35:30,240 --> 00:35:37,359
um which allows kind of the space

00:35:33,359 --> 00:35:40,480
for a desktop agent or for an app

00:35:37,359 --> 00:35:42,800
to provide uh real real

00:35:40,480 --> 00:35:44,640
privacy around the data and how it's

00:35:42,800 --> 00:35:48,320
going to be routed or if

00:35:44,640 --> 00:35:49,119
if a a application instance is even

00:35:48,320 --> 00:35:53,839
going to be

00:35:49,119 --> 00:35:53,839
allowed to connect to the provider

00:35:55,520 --> 00:36:01,040
so this is what the code for actually

00:35:58,960 --> 00:36:02,400
raising the data intent looks like from

00:36:01,040 --> 00:36:05,440
the client

00:36:02,400 --> 00:36:06,160
um and again this should look pretty

00:36:05,440 --> 00:36:09,119
familiar

00:36:06,160 --> 00:36:10,640
we're calling ftc3 raise intent get a

00:36:09,119 --> 00:36:13,040
results

00:36:10,640 --> 00:36:14,640
uh what's new here is that once we get

00:36:13,040 --> 00:36:17,920
the result

00:36:14,640 --> 00:36:19,760
we are um using the source property the

00:36:17,920 --> 00:36:21,040
result which has always been there it's

00:36:19,760 --> 00:36:22,880
just that we haven't really been able to

00:36:21,040 --> 00:36:26,079
do very much with it

00:36:22,880 --> 00:36:29,359
and we are getting an app instance

00:36:26,079 --> 00:36:33,040
and then once we get the app instance

00:36:29,359 --> 00:36:36,160
uh well we're doing some things to

00:36:33,040 --> 00:36:37,520
resubscribe to uh things that we only

00:36:36,160 --> 00:36:40,640
are listening to

00:36:37,520 --> 00:36:42,880
one feed at a time and then here we're

00:36:40,640 --> 00:36:47,440
going to add a context listener on that

00:36:42,880 --> 00:36:51,839
instance itself for the update fx price

00:36:47,440 --> 00:36:54,000
uh context and again we're listening

00:36:51,839 --> 00:36:56,560
just to the source it's a direct

00:36:54,000 --> 00:36:56,560
connection

00:36:56,720 --> 00:37:02,000
and then we're using that to update our

00:36:59,520 --> 00:37:02,000
ui

00:37:03,839 --> 00:37:09,839
so what's next with all this

00:37:07,440 --> 00:37:09,839
um

00:37:10,480 --> 00:37:16,000
l caps are really accelerating the trend

00:37:13,839 --> 00:37:17,920
towards greater reusability and

00:37:16,000 --> 00:37:20,960
composability of back ends

00:37:17,920 --> 00:37:22,720
and front ends and that's unlocking

00:37:20,960 --> 00:37:24,400
enormous value

00:37:22,720 --> 00:37:26,720
that's because we're delivering high

00:37:24,400 --> 00:37:28,800
quality applications at an even faster

00:37:26,720 --> 00:37:31,359
pace

00:37:28,800 --> 00:37:33,760
ftc 3 fits into this whole story because

00:37:31,359 --> 00:37:35,839
it provides a wealth of tools

00:37:33,760 --> 00:37:37,839
that make user experience and

00:37:35,839 --> 00:37:39,599
componentize workflows

00:37:37,839 --> 00:37:41,520
even more personal intuitive and

00:37:39,599 --> 00:37:44,480
effective

00:37:41,520 --> 00:37:45,680
uh data driven intense i believe

00:37:44,480 --> 00:37:49,599
promises to be

00:37:45,680 --> 00:37:52,160
a really critical addition to this

00:37:49,599 --> 00:37:52,160
toolkit

00:37:53,599 --> 00:38:00,079
so contribute to ftc3

00:37:58,079 --> 00:38:01,680
uh there are a lot of different ways to

00:38:00,079 --> 00:38:06,240
get involved

00:38:01,680 --> 00:38:10,079
i first step go to the github site

00:38:06,240 --> 00:38:12,240
github finos ftc3 there's a

00:38:10,079 --> 00:38:13,280
huge amount of information there and of

00:38:12,240 --> 00:38:16,000
course

00:38:13,280 --> 00:38:16,720
you can see all the code you want to see

00:38:16,000 --> 00:38:19,440
the code

00:38:16,720 --> 00:38:21,520
for the desktop agent which was used in

00:38:19,440 --> 00:38:25,680
all these demos

00:38:21,520 --> 00:38:25,680
and use the code contribute to the code

00:38:26,160 --> 00:38:34,000
it's also a finnos

00:38:30,240 --> 00:38:35,839
open source project this allows you to

00:38:34,000 --> 00:38:39,200
run a chrome extension

00:38:35,839 --> 00:38:39,839
that fully implements fdc3 it goes

00:38:39,200 --> 00:38:43,599
against

00:38:39,839 --> 00:38:47,040
a app directory that is

00:38:43,599 --> 00:38:48,400
public and you can actually swap it out

00:38:47,040 --> 00:38:50,160
to your own app directory

00:38:48,400 --> 00:38:52,079
and once again all the code's open

00:38:50,160 --> 00:38:55,359
source so

00:38:52,079 --> 00:38:58,079
feel free to fork to make prs

00:38:55,359 --> 00:38:59,520
um and contribute it's a really great

00:38:58,079 --> 00:39:02,720
way to

00:38:59,520 --> 00:39:07,119
get ftc 3 up and running fast

00:39:02,720 --> 00:39:11,680
and also to be able to model quickly

00:39:07,119 --> 00:39:15,599
new ideas in ftc 3 like this one

00:39:11,680 --> 00:39:19,200
subscribe to the meetings calendar so

00:39:15,599 --> 00:39:23,359
ftc 3 holds a

00:39:19,200 --> 00:39:26,240
a standards uh working group meeting

00:39:23,359 --> 00:39:28,480
every four weeks you can find the

00:39:26,240 --> 00:39:31,599
information on that there

00:39:28,480 --> 00:39:34,480
if you are interested in helping just

00:39:31,599 --> 00:39:35,280
contributing from a project management

00:39:34,480 --> 00:39:38,400
aspect or

00:39:35,280 --> 00:39:41,200
product management aspect there's also

00:39:38,400 --> 00:39:44,000
our project management committee or pmc

00:39:41,200 --> 00:39:47,280
that meets every two weeks

00:39:44,000 --> 00:39:49,280
um and then finally you can always join

00:39:47,280 --> 00:39:52,480
the general lists

00:39:49,280 --> 00:39:55,280
send emails there for information and

00:39:52,480 --> 00:39:56,160
you can always reach out directly to me

00:39:55,280 --> 00:39:58,800
or other

00:39:56,160 --> 00:39:59,440
uh members the ftc three group if you

00:39:58,800 --> 00:40:03,359
have

00:39:59,440 --> 00:40:06,160
any questions at all are just unsure of

00:40:03,359 --> 00:40:07,599
where to get involved first but there's

00:40:06,160 --> 00:40:11,119
a lot going on

00:40:07,599 --> 00:40:14,400
and uh we're a friendly group

00:40:11,119 --> 00:40:18,720
uh so thank you very much

00:40:14,400 --> 00:40:18,720
for your time and

00:40:19,599 --> 00:40:34,240
i hope to see you on the

00:40:22,800 --> 00:40:34,240

YouTube URL: https://www.youtube.com/watch?v=s_CzIRXtBH0


