Title: Securely Connecting Financial Workloads in Kubernetes: Three Real-world Examples
Publication date: 2020-11-20
Playlist: Open Source Strategy Forum 2020
Description: 
	Securely Connecting Financial Workloads in Kubernetes: Three Real-world Examples - Neela Jacques & Dan Wendlandt, Isovalent
Captions: 
	00:00:06,000 --> 00:00:09,840
hello everyone my name is dan willman

00:00:08,400 --> 00:00:11,920
thanks for coming to our talk where

00:00:09,840 --> 00:00:13,679
we'll be talking about running financial

00:00:11,920 --> 00:00:15,040
workloads in kubernetes

00:00:13,679 --> 00:00:16,720
now you're probably already familiar

00:00:15,040 --> 00:00:18,320
with what kubernetes is and you've heard

00:00:16,720 --> 00:00:19,760
it a bunch of times

00:00:18,320 --> 00:00:21,760
so we're not really going to focus so

00:00:19,760 --> 00:00:22,480
much on what kubernetes is but more

00:00:21,760 --> 00:00:25,439
about the

00:00:22,480 --> 00:00:27,199
specific challenges that customers face

00:00:25,439 --> 00:00:28,720
when they're taking financial workloads

00:00:27,199 --> 00:00:30,000
and running them on kubernetes

00:00:28,720 --> 00:00:32,399
and we're going to drive it by going

00:00:30,000 --> 00:00:35,200
through three real world examples

00:00:32,399 --> 00:00:36,640
so a bit about me i'm ceo and co-founder

00:00:35,200 --> 00:00:39,600
of isovalent

00:00:36,640 --> 00:00:40,960
um and my background for the better part

00:00:39,600 --> 00:00:43,120
of the last 15 years

00:00:40,960 --> 00:00:45,360
along with my co-founder thomas graf has

00:00:43,120 --> 00:00:47,680
been in linux networking and security

00:00:45,360 --> 00:00:49,600
working in the kernel working on

00:00:47,680 --> 00:00:51,280
technologies like open vswitch

00:00:49,600 --> 00:00:53,039
i was one of the founding employees at a

00:00:51,280 --> 00:00:54,000
company called nicera which built open

00:00:53,039 --> 00:00:56,160
vswitch

00:00:54,000 --> 00:00:58,800
and was later acquired by vmware to

00:00:56,160 --> 00:01:01,199
become vmware nsx

00:00:58,800 --> 00:01:02,079
and hi my name is niela jacques some of

00:01:01,199 --> 00:01:05,280
you may know me

00:01:02,079 --> 00:01:08,159
as the former executive director of the

00:01:05,280 --> 00:01:09,840
open daylight project where i was

00:01:08,159 --> 00:01:12,320
working with a number of large

00:01:09,840 --> 00:01:14,080
financials who are really keen to bring

00:01:12,320 --> 00:01:17,280
greater programmability

00:01:14,080 --> 00:01:19,840
to the network most recently i was at

00:01:17,280 --> 00:01:21,119
barracuda networks working on more of

00:01:19,840 --> 00:01:24,240
the security part

00:01:21,119 --> 00:01:25,920
of the network what i want to do is

00:01:24,240 --> 00:01:27,840
jump right in to tell you a little bit

00:01:25,920 --> 00:01:30,479
about i surveillance who we are

00:01:27,840 --> 00:01:32,240
and then we'll dive in to the underlying

00:01:30,479 --> 00:01:35,920
technologies

00:01:32,240 --> 00:01:38,479
so we are a silicon valley venture-based

00:01:35,920 --> 00:01:39,439
startup we're very much an open source

00:01:38,479 --> 00:01:42,560
company

00:01:39,439 --> 00:01:42,960
and we maintain two really uh key open

00:01:42,560 --> 00:01:44,799
source

00:01:42,960 --> 00:01:46,799
projects as well as contribute to a

00:01:44,799 --> 00:01:48,479
couple others and we'll talk a lot more

00:01:46,799 --> 00:01:51,439
about those in the presentation

00:01:48,479 --> 00:01:53,360
to begin with though isovenwood is most

00:01:51,439 --> 00:01:56,159
often associated with

00:01:53,360 --> 00:01:57,119
our flagship open source project

00:01:56,159 --> 00:01:59,600
psyllium

00:01:57,119 --> 00:02:00,399
what is psyllium psyllium is an ebpf

00:01:59,600 --> 00:02:02,640
powered

00:02:00,399 --> 00:02:03,680
networking observability and security

00:02:02,640 --> 00:02:06,159
technology

00:02:03,680 --> 00:02:07,280
built specifically for the cloud native

00:02:06,159 --> 00:02:10,800
world

00:02:07,280 --> 00:02:14,239
so but what is ebpf well ebpf

00:02:10,800 --> 00:02:17,440
has been described as giving linux

00:02:14,239 --> 00:02:19,120
superpowers and what ebpf is and we'll

00:02:17,440 --> 00:02:20,800
talk a lot more about it as a way to

00:02:19,120 --> 00:02:23,120
securely embed

00:02:20,800 --> 00:02:24,319
programs into the linux kernel this is

00:02:23,120 --> 00:02:26,800
incredibly useful

00:02:24,319 --> 00:02:28,319
for things like observability uh for

00:02:26,800 --> 00:02:30,319
things like tracing as well as

00:02:28,319 --> 00:02:32,800
networking insecurity

00:02:30,319 --> 00:02:33,760
we're also big believers in kubernetes

00:02:32,800 --> 00:02:36,000
of course that's why we're

00:02:33,760 --> 00:02:36,800
having this talk and we leverage the

00:02:36,000 --> 00:02:38,640
envoy

00:02:36,800 --> 00:02:40,239
project as part of our psyllium

00:02:38,640 --> 00:02:42,720
solutions you see in the diagram in the

00:02:40,239 --> 00:02:42,720
middle here

00:02:45,280 --> 00:02:48,000
so i think just to start off this

00:02:46,720 --> 00:02:49,360
presentation i think one thing that's

00:02:48,000 --> 00:02:51,840
clear to all of us

00:02:49,360 --> 00:02:54,080
is that the world of financials has been

00:02:51,840 --> 00:02:55,360
changing rapidly over the last few years

00:02:54,080 --> 00:02:57,200
you know if we think back

00:02:55,360 --> 00:02:59,519
uh still we see it when we walk down

00:02:57,200 --> 00:02:59,920
main street banks typically have these

00:02:59,519 --> 00:03:01,440
big

00:02:59,920 --> 00:03:03,920
beautiful buildings because in the old

00:03:01,440 --> 00:03:05,760
world differentiation was really about

00:03:03,920 --> 00:03:07,599
assets and security

00:03:05,760 --> 00:03:09,599
a bank is someone that you want to trust

00:03:07,599 --> 00:03:11,280
well clearly that's still important

00:03:09,599 --> 00:03:13,519
but really now the basis of

00:03:11,280 --> 00:03:14,879
differentiation for a financial has

00:03:13,519 --> 00:03:16,800
changed dramatically

00:03:14,879 --> 00:03:18,000
on one hand there's the breadth of

00:03:16,800 --> 00:03:20,239
things and if you see if you go to the

00:03:18,000 --> 00:03:21,760
website of any major financials

00:03:20,239 --> 00:03:24,080
almost every company out there has the

00:03:21,760 --> 00:03:26,159
ability to offer their customers a wide

00:03:24,080 --> 00:03:29,280
portfolio of offerings

00:03:26,159 --> 00:03:31,440
but more subtly it's also about how

00:03:29,280 --> 00:03:32,879
it presents those how a financial is

00:03:31,440 --> 00:03:34,720
able to interact

00:03:32,879 --> 00:03:36,480
with its customers does it feel like an

00:03:34,720 --> 00:03:37,680
integrated way or you've probably

00:03:36,480 --> 00:03:40,640
experienced going to

00:03:37,680 --> 00:03:42,400
uh uh going to some banks and finding

00:03:40,640 --> 00:03:43,920
that every tab that you click feels like

00:03:42,400 --> 00:03:45,280
you're dealing with a different company

00:03:43,920 --> 00:03:46,640
with a different experience with a

00:03:45,280 --> 00:03:49,680
different backend

00:03:46,640 --> 00:03:51,200
application and more and more that goes

00:03:49,680 --> 00:03:54,640
from awkward to being

00:03:51,200 --> 00:03:56,159
frankly not good enough and so

00:03:54,640 --> 00:03:57,760
we're seeing the world in which

00:03:56,159 --> 00:03:59,599
financials the differentiation

00:03:57,760 --> 00:04:00,000
financials is now not so much about

00:03:59,599 --> 00:04:02,959
assets

00:04:00,000 --> 00:04:02,959
but about software

00:04:04,000 --> 00:04:08,000
and so so to be able to walk this

00:04:06,640 --> 00:04:09,840
digital transformation

00:04:08,000 --> 00:04:11,599
journey what we're seeing is financials

00:04:09,840 --> 00:04:12,159
have to build new capabilities they have

00:04:11,599 --> 00:04:13,920
to build

00:04:12,159 --> 00:04:15,280
new applications but that's also

00:04:13,920 --> 00:04:18,320
creating requirements

00:04:15,280 --> 00:04:19,840
for a new type of infrastructure

00:04:18,320 --> 00:04:22,320
these new apps that we're creating

00:04:19,840 --> 00:04:23,120
create a need for us to be able to

00:04:22,320 --> 00:04:25,440
massively

00:04:23,120 --> 00:04:27,120
scale up and down with what we're seeing

00:04:25,440 --> 00:04:29,040
in the world today one piece of news can

00:04:27,120 --> 00:04:29,440
drive everyone to immediately go quickly

00:04:29,040 --> 00:04:30,960
check

00:04:29,440 --> 00:04:33,919
their portfolio and you can go from

00:04:30,960 --> 00:04:34,479
having 5 million to 15 million to 150

00:04:33,919 --> 00:04:38,000
million

00:04:34,479 --> 00:04:40,639
all accessing the same underlying app um

00:04:38,000 --> 00:04:43,040
that you have we also need to rapidly

00:04:40,639 --> 00:04:44,400
change and adapt the time that we get

00:04:43,040 --> 00:04:46,720
for example to process an

00:04:44,400 --> 00:04:47,680
acquisition has shrunk down uh

00:04:46,720 --> 00:04:49,600
dramatically

00:04:47,680 --> 00:04:51,360
and our customers are now all over the

00:04:49,600 --> 00:04:53,120
world information needs to be

00:04:51,360 --> 00:04:53,680
centralized for privacy and many other

00:04:53,120 --> 00:04:55,360
reasons

00:04:53,680 --> 00:04:56,800
but on the other hand we need to be able

00:04:55,360 --> 00:05:00,000
to deliver an experience

00:04:56,800 --> 00:05:01,680
that is incredibly low latency for our

00:05:00,000 --> 00:05:03,039
customers and so we need to place our

00:05:01,680 --> 00:05:06,160
services really close

00:05:03,039 --> 00:05:08,800
to our users kubernetes as

00:05:06,160 --> 00:05:09,440
an underlying infrastructure was really

00:05:08,800 --> 00:05:11,360
built

00:05:09,440 --> 00:05:14,960
in such a way that it can deliver very

00:05:11,360 --> 00:05:14,960
very well on all of these requirements

00:05:15,600 --> 00:05:20,560
so what is kubernetes some of you may be

00:05:18,880 --> 00:05:22,320
very very familiar with kubernetes there

00:05:20,560 --> 00:05:23,440
may be others who don't know as much so

00:05:22,320 --> 00:05:26,000
i thought i would spend

00:05:23,440 --> 00:05:26,639
a little bit of time giving an overview

00:05:26,000 --> 00:05:29,120
of this

00:05:26,639 --> 00:05:30,639
real critical technology and i will

00:05:29,120 --> 00:05:34,160
shamelessly borrow from

00:05:30,639 --> 00:05:36,560
uh from another linux foundation family

00:05:34,160 --> 00:05:38,960
project the cncf project

00:05:36,560 --> 00:05:41,039
they created this great illustrated

00:05:38,960 --> 00:05:42,479
children's guide to kubernetes and i'm

00:05:41,039 --> 00:05:44,080
not going to go through the whole guide

00:05:42,479 --> 00:05:45,840
i urge you to go do that on your own but

00:05:44,080 --> 00:05:48,080
i want to take a couple slides because i

00:05:45,840 --> 00:05:50,840
think they do a good job of illustrating

00:05:48,080 --> 00:05:53,120
uh some of the key concepts behind

00:05:50,840 --> 00:05:55,680
kubernetes

00:05:53,120 --> 00:05:57,360
so the first key concept of kubernetes

00:05:55,680 --> 00:06:00,960
or what has really enabled

00:05:57,360 --> 00:06:02,000
kubernetes is a shift in the underlying

00:06:00,960 --> 00:06:05,440
a construct

00:06:02,000 --> 00:06:07,520
by which we deliver infrastructure

00:06:05,440 --> 00:06:09,520
historically for the last 30 40 years we

00:06:07,520 --> 00:06:11,759
deliver infrastructure from a server

00:06:09,520 --> 00:06:13,199
um and while more recently that server

00:06:11,759 --> 00:06:16,319
has gone virtual from

00:06:13,199 --> 00:06:18,840
physical we're still really delivering a

00:06:16,319 --> 00:06:20,080
server with an operating system that is

00:06:18,840 --> 00:06:22,160
incredibly uh

00:06:20,080 --> 00:06:23,600
heavy and that has led us to a more

00:06:22,160 --> 00:06:26,720
monolithic way of

00:06:23,600 --> 00:06:27,919
developing applications over the last

00:06:26,720 --> 00:06:31,440
few years there's been a

00:06:27,919 --> 00:06:32,560
huge surge into the use of a container

00:06:31,440 --> 00:06:36,479
what is a container

00:06:32,560 --> 00:06:38,960
it's a much more lightweight concept

00:06:36,479 --> 00:06:41,440
construct to put in an app it allows me

00:06:38,960 --> 00:06:44,479
to be able to encapsulate

00:06:41,440 --> 00:06:46,479
a set of logic a a piece of a service in

00:06:44,479 --> 00:06:47,520
a way that is very easy for me to spin

00:06:46,479 --> 00:06:50,880
up and spin down

00:06:47,520 --> 00:06:52,319
very easy for me to scale up and down

00:06:50,880 --> 00:06:56,080
and as part of doing that i'm going to

00:06:52,319 --> 00:06:58,639
make that construct stateless

00:06:56,080 --> 00:07:00,080
so in so many ways containers are

00:06:58,639 --> 00:07:01,360
fundamentally changing the way we

00:07:00,080 --> 00:07:04,560
deliver infrastructure

00:07:01,360 --> 00:07:06,639
but we have to recognize that the move

00:07:04,560 --> 00:07:08,160
to containers has created a whole set of

00:07:06,639 --> 00:07:09,840
needs we need to think about how to

00:07:08,160 --> 00:07:10,639
manage these containers we need to think

00:07:09,840 --> 00:07:12,720
about how to

00:07:10,639 --> 00:07:14,080
how to network them as they're coming in

00:07:12,720 --> 00:07:15,520
and out they need to be scheduled

00:07:14,080 --> 00:07:17,440
distributed

00:07:15,520 --> 00:07:18,639
we need to load balance obviously around

00:07:17,440 --> 00:07:20,639
them it's a much better way of

00:07:18,639 --> 00:07:23,759
delivering things but it also creates a

00:07:20,639 --> 00:07:23,759
new set of requirements

00:07:25,360 --> 00:07:28,880
and so kubernetes really came in to be

00:07:28,000 --> 00:07:31,199
able to solve

00:07:28,880 --> 00:07:32,880
that second set of challenges and really

00:07:31,199 --> 00:07:35,599
what i think kubernetes

00:07:32,880 --> 00:07:36,400
does so well is it shifts the entire

00:07:35,599 --> 00:07:38,720
paradigm

00:07:36,400 --> 00:07:40,720
from thinking about delivering uh

00:07:38,720 --> 00:07:42,080
delivering an app via a server

00:07:40,720 --> 00:07:44,160
is the idea of let's turn it around

00:07:42,080 --> 00:07:45,520
really think about a service i'm trying

00:07:44,160 --> 00:07:48,160
to achieve something

00:07:45,520 --> 00:07:49,840
so for example a shopping cart a

00:07:48,160 --> 00:07:50,879
shopping cart's a great example of a

00:07:49,840 --> 00:07:53,120
service we understand

00:07:50,879 --> 00:07:54,240
exactly what it's supposed what it's

00:07:53,120 --> 00:07:55,840
supposed to do

00:07:54,240 --> 00:07:57,440
and then the delivery of that is just

00:07:55,840 --> 00:08:00,560
really a matter of scaling

00:07:57,440 --> 00:08:01,280
towards the demand of a customer i can

00:08:00,560 --> 00:08:03,360
create

00:08:01,280 --> 00:08:05,520
a service and then as i and that service

00:08:03,360 --> 00:08:06,960
can be instantiated in a series

00:08:05,520 --> 00:08:08,720
of containers and then as i need to

00:08:06,960 --> 00:08:10,800
scale up and down i just

00:08:08,720 --> 00:08:12,080
i just go ahead and fire up more of

00:08:10,800 --> 00:08:14,479
these containers or i

00:08:12,080 --> 00:08:15,360
can go ahead and shut them down as

00:08:14,479 --> 00:08:18,240
people go

00:08:15,360 --> 00:08:19,840
to sleep and so a service is a much more

00:08:18,240 --> 00:08:22,400
logical and better way

00:08:19,840 --> 00:08:23,680
to be able to think about delivering an

00:08:22,400 --> 00:08:24,560
application this is really what

00:08:23,680 --> 00:08:27,840
kubernetes

00:08:24,560 --> 00:08:31,440
is all about dan will be going into a

00:08:27,840 --> 00:08:31,440
lot more detail than this in a second

00:08:32,479 --> 00:08:35,919
but let's talk a little bit i i

00:08:34,000 --> 00:08:36,959
mentioned one of the challenges in this

00:08:35,919 --> 00:08:40,240
world where we've now

00:08:36,959 --> 00:08:42,159
got thousands of these containers

00:08:40,240 --> 00:08:43,919
that are that are delivering our

00:08:42,159 --> 00:08:45,760
applications

00:08:43,919 --> 00:08:47,279
one of the challenges of this is being

00:08:45,760 --> 00:08:48,720
able to network them and when we think

00:08:47,279 --> 00:08:49,279
about networking we certainly think

00:08:48,720 --> 00:08:51,760
about

00:08:49,279 --> 00:08:52,480
connecting them but but you also have to

00:08:51,760 --> 00:08:53,920
think about

00:08:52,480 --> 00:08:55,839
well what happens when something goes

00:08:53,920 --> 00:08:57,360
wrong how do i observe whether all the

00:08:55,839 --> 00:08:59,120
right connections are being made

00:08:57,360 --> 00:09:00,399
because we've all had that situation of

00:08:59,120 --> 00:09:03,440
having that uh

00:09:00,399 --> 00:09:04,880
uh that spin that spinning circle is uh

00:09:03,440 --> 00:09:06,080
for some reason an application is not

00:09:04,880 --> 00:09:08,000
being responsive

00:09:06,080 --> 00:09:09,600
we also have to make sure we have to

00:09:08,000 --> 00:09:11,920
continue to make sure

00:09:09,600 --> 00:09:13,519
that all of our communication between

00:09:11,920 --> 00:09:14,399
our services as well as between our

00:09:13,519 --> 00:09:17,839
services

00:09:14,399 --> 00:09:19,440
and our customers remains secure now for

00:09:17,839 --> 00:09:23,200
30 years

00:09:19,440 --> 00:09:25,200
we have evolved an entire market around

00:09:23,200 --> 00:09:26,959
one specific way of delivering this this

00:09:25,200 --> 00:09:29,680
monolithic architecture we were

00:09:26,959 --> 00:09:30,000
we were talking about and you know in in

00:09:29,680 --> 00:09:34,000
the

00:09:30,000 --> 00:09:37,120
old world um we really thought about

00:09:34,000 --> 00:09:39,360
a server and protecting that server

00:09:37,120 --> 00:09:40,560
and protecting a customer's access in

00:09:39,360 --> 00:09:42,560
and out our

00:09:40,560 --> 00:09:44,640
security and connectivity was really

00:09:42,560 --> 00:09:46,320
about hardware devices and

00:09:44,640 --> 00:09:48,480
and most of the time it was about

00:09:46,320 --> 00:09:50,560
hardware devices that sat

00:09:48,480 --> 00:09:53,600
between the end customer and the

00:09:50,560 --> 00:09:56,160
underlying infrastructure

00:09:53,600 --> 00:09:56,959
kubernetes the kubernetes architecture

00:09:56,160 --> 00:09:59,760
undermines

00:09:56,959 --> 00:10:01,440
this model at every turn ips may be

00:09:59,760 --> 00:10:04,160
being created and destroyed

00:10:01,440 --> 00:10:04,880
every minute of every day change is

00:10:04,160 --> 00:10:07,120
constant

00:10:04,880 --> 00:10:08,880
in that environment in terms of the bulk

00:10:07,120 --> 00:10:11,519
of communication it's no longer

00:10:08,880 --> 00:10:12,240
user to infrastructure primarily what we

00:10:11,519 --> 00:10:14,320
call north

00:10:12,240 --> 00:10:15,760
south but more and more communication is

00:10:14,320 --> 00:10:17,440
happening between these different

00:10:15,760 --> 00:10:18,320
services as we've taken a complex

00:10:17,440 --> 00:10:20,480
application

00:10:18,320 --> 00:10:21,440
and broken it into a bunch of smaller

00:10:20,480 --> 00:10:25,040
parts in terms of

00:10:21,440 --> 00:10:27,519
a bunch of different uh services

00:10:25,040 --> 00:10:29,519
and so our ability to to connect to

00:10:27,519 --> 00:10:32,480
observe and to secure

00:10:29,519 --> 00:10:32,959
our applications has fundamentally

00:10:32,480 --> 00:10:36,480
changed

00:10:32,959 --> 00:10:36,480
in this new infrastructure

00:10:40,399 --> 00:10:44,079
and so where we are today i think is

00:10:42,640 --> 00:10:47,680
actually very interesting

00:10:44,079 --> 00:10:50,800
we have thanks to kubernetes thanks to

00:10:47,680 --> 00:10:54,079
uh thanks to containers we have a far

00:10:50,800 --> 00:10:57,279
better infrastructure linux itself

00:10:54,079 --> 00:10:58,880
is becoming the the strategic technology

00:10:57,279 --> 00:10:59,519
of this world and this is especially

00:10:58,880 --> 00:11:02,880
true

00:10:59,519 --> 00:11:04,079
for for networking unfortunately the

00:11:02,880 --> 00:11:05,839
first generation

00:11:04,079 --> 00:11:07,120
of networking functionality that was

00:11:05,839 --> 00:11:10,640
built into

00:11:07,120 --> 00:11:13,040
the cloud-native kubernetes world

00:11:10,640 --> 00:11:15,600
really sought to replicate a lot of the

00:11:13,040 --> 00:11:17,120
concepts from a prior era it has

00:11:15,600 --> 00:11:19,120
a whole set of challenges which dan will

00:11:17,120 --> 00:11:22,079
go into in a second

00:11:19,120 --> 00:11:24,000
um and so we've we realized this is what

00:11:22,079 --> 00:11:27,360
we're all about at ice surveillance

00:11:24,000 --> 00:11:30,560
is there's a need to reinvent networking

00:11:27,360 --> 00:11:32,880
to reinvent network security from a

00:11:30,560 --> 00:11:36,000
cloud native perspective

00:11:32,880 --> 00:11:37,839
ebpf is a foundational technology that

00:11:36,000 --> 00:11:38,320
really allows us to do a whole set of

00:11:37,839 --> 00:11:40,640
things

00:11:38,320 --> 00:11:42,320
that weren't possible before and we have

00:11:40,640 --> 00:11:44,320
built silly psyllium leveraging the

00:11:42,320 --> 00:11:46,880
superpowers that ebpf

00:11:44,320 --> 00:11:47,600
gives us to be able to build a new

00:11:46,880 --> 00:11:50,320
networking

00:11:47,600 --> 00:11:51,200
observability and security uh

00:11:50,320 --> 00:11:57,279
architecture

00:11:51,200 --> 00:11:59,519
built for the cloud native world

00:11:57,279 --> 00:12:01,519
cool so thanks nila hey folks it's dan

00:11:59,519 --> 00:12:03,120
again i'm gonna jump in and do what i

00:12:01,519 --> 00:12:05,360
consider at least the fun part

00:12:03,120 --> 00:12:06,959
which is getting into the core uh

00:12:05,360 --> 00:12:09,279
technology and getting

00:12:06,959 --> 00:12:10,000
into the customer use cases which is

00:12:09,279 --> 00:12:11,760
really i think

00:12:10,000 --> 00:12:13,519
what what really matters at the end of

00:12:11,760 --> 00:12:15,519
the day so

00:12:13,519 --> 00:12:18,160
first off just one quick slide so that

00:12:15,519 --> 00:12:20,560
we level set a bit in a bit more detail

00:12:18,160 --> 00:12:21,279
around why some of these networking

00:12:20,560 --> 00:12:24,079
challenges

00:12:21,279 --> 00:12:25,040
exist in a kubernetes world so in

00:12:24,079 --> 00:12:28,160
kubernetes

00:12:25,040 --> 00:12:30,480
you have you know linux workloads often

00:12:28,160 --> 00:12:32,800
vms but they can be bare metal

00:12:30,480 --> 00:12:34,160
right and these linux workloads

00:12:32,800 --> 00:12:36,079
essentially are managed by the

00:12:34,160 --> 00:12:38,639
kubernetes control plane to create a

00:12:36,079 --> 00:12:40,959
pool of capacity where

00:12:38,639 --> 00:12:41,680
individual lightweight containerized

00:12:40,959 --> 00:12:43,760
workloads

00:12:41,680 --> 00:12:46,320
that nila was mentioning before can be

00:12:43,760 --> 00:12:48,639
scheduled in a highly dynamic way

00:12:46,320 --> 00:12:50,560
you know these physical these these

00:12:48,639 --> 00:12:51,760
these linux workloads are connected to

00:12:50,560 --> 00:12:53,360
an existing network

00:12:51,760 --> 00:12:55,600
that's how they might reach out to reach

00:12:53,360 --> 00:12:58,240
legacy servers and legacy vms

00:12:55,600 --> 00:12:59,440
or get to the external internet but they

00:12:58,240 --> 00:13:02,560
also communicate

00:12:59,440 --> 00:13:04,959
amongst themselves and

00:13:02,560 --> 00:13:06,639
when you know you need more capacity

00:13:04,959 --> 00:13:07,360
let's say you're scaling up some of your

00:13:06,639 --> 00:13:09,200
workloads

00:13:07,360 --> 00:13:10,880
you're just going to throw in another

00:13:09,200 --> 00:13:12,800
one of these linux workloads

00:13:10,880 --> 00:13:14,320
it's going to be managed by kubernetes

00:13:12,800 --> 00:13:17,120
using the kubelet which is the

00:13:14,320 --> 00:13:18,160
agent that runs on each kubernetes

00:13:17,120 --> 00:13:20,320
worker node

00:13:18,160 --> 00:13:21,680
and you know more pods are going to get

00:13:20,320 --> 00:13:23,839
scheduled to this

00:13:21,680 --> 00:13:24,720
and so again the key things to to

00:13:23,839 --> 00:13:27,440
realize here

00:13:24,720 --> 00:13:28,320
is that you have a dynamic pool of linux

00:13:27,440 --> 00:13:30,320
workloads

00:13:28,320 --> 00:13:31,680
with multiple tenants workloads being

00:13:30,320 --> 00:13:33,120
scheduled there

00:13:31,680 --> 00:13:34,399
you know they're getting assigned ips

00:13:33,120 --> 00:13:35,279
they're being destroyed they're getting

00:13:34,399 --> 00:13:38,639
new ips

00:13:35,279 --> 00:13:40,560
it's a very dynamic environment um and

00:13:38,639 --> 00:13:42,320
it's connected to your physical network

00:13:40,560 --> 00:13:43,360
but your physical network isn't really

00:13:42,320 --> 00:13:45,440
aware

00:13:43,360 --> 00:13:47,279
of what is going on at the kubernetes

00:13:45,440 --> 00:13:48,000
layer and as we'll start to jump into

00:13:47,279 --> 00:13:49,519
some of the the

00:13:48,000 --> 00:13:51,279
customer stories in the next couple

00:13:49,519 --> 00:13:52,480
slides you know you'll see that that is

00:13:51,279 --> 00:13:55,040
a really pivotal

00:13:52,480 --> 00:13:56,480
um point in terms of achieving a lot of

00:13:55,040 --> 00:13:58,639
those requirements that

00:13:56,480 --> 00:13:59,839
financial enterprises have have always

00:13:58,639 --> 00:14:02,160
had

00:13:59,839 --> 00:14:02,880
so let me jump in to the first user

00:14:02,160 --> 00:14:05,199
story

00:14:02,880 --> 00:14:06,480
um we're specifically modeling this on a

00:14:05,199 --> 00:14:08,000
large us bank

00:14:06,480 --> 00:14:10,079
but to be honest with you this is a

00:14:08,000 --> 00:14:12,240
pretty universal requirement for

00:14:10,079 --> 00:14:13,120
a lot of our enterprise customers it's

00:14:12,240 --> 00:14:16,000
just probably

00:14:13,120 --> 00:14:17,040
most extreme within financials and and

00:14:16,000 --> 00:14:18,800
other entities

00:14:17,040 --> 00:14:21,199
that have a ton of compliance

00:14:18,800 --> 00:14:22,160
requirements so i think the key thing to

00:14:21,199 --> 00:14:25,040
remember

00:14:22,160 --> 00:14:26,720
is that you know all of those compliance

00:14:25,040 --> 00:14:27,760
requirements this is an example of the

00:14:26,720 --> 00:14:29,120
pci

00:14:27,760 --> 00:14:31,040
you know requirement but there's other

00:14:29,120 --> 00:14:34,399
things like sarbanes-oxley

00:14:31,040 --> 00:14:37,040
etc um you know these don't go away

00:14:34,399 --> 00:14:37,519
simply because you're using kubernetes

00:14:37,040 --> 00:14:39,279
um

00:14:37,519 --> 00:14:41,360
you know so you know obviously a first

00:14:39,279 --> 00:14:43,680
requirement here is the ability to

00:14:41,360 --> 00:14:45,199
isolate you know a app that may have

00:14:43,680 --> 00:14:47,519
sensitive user data

00:14:45,199 --> 00:14:50,000
from another app it's pretty obvious

00:14:47,519 --> 00:14:52,560
this is kind of network security 101.

00:14:50,000 --> 00:14:54,880
why is even this something so basic

00:14:52,560 --> 00:14:56,720
difficult in a kubernetes world

00:14:54,880 --> 00:14:58,000
well let's imagine you know we want to

00:14:56,720 --> 00:14:59,279
say hey tenant a

00:14:58,000 --> 00:15:01,040
should of course be able to talk to

00:14:59,279 --> 00:15:03,040
other tenant a workloads

00:15:01,040 --> 00:15:04,560
um and also you know reach out to

00:15:03,040 --> 00:15:06,240
payments.com

00:15:04,560 --> 00:15:08,240
tenant b should be able to talk to other

00:15:06,240 --> 00:15:08,800
tenant b workloads and maybe reach out

00:15:08,240 --> 00:15:11,360
to

00:15:08,800 --> 00:15:12,240
a database in your legacy infrastructure

00:15:11,360 --> 00:15:14,399
and tenancy

00:15:12,240 --> 00:15:16,160
should only be able to talk to workloads

00:15:14,399 --> 00:15:18,399
um you know from tenancy

00:15:16,160 --> 00:15:20,000
these are pretty simple you know not not

00:15:18,399 --> 00:15:22,320
mind-blowingly complex

00:15:20,000 --> 00:15:23,920
um isolation challenges that you might

00:15:22,320 --> 00:15:26,800
need to do to meet your basic

00:15:23,920 --> 00:15:27,680
um security compliance requirements but

00:15:26,800 --> 00:15:29,120
the problem is

00:15:27,680 --> 00:15:30,800
you know traditionally what would you do

00:15:29,120 --> 00:15:33,680
you put tenant a on a vlan

00:15:30,800 --> 00:15:36,079
tenant b and a vlan tenancy on a vlan

00:15:33,680 --> 00:15:39,120
and use a traditional physical firewall

00:15:36,079 --> 00:15:40,560
to isolate them but the problem is is

00:15:39,120 --> 00:15:44,079
twofold actually

00:15:40,560 --> 00:15:45,440
first off you know physical firewalls

00:15:44,079 --> 00:15:47,360
that are seeing this traffic

00:15:45,440 --> 00:15:49,759
it has no idea if the traffic for

00:15:47,360 --> 00:15:52,079
example on that first linux worker node

00:15:49,759 --> 00:15:53,440
came from pod one or pod two so how does

00:15:52,079 --> 00:15:54,959
it know what that traffic should or

00:15:53,440 --> 00:15:57,279
shouldn't be able to talk to

00:15:54,959 --> 00:15:59,199
it doesn't understand the identity at a

00:15:57,279 --> 00:16:01,759
kubernetes layer of the workloads when

00:15:59,199 --> 00:16:03,360
it's seeing packets at the network layer

00:16:01,759 --> 00:16:05,199
the second one is also pretty obvious

00:16:03,360 --> 00:16:06,639
from this diagram right if pod one is

00:16:05,199 --> 00:16:07,920
talking to pod two there

00:16:06,639 --> 00:16:09,360
it's never even going through the

00:16:07,920 --> 00:16:11,279
physical network it's never going

00:16:09,360 --> 00:16:13,279
through your physical firewall

00:16:11,279 --> 00:16:15,120
therefore a traditional firewall would

00:16:13,279 --> 00:16:17,600
not even see this connectivity

00:16:15,120 --> 00:16:18,560
even at a network layer so it's pretty

00:16:17,600 --> 00:16:20,320
clear that kind of

00:16:18,560 --> 00:16:23,040
even the basic multi-tenancy

00:16:20,320 --> 00:16:26,320
requirements that you need um

00:16:23,040 --> 00:16:28,320
for for compliance can't really be

00:16:26,320 --> 00:16:30,160
be met with traditional firewalls in a

00:16:28,320 --> 00:16:33,519
kubernetes environment

00:16:30,160 --> 00:16:35,120
so what can we do here well kubernetes

00:16:33,519 --> 00:16:38,639
has a construct called network

00:16:35,120 --> 00:16:41,040
policy network policy is a way of

00:16:38,639 --> 00:16:43,279
defining network connectivity and

00:16:41,040 --> 00:16:45,759
restricting network connectivity

00:16:43,279 --> 00:16:47,680
inside of a kubernetes environment in a

00:16:45,759 --> 00:16:49,279
way that isn't based on ips

00:16:47,680 --> 00:16:50,639
because those ips change all the time

00:16:49,279 --> 00:16:51,759
you'd be constantly updating your

00:16:50,639 --> 00:16:53,440
firewall rules

00:16:51,759 --> 00:16:56,000
you know you'd lose all the agility

00:16:53,440 --> 00:16:57,839
benefits of kubernetes but instead based

00:16:56,000 --> 00:16:59,440
on higher level identity

00:16:57,839 --> 00:17:00,880
where you can say for example in a

00:16:59,440 --> 00:17:03,440
declarative policy

00:17:00,880 --> 00:17:05,120
you can say tenant a workloads should

00:17:03,440 --> 00:17:06,000
only be able to talk to other tenant a

00:17:05,120 --> 00:17:09,360
workloads

00:17:06,000 --> 00:17:11,839
and talk to www.payments.com

00:17:09,360 --> 00:17:13,120
and then wherever those workloads end up

00:17:11,839 --> 00:17:14,799
getting scheduled

00:17:13,120 --> 00:17:16,799
in this case psyllium we're using

00:17:14,799 --> 00:17:19,600
psyllium to implement network policy

00:17:16,799 --> 00:17:21,439
you know we'll program ebpf in the linux

00:17:19,600 --> 00:17:24,160
kernel to make sure that wherever

00:17:21,439 --> 00:17:25,679
tenant a workloads pop up it has exactly

00:17:24,160 --> 00:17:28,480
that type of access

00:17:25,679 --> 00:17:30,000
and no more and because psyllium and

00:17:28,480 --> 00:17:32,400
ebpf are running

00:17:30,000 --> 00:17:34,320
inside of the linux kernel on each one

00:17:32,400 --> 00:17:36,799
of those kubernetes worker nodes

00:17:34,320 --> 00:17:38,400
there is no network connectivity even

00:17:36,799 --> 00:17:40,320
network connectivity within a work

00:17:38,400 --> 00:17:42,400
within a single linux worker node

00:17:40,320 --> 00:17:44,240
that isn't seen and managed by these

00:17:42,400 --> 00:17:47,200
security policies

00:17:44,240 --> 00:17:48,799
so first takeaway is firewall policies

00:17:47,200 --> 00:17:51,520
still need to be applied

00:17:48,799 --> 00:17:53,520
inside of a kubernetes world and network

00:17:51,520 --> 00:17:55,360
policy is a kubernetes construct

00:17:53,520 --> 00:17:59,360
combined with a cni plug-in like

00:17:55,360 --> 00:18:02,160
psyllium that lets you achieve that

00:17:59,360 --> 00:18:03,200
but this user story isn't done uh the

00:18:02,160 --> 00:18:05,200
same bank

00:18:03,200 --> 00:18:06,799
has not just firewalling requirements

00:18:05,200 --> 00:18:07,679
but also security visibility

00:18:06,799 --> 00:18:09,600
requirements

00:18:07,679 --> 00:18:11,360
to meet their compliance right you know

00:18:09,600 --> 00:18:13,679
you've probably seen requirements that

00:18:11,360 --> 00:18:16,720
say hey you must be able to monitor

00:18:13,679 --> 00:18:18,400
and log all at all network access to

00:18:16,720 --> 00:18:20,000
systems with sensitive data

00:18:18,400 --> 00:18:22,160
you have the exact same problem you have

00:18:20,000 --> 00:18:23,760
in the firewall world if your logs just

00:18:22,160 --> 00:18:25,600
contain ip addresses

00:18:23,760 --> 00:18:26,960
how do you know who is accessing what

00:18:25,600 --> 00:18:28,799
sensitive systems

00:18:26,960 --> 00:18:30,320
right those ip addresses don't actually

00:18:28,799 --> 00:18:32,480
tell you what workload

00:18:30,320 --> 00:18:34,080
and with what data you know something

00:18:32,480 --> 00:18:35,919
was potentially accessed

00:18:34,080 --> 00:18:37,360
similarly your your requirements your

00:18:35,919 --> 00:18:39,440
compliance requirements might require

00:18:37,360 --> 00:18:41,200
you to be running intrusion detection

00:18:39,440 --> 00:18:42,720
well you could run intrusion detection

00:18:41,200 --> 00:18:45,039
for all of your workloads

00:18:42,720 --> 00:18:46,320
north south but how do you ensure for

00:18:45,039 --> 00:18:48,960
example

00:18:46,320 --> 00:18:50,400
that only a select set of apps have

00:18:48,960 --> 00:18:52,799
intrusion detection enforced

00:18:50,400 --> 00:18:53,440
if their compliance requirements dictate

00:18:52,799 --> 00:18:56,480
that

00:18:53,440 --> 00:18:57,919
and that that intrusion detection even

00:18:56,480 --> 00:18:58,640
sees all of the service to service

00:18:57,919 --> 00:19:00,720
communication

00:18:58,640 --> 00:19:02,480
between them it's essentially exactly

00:19:00,720 --> 00:19:06,240
the same problem for firewalling

00:19:02,480 --> 00:19:09,120
just in a visibility context so

00:19:06,240 --> 00:19:10,000
you know again the traditional ip and

00:19:09,120 --> 00:19:13,120
port-based

00:19:10,000 --> 00:19:15,360
logs don't give you the visibility and

00:19:13,120 --> 00:19:17,039
any network monitoring capability that

00:19:15,360 --> 00:19:20,240
isn't fully distributed

00:19:17,039 --> 00:19:24,240
will not give you that capability

00:19:20,240 --> 00:19:26,080
so again you need something that is a

00:19:24,240 --> 00:19:27,440
running inside of every one of your

00:19:26,080 --> 00:19:30,240
linux workloads

00:19:27,440 --> 00:19:32,240
right and that sees every bit of traffic

00:19:30,240 --> 00:19:35,200
um that is going between the workloads

00:19:32,240 --> 00:19:37,120
and sees it not just at an iep level but

00:19:35,200 --> 00:19:40,640
sees it in a way where those logs

00:19:37,120 --> 00:19:43,200
can include you know detail about

00:19:40,640 --> 00:19:44,240
exactly what kubernetes service was

00:19:43,200 --> 00:19:47,679
communicating

00:19:44,240 --> 00:19:49,440
at that exact time and that's really

00:19:47,679 --> 00:19:51,360
the power that you get with the platform

00:19:49,440 --> 00:19:53,120
like psyllium and ebpf

00:19:51,360 --> 00:19:55,280
is that you're able to get all of your

00:19:53,120 --> 00:19:56,880
network audit and network connectivity

00:19:55,280 --> 00:19:59,039
information

00:19:56,880 --> 00:20:01,280
exported into for example the sim that

00:19:59,039 --> 00:20:04,080
your secops team uses like splunk or

00:20:01,280 --> 00:20:06,720
elastic or whatever else maybe arcsight

00:20:04,080 --> 00:20:07,280
um you know and you're able to get that

00:20:06,720 --> 00:20:09,919
data but

00:20:07,280 --> 00:20:11,919
in a fully identity aware way such that

00:20:09,919 --> 00:20:13,919
if your security team comes back

00:20:11,919 --> 00:20:15,440
three weeks later and says hey this ip

00:20:13,919 --> 00:20:17,120
address from your kubernetes environment

00:20:15,440 --> 00:20:19,919
did something suspicious

00:20:17,120 --> 00:20:21,440
you have the full audit trail there of

00:20:19,919 --> 00:20:23,840
oh i understand what team

00:20:21,440 --> 00:20:25,200
service that was at what time if it is

00:20:23,840 --> 00:20:26,960
determined that that service was

00:20:25,200 --> 00:20:28,240
compromised i can tell maybe how that

00:20:26,960 --> 00:20:30,000
attacker moved last

00:20:28,240 --> 00:20:31,600
i believe in the organization what

00:20:30,000 --> 00:20:34,159
information the attacker may or may not

00:20:31,600 --> 00:20:36,799
have gotten access to

00:20:34,159 --> 00:20:38,320
so that wraps up user story number one

00:20:36,799 --> 00:20:40,720
user story number two

00:20:38,320 --> 00:20:42,320
is another security centric story it's

00:20:40,720 --> 00:20:44,000
probably not a terrible surprise given

00:20:42,320 --> 00:20:47,200
how important security is to

00:20:44,000 --> 00:20:49,600
to financials this is actually um from

00:20:47,200 --> 00:20:50,559
a startup who is a pain in the payment

00:20:49,600 --> 00:20:52,880
space

00:20:50,559 --> 00:20:53,760
they migrated their app from an on-prem

00:20:52,880 --> 00:20:55,520
data center

00:20:53,760 --> 00:20:57,679
where they had strong kind of guarantees

00:20:55,520 --> 00:21:00,880
about physical security

00:20:57,679 --> 00:21:01,360
to a cloud data center and as part of

00:21:00,880 --> 00:21:02,960
that

00:21:01,360 --> 00:21:04,960
they were trying to understand how they

00:21:02,960 --> 00:21:08,320
could get stronger guarantees

00:21:04,960 --> 00:21:10,320
about encrypting traffic in transit um

00:21:08,320 --> 00:21:11,919
as obviously there's a lot of sensitive

00:21:10,320 --> 00:21:14,159
payment related data

00:21:11,919 --> 00:21:15,440
um that was being transferred between

00:21:14,159 --> 00:21:17,280
their different services

00:21:15,440 --> 00:21:19,360
and from their services to various

00:21:17,280 --> 00:21:22,400
payment gateways

00:21:19,360 --> 00:21:24,880
that that they integrate with

00:21:22,400 --> 00:21:26,559
so of course the traditional way that

00:21:24,880 --> 00:21:28,480
you would encrypt data in transit would

00:21:26,559 --> 00:21:31,360
be at the application layer

00:21:28,480 --> 00:21:31,840
your application developers would you

00:21:31,360 --> 00:21:33,760
know

00:21:31,840 --> 00:21:35,520
build their applications using for

00:21:33,760 --> 00:21:38,640
example tls

00:21:35,520 --> 00:21:39,679
and um you know rely on encryption at

00:21:38,640 --> 00:21:41,760
the app

00:21:39,679 --> 00:21:43,600
application layer now that's fine and

00:21:41,760 --> 00:21:46,240
it's secure when done properly

00:21:43,600 --> 00:21:47,760
but there's a couple downsides to that

00:21:46,240 --> 00:21:49,120
now first off if you initially built

00:21:47,760 --> 00:21:50,240
your application assuming it was an

00:21:49,120 --> 00:21:51,360
environment where you didn't need to

00:21:50,240 --> 00:21:53,440
worry about encryption

00:21:51,360 --> 00:21:55,200
right but now as part of your cloud

00:21:53,440 --> 00:21:56,720
transformation for example you are now

00:21:55,200 --> 00:21:58,320
moving to an environment where you do

00:21:56,720 --> 00:22:00,240
need to worry about encryption

00:21:58,320 --> 00:22:02,000
right you now have to go back to every

00:22:00,240 --> 00:22:03,840
one of your application teams

00:22:02,000 --> 00:22:05,919
and go tell them to change how they

00:22:03,840 --> 00:22:09,200
built and run their apps

00:22:05,919 --> 00:22:11,360
to um to add encryption the other part

00:22:09,200 --> 00:22:13,280
is that even if they did add encryption

00:22:11,360 --> 00:22:15,520
you don't necessarily know the choices

00:22:13,280 --> 00:22:17,200
of encryption ciphers tls versions

00:22:15,520 --> 00:22:17,840
ciphers etc that they that they've

00:22:17,200 --> 00:22:18,960
chosen

00:22:17,840 --> 00:22:20,799
so i don't know how many of you have

00:22:18,960 --> 00:22:22,159
seen this i know i got several emails

00:22:20,799 --> 00:22:23,840
like this recently

00:22:22,159 --> 00:22:26,000
you know there's a basically a deadline

00:22:23,840 --> 00:22:28,880
for pci compliance that you have to have

00:22:26,000 --> 00:22:31,120
moved off of older versions of tls

00:22:28,880 --> 00:22:33,360
and that that that they'll now be fully

00:22:31,120 --> 00:22:34,480
deprecated um this article is from july

00:22:33,360 --> 00:22:36,320
i feel like i got

00:22:34,480 --> 00:22:37,840
several emails in the last couple months

00:22:36,320 --> 00:22:40,240
about this from

00:22:37,840 --> 00:22:41,520
from different um sas providers

00:22:40,240 --> 00:22:43,360
basically saying tls

00:22:41,520 --> 00:22:46,640
older versions of tls will no longer be

00:22:43,360 --> 00:22:48,240
supported so now what happens here is

00:22:46,640 --> 00:22:50,000
you have to go and tell all of your

00:22:48,240 --> 00:22:50,880
application developers hey to continue

00:22:50,000 --> 00:22:53,360
to be compliant

00:22:50,880 --> 00:22:55,039
you have to go update all of your apps

00:22:53,360 --> 00:22:57,440
and while it's certainly possible it's

00:22:55,039 --> 00:22:59,360
much easier if you just have kind of a

00:22:57,440 --> 00:23:00,640
easy button um that you can

00:22:59,360 --> 00:23:02,880
transparently

00:23:00,640 --> 00:23:03,760
apply these more stringent security

00:23:02,880 --> 00:23:06,640
requirements

00:23:03,760 --> 00:23:07,840
to your application and that's what's

00:23:06,640 --> 00:23:09,440
actually possible

00:23:07,840 --> 00:23:11,120
in kind of a kubernetes world with

00:23:09,440 --> 00:23:13,039
something like psyllium

00:23:11,120 --> 00:23:14,559
is that you're actually able to just

00:23:13,039 --> 00:23:17,919
declare say hey

00:23:14,559 --> 00:23:20,000
workloads from these sets of pods right

00:23:17,919 --> 00:23:22,320
should always be encrypted it doesn't

00:23:20,000 --> 00:23:24,720
matter what the application has done

00:23:22,320 --> 00:23:26,080
in the linux kernel itself add the

00:23:24,720 --> 00:23:28,880
encryption on top of

00:23:26,080 --> 00:23:30,799
the underlying communication and so what

00:23:28,880 --> 00:23:33,280
that gives you is not only saves your

00:23:30,799 --> 00:23:34,720
your development team's time but also

00:23:33,280 --> 00:23:36,240
from the security perspective gives you

00:23:34,720 --> 00:23:38,480
a lot of certainty

00:23:36,240 --> 00:23:39,840
you know for sure that all of that

00:23:38,480 --> 00:23:42,000
traffic is encrypted

00:23:39,840 --> 00:23:43,679
um you know exactly what encryption

00:23:42,000 --> 00:23:44,799
parameters were used to encrypt that

00:23:43,679 --> 00:23:47,279
traffic

00:23:44,799 --> 00:23:48,640
and so you know this is i always we have

00:23:47,279 --> 00:23:50,080
one of our customers used to call this

00:23:48,640 --> 00:23:52,320
boom encryption

00:23:50,080 --> 00:23:54,240
because you said it once and boom it's

00:23:52,320 --> 00:23:55,760
everywhere as opposed to having to go

00:23:54,240 --> 00:23:58,720
team by team by team

00:23:55,760 --> 00:24:00,159
trying to nag and corral them to kind of

00:23:58,720 --> 00:24:02,320
being fully compliant

00:24:00,159 --> 00:24:04,000
and then realizing that at any moment

00:24:02,320 --> 00:24:05,679
they may deploy a new part of their app

00:24:04,000 --> 00:24:07,440
that is no longer compliant and you have

00:24:05,679 --> 00:24:09,120
to continue to track them down

00:24:07,440 --> 00:24:10,960
so transparent encryption is kind of a

00:24:09,120 --> 00:24:13,279
new model of thinking about

00:24:10,960 --> 00:24:15,039
moving those me the the work needed to

00:24:13,279 --> 00:24:17,520
meet those compliance requirements

00:24:15,039 --> 00:24:21,200
to the infrastructure layer rather than

00:24:17,520 --> 00:24:22,640
solving it in each individual app

00:24:21,200 --> 00:24:24,080
all right and now the last one is

00:24:22,640 --> 00:24:25,120
actually a combination of two different

00:24:24,080 --> 00:24:28,240
user stories

00:24:25,120 --> 00:24:28,880
one is a large us insurance provider and

00:24:28,240 --> 00:24:32,159
the other

00:24:28,880 --> 00:24:34,159
is a europe-based

00:24:32,159 --> 00:24:36,000
financial payments company and i think

00:24:34,159 --> 00:24:37,360
there's an old joke that i think it's in

00:24:36,000 --> 00:24:40,000
real estate there's only three things

00:24:37,360 --> 00:24:42,400
that matter location location location

00:24:40,000 --> 00:24:43,600
um i think in financial services

00:24:42,400 --> 00:24:44,400
software you probably say well there's

00:24:43,600 --> 00:24:47,279
security

00:24:44,400 --> 00:24:49,120
but location location location as well

00:24:47,279 --> 00:24:50,880
you know there's several examples neela

00:24:49,120 --> 00:24:52,960
already touched on this first one

00:24:50,880 --> 00:24:55,120
which is often you know you'll need

00:24:52,960 --> 00:24:56,880
geographic proximity to an exchange or

00:24:55,120 --> 00:24:59,760
to another financial api

00:24:56,880 --> 00:25:01,600
to reduce latency of a transaction but

00:24:59,760 --> 00:25:03,039
there's also tons of requirements around

00:25:01,600 --> 00:25:04,960
data residency

00:25:03,039 --> 00:25:06,400
right you know if you're a global

00:25:04,960 --> 00:25:08,720
financial institution

00:25:06,400 --> 00:25:09,840
you'll often find you have to store the

00:25:08,720 --> 00:25:11,760
data for your

00:25:09,840 --> 00:25:13,279
customers in germany you know in germany

00:25:11,760 --> 00:25:14,480
in germany right

00:25:13,279 --> 00:25:16,080
i can't tell you the number of

00:25:14,480 --> 00:25:17,600
financials that are saying well i'm

00:25:16,080 --> 00:25:19,360
going to either do you know i'm probably

00:25:17,600 --> 00:25:20,880
going to have alibaba as a cloud at some

00:25:19,360 --> 00:25:22,000
point because i'm going to need to do

00:25:20,880 --> 00:25:24,080
work in china

00:25:22,000 --> 00:25:26,080
right so you're kind of almost

00:25:24,080 --> 00:25:28,159
inherently if you're a global financial

00:25:26,080 --> 00:25:29,919
fighting off these um types of data

00:25:28,159 --> 00:25:31,279
residency requirements

00:25:29,919 --> 00:25:32,559
and then the last one this is

00:25:31,279 --> 00:25:33,919
particularly relevant i think for the

00:25:32,559 --> 00:25:35,919
insurance company but it's probably

00:25:33,919 --> 00:25:38,320
relevant for for all the financials

00:25:35,919 --> 00:25:39,600
is fault tolerance you need to know that

00:25:38,320 --> 00:25:42,559
even and probably

00:25:39,600 --> 00:25:44,000
especially you know if your data center

00:25:42,559 --> 00:25:44,960
which might be in your home region is

00:25:44,000 --> 00:25:47,120
knocked out

00:25:44,960 --> 00:25:48,080
you still have other locations um that

00:25:47,120 --> 00:25:49,360
are fault tolerant

00:25:48,080 --> 00:25:51,279
you know if there's a hurricane that

00:25:49,360 --> 00:25:53,440
hits hits your home area where your

00:25:51,279 --> 00:25:54,720
your primary data center is that's

00:25:53,440 --> 00:25:56,000
exactly when your clients are going to

00:25:54,720 --> 00:25:57,200
be filing claims

00:25:56,000 --> 00:25:59,120
and wanting to check in on their

00:25:57,200 --> 00:26:01,120
policies and you need to be able to make

00:25:59,120 --> 00:26:01,760
sure that that you have that that fault

00:26:01,120 --> 00:26:05,200
tolerance

00:26:01,760 --> 00:26:07,120
built in so you know the key

00:26:05,200 --> 00:26:09,679
challenge here from a kubernetes

00:26:07,120 --> 00:26:10,720
perspective is that you want to be able

00:26:09,679 --> 00:26:12,880
to still apply

00:26:10,720 --> 00:26:13,760
those security policies that you had in

00:26:12,880 --> 00:26:15,520
place

00:26:13,760 --> 00:26:16,880
but now these workloads aren't in the

00:26:15,520 --> 00:26:19,279
same cluster

00:26:16,880 --> 00:26:21,440
but you don't want to expose for example

00:26:19,279 --> 00:26:24,080
a service in your primary data center

00:26:21,440 --> 00:26:25,200
you know to all other workloads in your

00:26:24,080 --> 00:26:27,440
internal network

00:26:25,200 --> 00:26:29,200
just so you know a kubernetes cluster

00:26:27,440 --> 00:26:31,279
and you're trading one location

00:26:29,200 --> 00:26:32,640
can access it right that's not at all

00:26:31,279 --> 00:26:34,159
least privilege

00:26:32,640 --> 00:26:36,080
what you want to be able to do is

00:26:34,159 --> 00:26:36,400
essentially have those fine those same

00:26:36,080 --> 00:26:39,039
fine

00:26:36,400 --> 00:26:40,880
grain zero trust policies even for

00:26:39,039 --> 00:26:42,640
workloads that may be spanning

00:26:40,880 --> 00:26:43,919
uh different different geographic

00:26:42,640 --> 00:26:45,679
regions

00:26:43,919 --> 00:26:48,080
for any of the reasons that we talked

00:26:45,679 --> 00:26:50,400
about in the last slide

00:26:48,080 --> 00:26:51,440
so the answer here is to kind of create

00:26:50,400 --> 00:26:53,679
a mesh

00:26:51,440 --> 00:26:54,880
of the kubernetes networks psyllium has

00:26:53,679 --> 00:26:56,240
a feature that can do this called

00:26:54,880 --> 00:26:57,919
psyllium cluster mesh

00:26:56,240 --> 00:27:00,080
but essentially you want it to be a

00:26:57,919 --> 00:27:02,480
single fabric from a

00:27:00,080 --> 00:27:04,400
network identity perspective so that

00:27:02,480 --> 00:27:06,000
when a packet arrives at your primary

00:27:04,400 --> 00:27:08,640
data center you know you can tell that

00:27:06,000 --> 00:27:10,799
it came from tenancy and should be

00:27:08,640 --> 00:27:12,720
allowed to go to a tenancy workload

00:27:10,799 --> 00:27:14,400
um but not a tenant b workload or a

00:27:12,720 --> 00:27:16,640
tenant a workload

00:27:14,400 --> 00:27:18,320
the same thing applies to those security

00:27:16,640 --> 00:27:19,279
security visibility requirements we

00:27:18,320 --> 00:27:21,120
talked about

00:27:19,279 --> 00:27:22,640
right your logging needs to be able to

00:27:21,120 --> 00:27:25,279
log and understand that hey

00:27:22,640 --> 00:27:26,960
service a was talking to service b even

00:27:25,279 --> 00:27:29,200
if service a and service b

00:27:26,960 --> 00:27:30,399
were in different phys geographic

00:27:29,200 --> 00:27:32,159
locations

00:27:30,399 --> 00:27:33,760
and so really you can kind of think of

00:27:32,159 --> 00:27:37,440
this last aspect of

00:27:33,760 --> 00:27:39,279
is being able to preserve the critical

00:27:37,440 --> 00:27:40,799
identity for security enforcement

00:27:39,279 --> 00:27:43,520
security visibility

00:27:40,799 --> 00:27:45,600
even despite you know these these kind

00:27:43,520 --> 00:27:46,799
of requirements of financial workloads

00:27:45,600 --> 00:27:50,159
to often run

00:27:46,799 --> 00:27:53,039
in different geographic locations

00:27:50,159 --> 00:27:54,960
cool so just to wrap up we talked about

00:27:53,039 --> 00:27:57,360
three main user stories

00:27:54,960 --> 00:27:58,240
we talked about the need to be able to

00:27:57,360 --> 00:28:00,399
meet the core

00:27:58,240 --> 00:28:02,640
finance you know firewall and security

00:28:00,399 --> 00:28:03,600
monitoring requirements that financials

00:28:02,640 --> 00:28:06,799
face

00:28:03,600 --> 00:28:07,440
by adding an understanding of kubernetes

00:28:06,799 --> 00:28:09,039
identity

00:28:07,440 --> 00:28:10,640
in a world where ip addresses have

00:28:09,039 --> 00:28:13,360
become meaningless

00:28:10,640 --> 00:28:14,640
we talked about being able to you know

00:28:13,360 --> 00:28:16,399
add

00:28:14,640 --> 00:28:17,919
transparent encryption to be able to

00:28:16,399 --> 00:28:20,480
meet encryption requirements

00:28:17,919 --> 00:28:22,240
when for example a workload moves from a

00:28:20,480 --> 00:28:23,679
you know maybe on-prem environment where

00:28:22,240 --> 00:28:25,600
encryption wasn't critical

00:28:23,679 --> 00:28:26,880
to a cloud environment where it now is

00:28:25,600 --> 00:28:29,360
critical

00:28:26,880 --> 00:28:30,480
and for user story number three we

00:28:29,360 --> 00:28:32,480
talked about

00:28:30,480 --> 00:28:34,559
being able to guarantee these types of

00:28:32,480 --> 00:28:37,520
properties um

00:28:34,559 --> 00:28:37,919
in a secure way despite having these

00:28:37,520 --> 00:28:40,320
apps

00:28:37,919 --> 00:28:41,120
geographically distributed um as is

00:28:40,320 --> 00:28:43,120
required for

00:28:41,120 --> 00:28:45,760
many reasons in in the cases of

00:28:43,120 --> 00:28:47,840
financial services software

00:28:45,760 --> 00:28:49,279
so with that i want to thank you for

00:28:47,840 --> 00:28:49,840
your time i want to encourage you to

00:28:49,279 --> 00:28:52,320
check out

00:28:49,840 --> 00:28:53,279
learn more about ebpf and psyllium if

00:28:52,320 --> 00:28:55,760
that's interesting

00:28:53,279 --> 00:28:57,520
uh to you we actually recently just

00:28:55,760 --> 00:28:58,960
hosted a virtual conference of ourselves

00:28:57,520 --> 00:29:01,120
the ebpf summit

00:28:58,960 --> 00:29:02,960
and we had um capital one talk there

00:29:01,120 --> 00:29:05,360
which will i think resonate with a lot

00:29:02,960 --> 00:29:07,120
of the user stories i just talked about

00:29:05,360 --> 00:29:09,039
above so i'd encourage you to check out

00:29:07,120 --> 00:29:12,159
that video it's only a five minute video

00:29:09,039 --> 00:29:13,600
so really easy easy to talk um or easy

00:29:12,159 --> 00:29:15,760
to take in

00:29:13,600 --> 00:29:16,960
and then um you know we'll be live on

00:29:15,760 --> 00:29:19,600
the conference chat

00:29:16,960 --> 00:29:20,000
if you want to chat right now or um you

00:29:19,600 --> 00:29:22,159
know

00:29:20,000 --> 00:29:23,279
always feel free to reach out to nila or

00:29:22,159 --> 00:29:25,520
i on twitter

00:29:23,279 --> 00:29:26,559
and if you want updates around the

00:29:25,520 --> 00:29:29,039
psyllium

00:29:26,559 --> 00:29:30,720
um feel free to follow psyllium project

00:29:29,039 --> 00:29:32,240
on twitter as well

00:29:30,720 --> 00:29:35,919
all right so thank you very much for

00:29:32,240 --> 00:29:35,919
your time i appreciate it thanks

00:29:38,840 --> 00:29:43,600
everyone

00:29:41,520 --> 00:29:43,600

YouTube URL: https://www.youtube.com/watch?v=Be1Oik21mgs


