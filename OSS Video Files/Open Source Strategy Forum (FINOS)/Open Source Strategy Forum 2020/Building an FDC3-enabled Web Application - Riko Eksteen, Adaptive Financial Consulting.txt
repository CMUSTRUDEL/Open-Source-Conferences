Title: Building an FDC3-enabled Web Application - Riko Eksteen, Adaptive Financial Consulting
Publication date: 2020-11-19
Playlist: Open Source Strategy Forum 2020
Description: 
	Building an FDC3-enabled Web Application - Riko Eksteen, Adaptive Financial Consulting
Captions: 
	00:00:07,440 --> 00:00:10,800
hello everyone i'm really happy to be

00:00:09,679 --> 00:00:13,840
with you today

00:00:10,800 --> 00:00:14,960
my name is rico extin and today we're

00:00:13,840 --> 00:00:20,000
going to talk about

00:00:14,960 --> 00:00:20,000
building ftc3 enabled web applications

00:00:20,080 --> 00:00:26,480
about a year ago round about this time

00:00:23,119 --> 00:00:29,599
i was up on stage off-broadway new york

00:00:26,480 --> 00:00:32,719
at ossf 2019

00:00:29,599 --> 00:00:34,000
it was very exciting uh this year things

00:00:32,719 --> 00:00:37,200
are a bit different

00:00:34,000 --> 00:00:40,320
i'm doing this talk virtually but in

00:00:37,200 --> 00:00:42,399
in some ways uh i am

00:00:40,320 --> 00:00:44,239
even more excited about the talk this

00:00:42,399 --> 00:00:47,520
year because

00:00:44,239 --> 00:00:51,199
what i want to do today is make fdc3

00:00:47,520 --> 00:00:53,440
really practical for people in terms of

00:00:51,199 --> 00:00:58,640
a set of steps that you can use

00:00:53,440 --> 00:01:01,199
to build real ftc iii workflows

00:00:58,640 --> 00:01:02,640
so uh yeah what are we going to talk

00:01:01,199 --> 00:01:06,080
about today um

00:01:02,640 --> 00:01:08,479
first uh a short introduction to myself

00:01:06,080 --> 00:01:10,479
um and then we're gonna just briefly

00:01:08,479 --> 00:01:12,080
talk about why ftc3

00:01:10,479 --> 00:01:14,960
you know why should you be interested in

00:01:12,080 --> 00:01:18,320
ftc three why are we using it

00:01:14,960 --> 00:01:20,880
and then just a quick recap about

00:01:18,320 --> 00:01:22,799
what ftc iii is for people who are not

00:01:20,880 --> 00:01:25,360
that familiar with it

00:01:22,799 --> 00:01:26,400
and then i'm going to show you uh in

00:01:25,360 --> 00:01:30,960
five steps

00:01:26,400 --> 00:01:33,600
how you can build an ftc3 workflow

00:01:30,960 --> 00:01:34,479
then i'll um say something about fdc3 in

00:01:33,600 --> 00:01:37,360
practice

00:01:34,479 --> 00:01:39,759
uh in the out in the real world and how

00:01:37,360 --> 00:01:42,479
people are using it today

00:01:39,759 --> 00:01:44,000
and lastly um you know there will be

00:01:42,479 --> 00:01:45,759
some time for questions

00:01:44,000 --> 00:01:49,520
and i'll share my contact details with

00:01:45,759 --> 00:01:49,520
you in case you want to get in touch

00:01:50,479 --> 00:01:55,840
so a little bit about me i started out

00:01:53,759 --> 00:02:01,040
as a software developer in cape town

00:01:55,840 --> 00:02:02,640
um almost 18 years ago and

00:02:01,040 --> 00:02:04,799
i've been working in the financial

00:02:02,640 --> 00:02:08,000
industry in london for

00:02:04,799 --> 00:02:11,440
more than 15 years i started out

00:02:08,000 --> 00:02:16,319
doing everything from delphi and asp

00:02:11,440 --> 00:02:19,680
through to wpf and flash

00:02:16,319 --> 00:02:22,800
and nowadays i do html5 and

00:02:19,680 --> 00:02:23,520
and react you know but i've also done

00:02:22,800 --> 00:02:26,560
devops

00:02:23,520 --> 00:02:28,239
and backend services a whole lot of

00:02:26,560 --> 00:02:31,200
different things

00:02:28,239 --> 00:02:32,800
at adaptive financial consulting i'm the

00:02:31,200 --> 00:02:34,640
head of desktop strategy

00:02:32,800 --> 00:02:36,319
and what that means is that i've worked

00:02:34,640 --> 00:02:39,200
on several industry

00:02:36,319 --> 00:02:40,000
leading desktop platforms over the years

00:02:39,200 --> 00:02:42,319
and i

00:02:40,000 --> 00:02:43,920
advise clients on what desktop

00:02:42,319 --> 00:02:46,959
technologies to use

00:02:43,920 --> 00:02:50,480
um how to build collaborative workflows

00:02:46,959 --> 00:02:50,480
and and really how to

00:02:50,720 --> 00:02:55,680
put in place digital transformation in

00:02:53,599 --> 00:02:58,800
their organizations when it comes to

00:02:55,680 --> 00:03:01,200
their financial desktops

00:02:58,800 --> 00:03:04,159
at fenos it's my great privilege to be

00:03:01,200 --> 00:03:06,640
the co-chair of the ftc3 project

00:03:04,159 --> 00:03:07,519
and i am an active finos contributor

00:03:06,640 --> 00:03:11,680
you'll see a

00:03:07,519 --> 00:03:16,159
pull request from me every now and then

00:03:11,680 --> 00:03:19,280
but enough about me why fdc3

00:03:16,159 --> 00:03:22,959
why are we here today talking about it

00:03:19,280 --> 00:03:24,959
well uh what's interesting is that

00:03:22,959 --> 00:03:27,680
you know for a long time we've kind of

00:03:24,959 --> 00:03:30,239
been building um front-end systems this

00:03:27,680 --> 00:03:33,920
way you have a bunch of microservices

00:03:30,239 --> 00:03:35,599
and then you have a big monolithic

00:03:33,920 --> 00:03:37,280
application that aggregates all of those

00:03:35,599 --> 00:03:39,760
services together

00:03:37,280 --> 00:03:41,360
and um displays a single front-end to

00:03:39,760 --> 00:03:43,120
the user

00:03:41,360 --> 00:03:44,560
that might be a single-page web

00:03:43,120 --> 00:03:48,239
application uh

00:03:44,560 --> 00:03:51,440
and it um might be a rich wpf

00:03:48,239 --> 00:03:53,680
application on the desktop uh

00:03:51,440 --> 00:03:54,480
and this approach has um you know some

00:03:53,680 --> 00:03:57,519
advantages

00:03:54,480 --> 00:04:00,879
there's a single code base um it's often

00:03:57,519 --> 00:04:02,879
easier to to deploy that way um but it

00:04:00,879 --> 00:04:05,599
also becomes unwieldy over time

00:04:02,879 --> 00:04:06,799
and and it's sometimes difficult for um

00:04:05,599 --> 00:04:10,159
lots of people to

00:04:06,799 --> 00:04:13,439
work on this single application together

00:04:10,159 --> 00:04:14,080
so uh you know what we've seen over the

00:04:13,439 --> 00:04:17,040
last

00:04:14,080 --> 00:04:17,840
um two years or so maybe even a bit

00:04:17,040 --> 00:04:19,759
longer than that

00:04:17,840 --> 00:04:21,199
um in the financial industry is that

00:04:19,759 --> 00:04:25,280
people have started doing

00:04:21,199 --> 00:04:29,040
this type of thing where um you

00:04:25,280 --> 00:04:32,160
break things up into smaller pieces

00:04:29,040 --> 00:04:34,680
and you have individual micro front ends

00:04:32,160 --> 00:04:36,479
running on the desktop you kind of

00:04:34,680 --> 00:04:39,040
componentize your desktop

00:04:36,479 --> 00:04:43,520
into smaller pieces much like you do

00:04:39,040 --> 00:04:45,840
with microservices on the back end

00:04:43,520 --> 00:04:46,800
and the interesting thing to me about

00:04:45,840 --> 00:04:49,840
this approach

00:04:46,800 --> 00:04:51,759
is you know even if you think about the

00:04:49,840 --> 00:04:56,000
microservices on the back end

00:04:51,759 --> 00:04:59,199
is that just putting the components

00:04:56,000 --> 00:05:02,479
in place whether it's on the desktop or

00:04:59,199 --> 00:05:04,479
on the back end it's not necessarily

00:05:02,479 --> 00:05:07,440
enough by itself

00:05:04,479 --> 00:05:09,039
you need a way to orchestrate these

00:05:07,440 --> 00:05:12,560
components together

00:05:09,039 --> 00:05:15,199
you need a way to to discover them

00:05:12,560 --> 00:05:17,360
to make it easier to deploy them you

00:05:15,199 --> 00:05:19,360
need to establish patterns for them

00:05:17,360 --> 00:05:21,520
to communicate and collaborate with one

00:05:19,360 --> 00:05:24,800
another

00:05:21,520 --> 00:05:26,720
on the back end you know

00:05:24,800 --> 00:05:28,560
kubernetes is an example of an

00:05:26,720 --> 00:05:31,440
orchestrator that people often use

00:05:28,560 --> 00:05:34,560
nowadays to

00:05:31,440 --> 00:05:36,880
to manage their microservices

00:05:34,560 --> 00:05:38,400
and really the same thing is true of the

00:05:36,880 --> 00:05:41,280
front end

00:05:38,400 --> 00:05:43,440
you need an orchestrator to help you

00:05:41,280 --> 00:05:46,479
with the micro front ends that you want

00:05:43,440 --> 00:05:48,479
to deploy to desktops

00:05:46,479 --> 00:05:51,520
there are a lot of vendors that operate

00:05:48,479 --> 00:05:53,759
in the space that offer products

00:05:51,520 --> 00:05:54,720
that make it easier to deploy micro

00:05:53,759 --> 00:05:56,720
front ends

00:05:54,720 --> 00:05:58,080
for example in web containers running on

00:05:56,720 --> 00:06:00,240
the desktop

00:05:58,080 --> 00:06:03,600
they also help with things like like

00:06:00,240 --> 00:06:06,800
window management ease of deployment

00:06:03,600 --> 00:06:09,759
registering applications etc

00:06:06,800 --> 00:06:11,919
and this is really the space that ftc 3

00:06:09,759 --> 00:06:14,080
is targeted at

00:06:11,919 --> 00:06:15,759
it is an attempt to standardize the

00:06:14,080 --> 00:06:20,400
patterns that we use

00:06:15,759 --> 00:06:23,680
on desktops for um

00:06:20,400 --> 00:06:26,960
orchestrating uh micro front ends

00:06:23,680 --> 00:06:28,720
and it's particularly important in the

00:06:26,960 --> 00:06:30,479
financial industry because people have

00:06:28,720 --> 00:06:32,000
multiple monitors they're using

00:06:30,479 --> 00:06:34,160
applications from

00:06:32,000 --> 00:06:35,600
third parties multiple departments

00:06:34,160 --> 00:06:37,120
internally

00:06:35,600 --> 00:06:38,880
people want to do windowing and

00:06:37,120 --> 00:06:40,720
workspaces and all of these type of

00:06:38,880 --> 00:06:44,960
things

00:06:40,720 --> 00:06:48,560
so in ftc 3 there's a concept of a

00:06:44,960 --> 00:06:50,639
a desktop agent which is

00:06:48,560 --> 00:06:52,479
really a standardized way a standard

00:06:50,639 --> 00:06:56,560
context for managing

00:06:52,479 --> 00:06:56,560
front-end widgets or components

00:06:56,639 --> 00:07:03,039
and the true power of

00:07:00,120 --> 00:07:06,319
componentization comes

00:07:03,039 --> 00:07:09,599
when components don't work in isolation

00:07:06,319 --> 00:07:12,000
but when you can connect them together

00:07:09,599 --> 00:07:13,759
which is one of the most important parts

00:07:12,000 --> 00:07:18,039
of ftc3 is that it

00:07:13,759 --> 00:07:20,639
offers a way to a standard way for

00:07:18,039 --> 00:07:21,599
interoperability between components on

00:07:20,639 --> 00:07:24,000
the desktop

00:07:21,599 --> 00:07:25,360
and while the analogy isn't perfect i

00:07:24,000 --> 00:07:28,520
sometimes think of it

00:07:25,360 --> 00:07:29,919
as the equivalent of rest for

00:07:28,520 --> 00:07:31,680
microservices

00:07:29,919 --> 00:07:34,560
which is a way to pull microservices

00:07:31,680 --> 00:07:36,160
together ftc3 provides a standard way to

00:07:34,560 --> 00:07:40,240
do that

00:07:36,160 --> 00:07:40,240
when you're orchestrating on the desktop

00:07:40,400 --> 00:07:45,199
so why do we want to componentize

00:07:43,039 --> 00:07:47,520
components this way and compose them

00:07:45,199 --> 00:07:48,800
together this way

00:07:47,520 --> 00:07:50,560
it has several benefits for

00:07:48,800 --> 00:07:52,160
organizations and and really their

00:07:50,560 --> 00:07:54,240
analogies with some of the benefits you

00:07:52,160 --> 00:07:57,039
get from microservices

00:07:54,240 --> 00:07:59,280
one of them is that you can you can

00:07:57,039 --> 00:08:01,360
reduce costs this way

00:07:59,280 --> 00:08:02,560
you can work on particular desktop

00:08:01,360 --> 00:08:05,840
components

00:08:02,560 --> 00:08:06,960
independently which means that different

00:08:05,840 --> 00:08:10,000
teams can

00:08:06,960 --> 00:08:12,479
build different components in parallel

00:08:10,000 --> 00:08:14,240
you can release them independently uh

00:08:12,479 --> 00:08:17,199
they can be decoupled

00:08:14,240 --> 00:08:18,479
um you know which means that uh

00:08:17,199 --> 00:08:20,160
everything doesn't have to be

00:08:18,479 --> 00:08:22,639
necessarily on the same

00:08:20,160 --> 00:08:24,639
timeline and and you remove this new

00:08:22,639 --> 00:08:27,039
sort of big bang releases of a big

00:08:24,639 --> 00:08:29,680
monolithic ui

00:08:27,039 --> 00:08:31,199
you can use different technologies for

00:08:29,680 --> 00:08:32,959
different components and they can still

00:08:31,199 --> 00:08:35,839
all work together

00:08:32,959 --> 00:08:37,519
so we can just be much more efficient

00:08:35,839 --> 00:08:41,519
about how we build

00:08:37,519 --> 00:08:44,040
front-end components

00:08:41,519 --> 00:08:45,920
similarly we can unlock new

00:08:44,040 --> 00:08:48,480
opportunities

00:08:45,920 --> 00:08:49,519
we can pull together applications that

00:08:48,480 --> 00:08:52,480
were previously

00:08:49,519 --> 00:08:53,120
not able to pull together because they

00:08:52,480 --> 00:08:55,600
are built

00:08:53,120 --> 00:08:57,440
in different departments they're

00:08:55,600 --> 00:08:59,519
completely isolated from one another

00:08:57,440 --> 00:09:03,839
there's no way for them to interact

00:08:59,519 --> 00:09:06,080
with these type of patterns we can

00:09:03,839 --> 00:09:07,519
create new opportunities new user

00:09:06,080 --> 00:09:11,920
workflows by

00:09:07,519 --> 00:09:14,399
by connecting previously isolated pieces

00:09:11,920 --> 00:09:16,000
it also offers a path to migration for

00:09:14,399 --> 00:09:18,080
those

00:09:16,000 --> 00:09:19,760
big legacy applications which are so

00:09:18,080 --> 00:09:21,360
hard to make migrate because you can

00:09:19,760 --> 00:09:23,519
start to break things apart

00:09:21,360 --> 00:09:25,040
into smaller components still keep the

00:09:23,519 --> 00:09:28,160
workflows in place

00:09:25,040 --> 00:09:31,760
and um migrate them bit by bit or just

00:09:28,160 --> 00:09:32,399
the bits that make sense we can even

00:09:31,760 --> 00:09:34,560
have

00:09:32,399 --> 00:09:36,240
new opportunities in the industry across

00:09:34,560 --> 00:09:39,440
organizations for

00:09:36,240 --> 00:09:42,959
various vendor products um

00:09:39,440 --> 00:09:47,440
third-party systems stps to

00:09:42,959 --> 00:09:51,040
all work together

00:09:47,440 --> 00:09:53,040
and finally we can uh start to leverage

00:09:51,040 --> 00:09:56,000
network effects on our desktops

00:09:53,040 --> 00:09:58,240
my talk my talk at ossf last year was

00:09:56,000 --> 00:10:00,240
about leveraging the network effect so

00:09:58,240 --> 00:10:03,279
uh if you're interested in this please

00:10:00,240 --> 00:10:06,480
go and look up that talk on youtube

00:10:03,279 --> 00:10:09,600
you can you can find it there um

00:10:06,480 --> 00:10:12,880
and really all of that this is about is

00:10:09,600 --> 00:10:13,680
uh putting more nodes into place um

00:10:12,880 --> 00:10:15,360
connecting

00:10:13,680 --> 00:10:17,920
making more connections between those

00:10:15,360 --> 00:10:21,839
nodes and you start to reach a

00:10:17,920 --> 00:10:24,880
critical mass where you start seeing

00:10:21,839 --> 00:10:26,959
in the um exponential value from

00:10:24,880 --> 00:10:29,200
putting more pieces in place in your

00:10:26,959 --> 00:10:29,839
network and this effect is behind a lot

00:10:29,200 --> 00:10:33,760
of

00:10:29,839 --> 00:10:35,519
transformative movements in technology

00:10:33,760 --> 00:10:37,360
so we really want to create an

00:10:35,519 --> 00:10:40,560
environment where we can

00:10:37,360 --> 00:10:44,800
start leveraging that effect

00:10:40,560 --> 00:10:44,800
when we work with smaller components

00:10:45,120 --> 00:10:50,720
so what is ftc3 while uh

00:10:48,320 --> 00:10:52,320
uh it stands for the financial desktop

00:10:50,720 --> 00:10:53,600
connectivity and collaboration

00:10:52,320 --> 00:10:56,720
consortium

00:10:53,600 --> 00:10:57,760
and it was started by open fin in 2017

00:10:56,720 --> 00:11:00,240
and then

00:10:57,760 --> 00:11:01,279
contributed to the fintech open source

00:11:00,240 --> 00:11:04,720
foundation

00:11:01,279 --> 00:11:07,120
phenos and fdc3

00:11:04,720 --> 00:11:09,920
aims to establish open standards for the

00:11:07,120 --> 00:11:13,680
financial desktop

00:11:09,920 --> 00:11:16,959
the 1.0 specifications were released

00:11:13,680 --> 00:11:19,360
last year and adopted

00:11:16,959 --> 00:11:20,079
by quite a few organizations in april of

00:11:19,360 --> 00:11:23,200
this year we

00:11:20,079 --> 00:11:26,480
released the 1.1 specifications and

00:11:23,200 --> 00:11:29,360
the ftc 3 standards working group is

00:11:26,480 --> 00:11:30,800
actively working on the 1.2 version at

00:11:29,360 --> 00:11:34,880
the moment

00:11:30,800 --> 00:11:36,959
we have a web portal at ftc3.fenos.org

00:11:34,880 --> 00:11:38,560
where we've tried really hard to make it

00:11:36,959 --> 00:11:41,519
easy for people to

00:11:38,560 --> 00:11:43,600
understand ftc3 understand the patterns

00:11:41,519 --> 00:11:47,360
there's usage examples api

00:11:43,600 --> 00:11:50,160
references and other documentation

00:11:47,360 --> 00:11:51,920
please go and have a look get involved

00:11:50,160 --> 00:11:53,519
in the community

00:11:51,920 --> 00:11:54,959
it's all open source on github so

00:11:53,519 --> 00:11:57,440
everybody

00:11:54,959 --> 00:12:00,000
can can do pull requests contribute

00:11:57,440 --> 00:12:02,880
raise issues etc

00:12:00,000 --> 00:12:04,560
very recently uh we've been able to

00:12:02,880 --> 00:12:07,839
publish an npm package

00:12:04,560 --> 00:12:10,240
for ftc 3 which is something

00:12:07,839 --> 00:12:11,200
we've wanted to do for a long time and

00:12:10,240 --> 00:12:13,040
for those

00:12:11,200 --> 00:12:14,320
ftc 3 applications using web

00:12:13,040 --> 00:12:16,639
technologies

00:12:14,320 --> 00:12:18,000
this offers a great entry point and

00:12:16,639 --> 00:12:21,360
standardization

00:12:18,000 --> 00:12:24,720
of the types and operations you can use

00:12:21,360 --> 00:12:27,360
in an ftc 3 desktop context

00:12:24,720 --> 00:12:28,560
so we're quite excited to be able to

00:12:27,360 --> 00:12:31,760
offer that to people

00:12:28,560 --> 00:12:31,760
please go and check it out

00:12:33,600 --> 00:12:39,680
fdc3 is is made up out of

00:12:37,680 --> 00:12:40,880
four specifications really in the

00:12:39,680 --> 00:12:43,760
standard

00:12:40,880 --> 00:12:44,800
and the first one is the upper directory

00:12:43,760 --> 00:12:47,360
specification

00:12:44,800 --> 00:12:48,720
which just offers a shared way to

00:12:47,360 --> 00:12:52,240
register and discover

00:12:48,720 --> 00:12:55,680
applications the second specification

00:12:52,240 --> 00:12:57,519
um is the intense specification

00:12:55,680 --> 00:12:59,120
um if you've done android development in

00:12:57,519 --> 00:13:01,760
the past you might have come

00:12:59,120 --> 00:13:03,200
across intense the concept of intents

00:13:01,760 --> 00:13:05,600
and all they really are

00:13:03,200 --> 00:13:08,000
um are well-known verbs that you can

00:13:05,600 --> 00:13:11,200
invoke or reference

00:13:08,000 --> 00:13:16,480
so for example an application might

00:13:11,200 --> 00:13:19,200
raise the star chat intent or the

00:13:16,480 --> 00:13:20,160
view chart intent and these intents are

00:13:19,200 --> 00:13:23,440
examples of

00:13:20,160 --> 00:13:26,720
standard public ftc iii intents

00:13:23,440 --> 00:13:28,160
so their well-known applications can use

00:13:26,720 --> 00:13:30,800
them

00:13:28,160 --> 00:13:31,839
and another application will then be

00:13:30,800 --> 00:13:34,160
launched to

00:13:31,839 --> 00:13:35,760
respond to that intent with the idea

00:13:34,160 --> 00:13:36,720
that the applications don't need to know

00:13:35,760 --> 00:13:40,560
about each other

00:13:36,720 --> 00:13:40,560
they just need to know about the intent

00:13:40,800 --> 00:13:47,040
and what goes closely in hand with this

00:13:44,399 --> 00:13:48,800
is the data that you exchange as part of

00:13:47,040 --> 00:13:51,680
the intent being raised

00:13:48,800 --> 00:13:54,240
so you know if it's a star chat intent

00:13:51,680 --> 00:13:57,600
some information about the contact

00:13:54,240 --> 00:14:00,720
that you want to chat to if it's a

00:13:57,600 --> 00:14:02,480
view chart intent you might want to send

00:14:00,720 --> 00:14:04,959
the instrument information that you want

00:14:02,480 --> 00:14:08,240
to view the chart for

00:14:04,959 --> 00:14:11,440
so ftc provides a standard envelope for

00:14:08,240 --> 00:14:14,240
exchanging contextual data

00:14:11,440 --> 00:14:15,600
and it also includes some standardized

00:14:14,240 --> 00:14:17,519
contacts for things like

00:14:15,600 --> 00:14:18,880
instruments and contacts that people can

00:14:17,519 --> 00:14:23,120
use

00:14:18,880 --> 00:14:25,440
and finally there's a shared set of

00:14:23,120 --> 00:14:26,480
deliberately small and lightweight

00:14:25,440 --> 00:14:28,639
operations

00:14:26,480 --> 00:14:30,320
that applications can use to collaborate

00:14:28,639 --> 00:14:33,440
with ftc3

00:14:30,320 --> 00:14:35,440
and ftc 3 is agnostic of which

00:14:33,440 --> 00:14:36,720
desktop environment or which technology

00:14:35,440 --> 00:14:39,760
it's running in

00:14:36,720 --> 00:14:39,760
a lot of people use

00:14:39,839 --> 00:14:44,240
web technology to to write desktop

00:14:42,160 --> 00:14:46,320
applications at the moment so

00:14:44,240 --> 00:14:47,920
that's where we see it use most common

00:14:46,320 --> 00:14:50,000
but you can also use

00:14:47,920 --> 00:14:52,720
the apis and the other specifications

00:14:50,000 --> 00:14:55,760
with for example.net applications

00:14:52,720 --> 00:14:55,760
running on the desktop

00:14:56,320 --> 00:15:00,800
so that's three um let's let's try and

00:14:59,120 --> 00:15:04,399
make things practical now

00:15:00,800 --> 00:15:07,279
um so what i want to do today is

00:15:04,399 --> 00:15:07,920
share just five steps with you that you

00:15:07,279 --> 00:15:10,560
can

00:15:07,920 --> 00:15:12,079
follow for building ftc three enabled

00:15:10,560 --> 00:15:16,240
web applications

00:15:12,079 --> 00:15:18,959
and the key point here is really that

00:15:16,240 --> 00:15:21,519
we're not building a single application

00:15:18,959 --> 00:15:24,000
but we're building a workflow

00:15:21,519 --> 00:15:26,240
when you're doing componentized desktops

00:15:24,000 --> 00:15:29,839
and interoperability on the desktop

00:15:26,240 --> 00:15:32,720
uh you're really thinking about how

00:15:29,839 --> 00:15:35,120
multiple applications work together

00:15:32,720 --> 00:15:36,880
so you're not designing the behavior and

00:15:35,120 --> 00:15:38,880
the look and feel of a

00:15:36,880 --> 00:15:40,079
single application anymore you you're

00:15:38,880 --> 00:15:41,839
designing the

00:15:40,079 --> 00:15:43,759
collective behavior and look and feel of

00:15:41,839 --> 00:15:47,680
multiple applications

00:15:43,759 --> 00:15:50,399
and the designing the workflow is an

00:15:47,680 --> 00:15:51,600
important step that that people often

00:15:50,399 --> 00:15:53,519
miss out

00:15:51,600 --> 00:15:55,279
you've got to think carefully about how

00:15:53,519 --> 00:15:57,519
everything is going to interact

00:15:55,279 --> 00:15:59,570
because that informs everything else so

00:15:57,519 --> 00:16:00,800
we're going to start off by doing that

00:15:59,570 --> 00:16:03,040
[Music]

00:16:00,800 --> 00:16:04,399
then we're going to define the actions

00:16:03,040 --> 00:16:05,600
that the applications are going to use

00:16:04,399 --> 00:16:07,360
to collaborate

00:16:05,600 --> 00:16:09,120
we're going to model the data for those

00:16:07,360 --> 00:16:11,680
actions we're going to register

00:16:09,120 --> 00:16:12,800
the applications with the ftc 3 desktop

00:16:11,680 --> 00:16:15,839
agent

00:16:12,800 --> 00:16:20,720
and finally we're going to use the ftc

00:16:15,839 --> 00:16:20,720
380 apis to make it all come together

00:16:21,199 --> 00:16:27,600
so the workflow i've chosen for today

00:16:24,480 --> 00:16:30,160
uh is an ftc3

00:16:27,600 --> 00:16:31,680
trading app um with which you can trade

00:16:30,160 --> 00:16:33,680
fx currency pairs

00:16:31,680 --> 00:16:34,880
so there's some streaming prices you can

00:16:33,680 --> 00:16:38,560
click buy or sell and

00:16:34,880 --> 00:16:39,759
then then it will say that there's a

00:16:38,560 --> 00:16:43,440
pending trade

00:16:39,759 --> 00:16:45,279
for a particular notional at that price

00:16:43,440 --> 00:16:48,079
the buttons then become disabled while

00:16:45,279 --> 00:16:51,920
that trade is pending

00:16:48,079 --> 00:16:55,360
this will then um launch automatically

00:16:51,920 --> 00:16:56,160
dynamically an execution app which will

00:16:55,360 --> 00:16:59,199
receive

00:16:56,160 --> 00:17:02,399
the information about the trade that

00:16:59,199 --> 00:17:05,120
that needs to be done and that trade can

00:17:02,399 --> 00:17:07,919
then be accepted or rejected

00:17:05,120 --> 00:17:08,559
which will remove it from the status and

00:17:07,919 --> 00:17:11,600
add it

00:17:08,559 --> 00:17:12,480
to the trade blotter and then it will

00:17:11,600 --> 00:17:14,959
return

00:17:12,480 --> 00:17:15,520
the um the status either accept or

00:17:14,959 --> 00:17:18,720
reject

00:17:15,520 --> 00:17:19,600
for of the trade to the trading

00:17:18,720 --> 00:17:23,360
application

00:17:19,600 --> 00:17:23,360
which will update its status

00:17:23,679 --> 00:17:29,440
so this is a relatively

00:17:27,199 --> 00:17:31,600
contrived example but i wanted to

00:17:29,440 --> 00:17:34,080
simplify things down

00:17:31,600 --> 00:17:35,840
to something that is nice and simple for

00:17:34,080 --> 00:17:39,120
us to work with

00:17:35,840 --> 00:17:40,880
in the real world the same person

00:17:39,120 --> 00:17:42,559
might not do all of these actions and

00:17:40,880 --> 00:17:46,480
what might not all

00:17:42,559 --> 00:17:48,880
be happening on the same desktop but um

00:17:46,480 --> 00:17:50,000
yeah i think if we if we follow the

00:17:48,880 --> 00:17:53,120
steps that i

00:17:50,000 --> 00:17:53,440
mentioned um for this workflow uh it

00:17:53,120 --> 00:17:55,919
will

00:17:53,440 --> 00:17:57,039
help to illustrate how you can do some

00:17:55,919 --> 00:18:00,320
similar things with

00:17:57,039 --> 00:18:03,280
real workflows

00:18:00,320 --> 00:18:03,840
so um now we need to define the actions

00:18:03,280 --> 00:18:06,799
that the

00:18:03,840 --> 00:18:08,240
applications need to collaborate and how

00:18:06,799 --> 00:18:10,080
do we start with that

00:18:08,240 --> 00:18:12,400
well the great thing is we now have a

00:18:10,080 --> 00:18:15,520
workflow so we can use that

00:18:12,400 --> 00:18:16,880
to help inform the actions that need to

00:18:15,520 --> 00:18:20,240
take place

00:18:16,880 --> 00:18:23,360
so the first thing is the trading app

00:18:20,240 --> 00:18:24,640
needs to raise an intent so that the

00:18:23,360 --> 00:18:26,799
execution app

00:18:24,640 --> 00:18:28,000
can come up and respond to that so we're

00:18:26,799 --> 00:18:30,000
gonna call that

00:18:28,000 --> 00:18:32,480
intent execute trade we're going to

00:18:30,000 --> 00:18:34,400
raise and execute trade intent

00:18:32,480 --> 00:18:35,679
and that's going to carry along the data

00:18:34,400 --> 00:18:37,679
of the trade that

00:18:35,679 --> 00:18:39,280
needs to be executed so that the other

00:18:37,679 --> 00:18:42,000
application can use it

00:18:39,280 --> 00:18:43,120
and then when the user clicks accept or

00:18:42,000 --> 00:18:46,480
reject

00:18:43,120 --> 00:18:50,240
it needs to return the trade result

00:18:46,480 --> 00:18:50,240
to the original application

00:18:50,320 --> 00:18:57,760
now at the moment in ftc 3 1.1

00:18:53,600 --> 00:19:01,360
um intents are sort of one way

00:18:57,760 --> 00:19:02,320
they don't return data but in ftc 3 1.2

00:19:01,360 --> 00:19:05,440
we're currently

00:19:02,320 --> 00:19:08,559
working on intense battery

00:19:05,440 --> 00:19:11,760
return data because this is a

00:19:08,559 --> 00:19:13,039
ftc 1.1 workflow um i'm going to use a

00:19:11,760 --> 00:19:17,360
different mechanism from

00:19:13,039 --> 00:19:19,919
from ftc through fdc3 to return the data

00:19:17,360 --> 00:19:21,120
um and this is uh called channels or

00:19:19,919 --> 00:19:24,720
broadcasting

00:19:21,120 --> 00:19:25,440
so we can create um what's called an app

00:19:24,720 --> 00:19:27,280
channel

00:19:25,440 --> 00:19:28,960
which is a channel that both

00:19:27,280 --> 00:19:32,000
applications know about

00:19:28,960 --> 00:19:35,520
um and we can return the trade result

00:19:32,000 --> 00:19:38,400
via that channel and this is also serves

00:19:35,520 --> 00:19:39,120
um to show off a bit more about the

00:19:38,400 --> 00:19:42,480
available

00:19:39,120 --> 00:19:43,919
ftc 3 apis so

00:19:42,480 --> 00:19:46,000
we know that the two actions we're going

00:19:43,919 --> 00:19:47,919
to need are to raise an intent and to

00:19:46,000 --> 00:19:50,400
broadcast on a channel

00:19:47,919 --> 00:19:51,280
and for each of these actions we

00:19:50,400 --> 00:19:54,240
basically need an

00:19:51,280 --> 00:19:55,919
identifier so in the case of raising an

00:19:54,240 --> 00:19:57,360
intent we've already said this is the

00:19:55,919 --> 00:20:00,559
execute trade

00:19:57,360 --> 00:20:03,760
intent that we're going to define

00:20:00,559 --> 00:20:04,799
and along with that intent we need to

00:20:03,760 --> 00:20:07,440
define the

00:20:04,799 --> 00:20:08,960
data that will come with it and how that

00:20:07,440 --> 00:20:10,799
payload looks and we're going to call

00:20:08,960 --> 00:20:13,919
that a trade request

00:20:10,799 --> 00:20:16,480
so for the raise intent action

00:20:13,919 --> 00:20:18,480
the identify and the data is really the

00:20:16,480 --> 00:20:20,080
only two things that both applications

00:20:18,480 --> 00:20:21,280
need to know about they don't need to

00:20:20,080 --> 00:20:24,799
know

00:20:21,280 --> 00:20:28,720
about anything else or about each other

00:20:24,799 --> 00:20:28,720
but these are the two pieces of shared

00:20:29,039 --> 00:20:35,600
and agreed data or identifiers

00:20:32,840 --> 00:20:38,080
that the collaboration is going to be

00:20:35,600 --> 00:20:38,080
based on

00:20:38,320 --> 00:20:43,840
for the broadcast on the channel

00:20:41,520 --> 00:20:45,679
we need to agree what to call the

00:20:43,840 --> 00:20:47,039
channel so that both applications can

00:20:45,679 --> 00:20:48,640
reference it so we're going to call it

00:20:47,039 --> 00:20:51,520
the trade result channel

00:20:48,640 --> 00:20:52,080
that's going to be its identifier and we

00:20:51,520 --> 00:20:54,480
need to

00:20:52,080 --> 00:20:56,320
model a trade result that can be

00:20:54,480 --> 00:20:58,799
exchanged on that channel

00:20:56,320 --> 00:21:00,400
so for the two actions these are the

00:20:58,799 --> 00:21:04,080
four pieces of

00:21:00,400 --> 00:21:04,559
um data that are the minimum that we

00:21:04,080 --> 00:21:07,039
need to

00:21:04,559 --> 00:21:09,440
to couple and connect this workflow

00:21:07,039 --> 00:21:09,440
together

00:21:10,640 --> 00:21:16,240
right so how do we model a trade request

00:21:13,520 --> 00:21:19,360
now that we know we need it

00:21:16,240 --> 00:21:20,799
so in ftc 3 we've adopted json schema to

00:21:19,360 --> 00:21:24,960
help model data

00:21:20,799 --> 00:21:27,200
and some of the existing ftc 3

00:21:24,960 --> 00:21:29,679
data types are modeled with json schema

00:21:27,200 --> 00:21:32,080
it's not the only way to do it

00:21:29,679 --> 00:21:32,799
but like i've come to kind of like jason

00:21:32,080 --> 00:21:35,039
schema

00:21:32,799 --> 00:21:36,960
i find it intuitive and logical once you

00:21:35,039 --> 00:21:38,640
understand how it works

00:21:36,960 --> 00:21:40,559
and i'm going to try and show you today

00:21:38,640 --> 00:21:43,760
how you can use it to

00:21:40,559 --> 00:21:45,600
model the trade request so

00:21:43,760 --> 00:21:47,600
to start off with you need to say what

00:21:45,600 --> 00:21:49,919
version of the schema you're using

00:21:47,600 --> 00:21:52,159
um and the identifier of the schema and

00:21:49,919 --> 00:21:54,320
then just that we're

00:21:52,159 --> 00:21:56,000
modeling an object which we're going to

00:21:54,320 --> 00:21:59,919
call trade requests so that's kind of

00:21:56,000 --> 00:22:02,000
the header of the schema so

00:21:59,919 --> 00:22:03,200
this is the first nice thing is we can

00:22:02,000 --> 00:22:06,159
now reference

00:22:03,200 --> 00:22:06,799
existing ftc 3 schemas to help us in

00:22:06,159 --> 00:22:09,039
this case

00:22:06,799 --> 00:22:10,240
what i'm saying is i'm going to base my

00:22:09,039 --> 00:22:13,600
schema on

00:22:10,240 --> 00:22:16,960
the 3 1.1

00:22:13,600 --> 00:22:19,440
base context schema um

00:22:16,960 --> 00:22:20,080
so that has the minimum properties that

00:22:19,440 --> 00:22:23,120
an

00:22:20,080 --> 00:22:26,799
ftc 3 context type needs to have

00:22:23,120 --> 00:22:29,840
um and really all that is in that schema

00:22:26,799 --> 00:22:32,240
is a a type property which is

00:22:29,840 --> 00:22:34,559
needs to be a string which identifies

00:22:32,240 --> 00:22:38,480
the type of data we're exchanging

00:22:34,559 --> 00:22:40,080
so when we are extending that schema

00:22:38,480 --> 00:22:41,520
into a trade request we're going to be a

00:22:40,080 --> 00:22:42,240
bit more specific and we're going to say

00:22:41,520 --> 00:22:44,400
well

00:22:42,240 --> 00:22:45,840
it's not any string anymore we know what

00:22:44,400 --> 00:22:49,120
the type is in this case

00:22:45,840 --> 00:22:50,240
it's an adaptive.traderequest and here

00:22:49,120 --> 00:22:53,360
we're using a convention

00:22:50,240 --> 00:22:56,320
in ftc3 which is to prefix that

00:22:53,360 --> 00:22:58,240
context types with the organization

00:22:56,320 --> 00:23:01,520
who's defining the type so that

00:22:58,240 --> 00:23:04,880
standardized ftc three schemas um

00:23:01,520 --> 00:23:08,440
use ftc3 dot and then the name of

00:23:04,880 --> 00:23:10,480
the type so we're gonna have an

00:23:08,440 --> 00:23:11,679
adaptive.traderequest type on our

00:23:10,480 --> 00:23:14,960
payload

00:23:11,679 --> 00:23:17,520
and then um what ftc3 also has is

00:23:14,960 --> 00:23:18,159
sort of a bag of identifiers for this

00:23:17,520 --> 00:23:21,679
data

00:23:18,159 --> 00:23:23,440
which applications can use to decide if

00:23:21,679 --> 00:23:26,559
the data is relevant to them

00:23:23,440 --> 00:23:29,200
um so in our case we are just going to

00:23:26,559 --> 00:23:32,559
require that there's a trade request id

00:23:29,200 --> 00:23:33,919
uh as um as a minimum

00:23:32,559 --> 00:23:36,000
uh that's going to be the only

00:23:33,919 --> 00:23:37,520
identifier for this

00:23:36,000 --> 00:23:39,280
object that we're going to require

00:23:37,520 --> 00:23:41,919
applications can stick other things in

00:23:39,280 --> 00:23:45,679
in that bag if they want to but

00:23:41,919 --> 00:23:48,000
this is our only requirement and then

00:23:45,679 --> 00:23:49,279
we need to represent the instrument that

00:23:48,000 --> 00:23:51,679
is being traded and

00:23:49,279 --> 00:23:53,600
here is a great example of how we can

00:23:51,679 --> 00:23:56,640
compose more complex types

00:23:53,600 --> 00:23:58,960
from existing ftc 3 context types so

00:23:56,640 --> 00:24:00,559
i'm using the ftc 3 1.1 instrument

00:23:58,960 --> 00:24:01,840
schema here and i'm just saying

00:24:00,559 --> 00:24:03,679
we're going to have an instrument

00:24:01,840 --> 00:24:08,320
property which has

00:24:03,679 --> 00:24:11,360
an object which has the shape of an ftc3

00:24:08,320 --> 00:24:13,520
instrument schema then we're going to

00:24:11,360 --> 00:24:15,919
add some additional things like

00:24:13,520 --> 00:24:18,720
is it a buy or sell what the notional is

00:24:15,919 --> 00:24:21,520
what the price is uh

00:24:18,720 --> 00:24:23,919
and if i want to i can also use some

00:24:21,520 --> 00:24:25,679
other ftc three schemas to represent the

00:24:23,919 --> 00:24:26,480
counterparty or the contact for the

00:24:25,679 --> 00:24:28,320
trade

00:24:26,480 --> 00:24:29,760
i'm not using that in this workflow but

00:24:28,320 --> 00:24:32,880
i just wanted to show

00:24:29,760 --> 00:24:33,360
um how you can use composition to build

00:24:32,880 --> 00:24:36,480
up

00:24:33,360 --> 00:24:38,080
you know complex types so um

00:24:36,480 --> 00:24:40,000
for this example they're not going to be

00:24:38,080 --> 00:24:42,559
required as part of

00:24:40,000 --> 00:24:44,080
the data type so i haven't included the

00:24:42,559 --> 00:24:46,159
counterparty or contact

00:24:44,080 --> 00:24:48,640
in the required list of properties but

00:24:46,159 --> 00:24:51,919
they can still be used

00:24:48,640 --> 00:24:53,679
optionally so there's our trade request

00:24:51,919 --> 00:24:56,480
schema

00:24:53,679 --> 00:24:58,080
how would that look in practice uh well

00:24:56,480 --> 00:24:59,440
there's an example of a trade request

00:24:58,080 --> 00:25:02,240
that adheres to the schema

00:24:59,440 --> 00:25:03,600
so there's the type at the top the um

00:25:02,240 --> 00:25:06,080
identifiers which

00:25:03,600 --> 00:25:08,320
includes the trade request id the

00:25:06,080 --> 00:25:11,279
instrument which uses the shape of an

00:25:08,320 --> 00:25:13,600
ftc 3 instrument schema

00:25:11,279 --> 00:25:14,720
and then decide notional price and the

00:25:13,600 --> 00:25:17,760
counterparty

00:25:14,720 --> 00:25:19,840
i'm just to show how that would look and

00:25:17,760 --> 00:25:21,919
there's our trade request

00:25:19,840 --> 00:25:23,600
for trade result it's much the same

00:25:21,919 --> 00:25:25,440
thing

00:25:23,600 --> 00:25:28,000
we're going to have a type which in this

00:25:25,440 --> 00:25:30,080
case is adaptive or trade result um

00:25:28,000 --> 00:25:31,600
we're going to have some identifiers

00:25:30,080 --> 00:25:33,520
let's say in this case we kind of want

00:25:31,600 --> 00:25:34,640
to know both the trade id and the trade

00:25:33,520 --> 00:25:37,919
request id

00:25:34,640 --> 00:25:40,720
for this trade result and now i can

00:25:37,919 --> 00:25:43,279
reuse my trade request schema

00:25:40,720 --> 00:25:44,960
in this trade results schema by just

00:25:43,279 --> 00:25:46,480
referencing it so i can say there's

00:25:44,960 --> 00:25:50,320
going to be a trade request

00:25:46,480 --> 00:25:51,200
which is going to have um an object that

00:25:50,320 --> 00:25:55,200
appears to the

00:25:51,200 --> 00:25:57,120
trade request schema inside it and i

00:25:55,200 --> 00:25:58,559
might want to add the status which is

00:25:57,120 --> 00:26:02,240
accepted or rejected

00:25:58,559 --> 00:26:06,000
and the timestamp for the trade to that

00:26:02,240 --> 00:26:10,080
so that gives me my trade results schema

00:26:06,000 --> 00:26:13,600
and now we're done modeling the data um

00:26:10,080 --> 00:26:14,640
and uh what i want to show you now um is

00:26:13,600 --> 00:26:16,799
quite a cool

00:26:14,640 --> 00:26:20,000
little tool that we've used in a few um

00:26:16,799 --> 00:26:23,039
projects uh that are ftc3 related

00:26:20,000 --> 00:26:27,120
um and this tool is called quick type

00:26:23,039 --> 00:26:27,679
and it can be used to to generate code

00:26:27,120 --> 00:26:29,760
from

00:26:27,679 --> 00:26:31,520
json schema for the types that you want

00:26:29,760 --> 00:26:33,200
to use in applications

00:26:31,520 --> 00:26:35,520
so i'm just going to quickly show that

00:26:33,200 --> 00:26:35,520
to you

00:26:35,760 --> 00:26:39,279
what i've got here is the same trade

00:26:37,760 --> 00:26:42,799
request schema that we've just

00:26:39,279 --> 00:26:44,880
modeled and by just sticking it into

00:26:42,799 --> 00:26:46,720
quick type it will generate um

00:26:44,880 --> 00:26:50,880
typescript types for me

00:26:46,720 --> 00:26:50,880
and a utility method to

00:26:51,279 --> 00:26:59,120
uh go from and to json payloads

00:26:55,120 --> 00:27:01,200
uh with those types um so

00:26:59,120 --> 00:27:03,039
that is quite cool i think um you can

00:27:01,200 --> 00:27:06,400
also do things like

00:27:03,039 --> 00:27:09,039
say that you wanted to verify

00:27:06,400 --> 00:27:10,640
it validate it according to the schema

00:27:09,039 --> 00:27:12,720
if you wanted to it will generate all of

00:27:10,640 --> 00:27:15,520
that code for you

00:27:12,720 --> 00:27:17,840
and it really works for just about any

00:27:15,520 --> 00:27:20,320
language that you want to use

00:27:17,840 --> 00:27:21,919
so for example if you want to generate

00:27:20,320 --> 00:27:25,760
the code in java

00:27:21,919 --> 00:27:27,840
it will use jackson to and do all of the

00:27:25,760 --> 00:27:30,399
formatters for you to

00:27:27,840 --> 00:27:32,080
serialize and deserialize to and from

00:27:30,399 --> 00:27:35,760
json

00:27:32,080 --> 00:27:39,440
um similarly if you're using c-sharp

00:27:35,760 --> 00:27:41,360
you know it will use json.net to create

00:27:39,440 --> 00:27:43,039
the types with the right attributes for

00:27:41,360 --> 00:27:45,440
you um

00:27:43,039 --> 00:27:46,640
and quick type is a open source project

00:27:45,440 --> 00:27:49,279
it's on github and

00:27:46,640 --> 00:27:51,120
it is also an npm package with a command

00:27:49,279 --> 00:27:55,279
line tool that you can install

00:27:51,120 --> 00:27:58,159
to to use it in your projects um

00:27:55,279 --> 00:27:59,919
so that's quick type uh it's a nice tool

00:27:58,159 --> 00:28:02,559
when you're doing data modeling to then

00:27:59,919 --> 00:28:04,320
use those types in your code

00:28:02,559 --> 00:28:07,679
and that what that's what we've done in

00:28:04,320 --> 00:28:11,120
this example as well

00:28:07,679 --> 00:28:12,720
so what have we done so far we have

00:28:11,120 --> 00:28:15,120
we've designed the workflow that we're

00:28:12,720 --> 00:28:18,880
going to use we've

00:28:15,120 --> 00:28:20,799
defined the actions for that workflow

00:28:18,880 --> 00:28:23,520
and we've modeled the data that those

00:28:20,799 --> 00:28:26,320
actions are going to use

00:28:23,520 --> 00:28:26,720
now we need to register our applications

00:28:26,320 --> 00:28:30,000
with

00:28:26,720 --> 00:28:34,080
the ftc 3 desktop agent why

00:28:30,000 --> 00:28:36,000
do we need to do that well

00:28:34,080 --> 00:28:37,200
if you think about it what what's really

00:28:36,000 --> 00:28:39,919
happening here is that

00:28:37,200 --> 00:28:40,880
one application is going to raise an

00:28:39,919 --> 00:28:42,960
intent

00:28:40,880 --> 00:28:44,240
and then the other application is going

00:28:42,960 --> 00:28:47,360
to magically

00:28:44,240 --> 00:28:51,279
appear what's happening

00:28:47,360 --> 00:28:52,960
happening in reality is there's an ftc3

00:28:51,279 --> 00:28:54,720
compliant app directory

00:28:52,960 --> 00:28:57,279
which has a record of all of the

00:28:54,720 --> 00:29:00,000
applications and

00:28:57,279 --> 00:29:02,240
when one applications raises an intent

00:29:00,000 --> 00:29:05,679
the desktop agent is going to

00:29:02,240 --> 00:29:08,880
use the app directory to find

00:29:05,679 --> 00:29:09,600
the right application to raise that will

00:29:08,880 --> 00:29:13,200
accept that

00:29:09,600 --> 00:29:16,240
intent so the app directory

00:29:13,200 --> 00:29:17,760
is uh an open api rest schema so it's

00:29:16,240 --> 00:29:20,880
sitting somewhere in the cloud

00:29:17,760 --> 00:29:22,799
and it will um the applications are

00:29:20,880 --> 00:29:24,880
registered with it and the desktop agent

00:29:22,799 --> 00:29:27,520
use it to

00:29:24,880 --> 00:29:28,240
pull the workflows together uh you know

00:29:27,520 --> 00:29:30,480
so

00:29:28,240 --> 00:29:32,000
if we've registered our trading app with

00:29:30,480 --> 00:29:34,880
it um it will then

00:29:32,000 --> 00:29:35,760
go and um find the right app to meet the

00:29:34,880 --> 00:29:38,880
intent and

00:29:35,760 --> 00:29:40,799
launch it um on demand

00:29:38,880 --> 00:29:42,240
so to make it work what we've got to do

00:29:40,799 --> 00:29:45,760
is we've just got to add

00:29:42,240 --> 00:29:46,320
um a record with the rest api or with

00:29:45,760 --> 00:29:49,120
the ui

00:29:46,320 --> 00:29:51,039
to the app directory uh with the

00:29:49,120 --> 00:29:52,720
identifier for the app the name for the

00:29:51,039 --> 00:29:55,679
app the manifest

00:29:52,720 --> 00:29:57,440
um for example you know it will have

00:29:55,679 --> 00:30:01,279
windowing information

00:29:57,440 --> 00:30:03,600
um etc that is needed to launch the app

00:30:01,279 --> 00:30:04,640
and other properties like icons or

00:30:03,600 --> 00:30:07,440
descriptions

00:30:04,640 --> 00:30:08,080
that you need might need or use for an

00:30:07,440 --> 00:30:11,360
application

00:30:08,080 --> 00:30:12,960
launcher uh but you know those are

00:30:11,360 --> 00:30:15,279
sort of the minimum things you you need

00:30:12,960 --> 00:30:17,600
to define for the app

00:30:15,279 --> 00:30:20,799
and then for the execution app we need a

00:30:17,600 --> 00:30:20,799
little bit more than that

00:30:21,279 --> 00:30:26,559
we need to to tell the um

00:30:24,480 --> 00:30:28,080
app directory and the desktop agent

00:30:26,559 --> 00:30:31,679
which intense

00:30:28,080 --> 00:30:35,600
this app responds to so that it

00:30:31,679 --> 00:30:37,840
it knows to launch the app on demand

00:30:35,600 --> 00:30:40,000
so in this case we're going to add

00:30:37,840 --> 00:30:40,559
execute trade intent to the intense

00:30:40,000 --> 00:30:43,600
array

00:30:40,559 --> 00:30:44,640
for this application and we're also

00:30:43,600 --> 00:30:48,960
going to say that

00:30:44,640 --> 00:30:52,000
the contexts that this app understands

00:30:48,960 --> 00:30:54,399
for the execute trade intent

00:30:52,000 --> 00:30:55,200
is the adaptive.trade request that we've

00:30:54,399 --> 00:30:58,480
defined

00:30:55,200 --> 00:31:02,080
i can specify as many contacts as i want

00:30:58,480 --> 00:31:04,000
but the key thing here is that

00:31:02,080 --> 00:31:05,279
the desktop agent can use this

00:31:04,000 --> 00:31:07,919
information to route

00:31:05,279 --> 00:31:10,399
to the right application uh and now you

00:31:07,919 --> 00:31:12,960
also understand why the type property of

00:31:10,399 --> 00:31:14,159
of context data in ftc 3 is the only

00:31:12,960 --> 00:31:17,360
required

00:31:14,159 --> 00:31:20,080
bit because it's used for

00:31:17,360 --> 00:31:22,080
filtering and routing requests between

00:31:20,080 --> 00:31:24,720
applications

00:31:22,080 --> 00:31:27,120
right so doing this we've registered our

00:31:24,720 --> 00:31:29,039
applications with the app directory

00:31:27,120 --> 00:31:30,320
and now the only thing that's left to do

00:31:29,039 --> 00:31:34,799
is to actually

00:31:30,320 --> 00:31:37,840
write the code and use the ftc3 apis to

00:31:34,799 --> 00:31:40,799
put the workflow together so

00:31:37,840 --> 00:31:42,640
that's easier than it might sound

00:31:40,799 --> 00:31:44,000
there's just a few operations we need to

00:31:42,640 --> 00:31:47,360
use

00:31:44,000 --> 00:31:49,440
to start off with we probably um

00:31:47,360 --> 00:31:50,880
both applications need a reference to

00:31:49,440 --> 00:31:53,440
this channel that has been

00:31:50,880 --> 00:31:56,399
agreed ahead of time so that the trade

00:31:53,440 --> 00:31:58,840
result can be exchanged

00:31:56,399 --> 00:32:01,360
so having got a reference to that

00:31:58,840 --> 00:32:03,200
channel the trading app then wants to

00:32:01,360 --> 00:32:05,200
add a context listener for the

00:32:03,200 --> 00:32:06,159
adaptive.trade result type that we've

00:32:05,200 --> 00:32:09,679
defined

00:32:06,159 --> 00:32:11,440
um so that it can receive it and

00:32:09,679 --> 00:32:13,279
so that it can then update the status

00:32:11,440 --> 00:32:14,320
about whether the tray has been accepted

00:32:13,279 --> 00:32:17,360
or rejected

00:32:14,320 --> 00:32:20,559
and it probably wants to do to do this

00:32:17,360 --> 00:32:22,640
uh before it raises the intent because

00:32:20,559 --> 00:32:24,720
um if it does it after raising the

00:32:22,640 --> 00:32:26,320
intent it might miss the trade result

00:32:24,720 --> 00:32:29,840
while it's still setting up the listener

00:32:26,320 --> 00:32:29,840
so we're doing it ahead of time

00:32:30,480 --> 00:32:34,960
then we're going to you know build up

00:32:32,559 --> 00:32:38,320
the trade request according to the

00:32:34,960 --> 00:32:40,399
schema that we've defined and then

00:32:38,320 --> 00:32:42,159
we just raise the intent the execute

00:32:40,399 --> 00:32:44,080
trade intent and we pass it the trade

00:32:42,159 --> 00:32:47,519
request

00:32:44,080 --> 00:32:50,240
that the other application will need

00:32:47,519 --> 00:32:51,679
all that the execution app needs to do

00:32:50,240 --> 00:32:53,679
is

00:32:51,679 --> 00:32:55,440
it needs to set up an intent listener

00:32:53,679 --> 00:32:58,240
for the execute trade intent

00:32:55,440 --> 00:32:59,919
and it will receive the trade request

00:32:58,240 --> 00:33:03,360
and then

00:32:59,919 --> 00:33:05,279
you know it displays it and the user

00:33:03,360 --> 00:33:07,760
accepts or rejects the trade

00:33:05,279 --> 00:33:09,600
so we build up the trade result we embed

00:33:07,760 --> 00:33:10,640
the trade request in it according to our

00:33:09,600 --> 00:33:13,919
schema

00:33:10,640 --> 00:33:17,120
and then we are going to

00:33:13,919 --> 00:33:19,679
broadcast the trade result back

00:33:17,120 --> 00:33:21,360
to the trading app on the channel that

00:33:19,679 --> 00:33:23,360
we've defined

00:33:21,360 --> 00:33:25,840
at which point it will go to the context

00:33:23,360 --> 00:33:27,840
listener on the trading app

00:33:25,840 --> 00:33:30,720
and that's all we need to that's all we

00:33:27,840 --> 00:33:30,960
need to do um we've now um followed all

00:33:30,720 --> 00:33:34,880
of

00:33:30,960 --> 00:33:38,399
the steps to build our ftc 3 workflow

00:33:34,880 --> 00:33:41,840
so yeah let's see it in action

00:33:38,399 --> 00:33:45,120
i'm going to show you a demo

00:33:41,840 --> 00:33:45,919
of this trade workflow now that follows

00:33:45,120 --> 00:33:51,120
these steps

00:33:45,919 --> 00:33:54,240
that we've defined right

00:33:51,120 --> 00:33:57,360
uh so what i've got here is a

00:33:54,240 --> 00:34:00,159
sandbox that we use at adaptive to um

00:33:57,360 --> 00:34:02,240
to test and and experiment with ftc3

00:34:00,159 --> 00:34:04,640
applications

00:34:02,240 --> 00:34:05,600
and this sandbox just runs in the

00:34:04,640 --> 00:34:07,600
browser

00:34:05,600 --> 00:34:09,280
it opens other browser windows and it

00:34:07,600 --> 00:34:12,480
uses post message

00:34:09,280 --> 00:34:15,359
to communicate between windows

00:34:12,480 --> 00:34:17,440
so this just goes to show that ftc 3

00:34:15,359 --> 00:34:19,119
isn't opinionated about what desktop

00:34:17,440 --> 00:34:22,800
framework it is running in

00:34:19,119 --> 00:34:23,440
um it just provides uh the the standards

00:34:22,800 --> 00:34:26,639
and and

00:34:23,440 --> 00:34:28,240
the connectivity to to bring the

00:34:26,639 --> 00:34:32,639
workflows together

00:34:28,240 --> 00:34:35,760
so um from this desktop agent um

00:34:32,639 --> 00:34:39,119
from the sandbox uh i can launch

00:34:35,760 --> 00:34:42,720
my trading app um i can

00:34:39,119 --> 00:34:45,599
launch my execution app right

00:34:42,720 --> 00:34:48,000
and what you will see is um i'm now

00:34:45,599 --> 00:34:50,960
going to try and do a trade and and show

00:34:48,000 --> 00:34:52,560
off the workflow as we've designed it so

00:34:50,960 --> 00:34:55,119
here i'm going to click sell and it's

00:34:52,560 --> 00:34:57,520
going to say that the trade is pending

00:34:55,119 --> 00:34:58,640
um but the top problem is that the

00:34:57,520 --> 00:35:01,599
execution app

00:34:58,640 --> 00:35:03,040
hasn't come up to respond to that and

00:35:01,599 --> 00:35:05,839
the reason for that

00:35:03,040 --> 00:35:08,640
is that i haven't written that code yet

00:35:05,839 --> 00:35:12,560
and we're now going to do that together

00:35:08,640 --> 00:35:14,800
so what i've got here is the code for

00:35:12,560 --> 00:35:16,880
the trading app and the execution app

00:35:14,800 --> 00:35:18,000
they're both relatively simple react

00:35:16,880 --> 00:35:21,280
applications

00:35:18,000 --> 00:35:22,640
uh that use react hooks um to wire

00:35:21,280 --> 00:35:26,079
everything together

00:35:22,640 --> 00:35:30,240
um so they both define some state

00:35:26,079 --> 00:35:33,599
um and what you will see here is that

00:35:30,240 --> 00:35:36,240
both applications um get the trade

00:35:33,599 --> 00:35:40,720
results channel that we've defined

00:35:36,240 --> 00:35:41,280
um and then the trading app sets up a

00:35:40,720 --> 00:35:43,119
context

00:35:41,280 --> 00:35:44,880
listener for the trade result and if it

00:35:43,119 --> 00:35:46,560
receives a trade result it will add it

00:35:44,880 --> 00:35:49,760
to the state

00:35:46,560 --> 00:35:53,040
and and this is the code for

00:35:49,760 --> 00:35:55,520
handling a trade so when

00:35:53,040 --> 00:35:57,599
a trade button is clicked we build up

00:35:55,520 --> 00:35:59,680
the trade request with the information

00:35:57,599 --> 00:36:02,240
from that trade action like the side and

00:35:59,680 --> 00:36:05,760
the notion on the price

00:36:02,240 --> 00:36:08,240
and we set it as the pending trade

00:36:05,760 --> 00:36:10,000
but now we need to raise the intent so

00:36:08,240 --> 00:36:12,560
that it can transfer to the other

00:36:10,000 --> 00:36:15,920
application so i'm going to do that now

00:36:12,560 --> 00:36:18,400
so i'm going to say await ftc3

00:36:15,920 --> 00:36:19,520
dot raise intent and the intent i want

00:36:18,400 --> 00:36:22,720
to raise is called

00:36:19,520 --> 00:36:26,960
execute trade oops and

00:36:22,720 --> 00:36:30,400
i am going to pass our trade request

00:36:26,960 --> 00:36:33,680
to the intent so i'm going to

00:36:30,400 --> 00:36:36,720
save this file this is

00:36:33,680 --> 00:36:38,240
uh live watching the code the web

00:36:36,720 --> 00:36:41,680
application

00:36:38,240 --> 00:36:42,720
so hopefully uh if the live watching

00:36:41,680 --> 00:36:46,160
works correctly

00:36:42,720 --> 00:36:49,040
um by adding this line and it will now

00:36:46,160 --> 00:36:51,280
my workflow will now work correctly so

00:36:49,040 --> 00:36:54,320
let's see if that worked

00:36:51,280 --> 00:36:57,280
um so i'm just going to close it down

00:36:54,320 --> 00:36:57,280
and open it again

00:36:58,000 --> 00:37:01,280
right so let's see if that works oh it

00:37:00,720 --> 00:37:03,359
worked

00:37:01,280 --> 00:37:04,880
so just by raising the intent the

00:37:03,359 --> 00:37:07,040
desktop agent has now

00:37:04,880 --> 00:37:08,560
brought forward the right application

00:37:07,040 --> 00:37:12,720
it's displaying

00:37:08,560 --> 00:37:14,560
the data and i can now accept or reject

00:37:12,720 --> 00:37:16,000
this might not be a surprise to you but

00:37:14,560 --> 00:37:18,640
when i accept or

00:37:16,000 --> 00:37:20,400
or reject it's going to add the trade to

00:37:18,640 --> 00:37:22,160
the plotter but it doesn't report back

00:37:20,400 --> 00:37:24,160
to the original application

00:37:22,160 --> 00:37:26,400
and again that's because i haven't

00:37:24,160 --> 00:37:30,320
implemented that bit yet

00:37:26,400 --> 00:37:30,320
so i'm going to do that now

00:37:31,440 --> 00:37:38,320
so on this side is the execution app

00:37:34,960 --> 00:37:39,839
we've taken the channel we've added to

00:37:38,320 --> 00:37:42,079
the application state

00:37:39,839 --> 00:37:43,920
we've set up an intent listener and when

00:37:42,079 --> 00:37:46,400
the trade request comes in

00:37:43,920 --> 00:37:47,520
uh we're adding it to the application

00:37:46,400 --> 00:37:49,359
state so

00:37:47,520 --> 00:37:50,720
here i'm going to handle the trade

00:37:49,359 --> 00:37:53,280
execution when you click

00:37:50,720 --> 00:37:55,280
the accept or reject button so we're

00:37:53,280 --> 00:37:56,880
building up our trade result according

00:37:55,280 --> 00:37:57,359
to the schema we're putting our trade

00:37:56,880 --> 00:37:59,359
request

00:37:57,359 --> 00:38:01,040
inside it along with the status whether

00:37:59,359 --> 00:38:03,359
it's except reject

00:38:01,040 --> 00:38:04,800
um here we're adding it to the blotter

00:38:03,359 --> 00:38:07,040
so what i need to do

00:38:04,800 --> 00:38:08,720
now is i need to use the channel that

00:38:07,040 --> 00:38:14,240
i've got a reference to

00:38:08,720 --> 00:38:17,839
and just broadcast back the trade result

00:38:14,240 --> 00:38:20,480
which will hopefully hit the

00:38:17,839 --> 00:38:22,000
context listener on the other side so

00:38:20,480 --> 00:38:22,960
i'm going to do that now i'm going to

00:38:22,000 --> 00:38:24,800
save it

00:38:22,960 --> 00:38:26,160
again if the live watching is working

00:38:24,800 --> 00:38:29,200
correctly and

00:38:26,160 --> 00:38:31,440
the workflow should now work so i'm

00:38:29,200 --> 00:38:35,520
going to close this guy down

00:38:31,440 --> 00:38:37,920
let's just reload this guy right

00:38:35,520 --> 00:38:39,359
so let's see if our workflow works so

00:38:37,920 --> 00:38:42,000
i'm going to buy the trade

00:38:39,359 --> 00:38:44,320
i'm going to reject it and now this

00:38:42,000 --> 00:38:46,800
application is updated with the status

00:38:44,320 --> 00:38:49,359
so just with that i've implemented my

00:38:46,800 --> 00:38:51,520
workflow using the ftc 3 apis

00:38:49,359 --> 00:38:52,640
the desktop agent is smart enough to

00:38:51,520 --> 00:38:55,200
know

00:38:52,640 --> 00:38:56,240
if i do it again that this application

00:38:55,200 --> 00:38:58,079
is already

00:38:56,240 --> 00:39:01,119
running it doesn't have to launch it

00:38:58,079 --> 00:39:01,680
again and i can it can just do the same

00:39:01,119 --> 00:39:04,960
thing

00:39:01,680 --> 00:39:08,560
over again right so there's my

00:39:04,960 --> 00:39:11,760
ftc three workflow implemented

00:39:08,560 --> 00:39:13,520
um and just to show you that ftc3 isn't

00:39:11,760 --> 00:39:14,079
opinionated about what desktop

00:39:13,520 --> 00:39:17,920
environment

00:39:14,079 --> 00:39:20,880
it runs in i'm now going to be brave and

00:39:17,920 --> 00:39:25,040
try and run this workflow in another

00:39:20,880 --> 00:39:28,160
desktop agent um

00:39:25,040 --> 00:39:30,160
openfin in this case and i'm going to

00:39:28,160 --> 00:39:30,880
use the same applications and register

00:39:30,160 --> 00:39:33,920
them with

00:39:30,880 --> 00:39:37,760
the ftc 3 app directory of open fin

00:39:33,920 --> 00:39:43,040
and hopefully that will work

00:39:37,760 --> 00:39:43,680
so let's bring up my console so what i'm

00:39:43,040 --> 00:39:47,200
going to do

00:39:43,680 --> 00:39:49,280
now is i'm going to say

00:39:47,200 --> 00:39:51,599
i'm going to run everything up in open

00:39:49,280 --> 00:39:51,599
fin

00:39:54,560 --> 00:39:59,440
and so this is now the same sandbox that

00:39:58,079 --> 00:40:01,200
is running in open fin

00:39:59,440 --> 00:40:02,720
um but in this case it's just an

00:40:01,200 --> 00:40:04,880
application now and

00:40:02,720 --> 00:40:07,040
it's delegating all desktop agent

00:40:04,880 --> 00:40:09,440
responsibilities to open fin who

00:40:07,040 --> 00:40:11,119
which is acting as a desktop agent now

00:40:09,440 --> 00:40:12,960
so i'm no longer running in a browser

00:40:11,119 --> 00:40:16,079
window i'm running on an open fin

00:40:12,960 --> 00:40:18,400
window on the desktop and

00:40:16,079 --> 00:40:20,319
i should still be able to launch my app

00:40:18,400 --> 00:40:24,000
just like before

00:40:20,319 --> 00:40:24,560
and it will come up and if i click buy a

00:40:24,000 --> 00:40:26,880
cell

00:40:24,560 --> 00:40:29,040
it will still use raise intent but in

00:40:26,880 --> 00:40:30,640
this case open fin will resolve that

00:40:29,040 --> 00:40:32,319
intent and should launch the right

00:40:30,640 --> 00:40:36,319
application for me

00:40:32,319 --> 00:40:40,000
so if i do that the execution app

00:40:36,319 --> 00:40:40,640
comes up and i can now accept or reject

00:40:40,000 --> 00:40:43,440
the trade

00:40:40,640 --> 00:40:43,839
and it worked just like i've showed you

00:40:43,440 --> 00:40:47,599
but

00:40:43,839 --> 00:40:50,480
it's now doing it in a different

00:40:47,599 --> 00:40:50,880
desktop agent because both are using the

00:40:50,480 --> 00:40:54,560
same

00:40:50,880 --> 00:40:59,920
ftc3 standards and that's really

00:40:54,560 --> 00:41:03,520
the true power and beauty of ftc3

00:40:59,920 --> 00:41:07,040
right so

00:41:03,520 --> 00:41:10,079
so that's our trade workflow

00:41:07,040 --> 00:41:11,040
so just to summarize um we've gone

00:41:10,079 --> 00:41:13,760
through five steps

00:41:11,040 --> 00:41:14,560
to build an ftc three workflow and i

00:41:13,760 --> 00:41:17,920
just

00:41:14,560 --> 00:41:21,040
want to list them again and notice how

00:41:17,920 --> 00:41:23,440
each step follows into the next one so

00:41:21,040 --> 00:41:26,079
this kind of a logical order to them

00:41:23,440 --> 00:41:29,200
we design the workflow which then helps

00:41:26,079 --> 00:41:31,920
us to define the actions we want to use

00:41:29,200 --> 00:41:31,920
which then

00:41:32,240 --> 00:41:37,359
determines how we model the data

00:41:35,359 --> 00:41:38,400
then we register the applications with

00:41:37,359 --> 00:41:41,839
the types

00:41:38,400 --> 00:41:46,160
that we've defined and then we can use

00:41:41,839 --> 00:41:46,160
the ftc3 apis for the workflow

00:41:47,440 --> 00:41:52,400
so just to show that this is not all

00:41:50,880 --> 00:41:55,839
smoke and mirrors um

00:41:52,400 --> 00:41:57,760
i want to show uh just to tell you about

00:41:55,839 --> 00:41:59,680
a project that i've worked on where we

00:41:57,760 --> 00:42:02,079
used ftc3 in practice

00:41:59,680 --> 00:42:04,960
in the real world for a successful

00:42:02,079 --> 00:42:06,560
project that adaptive has done

00:42:04,960 --> 00:42:08,880
very often we can't talk about the

00:42:06,560 --> 00:42:11,359
projects we do for our clients

00:42:08,880 --> 00:42:12,319
but in this particular case the client

00:42:11,359 --> 00:42:14,800
at west markets

00:42:12,319 --> 00:42:16,640
has agreed to do some publicity with us

00:42:14,800 --> 00:42:17,760
and i can tell you about the scout

00:42:16,640 --> 00:42:19,680
project

00:42:17,760 --> 00:42:21,200
there's a case study on our website

00:42:19,680 --> 00:42:22,480
which you can go and download and read

00:42:21,200 --> 00:42:25,839
more about it

00:42:22,480 --> 00:42:28,000
and what we built um i uh

00:42:25,839 --> 00:42:29,040
was involved with this project and and i

00:42:28,000 --> 00:42:31,839
was the tech lead

00:42:29,040 --> 00:42:34,800
for this project along with some people

00:42:31,839 --> 00:42:37,920
at adaptive and that was markets

00:42:34,800 --> 00:42:40,400
we put in place a full desktop workflow

00:42:37,920 --> 00:42:43,680
incorporating the symphony chat platform

00:42:40,400 --> 00:42:45,440
open finland ensemble and rfq desktop

00:42:43,680 --> 00:42:49,359
components some of which were written

00:42:45,440 --> 00:42:52,960
in um wpf and some which were written

00:42:49,359 --> 00:42:55,599
in web technologies with with react

00:42:52,960 --> 00:42:59,119
running on the desktop

00:42:55,599 --> 00:42:59,760
and for this we used um ftc three

00:42:59,119 --> 00:43:02,319
intents

00:42:59,760 --> 00:43:04,319
we used the ftc three context data

00:43:02,319 --> 00:43:06,319
schemas and modeled some data we used

00:43:04,319 --> 00:43:10,400
the ftc three apis

00:43:06,319 --> 00:43:12,960
and uh it was a wonderful workflow where

00:43:10,400 --> 00:43:14,880
um you know uk sales people could chat

00:43:12,960 --> 00:43:17,680
to customers in symphony

00:43:14,880 --> 00:43:18,160
um and at the click of a button they

00:43:17,680 --> 00:43:20,960
could

00:43:18,160 --> 00:43:22,960
transfer into um components running on

00:43:20,960 --> 00:43:26,800
the desktop where they can do pricing

00:43:22,960 --> 00:43:27,520
and then send um those uh prices for an

00:43:26,800 --> 00:43:30,079
rfq

00:43:27,520 --> 00:43:30,880
back to um to the customer they were

00:43:30,079 --> 00:43:33,839
talking out

00:43:30,880 --> 00:43:34,240
all seamlessly all done with ftc three

00:43:33,839 --> 00:43:37,680
and

00:43:34,240 --> 00:43:40,800
um and desktop agents uh yeah so

00:43:37,680 --> 00:43:46,000
that was a a very successful project and

00:43:40,800 --> 00:43:48,800
it shows how people are leveraging ftc3

00:43:46,000 --> 00:43:51,359
in the real world to to solve problems

00:43:48,800 --> 00:43:53,599
on the desktop

00:43:51,359 --> 00:43:54,800
and that's really what what we do at

00:43:53,599 --> 00:43:58,000
adaptive we

00:43:54,800 --> 00:44:00,720
we um you know deliver bespoke software

00:43:58,000 --> 00:44:02,800
solutions for our clients we've been

00:44:00,720 --> 00:44:05,839
doing it for more than eight years

00:44:02,800 --> 00:44:09,119
um we've you know delivered more than

00:44:05,839 --> 00:44:11,359
75 solutions of

00:44:09,119 --> 00:44:13,359
i i counted them and i think at least 18

00:44:11,359 --> 00:44:14,079
of those were desktop integration

00:44:13,359 --> 00:44:15,760
projects

00:44:14,079 --> 00:44:17,520
using many of the same patterns and

00:44:15,760 --> 00:44:21,040
approaches that i've talked

00:44:17,520 --> 00:44:24,079
with you about today and so much more

00:44:21,040 --> 00:44:26,160
uh so if you uh

00:44:24,079 --> 00:44:28,079
want to come and speak to us about a

00:44:26,160 --> 00:44:29,280
similar project at your organization

00:44:28,079 --> 00:44:31,440
please do so

00:44:29,280 --> 00:44:32,480
uh we we'd be more than happy to talk to

00:44:31,440 --> 00:44:36,160
you and and

00:44:32,480 --> 00:44:37,839
and help you with that uh uh in addition

00:44:36,160 --> 00:44:40,079
uh you know we're willing to share our

00:44:37,839 --> 00:44:40,640
expertise with the community we can come

00:44:40,079 --> 00:44:43,040
and do

00:44:40,640 --> 00:44:46,160
a presentation inside your organization

00:44:43,040 --> 00:44:50,079
about ftc three about desktop strategy

00:44:46,160 --> 00:44:50,640
um and uh you know we've also offered to

00:44:50,079 --> 00:44:53,520
do

00:44:50,640 --> 00:44:54,319
workshops and training for organizations

00:44:53,520 --> 00:44:55,920
about

00:44:54,319 --> 00:44:58,000
ftc three whether that's for your

00:44:55,920 --> 00:45:00,079
developers or your stakeholders

00:44:58,000 --> 00:45:02,960
uh please get in touch with us if you're

00:45:00,079 --> 00:45:02,960
interested in that

00:45:03,520 --> 00:45:08,400
uh yeah so so that's everything um i've

00:45:06,480 --> 00:45:10,480
put my contact details up there

00:45:08,400 --> 00:45:12,800
uh if you'd like to me uh to send me a

00:45:10,480 --> 00:45:13,520
message to ask a question um or to

00:45:12,800 --> 00:45:16,480
comment

00:45:13,520 --> 00:45:18,319
uh please feel free to do so um it's

00:45:16,480 --> 00:45:19,280
been wonderful to be able to speak to

00:45:18,319 --> 00:45:30,720
you today and

00:45:19,280 --> 00:45:30,720

YouTube URL: https://www.youtube.com/watch?v=BJvbVeL7ZJA


