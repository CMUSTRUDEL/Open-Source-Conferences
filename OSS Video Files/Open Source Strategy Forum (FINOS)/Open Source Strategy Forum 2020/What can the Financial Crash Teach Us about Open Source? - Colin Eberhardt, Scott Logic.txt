Title: What can the Financial Crash Teach Us about Open Source? - Colin Eberhardt, Scott Logic
Publication date: 2020-11-19
Playlist: Open Source Strategy Forum 2020
Description: 
	What can the Financial Crash Teach Us about Open Source? - Colin Eberhardt, Scott Logic
Captions: 
	00:00:06,799 --> 00:00:09,200
hi

00:00:07,520 --> 00:00:10,800
my name is colin eberhardt and i'm going

00:00:09,200 --> 00:00:11,599
to talk to you today about the software

00:00:10,800 --> 00:00:13,679
crisis

00:00:11,599 --> 00:00:15,280
or what the financial crash can teach us

00:00:13,679 --> 00:00:17,119
about open source

00:00:15,280 --> 00:00:19,840
and apologies for the slightly less than

00:00:17,119 --> 00:00:19,840
cheery title

00:00:19,920 --> 00:00:23,199
by way of introduction as i mentioned my

00:00:22,000 --> 00:00:25,519
name is connor eberhardt

00:00:23,199 --> 00:00:27,439
and i'm the technology director of a

00:00:25,519 --> 00:00:29,279
company called scotlogic

00:00:27,439 --> 00:00:30,960
we're a growing uk-based software

00:00:29,279 --> 00:00:33,120
consultancy that works predominantly

00:00:30,960 --> 00:00:35,120
within the financial services community

00:00:33,120 --> 00:00:36,239
and i've been working there for many

00:00:35,120 --> 00:00:37,680
many years

00:00:36,239 --> 00:00:39,440
and some of the experiences that i've

00:00:37,680 --> 00:00:41,600
had from working with our

00:00:39,440 --> 00:00:43,280
our financial services our banking

00:00:41,600 --> 00:00:45,280
clients are very much reflected in this

00:00:43,280 --> 00:00:46,879
talk

00:00:45,280 --> 00:00:48,559
but also to tell you a little bit about

00:00:46,879 --> 00:00:51,199
myself this talk is

00:00:48,559 --> 00:00:52,879
is very much an intersection of of my

00:00:51,199 --> 00:00:55,920
day job and my personal passion

00:00:52,879 --> 00:00:57,840
open source is something that i'm i'm

00:00:55,920 --> 00:00:59,199
heavily involved with i've been working

00:00:57,840 --> 00:01:02,239
in open source for more than

00:00:59,199 --> 00:01:04,080
25 years now i think my first project

00:01:02,239 --> 00:01:06,960
or my first open source project was one

00:01:04,080 --> 00:01:08,799
written in php about 20 years ago

00:01:06,960 --> 00:01:12,479
and before that i used to write a lot of

00:01:08,799 --> 00:01:13,600
freeware and shareware software i also

00:01:12,479 --> 00:01:16,159
really enjoy

00:01:13,600 --> 00:01:17,680
data mining and exploring data sets and

00:01:16,159 --> 00:01:18,880
as you'll see in this talk some of these

00:01:17,680 --> 00:01:22,400
interests

00:01:18,880 --> 00:01:22,400
are certainly coming together here

00:01:23,520 --> 00:01:27,119
so back to the topic of the talk itself

00:01:25,439 --> 00:01:27,520
what the financial crash can teach us

00:01:27,119 --> 00:01:29,759
about

00:01:27,520 --> 00:01:31,600
open source what i want to do is tell

00:01:29,759 --> 00:01:33,520
you a bit of a story here

00:01:31,600 --> 00:01:35,119
for a while i've been getting a little

00:01:33,520 --> 00:01:36,079
bit concerned about the overall

00:01:35,119 --> 00:01:38,640
complexity

00:01:36,079 --> 00:01:40,240
of our open source software and it's not

00:01:38,640 --> 00:01:41,040
just open source software that's getting

00:01:40,240 --> 00:01:42,960
more complex

00:01:41,040 --> 00:01:44,799
software architectures in general seem

00:01:42,960 --> 00:01:47,119
to be getting more complex

00:01:44,799 --> 00:01:49,040
we're we're gravitating more towards

00:01:47,119 --> 00:01:50,640
microservice architectures where

00:01:49,040 --> 00:01:53,280
where we take a monolith and we pull it

00:01:50,640 --> 00:01:56,079
apart into numerous components

00:01:53,280 --> 00:01:58,159
also cloud architectures tend to be

00:01:56,079 --> 00:02:00,079
really quite complex involving a great

00:01:58,159 --> 00:02:01,920
many different components and

00:02:00,079 --> 00:02:04,479
generally speaking this is a good thing

00:02:01,920 --> 00:02:06,560
however complex architectures

00:02:04,479 --> 00:02:08,080
complex software can be hard to

00:02:06,560 --> 00:02:11,360
understand it can be difficult

00:02:08,080 --> 00:02:13,120
to use safely before i use

00:02:11,360 --> 00:02:15,520
a particular open source project or a

00:02:13,120 --> 00:02:18,319
library i often ask myself

00:02:15,520 --> 00:02:20,239
who writes this code who maintains it is

00:02:18,319 --> 00:02:22,640
this a sustainable project and

00:02:20,239 --> 00:02:24,239
ultimately am i going to regret using it

00:02:22,640 --> 00:02:25,200
is it going to start to fall apart

00:02:24,239 --> 00:02:28,879
underneath me

00:02:25,200 --> 00:02:31,120
and that does happen all too often

00:02:28,879 --> 00:02:33,040
so that's the complexity and also the

00:02:31,120 --> 00:02:34,319
fragility complex structures have

00:02:33,040 --> 00:02:37,360
weaknesses

00:02:34,319 --> 00:02:40,239
they fall apart security and

00:02:37,360 --> 00:02:41,440
maintenance problems are are prevalent

00:02:40,239 --> 00:02:43,680
within open source

00:02:41,440 --> 00:02:45,280
and finally sustainability and i'm not

00:02:43,680 --> 00:02:47,200
just thinking about the sustainability

00:02:45,280 --> 00:02:48,720
of my own projects that use open source

00:02:47,200 --> 00:02:50,480
i'm thinking about the sustainability of

00:02:48,720 --> 00:02:52,800
the ecosystem as a whole

00:02:50,480 --> 00:02:55,680
how do we create a sustainable open

00:02:52,800 --> 00:02:55,680
source economy

00:02:57,519 --> 00:03:01,360
so i decided to do a bit of an

00:02:59,920 --> 00:03:02,800
exploration myself

00:03:01,360 --> 00:03:04,239
i wanted to learn more about this

00:03:02,800 --> 00:03:04,640
problem and the best way to learn about

00:03:04,239 --> 00:03:07,280
it is

00:03:04,640 --> 00:03:08,879
is to start exploring exploring the data

00:03:07,280 --> 00:03:11,200
and exploring the community

00:03:08,879 --> 00:03:12,319
so i decided to do a bit of a deep dive

00:03:11,200 --> 00:03:14,239
and the project i

00:03:12,319 --> 00:03:16,319
picked is express and the reason i

00:03:14,239 --> 00:03:16,879
picked it is because it's a project that

00:03:16,319 --> 00:03:19,440
i've used

00:03:16,879 --> 00:03:20,560
a number of times myself if you're not

00:03:19,440 --> 00:03:22,640
familiar with it

00:03:20,560 --> 00:03:23,920
express is basically the de facto web

00:03:22,640 --> 00:03:25,680
server for node

00:03:23,920 --> 00:03:27,280
if you're trying if you want to create

00:03:25,680 --> 00:03:28,799
an http server with node

00:03:27,280 --> 00:03:30,400
you'll almost certainly end up using

00:03:28,799 --> 00:03:33,120
express

00:03:30,400 --> 00:03:34,159
it's clearly an important project on

00:03:33,120 --> 00:03:37,280
github it has

00:03:34,159 --> 00:03:39,040
50 000 stars it's downloaded 14 million

00:03:37,280 --> 00:03:41,840
times every single week

00:03:39,040 --> 00:03:45,120
it's also 10 years old so so quite a

00:03:41,840 --> 00:03:47,440
quite a mature project

00:03:45,120 --> 00:03:48,159
so my initial impressions as i started

00:03:47,440 --> 00:03:50,400
this journey

00:03:48,159 --> 00:03:52,000
it's it's fair to say i was i was

00:03:50,400 --> 00:03:53,519
clearly happy at the beginning i'm a

00:03:52,000 --> 00:03:55,360
repeat user of express

00:03:53,519 --> 00:03:57,280
and the reason for that is i'm happy

00:03:55,360 --> 00:03:59,519
with the functions and the features that

00:03:57,280 --> 00:04:01,280
it provides for me

00:03:59,519 --> 00:04:02,560
so what i wanted to do was start

00:04:01,280 --> 00:04:04,640
learning how

00:04:02,560 --> 00:04:06,480
is express constructed what are the

00:04:04,640 --> 00:04:08,799
component parts of express

00:04:06,480 --> 00:04:09,599
so i started to look at its overall

00:04:08,799 --> 00:04:13,120
composition

00:04:09,599 --> 00:04:16,000
i started to look at its dependencies

00:04:13,120 --> 00:04:17,519
so express is composed of 49 separate

00:04:16,000 --> 00:04:20,320
modules

00:04:17,519 --> 00:04:21,759
when you install express the the top

00:04:20,320 --> 00:04:23,280
level module is installed

00:04:21,759 --> 00:04:24,880
and this this is accompanied with

00:04:23,280 --> 00:04:27,520
effectively a bill of materials

00:04:24,880 --> 00:04:28,000
and another 13 modules are installed and

00:04:27,520 --> 00:04:29,680
then

00:04:28,000 --> 00:04:31,040
further transitive dependencies are

00:04:29,680 --> 00:04:33,600
installed and

00:04:31,040 --> 00:04:36,160
and the total composition of express is

00:04:33,600 --> 00:04:38,240
49 separate modules

00:04:36,160 --> 00:04:40,320
this is really quite typical and it's

00:04:38,240 --> 00:04:42,240
not specific to the javascript ecosystem

00:04:40,320 --> 00:04:44,720
we see similar things happening in rust

00:04:42,240 --> 00:04:47,520
python and and other sort of modern

00:04:44,720 --> 00:04:50,560
software tool chains

00:04:47,520 --> 00:04:52,400
so i was also interested to see how this

00:04:50,560 --> 00:04:55,600
complexity evolves over time

00:04:52,400 --> 00:04:56,560
so i downloaded all of the 163 releases

00:04:55,600 --> 00:04:59,199
of express

00:04:56,560 --> 00:04:59,759
over the past 10 years and as you can

00:04:59,199 --> 00:05:02,000
see

00:04:59,759 --> 00:05:03,600
the complexity of express into in terms

00:05:02,000 --> 00:05:04,000
of the number of dependencies that it

00:05:03,600 --> 00:05:06,320
has

00:05:04,000 --> 00:05:07,280
the number of modules that that form its

00:05:06,320 --> 00:05:10,479
total composition

00:05:07,280 --> 00:05:12,960
is growing over time if we look back at

00:05:10,479 --> 00:05:14,560
version 2 which is almost 10 years ago

00:05:12,960 --> 00:05:16,560
it was composed of

00:05:14,560 --> 00:05:18,160
four or five modules version three more

00:05:16,560 --> 00:05:20,160
like 10 and then

00:05:18,160 --> 00:05:21,440
the number of modules grew and grew and

00:05:20,160 --> 00:05:23,600
grew over time

00:05:21,440 --> 00:05:25,280
interestingly at version four clearly

00:05:23,600 --> 00:05:25,919
there was some sort of consolidation

00:05:25,280 --> 00:05:27,919
effort

00:05:25,919 --> 00:05:30,160
and the number of modules drastically

00:05:27,919 --> 00:05:32,720
reduced and then it started to

00:05:30,160 --> 00:05:34,000
increase once again and this is

00:05:32,720 --> 00:05:35,600
reflected throughout

00:05:34,000 --> 00:05:37,840
the open source community from my

00:05:35,600 --> 00:05:39,680
personal experience

00:05:37,840 --> 00:05:41,680
our open source software is becoming

00:05:39,680 --> 00:05:44,000
more modular it's it's

00:05:41,680 --> 00:05:46,800
it's more sort of composed of of

00:05:44,000 --> 00:05:48,960
disparate parts

00:05:46,800 --> 00:05:50,800
so this is clearly the way things work

00:05:48,960 --> 00:05:53,600
at the moment but i must admit

00:05:50,800 --> 00:05:54,240
i'm starting to feel a little uneasy if

00:05:53,600 --> 00:05:56,400
i want to

00:05:54,240 --> 00:05:58,319
gain an understanding of the maturity or

00:05:56,400 --> 00:06:00,080
the sustainability of express

00:05:58,319 --> 00:06:03,199
i'm not checking just one project

00:06:00,080 --> 00:06:05,440
anymore i'm checking 49.

00:06:03,199 --> 00:06:07,840
now if i want to do something pretty

00:06:05,440 --> 00:06:09,600
simple say for example i need to

00:06:07,840 --> 00:06:11,600
check that the licenses for each of

00:06:09,600 --> 00:06:12,639
these modules comply with my own

00:06:11,600 --> 00:06:14,639
policies

00:06:12,639 --> 00:06:16,560
that's relatively straightforward to

00:06:14,639 --> 00:06:18,880
check i can automate that

00:06:16,560 --> 00:06:20,479
i must admit i've used automated license

00:06:18,880 --> 00:06:23,039
checkers on a number of projects

00:06:20,479 --> 00:06:24,080
and it's quite surprising how often

00:06:23,039 --> 00:06:25,919
you'll find one that

00:06:24,080 --> 00:06:27,440
that perhaps doesn't have a license at

00:06:25,919 --> 00:06:30,960
all or has a particularly

00:06:27,440 --> 00:06:34,160
problematic license or is public domain

00:06:30,960 --> 00:06:36,720
however license checking is relatively

00:06:34,160 --> 00:06:40,319
easy the answer is somewhat binary it's

00:06:36,720 --> 00:06:43,520
yes you can use this no you cannot

00:06:40,319 --> 00:06:46,840
measuring quality is a lot harder and is

00:06:43,520 --> 00:06:49,680
is very challenging i i couldn't

00:06:46,840 --> 00:06:53,919
conceivably uh check the overall quality

00:06:49,680 --> 00:06:53,919
of all of these 49 component parts

00:06:54,080 --> 00:06:58,160
however this is effectively the tip of

00:06:57,199 --> 00:07:00,479
the iceberg

00:06:58,160 --> 00:07:01,319
whilst express has 49 dependencies it

00:07:00,479 --> 00:07:04,560
actually has

00:07:01,319 --> 00:07:05,840
195 dependencies in total the rest form

00:07:04,560 --> 00:07:06,880
what are known as the development

00:07:05,840 --> 00:07:09,199
dependencies

00:07:06,880 --> 00:07:10,800
these are the ones that you install if

00:07:09,199 --> 00:07:13,280
you want to work on

00:07:10,800 --> 00:07:15,360
express as a as the product itself if

00:07:13,280 --> 00:07:18,639
you want to alter or change express

00:07:15,360 --> 00:07:20,400
you need to download 195 dependencies

00:07:18,639 --> 00:07:21,840
and for other projects i've worked on

00:07:20,400 --> 00:07:23,199
this

00:07:21,840 --> 00:07:26,160
you'll find more than a thousand

00:07:23,199 --> 00:07:28,560
development dependencies

00:07:26,160 --> 00:07:29,680
so why should i care is is this a

00:07:28,560 --> 00:07:33,039
problem

00:07:29,680 --> 00:07:33,599
well in some senses the tools you use to

00:07:33,039 --> 00:07:35,759
create

00:07:33,599 --> 00:07:36,880
a framework or a library like like

00:07:35,759 --> 00:07:38,960
express are

00:07:36,880 --> 00:07:40,880
are very much reflective of the quality

00:07:38,960 --> 00:07:42,960
you need to pick quality tools to

00:07:40,880 --> 00:07:44,479
to create a quality product and it can

00:07:42,960 --> 00:07:45,840
be challenging with so many different

00:07:44,479 --> 00:07:48,479
dependencies

00:07:45,840 --> 00:07:49,440
but also probably a bit more worrying is

00:07:48,479 --> 00:07:52,080
the scope for what's

00:07:49,440 --> 00:07:54,479
known as software supply chain attacks

00:07:52,080 --> 00:07:55,199
express being an http server is

00:07:54,479 --> 00:07:56,960
something that

00:07:55,199 --> 00:07:58,240
if i were a malicious individual it

00:07:56,960 --> 00:08:01,680
would be an interesting

00:07:58,240 --> 00:08:03,840
project for me to target now i could go

00:08:01,680 --> 00:08:05,680
after express directly or i could go

00:08:03,840 --> 00:08:08,240
after one of its

00:08:05,680 --> 00:08:09,440
49 dependencies so that already gives me

00:08:08,240 --> 00:08:11,759
a number of different places

00:08:09,440 --> 00:08:13,440
i could attack but something which is

00:08:11,759 --> 00:08:16,160
becoming more prevalent at the moment

00:08:13,440 --> 00:08:16,879
is supply chain attacks so these are

00:08:16,160 --> 00:08:19,440
attacks that

00:08:16,879 --> 00:08:21,039
insert themselves earlier into the

00:08:19,440 --> 00:08:22,160
overall sort of software development

00:08:21,039 --> 00:08:24,479
life cycle

00:08:22,160 --> 00:08:25,599
if i were able to attack and deploy a

00:08:24,479 --> 00:08:27,120
vulnerability into one of the

00:08:25,599 --> 00:08:29,919
development dependencies

00:08:27,120 --> 00:08:31,599
i could insert a vulnerability or or

00:08:29,919 --> 00:08:34,640
malicious code into express

00:08:31,599 --> 00:08:36,320
at compile time and this as i said is

00:08:34,640 --> 00:08:38,880
a problem that's occurring more and more

00:08:36,320 --> 00:08:38,880
frequently

00:08:38,959 --> 00:08:42,320
so yeah this this complexity is starting

00:08:41,680 --> 00:08:45,040
to make me

00:08:42,320 --> 00:08:45,600
a little bit nervous but let's go a

00:08:45,040 --> 00:08:47,680
little bit

00:08:45,600 --> 00:08:49,680
further down the rabbit hole if i

00:08:47,680 --> 00:08:52,399
install express

00:08:49,680 --> 00:08:54,240
what code is actually being downloaded

00:08:52,399 --> 00:08:57,839
and if you install it

00:08:54,240 --> 00:08:59,120
do you get the same code to understand

00:08:57,839 --> 00:09:01,600
that a little better

00:08:59,120 --> 00:09:03,279
we need to understand how these modules

00:09:01,600 --> 00:09:05,200
are downloaded and resolved

00:09:03,279 --> 00:09:07,040
and an important concept here is a thing

00:09:05,200 --> 00:09:09,519
called semantic versioning

00:09:07,040 --> 00:09:11,279
when you first download express it comes

00:09:09,519 --> 00:09:13,519
with effectively a bill of materials it

00:09:11,279 --> 00:09:14,880
says i depend on these other modules

00:09:13,519 --> 00:09:16,320
and the way that it declares these

00:09:14,880 --> 00:09:17,680
dependencies is through a thing called

00:09:16,320 --> 00:09:19,920
semantic versioning

00:09:17,680 --> 00:09:22,000
it's a it's a concept that was proposed

00:09:19,920 --> 00:09:24,720
about 10 years by one of the github

00:09:22,000 --> 00:09:25,200
co-founders and semantic versioning has

00:09:24,720 --> 00:09:27,600
a

00:09:25,200 --> 00:09:29,360
has a provides a formality to how

00:09:27,600 --> 00:09:31,440
versions are expressed

00:09:29,360 --> 00:09:33,360
major version increments indicate

00:09:31,440 --> 00:09:36,880
backwards incompatible changes

00:09:33,360 --> 00:09:39,040
minor version increments indicate

00:09:36,880 --> 00:09:40,720
the presence of new features and and

00:09:39,040 --> 00:09:41,600
patch versions are incremented when you

00:09:40,720 --> 00:09:44,080
fix bugs

00:09:41,600 --> 00:09:44,800
so this is a way of having a formality

00:09:44,080 --> 00:09:47,200
regarding

00:09:44,800 --> 00:09:48,480
how you version your software and as our

00:09:47,200 --> 00:09:50,560
our

00:09:48,480 --> 00:09:51,920
as our our software composition becomes

00:09:50,560 --> 00:09:53,839
more and more complicated

00:09:51,920 --> 00:09:56,320
uh concepts like semantic versioning

00:09:53,839 --> 00:09:58,640
become really quite important

00:09:56,320 --> 00:10:00,080
however i've got some some of my own

00:09:58,640 --> 00:10:02,240
personal concerns about semantic

00:10:00,080 --> 00:10:04,000
versioning which i shared in a blog post

00:10:02,240 --> 00:10:06,560
a little while back but that's that's

00:10:04,000 --> 00:10:06,560
not for now

00:10:06,640 --> 00:10:13,440
however software products like express

00:10:10,320 --> 00:10:14,399
rarely depend on specific or explicit

00:10:13,440 --> 00:10:17,200
version numbers

00:10:14,399 --> 00:10:18,560
instead they tend to permit version

00:10:17,200 --> 00:10:20,959
ranges so i might

00:10:18,560 --> 00:10:22,160
declare that i want to use this

00:10:20,959 --> 00:10:25,200
particular

00:10:22,160 --> 00:10:27,839
library or tool but rather than saying i

00:10:25,200 --> 00:10:30,079
want to depend on version 1.2.3

00:10:27,839 --> 00:10:32,160
i'll use this semantic range version

00:10:30,079 --> 00:10:36,079
this carray 1.2.3

00:10:32,160 --> 00:10:38,640
which is equivalent to 1.2.3 and above

00:10:36,079 --> 00:10:40,320
but no higher than 1.3 so what that

00:10:38,640 --> 00:10:42,240
means is

00:10:40,320 --> 00:10:44,399
the author in this case is explicitly

00:10:42,240 --> 00:10:45,440
saying i don't mind if this upstream

00:10:44,399 --> 00:10:49,200
dependency

00:10:45,440 --> 00:10:51,200
adds new features i'm happy to to

00:10:49,200 --> 00:10:53,440
to bring those into my build and i'm

00:10:51,200 --> 00:10:55,440
happy to bring in bug fixes

00:10:53,440 --> 00:10:57,519
however i don't want breaking changes i

00:10:55,440 --> 00:11:00,240
don't want major version increments

00:10:57,519 --> 00:11:01,279
and this is incredibly common i must

00:11:00,240 --> 00:11:04,160
admit

00:11:01,279 --> 00:11:05,200
i'm not entirely sure why you would want

00:11:04,160 --> 00:11:07,440
to permit

00:11:05,200 --> 00:11:09,360
new features because software being

00:11:07,440 --> 00:11:10,880
software a new feature in a dependency

00:11:09,360 --> 00:11:12,399
doesn't magically result in a new

00:11:10,880 --> 00:11:14,560
feature in your own product

00:11:12,399 --> 00:11:16,320
typically you have to change your code

00:11:14,560 --> 00:11:19,360
to accommodate that new feature

00:11:16,320 --> 00:11:21,279
however this uh use of virgin

00:11:19,360 --> 00:11:23,360
version ranges is is really quite

00:11:21,279 --> 00:11:26,000
prevalent at the moment

00:11:23,360 --> 00:11:26,800
so i did a bit of analysis looking at

00:11:26,000 --> 00:11:29,360
express

00:11:26,800 --> 00:11:30,959
i i looked at a couple of um version

00:11:29,360 --> 00:11:35,120
numbers of express itself

00:11:30,959 --> 00:11:36,160
version 4.16.4 to version 4.17 the next

00:11:35,120 --> 00:11:38,320
release

00:11:36,160 --> 00:11:39,440
and there was a seven month period

00:11:38,320 --> 00:11:41,920
between them

00:11:39,440 --> 00:11:43,200
and i discovered that there were 33

00:11:41,920 --> 00:11:45,040
different configurations

00:11:43,200 --> 00:11:48,480
of express itself over this seven month

00:11:45,040 --> 00:11:51,600
period so whilst express had only moved

00:11:48,480 --> 00:11:52,880
move forward one version increment there

00:11:51,600 --> 00:11:56,480
were 33 different

00:11:52,880 --> 00:11:58,800
versions due to the semantic versioning

00:11:56,480 --> 00:11:59,760
of its dependencies and their

00:11:58,800 --> 00:12:03,200
dependencies

00:11:59,760 --> 00:12:05,920
so basically my my express

00:12:03,200 --> 00:12:07,839
version 4.17 might not necessarily be

00:12:05,920 --> 00:12:10,639
the same as yours because of the

00:12:07,839 --> 00:12:11,120
the sort of slack or or loose nature in

00:12:10,639 --> 00:12:15,120
this

00:12:11,120 --> 00:12:18,079
versioning yeah i must admit

00:12:15,120 --> 00:12:19,920
i'm getting a bit scared now so we have

00:12:18,079 --> 00:12:23,040
complex dependency graphs

00:12:19,920 --> 00:12:23,040
that are ever changing

00:12:23,360 --> 00:12:27,519
also another concern is with this

00:12:25,680 --> 00:12:30,880
ever-changing mix of code

00:12:27,519 --> 00:12:31,519
who holds the keys who is it that is

00:12:30,880 --> 00:12:35,120
allowed

00:12:31,519 --> 00:12:37,360
to publish these modules

00:12:35,120 --> 00:12:39,839
to public repositories that are then

00:12:37,360 --> 00:12:42,639
downloaded onto my machine

00:12:39,839 --> 00:12:43,440
according to this sort of recipe so

00:12:42,639 --> 00:12:45,279
again

00:12:43,440 --> 00:12:46,800
i did a little bit of digging within

00:12:45,279 --> 00:12:49,279
express

00:12:46,800 --> 00:12:50,639
i found that of the 49 dependencies

00:12:49,279 --> 00:12:54,000
there were a total of

00:12:50,639 --> 00:12:55,440
88 maintainers so what this means is

00:12:54,000 --> 00:12:57,360
there are 88 different

00:12:55,440 --> 00:12:59,200
individuals who can create releases

00:12:57,360 --> 00:13:02,160
which will ultimately affect

00:12:59,200 --> 00:13:04,160
the software that i install when i

00:13:02,160 --> 00:13:06,560
download express

00:13:04,160 --> 00:13:07,440
also you'll see a funny little coloring

00:13:06,560 --> 00:13:09,760
scheme here

00:13:07,440 --> 00:13:11,040
no bob and includes bob and what i mean

00:13:09,760 --> 00:13:14,399
by this is

00:13:11,040 --> 00:13:16,480
express has a single core maintainer

00:13:14,399 --> 00:13:17,760
and rather than you know call him out

00:13:16,480 --> 00:13:19,279
explicitly i'm just going to call him

00:13:17,760 --> 00:13:21,839
bob for the sake of argument

00:13:19,279 --> 00:13:22,399
and what this what this shows is that

00:13:21,839 --> 00:13:24,959
for

00:13:22,399 --> 00:13:26,800
a significant number of the dependencies

00:13:24,959 --> 00:13:29,200
of of express

00:13:26,800 --> 00:13:31,360
bob the maintainer of express is also a

00:13:29,200 --> 00:13:34,160
maintainer so what this means is

00:13:31,360 --> 00:13:35,600
express is is complicated it's composed

00:13:34,160 --> 00:13:37,680
of 49 different modules

00:13:35,600 --> 00:13:39,600
however the maintainer of express also

00:13:37,680 --> 00:13:41,120
has an element of control

00:13:39,600 --> 00:13:44,720
over a number of these dependencies

00:13:41,120 --> 00:13:48,560
which is i'd say is a good thing

00:13:44,720 --> 00:13:51,920
however there are some issues here

00:13:48,560 --> 00:13:53,279
um there was a survey done uh where the

00:13:51,920 --> 00:13:53,760
results were published a little while

00:13:53,279 --> 00:13:57,360
back and

00:13:53,760 --> 00:13:59,360
only nine percent of them of um npm

00:13:57,360 --> 00:14:00,399
maintainers enable two-factor

00:13:59,360 --> 00:14:03,839
authentication

00:14:00,399 --> 00:14:05,360
so what this means is for 91 percent

00:14:03,839 --> 00:14:07,760
all you need is their username and their

00:14:05,360 --> 00:14:10,000
password and you can

00:14:07,760 --> 00:14:11,760
create a new release which is a bit

00:14:10,000 --> 00:14:15,199
worrying

00:14:11,760 --> 00:14:15,760
also as a result of this analysis i have

00:14:15,199 --> 00:14:18,480
the email

00:14:15,760 --> 00:14:19,279
addresses of all of these 88 maintainers

00:14:18,480 --> 00:14:22,399
and

00:14:19,279 --> 00:14:24,560
i took the first one and i typed it into

00:14:22,399 --> 00:14:26,560
troy hunts very well known have i been

00:14:24,560 --> 00:14:27,120
pwned which is hacker speak for have i

00:14:26,560 --> 00:14:29,600
been

00:14:27,120 --> 00:14:30,800
have been hacked i i typed it into his

00:14:29,600 --> 00:14:32,560
well-known website

00:14:30,800 --> 00:14:33,920
and found that our email address had

00:14:32,560 --> 00:14:36,800
been subject to

00:14:33,920 --> 00:14:38,000
or had been found in a great number of

00:14:36,800 --> 00:14:40,639
different vulnerabilities

00:14:38,000 --> 00:14:42,800
and um and data breaches so for so the

00:14:40,639 --> 00:14:45,519
very first maintainer email i picked

00:14:42,800 --> 00:14:46,160
um i could find that that email address

00:14:45,519 --> 00:14:48,399
and an

00:14:46,160 --> 00:14:50,079
associated password had been leaked as a

00:14:48,399 --> 00:14:51,360
result of a linkedin data breach a

00:14:50,079 --> 00:14:54,079
couple of years ago

00:14:51,360 --> 00:14:55,519
and we all know that most people are not

00:14:54,079 --> 00:14:58,320
that good at

00:14:55,519 --> 00:15:00,079
creating new and unique passwords and

00:14:58,320 --> 00:15:01,680
considering that only

00:15:00,079 --> 00:15:02,880
nine percent of these people are

00:15:01,680 --> 00:15:04,880
potentially using two-factor

00:15:02,880 --> 00:15:05,440
authentication it probably wouldn't take

00:15:04,880 --> 00:15:08,399
me to

00:15:05,440 --> 00:15:09,680
take too long for me to find a reused

00:15:08,399 --> 00:15:12,399
password amongst

00:15:09,680 --> 00:15:13,360
these 88 maintainers and this is without

00:15:12,399 --> 00:15:15,120
even looking

00:15:13,360 --> 00:15:16,399
at the development dependencies which

00:15:15,120 --> 00:15:19,600
are you know

00:15:16,399 --> 00:15:19,600
four times as numerous

00:15:19,760 --> 00:15:22,880
yeah this is getting a bit scary isn't

00:15:21,519 --> 00:15:24,880
it

00:15:22,880 --> 00:15:26,639
i think we've gone far enough down this

00:15:24,880 --> 00:15:28,480
specific uh rabbit hole

00:15:26,639 --> 00:15:30,880
we've we've learned about the kind of

00:15:28,480 --> 00:15:32,800
the software bill of materials

00:15:30,880 --> 00:15:34,720
the process that that determines the

00:15:32,800 --> 00:15:37,680
code we download and

00:15:34,720 --> 00:15:39,279
and execute is is really quite complex

00:15:37,680 --> 00:15:40,720
and we've looked at this complexity and

00:15:39,279 --> 00:15:42,959
i guess by virtue of that

00:15:40,720 --> 00:15:43,759
there's there's an element of fragility

00:15:42,959 --> 00:15:46,800
and

00:15:43,759 --> 00:15:49,040
experiences shown yes it is fragile it

00:15:46,800 --> 00:15:51,040
it does fall apart you've probably heard

00:15:49,040 --> 00:15:53,120
of the the left pad incident

00:15:51,040 --> 00:15:55,199
or the event stream incident i just

00:15:53,120 --> 00:15:56,480
thought i'd i'd i'd look at the most

00:15:55,199 --> 00:15:59,920
recent incident i

00:15:56,480 --> 00:16:02,240
i can remember and here's one of them

00:15:59,920 --> 00:16:03,279
there's a well-known package called is

00:16:02,240 --> 00:16:06,320
promise

00:16:03,279 --> 00:16:07,600
and the author made a tiny little change

00:16:06,320 --> 00:16:08,639
an honest change this wasn't a

00:16:07,600 --> 00:16:11,920
vulnerability

00:16:08,639 --> 00:16:15,040
but there was a small error in that

00:16:11,920 --> 00:16:17,199
that change and that error broke a huge

00:16:15,040 --> 00:16:20,800
number of other packages or modules

00:16:17,199 --> 00:16:24,160
it broke firebase tooling angular aws

00:16:20,800 --> 00:16:27,440
create react tab possibly many many more

00:16:24,160 --> 00:16:30,160
the impact of this one change was felt

00:16:27,440 --> 00:16:31,519
widely now in the article that they

00:16:30,160 --> 00:16:32,079
reported this they made a very good

00:16:31,519 --> 00:16:35,040
point

00:16:32,079 --> 00:16:36,079
the bug didn't crash existing projects

00:16:35,040 --> 00:16:38,480
which is a good thing

00:16:36,079 --> 00:16:39,600
just because a new module is released

00:16:38,480 --> 00:16:42,959
doesn't mean

00:16:39,600 --> 00:16:44,959
everything will stop working immediately

00:16:42,959 --> 00:16:46,959
so there was no actual downtime but it

00:16:44,959 --> 00:16:49,440
did prevent developers from compiling

00:16:46,959 --> 00:16:51,199
new versions of their projects

00:16:49,440 --> 00:16:53,279
which is actually a bigger issue than

00:16:51,199 --> 00:16:55,120
you might expect because it doesn't just

00:16:53,279 --> 00:16:57,279
prevent developers from compiling new

00:16:55,120 --> 00:17:00,880
versions it also

00:16:57,279 --> 00:17:01,600
prevents continuous integration so ci cd

00:17:00,880 --> 00:17:03,839
pipelines

00:17:01,600 --> 00:17:05,439
from compiling the project so what this

00:17:03,839 --> 00:17:08,959
means is your whole

00:17:05,439 --> 00:17:11,360
and software delivery sort of life cycle

00:17:08,959 --> 00:17:13,439
can come crashing down as a result of

00:17:11,360 --> 00:17:14,880
this tiny little error and this tiny

00:17:13,439 --> 00:17:17,120
little change

00:17:14,880 --> 00:17:18,720
so whilst this article was to a certain

00:17:17,120 --> 00:17:21,039
extent downplaying the issue

00:17:18,720 --> 00:17:23,280
i do think it's it is a significant

00:17:21,039 --> 00:17:25,919
issue

00:17:23,280 --> 00:17:25,919
coffee time

00:17:28,480 --> 00:17:32,640
so as i said i think we've gone far

00:17:31,600 --> 00:17:34,640
enough down this

00:17:32,640 --> 00:17:35,840
particular rabbit hole and it's it's

00:17:34,640 --> 00:17:38,880
time to come up from air

00:17:35,840 --> 00:17:42,000
and look at something else so

00:17:38,880 --> 00:17:44,320
what about funding express is a

00:17:42,000 --> 00:17:45,919
valuable project it's it's used by a

00:17:44,320 --> 00:17:46,720
great many people and a great many

00:17:45,919 --> 00:17:48,320
others

00:17:46,720 --> 00:17:50,480
how is it funded how the people that

00:17:48,320 --> 00:17:53,679
work on it rewarded

00:17:50,480 --> 00:17:56,640
many high-profile projects are backed by

00:17:53,679 --> 00:17:58,640
large companies corporations tensorflow

00:17:56,640 --> 00:18:01,200
for example is a google project electron

00:17:58,640 --> 00:18:02,720
is a github project react is a facebook

00:18:01,200 --> 00:18:06,799
project there are

00:18:02,720 --> 00:18:09,200
numerous examples so what about express

00:18:06,799 --> 00:18:11,280
nothing if you look at express there's

00:18:09,200 --> 00:18:13,840
no obvious funding model

00:18:11,280 --> 00:18:15,520
and if you look at the at the commits

00:18:13,840 --> 00:18:17,280
and the contributions it's clear that

00:18:15,520 --> 00:18:19,280
it's pretty much maintained

00:18:17,280 --> 00:18:20,640
by a single individual and as as you

00:18:19,280 --> 00:18:23,760
know behind i just called them

00:18:20,640 --> 00:18:25,760
bob for the sake of argument i looked

00:18:23,760 --> 00:18:28,799
deeper into the dependency graph

00:18:25,760 --> 00:18:30,640
of the the uh runtime

00:18:28,799 --> 00:18:32,160
the 49 dependencies and the development

00:18:30,640 --> 00:18:34,240
dependencies out of

00:18:32,160 --> 00:18:35,919
all of those dependencies i could only

00:18:34,240 --> 00:18:39,120
find a single project

00:18:35,919 --> 00:18:41,760
that had any obvious form of funding

00:18:39,120 --> 00:18:42,720
and that's a project called eslint now

00:18:41,760 --> 00:18:45,200
eslint

00:18:42,720 --> 00:18:45,919
is a is part of the development tool

00:18:45,200 --> 00:18:48,400
chain of

00:18:45,919 --> 00:18:50,160
of express it's it's a tool that helps

00:18:48,400 --> 00:18:51,760
provide consistent code formatting

00:18:50,160 --> 00:18:53,200
again it's a very popular and very

00:18:51,760 --> 00:18:57,280
useful tool

00:18:53,200 --> 00:18:57,600
now eslint uses a project or website

00:18:57,280 --> 00:18:59,679
called

00:18:57,600 --> 00:19:00,799
open collective which is probably the

00:18:59,679 --> 00:19:03,840
most popular

00:19:00,799 --> 00:19:04,320
online uh donation platform for open

00:19:03,840 --> 00:19:07,280
source

00:19:04,320 --> 00:19:08,320
and i've used it myself it's a it's a

00:19:07,280 --> 00:19:10,960
it's a decent

00:19:08,320 --> 00:19:11,440
website i quite like what they're doing

00:19:10,960 --> 00:19:14,240
i

00:19:11,440 --> 00:19:15,840
managed to raise about 50 a month for

00:19:14,240 --> 00:19:18,880
some of my open source projects which

00:19:15,840 --> 00:19:22,080
just about pays my aws bills

00:19:18,880 --> 00:19:22,799
now eslint is the fourth most funded

00:19:22,080 --> 00:19:25,600
project

00:19:22,799 --> 00:19:27,280
uh with an open collective so it's it's

00:19:25,600 --> 00:19:30,320
quite successful

00:19:27,280 --> 00:19:33,520
so does it work

00:19:30,320 --> 00:19:36,960
well again i dug into the data

00:19:33,520 --> 00:19:39,360
i looked at the 30

00:19:36,960 --> 00:19:40,400
most funded projects with an open

00:19:39,360 --> 00:19:41,919
collective

00:19:40,400 --> 00:19:43,520
and for each of them i turned their

00:19:41,919 --> 00:19:45,280
annual budget into

00:19:43,520 --> 00:19:46,720
effectively a full-time employee

00:19:45,280 --> 00:19:49,600
equivalent you know if

00:19:46,720 --> 00:19:50,799
if i was using that budget to pay my

00:19:49,600 --> 00:19:53,200
bills and support

00:19:50,799 --> 00:19:55,120
me or others as a developer how many

00:19:53,200 --> 00:19:58,080
people would it buy

00:19:55,120 --> 00:19:59,440
and as you can see from the uh from this

00:19:58,080 --> 00:20:02,000
graph on the right

00:19:59,440 --> 00:20:03,280
the uh which is on a log scale you can

00:20:02,000 --> 00:20:06,480
see the eslint

00:20:03,280 --> 00:20:08,880
the the the funding for eslint pays for

00:20:06,480 --> 00:20:10,000
maybe one and a half full-time

00:20:08,880 --> 00:20:11,840
equivalents

00:20:10,000 --> 00:20:13,679
and eslint is one of the most

00:20:11,840 --> 00:20:16,080
well-funded projects on the platform

00:20:13,679 --> 00:20:19,280
the most funded project can pay for

00:20:16,080 --> 00:20:22,400
approximately six full-time equivalents

00:20:19,280 --> 00:20:23,120
now there are more than 2 000 projects

00:20:22,400 --> 00:20:26,000
an open

00:20:23,120 --> 00:20:26,400
open collective and there's a long tail

00:20:26,000 --> 00:20:28,400
who

00:20:26,400 --> 00:20:30,320
who have you know similar experiences to

00:20:28,400 --> 00:20:32,320
myself and i'm not

00:20:30,320 --> 00:20:34,240
i'm i'm not complaining i'm i'm not

00:20:32,320 --> 00:20:36,880
attempting personally to use this to

00:20:34,240 --> 00:20:37,919
to to fund my work it was more as an

00:20:36,880 --> 00:20:39,600
experiment however

00:20:37,919 --> 00:20:41,679
there are a great many projects on there

00:20:39,600 --> 00:20:42,159
which really genuinely are trying to use

00:20:41,679 --> 00:20:44,559
this

00:20:42,159 --> 00:20:45,440
as a way to fund their work and

00:20:44,559 --> 00:20:47,039
unfortunately

00:20:45,440 --> 00:20:49,200
for the long tail which is the vast

00:20:47,039 --> 00:20:50,799
majority of them they

00:20:49,200 --> 00:20:53,039
they get little more than enough money

00:20:50,799 --> 00:20:55,280
to buy the odd cup of coffee

00:20:53,039 --> 00:20:57,039
so really this system isn't working when

00:20:55,280 --> 00:20:58,559
it comes to making a sustainable

00:20:57,039 --> 00:21:01,120
ecosystem

00:20:58,559 --> 00:21:02,960
and as a result people are trying other

00:21:01,120 --> 00:21:05,360
models

00:21:02,960 --> 00:21:06,159
some some open source projects collect

00:21:05,360 --> 00:21:08,400
tips or

00:21:06,159 --> 00:21:10,080
or try to use adverts and again

00:21:08,400 --> 00:21:12,559
advertising is something that's been

00:21:10,080 --> 00:21:14,640
tried and has caused a caused quite a

00:21:12,559 --> 00:21:17,919
stir

00:21:14,640 --> 00:21:19,280
however funding isn't the be-all and

00:21:17,919 --> 00:21:21,280
end-all to

00:21:19,280 --> 00:21:22,559
open source sustainability there's a

00:21:21,280 --> 00:21:24,880
much more

00:21:22,559 --> 00:21:26,640
interesting and tricky and challenging

00:21:24,880 --> 00:21:27,360
side it's a more human side of open

00:21:26,640 --> 00:21:29,120
source

00:21:27,360 --> 00:21:30,880
and i'm just going to give one little

00:21:29,120 --> 00:21:34,000
example again

00:21:30,880 --> 00:21:36,400
on on express as a project and i've i've

00:21:34,000 --> 00:21:37,760
again i really don't want to point the

00:21:36,400 --> 00:21:39,440
finger too much of the maintainer so

00:21:37,760 --> 00:21:41,039
i've blanked out his name even though

00:21:39,440 --> 00:21:42,799
i guess it's somewhat futile you could

00:21:41,039 --> 00:21:45,679
find his name

00:21:42,799 --> 00:21:47,919
this was an incident uh where someone

00:21:45,679 --> 00:21:50,720
raised a security issue

00:21:47,919 --> 00:21:52,320
against express and there were to cut a

00:21:50,720 --> 00:21:54,240
long story short there were some

00:21:52,320 --> 00:21:55,760
pretty big differences of opinion around

00:21:54,240 --> 00:21:59,039
how it should be resolved

00:21:55,760 --> 00:22:00,559
and there was also a certain amount of

00:21:59,039 --> 00:22:02,799
security theater from

00:22:00,559 --> 00:22:03,679
from vendors uh that there were some

00:22:02,799 --> 00:22:06,880
fairly

00:22:03,679 --> 00:22:09,120
aggressive flags effectively placed

00:22:06,880 --> 00:22:10,640
and black marks uh uh sort of placed

00:22:09,120 --> 00:22:12,880
against express

00:22:10,640 --> 00:22:14,400
and there was a significant amount of

00:22:12,880 --> 00:22:17,039
hostility

00:22:14,400 --> 00:22:18,559
as a result that the maintainer on the

00:22:17,039 --> 00:22:20,799
screenshot to the right

00:22:18,559 --> 00:22:22,240
basically publicly said look i've i've

00:22:20,799 --> 00:22:24,960
had enough i've

00:22:22,240 --> 00:22:26,080
i'm sick of the abuse i'm i'm not going

00:22:24,960 --> 00:22:27,440
to put up with this anymore

00:22:26,080 --> 00:22:29,760
i'm turning everything off for the

00:22:27,440 --> 00:22:32,159
weekend i'm deleting my emails

00:22:29,760 --> 00:22:32,960
taking a deep breath and coming back

00:22:32,159 --> 00:22:37,039
this is a

00:22:32,960 --> 00:22:39,280
this is a real issue and yeah

00:22:37,039 --> 00:22:40,640
this really is quite worrying and i

00:22:39,280 --> 00:22:42,960
honestly didn't expect

00:22:40,640 --> 00:22:44,080
to find this much that concerned me and

00:22:42,960 --> 00:22:46,159
and to a certain extent

00:22:44,080 --> 00:22:47,600
upset me when i i started the journey

00:22:46,159 --> 00:22:49,520
express really was

00:22:47,600 --> 00:22:52,559
something i picked out at random i

00:22:49,520 --> 00:22:54,640
wasn't expecting to find

00:22:52,559 --> 00:22:56,799
what such worrying complexity i wasn't

00:22:54,640 --> 00:22:58,640
expecting to find such fragility and

00:22:56,799 --> 00:23:00,159
and most worryingly i wasn't expecting

00:22:58,640 --> 00:23:03,200
to see um

00:23:00,159 --> 00:23:06,400
some evidence of a maintainer really

00:23:03,200 --> 00:23:06,400
struggling with the project

00:23:07,200 --> 00:23:11,440
so i guess the only conclusion i can

00:23:10,320 --> 00:23:13,039
really come to is that

00:23:11,440 --> 00:23:14,799
the only reason this all works is

00:23:13,039 --> 00:23:18,159
because the vast majority of people

00:23:14,799 --> 00:23:19,120
are good it it astounds me that this

00:23:18,159 --> 00:23:21,679
actually works

00:23:19,120 --> 00:23:23,360
in practice and i think the only reason

00:23:21,679 --> 00:23:26,720
it does is because most people

00:23:23,360 --> 00:23:27,679
are are good people um most people are

00:23:26,720 --> 00:23:30,960
good actors

00:23:27,679 --> 00:23:34,000
but we don't make it easy for them

00:23:30,960 --> 00:23:35,360
so this this conference this is the open

00:23:34,000 --> 00:23:38,240
source strategy forum

00:23:35,360 --> 00:23:38,720
and most of the people listening are not

00:23:38,240 --> 00:23:41,039
not

00:23:38,720 --> 00:23:42,240
full-time open source maintainers most

00:23:41,039 --> 00:23:46,400
most of you are

00:23:42,240 --> 00:23:48,159
from banks so what part do you play

00:23:46,400 --> 00:23:51,039
well before i get on to that i'll show

00:23:48,159 --> 00:23:53,120
you the part that we currently play

00:23:51,039 --> 00:23:55,679
i'm i'm lucky enough to live on the

00:23:53,120 --> 00:23:57,760
border of of northumberland which is a

00:23:55,679 --> 00:23:59,760
beautiful part of the country we've got

00:23:57,760 --> 00:24:00,960
lots of fantastic castles there and this

00:23:59,760 --> 00:24:02,720
is annette castle

00:24:00,960 --> 00:24:04,320
and if you've watched harry potter

00:24:02,720 --> 00:24:06,320
you'll have seen part of any castle it

00:24:04,320 --> 00:24:08,320
was it was used for hogwarts

00:24:06,320 --> 00:24:09,679
now these structures date back to the

00:24:08,320 --> 00:24:12,159
sort of medieval times

00:24:09,679 --> 00:24:13,600
and in the medieval times you'd have

00:24:12,159 --> 00:24:16,000
have the poor people the

00:24:13,600 --> 00:24:17,840
the poor working outside farming the

00:24:16,000 --> 00:24:19,520
land and you'd have the rich folk

00:24:17,840 --> 00:24:21,600
sitting within the castle and the

00:24:19,520 --> 00:24:23,279
produce from farming the land would be

00:24:21,600 --> 00:24:25,360
taken into the castle and you'd you'd

00:24:23,279 --> 00:24:28,000
keep the riffraff out

00:24:25,360 --> 00:24:28,720
you'd try to keep a a clean sanitary

00:24:28,000 --> 00:24:31,279
environment

00:24:28,720 --> 00:24:32,799
and and let the riff raff you know keep

00:24:31,279 --> 00:24:34,240
keep themselves to themselves outside of

00:24:32,799 --> 00:24:36,080
your castle

00:24:34,240 --> 00:24:37,840
and i think i know you might think it's

00:24:36,080 --> 00:24:40,080
a little bit damning but to be honest i

00:24:37,840 --> 00:24:43,039
think our relationship with open source

00:24:40,080 --> 00:24:43,039
is quite similar

00:24:43,919 --> 00:24:47,520
what we tend to do to tackle these

00:24:46,320 --> 00:24:49,600
problems is

00:24:47,520 --> 00:24:50,640
is a process of sort of sanitizing and

00:24:49,600 --> 00:24:54,080
sterilizing

00:24:50,640 --> 00:24:55,279
we use security scans license checking

00:24:54,080 --> 00:24:57,919
once we've

00:24:55,279 --> 00:24:59,840
cleaned and cleaned and cleaned we then

00:24:57,919 --> 00:25:01,919
take that code and we place it

00:24:59,840 --> 00:25:03,520
in our internal repositories where it is

00:25:01,919 --> 00:25:05,039
now safe

00:25:03,520 --> 00:25:06,720
it is again it's it's kind of the

00:25:05,039 --> 00:25:09,200
medieval model the the

00:25:06,720 --> 00:25:10,880
it's the wild west in in open source and

00:25:09,200 --> 00:25:14,159
the best we can do is

00:25:10,880 --> 00:25:16,320
pluck a code base out sanitize it check

00:25:14,159 --> 00:25:19,520
it to death and then say yep it's safe

00:25:16,320 --> 00:25:19,919
we'll use that interesting quote i read

00:25:19,520 --> 00:25:22,080
from

00:25:19,919 --> 00:25:23,520
from someone an open source maintainer

00:25:22,080 --> 00:25:26,080
who was also struggling

00:25:23,520 --> 00:25:28,080
he was at a an open source software and

00:25:26,080 --> 00:25:30,400
and bumped into one of the many kind of

00:25:28,080 --> 00:25:32,240
security scanning vendors and he

00:25:30,400 --> 00:25:33,679
realized so this means that they charge

00:25:32,240 --> 00:25:36,640
a 50-person startup

00:25:33,679 --> 00:25:38,159
a whopping 30 000 a year to help them

00:25:36,640 --> 00:25:40,400
feel safe using the code

00:25:38,159 --> 00:25:42,480
that open source authors like me have

00:25:40,400 --> 00:25:47,520
given away for for free

00:25:42,480 --> 00:25:47,520
it's it's a crazy situation

00:25:47,840 --> 00:25:52,559
also some of these scans

00:25:50,880 --> 00:25:54,000
are now pushed out to the wider

00:25:52,559 --> 00:25:55,600
community they're not just something

00:25:54,000 --> 00:25:56,000
that happened within within the four

00:25:55,600 --> 00:25:59,120
walls

00:25:56,000 --> 00:26:02,400
of some sort of big corporation

00:25:59,120 --> 00:26:05,840
and dependebot is something which is

00:26:02,400 --> 00:26:09,039
uh turned on by default within github

00:26:05,840 --> 00:26:12,000
what dependenbop does is it goes around

00:26:09,039 --> 00:26:12,799
hunting for people that depend on on

00:26:12,000 --> 00:26:14,960
modules

00:26:12,799 --> 00:26:15,840
that have got known vulnerabilities and

00:26:14,960 --> 00:26:18,320
then it

00:26:15,840 --> 00:26:19,279
helpfully creates a pull request when it

00:26:18,320 --> 00:26:20,960
spots one these

00:26:19,279 --> 00:26:23,120
vulnerable packages potentially being

00:26:20,960 --> 00:26:24,720
used and as you can see here it's you

00:26:23,120 --> 00:26:25,440
can see the semantic version range issue

00:26:24,720 --> 00:26:27,120
going on

00:26:25,440 --> 00:26:28,559
it will it will let you know that you

00:26:27,120 --> 00:26:30,400
have to bump it from one version to

00:26:28,559 --> 00:26:32,720
another

00:26:30,400 --> 00:26:33,440
however there are some big issues here

00:26:32,720 --> 00:26:35,760
firstly

00:26:33,440 --> 00:26:37,600
i get lots of pull requests from

00:26:35,760 --> 00:26:38,080
dependable every week but the bigger

00:26:37,600 --> 00:26:40,559
issue

00:26:38,080 --> 00:26:42,320
is all that it can ever do is

00:26:40,559 --> 00:26:43,600
demonstrate the potential for a

00:26:42,320 --> 00:26:46,320
vulnerability

00:26:43,600 --> 00:26:48,080
now for a vulnerability to manifest

00:26:46,320 --> 00:26:50,080
itself you have to use a particular

00:26:48,080 --> 00:26:53,039
module in a specific way

00:26:50,080 --> 00:26:54,799
if i have a vulnerability in a

00:26:53,039 --> 00:26:56,400
templating engine but i'm only ever

00:26:54,799 --> 00:26:59,600
using it in my deployment

00:26:56,400 --> 00:27:01,600
pipeline within a containerized build

00:26:59,600 --> 00:27:03,279
that's not the same as if i'm using it

00:27:01,600 --> 00:27:05,039
on on air

00:27:03,279 --> 00:27:06,880
on the front end of an application used

00:27:05,039 --> 00:27:07,840
by my end users it's completely

00:27:06,880 --> 00:27:10,400
different

00:27:07,840 --> 00:27:11,520
and unfortunately in my experience of

00:27:10,400 --> 00:27:14,559
dependenbot

00:27:11,520 --> 00:27:16,240
not once has it raised a single genuine

00:27:14,559 --> 00:27:18,320
security vulnerability

00:27:16,240 --> 00:27:20,880
all it's ever done is to be honest

00:27:18,320 --> 00:27:22,799
frustrate me

00:27:20,880 --> 00:27:24,880
and again another quote from that

00:27:22,799 --> 00:27:26,640
article i briefly mentioned

00:27:24,880 --> 00:27:28,480
if it's not fun anymore you get

00:27:26,640 --> 00:27:31,039
literally nothing from maintaining

00:27:28,480 --> 00:27:34,080
a popular package and this is a growing

00:27:31,039 --> 00:27:36,640
concern within the open source community

00:27:34,080 --> 00:27:37,279
that the the day-to-day struggles are

00:27:36,640 --> 00:27:38,880
ten

00:27:37,279 --> 00:27:41,200
tend to get a bit too much for some

00:27:38,880 --> 00:27:41,200
people

00:27:41,440 --> 00:27:46,159
so what is the solution i think probably

00:27:44,000 --> 00:27:48,000
the most important thing to do is gain a

00:27:46,159 --> 00:27:49,520
better understanding of the problem and

00:27:48,000 --> 00:27:51,120
i must admit

00:27:49,520 --> 00:27:53,520
i gained a better understanding of the

00:27:51,120 --> 00:27:54,240
problem through my investigations into

00:27:53,520 --> 00:27:57,200
it express

00:27:54,240 --> 00:27:58,240
and writing this talk previously i was

00:27:57,200 --> 00:28:01,440
of the opinion that

00:27:58,240 --> 00:28:03,679
funding was the answer and i'd explored

00:28:01,440 --> 00:28:04,960
um with philos different ways that we

00:28:03,679 --> 00:28:08,080
can accelerate

00:28:04,960 --> 00:28:10,080
funding but it's it's not the answer

00:28:08,080 --> 00:28:11,760
you have to understand the ecosystem you

00:28:10,080 --> 00:28:13,600
have to understand the actors and their

00:28:11,760 --> 00:28:14,720
motivations

00:28:13,600 --> 00:28:16,720
and one thing you also have to

00:28:14,720 --> 00:28:18,799
understand is the open source community

00:28:16,720 --> 00:28:19,600
itself has changed considerably in the

00:28:18,799 --> 00:28:22,399
past

00:28:19,600 --> 00:28:24,320
five years one of the main reasons why

00:28:22,399 --> 00:28:26,880
it's changed is github

00:28:24,320 --> 00:28:27,600
github has created a centralized

00:28:26,880 --> 00:28:29,679
community

00:28:27,600 --> 00:28:30,880
and actually if you really want to get

00:28:29,679 --> 00:28:34,080
into the details of this

00:28:30,880 --> 00:28:35,840
i would thoroughly thoroughly recommend

00:28:34,080 --> 00:28:36,799
this book which is screenshoted here

00:28:35,840 --> 00:28:38,559
it's

00:28:36,799 --> 00:28:40,559
working in public the making and

00:28:38,559 --> 00:28:42,640
maintaining of open source software by

00:28:40,559 --> 00:28:43,200
by nadia it's an amazing book and i'd

00:28:42,640 --> 00:28:46,480
recommend

00:28:43,200 --> 00:28:46,720
that everyone read it what she points

00:28:46,480 --> 00:28:48,559
out

00:28:46,720 --> 00:28:50,640
as i said is that github has created a

00:28:48,559 --> 00:28:50,960
centralized community in in that ways

00:28:50,640 --> 00:28:54,799
it's

00:28:50,960 --> 00:28:56,880
it's much more like youtube for example

00:28:54,799 --> 00:28:58,000
she also described that the stadium

00:28:56,880 --> 00:29:00,960
model of

00:28:58,000 --> 00:29:01,840
of open source is becoming increasingly

00:29:00,960 --> 00:29:03,760
uh prevalent

00:29:01,840 --> 00:29:05,440
and what we me and to give it give you a

00:29:03,760 --> 00:29:09,360
simple explanation there

00:29:05,440 --> 00:29:11,120
open source projects more and more often

00:29:09,360 --> 00:29:12,799
the work of an individual and the

00:29:11,120 --> 00:29:15,520
stadium model is effectively you have

00:29:12,799 --> 00:29:17,679
one individual up on stage and you have

00:29:15,520 --> 00:29:19,679
tens of thousands who are effectively in

00:29:17,679 --> 00:29:22,720
the audience

00:29:19,679 --> 00:29:23,440
and whilst github makes it easier to

00:29:22,720 --> 00:29:25,760
contribute

00:29:23,440 --> 00:29:28,080
as a result relationships tend to be

00:29:25,760 --> 00:29:30,880
more more sort of

00:29:28,080 --> 00:29:32,960
transient you get people having kind of

00:29:30,880 --> 00:29:33,760
fleeting relationships with projects

00:29:32,960 --> 00:29:36,480
rather than

00:29:33,760 --> 00:29:38,640
a sort of long-term uh sort of

00:29:36,480 --> 00:29:40,559
collaboration and association

00:29:38,640 --> 00:29:42,080
and probably the most important thing

00:29:40,559 --> 00:29:45,039
that i learned from this book

00:29:42,080 --> 00:29:45,679
is that attention is the most prized

00:29:45,039 --> 00:29:48,240
asset

00:29:45,679 --> 00:29:50,000
of an open source maintainer they have a

00:29:48,240 --> 00:29:50,960
finite amount of time that they can work

00:29:50,000 --> 00:29:53,600
on the project

00:29:50,960 --> 00:29:54,000
and they will seek to optimize that time

00:29:53,600 --> 00:29:56,159
or or

00:29:54,000 --> 00:29:58,000
will at least wish to optimize that time

00:29:56,159 --> 00:29:59,440
and gear it towards the things that they

00:29:58,000 --> 00:30:02,399
fundamentally enjoy

00:29:59,440 --> 00:30:04,000
doing the most and i've got a great

00:30:02,399 --> 00:30:05,919
example of what happens when you don't

00:30:04,000 --> 00:30:09,200
understand this ecosystem

00:30:05,919 --> 00:30:10,640
so every year digital ocean has run a

00:30:09,200 --> 00:30:13,279
thing called hacktoberfest

00:30:10,640 --> 00:30:15,760
it's a very well-meaning concept every

00:30:13,279 --> 00:30:18,000
year they incentivize people to

00:30:15,760 --> 00:30:19,679
contribute back to open source and they

00:30:18,000 --> 00:30:22,960
incentivize them by giving away

00:30:19,679 --> 00:30:25,279
t-shirts which sounds sounds great

00:30:22,960 --> 00:30:26,880
on the surface it sounds really good

00:30:25,279 --> 00:30:29,600
however this year it

00:30:26,880 --> 00:30:30,399
fell apart completely and and these are

00:30:29,600 --> 00:30:32,480
these are

00:30:30,399 --> 00:30:33,679
concerns that have been building for a

00:30:32,480 --> 00:30:36,399
long time

00:30:33,679 --> 00:30:37,120
and this this article briefly highlights

00:30:36,399 --> 00:30:39,039
why

00:30:37,120 --> 00:30:41,279
the author says so far today on a single

00:30:39,039 --> 00:30:42,000
repository myself and fellow maintainers

00:30:41,279 --> 00:30:44,399
have closed

00:30:42,000 --> 00:30:46,279
11 spam pull requests each have

00:30:44,399 --> 00:30:49,120
generated notifications to

00:30:46,279 --> 00:30:52,159
485 watches of the repository

00:30:49,120 --> 00:30:52,960
and each requires time to visit the pull

00:30:52,159 --> 00:30:56,880
request page

00:30:52,960 --> 00:31:00,159
evaluate close tag it effectively

00:30:56,880 --> 00:31:03,200
their their attention is being consumed

00:31:00,159 --> 00:31:04,000
by this activity in a highly negative

00:31:03,200 --> 00:31:06,080
fashion

00:31:04,000 --> 00:31:08,159
they basically call hacktoberfest a

00:31:06,080 --> 00:31:10,399
distributed denial of service attack

00:31:08,159 --> 00:31:12,480
on the open source maintainer community

00:31:10,399 --> 00:31:13,760
and i really don't want to be too harsh

00:31:12,480 --> 00:31:15,519
on digitalocean they were

00:31:13,760 --> 00:31:17,279
they were they were fundamentally

00:31:15,519 --> 00:31:19,519
motivated by the right things

00:31:17,279 --> 00:31:21,279
but clearly they misunderstood the

00:31:19,519 --> 00:31:22,159
community and how it worked and the

00:31:21,279 --> 00:31:24,720
whole thing

00:31:22,159 --> 00:31:24,720
fell apart

00:31:25,519 --> 00:31:29,440
so what should we do it's it is

00:31:28,159 --> 00:31:32,000
challenging

00:31:29,440 --> 00:31:32,559
firstly don't focus on your own walled

00:31:32,000 --> 00:31:35,120
garden

00:31:32,559 --> 00:31:35,840
and one thing i'll point out here is i i

00:31:35,120 --> 00:31:38,399
haven't said

00:31:35,840 --> 00:31:39,120
don't create your own walled garden and

00:31:38,399 --> 00:31:42,080
there is

00:31:39,120 --> 00:31:44,000
still a need to keep your own and

00:31:42,080 --> 00:31:46,080
maintain your own copies of

00:31:44,000 --> 00:31:47,039
of open source code for various

00:31:46,080 --> 00:31:50,159
different reasons

00:31:47,039 --> 00:31:53,279
but don't focus on that entirely

00:31:50,159 --> 00:31:54,799
also don't focus your time on sanitizing

00:31:53,279 --> 00:31:57,279
and securing again i'm

00:31:54,799 --> 00:31:59,840
not saying don't do it but don't focus

00:31:57,279 --> 00:32:02,000
on these two activities exclusively

00:31:59,840 --> 00:32:04,399
without considering the wider impact on

00:32:02,000 --> 00:32:06,960
the community

00:32:04,399 --> 00:32:09,120
do learn about and better understand the

00:32:06,960 --> 00:32:11,120
open source ecosystem

00:32:09,120 --> 00:32:13,279
read that book that i suggested learn

00:32:11,120 --> 00:32:14,000
about the maintainers learn about the

00:32:13,279 --> 00:32:17,120
people behind

00:32:14,000 --> 00:32:18,640
the code that you're consuming learn how

00:32:17,120 --> 00:32:20,559
to effectively contribute

00:32:18,640 --> 00:32:22,480
and again hacktoberfest is a great

00:32:20,559 --> 00:32:24,880
example of what happens

00:32:22,480 --> 00:32:26,880
if you don't contribute effectively

00:32:24,880 --> 00:32:28,799
there is a considerable amount of

00:32:26,880 --> 00:32:30,480
negative contribution going on in open

00:32:28,799 --> 00:32:33,279
source at the me at the moment

00:32:30,480 --> 00:32:34,240
and and the popularity and the ease of

00:32:33,279 --> 00:32:36,480
use of github

00:32:34,240 --> 00:32:37,279
unfortunately has increased the noise

00:32:36,480 --> 00:32:39,760
and again

00:32:37,279 --> 00:32:40,320
github are a fantastic is a fantastic

00:32:39,760 --> 00:32:42,000
platform

00:32:40,320 --> 00:32:44,080
and they are trying to tackle this but

00:32:42,000 --> 00:32:46,640
it's a real issue

00:32:44,080 --> 00:32:47,519
finally help the maintainers maximize

00:32:46,640 --> 00:32:49,440
their attention

00:32:47,519 --> 00:32:51,200
and some great ways you can do this is

00:32:49,440 --> 00:32:52,880
is not by

00:32:51,200 --> 00:32:54,640
opening up a big pull request with lots

00:32:52,880 --> 00:32:56,640
and lots of code you can help them

00:32:54,640 --> 00:32:57,919
maximize their attention by taking away

00:32:56,640 --> 00:33:00,799
some of the activities

00:32:57,919 --> 00:33:01,279
that um are less desirable to them you

00:33:00,799 --> 00:33:03,679
can

00:33:01,279 --> 00:33:05,360
answer questions on stack overflow you

00:33:03,679 --> 00:33:06,320
can create examples or help with

00:33:05,360 --> 00:33:08,559
documentation

00:33:06,320 --> 00:33:10,000
you can triage issues you can fix some

00:33:08,559 --> 00:33:10,720
of the gnarly bugs that might have

00:33:10,000 --> 00:33:13,919
occurred

00:33:10,720 --> 00:33:15,679
all of these things are significant and

00:33:13,919 --> 00:33:16,640
valuable contributions that allow

00:33:15,679 --> 00:33:18,159
maintainers to

00:33:16,640 --> 00:33:20,720
to focus on the thing that they want to

00:33:18,159 --> 00:33:21,760
focus on a lot of these things are

00:33:20,720 --> 00:33:24,880
better than just

00:33:21,760 --> 00:33:25,440
you know adding a 50 tip every month to

00:33:24,880 --> 00:33:28,880
some

00:33:25,440 --> 00:33:32,240
open source collection finally

00:33:28,880 --> 00:33:34,480
allocate time and budget for this and

00:33:32,240 --> 00:33:35,760
the the money that you're spending on

00:33:34,480 --> 00:33:38,159
some of these uh

00:33:35,760 --> 00:33:38,960
tools for creating your your sanitized

00:33:38,159 --> 00:33:40,640
wall garden

00:33:38,960 --> 00:33:43,039
perhaps you should reinvest some of

00:33:40,640 --> 00:33:46,559
these in actually helping the community

00:33:43,039 --> 00:33:48,480
directly and again allocate time and

00:33:46,559 --> 00:33:50,399
budget it could be budget or it could be

00:33:48,480 --> 00:33:52,559
time you could just allocate

00:33:50,399 --> 00:33:53,760
a small fraction of time if for example

00:33:52,559 --> 00:33:56,399
you're using express

00:33:53,760 --> 00:33:56,960
as an example on one of your projects

00:33:56,399 --> 00:33:58,799
why not

00:33:56,960 --> 00:34:00,880
build in something into the backlog

00:33:58,799 --> 00:34:02,480
let's put let's spend a little bit of

00:34:00,880 --> 00:34:05,039
time

00:34:02,480 --> 00:34:06,480
helping fix some of these issues rather

00:34:05,039 --> 00:34:09,519
than creating our own

00:34:06,480 --> 00:34:09,519
sanitized version

00:34:09,919 --> 00:34:12,720
thank you for listening i hope that's

00:34:11,359 --> 00:34:13,839
been informative and i hope you've

00:34:12,720 --> 00:34:15,839
learned something from it

00:34:13,839 --> 00:34:18,000
um i'm going to go back to my day job

00:34:15,839 --> 00:34:21,839
and and back to deleting depend about

00:34:18,000 --> 00:34:21,839
issues thanks so much for listening

00:34:25,800 --> 00:34:28,800

YouTube URL: https://www.youtube.com/watch?v=Ru52tCtVl2c


