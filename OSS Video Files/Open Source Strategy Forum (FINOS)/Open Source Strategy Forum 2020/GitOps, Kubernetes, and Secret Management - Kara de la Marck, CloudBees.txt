Title: GitOps, Kubernetes, and Secret Management - Kara de la Marck, CloudBees
Publication date: 2020-11-20
Playlist: Open Source Strategy Forum 2020
Description: 
	GitOps, Kubernetes, and Secret Management - Kara de la Marck, CloudBees
Captions: 
	00:00:07,520 --> 00:00:10,639
hi welcome to my talk and presentation

00:00:09,200 --> 00:00:11,519
on github's kubernetes and secret

00:00:10,639 --> 00:00:13,440
management

00:00:11,519 --> 00:00:15,040
i'm cardinal milk i work at cloudbees

00:00:13,440 --> 00:00:17,840
mostly with the jenkins x open source

00:00:15,040 --> 00:00:19,920
community jenkins x is a ci cd platform

00:00:17,840 --> 00:00:21,760
on kubernetes with git ops built in

00:00:19,920 --> 00:00:24,160
and committed to facilitating github's

00:00:21,760 --> 00:00:25,760
best practices

00:00:24,160 --> 00:00:27,519
in today's presentation on github's

00:00:25,760 --> 00:00:29,439
secret management we'll see the github

00:00:27,519 --> 00:00:30,960
space workflow the jenkins x project

00:00:29,439 --> 00:00:33,120
creates for applications

00:00:30,960 --> 00:00:34,559
and see how jingenzex manages kubernetes

00:00:33,120 --> 00:00:38,160
secrets securely using

00:00:34,559 --> 00:00:40,399
kubernetes external secrets

00:00:38,160 --> 00:00:41,840
this talk follows on from a talk i did

00:00:40,399 --> 00:00:42,960
previously on github's kubernetes and

00:00:41,840 --> 00:00:44,640
secret management

00:00:42,960 --> 00:00:46,559
which provided more context and

00:00:44,640 --> 00:00:47,360
discussion on the issues and trade-offs

00:00:46,559 --> 00:00:49,039
with different

00:00:47,360 --> 00:00:51,039
approaches to secret management using

00:00:49,039 --> 00:00:52,960
kubernetes and get ups

00:00:51,039 --> 00:00:54,960
so the previous talk and there's a link

00:00:52,960 --> 00:00:57,760
in the slide um has a whole

00:00:54,960 --> 00:00:58,640
baking metaphor to introduce some of the

00:00:57,760 --> 00:01:01,760
concepts

00:00:58,640 --> 00:01:04,000
um there was also some information but

00:01:01,760 --> 00:01:05,199
uh especially on the trade-offs between

00:01:04,000 --> 00:01:06,720
the different secret management

00:01:05,199 --> 00:01:08,560
techniques when doing get-ups and

00:01:06,720 --> 00:01:11,200
kubernetes

00:01:08,560 --> 00:01:12,080
for this suck i've kept the cake photos

00:01:11,200 --> 00:01:13,280
because they're ready

00:01:12,080 --> 00:01:15,119
but also this is a great week to

00:01:13,280 --> 00:01:18,320
celebrate um

00:01:15,119 --> 00:01:21,040
so enjoy cake in this talk

00:01:18,320 --> 00:01:22,640
the focus is more on jenkins x3 alpha

00:01:21,040 --> 00:01:24,080
during this talk and the brief

00:01:22,640 --> 00:01:25,360
presentation we're going to discuss and

00:01:24,080 --> 00:01:27,360
see how jenkins actually

00:01:25,360 --> 00:01:29,600
guides you to set up your repositories

00:01:27,360 --> 00:01:31,680
to create a github space workflow

00:01:29,600 --> 00:01:34,240
and how jenkins x handle secrets using

00:01:31,680 --> 00:01:36,000
kubernetes external secrets

00:01:34,240 --> 00:01:37,280
so first we'll briefly go over some of

00:01:36,000 --> 00:01:40,479
our terms

00:01:37,280 --> 00:01:41,920
and set a little bit of context

00:01:40,479 --> 00:01:43,520
in which we're considering this problem

00:01:41,920 --> 00:01:45,759
of secure management

00:01:43,520 --> 00:01:47,439
and secret management is an issue across

00:01:45,759 --> 00:01:48,799
software development but in this talk

00:01:47,439 --> 00:01:53,920
we're looking at it

00:01:48,799 --> 00:01:54,320
in the context of git ups and kubernetes

00:01:53,920 --> 00:01:56,479
first

00:01:54,320 --> 00:01:58,079
why get it doesn't have to be yet but

00:01:56,479 --> 00:01:59,840
git is the most widely used version

00:01:58,079 --> 00:02:00,960
control system in the software industry

00:01:59,840 --> 00:02:03,600
today

00:02:00,960 --> 00:02:04,560
also a side note git recently celebrated

00:02:03,600 --> 00:02:06,560
15 years

00:02:04,560 --> 00:02:09,119
since its first release hence the cake

00:02:06,560 --> 00:02:12,480
celebrating 15 years okay

00:02:09,119 --> 00:02:14,160
happy birthday get get off uses get

00:02:12,480 --> 00:02:15,920
as the single source of truth or

00:02:14,160 --> 00:02:18,319
declarative infrastructure

00:02:15,920 --> 00:02:19,280
and it enables developers to manage

00:02:18,319 --> 00:02:21,200
infrastructure

00:02:19,280 --> 00:02:23,200
with the same git-based workflows they

00:02:21,200 --> 00:02:24,560
use to manage a good base

00:02:23,200 --> 00:02:26,400
this means all infrastructure

00:02:24,560 --> 00:02:28,720
configuration and application code are

00:02:26,400 --> 00:02:30,480
stored in git repositories

00:02:28,720 --> 00:02:32,640
infrastructure as code isn't unique to

00:02:30,480 --> 00:02:33,760
githubs but it is foundational for

00:02:32,640 --> 00:02:35,360
getups

00:02:33,760 --> 00:02:37,200
with gitops the entire state of your

00:02:35,360 --> 00:02:39,519
system is described using declarative

00:02:37,200 --> 00:02:42,879
specification for each environment

00:02:39,519 --> 00:02:44,800
and these are stored and yet a key part

00:02:42,879 --> 00:02:45,519
of git ups is this idea of environments

00:02:44,800 --> 00:02:46,720
is code

00:02:45,519 --> 00:02:48,480
describing your deployments

00:02:46,720 --> 00:02:50,400
declaratively using files such as

00:02:48,480 --> 00:02:53,040
kubernetes manifests that are then

00:02:50,400 --> 00:02:55,840
stored in a git repository

00:02:53,040 --> 00:02:56,640
and this having infrastructure config

00:02:55,840 --> 00:03:00,239
and deployments

00:02:56,640 --> 00:03:02,959
declaratively described in files and get

00:03:00,239 --> 00:03:04,560
raises issues of secret management and

00:03:02,959 --> 00:03:05,280
how jengkon sex approaches secret

00:03:04,560 --> 00:03:07,840
management

00:03:05,280 --> 00:03:09,519
with genocide kubernetes is the subject

00:03:07,840 --> 00:03:12,480
of this talk

00:03:09,519 --> 00:03:12,959
so at this um high level we're at right

00:03:12,480 --> 00:03:14,400
now

00:03:12,959 --> 00:03:16,080
your desired state of your system is

00:03:14,400 --> 00:03:17,440
declaring it and this is the single

00:03:16,080 --> 00:03:20,800
source of truth

00:03:17,440 --> 00:03:22,080
for your system when doing hit ups so

00:03:20,800 --> 00:03:23,360
the other part of good offs that's

00:03:22,080 --> 00:03:24,879
important to keep in mind is that you

00:03:23,360 --> 00:03:26,480
have to be able to observe the actual

00:03:24,879 --> 00:03:28,400
state of your system

00:03:26,480 --> 00:03:31,680
and reconcile that with the desired

00:03:28,400 --> 00:03:33,680
state of your system as described in kit

00:03:31,680 --> 00:03:34,720
so kubernetes helps a lot with this it

00:03:33,680 --> 00:03:37,840
handles active

00:03:34,720 --> 00:03:39,440
reconciliation within your cluster

00:03:37,840 --> 00:03:41,040
kubernetes has been open sourced by

00:03:39,440 --> 00:03:43,519
google and is now the most popular

00:03:41,040 --> 00:03:46,640
container orchestration system

00:03:43,519 --> 00:03:49,680
platform so you can do

00:03:46,640 --> 00:03:52,000
uh get ups without kubernetes however

00:03:49,680 --> 00:03:52,959
they're a really natural fit together

00:03:52,000 --> 00:03:54,959
with

00:03:52,959 --> 00:03:56,720
the deployment of declarative kubernetes

00:03:54,959 --> 00:04:00,080
manifest files being controlled

00:03:56,720 --> 00:04:00,799
by git operations so kubernetes

00:04:00,080 --> 00:04:02,400
deployments

00:04:00,799 --> 00:04:04,640
have the following properties which are

00:04:02,400 --> 00:04:06,799
really helpful automation

00:04:04,640 --> 00:04:08,480
so kubernetes automates the process of

00:04:06,799 --> 00:04:10,480
applying changes correctly and in a

00:04:08,480 --> 00:04:12,640
timely manner

00:04:10,480 --> 00:04:15,599
convergence kubernetes will keep trying

00:04:12,640 --> 00:04:18,479
to update until the update is successful

00:04:15,599 --> 00:04:20,400
item versions multiple applications of

00:04:18,479 --> 00:04:23,120
convergence have the same outcome

00:04:20,400 --> 00:04:24,000
that is to say that the same actions can

00:04:23,120 --> 00:04:27,120
be done

00:04:24,000 --> 00:04:30,320
and will result in one single

00:04:27,120 --> 00:04:32,560
desired outcome they are not cumulative

00:04:30,320 --> 00:04:34,639
you just go to one state

00:04:32,560 --> 00:04:36,320
so they can be applied multiple times

00:04:34,639 --> 00:04:40,080
without changing the result

00:04:36,320 --> 00:04:42,560
beyond that initial desired outcome

00:04:40,080 --> 00:04:43,919
so when doing get apps with kubernetes

00:04:42,560 --> 00:04:46,240
it is helpful to have a

00:04:43,919 --> 00:04:47,680
get off scuba divis operator which

00:04:46,240 --> 00:04:49,280
automatically ensures that the state of

00:04:47,680 --> 00:04:52,240
your cluster matches the config

00:04:49,280 --> 00:04:54,080
again so the operator will pull the git

00:04:52,240 --> 00:04:56,400
repo for changes or divergence between

00:04:54,080 --> 00:04:58,000
the desired and the actual state

00:04:56,400 --> 00:05:00,160
and will trigger deployments in

00:04:58,000 --> 00:05:02,080
kubernetes to reconcile them

00:05:00,160 --> 00:05:04,000
and make sure your new container images

00:05:02,080 --> 00:05:06,240
and config changes are propagated to the

00:05:04,000 --> 00:05:08,240
cluster

00:05:06,240 --> 00:05:09,919
so when following the get ops model the

00:05:08,240 --> 00:05:10,800
desired configuration of your system is

00:05:09,919 --> 00:05:12,880
starting again

00:05:10,800 --> 00:05:15,360
and an operator software process in our

00:05:12,880 --> 00:05:17,039
case literally a kubernetes operator

00:05:15,360 --> 00:05:18,880
is responsible for changing the current

00:05:17,039 --> 00:05:20,240
state of the system into the desired

00:05:18,880 --> 00:05:22,000
data system

00:05:20,240 --> 00:05:23,600
so jenkins x of course has a github's

00:05:22,000 --> 00:05:25,039
kubernetes operator

00:05:23,600 --> 00:05:27,360
and the combination of github's

00:05:25,039 --> 00:05:29,360
methodology with kubernetes declarative

00:05:27,360 --> 00:05:30,000
configuration an active reconciliation

00:05:29,360 --> 00:05:31,360
model

00:05:30,000 --> 00:05:33,039
combined to provide a number of

00:05:31,360 --> 00:05:34,080
operational benefits that all aim to

00:05:33,039 --> 00:05:36,000
produce

00:05:34,080 --> 00:05:38,479
and provide a more predictable and

00:05:36,000 --> 00:05:41,680
reliable system

00:05:38,479 --> 00:05:43,360
okay so having all your configuration

00:05:41,680 --> 00:05:44,080
files version control and get has many

00:05:43,360 --> 00:05:46,160
advantages

00:05:44,080 --> 00:05:47,280
but securely managing secrets and sister

00:05:46,160 --> 00:05:50,960
system has proven

00:05:47,280 --> 00:05:53,600
difficult first okay

00:05:50,960 --> 00:05:56,319
what are secrets a secret is anything

00:05:53,600 --> 00:05:58,479
you want to tightly control access to

00:05:56,319 --> 00:06:00,240
kubernetes provides a mechanism allowing

00:05:58,479 --> 00:06:00,960
users to store bits of sensitive

00:06:00,240 --> 00:06:03,520
information

00:06:00,960 --> 00:06:04,560
into a protected resource object called

00:06:03,520 --> 00:06:06,479
the secret

00:06:04,560 --> 00:06:08,560
so kubernetes provides the built-in

00:06:06,479 --> 00:06:11,440
objects for managing secrets

00:06:08,560 --> 00:06:12,720
called secret common examples of data

00:06:11,440 --> 00:06:13,440
you would want to store in a secret

00:06:12,720 --> 00:06:15,759
include

00:06:13,440 --> 00:06:18,720
username and password credentials ssh

00:06:15,759 --> 00:06:20,960
keys api keys tls certificates

00:06:18,720 --> 00:06:21,759
so here we have an example of a simple

00:06:20,960 --> 00:06:24,000
kubernetes

00:06:21,759 --> 00:06:26,639
secret it's a very simple data structure

00:06:24,000 --> 00:06:28,639
composed of three pieces of information

00:06:26,639 --> 00:06:30,639
you have your name of your secret the

00:06:28,639 --> 00:06:33,199
type of the secret which is optional

00:06:30,639 --> 00:06:36,319
and a map of field names to sensitive

00:06:33,199 --> 00:06:38,960
data encoded in base 64.

00:06:36,319 --> 00:06:39,440
so when you first see a kubernetes

00:06:38,960 --> 00:06:40,639
secret

00:06:39,440 --> 00:06:42,800
you may be tempted to think that the

00:06:40,639 --> 00:06:46,560
values are protected by encryption

00:06:42,800 --> 00:06:49,199
they are not basic c4 encoding

00:06:46,560 --> 00:06:50,400
allows binary data to be represented as

00:06:49,199 --> 00:06:52,639
key string format

00:06:50,400 --> 00:06:56,000
it does not provide encryption the

00:06:52,639 --> 00:06:59,039
base64 encoding is like plain text

00:06:56,000 --> 00:07:02,639
and here we can see those same secrets

00:06:59,039 --> 00:07:06,800
um easily unencoded reading username

00:07:02,639 --> 00:07:08,479
join password and eat cake

00:07:06,800 --> 00:07:11,440
you do not want your secrets laid out

00:07:08,479 --> 00:07:13,120
and get like buffet

00:07:11,440 --> 00:07:14,960
getups practitioners may be very happy

00:07:13,120 --> 00:07:16,400
to store configuration files again

00:07:14,960 --> 00:07:18,639
they are unwilling to store their

00:07:16,400 --> 00:07:21,199
sensitive data and get due to security

00:07:18,639 --> 00:07:21,199
concerns

00:07:21,680 --> 00:07:24,880
there are additional reasons it's a

00:07:23,120 --> 00:07:25,840
security concern to store secrets and

00:07:24,880 --> 00:07:29,280
get

00:07:25,840 --> 00:07:31,440
git was designed as a collaborative tool

00:07:29,280 --> 00:07:33,280
making it easy for many people to view

00:07:31,440 --> 00:07:35,440
and review each other's code

00:07:33,280 --> 00:07:36,880
it was designed to enable access to

00:07:35,440 --> 00:07:38,319
other people's skills

00:07:36,880 --> 00:07:42,479
and for these reasons it is very

00:07:38,319 --> 00:07:44,879
dangerous to use kit to hold secrets

00:07:42,479 --> 00:07:45,919
we have no granular file level access

00:07:44,879 --> 00:07:48,639
controls in yet

00:07:45,919 --> 00:07:50,960
so git does not provide read protection

00:07:48,639 --> 00:07:53,199
of a sub path or a sub file

00:07:50,960 --> 00:07:55,039
in a git repository in other words it is

00:07:53,199 --> 00:07:58,720
not possible to restrict access to some

00:07:55,039 --> 00:08:00,319
files in a kit repo and not others

00:07:58,720 --> 00:08:02,000
and when dealing with secrets you

00:08:00,319 --> 00:08:04,000
ideally should be granting read access

00:08:02,000 --> 00:08:05,599
to secrets on a need to know basis

00:08:04,000 --> 00:08:07,759
for example if you have a temporary

00:08:05,599 --> 00:08:08,400
worker you would want to give that new

00:08:07,759 --> 00:08:10,240
user

00:08:08,400 --> 00:08:12,800
the least amount of access to sensitive

00:08:10,240 --> 00:08:14,400
data as possible and virtually git does

00:08:12,800 --> 00:08:16,000
not provide any way to do this

00:08:14,400 --> 00:08:19,759
and this is an all or nothing when

00:08:16,000 --> 00:08:21,680
giving access to your repository

00:08:19,759 --> 00:08:23,360
and distributed gate requests so with

00:08:21,680 --> 00:08:25,039
git ops team members locally clone the

00:08:23,360 --> 00:08:26,080
gate repository on their laptops and

00:08:25,039 --> 00:08:28,000
workstations

00:08:26,080 --> 00:08:30,400
this would mean the proliferation of the

00:08:28,000 --> 00:08:33,200
secrets to many systems

00:08:30,400 --> 00:08:35,039
thus opening up the attack surface our

00:08:33,200 --> 00:08:36,000
one rule for get ops kubernetes and

00:08:35,039 --> 00:08:38,959
secret management

00:08:36,000 --> 00:08:42,000
is don't store kubernetes secrets and

00:08:38,959 --> 00:08:42,000
get um

00:08:42,320 --> 00:08:48,160
and especially don't store raw base 64

00:08:45,440 --> 00:08:49,360
encoded kubernetes secrets and yet but

00:08:48,160 --> 00:08:51,600
we're trying to do give-ups

00:08:49,360 --> 00:08:54,880
and there are and we want to have the

00:08:51,600 --> 00:08:58,000
entire state of our system again

00:08:54,880 --> 00:08:59,680
so what do we do luckily

00:08:58,000 --> 00:09:01,839
there are a number of potential

00:08:59,680 --> 00:09:03,680
solutions um

00:09:01,839 --> 00:09:04,959
but unfortunately they all come with

00:09:03,680 --> 00:09:06,800
trade-offs

00:09:04,959 --> 00:09:08,959
so in this talk i'll be focusing on the

00:09:06,800 --> 00:09:09,760
solution that jenkins x has chosen to

00:09:08,959 --> 00:09:12,080
manage

00:09:09,760 --> 00:09:13,839
secrets with git ups and kubernetes but

00:09:12,080 --> 00:09:14,320
if you wanted more of an overview of

00:09:13,839 --> 00:09:17,839
other

00:09:14,320 --> 00:09:20,080
solutions um potential solutions then

00:09:17,839 --> 00:09:22,480
you can watch my previous stock so the

00:09:20,080 --> 00:09:23,360
kubernetes secret object is convenient

00:09:22,480 --> 00:09:25,519
to use

00:09:23,360 --> 00:09:27,360
it provides a declarative api that makes

00:09:25,519 --> 00:09:28,640
it easy for application pods to access

00:09:27,360 --> 00:09:31,760
secret data

00:09:28,640 --> 00:09:33,920
and without any special code so we do

00:09:31,760 --> 00:09:37,279
want to use kubernetes secrets

00:09:33,920 --> 00:09:39,279
but how do we do it's securely and

00:09:37,279 --> 00:09:41,839
the approach of jinxex has chosen is to

00:09:39,279 --> 00:09:43,519
use external secret management system

00:09:41,839 --> 00:09:44,880
these secret management systems may

00:09:43,519 --> 00:09:47,519
differ in feature but the general

00:09:44,880 --> 00:09:49,200
principles of them are the same

00:09:47,519 --> 00:09:51,360
in this strategy rather than using

00:09:49,200 --> 00:09:52,000
native kubernetes features to store and

00:09:51,360 --> 00:09:54,160
load

00:09:52,000 --> 00:09:55,680
secrets securely into the container the

00:09:54,160 --> 00:09:57,040
application containers themselves

00:09:55,680 --> 00:09:59,600
retrieve the secrets

00:09:57,040 --> 00:10:00,959
values dynamically one time at the point

00:09:59,600 --> 00:10:04,240
of use

00:10:00,959 --> 00:10:04,959
and this is what kubernetes external

00:10:04,240 --> 00:10:07,440
secrets

00:10:04,959 --> 00:10:08,560
helps you with so you don't have to

00:10:07,440 --> 00:10:11,279
write that

00:10:08,560 --> 00:10:13,440
code yourself because teams were doing

00:10:11,279 --> 00:10:14,880
that and it was taking up a lot of time

00:10:13,440 --> 00:10:16,560
to do well it's important to do it very

00:10:14,880 --> 00:10:19,200
securely uh

00:10:16,560 --> 00:10:21,040
kubernetes external secrets is a very

00:10:19,200 --> 00:10:22,959
nice open source solution that works

00:10:21,040 --> 00:10:26,399
extremely well and that is why

00:10:22,959 --> 00:10:28,240
jing is focusing on it so

00:10:26,399 --> 00:10:29,440
luckily this kubernetes external secrets

00:10:28,240 --> 00:10:32,399
and this has been open source

00:10:29,440 --> 00:10:34,079
by godaddy kubernetes external secrets

00:10:32,399 --> 00:10:35,760
enables the secure retrieval of

00:10:34,079 --> 00:10:37,920
secret store in external secret

00:10:35,760 --> 00:10:40,959
management systems and the ability to

00:10:37,920 --> 00:10:44,079
securely add secrets to your cluster

00:10:40,959 --> 00:10:46,480
look at how that's done so the project

00:10:44,079 --> 00:10:49,519
extends the kubernetes api by adding

00:10:46,480 --> 00:10:51,760
an external sql secret objects

00:10:49,519 --> 00:10:53,120
and using a custom resource definition

00:10:51,760 --> 00:10:56,240
and a controller to implement the

00:10:53,120 --> 00:10:58,079
behavior of the object itself

00:10:56,240 --> 00:10:59,519
an external secret declares how to fetch

00:10:58,079 --> 00:11:01,360
the secret data

00:10:59,519 --> 00:11:02,959
and while the controller is responsible

00:11:01,360 --> 00:11:04,320
for fetching that secret data from

00:11:02,959 --> 00:11:06,160
external providers

00:11:04,320 --> 00:11:07,440
and converting all external secrets to

00:11:06,160 --> 00:11:09,120
secrets

00:11:07,440 --> 00:11:10,480
the conversion is completely transparent

00:11:09,120 --> 00:11:12,720
to pods that can

00:11:10,480 --> 00:11:14,399
access the secrets online because there

00:11:12,720 --> 00:11:16,640
could be any secrets

00:11:14,399 --> 00:11:18,480
so kubernetes external secrets supports

00:11:16,640 --> 00:11:20,640
the external secret management systems

00:11:18,480 --> 00:11:22,640
um of all the major cloud providers and

00:11:20,640 --> 00:11:24,160
hashicorp vault

00:11:22,640 --> 00:11:27,440
the controller fetches the external

00:11:24,160 --> 00:11:30,000
safeguards using the kubernetes api

00:11:27,440 --> 00:11:31,920
controller uses external secrets to

00:11:30,000 --> 00:11:32,880
fetch that secret data from external

00:11:31,920 --> 00:11:36,000
secret management

00:11:32,880 --> 00:11:38,800
systems and the control up search

00:11:36,000 --> 00:11:42,720
secrets okay and then pods can access

00:11:38,800 --> 00:11:45,279
secrets normally

00:11:42,720 --> 00:11:47,120
so virginians x our number one main

00:11:45,279 --> 00:11:48,480
concern is we do not want to commit raw

00:11:47,120 --> 00:11:52,240
kubernetes

00:11:48,480 --> 00:11:54,480
yaml into get and we highly recommend

00:11:52,240 --> 00:11:56,160
using kubernetes external secrets

00:11:54,480 --> 00:11:58,639
which means you can check and the

00:11:56,160 --> 00:12:00,800
external secret resources in to get

00:11:58,639 --> 00:12:02,240
um and we will see an example of that

00:12:00,800 --> 00:12:03,839
and these are in a reference to the

00:12:02,240 --> 00:12:07,360
actual secret management

00:12:03,839 --> 00:12:11,360
values the actual secret values um

00:12:07,360 --> 00:12:12,880
that your secrets contained

00:12:11,360 --> 00:12:14,639
insects supports the major external

00:12:12,880 --> 00:12:17,519
secret management providers

00:12:14,639 --> 00:12:19,360
too that will then be holding like the

00:12:17,519 --> 00:12:21,200
single source of truth for that secret

00:12:19,360 --> 00:12:22,800
the jing is x team are big fans of

00:12:21,200 --> 00:12:24,480
kubernetes external secrets and then

00:12:22,800 --> 00:12:26,560
we've developed a jx secret

00:12:24,480 --> 00:12:28,320
which is a small client tool for working

00:12:26,560 --> 00:12:29,839
with kubernetes external secrets

00:12:28,320 --> 00:12:31,440
and it integrates really nicely with the

00:12:29,839 --> 00:12:36,240
jenkins x workflow

00:12:31,440 --> 00:12:36,240
for continuous delivery on kubernetes

00:12:36,560 --> 00:12:40,000
so jenkins x has chosen a secret

00:12:38,240 --> 00:12:41,519
management approach that adds an

00:12:40,000 --> 00:12:44,320
abstraction layer above

00:12:41,519 --> 00:12:44,959
secret management solutions all those

00:12:44,320 --> 00:12:47,120
external

00:12:44,959 --> 00:12:48,079
secret management systems and this

00:12:47,120 --> 00:12:49,920
enables

00:12:48,079 --> 00:12:51,440
users to choose where the source of

00:12:49,920 --> 00:12:53,120
their secrets can be stored

00:12:51,440 --> 00:12:55,680
preferably outside the kubernetes

00:12:53,120 --> 00:12:57,200
cluster and storing your secrets outside

00:12:55,680 --> 00:12:57,920
the kubernetes cluster is very good

00:12:57,200 --> 00:13:01,760
prices

00:12:57,920 --> 00:13:01,760
for disaster recovery scenarios

00:13:03,040 --> 00:13:05,760
we're now going to do a quick

00:13:03,920 --> 00:13:06,800
walkthrough on setting up jenkins x3

00:13:05,760 --> 00:13:09,600
alpha

00:13:06,800 --> 00:13:11,440
the good ops approach in jenkins x3 and

00:13:09,600 --> 00:13:14,320
secret management using kubernetes

00:13:11,440 --> 00:13:14,320
external secrets

00:13:14,800 --> 00:13:18,399
this is the docs landing page for

00:13:16,240 --> 00:13:20,399
jenkins x3 alpha as you can see we have

00:13:18,399 --> 00:13:22,639
some easy to find top level guides and

00:13:20,399 --> 00:13:25,200
developer guides

00:13:22,639 --> 00:13:25,680
in the administration section we have

00:13:25,200 --> 00:13:26,959
links

00:13:25,680 --> 00:13:30,240
to a number of quick start git

00:13:26,959 --> 00:13:31,839
repositories these are github repository

00:13:30,240 --> 00:13:34,959
templates that make it easy to start

00:13:31,839 --> 00:13:36,560
when installing jenkins x3

00:13:34,959 --> 00:13:38,399
you choose one depending on the cluster

00:13:36,560 --> 00:13:41,519
you want to create whether it's google

00:13:38,399 --> 00:13:45,760
amazon azure minikube openshift

00:13:41,519 --> 00:13:45,760
for this demo we'll use google cloud

00:13:46,639 --> 00:13:52,240
and we'll use gke in terraform so we

00:13:49,839 --> 00:13:54,800
click on the create git repository

00:13:52,240 --> 00:13:56,959
and this brings us to a template to

00:13:54,800 --> 00:14:02,160
create our infrastructure repo

00:13:56,959 --> 00:14:04,240
we'll name it jx3 terraform infra

00:14:02,160 --> 00:14:06,720
make it private this is just in case i

00:14:04,240 --> 00:14:08,639
accidentally check in any secrets

00:14:06,720 --> 00:14:10,639
um this should not happen and secret

00:14:08,639 --> 00:14:12,800
management with jenkins x helps that

00:14:10,639 --> 00:14:13,839
not happen but just in case we'll make

00:14:12,800 --> 00:14:17,760
it private

00:14:13,839 --> 00:14:19,680
the owner should be

00:14:17,760 --> 00:14:21,440
the github org that you created for

00:14:19,680 --> 00:14:24,160
jenkins x

00:14:21,440 --> 00:14:27,680
and now you can see that repo being

00:14:24,160 --> 00:14:28,720
created within that github org

00:14:27,680 --> 00:14:31,519
now what we're going to do is we're

00:14:28,720 --> 00:14:35,360
going to clone this infra

00:14:31,519 --> 00:14:37,040
repo great now we're going to clone that

00:14:35,360 --> 00:14:40,800
repo

00:14:37,040 --> 00:14:40,800
and cd into the clone

00:14:43,040 --> 00:14:47,040
now we'll create our cluster repository

00:14:45,600 --> 00:14:48,720
let's read the docs on how to create the

00:14:47,040 --> 00:14:52,399
cluster repository

00:14:48,720 --> 00:14:52,399
linked to from this button here

00:14:53,839 --> 00:14:57,519
we create a cluster git repository

00:14:55,600 --> 00:15:01,760
choosing the desired secret store

00:14:57,519 --> 00:15:01,760
either google seeker manager or volt

00:15:02,320 --> 00:15:08,160
i'll use google secret manager for this

00:15:04,079 --> 00:15:08,160
demo we'll use this link here

00:15:08,880 --> 00:15:15,120
for this repo

00:15:12,079 --> 00:15:18,160
this is our cluster repo although

00:15:15,120 --> 00:15:21,440
jingles x3 gke cluster

00:15:18,160 --> 00:15:25,120
again set the owner

00:15:21,440 --> 00:15:27,680
to my github org making it private

00:15:25,120 --> 00:15:29,440
and creating our repository our last

00:15:27,680 --> 00:15:32,959
little bit of setup is to configure the

00:15:29,440 --> 00:15:35,279
get url of your cluster get repository

00:15:32,959 --> 00:15:36,959
which contains the helm file yaml you

00:15:35,279 --> 00:15:38,880
can see it here

00:15:36,959 --> 00:15:41,040
and we need to configure this into our

00:15:38,880 --> 00:15:44,160
infrastructure get repository

00:15:41,040 --> 00:15:47,759
which contains our main.tf file

00:15:44,160 --> 00:15:48,639
so we need to get this url from inside

00:15:47,759 --> 00:15:51,680
our git clone

00:15:48,639 --> 00:15:55,199
of the infrastructure git repository

00:15:51,680 --> 00:15:58,399
which already has the file's main dot tf

00:15:55,199 --> 00:15:59,759
and our values auto tfrs inside

00:15:58,399 --> 00:16:02,320
you need to link to the cluster

00:15:59,759 --> 00:16:03,360
repository by committing the required

00:16:02,320 --> 00:16:07,440
terraform values

00:16:03,360 --> 00:16:07,440
and i am going to use these values

00:16:07,759 --> 00:16:12,000
grabbed from the instructions we were

00:16:10,959 --> 00:16:13,680
just looking at

00:16:12,000 --> 00:16:15,519
although i populated it with the gate

00:16:13,680 --> 00:16:17,920
url that's how i needed to grab that

00:16:15,519 --> 00:16:19,040
and i've populated it with the name of

00:16:17,920 --> 00:16:22,399
my gcp

00:16:19,040 --> 00:16:24,639
project i've set if you see here i've

00:16:22,399 --> 00:16:25,199
set google secret manager to the value

00:16:24,639 --> 00:16:27,199
true

00:16:25,199 --> 00:16:29,839
because i'm using google secret manager

00:16:27,199 --> 00:16:33,759
and we're putting these values into

00:16:29,839 --> 00:16:37,839
our values.tf vars file

00:16:33,759 --> 00:16:37,839
so the values of that file

00:16:38,480 --> 00:16:43,440
now contain this line which was already

00:16:42,639 --> 00:16:46,000
present

00:16:43,440 --> 00:16:47,600
and then the added information now we

00:16:46,000 --> 00:16:50,720
commit those values

00:16:47,600 --> 00:16:53,600
and push them

00:16:50,720 --> 00:16:54,560
once those values are added to our

00:16:53,600 --> 00:16:59,839
infrastructure

00:16:54,560 --> 00:16:59,839
repo done now we can terraform

00:17:02,839 --> 00:17:07,280
emits

00:17:04,959 --> 00:17:09,919
and this downloads the various terraform

00:17:07,280 --> 00:17:11,760
modules

00:17:09,919 --> 00:17:13,039
initialize and verifies the terraform

00:17:11,760 --> 00:17:15,839
stuff

00:17:13,039 --> 00:17:17,120
we're being asked for the bot token

00:17:15,839 --> 00:17:19,280
that's being used to interact with the

00:17:17,120 --> 00:17:21,839
jinx cluster get repository

00:17:19,280 --> 00:17:22,480
this is the token for the bot you

00:17:21,839 --> 00:17:25,120
created

00:17:22,480 --> 00:17:25,839
that's a member of your github org so

00:17:25,120 --> 00:17:28,240
i'm going to

00:17:25,839 --> 00:17:29,280
enter that value here but i will not

00:17:28,240 --> 00:17:32,320
show you because

00:17:29,280 --> 00:17:36,640
it is a token great

00:17:32,320 --> 00:17:46,160
now we have a chance to prove our plan

00:17:36,640 --> 00:17:48,160
and we'll say yes

00:17:46,160 --> 00:17:49,919
we recommend using terraform to manage

00:17:48,160 --> 00:17:51,600
the infrastructure needed to run jenkins

00:17:49,919 --> 00:17:53,919
x there are a number of cloud resources

00:17:51,600 --> 00:17:57,280
which may be needed to be created

00:17:53,919 --> 00:17:58,480
such as im bindings

00:17:57,280 --> 00:18:01,520
used to manage permissions for

00:17:58,480 --> 00:18:04,320
applications using our cloud resources

00:18:01,520 --> 00:18:06,400
we have our kubernetes cluster also

00:18:04,320 --> 00:18:08,880
storage buckets for long-term storage of

00:18:06,400 --> 00:18:08,880
logs

00:18:10,000 --> 00:18:16,640
and you get a name um created for you

00:18:13,600 --> 00:18:18,960
and i will be flying goose which works

00:18:16,640 --> 00:18:18,960
for me

00:18:19,440 --> 00:18:25,520
okay so now that that is done

00:18:22,720 --> 00:18:26,960
let's i connect to our cluster and then

00:18:25,520 --> 00:18:29,840
we can tell the jenkins x

00:18:26,960 --> 00:18:29,840
installation logs

00:18:32,480 --> 00:18:36,960
and for that we have a command follow

00:18:37,039 --> 00:18:39,600
install

00:18:40,080 --> 00:18:43,840
you can see it here

00:18:54,320 --> 00:18:59,120
you can see custom resources sub being

00:18:56,640 --> 00:18:59,120
created

00:18:59,600 --> 00:19:03,360
so this is quite interesting you can see

00:19:01,280 --> 00:19:06,400
these secrets are being

00:19:03,360 --> 00:19:07,840
created and added

00:19:06,400 --> 00:19:10,559
there's a number of secrets that are

00:19:07,840 --> 00:19:12,799
needed for jenkins sex

00:19:10,559 --> 00:19:15,280
and in fact some are generated and some

00:19:12,799 --> 00:19:18,320
are provided at installation by the user

00:19:15,280 --> 00:19:18,320
like our bot taken

00:19:20,559 --> 00:19:23,919
and these need to be managed and there

00:19:21,840 --> 00:19:26,160
are a number of solutions that can help

00:19:23,919 --> 00:19:28,480
so jenkins x prefers to use manage cloud

00:19:26,160 --> 00:19:30,240
services where possible

00:19:28,480 --> 00:19:31,760
google secrets manager is a good example

00:19:30,240 --> 00:19:33,200
where secrets are stored out of the

00:19:31,760 --> 00:19:36,320
cluster and synchronized

00:19:33,200 --> 00:19:37,120
in cluster using external secrets which

00:19:36,320 --> 00:19:40,000
we will

00:19:37,120 --> 00:19:41,679
see in a minute uh where managed cloud

00:19:40,000 --> 00:19:44,000
services are not available or desired

00:19:41,679 --> 00:19:47,039
jenkins x can also use a vault

00:19:44,000 --> 00:19:49,679
great we're done and now let's look at

00:19:47,039 --> 00:19:49,679
our namespace

00:19:51,120 --> 00:19:54,799
awesome so here you can see a number of

00:19:53,039 --> 00:19:58,559
name spaces that we have

00:19:54,799 --> 00:20:00,240
let's look at jx so now we've moved into

00:19:58,559 --> 00:20:01,840
the jx namespace

00:20:00,240 --> 00:20:03,679
and we can create a project we have a

00:20:01,840 --> 00:20:07,360
quick start projects to help you

00:20:03,679 --> 00:20:09,679
very quickly get you know try it out

00:20:07,360 --> 00:20:12,559
the one i'll demo that should we do

00:20:09,679 --> 00:20:12,559
we'll do note

00:20:15,200 --> 00:20:22,000
okay so we're going to create

00:20:18,320 --> 00:20:22,000
a name for it awesome

00:20:24,240 --> 00:20:31,919
to initialize and we'll just go with our

00:20:28,400 --> 00:20:34,240
automated commit message

00:20:31,919 --> 00:20:35,039
so you can see the jingx has created a

00:20:34,240 --> 00:20:37,919
clone

00:20:35,039 --> 00:20:38,960
of that node repo the quick start and

00:20:37,919 --> 00:20:42,480
then it's created a

00:20:38,960 --> 00:20:44,400
pull request on our cluster repo

00:20:42,480 --> 00:20:45,919
excellent that's not finished and as you

00:20:44,400 --> 00:20:47,440
can see we have an awesome node

00:20:45,919 --> 00:20:49,600
repository

00:20:47,440 --> 00:20:51,919
that has been created for us in the

00:20:49,600 --> 00:20:53,919
jenkins x space

00:20:51,919 --> 00:20:55,919
we'll have a look at that in a minute

00:20:53,919 --> 00:20:59,120
and see the pull requests that's

00:20:55,919 --> 00:21:01,039
happened on the cluster repository

00:20:59,120 --> 00:21:02,240
in the command and the creation of that

00:21:01,039 --> 00:21:05,440
additional repository

00:21:02,240 --> 00:21:07,440
in your github org and while activity is

00:21:05,440 --> 00:21:10,080
happening in your cluster you can watch

00:21:07,440 --> 00:21:12,240
pipeline activity or pipeline log first

00:21:10,080 --> 00:21:16,000
i want to show the ui that jenkins x now

00:21:12,240 --> 00:21:18,000
has with auxin

00:21:16,000 --> 00:21:19,520
a common question we've heard in the

00:21:18,000 --> 00:21:21,360
community over the years

00:21:19,520 --> 00:21:24,080
is when is when will there be an open

00:21:21,360 --> 00:21:27,360
source ui for jenkins x and there is now

00:21:24,080 --> 00:21:30,640
uh we're using octan by way of

00:21:27,360 --> 00:21:33,600
an octan jx plugin

00:21:30,640 --> 00:21:34,880
right now we can see the octan front end

00:21:33,600 --> 00:21:36,240
where it's showing us what's happening

00:21:34,880 --> 00:21:39,520
in our cluster

00:21:36,240 --> 00:21:42,559
as you can see i set up

00:21:39,520 --> 00:21:43,280
jenkins x and the repositories last

00:21:42,559 --> 00:21:47,280
night

00:21:43,280 --> 00:21:48,880
so 10 hours ago and we can take a look

00:21:47,280 --> 00:21:50,480
at the pods we have running in our

00:21:48,880 --> 00:21:52,880
cluster

00:21:50,480 --> 00:21:54,720
so you can see all our running pods

00:21:52,880 --> 00:21:58,080
created 10 hours ago

00:21:54,720 --> 00:22:00,000
you can look at our jenkins x

00:21:58,080 --> 00:22:01,200
and as per usual for jenkins x we have

00:22:00,000 --> 00:22:04,240
three environments development

00:22:01,200 --> 00:22:04,240
production and staging

00:22:04,320 --> 00:22:07,919
you can also see some of the pipelines

00:22:06,159 --> 00:22:13,840
including the latest

00:22:07,919 --> 00:22:13,840
pipeline setting up awesome note

00:22:19,360 --> 00:22:23,039
so here we can see some repositories

00:22:20,960 --> 00:22:26,880
that are in our

00:22:23,039 --> 00:22:30,080
jenkins x space the github repository

00:22:26,880 --> 00:22:32,000
we have our gke cluster repo and also

00:22:30,080 --> 00:22:34,320
the awesome node repo that we have just

00:22:32,000 --> 00:22:37,600
added and remember our

00:22:34,320 --> 00:22:39,440
gke cluster contains

00:22:37,600 --> 00:22:41,600
the configuration for your cluster

00:22:39,440 --> 00:22:43,440
repair

00:22:41,600 --> 00:22:45,760
as you can see this repo has the helm

00:22:43,440 --> 00:22:45,760
file

00:22:46,080 --> 00:22:50,000
which defines all the charts that we're

00:22:48,640 --> 00:22:53,039
deploying

00:22:50,000 --> 00:22:54,799
and here you can see kubernetes external

00:22:53,039 --> 00:22:58,559
secrets

00:22:54,799 --> 00:23:02,559
in addition you can see here the pr from

00:22:58,559 --> 00:23:04,720
from last night we'll take a look at it

00:23:02,559 --> 00:23:06,720
as you can see it's promoting our

00:23:04,720 --> 00:23:09,919
awesome node repository

00:23:06,720 --> 00:23:12,799
to our staging environment and this

00:23:09,919 --> 00:23:14,640
pr has been done by our bot and it was

00:23:12,799 --> 00:23:17,280
merged automatically

00:23:14,640 --> 00:23:17,280
by the bottom

00:23:18,400 --> 00:23:26,400
so if we go into our jenkins x space

00:23:22,400 --> 00:23:29,679
org and take a look at awesome node

00:23:26,400 --> 00:23:31,440
this is the repo that we added so if we

00:23:29,679 --> 00:23:34,799
go back into arcturn

00:23:31,440 --> 00:23:34,799
and we look at our pipelines

00:23:35,360 --> 00:23:40,640
and we look at this one this is

00:23:38,480 --> 00:23:41,919
the pipeline for the awesome node

00:23:40,640 --> 00:23:44,400
quickstart

00:23:41,919 --> 00:23:46,000
the repo for that quick start was cloned

00:23:44,400 --> 00:23:48,400
the image was built

00:23:46,000 --> 00:23:49,200
and it's gone through successfully all

00:23:48,400 --> 00:23:52,480
the way

00:23:49,200 --> 00:23:56,080
through to staging with jenkins x3

00:23:52,480 --> 00:24:00,720
we use a single git repository

00:23:56,080 --> 00:24:03,279
for all the name spaces in the cluster

00:24:00,720 --> 00:24:05,360
within octane we can view our secrets

00:24:03,279 --> 00:24:06,880
but remember auction is giving us a view

00:24:05,360 --> 00:24:09,520
into our cluster

00:24:06,880 --> 00:24:11,279
and within our cluster the secrets are

00:24:09,520 --> 00:24:14,480
kubernetes secrets

00:24:11,279 --> 00:24:17,360
which means that they are only base64

00:24:14,480 --> 00:24:18,000
encoded which means i cannot show you a

00:24:17,360 --> 00:24:20,320
secret here

00:24:18,000 --> 00:24:21,200
but i'll talk through some of the

00:24:20,320 --> 00:24:23,520
kubernetes

00:24:21,200 --> 00:24:25,039
external secrets flow and and how that

00:24:23,520 --> 00:24:27,360
works with jenkins x

00:24:25,039 --> 00:24:28,480
so jenga's x uses external secrets so

00:24:27,360 --> 00:24:31,200
that the source

00:24:28,480 --> 00:24:32,960
of truth of the secret is stored outside

00:24:31,200 --> 00:24:35,520
the cluster

00:24:32,960 --> 00:24:35,520
let's look

00:24:36,000 --> 00:24:43,679
at nexus you can see here

00:24:39,200 --> 00:24:43,679
that there is a password

00:24:43,840 --> 00:24:47,120
and within our cluster that is a

00:24:45,360 --> 00:24:49,279
kubernetes secret

00:24:47,120 --> 00:24:50,159
here's some metadata on it without the

00:24:49,279 --> 00:24:52,159
actual secret

00:24:50,159 --> 00:24:53,600
the secret is in this yaml file so i

00:24:52,159 --> 00:24:57,039
can't show you

00:24:53,600 --> 00:25:00,000
um but this gives a bit of a flow

00:24:57,039 --> 00:25:02,000
on how external secrets is helping to

00:25:00,000 --> 00:25:04,400
populate the kubernetes secret

00:25:02,000 --> 00:25:07,200
we'll take a quick look now at our

00:25:04,400 --> 00:25:07,200
cluster repo

00:25:07,520 --> 00:25:15,840
and we look in our helm file

00:25:10,640 --> 00:25:15,840
we can find a reference to nexus

00:25:18,159 --> 00:25:22,880
that's where we say where the nexus

00:25:19,600 --> 00:25:24,640
chart is and it's at jenkins x nexus

00:25:22,880 --> 00:25:26,559
this is an off-the-shelf helm chart that

00:25:24,640 --> 00:25:27,600
we're installing and here we can take a

00:25:26,559 --> 00:25:32,159
peek at it here

00:25:27,600 --> 00:25:34,400
it's jinx charts nexus as you can see

00:25:32,159 --> 00:25:35,279
this helm chart has a kubernetes secret

00:25:34,400 --> 00:25:38,320
in it

00:25:35,279 --> 00:25:39,120
kind to secret and you can see the

00:25:38,320 --> 00:25:40,880
templating

00:25:39,120 --> 00:25:43,440
for admin password and how good that

00:25:40,880 --> 00:25:47,279
gets piped into base64

00:25:43,440 --> 00:25:47,600
encoding which is how that secret will

00:25:47,279 --> 00:25:50,880
be

00:25:47,600 --> 00:25:52,080
in your kubernetes cluster so when we

00:25:50,880 --> 00:25:54,480
install nexus

00:25:52,080 --> 00:25:56,640
the boot pipeline runs and it detects as

00:25:54,480 --> 00:25:58,720
a kubernetes secret and it turns that

00:25:56,640 --> 00:26:00,799
into the external secret

00:25:58,720 --> 00:26:02,320
which we can see in the cluster git

00:26:00,799 --> 00:26:05,279
repository

00:26:02,320 --> 00:26:07,279
and there is no actual secret data that

00:26:05,279 --> 00:26:10,000
has been checked in to get

00:26:07,279 --> 00:26:10,799
so it's very secure to use kubernetes

00:26:10,000 --> 00:26:13,440
secrets

00:26:10,799 --> 00:26:14,720
and to use get ops with kubernetes but

00:26:13,440 --> 00:26:18,240
you do not have to check

00:26:14,720 --> 00:26:22,320
your actual secrets in to get

00:26:18,240 --> 00:26:24,799
you check in the external secret

00:26:22,320 --> 00:26:26,080
but when the boot pipeline applies all

00:26:24,799 --> 00:26:28,400
of that yaml

00:26:26,080 --> 00:26:30,480
external secret resources are installed

00:26:28,400 --> 00:26:32,559
and our external secret controller sees

00:26:30,480 --> 00:26:34,320
that it's an external secret

00:26:32,559 --> 00:26:36,400
and it's got a watch on our kubernetes

00:26:34,320 --> 00:26:37,520
api server

00:26:36,400 --> 00:26:39,679
and it's like hey i've got a new

00:26:37,520 --> 00:26:41,200
external secret that says to create a

00:26:39,679 --> 00:26:42,960
new secret for nexus

00:26:41,200 --> 00:26:44,240
so we'll get the details the data the

00:26:42,960 --> 00:26:47,039
password the keys

00:26:44,240 --> 00:26:48,080
from this location then the controller

00:26:47,039 --> 00:26:49,840
goes and gets

00:26:48,080 --> 00:26:52,640
that secret data and creates a real

00:26:49,840 --> 00:26:54,559
nexus kubernetes secret in the jx

00:26:52,640 --> 00:26:56,080
namespace

00:26:54,559 --> 00:26:59,039
and there's a little bit this diagram of

00:26:56,080 --> 00:26:59,520
that happening as we saw the nexus helm

00:26:59,039 --> 00:27:02,960
chart

00:26:59,520 --> 00:27:04,559
has a secret in the chart when we add it

00:27:02,960 --> 00:27:06,480
to jenkins x

00:27:04,559 --> 00:27:08,559
the boot pipeline generates an external

00:27:06,480 --> 00:27:11,600
secret which gets applied

00:27:08,559 --> 00:27:12,880
to our cluster the external secret

00:27:11,600 --> 00:27:15,360
controller which is running

00:27:12,880 --> 00:27:16,480
in the cluster will see that and go read

00:27:15,360 --> 00:27:19,279
the location

00:27:16,480 --> 00:27:20,159
to go and find the real secret wherever

00:27:19,279 --> 00:27:22,799
it's stored

00:27:20,159 --> 00:27:23,279
it will get the data from that secret

00:27:22,799 --> 00:27:24,960
and then

00:27:23,279 --> 00:27:27,600
it will bring it back and it will create

00:27:24,960 --> 00:27:29,840
a kubernetes secret inside the cluster

00:27:27,600 --> 00:27:31,520
with the real values and this can be

00:27:29,840 --> 00:27:33,679
seen in this yaml tab

00:27:31,520 --> 00:27:36,399
but the kubernetes secret data is never

00:27:33,679 --> 00:27:36,399
checked into kit

00:27:36,880 --> 00:27:40,320
okay so here are some links to discover

00:27:38,480 --> 00:27:42,799
more about jenkins three alpha

00:27:40,320 --> 00:27:44,480
how it differs from jenkins x2 some

00:27:42,799 --> 00:27:45,279
architectural changes that were made and

00:27:44,480 --> 00:27:46,960
why

00:27:45,279 --> 00:27:48,399
also links for finding out more about

00:27:46,960 --> 00:27:49,520
how to become involved with the jenkins

00:27:48,399 --> 00:27:51,840
x community

00:27:49,520 --> 00:27:53,200
join us for our bi-weekly office hours

00:27:51,840 --> 00:27:56,640
join us on slack

00:27:53,200 --> 00:27:58,720
join one of our sakes okay quick wrap-up

00:27:56,640 --> 00:28:00,399
git ops enables developers to treat the

00:27:58,720 --> 00:28:02,240
configuration of infrastructure and

00:28:00,399 --> 00:28:04,000
deployment of code

00:28:02,240 --> 00:28:05,520
in a similar manner to how they manage

00:28:04,000 --> 00:28:08,640
their software development process

00:28:05,520 --> 00:28:10,159
using a familiar tool git protecting

00:28:08,640 --> 00:28:11,760
secrets is not a small challenge in

00:28:10,159 --> 00:28:13,919
software development

00:28:11,760 --> 00:28:15,600
database passwords api keys tls

00:28:13,919 --> 00:28:16,159
certificates all need to be carefully

00:28:15,600 --> 00:28:18,480
protected

00:28:16,159 --> 00:28:20,320
and changed regularly fortunately cloud

00:28:18,480 --> 00:28:22,559
providers are designing systems

00:28:20,320 --> 00:28:24,240
and services to make this process easier

00:28:22,559 --> 00:28:26,080
as does hash combo

00:28:24,240 --> 00:28:27,760
and kubernetes provides a native secret

00:28:26,080 --> 00:28:29,360
object that can be used to protect any

00:28:27,760 --> 00:28:32,559
sensitive information

00:28:29,360 --> 00:28:34,240
needed within the kubernetes cluster

00:28:32,559 --> 00:28:36,080
however getting secret securely from

00:28:34,240 --> 00:28:36,960
back-end secret management systems into

00:28:36,080 --> 00:28:38,880
your cluster

00:28:36,960 --> 00:28:40,480
to be stored as kubernetes cigarettes

00:28:38,880 --> 00:28:42,559
has presented some security

00:28:40,480 --> 00:28:45,679
challenges and teams have had to create

00:28:42,559 --> 00:28:47,440
their own solutions to fill this gap

00:28:45,679 --> 00:28:49,520
kubernetes external tickets does a great

00:28:47,440 --> 00:28:52,159
job of securely solving this problem

00:28:49,520 --> 00:28:53,840
and that is why jane and sax has chosen

00:28:52,159 --> 00:28:56,799
it as the solution for secret management

00:28:53,840 --> 00:29:00,159
with get-offs and government

00:28:56,799 --> 00:29:02,399
so above all our one absolute rule for

00:29:00,159 --> 00:29:03,440
get ups kubernetes and see your

00:29:02,399 --> 00:29:06,240
management

00:29:03,440 --> 00:29:07,760
is do not store raw kubernetes secrets

00:29:06,240 --> 00:29:11,120
again

00:29:07,760 --> 00:29:21,120
okay so thank you for listening and

00:29:11,120 --> 00:29:21,120

YouTube URL: https://www.youtube.com/watch?v=cRO15KRieIU


