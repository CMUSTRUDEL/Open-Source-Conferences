Title: What Do Paketo Buildpacks Mean For Cloud Native Developers and Operators
Publication date: 2020-06-18
Playlist: Open Source Project Spotlight
Description: 
	Cloud Foundry Foundation recently announced the launch of Paketo Buildpacks for cloud native developers and operators. But what’s the difference between Cloud Foundry’s Packeto and the Buildpacks announced by CNCF? What does it mean for developers who are already using buildpacks? What kind of community is Cloud Foundry look at building around Paketo? What does the roadmap look like? 

To get answers to these questions and deep dive into Paketo buildpacks, Swapnil Bhartiya, Founder of TFiR.io spoke with Chip Childers, Executive Director, Cloud Foundry Foundation and Kashyap Vedurmudi, Product Manager at VMware.
Captions: 
	00:00:01,349 --> 00:00:05,759
hi these of the vodka and today we have

00:00:03,540 --> 00:00:07,890
with us two guest Kashyap mother moody

00:00:05,759 --> 00:00:09,510
product manager and Filmfare and tip

00:00:07,890 --> 00:00:12,049
Childers executive director of Cloud

00:00:09,510 --> 00:00:14,610
Foundry first of all welcome to the show

00:00:12,049 --> 00:00:17,270
today we are going to talk about packet

00:00:14,610 --> 00:00:19,980
or build packs which was announced I

00:00:17,270 --> 00:00:22,200
don't want to get into that old debates

00:00:19,980 --> 00:00:25,559
about docker files versions build packs

00:00:22,200 --> 00:00:26,849
we have talked about that for ages but

00:00:25,559 --> 00:00:29,189
they are two things that I do want to

00:00:26,849 --> 00:00:32,640
talk about before we talk about packet

00:00:29,189 --> 00:00:34,920
or in specific and that is I had a long

00:00:32,640 --> 00:00:37,350
discussion with Dirk unda at VMware and

00:00:34,920 --> 00:00:39,270
one is compliance and very security when

00:00:37,350 --> 00:00:41,370
you look at you know you put everything

00:00:39,270 --> 00:00:42,950
in the container like image you don't

00:00:41,370 --> 00:00:45,510
know the source where it's coming from

00:00:42,950 --> 00:00:47,400
if you're a big organization you may run

00:00:45,510 --> 00:00:48,540
the risk off compliance you know you

00:00:47,400 --> 00:00:50,460
don't know whether that's the

00:00:48,540 --> 00:00:52,290
application that you're running there is

00:00:50,460 --> 00:00:54,180
compliant with you and also security

00:00:52,290 --> 00:00:56,040
because there may be hard links to

00:00:54,180 --> 00:00:59,700
something you don't know what is running

00:00:56,040 --> 00:01:01,829
so how does buildpack solve these two

00:00:59,700 --> 00:01:05,100
problems so we have a couple things

00:01:01,829 --> 00:01:09,960
where we're constantly shipping build

00:01:05,100 --> 00:01:12,270
packs in just whenever a upstream

00:01:09,960 --> 00:01:14,310
security vulnerability comes out a new

00:01:12,270 --> 00:01:17,580
language family to version things like

00:01:14,310 --> 00:01:20,760
that so build packs make it much easier

00:01:17,580 --> 00:01:23,520
for especially for enterprise users just

00:01:20,760 --> 00:01:26,640
to continuously make sure that their app

00:01:23,520 --> 00:01:29,210
stay like up-to-date and secure and

00:01:26,640 --> 00:01:31,530
compliant so this is I think a huge

00:01:29,210 --> 00:01:34,799
value proposition of like what build

00:01:31,530 --> 00:01:36,330
packs offer versus using docker files to

00:01:34,799 --> 00:01:38,520
run your apps and to build your apps

00:01:36,330 --> 00:01:40,890
production the history of the foundry

00:01:38,520 --> 00:01:42,479
project is is you know it's been using

00:01:40,890 --> 00:01:44,729
build packs since nearly the beginning

00:01:42,479 --> 00:01:46,470
of its inception originally at VMware

00:01:44,729 --> 00:01:48,750
right before it kind of took its a

00:01:46,470 --> 00:01:52,890
journey to pivotal and then at the cff

00:01:48,750 --> 00:01:56,159
and so bill packs have demonstrated

00:01:52,890 --> 00:01:57,659
their value when used with a platform

00:01:56,159 --> 00:02:00,689
that's able to implement them

00:01:57,659 --> 00:02:02,040
effectively a few times right in

00:02:00,689 --> 00:02:04,460
particular I'm thinking about like the

00:02:02,040 --> 00:02:08,209
the open SSL heartbleed vulnerability I

00:02:04,460 --> 00:02:10,590
found that to be a great example of when

00:02:08,209 --> 00:02:12,569
languages and runtimes don't embed too

00:02:10,590 --> 00:02:14,450
many things in you know in their

00:02:12,569 --> 00:02:17,510
distribution statically

00:02:14,450 --> 00:02:21,170
then you're able to use the built back

00:02:17,510 --> 00:02:22,430
process to roll out security patches to

00:02:21,170 --> 00:02:25,670
these these really important underlying

00:02:22,430 --> 00:02:27,560
libraries very quickly like in as an

00:02:25,670 --> 00:02:29,720
example in a catch-up said that the

00:02:27,560 --> 00:02:32,030
build pack project is always and willing

00:02:29,720 --> 00:02:34,819
with Paquette oh they've always been

00:02:32,030 --> 00:02:36,470
keeping up-to-date with all their

00:02:34,819 --> 00:02:37,790
critical vulnerabilities or high

00:02:36,470 --> 00:02:39,110
vulnerabilities from from all the

00:02:37,790 --> 00:02:43,220
languages and frameworks get pulled

00:02:39,110 --> 00:02:45,620
together we had a you know the open ssl

00:02:43,220 --> 00:02:47,510
update rolled out to the the whole

00:02:45,620 --> 00:02:50,540
ecosystem and it managed to percolate

00:02:47,510 --> 00:02:53,360
through you know all the platforms that

00:02:50,540 --> 00:02:55,099
had the CF build packs embedded in them

00:02:53,360 --> 00:02:59,930
very quickly like in a matter of days

00:02:55,099 --> 00:03:01,849
and it was really smooth you know the

00:02:59,930 --> 00:03:04,760
only hiccup back then was that nodejs

00:03:01,849 --> 00:03:07,459
actually included the open ssl library

00:03:04,760 --> 00:03:09,430
in its own distribution so you know i

00:03:07,459 --> 00:03:11,599
think it was about a month or so after

00:03:09,430 --> 00:03:13,700
heartbleed that they they slipped that

00:03:11,599 --> 00:03:15,349
out and then bill packs could be more

00:03:13,700 --> 00:03:17,030
effective at helping to support some of

00:03:15,349 --> 00:03:18,230
its underlying libraries thanks for

00:03:17,030 --> 00:03:21,260
explaining that and if I'm not wrong

00:03:18,230 --> 00:03:26,120
last year CN CF also and also you know a

00:03:21,260 --> 00:03:28,430
built back product if I am NOT wrong is

00:03:26,120 --> 00:03:32,989
that correct I may have the timeline

00:03:28,430 --> 00:03:35,720
totally wrong so my question is that why

00:03:32,989 --> 00:03:37,880
is why is not to put a lot of you know

00:03:35,720 --> 00:03:41,239
as part of the same company working on

00:03:37,880 --> 00:03:43,370
this build pack so what is the

00:03:41,239 --> 00:03:44,930
difference between what CNC of doing the

00:03:43,370 --> 00:03:46,370
error versus what you try guys are

00:03:44,930 --> 00:03:48,500
trying to do here that's a great

00:03:46,370 --> 00:03:50,269
question and probably like the base

00:03:48,500 --> 00:03:52,850
question we think getting asked for this

00:03:50,269 --> 00:03:54,799
whole launch so the CN CF cloud native

00:03:52,850 --> 00:03:56,690
build packs project they built an

00:03:54,799 --> 00:03:59,690
underlying like specification and

00:03:56,690 --> 00:04:01,940
tooling needed to like build a cloud

00:03:59,690 --> 00:04:04,459
native compliant build pack oh the

00:04:01,940 --> 00:04:06,980
picado project is just a set of language

00:04:04,459 --> 00:04:09,829
family implementations on top of these

00:04:06,980 --> 00:04:12,470
cloud native build pack specification so

00:04:09,829 --> 00:04:14,930
we build implementations of when we

00:04:12,470 --> 00:04:19,400
launched the other day we have java

00:04:14,930 --> 00:04:20,690
nodejs php.net core and probably a

00:04:19,400 --> 00:04:23,450
couple others that are missing

00:04:20,690 --> 00:04:25,970
build pack implementations on top of

00:04:23,450 --> 00:04:28,130
that spec and why do you call it packet

00:04:25,970 --> 00:04:30,050
o built by the specific reasons for this

00:04:28,130 --> 00:04:31,520
that's a great question as well to be

00:04:30,050 --> 00:04:33,740
completely honest with you or your whole

00:04:31,520 --> 00:04:35,990
engineering team went through about like

00:04:33,740 --> 00:04:37,940
two different naming exercises just to

00:04:35,990 --> 00:04:39,860
generate different names for build tax

00:04:37,940 --> 00:04:42,040
at a team lunch a couple months ago

00:04:39,860 --> 00:04:45,830
someone came up with potato which

00:04:42,040 --> 00:04:48,410
translates to Creek in sorry that

00:04:45,830 --> 00:04:50,570
translates to package in Creek what we

00:04:48,410 --> 00:04:54,710
really liked about it was kubernetes

00:04:50,570 --> 00:04:56,960
translates to pilot in creek and we

00:04:54,710 --> 00:04:58,880
liked that with potato translating the

00:04:56,960 --> 00:05:01,190
package in Greek we can come off with

00:04:58,880 --> 00:05:03,530
the Association that like potato build

00:05:01,190 --> 00:05:05,330
packs package to your apps as container

00:05:03,530 --> 00:05:07,160
images stab like any cloud native

00:05:05,330 --> 00:05:09,290
platform similar to coop Nettie's can

00:05:07,160 --> 00:05:11,000
orchestrate so the name kind of stuck at

00:05:09,290 --> 00:05:13,460
the end talk a bit about the

00:05:11,000 --> 00:05:15,890
collaboration between cloud foundry and

00:05:13,460 --> 00:05:18,170
VMware for this project the interesting

00:05:15,890 --> 00:05:20,960
thing is that in a cloud foundry is part

00:05:18,170 --> 00:05:23,330
of you know Rick's foundation as CN CF

00:05:20,960 --> 00:05:24,740
is also part of the explanation VMware

00:05:23,330 --> 00:05:26,240
does a lot of work in cube in this space

00:05:24,740 --> 00:05:27,890
and through pivotal does a lot of work

00:05:26,240 --> 00:05:29,540
in is it very you know it's kind of you

00:05:27,890 --> 00:05:31,040
know you're talking about a galaxy where

00:05:29,540 --> 00:05:32,270
everybody is kind of sharing their you

00:05:31,040 --> 00:05:33,940
know raw but it will be the each other

00:05:32,270 --> 00:05:37,210
so talk about the chemistry between

00:05:33,940 --> 00:05:39,980
VMware Cloud Foundry CN CF around this

00:05:37,210 --> 00:05:42,830
packet of built bank I just I want to

00:05:39,980 --> 00:05:44,420
start probably by saying you know since

00:05:42,830 --> 00:05:47,350
the credit build PAC project is a quad

00:05:44,420 --> 00:05:49,400
fender foundation project right and so

00:05:47,350 --> 00:05:51,380
what that means is it's the same

00:05:49,400 --> 00:05:53,000
engineers that are and and contributors

00:05:51,380 --> 00:05:54,920
that are working on the traditional

00:05:53,000 --> 00:05:56,810
client foundry build packs are are

00:05:54,920 --> 00:05:57,980
building you know the potato collection

00:05:56,810 --> 00:06:00,020
right so you get all their past

00:05:57,980 --> 00:06:02,270
experience as a community you know

00:06:00,020 --> 00:06:04,430
building and maintaining and keeping up

00:06:02,270 --> 00:06:07,370
to date these new you know cloud native

00:06:04,430 --> 00:06:08,780
not compliant things you know one of the

00:06:07,370 --> 00:06:10,430
one of the goals of the project team

00:06:08,780 --> 00:06:11,740
which I'm sure ketchup could share a

00:06:10,430 --> 00:06:15,800
little bit more about as well is that

00:06:11,740 --> 00:06:18,890
you traditionally the Cloud Foundry

00:06:15,800 --> 00:06:21,290
build pack collection has seen the

00:06:18,890 --> 00:06:23,390
majority of the effort that was put into

00:06:21,290 --> 00:06:24,590
maintaining it coming from coming from

00:06:23,390 --> 00:06:26,180
pivotal

00:06:24,590 --> 00:06:28,490
there was certainly a lot of casual

00:06:26,180 --> 00:06:29,990
contributors but it was something that

00:06:28,490 --> 00:06:32,750
kind of pivotal bore the full burden on

00:06:29,990 --> 00:06:36,740
and we think that it's incredibly

00:06:32,750 --> 00:06:40,430
important that now that the the cloud

00:06:36,740 --> 00:06:42,620
native bill packs spec can be used in

00:06:40,430 --> 00:06:46,220
many different platform

00:06:42,620 --> 00:06:48,190
that a lot of participants kind of rally

00:06:46,220 --> 00:06:50,960
around this because it's it's a

00:06:48,190 --> 00:06:55,940
opportunity to get really high quality

00:06:50,960 --> 00:06:57,290
you know bill pack code brought in to

00:06:55,940 --> 00:06:59,419
whichever platform you're using whether

00:06:57,290 --> 00:07:00,950
it's Tecton or its Google Cloud run or

00:06:59,419 --> 00:07:03,310
whether it's you know the the CF or

00:07:00,950 --> 00:07:05,510
kate's distribution of of Cloud Foundry

00:07:03,310 --> 00:07:07,460
they're going to be a lot of end users

00:07:05,510 --> 00:07:09,620
that should be able to amplify you know

00:07:07,460 --> 00:07:10,970
the feedback loop you know back to the

00:07:09,620 --> 00:07:12,830
project team and you know we're very

00:07:10,970 --> 00:07:14,870
open to new contributors there that's an

00:07:12,830 --> 00:07:16,640
excellent point and and what kind of

00:07:14,870 --> 00:07:18,919
community or are you planning to build

00:07:16,640 --> 00:07:20,090
around these peccable build packs and

00:07:18,919 --> 00:07:21,380
when I talk about community you know

00:07:20,090 --> 00:07:23,720
there is no single community their

00:07:21,380 --> 00:07:25,130
vendors they're either users there are

00:07:23,720 --> 00:07:31,040
major contributors can you talk about

00:07:25,130 --> 00:07:33,110
that a bit and also that well CN CF is

00:07:31,040 --> 00:07:34,610
kind of working on compliance but where

00:07:33,110 --> 00:07:35,780
will people get this built back can you

00:07:34,610 --> 00:07:38,570
talk about will there be a marketplace

00:07:35,780 --> 00:07:39,740
or there there will be a kind of just of

00:07:38,570 --> 00:07:41,360
a there was a docker hub a lot of you

00:07:39,740 --> 00:07:43,220
know the source of their registries so

00:07:41,360 --> 00:07:44,870
it's a two-part what kind of community

00:07:43,220 --> 00:07:46,310
are you building around it and what will

00:07:44,870 --> 00:07:48,380
be the resources available for the

00:07:46,310 --> 00:07:50,690
community to build and consume these

00:07:48,380 --> 00:07:53,690
book bags I think just to add on a

00:07:50,690 --> 00:07:56,180
little bit to what chip said community

00:07:53,690 --> 00:07:58,220
is like super important for us with this

00:07:56,180 --> 00:08:01,370
whole picado launch I think what we're

00:07:58,220 --> 00:08:03,410
looking for ideally is a mix of vendors

00:08:01,370 --> 00:08:05,330
helping us out similar to what Cloud

00:08:03,410 --> 00:08:08,030
Foundry Foundation has had in the past

00:08:05,330 --> 00:08:09,919
as well as like individual contributors

00:08:08,030 --> 00:08:11,390
and what's super exciting to see is we

00:08:09,919 --> 00:08:13,760
just launched a couple days ago and

00:08:11,390 --> 00:08:16,550
we're already seeing a bunch of people

00:08:13,760 --> 00:08:18,229
reaching out and trying out potato build

00:08:16,550 --> 00:08:21,680
packs and interested in contributing

00:08:18,229 --> 00:08:23,240
we're seeing that maybe like people

00:08:21,680 --> 00:08:25,880
might be interested in helping us

00:08:23,240 --> 00:08:29,360
develop a Python potato build pack which

00:08:25,880 --> 00:08:30,950
is really cool to see to answer the

00:08:29,360 --> 00:08:33,289
second part of your question around like

00:08:30,950 --> 00:08:37,070
a marketplace or some sort of ecosystem

00:08:33,289 --> 00:08:39,830
I think in the future that would be

00:08:37,070 --> 00:08:42,169
super cool to have something like that

00:08:39,830 --> 00:08:44,630
in the short term what we're doing is we

00:08:42,169 --> 00:08:47,210
have this concept of builder images or

00:08:44,630 --> 00:08:49,460
like a builder is effectively a set of

00:08:47,210 --> 00:08:50,990
build packs potato build pets that are

00:08:49,460 --> 00:08:53,600
packaged in there so we ship our

00:08:50,990 --> 00:08:55,520
builders onto a GC our registry that

00:08:53,600 --> 00:09:01,070
users can then use to consume

00:08:55,520 --> 00:09:03,200
or don't act is there any specific build

00:09:01,070 --> 00:09:06,589
packs that will be available or you know

00:09:03,200 --> 00:09:08,360
you focusing on to start with yeah so we

00:09:06,589 --> 00:09:12,890
write like when we launch the other day

00:09:08,360 --> 00:09:17,720
we have officially have Java nodejs

00:09:12,890 --> 00:09:19,420
dotnet core PHP and in Jeanette's picado

00:09:17,720 --> 00:09:22,160
build packs available at the moment

00:09:19,420 --> 00:09:25,700
we're currently just getting started

00:09:22,160 --> 00:09:28,209
around a ruby potato build pack and

00:09:25,700 --> 00:09:31,760
looking into publishing some sort of

00:09:28,209 --> 00:09:35,720
official project wide roadmap in the

00:09:31,760 --> 00:09:36,860
future to to show what's coming next I

00:09:35,720 --> 00:09:38,450
think that's another really good

00:09:36,860 --> 00:09:41,510
opportunity for people to get involved

00:09:38,450 --> 00:09:43,580
you know as you said there's there's

00:09:41,510 --> 00:09:47,600
been interest organically in helping to

00:09:43,580 --> 00:09:50,270
add you know Python as a build pack you

00:09:47,600 --> 00:09:52,399
know there's there's sort of a there's a

00:09:50,270 --> 00:09:53,600
very long tail of you know different

00:09:52,399 --> 00:09:56,180
languages and frameworks that are used

00:09:53,600 --> 00:09:58,190
in the enterprise context and sobriquet

00:09:56,180 --> 00:10:00,920
I was going out the door with a set of

00:09:58,190 --> 00:10:02,180
like the set of build packs that

00:10:00,920 --> 00:10:04,360
basically solved a majority of

00:10:02,180 --> 00:10:07,399
enterprise development use cases right

00:10:04,360 --> 00:10:10,100
you know Python is used very heavily

00:10:07,399 --> 00:10:12,260
it's but it's a little bit less than

00:10:10,100 --> 00:10:14,360
Java right and so you know that the tail

00:10:12,260 --> 00:10:16,310
starts to drop a little bit but there's

00:10:14,360 --> 00:10:18,920
a lot of opportunity in those languages

00:10:16,310 --> 00:10:21,709
and frameworks that that the the kind of

00:10:18,920 --> 00:10:24,200
project team hasn't created you know on

00:10:21,709 --> 00:10:26,600
their own but those same patterns can be

00:10:24,200 --> 00:10:29,899
followed for you know languages that

00:10:26,600 --> 00:10:31,520
might be maybe lesser used and as the

00:10:29,899 --> 00:10:32,959
the kind of the community grows around

00:10:31,520 --> 00:10:34,970
not just the cloud native built pack

00:10:32,959 --> 00:10:37,040
spec alright because anyone could build

00:10:34,970 --> 00:10:40,420
a build back to that spec but I think

00:10:37,040 --> 00:10:44,860
the the practices of the picado project

00:10:40,420 --> 00:10:47,779
lend themselves to a kind of a quality

00:10:44,860 --> 00:10:49,130
distribution of a build pack right if

00:10:47,779 --> 00:10:50,450
you search on get up for build packs

00:10:49,130 --> 00:10:52,160
even if you're just looking at you know

00:10:50,450 --> 00:10:54,170
kind of the past version of the way

00:10:52,160 --> 00:10:56,120
build packs work you find thousands of

00:10:54,170 --> 00:10:58,279
them right but some of them are stale

00:10:56,120 --> 00:11:01,730
some of them are you know they kind of

00:10:58,279 --> 00:11:05,510
half work and and I think that more

00:11:01,730 --> 00:11:09,020
important than you know exactly which

00:11:05,510 --> 00:11:10,610
bill packs are offered today is that the

00:11:09,020 --> 00:11:13,310
kind of project is an opportunity for

00:11:10,610 --> 00:11:15,920
people to come together around the

00:11:13,310 --> 00:11:17,750
discipline of building quality build

00:11:15,920 --> 00:11:19,640
packs and then maintaining them over

00:11:17,750 --> 00:11:22,310
time yeah exactly that's a really good

00:11:19,640 --> 00:11:24,890
point and I think that like over the

00:11:22,310 --> 00:11:26,960
next coming weeks to months were really

00:11:24,890 --> 00:11:29,240
focused on improving a lot of her

00:11:26,960 --> 00:11:31,670
documentation to help enable things like

00:11:29,240 --> 00:11:34,100
this we have a couple tutorials right

00:11:31,670 --> 00:11:36,740
now just to help users create like a

00:11:34,100 --> 00:11:38,480
potato style build pack and lots of

00:11:36,740 --> 00:11:41,300
tools and things like that out there so

00:11:38,480 --> 00:11:43,300
my end goal and I'm sure chip agrees

00:11:41,300 --> 00:11:46,820
with this which is like I'd love to see

00:11:43,300 --> 00:11:48,500
a user just coming in with very little

00:11:46,820 --> 00:11:51,350
build pack experience and be able to

00:11:48,500 --> 00:11:54,110
build say a rust cloud native build pack

00:11:51,350 --> 00:11:56,630
or something like that very simply and

00:11:54,110 --> 00:11:58,220
easily and support that and that that's

00:11:56,630 --> 00:12:00,050
like the end goal of where we want to go

00:11:58,220 --> 00:12:02,780
in terms of enabling the community to

00:12:00,050 --> 00:12:05,180
build build packs easily so what happens

00:12:02,780 --> 00:12:06,950
to the exit because they're like a lot

00:12:05,180 --> 00:12:08,570
of built backs already there so is there

00:12:06,950 --> 00:12:10,640
any pad but they can just bring it into

00:12:08,570 --> 00:12:11,840
that what happened to this existing Bill

00:12:10,640 --> 00:12:13,430
pack that a lot of companies are

00:12:11,840 --> 00:12:14,900
outmatches have deployed already for

00:12:13,430 --> 00:12:17,960
Cloud Foundry both packs we're gonna

00:12:14,900 --> 00:12:20,810
continue providing support for CF

00:12:17,960 --> 00:12:22,700
workloads into the foreseeable future so

00:12:20,810 --> 00:12:25,070
what we did is we built a concept of

00:12:22,700 --> 00:12:27,040
like a compatibility layer on top of

00:12:25,070 --> 00:12:31,250
every one of her potato build packs

00:12:27,040 --> 00:12:34,280
which allow your which allow us to ship

00:12:31,250 --> 00:12:36,440
a Cloud Foundry compatible cloud native

00:12:34,280 --> 00:12:38,510
build pack and that enables your CF

00:12:36,440 --> 00:12:40,850
workloads to continue to work with the

00:12:38,510 --> 00:12:42,470
potato build apps I think I think one of

00:12:40,850 --> 00:12:44,480
the things to understand and this is

00:12:42,470 --> 00:12:46,100
this is where it gets a little bit

00:12:44,480 --> 00:12:47,930
confusing right there's old build packs

00:12:46,100 --> 00:12:50,510
as a concept has a fairly long history

00:12:47,930 --> 00:12:51,830
so it started at Heroku the CFM was

00:12:50,510 --> 00:12:53,410
emulating her of it right it was like

00:12:51,830 --> 00:12:56,240
the open source alternative to Heroku

00:12:53,410 --> 00:12:58,670
and it implemented build packs in order

00:12:56,240 --> 00:13:01,610
to have that that support and for a

00:12:58,670 --> 00:13:03,800
while they were largely compatible right

00:13:01,610 --> 00:13:05,570
you could take our Heroku build pack and

00:13:03,800 --> 00:13:07,580
you could use that in a cloud foundry

00:13:05,570 --> 00:13:10,640
context or you could do you know the

00:13:07,580 --> 00:13:12,200
reverse and so you know there that

00:13:10,640 --> 00:13:14,450
worked for a while

00:13:12,200 --> 00:13:15,740
the the two the two platforms right

00:13:14,450 --> 00:13:17,630
cloud founder and open open source

00:13:15,740 --> 00:13:19,550
community and then Heroku is as a

00:13:17,630 --> 00:13:22,760
product or you know platform as a

00:13:19,550 --> 00:13:26,270
service that's all proprietary and this

00:13:22,760 --> 00:13:27,650
to diverge right so so the compatibility

00:13:26,270 --> 00:13:31,700
and you know within the ecosystem

00:13:27,650 --> 00:13:34,340
started to break down when the the CNCs

00:13:31,700 --> 00:13:36,410
cloud native built packs project kicked

00:13:34,340 --> 00:13:38,630
off to me that was actually one of the

00:13:36,410 --> 00:13:42,290
most important moments in kind of the

00:13:38,630 --> 00:13:44,420
platform-as-a-service space in a number

00:13:42,290 --> 00:13:47,660
of years because it represented a kind

00:13:44,420 --> 00:13:49,910
of a reconvergence or you know streams

00:13:47,660 --> 00:13:53,900
of work and sets of experiences with

00:13:49,910 --> 00:13:55,760
different end users that that made a ton

00:13:53,900 --> 00:13:57,710
of sense for everyone but what that

00:13:55,760 --> 00:14:00,950
means though is that the the CMB spec is

00:13:57,710 --> 00:14:04,220
it's it's a new way to build build packs

00:14:00,950 --> 00:14:06,290
right so all that historical work you

00:14:04,220 --> 00:14:10,670
know for the CF community building that

00:14:06,290 --> 00:14:12,680
shim is important but it's really

00:14:10,670 --> 00:14:16,100
critical to understand that a cloud

00:14:12,680 --> 00:14:18,860
native build pack compliant build pack

00:14:16,100 --> 00:14:22,250
is different from a kind of traditional

00:14:18,860 --> 00:14:24,080
Heroku or or Cloud Foundry an older

00:14:22,250 --> 00:14:26,960
version build pack they they're

00:14:24,080 --> 00:14:28,850
implemented differently and so that it's

00:14:26,960 --> 00:14:31,430
it's like it's a new generation of them

00:14:28,850 --> 00:14:32,600
and that's where a new ecosystem because

00:14:31,430 --> 00:14:35,450
there are multiple platforms that now

00:14:32,600 --> 00:14:37,820
support their use is really gonna kind

00:14:35,450 --> 00:14:38,780
of kick in here so push up you mentioned

00:14:37,820 --> 00:14:40,460
you know there a lot of resources a

00:14:38,780 --> 00:14:42,020
documentary that we coming up so what

00:14:40,460 --> 00:14:44,090
are the resources that are available at

00:14:42,020 --> 00:14:46,730
this moment that people can you know

00:14:44,090 --> 00:14:49,280
either read or go through there to get

00:14:46,730 --> 00:14:51,140
you know more you know kind of aware of

00:14:49,280 --> 00:14:52,790
the project at the same time how they

00:14:51,140 --> 00:14:53,710
can get involved with the project so

00:14:52,790 --> 00:14:56,600
right now we have like a couple

00:14:53,710 --> 00:14:58,640
tutorials out there just around like how

00:14:56,600 --> 00:15:00,350
to get started with picado build packs

00:14:58,640 --> 00:15:03,680
as well as like how to go ahead and

00:15:00,350 --> 00:15:06,020
create your own kettlebell pack in terms

00:15:03,680 --> 00:15:07,910
of getting started and helping out and

00:15:06,020 --> 00:15:09,710
getting involved I think the best way to

00:15:07,910 --> 00:15:13,820
get started right now is to join us on

00:15:09,710 --> 00:15:18,290
slack our slack is slack topic a topi a

00:15:13,820 --> 00:15:19,550
ket OTO or visit our website and go

00:15:18,290 --> 00:15:24,140
through the content the website is

00:15:19,550 --> 00:15:26,270
potato PA ket o daya chip and Kashyap

00:15:24,140 --> 00:15:28,070
thank you so much for taking time out of

00:15:26,270 --> 00:15:30,350
your schedule and talking to us today

00:15:28,070 --> 00:15:33,910
about this project and good luck with

00:15:30,350 --> 00:15:33,910

YouTube URL: https://www.youtube.com/watch?v=kyQfP1ffjSQ


