Title: Linkerd 2.9: A Giant Leap Towards Zero Trust
Publication date: 2021-01-08
Playlist: Open Source Project Spotlight
Description: 
	Linkerd is one of the most popular ultra-light, security-first service mesh for Kubernetes. It allows users to add critical security, observability, and reliability features to their Kubernetes stack without any code change. We sat down with the original creator of the project, Buoyant CEO William Morgan, to talk about the product and its latest iteration.
Captions: 
	00:00:02,000 --> 00:00:05,120
hi this is your host bharti and today we

00:00:03,760 --> 00:00:07,919
have with us once again

00:00:05,120 --> 00:00:09,679
uh william morgan ceo of buoyant william

00:00:07,919 --> 00:00:13,280
it's great to have you on the show again

00:00:09,679 --> 00:00:14,960
great to be back uh liquidy 2.9 has been

00:00:13,280 --> 00:00:16,880
released tell us what's new there

00:00:14,960 --> 00:00:18,160
yeah so this is a very big release for

00:00:16,880 --> 00:00:19,600
us there's a couple uh

00:00:18,160 --> 00:00:22,080
kind of exciting features here the

00:00:19,600 --> 00:00:25,439
biggest one is probably around

00:00:22,080 --> 00:00:26,880
mutual tls for all tcp connections so

00:00:25,439 --> 00:00:30,720
linkrd has had

00:00:26,880 --> 00:00:32,960
mutual tls for http and for grpc traffic

00:00:30,720 --> 00:00:35,120
uh for a couple of versions now but in

00:00:32,960 --> 00:00:35,440
the 2.9 release we've extended that so

00:00:35,120 --> 00:00:38,480
that

00:00:35,440 --> 00:00:39,280
any tcp connection uh between meshed

00:00:38,480 --> 00:00:42,719
endpoints

00:00:39,280 --> 00:00:44,640
can now be mtls'd and

00:00:42,719 --> 00:00:45,760
in fact we do it in the same way we were

00:00:44,640 --> 00:00:48,399
doing it before where it's

00:00:45,760 --> 00:00:49,120
zero config and it's turned on by

00:00:48,399 --> 00:00:51,120
default

00:00:49,120 --> 00:00:52,320
so the moment that you add linker d on

00:00:51,120 --> 00:00:54,280
to either side

00:00:52,320 --> 00:00:55,600
you get all the benefits of

00:00:54,280 --> 00:00:57,920
confidentiality

00:00:55,600 --> 00:01:00,239
and authenticity all the certificate

00:00:57,920 --> 00:01:01,840
rotation stuff is happening

00:01:00,239 --> 00:01:03,039
and identity is tied to kubernetes

00:01:01,840 --> 00:01:04,000
service accounts kind of everything that

00:01:03,039 --> 00:01:07,200
you would want

00:01:04,000 --> 00:01:09,680
to uh have a kind of one-stop

00:01:07,200 --> 00:01:10,560
shop for making a pretty big step

00:01:09,680 --> 00:01:12,880
towards

00:01:10,560 --> 00:01:14,240
zero trust you have also added support

00:01:12,880 --> 00:01:16,000
for arm

00:01:14,240 --> 00:01:18,320
talk about that yeah that's right that's

00:01:16,000 --> 00:01:19,119
right so as of 2.9 linker d can now run

00:01:18,320 --> 00:01:21,119
on your

00:01:19,119 --> 00:01:22,159
raspberry pi if you want or you can run

00:01:21,119 --> 00:01:25,520
it on uh

00:01:22,159 --> 00:01:28,799
aws's graviton arm processors

00:01:25,520 --> 00:01:31,280
so it's pretty pretty exciting

00:01:28,799 --> 00:01:32,720
um the other thing that we've added uh

00:01:31,280 --> 00:01:36,880
is on the

00:01:32,720 --> 00:01:36,880
proxy side so linkery runs

00:01:37,119 --> 00:01:40,720
it runs a proxy called simply linker d2

00:01:39,759 --> 00:01:43,200
proxy

00:01:40,720 --> 00:01:44,399
uh super small super lightweight written

00:01:43,200 --> 00:01:47,320
in rust

00:01:44,399 --> 00:01:49,040
and as of 2.9 we have extended that to

00:01:47,320 --> 00:01:52,159
multi-core

00:01:49,040 --> 00:01:54,079
support so an individual proxy it's not

00:01:52,159 --> 00:01:55,360
only faster and smaller than where we

00:01:54,079 --> 00:01:57,520
were in 2.8 but

00:01:55,360 --> 00:01:58,880
it can now scale out to multiple cores

00:01:57,520 --> 00:02:00,159
so if your pod has a whole lot of

00:01:58,880 --> 00:02:01,759
traffic

00:02:00,159 --> 00:02:04,479
it should be fine you're also kind of

00:02:01,759 --> 00:02:07,439
bragging about the the the blazing fast

00:02:04,479 --> 00:02:08,000
speed and ultra low memory footprint as

00:02:07,439 --> 00:02:12,080
compared

00:02:08,000 --> 00:02:13,440
to stu uh how does it matter and what

00:02:12,080 --> 00:02:14,080
what did you do to make it more

00:02:13,440 --> 00:02:15,920
efficient

00:02:14,080 --> 00:02:17,200
yeah so a lot of this comes down to the

00:02:15,920 --> 00:02:19,840
fact that we use this very

00:02:17,200 --> 00:02:20,959
uh kind of tailor-made proxy and by

00:02:19,840 --> 00:02:23,760
taylormade i mean

00:02:20,959 --> 00:02:25,200
it is designed for the sidecar service

00:02:23,760 --> 00:02:27,520
mesh use case

00:02:25,200 --> 00:02:29,120
specifically of course it's 100 open

00:02:27,520 --> 00:02:31,920
source it's part of the cncf

00:02:29,120 --> 00:02:32,560
project it has regular security audits

00:02:31,920 --> 00:02:35,200
it's written in

00:02:32,560 --> 00:02:37,280
rust um you know we're doing everything

00:02:35,200 --> 00:02:40,560
to make this an extremely stable

00:02:37,280 --> 00:02:42,319
uh foundation but really the

00:02:40,560 --> 00:02:44,480
the trick is because we are designing it

00:02:42,319 --> 00:02:46,319
for this specific use case

00:02:44,480 --> 00:02:48,000
we can shed a lot of the complexity we

00:02:46,319 --> 00:02:49,760
can shed a lot of the overhead

00:02:48,000 --> 00:02:52,080
because all we have to do is satisfy the

00:02:49,760 --> 00:02:54,800
sidecar service mesh use case and that's

00:02:52,080 --> 00:02:55,760
that's a primary reason why linker d is

00:02:54,800 --> 00:02:59,680
so much

00:02:55,760 --> 00:03:02,879
faster and and consumes uh you know

00:02:59,680 --> 00:03:05,760
fewer resources than other options what

00:03:02,879 --> 00:03:06,720
traction have you seen for link ready

00:03:05,760 --> 00:03:08,239
especially after

00:03:06,720 --> 00:03:10,879
google's announcement or google's

00:03:08,239 --> 00:03:13,440
decision to not put sdu

00:03:10,879 --> 00:03:15,200
into cncf yeah it's hard to know how

00:03:13,440 --> 00:03:16,640
much of a difference that made directly

00:03:15,200 --> 00:03:17,840
for linker d certainly we

00:03:16,640 --> 00:03:19,280
you know there are people who have told

00:03:17,840 --> 00:03:20,720
us oh this is a reason why we're

00:03:19,280 --> 00:03:23,200
adopting liberty it's really important

00:03:20,720 --> 00:03:25,280
for us to be part of the cncf ecosystem

00:03:23,200 --> 00:03:27,200
we're building you know our entire stack

00:03:25,280 --> 00:03:30,080
on top of cmcf projects

00:03:27,200 --> 00:03:30,080
but uh

00:03:30,319 --> 00:03:34,640
i don't know whether that's you know the

00:03:32,959 --> 00:03:35,519
the reasons why people come to lingerie

00:03:34,640 --> 00:03:38,239
especially from

00:03:35,519 --> 00:03:39,120
from istio is because it's smaller and

00:03:38,239 --> 00:03:41,120
faster

00:03:39,120 --> 00:03:42,879
primarily and and actually the thing

00:03:41,120 --> 00:03:46,080
that i think really drives people is

00:03:42,879 --> 00:03:46,959
it's simpler right it's a little very i

00:03:46,080 --> 00:03:49,040
wouldn't say it's

00:03:46,959 --> 00:03:51,200
very simple overall but it's it's about

00:03:49,040 --> 00:03:53,120
as simple as a service mesh can be

00:03:51,200 --> 00:03:54,959
so how that stacks up you know how the

00:03:53,120 --> 00:03:56,480
cmcf aspect stacks up

00:03:54,959 --> 00:03:58,239
a little unclear to me but certainly it

00:03:56,480 --> 00:03:59,920
hasn't hasn't harmed anything

00:03:58,239 --> 00:04:01,760
i mean the fact is that people don't

00:03:59,920 --> 00:04:04,080
choose a project based on

00:04:01,760 --> 00:04:05,920
where it is hosted you know a lot of

00:04:04,080 --> 00:04:06,480
posters probably they're hosted apache

00:04:05,920 --> 00:04:10,000
and all that

00:04:06,480 --> 00:04:10,640
they choose project that scratches their

00:04:10,000 --> 00:04:12,080
edge or

00:04:10,640 --> 00:04:14,720
that helps them so you're absolutely

00:04:12,080 --> 00:04:15,519
right about that but it does play a big

00:04:14,720 --> 00:04:17,280
role

00:04:15,519 --> 00:04:18,959
uh because they have they get that

00:04:17,280 --> 00:04:20,239
confidence that putting all their eggs

00:04:18,959 --> 00:04:22,639
in their basket

00:04:20,239 --> 00:04:24,160
and who owns that basket so that that

00:04:22,639 --> 00:04:24,720
just but you're absolutely right that it

00:04:24,160 --> 00:04:26,880
doesn't

00:04:24,720 --> 00:04:28,960
at this point it doesn't really uh you

00:04:26,880 --> 00:04:31,600
cannot have that metric there

00:04:28,960 --> 00:04:32,800
one more thing that i uh want to ask you

00:04:31,600 --> 00:04:35,600
is that

00:04:32,800 --> 00:04:36,160
uh we talked about it last time also but

00:04:35,600 --> 00:04:39,280
uh

00:04:36,160 --> 00:04:41,120
can we talk about the the release

00:04:39,280 --> 00:04:42,080
cadence of link ready number one number

00:04:41,120 --> 00:04:44,960
two is because

00:04:42,080 --> 00:04:46,080
of this change landscape because of the

00:04:44,960 --> 00:04:49,199
pandemic

00:04:46,080 --> 00:04:50,160
the way uh even if company's plans have

00:04:49,199 --> 00:04:52,160
not changed they

00:04:50,160 --> 00:04:53,759
have accelerated you know adoption

00:04:52,160 --> 00:04:54,479
digital transformation or cloud native

00:04:53,759 --> 00:04:57,360
journey

00:04:54,479 --> 00:04:59,199
so how does that affect uh linkedin yeah

00:04:57,360 --> 00:04:59,840
that's definitely resulted in a big

00:04:59,199 --> 00:05:02,000
increase

00:04:59,840 --> 00:05:03,199
in adoption uh one of my favorite

00:05:02,000 --> 00:05:06,320
stories here is

00:05:03,199 --> 00:05:08,880
heb which is a big texas grocery store

00:05:06,320 --> 00:05:10,080
uh adopted linker d as a way of

00:05:08,880 --> 00:05:12,800
expediting their

00:05:10,080 --> 00:05:13,919
rollout of curbside pickup and and

00:05:12,800 --> 00:05:16,560
delivery

00:05:13,919 --> 00:05:17,840
because because because of covig 19

00:05:16,560 --> 00:05:18,960
right suddenly this was a really

00:05:17,840 --> 00:05:21,440
important thing

00:05:18,960 --> 00:05:22,960
for how people could get their groceries

00:05:21,440 --> 00:05:24,800
without having to go into the store

00:05:22,960 --> 00:05:26,160
so they use linker d they have a really

00:05:24,800 --> 00:05:27,600
nice talk that they're putting together

00:05:26,160 --> 00:05:29,520
for kubecon about this

00:05:27,600 --> 00:05:30,720
um so i think that's a great example of

00:05:29,520 --> 00:05:34,160
you know kovan 19

00:05:30,720 --> 00:05:37,039
of course being this terrible uh

00:05:34,160 --> 00:05:39,120
pandemic but technology companies doing

00:05:37,039 --> 00:05:40,560
their best to respond to it and linker d

00:05:39,120 --> 00:05:42,479
you know i'm proud to say being a part

00:05:40,560 --> 00:05:42,800
of that in the beginning you you kind of

00:05:42,479 --> 00:05:44,720
you know

00:05:42,800 --> 00:05:45,919
emphasize on security zero trust you

00:05:44,720 --> 00:05:49,120
know with the release

00:05:45,919 --> 00:05:51,520
uh how important is security once again

00:05:49,120 --> 00:05:54,720
i'm going better the pandemic is

00:05:51,520 --> 00:05:55,360
for companies which also helps because

00:05:54,720 --> 00:05:57,680
you know you

00:05:55,360 --> 00:05:58,960
guys also kind of specialize in that

00:05:57,680 --> 00:06:00,560
area as well

00:05:58,960 --> 00:06:02,160
yeah security is not really important

00:06:00,560 --> 00:06:03,840
it's something you can always do later

00:06:02,160 --> 00:06:05,199
you know no one really cares too much

00:06:03,840 --> 00:06:07,280
about it no

00:06:05,199 --> 00:06:09,280
i'm kidding uh of course security

00:06:07,280 --> 00:06:09,759
security is vital like it's even more

00:06:09,280 --> 00:06:10,800
vital

00:06:09,759 --> 00:06:12,319
you know now that we're putting our

00:06:10,800 --> 00:06:13,600
workloads in the cloud and in someone

00:06:12,319 --> 00:06:14,400
else's hardware and someone else's

00:06:13,600 --> 00:06:16,319
network

00:06:14,400 --> 00:06:17,600
uh you know and the expectations that we

00:06:16,319 --> 00:06:19,680
place on our software

00:06:17,600 --> 00:06:20,960
are only increasing right we expect to

00:06:19,680 --> 00:06:23,199
ship features

00:06:20,960 --> 00:06:25,600
very very rapidly and to update the code

00:06:23,199 --> 00:06:27,120
base on a very rapid basis so

00:06:25,600 --> 00:06:29,520
everything that we're doing in linker d

00:06:27,120 --> 00:06:31,680
is very very focused on

00:06:29,520 --> 00:06:32,560
security you know both from kind of the

00:06:31,680 --> 00:06:33,840
data plane

00:06:32,560 --> 00:06:35,759
implementation details right we're

00:06:33,840 --> 00:06:36,479
writing it in rust because that avoids

00:06:35,759 --> 00:06:38,960
us

00:06:36,479 --> 00:06:40,160
avoids a whole class of cves and

00:06:38,960 --> 00:06:42,000
vulnerabilities that are

00:06:40,160 --> 00:06:43,759
you know kind of endemic to c or c plus

00:06:42,000 --> 00:06:45,919
plus code all the way up to

00:06:43,759 --> 00:06:47,840
kind of the simplicity of the design

00:06:45,919 --> 00:06:49,280
right linker d is known for being

00:06:47,840 --> 00:06:51,599
extremely simple and a big

00:06:49,280 --> 00:06:52,639
part of that is because the more complex

00:06:51,599 --> 00:06:54,880
you make something

00:06:52,639 --> 00:06:56,639
the more room you leave for human error

00:06:54,880 --> 00:06:58,080
and that's when security issues happen

00:06:56,639 --> 00:07:00,639
right it's not that someone

00:06:58,080 --> 00:07:02,000
cracks the you know encryption algorithm

00:07:00,639 --> 00:07:03,520
right that's that's not a very

00:07:02,000 --> 00:07:05,360
common occurrence but someone

00:07:03,520 --> 00:07:06,319
misconfiguring something or something

00:07:05,360 --> 00:07:08,560
just being

00:07:06,319 --> 00:07:09,840
so complex that like i don't even want

00:07:08,560 --> 00:07:11,919
to set it up right now

00:07:09,840 --> 00:07:12,960
that's where things go south and also

00:07:11,919 --> 00:07:16,000
there's so

00:07:12,960 --> 00:07:18,639
many i mean if you look at kubernetes

00:07:16,000 --> 00:07:20,160
and the kind of architecture we're

00:07:18,639 --> 00:07:22,720
looking at things are complicated

00:07:20,160 --> 00:07:23,280
and the fact is that we can very easily

00:07:22,720 --> 00:07:25,520
beat

00:07:23,280 --> 00:07:27,199
company like index but the fact it could

00:07:25,520 --> 00:07:30,160
fix but the fact is that

00:07:27,199 --> 00:07:31,120
everybody cares about security but the

00:07:30,160 --> 00:07:34,160
thing is sometimes

00:07:31,120 --> 00:07:34,639
it becomes so complicated that you know

00:07:34,160 --> 00:07:37,199
in

00:07:34,639 --> 00:07:38,880
respect how much they want so how do you

00:07:37,199 --> 00:07:41,199
make it easier for them

00:07:38,880 --> 00:07:42,560
so that when they look at security oh my

00:07:41,199 --> 00:07:44,560
god i don't want to touch that

00:07:42,560 --> 00:07:46,879
word says it doesn't really matter you

00:07:44,560 --> 00:07:48,639
know you're making it so easier for them

00:07:46,879 --> 00:07:50,240
so that they make it part of their

00:07:48,639 --> 00:07:52,080
pipeline yeah yeah so

00:07:50,240 --> 00:07:53,840
i think there's there's two big tools

00:07:52,080 --> 00:07:56,479
you know one is just

00:07:53,840 --> 00:07:58,319
having things on by default right so

00:07:56,479 --> 00:08:00,479
like that's that's a big advantage of

00:07:58,319 --> 00:08:02,240
linker d's mtls implementation we turn

00:08:00,479 --> 00:08:03,599
it on by default we make it zero config

00:08:02,240 --> 00:08:05,520
so the moment you install it

00:08:03,599 --> 00:08:07,520
you have improved things right like

00:08:05,520 --> 00:08:08,879
that's that's a huge part as opposed to

00:08:07,520 --> 00:08:09,520
setting up a bunch of yaml and then

00:08:08,879 --> 00:08:11,120
having to get

00:08:09,520 --> 00:08:12,879
the tls certs and like certain

00:08:11,120 --> 00:08:15,280
management is such a huge nightmare

00:08:12,879 --> 00:08:16,080
we try and make it as easy as when your

00:08:15,280 --> 00:08:19,599
web browser

00:08:16,080 --> 00:08:20,800
you know you connect to uh you know

00:08:19,599 --> 00:08:22,240
reddit and you're looking at cat

00:08:20,800 --> 00:08:23,440
pictures right you get that green lock

00:08:22,240 --> 00:08:24,639
icon right it should and

00:08:23,440 --> 00:08:26,560
you don't have to do any work to do that

00:08:24,639 --> 00:08:28,080
it should be just as easy as that so

00:08:26,560 --> 00:08:29,280
that's one aspect the other aspect i

00:08:28,080 --> 00:08:31,840
think is in the

00:08:29,280 --> 00:08:32,479
inspectability or the introspectibility

00:08:31,840 --> 00:08:34,479
aspect

00:08:32,479 --> 00:08:36,399
which is you as the operator need to

00:08:34,479 --> 00:08:38,080
understand what the mesh is doing

00:08:36,399 --> 00:08:39,120
you need to know you know which parts

00:08:38,080 --> 00:08:40,959
are healthy if there's something

00:08:39,120 --> 00:08:41,599
unhealthy then you need to know about it

00:08:40,959 --> 00:08:43,839
and so we

00:08:41,599 --> 00:08:45,120
give you as much as possible in lingerie

00:08:43,839 --> 00:08:47,920
we give you the tools

00:08:45,120 --> 00:08:49,200
so you at all times have a model of

00:08:47,920 --> 00:08:50,880
what's happening right this is

00:08:49,200 --> 00:08:53,040
this is what simplicity means it's not

00:08:50,880 --> 00:08:54,480
that something is really easy and you

00:08:53,040 --> 00:08:56,240
don't have to think about it it's that

00:08:54,480 --> 00:08:57,839
you can understand it and then it's

00:08:56,240 --> 00:08:59,040
every component is clear and that the

00:08:57,839 --> 00:09:00,800
sequence of vents

00:08:59,040 --> 00:09:02,399
is clear so there is visibility as well

00:09:00,800 --> 00:09:03,600
as transparency where you can clearly

00:09:02,399 --> 00:09:05,440
see what's going on there

00:09:03,600 --> 00:09:06,720
right and you have a mental model where

00:09:05,440 --> 00:09:08,160
you understand what's happening

00:09:06,720 --> 00:09:09,760
and then when something you know

00:09:08,160 --> 00:09:11,519
violates that model then you know

00:09:09,760 --> 00:09:13,040
okay that's weird right that's that's

00:09:11,519 --> 00:09:14,800
you know this is like it's basically

00:09:13,040 --> 00:09:16,320
don't have magic in there make it clear

00:09:14,800 --> 00:09:17,920
what's happening right and it's also

00:09:16,320 --> 00:09:18,240
held with repeatability because once you

00:09:17,920 --> 00:09:19,600
are

00:09:18,240 --> 00:09:21,680
when things are visible to you you do

00:09:19,600 --> 00:09:23,600
know what happened how it happened

00:09:21,680 --> 00:09:25,279
it's easy to repeat that as well yeah

00:09:23,600 --> 00:09:27,200
and unfortunately that's just not

00:09:25,279 --> 00:09:28,480
it doesn't seem to be very common in the

00:09:27,200 --> 00:09:30,000
cloud native space i think

00:09:28,480 --> 00:09:31,760
everyone's so excited about building

00:09:30,000 --> 00:09:33,120
platforms everyone's so excited about

00:09:31,760 --> 00:09:34,880
you know adding all these features and

00:09:33,120 --> 00:09:37,360
being able to do everything that

00:09:34,880 --> 00:09:38,800
complexity just creeps in and you can't

00:09:37,360 --> 00:09:40,240
you know just like you can't add

00:09:38,800 --> 00:09:42,480
security later on

00:09:40,240 --> 00:09:44,160
you can't add simplicity right like that

00:09:42,480 --> 00:09:46,080
has to be done from the very beginning

00:09:44,160 --> 00:09:47,600
anything else uh in the context of this

00:09:46,080 --> 00:09:49,120
release uh you know the only other thing

00:09:47,600 --> 00:09:50,000
i'll point out is support for service

00:09:49,120 --> 00:09:52,399
topologies

00:09:50,000 --> 00:09:54,160
uh which is a cool kubernetes feature

00:09:52,399 --> 00:09:57,360
that allows you to specify

00:09:54,160 --> 00:09:59,920
kind of the um you know that uh

00:09:57,360 --> 00:10:00,800
allows you to kind of hint or inform

00:09:59,920 --> 00:10:02,320
linkerd that

00:10:00,800 --> 00:10:03,920
hey these requests you should try and

00:10:02,320 --> 00:10:05,279
keep them on the same node or these

00:10:03,920 --> 00:10:06,000
requests you try and keep on the same

00:10:05,279 --> 00:10:07,600
zone

00:10:06,000 --> 00:10:09,440
so you have ways of both kind of

00:10:07,600 --> 00:10:10,880
reducing latency and and reducing

00:10:09,440 --> 00:10:12,320
potentially costs

00:10:10,880 --> 00:10:14,720
as well so that was a cool feature that

00:10:12,320 --> 00:10:16,560
we got in uh you know in the 2.9 william

00:10:14,720 --> 00:10:18,320
thank you once again for taking time out

00:10:16,560 --> 00:10:20,079
and talk about liquidity or not and i

00:10:18,320 --> 00:10:22,399
look forward to talk to you again so

00:10:20,079 --> 00:10:24,000
about but but but before we wrap this up

00:10:22,399 --> 00:10:26,160
will there be more releases or we are

00:10:24,000 --> 00:10:27,600
looking for the major 3.0 release i know

00:10:26,160 --> 00:10:28,959
you may or may not be able to talk more

00:10:27,600 --> 00:10:29,279
about it but it's open source project

00:10:28,959 --> 00:10:31,279
right

00:10:29,279 --> 00:10:32,720
everything is public right everything is

00:10:31,279 --> 00:10:34,320
up in the github you know

00:10:32,720 --> 00:10:36,160
and so you're welcome to to browse

00:10:34,320 --> 00:10:37,600
around but uh you know kind of our

00:10:36,160 --> 00:10:38,480
expectations right now is yes there's

00:10:37,600 --> 00:10:41,040
gonna be a couple

00:10:38,480 --> 00:10:43,200
you know uh a couple more releases we're

00:10:41,040 --> 00:10:45,680
always gonna keep releasing

00:10:43,200 --> 00:10:47,600
so 2.10 uh you know which we're looking

00:10:45,680 --> 00:10:50,800
at it's probably going to be around

00:10:47,600 --> 00:10:52,560
uh kind of reducing the uh

00:10:50,800 --> 00:10:54,320
size of the control plane even further

00:10:52,560 --> 00:10:57,440
making it more modular and

00:10:54,320 --> 00:10:58,880
and and simpler and then 2.11 we're

00:10:57,440 --> 00:11:00,000
probably looking at things like policy

00:10:58,880 --> 00:11:03,040
so enforcing

00:11:00,000 --> 00:11:04,959
you know is a allowed to talk to b so

00:11:03,040 --> 00:11:06,800
and 2.12 and so on there's a long

00:11:04,959 --> 00:11:09,200
roadmap of mesh expansion

00:11:06,800 --> 00:11:10,320
and and all sorts of fun stuff so a lot

00:11:09,200 --> 00:11:12,160
of linguine in the future

00:11:10,320 --> 00:11:13,120
awesome thank you morgan and i as i said

00:11:12,160 --> 00:11:19,200
i look forward to talk to you again

00:11:13,120 --> 00:11:19,200

YouTube URL: https://www.youtube.com/watch?v=PrFb6-lgsAM


