Title: Whatâ€™s New in Harbor 2.0
Publication date: 2020-06-29
Playlist: Open Source Project Spotlight
Description: 
	Harbor is an open source cloud native registry project that stores, signs, and scans content. Harbor was created by a team of engineers at VMware China. The project was contributed to CNCF for wider adoption and contribution. Recently the project announced its 2.0 release. Swapnil Bhartiya, founder of TFiRio, sat down with Michael Michael, Harbor maintainer and VMware's Director of Product Management, to talk about Harbor, community and the latest release.
Captions: 
	00:00:01,640 --> 00:00:05,990
today we have with us Michael Michael

00:00:03,920 --> 00:00:08,300
harbour maintainer and director of

00:00:05,990 --> 00:00:09,440
product management at VMware Michael

00:00:08,300 --> 00:00:11,570
first of all welcome to the show

00:00:09,440 --> 00:00:13,280
thank you thank you for having me let's

00:00:11,570 --> 00:00:14,960
assume that you and I are stuck in an

00:00:13,280 --> 00:00:17,120
elevator and I suddenly asked you what

00:00:14,960 --> 00:00:18,590
is harbor so please explain what is it

00:00:17,120 --> 00:00:20,210
hopefully you're not stuck for the in

00:00:18,590 --> 00:00:23,689
the elevator for long but harbor

00:00:20,210 --> 00:00:26,210
essentially is an open source cloud

00:00:23,689 --> 00:00:28,820
native registry think of this as a

00:00:26,210 --> 00:00:30,650
depository where you can store and serve

00:00:28,820 --> 00:00:33,530
all of your cloud native assets your

00:00:30,650 --> 00:00:34,670
container images your home charts and

00:00:33,530 --> 00:00:37,010
everything else you need to basically

00:00:34,670 --> 00:00:39,830
build cloud native applications and then

00:00:37,010 --> 00:00:41,840
we put in posts on top of that some very

00:00:39,830 --> 00:00:44,570
good policy engines that allow you to

00:00:41,840 --> 00:00:45,830
enforce compliance make sure your images

00:00:44,570 --> 00:00:48,230
that you're serving are free from

00:00:45,830 --> 00:00:50,480
vulnerabilities and making sure that you

00:00:48,230 --> 00:00:53,330
have all the guardrails in place or an

00:00:50,480 --> 00:00:55,790
operator can manage this registry and

00:00:53,330 --> 00:00:58,070
deliver it to his developers in a

00:00:55,790 --> 00:01:00,560
self-service way Harbor came out of

00:00:58,070 --> 00:01:03,980
their China so I'm also curious that

00:01:00,560 --> 00:01:06,230
what was the problem that the team saw

00:01:03,980 --> 00:01:07,550
that point because there were a lot of

00:01:06,230 --> 00:01:09,950
projects that were doing something

00:01:07,550 --> 00:01:12,230
similar that you know you saw unique

00:01:09,950 --> 00:01:15,260
that harbor was created yeah so

00:01:12,230 --> 00:01:18,290
essentially they need there was there

00:01:15,260 --> 00:01:21,020
wasn't really a good way to for an

00:01:18,290 --> 00:01:22,550
enterprise to have a hosted registry

00:01:21,020 --> 00:01:25,220
that has all of the enterprise

00:01:22,550 --> 00:01:27,080
capabilities they were looking for while

00:01:25,220 --> 00:01:29,120
at the same time being able to have full

00:01:27,080 --> 00:01:30,560
control over the registry like a lot of

00:01:29,120 --> 00:01:32,630
the cloud providers have their own

00:01:30,560 --> 00:01:34,850
registry implementation there's docker

00:01:32,630 --> 00:01:37,040
hub out there or you can go and purchase

00:01:34,850 --> 00:01:39,170
something at a very expensive price

00:01:37,040 --> 00:01:41,740
point but if you're looking for an open

00:01:39,170 --> 00:01:43,790
source solution that gives you an - and

00:01:41,740 --> 00:01:45,979
register capabilities like your

00:01:43,790 --> 00:01:50,180
developers can push images and pull

00:01:45,979 --> 00:01:52,340
images and then your your operators can

00:01:50,180 --> 00:01:54,229
go and put a policy that says hey I want

00:01:52,340 --> 00:01:56,210
to allow this development team to create

00:01:54,229 --> 00:01:57,290
a project but not using more than a

00:01:56,210 --> 00:01:59,360
terabyte of storage

00:01:57,290 --> 00:02:02,090
none of those solutions had that so

00:01:59,360 --> 00:02:04,729
there was a need a business need here to

00:02:02,090 --> 00:02:06,650
develop a registry and on top of that we

00:02:04,729 --> 00:02:09,039
realized that it wasn't just as they had

00:02:06,650 --> 00:02:10,880
the same need it was a lot of users and

00:02:09,039 --> 00:02:12,680
enterprises out there in the cloud

00:02:10,880 --> 00:02:14,000
native ecosystem the project has been

00:02:12,680 --> 00:02:15,800
out for a while

00:02:14,000 --> 00:02:17,450
and based on what you just told me I'm

00:02:15,800 --> 00:02:20,120
curious what kind of community the

00:02:17,450 --> 00:02:21,590
project has built around itself and how

00:02:20,120 --> 00:02:23,000
the project has evolved because you'll

00:02:21,590 --> 00:02:25,760
also talk about the newly released

00:02:23,000 --> 00:02:27,860
version 2.20 but before that I want to

00:02:25,760 --> 00:02:29,230
talk about the relational project and

00:02:27,860 --> 00:02:32,750
the community around it project has

00:02:29,230 --> 00:02:35,330
evolved fairly well over the years who

00:02:32,750 --> 00:02:38,630
have increased our contributors and the

00:02:35,330 --> 00:02:40,130
contribution statistics that since EF is

00:02:38,630 --> 00:02:42,800
creating are showing that you know we're

00:02:40,130 --> 00:02:44,990
growing our community we now have

00:02:42,800 --> 00:02:46,910
maintainer Xin the project from multiple

00:02:44,990 --> 00:02:48,830
organizations and there are actually

00:02:46,910 --> 00:02:51,050
three organizations that have more than

00:02:48,830 --> 00:02:52,670
one maintainer on the project so it's

00:02:51,050 --> 00:02:55,220
kind of showing you that the ecosystem

00:02:52,670 --> 00:02:57,170
has picked up we are adding more and

00:02:55,220 --> 00:02:59,690
more functionality into harbor and we're

00:02:57,170 --> 00:03:01,340
also making harbor pluggable so there

00:02:59,690 --> 00:03:03,200
are areas of harbor we were saying

00:03:01,340 --> 00:03:05,360
here's the default experience with

00:03:03,200 --> 00:03:06,950
harbor but if you want extended

00:03:05,360 --> 00:03:09,410
experience based off then on the needs

00:03:06,950 --> 00:03:11,360
of your of your users go ahead and do

00:03:09,410 --> 00:03:13,190
that and here's an easy way to implement

00:03:11,360 --> 00:03:15,590
an interface and do that that has really

00:03:13,190 --> 00:03:18,709
increased the popularity of harbor that

00:03:15,590 --> 00:03:21,020
means two things we can give you a

00:03:18,709 --> 00:03:23,030
batteries included version of harbor

00:03:21,020 --> 00:03:24,770
from the community and then give you the

00:03:23,030 --> 00:03:26,450
option to extend that to fit the needs

00:03:24,770 --> 00:03:27,950
of your organization and more

00:03:26,450 --> 00:03:31,430
importantly if you have made investments

00:03:27,950 --> 00:03:33,709
in other tooling you can plug and play

00:03:31,430 --> 00:03:36,739
harbor in that when I say other tooling

00:03:33,709 --> 00:03:39,440
I mean things like CI CD systems you

00:03:36,739 --> 00:03:42,920
know those systems are primarily driving

00:03:39,440 --> 00:03:45,019
the development lifecycle so for example

00:03:42,920 --> 00:03:46,880
you go from source code to contain your

00:03:45,019 --> 00:03:49,220
image to something that's stored in a

00:03:46,880 --> 00:03:51,709
registry like harbor the engine that

00:03:49,220 --> 00:03:54,019
drives the pipeline that workflow in a

00:03:51,709 --> 00:03:56,090
lot of ways is a CIC the engine so how

00:03:54,019 --> 00:03:58,250
do you integrate Harbor well with such

00:03:56,090 --> 00:04:02,180
systems you've made that the reality now

00:03:58,250 --> 00:04:05,480
and has made herbal easier to put in an

00:04:02,180 --> 00:04:07,250
organization and get it adopted with

00:04:05,480 --> 00:04:09,400
existing standards and existing

00:04:07,250 --> 00:04:12,620
investments now let's talk about the

00:04:09,400 --> 00:04:14,480
recently announced 2.0 talk about some

00:04:12,620 --> 00:04:16,280
of the core features functionalities

00:04:14,480 --> 00:04:18,140
that you are excited about in this

00:04:16,280 --> 00:04:19,880
release yeah absolutely there's like

00:04:18,140 --> 00:04:23,030
three or four features are really really

00:04:19,880 --> 00:04:24,830
excited me a long time coming is the

00:04:23,030 --> 00:04:26,700
support for OCI

00:04:24,830 --> 00:04:29,280
the OCI is the open content

00:04:26,700 --> 00:04:32,070
initiative and essentially is creating a

00:04:29,280 --> 00:04:35,190
standardized way to describe what an

00:04:32,070 --> 00:04:38,130
image looks like and we in harbor to the

00:04:35,190 --> 00:04:40,830
DOE we are able to announce that we have

00:04:38,130 --> 00:04:43,350
full osei support in harbor what does

00:04:40,830 --> 00:04:45,180
that mean for users in previous releases

00:04:43,350 --> 00:04:46,890
of harbor you could only put into

00:04:45,180 --> 00:04:50,460
hardboard two types of artifacts a

00:04:46,890 --> 00:04:52,650
container image and a home chart great

00:04:50,460 --> 00:04:55,110
satisfies a huge number of the use cases

00:04:52,650 --> 00:04:58,140
for customers but it's not enough in

00:04:55,110 --> 00:05:01,170
this new cloud native ecosystem there's

00:04:58,140 --> 00:05:03,060
additional things that as a developer as

00:05:01,170 --> 00:05:05,100
an operator as a kubernetes

00:05:03,060 --> 00:05:07,770
administrator you might want to push

00:05:05,100 --> 00:05:10,290
into a repository like harbor and have

00:05:07,770 --> 00:05:12,240
them also adopt a lot of the policy

00:05:10,290 --> 00:05:14,640
engine the harbor provides give a few

00:05:12,240 --> 00:05:18,000
example sinem bundles the cloud native

00:05:14,640 --> 00:05:21,230
application bundle you could have OPN

00:05:18,000 --> 00:05:22,440
files you could have singularity and

00:05:21,230 --> 00:05:25,410
other

00:05:22,440 --> 00:05:27,270
OCI compliant files so now hardboard

00:05:25,410 --> 00:05:29,880
tells you that hey you have any file

00:05:27,270 --> 00:05:32,010
type out there if it's OCI compliant you

00:05:29,880 --> 00:05:34,440
can push it to harbor you can pull it

00:05:32,010 --> 00:05:37,700
from harbor and then you can add things

00:05:34,440 --> 00:05:40,920
like quarters and retention policies and

00:05:37,700 --> 00:05:43,590
immutability policies and replication

00:05:40,920 --> 00:05:46,980
policies on top of that think about that

00:05:43,590 --> 00:05:49,230
now just by adding a few more types of

00:05:46,980 --> 00:05:51,450
supported artifacts into harbor those

00:05:49,230 --> 00:05:53,460
types immediately get to use the full

00:05:51,450 --> 00:05:55,980
benefits of harbor in terms of our

00:05:53,460 --> 00:05:57,990
entire policy engine and the compliance

00:05:55,980 --> 00:05:59,730
that we offer to administrators of

00:05:57,990 --> 00:06:01,440
hardboard i think this is one of the

00:05:59,730 --> 00:06:02,970
like first earliest projects which are

00:06:01,440 --> 00:06:05,820
like you know from the history point of

00:06:02,970 --> 00:06:08,430
view which elect was OCA compliant what

00:06:05,820 --> 00:06:10,680
does it mean for users because by being

00:06:08,430 --> 00:06:13,530
compliant you have to be more strict

00:06:10,680 --> 00:06:15,540
about what you can I cannot do so can

00:06:13,530 --> 00:06:17,220
you talk about that and also how does

00:06:15,540 --> 00:06:18,450
that also affect the existing users

00:06:17,220 --> 00:06:20,220
should they have to worry about

00:06:18,450 --> 00:06:21,960
something or it doesn't really matter

00:06:20,220 --> 00:06:23,750
existing users shouldn't have to worry

00:06:21,960 --> 00:06:25,890
about theirs for backwards compatibility

00:06:23,750 --> 00:06:26,970
compatibility they can still push their

00:06:25,890 --> 00:06:29,730
container images

00:06:26,970 --> 00:06:32,280
Gujarat CI compliant and if you're using

00:06:29,730 --> 00:06:34,500
a hum chart before you can still push it

00:06:32,280 --> 00:06:36,540
into charts museum that is a key

00:06:34,500 --> 00:06:40,050
component of harbor but you can now also

00:06:36,540 --> 00:06:42,960
put a helmet art as a no CIF eye

00:06:40,050 --> 00:06:44,910
so for existing users not much

00:06:42,960 --> 00:06:47,370
difference backwards-compatibility we

00:06:44,910 --> 00:06:48,900
still support them the the users are

00:06:47,370 --> 00:06:51,569
brothers here we're not gonna forget

00:06:48,900 --> 00:06:53,370
them but what it means now is actually

00:06:51,569 --> 00:06:56,129
it's not more strict this is a lot more

00:06:53,370 --> 00:06:57,659
open if you're developing artifacts that

00:06:56,129 --> 00:07:00,300
are all CI compliant and they're

00:06:57,659 --> 00:07:02,879
following the standard way of describing

00:07:00,300 --> 00:07:04,620
an image and a standard way of actually

00:07:02,879 --> 00:07:07,319
executing an image at runtime

00:07:04,620 --> 00:07:09,060
now kubernetes is also CI compliant at

00:07:07,319 --> 00:07:11,340
the runtime then you're getting the

00:07:09,060 --> 00:07:13,590
benefit of both world you get harbor as

00:07:11,340 --> 00:07:16,289
the repository you can store your images

00:07:13,590 --> 00:07:18,030
and you also get a runtime engine that

00:07:16,289 --> 00:07:20,550
OCR compliant that could potentially

00:07:18,030 --> 00:07:23,250
execute them really great benefit here

00:07:20,550 --> 00:07:25,710
for the users a couple of other features

00:07:23,250 --> 00:07:27,180
the harbour to do brings our super super

00:07:25,710 --> 00:07:30,599
exciting the first one is the

00:07:27,180 --> 00:07:33,659
introduction of 3v by aqua security as

00:07:30,599 --> 00:07:36,690
the batteries included built-in scanner

00:07:33,659 --> 00:07:39,900
in harbour previously we use Claire as

00:07:36,690 --> 00:07:41,550
our built-in scanner and with the

00:07:39,900 --> 00:07:45,659
release of her book called one to ten

00:07:41,550 --> 00:07:47,639
that came out in December of 2019 we

00:07:45,659 --> 00:07:50,190
introduced what we call a pluggable

00:07:47,639 --> 00:07:53,099
framework some of this is a way that

00:07:50,190 --> 00:07:55,650
security vendors like aqua and encore

00:07:53,099 --> 00:07:57,389
and ducek can come in and create their

00:07:55,650 --> 00:08:00,479
own implementation of a security scanner

00:07:57,389 --> 00:08:03,630
to do static analysis on top of images

00:08:00,479 --> 00:08:05,490
that are deployed in harbor so we still

00:08:03,630 --> 00:08:08,069
included Claire as the building scanner

00:08:05,490 --> 00:08:11,279
and then we added additional extension

00:08:08,069 --> 00:08:14,219
points now we actually liked 3d that

00:08:11,279 --> 00:08:18,240
much our community and our users love

00:08:14,219 --> 00:08:20,130
tree be its ability to and force and to

00:08:18,240 --> 00:08:22,110
static analysis on top of multiple

00:08:20,130 --> 00:08:25,529
operating systems on top of multiple

00:08:22,110 --> 00:08:27,240
application managers it's very well

00:08:25,529 --> 00:08:29,310
aligned with the vision that you have

00:08:27,240 --> 00:08:32,099
from a security standpoint in harbor and

00:08:29,310 --> 00:08:34,560
now we added three V as the built-in

00:08:32,099 --> 00:08:37,140
scanner in Harbor we ship with it now

00:08:34,560 --> 00:08:39,930
great great achievement and cutis to the

00:08:37,140 --> 00:08:41,370
Aqua team for delivering 3 vs an open

00:08:39,930 --> 00:08:43,140
source project yeah that's the other

00:08:41,370 --> 00:08:44,430
question I was going to ask but I once

00:08:43,140 --> 00:08:46,829
again I'll ask the same thing I mean

00:08:44,430 --> 00:08:48,899
that what does it mean for users who

00:08:46,829 --> 00:08:50,279
were using Claire if you're using clear

00:08:48,899 --> 00:08:52,199
before and you want to continue using

00:08:50,279 --> 00:08:52,590
Claire by all means we're going to

00:08:52,199 --> 00:08:54,450
continue

00:08:52,590 --> 00:08:56,850
opted-in Claire Claire is already

00:08:54,450 --> 00:09:00,060
included in harbor there's no changes in

00:08:56,850 --> 00:09:03,660
experience however if you're thinking

00:09:00,060 --> 00:09:05,100
that 3v is a better scanner for you and

00:09:03,660 --> 00:09:08,430
by the way you can use them side-by-side

00:09:05,100 --> 00:09:11,070
so you can compare the scanning results

00:09:08,430 --> 00:09:13,200
from each scanner and if 3v is a better

00:09:11,070 --> 00:09:13,950
option for you we enable you to make

00:09:13,200 --> 00:09:16,380
that choice

00:09:13,950 --> 00:09:20,520
now the way Harper works is that you

00:09:16,380 --> 00:09:22,470
have a concept of multi-tenancy and we

00:09:20,520 --> 00:09:24,900
isolate a lot of the settings and the

00:09:22,470 --> 00:09:27,750
policy and the organization of images

00:09:24,900 --> 00:09:29,940
they're on a per project basis so what

00:09:27,750 --> 00:09:34,500
does that mean you can actually go into

00:09:29,940 --> 00:09:36,420
harbor and you can define a project and

00:09:34,500 --> 00:09:38,520
you can say for this project I want

00:09:36,420 --> 00:09:40,920
Claire to be the building scanner and

00:09:38,520 --> 00:09:43,650
then Claire will scan all your projects

00:09:40,920 --> 00:09:45,570
in that or the files in that project and

00:09:43,650 --> 00:09:47,910
you can set up a second project and say

00:09:45,570 --> 00:09:49,890
well I know I want tree V to be the

00:09:47,910 --> 00:09:51,720
scanner for this project and then three

00:09:49,890 --> 00:09:53,640
will scan your images and if you have

00:09:51,720 --> 00:09:55,740
the same set of images you can compare

00:09:53,640 --> 00:09:58,110
them and see which scanner works best

00:09:55,740 --> 00:10:00,900
based on your needs as an organization

00:09:58,110 --> 00:10:03,570
and as a user is this phenomenal right

00:10:00,900 --> 00:10:05,430
to give users choice and give them all

00:10:03,570 --> 00:10:07,890
the data but ultimately they have to

00:10:05,430 --> 00:10:09,480
make the decision on what is the best

00:10:07,890 --> 00:10:12,000
color for them to use based on their

00:10:09,480 --> 00:10:13,380
scenarios the type of application images

00:10:12,000 --> 00:10:15,180
and containers that they use and the

00:10:13,380 --> 00:10:17,820
type of libraries are the using those

00:10:15,180 --> 00:10:21,450
containers excellent before we wrap this

00:10:17,820 --> 00:10:23,400
up if what kind of road map you have for

00:10:21,450 --> 00:10:25,440
harbor of course it's an open source

00:10:23,400 --> 00:10:27,930
project so there's no such thing as than

00:10:25,440 --> 00:10:29,430
the 3.0 release is coming out but when

00:10:27,930 --> 00:10:31,590
you look at 2020 what are the major

00:10:29,430 --> 00:10:32,820
challenges that you want to address what

00:10:31,590 --> 00:10:35,610
are the problems you want to solve and

00:10:32,820 --> 00:10:37,500
how what does the basic road map looks

00:10:35,610 --> 00:10:38,970
like yeah absolutely I think that you

00:10:37,500 --> 00:10:41,130
know one of the things that we've been

00:10:38,970 --> 00:10:43,620
trying to do as a maintainer team for

00:10:41,130 --> 00:10:45,780
harbor is to kind of create some themes

00:10:43,620 --> 00:10:48,000
around the releases kind of put a a

00:10:45,780 --> 00:10:49,650
blueprint down in terms of what is it

00:10:48,000 --> 00:10:51,630
they were trying to achieve and then

00:10:49,650 --> 00:10:53,940
identify the features and make sense in

00:10:51,630 --> 00:10:55,440
that theme and you know kind of we're

00:10:53,940 --> 00:10:57,870
not coming up with this from a vacuum

00:10:55,440 --> 00:11:00,480
like we're talking to users we're

00:10:57,870 --> 00:11:02,520
talking to other companies or we have

00:11:00,480 --> 00:11:05,250
Kubik on events in the past we'll have

00:11:02,520 --> 00:11:06,120
presentations and individuals came to us

00:11:05,250 --> 00:11:08,279
asking us

00:11:06,120 --> 00:11:10,890
sets of questions who have existing

00:11:08,279 --> 00:11:12,870
users that give us feedback when we

00:11:10,890 --> 00:11:15,000
gather all of that one of the things

00:11:12,870 --> 00:11:17,460
that we came up with as the next thing

00:11:15,000 --> 00:11:20,279
for our release is what we call image

00:11:17,460 --> 00:11:22,440
distribution so we have three key

00:11:20,279 --> 00:11:24,990
features that were trying to tackle into

00:11:22,440 --> 00:11:29,550
that area the first one is how can

00:11:24,990 --> 00:11:33,720
Harbor act as a proxy cache to enable

00:11:29,550 --> 00:11:35,850
organizations that are either deploying

00:11:33,720 --> 00:11:37,860
kubernetes environments at the edge and

00:11:35,850 --> 00:11:40,140
then when a local harbour instance to

00:11:37,860 --> 00:11:42,210
proxy or mirror images from the

00:11:40,140 --> 00:11:44,490
mothership like your main data center

00:11:42,210 --> 00:11:46,650
and we're networking is at the premium

00:11:44,490 --> 00:11:48,570
maybe some of the kubernetes nodes are

00:11:46,650 --> 00:11:51,000
not even connected to the network and

00:11:48,570 --> 00:11:52,740
they want to be able to pull images from

00:11:51,000 --> 00:11:54,510
hard work and then harbor pulls the

00:11:52,740 --> 00:11:57,360
images from the upstream data center

00:11:54,510 --> 00:11:59,010
very very important feature continuing

00:11:57,360 --> 00:12:01,520
down the path of the image distribution

00:11:59,010 --> 00:12:05,130
were integrating harbor with both

00:12:01,520 --> 00:12:07,800
dragonfly by Alibaba and project Kraken

00:12:05,130 --> 00:12:10,290
by uber to facilitate peer-to-peer

00:12:07,800 --> 00:12:12,480
distribution mechanisms for your

00:12:10,290 --> 00:12:15,510
container images so how can we

00:12:12,480 --> 00:12:18,720
efficiently distribute images at the

00:12:15,510 --> 00:12:22,529
edge in multiple data centers in branch

00:12:18,720 --> 00:12:24,660
offices with with that don't have a good

00:12:22,529 --> 00:12:27,600
network or thick network fight between

00:12:24,660 --> 00:12:29,130
them and how can Harbor make sure that

00:12:27,600 --> 00:12:31,560
the writing may just land at the right

00:12:29,130 --> 00:12:33,360
place peak with features were trying to

00:12:31,560 --> 00:12:34,920
work with the community and obviously

00:12:33,360 --> 00:12:36,450
we're not doing this alone we're working

00:12:34,920 --> 00:12:40,350
with both Kraken and the dragonfly

00:12:36,450 --> 00:12:42,029
communities to achieve that and last the

00:12:40,350 --> 00:12:45,320
next feature that we have is what we

00:12:42,029 --> 00:12:47,040
call garbage collection without downtime

00:12:45,320 --> 00:12:50,070
traditionally we do garbage collection

00:12:47,040 --> 00:12:53,640
and this is kind of the process where

00:12:50,070 --> 00:12:56,910
you get to reclaim some of the files and

00:12:53,640 --> 00:12:59,190
layers of basically container images

00:12:56,910 --> 00:13:00,990
that are no longer in use think of an

00:12:59,190 --> 00:13:03,750
organization that pushes and pulls

00:13:00,990 --> 00:13:05,880
thousands of images every day they retag

00:13:03,750 --> 00:13:07,500
them the clean new versions sometimes

00:13:05,880 --> 00:13:10,140
you end up with layers that are no

00:13:07,500 --> 00:13:12,750
longer used in order for those layers to

00:13:10,140 --> 00:13:16,200
be reclaimed at the storage and by the

00:13:12,750 --> 00:13:18,370
system the registry needs to be locked

00:13:16,200 --> 00:13:21,730
down as in nobody can be pulling

00:13:18,370 --> 00:13:23,500
pushing images to it in Harbor to the

00:13:21,730 --> 00:13:25,420
dough we actually made a significant

00:13:23,500 --> 00:13:28,150
advancement where we track all the

00:13:25,420 --> 00:13:30,400
layers and the metadata of images in our

00:13:28,150 --> 00:13:33,250
database rather than depending on

00:13:30,400 --> 00:13:35,680
another tool or product to do it so now

00:13:33,250 --> 00:13:38,140
this actually paves the road so that in

00:13:35,680 --> 00:13:40,150
the future we could actually do garbage

00:13:38,140 --> 00:13:42,640
collection with zero downtime were

00:13:40,150 --> 00:13:44,890
Harbor can identify all the layers that

00:13:42,640 --> 00:13:47,920
are no longer in use quarry clean them

00:13:44,890 --> 00:13:50,260
and then that will have zero adverse

00:13:47,920 --> 00:13:52,870
impact or downtime to the users are

00:13:50,260 --> 00:13:54,430
pushing and pulling content huge huge

00:13:52,870 --> 00:13:55,600
features and that's that's the things

00:13:54,430 --> 00:13:57,850
that we're working on in the future

00:13:55,600 --> 00:14:00,190
awesome thank you Michael for for

00:13:57,850 --> 00:14:02,740
explaining things in detail and talking

00:14:00,190 --> 00:14:03,670
about Arbor I look forward to talk to

00:14:02,740 --> 00:14:05,020
you again thank you

00:14:03,670 --> 00:14:07,200
absolutely thank you so much for the

00:14:05,020 --> 00:14:07,200

YouTube URL: https://www.youtube.com/watch?v=FHO0B38t3LI


