Title: Rook: Orchestrating Cloud Native Storage
Publication date: 2021-01-08
Playlist: Open Source Project Spotlight
Description: 
	Rook is an open-source storage orchestrator for on-prem and cloud-native environments. Rook turns storage software into self-managing, self-scaling, and self-healing storage services. The project recently graduated from CNCF. We sat down with Travis Nielsen, Senior Principal Software Engineer at Red Hat to learn about the origin of the project.
Captions: 
	00:00:02,000 --> 00:00:04,480
this is your host of nepali and today we

00:00:03,679 --> 00:00:06,720
have with us

00:00:04,480 --> 00:00:08,240
travis nielsen senior principal software

00:00:06,720 --> 00:00:10,160
engineer at red hat

00:00:08,240 --> 00:00:11,840
travis first of all welcome to the show

00:00:10,160 --> 00:00:14,320
thank you it's good to be with you today

00:00:11,840 --> 00:00:15,280
today we're going to talk about rook

00:00:14,320 --> 00:00:17,359
graduation

00:00:15,280 --> 00:00:18,720
but before we go in there can you tell

00:00:17,359 --> 00:00:21,279
us a bit about

00:00:18,720 --> 00:00:22,240
what is rook and what problem it's

00:00:21,279 --> 00:00:25,119
trying to solve

00:00:22,240 --> 00:00:25,680
certainly yeah rook is really in a

00:00:25,119 --> 00:00:28,080
nutshell

00:00:25,680 --> 00:00:29,679
it's storage for kubernetes you know

00:00:28,080 --> 00:00:32,239
when we started with

00:00:29,679 --> 00:00:34,000
cloud-native environments kubernetes uh

00:00:32,239 --> 00:00:35,120
a few years ago we looked at storage and

00:00:34,000 --> 00:00:37,200
we thought hey how do

00:00:35,120 --> 00:00:38,160
how do i get storage in kubernetes

00:00:37,200 --> 00:00:40,239
storage is

00:00:38,160 --> 00:00:41,760
something external to kubernetes you

00:00:40,239 --> 00:00:44,160
connect it to your cloud provider

00:00:41,760 --> 00:00:45,840
storage or you have some external

00:00:44,160 --> 00:00:48,000
appliance that you connect to

00:00:45,840 --> 00:00:49,920
but we said hey let with let's take

00:00:48,000 --> 00:00:51,840
brooke or let's make rook

00:00:49,920 --> 00:00:53,039
bring storage to kubernetes so it looks

00:00:51,840 --> 00:00:55,280
like any other

00:00:53,039 --> 00:00:56,160
kubernetes application you deploy

00:00:55,280 --> 00:00:58,480
storage

00:00:56,160 --> 00:00:59,440
in the same way uh no need for some

00:00:58,480 --> 00:01:01,760
external

00:00:59,440 --> 00:01:03,840
solution to storage can you talk about

00:01:01,760 --> 00:01:05,040
the the origin of route by original i

00:01:03,840 --> 00:01:08,080
mean that

00:01:05,040 --> 00:01:11,760
where the project originated then uh

00:01:08,080 --> 00:01:12,720
it came to cncf uh and then what kind of

00:01:11,760 --> 00:01:14,159
community

00:01:12,720 --> 00:01:15,920
built around it and then we'll talk

00:01:14,159 --> 00:01:17,680
about the graduation part so let's talk

00:01:15,920 --> 00:01:20,240
about the origin story of rook

00:01:17,680 --> 00:01:20,720
yeah originally uh actually rook was

00:01:20,240 --> 00:01:23,040
started

00:01:20,720 --> 00:01:23,840
before we even realized kubernetes was a

00:01:23,040 --> 00:01:25,439
big thing

00:01:23,840 --> 00:01:27,040
kubernetes was still young this was over

00:01:25,439 --> 00:01:29,840
four years ago now

00:01:27,040 --> 00:01:31,840
where we were looking at doing things in

00:01:29,840 --> 00:01:32,960
a cloud-native way we knew distributed

00:01:31,840 --> 00:01:34,479
architecture was

00:01:32,960 --> 00:01:36,240
a very important part of that storage

00:01:34,479 --> 00:01:39,520
was an important part of that

00:01:36,240 --> 00:01:41,040
so we thought well how can we do storage

00:01:39,520 --> 00:01:43,360
in a cloud-native way

00:01:41,040 --> 00:01:44,399
and we even started building our own

00:01:43,360 --> 00:01:48,320
solution

00:01:44,399 --> 00:01:49,759
based on fcd and

00:01:48,320 --> 00:01:51,920
but but that was complicated very

00:01:49,759 --> 00:01:55,040
quickly i mean building a

00:01:51,920 --> 00:01:58,159
distributed platform is very difficult

00:01:55,040 --> 00:01:59,759
and and so we we realized kubernetes has

00:01:58,159 --> 00:02:03,040
a solution for this already

00:01:59,759 --> 00:02:04,880
let's take a bet on it and uh almost

00:02:03,040 --> 00:02:06,840
four years ago now we said okay we're

00:02:04,880 --> 00:02:10,160
going to create an operator

00:02:06,840 --> 00:02:12,879
and manage the storage for you

00:02:10,160 --> 00:02:14,800
and it was started on ceph as well so

00:02:12,879 --> 00:02:17,280
seth is a big part of the story

00:02:14,800 --> 00:02:18,239
where zeph provides storage it's been

00:02:17,280 --> 00:02:20,840
around for

00:02:18,239 --> 00:02:22,319
years and years as a stable storage

00:02:20,840 --> 00:02:24,640
platform

00:02:22,319 --> 00:02:25,440
and since steph ceph provides that

00:02:24,640 --> 00:02:28,239
stable

00:02:25,440 --> 00:02:28,879
storage layer now we really just needed

00:02:28,239 --> 00:02:31,360
to bring

00:02:28,879 --> 00:02:33,200
the management layer to kubernetes so we

00:02:31,360 --> 00:02:35,440
can manage the storage for you

00:02:33,200 --> 00:02:36,800
no need to build a new data layer it's

00:02:35,440 --> 00:02:38,080
just let's bring

00:02:36,800 --> 00:02:39,840
something we already know works really

00:02:38,080 --> 00:02:41,519
well to the community

00:02:39,840 --> 00:02:43,120
and do it in an open source way

00:02:41,519 --> 00:02:44,080
communities initially it was more or

00:02:43,120 --> 00:02:46,080
less like a state

00:02:44,080 --> 00:02:48,720
less workload now we are talking a lot

00:02:46,080 --> 00:02:51,840
about state full workload so how has

00:02:48,720 --> 00:02:54,959
things changed there which kind of

00:02:51,840 --> 00:02:57,760
led to to to the need for something like

00:02:54,959 --> 00:02:58,080
rook yeah kubernetes typically you do

00:02:57,760 --> 00:02:59,599
have

00:02:58,080 --> 00:03:01,760
you think of stateless workloads as

00:02:59,599 --> 00:03:04,400
being something that kubernetes deploys

00:03:01,760 --> 00:03:06,000
but pretty quickly as soon as you deploy

00:03:04,400 --> 00:03:07,760
your stateless workload you realize oh

00:03:06,000 --> 00:03:08,959
well it needs to connect to some storage

00:03:07,760 --> 00:03:12,000
whether it's a database

00:03:08,959 --> 00:03:13,840
or something else and

00:03:12,000 --> 00:03:15,760
you really don't want that to be some

00:03:13,840 --> 00:03:17,040
external solution or to deploy it any

00:03:15,760 --> 00:03:21,360
differently

00:03:17,040 --> 00:03:24,159
so the really comes down to people need

00:03:21,360 --> 00:03:24,560
state they have stateful workloads and

00:03:24,159 --> 00:03:27,200
brook

00:03:24,560 --> 00:03:28,959
has basically filled that need for

00:03:27,200 --> 00:03:30,640
stateful workloads can an example of

00:03:28,959 --> 00:03:33,760
what are the use cases where it

00:03:30,640 --> 00:03:36,400
is being used and how

00:03:33,760 --> 00:03:38,239
further along it's in path you know from

00:03:36,400 --> 00:03:39,599
evaluation versus it's already

00:03:38,239 --> 00:03:40,959
being used in production the funny thing

00:03:39,599 --> 00:03:42,000
is that most of the technology that we

00:03:40,959 --> 00:03:44,239
talk about

00:03:42,000 --> 00:03:45,840
even they are yet to graduate they're

00:03:44,239 --> 00:03:46,959
already being used in production

00:03:45,840 --> 00:03:49,440
these are not a technology that are

00:03:46,959 --> 00:03:51,040
being developed here in the nursery they

00:03:49,440 --> 00:03:52,560
they were created somewhere else they

00:03:51,040 --> 00:03:54,720
solve a problem and then they

00:03:52,560 --> 00:03:56,000
put in cncf to build their community

00:03:54,720 --> 00:03:58,560
around it so talk about

00:03:56,000 --> 00:04:00,000
uh the production usage of rook right so

00:03:58,560 --> 00:04:01,840
the i mean from the start we really

00:04:00,000 --> 00:04:05,200
tried to build the rook community

00:04:01,840 --> 00:04:07,760
and that was a foundation for it

00:04:05,200 --> 00:04:08,879
open community open source open

00:04:07,760 --> 00:04:11,760
governance

00:04:08,879 --> 00:04:12,080
and and so with that philosophy i feel

00:04:11,760 --> 00:04:13,599
like

00:04:12,080 --> 00:04:15,280
you know community members started to

00:04:13,599 --> 00:04:17,120
pick up on it you know we were

00:04:15,280 --> 00:04:18,560
presenting at kubecon

00:04:17,120 --> 00:04:20,639
and people started to take note i

00:04:18,560 --> 00:04:22,960
thought oh this is really useful storage

00:04:20,639 --> 00:04:25,520
for kubernetes my staple workloads have

00:04:22,960 --> 00:04:29,280
some way of deploying now

00:04:25,520 --> 00:04:31,440
very useful and so people initially

00:04:29,280 --> 00:04:32,479
were primarily deploying it in their you

00:04:31,440 --> 00:04:33,919
know their on-prem

00:04:32,479 --> 00:04:36,560
solutions they have their own data

00:04:33,919 --> 00:04:38,720
center they need some storage solution

00:04:36,560 --> 00:04:39,840
and there just wasn't you know really an

00:04:38,720 --> 00:04:42,960
open solution

00:04:39,840 --> 00:04:44,160
open source solution before rook where

00:04:42,960 --> 00:04:47,120
that gave them that

00:04:44,160 --> 00:04:49,120
in their bare metal environments and now

00:04:47,120 --> 00:04:49,600
it's expanded more there are scenarios

00:04:49,120 --> 00:04:51,759
where

00:04:49,600 --> 00:04:53,120
rook is also useful in in cloud

00:04:51,759 --> 00:04:54,400
deployment so even if you're running in

00:04:53,120 --> 00:04:57,520
a cloud provider that has

00:04:54,400 --> 00:05:00,960
some storage behind it like in google

00:04:57,520 --> 00:05:02,240
cloud aws or azure or others

00:05:00,960 --> 00:05:04,639
even if you're in those environments

00:05:02,240 --> 00:05:08,320
rook provides a consistent

00:05:04,639 --> 00:05:11,199
storage platform and also improves some

00:05:08,320 --> 00:05:12,000
scenarios around performance for small

00:05:11,199 --> 00:05:15,680
volumes

00:05:12,000 --> 00:05:17,360
and the number of volumes you can mount

00:05:15,680 --> 00:05:18,880
and things like that so there are

00:05:17,360 --> 00:05:20,400
advantages

00:05:18,880 --> 00:05:21,440
you know a lot in bare metal

00:05:20,400 --> 00:05:22,320
environments where there's no other

00:05:21,440 --> 00:05:25,600
solution really

00:05:22,320 --> 00:05:26,880
and and even in cloud environments as uh

00:05:25,600 --> 00:05:28,400
you rightly mentioned that these

00:05:26,880 --> 00:05:29,120
technologies were used in production so

00:05:28,400 --> 00:05:32,240
what does

00:05:29,120 --> 00:05:33,199
graduation really mean one uh the

00:05:32,240 --> 00:05:37,199
project itself

00:05:33,199 --> 00:05:39,600
or the the the community itself

00:05:37,199 --> 00:05:41,039
and users does it really matter that

00:05:39,600 --> 00:05:42,080
project is graduated that's a good

00:05:41,039 --> 00:05:43,360
question the

00:05:42,080 --> 00:05:45,680
i don't think anything would have

00:05:43,360 --> 00:05:46,479
changed ultimately in how we've created

00:05:45,680 --> 00:05:49,120
the project

00:05:46,479 --> 00:05:49,680
the features we're adding and things but

00:05:49,120 --> 00:05:52,720
really what

00:05:49,680 --> 00:05:54,960
graduation means to the project is that

00:05:52,720 --> 00:05:56,479
the community recognizes it as something

00:05:54,960 --> 00:05:59,280
that's positive

00:05:56,479 --> 00:06:00,160
for the ecosystem the cncf has built

00:05:59,280 --> 00:06:03,360
this

00:06:00,160 --> 00:06:05,680
and helped nurture this ecosystem around

00:06:03,360 --> 00:06:06,720
kubernetes and distributed architecture

00:06:05,680 --> 00:06:10,000
cloud native

00:06:06,720 --> 00:06:12,160
solutions and and we're happy that

00:06:10,000 --> 00:06:14,160
they recognized rook as hey this is an

00:06:12,160 --> 00:06:17,440
important part of that

00:06:14,160 --> 00:06:20,240
solution to bring storage to kubernetes

00:06:17,440 --> 00:06:22,160
and so it has brought more visibility

00:06:20,240 --> 00:06:23,919
more

00:06:22,160 --> 00:06:25,680
and just more help in getting people on

00:06:23,919 --> 00:06:27,039
board this is it's an open source

00:06:25,680 --> 00:06:28,319
project so everything is already there

00:06:27,039 --> 00:06:30,800
for people to see

00:06:28,319 --> 00:06:32,639
but still if you ask you know what does

00:06:30,800 --> 00:06:35,840
the road map of

00:06:32,639 --> 00:06:38,080
rook look like or what are some of the

00:06:35,840 --> 00:06:40,720
challenges that you're still trying to

00:06:38,080 --> 00:06:42,000
solve or features that you're looking at

00:06:40,720 --> 00:06:43,680
adding to the project

00:06:42,000 --> 00:06:45,440
you know first and foremost we want to

00:06:43,680 --> 00:06:47,360
continue

00:06:45,440 --> 00:06:48,960
with our releases that are stable we

00:06:47,360 --> 00:06:51,440
have lots of people in production so

00:06:48,960 --> 00:06:54,240
keeping them running first is always

00:06:51,440 --> 00:06:54,880
is always the priority beyond that it's

00:06:54,240 --> 00:06:56,400
really

00:06:54,880 --> 00:06:58,319
you know software is always evolving

00:06:56,400 --> 00:07:00,800
kubernetes has new versions come out

00:06:58,319 --> 00:07:01,520
ceph has new versions come out and rook

00:07:00,800 --> 00:07:03,039
needs to

00:07:01,520 --> 00:07:05,520
adjust to those and so i'd say that's

00:07:03,039 --> 00:07:08,720
the first priority keep up to date with

00:07:05,520 --> 00:07:11,919
whatever the latest platform is

00:07:08,720 --> 00:07:14,720
is providing us but also

00:07:11,919 --> 00:07:17,039
really you know every with every update

00:07:14,720 --> 00:07:19,599
there are new features

00:07:17,039 --> 00:07:20,720
the next release we have coming up in

00:07:19,599 --> 00:07:24,080
mid-november

00:07:20,720 --> 00:07:24,720
we're planning on well a number of

00:07:24,080 --> 00:07:25,919
features

00:07:24,720 --> 00:07:29,280
i guess i don't need to go into all of

00:07:25,919 --> 00:07:30,960
them but ultimately adding new

00:07:29,280 --> 00:07:32,639
new features for the storage providers

00:07:30,960 --> 00:07:35,919
like seth seth as our main

00:07:32,639 --> 00:07:37,680
stable storage provider and also looking

00:07:35,919 --> 00:07:41,280
for contributions to

00:07:37,680 --> 00:07:44,639
get our other storage providers up

00:07:41,280 --> 00:07:45,680
up to a stable state like nfs cassandra

00:07:44,639 --> 00:07:47,759
and others

00:07:45,680 --> 00:07:49,599
that that are still in the alpha state

00:07:47,759 --> 00:07:51,520
just because we're looking for more

00:07:49,599 --> 00:07:53,680
involvement from the community there to

00:07:51,520 --> 00:07:55,440
get that interest up travis uh thank you

00:07:53,680 --> 00:07:57,199
so much for taking time out from your

00:07:55,440 --> 00:07:58,560
schedule today and talk about rook

00:07:57,199 --> 00:08:00,720
and i look forward to talk to you again

00:07:58,560 --> 00:08:05,440
thank you okay thank you it's been good

00:08:00,720 --> 00:08:05,440

YouTube URL: https://www.youtube.com/watch?v=BvYVbCkQTWw


