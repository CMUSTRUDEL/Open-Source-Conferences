Title: FINOS APAC Open Source in Fintech Meetup | MAR 21
Publication date: 2021-04-11
Playlist: 2021 Videos
Description: 
	At our most recent FINOS APAC Open Source in Fintech Meetup, Symphony's Yong Sheng Tan, Developer Relations Technical Lead talked on the recently contributed open source Symphony BDK for Java. José Pozo, VP of Core Development at Genesis presented on low code application platforms (LCAP) for Financial Markets.

This video is from a live virtual meetup conducted in Sydney, Australia on 24 March 2021.

TALK 1 - SYMPHONY BDK FOR JAVA
Symphony recently contributed its latest version of the Symphony Bot Developer Kit. BDK 2.0 is a library of tools and intelligent API bindings that provides an ultra simplified configuration and authentication setup, intuitive message and room management, customizable message templating, and a new activities API that makes it easy to facilitate bot workflows in Symphony.
GitHub Repo: https://github.com/finos/symphony-bdk-java

SYMPHONY SPEAKER BIO
Yong Sheng Tan, Developer Relations Technical Lead, Symphony
Yong Sheng Tan is a financial technology professional excited about delivering solutions that drive efficiency from increased automation, systems collaboration, or workflow re-engineering. Yong has a technical background in software development across web, mobile and desktop solutions as well as a deep appreciation of enterprise architecture and cloud infrastructure. Yong's adept at managing software delivery lifecycles using the Agile methodology and believes firmly in elevating business value as an outcome to improve business-technology synergy.


TALK 2 - OPEN SOURCE TECHNOLOGY TO BUILD AN CONSTANTLY EVOLVE A LOW CODE APPLICATION PLATFORM
Genesis will be presenting how they used a variety of Open Source technologies to build a Low Code Application Platform (LCAP) for Financial Markets and cover some key Open Source technologies used within the system. They will also talk about some of their future plans for using Open Source technologies including FINOS initiatives that help drive standards and re-use across our industry, such as Financial Objects and FDC3.
 
GENESIS SPEAKER BIO
José Pozo, VP of Core Development at Genesis
Jose graduated with a MSc in Computation Software Techniques in Engineering from the University of Cranfield, and a MSc in Computer Engineering from University of Lleida in Spain as well as 1st class honours degree in Computer Systems Engineering from the same university.

Jose is a first-class computer scientist, with over 5 years’ experience developing high performance, highly scalable solutions and is the chief architect at genesis. Prior to joining genesis, Jose worked for Misys in London focussed on GPU software development.

Jose currently leads the core development team and has overall responsibility for all Core development within genesis.

YOUR APAC HOST - ANDREW KING
Andrew King, Principal Consultant at Suite2Go
Andrew King has worked for multiple financial services technology companies in London and Australia over the past 16 years simplifying complex problems and creating best of breed solutions across both the sell and buy sides of the market. Business Development roles with IHS Markit, Symphony, Droit, Duco, Cosaic and ipushpull have provided Andrew with insight into internal and external workflow pain points and the technology solutions available to create greater operational efficiency. https://www.linkedin.com/in/andrewking1

YOUR FINOS HOST - JAMES MCLEOD
James is the Director of Community at FINOS and wholeheartedly believes the transformation of Financial Services can only be fulfilled if Open Source is embraced under the three pillars of Contribution, Consumption and Community.

James has a twenty year career in software engineering having worked for telecommunication startups, the gaming industry, digital streaming platforms and financial services. Prior to joining FINOS James worked at Lloyds Banking Group where he focused on building engineering communities for Lloyds Bank, Halifax, Bank of Scotland, Scottish Widows and other LBG banks. While at Lloyds Banking Group, James also drove the adoption of Inner Source and Open Source partly through the creation of engineering guilds providing in-person and remote educational sessions and large hackathon events. James also spent a number of years consulting on software engineering projects for RBS, NatWest and Barclays. 

As a member of the FINOS team, James' ambition is to bring his extensive experience building communities to grow Financial Services into a powerhouse of Open Source. James is a true open source advocate and founded the “React London - Bring Your Own Project” meetup to provide an interactive forum for ReactJS and Javascript developers to come together. In the last two years it has grown to a membership of over 1500 individuals.

►►Visit here for more FINOS Events https://finos.org/hosted-events

►►Visit the FINOS website https://finos.org/ and Get Involved https://finos.org/get-involved)
Captions: 
	00:00:03,650 --> 00:00:11,849
[Music]

00:00:13,920 --> 00:00:18,240
thank you james

00:00:15,120 --> 00:00:21,520
uh and welcome everyone to the

00:00:18,240 --> 00:00:24,160
second apac finos meetup

00:00:21,520 --> 00:00:24,560
um delighted to have you with us today

00:00:24,160 --> 00:00:27,279
and

00:00:24,560 --> 00:00:28,320
really appreciate you you joining us uh

00:00:27,279 --> 00:00:31,199
for this

00:00:28,320 --> 00:00:32,079
uh event and and community building uh

00:00:31,199 --> 00:00:35,200
activity

00:00:32,079 --> 00:00:38,079
for for finos um

00:00:35,200 --> 00:00:39,840
i'm gonna do uh some introductions i'm

00:00:38,079 --> 00:00:40,960
gonna run through the agenda for the

00:00:39,840 --> 00:00:44,000
call today

00:00:40,960 --> 00:00:47,840
and uh my role really is as as

00:00:44,000 --> 00:00:50,239
mc for the uh for the call um

00:00:47,840 --> 00:00:52,239
i'll introduce myself and then hand over

00:00:50,239 --> 00:00:55,360
to uh to to my colleagues

00:00:52,239 --> 00:00:57,280
uh who have uh kindly agreed to uh to

00:00:55,360 --> 00:01:01,120
speak with us today

00:00:57,280 --> 00:01:02,719
um so just a bit about me my name is

00:01:01,120 --> 00:01:05,760
andrew king

00:01:02,719 --> 00:01:09,520
um i am

00:01:05,760 --> 00:01:10,080
uh an individual supporter of finos so i

00:01:09,520 --> 00:01:12,240
have

00:01:10,080 --> 00:01:14,080
volunteered to to help build the

00:01:12,240 --> 00:01:17,439
community here in apac

00:01:14,080 --> 00:01:21,119
i'm based in australia but i've had

00:01:17,439 --> 00:01:24,080
various roles globally with financial

00:01:21,119 --> 00:01:27,520
technology firms throughout my career

00:01:24,080 --> 00:01:28,320
started off uh in my career in financial

00:01:27,520 --> 00:01:31,439
services

00:01:28,320 --> 00:01:34,479
in toronto i've also worked in in london

00:01:31,439 --> 00:01:35,280
and and now here in australia um my

00:01:34,479 --> 00:01:37,759
background

00:01:35,280 --> 00:01:39,360
the majority of my time was with a

00:01:37,759 --> 00:01:43,840
company called ihs

00:01:39,360 --> 00:01:47,119
market i've also worked

00:01:43,840 --> 00:01:48,079
for symphony who are participating on

00:01:47,119 --> 00:01:51,280
this call

00:01:48,079 --> 00:01:53,280
and and currently i am working to help

00:01:51,280 --> 00:01:54,960
a number of different financial

00:01:53,280 --> 00:01:56,799
technology firms with their business

00:01:54,960 --> 00:02:00,000
development strategy

00:01:56,799 --> 00:02:03,040
here in australia so firms like do co

00:02:00,000 --> 00:02:05,680
and dua cosaic

00:02:03,040 --> 00:02:07,520
where i sent the invitations from as

00:02:05,680 --> 00:02:11,200
well as i push pull

00:02:07,520 --> 00:02:14,319
so quite a varied exposure to the

00:02:11,200 --> 00:02:17,760
financial technology landscape

00:02:14,319 --> 00:02:20,800
and you know really

00:02:17,760 --> 00:02:23,440
excited to see how we can grow

00:02:20,800 --> 00:02:24,800
not only those businesses uh throughout

00:02:23,440 --> 00:02:28,080
the apac region

00:02:24,800 --> 00:02:31,120
um but also help uh the

00:02:28,080 --> 00:02:32,879
the conversation around open source and

00:02:31,120 --> 00:02:35,200
uh and finance is obviously a very

00:02:32,879 --> 00:02:38,000
important um

00:02:35,200 --> 00:02:39,840
vehicle for that conversation uh it's

00:02:38,000 --> 00:02:42,879
the purpose of the call today

00:02:39,840 --> 00:02:43,920
and obviously we're here today to uh to

00:02:42,879 --> 00:02:46,239
introduce you

00:02:43,920 --> 00:02:47,920
to the finos organization and the

00:02:46,239 --> 00:02:52,080
purpose of the organization

00:02:47,920 --> 00:02:55,280
um but also to two of the the major um

00:02:52,080 --> 00:02:58,239
uh proponents and and

00:02:55,280 --> 00:02:58,560
uh and and uh participants in the finos

00:02:58,239 --> 00:03:02,159
uh

00:02:58,560 --> 00:03:04,959
group uh which are symphony and genesis

00:03:02,159 --> 00:03:05,519
um so without much further ado i'm going

00:03:04,959 --> 00:03:07,599
to

00:03:05,519 --> 00:03:08,560
let you know the agenda for the the call

00:03:07,599 --> 00:03:11,599
today

00:03:08,560 --> 00:03:12,080
um and and who's going to be speaking uh

00:03:11,599 --> 00:03:15,760
through

00:03:12,080 --> 00:03:19,280
over the next uh 45 to 50 minutes or so

00:03:15,760 --> 00:03:22,400
um so first up we have james macleod

00:03:19,280 --> 00:03:25,680
uh james uh is the director of community

00:03:22,400 --> 00:03:27,760
at finos he's waving uh and he is based

00:03:25,680 --> 00:03:29,360
in london uh so he's gonna give an

00:03:27,760 --> 00:03:32,560
introduction to finos

00:03:29,360 --> 00:03:33,680
um it's its purpose and uh and some

00:03:32,560 --> 00:03:36,000
background

00:03:33,680 --> 00:03:37,040
um james isn't going to hand over to

00:03:36,000 --> 00:03:40,640
yong sheng

00:03:37,040 --> 00:03:43,440
tan who is a singapore-based uh

00:03:40,640 --> 00:03:45,360
former colleague of mine uh and who is

00:03:43,440 --> 00:03:49,440
the technical lead for symphony's

00:03:45,360 --> 00:03:53,280
developer relations in apec

00:03:49,440 --> 00:03:55,599
our third speaker is jose pozo

00:03:53,280 --> 00:03:56,879
jose is the vp of core development at

00:03:55,599 --> 00:04:00,000
genesis

00:03:56,879 --> 00:04:03,120
like james he's also based in the uk

00:04:00,000 --> 00:04:06,319
and he is going to give a talk

00:04:03,120 --> 00:04:08,319
about the genesis low code application

00:04:06,319 --> 00:04:11,680
platform

00:04:08,319 --> 00:04:15,120
um so a few little uh housekeeping items

00:04:11,680 --> 00:04:17,120
we will have time for some q a uh we'd

00:04:15,120 --> 00:04:17,919
ask you to hold your questions to the

00:04:17,120 --> 00:04:19,759
end

00:04:17,919 --> 00:04:22,160
uh or if you want to submit them through

00:04:19,759 --> 00:04:23,040
the q a box that's also great and we'll

00:04:22,160 --> 00:04:26,320
read those out

00:04:23,040 --> 00:04:29,600
at the end um the call and the session

00:04:26,320 --> 00:04:32,400
is being recorded uh we will make the

00:04:29,600 --> 00:04:33,120
recording available but definitely be

00:04:32,400 --> 00:04:36,000
aware that

00:04:33,120 --> 00:04:36,800
that is uh that is taking place um and

00:04:36,000 --> 00:04:40,000
without much

00:04:36,800 --> 00:04:43,600
more from me uh i'm gonna hand over

00:04:40,000 --> 00:04:47,040
to james uh from from finos

00:04:43,600 --> 00:04:47,680
so james welcome hi thank you very much

00:04:47,040 --> 00:04:49,600
andrew

00:04:47,680 --> 00:04:51,759
um and it's an absolute pleasure to be

00:04:49,600 --> 00:04:54,240
here this evening um with everybody

00:04:51,759 --> 00:04:55,120
within the apac region um i'm james

00:04:54,240 --> 00:04:58,240
macleod

00:04:55,120 --> 00:05:00,240
finnos director of community um

00:04:58,240 --> 00:05:02,240
and i'm your host for today so i'm the

00:05:00,240 --> 00:05:04,240
person who's um looking at all of the

00:05:02,240 --> 00:05:04,720
various different q and a questions etc

00:05:04,240 --> 00:05:07,360
on the

00:05:04,720 --> 00:05:08,560
the end of um uh the webinar and so if

00:05:07,360 --> 00:05:09,360
you've got any questions they're going

00:05:08,560 --> 00:05:11,360
to come in to me

00:05:09,360 --> 00:05:12,639
and then i'll relay them to andrew and

00:05:11,360 --> 00:05:16,240
the team

00:05:12,639 --> 00:05:19,199
and i'm here today to talk to you

00:05:16,240 --> 00:05:19,600
about finos uh what finos is and what we

00:05:19,199 --> 00:05:24,400
do

00:05:19,600 --> 00:05:27,520
and how you can get involved

00:05:24,400 --> 00:05:30,080
um for those who are new to finnos um

00:05:27,520 --> 00:05:30,639
finos is a independent non-profit

00:05:30,080 --> 00:05:33,120
membership

00:05:30,639 --> 00:05:33,759
organization whose purpose is to

00:05:33,120 --> 00:05:35,120
accelerate

00:05:33,759 --> 00:05:36,880
collaboration and innovation in

00:05:35,120 --> 00:05:39,600
financial services

00:05:36,880 --> 00:05:41,280
um and finos is actually um a project

00:05:39,600 --> 00:05:45,039
within the linux foundation

00:05:41,280 --> 00:05:47,600
um and so if um you are aware of um

00:05:45,039 --> 00:05:50,720
projects like kubernetes or if you

00:05:47,600 --> 00:05:53,440
uh use um node.js um

00:05:50,720 --> 00:05:54,160
you're probably aware of the linux

00:05:53,440 --> 00:05:56,639
foundation

00:05:54,160 --> 00:05:58,479
and all of our um sibling um projects

00:05:56,639 --> 00:06:00,720
within the linux foundation

00:05:58,479 --> 00:06:02,400
um and finos is the vertical within the

00:06:00,720 --> 00:06:04,400
linux foundation that looks after

00:06:02,400 --> 00:06:07,120
financial services

00:06:04,400 --> 00:06:08,000
and so we provide a mechanism for

00:06:07,120 --> 00:06:10,400
keeping

00:06:08,000 --> 00:06:11,440
um projects and collaborators and our

00:06:10,400 --> 00:06:14,400
members safe

00:06:11,440 --> 00:06:16,880
um within that regulated environment um

00:06:14,400 --> 00:06:20,400
and we are a non-profit which means that

00:06:16,880 --> 00:06:22,400
um we are here to serve our community

00:06:20,400 --> 00:06:24,000
um and we're also here to serve our

00:06:22,400 --> 00:06:25,919
members as well and so

00:06:24,000 --> 00:06:27,360
you know as part of the linux foundation

00:06:25,919 --> 00:06:30,080
we are here for

00:06:27,360 --> 00:06:34,080
um firms and also participants within

00:06:30,080 --> 00:06:37,039
the wider open source community

00:06:34,080 --> 00:06:37,600
members are actually vast um and diverse

00:06:37,039 --> 00:06:39,919
as well

00:06:37,600 --> 00:06:41,199
and as you can see on this side um we

00:06:39,919 --> 00:06:43,680
have a lot of banks

00:06:41,199 --> 00:06:44,720
um technology companies and engineering

00:06:43,680 --> 00:06:47,919
companies as well

00:06:44,720 --> 00:06:51,280
as part of um the um finnos

00:06:47,919 --> 00:06:52,319
community our membership ranges from big

00:06:51,280 --> 00:06:54,720
banks

00:06:52,319 --> 00:06:55,520
that you will have heard of so such as

00:06:54,720 --> 00:06:57,840
city

00:06:55,520 --> 00:06:59,199
deutsche bank goldman sachs all the way

00:06:57,840 --> 00:07:02,479
through to hsbc

00:06:59,199 --> 00:07:05,759
capital one um ubs and

00:07:02,479 --> 00:07:07,520
morgan stanley to name just a few um

00:07:05,759 --> 00:07:08,960
through to a lot of technology companies

00:07:07,520 --> 00:07:09,680
that you will have heard of as well and

00:07:08,960 --> 00:07:11,759
so

00:07:09,680 --> 00:07:13,120
um because we're an open source um

00:07:11,759 --> 00:07:15,120
foundation github

00:07:13,120 --> 00:07:16,479
um are members of the foundation if

00:07:15,120 --> 00:07:18,000
you're aware of github and

00:07:16,479 --> 00:07:20,720
you know the community that forms around

00:07:18,000 --> 00:07:24,240
open source but equally we also have

00:07:20,720 --> 00:07:27,680
um gitlab as well um plus

00:07:24,240 --> 00:07:28,000
we have um associate members like air

00:07:27,680 --> 00:07:31,280
and

00:07:28,000 --> 00:07:31,840
um interwork and lines is the um in the

00:07:31,280 --> 00:07:33,840
source

00:07:31,840 --> 00:07:35,120
commons have recently just joined as

00:07:33,840 --> 00:07:39,120
associate members

00:07:35,120 --> 00:07:41,759
um an open uk as well uh alongside

00:07:39,120 --> 00:07:43,360
um consultancies such as accenturing as

00:07:41,759 --> 00:07:44,879
you can see and also

00:07:43,360 --> 00:07:47,520
the the members that we have on the call

00:07:44,879 --> 00:07:49,680
not to forget symphony and genesis tea

00:07:47,520 --> 00:07:50,800
um which we're very pleased to introduce

00:07:49,680 --> 00:07:53,759
to you today

00:07:50,800 --> 00:07:56,080
um and so as you can see we have a real

00:07:53,759 --> 00:07:57,599
diverse um set of engineering talent

00:07:56,080 --> 00:07:59,680
within our community

00:07:57,599 --> 00:08:00,879
and we bring all of this together in

00:07:59,680 --> 00:08:03,039
order to bring some

00:08:00,879 --> 00:08:04,400
really interesting and diverse projects

00:08:03,039 --> 00:08:07,680
um and events

00:08:04,400 --> 00:08:10,319
um as part of the foundation

00:08:07,680 --> 00:08:11,599
now the reason that i'm here today is to

00:08:10,319 --> 00:08:14,800
um talk to you about

00:08:11,599 --> 00:08:17,919
why um finos exists um

00:08:14,800 --> 00:08:21,440
and uh how open sourcing finance

00:08:17,919 --> 00:08:23,039
uh enables the industry um and so

00:08:21,440 --> 00:08:25,039
people on the call will be where be

00:08:23,039 --> 00:08:28,000
aware of ci cd

00:08:25,039 --> 00:08:29,599
and devops and cloud um and also

00:08:28,000 --> 00:08:31,440
development and how

00:08:29,599 --> 00:08:33,039
all of the various different open source

00:08:31,440 --> 00:08:36,080
tools that actually exist

00:08:33,039 --> 00:08:36,880
within the industry come together um in

00:08:36,080 --> 00:08:39,440
order to

00:08:36,880 --> 00:08:40,560
allow us to accelerate our engineering

00:08:39,440 --> 00:08:43,839
at pace

00:08:40,560 --> 00:08:45,920
um now as you can see on this slide

00:08:43,839 --> 00:08:47,360
there's a vast amount of tools that are

00:08:45,920 --> 00:08:50,399
available to engineers and

00:08:47,360 --> 00:08:51,440
organizations to use and the

00:08:50,399 --> 00:08:54,240
acceleration

00:08:51,440 --> 00:08:56,240
of digital transformation within uh

00:08:54,240 --> 00:08:58,320
financial services wouldn't be possible

00:08:56,240 --> 00:09:02,160
if it wasn't for these open source tools

00:08:58,320 --> 00:09:05,839
that um teams can actually leverage

00:09:02,160 --> 00:09:08,880
uh now within financial services

00:09:05,839 --> 00:09:09,680
as you're probably aware um a lot of the

00:09:08,880 --> 00:09:13,279
bigger banks

00:09:09,680 --> 00:09:13,920
used to be um very kind of industrial in

00:09:13,279 --> 00:09:17,440
the way the

00:09:13,920 --> 00:09:20,399
um projects and technology

00:09:17,440 --> 00:09:22,240
um teams were run um they would hand

00:09:20,399 --> 00:09:24,240
their deliverables through a very

00:09:22,240 --> 00:09:27,440
industrial revolution way of

00:09:24,240 --> 00:09:29,839
developing um which is now changing um

00:09:27,440 --> 00:09:30,959
into something which is a lot more um

00:09:29,839 --> 00:09:34,240
agile and lean

00:09:30,959 --> 00:09:37,839
and feature team oriented oriented um

00:09:34,240 --> 00:09:40,480
and so this slide um describes how those

00:09:37,839 --> 00:09:41,279
industrial teams or central teams the

00:09:40,480 --> 00:09:44,000
delivery

00:09:41,279 --> 00:09:44,959
um uh tickets would go through in order

00:09:44,000 --> 00:09:48,160
to get um

00:09:44,959 --> 00:09:50,399
done um have now come together into more

00:09:48,160 --> 00:09:51,440
lean individual feature teams that

00:09:50,399 --> 00:09:53,519
deliver

00:09:51,440 --> 00:09:54,720
features faster by bringing the teams

00:09:53,519 --> 00:09:57,519
together

00:09:54,720 --> 00:09:59,120
um including open source which is a

00:09:57,519 --> 00:10:02,399
great you know continuous

00:09:59,120 --> 00:10:05,279
um agile way of working

00:10:02,399 --> 00:10:07,760
however what we've um found within

00:10:05,279 --> 00:10:09,279
industry is that um

00:10:07,760 --> 00:10:11,440
across all of the various different

00:10:09,279 --> 00:10:14,320
financial players so the big banks

00:10:11,440 --> 00:10:15,839
a lot of the um digital transformation

00:10:14,320 --> 00:10:18,880
is still happening within those

00:10:15,839 --> 00:10:20,320
lean teams and so although

00:10:18,880 --> 00:10:22,399
the individual feature teams are

00:10:20,320 --> 00:10:25,040
delivering fast for their individual

00:10:22,399 --> 00:10:27,279
projects that they're delivering

00:10:25,040 --> 00:10:28,480
there's still room for improvement and

00:10:27,279 --> 00:10:31,120
so there's still

00:10:28,480 --> 00:10:32,800
ways and means in which we can create

00:10:31,120 --> 00:10:35,200
even more efficiency

00:10:32,800 --> 00:10:36,320
by taking all of these silo teams that

00:10:35,200 --> 00:10:39,120
are delivering fast

00:10:36,320 --> 00:10:41,360
individually and bringing them together

00:10:39,120 --> 00:10:44,079
you know across the globe and so

00:10:41,360 --> 00:10:45,680
not only do we um improve digital

00:10:44,079 --> 00:10:48,320
transformation on the ground

00:10:45,680 --> 00:10:48,880
but we can actually continue to improve

00:10:48,320 --> 00:10:51,040
digital

00:10:48,880 --> 00:10:52,959
transformation across all of the

00:10:51,040 --> 00:10:55,200
different financial services companies

00:10:52,959 --> 00:10:56,399
and fintech companies that are also

00:10:55,200 --> 00:10:59,600
working in this way

00:10:56,399 --> 00:11:01,920
and so therefore we actually create a

00:10:59,600 --> 00:11:06,320
faster industry of more joined up

00:11:01,920 --> 00:11:09,920
teams and more joined up collaboration

00:11:06,320 --> 00:11:13,600
um so finos

00:11:09,920 --> 00:11:14,079
is actually the mechanism in which we do

00:11:13,600 --> 00:11:17,839
that

00:11:14,079 --> 00:11:20,240
um finos um is a open source community

00:11:17,839 --> 00:11:22,320
um that brings all of these various

00:11:20,240 --> 00:11:25,440
different teams together

00:11:22,320 --> 00:11:28,560
um and unites everybody within

00:11:25,440 --> 00:11:31,680
uh financial services across

00:11:28,560 --> 00:11:32,640
the open source landscape and as you can

00:11:31,680 --> 00:11:35,760
see here we

00:11:32,640 --> 00:11:38,079
unite everybody through um github

00:11:35,760 --> 00:11:40,160
and we bring everybody together across

00:11:38,079 --> 00:11:43,839
the globe including the apac region

00:11:40,160 --> 00:11:44,399
and also within europe and also across

00:11:43,839 --> 00:11:46,959
the us

00:11:44,399 --> 00:11:47,519
as well in order to collaborate through

00:11:46,959 --> 00:11:50,880
both

00:11:47,519 --> 00:11:54,000
um open source delivery through code um

00:11:50,880 --> 00:11:56,959
events and meetups such as this one

00:11:54,000 --> 00:11:59,440
and various other events and blogs etc

00:11:56,959 --> 00:12:01,120
um as you would expect of a foundation

00:11:59,440 --> 00:12:04,079
that likes to

00:12:01,120 --> 00:12:05,519
bring the financial services together um

00:12:04,079 --> 00:12:08,639
in a safe and trusted

00:12:05,519 --> 00:12:11,680
um mechanism uh

00:12:08,639 --> 00:12:14,480
and so with that within um finos

00:12:11,680 --> 00:12:15,279
we have various different projects um

00:12:14,480 --> 00:12:18,160
that across

00:12:15,279 --> 00:12:19,279
the the industry and the landscape um

00:12:18,160 --> 00:12:21,279
such as

00:12:19,279 --> 00:12:23,600
um legend which is actually being

00:12:21,279 --> 00:12:26,079
contributed by goldman sachs

00:12:23,600 --> 00:12:28,720
um perspective which is being um

00:12:26,079 --> 00:12:31,279
contributed by jp morgan

00:12:28,720 --> 00:12:33,440
we also have cloud service certification

00:12:31,279 --> 00:12:35,839
which is you know joining together

00:12:33,440 --> 00:12:38,639
of cloud services through infrastructure

00:12:35,839 --> 00:12:41,760
as code and bdd testing um

00:12:38,639 --> 00:12:43,760
the brings you know uh certified cloud

00:12:41,760 --> 00:12:46,720
policies together with those um

00:12:43,760 --> 00:12:48,560
various um different um uh

00:12:46,720 --> 00:12:50,880
infrastructures code scripts

00:12:48,560 --> 00:12:51,760
um and we also have standards projects

00:12:50,880 --> 00:12:55,040
as well such as

00:12:51,760 --> 00:12:56,160
fdc3 which was contributed to the

00:12:55,040 --> 00:12:58,560
foundation

00:12:56,160 --> 00:12:59,279
now all of these different projects so

00:12:58,560 --> 00:13:01,839
these are just

00:12:59,279 --> 00:13:04,800
um a subset of the projects that we have

00:13:01,839 --> 00:13:07,680
um but the actual teams that are inside

00:13:04,800 --> 00:13:08,800
the projects are teams from the

00:13:07,680 --> 00:13:12,240
financial services

00:13:08,800 --> 00:13:14,720
services industry and so if you um visit

00:13:12,240 --> 00:13:16,240
the finos organization on github and

00:13:14,720 --> 00:13:17,200
look within these projects you will

00:13:16,240 --> 00:13:20,320
notice

00:13:17,200 --> 00:13:22,000
um banking engineers i'm collaborating

00:13:20,320 --> 00:13:24,480
and contributing equally

00:13:22,000 --> 00:13:26,560
amongst the open source community and

00:13:24,480 --> 00:13:27,440
you can also leverage these projects for

00:13:26,560 --> 00:13:31,600
your own use

00:13:27,440 --> 00:13:31,600
under an apache license as well

00:13:32,320 --> 00:13:36,959
so to give you kind of like a um an

00:13:34,880 --> 00:13:40,959
overview of the types of

00:13:36,959 --> 00:13:43,600
um projects that we have so

00:13:40,959 --> 00:13:44,800
perspective as i mentioned before and

00:13:43,600 --> 00:13:48,000
also warts

00:13:44,800 --> 00:13:50,560
fall under data visualization we

00:13:48,000 --> 00:13:51,600
also have data modelling projects um

00:13:50,560 --> 00:13:54,079
such as legend

00:13:51,600 --> 00:13:55,680
as mentioned before but also morgan

00:13:54,079 --> 00:13:58,720
stanley's

00:13:55,680 --> 00:14:00,720
morpher under cloud we have

00:13:58,720 --> 00:14:02,480
cloud service certification but we also

00:14:00,720 --> 00:14:04,320
have a special interest group called um

00:14:02,480 --> 00:14:06,959
devops mutualization

00:14:04,320 --> 00:14:07,760
um that kind of spans into cloud and so

00:14:06,959 --> 00:14:09,760
you know the

00:14:07,760 --> 00:14:11,360
um borders between those projects and

00:14:09,760 --> 00:14:11,920
the special interest groups are blurred

00:14:11,360 --> 00:14:14,240
and

00:14:11,920 --> 00:14:16,399
you tend to find um the same um

00:14:14,240 --> 00:14:19,199
contributors come into

00:14:16,399 --> 00:14:19,760
those two initiatives as well then we

00:14:19,199 --> 00:14:22,959
also have

00:14:19,760 --> 00:14:24,560
interoperability um such as fdc3 which

00:14:22,959 --> 00:14:25,839
is the standard that i mentioned before

00:14:24,560 --> 00:14:28,160
that describes

00:14:25,839 --> 00:14:29,600
um financial objects and how you can

00:14:28,160 --> 00:14:31,040
actually share those across the

00:14:29,600 --> 00:14:33,199
financial desktop

00:14:31,040 --> 00:14:36,079
but we also have plexus as well which is

00:14:33,199 --> 00:14:37,120
um a deutsche bank contribution into the

00:14:36,079 --> 00:14:39,920
foundation

00:14:37,120 --> 00:14:41,440
um and both on plexus and also warts

00:14:39,920 --> 00:14:43,920
have been contributed and

00:14:41,440 --> 00:14:46,480
are contributed into by deutsche bank um

00:14:43,920 --> 00:14:46,480
engineers

00:14:47,199 --> 00:14:53,519
we also have um data related

00:14:50,639 --> 00:14:55,360
um projects too so it's not just um

00:14:53,519 --> 00:14:56,160
libraries and software that you can

00:14:55,360 --> 00:14:58,240
download

00:14:56,160 --> 00:14:59,279
you know and clone and contribute into

00:14:58,240 --> 00:15:01,440
but we also have

00:14:59,279 --> 00:15:02,720
um projects that are related to data and

00:15:01,440 --> 00:15:06,399
data modeling

00:15:02,720 --> 00:15:09,839
um so both um data hub and data helix

00:15:06,399 --> 00:15:12,800
um exist in order to simulate data

00:15:09,839 --> 00:15:13,600
and provide a test environment for you

00:15:12,800 --> 00:15:16,240
to

00:15:13,600 --> 00:15:17,120
synthesize data for your development

00:15:16,240 --> 00:15:20,160
teams

00:15:17,120 --> 00:15:23,120
so they are data synthesis um projects

00:15:20,160 --> 00:15:23,440
um and legend exists in order to model

00:15:23,120 --> 00:15:27,199
um

00:15:23,440 --> 00:15:30,480
financial objects both using the

00:15:27,199 --> 00:15:33,279
uh legend um infrastructure um

00:15:30,480 --> 00:15:35,199
plus also as legend working groups that

00:15:33,279 --> 00:15:37,680
come together to describe

00:15:35,199 --> 00:15:38,800
um how those various different models

00:15:37,680 --> 00:15:41,600
you know should exist

00:15:38,800 --> 00:15:42,079
and how they should be described within

00:15:41,600 --> 00:15:46,079
the

00:15:42,079 --> 00:15:46,079
legend data modeling platform itself

00:15:46,399 --> 00:15:50,079
so the finnos community welcomes

00:15:49,040 --> 00:15:52,639
everybody to join

00:15:50,079 --> 00:15:54,720
um no matter you know the region uh

00:15:52,639 --> 00:15:55,680
where you are so we very much welcome

00:15:54,720 --> 00:15:59,440
contribution

00:15:55,680 --> 00:16:01,440
um from the apac region as well and so

00:15:59,440 --> 00:16:04,079
the question to ask is are you ready to

00:16:01,440 --> 00:16:06,560
join the finnos open source community

00:16:04,079 --> 00:16:08,160
um and so if you are and you would like

00:16:06,560 --> 00:16:11,279
to get involved um

00:16:08,160 --> 00:16:14,720
it's very uh straightforward and easy so

00:16:11,279 --> 00:16:17,440
we asked people um to come to

00:16:14,720 --> 00:16:18,959
um the philos organization on github or

00:16:17,440 --> 00:16:22,560
finnos.org to

00:16:18,959 --> 00:16:23,040
evaluate our materials and also evaluate

00:16:22,560 --> 00:16:25,839
you know

00:16:23,040 --> 00:16:26,480
software and code and anything else that

00:16:25,839 --> 00:16:29,360
we have to

00:16:26,480 --> 00:16:31,279
to offer and then consume you know those

00:16:29,360 --> 00:16:32,079
and test them and use them and utilize

00:16:31,279 --> 00:16:35,759
them

00:16:32,079 --> 00:16:38,399
um also participating in our events

00:16:35,759 --> 00:16:40,079
such as the event that we're at today is

00:16:38,399 --> 00:16:43,040
a great way to get involved

00:16:40,079 --> 00:16:44,079
and then ultimately in your own time and

00:16:43,040 --> 00:16:46,639
at your own pace

00:16:44,079 --> 00:16:48,800
you can start contributing into the into

00:16:46,639 --> 00:16:52,000
the project as well

00:16:48,800 --> 00:16:55,199
and then ultimately um finnos likes to

00:16:52,000 --> 00:16:57,279
uh enable people's careers um so if you

00:16:55,199 --> 00:16:59,440
would like to lead a finnos project

00:16:57,279 --> 00:17:02,880
you can do that as well so my voice is

00:16:59,440 --> 00:17:02,880
going to be husky give me a second

00:17:03,680 --> 00:17:09,919
thank you very much and so with that

00:17:07,520 --> 00:17:10,959
um i'd like to hand back to andrew who i

00:17:09,919 --> 00:17:14,319
believe is going to

00:17:10,959 --> 00:17:16,079
introduce our next um presenter

00:17:14,319 --> 00:17:17,839
thanks james sound like sounds like we

00:17:16,079 --> 00:17:18,559
were just about to run out of your your

00:17:17,839 --> 00:17:22,000
voice there

00:17:18,559 --> 00:17:23,839
so so just in time um

00:17:22,000 --> 00:17:26,240
that's right now i really appreciate the

00:17:23,839 --> 00:17:28,559
uh the introduction and overview

00:17:26,240 --> 00:17:30,559
of finos i hope that gives everyone a

00:17:28,559 --> 00:17:34,880
good sense of uh

00:17:30,559 --> 00:17:38,160
the objectives of the uh of the uh

00:17:34,880 --> 00:17:40,480
community and what we're gonna do now

00:17:38,160 --> 00:17:42,320
and and what i'd like to do is is thank

00:17:40,480 --> 00:17:45,919
our two presenters that are coming up

00:17:42,320 --> 00:17:47,919
who have uh very much volunteered to be

00:17:45,919 --> 00:17:49,280
front and center on this meet up and and

00:17:47,919 --> 00:17:51,919
present uh

00:17:49,280 --> 00:17:52,400
ways that their firms are participating

00:17:51,919 --> 00:17:55,120
in the

00:17:52,400 --> 00:17:57,600
in the open source environment um first

00:17:55,120 --> 00:17:57,600
speaker is

00:17:57,919 --> 00:18:03,120
from symphony so pyeongchang i'm going

00:17:59,919 --> 00:18:07,760
to hand over straight to you and

00:18:03,120 --> 00:18:11,440
give you the floor thank you andrew

00:18:07,760 --> 00:18:15,840
if you could stop sharing your screen

00:18:11,440 --> 00:18:15,840
okay thank you

00:18:20,080 --> 00:18:22,960
is my screen up

00:18:24,320 --> 00:18:29,919
yep perfect all right so uh thank you

00:18:28,240 --> 00:18:30,320
james and andrew for the introduction

00:18:29,919 --> 00:18:32,240
and

00:18:30,320 --> 00:18:34,640
uh thank you thanos for having me today

00:18:32,240 --> 00:18:36,960
so uh my name is yong chang and i

00:18:34,640 --> 00:18:38,880
am the technical lead for the developer

00:18:36,960 --> 00:18:40,799
relations team here at symphony

00:18:38,880 --> 00:18:42,000
and uh today we're i'm gonna talk to you

00:18:40,799 --> 00:18:44,720
a little bit about our

00:18:42,000 --> 00:18:45,919
bot developer kit as well as its

00:18:44,720 --> 00:18:49,679
migration into the

00:18:45,919 --> 00:18:50,799
finos ecosystem so today's agenda will

00:18:49,679 --> 00:18:52,640
be fairly high level

00:18:50,799 --> 00:18:54,240
i'll talk a little bit about myself

00:18:52,640 --> 00:18:55,360
followed by symphony if you're not too

00:18:54,240 --> 00:18:57,200
familiar with us

00:18:55,360 --> 00:18:59,600
we'll talk about bots and why they

00:18:57,200 --> 00:19:00,400
matter how to start building them with

00:18:59,600 --> 00:19:03,520
the bdk

00:19:00,400 --> 00:19:04,559
or bot developer kit 2.0 our move with

00:19:03,520 --> 00:19:07,039
bringing bdk

00:19:04,559 --> 00:19:08,160
into finos and how you can get started

00:19:07,039 --> 00:19:10,559
with bdk

00:19:08,160 --> 00:19:13,280
followed by a really short demo on the

00:19:10,559 --> 00:19:15,120
actual mechanics of uh bringing up a bot

00:19:13,280 --> 00:19:16,559
and we'll have q a right at the end of

00:19:15,120 --> 00:19:18,720
this session so feel free to

00:19:16,559 --> 00:19:19,919
write your questions in the q a box and

00:19:18,720 --> 00:19:23,120
we'll get to them

00:19:19,919 --> 00:19:25,120
at the end so a little bit about me i

00:19:23,120 --> 00:19:27,440
am born and raised and still based in

00:19:25,120 --> 00:19:29,760
singapore i've spent

00:19:27,440 --> 00:19:30,880
most of my career in finance in banking

00:19:29,760 --> 00:19:33,679
where i started

00:19:30,880 --> 00:19:36,000
and then in asset management before

00:19:33,679 --> 00:19:37,280
landing in symphony so i've been through

00:19:36,000 --> 00:19:41,039
a couple of roles

00:19:37,280 --> 00:19:43,120
from operations to market risk to

00:19:41,039 --> 00:19:44,799
sales and trading analytics and then

00:19:43,120 --> 00:19:45,919
through equities collaboration

00:19:44,799 --> 00:19:48,240
technology and

00:19:45,919 --> 00:19:49,760
that's how i ended up at symphony so

00:19:48,240 --> 00:19:50,480
i've i've been through working on

00:19:49,760 --> 00:19:52,160
back-end

00:19:50,480 --> 00:19:53,760
front-end projects so pretty much full

00:19:52,160 --> 00:19:55,840
stack and then on

00:19:53,760 --> 00:19:57,200
the data front as well and

00:19:55,840 --> 00:19:57,679
infrastructure is something of an

00:19:57,200 --> 00:20:00,720
interest

00:19:57,679 --> 00:20:02,880
for me so within symphony what i do with

00:20:00,720 --> 00:20:04,720
developer relations is most of my time

00:20:02,880 --> 00:20:06,400
is spent on advocacy so

00:20:04,720 --> 00:20:08,400
events like these as well as reaching

00:20:06,400 --> 00:20:11,440
out to the developer community

00:20:08,400 --> 00:20:12,159
we do learning so uh the content for our

00:20:11,440 --> 00:20:13,760
structured

00:20:12,159 --> 00:20:16,159
certification program that you'll hear

00:20:13,760 --> 00:20:18,640
me talk about later we do events so like

00:20:16,159 --> 00:20:20,720
hackathons meetups so and so forth

00:20:18,640 --> 00:20:22,960
i also do a bit of maintenance on the

00:20:20,720 --> 00:20:24,880
documentation that our developers read

00:20:22,960 --> 00:20:27,760
as well as some internal automation

00:20:24,880 --> 00:20:29,919
projects that keep our team running

00:20:27,760 --> 00:20:31,840
i also have great passion for coffee

00:20:29,919 --> 00:20:32,960
photography running keyboards so

00:20:31,840 --> 00:20:35,280
hit me up if you want to know about

00:20:32,960 --> 00:20:38,080
those or you can email me at

00:20:35,280 --> 00:20:39,760
young.com symphony.com or linkedin

00:20:38,080 --> 00:20:41,840
through there

00:20:39,760 --> 00:20:43,679
so if you don't already know about

00:20:41,840 --> 00:20:44,799
symphony i'll give you a very brief

00:20:43,679 --> 00:20:47,440
introduction so

00:20:44,799 --> 00:20:48,080
symphony is the leading secure scalable

00:20:47,440 --> 00:20:50,799
collaboration

00:20:48,080 --> 00:20:52,559
platform for financial services so we

00:20:50,799 --> 00:20:54,880
pride ourselves in our top

00:20:52,559 --> 00:20:55,840
and class data security and compliance

00:20:54,880 --> 00:20:58,880
capabilities

00:20:55,840 --> 00:21:01,200
this enables cross-company collaboration

00:20:58,880 --> 00:21:02,640
and we are the largest trusted community

00:21:01,200 --> 00:21:04,960
as a result of

00:21:02,640 --> 00:21:07,120
all these capabilities and so our open

00:21:04,960 --> 00:21:08,480
architecture enables our customers and

00:21:07,120 --> 00:21:10,400
partners to build things like

00:21:08,480 --> 00:21:12,720
automations and integrations

00:21:10,400 --> 00:21:14,320
and these are not for fun so the idea is

00:21:12,720 --> 00:21:15,039
that people can use these to build

00:21:14,320 --> 00:21:16,960
solutions

00:21:15,039 --> 00:21:18,080
that address industry and market

00:21:16,960 --> 00:21:19,679
challenges so

00:21:18,080 --> 00:21:22,400
end of the day you have fit for purpose

00:21:19,679 --> 00:21:24,880
workflows that work across the industry

00:21:22,400 --> 00:21:26,960
and that's what symphony is so how do

00:21:24,880 --> 00:21:30,000
you get started actually building these

00:21:26,960 --> 00:21:32,799
automations we start with the concept of

00:21:30,000 --> 00:21:34,640
bots and we see bots as the connective

00:21:32,799 --> 00:21:36,559
tissue within your organization

00:21:34,640 --> 00:21:39,440
what that means is you have your own

00:21:36,559 --> 00:21:41,440
internal systems and data resources

00:21:39,440 --> 00:21:43,840
and these are on the left here so you

00:21:41,440 --> 00:21:45,679
could have a database an nlp engine

00:21:43,840 --> 00:21:47,280
research distribution and whatnot and

00:21:45,679 --> 00:21:49,919
all these little disparate systems

00:21:47,280 --> 00:21:50,720
within your organizations exist as they

00:21:49,919 --> 00:21:52,799
are today

00:21:50,720 --> 00:21:54,559
and you could have about orchestrated

00:21:52,799 --> 00:21:56,799
workflows that make use

00:21:54,559 --> 00:21:58,720
of these data resources or performance

00:21:56,799 --> 00:22:01,120
action and so on and so forth

00:21:58,720 --> 00:22:01,840
and you can use uh symphony apis that

00:22:01,120 --> 00:22:03,679
are open

00:22:01,840 --> 00:22:06,400
to do things like manage rooms send

00:22:03,679 --> 00:22:08,320
messages look up the symphony directory

00:22:06,400 --> 00:22:10,320
and have all of these orchestrated by

00:22:08,320 --> 00:22:12,400
this single bot that will serve

00:22:10,320 --> 00:22:13,760
a certain function so we see this as

00:22:12,400 --> 00:22:15,440
incredibly powerful

00:22:13,760 --> 00:22:18,080
and the way that workflows should be

00:22:15,440 --> 00:22:19,840
bring should be brought forward

00:22:18,080 --> 00:22:22,720
and so how do you get started building

00:22:19,840 --> 00:22:23,280
bots uh this comes to our bot developer

00:22:22,720 --> 00:22:26,159
kit

00:22:23,280 --> 00:22:26,880
and the bdk 2.0 as we call it is an

00:22:26,159 --> 00:22:29,440
evolution

00:22:26,880 --> 00:22:30,559
of previous sdks that were traditionally

00:22:29,440 --> 00:22:33,440
focused on

00:22:30,559 --> 00:22:35,840
our rest api bindings so one rest call

00:22:33,440 --> 00:22:37,919
is bound to a line of code for example

00:22:35,840 --> 00:22:40,400
and uh there was a previous version of

00:22:37,919 --> 00:22:40,720
the bot developer kit the 1.0 we built

00:22:40,400 --> 00:22:43,039
that

00:22:40,720 --> 00:22:44,320
in an opinionated stack but i think some

00:22:43,039 --> 00:22:47,280
people weren't very

00:22:44,320 --> 00:22:48,480
on board with parts of that architecture

00:22:47,280 --> 00:22:51,039
so what we've done through

00:22:48,480 --> 00:22:51,919
events and feedback is we've rebuilt

00:22:51,039 --> 00:22:54,559
this from scratch

00:22:51,919 --> 00:22:56,720
collaboratively built with our community

00:22:54,559 --> 00:23:00,000
on the key principles of simplicity

00:22:56,720 --> 00:23:02,000
as well as modularity so with that

00:23:00,000 --> 00:23:04,240
we built an ecosystem of modules

00:23:02,000 --> 00:23:05,760
basically so it's not just one

00:23:04,240 --> 00:23:07,840
project it's a bunch of different

00:23:05,760 --> 00:23:09,039
projects split across three layers

00:23:07,840 --> 00:23:10,880
there's the core layer

00:23:09,039 --> 00:23:12,720
the advanced layer and the integration

00:23:10,880 --> 00:23:13,919
layer and within these three layers

00:23:12,720 --> 00:23:15,919
there are different modules

00:23:13,919 --> 00:23:18,640
that fit into the picture all of them

00:23:15,919 --> 00:23:20,559
built upon the foundation of our same

00:23:18,640 --> 00:23:22,400
open api stack so things like

00:23:20,559 --> 00:23:24,640
configuration authentication

00:23:22,400 --> 00:23:26,400
and uh the actual api calls we don't

00:23:24,640 --> 00:23:28,400
want you to do that manually we have

00:23:26,400 --> 00:23:29,919
the bot developer kit do that for you

00:23:28,400 --> 00:23:30,960
and on top of that there are further

00:23:29,919 --> 00:23:32,640
abstractions

00:23:30,960 --> 00:23:34,480
so if you're binding like a command

00:23:32,640 --> 00:23:36,240
handler how do you how do you handle

00:23:34,480 --> 00:23:38,080
a conversation view so we have the

00:23:36,240 --> 00:23:39,840
activities api to abstract that

00:23:38,080 --> 00:23:41,679
for you so you don't have to write that

00:23:39,840 --> 00:23:43,919
from scratch and then

00:23:41,679 --> 00:23:45,600
integration layer basically binds uh

00:23:43,919 --> 00:23:47,279
frameworks like springboot so that

00:23:45,600 --> 00:23:49,600
springboard developers feel

00:23:47,279 --> 00:23:51,200
like they're developing using a native

00:23:49,600 --> 00:23:54,640
language and it feels

00:23:51,200 --> 00:23:57,120
uh very normal for them to to develop in

00:23:54,640 --> 00:23:59,760
the bdk 2.0 so all these different

00:23:57,120 --> 00:24:01,279
modules are maintained by symphony

00:23:59,760 --> 00:24:02,960
they are well documented they are well

00:24:01,279 --> 00:24:05,200
supported and they continue

00:24:02,960 --> 00:24:06,159
to have feature requests and so on and

00:24:05,200 --> 00:24:09,120
so forth

00:24:06,159 --> 00:24:11,039
but the idea of this new ecosystem is

00:24:09,120 --> 00:24:11,840
such that there will be modules that can

00:24:11,039 --> 00:24:14,000
coexist

00:24:11,840 --> 00:24:16,080
that are outside of the rematch of

00:24:14,000 --> 00:24:17,120
symphony and we see these modules as

00:24:16,080 --> 00:24:19,120
being built by

00:24:17,120 --> 00:24:20,480
community efforts and why this is

00:24:19,120 --> 00:24:22,960
important is because

00:24:20,480 --> 00:24:24,080
there are some aspects of workflows that

00:24:22,960 --> 00:24:25,919
are not

00:24:24,080 --> 00:24:27,760
symfony won't be privy to so if you're

00:24:25,919 --> 00:24:30,080
building a very specific

00:24:27,760 --> 00:24:31,520
technical integration with a product or

00:24:30,080 --> 00:24:34,080
if you have a specific

00:24:31,520 --> 00:24:35,279
business use case that you like to do

00:24:34,080 --> 00:24:36,000
that will be something that you can

00:24:35,279 --> 00:24:37,760
maintain

00:24:36,000 --> 00:24:39,679
and these will be modules that can be

00:24:37,760 --> 00:24:40,480
loaded along with the bot developer kit

00:24:39,679 --> 00:24:44,640
2.0

00:24:40,480 --> 00:24:46,320
and they will coexist very nicely

00:24:44,640 --> 00:24:47,679
and so this brings us to the move to

00:24:46,320 --> 00:24:51,039
finos so

00:24:47,679 --> 00:24:53,600
uh the the bdk 2.0 for java was uh

00:24:51,039 --> 00:24:54,799
officially moved in middle of last month

00:24:53,600 --> 00:24:57,120
and although this is just

00:24:54,799 --> 00:24:58,159
a simple move of a repository this is

00:24:57,120 --> 00:25:00,640
the culmination of

00:24:58,159 --> 00:25:02,559
months of work between the symphony

00:25:00,640 --> 00:25:04,320
engineering team as well as finos

00:25:02,559 --> 00:25:05,760
in terms of working out the different

00:25:04,320 --> 00:25:07,279
aspects of how

00:25:05,760 --> 00:25:10,000
projects should be incubated within

00:25:07,279 --> 00:25:12,240
finos the legality the processes

00:25:10,000 --> 00:25:13,200
the best practices of maintenance and so

00:25:12,240 --> 00:25:15,760
on and so forth

00:25:13,200 --> 00:25:16,240
so we were we were quite happy to move

00:25:15,760 --> 00:25:18,960
all this

00:25:16,240 --> 00:25:20,400
over so finos as james has mentioned

00:25:18,960 --> 00:25:23,360
earlier has a very large

00:25:20,400 --> 00:25:24,720
ecosystem a very very large group of

00:25:23,360 --> 00:25:25,600
different banks and financial

00:25:24,720 --> 00:25:27,840
institutions

00:25:25,600 --> 00:25:29,840
so we we feel like this is a good place

00:25:27,840 --> 00:25:30,720
for us to put something like this where

00:25:29,840 --> 00:25:32,799
our interests

00:25:30,720 --> 00:25:33,840
align in terms of expanding the

00:25:32,799 --> 00:25:36,000
ecosystem

00:25:33,840 --> 00:25:38,159
uh building out community projects where

00:25:36,000 --> 00:25:38,720
it makes sense and having them be reused

00:25:38,159 --> 00:25:41,120
across

00:25:38,720 --> 00:25:42,400
the financial services industry so our

00:25:41,120 --> 00:25:44,240
vision remains the same

00:25:42,400 --> 00:25:46,480
it should be an ecosystem of these

00:25:44,240 --> 00:25:49,440
projects and you could have specific

00:25:46,480 --> 00:25:51,039
modules that address certain domains uh

00:25:49,440 --> 00:25:54,159
it could be trading it could be

00:25:51,039 --> 00:25:56,159
settlement it could be any any sort of

00:25:54,159 --> 00:25:58,720
business workflow it could be technical

00:25:56,159 --> 00:26:00,640
integrations with nlp engines and so on

00:25:58,720 --> 00:26:03,039
it could be product integrations if you

00:26:00,640 --> 00:26:04,640
are a product company or vendor

00:26:03,039 --> 00:26:06,720
and so this is just the start of

00:26:04,640 --> 00:26:08,400
symfony's involvement we also have

00:26:06,720 --> 00:26:10,960
more projects in the pipeline so

00:26:08,400 --> 00:26:13,120
currently it's the bbk 2.0 for java

00:26:10,960 --> 00:26:14,080
there is also the python that is in beta

00:26:13,120 --> 00:26:15,679
now as well as

00:26:14,080 --> 00:26:17,440
a net version that will come at the end

00:26:15,679 --> 00:26:19,200
of the year these will also be

00:26:17,440 --> 00:26:21,520
contributed to finos

00:26:19,200 --> 00:26:23,279
as well as other more advanced tools

00:26:21,520 --> 00:26:25,279
like our ui toolkit for

00:26:23,279 --> 00:26:27,440
loading extension apps so these are ui

00:26:25,279 --> 00:26:32,480
based applications instead of

00:26:27,440 --> 00:26:34,640
bots so how you get started with bdk 2.0

00:26:32,480 --> 00:26:36,720
so at symfony what we have done is

00:26:34,640 --> 00:26:38,360
create a completely

00:26:36,720 --> 00:26:40,080
structured learning program at

00:26:38,360 --> 00:26:41,360
learn.symphony.com this is where you

00:26:40,080 --> 00:26:43,520
will get free

00:26:41,360 --> 00:26:44,799
training and certification so you'll go

00:26:43,520 --> 00:26:47,120
through a self-paced

00:26:44,799 --> 00:26:48,960
and a self-led program where you will

00:26:47,120 --> 00:26:52,559
watch videos that will describe

00:26:48,960 --> 00:26:54,400
concepts as well as a live demos for how

00:26:52,559 --> 00:26:56,400
to get started coding bots

00:26:54,400 --> 00:26:58,720
and a certification exam to prove that

00:26:56,400 --> 00:27:00,400
you know you have understood all that

00:26:58,720 --> 00:27:02,320
as part of this program you also get

00:27:00,400 --> 00:27:04,320
free access to a developer sandbox

00:27:02,320 --> 00:27:06,080
so i'll show that in a bit and all that

00:27:04,320 --> 00:27:06,640
you need basically to get started with

00:27:06,080 --> 00:27:08,880
your bots

00:27:06,640 --> 00:27:10,080
is have our bot generator which creates

00:27:08,880 --> 00:27:12,640
projects for you

00:27:10,080 --> 00:27:14,880
and uh you can get started running this

00:27:12,640 --> 00:27:16,000
simple command called yo symphony 2.0 so

00:27:14,880 --> 00:27:18,720
at the end of the day

00:27:16,000 --> 00:27:20,240
all you need is an idea uh the training

00:27:18,720 --> 00:27:23,039
from our certification center

00:27:20,240 --> 00:27:24,640
and you have your bot so let's get

00:27:23,039 --> 00:27:26,960
started with a demo

00:27:24,640 --> 00:27:28,159
so as i said all you need is a very

00:27:26,960 --> 00:27:30,880
simple

00:27:28,159 --> 00:27:32,559
command so what i'm going to first do is

00:27:30,880 --> 00:27:34,399
create a project

00:27:32,559 --> 00:27:35,919
with that command so i'll just type yo

00:27:34,399 --> 00:27:38,159
symphony 2.0

00:27:35,919 --> 00:27:39,120
this is going to give me a number of

00:27:38,159 --> 00:27:42,640
questions to answer

00:27:39,120 --> 00:27:43,840
so uh i will have my sandbox

00:27:42,640 --> 00:27:46,320
so this is something that you'll get

00:27:43,840 --> 00:27:48,880
free of charge if you enter our

00:27:46,320 --> 00:27:50,559
certification program i will have

00:27:48,880 --> 00:27:52,880
credentials that are part of that

00:27:50,559 --> 00:27:53,440
program as well i will be creating a bot

00:27:52,880 --> 00:27:56,799
today

00:27:53,440 --> 00:27:59,440
in java with no framework using maven

00:27:56,799 --> 00:28:01,520
and i'll just leave the rest as defaults

00:27:59,440 --> 00:28:02,240
so it's gonna hit to create an rsa key

00:28:01,520 --> 00:28:05,919
pair and

00:28:02,240 --> 00:28:08,640
do an initial compile and we are done so

00:28:05,919 --> 00:28:10,080
we can now open that project in our

00:28:08,640 --> 00:28:12,720
favorite ide

00:28:10,080 --> 00:28:14,159
so i'll give you a very quick run

00:28:12,720 --> 00:28:16,799
through of what that looks like

00:28:14,159 --> 00:28:18,159
so when the project is imported into

00:28:16,799 --> 00:28:20,320
your ide you have

00:28:18,159 --> 00:28:21,520
a complete project scaffold running

00:28:20,320 --> 00:28:23,760
already and this

00:28:21,520 --> 00:28:26,159
includes things like a defined

00:28:23,760 --> 00:28:28,960
configuration file so that's the same

00:28:26,159 --> 00:28:31,440
details we entered earlier and this

00:28:28,960 --> 00:28:32,399
includes the rsa key pair so what you'll

00:28:31,440 --> 00:28:33,840
do is take

00:28:32,399 --> 00:28:36,000
the public key and give it to your

00:28:33,840 --> 00:28:37,520
product administrator uh in the interest

00:28:36,000 --> 00:28:39,679
of time i've already uploaded

00:28:37,520 --> 00:28:40,720
one earlier so i'll be getting rid of

00:28:39,679 --> 00:28:43,760
the generated one

00:28:40,720 --> 00:28:44,080
and putting mine in and if you open the

00:28:43,760 --> 00:28:46,799
main

00:28:44,080 --> 00:28:49,120
class you'll see that it's a very simple

00:28:46,799 --> 00:28:51,440
class that just has a bunch of different

00:28:49,120 --> 00:28:53,120
command handlers already defined so

00:28:51,440 --> 00:28:54,320
basically we can just go ahead and run

00:28:53,120 --> 00:28:57,360
the project

00:28:54,320 --> 00:28:58,399
and what that will do is it will launch

00:28:57,360 --> 00:29:00,240
the application

00:28:58,399 --> 00:29:02,640
it will start doing the authentication

00:29:00,240 --> 00:29:04,559
process it will start

00:29:02,640 --> 00:29:05,840
creating a data feed which is how events

00:29:04,559 --> 00:29:08,080
are handled in symfony

00:29:05,840 --> 00:29:09,279
and basically your bot is up in a matter

00:29:08,080 --> 00:29:10,559
of seconds

00:29:09,279 --> 00:29:12,240
and so now that your bot is running

00:29:10,559 --> 00:29:13,200
let's go have a look at what that looks

00:29:12,240 --> 00:29:15,760
like

00:29:13,200 --> 00:29:16,720
so this is the developer sandbox called

00:29:15,760 --> 00:29:19,120
develop two

00:29:16,720 --> 00:29:21,279
and so we'll look for our bot here i

00:29:19,120 --> 00:29:24,000
named it finos meetupbot

00:29:21,279 --> 00:29:24,960
and so my bot is there so in my code i

00:29:24,000 --> 00:29:27,679
have a

00:29:24,960 --> 00:29:28,159
very simple gif command handler just so

00:29:27,679 --> 00:29:30,399
i

00:29:28,159 --> 00:29:31,200
all i need to do is go here and type

00:29:30,399 --> 00:29:36,000
shift

00:29:31,200 --> 00:29:36,000
and see if the bot responds and

00:29:36,080 --> 00:29:39,840
there you go so there you have it in a

00:29:38,159 --> 00:29:41,120
matter of seconds i have a complete

00:29:39,840 --> 00:29:43,120
project generated

00:29:41,120 --> 00:29:44,559
a bot running and the bot basically

00:29:43,120 --> 00:29:46,559
responds to

00:29:44,559 --> 00:29:47,679
commands that i send and so you can do

00:29:46,559 --> 00:29:49,919
things like have

00:29:47,679 --> 00:29:50,960
text messages structured forms and so on

00:29:49,919 --> 00:29:52,640
i'm not going to dive

00:29:50,960 --> 00:29:54,399
too deep into how to actually build up

00:29:52,640 --> 00:29:55,679
the rest of these things but basically

00:29:54,399 --> 00:29:58,720
with the bdk

00:29:55,679 --> 00:30:00,080
the full arsenal of symphonies open apis

00:29:58,720 --> 00:30:02,799
are at your disposal

00:30:00,080 --> 00:30:03,679
and you can learn all of those things at

00:30:02,799 --> 00:30:05,679
our learning

00:30:03,679 --> 00:30:07,520
website as well as get your free

00:30:05,679 --> 00:30:10,480
certification

00:30:07,520 --> 00:30:11,039
so uh yeah that's all i have for you

00:30:10,480 --> 00:30:14,080
today

00:30:11,039 --> 00:30:14,480
uh thank you for your time and i think

00:30:14,080 --> 00:30:16,720
the

00:30:14,480 --> 00:30:18,159
questions will get to them later so feel

00:30:16,720 --> 00:30:20,840
free to reach out to me at

00:30:18,159 --> 00:30:22,880
this email address or my team at

00:30:20,840 --> 00:30:25,039
developer.relations symphony.com

00:30:22,880 --> 00:30:26,000
and i'll hand over to our next speaker

00:30:25,039 --> 00:30:29,360
who is jose

00:30:26,000 --> 00:30:31,760
thank you thanks yong

00:30:29,360 --> 00:30:33,760
shang that was great really really

00:30:31,760 --> 00:30:35,840
informative and

00:30:33,760 --> 00:30:37,679
very impressive so i appreciate that

00:30:35,840 --> 00:30:39,279
you're right we've got some questions

00:30:37,679 --> 00:30:40,880
but we'll save those to the end if

00:30:39,279 --> 00:30:44,320
that's okay

00:30:40,880 --> 00:30:46,799
um and uh as you said uh next is

00:30:44,320 --> 00:30:48,720
jose pozo jose thank you so much for

00:30:46,799 --> 00:30:50,480
joining us i know it's an early morning

00:30:48,720 --> 00:30:53,760
for you in london

00:30:50,480 --> 00:30:56,080
um looking forward to hearing more about

00:30:53,760 --> 00:30:57,679
genesis i know you guys don't have a

00:30:56,080 --> 00:31:00,320
presence in apec

00:30:57,679 --> 00:31:01,279
yet but that may change in the in the

00:31:00,320 --> 00:31:04,559
near future and

00:31:01,279 --> 00:31:06,880
uh also congratulate you on your uh

00:31:04,559 --> 00:31:08,399
very recent uh funding round and maybe

00:31:06,880 --> 00:31:10,399
you could say a few words about that

00:31:08,399 --> 00:31:11,120
that's uh that's very exciting news for

00:31:10,399 --> 00:31:13,760
the uh

00:31:11,120 --> 00:31:14,399
for the future of your your company um

00:31:13,760 --> 00:31:17,039
jose

00:31:14,399 --> 00:31:18,720
i'll hand over to you and um you've got

00:31:17,039 --> 00:31:22,480
the floor

00:31:18,720 --> 00:31:24,480
thank you andrew yes so yeah

00:31:22,480 --> 00:31:25,519
thank you so much about um you know the

00:31:24,480 --> 00:31:27,039
congratulations they

00:31:25,519 --> 00:31:28,640
uh we worked really hard to get this

00:31:27,039 --> 00:31:31,360
seriously funding

00:31:28,640 --> 00:31:33,360
it was uh amazing for us i've been with

00:31:31,360 --> 00:31:36,080
genesis since the beginning

00:31:33,360 --> 00:31:37,440
so pretty much since the first line of

00:31:36,080 --> 00:31:40,320
code was written

00:31:37,440 --> 00:31:41,760
and honestly it's been a journey so i'm

00:31:40,320 --> 00:31:42,320
really happy to be here and talk about

00:31:41,760 --> 00:31:47,840
it

00:31:42,320 --> 00:31:47,840
um i'll start sharing my screen

00:31:54,559 --> 00:31:57,679
let me know if you can see it

00:31:59,120 --> 00:32:06,399
yup can see it perfectly okay perfect

00:32:02,799 --> 00:32:07,840
right so uh thanks joan shank for your

00:32:06,399 --> 00:32:10,320
presentation that was really really

00:32:07,840 --> 00:32:12,080
interesting we we in genesis we

00:32:10,320 --> 00:32:13,760
partnered with symphony not so long ago

00:32:12,080 --> 00:32:15,360
i think it was november

00:32:13,760 --> 00:32:16,799
and we have already started building

00:32:15,360 --> 00:32:18,399
bots and

00:32:16,799 --> 00:32:20,000
we do all sorts of sorts of really

00:32:18,399 --> 00:32:21,760
interesting things actually we

00:32:20,000 --> 00:32:23,519
we can control all of our cloud

00:32:21,760 --> 00:32:26,240
instances from symfony

00:32:23,519 --> 00:32:28,159
by using commands and our integration

00:32:26,240 --> 00:32:30,000
with the genesis environment manager

00:32:28,159 --> 00:32:31,600
and honestly it's a great thing i mean

00:32:30,000 --> 00:32:32,320
our sales guys can bring up demo

00:32:31,600 --> 00:32:33,519
instances

00:32:32,320 --> 00:32:35,679
you can stop them and start them

00:32:33,519 --> 00:32:36,480
whenever they want a very very useful

00:32:35,679 --> 00:32:38,799
tool

00:32:36,480 --> 00:32:40,559
so yeah looking forward to more

00:32:38,799 --> 00:32:42,640
integration with symphony

00:32:40,559 --> 00:32:43,600
uh now my name is jose poser and i'm

00:32:42,640 --> 00:32:45,760
going to talk about

00:32:43,600 --> 00:32:46,960
how do you use open source technology in

00:32:45,760 --> 00:32:49,279
genesis

00:32:46,960 --> 00:32:50,559
and why do we think it's it's a great

00:32:49,279 --> 00:32:52,480
thing for

00:32:50,559 --> 00:32:54,240
a local application platform but really

00:32:52,480 --> 00:32:56,399
any application

00:32:54,240 --> 00:32:57,279
so um i'll start by talking a bit about

00:32:56,399 --> 00:33:00,559
myself

00:32:57,279 --> 00:33:02,080
um i have about 10 plus years experience

00:33:00,559 --> 00:33:04,000
in developing high performance and

00:33:02,080 --> 00:33:06,640
distributed applications

00:33:04,000 --> 00:33:07,760
but really my focus on financial

00:33:06,640 --> 00:33:10,960
services

00:33:07,760 --> 00:33:12,000
i started about eight years ago i joined

00:33:10,960 --> 00:33:14,640
the company called

00:33:12,000 --> 00:33:15,200
mysis which is now called finastra i

00:33:14,640 --> 00:33:18,000
believe

00:33:15,200 --> 00:33:20,399
and i started working on a domain

00:33:18,000 --> 00:33:22,960
specific language based in groovy

00:33:20,399 --> 00:33:24,159
which would generate c code which runs

00:33:22,960 --> 00:33:26,240
on gpus and

00:33:24,159 --> 00:33:27,440
and this was very very useful because it

00:33:26,240 --> 00:33:30,320
allowed

00:33:27,440 --> 00:33:32,320
business analysts to code risk scenarios

00:33:30,320 --> 00:33:35,679
using monte carlo simulations

00:33:32,320 --> 00:33:38,880
that would run uh hundreds of times

00:33:35,679 --> 00:33:42,559
quicker than just a cpu simulation

00:33:38,880 --> 00:33:45,519
um my interest for high performance

00:33:42,559 --> 00:33:47,440
and basically enabling other users

00:33:45,519 --> 00:33:49,840
translated into

00:33:47,440 --> 00:33:50,960
what genesis is today right we want to

00:33:49,840 --> 00:33:53,519
have something

00:33:50,960 --> 00:33:54,559
that enables people without lots of

00:33:53,519 --> 00:33:55,840
knowledge to create their own

00:33:54,559 --> 00:33:57,600
applications and

00:33:55,840 --> 00:33:59,919
they are high performance robust and

00:33:57,600 --> 00:34:04,000
reliable

00:33:59,919 --> 00:34:06,080
so the agenda for today

00:34:04,000 --> 00:34:08,240
is for items uh starting with the

00:34:06,080 --> 00:34:10,000
genesis vision and history

00:34:08,240 --> 00:34:11,599
the challenges of using open source not

00:34:10,000 --> 00:34:14,159
everything is is a

00:34:11,599 --> 00:34:14,639
an easy path every time the lessons

00:34:14,159 --> 00:34:17,839
learned

00:34:14,639 --> 00:34:20,000
and some examples so

00:34:17,839 --> 00:34:21,679
starting with the genesis vision and

00:34:20,000 --> 00:34:23,760
history

00:34:21,679 --> 00:34:25,200
we wanted to be the the leading local

00:34:23,760 --> 00:34:27,040
application platform provider in the

00:34:25,200 --> 00:34:28,560
capital markets

00:34:27,040 --> 00:34:30,960
and we thought it was a great moment to

00:34:28,560 --> 00:34:33,200
do this the reasons for it is the

00:34:30,960 --> 00:34:35,919
microservices started to being

00:34:33,200 --> 00:34:37,440
something commonplace across the

00:34:35,919 --> 00:34:39,520
industry but not so much within the

00:34:37,440 --> 00:34:41,119
financial services industry

00:34:39,520 --> 00:34:42,720
so it was a great opportunity to bring

00:34:41,119 --> 00:34:44,960
them in

00:34:42,720 --> 00:34:46,480
open source was also not something very

00:34:44,960 --> 00:34:48,079
common in the financial services

00:34:46,480 --> 00:34:50,720
industry either

00:34:48,079 --> 00:34:52,399
it was a lot more about proprietary

00:34:50,720 --> 00:34:54,159
solutions that are certified and all

00:34:52,399 --> 00:34:55,839
they did in all these different things

00:34:54,159 --> 00:34:57,280
rather than just relying on open source

00:34:55,839 --> 00:35:01,119
technology

00:34:57,280 --> 00:35:02,480
cloud services same story most of uh

00:35:01,119 --> 00:35:04,400
banks and investment banks they would

00:35:02,480 --> 00:35:06,400
have their own

00:35:04,400 --> 00:35:08,160
internal cloud or they would have their

00:35:06,400 --> 00:35:10,640
own on-premise servers but they were not

00:35:08,160 --> 00:35:14,320
relying on cloud services so much

00:35:10,640 --> 00:35:16,320
so everything seemed like a great

00:35:14,320 --> 00:35:18,000
opportunity to jump in

00:35:16,320 --> 00:35:20,720
with a new platform that takes advantage

00:35:18,000 --> 00:35:23,920
of all these new trends in technology

00:35:20,720 --> 00:35:26,000
and really great really

00:35:23,920 --> 00:35:28,079
great technologies that financial

00:35:26,000 --> 00:35:31,359
industry is not using yet

00:35:28,079 --> 00:35:33,119
so we started focusing on technology r d

00:35:31,359 --> 00:35:35,040
first we wanted to have a great

00:35:33,119 --> 00:35:36,800
foundation for our framework

00:35:35,040 --> 00:35:38,240
before we actually go to market and

00:35:36,800 --> 00:35:40,960
start selling to clients

00:35:38,240 --> 00:35:43,200
and we spent several years working on it

00:35:40,960 --> 00:35:43,200
um

00:35:43,359 --> 00:35:47,359
i could explain all this but my

00:35:45,200 --> 00:35:48,000
colleague ray uh created a great brave

00:35:47,359 --> 00:35:49,920
video

00:35:48,000 --> 00:35:51,680
that now james is going to display for

00:35:49,920 --> 00:35:53,359
you well it will be a lot more clearer

00:35:51,680 --> 00:35:55,520
than if i tried to

00:35:53,359 --> 00:35:59,839
so um change with you please uh share

00:35:55,520 --> 00:35:59,839
with us i'll stop sharing my screen now

00:36:17,280 --> 00:36:21,520
my name is ray chi and i'm head of

00:36:19,040 --> 00:36:24,640
solutions delivery at genesis global

00:36:21,520 --> 00:36:26,960
so what is an lcap lcap stands for low

00:36:24,640 --> 00:36:29,359
code application platform

00:36:26,960 --> 00:36:30,079
low code is pretty self-explanatory you

00:36:29,359 --> 00:36:32,000
can build

00:36:30,079 --> 00:36:34,880
and deliver solutions exactly as you

00:36:32,000 --> 00:36:37,359
need them with much less coding effort

00:36:34,880 --> 00:36:39,760
less code means faster delivery of

00:36:37,359 --> 00:36:41,920
enterprise ready systems at lower cost

00:36:39,760 --> 00:36:43,760
the application platform is the

00:36:41,920 --> 00:36:44,640
comprehensive set of services and

00:36:43,760 --> 00:36:46,400
components

00:36:44,640 --> 00:36:48,000
that provide a lot of the capabilities

00:36:46,400 --> 00:36:49,040
that you need for a system straight out

00:36:48,000 --> 00:36:51,040
of the box

00:36:49,040 --> 00:36:52,079
which greatly accelerates solution

00:36:51,040 --> 00:36:54,800
delivery

00:36:52,079 --> 00:36:57,040
they're enterprise ready and proven so

00:36:54,800 --> 00:36:58,320
what is the genesis lcap and why is it

00:36:57,040 --> 00:37:01,119
different

00:36:58,320 --> 00:37:01,920
there are a number of lcaps available

00:37:01,119 --> 00:37:04,480
but not all

00:37:01,920 --> 00:37:05,760
lcaps are the same they may all have a

00:37:04,480 --> 00:37:06,960
number of common attributes or

00:37:05,760 --> 00:37:09,040
capabilities

00:37:06,960 --> 00:37:10,800
however be quite distinct in their

00:37:09,040 --> 00:37:12,480
intricacies of microservices

00:37:10,800 --> 00:37:14,720
business components and tools the

00:37:12,480 --> 00:37:15,200
genesis lcap is the financial markets

00:37:14,720 --> 00:37:17,119
native

00:37:15,200 --> 00:37:19,280
lcap that is built bottom up

00:37:17,119 --> 00:37:21,280
specifically to service the requirements

00:37:19,280 --> 00:37:23,760
and challenges of financial markets

00:37:21,280 --> 00:37:26,000
most lcaps offer some tools to support

00:37:23,760 --> 00:37:27,520
the development process that is required

00:37:26,000 --> 00:37:30,160
after all there is still some coding

00:37:27,520 --> 00:37:32,400
effort so having optimized dev tools

00:37:30,160 --> 00:37:33,680
accelerates the development process they

00:37:32,400 --> 00:37:35,680
offer a selection

00:37:33,680 --> 00:37:37,119
of reusable functional components that

00:37:35,680 --> 00:37:38,560
perform actions that support the

00:37:37,119 --> 00:37:39,280
business process that you're trying to

00:37:38,560 --> 00:37:41,599
implement

00:37:39,280 --> 00:37:43,599
you get non-functional components for

00:37:41,599 --> 00:37:46,800
all fundamental system requirements

00:37:43,599 --> 00:37:48,560
like security scalability resilience

00:37:46,800 --> 00:37:50,560
robustness failover

00:37:48,560 --> 00:37:52,320
all systems need these capabilities but

00:37:50,560 --> 00:37:53,200
with lcap they come straight out of the

00:37:52,320 --> 00:37:54,960
box

00:37:53,200 --> 00:37:57,040
and then you have a whole range of tools

00:37:54,960 --> 00:37:59,520
to support the entire life cycle

00:37:57,040 --> 00:38:01,920
from requirements and planning the

00:37:59,520 --> 00:38:04,960
integrated development environment

00:38:01,920 --> 00:38:06,880
managing the code managing the builds

00:38:04,960 --> 00:38:08,079
managing the deployments managing the

00:38:06,880 --> 00:38:10,160
environments

00:38:08,079 --> 00:38:11,440
all the way through to operating the

00:38:10,160 --> 00:38:13,359
production system

00:38:11,440 --> 00:38:14,480
and managing and evolving the system

00:38:13,359 --> 00:38:17,200
going forward

00:38:14,480 --> 00:38:19,680
taken together all of those capabilities

00:38:17,200 --> 00:38:21,920
comprise a low code application platform

00:38:19,680 --> 00:38:24,000
the genesis difference is unlike most

00:38:21,920 --> 00:38:26,560
lcaps which have evolved from generic

00:38:24,000 --> 00:38:28,640
business process and workflow tools

00:38:26,560 --> 00:38:30,480
genesis has been specifically designed

00:38:28,640 --> 00:38:32,560
for creating and solving

00:38:30,480 --> 00:38:34,240
complex high performance financial

00:38:32,560 --> 00:38:36,079
services solutions

00:38:34,240 --> 00:38:37,280
the entire platform has been designed

00:38:36,079 --> 00:38:39,920
and architected

00:38:37,280 --> 00:38:41,920
with financial services in mind so it is

00:38:39,920 --> 00:38:44,240
capable of delivering the simple

00:38:41,920 --> 00:38:46,240
business process management workflows

00:38:44,240 --> 00:38:48,720
through to the high complex

00:38:46,240 --> 00:38:50,640
low latency high throughput requirements

00:38:48,720 --> 00:38:53,599
of real-time data distribution

00:38:50,640 --> 00:38:53,599
in risk and trading

00:38:58,240 --> 00:39:01,520
right so that was a good summary about

00:38:59,760 --> 00:39:03,680
what an lcap is

00:39:01,520 --> 00:39:05,680
but obviously being head of core

00:39:03,680 --> 00:39:08,000
development of genesis

00:39:05,680 --> 00:39:09,119
means i focus on the server-side

00:39:08,000 --> 00:39:11,839
platform development

00:39:09,119 --> 00:39:12,320
and i'd like to share with you a video

00:39:11,839 --> 00:39:14,160
of

00:39:12,320 --> 00:39:16,320
how you can define data schemas and you

00:39:14,160 --> 00:39:18,720
can quickly bring up an application

00:39:16,320 --> 00:39:20,960
displaying real-time data on grids

00:39:18,720 --> 00:39:24,160
so i have another short video for it um

00:39:20,960 --> 00:39:24,160
james will you please show it

00:39:24,400 --> 00:39:29,839
thank you

00:39:32,720 --> 00:39:36,560
my name is jose and i am the head of

00:39:34,400 --> 00:39:38,240
core development at genesis

00:39:36,560 --> 00:39:40,560
let me show you how quickly we can

00:39:38,240 --> 00:39:42,240
create a genesis data server component

00:39:40,560 --> 00:39:45,839
which is able to provide real-time

00:39:42,240 --> 00:39:47,760
information to a simple trade plotter

00:39:45,839 --> 00:39:49,440
first of all we need to define some

00:39:47,760 --> 00:39:53,440
relevant fields for the trade table

00:39:49,440 --> 00:39:55,680
like id quantity symbol and price

00:39:53,440 --> 00:39:57,359
as you can see the gpal definition helps

00:39:55,680 --> 00:39:58,480
me by providing suggestions and auto

00:39:57,359 --> 00:40:00,960
completions

00:39:58,480 --> 00:40:02,079
and moreover it's able to find mistakes

00:40:00,960 --> 00:40:03,920
automatically

00:40:02,079 --> 00:40:06,720
as an example i will not be able to

00:40:03,920 --> 00:40:08,319
assign a text value to a numeric field

00:40:06,720 --> 00:40:10,319
additionally i can access the full

00:40:08,319 --> 00:40:12,640
documentation of this gpal definition

00:40:10,319 --> 00:40:14,640
and see sample configuration so i can

00:40:12,640 --> 00:40:16,560
quickly learn on the go

00:40:14,640 --> 00:40:18,960
now that the trade fields are defined it

00:40:16,560 --> 00:40:20,880
is time to create the trade table

00:40:18,960 --> 00:40:23,359
we are now using the gpal definition for

00:40:20,880 --> 00:40:25,040
tables and the user experience changes

00:40:23,359 --> 00:40:27,359
accordingly

00:40:25,040 --> 00:40:29,680
as you can see the gpl system is telling

00:40:27,359 --> 00:40:32,079
me that i need to define a primary key

00:40:29,680 --> 00:40:33,119
to define a table so i will go ahead and

00:40:32,079 --> 00:40:35,200
do that

00:40:33,119 --> 00:40:36,400
each trade entity will be identified by

00:40:35,200 --> 00:40:38,079
its id field

00:40:36,400 --> 00:40:39,599
so this is the ideal candidate for the

00:40:38,079 --> 00:40:41,200
primary key

00:40:39,599 --> 00:40:42,880
but now i have another error showing me

00:40:41,200 --> 00:40:44,160
that the id field is not part of this

00:40:42,880 --> 00:40:46,800
table definition

00:40:44,160 --> 00:40:48,240
so let us add it as well notice how the

00:40:46,800 --> 00:40:49,599
fields i defined previously are

00:40:48,240 --> 00:40:51,280
available in this scope

00:40:49,599 --> 00:40:53,440
so you can reference and reference them

00:40:51,280 --> 00:40:54,800
quickly it is important to remark that

00:40:53,440 --> 00:40:56,000
these fields could be defined in

00:40:54,800 --> 00:40:57,599
separate components

00:40:56,000 --> 00:40:59,839
and automatically imported without

00:40:57,599 --> 00:41:01,680
having to declare them first

00:40:59,839 --> 00:41:03,760
so now we have a tray table defined in

00:41:01,680 --> 00:41:05,599
our system and we need to expose a

00:41:03,760 --> 00:41:06,720
real-time field of information to the

00:41:05,599 --> 00:41:08,960
front end

00:41:06,720 --> 00:41:10,319
in order to do this i need to create the

00:41:08,960 --> 00:41:13,280
genesis data server

00:41:10,319 --> 00:41:14,800
gpal definition as this is a server

00:41:13,280 --> 00:41:16,400
component definition

00:41:14,800 --> 00:41:18,960
i can now reference the table i have

00:41:16,400 --> 00:41:21,599
just created in the previous step

00:41:18,960 --> 00:41:22,240
and that's it this basic definition is

00:41:21,599 --> 00:41:23,839
enough

00:41:22,240 --> 00:41:26,160
to provide trade entities from our

00:41:23,839 --> 00:41:28,480
backend to our graphical interface

00:41:26,160 --> 00:41:29,440
however query definitions are rich in

00:41:28,480 --> 00:41:32,160
functionality

00:41:29,440 --> 00:41:33,119
and have many customization options as

00:41:32,160 --> 00:41:34,960
an example

00:41:33,119 --> 00:41:37,280
i will add a filter on this query so we

00:41:34,960 --> 00:41:40,160
will only show trades with high enough

00:41:37,280 --> 00:41:40,160
notional values

00:41:46,000 --> 00:41:50,240
right thank you thank you for that so i

00:41:47,680 --> 00:41:53,119
hope um that explained a little bit

00:41:50,240 --> 00:41:55,440
uh how we do things in genesis what is a

00:41:53,119 --> 00:41:58,000
bit of a low code application platform

00:41:55,440 --> 00:41:59,520
we have easy ways to define data schemas

00:41:58,000 --> 00:42:01,760
easy ways to define

00:41:59,520 --> 00:42:02,960
uh data grids you can see in real time

00:42:01,760 --> 00:42:04,800
etc

00:42:02,960 --> 00:42:06,000
but how do we achieve all this so that's

00:42:04,800 --> 00:42:10,079
what we're going to talk about

00:42:06,000 --> 00:42:10,079
now let me share my screen again

00:42:12,160 --> 00:42:20,319
there you go right

00:42:16,880 --> 00:42:23,520
so open source technology challenges

00:42:20,319 --> 00:42:24,560
there's a bit of history here um but

00:42:23,520 --> 00:42:27,599
first of all

00:42:24,560 --> 00:42:29,520
the challenges really so there are so

00:42:27,599 --> 00:42:32,800
many open source technologies available

00:42:29,520 --> 00:42:35,839
and so many databases network libraries

00:42:32,800 --> 00:42:39,040
it's just so much right there's a huge

00:42:35,839 --> 00:42:41,920
and amazing ecosystem um

00:42:39,040 --> 00:42:44,240
it's very very difficult to choose which

00:42:41,920 --> 00:42:45,760
technology suits your project best

00:42:44,240 --> 00:42:47,680
so when you start from scratch and you

00:42:45,760 --> 00:42:49,280
want to create a new application

00:42:47,680 --> 00:42:50,960
you might choose a database layer

00:42:49,280 --> 00:42:53,040
thinking that one is the best and the

00:42:50,960 --> 00:42:56,160
most suitable for the project but then

00:42:53,040 --> 00:42:57,599
over time requirements might change and

00:42:56,160 --> 00:42:58,000
therefore your database is not so

00:42:57,599 --> 00:43:00,480
suitable

00:42:58,000 --> 00:43:02,160
anymore you need to change it so you've

00:43:00,480 --> 00:43:03,440
technically chosen the wrong technology

00:43:02,160 --> 00:43:04,240
for the use case but you couldn't know

00:43:03,440 --> 00:43:06,800
ahead of time

00:43:04,240 --> 00:43:07,920
now you need to spend quite a lot of

00:43:06,800 --> 00:43:11,119
time changing it

00:43:07,920 --> 00:43:13,040
and that's not great um

00:43:11,119 --> 00:43:14,720
obviously better technology also comes

00:43:13,040 --> 00:43:18,480
after time

00:43:14,720 --> 00:43:20,079
and therefore you would like to upgrade

00:43:18,480 --> 00:43:21,680
but sometimes it's not so easy your

00:43:20,079 --> 00:43:25,040
technology is too coupled

00:43:21,680 --> 00:43:28,880
to that library or database

00:43:25,040 --> 00:43:31,839
and the investment is too high so

00:43:28,880 --> 00:43:34,240
how can you move forward make sure you

00:43:31,839 --> 00:43:36,400
can take advantage of open source

00:43:34,240 --> 00:43:37,920
without spending too much money on it

00:43:36,400 --> 00:43:39,440
and without making sure you're too

00:43:37,920 --> 00:43:43,280
tightly coupled to

00:43:39,440 --> 00:43:46,400
a certain solution well

00:43:43,280 --> 00:43:49,280
this is a lesson we learn over time and

00:43:46,400 --> 00:43:51,200
starting with our genesis database layer

00:43:49,280 --> 00:43:52,480
we started using some database layer

00:43:51,200 --> 00:43:56,240
called foundation db

00:43:52,480 --> 00:43:58,000
it was a great great amazing technology

00:43:56,240 --> 00:43:59,680
um it was built to be some sort of

00:43:58,000 --> 00:44:01,839
replacement of google spanner which

00:43:59,680 --> 00:44:03,280
powers the google search engine so

00:44:01,839 --> 00:44:06,640
incredibly

00:44:03,280 --> 00:44:08,640
scalable and fast unfortunately was

00:44:06,640 --> 00:44:10,640
property technology

00:44:08,640 --> 00:44:12,160
unfortunately and unfortunately in a way

00:44:10,640 --> 00:44:14,000
we'll get there

00:44:12,160 --> 00:44:15,760
but basically what happened is it was

00:44:14,000 --> 00:44:18,160
acquired by apple

00:44:15,760 --> 00:44:19,200
um apple saw the opportunity to buy

00:44:18,160 --> 00:44:22,800
great technology

00:44:19,200 --> 00:44:24,720
at a very good price um and they decided

00:44:22,800 --> 00:44:26,960
to use it to power the whole global

00:44:24,720 --> 00:44:30,079
icloud infrastructure

00:44:26,960 --> 00:44:32,000
now the genesis framework and platform

00:44:30,079 --> 00:44:32,640
at the time was built around foundation

00:44:32,000 --> 00:44:34,800
db

00:44:32,640 --> 00:44:36,319
and this presented a big issue right we

00:44:34,800 --> 00:44:37,839
cannot use the technology anymore has

00:44:36,319 --> 00:44:41,440
been bought out

00:44:37,839 --> 00:44:42,319
so fortunately apple released it as an

00:44:41,440 --> 00:44:43,920
open source

00:44:42,319 --> 00:44:46,319
database layer a few years later

00:44:43,920 --> 00:44:48,000
although it was too late for us

00:44:46,319 --> 00:44:50,000
but it didn't matter and it didn't

00:44:48,000 --> 00:44:52,079
matter because at this point we realize

00:44:50,000 --> 00:44:52,720
we cannot rely on property technology

00:44:52,079 --> 00:44:55,359
anymore

00:44:52,720 --> 00:44:56,720
or not solely solely on it right our

00:44:55,359 --> 00:44:59,200
approach to open source change

00:44:56,720 --> 00:44:59,200
completely

00:44:59,359 --> 00:45:05,040
and what did we decide to do

00:45:02,800 --> 00:45:06,240
well probability technologies pose high

00:45:05,040 --> 00:45:08,319
risk

00:45:06,240 --> 00:45:09,680
we learned our lesson very early in our

00:45:08,319 --> 00:45:12,960
journey and that's

00:45:09,680 --> 00:45:14,560
a good thing it means we need to provide

00:45:12,960 --> 00:45:15,680
an abstraction layer for each core part

00:45:14,560 --> 00:45:18,720
of the system

00:45:15,680 --> 00:45:21,520
whether it's a database layer or a

00:45:18,720 --> 00:45:22,960
pop-up mechanism whatever it is we need

00:45:21,520 --> 00:45:24,560
to have an abstraction layer we cannot

00:45:22,960 --> 00:45:26,400
just rely directly on

00:45:24,560 --> 00:45:28,640
a third-party technology especially if

00:45:26,400 --> 00:45:30,960
it's proprietary

00:45:28,640 --> 00:45:32,000
so starting with the database

00:45:30,960 --> 00:45:34,000
abstraction layer

00:45:32,000 --> 00:45:35,839
uh we decided to harness the power and

00:45:34,000 --> 00:45:36,880
efficiency of particular database layers

00:45:35,839 --> 00:45:40,160
like

00:45:36,880 --> 00:45:42,880
aerospike amazing database layer uh

00:45:40,160 --> 00:45:43,599
very high performance foundation db same

00:45:42,880 --> 00:45:46,400
different

00:45:43,599 --> 00:45:46,800
use cases but amazing no sequel database

00:45:46,400 --> 00:45:49,920
layer

00:45:46,800 --> 00:45:50,560
postgres you know 30 years plus history

00:45:49,920 --> 00:45:52,880
of

00:45:50,560 --> 00:45:54,160
being the greatest open source

00:45:52,880 --> 00:45:56,319
relational database

00:45:54,160 --> 00:45:58,839
etc you can use all those within the

00:45:56,319 --> 00:46:00,000
database genesis database abstraction

00:45:58,839 --> 00:46:02,720
layer

00:46:00,000 --> 00:46:04,000
now it is not just the only place we use

00:46:02,720 --> 00:46:06,400
database subtraction

00:46:04,000 --> 00:46:07,520
so we use open source there are three

00:46:06,400 --> 00:46:10,640
different areas

00:46:07,520 --> 00:46:13,760
where we use open source very very

00:46:10,640 --> 00:46:16,560
strongly one of them is event processing

00:46:13,760 --> 00:46:17,440
the second one is event notification

00:46:16,560 --> 00:46:19,040
message bus

00:46:17,440 --> 00:46:21,359
and the third one is the database layers

00:46:19,040 --> 00:46:23,119
already discussed

00:46:21,359 --> 00:46:24,960
in terms of event processing we chose

00:46:23,119 --> 00:46:28,160
reactive extensions

00:46:24,960 --> 00:46:29,839
this is an amazing abstraction around

00:46:28,160 --> 00:46:31,040
low-level threading synchronization

00:46:29,839 --> 00:46:32,720
threat safety

00:46:31,040 --> 00:46:34,960
it basically allows you to process

00:46:32,720 --> 00:46:36,480
events without having to care about all

00:46:34,960 --> 00:46:38,560
those sorts of things

00:46:36,480 --> 00:46:40,560
and not just in one language but many

00:46:38,560 --> 00:46:44,400
many different languages

00:46:40,560 --> 00:46:46,560
so the same concept you learn for rxjs

00:46:44,400 --> 00:46:47,760
in javascript you can apply to rx java

00:46:46,560 --> 00:46:51,440
in in java world

00:46:47,760 --> 00:46:55,040
or you can apply to.net in rx

00:46:51,440 --> 00:46:58,000
um this is great for us as a developer

00:46:55,040 --> 00:47:00,720
and also as a platform provider because

00:46:58,000 --> 00:47:00,720
if you need to use

00:47:01,040 --> 00:47:04,640
anything in your front implementation

00:47:02,800 --> 00:47:06,000
related to event processing

00:47:04,640 --> 00:47:07,839
you're probably going to be familiar

00:47:06,000 --> 00:47:09,680
with it because it's a commonplace

00:47:07,839 --> 00:47:11,200
tool it's available in many many

00:47:09,680 --> 00:47:13,760
different products

00:47:11,200 --> 00:47:15,440
and it's also used in many different

00:47:13,760 --> 00:47:16,240
types of solutions so not just database

00:47:15,440 --> 00:47:17,680
apis

00:47:16,240 --> 00:47:20,960
but also front-end platforms like

00:47:17,680 --> 00:47:20,960
angular or libraries

00:47:21,760 --> 00:47:28,000
our event and notification message bus

00:47:25,200 --> 00:47:28,640
was also abstracted so we can use

00:47:28,000 --> 00:47:31,200
different

00:47:28,640 --> 00:47:33,040
open source solutions with it so xeromq

00:47:31,200 --> 00:47:36,559
was our initial messaging buzz

00:47:33,040 --> 00:47:38,240
um we find like it's a great solution

00:47:36,559 --> 00:47:40,000
for parts up mechanism

00:47:38,240 --> 00:47:42,880
it has some downsides so with building

00:47:40,000 --> 00:47:45,119
cloud infrastructure as multicast

00:47:42,880 --> 00:47:46,720
multicast messages are not available in

00:47:45,119 --> 00:47:49,920
our cloud providers

00:47:46,720 --> 00:47:51,599
therefore we easily swap for aeron

00:47:49,920 --> 00:47:53,280
an errand is built for performance

00:47:51,599 --> 00:47:54,400
highest throughput and most predictable

00:47:53,280 --> 00:47:56,480
messaging with

00:47:54,400 --> 00:47:57,440
using simple binary encoding also

00:47:56,480 --> 00:48:00,000
aligned with fix

00:47:57,440 --> 00:48:01,359
so fixed has standards with uh simple

00:48:00,000 --> 00:48:03,280
binary encoding as well

00:48:01,359 --> 00:48:06,000
so really really a great fit for our

00:48:03,280 --> 00:48:08,400
financial services platform

00:48:06,000 --> 00:48:10,160
and again we could only do this because

00:48:08,400 --> 00:48:12,160
we rely on open source solutions and we

00:48:10,160 --> 00:48:15,440
rely on

00:48:12,160 --> 00:48:17,839
making sure that we can move forward

00:48:15,440 --> 00:48:19,200
and use any technology we can with our

00:48:17,839 --> 00:48:20,800
abstraction layers

00:48:19,200 --> 00:48:22,400
we can also use property solutions like

00:48:20,800 --> 00:48:25,359
solas

00:48:22,400 --> 00:48:27,040
but that's not really relevant for this

00:48:25,359 --> 00:48:30,480
channel

00:48:27,040 --> 00:48:30,480
then database layer

00:48:30,720 --> 00:48:34,240
non-time series so we use other

00:48:32,319 --> 00:48:35,359
technologies from time series but as i

00:48:34,240 --> 00:48:37,359
mentioned before

00:48:35,359 --> 00:48:39,280
foundation to be horizontally scalable

00:48:37,359 --> 00:48:42,640
multi-record asset guarantees

00:48:39,280 --> 00:48:43,200
focus on reliable inconsistency so cp

00:48:42,640 --> 00:48:46,240
mode

00:48:43,200 --> 00:48:49,040
an error spike similarly focus on

00:48:46,240 --> 00:48:52,880
performance and availability rather than

00:48:49,040 --> 00:48:55,359
multi-record asset guarantees postgres

00:48:52,880 --> 00:48:56,720
again who doesn't know passwords amazing

00:48:55,359 --> 00:48:58,079
database

00:48:56,720 --> 00:49:00,160
now the great thing about having these

00:48:58,079 --> 00:49:02,720
databases on our site

00:49:00,160 --> 00:49:04,400
is that the same solution the same

00:49:02,720 --> 00:49:05,760
product using the platform

00:49:04,400 --> 00:49:07,839
can be used in these three different

00:49:05,760 --> 00:49:10,160
databases without changing the code base

00:49:07,839 --> 00:49:11,440
you just need to switch the database

00:49:10,160 --> 00:49:14,319
settings right

00:49:11,440 --> 00:49:16,640
so if you want to create a high

00:49:14,319 --> 00:49:18,559
performance reconciliation

00:49:16,640 --> 00:49:19,680
tool that is able to process millions

00:49:18,559 --> 00:49:22,640
and millions

00:49:19,680 --> 00:49:24,400
of records per second you probably

00:49:22,640 --> 00:49:26,960
choose aerospike

00:49:24,400 --> 00:49:29,359
but if you want to have just a few

00:49:26,960 --> 00:49:31,119
thousand records a day and then

00:49:29,359 --> 00:49:32,640
an easier way of creating this data

00:49:31,119 --> 00:49:35,920
using a relational database

00:49:32,640 --> 00:49:37,920
you would use postgres and that's fine

00:49:35,920 --> 00:49:39,760
whatever you need you can choose and you

00:49:37,920 --> 00:49:40,400
can pick and choose and that's a great

00:49:39,760 --> 00:49:42,319
thing

00:49:40,400 --> 00:49:44,480
to make sure every single solution fits

00:49:42,319 --> 00:49:47,920
our clients

00:49:44,480 --> 00:49:49,520
now the importance of the fitness

00:49:47,920 --> 00:49:52,559
community is that

00:49:49,520 --> 00:49:55,839
leveraging open source is

00:49:52,559 --> 00:49:57,920
really the way to go not just because

00:49:55,839 --> 00:50:00,319
it's ready available and it's everybody

00:49:57,920 --> 00:50:03,359
can fix it and everybody can

00:50:00,319 --> 00:50:05,440
use it it's just because everybody can

00:50:03,359 --> 00:50:06,640
contribute to make a better future into

00:50:05,440 --> 00:50:08,079
accelerate development

00:50:06,640 --> 00:50:10,000
we don't want to reinvent the wheel

00:50:08,079 --> 00:50:12,079
every time we want to make sure we use

00:50:10,000 --> 00:50:13,599
the best tools at hand

00:50:12,079 --> 00:50:15,119
now we contribute to a variety of

00:50:13,599 --> 00:50:16,800
cross-industry open source initiatives

00:50:15,119 --> 00:50:19,280
so we've we've done

00:50:16,800 --> 00:50:21,119
pull requests for aerospike um issues

00:50:19,280 --> 00:50:22,559
with farming clients also for something

00:50:21,119 --> 00:50:24,839
like quick fix so it's a

00:50:22,559 --> 00:50:27,040
it's an open source fix gateway

00:50:24,839 --> 00:50:28,160
implementation so we do contribute and

00:50:27,040 --> 00:50:29,119
we also contribute to fitness

00:50:28,160 --> 00:50:31,520
initiatives so

00:50:29,119 --> 00:50:32,960
we have in integration with fdc3 and

00:50:31,520 --> 00:50:34,079
financial objects all those different

00:50:32,960 --> 00:50:37,920
things

00:50:34,079 --> 00:50:40,960
um now that's all i had to say

00:50:37,920 --> 00:50:42,240
um things they say well

00:50:40,960 --> 00:50:44,800
and if you have any questions i'll be

00:50:42,240 --> 00:50:47,119
happy to answer them in the game final

00:50:44,800 --> 00:50:47,119
thank you

00:50:48,160 --> 00:50:53,200
that's great jose thank you so much um

00:50:51,440 --> 00:50:55,680
really really appreciate that it was

00:50:53,200 --> 00:50:58,559
incredibly insightful into the

00:50:55,680 --> 00:50:58,880
into the genesis platform um just want

00:50:58,559 --> 00:51:02,400
to

00:50:58,880 --> 00:51:03,040
before we launch into q a uh once again

00:51:02,400 --> 00:51:06,160
thank

00:51:03,040 --> 00:51:08,960
all of our speakers uh james

00:51:06,160 --> 00:51:09,599
jose and yong chang uh really appreciate

00:51:08,960 --> 00:51:12,880
you

00:51:09,599 --> 00:51:14,160
bringing finos and and your experiences

00:51:12,880 --> 00:51:16,559
with finance to the

00:51:14,160 --> 00:51:17,920
apac community uh it's a growing

00:51:16,559 --> 00:51:20,480
community and um

00:51:17,920 --> 00:51:21,040
you know we we hope to see and events

00:51:20,480 --> 00:51:23,680
like this

00:51:21,040 --> 00:51:24,559
uh help help that uh community flourish

00:51:23,680 --> 00:51:28,000
so

00:51:24,559 --> 00:51:28,480
um we'll look uh we'll look to the next

00:51:28,000 --> 00:51:30,800
one

00:51:28,480 --> 00:51:32,800
uh and and we'll let you know when that

00:51:30,800 --> 00:51:35,520
is uh when that is coming now we do

00:51:32,800 --> 00:51:36,079
definitely have some questions uh first

00:51:35,520 --> 00:51:39,599
one

00:51:36,079 --> 00:51:43,200
is from ethan from cosaic

00:51:39,599 --> 00:51:48,240
for yongsheng and ethan's asked will the

00:51:43,200 --> 00:51:51,200
bdk 2.0 be available in nodejs

00:51:48,240 --> 00:51:52,400
so thanks edan for the question uh the

00:51:51,200 --> 00:51:54,400
way that we have

00:51:52,400 --> 00:51:55,920
uh structured our prioritization process

00:51:54,400 --> 00:51:58,319
is just based on demand

00:51:55,920 --> 00:51:58,960
so java was first because most of our

00:51:58,319 --> 00:52:02,480
customers

00:51:58,960 --> 00:52:05,359
are primarily on java and python.net are

00:52:02,480 --> 00:52:06,400
just in descending order of demand so

00:52:05,359 --> 00:52:08,559
unfortunately

00:52:06,400 --> 00:52:10,240
node.js doesn't have that level of

00:52:08,559 --> 00:52:12,559
demand that we see right now

00:52:10,240 --> 00:52:14,160
it i see it picking up but you know not

00:52:12,559 --> 00:52:15,839
in a production setting there are

00:52:14,160 --> 00:52:17,760
pockets of customers using it but

00:52:15,839 --> 00:52:18,319
unfortunately it's not quite there yet

00:52:17,760 --> 00:52:20,480
so

00:52:18,319 --> 00:52:21,680
it's it will be there eventually but

00:52:20,480 --> 00:52:23,680
after uh

00:52:21,680 --> 00:52:25,280
python and net come to general

00:52:23,680 --> 00:52:28,880
availability so yeah

00:52:25,280 --> 00:52:28,880
stay tuned and thanks for your question

00:52:29,520 --> 00:52:33,359
great thanks hyeongshang jose a question

00:52:32,800 --> 00:52:36,160
for you

00:52:33,359 --> 00:52:37,440
anonymously um this one seems quite

00:52:36,160 --> 00:52:40,160
technical to me but

00:52:37,440 --> 00:52:42,319
um how do you control database schema

00:52:40,160 --> 00:52:45,680
changes across the different database

00:52:42,319 --> 00:52:48,720
back ends right so

00:52:45,680 --> 00:52:49,359
that's a great question um so if you

00:52:48,720 --> 00:52:51,839
notice in

00:52:49,359 --> 00:52:52,720
in the um in my video that we've shown

00:52:51,839 --> 00:52:55,119
before

00:52:52,720 --> 00:52:58,079
i define a very simple database female

00:52:55,119 --> 00:52:59,599
with some fields and then a trait table

00:52:58,079 --> 00:53:01,760
and this is what we call our gpal

00:52:59,599 --> 00:53:02,720
dictionary file so the genesis platform

00:53:01,760 --> 00:53:05,280
abstraction layer

00:53:02,720 --> 00:53:06,000
dictionary files uh and this is like an

00:53:05,280 --> 00:53:08,960
abstraction

00:53:06,000 --> 00:53:10,640
it's a it's a schema abstraction that is

00:53:08,960 --> 00:53:12,000
valid for every single database and the

00:53:10,640 --> 00:53:14,559
way this works is

00:53:12,000 --> 00:53:16,319
we have a tool called remap so it can

00:53:14,559 --> 00:53:18,240
verify the current schema in our

00:53:16,319 --> 00:53:18,960
database layer against the changes in

00:53:18,240 --> 00:53:21,920
the

00:53:18,960 --> 00:53:23,280
dictionary files and then it can apply

00:53:21,920 --> 00:53:25,680
the changes in the data model so

00:53:23,280 --> 00:53:27,280
obviously the data model for aerospike

00:53:25,680 --> 00:53:29,440
it will be completely different than

00:53:27,280 --> 00:53:30,880
foundation to be these two databases

00:53:29,440 --> 00:53:32,880
have different apis they don't have

00:53:30,880 --> 00:53:35,520
relational database

00:53:32,880 --> 00:53:36,960
they don't have any sequel apis so the

00:53:35,520 --> 00:53:38,400
apis look completely different

00:53:36,960 --> 00:53:41,280
data model looks completely different

00:53:38,400 --> 00:53:43,040
they're schema-less but nonetheless

00:53:41,280 --> 00:53:44,480
we have our translation layer so every

00:53:43,040 --> 00:53:46,319
time you call remap it's able to

00:53:44,480 --> 00:53:48,160
understand this abstraction schema

00:53:46,319 --> 00:53:51,440
and do the appropriate changes in the

00:53:48,160 --> 00:53:51,440
relevant background you're using

00:53:54,480 --> 00:53:58,480
that's great thank you james i i can

00:53:56,640 --> 00:53:58,880
tell you're itching to ask a question or

00:53:58,480 --> 00:54:02,720
two

00:53:58,880 --> 00:54:04,800
so um i'll give you a chance to do that

00:54:02,720 --> 00:54:06,960
yeah absolutely uh before i actually ask

00:54:04,800 --> 00:54:08,559
my question i was looking at um alex's

00:54:06,960 --> 00:54:11,280
um question that he just put in

00:54:08,559 --> 00:54:13,680
the q a panel um alex if you can just

00:54:11,280 --> 00:54:16,240
validate who your question is for

00:54:13,680 --> 00:54:18,000
um that'll be awesome um but in the

00:54:16,240 --> 00:54:19,599
meantime i'll ask my question if that's

00:54:18,000 --> 00:54:22,640
okay andrew

00:54:19,599 --> 00:54:22,960
um so yongshang this is this one's to

00:54:22,640 --> 00:54:25,359
you

00:54:22,960 --> 00:54:28,480
so clearly through the demo that you

00:54:25,359 --> 00:54:31,440
gave of um the symphony bbk for java

00:54:28,480 --> 00:54:32,640
um it actually accelerates uh

00:54:31,440 --> 00:54:34,400
engineering

00:54:32,640 --> 00:54:36,480
can you tell us you know how much

00:54:34,400 --> 00:54:37,440
acceleration the project actually gives

00:54:36,480 --> 00:54:38,960
to anybody

00:54:37,440 --> 00:54:40,559
you know who wants to develop in that

00:54:38,960 --> 00:54:43,839
area compared to

00:54:40,559 --> 00:54:46,720
not using the bdk for example

00:54:43,839 --> 00:54:47,599
so if you as we see a lot of customers

00:54:46,720 --> 00:54:49,520
uh

00:54:47,599 --> 00:54:51,359
broadly divided into two camps one of

00:54:49,520 --> 00:54:54,319
them they've

00:54:51,359 --> 00:54:55,920
traditionally used our osdks so that's

00:54:54,319 --> 00:54:59,119
the supported kind of

00:54:55,920 --> 00:55:01,280
format and the other side of things

00:54:59,119 --> 00:55:02,880
they chose to write it from scratch so

00:55:01,280 --> 00:55:06,319
there's a risk that

00:55:02,880 --> 00:55:07,119
things break because as a sas provider

00:55:06,319 --> 00:55:10,240
we roll out

00:55:07,119 --> 00:55:13,040
new features new endpoints and

00:55:10,240 --> 00:55:15,280
things change on a pretty rapid basis

00:55:13,040 --> 00:55:17,280
well rapid for financial services

00:55:15,280 --> 00:55:19,520
and we find that the when you start to

00:55:17,280 --> 00:55:21,200
maintain these things on your own

00:55:19,520 --> 00:55:22,400
issues start to crop up really soon

00:55:21,200 --> 00:55:23,040
especially when you put them in

00:55:22,400 --> 00:55:24,799
production

00:55:23,040 --> 00:55:27,599
and you don't have enough resources to

00:55:24,799 --> 00:55:29,440
maintain them so the bdk 2.0 is really

00:55:27,599 --> 00:55:30,799
a way for us to simplify that approach

00:55:29,440 --> 00:55:32,799
by dividing

00:55:30,799 --> 00:55:34,480
the modules down into different parts

00:55:32,799 --> 00:55:37,200
where we have the core structure

00:55:34,480 --> 00:55:38,640
that is much easier to maintain and that

00:55:37,200 --> 00:55:39,280
part will not change often and then

00:55:38,640 --> 00:55:41,119
we'll have

00:55:39,280 --> 00:55:43,119
different abstractions that you can then

00:55:41,119 --> 00:55:43,839
use to accelerate different things like

00:55:43,119 --> 00:55:46,880
building

00:55:43,839 --> 00:55:48,160
a command handler so if you do do a

00:55:46,880 --> 00:55:51,280
command handle by scratch

00:55:48,160 --> 00:55:54,240
yourself uh by hand today the old sdks

00:55:51,280 --> 00:55:54,960
it might take you an hour maybe two with

00:55:54,240 --> 00:55:56,720
the new

00:55:54,960 --> 00:55:58,640
uh structure it takes you five seconds

00:55:56,720 --> 00:56:00,319
so there are different

00:55:58,640 --> 00:56:02,640
abstractions that we create because we

00:56:00,319 --> 00:56:04,640
know that there are more common

00:56:02,640 --> 00:56:06,319
problems to solve and so we deliberately

00:56:04,640 --> 00:56:08,240
build those into things that are just

00:56:06,319 --> 00:56:08,880
native and out of the box so it enables

00:56:08,240 --> 00:56:10,960
you to

00:56:08,880 --> 00:56:13,280
really accelerate the initial part

00:56:10,960 --> 00:56:16,400
really really quickly

00:56:13,280 --> 00:56:18,400
that's amazing thank you

00:56:16,400 --> 00:56:20,000
um i think we've got time for one more

00:56:18,400 --> 00:56:23,839
question which has come

00:56:20,000 --> 00:56:25,680
through for jose um jose the question is

00:56:23,839 --> 00:56:27,839
from alex lawrence how do you

00:56:25,680 --> 00:56:31,359
model business validations across

00:56:27,839 --> 00:56:34,000
different entities in the system

00:56:31,359 --> 00:56:35,920
that's a good question it's quite a long

00:56:34,000 --> 00:56:39,280
one to answer as well

00:56:35,920 --> 00:56:41,119
i'll do my best so right one minute

00:56:39,280 --> 00:56:44,960
additions

00:56:41,119 --> 00:56:46,400
uh business validations um we

00:56:44,960 --> 00:56:48,160
do have different ways of handling

00:56:46,400 --> 00:56:50,960
validation so

00:56:48,160 --> 00:56:52,160
starting from um an entity perspective

00:56:50,960 --> 00:56:54,400
and i know you ask about

00:56:52,160 --> 00:56:55,760
across different entities but starting

00:56:54,400 --> 00:56:57,119
from an entity perspective when you

00:56:55,760 --> 00:56:59,520
define your trade table

00:56:57,119 --> 00:57:00,880
you can define certain attributes like

00:56:59,520 --> 00:57:02,640
um

00:57:00,880 --> 00:57:04,079
if some viewers are nullable or not

00:57:02,640 --> 00:57:05,680
notable you define their field type you

00:57:04,079 --> 00:57:07,280
define all these different things

00:57:05,680 --> 00:57:09,920
and then you can automatically translate

00:57:07,280 --> 00:57:12,319
those into metadata resources

00:57:09,920 --> 00:57:13,920
that are exposed to the front end so

00:57:12,319 --> 00:57:15,760
when the front end let's say needs to

00:57:13,920 --> 00:57:16,400
insert a new trade you will know exactly

00:57:15,760 --> 00:57:19,359
all the

00:57:16,400 --> 00:57:20,960
types for each field uh all the

00:57:19,359 --> 00:57:22,400
non-notable null level

00:57:20,960 --> 00:57:23,839
all those things if they're mandatory

00:57:22,400 --> 00:57:25,359
they're optional because perhaps you

00:57:23,839 --> 00:57:27,520
have some default values

00:57:25,359 --> 00:57:29,200
um everything is exposed to the front

00:57:27,520 --> 00:57:31,599
end and the front end can

00:57:29,200 --> 00:57:32,559
even automatically inflate the dialog so

00:57:31,599 --> 00:57:35,280
that's

00:57:32,559 --> 00:57:37,200
pretty pretty nice to use now if you

00:57:35,280 --> 00:57:38,559
want to use different entities we have

00:57:37,200 --> 00:57:40,880
different approaches one of them is to

00:57:38,559 --> 00:57:42,480
use an event handler

00:57:40,880 --> 00:57:44,880
which will allow you to do validation

00:57:42,480 --> 00:57:47,040
across multiple entities

00:57:44,880 --> 00:57:48,000
or also the state machine which is

00:57:47,040 --> 00:57:51,119
something

00:57:48,000 --> 00:57:52,400
we want to talk more about very soon we

00:57:51,119 --> 00:57:53,920
need to create some material and some

00:57:52,400 --> 00:57:55,920
videos for it but basically it allows

00:57:53,920 --> 00:57:58,799
you to define

00:57:55,920 --> 00:58:00,559
states state changes across entities

00:57:58,799 --> 00:58:01,200
with certain validation and this can be

00:58:00,559 --> 00:58:03,760
reused

00:58:01,200 --> 00:58:05,920
across the whole system so it's almost

00:58:03,760 --> 00:58:08,799
like a state model definition

00:58:05,920 --> 00:58:10,799
with let's say an order workflow the

00:58:08,799 --> 00:58:13,280
order life cycle new order

00:58:10,799 --> 00:58:14,640
assign order amend order cancel order

00:58:13,280 --> 00:58:15,599
all these different things all the

00:58:14,640 --> 00:58:17,440
different

00:58:15,599 --> 00:58:19,280
requirements to change the state from

00:58:17,440 --> 00:58:20,640
one to another all those different

00:58:19,280 --> 00:58:23,520
things can be handled with a

00:58:20,640 --> 00:58:24,240
very nice to use modeling tool we're

00:58:23,520 --> 00:58:27,280
working on

00:58:24,240 --> 00:58:29,440
and we're always constantly improving um

00:58:27,280 --> 00:58:30,880
and yeah that's pretty much it thanks

00:58:29,440 --> 00:58:33,119
for the question that's a really good

00:58:30,880 --> 00:58:33,119
one

00:58:33,839 --> 00:58:37,920
thanks so much jose i think we're we're

00:58:36,079 --> 00:58:40,640
now officially out of time

00:58:37,920 --> 00:58:41,359
um look once again thanks to all the

00:58:40,640 --> 00:58:44,319
speakers

00:58:41,359 --> 00:58:45,040
thanks also to all the participants um

00:58:44,319 --> 00:58:47,599
this

00:58:45,040 --> 00:58:48,079
is all kind of meaningless without you

00:58:47,599 --> 00:58:50,000
so

00:58:48,079 --> 00:58:51,760
we really appreciate you taking the time

00:58:50,000 --> 00:58:54,960
out to uh to come and learn

00:58:51,760 --> 00:58:56,559
about finos about symphony and about

00:58:54,960 --> 00:58:58,079
genesis this afternoon

00:58:56,559 --> 00:58:59,839
um look forward to seeing you at the

00:58:58,079 --> 00:59:02,880
next meet up and um

00:58:59,839 --> 00:59:06,640
thanks again everyone take care

00:59:02,880 --> 00:59:18,780
thank you everybody all the best

00:59:06,640 --> 00:59:21,819
thank you bye

00:59:18,780 --> 00:59:21,819
[Music]

00:59:24,319 --> 00:59:26,400

YouTube URL: https://www.youtube.com/watch?v=QYqwKG8CpR0


