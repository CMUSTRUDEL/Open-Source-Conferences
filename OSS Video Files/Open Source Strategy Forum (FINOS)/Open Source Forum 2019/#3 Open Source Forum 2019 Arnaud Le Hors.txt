Title: #3 Open Source Forum 2019 Arnaud Le Hors
Publication date: 2020-01-29
Playlist: Open Source Forum 2019
Description: 
	
Captions: 
	00:00:08,470 --> 00:00:14,540
hello everyone thank you for being here

00:00:11,260 --> 00:00:18,020
so I have part of the open technology

00:00:14,540 --> 00:00:21,230
and IBM an open source open standard

00:00:18,020 --> 00:00:22,670
specialist and for the last over the

00:00:21,230 --> 00:00:26,000
years I've worked on many different

00:00:22,670 --> 00:00:28,400
projects primary around web technologies

00:00:26,000 --> 00:00:30,949
and for the last four years I've

00:00:28,400 --> 00:00:32,900
actually worked on hyper ledger and I'm

00:00:30,949 --> 00:00:35,180
currently I'm actually contributed to

00:00:32,900 --> 00:00:36,740
hyper get your fabric which is one of

00:00:35,180 --> 00:00:39,080
the framework developed with an

00:00:36,740 --> 00:00:42,410
aggregator that we'll talk about today

00:00:39,080 --> 00:00:44,210
and then I'm actually elected member of

00:00:42,410 --> 00:00:47,149
the technical steering committee which

00:00:44,210 --> 00:00:48,980
is responsible for overseeing the

00:00:47,149 --> 00:00:51,770
technical direction of the project in

00:00:48,980 --> 00:00:56,000
general and I'm currently elected as the

00:00:51,770 --> 00:00:58,879
chair the TSE so let me talk about

00:00:56,000 --> 00:01:00,890
blockchain first what is blockchain

00:00:58,879 --> 00:01:05,870
exactly about what we're talking about

00:01:00,890 --> 00:01:08,720
here the notion of Ledger's is nothing

00:01:05,870 --> 00:01:12,530
new businesses have been using Ledger's

00:01:08,720 --> 00:01:15,530
for hundred years to basically keep

00:01:12,530 --> 00:01:19,340
track of all the transactions they are

00:01:15,530 --> 00:01:20,900
operating when they transact with their

00:01:19,340 --> 00:01:24,259
business partners whether they're

00:01:20,900 --> 00:01:27,110
suppliers or customers what is new is

00:01:24,259 --> 00:01:28,460
the notion of shared ledger which is a

00:01:27,110 --> 00:01:30,799
new system that we have actually

00:01:28,460 --> 00:01:34,509
introduced around the notion of

00:01:30,799 --> 00:01:37,340
blockchain so if you look at it

00:01:34,509 --> 00:01:41,930
traditionally the way business have been

00:01:37,340 --> 00:01:44,540
keeping track of their information is by

00:01:41,930 --> 00:01:46,880
having different system of records that

00:01:44,540 --> 00:01:47,689
are being maintained independently from

00:01:46,880 --> 00:01:50,960
one another

00:01:47,689 --> 00:01:53,180
each participant's has its own system of

00:01:50,960 --> 00:01:57,259
records and as they transact with their

00:01:53,180 --> 00:02:00,950
customers and suppliers they record new

00:01:57,259 --> 00:02:06,310
transactions this system is inefficient

00:02:00,950 --> 00:02:08,930
and can be expensive to operate

00:02:06,310 --> 00:02:11,810
especially everything is fine until

00:02:08,930 --> 00:02:13,709
something goes wrong when something goes

00:02:11,810 --> 00:02:16,920
wrong then you're facing

00:02:13,709 --> 00:02:19,650
but we call the reconciliation exercise

00:02:16,920 --> 00:02:22,739
where essentially you say Oh something

00:02:19,650 --> 00:02:25,560
didn't go well what happened exactly

00:02:22,739 --> 00:02:28,140
then different participants involved in

00:02:25,560 --> 00:02:30,120
transaction that is a problem we'll have

00:02:28,140 --> 00:02:32,579
to compare essentially their notes

00:02:30,120 --> 00:02:35,519
because you all have a different system

00:02:32,579 --> 00:02:37,469
of Records so each participant is going

00:02:35,519 --> 00:02:40,530
to have their own view of what happened

00:02:37,469 --> 00:02:43,939
and you have to find if something didn't

00:02:40,530 --> 00:02:46,530
go well where the problem comes from and

00:02:43,939 --> 00:02:48,200
reconcile the different views of what

00:02:46,530 --> 00:02:52,169
happened

00:02:48,200 --> 00:02:55,079
so what blockchain brings us is

00:02:52,169 --> 00:02:57,180
essentially a system that and forces

00:02:55,079 --> 00:03:00,389
what I call reconciliation

00:02:57,180 --> 00:03:03,659
up front so now we have a system where

00:03:00,389 --> 00:03:06,409
we can all still our own ledger but the

00:03:03,659 --> 00:03:10,169
system ensures that the different

00:03:06,409 --> 00:03:13,069
instances of the ledger are kept in sync

00:03:10,169 --> 00:03:15,419
with one another and so only

00:03:13,069 --> 00:03:18,720
transactions that have been approved by

00:03:15,419 --> 00:03:22,859
their group as a whole is recorded on

00:03:18,720 --> 00:03:26,699
the ledger once that happens we now have

00:03:22,859 --> 00:03:29,189
a universal source of truth so that we

00:03:26,699 --> 00:03:32,189
don't have to figure out what went wrong

00:03:29,189 --> 00:03:34,560
and compare notes when something goes

00:03:32,189 --> 00:03:37,799
wrong because we can all look at the

00:03:34,560 --> 00:03:40,379
ledger and we all see the same thing it

00:03:37,799 --> 00:03:44,250
provides us with a system based on this

00:03:40,379 --> 00:03:47,579
consensus process which gives us the

00:03:44,250 --> 00:03:50,220
provenance of the the information it

00:03:47,579 --> 00:03:53,310
gives us image ability so you cannot

00:03:50,220 --> 00:03:55,919
unilaterally change the information

00:03:53,310 --> 00:03:59,250
that's stored on the ledger if you have

00:03:55,919 --> 00:04:01,019
to fix correct an error you can do so

00:03:59,250 --> 00:04:04,109
but you will actually submit another

00:04:01,019 --> 00:04:06,329
transaction to undo the first one it's

00:04:04,109 --> 00:04:08,909
very similar to what you see with what

00:04:06,329 --> 00:04:11,020
happens in with your bank account if you

00:04:08,909 --> 00:04:14,290
go to the store and you

00:04:11,020 --> 00:04:15,760
a transaction you return the item you

00:04:14,290 --> 00:04:18,130
don't just delete the previous

00:04:15,760 --> 00:04:20,200
transaction right you actually record

00:04:18,130 --> 00:04:23,320
another transaction that basically and

00:04:20,200 --> 00:04:25,690
do the first one and we have a notion

00:04:23,320 --> 00:04:31,540
and finality so that once it's recorded

00:04:25,690 --> 00:04:33,570
in the system it's there to stay there

00:04:31,540 --> 00:04:37,690
are actually different types of watching

00:04:33,570 --> 00:04:40,540
the funnel point that blockchain

00:04:37,690 --> 00:04:44,500
provides us with is this notion of

00:04:40,540 --> 00:04:47,020
irrefutable proof the system that you

00:04:44,500 --> 00:04:50,110
cannot question we've all agreed to the

00:04:47,020 --> 00:04:52,060
information that's in it up front so

00:04:50,110 --> 00:04:54,460
that you can actually rely on the

00:04:52,060 --> 00:04:57,520
information that's there and the system

00:04:54,460 --> 00:05:00,450
using cryptography will ensure that

00:04:57,520 --> 00:05:03,010
nobody can alter that information

00:05:00,450 --> 00:05:06,280
bitcoin of course is very well-known

00:05:03,010 --> 00:05:09,280
because it's the it's the system that

00:05:06,280 --> 00:05:10,930
actually started it all this is at the

00:05:09,280 --> 00:05:14,710
origin of the whole blockchain

00:05:10,930 --> 00:05:18,430
technology movement however bitcoin is

00:05:14,710 --> 00:05:20,650
only one application of blockchain there

00:05:18,430 --> 00:05:24,580
are many different cryptocurrencies out

00:05:20,650 --> 00:05:25,960
there and usually blockchain people when

00:05:24,580 --> 00:05:28,750
you say blockchain they think about

00:05:25,960 --> 00:05:33,550
cryptocurrency but when you think about

00:05:28,750 --> 00:05:37,390
it Bitcoin was designed to allow the

00:05:33,550 --> 00:05:42,150
exchange of the currency within network

00:05:37,390 --> 00:05:45,280
without intermediaries but fundamentally

00:05:42,150 --> 00:05:48,310
underneath we have a system of Records

00:05:45,280 --> 00:05:51,280
that generally applicable to all kinds

00:05:48,310 --> 00:05:54,280
of assets it doesn't have to be rigid or

00:05:51,280 --> 00:05:57,070
currency and this is what God

00:05:54,280 --> 00:06:00,310
IBM interested in blockchain technology

00:05:57,070 --> 00:06:01,720
is that we realized that essentially

00:06:00,310 --> 00:06:04,930
blockchain is

00:06:01,720 --> 00:06:08,530
type of database which at the very core

00:06:04,930 --> 00:06:13,150
is applicable to stop any kind of

00:06:08,530 --> 00:06:19,630
information so that's highly useful to

00:06:13,150 --> 00:06:24,100
also self industries so what is hype

00:06:19,630 --> 00:06:27,160
religious fabric hype religious fabric

00:06:24,100 --> 00:06:29,500
is an application framework is a

00:06:27,160 --> 00:06:34,750
blockchain framework for the enterprise

00:06:29,500 --> 00:06:36,520
application based on blockchain there

00:06:34,750 --> 00:06:38,560
are many different characteristics that

00:06:36,520 --> 00:06:41,740
makes high quality of fabric different

00:06:38,560 --> 00:06:43,900
from other watching out there when IBM

00:06:41,740 --> 00:06:49,090
started it and then we contributed to

00:06:43,900 --> 00:06:51,100
hyper ledger we didn't stopped by

00:06:49,090 --> 00:06:52,990
designing our wearin to develop our own

00:06:51,100 --> 00:06:55,000
blockchain we actually spent a whole

00:06:52,990 --> 00:06:56,620
year to investigation of all the

00:06:55,000 --> 00:06:59,770
different blockchain technologies that

00:06:56,620 --> 00:07:02,320
were already available out there and we

00:06:59,770 --> 00:07:05,140
had to come to the conclusion that none

00:07:02,320 --> 00:07:09,220
of them relieve meet the needs of the

00:07:05,140 --> 00:07:12,460
enterprise especially when we looked at

00:07:09,220 --> 00:07:16,450
how business functions we found that

00:07:12,460 --> 00:07:18,460
well businesses they like to do work

00:07:16,450 --> 00:07:21,460
they don't work with anonymous

00:07:18,460 --> 00:07:23,080
participants they actually know the

00:07:21,460 --> 00:07:26,320
people they are work with the entities

00:07:23,080 --> 00:07:29,200
they are trading with on the other end

00:07:26,320 --> 00:07:32,010
they like privacy they don't as we want

00:07:29,200 --> 00:07:35,350
to know you know the world to know what

00:07:32,010 --> 00:07:38,229
transactions they have with who this is

00:07:35,350 --> 00:07:41,229
firmly at odd with all the public

00:07:38,229 --> 00:07:46,120
washing networks that exist today which

00:07:41,229 --> 00:07:49,710
are anonymous and actually provide no

00:07:46,120 --> 00:07:49,710
privacy or little fries

00:07:51,199 --> 00:07:58,699
in addition to this public networks of

00:07:55,280 --> 00:08:00,710
the cost of protecting themselves

00:07:58,699 --> 00:08:01,849
against everybody because they don't

00:08:00,710 --> 00:08:04,370
know who they are they're anonymous

00:08:01,849 --> 00:08:05,469
players and this is a very expensive

00:08:04,370 --> 00:08:09,319
process

00:08:05,469 --> 00:08:14,509
proof of work you know coal mining

00:08:09,319 --> 00:08:16,610
depending on animal to call it and we

00:08:14,509 --> 00:08:18,529
have actually found that once you're in

00:08:16,610 --> 00:08:20,300
the permission network where you

00:08:18,529 --> 00:08:23,389
actually know the identity of the

00:08:20,300 --> 00:08:25,490
participants you can better control

00:08:23,389 --> 00:08:28,879
within the network you don't have to

00:08:25,490 --> 00:08:31,669
protect the system as much against

00:08:28,879 --> 00:08:35,149
everybody there other means if somebody

00:08:31,669 --> 00:08:37,880
were to be a bad player you can actually

00:08:35,149 --> 00:08:40,820
get them out of the network because you

00:08:37,880 --> 00:08:43,849
control access you can revoke access and

00:08:40,820 --> 00:08:46,279
then if it's your business partner who

00:08:43,849 --> 00:08:48,800
is really trying to alter the

00:08:46,279 --> 00:08:51,350
information in a way that's illegal

00:08:48,800 --> 00:08:53,120
you can even eventually sue them there

00:08:51,350 --> 00:08:56,420
are legal means because they are known

00:08:53,120 --> 00:08:59,839
entities so we can actually use

00:08:56,420 --> 00:09:02,959
different types of mechanism to come to

00:08:59,839 --> 00:09:06,170
consensus that are actually in a lot

00:09:02,959 --> 00:09:07,910
more efficient and it gives us much

00:09:06,170 --> 00:09:13,010
greater performance which obviously

00:09:07,910 --> 00:09:15,769
business walls then there are different

00:09:13,010 --> 00:09:18,680
aspect related to this notion of smart

00:09:15,769 --> 00:09:22,370
contract smart contract is kind of the

00:09:18,680 --> 00:09:24,680
equivalent of stop procedures in

00:09:22,370 --> 00:09:27,529
traditional databases is the list of

00:09:24,680 --> 00:09:31,040
information piece of program that runs

00:09:27,529 --> 00:09:33,740
on the network that will ensure the

00:09:31,040 --> 00:09:36,290
logic of the application implement the

00:09:33,740 --> 00:09:39,500
logic ensure that the data that is

00:09:36,290 --> 00:09:42,079
submitted to the network is valid and

00:09:39,500 --> 00:09:45,380
that transactions that are being

00:09:42,079 --> 00:09:47,980
submitted acceptable at that particular

00:09:45,380 --> 00:09:55,150
given point in the process

00:09:47,980 --> 00:09:58,000
flow of the application when it comes to

00:09:55,150 --> 00:10:00,460
smart contracts there are different

00:09:58,000 --> 00:10:02,020
approaches out there depending on the

00:10:00,460 --> 00:10:05,080
different technologies you might

00:10:02,020 --> 00:10:07,150
consider in the case of hydrology fabric

00:10:05,080 --> 00:10:09,400
we decided not to constrain the

00:10:07,150 --> 00:10:11,740
application developer we support

00:10:09,400 --> 00:10:14,740
general-purpose programming languages to

00:10:11,740 --> 00:10:17,050
develop the smart contract so hydrogen

00:10:14,740 --> 00:10:20,890
fabric is retaining the gold language

00:10:17,050 --> 00:10:23,350
and so for smart contracts you can write

00:10:20,890 --> 00:10:26,050
you a smart contracting go but we also

00:10:23,350 --> 00:10:32,470
support other different languages we

00:10:26,050 --> 00:10:35,110
support no GS Java and others we

00:10:32,470 --> 00:10:37,810
actually have no binding although built

00:10:35,110 --> 00:10:40,330
in crypto currencies because again when

00:10:37,810 --> 00:10:42,910
we talk to businesses a lot of them are

00:10:40,330 --> 00:10:45,400
actually experienced with it for

00:10:42,910 --> 00:10:47,130
instance all of this is actually a

00:10:45,400 --> 00:10:50,530
distraction to what they are doing

00:10:47,130 --> 00:10:54,340
businesses that run on this the type of

00:10:50,530 --> 00:10:56,860
networks were interested in do not try

00:10:54,340 --> 00:10:59,290
to make money by running a blocking

00:10:56,860 --> 00:11:01,960
Network they are making money by trading

00:10:59,290 --> 00:11:05,140
whatever they are doing their business

00:11:01,960 --> 00:11:08,320
does and the blockchain network is a

00:11:05,140 --> 00:11:11,020
mere means to an end so we actually

00:11:08,320 --> 00:11:12,700
don't have any of this and then I'll

00:11:11,020 --> 00:11:16,660
talk a bit more about this

00:11:12,700 --> 00:11:19,270
we have a new type of processing model

00:11:16,660 --> 00:11:21,430
which is basically execute order

00:11:19,270 --> 00:11:23,560
validate which is fairly different from

00:11:21,430 --> 00:11:26,590
what is typically done in launching

00:11:23,560 --> 00:11:29,680
networks like atmo beacon which actually

00:11:26,590 --> 00:11:32,470
provides us finality and I'll talk a bit

00:11:29,680 --> 00:11:35,170
more about that but last point but high

00:11:32,470 --> 00:11:38,290
potential fabric is that from the very

00:11:35,170 --> 00:11:40,600
beginning we realized that we would not

00:11:38,290 --> 00:11:42,730
be able to develop an application

00:11:40,600 --> 00:11:46,060
framework that would actually work for

00:11:42,730 --> 00:11:50,380
all use cases so we developed one that

00:11:46,060 --> 00:11:52,960
was highly flexible and modular so that

00:11:50,380 --> 00:11:54,170
you can actually change things and adapt

00:11:52,960 --> 00:11:57,170
things based on

00:11:54,170 --> 00:11:59,570
case so for instance if you think of the

00:11:57,170 --> 00:12:02,089
consensus algorithm this is the process

00:11:59,570 --> 00:12:04,310
by which the network has to come to

00:12:02,089 --> 00:12:05,899
agreement on the order of the

00:12:04,310 --> 00:12:08,240
transaction that have been submitted

00:12:05,899 --> 00:12:10,040
because you know peer-to-peer network

00:12:08,240 --> 00:12:12,079
and transactions come from different

00:12:10,040 --> 00:12:13,760
parts of the network and that's all what

00:12:12,079 --> 00:12:18,199
you need to agree what is the exact

00:12:13,760 --> 00:12:20,329
order this is a research field there are

00:12:18,199 --> 00:12:22,820
people who learn to be actively working

00:12:20,329 --> 00:12:24,410
on coming up with new algorithm that are

00:12:22,820 --> 00:12:27,769
more efficient that have different

00:12:24,410 --> 00:12:30,829
characteristics so we actually made the

00:12:27,769 --> 00:12:32,810
consensus part of the process pluggable

00:12:30,829 --> 00:12:35,720
so that you can actually change the

00:12:32,810 --> 00:12:36,949
consensus algorithm if you like if there

00:12:35,720 --> 00:12:40,970
are new techniques that are available

00:12:36,949 --> 00:12:42,949
and that's one of the examples we I

00:12:40,970 --> 00:12:44,990
talked about the programming languages

00:12:42,949 --> 00:12:46,790
we actually have a sheet layer we have

00:12:44,990 --> 00:12:49,220
different it's details available in

00:12:46,790 --> 00:12:51,620
different programming languages we can

00:12:49,220 --> 00:12:57,050
use different programming languages for

00:12:51,620 --> 00:12:59,899
the small contractor as well and so so

00:12:57,050 --> 00:13:02,600
hyper laser fabric is one of the

00:12:59,899 --> 00:13:05,240
projects the Linux Foundation as it's

00:13:02,600 --> 00:13:08,269
been talked about earlier I'm not going

00:13:05,240 --> 00:13:11,390
to say much more about this it's must be

00:13:08,269 --> 00:13:16,130
to say that the project just got started

00:13:11,390 --> 00:13:19,880
four years ago and it started in 2016 it

00:13:16,130 --> 00:13:23,649
was announced late 2015 instead of 2016

00:13:19,880 --> 00:13:28,459
and it's been one of the fastest drawing

00:13:23,649 --> 00:13:30,529
project in the Linux Foundation Jim is

00:13:28,459 --> 00:13:33,260
no longer there I have this work

00:13:30,529 --> 00:13:35,870
we're not offered 350 members anymore

00:13:33,260 --> 00:13:38,000
because you know there was a big hype in

00:13:35,870 --> 00:13:41,690
the blogging space as you probably know

00:13:38,000 --> 00:13:43,339
and we did go over 300 for a while it

00:13:41,690 --> 00:13:48,190
has come down a little bit so we're

00:13:43,339 --> 00:13:48,190
closer to 280 now which he made of like

00:13:49,020 --> 00:13:55,840
but it remains very good high furniture

00:13:52,450 --> 00:13:58,630
fabric is actually hosted by all the

00:13:55,840 --> 00:14:04,030
major cloud providers today so if you go

00:13:58,630 --> 00:14:07,330
to Amazon's AWS or if you go to Azure

00:14:04,030 --> 00:14:09,370
and Microsoft cloud you will find fabric

00:14:07,330 --> 00:14:14,830
as a service of the service catalogs

00:14:09,370 --> 00:14:17,170
available so what are some of the

00:14:14,830 --> 00:14:18,910
application that actually are being used

00:14:17,170 --> 00:14:20,740
today that we have developed with high

00:14:18,910 --> 00:14:24,160
quality fabric I'll just give you two

00:14:20,740 --> 00:14:27,040
examples there's a system that actually

00:14:24,160 --> 00:14:30,280
on production today so we're no longer

00:14:27,040 --> 00:14:33,310
talking about playing with this and

00:14:30,280 --> 00:14:36,400
trying to do proof of concept so tread

00:14:33,310 --> 00:14:41,020
lands is the platform that IBM started

00:14:36,400 --> 00:14:44,310
with mask mask is the major you know

00:14:41,020 --> 00:14:49,480
it's the biggest shipping container

00:14:44,310 --> 00:14:52,180
company in the world and the the

00:14:49,480 --> 00:14:54,040
challenge they have is not only to make

00:14:52,180 --> 00:14:56,920
sure that the container gets shipped

00:14:54,040 --> 00:14:59,110
from point A to point B but they also

00:14:56,920 --> 00:15:01,660
have to deal with the paper trail

00:14:59,110 --> 00:15:05,650
associated with the container which

00:15:01,660 --> 00:15:07,390
poses its own drought obviously shipping

00:15:05,650 --> 00:15:10,180
a container from one point to another

00:15:07,390 --> 00:15:14,170
around the world when actually require

00:15:10,180 --> 00:15:16,660
up to 430 different signatures and steps

00:15:14,170 --> 00:15:19,990
from different parties along the way

00:15:16,660 --> 00:15:25,600
what we're talking about is you know

00:15:19,990 --> 00:15:29,020
people that port authorities customs tax

00:15:25,600 --> 00:15:31,390
authorities insurance companies there

00:15:29,020 --> 00:15:34,210
are different players all of the way who

00:15:31,390 --> 00:15:37,120
are going to have to induce and

00:15:34,210 --> 00:15:40,180
information what we do with trade lines

00:15:37,120 --> 00:15:42,340
is that when the containers thoughts we

00:15:40,180 --> 00:15:44,980
can identify it container by an ID

00:15:42,340 --> 00:15:47,950
there's a record that get started on the

00:15:44,980 --> 00:15:51,290
blockchain and all the information all

00:15:47,950 --> 00:15:53,660
the signatures can be added associated

00:15:51,290 --> 00:15:55,790
that ID so they come in the form of new

00:15:53,660 --> 00:15:59,690
transaction gets submitted to the

00:15:55,790 --> 00:16:02,480
blockchain and at any given point you

00:15:59,690 --> 00:16:04,550
can query the blockchain and you find

00:16:02,480 --> 00:16:08,420
for that container all the information

00:16:04,550 --> 00:16:12,019
associated with this container this

00:16:08,420 --> 00:16:14,690
obviously increases speed in terms of

00:16:12,019 --> 00:16:19,639
access to the information transparency

00:16:14,690 --> 00:16:22,730
audit activity and it actually allows

00:16:19,639 --> 00:16:25,100
everybody to access the information and

00:16:22,730 --> 00:16:26,810
that's a key aspect that I will take a

00:16:25,100 --> 00:16:29,540
little bit of time talk about right now

00:16:26,810 --> 00:16:31,579
is that you know people say well I could

00:16:29,540 --> 00:16:34,190
have done that with the traditional

00:16:31,579 --> 00:16:38,870
centralized database the answer is yes

00:16:34,190 --> 00:16:41,779
the problem is if masks were to host the

00:16:38,870 --> 00:16:44,149
database they would give a proper you

00:16:41,779 --> 00:16:46,670
know an interface for all the different

00:16:44,149 --> 00:16:50,300
agencies to access the database through

00:16:46,670 --> 00:16:52,279
their web interface nobody would be able

00:16:50,300 --> 00:16:54,410
to completely trust masks they would

00:16:52,279 --> 00:16:56,709
have to trust math not to alter the

00:16:54,410 --> 00:17:00,260
information you need you need a terror

00:16:56,709 --> 00:17:03,470
with the blockchain network we know that

00:17:00,260 --> 00:17:06,020
neither me nor any of the other

00:17:03,470 --> 00:17:09,890
participants in network can do that

00:17:06,020 --> 00:17:12,530
that's the added value of blockchain is

00:17:09,890 --> 00:17:15,319
that you actually share the control with

00:17:12,530 --> 00:17:20,720
all the network so no single party has

00:17:15,319 --> 00:17:25,069
full control of the information another

00:17:20,720 --> 00:17:27,860
example is called again food trust it's

00:17:25,069 --> 00:17:30,890
a similar idea but in the in the in the

00:17:27,860 --> 00:17:33,679
food industry the idea is that we can

00:17:30,890 --> 00:17:36,320
trace the provenance of all the

00:17:33,679 --> 00:17:38,600
different food items across the supply

00:17:36,320 --> 00:17:41,120
chain so you take the example of

00:17:38,600 --> 00:17:43,730
chickens we can actually attack the

00:17:41,120 --> 00:17:46,190
chicken at the farm record where that

00:17:43,730 --> 00:17:47,780
chicken comes from and then we're going

00:17:46,190 --> 00:17:49,490
to be able to trace that chicken

00:17:47,780 --> 00:17:51,230
throughout the supply chain all the

00:17:49,490 --> 00:17:54,159
distribution

00:17:51,230 --> 00:17:58,779
all the way to the shelf in the store

00:17:54,159 --> 00:18:02,269
when there is food contamination today

00:17:58,779 --> 00:18:05,029
they have to do a recall they actually

00:18:02,269 --> 00:18:06,559
don't know which chicken on the shelves

00:18:05,029 --> 00:18:09,200
come from the form that has a

00:18:06,559 --> 00:18:11,990
contamination so what do they do they

00:18:09,200 --> 00:18:15,590
take all the chicken out and they waste

00:18:11,990 --> 00:18:17,990
a lot of food nobody gains from this not

00:18:15,590 --> 00:18:20,840
even the competitors because when

00:18:17,990 --> 00:18:24,700
there's food contamination on what type

00:18:20,840 --> 00:18:27,529
of product people don't just select

00:18:24,700 --> 00:18:30,799
other competitors products they just

00:18:27,529 --> 00:18:33,820
stop buying this kind of food so there

00:18:30,799 --> 00:18:36,679
is a huge incentive to add transparency

00:18:33,820 --> 00:18:39,049
by having this kind of system we can

00:18:36,679 --> 00:18:41,600
identify which chicken on which shelf

00:18:39,049 --> 00:18:44,120
have the the chicken from the farm

00:18:41,600 --> 00:18:47,539
that's contaminated and obviously this

00:18:44,120 --> 00:18:51,409
you know this applies to all sort of

00:18:47,539 --> 00:18:54,169
food items it started so Walmart is a

00:18:51,409 --> 00:18:56,659
big player of this they started with the

00:18:54,169 --> 00:18:59,990
prototype we have now grown into a

00:18:56,659 --> 00:19:02,360
full-blown production system and all the

00:18:59,990 --> 00:19:05,450
major players actually participating in

00:19:02,360 --> 00:19:08,360
the in the platform Kafue has also

00:19:05,450 --> 00:19:11,090
adopted the system they actually did an

00:19:08,360 --> 00:19:13,549
experiment and added the QR code on the

00:19:11,090 --> 00:19:16,129
product in the shelf so you can actually

00:19:13,549 --> 00:19:18,320
scan the QR code with your phone and you

00:19:16,129 --> 00:19:21,820
can see the provenance of the item and

00:19:18,320 --> 00:19:24,590
they actually saw an increase in sales

00:19:21,820 --> 00:19:27,049
immediately because customers nowadays

00:19:24,590 --> 00:19:29,840
most more transparency they want to know

00:19:27,049 --> 00:19:30,620
the provenance of what they eat for a

00:19:29,840 --> 00:19:34,309
good reason

00:19:30,620 --> 00:19:36,769
and so this this'll actually motivated

00:19:34,309 --> 00:19:40,580
them they are the plan to throughout the

00:19:36,769 --> 00:19:45,649
next year to add all the other products

00:19:40,580 --> 00:19:47,659
in their store so let me now give you a

00:19:45,649 --> 00:19:49,549
little bit more insight as to what's in

00:19:47,659 --> 00:19:51,130
fabric and I'm not going to get too much

00:19:49,549 --> 00:19:54,799
into the detail

00:19:51,130 --> 00:19:57,470
today's today but I want to highlight

00:19:54,799 --> 00:19:59,870
some of the key components of what the

00:19:57,470 --> 00:20:03,740
IED religion fabric architecture is made

00:19:59,870 --> 00:20:06,320
of so at the top first you have

00:20:03,740 --> 00:20:09,679
membership services this is a key

00:20:06,320 --> 00:20:12,830
element in permission networks obviously

00:20:09,679 --> 00:20:15,860
where we have to control the access to

00:20:12,830 --> 00:20:18,950
network so people participants have to

00:20:15,860 --> 00:20:21,200
be identified we have this notion of

00:20:18,950 --> 00:20:23,630
membership services when you start from

00:20:21,200 --> 00:20:26,000
you first go and enroll with the

00:20:23,630 --> 00:20:27,530
membership services you gets an ID and

00:20:26,000 --> 00:20:30,470
with this you're going to be able to

00:20:27,530 --> 00:20:33,350
participate in the network we have

00:20:30,470 --> 00:20:36,110
designed membership services in fabric

00:20:33,350 --> 00:20:37,790
so it actually integrates with legacy

00:20:36,110 --> 00:20:40,160
systems so you don't have to create new

00:20:37,790 --> 00:20:42,320
idea if you have an LDAP server in your

00:20:40,160 --> 00:20:46,190
in your system you're going to be able

00:20:42,320 --> 00:20:48,110
to leverage this then on the left side

00:20:46,190 --> 00:20:50,350
we have the application which connects

00:20:48,110 --> 00:20:53,120
to the network through some node and

00:20:50,350 --> 00:20:55,520
through an SDK we have different

00:20:53,120 --> 00:20:58,340
indicator variable different languages

00:20:55,520 --> 00:21:01,549
no GS is the most popular one but there

00:20:58,340 --> 00:21:09,230
is one in Golders were Python and Java

00:21:01,549 --> 00:21:12,290
and then one particularity of fabric

00:21:09,230 --> 00:21:15,620
that I touched on earlier which touches

00:21:12,290 --> 00:21:18,860
on this notion of the process flow is

00:21:15,620 --> 00:21:22,730
the fact that we actually split the node

00:21:18,860 --> 00:21:25,940
in two parts there is a part that only

00:21:22,730 --> 00:21:28,370
focuses on the truth of the sorting of

00:21:25,940 --> 00:21:30,860
the transactions which we call the

00:21:28,370 --> 00:21:32,660
ordering service the ordering service

00:21:30,860 --> 00:21:33,559
doesn't care about the nature of the

00:21:32,660 --> 00:21:35,960
transaction

00:21:33,559 --> 00:21:37,640
all he cares about is listening to all

00:21:35,960 --> 00:21:40,520
the transaction that are submitted to

00:21:37,640 --> 00:21:44,570
the network and through a through

00:21:40,520 --> 00:21:46,370
consensus process agree on the order of

00:21:44,570 --> 00:21:49,309
the transaction this is where the new

00:21:46,370 --> 00:21:50,900
block is being created and once the

00:21:49,309 --> 00:21:52,790
block is created it's being distributed

00:21:50,900 --> 00:21:55,370
to the whole channel to the whole

00:21:52,790 --> 00:21:58,400
network and you guarantees that there is

00:21:55,370 --> 00:21:58,970
only one order for everybody and that's

00:21:58,400 --> 00:22:03,020
final

00:21:58,970 --> 00:22:06,260
and then there is the other part of the

00:22:03,020 --> 00:22:10,120
that the application talks to which has

00:22:06,260 --> 00:22:14,900
to do with the endorsement so that's

00:22:10,120 --> 00:22:18,200
when you start to transaction you first

00:22:14,900 --> 00:22:21,290
seek endorsement by different nodes and

00:22:18,200 --> 00:22:22,970
how many this is all application

00:22:21,290 --> 00:22:25,160
specific there's the policy language

00:22:22,970 --> 00:22:27,470
that defines who you need to have

00:22:25,160 --> 00:22:29,870
endorsement from and once you have

00:22:27,470 --> 00:22:32,240
another endorsement it actually runs the

00:22:29,870 --> 00:22:34,700
chain code the smart contract which

00:22:32,240 --> 00:22:39,290
events essentially is a simulation of

00:22:34,700 --> 00:22:42,200
the transaction once you have received

00:22:39,290 --> 00:22:45,110
enough track enough endorsement you can

00:22:42,200 --> 00:22:47,780
then send it to the ordering system the

00:22:45,110 --> 00:22:52,040
ordering service cast the new block and

00:22:47,780 --> 00:22:57,050
send it to when the the ordering has

00:22:52,040 --> 00:23:00,410
been done the node actually will get the

00:22:57,050 --> 00:23:02,990
new block and committed to the letter

00:23:00,410 --> 00:23:04,670
this validation process they are not

00:23:02,990 --> 00:23:06,680
going to get into detail but there's a

00:23:04,670 --> 00:23:08,780
final check thing and then there are

00:23:06,680 --> 00:23:10,910
events being sent out to the network so

00:23:08,780 --> 00:23:14,450
that everybody knows what happened so

00:23:10,910 --> 00:23:16,330
you can resell and weather every time

00:23:14,450 --> 00:23:20,830
there is a new block you will be

00:23:16,330 --> 00:23:24,320
informed these are the main aspects of

00:23:20,830 --> 00:23:26,270
the system from an application developer

00:23:24,320 --> 00:23:29,270
though you don't have to worry about all

00:23:26,270 --> 00:23:31,550
these details essentially there are two

00:23:29,270 --> 00:23:33,530
parts that you need to worry about as an

00:23:31,550 --> 00:23:36,470
application developer there's the

00:23:33,530 --> 00:23:39,140
application obviously the application

00:23:36,470 --> 00:23:41,990
front and on the back end

00:23:39,140 --> 00:23:44,080
again the smart contract these are the

00:23:41,990 --> 00:23:46,760
two pieces that you need to worry about

00:23:44,080 --> 00:23:51,410
from the smart contract point of view

00:23:46,760 --> 00:23:53,330
you know we don't have as a developer we

00:23:51,410 --> 00:23:55,580
don't have to deal with all the details

00:23:53,330 --> 00:23:58,010
of the blockchain hyper ledger fabric

00:23:55,580 --> 00:24:01,400
actually does the handling of the

00:23:58,010 --> 00:24:04,840
blockchain rule itself what the

00:24:01,400 --> 00:24:07,820
application developer only does it's

00:24:04,840 --> 00:24:10,000
dealing with the world state through

00:24:07,820 --> 00:24:14,920
simple operations like

00:24:10,000 --> 00:24:17,440
put and delete possible and how this

00:24:14,920 --> 00:24:20,080
translate into transaction that need to

00:24:17,440 --> 00:24:22,210
be said no that is hidden from the

00:24:20,080 --> 00:24:23,970
transit from the application developer

00:24:22,210 --> 00:24:27,430
you don't have to worry about this okay

00:24:23,970 --> 00:24:29,860
and obviously you do put and you know it

00:24:27,430 --> 00:24:32,230
doesn't actually write it because it's

00:24:29,860 --> 00:24:34,300
immutable and it will actually go

00:24:32,230 --> 00:24:36,520
through the whole consensus process and

00:24:34,300 --> 00:24:38,260
all that but it's from an application

00:24:36,520 --> 00:24:45,670
developer it's as if you were just

00:24:38,260 --> 00:24:49,470
writing to a local database so we have

00:24:45,670 --> 00:24:52,930
now been four years into the project and

00:24:49,470 --> 00:24:55,930
we have actually adopted a monthly

00:24:52,930 --> 00:24:58,330
release cycle we have a release schedule

00:24:55,930 --> 00:25:01,150
where every month we release a new

00:24:58,330 --> 00:25:04,030
version there are minor releases

00:25:01,150 --> 00:25:06,700
throughout the year and we had some

00:25:04,030 --> 00:25:08,650
major ones that I will highlight one

00:25:06,700 --> 00:25:11,050
point four was released earlier this

00:25:08,650 --> 00:25:13,360
year the very beginning of the year and

00:25:11,050 --> 00:25:15,580
it was the first long-term support

00:25:13,360 --> 00:25:18,180
release so it's worth mentioning and

00:25:15,580 --> 00:25:22,930
we're in the process of finally

00:25:18,180 --> 00:25:26,710
finalizing version 2-0 we actually just

00:25:22,930 --> 00:25:31,600
tagged version to 0 beta last week and

00:25:26,710 --> 00:25:34,420
the goal is to a fabric 2-0 final

00:25:31,600 --> 00:25:37,090
release published earlier in 2012

00:25:34,420 --> 00:25:41,020
probably earlier in January after the

00:25:37,090 --> 00:25:43,180
holidays the one thing I do want to

00:25:41,020 --> 00:25:45,700
highlight is the kind of changes we're

00:25:43,180 --> 00:25:49,120
actually being made that we have been

00:25:45,700 --> 00:25:52,360
making to the system they focus on some

00:25:49,120 --> 00:25:54,610
key aspect privacy and inshallah we

00:25:52,360 --> 00:25:56,680
study some assumptions and over the

00:25:54,610 --> 00:25:58,870
years we realized as we were actually

00:25:56,680 --> 00:26:02,910
engaging with customers in real

00:25:58,870 --> 00:26:02,910
application we had to make more

00:26:03,030 --> 00:26:07,890
decentralization we have more and more

00:26:05,490 --> 00:26:10,140
decentralizes aspects to it

00:26:07,890 --> 00:26:11,610
serviceability so initially

00:26:10,140 --> 00:26:13,290
for instance if you had to make a chain

00:26:11,610 --> 00:26:15,810
you would have to shut down the system

00:26:13,290 --> 00:26:17,100
and then you know make the change and we

00:26:15,810 --> 00:26:18,780
stopped that there's a working

00:26:17,100 --> 00:26:22,230
prediction now it's much more dynamic

00:26:18,780 --> 00:26:24,900
there is a lot less relevant information

00:26:22,230 --> 00:26:27,090
that's needed performance and

00:26:24,900 --> 00:26:27,960
scalability we keep making improvements

00:26:27,090 --> 00:26:31,050
in that regard

00:26:27,960 --> 00:26:33,000
and ease of use it used to be a bit

00:26:31,050 --> 00:26:35,280
rough and it's getting easier to use

00:26:33,000 --> 00:26:36,240
even from an application one of you or

00:26:35,280 --> 00:26:40,070
former nato

00:26:36,240 --> 00:26:42,360
operative what is the idea of offering

00:26:40,070 --> 00:26:44,460
why are we doing this in open-source

00:26:42,360 --> 00:26:46,920
where do we make month well at some

00:26:44,460 --> 00:26:49,800
point we need to make money so the idea

00:26:46,920 --> 00:26:51,840
blockchain offering basically builds a

00:26:49,800 --> 00:26:54,630
hyper edge of fabric we don't have our

00:26:51,840 --> 00:26:56,760
own version a very different version we

00:26:54,630 --> 00:26:58,740
use this very same idea to a fabric

00:26:56,760 --> 00:27:01,800
that's available from the Linux

00:26:58,740 --> 00:27:04,380
Foundation but what we do is we have a

00:27:01,800 --> 00:27:06,480
set of tools that will that we have

00:27:04,380 --> 00:27:09,390
developed and are available on top of

00:27:06,480 --> 00:27:13,160
fabric that will allow you to develop

00:27:09,390 --> 00:27:16,950
your application deploy your network and

00:27:13,160 --> 00:27:21,240
managing network and we do that in a

00:27:16,950 --> 00:27:23,790
completely hybrid cloud way so you can

00:27:21,240 --> 00:27:26,070
deploy to any cloud providers you want

00:27:23,790 --> 00:27:28,890
the different parts of your network and

00:27:26,070 --> 00:27:33,710
run on different networks that all works

00:27:28,890 --> 00:27:36,330
and the operator will have consoled

00:27:33,710 --> 00:27:38,520
administrative consoles that provide

00:27:36,330 --> 00:27:41,070
seamless view of all the network

00:27:38,520 --> 00:27:42,600
independently of where they run you will

00:27:41,070 --> 00:27:47,310
see everything as if they were all

00:27:42,600 --> 00:27:49,140
running in the same data center and it

00:27:47,310 --> 00:27:51,450
can also be on premises so if you have

00:27:49,140 --> 00:27:54,420
computers already like if you're banking

00:27:51,450 --> 00:27:57,150
you've got a few of those you know multi

00:27:54,420 --> 00:28:01,250
million mainframes you can also leverage

00:27:57,150 --> 00:28:06,890
those and finally I will end with this

00:28:01,250 --> 00:28:10,580
plug for the IBM watching extension for

00:28:06,890 --> 00:28:13,580
Visual Studio code the video studio code

00:28:10,580 --> 00:28:17,150
is a freely available tool developer

00:28:13,580 --> 00:28:19,280
environment and we have actually made an

00:28:17,150 --> 00:28:22,070
extension that's also freely available

00:28:19,280 --> 00:28:26,140
and it allows you to actually develop

00:28:22,070 --> 00:28:29,000
your application and your smart contract

00:28:26,140 --> 00:28:33,230
locally on your machine it will actually

00:28:29,000 --> 00:28:35,990
run a very small hyper little fabric

00:28:33,230 --> 00:28:38,120
blocking network very local to your

00:28:35,990 --> 00:28:40,549
machine you can do everything locally

00:28:38,120 --> 00:28:42,919
you can debug your smart contract and

00:28:40,549 --> 00:28:45,799
once you're ready you can then deploy it

00:28:42,919 --> 00:28:48,980
you can do all this independently away I

00:28:45,799 --> 00:28:51,230
get marching platform all this is freely

00:28:48,980 --> 00:28:53,419
available and it's a good way to get

00:28:51,230 --> 00:28:56,780
started once you're ready and you'll

00:28:53,419 --> 00:28:59,090
figure you want to develop and deploy to

00:28:56,780 --> 00:29:02,390
a network then you can connect to the

00:28:59,090 --> 00:29:05,900
IBM launching platform and connect to do

00:29:02,390 --> 00:29:10,299
your deployment so this is the end of my

00:29:05,900 --> 00:29:10,299

YouTube URL: https://www.youtube.com/watch?v=n9XHckKJH8A


