Title: #7 Open Source Forum 2019 Dan Lorenc
Publication date: 2020-01-29
Playlist: Open Source Forum 2019
Description: 
	
Captions: 
	00:00:09,160 --> 00:00:13,700
thank you for traveling today my name is

00:00:11,840 --> 00:00:14,059
Dan Lawrence a software engineer at

00:00:13,700 --> 00:00:15,799
Google

00:00:14,059 --> 00:00:17,540
and they're about seven years and I've

00:00:15,799 --> 00:00:19,700
been working in the cloud platform as a

00:00:17,540 --> 00:00:23,990
service container and kubernetes space

00:00:19,700 --> 00:00:26,119
it's been very exciting today we're here

00:00:23,990 --> 00:00:27,710
to talk about standardization and

00:00:26,119 --> 00:00:28,580
software delivery you talking about

00:00:27,710 --> 00:00:30,470
continuous integration continuous

00:00:28,580 --> 00:00:32,449
delivery projects that we've been

00:00:30,470 --> 00:00:34,250
working on in the CD foundation where I

00:00:32,449 --> 00:00:35,930
serve on a technical oversight committee

00:00:34,250 --> 00:00:38,930
I'll be talking about the tectonic

00:00:35,930 --> 00:00:41,180
project specifically gonna be turning

00:00:38,930 --> 00:00:45,710
out some examples and security motivate

00:00:41,180 --> 00:00:47,600
the talk so a certain supply chain

00:00:45,710 --> 00:00:48,920
security talked about supply chain a

00:00:47,600 --> 00:00:51,320
couple different times and a couple

00:00:48,920 --> 00:00:53,920
other cars today but supply chain is

00:00:51,320 --> 00:00:57,440
your software and why standards matter

00:00:53,920 --> 00:00:59,420
so this example your target a little

00:00:57,440 --> 00:01:01,489
quotes so everybody remembers that this

00:00:59,420 --> 00:01:03,799
clip art pieces here at the top is

00:01:01,489 --> 00:01:05,239
before the cloud and then Dropbox and

00:01:03,799 --> 00:01:09,080
Google Drive this is how people use to

00:01:05,239 --> 00:01:10,220
transfer files between computers if you

00:01:09,080 --> 00:01:13,250
found one of these on the sidewalk

00:01:10,220 --> 00:01:14,780
outside of your work would you take this

00:01:13,250 --> 00:01:18,200
inside and plug it into your computers

00:01:14,780 --> 00:01:19,850
and open up files and it takes any

00:01:18,200 --> 00:01:22,070
binaries and programs on there and run

00:01:19,850 --> 00:01:24,079
them I hope that everyone's security

00:01:22,070 --> 00:01:25,310
teams have thought not to do things like

00:01:24,079 --> 00:01:26,509
this you have no idea what's on that

00:01:25,310 --> 00:01:28,249
device you have no idea what those

00:01:26,509 --> 00:01:30,229
programs are of course we wouldn't want

00:01:28,249 --> 00:01:31,820
to run those and if you happen to work

00:01:30,229 --> 00:01:33,380
in a data center or in production

00:01:31,820 --> 00:01:35,420
workflows really hope that you don't

00:01:33,380 --> 00:01:37,189
take this inside your datacenter and run

00:01:35,420 --> 00:01:38,829
experience you found out you'd be

00:01:37,189 --> 00:01:41,329
exposed to all of your trusted user data

00:01:38,829 --> 00:01:43,369
all here in a commercial sense but we're

00:01:41,329 --> 00:01:45,049
close to code that you have no idea what

00:01:43,369 --> 00:01:47,689
it does you know I wrote it it could

00:01:45,049 --> 00:01:49,460
actually use your data it delete data

00:01:47,689 --> 00:01:50,329
and get ripped up Francie there's a

00:01:49,460 --> 00:01:51,390
whole bunch of things that can happen

00:01:50,329 --> 00:01:53,340
here

00:01:51,390 --> 00:01:57,420
yeah just take one they stand inside

00:01:53,340 --> 00:01:59,040
programs you find on that seems a little

00:01:57,420 --> 00:02:02,270
bit silly though so let's compare this

00:01:59,040 --> 00:02:04,650
to normal software development practices

00:02:02,270 --> 00:02:08,009
say you're gonna write it is simple with

00:02:04,650 --> 00:02:09,390
an HTTP web application and nodejs for

00:02:08,009 --> 00:02:12,480
speed went through is install a package

00:02:09,390 --> 00:02:15,120
it's Brittany's Express convoy our tech

00:02:12,480 --> 00:02:17,190
that cannot express see that described

00:02:15,120 --> 00:02:19,830
about 50 different packages from

00:02:17,190 --> 00:02:21,420
thirtysomething maintainer x' installs

00:02:19,830 --> 00:02:22,920
those next to our code before we even

00:02:21,420 --> 00:02:25,290
start already anything I think this is

00:02:22,920 --> 00:02:26,820
something like 5,000 lines of code that

00:02:25,290 --> 00:02:28,650
we have no idea where it came from

00:02:26,820 --> 00:02:30,720
that's really isn't that much different

00:02:28,650 --> 00:02:32,370
in taking a USB flash drive into your

00:02:30,720 --> 00:02:35,850
datacenter and even get access to

00:02:32,370 --> 00:02:39,900
prudential trusted user data it's pretty

00:02:35,850 --> 00:02:41,310
spirited without being able to audit all

00:02:39,900 --> 00:02:43,260
these lines of software must be

00:02:41,310 --> 00:02:45,480
realistic nobody s plan to look it for

00:02:43,260 --> 00:02:48,380
50,000 lines of open-source code we have

00:02:45,480 --> 00:02:48,380
no idea what's going on there

00:02:48,739 --> 00:02:52,709
so basically open source under attack

00:02:51,120 --> 00:02:55,440
these are called supply chain attacks

00:02:52,709 --> 00:02:57,480
for people to get coded into you through

00:02:55,440 --> 00:02:58,709
third party dependencies and this isn't

00:02:57,480 --> 00:02:59,760
a contrived example I'm not trying to

00:02:58,709 --> 00:03:01,530
scare people for no reason

00:02:59,760 --> 00:03:04,860
really taxes on this are happening every

00:03:01,530 --> 00:03:08,130
day just last week or two weeks ago now

00:03:04,860 --> 00:03:09,690
the CD network or the 17 packages we're

00:03:08,130 --> 00:03:12,750
taking down from a pipe lack the Python

00:03:09,690 --> 00:03:15,420
package index this is a pretty clever

00:03:12,750 --> 00:03:17,600
two-part supply chain attack the first

00:03:15,420 --> 00:03:19,739
one used a technique called typo spies

00:03:17,600 --> 00:03:21,600
there's a library called jellyfish

00:03:19,739 --> 00:03:23,220
that's pretty common in Python and an

00:03:21,600 --> 00:03:24,900
attacker uploaded another version of

00:03:23,220 --> 00:03:26,730
that package where one of the elves was

00:03:24,900 --> 00:03:27,989
switched for a woman or an eye and

00:03:26,730 --> 00:03:29,100
character or something like that so it's

00:03:27,989 --> 00:03:30,080
very hard to notice unless you would

00:03:29,100 --> 00:03:32,790
carefully

00:03:30,080 --> 00:03:34,049
responding attacks are nothing new they

00:03:32,790 --> 00:03:35,370
happen all the time they basically rely

00:03:34,049 --> 00:03:37,290
on people to copy the pay something

00:03:35,370 --> 00:03:40,200
without looking at it we're gonna make a

00:03:37,290 --> 00:03:41,519
small aerial time you actually know if

00:03:40,200 --> 00:03:42,000
you don't miss cut one of these commands

00:03:41,519 --> 00:03:44,340
there

00:03:42,000 --> 00:03:45,620
to get affected by this in this case the

00:03:44,340 --> 00:03:48,840
vulnerable generally such a package

00:03:45,620 --> 00:03:50,760
downloaded a payload from github and an

00:03:48,840 --> 00:03:52,740
executed it dynamically it was caught

00:03:50,760 --> 00:03:53,940
doing things like extra training GPG and

00:03:52,740 --> 00:03:55,560
SSH connections

00:03:53,940 --> 00:03:57,690
well minute isn't that pretty clever

00:03:55,560 --> 00:03:59,250
those there's two parts on the same

00:03:57,690 --> 00:04:02,130
attacker uploaded another package

00:03:59,250 --> 00:04:04,230
another set of packages the most common

00:04:02,130 --> 00:04:06,120
form is Python 3 date you tailor this

00:04:04,230 --> 00:04:07,680
package itself is pretty innocuous just

00:04:06,120 --> 00:04:10,320
contain some date parson functions that

00:04:07,680 --> 00:04:11,850
work to Python 3 years so if you looked

00:04:10,320 --> 00:04:12,959
at the Python 3 date utility code you

00:04:11,850 --> 00:04:14,760
even have found anything wrong with it

00:04:12,959 --> 00:04:15,989
the tricky part is that it declared

00:04:14,760 --> 00:04:17,880
independence iam is chilly search

00:04:15,989 --> 00:04:19,980
library and not the real long one with

00:04:17,880 --> 00:04:21,269
the type 1 side so if you just happen to

00:04:19,980 --> 00:04:22,950
scroll through its dependencies without

00:04:21,269 --> 00:04:23,820
looking character by character you'd

00:04:22,950 --> 00:04:26,210
have thought you were getting the real

00:04:23,820 --> 00:04:28,800
jellyfish library instead you're running

00:04:26,210 --> 00:04:33,360
your subject or a little code execution

00:04:28,800 --> 00:04:34,650
concludes your SSH from PG keys and

00:04:33,360 --> 00:04:35,669
there's lots more this is far from the

00:04:34,650 --> 00:04:36,180
first time something like this has

00:04:35,669 --> 00:04:37,740
happened

00:04:36,180 --> 00:04:40,500
I gotta go through all these examples

00:04:37,740 --> 00:04:41,910
but there's all bunch of different

00:04:40,500 --> 00:04:43,169
techniques and their creativity shows

00:04:41,910 --> 00:04:44,669
that there's no one size or shape

00:04:43,169 --> 00:04:46,380
through these attacks this is something

00:04:44,669 --> 00:04:49,020
everybody needs to be concerned about

00:04:46,380 --> 00:04:50,550
today boom Strauss asked was one of the

00:04:49,020 --> 00:04:53,550
biggest ones here this is a very popular

00:04:50,550 --> 00:04:55,200
ruby library the committers in this case

00:04:53,550 --> 00:04:57,240
there's nothing wrong themselves one of

00:04:55,200 --> 00:04:58,919
them had their credentials stolen their

00:04:57,240 --> 00:04:59,760
credentials toffolo this package to ruby

00:04:58,919 --> 00:05:01,440
gems were stolen

00:04:59,760 --> 00:05:03,090
an attacker uploaded a new release

00:05:01,440 --> 00:05:05,370
containing Cody was never actually

00:05:03,090 --> 00:05:06,810
checked in together so if you looked at

00:05:05,370 --> 00:05:08,280
the code for that version I get a

00:05:06,810 --> 00:05:10,080
repository and didn't do a review

00:05:08,280 --> 00:05:12,150
everything line behind yourself you

00:05:10,080 --> 00:05:13,740
still would have missed this the supply

00:05:12,150 --> 00:05:14,940
chains of these packages there's a whole

00:05:13,740 --> 00:05:16,729
bunch of different points or

00:05:14,940 --> 00:05:18,810
vulnerabilities that can be injected

00:05:16,729 --> 00:05:23,250
it's very difficult to protect the rest

00:05:18,810 --> 00:05:25,770
although the one that I really like kind

00:05:23,250 --> 00:05:28,110
of sick and sad way was the doctor one

00:05:25,770 --> 00:05:29,760
two three three two one hundred this

00:05:28,110 --> 00:05:31,919
carry another technique was basically a

00:05:29,760 --> 00:05:33,520
monocoque where people outputted all the

00:05:31,919 --> 00:05:35,500
bunch of actually

00:05:33,520 --> 00:05:37,300
container there's a docker out when I

00:05:35,500 --> 00:05:39,640
first came out these images were used

00:05:37,300 --> 00:05:42,100
for years after building this use case

00:05:39,640 --> 00:05:44,170
out for a whole bunch of time they

00:05:42,100 --> 00:05:46,060
ejected sukkot to my encrypted lines and

00:05:44,170 --> 00:05:47,740
the next versions of the evidence so

00:05:46,060 --> 00:05:49,360
these people actually started out by

00:05:47,740 --> 00:05:51,070
building something useful got it used

00:05:49,360 --> 00:05:53,050
and they're mad at Khoda mine crypto

00:05:51,070 --> 00:05:54,190
boys I think no way to prevent these

00:05:53,050 --> 00:05:55,330
things without actually looking at

00:05:54,190 --> 00:05:59,530
everything that you're using to being

00:05:55,330 --> 00:06:01,210
aware of these real live at Nocturna for

00:05:59,530 --> 00:06:06,070
over a year before anyone noticed it's

00:06:01,210 --> 00:06:07,990
pretty territorial so how do we fix this

00:06:06,070 --> 00:06:10,750
and what to software delivery delivery

00:06:07,990 --> 00:06:11,950
foundation I have to do this well all

00:06:10,750 --> 00:06:14,590
these things are attacks on supply

00:06:11,950 --> 00:06:16,750
chains and supply chains are basically

00:06:14,590 --> 00:06:19,350
how we have a software delivery delivery

00:06:16,750 --> 00:06:23,980
is the process of getting our coordi

00:06:19,350 --> 00:06:25,150
sauce to readers as an engineer we like

00:06:23,980 --> 00:06:26,680
to think code is a great thing they like

00:06:25,150 --> 00:06:28,000
to write code from the business

00:06:26,680 --> 00:06:30,040
perspective code is actually a liability

00:06:28,000 --> 00:06:32,310
just like physical goods in the

00:06:30,040 --> 00:06:34,330
warehouse like to be a damaged broken

00:06:32,310 --> 00:06:35,920
they don't actually add any business

00:06:34,330 --> 00:06:37,060
value as we did that code delivered into

00:06:35,920 --> 00:06:38,950
the hands of our customers

00:06:37,060 --> 00:06:40,420
that's for software delivery customers

00:06:38,950 --> 00:06:42,370
so after delivery is the process of

00:06:40,420 --> 00:06:43,630
converting code of something sitting in

00:06:42,370 --> 00:06:45,970
a git repository to something useful

00:06:43,630 --> 00:06:49,840
that our customers gonna do so that's a

00:06:45,970 --> 00:06:52,030
business value and unfortunately of this

00:06:49,840 --> 00:06:56,280
Kelsey high-powered treatment says have

00:06:52,030 --> 00:06:58,390
a talk on Kelsey - everything work

00:06:56,280 --> 00:06:59,770
there's no single continuous integration

00:06:58,390 --> 00:07:02,740
and delivery setup that won't work

00:06:59,770 --> 00:07:04,120
forever every company is different these

00:07:02,740 --> 00:07:05,710
pipelines basically encapsulate a

00:07:04,120 --> 00:07:07,870
company's culture what processes are

00:07:05,710 --> 00:07:10,540
required which meant a trex overview

00:07:07,870 --> 00:07:12,810
techniques Gath use so everybody has a

00:07:10,540 --> 00:07:16,140
different software delivery pipeline

00:07:12,810 --> 00:07:19,180
activities cases are different customers

00:07:16,140 --> 00:07:22,210
that leaves us in a pretty sad state

00:07:19,180 --> 00:07:23,620
since software delivery is required and

00:07:22,210 --> 00:07:26,440
it doesn't actually have any value

00:07:23,620 --> 00:07:28,630
itself it'll sell our software dealer -

00:07:26,440 --> 00:07:30,430
whenever he needs a custom one or end up

00:07:28,630 --> 00:07:32,050
with these Goldberg machines whatever

00:07:30,430 --> 00:07:35,020
it's the gist together at bash and

00:07:32,050 --> 00:07:36,640
configuration files getting something

00:07:35,020 --> 00:07:38,590
good enough here it is more than enough

00:07:36,640 --> 00:07:41,140
in these cases don't maintain these

00:07:38,590 --> 00:07:42,550
there are to make portable as soon as

00:07:41,140 --> 00:07:45,970
you get it working you tend to call it a

00:07:42,550 --> 00:07:48,730
day this delivery pipeline has all the

00:07:45,970 --> 00:07:49,960
data you need to start on it in your

00:07:48,730 --> 00:07:51,670
supply chain if they're going out what's

00:07:49,960 --> 00:07:53,650
coming in and what's going out looking

00:07:51,670 --> 00:07:54,910
for vulnerabilities but it's buried it's

00:07:53,650 --> 00:07:56,410
scattered and bill dogs it's not

00:07:54,910 --> 00:07:59,020
objecting the servers inside of it

00:07:56,410 --> 00:08:01,990
commit history there's no real way to

00:07:59,020 --> 00:08:03,610
get things out of here it definitely

00:08:01,990 --> 00:08:05,350
doesn't scale when you try to accept a

00:08:03,610 --> 00:08:09,520
broader view of software delivery and

00:08:05,350 --> 00:08:11,050
supply chain so what I mean by that

00:08:09,520 --> 00:08:12,730
like in our nodejs example when we

00:08:11,050 --> 00:08:15,280
install one package we end up with 50

00:08:12,730 --> 00:08:17,770
packets dependencies most of them

00:08:15,280 --> 00:08:19,840
markets have dependencies if you think

00:08:17,770 --> 00:08:21,280
is the small a chain for those you're

00:08:19,840 --> 00:08:22,600
the user of one of those libraries in

00:08:21,280 --> 00:08:25,360
those packages they all have their own

00:08:22,600 --> 00:08:27,520
sensor proof over machines they're used

00:08:25,360 --> 00:08:29,140
to deliver their code from their

00:08:27,520 --> 00:08:31,270
developers keyboards to you as their end

00:08:29,140 --> 00:08:32,740
user and just know that one level here

00:08:31,270 --> 00:08:34,030
but this really implies transitively to

00:08:32,740 --> 00:08:35,370
all the dependencies that are

00:08:34,030 --> 00:08:37,630
dependencies

00:08:35,370 --> 00:08:39,400
these root level missions have all the

00:08:37,630 --> 00:08:41,680
data we need to start securing supply

00:08:39,400 --> 00:08:43,570
chains again we can't access it because

00:08:41,680 --> 00:08:46,420
it's buried in different file formats

00:08:43,570 --> 00:08:51,280
different specifications these pipelines

00:08:46,420 --> 00:08:53,230
can't communicate with each other let me

00:08:51,280 --> 00:08:54,580
take a another example here and talk

00:08:53,230 --> 00:08:57,490
about it so a different delivery

00:08:54,580 --> 00:08:58,870
pipeline I said I've been an engineer at

00:08:57,490 --> 00:09:00,100
Google for a long time Google's pretty

00:08:58,870 --> 00:09:01,090
famous for doing things a little bit

00:09:00,100 --> 00:09:03,070
differently than the rest of the

00:09:01,090 --> 00:09:05,700
industry not necessarily better just

00:09:03,070 --> 00:09:07,960
different Google uses a mono repo

00:09:05,700 --> 00:09:10,300
one giant source repository for

00:09:07,960 --> 00:09:12,070
everything our first party code our

00:09:10,300 --> 00:09:13,660
third party code the source code for all

00:09:12,070 --> 00:09:15,370
of our tools and our production

00:09:13,660 --> 00:09:17,170
configuration all those together inside

00:09:15,370 --> 00:09:18,050
of this environment we want to make use

00:09:17,170 --> 00:09:19,700
of the third party

00:09:18,050 --> 00:09:23,240
did we take it checking to this mana

00:09:19,700 --> 00:09:25,010
repository a special directory and since

00:09:23,240 --> 00:09:26,570
we're one company uses the same build

00:09:25,010 --> 00:09:31,040
system across all these libraries and

00:09:26,570 --> 00:09:32,660
tools we don't have the kind of scaling

00:09:31,040 --> 00:09:35,000
room for machine problems we just have

00:09:32,660 --> 00:09:36,950
one we have one team that maintains most

00:09:35,000 --> 00:09:39,740
of this stuff so we can write this

00:09:36,950 --> 00:09:41,540
metadata in a standard format when I say

00:09:39,740 --> 00:09:42,500
standard standard internally this is

00:09:41,540 --> 00:09:44,930
something it wouldn't really make sense

00:09:42,500 --> 00:09:47,120
in the outside world for every step of

00:09:44,930 --> 00:09:49,029
the way so you know a metadata bus

00:09:47,120 --> 00:09:51,529
that's query for by the rest of decoding

00:09:49,029 --> 00:09:52,760
so this metadata bus kind of capsule

00:09:51,529 --> 00:09:54,680
AIT's the entire delivery pipeline

00:09:52,760 --> 00:09:57,860
inside of Google as includes things like

00:09:54,680 --> 00:09:59,510
Cody metadata you can see who reviewed

00:09:57,860 --> 00:10:01,820
every single change before it goes in we

00:09:59,510 --> 00:10:05,570
can see what tests were on we can see

00:10:01,820 --> 00:10:06,589
the results of those tests and this

00:10:05,570 --> 00:10:08,420
applies all the way they are

00:10:06,589 --> 00:10:10,339
professionally so with this metadata we

00:10:08,420 --> 00:10:13,190
can apply policy you some pretty

00:10:10,339 --> 00:10:14,570
interesting things this is just some of

00:10:13,190 --> 00:10:16,010
the examples of the types of metadata

00:10:14,570 --> 00:10:18,769
that we have stored in this bus and

00:10:16,010 --> 00:10:20,450
types of policy we can apply them we

00:10:18,769 --> 00:10:21,709
have a provenance information so from

00:10:20,450 --> 00:10:23,570
any given binary running in production

00:10:21,709 --> 00:10:26,060
we can see exactly who authored the

00:10:23,570 --> 00:10:31,010
changes inside of it and we can see what

00:10:26,060 --> 00:10:32,660
changes are at each new version we have

00:10:31,010 --> 00:10:34,310
metadata for the entire build process as

00:10:32,660 --> 00:10:36,740
well every once in a while to go

00:10:34,310 --> 00:10:38,300
compiler the Java compiler Python

00:10:36,740 --> 00:10:39,950
interpreter has a blog or a securities

00:10:38,300 --> 00:10:41,690
you inside of it and the fix is to

00:10:39,950 --> 00:10:44,300
rebuild all the minor is your source

00:10:41,690 --> 00:10:45,950
affinity so we can do queries and our

00:10:44,300 --> 00:10:47,510
production environments to figure out

00:10:45,950 --> 00:10:49,839
exactly which binaries need to be

00:10:47,510 --> 00:10:52,220
rebuilt and when there are last but

00:10:49,839 --> 00:10:53,810
another Google of feature gears that we

00:10:52,220 --> 00:10:55,940
can actually apply policy and runtime as

00:10:53,810 --> 00:10:57,529
well so when developers know things

00:10:55,940 --> 00:10:58,880
locally on the machines we want to test

00:10:57,529 --> 00:11:01,610
them in a production like environment we

00:10:58,880 --> 00:11:02,839
can do that safely this developers can

00:11:01,610 --> 00:11:04,550
run their code in a production

00:11:02,839 --> 00:11:05,450
environment but we have metadata about

00:11:04,550 --> 00:11:08,600
exactly how these things

00:11:05,450 --> 00:11:10,400
build inside and so we can rent policies

00:11:08,600 --> 00:11:11,720
and permission systems on our databases

00:11:10,400 --> 00:11:13,070
but say only things that have been

00:11:11,720 --> 00:11:15,020
checked in and reviewed by certain

00:11:13,070 --> 00:11:17,420
number of people or built using our

00:11:15,020 --> 00:11:19,340
hermetic build system have access to our

00:11:17,420 --> 00:11:27,170
private data stores it offers only have

00:11:19,340 --> 00:11:29,000
access to sandbox versions so echo buff

00:11:27,170 --> 00:11:31,220
we have the case so far the delivery

00:11:29,000 --> 00:11:32,330
pipeline once we take a broader view the

00:11:31,220 --> 00:11:34,070
real place to start thinking about

00:11:32,330 --> 00:11:35,770
securing and software supply chains

00:11:34,070 --> 00:11:38,210
especially when it comes to open source

00:11:35,770 --> 00:11:39,650
they have all the metadata we just have

00:11:38,210 --> 00:11:40,880
to be extracted and get a standard

00:11:39,650 --> 00:11:43,120
formats where we can start to make use

00:11:40,880 --> 00:11:43,120
of it

00:11:43,270 --> 00:11:50,270
so we have this kind of weird paradox

00:11:48,440 --> 00:11:52,100
where we apply all these standards and

00:11:50,270 --> 00:11:54,080
best practices in code review and unit

00:11:52,100 --> 00:11:55,940
testing to our code first party code

00:11:54,080 --> 00:11:57,890
that we write but when it comes to third

00:11:55,940 --> 00:11:59,960
party code you can be kind of turn a

00:11:57,890 --> 00:12:01,640
blind eye to it we trust that somebody's

00:11:59,960 --> 00:12:03,440
looking at it and when everyone trusts

00:12:01,640 --> 00:12:04,640
this someone else will be often run into

00:12:03,440 --> 00:12:07,760
problem just like the supply chain

00:12:04,640 --> 00:12:09,830
attacks I talked about before Google is

00:12:07,760 --> 00:12:11,990
a whole lot of work in an area because

00:12:09,830 --> 00:12:14,330
we have a unique system there's nothing

00:12:11,990 --> 00:12:15,710
special about that system anybody that

00:12:14,330 --> 00:12:17,810
spent enough time and energy kind of

00:12:15,710 --> 00:12:19,040
leader set this up themselves but the

00:12:17,810 --> 00:12:20,390
point here is in the open source

00:12:19,040 --> 00:12:22,430
community we shouldn't all have to do

00:12:20,390 --> 00:12:24,200
that ourselves if we start to talk about

00:12:22,430 --> 00:12:25,970
standardization in a spacing of all the

00:12:24,200 --> 00:12:27,860
standard formats for metadata and

00:12:25,970 --> 00:12:29,300
artifacts that you can query we can

00:12:27,860 --> 00:12:30,950
start to build a shared metadata bus

00:12:29,300 --> 00:12:33,440
across the entire open-source supply

00:12:30,950 --> 00:12:35,060
chain if we do that together and then we

00:12:33,440 --> 00:12:40,610
can prevent everybody

00:12:35,060 --> 00:12:42,200
themselves so let's do this more details

00:12:40,610 --> 00:12:48,260
about the standardization what's missing

00:12:42,200 --> 00:12:50,240
what's going on here so this is a döner

00:12:48,260 --> 00:12:51,800
problem Hall has been invaded together

00:12:50,240 --> 00:12:53,060
across all the different software

00:12:51,800 --> 00:12:55,070
projects going on in the open-source

00:12:53,060 --> 00:12:57,080
community turns it into a big data

00:12:55,070 --> 00:12:58,430
problem we need ways to extract the data

00:12:57,080 --> 00:13:00,230
from the software development goal or

00:12:58,430 --> 00:13:01,940
not in the community today and make it

00:13:00,230 --> 00:13:04,280
available and accessible to the rest of

00:13:01,940 --> 00:13:06,260
the community again this metadata

00:13:04,280 --> 00:13:08,210
already just talked about before it's

00:13:06,260 --> 00:13:11,980
just been text files and build logs and

00:13:08,210 --> 00:13:14,060
get to me it locks anyways to get it out

00:13:11,980 --> 00:13:15,530
and that's where standardization can

00:13:14,060 --> 00:13:16,820
come into play here at Southwick

00:13:15,530 --> 00:13:19,160
foundation it's the right place to be

00:13:16,820 --> 00:13:20,810
doing this work once we start thinking

00:13:19,160 --> 00:13:23,510
about applying best practices to have

00:13:20,810 --> 00:13:24,860
our own open source we can start to

00:13:23,510 --> 00:13:27,530
figure out exactly what metadata is

00:13:24,860 --> 00:13:30,020
needed formats are the best period have

00:13:27,530 --> 00:13:31,790
story then we can define a standards

00:13:30,020 --> 00:13:33,530
based on those practices we can't do

00:13:31,790 --> 00:13:35,060
this just in thin air actually start

00:13:33,530 --> 00:13:38,240
trying to solve this problem a few uses

00:13:35,060 --> 00:13:40,490
first and from there we can start to

00:13:38,240 --> 00:13:42,350
build tooling to make this easier one of

00:13:40,490 --> 00:13:44,330
the lessons of software though is that

00:13:42,350 --> 00:13:46,970
something is not easy and not by default

00:13:44,330 --> 00:13:48,050
many people that are going to do it if

00:13:46,970 --> 00:13:49,610
you don't have to pioneers that are

00:13:48,050 --> 00:13:53,000
automatically outputting that idea of

00:13:49,610 --> 00:13:55,160
what sources went in and to buy or build

00:13:53,000 --> 00:13:58,400
by default that people are going to take

00:13:55,160 --> 00:14:00,350
the time to do this and as we go forward

00:13:58,400 --> 00:14:02,270
we can keep repeating the cycle pushing

00:14:00,350 --> 00:14:05,000
the industry for Standardization isn't

00:14:02,270 --> 00:14:06,230
necessarily the most exciting piece of

00:14:05,000 --> 00:14:07,940
software development but it is necessary

00:14:06,230 --> 00:14:12,440
and that's what lets us building at the

00:14:07,940 --> 00:14:14,720
top of the floor level systems so we can

00:14:12,440 --> 00:14:17,810
get specific here we need standards for

00:14:14,720 --> 00:14:20,090
a couple different things starting at

00:14:17,810 --> 00:14:21,440
the top left pipeline definitions so

00:14:20,090 --> 00:14:24,050
everyone has these bash scripts

00:14:21,440 --> 00:14:25,520
configuration files and you know either

00:14:24,050 --> 00:14:27,830
documents checked in describing how

00:14:25,520 --> 00:14:29,360
software is built and released since

00:14:27,830 --> 00:14:30,650
this isn't no standard format it's hard

00:14:29,360 --> 00:14:31,490
for us to look at our dependencies and

00:14:30,650 --> 00:14:33,470
figure out what's best

00:14:31,490 --> 00:14:34,970
says they're already following we need

00:14:33,470 --> 00:14:36,350
standard notations for explaining how

00:14:34,970 --> 00:14:37,730
software is built there's line all

00:14:36,350 --> 00:14:38,869
products of all of our dependencies so

00:14:37,730 --> 00:14:40,399
we can make sure that they're following

00:14:38,869 --> 00:14:44,149
the same standards the best practices

00:14:40,399 --> 00:14:46,309
that we are we also need a stuff for to

00:14:44,149 --> 00:14:48,949
check expiration as well talked about

00:14:46,309 --> 00:14:51,319
Bobby's in the go compiler he found the

00:14:48,949 --> 00:14:53,540
required security updates there's also

00:14:51,319 --> 00:14:56,619
an old paper called reflections on

00:14:53,540 --> 00:14:58,970
trusting trust it exists to this a

00:14:56,619 --> 00:15:01,220
scarier deeper level but just because

00:14:58,970 --> 00:15:03,050
you know exactly which binaries went in

00:15:01,220 --> 00:15:04,579
which source files went into a compiler

00:15:03,050 --> 00:15:05,749
and which binary can you know if you

00:15:04,579 --> 00:15:07,730
don't actually have all the source code

00:15:05,749 --> 00:15:09,679
for the compiler itself - and you can't

00:15:07,730 --> 00:15:11,300
really trust that in it and this applies

00:15:09,679 --> 00:15:12,470
to the compiler that built that compiler

00:15:11,300 --> 00:15:14,839
as well which is where it starts to get

00:15:12,470 --> 00:15:16,279
kind of scary just because we know

00:15:14,839 --> 00:15:18,230
something was built using to go build

00:15:16,279 --> 00:15:19,399
command or without a C command if you

00:15:18,230 --> 00:15:21,199
don't know exactly which version of the

00:15:19,399 --> 00:15:22,179
tool was used that we can't figure

00:15:21,199 --> 00:15:24,170
things out

00:15:22,179 --> 00:15:25,459
containers stuff a lot here because they

00:15:24,170 --> 00:15:27,139
actually let us encapsulate the entire

00:15:25,459 --> 00:15:28,399
file since going to use them available

00:15:27,139 --> 00:15:30,379
so we can examine it later

00:15:28,399 --> 00:15:32,089
so can even understand is to declare

00:15:30,379 --> 00:15:36,860
these things as well to be able to apply

00:15:32,089 --> 00:15:39,769
policy on top of it and down the bottom

00:15:36,860 --> 00:15:41,059
left source province so the summer

00:15:39,769 --> 00:15:42,799
things start to get tracked back to the

00:15:41,059 --> 00:15:45,079
medieval authors and the actual people

00:15:42,799 --> 00:15:46,459
that worked on D commit logs contain

00:15:45,079 --> 00:15:48,350
email addresses but if people aren't

00:15:46,459 --> 00:15:50,149
sign of things are using TCO or other

00:15:48,350 --> 00:15:52,670
systems I really have no proof that

00:15:50,149 --> 00:15:53,749
something any good history actually came

00:15:52,670 --> 00:15:55,850
from an individual

00:15:53,749 --> 00:15:57,619
I mean standards for how to attach this

00:15:55,850 --> 00:15:59,179
metadata and require that's been a

00:15:57,619 --> 00:16:00,769
that's attached on git commits or

00:15:59,179 --> 00:16:02,689
whatever source code management system

00:16:00,769 --> 00:16:04,249
you happen to be using so that we can

00:16:02,689 --> 00:16:07,639
figure out exactly where things came

00:16:04,249 --> 00:16:09,499
from one developer was pod and assert

00:16:07,639 --> 00:16:10,819
your backdoor the packages be great to

00:16:09,499 --> 00:16:13,910
figure out exactly what other factors

00:16:10,819 --> 00:16:15,949
that developer touched and then we need

00:16:13,910 --> 00:16:17,449
to wrap all this up in metadata formats

00:16:15,949 --> 00:16:21,049
they can be exchanged as easily as we

00:16:17,449 --> 00:16:22,429
can pimp install or install files this

00:16:21,049 --> 00:16:23,959
metadata needs to transfer with the

00:16:22,429 --> 00:16:25,549
packages so the rest people are going to

00:16:23,959 --> 00:16:27,500
make use of it and we need easy ways to

00:16:25,549 --> 00:16:29,360
handle this metadata back and forth

00:16:27,500 --> 00:16:34,880
between different organizations twos are

00:16:29,360 --> 00:16:36,860
fast changes so I mean all the other

00:16:34,880 --> 00:16:39,530
this looks sort of similar to the

00:16:36,860 --> 00:16:41,180
diagram except we need this and for the

00:16:39,530 --> 00:16:42,260
rest of the open-source community then

00:16:41,180 --> 00:16:45,380
used to work with the team that we

00:16:42,260 --> 00:16:47,810
already have as actual software is build

00:16:45,380 --> 00:16:51,230
we need ways to exchange provenance with

00:16:47,810 --> 00:16:53,360
the artifacts when we develop our first

00:16:51,230 --> 00:16:54,890
party software use those same mechanisms

00:16:53,360 --> 00:16:56,540
and we need to define the pipeline's for

00:16:54,890 --> 00:16:58,250
these in standard formats so we can

00:16:56,540 --> 00:16:59,390
share our best practices and plot the

00:16:58,250 --> 00:17:00,460
way that the rest of the software is

00:16:59,390 --> 00:17:02,810
built for and east

00:17:00,460 --> 00:17:04,579
all these development processes should

00:17:02,810 --> 00:17:07,520
be outputting that it as well so we can

00:17:04,579 --> 00:17:09,290
see overview metadata tests blogs build

00:17:07,520 --> 00:17:11,150
results and all this should be the

00:17:09,290 --> 00:17:16,370
standard community-owned with metadata

00:17:11,150 --> 00:17:21,500
us so we can apply production policy as

00:17:16,370 --> 00:17:23,480
well and that's where the Linux

00:17:21,500 --> 00:17:25,459
Foundation in axillary foundation come

00:17:23,480 --> 00:17:28,160
in can use Tillery foundation was

00:17:25,459 --> 00:17:29,990
started up earlier this year which of

00:17:28,160 --> 00:17:32,930
founding members as a sub foundation in

00:17:29,990 --> 00:17:34,610
the Linux Foundation I probably forgot

00:17:32,930 --> 00:17:36,110
to pass on those members are joint over

00:17:34,610 --> 00:17:38,720
the year the growth has been briefing

00:17:36,110 --> 00:17:41,510
from Jin Zhu who recently just joined as

00:17:38,720 --> 00:17:45,680
well they're happy to have them in the

00:17:41,510 --> 00:17:47,810
foundation the work there is recognised

00:17:45,680 --> 00:17:50,300
in projects so the tacked-on project

00:17:47,810 --> 00:17:52,520
that I work on is an axillary foundation

00:17:50,300 --> 00:17:55,430
we also have cities or special interest

00:17:52,520 --> 00:17:57,500
groups working on cross-cutting efforts

00:17:55,430 --> 00:17:58,910
and the interesting one in the space is

00:17:57,500 --> 00:18:00,380
the security of special interest group

00:17:58,910 --> 00:18:02,210
which is focusing on supply chain

00:18:00,380 --> 00:18:05,710
security and trying to work towards

00:18:02,210 --> 00:18:05,710
standardization of some of these formats

00:18:06,580 --> 00:18:10,630
so starting at the tech non-product

00:18:12,129 --> 00:18:17,379
tectonic pipelines as a project to start

00:18:15,129 --> 00:18:20,109
letting people declaratively specifies

00:18:17,379 --> 00:18:21,129
software delivery pipelines it's kind of

00:18:20,109 --> 00:18:23,349
the first standard that we talked about

00:18:21,129 --> 00:18:24,969
before was in two parts

00:18:23,349 --> 00:18:27,279
there's a way to declare these pipelines

00:18:24,969 --> 00:18:29,559
and also provides a trusted execution

00:18:27,279 --> 00:18:31,269
environment to execute these pipelines

00:18:29,559 --> 00:18:34,359
is once you declare and everything as

00:18:31,269 --> 00:18:36,459
sets of containers that run in a dagger

00:18:34,359 --> 00:18:39,070
or a graph we can start to write a

00:18:36,459 --> 00:18:41,200
metadata of every step of this way in a

00:18:39,070 --> 00:18:42,969
secure manner I can do this using

00:18:41,200 --> 00:18:44,349
signatures and various techniques to

00:18:42,969 --> 00:18:48,729
make sure these things can't be tampered

00:18:44,349 --> 00:18:51,190
with there's a whole bunch of other

00:18:48,729 --> 00:18:54,869
projects going on in this area - gracias

00:18:51,190 --> 00:18:57,369
is an API designed to store metadata

00:18:54,869 --> 00:18:59,409
artifacts so you can attach things like

00:18:57,369 --> 00:19:02,169
vulnerabilities and results source

00:18:59,409 --> 00:19:04,179
Providence build results showing exactly

00:19:02,169 --> 00:19:07,690
how an artifact was produced and query

00:19:04,179 --> 00:19:09,489
them already the standard API in total

00:19:07,690 --> 00:19:10,989
was another project and the CNC f it

00:19:09,489 --> 00:19:14,200
takes a different take on some of these

00:19:10,989 --> 00:19:16,839
concepts Toto scribes themselves as

00:19:14,200 --> 00:19:20,019
farm-to-table supply chain and security

00:19:16,839 --> 00:19:21,369
that means they declare a couple

00:19:20,019 --> 00:19:22,929
different file types that declare

00:19:21,369 --> 00:19:24,459
exactly how software supposed to be

00:19:22,929 --> 00:19:26,950
produced they can be exchanged between

00:19:24,459 --> 00:19:28,659
parties so developers that have access

00:19:26,950 --> 00:19:30,279
to certain keys sign things as they

00:19:28,659 --> 00:19:30,940
execute commands and then you can play

00:19:30,279 --> 00:19:32,169
those back

00:19:30,940 --> 00:19:33,639
verify the things were built the way

00:19:32,169 --> 00:19:34,929
that they're supposed to be built and

00:19:33,639 --> 00:19:38,379
things weren't tampered with before the

00:19:34,929 --> 00:19:39,969
artifacts get published then finally

00:19:38,379 --> 00:19:43,029
some of the specification work going on

00:19:39,969 --> 00:19:44,679
there's two others the s-bahn or

00:19:43,029 --> 00:19:46,299
software Bill of Materials effort is

00:19:44,679 --> 00:19:50,289
happening in the object Management Group

00:19:46,299 --> 00:19:51,850
and the SPD X product suffer data

00:19:50,289 --> 00:19:54,400
exchanges not the right here

00:19:51,850 --> 00:19:58,510
vision SP DX is one of the most commonly

00:19:54,400 --> 00:20:00,940
used at spawn formats for attachment of

00:19:58,510 --> 00:20:03,700
data to suffer it's been mostly focused

00:20:00,940 --> 00:20:05,290
on licensing data all these concerns I

00:20:03,700 --> 00:20:07,630
talked about for security you also apply

00:20:05,290 --> 00:20:10,030
the licensing so it's a very common very

00:20:07,630 --> 00:20:11,620
similar you space if you're pulling in

00:20:10,030 --> 00:20:12,460
code and even all the licenses about it

00:20:11,620 --> 00:20:14,320
then you don't know that you're allowed

00:20:12,460 --> 00:20:16,960
to use it the same thing applies to

00:20:14,320 --> 00:20:19,450
security so the new s bomb or the new SP

00:20:16,960 --> 00:20:21,490
DX 3.0 so it's not extending the

00:20:19,450 --> 00:20:23,140
specification to that support for

00:20:21,490 --> 00:20:25,500
security and providence and authorship

00:20:23,140 --> 00:20:25,500
data

00:20:34,340 --> 00:20:41,540
so how can people help if not only fix

00:20:37,100 --> 00:20:42,860
this all together as an industry summer

00:20:41,540 --> 00:20:44,870
eight year is that we all need to start

00:20:42,860 --> 00:20:48,260
taking supply chain impacts and our open

00:20:44,870 --> 00:20:49,370
source software security seriously we

00:20:48,260 --> 00:20:51,980
can't trust that everyone else is

00:20:49,370 --> 00:20:54,020
looking out for these things can't rely

00:20:51,980 --> 00:20:56,360
on the community here we all have to

00:20:54,020 --> 00:20:57,580
actually take control of the software

00:20:56,360 --> 00:20:59,960
and our dependencies that we're using

00:20:57,580 --> 00:21:01,340
and if we do one of the things this is

00:20:59,960 --> 00:21:03,470
in the industry this is a standards

00:21:01,340 --> 00:21:05,540
automation data problem that we can all

00:21:03,470 --> 00:21:06,380
solve if we work together on it we can't

00:21:05,540 --> 00:21:07,850
really wait any longer

00:21:06,380 --> 00:21:10,190
these attacks are arising and happening

00:21:07,850 --> 00:21:11,510
more and more every day and if this is

00:21:10,190 --> 00:21:14,540
interesting to you then we're working on

00:21:11,510 --> 00:21:19,490
it right now the Lynch foundation so

00:21:14,540 --> 00:21:21,230
please reach out and get involved thank

00:21:19,490 --> 00:21:22,760
you for having me - there's some helpful

00:21:21,230 --> 00:21:24,200
links here for how to get involved and

00:21:22,760 --> 00:21:27,070
start contributing some of these

00:21:24,200 --> 00:21:27,070

YouTube URL: https://www.youtube.com/watch?v=OZ97dGQyMDg


