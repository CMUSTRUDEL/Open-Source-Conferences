Title: FINOS Open Source in Fintech Meetup | Code Coverage Paradox | Diffblue | Feb 2021
Publication date: 2021-04-11
Playlist: OS in Fintech Meetups
Description: 
	Guest Speaker: Enrico Trentin of Diffblue, presented "The Code Coverage Paradox: When 90% Isn’t Enough, But Less Might Be". 

This video was from a live FINOS Open Source in Fintech Meetup on February 17, 2020. Join us live for future "Meetups" to see real examples of successful collaboration, hear a few top tips from active contributors, and learn about some innovative approaches to maintaining open source projects.

Enrico's Presentation: The Code Coverage Paradox: When 90% Isn’t Enough, But Less Might Be - February 17th, 2021

Talk abstract - Code coverage is the metric everyone knows - but is it really what you need to be using? In this talk, we will walk you through the code metrics that actually matter, identify areas of risk, and efficiently improve them with manual and automated means, using examples from FINOS open source projects and data-modelling platforms.

Enrico's Bio:

Enrico Trentin, Developer Relations Lead, Diffblue
Enrico Trentin is the developer relations lead at Diffblue. He has been a developer for eight years, primarily working in Java. Originally from Italy, he is now based in Oxford, UK.

►►Visit here for more FINOS Events https://finos.org/hosted-events

►►Visit the FINOS website https://finos.org/ and Get Involved https://finos.org/get-involved)
 
►►Join us for the FINOS & Linux Foundation Open Source Strategy Forum (OSSF)

London https://events.linuxfoundation.org/open-source-strategy-forum-london

New York https://events.linuxfoundation.org/open-source-strategy-forum-new-york/

►►Listen to all of our podcasts on these platforms as well as others: 

Apple Podcasts https://podcasts.apple.com/us/podcast/finos-open-source-in-fintech-podcast/id1512371068

Anchor.fm https://anchor.fm/finos

Spotify https://open.spotify.com/show/431XdfX2fBdCUsopwh8td3

Check it out, subscribe, and don’t forget to rate us (5 stars)!
Captions: 
	                              [Music]                               hi                               good day good afternoon good morning i'm                               james mcleod finnos director of                               community                               and i'm your host for today's call um                               so being the host um it means that i'm                               actually looking after everybody who's                               on the pool including enrico                                who's um presenter for today and say if                                i can ask everybody who's joining us                                um just to place yourselves on mute um                                that'll be great because it means that                                we can keep um any background noise down                                um or if you're unable to mute yourself                                um i can do that as host                                i'd like to welcome everybody to our                                first finos                                meetup um of                                     and i'm james macleod finish director of                                community                                and i'm joined by enrique trenton um                                development relations lead at diff blee                                who are a finnos member                                um and enrico's here to present to us                                today                                the code coverage paradox where                                         enough                                but less might be but before i hand over                                to emiko                                for his presentation i'd like to remind                                everybody to                                visit um finnos at finos.org to                                subscribe to our mailing lists                                and learn how to get involved with the                                finnos community                                i'd also encourage developers and                                engineers to visit                                the finnos organization on github by                                visiting github.com forward slash finos                                if you're an engineer or developer                                wanting to contribute or leverage finos                                open source projects                                um plus also uh for anybody who's                                registered for today's call                                um we'll also be drawing a couple of                                attendees                                um out of our out of the hat um                                randomly um and shipping you                                finnos t-shirt each as well which is                                great and so with that                                i'd like to welcome enrique to today's                                um meetup                                it's over to you thanks and thanks                                everyone for joining                                i'm eric i'm the developer relations                                lead here at diff blue                                where spin out from oxford university                                founder                                                                                             we're a silver member of finos and                                provide the full version of our product                                blue cover for free to use on finos                                projects                                we build tools that use a techniques to                                automatically generate                                unit tests for your job application more                                on this                                in this talk i'm going to give you an                                overview on software metrics and how                                they can be used to minimize risk                                and increase the quality of an                                application i will start with coverage                                and as the title suggests i will explore                                its strengths                                and weaknesses and i'll show you why                                coverage alone is not enough                                to assess the risk in your application                                i will then introduce other metrics that                                can be used in conjunction with                                coverage so that i have a more complete                                set of tools for a risk assessment                                finally i will talk about deep blue                                cover what it is and                                the party can play in the reaction of                                risks                                let's start with an example in this                                chart                                using the code coverage of my pro now                                familiar with                                coverage it's that percentage that tells                                us how much our application has been                                tested and frankly we all get obsessed                                with percentages sometimes                                and they end up being the only indicator                                we look at                                and you can see the coverage of this                                project is impressive it reaches                                nine percent and those of you that work                                 in a company where                                 coverage target exists uh know how much                                 time                                 resources it takes to reach these levels                                 however once i hit this number is my                                 work done                                 am i now confident that the risk of this                                 application is low                                 only by looking at this                                            or perhaps someone working with legacy                                 code and                                 which hasn't been sufficiently tested                                 and are working on improving                                 its coverage do i need to reach                                                                                                        in order to find the answer to these                                 questions i                                 need to have a closer look at my                                 application                                 and at its tests ultimately how am i                                 doubting this                                                        is necessary it effectively catches                                 regressions                                 and increases quality                                 let's start by having a look at some of                                 the code that has been covered                                 in this we're still looking at the                                 applique                                 from my previous example but i have                                 zoomed in                                 on one specific class and its methods                                 the coverage of this class is                                         when i look at the method names i notice                                 they're all getters and setters                                 plus the class constructor for those of                                 you not familiar with the concept                                 these are very common methods that tend                                 to be very short                                 most of the time just one line and they                                 con                                 logic and at diff blue we call this                                 trivial methods in other words this                                 class                                 and its methods are not contributing any                                 significant risk                                 for my application writing test for                                 these methods is not                                 a good use of developers time and                                 clearly testing is fitting this                                 the code good coverage so it makes us                                 feel better                                 but this does not decrease the risk in                                 my application in any significant                                 way                                 what that has been covered and                                 does contain logic an example of a cloud                                 that i called calculator it has a single                                 method called divide                                 and as you may expect given two numbers                                 it returns the numerator                                 divided by the denominator                                 and here is the unit test very simple it                                 just checks that dividing one by one                                 results in one                                 the class calculator has                                                 have tested every line of the code                                 but clearly the risk isn't mitigated and                                 my application is not                                     safe from failure i haven't tested for                                 example what happens                                 if i divide by zero if i try and divide                                 by zero my application will throw an                                 exception                                 and if that's not handled my application                                 will crash                                 in the worst case i may even lose                                 important information being processed by                                 my application                                 in this case                                                      protect me from failure                                 and finally let's have a look at code                                 that hasn't been covered                                 just because ninety percent of the code                                 has been tested it doesn't mean                                 that a failure cannot happen in the                                 remaining ten percent                                 it just takes a bug in a single line to                                 potentially cause                                 destructive damage let's see an example                                 i                                 focus on one untested piece of code                                 and i have some information about it                                 it was written a long time ago its                                 author may even have left the company                                 it hasn't been touched in nine years i                                 can see that                                 the class is bigger than the average                                 and i had a look inside and i saw it was                                 pretty complex                                 so what is this piece of code                                 it is the function that restores backups                                 after a failure                                 it is critical for my application it's                                 only used                                 in case of emergency so we don't need                                 this functionality very often                                 but when we do we cannot afford a                                 failure it must work                                 and it must work properly so in this                                 case coverage                                 has been helpful it has been pointing to                                 the class connected to the highest risk                                 my mistake was that i stopped at the                                 headline figure                                    and i haven't looked at the breakdown by                                 classes and methods                                 so as we've seen coverage gives us some                                 information about our project                                 and can guide us towards the riskiest                                 part of our code base                                 the coverage needs to be inspected                                 closely and                                 is still not enough to protect us from                                 failures                                 so what can i do to mitigate the risk of                                 failure in my project                                 it all boils down to having a deeper                                 understanding                                 of the code and there are a lot of other                                 metrics                                 that can help us with that                                 i have selected four popular metrics                                 that together with coverage can complete                                 the picture and provide enough                                 information for me to spot                                 the risks in my code                                 i will talk about each one of them in                                 the next few slides                                 but i want you to keep in mind that none                                 of this metrics                                 on his own is the solution to all of my                                 problems                                 and is by using them together that i                                 build up more and more confidence                                 in my piece of software                                 the first metric i want to suggest is                                 the stability                                 sometimes the reason for a lack of                                 coverage in an area of my code base is                                 that my code is not testable                                 perhaps i'm writing a test for a                                 specific piece of code but                                 i cannot access all of it and this makes                                 it impossible for me to verify the                                 behavior of my code                                 with unit tests the situation i just                                 described could be called                                 pool testability                                 in the context of unit tests a method is                                 testable when i can fully control                                 its inputs and fully observe its effects                                 if you're working on increasing the                                 coverage of a project and you're                                 struggling to                                 write tests for a specific method or                                 class                                 double check the testability of the                                 source code                                 sometimes the solution to reduce risk                                 involves a refactoring of the code                                 to increase the testability                                 here i have an example of a method with                                 pool testability                                 as you can see the method increment                                 modifies                                 a private attribute of the class counter                                 and does not return                                 any value when i try and write a test                                 for this method i realize                                 that i have no way of checking the new                                 value of the private attribute                                 counter a simple refactoring that                                 improves the testability of this code                                 involves                                 adding a method that returns the private                                 attribute counter                                 and after that i can successfully test                                 that the value has been                                 incremented as as expected                                 the next metric is cyclomatic complexity                                 it's                                 a metric that quantifies how complex my                                 code is                                 is an example of a piece of code and                                 every piece of code can be represented                                 by a diagram like the one that i've                                 drawn                                 on the right every blue node represents                                 a set of instructions and every yellow                                 node represents                                 a decision point the formula for                                 calculating this metric is simple                                 and as shown in the slide the complexity                                 for this piece of code is                                 three the higher the complexity for a                                 piece of code the higher the risk                                 of making mistakes in order to reduce                                 risk                                 we want to keep the complexity low                                 let's check once again the project that                                 i've been using                                 as an example at the beginning of this                                 presentation                                 this time the callers are expressing the                                 complexity                                 of each part of my project                                 here this metric is highlighting classes                                 and methods with                                 medium complexity and really pointing at                                 four methods where the complexity is                                 high                                 in order to reduce the risk i have to                                 make sure that these                                 methods are well tested                                 alternatively by breaking down a complex                                 method into                                 multiple smaller units of functionality                                 we reduce the complexity making it                                 easier to test                                 the code and thus help reduce risk                                 and different sources suggest different                                 thresholds but                                 if the complexity of a piece of code                                 exceeds                                                                                                      another technique to determine risks                                 connected                                 to a piece of software is analyzing the                                 dependencies between classes                                 in the chart in this slide each circle                                 represents a class                                 and dependencies between classes are                                 represented by arrows                                 when i have multiple classes depending                                 on the correct behavior of a single                                 class                                 like for example the green circle in the                                 middle of this                                 graphic then i can say that the risk                                 of that class is high because a single                                 failure there                                 can cause multiple errors in the rest of                                 my application                                 in order to mitigate the risk in this                                 case i want to make sure that                                 classes that are highly depended on are                                 well tested                                 and i have a warning here pieces of code                                 that are not                                 depended on by others are not                                 necessarily less critical                                 i should avoid testing i should not                                 avoid testing code                                 just because no other part of my                                 application depends on it                                 if you remember the example that i gave                                 with the function that restores backup                                 after a failure you can immediately see                                 how it applies here                                 the main purpose of unit tests is to                                 identify                                 incorrect behaviors of my code or                                 regressions                                 mutation testing is a technique                                 that verifies the ability of your test                                 to catch                                 these mistakes it consists of changing                                 your source code by introducing                                 mutations                                 this mutation should result in failures                                 in your tests                                 if a test does not fail and return                                 returns are                                 false positive this means that the tests                                 are of poor quality and are not a good                                 indicator                                 of the core behavior of the application                                 let's see an example here i have again                                 my                                 divide method we could add a mutation                                 by changing the division operator to                                 multiplication                                 and now the method divide multiplies                                 which is definitely not                                 the expected behavior so i need my tests                                 to tell me that a regression has been                                 introduced                                 by looking at the test i can see that                                 what happens is                                 one is multiplied by one the result                                 is still one the test passes and the                                 regression has me                                 caught                                 there are tools available for the most                                 popular programming languages here for                                 example i'm using pit test                                 they can automatically introduce                                 mutations run the tests                                 and check that your tests are actually                                 catching                                 regressions                                 and last i have a suggestion on how to                                 use time more efficiently                                 when writing unit tests i already                                 mentioned trivia methods                                 these pieces of code with very little                                 risk connected to them                                 the problem with writing tests for                                 trivial methods is that they create                                 a lot of noise unnecessarily in addition                                 to costing time and resources                                 in my example there are                                                                                                    i can still achieve coverage by testing                                 them indirectly                                 what i mean by that is that this                                 trivial methods are typically invoked                                 from other classes                                 and by testing these classes all my                                 trivial methods can be effectively                                 covered without having to spend                                 additional time                                 writing tests for each trivial method                                 we've seen how each one of these metrics                                 can add to my understanding of the                                 project                                 and can point me in the right direction                                 to identify                                 and mitigate risk but what happens once                                 i'm done                                 and the risk in my project is low                                 software projects are changing all the                                 time                                 new features are added some libraries or                                 dependencies need to be updated                                 and keeping on top of all these changes                                 and                                 writing new tests and adjusting the the                                 existing ones                                 is a lot of work or perhaps you realize                                 that                                 your project does not have enough tests                                 and you're organizing with your team to                                 work on it this blue cover                                 automates unit test generation and                                 maintenance for java projects                                 and is available for free for use on                                 finos open source projects                                 this blue cover uses ai techniques to                                 produce valuable tests                                 that appear exactly like tests a human                                 would write                                 we find the pathways through your code                                 simulate                                 real-world inputs and generate tests                                 that describe the current behavior                                 of your code we also generate detailed                                 reports that show you the potential                                 risks                                 as we've discussed in this talk there                                 are several ways to use it                                 there is a command line version that can                                 be run from your terminal                                 or it can be scripted and used inside                                 any ci pipeline                                 so that every time new code is committed                                 to a repository                                 cover can generate and maintain the unit                                 tests                                 for you automatically and if look over                                 is also available as a plugin for                                 intellij                                 and it's incredibly easy to install and                                 use                                 now let's have a look at the sample test                                 here we have a test generated by div                                 blue cover                                 that for a class that uploads documents                                 to the                                 aws cloud it's really important that                                 developers can                                 open this test and immediately                                 understand exactly what's going on                                 they don't have time to decipher garbage                                 tests                                 and as you can see this test is very                                 readable                                 if we cover creates a mock for the                                 amazon s                                         initialize the objects needed for the                                 tests                                 defines the behavior of the mock and                                 then goes on to creating                                 all the necessary assertions to exercise                                 the behavior                                 of the method we can also see that                                 upload file to bucket has some string                                 parameters                                 and we don't just use strings like full                                 and bar                                 or null values we use reinforcement                                 learning techniques to                                 to determine valid inputs and ensure                                 that they are appropriately                                 human readable                                 so we've seen that the cover where the                                 coverage falls short                                 and that by using multiple metrics                                 together we can achieve a better                                 understanding of the code                                 starting from the parts of our                                 applications that                                 we haven't covered inspecting issues                                 with the stability                                 making sure that the most complex parts                                 of my code                                 as well as the most depended on are well                                 tested                                 and using mutation score to verify the                                 quality of our tests                                 by doing this we are able to identify                                 risks in our code and mitigate it                                 we've seen how the cover can                                 automatically generate                                 generate unit tests for you and how it                                 can                                 guide you to improve your project                                 testability                                 i know there are a few minutes for                                 questions if there's                                 anything else you want to ask me in the                                 next few days                                 or if you want just to have a chat feel                                 free to send me an email to lenriko.                                   at diffblue.com and you can get started                                 with the                                 deep blue cover for venus projects by                                 visiting                                 blue slash finos                                 thanks for your attention and i'm happy                                 to answer any question                                 you may have                                 enrique thank you very much for that                                 presentation um                                 it was extremely insightful thank you                                 and that we do actually have a couple of                                 um                                 questions um the first coming from                                 ross rhodes um who asks it sounds like                                 um sorry my questions have just                                 refreshed it sounds like diff                                 blue cover is tailored specifically to                                 java                                 and he plans to broaden horizons to say                                 python                                 right um yes it is true this blue cover                                 is                                 tailored for java and um                                 we kind of have a roadmap for expanding                                 to other languages but                                 we haven't published it yet python is                                 particularly                                 it's quite different from java so it's                                 not at the top of                                 our list i must say um                                 but yeah who knows okay                                 that's awesome um and uh manus also asks                                 um does difficulty work for android java                                                                   um so diff blue                                 div blue cover reads java byte code                                 and as long as                                 the language used for example kotlin                                 generates java byte code                                 then this blue cover can read it                                 interpret it and generate tests                                 but of course the tests at least right                                 now they are they are generated                                 in java so this is this is the catch                                 um as i mentioned earlier there is                                 a road map that that involves having uh                                 expanding to other languages in the                                 future but we are                                 not quite there yet                                 right awesome um before i ask any um                                 further questions i'd like to actually                                 announce um the finos t-shirt winners                                 for                                 people who are on the call right now so                                 um                                 the the people behind the scenes have                                 actually picked two people from random                                 um who registered for the event and i'm                                 pleased to say that parvis                                 aravi from intel um and robin wise                                 from fidelity um will both be shipped                                 um finos t-shirts um from the finis team                                 and so no doubt um somebody will be in                                 contact um                                 with you in order to get your address                                 okay amico if it's okay with you i've                                 got another question to ask and if um                                 uh people would also like to ask their                                 questions in chat                                 as well um we've got a few minutes um                                 left                                 in the q a so feel free to ping your                                 your questions in chat                                 um can i ask the question is there                                 anything to be worried about when using                                 ai to develop tests                                 all right well yes                                 ais are less deterministic than                                 traditional code they use more advanced                                 techniques so                                 we have to make sure that we can                                 reproduce                                 every time step by step and have a                                 reliable                                 result every time of course at this blue                                 we have a lot of effort                                 into uh into making this blue cover our                                 product                                 as reliable as it can possibly get                                 yes so i would say that this this is the                                 main risk and and                                 what we should be worried about talking                                 about                                 generic ai tools that can be used                                 right that's great and um mana says                                 thank you for your answer                                 in chat um it's um it's our potential                                 manners                                 um okay so another question if software                                 is developed by multiple engineers                                 how do you ensure test cover is in place                                 where different areas of the product                                 interact                                 all right if we are talking about                                 dependencies                                 and how um uh                                 one object uses another let's say for                                 four                                 object-oriented languages at least unit                                 tests                                 can use                                 each other each other's code for                                 different parts of the application                                 so in this case it would be covered                                 there are                                 other cases of course in which                                 integration tests can                                 help us testing the integration between                                 different systems                                 right that's thank you very much for                                 answering that and then finally                                 um can developers evaluate different                                 software against their current projects                                 of course so if we're talking about                                 finos open source projects as i as i                                 mentioned                                 deep blue cover is is free for you and                                 uh                                 here at deaf double slash finals uh                                 you will find out how to um                                 to reach us and and see how you can                                 start using                                 this blue cover for other                                 open source projects we have                                 a community edition which is free it's a                                 plugin for intellij                                 you can find it in the intelligent                                 marketplace                                 and and you can start using it right                                 that's brilliant so thank you so much                                 enrique                                 um for your presentation the code                                 coverage paradox when                                    isn't enough but less might be um                                 so i would like to thank um enrique                                 trenton uh development relations                                 relations lead from differently for                                 joining us this afternoon                                 and also remind everyone to visit                                 finnos.org to subscribe                                 to our mailing lists um where you'll                                 also hear about                                 um other up-and-coming meetups as well                                 and also if you're an engineer or a                                 software developer                                 feel free to head over to the fitness                                 organization                                 at github um dot com forward slash                                 finnos                                 uh to contribute or leverage finnos open                                 source projects                                 um and with that i'd like to say thank                                 you very much enrique for being with us                                 this afternoon                                 thank you thank you
YouTube URL: https://www.youtube.com/watch?v=daiq4cZlgv4


