Title: Ruby3 and beyond by Yukihiro Matsumoto | #NoRuKo 2020
Publication date: 2020-09-11
Playlist: #NoRuKo 2020
Description: 
	Ruby3 is coming! The creator of the language himself explains what is coming with Ruby3. In addition, what will happen after Ruby3.0! 

Yukihiro Matsumoto is the creator of Ruby. What can we really say to introduce Matz better than previous line?

Welcome to the #NoRuKo conference. A virtual unconference organized by Stichting Ruby NL.

#NoRuKo playlist with all talks and panels: https://www.youtube.com/playlist?list=PL9_A7olkztLlmJIAc567KQgKcMi7-qnjg

Recorded 21th of August, 2020.
NoRuKo website: https://noruko.org/
Stichting Ruby NL website: https://rubynl.org/
Captions: 
	00:00:00,160 --> 00:00:04,240
raita why don't you tell us who we've

00:00:01,439 --> 00:00:04,240
got on first

00:00:05,600 --> 00:00:12,320
okay so as the creator of ruby he

00:00:08,880 --> 00:00:14,080
needs little to no introduction at all

00:00:12,320 --> 00:00:16,240
uh he's been working on ruby for more

00:00:14,080 --> 00:00:19,279
than 25 years

00:00:16,240 --> 00:00:21,199
but even the creator of ruby sometimes

00:00:19,279 --> 00:00:23,119
fights with technology a bit you'll

00:00:21,199 --> 00:00:23,439
you'll find out later because he sends

00:00:23,119 --> 00:00:26,480
his

00:00:23,439 --> 00:00:29,840
he sent us his recorded talk and he had

00:00:26,480 --> 00:00:32,559
a bit of challenges with that

00:00:29,840 --> 00:00:34,559
but uh after his stream we will open our

00:00:32,559 --> 00:00:36,800
q a session with him so please

00:00:34,559 --> 00:00:37,600
uh answer uh please uh ask your

00:00:36,800 --> 00:00:40,320
questions

00:00:37,600 --> 00:00:40,800
in our chat i can i don't never i never

00:00:40,320 --> 00:00:44,399
know where

00:00:40,800 --> 00:00:47,440
the chat so please answer your

00:00:44,399 --> 00:00:49,360
uh ask your questions there and uh we'll

00:00:47,440 --> 00:00:52,559
make sure that we'll ask them

00:00:49,360 --> 00:00:54,399
uh to match when he joins us um

00:00:52,559 --> 00:00:56,879
he's going to show us not just what's

00:00:54,399 --> 00:00:59,199
coming with the release of ruby three

00:00:56,879 --> 00:01:00,160
but he will also tell us a bit about the

00:00:59,199 --> 00:01:05,280
future of

00:01:00,160 --> 00:01:05,280
ruby so max take it away

00:01:10,400 --> 00:01:19,040
hi uh this is matt uh

00:01:14,080 --> 00:01:19,040
the creator of the ruby language so that

00:01:20,159 --> 00:01:27,759
yeah today the truth i just failed the

00:01:24,080 --> 00:01:30,799
failed record the previous trial so that

00:01:27,759 --> 00:01:34,479
i'm a little bit tired

00:01:30,799 --> 00:01:35,680
yeah but anyway uh thank you for having

00:01:34,479 --> 00:01:39,600
me to the new

00:01:35,680 --> 00:01:43,040
no no no rico uh movie conference

00:01:39,600 --> 00:01:46,479
uh due to the the coronavirus outbreak

00:01:43,040 --> 00:01:49,680
so that we cannot gather together

00:01:46,479 --> 00:01:53,680
in in any country so that many

00:01:49,680 --> 00:01:55,840
conferences are cancelled but uh

00:01:53,680 --> 00:01:57,920
thank you for the technology so that we

00:01:55,840 --> 00:02:00,960
can uh

00:01:57,920 --> 00:02:04,159
share our ideas

00:02:00,960 --> 00:02:07,280
and then the plans to

00:02:04,159 --> 00:02:10,000
to the community through the internet

00:02:07,280 --> 00:02:11,440
but today i'm going to talk about the

00:02:10,000 --> 00:02:14,480
ruby 3

00:02:11,440 --> 00:02:14,480
and then beyond

00:02:15,120 --> 00:02:22,879
so the last

00:02:18,400 --> 00:02:26,080
4-5 years i have been talking about

00:02:22,879 --> 00:02:28,480
the the future ruby 3 for a long long

00:02:26,080 --> 00:02:28,480
time

00:02:28,560 --> 00:02:35,200
so maybe you are sick of

00:02:32,239 --> 00:02:37,440
hearing about the ruby 3 from me so that

00:02:35,200 --> 00:02:39,519
i started

00:02:37,440 --> 00:02:43,200
explaining about the ruby three in the

00:02:39,519 --> 00:02:47,920
past rocco rubyconf and ruby keighi

00:02:43,200 --> 00:02:47,920
but uh but this year

00:02:49,200 --> 00:02:55,680
this is this is real

00:02:52,480 --> 00:02:59,440
uh it will be

00:02:55,680 --> 00:03:05,840
available on december 25th 2020

00:02:59,440 --> 00:03:05,840
as we planned so that if

00:03:06,400 --> 00:03:14,239
if everything okay unless

00:03:09,519 --> 00:03:17,519
we something very very bad happens

00:03:14,239 --> 00:03:20,560
so that we will we will release

00:03:17,519 --> 00:03:23,599
the ruby 3 on december this year

00:03:20,560 --> 00:03:26,640
so that in the past i told you about the

00:03:23,599 --> 00:03:29,920
ruby 3 will be available on the

00:03:26,640 --> 00:03:31,360
the year of tokyo olympic but uh due to

00:03:29,920 --> 00:03:34,080
the corona virus

00:03:31,360 --> 00:03:35,280
so the the tokyo olympic was passed on

00:03:34,080 --> 00:03:39,200
to the next year

00:03:35,280 --> 00:03:42,799
so that yes some people in the community

00:03:39,200 --> 00:03:46,000
the talk discussed about the okay

00:03:42,799 --> 00:03:49,200
shall we pass upon the

00:03:46,000 --> 00:03:52,799
release of ruby 3 to the next year

00:03:49,200 --> 00:03:56,799
because the talking origins postponed

00:03:52,799 --> 00:04:00,239
but it after some discussions

00:03:56,799 --> 00:04:04,640
we decided to release

00:04:00,239 --> 00:04:08,879
ruby 3 on december this year

00:04:04,640 --> 00:04:12,959
because we need to move forward

00:04:08,879 --> 00:04:16,000
so that it's as a open source community

00:04:12,959 --> 00:04:19,680
we have to move forward

00:04:16,000 --> 00:04:21,840
we have to keep moving so that's why we

00:04:19,680 --> 00:04:24,560
work on ruby three

00:04:21,840 --> 00:04:26,840
so that that's why we are working so

00:04:24,560 --> 00:04:30,400
hard

00:04:26,840 --> 00:04:33,600
the open source community in general

00:04:30,400 --> 00:04:37,520
cannot stop stop evolving

00:04:33,600 --> 00:04:37,520
otherwise it will die

00:04:37,680 --> 00:04:45,040
so you know everyone likes new things

00:04:42,000 --> 00:04:48,080
so that as a programmer as an engineer

00:04:45,040 --> 00:04:52,000
so that i like new things so that

00:04:48,080 --> 00:04:54,400
i'm a i also a language geek

00:04:52,000 --> 00:04:55,520
so i like to study about the new

00:04:54,400 --> 00:04:56,880
programming language

00:04:55,520 --> 00:04:58,720
so the new programming language like

00:04:56,880 --> 00:05:02,479
elixir rust

00:04:58,720 --> 00:05:03,199
go or whatever so that there are many

00:05:02,479 --> 00:05:05,120
many

00:05:03,199 --> 00:05:06,560
new programming languages out there so

00:05:05,120 --> 00:05:11,759
that they are very

00:05:06,560 --> 00:05:16,000
exciting it's they are very exciting

00:05:11,759 --> 00:05:19,360
to for new ideas new technologies

00:05:16,000 --> 00:05:24,479
so yeah it's it's kind of

00:05:19,360 --> 00:05:26,240
joy to learn new things but you know the

00:05:24,479 --> 00:05:30,080
ruby is kind of old

00:05:26,240 --> 00:05:33,199
the it it was released on 95

00:05:30,080 --> 00:05:36,639
to the to the internet so that it is

00:05:33,199 --> 00:05:38,960
25 years old if uh

00:05:36,639 --> 00:05:42,240
the birth of the language was defined by

00:05:38,960 --> 00:05:45,520
the the first lady state

00:05:42,240 --> 00:05:47,039
but at the at the same time no one wants

00:05:45,520 --> 00:05:51,120
pain

00:05:47,039 --> 00:05:54,720
we have so many web applications

00:05:51,120 --> 00:05:58,479
out there so that if

00:05:54,720 --> 00:06:01,520
we progress we change the new

00:05:58,479 --> 00:06:04,000
we change the ruby for new ideas new

00:06:01,520 --> 00:06:07,199
technologies

00:06:04,000 --> 00:06:09,280
at the but uh you have to upgrade your

00:06:07,199 --> 00:06:12,319
application

00:06:09,280 --> 00:06:16,319
very heavily so that that's pain so that

00:06:12,319 --> 00:06:18,160
no one wants pain in that sense really

00:06:16,319 --> 00:06:21,759
should be stable

00:06:18,160 --> 00:06:25,039
it's kind of a contradiction right

00:06:21,759 --> 00:06:26,160
so the the language design and the

00:06:25,039 --> 00:06:29,600
language plan

00:06:26,160 --> 00:06:29,600
are very hard to

00:06:30,720 --> 00:06:37,680
overcome this kind of contradiction

00:06:35,199 --> 00:06:38,400
the that kind of contradictions from our

00:06:37,680 --> 00:06:40,240
heart

00:06:38,400 --> 00:06:42,800
so that that's contradiction in our

00:06:40,240 --> 00:06:46,639
heart human mind

00:06:42,800 --> 00:06:50,319
so the in a

00:06:46,639 --> 00:06:53,680
i we are not we are more mere mortal

00:06:50,319 --> 00:06:54,479
so we made mistakes so that we language

00:06:53,680 --> 00:06:59,520
designers

00:06:54,479 --> 00:07:02,240
want to fix the mistakes in the past

00:06:59,520 --> 00:07:03,919
so the in the history of programming

00:07:02,240 --> 00:07:07,440
language many programming

00:07:03,919 --> 00:07:10,479
languages are made up the

00:07:07,440 --> 00:07:14,319
changes incompatible changes

00:07:10,479 --> 00:07:18,160
to fix the past mistakes for example

00:07:14,319 --> 00:07:23,199
the ruby one nine made a huge gap

00:07:18,160 --> 00:07:23,199
from ruby one eight to

00:07:24,000 --> 00:07:30,720
to fix the past mistakes

00:07:27,680 --> 00:07:33,840
and then things happened to

00:07:30,720 --> 00:07:37,039
python 2 and python 3. and

00:07:33,840 --> 00:07:37,039
the php community

00:07:38,560 --> 00:07:47,120
tried to overcome the drawbacks

00:07:42,720 --> 00:07:52,080
we had they had in our php five

00:07:47,120 --> 00:07:55,280
and then the ecmascript fold as well

00:07:52,080 --> 00:08:00,800
they try to change the

00:07:55,280 --> 00:08:05,360
mistakes in fixed mistakes in

00:08:00,800 --> 00:08:08,639
ms ecmascript 3 or prior

00:08:05,360 --> 00:08:10,000
but uh in fact no one wants pain so the

00:08:08,639 --> 00:08:13,039
compatibility matters

00:08:10,000 --> 00:08:18,319
so that when we made

00:08:13,039 --> 00:08:21,759
big change big big compatibility gap

00:08:18,319 --> 00:08:25,240
so that we had some you know

00:08:21,759 --> 00:08:28,639
tragic situation for example

00:08:25,240 --> 00:08:32,000
ruby18 that some people

00:08:28,639 --> 00:08:36,880
stayed using ruby one eight

00:08:32,000 --> 00:08:40,399
so that for ruby community

00:08:36,880 --> 00:08:43,680
to migra migrate to

00:08:40,399 --> 00:08:47,839
to ruby one nine or later

00:08:43,680 --> 00:08:50,320
it we took five years more than five

00:08:47,839 --> 00:08:50,320
years

00:08:50,640 --> 00:08:58,160
to to move on to ruby 2o

00:08:54,399 --> 00:09:02,880
or the newer ruby

00:08:58,160 --> 00:09:06,880
the python 3 was even worse

00:09:02,880 --> 00:09:10,000
that this year year 2020

00:09:06,880 --> 00:09:11,040
the they declare the end of life of

00:09:10,000 --> 00:09:14,160
python 2

00:09:11,040 --> 00:09:17,360
officially so the the

00:09:14,160 --> 00:09:20,480
whole person community forced to

00:09:17,360 --> 00:09:24,160
move on to pi neural partisan python 3

00:09:20,480 --> 00:09:26,959
but they took 15 years

00:09:24,160 --> 00:09:26,959
to move on

00:09:27,360 --> 00:09:34,399
yeah php6 was even cancelled

00:09:31,040 --> 00:09:37,600
they just gave up to make a big big

00:09:34,399 --> 00:09:38,240
change before the release so that they

00:09:37,600 --> 00:09:42,560
start

00:09:38,240 --> 00:09:48,080
php 7 from php5

00:09:42,560 --> 00:09:48,080
the ecmascript 4 also cancelled

00:09:49,200 --> 00:09:54,240
so the uh

00:09:52,399 --> 00:09:55,839
you know the language design reflects

00:09:54,240 --> 00:09:59,120
human mind so that

00:09:55,839 --> 00:10:02,560
if we don't make change

00:09:59,120 --> 00:10:06,000
so that people are bored you know

00:10:02,560 --> 00:10:10,000
people just leave from the community

00:10:06,000 --> 00:10:13,519
they stop this they stop using ruby

00:10:10,000 --> 00:10:16,800
just because they're boring but

00:10:13,519 --> 00:10:19,200
if they feel too much pain

00:10:16,800 --> 00:10:20,160
in using it on the migrating newer

00:10:19,200 --> 00:10:23,920
version

00:10:20,160 --> 00:10:27,279
so that they just leave

00:10:23,920 --> 00:10:30,000
for the next project okay okay we

00:10:27,279 --> 00:10:30,480
suffered in the past ruby changes so

00:10:30,000 --> 00:10:33,440
that

00:10:30,480 --> 00:10:34,640
we that maybe we our next project will

00:10:33,440 --> 00:10:37,680
be written named

00:10:34,640 --> 00:10:41,360
say rust gold

00:10:37,680 --> 00:10:44,640
whatever yep

00:10:41,360 --> 00:10:45,839
so that yeah so we don't know about the

00:10:44,640 --> 00:10:49,120
human mind so that

00:10:45,839 --> 00:10:52,959
it's pretty difficult to

00:10:49,120 --> 00:10:56,079
to you know predict

00:10:52,959 --> 00:10:57,200
so that design just i said designing

00:10:56,079 --> 00:11:00,640
luggage is hard

00:10:57,200 --> 00:11:03,839
but we need to move forward anyway to

00:11:00,640 --> 00:11:07,040
create a future so

00:11:03,839 --> 00:11:11,360
the ruby 3 is the future we

00:11:07,040 --> 00:11:14,720
have to we have to make

00:11:11,360 --> 00:11:18,000
we have to cheer up the community

00:11:14,720 --> 00:11:18,480
so the basic principle of ruby 3 is we

00:11:18,000 --> 00:11:21,360
should

00:11:18,480 --> 00:11:22,240
keep compatibility but we can make it

00:11:21,360 --> 00:11:25,680
great

00:11:22,240 --> 00:11:28,880
and we will make it great

00:11:25,680 --> 00:11:32,480
by making ruby faster and then

00:11:28,880 --> 00:11:36,000
making ruby programmers more productive

00:11:32,480 --> 00:11:39,279
okay uh the three

00:11:36,000 --> 00:11:42,800
three major goals of ruby three will be

00:11:39,279 --> 00:11:48,399
being fast being concurrent being

00:11:42,800 --> 00:11:51,519
correct the faster ruby

00:11:48,399 --> 00:11:53,760
can be achieved by many things you know

00:11:51,519 --> 00:11:54,880
the existing improvement is one of them

00:11:53,760 --> 00:11:57,600
and legit is the

00:11:54,880 --> 00:11:59,040
major major part of improving

00:11:57,600 --> 00:12:01,839
performance

00:11:59,040 --> 00:12:04,240
g stands for just in time compiler it

00:12:01,839 --> 00:12:07,680
dynamically engineers native code

00:12:04,240 --> 00:12:11,519
with a algebra compiler named mj

00:12:07,680 --> 00:12:15,600
by using mj ruby runs three times faster

00:12:11,519 --> 00:12:18,079
in some benchmarks but

00:12:15,600 --> 00:12:19,839
unfortunately nothing rails applications

00:12:18,079 --> 00:12:23,519
yet

00:12:19,839 --> 00:12:27,040
actually we're improving the

00:12:23,519 --> 00:12:30,240
the when the mgt was first came in in

00:12:27,040 --> 00:12:31,120
to four ruby two four the railroad

00:12:30,240 --> 00:12:34,800
application

00:12:31,120 --> 00:12:38,639
runs far slower using jet

00:12:34,800 --> 00:12:41,760
but uh now uh using ruby two seven

00:12:38,639 --> 00:12:47,360
rails application runs as fast as

00:12:41,760 --> 00:12:50,880
with a jet so we are improving

00:12:47,360 --> 00:12:54,800
uh concurrency is the another goal

00:12:50,880 --> 00:12:58,320
of the ruby 3. so in the past

00:12:54,800 --> 00:13:01,200
you know for example when i was working

00:12:58,320 --> 00:13:04,639
on the the first version of ruby

00:13:01,200 --> 00:13:09,519
in 27 years ago

00:13:04,639 --> 00:13:13,680
the one computer has only one cpu

00:13:09,519 --> 00:13:16,160
but but nowaday

00:13:13,680 --> 00:13:17,040
the even the smartphones have eight

00:13:16,160 --> 00:13:20,800
cores

00:13:17,040 --> 00:13:25,440
or so many cores so that

00:13:20,800 --> 00:13:29,360
using those many cores are very critical

00:13:25,440 --> 00:13:33,680
for making performance

00:13:29,360 --> 00:13:37,519
they're using more core to run fast

00:13:33,680 --> 00:13:40,240
we are achieving this by twofold

00:13:37,519 --> 00:13:42,480
one is the asian guy of fiber the other

00:13:40,240 --> 00:13:45,600
is rocter

00:13:42,480 --> 00:13:49,920
ancient glyphos fiber is

00:13:45,600 --> 00:13:53,040
uh is a kind of fiber to to

00:13:49,920 --> 00:13:56,959
multiply io axis

00:13:53,040 --> 00:13:59,199
so to improve the io bottlenecks

00:13:56,959 --> 00:14:02,639
so that some other language uses the

00:13:59,199 --> 00:14:05,839
async and await

00:14:02,639 --> 00:14:08,959
but we we use fibers

00:14:05,839 --> 00:14:13,360
for example node.js the

00:14:08,959 --> 00:14:16,800
at the beginning in node.js every io

00:14:13,360 --> 00:14:20,480
comes with the callbacks and then that

00:14:16,800 --> 00:14:20,480
result in the kobach hell

00:14:20,800 --> 00:14:27,600
then they introduced the promises

00:14:24,160 --> 00:14:31,120
so that the cobaccal

00:14:27,600 --> 00:14:34,880
became the promised chain

00:14:31,120 --> 00:14:37,760
then in exoscript seven

00:14:34,880 --> 00:14:38,560
i think uh they introduced the

00:14:37,760 --> 00:14:41,839
asynchrony

00:14:38,560 --> 00:14:45,279
await so that we can

00:14:41,839 --> 00:14:48,560
write down the the sequential way

00:14:45,279 --> 00:14:52,880
as long as uh at the same time we

00:14:48,560 --> 00:14:56,560
multiply the the i o

00:14:52,880 --> 00:14:59,600
i axis so ruby three

00:14:56,560 --> 00:15:02,639
will come with the ashing i o fiber

00:14:59,600 --> 00:15:03,279
so the since we use fibers we don't add

00:15:02,639 --> 00:15:06,560
any new

00:15:03,279 --> 00:15:10,639
keywords like a async and ah wait

00:15:06,560 --> 00:15:12,320
uh just those eye operations in those

00:15:10,639 --> 00:15:16,000
fibers i o fibers

00:15:12,320 --> 00:15:19,199
so the switch context so that

00:15:16,000 --> 00:15:22,320
uh you know

00:15:19,199 --> 00:15:26,560
async aging i o fiber does not you

00:15:22,320 --> 00:15:27,120
utilize the multi-cores but uh utilize

00:15:26,560 --> 00:15:30,320
the

00:15:27,120 --> 00:15:34,639
the blocking time to process other

00:15:30,320 --> 00:15:37,279
things like just just like a node.js

00:15:34,639 --> 00:15:37,839
we since the context switches between

00:15:37,279 --> 00:15:41,759
fibers

00:15:37,839 --> 00:15:45,680
is fast so that we can

00:15:41,759 --> 00:15:48,800
improve the performance uh

00:15:45,680 --> 00:15:51,759
the ruby applications server

00:15:48,800 --> 00:15:52,800
named falcom is based on the similar

00:15:51,759 --> 00:15:56,000
technology

00:15:52,800 --> 00:16:00,000
and uh it's it's brilliantly fast

00:15:56,000 --> 00:16:03,199
so that uh we expect

00:16:00,000 --> 00:16:04,399
uh the performance improvement using ice

00:16:03,199 --> 00:16:08,959
agent io fiber

00:16:04,399 --> 00:16:12,720
actually the the

00:16:08,959 --> 00:16:16,079
a guy who created the falcon uh in chi

00:16:12,720 --> 00:16:18,079
is in charge of the developing the asian

00:16:16,079 --> 00:16:21,360
guy or fiver

00:16:18,079 --> 00:16:25,279
right now that's amir williams

00:16:21,360 --> 00:16:29,759
uh the second one is raptor uh

00:16:25,279 --> 00:16:34,320
rock2 is not reactor but uh

00:16:29,759 --> 00:16:37,360
it's it stands for the ruby actor

00:16:34,320 --> 00:16:41,120
the raptor is for the cpu intensive task

00:16:37,360 --> 00:16:44,160
so to improve the cpu bottlenecks

00:16:41,120 --> 00:16:46,560
it's kind of similar to webworkers

00:16:44,160 --> 00:16:49,519
so that they have the isolated object

00:16:46,560 --> 00:16:53,279
spaces for each reactor

00:16:49,519 --> 00:16:56,959
so that they rock between raptors

00:16:53,279 --> 00:17:00,560
they communicate via channels

00:16:56,959 --> 00:17:06,000
then they don't share the the state

00:17:00,560 --> 00:17:08,799
so that they i mean the immutable state

00:17:06,000 --> 00:17:11,360
so the the sharing between raptors data

00:17:08,799 --> 00:17:14,480
sharing between rockets are very limited

00:17:11,360 --> 00:17:17,520
so the three kinds of things three kind

00:17:14,480 --> 00:17:20,319
of objects can be shared between rockets

00:17:17,520 --> 00:17:21,120
the one is the immutable object numbers

00:17:20,319 --> 00:17:24,079
symbols

00:17:21,120 --> 00:17:25,439
frozen strings or something like that

00:17:24,079 --> 00:17:28,880
but a

00:17:25,439 --> 00:17:32,000
frozen object that

00:17:28,880 --> 00:17:35,200
does not refer another object

00:17:32,000 --> 00:17:38,160
is immutable object

00:17:35,200 --> 00:17:39,120
okay the second for second class second

00:17:38,160 --> 00:17:42,240
kind

00:17:39,120 --> 00:17:45,600
of the the shareable objects are deeply

00:17:42,240 --> 00:17:46,480
frozen objects a deeply frozen object

00:17:45,600 --> 00:17:50,480
means the

00:17:46,480 --> 00:17:55,440
the object which is frozen and then

00:17:50,480 --> 00:17:58,559
the objects refers from that object

00:17:55,440 --> 00:18:02,160
is also frozen recursively

00:17:58,559 --> 00:18:05,520
so those objects are deeply frozen

00:18:02,160 --> 00:18:09,919
object then

00:18:05,520 --> 00:18:13,200
the third kind is cluster modules

00:18:09,919 --> 00:18:14,080
as you know uh the in ruby the classes

00:18:13,200 --> 00:18:17,039
and modules

00:18:14,080 --> 00:18:17,840
are mutable so that we can change the

00:18:17,039 --> 00:18:21,039
classes

00:18:17,840 --> 00:18:24,160
or modules using openclass

00:18:21,039 --> 00:18:26,559
but the the

00:18:24,160 --> 00:18:27,360
accessing classes and modules from the

00:18:26,559 --> 00:18:32,799
raptors

00:18:27,360 --> 00:18:32,799
is exclusively

00:18:34,080 --> 00:18:39,520
protected by the internal mutex

00:18:37,600 --> 00:18:42,160
so that you don't have to worry about

00:18:39,520 --> 00:18:44,559
the changes

00:18:42,160 --> 00:18:46,799
okay the the the classes and moses are

00:18:44,559 --> 00:18:50,240
very special

00:18:46,799 --> 00:18:52,400
well so we don't have the global

00:18:50,240 --> 00:18:56,160
interpreter log in any long anymore

00:18:52,400 --> 00:19:00,240
so that each raptor has uh

00:18:56,160 --> 00:19:04,000
each reactors has uh inter global lock

00:19:00,240 --> 00:19:06,720
i mean that lock so that you know

00:19:04,000 --> 00:19:07,039
in theory i we don't re recommend that

00:19:06,720 --> 00:19:10,000
but

00:19:07,039 --> 00:19:12,000
in theory the you can run the multiple

00:19:10,000 --> 00:19:16,080
threads in the interrupter

00:19:12,000 --> 00:19:19,120
so the uh the threads within the raptor

00:19:16,080 --> 00:19:22,640
is mutually uh exclusive

00:19:19,120 --> 00:19:24,880
using the lock the raptor lock

00:19:22,640 --> 00:19:26,559
but uh we don't have the global

00:19:24,880 --> 00:19:29,919
interface lock so that each

00:19:26,559 --> 00:19:32,160
rocket can run in parallel using

00:19:29,919 --> 00:19:35,679
multi-core

00:19:32,160 --> 00:19:36,720
so that means that we can isolate the

00:19:35,679 --> 00:19:40,000
work

00:19:36,720 --> 00:19:42,960
in into the director so that

00:19:40,000 --> 00:19:45,520
we can use the multi-core that can run

00:19:42,960 --> 00:19:48,720
parallel

00:19:45,520 --> 00:19:51,760
so the the third goal of the ruby 3 is

00:19:48,720 --> 00:19:55,120
the more correct ruby

00:19:51,760 --> 00:19:58,320
the we checks error earlier

00:19:55,120 --> 00:20:01,360
so that to achieve

00:19:58,320 --> 00:20:04,960
that we introduced that

00:20:01,360 --> 00:20:07,280
the kind of static type checks the rbs

00:20:04,960 --> 00:20:08,720
stands for the ruby signature and the

00:20:07,280 --> 00:20:11,760
type profiler

00:20:08,720 --> 00:20:12,559
which generates the rbs and the static

00:20:11,760 --> 00:20:15,840
type checker

00:20:12,559 --> 00:20:19,840
for ruby it's a third party

00:20:15,840 --> 00:20:23,039
the rbs is kind of like a dlts

00:20:19,840 --> 00:20:27,679
of typescript so the

00:20:23,039 --> 00:20:27,679
yeah this is the the obvious example

00:20:27,840 --> 00:20:31,360
the class foo has two methods phone and

00:20:30,159 --> 00:20:34,159
2s

00:20:31,360 --> 00:20:35,600
the fuel methods does not return

00:20:34,159 --> 00:20:39,200
anything

00:20:35,600 --> 00:20:42,400
the 2s it returns strings and it takes

00:20:39,200 --> 00:20:45,600
no no argument or argument

00:20:42,400 --> 00:20:49,200
integer argument okay

00:20:45,600 --> 00:20:52,320
this is kind of similar to ruby but the

00:20:49,200 --> 00:20:55,760
space especially designed to

00:20:52,320 --> 00:20:55,760
describe the type

00:20:55,840 --> 00:20:59,440
so the ruby three ships with the rbs for

00:20:58,159 --> 00:21:02,640
the core liabilities

00:20:59,440 --> 00:21:06,159
like uh the re strings arrays hashes

00:21:02,640 --> 00:21:08,480
or many things so that

00:21:06,159 --> 00:21:09,840
we can use those type information in the

00:21:08,480 --> 00:21:13,520
rvs file

00:21:09,840 --> 00:21:17,039
so to check for the type checker

00:21:13,520 --> 00:21:20,080
or beta id maybe

00:21:17,039 --> 00:21:23,200
id has the better code completion

00:21:20,080 --> 00:21:27,600
or type signature pop-up that

00:21:23,200 --> 00:21:30,720
we can improve the tools

00:21:27,600 --> 00:21:32,799
by using rbs information rvs type

00:21:30,720 --> 00:21:35,280
information

00:21:32,799 --> 00:21:36,720
then we have the tools name the type

00:21:35,280 --> 00:21:38,559
profiler

00:21:36,720 --> 00:21:40,880
the type profiler does some kind of

00:21:38,559 --> 00:21:43,919
naive type checks

00:21:40,880 --> 00:21:44,640
then generate the type rbs type

00:21:43,919 --> 00:21:48,400
information in

00:21:44,640 --> 00:21:49,520
rbs for your application by using the

00:21:48,400 --> 00:21:52,000
technology and the abstract

00:21:49,520 --> 00:21:55,120
interpretation yeah for example

00:21:52,000 --> 00:21:58,080
this is this very silly example

00:21:55,120 --> 00:21:59,280
of the ruby ruby programs the class food

00:21:58,080 --> 00:22:02,320
method food

00:21:59,280 --> 00:22:05,600
and then generate the food instance

00:22:02,320 --> 00:22:09,280
and then call the method food the

00:22:05,600 --> 00:22:12,720
by using the abstract interpretation

00:22:09,280 --> 00:22:15,840
so that we

00:22:12,720 --> 00:22:16,559
statically follows the execution path so

00:22:15,840 --> 00:22:19,600
that

00:22:16,559 --> 00:22:22,559
through method are through class

00:22:19,600 --> 00:22:24,640
the course new method to generate the

00:22:22,559 --> 00:22:28,400
instance of foo class

00:22:24,640 --> 00:22:30,480
then call the method foo with argument

00:22:28,400 --> 00:22:35,520
15.

00:22:30,480 --> 00:22:38,720
that means the free method

00:22:35,520 --> 00:22:39,520
argument a of three method is bound to

00:22:38,720 --> 00:22:42,799
the 15

00:22:39,520 --> 00:22:46,080
which is integer so that we

00:22:42,799 --> 00:22:49,440
can tell a is integer

00:22:46,080 --> 00:22:50,960
then a is integer integer has plot

00:22:49,440 --> 00:22:54,159
method

00:22:50,960 --> 00:22:57,760
with that takes the another

00:22:54,159 --> 00:23:01,360
number so the two a plus two is okay

00:22:57,760 --> 00:23:02,559
we the a has plus method and a plus

00:23:01,360 --> 00:23:06,240
method takes the

00:23:02,559 --> 00:23:09,440
number argument then

00:23:06,240 --> 00:23:11,679
those are the plot method returns

00:23:09,440 --> 00:23:15,039
integer

00:23:11,679 --> 00:23:16,080
then the free method returns b which is

00:23:15,039 --> 00:23:19,840
integer

00:23:16,080 --> 00:23:23,120
that means the uh who

00:23:19,840 --> 00:23:26,159
method returns integer

00:23:23,120 --> 00:23:29,440
so the the type profiler generates

00:23:26,159 --> 00:23:32,320
this rbs for your application the

00:23:29,440 --> 00:23:33,600
there is full class that which has the

00:23:32,320 --> 00:23:37,520
full method

00:23:33,600 --> 00:23:41,200
that takes integer and returns integer

00:23:37,520 --> 00:23:44,799
yeah that's it and uh if you have

00:23:41,200 --> 00:23:47,840
some kind of the the type mismatch

00:23:44,799 --> 00:23:50,559
in your application so that

00:23:47,840 --> 00:23:51,440
you the type profiler cannot find the

00:23:50,559 --> 00:23:54,720
correct

00:23:51,440 --> 00:23:58,159
method in your application

00:23:54,720 --> 00:24:01,760
then then type profiler

00:23:58,159 --> 00:24:04,880
can warn you okay i see

00:24:01,760 --> 00:24:07,440
some kind of type mismatch

00:24:04,880 --> 00:24:10,000
in your application maybe you have bugs

00:24:07,440 --> 00:24:10,000
or something

00:24:12,080 --> 00:24:18,480
so this is what

00:24:15,919 --> 00:24:19,679
type static type checks in ruby does

00:24:18,480 --> 00:24:22,880
actually the

00:24:19,679 --> 00:24:25,440
using those obvious information and the

00:24:22,880 --> 00:24:27,200
some kind of the the additional type

00:24:25,440 --> 00:24:30,799
information in the comment

00:24:27,200 --> 00:24:33,279
so the uh type

00:24:30,799 --> 00:24:34,559
static type checker like a solvent or

00:24:33,279 --> 00:24:37,840
steep

00:24:34,559 --> 00:24:40,320
can check

00:24:37,840 --> 00:24:41,600
your application more extensively and

00:24:40,320 --> 00:24:46,960
find more bugs

00:24:41,600 --> 00:24:49,200
and more more advice to improve

00:24:46,960 --> 00:24:52,240
okay the ruby type check basic is

00:24:49,200 --> 00:24:55,279
fundamentally we don't pursue

00:24:52,240 --> 00:24:58,240
completeness nor soundness

00:24:55,279 --> 00:24:58,640
of the type systems because of the you

00:24:58,240 --> 00:25:02,240
know

00:24:58,640 --> 00:25:05,279
the ruby is ruby ruby is basically

00:25:02,240 --> 00:25:08,960
dynamically typed so that there is very

00:25:05,279 --> 00:25:12,640
uh less type static information of types

00:25:08,960 --> 00:25:15,120
but uh that means the we

00:25:12,640 --> 00:25:17,039
we have some kind of the even we have

00:25:15,120 --> 00:25:20,320
the some kind of the gradual types

00:25:17,039 --> 00:25:21,200
but we cannot we cannot do any sound

00:25:20,320 --> 00:25:23,520
type checks

00:25:21,200 --> 00:25:24,320
so that we just just give up so that if

00:25:23,520 --> 00:25:27,679
you find

00:25:24,320 --> 00:25:31,760
more errors than you know

00:25:27,679 --> 00:25:34,080
then today i think it's okay

00:25:31,760 --> 00:25:37,919
so that we are not going to add the type

00:25:34,080 --> 00:25:37,919
the correlation in the syntax

00:25:38,159 --> 00:25:46,240
then uh we provide

00:25:43,120 --> 00:25:48,320
rbs file the separated file or maybe in

00:25:46,240 --> 00:25:52,480
the yard comment

00:25:48,320 --> 00:25:56,000
and then but not in the language syntax

00:25:52,480 --> 00:25:58,880
maybe you complain about the

00:25:56,000 --> 00:25:59,360
you know the information separation

00:25:58,880 --> 00:26:02,559
maybe

00:25:59,360 --> 00:26:03,760
you fix the code you have to update the

00:26:02,559 --> 00:26:07,279
type information

00:26:03,760 --> 00:26:09,679
so that you know so

00:26:07,279 --> 00:26:10,720
you have to maintain two files instead

00:26:09,679 --> 00:26:13,919
one

00:26:10,720 --> 00:26:17,039
but i think the future editors

00:26:13,919 --> 00:26:19,919
or ides will help you

00:26:17,039 --> 00:26:20,559
to update the type information in the

00:26:19,919 --> 00:26:24,799
separate

00:26:20,559 --> 00:26:26,960
file at the organ app organically

00:26:24,799 --> 00:26:28,000
so that you don't have to worry about

00:26:26,960 --> 00:26:32,480
the code

00:26:28,000 --> 00:26:32,480
the file separation in the future

00:26:33,279 --> 00:26:39,200
then the we are making the

00:26:36,640 --> 00:26:41,600
these thickers even more smarter in the

00:26:39,200 --> 00:26:41,600
future

00:26:41,919 --> 00:26:47,840
in addition in ruby 3 we are making

00:26:44,960 --> 00:26:49,840
ruby even better by adding some new

00:26:47,840 --> 00:26:52,320
syntaxes

00:26:49,840 --> 00:26:53,360
for example pattern matching the hours

00:26:52,320 --> 00:26:56,640
assignment

00:26:53,360 --> 00:26:59,039
or number of block parameters button

00:26:56,640 --> 00:27:02,159
matching is added into seven

00:26:59,039 --> 00:27:06,480
like this so that you don't have to

00:27:02,159 --> 00:27:09,520
you know they construct

00:27:06,480 --> 00:27:12,000
the the aries and the hashes

00:27:09,520 --> 00:27:12,799
instead of the you can write the

00:27:12,000 --> 00:27:15,919
patterns

00:27:12,799 --> 00:27:19,200
like okay you have the record

00:27:15,919 --> 00:27:22,399
named alice which has the the

00:27:19,200 --> 00:27:23,200
children named bob and then retrieve the

00:27:22,399 --> 00:27:26,880
age

00:27:23,200 --> 00:27:30,000
of the bob's age

00:27:26,880 --> 00:27:30,480
then print it or otherwise print we

00:27:30,000 --> 00:27:34,480
don't have

00:27:30,480 --> 00:27:38,080
iris no iris yeah

00:27:34,480 --> 00:27:40,159
the pattern matching is comes very

00:27:38,080 --> 00:27:41,760
you know usable in functional

00:27:40,159 --> 00:27:46,480
programming way so that

00:27:41,760 --> 00:27:46,480
it's it's quite

00:27:46,640 --> 00:27:52,960
handy or convenient okay our assignment

00:27:50,240 --> 00:27:54,480
is the right hand side assignment so

00:27:52,960 --> 00:27:58,640
there

00:27:54,480 --> 00:28:00,720
we chain methods in ruby a lot

00:27:58,640 --> 00:28:02,240
and then in this example we have the

00:28:00,720 --> 00:28:05,360
sequence of the ones through

00:28:02,240 --> 00:28:08,720
100 then map sort

00:28:05,360 --> 00:28:11,679
reverse and then take first five

00:28:08,720 --> 00:28:12,480
so this kind of sequence is not very

00:28:11,679 --> 00:28:16,000
rare

00:28:12,480 --> 00:28:19,200
in the ruby brain but

00:28:16,000 --> 00:28:22,240
in writing this sequence we

00:28:19,200 --> 00:28:25,360
write we our mind

00:28:22,240 --> 00:28:29,039
goes through the uh left to right

00:28:25,360 --> 00:28:32,799
top to bottom that goes like

00:28:29,039 --> 00:28:36,240
this but

00:28:32,799 --> 00:28:39,440
if i need need to

00:28:36,240 --> 00:28:43,279
assign the result in a variable

00:28:39,440 --> 00:28:46,080
we have to move on to the top

00:28:43,279 --> 00:28:46,799
then write down that the name of the

00:28:46,080 --> 00:28:50,880
variable

00:28:46,799 --> 00:28:54,399
an equal sign it's kind of the you know

00:28:50,880 --> 00:28:57,039
unnatural way of the moving of the

00:28:54,399 --> 00:28:58,480
eyeballs and the cursors and all the

00:28:57,039 --> 00:29:01,919
editors

00:28:58,480 --> 00:29:05,520
so instead we if we can

00:29:01,919 --> 00:29:09,200
write the right hand assignment

00:29:05,520 --> 00:29:12,240
yeah we have the sequence we mapped

00:29:09,200 --> 00:29:16,000
salt reverse take 5 then assign to the

00:29:12,240 --> 00:29:19,919
variable okay that's natural so that

00:29:16,000 --> 00:29:23,279
in in the long after the long sequence

00:29:19,919 --> 00:29:26,720
these are assignments pretty handy and

00:29:23,279 --> 00:29:29,039
we don't recommend it everywhere so that

00:29:26,720 --> 00:29:29,760
you don't have to replace the every

00:29:29,039 --> 00:29:32,799
assignment

00:29:29,760 --> 00:29:35,840
in right hand side assignment but uh

00:29:32,799 --> 00:29:39,360
in some cases this is very

00:29:35,840 --> 00:29:40,080
convenient okay number two parameter is

00:29:39,360 --> 00:29:41,760
like this

00:29:40,080 --> 00:29:43,200
so that you don't have to worry about

00:29:41,760 --> 00:29:46,399
the naming

00:29:43,200 --> 00:29:50,080
the the temporary local

00:29:46,399 --> 00:29:52,320
block parameters yeah yeah

00:29:50,080 --> 00:29:52,320
okay

00:29:53,360 --> 00:29:56,880
well and beyond

00:29:57,840 --> 00:30:05,039
so the we are going to release the

00:30:01,039 --> 00:30:08,559
ruby 3-0 this december

00:30:05,039 --> 00:30:10,080
and then we have to what about the life

00:30:08,559 --> 00:30:14,399
after ruby 3

00:30:10,080 --> 00:30:16,240
3-0 the

00:30:14,399 --> 00:30:17,760
i don't think we are going to make any

00:30:16,240 --> 00:30:21,520
big syntax change

00:30:17,760 --> 00:30:24,159
in after ruby 3-0

00:30:21,520 --> 00:30:25,360
because stability matters so the you

00:30:24,159 --> 00:30:28,480
know

00:30:25,360 --> 00:30:32,159
we are not going to make any big

00:30:28,480 --> 00:30:35,200
incompatible changes but uh

00:30:32,159 --> 00:30:38,320
we are we are thinking about the

00:30:35,200 --> 00:30:38,880
working on and improving supporting

00:30:38,320 --> 00:30:42,720
tools

00:30:38,880 --> 00:30:43,200
after with real we have solar glove for

00:30:42,720 --> 00:30:46,000
the

00:30:43,200 --> 00:30:48,240
the language server protocol we have

00:30:46,000 --> 00:30:51,679
solved for static type checking

00:30:48,240 --> 00:30:52,159
or we have steps as well we have rubber

00:30:51,679 --> 00:30:56,880
cup

00:30:52,159 --> 00:31:00,399
for the code linter and then

00:30:56,880 --> 00:31:03,440
those tools are approved

00:31:00,399 --> 00:31:07,200
the better tools enable a

00:31:03,440 --> 00:31:10,559
better user experience so that

00:31:07,200 --> 00:31:12,880
we have to keep moving

00:31:10,559 --> 00:31:15,600
we need i think we need more tools and

00:31:12,880 --> 00:31:19,120
we need to improve those tools

00:31:15,600 --> 00:31:21,679
so the we we should have

00:31:19,120 --> 00:31:22,960
better type checkers and maybe we are

00:31:21,679 --> 00:31:26,320
going to have the

00:31:22,960 --> 00:31:27,919
the ruby formatters or that we

00:31:26,320 --> 00:31:30,240
have to improve the language server

00:31:27,919 --> 00:31:32,480
protocol tools

00:31:30,240 --> 00:31:34,080
or maybe performance tuning tools or

00:31:32,480 --> 00:31:36,960
debugging tools

00:31:34,080 --> 00:31:38,000
those tools that we have those tools

00:31:36,960 --> 00:31:41,120
already

00:31:38,000 --> 00:31:45,279
but uh we have to improve

00:31:41,120 --> 00:31:49,200
those things in addition

00:31:45,279 --> 00:31:52,640
we are making ruby even faster

00:31:49,200 --> 00:31:54,960
by adding for example by adding better

00:31:52,640 --> 00:31:54,960
jet

00:31:57,039 --> 00:32:00,799
the for example the java virtual machine

00:32:00,000 --> 00:32:03,840
in chrome

00:32:00,799 --> 00:32:07,840
and then on an under firefox

00:32:03,840 --> 00:32:10,720
has multi-layer jit that they have the

00:32:07,840 --> 00:32:11,679
you know the the virtual machine which

00:32:10,720 --> 00:32:14,799
is the basic

00:32:11,679 --> 00:32:18,080
fundamentally interpreter they have the

00:32:14,799 --> 00:32:20,960
they have the lightweight uh zit

00:32:18,080 --> 00:32:22,720
compiler which does not do any

00:32:20,960 --> 00:32:26,159
optimization

00:32:22,720 --> 00:32:29,519
then they have the the heavier

00:32:26,159 --> 00:32:34,320
garbage uh digit compiler which does the

00:32:29,519 --> 00:32:38,000
more wide wider optimization

00:32:34,320 --> 00:32:41,120
so that uh for most of the cases

00:32:38,000 --> 00:32:43,200
light widget is good enough

00:32:41,120 --> 00:32:44,240
the compass is very very fast and

00:32:43,200 --> 00:32:47,679
efficient

00:32:44,240 --> 00:32:51,039
but uh for metals

00:32:47,679 --> 00:32:54,320
which is very cold

00:32:51,039 --> 00:32:57,679
very very frequently the there

00:32:54,320 --> 00:33:01,200
is the room for the more

00:32:57,679 --> 00:33:03,919
heavier uh more difficult

00:33:01,200 --> 00:33:03,919
optimization

00:33:04,399 --> 00:33:11,039
the so they have

00:33:07,600 --> 00:33:14,720
multi-layered chain so that our engine

00:33:11,039 --> 00:33:17,600
is kind of the heavyweight jet so that

00:33:14,720 --> 00:33:19,200
maybe we can add the light widget

00:33:17,600 --> 00:33:23,440
between the mg

00:33:19,200 --> 00:33:26,640
and the the virtual machine

00:33:23,440 --> 00:33:27,360
the we have the several candidates so

00:33:26,640 --> 00:33:29,360
the

00:33:27,360 --> 00:33:30,720
meal is one of them with a meal is

00:33:29,360 --> 00:33:33,919
written by the

00:33:30,720 --> 00:33:37,120
vladimir makarov who originally

00:33:33,919 --> 00:33:40,320
written who has originally written

00:33:37,120 --> 00:33:43,679
the mj and then or maybe

00:33:40,320 --> 00:33:49,039
that the nursing uh

00:33:43,679 --> 00:33:51,919
which is is the lower jet background

00:33:49,039 --> 00:33:52,640
so that we are going to improve the many

00:33:51,919 --> 00:33:54,720
things

00:33:52,640 --> 00:33:55,760
especially the supporting tools and the

00:33:54,720 --> 00:33:58,880
performance

00:33:55,760 --> 00:34:03,120
that we will work on the

00:33:58,880 --> 00:34:06,799
life up in life after ruby one world

00:34:03,120 --> 00:34:07,519
one more idea this is just just a crazy

00:34:06,799 --> 00:34:10,639
idea

00:34:07,519 --> 00:34:14,240
but uh i'm thinking

00:34:10,639 --> 00:34:17,679
about the smaller subset of ruby

00:34:14,240 --> 00:34:21,040
which is simpler and more strict

00:34:17,679 --> 00:34:24,480
and hopefully faster

00:34:21,040 --> 00:34:26,399
or easier to optimize which is downward

00:34:24,480 --> 00:34:30,320
compatible which is the subset

00:34:26,399 --> 00:34:33,520
of ruby can run in the

00:34:30,320 --> 00:34:38,240
existing current ruby but not

00:34:33,520 --> 00:34:38,240
all programs run in smaller ruby

00:34:39,440 --> 00:34:43,599
so that any smaller review program can

00:34:41,440 --> 00:34:48,720
run on traditional ruby it is now

00:34:43,599 --> 00:34:51,839
but not in reverse and then

00:34:48,720 --> 00:34:54,320
smaller we can rush down run faster

00:34:51,839 --> 00:34:54,320
hopefully

00:34:54,399 --> 00:34:57,839
and it's just an idea i don't i don't

00:34:57,119 --> 00:35:00,960
know yet

00:34:57,839 --> 00:35:04,320
so that we you know

00:35:00,960 --> 00:35:07,680
we have to uh keep compatibility

00:35:04,320 --> 00:35:08,800
so that the we existing ruby program

00:35:07,680 --> 00:35:12,240
should run

00:35:08,800 --> 00:35:15,280
but uh uh if we stay in

00:35:12,240 --> 00:35:16,240
the this kind of subset of ruby for

00:35:15,280 --> 00:35:20,240
example

00:35:16,240 --> 00:35:23,920
you cannot modify the string object

00:35:20,240 --> 00:35:23,920
or maybe you cannot

00:35:25,680 --> 00:35:32,400
you cannot override the

00:35:29,760 --> 00:35:33,599
you know the integer operator or

00:35:32,400 --> 00:35:37,280
something like that

00:35:33,599 --> 00:35:41,839
that this kind of kind of inflexible

00:35:37,280 --> 00:35:44,960
but much easier to to optimize

00:35:41,839 --> 00:35:48,800
so it's just an idea but uh we have

00:35:44,960 --> 00:35:51,760
i have those many those crazy ideas

00:35:48,800 --> 00:35:52,160
and then we try and we experiment those

00:35:51,760 --> 00:35:55,920
things

00:35:52,160 --> 00:35:59,520
one by one to make ruby great

00:35:55,920 --> 00:36:02,640
anyway we will keep moving forward

00:35:59,520 --> 00:36:06,480
to but with keeping

00:36:02,640 --> 00:36:09,359
compatibility and making you excited

00:36:06,480 --> 00:36:09,359
even in the future

00:36:10,720 --> 00:36:19,200
because we want to make

00:36:14,400 --> 00:36:22,800
our world better and then

00:36:19,200 --> 00:36:26,160
i want you to join our effort

00:36:22,800 --> 00:36:30,000
to make world better

00:36:26,160 --> 00:36:32,320
because programming is fun

00:36:30,000 --> 00:36:33,040
programming can change the world and the

00:36:32,320 --> 00:36:36,960
ruby

00:36:33,040 --> 00:36:41,599
can help you become

00:36:36,960 --> 00:36:45,280
productive programmer and

00:36:41,599 --> 00:36:49,040
with the tools like ruby and you can

00:36:45,280 --> 00:36:55,839
change the world better and

00:36:49,040 --> 00:36:55,839
that's all for today thank you

00:37:18,079 --> 00:37:24,880
wow wow what a kick off

00:37:21,520 --> 00:37:26,400
i thank you so much max for showing that

00:37:24,880 --> 00:37:27,119
uh showing us that glimpse of what's

00:37:26,400 --> 00:37:30,800
coming

00:37:27,119 --> 00:37:32,079
in december um before we jump in to ask

00:37:30,800 --> 00:37:35,440
matt some questions

00:37:32,079 --> 00:37:37,680
um let me tell you folks uh the

00:37:35,440 --> 00:37:38,880
community track is about to start so

00:37:37,680 --> 00:37:42,240
don't go anywhere or

00:37:38,880 --> 00:37:43,200
do go there arno is ready to receive you

00:37:42,240 --> 00:37:46,000
over there

00:37:43,200 --> 00:37:47,520
um bill is up next on the community

00:37:46,000 --> 00:37:49,520
track with the talk

00:37:47,520 --> 00:37:50,640
uh fantastic passwords and where to find

00:37:49,520 --> 00:37:54,000
them

00:37:50,640 --> 00:37:56,000
check it out it's going to be a blast

00:37:54,000 --> 00:37:59,119
we've got some echo going on sorry about

00:37:56,000 --> 00:38:02,240
that um

00:37:59,119 --> 00:38:06,960
so we're now waiting for formats

00:38:02,240 --> 00:38:10,880
to join us yeah hi

00:38:06,960 --> 00:38:15,599
hey hey finally

00:38:10,880 --> 00:38:15,599
thank you for joining us yeah thank you

00:38:15,839 --> 00:38:19,359
so are you are you uh missing having

00:38:18,880 --> 00:38:22,720
these

00:38:19,359 --> 00:38:25,680
uh uh virtual conferences like we do

00:38:22,720 --> 00:38:29,040
have you had a virtual conference before

00:38:25,680 --> 00:38:32,160
uh we i had a little keynote in the

00:38:29,040 --> 00:38:35,599
the following conference but this is

00:38:32,160 --> 00:38:39,359
uh most mostly first time in the

00:38:35,599 --> 00:38:39,359
you know interaction

00:38:42,079 --> 00:38:47,040
well we have some questions from you in

00:38:44,240 --> 00:38:50,320
the uh we had uh in our chat

00:38:47,040 --> 00:38:53,920
um so ramon can you read

00:38:50,320 --> 00:38:56,560
the first question we have sure thing

00:38:53,920 --> 00:38:58,839
so um the first question is do

00:38:56,560 --> 00:39:00,320
individual reactors also have separate

00:38:58,839 --> 00:39:04,240
gcs

00:39:00,320 --> 00:39:08,320
uh no the we have the one

00:39:04,240 --> 00:39:12,480
one big rgc but uh

00:39:08,320 --> 00:39:15,839
we can separate it as a

00:39:12,480 --> 00:39:15,839
you know object space

00:39:18,800 --> 00:39:26,000
because you know the ruby can share some

00:39:23,520 --> 00:39:26,000
objects

00:39:39,760 --> 00:39:46,480
and multiple people asked

00:39:42,800 --> 00:39:47,440
does res work with dynamically generated

00:39:46,480 --> 00:39:52,240
classes

00:39:47,440 --> 00:39:52,240
such as the ones generated by dry types

00:39:52,960 --> 00:39:57,839
basically no

00:39:58,720 --> 00:40:06,000
you know for example the library like

00:40:02,400 --> 00:40:10,960
active record generate classes run time

00:40:06,000 --> 00:40:10,960
but uh the literary your

00:40:22,640 --> 00:40:24,800
you

00:40:26,160 --> 00:40:29,359
for your application

00:40:31,680 --> 00:40:35,680
awesome thanks um tiago is wondering uh

00:40:34,400 --> 00:40:37,520
if a method returned more than one

00:40:35,680 --> 00:40:39,119
variable with different types

00:40:37,520 --> 00:40:41,440
which one should would the checker

00:40:39,119 --> 00:40:45,200
assume always the first one

00:40:41,440 --> 00:40:48,720
uh actually in that case is that is

00:40:45,200 --> 00:40:52,079
that should be the union type so that

00:40:48,720 --> 00:40:55,040
one method returns as for example

00:40:52,079 --> 00:40:56,400
integer at the first first line in the

00:40:55,040 --> 00:40:59,680
some condition

00:40:56,400 --> 00:41:03,760
then the same method returns

00:40:59,680 --> 00:41:09,359
re in the other condition the rbs

00:41:03,760 --> 00:41:09,359
should be the union of integer or re

00:41:13,680 --> 00:41:19,760
so the next question

00:41:17,280 --> 00:41:22,160
so people are very curious so am i can

00:41:19,760 --> 00:41:25,200
we now clear up for once and for all

00:41:22,160 --> 00:41:28,240
please in your slides who is the turtle

00:41:25,200 --> 00:41:28,240
and who is the bunny

00:41:28,880 --> 00:41:35,119
turtle is the timer so that the my

00:41:32,240 --> 00:41:37,680
teen was supposed to be in 30 minutes

00:41:35,119 --> 00:41:39,599
but how much time i consume

00:41:37,680 --> 00:41:40,720
the third represent how much time i

00:41:39,599 --> 00:41:44,079
consume

00:41:40,720 --> 00:41:47,520
the the rabbit is the

00:41:44,079 --> 00:41:50,480
index of the page so that

00:41:47,520 --> 00:41:53,440
if the rabbit is slower than turtle so

00:41:50,480 --> 00:41:55,760
that i have to more pages to consume

00:41:53,440 --> 00:41:55,760
in the

00:41:57,119 --> 00:42:01,040
fantastic thank you thank you uh echoes

00:42:00,400 --> 00:42:04,160
back

00:42:01,040 --> 00:42:07,200
um so one final question

00:42:04,160 --> 00:42:07,200
yeah go ahead

00:42:07,280 --> 00:42:12,000
i just wanted to quote all the amazing

00:42:09,760 --> 00:42:15,040
responses we had in the chat

00:42:12,000 --> 00:42:17,200
like uh um thanks for everything

00:42:15,040 --> 00:42:18,640
my life would be different without your

00:42:17,200 --> 00:42:20,800
work uh thank you

00:42:18,640 --> 00:42:21,839
so many thank yous we got so many thank

00:42:20,800 --> 00:42:24,560
yous uh

00:42:21,839 --> 00:42:25,760
maths for you in the chat you you you

00:42:24,560 --> 00:42:28,960
have changed uh

00:42:25,760 --> 00:42:32,319
you've changed many lives yeah actually

00:42:28,960 --> 00:42:35,520
the community changed my life too

00:42:32,319 --> 00:42:38,560
oh thank you

00:42:35,520 --> 00:42:42,240
so um i think we are at the end of our

00:42:38,560 --> 00:42:46,240
q a session uh thank you again very much

00:42:42,240 --> 00:42:46,240
for joining us yep and

00:42:47,599 --> 00:42:50,800
thank you amazing

00:42:51,839 --> 00:42:57,440
so well folks we're gonna take a short

00:42:56,000 --> 00:42:59,040
break now

00:42:57,440 --> 00:43:04,640
we'll see you back in five minutes for

00:42:59,040 --> 00:43:04,640

YouTube URL: https://www.youtube.com/watch?v=-MohBT-xwbg


