Title: Learning Empathy From Pokemon Blue by Siân Griffin | #NoRuKo 2020
Publication date: 2020-09-11
Playlist: #NoRuKo 2020
Description: 
	Have you ever looked at a bug and wondered why it actually happens? It's easy to chalk it up to sloppy coding but that's almost never the case. In this talk we'll be dissecting a exploit from Pokemon Blue known as the "Missingno" glitch. We'll look at the details of each of the seemingly random bugs behind this exploit. We'll look at why these bugs happened, and the lessons we can apply to our Ruby code more than 20 years later.

Siân Griffin is a former Rails committer, and co-leads the team responsible for crates.io, the package repository for Rust.

Welcome to the #NoRuKo conference. A virtual unconference organized by Stichting Ruby NL.

#NoRuKo playlist with all talks and panels: https://www.youtube.com/playlist?list=PL9_A7olkztLlmJIAc567KQgKcMi7-qnjg

Recorded 21th of August, 2020.
NoRuKo website: https://noruko.org/
Stichting Ruby NL website: https://rubynl.org/
Captions: 
	00:00:00,719 --> 00:00:05,120
sean uh is here they have a presentation

00:00:03,840 --> 00:00:08,080
on learning empathy

00:00:05,120 --> 00:00:09,360
from a bug sean is a former uh rails

00:00:08,080 --> 00:00:12,880
committer

00:00:09,360 --> 00:00:15,440
uh a and he now uh they now co-lead

00:00:12,880 --> 00:00:17,279
the team responsible for crates dot

00:00:15,440 --> 00:00:17,840
that's the package repository for us if

00:00:17,279 --> 00:00:21,199
you've never

00:00:17,840 --> 00:00:22,560
played with that um and then so i asked

00:00:21,199 --> 00:00:24,960
a few questions because

00:00:22,560 --> 00:00:25,920
i'm quite old already so i thought well

00:00:24,960 --> 00:00:28,080
how is that thing

00:00:25,920 --> 00:00:30,000
because it talks about pokemon blue well

00:00:28,080 --> 00:00:30,800
you can make mistakes i've heard but you

00:00:30,000 --> 00:00:32,239
can also do

00:00:30,800 --> 00:00:35,040
really well but i've learned that

00:00:32,239 --> 00:00:38,320
pokemon is both uh

00:00:35,040 --> 00:00:40,000
singular and plural so um

00:00:38,320 --> 00:00:41,440
i've learned way better things today

00:00:40,000 --> 00:00:45,840
already by the way but

00:00:41,440 --> 00:00:45,840
this talk is heavyweight

00:00:50,320 --> 00:00:53,920
uh sorry what's better than learning

00:00:51,520 --> 00:00:56,000
about pokemon

00:00:53,920 --> 00:00:57,440
all right hello everybody my name is

00:00:56,000 --> 00:00:59,039
sean griffin

00:00:57,440 --> 00:01:00,399
i was hoping that there would be a zubat

00:00:59,039 --> 00:01:02,079
emoji for y'all to spam and chat but

00:01:00,399 --> 00:01:03,760
there isn't so there will be a point you

00:01:02,079 --> 00:01:05,199
will know when is time here you can see

00:01:03,760 --> 00:01:06,880
my twitter handle on the slide

00:01:05,199 --> 00:01:08,320
please at me with just all of the

00:01:06,880 --> 00:01:09,520
pictures of zubats i would appreciate

00:01:08,320 --> 00:01:10,880
that very much

00:01:09,520 --> 00:01:12,799
text encoding is really hard so

00:01:10,880 --> 00:01:14,799
sometimes my name is spelled like this

00:01:12,799 --> 00:01:16,640
my pronouns are they them and let's talk

00:01:14,799 --> 00:01:18,159
about pokemon

00:01:16,640 --> 00:01:20,320
the first pokemon game was made by a

00:01:18,159 --> 00:01:22,080
small team for japanese audiences

00:01:20,320 --> 00:01:23,759
the game was made on a really tiny

00:01:22,080 --> 00:01:25,200
budget and the programming team was only

00:01:23,759 --> 00:01:27,360
four people

00:01:25,200 --> 00:01:28,560
in 1996 pokemon red and green were

00:01:27,360 --> 00:01:31,759
released and sales

00:01:28,560 --> 00:01:33,680
vastly exceeded expectations

00:01:31,759 --> 00:01:34,960
later that year an updated version was

00:01:33,680 --> 00:01:37,600
released in japan with

00:01:34,960 --> 00:01:39,040
improved graphics and more polish after

00:01:37,600 --> 00:01:40,880
it was clear this game was far more

00:01:39,040 --> 00:01:41,200
popular than anybody expected there was

00:01:40,880 --> 00:01:42,880
a

00:01:41,200 --> 00:01:45,200
mad rush to localize it for

00:01:42,880 --> 00:01:48,159
international audiences

00:01:45,200 --> 00:01:49,439
two years later in 1998 pokemon red and

00:01:48,159 --> 00:01:51,200
blue were released to the rest of the

00:01:49,439 --> 00:01:53,840
world and would go on to become

00:01:51,200 --> 00:01:54,880
the highest grossing media franchise of

00:01:53,840 --> 00:01:57,040
all time

00:01:54,880 --> 00:01:59,040
eclipsing even mickey mouse and hello

00:01:57,040 --> 00:02:00,880
kitty

00:01:59,040 --> 00:02:02,479
even if you've never played pokemon i'll

00:02:00,880 --> 00:02:04,399
wager you've seen this one before

00:02:02,479 --> 00:02:08,160
this is an actual picture of ryan

00:02:04,399 --> 00:02:11,039
reynolds from 1998.

00:02:08,160 --> 00:02:12,720
okay not really this is pikachu by far

00:02:11,039 --> 00:02:15,520
the most famous pokemon

00:02:12,720 --> 00:02:16,800
but there was a close second this is

00:02:15,520 --> 00:02:18,959
missingno

00:02:16,800 --> 00:02:20,480
misigno is a glitch pokemon and you can

00:02:18,959 --> 00:02:21,200
only encounter this pokemon through a

00:02:20,480 --> 00:02:25,680
glitch

00:02:21,200 --> 00:02:27,120
the thing is everybody knew about it

00:02:25,680 --> 00:02:28,879
one of the things i find most

00:02:27,120 --> 00:02:32,160
fascinating about this glitch

00:02:28,879 --> 00:02:32,879
is how widespread it was in a survey i

00:02:32,160 --> 00:02:36,080
ran

00:02:32,879 --> 00:02:37,680
87 percent of people who owned the game

00:02:36,080 --> 00:02:40,160
knew about the glitch when it was still

00:02:37,680 --> 00:02:41,360
relevant and about 80 percent of those

00:02:40,160 --> 00:02:43,519
people

00:02:41,360 --> 00:02:45,120
heard about it through word of mouth not

00:02:43,519 --> 00:02:46,640
the internet

00:02:45,120 --> 00:02:48,560
and there's a good reason so many people

00:02:46,640 --> 00:02:51,599
knew about this bug

00:02:48,560 --> 00:02:53,200
missingno could duplicate items now the

00:02:51,599 --> 00:02:54,319
glitch had a lot of names

00:02:53,200 --> 00:02:55,840
some people called it the missingno

00:02:54,319 --> 00:02:56,959
glitch some people called it the item

00:02:55,840 --> 00:02:58,480
dupe glitch

00:02:56,959 --> 00:03:00,239
at my school it was called the rare

00:02:58,480 --> 00:03:02,560
candy glitch since most people use it to

00:03:00,239 --> 00:03:04,239
duplicate an item with that name

00:03:02,560 --> 00:03:06,159
it made your pokemon more powerful when

00:03:04,239 --> 00:03:08,159
you used it so it was a really desirable

00:03:06,159 --> 00:03:09,680
item to duplicate

00:03:08,159 --> 00:03:11,200
let's take a look at how you perform the

00:03:09,680 --> 00:03:13,040
glitch

00:03:11,200 --> 00:03:14,640
we start off in viridian city one of the

00:03:13,040 --> 00:03:16,080
earliest areas in the game

00:03:14,640 --> 00:03:19,840
we're going to talk to this old man and

00:03:16,080 --> 00:03:19,840
we'll tell him that we're not in a hurry

00:03:23,280 --> 00:03:26,560
we're really not in a hurry because i

00:03:24,480 --> 00:03:30,400
did that slide transition too early

00:03:26,560 --> 00:03:32,239
uh he will then take us into a tutorial

00:03:30,400 --> 00:03:34,799
where he's going to show us how to catch

00:03:32,239 --> 00:03:34,799
pokemon

00:03:36,000 --> 00:03:39,280
and we're going to go to this screen

00:03:37,200 --> 00:03:40,560
which looks like the usual battle screen

00:03:39,280 --> 00:03:41,200
and there's going to be a weedle that

00:03:40,560 --> 00:03:42,640
shows up

00:03:41,200 --> 00:03:43,920
and he's going to go ahead and catch it

00:03:42,640 --> 00:03:44,480
we actually are in a little bit of a

00:03:43,920 --> 00:03:45,440
hurry so

00:03:44,480 --> 00:03:48,239
we're not going to watch this whole

00:03:45,440 --> 00:03:49,680
thing after this tutorial finishes we

00:03:48,239 --> 00:03:50,239
need to go to a place called cinebar

00:03:49,680 --> 00:03:51,920
island

00:03:50,239 --> 00:03:54,000
and we're going to use pokemon's fast

00:03:51,920 --> 00:03:56,400
travel system now this being

00:03:54,000 --> 00:03:58,640
the gen 1 pokemon games the way we fast

00:03:56,400 --> 00:04:02,239
travel is by just turning into a bird

00:03:58,640 --> 00:04:02,239
and flying off into the distance

00:04:03,280 --> 00:04:06,400
once we get there we need to go on to

00:04:05,200 --> 00:04:08,480
these water tiles

00:04:06,400 --> 00:04:10,480
and again this being the gen 1 pokemon

00:04:08,480 --> 00:04:13,280
games we're gonna do that by

00:04:10,480 --> 00:04:14,400
transforming into some sort of seal

00:04:13,280 --> 00:04:17,120
thing

00:04:14,400 --> 00:04:18,160
i don't know these the 90s were weird

00:04:17,120 --> 00:04:19,840
we're gonna go up and down this coast

00:04:18,160 --> 00:04:20,959
and eventually we will get an encounter

00:04:19,840 --> 00:04:23,280
with the wild pokemon

00:04:20,959 --> 00:04:24,000
now if you play these games this pause

00:04:23,280 --> 00:04:25,600
right there

00:04:24,000 --> 00:04:27,120
is way longer than it normally would be

00:04:25,600 --> 00:04:28,479
and we'll get into that more later

00:04:27,120 --> 00:04:30,479
now here we see our friend missing

00:04:28,479 --> 00:04:31,680
though it's level 168 which is

00:04:30,479 --> 00:04:33,040
far higher than you're supposed to be

00:04:31,680 --> 00:04:34,560
able to encounter in the game the

00:04:33,040 --> 00:04:35,680
highest level you can encounter normally

00:04:34,560 --> 00:04:37,759
is 100.

00:04:35,680 --> 00:04:39,600
we immediately run away and i'm going to

00:04:37,759 --> 00:04:41,280
open my inventory and go down to the

00:04:39,600 --> 00:04:42,639
sixth item which had rare candies and i

00:04:41,280 --> 00:04:46,320
have

00:04:42,639 --> 00:04:47,919
flour two of them

00:04:46,320 --> 00:04:49,680
i have four rare candies before doing

00:04:47,919 --> 00:04:52,240
the glitch so i guess the flower

00:04:49,680 --> 00:04:54,560
is how it renders 13 because this glitch

00:04:52,240 --> 00:04:58,000
just gave me 128 rare candies

00:04:54,560 --> 00:05:02,240
128 plus plus 4 is 132

00:04:58,000 --> 00:05:02,240
so 13 is flower who knew

00:05:02,400 --> 00:05:05,280
now if you've never seen this glitch

00:05:03,680 --> 00:05:06,000
before this probably seems like an

00:05:05,280 --> 00:05:07,600
extremely

00:05:06,000 --> 00:05:09,360
random sequence of events for such a

00:05:07,600 --> 00:05:12,000
specific outcome

00:05:09,360 --> 00:05:14,320
and it is but we'll break down each

00:05:12,000 --> 00:05:16,479
piece of this

00:05:14,320 --> 00:05:19,039
as with most major glitches there's no

00:05:16,479 --> 00:05:20,560
single bug that's responsible here

00:05:19,039 --> 00:05:22,400
this happens because of a bunch of

00:05:20,560 --> 00:05:24,160
different bugs and in most cases you

00:05:22,400 --> 00:05:26,400
can't even really call them bugs

00:05:24,160 --> 00:05:29,199
just properties of the code being used

00:05:26,400 --> 00:05:30,880
in unexpected ways

00:05:29,199 --> 00:05:32,639
now i do want to state up front i did

00:05:30,880 --> 00:05:35,120
not work on this game nor have i

00:05:32,639 --> 00:05:36,880
interviewed the programmers who did

00:05:35,120 --> 00:05:38,639
but i have spent a lot of time looking

00:05:36,880 --> 00:05:40,880
at disassemblies of the game

00:05:38,639 --> 00:05:43,039
and i think we can infer a lot about

00:05:40,880 --> 00:05:44,960
what the intent of the programmer was

00:05:43,039 --> 00:05:46,080
from looking at the code and we also

00:05:44,960 --> 00:05:47,199
know a lot about the constraints that

00:05:46,080 --> 00:05:48,560
they worked under

00:05:47,199 --> 00:05:50,960
but i do want to make it clear that a

00:05:48,560 --> 00:05:52,639
lot of this is speculation

00:05:50,960 --> 00:05:54,240
so without the way let's start going

00:05:52,639 --> 00:05:55,840
through each of the pieces of this

00:05:54,240 --> 00:05:57,600
glitch

00:05:55,840 --> 00:05:59,280
the first thing you might be asking is

00:05:57,600 --> 00:06:02,000
what's up with that weird coast tile why

00:05:59,280 --> 00:06:04,560
do we go there specifically

00:06:02,000 --> 00:06:06,479
so this is what a tiled up the player

00:06:04,560 --> 00:06:08,400
occupies in the game looks like

00:06:06,479 --> 00:06:10,560
the game works on a sort of grid system

00:06:08,400 --> 00:06:10,880
the player can go one tile to the left

00:06:10,560 --> 00:06:13,600
right

00:06:10,880 --> 00:06:16,000
up or down this is what that tile looks

00:06:13,600 --> 00:06:19,039
like when we remove the player

00:06:16,000 --> 00:06:20,960
this isn't how the game views the world

00:06:19,039 --> 00:06:22,880
the game actually views the world at a

00:06:20,960 --> 00:06:25,680
little bit higher resolution

00:06:22,880 --> 00:06:28,080
and one tile that the player occupies is

00:06:25,680 --> 00:06:29,759
actually four subtitles

00:06:28,080 --> 00:06:31,360
for the middle tile where the player

00:06:29,759 --> 00:06:33,280
would normally be these are the

00:06:31,360 --> 00:06:35,680
coordinates of those subtitles

00:06:33,280 --> 00:06:37,360
the upper left corner is eight eight and

00:06:35,680 --> 00:06:40,080
the bottom right corner is nine

00:06:37,360 --> 00:06:41,520
nine now to understand why these co

00:06:40,080 --> 00:06:43,840
styles are so important

00:06:41,520 --> 00:06:45,680
let's look at the code or at least a

00:06:43,840 --> 00:06:47,039
ruby equivalent of the code that's

00:06:45,680 --> 00:06:49,039
responsible for

00:06:47,039 --> 00:06:51,840
determining if you run into a wild

00:06:49,039 --> 00:06:53,919
pokemon or not

00:06:51,840 --> 00:06:55,199
so this is certainly not the code the

00:06:53,919 --> 00:06:57,440
game the uh

00:06:55,199 --> 00:06:58,319
gameboy game was not written in ruby it

00:06:57,440 --> 00:07:00,240
was written in

00:06:58,319 --> 00:07:01,680
assembly but i have translated to ruby

00:07:00,240 --> 00:07:03,840
here to make it a little bit easier to

00:07:01,680 --> 00:07:03,840
read

00:07:03,919 --> 00:07:06,560
the first thing that we're going to do

00:07:04,960 --> 00:07:08,080
is we're going to load up that bottom

00:07:06,560 --> 00:07:09,360
right tile that the player is standing

00:07:08,080 --> 00:07:11,199
on we're going to assign it to the tile

00:07:09,360 --> 00:07:12,880
variable

00:07:11,199 --> 00:07:14,479
and then we need to get the encounter

00:07:12,880 --> 00:07:17,360
rate the percentage

00:07:14,479 --> 00:07:19,440
chance that we have to uh run into a

00:07:17,360 --> 00:07:21,840
random pokemon each step

00:07:19,440 --> 00:07:23,680
if the tile is a grass tile we're going

00:07:21,840 --> 00:07:24,800
to grab the grass encounter rate for the

00:07:23,680 --> 00:07:26,400
current area

00:07:24,800 --> 00:07:27,599
if it's a water tile we're going to grab

00:07:26,400 --> 00:07:28,560
the water and counter rate for the

00:07:27,599 --> 00:07:29,759
current area

00:07:28,560 --> 00:07:31,199
otherwise we're just going to exit out

00:07:29,759 --> 00:07:33,520
because the player cannot encounter a

00:07:31,199 --> 00:07:35,520
wild pokemon

00:07:33,520 --> 00:07:37,360
then we're going to actually do some

00:07:35,520 --> 00:07:38,479
math and determine if a wild encounter

00:07:37,360 --> 00:07:39,759
occurs i've commented

00:07:38,479 --> 00:07:42,080
that out here because it's not super

00:07:39,759 --> 00:07:43,280
relevant to the glitch

00:07:42,080 --> 00:07:44,960
then we're going to load up the tile

00:07:43,280 --> 00:07:46,400
that the player's standing on again but

00:07:44,960 --> 00:07:48,080
this time it's going to be the bottom

00:07:46,400 --> 00:07:49,919
left subtile instead of the bottom right

00:07:48,080 --> 00:07:51,440
subtile

00:07:49,919 --> 00:07:53,360
and then we once again check to see if

00:07:51,440 --> 00:07:54,400
it is water and if it's water then we're

00:07:53,360 --> 00:07:56,479
going to pick a

00:07:54,400 --> 00:07:58,000
water pokemon for the current area to

00:07:56,479 --> 00:08:00,800
encounter otherwise we're going to pick

00:07:58,000 --> 00:08:00,800
a grass pokemon

00:08:01,199 --> 00:08:04,879
now the bug stands out pretty clearly

00:08:04,080 --> 00:08:07,680
here

00:08:04,879 --> 00:08:09,199
we are loading tile twice and when we

00:08:07,680 --> 00:08:09,680
are determining if an encounter can

00:08:09,199 --> 00:08:11,759
happen

00:08:09,680 --> 00:08:13,199
we look at the bottom right subtile but

00:08:11,759 --> 00:08:14,720
when we're determining what pokemon we

00:08:13,199 --> 00:08:18,800
run into we look at the bottom

00:08:14,720 --> 00:08:20,879
left so whenever on a tile like this

00:08:18,800 --> 00:08:23,199
where the bottom right is water and the

00:08:20,879 --> 00:08:25,520
bottom left is land

00:08:23,199 --> 00:08:26,720
as we're going up and down this coast

00:08:25,520 --> 00:08:28,800
the game is continually

00:08:26,720 --> 00:08:30,720
continuously doing these calculations

00:08:28,800 --> 00:08:31,919
thinking that we can encounter a pokemon

00:08:30,720 --> 00:08:34,000
because of the water

00:08:31,919 --> 00:08:35,360
but then when we get an encounter we'll

00:08:34,000 --> 00:08:37,599
encounter our grass pokemon because of

00:08:35,360 --> 00:08:39,360
the land

00:08:37,599 --> 00:08:41,519
now this bug stands out like a sore

00:08:39,360 --> 00:08:45,120
thumb when i translate it to ruby

00:08:41,519 --> 00:08:47,519
the thing is ruby isn't assembly

00:08:45,120 --> 00:08:50,399
and we lose a bit of important context

00:08:47,519 --> 00:08:52,880
when we translate this code to ruby

00:08:50,399 --> 00:08:54,720
this bug stands out in the ruby code in

00:08:52,880 --> 00:08:56,240
part because i can show you these two

00:08:54,720 --> 00:08:59,279
lines on the same screen they're

00:08:56,240 --> 00:09:02,480
relatively close together

00:08:59,279 --> 00:09:03,360
in re in the assembly though in the

00:09:02,480 --> 00:09:05,279
assembly though

00:09:03,360 --> 00:09:07,120
this commented out bit of code is

00:09:05,279 --> 00:09:09,680
actually a heck of a lot longer

00:09:07,120 --> 00:09:10,720
and these two lines are more like 50

00:09:09,680 --> 00:09:13,440
lines apart

00:09:10,720 --> 00:09:14,080
you wouldn't see them at the same time

00:09:13,440 --> 00:09:17,120
and that

00:09:14,080 --> 00:09:18,399
detail alone is a reason to me

00:09:17,120 --> 00:09:20,080
that i could see the slipping through

00:09:18,399 --> 00:09:21,519
code review if i can't see these two

00:09:20,080 --> 00:09:24,640
lines next to each other i don't know

00:09:21,519 --> 00:09:26,399
that i would have spotted this bug

00:09:24,640 --> 00:09:27,680
there's an additional uh there's an

00:09:26,399 --> 00:09:28,560
additional piece of important

00:09:27,680 --> 00:09:30,720
information though

00:09:28,560 --> 00:09:31,839
because in rippy we wouldn't ever assign

00:09:30,720 --> 00:09:34,160
tile twice

00:09:31,839 --> 00:09:35,519
we already assigned it up on the first

00:09:34,160 --> 00:09:36,800
line why would we need to load it up

00:09:35,519 --> 00:09:38,640
again

00:09:36,800 --> 00:09:41,040
and in ruby we could just have however

00:09:38,640 --> 00:09:43,200
many variables we want the vm

00:09:41,040 --> 00:09:44,399
just handles where those get stored for

00:09:43,200 --> 00:09:46,240
us

00:09:44,399 --> 00:09:49,279
but an assembly doesn't quite work like

00:09:46,240 --> 00:09:53,360
that in assembly things get stored

00:09:49,279 --> 00:09:55,040
either on the stack or in a register

00:09:53,360 --> 00:09:58,399
there wasn't really anything that uh

00:09:55,040 --> 00:10:00,160
that was equivalent to the heap in ruby

00:09:58,399 --> 00:10:01,519
on the on this z80 assembly that the

00:10:00,160 --> 00:10:03,279
game was written in

00:10:01,519 --> 00:10:05,680
they did store things at various

00:10:03,279 --> 00:10:08,240
specific addresses in memory but that's

00:10:05,680 --> 00:10:09,760
really not useful here for these sort of

00:10:08,240 --> 00:10:11,040
throwaway calculations these local

00:10:09,760 --> 00:10:12,640
variables

00:10:11,040 --> 00:10:15,360
they could put things on the stack but

00:10:12,640 --> 00:10:18,560
their stack was only 207 bytes

00:10:15,360 --> 00:10:20,800
which is absurdly tiny so they

00:10:18,560 --> 00:10:22,800
pretty much only ever used it when they

00:10:20,800 --> 00:10:24,959
absolutely needed to

00:10:22,800 --> 00:10:26,880
audio uh the audio playback subroutines

00:10:24,959 --> 00:10:28,399
were a good example of this

00:10:26,880 --> 00:10:30,000
so for the most part when you needed

00:10:28,399 --> 00:10:30,959
what what you would use a local variable

00:10:30,000 --> 00:10:32,480
for in ruby

00:10:30,959 --> 00:10:34,880
you would need to put something in a

00:10:32,480 --> 00:10:38,160
register and a register is sort of like

00:10:34,880 --> 00:10:40,480
a global mutable variable for your cpu

00:10:38,160 --> 00:10:42,160
you have a limited number of them and

00:10:40,480 --> 00:10:44,959
for the z80 they had

00:10:42,160 --> 00:10:45,600
depending on who you ask seven but three

00:10:44,959 --> 00:10:47,440
of those had

00:10:45,600 --> 00:10:49,040
very specific constraints about how they

00:10:47,440 --> 00:10:53,120
could be used so really you only had

00:10:49,040 --> 00:10:55,200
four registers that were 100

00:10:53,120 --> 00:10:57,920
general purpose where you could use them

00:10:55,200 --> 00:10:59,279
for anything

00:10:57,920 --> 00:11:01,200
and could you write your program your

00:10:59,279 --> 00:11:02,320
whole program with only four global

00:11:01,200 --> 00:11:04,480
variables and not

00:11:02,320 --> 00:11:06,800
introduce bugs like this i certainly

00:11:04,480 --> 00:11:06,800
couldn't

00:11:07,440 --> 00:11:12,880
okay so we can encounter grass pokemon

00:11:10,720 --> 00:11:15,120
when we're on these water tiles but how

00:11:12,880 --> 00:11:17,120
is that useful to us

00:11:15,120 --> 00:11:19,120
we want we we don't just want to

00:11:17,120 --> 00:11:20,640
encounter random grass pokemon we want

00:11:19,120 --> 00:11:22,800
128 rare candies

00:11:20,640 --> 00:11:24,640
so we need to go further and pair this

00:11:22,800 --> 00:11:28,079
bug with something else

00:11:24,640 --> 00:11:28,480
to help us exploit it so next let's look

00:11:28,079 --> 00:11:30,720
at what

00:11:28,480 --> 00:11:32,720
the code that runs when you enter a new

00:11:30,720 --> 00:11:34,880
area

00:11:32,720 --> 00:11:36,320
we had that variable that i was uh i've

00:11:34,880 --> 00:11:37,120
referred to in the last set of code

00:11:36,320 --> 00:11:41,360
called current

00:11:37,120 --> 00:11:42,720
area and that gets modified a few times

00:11:41,360 --> 00:11:44,640
whenever we switch areas we're going to

00:11:42,720 --> 00:11:46,480
go to some global section of memory

00:11:44,640 --> 00:11:47,279
where all of the grass encounter tables

00:11:46,480 --> 00:11:49,920
are stored

00:11:47,279 --> 00:11:51,279
this is the list of the the percentage

00:11:49,920 --> 00:11:53,200
chance that you have to run into a grass

00:11:51,279 --> 00:11:54,399
pokemon and all the pokemon you can run

00:11:53,200 --> 00:11:56,480
into

00:11:54,399 --> 00:12:00,399
so we're going to grab the rate for the

00:11:56,480 --> 00:12:01,519
area with our current area id

00:12:00,399 --> 00:12:03,760
and then we're going to check if it's

00:12:01,519 --> 00:12:06,160
greater than zero and if it is then

00:12:03,760 --> 00:12:07,360
we copy that whole table over to the

00:12:06,160 --> 00:12:10,480
current area's

00:12:07,360 --> 00:12:11,839
grass encounter table and if the grass

00:12:10,480 --> 00:12:14,000
encounter rate is zero

00:12:11,839 --> 00:12:16,079
for example because you're in a city or

00:12:14,000 --> 00:12:17,440
an area that is only water and there is

00:12:16,079 --> 00:12:19,680
no grass

00:12:17,440 --> 00:12:20,959
we just don't do anything whatever was

00:12:19,680 --> 00:12:24,800
stored there before

00:12:20,959 --> 00:12:26,320
will continue to be stored there

00:12:24,800 --> 00:12:28,079
that's why we specifically do this on

00:12:26,320 --> 00:12:30,959
cinnabar island

00:12:28,079 --> 00:12:32,880
because we can fast travel to any town

00:12:30,959 --> 00:12:33,760
it's easy for us to get to this coast in

00:12:32,880 --> 00:12:36,839
particular without

00:12:33,760 --> 00:12:38,079
ever passing through an area with grass

00:12:36,839 --> 00:12:39,680
pokemon

00:12:38,079 --> 00:12:42,399
as long as we go to one of these coast

00:12:39,680 --> 00:12:43,839
tiles without entering a zone that has a

00:12:42,399 --> 00:12:46,480
grass encounter table

00:12:43,839 --> 00:12:48,160
we'll just keep whatever was there and

00:12:46,480 --> 00:12:50,320
this was really useful

00:12:48,160 --> 00:12:52,160
there was a specific spot in the

00:12:50,320 --> 00:12:54,000
original pokemon games called the safari

00:12:52,160 --> 00:12:55,760
zone where there was some really

00:12:54,000 --> 00:12:57,920
valuable pokemon to catch

00:12:55,760 --> 00:13:01,120
but it used its own special encounter

00:12:57,920 --> 00:13:02,639
mechanics and everybody hated it

00:13:01,120 --> 00:13:04,560
and people would have loved if we could

00:13:02,639 --> 00:13:06,240
just use our the normal encounter

00:13:04,560 --> 00:13:08,240
mechanics for those pokemon

00:13:06,240 --> 00:13:09,519
and with this bug you can you just go

00:13:08,240 --> 00:13:11,279
into the safari zone

00:13:09,519 --> 00:13:13,200
the grass encounter table for the safari

00:13:11,279 --> 00:13:15,279
zone gets loaded up and then you fly to

00:13:13,200 --> 00:13:16,000
cinebar island and on these coast piles

00:13:15,279 --> 00:13:18,000
you can

00:13:16,000 --> 00:13:19,760
catch safaris on pokemon and this was

00:13:18,000 --> 00:13:21,279
called the fight safari zone pokemon

00:13:19,760 --> 00:13:22,880
glitch

00:13:21,279 --> 00:13:24,959
and that was really useful and became

00:13:22,880 --> 00:13:26,480
pretty widespread

00:13:24,959 --> 00:13:28,160
that's not enough for us we don't just

00:13:26,480 --> 00:13:31,440
want safari's own pokemon

00:13:28,160 --> 00:13:33,680
we want 128 rare candies

00:13:31,440 --> 00:13:34,880
so if we're gonna do that we need to go

00:13:33,680 --> 00:13:36,560
even further

00:13:34,880 --> 00:13:38,079
and have some data in the grass and

00:13:36,560 --> 00:13:42,079
counter table that

00:13:38,079 --> 00:13:42,079
isn't a real grass and counter table

00:13:42,959 --> 00:13:47,040
now when this bug was first discovered

00:13:45,120 --> 00:13:47,680
it actually wasn't performed the way

00:13:47,040 --> 00:13:50,240
that i

00:13:47,680 --> 00:13:51,040
demonstrated it to you it was done by

00:13:50,240 --> 00:13:54,320
going to an

00:13:51,040 --> 00:13:57,920
npc trainer a non-player character

00:13:54,320 --> 00:14:00,240
and trading pokemon with them

00:13:57,920 --> 00:14:01,839
the game had a mechanic where with your

00:14:00,240 --> 00:14:03,680
friends you could give them a pokemon

00:14:01,839 --> 00:14:05,120
and you would get a pokemon in return

00:14:03,680 --> 00:14:07,360
and throughout the game there were

00:14:05,120 --> 00:14:08,560
several npcs who would trade with you so

00:14:07,360 --> 00:14:10,320
you could still

00:14:08,560 --> 00:14:11,760
do this trading mechanic even if you

00:14:10,320 --> 00:14:15,279
didn't have any friends

00:14:11,760 --> 00:14:18,240
like me now for some reason

00:14:15,279 --> 00:14:19,040
every single uh npc that you could trade

00:14:18,240 --> 00:14:21,600
with was called

00:14:19,040 --> 00:14:24,079
trainer and just trainer they didn't

00:14:21,600 --> 00:14:26,240
really have names

00:14:24,079 --> 00:14:27,760
and when you go into a trade they need a

00:14:26,240 --> 00:14:29,279
place to store the name of the person

00:14:27,760 --> 00:14:30,959
you're trading with

00:14:29,279 --> 00:14:32,560
now they've reused a lot of sections of

00:14:30,959 --> 00:14:34,320
memory uh

00:14:32,560 --> 00:14:36,800
in in the game and they end up storing

00:14:34,320 --> 00:14:38,639
this in the grass encounter table

00:14:36,800 --> 00:14:39,920
now understand what all this means let's

00:14:38,639 --> 00:14:41,760
look more concretely

00:14:39,920 --> 00:14:44,399
at how a grass encounter table is

00:14:41,760 --> 00:14:46,000
represented in memory

00:14:44,399 --> 00:14:47,680
the grass encounter table for the

00:14:46,000 --> 00:14:51,760
current area that the player is in

00:14:47,680 --> 00:14:53,760
was stored at memory address d887

00:14:51,760 --> 00:14:55,600
everything on the game boy just had very

00:14:53,760 --> 00:14:56,639
specific memory addresses and this was

00:14:55,600 --> 00:14:58,480
the memory address for the grass

00:14:56,639 --> 00:15:00,959
encounter table

00:14:58,480 --> 00:15:01,600
the first bite was that rate how likely

00:15:00,959 --> 00:15:04,720
the player

00:15:01,600 --> 00:15:06,639
is to run into a wild pokemon the

00:15:04,720 --> 00:15:08,240
lower the number the more likely they

00:15:06,639 --> 00:15:10,240
are to encounter pokemon every time they

00:15:08,240 --> 00:15:13,199
take a step

00:15:10,240 --> 00:15:15,680
then we had 20 bytes a series of pairs

00:15:13,199 --> 00:15:17,040
for each slot in this table

00:15:15,680 --> 00:15:18,800
the first byte was the level of the

00:15:17,040 --> 00:15:19,920
pokemon you could run into and the

00:15:18,800 --> 00:15:22,880
second byte was the

00:15:19,920 --> 00:15:24,800
id of that pokemon and each slot

00:15:22,880 --> 00:15:26,959
corresponded to a specific percentage

00:15:24,800 --> 00:15:28,320
chance of encountering that pokemon

00:15:26,959 --> 00:15:29,759
the first two slots were about 20

00:15:28,320 --> 00:15:31,600
percent the next slot was about 15

00:15:29,759 --> 00:15:35,040
percent the next three were about 10

00:15:31,600 --> 00:15:36,240
and so on and so on so let's look at

00:15:35,040 --> 00:15:38,399
what happens when we

00:15:36,240 --> 00:15:40,800
uh when we look at the grass encounter

00:15:38,399 --> 00:15:44,160
table for a real zone

00:15:40,800 --> 00:15:45,759
at the address cfa3 you will find the

00:15:44,160 --> 00:15:48,639
encounter table for a real zone in the

00:15:45,759 --> 00:15:50,079
game mount moon

00:15:48,639 --> 00:15:52,079
so when we start copying this over we

00:15:50,079 --> 00:15:53,519
copy over the byte 10 first that means

00:15:52,079 --> 00:15:55,040
we have a really high chance of

00:15:53,519 --> 00:15:56,800
encountering pokemon and then the

00:15:55,040 --> 00:15:58,240
first three pokemon you can run into are

00:15:56,800 --> 00:16:00,560
all zubats

00:15:58,240 --> 00:16:01,920
and the a9 that's a looks like a rocky

00:16:00,560 --> 00:16:03,199
zubat to me

00:16:01,920 --> 00:16:04,800
and then once we finish copying this

00:16:03,199 --> 00:16:06,839
over you might notice something

00:16:04,800 --> 00:16:08,560
interesting about this grass encounter

00:16:06,839 --> 00:16:11,519
table it's

00:16:08,560 --> 00:16:13,040
all zumbat i don't know i guess the

00:16:11,519 --> 00:16:14,399
developers were like hey maybe we should

00:16:13,040 --> 00:16:17,279
put some pokemon here and they were like

00:16:14,399 --> 00:16:18,800
oops nope all we've got is zubat and

00:16:17,279 --> 00:16:20,160
then kids would just walk through this

00:16:18,800 --> 00:16:21,839
area and every three steps they'd run

00:16:20,160 --> 00:16:22,480
into a new zubat and they'd go to sleep

00:16:21,839 --> 00:16:25,759
and they would just

00:16:22,480 --> 00:16:27,680
be haunted by these hordes of zubat and

00:16:25,759 --> 00:16:29,120
actually i'm sorry can y'all hold on for

00:16:27,680 --> 00:16:32,000
just one second

00:16:29,120 --> 00:16:34,839
hey hey have you not seen the news

00:16:32,000 --> 00:16:36,160
there's a pandemic going on outside come

00:16:34,839 --> 00:16:38,639
on

00:16:36,160 --> 00:16:38,639
thank you

00:16:41,199 --> 00:16:44,320
zubats i swear

00:16:47,120 --> 00:16:52,000
all right where were we so once we

00:16:50,560 --> 00:16:53,839
finish copying over

00:16:52,000 --> 00:16:56,959
the encounter table for mount moon we

00:16:53,839 --> 00:16:58,800
have yeah just a lot of zubats cool

00:16:56,959 --> 00:17:00,160
so now let's look at what happens when

00:16:58,800 --> 00:17:02,880
we copy over

00:17:00,160 --> 00:17:04,240
the the name trainer so whenever you

00:17:02,880 --> 00:17:05,439
perform a trade the

00:17:04,240 --> 00:17:07,360
name of the person that you're trading

00:17:05,439 --> 00:17:09,679
with gets stored at the same address and

00:17:07,360 --> 00:17:09,679
memory

00:17:10,559 --> 00:17:16,720
so pokemon blue had a really interesting

00:17:14,400 --> 00:17:18,559
text encoding where uh there was a

00:17:16,720 --> 00:17:21,280
control character for

00:17:18,559 --> 00:17:23,199
print the word trainer so trainer was

00:17:21,280 --> 00:17:24,959
actually just a single byte

00:17:23,199 --> 00:17:26,640
uh names were always 11 bytes so the

00:17:24,959 --> 00:17:29,600
rest of the uh the rest of this

00:17:26,640 --> 00:17:30,480
name is just 80 the end of name control

00:17:29,600 --> 00:17:34,080
character

00:17:30,480 --> 00:17:35,760
and that happens to map to missingno

00:17:34,080 --> 00:17:37,039
and this is a really cool way to do the

00:17:35,760 --> 00:17:39,120
glitch because you would end up with an

00:17:37,039 --> 00:17:41,120
encounter table that was all missingno's

00:17:39,120 --> 00:17:42,320
level 80 missing note be uh to be

00:17:41,120 --> 00:17:44,880
specific

00:17:42,320 --> 00:17:46,160
uh trainer gets copied into the the word

00:17:44,880 --> 00:17:47,919
trainer gets copied into

00:17:46,160 --> 00:17:49,520
the uh encounter rate and that just ends

00:17:47,919 --> 00:17:51,200
up getting ignored because we use the

00:17:49,520 --> 00:17:53,600
water encounter rate anyway because of

00:17:51,200 --> 00:17:55,520
that other bug that we looked at

00:17:53,600 --> 00:17:57,520
and so this is a really useful way to

00:17:55,520 --> 00:17:59,360
perform the glitch there is a trainer in

00:17:57,520 --> 00:18:01,840
cinebar island that you can trade with

00:17:59,360 --> 00:18:03,440
to to get this encounter table the issue

00:18:01,840 --> 00:18:05,280
with doing it this way is you can only

00:18:03,440 --> 00:18:07,039
do that trade once

00:18:05,280 --> 00:18:08,720
so you can encounter missing those right

00:18:07,039 --> 00:18:10,240
after doing the trade but then as soon

00:18:08,720 --> 00:18:13,440
as you go into an area

00:18:10,240 --> 00:18:14,799
with grass pokemon this is just lost

00:18:13,440 --> 00:18:16,480
forever you can never trade with that

00:18:14,799 --> 00:18:18,400
trainer again

00:18:16,480 --> 00:18:19,600
so you can get 128 rare candies and

00:18:18,400 --> 00:18:22,080
that's all well and good

00:18:19,600 --> 00:18:24,400
but we are we want even more we want

00:18:22,080 --> 00:18:25,919
infinite rare candies rare candies are

00:18:24,400 --> 00:18:29,840
delicious and we want to be able to go

00:18:25,919 --> 00:18:32,559
get them whenever we want

00:18:29,840 --> 00:18:34,240
so the final step to to get our rare

00:18:32,559 --> 00:18:37,200
candies whenever we feel like it is

00:18:34,240 --> 00:18:39,360
called the old man glitch

00:18:37,200 --> 00:18:40,880
it's called the old man glitch because

00:18:39,360 --> 00:18:42,320
well

00:18:40,880 --> 00:18:44,720
his name is old man you can see it it's

00:18:42,320 --> 00:18:46,400
printed on screen

00:18:44,720 --> 00:18:47,840
the fact that his name is old man

00:18:46,400 --> 00:18:49,760
actually isn't important

00:18:47,840 --> 00:18:52,480
what's really important here is that he

00:18:49,760 --> 00:18:54,720
has a name

00:18:52,480 --> 00:18:56,400
everything about pokemon was optimized

00:18:54,720 --> 00:18:59,039
for code size above

00:18:56,400 --> 00:18:59,760
all else they needed their code to

00:18:59,039 --> 00:19:01,520
occupy

00:18:59,760 --> 00:19:03,440
as little space on the cartridge as

00:19:01,520 --> 00:19:05,520
possible so that they could fit on a

00:19:03,440 --> 00:19:07,360
smaller cartridge

00:19:05,520 --> 00:19:08,799
if your code was too big you would need

00:19:07,360 --> 00:19:11,039
to double the amount of rom

00:19:08,799 --> 00:19:12,320
on the cartridge and that was expensive

00:19:11,039 --> 00:19:12,720
when pokemon was originally being

00:19:12,320 --> 00:19:14,559
written

00:19:12,720 --> 00:19:16,000
they just didn't have the budget to do

00:19:14,559 --> 00:19:17,919
that

00:19:16,000 --> 00:19:19,679
so while if you were writing this today

00:19:17,919 --> 00:19:21,440
you might have this tutorial just go

00:19:19,679 --> 00:19:22,960
through a dedicated piece of code for

00:19:21,440 --> 00:19:24,559
doing the tutorial

00:19:22,960 --> 00:19:26,720
if you're if you care more about code

00:19:24,559 --> 00:19:27,039
size you can do it much more easily by

00:19:26,720 --> 00:19:29,520
just

00:19:27,039 --> 00:19:30,720
adding a few conditionals to hey if this

00:19:29,520 --> 00:19:34,000
is the tutorial

00:19:30,720 --> 00:19:35,440
reject player input here

00:19:34,000 --> 00:19:36,559
and because they're going through and

00:19:35,440 --> 00:19:38,000
that's exactly what they did this is

00:19:36,559 --> 00:19:41,760
just going through the same code

00:19:38,000 --> 00:19:44,240
as a normal battle and that means that

00:19:41,760 --> 00:19:45,679
code gets executed that does things like

00:19:44,240 --> 00:19:47,280
print out the player's name

00:19:45,679 --> 00:19:49,280
but it's not printing the player's name

00:19:47,280 --> 00:19:49,919
it's printing old man so that means that

00:19:49,280 --> 00:19:52,000
the string

00:19:49,919 --> 00:19:53,760
old man ended up getting stored where

00:19:52,000 --> 00:19:55,039
the player's name was

00:19:53,760 --> 00:19:56,880
which means that we need to pick

00:19:55,039 --> 00:19:58,799
somewhere to temporarily store the

00:19:56,880 --> 00:20:01,520
player's name

00:19:58,799 --> 00:20:05,120
so where did they do that you guessed it

00:20:01,520 --> 00:20:05,120
the grass encounter table

00:20:05,440 --> 00:20:08,799
so to demonstrate this bug to you i set

00:20:07,520 --> 00:20:10,960
my name to hi

00:20:08,799 --> 00:20:12,559
sean and let's take a look at what

00:20:10,960 --> 00:20:15,840
happens when we interpret

00:20:12,559 --> 00:20:17,440
that as a grass encounter table so we

00:20:15,840 --> 00:20:18,720
copy over the h first and again that's

00:20:17,440 --> 00:20:19,280
just going to get ignored so we don't

00:20:18,720 --> 00:20:22,559
mind

00:20:19,280 --> 00:20:24,400
i is 168 and a is is missing no

00:20:22,559 --> 00:20:26,960
uh or s is missing no and then i is

00:20:24,400 --> 00:20:27,600
again 168 and a is hey it's also missing

00:20:26,960 --> 00:20:29,520
no

00:20:27,600 --> 00:20:30,880
then we got level 174 it's another

00:20:29,520 --> 00:20:32,480
missingno and

00:20:30,880 --> 00:20:34,400
wouldn't you know it my whole name is

00:20:32,480 --> 00:20:36,880
missing those it's almost like i

00:20:34,400 --> 00:20:38,559
specifically chose that name because it

00:20:36,880 --> 00:20:40,720
would make it really easy to demonstrate

00:20:38,559 --> 00:20:43,520
this glitch for all of you

00:20:40,720 --> 00:20:44,960
crazy now one thing you might have

00:20:43,520 --> 00:20:46,799
noticed though is each of these missing

00:20:44,960 --> 00:20:47,120
notes came from a different letter in my

00:20:46,799 --> 00:20:50,159
name

00:20:47,120 --> 00:20:51,919
they have a different internal id

00:20:50,159 --> 00:20:53,919
which is weird because it's all the same

00:20:51,919 --> 00:20:55,760
pokemon

00:20:53,919 --> 00:20:57,520
so let's talk about what a missingno

00:20:55,760 --> 00:20:59,760
actually is

00:20:57,520 --> 00:21:02,080
contrary to what you might think it's

00:20:59,760 --> 00:21:04,320
not a single pokemon

00:21:02,080 --> 00:21:06,159
there are actually 39 distinct pokemon

00:21:04,320 --> 00:21:09,840
which are called missing though

00:21:06,159 --> 00:21:09,840
and it's not just reading garbage data

00:21:12,400 --> 00:21:15,520
even though it's right it's clearly

00:21:14,159 --> 00:21:17,200
garbage it has

00:21:15,520 --> 00:21:18,880
a well-defined name it's printing out

00:21:17,200 --> 00:21:20,320
the string missing though

00:21:18,880 --> 00:21:22,559
it's not like there's a way that you can

00:21:20,320 --> 00:21:23,280
programmatically say hey is this chunk

00:21:22,559 --> 00:21:25,840
of memory

00:21:23,280 --> 00:21:27,600
real data or not if so print missing no

00:21:25,840 --> 00:21:29,440
like this must be coming from

00:21:27,600 --> 00:21:31,679
some table somewhere where they are

00:21:29,440 --> 00:21:33,440
explicitly expecting missingno to be the

00:21:31,679 --> 00:21:35,440
name of a pokemon

00:21:33,440 --> 00:21:36,559
a lot of other of its other attributes

00:21:35,440 --> 00:21:38,799
are well defined as well

00:21:36,559 --> 00:21:41,200
really only its sprite is is actually

00:21:38,799 --> 00:21:42,559
garbage data

00:21:41,200 --> 00:21:44,880
so to understand why some of its

00:21:42,559 --> 00:21:46,640
attributes are garbage but others aren't

00:21:44,880 --> 00:21:49,120
we need to see how pokemon are stored in

00:21:46,640 --> 00:21:49,120
the code

00:21:49,520 --> 00:21:52,480
when most people think of a list of

00:21:50,799 --> 00:21:54,159
pokemon they think of the order they

00:21:52,480 --> 00:21:57,440
appear in the pokedex

00:21:54,159 --> 00:21:59,440
the in-game encyclopedia

00:21:57,440 --> 00:22:01,760
every pokemon has a number associated

00:21:59,440 --> 00:22:03,039
with it and they're loosely ordered in

00:22:01,760 --> 00:22:04,799
the order that you would encounter them

00:22:03,039 --> 00:22:06,240
in the game

00:22:04,799 --> 00:22:08,720
that's not how they're stored in the

00:22:06,240 --> 00:22:10,840
code when most people think of the

00:22:08,720 --> 00:22:12,080
pokemon with the id of one they think of

00:22:10,840 --> 00:22:13,919
bulbasaur

00:22:12,080 --> 00:22:18,080
but actually the pokemon with the

00:22:13,919 --> 00:22:20,720
internal id of one is called rydon

00:22:18,080 --> 00:22:21,520
in the code most of the data related to

00:22:20,720 --> 00:22:23,360
pokemon

00:22:21,520 --> 00:22:24,880
is stored in the order the pokemon were

00:22:23,360 --> 00:22:26,320
created

00:22:24,880 --> 00:22:28,159
the game was originally supposed to have

00:22:26,320 --> 00:22:31,360
190 pokemon

00:22:28,159 --> 00:22:33,039
but it shipped with 151 40 of them were

00:22:31,360 --> 00:22:33,760
either cut or saved for a later

00:22:33,039 --> 00:22:35,840
generation

00:22:33,760 --> 00:22:37,200
and one was added at the very last

00:22:35,840 --> 00:22:39,039
second

00:22:37,200 --> 00:22:40,559
and missing no is what's stored in the

00:22:39,039 --> 00:22:43,120
slots where the cut pokemon were

00:22:40,559 --> 00:22:43,120
supposed to be

00:22:43,280 --> 00:22:47,120
so for the most part the entries for

00:22:44,799 --> 00:22:48,559
missingno are always zeroed out

00:22:47,120 --> 00:22:50,480
but there are some exceptions like its

00:22:48,559 --> 00:22:51,919
name

00:22:50,480 --> 00:22:54,320
so if anything that's ordered by

00:22:51,919 --> 00:22:57,039
internal id we're gonna get well-defined

00:22:54,320 --> 00:22:57,440
but zeroed out data so for example the

00:22:57,039 --> 00:23:00,400
list

00:22:57,440 --> 00:23:02,000
of pokedex ids which is gonna be stored

00:23:00,400 --> 00:23:03,919
in internal id

00:23:02,000 --> 00:23:05,039
missingno's pokedex id is going to be

00:23:03,919 --> 00:23:06,400
zero

00:23:05,039 --> 00:23:07,919
and so because of that for anything

00:23:06,400 --> 00:23:08,799
stored in pokedex order we're going to

00:23:07,919 --> 00:23:11,679
get garbage

00:23:08,799 --> 00:23:11,679
and let's look at why

00:23:11,840 --> 00:23:15,840
so i've had i've got a global variable

00:23:13,679 --> 00:23:18,000
here called mon data and that's

00:23:15,840 --> 00:23:19,760
the what's called the pokemon base stats

00:23:18,000 --> 00:23:22,240
table

00:23:19,760 --> 00:23:23,919
and this includes a pointer to where the

00:23:22,240 --> 00:23:25,120
sprite is stored on the cartridge

00:23:23,919 --> 00:23:28,080
and this is an example of something

00:23:25,120 --> 00:23:30,480
that's stored in pokedex order

00:23:28,080 --> 00:23:31,280
so like i said earlier the pokedex uh

00:23:30,480 --> 00:23:34,080
id4

00:23:31,280 --> 00:23:35,200
missing note is zero so the game needs

00:23:34,080 --> 00:23:37,280
to look up what a

00:23:35,200 --> 00:23:40,159
pokemon's pokedex number is from its

00:23:37,280 --> 00:23:43,120
internal id

00:23:40,159 --> 00:23:44,240
now we need to convert that from uh this

00:23:43,120 --> 00:23:46,640
this

00:23:44,240 --> 00:23:48,559
pokedex id to an actual index in an

00:23:46,640 --> 00:23:50,640
array and since the pokedex starts at

00:23:48,559 --> 00:23:52,159
one we need to subtract one from that

00:23:50,640 --> 00:23:53,679
now in ruby of course this would just

00:23:52,159 --> 00:23:54,559
give us negative one because we don't

00:23:53,679 --> 00:23:56,080
have

00:23:54,559 --> 00:23:58,000
concrete integer types we just have our

00:23:56,080 --> 00:23:59,200
magic number that does very lovely

00:23:58,000 --> 00:24:01,279
things to keep us from

00:23:59,200 --> 00:24:02,320
getting into from encountering bugs like

00:24:01,279 --> 00:24:05,520
this but in

00:24:02,320 --> 00:24:06,000
assembly this was a one byte unsigned

00:24:05,520 --> 00:24:08,080
integer

00:24:06,000 --> 00:24:10,080
and so when you subtract one from zero

00:24:08,080 --> 00:24:13,520
you get the maximum value for that which

00:24:10,080 --> 00:24:13,520
is 255.

00:24:14,320 --> 00:24:19,039
and then the array that we're indexing

00:24:16,000 --> 00:24:20,799
into only has 151 entries in it

00:24:19,039 --> 00:24:22,880
now again in ruby this would just give

00:24:20,799 --> 00:24:24,640
us nil because ruby does a lot of great

00:24:22,880 --> 00:24:26,000
things to make us never have to worry

00:24:24,640 --> 00:24:27,840
about bugs like this

00:24:26,000 --> 00:24:29,919
but in assembly that's just not how it

00:24:27,840 --> 00:24:32,240
works so instead of getting nil back we

00:24:29,919 --> 00:24:34,880
just get whatever was stored

00:24:32,240 --> 00:24:36,559
after the end of this array and that's a

00:24:34,880 --> 00:24:37,200
bug known as a buffer over one it's one

00:24:36,559 --> 00:24:39,679
of the most pop

00:24:37,200 --> 00:24:43,200
uh the most common uh memory safety

00:24:39,679 --> 00:24:43,200
security vulnerabilities out there

00:24:43,279 --> 00:24:47,360
in the case of the data that has the uh

00:24:45,520 --> 00:24:49,039
sprite for missing now

00:24:47,360 --> 00:24:51,120
the place that in memory that it ends up

00:24:49,039 --> 00:24:53,600
reading is the middle of

00:24:51,120 --> 00:24:56,159
the data for some trainer npc trainers

00:24:53,600 --> 00:24:57,840
parties on route 17

00:24:56,159 --> 00:25:00,080
and when you interpret that as a pointer

00:24:57,840 --> 00:25:02,559
it points to some random code that's

00:25:00,080 --> 00:25:04,080
related to how the safari zone works so

00:25:02,559 --> 00:25:04,720
that glitch sprite that you see from

00:25:04,080 --> 00:25:06,320
missingno

00:25:04,720 --> 00:25:09,360
is what happens if you interpret that

00:25:06,320 --> 00:25:09,360
code as an image

00:25:09,520 --> 00:25:14,799
but most data isn't stored in pokedex

00:25:11,440 --> 00:25:16,960
order so we get mostly valid data

00:25:14,799 --> 00:25:18,240
and ironically the pokedex itself is one

00:25:16,960 --> 00:25:20,240
of the things that's

00:25:18,240 --> 00:25:21,919
not stored in pokedex order it's stored

00:25:20,240 --> 00:25:24,400
in internal order

00:25:21,919 --> 00:25:25,200
so missingno even has a valid pokedex

00:25:24,400 --> 00:25:29,600
entry

00:25:25,200 --> 00:25:31,120
well almost its entry wasn't localized

00:25:29,600 --> 00:25:32,720
and the structure is slightly different

00:25:31,120 --> 00:25:33,360
than the japanese version so we can see

00:25:32,720 --> 00:25:36,640
the height

00:25:33,360 --> 00:25:38,240
and uh and uh description are are valid

00:25:36,640 --> 00:25:38,559
but then it's got like a random number

00:25:38,240 --> 00:25:42,159
for

00:25:38,559 --> 00:25:43,600
for weight the structure in the in the

00:25:42,159 --> 00:25:44,559
international version for these was

00:25:43,600 --> 00:25:46,240
slightly different than how they

00:25:44,559 --> 00:25:47,760
structured it in the japanese version so

00:25:46,240 --> 00:25:49,279
when it wasn't localized

00:25:47,760 --> 00:25:50,720
it just gets interpreted wrong but if we

00:25:49,279 --> 00:25:52,159
look at the japanese entry we can see

00:25:50,720 --> 00:25:53,679
there's valid data here

00:25:52,159 --> 00:25:55,360
missingno is the question mark question

00:25:53,679 --> 00:25:57,279
mark question mark pokemon it has a

00:25:55,360 --> 00:25:59,679
placeholder height and weight 10

00:25:57,279 --> 00:26:01,440
kilograms and the height is 10

00:25:59,679 --> 00:26:03,360
decimeters for some reason they stored

00:26:01,440 --> 00:26:05,360
height in decimeters i don't know

00:26:03,360 --> 00:26:08,000
and that comment translates to comment

00:26:05,360 --> 00:26:08,000
to be written

00:26:08,720 --> 00:26:12,720
now for the most part missing nodes all

00:26:10,480 --> 00:26:14,320
have the same data they just have zeros

00:26:12,720 --> 00:26:16,240
but there are some differences between

00:26:14,320 --> 00:26:19,600
the different missing nodes

00:26:16,240 --> 00:26:22,080
in fact a bunch of them have unique data

00:26:19,600 --> 00:26:23,679
nine of them have cries the sound that a

00:26:22,080 --> 00:26:25,440
pokemon makes when you in

00:26:23,679 --> 00:26:27,360
when you first encounter it that aren't

00:26:25,440 --> 00:26:30,640
zeros

00:26:27,360 --> 00:26:33,039
uh a few of these entries also had real

00:26:30,640 --> 00:26:34,640
sprites associated with them

00:26:33,039 --> 00:26:37,039
there were some special cases throughout

00:26:34,640 --> 00:26:38,880
the game where they needed to show

00:26:37,039 --> 00:26:40,960
pokemon sprites in the place where they

00:26:38,880 --> 00:26:42,240
would normally show a real pokemon

00:26:40,960 --> 00:26:43,840
but the sprite they wanted to show

00:26:42,240 --> 00:26:44,640
wasn't actually attached to any real

00:26:43,840 --> 00:26:46,159
pokemon

00:26:44,640 --> 00:26:48,559
so they used a few of the missing nose

00:26:46,159 --> 00:26:51,039
to store that information

00:26:48,559 --> 00:26:53,279
these versions of missingno would only

00:26:51,039 --> 00:26:55,679
show up if you had a lowercase w

00:26:53,279 --> 00:26:58,400
x or y in your name though so most

00:26:55,679 --> 00:27:00,799
people would never see them

00:26:58,400 --> 00:27:02,320
that's a really important detail is

00:27:00,799 --> 00:27:02,720
which versions of missingno you could

00:27:02,320 --> 00:27:05,039
see

00:27:02,720 --> 00:27:06,400
and how you would encounter them were

00:27:05,039 --> 00:27:08,159
based on your name

00:27:06,400 --> 00:27:09,840
because your name is what's it getting

00:27:08,159 --> 00:27:10,400
interpreted as that grass and count

00:27:09,840 --> 00:27:13,200
table

00:27:10,400 --> 00:27:14,000
to make this glitch possible this is

00:27:13,200 --> 00:27:15,279
also why

00:27:14,000 --> 00:27:17,760
depending on what your name was you

00:27:15,279 --> 00:27:20,240
might have seen high level real pokemon

00:27:17,760 --> 00:27:22,320
in addition to missingno

00:27:20,240 --> 00:27:23,279
all of the printable characters in their

00:27:22,320 --> 00:27:26,000
text encoding

00:27:23,279 --> 00:27:27,919
start at 128 which is the opposite of

00:27:26,000 --> 00:27:28,880
ascii in every modern text encoding we

00:27:27,919 --> 00:27:31,360
use today where

00:27:28,880 --> 00:27:34,159
the first the first 128 characters are

00:27:31,360 --> 00:27:35,440
what's printable

00:27:34,159 --> 00:27:37,279
that meant that no matter what your name

00:27:35,440 --> 00:27:38,960
was the characters that ended up in the

00:27:37,279 --> 00:27:40,240
spots for pokemon's level

00:27:38,960 --> 00:27:42,799
would always be higher than they were

00:27:40,240 --> 00:27:43,200
supposed to and depending what your name

00:27:42,799 --> 00:27:45,200
was

00:27:43,200 --> 00:27:46,559
the characters that were the spots for

00:27:45,200 --> 00:27:48,320
id might have mapped

00:27:46,559 --> 00:27:51,679
missingno or they might have mapped to

00:27:48,320 --> 00:27:53,279
oddish or some other real pokemon

00:27:51,679 --> 00:27:54,960
you could also get some weird glitched

00:27:53,279 --> 00:27:56,399
out trainer battles with this glitch

00:27:54,960 --> 00:27:58,320
but those only appeared if you had

00:27:56,399 --> 00:27:59,840
punctuation in your name so i don't

00:27:58,320 --> 00:28:00,559
think very many people were aware of

00:27:59,840 --> 00:28:02,000
that

00:28:00,559 --> 00:28:04,880
i had no idea until i started doing

00:28:02,000 --> 00:28:04,880
research for this talk

00:28:04,960 --> 00:28:08,720
now you might be asking if the encounter

00:28:06,799 --> 00:28:11,840
table was based on your name

00:28:08,720 --> 00:28:13,600
why could everybody do the glitch surely

00:28:11,840 --> 00:28:16,720
it must be possible to have a name that

00:28:13,600 --> 00:28:19,440
didn't map to missingno at all

00:28:16,720 --> 00:28:20,559
this is sort of true it was possible to

00:28:19,440 --> 00:28:21,919
have a name that didn't include

00:28:20,559 --> 00:28:23,679
missingno

00:28:21,919 --> 00:28:27,360
but even if that was the case you could

00:28:23,679 --> 00:28:29,200
still get 128 rare candies

00:28:27,360 --> 00:28:30,960
it was pretty unlikely for you to have a

00:28:29,200 --> 00:28:33,760
name that didn't include missingno for a

00:28:30,960 --> 00:28:35,440
couple of reasons

00:28:33,760 --> 00:28:37,440
the first is that the control character

00:28:35,440 --> 00:28:39,919
that was used for end of name

00:28:37,440 --> 00:28:42,960
which is stored as 80 in decimal that

00:28:39,919 --> 00:28:44,640
was one of the ids of a missingno

00:28:42,960 --> 00:28:46,559
so if your name was an even number of

00:28:44,640 --> 00:28:48,399
characters you could always encounter a

00:28:46,559 --> 00:28:49,279
missing note no matter what because if

00:28:48,399 --> 00:28:50,399
an even number of k

00:28:49,279 --> 00:28:52,559
if your name was an even number of

00:28:50,399 --> 00:28:54,399
characters the 80 that was the end of

00:28:52,559 --> 00:28:57,279
your name would end up in the slot for a

00:28:54,399 --> 00:28:57,279
pokemon's id

00:28:57,600 --> 00:29:00,559
but a lot of players didn't even pick

00:28:58,880 --> 00:29:03,039
their own name they just used one of the

00:29:00,559 --> 00:29:04,880
preset ones that were offered to you

00:29:03,039 --> 00:29:06,320
and by pure luck every single one of

00:29:04,880 --> 00:29:07,200
those names had the right characters

00:29:06,320 --> 00:29:09,279
were missing though

00:29:07,200 --> 00:29:10,399
so if you used one of the preset names

00:29:09,279 --> 00:29:12,000
you wouldn't be able to encounter

00:29:10,399 --> 00:29:13,279
missing now

00:29:12,000 --> 00:29:15,039
and it wasn't even really luck though

00:29:13,279 --> 00:29:16,320
because the characters from missingno

00:29:15,039 --> 00:29:18,480
were really common

00:29:16,320 --> 00:29:21,039
they included things like uppercase s h

00:29:18,480 --> 00:29:22,799
and m and most of the lowercase vowels

00:29:21,039 --> 00:29:24,000
so the odds of you having one of these

00:29:22,799 --> 00:29:27,039
characters in the right place were

00:29:24,000 --> 00:29:29,440
really high but even then there was a

00:29:27,039 --> 00:29:31,200
catch-all

00:29:29,440 --> 00:29:33,120
every custom name could at least

00:29:31,200 --> 00:29:35,760
encounter missingno's sister pokemon

00:29:33,120 --> 00:29:37,360
tick m and we call it tick m because

00:29:35,760 --> 00:29:40,720
those are the only characters in its

00:29:37,360 --> 00:29:42,320
name that you can actually say

00:29:40,720 --> 00:29:45,120
now even though tick m and missingno

00:29:42,320 --> 00:29:46,640
have the same sprite tick m is different

00:29:45,120 --> 00:29:48,880
as you can probably tell from the weird

00:29:46,640 --> 00:29:50,640
characters in its name and its decision

00:29:48,880 --> 00:29:55,840
not to wear a mask

00:29:50,640 --> 00:29:55,840
everything about tick m is garbage

00:29:57,039 --> 00:30:01,039
the graphics appear in its name will

00:29:59,120 --> 00:30:03,919
change based on things like your party's

00:30:01,039 --> 00:30:07,679
stats or your position on the map

00:30:03,919 --> 00:30:09,919
tick m is what you get for internal id

00:30:07,679 --> 00:30:11,840
so you're going to get garbage data even

00:30:09,919 --> 00:30:12,559
for data that isn't stored in pokedex

00:30:11,840 --> 00:30:14,240
order because

00:30:12,559 --> 00:30:16,480
no matter what you will get that

00:30:14,240 --> 00:30:18,399
underflow

00:30:16,480 --> 00:30:19,600
tick m had a few interesting differences

00:30:18,399 --> 00:30:21,600
from missingno

00:30:19,600 --> 00:30:23,200
its cry will randomly change based on

00:30:21,600 --> 00:30:24,960
what screen you're on since it's reading

00:30:23,200 --> 00:30:27,760
some random piece of memory not

00:30:24,960 --> 00:30:29,440
uh and and not zeros it could also

00:30:27,760 --> 00:30:31,200
evolve into kangaskhan

00:30:29,440 --> 00:30:34,240
so i guess this is what a baby

00:30:31,200 --> 00:30:34,240
kangaskhan looked like

00:30:34,640 --> 00:30:37,840
you could also lock up your game by

00:30:35,919 --> 00:30:40,159
catching it

00:30:37,840 --> 00:30:41,200
but if your goal is just to get your 128

00:30:40,159 --> 00:30:43,120
rare candies

00:30:41,200 --> 00:30:44,240
it didn't matter if you saw missing no

00:30:43,120 --> 00:30:47,360
or tick n

00:30:44,240 --> 00:30:49,840
the end result was the same

00:30:47,360 --> 00:30:51,360
so let's look at why this duplicates

00:30:49,840 --> 00:30:52,080
items why just running away from these

00:30:51,360 --> 00:30:53,760
pokemon

00:30:52,080 --> 00:30:56,480
will cause the sixth item in your

00:30:53,760 --> 00:30:58,080
inventory to get duplicated

00:30:56,480 --> 00:31:01,200
this has to do with what happens after

00:30:58,080 --> 00:31:02,960
you encounter a pokemon

00:31:01,200 --> 00:31:05,519
this all has to do with that pokedex

00:31:02,960 --> 00:31:07,519
that we mentioned earlier

00:31:05,519 --> 00:31:09,519
its function in the game is to keep

00:31:07,519 --> 00:31:11,440
track of every pokemon that you've seen

00:31:09,519 --> 00:31:14,080
or caught

00:31:11,440 --> 00:31:15,200
any pokemon that appears on this list is

00:31:14,080 --> 00:31:17,039
one that you've seen

00:31:15,200 --> 00:31:19,200
a little ball icon next to its name

00:31:17,039 --> 00:31:22,159
means that it's been caught

00:31:19,200 --> 00:31:23,440
this gets stored in memory as a bitmap

00:31:22,159 --> 00:31:24,240
which is kind of like an array of

00:31:23,440 --> 00:31:25,760
booleans

00:31:24,240 --> 00:31:27,600
but instead of taking up one byte for

00:31:25,760 --> 00:31:28,320
each entry it only takes a single bit so

00:31:27,600 --> 00:31:32,000
one byte can

00:31:28,320 --> 00:31:33,519
hold eight and eight booleans

00:31:32,000 --> 00:31:36,159
as you might have guessed this array is

00:31:33,519 --> 00:31:38,000
stored in pokedex order

00:31:36,159 --> 00:31:39,600
so when you encounter missingno we have

00:31:38,000 --> 00:31:40,799
that underflow and so the zero turns

00:31:39,600 --> 00:31:42,480
into a 255

00:31:40,799 --> 00:31:44,320
and the end result is that the game

00:31:42,480 --> 00:31:48,000
tries to mark that you've encountered a

00:31:44,320 --> 00:31:50,080
hypothetical 256th pokemon

00:31:48,000 --> 00:31:52,320
but since there are only 151 pokemon in

00:31:50,080 --> 00:31:54,159
the game this ends up writing past the

00:31:52,320 --> 00:31:57,279
space that they used to store which

00:31:54,159 --> 00:31:57,279
pokemon you've encountered

00:31:57,679 --> 00:32:03,360
immediately after your pokedex data in

00:31:59,919 --> 00:32:03,360
ram is your inventory

00:32:03,600 --> 00:32:07,200
because there are 151 pokemon that means

00:32:06,559 --> 00:32:08,640
that the

00:32:07,200 --> 00:32:10,320
the you have to round that up to a

00:32:08,640 --> 00:32:11,679
multiple of eight to get to a number of

00:32:10,320 --> 00:32:13,679
bytes

00:32:11,679 --> 00:32:15,919
so the number of by the the place that

00:32:13,679 --> 00:32:18,880
they end up writing is the 13th byte

00:32:15,919 --> 00:32:20,640
after the end of your pokedex the way

00:32:18,880 --> 00:32:22,399
the inventory is structured is there's

00:32:20,640 --> 00:32:23,600
one byte for the number of items that in

00:32:22,399 --> 00:32:26,000
your inventory

00:32:23,600 --> 00:32:27,840
followed by one byte for each item's id

00:32:26,000 --> 00:32:30,159
and one byte for its quantity in

00:32:27,840 --> 00:32:32,240
alternating pairs

00:32:30,159 --> 00:32:34,399
so that 13th byte ends up being the

00:32:32,240 --> 00:32:36,640
quantity of the sixth item in your

00:32:34,399 --> 00:32:39,360
inventory

00:32:36,640 --> 00:32:41,360
so another way of saying it sets the

00:32:39,360 --> 00:32:42,480
high bit of the 13th byte after the end

00:32:41,360 --> 00:32:44,840
of the pokedex

00:32:42,480 --> 00:32:46,080
the easier way to say that is it adds

00:32:44,840 --> 00:32:48,799
00:32:46,080 --> 00:32:52,640
of that item as long as you have less

00:32:48,799 --> 00:32:52,640
than 128 before

00:32:53,840 --> 00:32:57,440
if you'd beaten the game when you did

00:32:55,600 --> 00:32:59,519
this glitch you would also find that the

00:32:57,440 --> 00:33:00,480
place where it stored the team that you

00:32:59,519 --> 00:33:02,240
beat the game with

00:33:00,480 --> 00:33:03,760
known as the hall of fame was now

00:33:02,240 --> 00:33:06,320
corrupted

00:33:03,760 --> 00:33:08,159
this is caused by missingno's sprite

00:33:06,320 --> 00:33:09,840
remember when i pointed out the pause at

00:33:08,159 --> 00:33:10,880
the start of the fight was abnormally

00:33:09,840 --> 00:33:13,760
long

00:33:10,880 --> 00:33:14,880
this is why because of the amount of

00:33:13,760 --> 00:33:17,200
space they needed

00:33:14,880 --> 00:33:17,919
to deal with sprite information sprites

00:33:17,200 --> 00:33:20,159
get

00:33:17,919 --> 00:33:23,200
decompressed on the cartridges storage

00:33:20,159 --> 00:33:24,960
not on the console's memory

00:33:23,200 --> 00:33:26,799
the space that they they use for this is

00:33:24,960 --> 00:33:28,240
large enough for a seven by seven sprite

00:33:26,799 --> 00:33:28,880
which is the largest that appears in the

00:33:28,240 --> 00:33:30,559
game

00:33:28,880 --> 00:33:31,919
but the data it tries to read for

00:33:30,559 --> 00:33:35,120
missing no sprite is

00:33:31,919 --> 00:33:37,200
says that it's 13 by 13. so this

00:33:35,120 --> 00:33:39,360
ends up giving you that characteristic

00:33:37,200 --> 00:33:41,519
uh stair-step pattern that missingno has

00:33:39,360 --> 00:33:42,480
and it writes way past the end of the

00:33:41,519 --> 00:33:45,120
buffer it

00:33:42,480 --> 00:33:47,360
that was intended for this uh for this

00:33:45,120 --> 00:33:49,200
uh subroutine

00:33:47,360 --> 00:33:52,720
and they go when they go way past that

00:33:49,200 --> 00:33:54,960
they go over right the hall of fame

00:33:52,720 --> 00:33:56,240
now because missing knows sprite is

00:33:54,960 --> 00:33:58,240
reading from rom

00:33:56,240 --> 00:34:00,000
not ram it's reading from code on the

00:33:58,240 --> 00:34:02,080
cartridge this means that the data it

00:34:00,000 --> 00:34:03,440
was overwritten with was consistent for

00:34:02,080 --> 00:34:05,279
everybody

00:34:03,440 --> 00:34:07,440
although the data that would write would

00:34:05,279 --> 00:34:08,399
do things like put the control character

00:34:07,440 --> 00:34:11,679
for print than

00:34:08,399 --> 00:34:13,440
the player's rival in the name so like

00:34:11,679 --> 00:34:14,720
a lot of people would see an ammonite

00:34:13,440 --> 00:34:16,560
named gary but

00:34:14,720 --> 00:34:21,440
gary was just a very common name for a

00:34:16,560 --> 00:34:22,960
rival it could be anything

00:34:21,440 --> 00:34:24,560
nesplug would have been avoided if there

00:34:22,960 --> 00:34:25,919
was some bounce checking in the sprite

00:34:24,560 --> 00:34:28,240
decompression

00:34:25,919 --> 00:34:30,639
but again everything in this game was

00:34:28,240 --> 00:34:32,800
optimized for code size

00:34:30,639 --> 00:34:34,000
if you're only dealing with a known set

00:34:32,800 --> 00:34:37,200
of trusted inputs

00:34:34,000 --> 00:34:38,720
the real sprites for the real pokemon

00:34:37,200 --> 00:34:40,960
omitting those bounce checks seems

00:34:38,720 --> 00:34:42,879
perfectly reasonable

00:34:40,960 --> 00:34:44,879
the only reason this code misbehaved was

00:34:42,879 --> 00:34:48,560
because of an unrelated bug that caused

00:34:44,879 --> 00:34:51,040
it to start getting garbage data

00:34:48,560 --> 00:34:53,040
but when this when this subroutine got a

00:34:51,040 --> 00:34:53,359
real pokemon sprite it always behaved it

00:34:53,040 --> 00:34:56,159
was

00:34:53,359 --> 00:34:56,159
as it was supposed to

00:34:56,879 --> 00:35:00,400
now those are the only two abnormal

00:34:58,560 --> 00:35:02,160
effects of the encounter

00:35:00,400 --> 00:35:04,560
but there's some misinformation around

00:35:02,160 --> 00:35:04,960
there this glitch spread through word of

00:35:04,560 --> 00:35:07,040
mouth

00:35:04,960 --> 00:35:08,880
primarily that means that a lot of false

00:35:07,040 --> 00:35:10,160
rumors or half-truth rumors

00:35:08,880 --> 00:35:12,320
spread around so i'd like to address a

00:35:10,160 --> 00:35:13,920
few of those

00:35:12,320 --> 00:35:15,760
the biggest piece of misinformation you

00:35:13,920 --> 00:35:17,680
probably heard was don't catch missing

00:35:15,760 --> 00:35:21,200
no or it'll corrupt your save

00:35:17,680 --> 00:35:23,119
and this is just straight up false

00:35:21,200 --> 00:35:24,800
there's no reason that you can't catch a

00:35:23,119 --> 00:35:27,040
missingno there's nothing about it that

00:35:24,800 --> 00:35:27,920
can't be saved normally

00:35:27,040 --> 00:35:30,000
i think the source of this

00:35:27,920 --> 00:35:32,880
misinformation is a very specific

00:35:30,000 --> 00:35:34,480
problem that can rise with tick m

00:35:32,880 --> 00:35:36,320
in the games you can bring up to six

00:35:34,480 --> 00:35:38,160
pokemon with you in your party

00:35:36,320 --> 00:35:41,119
if you catch another one when your party

00:35:38,160 --> 00:35:42,880
is full it gets sent to storage

00:35:41,119 --> 00:35:44,480
whenever you open up the storage system

00:35:42,880 --> 00:35:47,040
the game is to recompute

00:35:44,480 --> 00:35:48,640
all of the stats for the stored pokemon

00:35:47,040 --> 00:35:50,320
and there's a bug in this calculation

00:35:48,640 --> 00:35:51,440
that will cause an infinite loop if it

00:35:50,320 --> 00:35:54,640
tries to compute them for

00:35:51,440 --> 00:35:56,160
level zero pokemon and since everybody

00:35:54,640 --> 00:35:57,680
with a custom name could encounter a

00:35:56,160 --> 00:35:59,680
level zero tick m

00:35:57,680 --> 00:36:01,040
and it probably went to storage if you

00:35:59,680 --> 00:36:02,800
caught it because you most likely had

00:36:01,040 --> 00:36:04,079
six pokemon by this point

00:36:02,800 --> 00:36:06,400
i think this was the source of that

00:36:04,079 --> 00:36:06,400
rumor

00:36:06,720 --> 00:36:09,680
another thing you might have heard is

00:36:08,079 --> 00:36:11,200
that catching missingno will cause all

00:36:09,680 --> 00:36:13,359
sorts of graphical glitches

00:36:11,200 --> 00:36:14,400
and nintendo even put out an official

00:36:13,359 --> 00:36:16,560
statement

00:36:14,400 --> 00:36:18,160
saying to try releasing it to fix the

00:36:16,560 --> 00:36:19,119
scrambled graphics and if that doesn't

00:36:18,160 --> 00:36:22,320
work you need to

00:36:19,119 --> 00:36:24,960
restart your game and just all of that

00:36:22,320 --> 00:36:27,040
is nonsense

00:36:24,960 --> 00:36:28,880
there's this very specific mirroring

00:36:27,040 --> 00:36:31,280
effect you can cause if you view the

00:36:28,880 --> 00:36:33,760
stats screen for missingno

00:36:31,280 --> 00:36:35,839
but this only affects a specific sprite

00:36:33,760 --> 00:36:38,240
and it goes away if you view the stat

00:36:35,839 --> 00:36:39,599
screen for any normal pokemon

00:36:38,240 --> 00:36:41,040
there are some bigger glitches if you

00:36:39,599 --> 00:36:42,160
had a missingno and follow-up game

00:36:41,040 --> 00:36:43,680
pokemon yellow

00:36:42,160 --> 00:36:45,520
but the glitch that let you encounter

00:36:43,680 --> 00:36:47,200
missingno in the first place was fixed

00:36:45,520 --> 00:36:50,000
in that game so i don't think that had

00:36:47,200 --> 00:36:51,440
anything to do with this rumor

00:36:50,000 --> 00:36:54,079
finally encountering mystic no wouldn't

00:36:51,440 --> 00:36:56,000
save your game i'm really surprised this

00:36:54,079 --> 00:36:57,280
rumor even exists because it's so easy

00:36:56,000 --> 00:36:59,680
to verify it's false

00:36:57,280 --> 00:37:01,839
just load up a save and and go run into

00:36:59,680 --> 00:37:04,320
one and reset without saving you'll see

00:37:01,839 --> 00:37:06,480
no it did not save your game i think the

00:37:04,320 --> 00:37:08,079
source of this one was an n64 game

00:37:06,480 --> 00:37:09,839
called pokemon stadium

00:37:08,079 --> 00:37:12,000
it had an emulator that included the

00:37:09,839 --> 00:37:14,240
early pokemon games and it displays

00:37:12,000 --> 00:37:15,520
saved on screen whenever anything was

00:37:14,240 --> 00:37:18,480
written to the

00:37:15,520 --> 00:37:20,640
cartridges storage so when that buffer

00:37:18,480 --> 00:37:22,880
overrun happened and the hall of fame

00:37:20,640 --> 00:37:24,160
gets uh corrupted i think that would

00:37:22,880 --> 00:37:26,240
make the word save

00:37:24,160 --> 00:37:27,760
appear on screen and so that would was

00:37:26,240 --> 00:37:29,200
maybe the source of this

00:37:27,760 --> 00:37:32,320
but that would only happen if you were

00:37:29,200 --> 00:37:32,320
playing on the n64

00:37:34,480 --> 00:37:37,839
now that we've seen every piece of this

00:37:36,000 --> 00:37:40,320
glitch we can see that was just

00:37:37,839 --> 00:37:42,240
a bunch of really small seemingly benign

00:37:40,320 --> 00:37:44,000
interactions between unrelated bits of

00:37:42,240 --> 00:37:45,839
code

00:37:44,000 --> 00:37:47,040
no individual piece of this glitch

00:37:45,839 --> 00:37:49,119
stands out to me as

00:37:47,040 --> 00:37:52,480
insane or something that obviously would

00:37:49,119 --> 00:37:52,480
have been stopped in code review

00:37:52,880 --> 00:37:56,240
when you combine all of this together

00:37:54,640 --> 00:37:57,920
you get one of the most famous glitches

00:37:56,240 --> 00:37:59,520
of all time

00:37:57,920 --> 00:38:02,480
it's not the result of some horrendously

00:37:59,520 --> 00:38:04,000
bad coding or lack of qa

00:38:02,480 --> 00:38:07,040
every piece of this glitch was

00:38:04,000 --> 00:38:08,880
relatively benign by itself

00:38:07,040 --> 00:38:10,480
or was just due to some completely

00:38:08,880 --> 00:38:12,400
unrelated part of the code

00:38:10,480 --> 00:38:14,320
interacting with it in some unexpected

00:38:12,400 --> 00:38:15,839
way

00:38:14,320 --> 00:38:18,000
and all this was hand written in

00:38:15,839 --> 00:38:20,640
assembly under massive space

00:38:18,000 --> 00:38:22,480
constraints every instruction they wrote

00:38:20,640 --> 00:38:24,400
mattered

00:38:22,480 --> 00:38:25,680
if i had to work under those constraints

00:38:24,400 --> 00:38:26,560
i certainly wouldn't have done better

00:38:25,680 --> 00:38:28,160
than they did

00:38:26,560 --> 00:38:31,040
and i don't think any person watching

00:38:28,160 --> 00:38:31,040
this would have either

00:38:31,680 --> 00:38:34,880
a phrase i've heard from folks who make

00:38:33,520 --> 00:38:37,920
fun of these glitches

00:38:34,880 --> 00:38:39,280
is completely broken i think we should

00:38:37,920 --> 00:38:41,280
just remove that term from our

00:38:39,280 --> 00:38:43,839
vocabularies

00:38:41,280 --> 00:38:45,119
in this case and many others it's likely

00:38:43,839 --> 00:38:46,079
the software was developed under some

00:38:45,119 --> 00:38:47,760
constraints that we're not

00:38:46,079 --> 00:38:49,760
aware of and we wouldn't do better in

00:38:47,760 --> 00:38:51,200
the same circumstances

00:38:49,760 --> 00:38:52,720
these days that's almost certainly not

00:38:51,200 --> 00:38:54,320
going to be because of the assembly

00:38:52,720 --> 00:38:56,400
language that we're working in it's more

00:38:54,320 --> 00:38:58,160
likely your company pivoted and you're

00:38:56,400 --> 00:38:59,599
now trying to salvage this code base to

00:38:58,160 --> 00:39:02,160
do something completely different

00:38:59,599 --> 00:39:03,920
or your deadline moved either way

00:39:02,160 --> 00:39:05,520
there's always some constraint that

00:39:03,920 --> 00:39:07,760
leads to these sort of decisions being

00:39:05,520 --> 00:39:07,760
made

00:39:09,040 --> 00:39:13,760
to me a lot of this glitch just boils

00:39:10,720 --> 00:39:14,880
down to because assembly

00:39:13,760 --> 00:39:16,480
it's easy for us to take the

00:39:14,880 --> 00:39:18,800
technologies we have at our disposal

00:39:16,480 --> 00:39:21,440
today for granted

00:39:18,800 --> 00:39:22,160
today code size is rarely a hard

00:39:21,440 --> 00:39:24,400
constraint

00:39:22,160 --> 00:39:25,680
certainly not for ruby developers we

00:39:24,400 --> 00:39:26,640
don't care how much code we're putting

00:39:25,680 --> 00:39:29,040
on our web servers

00:39:26,640 --> 00:39:31,040
more often than not in lower level

00:39:29,040 --> 00:39:33,200
languages it sometimes matters because

00:39:31,040 --> 00:39:34,800
of how cpu caches work but it's really

00:39:33,200 --> 00:39:35,359
only a thing that you do for very

00:39:34,800 --> 00:39:38,400
specific

00:39:35,359 --> 00:39:40,320
optimizations you're not in 2020

00:39:38,400 --> 00:39:42,079
going to be writing a program where this

00:39:40,320 --> 00:39:45,599
has to be under 20 kilobytes

00:39:42,079 --> 00:39:47,040
or we can't ship and we run our

00:39:45,599 --> 00:39:49,440
our code on machines powerful enough

00:39:47,040 --> 00:39:51,760
that we can use languages like ruby

00:39:49,440 --> 00:39:53,280
which has all sorts of safety checks in

00:39:51,760 --> 00:39:55,839
it to prevent these bugs and we just

00:39:53,280 --> 00:39:58,400
never give it another

00:39:55,839 --> 00:39:59,359
but in 1996 just use ruby wasn't an

00:39:58,400 --> 00:40:02,240
option

00:39:59,359 --> 00:40:05,680
even just using c wasn't an option i'm

00:40:02,240 --> 00:40:05,680
glad we don't live in that world anymore

00:40:06,800 --> 00:40:10,480
there's a really high quality

00:40:08,319 --> 00:40:12,480
disassembly of the game which i used to

00:40:10,480 --> 00:40:14,480
research this talk

00:40:12,480 --> 00:40:15,920
it doesn't have the comments that the

00:40:14,480 --> 00:40:17,599
real source code would have

00:40:15,920 --> 00:40:19,280
but it was an invaluable tool for

00:40:17,599 --> 00:40:19,760
preparing this talk if you're interested

00:40:19,280 --> 00:40:21,440
in how

00:40:19,760 --> 00:40:23,359
the original pokemon games worked i

00:40:21,440 --> 00:40:25,200
highly recommend checking it out

00:40:23,359 --> 00:40:26,560
and a huge shout out to the people who

00:40:25,200 --> 00:40:29,760
worked on it i could not have done this

00:40:26,560 --> 00:40:31,839
talk without you thank you so much

00:40:29,760 --> 00:40:34,079
my partner co-authored this talk with me

00:40:31,839 --> 00:40:35,760
she did a lot of work uh doing research

00:40:34,079 --> 00:40:36,800
and on the slides she's also hopefully

00:40:35,760 --> 00:40:37,599
going to be giving this at a few

00:40:36,800 --> 00:40:39,280
conferences

00:40:37,599 --> 00:40:40,720
tess i love you thank you so much for

00:40:39,280 --> 00:40:42,400
working on this talk with me it was an

00:40:40,720 --> 00:40:44,000
absolute blast

00:40:42,400 --> 00:40:45,520
i will be around for questions

00:40:44,000 --> 00:40:46,880
immediately following this talk but if

00:40:45,520 --> 00:40:47,520
you are watching a recording of this in

00:40:46,880 --> 00:40:49,520
the future

00:40:47,520 --> 00:40:50,880
hi person in the future i hope things

00:40:49,520 --> 00:40:53,200
are going better for you

00:40:50,880 --> 00:40:55,119
uh here's my contact info please feel

00:40:53,200 --> 00:40:56,079
free to reach out or send me pictures of

00:40:55,119 --> 00:40:58,400
zubats

00:40:56,079 --> 00:40:58,400
thanks

00:41:04,839 --> 00:41:10,160
yes as far as i know yes we can talk now

00:41:07,760 --> 00:41:10,800
so i saw so many pokemon wearing face

00:41:10,160 --> 00:41:13,680
masks

00:41:10,800 --> 00:41:16,880
i thought we should better yes pokemon

00:41:13,680 --> 00:41:16,880
follow public health orders

00:41:17,440 --> 00:41:22,160
um so somewhere at well

00:41:20,560 --> 00:41:24,000
the middle of the talk now even earlier

00:41:22,160 --> 00:41:25,760
already i thought how the hell

00:41:24,000 --> 00:41:27,520
did you get to the bottom of this which

00:41:25,760 --> 00:41:29,760
you shared at the very end thank you for

00:41:27,520 --> 00:41:29,760
that

00:41:30,000 --> 00:41:34,079
um the uh the disassembly was really

00:41:32,560 --> 00:41:35,119
really important it doesn't it doesn't

00:41:34,079 --> 00:41:37,200
have everything

00:41:35,119 --> 00:41:38,800
that the um that the code would have but

00:41:37,200 --> 00:41:40,560
it you can still get a lot of useful

00:41:38,800 --> 00:41:43,760
information from it

00:41:40,560 --> 00:41:46,880
yeah clearly um and

00:41:43,760 --> 00:41:48,400
i think uh well you were running

00:41:46,880 --> 00:41:50,319
somewhat over your

00:41:48,400 --> 00:41:51,760
your slot so we don't have a lot of time

00:41:50,319 --> 00:41:53,680
oh i'm so sorry about that

00:41:51,760 --> 00:41:56,000
at least i'm very happy for you to point

00:41:53,680 --> 00:41:59,119
out how happy we are

00:41:56,000 --> 00:42:01,520
that we get to use high-level languages

00:41:59,119 --> 00:42:02,240
yes yes ruby is amazing i'm so glad we

00:42:01,520 --> 00:42:03,680
get to writing it

00:42:02,240 --> 00:42:04,880
yeah i'm so sorry that i went over time

00:42:03,680 --> 00:42:06,560
and we don't have time for questions but

00:42:04,880 --> 00:42:08,079
please reach out on twitter if you have

00:42:06,560 --> 00:42:10,480
any i will i will be happy to answer

00:42:08,079 --> 00:42:12,640
them or i will be in chat also

00:42:10,480 --> 00:42:14,560
yeah so keep an eye open for chat and

00:42:12,640 --> 00:42:16,240
clearly on twitter

00:42:14,560 --> 00:42:19,440
great well thank you for thank you so

00:42:16,240 --> 00:42:19,440

YouTube URL: https://www.youtube.com/watch?v=Otky83cVLUw


