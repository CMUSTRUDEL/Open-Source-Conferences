Title: Ruby + OpenGL = infinite abilities by Tetiana Chupryna | #NoRuKo 2020
Publication date: 2020-09-11
Playlist: #NoRuKo 2020
Description: 
	In this talk we’ll explore what can we create using Ruby and OpenGL. We’ll talk about drawing pictures, designing animations and building interfaces. You’ll learn about the basics of OpenGL and eventually, how you can build your own game engine.

Tetiana Chupryna is a Backend Engineer at GitLab where she is working on security analysis. At my spare time, she likes drawing or painting with any materials available.

Welcome to the #NoRuKo conference. A virtual unconference organized by Stichting Ruby NL.

#NoRuKo playlist with all talks and panels: https://www.youtube.com/playlist?list=PL9_A7olkztLlmJIAc567KQgKcMi7-qnjg

Recorded 21th of August, 2020.
NoRuKo website: https://noruko.org/
Stichting Ruby NL website: https://rubynl.org/
Captions: 
	00:00:01,599 --> 00:00:04,240
now we're back

00:00:04,640 --> 00:00:08,240
welcome back everybody um before we get

00:00:07,759 --> 00:00:10,960
started

00:00:08,240 --> 00:00:12,639
with our next talk uh i've got another

00:00:10,960 --> 00:00:14,000
developer dilemma for you

00:00:12,639 --> 00:00:15,759
the link is about to go but into the

00:00:14,000 --> 00:00:16,400
youtube chat and the ques and the

00:00:15,759 --> 00:00:18,240
question is

00:00:16,400 --> 00:00:20,720
should developers do design or should

00:00:18,240 --> 00:00:23,359
designers do development

00:00:20,720 --> 00:00:25,119
feel free to jump in and cast your votes

00:00:23,359 --> 00:00:27,519
raita why don't you tell us about what

00:00:25,119 --> 00:00:31,039
we've got next in store

00:00:27,519 --> 00:00:34,000
well our next speaker is tatiana

00:00:31,039 --> 00:00:34,000
welcome to tiana

00:00:36,399 --> 00:00:40,000
let's see if you can get tatiana in our

00:00:38,559 --> 00:00:43,360
studio hey tatiana

00:00:40,000 --> 00:00:45,840
welcome hi hello

00:00:43,360 --> 00:00:47,840
so tatiana is a back-end engineer at

00:00:45,840 --> 00:00:48,960
gitlab where she works on security

00:00:47,840 --> 00:00:51,760
analysis

00:00:48,960 --> 00:00:55,360
and in her spare time she likes drawing

00:00:51,760 --> 00:00:57,520
or painting with any materials available

00:00:55,360 --> 00:01:00,320
and in this tag in this talk titania

00:00:57,520 --> 00:01:03,760
tatiana will explore what we can create

00:01:00,320 --> 00:01:05,360
using ruby and opengl and we'll learn

00:01:03,760 --> 00:01:07,680
about the basics of opengl and

00:01:05,360 --> 00:01:11,200
eventually how we can build our own

00:01:07,680 --> 00:01:15,119
game engine so um tatiana

00:01:11,200 --> 00:01:18,159
the mic is yours thanks

00:01:15,119 --> 00:01:21,680
so uh let me just

00:01:18,159 --> 00:01:22,400
so um yeah so i have today i wanted to

00:01:21,680 --> 00:01:24,320
talk about

00:01:22,400 --> 00:01:25,840
uh graphic programming of graphic

00:01:24,320 --> 00:01:29,600
programming and

00:01:25,840 --> 00:01:31,840
yeah i'm like uh you know my my day

00:01:29,600 --> 00:01:33,680
time job i'm working on a security

00:01:31,840 --> 00:01:36,799
analysis feature so it's like

00:01:33,680 --> 00:01:39,680
literally something different field and

00:01:36,799 --> 00:01:40,000
uh usually we are like tend to think

00:01:39,680 --> 00:01:42,079
about

00:01:40,000 --> 00:01:43,439
ruby as i began to land which for

00:01:42,079 --> 00:01:46,479
security uh

00:01:43,439 --> 00:01:48,479
sorry uh server client applications

00:01:46,479 --> 00:01:50,720
but it's gonna do much more and as i

00:01:48,479 --> 00:01:53,280
like to draw and paint with like

00:01:50,720 --> 00:01:54,799
any material i get so i would i was

00:01:53,280 --> 00:01:57,759
really interested in how i can do it

00:01:54,799 --> 00:01:59,360
using ruby and i would like to share my

00:01:57,759 --> 00:02:03,119
findings with you today

00:01:59,360 --> 00:02:03,119
so i'll share my screen and

00:02:03,680 --> 00:02:07,600
so i can uh yeah i can show you what i

00:02:06,479 --> 00:02:11,440
got

00:02:07,600 --> 00:02:14,480
so uh let's just start let's just uh

00:02:11,440 --> 00:02:14,480
skip to the uh

00:02:14,560 --> 00:02:19,599
uh two and like disclaimer i'll be

00:02:17,840 --> 00:02:22,480
talking about super low level

00:02:19,599 --> 00:02:24,000
stuff today and it's not like a

00:02:22,480 --> 00:02:27,599
production way to

00:02:24,000 --> 00:02:30,480
draw like um level animations

00:02:27,599 --> 00:02:31,760
or these modern video games that uh

00:02:30,480 --> 00:02:35,120
created right now

00:02:31,760 --> 00:02:37,040
because it's uh operate on a level of

00:02:35,120 --> 00:02:40,640
vertexes and like create

00:02:37,040 --> 00:02:44,239
basically you need to create a

00:02:40,640 --> 00:02:47,280
point one by one uh to create your uh

00:02:44,239 --> 00:02:48,000
scene but uh actually it's uh super fun

00:02:47,280 --> 00:02:51,200
to understand

00:02:48,000 --> 00:02:52,000
how it's works under the hood and let's

00:02:51,200 --> 00:02:56,080
just uh

00:02:52,000 --> 00:02:58,720
find out so uh what

00:02:56,080 --> 00:02:59,519
the code that i'm sharing right now this

00:02:58,720 --> 00:03:02,720
is a

00:02:59,519 --> 00:03:05,840
script to create a scene on ruby and

00:03:02,720 --> 00:03:05,840
let me just start it

00:03:06,159 --> 00:03:12,319
uh yeah like first picture for today

00:03:09,280 --> 00:03:15,440
it works uh yeah so we have

00:03:12,319 --> 00:03:16,400
our application and it's just like black

00:03:15,440 --> 00:03:19,519
screen but

00:03:16,400 --> 00:03:22,640
we can for example recite it

00:03:19,519 --> 00:03:25,920
yeah and we can close

00:03:22,640 --> 00:03:29,160
so how it actually works uh we need two

00:03:25,920 --> 00:03:31,680
things to it the first one is we need to

00:03:29,160 --> 00:03:34,560
[Music]

00:03:31,680 --> 00:03:36,400
ruby dash opengl gm which is a binding

00:03:34,560 --> 00:03:39,680
for opengl api

00:03:36,400 --> 00:03:41,599
and the second one is jlfwe

00:03:39,680 --> 00:03:42,799
library which is like super simple

00:03:41,599 --> 00:03:46,000
controller

00:03:42,799 --> 00:03:49,519
like handler for windows and callbacks

00:03:46,000 --> 00:03:53,920
from the keyboard mouses and so on

00:03:49,519 --> 00:03:57,280
so what exactly is opengl api

00:03:53,920 --> 00:04:01,840
opengl api it's the way

00:03:57,280 --> 00:04:01,840
how we can communicate with

00:04:02,000 --> 00:04:08,080
graphic programming units so

00:04:05,040 --> 00:04:10,879
it's uh basically get

00:04:08,080 --> 00:04:11,840
arrays of vertexes of our points in our

00:04:10,879 --> 00:04:13,360
scene

00:04:11,840 --> 00:04:15,599
it shaded

00:04:13,360 --> 00:04:18,639
[Music]

00:04:15,599 --> 00:04:21,600
assemble surfaces triangles or

00:04:18,639 --> 00:04:22,960
lines from these points then it's

00:04:21,600 --> 00:04:26,479
rasterize it

00:04:22,960 --> 00:04:29,680
apply some shaders and then

00:04:26,479 --> 00:04:32,960
render it onto your screens

00:04:29,680 --> 00:04:35,600
so uh we are now right now talking about

00:04:32,960 --> 00:04:36,639
force level of uh opengl standard

00:04:35,600 --> 00:04:39,600
standard because it

00:04:36,639 --> 00:04:41,759
was changed over time and i assume in

00:04:39,600 --> 00:04:44,479
the future it will be replaced

00:04:41,759 --> 00:04:45,199
with vulcan api because vulcan api is

00:04:44,479 --> 00:04:48,080
like

00:04:45,199 --> 00:04:48,800
most modern one and it use uh more of

00:04:48,080 --> 00:04:51,600
the

00:04:48,800 --> 00:04:52,320
uh modern gpus functions that we have

00:04:51,600 --> 00:04:55,280
right now

00:04:52,320 --> 00:04:56,400
so like all of this is needed to render

00:04:55,280 --> 00:04:59,280
stuff

00:04:56,400 --> 00:05:00,800
on your on the screens on your machines

00:04:59,280 --> 00:05:02,000
and you can see that like if we

00:05:00,800 --> 00:05:05,199
operating off

00:05:02,000 --> 00:05:07,919
uh the arrays of vertexes it's

00:05:05,199 --> 00:05:08,560
very low level and opengl doesn't

00:05:07,919 --> 00:05:10,800
provide

00:05:08,560 --> 00:05:12,479
any functions to create any complex

00:05:10,800 --> 00:05:13,919
figures and for that maybe you

00:05:12,479 --> 00:05:17,440
understand that

00:05:13,919 --> 00:05:19,120
it's really hard to um create something

00:05:17,440 --> 00:05:22,479
like

00:05:19,120 --> 00:05:24,880
spheres or circles or curves with

00:05:22,479 --> 00:05:27,199
this tool because you like need to have

00:05:24,880 --> 00:05:29,840
uh the coordinates of all the points

00:05:27,199 --> 00:05:30,320
and it took a lot of calculation powers

00:05:29,840 --> 00:05:33,759
but

00:05:30,320 --> 00:05:36,400
uh as we're talking about um

00:05:33,759 --> 00:05:37,600
opengl like plain open gl it could be

00:05:36,400 --> 00:05:40,960
possible to create

00:05:37,600 --> 00:05:44,320
a quickly some really nice

00:05:40,960 --> 00:05:48,240
program a nice scene so

00:05:44,320 --> 00:05:52,160
let's just take a look about on how

00:05:48,240 --> 00:05:56,160
such graphic programming program

00:05:52,160 --> 00:05:58,000
looks like so um first of all we have to

00:05:56,160 --> 00:06:01,120
create our windows that i

00:05:58,000 --> 00:06:02,800
showed you before and let me just make

00:06:01,120 --> 00:06:06,960
it a bit

00:06:02,800 --> 00:06:11,360
bigger uh so uh when we create

00:06:06,960 --> 00:06:14,000
this gl if we uh window

00:06:11,360 --> 00:06:14,720
uh we can say we are setting a callback

00:06:14,000 --> 00:06:17,600
um

00:06:14,720 --> 00:06:18,800
from the keyboard to this window so

00:06:17,600 --> 00:06:21,039
we'll be listening

00:06:18,800 --> 00:06:22,479
on the like all the events happening to

00:06:21,039 --> 00:06:25,360
the keyboard mouses

00:06:22,479 --> 00:06:26,240
uh game pads but like in our case we

00:06:25,360 --> 00:06:29,759
just uh

00:06:26,240 --> 00:06:33,680
actually interested to know when

00:06:29,759 --> 00:06:36,080
escape k um escape key will be pressed

00:06:33,680 --> 00:06:37,840
and uh when it's pressed we can close

00:06:36,080 --> 00:06:40,800
the window

00:06:37,840 --> 00:06:41,360
so like when we are set up and uh we are

00:06:40,800 --> 00:06:43,600
when

00:06:41,360 --> 00:06:44,880
we set up our window and then we can

00:06:43,600 --> 00:06:47,840
start actually

00:06:44,880 --> 00:06:49,440
uh entering our main loop of our

00:06:47,840 --> 00:06:50,240
application when everything will be

00:06:49,440 --> 00:06:53,680
drawn

00:06:50,240 --> 00:06:56,160
so uh we like uh this loop will be

00:06:53,680 --> 00:06:59,440
entering on every change of the frame

00:06:56,160 --> 00:07:01,280
and uh opengl operates in two buffers so

00:06:59,440 --> 00:07:02,880
in the first one uh like on the virtual

00:07:01,280 --> 00:07:06,560
buffer we actually

00:07:02,880 --> 00:07:09,919
like uh drawing our scenes that we have

00:07:06,560 --> 00:07:10,479
uh here and uh when it's all done it

00:07:09,919 --> 00:07:12,240
will

00:07:10,479 --> 00:07:14,319
swap to another buffer which should be

00:07:12,240 --> 00:07:17,520
shown on the screen and it will be like

00:07:14,319 --> 00:07:20,400
uh changing it like all the time so

00:07:17,520 --> 00:07:20,880
we uh when we enter in like the loop

00:07:20,400 --> 00:07:24,000
when we

00:07:20,880 --> 00:07:27,520
rendering our scene uh we uh firstly

00:07:24,000 --> 00:07:28,240
like uh we want to address the changes

00:07:27,520 --> 00:07:32,960
of the

00:07:28,240 --> 00:07:35,520
size of the window and so we can change

00:07:32,960 --> 00:07:36,160
the frame buffer which is held inside of

00:07:35,520 --> 00:07:39,440
the window

00:07:36,160 --> 00:07:42,639
where we will be rendering our scene so

00:07:39,440 --> 00:07:45,759
uh then we are set up setting up

00:07:42,639 --> 00:07:49,280
the viewport like the uh projection

00:07:45,759 --> 00:07:50,879
like a kind of like the kind of like a

00:07:49,280 --> 00:07:53,919
viewport like the point

00:07:50,879 --> 00:07:57,039
uh on which we'll be watching the scene

00:07:53,919 --> 00:08:00,400
and then we are like clearing every

00:07:57,039 --> 00:08:02,639
was what was drawn on the previous step

00:08:00,400 --> 00:08:03,680
and we can actually can draw something

00:08:02,639 --> 00:08:06,080
here so there is

00:08:03,680 --> 00:08:07,039
nothing right there and i would like to

00:08:06,080 --> 00:08:10,720
start with

00:08:07,039 --> 00:08:14,080
drawing some basic uh chord graphic um

00:08:10,720 --> 00:08:15,759
access coordinates so uh to this we need

00:08:14,080 --> 00:08:18,560
to

00:08:15,759 --> 00:08:18,879
to draw something we need to uh start

00:08:18,560 --> 00:08:21,919
with

00:08:18,879 --> 00:08:23,680
gl begin function which uh apply an

00:08:21,919 --> 00:08:27,440
argument as something

00:08:23,680 --> 00:08:28,560
like the constant that will show what we

00:08:27,440 --> 00:08:32,240
actually want to draw

00:08:28,560 --> 00:08:32,240
and we want to draw lines

00:08:34,080 --> 00:08:40,399
this one and uh like two

00:08:38,320 --> 00:08:42,159
signals that we like this is really the

00:08:40,399 --> 00:08:45,200
end of drawing lines we

00:08:42,159 --> 00:08:48,399
have to write this gel end function

00:08:45,200 --> 00:08:51,600
and uh to draw the line if we need

00:08:48,399 --> 00:08:54,640
to like we need when drawing these two

00:08:51,600 --> 00:08:57,600
um these two points and

00:08:54,640 --> 00:08:58,800
to uh get a point we have a function

00:08:57,600 --> 00:09:02,160
jail

00:08:58,800 --> 00:09:02,160
vertex three

00:09:02,880 --> 00:09:08,399
um and so

00:09:06,240 --> 00:09:10,160
the x will be the first one for example

00:09:08,399 --> 00:09:14,000
-1

00:09:10,160 --> 00:09:17,440
0 0 and the second one

00:09:14,000 --> 00:09:20,480
will be this one

00:09:17,440 --> 00:09:20,480
let's see what we have

00:09:21,519 --> 00:09:29,519
so yeah we don't have one not

00:09:24,560 --> 00:09:32,640
very exciting line and

00:09:29,519 --> 00:09:33,200
let me just copy some uh the code that i

00:09:32,640 --> 00:09:39,040
have

00:09:33,200 --> 00:09:39,040
prepared so it will be much quicker

00:09:41,760 --> 00:09:48,959
yeah and i'll explain it right now so

00:09:44,959 --> 00:09:52,160
uh this one will it will be uh

00:09:48,959 --> 00:09:55,279
x coordinate uh igorik axis

00:09:52,160 --> 00:09:57,360
and z axis and i'm using

00:09:55,279 --> 00:09:58,720
uh i want to color them in different

00:09:57,360 --> 00:10:01,600
colors so

00:09:58,720 --> 00:10:03,279
i'll use in this color library which is

00:10:01,600 --> 00:10:07,360
like uh i've

00:10:03,279 --> 00:10:11,440
brought by myself and this is basically

00:10:07,360 --> 00:10:13,920
uh just a library of preset colors

00:10:11,440 --> 00:10:15,279
and all of them they're using this gel

00:10:13,920 --> 00:10:18,640
color

00:10:15,279 --> 00:10:21,680
function and it will be

00:10:18,640 --> 00:10:25,120
having an argument as a rgb

00:10:21,680 --> 00:10:28,399
channel coordinates so

00:10:25,120 --> 00:10:31,920
we can apply um this color to

00:10:28,399 --> 00:10:32,480
vertexes that we want we can color them

00:10:31,920 --> 00:10:36,399
and

00:10:32,480 --> 00:10:38,399
let's see what we have

00:10:36,399 --> 00:10:40,240
yeah so we don't see actually the third

00:10:38,399 --> 00:10:42,720
one because our viewport

00:10:40,240 --> 00:10:43,839
like we are uh like it's it's hidden

00:10:42,720 --> 00:10:46,800
right now

00:10:43,839 --> 00:10:47,120
and it will be nice to actually uh see

00:10:46,800 --> 00:10:50,480
it

00:10:47,120 --> 00:10:53,920
so uh we can rotate our um

00:10:50,480 --> 00:10:57,040
our scene to it so we can actually have

00:10:53,920 --> 00:11:00,079
uh so there is a function for it

00:10:57,040 --> 00:11:02,560
called uh rotate and uh f

00:11:00,079 --> 00:11:03,440
it's been like it's accept coordinates

00:11:02,560 --> 00:11:07,040
and float

00:11:03,440 --> 00:11:08,880
so this uh function uh

00:11:07,040 --> 00:11:10,720
apply transfer rotation versus

00:11:08,880 --> 00:11:14,320
transformation to every

00:11:10,720 --> 00:11:17,760
um vertex that we have later

00:11:14,320 --> 00:11:21,279
uh the first argument is angle and uh

00:11:17,760 --> 00:11:24,560
i would like to use this uh gl

00:11:21,279 --> 00:11:29,040
fob time function we just like get

00:11:24,560 --> 00:11:31,279
time and it'll be um just um

00:11:29,040 --> 00:11:32,160
changing over time over time and we'll

00:11:31,279 --> 00:11:35,839
get this

00:11:32,160 --> 00:11:40,000
our rotation um

00:11:35,839 --> 00:11:43,040
automatically let's see how it works

00:11:40,000 --> 00:11:45,600
so yeah so our our

00:11:43,040 --> 00:11:46,399
viewport is rotating and we can see the

00:11:45,600 --> 00:11:49,760
whole scene

00:11:46,399 --> 00:11:53,200
from different angles so uh yeah

00:11:49,760 --> 00:11:56,160
it's not very super exciting uh

00:11:53,200 --> 00:11:56,639
we can continue and right now this step

00:11:56,160 --> 00:12:00,560
let's

00:11:56,639 --> 00:12:03,200
draw some figures and as i said

00:12:00,560 --> 00:12:04,800
it's not very easy uh way to do it

00:12:03,200 --> 00:12:08,000
because we can actually

00:12:04,800 --> 00:12:10,959
uh allow to draw not like

00:12:08,000 --> 00:12:11,360
with opengl we can uh we are allowed to

00:12:10,959 --> 00:12:14,800
draw

00:12:11,360 --> 00:12:18,800
like very limited amount of uh

00:12:14,800 --> 00:12:21,920
shapes and uh so let's see what uh

00:12:18,800 --> 00:12:22,800
our params gel begin except so you we

00:12:21,920 --> 00:12:26,240
can see that

00:12:22,800 --> 00:12:29,200
it accept so like basically we are

00:12:26,240 --> 00:12:30,399
watching this kind of constants so uh we

00:12:29,200 --> 00:12:32,720
can draw points

00:12:30,399 --> 00:12:33,839
lines like different uh in different

00:12:32,720 --> 00:12:36,079
variations

00:12:33,839 --> 00:12:38,399
triangles and quotes which is like

00:12:36,079 --> 00:12:40,480
squares and it's basically very

00:12:38,399 --> 00:12:41,440
like they're easy to draw because it's

00:12:40,480 --> 00:12:44,880
just like

00:12:41,440 --> 00:12:48,399
um two

00:12:44,880 --> 00:12:50,880
triangles in in together

00:12:48,399 --> 00:12:52,079
and uh if we want to draw something

00:12:50,880 --> 00:12:54,240
three-dimensional we

00:12:52,079 --> 00:12:57,440
actually there is no way how to do it we

00:12:54,240 --> 00:13:01,360
have to create our own functions

00:12:57,440 --> 00:13:04,399
uh so let's just uh do it

00:13:01,360 --> 00:13:07,200
uh i've already like i've recreated

00:13:04,399 --> 00:13:08,320
and i'll want to draw right now a

00:13:07,200 --> 00:13:11,360
pyramid

00:13:08,320 --> 00:13:13,839
and uh so

00:13:11,360 --> 00:13:15,360
pyramid will be drawing the pyramid

00:13:13,839 --> 00:13:18,399
which will be contained in

00:13:15,360 --> 00:13:20,000
uh will be drawn from the triangles and

00:13:18,399 --> 00:13:23,760
from equal triangles

00:13:20,000 --> 00:13:25,839
and you to uh do the math

00:13:23,760 --> 00:13:27,120
like after getting the coordinates much

00:13:25,839 --> 00:13:30,320
easier for us

00:13:27,120 --> 00:13:32,959
so basically uh like i there is a like

00:13:30,320 --> 00:13:34,079
uh the picture of the pyramids that i

00:13:32,959 --> 00:13:37,440
want to draw

00:13:34,079 --> 00:13:39,680
with ruby and uh we need actually it's

00:13:37,440 --> 00:13:41,440
quite quite easy because we need only

00:13:39,680 --> 00:13:44,959
four points to draw this

00:13:41,440 --> 00:13:48,639
uh figure and uh basically

00:13:44,959 --> 00:13:50,079
we need to know uh the x egreg and z for

00:13:48,639 --> 00:13:53,199
all the coordinates

00:13:50,079 --> 00:13:53,680
and it's kind of like uh for me it was a

00:13:53,199 --> 00:13:55,440
bit

00:13:53,680 --> 00:13:56,720
in the beginning a bit frustrating but

00:13:55,440 --> 00:13:59,760
then i realized that

00:13:56,720 --> 00:14:02,800
if we have like equal triangle and

00:13:59,760 --> 00:14:06,399
we have this this and uh inner

00:14:02,800 --> 00:14:08,560
sized circle circles we actually

00:14:06,399 --> 00:14:09,600
need to know this radiuses of this

00:14:08,560 --> 00:14:13,040
circles

00:14:09,600 --> 00:14:15,680
to uh to get any uh

00:14:13,040 --> 00:14:16,320
coordinates of the of these points of

00:14:15,680 --> 00:14:19,519
the

00:14:16,320 --> 00:14:22,560
pyramid if we have

00:14:19,519 --> 00:14:26,480
if this will be a center so

00:14:22,560 --> 00:14:27,360
uh these radios are googled very quickly

00:14:26,480 --> 00:14:30,720
so

00:14:27,360 --> 00:14:31,120
the formulas are very easy and in this

00:14:30,720 --> 00:14:35,120
case

00:14:31,120 --> 00:14:37,440
a is like a side of this triangle and

00:14:35,120 --> 00:14:38,480
because it's an equal triangle it will

00:14:37,440 --> 00:14:43,279
be

00:14:38,480 --> 00:14:47,040
like equal for every side of the pyramid

00:14:43,279 --> 00:14:50,240
so uh let's just talk about

00:14:47,040 --> 00:14:54,160
um this class the draw pyramid

00:14:50,240 --> 00:14:57,519
so we're accepting uh length of the side

00:14:54,160 --> 00:15:00,320
um the apex is like the high point

00:14:57,519 --> 00:15:01,760
so like basically if we know the apex so

00:15:00,320 --> 00:15:04,959
this needs that we only

00:15:01,760 --> 00:15:08,240
need to figure out another three base

00:15:04,959 --> 00:15:11,120
points of this pyramid and it accept

00:15:08,240 --> 00:15:13,279
also colors that will be uh used for

00:15:11,120 --> 00:15:17,920
coloring drawing

00:15:13,279 --> 00:15:21,199
um like coloring the vertex of our uh

00:15:17,920 --> 00:15:23,519
pyramid and because we'll be using

00:15:21,199 --> 00:15:25,360
different colors for different like

00:15:23,519 --> 00:15:26,800
we'll be coloring apaches in different

00:15:25,360 --> 00:15:29,040
colors every time so

00:15:26,800 --> 00:15:30,079
it will have nice shades and you'll just

00:15:29,040 --> 00:15:33,440
see it

00:15:30,079 --> 00:15:36,560
so basically this is uh

00:15:33,440 --> 00:15:39,120
the matte then we are drawing like

00:15:36,560 --> 00:15:40,000
we draw we'll be drawing triangles and

00:15:39,120 --> 00:15:43,360
in triangles

00:15:40,000 --> 00:15:47,120
we um draw in

00:15:43,360 --> 00:15:50,240
all the points and that's pretty

00:15:47,120 --> 00:15:54,639
uh that's it it's not very

00:15:50,240 --> 00:15:56,720
like a lot of code but it's not very

00:15:54,639 --> 00:15:58,399
like easy to read because there is a lot

00:15:56,720 --> 00:16:01,600
of points here

00:15:58,399 --> 00:16:09,839
so uh let's just draw

00:16:01,600 --> 00:16:09,839
this pyramid here

00:16:12,160 --> 00:16:20,480
and i'll make it

00:16:16,399 --> 00:16:23,839
0.5 and this is actually

00:16:20,480 --> 00:16:25,040
an coordinates so we are having our

00:16:23,839 --> 00:16:28,399
viewport

00:16:25,040 --> 00:16:31,040
from like um our projection is

00:16:28,399 --> 00:16:33,199
from minus one to one so this means that

00:16:31,040 --> 00:16:33,920
we actually uh not operating in pixel

00:16:33,199 --> 00:16:36,959
with like

00:16:33,920 --> 00:16:40,160
operating some kind of absolute uh like

00:16:36,959 --> 00:16:43,600
relative values and we'll have

00:16:40,160 --> 00:16:47,120
i want to like um right now that

00:16:43,600 --> 00:16:50,720
uh my pyramid will be just

00:16:47,120 --> 00:16:50,720
taking up like half of the

00:16:51,120 --> 00:16:55,839
of the space of our viewport as next one

00:16:54,639 --> 00:16:58,639
will be coordinate

00:16:55,839 --> 00:16:58,639
of the axis

00:16:59,759 --> 00:17:07,760
and the color and we have to buy

00:17:03,680 --> 00:17:19,839
some uh so i will use

00:17:07,760 --> 00:17:19,839
color and then

00:17:23,919 --> 00:17:26,720
and let's try

00:17:29,679 --> 00:17:33,200
uh so you can see it's blinking it's

00:17:32,160 --> 00:17:35,679
blinking because

00:17:33,200 --> 00:17:37,840
on every step i'm using like a different

00:17:35,679 --> 00:17:41,919
uh random color

00:17:37,840 --> 00:17:44,080
and um that's why it's blinking

00:17:41,919 --> 00:17:46,000
but yeah we have we have something

00:17:44,080 --> 00:17:49,280
rendered here

00:17:46,000 --> 00:17:51,679
and uh this is a point when we want to

00:17:49,280 --> 00:17:53,440
add some interaction so we like

00:17:51,679 --> 00:17:55,679
right now we just have like very simple

00:17:53,440 --> 00:17:58,799
animation and uh

00:17:55,679 --> 00:18:01,440
basically it's uh it's something

00:17:58,799 --> 00:18:01,840
but usually much nicer if we allow the

00:18:01,440 --> 00:18:03,760
user

00:18:01,840 --> 00:18:06,160
because it's the application and we can

00:18:03,760 --> 00:18:09,440
allow user to control the scene

00:18:06,160 --> 00:18:13,440
and um let's just start from like

00:18:09,440 --> 00:18:15,039
um maybe giving the user to control on

00:18:13,440 --> 00:18:18,440
rotation

00:18:15,039 --> 00:18:24,160
so we basically need to

00:18:18,440 --> 00:18:27,280
[Music]

00:18:24,160 --> 00:18:30,480
need to so i want to

00:18:27,280 --> 00:18:32,000
like uh when i like uh press for longer

00:18:30,480 --> 00:18:34,720
the key i want to like

00:18:32,000 --> 00:18:35,120
the scene to be rotated so we need to

00:18:34,720 --> 00:18:38,000
add

00:18:35,120 --> 00:18:39,840
a callback for some key uh which will be

00:18:38,000 --> 00:18:42,880
rotating the scene

00:18:39,840 --> 00:18:45,919
let me just copy it

00:18:42,880 --> 00:18:45,919
if you land support

00:18:54,559 --> 00:19:00,240
just skip this right now and

00:18:57,760 --> 00:19:00,240
um

00:19:05,440 --> 00:19:13,200
so um what we want to do so when

00:19:09,600 --> 00:19:16,480
we like repeat like which means a long

00:19:13,200 --> 00:19:20,320
log pressing uh space key we

00:19:16,480 --> 00:19:23,600
will be incrementing um some

00:19:20,320 --> 00:19:24,400
value and will be which will be in our

00:19:23,600 --> 00:19:27,520
angle

00:19:24,400 --> 00:19:32,000
of rotation uh transformation

00:19:27,520 --> 00:19:32,000
and we just pass it here and

00:19:33,120 --> 00:19:40,400
we can see that yeah it's still blinking

00:19:36,160 --> 00:19:43,360
uh but yeah i'm pressing um

00:19:40,400 --> 00:19:43,840
space button and it's rotated right now

00:19:43,360 --> 00:19:46,000
and

00:19:43,840 --> 00:19:46,000
uh

00:19:49,760 --> 00:19:53,120
let me just change it to something not

00:19:51,919 --> 00:19:55,679
blinking

00:19:53,120 --> 00:19:55,679
for example

00:19:56,160 --> 00:20:07,840
sorry i'll need to use array

00:19:59,200 --> 00:20:07,840
for example 0 on

00:20:12,080 --> 00:20:18,880
so um and so we are rotating the scene

00:20:16,320 --> 00:20:19,360
and it will be interesting to just like

00:20:18,880 --> 00:20:23,280
move

00:20:19,360 --> 00:20:25,360
this pyramid uh on the surface

00:20:23,280 --> 00:20:27,200
so for this one we need another

00:20:25,360 --> 00:20:31,520
different uh

00:20:27,200 --> 00:20:34,880
handlers so we'll be controlling uh

00:20:31,520 --> 00:20:35,440
different uh keys that will be operating

00:20:34,880 --> 00:20:38,640
like

00:20:35,440 --> 00:20:40,640
on the um go up like go down

00:20:38,640 --> 00:20:43,039
near below left right so we'll be

00:20:40,640 --> 00:20:46,320
controlling a transformation

00:20:43,039 --> 00:20:48,400
on a different axis so if we're going in

00:20:46,320 --> 00:20:51,840
one direction we'll be implementing

00:20:48,400 --> 00:20:53,760
this um transformation if we're going in

00:20:51,840 --> 00:20:56,159
different one will be

00:20:53,760 --> 00:20:56,159
um

00:20:56,960 --> 00:21:05,039
will be like decreasing it so let's just

00:21:00,559 --> 00:21:05,039
make them zero

00:21:14,840 --> 00:21:17,840
include

00:21:21,520 --> 00:21:28,159
so uh yeah so we have controllers

00:21:24,720 --> 00:21:31,039
and we need to apply transformation uh

00:21:28,159 --> 00:21:31,760
the transformation in opengl uh that

00:21:31,039 --> 00:21:34,080
will be

00:21:31,760 --> 00:21:35,440
uh changing like moving the objects

00:21:34,080 --> 00:21:38,559
moving uh

00:21:35,440 --> 00:21:40,240
uh the kind of moving uh vertexes and

00:21:38,559 --> 00:21:43,600
objects in our case

00:21:40,240 --> 00:21:45,919
uh it's called translate and we'll

00:21:43,600 --> 00:21:47,120
want i want to apply it only to the

00:21:45,919 --> 00:21:49,840
pyramid itself

00:21:47,120 --> 00:21:50,240
so we are like we'll be rotating air or

00:21:49,840 --> 00:21:53,440
like

00:21:50,240 --> 00:21:58,400
the whole on the scene but uh translate

00:21:53,440 --> 00:22:01,200
only um

00:21:58,400 --> 00:22:01,200
only pyramid

00:22:08,880 --> 00:22:16,480
so uh so uh like as i said

00:22:12,720 --> 00:22:20,640
opengl operates on uh vertex matrix

00:22:16,480 --> 00:22:22,880
and this is basically um

00:22:20,640 --> 00:22:25,039
applied will be applied this like will

00:22:22,880 --> 00:22:28,080
this will be applied to the matrix

00:22:25,039 --> 00:22:30,799
that we have for discord needs let's see

00:22:28,080 --> 00:22:30,799
how it works

00:22:32,480 --> 00:22:38,880
so if i press yeah

00:22:35,520 --> 00:22:42,480
so like i'm pressing as it should go

00:22:38,880 --> 00:22:45,760
down now it should go left

00:22:42,480 --> 00:22:46,799
right let's just rotate it so you can

00:22:45,760 --> 00:22:51,440
see

00:22:46,799 --> 00:22:51,440
um x is that coordinate

00:22:53,200 --> 00:22:59,840
go no near or like

00:22:57,200 --> 00:23:00,320
said plus that minuses uh i don't know

00:22:59,840 --> 00:23:04,880
the name

00:23:00,320 --> 00:23:07,760
on for that company so yeah it works

00:23:04,880 --> 00:23:08,000
uh and the last thing that i want to

00:23:07,760 --> 00:23:10,960
show

00:23:08,000 --> 00:23:11,600
that we want to do with the scene we can

00:23:10,960 --> 00:23:16,480
actually

00:23:11,600 --> 00:23:18,159
uh add more objects to the scene

00:23:16,480 --> 00:23:21,200
and we can actually add another

00:23:18,159 --> 00:23:24,960
controller so when we press

00:23:21,200 --> 00:23:24,960
some other comments let's say

00:23:25,280 --> 00:23:27,679
drill

00:23:29,200 --> 00:23:41,120
a for example we didn't use it

00:23:37,200 --> 00:23:44,000
so we'll be uh increasing the amount

00:23:41,120 --> 00:23:44,480
of uh objects in the scene and let me

00:23:44,000 --> 00:23:46,799
just

00:23:44,480 --> 00:23:48,480
copy the last part of the code that i

00:23:46,799 --> 00:24:05,600
wanted to show

00:23:48,480 --> 00:24:08,799
so i want to make in mistakes

00:24:05,600 --> 00:24:12,080
yeah and uh so like what i'm doing so

00:24:08,799 --> 00:24:15,840
uh when we press the picking uh

00:24:12,080 --> 00:24:19,200
will be uh so we have an array of

00:24:15,840 --> 00:24:21,520
our objects in our

00:24:19,200 --> 00:24:23,039
in the scene and when i when we press

00:24:21,520 --> 00:24:25,840
key we will be adding

00:24:23,039 --> 00:24:25,840
more objects

00:24:29,679 --> 00:24:34,559
so i just replace the code here

00:24:38,799 --> 00:24:43,679
so uh and like if our like counter of

00:24:42,799 --> 00:24:47,039
our objects

00:24:43,679 --> 00:24:50,240
it's uh is different from uh the counter

00:24:47,039 --> 00:24:53,600
from the object that we have already

00:24:50,240 --> 00:24:56,720
now ray will be pushing more objects

00:24:53,600 --> 00:24:58,840
from diff in different position and of

00:24:56,720 --> 00:25:02,400
different color

00:24:58,840 --> 00:25:05,039
and uh let's see how we

00:25:02,400 --> 00:25:05,039
see the scene

00:25:05,440 --> 00:25:15,840
yeah and like when i press p it's create

00:25:08,960 --> 00:25:15,840
more objects and we can rotate the scene

00:25:20,799 --> 00:25:26,840
and when we um

00:25:24,400 --> 00:25:30,720
when we pre when i press the key that

00:25:26,840 --> 00:25:33,840
control uh translation

00:25:30,720 --> 00:25:34,080
um you can see that uh like it translate

00:25:33,840 --> 00:25:35,840
and

00:25:34,080 --> 00:25:37,600
you right now you can see that not

00:25:35,840 --> 00:25:40,320
everything is rendered

00:25:37,600 --> 00:25:42,640
that's because my viewport is set for

00:25:40,320 --> 00:25:45,039
like um

00:25:42,640 --> 00:25:46,640
that like this figure they are outside

00:25:45,039 --> 00:25:47,200
of the viewport and we don't see them

00:25:46,640 --> 00:25:49,360
and

00:25:47,200 --> 00:25:50,720
like open jail like remove them from

00:25:49,360 --> 00:25:53,760
their drawing

00:25:50,720 --> 00:25:56,880
yeah and uh the last

00:25:53,760 --> 00:25:57,679
like we have a few minutes so um i was

00:25:56,880 --> 00:26:00,640
kind of

00:25:57,679 --> 00:26:02,159
interested what we can do actually how

00:26:00,640 --> 00:26:05,760
many objects that we can

00:26:02,159 --> 00:26:09,200
uh draw uh like i guess the same number

00:26:05,760 --> 00:26:12,640
to show will be three thousand uh

00:26:09,200 --> 00:26:14,799
i've tried uh these for ten thousand and

00:26:12,640 --> 00:26:18,000
it was quite small but i'm afraid that

00:26:14,799 --> 00:26:21,440
my uh laptop won't handle uh

00:26:18,000 --> 00:26:23,279
this uh stream and uh then the scene

00:26:21,440 --> 00:26:27,520
with ten thousand objects

00:26:23,279 --> 00:26:27,520
but also it worked with

00:26:29,120 --> 00:26:38,720
but it was super slow so let's see how

00:26:32,559 --> 00:26:42,640
it works with 3000

00:26:38,720 --> 00:26:45,840
yeah so we have our pyramids

00:26:42,640 --> 00:26:50,400
uh it's quite

00:26:45,840 --> 00:26:54,240
like quite quick it's rotated it's nice

00:26:50,400 --> 00:26:56,400
so if we have if we'll have a scene with

00:26:54,240 --> 00:26:57,360
like for the now 5 000 objects it'll be

00:26:56,400 --> 00:26:59,120
much slower

00:26:57,360 --> 00:27:00,640
and you can see it's slower than it was

00:26:59,120 --> 00:27:04,480
before and

00:27:00,640 --> 00:27:06,880
if we translate so it's

00:27:04,480 --> 00:27:09,120
it's removed from the scene and stare

00:27:06,880 --> 00:27:09,120
back

00:27:14,720 --> 00:27:17,919
so this is all that i wanted to share

00:27:16,640 --> 00:27:20,720
with you today

00:27:17,919 --> 00:27:21,760
uh so basically this is very simple like

00:27:20,720 --> 00:27:25,360
script

00:27:21,760 --> 00:27:27,760
and uh it uh require uh like a little

00:27:25,360 --> 00:27:29,279
of dependencies but it actually allows

00:27:27,760 --> 00:27:31,919
you to create something

00:27:29,279 --> 00:27:33,200
and uh you can actually create your like

00:27:31,919 --> 00:27:37,360
having

00:27:33,200 --> 00:27:38,960
this keyboard called bayek you can

00:27:37,360 --> 00:27:42,480
create something interactive for your

00:27:38,960 --> 00:27:42,480
users and

00:27:43,440 --> 00:27:47,600
that's nice i guess that's i guess it's

00:27:45,600 --> 00:27:49,120
really fun that on ruby we can create

00:27:47,600 --> 00:27:50,720
something different from beginned

00:27:49,120 --> 00:27:54,720
applications that we all

00:27:50,720 --> 00:27:57,200
uh love to do but uh something different

00:27:54,720 --> 00:27:59,120
and uh we actually on ruby's there is

00:27:57,200 --> 00:28:02,399
another like a

00:27:59,120 --> 00:28:06,080
game engine called glosso but it's

00:28:02,399 --> 00:28:07,039
all only um only for uh two-dimensional

00:28:06,080 --> 00:28:09,360
graphics

00:28:07,039 --> 00:28:10,880
but if you want to try something for

00:28:09,360 --> 00:28:14,000
three-dimensional unfortunately if you

00:28:10,880 --> 00:28:16,640
want to create some like

00:28:14,000 --> 00:28:18,320
professional level animations and games

00:28:16,640 --> 00:28:20,240
you have to i guess switch from the

00:28:18,320 --> 00:28:21,679
different language but anyway if you

00:28:20,240 --> 00:28:25,120
want to create something

00:28:21,679 --> 00:28:28,799
uh quite simple and fun you can use ruby

00:28:25,120 --> 00:28:31,120
and i guess it's really uh big

00:28:28,799 --> 00:28:32,399
uh i guess for me it's really it was

00:28:31,120 --> 00:28:35,520
really fun to

00:28:32,399 --> 00:28:36,080
uh dig into it and uh encourage you to

00:28:35,520 --> 00:28:39,760
try it

00:28:36,080 --> 00:28:43,120
because it's uh really uh really

00:28:39,760 --> 00:28:44,960
uh fun and i guess this is like even if

00:28:43,120 --> 00:28:46,799
it's like a discord right now it's super

00:28:44,960 --> 00:28:49,520
ugly because it's uh

00:28:46,799 --> 00:28:50,240
written in hurry and it's just like one

00:28:49,520 --> 00:28:54,000
giant

00:28:50,240 --> 00:28:56,000
loop and one giant uh script but anyway

00:28:54,000 --> 00:28:57,120
this is i know this is the most

00:28:56,000 --> 00:29:02,159
beautiful quote that i

00:28:57,120 --> 00:29:03,919
written in all my life so thank you for

00:29:02,159 --> 00:29:07,520
listening to me and right now i guess

00:29:03,919 --> 00:29:07,520
we'll skip to q a

00:29:08,030 --> 00:29:12,559
[Music]

00:29:09,679 --> 00:29:13,039
thank you tatiana that was wonderful uh

00:29:12,559 --> 00:29:16,240
i

00:29:13,039 --> 00:29:18,799
i love looking at at these kind of talks

00:29:16,240 --> 00:29:19,600
take shape sorry i promise i wouldn't do

00:29:18,799 --> 00:29:22,480
any puns

00:29:19,600 --> 00:29:23,440
um um listen it's been it's been

00:29:22,480 --> 00:29:25,279
absolutely

00:29:23,440 --> 00:29:27,840
wonderful to see you live code massive

00:29:25,279 --> 00:29:31,039
props it's what a what a great talk

00:29:27,840 --> 00:29:33,760
um let's give you a moment to

00:29:31,039 --> 00:29:35,279
to have a sip of water folks start

00:29:33,760 --> 00:29:36,799
writing those questions in

00:29:35,279 --> 00:29:39,200
into the youtube chat we want to hear

00:29:36,799 --> 00:29:42,240
from you um

00:29:39,200 --> 00:29:45,279
in the meantime let's check on

00:29:42,240 --> 00:29:45,840
our developer dilemma so the question

00:29:45,279 --> 00:29:47,760
was

00:29:45,840 --> 00:29:50,080
should developers do design or should

00:29:47,760 --> 00:29:53,279
designers do development

00:29:50,080 --> 00:29:55,039
so you've all spoken and the results are

00:29:53,279 --> 00:29:57,039
twenty percent of you think that

00:29:55,039 --> 00:29:59,200
developers should be doing design

00:29:57,039 --> 00:30:00,960
and eighty percent of you that is eight

00:29:59,200 --> 00:30:02,559
zero percent of you

00:30:00,960 --> 00:30:04,960
think that designers should be doing

00:30:02,559 --> 00:30:08,399
development

00:30:04,960 --> 00:30:09,840
well let's jump into some questions

00:30:08,399 --> 00:30:11,520
raita what do you would you like to

00:30:09,840 --> 00:30:14,960
start

00:30:11,520 --> 00:30:16,559
yeah so um tatiana uh one of the

00:30:14,960 --> 00:30:22,080
questions is that

00:30:16,559 --> 00:30:26,640
uh what made you want to try opengl

00:30:22,080 --> 00:30:29,679
um so basically um i wanted to try to

00:30:26,640 --> 00:30:30,799
draw something and basically we don't

00:30:29,679 --> 00:30:33,679
have any options

00:30:30,799 --> 00:30:34,559
like like to do it easily because um

00:30:33,679 --> 00:30:36,399
maybe i

00:30:34,559 --> 00:30:37,760
forget to mention is this during the

00:30:36,399 --> 00:30:41,679
talk opengl

00:30:37,760 --> 00:30:44,080
is a cross language and cross platform

00:30:41,679 --> 00:30:45,200
apis that use like basically on every

00:30:44,080 --> 00:30:47,679
device

00:30:45,200 --> 00:30:49,600
and uh right now like there is no

00:30:47,679 --> 00:30:50,240
alternative for it right now maybe it

00:30:49,600 --> 00:30:53,200
look feature

00:30:50,240 --> 00:30:53,440
will be replaced but vulcan but like

00:30:53,200 --> 00:30:56,559
it's

00:30:53,440 --> 00:30:58,640
just the base the basic plate uh like

00:30:56,559 --> 00:31:00,240
like right the right place to start

00:30:58,640 --> 00:31:02,640
there is another uh

00:31:00,240 --> 00:31:03,519
graphic engines and libraries to draw

00:31:02,640 --> 00:31:06,320
graphics

00:31:03,519 --> 00:31:07,360
but i really wanted to like dig into

00:31:06,320 --> 00:31:10,240
like uh

00:31:07,360 --> 00:31:12,080
the most low level and understand how it

00:31:10,240 --> 00:31:14,720
actually works under the hood and

00:31:12,080 --> 00:31:17,200
when you like uh because it's everything

00:31:14,720 --> 00:31:19,600
like you know opengl it works with a

00:31:17,200 --> 00:31:21,600
vertex and with matrixes and we your

00:31:19,600 --> 00:31:23,440
works with matrix operation

00:31:21,600 --> 00:31:25,440
it's like it's really different like

00:31:23,440 --> 00:31:27,039
it's it's not at this point it's not

00:31:25,440 --> 00:31:28,880
graphics it's like math

00:31:27,039 --> 00:31:32,799
and true it's for me it was really fun

00:31:28,880 --> 00:31:35,600
to dictate

00:31:32,799 --> 00:31:36,000
thank you thank you thank you yeah

00:31:35,600 --> 00:31:38,080
that's

00:31:36,000 --> 00:31:39,440
that's super cool i'm i'm curious this

00:31:38,080 --> 00:31:41,840
is a question from me i'm kind of

00:31:39,440 --> 00:31:42,880
just going to take the opportunity um

00:31:41,840 --> 00:31:45,039
did you also

00:31:42,880 --> 00:31:45,919
uh or can you with ruby have you looked

00:31:45,039 --> 00:31:51,120
into webgl

00:31:45,919 --> 00:31:54,320
as well um i actually didn't try about

00:31:51,120 --> 00:31:56,640
webgl with ruby but

00:31:54,320 --> 00:31:58,240
because actually kind of i like i have

00:31:56,640 --> 00:32:01,519
some experience with opengl

00:31:58,240 --> 00:32:02,480
in past because i was uh trying to write

00:32:01,519 --> 00:32:05,679
some progress like

00:32:02,480 --> 00:32:06,399
games to be sharp and their game engines

00:32:05,679 --> 00:32:08,720
that they have

00:32:06,399 --> 00:32:10,000
so for me it was much easier to start

00:32:08,720 --> 00:32:13,679
with opengl

00:32:10,000 --> 00:32:16,080
but um i know it's like it's a

00:32:13,679 --> 00:32:16,799
really using the same techniques as a

00:32:16,080 --> 00:32:20,640
open trail

00:32:16,799 --> 00:32:23,919
so yeah awesome thank you

00:32:20,640 --> 00:32:28,240
thank you tatiana um so for

00:32:23,919 --> 00:32:31,039
the questions i'm gonna look at our

00:32:28,240 --> 00:32:31,360
tech guy if we're ready to get penelope

00:32:31,039 --> 00:32:35,279
in

00:32:31,360 --> 00:32:35,279

YouTube URL: https://www.youtube.com/watch?v=DIShTUHEpxs


