Title: Make your application multi-platform!
Publication date: 2021-05-30
Playlist: Linux App Summit 2021 Talks
Description: 
	Many people use Windows and macOS as their OS of choice. If we want to expose them to Open Source software, we have to bring the software to them. Some large projects, like GIMP and Inkscape, are available on those platforms.

What does it take to make your application available on Windows and macOS? Dan and Arjan, maintainers of Gaphor, did just this.

In this talk we dive in to what it takes to make your application available on all major desktop platforms. Why should you bother? How can you make it happen, and what does it bring to your project? Tune in and find out!
Author(s) Bio

Dan Yeaw is an engineer who helps design safety in to complex autonomous and electrified vehicles at Ford Motor Company. He is passionate about using Python and open source in engineering and he is a core contributor to the BeeWare project.

Arjan is a software engineer working for Xebia in The Netherlands. He's been involved in numerous projects ranging from financial systems to embedded applications. He's a long time GNOME user and core contributor to Gaphor.
Twitter and/or Mastodon Handle

Dan: @danyeaw,
Arjan: @ajmolenaar


Q&A


1. What about security within flatpaks?

2. Have you experimented to use flatpak on windows with WSL 2?

3. What are you missing most on flathub, from a developer perspective?

4. How's the build pipeline built? What software or services compose it? 

5. Did you consider using Qt or Qt Quick? What do you think are the alternatives to Gtk that are practical in your view?

6. Where do you keep your signing key for mac and  for windows? Is it on a build server? Or do you inject it into build task?

7. (Comment about Flathub) I (Georges - feaneron) also faced this issue of split repositories, and we're investigating a structured way to allow pushes from other repositories into Flathub. Mozilla does that with Firefox already! It's very early work, but it's promising :)

8. Do you plan or are you moving already to GTK4?

9. What desktop setups do you personally use for developing the app (OS, developer tools, etc.)?
Captions: 
	00:00:00,960 --> 00:00:06,000
thank you allison um

00:00:03,520 --> 00:00:07,200
so yeah let's let's first uh start by

00:00:06,000 --> 00:00:09,599
introducing ourselves

00:00:07,200 --> 00:00:11,920
i'm uh aryan i'm a software consultant

00:00:09,599 --> 00:00:15,040
working for xivia in the netherlands

00:00:11,920 --> 00:00:17,359
and uh i'm doing lots of coding

00:00:15,040 --> 00:00:18,720
also in my spare time and next to death

00:00:17,359 --> 00:00:22,640
like cycling and

00:00:18,720 --> 00:00:24,240
beer brewing hi my name is danielle i'm

00:00:22,640 --> 00:00:24,800
really excited to give this talk with

00:00:24,240 --> 00:00:27,359
aryan

00:00:24,800 --> 00:00:29,119
um for my day job i work for ford motor

00:00:27,359 --> 00:00:32,399
company where i design

00:00:29,119 --> 00:00:35,840
safety into complex electrified and

00:00:32,399 --> 00:00:37,200
automated technologies and um in my free

00:00:35,840 --> 00:00:39,440
time i've been working on this app with

00:00:37,200 --> 00:00:41,680
aryan in order to model these complex

00:00:39,440 --> 00:00:46,160
systems using open source software

00:00:41,680 --> 00:00:46,160
and also like cycling like aryan does

00:00:47,360 --> 00:00:54,800
so uh what are we going to talk about

00:00:52,079 --> 00:00:55,920
um it's about going multi-platform so

00:00:54,800 --> 00:00:59,039
first of all

00:00:55,920 --> 00:01:00,399
we ask ourselves the question why do you

00:00:59,039 --> 00:01:03,680
actually want to bother

00:01:00,399 --> 00:01:04,479
and uh secondly i'm going we're going to

00:01:03,680 --> 00:01:07,760
give a brief

00:01:04,479 --> 00:01:09,360
introduction of uh our case the modeling

00:01:07,760 --> 00:01:12,560
tool

00:01:09,360 --> 00:01:12,960
and and next we're going to see what we

00:01:12,560 --> 00:01:16,159
did

00:01:12,960 --> 00:01:19,759
for linux windows and mac os

00:01:16,159 --> 00:01:24,840
and lastly there are some takeaways

00:01:19,759 --> 00:01:27,840
that hopefully you can bring to your own

00:01:24,840 --> 00:01:27,840
projects

00:01:28,560 --> 00:01:34,240
what uh at least in our case

00:01:32,000 --> 00:01:36,159
uh we're developing a software and what

00:01:34,240 --> 00:01:40,799
we want is to have a

00:01:36,159 --> 00:01:45,119
uh these apps to be useful for others so

00:01:40,799 --> 00:01:45,119
people get value out of it and

00:01:45,200 --> 00:01:48,399
even better they are actually ready to

00:01:47,680 --> 00:01:54,000
contribute

00:01:48,399 --> 00:01:56,799
back to the to the project

00:01:54,000 --> 00:01:58,320
and if you look at this chart you see

00:01:56,799 --> 00:02:01,119
that actually

00:01:58,320 --> 00:02:02,159
the potential of doing that for a linux

00:02:01,119 --> 00:02:05,680
only application

00:02:02,159 --> 00:02:07,119
is uh well you're covering not that much

00:02:05,680 --> 00:02:10,399
of the the potential

00:02:07,119 --> 00:02:11,520
user base at best for developer tools

00:02:10,399 --> 00:02:15,280
it's it's

00:02:11,520 --> 00:02:19,520
roughly 25 um

00:02:15,280 --> 00:02:23,840
so well we were leaving out a lot of

00:02:19,520 --> 00:02:26,239
potential users by just staying on linux

00:02:23,840 --> 00:02:26,959
so that's why we made an effort to also

00:02:26,239 --> 00:02:30,640
cover

00:02:26,959 --> 00:02:30,640
the other desktop platforms

00:02:33,040 --> 00:02:37,360
so what was our reasoning for going

00:02:35,680 --> 00:02:40,800
multi-platform

00:02:37,360 --> 00:02:41,360
um a broader and more inclusive user

00:02:40,800 --> 00:02:44,400
base

00:02:41,360 --> 00:02:47,040
so not only people

00:02:44,400 --> 00:02:48,879
that are uh like-minded on linux for

00:02:47,040 --> 00:02:51,920
example but also people fro

00:02:48,879 --> 00:02:56,160
with windows and and

00:02:51,920 --> 00:02:56,160
a mac background

00:02:56,640 --> 00:03:00,080
we think it can help people introduce

00:02:59,120 --> 00:03:03,280
being introduced

00:03:00,080 --> 00:03:06,560
to open source

00:03:03,280 --> 00:03:08,720
if you're on these other platforms using

00:03:06,560 --> 00:03:13,920
open source tooling is not

00:03:08,720 --> 00:03:18,800
that that much present

00:03:13,920 --> 00:03:19,840
um for us also it's a sense of being

00:03:18,800 --> 00:03:22,080
future proof

00:03:19,840 --> 00:03:23,280
you know we're not tied to this

00:03:22,080 --> 00:03:26,159
particular

00:03:23,280 --> 00:03:27,200
operating system which also ties in with

00:03:26,159 --> 00:03:32,879
with the

00:03:27,200 --> 00:03:37,200
fourth point it we

00:03:32,879 --> 00:03:39,440
the the adaptability people are not

00:03:37,200 --> 00:03:40,879
do not have to use linux so for example

00:03:39,440 --> 00:03:41,920
if you want to use this tool on your

00:03:40,879 --> 00:03:44,159
project

00:03:41,920 --> 00:03:45,519
it would be a bit sad if you leave out

00:03:44,159 --> 00:03:47,440
your

00:03:45,519 --> 00:03:50,959
your fellow teammates that are only

00:03:47,440 --> 00:03:50,959
using windows

00:03:57,680 --> 00:04:04,560
so well what are we targeting um

00:04:00,959 --> 00:04:07,519
the major desktop platforms um

00:04:04,560 --> 00:04:08,480
in doing so we try to automate as much

00:04:07,519 --> 00:04:12,159
as possible

00:04:08,480 --> 00:04:12,159
we're doing it in our spare time and

00:04:12,840 --> 00:04:19,040
doing tasks by hand

00:04:15,840 --> 00:04:21,120
is labor intensive and and it's really

00:04:19,040 --> 00:04:24,960
prone to error

00:04:21,120 --> 00:04:28,880
and also we don't want to scare away

00:04:24,960 --> 00:04:31,280
people with with those scary messages

00:04:28,880 --> 00:04:42,240
that you nowadays have on

00:04:31,280 --> 00:04:46,080
windows and macos

00:04:42,240 --> 00:04:49,360
so on to our use case

00:04:46,080 --> 00:04:52,400
um we

00:04:49,360 --> 00:04:55,440
both work on a calfer which is

00:04:52,400 --> 00:04:58,880
a modeling tool that supports

00:04:55,440 --> 00:05:01,520
uml csml rammel

00:04:58,880 --> 00:05:05,120
i hope i pronounced that right then

00:05:01,520 --> 00:05:05,120
which is a risk assessment

00:05:05,440 --> 00:05:10,720
modeling language and the c4

00:05:08,880 --> 00:05:12,639
modeling language which is more

00:05:10,720 --> 00:05:15,680
simplified

00:05:12,639 --> 00:05:16,720
more easily accessible it's running on

00:05:15,680 --> 00:05:18,400
gtk

00:05:16,720 --> 00:05:20,720
as you might see from the from the

00:05:18,400 --> 00:05:23,919
screenshot

00:05:20,720 --> 00:05:24,960
it's written in python so it's it's

00:05:23,919 --> 00:05:28,639
roughly

00:05:24,960 --> 00:05:32,400
44 000 lines of python code

00:05:28,639 --> 00:05:35,520
of course with well with gtk bindings

00:05:32,400 --> 00:05:39,520
and i started this project almost

00:05:35,520 --> 00:05:40,639
20 years ago with the idea that that it

00:05:39,520 --> 00:05:44,400
can bridge a gap

00:05:40,639 --> 00:05:47,280
between technical people and less

00:05:44,400 --> 00:05:47,280
technical people

00:05:50,000 --> 00:05:54,400
so about four years ago i started to get

00:05:52,400 --> 00:05:56,400
involved with before as well

00:05:54,400 --> 00:05:58,400
um i was looking for an open source

00:05:56,400 --> 00:06:00,240
modeling tool that i could use to model

00:05:58,400 --> 00:06:01,759
these really complex systems that i

00:06:00,240 --> 00:06:03,440
talked about earlier

00:06:01,759 --> 00:06:05,280
so for example if you had a car that

00:06:03,440 --> 00:06:08,000
could park itself

00:06:05,280 --> 00:06:08,720
we would design how the behavior and

00:06:08,000 --> 00:06:11,759
structure

00:06:08,720 --> 00:06:13,840
and requirements of that vehicle would

00:06:11,759 --> 00:06:16,880
all work together safely

00:06:13,840 --> 00:06:18,720
and i stumbled across before

00:06:16,880 --> 00:06:21,120
and i was really immediately blown away

00:06:18,720 --> 00:06:24,639
it was i'm really simple to use

00:06:21,120 --> 00:06:26,720
it was also um using python which for me

00:06:24,639 --> 00:06:27,680
you know i'm not a professional software

00:06:26,720 --> 00:06:30,560
developer

00:06:27,680 --> 00:06:33,199
um was a lot more accessible to me to

00:06:30,560 --> 00:06:34,960
kind of jump right in and get started

00:06:33,199 --> 00:06:36,400
um and unfortunately at the time aryan

00:06:34,960 --> 00:06:38,639
had gotten busy with other

00:06:36,400 --> 00:06:40,160
projects so the project uh hadn't been

00:06:38,639 --> 00:06:42,400
updated in a while

00:06:40,160 --> 00:06:44,080
and um we'll kind of talk over the next

00:06:42,400 --> 00:06:47,759
couple slides about

00:06:44,080 --> 00:06:51,360
um yeah how we brought it back up to uh

00:06:47,759 --> 00:06:51,360
to be modern again

00:07:00,160 --> 00:07:04,960
so next we're going to discuss how you

00:07:02,400 --> 00:07:07,280
can set up your project for success

00:07:04,960 --> 00:07:09,840
um with kind of these tips we learned

00:07:07,280 --> 00:07:09,840
the hard way

00:07:10,160 --> 00:07:13,440
so when we first you know when i first

00:07:12,000 --> 00:07:15,840
picked up the app um

00:07:13,440 --> 00:07:18,160
before had this docking widget called

00:07:15,840 --> 00:07:19,840
etk docking

00:07:18,160 --> 00:07:22,160
and it created an experience that you'd

00:07:19,840 --> 00:07:23,280
expect from like a complex ide like

00:07:22,160 --> 00:07:25,680
eclipse so

00:07:23,280 --> 00:07:28,000
where it allowed you to rearrange and

00:07:25,680 --> 00:07:31,039
hide and maximize and pop out

00:07:28,000 --> 00:07:33,680
ui components and that required creating

00:07:31,039 --> 00:07:36,800
some really custom

00:07:33,680 --> 00:07:40,080
gui widgets in gtk

00:07:36,800 --> 00:07:41,919
gtk 2 in this case and pi gtk which were

00:07:40,080 --> 00:07:43,919
the python bindings at the time

00:07:41,919 --> 00:07:45,840
and although it was really clever it

00:07:43,919 --> 00:07:47,440
would have had to have been completely

00:07:45,840 --> 00:07:50,639
rewritten from scratch

00:07:47,440 --> 00:07:52,479
um to move to gtk3 and pi

00:07:50,639 --> 00:07:54,879
g object which are that which is the

00:07:52,479 --> 00:07:57,120
introspection library for gtk

00:07:54,879 --> 00:07:59,759
and also we were upgrading from python 2

00:07:57,120 --> 00:08:02,160
to python 3 at the same time

00:07:59,759 --> 00:08:04,800
also if you came across a bug or an

00:08:02,160 --> 00:08:07,039
issue it was really hard to get it fixed

00:08:04,800 --> 00:08:10,160
because you are i would say exploring

00:08:07,039 --> 00:08:12,080
the edge cases of the gui toolkit itself

00:08:10,160 --> 00:08:13,919
and probably most other people haven't

00:08:12,080 --> 00:08:15,680
run into a similar problem before

00:08:13,919 --> 00:08:18,319
because you're really creating these

00:08:15,680 --> 00:08:19,360
very custom widgets here's a small

00:08:18,319 --> 00:08:21,599
example

00:08:19,360 --> 00:08:23,520
um where we defined our own compact

00:08:21,599 --> 00:08:26,800
button so the compact buttons

00:08:23,520 --> 00:08:30,000
inheriting from the gtk widget

00:08:26,800 --> 00:08:32,560
and it has a couple of class

00:08:30,000 --> 00:08:33,599
definite class properties defined for

00:08:32,560 --> 00:08:36,159
the name

00:08:33,599 --> 00:08:38,000
and also the signals and properties and

00:08:36,159 --> 00:08:40,479
they're defined in those

00:08:38,000 --> 00:08:42,240
double underscore definitions or also

00:08:40,479 --> 00:08:45,040
called dunder

00:08:42,240 --> 00:08:46,640
and the first one is the name named etk

00:08:45,040 --> 00:08:48,399
combat button and then there's two

00:08:46,640 --> 00:08:55,839
python dictionaries that define the

00:08:48,399 --> 00:08:55,839
signals and the properties

00:08:56,480 --> 00:09:01,600
so i guess reflecting on this do

00:08:59,519 --> 00:09:02,800
you know users really need that much

00:09:01,600 --> 00:09:06,240
customization

00:09:02,800 --> 00:09:08,080
in their in their ui um

00:09:06,240 --> 00:09:09,680
and i think keeping things simple and

00:09:08,080 --> 00:09:11,279
consistent and aligned with the human

00:09:09,680 --> 00:09:11,920
interface guidelines is really the way

00:09:11,279 --> 00:09:13,279
to go

00:09:11,920 --> 00:09:15,200
so that you don't have these like

00:09:13,279 --> 00:09:18,320
painful upgrades

00:09:15,200 --> 00:09:20,240
um gtk and cutes already provide you

00:09:18,320 --> 00:09:22,880
know this really great foundation to

00:09:20,240 --> 00:09:24,640
build gui applications with

00:09:22,880 --> 00:09:26,560
and in the same vein that you want to

00:09:24,640 --> 00:09:28,399
keep your gui pretty simple

00:09:26,560 --> 00:09:29,760
i would also try to keep your tool set

00:09:28,399 --> 00:09:32,399
small and

00:09:29,760 --> 00:09:33,839
simple as well so try to keep to just a

00:09:32,399 --> 00:09:36,000
few libraries

00:09:33,839 --> 00:09:38,959
and make sure those libraries are well

00:09:36,000 --> 00:09:40,800
supported cross-platform

00:09:38,959 --> 00:09:42,880
here is an example for the dependencies

00:09:40,800 --> 00:09:45,360
of before so you can see here

00:09:42,880 --> 00:09:46,320
that of course we depend on python

00:09:45,360 --> 00:09:48,839
itself

00:09:46,320 --> 00:09:50,080
and pi g object provides the python

00:09:48,839 --> 00:09:53,120
bindings

00:09:50,080 --> 00:09:55,440
for gtk pi chiro

00:09:53,120 --> 00:09:56,640
is the canvas widget and then we have

00:09:55,440 --> 00:09:58,880
two of our own

00:09:56,640 --> 00:10:00,000
libraries that we also support one's

00:09:58,880 --> 00:10:03,200
called gefoss

00:10:00,000 --> 00:10:04,560
and it provides a diagramming widget

00:10:03,200 --> 00:10:06,800
which allows you to

00:10:04,560 --> 00:10:07,839
draw shapes and relationships to the

00:10:06,800 --> 00:10:10,959
shapes

00:10:07,839 --> 00:10:13,519
and generic is a generic programming or

00:10:10,959 --> 00:10:16,000
multi-dispatch

00:10:13,519 --> 00:10:17,760
i guess library that allows you to call

00:10:16,000 --> 00:10:21,360
functions or methods

00:10:17,760 --> 00:10:25,040
based on the type and finally recently

00:10:21,360 --> 00:10:27,200
aryan added css support for skinning

00:10:25,040 --> 00:10:29,680
the diagrams and customizing how they

00:10:27,200 --> 00:10:33,839
look and so we depend on css2

00:10:29,680 --> 00:10:33,839
as well

00:10:34,560 --> 00:10:38,720
this is one nice thing for us for python

00:10:37,040 --> 00:10:41,040
as well that batteries are

00:10:38,720 --> 00:10:43,360
also included and you have most of what

00:10:41,040 --> 00:10:46,160
you need already to build even

00:10:43,360 --> 00:10:48,160
very complex applications there are

00:10:46,160 --> 00:10:50,560
tools like cookie cutter which help you

00:10:48,160 --> 00:10:53,360
fully create a new project from scratch

00:10:50,560 --> 00:10:54,640
using the best practices for things like

00:10:53,360 --> 00:10:56,800
testing and packed

00:10:54,640 --> 00:10:58,959
packaging already set up for you that's

00:10:56,800 --> 00:11:01,720
a really big advantage

00:10:58,959 --> 00:11:03,200
for before we also use a more modern pi

00:11:01,720 --> 00:11:06,000
project.tamil

00:11:03,200 --> 00:11:08,800
um to configure our project instead of

00:11:06,000 --> 00:11:11,279
kind of the more legacy setup.pi

00:11:08,800 --> 00:11:11,839
and we use um poetry for building the

00:11:11,279 --> 00:11:13,920
project

00:11:11,839 --> 00:11:15,920
into a wheel and then uploading it to

00:11:13,920 --> 00:11:18,800
the python package index or

00:11:15,920 --> 00:11:19,680
pipi but there's also a few other tools

00:11:18,800 --> 00:11:22,640
like flits

00:11:19,680 --> 00:11:24,320
and pip tools that are great as well in

00:11:22,640 --> 00:11:26,160
other words i recommend setting up your

00:11:24,320 --> 00:11:26,800
project based on the language you are

00:11:26,160 --> 00:11:29,440
using

00:11:26,800 --> 00:11:30,959
their their best practices and then try

00:11:29,440 --> 00:11:33,360
to design a gui

00:11:30,959 --> 00:11:35,920
that will conform to the gui's interface

00:11:33,360 --> 00:11:35,920
guidelines

00:11:37,760 --> 00:11:42,320
packaging your app so they can be easily

00:11:40,640 --> 00:11:44,959
installed on each platform

00:11:42,320 --> 00:11:47,519
is a very challenging problem each

00:11:44,959 --> 00:11:50,320
platform really needs its own solution

00:11:47,519 --> 00:11:51,760
and next we'll talk through talk about

00:11:50,320 --> 00:11:53,440
some of the tips we learned along the

00:11:51,760 --> 00:11:55,120
way

00:11:53,440 --> 00:11:57,279
i would say kind of the previous

00:11:55,120 --> 00:11:59,360
solution for linux

00:11:57,279 --> 00:12:00,800
and i i guess maybe i'll pause and say

00:11:59,360 --> 00:12:03,440
sorry our emojis

00:12:00,800 --> 00:12:05,360
aren't showing up in the slides that was

00:12:03,440 --> 00:12:07,680
a a cool smiley face

00:12:05,360 --> 00:12:11,839
um yeah so some of the previous

00:12:07,680 --> 00:12:13,920
solutions were things like deb and rpm

00:12:11,839 --> 00:12:16,079
in our are great solutions but it also

00:12:13,920 --> 00:12:18,160
made it difficult for app developers to

00:12:16,079 --> 00:12:19,920
get the latest version of your app

00:12:18,160 --> 00:12:22,079
out to their users because it often

00:12:19,920 --> 00:12:23,920
required um

00:12:22,079 --> 00:12:26,800
i guess people to upgrade their actual

00:12:23,920 --> 00:12:30,079
distribution to get the new versions

00:12:26,800 --> 00:12:30,639
flat pack and the distribution platform

00:12:30,079 --> 00:12:33,279
for it

00:12:30,639 --> 00:12:35,920
called flat hub provide a great way to

00:12:33,279 --> 00:12:37,279
distribute your apps for linux

00:12:35,920 --> 00:12:39,040
i guess the format's really great

00:12:37,279 --> 00:12:41,760
because it sandboxes your app

00:12:39,040 --> 00:12:43,519
it allows installation by non-root users

00:12:41,760 --> 00:12:44,560
and also has really good desktop

00:12:43,519 --> 00:12:46,959
integration

00:12:44,560 --> 00:12:48,399
one of the killer features for as an app

00:12:46,959 --> 00:12:51,839
developer that we found

00:12:48,399 --> 00:12:52,800
was the maintained platforms called run

00:12:51,839 --> 00:12:54,480
times

00:12:52,800 --> 00:12:56,639
and these really provide that strong

00:12:54,480 --> 00:12:58,959
foundation to package your app

00:12:56,639 --> 00:13:01,760
on top of with all the dependencies you

00:12:58,959 --> 00:13:01,760
need included

00:13:03,839 --> 00:13:08,000
one of the challenges we faced with flat

00:13:05,760 --> 00:13:10,480
pack was getting a reliable build script

00:13:08,000 --> 00:13:13,839
to work with python dependencies

00:13:10,480 --> 00:13:15,600
flat pack uses a manifest file which is

00:13:13,839 --> 00:13:18,639
a sort of recipe

00:13:15,600 --> 00:13:20,240
in json or yaml format and among other

00:13:18,639 --> 00:13:22,320
things the manifest has

00:13:20,240 --> 00:13:25,120
all of your dependencies for your app

00:13:22,320 --> 00:13:28,800
including um the download

00:13:25,120 --> 00:13:33,040
url for it and as well as the sha 256

00:13:28,800 --> 00:13:34,880
um sum the hash of the of the file

00:13:33,040 --> 00:13:37,200
one helps ensures that the flat pack

00:13:34,880 --> 00:13:39,040
build is reproducible

00:13:37,200 --> 00:13:40,480
so that you get the same result each

00:13:39,040 --> 00:13:42,160
time

00:13:40,480 --> 00:13:44,399
and although there's a flat pack builder

00:13:42,160 --> 00:13:45,199
tool for python it uses pip to

00:13:44,399 --> 00:13:48,000
re-resolve

00:13:45,199 --> 00:13:50,639
all the project dependencies and it

00:13:48,000 --> 00:13:51,600
defaults to using source distributions

00:13:50,639 --> 00:13:53,760
instead of

00:13:51,600 --> 00:13:55,440
of the binary format that python has

00:13:53,760 --> 00:13:57,760
called a wheel

00:13:55,440 --> 00:13:58,480
we tried to use this for a while and

00:13:57,760 --> 00:14:01,440
even

00:13:58,480 --> 00:14:02,720
created a poetry builder tool that we

00:14:01,440 --> 00:14:06,320
upstreamed

00:14:02,720 --> 00:14:07,760
to the flat pack builder tools however

00:14:06,320 --> 00:14:09,839
every time we went to go make a new

00:14:07,760 --> 00:14:11,360
release something would break

00:14:09,839 --> 00:14:13,680
and we'd have to troubleshoot for a

00:14:11,360 --> 00:14:15,519
while and this is not really what you

00:14:13,680 --> 00:14:17,440
want from a release process

00:14:15,519 --> 00:14:19,279
you want it to be simple and reliable

00:14:17,440 --> 00:14:21,120
and automated so you can just push out a

00:14:19,279 --> 00:14:22,880
new version to your users

00:14:21,120 --> 00:14:24,720
so to fix this we end up using a simple

00:14:22,880 --> 00:14:28,399
bash script

00:14:24,720 --> 00:14:32,000
and what it does is download a the wheel

00:14:28,399 --> 00:14:33,760
off of pi pi that python package index

00:14:32,000 --> 00:14:36,560
with all of its dependencies and then

00:14:33,760 --> 00:14:39,920
writes um the download url

00:14:36,560 --> 00:14:40,240
and the hash the manifest here you can

00:14:39,920 --> 00:14:42,000
see

00:14:40,240 --> 00:14:44,079
in this bash script we use pip to

00:14:42,000 --> 00:14:47,440
download the new version

00:14:44,079 --> 00:14:50,000
we use find and awk to list

00:14:47,440 --> 00:14:52,639
all the dependencies we downloaded it

00:14:50,000 --> 00:14:54,639
and put them in two columns with a name

00:14:52,639 --> 00:14:56,160
and the the name of the package and the

00:14:54,639 --> 00:15:00,160
file name and then we use

00:14:56,160 --> 00:15:03,920
curl and jq to

00:15:00,160 --> 00:15:06,560
hit the pi pi endpoint and get the um

00:15:03,920 --> 00:15:08,880
the url and the the hash so that we can

00:15:06,560 --> 00:15:10,480
put that in the manifest

00:15:08,880 --> 00:15:11,920
dash scripts aren't the solution to

00:15:10,480 --> 00:15:12,800
everything in this case it made our

00:15:11,920 --> 00:15:15,040
manifest

00:15:12,800 --> 00:15:17,839
generation really simple and reliable

00:15:15,040 --> 00:15:19,920
and it has been great ever since

00:15:17,839 --> 00:15:21,920
a second challenge is that flat hub uses

00:15:19,920 --> 00:15:23,199
a separate github repository to build

00:15:21,920 --> 00:15:25,519
all the packages

00:15:23,199 --> 00:15:27,440
what is great that everything is set up

00:15:25,519 --> 00:15:29,440
to do automated builds

00:15:27,440 --> 00:15:30,880
and publish a flat hub it also adds a

00:15:29,440 --> 00:15:32,880
little bit of extra complexity and

00:15:30,880 --> 00:15:33,920
maintenance because now you're packaging

00:15:32,880 --> 00:15:36,720
a split

00:15:33,920 --> 00:15:41,279
between your main repo and the one that

00:15:36,720 --> 00:15:43,600
flat hub provides

00:15:41,279 --> 00:15:44,880
so next i'll talk for a minute about app

00:15:43,600 --> 00:15:46,720
image because it's another great

00:15:44,880 --> 00:15:49,759
solution

00:15:46,720 --> 00:15:51,519
um so after we had been supporting flat

00:15:49,759 --> 00:15:53,279
pack for a while we got a request from

00:15:51,519 --> 00:15:54,800
one of our users to create an app image

00:15:53,279 --> 00:15:57,279
and i was a little familiar with it

00:15:54,800 --> 00:16:00,399
because i had downloaded app images for

00:15:57,279 --> 00:16:01,920
other python apps in the past and

00:16:00,399 --> 00:16:04,560
i always thought it was nice because you

00:16:01,920 --> 00:16:06,480
have this single file format that you

00:16:04,560 --> 00:16:08,639
can download and just run from there and

00:16:06,480 --> 00:16:10,880
you don't have anything to install

00:16:08,639 --> 00:16:11,839
one thing we did learn while packaging

00:16:10,880 --> 00:16:13,920
our app for app

00:16:11,839 --> 00:16:15,199
image was because there's no external

00:16:13,920 --> 00:16:16,880
dependencies

00:16:15,199 --> 00:16:20,240
that also means for the developer you

00:16:16,880 --> 00:16:22,000
can't rely on these runtimes or other

00:16:20,240 --> 00:16:24,959
dependencies being available for you

00:16:22,000 --> 00:16:26,959
when you go to build the app image this

00:16:24,959 --> 00:16:29,360
does create some tension because

00:16:26,959 --> 00:16:31,279
i would like my app to be using the

00:16:29,360 --> 00:16:33,279
latest version of python

00:16:31,279 --> 00:16:35,120
the latest versions of the gui toolkits

00:16:33,279 --> 00:16:37,279
and other dependencies

00:16:35,120 --> 00:16:38,240
and this because this is open source and

00:16:37,279 --> 00:16:39,920
i want to

00:16:38,240 --> 00:16:41,600
always be developing on the latest and

00:16:39,920 --> 00:16:44,320
greatest and keep things

00:16:41,600 --> 00:16:46,959
simple and more fun to develop with and

00:16:44,320 --> 00:16:49,279
also probably a little bit more secure

00:16:46,959 --> 00:16:50,639
unfortunately things like glib c aren't

00:16:49,279 --> 00:16:52,480
backwards compatible

00:16:50,639 --> 00:16:54,480
so you should really build your app

00:16:52,480 --> 00:16:57,680
against an older distribution to

00:16:54,480 --> 00:17:00,480
maximize compatibility

00:16:57,680 --> 00:17:02,639
um unfortunately some of those older

00:17:00,480 --> 00:17:04,319
distributions then don't ship with

00:17:02,639 --> 00:17:06,240
you know newer versions of things like

00:17:04,319 --> 00:17:07,520
gtk they're often three to five years

00:17:06,240 --> 00:17:09,280
out of date

00:17:07,520 --> 00:17:11,199
there are tools to help with this and

00:17:09,280 --> 00:17:13,039
even darker containers

00:17:11,199 --> 00:17:14,319
with the right dependencies you can use

00:17:13,039 --> 00:17:19,839
but this isn't as

00:17:14,319 --> 00:17:19,839
straightforward as we would have liked

00:17:20,240 --> 00:17:25,919
so for windows msys2 provides

00:17:23,520 --> 00:17:27,600
in a great environment for building

00:17:25,919 --> 00:17:29,120
installing and running applications in

00:17:27,600 --> 00:17:32,080
windows

00:17:29,120 --> 00:17:32,480
it has a bash command prompt so a lot of

00:17:32,080 --> 00:17:34,640
you

00:17:32,480 --> 00:17:36,240
if you're used to working in linux will

00:17:34,640 --> 00:17:37,600
feel pretty comfortable and right at

00:17:36,240 --> 00:17:40,640
home

00:17:37,600 --> 00:17:43,360
it is also the recommended way to run a

00:17:40,640 --> 00:17:45,280
ggk application in windows

00:17:43,360 --> 00:17:46,640
and once we got before running in

00:17:45,280 --> 00:17:49,039
windows we used pi

00:17:46,640 --> 00:17:50,480
installer which is a python library to

00:17:49,039 --> 00:17:52,720
bundle it with all the needed

00:17:50,480 --> 00:17:54,480
dependencies

00:17:52,720 --> 00:17:55,760
however this wasn't all smooth sailing

00:17:54,480 --> 00:18:00,080
either

00:17:55,760 --> 00:18:02,960
python and msys2 has many patches

00:18:00,080 --> 00:18:05,440
in order to get it to compile against

00:18:02,960 --> 00:18:07,760
ming ww 64

00:18:05,440 --> 00:18:08,640
gcc instead of the default microsoft

00:18:07,760 --> 00:18:11,600
visual c

00:18:08,640 --> 00:18:12,080
plus that's what python is normally

00:18:11,600 --> 00:18:15,600
built with

00:18:12,080 --> 00:18:17,440
in windows since msys2 is kind of a

00:18:15,600 --> 00:18:20,400
niche environment in windows

00:18:17,440 --> 00:18:22,240
python and most of the libraries aren't

00:18:20,400 --> 00:18:25,120
very well tested in it

00:18:22,240 --> 00:18:26,400
and it is common for things to break we

00:18:25,120 --> 00:18:28,320
were able though to

00:18:26,400 --> 00:18:30,160
contribute upstream and get pull

00:18:28,320 --> 00:18:32,720
requests merged to projects

00:18:30,160 --> 00:18:33,600
like virtual and for the virtual

00:18:32,720 --> 00:18:36,640
environments

00:18:33,600 --> 00:18:38,559
pi installer and poetry to fix bugs and

00:18:36,640 --> 00:18:41,280
improve compatibility

00:18:38,559 --> 00:18:42,000
although this you know yak shaving isn't

00:18:41,280 --> 00:18:43,760
directly making

00:18:42,000 --> 00:18:45,760
our app better it does improve the

00:18:43,760 --> 00:18:48,400
overall ecosystem for others

00:18:45,760 --> 00:18:50,000
to make use of it as well i hope we can

00:18:48,400 --> 00:18:52,240
eventually get some of these

00:18:50,000 --> 00:18:55,120
downstream patches to python pushed

00:18:52,240 --> 00:18:55,120
upstream as well

00:18:55,200 --> 00:19:00,720
after feedback from our users we also

00:18:57,200 --> 00:19:02,880
did implement code sighting in windows

00:19:00,720 --> 00:19:04,320
in windows users were getting those kind

00:19:02,880 --> 00:19:06,720
of scary messages

00:19:04,320 --> 00:19:09,520
saying hey this app that you download is

00:19:06,720 --> 00:19:11,440
not safe to run from the internet

00:19:09,520 --> 00:19:13,600
this does involve paying a couple

00:19:11,440 --> 00:19:14,880
hundred dollars a year on a code signing

00:19:13,600 --> 00:19:16,799
certificate

00:19:14,880 --> 00:19:18,799
and was a little bit of a foreign

00:19:16,799 --> 00:19:20,559
experience for us but it was pretty easy

00:19:18,799 --> 00:19:23,120
to integrate it with our continuous

00:19:20,559 --> 00:19:24,880
integration build process here you can

00:19:23,120 --> 00:19:26,480
see the sign tool that ships with a

00:19:24,880 --> 00:19:28,400
windows sdk

00:19:26,480 --> 00:19:30,000
signs the application using their

00:19:28,400 --> 00:19:33,600
certificate

00:19:30,000 --> 00:19:38,080
um a timestamp server that's with that

00:19:33,600 --> 00:19:41,480
tr and um also td and fd provide the

00:19:38,080 --> 00:19:42,960
time stamp and the file digest using the

00:19:41,480 --> 00:19:44,400
sha-256

00:19:42,960 --> 00:19:48,080
and we're able to integrate that with

00:19:44,400 --> 00:19:48,080
our continuous integration for the app

00:19:51,120 --> 00:19:55,200
so that kind of brings us to the last

00:19:54,160 --> 00:19:59,200
platform

00:19:55,200 --> 00:20:00,320
which is mac os on mac os we kind of

00:19:59,200 --> 00:20:03,840
have a

00:20:00,320 --> 00:20:04,640
similar ish situation to windows but not

00:20:03,840 --> 00:20:06,880
that bad

00:20:04,640 --> 00:20:08,559
because mac os under the hood already

00:20:06,880 --> 00:20:12,799
has a

00:20:08,559 --> 00:20:16,640
bsd like unix environment

00:20:12,799 --> 00:20:18,799
bc unix environment and

00:20:16,640 --> 00:20:20,400
there is a project called homebrew which

00:20:18,799 --> 00:20:22,799
is which you can use to

00:20:20,400 --> 00:20:24,400
install all sorts of open source

00:20:22,799 --> 00:20:27,840
dependencies and this also

00:20:24,400 --> 00:20:30,720
includes gtk which is really

00:20:27,840 --> 00:20:33,520
fortunate for our effort to make it

00:20:30,720 --> 00:20:33,520
running on mac os

00:20:33,679 --> 00:20:37,360
and next to that of course we also have

00:20:35,360 --> 00:20:41,120
to deal with the

00:20:37,360 --> 00:20:43,280
with the code signing um

00:20:41,120 --> 00:20:46,080
on mac os for those who are not really

00:20:43,280 --> 00:20:48,159
familiar with it

00:20:46,080 --> 00:20:49,360
you build an app which is kind of like

00:20:48,159 --> 00:20:52,559
an app image on

00:20:49,360 --> 00:20:56,720
on linux as dan

00:20:52,559 --> 00:21:00,240
explained um it contains

00:20:56,720 --> 00:21:03,520
files uh with a particular starting file

00:21:00,240 --> 00:21:04,880
which is the info.plist

00:21:03,520 --> 00:21:06,640
and from there basically the whole

00:21:04,880 --> 00:21:08,720
application is started

00:21:06,640 --> 00:21:09,919
so the the app directory contains

00:21:08,720 --> 00:21:12,000
everything

00:21:09,919 --> 00:21:13,600
uh our application but also the

00:21:12,000 --> 00:21:14,159
dependencies that we use that are not

00:21:13,600 --> 00:21:18,720
native

00:21:14,159 --> 00:21:18,720
on mac os such as gtk

00:21:18,960 --> 00:21:22,559
next to that it's common to distribute

00:21:21,760 --> 00:21:25,919
this app

00:21:22,559 --> 00:21:27,520
in a disk image which is

00:21:25,919 --> 00:21:29,840
something like well you can think of it

00:21:27,520 --> 00:21:33,520
like like an iso image

00:21:29,840 --> 00:21:35,600
it's a read-only image that

00:21:33,520 --> 00:21:36,799
well that basically packages the

00:21:35,600 --> 00:21:39,200
application

00:21:36,799 --> 00:21:41,039
you can set the background in it and it

00:21:39,200 --> 00:21:41,520
give it a nice appearance when people

00:21:41,039 --> 00:21:45,520
first

00:21:41,520 --> 00:21:47,760
start well downloaded it and and start

00:21:45,520 --> 00:21:47,760
it up

00:21:49,840 --> 00:21:53,679
one thing that we had to deal with which

00:21:52,159 --> 00:21:56,159
is

00:21:53,679 --> 00:21:58,240
quite different from how it works on

00:21:56,159 --> 00:22:00,559
linux is that library references

00:21:58,240 --> 00:22:01,840
are all absolute so if you compile

00:22:00,559 --> 00:22:04,400
something against a

00:22:01,840 --> 00:22:05,280
certain library that library should be

00:22:04,400 --> 00:22:09,200
in

00:22:05,280 --> 00:22:10,559
is in a particular folder on your path

00:22:09,200 --> 00:22:13,520
you should not move it because then

00:22:10,559 --> 00:22:17,440
stuff breaks

00:22:13,520 --> 00:22:19,760
in order to get it in the app

00:22:17,440 --> 00:22:20,720
folder however yeah you need to copy it

00:22:19,760 --> 00:22:23,760
over

00:22:20,720 --> 00:22:26,159
and there are some tricks

00:22:23,760 --> 00:22:28,720
tricks you can do some renaming to make

00:22:26,159 --> 00:22:30,240
sure that for example the library is not

00:22:28,720 --> 00:22:33,039
absolutely referenced but it's

00:22:30,240 --> 00:22:36,080
referenced uh relative to the

00:22:33,039 --> 00:22:37,600
uh to the executable binary which in our

00:22:36,080 --> 00:22:42,640
case is the the second file

00:22:37,600 --> 00:22:42,640
in this example the macos cigar for file

00:22:43,360 --> 00:22:48,000
thirdly there is some work that has to

00:22:46,000 --> 00:22:49,200
be done with environment variables so

00:22:48,000 --> 00:22:52,640
that for example

00:22:49,200 --> 00:22:55,840
font config works the xdg

00:22:52,640 --> 00:23:00,240
directories are set properly and

00:22:55,840 --> 00:23:03,840
stuff like bixbuff modules are loaded

00:23:00,240 --> 00:23:05,200
as you would expect we used to use our

00:23:03,840 --> 00:23:08,480
own script for that

00:23:05,200 --> 00:23:12,159
which was again a nice

00:23:08,480 --> 00:23:16,880
well i said it piece of bash

00:23:12,159 --> 00:23:19,360
magic however

00:23:16,880 --> 00:23:20,840
at some point when the the mech of the

00:23:19,360 --> 00:23:23,760
windows build was

00:23:20,840 --> 00:23:25,280
working properly it proved to be quite

00:23:23,760 --> 00:23:27,200
easy to also

00:23:25,280 --> 00:23:28,320
do the build for mac os with buy

00:23:27,200 --> 00:23:31,440
installer so that

00:23:28,320 --> 00:23:33,919
that's what we moved towards

00:23:31,440 --> 00:23:36,720
and uh well actually we well we never

00:23:33,919 --> 00:23:39,120
looked back

00:23:36,720 --> 00:23:42,559
it saves us a lot of maintaining because

00:23:39,120 --> 00:23:47,600
what we used to have is that with every

00:23:42,559 --> 00:23:51,200
big update even on on homebrew or on

00:23:47,600 --> 00:23:52,960
or on macos itself we needed to revise

00:23:51,200 --> 00:23:54,720
our packaging script because something

00:23:52,960 --> 00:23:56,240
broke and now with my installer we

00:23:54,720 --> 00:23:58,559
haven't had that problem

00:23:56,240 --> 00:23:58,559
since

00:24:03,279 --> 00:24:10,400
and lastly then there is the designing

00:24:06,799 --> 00:24:13,679
to avoid the the scary messages for uh

00:24:10,400 --> 00:24:16,840
for users so dan is actually an

00:24:13,679 --> 00:24:21,279
official apple developer nowadays

00:24:16,840 --> 00:24:24,240
um so that we can sign the application

00:24:21,279 --> 00:24:26,480
and just like windows everything is

00:24:24,240 --> 00:24:29,840
performed in the build pipeline

00:24:26,480 --> 00:24:32,240
which saves us quite a bit of work

00:24:29,840 --> 00:24:32,240
actually

00:24:32,320 --> 00:24:35,840
because for the the signing we need to

00:24:35,360 --> 00:24:39,679
sign

00:24:35,840 --> 00:24:41,840
both the the app so the dot app

00:24:39,679 --> 00:24:43,200
folder and everything in it needs to be

00:24:41,840 --> 00:24:45,600
signed

00:24:43,200 --> 00:24:47,520
and once that's done it can be packaged

00:24:45,600 --> 00:24:49,360
in the disk image and that also has to

00:24:47,520 --> 00:24:50,559
be signed so you can imagine what that

00:24:49,360 --> 00:24:54,320
would be if you would

00:24:50,559 --> 00:24:54,320
have to do that for every release by

00:24:58,840 --> 00:25:04,159
hand

00:25:01,360 --> 00:25:05,760
um here at the bottom i pasted a little

00:25:04,159 --> 00:25:09,200
screenshot

00:25:05,760 --> 00:25:11,600
of uh what it looks like when we do an

00:25:09,200 --> 00:25:13,440
average build this is just something

00:25:11,600 --> 00:25:15,440
that i picked from

00:25:13,440 --> 00:25:17,360
well quite recently i don't know where

00:25:15,440 --> 00:25:18,320
it was it was not a release build that

00:25:17,360 --> 00:25:21,919
you can see by the

00:25:18,320 --> 00:25:23,039
virgin names and what you can see is

00:25:21,919 --> 00:25:26,720
that everything like

00:25:23,039 --> 00:25:29,760
the app image the the mac os image the

00:25:26,720 --> 00:25:30,880
two installers for for windows that is

00:25:29,760 --> 00:25:35,360
the

00:25:30,880 --> 00:25:38,559
the pure python executable

00:25:35,360 --> 00:25:42,799
and there is the python executable the

00:25:38,559 --> 00:25:46,000
the source code

00:25:42,799 --> 00:25:49,039
um what we learned from all of this is

00:25:46,000 --> 00:25:50,080
that we should approach each platform

00:25:49,039 --> 00:25:53,440
separately

00:25:50,080 --> 00:25:56,159
um initially we had

00:25:53,440 --> 00:25:57,200
actually our first platform that we

00:25:56,159 --> 00:26:01,840
supported was

00:25:57,200 --> 00:26:04,880
mac os and only after that

00:26:01,840 --> 00:26:08,240
we implemented a flat

00:26:04,880 --> 00:26:11,600
flat pack then came windows

00:26:08,240 --> 00:26:14,320
which allowed us to revise uh mac os and

00:26:11,600 --> 00:26:15,760
after that the the app image so the

00:26:14,320 --> 00:26:18,799
ordering which things happened was not

00:26:15,760 --> 00:26:22,000
the order in which we explained them

00:26:18,799 --> 00:26:24,320
um what also helped a lot uh was to work

00:26:22,000 --> 00:26:26,720
with upstream projects

00:26:24,320 --> 00:26:27,520
especially ironing out issues for

00:26:26,720 --> 00:26:30,880
example in

00:26:27,520 --> 00:26:34,799
by installer safety says well

00:26:30,880 --> 00:26:34,799
nowadays it saves us a lot of hassle

00:26:35,120 --> 00:26:40,640
and well we integrate

00:26:38,559 --> 00:26:42,559
everything in the build pipeline so when

00:26:40,640 --> 00:26:44,960
we do a release

00:26:42,559 --> 00:26:46,880
basically nothing special happens except

00:26:44,960 --> 00:26:49,520
from that the version number

00:26:46,880 --> 00:26:53,840
is not a death version but this is a

00:26:49,520 --> 00:26:53,840
release version

00:26:55,039 --> 00:27:01,360
well this kind of takes us to the end of

00:26:59,039 --> 00:27:01,360
our

00:27:04,840 --> 00:27:11,600
presentation

00:27:07,679 --> 00:27:14,799
i see no questions in the

00:27:11,600 --> 00:27:14,799
shared notes so far

00:27:15,520 --> 00:27:19,200
we are excited to answer your questions

00:27:17,360 --> 00:27:21,840
if you have any

00:27:19,200 --> 00:27:21,840
obviously

00:27:25,919 --> 00:27:29,679
what about security what do you mean

00:27:32,840 --> 00:27:35,840
security

00:27:39,840 --> 00:27:46,880
um as part of the i don't know if this

00:27:43,360 --> 00:27:51,120
answers your question but flatback

00:27:46,880 --> 00:27:51,120
applications are started in a

00:27:51,200 --> 00:27:56,399
in a container basically kind of kind of

00:27:53,679 --> 00:27:59,520
a containerized environment

00:27:56,399 --> 00:28:02,399
and as part of the manifest we provide

00:27:59,520 --> 00:28:03,279
some well we request some permissions

00:28:02,399 --> 00:28:07,520
like

00:28:03,279 --> 00:28:07,520
access to the to the file system

00:28:08,000 --> 00:28:13,039
um and that is taken care of in the flat

00:28:10,320 --> 00:28:16,000
packs and i think if you install them

00:28:13,039 --> 00:28:18,559
the flat pack will ask you for uh

00:28:16,000 --> 00:28:18,559
permission

00:28:18,880 --> 00:28:24,399
or your consent on the permissions that

00:28:21,520 --> 00:28:31,840
the application is asking for

00:28:24,399 --> 00:28:31,840
does that answer your question

00:28:32,799 --> 00:28:38,399
looks like the next question is have you

00:28:35,720 --> 00:28:43,840
experimented to use flat pack on windows

00:28:38,399 --> 00:28:46,399
with windows subsystem for linux

00:28:43,840 --> 00:28:48,399
um so we haven't experimented with that

00:28:46,399 --> 00:28:51,039
and it's because i think mostly

00:28:48,399 --> 00:28:51,520
our build environment is that emphasis 2

00:28:51,039 --> 00:28:56,000
00:28:51,520 --> 00:28:56,000
and not windows subsystem for linux

00:28:56,320 --> 00:29:01,360
i guess i've seen recently that

00:28:59,360 --> 00:29:02,399
windows subsystem for linux is actually

00:29:01,360 --> 00:29:04,559
i'm able to run

00:29:02,399 --> 00:29:06,000
gui applications as well so maybe in the

00:29:04,559 --> 00:29:07,200
future there's some potential there

00:29:06,000 --> 00:29:09,360
where you could

00:29:07,200 --> 00:29:10,960
um actually use windows subsystem for

00:29:09,360 --> 00:29:14,080
linux to

00:29:10,960 --> 00:29:15,840
package your gtk admob for windows

00:29:14,080 --> 00:29:18,080
but we haven't experimented with that

00:29:15,840 --> 00:29:20,960
yet we're still using

00:29:18,080 --> 00:29:22,480
msys2 for our packaging and to my

00:29:20,960 --> 00:29:26,159
knowledge the

00:29:22,480 --> 00:29:28,240
the the gui support from wsl

00:29:26,159 --> 00:29:31,200
is experimental still so it's not a

00:29:28,240 --> 00:29:31,200
mainstream feature

00:29:32,799 --> 00:29:39,120
what are you missing most on flatup from

00:29:35,840 --> 00:29:39,120
a developer perspective

00:29:39,200 --> 00:29:45,840
well i think that then pointed that out

00:29:42,480 --> 00:29:47,679
uh kind of is that we have our flatback

00:29:45,840 --> 00:29:49,919
build currently in a separate repository

00:29:47,679 --> 00:29:53,360
so it means that we have to

00:29:49,919 --> 00:29:56,799
kick off a separate build to actually

00:29:53,360 --> 00:29:59,440
perform the flat pack build

00:29:56,799 --> 00:30:00,880
and it would be really nice if we could

00:29:59,440 --> 00:30:04,159
integrate that

00:30:00,880 --> 00:30:07,440
with our with our main line

00:30:04,159 --> 00:30:10,559
so that we for example also can do a

00:30:07,440 --> 00:30:13,360
nightly builds from flatback

00:30:10,559 --> 00:30:15,520
call them nightly just every commit

00:30:13,360 --> 00:30:17,440
create a fresh build for uh for

00:30:15,520 --> 00:30:20,840
flatback for everybody who wants to be a

00:30:17,440 --> 00:30:23,840
cutting edge which is probably dan and

00:30:20,840 --> 00:30:23,840
me

00:30:24,720 --> 00:30:28,880
so the next question is how is the build

00:30:26,480 --> 00:30:30,159
pipeline built what software or services

00:30:28,880 --> 00:30:33,279
compose it

00:30:30,159 --> 00:30:34,559
so our project is using github um

00:30:33,279 --> 00:30:37,440
although you know there's lots of other

00:30:34,559 --> 00:30:40,240
good alternatives like get lab as well

00:30:37,440 --> 00:30:41,440
so we are using github actions um and

00:30:40,240 --> 00:30:44,000
actually we

00:30:41,440 --> 00:30:45,200
iterated a few times on that as well we

00:30:44,000 --> 00:30:48,399
were

00:30:45,200 --> 00:30:50,159
used a few different services over time

00:30:48,399 --> 00:30:52,080
but eventually would github actions was

00:30:50,159 --> 00:30:54,399
released we started using that

00:30:52,080 --> 00:30:56,320
um it is nice because some of the

00:30:54,399 --> 00:30:57,200
actions are reusable so you don't have

00:30:56,320 --> 00:30:59,840
to figure out

00:30:57,200 --> 00:31:00,960
say you know how to check out your code

00:30:59,840 --> 00:31:02,640
how to sign an app

00:31:00,960 --> 00:31:04,559
all those different steps you can just

00:31:02,640 --> 00:31:06,000
grab an action that's already been

00:31:04,559 --> 00:31:07,919
developed and it does a lot of the work

00:31:06,000 --> 00:31:10,720
for you which is really nice

00:31:07,919 --> 00:31:13,440
um and we make use of other things other

00:31:10,720 --> 00:31:15,919
automations like to label our pr's and

00:31:13,440 --> 00:31:19,679
automatically create our news

00:31:15,919 --> 00:31:22,080
for release and we also

00:31:19,679 --> 00:31:24,080
use like things like depend-abot which

00:31:22,080 --> 00:31:26,640
automatically bumps our dependencies

00:31:24,080 --> 00:31:29,279
when new versions are released

00:31:26,640 --> 00:31:29,840
um and every time we commit or merge a

00:31:29,279 --> 00:31:32,240
pr

00:31:29,840 --> 00:31:34,320
it runs the full build including what

00:31:32,240 --> 00:31:36,399
aryan showed for the

00:31:34,320 --> 00:31:37,600
cr yeah packaging the app and so we can

00:31:36,399 --> 00:31:39,919
test it

00:31:37,600 --> 00:31:42,559
at every build instead of only when it

00:31:39,919 --> 00:31:42,559
gets released

00:31:42,880 --> 00:31:47,440
yeah ever since we haven't made any rc

00:31:45,200 --> 00:31:51,519
or alpha releases anymore

00:31:47,440 --> 00:31:51,519
yeah just stop doing that i just

00:31:52,559 --> 00:31:56,000
next question did you consider using qt

00:31:55,200 --> 00:32:00,320
qt or

00:31:56,000 --> 00:32:02,720
cued quick back in the days uh

00:32:00,320 --> 00:32:03,760
but then i have to recall going back

00:32:02,720 --> 00:32:07,039
like 20 years

00:32:03,760 --> 00:32:10,320
um i

00:32:07,039 --> 00:32:12,480
choose gtk because it was

00:32:10,320 --> 00:32:14,080
well first of all the game was built

00:32:12,480 --> 00:32:16,880
with it which was a

00:32:14,080 --> 00:32:18,240
quite impressive application especially

00:32:16,880 --> 00:32:19,760
20 years ago

00:32:18,240 --> 00:32:22,960
so i thought if it's good enough for the

00:32:19,760 --> 00:32:26,399
 it's probably good enough for me

00:32:22,960 --> 00:32:29,600
and next to that the license of

00:32:26,399 --> 00:32:30,399
well cute is is backed by uh by a

00:32:29,600 --> 00:32:34,559
company

00:32:30,399 --> 00:32:36,720
um and gtk was purely open source so

00:32:34,559 --> 00:32:40,720
that was one of the

00:32:36,720 --> 00:32:40,720
more idealistic um

00:32:41,600 --> 00:32:49,840
well reasons why i took gtk

00:32:46,240 --> 00:32:53,200
um and i don't know if

00:32:49,840 --> 00:32:55,840
i would have been better off with cute

00:32:53,200 --> 00:32:56,640
i think qt has a lot more features so

00:32:55,840 --> 00:33:00,799
that's that's

00:32:56,640 --> 00:33:03,440
definitely uh what uh by choosing gtk i

00:33:00,799 --> 00:33:03,440
missed out on

00:33:05,120 --> 00:33:08,480
i think in general we'd like gtk pretty

00:33:07,360 --> 00:33:09,919
good though as well so

00:33:08,480 --> 00:33:11,919
i don't think it was like a bad choice

00:33:09,919 --> 00:33:13,919
sorry so yeah yeah well

00:33:11,919 --> 00:33:15,360
and one of the things back in the days

00:33:13,919 --> 00:33:17,600
i'm just

00:33:15,360 --> 00:33:19,840
trying to recollect my memory a little

00:33:17,600 --> 00:33:22,840
uh back in the days

00:33:19,840 --> 00:33:24,320
gtk was quite strong on the language

00:33:22,840 --> 00:33:26,640
bindings

00:33:24,320 --> 00:33:28,159
as far as i recall better than than qt

00:33:26,640 --> 00:33:30,240
at that point

00:33:28,159 --> 00:33:32,240
so that was because i wanted to develop

00:33:30,240 --> 00:33:34,480
it in python

00:33:32,240 --> 00:33:36,840
that was one of the the also one of the

00:33:34,480 --> 00:33:38,960
reasons why i took

00:33:36,840 --> 00:33:41,279
gtk

00:33:38,960 --> 00:33:42,880
so the next question is about where do

00:33:41,279 --> 00:33:43,679
we keep our sign-in key for mac and

00:33:42,880 --> 00:33:45,440
windows

00:33:43,679 --> 00:33:47,440
is it on the build server or you inject

00:33:45,440 --> 00:33:52,559
it into the build task

00:33:47,440 --> 00:33:55,440
so um the signing key is kept in

00:33:52,559 --> 00:33:57,519
um in github is secret so you add a

00:33:55,440 --> 00:33:59,440
secret to your repository and then

00:33:57,519 --> 00:34:00,799
it's that secret's all encrypted and

00:33:59,440 --> 00:34:03,600
then um

00:34:00,799 --> 00:34:04,960
the build pipeline has access to access

00:34:03,600 --> 00:34:09,280
to the secret

00:34:04,960 --> 00:34:11,919
um if you're doing a build from

00:34:09,280 --> 00:34:12,480
the main repository so people who are

00:34:11,919 --> 00:34:15,440
maybe

00:34:12,480 --> 00:34:17,839
fork the the repo or creating a pr don't

00:34:15,440 --> 00:34:20,399
have access to the the secret

00:34:17,839 --> 00:34:21,520
um and then depending on what type of

00:34:20,399 --> 00:34:24,399
signing key is

00:34:21,520 --> 00:34:24,879
we yeah convert the format from the the

00:34:24,399 --> 00:34:26,399
secret

00:34:24,879 --> 00:34:30,159
into the rate format during the build

00:34:26,399 --> 00:34:31,919
and and use it like that

00:34:30,159 --> 00:34:35,359
actually i don't think i even have

00:34:31,919 --> 00:34:37,280
access to those keys

00:34:35,359 --> 00:34:49,280
no it's it's really a secret then how

00:34:37,280 --> 00:34:52,879
are you yeah it's quite secretive

00:34:49,280 --> 00:34:54,879
seven is a comment about flatup

00:34:52,879 --> 00:34:56,480
i also face this issue of split

00:34:54,879 --> 00:34:59,119
repositories oh that's more like a

00:34:56,480 --> 00:34:59,119
comment okay

00:35:00,839 --> 00:35:03,839
um

00:35:05,599 --> 00:35:08,880
okay well we'll check that out thanks

00:35:08,320 --> 00:35:12,640
for the

00:35:08,880 --> 00:35:12,640
thanks for the suggestion george

00:35:13,200 --> 00:35:17,760
do you plan or are you moving already to

00:35:16,640 --> 00:35:21,839
gtk

00:35:17,760 --> 00:35:26,320
yes we started moving to

00:35:21,839 --> 00:35:29,520
gtk4 so far the

00:35:26,320 --> 00:35:35,280
exp has been good good

00:35:29,520 --> 00:35:37,520
we can keep both gtk 3 and gt4

00:35:35,280 --> 00:35:37,520
run

00:35:38,480 --> 00:35:44,720
it is important for us because if

00:35:42,240 --> 00:35:45,920
to switch only to gtk4 then we

00:35:44,720 --> 00:35:49,119
definitely need

00:35:45,920 --> 00:35:52,320
to well it will be one hell of an

00:35:49,119 --> 00:35:54,079
exercise because we also have to rework

00:35:52,320 --> 00:35:55,599
all the packaging for all the platforms

00:35:54,079 --> 00:35:58,880
all in one shot

00:35:55,599 --> 00:36:01,359
and well our time is precious so i'd

00:35:58,880 --> 00:36:04,320
rather do it in small steps

00:36:01,359 --> 00:36:06,000
so i'm currently we're working on

00:36:04,320 --> 00:36:10,839
getting

00:36:06,000 --> 00:36:12,880
support for both gtk 3 and gtk 4 in the

00:36:10,839 --> 00:36:14,800
application

00:36:12,880 --> 00:36:16,400
i think arnhem is just waiting for my

00:36:14,800 --> 00:36:18,000
pull request review and then we'll have

00:36:16,400 --> 00:36:20,800
to get for her

00:36:18,000 --> 00:36:21,440
support right yeah then it's kind of

00:36:20,800 --> 00:36:24,880
like

00:36:21,440 --> 00:36:26,960
it starts and it does something but

00:36:24,880 --> 00:36:30,160
of course still issues but we can fix

00:36:26,960 --> 00:36:30,160
those as we go along

00:36:31,599 --> 00:36:38,880
um what desktop setups do you use

00:36:34,960 --> 00:36:38,880
personally for developing the app

00:36:39,680 --> 00:36:45,599
i'm currently running uh ubuntu linux

00:36:43,680 --> 00:36:48,320
stripped pretty much all the ubuntu

00:36:45,599 --> 00:36:51,280
stuff um

00:36:48,320 --> 00:36:52,839
and i'm using visual studio code as my

00:36:51,280 --> 00:36:56,880
editor of choice

00:36:52,839 --> 00:37:00,079
nowadays how about you then

00:36:56,880 --> 00:37:03,040
so i'm using susie tumbleweed

00:37:00,079 --> 00:37:04,160
um as yeah converted not that long ago

00:37:03,040 --> 00:37:07,280
maybe like six months ago

00:37:04,160 --> 00:37:10,400
i used to be used ubuntu i like it

00:37:07,280 --> 00:37:14,240
it's really nice um i normally use

00:37:10,400 --> 00:37:16,960
pycharm it's probably the the main

00:37:14,240 --> 00:37:19,599
editor i use although sometimes use vim

00:37:16,960 --> 00:37:22,640
and other editors occasionally as well

00:37:19,599 --> 00:37:24,960
um yeah and then i guess

00:37:22,640 --> 00:37:25,760
the rest of the python ecosystem we use

00:37:24,960 --> 00:37:29,280
as well

00:37:25,760 --> 00:37:29,280
as far as the developer tools

00:37:31,680 --> 00:37:35,760
um yeah and i have actually been working

00:37:34,880 --> 00:37:38,079
on

00:37:35,760 --> 00:37:39,040
this application also for uh for a long

00:37:38,079 --> 00:37:43,599
time on

00:37:39,040 --> 00:37:46,160
mac os for the last two years i've

00:37:43,599 --> 00:37:47,680
switched to linux but before that i

00:37:46,160 --> 00:37:50,560
helped them

00:37:47,680 --> 00:37:53,359
by doing it or by building it on my

00:37:50,560 --> 00:37:53,359
quest actually

00:37:54,800 --> 00:37:57,920
so yeah i think if you couldn't tell

00:37:56,240 --> 00:37:59,520
from the presentation i

00:37:57,920 --> 00:38:01,440
normally handle a lot of the windows

00:37:59,520 --> 00:38:02,640
stuff and already normally handles a lot

00:38:01,440 --> 00:38:04,560
of the mac stuff and then we kind of

00:38:02,640 --> 00:38:07,040
work together on the linux

00:38:04,560 --> 00:38:07,040
thing so

00:38:10,720 --> 00:38:15,359
cool so if there are no more questions

00:38:12,400 --> 00:38:21,200
then i think we can

00:38:15,359 --> 00:38:21,200
wrap it up and uh if i fill up the floor

00:38:23,440 --> 00:38:28,480

YouTube URL: https://www.youtube.com/watch?v=vLwAT-TLmZU


