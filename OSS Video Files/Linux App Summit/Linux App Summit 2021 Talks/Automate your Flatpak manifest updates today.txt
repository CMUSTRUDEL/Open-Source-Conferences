Title: Automate your Flatpak manifest updates today
Publication date: 2021-05-30
Playlist: Linux App Summit 2021 Talks
Description: 
	flatpak-external-data-checker started life as a side-project at Endless, notifying the team when a small number of unofficial Flatpak wrappers for third-party proprietary apps in Endless' own Flatpak repository needed attention. Three years and sixteen developers later, it checks and automatically updates over a hundred apps on Flathub, many of which are free software and maintained by their upstream developers, and has a small but thriving community of contributors itself.

This talk will cover how this tool grew into its present form, how it can help you maintain a Flatpak of your application, and its implications for the health of the Flathub ecosystem.



Twitter and/or Mastodon Handle

@wjjjjt
@wjjjjt@mastodon.social



Author(s) Bio

Will Thompson is Director of Platform at Endless OS Foundation, a non-profit whose mission is to help all people and communities connect with technology.


Q&A


1. Can this tool be used to automatically update the runtime to use, so we avoid apps using deprecated GNOME, KDE, freedesktop-sdk, etc runtimes?

2. Can we use this tool to automate update GNOME/KDE tarball in manifest?
Captions: 
	00:00:01,760 --> 00:00:05,040
hi there thanks for the introduction

00:00:03,120 --> 00:00:06,160
so good morning from london in the

00:00:05,040 --> 00:00:07,680
united kingdom

00:00:06,160 --> 00:00:09,519
and my name is bob thompson i'm an

00:00:07,680 --> 00:00:10,480
engineering director at endless os

00:00:09,519 --> 00:00:12,559
foundation

00:00:10,480 --> 00:00:14,240
as we just heard our mission is to help

00:00:12,559 --> 00:00:16,320
all peoples and communities

00:00:14,240 --> 00:00:18,480
collect but connect with technology um

00:00:16,320 --> 00:00:20,000
i'll tell you a bit more about nsos

00:00:18,480 --> 00:00:21,760
itself later

00:00:20,000 --> 00:00:23,760
today i'm going to talk mainly about

00:00:21,760 --> 00:00:25,920
flat pack external data checker

00:00:23,760 --> 00:00:27,359
which helps keep flat packs up to date

00:00:25,920 --> 00:00:30,480
with new releases of the app

00:00:27,359 --> 00:00:31,199
or its dependencies i'll explain what it

00:00:30,480 --> 00:00:33,600
does

00:00:31,199 --> 00:00:34,880
tell you a bit about its history and

00:00:33,600 --> 00:00:36,399
what it's doing today

00:00:34,880 --> 00:00:38,559
i'll give some examples of how you can

00:00:36,399 --> 00:00:39,520
use it yourself and some ways that you

00:00:38,559 --> 00:00:41,760
could get involved

00:00:39,520 --> 00:00:43,040
in the project and we'll have some time

00:00:41,760 --> 00:00:44,640
at the end for questions

00:00:43,040 --> 00:00:46,640
so if you do have any questions during

00:00:44,640 --> 00:00:47,600
the talk please leave them in the chat

00:00:46,640 --> 00:00:49,840
all the shared notes

00:00:47,600 --> 00:00:51,199
and we'll get to them at the end if

00:00:49,840 --> 00:00:53,120
you're watching the recording

00:00:51,199 --> 00:00:54,960
and have any questions then please do

00:00:53,120 --> 00:00:56,719
get in touch um

00:00:54,960 --> 00:00:59,120
my email address is on the slide and

00:00:56,719 --> 00:01:01,600
we'll have the url to the project itself

00:00:59,120 --> 00:01:04,159
later in the deck

00:01:01,600 --> 00:01:05,600
okay so a bit of context to understand

00:01:04,159 --> 00:01:07,360
the motivation for this tool

00:01:05,600 --> 00:01:09,119
it helps to know a few facts about

00:01:07,360 --> 00:01:10,880
flatpak itself

00:01:09,119 --> 00:01:12,640
i'll quote the tagline from its website

00:01:10,880 --> 00:01:15,200
flat pack is a next generation

00:01:12,640 --> 00:01:18,240
technology for building and distributing

00:01:15,200 --> 00:01:19,680
desktop applications on linux and

00:01:18,240 --> 00:01:21,119
we're mostly focusing on the building

00:01:19,680 --> 00:01:22,000
and distributing today rather than the

00:01:21,119 --> 00:01:24,720
running

00:01:22,000 --> 00:01:26,080
um but applications are built and run in

00:01:24,720 --> 00:01:27,920
a predictable environment

00:01:26,080 --> 00:01:29,920
regardless of the linux distribution

00:01:27,920 --> 00:01:31,520
that they're running on and anyone can

00:01:29,920 --> 00:01:32,560
host a repository of flatpack

00:01:31,520 --> 00:01:34,000
applications

00:01:32,560 --> 00:01:36,320
and users can have applications

00:01:34,000 --> 00:01:38,640
installed from more than one repository

00:01:36,320 --> 00:01:40,320
at the same time

00:01:38,640 --> 00:01:41,920
probably the most prominent flat pack

00:01:40,320 --> 00:01:43,840
repository is flat hub

00:01:41,920 --> 00:01:45,600
which is a vendor neutral project which

00:01:43,840 --> 00:01:47,280
hosts a mixture of open source and

00:01:45,600 --> 00:01:48,640
proprietary applications

00:01:47,280 --> 00:01:50,560
and that's the one i'm going to be

00:01:48,640 --> 00:01:52,880
concentrating on today but

00:01:50,560 --> 00:01:54,560
whenever i say flat hub you can imagine

00:01:52,880 --> 00:01:56,479
there's a footnote saying

00:01:54,560 --> 00:01:59,439
or another flat pack repository which

00:01:56,479 --> 00:02:02,320
works kind of like flatup

00:01:59,439 --> 00:02:03,439
so on flathub footnotes the build

00:02:02,320 --> 00:02:05,360
process for most

00:02:03,439 --> 00:02:07,439
apps is defined by what's called a

00:02:05,360 --> 00:02:09,840
manifest file which is in

00:02:07,439 --> 00:02:10,959
json or yaml format and that's stored in

00:02:09,840 --> 00:02:12,959
a repository

00:02:10,959 --> 00:02:14,560
on github within the flat hub

00:02:12,959 --> 00:02:17,200
organization

00:02:14,560 --> 00:02:19,760
and these manifests are essentially a

00:02:17,200 --> 00:02:22,239
list of all the apps dependencies

00:02:19,760 --> 00:02:22,959
and the app itself and how to build and

00:02:22,239 --> 00:02:25,280
install

00:02:22,959 --> 00:02:26,560
each of those components in sequence

00:02:25,280 --> 00:02:28,000
first each dependency

00:02:26,560 --> 00:02:30,720
followed by building and installing the

00:02:28,000 --> 00:02:33,440
app itself and the source code

00:02:30,720 --> 00:02:35,360
for the app and its dependencies is not

00:02:33,440 --> 00:02:38,400
stored in that git repository

00:02:35,360 --> 00:02:40,160
it just contains this manifest the

00:02:38,400 --> 00:02:43,519
manifest contains

00:02:40,160 --> 00:02:46,160
urls to each source code artifact

00:02:43,519 --> 00:02:46,800
and when flathub builds the app it

00:02:46,160 --> 00:02:48,959
downloads

00:02:46,800 --> 00:02:50,160
all the source um as specified in the

00:02:48,959 --> 00:02:52,640
manifest

00:02:50,160 --> 00:02:54,080
for some apps the manifest is very

00:02:52,640 --> 00:02:55,680
simple because all the necessary

00:02:54,080 --> 00:02:58,239
dependencies are already present

00:02:55,680 --> 00:02:59,440
in the flatpack runtime so for these the

00:02:58,239 --> 00:03:01,599
manifest would

00:02:59,440 --> 00:03:02,879
literally just be here is the source

00:03:01,599 --> 00:03:03,519
code for this app and here's how you

00:03:02,879 --> 00:03:06,800
build it

00:03:03,519 --> 00:03:10,080
done for other apps um

00:03:06,800 --> 00:03:11,200
often big python apps or big node or

00:03:10,080 --> 00:03:12,959
electron apps

00:03:11,200 --> 00:03:14,560
the there are hundreds or maybe even

00:03:12,959 --> 00:03:17,599
thousands of dependencies

00:03:14,560 --> 00:03:18,560
um and those apps manifests are

00:03:17,599 --> 00:03:20,480
generated by

00:03:18,560 --> 00:03:22,319
tools which read these language specific

00:03:20,480 --> 00:03:25,599
formats and emit

00:03:22,319 --> 00:03:27,680
um gigantic json files in the format

00:03:25,599 --> 00:03:29,360
understood by flat pack builder

00:03:27,680 --> 00:03:31,680
most apps are somewhere in the middle

00:03:29,360 --> 00:03:34,640
with a small handful of dependencies

00:03:31,680 --> 00:03:35,920
and a manifest maintained by hand and

00:03:34,640 --> 00:03:36,799
those are the kinds of apps that this

00:03:35,920 --> 00:03:40,400
tool is intended

00:03:36,799 --> 00:03:41,920
to help with um just while we're here

00:03:40,400 --> 00:03:44,000
two of the other prominent flatpack

00:03:41,920 --> 00:03:46,400
repositories you may have come across

00:03:44,000 --> 00:03:47,840
are the gnome lightning repository which

00:03:46,400 --> 00:03:49,760
holds um

00:03:47,840 --> 00:03:51,040
as the name suggests nightly builds of

00:03:49,760 --> 00:03:52,239
the development branch of gnome

00:03:51,040 --> 00:03:54,080
components

00:03:52,239 --> 00:03:55,599
and there's also fedora's flatpack

00:03:54,080 --> 00:03:57,840
repository um

00:03:55,599 --> 00:03:59,040
apps in those repositories tend not to

00:03:57,840 --> 00:04:00,400
need the kind of automation we're

00:03:59,040 --> 00:04:02,879
talking about today

00:04:00,400 --> 00:04:04,080
um and in the case of fedora the flat

00:04:02,879 --> 00:04:05,680
packs are built by a completely

00:04:04,080 --> 00:04:07,120
different process and this tool is not

00:04:05,680 --> 00:04:08,480
relevant at all

00:04:07,120 --> 00:04:10,000
if you're interested in how those ones

00:04:08,480 --> 00:04:11,680
are built then stick around for the next

00:04:10,000 --> 00:04:15,040
talk in just under an hour

00:04:11,680 --> 00:04:18,720
when we'll hear about that

00:04:15,040 --> 00:04:20,639
okay normally when flat hub builds

00:04:18,720 --> 00:04:23,199
a flat pack application the resulting

00:04:20,639 --> 00:04:26,400
full files are stored as an immutable

00:04:23,199 --> 00:04:28,000
os tree snapshot um which users then

00:04:26,400 --> 00:04:31,040
just download from the repository

00:04:28,000 --> 00:04:32,880
and run straight from disk but flatpack

00:04:31,040 --> 00:04:33,759
does have a somewhat unusual feature

00:04:32,880 --> 00:04:36,320
which allows

00:04:33,759 --> 00:04:38,479
an app to download and unpack additional

00:04:36,320 --> 00:04:40,720
files from a third-party server

00:04:38,479 --> 00:04:42,880
at the time when the app is installed

00:04:40,720 --> 00:04:45,360
and this feature mainly exists

00:04:42,880 --> 00:04:46,000
to support installing applications using

00:04:45,360 --> 00:04:48,240
flat pack

00:04:46,000 --> 00:04:49,280
when the repository owner doesn't have

00:04:48,240 --> 00:04:52,479
permission to

00:04:49,280 --> 00:04:54,560
redistribute the app itself um

00:04:52,479 --> 00:04:56,160
so for an example here is what happens

00:04:54,560 --> 00:04:59,440
today if you install

00:04:56,160 --> 00:05:00,639
skype from flat hub using the command

00:04:59,440 --> 00:05:03,360
line or using

00:05:00,639 --> 00:05:04,000
gnome software or another front end so

00:05:03,360 --> 00:05:05,680
first of all

00:05:04,000 --> 00:05:07,720
flat pack running on your computer

00:05:05,680 --> 00:05:11,199
fetches and installs the

00:05:07,720 --> 00:05:13,680
com.skype.clan pack from flat hub

00:05:11,199 --> 00:05:14,320
it also fetches the runtime that it

00:05:13,680 --> 00:05:17,360
depends on

00:05:14,320 --> 00:05:19,919
if you don't already have it installed

00:05:17,360 --> 00:05:21,759
so that flat pack app com.skype.client

00:05:19,919 --> 00:05:23,360
it contains the open source libraries

00:05:21,759 --> 00:05:25,440
that skype depends on

00:05:23,360 --> 00:05:27,199
that's things like v4l utils to talk to

00:05:25,440 --> 00:05:28,479
the webcam and lip secret to talk to

00:05:27,199 --> 00:05:30,639
your keyring

00:05:28,479 --> 00:05:32,639
but it doesn't actually contain skype

00:05:30,639 --> 00:05:34,560
itself flat hub does not have permission

00:05:32,639 --> 00:05:36,560
to redistribute skype

00:05:34,560 --> 00:05:38,160
so instead the flat pack contains the

00:05:36,560 --> 00:05:41,520
url to the

00:05:38,160 --> 00:05:44,960
dev package of skype the expected

00:05:41,520 --> 00:05:46,080
size invites and the sha256 check sum of

00:05:44,960 --> 00:05:48,560
that file

00:05:46,080 --> 00:05:51,120
and a script which will be used to

00:05:48,560 --> 00:05:54,400
unpack that deb file

00:05:51,120 --> 00:05:57,039
so next having downloaded the

00:05:54,400 --> 00:05:57,759
the app minus the app itself and the

00:05:57,039 --> 00:06:01,120
runtime

00:05:57,759 --> 00:06:02,000
from bathtub flat pack running on your

00:06:01,120 --> 00:06:04,720
computer

00:06:02,000 --> 00:06:05,120
downloads the skype dev file directly

00:06:04,720 --> 00:06:08,720
from

00:06:05,120 --> 00:06:10,800
skype it verifies that the deb file has

00:06:08,720 --> 00:06:12,720
the expected size and checksum

00:06:10,800 --> 00:06:14,800
and if it does it will run the script

00:06:12,720 --> 00:06:17,199
that was included in the flatpack app

00:06:14,800 --> 00:06:18,960
to unpack it and this script is run in a

00:06:17,199 --> 00:06:20,560
strict sandbox and once it's finished

00:06:18,960 --> 00:06:21,360
the files it's extracted are made

00:06:20,560 --> 00:06:23,120
read-only

00:06:21,360 --> 00:06:25,039
just like all the other files in a

00:06:23,120 --> 00:06:28,160
flatpack app

00:06:25,039 --> 00:06:30,400
flathub didn't distribute skype itself

00:06:28,160 --> 00:06:31,919
but the end result once you install the

00:06:30,400 --> 00:06:35,039
app is almost the same

00:06:31,919 --> 00:06:36,479
as if you have you can treat it as just

00:06:35,039 --> 00:06:38,560
like any other flat pack app

00:06:36,479 --> 00:06:39,840
you can update it in the background

00:06:38,560 --> 00:06:40,880
while it is running

00:06:39,840 --> 00:06:43,120
and the next time you start it you'll

00:06:40,880 --> 00:06:45,520
get the new version you can uninstall it

00:06:43,120 --> 00:06:47,360
and mostly it behaves just as you would

00:06:45,520 --> 00:06:49,199
expect

00:06:47,360 --> 00:06:51,120
maybe as i was saying that you can think

00:06:49,199 --> 00:06:54,800
of some ways that this process might go

00:06:51,120 --> 00:06:55,840
wrong so when a new version of skype is

00:06:54,800 --> 00:06:57,759
released

00:06:55,840 --> 00:06:59,520
the url for the old version will

00:06:57,759 --> 00:07:01,840
eventually stop working

00:06:59,520 --> 00:07:03,680
and so if the flat pack app which

00:07:01,840 --> 00:07:06,080
contains the url to download it from is

00:07:03,680 --> 00:07:09,360
not updated before that point

00:07:06,080 --> 00:07:11,039
new users will not be able to install

00:07:09,360 --> 00:07:12,080
this new release of skype well in fact

00:07:11,039 --> 00:07:13,039
they won't be able to install the old

00:07:12,080 --> 00:07:14,639
one either

00:07:13,039 --> 00:07:16,240
and if you already have skype installed

00:07:14,639 --> 00:07:18,160
in your system with flatback

00:07:16,240 --> 00:07:20,639
you won't be able to update it it will

00:07:18,160 --> 00:07:23,199
keep working but you can't update it

00:07:20,639 --> 00:07:25,039
and even worse sometimes vendors publish

00:07:23,199 --> 00:07:27,680
a new version of their app

00:07:25,039 --> 00:07:29,120
at the same url as the old version and

00:07:27,680 --> 00:07:30,720
so of course the new version will have a

00:07:29,120 --> 00:07:33,120
different size and checksum

00:07:30,720 --> 00:07:34,639
and flat pack will refuse to unpack it

00:07:33,120 --> 00:07:36,560
when you try to install it and so

00:07:34,639 --> 00:07:37,919
again installation will fail and this is

00:07:36,560 --> 00:07:39,599
worse because it happens immediately

00:07:37,919 --> 00:07:42,560
that the new version is released

00:07:39,599 --> 00:07:44,000
and it's you know there's no there's no

00:07:42,560 --> 00:07:44,960
grace period where the old files

00:07:44,000 --> 00:07:47,199
is still clicking around in the

00:07:44,960 --> 00:07:50,319
repository or on their cdn like

00:07:47,199 --> 00:07:52,319
it's done it doesn't work anymore so

00:07:50,319 --> 00:07:54,639
we do need a way to keep these flat

00:07:52,319 --> 00:07:56,840
packs which are extra data

00:07:54,639 --> 00:07:58,800
up to date and ideally do this

00:07:56,840 --> 00:08:00,960
automatically

00:07:58,800 --> 00:08:02,800
time for a bit of a history lesson um if

00:08:00,960 --> 00:08:04,080
you cast your mind back to the middle of

00:08:02,800 --> 00:08:06,400
00:08:04,080 --> 00:08:07,199
but try not to think about the politics

00:08:06,400 --> 00:08:09,520
stuff

00:08:07,199 --> 00:08:10,560
and concentrate on the computers so back

00:08:09,520 --> 00:08:12,800
then um

00:08:10,560 --> 00:08:13,680
at the start of 2016 flat pack did not

00:08:12,800 --> 00:08:16,879
exist but

00:08:13,680 --> 00:08:20,240
um a precursor tool called xdg hyphen

00:08:16,879 --> 00:08:22,479
app existed um so during 2016

00:08:20,240 --> 00:08:23,440
that was rebranded as the much snappier

00:08:22,479 --> 00:08:26,560
and easier to say

00:08:23,440 --> 00:08:27,440
flat pack and endless os um was being

00:08:26,560 --> 00:08:29,759
rebuilt

00:08:27,440 --> 00:08:31,039
from using a bespoke app management tool

00:08:29,759 --> 00:08:34,000
to use flat packs

00:08:31,039 --> 00:08:35,360
for apps um i borrowed this image which

00:08:34,000 --> 00:08:36,479
is a kind of publicity image of endless

00:08:35,360 --> 00:08:38,080
os at the time

00:08:36,479 --> 00:08:40,880
from the press release which announced

00:08:38,080 --> 00:08:42,479
flat pack back in 2016.

00:08:40,880 --> 00:08:44,399
so if you're not familiar with endless

00:08:42,479 --> 00:08:47,040
os it's a desktop os

00:08:44,399 --> 00:08:48,560
with some properties borrowed from

00:08:47,040 --> 00:08:52,160
mobile oss

00:08:48,560 --> 00:08:53,279
and so behind the scenes rather like ios

00:08:52,160 --> 00:08:55,440
and android and

00:08:53,279 --> 00:08:56,720
rather unlike most traditional linux

00:08:55,440 --> 00:08:59,360
distributions

00:08:56,720 --> 00:09:01,839
each release of endless os is an

00:08:59,360 --> 00:09:05,360
immutable os tree snapshot

00:09:01,839 --> 00:09:08,160
um so although it's derived from debian

00:09:05,360 --> 00:09:10,560
it's not possible to install new apps

00:09:08,160 --> 00:09:12,640
using tools like d package

00:09:10,560 --> 00:09:14,320
updates for endless os are distributed

00:09:12,640 --> 00:09:17,200
as new osp snapshots

00:09:14,320 --> 00:09:18,399
which are unpacked and then you reboot

00:09:17,200 --> 00:09:22,320
and you're in the new version

00:09:18,399 --> 00:09:25,120
atomically as you may know flat pack

00:09:22,320 --> 00:09:25,760
uses os tree behind the scenes for its

00:09:25,120 --> 00:09:27,760
own

00:09:25,760 --> 00:09:30,399
um snapshot based installation and

00:09:27,760 --> 00:09:32,720
updates and so we adopted that on nsos

00:09:30,399 --> 00:09:34,560
and apps on msos can be installed using

00:09:32,720 --> 00:09:36,480
flat pack which means every app

00:09:34,560 --> 00:09:37,760
just like the os itself is automatically

00:09:36,480 --> 00:09:39,360
sealed snapshot

00:09:37,760 --> 00:09:41,200
and one of the really nice things this

00:09:39,360 --> 00:09:43,760
enables is robust

00:09:41,200 --> 00:09:45,200
automatic updates both of the os and of

00:09:43,760 --> 00:09:48,720
the apps themselves

00:09:45,200 --> 00:09:51,680
um many of our target users are not

00:09:48,720 --> 00:09:52,800
computer savvy um having to manually

00:09:51,680 --> 00:09:54,080
operate updates

00:09:52,800 --> 00:09:56,720
decide whether they want to reboot their

00:09:54,080 --> 00:09:58,560
computer or not um is

00:09:56,720 --> 00:10:00,640
is not something we want to do and we've

00:09:58,560 --> 00:10:01,680
been very happy just allowing the os and

00:10:00,640 --> 00:10:05,040
the apps to update themselves

00:10:01,680 --> 00:10:06,399
automatically um this this this is very

00:10:05,040 --> 00:10:09,920
robust it works very well

00:10:06,399 --> 00:10:12,800
and it's uh basically invisible

00:10:09,920 --> 00:10:14,160
which is exactly what you want so

00:10:12,800 --> 00:10:18,399
endless os has many

00:10:14,160 --> 00:10:22,000
unique apps for offline um contents

00:10:18,399 --> 00:10:25,360
be that copies of wikipedia

00:10:22,000 --> 00:10:27,600
other tutorials and guides um

00:10:25,360 --> 00:10:29,600
how to use blender and so on these are

00:10:27,600 --> 00:10:31,360
built using a custom flatpack runtime

00:10:29,600 --> 00:10:32,079
and a custom build pipeline and they're

00:10:31,360 --> 00:10:35,040
published in

00:10:32,079 --> 00:10:35,680
our own flat pack repository but of

00:10:35,040 --> 00:10:38,880
course

00:10:35,680 --> 00:10:42,399
users need regular apps too for

00:10:38,880 --> 00:10:46,000
productivity and creativity and chaos

00:10:42,399 --> 00:10:49,600
so back in 2016

00:10:46,000 --> 00:10:52,880
flat hub didn't exist and so we built

00:10:49,600 --> 00:10:54,000
and published flat packs for a bunch of

00:10:52,880 --> 00:10:56,079
third-party apps

00:10:54,000 --> 00:10:58,720
in our own flatback laundry too

00:10:56,079 --> 00:11:00,640
alongside our first party content apps

00:10:58,720 --> 00:11:03,200
and most of these apps were open source

00:11:00,640 --> 00:11:04,240
apps um but our users expected to be

00:11:03,200 --> 00:11:06,399
able to install

00:11:04,240 --> 00:11:07,760
some apps such as skype spotify and

00:11:06,399 --> 00:11:10,079
dropbox which happened to be the

00:11:07,760 --> 00:11:10,800
first three when i did some history

00:11:10,079 --> 00:11:13,040
research

00:11:10,800 --> 00:11:13,839
preparing this talk so those three were

00:11:13,040 --> 00:11:15,200
built as

00:11:13,839 --> 00:11:17,279
extra data flat packs using the

00:11:15,200 --> 00:11:18,959
mechanism i just described schreiken

00:11:17,279 --> 00:11:21,120
russia who worked at endless at the time

00:11:18,959 --> 00:11:23,120
wrote a jenkins job which would check

00:11:21,120 --> 00:11:25,040
for new versions of these apps

00:11:23,120 --> 00:11:26,160
and it would just email the endless

00:11:25,040 --> 00:11:29,360
engineering team

00:11:26,160 --> 00:11:32,399
when the flat packs needed to be updated

00:11:29,360 --> 00:11:35,120
so as the list of third-party apps

00:11:32,399 --> 00:11:37,200
grew steadily larger this script got

00:11:35,120 --> 00:11:39,360
more complicated to deal with

00:11:37,200 --> 00:11:41,360
different ways to check for updates so

00:11:39,360 --> 00:11:43,279
schrokim rewrote it in python

00:11:41,360 --> 00:11:45,440
and he published it as the first version

00:11:43,279 --> 00:11:48,640
of flat pack external data checker the

00:11:45,440 --> 00:11:50,720
subject of today's talk

00:11:48,640 --> 00:11:51,920
so fast forward a couple of years and in

00:11:50,720 --> 00:11:55,360
00:11:51,920 --> 00:11:58,079
flat hub was born we quickly enabled it

00:11:55,360 --> 00:11:59,680
by default in nsos and we began moving

00:11:58,079 --> 00:12:01,680
these third-party apps

00:11:59,680 --> 00:12:03,600
from our own flat pack repository into

00:12:01,680 --> 00:12:05,440
flat hub

00:12:03,600 --> 00:12:08,320
all the open source ones and the few

00:12:05,440 --> 00:12:10,240
that were using extra data

00:12:08,320 --> 00:12:12,800
so i found a funny commit from nick

00:12:10,240 --> 00:12:14,079
richards um from july in 2018.

00:12:12,800 --> 00:12:16,720
nick used to work at endless and he's

00:12:14,079 --> 00:12:18,800
still very involved in flat hub today

00:12:16,720 --> 00:12:20,000
the commit message reads check extra

00:12:18,800 --> 00:12:22,240
data for most

00:12:20,000 --> 00:12:23,600
flat hub repositories but as you might

00:12:22,240 --> 00:12:26,720
be able to see here

00:12:23,600 --> 00:12:27,760
most means 16 apps and flathead has come

00:12:26,720 --> 00:12:31,040
a really long way

00:12:27,760 --> 00:12:32,399
in these three years at this point the

00:12:31,040 --> 00:12:33,680
process was still the same as when it

00:12:32,399 --> 00:12:36,000
was first created

00:12:33,680 --> 00:12:38,000
when an app needed to be updated the dev

00:12:36,000 --> 00:12:38,800
team at endless would get an email from

00:12:38,000 --> 00:12:39,920
jenkins

00:12:38,800 --> 00:12:42,160
and someone would have to go and

00:12:39,920 --> 00:12:44,399
manually update the relevant manifest

00:12:42,160 --> 00:12:44,399
file

00:12:44,959 --> 00:12:48,160
it came to pass that i was often the one

00:12:47,040 --> 00:12:50,720
who got those emails

00:12:48,160 --> 00:12:52,000
and i got tired of doing it by hand and

00:12:50,720 --> 00:12:53,839
i love to spend more time

00:12:52,000 --> 00:12:55,040
than is really advisable automating

00:12:53,839 --> 00:12:58,000
simple tasks

00:12:55,040 --> 00:13:00,079
so at the start of 2019 i taught flat

00:12:58,000 --> 00:13:01,440
pack external data checker to update the

00:13:00,079 --> 00:13:04,160
flat pack manifest

00:13:01,440 --> 00:13:04,800
and open a pull request so at this point

00:13:04,160 --> 00:13:07,360
it was still

00:13:04,800 --> 00:13:08,560
running out of endlesses jenkins as you

00:13:07,360 --> 00:13:10,160
might be able to see from this

00:13:08,560 --> 00:13:11,680
screenshots there's this cryptically

00:13:10,160 --> 00:13:14,800
named github user eos

00:13:11,680 --> 00:13:16,800
shell build um this seems to have been

00:13:14,800 --> 00:13:17,839
the first pull request it opened at

00:13:16,800 --> 00:13:19,440
least on flat hub

00:13:17,839 --> 00:13:21,120
and at least when running from our

00:13:19,440 --> 00:13:21,600
jenkins rather than me running it by

00:13:21,120 --> 00:13:24,000
hand

00:13:21,600 --> 00:13:25,839
on my development system with my own api

00:13:24,000 --> 00:13:28,560
key as my own github user

00:13:25,839 --> 00:13:29,279
um this first pull request was actually

00:13:28,560 --> 00:13:31,360
declined

00:13:29,279 --> 00:13:32,560
and because somebody manually opened

00:13:31,360 --> 00:13:34,399
another pull request

00:13:32,560 --> 00:13:35,920
for a slightly newer version of dropbox

00:13:34,399 --> 00:13:37,120
shortly afterwards but if they had not

00:13:35,920 --> 00:13:39,680
done so this would have been

00:13:37,120 --> 00:13:41,040
just grand um one of the really nice

00:13:39,680 --> 00:13:43,519
things about this workflow

00:13:41,040 --> 00:13:44,800
is that flat hub has a continuous

00:13:43,519 --> 00:13:46,880
integration which

00:13:44,800 --> 00:13:48,240
automatically makes a test build of

00:13:46,880 --> 00:13:49,920
every pull request

00:13:48,240 --> 00:13:51,680
so as a maintainer you receive a pull

00:13:49,920 --> 00:13:54,399
request and shortly afterwards

00:13:51,680 --> 00:13:56,160
you have a url that you can use to just

00:13:54,399 --> 00:13:59,040
install and test that test build

00:13:56,160 --> 00:14:00,079
copy paste it run the app and assuming

00:13:59,040 --> 00:14:01,680
it works

00:14:00,079 --> 00:14:04,320
you just hit merge on the pull request

00:14:01,680 --> 00:14:06,639
that's it um no manual editing of json

00:14:04,320 --> 00:14:06,639
files

00:14:06,880 --> 00:14:12,959
so um

00:14:10,880 --> 00:14:13,920
petroski is a devops engineer at the

00:14:12,959 --> 00:14:15,920
genome foundation

00:14:13,920 --> 00:14:17,120
and he's one of the main administrators

00:14:15,920 --> 00:14:20,000
of flat hub

00:14:17,120 --> 00:14:21,360
so near the end of 2019 he deployed flat

00:14:20,000 --> 00:14:23,680
pack external data checker

00:14:21,360 --> 00:14:25,519
onto flat hub's own infrastructure and

00:14:23,680 --> 00:14:27,120
we moved the repository over to the flat

00:14:25,519 --> 00:14:30,320
hub organization

00:14:27,120 --> 00:14:33,600
so outside of the endless um

00:14:30,320 --> 00:14:36,000
github and ci and it's now a

00:14:33,600 --> 00:14:36,639
shared flat hub project and he set it up

00:14:36,000 --> 00:14:39,600
to run

00:14:36,639 --> 00:14:40,240
every hour and check every app on flat

00:14:39,600 --> 00:14:41,839
hub

00:14:40,240 --> 00:14:43,279
which had the appropriate configuration

00:14:41,839 --> 00:14:44,560
in its manifest to allow the tool to

00:14:43,279 --> 00:14:46,560
work

00:14:44,560 --> 00:14:47,760
so making this tool more official had

00:14:46,560 --> 00:14:49,680
some nice results

00:14:47,760 --> 00:14:51,600
and before that some flat hub

00:14:49,680 --> 00:14:53,040
contributors had been a bit hesitant to

00:14:51,600 --> 00:14:54,959
integrate with a tool

00:14:53,040 --> 00:14:57,279
that was running on endless private ci

00:14:54,959 --> 00:14:59,040
infrastructure it's a bit opaque

00:14:57,279 --> 00:15:00,560
but as part of the flat hub organization

00:14:59,040 --> 00:15:01,600
they were happy to opt in safe from the

00:15:00,560 --> 00:15:04,079
knowledge that the flat hub

00:15:01,600 --> 00:15:06,560
administrators could intervene as needed

00:15:04,079 --> 00:15:08,720
um it was also made a requirement that

00:15:06,560 --> 00:15:09,600
if you submit a new extra data app to

00:15:08,720 --> 00:15:10,959
flat hub

00:15:09,600 --> 00:15:12,720
then it should integrate with this tool

00:15:10,959 --> 00:15:14,399
where possible and so of course that

00:15:12,720 --> 00:15:17,279
also helped with this adoption

00:15:14,399 --> 00:15:18,720
um so taken together these in turn led

00:15:17,279 --> 00:15:22,079
to more people contributing

00:15:18,720 --> 00:15:23,600
to the external data checker itself

00:15:22,079 --> 00:15:26,480
this seems to have been the first full

00:15:23,600 --> 00:15:27,120
request that was opened by the flat hub

00:15:26,480 --> 00:15:30,000
instance

00:15:27,120 --> 00:15:31,199
of the checker which funnily enough also

00:15:30,000 --> 00:15:34,079
seems to have been declined

00:15:31,199 --> 00:15:35,759
um it's running as the github user flat

00:15:34,079 --> 00:15:38,160
hub bots which is also the user which

00:15:35,759 --> 00:15:39,920
announces the urls for test builds

00:15:38,160 --> 00:15:41,440
um but those two systems actually don't

00:15:39,920 --> 00:15:42,880
really know anything about each other

00:15:41,440 --> 00:15:45,040
they happen to run as the same github

00:15:42,880 --> 00:15:47,279
user um

00:15:45,040 --> 00:15:48,639
happily coexisting what you might also

00:15:47,279 --> 00:15:50,959
notice here is that it hasn't just

00:15:48,639 --> 00:15:52,560
updated the url now it's also updated

00:15:50,959 --> 00:15:54,000
the app data file

00:15:52,560 --> 00:15:55,920
with the version number and release

00:15:54,000 --> 00:15:59,040
dates of the new build of zoom

00:15:55,920 --> 00:16:00,639
so it's extracted that from the url and

00:15:59,040 --> 00:16:02,320
put it into the xml which

00:16:00,639 --> 00:16:05,839
reduces one extra step you might have to

00:16:02,320 --> 00:16:05,839
do manually when you get an update

00:16:06,800 --> 00:16:09,920
when it was rolled out to flat hub

00:16:08,320 --> 00:16:11,600
something interesting and a little bit

00:16:09,920 --> 00:16:14,000
unexpected happened

00:16:11,600 --> 00:16:15,680
so although flat external data checker

00:16:14,000 --> 00:16:18,880
was originally created

00:16:15,680 --> 00:16:21,279
to update extra data flat packs um

00:16:18,880 --> 00:16:22,079
but it started to be adopted by regular

00:16:21,279 --> 00:16:24,639
flat packs

00:16:22,079 --> 00:16:27,120
to keep them up to date as well um when

00:16:24,639 --> 00:16:29,120
i prepared this talk there were 112

00:16:27,120 --> 00:16:30,240
apps on flat hub which have ever been

00:16:29,120 --> 00:16:32,720
updated by this tool

00:16:30,240 --> 00:16:33,360
at least once in their history and out

00:16:32,720 --> 00:16:37,040
of those

00:16:33,360 --> 00:16:38,720
112 apps only 36 are extra data

00:16:37,040 --> 00:16:41,519
and so that is the blue line in this

00:16:38,720 --> 00:16:42,959
graph and the remaining 76 apps are

00:16:41,519 --> 00:16:44,639
normal flat packs that

00:16:42,959 --> 00:16:46,160
flat hub can build and distribute in

00:16:44,639 --> 00:16:47,279
full and which will not break if the

00:16:46,160 --> 00:16:49,759
dependencies go away

00:16:47,279 --> 00:16:51,839
because the build is committed and saved

00:16:49,759 --> 00:16:54,000
in flat hubs infrastructure

00:16:51,839 --> 00:16:55,040
actually the source code is too so if

00:16:54,000 --> 00:16:57,279
the upstream goes away

00:16:55,040 --> 00:16:58,079
we've got a backup and so the red line

00:16:57,279 --> 00:16:59,680
in this graph

00:16:58,079 --> 00:17:02,079
are the normal flat packs which are

00:16:59,680 --> 00:17:03,759
being updated by flat pipe external data

00:17:02,079 --> 00:17:05,199
checker

00:17:03,759 --> 00:17:07,520
so you can probably see that both lines

00:17:05,199 --> 00:17:09,199
went up steadily over the course of 2020

00:17:07,520 --> 00:17:10,959
which is after this tool was deployed to

00:17:09,199 --> 00:17:12,880
flat hub at the end of 2019.

00:17:10,959 --> 00:17:14,720
um there's a nice bump right at the end

00:17:12,880 --> 00:17:18,000
of 2019

00:17:14,720 --> 00:17:20,160
around here and i

00:17:18,000 --> 00:17:21,919
think this is the day that we merged

00:17:20,160 --> 00:17:24,480
support for updating

00:17:21,919 --> 00:17:26,160
jetbrains ides which was contributed by

00:17:24,480 --> 00:17:29,200
lctrs

00:17:26,160 --> 00:17:30,640
um since there were about six um of

00:17:29,200 --> 00:17:32,799
those on flat hub already they all

00:17:30,640 --> 00:17:35,039
adopted it simultaneously

00:17:32,799 --> 00:17:37,120
um you can probably also see that this

00:17:35,039 --> 00:17:38,320
checker really exploded in popularity

00:17:37,120 --> 00:17:40,960
for normal flat packs

00:17:38,320 --> 00:17:42,559
since the start of this year 2021 so

00:17:40,960 --> 00:17:46,240
this year starts around here

00:17:42,559 --> 00:17:48,320
and the line just shoots up um

00:17:46,240 --> 00:17:50,160
i think this is mainly because a

00:17:48,320 --> 00:17:51,840
prolific flat hub contributor who goes

00:17:50,160 --> 00:17:54,640
by the user name gas in vain

00:17:51,840 --> 00:17:55,840
became a co-maintainer of the flat pack

00:17:54,640 --> 00:17:58,640
external data checker

00:17:55,840 --> 00:18:00,400
near the end of 2020 and he contributed

00:17:58,640 --> 00:18:03,039
really a lot of nice improvements

00:18:00,400 --> 00:18:05,120
um motivated by trying to keep up with

00:18:03,039 --> 00:18:06,799
the rapid release schedule of the open

00:18:05,120 --> 00:18:08,799
source telegram app

00:18:06,799 --> 00:18:10,160
he added several new ways to look for

00:18:08,799 --> 00:18:11,799
updated versions

00:18:10,160 --> 00:18:13,919
such as by checking

00:18:11,799 --> 00:18:16,000
releasemonitoring.org and using a

00:18:13,919 --> 00:18:17,200
general purpose json parser

00:18:16,000 --> 00:18:19,840
both of which we'll talk about a little

00:18:17,200 --> 00:18:21,120
more later um so as well as telegram

00:18:19,840 --> 00:18:21,919
this made it possible to check and

00:18:21,120 --> 00:18:23,520
update

00:18:21,919 --> 00:18:25,840
many more apps automatically than were

00:18:23,520 --> 00:18:29,120
supported before with the

00:18:25,840 --> 00:18:29,120
when the tool was targeting

00:18:29,360 --> 00:18:34,480
extra data apps and

00:18:32,720 --> 00:18:36,880
if we switch to looking for a moment at

00:18:34,480 --> 00:18:39,039
the contributions to the

00:18:36,880 --> 00:18:40,960
external data checker itself i think the

00:18:39,039 --> 00:18:42,080
graph of commits and number of lines

00:18:40,960 --> 00:18:43,600
changed uh

00:18:42,080 --> 00:18:45,520
speaks to the scale of his contributions

00:18:43,600 --> 00:18:47,600
to this project um you can see this

00:18:45,520 --> 00:18:48,720
gigantic mountain which emerges in 2020

00:18:47,600 --> 00:18:50,640
2021.

00:18:48,720 --> 00:18:52,000
um i have to confess that i've actually

00:18:50,640 --> 00:18:54,320
barely worked on this tour

00:18:52,000 --> 00:18:55,919
myself this year um so i'd like to thank

00:18:54,320 --> 00:18:57,760
gas and vane and actually everyone who's

00:18:55,919 --> 00:19:01,360
contributed over the past two years

00:18:57,760 --> 00:19:01,360
uh for keeping this project moving along

00:19:01,919 --> 00:19:05,919
okay let's get back to um what the tool

00:19:04,880 --> 00:19:07,280
does

00:19:05,919 --> 00:19:10,000
so here i've plotted the number of

00:19:07,280 --> 00:19:12,000
repositories to which an update

00:19:10,000 --> 00:19:13,679
from flat pack external data checker was

00:19:12,000 --> 00:19:16,880
merged in any given month

00:19:13,679 --> 00:19:17,520
um so this shows in blue the number of

00:19:16,880 --> 00:19:20,799
commits

00:19:17,520 --> 00:19:22,559
and in red the number of repositories um

00:19:20,799 --> 00:19:24,240
not every app has an update every month

00:19:22,559 --> 00:19:26,640
which is why the number of

00:19:24,240 --> 00:19:28,559
repo's updated in the past few months is

00:19:26,640 --> 00:19:29,360
just 50 or so compared to the 100 or

00:19:28,559 --> 00:19:32,640
something

00:19:29,360 --> 00:19:34,320
in total over the last two years um

00:19:32,640 --> 00:19:36,160
the number of commits that it makes is

00:19:34,320 --> 00:19:36,720
consistently much higher than the number

00:19:36,160 --> 00:19:38,559
of

00:19:36,720 --> 00:19:39,760
apps so it's updating some apps multiple

00:19:38,559 --> 00:19:41,600
times per month

00:19:39,760 --> 00:19:45,039
and for the last two months there's been

00:19:41,600 --> 00:19:45,039
more than 100 updates per month

00:19:45,600 --> 00:19:51,120
and um here are the top 30

00:19:49,120 --> 00:19:52,480
apps and runtimes that it updates

00:19:51,120 --> 00:19:53,280
because one of the other things it

00:19:52,480 --> 00:19:54,720
learned to do

00:19:53,280 --> 00:19:57,039
as a result of these changes is to

00:19:54,720 --> 00:19:59,280
update runtimes which are used

00:19:57,039 --> 00:20:00,400
um as the name suggests to run apps but

00:19:59,280 --> 00:20:03,760
also to

00:20:00,400 --> 00:20:06,159
build time and as extensions to apps

00:20:03,760 --> 00:20:07,039
um and so this this chart is the number

00:20:06,159 --> 00:20:08,880
of commits

00:20:07,039 --> 00:20:10,559
ordered by flatback external data

00:20:08,880 --> 00:20:12,559
checker um

00:20:10,559 --> 00:20:14,880
i've colored the bars by whether the app

00:20:12,559 --> 00:20:16,480
is actually or not

00:20:14,880 --> 00:20:17,760
but i've just realized that the colors

00:20:16,480 --> 00:20:18,559
are the opposite way around compared to

00:20:17,760 --> 00:20:21,280
the earlier slide

00:20:18,559 --> 00:20:22,159
sorry so here the extra data apps are

00:20:21,280 --> 00:20:25,200
red

00:20:22,159 --> 00:20:27,280
and the normal apps are blue um

00:20:25,200 --> 00:20:29,280
this chart is doesn't take time into

00:20:27,280 --> 00:20:31,360
account so it will obviously be

00:20:29,280 --> 00:20:32,720
biased towards apps which have been

00:20:31,360 --> 00:20:34,080
using the tool for longer

00:20:32,720 --> 00:20:35,840
as opposed to apps which adopted it

00:20:34,080 --> 00:20:37,760
recently but even so

00:20:35,840 --> 00:20:40,400
you can see quite an even split between

00:20:37,760 --> 00:20:43,600
extra data and normal apps

00:20:40,400 --> 00:20:47,120
the third most frequently updated app is

00:20:43,600 --> 00:20:48,400
rp cs3 which is a playstation 3 emulator

00:20:47,120 --> 00:20:49,440
apparently which is released under the

00:20:48,400 --> 00:20:52,240
gpl

00:20:49,440 --> 00:20:53,520
um flat hub tracks the master branch of

00:20:52,240 --> 00:20:55,760
that project

00:20:53,520 --> 00:20:58,080
which is a little unusual and typically

00:20:55,760 --> 00:20:59,840
flat hub contains releases of apps

00:20:58,080 --> 00:21:01,600
but i guess this is one of these

00:20:59,840 --> 00:21:03,200
fast-moving projects where

00:21:01,600 --> 00:21:04,799
if you're at the bleeding edge you're

00:21:03,200 --> 00:21:05,440
likely to get better compatibility with

00:21:04,799 --> 00:21:07,760
games

00:21:05,440 --> 00:21:09,360
and the cost of an occasional broken

00:21:07,760 --> 00:21:12,320
build if master is broken

00:21:09,360 --> 00:21:13,120
in the upstream project is not so great

00:21:12,320 --> 00:21:16,320
um

00:21:13,120 --> 00:21:18,400
and so the trade-off is worth it and

00:21:16,320 --> 00:21:20,240
high up on this chart you can also see

00:21:18,400 --> 00:21:22,640
the

00:21:20,240 --> 00:21:24,480
rust nightly extension which is the

00:21:22,640 --> 00:21:26,320
nightly build of the rust tool chain

00:21:24,480 --> 00:21:28,960
which is of course open source

00:21:26,320 --> 00:21:30,559
as well as the insider's branch of

00:21:28,960 --> 00:21:33,679
visual studio code

00:21:30,559 --> 00:21:33,679
which is not open source

00:21:35,919 --> 00:21:40,559
um and that made me wonder if so many of

00:21:38,559 --> 00:21:42,240
the most frequently updated repositories

00:21:40,559 --> 00:21:44,000
are actually open source

00:21:42,240 --> 00:21:45,440
or if they're not open source they're

00:21:44,000 --> 00:21:46,880
redistributed at least

00:21:45,440 --> 00:21:48,720
um how does that compare to the

00:21:46,880 --> 00:21:49,840
proportion of apps of each kind on flat

00:21:48,720 --> 00:21:53,520
hub as a whole

00:21:49,840 --> 00:21:55,200
um so as i mentioned of the 112 repo's

00:21:53,520 --> 00:21:57,679
that the checker has ever updated

00:21:55,200 --> 00:21:59,120
only 36 are extra data and the remaining

00:21:57,679 --> 00:22:01,039
76 are normal

00:21:59,120 --> 00:22:02,240
fully redistributable flat packs and

00:22:01,039 --> 00:22:05,360
that's almost as many

00:22:02,240 --> 00:22:09,120
as the 79 extra data apps that flat hub

00:22:05,360 --> 00:22:11,280
has in total um so in relative terms

00:22:09,120 --> 00:22:12,640
the checker checks almost half of the

00:22:11,280 --> 00:22:14,880
actual data apps

00:22:12,640 --> 00:22:16,080
and there are so many other apps on flat

00:22:14,880 --> 00:22:18,400
hub um

00:22:16,080 --> 00:22:19,760
it only checks five percent of those so

00:22:18,400 --> 00:22:22,159
far

00:22:19,760 --> 00:22:22,799
um if you're wondering why this chart

00:22:22,159 --> 00:22:26,640
suggests

00:22:22,799 --> 00:22:28,960
there are almost 1 600 apps on flat hub

00:22:26,640 --> 00:22:31,520
whereas if you ask the flat pack command

00:22:28,960 --> 00:22:35,120
line to list the apps in flat hub and

00:22:31,520 --> 00:22:37,360
it will give you more like 1 200 um

00:22:35,120 --> 00:22:38,320
this is because the analysis is quite

00:22:37,360 --> 00:22:40,480
simplistic

00:22:38,320 --> 00:22:42,400
um i'm including end-of-life apps of

00:22:40,480 --> 00:22:44,640
which there are perhaps a few dozen

00:22:42,400 --> 00:22:45,760
but i'm also including runtimes and

00:22:44,640 --> 00:22:47,280
extensions

00:22:45,760 --> 00:22:48,480
and one thing i learned in the last

00:22:47,280 --> 00:22:49,679
couple of weeks is that there are more

00:22:48,480 --> 00:22:52,080
than 100

00:22:49,679 --> 00:22:55,039
um plugins for digital audio

00:22:52,080 --> 00:22:56,159
workstations on flat hub

00:22:55,039 --> 00:22:58,320
and i think it's reasonable to count

00:22:56,159 --> 00:23:00,080
those unfortunately those are all in the

00:22:58,320 --> 00:23:04,000
doesn't use the checker category

00:23:00,080 --> 00:23:06,880
so far anyway um personally i find

00:23:04,000 --> 00:23:08,480
these numbers pretty reassuring and i

00:23:06,880 --> 00:23:10,960
think it's reasonable to ask

00:23:08,480 --> 00:23:12,320
is it really desirable for flat hub to

00:23:10,960 --> 00:23:14,880
be publishing

00:23:12,320 --> 00:23:16,080
extra data wrappers for proprietary apps

00:23:14,880 --> 00:23:17,600
um

00:23:16,080 --> 00:23:19,760
even if you ignore the free software

00:23:17,600 --> 00:23:20,880
angle um i'm gonna quote from the flat

00:23:19,760 --> 00:23:23,280
hub websites

00:23:20,880 --> 00:23:24,159
that flat hub is primarily intended as a

00:23:23,280 --> 00:23:26,640
service

00:23:24,159 --> 00:23:27,280
which is used by app developers to

00:23:26,640 --> 00:23:30,480
distribute

00:23:27,280 --> 00:23:32,559
their apps and we would prefer that

00:23:30,480 --> 00:23:34,880
applications on flat hub are controlled

00:23:32,559 --> 00:23:37,520
by their authors

00:23:34,880 --> 00:23:38,159
so is this tool making it almost too

00:23:37,520 --> 00:23:41,679
easy

00:23:38,159 --> 00:23:42,320
to publish um either extra data wrappers

00:23:41,679 --> 00:23:43,919
or

00:23:42,320 --> 00:23:45,679
unofficial open source builds rather

00:23:43,919 --> 00:23:46,880
than encouraging the app developers

00:23:45,679 --> 00:23:49,279
themselves

00:23:46,880 --> 00:23:51,840
to publish their own apps directly to

00:23:49,279 --> 00:23:55,200
flat hub

00:23:51,840 --> 00:23:58,559
um so like flat hub as a whole i think

00:23:55,200 --> 00:24:01,600
i take a pragmatic start on this um

00:23:58,559 --> 00:24:03,279
there are some apps that people really

00:24:01,600 --> 00:24:06,400
do need to be able to run on their

00:24:03,279 --> 00:24:09,120
computers and the last year has shown us

00:24:06,400 --> 00:24:11,600
that running apps like zoom and

00:24:09,120 --> 00:24:13,360
microsoft teams and so on

00:24:11,600 --> 00:24:15,760
is for better or for worse it's not a

00:24:13,360 --> 00:24:18,559
matter of choice for a lot of people

00:24:15,760 --> 00:24:20,640
they need these apps to continue working

00:24:18,559 --> 00:24:22,559
or studying

00:24:20,640 --> 00:24:24,320
at least by distributing them with flat

00:24:22,559 --> 00:24:25,840
pack there's a chance that they are more

00:24:24,320 --> 00:24:26,799
tightly sandboxed than a traditional

00:24:25,840 --> 00:24:30,000
distro package

00:24:26,799 --> 00:24:32,559
would be and because flatby apps can be

00:24:30,000 --> 00:24:34,159
safely upgraded in the background

00:24:32,559 --> 00:24:34,960
automatically even when the app is

00:24:34,159 --> 00:24:37,840
running

00:24:34,960 --> 00:24:39,840
um if we can streamline and automate

00:24:37,840 --> 00:24:42,480
updating these apps on the server

00:24:39,840 --> 00:24:45,919
um then this potentially means that new

00:24:42,480 --> 00:24:46,240
versions reach the users more promptly

00:24:45,919 --> 00:24:48,080
and

00:24:46,240 --> 00:24:49,840
all those things i just described are

00:24:48,080 --> 00:24:51,360
obviously true for open source software

00:24:49,840 --> 00:24:54,400
as well which as we just saw

00:24:51,360 --> 00:24:56,480
is 95 of the software on flatlab

00:24:54,400 --> 00:24:58,320
and flatpack external data checker

00:24:56,480 --> 00:24:58,799
evidently helps many people to keep

00:24:58,320 --> 00:25:02,559
those

00:24:58,799 --> 00:25:05,120
apps up to date as well one

00:25:02,559 --> 00:25:05,600
very important class of software um

00:25:05,120 --> 00:25:07,679
where it

00:25:05,600 --> 00:25:09,360
which really needs to be kept up to date

00:25:07,679 --> 00:25:11,760
is web browsers

00:25:09,360 --> 00:25:12,880
and chromium for example has been on

00:25:11,760 --> 00:25:15,919
flat hub for about

00:25:12,880 --> 00:25:19,120
six months chromium has a very

00:25:15,919 --> 00:25:21,520
rapid major release cadence

00:25:19,120 --> 00:25:23,600
i think historically it's released every

00:25:21,520 --> 00:25:25,039
six weeks and i saw some news about them

00:25:23,600 --> 00:25:26,400
trying to increase that speed to

00:25:25,039 --> 00:25:29,039
releasing every four weeks

00:25:26,400 --> 00:25:29,520
soon and even given that it releases so

00:25:29,039 --> 00:25:31,600
often

00:25:29,520 --> 00:25:33,679
for new major versions it's pretty

00:25:31,600 --> 00:25:34,559
common to see one or more point releases

00:25:33,679 --> 00:25:37,919
in between

00:25:34,559 --> 00:25:40,559
and those almost always fix very serious

00:25:37,919 --> 00:25:43,039
security vulnerabilities

00:25:40,559 --> 00:25:43,679
the chromium repository on flat hub is

00:25:43,039 --> 00:25:45,360
naturally

00:25:43,679 --> 00:25:47,039
wired up to flat pack external data

00:25:45,360 --> 00:25:50,480
checker so

00:25:47,039 --> 00:25:51,760
when a new release appears of chromium

00:25:50,480 --> 00:25:53,840
published by chromium the chromium

00:25:51,760 --> 00:25:54,640
project a pull request is pretty quickly

00:25:53,840 --> 00:25:57,200
created

00:25:54,640 --> 00:25:58,240
and a test build is made by the flat hub

00:25:57,200 --> 00:26:01,679
ci

00:25:58,240 --> 00:26:03,200
um major upgrades of chromium tend to

00:26:01,679 --> 00:26:05,200
need manual intervention

00:26:03,200 --> 00:26:07,440
um because the flat hub version has a

00:26:05,200 --> 00:26:10,480
dozen or so patches to better integrate

00:26:07,440 --> 00:26:13,520
with flat pack um if we get lucky those

00:26:10,480 --> 00:26:15,360
build cleanly but often we don't but

00:26:13,520 --> 00:26:17,760
these point releases do tend to build

00:26:15,360 --> 00:26:20,080
cleanly um

00:26:17,760 --> 00:26:22,000
back when we used to have chromium as a

00:26:20,080 --> 00:26:23,520
distro package in endless os

00:26:22,000 --> 00:26:25,360
at any point released involved a

00:26:23,520 --> 00:26:27,039
developer manually rebasing the package

00:26:25,360 --> 00:26:30,000
in our stack of patches

00:26:27,039 --> 00:26:31,039
building it which takes hours um and

00:26:30,000 --> 00:26:32,480
then you test it

00:26:31,039 --> 00:26:34,559
and then you release it and then of

00:26:32,480 --> 00:26:37,360
course it was built into the os

00:26:34,559 --> 00:26:38,000
and the os is updated as a snapshot as a

00:26:37,360 --> 00:26:39,679
whole

00:26:38,000 --> 00:26:41,919
so we'd have to decide whether to adjust

00:26:39,679 --> 00:26:43,760
the os release schedule or delay getting

00:26:41,919 --> 00:26:47,120
the updates out to users

00:26:43,760 --> 00:26:49,760
so making the browser a flat pack has

00:26:47,120 --> 00:26:51,440
removed that last components and

00:26:49,760 --> 00:26:52,799
automating these updates has meant for a

00:26:51,440 --> 00:26:55,279
much better workflow

00:26:52,799 --> 00:26:56,559
um a chromium release is published a

00:26:55,279 --> 00:26:58,080
pull request appears

00:26:56,559 --> 00:26:59,440
a few hours later it still takes a while

00:26:58,080 --> 00:27:00,720
to build chromium even on a very

00:26:59,440 --> 00:27:02,000
powerful build server

00:27:00,720 --> 00:27:04,159
but a few hours later a test build

00:27:02,000 --> 00:27:06,640
appears and someone can test it

00:27:04,159 --> 00:27:08,000
and in the happy part they press merge

00:27:06,640 --> 00:27:10,799
and it goes out to users

00:27:08,000 --> 00:27:11,679
within a few hours potentially of being

00:27:10,799 --> 00:27:14,320
published

00:27:11,679 --> 00:27:16,080
um which is a much more responsive

00:27:14,320 --> 00:27:18,640
workflow

00:27:16,080 --> 00:27:20,000
um from the kind of first party app

00:27:18,640 --> 00:27:23,200
publisher perspective i

00:27:20,000 --> 00:27:24,480
publish a few of my own apps on flat hub

00:27:23,200 --> 00:27:26,000
and even in the case where i'm

00:27:24,480 --> 00:27:27,600
publishing my own app it's really nice

00:27:26,000 --> 00:27:29,679
to have a computer program

00:27:27,600 --> 00:27:31,600
do this boring work of updating a json

00:27:29,679 --> 00:27:33,679
file for for you

00:27:31,600 --> 00:27:34,880
i also somewhat maintain the flat packs

00:27:33,679 --> 00:27:38,159
for maybe a dozen

00:27:34,880 --> 00:27:39,200
more apps mostly open source and for

00:27:38,159 --> 00:27:41,279
example getting

00:27:39,200 --> 00:27:42,320
notified of a new upstream release of

00:27:41,279 --> 00:27:44,320
tux paint

00:27:42,320 --> 00:27:45,760
in the form of a pull request that i can

00:27:44,320 --> 00:27:49,440
easily test

00:27:45,760 --> 00:27:52,080
really makes this a lot more manageable

00:27:49,440 --> 00:27:52,799
of course there are other models of

00:27:52,080 --> 00:27:55,919
publishing

00:27:52,799 --> 00:27:57,600
new versions of apps into um a

00:27:55,919 --> 00:27:59,840
repository like flat hub which

00:27:57,600 --> 00:28:00,640
could work just as well or maybe even

00:27:59,840 --> 00:28:02,640
better

00:28:00,640 --> 00:28:04,159
um sticking with web browsers for the

00:28:02,640 --> 00:28:06,159
time being the

00:28:04,159 --> 00:28:07,600
firefox flat pack on flat hub comes

00:28:06,159 --> 00:28:10,399
directly from mozilla

00:28:07,600 --> 00:28:10,960
and rather than being built by flat hub

00:28:10,399 --> 00:28:13,039
it's

00:28:10,960 --> 00:28:14,559
the binary directly from mozilla which

00:28:13,039 --> 00:28:16,720
is pushed directly

00:28:14,559 --> 00:28:17,840
into flat hub by mozilla's release

00:28:16,720 --> 00:28:20,799
process

00:28:17,840 --> 00:28:21,360
so security updates for firefox hit flat

00:28:20,799 --> 00:28:22,880
hub

00:28:21,360 --> 00:28:25,200
the moment they're released by mozilla

00:28:22,880 --> 00:28:27,520
without any intervening delay

00:28:25,200 --> 00:28:31,120
um there are downsides to this model as

00:28:27,520 --> 00:28:32,799
well um there's less visibility for flat

00:28:31,120 --> 00:28:36,399
hub into how this app is built

00:28:32,799 --> 00:28:38,399
um but for apps like like like firefox

00:28:36,399 --> 00:28:39,840
um having the official official package

00:28:38,399 --> 00:28:42,960
and the official

00:28:39,840 --> 00:28:44,960
bytes of the binary built by mozilla

00:28:42,960 --> 00:28:47,200
pushed immediately into flat hub makes a

00:28:44,960 --> 00:28:49,200
lot of sense

00:28:47,200 --> 00:28:50,799
okay hopefully i've convinced you that

00:28:49,200 --> 00:28:51,679
this tool is useful to you as an app

00:28:50,799 --> 00:28:53,840
developer

00:28:51,679 --> 00:28:55,360
um or maybe you are submitting an extra

00:28:53,840 --> 00:28:57,039
data app to flat hub

00:28:55,360 --> 00:28:59,360
and you've discovered that this tool is

00:28:57,039 --> 00:29:00,399
mandatory okay how do you actually use

00:28:59,360 --> 00:29:02,320
it

00:29:00,399 --> 00:29:03,600
um the short version is you generally

00:29:02,320 --> 00:29:05,600
just need to add

00:29:03,600 --> 00:29:07,440
some special annotations to the app's

00:29:05,600 --> 00:29:10,080
manifest to tell

00:29:07,440 --> 00:29:11,200
the external data checker how to keep it

00:29:10,080 --> 00:29:12,880
up to date

00:29:11,200 --> 00:29:14,799
um it's got about a dozen different

00:29:12,880 --> 00:29:17,840
checkers for various scenarios

00:29:14,799 --> 00:29:18,399
um i won't describe them all here but i

00:29:17,840 --> 00:29:22,159
will give

00:29:18,399 --> 00:29:24,799
a few illustrative examples

00:29:22,159 --> 00:29:26,880
um in case you're not familiar with flat

00:29:24,799 --> 00:29:28,880
pack manifests most of what you see here

00:29:26,880 --> 00:29:32,080
is quite standard this is an excerpt

00:29:28,880 --> 00:29:32,640
um from a json file which tells flat

00:29:32,080 --> 00:29:35,120
pack

00:29:32,640 --> 00:29:37,520
how to build the zoom flat pack

00:29:35,120 --> 00:29:39,760
lowercase f applicator

00:29:37,520 --> 00:29:41,679
and this section is the extra data

00:29:39,760 --> 00:29:44,159
source for zoom itself

00:29:41,679 --> 00:29:45,279
it tells flat pack that it's an extra

00:29:44,159 --> 00:29:47,760
data file

00:29:45,279 --> 00:29:49,200
and that it's only available for 64-bit

00:29:47,760 --> 00:29:51,600
intel platforms

00:29:49,200 --> 00:29:52,240
um it has the url from which you can

00:29:51,600 --> 00:29:55,520
download

00:29:52,240 --> 00:29:56,799
the file it has the sum expected and it

00:29:55,520 --> 00:30:00,000
has its size

00:29:56,799 --> 00:30:02,960
um and this x x checker data section

00:30:00,000 --> 00:30:04,080
is specific to flat pack external data

00:30:02,960 --> 00:30:05,679
checker and it's in

00:30:04,080 --> 00:30:07,520
it's ignored by flat pack builder when

00:30:05,679 --> 00:30:11,360
it's building the flat pack

00:30:07,520 --> 00:30:14,480
so in this case zoom has a magic url

00:30:11,360 --> 00:30:17,200
which is zoomed out a magic url

00:30:14,480 --> 00:30:19,520
which always redirects to the latest

00:30:17,200 --> 00:30:21,600
version of the app

00:30:19,520 --> 00:30:24,640
so in this x checker data section we

00:30:21,600 --> 00:30:27,440
tell the tool to use the rotating url

00:30:24,640 --> 00:30:29,600
checker which expects this behavior of

00:30:27,440 --> 00:30:32,320
one url which redirects to the

00:30:29,600 --> 00:30:33,760
real url for the app and we provide a

00:30:32,320 --> 00:30:36,799
regular expression

00:30:33,760 --> 00:30:38,159
with a match group here which extracts

00:30:36,799 --> 00:30:41,440
the version number

00:30:38,159 --> 00:30:43,120
from that target url and that's all the

00:30:41,440 --> 00:30:46,000
configuration that's needed

00:30:43,120 --> 00:30:47,279
every hour flat hub runs the checker on

00:30:46,000 --> 00:30:50,480
this repo

00:30:47,279 --> 00:30:51,760
and the checker will hold this url find

00:30:50,480 --> 00:30:53,600
out what it redirects to

00:30:51,760 --> 00:30:54,799
and if it finds an update it will open a

00:30:53,600 --> 00:30:57,120
pull request

00:30:54,799 --> 00:30:58,320
and because we told it how to extract

00:30:57,120 --> 00:31:00,159
the version number

00:30:58,320 --> 00:31:04,159
as we saw earlier it can also update the

00:31:00,159 --> 00:31:06,399
app data file in the repository

00:31:04,159 --> 00:31:08,640
um here's another example this time

00:31:06,399 --> 00:31:10,880
using yaml syntax the two too

00:31:08,640 --> 00:31:12,720
interchangeable for flatpack manifests

00:31:10,880 --> 00:31:14,080
and this is for unity hub which is an

00:31:12,720 --> 00:31:17,039
app that can be used

00:31:14,080 --> 00:31:19,519
to in turn download and run unity which

00:31:17,039 --> 00:31:22,960
is a popular game development platform

00:31:19,519 --> 00:31:25,440
uh unity hub is distributed by unity

00:31:22,960 --> 00:31:27,120
only as an app image file which funnily

00:31:25,440 --> 00:31:30,720
enough is a competing laptop

00:31:27,120 --> 00:31:32,320
linux app distribution tool here we are

00:31:30,720 --> 00:31:34,480
flat pack external daily checker has

00:31:32,320 --> 00:31:36,480
special handling for app image files

00:31:34,480 --> 00:31:38,320
um in particular it knows how to unpack

00:31:36,480 --> 00:31:39,919
them and look inside to work out what

00:31:38,320 --> 00:31:42,960
the version number is

00:31:39,919 --> 00:31:45,360
um and unity hub is actually an example

00:31:42,960 --> 00:31:47,120
of the situation i described earlier

00:31:45,360 --> 00:31:49,200
each new version of the app is published

00:31:47,120 --> 00:31:51,279
at the same url as the old one

00:31:49,200 --> 00:31:53,039
so each time a new version of unity hub

00:31:51,279 --> 00:31:55,200
is released the flat pack

00:31:53,039 --> 00:31:56,320
immediately stops being installable

00:31:55,200 --> 00:31:59,679
until we update

00:31:56,320 --> 00:32:00,399
its manifest on flat hub when we first

00:31:59,679 --> 00:32:02,880
added

00:32:00,399 --> 00:32:03,919
unityhub to flathub we forgot to add

00:32:02,880 --> 00:32:06,799
this app to the big

00:32:03,919 --> 00:32:07,679
endless job that's uh checked uh

00:32:06,799 --> 00:32:09,440
flatpacks

00:32:07,679 --> 00:32:11,840
and the app broke almost immediately and

00:32:09,440 --> 00:32:15,360
we didn't notice for a few days

00:32:11,840 --> 00:32:18,240
so generally a human being is expected

00:32:15,360 --> 00:32:19,600
to actually test each update before

00:32:18,240 --> 00:32:21,519
publishing it on flatlab

00:32:19,600 --> 00:32:23,760
and so in the normal case the external

00:32:21,519 --> 00:32:25,360
data checker just opens a pull request

00:32:23,760 --> 00:32:25,760
and it waits for a human being to come

00:32:25,360 --> 00:32:28,320
along

00:32:25,760 --> 00:32:29,600
and test it and merge it but in this

00:32:28,320 --> 00:32:31,519
case

00:32:29,600 --> 00:32:33,360
it can it can tell that the existing

00:32:31,519 --> 00:32:35,840
version is broken because it's the same

00:32:33,360 --> 00:32:37,919
url with a new checksum

00:32:35,840 --> 00:32:39,519
and so it will automatically merge its

00:32:37,919 --> 00:32:42,320
own pull request provided

00:32:39,519 --> 00:32:44,159
that the ci checks which get that the

00:32:42,320 --> 00:32:48,159
manifest is well formed and builds

00:32:44,159 --> 00:32:49,679
pass um so the the silver lining here is

00:32:48,159 --> 00:32:50,240
that there's no configuration needed at

00:32:49,679 --> 00:32:52,960
all

00:32:50,240 --> 00:32:53,840
um the checker has special handling for

00:32:52,960 --> 00:32:56,399
app image

00:32:53,840 --> 00:32:57,279
um it runs on this repository it fetches

00:32:56,399 --> 00:32:59,200
this url

00:32:57,279 --> 00:33:01,519
if it finds that it's shar sum and size

00:32:59,200 --> 00:33:04,159
have changed it sends a pull request

00:33:01,519 --> 00:33:05,919
and then the next time it runs it will

00:33:04,159 --> 00:33:07,039
check in on its own pull requests and if

00:33:05,919 --> 00:33:09,039
the ci has passed

00:33:07,039 --> 00:33:11,360
it merges it no extra configuration

00:33:09,039 --> 00:33:13,519
needed at all

00:33:11,360 --> 00:33:15,279
um i mentioned earlier that gas and vein

00:33:13,519 --> 00:33:17,600
added a back end for

00:33:15,279 --> 00:33:18,720
release monitoring.org which is also

00:33:17,600 --> 00:33:21,600
known as anita

00:33:18,720 --> 00:33:22,960
and it's maintained by fedora i think so

00:33:21,600 --> 00:33:24,480
if you're the developer of an open

00:33:22,960 --> 00:33:25,039
source flat pack application or you

00:33:24,480 --> 00:33:26,480
maintain

00:33:25,039 --> 00:33:29,039
a flat pack for one this could be

00:33:26,480 --> 00:33:31,120
particularly interesting for you

00:33:29,039 --> 00:33:32,480
this is the example of how that's used

00:33:31,120 --> 00:33:35,120
for the chromium flat pack

00:33:32,480 --> 00:33:36,480
um we need to give it a numeric id for

00:33:35,120 --> 00:33:38,080
the project which you can find

00:33:36,480 --> 00:33:39,840
from the release releasemonitoring.org

00:33:38,080 --> 00:33:41,600
website and

00:33:39,840 --> 00:33:43,279
tell it to only get stable versions of

00:33:41,600 --> 00:33:46,640
chromium and provide it

00:33:43,279 --> 00:33:49,679
a template to how to for how to

00:33:46,640 --> 00:33:51,919
build a url for a given version

00:33:49,679 --> 00:33:53,039
um and that's that's all the

00:33:51,919 --> 00:33:54,559
configuration

00:33:53,039 --> 00:33:56,399
and the only other difference here you

00:33:54,559 --> 00:33:58,799
may have noticed is that the source

00:33:56,399 --> 00:33:59,840
is of type archive it's not of type

00:33:58,799 --> 00:34:03,360
extra data

00:33:59,840 --> 00:34:04,720
so this is because the this component is

00:34:03,360 --> 00:34:07,679
downloaded and compiled

00:34:04,720 --> 00:34:09,280
at build time on flat packs flat hubs

00:34:07,679 --> 00:34:10,240
build server rather than on the end user

00:34:09,280 --> 00:34:12,879
system

00:34:10,240 --> 00:34:13,520
chromium is a normal flat pack and there

00:34:12,879 --> 00:34:16,480
are similar

00:34:13,520 --> 00:34:20,639
checkers for gnome components and pipi

00:34:16,480 --> 00:34:22,000
packages and rust packages and so on um

00:34:20,639 --> 00:34:23,359
here's a slightly more complicated

00:34:22,000 --> 00:34:24,879
example i mentioned earlier that

00:34:23,359 --> 00:34:28,399
telegram is the motivation

00:34:24,879 --> 00:34:29,119
for um a more more general purpose json

00:34:28,399 --> 00:34:31,760
plugin

00:34:29,119 --> 00:34:33,679
there are four inputs to the checker in

00:34:31,760 --> 00:34:34,560
this example there's the url of the json

00:34:33,679 --> 00:34:37,440
file

00:34:34,560 --> 00:34:39,040
and there is three query expressions

00:34:37,440 --> 00:34:39,919
which tell the checker how to find the

00:34:39,040 --> 00:34:42,320
git tag

00:34:39,919 --> 00:34:44,000
the timestamp at which it was made and

00:34:42,320 --> 00:34:45,200
how to parse that tag to work out the

00:34:44,000 --> 00:34:46,960
version

00:34:45,200 --> 00:34:48,480
these are using the syntax of the

00:34:46,960 --> 00:34:50,960
popular jq

00:34:48,480 --> 00:34:52,800
json processing tool um which the

00:34:50,960 --> 00:34:54,960
checker actually uses internally to

00:34:52,800 --> 00:34:56,879
do this you might hope that you can

00:34:54,960 --> 00:34:59,200
handle git tags unfortunately

00:34:56,879 --> 00:35:00,240
automatically um but it's not always

00:34:59,200 --> 00:35:03,760
that simple

00:35:00,240 --> 00:35:05,200
um for various tedious reasons um

00:35:03,760 --> 00:35:07,040
but the json checker is a really

00:35:05,200 --> 00:35:09,359
powerful tool that can be used for

00:35:07,040 --> 00:35:10,400
all kinds of sources not just releases

00:35:09,359 --> 00:35:12,640
on github

00:35:10,400 --> 00:35:13,680
um having said that there are some cases

00:35:12,640 --> 00:35:14,880
when you you can

00:35:13,680 --> 00:35:16,960
just handle git tags more

00:35:14,880 --> 00:35:18,480
straightforwardly um so this is an

00:35:16,960 --> 00:35:19,760
example of updating a dependency rather

00:35:18,480 --> 00:35:21,760
than the app itself

00:35:19,760 --> 00:35:23,680
um it's from reminer which is an open

00:35:21,760 --> 00:35:25,200
source remote desktop plan with many

00:35:23,680 --> 00:35:26,800
many dependencies

00:35:25,200 --> 00:35:28,640
most of which have the right annotations

00:35:26,800 --> 00:35:30,480
to be automatically updated

00:35:28,640 --> 00:35:31,839
so here's an example which checks for

00:35:30,480 --> 00:35:34,960
new git tags

00:35:31,839 --> 00:35:36,079
matching a regular expression in the

00:35:34,960 --> 00:35:39,200
repository for

00:35:36,079 --> 00:35:40,640
this dependency of this app and there

00:35:39,200 --> 00:35:42,800
are some rare occasions

00:35:40,640 --> 00:35:44,960
when you actually want the checker to

00:35:42,800 --> 00:35:47,680
automatically merge its own pull request

00:35:44,960 --> 00:35:48,640
um there's a flathead better repository

00:35:47,680 --> 00:35:50,560
which contains

00:35:48,640 --> 00:35:51,920
beta repository which contains apps

00:35:50,560 --> 00:35:54,480
which for whatever reason

00:35:51,920 --> 00:35:56,320
aren't for general consumption and the

00:35:54,480 --> 00:35:58,320
unstable channel of visual studio code

00:35:56,320 --> 00:35:59,839
is published there the insider's built

00:35:58,320 --> 00:36:01,520
and the whole point of that build is

00:35:59,839 --> 00:36:02,400
that you want to get early access to

00:36:01,520 --> 00:36:04,079
features

00:36:02,400 --> 00:36:05,280
and stuff that might be broken and so

00:36:04,079 --> 00:36:06,640
again it's worth the risk of the

00:36:05,280 --> 00:36:09,280
occasional broken version

00:36:06,640 --> 00:36:09,680
of the app together automatically and so

00:36:09,280 --> 00:36:11,680
the

00:36:09,680 --> 00:36:13,119
vs code insider's build opts into that

00:36:11,680 --> 00:36:14,880
auto emerging behavior

00:36:13,119 --> 00:36:16,880
even in the case where the old version

00:36:14,880 --> 00:36:22,079
works fine by setting a file

00:36:16,880 --> 00:36:24,400
in the flathub.json file in the wrapper

00:36:22,079 --> 00:36:25,200
how do you actually test it yourself

00:36:24,400 --> 00:36:26,560
rather than

00:36:25,200 --> 00:36:27,839
you could just edit the file push the

00:36:26,560 --> 00:36:29,040
flat hub and wake up wait an hour and

00:36:27,839 --> 00:36:29,680
see what happens but you can run the

00:36:29,040 --> 00:36:32,240
tool

00:36:29,680 --> 00:36:33,920
uh very simply yourself um it's

00:36:32,240 --> 00:36:35,520
published as a flat pack on flower hub

00:36:33,920 --> 00:36:36,560
and of course it keeps itself up to date

00:36:35,520 --> 00:36:39,760
automatically

00:36:36,560 --> 00:36:41,280
um it's not visible in front ends like

00:36:39,760 --> 00:36:42,400
um software so you need to install it

00:36:41,280 --> 00:36:44,880
from the command line

00:36:42,400 --> 00:36:47,040
um and having done that you need to pass

00:36:44,880 --> 00:36:47,760
it the right arguments to give it access

00:36:47,040 --> 00:36:49,680
to

00:36:47,760 --> 00:36:51,359
the manifest file it's going to update

00:36:49,680 --> 00:36:52,560
by default it can't touch your file

00:36:51,359 --> 00:36:54,640
system at all

00:36:52,560 --> 00:36:55,680
um also by default it just prints out

00:36:54,640 --> 00:36:57,280
what it would like to do

00:36:55,680 --> 00:36:59,440
and there's an edit only flag which

00:36:57,280 --> 00:37:01,359
tells it to

00:36:59,440 --> 00:37:02,800
write the changes back to your working

00:37:01,359 --> 00:37:03,920
copy but not actually commit them or

00:37:02,800 --> 00:37:05,440
open a pull request

00:37:03,920 --> 00:37:07,040
um there are other flags you can find

00:37:05,440 --> 00:37:08,960
with the

00:37:07,040 --> 00:37:10,160
help um to tell her to do different

00:37:08,960 --> 00:37:12,160
things

00:37:10,160 --> 00:37:13,520
if for some reason you prefer docker or

00:37:12,160 --> 00:37:15,760
podman um

00:37:13,520 --> 00:37:17,119
maybe you want to run it in jenkins um

00:37:15,760 --> 00:37:17,920
it's also available as a docker

00:37:17,119 --> 00:37:20,079
container

00:37:17,920 --> 00:37:22,079
in the github container registry and

00:37:20,079 --> 00:37:24,079
which works pretty similarly

00:37:22,079 --> 00:37:25,599
and for developments there's also a

00:37:24,079 --> 00:37:26,320
docker file in the repository and that

00:37:25,599 --> 00:37:27,920
might be helpful

00:37:26,320 --> 00:37:29,599
if you want to get involved in

00:37:27,920 --> 00:37:31,280
developing it so

00:37:29,599 --> 00:37:33,359
speaking of which here's where it lives

00:37:31,280 --> 00:37:36,000
um there are some future plans

00:37:33,359 --> 00:37:36,560
kind of fuzzy um i mentioned earlier

00:37:36,000 --> 00:37:39,920
that

00:37:36,560 --> 00:37:41,920
um for node and

00:37:39,920 --> 00:37:44,560
python apps there are often very very

00:37:41,920 --> 00:37:45,920
large automatically generated manifests

00:37:44,560 --> 00:37:47,680
it would be interesting to teach this

00:37:45,920 --> 00:37:48,480
tool to automatically update those as

00:37:47,680 --> 00:37:50,880
well

00:37:48,480 --> 00:37:52,960
um you could also conceivably teach this

00:37:50,880 --> 00:37:54,640
tool to automatically update the runtime

00:37:52,960 --> 00:37:56,880
that the app uses

00:37:54,640 --> 00:37:58,560
um so there are plenty of ways you could

00:37:56,880 --> 00:38:00,240
get involved in contributing

00:37:58,560 --> 00:38:01,920
to the tool but perhaps the most obvious

00:38:00,240 --> 00:38:03,680
one is to start using it yourself

00:38:01,920 --> 00:38:06,079
and give feedback on how it works for

00:38:03,680 --> 00:38:08,160
you and if you're keen on writing

00:38:06,079 --> 00:38:10,560
documentation the perspective of a new

00:38:08,160 --> 00:38:12,480
user is always very very valuable

00:38:10,560 --> 00:38:14,560
um you could also contribute checkers

00:38:12,480 --> 00:38:16,839
for new software sources or maybe add

00:38:14,560 --> 00:38:19,200
some magic to some of the existing ones

00:38:16,839 --> 00:38:20,560
um and actually over the course of this

00:38:19,200 --> 00:38:22,800
talk i've realized that saying

00:38:20,560 --> 00:38:24,720
flat pack external data checker over and

00:38:22,800 --> 00:38:26,560
over again is quite clumsy

00:38:24,720 --> 00:38:28,960
so maybe you can think of a snap your

00:38:26,560 --> 00:38:32,400
name and a cool logo and that would be

00:38:28,960 --> 00:38:34,000
great stuff as well um

00:38:32,400 --> 00:38:35,359
that's all i have today uh thanks again

00:38:34,000 --> 00:38:36,240
to everyone who's contributed to this

00:38:35,359 --> 00:38:37,920
tool

00:38:36,240 --> 00:38:39,599
over its lifetime it's come a very long

00:38:37,920 --> 00:38:40,960
way from a bash script on a private

00:38:39,599 --> 00:38:43,760
jenkins instance

00:38:40,960 --> 00:38:45,359
um the code i use to generate these

00:38:43,760 --> 00:38:49,119
graphs is at this

00:38:45,359 --> 00:38:49,119
um any questions

00:38:51,680 --> 00:38:55,520
yeah hello uh well we have some

00:38:53,680 --> 00:38:58,240
questions in the shared notes if you

00:38:55,520 --> 00:39:00,400
i i can read it for you so first

00:38:58,240 --> 00:39:02,320
question is

00:39:00,400 --> 00:39:04,240
can this tool be used to automatically

00:39:02,320 --> 00:39:05,520
update the runtime to use so we can

00:39:04,240 --> 00:39:08,400
avoid apps

00:39:05,520 --> 00:39:09,040
using deprecated genome kde or free

00:39:08,400 --> 00:39:12,400
desktop

00:39:09,040 --> 00:39:15,520
sdk etc and times great question

00:39:12,400 --> 00:39:16,400
uh yes as i i just mentioned the answer

00:39:15,520 --> 00:39:19,520
is no today

00:39:16,400 --> 00:39:23,440
it only updates um

00:39:19,520 --> 00:39:27,359
components of the app itself um

00:39:23,440 --> 00:39:29,200
updating the runtime is a

00:39:27,359 --> 00:39:30,480
seems like a nice feature that to add

00:39:29,200 --> 00:39:32,079
particularly given we have all of the

00:39:30,480 --> 00:39:34,800
infrastructure in place

00:39:32,079 --> 00:39:36,160
to run the tool check every repo open

00:39:34,800 --> 00:39:39,760
pull requests and so on

00:39:36,160 --> 00:39:41,200
um i i think

00:39:39,760 --> 00:39:44,079
the key word in that question is that

00:39:41,200 --> 00:39:44,480
it's deprecated my personal position on

00:39:44,079 --> 00:39:46,240
this

00:39:44,480 --> 00:39:47,760
is that as long as a runtime is

00:39:46,240 --> 00:39:49,520
supported it's fine for apps to keep

00:39:47,760 --> 00:39:53,040
using it

00:39:49,520 --> 00:39:56,560
but certainly there are many many apps

00:39:53,040 --> 00:39:58,160
kicking around which every year they

00:39:56,560 --> 00:40:00,079
they roll onto an unsupported runtime

00:39:58,160 --> 00:40:03,119
and having automation to update that

00:40:00,079 --> 00:40:04,880
uh would be a great start and often they

00:40:03,119 --> 00:40:07,119
build cleanly right so you can just test

00:40:04,880 --> 00:40:10,400
and merge just like everything else

00:40:07,119 --> 00:40:12,240
um the second question i see is can we

00:40:10,400 --> 00:40:16,720
use this tool to automate

00:40:12,240 --> 00:40:20,400
update gnome kde table in manifest

00:40:16,720 --> 00:40:24,000
the short answer is yes um

00:40:20,400 --> 00:40:26,400
in the specific case of gnome there is a

00:40:24,000 --> 00:40:28,160
gnome specific checker which knows how

00:40:26,400 --> 00:40:31,520
to contact the gnome

00:40:28,160 --> 00:40:32,319
download server and pass an index which

00:40:31,520 --> 00:40:36,720
is on there

00:40:32,319 --> 00:40:39,839
of available versions of the components

00:40:36,720 --> 00:40:40,400
it has some special handling for the odd

00:40:39,839 --> 00:40:43,599
even

00:40:40,400 --> 00:40:45,680
numbering convention that gnome has used

00:40:43,599 --> 00:40:47,119
prior to gnm40 and it has special

00:40:45,680 --> 00:40:50,319
handling of the

00:40:47,119 --> 00:40:52,240
dot alpha.beta.rc um convention that's

00:40:50,319 --> 00:40:54,319
used from gnome 40 onwards

00:40:52,240 --> 00:40:55,920
um you can switch this off for

00:40:54,319 --> 00:40:59,200
components that

00:40:55,920 --> 00:41:01,200
don't follow that naming convention

00:40:59,200 --> 00:41:02,480
if you want an example of this the

00:41:01,200 --> 00:41:04,800
defeat

00:41:02,480 --> 00:41:07,119
debuss inspector tool which is on flat

00:41:04,800 --> 00:41:09,040
hub um i recently updated that

00:41:07,119 --> 00:41:10,319
to use the gnome checker to update

00:41:09,040 --> 00:41:12,079
itself

00:41:10,319 --> 00:41:13,440
um and that's a case where i had to

00:41:12,079 --> 00:41:15,920
disable the

00:41:13,440 --> 00:41:18,839
um version the special handling of odd

00:41:15,920 --> 00:41:20,800
versions because it's version 0.3 point

00:41:18,839 --> 00:41:23,280
something uh kde

00:41:20,800 --> 00:41:24,079
i don't believe there is a dedicated kde

00:41:23,280 --> 00:41:26,720
checker

00:41:24,079 --> 00:41:28,319
if there is some way to use the one of

00:41:26,720 --> 00:41:30,160
the existing checkers to find new

00:41:28,319 --> 00:41:32,240
versions then it can certainly be used

00:41:30,160 --> 00:41:34,000
there's a checker which can scrape

00:41:32,240 --> 00:41:37,200
random html pages

00:41:34,000 --> 00:41:39,599
and the json one is

00:41:37,200 --> 00:41:41,359
a pretty good starting point for um

00:41:39,599 --> 00:41:44,079
checking for arbitrary

00:41:41,359 --> 00:41:45,520
components for most pieces of software

00:41:44,079 --> 00:41:46,560
there's a json file somewhere which

00:41:45,520 --> 00:41:48,960
tells you about it

00:41:46,560 --> 00:41:50,079
so yes you can and please go ahead and

00:41:48,960 --> 00:41:56,400
do so and if

00:41:50,079 --> 00:41:56,400

YouTube URL: https://www.youtube.com/watch?v=c_dG_ngnJk4


