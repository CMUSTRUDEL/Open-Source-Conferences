Title: 15 cool things you didn't know you could do with snaps
Publication date: 2021-05-30
Playlist: Linux App Summit 2021 Talks
Description: 
	You must have heard about snaps, perhaps even used them. But have you fully explored and discovered the powers of the snap ecosystem?

In this talk, we will show you some neat tips and tricks and best practices on how to develop and use snaps, with maximum efficiency and speed. There will be something for everyone, from a developer just starting with snaps to diehard veterans with many a snapcraft.yaml under their digital belt. We will also unveil a few handy secrets for snap users, so you can have a fun, productive experience.



Author(s) Bio

Igor Ljubuncic is a physicist by vocation and a Linux geek by profession. He works as a developer advocate at Canonical, and comes with many years of experience in the industry, including medical, high-performance computing, data center, cloud, and hosting fields. To date, Igorâ€™s portfolio includes 18 books, 15 patents, several open-source projects, numerous articles published in leading journals and magazines, and presentations at prestigious international conferences like LinuxCon, CloudOpen, OpenStack days, IEEE events, and others. In his free time, Igor writes car reviews, fantasy novels and manages his award-winning blog.


Q&A


1. Do parallel instalations isolate instance app configurations?

2. Will it be possible to configure refreshing from the store GUI, or the updates app, or the repositories, to make it more friendly for newbies?

3. Can we force snapshots on any snap?

4. Does Debian also have such system/feature? The Snapshots. Yes, ty

5. what will happen if different users install the same snap? will different snaps will be installed? 

6. Can you use the "home" interface to give each snap its own home directory, mapping to an arbitrary location in the filesystem?

7. what containerization tools are used in SNAP (ex. bubblewrap in flatpak)

8. What's the status of snap support across distros?

9. Aww, nobody uses Fedora on the team anymore? :'(

10. Other distribution bases for snaps possible?
freedesktop-sdk has been working with snap team to make this possible but we are not there yet, I think this is the thread; https://forum.snapcraft.io/t/base-runtime-freedesktop-sdk-runtime-19-08/11153

11. what's your favourite experimental feature?

12. Do you know if there's some chance of Fedora Silverblue supporting snaps? (Classic snaps use /snap, which is forbidden by RPM-OSTree, regular confined snaps work fine)

13. how can we make sure developers update dependencies for security?
Captions: 
	00:00:00,880 --> 00:00:05,920
uh welcome to the presentation

00:00:03,120 --> 00:00:07,279
my name is igor impossible last night uh

00:00:05,920 --> 00:00:09,200
i work at canonical

00:00:07,279 --> 00:00:10,400
i'm a developer advocate at a snapchat

00:00:09,200 --> 00:00:12,799
on the snapcraft team

00:00:10,400 --> 00:00:14,559
and today i want to talk to you about

00:00:12,799 --> 00:00:17,359
some interesting things that can help

00:00:14,559 --> 00:00:18,160
your life either as a developer or an

00:00:17,359 --> 00:00:22,080
end

00:00:18,160 --> 00:00:25,439
user so

00:00:22,080 --> 00:00:28,080
okay i will stop sharing my screen

00:00:25,439 --> 00:00:29,599
and i will control the slides using the

00:00:28,080 --> 00:00:32,160
built-in feature so i just have to

00:00:29,599 --> 00:00:35,760
figure out how to move slides

00:00:32,160 --> 00:00:39,520
um okay excellent sweet

00:00:35,760 --> 00:00:42,160
thank you um so back to the presentation

00:00:39,520 --> 00:00:43,760
thank you alison for that

00:00:42,160 --> 00:00:45,039
back to the presentation so i want to

00:00:43,760 --> 00:00:46,399
talk to you about some interesting

00:00:45,039 --> 00:00:49,200
things that will

00:00:46,399 --> 00:00:50,000
help you uh use snaps either as a

00:00:49,200 --> 00:00:52,559
developer

00:00:50,000 --> 00:00:53,360
or as an end user you may know some of

00:00:52,559 --> 00:00:56,239
these things

00:00:53,360 --> 00:00:57,440
so apologies in advance if things look

00:00:56,239 --> 00:00:59,760
familiar

00:00:57,440 --> 00:01:01,199
the other thing to take into account is

00:00:59,760 --> 00:01:03,280
if i move through

00:01:01,199 --> 00:01:05,199
some of the topics quickly and you have

00:01:03,280 --> 00:01:07,119
questions please ask them

00:01:05,199 --> 00:01:09,040
also all of the stuff that i'm going to

00:01:07,119 --> 00:01:11,840
review is documented

00:01:09,040 --> 00:01:12,560
on our documentation and i have written

00:01:11,840 --> 00:01:15,040
blog posts

00:01:12,560 --> 00:01:16,880
about most of these topics in detail

00:01:15,040 --> 00:01:20,479
with examples

00:01:16,880 --> 00:01:22,560
that said a little more about myself

00:01:20,479 --> 00:01:24,560
as i said i work as a developer advocate

00:01:22,560 --> 00:01:27,840
i've been using linux for

00:01:24,560 --> 00:01:29,600
roughly two decades now doing it for fun

00:01:27,840 --> 00:01:31,920
for passion and work

00:01:29,600 --> 00:01:33,600
i happen to write books that is my

00:01:31,920 --> 00:01:35,280
second big passion

00:01:33,600 --> 00:01:36,720
and the third one as you can probably

00:01:35,280 --> 00:01:39,680
guess looking at the

00:01:36,720 --> 00:01:41,360
image is i like to drive fast cars on

00:01:39,680 --> 00:01:43,520
racetracks around the world

00:01:41,360 --> 00:01:45,280
the kovit situation has made that a bit

00:01:43,520 --> 00:01:49,119
more complicated but

00:01:45,280 --> 00:01:50,240
i'm trying my best that said let's go

00:01:49,119 --> 00:01:53,520
with the first

00:01:50,240 --> 00:01:55,920
trick so when you develop snaps

00:01:53,520 --> 00:01:57,360
you have two options to use different

00:01:55,920 --> 00:01:59,439
back ends

00:01:57,360 --> 00:02:02,000
for development basically snaps will be

00:01:59,439 --> 00:02:04,320
built inside contained environments

00:02:02,000 --> 00:02:05,439
so that you don't pollute or change your

00:02:04,320 --> 00:02:08,080
underlying system

00:02:05,439 --> 00:02:08,720
on which you build you have two options

00:02:08,080 --> 00:02:11,280
you can use

00:02:08,720 --> 00:02:12,480
virtual machines with multi-plus as the

00:02:11,280 --> 00:02:14,239
driving engine

00:02:12,480 --> 00:02:16,959
or you can use lightweight containers

00:02:14,239 --> 00:02:19,760
with lxd as a driving engine

00:02:16,959 --> 00:02:20,480
if you have a virtualized environment

00:02:19,760 --> 00:02:22,879
yourself

00:02:20,480 --> 00:02:24,160
in which you developed you may find it a

00:02:22,879 --> 00:02:24,879
little bit more difficult to use

00:02:24,160 --> 00:02:28,080
multipass

00:02:24,879 --> 00:02:28,879
due to a potential nesting to work

00:02:28,080 --> 00:02:31,440
around this

00:02:28,879 --> 00:02:33,040
you can use lxd with a special switch

00:02:31,440 --> 00:02:35,519
which allows you then to build

00:02:33,040 --> 00:02:37,440
snaps inside virtual machines so we have

00:02:35,519 --> 00:02:39,360
an inception situation basically

00:02:37,440 --> 00:02:41,200
a virtual machine container inside a

00:02:39,360 --> 00:02:41,840
virtual machine and of course you can

00:02:41,200 --> 00:02:43,360
try

00:02:41,840 --> 00:02:46,000
to see how deep you can go before the

00:02:43,360 --> 00:02:48,480
system explodes

00:02:46,000 --> 00:02:49,280
remote build this has been brought up

00:02:48,480 --> 00:02:52,800
yesterday

00:02:49,280 --> 00:02:54,640
during our office hour

00:02:52,800 --> 00:02:55,840
and the question was is it possible to

00:02:54,640 --> 00:02:59,280
cross compile

00:02:55,840 --> 00:03:02,560
snaps the answer is no

00:02:59,280 --> 00:03:04,080
but and that is the the option to

00:03:02,560 --> 00:03:06,640
actually use remote build

00:03:04,080 --> 00:03:07,440
functionality you can send your project

00:03:06,640 --> 00:03:10,480
to launch

00:03:07,440 --> 00:03:12,239
launchpad and launchpad will build for

00:03:10,480 --> 00:03:14,959
six different architectures which you

00:03:12,239 --> 00:03:17,200
don't may not have necessarily locally

00:03:14,959 --> 00:03:18,959
you basically need just your launchpad

00:03:17,200 --> 00:03:20,480
token to authenticate

00:03:18,959 --> 00:03:22,720
and after that your project will be

00:03:20,480 --> 00:03:22,720
built

00:03:22,800 --> 00:03:26,720
this is quite useful if you want to

00:03:24,400 --> 00:03:29,920
target stay arm or you want to target

00:03:26,720 --> 00:03:31,360
something like s39 ibm s390 or other

00:03:29,920 --> 00:03:32,560
things that you may not necessarily have

00:03:31,360 --> 00:03:35,120
in your uh

00:03:32,560 --> 00:03:36,720
architecture portfolio of course you

00:03:35,120 --> 00:03:38,400
still need to test your snaps you have

00:03:36,720 --> 00:03:40,159
to make sure that the libraries you have

00:03:38,400 --> 00:03:41,200
selected and that your application logic

00:03:40,159 --> 00:03:42,159
can function on these other

00:03:41,200 --> 00:03:45,760
architectures

00:03:42,159 --> 00:03:48,640
but this can greatly simplify your work

00:03:45,760 --> 00:03:48,959
the one caveat is that your project will

00:03:48,640 --> 00:03:50,480
be

00:03:48,959 --> 00:03:52,319
public in the sense that it will be

00:03:50,480 --> 00:03:53,439
available and visible on launchpad so if

00:03:52,319 --> 00:03:55,599
you have a closed source

00:03:53,439 --> 00:03:57,840
application you probably shouldn't use

00:03:55,599 --> 00:03:57,840
this

00:03:58,319 --> 00:04:03,040
okay shell after if you're developing a

00:04:02,480 --> 00:04:05,840
snap

00:04:03,040 --> 00:04:06,879
and you want to see how it behaves after

00:04:05,840 --> 00:04:10,400
it's been built

00:04:06,879 --> 00:04:12,879
you can use uh shell after to step into

00:04:10,400 --> 00:04:14,400
into the snap build environment world

00:04:12,879 --> 00:04:17,040
and see what happens there

00:04:14,400 --> 00:04:18,479
this way you will have access to snap

00:04:17,040 --> 00:04:20,959
environment variables

00:04:18,479 --> 00:04:21,840
you will have access to the build

00:04:20,959 --> 00:04:23,520
structure

00:04:21,840 --> 00:04:26,160
and be able to inspect different bits

00:04:23,520 --> 00:04:27,600
and pieces this can be quite useful

00:04:26,160 --> 00:04:29,919
if you're trying to troubleshoot an

00:04:27,600 --> 00:04:32,080
error that doesn't seem obvious from

00:04:29,919 --> 00:04:34,160
outside of the build environment so

00:04:32,080 --> 00:04:36,000
you're building something goes wrong

00:04:34,160 --> 00:04:37,199
you're not quite sure why things are

00:04:36,000 --> 00:04:39,040
misbehaving

00:04:37,199 --> 00:04:40,240
step into the build world and

00:04:39,040 --> 00:04:42,000
troubleshoot yourself

00:04:40,240 --> 00:04:44,000
then you can of course step out and

00:04:42,000 --> 00:04:46,320
resume your normal development

00:04:44,000 --> 00:04:46,320
work

00:04:47,280 --> 00:04:51,440
tip number four is again something that

00:04:50,160 --> 00:04:53,759
should help you

00:04:51,440 --> 00:04:55,360
build your snaps much faster and test

00:04:53,759 --> 00:04:58,160
them more efficiently

00:04:55,360 --> 00:04:59,840
so you can actually test the snap

00:04:58,160 --> 00:05:03,199
without installing

00:04:59,840 --> 00:05:06,160
for example just download the snap from

00:05:03,199 --> 00:05:08,080
from the store then unsquash the archive

00:05:06,160 --> 00:05:08,560
snap is basically a squashfest file

00:05:08,080 --> 00:05:11,600
system

00:05:08,560 --> 00:05:13,039
archive step into it and then run snap

00:05:11,600 --> 00:05:15,199
try

00:05:13,039 --> 00:05:16,880
this will emulate the normal

00:05:15,199 --> 00:05:18,720
installation of a snap

00:05:16,880 --> 00:05:20,080
and it will be presented to you as an

00:05:18,720 --> 00:05:22,080
installed application which you can then

00:05:20,080 --> 00:05:24,639
try and play with

00:05:22,080 --> 00:05:25,280
so at this point you could potentially

00:05:24,639 --> 00:05:27,120
uh

00:05:25,280 --> 00:05:28,479
add things into the squash fest file

00:05:27,120 --> 00:05:32,080
system and then

00:05:28,479 --> 00:05:35,280
snap try again basically remount the uh

00:05:32,080 --> 00:05:36,400
the archive use it see what gives and

00:05:35,280 --> 00:05:38,720
this can help you

00:05:36,400 --> 00:05:40,000
for instance nail down any missing

00:05:38,720 --> 00:05:42,400
libraries

00:05:40,000 --> 00:05:44,400
figure out if you have any permissions

00:05:42,400 --> 00:05:46,240
or broken siblings perhaps

00:05:44,400 --> 00:05:48,320
things that could potentially happen if

00:05:46,240 --> 00:05:51,199
you have

00:05:48,320 --> 00:05:53,759
maybe some disorder in your sources

00:05:51,199 --> 00:05:56,880
similarly you can use snapcraft pack

00:05:53,759 --> 00:05:59,520
if you have your sources and if you have

00:05:56,880 --> 00:06:01,600
your built artifacts in a work folder

00:05:59,520 --> 00:06:03,280
in a world directory you haven't yet

00:06:01,600 --> 00:06:05,280
built the snap itself

00:06:03,280 --> 00:06:07,199
you can use snapcraft pack which will

00:06:05,280 --> 00:06:09,360
assemble all these different components

00:06:07,199 --> 00:06:10,319
into snap and then you can try it and

00:06:09,360 --> 00:06:13,120
play with it

00:06:10,319 --> 00:06:13,759
both these things should help you work

00:06:13,120 --> 00:06:15,199
faster

00:06:13,759 --> 00:06:17,360
as in you don't have to wait for the

00:06:15,199 --> 00:06:19,759
build environment to be built

00:06:17,360 --> 00:06:22,000
you don't have to wait for long

00:06:19,759 --> 00:06:24,639
compilation times if you know

00:06:22,000 --> 00:06:25,199
that the problem is in just small bits

00:06:24,639 --> 00:06:26,720
and pieces

00:06:25,199 --> 00:06:31,120
just before the runtime of the

00:06:26,720 --> 00:06:31,120
application or something similar to that

00:06:31,840 --> 00:06:35,840
one more thing that should be useful to

00:06:33,360 --> 00:06:38,880
developers is snappy debug

00:06:35,840 --> 00:06:41,039
basically if your snap does run well

00:06:38,880 --> 00:06:43,840
and this can happen due to permission

00:06:41,039 --> 00:06:46,160
errors as snaps are self-contained

00:06:43,840 --> 00:06:47,919
and confined applications and they

00:06:46,160 --> 00:06:50,080
communicate with the underlying system

00:06:47,919 --> 00:06:51,680
through a mechanism of interfaces

00:06:50,080 --> 00:06:53,120
so if you haven't specified the

00:06:51,680 --> 00:06:55,599
necessary interfaces

00:06:53,120 --> 00:06:56,319
or they are not connected or perhaps

00:06:55,599 --> 00:06:58,800
there are other

00:06:56,319 --> 00:06:59,520
permission issues due to the nature of

00:06:58,800 --> 00:07:02,080
this

00:06:59,520 --> 00:07:03,199
confinement you can then install a

00:07:02,080 --> 00:07:05,919
special

00:07:03,199 --> 00:07:07,120
troubleshooting step called snappy debug

00:07:05,919 --> 00:07:10,000
run it in a separate

00:07:07,120 --> 00:07:11,120
command command line window and as you

00:07:10,000 --> 00:07:13,039
run your snap

00:07:11,120 --> 00:07:14,800
and test it normally in in a different

00:07:13,039 --> 00:07:18,160
terminal in a different shell

00:07:14,800 --> 00:07:21,280
you will see a log and output in in

00:07:18,160 --> 00:07:23,759
in the snappy debug log it will give you

00:07:21,280 --> 00:07:24,639
armor denial errors and suggestions on

00:07:23,759 --> 00:07:27,280
how you can

00:07:24,639 --> 00:07:27,840
work around potential problems this can

00:07:27,280 --> 00:07:30,720
help you

00:07:27,840 --> 00:07:32,080
understand why even though the build may

00:07:30,720 --> 00:07:34,240
be successful

00:07:32,080 --> 00:07:37,280
your snap doesn't run well quite as well

00:07:34,240 --> 00:07:37,280
as you should as it should

00:07:39,680 --> 00:07:43,919
again for developers and people

00:07:42,160 --> 00:07:44,639
interested in understanding how and why

00:07:43,919 --> 00:07:48,160
things work

00:07:44,639 --> 00:07:50,960
there is snap s trace basically

00:07:48,160 --> 00:07:52,000
s trace is a utility that lets you trace

00:07:50,960 --> 00:07:55,520
system calls

00:07:52,000 --> 00:07:56,000
and understand why and how problems may

00:07:55,520 --> 00:07:58,960
occur

00:07:56,000 --> 00:08:00,400
during application startups or runtimes

00:07:58,960 --> 00:08:02,400
you could have a crash

00:08:00,400 --> 00:08:03,599
and you need to understand why something

00:08:02,400 --> 00:08:06,160
went wrong

00:08:03,599 --> 00:08:07,440
so snap so you can run snaps with an

00:08:06,160 --> 00:08:10,240
asterisk flag

00:08:07,440 --> 00:08:12,560
and then use all the normal optional

00:08:10,240 --> 00:08:15,280
arguments that astray supports

00:08:12,560 --> 00:08:16,160
to print out uh the log of that

00:08:15,280 --> 00:08:19,599
execution

00:08:16,160 --> 00:08:23,039
for instance you may only want to trace

00:08:19,599 --> 00:08:24,560
open system calls or you may actually

00:08:23,039 --> 00:08:26,800
want to have

00:08:24,560 --> 00:08:27,759
longer printouts so the default 64

00:08:26,800 --> 00:08:30,400
character string

00:08:27,759 --> 00:08:32,479
may not be sufficient for uh you can

00:08:30,400 --> 00:08:35,120
also do just the summary of the run

00:08:32,479 --> 00:08:36,320
and understand what's happening this is

00:08:35,120 --> 00:08:38,080
quite useful

00:08:36,320 --> 00:08:40,080
because it allows you to step into the

00:08:38,080 --> 00:08:40,320
snap world despite the fact that there

00:08:40,080 --> 00:08:44,240
is

00:08:40,320 --> 00:08:44,240
strong security confinement around it

00:08:44,560 --> 00:08:48,240
and warming up on the same note we also

00:08:47,680 --> 00:08:51,440
have

00:08:48,240 --> 00:08:54,560
gdp support with snaps you can

00:08:51,440 --> 00:08:57,200
actually run a gdp server

00:08:54,560 --> 00:08:58,399
which will then open a port a high port

00:08:57,200 --> 00:09:00,880
and connect to it using

00:08:58,399 --> 00:09:02,160
either a different terminal window or

00:09:00,880 --> 00:09:04,640
even

00:09:02,160 --> 00:09:07,360
an id or any remote debugging

00:09:04,640 --> 00:09:09,600
troubleshooting tool that supports gdb

00:09:07,360 --> 00:09:10,800
and so in a separate shell you run gdb

00:09:09,600 --> 00:09:12,160
and then you can do the

00:09:10,800 --> 00:09:14,000
usual things that you will do when

00:09:12,160 --> 00:09:16,240
you're troubleshooting an application

00:09:14,000 --> 00:09:17,440
you can set breakpoints you can set

00:09:16,240 --> 00:09:20,839
conditions

00:09:17,440 --> 00:09:22,399
you can step into the execution you can

00:09:20,839 --> 00:09:24,240
disassemble

00:09:22,399 --> 00:09:25,440
the code so everything that you would

00:09:24,240 --> 00:09:27,760
normally do to understand if

00:09:25,440 --> 00:09:30,880
your application is not working you can

00:09:27,760 --> 00:09:30,880
also do with snaps

00:09:32,560 --> 00:09:37,279
review tools so let's assume that you

00:09:35,360 --> 00:09:38,959
have built your snap

00:09:37,279 --> 00:09:41,040
you've tried all the other different

00:09:38,959 --> 00:09:42,640
tricks that we've just outlined

00:09:41,040 --> 00:09:45,120
and you believe that your snap is ready

00:09:42,640 --> 00:09:48,000
to be uploaded to the store

00:09:45,120 --> 00:09:49,279
normally what happens is your snap will

00:09:48,000 --> 00:09:52,560
be reviewed

00:09:49,279 --> 00:09:54,560
it will be automatically scanned and

00:09:52,560 --> 00:09:56,240
it may not be allowed into the store

00:09:54,560 --> 00:09:58,240
just yet for publication

00:09:56,240 --> 00:09:59,519
if the security scan detects potential

00:09:58,240 --> 00:10:01,600
problems with your uh

00:09:59,519 --> 00:10:02,880
with your application for instance you

00:10:01,600 --> 00:10:04,880
may have

00:10:02,880 --> 00:10:06,800
broken security permissions or your

00:10:04,880 --> 00:10:09,200
application tries to do something that

00:10:06,800 --> 00:10:10,480
should it shouldn't you will get these

00:10:09,200 --> 00:10:12,640
errors and then your

00:10:10,480 --> 00:10:14,079
uh upload will be blocked basically your

00:10:12,640 --> 00:10:15,839
publication will be blocked

00:10:14,079 --> 00:10:17,279
until there is a manual review by the

00:10:15,839 --> 00:10:20,160
security team

00:10:17,279 --> 00:10:20,640
to minimize this time disruption you can

00:10:20,160 --> 00:10:23,839
run

00:10:20,640 --> 00:10:25,360
review tools uh a lightweight

00:10:23,839 --> 00:10:27,920
version of what happens when you upload

00:10:25,360 --> 00:10:30,640
your snap to the store locally

00:10:27,920 --> 00:10:32,480
install it run it and examine your snap

00:10:30,640 --> 00:10:34,959
it will give you indications

00:10:32,480 --> 00:10:35,680
warnings or hard errors as to what you

00:10:34,959 --> 00:10:38,640
may have done

00:10:35,680 --> 00:10:39,600
wrong security wise so you can go back

00:10:38,640 --> 00:10:41,519
fix it

00:10:39,600 --> 00:10:43,360
get a green light from review tools and

00:10:41,519 --> 00:10:46,480
only then upload a snap

00:10:43,360 --> 00:10:47,440
should save you time apologies should

00:10:46,480 --> 00:10:49,200
save you time

00:10:47,440 --> 00:10:51,279
especially if you're in a hurry uh and

00:10:49,200 --> 00:10:53,839
you want to upload your snap and publish

00:10:51,279 --> 00:10:53,839
it quickly

00:10:54,480 --> 00:11:02,079
default track most people will probably

00:10:58,399 --> 00:11:04,160
just have one track one main

00:11:02,079 --> 00:11:06,079
let's call it one main path to how they

00:11:04,160 --> 00:11:08,560
publish their snap

00:11:06,079 --> 00:11:10,640
and some people may actually have

00:11:08,560 --> 00:11:13,040
multiple tracks

00:11:10,640 --> 00:11:15,200
and you may have a legacy track for

00:11:13,040 --> 00:11:16,480
instance you may have the latest track

00:11:15,200 --> 00:11:19,120
sorry the latest track is the default

00:11:16,480 --> 00:11:22,720
one you may have a numbered version

00:11:19,120 --> 00:11:24,640
uh tracks for your application but then

00:11:22,720 --> 00:11:26,320
you may want your users not necessarily

00:11:24,640 --> 00:11:29,120
to use the the last

00:11:26,320 --> 00:11:30,800
or the legacy track you can set actually

00:11:29,120 --> 00:11:32,079
which track is the default one so when

00:11:30,800 --> 00:11:34,800
people install without

00:11:32,079 --> 00:11:36,320
additional arguments they will get the

00:11:34,800 --> 00:11:38,880
desired version

00:11:36,320 --> 00:11:39,519
this can actually also help you perhaps

00:11:38,880 --> 00:11:42,560
test

00:11:39,519 --> 00:11:44,079
how your different versions behave or

00:11:42,560 --> 00:11:44,880
maybe stagger the installation of

00:11:44,079 --> 00:11:47,680
different

00:11:44,880 --> 00:11:49,360
versions of of your application it's

00:11:47,680 --> 00:11:52,800
entirely up to you but the option is

00:11:49,360 --> 00:11:52,800
there and you can use it

00:11:53,519 --> 00:11:58,800
snap connections

00:11:56,639 --> 00:11:59,760
earlier i mentioned security confinement

00:11:58,800 --> 00:12:03,279
and i mentioned

00:11:59,760 --> 00:12:06,399
interfaces so to to give it a more

00:12:03,279 --> 00:12:08,399
visual analogy uh snaps are fully

00:12:06,399 --> 00:12:10,560
self-contained so they sit in a in

00:12:08,399 --> 00:12:11,680
a in a benevolent prison and they can't

00:12:10,560 --> 00:12:14,160
communicate with the

00:12:11,680 --> 00:12:15,360
outside world that's a security feature

00:12:14,160 --> 00:12:17,519
by design

00:12:15,360 --> 00:12:20,079
but then snaps that don't communicate

00:12:17,519 --> 00:12:21,519
with system resources aren't that useful

00:12:20,079 --> 00:12:23,680
therefore there's the mechanism of

00:12:21,519 --> 00:12:25,600
interfaces you can tell snaps to be able

00:12:23,680 --> 00:12:28,720
to connect to the home directory

00:12:25,600 --> 00:12:32,160
to network to the audio and video uh

00:12:28,720 --> 00:12:33,360
perhaps bluetooth usb there are tons and

00:12:32,160 --> 00:12:35,279
tons of interfaces

00:12:33,360 --> 00:12:37,519
some of these will be auto connected

00:12:35,279 --> 00:12:39,440
which means when the snap is installed

00:12:37,519 --> 00:12:41,200
they'll be available to the end user

00:12:39,440 --> 00:12:42,880
others will not

00:12:41,200 --> 00:12:44,720
and if you want to make sure that your

00:12:42,880 --> 00:12:48,079
application works and behaves

00:12:44,720 --> 00:12:49,360
uh as as you expect you can check for

00:12:48,079 --> 00:12:53,040
install snap

00:12:49,360 --> 00:12:55,120
which interfaces it has connected

00:12:53,040 --> 00:12:56,160
basically which plugs and which slots

00:12:55,120 --> 00:12:59,519
those plugs connect

00:12:56,160 --> 00:13:00,560
into and if a certain interface isn't

00:12:59,519 --> 00:13:02,560
auto connected

00:13:00,560 --> 00:13:04,240
then your application may assume

00:13:02,560 --> 00:13:07,519
behavior that is not available

00:13:04,240 --> 00:13:09,360
and may not not run well similarly as an

00:13:07,519 --> 00:13:10,959
end user

00:13:09,360 --> 00:13:12,720
you may want to test the snap but you're

00:13:10,959 --> 00:13:13,680
not quite sure what it does so you could

00:13:12,720 --> 00:13:15,839
say okay

00:13:13,680 --> 00:13:16,720
i will disconnect the snap from network

00:13:15,839 --> 00:13:20,000
for instance

00:13:16,720 --> 00:13:22,399
i want to use an uh office suit just in

00:13:20,000 --> 00:13:24,079
an offline mode or maybe i want to use

00:13:22,399 --> 00:13:26,399
the browser but i don't want to give it

00:13:24,079 --> 00:13:29,519
access to audio or my webcam

00:13:26,399 --> 00:13:31,519
so you can tweak your privacy uh

00:13:29,519 --> 00:13:33,519
opportunistically as you need to you can

00:13:31,519 --> 00:13:34,240
perhaps disconnect the browser during

00:13:33,519 --> 00:13:36,240
the session

00:13:34,240 --> 00:13:37,600
a specific interface for a browser

00:13:36,240 --> 00:13:38,480
during a session then you can connect it

00:13:37,600 --> 00:13:41,279
later on

00:13:38,480 --> 00:13:41,279
and vice versa

00:13:43,600 --> 00:13:48,800
aliases so this is something that can be

00:13:46,839 --> 00:13:53,519
useful if your

00:13:48,800 --> 00:13:55,120
application uh has

00:13:53,519 --> 00:13:57,519
okay if your snap has multiple

00:13:55,120 --> 00:14:00,079
applications contained inside it

00:13:57,519 --> 00:14:01,040
or you want to make life easier either

00:14:00,079 --> 00:14:04,560
for yourself

00:14:01,040 --> 00:14:07,839
or for your end users normally

00:14:04,560 --> 00:14:10,880
snaps have one application inside

00:14:07,839 --> 00:14:13,600
so let's say for instance uh

00:14:10,880 --> 00:14:14,720
okay i'll just use a silly example let's

00:14:13,600 --> 00:14:17,120
say kcalc

00:14:14,720 --> 00:14:18,800
a calculator it has one application

00:14:17,120 --> 00:14:19,839
inside it it's just the calculator

00:14:18,800 --> 00:14:21,360
itself

00:14:19,839 --> 00:14:23,680
but if you look at something more

00:14:21,360 --> 00:14:24,959
complicated let's say libreoffice or

00:14:23,680 --> 00:14:26,959
calligra

00:14:24,959 --> 00:14:28,959
you have multiple applications you have

00:14:26,959 --> 00:14:31,040
the spreadsheet application you have the

00:14:28,959 --> 00:14:32,079
word processor application you have the

00:14:31,040 --> 00:14:34,959
the

00:14:32,079 --> 00:14:35,760
the presentation one so there can be

00:14:34,959 --> 00:14:37,199
three four

00:14:35,760 --> 00:14:39,120
five ten different applications

00:14:37,199 --> 00:14:41,120
contained inside the snap

00:14:39,120 --> 00:14:42,560
so when you run that snap you act you

00:14:41,120 --> 00:14:45,600
then need to invoke

00:14:42,560 --> 00:14:47,279
the specific application explicitly you

00:14:45,600 --> 00:14:48,720
have to give a full name and then the

00:14:47,279 --> 00:14:51,199
application name

00:14:48,720 --> 00:14:52,560
and in some cases this could be a bit

00:14:51,199 --> 00:14:54,480
cumbersome

00:14:52,560 --> 00:14:56,160
then if you want to make it simpler for

00:14:54,480 --> 00:14:58,639
your users you can request

00:14:56,160 --> 00:14:59,360
from the store team to create aliases

00:14:58,639 --> 00:15:01,040
for you

00:14:59,360 --> 00:15:02,800
or as an end user you can create them

00:15:01,040 --> 00:15:05,040
locally on your system

00:15:02,800 --> 00:15:06,160
and then for instance instead of

00:15:05,040 --> 00:15:09,279
executing

00:15:06,160 --> 00:15:10,639
let's say libreoffice.writer to run

00:15:09,279 --> 00:15:14,160
writer you could just have

00:15:10,639 --> 00:15:15,120
writer as your alias or something

00:15:14,160 --> 00:15:17,760
completely different

00:15:15,120 --> 00:15:18,399
whatever you feel like this can simplify

00:15:17,760 --> 00:15:21,199
usage

00:15:18,399 --> 00:15:23,839
and make the overall experience more

00:15:21,199 --> 00:15:23,839
streamlined

00:15:25,760 --> 00:15:32,480
parallel installs i think this is

00:15:29,279 --> 00:15:33,279
probably one of the nicest and user

00:15:32,480 --> 00:15:36,480
features

00:15:33,279 --> 00:15:38,320
um that exists and one of the great

00:15:36,480 --> 00:15:39,120
advantages of snaps compared to the

00:15:38,320 --> 00:15:42,079
traditional

00:15:39,120 --> 00:15:42,720
linux packaging you can have multiple

00:15:42,079 --> 00:15:44,480
versions

00:15:42,720 --> 00:15:47,279
of the same snap installed on your

00:15:44,480 --> 00:15:49,040
system and in some cases you may even be

00:15:47,279 --> 00:15:51,920
able to run multiple versions of the

00:15:49,040 --> 00:15:54,079
same application in parallel

00:15:51,920 --> 00:15:55,279
the way this is done is you may

00:15:54,079 --> 00:15:57,199
potentially need to

00:15:55,279 --> 00:16:00,079
enable an experimental feature on your

00:15:57,199 --> 00:16:03,120
system if it's not enabled or supported

00:16:00,079 --> 00:16:03,759
and then you can install a snap by

00:16:03,120 --> 00:16:06,560
giving it

00:16:03,759 --> 00:16:08,079
the name it has in store and then

00:16:06,560 --> 00:16:11,040
underscore as a qualifier

00:16:08,079 --> 00:16:11,759
that defines the versioning and then

00:16:11,040 --> 00:16:15,120
give it a

00:16:11,759 --> 00:16:17,279
uh whatever string you like as a

00:16:15,120 --> 00:16:18,880
version name so for instance we have a

00:16:17,279 --> 00:16:22,639
screenshot here of vlc

00:16:18,880 --> 00:16:26,480
we can install vlc first vlc second

00:16:22,639 --> 00:16:28,240
vlc fifth whatever you like and then

00:16:26,480 --> 00:16:30,480
these multiple snaps will be presented

00:16:28,240 --> 00:16:32,079
on your system in parallel

00:16:30,480 --> 00:16:33,279
and then you can run the first instance

00:16:32,079 --> 00:16:33,920
and the second and the third and the

00:16:33,279 --> 00:16:35,680
fourth

00:16:33,920 --> 00:16:37,360
and you can perhaps compare how they

00:16:35,680 --> 00:16:39,519
behave i here

00:16:37,360 --> 00:16:41,040
have a screenshot where you have the the

00:16:39,519 --> 00:16:43,839
current vlc3

00:16:41,040 --> 00:16:44,800
family and then the new vlc4 sitting

00:16:43,839 --> 00:16:46,800
side by side

00:16:44,800 --> 00:16:48,240
and you can see oh i like the new ui i

00:16:46,800 --> 00:16:49,199
don't like it i want to compare

00:16:48,240 --> 00:16:51,440
functionality

00:16:49,199 --> 00:16:53,680
is the audio quality the same and so

00:16:51,440 --> 00:16:55,759
forth

00:16:53,680 --> 00:16:57,519
please note that in some cases your

00:16:55,759 --> 00:17:00,079
application itself

00:16:57,519 --> 00:17:00,880
may not like having multiple instances

00:17:00,079 --> 00:17:03,759
of itself

00:17:00,880 --> 00:17:05,199
loaded into memory an application may

00:17:03,759 --> 00:17:09,039
buy into a port

00:17:05,199 --> 00:17:12,079
uh maybe sockets uh may expect

00:17:09,039 --> 00:17:14,720
um may expect to use

00:17:12,079 --> 00:17:16,640
a data profile from your hard disk and

00:17:14,720 --> 00:17:18,799
if multiple instances try to access

00:17:16,640 --> 00:17:20,559
these same resources at the same time

00:17:18,799 --> 00:17:23,679
you could have a contention or potential

00:17:20,559 --> 00:17:26,000
conflict so in some cases

00:17:23,679 --> 00:17:28,079
this may not work from the pure

00:17:26,000 --> 00:17:30,960
application functionality aspect

00:17:28,079 --> 00:17:33,039
but in others it may work really well

00:17:30,960 --> 00:17:35,039
and even if you can't really run things

00:17:33,039 --> 00:17:37,120
at the same time you can have them

00:17:35,039 --> 00:17:39,200
definitely installed in parallel

00:17:37,120 --> 00:17:40,880
and then test them in a different way

00:17:39,200 --> 00:17:42,080
this doesn't don't have to be just major

00:17:40,880 --> 00:17:44,799
version differences

00:17:42,080 --> 00:17:46,000
these could be different uh stability uh

00:17:44,799 --> 00:17:48,880
levels that are available

00:17:46,000 --> 00:17:51,200
in the store you can have a stable

00:17:48,880 --> 00:17:53,360
version and an edge version side by side

00:17:51,200 --> 00:17:55,280
compare them see how they behave is

00:17:53,360 --> 00:17:56,880
there any breakage and functionality

00:17:55,280 --> 00:17:58,720
uh is everything working the way you

00:17:56,880 --> 00:18:01,200
expected you want to migrate

00:17:58,720 --> 00:18:03,200
to a new version of a tool are your

00:18:01,200 --> 00:18:04,880
databases going to be affected

00:18:03,200 --> 00:18:08,400
is your usage pattern going to be

00:18:04,880 --> 00:18:08,400
affected it's quite useful

00:18:09,120 --> 00:18:17,520
okay now a little bit of housekeeping

00:18:13,679 --> 00:18:18,000
so today people have pretty big hard

00:18:17,520 --> 00:18:21,200
disks

00:18:18,000 --> 00:18:23,600
normally and space isn't an issue

00:18:21,200 --> 00:18:25,039
but sometimes especially for laptop

00:18:23,600 --> 00:18:27,520
users

00:18:25,039 --> 00:18:28,799
storage can still be a bit of a problem

00:18:27,520 --> 00:18:31,840
if you have

00:18:28,799 --> 00:18:34,559
ssd or nvme storage

00:18:31,840 --> 00:18:36,240
they usually come at a higher price so

00:18:34,559 --> 00:18:38,000
you won't necessarily have two or four

00:18:36,240 --> 00:18:40,640
or eight terabyte ssd

00:18:38,000 --> 00:18:41,760
you'll probably have something smaller

00:18:40,640 --> 00:18:45,360
and in that case

00:18:41,760 --> 00:18:46,400
you may want to kind of make sure that

00:18:45,360 --> 00:18:49,360
your disk usage

00:18:46,400 --> 00:18:50,480
is reasonable by default when you

00:18:49,360 --> 00:18:53,120
install snaps

00:18:50,480 --> 00:18:55,840
uh three revisions will be kept so you

00:18:53,120 --> 00:18:57,679
install revision one two and three

00:18:55,840 --> 00:18:59,440
the pointer will rotate to the latest

00:18:57,679 --> 00:19:01,039
version and you will be using it but the

00:18:59,440 --> 00:19:02,480
others will still exist on your disk and

00:19:01,039 --> 00:19:05,600
take space

00:19:02,480 --> 00:19:07,280
you can actually tell uh snapd the

00:19:05,600 --> 00:19:10,640
service that manages this

00:19:07,280 --> 00:19:13,120
how many versions you want to retain

00:19:10,640 --> 00:19:13,840
the minimum is actually two but you can

00:19:13,120 --> 00:19:16,320
go up

00:19:13,840 --> 00:19:17,039
as much as you like and this could be

00:19:16,320 --> 00:19:20,160
useful

00:19:17,039 --> 00:19:21,919
if you have i don't know

00:19:20,160 --> 00:19:24,320
if you need to have these multiple

00:19:21,919 --> 00:19:25,440
versions for legacy purposes for for

00:19:24,320 --> 00:19:27,760
testing purposes

00:19:25,440 --> 00:19:28,799
to keep track nostalgia sake whatever

00:19:27,760 --> 00:19:31,440
you like

00:19:28,799 --> 00:19:33,760
this this way you can trim down overall

00:19:31,440 --> 00:19:35,840
usage of how much snap stake

00:19:33,760 --> 00:19:37,200
at the very least if you want to trim it

00:19:35,840 --> 00:19:40,799
down by about a

00:19:37,200 --> 00:19:41,440
third i will stop briefly to answer a

00:19:40,799 --> 00:19:44,480
question

00:19:41,440 --> 00:19:46,559
um where about the previous point which

00:19:44,480 --> 00:19:49,280
i brought up i'll go back

00:19:46,559 --> 00:19:53,840
it's do parallel installations isolate

00:19:49,280 --> 00:19:53,840
instance app configurations

00:19:54,720 --> 00:19:59,039
if i understand correctly this question

00:19:57,440 --> 00:20:02,960
is

00:19:59,039 --> 00:20:05,360
does each snap run data

00:20:02,960 --> 00:20:06,720
isolated from the others and the answer

00:20:05,360 --> 00:20:09,360
is maybe

00:20:06,720 --> 00:20:11,120
so of course some data will be private

00:20:09,360 --> 00:20:12,640
but there will be some shared data let's

00:20:11,120 --> 00:20:13,360
let's think of something like a browser

00:20:12,640 --> 00:20:15,200
profile

00:20:13,360 --> 00:20:16,400
your browser profile is one and it sits

00:20:15,200 --> 00:20:19,280
on the disk right

00:20:16,400 --> 00:20:21,039
so if you load your browser profile and

00:20:19,280 --> 00:20:24,080
you want to load it into two different

00:20:21,039 --> 00:20:26,400
instances of of an application

00:20:24,080 --> 00:20:28,320
that may work or may not work the

00:20:26,400 --> 00:20:31,039
problem is mostly with writing right

00:20:28,320 --> 00:20:32,159
if you do two separate browsing sessions

00:20:31,039 --> 00:20:34,159
and then you need to write

00:20:32,159 --> 00:20:35,440
the session to the disk which one takes

00:20:34,159 --> 00:20:37,440
precedence

00:20:35,440 --> 00:20:38,880
a separate one would be uh your

00:20:37,440 --> 00:20:41,000
application may have

00:20:38,880 --> 00:20:43,200
may listen on a local port let's say

00:20:41,000 --> 00:20:46,080
00:20:43,200 --> 00:20:46,480
both versions cannot bind to the same

00:20:46,080 --> 00:20:49,120
port

00:20:46,480 --> 00:20:50,159
at the same time you might have to edit

00:20:49,120 --> 00:20:53,080
configuration

00:20:50,159 --> 00:20:54,559
and say okay this version goes to port

00:20:53,080 --> 00:20:57,840
00:20:54,559 --> 00:20:58,559
the other one will go 501 those kind of

00:20:57,840 --> 00:21:01,840
things

00:20:58,559 --> 00:21:02,480
so it is a combination of what snaps can

00:21:01,840 --> 00:21:06,000
do

00:21:02,480 --> 00:21:08,000
but also what the application can do

00:21:06,000 --> 00:21:10,240
worst case you will have these parallel

00:21:08,000 --> 00:21:12,000
instances but you may need to run them

00:21:10,240 --> 00:21:14,000
sequentially however you still have the

00:21:12,000 --> 00:21:16,960
option to do that

00:21:14,000 --> 00:21:18,159
running parallel instances in parallel

00:21:16,960 --> 00:21:20,720
applications

00:21:18,159 --> 00:21:21,600
on your desk that may or may not work

00:21:20,720 --> 00:21:25,360
always

00:21:21,600 --> 00:21:25,360
that's a bit of a hit and miss

00:21:26,000 --> 00:21:30,960
so back to the sniper revisions like i

00:21:29,280 --> 00:21:33,200
said we can

00:21:30,960 --> 00:21:35,679
by this way this way you can trim down

00:21:33,200 --> 00:21:37,679
the data usage by about a third

00:21:35,679 --> 00:21:40,320
or of course increase it if you have a

00:21:37,679 --> 00:21:40,320
need for that

00:21:40,640 --> 00:21:44,080
on the maintenance side there's also an

00:21:43,039 --> 00:21:47,120
important element

00:21:44,080 --> 00:21:50,960
of date of snap updates

00:21:47,120 --> 00:21:52,880
so snap refresh occasionally by default

00:21:50,960 --> 00:21:55,520
snapd will contact the store four times

00:21:52,880 --> 00:21:57,760
a day and ask for any updates

00:21:55,520 --> 00:22:00,799
to your installed snaps if those updates

00:21:57,760 --> 00:22:04,159
exist your snaps will be updated

00:22:00,799 --> 00:22:06,480
in some cases this may not be convenient

00:22:04,159 --> 00:22:08,000
you may be presenting like i'm doing now

00:22:06,480 --> 00:22:09,919
you don't necessarily want to have an

00:22:08,000 --> 00:22:12,640
update happening in the background

00:22:09,919 --> 00:22:13,760
for uh it could be disk users be network

00:22:12,640 --> 00:22:14,960
usage or you just don't want an

00:22:13,760 --> 00:22:16,480
application to update while you're

00:22:14,960 --> 00:22:20,240
working with it

00:22:16,480 --> 00:22:23,039
uh you may also have a specific

00:22:20,240 --> 00:22:24,000
uh environment requirement say at your

00:22:23,039 --> 00:22:26,799
workplace

00:22:24,000 --> 00:22:27,600
you don't install uh applications on

00:22:26,799 --> 00:22:30,000
every system

00:22:27,600 --> 00:22:30,640
in at the same time you have a staggered

00:22:30,000 --> 00:22:32,880
deployment

00:22:30,640 --> 00:22:33,840
installed on a four or five test

00:22:32,880 --> 00:22:36,799
machines first

00:22:33,840 --> 00:22:40,080
then you have a kind of a semi-staging

00:22:36,799 --> 00:22:41,360
area and then finally you have a

00:22:40,080 --> 00:22:45,600
production setup

00:22:41,360 --> 00:22:47,840
so you can modify when the snapd service

00:22:45,600 --> 00:22:48,960
runs its updates there are multiple

00:22:47,840 --> 00:22:51,520
options

00:22:48,960 --> 00:22:52,159
first of all you can set almost like a

00:22:51,520 --> 00:22:54,400
cron

00:22:52,159 --> 00:22:56,240
a specific timetable you can say that

00:22:54,400 --> 00:22:57,360
updates only happen on friday at two

00:22:56,240 --> 00:23:00,640
o'clock

00:22:57,360 --> 00:23:05,120
you could also say that um

00:23:00,640 --> 00:23:07,679
snaps only update every second tuesday

00:23:05,120 --> 00:23:08,799
or you can go with a very specific date

00:23:07,679 --> 00:23:12,159
format which you can

00:23:08,799 --> 00:23:14,960
set and then convert to tell snap d

00:23:12,159 --> 00:23:15,840
okay i'd like my snaps to update on the

00:23:14,960 --> 00:23:20,159
27th

00:23:15,840 --> 00:23:23,360
of may at 9 24 in the morning

00:23:20,159 --> 00:23:25,200
this way you can then combine

00:23:23,360 --> 00:23:26,720
updates which bring security and

00:23:25,200 --> 00:23:30,400
functionality changes

00:23:26,720 --> 00:23:33,679
with testing uh reliability practices

00:23:30,400 --> 00:23:35,520
or other other things that you may have

00:23:33,679 --> 00:23:35,940
in your business organization or even at

00:23:35,520 --> 00:23:37,120
home

00:23:35,940 --> 00:23:40,559
[Music]

00:23:37,120 --> 00:23:43,360
by in general you can defer snap updates

00:23:40,559 --> 00:23:44,320
up to 60 days at the moment this may

00:23:43,360 --> 00:23:46,880
change in the future

00:23:44,320 --> 00:23:49,039
as in you may get additional further

00:23:46,880 --> 00:23:51,039
controls and flexibility in how this is

00:23:49,039 --> 00:23:52,640
done

00:23:51,039 --> 00:23:54,559
and there is a question here where it

00:23:52,640 --> 00:23:56,320
says will it be possible to configure

00:23:54,559 --> 00:23:59,200
refreshing from the store

00:23:56,320 --> 00:24:00,480
gui or the updates app or the

00:23:59,200 --> 00:24:05,840
repositories

00:24:00,480 --> 00:24:08,880
to make it more friendly for newbies

00:24:05,840 --> 00:24:11,919
the answer is

00:24:08,880 --> 00:24:11,919
perhaps so

00:24:12,080 --> 00:24:15,679
one thing to take into account is that

00:24:14,159 --> 00:24:18,159
people don't necessarily

00:24:15,679 --> 00:24:21,279
just use ubuntu they may be on a fedora

00:24:18,159 --> 00:24:23,520
system or arch manjaro or opensuse

00:24:21,279 --> 00:24:24,559
and their front end will be different so

00:24:23,520 --> 00:24:27,200
in some cases

00:24:24,559 --> 00:24:28,320
the implementation will rely on the

00:24:27,200 --> 00:24:30,559
specific

00:24:28,320 --> 00:24:32,240
distro implementation whether it allows

00:24:30,559 --> 00:24:35,279
and supports

00:24:32,240 --> 00:24:35,840
snaps in the back end if that exists it

00:24:35,279 --> 00:24:39,840
might be

00:24:35,840 --> 00:24:43,039
implementable whether this

00:24:39,840 --> 00:24:44,799
should be available through a front-end

00:24:43,039 --> 00:24:48,159
let's say a gnome software on your

00:24:44,799 --> 00:24:50,480
ubuntu system maybe um

00:24:48,159 --> 00:24:51,440
it's a double edged sword because on one

00:24:50,480 --> 00:24:53,760
hand if you

00:24:51,440 --> 00:24:55,279
are a newbie you might not necessarily

00:24:53,760 --> 00:24:57,279
want to tinker with

00:24:55,279 --> 00:24:59,200
updates because you don't necessarily

00:24:57,279 --> 00:25:03,360
understand the full implications of such

00:24:59,200 --> 00:25:06,480
changes if you are a more

00:25:03,360 --> 00:25:08,159
tech savvy user then you will have 15

00:25:06,480 --> 00:25:10,720
workarounds to every problem

00:25:08,159 --> 00:25:12,880
and five solutions as well and then you

00:25:10,720 --> 00:25:14,880
will feel comfortable doing it

00:25:12,880 --> 00:25:16,240
it is very difficult to balance these

00:25:14,880 --> 00:25:18,640
kind of things because

00:25:16,240 --> 00:25:19,919
normally what you end up is either

00:25:18,640 --> 00:25:22,960
oversimplified solution

00:25:19,919 --> 00:25:25,840
that makes deckies super angry

00:25:22,960 --> 00:25:26,559
or you end up with super tacky solutions

00:25:25,840 --> 00:25:29,200
that

00:25:26,559 --> 00:25:30,240
newbies cannot use technology in a way

00:25:29,200 --> 00:25:32,400
if you look at the two

00:25:30,240 --> 00:25:33,279
sides of the spectrum you either have

00:25:32,400 --> 00:25:34,799
something that's

00:25:33,279 --> 00:25:36,640
very very simplified like you have on

00:25:34,799 --> 00:25:38,400
smartphones today in a way

00:25:36,640 --> 00:25:39,919
or you have linux where it's basically

00:25:38,400 --> 00:25:42,400
do it yourself and then

00:25:39,919 --> 00:25:44,559
what's the best solution for for

00:25:42,400 --> 00:25:47,520
mid-range users it's hard to say

00:25:44,559 --> 00:25:48,960
um please email me you'll see my email

00:25:47,520 --> 00:25:51,440
at the end of this presentation

00:25:48,960 --> 00:25:52,080
i'll bring it up with the snap b team

00:25:51,440 --> 00:25:54,080
and

00:25:52,080 --> 00:25:55,919
we consider all proposals ideas and

00:25:54,080 --> 00:25:57,360
suggestions doesn't mean we implement

00:25:55,919 --> 00:25:58,400
all of them but we'll definitely look at

00:25:57,360 --> 00:26:01,360
it and if you have

00:25:58,400 --> 00:26:03,360
a a real need and there's a way for us

00:26:01,360 --> 00:26:05,120
to implement it in a reasonable way

00:26:03,360 --> 00:26:07,760
i don't think there should be a big

00:26:05,120 --> 00:26:07,760
problem with it

00:26:08,000 --> 00:26:13,600
okay so snap refresh control

00:26:11,279 --> 00:26:14,799
you can do basically whatever you like

00:26:13,600 --> 00:26:17,279
well within reason

00:26:14,799 --> 00:26:17,840
and i think this can be especially

00:26:17,279 --> 00:26:20,240
useful

00:26:17,840 --> 00:26:22,080
if you have a critical application that

00:26:20,240 --> 00:26:23,840
uses consume as a snap

00:26:22,080 --> 00:26:25,679
so you can then say all right i have

00:26:23,840 --> 00:26:26,960
four systems the first system will get

00:26:25,679 --> 00:26:29,120
its updates daily

00:26:26,960 --> 00:26:31,360
the second system will do it only weekly

00:26:29,120 --> 00:26:33,440
the third one will have a monthly update

00:26:31,360 --> 00:26:35,039
with rigorous qa and the fourth one the

00:26:33,440 --> 00:26:36,000
production system only if the first

00:26:35,039 --> 00:26:39,440
three checks

00:26:36,000 --> 00:26:40,080
pass we deploy and then that one will

00:26:39,440 --> 00:26:43,039
have say

00:26:40,080 --> 00:26:44,720
a deferral of 60 days and every time you

00:26:43,039 --> 00:26:48,720
successfully update your snap

00:26:44,720 --> 00:26:50,640
you will then push the date for next

00:26:48,720 --> 00:26:52,400
update by another 60 days

00:26:50,640 --> 00:26:54,080
that's just an example or you somehow

00:26:52,400 --> 00:26:55,520
combine it with your configuration

00:26:54,080 --> 00:26:59,200
management tools

00:26:55,520 --> 00:26:59,200
puppets chef or so and so forth

00:26:59,679 --> 00:27:03,200
number 15 this will be the last trick of

00:27:02,480 --> 00:27:06,720
the day

00:27:03,200 --> 00:27:08,559
is snap snapshots i added a lightweight

00:27:06,720 --> 00:27:12,640
joke here for you to practice at home

00:27:08,559 --> 00:27:15,679
after the session basically

00:27:12,640 --> 00:27:18,640
you can snapshot your snaps and

00:27:15,679 --> 00:27:20,720
snap snaps get snapshotted automatically

00:27:18,640 --> 00:27:22,720
when they get removed

00:27:20,720 --> 00:27:25,120
have a snap on your system and you don't

00:27:22,720 --> 00:27:28,480
want it anymore you delete it

00:27:25,120 --> 00:27:28,960
because and then two days later you say

00:27:28,480 --> 00:27:30,640
oh

00:27:28,960 --> 00:27:32,080
i didn't back up my data that was

00:27:30,640 --> 00:27:34,720
contained in that snap

00:27:32,080 --> 00:27:36,159
it will be gone right to avoid that

00:27:34,720 --> 00:27:38,640
painful situation where

00:27:36,159 --> 00:27:41,039
things are forever deleted and any trace

00:27:38,640 --> 00:27:44,080
of it is lost from your disc

00:27:41,039 --> 00:27:47,360
snap d will keep a snapshot

00:27:44,080 --> 00:27:49,200
of a deleted snap for 30 days you can

00:27:47,360 --> 00:27:50,799
again manually yes the question number

00:27:49,200 --> 00:27:51,120
three is can be four snapshots yes you

00:27:50,799 --> 00:27:54,159
can

00:27:51,120 --> 00:27:54,960
you can just run snap snap save name of

00:27:54,159 --> 00:27:56,640
a snap

00:27:54,960 --> 00:27:59,200
and you will have a snapshot on your

00:27:56,640 --> 00:28:01,039
disk of course this takes space

00:27:59,200 --> 00:28:03,039
snapshot is basically just an archive

00:28:01,039 --> 00:28:04,880
you can copy then and extract it to a

00:28:03,039 --> 00:28:07,919
different system if you like

00:28:04,880 --> 00:28:09,200
if you want to have your own data

00:28:07,919 --> 00:28:11,600
retention or

00:28:09,200 --> 00:28:13,520
installation policy you could

00:28:11,600 --> 00:28:16,640
technically have a script

00:28:13,520 --> 00:28:19,760
that snapshots your snaps you can then

00:28:16,640 --> 00:28:21,279
scp or rsync that data to a second

00:28:19,760 --> 00:28:24,880
system for instance

00:28:21,279 --> 00:28:25,679
extract the data from the snapshotted

00:28:24,880 --> 00:28:28,640
archives

00:28:25,679 --> 00:28:30,000
into the snap writable directories and

00:28:28,640 --> 00:28:33,279
you will have the data available

00:28:30,000 --> 00:28:36,559
for use in some cases

00:28:33,279 --> 00:28:38,399
if your application has system or

00:28:36,559 --> 00:28:41,039
machine specific information

00:28:38,399 --> 00:28:42,799
saved then you could potentially

00:28:41,039 --> 00:28:44,000
encounter weird things when you restore

00:28:42,799 --> 00:28:46,399
these snapshots on a different

00:28:44,000 --> 00:28:48,880
system let's say that your application

00:28:46,399 --> 00:28:51,279
relies on a machine uuid

00:28:48,880 --> 00:28:53,039
or a hardware model for some reason a

00:28:51,279 --> 00:28:56,080
string of a horizon but something i

00:28:53,039 --> 00:28:57,440
whatever right if you then restore

00:28:56,080 --> 00:28:59,200
a system that doesn't have those

00:28:57,440 --> 00:28:59,679
specifications your application may go

00:28:59,200 --> 00:29:01,760
away

00:28:59,679 --> 00:29:03,120
i'm using data that doesn't really

00:29:01,760 --> 00:29:06,080
belong to me

00:29:03,120 --> 00:29:07,279
but in general you can create snapshots

00:29:06,080 --> 00:29:10,960
whenever you like

00:29:07,279 --> 00:29:12,799
you can check them you can delete them

00:29:10,960 --> 00:29:15,039
you can also delete snapshots that are

00:29:12,799 --> 00:29:17,200
created for your deleted snaps

00:29:15,039 --> 00:29:18,240
if you feel like okay i don't want this

00:29:17,200 --> 00:29:21,600
i really want my disk

00:29:18,240 --> 00:29:23,360
space back you can just purge

00:29:21,600 --> 00:29:25,200
any snapshot with the full knowledge

00:29:23,360 --> 00:29:28,240
that your data will be gone of course

00:29:25,200 --> 00:29:31,679
inside those in snapshots and

00:29:28,240 --> 00:29:34,799
i think this brings me

00:29:31,679 --> 00:29:38,640
to one questions

00:29:34,799 --> 00:29:40,240
and my contact details so if you want to

00:29:38,640 --> 00:29:42,559
ask any questions around snaps

00:29:40,240 --> 00:29:43,679
or even any other things feel free to

00:29:42,559 --> 00:29:45,440
reach out

00:29:43,679 --> 00:29:48,640
if i don't have the answer i'll direct

00:29:45,440 --> 00:29:50,559
you to the right person in canonical

00:29:48,640 --> 00:29:52,080
we have about 10 minutes if i'm not

00:29:50,559 --> 00:29:55,279
mistaken and

00:29:52,080 --> 00:29:58,559
feel free to feel free to ask any

00:29:55,279 --> 00:29:58,559
questions that haven't been raised so

00:30:06,840 --> 00:30:09,840
far

00:30:23,840 --> 00:30:30,799
okay we have

00:30:27,360 --> 00:30:30,799
uh yes yes please

00:30:32,880 --> 00:30:37,679
okay so we have two questions uh i'll

00:30:35,919 --> 00:30:39,279
answer number five first because it was

00:30:37,679 --> 00:30:41,360
uh typed down first

00:30:39,279 --> 00:30:42,880
is what will happen if different users

00:30:41,360 --> 00:30:45,919
install the same snap

00:30:42,880 --> 00:30:46,480
will different snaps be installed i

00:30:45,919 --> 00:30:48,960
presume

00:30:46,480 --> 00:30:50,080
uh the question is it's the same system

00:30:48,960 --> 00:30:52,480
a multi-user system

00:30:50,080 --> 00:30:53,279
which has two three four users running

00:30:52,480 --> 00:30:54,880
on it

00:30:53,279 --> 00:30:57,039
and they all have admin privileges to

00:30:54,880 --> 00:31:00,640
install applications

00:30:57,039 --> 00:31:00,640
am i correct in this assumption

00:31:01,679 --> 00:31:08,159
so snaps are installed uh globally so

00:31:04,880 --> 00:31:09,679
you can't really ins well you can

00:31:08,159 --> 00:31:11,120
parallel and install multiple versions

00:31:09,679 --> 00:31:12,080
but if you install the snap it's it's

00:31:11,120 --> 00:31:14,159
there

00:31:12,080 --> 00:31:15,440
so you won't necessarily have a problem

00:31:14,159 --> 00:31:18,000
where you have

00:31:15,440 --> 00:31:19,279
multiple names but you don't have

00:31:18,000 --> 00:31:22,159
multiple namespaces there's one

00:31:19,279 --> 00:31:23,200
namespace so that shouldn't be a big

00:31:22,159 --> 00:31:25,760
issue

00:31:23,200 --> 00:31:28,159
uh however if you have multiple admins

00:31:25,760 --> 00:31:30,320
they could potentially

00:31:28,159 --> 00:31:33,039
install multiple parallel versions of a

00:31:30,320 --> 00:31:34,960
snap they could tweak configurations

00:31:33,039 --> 00:31:37,200
or they could do things with system

00:31:34,960 --> 00:31:39,279
management that could conflict what the

00:31:37,200 --> 00:31:41,919
other user has in mind

00:31:39,279 --> 00:31:43,519
uh when it comes to admin i think it's

00:31:41,919 --> 00:31:46,880
like in the movie highlander

00:31:43,519 --> 00:31:48,480
there can there should be only one so

00:31:46,880 --> 00:31:50,960
hopefully you you have seen the movie

00:31:48,480 --> 00:31:54,000
and remember so otherwise my joke is

00:31:50,960 --> 00:31:56,880
uh waste here number four does debian

00:31:54,000 --> 00:31:59,519
also have such system feature

00:31:56,880 --> 00:32:00,080
can you please clarify what you mean by

00:31:59,519 --> 00:32:02,480
uh

00:32:00,080 --> 00:32:03,919
such system feature i'm not 100 sure

00:32:02,480 --> 00:32:06,640
which one it is

00:32:03,919 --> 00:32:10,159
we have 15 things that i've mentioned so

00:32:06,640 --> 00:32:10,159
is this related to snapshots

00:32:12,840 --> 00:32:16,399
okay um

00:32:16,799 --> 00:32:21,360
does debian have snapshotting

00:32:19,600 --> 00:32:24,320
functionality on its own

00:32:21,360 --> 00:32:25,919
to the best of my knowledge no most

00:32:24,320 --> 00:32:29,120
linux distributions

00:32:25,919 --> 00:32:32,240
don't have that because the file system

00:32:29,120 --> 00:32:35,039
isn't um isn't

00:32:32,240 --> 00:32:36,399
layered the file everything is basically

00:32:35,039 --> 00:32:38,240
shared

00:32:36,399 --> 00:32:39,600
some operating systems do have this for

00:32:38,240 --> 00:32:42,960
instance opensuse

00:32:39,600 --> 00:32:45,600
if you if you use butterfs has a

00:32:42,960 --> 00:32:46,640
tool called snapper which allows you to

00:32:45,600 --> 00:32:49,679
create

00:32:46,640 --> 00:32:52,159
butterfest snapshots and then

00:32:49,679 --> 00:32:53,600
you you have the ability to delta your

00:32:52,159 --> 00:32:55,360
system changes

00:32:53,600 --> 00:32:57,840
and if you don't like something you can

00:32:55,360 --> 00:32:59,679
then uh restore a previous version i

00:32:57,840 --> 00:33:02,000
think even through the boot menu

00:32:59,679 --> 00:33:04,240
uh if there are any open sources users

00:33:02,000 --> 00:33:05,760
who have used better effects and snapper

00:33:04,240 --> 00:33:08,080
you can maybe help out and add

00:33:05,760 --> 00:33:10,640
additional information here

00:33:08,080 --> 00:33:12,559
most distros and most systems linux

00:33:10,640 --> 00:33:15,600
systems don't have snapshot features

00:33:12,559 --> 00:33:16,640
you can implement your own uh mechanism

00:33:15,600 --> 00:33:20,399
with something like

00:33:16,640 --> 00:33:23,039
um uh time shift

00:33:20,399 --> 00:33:26,080
or you can do system imaging or you can

00:33:23,039 --> 00:33:30,240
just use our sync and create your own

00:33:26,080 --> 00:33:34,320
archives so whoever asked number four

00:33:30,240 --> 00:33:34,320
um i hope this answers your question

00:33:36,080 --> 00:33:41,679
thank you number six can you use the

00:33:39,679 --> 00:33:42,640
home interface to give each snap its own

00:33:41,679 --> 00:33:45,840
home directory

00:33:42,640 --> 00:33:48,559
mapping to an arbitrary location in the

00:33:45,840 --> 00:33:48,559
file system

00:33:49,600 --> 00:33:54,880
snaps don't necessarily have

00:33:52,640 --> 00:33:56,960
access to arbitrary locations because of

00:33:54,880 --> 00:34:00,399
the security confinement

00:33:56,960 --> 00:34:02,799
there is a confinement mode

00:34:00,399 --> 00:34:04,159
called classic which gives you system

00:34:02,799 --> 00:34:06,640
level permissions

00:34:04,159 --> 00:34:07,279
that one has arbitrary access to the

00:34:06,640 --> 00:34:09,520
system

00:34:07,279 --> 00:34:10,320
and it's necessary in some cases like

00:34:09,520 --> 00:34:13,280
for instance

00:34:10,320 --> 00:34:13,839
ides which need to access data in random

00:34:13,280 --> 00:34:18,159
places

00:34:13,839 --> 00:34:20,720
or even trigger arbitrary binaries

00:34:18,159 --> 00:34:22,159
strictly confined snaps are not designed

00:34:20,720 --> 00:34:25,520
to wander around the system

00:34:22,159 --> 00:34:27,119
and touch things that they don't belong

00:34:25,520 --> 00:34:30,800
to them

00:34:27,119 --> 00:34:34,320
so snaps yes they can have

00:34:30,800 --> 00:34:37,119
their own uh data uh

00:34:34,320 --> 00:34:38,000
repositories or they their own mini

00:34:37,119 --> 00:34:40,320
homes

00:34:38,000 --> 00:34:42,320
but then they need to be implemented in

00:34:40,320 --> 00:34:45,599
the application logic

00:34:42,320 --> 00:34:47,919
you could potentially say to your uh

00:34:45,599 --> 00:34:49,919
your snap could then write its

00:34:47,919 --> 00:34:51,040
configuration into a specific

00:34:49,919 --> 00:34:53,599
subdirectory

00:34:51,040 --> 00:34:54,320
or use a specific hidden file that can

00:34:53,599 --> 00:34:56,639
also be

00:34:54,320 --> 00:34:59,440
uh agreed upon from security's

00:34:56,639 --> 00:35:01,839
perspective with a store team

00:34:59,440 --> 00:35:04,000
and but there is also an element of

00:35:01,839 --> 00:35:05,200
replication logic it cannot be just a

00:35:04,000 --> 00:35:09,200
blind

00:35:05,200 --> 00:35:11,359
snapside change the the actual content

00:35:09,200 --> 00:35:13,040
of the snap also needs to be location

00:35:11,359 --> 00:35:15,040
aware in that sense

00:35:13,040 --> 00:35:16,880
otherwise if you just use something like

00:35:15,040 --> 00:35:18,480
documents or pictures

00:35:16,880 --> 00:35:20,720
it will assume it's the documents and

00:35:18,480 --> 00:35:23,200
pictures that are available to your home

00:35:20,720 --> 00:35:23,200
directory

00:35:25,280 --> 00:35:31,839
any other questions

00:35:38,079 --> 00:35:41,680
what okay question number seven what

00:35:40,480 --> 00:35:44,480
containerization

00:35:41,680 --> 00:35:44,960
tools are used in snap example bubble

00:35:44,480 --> 00:35:48,880
wrap

00:35:44,960 --> 00:35:49,520
in flat pack so the security confinement

00:35:48,880 --> 00:35:52,800
is done

00:35:49,520 --> 00:35:53,520
through multiple tools there's up armor

00:35:52,800 --> 00:35:56,720
rules

00:35:53,520 --> 00:35:58,800
there's sec comp and c groups

00:35:56,720 --> 00:36:00,160
those three give you pretty much the

00:35:58,800 --> 00:36:02,640
isolation

00:36:00,160 --> 00:36:03,440
uh from the underlying system you can

00:36:02,640 --> 00:36:06,480
actually

00:36:03,440 --> 00:36:07,839
inspect this if you have a snap system

00:36:06,480 --> 00:36:10,880
with snapd

00:36:07,839 --> 00:36:11,760
go under var snap and start exploring

00:36:10,880 --> 00:36:14,640
and you will

00:36:11,760 --> 00:36:16,000
see some rather interesting things or if

00:36:14,640 --> 00:36:18,720
you are code savvy

00:36:16,000 --> 00:36:21,200
and you really want to know the internal

00:36:18,720 --> 00:36:23,839
mechanisms of the snapdead service

00:36:21,200 --> 00:36:24,640
it's available on github source is there

00:36:23,839 --> 00:36:26,640
you can

00:36:24,640 --> 00:36:30,000
poke around and see what gives even

00:36:26,640 --> 00:36:30,000
compile your own version if you like

00:36:38,839 --> 00:36:41,839
questions

00:36:53,839 --> 00:36:57,520
we can also do a live practice of that

00:36:55,920 --> 00:37:00,079
funny sentence that i wrote in

00:36:57,520 --> 00:37:00,880
uh slide number 15 is how many snaps

00:37:00,079 --> 00:37:04,079
could

00:37:00,880 --> 00:37:05,280
snap snapshot if snapcode snapchat snaps

00:37:04,079 --> 00:37:08,560
and

00:37:05,280 --> 00:37:10,160
the winner gets don't know i'll leave it

00:37:08,560 --> 00:37:11,440
to the organizers of the conference to

00:37:10,160 --> 00:37:23,839
do it

00:37:11,440 --> 00:37:23,839
so yes question number eight

00:37:27,599 --> 00:37:34,720
what's the status of snap support across

00:37:31,280 --> 00:37:37,680
distros officially

00:37:34,720 --> 00:37:39,200
snapd can be installed and used on 40

00:37:37,680 --> 00:37:41,760
plus distributions

00:37:39,200 --> 00:37:42,720
including the debian family ubuntu

00:37:41,760 --> 00:37:47,040
family

00:37:42,720 --> 00:37:50,640
fedora uh red hat santos arch manjaro

00:37:47,040 --> 00:37:52,880
and a few others so if you

00:37:50,640 --> 00:37:54,480
are a user of one of the supported

00:37:52,880 --> 00:37:57,119
distributions

00:37:54,480 --> 00:37:57,760
snapd should run well your snap should

00:37:57,119 --> 00:38:00,079
run

00:37:57,760 --> 00:38:01,760
well or just as well as they run on an

00:38:00,079 --> 00:38:05,599
ubuntu system

00:38:01,760 --> 00:38:08,400
if they don't then we may have a problem

00:38:05,599 --> 00:38:10,320
with our tooling and if we definitely

00:38:08,400 --> 00:38:11,119
like to know about it so we can help

00:38:10,320 --> 00:38:13,599
improve

00:38:11,119 --> 00:38:14,400
and make your user experience just as

00:38:13,599 --> 00:38:17,520
good as

00:38:14,400 --> 00:38:19,760
as it is on say on ubuntu

00:38:17,520 --> 00:38:21,040
i mentioned this briefly in the office

00:38:19,760 --> 00:38:24,480
hours for instance

00:38:21,040 --> 00:38:25,599
uh in our engineering teams and we use

00:38:24,480 --> 00:38:27,839
we use different systems

00:38:25,599 --> 00:38:28,640
we have a couple of people with arch i

00:38:27,839 --> 00:38:31,280
myself

00:38:28,640 --> 00:38:33,119
use kubuntu so i have kd we have people

00:38:31,280 --> 00:38:34,160
who are on the latest version people who

00:38:33,119 --> 00:38:37,680
use

00:38:34,160 --> 00:38:39,760
latest lts people who use the latest

00:38:37,680 --> 00:38:42,000
interim release people who are on the

00:38:39,760 --> 00:38:42,880
previous lts we do try to vary a little

00:38:42,000 --> 00:38:46,160
bit

00:38:42,880 --> 00:38:48,000
so that we don't just test one thing and

00:38:46,160 --> 00:38:50,240
say okay if it works in ubuntu

00:38:48,000 --> 00:38:52,000
it's perfect we also try to make sure

00:38:50,240 --> 00:38:54,000
that other distributions

00:38:52,000 --> 00:38:56,160
are first-class citizens and that

00:38:54,000 --> 00:39:00,000
everyone has the same consistent

00:38:56,160 --> 00:39:01,920
experience that's not the case we would

00:39:00,000 --> 00:39:04,480
actually urge you to tell us so we can

00:39:01,920 --> 00:39:04,480
make it better

00:39:07,920 --> 00:39:11,359
number nine isn't so much a question

00:39:09,599 --> 00:39:15,440
it's more of a comment

00:39:11,359 --> 00:39:18,000
nobody uses fedora on the team

00:39:15,440 --> 00:39:19,440
okay uh it's it's a nice joke i'll allow

00:39:18,000 --> 00:39:21,440
it

00:39:19,440 --> 00:39:22,480
i hope this is not alesh being funny

00:39:21,440 --> 00:39:28,160
again because he

00:39:22,480 --> 00:39:31,520
ran out of his jokes quota yesterday

00:39:28,160 --> 00:39:31,520
any other questions

00:39:34,400 --> 00:39:43,839
any other questions

00:39:51,359 --> 00:39:55,920
here's a super interesting question

00:39:53,839 --> 00:39:57,200
number 10 other distributions spaces for

00:39:55,920 --> 00:40:00,079
snaps possible

00:39:57,200 --> 00:40:01,599
i presume you are talking about uh okay

00:40:00,079 --> 00:40:04,079
so for people who don't understand

00:40:01,599 --> 00:40:06,400
what this question is about because

00:40:04,079 --> 00:40:08,800
snaps run in an isolated manner

00:40:06,400 --> 00:40:10,400
they need to see some some some sort of

00:40:08,800 --> 00:40:14,240
a root file system

00:40:10,400 --> 00:40:16,000
so basically the uh the file system

00:40:14,240 --> 00:40:17,839
that is presented is something called

00:40:16,000 --> 00:40:21,200
base and it is

00:40:17,839 --> 00:40:23,680
uh equivalent to the

00:40:21,200 --> 00:40:25,040
ubuntu lts release based on the

00:40:23,680 --> 00:40:27,440
versioning so if you have

00:40:25,040 --> 00:40:28,319
something like core 18 then your

00:40:27,440 --> 00:40:30,960
underlying

00:40:28,319 --> 00:40:31,440
system your base will be ubuntu 1804 if

00:40:30,960 --> 00:40:34,560
it's core

00:40:31,440 --> 00:40:36,640
20 it will be 2004 and so forth

00:40:34,560 --> 00:40:38,000
but the question is then can we perhaps

00:40:36,640 --> 00:40:40,319
have something like a fedora

00:40:38,000 --> 00:40:41,280
core or maybe center escort or something

00:40:40,319 --> 00:40:43,040
something like that

00:40:41,280 --> 00:40:44,560
technically yes has that been

00:40:43,040 --> 00:40:47,200
implemented not

00:40:44,560 --> 00:40:47,839
to the best of my knowledge but if that

00:40:47,200 --> 00:40:50,079
can drive

00:40:47,839 --> 00:40:52,160
snap adoption or make the user

00:40:50,079 --> 00:40:54,960
experiences even better

00:40:52,160 --> 00:40:56,079
i think this is worth exploring maybe

00:40:54,960 --> 00:40:58,480
even

00:40:56,079 --> 00:41:00,240
working together so whoever has this

00:40:58,480 --> 00:41:01,920
question please reach out

00:41:00,240 --> 00:41:04,880
maybe we can explore this and make this

00:41:01,920 --> 00:41:04,880
a possibility

00:41:05,440 --> 00:41:10,480
sweet free desktop sounds good sounds

00:41:07,440 --> 00:41:12,160
interesting can you please reach out

00:41:10,480 --> 00:41:14,160
thank you very much this is i really

00:41:12,160 --> 00:41:15,520
like this and i'll i want to see how we

00:41:14,160 --> 00:41:18,839
can explore and make this

00:41:15,520 --> 00:41:21,280
maybe into a real possibility number

00:41:18,839 --> 00:41:22,319
eleven what's your favorite experimental

00:41:21,280 --> 00:41:24,079
feature

00:41:22,319 --> 00:41:25,440
uh i have to say parallels in parallel

00:41:24,079 --> 00:41:27,760
installs hands down

00:41:25,440 --> 00:41:29,520
it is so good because typically if you

00:41:27,760 --> 00:41:31,359
wanna have something that's

00:41:29,520 --> 00:41:32,640
parallel like on linux you download an

00:41:31,359 --> 00:41:35,040
archive from from

00:41:32,640 --> 00:41:35,920
a vendor if they offer their uh linux

00:41:35,040 --> 00:41:39,040
application as

00:41:35,920 --> 00:41:40,720
an archive you entire unzip the thing

00:41:39,040 --> 00:41:43,119
and then you just run it locally

00:41:40,720 --> 00:41:44,720
and this way you basically have a normal

00:41:43,119 --> 00:41:45,680
application it's available to the system

00:41:44,720 --> 00:41:48,640
menu you can have

00:41:45,680 --> 00:41:51,119
400 instances of it if you like and and

00:41:48,640 --> 00:41:54,160
and you can do crazy things

00:41:51,119 --> 00:41:55,440
so i recommend you test it and club a

00:41:54,160 --> 00:41:58,560
system with multiple versions of

00:41:55,440 --> 00:42:00,800
applications just see what gives

00:41:58,560 --> 00:42:01,680
12. do you know if there's some chance

00:42:00,800 --> 00:42:07,200
of fedora

00:42:01,680 --> 00:42:07,200
silver blue supporting snaps i think

00:42:07,280 --> 00:42:11,119
that question should be partially

00:42:09,359 --> 00:42:13,440
answered by the fedora team

00:42:11,119 --> 00:42:14,480
i don't know if we have anyone here i

00:42:13,440 --> 00:42:17,440
don't know

00:42:14,480 --> 00:42:18,160
who works on fedora and if they are here

00:42:17,440 --> 00:42:20,480
i uh

00:42:18,160 --> 00:42:21,920
welcome them to answer this or even if

00:42:20,480 --> 00:42:24,400
you want you can reach out by email

00:42:21,920 --> 00:42:27,440
and we'll see and and see how we can

00:42:24,400 --> 00:42:27,440
explore this potential

00:42:29,119 --> 00:42:34,560
we have three minutes uh so

00:42:32,400 --> 00:42:36,400
if there are any more questions please

00:42:34,560 --> 00:42:38,319
let's try to give

00:42:36,400 --> 00:42:44,000
let's see if i can answer it in the next

00:42:38,319 --> 00:42:59,839
three minutes

00:42:44,000 --> 00:42:59,839
more jokes from alesha

00:43:01,119 --> 00:43:04,960
number 13 how can we make sure

00:43:02,960 --> 00:43:06,640
developers update dependencies for

00:43:04,960 --> 00:43:10,079
security

00:43:06,640 --> 00:43:12,319
okay uh first on the snapstore side

00:43:10,079 --> 00:43:13,680
if you're a publisher and you have an

00:43:12,319 --> 00:43:15,359
account in the snapstore

00:43:13,680 --> 00:43:17,040
you will get email notifications that

00:43:15,359 --> 00:43:19,520
your snaps have

00:43:17,040 --> 00:43:20,560
out of date security packages at that

00:43:19,520 --> 00:43:22,640
point it is your

00:43:20,560 --> 00:43:23,760
due diligence as the publisher and the

00:43:22,640 --> 00:43:27,599
developer of

00:43:23,760 --> 00:43:30,160
of that snap to update it

00:43:27,599 --> 00:43:31,359
however there is always an element of

00:43:30,160 --> 00:43:33,839
human goodwill

00:43:31,359 --> 00:43:36,640
and application supportability on behalf

00:43:33,839 --> 00:43:40,000
of the developers

00:43:36,640 --> 00:43:43,599
so it's a two-way thing one we

00:43:40,000 --> 00:43:46,000
try to expose and make

00:43:43,599 --> 00:43:48,000
potential security issues visible to the

00:43:46,000 --> 00:43:51,520
publishers and developers

00:43:48,000 --> 00:43:54,400
and help them update their applications

00:43:51,520 --> 00:43:55,520
in a smooth manner but then there also

00:43:54,400 --> 00:43:57,599
has to be goodwill

00:43:55,520 --> 00:43:59,680
and desire from the publishers and

00:43:57,599 --> 00:44:03,520
maintainers and developers

00:43:59,680 --> 00:44:05,200
to keep their applications up to date so

00:44:03,520 --> 00:44:09,839
that will never be a complete solution

00:44:05,200 --> 00:44:09,839
without cooperation on both sides

00:44:10,640 --> 00:44:16,800
okay let's see what else is here um

00:44:14,880 --> 00:44:18,640
so there's one more comment on question

00:44:16,800 --> 00:44:20,480
number 12 whereby

00:44:18,640 --> 00:44:22,960
classic snipes use slash snap which is

00:44:20,480 --> 00:44:26,079
forbidden by rpm os3

00:44:22,960 --> 00:44:27,040
regular confined snaps work fine i

00:44:26,079 --> 00:44:30,240
understand

00:44:27,040 --> 00:44:33,680
classic confinement is never really a

00:44:30,240 --> 00:44:36,079
uh one for all solution but since this

00:44:33,680 --> 00:44:39,520
is a very interesting topic

00:44:36,079 --> 00:44:41,520
please reach out because there might be

00:44:39,520 --> 00:44:43,520
something in the works that

00:44:41,520 --> 00:44:46,000
we could think of and figure out how to

00:44:43,520 --> 00:44:46,000
fix this

00:44:46,400 --> 00:44:51,599
and i think i'm out of time and i need

00:44:48,640 --> 00:44:54,079
to hand over to the next presenter

00:44:51,599 --> 00:44:55,200
so please reach out to my email for any

00:44:54,079 --> 00:44:56,880
other questions

00:44:55,200 --> 00:44:58,720
uh i enjoyed the session today i would

00:44:56,880 --> 00:45:00,160
have loved to hear you because i enjoy

00:44:58,720 --> 00:45:02,319
human interaction

00:45:00,160 --> 00:45:04,880
uh if you have any other comments or

00:45:02,319 --> 00:45:06,560
jokes please reach out

00:45:04,880 --> 00:45:08,800
if you like this session give it a

00:45:06,560 --> 00:45:11,760
thumbs up as well that works

00:45:08,800 --> 00:45:12,960
hope to see you around and if you want

00:45:11,760 --> 00:45:14,720
to you need any help with snap

00:45:12,960 --> 00:45:16,240
development

00:45:14,720 --> 00:45:18,319
just knock on the door and we'll see

00:45:16,240 --> 00:45:22,720
what we can do together

00:45:18,319 --> 00:45:22,720

YouTube URL: https://www.youtube.com/watch?v=moZeiLwBA2Q


