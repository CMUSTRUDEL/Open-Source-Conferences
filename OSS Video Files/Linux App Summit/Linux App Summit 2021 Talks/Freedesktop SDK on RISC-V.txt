Title: Freedesktop SDK on RISC-V
Publication date: 2021-05-30
Playlist: Linux App Summit 2021 Talks
Description: 
	Freedesktop SDK is the base runtime and SDK for Flatpak applications.
RISC-V is a new open standard processor architecture.
Recently, some efforts have been made to prepare Freedesktop SDK to
RISC-V. We are now able to run RISC-V Flatpak application in emulators.
This short talk will explain where we are on the plan of releasing
Freedesktop SDK for RISC-V.



Author(s) Bio

Valentin is a software developer at Codethink. He contributes to Freedesktop SDK and GNOME build metadata.


Q&A


1. When is the new release with support for this will be available?
- Already answered :) August 2021

2. What's in it for CodeThink? Why are you investing in this?

3. How does RISC V relate to ARM, which is currenly very popular.
Captions: 
	00:00:01,439 --> 00:00:06,560
uh yes i'm vanata navida i work at cut

00:00:04,240 --> 00:00:09,280
think and um

00:00:06,560 --> 00:00:10,639
i also i'm a contributor for fedextap

00:00:09,280 --> 00:00:13,120
sdk

00:00:10,639 --> 00:00:14,480
and recently at quite think we have been

00:00:13,120 --> 00:00:18,000
looking at the porting

00:00:14,480 --> 00:00:19,279
fidest sdk to risk 5 and here is a small

00:00:18,000 --> 00:00:23,600
report of

00:00:19,279 --> 00:00:23,600
where we are where we are at

00:00:24,720 --> 00:00:28,320
so first background what is free desktop

00:00:27,439 --> 00:00:30,400
sdk

00:00:28,320 --> 00:00:32,239
this is the main flight background time

00:00:30,400 --> 00:00:35,280
so uh what do we

00:00:32,239 --> 00:00:38,800
what are we talking about uh uh about

00:00:35,280 --> 00:00:42,160
runtime is sorry is that

00:00:38,800 --> 00:00:44,399
um flat pack is a is like a

00:00:42,160 --> 00:00:45,680
container system for desktop

00:00:44,399 --> 00:00:48,000
applications

00:00:45,680 --> 00:00:50,480
and uh for every container you need to

00:00:48,000 --> 00:00:53,440
have a best system where you have the

00:00:50,480 --> 00:00:54,800
shared libraries that are needed for for

00:00:53,440 --> 00:00:58,160
the application

00:00:54,800 --> 00:01:00,000
so this is what we provide we also make

00:00:58,160 --> 00:01:02,160
we are also the best to make the run

00:01:00,000 --> 00:01:05,439
times the flat background time for gnome

00:01:02,160 --> 00:01:07,680
and kde and there are also

00:01:05,439 --> 00:01:09,680
other applications that other things

00:01:07,680 --> 00:01:12,320
that we do with a free desktop sdk

00:01:09,680 --> 00:01:12,880
including uh making bootable images for

00:01:12,320 --> 00:01:14,400
numbers

00:01:12,880 --> 00:01:17,360
at least we'll make the best so that we

00:01:14,400 --> 00:01:17,360
can make no mores

00:01:19,439 --> 00:01:24,720
freelancer sdk is not based on any

00:01:22,000 --> 00:01:28,080
distribution it's all built from scratch

00:01:24,720 --> 00:01:32,320
and this is built with build stream

00:01:28,080 --> 00:01:35,520
just to be clear free desktop sdk

00:01:32,320 --> 00:01:37,439
is a part of physics stub but what is

00:01:35,520 --> 00:01:38,560
infrared stop sdk is not necessary for

00:01:37,439 --> 00:01:40,640
the stop so there is no

00:01:38,560 --> 00:01:44,159
uh announcement from fredestev when

00:01:40,640 --> 00:01:44,159
there is something in for destiny

00:01:45,680 --> 00:01:50,720
risk five it's a instructional set

00:01:49,200 --> 00:01:54,240
architecture for a cpu

00:01:50,720 --> 00:01:58,240
and and the specification of this uh

00:01:54,240 --> 00:01:58,240
uh is open source so

00:01:58,880 --> 00:02:02,560
um this is very nice that we are getting

00:02:01,680 --> 00:02:05,200
there where

00:02:02,560 --> 00:02:06,159
uh the hardware start to be open source

00:02:05,200 --> 00:02:07,520
um

00:02:06,159 --> 00:02:09,440
that doesn't mean that the other that

00:02:07,520 --> 00:02:11,120
you will have as three five is

00:02:09,440 --> 00:02:13,200
necessary open source there would be

00:02:11,120 --> 00:02:14,400
bits that are not but at least the

00:02:13,200 --> 00:02:18,239
specification of

00:02:14,400 --> 00:02:21,440
the how the cpu should uh

00:02:18,239 --> 00:02:25,120
work uh is there are uh

00:02:21,440 --> 00:02:30,400
risk five there are multiple um

00:02:25,120 --> 00:02:32,080
uh uh things it can be 32 64 128 bits

00:02:30,400 --> 00:02:34,160
so it's different processors it's a set

00:02:32,080 --> 00:02:37,200
of different processors and for each

00:02:34,160 --> 00:02:39,120
there is extensions for multiple

00:02:37,200 --> 00:02:40,800
different applications for example you

00:02:39,120 --> 00:02:42,400
might want to make a risk five make

00:02:40,800 --> 00:02:44,720
microcontroller for very

00:02:42,400 --> 00:02:46,080
small embedded things but you can also

00:02:44,720 --> 00:02:49,200
maybe make a

00:02:46,080 --> 00:02:51,760
a processor for supercomputer so

00:02:49,200 --> 00:02:53,360
it covers lots of applications that need

00:02:51,760 --> 00:02:55,920
a microprocessor

00:02:53,360 --> 00:02:57,280
but that also includes uh desktop so we

00:02:55,920 --> 00:03:00,640
have to escape

00:02:57,280 --> 00:03:03,519
expect that we will see uh some

00:03:00,640 --> 00:03:04,560
uh uh some desktop computer at some

00:03:03,519 --> 00:03:08,640
point that will use the

00:03:04,560 --> 00:03:08,640
prescriber i hope we will get there

00:03:09,280 --> 00:03:13,680
uh it's the right time for us so we want

00:03:12,080 --> 00:03:16,800
to get the free stuff basically

00:03:13,680 --> 00:03:18,400
uh to risk fab because we know that it

00:03:16,800 --> 00:03:19,120
will be used and it's the right time for

00:03:18,400 --> 00:03:22,560
us because

00:03:19,120 --> 00:03:23,519
first the all the main parts of the free

00:03:22,560 --> 00:03:27,360
software

00:03:23,519 --> 00:03:30,560
have been ported uh to risk five

00:03:27,360 --> 00:03:33,080
um and these have started in um

00:03:30,560 --> 00:03:34,560
things started to be merged upstream in

00:03:33,080 --> 00:03:38,319
2017 with

00:03:34,560 --> 00:03:41,760
vintages and gcc and then and then later

00:03:38,319 --> 00:03:43,840
we got everything we needed uh and

00:03:41,760 --> 00:03:45,360
recently the last big piece for us

00:03:43,840 --> 00:03:47,360
freelance sdk was merch

00:03:45,360 --> 00:03:48,879
which was go it's not part of the flat

00:03:47,360 --> 00:03:50,319
background time but we still depend on

00:03:48,879 --> 00:03:54,159
it for other things

00:03:50,319 --> 00:03:57,200
like for example the gnomo s things

00:03:54,159 --> 00:04:00,799
so so pieces are

00:03:57,200 --> 00:04:03,439
here and also the second thing is that

00:04:00,799 --> 00:04:04,959
there is some experimental hardware that

00:04:03,439 --> 00:04:08,720
is going to be really soon

00:04:04,959 --> 00:04:10,799
that will be able to uh do have some

00:04:08,720 --> 00:04:11,760
okay experience with uh desktop

00:04:10,799 --> 00:04:13,680
application so

00:04:11,760 --> 00:04:16,080
it's nice to be able to test as early as

00:04:13,680 --> 00:04:16,080
possible

00:04:18,079 --> 00:04:25,600
so uh to build it uh first

00:04:21,680 --> 00:04:29,759
we've built we targeted only uh uh one

00:04:25,600 --> 00:04:31,680
kind of risk so the 64 with the main

00:04:29,759 --> 00:04:33,040
extension that are expected to be in

00:04:31,680 --> 00:04:35,919
desktop so this is a

00:04:33,040 --> 00:04:38,720
default actually for the 64-bit risk 5

00:04:35,919 --> 00:04:38,720
for gcc

00:04:40,840 --> 00:04:44,960
um

00:04:42,000 --> 00:04:46,960
the the development has not been that

00:04:44,960 --> 00:04:49,280
difficult because

00:04:46,960 --> 00:04:50,720
first of all uh free desktop sdk uh

00:04:49,280 --> 00:04:53,040
bootstrap parts so the

00:04:50,720 --> 00:04:55,120
when we build the minimal system that

00:04:53,040 --> 00:04:58,160
has for example gcc being your team

00:04:55,120 --> 00:05:01,199
glypc bash mac and things like that

00:04:58,160 --> 00:05:01,919
this part can be cross compiled so we

00:05:01,199 --> 00:05:04,000
can make

00:05:01,919 --> 00:05:06,800
uh a part two new system as long as we

00:05:04,000 --> 00:05:06,800
have the uh

00:05:07,280 --> 00:05:14,160
all the support in the little gym

00:05:12,000 --> 00:05:15,680
but the rest needs to build on the

00:05:14,160 --> 00:05:16,960
target architecture because there are so

00:05:15,680 --> 00:05:19,440
many projects that

00:05:16,960 --> 00:05:21,440
uh are very difficult to cross compile

00:05:19,440 --> 00:05:23,199
and we need to have so many patches to

00:05:21,440 --> 00:05:24,720
deal with it so we don't cross compile

00:05:23,199 --> 00:05:25,680
the rest that means that we need

00:05:24,720 --> 00:05:27,360
hardware

00:05:25,680 --> 00:05:28,800
but we don't have hardware yet in for

00:05:27,360 --> 00:05:30,320
desktop sdk

00:05:28,800 --> 00:05:33,039
uh or at least we don't have the

00:05:30,320 --> 00:05:35,440
hardware that is capable of building it

00:05:33,039 --> 00:05:37,520
because we need a lot of memory uh so

00:05:35,440 --> 00:05:40,240
what we have done is using qmu

00:05:37,520 --> 00:05:40,240
for emulation

00:05:40,720 --> 00:05:44,479
uh in qme there's two kind of uh

00:05:43,520 --> 00:05:47,199
emulation that is

00:05:44,479 --> 00:05:48,320
the system uh emulation where you you

00:05:47,199 --> 00:05:49,919
boot an os

00:05:48,320 --> 00:05:51,520
but there is also the user emulation

00:05:49,919 --> 00:05:53,199
where you can just say i have a binary

00:05:51,520 --> 00:05:53,680
this is for a different architecture but

00:05:53,199 --> 00:05:55,759
i want you

00:05:53,680 --> 00:05:57,039
to run it on this current kernel that

00:05:55,759 --> 00:05:58,240
i'm running which is another

00:05:57,039 --> 00:06:01,600
architecture and it won't

00:05:58,240 --> 00:06:03,680
translate the system calls to the

00:06:01,600 --> 00:06:06,400
to the current architecture so you can

00:06:03,680 --> 00:06:07,840
just run the binary in your system so we

00:06:06,400 --> 00:06:10,639
went for this user mode

00:06:07,840 --> 00:06:11,120
where we just execute the binary because

00:06:10,639 --> 00:06:12,639
it was

00:06:11,120 --> 00:06:14,880
better for us first we don't have to

00:06:12,639 --> 00:06:15,440
depend on the on a distribution that was

00:06:14,880 --> 00:06:17,759
built for

00:06:15,440 --> 00:06:18,560
risk five so we don't have to deal with

00:06:17,759 --> 00:06:22,000
this

00:06:18,560 --> 00:06:24,240
uh and um we can build everything at

00:06:22,000 --> 00:06:26,240
once as we start to build something that

00:06:24,240 --> 00:06:27,600
uh to the bootstrap that does cost

00:06:26,240 --> 00:06:31,440
compiling and then after we

00:06:27,600 --> 00:06:32,319
just switch uh to uh building on risk

00:06:31,440 --> 00:06:33,919
five

00:06:32,319 --> 00:06:36,560
and everything happened in the same

00:06:33,919 --> 00:06:38,800
machine it's also a bit faster

00:06:36,560 --> 00:06:40,400
uh but there was a thing is that we

00:06:38,800 --> 00:06:42,960
found that it hangs sometimes

00:06:40,400 --> 00:06:45,199
and the main problem was cargo from rust

00:06:42,960 --> 00:06:48,319
that was hanging

00:06:45,199 --> 00:06:50,160
we have uh found that with a just a

00:06:48,319 --> 00:06:51,280
simple uh environment variable we could

00:06:50,160 --> 00:06:53,840
just walk around

00:06:51,280 --> 00:06:54,400
uh this uh hopefully one day we'll be

00:06:53,840 --> 00:06:56,479
able to

00:06:54,400 --> 00:06:57,680
fix the bug in qme but it's a very

00:06:56,479 --> 00:07:02,000
difficult bug to

00:06:57,680 --> 00:07:06,080
to fix but that works

00:07:02,000 --> 00:07:06,720
um so most of the upstream thing that

00:07:06,080 --> 00:07:08,960
we're

00:07:06,720 --> 00:07:10,080
concerned by uh supporting risk fives

00:07:08,960 --> 00:07:10,800
that has assembled these things like

00:07:10,080 --> 00:07:12,960
that

00:07:10,800 --> 00:07:14,639
they were already supported in risk five

00:07:12,960 --> 00:07:17,919
and the rest was just minor

00:07:14,639 --> 00:07:19,120
fixes so we didn't we had lots of small

00:07:17,919 --> 00:07:20,800
fixes and lots of

00:07:19,120 --> 00:07:22,639
updates to make sure that we had the

00:07:20,800 --> 00:07:24,400
last upstream version

00:07:22,639 --> 00:07:25,759
there are few things that we didn't get

00:07:24,400 --> 00:07:28,960
to to get and

00:07:25,759 --> 00:07:31,280
uh uh two were

00:07:28,960 --> 00:07:32,800
for mostly for debugging so valgrind

00:07:31,280 --> 00:07:33,120
which is a very nice tool but it's not

00:07:32,800 --> 00:07:36,400
yet

00:07:33,120 --> 00:07:38,639
uh available for risk five and liban

00:07:36,400 --> 00:07:40,160
unwind in practice can be used for a lot

00:07:38,639 --> 00:07:42,240
of a different application but

00:07:40,160 --> 00:07:43,440
uh well in theory it can be useful for a

00:07:42,240 --> 00:07:45,360
lot of applications but

00:07:43,440 --> 00:07:46,560
in practice it's been used only for

00:07:45,360 --> 00:07:48,560
debugging

00:07:46,560 --> 00:07:50,240
and we can disable this so we can

00:07:48,560 --> 00:07:52,479
provide a freelancer basically with a

00:07:50,240 --> 00:07:54,319
liben wine and it's fine another thing

00:07:52,479 --> 00:07:56,639
is that the

00:07:54,319 --> 00:07:57,759
compatible regular expressions don't

00:07:56,639 --> 00:07:59,520
have jit compiler so

00:07:57,759 --> 00:08:01,520
they might be a bit slower but this is a

00:07:59,520 --> 00:08:03,840
minor thing we have also looked at

00:08:01,520 --> 00:08:05,440
the minimum sdk and we have not found

00:08:03,840 --> 00:08:10,240
anything very special there

00:08:05,440 --> 00:08:10,240
so everything should be there

00:08:10,840 --> 00:08:17,120
um what if you want to

00:08:13,840 --> 00:08:20,000
uh build your flat pack application to

00:08:17,120 --> 00:08:22,879
for risk five uh well it's possible um

00:08:20,000 --> 00:08:24,840
you probably need to have some

00:08:22,879 --> 00:08:26,240
technical background but it will be very

00:08:24,840 --> 00:08:28,000
quick the

00:08:26,240 --> 00:08:30,080
the the first thing you will need is you

00:08:28,000 --> 00:08:32,719
need to have your user on your machine

00:08:30,080 --> 00:08:37,200
and you will need uh

00:08:32,719 --> 00:08:39,919
uh uh for risk five and you will need to

00:08:37,200 --> 00:08:41,120
set up the bin fmt missed so you can run

00:08:39,919 --> 00:08:44,959
directly

00:08:41,120 --> 00:08:46,880
uh the right uh the the qma uh

00:08:44,959 --> 00:08:48,560
when you call any binary that is far

00:08:46,880 --> 00:08:49,680
risk five the second thing is that you

00:08:48,560 --> 00:08:50,399
will have to build free desktop

00:08:49,680 --> 00:08:52,959
basically

00:08:50,399 --> 00:08:55,600
for the month the first stop basically

00:08:52,959 --> 00:08:57,680
uh run times for risk five

00:08:55,600 --> 00:08:59,680
are not published yet so you will have

00:08:57,680 --> 00:09:02,240
to build it on your own

00:08:59,680 --> 00:09:04,000
um then after you will get the reboot

00:09:02,240 --> 00:09:07,200
you will have to install it on your own

00:09:04,000 --> 00:09:10,000
on your computer uh and then after

00:09:07,200 --> 00:09:11,600
uh you will probably be depending if you

00:09:10,000 --> 00:09:12,080
use rest for example you will probably

00:09:11,600 --> 00:09:14,800
have to

00:09:12,080 --> 00:09:15,279
uh define the same environment variable

00:09:14,800 --> 00:09:17,839
that you

00:09:15,279 --> 00:09:19,360
that we used in your manifest and then

00:09:17,839 --> 00:09:19,920
after you just have to call flat tag

00:09:19,360 --> 00:09:22,480
builder

00:09:19,920 --> 00:09:23,040
uh and just say we want the the the

00:09:22,480 --> 00:09:26,880
right

00:09:23,040 --> 00:09:28,800
uh arch uh architecture

00:09:26,880 --> 00:09:31,440
and then it will build and then after

00:09:28,800 --> 00:09:31,440
you can test

00:09:32,640 --> 00:09:37,920
so uh a few months ago we tested that we

00:09:36,240 --> 00:09:40,080
wanted to be sure that we can

00:09:37,920 --> 00:09:40,959
build a flat application for risk five

00:09:40,080 --> 00:09:43,440
and this is actually

00:09:40,959 --> 00:09:44,240
uh running in the virtual machine the

00:09:43,440 --> 00:09:46,560
result

00:09:44,240 --> 00:09:49,040
this was super tux cart that we took

00:09:46,560 --> 00:09:49,760
from a flat hub and we just adapted few

00:09:49,040 --> 00:09:52,160
things

00:09:49,760 --> 00:09:53,680
and we build we build it with the

00:09:52,160 --> 00:09:55,760
instruction i get before and

00:09:53,680 --> 00:09:57,920
and this is running by the way what you

00:09:55,760 --> 00:09:59,360
see around is that just a bootable test

00:09:57,920 --> 00:10:00,000
image that we have in freestyle

00:09:59,360 --> 00:10:02,320
basically

00:10:00,000 --> 00:10:04,079
that gets a bootable image that has a

00:10:02,320 --> 00:10:04,880
western and flat pack so we can test

00:10:04,079 --> 00:10:06,560
flat pack

00:10:04,880 --> 00:10:10,160
by the way flatback works in risk five

00:10:06,560 --> 00:10:10,160
there is nothing special about this

00:10:11,360 --> 00:10:18,160
um what now uh

00:10:15,360 --> 00:10:19,200
we need to publish uh the of basically

00:10:18,160 --> 00:10:20,959
for risk 5

00:10:19,200 --> 00:10:22,320
it will be published in august there

00:10:20,959 --> 00:10:25,680
will be a new release

00:10:22,320 --> 00:10:26,640
and um that would be just for testing we

00:10:25,680 --> 00:10:28,640
don't expect that

00:10:26,640 --> 00:10:30,079
this would be something really used and

00:10:28,640 --> 00:10:32,160
this will not be on facebook

00:10:30,079 --> 00:10:34,000
i would love to download it from the

00:10:32,160 --> 00:10:37,279
freestyle sdk uh

00:10:34,000 --> 00:10:38,000
flat pack purpose theory uh we need to

00:10:37,279 --> 00:10:40,560
get

00:10:38,000 --> 00:10:42,880
we hope to get hardware soon that is

00:10:40,560 --> 00:10:45,360
capable of doing uh

00:10:42,880 --> 00:10:46,240
to build in the ci so to have builder so

00:10:45,360 --> 00:10:49,279
you will stop

00:10:46,240 --> 00:10:51,360
using qmu this is a temporary thing

00:10:49,279 --> 00:10:53,120
we also need to prepare the builder

00:10:51,360 --> 00:10:55,760
images because the

00:10:53,120 --> 00:10:56,160
the way the ci works for desktop sdk is

00:10:55,760 --> 00:10:58,000
that

00:10:56,160 --> 00:10:59,279
all docker images that we use are based

00:10:58,000 --> 00:11:01,680
on free desktop sdk

00:10:59,279 --> 00:11:04,000
so we really uh do dog footing and we

00:11:01,680 --> 00:11:05,839
just use fedestar basically everywhere

00:11:04,000 --> 00:11:07,519
so we have to take care of that but it's

00:11:05,839 --> 00:11:09,839
not very much difficult

00:11:07,519 --> 00:11:12,480
we know it it will probably work with we

00:11:09,839 --> 00:11:16,160
have all the pieces there

00:11:12,480 --> 00:11:19,279
and uh well the question is now

00:11:16,160 --> 00:11:21,600
when we will when will we have hardware

00:11:19,279 --> 00:11:22,560
flat pub that is capable of building a

00:11:21,600 --> 00:11:24,160
risk five

00:11:22,560 --> 00:11:26,480
that's a question that i don't have the

00:11:24,160 --> 00:11:26,480
answer

00:11:27,760 --> 00:11:34,880
um the work that was done uh

00:11:31,040 --> 00:11:38,079
on this project uh was done by

00:11:34,880 --> 00:11:39,920
a few engineers uh at cutting um a lot

00:11:38,079 --> 00:11:44,480
of comments where he came from james

00:11:39,920 --> 00:11:48,640
um so thank you for him and um

00:11:44,480 --> 00:11:51,839
uh frieza basically it is not um

00:11:48,640 --> 00:11:55,600
a cutting project we try to uh

00:11:51,839 --> 00:11:56,639
invest time uh uh in it and getting

00:11:55,600 --> 00:11:59,440
getting it there but there is

00:11:56,639 --> 00:12:03,120
independent there so if you are uh

00:11:59,440 --> 00:12:04,880
we need we need a community there and we

00:12:03,120 --> 00:12:07,230
need more um

00:12:04,880 --> 00:12:08,720
uh um

00:12:07,230 --> 00:12:10,639
[Music]

00:12:08,720 --> 00:12:12,720
contributors if you are interested for

00:12:10,639 --> 00:12:15,519
example the in uh contributing in uh

00:12:12,720 --> 00:12:17,120
publishing us the snap for a free

00:12:15,519 --> 00:12:18,240
desktop sdk we are looking for people

00:12:17,120 --> 00:12:22,240
who can do that in the

00:12:18,240 --> 00:12:25,200
in in the community uh come on they are

00:12:22,240 --> 00:12:27,200
channel for coding uh we are hiring

00:12:25,200 --> 00:12:28,079
these days so there's this url uh you

00:12:27,200 --> 00:12:31,760
can follow that

00:12:28,079 --> 00:12:34,320
and uh and and uh all the information is

00:12:31,760 --> 00:12:36,160
there if you want to work a good thing

00:12:34,320 --> 00:12:37,600
this is a short talk because we didn't

00:12:36,160 --> 00:12:39,440
know if we would have so much

00:12:37,600 --> 00:12:41,120
material to talk about but there is more

00:12:39,440 --> 00:12:44,000
things that that's coming at wedx so

00:12:41,120 --> 00:12:47,200
see you there are there any questions i

00:12:44,000 --> 00:12:47,200
will go to the share nuts

00:12:50,480 --> 00:12:56,320
yeah yes so the first was uh when

00:12:53,920 --> 00:12:57,360
it will be available the build will be

00:12:56,320 --> 00:12:59,600
for testing in

00:12:57,360 --> 00:13:00,560
august we can you can already it's

00:12:59,600 --> 00:13:02,560
already merged

00:13:00,560 --> 00:13:03,839
so if you check out the master and you

00:13:02,560 --> 00:13:06,320
build that you get it

00:13:03,839 --> 00:13:07,760
and you and it's one like command line

00:13:06,320 --> 00:13:10,320
make

00:13:07,760 --> 00:13:12,000
export with setting the arch to the

00:13:10,320 --> 00:13:15,200
right architecture and it will just

00:13:12,000 --> 00:13:18,800
make your repository

00:13:15,200 --> 00:13:21,279
uh or it's

00:13:18,800 --> 00:13:22,079
what's what's in it for quite think uh

00:13:21,279 --> 00:13:25,279
it's uh

00:13:22,079 --> 00:13:27,519
so we have

00:13:25,279 --> 00:13:29,200
we use this tool called b streams this

00:13:27,519 --> 00:13:32,560
which is also independent is a

00:13:29,200 --> 00:13:35,839
apache project uh but uh we

00:13:32,560 --> 00:13:38,079
provide um uh consultancy in

00:13:35,839 --> 00:13:39,040
advancing and uh and one of the things

00:13:38,079 --> 00:13:41,440
that we provide is

00:13:39,040 --> 00:13:42,160
consistency on on on building things and

00:13:41,440 --> 00:13:46,320
and

00:13:42,160 --> 00:13:49,519
and including build stream so

00:13:46,320 --> 00:13:52,800
uh free stuff sdk is a very good uh

00:13:49,519 --> 00:13:54,000
case for testing bloodstream and making

00:13:52,800 --> 00:13:59,199
sure that it works and

00:13:54,000 --> 00:13:59,199
uh and yeah that's that's

00:14:00,000 --> 00:14:05,839
that's what it is

00:14:03,760 --> 00:14:06,800
but yeah also blitzing is in the also

00:14:05,839 --> 00:14:09,360
independent but uh

00:14:06,800 --> 00:14:10,320
it's just uh it's just we need we need

00:14:09,360 --> 00:14:13,839
tools

00:14:10,320 --> 00:14:16,480
to provide consistency on just uh if we

00:14:13,839 --> 00:14:16,959
go to customer we need to to have some

00:14:16,480 --> 00:14:20,079
solution

00:14:16,959 --> 00:14:31,839
on things that we

00:14:20,079 --> 00:14:31,839
yeah that's it

00:14:41,519 --> 00:14:46,240
okay how does the risk 5 relate to arm

00:14:46,720 --> 00:14:50,240
which is currently popular

00:14:51,040 --> 00:14:55,279
i think i i so i don't know much of the

00:14:54,399 --> 00:14:57,680
assembly part

00:14:55,279 --> 00:14:58,320
i mean how would the technical part of

00:14:57,680 --> 00:15:01,519
of

00:14:58,320 --> 00:15:05,680
of arm i i've noticed there is

00:15:01,519 --> 00:15:08,720
some similarity of how things are

00:15:05,680 --> 00:15:09,360
uh of the design um there are there are

00:15:08,720 --> 00:15:12,800
both

00:15:09,360 --> 00:15:13,519
risk kind of uh processors and then they

00:15:12,800 --> 00:15:15,519
have some

00:15:13,519 --> 00:15:16,880
similarities in some of the designs i

00:15:15,519 --> 00:15:18,399
think they're in the addressing for

00:15:16,880 --> 00:15:21,760
example and things like that

00:15:18,399 --> 00:15:24,880
um but i don't know the details

00:15:21,760 --> 00:15:26,000
uh but the open source uh of the

00:15:24,880 --> 00:15:28,720
specification is is

00:15:26,000 --> 00:15:30,560
a good thing because the the arm is the

00:15:28,720 --> 00:15:32,399
company and uh

00:15:30,560 --> 00:15:33,680
and to be able to make an arm processor

00:15:32,399 --> 00:15:35,680
if you if you want to make a system on

00:15:33,680 --> 00:15:38,160
the chip right

00:15:35,680 --> 00:15:39,199
with some pieces and it has the arm core

00:15:38,160 --> 00:15:42,480
in it

00:15:39,199 --> 00:15:45,600
you will need you need to pay uh

00:15:42,480 --> 00:15:49,360
you will need to to to pay uh

00:15:45,600 --> 00:15:52,560
uh arm whereas um

00:15:49,360 --> 00:15:53,600
uh risk five you can choose where ever

00:15:52,560 --> 00:15:55,759
you develop

00:15:53,600 --> 00:15:58,399
yourself the core or you find someone

00:15:55,759 --> 00:16:03,839
else will develop a risk five core that

00:15:58,399 --> 00:16:07,199
uh and you can change

00:16:03,839 --> 00:16:10,560
at any time of your design the core

00:16:07,199 --> 00:16:12,959
and you stay on the same uh

00:16:10,560 --> 00:16:15,120
instruction set so your banner is stay

00:16:12,959 --> 00:16:17,519
compatible so i think uh i

00:16:15,120 --> 00:16:18,160
i think that the the main important

00:16:17,519 --> 00:16:21,440
thing

00:16:18,160 --> 00:16:24,800
and also uh for um i know that

00:16:21,440 --> 00:16:24,800
for example for um

00:16:24,880 --> 00:16:29,440
for for university it's better to work

00:16:28,320 --> 00:16:32,880
on risk five than

00:16:29,440 --> 00:16:37,839
um for the issue of

00:16:32,880 --> 00:16:37,839

YouTube URL: https://www.youtube.com/watch?v=INTbqkck258


