Title: Building the Linux Vendor Firmware Service: Forcing Hardware Vendors to care about Linux users
Publication date: 2021-05-30
Playlist: Linux App Summit 2021 Talks
Description: 
	The LVFS started as a side project running on a server under my stairs. In the last five years we’ve grown fwupd and the LVFS to the point where it’s a Linux Foundation project, listed on government purchase requirements and included on the CVs of people looking for jobs in the industry. Vendors now need to interact with the ecosystem we’ve built to get the Works With ChromeBook certification from Google, and Lenovo and Dell choose hardware partners based on how they work upstream with the LVFS and fwupd.

In the last 5 years we’ve built something that dozens of people are paid to work on and has provided more than 25 million firmware files to end users. We have used a few tricks over the years to convince vendors to “join the LVFS” and this talk will give lots of examples on how we grew the ecosystem from nothing into something that CTOs talk about over lunch.

I think a lot of the problems I’ve encountered building this project might be interesting to people trying to build a similar app ecosystem for Linux users.



Author(s) Bio

Richard has over 15 years of experience developing open source software.

He is the maintainer of fwupd, the LVFS, GNOME Software, AppStream-glib, PackageKit, gnome-packagekit, gnome-color-manager, colord, and UPower and also contributes to many other projects and opensource standards.

Richard graduated in 2007 from the University of Surrey with a Masters in Electronics Engineering. He now works as a principle engineer for Red Hat. Richard's outside interests include taking photos, eating good food and looking after his two daughters.



Twitter and/or Mastodon Handle

@hughsient


Q&A


1. How hard is to get into the firmware world without very little experience? When you graduate, how hard is to find a company that hires you and actually provides lectures to complete your knowledge about programming and all the ecosystem around firmware, hardware, etc?

2. How do you persuade companies to add their hardware firmwire to LVFS and is some companies easier to persuade then others as the GNU/Linux desktop market is just 2-3% ?

3. What are the most stubborn vendors that don't offer support or does the bare minimum to LVFS? Which ones are the best players?

4. Would you envision lvfs being used on more bespoke systems like cars and other iot devices using linux in general?
Captions: 
	00:00:01,040 --> 00:00:06,319
excellent well hello everybody

00:00:03,199 --> 00:00:07,120
um my name is richard hughes um i work

00:00:06,319 --> 00:00:10,320
for red hat

00:00:07,120 --> 00:00:13,840
um on emerging technologies

00:00:10,320 --> 00:00:16,560
and desktop stuff and found my stuff

00:00:13,840 --> 00:00:17,680
and i was asked by sorry and allison to

00:00:16,560 --> 00:00:20,560
give a talk about

00:00:17,680 --> 00:00:21,600
how to basically build an ecosystem um

00:00:20,560 --> 00:00:23,920
on the logic is

00:00:21,600 --> 00:00:25,199
that i've worked on this stuff for like

00:00:23,920 --> 00:00:27,039
five years now

00:00:25,199 --> 00:00:28,880
we've managed to get companies to care

00:00:27,039 --> 00:00:30,000
about linux users where perhaps they

00:00:28,880 --> 00:00:31,760
haven't in the past

00:00:30,000 --> 00:00:34,079
and there's an awful lot of overlap

00:00:31,760 --> 00:00:38,399
between a firmware ecosystem

00:00:34,079 --> 00:00:42,840
and um an app ecosystem

00:00:38,399 --> 00:00:45,600
right let's do next slide so

00:00:42,840 --> 00:00:48,399
um the basic problem we're trying to

00:00:45,600 --> 00:00:50,559
solve five years ago um is that users

00:00:48,399 --> 00:00:52,320
just weren't updating firmware

00:00:50,559 --> 00:00:53,600
then there's not this thing anymore that

00:00:52,320 --> 00:00:55,520
is just to kind of like

00:00:53,600 --> 00:00:57,760
add support for new cpus and that kind

00:00:55,520 --> 00:00:59,760
of stuff it's actually security critical

00:00:57,760 --> 00:01:01,280
it's like an os underneath your os

00:00:59,760 --> 00:01:03,920
and so not updating firmware as a

00:01:01,280 --> 00:01:05,840
security um a nightmare

00:01:03,920 --> 00:01:07,119
so the problems are four-fold people

00:01:05,840 --> 00:01:08,240
didn't know how hardware they had

00:01:07,119 --> 00:01:11,600
installed whether it was

00:01:08,240 --> 00:01:13,280
nvme drive an ata drive etc um they

00:01:11,600 --> 00:01:15,200
didn't know updates were available

00:01:13,280 --> 00:01:16,799
so they didn't go to support.dell.com on

00:01:15,200 --> 00:01:18,960
a monthly basis and search for their

00:01:16,799 --> 00:01:20,880
serial numbers and stuff

00:01:18,960 --> 00:01:22,240
and even if they could get hold of them

00:01:20,880 --> 00:01:23,119
a lot of the vendors were supplying the

00:01:22,240 --> 00:01:26,240
files just from

00:01:23,119 --> 00:01:28,720
random well literally ftp sites

00:01:26,240 --> 00:01:30,880
with if you were lucky in md5 checks on

00:01:28,720 --> 00:01:31,520
without any kind of certificates or any

00:01:30,880 --> 00:01:32,880
sort of

00:01:31,520 --> 00:01:35,600
assurance that the film i hadn't been

00:01:32,880 --> 00:01:37,439
tampered with in some way

00:01:35,600 --> 00:01:38,640
and then even if you did manage to find

00:01:37,439 --> 00:01:40,240
the firmware

00:01:38,640 --> 00:01:42,079
um it might be that you were not allowed

00:01:40,240 --> 00:01:42,720
to apply it so a good example here is i

00:01:42,079 --> 00:01:44,799
have a

00:01:42,720 --> 00:01:45,840
lg monitor i use and the only way you

00:01:44,799 --> 00:01:47,840
can play the firmware

00:01:45,840 --> 00:01:49,360
is using windows xp or windows 7 doesn't

00:01:47,840 --> 00:01:51,920
like windows 10

00:01:49,360 --> 00:01:53,520
or i have a blemish server which has x

00:01:51,920 --> 00:01:55,600
clarity on it and that only works in

00:01:53,520 --> 00:01:57,360
well seven doesn't work in relay or roll

00:01:55,600 --> 00:01:58,880
nine

00:01:57,360 --> 00:02:00,880
so even if you managed to find the

00:01:58,880 --> 00:02:02,560
updates um

00:02:00,880 --> 00:02:04,079
and it might be that the vendor that you

00:02:02,560 --> 00:02:05,920
um bought the laptop from if you had

00:02:04,079 --> 00:02:07,200
bought the unifying receiver at the same

00:02:05,920 --> 00:02:08,800
time from the dell

00:02:07,200 --> 00:02:10,000
laptop it might be that you had to go to

00:02:08,800 --> 00:02:10,720
two different vendors to find the

00:02:10,000 --> 00:02:12,160
firmware

00:02:10,720 --> 00:02:13,599
and then it wouldn't apply anyway and so

00:02:12,160 --> 00:02:14,160
the consequence of this is people just

00:02:13,599 --> 00:02:16,800
weren't

00:02:14,160 --> 00:02:18,560
um doing firmware updates um which is

00:02:16,800 --> 00:02:20,480
something that my boss said this needs

00:02:18,560 --> 00:02:22,959
fixing

00:02:20,480 --> 00:02:23,760
so what did we do um i bought two

00:02:22,959 --> 00:02:26,400
projects

00:02:23,760 --> 00:02:26,959
and the lvfs is essentially the web app

00:02:26,400 --> 00:02:28,480
um

00:02:26,959 --> 00:02:30,080
and it's basically the like of the

00:02:28,480 --> 00:02:32,080
metadata source of

00:02:30,080 --> 00:02:33,280
both the firmware and the list of

00:02:32,080 --> 00:02:34,879
firmware

00:02:33,280 --> 00:02:36,400
um and the idea is the only people that

00:02:34,879 --> 00:02:40,400
you have to use the lvfs

00:02:36,400 --> 00:02:43,280
are the odms the oems that kind of thing

00:02:40,400 --> 00:02:45,840
um people like i don't know dell lenovo

00:02:43,280 --> 00:02:45,840
et cetera

00:02:47,040 --> 00:02:50,239
and everyone else just downloads a

00:02:48,720 --> 00:02:52,560
shared metadata catalogue

00:02:50,239 --> 00:02:53,760
all the different firmwares available

00:02:52,560 --> 00:02:55,200
and then the other side of the project

00:02:53,760 --> 00:02:56,239
is once you have all that high quality

00:02:55,200 --> 00:02:57,920
metadata

00:02:56,239 --> 00:03:00,000
you need to be able to apply it onto

00:02:57,920 --> 00:03:00,560
your hardware so i guess in the same way

00:03:00,000 --> 00:03:02,319
you can

00:03:00,560 --> 00:03:04,319
still relate this back down to like flat

00:03:02,319 --> 00:03:06,640
hub and the local like

00:03:04,319 --> 00:03:08,239
lip flat pack scenario where you need a

00:03:06,640 --> 00:03:09,599
mechanism to actually install the data

00:03:08,239 --> 00:03:13,040
onto your computer

00:03:09,599 --> 00:03:15,360
and so fwd is a um a project that i

00:03:13,040 --> 00:03:16,560
think it's got about 33 34 different

00:03:15,360 --> 00:03:18,000
protocols now

00:03:16,560 --> 00:03:20,239
and there's another sort of five in

00:03:18,000 --> 00:03:22,000
development um

00:03:20,239 --> 00:03:23,920
where you can just take a blob of

00:03:22,000 --> 00:03:27,040
firmware and split it

00:03:23,920 --> 00:03:30,080
to an nvme or ata or

00:03:27,040 --> 00:03:31,920
um wacom or via

00:03:30,080 --> 00:03:32,879
all this dozens of different vendors

00:03:31,920 --> 00:03:33,519
that have different all these different

00:03:32,879 --> 00:03:36,720
bespoke

00:03:33,519 --> 00:03:40,560
protocols and then i guess unlike

00:03:36,720 --> 00:03:43,040
maybe like how snap and flat pack work

00:03:40,560 --> 00:03:44,480
we kind of close the circle back so we

00:03:43,040 --> 00:03:46,400
have this idea of you report

00:03:44,480 --> 00:03:48,799
status optionally and it's completely

00:03:46,400 --> 00:03:50,239
opt-in where if the update went well

00:03:48,799 --> 00:03:52,159
um you might report the status back to

00:03:50,239 --> 00:03:53,120
the lbfs just with a sort of boolean

00:03:52,159 --> 00:03:56,400
success

00:03:53,120 --> 00:03:56,720
but if it failed for some reason um you

00:03:56,400 --> 00:03:59,599
get

00:03:56,720 --> 00:04:01,040
lots of system debugging so if there was

00:03:59,599 --> 00:04:02,560
a substantial number of failures coming

00:04:01,040 --> 00:04:03,920
back for a certain firmware you can kind

00:04:02,560 --> 00:04:07,280
of work out that

00:04:03,920 --> 00:04:10,000
um the firmware is failing because um

00:04:07,280 --> 00:04:10,720
i don't know um the kernel version is

00:04:10,000 --> 00:04:12,640
too old

00:04:10,720 --> 00:04:14,879
and so this the the fix there would be

00:04:12,640 --> 00:04:16,720
to go back into the firmware on the rbfs

00:04:14,879 --> 00:04:18,079
and add an extra requirement to say the

00:04:16,720 --> 00:04:20,880
firmware must be at least this

00:04:18,079 --> 00:04:22,079
this new um otherwise don't suggest it

00:04:20,880 --> 00:04:24,000
and it's a really good way of kind of

00:04:22,079 --> 00:04:25,520
working out issues when we first started

00:04:24,000 --> 00:04:28,960
we had all these issues where

00:04:25,520 --> 00:04:32,400
i know like um debian had a really old

00:04:28,960 --> 00:04:33,919
usb sb version um which would trigger a

00:04:32,400 --> 00:04:35,360
bug which wasn't triggered in

00:04:33,919 --> 00:04:37,759
like all the things we're testing on

00:04:35,360 --> 00:04:39,840
like ubuntu fedora etcetera

00:04:37,759 --> 00:04:40,880
um it's really useful like i said it's

00:04:39,840 --> 00:04:42,560
completely opt-in

00:04:40,880 --> 00:04:43,919
but it might be could close a second it

00:04:42,560 --> 00:04:44,320
also means i could sleep well at night

00:04:43,919 --> 00:04:47,199
because

00:04:44,320 --> 00:04:49,040
if a bad firmware goes out um it means

00:04:47,199 --> 00:04:50,720
that it's automatically demoted

00:04:49,040 --> 00:04:52,720
from the public to it back to being

00:04:50,720 --> 00:04:53,840
private again if it fails more than a

00:04:52,720 --> 00:04:55,600
certain number of times

00:04:53,840 --> 00:04:57,280
so if it fails below so if it increases

00:04:55,600 --> 00:04:58,720
like one percent error rate or something

00:04:57,280 --> 00:05:02,320
it automatically gets

00:04:58,720 --> 00:05:05,520
demoted um back down so it's kind of a

00:05:02,320 --> 00:05:09,039
um a bit more exciting than maybe an ftp

00:05:05,520 --> 00:05:10,000
site would be so actually looking at the

00:05:09,039 --> 00:05:11,680
architecture this

00:05:10,000 --> 00:05:13,680
is i guess fairly similar actually what

00:05:11,680 --> 00:05:15,199
ftp what what fbt does

00:05:13,680 --> 00:05:17,520
is probably not super interesting for

00:05:15,199 --> 00:05:19,759
this audience um but it's essentially

00:05:17,520 --> 00:05:23,199
like what snap and flat pack or

00:05:19,759 --> 00:05:25,600
um package kit um are doing

00:05:23,199 --> 00:05:26,720
um essentially i have three layers um

00:05:25,600 --> 00:05:29,440
you have the internet layer with the

00:05:26,720 --> 00:05:33,440
rbfs as the kind of the download server

00:05:29,440 --> 00:05:35,199
and then you have this dumb cdn um

00:05:33,440 --> 00:05:38,560
the middle layer is a session which

00:05:35,199 --> 00:05:41,280
might be something like name software

00:05:38,560 --> 00:05:42,080
the kde software center or even the

00:05:41,280 --> 00:05:45,199
command line

00:05:42,080 --> 00:05:46,160
after the mgr um all right and watching

00:05:45,199 --> 00:05:46,880
one of the things that's interesting in

00:05:46,160 --> 00:05:48,320
this is

00:05:46,880 --> 00:05:50,639
we're analyzing the user agents that

00:05:48,320 --> 00:05:53,199
were actually requesting firmware

00:05:50,639 --> 00:05:54,560
99 of the downloads were being done

00:05:53,199 --> 00:05:56,960
using gui client

00:05:54,560 --> 00:05:58,560
rather than one percent being done using

00:05:56,960 --> 00:05:59,600
command line which is a real surprise

00:05:58,560 --> 00:06:02,319
for firmware

00:05:59,600 --> 00:06:03,199
um so we had to make it beautiful and

00:06:02,319 --> 00:06:06,880
think about ux

00:06:03,199 --> 00:06:07,759
all the time now i put a new notes that

00:06:06,880 --> 00:06:10,720
optionally download

00:06:07,759 --> 00:06:13,039
metadata from the rvfs the idea here is

00:06:10,720 --> 00:06:16,160
you don't have to use the rbfs lots of

00:06:13,039 --> 00:06:18,400
companies um that don't use um

00:06:16,160 --> 00:06:19,440
uh uh like if you're efficient for a 3d

00:06:18,400 --> 00:06:20,720
usa agency

00:06:19,440 --> 00:06:22,560
none of your servers have internet

00:06:20,720 --> 00:06:24,479
access and so you might be getting the

00:06:22,560 --> 00:06:25,600
downloads the metadata and the firmware

00:06:24,479 --> 00:06:28,639
themselves

00:06:25,600 --> 00:06:31,759
from an nfs share or a

00:06:28,639 --> 00:06:34,000
samba share or something and so

00:06:31,759 --> 00:06:34,800
it's not essential that you use the

00:06:34,000 --> 00:06:38,400
internet

00:06:34,800 --> 00:06:41,759
side of things um the

00:06:38,400 --> 00:06:43,280
lowest bit the system service is fwmgr

00:06:41,759 --> 00:06:44,479
and that's basically enumerating so in

00:06:43,280 --> 00:06:46,160
the apple ecosystem you'll be saying

00:06:44,479 --> 00:06:48,319
what apps are already installed

00:06:46,160 --> 00:06:50,319
and actually lets you add and remove

00:06:48,319 --> 00:06:52,720
apps that are sort of specified from

00:06:50,319 --> 00:06:55,120
something like flat hub or firmware from

00:06:52,720 --> 00:06:58,639
lbfs

00:06:55,120 --> 00:07:00,639
um yeah so i guess the main

00:06:58,639 --> 00:07:02,319
comment here is people ask all the time

00:07:00,639 --> 00:07:04,240
like why didn't i write this thing go

00:07:02,319 --> 00:07:06,000
why didn't i write this in rust and five

00:07:04,240 --> 00:07:06,319
years ago those ecosystems were even

00:07:06,000 --> 00:07:08,639
more

00:07:06,319 --> 00:07:10,000
immature than they are now um and the

00:07:08,639 --> 00:07:12,000
other thing is people who are actually

00:07:10,000 --> 00:07:13,759
writing the code to flash the firmware

00:07:12,000 --> 00:07:17,440
are probably firmware engineers

00:07:13,759 --> 00:07:19,919
and lingua franca in um firmware world

00:07:17,440 --> 00:07:21,440
is c so it was ridiculous to choose any

00:07:19,919 --> 00:07:22,720
other language that wasn't c

00:07:21,440 --> 00:07:24,319
if you're going to be asking people to

00:07:22,720 --> 00:07:26,319
contribute to your project who are

00:07:24,319 --> 00:07:28,960
potentially firmer engineers

00:07:26,319 --> 00:07:29,520
um of course c is kind of pretty clunky

00:07:28,960 --> 00:07:31,199
and it's not

00:07:29,520 --> 00:07:33,360
particularly nice to use without the

00:07:31,199 --> 00:07:35,280
sort of synthetic sugar of

00:07:33,360 --> 00:07:36,479
something like glib and using something

00:07:35,280 --> 00:07:39,360
like g object

00:07:36,479 --> 00:07:41,520
which is the kind of a nice easy um sort

00:07:39,360 --> 00:07:41,919
of middle ground between not using c4

00:07:41,520 --> 00:07:44,479
plus

00:07:41,919 --> 00:07:45,120
but still having object oriented

00:07:44,479 --> 00:07:47,520
programming

00:07:45,120 --> 00:07:48,879
sort of um techniques um meant that we

00:07:47,520 --> 00:07:50,319
kind of had the best of both worlds but

00:07:48,879 --> 00:07:53,039
we could say to people this is how you

00:07:50,319 --> 00:07:55,280
use jiara and geo-objective stuff

00:07:53,039 --> 00:07:57,120
but also get the c programmers to

00:07:55,280 --> 00:07:58,720
contribute to

00:07:57,120 --> 00:08:00,400
which our projects comments is kind of

00:07:58,720 --> 00:08:03,360
important

00:08:00,400 --> 00:08:04,479
um yeah the other side of it was the

00:08:03,360 --> 00:08:07,840
website

00:08:04,479 --> 00:08:09,759
so i'm not a web

00:08:07,840 --> 00:08:11,199
developer and the idea of the rvfs right

00:08:09,759 --> 00:08:12,560
from the start was to be as simple as

00:08:11,199 --> 00:08:13,680
possible there was no i don't want to

00:08:12,560 --> 00:08:16,240
spend time

00:08:13,680 --> 00:08:16,879
building the stack i'm writing the stack

00:08:16,240 --> 00:08:19,120
um an

00:08:16,879 --> 00:08:20,240
astronaut i call it arch architecture

00:08:19,120 --> 00:08:23,280
astronauting

00:08:20,240 --> 00:08:24,400
where it's like you specified this thing

00:08:23,280 --> 00:08:25,759
as a

00:08:24,400 --> 00:08:28,560
microservice architecture that can be

00:08:25,759 --> 00:08:30,319
run by a billion people or whatever

00:08:28,560 --> 00:08:31,599
the initial version the ivfs was just a

00:08:30,319 --> 00:08:33,120
website i think this is

00:08:31,599 --> 00:08:35,039
even written in php or something that's

00:08:33,120 --> 00:08:37,120
pretty pretty rubbish and

00:08:35,039 --> 00:08:39,039
you could just upload files which will

00:08:37,120 --> 00:08:42,240
be decompressed

00:08:39,039 --> 00:08:44,720
the metadata is all smashed together and

00:08:42,240 --> 00:08:46,160
that was basically it and then from that

00:08:44,720 --> 00:08:48,240
we kind of

00:08:46,160 --> 00:08:49,279
it organically grew to whatever we

00:08:48,240 --> 00:08:53,360
needed

00:08:49,279 --> 00:08:56,399
rather than trying to do everything

00:08:53,360 --> 00:08:58,640
before i'm like it kind of works quite

00:08:56,399 --> 00:09:01,760
differently to microsoft update as well

00:08:58,640 --> 00:09:02,720
so i'm kind of um keen on the privacy

00:09:01,760 --> 00:09:04,399
stuff here

00:09:02,720 --> 00:09:06,240
so the way windows update works is you

00:09:04,399 --> 00:09:07,120
have like a you do a request in it and

00:09:06,240 --> 00:09:09,360
you make all the hardware on your on

00:09:07,120 --> 00:09:10,800
your pc

00:09:09,360 --> 00:09:12,240
and it sends all that information about

00:09:10,800 --> 00:09:13,040
your hardware and what firmware versions

00:09:12,240 --> 00:09:15,200
are installed

00:09:13,040 --> 00:09:16,800
up to one of the big servers in

00:09:15,200 --> 00:09:18,959
microsoft somewhere

00:09:16,800 --> 00:09:20,480
um on their banks and banks of servers

00:09:18,959 --> 00:09:21,839
processing these requests

00:09:20,480 --> 00:09:23,600
and then depending on the rule engine

00:09:21,839 --> 00:09:25,600
that's running on the servers it'll send

00:09:23,600 --> 00:09:27,200
you a bespoke reply back that says you

00:09:25,600 --> 00:09:28,240
need to install this update grab it from

00:09:27,200 --> 00:09:30,560
here

00:09:28,240 --> 00:09:31,920
um that's great if you have banks of

00:09:30,560 --> 00:09:33,680
servers and you don't mind

00:09:31,920 --> 00:09:35,200
sending your hardware details to a third

00:09:33,680 --> 00:09:37,360
party but

00:09:35,200 --> 00:09:38,800
not something i wanted to do and so the

00:09:37,360 --> 00:09:40,800
way we did it we had everyone just

00:09:38,800 --> 00:09:42,640
downloading the shared metadata catalog

00:09:40,800 --> 00:09:43,519
so everyone downloads exactly the same

00:09:42,640 --> 00:09:46,800
file

00:09:43,519 --> 00:09:49,040
um from a dom cdn so i could have like

00:09:46,800 --> 00:09:50,880
like 10 million people um a week with

00:09:49,040 --> 00:09:52,800
downloading this file initially

00:09:50,880 --> 00:09:54,160
um and it was costing me 20 dollars

00:09:52,800 --> 00:09:56,480
because everyone's just downloading off

00:09:54,160 --> 00:09:58,480
this geo-replicated cdn

00:09:56,480 --> 00:09:59,760
it also meant i had no idea of what

00:09:58,480 --> 00:10:01,200
hardware people were running

00:09:59,760 --> 00:10:02,880
um because it was just everyone was

00:10:01,200 --> 00:10:03,279
requesting the same thing the only way

00:10:02,880 --> 00:10:05,200
you could

00:10:03,279 --> 00:10:06,480
find out is what what firmware they were

00:10:05,200 --> 00:10:10,560
requesting that's kind of

00:10:06,480 --> 00:10:12,079
required anyway the flip side of that is

00:10:10,560 --> 00:10:14,320
we did a just we did a

00:10:12,079 --> 00:10:15,839
centralized firmware distribution so

00:10:14,320 --> 00:10:17,760
everyone downloaded the metadata but as

00:10:15,839 --> 00:10:19,600
soon as you wanted the firmware itself

00:10:17,760 --> 00:10:21,279
you have to download that from the rdfs

00:10:19,600 --> 00:10:23,519
now the kind of the the

00:10:21,279 --> 00:10:24,399
the textbook way the textbook reason for

00:10:23,519 --> 00:10:25,839
doing that is

00:10:24,399 --> 00:10:27,519
if there was a problem with the firmware

00:10:25,839 --> 00:10:30,160
or it needed to be signing

00:10:27,519 --> 00:10:31,120
or it was some modification to it um we

00:10:30,160 --> 00:10:32,959
wouldn't have to like

00:10:31,120 --> 00:10:34,160
invalidate cdns around the world and we

00:10:32,959 --> 00:10:35,360
could pull it straight away with no

00:10:34,160 --> 00:10:38,079
delay

00:10:35,360 --> 00:10:39,200
but really it's statistics because if we

00:10:38,079 --> 00:10:42,240
go to a bigger

00:10:39,200 --> 00:10:42,880
oem and say something like hey there's

00:10:42,240 --> 00:10:46,240
um

00:10:42,880 --> 00:10:47,440
a lot of linux users who run lots of

00:10:46,240 --> 00:10:50,160
different computers

00:10:47,440 --> 00:10:51,760
and they've downloaded probably quite a

00:10:50,160 --> 00:10:54,240
few updates

00:10:51,760 --> 00:10:54,880
it's a lot less compelling than someone

00:10:54,240 --> 00:10:56,720
saying

00:10:54,880 --> 00:10:58,640
hey there's 10 million users hitting

00:10:56,720 --> 00:11:01,600
this website per day

00:10:58,640 --> 00:11:03,760
and we've delivered what 28 million

00:11:01,600 --> 00:11:08,079
downloads since we started

00:11:03,760 --> 00:11:10,320
uh for 2500 different bits of hardware

00:11:08,079 --> 00:11:11,360
um once you sort of give them exact

00:11:10,320 --> 00:11:13,120
numbers that's

00:11:11,360 --> 00:11:15,600
a lot more compelling to the likes of

00:11:13,120 --> 00:11:18,000
dell intel hp etc that's what

00:11:15,600 --> 00:11:18,959
takes attention and there's no real way

00:11:18,000 --> 00:11:20,399
of sort of

00:11:18,959 --> 00:11:22,240
putting all these files on some mirror

00:11:20,399 --> 00:11:26,160
somewhere and then have any idea of

00:11:22,240 --> 00:11:28,480
um any idea of uh

00:11:26,160 --> 00:11:29,600
how effective if it's your system's

00:11:28,480 --> 00:11:31,120
actually working also

00:11:29,600 --> 00:11:32,720
randomly about the sign it's a really

00:11:31,120 --> 00:11:34,720
good way of um

00:11:32,720 --> 00:11:36,720
like sort of mental health point of view

00:11:34,720 --> 00:11:37,279
as well because i get emails maybe i

00:11:36,720 --> 00:11:39,040
don't know

00:11:37,279 --> 00:11:40,959
once a day twice a day saying you've

00:11:39,040 --> 00:11:42,320
done it wrong this is bad

00:11:40,959 --> 00:11:43,760
you should use this language you should

00:11:42,320 --> 00:11:45,360
have done this instead you should have

00:11:43,760 --> 00:11:46,160
used react you should have done this on

00:11:45,360 --> 00:11:47,360
the other

00:11:46,160 --> 00:11:49,200
you look at the sign you think well

00:11:47,360 --> 00:11:50,160
actually the number keeps going up so

00:11:49,200 --> 00:11:52,720
that's kind of like

00:11:50,160 --> 00:11:54,000
proves that something's going well um

00:11:52,720 --> 00:11:56,959
it's kind of like a nice sort of mental

00:11:54,000 --> 00:12:00,000
health kind of balance on that

00:11:56,959 --> 00:12:00,000
and we just turned on a mic

00:12:00,079 --> 00:12:03,519
um is that better

00:12:04,320 --> 00:12:09,440
maybe i should just stop being so

00:12:05,839 --> 00:12:09,440
excited and start to stop shouting

00:12:09,760 --> 00:12:14,480
oh no worries um right so the other

00:12:12,880 --> 00:12:15,680
thing is with the web app i didn't want

00:12:14,480 --> 00:12:18,720
to be spending time

00:12:15,680 --> 00:12:20,240
writing uh middleware service like the

00:12:18,720 --> 00:12:22,000
whole intention of this was to get

00:12:20,240 --> 00:12:25,680
firmware updates to end users

00:12:22,000 --> 00:12:27,120
as quickly as possible um

00:12:25,680 --> 00:12:28,560
so i chose an existing high-level

00:12:27,120 --> 00:12:30,079
language doesn't have to be hugely

00:12:28,560 --> 00:12:31,519
performant it's probably being used by

00:12:30,079 --> 00:12:33,519
three or four odms

00:12:31,519 --> 00:12:35,360
um simultaneously which is nothing from

00:12:33,519 --> 00:12:36,880
a web app point of view

00:12:35,360 --> 00:12:39,680
and everything else being geo-replicated

00:12:36,880 --> 00:12:42,320
on cdn so i chose python

00:12:39,680 --> 00:12:42,800
um it's using flask as a kind of a high

00:12:42,320 --> 00:12:46,160
level

00:12:42,800 --> 00:12:48,320
kind of like a abstraction layer

00:12:46,160 --> 00:12:50,560
and sql alchemy is kind of a norm which

00:12:48,320 --> 00:12:52,240
is probably horribly inefficient

00:12:50,560 --> 00:12:53,839
but works really well and it's certainly

00:12:52,240 --> 00:12:55,040
good enough and easy to use from my

00:12:53,839 --> 00:12:56,720
point of view

00:12:55,040 --> 00:12:58,639
so my point is there's no need to

00:12:56,720 --> 00:13:01,760
architecture everything for

00:12:58,639 --> 00:13:04,079
sub one millisecond response time

00:13:01,760 --> 00:13:05,600
when it doesn't matter and the whole

00:13:04,079 --> 00:13:06,959
point of the architecture is to get

00:13:05,600 --> 00:13:10,560
firmer updates to users

00:13:06,959 --> 00:13:12,560
or in lds's point of view we want to get

00:13:10,560 --> 00:13:15,920
applications to end users we don't care

00:13:12,560 --> 00:13:15,920
about the the plumbing

00:13:18,240 --> 00:13:21,760
so i spent a lot of time this is what

00:13:20,079 --> 00:13:23,200
2015 um

00:13:21,760 --> 00:13:24,639
emailing an awful lot of companies

00:13:23,200 --> 00:13:26,320
probably i don't know three or four

00:13:24,639 --> 00:13:28,399
hundred different companies

00:13:26,320 --> 00:13:30,639
basically saying hey i'm richard i work

00:13:28,399 --> 00:13:32,480
at red hat um i've developed this system

00:13:30,639 --> 00:13:33,680
for installing firmware on devices

00:13:32,480 --> 00:13:36,399
i've got this website which you can

00:13:33,680 --> 00:13:37,920
upload firmware to for linux users are

00:13:36,399 --> 00:13:40,160
you interested

00:13:37,920 --> 00:13:42,160
and generally the response was either we

00:13:40,160 --> 00:13:44,320
don't care about linux users or

00:13:42,160 --> 00:13:46,639
yeah kind of maybe sounds interesting

00:13:44,320 --> 00:13:48,880
but the most common one was

00:13:46,639 --> 00:13:49,760
um we're already customers with red hat

00:13:48,880 --> 00:13:51,920
we're partners with

00:13:49,760 --> 00:13:53,519
red hat already can we switch to your

00:13:51,920 --> 00:13:54,959
red hat email and talk about stuff under

00:13:53,519 --> 00:13:57,440
nda

00:13:54,959 --> 00:13:58,800
now obviously working for a big company

00:13:57,440 --> 00:14:01,040
um like red hat

00:13:58,800 --> 00:14:02,160
it is i guess there's negatives and

00:14:01,040 --> 00:14:03,839
there's positives as well

00:14:02,160 --> 00:14:06,000
but in setting up something like this it

00:14:03,839 --> 00:14:08,480
was hugely hugely beneficial

00:14:06,000 --> 00:14:10,560
because i could talk to the logitechs

00:14:08,480 --> 00:14:14,000
the wacoms the intels the

00:14:10,560 --> 00:14:15,279
hps the dells and they knew that red hat

00:14:14,000 --> 00:14:17,680
were doing this thing

00:14:15,279 --> 00:14:18,560
rather than the sun bloke some random

00:14:17,680 --> 00:14:20,560
bloke um

00:14:18,560 --> 00:14:22,639
as i was described by microsoft or some

00:14:20,560 --> 00:14:25,199
bloke who works in his shed

00:14:22,639 --> 00:14:26,639
um which is kind of true but maybe not

00:14:25,199 --> 00:14:28,800
in the spur of things

00:14:26,639 --> 00:14:30,480
um so yeah so a lot of a lot of people

00:14:28,800 --> 00:14:30,800
were talking about this stuff um as like

00:14:30,480 --> 00:14:32,720
a

00:14:30,800 --> 00:14:34,720
as a good thing that came from red hat

00:14:32,720 --> 00:14:37,680
um rather than some random person

00:14:34,720 --> 00:14:39,600
although the kind of the the the subtext

00:14:37,680 --> 00:14:41,360
here is that um a lot of the

00:14:39,600 --> 00:14:43,519
um maybe the first three years of the

00:14:41,360 --> 00:14:45,360
lvfs it was running um on a little hp

00:14:43,519 --> 00:14:46,880
microserver underneath my stairs on my

00:14:45,360 --> 00:14:48,880
broadband

00:14:46,880 --> 00:14:51,120
which is a point i'll come to in a

00:14:48,880 --> 00:14:53,760
minute

00:14:51,120 --> 00:14:55,760
so let's look at the last timeline so we

00:14:53,760 --> 00:14:58,000
started 2015-16

00:14:55,760 --> 00:14:58,959
and the first company was um hewski

00:14:58,000 --> 00:15:00,800
which is a

00:14:58,959 --> 00:15:03,040
company that i happened to run which

00:15:00,800 --> 00:15:05,440
produced the color hook hardware

00:15:03,040 --> 00:15:06,320
um and that was kind of like the first

00:15:05,440 --> 00:15:08,079
testing

00:15:06,320 --> 00:15:10,480
um sort of the real test for it because

00:15:08,079 --> 00:15:13,199
we had like an actual legitimate legal

00:15:10,480 --> 00:15:14,880
company and we had a device that we'd

00:15:13,199 --> 00:15:16,560
have a custom flashing protocol with a

00:15:14,880 --> 00:15:17,199
flashing file format and that kind of

00:15:16,560 --> 00:15:18,399
stuff

00:15:17,199 --> 00:15:20,399
that was like on a really good first

00:15:18,399 --> 00:15:22,160
test we could get into fedora

00:15:20,399 --> 00:15:24,000
test it does the architecture work does

00:15:22,160 --> 00:15:27,440
the device interface work um

00:15:24,000 --> 00:15:29,199
what import export tools do we need etc

00:15:27,440 --> 00:15:30,639
and the next step was talking to the

00:15:29,199 --> 00:15:31,199
people that could help me with this

00:15:30,639 --> 00:15:32,480
stuff

00:15:31,199 --> 00:15:33,839
people that would help me bootstrap this

00:15:32,480 --> 00:15:35,759
stuff and it turns out open source

00:15:33,839 --> 00:15:37,279
hardware is awesome

00:15:35,759 --> 00:15:38,480
because the sort of people that are

00:15:37,279 --> 00:15:40,560
producing open source hardware are

00:15:38,480 --> 00:15:43,120
producing low volumes of things

00:15:40,560 --> 00:15:45,120
um and they're highly technical people

00:15:43,120 --> 00:15:48,240
so something like um i don't know

00:15:45,120 --> 00:15:50,240
um usb um smart charger for something

00:15:48,240 --> 00:15:51,519
and they might only produce 200 per year

00:15:50,240 --> 00:15:52,160
and they currently host the firmware

00:15:51,519 --> 00:15:54,880
updates

00:15:52,160 --> 00:15:55,519
on some i don't know some random ftp

00:15:54,880 --> 00:15:57,360
sites

00:15:55,519 --> 00:15:58,720
with no signing only five whatever and

00:15:57,360 --> 00:15:59,279
if you say look i've got this free

00:15:58,720 --> 00:16:00,880
service

00:15:59,279 --> 00:16:03,040
it kind of probably works for your use

00:16:00,880 --> 00:16:05,759
case um

00:16:03,040 --> 00:16:07,519
but pretty much a use case um and it's

00:16:05,759 --> 00:16:08,959
completely free and we'll do signing and

00:16:07,519 --> 00:16:10,240
we'll manage all the ui

00:16:08,959 --> 00:16:12,000
and the command line stuff for lunch

00:16:10,240 --> 00:16:13,759
users they were like that sounds awesome

00:16:12,000 --> 00:16:15,199
it's less for me to do

00:16:13,759 --> 00:16:16,639
and also they were the sort of people

00:16:15,199 --> 00:16:18,320
that if something was missing the

00:16:16,639 --> 00:16:18,959
feature they needed either as a flashing

00:16:18,320 --> 00:16:21,040
protocol

00:16:18,959 --> 00:16:22,480
or in the website they'd submit a patch

00:16:21,040 --> 00:16:23,839
which was sort of awesome and it was

00:16:22,480 --> 00:16:26,800
like a really good way to kind of kick

00:16:23,839 --> 00:16:30,000
start the entire ecosystem

00:16:26,800 --> 00:16:32,560
2017 dell were um approached

00:16:30,000 --> 00:16:33,360
me um sort of with it sort of through

00:16:32,560 --> 00:16:34,800
rotate

00:16:33,360 --> 00:16:36,800
and said look we're thinking of doing

00:16:34,800 --> 00:16:38,480
this thing which was sort of similar to

00:16:36,800 --> 00:16:40,079
what the lvfs was but it makes way more

00:16:38,480 --> 00:16:41,519
sense for us to collaborate because we

00:16:40,079 --> 00:16:41,759
don't want to be in the sort of business

00:16:41,519 --> 00:16:44,880
of

00:16:41,759 --> 00:16:46,000
maintaining a web service so maybe we

00:16:44,880 --> 00:16:48,000
can work together

00:16:46,000 --> 00:16:51,199
and so del added support very quickly

00:16:48,000 --> 00:16:51,920
for their xps line iot line that kind of

00:16:51,199 --> 00:16:55,279
thing

00:16:51,920 --> 00:16:56,560
edge stuff and that was great um

00:16:55,279 --> 00:16:57,519
problem is when you're an early adopter

00:16:56,560 --> 00:16:59,920
you've got to do an awful lot of the

00:16:57,519 --> 00:17:00,959
work so dell wrote like the synaptics

00:16:59,920 --> 00:17:03,600
mst plug-in

00:17:00,959 --> 00:17:05,839
the thunderbolt plug-in and did a lot of

00:17:03,600 --> 00:17:07,679
work with the um youth capsule plugin

00:17:05,839 --> 00:17:09,679
which certainly was written initially by

00:17:07,679 --> 00:17:10,480
peter jones and so he kind of absorbed

00:17:09,679 --> 00:17:12,559
his project

00:17:10,480 --> 00:17:13,760
um sort of i guess claimed the credit

00:17:12,559 --> 00:17:16,720
for it

00:17:13,760 --> 00:17:18,640
um um but it meant that dell did an

00:17:16,720 --> 00:17:21,919
awful lot of work initially

00:17:18,640 --> 00:17:22,799
logitech got hit by a security issue

00:17:21,919 --> 00:17:25,520
called mouse jack

00:17:22,799 --> 00:17:26,480
in 2018 and the harbour was basically

00:17:25,520 --> 00:17:27,919
being pulled out

00:17:26,480 --> 00:17:29,280
of data centers and stuff because you

00:17:27,919 --> 00:17:30,960
couldn't apply firmware updates if

00:17:29,280 --> 00:17:33,120
you're running well

00:17:30,960 --> 00:17:35,520
and so they're kind of like kind of

00:17:33,120 --> 00:17:38,799
forced to join the ldfs

00:17:35,520 --> 00:17:40,000
um and push updates out using swfd

00:17:38,799 --> 00:17:42,000
and they added support for their

00:17:40,000 --> 00:17:44,480
unifying hardware and it's like

00:17:42,000 --> 00:17:46,080
they only uploaded maybe i don't know a

00:17:44,480 --> 00:17:47,520
dozen firmwares

00:17:46,080 --> 00:17:49,440
but there it appears that there is an

00:17:47,520 --> 00:17:52,400
awful lot of unifying hardware

00:17:49,440 --> 00:17:53,919
in the in the world um because all those

00:17:52,400 --> 00:17:55,200
12 firmwares have been downloaded

00:17:53,919 --> 00:17:57,280
millions of times

00:17:55,200 --> 00:17:58,480
um and it's it's brilliant for end users

00:17:57,280 --> 00:17:59,679
who don't have to worry about their

00:17:58,480 --> 00:18:00,720
machines being taken over at coffee

00:17:59,679 --> 00:18:04,640
shops and things with

00:18:00,720 --> 00:18:05,039
unifying mouse jack now i put down 2019

00:18:04,640 --> 00:18:06,960
for

00:18:05,039 --> 00:18:08,640
logitech but it's not kind of tells the

00:18:06,960 --> 00:18:10,480
whole story because logitech

00:18:08,640 --> 00:18:12,320
relies quite a lot on their odms sexual

00:18:10,480 --> 00:18:14,880
people that make the machines

00:18:12,320 --> 00:18:15,760
and so logitech logitech's way of doing

00:18:14,880 --> 00:18:18,880
it was

00:18:15,760 --> 00:18:21,200
to get their odms and their ihvs their

00:18:18,880 --> 00:18:24,400
independent hardware vendors people like

00:18:21,200 --> 00:18:25,919
wacom rio real tech via

00:18:24,400 --> 00:18:27,919
that kind of thing people actually make

00:18:25,919 --> 00:18:28,880
the silicon that gets sold to the people

00:18:27,919 --> 00:18:32,480
like

00:18:28,880 --> 00:18:35,840
um foxconn westrom

00:18:32,480 --> 00:18:38,880
the odms and then kind of sell it on to

00:18:35,840 --> 00:18:41,520
under contract to the oem and so we kind

00:18:38,880 --> 00:18:43,679
of integrated the entire supply chain

00:18:41,520 --> 00:18:45,600
so there were va engineers writing

00:18:43,679 --> 00:18:47,679
plugins for via usb hubs

00:18:45,600 --> 00:18:48,880
and real tech engineers writing plugins

00:18:47,679 --> 00:18:52,240
for um

00:18:48,880 --> 00:18:54,480
real tech usb to ethernet drivers and

00:18:52,240 --> 00:18:54,480
stuff

00:18:54,720 --> 00:18:59,120
so that was great uh and lenovo

00:18:57,679 --> 00:19:00,640
obviously reused the code that was

00:18:59,120 --> 00:19:01,679
written for thunderbolts and we used the

00:19:00,640 --> 00:19:04,240
synaptics mst

00:19:01,679 --> 00:19:05,760
and the uv capsule um and but still had

00:19:04,240 --> 00:19:06,960
to write quite a lot of code themselves

00:19:05,760 --> 00:19:09,679
and so they were probably working on

00:19:06,960 --> 00:19:12,000
this um before the logitech

00:19:09,679 --> 00:19:13,280
announcement but in that means we have

00:19:12,000 --> 00:19:16,240
thinkpad think center

00:19:13,280 --> 00:19:17,679
think station hardware supported which

00:19:16,240 --> 00:19:20,400
is great

00:19:17,679 --> 00:19:21,200
hp last year literally found out they

00:19:20,400 --> 00:19:22,960
were losing

00:19:21,200 --> 00:19:24,400
contracts because they couldn't supply

00:19:22,960 --> 00:19:26,799
firmware updates in the lvfs

00:19:24,400 --> 00:19:28,320
and were kind of forced to add support

00:19:26,799 --> 00:19:31,520
for some models

00:19:28,320 --> 00:19:33,039
um that they wanted to sell for various

00:19:31,520 --> 00:19:34,559
government contracts and things

00:19:33,039 --> 00:19:36,240
and then found out actually there was a

00:19:34,559 --> 00:19:38,480
huge pr win for

00:19:36,240 --> 00:19:39,440
joining the rbfs and the sales of those

00:19:38,480 --> 00:19:42,320
models went up

00:19:39,440 --> 00:19:43,919
spectacularly so they've added a support

00:19:42,320 --> 00:19:45,360
this year for an awful lot more hardware

00:19:43,919 --> 00:19:46,400
and i've been told an awful lot more as

00:19:45,360 --> 00:19:49,520
planned

00:19:46,400 --> 00:19:50,799
um and hp all they had to do was write

00:19:49,520 --> 00:19:54,799
the hp specific

00:19:50,799 --> 00:19:58,240
plugins for things like hp um um

00:19:54,799 --> 00:19:59,039
cm x hubs and things um but they could

00:19:58,240 --> 00:20:01,600
reuse the

00:19:59,039 --> 00:20:02,640
via plugin written by lenovo and the

00:20:01,600 --> 00:20:05,039
unifying hardware

00:20:02,640 --> 00:20:06,000
written by logitech and sometimes mst by

00:20:05,039 --> 00:20:09,200
dell you can sort of see

00:20:06,000 --> 00:20:10,960
how this is going like i've only listed

00:20:09,200 --> 00:20:12,960
a few oems here but

00:20:10,960 --> 00:20:14,080
the most common thing oem's joining the

00:20:12,960 --> 00:20:16,080
lbfs now

00:20:14,080 --> 00:20:18,080
um and they just can't believe that it's

00:20:16,080 --> 00:20:20,159
free so someone will join and they'll

00:20:18,080 --> 00:20:23,039
say look i've got this harp it's got a

00:20:20,159 --> 00:20:24,320
via usb hub and this rear real tech chip

00:20:23,039 --> 00:20:27,360
and it's got this

00:20:24,320 --> 00:20:28,480
um an x chip i'm like yeah all that

00:20:27,360 --> 00:20:30,080
supporters you just have to

00:20:28,480 --> 00:20:32,159
add these six lines to this file with

00:20:30,080 --> 00:20:34,000
your vendor id and your product id and

00:20:32,159 --> 00:20:36,159
it just magically works and they're like

00:20:34,000 --> 00:20:37,440
how how does this work it's

00:20:36,159 --> 00:20:38,880
incomprehensible they have to

00:20:37,440 --> 00:20:40,799
they don't have to pay any money they

00:20:38,880 --> 00:20:42,240
don't have to really work it's the fact

00:20:40,799 --> 00:20:44,080
that open source means

00:20:42,240 --> 00:20:45,360
you can only reuse the same code and we

00:20:44,080 --> 00:20:47,120
can all support this all

00:20:45,360 --> 00:20:48,400
these different products with this one

00:20:47,120 --> 00:20:49,600
code base and they're coming from this

00:20:48,400 --> 00:20:51,280
world where

00:20:49,600 --> 00:20:53,520
they always have to pay they always have

00:20:51,280 --> 00:20:55,520
to get paid to do this work

00:20:53,520 --> 00:20:56,559
um over and over again for all these

00:20:55,520 --> 00:20:58,559
different oems

00:20:56,559 --> 00:20:59,919
and it's just a complete kind of they

00:20:58,559 --> 00:21:01,440
just brain just explodes

00:20:59,919 --> 00:21:03,679
the other question i've asked is how is

00:21:01,440 --> 00:21:06,000
this free um i'll come to that in a

00:21:03,679 --> 00:21:06,000
minute

00:21:08,080 --> 00:21:11,600
so one of the things that surprised me

00:21:09,679 --> 00:21:14,000
is people started using

00:21:11,600 --> 00:21:16,080
updates from the ivfs um as a way of

00:21:14,000 --> 00:21:17,840
choosing which hardware to buy

00:21:16,080 --> 00:21:20,080
this maybe isn't such a surprise for

00:21:17,840 --> 00:21:21,200
people like kind of linux users and sort

00:21:20,080 --> 00:21:22,320
of people using this stuff in the

00:21:21,200 --> 00:21:24,799
community

00:21:22,320 --> 00:21:26,240
but actually the um the graphs like but

00:21:24,799 --> 00:21:29,760
like you can see now

00:21:26,240 --> 00:21:30,320
were a direct um kind of ask from the uk

00:21:29,760 --> 00:21:31,840
government

00:21:30,320 --> 00:21:34,559
because they said look we want to choose

00:21:31,840 --> 00:21:36,000
laptops which are supported on the rvfs

00:21:34,559 --> 00:21:37,600
and we don't want to use laptops that

00:21:36,000 --> 00:21:39,039
only have say one update

00:21:37,600 --> 00:21:40,799
just so they get a little green but

00:21:39,039 --> 00:21:42,080
check box um

00:21:40,799 --> 00:21:43,520
but we actually want to see that they're

00:21:42,080 --> 00:21:44,400
actually supporting these laptops over

00:21:43,520 --> 00:21:47,280
the last few

00:21:44,400 --> 00:21:49,039
three years and so for every there's now

00:21:47,280 --> 00:21:49,760
public graphs on the rbfs which means

00:21:49,039 --> 00:21:51,679
you can just

00:21:49,760 --> 00:21:53,280
look at every single model and see how

00:21:51,679 --> 00:21:54,159
how long has this model been supported

00:21:53,280 --> 00:21:56,559
for

00:21:54,159 --> 00:21:58,480
and here you can see there's a xps 15

00:21:56,559 --> 00:21:58,960
which i guess on average probably about

00:21:58,480 --> 00:22:00,559
one

00:21:58,960 --> 00:22:02,720
update per quarter which is fairly

00:22:00,559 --> 00:22:03,280
typical and some vendors are very good

00:22:02,720 --> 00:22:05,760
at this

00:22:03,280 --> 00:22:07,440
um other vendors might only release one

00:22:05,760 --> 00:22:09,039
or two updates the first year

00:22:07,440 --> 00:22:11,520
and then they become kind of like just

00:22:09,039 --> 00:22:15,039
critical security issues only

00:22:11,520 --> 00:22:17,120
this is quite a surprise this is

00:22:15,039 --> 00:22:18,320
something i didn't expect but it also

00:22:17,120 --> 00:22:20,720
means it's been so

00:22:18,320 --> 00:22:21,840
like is on the lvfs has now been baked

00:22:20,720 --> 00:22:24,960
into various us

00:22:21,840 --> 00:22:26,000
and uk um purchasing policy um which is

00:22:24,960 --> 00:22:28,400
kind of for an ecosystem that's

00:22:26,000 --> 00:22:28,400
brilliant

00:22:28,559 --> 00:22:32,159
now like i said a lot of people are very

00:22:30,480 --> 00:22:33,039
surprised this is free they don't

00:22:32,159 --> 00:22:35,760
understand that

00:22:33,039 --> 00:22:37,200
the question i get asked all the time is

00:22:35,760 --> 00:22:40,080
how long is it free for

00:22:37,200 --> 00:22:40,400
like what point do the fees kick in um

00:22:40,080 --> 00:22:43,280
and

00:22:40,400 --> 00:22:45,200
the way it works is um like my my job is

00:22:43,280 --> 00:22:47,440
being paid for by red hat and red tap

00:22:45,200 --> 00:22:49,120
paying um me to kind of build this

00:22:47,440 --> 00:22:52,159
ecosystem and build this this

00:22:49,120 --> 00:22:52,720
all these different um companies and

00:22:52,159 --> 00:22:55,919
this

00:22:52,720 --> 00:22:58,000
shared code um and i think what happened

00:22:55,919 --> 00:23:00,320
um i guess a couple years ago is the

00:22:58,000 --> 00:23:02,080
likes of dell lenovo hp etc

00:23:00,320 --> 00:23:04,080
went to the linux foundation said look

00:23:02,080 --> 00:23:04,880
we're building this multi-million dollar

00:23:04,080 --> 00:23:08,720
business

00:23:04,880 --> 00:23:11,679
uh on this on this linux um sort of um

00:23:08,720 --> 00:23:13,440
kind of pipeline and we're relying on

00:23:11,679 --> 00:23:14,640
this random bloke in england

00:23:13,440 --> 00:23:16,559
with this server that's running under

00:23:14,640 --> 00:23:19,200
the stairs can you kind of

00:23:16,559 --> 00:23:20,640
sort of professionalize that a bit so

00:23:19,200 --> 00:23:22,480
linux foundation now

00:23:20,640 --> 00:23:24,960
they supplied a couple of assist admins

00:23:22,480 --> 00:23:28,480
which basically took my web service

00:23:24,960 --> 00:23:30,799
made it amazon's made into microservice

00:23:28,480 --> 00:23:31,520
um it's all running completely scalably

00:23:30,799 --> 00:23:33,600
now

00:23:31,520 --> 00:23:34,640
it's all backed up minute by minute and

00:23:33,600 --> 00:23:36,880
stuff and it's it's

00:23:34,640 --> 00:23:38,000
it's great that it's also not my problem

00:23:36,880 --> 00:23:38,480
so if it goes down in the middle of the

00:23:38,000 --> 00:23:41,039
night

00:23:38,480 --> 00:23:42,880
someone else gets paged and they fix it

00:23:41,039 --> 00:23:44,880
and that's great

00:23:42,880 --> 00:23:46,799
also the key thing here is that red hat

00:23:44,880 --> 00:23:48,720
is this neutral party it's like the un

00:23:46,799 --> 00:23:50,320
it's like when um if dell had gone to

00:23:48,720 --> 00:23:52,279
lenovo and said hey do you want to join

00:23:50,320 --> 00:23:54,240
this

00:23:52,279 --> 00:23:55,360
dell.lvfs.com thing

00:23:54,240 --> 00:23:57,679
probably in another probably would have

00:23:55,360 --> 00:23:59,440
said no but seeing as red hat is this

00:23:57,679 --> 00:24:01,120
neutral third party that doesn't really

00:23:59,440 --> 00:24:04,320
have any skin skin in the game

00:24:01,120 --> 00:24:07,520
either way it's um it's sort of really

00:24:04,320 --> 00:24:08,480
um really useful um like that of course

00:24:07,520 --> 00:24:11,679
i don't scale

00:24:08,480 --> 00:24:13,919
um i i'm just one person

00:24:11,679 --> 00:24:15,520
um and i can't deal with 30 different

00:24:13,919 --> 00:24:17,520
iems and so there's about things about a

00:24:15,520 --> 00:24:21,200
dozen different consulting companies now

00:24:17,520 --> 00:24:22,799
which provide um um like

00:24:21,200 --> 00:24:24,880
people provide the ability to write

00:24:22,799 --> 00:24:28,080
plugins or converting old legacy code

00:24:24,880 --> 00:24:30,320
to the new kind of g object decode um or

00:24:28,080 --> 00:24:33,279
just train people on how licensing works

00:24:30,320 --> 00:24:36,559
and how the rbfs statual like ux

00:24:33,279 --> 00:24:37,440
works as well so let's get into the more

00:24:36,559 --> 00:24:39,600
interesting part

00:24:37,440 --> 00:24:40,640
to the presentation one more so there's

00:24:39,600 --> 00:24:43,279
a like

00:24:40,640 --> 00:24:44,480
one of the things we trialled is any

00:24:43,279 --> 00:24:46,240
engineer can

00:24:44,480 --> 00:24:47,520
have an ovfs account they don't have to

00:24:46,240 --> 00:24:48,799
go through the whole legal thing if they

00:24:47,520 --> 00:24:51,679
just want to test things out

00:24:48,799 --> 00:24:52,159
privately which meant that we could um

00:24:51,679 --> 00:24:53,919
sort of

00:24:52,159 --> 00:24:55,760
build the ecosystem using the engineers

00:24:53,919 --> 00:24:56,960
so a realtek engineer could go

00:24:55,760 --> 00:24:59,039
create an account in the audio first

00:24:56,960 --> 00:24:59,679
upload real text firmware find out how

00:24:59,039 --> 00:25:02,000
easy it is

00:24:59,679 --> 00:25:03,120
and say and say to his boss and say look

00:25:02,000 --> 00:25:04,240
well

00:25:03,120 --> 00:25:06,559
this is something that's going to cost

00:25:04,240 --> 00:25:08,720
us no money and get a huge amount of pr

00:25:06,559 --> 00:25:09,919
and means you can bid on these contracts

00:25:08,720 --> 00:25:12,880
um and then it's

00:25:09,919 --> 00:25:14,960
not me talking to sort of like the real

00:25:12,880 --> 00:25:17,120
tech cto it's some manager

00:25:14,960 --> 00:25:19,760
of some manager talking to the realtek

00:25:17,120 --> 00:25:22,320
cto which is a good way of onboarding

00:25:19,760 --> 00:25:25,039
um onboarding and random companies to

00:25:22,320 --> 00:25:25,039
try and do your thing

00:25:25,679 --> 00:25:29,760
but really the end of the day the oems

00:25:27,679 --> 00:25:32,799
just want an easy life

00:25:29,760 --> 00:25:36,400
like lenovo told their adm to suppliers

00:25:32,799 --> 00:25:39,039
um that lvfs and fwd is required

00:25:36,400 --> 00:25:39,600
dell similar google have basically said

00:25:39,039 --> 00:25:42,320
that

00:25:39,600 --> 00:25:43,440
if you don't do the fwd thing you lose

00:25:42,320 --> 00:25:45,600
the design for chromebook

00:25:43,440 --> 00:25:47,600
also it works with chromebook sticker

00:25:45,600 --> 00:25:50,640
which is a big deal apparently

00:25:47,600 --> 00:25:53,520
um but they don't require use the rvfs

00:25:50,640 --> 00:25:54,320
which is fine um and the idea is here

00:25:53,520 --> 00:25:56,400
that you basically

00:25:54,320 --> 00:25:57,520
the oem can choose any rules you like so

00:25:56,400 --> 00:26:00,720
you can you can

00:25:57,520 --> 00:26:01,760
um make it someone else's problem rather

00:26:00,720 --> 00:26:04,559
than having to worry about

00:26:01,760 --> 00:26:05,679
all the different relationships so i

00:26:04,559 --> 00:26:07,440
guess this is the slide that's more

00:26:05,679 --> 00:26:09,200
important from lis kind of building an

00:26:07,440 --> 00:26:11,360
ecosystem point of view

00:26:09,200 --> 00:26:13,760
so i guess the the main things here is

00:26:11,360 --> 00:26:17,279
that we want to be installed by default

00:26:13,760 --> 00:26:18,640
um if someone like lenovo went to right

00:26:17,279 --> 00:26:20,080
hand said hey we've got this new

00:26:18,640 --> 00:26:22,799
architecture this new

00:26:20,080 --> 00:26:25,120
script or this new binary we use to

00:26:22,799 --> 00:26:27,039
install firmware on these servers

00:26:25,120 --> 00:26:28,559
rather than saying well you could

00:26:27,039 --> 00:26:29,919
install this other thing which also does

00:26:28,559 --> 00:26:31,520
the same thing

00:26:29,919 --> 00:26:33,279
if you're installed by default it means

00:26:31,520 --> 00:26:34,320
we already have something installed you

00:26:33,279 --> 00:26:35,200
probably should use the thing that's

00:26:34,320 --> 00:26:36,880
already installed

00:26:35,200 --> 00:26:39,440
rather than having to install this extra

00:26:36,880 --> 00:26:40,880
thing also because it's being like it's

00:26:39,440 --> 00:26:42,799
already part of rel

00:26:40,880 --> 00:26:44,000
it's not a case of it's adding one extra

00:26:42,799 --> 00:26:45,600
file to a package

00:26:44,000 --> 00:26:48,080
rather than adding a whole new package

00:26:45,600 --> 00:26:50,159
and sort of defining an sla and

00:26:48,080 --> 00:26:52,960
maintaining all that kind of stuff so

00:26:50,159 --> 00:26:56,400
actually the benefit of it being there

00:26:52,960 --> 00:26:58,080
is amazingly um important

00:26:56,400 --> 00:26:59,919
the other thing is being ins like

00:26:58,080 --> 00:27:03,679
enabled by default

00:26:59,919 --> 00:27:05,840
so like for instance ubuntu i guess must

00:27:03,679 --> 00:27:06,960
it must be great having the snap store

00:27:05,840 --> 00:27:08,880
enabled by default

00:27:06,960 --> 00:27:10,320
and it's not a luxury we have in fedora

00:27:08,880 --> 00:27:13,679
with um flat pack

00:27:10,320 --> 00:27:16,559
um maybe maybe in the future but not now

00:27:13,679 --> 00:27:17,440
so having the lvfs enabled by default um

00:27:16,559 --> 00:27:20,240
means that

00:27:17,440 --> 00:27:22,399
rather than someone like hpe saying

00:27:20,240 --> 00:27:24,720
could you add this extra remote so that

00:27:22,399 --> 00:27:26,240
your servers contact this this website

00:27:24,720 --> 00:27:27,520
this web server so that we can get

00:27:26,240 --> 00:27:28,720
firmware updates

00:27:27,520 --> 00:27:30,559
because there's something else already

00:27:28,720 --> 00:27:32,960
installed by default you can say to them

00:27:30,559 --> 00:27:34,399
just use the thing that we already have

00:27:32,960 --> 00:27:36,559
which is quite a compelling reason

00:27:34,399 --> 00:27:40,080
rather than just saying you can

00:27:36,559 --> 00:27:41,600
do one or the other also the the idea of

00:27:40,080 --> 00:27:44,960
plug-ins were that you could have

00:27:41,600 --> 00:27:46,720
the ihv for via um who make like usb

00:27:44,960 --> 00:27:48,240
hubs and some other stuff

00:27:46,720 --> 00:27:49,360
can own that bit of the code base they

00:27:48,240 --> 00:27:51,039
don't feel like they're completely out

00:27:49,360 --> 00:27:52,000
of control that they have no control

00:27:51,039 --> 00:27:54,640
over this unit this

00:27:52,000 --> 00:27:55,120
um this open source project they are

00:27:54,640 --> 00:27:57,200
kind of

00:27:55,120 --> 00:27:58,559
um integral part there and it kind of

00:27:57,200 --> 00:28:00,960
means they have their own little like

00:27:58,559 --> 00:28:03,520
like fiefdom um which they can sort of

00:28:00,960 --> 00:28:07,360
control

00:28:03,520 --> 00:28:10,559
the second point i guess is um kind of

00:28:07,360 --> 00:28:12,159
against the idea of trying to avoid

00:28:10,559 --> 00:28:13,760
architecture astronauts thing

00:28:12,159 --> 00:28:15,279
but sooner or later you do have to just

00:28:13,760 --> 00:28:16,480
build functionality and kind of hope

00:28:15,279 --> 00:28:18,559
someone's going to use it

00:28:16,480 --> 00:28:20,240
and so i'll be developing features like

00:28:18,559 --> 00:28:20,880
especially with the plug-in library

00:28:20,240 --> 00:28:22,240
where

00:28:20,880 --> 00:28:23,919
i wasn't quite sure which vendors were

00:28:22,240 --> 00:28:24,480
going to be joining but i kind of knew

00:28:23,919 --> 00:28:26,640
that

00:28:24,480 --> 00:28:27,760
we'd probably need some i don't know usb

00:28:26,640 --> 00:28:31,200
control transfer

00:28:27,760 --> 00:28:34,480
abstraction or we might need some um

00:28:31,200 --> 00:28:37,600
i don't know endian um safe bike read

00:28:34,480 --> 00:28:38,559
functions and so sooner or later it does

00:28:37,600 --> 00:28:40,559
come down to actually

00:28:38,559 --> 00:28:42,240
writing some code so that the first

00:28:40,559 --> 00:28:42,880
person who says hey i want to be part of

00:28:42,240 --> 00:28:45,440
your club

00:28:42,880 --> 00:28:46,799
doesn't have to write half the ecosystem

00:28:45,440 --> 00:28:49,520
before they can actually do something

00:28:46,799 --> 00:28:49,919
and worthwhile this means that for the

00:28:49,520 --> 00:28:51,919
first

00:28:49,919 --> 00:28:53,600
year or two it was me writing an awful

00:28:51,919 --> 00:28:55,360
lot of code late at night

00:28:53,600 --> 00:28:57,360
um kind of praying that someone would

00:28:55,360 --> 00:28:59,840
use the code that i'd spent all this

00:28:57,360 --> 00:28:59,840
time writing

00:29:00,240 --> 00:29:03,919
the other i guess the last point that is

00:29:02,000 --> 00:29:05,840
right from the start it was made very

00:29:03,919 --> 00:29:06,559
obvious by every single oem and odm i

00:29:05,840 --> 00:29:08,320
talked to

00:29:06,559 --> 00:29:11,039
that forward and backwards compatibility

00:29:08,320 --> 00:29:12,880
were a must you can't just convince

00:29:11,039 --> 00:29:14,240
millions of people running linux all

00:29:12,880 --> 00:29:17,279
sorts of old debians

00:29:14,240 --> 00:29:19,039
and um but people running with some arch

00:29:17,279 --> 00:29:21,760
linux system you can't convince everyone

00:29:19,039 --> 00:29:23,840
to update to something at the same time

00:29:21,760 --> 00:29:25,039
and in the same way you can't ask oems

00:29:23,840 --> 00:29:26,799
who have literally put things into

00:29:25,039 --> 00:29:28,640
contracts with their

00:29:26,799 --> 00:29:30,240
suppliers to do something a different

00:29:28,640 --> 00:29:32,000
way now and so

00:29:30,240 --> 00:29:33,600
all the file formats and all the

00:29:32,000 --> 00:29:35,120
metadata are all forwards and backwards

00:29:33,600 --> 00:29:36,320
compatible so you can take a package

00:29:35,120 --> 00:29:38,240
that's been uploaded

00:29:36,320 --> 00:29:39,679
today and install it on the oldest

00:29:38,240 --> 00:29:41,039
debian stable

00:29:39,679 --> 00:29:42,880
and similarly a package that was

00:29:41,039 --> 00:29:43,279
uploaded into an unstable you can upload

00:29:42,880 --> 00:29:45,279
you can

00:29:43,279 --> 00:29:47,120
deploy it with the latest leftwb and

00:29:45,279 --> 00:29:48,640
that kind of that compatibility forwards

00:29:47,120 --> 00:29:51,200
and backwards is really hard

00:29:48,640 --> 00:29:52,720
but if you design right from the start

00:29:51,200 --> 00:29:55,520
it's the difference between

00:29:52,720 --> 00:29:58,799
another kind of ecosystem where you

00:29:55,520 --> 00:29:58,799
don't have that compatibility

00:29:59,279 --> 00:30:02,480
last point on this slide is we designed

00:30:01,600 --> 00:30:06,080
the system to not

00:30:02,480 --> 00:30:08,399
be cloned in that we didn't want there

00:30:06,080 --> 00:30:09,600
to be an internal vfs

00:30:08,399 --> 00:30:10,960
now you probably trust intel because

00:30:09,600 --> 00:30:14,000
you're running an intel processor you

00:30:10,960 --> 00:30:15,279
have intel microcode running right now

00:30:14,000 --> 00:30:18,000
because we didn't want things like an

00:30:15,279 --> 00:30:19,840
hpe lvfs to be weird if you're on a dell

00:30:18,000 --> 00:30:21,240
laptop for it to be support

00:30:19,840 --> 00:30:23,200
for it to be pinging support

00:30:21,240 --> 00:30:25,039
support.hp.com every

00:30:23,200 --> 00:30:26,640
every day from like something else from

00:30:25,039 --> 00:30:29,039
a privacy point of view and a bandwidth

00:30:26,640 --> 00:30:30,480
and a power usage point of view as well

00:30:29,039 --> 00:30:32,320
but also some vendors that you're using

00:30:30,480 --> 00:30:34,000
stuff like if you're using a bluetooth

00:30:32,320 --> 00:30:34,960
mouse you could be using pixar

00:30:34,000 --> 00:30:36,559
which probably a company you've never

00:30:34,960 --> 00:30:38,240
even heard of and you get kind of

00:30:36,559 --> 00:30:38,880
freaked out if your pc was contacting

00:30:38,240 --> 00:30:42,880
them every day

00:30:38,880 --> 00:30:44,480
with your epi address and user agent

00:30:42,880 --> 00:30:46,159
so the idea is although it's all open

00:30:44,480 --> 00:30:47,679
source code and even the website is all

00:30:46,159 --> 00:30:50,159
completely gpl

00:30:47,679 --> 00:30:51,919
code you actually to spin up an instance

00:30:50,159 --> 00:30:54,240
is actually quite hard

00:30:51,919 --> 00:30:55,200
and because the signing key is part of

00:30:54,240 --> 00:30:57,039
the fwd

00:30:55,200 --> 00:30:59,679
package rather than downloaded from the

00:30:57,039 --> 00:31:02,320
ldfs there is deliberately no way of

00:30:59,679 --> 00:31:03,519
adding extra signing keys or updating

00:31:02,320 --> 00:31:05,840
existing signing keys

00:31:03,519 --> 00:31:07,120
or adding remotes for other vendors and

00:31:05,840 --> 00:31:09,440
so it's a case of

00:31:07,120 --> 00:31:11,440
you either play by the rules you've got

00:31:09,440 --> 00:31:13,279
or you can't deploy your firmware

00:31:11,440 --> 00:31:14,960
um which is kind of an aggressive but

00:31:13,279 --> 00:31:15,760
kind of essential part of not being

00:31:14,960 --> 00:31:17,600
fragmented

00:31:15,760 --> 00:31:18,799
like this is like it's it's like a

00:31:17,600 --> 00:31:21,120
hugely monolithic

00:31:18,799 --> 00:31:22,320
kind of design but it wouldn't have had

00:31:21,120 --> 00:31:24,000
the success that it had

00:31:22,320 --> 00:31:26,640
without these kind of sort of strict

00:31:24,000 --> 00:31:30,960
rules that stopped this fragmentation

00:31:26,640 --> 00:31:30,960
um for i guess a few different reasons

00:31:31,519 --> 00:31:34,640
the other thing that's important is the

00:31:32,559 --> 00:31:36,960
oem already does things a certain way

00:31:34,640 --> 00:31:38,159
like dell already calls their firmware

00:31:36,960 --> 00:31:40,559
um uh

00:31:38,159 --> 00:31:41,600
package tag and lenovo calls a build

00:31:40,559 --> 00:31:43,840
package name

00:31:41,600 --> 00:31:46,480
and so by providing a way of it's

00:31:43,840 --> 00:31:48,000
basically licensed like an hour's work

00:31:46,480 --> 00:31:49,440
but it meant that the lenovo engineers

00:31:48,000 --> 00:31:49,760
that were uploading firmware could see

00:31:49,440 --> 00:31:52,240
the

00:31:49,760 --> 00:31:52,880
terms and the urls they were familiar

00:31:52,240 --> 00:31:54,480
with

00:31:52,880 --> 00:31:55,919
rather than forcing them to learn about

00:31:54,480 --> 00:31:57,760
things like um

00:31:55,919 --> 00:31:59,840
build package names or something in the

00:31:57,760 --> 00:32:01,840
same way with flat pack you wouldn't

00:31:59,840 --> 00:32:04,159
maybe expect the microsoft engineers to

00:32:01,840 --> 00:32:05,519
learn about the flat pack manifest

00:32:04,159 --> 00:32:07,360
because it's some the technology they're

00:32:05,519 --> 00:32:09,039
not using already so maybe there's some

00:32:07,360 --> 00:32:11,039
sort of like work that can be done there

00:32:09,039 --> 00:32:15,840
making it kind of more similar to the

00:32:11,039 --> 00:32:15,840
system that they're using already

00:32:16,159 --> 00:32:19,440
and also existing contracts exist

00:32:18,320 --> 00:32:21,200
between companies i think maybe less

00:32:19,440 --> 00:32:22,640
relevant from app ecosystem point of

00:32:21,200 --> 00:32:24,159
view maybe more relevant from a firmware

00:32:22,640 --> 00:32:27,039
ecosystem point of view

00:32:24,159 --> 00:32:28,720
but you can't assume that your new

00:32:27,039 --> 00:32:29,600
fantasy distribution method is going to

00:32:28,720 --> 00:32:31,760
be the one that's

00:32:29,600 --> 00:32:32,720
um going to be it's going to be the the

00:32:31,760 --> 00:32:34,720
only one that

00:32:32,720 --> 00:32:36,559
people are using so you kind of have to

00:32:34,720 --> 00:32:39,519
assume

00:32:36,559 --> 00:32:39,760
um that for instance here that westeron

00:32:39,519 --> 00:32:42,000
or

00:32:39,760 --> 00:32:43,760
foxconn or whoever the odm is is

00:32:42,000 --> 00:32:45,440
supplying hardware for an oem

00:32:43,760 --> 00:32:46,880
whom that firmware might have come

00:32:45,440 --> 00:32:50,159
originally from the ibv

00:32:46,880 --> 00:32:51,679
like phoenix or ami or something and so

00:32:50,159 --> 00:32:53,279
the rvfs has this

00:32:51,679 --> 00:32:54,960
idea that all the different companies

00:32:53,279 --> 00:32:56,799
would log in and then the firmware can

00:32:54,960 --> 00:32:58,799
be shared between companies

00:32:56,799 --> 00:33:00,559
so we kind of make we did all that work

00:32:58,799 --> 00:33:01,679
to integrate all these different

00:33:00,559 --> 00:33:04,960
suppliers

00:33:01,679 --> 00:33:06,320
um which um when the easier thing to do

00:33:04,960 --> 00:33:08,640
would be just let lenovo

00:33:06,320 --> 00:33:10,480
uh upload the firmware um but it means

00:33:08,640 --> 00:33:10,880
that you you're not then embedded into

00:33:10,480 --> 00:33:13,760
their

00:33:10,880 --> 00:33:14,399
supply chain you're just um sort of just

00:33:13,760 --> 00:33:17,360
uh like a

00:33:14,399 --> 00:33:19,039
ftp site now this meant that now when

00:33:17,360 --> 00:33:20,480
the contracts are negotiated between the

00:33:19,039 --> 00:33:22,640
odms and the ibvs

00:33:20,480 --> 00:33:24,799
that the lvfs and having an engineer

00:33:22,640 --> 00:33:26,240
that is familiar with uploading to rbfs

00:33:24,799 --> 00:33:27,760
is part of the contract

00:33:26,240 --> 00:33:29,440
which is awesome because this means that

00:33:27,760 --> 00:33:32,240
the ecosystem gets kind of

00:33:29,440 --> 00:33:32,720
cemented into this kind of this this pop

00:33:32,240 --> 00:33:35,200
this

00:33:32,720 --> 00:33:38,000
firmware thing and it's it's working

00:33:35,200 --> 00:33:39,679
really well

00:33:38,000 --> 00:33:41,039
of course you're not the only ecosystem

00:33:39,679 --> 00:33:42,720
so in the same way that flat pack has

00:33:41,039 --> 00:33:44,559
snap and snap has flat pack

00:33:42,720 --> 00:33:46,240
there are two worlds or there are

00:33:44,559 --> 00:33:48,720
multiple worlds and so

00:33:46,240 --> 00:33:49,600
um our worlds at the moment are winners

00:33:48,720 --> 00:33:52,880
updates

00:33:49,600 --> 00:33:54,640
um and the rvfs

00:33:52,880 --> 00:33:56,080
and here we com a company called

00:33:54,640 --> 00:33:57,919
eclipsium

00:33:56,080 --> 00:33:59,440
have access to some of the microsoft

00:33:57,919 --> 00:34:01,519
data and also from the

00:33:59,440 --> 00:34:03,120
vendors themselves and we've actually

00:34:01,519 --> 00:34:05,679
provided tools for the

00:34:03,120 --> 00:34:07,120
vendors to kind of remind them when

00:34:05,679 --> 00:34:09,599
maybe linux users might got a lot

00:34:07,120 --> 00:34:10,720
left out and there's i think in will's

00:34:09,599 --> 00:34:13,679
talk yesterday or some

00:34:10,720 --> 00:34:15,280
about um some of the work on flat pack

00:34:13,679 --> 00:34:17,599
manifests where

00:34:15,280 --> 00:34:20,000
it might not be the flat pack is being

00:34:17,599 --> 00:34:21,760
um uploaded by the original software

00:34:20,000 --> 00:34:23,440
author and it might be that the original

00:34:21,760 --> 00:34:25,839
software author has chosen a different

00:34:23,440 --> 00:34:26,960
world to upload their software to it's

00:34:25,839 --> 00:34:30,000
actually giving the

00:34:26,960 --> 00:34:31,440
kind of the packager um the tools so

00:34:30,000 --> 00:34:32,879
they know when things are out of date or

00:34:31,440 --> 00:34:34,560
things he's updating or even

00:34:32,879 --> 00:34:36,399
automating it completely like for

00:34:34,560 --> 00:34:37,839
instance dell this is very

00:34:36,399 --> 00:34:39,440
useless for dell because dell has this

00:34:37,839 --> 00:34:41,280
build pipeline which automatically has a

00:34:39,440 --> 00:34:42,320
robot user which uploads firmware for

00:34:41,280 --> 00:34:44,399
various different models

00:34:42,320 --> 00:34:46,560
which then get qa by real people and

00:34:44,399 --> 00:34:48,159
then push to stable

00:34:46,560 --> 00:34:49,760
but for someone like level which bit

00:34:48,159 --> 00:34:50,960
more manual this is really useful and

00:34:49,760 --> 00:34:54,240
they can see at a glance

00:34:50,960 --> 00:34:58,159
what software is is maybe not today both

00:34:54,240 --> 00:34:58,159
on the lvfs and windows update

00:34:58,800 --> 00:35:03,200
so we've supplied like like like 27.70

00:35:01,920 --> 00:35:07,200
38.0 now

00:35:03,200 --> 00:35:08,400
um files it's like a 1.2 million a month

00:35:07,200 --> 00:35:11,040
or something now

00:35:08,400 --> 00:35:12,560
um but that might be a massive

00:35:11,040 --> 00:35:13,760
underestimate because as i mentioned

00:35:12,560 --> 00:35:15,200
right at the start we have

00:35:13,760 --> 00:35:17,359
the idea of where you can mirror the

00:35:15,200 --> 00:35:18,160
entire rvfs without us knowing about it

00:35:17,359 --> 00:35:21,359
for either

00:35:18,160 --> 00:35:22,160
security privacy or any other reason um

00:35:21,359 --> 00:35:24,160
but we know that

00:35:22,160 --> 00:35:25,760
2.1 million people have reported back

00:35:24,160 --> 00:35:28,320
success um

00:35:25,760 --> 00:35:29,839
which is not unexpected because we only

00:35:28,320 --> 00:35:32,960
ask one percent

00:35:29,839 --> 00:35:34,079
one set people using the console so you

00:35:32,960 --> 00:35:36,160
can kind of like

00:35:34,079 --> 00:35:37,200
use some back of the envelope maths and

00:35:36,160 --> 00:35:39,200
probably say that

00:35:37,200 --> 00:35:40,800
we've supplied really over 100 million

00:35:39,200 --> 00:35:42,160
firmware files which is something i'm

00:35:40,800 --> 00:35:44,720
really proud of

00:35:42,160 --> 00:35:45,280
um and when you take those numbers to an

00:35:44,720 --> 00:35:47,440
oem

00:35:45,280 --> 00:35:48,320
and say look this is the number we know

00:35:47,440 --> 00:35:50,560
um and

00:35:48,320 --> 00:35:52,800
we know that 12 million people every day

00:35:50,560 --> 00:35:55,119
look for the latest updates

00:35:52,800 --> 00:35:56,000
that's kind of super numbers that kind

00:35:55,119 --> 00:35:59,839
of take

00:35:56,000 --> 00:35:59,839
um take no people's notice

00:36:00,400 --> 00:36:04,800
so dell said that it's now strategically

00:36:02,480 --> 00:36:06,640
important for them to support the rbfs

00:36:04,800 --> 00:36:08,560
they've they've had a lot of good pr and

00:36:06,640 --> 00:36:10,640
also good business from this

00:36:08,560 --> 00:36:12,079
lenovo has said that standardizing has

00:36:10,640 --> 00:36:13,599
been seamless and i was just talking to

00:36:12,079 --> 00:36:15,359
intelligence a few days ago

00:36:13,599 --> 00:36:17,119
and they said they use windows update

00:36:15,359 --> 00:36:19,680
and lvfs

00:36:17,119 --> 00:36:20,800
and they called the windows update

00:36:19,680 --> 00:36:22,640
system painful

00:36:20,800 --> 00:36:25,040
and they said it could compare it being

00:36:22,640 --> 00:36:27,119
night and day compared to using the lbfs

00:36:25,040 --> 00:36:28,240
which i took as a really big compliment

00:36:27,119 --> 00:36:29,680
um and there's

00:36:28,240 --> 00:36:32,640
various people asking can we use the

00:36:29,680 --> 00:36:35,520
lbfs um in on other platforms

00:36:32,640 --> 00:36:36,880
so google already using on chrome os but

00:36:35,520 --> 00:36:38,160
people say well can we use it on

00:36:36,880 --> 00:36:40,560
windows as well which is something

00:36:38,160 --> 00:36:41,359
that's kind of blurs a line a little bit

00:36:40,560 --> 00:36:43,200
and it's not

00:36:41,359 --> 00:36:46,320
something i'm super comfortable with but

00:36:43,200 --> 00:36:46,320
yeah maybe i'm not sure

00:36:47,200 --> 00:36:50,720
so thank you for listening um i've

00:36:48,720 --> 00:36:53,839
rattled through this really quickly

00:36:50,720 --> 00:36:55,359
i'm my personal email uh read her email

00:36:53,839 --> 00:36:57,359
and i also have twitter

00:36:55,359 --> 00:36:59,040
you can talk to me grab me on any and

00:36:57,359 --> 00:37:02,320
talk to me about any stuff

00:36:59,040 --> 00:37:03,359
um thank you for listening yes you show

00:37:02,320 --> 00:37:05,440
the notes

00:37:03,359 --> 00:37:07,680
on the left side of the screen right

00:37:05,440 --> 00:37:11,200
shared notes

00:37:07,680 --> 00:37:12,560
right you have some questions yes so

00:37:11,200 --> 00:37:14,320
how hard it is to get into firmware

00:37:12,560 --> 00:37:15,680
world that various experience

00:37:14,320 --> 00:37:16,880
when you graduate how hard it is to find

00:37:15,680 --> 00:37:18,079
a company that hires you to provide

00:37:16,880 --> 00:37:19,119
selectors to put your knowledge about

00:37:18,079 --> 00:37:21,520
programming

00:37:19,119 --> 00:37:22,560
or the ecosystem of firmware however etc

00:37:21,520 --> 00:37:25,200
so i guess

00:37:22,560 --> 00:37:27,200
it's a kind of a big question but i'm an

00:37:25,200 --> 00:37:30,480
electronic engineer by trade

00:37:27,200 --> 00:37:33,200
so i thought um i graduated

00:37:30,480 --> 00:37:34,079
from sorry uni went to work for defense

00:37:33,200 --> 00:37:35,920
contracts

00:37:34,079 --> 00:37:37,280
doing electronic stuff and kind of got

00:37:35,920 --> 00:37:40,640
into software

00:37:37,280 --> 00:37:41,920
um but really like firmware isn't this

00:37:40,640 --> 00:37:44,800
big scary thing

00:37:41,920 --> 00:37:46,079
like programming on an arduino is

00:37:44,800 --> 00:37:48,079
firmware

00:37:46,079 --> 00:37:50,400
like when you flash an arduino it's

00:37:48,079 --> 00:37:51,040
that's what i call firmware so we have

00:37:50,400 --> 00:37:53,040
to do is

00:37:51,040 --> 00:37:54,480
like play with something like a pic

00:37:53,040 --> 00:37:57,440
microcontroller

00:37:54,480 --> 00:37:59,680
micro bit or something um and we have

00:37:57,440 --> 00:38:03,040
people distributing firmware on the ivfs

00:37:59,680 --> 00:38:04,079
with arduino stuff so it doesn't you

00:38:03,040 --> 00:38:06,160
don't have to be some

00:38:04,079 --> 00:38:08,160
massive company like dell some people

00:38:06,160 --> 00:38:09,119
might only have 200 sales of some

00:38:08,160 --> 00:38:11,280
product from

00:38:09,119 --> 00:38:13,839
some open harbor product and they use

00:38:11,280 --> 00:38:19,440
the lvfs for distributing that

00:38:13,839 --> 00:38:21,760
that's sort of super useful for them um

00:38:19,440 --> 00:38:23,200
right i guess that's sort of fudge that

00:38:21,760 --> 00:38:24,720
first question

00:38:23,200 --> 00:38:26,480
second one how do you persuade companies

00:38:24,720 --> 00:38:28,800
to add their hardware firmware to ldfs

00:38:26,480 --> 00:38:32,960
and if some completely persuaded others

00:38:28,800 --> 00:38:35,200
as the genie linux did some markets so

00:38:32,960 --> 00:38:36,079
it's really hard so asking that question

00:38:35,200 --> 00:38:39,440
five years ago

00:38:36,079 --> 00:38:41,440
and i would have said you have to

00:38:39,440 --> 00:38:42,640
ask on twitter find a social media

00:38:41,440 --> 00:38:45,119
account

00:38:42,640 --> 00:38:47,920
try and get a contact in a company file

00:38:45,119 --> 00:38:51,200
bugs call the support line etc

00:38:47,920 --> 00:38:51,920
nowadays that's less true nowadays it's

00:38:51,200 --> 00:38:53,440
vendors

00:38:51,920 --> 00:38:55,200
who are bidding for government contracts

00:38:53,440 --> 00:38:56,640
finding they can't bid unless they have

00:38:55,200 --> 00:38:58,800
support on the rvfs

00:38:56,640 --> 00:39:00,240
for their firmware because the

00:38:58,800 --> 00:39:01,599
government contract wants to reuse the

00:39:00,240 --> 00:39:03,520
rbfs service to avoid

00:39:01,599 --> 00:39:06,480
obsolescence or security issues or for

00:39:03,520 --> 00:39:08,240
some sort of certification

00:39:06,480 --> 00:39:10,560
so it's kind of changed in the last five

00:39:08,240 --> 00:39:12,240
years from me pleading with vendors

00:39:10,560 --> 00:39:13,520
to them pleading with me so i've had

00:39:12,240 --> 00:39:14,079
vendors come to me in the past and said

00:39:13,520 --> 00:39:16,079
look

00:39:14,079 --> 00:39:17,920
we have this multi-million dollar sale

00:39:16,079 --> 00:39:18,720
um and we can't complete this sale with

00:39:17,920 --> 00:39:21,040
this customer

00:39:18,720 --> 00:39:22,400
until the ibfs stuff has happened can

00:39:21,040 --> 00:39:23,119
you just say that the audio first stuff

00:39:22,400 --> 00:39:25,680
has happened

00:39:23,119 --> 00:39:26,560
and then um we'll do it in the next few

00:39:25,680 --> 00:39:29,760
months

00:39:26,560 --> 00:39:31,599
and i'm like so that's fraud and

00:39:29,760 --> 00:39:33,680
anyway so heaven and earth gets moved

00:39:31,599 --> 00:39:35,280
and they

00:39:33,680 --> 00:39:37,359
they actually do the work they need to

00:39:35,280 --> 00:39:40,000
do and the contract gets signed

00:39:37,359 --> 00:39:40,480
so i can kind of switch from being kind

00:39:40,000 --> 00:39:43,760
of

00:39:40,480 --> 00:39:46,000
asking like nicely to kind of being

00:39:43,760 --> 00:39:47,760
blunt being an because i can say

00:39:46,000 --> 00:39:49,280
i need you to use this metadata format i

00:39:47,760 --> 00:39:50,960
need to supply this data

00:39:49,280 --> 00:39:52,560
i need you to do these steps i need you

00:39:50,960 --> 00:39:54,480
to do this legal release

00:39:52,560 --> 00:39:56,000
i need you not to have a euler and you

00:39:54,480 --> 00:39:57,280
should not have a warranty statement

00:39:56,000 --> 00:39:59,520
all this kind of stuff where i can be

00:39:57,280 --> 00:40:01,119
quite blunt now

00:39:59,520 --> 00:40:03,359
um and actually although the linux

00:40:01,119 --> 00:40:06,480
market is two or three percent

00:40:03,359 --> 00:40:07,599
that's kind of the consumer kind of side

00:40:06,480 --> 00:40:09,760
of the linux market

00:40:07,599 --> 00:40:12,000
if you're someone like the u.s

00:40:09,760 --> 00:40:13,119
government uk government or something

00:40:12,000 --> 00:40:14,240
you're not the sort of person that's

00:40:13,119 --> 00:40:16,640
going to be filling in a survey that

00:40:14,240 --> 00:40:18,240
says oh i lose linux i use this distro i

00:40:16,640 --> 00:40:21,359
use this hardware

00:40:18,240 --> 00:40:24,319
so we like my got instinct says that

00:40:21,359 --> 00:40:25,520
like in enterprise it's just hugely

00:40:24,319 --> 00:40:26,960
bigger than that number

00:40:25,520 --> 00:40:29,119
i'm just looking at the amount of effort

00:40:26,960 --> 00:40:31,359
companies putting on this kind of stuff

00:40:29,119 --> 00:40:33,280
um the other thing of course is chrome

00:40:31,359 --> 00:40:35,520
os when google turned around and said

00:40:33,280 --> 00:40:37,359
we need um we want to use fwd on chrome

00:40:35,520 --> 00:40:38,640
os which is i guess for two well at

00:40:37,359 --> 00:40:40,720
least three reasons

00:40:38,640 --> 00:40:42,160
one was they had a huge number of

00:40:40,720 --> 00:40:44,400
updaters on there

00:40:42,160 --> 00:40:45,599
um in their mmc storage that is really

00:40:44,400 --> 00:40:47,440
expensive

00:40:45,599 --> 00:40:49,839
and each update was set like a 60

00:40:47,440 --> 00:40:52,000
megabyte statically linked blob

00:40:49,839 --> 00:40:53,839
um and with fwd each one of those

00:40:52,000 --> 00:40:56,560
updaters is a 15

00:40:53,839 --> 00:40:58,400
kilobyte blob because it's all using

00:40:56,560 --> 00:41:00,720
this shared functionality

00:40:58,400 --> 00:41:02,400
the other thing is security so the

00:41:00,720 --> 00:41:04,160
security team at google could actually

00:41:02,400 --> 00:41:06,000
review the code

00:41:04,160 --> 00:41:07,680
and say look this has passed our

00:41:06,000 --> 00:41:09,040
internal security review

00:41:07,680 --> 00:41:12,160
and we're going to build that and then

00:41:09,040 --> 00:41:14,079
distribute thousands of computers

00:41:12,160 --> 00:41:15,680
and it also meant that they could um

00:41:14,079 --> 00:41:17,359
distribute firmware updates

00:41:15,680 --> 00:41:19,839
all the stuff that we developed on linux

00:41:17,359 --> 00:41:21,520
and use on chrome os with almost no work

00:41:19,839 --> 00:41:24,880
they could just integrate into their own

00:41:21,520 --> 00:41:25,520
boot process um which means that this

00:41:24,880 --> 00:41:26,640
the whole

00:41:25,520 --> 00:41:28,720
kind of works with chromebook

00:41:26,640 --> 00:41:31,040
certification which to me is

00:41:28,720 --> 00:41:32,960
a sticker is a huge deal for these

00:41:31,040 --> 00:41:35,839
companies so christmas last year

00:41:32,960 --> 00:41:37,520
i had about maybe 30 or 40 different

00:41:35,839 --> 00:41:38,000
companies sort of contact me and say

00:41:37,520 --> 00:41:40,000
look

00:41:38,000 --> 00:41:41,440
we need this otherwise we lose the

00:41:40,000 --> 00:41:44,560
sticker um

00:41:41,440 --> 00:41:47,520
and so it was a very busy couple months

00:41:44,560 --> 00:41:48,400
telling people about licensing and how

00:41:47,520 --> 00:41:50,319
we collaborate

00:41:48,400 --> 00:41:52,160
and how pull requests work and that kind

00:41:50,319 --> 00:41:54,240
of thing and that's where the

00:41:52,160 --> 00:41:56,079
kind of the the the need for the

00:41:54,240 --> 00:41:57,040
consulting companies came it's like the

00:41:56,079 --> 00:41:59,680
3m debs

00:41:57,040 --> 00:42:01,200
the collaborators the all the other kind

00:41:59,680 --> 00:42:02,720
of the companies that

00:42:01,200 --> 00:42:04,400
we're familiar with from like for

00:42:02,720 --> 00:42:05,920
developing linux apps

00:42:04,400 --> 00:42:07,920
are now the ones that are helping the

00:42:05,920 --> 00:42:10,240
com com um helping the

00:42:07,920 --> 00:42:12,000
the vendors um get their firmware on the

00:42:10,240 --> 00:42:15,520
rbfs and also get

00:42:12,000 --> 00:42:18,400
um their flashing protocols into fwfd

00:42:15,520 --> 00:42:20,160
where we can all share them

00:42:18,400 --> 00:42:22,160
so last question um would you envision

00:42:20,160 --> 00:42:25,680
lvfs being used on more bespoke systems

00:42:22,160 --> 00:42:27,599
like cars and other iot devices

00:42:25,680 --> 00:42:29,119
really good question and i know people

00:42:27,599 --> 00:42:32,720
are using fthrt

00:42:29,119 --> 00:42:33,920
on there's a um i guess big oil company

00:42:32,720 --> 00:42:37,119
which is using

00:42:33,920 --> 00:42:38,880
um like a bazillion iot nodes for

00:42:37,119 --> 00:42:42,000
measuring

00:42:38,880 --> 00:42:44,480
um ground movement

00:42:42,000 --> 00:42:46,240
and they're using ftwd to deploy the

00:42:44,480 --> 00:42:48,160
firmware

00:42:46,240 --> 00:42:49,359
now they're not using the lvfs because

00:42:48,160 --> 00:42:50,800
what they want to do is they want to do

00:42:49,359 --> 00:42:52,000
like a stage deployment you don't want

00:42:50,800 --> 00:42:55,040
one update which

00:42:52,000 --> 00:42:56,800
bricks 10 000 nodes you

00:42:55,040 --> 00:42:58,160
so they're deploying they're doing test

00:42:56,800 --> 00:43:00,079
deployments on like lab

00:42:58,160 --> 00:43:02,240
versions of each different type of

00:43:00,079 --> 00:43:03,040
hardware and then before it goes out

00:43:02,240 --> 00:43:05,040
onto these

00:43:03,040 --> 00:43:06,000
sort of thousands of nodes um they're

00:43:05,040 --> 00:43:07,280
actually i think they're using like

00:43:06,000 --> 00:43:09,680
smart ansible or something

00:43:07,280 --> 00:43:11,680
like a puppetty type thing to deploy the

00:43:09,680 --> 00:43:14,480
firmware using swd

00:43:11,680 --> 00:43:16,400
so the fact that the firmware is has

00:43:14,480 --> 00:43:18,160
been obtained from the rbfs is really

00:43:16,400 --> 00:43:19,359
useful for them because it's signed and

00:43:18,160 --> 00:43:21,200
they know where it's come from and they

00:43:19,359 --> 00:43:22,800
can rely on the vendor to supply updates

00:43:21,200 --> 00:43:25,440
for this hardware

00:43:22,800 --> 00:43:27,839
um it's probably more useful for them to

00:43:25,440 --> 00:43:29,280
control distribution themselves

00:43:27,839 --> 00:43:31,119
which is something we kind of don't i

00:43:29,280 --> 00:43:33,119
don't get into the whole kind of

00:43:31,119 --> 00:43:35,440
like fleet management stuff that's not

00:43:33,119 --> 00:43:36,640
something i think fwd or the rvfs wants

00:43:35,440 --> 00:43:39,200
to deal with

00:43:36,640 --> 00:43:40,720
um basically here's the metadata here's

00:43:39,200 --> 00:43:41,599
the mechanism and you can connect them

00:43:40,720 --> 00:43:43,040
however you like

00:43:41,599 --> 00:43:45,280
just kind of also having people at

00:43:43,040 --> 00:43:47,200
google do it as well

00:43:45,280 --> 00:43:48,319
so i think that's all the questions i

00:43:47,200 --> 00:43:50,640
think i've got

00:43:48,319 --> 00:43:51,760
no time so thank you all for listening

00:43:50,640 --> 00:43:53,520
if anyone wants to contact me use

00:43:51,760 --> 00:43:54,319
twitter use my work email use my

00:43:53,520 --> 00:43:56,000
personal email

00:43:54,319 --> 00:43:58,400
i'm happy to answer questions there as

00:43:56,000 --> 00:43:58,400

YouTube URL: https://www.youtube.com/watch?v=tKHrNfSQvo8


