Title: Writing native Linux desktop apps with JavaScript
Publication date: 2021-05-30
Playlist: Linux App Summit 2021 Talks
Description: 
	If you are a JavaScript developer and want to write something for the Linux desktop in JavaScript, two popular ways are to use Electron or to publish an extension for GNOME Shell on extensions.gnome.org. However, there is a third way that doesn't require users to use GNOME and doesn't require embedding a web browser!

In this talk I will walk through the process of creating a native desktop app written in JavaScript and publishing it to users.

Twitter and/or Mastodon Handle

@therealptomato


Author(s) Bio

Philip Chimento is a GNOME contributor, and the maintainer of GNOME's JavaScript bindings, as well as the author of the Inform 7 IDE on Flathub. His day job is being a JavaScript engine developer at Igalia S.L.


Q&A


1. Isn't Glade UI deprecated for creating UIs?

2. For maintainance, which is better? XML or code?

3.  Which language is GJS built upon?

4. is there an easy way to add a webview/browser widget? (no experience with gtk, sorry for the stupid question)

5. can GJS be used cross platform (Linux, Win, Mac, Android, iOS)?

6. how does GJS compare to electron performance and memory wise?

6.1. Is it native code? Or is it JS runtime in GJS running? Or native code for gui elements, and js for my logic, wirrten in js.

7.  Can this GJS be easily packed for windows and mac?

8. Is there http2 support in gjs, and is it transparent?

9. is webkitgtk cross-platform as well, like available in windows, mac as well?

10. Will it have good compatibility in respect to UI with QT? yes GJS.

11. RUST story?use of rust lib
Captions: 
	00:00:00,799 --> 00:00:04,480
all right uh so

00:00:04,880 --> 00:00:08,320
take a moment to breathe after the

00:00:07,200 --> 00:00:11,599
stress of the

00:00:08,320 --> 00:00:14,320
technical problems and uh we'll get

00:00:11,599 --> 00:00:15,679
started so this

00:00:14,320 --> 00:00:17,359
presentation is going to be about

00:00:15,679 --> 00:00:18,240
writing native linux desktop apps with

00:00:17,359 --> 00:00:21,359
javascript

00:00:18,240 --> 00:00:24,560
my name is philip camento uh i'm

00:00:21,359 --> 00:00:26,640
joining you from vancouver bc canada uh

00:00:24,560 --> 00:00:28,640
and these this is where you can find me

00:00:26,640 --> 00:00:31,840
on github and

00:00:28,640 --> 00:00:31,840
twitter and stuff like that

00:00:34,239 --> 00:00:39,200
so a bit about this talk i'm the

00:00:37,360 --> 00:00:40,800
maintainer of djs which is the

00:00:39,200 --> 00:00:42,399
javascript bindings to the gnome

00:00:40,800 --> 00:00:45,280
platform

00:00:42,399 --> 00:00:46,160
and gjs is an environment that people

00:00:45,280 --> 00:00:48,719
can and do

00:00:46,160 --> 00:00:50,239
use to write apps in javascript for the

00:00:48,719 --> 00:00:52,480
linux desktop

00:00:50,239 --> 00:00:54,480
uh the most famous one is probably the

00:00:52,480 --> 00:00:57,360
irc client polari

00:00:54,480 --> 00:00:58,480
but there's also the flat seal the

00:00:57,360 --> 00:01:02,000
permissions manager

00:00:58,480 --> 00:01:03,840
and foliate the the ebook reader uh and

00:01:02,000 --> 00:01:05,920
commit message editor and things like

00:01:03,840 --> 00:01:07,360
that um

00:01:05,920 --> 00:01:09,119
a lot of these apps are available on

00:01:07,360 --> 00:01:10,720
flat hub which means that even though

00:01:09,119 --> 00:01:12,400
they use the gnome platform libraries

00:01:10,720 --> 00:01:14,000
they work anywhere flat pack is

00:01:12,400 --> 00:01:15,840
available which is on

00:01:14,000 --> 00:01:18,560
i think pretty much all major linux

00:01:15,840 --> 00:01:18,560
distributions

00:01:19,680 --> 00:01:24,640
traditionally at djs we've been aiming

00:01:23,119 --> 00:01:26,080
our documentation at programmers who

00:01:24,640 --> 00:01:27,200
have already written desktop apps in

00:01:26,080 --> 00:01:29,360
other languages

00:01:27,200 --> 00:01:31,840
other programming languages and want to

00:01:29,360 --> 00:01:34,400
use javascript for

00:01:31,840 --> 00:01:35,439
convenience or you know rapid

00:01:34,400 --> 00:01:38,000
development

00:01:35,439 --> 00:01:40,400
because it's faster than writing some

00:01:38,000 --> 00:01:41,759
compiled languages like c but

00:01:40,400 --> 00:01:43,600
one of the reasons we always give for

00:01:41,759 --> 00:01:44,320
even having javascript bindings in the

00:01:43,600 --> 00:01:46,479
first place

00:01:44,320 --> 00:01:47,840
is so that it's more familiar to web

00:01:46,479 --> 00:01:49,520
developers and

00:01:47,840 --> 00:01:51,600
they can get started quicker on our

00:01:49,520 --> 00:01:54,799
platform and

00:01:51,600 --> 00:01:56,240
uh so this this talk is about answering

00:01:54,799 --> 00:01:58,640
the question is that really true

00:01:56,240 --> 00:02:00,719
i was curious about whether i could

00:01:58,640 --> 00:02:02,159
present a talk from that perspective and

00:02:00,719 --> 00:02:04,560
and this talk is going to be sort of an

00:02:02,159 --> 00:02:05,920
experiment and it's been uh

00:02:04,560 --> 00:02:07,520
brewing in the back of my mind for a

00:02:05,920 --> 00:02:09,840
while and in conversations with other

00:02:07,520 --> 00:02:09,840
people

00:02:10,800 --> 00:02:14,000
a little bit about what it is and isn't

00:02:12,720 --> 00:02:16,000
this talk is for people who know

00:02:14,000 --> 00:02:19,040
javascript from other contexts like

00:02:16,000 --> 00:02:20,480
front-end web development or node.js

00:02:19,040 --> 00:02:22,239
and are interested in how they could use

00:02:20,480 --> 00:02:23,920
their existing knowledge to write an app

00:02:22,239 --> 00:02:26,160
for the linux desktop

00:02:23,920 --> 00:02:28,400
it'll consist of a walkthrough with some

00:02:26,160 --> 00:02:29,599
digressions here and there

00:02:28,400 --> 00:02:31,360
starting with setting up a project

00:02:29,599 --> 00:02:32,239
skeleton and setting up your developer

00:02:31,360 --> 00:02:33,680
tools

00:02:32,239 --> 00:02:35,280
to things that you might want to be

00:02:33,680 --> 00:02:37,599
aware of while coding to

00:02:35,280 --> 00:02:38,640
distribution by a flat hub which i hope

00:02:37,599 --> 00:02:43,280
there's not

00:02:38,640 --> 00:02:45,120
too much overlap with

00:02:43,280 --> 00:02:48,239
dan and arielle's excellent talk that we

00:02:45,120 --> 00:02:48,239
just listened to before mine

00:02:49,680 --> 00:02:53,599
so uh one thing to note a few years ago

00:02:52,080 --> 00:02:56,160
this talk would have only applied to the

00:02:53,599 --> 00:02:57,920
gnome desktop because these technologies

00:02:56,160 --> 00:02:59,840
like gjs and gtk they're part of the

00:02:57,920 --> 00:03:01,360
gnome platform but ever since we have

00:02:59,840 --> 00:03:02,800
flat pack and flat hub

00:03:01,360 --> 00:03:05,280
you can basically write and publish an

00:03:02,800 --> 00:03:08,720
app using whatever desktop platform you

00:03:05,280 --> 00:03:10,159
want and it'll work on any linux desktop

00:03:08,720 --> 00:03:12,319
so the other thing with this talk is is

00:03:10,159 --> 00:03:14,319
a resource that you can go back to later

00:03:12,319 --> 00:03:14,560
and reread and click on all the links in

00:03:14,319 --> 00:03:17,760
it

00:03:14,560 --> 00:03:20,959
it's shared uh

00:03:17,760 --> 00:03:23,120
you know at this uh um

00:03:20,959 --> 00:03:24,080
this url right here you can go there now

00:03:23,120 --> 00:03:25,760
if you want but

00:03:24,080 --> 00:03:27,519
yeah there's no reason to because i'm

00:03:25,760 --> 00:03:30,840
sharing the screen

00:03:27,519 --> 00:03:33,360
um anyway

00:03:30,840 --> 00:03:35,200
uh this talk is not going to be a

00:03:33,360 --> 00:03:36,239
tutorial on how to code a desktop app

00:03:35,200 --> 00:03:38,239
because there

00:03:36,239 --> 00:03:40,480
are plenty of those already uh there's a

00:03:38,239 --> 00:03:42,480
link to one in the slides

00:03:40,480 --> 00:03:44,560
another thing this talk is not it is not

00:03:42,480 --> 00:03:45,519
presented by an experienced web or node

00:03:44,560 --> 00:03:47,840
developer

00:03:45,519 --> 00:03:49,120
i do know some things about web

00:03:47,840 --> 00:03:50,560
development in javascript but i'm not

00:03:49,120 --> 00:03:52,080
really familiar with the latest tools

00:03:50,560 --> 00:03:55,040
and best practices

00:03:52,080 --> 00:03:57,120
in in that environment i guess at heart

00:03:55,040 --> 00:03:59,760
i'm a linux desktop programmer

00:03:57,120 --> 00:04:02,000
and in my day job at igalia i work on

00:03:59,760 --> 00:04:03,599
javascript engines in browsers

00:04:02,000 --> 00:04:05,760
so like i said at the beginning this is

00:04:03,599 --> 00:04:07,439
an experiment experiment for me

00:04:05,760 --> 00:04:10,879
i might get some of these things wrong

00:04:07,439 --> 00:04:10,879
there could be better ways to do things

00:04:10,959 --> 00:04:16,560
so the cat is telling us to

00:04:14,080 --> 00:04:18,320
get on with it already let's go i'm

00:04:16,560 --> 00:04:19,919
going to talk first about the process of

00:04:18,320 --> 00:04:21,120
setting up your project and how you

00:04:19,919 --> 00:04:24,639
might want to organize

00:04:21,120 --> 00:04:26,960
your development tools before we do that

00:04:24,639 --> 00:04:28,720
we need an idea for an app

00:04:26,960 --> 00:04:30,639
there's a long tradition of having an

00:04:28,720 --> 00:04:33,199
example app in the gtk documentation

00:04:30,639 --> 00:04:35,440
called bloat pad so i stole that name

00:04:33,199 --> 00:04:37,280
unfortunately i did not make up this pun

00:04:35,440 --> 00:04:38,800
uh i love making up puns but i didn't

00:04:37,280 --> 00:04:40,560
make up this one

00:04:38,800 --> 00:04:42,960
uh you can see my sketches for the app

00:04:40,560 --> 00:04:44,880
in the background here

00:04:42,960 --> 00:04:46,800
and the the tagline of this app is going

00:04:44,880 --> 00:04:48,160
to be the unnecessary note-taking app

00:04:46,800 --> 00:04:49,440
because really there are plenty of good

00:04:48,160 --> 00:04:51,280
note-taking apps already

00:04:49,440 --> 00:04:53,919
and bloatpad is not going to shatter any

00:04:51,280 --> 00:04:53,919
paradigms

00:04:54,240 --> 00:04:57,840
so the first thing we have to do is have

00:04:55,759 --> 00:04:59,759
something to start with if you

00:04:57,840 --> 00:05:01,520
one thing you could do if you're using

00:04:59,759 --> 00:05:03,039
gnome builder as your editor or even if

00:05:01,520 --> 00:05:03,759
you're using a different editor you can

00:05:03,039 --> 00:05:05,039
still

00:05:03,759 --> 00:05:06,800
launch genome builder and create the

00:05:05,039 --> 00:05:08,320
project uh

00:05:06,800 --> 00:05:09,680
the the new project dialog which i've

00:05:08,320 --> 00:05:10,000
shown here allows you to create a

00:05:09,680 --> 00:05:14,000
project

00:05:10,000 --> 00:05:16,479
skeleton and then there's also this gtk

00:05:14,000 --> 00:05:18,080
js app repository that you can use as a

00:05:16,479 --> 00:05:19,600
starting point

00:05:18,080 --> 00:05:21,280
both of these are quite similar to each

00:05:19,600 --> 00:05:23,360
other and i think one was probably based

00:05:21,280 --> 00:05:24,880
on the other

00:05:23,360 --> 00:05:27,360
but both of them give you a project

00:05:24,880 --> 00:05:28,880
skeleton uh

00:05:27,360 --> 00:05:30,560
the skeleton looks kind of like this

00:05:28,880 --> 00:05:33,120
there's a here's a list

00:05:30,560 --> 00:05:34,720
of what it gives you and i'll come back

00:05:33,120 --> 00:05:36,240
to most of these things at some point in

00:05:34,720 --> 00:05:39,360
the talk

00:05:36,240 --> 00:05:40,720
um the first item on the list a nissan

00:05:39,360 --> 00:05:43,440
build system

00:05:40,720 --> 00:05:45,039
a little bit about build systems uh the

00:05:43,440 --> 00:05:46,560
one included in the project skeleton is

00:05:45,039 --> 00:05:49,120
nissan which is

00:05:46,560 --> 00:05:51,199
popular for compiled languages although

00:05:49,120 --> 00:05:52,800
i'd say it's a pretty unfamiliar system

00:05:51,199 --> 00:05:55,360
for people who develop only in

00:05:52,800 --> 00:05:55,360
javascript

00:05:55,840 --> 00:06:00,000
nissan is great and you'll definitely

00:05:58,319 --> 00:06:01,520
need it if your app is going to include

00:06:00,000 --> 00:06:02,240
any native code that gets imported into

00:06:01,520 --> 00:06:04,639
javascript

00:06:02,240 --> 00:06:06,000
which many desktop apps eventually end

00:06:04,639 --> 00:06:09,520
up doing well i'm not going to cover

00:06:06,000 --> 00:06:11,199
that in this talk so if you start an app

00:06:09,520 --> 00:06:13,039
from scratch i would recommend keeping

00:06:11,199 --> 00:06:15,199
nissan as the build system

00:06:13,039 --> 00:06:18,479
but if you know the javascript ecosystem

00:06:15,199 --> 00:06:22,080
you'll be familiar with yarn

00:06:18,479 --> 00:06:23,759
and you know yarn is similar to npm

00:06:22,080 --> 00:06:25,199
which may be even more familiar

00:06:23,759 --> 00:06:27,199
but yarn will allow you to easily

00:06:25,199 --> 00:06:29,039
install popular javascript development

00:06:27,199 --> 00:06:31,120
tools like eslint

00:06:29,039 --> 00:06:32,800
uh npm would work for this as well so

00:06:31,120 --> 00:06:35,680
what i've done here

00:06:32,800 --> 00:06:36,479
is created a package.json with yarn in

00:06:35,680 --> 00:06:38,400
it

00:06:36,479 --> 00:06:41,199
and put this snippet into it in order to

00:06:38,400 --> 00:06:43,520
wrap the most important nissan commands

00:06:41,199 --> 00:06:44,560
so if we have this snippet uh we can

00:06:43,520 --> 00:06:47,120
just do

00:06:44,560 --> 00:06:48,080
yarn start and we'll see the skeleton

00:06:47,120 --> 00:06:49,520
app run

00:06:48,080 --> 00:06:53,199
it's the one that you get in the

00:06:49,520 --> 00:06:56,400
skeleton is just a hello world app

00:06:53,199 --> 00:06:58,080
so a couple of other things about uh

00:06:56,400 --> 00:07:01,120
other tools from the excellent

00:06:58,080 --> 00:07:03,919
javascript tooling ecosystem

00:07:01,120 --> 00:07:04,880
which is honestly in a lot of ways quite

00:07:03,919 --> 00:07:08,000
a lot better than

00:07:04,880 --> 00:07:10,800
the uh tooling ecosystem that we have

00:07:08,000 --> 00:07:11,840
uh for desktop apps so we should take

00:07:10,800 --> 00:07:16,000
stuff from there that's

00:07:11,840 --> 00:07:19,919
uh that's good and useful um

00:07:16,000 --> 00:07:21,680
blinting prettier is uh i guess

00:07:19,919 --> 00:07:23,039
what they call themselves an opinionated

00:07:21,680 --> 00:07:26,639
code formatter

00:07:23,039 --> 00:07:28,720
uh i guess you can disagree on

00:07:26,639 --> 00:07:30,319
whether it's its style is the one you

00:07:28,720 --> 00:07:30,800
prefer or not but in the end for a new

00:07:30,319 --> 00:07:32,319
project

00:07:30,800 --> 00:07:34,160
just installing it and doing what it

00:07:32,319 --> 00:07:36,560
says is easy and it frees you from ever

00:07:34,160 --> 00:07:38,639
having to worry again about code style

00:07:36,560 --> 00:07:40,479
um and i've found it's so good to use

00:07:38,639 --> 00:07:42,240
eslint together with prettier

00:07:40,479 --> 00:07:44,960
in order to catch things like unused

00:07:42,240 --> 00:07:47,039
variables and things like that

00:07:44,960 --> 00:07:48,000
uh so you can use yarn to install those

00:07:47,039 --> 00:07:52,000
locally and

00:07:48,000 --> 00:07:53,840
add another snippet to your package.json

00:07:52,000 --> 00:07:55,199
typescript is another really prominent

00:07:53,840 --> 00:07:57,520
part of the

00:07:55,199 --> 00:07:59,599
excellent javascript tooling ecosystem

00:07:57,520 --> 00:08:02,080
and it mostly works on gjs

00:07:59,599 --> 00:08:03,440
thanks to the hard work of evan welsh it

00:08:02,080 --> 00:08:04,879
does require a little bit of manual

00:08:03,440 --> 00:08:06,560
setup

00:08:04,879 --> 00:08:08,879
you can go to this link in the slides to

00:08:06,560 --> 00:08:10,479
find out more you can use it in two ways

00:08:08,879 --> 00:08:12,000
the simplest way is to write regular

00:08:10,479 --> 00:08:15,360
javascript and use the typescript

00:08:12,000 --> 00:08:18,000
compiler at compile time to verify

00:08:15,360 --> 00:08:19,440
the types this is like static analysis

00:08:18,000 --> 00:08:21,199
and this

00:08:19,440 --> 00:08:22,960
mostly works again it requires writing

00:08:21,199 --> 00:08:24,479
some type annotations in dot comments

00:08:22,960 --> 00:08:26,720
occasionally

00:08:24,479 --> 00:08:29,199
and you can also write typescript code

00:08:26,720 --> 00:08:31,199
directly and transpile it to javascript

00:08:29,199 --> 00:08:34,479
uh that works with ggs2 although i

00:08:31,199 --> 00:08:34,479
haven't done this myself yet

00:08:35,200 --> 00:08:40,880
um there are

00:08:38,320 --> 00:08:42,479
you know hundreds or thousands more

00:08:40,880 --> 00:08:43,519
developer tools and build tools in the

00:08:42,479 --> 00:08:45,040
javascript

00:08:43,519 --> 00:08:46,880
ecosystem a lot of that ecosystem

00:08:45,040 --> 00:08:48,800
revolves around bundling

00:08:46,880 --> 00:08:50,080
uh bundlers i think are probably not

00:08:48,800 --> 00:08:51,360
needed when you're writing a native

00:08:50,080 --> 00:08:53,600
desktop app

00:08:51,360 --> 00:08:55,360
the default project skeleton uh it

00:08:53,600 --> 00:08:58,399
includes build code to put all of the

00:08:55,360 --> 00:08:59,600
javascript sources and data files into a

00:08:58,399 --> 00:09:02,160
g-resource bundle

00:08:59,600 --> 00:09:03,360
which is a binary blob that's loaded

00:09:02,160 --> 00:09:05,040
into memory at startup

00:09:03,360 --> 00:09:07,040
and it makes module imports lightning

00:09:05,040 --> 00:09:09,519
fast which is quite different from the

00:09:07,040 --> 00:09:12,240
situation on the web

00:09:09,519 --> 00:09:13,200
so we don't need bundling for that

00:09:12,240 --> 00:09:14,880
reason

00:09:13,200 --> 00:09:16,880
another thing that bundlers do is tree

00:09:14,880 --> 00:09:18,000
shaking and this is really vital in web

00:09:16,880 --> 00:09:19,279
development where you either have to

00:09:18,000 --> 00:09:20,560
shake the tree to remove library

00:09:19,279 --> 00:09:21,600
functions from your dependencies that

00:09:20,560 --> 00:09:23,440
you aren't using

00:09:21,600 --> 00:09:25,760
or you have to use thousands of tiny

00:09:23,440 --> 00:09:28,800
dependencies that do only one thing like

00:09:25,760 --> 00:09:30,480
the infamous left pad

00:09:28,800 --> 00:09:32,000
this isn't so vital in our situation

00:09:30,480 --> 00:09:34,080
with a desktop app because

00:09:32,000 --> 00:09:36,160
we have an entire platform in the flat

00:09:34,080 --> 00:09:37,600
pack runtime in the form of c libraries

00:09:36,160 --> 00:09:38,959
that have their own javascript bindings

00:09:37,600 --> 00:09:42,399
and it's there

00:09:38,959 --> 00:09:44,240
whether we use it or not but still

00:09:42,399 --> 00:09:46,399
tree shaking is useful to eliminate dead

00:09:44,240 --> 00:09:49,120
code in your own code base

00:09:46,399 --> 00:09:49,680
but instead of using a bundler there are

00:09:49,120 --> 00:09:52,080
other

00:09:49,680 --> 00:09:54,320
packages such as find unused exports

00:09:52,080 --> 00:09:57,680
that you could use for that

00:09:54,320 --> 00:09:59,360
um another big thing in the in the

00:09:57,680 --> 00:10:02,480
javascript build tool ecosystem is

00:09:59,360 --> 00:10:04,320
minifiers that probably isn't needed

00:10:02,480 --> 00:10:06,720
either for a desktop app

00:10:04,320 --> 00:10:07,440
uh because with the g resource bundles

00:10:06,720 --> 00:10:10,720
that i mentioned

00:10:07,440 --> 00:10:12,320
we only do the disk io once at startup

00:10:10,720 --> 00:10:13,839
and there's far less javascript code

00:10:12,320 --> 00:10:15,440
than in a typical website that bundles

00:10:13,839 --> 00:10:17,760
all of its

00:10:15,440 --> 00:10:19,200
dependencies the load time is not really

00:10:17,760 --> 00:10:22,320
a problem

00:10:19,200 --> 00:10:23,920
um you might want to use transpilers

00:10:22,320 --> 00:10:26,079
such as babel

00:10:23,920 --> 00:10:27,360
or other things that implement sort of

00:10:26,079 --> 00:10:29,760
these compile time

00:10:27,360 --> 00:10:31,200
transformations on your code these will

00:10:29,760 --> 00:10:32,959
probably work with a bit of custom

00:10:31,200 --> 00:10:34,560
configuration it depends on what exactly

00:10:32,959 --> 00:10:37,040
you're transfiling

00:10:34,560 --> 00:10:38,720
uh something like babel you might not

00:10:37,040 --> 00:10:39,920
need it at all because you don't need to

00:10:38,720 --> 00:10:43,040
support old browsers

00:10:39,920 --> 00:10:44,640
and old engines in your app you can just

00:10:43,040 --> 00:10:45,519
target the latest version in the flat

00:10:44,640 --> 00:10:49,040
pack runtime

00:10:45,519 --> 00:10:50,880
so a lot of the use cases of

00:10:49,040 --> 00:10:52,320
babel you can just write modern

00:10:50,880 --> 00:10:54,720
javascript by default and you don't need

00:10:52,320 --> 00:10:56,079
to transform anything

00:10:54,720 --> 00:10:58,399
you might use a bundler if you use

00:10:56,079 --> 00:11:00,880
runtime dependencies from npm

00:10:58,399 --> 00:11:02,000
and i'll have more about that later in

00:11:00,880 --> 00:11:07,120
the talk

00:11:02,000 --> 00:11:08,800
but first uh assembling the ui

00:11:07,120 --> 00:11:10,480
um i don't know what this cat is doing

00:11:08,800 --> 00:11:13,680
but it's building something

00:11:10,480 --> 00:11:15,040
but yeah you and so uh tools for

00:11:13,680 --> 00:11:18,000
constructing a ui

00:11:15,040 --> 00:11:20,160
is probably where in the desktop

00:11:18,000 --> 00:11:22,880
platform we lag farthest behind the web

00:11:20,160 --> 00:11:25,040
in developer experience uh because it's

00:11:22,880 --> 00:11:26,240
very simple the web has html and any

00:11:25,040 --> 00:11:28,480
browser can

00:11:26,240 --> 00:11:31,120
it's automatically a tool for displaying

00:11:28,480 --> 00:11:33,839
it editing it and debugging it

00:11:31,120 --> 00:11:36,560
that's that's not the case with um

00:11:33,839 --> 00:11:39,360
desktop ui files

00:11:36,560 --> 00:11:40,839
so in the platform that we are using

00:11:39,360 --> 00:11:44,959
with gtk

00:11:40,839 --> 00:11:48,000
um we have uh there's an xml format for

00:11:44,959 --> 00:11:50,000
for ui description files so this this

00:11:48,000 --> 00:11:50,480
kind of xml file plays roughly the same

00:11:50,000 --> 00:11:53,839
role

00:11:50,480 --> 00:11:55,440
as html does in the trinity of html css

00:11:53,839 --> 00:11:57,519
and javascript

00:11:55,440 --> 00:11:59,920
but unlike with html there is another

00:11:57,519 --> 00:12:01,839
alternative that's actually widely used

00:11:59,920 --> 00:12:03,519
this alternative is that you can

00:12:01,839 --> 00:12:07,279
assemble your your ui

00:12:03,519 --> 00:12:09,519
in code if you come from

00:12:07,279 --> 00:12:10,320
web development this sounds kind of

00:12:09,519 --> 00:12:13,040
ridiculous

00:12:10,320 --> 00:12:14,399
building your ui in code is roughly the

00:12:13,040 --> 00:12:15,760
same thing as building up a whole web

00:12:14,399 --> 00:12:18,240
pages dom

00:12:15,760 --> 00:12:19,040
using document.createelement in your

00:12:18,240 --> 00:12:21,680
code

00:12:19,040 --> 00:12:23,920
that would be really inconvenient and

00:12:21,680 --> 00:12:26,880
it's not really a feasible alternative

00:12:23,920 --> 00:12:30,480
but this is different with djs because

00:12:26,880 --> 00:12:32,399
um you know the gnome platform has a

00:12:30,480 --> 00:12:34,320
heritage from c where originally

00:12:32,399 --> 00:12:35,519
building your ui in code was the only

00:12:34,320 --> 00:12:37,200
option so it's

00:12:35,519 --> 00:12:39,200
the apis to do it are a lot more

00:12:37,200 --> 00:12:40,560
convenient actually

00:12:39,200 --> 00:12:42,320
but you know on the other hand in web

00:12:40,560 --> 00:12:45,519
development we have tooling like

00:12:42,320 --> 00:12:46,399
jsx which we do not have in gjs so there

00:12:45,519 --> 00:12:48,000
are

00:12:46,399 --> 00:12:50,880
other alternatives which are not open to

00:12:48,000 --> 00:12:54,000
us uh developing a desktop app

00:12:50,880 --> 00:12:56,160
so i guess the big question is

00:12:54,000 --> 00:12:58,160
uh you know do you want to do it in an

00:12:56,160 --> 00:12:59,680
xml file or do you want to do any code

00:12:58,160 --> 00:13:01,600
and here's a here's an example of what

00:12:59,680 --> 00:13:04,839
each option looks like

00:13:01,600 --> 00:13:07,920
a snippet of code doing the same thing

00:13:04,839 --> 00:13:09,600
um on the top is the xml file and on the

00:13:07,920 --> 00:13:13,040
bottom is the code

00:13:09,600 --> 00:13:16,320
so you can see the the xml file is quite

00:13:13,040 --> 00:13:18,639
uh quite tedious to write by hand

00:13:16,320 --> 00:13:20,320
um we have you know on the right of the

00:13:18,639 --> 00:13:21,440
screen here we have the glade ui

00:13:20,320 --> 00:13:23,200
designer

00:13:21,440 --> 00:13:25,279
which is a program that allows you to

00:13:23,200 --> 00:13:28,560
visually assemble the ui

00:13:25,279 --> 00:13:30,959
and it outputs one of these xml files

00:13:28,560 --> 00:13:33,200
sadly it currently only works for gtk3

00:13:30,959 --> 00:13:35,760
and if you want to use gtk4

00:13:33,200 --> 00:13:36,880
you could write the ui file by hand or

00:13:35,760 --> 00:13:38,880
you could

00:13:36,880 --> 00:13:40,639
first build it in gtk3 and then use a

00:13:38,880 --> 00:13:42,480
tool to do the initial conversion and

00:13:40,639 --> 00:13:45,199
then maintain it by hand

00:13:42,480 --> 00:13:45,680
this is not really a good developer

00:13:45,199 --> 00:13:48,959
story

00:13:45,680 --> 00:13:49,920
but luckily uh work on a replacement is

00:13:48,959 --> 00:13:55,360
already underway

00:13:49,920 --> 00:13:55,360
uh there's actually on several fronts uh

00:13:56,639 --> 00:14:00,839
but um yeah for now i'd recommend using

00:13:59,360 --> 00:14:04,240
gtk3 or

00:14:00,839 --> 00:14:06,160
uh using glade to generate an initial

00:14:04,240 --> 00:14:07,360
file and then converting it to gtk4 and

00:14:06,160 --> 00:14:10,160
then maintaining it

00:14:07,360 --> 00:14:10,160
later by hand

00:14:10,959 --> 00:14:14,320
so this is what the front page of the

00:14:12,560 --> 00:14:16,079
app looks like after i built it in glade

00:14:14,320 --> 00:14:17,839
and i use the preview function to render

00:14:16,079 --> 00:14:22,160
it in a window

00:14:17,839 --> 00:14:25,440
so you can see here the icon is uh

00:14:22,160 --> 00:14:26,399
it's sort of uh it stands out more than

00:14:25,440 --> 00:14:28,880
we'd like it to

00:14:26,399 --> 00:14:30,800
and it's also slightly off-center due to

00:14:28,880 --> 00:14:31,920
the way that the symbolic icon is

00:14:30,800 --> 00:14:34,000
aligned

00:14:31,920 --> 00:14:36,240
these are things that we can fix with

00:14:34,000 --> 00:14:39,760
css just like we would

00:14:36,240 --> 00:14:41,199
on a web app so you can go back to glade

00:14:39,760 --> 00:14:43,680
and you can give your ui widgets

00:14:41,199 --> 00:14:46,160
particular css classes

00:14:43,680 --> 00:14:47,279
or you can add css classes in the xml

00:14:46,160 --> 00:14:49,120
file by hand

00:14:47,279 --> 00:14:51,120
and you can reference them in your app's

00:14:49,120 --> 00:14:52,560
css file

00:14:51,120 --> 00:14:55,279
there's an example of that here on the

00:14:52,560 --> 00:14:57,680
slide there is a fairly big difference

00:14:55,279 --> 00:15:00,560
between css from the web and css

00:14:57,680 --> 00:15:02,399
in a gtk application it's you know it's

00:15:00,560 --> 00:15:04,000
the same syntax and it's the same box

00:15:02,399 --> 00:15:05,680
model for margin and padding and it's

00:15:04,000 --> 00:15:06,399
largely the same properties that you can

00:15:05,680 --> 00:15:08,959
set

00:15:06,399 --> 00:15:10,399
but the positioning model which

00:15:08,959 --> 00:15:12,079
personally i find the most confusing

00:15:10,399 --> 00:15:16,160
part of css on the web

00:15:12,079 --> 00:15:16,560
it's completely different in gtk and the

00:15:16,160 --> 00:15:19,920
other

00:15:16,560 --> 00:15:21,519
associated ui libraries like lib handy

00:15:19,920 --> 00:15:23,120
they have a much more flexible design

00:15:21,519 --> 00:15:23,519
language of layout containers to work

00:15:23,120 --> 00:15:26,800
with

00:15:23,519 --> 00:15:29,600
in html we just have div and span

00:15:26,800 --> 00:15:31,440
uh and that's all so and you know you

00:15:29,600 --> 00:15:32,720
can use cx css to make one of those into

00:15:31,440 --> 00:15:36,160
a flexbox

00:15:32,720 --> 00:15:38,000
but i mean this but like this

00:15:36,160 --> 00:15:39,519
this richer design language of layout

00:15:38,000 --> 00:15:41,440
containers means that the responsibility

00:15:39,519 --> 00:15:43,120
for positioning things mostly shifts to

00:15:41,440 --> 00:15:46,560
the ui file

00:15:43,120 --> 00:15:46,880
so there's no you know position absolute

00:15:46,560 --> 00:15:50,720
or

00:15:46,880 --> 00:15:53,680
float left in the css that we have

00:15:50,720 --> 00:15:55,440
on the desktop platform so here's what

00:15:53,680 --> 00:15:57,040
that same preview looks like when i

00:15:55,440 --> 00:15:58,639
applied that css to it

00:15:57,040 --> 00:16:00,800
so now you can see the icon isn't quite

00:15:58,639 --> 00:16:02,480
so prominent and it's got a shadow now

00:16:00,800 --> 00:16:04,000
and it's got these extra pixels of

00:16:02,480 --> 00:16:06,639
padding which visually aligns it better

00:16:04,000 --> 00:16:06,639
with the button

00:16:07,120 --> 00:16:12,800
so now that's done the ui looks

00:16:10,480 --> 00:16:14,320
mostly like we want it to uh we have a

00:16:12,800 --> 00:16:16,160
base on which to build

00:16:14,320 --> 00:16:17,360
uh and it should be somewhat familiar if

00:16:16,160 --> 00:16:20,079
you're coming from

00:16:17,360 --> 00:16:21,199
a web app background so now it's time to

00:16:20,079 --> 00:16:24,480
write some code

00:16:21,199 --> 00:16:25,199
uh cat does not want to write some code

00:16:24,480 --> 00:16:27,440
but you know

00:16:25,199 --> 00:16:28,480
i do so i'll show you some of the things

00:16:27,440 --> 00:16:30,959
that you might need to know

00:16:28,480 --> 00:16:32,320
about the gnome developer platform and

00:16:30,959 --> 00:16:33,519
i'll compare it to things that might be

00:16:32,320 --> 00:16:37,279
familiar

00:16:33,519 --> 00:16:39,199
for node.js developers uh the

00:16:37,279 --> 00:16:40,720
most important thing is that we have api

00:16:39,199 --> 00:16:43,600
documentation on

00:16:40,720 --> 00:16:45,440
uh on this address here in the slides uh

00:16:43,600 --> 00:16:48,160
this is for

00:16:45,440 --> 00:16:48,959
the gnome platform and it's it's for the

00:16:48,160 --> 00:16:51,680
javascript

00:16:48,959 --> 00:16:54,160
binding version of it one thing that

00:16:51,680 --> 00:16:55,600
might not be familiar if you're

00:16:54,160 --> 00:16:57,199
coming from a node background if you're

00:16:55,600 --> 00:17:01,040
browsing the api you notice these

00:16:57,199 --> 00:17:01,040
sections for properties and signals

00:17:01,360 --> 00:17:07,600
these exist because the ui elements

00:17:04,640 --> 00:17:09,120
inherit from gtk widget

00:17:07,600 --> 00:17:10,959
and that's a class that provides things

00:17:09,120 --> 00:17:12,240
such as properties signals and css

00:17:10,959 --> 00:17:15,679
element names

00:17:12,240 --> 00:17:17,280
a ptk widget in

00:17:15,679 --> 00:17:21,039
this platform plays roughly the same

00:17:17,280 --> 00:17:23,039
role as a dom element in html

00:17:21,039 --> 00:17:25,919
you'll find that i guess the gtk widget

00:17:23,039 --> 00:17:29,760
relies on object orientation much more

00:17:25,919 --> 00:17:31,280
uh you know dom elements have an

00:17:29,760 --> 00:17:33,520
inheritance hierarchy too

00:17:31,280 --> 00:17:35,360
but for a lot of applications you don't

00:17:33,520 --> 00:17:39,760
even need to care about that

00:17:35,360 --> 00:17:42,160
for gtk widgets you kind of do um

00:17:39,760 --> 00:17:43,039
and the interesting thing that's

00:17:42,160 --> 00:17:44,960
different from

00:17:43,039 --> 00:17:48,000
the web platform is gtk widget inherits

00:17:44,960 --> 00:17:49,360
from g object.object which actually

00:17:48,000 --> 00:17:51,360
that's the class that provides the

00:17:49,360 --> 00:17:54,400
signals of properties functionality

00:17:51,360 --> 00:17:55,360
so even things like files and output

00:17:54,400 --> 00:17:55,560
streams

00:17:55,360 --> 00:17:58,619
and

00:17:55,560 --> 00:17:58,619
[Music]

00:17:59,039 --> 00:18:02,160
network requests they have properties

00:18:00,720 --> 00:18:05,120
and signals

00:18:02,160 --> 00:18:06,160
uh and this is kind of like node where a

00:18:05,120 --> 00:18:08,880
lot of objects are

00:18:06,160 --> 00:18:10,640
uh inherit from event emitter uh but

00:18:08,880 --> 00:18:14,960
it's not the case for everything

00:18:10,640 --> 00:18:18,400
um in you know in gjs really everything

00:18:14,960 --> 00:18:22,640
has properties and signals almost

00:18:18,400 --> 00:18:25,280
um there's es modules

00:18:22,640 --> 00:18:26,480
uh this is something new that you uh you

00:18:25,280 --> 00:18:28,960
might not realize it works

00:18:26,480 --> 00:18:30,000
natively in gjs this is new in the

00:18:28,960 --> 00:18:32,799
latest

00:18:30,000 --> 00:18:34,799
version of the flat pack runtime we have

00:18:32,799 --> 00:18:36,000
you can just import es modules so this

00:18:34,799 --> 00:18:39,760
is another

00:18:36,000 --> 00:18:41,200
initiative thanks to evan welsh

00:18:39,760 --> 00:18:42,799
this is the thing that for the web

00:18:41,200 --> 00:18:44,080
platform you have to use bundlers for a

00:18:42,799 --> 00:18:46,880
lot of the times because you can't count

00:18:44,080 --> 00:18:49,919
on users browsers being able to

00:18:46,880 --> 00:18:53,200
support es modules but we support them

00:18:49,919 --> 00:18:53,200
natively you can just use them

00:18:53,280 --> 00:18:57,679
another thing is about uh async

00:18:56,000 --> 00:19:00,720
operations

00:18:57,679 --> 00:19:02,080
uh in the gnome platforms of the what we

00:19:00,720 --> 00:19:05,120
have in gjs

00:19:02,080 --> 00:19:05,840
all the i o is cancelable as well which

00:19:05,120 --> 00:19:09,039
is

00:19:05,840 --> 00:19:10,720
uh something that um

00:19:09,039 --> 00:19:12,880
you know node asynchronous io doesn't

00:19:10,720 --> 00:19:15,120
always have uh

00:19:12,880 --> 00:19:16,880
in gjs it works using callback style but

00:19:15,120 --> 00:19:18,160
we have some experimental support for

00:19:16,880 --> 00:19:20,320
promise style

00:19:18,160 --> 00:19:21,600
and you can opt into it for each method

00:19:20,320 --> 00:19:24,640
uh with this

00:19:21,600 --> 00:19:26,000
uh gio.promisify thing at the start of

00:19:24,640 --> 00:19:28,880
your program

00:19:26,000 --> 00:19:30,559
um that sort of signifies that you want

00:19:28,880 --> 00:19:31,360
to use the experimental support for that

00:19:30,559 --> 00:19:32,640
method

00:19:31,360 --> 00:19:34,559
once you've done that you then you can

00:19:32,640 --> 00:19:36,640
use it like in the code example down at

00:19:34,559 --> 00:19:38,160
the bottom with a weight

00:19:36,640 --> 00:19:40,160
this uh experimental support was

00:19:38,160 --> 00:19:42,240
actually done by an outreach intern avi

00:19:40,160 --> 00:19:43,919
sanyo a couple of years ago

00:19:42,240 --> 00:19:45,440
and we have another outreachy internship

00:19:43,919 --> 00:19:46,559
that's still in the application period

00:19:45,440 --> 00:19:49,919
for working on

00:19:46,559 --> 00:19:51,840
uh making this support uh

00:19:49,919 --> 00:19:53,360
just part of the platform and not

00:19:51,840 --> 00:19:56,240
experimental anymore

00:19:53,360 --> 00:19:58,559
so look out for improvements here coming

00:19:56,240 --> 00:19:58,559
soon

00:19:59,440 --> 00:20:07,120
um there are lots of

00:20:03,919 --> 00:20:08,960
runtime libraries that if you're coming

00:20:07,120 --> 00:20:11,120
from a web or no background you might

00:20:08,960 --> 00:20:13,919
want to use

00:20:11,120 --> 00:20:16,400
the one of these libraries from the node

00:20:13,919 --> 00:20:18,880
ecosystem

00:20:16,400 --> 00:20:20,240
most desktop apps don't end up doing

00:20:18,880 --> 00:20:22,720
this because

00:20:20,240 --> 00:20:24,159
there's a lot in the platform already

00:20:22,720 --> 00:20:25,840
but in many cases it is actually

00:20:24,159 --> 00:20:27,679
possible to do this

00:20:25,840 --> 00:20:29,039
um so the first thing you want to do

00:20:27,679 --> 00:20:30,080
like it may or may not work so the first

00:20:29,039 --> 00:20:31,760
thing you want to do is check if you

00:20:30,080 --> 00:20:34,320
actually need

00:20:31,760 --> 00:20:35,200
to depend on this library in some cases

00:20:34,320 --> 00:20:37,039
you really don't

00:20:35,200 --> 00:20:38,559
it you know a library might be something

00:20:37,039 --> 00:20:39,600
that the grown platform already provides

00:20:38,559 --> 00:20:42,880
in another way like

00:20:39,600 --> 00:20:43,919
like network i o or it might be a

00:20:42,880 --> 00:20:46,559
dependency

00:20:43,919 --> 00:20:48,320
that sort of abstracts over different

00:20:46,559 --> 00:20:50,720
versions of browsers

00:20:48,320 --> 00:20:52,240
and you might not need that because in

00:20:50,720 --> 00:20:53,919
the desktop platform you can target

00:20:52,240 --> 00:20:57,120
modern javascript

00:20:53,919 --> 00:20:58,640
um if you do need the library you

00:20:57,120 --> 00:21:00,559
start by checking if it has any node

00:20:58,640 --> 00:21:02,799
dependencies and check if it ships

00:21:00,559 --> 00:21:04,320
an es module entry point so if it

00:21:02,799 --> 00:21:05,440
doesn't have any node dependencies and

00:21:04,320 --> 00:21:07,280
if there's an es module

00:21:05,440 --> 00:21:08,559
great you can probably just copy that

00:21:07,280 --> 00:21:11,200
module into your sources

00:21:08,559 --> 00:21:12,799
import it directly and it'll work if

00:21:11,200 --> 00:21:15,039
there's not

00:21:12,799 --> 00:21:17,039
it might ship a browser bundle which

00:21:15,039 --> 00:21:18,720
will probably already work

00:21:17,039 --> 00:21:20,559
uh some modules do that and if it

00:21:18,720 --> 00:21:22,559
doesn't have that you can build your own

00:21:20,559 --> 00:21:25,120
bundle with a tool called browserify

00:21:22,559 --> 00:21:27,600
that's available in npm

00:21:25,120 --> 00:21:28,799
uh so here's how to do this browserify

00:21:27,600 --> 00:21:32,080
trick you

00:21:28,799 --> 00:21:35,840
add this dash s option and

00:21:32,080 --> 00:21:38,720
uh that builds a umd module and umd is

00:21:35,840 --> 00:21:40,640
stands for universal module definition i

00:21:38,720 --> 00:21:42,640
think

00:21:40,640 --> 00:21:44,320
you can import the umd module and it has

00:21:42,640 --> 00:21:47,440
a side effect which is to install the

00:21:44,320 --> 00:21:50,480
library as a global object

00:21:47,440 --> 00:21:52,159
so yeah the global object's kind of

00:21:50,480 --> 00:21:54,000
growth this is the best way that i've

00:21:52,159 --> 00:21:56,240
found to do this so far

00:21:54,000 --> 00:21:58,240
it's not ideal so it would be really

00:21:56,240 --> 00:22:01,440
cool if somebody would write a rollup

00:21:58,240 --> 00:22:05,200
plugin for gjs modules or something

00:22:01,440 --> 00:22:07,280
rollup is another bundler tool from the

00:22:05,200 --> 00:22:08,720
node ecosystem there might be a better

00:22:07,280 --> 00:22:10,240
way that already exists that i haven't

00:22:08,720 --> 00:22:12,720
found yet

00:22:10,240 --> 00:22:14,080
but in the examples that i'll show in a

00:22:12,720 --> 00:22:18,960
minute i'm gonna

00:22:14,080 --> 00:22:18,960
use this trick um

00:22:19,280 --> 00:22:23,120
so as an experiment i decided to take a

00:22:21,039 --> 00:22:25,600
look at the top five dependent upon

00:22:23,120 --> 00:22:27,039
npm libraries uh there's a link here

00:22:25,600 --> 00:22:29,919
with somebody who

00:22:27,039 --> 00:22:31,280
uh you know compiles and updates this

00:22:29,919 --> 00:22:32,720
list by submetric

00:22:31,280 --> 00:22:34,480
let's see if i could make them work in

00:22:32,720 --> 00:22:37,200
the gjs app

00:22:34,480 --> 00:22:38,159
uh the top of the list is lowdash it's a

00:22:37,200 --> 00:22:42,320
very popular

00:22:38,159 --> 00:22:44,080
uh utility library first of all

00:22:42,320 --> 00:22:45,360
consider if you really need it many of

00:22:44,080 --> 00:22:47,039
the functions that it provides are

00:22:45,360 --> 00:22:49,200
actually no longer necessary if you can

00:22:47,039 --> 00:22:51,280
target modern javascript

00:22:49,200 --> 00:22:52,960
so the example here with low

00:22:51,280 --> 00:22:54,799
dash.defaults it can actually be

00:22:52,960 --> 00:22:56,000
replaced with object destructuring which

00:22:54,799 --> 00:23:00,000
is

00:22:56,000 --> 00:23:02,799
a newer javascript language feature

00:23:00,000 --> 00:23:04,960
other things you might still need it for

00:23:02,799 --> 00:23:05,760
lowdash provides an es module with no

00:23:04,960 --> 00:23:08,320
dependencies

00:23:05,760 --> 00:23:09,919
in the low dash es package so you can

00:23:08,320 --> 00:23:11,760
copy this file from

00:23:09,919 --> 00:23:14,559
this package into your source directory

00:23:11,760 --> 00:23:18,159
and import it into your code

00:23:14,559 --> 00:23:19,120
and then it just works number two on the

00:23:18,159 --> 00:23:21,200
list is chalk

00:23:19,120 --> 00:23:23,440
that's a popular library for printing nc

00:23:21,200 --> 00:23:25,840
color codes to the terminal

00:23:23,440 --> 00:23:28,320
and that does not ship a browser bundle

00:23:25,840 --> 00:23:29,679
it does ship an es module but it imports

00:23:28,320 --> 00:23:31,280
other modules that need node module

00:23:29,679 --> 00:23:32,320
resolution so we can't use it directly

00:23:31,280 --> 00:23:34,799
either

00:23:32,320 --> 00:23:36,000
so for this one i used the browser if i

00:23:34,799 --> 00:23:38,799
trick to build a umd

00:23:36,000 --> 00:23:40,559
bundle and then i also found that i

00:23:38,799 --> 00:23:43,600
needed to make one edit in that bundle

00:23:40,559 --> 00:23:45,760
because uh the

00:23:43,600 --> 00:23:47,840
browser bundle that browserify generates

00:23:45,760 --> 00:23:49,360
by default the ansi colors were disabled

00:23:47,840 --> 00:23:50,159
because browsers mostly don't support

00:23:49,360 --> 00:23:52,240
them

00:23:50,159 --> 00:23:55,520
so i had to make this one edit and after

00:23:52,240 --> 00:23:55,520
that it worked

00:23:56,080 --> 00:23:59,919
number three on the list is request

00:23:58,720 --> 00:24:03,200
which is a library

00:23:59,919 --> 00:24:04,080
for network i o it's a very popular

00:24:03,200 --> 00:24:05,760
library but

00:24:04,080 --> 00:24:07,120
but it's been moved to maintenance mode

00:24:05,760 --> 00:24:09,520
because there are better ways to do

00:24:07,120 --> 00:24:12,559
requests in modern javascript

00:24:09,520 --> 00:24:13,679
um and there is actually one in the

00:24:12,559 --> 00:24:15,679
gnome platform

00:24:13,679 --> 00:24:17,360
uh lib soup is the known platform's

00:24:15,679 --> 00:24:19,760
network i o library

00:24:17,360 --> 00:24:21,279
uh and so you know i'd recommend using

00:24:19,760 --> 00:24:24,320
that it integrates with

00:24:21,279 --> 00:24:27,039
uh the main loop uh

00:24:24,320 --> 00:24:28,640
and in the upcoming libsub3 there will

00:24:27,039 --> 00:24:29,679
be an api that will integrate even

00:24:28,640 --> 00:24:32,880
better with await

00:24:29,679 --> 00:24:36,080
in javascript

00:24:32,880 --> 00:24:38,240
so i've shown like uh the

00:24:36,080 --> 00:24:39,600
code sample that's on requests website

00:24:38,240 --> 00:24:42,000
and then i've

00:24:39,600 --> 00:24:45,440
uh the bottom code sample is doing the

00:24:42,000 --> 00:24:45,440
same thing but with libsub

00:24:45,679 --> 00:24:49,760
so you know despite request being one of

00:24:48,000 --> 00:24:52,559
the most dependent upon modules

00:24:49,760 --> 00:24:55,840
in the web ecosystem in desktop app code

00:24:52,559 --> 00:24:55,840
you might as well use libsub

00:24:56,000 --> 00:24:59,360
number four on the list of popular

00:24:57,520 --> 00:25:01,600
modules was commander this is a library

00:24:59,360 --> 00:25:04,880
for pricing command line options

00:25:01,600 --> 00:25:06,799
um this one it needs the same trick with

00:25:04,880 --> 00:25:09,840
browserify that we did with uh

00:25:06,799 --> 00:25:11,279
with number two chalk but yeah i didn't

00:25:09,840 --> 00:25:12,840
didn't even have to edit anything in

00:25:11,279 --> 00:25:14,640
this case the generated bundle just

00:25:12,840 --> 00:25:16,960
worked

00:25:14,640 --> 00:25:18,880
number five on the list was react so

00:25:16,960 --> 00:25:20,400
this is a browser-specific thing

00:25:18,880 --> 00:25:22,480
it doesn't really apply to writing

00:25:20,400 --> 00:25:24,000
desktop apps because it's a library for

00:25:22,480 --> 00:25:27,679
making user interfaces

00:25:24,000 --> 00:25:30,320
specifically in the html dom

00:25:27,679 --> 00:25:31,760
although there is a library react native

00:25:30,320 --> 00:25:33,520
which abstracts over different mobile

00:25:31,760 --> 00:25:37,200
platforms and allows you to write react

00:25:33,520 --> 00:25:38,320
apps uh for ios and android

00:25:37,200 --> 00:25:40,000
and it would be really cool if this

00:25:38,320 --> 00:25:43,840
worked for the linux desktop as well but

00:25:40,000 --> 00:25:43,840
i think that would be a lot of work

00:25:44,480 --> 00:25:48,799
anyway um i'm going to skip the part of

00:25:47,279 --> 00:25:50,960
writing the actual code

00:25:48,799 --> 00:25:52,480
of bloatpad and i've linked to the code

00:25:50,960 --> 00:25:54,000
in my slides here so you can click on it

00:25:52,480 --> 00:25:58,880
later if you're interested

00:25:54,000 --> 00:26:02,559
to see how i did it but i'm going to um

00:25:58,880 --> 00:26:06,000
go and share the actual app

00:26:02,559 --> 00:26:09,679
running so i really hope

00:26:06,000 --> 00:26:10,240
that i can share a different window

00:26:09,679 --> 00:26:14,480
without

00:26:10,240 --> 00:26:14,480
breaking my uh um

00:26:15,360 --> 00:26:18,480
without breaking my screen share for the

00:26:16,720 --> 00:26:21,120
rest of the presentation let's let's see

00:26:18,480 --> 00:26:21,120
if that works

00:26:22,480 --> 00:26:25,840
uh can everybody see the app

00:26:32,400 --> 00:26:40,720
yes it looks like yeah cool um

00:26:36,480 --> 00:26:42,960
okay so you know i'm going to

00:26:40,720 --> 00:26:44,000
uh create a note let's see what's my

00:26:42,960 --> 00:26:47,840
to-do list

00:26:44,000 --> 00:26:50,400
for may 13th

00:26:47,840 --> 00:26:51,679
uh i'm a really bad typist under

00:26:50,400 --> 00:26:52,000
pressure while i'm giving a talk at the

00:26:51,679 --> 00:26:56,159
same

00:26:52,000 --> 00:27:00,720
time so excuse my typos um

00:26:56,159 --> 00:27:05,360
let's see uh crazy

00:27:00,720 --> 00:27:05,360
talk yes and then

00:27:05,679 --> 00:27:12,960
other talks and then after that

00:27:09,840 --> 00:27:16,799
relax uh you go back

00:27:12,960 --> 00:27:20,159
uh the the notice now in a list of notes

00:27:16,799 --> 00:27:20,720
you can add another note other ideas for

00:27:20,159 --> 00:27:22,550
my

00:27:20,720 --> 00:27:24,080
app

00:27:22,550 --> 00:27:28,080
[Music]

00:27:24,080 --> 00:27:28,080
notepad for cats

00:27:30,240 --> 00:27:36,960
you can go back and edit the

00:27:33,679 --> 00:27:38,399
notes and um you know

00:27:36,960 --> 00:27:40,559
there's a couple of other features that

00:27:38,399 --> 00:27:42,240
you get for free or almost for free here

00:27:40,559 --> 00:27:42,960
you can really easily make an about

00:27:42,240 --> 00:27:46,640
dialogue

00:27:42,960 --> 00:27:49,840
using uh platform apis you get

00:27:46,640 --> 00:27:52,159
keyboard shortcuts uh help

00:27:49,840 --> 00:27:52,159
um

00:27:52,880 --> 00:28:03,200
and that's it uh for the uh for the app

00:27:57,440 --> 00:28:06,240
if i can go back to uh

00:28:03,200 --> 00:28:06,240
sharing the talk

00:28:14,240 --> 00:28:17,520
okay it looks like it's sharing on my

00:28:15,840 --> 00:28:22,320
end

00:28:17,520 --> 00:28:25,600
um so hope these are showing

00:28:22,320 --> 00:28:28,880
anyway uh so now the app is done

00:28:25,600 --> 00:28:30,640
um you have to actually get users so

00:28:28,880 --> 00:28:32,640
this is also

00:28:30,640 --> 00:28:34,080
uh like the way that we do this with

00:28:32,640 --> 00:28:35,919
desktop apps is quite different from the

00:28:34,080 --> 00:28:39,360
way you do it with a web app

00:28:35,919 --> 00:28:41,760
um this is actually one place uh

00:28:39,360 --> 00:28:43,760
where the desktop platform really has

00:28:41,760 --> 00:28:46,799
the potential to outshine the web

00:28:43,760 --> 00:28:48,240
because it can actually be a lot easier

00:28:46,799 --> 00:28:50,080
with desktop apps

00:28:48,240 --> 00:28:51,840
when you have a desktop app once your

00:28:50,080 --> 00:28:52,880
user downloads it they don't need to

00:28:51,840 --> 00:28:54,480
keep

00:28:52,880 --> 00:28:56,240
using your bandwidths and using your

00:28:54,480 --> 00:28:57,760
computing resources when they run it so

00:28:56,240 --> 00:28:59,039
you don't need to run a server that has

00:28:57,760 --> 00:29:01,039
to scale really

00:28:59,039 --> 00:29:02,159
uh you know really hard with the number

00:29:01,039 --> 00:29:04,240
of users

00:29:02,159 --> 00:29:05,840
and you know what most people do is pay

00:29:04,240 --> 00:29:08,159
somebody else to do that

00:29:05,840 --> 00:29:09,600
uh you know your user downloads the app

00:29:08,159 --> 00:29:12,320
and they run it on their computer

00:29:09,600 --> 00:29:15,760
and you can concentrate on answering bug

00:29:12,320 --> 00:29:15,760
reports like this cat is doing

00:29:17,600 --> 00:29:21,039
so you know i'll be talking about

00:29:19,840 --> 00:29:24,240
building the app as a flat pack and

00:29:21,039 --> 00:29:24,240
distributing it on flat hub

00:29:24,880 --> 00:29:27,679
there are certain requirements that you

00:29:26,480 --> 00:29:29,520
have to meet in order to distribute your

00:29:27,679 --> 00:29:30,960
app on flat hub but luckily the project

00:29:29,520 --> 00:29:32,960
skeleton that we generated

00:29:30,960 --> 00:29:34,399
early in the talk it meets these

00:29:32,960 --> 00:29:36,080
requirements there are only a few things

00:29:34,399 --> 00:29:39,200
that we need to fill in

00:29:36,080 --> 00:29:42,080
um one thing that

00:29:39,200 --> 00:29:43,760
uh will be kind of unfamiliar to uh

00:29:42,080 --> 00:29:46,399
people coming from the web platform

00:29:43,760 --> 00:29:47,440
is the app stream meta info file this is

00:29:46,399 --> 00:29:49,600
the kind of

00:29:47,440 --> 00:29:51,279
manifest that provides the description

00:29:49,600 --> 00:29:51,919
that users see when they go to flat hub

00:29:51,279 --> 00:29:53,279
like i've

00:29:51,919 --> 00:29:55,679
you know taken a screenshot of that here

00:29:53,279 --> 00:29:58,399
on the right and users also see this

00:29:55,679 --> 00:30:00,640
information in their updater application

00:29:58,399 --> 00:30:01,840
um so flat hub requires you to have one

00:30:00,640 --> 00:30:04,000
of these because

00:30:01,840 --> 00:30:06,320
it ensures a good experience for users

00:30:04,000 --> 00:30:08,399
installing and updating the software

00:30:06,320 --> 00:30:11,679
that i've linked to a description of the

00:30:08,399 --> 00:30:13,039
file format here in the slides

00:30:11,679 --> 00:30:15,120
uh but you don't have to write it from

00:30:13,039 --> 00:30:17,039
scratch there's a generator

00:30:15,120 --> 00:30:18,480
uh there's another link here to get you

00:30:17,039 --> 00:30:20,159
started you go to this

00:30:18,480 --> 00:30:21,600
uh you click on this link you fill out

00:30:20,159 --> 00:30:22,720
the answers to a few questions about

00:30:21,600 --> 00:30:25,039
your app

00:30:22,720 --> 00:30:26,399
and the result of that process can

00:30:25,039 --> 00:30:27,520
actually just replace the file that was

00:30:26,399 --> 00:30:28,559
generated along with the project

00:30:27,520 --> 00:30:31,840
skeleton

00:30:28,559 --> 00:30:34,159
you can just copy and paste it in

00:30:31,840 --> 00:30:35,440
you will need screenshots for flat hub

00:30:34,159 --> 00:30:36,000
these screenshots are linked in this

00:30:35,440 --> 00:30:37,600
manifest

00:30:36,000 --> 00:30:40,720
so you have to host those somewhere

00:30:37,600 --> 00:30:42,159
usually in your apps git repository

00:30:40,720 --> 00:30:44,480
and then for flat hub you also have to

00:30:42,159 --> 00:30:47,200
have a content rating in this manifest

00:30:44,480 --> 00:30:48,880
uh and so they use the scale given by

00:30:47,200 --> 00:30:50,880
the open age rating service

00:30:48,880 --> 00:30:52,559
and that also has a handy generator it's

00:30:50,880 --> 00:30:54,159
also linked in this slide

00:30:52,559 --> 00:30:56,320
you can answer questions about your app

00:30:54,159 --> 00:30:57,440
and it spits out a rating that you can

00:30:56,320 --> 00:31:01,360
download

00:30:57,440 --> 00:31:01,360
and just paste into your file

00:31:01,919 --> 00:31:05,279
another file where we have to fill in

00:31:03,120 --> 00:31:06,960
some blanks is the desktop file and so

00:31:05,279 --> 00:31:10,320
this one is used

00:31:06,960 --> 00:31:11,919
um not at the point of distribution but

00:31:10,320 --> 00:31:13,039
this is used by the user's desktop

00:31:11,919 --> 00:31:15,440
environment to

00:31:13,039 --> 00:31:17,440
determine how to display your app like

00:31:15,440 --> 00:31:18,159
where to put it in the applications menu

00:31:17,440 --> 00:31:21,200
if there is

00:31:18,159 --> 00:31:21,840
such a thing in that user's desktop uh

00:31:21,200 --> 00:31:24,799
and

00:31:21,840 --> 00:31:25,279
for the the con i guess for the things

00:31:24,799 --> 00:31:27,279
the

00:31:25,279 --> 00:31:28,559
one was already generated uh in our

00:31:27,279 --> 00:31:30,880
project skeleton

00:31:28,559 --> 00:31:32,000
we really only have to fill in the

00:31:30,880 --> 00:31:35,200
comments and categories

00:31:32,000 --> 00:31:36,799
fields but i've included a link to the

00:31:35,200 --> 00:31:38,799
description of this file format in case

00:31:36,799 --> 00:31:40,720
you want to know what all the fields are

00:31:38,799 --> 00:31:42,399
and then there's a list of categories

00:31:40,720 --> 00:31:43,919
that you can pick from but the field is

00:31:42,399 --> 00:31:47,039
free form so you can pick up

00:31:43,919 --> 00:31:50,000
you can pick any that apply

00:31:47,039 --> 00:31:50,000
or add new ones

00:31:50,399 --> 00:31:55,279
you'll need an icon the icon that i've

00:31:53,679 --> 00:31:57,039
shown here is the placeholder icon that

00:31:55,279 --> 00:31:58,720
you get from the app skeleton that's

00:31:57,039 --> 00:32:00,080
generated

00:31:58,720 --> 00:32:02,399
i'm not going to go into the whole

00:32:00,080 --> 00:32:04,559
process of designing an icon but

00:32:02,399 --> 00:32:06,080
one of the gnome designers uh who i

00:32:04,559 --> 00:32:08,559
believe gave a talk this morning

00:32:06,080 --> 00:32:09,360
uh unfortunately didn't see it because

00:32:08,559 --> 00:32:12,080
it was at

00:32:09,360 --> 00:32:13,679
like 2 30 in the morning my time but

00:32:12,080 --> 00:32:16,080
there's a very nice blog post on how to

00:32:13,679 --> 00:32:16,080
do this

00:32:16,880 --> 00:32:21,760
um and that's all for submitting your

00:32:20,640 --> 00:32:24,480
app to flat hub

00:32:21,760 --> 00:32:24,960
uh you know there's instructions for

00:32:24,480 --> 00:32:26,960
actually

00:32:24,960 --> 00:32:28,880
doing the submission the submission

00:32:26,960 --> 00:32:30,640
works as a github phone request

00:32:28,880 --> 00:32:31,760
and once the request is accepted you've

00:32:30,640 --> 00:32:33,039
pretty much taken care of your

00:32:31,760 --> 00:32:34,799
distribution channel

00:32:33,039 --> 00:32:38,320
and all you have to do now is fix bugs

00:32:34,799 --> 00:32:38,320
and push updates whenever you do

00:32:39,440 --> 00:32:43,840
hopefully once your app is released and

00:32:42,559 --> 00:32:44,399
you get users something that you might

00:32:43,840 --> 00:32:46,960
want to do

00:32:44,399 --> 00:32:48,960
is translate your ui into the languages

00:32:46,960 --> 00:32:51,200
that your users speak

00:32:48,960 --> 00:32:53,519
uh so what you need to do this is a

00:32:51,200 --> 00:32:55,840
translation framework and the platform

00:32:53,519 --> 00:32:57,039
heavily prefers one that comes built in

00:32:55,840 --> 00:32:58,640
and it's called get text

00:32:57,039 --> 00:33:00,159
it's been around a really long time and

00:32:58,640 --> 00:33:01,519
it's quite well supported in all kinds

00:33:00,159 --> 00:33:03,279
of tools

00:33:01,519 --> 00:33:05,200
uh it's under the you know the file

00:33:03,279 --> 00:33:06,720
format used in get text is understood by

00:33:05,200 --> 00:33:09,279
a lot of existing tools

00:33:06,720 --> 00:33:10,399
including translation websites such as

00:33:09,279 --> 00:33:12,320
trans effects

00:33:10,399 --> 00:33:14,320
or you can get a program such as g

00:33:12,320 --> 00:33:15,600
translator or po edit and kick off the

00:33:14,320 --> 00:33:17,200
process by

00:33:15,600 --> 00:33:19,360
translating the ui yourself into a

00:33:17,200 --> 00:33:22,960
language that you speak

00:33:19,360 --> 00:33:25,519
so my experience having written an app

00:33:22,960 --> 00:33:27,360
not talking about blogpad here but once

00:33:25,519 --> 00:33:28,960
your app gets some users translators are

00:33:27,360 --> 00:33:31,200
some of the easiest volunteers to find

00:33:28,960 --> 00:33:32,559
if you make it easy for them

00:33:31,200 --> 00:33:33,919
it's a really low threshold way for

00:33:32,559 --> 00:33:35,279
people to contribute they don't have to

00:33:33,919 --> 00:33:36,799
know how to program

00:33:35,279 --> 00:33:39,279
it's really nice for them if they can

00:33:36,799 --> 00:33:42,640
just go to a website or

00:33:39,279 --> 00:33:45,440
download some program and and you know

00:33:42,640 --> 00:33:46,720
translate the ui messages into their own

00:33:45,440 --> 00:33:49,679
language

00:33:46,720 --> 00:33:50,960
it's it's quite low threshold low

00:33:49,679 --> 00:33:53,679
friction

00:33:50,960 --> 00:33:56,000
uh you've just got to make it possible

00:33:53,679 --> 00:33:56,000
for them

00:33:56,320 --> 00:34:00,399
so uh we've gotten to the end i think

00:33:58,880 --> 00:34:01,919
the conclusion is that it's quite

00:34:00,399 --> 00:34:03,519
possible if you know javascript from

00:34:01,919 --> 00:34:06,320
some other context to use that knowledge

00:34:03,519 --> 00:34:09,440
to develop apps for the linux desktop

00:34:06,320 --> 00:34:13,040
some things might be really familiar

00:34:09,440 --> 00:34:14,800
to uh js developers

00:34:13,040 --> 00:34:16,159
some things about the desktop platform

00:34:14,800 --> 00:34:17,280
might be even better like

00:34:16,159 --> 00:34:18,480
you're being able to target one

00:34:17,280 --> 00:34:19,760
environment instead of a million

00:34:18,480 --> 00:34:21,200
different browsers

00:34:19,760 --> 00:34:23,599
other things might be worse or more

00:34:21,200 --> 00:34:25,040
confusing like the situation with xml ui

00:34:23,599 --> 00:34:26,720
files

00:34:25,040 --> 00:34:28,720
so what i'm advocating for us as desktop

00:34:26,720 --> 00:34:30,399
developers is to learn more about

00:34:28,720 --> 00:34:32,079
web and node development and try to

00:34:30,399 --> 00:34:34,639
reduce friction for this really large

00:34:32,079 --> 00:34:36,079
group of developers uh but you know not

00:34:34,639 --> 00:34:37,119
everything should be copied or not

00:34:36,079 --> 00:34:39,839
everything is even going to be

00:34:37,119 --> 00:34:41,839
applicable to desktop development

00:34:39,839 --> 00:34:43,040
um and that was my experiment i hope it

00:34:41,839 --> 00:34:44,960
was useful to someone

00:34:43,040 --> 00:34:46,320
uh because that means that it was

00:34:44,960 --> 00:34:49,520
successful

00:34:46,320 --> 00:34:52,159
i'd like to take questions um i may have

00:34:49,520 --> 00:34:54,159
wasted the question time with the uh

00:34:52,159 --> 00:34:56,320
um showing the slides in the beginning

00:34:54,159 --> 00:34:58,960
but uh yeah i wonder if there's a bit of

00:34:56,320 --> 00:34:59,599
uh if you go ahead and stop your screen

00:34:58,960 --> 00:35:02,000
share there

00:34:59,599 --> 00:35:02,720
are questions in the shared notes that

00:35:02,000 --> 00:35:05,760
you can

00:35:02,720 --> 00:35:07,920
answer because this is the last session

00:35:05,760 --> 00:35:10,079
of the day it's okay if we run a little

00:35:07,920 --> 00:35:11,359
a couple minutes longer but essentially

00:35:10,079 --> 00:35:13,680
you have three minutes left of your

00:35:11,359 --> 00:35:17,359
formal time slot

00:35:13,680 --> 00:35:19,920
okay uh the first question is isn't

00:35:17,359 --> 00:35:23,440
glade ui deprecated for creating uis

00:35:19,920 --> 00:35:23,440
uh i don't think it is

00:35:23,920 --> 00:35:31,760
um it's still actively maintained for

00:35:28,560 --> 00:35:33,119
gtk3 uis and uh

00:35:31,760 --> 00:35:36,720
you know the maintainer of glade is

00:35:33,119 --> 00:35:39,200
working on a version for gtk4

00:35:36,720 --> 00:35:40,880
uh hope that answers the question uh

00:35:39,200 --> 00:35:43,200
second question

00:35:40,880 --> 00:35:46,960
is uh for maintenance which is better

00:35:43,200 --> 00:35:46,960
xml ui files or code

00:35:47,280 --> 00:35:53,920
it really depends

00:35:50,560 --> 00:35:53,920
on your preference

00:35:55,040 --> 00:36:02,720
i think you know personally i prefer

00:35:59,520 --> 00:36:05,280
um using xml files and making changes

00:36:02,720 --> 00:36:07,839
when i need to make changes in glade

00:36:05,280 --> 00:36:08,960
um i know lots of other people who would

00:36:07,839 --> 00:36:13,359
really prefer code

00:36:08,960 --> 00:36:17,040
so it's uh it's up to you

00:36:13,359 --> 00:36:20,160
um which language is djs built upon

00:36:17,040 --> 00:36:24,960
um djs is

00:36:20,160 --> 00:36:26,640
uh embedded in it is a copy of

00:36:24,960 --> 00:36:28,160
the spider monkey javascript engine

00:36:26,640 --> 00:36:29,839
which is the same

00:36:28,160 --> 00:36:32,960
engine that's used in the firefox

00:36:29,839 --> 00:36:36,000
browser uh and so it's

00:36:32,960 --> 00:36:39,440
uh yeah it's javascript

00:36:36,000 --> 00:36:41,359
uh plus the layer that uh

00:36:39,440 --> 00:36:42,560
you know that dynamically generates the

00:36:41,359 --> 00:36:44,800
bindings between

00:36:42,560 --> 00:36:48,160
these platform libraries and what the

00:36:44,800 --> 00:36:48,160
code that people write in javascript

00:36:48,640 --> 00:36:52,839
um is there an easy way to add a webview

00:36:50,960 --> 00:36:55,760
browser widget

00:36:52,839 --> 00:36:57,280
uh it's not a stupid question at all

00:36:55,760 --> 00:36:58,400
the person who asked this said sorry for

00:36:57,280 --> 00:36:59,520
the stupid question but it's not a

00:36:58,400 --> 00:37:02,800
stupid question

00:36:59,520 --> 00:37:04,480
um yes there is there's a uh platform

00:37:02,800 --> 00:37:07,599
library called webkit gtk

00:37:04,480 --> 00:37:09,440
uh and that uh

00:37:07,599 --> 00:37:11,599
yeah that library provides a browser

00:37:09,440 --> 00:37:14,560
widget and it's

00:37:11,599 --> 00:37:15,200
i believe it is part of the flat pack

00:37:14,560 --> 00:37:17,040
runtime

00:37:15,200 --> 00:37:18,160
uh so you already get that library for

00:37:17,040 --> 00:37:20,720
free you don't even need an extra

00:37:18,160 --> 00:37:20,720
dependency

00:37:21,440 --> 00:37:28,160
um there's actually an example

00:37:25,520 --> 00:37:30,000
in the examples directory in the ggs

00:37:28,160 --> 00:37:30,400
repository i can link to it after the

00:37:30,000 --> 00:37:34,320
talk

00:37:30,400 --> 00:37:37,040
in the chat maybe um

00:37:34,320 --> 00:37:39,280
question five can gjs be used cross

00:37:37,040 --> 00:37:40,960
platform linux windows mac android and

00:37:39,280 --> 00:37:44,400
ios

00:37:40,960 --> 00:37:48,560
uh the answer is uh sort of

00:37:44,400 --> 00:37:52,880
um it works on the linux and mac

00:37:48,560 --> 00:37:55,520
uh i have understood that it works

00:37:52,880 --> 00:37:56,960
on windows although i don't know how

00:37:55,520 --> 00:37:59,760
easy the developer story

00:37:56,960 --> 00:38:01,680
is for writing an app in it and and

00:37:59,760 --> 00:38:05,040
packaging it on windows

00:38:01,680 --> 00:38:08,000
uh i would sincerely doubt

00:38:05,040 --> 00:38:09,440
that you could write an android or ios

00:38:08,000 --> 00:38:13,119
app with it

00:38:09,440 --> 00:38:16,320
um but you know who knows that

00:38:13,119 --> 00:38:16,320
that might be possible one day

00:38:17,520 --> 00:38:22,320
uh how does djs compare to electron

00:38:19,920 --> 00:38:25,359
performance and memory-wise

00:38:22,320 --> 00:38:28,880
um i think

00:38:25,359 --> 00:38:28,880
that uh

00:38:30,079 --> 00:38:36,079
yeah i don't have uh

00:38:33,200 --> 00:38:36,640
numbers at my fingertips right now but

00:38:36,079 --> 00:38:39,040
uh

00:38:36,640 --> 00:38:40,320
electron is basically an embedded uh

00:38:39,040 --> 00:38:42,960
webview widget

00:38:40,320 --> 00:38:44,800
so anytime you embed a webview widget

00:38:42,960 --> 00:38:46,240
your

00:38:44,800 --> 00:38:48,320
performance is going to go down a bit

00:38:46,240 --> 00:38:52,240
and your memory is going to go up a bit

00:38:48,320 --> 00:38:53,920
uh because like the web is

00:38:52,240 --> 00:38:55,839
you know web is a huge platform

00:38:53,920 --> 00:38:58,400
embedding a webview widget

00:38:55,839 --> 00:39:00,640
um is sort of necessarily going to

00:38:58,400 --> 00:39:04,240
increase the resources that you use

00:39:00,640 --> 00:39:06,480
so uh you know the

00:39:04,240 --> 00:39:08,720
anecdotal evidence is that electron apps

00:39:06,480 --> 00:39:11,040
uh

00:39:08,720 --> 00:39:12,400
you know they depending on what

00:39:11,040 --> 00:39:17,920
dependencies you use

00:39:12,400 --> 00:39:17,920
uh you know they can use like easily 350

00:39:18,960 --> 00:39:25,359
um megabytes of memory or something uh

00:39:23,680 --> 00:39:27,040
you know still the answer depends on on

00:39:25,359 --> 00:39:29,599
what dependencies you're using but

00:39:27,040 --> 00:39:30,880
generally native desktop apps are going

00:39:29,599 --> 00:39:34,720
to be

00:39:30,880 --> 00:39:34,720
much more lightweight than that and

00:39:35,839 --> 00:39:39,200
you know if you wrote it in a compiled

00:39:38,079 --> 00:39:40,400
language it would be even more

00:39:39,200 --> 00:39:42,480
lightweight but

00:39:40,400 --> 00:39:44,240
the interpreted languages that you can

00:39:42,480 --> 00:39:48,000
use for writing desktop apps like

00:39:44,240 --> 00:39:49,280
uh gjs python and stuff like that

00:39:48,000 --> 00:39:51,800
uh they are generally going to be

00:39:49,280 --> 00:39:54,800
lighter than uh using an embedded

00:39:51,800 --> 00:39:54,800
browser

00:39:54,839 --> 00:40:00,800
um

00:39:57,119 --> 00:40:01,280
6.1 is it native code or is it jsruntime

00:40:00,800 --> 00:40:03,839
uh

00:40:01,280 --> 00:40:06,079
gjs native code for gui elements and js

00:40:03,839 --> 00:40:09,520
for my logic written in js

00:40:06,079 --> 00:40:12,800
uh so

00:40:09,520 --> 00:40:16,079
the the setup that we have here uh

00:40:12,800 --> 00:40:17,359
in in gjs um like you're running a

00:40:16,079 --> 00:40:20,960
javascript interpreter

00:40:17,359 --> 00:40:24,480
and that is falling into native code

00:40:20,960 --> 00:40:28,240
uh so

00:40:24,480 --> 00:40:28,800
i guess i don't know if that answered

00:40:28,240 --> 00:40:32,720
the question

00:40:28,800 --> 00:40:34,880
um so yeah like all of the

00:40:32,720 --> 00:40:39,760
uh all of the code that you don't write

00:40:34,880 --> 00:40:41,520
is native code let me put it that way um

00:40:39,760 --> 00:40:44,240
can this djs be easily packed for

00:40:41,520 --> 00:40:44,240
windows and mac

00:40:45,280 --> 00:40:52,800
i guess the the answer depends on what

00:40:48,960 --> 00:40:52,800
you uh what you call easily

00:40:52,960 --> 00:40:59,280
for mac it's not too hard for windows i

00:40:56,800 --> 00:41:02,880
don't have experience doing it so

00:40:59,280 --> 00:41:02,880
somebody else might have to answer that

00:41:03,280 --> 00:41:07,760
question eight is there http 2 support

00:41:05,280 --> 00:41:11,760
in gjs and is it transparent

00:41:07,760 --> 00:41:14,000
uh so djs itself doesn't have

00:41:11,760 --> 00:41:16,240
any http support because that's provided

00:41:14,000 --> 00:41:19,839
by the gnome platform

00:41:16,240 --> 00:41:21,680
so lib soup has has that i believe that

00:41:19,839 --> 00:41:24,240
http 2 support appeared

00:41:21,680 --> 00:41:25,520
in libsub 3 which was released very

00:41:24,240 --> 00:41:27,359
recently

00:41:25,520 --> 00:41:28,960
i don't know if it's in the current

00:41:27,359 --> 00:41:31,280
version of the

00:41:28,960 --> 00:41:32,640
uh flat pack runtime or it's going to be

00:41:31,280 --> 00:41:34,720
in the next version i'd have to look

00:41:32,640 --> 00:41:37,599
that up

00:41:34,720 --> 00:41:40,400
um question nine is webkit gtk

00:41:37,599 --> 00:41:43,920
cross-platform as well like available in

00:41:40,400 --> 00:41:46,880
windows and mac as well uh

00:41:43,920 --> 00:41:47,440
i believe it is available in mac uh

00:41:46,880 --> 00:41:51,760
windows

00:41:47,440 --> 00:41:53,280
i'm not sure um

00:41:51,760 --> 00:41:56,319
question 10 will it have good

00:41:53,280 --> 00:42:01,440
compatibility with cute

00:41:56,319 --> 00:42:02,319
uh i'm not sure if does it mean gjs in

00:42:01,440 --> 00:42:04,640
this case

00:42:02,319 --> 00:42:04,640
um

00:42:06,000 --> 00:42:12,160
but if yeah if it means uh

00:42:09,040 --> 00:42:12,560
dji okay yes the questioner is writing

00:42:12,160 --> 00:42:14,480
uh

00:42:12,560 --> 00:42:16,000
as we speak so does ggs have good

00:42:14,480 --> 00:42:20,400
compatibility with respect to ui with

00:42:16,000 --> 00:42:23,440
cute uh it doesn't um

00:42:20,400 --> 00:42:27,200
because you know

00:42:23,440 --> 00:42:28,880
cute has other you know other ways to

00:42:27,200 --> 00:42:31,280
write

00:42:28,880 --> 00:42:32,880
you know other language bindings gjs is

00:42:31,280 --> 00:42:33,839
for implementing language bindings that

00:42:32,880 --> 00:42:38,079
are based on g

00:42:33,839 --> 00:42:40,480
object uh so

00:42:38,079 --> 00:42:41,520
yeah you can you can use c libraries but

00:42:40,480 --> 00:42:43,680
they have to be

00:42:41,520 --> 00:42:44,800
uh written in the form of of g objects

00:42:43,680 --> 00:42:46,880
and that's what

00:42:44,800 --> 00:42:49,520
gjs can sort of dynamically generate

00:42:46,880 --> 00:42:49,520
bindings for

00:42:50,319 --> 00:42:56,400
um there's a

00:42:53,359 --> 00:43:00,000
question 11 appearing let's

00:42:56,400 --> 00:43:04,480
make that the last one the rust story

00:43:00,000 --> 00:43:08,480
um i guess if you

00:43:04,480 --> 00:43:09,920
want to write part of you know the

00:43:08,480 --> 00:43:12,560
if you want to write native code in your

00:43:09,920 --> 00:43:15,760
app uh with rust

00:43:12,560 --> 00:43:17,440
um you can

00:43:15,760 --> 00:43:18,800
you know you you can write it in the

00:43:17,440 --> 00:43:20,720
form of uh

00:43:18,800 --> 00:43:23,040
g object introspection library and then

00:43:20,720 --> 00:43:25,200
you can import that library in gis

00:43:23,040 --> 00:43:26,960
i haven't that's not something that i've

00:43:25,200 --> 00:43:32,640
done myself in any of my code

00:43:26,960 --> 00:43:37,119
um but i know that it's possible

00:43:32,640 --> 00:43:38,480
uh yeah so let's um

00:43:37,119 --> 00:43:40,960
let's call that the last question

00:43:38,480 --> 00:43:42,240
because i've otherwise i'm going over

00:43:40,960 --> 00:43:44,560
time here

00:43:42,240 --> 00:43:46,480
um and before i go i'd like to thank

00:43:44,560 --> 00:43:48,640
andy holmes and evan welsh and sri ram

00:43:46,480 --> 00:43:51,119
krishna for the discussions

00:43:48,640 --> 00:43:52,880
that led to this talk and also their

00:43:51,119 --> 00:43:54,960
work on improving the ggs developer

00:43:52,880 --> 00:43:56,960
experience and the presentation is

00:43:54,960 --> 00:43:59,040
licensed

00:43:56,960 --> 00:44:01,839
under creative commons license the

00:43:59,040 --> 00:44:04,800
details are in the slides

00:44:01,839 --> 00:44:05,599
and you can find the code for the fake

00:44:04,800 --> 00:44:08,079
app that i wrote

00:44:05,599 --> 00:44:10,000
on gnomesgitlab and it has a permissive

00:44:08,079 --> 00:44:12,040
mit license

00:44:10,000 --> 00:44:15,040
so thanks very much everybody for

00:44:12,040 --> 00:44:15,040

YouTube URL: https://www.youtube.com/watch?v=YqmmK16rIm4


