Title: Distribution of Qt apps to other platforms
Publication date: 2021-05-30
Playlist: Linux App Summit 2021 Talks
Description: 
	A story of an app which is distributed to Linux, Mac OS and Windows.

In this talk I want to share my experience with distribution of Qt apps to all major platforms. I'm going to talk about tools and methods I use and also about specific requirements each platform, like Windows and Mac OS, have compared to Linux and who knows, maybe you will tell me how to do it better and simple.



Author(s) Bio

Jan works as a Senior Software Engineer at Red Hat. He is part of desktop team, where he is responsible for all the work related to Qt and KDE. Jan is also a long-term KDE contributor and user and he is part of Fedora KDE SIG, a group of people taking care of KDE in Fedora.



Twitter and/or Mastodon Handle

@JanGrulich


Q&A


1. I wrote a Qt app with Kirigami and k18n. While I'm strugling to varying extent to create builds for non-Linux platforms, I'm struggling the hardest to create a build for iOS. I know it is possible to do since Subsurface was ported to run there, but I cannot find any documentaion on how to do it. What steps could one take to create this build?

2. Where did you obtain the certificate for signing on Windows?

3.How robust would you consider is MingGW for crosscompiling Windows versions from Linux compared to compiling natively from Windows?

4. Do you think you could run WSL 2/WSL to run the tools instead of MingW on Windows?


Windows Subsystem for Linux https://docs.microsoft.com/en-us/windows/wsl/about

5. Have you tried uploading your app to the Apple and Windows App stores?.

6. Have you seen the talk done by Dan and Arjan on Friday? :)
Captions: 
	00:00:00,640 --> 00:00:04,400
so hello again uh my name is uh jan

00:00:03,760 --> 00:00:06,399
growly

00:00:04,400 --> 00:00:09,280
and i will talk about distribution of

00:00:06,399 --> 00:00:11,040
cute apps to other platforms

00:00:09,280 --> 00:00:12,719
so first let's start with some

00:00:11,040 --> 00:00:15,360
interaction uh

00:00:12,719 --> 00:00:16,800
so i work for red hat where i'm part of

00:00:15,360 --> 00:00:19,680
the desktop team

00:00:16,800 --> 00:00:20,480
and my responsibilities there are to

00:00:19,680 --> 00:00:23,279
take care of

00:00:20,480 --> 00:00:24,480
guild and kd packages in rail and

00:00:23,279 --> 00:00:26,800
besides that i also

00:00:24,480 --> 00:00:28,240
tried to include red hat's emerging

00:00:26,800 --> 00:00:31,199
technologies

00:00:28,240 --> 00:00:32,800
such as flatback or pipefire uh with kde

00:00:31,199 --> 00:00:36,000
or cute

00:00:32,800 --> 00:00:37,280
and i'm also part of fedora kdc where i

00:00:36,000 --> 00:00:40,800
occasionally package

00:00:37,280 --> 00:00:44,399
cute and kd and i'm also a

00:00:40,800 --> 00:00:44,879
big fan of kd and user and developer

00:00:44,399 --> 00:00:47,600
there

00:00:44,879 --> 00:00:49,680
uh for example i maintain the plasma

00:00:47,600 --> 00:00:53,199
network management applet

00:00:49,680 --> 00:00:53,199
so i contribute there as well

00:00:53,760 --> 00:00:58,079
so about this presentation so why am i

00:00:56,079 --> 00:01:01,600
giving this talk

00:00:58,079 --> 00:01:02,640
uh like a year ago i took over

00:01:01,600 --> 00:01:05,760
maintainership

00:01:02,640 --> 00:01:08,000
of federal media writer

00:01:05,760 --> 00:01:09,600
if you don't know federer media writer

00:01:08,000 --> 00:01:13,040
that's a tool

00:01:09,600 --> 00:01:16,560
we provide to users it allows them to

00:01:13,040 --> 00:01:19,200
easily download any fedora variant

00:01:16,560 --> 00:01:20,479
and write all the images to their usb

00:01:19,200 --> 00:01:22,560
drives

00:01:20,479 --> 00:01:23,920
it has a nice ui and it's available on

00:01:22,560 --> 00:01:28,000
all platforms

00:01:23,920 --> 00:01:30,640
and before that i had zero experience of

00:01:28,000 --> 00:01:31,840
building uh acute applications on mac

00:01:30,640 --> 00:01:35,520
and windows

00:01:31,840 --> 00:01:38,159
so i had to learn how to do that uh

00:01:35,520 --> 00:01:40,000
the previous maintainer already had some

00:01:38,159 --> 00:01:41,840
build scripts written

00:01:40,000 --> 00:01:43,040
but i will i introduced some new

00:01:41,840 --> 00:01:46,479
dependencies

00:01:43,040 --> 00:01:49,040
and i rewrote the application to cmake

00:01:46,479 --> 00:01:49,759
so i had to learn everything how to do

00:01:49,040 --> 00:01:52,960
that and

00:01:49,759 --> 00:01:55,600
update all the builds scripts

00:01:52,960 --> 00:01:57,680
well to include my new dependencies and

00:01:55,600 --> 00:01:59,520
to accommodate to make changes and

00:01:57,680 --> 00:02:02,719
things like that

00:01:59,520 --> 00:02:03,759
and it was not a really easy process to

00:02:02,719 --> 00:02:07,280
learn everything

00:02:03,759 --> 00:02:10,399
or it sometimes may get complicated

00:02:07,280 --> 00:02:11,599
so i decided to give this talk so i will

00:02:10,399 --> 00:02:15,280
mention

00:02:11,599 --> 00:02:17,440
tools we use to distribute fedora media

00:02:15,280 --> 00:02:21,040
writer and to build it on windows and

00:02:17,440 --> 00:02:23,840
mac os i will give you some examples of

00:02:21,040 --> 00:02:26,239
cmake usage because that's something i

00:02:23,840 --> 00:02:29,440
learned recently

00:02:26,239 --> 00:02:31,599
during the rewrite and it's not much

00:02:29,440 --> 00:02:34,000
about linux

00:02:31,599 --> 00:02:34,640
because i guess many of you are linux

00:02:34,000 --> 00:02:36,879
users

00:02:34,640 --> 00:02:39,519
and linux developers so you know how it

00:02:36,879 --> 00:02:39,519
works there

00:02:42,480 --> 00:02:50,959
okay so let's start with some basics so

00:02:47,840 --> 00:02:53,680
here i have just an overview of platform

00:02:50,959 --> 00:02:57,120
specific defines you can use in cmake

00:02:53,680 --> 00:02:59,280
to distinguish a platform-specific code

00:02:57,120 --> 00:03:01,440
each of the platform defines gets

00:02:59,280 --> 00:03:04,959
defined on on the platform where you

00:03:01,440 --> 00:03:08,480
build your project so there are defines

00:03:04,959 --> 00:03:13,120
like apple win32 or unix which

00:03:08,480 --> 00:03:15,599
gets defined on each platform

00:03:13,120 --> 00:03:17,519
with unix it can be tricky because unix

00:03:15,599 --> 00:03:20,400
defined gets defined also

00:03:17,519 --> 00:03:20,720
on apple so in case you want to detect

00:03:20,400 --> 00:03:23,280
uh

00:03:20,720 --> 00:03:25,680
linux so i use something like unix and

00:03:23,280 --> 00:03:29,200
not iphone for example

00:03:25,680 --> 00:03:31,280
then cmega supervised compiler defines

00:03:29,200 --> 00:03:32,480
uh if you want to distinguish for

00:03:31,280 --> 00:03:36,799
example between

00:03:32,480 --> 00:03:40,720
mingw or microsoft digital compiler

00:03:36,799 --> 00:03:42,560
and i also include one tip for you

00:03:40,720 --> 00:03:44,720
because it's something that took me a

00:03:42,560 --> 00:03:46,560
while to figure out

00:03:44,720 --> 00:03:49,280
when your application for example

00:03:46,560 --> 00:03:52,319
provides a qml plugin

00:03:49,280 --> 00:03:55,680
uh this plugin has to be

00:03:52,319 --> 00:03:57,920
marked as a module otherwise uh

00:03:55,680 --> 00:03:58,799
built on windows won't be able to load

00:03:57,920 --> 00:04:01,360
it

00:03:58,799 --> 00:04:04,959
that's a window specific thing uh it's

00:04:01,360 --> 00:04:08,400
mentioned in the documentation but um

00:04:04,959 --> 00:04:11,840
it i didn't see it before so i'm

00:04:08,400 --> 00:04:13,680
i'm i'm mentioning mentioning it here

00:04:11,840 --> 00:04:16,639
so in my because it i think it might be

00:04:13,680 --> 00:04:19,120
useful for someone

00:04:16,639 --> 00:04:19,919
and just just to complete the topic uh

00:04:19,120 --> 00:04:22,639
there are also

00:04:19,919 --> 00:04:24,400
cute defines uh similar to cmake support

00:04:22,639 --> 00:04:26,960
i mentioned before

00:04:24,400 --> 00:04:28,000
uh these are on the source code level on

00:04:26,960 --> 00:04:30,960
and not on the build

00:04:28,000 --> 00:04:32,560
system level so you can use these so to

00:04:30,960 --> 00:04:35,520
distinguish your platform

00:04:32,560 --> 00:04:35,919
like mac linux or windows and same goes

00:04:35,520 --> 00:04:42,960
for

00:04:35,919 --> 00:04:46,639
all compilers

00:04:42,960 --> 00:04:51,120
so now let's start uh with our first

00:04:46,639 --> 00:04:52,720
platform and that will be uh windows

00:04:51,120 --> 00:04:54,720
so what everything you have to do for

00:04:52,720 --> 00:04:57,520
windows first of all

00:04:54,720 --> 00:04:58,720
you might need to include a manifest

00:04:57,520 --> 00:05:02,080
file

00:04:58,720 --> 00:05:04,560
the manifest file is in form of xml file

00:05:02,080 --> 00:05:06,400
and lets you define specific needs for

00:05:04,560 --> 00:05:09,360
your application

00:05:06,400 --> 00:05:10,639
for example in case of fedora media

00:05:09,360 --> 00:05:14,400
writer we use

00:05:10,639 --> 00:05:15,280
this uh to get some additional

00:05:14,400 --> 00:05:18,400
privileges

00:05:15,280 --> 00:05:21,840
because as i mentioned it writes

00:05:18,400 --> 00:05:25,600
the federal images to usb drive

00:05:21,840 --> 00:05:28,320
so for that we need a special permission

00:05:25,600 --> 00:05:29,759
but you can you can also using that you

00:05:28,320 --> 00:05:32,400
can also define

00:05:29,759 --> 00:05:35,280
another stuff like that your application

00:05:32,400 --> 00:05:37,360
is dpi aware or

00:05:35,280 --> 00:05:40,240
compatibility with other windows

00:05:37,360 --> 00:05:42,880
versions and things like that

00:05:40,240 --> 00:05:46,560
then you probably want to create an

00:05:42,880 --> 00:05:46,560
installer for your users

00:05:47,199 --> 00:05:50,479
because probably you don't want your

00:05:49,120 --> 00:05:52,720
users to build

00:05:50,479 --> 00:05:55,120
your application themselves and on

00:05:52,720 --> 00:05:57,120
windows the only way

00:05:55,120 --> 00:05:58,240
you can do that is to create installer

00:05:57,120 --> 00:06:01,919
for them

00:05:58,240 --> 00:06:05,120
and then you want to sign the installer

00:06:01,919 --> 00:06:06,560
otherwise when users try to install your

00:06:05,120 --> 00:06:08,639
application

00:06:06,560 --> 00:06:09,680
they will get warning it comes from

00:06:08,639 --> 00:06:13,680
unverified

00:06:09,680 --> 00:06:16,720
source so therefore

00:06:13,680 --> 00:06:16,720
we have to sign them

00:06:19,199 --> 00:06:25,120
okay let's start with the first step how

00:06:21,919 --> 00:06:30,240
to get cute on windows

00:06:25,120 --> 00:06:32,800
so there are more options so

00:06:30,240 --> 00:06:34,319
you can get a kill from the official

00:06:32,800 --> 00:06:37,199
killed installer

00:06:34,319 --> 00:06:38,319
you can download it on the official good

00:06:37,199 --> 00:06:41,440
webpage

00:06:38,319 --> 00:06:44,960
or the advantage of windows is

00:06:41,440 --> 00:06:48,400
that you can cross compile

00:06:44,960 --> 00:06:52,800
a windows application on linux

00:06:48,400 --> 00:06:55,840
so you can use mingw packages

00:06:52,800 --> 00:06:59,759
and it can also make your life

00:06:55,840 --> 00:07:02,960
simple as you can do it from one place

00:06:59,759 --> 00:07:06,800
and in case you want some automated uh

00:07:02,960 --> 00:07:09,680
builds on github you can use uh

00:07:06,800 --> 00:07:11,360
this you can include this action which

00:07:09,680 --> 00:07:13,599
allows you to specify

00:07:11,360 --> 00:07:16,240
a good version you can use and the

00:07:13,599 --> 00:07:19,919
compiler you will use to build your

00:07:16,240 --> 00:07:23,360
kit application use vsd

00:07:19,919 --> 00:07:26,000
so to provide automated windows built

00:07:23,360 --> 00:07:26,000
on github

00:07:26,639 --> 00:07:34,880
okay so let's start uh

00:07:31,360 --> 00:07:38,080
the the manifest file so

00:07:34,880 --> 00:07:41,120
here i have uh example uh how to

00:07:38,080 --> 00:07:43,360
include the manifest file with your

00:07:41,120 --> 00:07:46,240
application

00:07:43,360 --> 00:07:46,720
uh in cmaj you just use target sources

00:07:46,240 --> 00:07:50,800
uh

00:07:46,720 --> 00:07:54,560
your target name and uh path to

00:07:50,800 --> 00:07:58,479
rc file uh the rc file might look like

00:07:54,560 --> 00:08:00,720
this one where you specify uh

00:07:58,479 --> 00:08:02,720
the path or the name of the manifest

00:08:00,720 --> 00:08:03,919
file which will get included into your

00:08:02,720 --> 00:08:07,120
binary

00:08:03,919 --> 00:08:10,560
and then uh icon

00:08:07,120 --> 00:08:13,680
for your windows application

00:08:10,560 --> 00:08:17,440
and i think this works only for

00:08:13,680 --> 00:08:20,720
mingw compiler with the microsoft visual

00:08:17,440 --> 00:08:24,400
studio compiler or if the

00:08:20,720 --> 00:08:26,879
windows manifest matches the

00:08:24,400 --> 00:08:29,039
application or the target name i think

00:08:26,879 --> 00:08:31,360
it includes it automatically but i

00:08:29,039 --> 00:08:34,880
haven't tried that because we use the

00:08:31,360 --> 00:08:38,159
ming compiler

00:08:34,880 --> 00:08:41,120
in gw compiler

00:08:38,159 --> 00:08:43,039
and just to show you how the manifest

00:08:41,120 --> 00:08:45,120
file look like

00:08:43,039 --> 00:08:47,440
this is the one we use in federal media

00:08:45,120 --> 00:08:53,040
operator uh you can see

00:08:47,440 --> 00:08:53,040
we just require additional privileges

00:08:53,200 --> 00:08:56,240
for the right access

00:08:59,920 --> 00:09:07,279
and when we are talking about cmake uh

00:09:03,920 --> 00:09:08,480
one more tip for you this is a specific

00:09:07,279 --> 00:09:11,680
thing to windows

00:09:08,480 --> 00:09:14,399
uh when uh

00:09:11,680 --> 00:09:15,519
building your windows application you

00:09:14,399 --> 00:09:19,040
have to specify

00:09:15,519 --> 00:09:20,800
its win32 application

00:09:19,040 --> 00:09:22,320
otherwise when you build it and start

00:09:20,800 --> 00:09:24,160
your application

00:09:22,320 --> 00:09:25,680
it will automatically open the windows

00:09:24,160 --> 00:09:27,920
terminal

00:09:25,680 --> 00:09:31,519
and that's probably also something you

00:09:27,920 --> 00:09:33,920
don't want for your users to experience

00:09:31,519 --> 00:09:36,160
so they have two ways so either in add

00:09:33,920 --> 00:09:39,600
executable command you specify

00:09:36,160 --> 00:09:42,959
it's been 32 application or you can use

00:09:39,600 --> 00:09:45,839
set target properties on your target and

00:09:42,959 --> 00:09:48,320
set these properties to true there are

00:09:45,839 --> 00:09:48,320
two ways

00:09:49,760 --> 00:09:56,320
now when we we build the application

00:09:54,080 --> 00:09:57,760
we want to start preparing files for the

00:09:56,320 --> 00:10:00,959
installer

00:09:57,760 --> 00:10:03,600
on windows you basically have to bundle

00:10:00,959 --> 00:10:04,720
or include all the libraries which are

00:10:03,600 --> 00:10:09,120
not present

00:10:04,720 --> 00:10:11,839
on the standard window installation

00:10:09,120 --> 00:10:12,720
so that might that might include uh cute

00:10:11,839 --> 00:10:16,560
plugins

00:10:12,720 --> 00:10:19,920
or qml modules or some system libraries

00:10:16,560 --> 00:10:22,480
uh if you're doing this manually uh

00:10:19,920 --> 00:10:24,079
you can but you in some cases for

00:10:22,480 --> 00:10:26,959
example in case of qml

00:10:24,079 --> 00:10:28,560
modules and good plugins you have to

00:10:26,959 --> 00:10:31,040
make sure

00:10:28,560 --> 00:10:32,240
oh they will keep their directory here

00:10:31,040 --> 00:10:35,120
here

00:10:32,240 --> 00:10:37,600
otherwise you download them and secure

00:10:35,120 --> 00:10:42,240
libraries on system libraries

00:10:37,600 --> 00:10:42,240
can go to this to their root directory

00:10:42,560 --> 00:10:46,399
but if you don't want to do that

00:10:44,000 --> 00:10:48,160
manually which probably some

00:10:46,399 --> 00:10:50,480
that's something you probably don't want

00:10:48,160 --> 00:10:53,839
uh because it's a painful process

00:10:50,480 --> 00:10:58,079
we do that for some builds uh

00:10:53,839 --> 00:11:02,079
but in github we we use uh

00:10:58,079 --> 00:11:06,000
this way uh you can use

00:11:02,079 --> 00:11:09,600
windowpoint qt that's a tool qt provides

00:11:06,000 --> 00:11:12,839
uh when you run this tool you specify

00:11:09,600 --> 00:11:15,680
qml directory and your application

00:11:12,839 --> 00:11:19,680
binary and this will automatically

00:11:15,680 --> 00:11:23,519
install all your skilled plugins or

00:11:19,680 --> 00:11:27,760
all cute libraries and and thanks to

00:11:23,519 --> 00:11:32,399
qml or import scanner

00:11:27,760 --> 00:11:34,320
it will also include all kml modules

00:11:32,399 --> 00:11:37,040
you will need to bundle with your

00:11:34,320 --> 00:11:37,040
application

00:11:41,120 --> 00:11:45,760
and system libraries still might need to

00:11:44,000 --> 00:11:47,519
be copied manually because i think i've

00:11:45,760 --> 00:11:50,720
been double quote

00:11:47,519 --> 00:11:51,920
it's only about cute stuff uh so some

00:11:50,720 --> 00:11:54,480
some things still have to be done

00:11:51,920 --> 00:11:54,480
manually

00:11:54,959 --> 00:12:01,680
okay now now we have all the files uh

00:11:58,639 --> 00:12:03,920
ready so you probably want to start uh

00:12:01,680 --> 00:12:06,639
creating your installer

00:12:03,920 --> 00:12:07,040
uh to create uh the window installer we

00:12:06,639 --> 00:12:10,079
use

00:12:07,040 --> 00:12:13,279
ncs it's a open source system

00:12:10,079 --> 00:12:16,639
to create windows installer it's system

00:12:13,279 --> 00:12:18,240
it's a script base and it allows you to

00:12:16,639 --> 00:12:19,200
define everything you need for the

00:12:18,240 --> 00:12:21,519
installer

00:12:19,200 --> 00:12:23,279
like files which gets installed and

00:12:21,519 --> 00:12:25,440
uninstalled or

00:12:23,279 --> 00:12:26,560
you can define the application name

00:12:25,440 --> 00:12:30,160
version link

00:12:26,560 --> 00:12:33,040
or things that get gets into

00:12:30,160 --> 00:12:34,959
windows register or the shortcut to the

00:12:33,040 --> 00:12:37,600
application

00:12:34,959 --> 00:12:38,720
i don't have example how the script

00:12:37,600 --> 00:12:41,040
looked like

00:12:38,720 --> 00:12:42,720
because the one we have in fedora media

00:12:41,040 --> 00:12:45,360
right is quite long

00:12:42,720 --> 00:12:46,560
but i think with this thing it's

00:12:45,360 --> 00:12:49,279
something you probably

00:12:46,560 --> 00:12:50,160
copy from some other project and just

00:12:49,279 --> 00:12:53,839
modify it

00:12:50,160 --> 00:12:53,839
all your needs

00:12:54,000 --> 00:12:59,519
so probably there is no reason to write

00:12:56,560 --> 00:12:59,519
this from scratch

00:13:00,079 --> 00:13:05,760
and when you have

00:13:03,839 --> 00:13:08,160
when you wrote the script for the

00:13:05,760 --> 00:13:11,360
installer

00:13:08,160 --> 00:13:14,399
you can try to generate it

00:13:11,360 --> 00:13:17,519
to do so you use makency's

00:13:14,399 --> 00:13:21,120
tool you can again get it

00:13:17,519 --> 00:13:24,240
from gw packages on linux

00:13:21,120 --> 00:13:26,320
or you can use chocolate on windows

00:13:24,240 --> 00:13:27,360
chocolate is a package manager from

00:13:26,320 --> 00:13:29,760
windows

00:13:27,360 --> 00:13:32,560
so you can uh if you have it you can

00:13:29,760 --> 00:13:36,959
just run a choco install mechanism

00:13:32,560 --> 00:13:40,560
and you are done uh once you create

00:13:36,959 --> 00:13:43,199
the installer for windows now it's time

00:13:40,560 --> 00:13:44,639
to sign the installer to sign the

00:13:43,199 --> 00:13:48,000
installer we use

00:13:44,639 --> 00:13:51,839
ossl sign code uh

00:13:48,000 --> 00:13:55,920
this is again from mingw package

00:13:51,839 --> 00:13:58,959
on windows there is signed sign tool

00:13:55,920 --> 00:14:01,760
or basically a similar tool

00:13:58,959 --> 00:14:02,000
to this uh the parameters or the command

00:14:01,760 --> 00:14:04,800
is

00:14:02,000 --> 00:14:07,040
very similar so here i have an example

00:14:04,800 --> 00:14:10,800
of the overseason sign code

00:14:07,040 --> 00:14:13,920
we use in case of federal media writer

00:14:10,800 --> 00:14:19,040
we designed to it's

00:14:13,920 --> 00:14:19,040
similar you specify a

00:14:19,440 --> 00:14:23,440
certificate passport password to the

00:14:22,160 --> 00:14:26,959
certificate

00:14:23,440 --> 00:14:31,839
you need the timestamp and then specify

00:14:26,959 --> 00:14:31,839
path to the installer

00:14:33,680 --> 00:14:39,360
okay and now

00:14:37,440 --> 00:14:40,639
when you are done with installer it's

00:14:39,360 --> 00:14:43,680
time

00:14:40,639 --> 00:14:46,639
to try it i don't think

00:14:43,680 --> 00:14:47,680
you will manage to successfully create

00:14:46,639 --> 00:14:50,880
instead of

00:14:47,680 --> 00:14:53,360
for on the first try i

00:14:50,880 --> 00:14:55,519
failed many times because many times you

00:14:53,360 --> 00:14:58,959
will find a library is missing

00:14:55,519 --> 00:14:59,839
or i don't know installer does something

00:14:58,959 --> 00:15:03,360
wrong

00:14:59,839 --> 00:15:06,720
so this is like a try and

00:15:03,360 --> 00:15:09,519
repeat process many times but if you

00:15:06,720 --> 00:15:10,480
once you've managed to do it

00:15:09,519 --> 00:15:13,680
successfully

00:15:10,480 --> 00:15:14,480
one time there's probably no reason why

00:15:13,680 --> 00:15:16,320
it shouldn't

00:15:14,480 --> 00:15:19,040
why it shouldn't work in the future

00:15:16,320 --> 00:15:20,560
unless you add some new dependencies

00:15:19,040 --> 00:15:22,880
there's probably no reason why it should

00:15:20,560 --> 00:15:22,880
break

00:15:25,199 --> 00:15:28,240
okay now it's time for another platform

00:15:27,920 --> 00:15:31,440
and

00:15:28,240 --> 00:15:33,920
it is mac os uh

00:15:31,440 --> 00:15:34,959
with with macos this situation is

00:15:33,920 --> 00:15:37,759
similar

00:15:34,959 --> 00:15:40,240
but in some ways it's more complicated

00:15:37,759 --> 00:15:42,079
the signing is more complex

00:15:40,240 --> 00:15:44,399
than on windows and the main

00:15:42,079 --> 00:15:48,000
disadvantage is that you have to

00:15:44,399 --> 00:15:52,639
do all of this on macos platform

00:15:48,000 --> 00:15:56,880
there is no cross compiling from linux

00:15:52,639 --> 00:15:59,600
so you need some uh mac machine

00:15:56,880 --> 00:16:01,020
or probably install macos virtual

00:15:59,600 --> 00:16:02,560
machine at least

00:16:01,020 --> 00:16:05,040
[Music]

00:16:02,560 --> 00:16:06,240
so on mac os it's all about creating

00:16:05,040 --> 00:16:09,759
application bundle

00:16:06,240 --> 00:16:12,959
uh mac doesn't use installers you can

00:16:09,759 --> 00:16:14,880
you can think of it as a app image a

00:16:12,959 --> 00:16:17,920
very cheaper application

00:16:14,880 --> 00:16:18,399
together with all libraries which are

00:16:17,920 --> 00:16:20,839
not

00:16:18,399 --> 00:16:22,480
available on standard mac os

00:16:20,839 --> 00:16:24,880
installation

00:16:22,480 --> 00:16:25,519
uh steps to create the bundle are

00:16:24,880 --> 00:16:28,399
following

00:16:25,519 --> 00:16:29,440
you need to write uh info info plist

00:16:28,399 --> 00:16:31,920
file

00:16:29,440 --> 00:16:32,480
which i will describe later then you

00:16:31,920 --> 00:16:34,800
have to

00:16:32,480 --> 00:16:36,959
bundle all libraries so since this

00:16:34,800 --> 00:16:39,120
system similar to windows

00:16:36,959 --> 00:16:41,279
and after you bundle everything uh you

00:16:39,120 --> 00:16:43,360
need to sign the binaries you need to

00:16:41,279 --> 00:16:46,880
sign the bundle itself

00:16:43,360 --> 00:16:50,240
then you create a dmg file and then

00:16:46,880 --> 00:16:51,360
uh mac mac has additional step you have

00:16:50,240 --> 00:16:54,000
to send

00:16:51,360 --> 00:16:54,560
your bundle for notification i will

00:16:54,000 --> 00:16:57,600
describe

00:16:54,560 --> 00:17:01,360
all the steps more closely

00:16:57,600 --> 00:17:04,720
in next slides so again first step

00:17:01,360 --> 00:17:08,160
how you can get killed on macos

00:17:04,720 --> 00:17:09,280
what we use is home pro that's this is

00:17:08,160 --> 00:17:12,640
similar

00:17:09,280 --> 00:17:13,280
to chocolate on windows it's a package

00:17:12,640 --> 00:17:16,319
installer

00:17:13,280 --> 00:17:19,760
so in our case we just called brew

00:17:16,319 --> 00:17:23,199
install q5 and brew install cmake

00:17:19,760 --> 00:17:25,760
and it will give us everything we need

00:17:23,199 --> 00:17:26,400
another option is to again use the

00:17:25,760 --> 00:17:32,080
official

00:17:26,400 --> 00:17:35,280
installer from google

00:17:32,080 --> 00:17:39,440
okay uh now uh we can start creating

00:17:35,280 --> 00:17:43,520
macos bundle so we start the process

00:17:39,440 --> 00:17:44,880
from cmake uh

00:17:43,520 --> 00:17:46,960
let's see make you define your example

00:17:44,880 --> 00:17:49,440
your executable will be

00:17:46,960 --> 00:17:50,080
a macos bundle and you additionally can

00:17:49,440 --> 00:17:52,400
set a

00:17:50,080 --> 00:17:53,600
icon to your application that you can

00:17:52,400 --> 00:17:57,039
see on the first

00:17:53,600 --> 00:18:01,120
line then we can specify some properties

00:17:57,039 --> 00:18:04,480
uh like the name of the of the bundle

00:18:01,120 --> 00:18:09,280
then you specify path to info please

00:18:04,480 --> 00:18:09,280
and then specify macos deployment target

00:18:09,440 --> 00:18:14,320
and you also can specify where your

00:18:12,240 --> 00:18:17,679
where the application icon

00:18:14,320 --> 00:18:19,919
can go because the mac os bundles has

00:18:17,679 --> 00:18:19,919
some

00:18:20,240 --> 00:18:27,200
directory hierarchy so

00:18:23,520 --> 00:18:29,760
so things like icons or

00:18:27,200 --> 00:18:32,240
additional resources goes into resources

00:18:29,760 --> 00:18:32,240
folder

00:18:34,240 --> 00:18:39,360
so now what is the information property

00:18:37,039 --> 00:18:39,360
list

00:18:39,520 --> 00:18:42,960
there's a file you have to include for

00:18:42,320 --> 00:18:46,240
every

00:18:42,960 --> 00:18:48,640
every application bundle it uh basically

00:18:46,240 --> 00:18:52,400
identifies your bundle you can set their

00:18:48,640 --> 00:18:55,840
your application name your version icon

00:18:52,400 --> 00:18:59,200
or you can use your own template it

00:18:55,840 --> 00:19:00,640
doesn't need to be the one that is

00:18:59,200 --> 00:19:03,760
provided by default

00:19:00,640 --> 00:19:06,799
or by cmake the format is xml

00:19:03,760 --> 00:19:10,240
here here i have a small example

00:19:06,799 --> 00:19:13,520
you can see it's a key value based

00:19:10,240 --> 00:19:14,640
so specify for example the icon icon

00:19:13,520 --> 00:19:17,600
file

00:19:14,640 --> 00:19:18,799
and then the variable gets substituted

00:19:17,600 --> 00:19:22,080
from

00:19:18,799 --> 00:19:23,280
cmg defines so you can as i mentioned

00:19:22,080 --> 00:19:25,440
you can either use

00:19:23,280 --> 00:19:28,320
your own file or whether you have your

00:19:25,440 --> 00:19:30,559
own application specific defines

00:19:28,320 --> 00:19:32,240
this probably that's something we use in

00:19:30,559 --> 00:19:35,600
federal media writer

00:19:32,240 --> 00:19:38,240
for example for the version we have uh

00:19:35,600 --> 00:19:38,799
federal media brazier federal media

00:19:38,240 --> 00:19:41,360
writer

00:19:38,799 --> 00:19:42,640
version which gets substituted across

00:19:41,360 --> 00:19:44,720
the project

00:19:42,640 --> 00:19:46,799
but you can use the one provided by

00:19:44,720 --> 00:19:49,520
cmake but you have to know

00:19:46,799 --> 00:19:50,880
all the variables you have to define in

00:19:49,520 --> 00:19:54,080
order to properly

00:19:50,880 --> 00:19:56,400
get them substituted in the info based

00:19:54,080 --> 00:19:56,400
file

00:19:59,360 --> 00:20:06,240
okay now at this phase

00:20:02,960 --> 00:20:08,880
uh we only have files

00:20:06,240 --> 00:20:10,240
or binaries which were built by our

00:20:08,880 --> 00:20:13,120
application

00:20:10,240 --> 00:20:14,720
but as i mentioned similar to windows

00:20:13,120 --> 00:20:16,720
you have to include

00:20:14,720 --> 00:20:20,000
all the libraries which are not present

00:20:16,720 --> 00:20:23,440
on standard mac installation

00:20:20,000 --> 00:20:25,840
so in this case uh we use a magnifique

00:20:23,440 --> 00:20:28,400
uh this is similar to the window acute

00:20:25,840 --> 00:20:32,080
or that's basically the same

00:20:28,400 --> 00:20:35,520
here i have a example of how i use it

00:20:32,080 --> 00:20:38,640
with cmake so you can see we

00:20:35,520 --> 00:20:42,080
first search for it and then

00:20:38,640 --> 00:20:46,320
we create a custom command that calls

00:20:42,080 --> 00:20:49,520
the make deploy kit providing path

00:20:46,320 --> 00:20:50,320
to our application bundle a path to our

00:20:49,520 --> 00:20:55,360
qml

00:20:50,320 --> 00:20:55,360
directory and application executable

00:20:55,919 --> 00:20:59,200
because on mac

00:21:00,320 --> 00:21:08,799
it's not very easy to bundle all

00:21:04,240 --> 00:21:08,799
libraries uh manually like on windows

00:21:09,280 --> 00:21:15,760
um because if you if you see

00:21:12,559 --> 00:21:16,320
if you for example see this example when

00:21:15,760 --> 00:21:19,520
i call

00:21:16,320 --> 00:21:23,520
all tool on cute gui or library

00:21:19,520 --> 00:21:26,159
you can see the path to the library

00:21:23,520 --> 00:21:26,559
points somewhere to the system and if

00:21:26,159 --> 00:21:29,360
you

00:21:26,559 --> 00:21:30,960
just blindly copy this library to your

00:21:29,360 --> 00:21:33,280
application bundle

00:21:30,960 --> 00:21:34,559
it will keep pointing uh to the same

00:21:33,280 --> 00:21:36,880
path

00:21:34,559 --> 00:21:38,559
and when you then distribute this to the

00:21:36,880 --> 00:21:40,400
users

00:21:38,559 --> 00:21:41,600
they won't be able to load it because

00:21:40,400 --> 00:21:46,080
the path

00:21:41,600 --> 00:21:46,080
or the library on this path won't exist

00:21:46,400 --> 00:21:51,520
so if you if you

00:21:49,760 --> 00:21:53,840
if there are situations where you have

00:21:51,520 --> 00:21:56,960
to do this manually

00:21:53,840 --> 00:21:59,440
uh you have to change the path to the

00:21:56,960 --> 00:22:02,720
library

00:21:59,440 --> 00:22:05,120
you first copy it to the

00:22:02,720 --> 00:22:06,000
specified directory in the application

00:22:05,120 --> 00:22:08,320
bundle

00:22:06,000 --> 00:22:10,559
in this case it's the name of the bundle

00:22:08,320 --> 00:22:13,200
contents and frameworks

00:22:10,559 --> 00:22:14,480
and then you have to call or install

00:22:13,200 --> 00:22:17,200
name tool

00:22:14,480 --> 00:22:20,720
that's a tool that that can that allows

00:22:17,200 --> 00:22:23,280
you to change the path to the library

00:22:20,720 --> 00:22:24,240
and if you are doing this manually for

00:22:23,280 --> 00:22:27,120
all the libraries

00:22:24,240 --> 00:22:27,840
uh it's probably not something you want

00:22:27,120 --> 00:22:31,120
to do

00:22:27,840 --> 00:22:34,320
so make the play cute will

00:22:31,120 --> 00:22:37,280
do all of that for you

00:22:34,320 --> 00:22:38,080
automatically but there are some

00:22:37,280 --> 00:22:40,960
situations

00:22:38,080 --> 00:22:41,600
where some libraries might be skipped or

00:22:40,960 --> 00:22:43,679
we have

00:22:41,600 --> 00:22:46,000
this situation with federal media writer

00:22:43,679 --> 00:22:47,039
where some library is considered as a

00:22:46,000 --> 00:22:49,520
system library

00:22:47,039 --> 00:22:50,640
and therefore it's not copied with mega

00:22:49,520 --> 00:22:55,840
deploy qt

00:22:50,640 --> 00:22:55,840
so we have to do this process manually

00:22:57,679 --> 00:23:05,679
okay now coming to signing binaries

00:23:02,320 --> 00:23:06,799
with mac as i mentioned there are two

00:23:05,679 --> 00:23:10,880
things so you have to

00:23:06,799 --> 00:23:13,200
sign all the binaries in the bundle

00:23:10,880 --> 00:23:15,039
that there has to be every library in

00:23:13,200 --> 00:23:18,080
the frameworks directory

00:23:15,039 --> 00:23:18,960
and then it has to be your application

00:23:18,080 --> 00:23:22,480
binaries

00:23:18,960 --> 00:23:23,200
or the executables these all have to be

00:23:22,480 --> 00:23:25,760
signed

00:23:23,200 --> 00:23:27,840
and then you also have to sign the

00:23:25,760 --> 00:23:31,679
bundle itself

00:23:27,840 --> 00:23:34,840
to science to sign uh your application

00:23:31,679 --> 00:23:36,000
you have you you can use a go code sign

00:23:34,840 --> 00:23:39,200
tool

00:23:36,000 --> 00:23:42,400
here's example how it can be run or

00:23:39,200 --> 00:23:45,679
it can be done using make deploy youth

00:23:42,400 --> 00:23:45,679
with code sign option

00:23:47,039 --> 00:23:51,600
then when you sign or

00:23:50,080 --> 00:23:53,120
your application bundle and all the

00:23:51,600 --> 00:23:56,000
binaries

00:23:53,120 --> 00:23:56,480
you have to create a dmg file uh dmg

00:23:56,000 --> 00:23:59,919
file

00:23:56,480 --> 00:24:02,080
is a container for apps on mac os

00:23:59,919 --> 00:24:04,480
uh as i mentioned before you can think

00:24:02,080 --> 00:24:06,559
of it as an app image

00:24:04,480 --> 00:24:07,919
to create one you can use make the make

00:24:06,559 --> 00:24:11,360
deploy cute again

00:24:07,919 --> 00:24:12,640
with the dmg option or you can use a gi

00:24:11,360 --> 00:24:15,840
video

00:24:12,640 --> 00:24:20,159
the example is here also you go

00:24:15,840 --> 00:24:23,679
agi util create and specify

00:24:20,159 --> 00:24:27,039
the application bundle name the output

00:24:23,679 --> 00:24:27,039
and some other parameters

00:24:28,400 --> 00:24:35,200
and then the next step is notarization

00:24:32,559 --> 00:24:35,760
this is specific to macos because on

00:24:35,200 --> 00:24:37,919
windows

00:24:35,760 --> 00:24:39,200
you just sign the installer and that's

00:24:37,919 --> 00:24:42,400
it uh

00:24:39,200 --> 00:24:45,600
apple uh has additional state

00:24:42,400 --> 00:24:46,000
that's notarization denotation process

00:24:45,600 --> 00:24:49,279
uh

00:24:46,000 --> 00:24:50,080
checks for any malicious code or

00:24:49,279 --> 00:24:52,640
components

00:24:50,080 --> 00:24:53,360
and also verifies whether you signed

00:24:52,640 --> 00:24:56,000
everything

00:24:53,360 --> 00:24:56,880
everything correctly this is done on

00:24:56,000 --> 00:24:59,440
apple servers

00:24:56,880 --> 00:25:00,159
so you send them your application bundle

00:24:59,440 --> 00:25:02,080
they will

00:25:00,159 --> 00:25:04,880
then reply you they will send you an

00:25:02,080 --> 00:25:08,720
email back with the result

00:25:04,880 --> 00:25:12,000
once again you can use make deploy kit

00:25:08,720 --> 00:25:13,360
to use to send your application to

00:25:12,000 --> 00:25:16,640
authorization

00:25:13,360 --> 00:25:17,840
or you can use xc run alto dot rights

00:25:16,640 --> 00:25:22,080
app

00:25:17,840 --> 00:25:22,080
then again specifying some parameters

00:25:26,000 --> 00:25:33,520
uh once the notarization is complete

00:25:30,080 --> 00:25:36,159
uh you will receive back an email uh

00:25:33,520 --> 00:25:37,440
then authorization produces a ticket

00:25:36,159 --> 00:25:40,320
that tells that your app

00:25:37,440 --> 00:25:41,360
is successfully authorized uh then you

00:25:40,320 --> 00:25:45,039
have to include

00:25:41,360 --> 00:25:46,640
this ticket within your application also

00:25:45,039 --> 00:25:49,039
your distributed application is

00:25:46,640 --> 00:25:52,240
identified as notarized

00:25:49,039 --> 00:25:54,960
next time anyone wants to try to use it

00:25:52,240 --> 00:25:56,559
and to include the ticket in the bundle

00:25:54,960 --> 00:25:59,120
you just run

00:25:56,559 --> 00:26:00,400
exceerance stepper stepper the

00:25:59,120 --> 00:26:03,200
application name

00:26:00,400 --> 00:26:04,799
or the name of the bundle it includes

00:26:03,200 --> 00:26:07,120
the ticket

00:26:04,799 --> 00:26:08,799
and then you again create the dng file

00:26:07,120 --> 00:26:12,640
which you can finally

00:26:08,799 --> 00:26:15,679
distribute to our users at this point

00:26:12,640 --> 00:26:18,320
your application is properly signed

00:26:15,679 --> 00:26:18,320
notarized

00:26:21,760 --> 00:26:26,159
and you are done again all similar to

00:26:25,039 --> 00:26:29,360
windows

00:26:26,159 --> 00:26:31,520
this probably something you won't make

00:26:29,360 --> 00:26:34,880
on first try

00:26:31,520 --> 00:26:38,000
so again this is a dry and repeat

00:26:34,880 --> 00:26:40,480
step many times but

00:26:38,000 --> 00:26:41,600
again only once you do it one time and

00:26:40,480 --> 00:26:44,720
it works

00:26:41,600 --> 00:26:45,520
and you know you have a way how to

00:26:44,720 --> 00:26:48,080
automate it

00:26:45,520 --> 00:26:49,919
it's probably there is no reason when it

00:26:48,080 --> 00:26:51,440
should break

00:26:49,919 --> 00:26:55,279
until you introduce some new

00:26:51,440 --> 00:26:55,279
dependencies or anything like that

00:26:57,200 --> 00:27:07,840
okay and that's it

00:27:02,240 --> 00:27:07,840
now it's time for some questions

00:27:13,679 --> 00:27:20,320
okay i can see some questions in

00:27:16,880 --> 00:27:22,640
shared notes yeah also uh there are some

00:27:20,320 --> 00:27:24,399
questions in the shared notes i'm not

00:27:22,640 --> 00:27:25,039
sure if you want me to read them for you

00:27:24,399 --> 00:27:27,840
if you can

00:27:25,039 --> 00:27:28,799
uh i can i can read them i see them okay

00:27:27,840 --> 00:27:32,080
great

00:27:28,799 --> 00:27:32,720
first question someone asking uh either

00:27:32,080 --> 00:27:34,640
of them

00:27:32,720 --> 00:27:37,760
i wrote the cute application with

00:27:34,640 --> 00:27:39,919
kirigami and k18n

00:27:37,760 --> 00:27:41,120
while i'm struggling to varying extent

00:27:39,919 --> 00:27:43,760
to create

00:27:41,120 --> 00:27:45,840
builds for non-linux platforms i'm

00:27:43,760 --> 00:27:47,039
struggling the hardest to create a build

00:27:45,840 --> 00:27:48,960
for ios

00:27:47,039 --> 00:27:51,360
i know it's possible to do since

00:27:48,960 --> 00:27:53,440
subsurface was supported to run there

00:27:51,360 --> 00:27:54,559
but i cannot find any documentation on

00:27:53,440 --> 00:27:56,960
how to do it

00:27:54,559 --> 00:27:58,640
what steps could one take to create this

00:27:56,960 --> 00:28:01,520
build

00:27:58,640 --> 00:28:02,240
okay i saw this question before my talk

00:28:01,520 --> 00:28:04,399
uh

00:28:02,240 --> 00:28:05,679
honestly i don't have any experience

00:28:04,399 --> 00:28:08,799
with ios

00:28:05,679 --> 00:28:09,919
but i would expect uh the build process

00:28:08,799 --> 00:28:13,520
or the bundling

00:28:09,919 --> 00:28:16,880
bundling might be similar

00:28:13,520 --> 00:28:19,840
so you probably have to bundle

00:28:16,880 --> 00:28:20,799
everything with your application but as

00:28:19,840 --> 00:28:24,559
far as i know

00:28:20,799 --> 00:28:25,520
on ios the only way how to distribute

00:28:24,559 --> 00:28:29,279
your application

00:28:25,520 --> 00:28:31,760
is for do app store so

00:28:29,279 --> 00:28:34,960
i have no experience how to get your

00:28:31,760 --> 00:28:34,960
application to app store

00:28:36,640 --> 00:28:41,919
okay uh second question

00:28:40,080 --> 00:28:44,240
did you obtain the certificate for

00:28:41,919 --> 00:28:47,360
signing on windows

00:28:44,240 --> 00:28:48,080
i myself don't have a certificate for

00:28:47,360 --> 00:28:52,000
windows

00:28:48,080 --> 00:28:55,600
or or even for mac os

00:28:52,000 --> 00:28:59,120
that's something our fedora engineering

00:28:55,600 --> 00:29:02,799
does or designing process

00:28:59,120 --> 00:29:05,520
so they have uh the certificates so they

00:29:02,799 --> 00:29:06,720
do the signing also the packages are

00:29:05,520 --> 00:29:10,080
built in gochee

00:29:06,720 --> 00:29:13,200
at least for the windows build or the

00:29:10,080 --> 00:29:13,760
windows installer the pcg the package is

00:29:13,200 --> 00:29:16,240
built in

00:29:13,760 --> 00:29:17,200
fedora infrastructure and just gets

00:29:16,240 --> 00:29:20,960
signed

00:29:17,200 --> 00:29:20,960
with the script we provide

00:29:23,039 --> 00:29:27,039
first question how robust would you

00:29:25,840 --> 00:29:29,440
consider using

00:29:27,039 --> 00:29:31,120
cheetw for cross compiling windows

00:29:29,440 --> 00:29:33,279
versions from linux

00:29:31,120 --> 00:29:35,760
compared to compiling natively from

00:29:33,279 --> 00:29:35,760
windows

00:29:36,159 --> 00:29:44,880
ah so i think

00:29:41,200 --> 00:29:48,399
for guild at least

00:29:44,880 --> 00:29:51,679
regarding cute stuff if you don't

00:29:48,399 --> 00:29:54,480
have some specific libraries i would say

00:29:51,679 --> 00:29:56,799
it's robust enough

00:29:54,480 --> 00:29:58,399
i think it has everything you need all

00:29:56,799 --> 00:30:01,440
the tools

00:29:58,399 --> 00:30:02,880
uh i haven't tried to actually build a

00:30:01,440 --> 00:30:06,240
fedora media writer

00:30:02,880 --> 00:30:10,000
natively on windows uh build it natively

00:30:06,240 --> 00:30:12,640
in github ci but there we also use mean

00:30:10,000 --> 00:30:12,640
gw

00:30:12,880 --> 00:30:17,679
um so i i haven't hit any any any issue

00:30:17,200 --> 00:30:20,799
with

00:30:17,679 --> 00:30:21,360
mingw or anything i would like or i

00:30:20,799 --> 00:30:25,520
would

00:30:21,360 --> 00:30:28,000
be missing at least at least for our

00:30:25,520 --> 00:30:28,000
usage

00:30:29,840 --> 00:30:33,840
another question do you think you could

00:30:31,919 --> 00:30:37,600
use you could run

00:30:33,840 --> 00:30:41,520
vsl to vsl to run the tools instead of

00:30:37,600 --> 00:30:41,520
mingy on windows

00:30:43,360 --> 00:30:47,760
i honestly don't know what bsl is

00:30:49,360 --> 00:30:51,840
so

00:31:02,000 --> 00:31:07,120
yes i think as i mentioned for example

00:31:06,159 --> 00:31:10,720
for the signing

00:31:07,120 --> 00:31:13,760
uh there are alternatives uh there was a

00:31:10,720 --> 00:31:16,240
talk on thursday uh similar to these

00:31:13,760 --> 00:31:19,360
values uh

00:31:16,240 --> 00:31:21,600
they didn't go the deep uh they use

00:31:19,360 --> 00:31:23,039
the sign tool for example for windows

00:31:21,600 --> 00:31:26,320
signing

00:31:23,039 --> 00:31:29,919
they didn't use the mingy uh

00:31:26,320 --> 00:31:33,279
version so yeah

00:31:29,919 --> 00:31:36,559
all of this can be done using on native

00:31:33,279 --> 00:31:36,559
windows tools

00:31:37,760 --> 00:31:42,320
have you tried another question have you

00:31:40,320 --> 00:31:44,480
tried uploading your app to the apple

00:31:42,320 --> 00:31:47,519
and windows app stores

00:31:44,480 --> 00:31:51,200
i have not uh

00:31:47,519 --> 00:31:52,960
the only official way how we now provide

00:31:51,200 --> 00:31:57,600
a federal media writer is

00:31:52,960 --> 00:32:00,960
for the get fedora.org the page uh

00:31:57,600 --> 00:32:02,720
i i once checked

00:32:00,960 --> 00:32:04,880
how to get your application on windows

00:32:02,720 --> 00:32:08,080
store i don't think the process

00:32:04,880 --> 00:32:10,799
is easy uh because

00:32:08,080 --> 00:32:11,840
i i saw that there were many steps in

00:32:10,799 --> 00:32:15,120
order to

00:32:11,840 --> 00:32:15,600
get their application there and that's

00:32:15,120 --> 00:32:19,120
probably

00:32:15,600 --> 00:32:19,120
not worth the time

00:32:20,720 --> 00:32:25,200
at least in this case accelerator i

00:32:23,120 --> 00:32:26,960
think or the

00:32:25,200 --> 00:32:28,320
the way how we provide it or the

00:32:26,960 --> 00:32:31,440
discoverability

00:32:28,320 --> 00:32:43,840
on the getfederal.org page is

00:32:31,440 --> 00:32:43,840
enough for our use case

00:33:00,000 --> 00:33:05,840
oh i i think i'm uh

00:33:03,200 --> 00:33:07,760
got the fourth question wrong uh the

00:33:05,840 --> 00:33:10,960
window sub system for linux uh

00:33:07,760 --> 00:33:12,640
that's the yeah the running linux on on

00:33:10,960 --> 00:33:15,919
windows

00:33:12,640 --> 00:33:16,880
yeah that's that's probably something

00:33:15,919 --> 00:33:25,840
that

00:33:16,880 --> 00:33:25,840
that can be run instead of min gw

00:33:26,320 --> 00:33:40,240
okay i haven't tried it right

00:33:38,399 --> 00:33:42,080
given that there is still some time left

00:33:40,240 --> 00:33:44,399
maybe we can wait a few more minutes if

00:33:42,080 --> 00:33:46,720
someone asks us questions

00:33:44,399 --> 00:33:53,840
uh if you have please add them in the

00:33:46,720 --> 00:33:53,840
share notes

00:34:04,840 --> 00:34:07,840
um

00:34:22,399 --> 00:34:27,760
if you if you decide uh

00:34:25,839 --> 00:34:30,320
to build your application on windows and

00:34:27,760 --> 00:34:32,839
make uh i think you can you can check

00:34:30,320 --> 00:34:34,560
uh how we do that in federal media

00:34:32,839 --> 00:34:36,879
writer

00:34:34,560 --> 00:34:38,399
all the examples i mentioned here are

00:34:36,879 --> 00:34:41,040
from there

00:34:38,399 --> 00:34:44,000
so you can you can see how we do it uh

00:34:41,040 --> 00:34:47,760
you can see how we built it in

00:34:44,000 --> 00:34:49,440
github ci for example that can be also

00:34:47,760 --> 00:34:52,639
helpful

00:34:49,440 --> 00:34:56,159
uh we built inferior uh

00:34:52,639 --> 00:34:59,680
in github ci we built only uh unsight

00:34:56,159 --> 00:35:03,359
binaries or design designing as i said

00:34:59,680 --> 00:35:05,839
is done by federal engineering

00:35:03,359 --> 00:35:07,119
but you can you can even there you can

00:35:05,839 --> 00:35:10,560
see the

00:35:07,119 --> 00:35:12,960
scripts we use for signing

00:35:10,560 --> 00:35:14,839
so you can check check it there and get

00:35:12,960 --> 00:35:17,839
some

00:35:14,839 --> 00:35:17,839
examples

00:35:37,920 --> 00:35:41,520
yeah there is there is another question

00:35:39,599 --> 00:35:42,960
have you seen the talk done by dan and

00:35:41,520 --> 00:35:46,480
ariana on friday

00:35:42,960 --> 00:35:49,839
yeah i saw it i i mentioned it in

00:35:46,480 --> 00:35:52,480
during been answering

00:35:49,839 --> 00:35:55,359
one of the questions yeah it was a it

00:35:52,480 --> 00:35:55,359
was a great talk

00:35:55,520 --> 00:36:02,000
they also built there there

00:35:59,680 --> 00:36:02,960
they also use github ci to produce

00:36:02,000 --> 00:36:05,520
builds

00:36:02,960 --> 00:36:06,480
it was for me it was interesting to

00:36:05,520 --> 00:36:09,599
learn

00:36:06,480 --> 00:36:12,640
how to do the signing there and keep the

00:36:09,599 --> 00:36:15,520
certificates in private

00:36:12,640 --> 00:36:16,720
that's that was a useful thing to know

00:36:15,520 --> 00:36:20,720
uh

00:36:16,720 --> 00:36:22,800
still designing uh because it's done by

00:36:20,720 --> 00:36:24,800
federal engineering i probably won't

00:36:22,800 --> 00:36:27,680
have access to certificates

00:36:24,800 --> 00:36:28,400
but it might be useful in in future if

00:36:27,680 --> 00:36:31,440
you decide

00:36:28,400 --> 00:36:34,240
to somehow automate

00:36:31,440 --> 00:36:34,880
the bills and the signing because right

00:36:34,240 --> 00:36:37,920
now

00:36:34,880 --> 00:36:39,119
i have to open ticket for them and ask

00:36:37,920 --> 00:36:49,119
them to do the signing

00:36:39,119 --> 00:36:49,119

YouTube URL: https://www.youtube.com/watch?v=Nemy4qGUV-s


