Title: Building & distributing Linux desktop apps using Electron
Publication date: 2021-05-30
Playlist: Linux App Summit 2021 Talks
Description: 
	I'll walk you through the challenges I faced while building and distributing app for Linux using Electron. At the end of the talk, you'll learn the common gotchas and their solutions in distributing the app, understanding user experience without compromising the user privacy, managing different versions, managing automatic updates, reaching your target audience, ensuring security and a great user experience on Linux platforms. This knowledge would have saved me months of pain and tears.

Author(s) Bio

Pradeep is an experienced developer(10yrs) from India. He founded Invide(https://invidelabs.com/developer.html) (a remote developers' community), produced popular Git Commit Show(http://gitcommit.show/) and the created Developer Diary(http://flow.invidelabs.com/). He teaches developers via open source projects, #OpenSourceDiscovery(http://opensourcedisc.substack.com/) newsletter and online training.



Twitter and/or Mastodon Handle

https://www.linkedin.com/in/pradeepkumarsharma
https://twitter.com/pradeep_io
https://github.com/gitcommitshow
https://pradeep-io.medium.com/


Q&A


Note from Pradeep: I'd love to answer more questions. Don't forget to checkout the presentation pdf. I'm reachable at 
https://www.linkedin.com/in/pradeepkumarsharma/
https://twitter.com/pradeep_io

1. Does electron-builder support flatpak? Seems there is a guide here but it doesnt use electron builder directly: https://docs.flatpak.org/en/latest/electron.html
Response: It does not support flatpak out of the box. But snap is supported out of the box.

2. Do electron apps work on ARM platform?
Response: Yes.

3. Auto-updates would work through the snap store for snaps too though no?
Response: Yes. The update will come from snap, if you have any of your own auto-update code, you should disable it before publishint to snap.

4. One criticism Electron apps receive is their inconsistent looks when compared to other applications. What frameworks or guidelines would you suggest for making software feel more native?
Response: Other solutions are Qt and Gnome Extensions. Flutter might become good enough in a year or so (given it's development speed).

5. Are you aware of AppImage Launcher (One-click integration for AppImage) , and if yes, would you suggest it for users? ( https://github.com/TheAssassin/AppImageLauncher )
Response: I have no idea about it. Thanks for sharing.

6. What CI pipeline would you recommend for automatic packaging various distros and architectures.
Response: I do it manually at the moment, have a bash script to make my life easier. It was a big task for me to setup CI given the nature of the work but I can see it could be good to use a CI - in my research I zeroed in on Github Actions. But saying again, I haven't used it.
Captions: 
	00:00:01,680 --> 00:00:07,359
okay great so welcome everyone

00:00:03,919 --> 00:00:08,320
thanks a lot for joining in so today we

00:00:07,359 --> 00:00:11,759
are going to talk

00:00:08,320 --> 00:00:13,200
about building and distributing linux

00:00:11,759 --> 00:00:15,519
desktop app

00:00:13,200 --> 00:00:18,800
and we are going to talk in the context

00:00:15,519 --> 00:00:18,800
of electron framework

00:00:22,640 --> 00:00:26,720
so before we move forward a quick intro

00:00:25,920 --> 00:00:29,920
about me

00:00:26,720 --> 00:00:32,079
i created a desktop app called developer

00:00:29,920 --> 00:00:33,200
id which is a privacy focused note

00:00:32,079 --> 00:00:37,440
taking app

00:00:33,200 --> 00:00:40,160
available on linux on windows and mac

00:00:37,440 --> 00:00:41,280
i founded invite which is a community of

00:00:40,160 --> 00:00:44,399
remote developers

00:00:41,280 --> 00:00:45,520
15 000 developers are member of this

00:00:44,399 --> 00:00:48,640
community

00:00:45,520 --> 00:00:51,280
it was started in 2016. i'm also

00:00:48,640 --> 00:00:53,280
a producer of a developer conference

00:00:51,280 --> 00:00:55,440
gate commit show which is a completely

00:00:53,280 --> 00:00:57,280
online developer conference conference

00:00:55,440 --> 00:01:01,600
and completely non-profit

00:00:57,280 --> 00:01:01,600
started in 2019

00:01:01,920 --> 00:01:05,680
i also contribute to some of the open

00:01:04,559 --> 00:01:09,360
source projects

00:01:05,680 --> 00:01:12,080
and i keep building some stuff

00:01:09,360 --> 00:01:14,400
to teach people about full stack

00:01:12,080 --> 00:01:15,759
development or related to security and

00:01:14,400 --> 00:01:19,520
cryptography

00:01:15,759 --> 00:01:22,240
and i have trained some students as well

00:01:19,520 --> 00:01:23,360
and i love to play chess so if you also

00:01:22,240 --> 00:01:26,880
love to play chess

00:01:23,360 --> 00:01:30,000
do ping me after this talk

00:01:26,880 --> 00:01:33,119
so this was a quick intro about me

00:01:30,000 --> 00:01:33,840
the relevant experience that i have for

00:01:33,119 --> 00:01:37,680
this talk

00:01:33,840 --> 00:01:39,759
is building developer diary

00:01:37,680 --> 00:01:42,640
so developer id is a privacy focused

00:01:39,759 --> 00:01:42,640
note taking app

00:01:42,720 --> 00:01:48,159
and i hope everyone can hear me

00:01:49,920 --> 00:01:56,799
okay cool so developer diary is a

00:01:53,520 --> 00:02:00,640
privacy focused app for note taking

00:01:56,799 --> 00:02:02,240
and especially made for developers so

00:02:00,640 --> 00:02:04,479
if you have any thoughts in your mind

00:02:02,240 --> 00:02:06,320
any solution that you are planning for

00:02:04,479 --> 00:02:09,840
your problem you note down

00:02:06,320 --> 00:02:12,080
quickly using a shortcut in this app

00:02:09,840 --> 00:02:13,760
and when you are done with your work at

00:02:12,080 --> 00:02:16,800
the end of the day you note down

00:02:13,760 --> 00:02:17,200
things what you did in your day and then

00:02:16,800 --> 00:02:20,800
just

00:02:17,200 --> 00:02:23,360
move on with your personal life

00:02:20,800 --> 00:02:26,480
and close whatever work that you have

00:02:23,360 --> 00:02:26,480
for your professional work

00:02:27,599 --> 00:02:33,920
and this app is available on

00:02:30,640 --> 00:02:37,280
linux mac and windows i created this

00:02:33,920 --> 00:02:40,720
using a framework called electro

00:02:37,280 --> 00:02:43,840
and i have released more than 30

00:02:40,720 --> 00:02:46,720
releases for this and also

00:02:43,840 --> 00:02:47,360
the product which was predecessor of

00:02:46,720 --> 00:02:50,560
this

00:02:47,360 --> 00:02:53,840
app and i have i started

00:02:50,560 --> 00:02:56,080
uh working on electron in working on

00:02:53,840 --> 00:02:59,200
electron apps in 2016

00:02:56,080 --> 00:03:00,879
so i have seen i have built apps using

00:02:59,200 --> 00:03:03,280
electron one point x

00:03:00,879 --> 00:03:05,280
to what current version we have in

00:03:03,280 --> 00:03:07,360
electron 13.x

00:03:05,280 --> 00:03:08,959
so that's a long journey and in this

00:03:07,360 --> 00:03:09,920
long journey i have faced many

00:03:08,959 --> 00:03:12,800
challenges

00:03:09,920 --> 00:03:13,760
related to building the app as well as

00:03:12,800 --> 00:03:17,680
maintaining the

00:03:13,760 --> 00:03:21,120
app so i have some experience which

00:03:17,680 --> 00:03:22,400
can be relevant for you to speed up your

00:03:21,120 --> 00:03:26,560
development

00:03:22,400 --> 00:03:33,040
and to avoid the problems avoid

00:03:26,560 --> 00:03:36,159
the challenges that i faced so before we

00:03:33,040 --> 00:03:36,959
move uh dive into this talk i want to

00:03:36,159 --> 00:03:40,799
ask

00:03:36,959 --> 00:03:42,799
this question to every one of you

00:03:40,799 --> 00:03:44,640
so the first option is have you used

00:03:42,799 --> 00:03:46,879
electron before

00:03:44,640 --> 00:03:48,959
so you will see the poll option if you

00:03:46,879 --> 00:03:50,640
can answer yes or no

00:03:48,959 --> 00:03:53,120
that will give me a better idea how to

00:03:50,640 --> 00:03:53,120
proceed

00:03:59,280 --> 00:04:05,200
okay okay people are typing in

00:04:02,560 --> 00:04:06,959
in chat you can also i would prefer if

00:04:05,200 --> 00:04:09,439
you can share

00:04:06,959 --> 00:04:15,840
via this poll option where you're asked

00:04:09,439 --> 00:04:15,840
yes or no

00:04:18,560 --> 00:04:23,280
okay so right after you have answered

00:04:21,680 --> 00:04:26,320
this question i would also

00:04:23,280 --> 00:04:29,520
want to know if you have which

00:04:26,320 --> 00:04:31,280
linux distro have you used in last two

00:04:29,520 --> 00:04:33,360
years

00:04:31,280 --> 00:04:35,600
and you can share with me uh is it

00:04:33,360 --> 00:04:38,639
debian debian is it fedora

00:04:35,600 --> 00:04:40,840
or linux opensuse or anything else if it

00:04:38,639 --> 00:04:43,840
is something else please share that in

00:04:40,840 --> 00:04:43,840
chat

00:04:45,759 --> 00:04:53,600
okay so 56 percent users have used

00:04:49,520 --> 00:04:57,840
electron already cool

00:04:53,600 --> 00:04:57,840
and the second question is on the screen

00:04:58,880 --> 00:05:01,199
okay

00:05:05,360 --> 00:05:10,560
okay cool very good so i think

00:05:08,880 --> 00:05:12,240
half of the people almost half of the

00:05:10,560 --> 00:05:12,720
people have used electron and half of

00:05:12,240 --> 00:05:17,360
them

00:05:12,720 --> 00:05:20,479
haven't used it so what i will do

00:05:17,360 --> 00:05:25,600
i will move on to

00:05:20,479 --> 00:05:28,880
the next slide alice can you enable

00:05:25,600 --> 00:05:31,039
okay yeah cool so

00:05:28,880 --> 00:05:32,639
debian is what we have received the

00:05:31,039 --> 00:05:35,840
results debian 42

00:05:32,639 --> 00:05:39,360
people have used debian and then uh

00:05:35,840 --> 00:05:42,080
on second we have open source and fedora

00:05:39,360 --> 00:05:43,120
and fedora and or our linux okay great

00:05:42,080 --> 00:05:46,400
thanks a lot for

00:05:43,120 --> 00:05:48,160
sharing your answers so because

00:05:46,400 --> 00:05:50,320
uh half of the people haven't gone

00:05:48,160 --> 00:05:52,639
through uh don't know about electron i

00:05:50,320 --> 00:05:55,199
will introduce electron and

00:05:52,639 --> 00:05:55,840
even if you have used electron before it

00:05:55,199 --> 00:05:58,319
the kind of

00:05:55,840 --> 00:06:00,240
refresher for you uh and i won't spend

00:05:58,319 --> 00:06:02,720
much time here

00:06:00,240 --> 00:06:03,600
so let's quickly uh jump into the

00:06:02,720 --> 00:06:06,720
introduction of

00:06:03,600 --> 00:06:08,720
electron what is electron

00:06:06,720 --> 00:06:10,639
it's a framework to build cross cross

00:06:08,720 --> 00:06:14,319
platform desktop

00:06:10,639 --> 00:06:15,280
applications and so you can build

00:06:14,319 --> 00:06:18,720
application

00:06:15,280 --> 00:06:20,160
for linux for windows for mac and also

00:06:18,720 --> 00:06:23,199
on linux you can build

00:06:20,160 --> 00:06:27,039
for all the distribution all the

00:06:23,199 --> 00:06:30,240
distribution that we have for linux now

00:06:27,039 --> 00:06:33,280
what do we have under electron

00:06:30,240 --> 00:06:37,199
is chromium rendering engine and

00:06:33,280 --> 00:06:41,440
node.js runtime um those two things

00:06:37,199 --> 00:06:43,840
provide us the whole experience of

00:06:41,440 --> 00:06:45,759
building cross-platform desktop

00:06:43,840 --> 00:06:49,680
application

00:06:45,759 --> 00:06:50,160
okay now as a developer when you are

00:06:49,680 --> 00:06:52,880
using

00:06:50,160 --> 00:06:55,039
electron you can code using web

00:06:52,880 --> 00:06:58,400
technologies such as javascript

00:06:55,039 --> 00:06:58,720
html and css and that's it that's all

00:06:58,400 --> 00:07:02,000
you

00:06:58,720 --> 00:07:04,639
uh need to know and with

00:07:02,000 --> 00:07:05,280
this knowledge you will be able to build

00:07:04,639 --> 00:07:07,199
apps

00:07:05,280 --> 00:07:08,400
and you will be able to build apps for

00:07:07,199 --> 00:07:12,080
all the linux

00:07:08,400 --> 00:07:12,080
distribution platforms

00:07:12,240 --> 00:07:18,880
now let me show you

00:07:15,680 --> 00:07:23,120
a quick glimpse of how does

00:07:18,880 --> 00:07:26,240
a hello world in electron looks like

00:07:23,120 --> 00:07:30,080
so look at the first file yellow file

00:07:26,240 --> 00:07:32,400
so here you are importing

00:07:30,080 --> 00:07:33,680
and browser window from this electron

00:07:32,400 --> 00:07:36,960
framework

00:07:33,680 --> 00:07:37,680
and then you are saying when our app is

00:07:36,960 --> 00:07:40,240
ready

00:07:37,680 --> 00:07:41,919
create a window a window that you see

00:07:40,240 --> 00:07:43,440
which you can interact with this gui

00:07:41,919 --> 00:07:46,800
window

00:07:43,440 --> 00:07:49,280
and then what does create window means

00:07:46,800 --> 00:07:51,199
you can see that it means creating it is

00:07:49,280 --> 00:07:52,080
creating a browser window accept some

00:07:51,199 --> 00:07:56,639
options

00:07:52,080 --> 00:07:59,599
and then it says to load a html file

00:07:56,639 --> 00:07:59,919
right and how does html5 looks likes we

00:07:59,599 --> 00:08:02,639
are

00:07:59,919 --> 00:08:04,400
just saying hello world that's it and

00:08:02,639 --> 00:08:06,479
keeping the background white

00:08:04,400 --> 00:08:07,680
and that's it that's your hello world

00:08:06,479 --> 00:08:10,879
that's your first

00:08:07,680 --> 00:08:13,680
application using electron it is

00:08:10,879 --> 00:08:14,560
that simple if and you want to build

00:08:13,680 --> 00:08:17,520
more pages

00:08:14,560 --> 00:08:18,720
you can you know html you just put your

00:08:17,520 --> 00:08:21,919
stuff there

00:08:18,720 --> 00:08:24,800
and there you have a ui ready for you

00:08:21,919 --> 00:08:26,160
which will be available in all the uh

00:08:24,800 --> 00:08:29,759
distributions of your

00:08:26,160 --> 00:08:34,320
linux so that is the power of electron

00:08:29,759 --> 00:08:37,919
using simple javascript html and css

00:08:34,320 --> 00:08:40,959
you can create uh wonderful

00:08:37,919 --> 00:08:44,800
applications and you do that quite fast

00:08:40,959 --> 00:08:47,279
so your development time is reduced

00:08:44,800 --> 00:08:49,760
you can get support from many people who

00:08:47,279 --> 00:08:51,360
know web technology which is

00:08:49,760 --> 00:08:53,279
many people you don't need any

00:08:51,360 --> 00:08:55,839
specialized skill for that

00:08:53,279 --> 00:08:56,720
and learning electron js is also not

00:08:55,839 --> 00:08:58,519
hard

00:08:56,720 --> 00:09:00,080
you can simply go to this electron

00:08:58,519 --> 00:09:02,800
js.org website

00:09:00,080 --> 00:09:04,160
their main website and you will get to

00:09:02,800 --> 00:09:08,880
know how to build app

00:09:04,160 --> 00:09:10,959
their documentation is amazing

00:09:08,880 --> 00:09:12,080
and that i would suggest is a good

00:09:10,959 --> 00:09:16,320
starting point

00:09:12,080 --> 00:09:18,080
to learn about electron so

00:09:16,320 --> 00:09:20,480
you will learn about that and we won't

00:09:18,080 --> 00:09:22,560
go into uh detail

00:09:20,480 --> 00:09:24,080
but you have a basic idea how to build

00:09:22,560 --> 00:09:26,080
an electron app

00:09:24,080 --> 00:09:27,680
now we are moving to the second part of

00:09:26,080 --> 00:09:30,880
this

00:09:27,680 --> 00:09:34,320
uh talk where

00:09:30,880 --> 00:09:36,480
we talk about now that you have coded

00:09:34,320 --> 00:09:38,720
your electron application

00:09:36,480 --> 00:09:40,399
how do you package that how do you

00:09:38,720 --> 00:09:41,360
package that as a file which can be

00:09:40,399 --> 00:09:44,240
installed

00:09:41,360 --> 00:09:44,959
like a dab package or maybe a rpm

00:09:44,240 --> 00:09:49,040
package

00:09:44,959 --> 00:09:52,240
or any kind of file syst file that your

00:09:49,040 --> 00:09:55,360
linux distro supports

00:09:52,240 --> 00:09:56,560
so how can you package this app this is

00:09:55,360 --> 00:09:59,839
what we are going to discuss

00:09:56,560 --> 00:10:02,079
in this slide and

00:09:59,839 --> 00:10:04,000
the best there are multiple ways to do

00:10:02,079 --> 00:10:07,440
this packaging your electron

00:10:04,000 --> 00:10:09,760
app but the most reliable way that i

00:10:07,440 --> 00:10:12,959
have found which works for me every time

00:10:09,760 --> 00:10:16,399
is electron builder electron builder is

00:10:12,959 --> 00:10:19,680
another library another

00:10:16,399 --> 00:10:20,800
library which is built for electron

00:10:19,680 --> 00:10:23,360
applications

00:10:20,800 --> 00:10:24,399
using that you can package your

00:10:23,360 --> 00:10:27,600
applications

00:10:24,399 --> 00:10:30,399
into your desired format uh

00:10:27,600 --> 00:10:32,079
desired installers or desired

00:10:30,399 --> 00:10:35,360
distribution file formats

00:10:32,079 --> 00:10:38,399
that you want to and

00:10:35,360 --> 00:10:41,519
you can do that on your

00:10:38,399 --> 00:10:44,880
uh system itself if you uh

00:10:41,519 --> 00:10:47,040
you choose one linux platform let's say

00:10:44,880 --> 00:10:47,920
people said ubuntu is one that they are

00:10:47,040 --> 00:10:51,120
using

00:10:47,920 --> 00:10:51,440
most of us then you can build package

00:10:51,120 --> 00:10:54,480
for

00:10:51,440 --> 00:10:57,920
all other uh linux distributions like

00:10:54,480 --> 00:11:01,040
you can choose r cleaners open source or

00:10:57,920 --> 00:11:04,480
freebsd anything and you will be able to

00:11:01,040 --> 00:11:08,079
build that from your own

00:11:04,480 --> 00:11:10,640
linux uh system

00:11:08,079 --> 00:11:11,279
now how does it look like when you pack

00:11:10,640 --> 00:11:14,480
your zap

00:11:11,279 --> 00:11:16,440
what code do you need to run and

00:11:14,480 --> 00:11:18,320
this is what i'm showing here so

00:11:16,440 --> 00:11:21,680
package.json as you might

00:11:18,320 --> 00:11:25,360
already know have already

00:11:21,680 --> 00:11:28,640
knowledge of is a dependency

00:11:25,360 --> 00:11:29,519
management file for node related

00:11:28,640 --> 00:11:32,320
application

00:11:29,519 --> 00:11:34,399
and this is exactly what electron uses

00:11:32,320 --> 00:11:37,680
to manage its dependencies

00:11:34,399 --> 00:11:40,560
and there you define simply this

00:11:37,680 --> 00:11:43,839
dependency electron builder

00:11:40,560 --> 00:11:47,200
you define the version

00:11:43,839 --> 00:11:50,959
and then you define a key value pair for

00:11:47,200 --> 00:11:53,360
build now this key build

00:11:50,959 --> 00:11:56,000
will be used for configuring your

00:11:53,360 --> 00:11:59,120
electron builder

00:11:56,000 --> 00:11:59,839
and let me quickly uh give you what

00:11:59,120 --> 00:12:03,120
options

00:11:59,839 --> 00:12:06,160
do you want to have to pay pack your

00:12:03,120 --> 00:12:10,320
linux desktop application

00:12:06,160 --> 00:12:14,160
so first thing uh is

00:12:10,320 --> 00:12:16,079
sr uh packaging so sr is a

00:12:14,160 --> 00:12:18,399
you can say kind of a packaging or a

00:12:16,079 --> 00:12:21,440
compression format that you use

00:12:18,399 --> 00:12:21,760
and you can do without sr format as well

00:12:21,440 --> 00:12:24,800
but

00:12:21,760 --> 00:12:27,839
in my experience i have found this

00:12:24,800 --> 00:12:30,560
sr format is more suitable and

00:12:27,839 --> 00:12:31,760
you won't run into any kind of problem

00:12:30,560 --> 00:12:34,560
when you are using sr

00:12:31,760 --> 00:12:35,040
if you are not using sr then probably

00:12:34,560 --> 00:12:38,959
you will

00:12:35,040 --> 00:12:42,240
run into some problems which i had but

00:12:38,959 --> 00:12:46,079
when i used sr uh format then i was

00:12:42,240 --> 00:12:49,279
uh i was not running into any problems

00:12:46,079 --> 00:12:51,120
was to define an app id for

00:12:49,279 --> 00:12:53,440
whatever distribution that you are

00:12:51,120 --> 00:12:56,880
distributing to they might need this

00:12:53,440 --> 00:12:59,680
id it's an optional optional field

00:12:56,880 --> 00:13:00,000
you don't need you don't absolutely need

00:12:59,680 --> 00:13:02,160
it

00:13:00,000 --> 00:13:03,760
but defining it i have seen is it's good

00:13:02,160 --> 00:13:07,040
good to have

00:13:03,760 --> 00:13:09,519
then the most important uh key uh

00:13:07,040 --> 00:13:11,920
thing that you want to mention in this

00:13:09,519 --> 00:13:15,760
configuration is

00:13:11,920 --> 00:13:19,760
this linux key which is an object

00:13:15,760 --> 00:13:23,040
in that object you define

00:13:19,760 --> 00:13:25,279
linux first

00:13:23,040 --> 00:13:27,279
so linux when i'm saying linux i'm

00:13:25,279 --> 00:13:30,639
telling this electron builder that

00:13:27,279 --> 00:13:34,959
build or pack this app for linux

00:13:30,639 --> 00:13:38,399
platform you could have its

00:13:34,959 --> 00:13:39,519
and for mac os mac but we are not

00:13:38,399 --> 00:13:42,320
talking about them so

00:13:39,519 --> 00:13:43,839
for now let's just focus on linux and

00:13:42,320 --> 00:13:47,199
inside linux you want to

00:13:43,839 --> 00:13:50,639
specify what target do you want to

00:13:47,199 --> 00:13:53,839
pack this uh

00:13:50,639 --> 00:13:57,760
this app for okay

00:13:53,839 --> 00:13:59,519
and you can choose

00:13:57,760 --> 00:14:00,560
any of these targets that i have shared

00:13:59,519 --> 00:14:02,160
here you will find all this

00:14:00,560 --> 00:14:05,360
documentation on

00:14:02,160 --> 00:14:07,279
electron builders documentation page but

00:14:05,360 --> 00:14:09,600
just to give you an idea what kind of

00:14:07,279 --> 00:14:13,199
package targets are supported

00:14:09,600 --> 00:14:14,000
it's app image snap dab rpm freebsd

00:14:13,199 --> 00:14:17,199
pacman

00:14:14,000 --> 00:14:19,839
pfip apk and many more

00:14:17,199 --> 00:14:21,279
so you get an idea that we this is

00:14:19,839 --> 00:14:24,160
supporting

00:14:21,279 --> 00:14:26,240
almost all the linux distributions that

00:14:24,160 --> 00:14:29,040
we have

00:14:26,240 --> 00:14:32,160
so you can build you can create that

00:14:29,040 --> 00:14:35,839
file which you will need to install

00:14:32,160 --> 00:14:39,040
your app in different

00:14:35,839 --> 00:14:40,720
different linux distributions okay so

00:14:39,040 --> 00:14:44,320
that was about target

00:14:40,720 --> 00:14:46,160
you can also choose the architecture

00:14:44,320 --> 00:14:47,600
do you want to build for 64-bit or

00:14:46,160 --> 00:14:49,600
32-bit

00:14:47,600 --> 00:14:50,880
for now we are not going into that

00:14:49,600 --> 00:14:54,480
because usually we

00:14:50,880 --> 00:14:56,560
want to build for 64-bit that's what

00:14:54,480 --> 00:14:59,120
most currently so most systems are

00:14:56,560 --> 00:15:00,959
currently but you have option to build

00:14:59,120 --> 00:15:03,279
for older versions for older

00:15:00,959 --> 00:15:06,079
architectures as well

00:15:03,279 --> 00:15:06,800
and you can define all of them in one go

00:15:06,079 --> 00:15:09,279
or like

00:15:06,800 --> 00:15:11,120
build me a package for app image build

00:15:09,279 --> 00:15:12,240
me a package for snap as well build me a

00:15:11,120 --> 00:15:14,720
package

00:15:12,240 --> 00:15:15,920
dab as well build me rpm and you can do

00:15:14,720 --> 00:15:19,120
that all in one

00:15:15,920 --> 00:15:22,399
one go so this

00:15:19,120 --> 00:15:25,839
is about the target that you want to

00:15:22,399 --> 00:15:26,240
export your app okay then second thing

00:15:25,839 --> 00:15:29,360
is

00:15:26,240 --> 00:15:32,240
to keep in mind icons so

00:15:29,360 --> 00:15:34,079
you want to define icon uh you put it in

00:15:32,240 --> 00:15:35,440
a folder and you define that folder

00:15:34,079 --> 00:15:37,839
named icon

00:15:35,440 --> 00:15:38,480
and that's where electron builder will

00:15:37,839 --> 00:15:41,519
pick

00:15:38,480 --> 00:15:42,399
your icons for your app and if you

00:15:41,519 --> 00:15:45,759
missed to do that

00:15:42,399 --> 00:15:48,639
then your app will be shown as a default

00:15:45,759 --> 00:15:49,839
electron logo icon so you don't want to

00:15:48,639 --> 00:15:52,079
do that

00:15:49,839 --> 00:15:53,040
and which is why you define icons and

00:15:52,079 --> 00:15:56,959
you define that in

00:15:53,040 --> 00:15:59,360
multiple uh sizes so

00:15:56,959 --> 00:16:00,880
and these configurations what sizes are

00:15:59,360 --> 00:16:03,440
required you can find that

00:16:00,880 --> 00:16:04,079
in electron builder documentation but

00:16:03,440 --> 00:16:06,639
for now

00:16:04,079 --> 00:16:08,320
this is good enough even if you put just

00:16:06,639 --> 00:16:11,839
one png file

00:16:08,320 --> 00:16:14,000
you are good to go now

00:16:11,839 --> 00:16:16,639
another thing you may want to describe

00:16:14,000 --> 00:16:18,240
is the category of your application so

00:16:16,639 --> 00:16:19,920
because developer id was for

00:16:18,240 --> 00:16:23,279
productivity so i

00:16:19,920 --> 00:16:26,959
defined category as productivity

00:16:23,279 --> 00:16:28,480
so that can be used for the distribution

00:16:26,959 --> 00:16:29,279
platform that you want to distribute to

00:16:28,480 --> 00:16:31,680
they might need

00:16:29,279 --> 00:16:32,480
this kind of information that's optional

00:16:31,680 --> 00:16:35,600
you

00:16:32,480 --> 00:16:39,120
may or may not skip this

00:16:35,600 --> 00:16:41,440
as you as you wish okay so this was

00:16:39,120 --> 00:16:43,120
about this is how it the configuration

00:16:41,440 --> 00:16:46,320
for electron builder looks like

00:16:43,120 --> 00:16:49,440
and how you pack what command do you run

00:16:46,320 --> 00:16:50,160
to pack this app now it's simply

00:16:49,440 --> 00:16:53,519
electron

00:16:50,160 --> 00:16:54,800
dash builder so make sure that you have

00:16:53,519 --> 00:16:55,519
first of all make sure that you have

00:16:54,800 --> 00:16:58,320
installed

00:16:55,519 --> 00:16:59,680
this dependency electron builder and

00:16:58,320 --> 00:17:04,559
then you can

00:16:59,680 --> 00:17:06,400
run npm install so your electron builder

00:17:04,559 --> 00:17:09,199
this library is installed and then you

00:17:06,400 --> 00:17:11,839
can simply run electron builder

00:17:09,199 --> 00:17:14,000
uh this way and one thing i like to do

00:17:11,839 --> 00:17:15,120
is i like to create a script in package

00:17:14,000 --> 00:17:18,319
and which i

00:17:15,120 --> 00:17:19,839
name build and there i mention this

00:17:18,319 --> 00:17:21,839
command electron builder

00:17:19,839 --> 00:17:24,160
so every time i don't need to write this

00:17:21,839 --> 00:17:26,720
rather i write npm run build

00:17:24,160 --> 00:17:28,319
you might know these tricks already so

00:17:26,720 --> 00:17:31,520
not going uh there

00:17:28,319 --> 00:17:32,480
but it is as simple as this you define

00:17:31,520 --> 00:17:34,720
linux

00:17:32,480 --> 00:17:35,760
object you define the target and couple

00:17:34,720 --> 00:17:37,360
of more things

00:17:35,760 --> 00:17:39,280
and you run this command electron

00:17:37,360 --> 00:17:42,400
builder and that's it your

00:17:39,280 --> 00:17:44,799
app will be packaged one thing i

00:17:42,400 --> 00:17:46,000
would like to reiterate here is that you

00:17:44,799 --> 00:17:48,160
can build package

00:17:46,000 --> 00:17:49,600
for all distribution on a single

00:17:48,160 --> 00:17:52,240
platform or for

00:17:49,600 --> 00:17:53,760
linux if you are building up for linux

00:17:52,240 --> 00:17:55,280
packaging app for linux i would

00:17:53,760 --> 00:17:57,520
recommend you to do that

00:17:55,280 --> 00:17:58,320
on linux only whichever platform you

00:17:57,520 --> 00:18:01,760
choose

00:17:58,320 --> 00:18:03,919
i chose ubuntu and i built all the

00:18:01,760 --> 00:18:05,919
packages from ubuntu only

00:18:03,919 --> 00:18:07,440
but don't try to do this from windows or

00:18:05,919 --> 00:18:09,760
from mac os

00:18:07,440 --> 00:18:10,720
in those cases you might run into some

00:18:09,760 --> 00:18:14,320
errors

00:18:10,720 --> 00:18:16,559
and mentioning this that you can build

00:18:14,320 --> 00:18:18,799
all the distributions from one linux

00:18:16,559 --> 00:18:20,720
distribution is important because

00:18:18,799 --> 00:18:22,240
when you try to do this for other

00:18:20,720 --> 00:18:25,840
platforms like

00:18:22,240 --> 00:18:28,320
building windows app from a linux system

00:18:25,840 --> 00:18:29,520
or building mac os from linux system you

00:18:28,320 --> 00:18:31,679
will run into challenges

00:18:29,520 --> 00:18:32,880
lots of challenges so the best way

00:18:31,679 --> 00:18:36,240
usually has been

00:18:32,880 --> 00:18:39,280
to build uh in the same system

00:18:36,240 --> 00:18:41,440
where for which you want to distribute

00:18:39,280 --> 00:18:43,520
but in case of linux you can choose any

00:18:41,440 --> 00:18:45,200
of the platform i have built in multiple

00:18:43,520 --> 00:18:48,160
formats like rpm

00:18:45,200 --> 00:18:48,960
pacman freebsd and i never run into any

00:18:48,160 --> 00:18:52,080
problems

00:18:48,960 --> 00:18:54,559
except apk i was not able to make

00:18:52,080 --> 00:18:55,200
apk work so that is something you might

00:18:54,559 --> 00:18:58,240
want to

00:18:55,200 --> 00:19:00,799
keep in your mind

00:18:58,240 --> 00:19:02,480
so that was about packaging the app now

00:19:00,799 --> 00:19:05,360
you have this file

00:19:02,480 --> 00:19:07,520
which can be installed if you have dab

00:19:05,360 --> 00:19:08,480
you can install that using dpkg if you

00:19:07,520 --> 00:19:11,760
have rpm

00:19:08,480 --> 00:19:16,000
you can install it on fedora using rpm

00:19:11,760 --> 00:19:19,120
install command and so on

00:19:16,000 --> 00:19:20,080
so how do you distribute this with your

00:19:19,120 --> 00:19:21,600
target users

00:19:20,080 --> 00:19:23,760
so the first thing is just share the

00:19:21,600 --> 00:19:24,880
file that's it so that's a direct

00:19:23,760 --> 00:19:27,760
distribution

00:19:24,880 --> 00:19:28,640
put up a website and then list your uh

00:19:27,760 --> 00:19:32,160
upload your

00:19:28,640 --> 00:19:33,840
uh this file or this packaged file

00:19:32,160 --> 00:19:36,160
there and ask people to download from

00:19:33,840 --> 00:19:39,200
there they will install from there

00:19:36,160 --> 00:19:41,200
so that is the first uh

00:19:39,200 --> 00:19:42,559
that's the first distribution channel

00:19:41,200 --> 00:19:45,440
that i

00:19:42,559 --> 00:19:45,840
then i see usually people will go for

00:19:45,440 --> 00:19:49,600
this

00:19:45,840 --> 00:19:52,080
uh distribution uh first and foremost

00:19:49,600 --> 00:19:54,000
benefit of this uh distribution channel

00:19:52,080 --> 00:19:55,760
is that you have control

00:19:54,000 --> 00:19:57,280
you have all the complete control that

00:19:55,760 --> 00:19:58,480
how you want to show and you have

00:19:57,280 --> 00:20:02,320
analytics

00:19:58,480 --> 00:20:03,120
and you know a lot more thing than you

00:20:02,320 --> 00:20:07,200
would

00:20:03,120 --> 00:20:10,640
if you had distributed on other channels

00:20:07,200 --> 00:20:11,120
now another an important important part

00:20:10,640 --> 00:20:13,840
of

00:20:11,120 --> 00:20:15,280
distributing is not just the first time

00:20:13,840 --> 00:20:18,240
you share that file

00:20:15,280 --> 00:20:19,039
what do you do after you release a new

00:20:18,240 --> 00:20:21,200
version

00:20:19,039 --> 00:20:22,400
so you your users some of the users have

00:20:21,200 --> 00:20:24,320
downloaded

00:20:22,400 --> 00:20:26,240
the your application they started using

00:20:24,320 --> 00:20:29,600
it now you are shipping

00:20:26,240 --> 00:20:30,400
uh you ship you're shipping 1.1 or 1.12

00:20:29,600 --> 00:20:33,200
or something

00:20:30,400 --> 00:20:34,559
you are sending an update for security

00:20:33,200 --> 00:20:37,280
or for ui

00:20:34,559 --> 00:20:38,080
or for new features now how do you uh

00:20:37,280 --> 00:20:41,760
get

00:20:38,080 --> 00:20:44,799
people to install your new app

00:20:41,760 --> 00:20:46,159
so getting every uh communicating with

00:20:44,799 --> 00:20:48,640
everyone that's a

00:20:46,159 --> 00:20:49,520
long challenge that's a challenge and

00:20:48,640 --> 00:20:51,760
specifically

00:20:49,520 --> 00:20:53,679
even if you have their contact details

00:20:51,760 --> 00:20:55,200
plea you won't have their contact

00:20:53,679 --> 00:20:55,919
details they will simply download the

00:20:55,200 --> 00:20:58,159
file

00:20:55,919 --> 00:20:59,919
and then they will install and that's it

00:20:58,159 --> 00:21:01,440
unless you have some signup mechanism on

00:20:59,919 --> 00:21:04,720
and so

00:21:01,440 --> 00:21:07,840
but uh having said that

00:21:04,720 --> 00:21:08,720
uh you want to enable auto updates so

00:21:07,840 --> 00:21:11,200
people who have

00:21:08,720 --> 00:21:12,159
already installed your applications can

00:21:11,200 --> 00:21:14,720
they get

00:21:12,159 --> 00:21:15,280
updates automatically so when they are

00:21:14,720 --> 00:21:17,520
using

00:21:15,280 --> 00:21:18,799
and then they will get notification that

00:21:17,520 --> 00:21:21,840
there is a new update

00:21:18,799 --> 00:21:24,240
would you like to install it

00:21:21,840 --> 00:21:27,280
and similar to what you might have seen

00:21:24,240 --> 00:21:31,120
if you have used visual code studio

00:21:27,280 --> 00:21:32,159
um then you will see a notification that

00:21:31,120 --> 00:21:34,880
there is a new

00:21:32,159 --> 00:21:36,880
visual code studio version is available

00:21:34,880 --> 00:21:37,679
and when you click it you install it and

00:21:36,880 --> 00:21:40,960
then it

00:21:37,679 --> 00:21:43,440
works so

00:21:40,960 --> 00:21:44,000
this also reminds me that visual studio

00:21:43,440 --> 00:21:47,360
code

00:21:44,000 --> 00:21:51,919
is also built using electron

00:21:47,360 --> 00:21:55,280
so that is one of one of the best

00:21:51,919 --> 00:21:58,640
example that i can give use of electron

00:21:55,280 --> 00:22:02,159
to build a desktop application

00:21:58,640 --> 00:22:03,760
oh yes as someone said visual studio

00:22:02,159 --> 00:22:07,919
code yes

00:22:03,760 --> 00:22:11,120
so now uh enabling auto update

00:22:07,919 --> 00:22:14,400
so one important thing to uh so

00:22:11,120 --> 00:22:17,200
electron has this auto updater module in

00:22:14,400 --> 00:22:18,640
its library which you can use to

00:22:17,200 --> 00:22:22,880
automatically update

00:22:18,640 --> 00:22:26,559
the update your application

00:22:22,880 --> 00:22:27,440
now one important thing to keep in mind

00:22:26,559 --> 00:22:31,039
here is that

00:22:27,440 --> 00:22:34,080
it will work this uh inbuilt module

00:22:31,039 --> 00:22:37,280
uh to update will work only for

00:22:34,080 --> 00:22:41,039
app image that's it if you

00:22:37,280 --> 00:22:44,799
have any other packaging it won't work

00:22:41,039 --> 00:22:47,840
so you are stuck there with inbuilt

00:22:44,799 --> 00:22:51,039
auto updating module

00:22:47,840 --> 00:22:53,520
you can work only on app image on linux

00:22:51,039 --> 00:22:55,280
it works very well on windows and mac or

00:22:53,520 --> 00:22:58,799
this auto update function

00:22:55,280 --> 00:23:02,320
but on linux it works only for app image

00:22:58,799 --> 00:23:04,880
so remember that and when you have

00:23:02,320 --> 00:23:07,120
so right now we are completely talking

00:23:04,880 --> 00:23:09,280
about app image only that's it

00:23:07,120 --> 00:23:10,559
so if you want to update or to update

00:23:09,280 --> 00:23:12,240
your app image

00:23:10,559 --> 00:23:14,240
first thing that you need to have is a

00:23:12,240 --> 00:23:16,640
release server where you host

00:23:14,240 --> 00:23:18,400
your files you host your file you host

00:23:16,640 --> 00:23:21,200
your update files there

00:23:18,400 --> 00:23:22,080
and this is what your desktop

00:23:21,200 --> 00:23:24,640
application is

00:23:22,080 --> 00:23:27,440
going to communicate with when it wants

00:23:24,640 --> 00:23:29,600
to get a new version of the application

00:23:27,440 --> 00:23:31,520
now there are multiple solutions you

00:23:29,600 --> 00:23:33,840
don't need to sit and start coding

00:23:31,520 --> 00:23:34,960
your release server rather there are

00:23:33,840 --> 00:23:37,039
already

00:23:34,960 --> 00:23:39,120
existing solutions available such as

00:23:37,039 --> 00:23:40,000
electron release server hazelnuts or

00:23:39,120 --> 00:23:42,559
even you can use

00:23:40,000 --> 00:23:44,559
public github releases to do this the

00:23:42,559 --> 00:23:46,960
best solution that i

00:23:44,559 --> 00:23:48,880
personally like has been electron

00:23:46,960 --> 00:23:52,159
release server

00:23:48,880 --> 00:23:53,360
so you can so you don't so you can maybe

00:23:52,159 --> 00:23:55,360
uh mention that if you are

00:23:53,360 --> 00:23:56,640
taking notes electron release server is

00:23:55,360 --> 00:23:58,159
something that

00:23:56,640 --> 00:24:00,080
worked for me and probably it will for

00:23:58,159 --> 00:24:02,480
you uh but you don't need to

00:24:00,080 --> 00:24:04,000
uh remember everything that i am sharing

00:24:02,480 --> 00:24:06,400
in this talk because i will share

00:24:04,000 --> 00:24:07,279
this presentation with you and i have

00:24:06,400 --> 00:24:09,440
added

00:24:07,279 --> 00:24:11,679
proper links everywhere you might need

00:24:09,440 --> 00:24:14,799
to visit those sites

00:24:11,679 --> 00:24:17,120
so so so one

00:24:14,799 --> 00:24:18,320
for the app image you want to enable

00:24:17,120 --> 00:24:20,960
automatic updates

00:24:18,320 --> 00:24:23,279
now you have used electron delay servers

00:24:20,960 --> 00:24:26,559
to release server to create your

00:24:23,279 --> 00:24:31,200
server where you are hosting your files

00:24:26,559 --> 00:24:33,120
for your linux app

00:24:31,200 --> 00:24:34,480
and it's pretty simple simply just uh

00:24:33,120 --> 00:24:37,600
clone the repo

00:24:34,480 --> 00:24:39,520
run it and that's it you you have admin

00:24:37,600 --> 00:24:41,840
ui you just upload your

00:24:39,520 --> 00:24:43,039
files there and you name the version and

00:24:41,840 --> 00:24:46,080
that's it

00:24:43,039 --> 00:24:48,960
you don't need to do anything else

00:24:46,080 --> 00:24:49,760
it's pretty quick now you have this

00:24:48,960 --> 00:24:51,679
release server

00:24:49,760 --> 00:24:53,039
how do you get these updates from the

00:24:51,679 --> 00:24:54,960
release servers uh

00:24:53,039 --> 00:24:56,400
from this client application from this

00:24:54,960 --> 00:24:58,559
desktop application

00:24:56,400 --> 00:24:59,840
and for that i have included the code

00:24:58,559 --> 00:25:03,360
here if it is

00:24:59,840 --> 00:25:03,360
too small uh let me know

00:25:06,320 --> 00:25:09,919
right rice is sharing sharing something

00:25:08,960 --> 00:25:12,720
we will come to that

00:25:09,919 --> 00:25:14,159
uh very soon about snap and everything

00:25:12,720 --> 00:25:15,919
but for now we are focusing on direct

00:25:14,159 --> 00:25:16,640
distribution so we are talking about app

00:25:15,919 --> 00:25:19,279
image

00:25:16,640 --> 00:25:20,559
for now and when you need to download

00:25:19,279 --> 00:25:23,120
updates for your

00:25:20,559 --> 00:25:23,919
uh app image this is how this is how the

00:25:23,120 --> 00:25:26,720
code looks like

00:25:23,919 --> 00:25:28,480
auto updater is a module in electron so

00:25:26,720 --> 00:25:29,600
you import it from the electron auto

00:25:28,480 --> 00:25:33,600
updater

00:25:29,600 --> 00:25:37,279
and then we have an event on

00:25:33,600 --> 00:25:40,320
which is an event update downloaded

00:25:37,279 --> 00:25:41,440
if it is there then you show a user a

00:25:40,320 --> 00:25:44,000
dialog

00:25:41,440 --> 00:25:45,120
and i'm showing that you have a new

00:25:44,000 --> 00:25:47,679
version available

00:25:45,120 --> 00:25:48,720
would you like to apply those updates to

00:25:47,679 --> 00:25:51,919
your app

00:25:48,720 --> 00:25:54,240
and once the user says yes then it

00:25:51,919 --> 00:25:55,039
simply calls this auto updater dot quit

00:25:54,240 --> 00:25:56,880
and install

00:25:55,039 --> 00:25:59,039
and that's it your update has been

00:25:56,880 --> 00:26:02,320
applied nothing else simple

00:25:59,039 --> 00:26:06,159
uh six seven lines or 10 or maybe 12

00:26:02,320 --> 00:26:08,320
lines of code and that's it your app

00:26:06,159 --> 00:26:10,720
had been installed earlier it will be

00:26:08,320 --> 00:26:13,919
updated when you release a new version

00:26:10,720 --> 00:26:17,279
on your release server so that was

00:26:13,919 --> 00:26:19,919
about the direct distribution

00:26:17,279 --> 00:26:22,080
okay you're sharing the file uh directly

00:26:19,919 --> 00:26:25,360
with your target users

00:26:22,080 --> 00:26:26,799
now let's come to the second uh

00:26:25,360 --> 00:26:29,120
part of the distribution which is

00:26:26,799 --> 00:26:31,200
external distribution

00:26:29,120 --> 00:26:32,960
external distribution is where you are

00:26:31,200 --> 00:26:35,200
not controlling how

00:26:32,960 --> 00:26:36,640
it is being shared with your target

00:26:35,200 --> 00:26:39,600
users

00:26:36,640 --> 00:26:42,320
and how the updates are being applied so

00:26:39,600 --> 00:26:46,559
you need to follow their rules

00:26:42,320 --> 00:26:47,679
and uh you uh you need to do some things

00:26:46,559 --> 00:26:51,039
you need to modify

00:26:47,679 --> 00:26:54,159
probably in some cases to

00:26:51,039 --> 00:26:55,919
suit that distribution channel now i

00:26:54,159 --> 00:26:58,960
have divided these external uh

00:26:55,919 --> 00:27:01,600
distribution channels in two forms one

00:26:58,960 --> 00:27:04,080
is the classic distribution classic

00:27:01,600 --> 00:27:07,440
distributions uh i mean

00:27:04,080 --> 00:27:11,039
they are quite focused on

00:27:07,440 --> 00:27:14,320
one linux distro one type of

00:27:11,039 --> 00:27:15,360
uh linux system while universal

00:27:14,320 --> 00:27:20,240
distribution

00:27:15,360 --> 00:27:23,600
are suitable for any type of linux

00:27:20,240 --> 00:27:25,760
system or linux distro so for example

00:27:23,600 --> 00:27:28,000
uh in classic distribution we have dab

00:27:25,760 --> 00:27:30,640
we have a dab for debian based system

00:27:28,000 --> 00:27:31,919
we have rpm for rail-based system fedora

00:27:30,640 --> 00:27:35,039
is one of the popular

00:27:31,919 --> 00:27:38,240
we have pac-man uh we have pac-man

00:27:35,039 --> 00:27:40,880
for uh uh arc based uh

00:27:38,240 --> 00:27:42,080
systems and then we have freebsd for

00:27:40,880 --> 00:27:44,880
freebsd

00:27:42,080 --> 00:27:46,640
uh systems and then uh in universal

00:27:44,880 --> 00:27:47,520
description we have three uh major

00:27:46,640 --> 00:27:50,960
choices

00:27:47,520 --> 00:27:54,080
one app image another snap

00:27:50,960 --> 00:27:55,039
and the last one flat pack so you

00:27:54,080 --> 00:27:57,039
convert

00:27:55,039 --> 00:27:58,880
you distribute on these platforms only

00:27:57,039 --> 00:28:01,200
limited set of linux users

00:27:58,880 --> 00:28:02,960
who have those particular type of distro

00:28:01,200 --> 00:28:06,000
will be able to install

00:28:02,960 --> 00:28:08,159
and if you distribute here uh almost all

00:28:06,000 --> 00:28:11,600
of the

00:28:08,159 --> 00:28:12,320
all of the linux distro users will be

00:28:11,600 --> 00:28:15,679
able to

00:28:12,320 --> 00:28:18,240
use that now i'm sharing and there is

00:28:15,679 --> 00:28:21,440
one more thing you can actually convert

00:28:18,240 --> 00:28:24,000
these packages into one another that

00:28:21,440 --> 00:28:24,559
many of the linux users might be knowing

00:28:24,000 --> 00:28:26,559
but

00:28:24,559 --> 00:28:28,559
i consider that average user doesn't

00:28:26,559 --> 00:28:30,559
know this and i have seen that

00:28:28,559 --> 00:28:31,600
people have run into problems when they

00:28:30,559 --> 00:28:34,880
convert

00:28:31,600 --> 00:28:35,840
these packages into uh from one package

00:28:34,880 --> 00:28:38,640
to another

00:28:35,840 --> 00:28:44,000
so which is why discussing both of these

00:28:38,640 --> 00:28:47,120
very important

00:28:44,000 --> 00:28:47,120
okay now

00:28:47,760 --> 00:28:51,200
all right someone said that freebsd is

00:28:50,000 --> 00:28:54,880
using ports that

00:28:51,200 --> 00:28:57,440
is right so

00:28:54,880 --> 00:28:59,279
but for now we are talking about

00:28:57,440 --> 00:29:00,240
whatever we had i think i'm not sure

00:28:59,279 --> 00:29:03,520
much sure about

00:29:00,240 --> 00:29:06,880
pools and i have never used freebsd

00:29:03,520 --> 00:29:07,360
but this uh i'm sharing what i have

00:29:06,880 --> 00:29:10,080
shared

00:29:07,360 --> 00:29:11,039
with my target users they asked me for

00:29:10,080 --> 00:29:13,360
some packaging

00:29:11,039 --> 00:29:15,360
and i created uh those packagings for

00:29:13,360 --> 00:29:16,960
them so let's talk about classic

00:29:15,360 --> 00:29:18,960
distributions first

00:29:16,960 --> 00:29:20,159
so because that is kind of fundamental

00:29:18,960 --> 00:29:23,440
thing and

00:29:20,159 --> 00:29:25,200
is a has been for a long time so you

00:29:23,440 --> 00:29:27,760
created a dab package

00:29:25,200 --> 00:29:29,520
you can distribute if you are directly

00:29:27,760 --> 00:29:30,080
distributing it or with your target

00:29:29,520 --> 00:29:33,360
audience

00:29:30,080 --> 00:29:33,600
they can simply go and type dpk ig minus

00:29:33,360 --> 00:29:36,320
i

00:29:33,600 --> 00:29:36,720
and then whatever is your name of your

00:29:36,320 --> 00:29:39,600
app

00:29:36,720 --> 00:29:40,080
and this dev file and that's it yeah the

00:29:39,600 --> 00:29:43,360
application

00:29:40,080 --> 00:29:45,039
will be installed now there are there is

00:29:43,360 --> 00:29:49,039
another thing that you can do

00:29:45,039 --> 00:29:51,120
that you can buy your own uh repository

00:29:49,039 --> 00:29:52,720
so here there were two steps one they

00:29:51,120 --> 00:29:54,240
downloaded the file and then they run

00:29:52,720 --> 00:29:56,480
this command

00:29:54,240 --> 00:29:57,360
and the the second option i'm telling

00:29:56,480 --> 00:30:00,240
you is about

00:29:57,360 --> 00:30:01,039
distributing via or your own repository

00:30:00,240 --> 00:30:04,399
so you

00:30:01,039 --> 00:30:07,120
add an repository and then you

00:30:04,399 --> 00:30:08,320
host your code there you need to follow

00:30:07,120 --> 00:30:11,200
certain guidelines and

00:30:08,320 --> 00:30:13,039
there are tools to uh do that so and i

00:30:11,200 --> 00:30:14,559
have included link here so once you get

00:30:13,039 --> 00:30:15,360
this file you can click on this and you

00:30:14,559 --> 00:30:18,000
will

00:30:15,360 --> 00:30:18,640
uh you will get to know that how to uh

00:30:18,000 --> 00:30:21,520
add

00:30:18,640 --> 00:30:22,480
uh how to create your own repository and

00:30:21,520 --> 00:30:25,120
then store your

00:30:22,480 --> 00:30:26,640
dev file there if you do that then you

00:30:25,120 --> 00:30:30,240
can do simply like this

00:30:26,640 --> 00:30:33,440
two command command lines one you add

00:30:30,240 --> 00:30:34,159
your repo uh your user has to add your

00:30:33,440 --> 00:30:36,880
repo

00:30:34,159 --> 00:30:38,799
to their sources list and this is the

00:30:36,880 --> 00:30:41,039
command they can use sudo add app

00:30:38,799 --> 00:30:43,039
repository and whatever is your repo

00:30:41,039 --> 00:30:45,360
and then simply app install uh whatever

00:30:43,039 --> 00:30:48,480
is your name of your application

00:30:45,360 --> 00:30:51,120
so this is much simpler than this right

00:30:48,480 --> 00:30:52,320
but then there is some added uh tasks

00:30:51,120 --> 00:30:55,520
that you need to do

00:30:52,320 --> 00:30:59,120
then third uh third thing a third way to

00:30:55,520 --> 00:31:01,360
make this more usable more accessible

00:30:59,120 --> 00:31:02,880
is to distribute via debian package

00:31:01,360 --> 00:31:05,919
repository

00:31:02,880 --> 00:31:08,080
so if you are able to distribute

00:31:05,919 --> 00:31:10,480
if you are able to add your package to

00:31:08,080 --> 00:31:12,480
debian or package repository

00:31:10,480 --> 00:31:14,720
you don't need to do this one as well

00:31:12,480 --> 00:31:16,880
you can simply your users can simply go

00:31:14,720 --> 00:31:18,799
apt install developer diary and that's

00:31:16,880 --> 00:31:21,919
it you are done

00:31:18,799 --> 00:31:25,600
having said that this

00:31:21,919 --> 00:31:27,919
was not possible for me and this might

00:31:25,600 --> 00:31:30,320
not be possible for many of the people

00:31:27,919 --> 00:31:33,120
there are restriction to

00:31:30,320 --> 00:31:34,640
distribute on debian package repository

00:31:33,120 --> 00:31:36,320
so make sure to read about it

00:31:34,640 --> 00:31:38,320
i have included the link you will get to

00:31:36,320 --> 00:31:40,799
know about all the information

00:31:38,320 --> 00:31:41,360
what are the restrictions and how to

00:31:40,799 --> 00:31:44,640
build

00:31:41,360 --> 00:31:46,240
uh how to distribute on debian

00:31:44,640 --> 00:31:47,679
but one restriction i would like to

00:31:46,240 --> 00:31:50,720
share with you is that

00:31:47,679 --> 00:31:53,039
if your app is not this

00:31:50,720 --> 00:31:54,080
does not follow these three things then

00:31:53,039 --> 00:31:56,880
you cannot publish

00:31:54,080 --> 00:31:58,080
on debian one if it is not free you

00:31:56,880 --> 00:32:01,200
cannot publish

00:31:58,080 --> 00:32:04,240
if you do not allow users to

00:32:01,200 --> 00:32:07,200
modify the code so the inherent

00:32:04,240 --> 00:32:08,240
uh condition is your code has to be open

00:32:07,200 --> 00:32:10,159
source

00:32:08,240 --> 00:32:11,679
people should be able to see your source

00:32:10,159 --> 00:32:14,720
code and

00:32:11,679 --> 00:32:17,200
they should be able to modify it if

00:32:14,720 --> 00:32:19,120
you are not allowing them to modify you

00:32:17,200 --> 00:32:21,919
cannot publish on debian

00:32:19,120 --> 00:32:23,120
if you do not allow your users to

00:32:21,919 --> 00:32:26,720
distribute

00:32:23,120 --> 00:32:30,000
your code your app

00:32:26,720 --> 00:32:31,600
then you can again not distribute on

00:32:30,000 --> 00:32:33,120
debian package ripple so these are the

00:32:31,600 --> 00:32:34,960
child these are the

00:32:33,120 --> 00:32:36,880
limitations that you have and this

00:32:34,960 --> 00:32:39,600
process is going to be really long

00:32:36,880 --> 00:32:40,240
for you to distribute i didn't uh go for

00:32:39,600 --> 00:32:44,640
this option

00:32:40,240 --> 00:32:44,640
because of all these challenges

00:32:46,080 --> 00:32:51,279
honestly i think uh you cannot

00:32:49,600 --> 00:32:53,600
uh i think there are there you need to

00:32:51,279 --> 00:32:56,960
read this there was an article

00:32:53,600 --> 00:32:58,480
exactly it talks about non-free as well

00:32:56,960 --> 00:33:00,320
so you might want to go through this

00:32:58,480 --> 00:33:02,480
article for now but for now i just want

00:33:00,320 --> 00:33:05,760
to summarize and give you a high level

00:33:02,480 --> 00:33:07,600
overview that how uh that

00:33:05,760 --> 00:33:10,720
these are the con there are some

00:33:07,600 --> 00:33:14,080
conditions and it will take some time

00:33:10,720 --> 00:33:14,799
for you to distribute that so i did not

00:33:14,080 --> 00:33:17,519
choose this

00:33:14,799 --> 00:33:18,799
i went for just the first one and

00:33:17,519 --> 00:33:20,080
probably very soon i will be

00:33:18,799 --> 00:33:23,519
distributing via my

00:33:20,080 --> 00:33:24,559
own repository as well so this is what i

00:33:23,519 --> 00:33:26,960
would recommend as well

00:33:24,559 --> 00:33:28,720
that first create that and then whenever

00:33:26,960 --> 00:33:30,240
you have time distribute via your own

00:33:28,720 --> 00:33:33,840
repository

00:33:30,240 --> 00:33:36,240
and maybe when you have a lots of users

00:33:33,840 --> 00:33:36,880
and you want to make it more accessible

00:33:36,240 --> 00:33:38,720
probably

00:33:36,880 --> 00:33:40,399
is a good time too and also you follow

00:33:38,720 --> 00:33:43,760
those license

00:33:40,399 --> 00:33:48,000
conditions that i shared then go for

00:33:43,760 --> 00:33:48,000
uh sharing on debian package system

00:33:48,159 --> 00:33:53,840
okay so now coming to uh more

00:33:52,480 --> 00:33:55,519
classical or distributed classic

00:33:53,840 --> 00:33:58,240
distribution channels uh

00:33:55,519 --> 00:33:58,960
rpm pac-man freebsd if you have rpm

00:33:58,240 --> 00:34:01,039
package

00:33:58,960 --> 00:34:03,760
then you can simply go rpm minus i and

00:34:01,039 --> 00:34:06,480
then whatever the name of your app

00:34:03,760 --> 00:34:07,440
and for rpm you can also again similar

00:34:06,480 --> 00:34:11,280
to apt you can

00:34:07,440 --> 00:34:13,839
uh choose yum you can distribute yim

00:34:11,280 --> 00:34:14,399
and this way you can share on many of

00:34:13,839 --> 00:34:17,679
the

00:34:14,399 --> 00:34:20,480
rail based systems and that's much

00:34:17,679 --> 00:34:21,760
easier i think so yum install a

00:34:20,480 --> 00:34:25,119
developer id

00:34:21,760 --> 00:34:28,560
is i i see many people prefer this

00:34:25,119 --> 00:34:31,599
over rpm so it is a good idea to

00:34:28,560 --> 00:34:31,599
publish there as well

00:34:33,440 --> 00:34:39,359
now coming to uh other other

00:34:36,720 --> 00:34:40,720
linux distro pac-man if you are sharing

00:34:39,359 --> 00:34:43,440
on pac-man pac-man

00:34:40,720 --> 00:34:45,040
uh minus s and uh this is an app name

00:34:43,440 --> 00:34:47,440
that's how you install

00:34:45,040 --> 00:34:48,079
and similarly for uh freebsd you can use

00:34:47,440 --> 00:34:51,200
pkg

00:34:48,079 --> 00:34:53,520
install and so on so those are simple

00:34:51,200 --> 00:34:54,320
but how do you uh just i never got

00:34:53,520 --> 00:34:57,440
requirement

00:34:54,320 --> 00:34:59,440
for people to say that they need uh the

00:34:57,440 --> 00:35:02,720
app to distribute on some

00:34:59,440 --> 00:35:04,960
catalog on pacman or freebsd so

00:35:02,720 --> 00:35:05,920
i i never published there and that's

00:35:04,960 --> 00:35:08,160
something up to you

00:35:05,920 --> 00:35:10,320
if you want to put in efforts there but

00:35:08,160 --> 00:35:11,520
for me uh the most important one are the

00:35:10,320 --> 00:35:14,880
ubuntu

00:35:11,520 --> 00:35:16,960
so to be distributing via ubuntu

00:35:14,880 --> 00:35:18,320
for and making it easier there and then

00:35:16,960 --> 00:35:23,359
rpm was the second

00:35:18,320 --> 00:35:26,480
most uh channel that

00:35:23,359 --> 00:35:31,040
and that also we saw in today's

00:35:26,480 --> 00:35:33,119
poll as well so that was about classical

00:35:31,040 --> 00:35:35,119
uh distribution now coming to universal

00:35:33,119 --> 00:35:36,800
distribution you publish on one

00:35:35,119 --> 00:35:38,320
distribution channel and it is available

00:35:36,800 --> 00:35:41,119
on all the linux distro

00:35:38,320 --> 00:35:41,440
how can you do that so there are three

00:35:41,119 --> 00:35:44,400
uh

00:35:41,440 --> 00:35:46,160
main ways that we i highlighted app

00:35:44,400 --> 00:35:48,800
image snap and

00:35:46,160 --> 00:35:49,680
flat pack so going through each of them

00:35:48,800 --> 00:35:51,359
one by one and

00:35:49,680 --> 00:35:53,040
i'll just highlight few of the things

00:35:51,359 --> 00:35:54,800
that will help you make the decision

00:35:53,040 --> 00:35:56,160
where to invest your more more of your

00:35:54,800 --> 00:35:59,839
energy so

00:35:56,160 --> 00:35:59,839
one first one is app image

00:35:59,920 --> 00:36:06,000
installing app image is uh

00:36:03,440 --> 00:36:06,720
that simple there is not nothing more

00:36:06,000 --> 00:36:09,359
simple than

00:36:06,720 --> 00:36:10,880
app image you just click you just bring

00:36:09,359 --> 00:36:14,000
your file to your

00:36:10,880 --> 00:36:17,520
system and then you just click

00:36:14,000 --> 00:36:21,359
that's it and your app will run

00:36:17,520 --> 00:36:22,160
nothing else needed most easiest way to

00:36:21,359 --> 00:36:24,560
install

00:36:22,160 --> 00:36:25,760
any linux application is app image and

00:36:24,560 --> 00:36:29,760
which is available on

00:36:25,760 --> 00:36:32,880
almost all linux distro so that is

00:36:29,760 --> 00:36:33,440
the benefit of app image that you do not

00:36:32,880 --> 00:36:36,320
have

00:36:33,440 --> 00:36:37,839
uh and there is no extra step to publish

00:36:36,320 --> 00:36:41,119
you don't need to do anything

00:36:37,839 --> 00:36:42,480
for other other distributions we are

00:36:41,119 --> 00:36:43,119
going to see that you need to do

00:36:42,480 --> 00:36:45,599
something

00:36:43,119 --> 00:36:47,119
only then you will be able to find your

00:36:45,599 --> 00:36:47,920
applications in their distribution

00:36:47,119 --> 00:36:51,200
channel

00:36:47,920 --> 00:36:52,160
app image no extra step and then another

00:36:51,200 --> 00:36:54,240
benefit is that

00:36:52,160 --> 00:36:56,800
you can support auto update out of the

00:36:54,240 --> 00:36:58,880
box you don't need to do anything else

00:36:56,800 --> 00:37:01,680
to update you don't need to set up a

00:36:58,880 --> 00:37:05,200
release you don't need to

00:37:01,680 --> 00:37:06,960
rely on someone else's update system

00:37:05,200 --> 00:37:09,520
rather you can build your own updates or

00:37:06,960 --> 00:37:11,520
release server and then from there

00:37:09,520 --> 00:37:13,200
automatically using the auto operator

00:37:11,520 --> 00:37:14,400
module of electron you can auto update

00:37:13,200 --> 00:37:16,000
your app image

00:37:14,400 --> 00:37:18,079
so these are the benefits uh

00:37:16,000 --> 00:37:21,359
disadvantage

00:37:18,079 --> 00:37:22,000
no desktop integration so when it comes

00:37:21,359 --> 00:37:25,040
to creating

00:37:22,000 --> 00:37:27,119
shortcuts and pinning it to the bar and

00:37:25,040 --> 00:37:28,320
any uh desktop integration that you

00:37:27,119 --> 00:37:31,599
would want as

00:37:28,320 --> 00:37:33,920
uh as an app user for uh or

00:37:31,599 --> 00:37:36,000
then those are not available to you

00:37:33,920 --> 00:37:39,680
though so and this is a very serious

00:37:36,000 --> 00:37:41,599
uh disadvantage so some people

00:37:39,680 --> 00:37:43,200
downloaded our app and then they just

00:37:41,599 --> 00:37:45,359
forget about it because

00:37:43,200 --> 00:37:47,520
they installed it in some folder but

00:37:45,359 --> 00:37:49,599
then they couldn't find it anywhere

00:37:47,520 --> 00:37:50,960
there was no shortcut there was no

00:37:49,599 --> 00:37:52,720
tight integration with the with the

00:37:50,960 --> 00:37:55,359
desktop so

00:37:52,720 --> 00:37:56,640
that was a huge problem and specifically

00:37:55,359 --> 00:37:58,320
it is for the genome

00:37:56,640 --> 00:38:00,960
for genome you do not have this desktop

00:37:58,320 --> 00:38:04,160
integration uh i think for free

00:38:00,960 --> 00:38:06,000
uh not a freebie for kde kdkd

00:38:04,160 --> 00:38:07,920
you might see there is a desktop

00:38:06,000 --> 00:38:10,560
integration and then

00:38:07,920 --> 00:38:12,320
this uh this will vary for other

00:38:10,560 --> 00:38:13,599
distribution some will support desktop

00:38:12,320 --> 00:38:16,800
indication for app image

00:38:13,599 --> 00:38:19,440
some will not so uh quite

00:38:16,800 --> 00:38:19,839
confusing situation over there and we

00:38:19,440 --> 00:38:22,000
can

00:38:19,839 --> 00:38:24,079
definitely say that universally you do

00:38:22,000 --> 00:38:27,520
not have desktop integration

00:38:24,079 --> 00:38:30,720
you have for some but not for all second

00:38:27,520 --> 00:38:31,760
or big drawback was that you cannot auto

00:38:30,720 --> 00:38:35,440
start

00:38:31,760 --> 00:38:39,760
an app image and that is true for again

00:38:35,440 --> 00:38:41,359
genome but for kd again this is true

00:38:39,760 --> 00:38:44,560
that you can auto start

00:38:41,359 --> 00:38:48,079
but again we can see say that for all

00:38:44,560 --> 00:38:49,920
linux distribution you cannot you cannot

00:38:48,079 --> 00:38:52,240
auto start for all the distribution you

00:38:49,920 --> 00:38:54,960
can do this for some but not for

00:38:52,240 --> 00:38:56,079
all then third important point is

00:38:54,960 --> 00:38:58,400
security

00:38:56,079 --> 00:38:59,200
so it's simply everything is packaged

00:38:58,400 --> 00:39:01,760
there

00:38:59,200 --> 00:39:02,880
you just click run and then give it

00:39:01,760 --> 00:39:05,680
permission and that

00:39:02,880 --> 00:39:06,560
that's it it will run your code it's

00:39:05,680 --> 00:39:10,000
highly

00:39:06,560 --> 00:39:13,520
uh it's a very

00:39:10,000 --> 00:39:16,079
good solution to port your

00:39:13,520 --> 00:39:17,119
malware to different machines but as a

00:39:16,079 --> 00:39:19,119
user it is

00:39:17,119 --> 00:39:20,240
not a good idea i wouldn't trust an app

00:39:19,119 --> 00:39:23,440
image

00:39:20,240 --> 00:39:25,680
so and also in other type of systems

00:39:23,440 --> 00:39:28,000
they have some checks and balances which

00:39:25,680 --> 00:39:30,720
helps us increase security

00:39:28,000 --> 00:39:31,599
in app image none so as a user i

00:39:30,720 --> 00:39:35,200
wouldn't trust

00:39:31,599 --> 00:39:35,680
app image and uh as a user i will find

00:39:35,200 --> 00:39:38,079
it

00:39:35,680 --> 00:39:38,880
a little bit my experience won't be that

00:39:38,079 --> 00:39:42,240
good as i

00:39:38,880 --> 00:39:45,359
wanted to be and as an app developer

00:39:42,240 --> 00:39:48,079
i simply skipped this i

00:39:45,359 --> 00:39:49,119
supported app image earlier and that was

00:39:48,079 --> 00:39:51,760
my primary

00:39:49,119 --> 00:39:52,320
way to distribute but later on because

00:39:51,760 --> 00:39:56,560
of these

00:39:52,320 --> 00:39:59,760
two limitations specifically

00:39:56,560 --> 00:40:01,440
i uh removed my focus from app image it

00:39:59,760 --> 00:40:04,880
is available you can download it if you

00:40:01,440 --> 00:40:08,400
want it but my focus is not there

00:40:04,880 --> 00:40:11,680
okay now

00:40:08,400 --> 00:40:14,720
second snap so

00:40:11,680 --> 00:40:16,079
this is a very new thing uh for me at

00:40:14,720 --> 00:40:19,040
least it was

00:40:16,079 --> 00:40:21,760
uh it was new thing and very good

00:40:19,040 --> 00:40:24,240
experience i would say

00:40:21,760 --> 00:40:26,720
uh in terms of publishing there was no

00:40:24,240 --> 00:40:29,680
effort in publishing to snapcraft

00:40:26,720 --> 00:40:31,359
and installing was quite easy i just

00:40:29,680 --> 00:40:32,319
typed this command snap installed

00:40:31,359 --> 00:40:35,440
developer id

00:40:32,319 --> 00:40:37,280
and installed my developer diary and

00:40:35,440 --> 00:40:38,720
it was quite simple it has also the

00:40:37,280 --> 00:40:41,599
versioning systems

00:40:38,720 --> 00:40:42,160
so i can publish in beta channel and

00:40:41,599 --> 00:40:45,280
then i

00:40:42,160 --> 00:40:48,400
have a stable channel

00:40:45,280 --> 00:40:49,359
and a very good solution so a couple of

00:40:48,400 --> 00:40:51,920
things that

00:40:49,359 --> 00:40:53,359
i like about snap is that it provides

00:40:51,920 --> 00:40:56,400
sandboxing

00:40:53,359 --> 00:40:57,119
so this adds an extra layer of security

00:40:56,400 --> 00:41:00,160
for

00:40:57,119 --> 00:41:03,359
users and they are they can

00:41:00,160 --> 00:41:05,599
trust app they download from snap

00:41:03,359 --> 00:41:08,560
more than they would download directly

00:41:05,599 --> 00:41:10,640
from a website or via app image

00:41:08,560 --> 00:41:12,240
so that is one interesting thing about

00:41:10,640 --> 00:41:14,240
sandbox then delta updates

00:41:12,240 --> 00:41:15,280
you are pushing another update to your

00:41:14,240 --> 00:41:16,720
application

00:41:15,280 --> 00:41:18,640
uh you don't need to ship the complete

00:41:16,720 --> 00:41:22,079
code rather just

00:41:18,640 --> 00:41:25,119
push the diff and that's it so

00:41:22,079 --> 00:41:28,800
it makes a network request lighter

00:41:25,119 --> 00:41:32,079
and the user experience becomes better

00:41:28,800 --> 00:41:35,359
one disadvantage of snapcraft ic is that

00:41:32,079 --> 00:41:38,160
its server is not not

00:41:35,359 --> 00:41:40,319
open sourced it is a centralized system

00:41:38,160 --> 00:41:44,160
snapcraft is centralized system

00:41:40,319 --> 00:41:46,000
so so this is one thing about snapcraft

00:41:44,160 --> 00:41:48,240
that i didn't like

00:41:46,000 --> 00:41:50,400
but other than that i think snapcraft is

00:41:48,240 --> 00:41:53,760
an amazing solution to distributor app

00:41:50,400 --> 00:41:57,040
and uh i think every every developer

00:41:53,760 --> 00:42:00,079
should be publishing on snap

00:41:57,040 --> 00:42:02,960
at least this gives me

00:42:00,079 --> 00:42:03,760
okay so i will uh i would want to wrap

00:42:02,960 --> 00:42:05,920
this up i have

00:42:03,760 --> 00:42:06,960
we are talking uh talking a lot about

00:42:05,920 --> 00:42:09,200
our distribution

00:42:06,960 --> 00:42:10,960
so one quick thing i want to say is the

00:42:09,200 --> 00:42:15,280
snap is a good solution

00:42:10,960 --> 00:42:17,599
and uh you should publish on snapcraft

00:42:15,280 --> 00:42:18,880
you have everything to gain nothing to

00:42:17,599 --> 00:42:22,160
lose

00:42:18,880 --> 00:42:25,200
and flat flat pack flat pack is also

00:42:22,160 --> 00:42:27,280
similar to snap and but

00:42:25,200 --> 00:42:28,400
it is open source server side as well as

00:42:27,280 --> 00:42:30,720
the client side

00:42:28,400 --> 00:42:31,760
and it is decentralized which is another

00:42:30,720 --> 00:42:34,560
good thing and then

00:42:31,760 --> 00:42:36,319
things are similar to the snap like it

00:42:34,560 --> 00:42:37,119
has sandboxing feature delta updates

00:42:36,319 --> 00:42:39,119
feature

00:42:37,119 --> 00:42:40,319
and the effort to publish is a

00:42:39,119 --> 00:42:43,680
non-trivial it's not

00:42:40,319 --> 00:42:46,240
as easy as snap but it's not

00:42:43,680 --> 00:42:46,720
that a big difference either and you

00:42:46,240 --> 00:42:49,680
install

00:42:46,720 --> 00:42:51,760
install installation is also quite easy

00:42:49,680 --> 00:42:54,160
flat pack install flat hub and then

00:42:51,760 --> 00:42:56,000
whatever is the id of your app and you

00:42:54,160 --> 00:42:58,000
type it here and that's it done

00:42:56,000 --> 00:42:59,200
it supports all these platforms many of

00:42:58,000 --> 00:43:01,119
the

00:42:59,200 --> 00:43:03,040
i can see almost all the platforms are

00:43:01,119 --> 00:43:03,680
supported and same is the case with

00:43:03,040 --> 00:43:06,800
other

00:43:03,680 --> 00:43:08,000
uh like snap also this support most of

00:43:06,800 --> 00:43:10,319
the linux distro

00:43:08,000 --> 00:43:11,359
now coming to a comparison of universal

00:43:10,319 --> 00:43:13,680
distribution channel

00:43:11,359 --> 00:43:15,839
i have actually shared with you already

00:43:13,680 --> 00:43:19,040
uh whatever i found important

00:43:15,839 --> 00:43:20,240
but just to be extra sure if let's say

00:43:19,040 --> 00:43:21,680
you do not have time

00:43:20,240 --> 00:43:23,680
or you just want to focus on one

00:43:21,680 --> 00:43:25,599
distribution channel i have included

00:43:23,680 --> 00:43:26,800
this comparison table for table for you

00:43:25,599 --> 00:43:28,880
where you can see

00:43:26,800 --> 00:43:30,160
uh differences between app image snap

00:43:28,880 --> 00:43:33,520
and flat pack and

00:43:30,160 --> 00:43:35,680
this is thanks to the show source of

00:43:33,520 --> 00:43:36,880
app image github repo they created this

00:43:35,680 --> 00:43:40,240
comparison table

00:43:36,880 --> 00:43:42,640
and it's quite good now

00:43:40,240 --> 00:43:43,520
coming to another point once you have

00:43:42,640 --> 00:43:47,040
built the app

00:43:43,520 --> 00:43:50,079
you have to maintain your app and this

00:43:47,040 --> 00:43:53,680
is i think you will

00:43:50,079 --> 00:43:55,200
say okay neil says that's weird

00:43:53,680 --> 00:43:58,160
distinction to make between

00:43:55,200 --> 00:43:59,040
low and non-trivial right we will

00:43:58,160 --> 00:44:01,920
discuss that in

00:43:59,040 --> 00:44:02,800
q a maintain your app so one thing uh

00:44:01,920 --> 00:44:05,280
that

00:44:02,800 --> 00:44:07,200
i didn't realize when i was starting to

00:44:05,280 --> 00:44:10,160
build electron that you have to maintain

00:44:07,200 --> 00:44:13,599
your app and maintaining an electron app

00:44:10,160 --> 00:44:16,560
is a task is a chore

00:44:13,599 --> 00:44:16,880
you so and there are some things that

00:44:16,560 --> 00:44:19,920
will

00:44:16,880 --> 00:44:21,839
help you make this task easier one is

00:44:19,920 --> 00:44:23,839
always upgrade your electron and node

00:44:21,839 --> 00:44:26,720
version every quarter

00:44:23,839 --> 00:44:27,440
do not wait for uh one year or two or

00:44:26,720 --> 00:44:29,520
whenever you are

00:44:27,440 --> 00:44:31,359
releasing always upgrade your electron

00:44:29,520 --> 00:44:32,079
on node versions otherwise your user

00:44:31,359 --> 00:44:34,240
will be stuck

00:44:32,079 --> 00:44:36,000
such as it happened with me my users

00:44:34,240 --> 00:44:39,119
couldn't log in i had this google

00:44:36,000 --> 00:44:41,760
login and because i did not update this

00:44:39,119 --> 00:44:42,319
electron version which means essentially

00:44:41,760 --> 00:44:43,920
that

00:44:42,319 --> 00:44:45,440
the chromium version that i was using

00:44:43,920 --> 00:44:48,480
that was not updated

00:44:45,440 --> 00:44:50,079
which means that when google uh go

00:44:48,480 --> 00:44:51,760
when someone is signing with google

00:44:50,079 --> 00:44:52,560
google sees that this is coming from a

00:44:51,760 --> 00:44:55,599
browser

00:44:52,560 --> 00:44:57,040
which was quite old and uh that might

00:44:55,599 --> 00:45:00,000
have some security issues

00:44:57,040 --> 00:45:00,640
so google did not allow user to sign in

00:45:00,000 --> 00:45:03,680
as a

00:45:00,640 --> 00:45:05,680
security measure so uh it is always a

00:45:03,680 --> 00:45:09,440
good idea and in favor of your

00:45:05,680 --> 00:45:11,839
user that you upgrade your connect home

00:45:09,440 --> 00:45:12,880
sorry for interrupting uh but we are a

00:45:11,839 --> 00:45:15,359
little bit

00:45:12,880 --> 00:45:16,240
running out of time so if you can wrap

00:45:15,359 --> 00:45:17,760
up

00:45:16,240 --> 00:45:20,160
okay just give me two minutes and i'll

00:45:17,760 --> 00:45:22,240
just wrap it up sure sure

00:45:20,160 --> 00:45:23,839
there is just one more slide after this

00:45:22,240 --> 00:45:26,720
okay so

00:45:23,839 --> 00:45:28,000
maintenance always upgrade your

00:45:26,720 --> 00:45:30,240
electronic node versions

00:45:28,000 --> 00:45:31,440
every three months and that's the ideal

00:45:30,240 --> 00:45:34,160
timeline that i found

00:45:31,440 --> 00:45:35,920
another thing is always tests before

00:45:34,160 --> 00:45:38,480
packaging

00:45:35,920 --> 00:45:40,079
so you have a good system in place to

00:45:38,480 --> 00:45:43,119
test your

00:45:40,079 --> 00:45:45,040
application and you test it before

00:45:43,119 --> 00:45:46,079
packaging you test it after packaging

00:45:45,040 --> 00:45:48,160
and only then share

00:45:46,079 --> 00:45:49,440
it i have made many mistakes such as

00:45:48,160 --> 00:45:52,400
distributing a

00:45:49,440 --> 00:45:53,599
buggy application another thing is a use

00:45:52,400 --> 00:45:56,160
type script

00:45:53,599 --> 00:45:57,200
when your code becomes big which will

00:45:56,160 --> 00:46:00,880
absolutely

00:45:57,200 --> 00:46:05,200
and i and i kept scratching my head when

00:46:00,880 --> 00:46:08,000
it happened and it was a nightmare to

00:46:05,200 --> 00:46:09,839
change anything it was nightmare to see

00:46:08,000 --> 00:46:11,680
that things are breaking

00:46:09,839 --> 00:46:13,119
so uh solution could have been

00:46:11,680 --> 00:46:14,079
typescript so i have started using

00:46:13,119 --> 00:46:16,880
typescript

00:46:14,079 --> 00:46:18,400
use that another is manage a different

00:46:16,880 --> 00:46:19,920
version if you want to manage different

00:46:18,400 --> 00:46:22,480
versions

00:46:19,920 --> 00:46:23,440
okay so we will skip this part for now

00:46:22,480 --> 00:46:25,680
and we will go to

00:46:23,440 --> 00:46:27,119
uh last final thing which is analyzing

00:46:25,680 --> 00:46:29,760
and improving

00:46:27,119 --> 00:46:30,400
so the one particular insight that i

00:46:29,760 --> 00:46:32,079
have

00:46:30,400 --> 00:46:33,680
from my experience of last four years of

00:46:32,079 --> 00:46:35,760
building electron app is that

00:46:33,680 --> 00:46:37,119
for linux users is that linux users

00:46:35,760 --> 00:46:40,240
expect privacy

00:46:37,119 --> 00:46:43,359
a lot than any other platform so

00:46:40,240 --> 00:46:44,319
do not include any uh analytic service

00:46:43,359 --> 00:46:46,800
such as google

00:46:44,319 --> 00:46:47,920
or there are some external services do

00:46:46,800 --> 00:46:50,079
not use them

00:46:47,920 --> 00:46:51,920
rather you can uh implement but you

00:46:50,079 --> 00:46:55,119
still need analytics to improve

00:46:51,920 --> 00:46:58,240
so okay and the way i did was that i

00:46:55,119 --> 00:47:00,720
created simple bash file which takes

00:46:58,240 --> 00:47:02,319
the request logs to my server so

00:47:00,720 --> 00:47:04,079
whenever my app loads

00:47:02,319 --> 00:47:05,680
after some time it sends a request to

00:47:04,079 --> 00:47:08,960
update server do

00:47:05,680 --> 00:47:11,599
do i have a new update for the app and

00:47:08,960 --> 00:47:12,880
i log this request and i analyze those

00:47:11,599 --> 00:47:16,240
requests and

00:47:12,880 --> 00:47:19,200
based on uh the unique ips uh i see

00:47:16,240 --> 00:47:20,160
that what how many number of users do i

00:47:19,200 --> 00:47:22,319
have

00:47:20,160 --> 00:47:24,079
how many number of returning users were

00:47:22,319 --> 00:47:25,920
how much average time is spent

00:47:24,079 --> 00:47:27,119
i'll share this script with you in in a

00:47:25,920 --> 00:47:29,119
github gist

00:47:27,119 --> 00:47:30,400
and uh probably or you can you can ask

00:47:29,119 --> 00:47:33,680
me uh for this

00:47:30,400 --> 00:47:34,000
in on my twitter or this is how it looks

00:47:33,680 --> 00:47:35,680
like

00:47:34,000 --> 00:47:38,559
it's a simple command to calculate

00:47:35,680 --> 00:47:43,520
downloads simple uh res x

00:47:38,559 --> 00:47:45,440
and okay if you have any questions

00:47:43,520 --> 00:47:49,760
you can reach me out on these channels

00:47:45,440 --> 00:47:49,760

YouTube URL: https://www.youtube.com/watch?v=k0Wiw0vYFJY


