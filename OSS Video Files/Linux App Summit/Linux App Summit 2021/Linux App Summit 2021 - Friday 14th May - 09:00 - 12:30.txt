Title: Linux App Summit 2021 - Friday 14th May - 09:00 - 12:30
Publication date: 2021-05-18
Playlist: Linux App Summit 2021
Description: 
	
Captions: 
	00:03:29,599 --> 00:03:34,319
hello

00:03:30,640 --> 00:03:38,319
i'm audible if anyone can

00:03:34,319 --> 00:03:38,319
confirm we can hear you

00:03:38,400 --> 00:03:44,000
okay so welcome everyone

00:03:41,599 --> 00:03:45,680
hope you are doing well good morning

00:03:44,000 --> 00:03:48,239
good afternoon good evening

00:03:45,680 --> 00:03:49,360
on the basis where you all are joining

00:03:48,239 --> 00:03:52,319
us

00:03:49,360 --> 00:03:54,080
today we will be joined by will thompson

00:03:52,319 --> 00:03:56,799
he will be talking about how to automate

00:03:54,080 --> 00:03:58,560
your flat pack manifest updates

00:03:56,799 --> 00:04:00,799
will thompson is the director of

00:03:58,560 --> 00:04:02,959
platform at endless os foundation

00:04:00,799 --> 00:04:04,480
a non-profit whose mission is to help

00:04:02,959 --> 00:04:07,920
everyone

00:04:04,480 --> 00:04:07,920
want to connect with technology

00:04:11,840 --> 00:04:19,120
will be

00:04:15,599 --> 00:04:21,680
coming on the stage soon so

00:04:19,120 --> 00:04:22,479
if anyone is not familiar with the

00:04:21,680 --> 00:04:24,880
interface

00:04:22,479 --> 00:04:25,520
let me tell you if you have any

00:04:24,880 --> 00:04:27,440
questions

00:04:25,520 --> 00:04:29,520
you can either post them in the public

00:04:27,440 --> 00:04:32,240
chat or there is a

00:04:29,520 --> 00:04:32,720
option at the notes shared notes you can

00:04:32,240 --> 00:04:36,000
post

00:04:32,720 --> 00:04:39,680
your questions over there also

00:04:36,000 --> 00:04:39,680
and have fun thank you

00:04:40,639 --> 00:04:44,320
hi there thanks for the introduction so

00:04:42,240 --> 00:04:45,040
good morning from london in the united

00:04:44,320 --> 00:04:46,560
kingdom

00:04:45,040 --> 00:04:48,479
and my name is bob thompson i'm an

00:04:46,560 --> 00:04:49,440
engineering director at endless os

00:04:48,479 --> 00:04:51,440
foundation

00:04:49,440 --> 00:04:53,120
as we just heard our mission is to help

00:04:51,440 --> 00:04:55,680
all peoples and communities

00:04:53,120 --> 00:04:57,919
collect but connect with technology i'll

00:04:55,680 --> 00:04:58,960
tell you a bit more about nsos itself

00:04:57,919 --> 00:05:00,800
later

00:04:58,960 --> 00:05:02,800
today i'm going to talk mainly about

00:05:00,800 --> 00:05:04,960
flat pack external data checker

00:05:02,800 --> 00:05:06,639
which helps keep flat packs up to date

00:05:04,960 --> 00:05:08,000
with new releases of the app or its

00:05:06,639 --> 00:05:10,960
dependencies

00:05:08,000 --> 00:05:12,320
i'll explain what it does tell you a bit

00:05:10,960 --> 00:05:14,479
about its history

00:05:12,320 --> 00:05:16,720
and what it's doing today i'll give some

00:05:14,479 --> 00:05:17,919
examples of how you can use it yourself

00:05:16,720 --> 00:05:19,759
and some ways that you could get

00:05:17,919 --> 00:05:21,440
involved in the project

00:05:19,759 --> 00:05:23,120
um we'll have some time at the end for

00:05:21,440 --> 00:05:24,560
questions so if you do have any

00:05:23,120 --> 00:05:25,840
questions during the talk

00:05:24,560 --> 00:05:27,600
please leave them in the chat all the

00:05:25,840 --> 00:05:29,440
shared notes and we'll get to them

00:05:27,600 --> 00:05:31,759
at the end if you're watching the

00:05:29,440 --> 00:05:32,960
recording and have any questions then

00:05:31,759 --> 00:05:35,759
please do get in touch

00:05:32,960 --> 00:05:36,800
um my email address is on the slide and

00:05:35,759 --> 00:05:38,720
we'll have the

00:05:36,800 --> 00:05:40,560
url to the project itself later in the

00:05:38,720 --> 00:05:43,199
deck

00:05:40,560 --> 00:05:44,560
okay so a bit of context to understand

00:05:43,199 --> 00:05:46,560
the motivation for this tool

00:05:44,560 --> 00:05:48,160
it helps to know a few facts about flat

00:05:46,560 --> 00:05:49,919
pack itself

00:05:48,160 --> 00:05:51,680
i'll quote the tagline from its website

00:05:49,919 --> 00:05:53,039
flat pack is a next generation

00:05:51,680 --> 00:05:55,759
technology for building

00:05:53,039 --> 00:05:56,800
and distributing desktop applications on

00:05:55,759 --> 00:05:58,400
linux

00:05:56,800 --> 00:05:59,919
and we're mostly focusing on the

00:05:58,400 --> 00:06:00,960
building and distributing today rather

00:05:59,919 --> 00:06:03,680
than the running

00:06:00,960 --> 00:06:05,120
um but applications are built and run in

00:06:03,680 --> 00:06:06,960
a predictable environment

00:06:05,120 --> 00:06:08,960
regardless of the linux distribution

00:06:06,960 --> 00:06:10,560
that they're running on and anyone can

00:06:08,960 --> 00:06:11,520
host a repository of flatpack

00:06:10,560 --> 00:06:12,960
applications

00:06:11,520 --> 00:06:15,280
and users can have applications

00:06:12,960 --> 00:06:17,680
installed from more than one repository

00:06:15,280 --> 00:06:19,360
at the same time

00:06:17,680 --> 00:06:20,880
probably the most prominent flat pack

00:06:19,360 --> 00:06:22,800
repository is flat hub

00:06:20,880 --> 00:06:24,639
which is a vendor neutral project which

00:06:22,800 --> 00:06:26,319
hosts a mixture of open source and

00:06:24,639 --> 00:06:27,600
proprietary applications

00:06:26,319 --> 00:06:30,160
and that's the one i'm going to be

00:06:27,600 --> 00:06:30,560
concentrating on today but whenever i

00:06:30,160 --> 00:06:32,240
say

00:06:30,560 --> 00:06:34,720
flat hub you can imagine there's a

00:06:32,240 --> 00:06:36,479
footnote saying or another flat pack

00:06:34,720 --> 00:06:39,600
repository which works

00:06:36,479 --> 00:06:42,400
kind of like flatup so on flathub

00:06:39,600 --> 00:06:43,039
footnotes the build process for most

00:06:42,400 --> 00:06:44,880
apps

00:06:43,039 --> 00:06:46,400
is defined by what's called a manifest

00:06:44,880 --> 00:06:48,720
file which is in

00:06:46,400 --> 00:06:49,919
json or yaml formats and that's stored

00:06:48,720 --> 00:06:51,919
in a repository

00:06:49,919 --> 00:06:53,599
on github within the flat hub

00:06:51,919 --> 00:06:56,240
organization

00:06:53,599 --> 00:06:58,720
and these manifests are essentially a

00:06:56,240 --> 00:07:01,199
list of all the apps dependencies

00:06:58,720 --> 00:07:03,280
and the app itself and how to build and

00:07:01,199 --> 00:07:04,240
install each of those components in

00:07:03,280 --> 00:07:06,000
sequence

00:07:04,240 --> 00:07:07,360
first each dependency followed by

00:07:06,000 --> 00:07:10,560
building and installing the app

00:07:07,360 --> 00:07:12,880
itself and the source code for the app

00:07:10,560 --> 00:07:14,319
and its dependencies is not stored in

00:07:12,880 --> 00:07:17,360
that git repository

00:07:14,319 --> 00:07:19,199
it just contains this manifest the

00:07:17,360 --> 00:07:22,479
manifest contains

00:07:19,199 --> 00:07:25,199
urls to each source code artifact

00:07:22,479 --> 00:07:26,880
and when flat hub builds the app it

00:07:25,199 --> 00:07:29,840
downloads all the source

00:07:26,880 --> 00:07:31,120
um as specified in the manifest for some

00:07:29,840 --> 00:07:33,120
apps the manifest

00:07:31,120 --> 00:07:34,639
is very simple because all the necessary

00:07:33,120 --> 00:07:37,199
dependencies are already present

00:07:34,639 --> 00:07:38,400
in the flatpack runtime so for these the

00:07:37,199 --> 00:07:40,639
manifest would

00:07:38,400 --> 00:07:41,919
literally just be here is the source

00:07:40,639 --> 00:07:42,479
code for this app and here's how you

00:07:41,919 --> 00:07:45,759
build it

00:07:42,479 --> 00:07:49,120
done for other apps um

00:07:45,759 --> 00:07:50,160
often uh big python apps or big node or

00:07:49,120 --> 00:07:51,919
electron apps

00:07:50,160 --> 00:07:53,520
the there are hundreds or maybe even

00:07:51,919 --> 00:07:56,560
thousands of dependencies

00:07:53,520 --> 00:07:57,520
um and those apps manifests are

00:07:56,560 --> 00:07:59,440
generated by

00:07:57,520 --> 00:08:01,360
tools which read these language specific

00:07:59,440 --> 00:08:04,639
formats and emit

00:08:01,360 --> 00:08:06,720
um gigantic json files in the format

00:08:04,639 --> 00:08:08,400
understood by flat pack builder

00:08:06,720 --> 00:08:10,720
most apps are somewhere in the middle

00:08:08,400 --> 00:08:13,680
with a small handful of dependencies

00:08:10,720 --> 00:08:14,879
and a manifest maintained by hand and

00:08:13,680 --> 00:08:17,120
those are the kinds of apps that this

00:08:14,879 --> 00:08:19,919
tool is intended to help with

00:08:17,120 --> 00:08:21,599
um just while we're here two of the

00:08:19,919 --> 00:08:23,039
other prominent flat pack repositories

00:08:21,599 --> 00:08:25,360
you may have come across

00:08:23,039 --> 00:08:26,879
are the gnome lightning repository which

00:08:25,360 --> 00:08:28,720
holds

00:08:26,879 --> 00:08:30,080
as the name suggests nightly builds of

00:08:28,720 --> 00:08:31,280
the development branch of genome

00:08:30,080 --> 00:08:33,120
components

00:08:31,280 --> 00:08:34,560
and there's also fedora's flatpack

00:08:33,120 --> 00:08:36,800
repository um

00:08:34,560 --> 00:08:38,080
apps in those repositories tend not to

00:08:36,800 --> 00:08:39,919
need the kind of automation we're

00:08:38,080 --> 00:08:42,159
talking about today

00:08:39,919 --> 00:08:43,360
and in the case of fedora the flat packs

00:08:42,159 --> 00:08:43,919
are built by a completely different

00:08:43,360 --> 00:08:46,240
process

00:08:43,919 --> 00:08:47,600
and this tool is not relevant at all if

00:08:46,240 --> 00:08:48,959
you're interested in how those ones are

00:08:47,600 --> 00:08:49,360
built then stick around for the next

00:08:48,959 --> 00:08:51,200
talk

00:08:49,360 --> 00:08:54,080
in just under an hour when we'll hear

00:08:51,200 --> 00:08:57,760
about that

00:08:54,080 --> 00:08:59,600
okay normally when flat hub builds

00:08:57,760 --> 00:09:02,160
a flat pack application the resulting

00:08:59,600 --> 00:09:05,360
full files are stored as an immutable

00:09:02,160 --> 00:09:07,040
os tree snapshot um which users then

00:09:05,360 --> 00:09:10,080
just download from the repository

00:09:07,040 --> 00:09:11,920
and run straight from disk but flatpack

00:09:10,080 --> 00:09:14,000
does have a somewhat unusual feature

00:09:11,920 --> 00:09:16,000
which allows an app to download and

00:09:14,000 --> 00:09:17,440
unpack additional files from a

00:09:16,000 --> 00:09:20,240
third-party server

00:09:17,440 --> 00:09:22,640
at the time when the app is installed

00:09:20,240 --> 00:09:24,959
this feature mainly exists to support

00:09:22,640 --> 00:09:26,640
installing applications using flat pack

00:09:24,959 --> 00:09:29,360
when the repository owner

00:09:26,640 --> 00:09:30,880
doesn't have permission to redistribute

00:09:29,360 --> 00:09:33,200
the app itself

00:09:30,880 --> 00:09:34,160
um so for an example here is what

00:09:33,200 --> 00:09:37,519
happens today

00:09:34,160 --> 00:09:40,000
if you install skype from flat hub

00:09:37,519 --> 00:09:42,080
using the command line or using gnome

00:09:40,000 --> 00:09:43,839
software or another front end

00:09:42,080 --> 00:09:45,440
so first of all flat pack running on

00:09:43,839 --> 00:09:48,640
your computer fetches and

00:09:45,440 --> 00:09:52,000
installs the com.skype.compack

00:09:48,640 --> 00:09:53,760
from hub it also fetches the

00:09:52,000 --> 00:09:56,399
runtime that it depends on if you don't

00:09:53,760 --> 00:09:58,959
already have it installed

00:09:56,399 --> 00:10:00,800
so that flat pack app com.skype.client

00:09:58,959 --> 00:10:02,399
it contains the open source libraries

00:10:00,800 --> 00:10:04,399
that skype depends on

00:10:02,399 --> 00:10:06,160
that's things like v4l utils to talk to

00:10:04,399 --> 00:10:07,440
the webcam and lip secret to talk to

00:10:06,160 --> 00:10:09,600
your keyring

00:10:07,440 --> 00:10:11,680
but it doesn't actually contain skype

00:10:09,600 --> 00:10:13,519
itself flat hub does not have permission

00:10:11,680 --> 00:10:15,600
to redistribute skype

00:10:13,519 --> 00:10:17,120
so instead the flat pack contains the

00:10:15,600 --> 00:10:20,560
url to the

00:10:17,120 --> 00:10:23,920
dev package of skype the expected

00:10:20,560 --> 00:10:25,120
size invites and the sha256 checksum of

00:10:23,920 --> 00:10:27,600
that file

00:10:25,120 --> 00:10:30,160
and a script which will be used to

00:10:27,600 --> 00:10:33,360
unpack that deb file

00:10:30,160 --> 00:10:36,079
so next having downloaded the

00:10:33,360 --> 00:10:36,800
the app minus the app itself and the

00:10:36,079 --> 00:10:40,079
runtime

00:10:36,800 --> 00:10:40,959
from bathtub flat pack running on your

00:10:40,079 --> 00:10:43,760
computer

00:10:40,959 --> 00:10:44,160
downloads the skype dev file directly

00:10:43,760 --> 00:10:47,760
from

00:10:44,160 --> 00:10:49,760
skype it verifies that the deb file has

00:10:47,760 --> 00:10:51,760
the expected size and checksum

00:10:49,760 --> 00:10:53,760
and if it does it will run the script

00:10:51,760 --> 00:10:56,160
that was included in the flat pack app

00:10:53,760 --> 00:10:58,000
to unpack it and this script is run in a

00:10:56,160 --> 00:10:59,760
strict sandbox and once it's finished

00:10:58,000 --> 00:11:00,399
the files it's extracted are made read

00:10:59,760 --> 00:11:02,079
only

00:11:00,399 --> 00:11:03,519
just like all the other files in a

00:11:02,079 --> 00:11:06,079
flatpack app

00:11:03,519 --> 00:11:07,200
and flathub didn't distribute skype

00:11:06,079 --> 00:11:09,440
itself

00:11:07,200 --> 00:11:12,079
but the end result once you install the

00:11:09,440 --> 00:11:14,560
app is almost the same as if you had

00:11:12,079 --> 00:11:15,519
you can treat it as just like any other

00:11:14,560 --> 00:11:17,519
flatpak app

00:11:15,519 --> 00:11:18,560
you can update it in the background

00:11:17,519 --> 00:11:19,839
while it is running

00:11:18,560 --> 00:11:22,160
um and the next time you start it you'll

00:11:19,839 --> 00:11:24,560
get the new version you can uninstall it

00:11:22,160 --> 00:11:26,399
and mostly it behaves just as you'd

00:11:24,560 --> 00:11:28,000
expect

00:11:26,399 --> 00:11:29,279
maybe as i was saying that you could

00:11:28,000 --> 00:11:30,079
think of some ways that this process

00:11:29,279 --> 00:11:33,760
might go

00:11:30,079 --> 00:11:34,880
wrong so when a new version of skype is

00:11:33,760 --> 00:11:36,720
released

00:11:34,880 --> 00:11:38,560
the url for the old version will

00:11:36,720 --> 00:11:40,800
eventually stop working

00:11:38,560 --> 00:11:42,640
and so if the flat pack app which

00:11:40,800 --> 00:11:45,040
contains the url to download it from is

00:11:42,640 --> 00:11:48,399
not updated before that point

00:11:45,040 --> 00:11:50,000
new users will not be able to install

00:11:48,399 --> 00:11:51,040
this new release of skype well in fact

00:11:50,000 --> 00:11:52,000
they won't be able to install the old

00:11:51,040 --> 00:11:53,600
one either

00:11:52,000 --> 00:11:55,200
and if you already have skype installed

00:11:53,600 --> 00:11:57,200
in your system with flat pack

00:11:55,200 --> 00:11:59,360
you won't be able to update it it will

00:11:57,200 --> 00:12:02,160
keep working but you can't update it

00:11:59,360 --> 00:12:02,480
and even worse sometimes vendors publish

00:12:02,160 --> 00:12:05,360
a

00:12:02,480 --> 00:12:06,560
new version of the app at the same url

00:12:05,360 --> 00:12:07,839
as the old version

00:12:06,560 --> 00:12:09,760
and so of course the new version will

00:12:07,839 --> 00:12:12,079
have a different size and some

00:12:09,760 --> 00:12:13,200
and flat pack will refuse to unpack it

00:12:12,079 --> 00:12:15,279
when you try to install it

00:12:13,200 --> 00:12:16,480
and so again installation will fail and

00:12:15,279 --> 00:12:17,760
this is worse because it happens

00:12:16,480 --> 00:12:18,639
immediately that the new version is

00:12:17,760 --> 00:12:21,600
released

00:12:18,639 --> 00:12:23,120
um it's you know there's no there's no

00:12:21,600 --> 00:12:24,880
grace period where the old files is

00:12:23,120 --> 00:12:27,200
still clicking around in the repository

00:12:24,880 --> 00:12:28,800
or on their cdn like done doesn't work

00:12:27,200 --> 00:12:31,360
anymore

00:12:28,800 --> 00:12:32,160
so we do need a way to keep these flat

00:12:31,360 --> 00:12:34,560
packs

00:12:32,160 --> 00:12:37,760
which are extra data up to date and

00:12:34,560 --> 00:12:39,920
ideally do this automatically

00:12:37,760 --> 00:12:41,760
time for a bit of a history lesson um if

00:12:39,920 --> 00:12:43,040
you cast your mind back to the middle of

00:12:41,760 --> 00:12:45,360
00:12:43,040 --> 00:12:46,959
but try not to think about the politics

00:12:45,360 --> 00:12:48,079
stuff um and concentrate on the

00:12:46,959 --> 00:12:51,040
computers

00:12:48,079 --> 00:12:52,399
so back then um at the start of 2016

00:12:51,040 --> 00:12:55,440
flatback did not exist

00:12:52,399 --> 00:12:59,279
but a precursor tool called xdg

00:12:55,440 --> 00:13:01,440
hyphen app existed um so during 2016

00:12:59,279 --> 00:13:02,399
that was rebranded as the much snappier

00:13:01,440 --> 00:13:05,519
and easier to say

00:13:02,399 --> 00:13:06,399
flat pack and endless os um was being

00:13:05,519 --> 00:13:08,720
rebuilt

00:13:06,399 --> 00:13:10,079
from using a bespoke app management tool

00:13:08,720 --> 00:13:12,800
to use flat packs

00:13:10,079 --> 00:13:14,079
for apps um i i borrowed this image

00:13:12,800 --> 00:13:15,519
which is a kind of publicity image of

00:13:14,079 --> 00:13:17,040
endless os at the time

00:13:15,519 --> 00:13:20,320
from the press release which announced

00:13:17,040 --> 00:13:22,079
flat pack back in 2016. so

00:13:20,320 --> 00:13:23,440
if you're not familiar with endless os

00:13:22,079 --> 00:13:26,000
it's a desktop os

00:13:23,440 --> 00:13:27,519
with some properties borrowed from

00:13:26,000 --> 00:13:31,200
mobile oss

00:13:27,519 --> 00:13:32,320
um so behind the scenes rather like ios

00:13:31,200 --> 00:13:34,480
and android and

00:13:32,320 --> 00:13:35,680
rather unlike most traditional linux

00:13:34,480 --> 00:13:38,320
distributions

00:13:35,680 --> 00:13:40,800
each release of endless os is an

00:13:38,320 --> 00:13:44,399
immutable os tree snapshot

00:13:40,800 --> 00:13:47,199
um so although it's derived from debian

00:13:44,399 --> 00:13:49,600
it's not possible to install new apps

00:13:47,199 --> 00:13:51,680
using tools like d package

00:13:49,600 --> 00:13:53,279
updates for endless os are distributed

00:13:51,680 --> 00:13:56,240
as new os 3 snapshots

00:13:53,279 --> 00:13:57,440
which are unpacked and then you reboot

00:13:56,240 --> 00:14:01,360
and you're in the new version

00:13:57,440 --> 00:14:04,160
atomically as you may know flat pack

00:14:01,360 --> 00:14:04,720
uses os tree behind the scenes for its

00:14:04,160 --> 00:14:06,720
own

00:14:04,720 --> 00:14:08,560
um snapshot based installation and

00:14:06,720 --> 00:14:11,440
updates and so we adopted that on end

00:14:08,560 --> 00:14:13,519
os and apps on end sos can be installed

00:14:11,440 --> 00:14:15,519
using flat pack which means every app

00:14:13,519 --> 00:14:16,800
just like the os itself is hermetically

00:14:15,519 --> 00:14:18,320
sealed snapshot

00:14:16,800 --> 00:14:21,440
and one of the really nice things this

00:14:18,320 --> 00:14:23,279
enables is robust automatic updates

00:14:21,440 --> 00:14:24,520
both of the os and of the apps

00:14:23,279 --> 00:14:26,000
themselves um

00:14:24,520 --> 00:14:27,760
[Music]

00:14:26,000 --> 00:14:30,639
many of our target users are not

00:14:27,760 --> 00:14:31,760
computer savvy um having to manually

00:14:30,639 --> 00:14:33,120
operate updates

00:14:31,760 --> 00:14:34,800
decide whether they want to reboot their

00:14:33,120 --> 00:14:37,279
computer or not um

00:14:34,800 --> 00:14:38,560
is is not something we want to do and

00:14:37,279 --> 00:14:40,079
we've been very happy

00:14:38,560 --> 00:14:41,600
just allowing the os and the apps to

00:14:40,079 --> 00:14:44,800
update themselves automatically

00:14:41,600 --> 00:14:45,440
um this this is very robust it works

00:14:44,800 --> 00:14:48,720
very well

00:14:45,440 --> 00:14:51,839
and it's uh basically invisible

00:14:48,720 --> 00:14:55,440
um which is exactly what you want so

00:14:51,839 --> 00:14:59,120
nsos has many unique apps for offline

00:14:55,440 --> 00:15:02,320
um contents be that uh

00:14:59,120 --> 00:15:03,360
copies of wikipedia uh other tutorials

00:15:02,320 --> 00:15:06,480
and guides

00:15:03,360 --> 00:15:08,000
um how to use blender and so on these

00:15:06,480 --> 00:15:08,639
are built using a custom flatpack

00:15:08,000 --> 00:15:10,320
runtime

00:15:08,639 --> 00:15:12,320
and a custom build pipeline and they're

00:15:10,320 --> 00:15:13,680
published in our own flat pack

00:15:12,320 --> 00:15:17,120
repository

00:15:13,680 --> 00:15:17,600
but of course users need regular apps

00:15:17,120 --> 00:15:19,600
too

00:15:17,600 --> 00:15:21,440
for productivity and creativity and

00:15:19,600 --> 00:15:25,040
chaos

00:15:21,440 --> 00:15:28,639
so back in 2016

00:15:25,040 --> 00:15:31,839
flat hub didn't exist and so we built

00:15:28,639 --> 00:15:32,959
and published flat packs for a bunch of

00:15:31,839 --> 00:15:35,040
third-party apps

00:15:32,959 --> 00:15:37,759
in our own flatback laundry too

00:15:35,040 --> 00:15:39,600
alongside our first party content apps

00:15:37,759 --> 00:15:42,160
and most of these apps were open source

00:15:39,600 --> 00:15:43,199
apps um but our users expected to be

00:15:42,160 --> 00:15:45,360
able to install

00:15:43,199 --> 00:15:46,720
some apps such as skype spotify and

00:15:45,360 --> 00:15:49,040
dropbox which happened to be the

00:15:46,720 --> 00:15:49,759
first three when i did some history

00:15:49,040 --> 00:15:52,000
research

00:15:49,759 --> 00:15:52,800
preparing this talk so those three were

00:15:52,000 --> 00:15:54,240
built as

00:15:52,800 --> 00:15:55,839
extra data flat packs using the

00:15:54,240 --> 00:15:57,440
mechanism i just described

00:15:55,839 --> 00:15:59,360
tricky russia who worked at endless at

00:15:57,440 --> 00:16:01,040
the time wrote a jenkins job

00:15:59,360 --> 00:16:03,199
which would check for new versions of

00:16:01,040 --> 00:16:05,440
these apps and it would just email

00:16:03,199 --> 00:16:08,399
the endless engineering team when the

00:16:05,440 --> 00:16:12,160
flat packs needed to be updated

00:16:08,399 --> 00:16:14,320
so as the list of third-party apps grew

00:16:12,160 --> 00:16:16,240
steadily larger this script got more

00:16:14,320 --> 00:16:18,399
complicated to deal with

00:16:16,240 --> 00:16:20,320
different ways to check for updates so

00:16:18,399 --> 00:16:22,320
stroking rewrote it in python

00:16:20,320 --> 00:16:24,399
and he published it as the first version

00:16:22,320 --> 00:16:24,959
of flat pack external data checker the

00:16:24,399 --> 00:16:28,720
subject

00:16:24,959 --> 00:16:29,360
of today's talk so fast forward a couple

00:16:28,720 --> 00:16:32,720
of years

00:16:29,360 --> 00:16:35,680
and in 2018 flat hub was born

00:16:32,720 --> 00:16:37,040
we quickly enabled it by default in nsos

00:16:35,680 --> 00:16:39,600
and we began moving

00:16:37,040 --> 00:16:41,680
these third-party apps from our own flat

00:16:39,600 --> 00:16:44,399
pack repository into flat hub

00:16:41,680 --> 00:16:45,360
um all the open source ones and the few

00:16:44,399 --> 00:16:48,480
that were using

00:16:45,360 --> 00:16:49,040
extra data so i found a funny commit

00:16:48,480 --> 00:16:52,000
from

00:16:49,040 --> 00:16:53,279
nick richards from july in 2018. nick

00:16:52,000 --> 00:16:54,160
used to work at endless and he's still

00:16:53,279 --> 00:16:56,560
very involved

00:16:54,160 --> 00:16:59,040
in flat hub today the commit message

00:16:56,560 --> 00:17:01,199
reads check extra data for most

00:16:59,040 --> 00:17:02,639
flat hub repositories but as you might

00:17:01,199 --> 00:17:05,760
be able to see here

00:17:02,639 --> 00:17:06,720
most means 16 apps um flat hub has come

00:17:05,760 --> 00:17:10,079
a really long way

00:17:06,720 --> 00:17:11,439
in these three years at this point the

00:17:10,079 --> 00:17:12,720
process was still the same as when it

00:17:11,439 --> 00:17:15,039
was first created

00:17:12,720 --> 00:17:17,039
when an app needed to be updated the dev

00:17:15,039 --> 00:17:18,880
team at endless would get an email from

00:17:17,039 --> 00:17:20,640
jenkins and someone would have to go and

00:17:18,880 --> 00:17:23,360
manually update the relevant

00:17:20,640 --> 00:17:23,360
manifest file

00:17:23,919 --> 00:17:27,120
it came to pass that i was often the one

00:17:26,000 --> 00:17:29,679
who got those emails

00:17:27,120 --> 00:17:31,600
and i got tired of doing it by hand and

00:17:29,679 --> 00:17:34,000
i love to spend more time than is

00:17:31,600 --> 00:17:36,080
really advisable automating simple tasks

00:17:34,000 --> 00:17:38,240
so at the start of 2019

00:17:36,080 --> 00:17:40,480
i taught flat pipe external data checker

00:17:38,240 --> 00:17:43,200
to update the flat pack manifest

00:17:40,480 --> 00:17:43,840
and open a pull request so at this point

00:17:43,200 --> 00:17:46,400
it was still

00:17:43,840 --> 00:17:47,520
running out of endless jenkins as you

00:17:46,400 --> 00:17:49,120
might be able to see from this

00:17:47,520 --> 00:17:50,640
screenshots there's this cryptically

00:17:49,120 --> 00:17:53,760
named github user eos

00:17:50,640 --> 00:17:55,840
shell build and this seems to have been

00:17:53,760 --> 00:17:56,880
the first pull request it opened at

00:17:55,840 --> 00:17:58,480
least on flat hub

00:17:56,880 --> 00:18:00,160
and at least when running from our

00:17:58,480 --> 00:18:02,000
jenkins rather than me running it by

00:18:00,160 --> 00:18:04,000
hand on my development system

00:18:02,000 --> 00:18:06,000
with my own api key as my own github

00:18:04,000 --> 00:18:07,520
user um

00:18:06,000 --> 00:18:09,760
this first pull request was actually

00:18:07,520 --> 00:18:10,400
declined and because somebody manually

00:18:09,760 --> 00:18:12,080
opened

00:18:10,400 --> 00:18:13,679
another pull request for a slightly

00:18:12,080 --> 00:18:14,240
newer version of dropbox shortly

00:18:13,679 --> 00:18:15,520
afterwards

00:18:14,240 --> 00:18:17,840
but if they had not done so this would

00:18:15,520 --> 00:18:19,280
have been just grand um

00:18:17,840 --> 00:18:21,039
one of the really nice things about this

00:18:19,280 --> 00:18:23,760
workflow is that flat hub

00:18:21,039 --> 00:18:25,600
has a continuous integration which

00:18:23,760 --> 00:18:28,240
automatically makes a test build

00:18:25,600 --> 00:18:29,840
of every pull request so as a maintainer

00:18:28,240 --> 00:18:30,640
you receive a pull request and shortly

00:18:29,840 --> 00:18:33,440
afterwards

00:18:30,640 --> 00:18:35,200
you have a url that you can use to just

00:18:33,440 --> 00:18:38,000
install and test that test build

00:18:35,200 --> 00:18:39,039
copy paste it run the app and assuming

00:18:38,000 --> 00:18:40,640
it works

00:18:39,039 --> 00:18:43,360
you just hit merge on the pull request

00:18:40,640 --> 00:18:45,679
that's it no manual editing of json

00:18:43,360 --> 00:18:45,679
files

00:18:45,919 --> 00:18:51,280
so um

00:18:49,120 --> 00:18:52,880
platformier petroski is a devops

00:18:51,280 --> 00:18:54,880
engineer at the genome foundation

00:18:52,880 --> 00:18:56,160
and he's one of the main administrators

00:18:54,880 --> 00:18:58,960
of flat hub

00:18:56,160 --> 00:19:00,400
so near the end of 2019 he deployed flat

00:18:58,960 --> 00:19:02,720
pack external data checker

00:19:00,400 --> 00:19:04,480
onto flat hub's own infrastructure and

00:19:02,720 --> 00:19:06,080
we moved the repository over to the flat

00:19:04,480 --> 00:19:09,360
hub organization

00:19:06,080 --> 00:19:12,640
so outside of the endless

00:19:09,360 --> 00:19:15,039
github and ci and it's now a

00:19:12,640 --> 00:19:16,400
shared flat hub project and he set it up

00:19:15,039 --> 00:19:19,440
to run every hour

00:19:16,400 --> 00:19:21,039
and check every app on flat hub which

00:19:19,440 --> 00:19:23,520
had the appropriate configuration in its

00:19:21,039 --> 00:19:25,520
manifest to allow the tool to work

00:19:23,520 --> 00:19:26,799
so making this tool more official had

00:19:25,520 --> 00:19:28,720
some nice results

00:19:26,799 --> 00:19:30,559
and before that some flat hub

00:19:28,720 --> 00:19:32,080
contributors had been a bit hesitant to

00:19:30,559 --> 00:19:34,000
integrate with a tool

00:19:32,080 --> 00:19:36,320
that was running on endless private ci

00:19:34,000 --> 00:19:38,000
infrastructure it's a bit opaque

00:19:36,320 --> 00:19:39,600
but as part of the flat hub organization

00:19:38,000 --> 00:19:40,640
they were happy to opt in safe from the

00:19:39,600 --> 00:19:43,120
knowledge that the fat hub

00:19:40,640 --> 00:19:45,520
administrators could intervene as needed

00:19:43,120 --> 00:19:47,679
um it was also made a requirement that

00:19:45,520 --> 00:19:48,559
if you submit a new extra data app to

00:19:47,679 --> 00:19:49,919
flat hub

00:19:48,559 --> 00:19:51,679
then it should integrate with this tool

00:19:49,919 --> 00:19:53,440
where possible and so of course that

00:19:51,679 --> 00:19:56,320
also helped with its adoption

00:19:53,440 --> 00:19:57,760
um so taken together these in turn led

00:19:56,320 --> 00:20:01,039
to more people contributing

00:19:57,760 --> 00:20:02,559
to the external data checker itself

00:20:01,039 --> 00:20:04,960
this seems to have been the first full

00:20:02,559 --> 00:20:08,240
request that was opened by the

00:20:04,960 --> 00:20:09,520
flat hub instance of the checker which

00:20:08,240 --> 00:20:12,320
funnily enough also seems to have been

00:20:09,520 --> 00:20:14,320
declined um it's running as the github

00:20:12,320 --> 00:20:16,240
user flat hub bots which is also the

00:20:14,320 --> 00:20:17,120
user which announces the urls for test

00:20:16,240 --> 00:20:18,880
builds

00:20:17,120 --> 00:20:20,400
um but those two systems actually don't

00:20:18,880 --> 00:20:21,840
really know anything about each other

00:20:20,400 --> 00:20:24,080
they happen to run as the same github

00:20:21,840 --> 00:20:26,240
user um

00:20:24,080 --> 00:20:27,679
happily coexisting what you might also

00:20:26,240 --> 00:20:28,799
notice here is that it hasn't just

00:20:27,679 --> 00:20:31,600
updated the url

00:20:28,799 --> 00:20:33,039
now it's also updated the app data file

00:20:31,600 --> 00:20:34,880
with the version number and release

00:20:33,039 --> 00:20:38,000
dates of the new build of zoom

00:20:34,880 --> 00:20:40,400
so it's extracted that from the url and

00:20:38,000 --> 00:20:41,919
put it into the xml which reduces one

00:20:40,400 --> 00:20:44,799
extra step you might have to do manually

00:20:41,919 --> 00:20:44,799
when you get an update

00:20:45,840 --> 00:20:48,960
when it was rolled out to flat hub

00:20:47,280 --> 00:20:50,640
something interesting and a little bit

00:20:48,960 --> 00:20:53,039
unexpected happened

00:20:50,640 --> 00:20:54,640
so although flat external data checker

00:20:53,039 --> 00:20:57,919
was originally created

00:20:54,640 --> 00:21:00,240
to update extra data flat packs um

00:20:57,919 --> 00:21:01,039
but it started to be adopted by regular

00:21:00,240 --> 00:21:03,600
flat packs

00:21:01,039 --> 00:21:05,120
to keep them up to date as well um when

00:21:03,600 --> 00:21:07,840
i prepared this talk there were

00:21:05,120 --> 00:21:09,840
112 apps on flat hub which have ever

00:21:07,840 --> 00:21:11,360
been updated by this tool at least once

00:21:09,840 --> 00:21:14,880
in their history

00:21:11,360 --> 00:21:17,280
and out of those 112 apps only 36

00:21:14,880 --> 00:21:18,559
are extra data and so that is the blue

00:21:17,280 --> 00:21:20,799
line in this graph

00:21:18,559 --> 00:21:21,919
and the remaining 76 apps are normal

00:21:20,799 --> 00:21:23,600
flat packs that

00:21:21,919 --> 00:21:25,120
flat hub can build and distribute in

00:21:23,600 --> 00:21:26,240
full and which will not break if the

00:21:25,120 --> 00:21:28,799
dependencies go away

00:21:26,240 --> 00:21:29,280
because the build is committed and saved

00:21:28,799 --> 00:21:31,200
in

00:21:29,280 --> 00:21:32,720
flat hubs infrastructure actually the

00:21:31,200 --> 00:21:34,400
source code is too so

00:21:32,720 --> 00:21:36,559
if the upstream goes away we've got to

00:21:34,400 --> 00:21:37,120
back up and so the red line in this

00:21:36,559 --> 00:21:38,720
graph

00:21:37,120 --> 00:21:41,039
are the normal flat packs which are

00:21:38,720 --> 00:21:42,720
being updated by flat pipe external data

00:21:41,039 --> 00:21:44,240
checker

00:21:42,720 --> 00:21:46,480
so you can probably see that both lines

00:21:44,240 --> 00:21:48,159
went up steadily over the course of 2020

00:21:46,480 --> 00:21:49,919
which is after this tool was deployed to

00:21:48,159 --> 00:21:51,919
flat hub at the end of 2019.

00:21:49,919 --> 00:21:53,760
um there's a nice bump right at the end

00:21:51,919 --> 00:21:56,960
of um 2019

00:21:53,760 --> 00:21:59,120
around here and i

00:21:56,960 --> 00:22:00,880
think this is the day that we merged

00:21:59,120 --> 00:22:03,440
support for updating

00:22:00,880 --> 00:22:05,200
jetbrains ides which was contributed by

00:22:03,440 --> 00:22:08,400
lctrs

00:22:05,200 --> 00:22:11,760
um since there were about six of those

00:22:08,400 --> 00:22:14,000
on flat hub already they all adopted it

00:22:11,760 --> 00:22:16,159
um you can probably also see that this

00:22:14,000 --> 00:22:18,080
checker really exploded in popularity

00:22:16,159 --> 00:22:19,440
for normal flat packs since the start of

00:22:18,080 --> 00:22:21,919
this year 2021

00:22:19,440 --> 00:22:22,880
so this year starts around here and the

00:22:21,919 --> 00:22:26,400
line

00:22:22,880 --> 00:22:27,039
just shoots up i think this is mainly

00:22:26,400 --> 00:22:29,120
because

00:22:27,039 --> 00:22:30,880
a prolific flat hub contributor who goes

00:22:29,120 --> 00:22:33,679
by the user name gas in vain

00:22:30,880 --> 00:22:34,880
became a co-maintainer of the flat pack

00:22:33,679 --> 00:22:37,679
external data checker

00:22:34,880 --> 00:22:40,240
near the end of 2020 and he contributed

00:22:37,679 --> 00:22:42,159
really a lot of nice improvements

00:22:40,240 --> 00:22:43,440
motivated by trying to keep up with the

00:22:42,159 --> 00:22:46,480
rapid release schedule

00:22:43,440 --> 00:22:48,240
of the open source telegram app he added

00:22:46,480 --> 00:22:50,840
several new ways to look for updated

00:22:48,240 --> 00:22:52,960
versions such as by checking

00:22:50,840 --> 00:22:54,960
releasemonitoring.org and using a

00:22:52,960 --> 00:22:56,240
general purpose json parser

00:22:54,960 --> 00:22:58,799
both of which we'll talk about a little

00:22:56,240 --> 00:23:00,159
more later um so as well as telegram

00:22:58,799 --> 00:23:00,960
this made it possible to check and

00:23:00,159 --> 00:23:02,480
update

00:23:00,960 --> 00:23:04,799
many more apps automatically than were

00:23:02,480 --> 00:23:08,400
supported before with the

00:23:04,799 --> 00:23:11,679
when the tool was targeting um uh

00:23:08,400 --> 00:23:13,520
extra data apps and

00:23:11,679 --> 00:23:15,840
if we switch to looking for a moment at

00:23:13,520 --> 00:23:17,919
the contributions to the

00:23:15,840 --> 00:23:19,919
external data checker itself um i think

00:23:17,919 --> 00:23:20,720
the graph of commits and number of lines

00:23:19,919 --> 00:23:22,080
changed

00:23:20,720 --> 00:23:23,840
uh speaks to the scale of his

00:23:22,080 --> 00:23:25,600
contributions to this project um

00:23:23,840 --> 00:23:27,760
you can see this gigantic mountain which

00:23:25,600 --> 00:23:29,679
emerges in 2020 2021.

00:23:27,760 --> 00:23:30,960
um i have to confess that i've actually

00:23:29,679 --> 00:23:33,280
barely worked on this tour

00:23:30,960 --> 00:23:34,880
myself this year um so i'd like to thank

00:23:33,280 --> 00:23:36,799
gas and vane and actually everyone who's

00:23:34,880 --> 00:23:40,400
contributed over the past two years

00:23:36,799 --> 00:23:40,400
uh for keeping this project moving along

00:23:40,880 --> 00:23:44,960
okay let's get back to um what the tool

00:23:43,840 --> 00:23:46,320
does

00:23:44,960 --> 00:23:48,960
so here i've plotted the number of

00:23:46,320 --> 00:23:50,960
repositories to which an update

00:23:48,960 --> 00:23:52,640
from flat pack external data checker was

00:23:50,960 --> 00:23:55,840
merged in any given month

00:23:52,640 --> 00:23:56,559
um so this shows in blue the number of

00:23:55,840 --> 00:23:58,880
commits

00:23:56,559 --> 00:23:59,840
and then read the number of repositories

00:23:58,880 --> 00:24:01,600
um

00:23:59,840 --> 00:24:03,279
not every app has an update every month

00:24:01,600 --> 00:24:05,679
which is why the number of

00:24:03,279 --> 00:24:07,520
repo's updated in the past few months is

00:24:05,679 --> 00:24:08,320
just 50 or so compared to the 100 or

00:24:07,520 --> 00:24:11,679
something

00:24:08,320 --> 00:24:13,279
in total over the last two years um

00:24:11,679 --> 00:24:15,120
the number of commits that it makes is

00:24:13,279 --> 00:24:15,679
consistently much higher than the number

00:24:15,120 --> 00:24:17,600
of

00:24:15,679 --> 00:24:18,720
apps so it's updating some apps multiple

00:24:17,600 --> 00:24:20,640
times per month

00:24:18,720 --> 00:24:24,000
and for the last two months there's been

00:24:20,640 --> 00:24:24,000
more than 100 updates per month

00:24:24,559 --> 00:24:30,080
and um here are the top 30

00:24:28,159 --> 00:24:31,440
apps and runtimes that it updates

00:24:30,080 --> 00:24:32,240
because one of the other things it

00:24:31,440 --> 00:24:33,679
learned to do

00:24:32,240 --> 00:24:36,000
as a result of these changes is to

00:24:33,679 --> 00:24:38,240
update uh runtimes which are used

00:24:36,000 --> 00:24:39,360
um as the name suggests to run apps but

00:24:38,240 --> 00:24:42,799
also to

00:24:39,360 --> 00:24:45,200
build time and as extensions to apps

00:24:42,799 --> 00:24:46,080
um and so this this chart is the number

00:24:45,200 --> 00:24:47,840
of commits

00:24:46,080 --> 00:24:49,600
ordered by flatback external data

00:24:47,840 --> 00:24:51,600
checker um

00:24:49,600 --> 00:24:53,919
i've colored the bars by whether the app

00:24:51,600 --> 00:24:55,440
is actually laser or not

00:24:53,919 --> 00:24:56,799
but i've just realized that the colors

00:24:55,440 --> 00:24:58,000
are the opposite way around compared to

00:24:56,799 --> 00:25:01,120
the earlier slide sorry

00:24:58,000 --> 00:25:04,159
so here the extra data apps are red

00:25:01,120 --> 00:25:06,320
and the normal apps are blue um

00:25:04,159 --> 00:25:08,320
this chart is uh doesn't take time into

00:25:06,320 --> 00:25:10,400
account so it will obviously be

00:25:08,320 --> 00:25:11,760
biased towards apps which have been

00:25:10,400 --> 00:25:13,120
using the tool for longer

00:25:11,760 --> 00:25:14,799
as opposed to apps we've adopted it

00:25:13,120 --> 00:25:16,799
recently but even so

00:25:14,799 --> 00:25:19,360
you can see quite an even split between

00:25:16,799 --> 00:25:22,840
extra data and normal apps

00:25:19,360 --> 00:25:26,080
the third most frequently updated app is

00:25:22,840 --> 00:25:27,360
rpcs3 which is a playstation 3 emulator

00:25:26,080 --> 00:25:28,480
apparently which is released under the

00:25:27,360 --> 00:25:31,279
gpl

00:25:28,480 --> 00:25:32,320
um flat hub tracks the master branch of

00:25:31,279 --> 00:25:34,320
that project

00:25:32,320 --> 00:25:35,360
uh which is a little unusual and

00:25:34,320 --> 00:25:37,840
typically flat hub

00:25:35,360 --> 00:25:38,799
contains releases of apps but i guess

00:25:37,840 --> 00:25:41,039
this is one of these

00:25:38,799 --> 00:25:42,000
fast moving projects where if you're at

00:25:41,039 --> 00:25:42,960
the bleeding edge

00:25:42,000 --> 00:25:45,120
you're likely to get better

00:25:42,960 --> 00:25:47,120
compatibility with games and

00:25:45,120 --> 00:25:48,400
the cost of an occasional broken build

00:25:47,120 --> 00:25:51,279
if master is broken

00:25:48,400 --> 00:25:52,080
in the upstream project is not so great

00:25:51,279 --> 00:25:55,360
um

00:25:52,080 --> 00:25:57,440
and so the trade-off is worth it and

00:25:55,360 --> 00:25:59,279
high up on this chart you can also see

00:25:57,440 --> 00:26:01,600
the

00:25:59,279 --> 00:26:03,440
rust nightly extension which is the

00:26:01,600 --> 00:26:05,279
nightly build of the rust tool chain

00:26:03,440 --> 00:26:08,240
which is of course open source

00:26:05,279 --> 00:26:09,600
as well as the insiders branch of visual

00:26:08,240 --> 00:26:12,640
studio code

00:26:09,600 --> 00:26:12,640
which is not open source

00:26:14,880 --> 00:26:19,600
um and that made me wonder if so many of

00:26:17,600 --> 00:26:20,080
the most frequently updated repositories

00:26:19,600 --> 00:26:22,559
are actually

00:26:20,080 --> 00:26:24,480
open source or if they're not open

00:26:22,559 --> 00:26:25,919
source they're redistributed at least

00:26:24,480 --> 00:26:27,679
um how does that compare to the

00:26:25,919 --> 00:26:28,880
proportion of apps of each kind on flat

00:26:27,679 --> 00:26:32,559
hub as a whole

00:26:28,880 --> 00:26:33,600
um so as i mentioned of the 112 repos

00:26:32,559 --> 00:26:36,240
that the checker has ever

00:26:33,600 --> 00:26:38,159
updated only 36 are extra data and the

00:26:36,240 --> 00:26:40,000
remaining 76 are normal

00:26:38,159 --> 00:26:41,200
fully redistributable flat packs and

00:26:40,000 --> 00:26:44,400
that's almost as many

00:26:41,200 --> 00:26:48,159
as the 79 extra data apps that flat hub

00:26:44,400 --> 00:26:50,240
has in total um so in relative terms

00:26:48,159 --> 00:26:51,679
the checker checks almost half of the

00:26:50,240 --> 00:26:53,919
actual data apps

00:26:51,679 --> 00:26:55,120
and there are so many other apps on flat

00:26:53,919 --> 00:26:56,960
hub um

00:26:55,120 --> 00:26:58,799
it only checks five five percent of

00:26:56,960 --> 00:27:01,200
those so far

00:26:58,799 --> 00:27:02,640
um if you're wondering why this chart

00:27:01,200 --> 00:27:05,679
suggests there are

00:27:02,640 --> 00:27:07,919
almost 1 600 apps on flat hub

00:27:05,679 --> 00:27:08,720
whereas if you ask the flat pack command

00:27:07,919 --> 00:27:10,880
line to list

00:27:08,720 --> 00:27:12,240
the apps in flat hub and it will give

00:27:10,880 --> 00:27:15,520
you more like 1

00:27:12,240 --> 00:27:17,919
200 um this is because

00:27:15,520 --> 00:27:19,039
the analysis is quite simplistic um i'm

00:27:17,919 --> 00:27:20,640
including end of life

00:27:19,039 --> 00:27:23,120
apps of which there are perhaps a few

00:27:20,640 --> 00:27:25,919
dozen but i'm also including runtimes

00:27:23,120 --> 00:27:27,120
and extensions and one thing i learned

00:27:25,919 --> 00:27:29,279
in the last couple of weeks is that

00:27:27,120 --> 00:27:31,760
there are more than 100

00:27:29,279 --> 00:27:33,039
plugins for digital audio workstations

00:27:31,760 --> 00:27:35,200
on flathub

00:27:33,039 --> 00:27:37,360
and and i think it's reasonable to cut

00:27:35,200 --> 00:27:40,399
those unfortunately those are all in the

00:27:37,360 --> 00:27:43,360
doesn't use the checker category so far

00:27:40,399 --> 00:27:44,080
anyway um personally i find these

00:27:43,360 --> 00:27:46,159
numbers

00:27:44,080 --> 00:27:47,440
pretty reassuring and i think it's

00:27:46,159 --> 00:27:49,919
reasonable to ask

00:27:47,440 --> 00:27:51,279
is it really desirable for flat hub to

00:27:49,919 --> 00:27:53,840
be publishing

00:27:51,279 --> 00:27:55,039
extra data wrappers for proprietary apps

00:27:53,840 --> 00:27:56,559
um

00:27:55,039 --> 00:27:58,799
even if you ignore the free software

00:27:56,559 --> 00:27:59,919
angle i'm going to quote from the flat

00:27:58,799 --> 00:28:02,320
hub websites

00:27:59,919 --> 00:28:03,120
that flat hub is primarily intended as a

00:28:02,320 --> 00:28:05,679
service

00:28:03,120 --> 00:28:06,320
which is used by app developers to

00:28:05,679 --> 00:28:09,520
distribute

00:28:06,320 --> 00:28:11,520
their apps and we would prefer that

00:28:09,520 --> 00:28:13,840
applications on flat hub are controlled

00:28:11,520 --> 00:28:16,559
by their authors

00:28:13,840 --> 00:28:17,200
so is this tool making it almost too

00:28:16,559 --> 00:28:21,279
easy

00:28:17,200 --> 00:28:22,960
to publish either extra wrappers or

00:28:21,279 --> 00:28:24,720
unofficial open source builds rather

00:28:22,960 --> 00:28:25,919
than encouraging the app developers

00:28:24,720 --> 00:28:28,320
themselves

00:28:25,919 --> 00:28:30,880
to publish their own apps directly to

00:28:28,320 --> 00:28:34,399
flat hub

00:28:30,880 --> 00:28:37,520
um so like flat hub as a whole i think

00:28:34,399 --> 00:28:38,720
i take a pragmatic start on this and

00:28:37,520 --> 00:28:41,919
there are some apps

00:28:38,720 --> 00:28:43,279
that people really do need to be able to

00:28:41,919 --> 00:28:46,720
run on their computers

00:28:43,279 --> 00:28:48,640
and the last year has shown us that

00:28:46,720 --> 00:28:50,640
running apps like zoom and microsoft

00:28:48,640 --> 00:28:52,399
teams and so on

00:28:50,640 --> 00:28:54,720
is for better or for worse it's not a

00:28:52,399 --> 00:28:57,520
matter of choice for a lot of people

00:28:54,720 --> 00:28:59,679
they need these apps to continue working

00:28:57,520 --> 00:29:01,600
or studying

00:28:59,679 --> 00:29:03,360
at least by distributing them with flat

00:29:01,600 --> 00:29:04,880
pack there's a chance that they are more

00:29:03,360 --> 00:29:05,840
tightly sandboxed than a traditional

00:29:04,880 --> 00:29:09,039
distro package

00:29:05,840 --> 00:29:11,600
would be and because flatby apps can be

00:29:09,039 --> 00:29:13,120
safely upgraded in the background

00:29:11,600 --> 00:29:13,919
automatically even when the app is

00:29:13,120 --> 00:29:16,880
running

00:29:13,919 --> 00:29:18,799
um if we can streamline and automate

00:29:16,880 --> 00:29:21,520
updating these apps on the server

00:29:18,799 --> 00:29:24,960
um then this potentially means that new

00:29:21,520 --> 00:29:26,960
versions reach the users more promptly

00:29:24,960 --> 00:29:28,480
and all those things i just described

00:29:26,960 --> 00:29:30,320
are obviously true for open source

00:29:28,480 --> 00:29:33,440
software as well which as we just saw

00:29:30,320 --> 00:29:35,520
is 95 of the software on flat hub

00:29:33,440 --> 00:29:37,360
and flat pack external data checker

00:29:35,520 --> 00:29:37,840
evidently helps many people to keep

00:29:37,360 --> 00:29:41,520
those

00:29:37,840 --> 00:29:44,080
apps up to date as well one

00:29:41,520 --> 00:29:44,559
very important class of software um

00:29:44,080 --> 00:29:46,720
where

00:29:44,559 --> 00:29:48,399
which really needs to be kept up to date

00:29:46,720 --> 00:29:50,799
is web browsers

00:29:48,399 --> 00:29:51,919
and chromium for example has been on

00:29:50,799 --> 00:29:55,760
flat hub for about

00:29:51,919 --> 00:29:59,120
six months chromium has a very rapid

00:29:55,760 --> 00:30:00,799
major release cadence i think

00:29:59,120 --> 00:30:02,559
historically it's released every six

00:30:00,799 --> 00:30:04,000
weeks and i saw some news about them

00:30:02,559 --> 00:30:05,440
trying to increase that speed to

00:30:04,000 --> 00:30:08,080
releasing every four weeks

00:30:05,440 --> 00:30:08,480
soon and even given that it releases so

00:30:08,080 --> 00:30:10,559
often

00:30:08,480 --> 00:30:12,640
for new major versions it's pretty

00:30:10,559 --> 00:30:13,520
common to see one or more point releases

00:30:12,640 --> 00:30:16,960
in between

00:30:13,520 --> 00:30:19,520
and those almost always fix very serious

00:30:16,960 --> 00:30:22,080
security vulnerabilities

00:30:19,520 --> 00:30:22,720
the chromium repository on flat hub is

00:30:22,080 --> 00:30:24,320
naturally

00:30:22,720 --> 00:30:26,000
wired up to flat pack external data

00:30:24,320 --> 00:30:29,520
checker so

00:30:26,000 --> 00:30:30,720
when a new release appears of chromium

00:30:29,520 --> 00:30:32,880
published by chromium the chromium

00:30:30,720 --> 00:30:33,679
project a pull request is pretty quickly

00:30:32,880 --> 00:30:36,240
created

00:30:33,679 --> 00:30:37,279
and a test build is made by the flat hub

00:30:36,240 --> 00:30:40,320
ci

00:30:37,279 --> 00:30:42,640
um major upgrades of chromium

00:30:40,320 --> 00:30:44,559
tend to need manual intervention um

00:30:42,640 --> 00:30:46,480
because the flat hub version has a dozen

00:30:44,559 --> 00:30:49,440
or so patches to better integrate

00:30:46,480 --> 00:30:50,480
with flat pack um if we get lucky those

00:30:49,440 --> 00:30:53,039
build cleanly

00:30:50,480 --> 00:30:55,520
but often we don't but these point

00:30:53,039 --> 00:30:58,880
releases do tend to build cleanly

00:30:55,520 --> 00:31:01,440
um back when we used to have chromium as

00:30:58,880 --> 00:31:02,960
a distro package in endless os at any

00:31:01,440 --> 00:31:04,559
point released involved a developer

00:31:02,960 --> 00:31:06,080
manually rebasing the package and our

00:31:04,559 --> 00:31:09,200
stack of patches

00:31:06,080 --> 00:31:10,080
building it which takes hours and then

00:31:09,200 --> 00:31:11,519
you test it

00:31:10,080 --> 00:31:13,600
and then you release it and then of

00:31:11,519 --> 00:31:16,399
course it was built into the os

00:31:13,600 --> 00:31:16,960
and the os is updated as a snapshot as a

00:31:16,399 --> 00:31:18,640
whole

00:31:16,960 --> 00:31:20,000
so we'd have to decide whether to adjust

00:31:18,640 --> 00:31:21,760
the os release schedule

00:31:20,000 --> 00:31:23,600
or delay getting the updates out to

00:31:21,760 --> 00:31:26,080
users so

00:31:23,600 --> 00:31:27,919
making the browser a flat pack has

00:31:26,080 --> 00:31:30,240
removed that last components

00:31:27,919 --> 00:31:32,240
and automating these updates has meant

00:31:30,240 --> 00:31:34,480
for a much better workflow um

00:31:32,240 --> 00:31:35,519
a chromium release is published a pull

00:31:34,480 --> 00:31:37,120
request appears

00:31:35,519 --> 00:31:38,399
a few hours later it still takes a while

00:31:37,120 --> 00:31:39,679
to build chromium even on a very

00:31:38,399 --> 00:31:41,039
powerful build server

00:31:39,679 --> 00:31:43,120
but a few hours later a test build

00:31:41,039 --> 00:31:45,679
appears and someone can test it

00:31:43,120 --> 00:31:47,039
and in the happy path they press merge

00:31:45,679 --> 00:31:49,760
and it goes out to users

00:31:47,039 --> 00:31:50,640
within a few hours potentially of being

00:31:49,760 --> 00:31:53,360
published

00:31:50,640 --> 00:31:55,039
um which is a much more responsive

00:31:53,360 --> 00:31:57,679
workflow

00:31:55,039 --> 00:31:58,799
um from the kind of first party app

00:31:57,679 --> 00:32:01,200
publisher perspective

00:31:58,799 --> 00:32:02,240
i publish a few of my own apps on flat

00:32:01,200 --> 00:32:03,519
hub

00:32:02,240 --> 00:32:05,039
and even in the case where i'm

00:32:03,519 --> 00:32:06,640
publishing my own app it's really nice

00:32:05,039 --> 00:32:08,720
to have a computer program

00:32:06,640 --> 00:32:10,159
do this boring work of updating a json

00:32:08,720 --> 00:32:12,399
file for for you

00:32:10,159 --> 00:32:15,279
um i also somewhat maintain the flat

00:32:12,399 --> 00:32:17,519
packs for maybe a dozen more apps

00:32:15,279 --> 00:32:19,760
mostly open source and for example

00:32:17,519 --> 00:32:21,360
getting notified of a new upstream

00:32:19,760 --> 00:32:23,279
release of tux paint

00:32:21,360 --> 00:32:24,799
in the form of a pull request that i can

00:32:23,279 --> 00:32:28,399
easily test

00:32:24,799 --> 00:32:31,120
really makes this a lot more manageable

00:32:28,399 --> 00:32:31,840
of course there are other models of

00:32:31,120 --> 00:32:34,880
publishing

00:32:31,840 --> 00:32:36,640
new versions of apps into um a

00:32:34,880 --> 00:32:38,799
repository like flat hub which

00:32:36,640 --> 00:32:40,320
could work just as well or maybe even

00:32:38,799 --> 00:32:41,840
better um

00:32:40,320 --> 00:32:44,799
sticking with web browsers for the time

00:32:41,840 --> 00:32:46,640
being the firefox flat pack on flat hub

00:32:44,799 --> 00:32:49,440
comes directly from mozilla

00:32:46,640 --> 00:32:50,000
and rather than being built by flat hub

00:32:49,440 --> 00:32:52,080
it's

00:32:50,000 --> 00:32:53,519
the binary directly from mozilla which

00:32:52,080 --> 00:32:55,679
is pushed directly

00:32:53,519 --> 00:32:56,799
into flat hub by mozilla's release

00:32:55,679 --> 00:32:59,760
process

00:32:56,799 --> 00:33:00,399
so security updates for firefox hit fl

00:32:59,760 --> 00:33:01,919
hub

00:33:00,399 --> 00:33:04,159
the moment they're released by mozilla

00:33:01,919 --> 00:33:06,480
without any intervening delay

00:33:04,159 --> 00:33:07,200
um there are downsides to this model as

00:33:06,480 --> 00:33:10,320
well

00:33:07,200 --> 00:33:11,840
um there's less visibility for flat hub

00:33:10,320 --> 00:33:15,360
into how this app is built

00:33:11,840 --> 00:33:17,360
um but for apps like like like firefox

00:33:15,360 --> 00:33:18,880
um having the official official package

00:33:17,360 --> 00:33:21,919
and the official

00:33:18,880 --> 00:33:23,760
bytes of the binary built by mozilla

00:33:21,919 --> 00:33:26,240
pushed immediately into flathub hub

00:33:23,760 --> 00:33:28,240
makes a lot of sense

00:33:26,240 --> 00:33:29,760
okay hopefully i've convinced you that

00:33:28,240 --> 00:33:30,640
this tool is useful to you as an app

00:33:29,760 --> 00:33:32,799
developer

00:33:30,640 --> 00:33:34,320
um or maybe you are submitting an extra

00:33:32,799 --> 00:33:36,080
data app to flat hub

00:33:34,320 --> 00:33:38,320
and you've discovered that this tool is

00:33:36,080 --> 00:33:39,360
mandatory okay how do you actually use

00:33:38,320 --> 00:33:41,279
it

00:33:39,360 --> 00:33:42,559
um the short version is you generally

00:33:41,279 --> 00:33:44,640
just need to add

00:33:42,559 --> 00:33:46,480
some special annotations to the app's

00:33:44,640 --> 00:33:49,120
manifest to tell

00:33:46,480 --> 00:33:50,399
the external data checker how to keep it

00:33:49,120 --> 00:33:51,840
up to date

00:33:50,399 --> 00:33:53,840
it's got about a dozen different

00:33:51,840 --> 00:33:56,799
checkers for various scenarios

00:33:53,840 --> 00:33:58,399
um i won't describe them all here but i

00:33:56,799 --> 00:34:02,240
will give a few

00:33:58,399 --> 00:34:03,840
illustrative examples um

00:34:02,240 --> 00:34:05,840
in case you're not familiar with flat

00:34:03,840 --> 00:34:07,919
pack manifests most of what you see here

00:34:05,840 --> 00:34:11,040
is quite standard this is an excerpt

00:34:07,919 --> 00:34:11,599
um from a json file which tells flat

00:34:11,040 --> 00:34:14,159
pack

00:34:11,599 --> 00:34:16,560
how to build the zoom flat pack

00:34:14,159 --> 00:34:18,800
lowercase f application

00:34:16,560 --> 00:34:20,639
and this section is the extra data

00:34:18,800 --> 00:34:23,200
source for zoom itself

00:34:20,639 --> 00:34:24,240
it tells flat pack that it's an extra

00:34:23,200 --> 00:34:26,720
data file

00:34:24,240 --> 00:34:28,159
and that it's only available for 64-bit

00:34:26,720 --> 00:34:30,560
intel platforms

00:34:28,159 --> 00:34:31,280
um it has the url from which you can

00:34:30,560 --> 00:34:34,320
download

00:34:31,280 --> 00:34:37,599
the file it has the sum expected

00:34:34,320 --> 00:34:40,720
and it has its size um and this x x

00:34:37,599 --> 00:34:42,639
checker data section is specific to

00:34:40,720 --> 00:34:44,480
flat pack external data checker and it's

00:34:42,639 --> 00:34:46,560
in it's ignored by flat pack builder

00:34:44,480 --> 00:34:50,399
when it's building the flat pack

00:34:46,560 --> 00:34:53,520
so in this case zoom has a magic url

00:34:50,399 --> 00:34:56,159
which is zoomed out a magic url

00:34:53,520 --> 00:34:57,920
which always redirects to the latest

00:34:56,159 --> 00:35:00,640
version of the app

00:34:57,920 --> 00:35:01,440
um so in this x checker data section we

00:35:00,640 --> 00:35:04,400
tell

00:35:01,440 --> 00:35:06,480
the tool to use the rotating url checker

00:35:04,400 --> 00:35:09,280
which expects this behavior of

00:35:06,480 --> 00:35:10,480
one url which redirects to the real url

00:35:09,280 --> 00:35:12,960
for the app

00:35:10,480 --> 00:35:14,240
and we provide a regular expression with

00:35:12,960 --> 00:35:17,200
a match group

00:35:14,240 --> 00:35:17,599
here which extracts the version number

00:35:17,200 --> 00:35:20,400
from

00:35:17,599 --> 00:35:22,079
that target url and that's all the

00:35:20,400 --> 00:35:24,960
configuration that's needed

00:35:22,079 --> 00:35:26,240
every hour flat hub runs the checker on

00:35:24,960 --> 00:35:29,280
this repo

00:35:26,240 --> 00:35:31,119
and the checker will poll this url

00:35:29,280 --> 00:35:32,800
find out what it redirects to and if it

00:35:31,119 --> 00:35:33,760
finds an update it will open a pull

00:35:32,800 --> 00:35:36,160
request

00:35:33,760 --> 00:35:37,280
and because we told it how to extract

00:35:36,160 --> 00:35:39,200
the version number

00:35:37,280 --> 00:35:42,800
as we saw earlier it can also update the

00:35:39,200 --> 00:35:42,800
app data file in the repository

00:35:43,200 --> 00:35:46,800
um here's another example this time

00:35:45,440 --> 00:35:49,040
using yaml syntax

00:35:46,800 --> 00:35:49,920
the two to interchangeable for flatpack

00:35:49,040 --> 00:35:51,680
manifests

00:35:49,920 --> 00:35:53,040
and this is for unity hub which is an

00:35:51,680 --> 00:35:56,000
app that can be used

00:35:53,040 --> 00:35:58,880
to in turn download and run unity which

00:35:56,000 --> 00:36:01,920
is a popular game development platform

00:35:58,880 --> 00:36:04,480
unity hub is distributed by unity

00:36:01,920 --> 00:36:06,079
only as an app image file which funnily

00:36:04,480 --> 00:36:09,680
enough is a competing laptop

00:36:06,079 --> 00:36:11,359
linux app distribution tool here we are

00:36:09,680 --> 00:36:13,520
flat pack external data checker has

00:36:11,359 --> 00:36:15,440
special handling for app image files

00:36:13,520 --> 00:36:17,359
um in particular it knows how to unpack

00:36:15,440 --> 00:36:18,880
them and look inside to work out what

00:36:17,359 --> 00:36:21,920
the version number is

00:36:18,880 --> 00:36:24,320
um and unity hub is actually an example

00:36:21,920 --> 00:36:26,079
of the situation i described earlier

00:36:24,320 --> 00:36:28,160
each new version of the app is published

00:36:26,079 --> 00:36:30,320
at the same url as the old one

00:36:28,160 --> 00:36:32,079
so each time a new version of unity hub

00:36:30,320 --> 00:36:34,160
is released the flat pack

00:36:32,079 --> 00:36:35,359
immediately stops being installable

00:36:34,160 --> 00:36:38,400
until we update

00:36:35,359 --> 00:36:39,359
its manifest on flat hub um when we

00:36:38,400 --> 00:36:41,839
first added

00:36:39,359 --> 00:36:44,000
unityhub to flathub we forgot to add

00:36:41,839 --> 00:36:47,040
this app to the big endless job that's

00:36:44,000 --> 00:36:48,560
uh checked uh flatpacks and

00:36:47,040 --> 00:36:50,880
the app broke almost immediately and we

00:36:48,560 --> 00:36:54,320
didn't notice for a few days

00:36:50,880 --> 00:36:57,280
so generally a human being is expected

00:36:54,320 --> 00:36:58,640
to actually test each update before

00:36:57,280 --> 00:37:00,560
publishing it on flatlap

00:36:58,640 --> 00:37:02,720
and so in the normal case the external

00:37:00,560 --> 00:37:04,400
data checker just opens a pull request

00:37:02,720 --> 00:37:06,240
and it waits for a human being to come

00:37:04,400 --> 00:37:09,280
along and test it and merge it

00:37:06,240 --> 00:37:10,960
um but in this case um it can

00:37:09,280 --> 00:37:13,119
it can tell that the existing version is

00:37:10,960 --> 00:37:14,800
broken because it's the same url with a

00:37:13,119 --> 00:37:16,960
new checksum

00:37:14,800 --> 00:37:17,920
and so it will automatically merge its

00:37:16,960 --> 00:37:20,960
own pull request

00:37:17,920 --> 00:37:22,400
provided that the ci checks which

00:37:20,960 --> 00:37:24,000
get the manifest is well formed and

00:37:22,400 --> 00:37:27,200
builds pass

00:37:24,000 --> 00:37:29,280
um so the the silver lining here is that

00:37:27,200 --> 00:37:31,920
there's no configuration needed at all

00:37:29,280 --> 00:37:32,880
um the checker has special handling for

00:37:31,920 --> 00:37:35,359
app image

00:37:32,880 --> 00:37:36,240
um it runs on this repository it fetches

00:37:35,359 --> 00:37:38,240
this url

00:37:36,240 --> 00:37:40,560
if it finds that it's shar sum and size

00:37:38,240 --> 00:37:43,200
have changed it sends a pull request

00:37:40,560 --> 00:37:44,560
and then the next time it runs it will

00:37:43,200 --> 00:37:47,280
check in on its own pull requests

00:37:44,560 --> 00:37:50,400
and if the ci has passed it merges it no

00:37:47,280 --> 00:37:52,560
extra configuration needed at all

00:37:50,400 --> 00:37:54,680
um i mentioned earlier that gas and vein

00:37:52,560 --> 00:37:56,560
added a back end for

00:37:54,680 --> 00:37:57,680
releasemonitoring.org which is also

00:37:56,560 --> 00:38:00,640
known as anita

00:37:57,680 --> 00:38:01,920
and it's maintained by fedora i think so

00:38:00,640 --> 00:38:03,440
if you're the developer of an open

00:38:01,920 --> 00:38:04,000
source flat pack application or you

00:38:03,440 --> 00:38:05,520
maintain

00:38:04,000 --> 00:38:08,000
a flat pack for one this could be

00:38:05,520 --> 00:38:10,079
particularly interesting for you

00:38:08,000 --> 00:38:11,920
this is the example of how that's used

00:38:10,079 --> 00:38:14,160
for the chromium flat pack

00:38:11,920 --> 00:38:15,520
we need to give it a numeric id for the

00:38:14,160 --> 00:38:18,240
project which you can find

00:38:15,520 --> 00:38:18,880
from the releasemonitoring.org websites

00:38:18,240 --> 00:38:20,640
and

00:38:18,880 --> 00:38:22,320
tell it to only get stable versions of

00:38:20,640 --> 00:38:25,680
chromium and provide it

00:38:22,320 --> 00:38:29,839
a template to how to for how to

00:38:25,680 --> 00:38:32,079
build a url for a given version um

00:38:29,839 --> 00:38:33,599
and that's that's all the configuration

00:38:32,079 --> 00:38:35,440
and the only other difference here you

00:38:33,599 --> 00:38:37,760
may have noticed is that the source

00:38:35,440 --> 00:38:38,800
is of type archive it's not of type

00:38:37,760 --> 00:38:41,839
extra data

00:38:38,800 --> 00:38:44,000
so this is because the this

00:38:41,839 --> 00:38:45,040
component is downloaded and compiled at

00:38:44,000 --> 00:38:47,280
build time

00:38:45,040 --> 00:38:49,200
on flat packs flat hub's built server

00:38:47,280 --> 00:38:51,839
rather than on the end user system

00:38:49,200 --> 00:38:52,480
chromium is a normal flat back and there

00:38:51,839 --> 00:38:55,520
are similar

00:38:52,480 --> 00:38:59,359
checkers for gnome components and pi pi

00:38:55,520 --> 00:38:59,359
packages and rust packages and so on

00:38:59,680 --> 00:39:02,320
here's a slightly more complicated

00:39:00,960 --> 00:39:03,920
example i mentioned earlier that

00:39:02,320 --> 00:39:07,359
telegram is the motivation

00:39:03,920 --> 00:39:08,079
for um a more more general purpose json

00:39:07,359 --> 00:39:10,720
plugin

00:39:08,079 --> 00:39:12,400
there are four inputs to the checker um

00:39:10,720 --> 00:39:14,240
in this example there's the url of the

00:39:12,400 --> 00:39:16,400
json file and

00:39:14,240 --> 00:39:18,000
there is uh three query expressions

00:39:16,400 --> 00:39:18,880
which tell the checker how to find the

00:39:18,000 --> 00:39:21,359
get tag

00:39:18,880 --> 00:39:23,040
the timestamp at which it was made and

00:39:21,359 --> 00:39:23,760
how to parse that tag to work out the

00:39:23,040 --> 00:39:25,920
version

00:39:23,760 --> 00:39:27,440
um these are using the syntax of the

00:39:25,920 --> 00:39:30,000
popular jq

00:39:27,440 --> 00:39:32,000
json processing tool um which the

00:39:30,000 --> 00:39:32,800
checker actually uses internally to do

00:39:32,000 --> 00:39:34,560
this

00:39:32,800 --> 00:39:35,920
you might hope that you can handle git

00:39:34,560 --> 00:39:38,400
tags unfortunately

00:39:35,920 --> 00:39:40,320
automatically but it's not always that

00:39:38,400 --> 00:39:43,280
simple

00:39:40,320 --> 00:39:44,880
for various tedious reasons um but the

00:39:43,280 --> 00:39:46,000
json checker is a really powerful tool

00:39:44,880 --> 00:39:48,320
that can be used for

00:39:46,000 --> 00:39:49,440
all kinds of sources not just releases

00:39:48,320 --> 00:39:51,599
on github

00:39:49,440 --> 00:39:52,720
um having said that there are some cases

00:39:51,599 --> 00:39:53,839
when you you can

00:39:52,720 --> 00:39:55,920
just handle git tags more

00:39:53,839 --> 00:39:57,520
straightforwardly um so this is an

00:39:55,920 --> 00:39:58,720
example of updating a dependency rather

00:39:57,520 --> 00:40:00,800
than the app itself

00:39:58,720 --> 00:40:02,720
um it's from reminer which is an open

00:40:00,800 --> 00:40:04,160
source remote desktop plan with many

00:40:02,720 --> 00:40:05,760
many dependencies

00:40:04,160 --> 00:40:07,599
most of which have the right annotations

00:40:05,760 --> 00:40:09,440
to be automatically updated

00:40:07,599 --> 00:40:10,880
so here's an example which checks for

00:40:09,440 --> 00:40:13,920
new git tags

00:40:10,880 --> 00:40:15,040
matching a regular expression in the

00:40:13,920 --> 00:40:18,240
repository for

00:40:15,040 --> 00:40:19,680
this dependency of this app and there

00:40:18,240 --> 00:40:21,760
are some rare occasions

00:40:19,680 --> 00:40:23,920
when you actually want the checker to

00:40:21,760 --> 00:40:25,200
automatically merge its own pull request

00:40:23,920 --> 00:40:26,720
um

00:40:25,200 --> 00:40:28,720
there's a flat hub better repository

00:40:26,720 --> 00:40:30,880
which contains beta repository which

00:40:28,720 --> 00:40:33,520
contains apps which for whatever reason

00:40:30,880 --> 00:40:35,359
aren't for general consumption and the

00:40:33,520 --> 00:40:37,359
unstable channel of visual studio code

00:40:35,359 --> 00:40:38,800
is published there the insiders build

00:40:37,359 --> 00:40:40,560
and the whole point of that build is

00:40:38,800 --> 00:40:41,440
that you want to get early access to

00:40:40,560 --> 00:40:43,040
features

00:40:41,440 --> 00:40:44,319
and stuff that might be broken and so

00:40:43,040 --> 00:40:45,680
again it's worth the risk of the

00:40:44,319 --> 00:40:47,839
occasional broken version

00:40:45,680 --> 00:40:48,720
of the app to get that automatically and

00:40:47,839 --> 00:40:50,720
so the

00:40:48,720 --> 00:40:52,160
vs code insiders build opts into that

00:40:50,720 --> 00:40:53,839
auto emerging behavior

00:40:52,160 --> 00:40:55,839
even in the case where the old version

00:40:53,839 --> 00:41:00,240
works fine by setting a file

00:40:55,839 --> 00:41:02,560
in the flathub dot json file in the repo

00:41:00,240 --> 00:41:03,440
um how do you actually test it yourself

00:41:02,560 --> 00:41:05,280
um

00:41:03,440 --> 00:41:06,640
rather than you could just edit the file

00:41:05,280 --> 00:41:07,760
push the flat hub and wake up wait an

00:41:06,640 --> 00:41:08,720
hour and see what happens but you can

00:41:07,760 --> 00:41:11,280
run the tool

00:41:08,720 --> 00:41:12,960
uh very simply yourself um it's

00:41:11,280 --> 00:41:13,520
published as a flat pack on playerhub

00:41:12,960 --> 00:41:15,520
and of course

00:41:13,520 --> 00:41:17,520
it keeps itself up to date automatically

00:41:15,520 --> 00:41:19,680
um it's not visible in

00:41:17,520 --> 00:41:21,440
um front ends like um software so you

00:41:19,680 --> 00:41:23,920
need to install it from the command line

00:41:21,440 --> 00:41:26,000
um and having done that you need to pass

00:41:23,920 --> 00:41:26,720
it the right arguments to give it access

00:41:26,000 --> 00:41:28,720
to

00:41:26,720 --> 00:41:30,400
the manifest file it's going to update

00:41:28,720 --> 00:41:31,599
by default it can't touch your file

00:41:30,400 --> 00:41:33,599
system at all

00:41:31,599 --> 00:41:34,720
um also by default it just prints out

00:41:33,599 --> 00:41:36,240
what it would like to do

00:41:34,720 --> 00:41:38,480
and there's an edit only flag which

00:41:36,240 --> 00:41:40,400
tells it to

00:41:38,480 --> 00:41:41,760
write the changes back to your working

00:41:40,400 --> 00:41:42,880
copy but not actually commit them or

00:41:41,760 --> 00:41:44,400
open the pro requests

00:41:42,880 --> 00:41:46,079
um there are other flags you can find

00:41:44,400 --> 00:41:47,920
with the

00:41:46,079 --> 00:41:49,200
help um to tell her to do different

00:41:47,920 --> 00:41:51,200
things

00:41:49,200 --> 00:41:52,560
if for some reason you prefer docker or

00:41:51,200 --> 00:41:54,960
podman

00:41:52,560 --> 00:41:56,880
maybe you want to run it in jenkins it's

00:41:54,960 --> 00:41:59,119
also available as a docker container

00:41:56,880 --> 00:42:01,040
in the github container registry and

00:41:59,119 --> 00:42:03,119
which works pretty similarly

00:42:01,040 --> 00:42:04,720
and for developments there's also a

00:42:03,119 --> 00:42:05,359
docker file in the repository that might

00:42:04,720 --> 00:42:06,960
be helpful

00:42:05,359 --> 00:42:09,280
if you want to get involved in

00:42:06,960 --> 00:42:10,319
developing it so speaking of which

00:42:09,280 --> 00:42:12,640
here's where it lives

00:42:10,319 --> 00:42:13,760
um there are some future plans kind of

00:42:12,640 --> 00:42:17,040
fuzzy um

00:42:13,760 --> 00:42:20,319
i mentioned earlier that um

00:42:17,040 --> 00:42:22,640
for node and python apps there are often

00:42:20,319 --> 00:42:23,599
very very large automatically generated

00:42:22,640 --> 00:42:24,960
manifests

00:42:23,599 --> 00:42:26,640
it would be interesting to teach this

00:42:24,960 --> 00:42:27,440
tool to automatically update those as

00:42:26,640 --> 00:42:29,920
well

00:42:27,440 --> 00:42:31,920
um you could also conceivably teach this

00:42:29,920 --> 00:42:33,599
tool to automatically update the runtime

00:42:31,920 --> 00:42:35,920
that the app uses

00:42:33,599 --> 00:42:37,599
um so there are plenty of ways you could

00:42:35,920 --> 00:42:39,280
get involved in contributing

00:42:37,599 --> 00:42:40,960
to the tool but perhaps the most obvious

00:42:39,280 --> 00:42:42,720
one is to start using it yourself

00:42:40,960 --> 00:42:45,040
and give feedback on how it works for

00:42:42,720 --> 00:42:47,200
you and if you're keen on writing

00:42:45,040 --> 00:42:49,599
documentation the perspective of a new

00:42:47,200 --> 00:42:51,440
user is always very very valuable

00:42:49,599 --> 00:42:53,599
um you could also contribute checkers

00:42:51,440 --> 00:42:55,680
for new software sources or maybe add

00:42:53,599 --> 00:42:58,160
some magic to some of the existing ones

00:42:55,680 --> 00:42:59,599
um and actually over the course of this

00:42:58,160 --> 00:43:01,839
talk i've realized that saying

00:42:59,599 --> 00:43:03,760
flat pack external data checker over and

00:43:01,839 --> 00:43:05,599
over again is quite clumsy

00:43:03,760 --> 00:43:08,000
so maybe you can think of a snappier

00:43:05,599 --> 00:43:11,359
name and a cool logo and that would be

00:43:08,000 --> 00:43:13,040
great stuff as well um

00:43:11,359 --> 00:43:14,400
that's all i have today uh thanks again

00:43:13,040 --> 00:43:14,880
to everyone who's contributed to this

00:43:14,400 --> 00:43:16,800
tool

00:43:14,880 --> 00:43:18,560
um over its lifetime it's come a very

00:43:16,800 --> 00:43:19,920
long way from a bash script on a private

00:43:18,560 --> 00:43:22,720
jenkins instance

00:43:19,920 --> 00:43:24,400
um the code i use to generate these

00:43:22,720 --> 00:43:27,839
graphs is at this repo

00:43:24,400 --> 00:43:27,839
um any questions

00:43:30,720 --> 00:43:34,560
yeah hello uh well we have some

00:43:32,640 --> 00:43:37,200
questions in the shared notes if you

00:43:34,560 --> 00:43:39,040
i i can read it for you so first

00:43:37,200 --> 00:43:40,720
question is

00:43:39,040 --> 00:43:42,720
uh can this tool be used to

00:43:40,720 --> 00:43:44,079
automatically update the runtime to use

00:43:42,720 --> 00:43:47,440
so we can avoid apps

00:43:44,079 --> 00:43:48,000
uh using deprecated genome kde or free

00:43:47,440 --> 00:43:51,440
desktop

00:43:48,000 --> 00:43:54,560
sdk etc and times great question

00:43:51,440 --> 00:43:55,680
uh yes as i i just mentioned the answer

00:43:54,560 --> 00:43:59,599
is no today it

00:43:55,680 --> 00:44:03,599
only updates um components of

00:43:59,599 --> 00:44:07,839
the app itself um updating the runtime

00:44:03,599 --> 00:44:09,440
is a seems like a nice feature that to

00:44:07,839 --> 00:44:11,040
add particularly given we have all of

00:44:09,440 --> 00:44:13,760
the infrastructure in place

00:44:11,040 --> 00:44:15,200
to run the tool check every repo open

00:44:13,760 --> 00:44:19,520
pull requests and so on

00:44:15,200 --> 00:44:21,680
um i i i think the key word in that

00:44:19,520 --> 00:44:24,000
question is that it's deprecated

00:44:21,680 --> 00:44:26,079
my personal position on this is that as

00:44:24,000 --> 00:44:27,599
long as a runtime is supported it's fine

00:44:26,079 --> 00:44:30,720
for apps to keep using it

00:44:27,599 --> 00:44:33,119
um but certainly

00:44:30,720 --> 00:44:34,400
there are many many apps kicking around

00:44:33,119 --> 00:44:36,720
which every year

00:44:34,400 --> 00:44:38,400
they they roll onto an unsupported

00:44:36,720 --> 00:44:39,119
runtime and having automation to update

00:44:38,400 --> 00:44:42,160
that

00:44:39,119 --> 00:44:43,839
uh would be a great start and often they

00:44:42,160 --> 00:44:46,079
build cleanly right so you can just test

00:44:43,839 --> 00:44:49,359
and merge just like everything else

00:44:46,079 --> 00:44:51,200
um the second question i see is can we

00:44:49,359 --> 00:44:55,680
use this tool to automate

00:44:51,200 --> 00:44:59,440
update gnome kde table in manifest

00:44:55,680 --> 00:45:02,960
the short answer is yes um

00:44:59,440 --> 00:45:05,359
in the specific case of gnome there is a

00:45:02,960 --> 00:45:07,119
gnome specific checker which knows how

00:45:05,359 --> 00:45:10,480
to contact the gnome

00:45:07,119 --> 00:45:11,359
download server and pass an index which

00:45:10,480 --> 00:45:15,760
is on there

00:45:11,359 --> 00:45:18,880
of available versions of the components

00:45:15,760 --> 00:45:19,359
it has some special handling for the odd

00:45:18,880 --> 00:45:22,640
even

00:45:19,359 --> 00:45:24,720
numbering convention that gnome has used

00:45:22,640 --> 00:45:26,079
prior to gnm40 and it has special

00:45:24,720 --> 00:45:29,119
handling of the

00:45:26,079 --> 00:45:31,200
dot alpha.beta dot rc um convention

00:45:29,119 --> 00:45:33,359
that's used from gnome 40 onwards

00:45:31,200 --> 00:45:34,960
um you can switch this off for

00:45:33,359 --> 00:45:38,240
components that

00:45:34,960 --> 00:45:40,240
don't follow that naming convention

00:45:38,240 --> 00:45:41,520
if you want an example of this the

00:45:40,240 --> 00:45:43,760
defeat

00:45:41,520 --> 00:45:44,800
debuss inspector tool which is on flat

00:45:43,760 --> 00:45:47,200
hub

00:45:44,800 --> 00:45:49,760
i recently updated that to use the gnome

00:45:47,200 --> 00:45:51,119
checker to update itself

00:45:49,760 --> 00:45:53,119
and that that's the case where i had to

00:45:51,119 --> 00:45:54,960
disable the um

00:45:53,119 --> 00:45:57,359
version the special handling of odd

00:45:54,960 --> 00:45:59,119
versions because it's version 0.3 point

00:45:57,359 --> 00:46:01,760
something

00:45:59,119 --> 00:46:03,040
kde i don't believe there is a dedicated

00:46:01,760 --> 00:46:05,760
kde checker

00:46:03,040 --> 00:46:07,359
if there is some way to use the one of

00:46:05,760 --> 00:46:09,200
the existing checkers to find new

00:46:07,359 --> 00:46:11,280
versions then it can certainly be used

00:46:09,200 --> 00:46:13,040
there's a checker which can scrape

00:46:11,280 --> 00:46:16,240
random html pages

00:46:13,040 --> 00:46:18,640
and the json one is

00:46:16,240 --> 00:46:20,400
a pretty good starting point for

00:46:18,640 --> 00:46:23,119
checking for arbitrary

00:46:20,400 --> 00:46:24,480
components for most pieces of software

00:46:23,119 --> 00:46:25,599
there's a json file somewhere which

00:46:24,480 --> 00:46:28,000
tells you about it

00:46:25,599 --> 00:46:29,040
so yes you can and please go ahead and

00:46:28,000 --> 00:46:43,359
do so and if

00:46:29,040 --> 00:46:46,400
it's awkward suggest ways to improve it

00:46:43,359 --> 00:46:47,280
so there is no any more questions i

00:46:46,400 --> 00:46:49,599
think we

00:46:47,280 --> 00:46:51,599
just wrapped up we can wrap up the ahead

00:46:49,599 --> 00:46:54,800
of time now

00:46:51,599 --> 00:46:56,000
okay thanks everyone yeah i i had my

00:46:54,800 --> 00:46:58,720
my email address was at the side of this

00:46:56,000 --> 00:47:01,920
deck the project url is here i'm on

00:46:58,720 --> 00:47:04,960
uh rc uh

00:47:01,920 --> 00:47:05,839
many services um yeah please get in

00:47:04,960 --> 00:47:08,319
touch

00:47:05,839 --> 00:47:09,599
i'd love to hear from you of um how the

00:47:08,319 --> 00:47:13,359
store works for you or

00:47:09,599 --> 00:47:16,880
how it doesn't work for you thanks

00:47:13,359 --> 00:47:25,839
thank you everyone please stay

00:47:16,880 --> 00:47:25,839
for the next talk

00:49:52,000 --> 00:49:55,920
right thank you again for the

00:49:54,240 --> 00:49:59,119
presentation

00:49:55,920 --> 00:50:02,240
next on stage we have

00:49:59,119 --> 00:50:05,680
jan burn and a token title making

00:50:02,240 --> 00:50:08,800
flatbacks from fedora rpms

00:50:05,680 --> 00:50:10,319
so welcome to our attendees please be

00:50:08,800 --> 00:50:12,160
reminded that if you want to ask

00:50:10,319 --> 00:50:13,440
questions to our speakers you can do so

00:50:12,160 --> 00:50:27,359
from the shared notes

00:50:13,440 --> 00:50:30,800
on the interface

00:50:27,359 --> 00:50:33,520
okay how can you hear me yes

00:50:30,800 --> 00:50:33,520
ah great

00:50:34,480 --> 00:50:41,119
so hello everybody my name is ian barano

00:50:37,760 --> 00:50:42,160
and i would like to tell you something

00:50:41,119 --> 00:50:46,640
about

00:50:42,160 --> 00:50:46,640
making flat packs from fedora rpms

00:50:47,280 --> 00:50:54,400
so here we have

00:50:50,640 --> 00:50:58,720
great we have an outline

00:50:54,400 --> 00:51:01,119
what are what are we going to talk about

00:50:58,720 --> 00:51:02,319
first of all i will start with the

00:51:01,119 --> 00:51:05,440
introduction

00:51:02,319 --> 00:51:09,839
and what is a flat pack and

00:51:05,440 --> 00:51:12,240
how does it work then i will move to

00:51:09,839 --> 00:51:13,839
fedora flat packs and fedora and

00:51:12,240 --> 00:51:17,440
flatbacks

00:51:13,839 --> 00:51:20,839
and then i will show you how you can

00:51:17,440 --> 00:51:22,480
build a flat pack from fedora rpm in a

00:51:20,839 --> 00:51:26,079
demonstration

00:51:22,480 --> 00:51:28,000
and uh if we will have some time i can

00:51:26,079 --> 00:51:30,960
tell you something about the future of

00:51:28,000 --> 00:51:30,960
fedora flatbacks

00:51:32,240 --> 00:51:41,040
so uh what is a flat pack

00:51:36,800 --> 00:51:44,960
i suppose uh everybody knows what is a

00:51:41,040 --> 00:51:49,280
traditional packaging system like rpm

00:51:44,960 --> 00:51:52,800
you just make a spec file in case of rpm

00:51:49,280 --> 00:51:53,520
and specify everything like source code

00:51:52,800 --> 00:51:56,640
and

00:51:53,520 --> 00:51:57,520
where to install the files and these

00:51:56,640 --> 00:51:59,119
things

00:51:57,520 --> 00:52:01,119
and when your application needs

00:51:59,119 --> 00:52:04,800
something you just

00:52:01,119 --> 00:52:07,599
make a dependency to another

00:52:04,800 --> 00:52:09,839
another package and it makes a nice

00:52:07,599 --> 00:52:14,240
dependency tree

00:52:09,839 --> 00:52:16,480
but this philosophy has some problems or

00:52:14,240 --> 00:52:18,240
other problems they are features but it

00:52:16,480 --> 00:52:21,440
can be annoying

00:52:18,240 --> 00:52:23,119
like for example if you install one

00:52:21,440 --> 00:52:24,960
application which can be

00:52:23,119 --> 00:52:27,200
quite small it can have many

00:52:24,960 --> 00:52:28,880
dependencies and the dependency 3 can be

00:52:27,200 --> 00:52:30,480
very huge

00:52:28,880 --> 00:52:33,359
of course it's not a problem it's a

00:52:30,480 --> 00:52:36,079
feature of a packaging system but

00:52:33,359 --> 00:52:36,640
it can be a problem but the second

00:52:36,079 --> 00:52:40,000
problem

00:52:36,640 --> 00:52:42,480
is that sometimes you can

00:52:40,000 --> 00:52:43,760
have problems with different versions of

00:52:42,480 --> 00:52:45,599
one package

00:52:43,760 --> 00:52:47,680
like for example if you need two

00:52:45,599 --> 00:52:50,960
applications and

00:52:47,680 --> 00:52:51,280
both applications depend on one package

00:52:50,960 --> 00:52:54,640
but

00:52:51,280 --> 00:52:56,640
in different version you you can have

00:52:54,640 --> 00:53:00,720
one package in different version at one

00:52:56,640 --> 00:53:05,200
time in your operating system

00:53:00,720 --> 00:53:09,119
so this problem can be solved for

00:53:05,200 --> 00:53:12,880
for example by containers when you

00:53:09,119 --> 00:53:12,880
make a container and

00:53:13,119 --> 00:53:17,599
uh when you make a container and install

00:53:15,440 --> 00:53:18,640
one application with its dependency in

00:53:17,599 --> 00:53:20,800
the container

00:53:18,640 --> 00:53:22,960
but it's not very convenient process

00:53:20,800 --> 00:53:24,800
because you have to create the container

00:53:22,960 --> 00:53:26,319
you have to install the application and

00:53:24,800 --> 00:53:29,839
switch between container and

00:53:26,319 --> 00:53:29,839
your host system

00:53:30,079 --> 00:53:36,160
so we have for example flatback that can

00:53:33,280 --> 00:53:36,160
solve this problem

00:53:36,880 --> 00:53:44,480
these dependencies as i speak before are

00:53:40,480 --> 00:53:48,160
divided into two groups

00:53:44,480 --> 00:53:51,520
first group is called runtime

00:53:48,160 --> 00:53:54,960
it's a big bundle of many

00:53:51,520 --> 00:53:58,079
libraries that are commonly used across

00:53:54,960 --> 00:54:00,720
a variety of applications

00:53:58,079 --> 00:54:02,880
and of course you can have more runtimes

00:54:00,720 --> 00:54:05,200
in your computer at one time

00:54:02,880 --> 00:54:07,040
that means you can have for example free

00:54:05,200 --> 00:54:10,400
desktop runtime

00:54:07,040 --> 00:54:13,760
fedora time and more run times

00:54:10,400 --> 00:54:17,680
and this end time is some

00:54:13,760 --> 00:54:20,800
base we can call repository for

00:54:17,680 --> 00:54:23,839
dependencies and if you install some

00:54:20,800 --> 00:54:26,880
application that is made as

00:54:23,839 --> 00:54:30,000
flat pack it just

00:54:26,880 --> 00:54:32,960
targets specific runtime and uses

00:54:30,000 --> 00:54:34,319
libraries from this runtime and that

00:54:32,960 --> 00:54:36,480
also means that

00:54:34,319 --> 00:54:38,640
when you can install a flatback on your

00:54:36,480 --> 00:54:39,680
operating system and you can install the

00:54:38,640 --> 00:54:42,160
runtime

00:54:39,680 --> 00:54:43,760
you can install the application as well

00:54:42,160 --> 00:54:45,599
that means the application does not

00:54:43,760 --> 00:54:47,760
target specific operating system but

00:54:45,599 --> 00:54:50,160
specific runtime

00:54:47,760 --> 00:54:52,079
but of course in the runtime there are

00:54:50,160 --> 00:54:55,839
no all the application

00:54:52,079 --> 00:54:59,280
no no libraries um not all libraries

00:54:55,839 --> 00:55:01,280
that's what i wanted to say and

00:54:59,280 --> 00:55:02,720
that's that's not a problem because you

00:55:01,280 --> 00:55:06,079
can

00:55:02,720 --> 00:55:08,079
bundle some specific libraries

00:55:06,079 --> 00:55:09,359
with your application and make it one

00:55:08,079 --> 00:55:13,200
flat pack as

00:55:09,359 --> 00:55:16,480
you can see here can i i can't

00:55:13,200 --> 00:55:20,160
anyway so that means you can use

00:55:16,480 --> 00:55:22,240
a library from the runtime and if there

00:55:20,160 --> 00:55:25,200
is no

00:55:22,240 --> 00:55:27,119
library that you need or there is the

00:55:25,200 --> 00:55:30,240
library but in a

00:55:27,119 --> 00:55:33,280
wrong version you can just bundle the

00:55:30,240 --> 00:55:36,240
right version of the library

00:55:33,280 --> 00:55:36,799
among your application and make it one

00:55:36,240 --> 00:55:40,000
package

00:55:36,799 --> 00:55:40,000
and ship it like that

00:55:40,079 --> 00:55:43,440
so that's the philosophy of flat pack

00:55:42,799 --> 00:55:47,359
you just

00:55:43,440 --> 00:55:50,400
grab your application grab a specific

00:55:47,359 --> 00:55:53,520
libraries make it one bundle

00:55:50,400 --> 00:55:55,599
and that's it and then

00:55:53,520 --> 00:55:57,200
on your host computer there is already

00:55:55,599 --> 00:56:01,040
the runtime

00:55:57,200 --> 00:56:01,040
and everything will go okay

00:56:01,359 --> 00:56:05,920
okay so that's uh flat back in general

00:56:06,400 --> 00:56:10,559
uh now i switch to uh fedora specific

00:56:09,440 --> 00:56:14,240
flat packs and

00:56:10,559 --> 00:56:17,920
flat packs in fedora so

00:56:14,240 --> 00:56:21,200
uh why we want uh special

00:56:17,920 --> 00:56:24,319
special federal flat packs the

00:56:21,200 --> 00:56:28,839
one reason is diversity because

00:56:24,319 --> 00:56:30,559
on flight hub there are 1200

00:56:28,839 --> 00:56:32,960
applications

00:56:30,559 --> 00:56:33,680
in a federal federal repository there

00:56:32,960 --> 00:56:35,920
are only

00:56:33,680 --> 00:56:37,839
100 applications that are made in

00:56:35,920 --> 00:56:40,000
flatbacks but there are

00:56:37,839 --> 00:56:41,119
thousands more applications that are

00:56:40,000 --> 00:56:45,440
already packaged

00:56:41,119 --> 00:56:48,160
as rpms and we would like to

00:56:45,440 --> 00:56:49,040
pack these rpm applications into flat

00:56:48,160 --> 00:56:52,480
pack

00:56:49,040 --> 00:56:55,280
and then ship them to practically

00:56:52,480 --> 00:56:56,170
any operating system all operating

00:56:55,280 --> 00:56:57,839
system that can

00:56:56,170 --> 00:57:00,960
[Music]

00:56:57,839 --> 00:57:04,640
flatback we'll be able to use

00:57:00,960 --> 00:57:08,240
our fedora flat packs as well and

00:57:04,640 --> 00:57:12,720
that means they can use applications

00:57:08,240 --> 00:57:16,480
made as rpms and convert it to flatbacks

00:57:12,720 --> 00:57:18,000
so that's for one reason and the second

00:57:16,480 --> 00:57:22,559
reason

00:57:18,000 --> 00:57:25,359
is that as we heard before

00:57:22,559 --> 00:57:26,079
flight hub flatbacks are made directly

00:57:25,359 --> 00:57:29,599
from the source

00:57:26,079 --> 00:57:33,680
code that's definitely not a

00:57:29,599 --> 00:57:37,680
bad approach but in fedora we have

00:57:33,680 --> 00:57:39,920
our rpms and there are spec files that

00:57:37,680 --> 00:57:42,880
tells you

00:57:39,920 --> 00:57:43,680
what files are installed where and why

00:57:42,880 --> 00:57:46,960
and the process

00:57:43,680 --> 00:57:47,760
is very very clear and you know what's

00:57:46,960 --> 00:57:52,319
going on

00:57:47,760 --> 00:57:55,520
and how does it work and that can be uh

00:57:52,319 --> 00:57:59,839
that can be a benefit for someone and

00:57:55,520 --> 00:58:01,839
of course there is a there is a

00:57:59,839 --> 00:58:06,480
you know as a user you can choose if you

00:58:01,839 --> 00:58:06,480
can use flat hub flat packs or federal

00:58:06,839 --> 00:58:09,839
ones

00:58:11,839 --> 00:58:16,880
and this is the most important reason

00:58:15,359 --> 00:58:20,400
why we need

00:58:16,880 --> 00:58:23,440
or why we want federal flatbacks

00:58:20,400 --> 00:58:27,200
because of federal silver bull i don't

00:58:23,440 --> 00:58:27,200
know if you know federal silver blue

00:58:27,520 --> 00:58:32,400
but it's a next generation operating

00:58:30,880 --> 00:58:37,280
system that is made

00:58:32,400 --> 00:58:41,359
that is based on

00:58:37,280 --> 00:58:44,559
os3 technology which is something like

00:58:41,359 --> 00:58:45,200
git for your operating system that means

00:58:44,559 --> 00:58:47,359
the

00:58:45,200 --> 00:58:50,319
the different versions of your operating

00:58:47,359 --> 00:58:53,760
system are like branches

00:58:50,319 --> 00:58:57,920
and specific updates

00:58:53,760 --> 00:58:57,920
are commits in that range

00:58:58,720 --> 00:59:05,200
that's very cool but it can have

00:59:02,160 --> 00:59:09,040
it has some problems like for example

00:59:05,200 --> 00:59:12,160
your slash user directory is read only

00:59:09,040 --> 00:59:15,599
that means you cannot install

00:59:12,160 --> 00:59:18,960
rpms or you can install rpms but

00:59:15,599 --> 00:59:18,960
the process is quite

00:59:19,119 --> 00:59:22,799
it's not it's it is simple but you have

00:59:21,760 --> 00:59:26,480
to

00:59:22,799 --> 00:59:29,040
uh create new uh os 3 commit and

00:59:26,480 --> 00:59:30,880
reboot your computer to be able to use

00:59:29,040 --> 00:59:33,440
that rpm

00:59:30,880 --> 00:59:35,520
and it's not the preferred way how to

00:59:33,440 --> 00:59:39,280
install applications because

00:59:35,520 --> 00:59:42,319
it can uh it can

00:59:39,280 --> 00:59:45,599
make problems when you switch to an

00:59:42,319 --> 00:59:48,559
another version of your system

00:59:45,599 --> 00:59:50,559
but we have uh two solutions for that

00:59:48,559 --> 00:59:51,839
first of all we have toolbox which is

00:59:50,559 --> 00:59:55,920
great tool based

00:59:51,839 --> 00:59:59,520
on podman and you can create a

00:59:55,920 --> 01:00:01,920
container with fedora workstation by

00:59:59,520 --> 01:00:02,720
two commands and you can just create

01:00:01,920 --> 01:00:06,799
container

01:00:02,720 --> 01:00:09,839
enter it and then use it as a normal

01:00:06,799 --> 01:00:12,400
fedora workstation but only in command

01:00:09,839 --> 01:00:16,240
line mode

01:00:12,400 --> 01:00:19,200
this tool is intended to use and install

01:00:16,240 --> 01:00:19,920
terminal applications but of course you

01:00:19,200 --> 01:00:21,839
can install

01:00:19,920 --> 01:00:24,240
uh graphical applications as well but

01:00:21,839 --> 01:00:26,319
the process is

01:00:24,240 --> 01:00:27,839
not very convenient you have to create

01:00:26,319 --> 01:00:29,440
container you have to

01:00:27,839 --> 01:00:31,760
install the application with command

01:00:29,440 --> 01:00:34,400
line or terminal

01:00:31,760 --> 01:00:36,400
and you have to run the application in

01:00:34,400 --> 01:00:39,680
terminal as well

01:00:36,400 --> 01:00:42,319
and you cannot close the terminal while

01:00:39,680 --> 01:00:44,960
the application is running of course

01:00:42,319 --> 01:00:48,160
so for graphical applications we use

01:00:44,960 --> 01:00:48,160
flat packs insolar blue

01:00:48,319 --> 01:00:51,920
and that's the reason why we need fedora

01:00:50,400 --> 01:00:55,440
flatbacks because we want

01:00:51,920 --> 01:00:58,720
to use rpms in fedora solverbu

01:00:55,440 --> 01:01:01,200
and flat pack is the tool or

01:00:58,720 --> 01:01:03,440
flight pack is the way how how can we do

01:01:01,200 --> 01:01:03,440
that

01:01:04,000 --> 01:01:11,040
so that's the reason

01:01:07,200 --> 01:01:14,559
and we can switch to fedora flat packs

01:01:11,040 --> 01:01:17,520
itself i will tell you

01:01:14,559 --> 01:01:18,960
something about them how do they work

01:01:17,520 --> 01:01:22,079
and

01:01:18,960 --> 01:01:25,280
then i will show you a

01:01:22,079 --> 01:01:29,440
short demonstration okay

01:01:25,280 --> 01:01:32,319
so uh what is federal flatback

01:01:29,440 --> 01:01:33,119
oh as i said a million times they are

01:01:32,319 --> 01:01:38,400
based on

01:01:33,119 --> 01:01:42,559
existing rpms and we are using a

01:01:38,400 --> 01:01:46,240
fedora modularity to make them

01:01:42,559 --> 01:01:47,119
so if you choose to convert your

01:01:46,240 --> 01:01:50,880
application

01:01:47,119 --> 01:01:54,880
to from rpm to flat pack

01:01:50,880 --> 01:01:57,920
first you need to create a module

01:01:54,880 --> 01:02:01,200
because we need to rebuild

01:01:57,920 --> 01:02:04,000
our rpms uh

01:02:01,200 --> 01:02:06,319
with different prefix slash app because

01:02:04,000 --> 01:02:08,480
that's the place where flatback

01:02:06,319 --> 01:02:11,039
applications will link

01:02:08,480 --> 01:02:12,240
and we cannot just grab everything from

01:02:11,039 --> 01:02:14,480
slash user

01:02:12,240 --> 01:02:16,400
and move it to slash app and expect

01:02:14,480 --> 01:02:17,839
everything to work so we have to rebuild

01:02:16,400 --> 01:02:21,280
it

01:02:17,839 --> 01:02:24,720
and why we use modularity is because

01:02:21,280 --> 01:02:27,359
we need to break the package space

01:02:24,720 --> 01:02:29,039
and be able to have a different version

01:02:27,359 --> 01:02:32,640
of that package built with

01:02:29,039 --> 01:02:36,079
this prefix and

01:02:32,640 --> 01:02:39,520
once we have the module we create an

01:02:36,079 --> 01:02:41,520
oci container flood hub flat packs are

01:02:39,520 --> 01:02:44,799
based on os3

01:02:41,520 --> 01:02:48,559
but we are using oci images which is

01:02:44,799 --> 01:02:50,799
simply a docker docker container

01:02:48,559 --> 01:02:51,760
because uh federal infrastructure

01:02:50,799 --> 01:02:54,880
handles

01:02:51,760 --> 01:02:58,400
flat packs in the same way

01:02:54,880 --> 01:03:00,160
how it handles server containers

01:02:58,400 --> 01:03:03,039
it's convenient for the federal

01:03:00,160 --> 01:03:06,000
infrastructure that we use

01:03:03,039 --> 01:03:08,640
one tool or one process to two things

01:03:06,000 --> 01:03:12,799
it's simpler

01:03:08,640 --> 01:03:17,280
but it had some disadvantages like

01:03:12,799 --> 01:03:19,680
for example with flood hub applications

01:03:17,280 --> 01:03:21,359
you could use delta updates it was a

01:03:19,680 --> 01:03:25,039
problem with oci images but

01:03:21,359 --> 01:03:27,280
i think it is already already resolved

01:03:25,039 --> 01:03:31,839
and you can use delta updates with oci

01:03:27,280 --> 01:03:31,839
images as well

01:03:32,160 --> 01:03:38,680
and this process

01:03:35,440 --> 01:03:42,559
is based on two files

01:03:38,680 --> 01:03:45,599
application.tml and container routine

01:03:42,559 --> 01:03:47,200
i will show you them and i will describe

01:03:45,599 --> 01:03:49,839
them

01:03:47,200 --> 01:03:51,039
and register federal project is just the

01:03:49,839 --> 01:03:54,319
place where

01:03:51,039 --> 01:03:55,680
federal foreign so you can browse the

01:03:54,319 --> 01:03:57,839
website and

01:03:55,680 --> 01:04:00,400
see what applications are already

01:03:57,839 --> 01:04:00,400
converted

01:04:01,839 --> 01:04:08,319
okay and now i'll try to switch to

01:04:05,119 --> 01:04:08,319
screen share

01:04:11,760 --> 01:04:16,079
okay i hope you can see my terminal now

01:04:17,280 --> 01:04:23,760
and as you can see there are two files

01:04:19,760 --> 01:04:27,200
uh supertux.com and container

01:04:23,760 --> 01:04:30,720
i will i will demonstrate the process of

01:04:27,200 --> 01:04:34,160
super dogs which is a mario like game

01:04:30,720 --> 01:04:34,160
but with tooks

01:04:35,280 --> 01:04:43,599
okay so we have these two files

01:04:40,160 --> 01:04:47,440
will open uh superbox.cml

01:04:43,599 --> 01:04:49,760
which is basically a module nd file

01:04:47,440 --> 01:04:50,799
which is auto generated i will show you

01:04:49,760 --> 01:04:54,319
the command

01:04:50,799 --> 01:04:55,440
how to do that uh this summary

01:04:54,319 --> 01:05:00,000
description

01:04:55,440 --> 01:05:04,240
and license is uh taken from

01:05:00,000 --> 01:05:05,200
a spec file here in dependencies you can

01:05:04,240 --> 01:05:09,760
see

01:05:05,200 --> 01:05:12,960
uh our flat will target a flatback

01:05:09,760 --> 01:05:16,720
runtime made by fedora

01:05:12,960 --> 01:05:19,680
in version fedora 34

01:05:16,720 --> 01:05:20,319
and we are using also flatback common

01:05:19,680 --> 01:05:24,559
which is

01:05:20,319 --> 01:05:28,880
special module which contains

01:05:24,559 --> 01:05:30,079
which contains packages that are already

01:05:28,880 --> 01:05:33,280
rebuilt with

01:05:30,079 --> 01:05:33,280
slash app prefix

01:05:34,240 --> 01:05:38,079
it makes this supertox.tml smaller

01:05:36,880 --> 01:05:40,720
because

01:05:38,079 --> 01:05:42,480
if there is some package already

01:05:40,720 --> 01:05:46,720
converted with slap

01:05:42,480 --> 01:05:51,839
slash app prefix we can use it and we

01:05:46,720 --> 01:05:51,839
don't need to convert it once again

01:05:52,319 --> 01:06:00,880
and here in the components rpm section

01:05:57,119 --> 01:06:04,240
there are there is a list of

01:06:00,880 --> 01:06:07,440
rpms that will

01:06:04,240 --> 01:06:08,960
be converted with slash app prefix and

01:06:07,440 --> 01:06:12,240
will mate

01:06:08,960 --> 01:06:15,119
will make the module

01:06:12,240 --> 01:06:16,000
in case of super talks there is only one

01:06:15,119 --> 01:06:19,280
rpm

01:06:16,000 --> 01:06:22,400
and it is supertux itself it's because

01:06:19,280 --> 01:06:24,960
supertux is simple and has

01:06:22,400 --> 01:06:26,480
no especially special special

01:06:24,960 --> 01:06:29,599
dependencies

01:06:26,480 --> 01:06:33,839
everything it depends is on

01:06:29,599 --> 01:06:33,839
is in the runtime or your host system

01:06:35,119 --> 01:06:39,359
for example this can be interesting

01:06:40,720 --> 01:06:47,200
this record means what branch

01:06:44,000 --> 01:06:50,640
will be used so for now we are using

01:06:47,200 --> 01:06:53,920
a fedora for branch but

01:06:50,640 --> 01:06:56,960
we can use for example other one

01:06:53,920 --> 01:06:58,400
in case a new version of the application

01:06:56,960 --> 01:07:01,520
is somehow broken or

01:06:58,400 --> 01:07:04,000
you just need the other one you can just

01:07:01,520 --> 01:07:06,559
specify fedora 33 branch and

01:07:04,000 --> 01:07:07,680
everything will work or of course you

01:07:06,559 --> 01:07:10,400
can

01:07:07,680 --> 01:07:12,160
you can charge it the latest version i

01:07:10,400 --> 01:07:17,839
think it's not master anymore

01:07:12,160 --> 01:07:17,839
it's main maybe and it should work too

01:07:22,319 --> 01:07:26,799
i will stick with the latest version

01:07:24,559 --> 01:07:29,839
stable

01:07:26,799 --> 01:07:32,480
and build order is just uh

01:07:29,839 --> 01:07:34,000
if you have more packages and there are

01:07:32,480 --> 01:07:37,119
some

01:07:34,000 --> 01:07:38,720
uh dependencies of dependencies uh you

01:07:37,119 --> 01:07:41,280
need to build

01:07:38,720 --> 01:07:43,680
the dependency of the dependency first

01:07:41,280 --> 01:07:48,000
so you can specify that order

01:07:43,680 --> 01:07:48,000
but in our case it doesn't matter

01:07:53,760 --> 01:08:00,319
and now we can look at container table

01:07:57,680 --> 01:08:02,319
it is automatically automatically

01:08:00,319 --> 01:08:05,520
generated as well

01:08:02,319 --> 01:08:10,240
oh i the cam is

01:08:05,520 --> 01:08:14,400
but anyway yeah so it's auto generated

01:08:10,240 --> 01:08:18,239
and for you as a developer

01:08:14,400 --> 01:08:21,759
this is the most important part

01:08:18,239 --> 01:08:24,799
here in finnish rx you say

01:08:21,759 --> 01:08:26,080
what permissions flight pack will have

01:08:24,799 --> 01:08:28,560
because

01:08:26,080 --> 01:08:31,440
by default there are no permissions and

01:08:28,560 --> 01:08:34,719
flat pack cannot interact with your

01:08:31,440 --> 01:08:37,120
host system it's safe but

01:08:34,719 --> 01:08:38,480
it's useless because it just cannot do

01:08:37,120 --> 01:08:42,239
anything

01:08:38,480 --> 01:08:45,279
so many applications need to

01:08:42,239 --> 01:08:48,000
interact with your uh monitor screen so

01:08:45,279 --> 01:08:51,199
you have to add wayland and

01:08:48,000 --> 01:08:54,960
xor socket

01:08:51,199 --> 01:08:55,920
uh then uh super talks is game so there

01:08:54,960 --> 01:08:59,440
are some sounds

01:08:55,920 --> 01:09:02,880
so you need uh audio

01:08:59,440 --> 01:09:05,199
audio socket and for some reason we need

01:09:02,880 --> 01:09:07,440
a network connection for the game to

01:09:05,199 --> 01:09:09,439
work

01:09:07,440 --> 01:09:10,640
for example there are more

01:09:09,439 --> 01:09:13,679
[Music]

01:09:10,640 --> 01:09:17,120
more portals and we can also specify

01:09:13,679 --> 01:09:18,880
for example in case super talks would be

01:09:17,120 --> 01:09:21,920
some

01:09:18,880 --> 01:09:26,000
document manager we can specify

01:09:21,920 --> 01:09:26,000
uh file system permissions that means

01:09:26,960 --> 01:09:34,560
now supertux can see

01:09:30,400 --> 01:09:36,960
what is in my host file system

01:09:34,560 --> 01:09:39,600
but occur super took this game so it

01:09:36,960 --> 01:09:39,600
doesn't need it

01:09:41,040 --> 01:09:48,159
and for example here uh super talks

01:09:44,880 --> 01:09:51,199
needs to be renamed because appdata and

01:09:48,159 --> 01:09:54,320
desktop files are named

01:09:51,199 --> 01:09:55,679
super tools 2 desktop but we need to

01:09:54,320 --> 01:09:58,960
rename them

01:09:55,679 --> 01:10:02,159
to the id name

01:09:58,960 --> 01:10:06,800
so we just add a data

01:10:02,159 --> 01:10:06,800
rename desktop and rename icon

01:10:08,960 --> 01:10:13,360
okay i think that's all and

01:10:13,679 --> 01:10:17,280
i will not switch back to slides because

01:10:16,400 --> 01:10:20,800
sorry

01:10:17,280 --> 01:10:24,560
because the demonstration will be

01:10:20,800 --> 01:10:27,199
in terminal as well so

01:10:24,560 --> 01:10:27,840
imagine you are a developer who

01:10:27,199 --> 01:10:30,960
maintains

01:10:27,840 --> 01:10:34,800
some rpm and

01:10:30,960 --> 01:10:37,360
wants to convert its rpm into flatback

01:10:34,800 --> 01:10:39,360
so first of all we need we need to

01:10:37,360 --> 01:10:39,920
create some directory with the name of

01:10:39,360 --> 01:10:42,840
the

01:10:39,920 --> 01:10:44,000
application it's already done called

01:10:42,840 --> 01:10:47,679
superdogs

01:10:44,000 --> 01:10:49,800
and we have we have to we have to get

01:10:47,679 --> 01:10:51,679
these two files container table and

01:10:49,800 --> 01:10:59,840
supertools.table

01:10:51,679 --> 01:10:59,840
it's done by two name thread mode

01:11:03,679 --> 01:11:06,880
oh sorry i cannot type and speak at one

01:11:05,760 --> 01:11:10,400
time

01:11:06,880 --> 01:11:10,400
anyway this

01:11:10,480 --> 01:11:16,400
this command

01:11:13,600 --> 01:11:18,960
is for generating container to terminal

01:11:16,400 --> 01:11:22,239
and support with the terminal as i said

01:11:18,960 --> 01:11:25,120
this just tells what are we going to do

01:11:22,239 --> 01:11:26,239
flat pack command says we will target

01:11:25,120 --> 01:11:29,840
flat back command

01:11:26,239 --> 01:11:32,800
it's good because the resulting

01:11:29,840 --> 01:11:34,400
application the terminal will be smaller

01:11:32,800 --> 01:11:37,120
and this last flag

01:11:34,400 --> 01:11:38,840
is interesting because there is no easy

01:11:37,120 --> 01:11:42,000
way how to determine

01:11:38,840 --> 01:11:45,360
what what permissions

01:11:42,000 --> 01:11:48,159
your application will need so we can use

01:11:45,360 --> 01:11:49,199
uh fredholp manifest and just copy the

01:11:48,159 --> 01:11:52,560
permissions from

01:11:49,199 --> 01:11:56,560
for that manifest i will not run it

01:11:52,560 --> 01:11:56,560
because i already have these two files

01:11:57,440 --> 01:12:00,400
and we should be

01:12:03,600 --> 01:12:08,320
in this state after that command that

01:12:06,560 --> 01:12:11,920
that command

01:12:08,320 --> 01:12:14,960
and now we can generate the module

01:12:11,920 --> 01:12:17,199
and container it's done

01:12:14,960 --> 01:12:17,199
by

01:12:18,159 --> 01:12:22,640
a tool named flatback module you can

01:12:21,360 --> 01:12:25,920
install it by

01:12:22,640 --> 01:12:29,360
typing sudo dnf flatback module tools

01:12:25,920 --> 01:12:33,360
install flap module tools and

01:12:29,360 --> 01:12:36,000
this command will

01:12:33,360 --> 01:12:37,520
create the module locally then create a

01:12:36,000 --> 01:12:42,000
container

01:12:37,520 --> 01:12:42,000
and then we can install it

01:12:42,320 --> 01:12:47,520
i switch back to the to the presentation

01:12:48,239 --> 01:12:54,560
yeah this is only only a backup in case

01:12:51,360 --> 01:12:59,280
screen sharing doesn't work and

01:12:54,560 --> 01:12:59,280
yeah this is what i was talking about

01:12:59,360 --> 01:13:08,960
yeah and we are here

01:13:05,679 --> 01:13:11,520
so uh now in my terminal

01:13:08,960 --> 01:13:13,360
the module and container are built it

01:13:11,520 --> 01:13:17,280
will take

01:13:13,360 --> 01:13:20,239
more or less uh 15 or 20 minutes

01:13:17,280 --> 01:13:22,560
i don't know if we if we will wait but

01:13:20,239 --> 01:13:22,560
anyway

01:13:23,280 --> 01:13:26,880
so after performing step one you should

01:13:26,000 --> 01:13:32,239
have

01:13:26,880 --> 01:13:33,040
installed and running your flatback

01:13:32,239 --> 01:13:35,920
application

01:13:33,040 --> 01:13:36,719
but it is local that means it's good for

01:13:35,920 --> 01:13:40,239
testing

01:13:36,719 --> 01:13:42,800
and for

01:13:40,239 --> 01:13:43,440
checking if everything is okay but i

01:13:42,800 --> 01:13:47,040
think you

01:13:43,440 --> 01:13:49,920
you you would like to make it public

01:13:47,040 --> 01:13:49,920
so what to do

01:13:50,400 --> 01:13:54,320
we need to request the repository

01:13:55,199 --> 01:13:58,320
push everything to that and build

01:13:57,199 --> 01:14:03,280
everything again

01:13:58,320 --> 01:14:03,280
but this time in fedora infrastructure

01:14:04,080 --> 01:14:10,000
it's because federal infrastructure

01:14:06,400 --> 01:14:14,080
needs to check if everything is okay

01:14:10,000 --> 01:14:17,600
once the the flat pack is built uh

01:14:14,080 --> 01:14:20,159
in the infrastructure uh we can test it

01:14:17,600 --> 01:14:20,719
and in case everything is okay we can

01:14:20,159 --> 01:14:24,320
submit

01:14:20,719 --> 01:14:29,040
a new new package

01:14:24,320 --> 01:14:31,040
into body and here you have the commands

01:14:29,040 --> 01:14:32,719
first command is to request the

01:14:31,040 --> 01:14:35,760
repository

01:14:32,719 --> 01:14:37,679
and the second one is to build a

01:14:35,760 --> 01:14:40,080
module and flatback in the

01:14:37,679 --> 01:14:43,920
infrastructure

01:14:40,080 --> 01:14:45,520
i will not show it because it consumes a

01:14:43,920 --> 01:14:49,440
little time

01:14:45,520 --> 01:14:49,440
a little more time that i have now

01:14:50,560 --> 01:14:56,239
okay so

01:14:53,679 --> 01:14:58,400
these three steps are basically

01:14:56,239 --> 01:14:58,880
everything you need to perform to have

01:14:58,400 --> 01:15:01,840
your

01:14:58,880 --> 01:15:01,840
flight back application

01:15:02,640 --> 01:15:07,920
so you can definitely make your own flat

01:15:05,040 --> 01:15:10,000
pack application from rpm if you want

01:15:07,920 --> 01:15:13,120
in case you are for example a maintainer

01:15:10,000 --> 01:15:13,120
of some rpm package

01:15:14,080 --> 01:15:20,719
and the process should be quite easy

01:15:17,679 --> 01:15:24,000
especially when your application has no

01:15:20,719 --> 01:15:27,120
dependencies or have only a small

01:15:24,000 --> 01:15:27,120
number of dependencies

01:15:27,199 --> 01:15:30,880
so if you are interested you can visit

01:15:29,600 --> 01:15:33,920
one of these

01:15:30,880 --> 01:15:39,679
links first link is

01:15:33,920 --> 01:15:43,199
a official fedora packaging tutorial

01:15:39,679 --> 01:15:46,480
the second one is a list of rpms that

01:15:43,199 --> 01:15:48,480
are quite easy and

01:15:46,480 --> 01:15:50,320
the process of conversion to flat pack

01:15:48,480 --> 01:15:53,440
should be easy so it's a

01:15:50,320 --> 01:15:54,080
good point where you can start and

01:15:53,440 --> 01:15:58,320
choose some

01:15:54,080 --> 01:16:01,920
easy application and these two links

01:15:58,320 --> 01:16:04,880
uh below that are

01:16:01,920 --> 01:16:06,000
it's basically the same i i'm telling

01:16:04,880 --> 01:16:09,120
you

01:16:06,000 --> 01:16:12,960
here and now but in in a form of an

01:16:09,120 --> 01:16:17,120
article the steps are a little

01:16:12,960 --> 01:16:17,120
more detailed

01:16:17,440 --> 01:16:21,920
and that's it but of course if you have

01:16:20,080 --> 01:16:22,640
some questions who can uh you can email

01:16:21,920 --> 01:16:24,640
me

01:16:22,640 --> 01:16:26,159
on the start of the presentation i have

01:16:24,640 --> 01:16:28,480
my email address

01:16:26,159 --> 01:16:31,199
so you can definitely write me an email

01:16:28,480 --> 01:16:34,239
and i can help

01:16:31,199 --> 01:16:37,280
generally uh by now the

01:16:34,239 --> 01:16:38,080
conversion is done only by a handful of

01:16:37,280 --> 01:16:41,199
people

01:16:38,080 --> 01:16:44,159
but we would like to include

01:16:41,199 --> 01:16:45,360
community to the process as well we

01:16:44,159 --> 01:16:49,040
would like to

01:16:45,360 --> 01:16:50,400
make creating rpms and flatbacks on the

01:16:49,040 --> 01:16:53,520
same level

01:16:50,400 --> 01:16:56,719
and we are trying to i can switch to

01:16:53,520 --> 01:17:02,000
dedicated slides to that

01:16:56,719 --> 01:17:04,159
here here

01:17:02,000 --> 01:17:06,239
we would like to integrate the community

01:17:04,159 --> 01:17:09,440
as i said

01:17:06,239 --> 01:17:12,560
uh it's because we would like rpm

01:17:09,440 --> 01:17:16,080
maintainers to be able to just

01:17:12,560 --> 01:17:18,480
run few more commands and

01:17:16,080 --> 01:17:19,600
create the flatback application as well

01:17:18,480 --> 01:17:22,800
and we are also

01:17:19,600 --> 01:17:24,960
going to automate the process because

01:17:22,800 --> 01:17:26,080
it should be quite easy to make it uh

01:17:24,960 --> 01:17:30,320
today but

01:17:26,080 --> 01:17:31,679
the process still needs some manual work

01:17:30,320 --> 01:17:34,320
and we would like to automate the

01:17:31,679 --> 01:17:37,120
process so once the

01:17:34,320 --> 01:17:38,930
rpm gets updated the process should

01:17:37,120 --> 01:17:40,400
trigger and everything should be

01:17:38,930 --> 01:17:44,320
[Music]

01:17:40,400 --> 01:17:47,920
should be uh

01:17:44,320 --> 01:17:53,920
uh i have lost now should be automated

01:17:47,920 --> 01:17:57,520
sorry as to the future we would like to

01:17:53,920 --> 01:18:00,800
bring flatbacks to rel as well

01:17:57,520 --> 01:18:01,679
and we would like to make flat packs

01:18:00,800 --> 01:18:04,880
from

01:18:01,679 --> 01:18:04,880
copper repositories

01:18:05,520 --> 01:18:10,640
okay that's it and i think i

01:18:08,560 --> 01:18:11,760
skipped something yeah

01:18:10,640 --> 01:18:13,920
[Music]

01:18:11,760 --> 01:18:16,159
the process itself should be quite easy

01:18:13,920 --> 01:18:16,159
but

01:18:16,640 --> 01:18:21,679
sometimes you can run into some troubles

01:18:18,880 --> 01:18:24,159
like for example

01:18:21,679 --> 01:18:25,679
generally speaking most of the problems

01:18:24,159 --> 01:18:28,719
with conversion

01:18:25,679 --> 01:18:29,600
rpm to flat pack is done by spec files

01:18:28,719 --> 01:18:32,800
that are not

01:18:29,600 --> 01:18:37,280
compliant to our guidelines and

01:18:32,800 --> 01:18:40,320
some things are done in a special way

01:18:37,280 --> 01:18:42,640
and it broke the process but

01:18:40,320 --> 01:18:43,760
in case you have only five to ten

01:18:42,640 --> 01:18:46,560
dependencies

01:18:43,760 --> 01:18:46,560
it should be okay

01:18:50,320 --> 01:18:56,640
okay and for once of you who

01:18:54,239 --> 01:18:58,080
would like to try our flatbeds federal

01:18:56,640 --> 01:19:02,400
flatbacks

01:18:58,080 --> 01:19:06,080
uh this command should activate

01:19:02,400 --> 01:19:08,480
our fedora fedora flatback repository

01:19:06,080 --> 01:19:12,159
and you should be able to install a

01:19:08,480 --> 01:19:12,159
fedora flat packs on your system

01:19:13,520 --> 01:19:20,640
and that's pretty much it

01:19:17,199 --> 01:19:24,800
i will skip i will switch back to

01:19:20,640 --> 01:19:28,480
screen share and show you

01:19:24,800 --> 01:19:28,480
the second part of the demonstration

01:19:30,130 --> 01:19:35,199
[Music]

01:19:32,400 --> 01:19:37,840
okay so as you can see the build process

01:19:35,199 --> 01:19:37,840
is still running

01:19:38,000 --> 01:19:44,800
but i can do a little magic

01:19:41,600 --> 01:19:48,080
and voila we have

01:19:44,800 --> 01:19:48,560
oci image already built it's because i

01:19:48,080 --> 01:19:53,360
have

01:19:48,560 --> 01:19:57,760
done it before my presentation anyway

01:19:53,360 --> 01:20:00,880
this state is somewhere after step one

01:19:57,760 --> 01:20:05,840
so now we need to install

01:20:00,880 --> 01:20:05,840
the oci image and test it

01:20:06,880 --> 01:20:10,880
it's just done by backpack module

01:20:10,080 --> 01:20:14,000
install

01:20:10,880 --> 01:20:19,840
and that oci image

01:20:14,000 --> 01:20:19,840
and it should install

01:20:20,400 --> 01:20:23,520
after short time

01:20:24,370 --> 01:20:30,320
[Music]

01:20:26,320 --> 01:20:32,260
anyway yeah okay it does ah

01:20:30,320 --> 01:20:33,679
my hard drive is for

01:20:32,260 --> 01:20:36,960
[Music]

01:20:33,679 --> 01:20:39,840
oh okay so anyway

01:20:36,960 --> 01:20:41,360
uh in case you don't have a small ssd

01:20:39,840 --> 01:20:44,719
disk it should uh

01:20:41,360 --> 01:20:48,000
pass and everything should be okay so

01:20:44,719 --> 01:20:49,679
check your free space anyway in case

01:20:48,000 --> 01:20:52,239
everything goes okay

01:20:49,679 --> 01:20:53,840
we would have installed our super tools

01:20:52,239 --> 01:21:00,239
application

01:20:53,840 --> 01:21:02,580
and uh everything should be okay

01:21:00,239 --> 01:21:03,679
i think it's not necessary to

01:21:02,580 --> 01:21:06,719
[Music]

01:21:03,679 --> 01:21:07,840
clean my disk now and show you the super

01:21:06,719 --> 01:21:11,120
hooks application

01:21:07,840 --> 01:21:13,280
you can convert it by yourself and try

01:21:11,120 --> 01:21:13,280
it

01:21:13,360 --> 01:21:17,520
okay so

01:21:14,940 --> 01:21:20,480
[Music]

01:21:17,520 --> 01:21:22,400
that's pretty much everything i wanted

01:21:20,480 --> 01:21:26,320
to say

01:21:22,400 --> 01:21:26,320
and if you have some questions you can

01:21:26,840 --> 01:21:30,880
ask

01:21:29,760 --> 01:21:33,040
uh thank you very much for your

01:21:30,880 --> 01:21:34,560
presentation it was pretty interesting

01:21:33,040 --> 01:21:36,159
there are actually a lot of questions in

01:21:34,560 --> 01:21:36,960
the shared notes i'm sure if you can

01:21:36,159 --> 01:21:40,000
access them

01:21:36,960 --> 01:21:42,159
i carry them for you if you prefer as

01:21:40,000 --> 01:21:46,560
more convenient for you

01:21:42,159 --> 01:21:49,600
i can read them myself okay

01:21:46,560 --> 01:21:51,920
so first question isn't this a

01:21:49,600 --> 01:21:55,679
fragmentation risk

01:21:51,920 --> 01:21:56,440
yeah i suppose this question is intended

01:21:55,679 --> 01:21:57,840
to

01:21:56,440 --> 01:22:02,239
[Music]

01:21:57,840 --> 01:22:02,239
i will switch to the right slide

01:22:03,199 --> 01:22:10,159
yeah here like there can be

01:22:06,800 --> 01:22:13,280
two libraries in the same version

01:22:10,159 --> 01:22:14,639
for example is this application we can

01:22:13,280 --> 01:22:17,920
call it one

01:22:14,639 --> 01:22:19,920
has some library in version one because

01:22:17,920 --> 01:22:21,760
it's not in the runtime and here the

01:22:19,920 --> 01:22:25,040
application tool

01:22:21,760 --> 01:22:25,760
has the same library yeah in your system

01:22:25,040 --> 01:22:28,159
will be

01:22:25,760 --> 01:22:29,280
two libraries in the same version but

01:22:28,159 --> 01:22:34,400
private for

01:22:29,280 --> 01:22:38,400
for uh one application yeah

01:22:34,400 --> 01:22:40,239
it can bring a little

01:22:38,400 --> 01:22:43,040
first of all it will consume a little

01:22:40,239 --> 01:22:46,400
more disk space

01:22:43,040 --> 01:22:48,639
but after

01:22:46,400 --> 01:22:49,840
years of using flat pack you will you

01:22:48,639 --> 01:22:53,760
will see

01:22:49,840 --> 01:22:57,040
it's not that much

01:22:53,760 --> 01:23:00,159
so i hope i answered your question

01:22:57,040 --> 01:23:02,800
and the second one is why is it

01:23:00,159 --> 01:23:05,199
necessary to list the rpms

01:23:02,800 --> 01:23:06,080
can this be determined by looking at the

01:23:05,199 --> 01:23:09,040
app's

01:23:06,080 --> 01:23:09,840
dependencies then subtracting the

01:23:09,040 --> 01:23:14,719
packages

01:23:09,840 --> 01:23:14,719
which are included in the sdk runtime

01:23:15,440 --> 01:23:22,790
in fact it is determined by this way

01:23:21,199 --> 01:23:24,320
i will switch to

01:23:22,790 --> 01:23:29,040
[Music]

01:23:24,320 --> 01:23:32,639
ah off by one here this list of the

01:23:29,040 --> 01:23:36,320
dependencies is mainly for you

01:23:32,639 --> 01:23:38,400
to see what is present and what is not

01:23:36,320 --> 01:23:41,840
present

01:23:38,400 --> 01:23:45,760
sometimes it can happen that the package

01:23:41,840 --> 01:23:49,199
have package has a broken dependency

01:23:45,760 --> 01:23:51,920
there is something that is not needed

01:23:49,199 --> 01:23:53,600
and you will figure it out that you

01:23:51,920 --> 01:23:57,760
check this

01:23:53,600 --> 01:24:00,239
and the opposite way opposite

01:23:57,760 --> 01:24:02,639
situation is that your application

01:24:00,239 --> 01:24:06,000
depends on on something

01:24:02,639 --> 01:24:09,280
which is not in the rpm and

01:24:06,000 --> 01:24:12,719
here you can check but it's generated

01:24:09,280 --> 01:24:12,719
automatically so it's not

01:24:12,800 --> 01:24:19,920
it's not a work for you

01:24:17,120 --> 01:24:21,840
so that was a second question and the

01:24:19,920 --> 01:24:24,000
third one

01:24:21,840 --> 01:24:25,199
what is the difference between fedora

01:24:24,000 --> 01:24:28,159
runtime and

01:24:25,199 --> 01:24:28,159
other around times

01:24:28,840 --> 01:24:32,480
basically the

01:24:30,700 --> 01:24:36,239
[Music]

01:24:32,480 --> 01:24:39,920
the biggest uh difference is that

01:24:36,239 --> 01:24:43,840
fedora runtime is done by

01:24:39,920 --> 01:24:47,360
is made from rpms but generally speaking

01:24:43,840 --> 01:24:47,360
the function is the same

01:24:48,639 --> 01:24:55,120
and it charges specifically uh this

01:24:51,679 --> 01:24:55,120
special federal flat packs

01:24:56,960 --> 01:25:03,280
okay i hope i answered third question

01:25:00,080 --> 01:25:04,239
the fourth one is are there any

01:25:03,280 --> 01:25:08,239
downsides

01:25:04,239 --> 01:25:08,239
to packages built this way

01:25:10,800 --> 01:25:18,320
if you mean generally uh flat packs

01:25:14,719 --> 01:25:21,760
there are downsides as i said

01:25:18,320 --> 01:25:25,440
before that you can have

01:25:21,760 --> 01:25:28,800
you can have two libraries

01:25:25,440 --> 01:25:31,840
in the same version but made private

01:25:28,800 --> 01:25:34,880
for application one and two for example

01:25:31,840 --> 01:25:37,920
and it can be a little

01:25:34,880 --> 01:25:41,760
more a little more

01:25:37,920 --> 01:25:44,560
risk to the security because

01:25:41,760 --> 01:25:46,880
it needs to be updated but in fedora

01:25:44,560 --> 01:25:46,880
because

01:25:47,840 --> 01:25:52,080
how to say that if this happens if you

01:25:51,440 --> 01:25:54,020
have

01:25:52,080 --> 01:25:55,120
one library of some version

01:25:54,020 --> 01:25:58,400
[Music]

01:25:55,120 --> 01:26:02,239
bundled with two applications it's

01:25:58,400 --> 01:26:04,960
uh it origins from the same rpm so

01:26:02,239 --> 01:26:06,080
it doesn't matter if in federal

01:26:04,960 --> 01:26:09,520
footprints

01:26:06,080 --> 01:26:11,760
in case of red hat ones you need to

01:26:09,520 --> 01:26:13,840
uh you need to wait until two

01:26:11,760 --> 01:26:16,960
maintainers will update their

01:26:13,840 --> 01:26:21,280
uh manifests oh

01:26:16,960 --> 01:26:24,239
i hope i i say it correctly

01:26:21,280 --> 01:26:25,040
because i'm primarily a fedora

01:26:24,239 --> 01:26:28,719
flatbacker

01:26:25,040 --> 01:26:32,880
so i am not entirely sure

01:26:28,719 --> 01:26:34,719
about flight hub okay that was answer

01:26:32,880 --> 01:26:38,800
for the fourth question

01:26:34,719 --> 01:26:40,800
and the five fifth one

01:26:38,800 --> 01:26:42,560
can the container specify what

01:26:40,800 --> 01:26:45,679
architecture to be used

01:26:42,560 --> 01:26:51,520
a few projects are arm

01:26:45,679 --> 01:26:56,880
only for now as an example

01:26:51,520 --> 01:26:56,880
uh actually i'm not entirely sure

01:27:00,960 --> 01:27:10,639
oh i i'm not sure

01:27:04,400 --> 01:27:10,639
sorry yeah so i cannot cannot answer

01:27:11,199 --> 01:27:18,880
so that's that was no answer for

01:27:14,719 --> 01:27:21,360
number five and the sixth one

01:27:18,880 --> 01:27:22,480
so the plan is that a maintainer needs

01:27:21,360 --> 01:27:25,840
to ask his

01:27:22,480 --> 01:27:32,880
users but which version of my app are

01:27:25,840 --> 01:27:35,840
you using

01:27:32,880 --> 01:27:36,159
i'm not entirely sure what uh what is

01:27:35,840 --> 01:27:47,840
the

01:27:36,159 --> 01:27:47,840
question about

01:27:58,480 --> 01:28:15,440
uh somebody's adding some info

01:28:02,800 --> 01:28:18,900
so i'm waiting

01:28:15,440 --> 01:28:20,000
uh yeah uh now i understand the question

01:28:18,900 --> 01:28:22,560
[Music]

01:28:20,000 --> 01:28:24,960
so the new question is so the plan is

01:28:22,560 --> 01:28:27,840
that a maintainer needs to ask his users

01:28:24,960 --> 01:28:29,600
but with which version of my app are you

01:28:27,840 --> 01:28:32,320
using

01:28:29,600 --> 01:28:34,080
this means that the developers won't

01:28:32,320 --> 01:28:37,120
know which binaries of their

01:28:34,080 --> 01:28:42,000
application are being used either

01:28:37,120 --> 01:28:46,239
layers or the ones i create

01:28:42,000 --> 01:28:50,159
uh it depends on the situation

01:28:46,239 --> 01:28:53,760
like for example if you

01:28:50,159 --> 01:28:58,239
if you report a bug and you are using

01:28:53,760 --> 01:29:01,199
a flyback application you should

01:28:58,239 --> 01:29:02,639
target this back to the flight pack flat

01:29:01,199 --> 01:29:05,679
pack

01:29:02,639 --> 01:29:06,480
of the application and in case it's a

01:29:05,679 --> 01:29:10,480
problem with

01:29:06,480 --> 01:29:13,840
flatback it will be repaired

01:29:10,480 --> 01:29:16,880
or fixed on that level and if it is

01:29:13,840 --> 01:29:20,560
an upstream steam problem

01:29:16,880 --> 01:29:24,159
it will be solved

01:29:20,560 --> 01:29:27,760
upstream i think the the

01:29:24,159 --> 01:29:31,280
process will be similar to rpms like

01:29:27,760 --> 01:29:34,400
if you have something with rpm

01:29:31,280 --> 01:29:37,040
uh you target your back to that rpm

01:29:34,400 --> 01:29:38,000
and if it is upstream problem it will be

01:29:37,040 --> 01:29:40,880
forwarded

01:29:38,000 --> 01:29:40,880
to the upstream

01:29:41,440 --> 01:29:48,480
i hope i i understood the question

01:29:45,120 --> 01:29:51,600
correctly and answer to you

01:29:48,480 --> 01:29:54,960
and that was the last question

01:29:51,600 --> 01:29:58,000
so i hope i answered

01:29:54,960 --> 01:30:01,360
everything correctly and

01:29:58,000 --> 01:30:06,560
if it's everything i think that's it

01:30:01,360 --> 01:30:08,400
for from me

01:30:06,560 --> 01:30:10,320
thank you very much for the presentation

01:30:08,400 --> 01:30:11,920
so if anyone asks this question please

01:30:10,320 --> 01:30:13,600
use the shared note

01:30:11,920 --> 01:30:15,360
i will just wait a few seconds i guess

01:30:13,600 --> 01:30:18,400
just in case someone want to add

01:30:15,360 --> 01:30:18,400
something in the questions

01:30:18,880 --> 01:30:23,199
if not uh big round of applause great

01:30:21,920 --> 01:30:26,960
presentation

01:30:23,199 --> 01:30:30,639
uh we now have a little bit of a break

01:30:26,960 --> 01:30:33,760
and we'll see you back at 11 utc time

01:30:30,639 --> 01:30:35,040
for more great talks

01:30:33,760 --> 01:30:49,840
so thank you everyone for joining us

01:30:35,040 --> 01:30:49,840
this morning and see you later

02:03:53,440 --> 02:03:57,679
welcome back everyone we hope you

02:03:55,599 --> 02:03:59,199
enjoyed the break and you managed to get

02:03:57,679 --> 02:04:01,119
some relax and to

02:03:59,199 --> 02:04:02,400
rewind maybe some of the topia this

02:04:01,119 --> 02:04:05,920
morning

02:04:02,400 --> 02:04:06,880
so next on stage we have eagle living

02:04:05,920 --> 02:04:09,199
church

02:04:06,880 --> 02:04:11,760
which is talk about 15 cool things you

02:04:09,199 --> 02:04:14,400
didn't know you could do with snaps

02:04:11,760 --> 02:04:15,760
so the stage is yours as before if you

02:04:14,400 --> 02:04:16,639
have questions feel free to use the

02:04:15,760 --> 02:04:18,800
shared notes

02:04:16,639 --> 02:04:21,840
so that we can read them at the end of

02:04:18,800 --> 02:04:21,840
the presentation

02:04:22,079 --> 02:04:25,920
great thank you hello everyone and

02:04:25,199 --> 02:04:28,159
welcome

02:04:25,920 --> 02:04:29,280
first a quick question does my audio

02:04:28,159 --> 02:04:33,119
come true well

02:04:29,280 --> 02:04:33,119
and is my sound volume reasonable

02:04:35,280 --> 02:04:39,840
no echo no feedback i hope you can hear

02:04:37,599 --> 02:04:39,840
me well

02:04:43,760 --> 02:04:48,960
sounds great excellent thank you

02:04:47,199 --> 02:04:50,960
i will take control of the sharing

02:04:48,960 --> 02:04:53,119
screen so i can present

02:04:50,960 --> 02:04:55,760
and control the slides so give me one

02:04:53,119 --> 02:04:55,760
second please

02:04:59,040 --> 02:05:03,440
so i've now switched the slides i think

02:05:01,360 --> 02:05:06,000
you can see this

02:05:03,440 --> 02:05:08,239
uh welcome to the presentation my name

02:05:06,000 --> 02:05:10,639
is igor impossible last name

02:05:08,239 --> 02:05:12,320
uh i work at canonical i'm a developer

02:05:10,639 --> 02:05:12,960
advocate at a snapchat on the snapcraft

02:05:12,320 --> 02:05:15,360
team

02:05:12,960 --> 02:05:17,040
and today i want to talk to you about

02:05:15,360 --> 02:05:17,679
some interesting things that can help

02:05:17,040 --> 02:05:20,800
your

02:05:17,679 --> 02:05:24,639
life either as a developer or an end

02:05:20,800 --> 02:05:28,079
user so

02:05:24,639 --> 02:05:30,719
okay i will stop sharing my screen

02:05:28,079 --> 02:05:32,159
and i will control the slides using the

02:05:30,719 --> 02:05:34,800
built-in feature so i just have to

02:05:32,159 --> 02:05:38,400
figure out how to move slides

02:05:34,800 --> 02:05:42,719
um okay excellent sweet

02:05:38,400 --> 02:05:44,800
thank you so back to the presentation

02:05:42,719 --> 02:05:46,320
for that

02:05:44,800 --> 02:05:47,599
back to the presentation so i want to

02:05:46,320 --> 02:05:48,960
talk to you about some interesting

02:05:47,599 --> 02:05:52,560
things that will

02:05:48,960 --> 02:05:55,199
help you use snaps either as a developer

02:05:52,560 --> 02:05:55,920
or as an end user you may know some of

02:05:55,199 --> 02:05:58,800
these things

02:05:55,920 --> 02:06:00,079
so apologies in advance if things look

02:05:58,800 --> 02:06:02,320
familiar

02:06:00,079 --> 02:06:03,840
the other thing to take into account is

02:06:02,320 --> 02:06:05,920
if i move through

02:06:03,840 --> 02:06:07,760
some of the topics quickly and you have

02:06:05,920 --> 02:06:09,760
questions please ask them

02:06:07,760 --> 02:06:11,599
also all of the stuff that i'm going to

02:06:09,760 --> 02:06:14,400
review is documented

02:06:11,599 --> 02:06:17,119
on our documentation and i have written

02:06:14,400 --> 02:06:19,440
blog posts about most of these topics in

02:06:17,119 --> 02:06:23,119
detail with examples

02:06:19,440 --> 02:06:25,199
that said a little more about myself

02:06:23,119 --> 02:06:26,320
as i said i work as a developer advocate

02:06:25,199 --> 02:06:29,520
i've been using linux

02:06:26,320 --> 02:06:32,400
for roughly two decades now

02:06:29,520 --> 02:06:34,000
doing it for fun for passion and work i

02:06:32,400 --> 02:06:37,040
happen to write books that is

02:06:34,000 --> 02:06:38,320
my second big passion and the third one

02:06:37,040 --> 02:06:40,719
as you can probably guess

02:06:38,320 --> 02:06:42,000
looking at the image is i like to drive

02:06:40,719 --> 02:06:44,719
fast cars

02:06:42,000 --> 02:06:45,520
on racetracks around the world the covey

02:06:44,719 --> 02:06:48,079
situation has

02:06:45,520 --> 02:06:50,800
made that a bit more complicated but i'm

02:06:48,079 --> 02:06:53,840
trying my best

02:06:50,800 --> 02:06:56,960
that said let's go with the first trick

02:06:53,840 --> 02:06:57,760
so when you develop snaps you have two

02:06:56,960 --> 02:07:00,159
options to

02:06:57,760 --> 02:07:00,800
use different backends uh for

02:07:00,159 --> 02:07:02,960
development

02:07:00,800 --> 02:07:04,560
basically snaps will be built inside

02:07:02,960 --> 02:07:06,880
contained environments

02:07:04,560 --> 02:07:08,079
so that you don't pollute or change your

02:07:06,880 --> 02:07:10,639
underlying system

02:07:08,079 --> 02:07:11,360
on which you build you have two options

02:07:10,639 --> 02:07:13,920
you can use

02:07:11,360 --> 02:07:15,040
virtual machines with multiples as the

02:07:13,920 --> 02:07:16,880
driving engine

02:07:15,040 --> 02:07:19,599
or you can use lightweight containers

02:07:16,880 --> 02:07:22,400
with lxd as a driving engine

02:07:19,599 --> 02:07:23,119
if you have a virtualized environment

02:07:22,400 --> 02:07:25,520
yourself

02:07:23,119 --> 02:07:26,719
in which you developed you may find it a

02:07:25,520 --> 02:07:28,400
little bit more difficult to use

02:07:26,719 --> 02:07:31,440
multipass due to

02:07:28,400 --> 02:07:34,079
potential nesting to work around this

02:07:31,440 --> 02:07:35,599
you can use lxd with a special switch

02:07:34,079 --> 02:07:38,159
which allows you then to build

02:07:35,599 --> 02:07:40,000
snaps inside virtual machines so we have

02:07:38,159 --> 02:07:41,920
an inception situation basically

02:07:40,000 --> 02:07:43,040
a virtual machine container inside a

02:07:41,920 --> 02:07:44,960
virtual machine

02:07:43,040 --> 02:07:46,320
and of course you can try to see how

02:07:44,960 --> 02:07:48,639
deep you can go before the system

02:07:46,320 --> 02:07:51,119
explodes

02:07:48,639 --> 02:07:51,920
remote build this has been brought up

02:07:51,119 --> 02:07:55,440
yesterday

02:07:51,920 --> 02:07:57,280
during our office hour

02:07:55,440 --> 02:07:58,480
and the question was is it possible to

02:07:57,280 --> 02:08:01,920
cross compile

02:07:58,480 --> 02:08:05,599
snaps the answer is no

02:08:01,920 --> 02:08:06,719
but and that is the option to actually

02:08:05,599 --> 02:08:09,280
use remote build

02:08:06,719 --> 02:08:10,079
functionality you can send your project

02:08:09,280 --> 02:08:13,119
to launch

02:08:10,079 --> 02:08:14,880
launchpad and launchpad will build for

02:08:13,119 --> 02:08:17,599
six different architectures which you

02:08:14,880 --> 02:08:19,840
don't may not have necessarily locally

02:08:17,599 --> 02:08:21,599
you basically need just your launchpad

02:08:19,840 --> 02:08:23,040
token to authenticate

02:08:21,599 --> 02:08:25,360
and after that your project will be

02:08:23,040 --> 02:08:25,360
built

02:08:25,440 --> 02:08:29,360
this is quite useful if you want to

02:08:27,040 --> 02:08:32,560
target stay arm or you want to target

02:08:29,360 --> 02:08:33,920
something like s3 9 ibm s390 or other

02:08:32,560 --> 02:08:34,400
things that you may not necessarily have

02:08:33,920 --> 02:08:37,760
in your

02:08:34,400 --> 02:08:39,360
uh architecture portfolio of course you

02:08:37,760 --> 02:08:41,040
still need to test your snaps you have

02:08:39,360 --> 02:08:42,800
to make sure that the libraries you have

02:08:41,040 --> 02:08:43,840
selected and that your application logic

02:08:42,800 --> 02:08:44,800
can function on these other

02:08:43,840 --> 02:08:48,320
architectures

02:08:44,800 --> 02:08:51,280
but this can greatly simplify your work

02:08:48,320 --> 02:08:53,119
the one caveat is that your project will

02:08:51,280 --> 02:08:54,960
be public in the sense that it will be

02:08:53,119 --> 02:08:56,000
available and visible on launchpad so if

02:08:54,960 --> 02:08:58,159
you have a closed source

02:08:56,000 --> 02:09:00,400
application you probably shouldn't use

02:08:58,159 --> 02:09:00,400
this

02:09:00,880 --> 02:09:05,679
okay shell after if you're developing a

02:09:05,119 --> 02:09:08,400
snap

02:09:05,679 --> 02:09:09,520
and you want to see how it behaves after

02:09:08,400 --> 02:09:13,040
it's been built

02:09:09,520 --> 02:09:15,440
you can use uh shell after to step into

02:09:13,040 --> 02:09:17,040
into the snap build environment world

02:09:15,440 --> 02:09:19,599
and see what happens there

02:09:17,040 --> 02:09:21,119
this way you will have access to snap

02:09:19,599 --> 02:09:23,599
environment variables

02:09:21,119 --> 02:09:24,480
you will have access to the build

02:09:23,599 --> 02:09:26,079
structure

02:09:24,480 --> 02:09:28,800
and be able to inspect different bits

02:09:26,079 --> 02:09:30,239
and pieces this can be quite useful

02:09:28,800 --> 02:09:32,560
if you're trying to troubleshoot an

02:09:30,239 --> 02:09:34,719
error that doesn't seem obvious from

02:09:32,560 --> 02:09:36,800
outside of the build environment so

02:09:34,719 --> 02:09:38,639
you're building something goes wrong

02:09:36,800 --> 02:09:39,840
you're not quite sure why things are

02:09:38,639 --> 02:09:41,679
misbehaving

02:09:39,840 --> 02:09:42,880
step into the build world and

02:09:41,679 --> 02:09:44,560
troubleshoot yourself

02:09:42,880 --> 02:09:46,639
then you can of course step out and

02:09:44,560 --> 02:09:48,880
resume your normal development

02:09:46,639 --> 02:09:48,880
work

02:09:49,920 --> 02:09:53,119
tip number four is again something that

02:09:52,719 --> 02:09:55,920
should

02:09:53,119 --> 02:09:58,000
help you build your snaps much faster

02:09:55,920 --> 02:10:00,800
and test them more efficiently

02:09:58,000 --> 02:10:01,280
so you can actually test the snap

02:10:00,800 --> 02:10:04,000
without

02:10:01,280 --> 02:10:04,560
installing uh for example just download

02:10:04,000 --> 02:10:08,159
the snap

02:10:04,560 --> 02:10:08,719
from uh from the store then unsquash the

02:10:08,159 --> 02:10:10,719
archive

02:10:08,719 --> 02:10:12,239
snap is basically a squash fs file

02:10:10,719 --> 02:10:15,679
system archive

02:10:12,239 --> 02:10:17,840
step into it and then run snap try

02:10:15,679 --> 02:10:19,440
this will emulate the normal

02:10:17,840 --> 02:10:21,360
installation of a snap

02:10:19,440 --> 02:10:22,719
and it will be presented to you as an

02:10:21,360 --> 02:10:24,719
install application which you can then

02:10:22,719 --> 02:10:27,920
try and play with

02:10:24,719 --> 02:10:29,760
so at this point you could potentially

02:10:27,920 --> 02:10:31,119
add things into the squash fest file

02:10:29,760 --> 02:10:34,639
system and then

02:10:31,119 --> 02:10:37,679
snap try again basically remount the uh

02:10:34,639 --> 02:10:40,320
the archive use it see what gives

02:10:37,679 --> 02:10:42,639
and this can help you for instance uh

02:10:40,320 --> 02:10:45,040
nail down any missing libraries

02:10:42,639 --> 02:10:47,040
figure out if you have any permissions

02:10:45,040 --> 02:10:48,800
or broken symlinks perhaps

02:10:47,040 --> 02:10:50,880
things that could potentially happen if

02:10:48,800 --> 02:10:53,760
you have uh

02:10:50,880 --> 02:10:55,199
maybe some disorder in your sources

02:10:53,760 --> 02:10:58,239
similarly you can use

02:10:55,199 --> 02:11:00,159
snapcraft pack if you have your

02:10:58,239 --> 02:11:02,079
sources and if you have your built

02:11:00,159 --> 02:11:04,239
artifacts in a work folder

02:11:02,079 --> 02:11:05,920
in a work directory you haven't yet

02:11:04,239 --> 02:11:07,920
built the snap itself

02:11:05,920 --> 02:11:09,840
you can use snapcraft pack which will

02:11:07,920 --> 02:11:10,880
assemble all these different components

02:11:09,840 --> 02:11:12,880
into snap

02:11:10,880 --> 02:11:14,000
and then you can try it and play with it

02:11:12,880 --> 02:11:16,800
both these things

02:11:14,000 --> 02:11:18,000
should help you work faster as in you

02:11:16,800 --> 02:11:19,920
don't have to wait for the build

02:11:18,000 --> 02:11:22,400
environment to be built

02:11:19,920 --> 02:11:24,639
you don't have to wait for long

02:11:22,400 --> 02:11:27,199
compilation times if you know

02:11:24,639 --> 02:11:27,840
that the problem is in just small bits

02:11:27,199 --> 02:11:29,360
and pieces

02:11:27,840 --> 02:11:33,679
just before the runtime of the

02:11:29,360 --> 02:11:33,679
application or something similar to that

02:11:34,480 --> 02:11:38,480
one more thing that should be useful to

02:11:36,000 --> 02:11:41,840
developers is snappy debug

02:11:38,480 --> 02:11:42,800
basically if your snap does run well and

02:11:41,840 --> 02:11:45,440
this can happen

02:11:42,800 --> 02:11:46,400
due to permission errors as snaps are

02:11:45,440 --> 02:11:48,719
self-contained

02:11:46,400 --> 02:11:50,480
and confined applications and they

02:11:48,719 --> 02:11:53,119
communicate with the underlying system

02:11:50,480 --> 02:11:54,880
through a mechanism of interfaces so if

02:11:53,119 --> 02:11:55,679
you haven't specified the necessary

02:11:54,880 --> 02:11:58,159
interfaces

02:11:55,679 --> 02:11:58,880
or they are not connected or perhaps

02:11:58,159 --> 02:12:01,360
there are other

02:11:58,880 --> 02:12:02,159
commission issues due to the nature of

02:12:01,360 --> 02:12:04,840
this

02:12:02,159 --> 02:12:06,880
confinement you can then install a

02:12:04,840 --> 02:12:08,560
special troubleshooting step called

02:12:06,880 --> 02:12:10,639
snappy debug

02:12:08,560 --> 02:12:11,920
run it in a separate command command

02:12:10,639 --> 02:12:14,400
line window

02:12:11,920 --> 02:12:16,400
and as you run your snap and test it

02:12:14,400 --> 02:12:17,360
normally in a different terminal in a

02:12:16,400 --> 02:12:20,800
different shell

02:12:17,360 --> 02:12:23,679
you will see a log an output in in

02:12:20,800 --> 02:12:25,280
in the snappy debug log it will give you

02:12:23,679 --> 02:12:27,520
up armor denial errors

02:12:25,280 --> 02:12:29,440
and suggestions on how you can work

02:12:27,520 --> 02:12:32,480
around potential problems

02:12:29,440 --> 02:12:34,719
this can help you understand why even

02:12:32,480 --> 02:12:36,800
though the build may be successful

02:12:34,719 --> 02:12:39,920
your snap doesn't run well quite as well

02:12:36,800 --> 02:12:39,920
as you should as it should

02:12:42,320 --> 02:12:45,920
again for developers and people

02:12:44,719 --> 02:12:48,320
interested in understanding

02:12:45,920 --> 02:12:49,599
how and why things work there's snap as

02:12:48,320 --> 02:12:52,639
trace

02:12:49,599 --> 02:12:55,040
basically as trace is a utility

02:12:52,639 --> 02:12:56,639
that lets you trace system calls and

02:12:55,040 --> 02:12:59,440
understand

02:12:56,639 --> 02:13:01,599
why and how problems may occur during

02:12:59,440 --> 02:13:03,520
application startups or runtimes

02:13:01,599 --> 02:13:06,239
you could have a crash and you need to

02:13:03,520 --> 02:13:08,639
understand why something went wrong

02:13:06,239 --> 02:13:10,079
so snap so you can run snaps with a

02:13:08,639 --> 02:13:12,880
nestrate's flag

02:13:10,079 --> 02:13:15,199
and then use all the normal optional

02:13:12,880 --> 02:13:17,840
arguments that asterace supports

02:13:15,199 --> 02:13:18,800
to print out uh the log of that

02:13:17,840 --> 02:13:21,040
execution

02:13:18,800 --> 02:13:22,239
for instance you may only want to trace

02:13:21,040 --> 02:13:25,679
um

02:13:22,239 --> 02:13:27,199
open system calls or you may actually

02:13:25,679 --> 02:13:29,440
want to have

02:13:27,199 --> 02:13:30,320
longer printouts so the default 64

02:13:29,440 --> 02:13:33,280
character string

02:13:30,320 --> 02:13:35,040
may not be sufficiently you can also

02:13:33,280 --> 02:13:37,760
adjust the summary of the run

02:13:35,040 --> 02:13:38,960
and understand what's happening this is

02:13:37,760 --> 02:13:40,639
quite useful

02:13:38,960 --> 02:13:42,639
because it allows you to step into the

02:13:40,639 --> 02:13:42,960
snap world despite the fact that there

02:13:42,639 --> 02:13:46,880
is

02:13:42,960 --> 02:13:46,880
strong security confinement around it

02:13:47,119 --> 02:13:50,880
and warming up on the same note we also

02:13:50,239 --> 02:13:54,079
have

02:13:50,880 --> 02:13:57,199
gdp support with snaps you can

02:13:54,079 --> 02:13:59,760
actually run a gdp server

02:13:57,199 --> 02:14:01,040
which will then open a port a high port

02:13:59,760 --> 02:14:03,520
and connect to it using

02:14:01,040 --> 02:14:04,320
either a different terminal window or

02:14:03,520 --> 02:14:07,280
even

02:14:04,320 --> 02:14:10,000
an id or any remote debugging

02:14:07,280 --> 02:14:12,159
troubleshooting tool that supports gdb

02:14:10,000 --> 02:14:13,440
and so in a separate shell you run gdb

02:14:12,159 --> 02:14:14,800
and then you can do the

02:14:13,440 --> 02:14:16,560
usual things that you will do when

02:14:14,800 --> 02:14:18,880
you're troubleshooting an application

02:14:16,560 --> 02:14:20,000
you can uh set breakpoints you can set

02:14:18,880 --> 02:14:23,040
conditions

02:14:20,000 --> 02:14:24,480
you can step into the execution um you

02:14:23,040 --> 02:14:26,880
can disassemble

02:14:24,480 --> 02:14:28,079
uh the code so everything that you would

02:14:26,880 --> 02:14:30,400
normally do to understand if

02:14:28,079 --> 02:14:33,520
your application is not working you can

02:14:30,400 --> 02:14:33,520
also do with snaps

02:14:35,199 --> 02:14:39,920
review tools so let's assume that uh you

02:14:38,000 --> 02:14:42,079
have built your snap

02:14:39,920 --> 02:14:43,679
you've tried all the different tricks

02:14:42,079 --> 02:14:45,280
that we've just outlined

02:14:43,679 --> 02:14:47,760
and you believe that your snap is ready

02:14:45,280 --> 02:14:50,639
to be uploaded to the store

02:14:47,760 --> 02:14:51,920
normally what happens is your snap will

02:14:50,639 --> 02:14:55,119
be reviewed

02:14:51,920 --> 02:14:57,199
it will be automatically scanned and

02:14:55,119 --> 02:14:58,880
it may not be allowed into the store

02:14:57,199 --> 02:15:00,880
just yet for publication

02:14:58,880 --> 02:15:02,159
if the security scan detects potential

02:15:00,880 --> 02:15:04,239
problems with your uh

02:15:02,159 --> 02:15:05,520
with your application for instance you

02:15:04,239 --> 02:15:07,440
may have

02:15:05,520 --> 02:15:09,360
broken security permissions or your

02:15:07,440 --> 02:15:11,840
application tries to do something that

02:15:09,360 --> 02:15:13,599
should it shouldn't you will get these

02:15:11,840 --> 02:15:15,280
errors and then your uh

02:15:13,599 --> 02:15:17,199
upload will be blocked basically your

02:15:15,280 --> 02:15:18,960
publication will be blocked until

02:15:17,199 --> 02:15:22,239
there is a manual review by the security

02:15:18,960 --> 02:15:25,599
team to minimize this time disruption

02:15:22,239 --> 02:15:27,360
you can run review tools uh a

02:15:25,599 --> 02:15:29,440
a lightweight version of what happens

02:15:27,360 --> 02:15:32,560
when you upload your snap to the store

02:15:29,440 --> 02:15:33,280
locally install it run it and examine

02:15:32,560 --> 02:15:35,760
your snap

02:15:33,280 --> 02:15:36,719
it will give you indications warnings or

02:15:35,760 --> 02:15:38,880
hard errors

02:15:36,719 --> 02:15:40,159
as to what you may have done wrong

02:15:38,880 --> 02:15:42,800
security wise

02:15:40,159 --> 02:15:45,119
so you can go back fix it get a green

02:15:42,800 --> 02:15:47,599
light from review tools and only then

02:15:45,119 --> 02:15:48,880
upload a snap should save you time

02:15:47,599 --> 02:15:50,639
apologies

02:15:48,880 --> 02:15:52,880
should save you time especially if

02:15:50,639 --> 02:15:56,400
you're in a hurry and you want to upload

02:15:52,880 --> 02:15:56,400
your snap and publish it quickly

02:15:57,119 --> 02:16:04,639
default track most people will probably

02:16:00,960 --> 02:16:06,800
just have one track one main

02:16:04,639 --> 02:16:08,719
let's call it one main path to how they

02:16:06,800 --> 02:16:11,199
publish their snap

02:16:08,719 --> 02:16:13,280
and some people may actually have

02:16:11,199 --> 02:16:15,679
multiple tracks

02:16:13,280 --> 02:16:17,840
and you may have a legacy track for

02:16:15,679 --> 02:16:19,119
instance you may have the latest track

02:16:17,840 --> 02:16:21,760
sorry the latest track is the default

02:16:19,119 --> 02:16:25,360
one you may have a numbered version

02:16:21,760 --> 02:16:27,199
uh tracks for your application but then

02:16:25,360 --> 02:16:30,639
you may want your users not necessarily

02:16:27,199 --> 02:16:32,479
to use the the last or the legacy track

02:16:30,639 --> 02:16:34,080
you can set actually which track is the

02:16:32,479 --> 02:16:36,399
default one so when people install

02:16:34,080 --> 02:16:39,200
without our additional arguments

02:16:36,399 --> 02:16:39,920
they will get the desired version this

02:16:39,200 --> 02:16:42,639
can actually

02:16:39,920 --> 02:16:43,439
also help you perhaps test how your

02:16:42,639 --> 02:16:46,000
different

02:16:43,439 --> 02:16:47,519
versions behave or maybe stagger the

02:16:46,000 --> 02:16:50,240
installation of different

02:16:47,519 --> 02:16:51,920
versions of of the application it's

02:16:50,240 --> 02:16:55,359
entirely up to you but the option is

02:16:51,920 --> 02:16:55,359
there and you can use it

02:16:56,160 --> 02:16:58,960
snap connections

02:16:59,280 --> 02:17:03,280
earlier i mentioned security confinement

02:17:01,439 --> 02:17:07,439
and i mentioned interfaces

02:17:03,280 --> 02:17:09,920
so to to give it a more visual analogy

02:17:07,439 --> 02:17:10,960
uh snaps are fully self-contained so

02:17:09,920 --> 02:17:13,120
they sit in a in

02:17:10,960 --> 02:17:14,319
a in a benevolent prison and they can't

02:17:13,120 --> 02:17:16,800
communicate with the

02:17:14,319 --> 02:17:18,000
outside world that's a security feature

02:17:16,800 --> 02:17:20,080
by design

02:17:18,000 --> 02:17:21,280
but then snaps that don't communicate

02:17:20,080 --> 02:17:23,439
with system resources

02:17:21,280 --> 02:17:24,880
aren't that useful therefore there's the

02:17:23,439 --> 02:17:26,800
mechanism of interfaces

02:17:24,880 --> 02:17:28,160
you can tell snaps to be able to connect

02:17:26,800 --> 02:17:31,359
to the home directory

02:17:28,160 --> 02:17:34,800
to network to the audio and video uh

02:17:31,359 --> 02:17:35,920
perhaps bluetooth usb there are tons and

02:17:34,800 --> 02:17:37,920
tons of interfaces

02:17:35,920 --> 02:17:40,160
some of these will be auto connected

02:17:37,920 --> 02:17:42,080
which means when the snap is installed

02:17:40,160 --> 02:17:43,840
they'll be available to the end user

02:17:42,080 --> 02:17:45,439
others will not

02:17:43,840 --> 02:17:47,280
and if you want to make sure that your

02:17:45,439 --> 02:17:50,719
application works and behaves

02:17:47,280 --> 02:17:52,000
uh as as you expect you can check for

02:17:50,719 --> 02:17:55,679
installed snap

02:17:52,000 --> 02:17:57,679
which uh interfaces it has connected

02:17:55,679 --> 02:17:59,679
basically which plugs and which slots

02:17:57,679 --> 02:18:02,399
those plugs connect into

02:17:59,679 --> 02:18:03,200
and if a certain interface isn't auto

02:18:02,399 --> 02:18:05,120
connected

02:18:03,200 --> 02:18:06,880
then your application may assume

02:18:05,120 --> 02:18:10,160
behavior that is not available

02:18:06,880 --> 02:18:12,000
and may not not run well similarly as an

02:18:10,160 --> 02:18:13,599
end user

02:18:12,000 --> 02:18:15,359
you may want to test the snap but you're

02:18:13,599 --> 02:18:15,679
not quite sure what it does so you could

02:18:15,359 --> 02:18:18,000
say

02:18:15,679 --> 02:18:19,359
okay i will disconnect the snap from

02:18:18,000 --> 02:18:22,639
network for instance

02:18:19,359 --> 02:18:24,960
i want to use an uh office suit just in

02:18:22,639 --> 02:18:26,719
an offline mode or maybe i want to use

02:18:24,960 --> 02:18:28,960
the browser but i don't want to give it

02:18:26,719 --> 02:18:32,160
access to audio or my webcam

02:18:28,960 --> 02:18:34,160
so you can tweak your privacy uh

02:18:32,160 --> 02:18:36,160
opportunistically as you need to you can

02:18:34,160 --> 02:18:36,960
perhaps disconnect the browser during

02:18:36,160 --> 02:18:38,800
the session

02:18:36,960 --> 02:18:40,160
a specific interface for a browser

02:18:38,800 --> 02:18:41,040
during the session then you can connect

02:18:40,160 --> 02:18:43,920
it later on

02:18:41,040 --> 02:18:43,920
and vice versa

02:18:46,240 --> 02:18:50,559
aliases so this is something that can be

02:18:49,439 --> 02:18:53,840
useful

02:18:50,559 --> 02:18:57,760
if your application

02:18:53,840 --> 02:19:00,160
has okay if your snap has multiple

02:18:57,760 --> 02:19:02,719
applications contained inside it

02:19:00,160 --> 02:19:03,679
or you want to make life easier either

02:19:02,719 --> 02:19:07,120
for yourself

02:19:03,679 --> 02:19:10,479
or for your end users normally

02:19:07,120 --> 02:19:13,519
snaps have one application inside

02:19:10,479 --> 02:19:16,240
so let's say for instance uh

02:19:13,519 --> 02:19:17,280
okay i'll just use a silly example let's

02:19:16,240 --> 02:19:19,760
say kcalc

02:19:17,280 --> 02:19:21,439
a calculator it has one application

02:19:19,760 --> 02:19:22,479
inside it it's just the calculator

02:19:21,439 --> 02:19:23,920
itself

02:19:22,479 --> 02:19:26,319
but if you look at something more

02:19:23,920 --> 02:19:27,599
complicated let's say libreoffice or

02:19:26,319 --> 02:19:29,519
calligra

02:19:27,599 --> 02:19:31,519
you have multiple applications you have

02:19:29,519 --> 02:19:33,439
the spreadsheet application you have the

02:19:31,519 --> 02:19:34,719
word processor application you have the

02:19:33,439 --> 02:19:37,599
the

02:19:34,719 --> 02:19:38,000
the presentation one so there can be

02:19:37,599 --> 02:19:39,840
three

02:19:38,000 --> 02:19:41,760
four five ten different applications

02:19:39,840 --> 02:19:43,760
contained inside the snap

02:19:41,760 --> 02:19:45,200
so when you run that snap you act you

02:19:43,760 --> 02:19:48,240
then need to invoke

02:19:45,200 --> 02:19:49,760
the specific application explicitly you

02:19:48,240 --> 02:19:52,240
have to give a full name and then

02:19:49,760 --> 02:19:53,120
the application name and in some cases

02:19:52,240 --> 02:19:56,160
this could be

02:19:53,120 --> 02:19:58,160
a bit cumbersome then if you want to

02:19:56,160 --> 02:19:58,800
make it simpler for your users you can

02:19:58,160 --> 02:20:01,200
request

02:19:58,800 --> 02:20:03,600
from the store team to create aliases

02:20:01,200 --> 02:20:05,439
for you or as an end user you can create

02:20:03,600 --> 02:20:07,680
them locally on your system

02:20:05,439 --> 02:20:08,720
and then for instance instead of

02:20:07,680 --> 02:20:11,920
executing

02:20:08,720 --> 02:20:13,280
let's say libreoffice.writer to run

02:20:11,920 --> 02:20:16,800
writer you could just have

02:20:13,280 --> 02:20:17,760
writer as your alias or something

02:20:16,800 --> 02:20:20,399
completely different

02:20:17,760 --> 02:20:20,960
whatever you feel like this can simplify

02:20:20,399 --> 02:20:23,760
usage

02:20:20,960 --> 02:20:26,399
and make the overall experience more

02:20:23,760 --> 02:20:26,399
streamlined

02:20:28,319 --> 02:20:35,040
parallel installs i think this is

02:20:31,920 --> 02:20:36,560
probably one of the nicest and user

02:20:35,040 --> 02:20:39,120
features

02:20:36,560 --> 02:20:40,880
that exist and one of the great

02:20:39,120 --> 02:20:41,680
advantages of snaps compared to the

02:20:40,880 --> 02:20:44,720
traditional

02:20:41,680 --> 02:20:45,359
linux packaging you can have multiple

02:20:44,720 --> 02:20:47,120
versions

02:20:45,359 --> 02:20:49,840
of the same snap installed on your

02:20:47,120 --> 02:20:51,600
system and in some cases you may even be

02:20:49,840 --> 02:20:52,640
able to run multiple versions of the

02:20:51,600 --> 02:20:55,680
same application

02:20:52,640 --> 02:20:58,479
in parallel the way this is done

02:20:55,680 --> 02:21:00,319
is you may potentially need to enable an

02:20:58,479 --> 02:21:02,880
experimental feature on your system

02:21:00,319 --> 02:21:03,680
if it's not enabled or supported and

02:21:02,880 --> 02:21:06,560
then

02:21:03,680 --> 02:21:08,640
you can install a snap by giving it the

02:21:06,560 --> 02:21:11,280
name it has in the store

02:21:08,640 --> 02:21:12,160
and then underscore as a qualifier that

02:21:11,280 --> 02:21:14,560
defines

02:21:12,160 --> 02:21:16,399
the versioning and then give it a

02:21:14,560 --> 02:21:19,520
whatever string you like

02:21:16,399 --> 02:21:21,840
as a version name so for instance

02:21:19,520 --> 02:21:23,600
we have a screenshot here of vlc we can

02:21:21,840 --> 02:21:28,000
install vlc first

02:21:23,600 --> 02:21:30,319
vlc second vlc fifth whatever you like

02:21:28,000 --> 02:21:31,920
and then these multiple snaps will be

02:21:30,319 --> 02:21:34,000
presented on your system

02:21:31,920 --> 02:21:35,359
in parallel and then you can run the

02:21:34,000 --> 02:21:36,560
first instance and the second and the

02:21:35,359 --> 02:21:38,319
third and the fourth

02:21:36,560 --> 02:21:40,880
and you can perhaps compare how they

02:21:38,319 --> 02:21:41,840
behave i here have a screenshot where

02:21:40,880 --> 02:21:45,200
you have the

02:21:41,840 --> 02:21:46,080
the current vlc3 family and then the new

02:21:45,200 --> 02:21:48,240
vlc4

02:21:46,080 --> 02:21:50,080
sitting side by side and you can see oh

02:21:48,240 --> 02:21:52,160
i like the new ui i don't like it

02:21:50,080 --> 02:21:56,240
i want to compare functionality is the

02:21:52,160 --> 02:21:58,399
audio quality the same and so forth

02:21:56,240 --> 02:22:00,160
please note that in some cases your

02:21:58,399 --> 02:22:02,640
application itself

02:22:00,160 --> 02:22:03,520
may not like having multiple instances

02:22:02,640 --> 02:22:06,399
of itself

02:22:03,520 --> 02:22:08,399
loaded into memory uh an application may

02:22:06,399 --> 02:22:12,800
bind to a port

02:22:08,399 --> 02:22:12,800
maybe sockets may expect

02:22:13,359 --> 02:22:17,120
may expect to use a data profile from

02:22:15,920 --> 02:22:19,200
your hard disk

02:22:17,120 --> 02:22:21,439
and if multiple instances try to access

02:22:19,200 --> 02:22:22,720
these same resources at the same time

02:22:21,439 --> 02:22:26,240
you could have a contention or a

02:22:22,720 --> 02:22:28,560
potential conflict so in some cases

02:22:26,240 --> 02:22:30,720
this may not work from the pure

02:22:28,560 --> 02:22:33,520
application functionality aspect

02:22:30,720 --> 02:22:35,600
but in others it may work really well

02:22:33,520 --> 02:22:37,680
and even if you can't really run things

02:22:35,600 --> 02:22:39,760
at the same time you can have them

02:22:37,680 --> 02:22:41,840
definitely installed in parallel

02:22:39,760 --> 02:22:43,520
and then test them in a different way

02:22:41,840 --> 02:22:44,640
this doesn't don't have to be just major

02:22:43,520 --> 02:22:47,439
version differences

02:22:44,640 --> 02:22:49,120
these could be different uh stability uh

02:22:47,439 --> 02:22:50,000
levels that are available in the store

02:22:49,120 --> 02:22:52,640
you can have

02:22:50,000 --> 02:22:53,840
a stable version and an edge version

02:22:52,640 --> 02:22:56,000
side by side

02:22:53,840 --> 02:22:58,160
compare them see how they behave is

02:22:56,000 --> 02:22:59,439
there any breakage and functionality

02:22:58,160 --> 02:23:01,359
is everything working the way you

02:22:59,439 --> 02:23:03,760
expected you want to migrate

02:23:01,359 --> 02:23:05,840
to a new version of a tool are your

02:23:03,760 --> 02:23:07,520
databases going to be affected

02:23:05,840 --> 02:23:11,040
is your usage pattern going to be

02:23:07,520 --> 02:23:11,040
affected it's quite useful

02:23:11,760 --> 02:23:20,080
okay now a little bit of housekeeping

02:23:16,840 --> 02:23:20,640
so today people have pretty big hard

02:23:20,080 --> 02:23:23,840
disks

02:23:20,640 --> 02:23:26,160
normally and space isn't an issue

02:23:23,840 --> 02:23:27,040
but sometimes especially for laptop

02:23:26,160 --> 02:23:29,439
users

02:23:27,040 --> 02:23:30,160
uh storage can still be a bit of a

02:23:29,439 --> 02:23:33,439
problem

02:23:30,160 --> 02:23:36,640
if you have ssd or nvme

02:23:33,439 --> 02:23:38,399
storage they usually come at a higher

02:23:36,640 --> 02:23:40,560
price so you won't necessarily have two

02:23:38,399 --> 02:23:43,200
or four or eight terabyte ssd

02:23:40,560 --> 02:23:44,399
you'll probably have something smaller

02:23:43,200 --> 02:23:48,000
and in that case

02:23:44,399 --> 02:23:49,520
you may want to kind of make sure that

02:23:48,000 --> 02:23:52,319
your disk usage is

02:23:49,520 --> 02:23:53,439
reasonable by default when installed

02:23:52,319 --> 02:23:55,760
snaps

02:23:53,439 --> 02:23:58,479
three revisions will be kept so you

02:23:55,760 --> 02:24:00,319
install revision one two and three

02:23:58,479 --> 02:24:02,080
the pointer will rotate to the latest

02:24:00,319 --> 02:24:03,680
version and you will be using it but the

02:24:02,080 --> 02:24:05,120
others will still exist on your disk and

02:24:03,680 --> 02:24:08,240
take space

02:24:05,120 --> 02:24:09,920
you can actually tell uh snapd the

02:24:08,240 --> 02:24:13,280
service that manages this

02:24:09,920 --> 02:24:15,760
how many versions you want to retain

02:24:13,280 --> 02:24:16,479
the minimum is actually two but you can

02:24:15,760 --> 02:24:18,960
go up

02:24:16,479 --> 02:24:19,600
as much as you like and this could be

02:24:18,960 --> 02:24:23,200
useful

02:24:19,600 --> 02:24:25,120
if you have i don't know if you

02:24:23,200 --> 02:24:26,560
need to have these multiple versions for

02:24:25,120 --> 02:24:29,120
legacy purposes

02:24:26,560 --> 02:24:31,439
for for testing purposes to keep track

02:24:29,120 --> 02:24:34,000
nostalgia sake whatever you like

02:24:31,439 --> 02:24:34,560
this this way you can trim down overall

02:24:34,000 --> 02:24:37,040
usage

02:24:34,560 --> 02:24:38,000
of how much snap stake at the very least

02:24:37,040 --> 02:24:41,439
if you want to

02:24:38,000 --> 02:24:44,000
trim it down by about a third

02:24:41,439 --> 02:24:44,960
i will stop briefly to answer a question

02:24:44,000 --> 02:24:47,200
um

02:24:44,960 --> 02:24:49,120
where about the previous point which i

02:24:47,200 --> 02:24:51,920
brought up i'll go back

02:24:49,120 --> 02:24:57,359
it's do parallel installations isolate

02:24:51,920 --> 02:25:00,000
instance app configurations

02:24:57,359 --> 02:25:00,800
if i understand correctly this question

02:25:00,000 --> 02:25:03,920
is

02:25:00,800 --> 02:25:07,280
um does each snap

02:25:03,920 --> 02:25:10,160
run data isolated from the others

02:25:07,280 --> 02:25:12,000
and the answer is maybe so of course

02:25:10,160 --> 02:25:13,760
some data will be private

02:25:12,000 --> 02:25:15,280
but there will be some shared data let's

02:25:13,760 --> 02:25:16,000
let's think of something like a browser

02:25:15,280 --> 02:25:17,840
profile

02:25:16,000 --> 02:25:19,040
your browser profile is one and it sits

02:25:17,840 --> 02:25:21,920
on the disk right

02:25:19,040 --> 02:25:23,600
so if you load your browser profile and

02:25:21,920 --> 02:25:26,720
you want to load it into two different

02:25:23,600 --> 02:25:29,040
instances of of an application

02:25:26,720 --> 02:25:30,960
that may work may not work uh the

02:25:29,040 --> 02:25:33,600
problem is mostly with writing right

02:25:30,960 --> 02:25:34,800
if you do two separate browsing sessions

02:25:33,600 --> 02:25:36,840
and then you need to write

02:25:34,800 --> 02:25:38,080
the session to the disk which one takes

02:25:36,840 --> 02:25:40,000
precedence

02:25:38,080 --> 02:25:41,520
a separate one would be uh your

02:25:40,000 --> 02:25:43,640
application may have

02:25:41,520 --> 02:25:45,760
may listen on a local port let's say

02:25:43,640 --> 02:25:48,640
02:25:45,760 --> 02:25:49,120
both versions cannot bind to the same

02:25:48,640 --> 02:25:51,760
port

02:25:49,120 --> 02:25:52,720
at the same time you might have to edit

02:25:51,760 --> 02:25:55,720
configuration

02:25:52,720 --> 02:25:57,200
and say okay this version goes to port

02:25:55,720 --> 02:26:00,479
02:25:57,200 --> 02:26:01,120
the other one will go 501. those kind of

02:26:00,479 --> 02:26:04,479
things

02:26:01,120 --> 02:26:05,120
so it is a combination of what snaps can

02:26:04,479 --> 02:26:08,640
do

02:26:05,120 --> 02:26:10,640
but also what the application can do

02:26:08,640 --> 02:26:12,880
worst case you will have these parallel

02:26:10,640 --> 02:26:14,640
instances but you may need to run them

02:26:12,880 --> 02:26:16,640
sequentially however you still have the

02:26:14,640 --> 02:26:19,520
option to do that

02:26:16,640 --> 02:26:20,800
running parallel instances in parallel

02:26:19,520 --> 02:26:23,359
applications

02:26:20,800 --> 02:26:24,160
on your desk that may or may not work

02:26:23,359 --> 02:26:27,920
always

02:26:24,160 --> 02:26:27,920
that's a bit of a hit and miss

02:26:28,560 --> 02:26:32,560
so back to the snap provisions like i

02:26:31,920 --> 02:26:35,280
said

02:26:32,560 --> 02:26:35,760
we can by this way this way you can trim

02:26:35,280 --> 02:26:38,720
down

02:26:35,760 --> 02:26:40,240
the data usage by about a third or of

02:26:38,720 --> 02:26:44,240
course increase it if you have

02:26:40,240 --> 02:26:45,439
a need for that on the maintenance side

02:26:44,240 --> 02:26:49,040
there's also

02:26:45,439 --> 02:26:49,760
an important element of date of snap

02:26:49,040 --> 02:26:53,200
updates

02:26:49,760 --> 02:26:55,280
so snap refresh occasionally by default

02:26:53,200 --> 02:26:56,399
uh snapd will contact the store four

02:26:55,280 --> 02:26:58,640
times a day

02:26:56,399 --> 02:26:59,600
and ask for any updates to your

02:26:58,640 --> 02:27:01,840
installed snaps

02:26:59,600 --> 02:27:03,439
if those updates exist your snaps will

02:27:01,840 --> 02:27:06,240
be updated

02:27:03,439 --> 02:27:06,800
in some cases this may not be convenient

02:27:06,240 --> 02:27:09,120
uh

02:27:06,800 --> 02:27:10,640
you may be presenting like i'm doing now

02:27:09,120 --> 02:27:12,479
you don't necessarily want to have an

02:27:10,640 --> 02:27:15,200
update happening in the background

02:27:12,479 --> 02:27:16,399
for um it could be disk users be network

02:27:15,200 --> 02:27:17,600
usage or you just don't want an

02:27:16,399 --> 02:27:19,680
application to update while you're

02:27:17,600 --> 02:27:23,200
working with it

02:27:19,680 --> 02:27:25,680
you may also have a specific

02:27:23,200 --> 02:27:26,560
environment requirement say at your

02:27:25,680 --> 02:27:29,680
workplace

02:27:26,560 --> 02:27:30,160
you don't install applications on every

02:27:29,680 --> 02:27:32,560
system

02:27:30,160 --> 02:27:33,280
in at the same time you have staggered

02:27:32,560 --> 02:27:35,439
deployment

02:27:33,280 --> 02:27:36,479
installed on a four or five test

02:27:35,439 --> 02:27:39,439
machines first

02:27:36,479 --> 02:27:41,280
then you have a kind of a semi-staging

02:27:39,439 --> 02:27:44,319
area and then finally you have

02:27:41,280 --> 02:27:48,160
uh a production setup so

02:27:44,319 --> 02:27:50,479
you can modify when the snapd service

02:27:48,160 --> 02:27:51,600
runs its updates there are multiple

02:27:50,479 --> 02:27:54,160
options uh

02:27:51,600 --> 02:27:54,720
first of all you can set almost like a

02:27:54,160 --> 02:27:57,040
cron

02:27:54,720 --> 02:27:58,880
a specific time table you can say that

02:27:57,040 --> 02:28:00,000
updates only happen on friday at 2

02:27:58,880 --> 02:28:03,200
o'clock

02:28:00,000 --> 02:28:07,760
you could also say that

02:28:03,200 --> 02:28:10,240
snaps only update every second tuesday

02:28:07,760 --> 02:28:12,000
or you can go with a very specific date

02:28:10,240 --> 02:28:15,439
format which you can set and then

02:28:12,000 --> 02:28:18,399
convert to tell snap d okay

02:28:15,439 --> 02:28:19,200
i'd like my snaps to update on the 27th

02:28:18,399 --> 02:28:22,800
of

02:28:19,200 --> 02:28:26,000
may at 9 24 in the morning

02:28:22,800 --> 02:28:27,840
this way you can then combine

02:28:26,000 --> 02:28:29,280
updates which bring security and

02:28:27,840 --> 02:28:33,040
functionality changes

02:28:29,280 --> 02:28:36,319
with testing uh reliability practices

02:28:33,040 --> 02:28:38,160
or other other things that you may have

02:28:36,319 --> 02:28:38,510
in your business organization or even at

02:28:38,160 --> 02:28:39,760
home

02:28:38,510 --> 02:28:43,120
[Music]

02:28:39,760 --> 02:28:45,600
by in general you can defer snap updates

02:28:43,120 --> 02:28:48,080
up to 60 days at the moment

02:28:45,600 --> 02:28:50,319
this may change the future as in you may

02:28:48,080 --> 02:28:53,840
get additional further controls and

02:28:50,319 --> 02:28:55,600
flexibility in how this is done

02:28:53,840 --> 02:28:57,200
there is a question here where it says

02:28:55,600 --> 02:28:58,880
will it be possible to configure

02:28:57,200 --> 02:29:01,840
refreshing from the store

02:28:58,880 --> 02:29:03,040
gui or the updates app or the

02:29:01,840 --> 02:29:08,479
repositories

02:29:03,040 --> 02:29:12,319
to make it more friendly for newbies

02:29:08,479 --> 02:29:16,240
the answer is perhaps

02:29:12,319 --> 02:29:16,800
so one thing to take into account is

02:29:16,240 --> 02:29:19,600
that

02:29:16,800 --> 02:29:21,760
people don't necessarily just use ubuntu

02:29:19,600 --> 02:29:23,840
they may be on a fedora system or arch

02:29:21,760 --> 02:29:26,160
manjaro or open susa

02:29:23,840 --> 02:29:27,200
and their front end will be different so

02:29:26,160 --> 02:29:29,760
in some cases

02:29:27,200 --> 02:29:30,960
the implementation will rely on the

02:29:29,760 --> 02:29:33,200
specific

02:29:30,960 --> 02:29:34,880
distro implementation whether it allows

02:29:33,200 --> 02:29:37,840
and supports

02:29:34,880 --> 02:29:38,479
snaps in the back end if that exists it

02:29:37,840 --> 02:29:42,479
might be

02:29:38,479 --> 02:29:45,680
implementable whether this

02:29:42,479 --> 02:29:47,359
should be available through a front-end

02:29:45,680 --> 02:29:49,040
let's say a gnome software on your

02:29:47,359 --> 02:29:52,160
ubuntu system

02:29:49,040 --> 02:29:55,280
maybe it's a double-edged sword

02:29:52,160 --> 02:29:57,359
because on one hand if you are a newbie

02:29:55,280 --> 02:29:58,720
you might not necessarily want to tinker

02:29:57,359 --> 02:30:00,319
with updates

02:29:58,720 --> 02:30:03,280
because you don't necessarily understand

02:30:00,319 --> 02:30:07,600
the full implications of such changes

02:30:03,280 --> 02:30:09,760
if you are a more tech savvy user

02:30:07,600 --> 02:30:10,800
then you will have 15 workarounds to

02:30:09,760 --> 02:30:13,359
every problem

02:30:10,800 --> 02:30:15,520
and five solutions as well and then you

02:30:13,359 --> 02:30:17,439
will feel comfortable doing it

02:30:15,520 --> 02:30:18,880
it is very difficult to balance these

02:30:17,439 --> 02:30:21,200
kind of things because

02:30:18,880 --> 02:30:22,560
normally what you end up is either

02:30:21,200 --> 02:30:25,600
oversimplified solution

02:30:22,560 --> 02:30:28,000
that makes techies super angry

02:30:25,600 --> 02:30:29,200
or you end up with super techie

02:30:28,000 --> 02:30:31,760
solutions that

02:30:29,200 --> 02:30:32,800
newbies cannot use technology in a way

02:30:31,760 --> 02:30:34,960
if you look at the two

02:30:32,800 --> 02:30:35,920
sides of the spectrum you either have

02:30:34,960 --> 02:30:37,439
something that's

02:30:35,920 --> 02:30:39,200
very very simplified like you have on

02:30:37,439 --> 02:30:40,960
smartphones today in a way

02:30:39,200 --> 02:30:43,120
or you have linux where it's basically

02:30:40,960 --> 02:30:44,479
do it yourself and then what's the best

02:30:43,120 --> 02:30:47,200
solution

02:30:44,479 --> 02:30:48,560
for for mid-range users it's hard to say

02:30:47,200 --> 02:30:50,160
um

02:30:48,560 --> 02:30:51,600
please email me you'll see my email at

02:30:50,160 --> 02:30:54,080
the end of this presentation

02:30:51,600 --> 02:30:54,720
i'll bring it up with the snap b team

02:30:54,080 --> 02:30:56,720
and

02:30:54,720 --> 02:30:58,479
we consider all proposals ideas and

02:30:56,720 --> 02:30:59,920
suggestions doesn't mean we implement

02:30:58,479 --> 02:31:00,960
all of them but we'll definitely look at

02:30:59,920 --> 02:31:04,000
it and if you have

02:31:00,960 --> 02:31:06,000
a a real need and there's a way for us

02:31:04,000 --> 02:31:07,760
to implement it in a reasonable way

02:31:06,000 --> 02:31:10,399
i don't think there should be a big

02:31:07,760 --> 02:31:10,399
problem with it

02:31:10,640 --> 02:31:16,160
okay so snap refresh control you can do

02:31:14,399 --> 02:31:19,200
basically whatever you like

02:31:16,160 --> 02:31:20,960
well within reason and i think this can

02:31:19,200 --> 02:31:22,319
be especially useful if you have a

02:31:20,960 --> 02:31:25,200
critical application

02:31:22,319 --> 02:31:26,160
that uses consume as a snap so you can

02:31:25,200 --> 02:31:27,840
then say all right

02:31:26,160 --> 02:31:29,600
i have four systems the first system

02:31:27,840 --> 02:31:31,760
will get its updates daily

02:31:29,600 --> 02:31:33,920
the second system will do it only weekly

02:31:31,760 --> 02:31:36,080
the third one will have a monthly update

02:31:33,920 --> 02:31:37,680
with rigorous qa and the fourth one a

02:31:36,080 --> 02:31:38,640
production system only if the first

02:31:37,680 --> 02:31:42,080
three checks

02:31:38,640 --> 02:31:44,399
pass we deploy and then that one will

02:31:42,080 --> 02:31:46,640
have say uh deferral of 60 days

02:31:44,399 --> 02:31:48,399
and every time you successfully update

02:31:46,640 --> 02:31:51,760
your snap you will then

02:31:48,399 --> 02:31:53,200
push uh the date for next update by

02:31:51,760 --> 02:31:54,960
another 60 days

02:31:53,200 --> 02:31:56,720
that's just an example or you somehow

02:31:54,960 --> 02:31:58,080
combine it with your configuration

02:31:56,720 --> 02:32:01,840
management tools

02:31:58,080 --> 02:32:01,840
puppets chef or so and so forth

02:32:02,319 --> 02:32:05,840
number 15 this will be the last trick of

02:32:05,040 --> 02:32:09,359
the day

02:32:05,840 --> 02:32:11,120
is snap snapshots i added a lightweight

02:32:09,359 --> 02:32:15,200
joke here for you to practice at home

02:32:11,120 --> 02:32:18,319
after the um the session basically

02:32:15,200 --> 02:32:21,280
you can snapshot your snaps and

02:32:18,319 --> 02:32:23,280
snap snaps get snapshotted automatically

02:32:21,280 --> 02:32:25,120
when they get removed

02:32:23,280 --> 02:32:27,680
i have a snap on your system and you

02:32:25,120 --> 02:32:31,120
don't want it anymore you delete it

02:32:27,680 --> 02:32:31,520
because and then two days later you say

02:32:31,120 --> 02:32:33,200
oh

02:32:31,520 --> 02:32:34,720
i didn't back up my data that was

02:32:33,200 --> 02:32:37,359
contained in that snap

02:32:34,720 --> 02:32:38,720
it will be gone right to avoid that

02:32:37,359 --> 02:32:41,200
painful situation where

02:32:38,720 --> 02:32:43,680
things are forever deleted and any trace

02:32:41,200 --> 02:32:46,720
of it is lost from your disc

02:32:43,680 --> 02:32:50,000
snap d will keep a snapshot

02:32:46,720 --> 02:32:51,840
of a deleted snap for 30 days you can

02:32:50,000 --> 02:32:53,439
again manually yes the question number

02:32:51,840 --> 02:32:55,120
three is can we force snapshots yes you

02:32:53,439 --> 02:32:58,240
can you can just run snap

02:32:55,120 --> 02:33:00,160
snap save name of a snap and

02:32:58,240 --> 02:33:01,760
you will have a snapshot on your disk of

02:33:00,160 --> 02:33:03,680
course this takes space

02:33:01,760 --> 02:33:05,680
snapshot is basically just an archive

02:33:03,680 --> 02:33:07,520
you can copy then and extract it to a

02:33:05,680 --> 02:33:10,560
different system if you like

02:33:07,520 --> 02:33:13,600
if you want to have your own data

02:33:10,560 --> 02:33:16,479
retention or reinstallation policy

02:33:13,600 --> 02:33:18,240
you could technically have a script that

02:33:16,479 --> 02:33:22,080
snapshots your snaps

02:33:18,240 --> 02:33:23,920
you can then scp or rsync that data to a

02:33:22,080 --> 02:33:27,520
second system for instance

02:33:23,920 --> 02:33:28,240
extract the data from the snapshotted

02:33:27,520 --> 02:33:31,280
archives

02:33:28,240 --> 02:33:34,720
into the snap writable directories and

02:33:31,280 --> 02:33:38,479
you will have the data available for use

02:33:34,720 --> 02:33:41,040
in some cases if your application has

02:33:38,479 --> 02:33:42,479
system or machine specific information

02:33:41,040 --> 02:33:44,160
saved

02:33:42,479 --> 02:33:45,600
then you could potentially encounter

02:33:44,160 --> 02:33:47,359
weird things when you restore these

02:33:45,600 --> 02:33:49,359
snapshots on a different system

02:33:47,359 --> 02:33:51,520
let's say that your application relies

02:33:49,359 --> 02:33:53,920
on a machine uuid

02:33:51,520 --> 02:33:55,680
or a hardware model for some reason a

02:33:53,920 --> 02:33:58,800
string of a horizon but something

02:33:55,680 --> 02:34:00,080
whatever right if you then restore on a

02:33:58,800 --> 02:34:01,760
system that doesn't have those

02:34:00,080 --> 02:34:02,319
specifications your application may go

02:34:01,760 --> 02:34:04,399
away

02:34:02,319 --> 02:34:05,760
i'm using data that doesn't really

02:34:04,399 --> 02:34:08,720
belong to me

02:34:05,760 --> 02:34:09,840
but in general you can create snapshots

02:34:08,720 --> 02:34:13,600
whenever you like

02:34:09,840 --> 02:34:15,359
you can check them you can delete them

02:34:13,600 --> 02:34:17,680
you can also delete snapshots that are

02:34:15,359 --> 02:34:19,760
created for your deleted snaps

02:34:17,680 --> 02:34:22,000
if you feel like okay i don't want this

02:34:19,760 --> 02:34:25,280
i really want my disk space back

02:34:22,000 --> 02:34:26,560
you can just uh purge any snapshot

02:34:25,280 --> 02:34:28,840
with the full knowledge that your data

02:34:26,560 --> 02:34:32,319
will be gone of course inside those

02:34:28,840 --> 02:34:35,920
instructions and i think

02:34:32,319 --> 02:34:40,240
this brings me to one

02:34:35,920 --> 02:34:42,080
questions and my contact details

02:34:40,240 --> 02:34:44,080
so if you want to ask any questions

02:34:42,080 --> 02:34:46,800
around snaps or even any other

02:34:44,080 --> 02:34:48,399
things feel free to reach out if i don't

02:34:46,800 --> 02:34:51,280
have the answer i'll direct you to the

02:34:48,399 --> 02:34:53,120
right person in canonical

02:34:51,280 --> 02:34:54,720
we have about 10 minutes if i'm not

02:34:53,120 --> 02:34:57,840
mistaken and

02:34:54,720 --> 02:35:01,200
feel free to feel free to ask any

02:34:57,840 --> 02:35:01,200
questions that haven't been raised so

02:35:10,840 --> 02:35:13,840
far

02:35:26,479 --> 02:35:33,359
okay we have

02:35:29,920 --> 02:35:33,359
uh yes yes please

02:35:35,439 --> 02:35:40,319
okay so we have two questions uh i'll

02:35:38,560 --> 02:35:43,040
answer number five first because it was

02:35:40,319 --> 02:35:45,439
uh type down first is what will happen

02:35:43,040 --> 02:35:48,479
if different users install the same snap

02:35:45,439 --> 02:35:49,120
will different snaps be installed i

02:35:48,479 --> 02:35:51,600
presume

02:35:49,120 --> 02:35:53,439
uh the question is it's the same system

02:35:51,600 --> 02:35:56,000
a multi-user system which has

02:35:53,439 --> 02:35:57,520
two three four users running on it and

02:35:56,000 --> 02:35:58,000
they all have admin privileges to

02:35:57,520 --> 02:36:00,800
install

02:35:58,000 --> 02:36:03,280
applications am i correct in this

02:36:00,800 --> 02:36:03,280
assumption

02:36:04,319 --> 02:36:10,800
so snaps are installed uh globally so

02:36:07,520 --> 02:36:12,319
you can't really ins well you can

02:36:10,800 --> 02:36:13,760
parallel and install multiple versions

02:36:12,319 --> 02:36:14,720
but if you install the snap it's it's

02:36:13,760 --> 02:36:16,800
there

02:36:14,720 --> 02:36:18,080
so you won't necessarily have a problem

02:36:16,800 --> 02:36:20,640
where you have

02:36:18,080 --> 02:36:21,920
multiple names but you don't have

02:36:20,640 --> 02:36:23,600
multiple namespaces there's one

02:36:21,920 --> 02:36:26,880
namespace

02:36:23,600 --> 02:36:28,720
so that shouldn't be a big issue however

02:36:26,880 --> 02:36:30,720
if you have multiple admins they could

02:36:28,720 --> 02:36:32,960
potentially

02:36:30,720 --> 02:36:35,680
install multiple parallel versions of a

02:36:32,960 --> 02:36:37,600
snap they could three configurations

02:36:35,680 --> 02:36:39,840
or they could do things with system

02:36:37,600 --> 02:36:41,920
management that could conflict what the

02:36:39,840 --> 02:36:44,479
other user has in mind

02:36:41,920 --> 02:36:46,080
uh when it comes to admin i think it's

02:36:44,479 --> 02:36:49,439
like in the movie highlander

02:36:46,080 --> 02:36:51,120
there can there should be only one so

02:36:49,439 --> 02:36:53,520
hopefully you you have seen the movie

02:36:51,120 --> 02:36:56,560
and remember so otherwise my joke is

02:36:53,520 --> 02:36:57,760
uh waste here number four does debian

02:36:56,560 --> 02:37:01,040
also have such system

02:36:57,760 --> 02:37:03,920
feature can you please clarify

02:37:01,040 --> 02:37:06,560
what you mean by uh such system feature

02:37:03,920 --> 02:37:09,280
i'm not 100 sure which one it is

02:37:06,560 --> 02:37:12,800
we have 15 things that i've mentioned so

02:37:09,280 --> 02:37:12,800
is this related to snapshots

02:37:15,200 --> 02:37:22,240
okay um

02:37:19,359 --> 02:37:23,920
does debian have snapshotting

02:37:22,240 --> 02:37:26,960
functionality on its own

02:37:23,920 --> 02:37:29,840
to the best of my knowledge no most

02:37:26,960 --> 02:37:31,680
linux distributions don't have that

02:37:29,840 --> 02:37:35,680
because the file system

02:37:31,680 --> 02:37:37,680
isn't um isn't layered the file

02:37:35,680 --> 02:37:40,479
everything is basically

02:37:37,680 --> 02:37:42,160
shared some operating systems do have

02:37:40,479 --> 02:37:45,600
this for instance opensuse

02:37:42,160 --> 02:37:48,240
if you if you use butterfs has a

02:37:45,600 --> 02:37:48,640
tool called snapper which allows you to

02:37:48,240 --> 02:37:52,319
create

02:37:48,640 --> 02:37:54,800
uh butterfest snapshots and then

02:37:52,319 --> 02:37:56,240
you you have the ability to delta your

02:37:54,800 --> 02:37:58,000
system changes

02:37:56,240 --> 02:38:00,000
and if you don't like something you can

02:37:58,000 --> 02:38:01,439
then restore a previous

02:38:00,000 --> 02:38:04,560
version i think even through the boot

02:38:01,439 --> 02:38:06,880
menu if there are any open sources users

02:38:04,560 --> 02:38:08,399
who have used better effects and snapper

02:38:06,880 --> 02:38:08,960
you can maybe help out and add

02:38:08,399 --> 02:38:12,319
additional

02:38:08,960 --> 02:38:13,040
information here most distros and most

02:38:12,319 --> 02:38:14,479
systems

02:38:13,040 --> 02:38:16,160
linux systems don't have snapshot

02:38:14,479 --> 02:38:21,040
features you can implement

02:38:16,160 --> 02:38:21,040
your own mechanism with something like

02:38:21,600 --> 02:38:27,680
time shift or you can use system imaging

02:38:25,120 --> 02:38:28,720
or you can just use rsync and create

02:38:27,680 --> 02:38:33,600
your own

02:38:28,720 --> 02:38:36,960
archives so whoever asked number four

02:38:33,600 --> 02:38:36,960
i hope this answers your question

02:38:38,640 --> 02:38:44,319
thank you number six can you use the

02:38:42,319 --> 02:38:45,200
home interface to give each snap its own

02:38:44,319 --> 02:38:48,240
home directory

02:38:45,200 --> 02:38:51,200
mapping to an arbitrary location in

02:38:48,240 --> 02:38:51,200
the file system

02:38:52,240 --> 02:38:57,520
snaps don't necessarily have

02:38:55,280 --> 02:38:59,600
access to arbitrary locations because of

02:38:57,520 --> 02:39:02,960
the security confinement

02:38:59,600 --> 02:39:05,359
there is a confinement mode

02:39:02,960 --> 02:39:06,800
called classic which gives you system

02:39:05,359 --> 02:39:09,280
level permissions

02:39:06,800 --> 02:39:10,479
that one has arbitrary access to the

02:39:09,280 --> 02:39:12,319
system and it's

02:39:10,479 --> 02:39:13,920
necessary in some cases like for

02:39:12,319 --> 02:39:15,920
instance ides

02:39:13,920 --> 02:39:17,520
which need to access data in random

02:39:15,920 --> 02:39:20,800
places or even

02:39:17,520 --> 02:39:23,280
trigger arbitrary binaries

02:39:20,800 --> 02:39:24,800
strictly confined snaps are not designed

02:39:23,280 --> 02:39:28,160
to wander around the system

02:39:24,800 --> 02:39:29,760
and touch things that they don't belong

02:39:28,160 --> 02:39:33,359
to them

02:39:29,760 --> 02:39:36,960
so snaps yes they can have

02:39:33,359 --> 02:39:39,680
their own data

02:39:36,960 --> 02:39:40,640
repositories or they their own mini

02:39:39,680 --> 02:39:42,960
homes

02:39:40,640 --> 02:39:44,960
but then they need to be implemented in

02:39:42,960 --> 02:39:48,160
the application logic

02:39:44,960 --> 02:39:50,560
you could potentially say to your uh

02:39:48,160 --> 02:39:52,479
your snap could then write its

02:39:50,560 --> 02:39:53,600
configuration into a specific

02:39:52,479 --> 02:39:56,240
subdirectory

02:39:53,600 --> 02:39:56,880
or use a specific hidden file that can

02:39:56,240 --> 02:39:59,200
also be

02:39:56,880 --> 02:40:02,000
uh agreed upon from the securities

02:39:59,200 --> 02:40:04,479
perspective with a store team

02:40:02,000 --> 02:40:06,640
and but there is also an element of

02:40:04,479 --> 02:40:07,760
replication logic it cannot be just a

02:40:06,640 --> 02:40:11,840
blind

02:40:07,760 --> 02:40:12,479
snapside change the the actual content

02:40:11,840 --> 02:40:14,640
of the snap

02:40:12,479 --> 02:40:15,600
also needs to be location aware in that

02:40:14,640 --> 02:40:17,680
sense

02:40:15,600 --> 02:40:19,520
otherwise if you just use something like

02:40:17,680 --> 02:40:21,120
documents or pictures

02:40:19,520 --> 02:40:23,359
it will assume it's the documents and

02:40:21,120 --> 02:40:25,760
pictures that are available to your home

02:40:23,359 --> 02:40:25,760
directory

02:40:27,920 --> 02:40:35,840
any other questions

02:40:40,640 --> 02:40:44,240
what okay question number seven what

02:40:43,080 --> 02:40:47,120
containerization

02:40:44,240 --> 02:40:48,240
tools are used in snap example bubble

02:40:47,120 --> 02:40:51,520
wrap in

02:40:48,240 --> 02:40:52,080
uh flatback so the security confinement

02:40:51,520 --> 02:40:55,359
is done

02:40:52,080 --> 02:40:56,160
through multiple tools there's up armor

02:40:55,359 --> 02:40:59,359
rules

02:40:56,160 --> 02:41:01,359
there's sec comp and c groups

02:40:59,359 --> 02:41:02,720
those three give you pretty much the

02:41:01,359 --> 02:41:05,279
isolation

02:41:02,720 --> 02:41:06,800
uh from the underlying system you can

02:41:05,279 --> 02:41:10,479
actually uh inspect this

02:41:06,800 --> 02:41:13,439
uh if you have a snap system with snap d

02:41:10,479 --> 02:41:14,399
go under var snap and start exploring

02:41:13,439 --> 02:41:17,200
and you will

02:41:14,399 --> 02:41:17,520
see some rather interesting things or if

02:41:17,200 --> 02:41:19,520
you

02:41:17,520 --> 02:41:21,279
are code savvy and you really want to

02:41:19,520 --> 02:41:24,080
know the internal

02:41:21,279 --> 02:41:25,600
mechanisms of the snapd service it's

02:41:24,080 --> 02:41:28,000
available on github

02:41:25,600 --> 02:41:28,960
source is there you can poke around and

02:41:28,000 --> 02:41:30,399
see what gives

02:41:28,960 --> 02:41:32,640
even compile your own version if you

02:41:30,399 --> 02:41:32,640
like

02:41:42,840 --> 02:41:45,840
questions

02:41:56,479 --> 02:42:00,160
we can also do a live practice of that

02:41:58,479 --> 02:42:02,720
funny sentence that i wrote in

02:42:00,160 --> 02:42:03,520
uh slide number 15 is how many snaps

02:42:02,720 --> 02:42:06,720
could

02:42:03,520 --> 02:42:07,920
snap snapshot if snapcode snapchat snaps

02:42:06,720 --> 02:42:11,040
and

02:42:07,920 --> 02:42:12,640
the winner gets i don't know i'll leave

02:42:11,040 --> 02:42:14,080
it to the organizers of the conference

02:42:12,640 --> 02:42:27,840
to do it

02:42:14,080 --> 02:42:27,840
so yes question number eight

02:42:30,160 --> 02:42:37,279
what's the status of snap support across

02:42:33,920 --> 02:42:40,319
distros officially

02:42:37,279 --> 02:42:41,840
snap d can be installed and used on 40

02:42:40,319 --> 02:42:44,319
plus distributions

02:42:41,840 --> 02:42:45,279
including the debian family ubuntu

02:42:44,319 --> 02:42:49,600
family

02:42:45,279 --> 02:42:52,640
fedora uh red hat santos arch manjaro

02:42:49,600 --> 02:42:55,040
and a few others so

02:42:52,640 --> 02:42:57,120
if you are a user of one of the

02:42:55,040 --> 02:42:59,680
supported distributions

02:42:57,120 --> 02:43:00,319
snapd should run well your snaps should

02:42:59,680 --> 02:43:02,720
run

02:43:00,319 --> 02:43:04,319
well or just as well as they run on an

02:43:02,720 --> 02:43:08,240
ubuntu system

02:43:04,319 --> 02:43:11,040
if they don't then we may have a problem

02:43:08,240 --> 02:43:12,960
with our tooling and if we definitely

02:43:11,040 --> 02:43:15,840
like to know about it so we can help

02:43:12,960 --> 02:43:17,040
improve and make your user experience

02:43:15,840 --> 02:43:20,080
just as good as

02:43:17,040 --> 02:43:22,399
as it is on say on ubuntu um

02:43:20,080 --> 02:43:24,160
i mentioned this briefly in the office

02:43:22,399 --> 02:43:27,279
hours for instance

02:43:24,160 --> 02:43:28,800
in our engineering teams and we use we

02:43:27,279 --> 02:43:30,240
use different systems we have a couple

02:43:28,800 --> 02:43:33,279
of people with arch

02:43:30,240 --> 02:43:34,800
i myself use kubuntu so i have kd

02:43:33,279 --> 02:43:36,800
we have people who are on the latest

02:43:34,800 --> 02:43:40,240
version people who use

02:43:36,800 --> 02:43:42,399
latest lts people who use the latest

02:43:40,240 --> 02:43:44,640
interim release people who are on the

02:43:42,399 --> 02:43:45,439
previous lts we do try to vary a little

02:43:44,640 --> 02:43:48,800
bit

02:43:45,439 --> 02:43:50,640
so that we don't just test one thing and

02:43:48,800 --> 02:43:52,880
say okay if it works on ubuntu

02:43:50,640 --> 02:43:54,640
it's perfect we also try to make sure

02:43:52,880 --> 02:43:56,560
that other distributions

02:43:54,640 --> 02:43:58,720
are first-class citizens and that

02:43:56,560 --> 02:44:02,560
everyone has the same consistent

02:43:58,720 --> 02:44:04,479
experience that's not the case we would

02:44:02,560 --> 02:44:07,120
actually urge you to tell us so we can

02:44:04,479 --> 02:44:07,120
make it better

02:44:10,479 --> 02:44:13,920
number nine isn't so much a question

02:44:12,160 --> 02:44:18,080
it's more of a comment

02:44:13,920 --> 02:44:20,640
nobody uses fedora on the team

02:44:18,080 --> 02:44:22,080
okay uh it's it's a nice joke i'll allow

02:44:20,640 --> 02:44:24,000
it

02:44:22,080 --> 02:44:26,880
i hope this is not alesh being funny

02:44:24,000 --> 02:44:30,160
again because he uh ran out of his uh

02:44:26,880 --> 02:44:30,160
jokes quota yesterday

02:44:30,800 --> 02:44:34,160
any other questions

02:44:37,040 --> 02:44:47,840
any other questions

02:44:54,000 --> 02:44:57,120
here's a super interesting question

02:44:56,479 --> 02:44:58,960
number 10

02:44:57,120 --> 02:45:00,720
other distribution spaces for snaps

02:44:58,960 --> 02:45:03,279
possible i presume

02:45:00,720 --> 02:45:04,240
you are talking about okay so for people

02:45:03,279 --> 02:45:06,720
who don't understand

02:45:04,240 --> 02:45:07,359
what this question is about because

02:45:06,720 --> 02:45:09,840
snaps run

02:45:07,359 --> 02:45:10,399
in an isolated manner they need to see

02:45:09,840 --> 02:45:13,200
some

02:45:10,399 --> 02:45:14,240
some some sort of a root file system so

02:45:13,200 --> 02:45:17,920
basically the

02:45:14,240 --> 02:45:19,439
uh the file system that is presented is

02:45:17,920 --> 02:45:23,840
something called base

02:45:19,439 --> 02:45:26,319
and it is uh equivalent to the

02:45:23,840 --> 02:45:28,160
ubuntu lts release based on the

02:45:26,319 --> 02:45:29,439
versioning so if you have something like

02:45:28,160 --> 02:45:31,760
a core 18

02:45:29,439 --> 02:45:33,439
then your underlying system your base

02:45:31,760 --> 02:45:36,160
will be ubuntu 1804

02:45:33,439 --> 02:45:37,120
if it's core 20 it will be 2004 and so

02:45:36,160 --> 02:45:39,279
forth

02:45:37,120 --> 02:45:41,040
but the question is then can we perhaps

02:45:39,279 --> 02:45:42,960
have something like a fedora core

02:45:41,040 --> 02:45:44,960
or maybe center escort or something

02:45:42,960 --> 02:45:47,520
something like that technically yes

02:45:44,960 --> 02:45:49,120
has that been implemented not to the

02:45:47,520 --> 02:45:52,000
best of my knowledge

02:45:49,120 --> 02:45:54,800
but if that can drive snap adoption or

02:45:52,000 --> 02:45:57,520
make the user experiences even better

02:45:54,800 --> 02:45:58,640
i think this is worth exploring maybe

02:45:57,520 --> 02:46:01,120
even

02:45:58,640 --> 02:46:02,880
working together so whoever asked this

02:46:01,120 --> 02:46:04,560
question please reach out

02:46:02,880 --> 02:46:07,439
maybe we can explore this and make this

02:46:04,560 --> 02:46:07,439
a possibility

02:46:08,000 --> 02:46:13,040
sweet free desktop sounds good sounds

02:46:10,080 --> 02:46:14,800
interesting can you please reach out

02:46:13,040 --> 02:46:16,800
thank you very much this is i really

02:46:14,800 --> 02:46:18,080
like this and i'll i want to see how we

02:46:16,800 --> 02:46:22,399
can explore and make this

02:46:18,080 --> 02:46:23,920
maybe into a real possibility number 11

02:46:22,399 --> 02:46:26,319
what's your favorite experimental

02:46:23,920 --> 02:46:28,080
feature i have to say parallels in

02:46:26,319 --> 02:46:30,399
parallel installs hands down

02:46:28,080 --> 02:46:32,080
it is so good because typically if you

02:46:30,399 --> 02:46:33,920
want to have something that's

02:46:32,080 --> 02:46:36,479
parallel like on linux you download an

02:46:33,920 --> 02:46:37,279
archive from from a vendor if they offer

02:46:36,479 --> 02:46:40,160
their

02:46:37,279 --> 02:46:40,800
linux application as an archive you

02:46:40,160 --> 02:46:42,560
entire

02:46:40,800 --> 02:46:45,200
unzip the thing and then you just run it

02:46:42,560 --> 02:46:46,960
locally and this way you basically have

02:46:45,200 --> 02:46:48,319
a normal application it's available to

02:46:46,960 --> 02:46:51,279
the system menu you can have

02:46:48,319 --> 02:46:53,760
400 instances of it if you like and and

02:46:51,279 --> 02:46:56,720
and you can do crazy things

02:46:53,760 --> 02:46:58,000
so i recommend you test it and club a

02:46:56,720 --> 02:47:01,200
system with multiple versions of

02:46:58,000 --> 02:47:03,120
applications just see what gives

02:47:01,200 --> 02:47:04,319
twelve do you know if there are some

02:47:03,120 --> 02:47:08,160
chance of fedora

02:47:04,319 --> 02:47:11,520
silver blue supporting snaps i think

02:47:08,160 --> 02:47:13,920
um that question should be

02:47:11,520 --> 02:47:15,920
partially answered by the fedora team i

02:47:13,920 --> 02:47:18,960
don't know if we have anyone here

02:47:15,920 --> 02:47:21,520
i don't know who works on fedora

02:47:18,960 --> 02:47:22,479
and if they are here i welcome them to

02:47:21,520 --> 02:47:24,160
answer this

02:47:22,479 --> 02:47:26,000
or even if you want you can reach out by

02:47:24,160 --> 02:47:27,600
email and we'll see and

02:47:26,000 --> 02:47:30,080
and see how we can explore this

02:47:27,600 --> 02:47:30,080
potential

02:47:31,760 --> 02:47:37,200
we have three minutes uh so

02:47:35,040 --> 02:47:38,960
if there are any more questions please

02:47:37,200 --> 02:47:40,640
let's try to give

02:47:38,960 --> 02:47:43,439
let's see if i can answer that in the

02:47:40,640 --> 02:47:43,439
next three minutes

02:47:46,479 --> 02:48:05,600
no more jokes from alesha

02:48:03,680 --> 02:48:07,600
number 13 how can we make sure

02:48:05,600 --> 02:48:09,279
developers update dependencies for

02:48:07,600 --> 02:48:12,800
security

02:48:09,279 --> 02:48:13,600
okay uh first on the snapstore side if

02:48:12,800 --> 02:48:15,439
you're a

02:48:13,600 --> 02:48:17,120
publisher and you have an account in the

02:48:15,439 --> 02:48:18,960
snapstore you will get email

02:48:17,120 --> 02:48:21,840
notifications that your snaps

02:48:18,960 --> 02:48:23,200
have up out of date security packages at

02:48:21,840 --> 02:48:25,200
that point it is your

02:48:23,200 --> 02:48:26,319
due diligence as the publisher and the

02:48:25,200 --> 02:48:30,240
developer of

02:48:26,319 --> 02:48:32,800
of that snap to update it

02:48:30,240 --> 02:48:33,920
however there is always an element of

02:48:32,800 --> 02:48:36,080
human goodwill

02:48:33,920 --> 02:48:39,279
and application support ability on

02:48:36,080 --> 02:48:42,399
behalf of the developers

02:48:39,279 --> 02:48:46,160
so it's a two-way thing one

02:48:42,399 --> 02:48:48,560
we try to expose and make

02:48:46,160 --> 02:48:50,640
potential security issues visible to the

02:48:48,560 --> 02:48:54,160
publishers and developers

02:48:50,640 --> 02:48:57,040
and help them update their applications

02:48:54,160 --> 02:48:58,160
in a smooth manner but then there also

02:48:57,040 --> 02:49:00,240
has to be goodwill

02:48:58,160 --> 02:49:01,520
and desire from the publishers and

02:49:00,240 --> 02:49:03,680
maintainers and

02:49:01,520 --> 02:49:04,720
developers to keep their applications up

02:49:03,680 --> 02:49:07,439
to date

02:49:04,720 --> 02:49:10,840
so that will never be a complete

02:49:07,439 --> 02:49:13,200
solution without cooperation on both

02:49:10,840 --> 02:49:17,520
sides

02:49:13,200 --> 02:49:19,439
okay let's see what else is here um

02:49:17,520 --> 02:49:21,600
so there's one more comment on question

02:49:19,439 --> 02:49:23,600
number 12 whereby it's not uh classic

02:49:21,600 --> 02:49:23,920
snipes use slash snap which is forbidden

02:49:23,600 --> 02:49:27,200
by

02:49:23,920 --> 02:49:30,080
rpm os 3 regular confined snaps

02:49:27,200 --> 02:49:31,600
work fine i understand classic

02:49:30,080 --> 02:49:35,600
confinement is

02:49:31,600 --> 02:49:37,359
never really a one for all solution

02:49:35,600 --> 02:49:38,640
but since this is a very interesting

02:49:37,359 --> 02:49:42,000
topic

02:49:38,640 --> 02:49:44,080
please reach out because uh there might

02:49:42,000 --> 02:49:46,160
be something in the works that

02:49:44,080 --> 02:49:48,640
we could think of and figure out how to

02:49:46,160 --> 02:49:48,640
fix this

02:49:49,040 --> 02:49:54,240
and i think i'm out of time and i need

02:49:51,279 --> 02:49:56,720
to hand over to the next presenter

02:49:54,240 --> 02:49:57,840
so please reach out to my email for any

02:49:56,720 --> 02:49:59,439
other questions

02:49:57,840 --> 02:50:01,279
uh i enjoyed the session today i would

02:49:59,439 --> 02:50:02,720
have loved to hear you because i enjoy

02:50:01,279 --> 02:50:04,960
human interaction

02:50:02,720 --> 02:50:07,439
uh if you have any other comments or

02:50:04,960 --> 02:50:09,439
jokes please reach out

02:50:07,439 --> 02:50:11,359
if you like this session give a thumbs

02:50:09,439 --> 02:50:14,240
up as well that works

02:50:11,359 --> 02:50:15,600
hope to see you around and if uh if you

02:50:14,240 --> 02:50:17,279
wanna you need any help with snap

02:50:15,600 --> 02:50:18,880
development

02:50:17,279 --> 02:50:20,960
just knock on the door and we'll see

02:50:18,880 --> 02:50:24,160
what we can do together

02:50:20,960 --> 02:50:24,160
thank you very much for your time

02:50:25,760 --> 02:50:28,960
thank you very much igor for your

02:50:27,040 --> 02:50:30,720
presentation

02:50:28,960 --> 02:50:32,160
it was really really good and also

02:50:30,720 --> 02:50:33,920
thanks for taking time to reply to all

02:50:32,160 --> 02:50:37,040
the questions that was very

02:50:33,920 --> 02:50:42,080
an interesting q a so

02:50:37,040 --> 02:50:44,319
next we will have three writing tools

02:50:42,080 --> 02:50:44,319
so

02:50:45,200 --> 02:50:51,439
when we set this up for the next speaker

02:50:49,279 --> 02:50:54,000
uh also thanks everyone for posting

02:50:51,439 --> 02:50:57,279
questions in the shared notes

02:50:54,000 --> 02:50:57,920
so next we will have henninground and a

02:50:57,279 --> 02:51:00,399
toycon

02:50:57,920 --> 02:51:05,840
qt design studio on closing the gap

02:51:00,399 --> 02:51:05,840
between designers and developers

02:51:10,880 --> 02:51:19,840
give us one second to set this up and we

02:51:14,080 --> 02:51:19,840
can start with the lighting talks

02:57:30,240 --> 02:57:34,319
hello my name is henning krundel and i'm

02:57:32,720 --> 02:57:36,720
a senior software engineer at the cute

02:57:34,319 --> 02:57:39,200
company working on cute design studio

02:57:36,720 --> 02:57:41,920
our tool for creating next generation ui

02:57:39,200 --> 02:57:43,920
and ux design

02:57:41,920 --> 02:57:46,080
today i want to tell you about cute and

02:57:43,920 --> 02:57:48,080
cute design studio and how they improve

02:57:46,080 --> 02:57:50,240
the application development process for

02:57:48,080 --> 02:57:52,560
designers and developers

02:57:50,240 --> 02:57:54,720
followed up by a short demo and a q a

02:57:52,560 --> 02:57:56,880
session

02:57:54,720 --> 02:57:57,920
let's start with a brief introduction to

02:57:56,880 --> 02:58:00,240
qt

02:57:57,920 --> 02:58:02,160
qt is an open source cross-platform

02:58:00,240 --> 02:58:05,600
application and ui framework

02:58:02,160 --> 02:58:07,600
based on c plus with tools designed to

02:58:05,600 --> 02:58:09,120
streamline the creation of applications

02:58:07,600 --> 02:58:11,200
and user interfaces

02:58:09,120 --> 02:58:12,880
for desktop embedded and mobile

02:58:11,200 --> 02:58:14,560
platforms

02:58:12,880 --> 02:58:16,240
the framework consists of various

02:58:14,560 --> 02:58:17,359
modules belonging either to qt

02:58:16,240 --> 02:58:20,160
essentials

02:58:17,359 --> 02:58:21,040
which define the foundation of cute or

02:58:20,160 --> 02:58:22,640
cute add-ons

02:58:21,040 --> 02:58:25,040
which bring additional value for

02:58:22,640 --> 02:58:26,800
specific purposes

02:58:25,040 --> 02:58:28,640
the two important modules for ui

02:58:26,800 --> 02:58:30,800
development are cute widgets

02:58:28,640 --> 02:58:32,720
which provides a library of ui elements

02:58:30,800 --> 02:58:34,800
that allow to create classic desktop

02:58:32,720 --> 02:58:36,960
style user interfaces

02:58:34,800 --> 02:58:40,160
and qt quick which is the standard

02:58:36,960 --> 02:58:42,880
library for writing qml applications

02:58:40,160 --> 02:58:43,359
while the qt qml module provides the qml

02:58:42,880 --> 02:58:46,000
engine

02:58:43,359 --> 02:58:46,960
and language infrastructure the qt quick

02:58:46,000 --> 02:58:50,319
module provides

02:58:46,960 --> 02:58:52,800
both a qml api which supplies qml types

02:58:50,319 --> 02:58:55,040
necessary for creating user interfaces

02:58:52,800 --> 02:58:56,160
and the c plus plus api for extending

02:58:55,040 --> 02:59:00,319
qml applications

02:58:56,160 --> 02:59:03,120
with c plus code you can use qt's ide

02:59:00,319 --> 02:59:05,200
qt creator to write c code and its

02:59:03,120 --> 02:59:06,319
design toolkit design studio to create

02:59:05,200 --> 02:59:09,600
uis based on

02:59:06,319 --> 02:59:11,200
qml and qt quick people who developed

02:59:09,600 --> 02:59:13,200
kde software before

02:59:11,200 --> 02:59:15,359
are probably already familiar with cute

02:59:13,200 --> 02:59:18,479
framework

02:59:15,359 --> 02:59:20,000
so what's cute design studio cute design

02:59:18,479 --> 02:59:22,000
studio is a full featured design

02:59:20,000 --> 02:59:25,040
software for creating user interfaces

02:59:22,000 --> 02:59:27,120
and user experiences using qml

02:59:25,040 --> 02:59:28,560
aimed at designers and artists who are

02:59:27,120 --> 02:59:32,479
working with both

02:59:28,560 --> 02:59:34,880
2d and 3d content scaling from low-end

02:59:32,479 --> 02:59:37,760
hardware devices such as mcu

02:59:34,880 --> 02:59:38,720
to large-scale 3d desktop environments

02:59:37,760 --> 02:59:41,040
and of course

02:59:38,720 --> 02:59:42,000
with qt's cross-platform capabilities to

02:59:41,040 --> 02:59:44,479
deploy your design

02:59:42,000 --> 02:59:46,560
to any operating system mobile or

02:59:44,479 --> 02:59:48,399
embedded device

02:59:46,560 --> 02:59:51,120
cute design studio is a cute creator

02:59:48,399 --> 02:59:52,240
adjusted and optimized for designing qml

02:59:51,120 --> 02:59:54,479
and qt quick

02:59:52,240 --> 02:59:57,200
and is available as a commercial and

02:59:54,479 --> 02:59:58,800
free community version

02:59:57,200 --> 03:00:01,920
so what can you do with cute design

02:59:58,800 --> 03:00:03,920
studio you can create screen designs and

03:00:01,920 --> 03:00:04,240
layouts using a what you see is what you

03:00:03,920 --> 03:00:06,720
get

03:00:04,240 --> 03:00:10,160
editor with a selection of powerful

03:00:06,720 --> 03:00:12,479
native qt quick components and libraries

03:00:10,160 --> 03:00:14,080
it also allows you to create animations

03:00:12,479 --> 03:00:16,960
using our timeline

03:00:14,080 --> 03:00:19,040
define ui logic with states and bindings

03:00:16,960 --> 03:00:21,760
and create custom controls only using

03:00:19,040 --> 03:00:23,439
the ui of q design studio

03:00:21,760 --> 03:00:26,319
the commercial version of cute design

03:00:23,439 --> 03:00:28,960
studio comes with so called bridges

03:00:26,319 --> 03:00:31,200
those can import 2d based designs from

03:00:28,960 --> 03:00:34,399
powerful ui design tools like figma

03:00:31,200 --> 03:00:36,479
sketch and photoshop this makes it easy

03:00:34,399 --> 03:00:38,560
to import your assets

03:00:36,479 --> 03:00:40,080
it is also possible to import assets

03:00:38,560 --> 03:00:42,800
from 3d tools like

03:00:40,080 --> 03:00:44,720
maya blender or even 3d max into q

03:00:42,800 --> 03:00:47,359
design studio

03:00:44,720 --> 03:00:49,120
those designs and assets will result in

03:00:47,359 --> 03:00:54,000
a working qml application

03:00:49,120 --> 03:00:55,680
that you can deploy run and even profile

03:00:54,000 --> 03:00:57,840
these are only a few of the features

03:00:55,680 --> 03:00:59,359
available with gear design studio

03:00:57,840 --> 03:01:01,359
in the following demo i'll try to

03:00:59,359 --> 03:01:03,200
showcase some of them

03:01:01,359 --> 03:01:04,560
so let's go ahead and open q design

03:01:03,200 --> 03:01:06,560
studio

03:01:04,560 --> 03:01:10,399
we start by creating a new qt quick

03:01:06,560 --> 03:01:12,640
application via our project wizard

03:01:10,399 --> 03:01:14,800
now that our project was created we can

03:01:12,640 --> 03:01:18,160
see the visual 2d editor in the center

03:01:14,800 --> 03:01:20,080
showing our default application

03:01:18,160 --> 03:01:21,920
on the right we can see the property

03:01:20,080 --> 03:01:25,200
editor which shows the properties of the

03:01:21,920 --> 03:01:27,279
currently selected item

03:01:25,200 --> 03:01:29,840
let's select the text item and make it a

03:01:27,279 --> 03:01:29,840
bit bigger

03:01:30,399 --> 03:01:34,800
for a proper ui we need some buttons so

03:01:32,880 --> 03:01:37,840
let's drag them in from the item library

03:01:34,800 --> 03:01:37,840
located on the left

03:01:41,439 --> 03:01:44,800
let's put them in a row layout so they

03:01:43,439 --> 03:01:47,200
align nicely

03:01:44,800 --> 03:02:02,080
anchor the layout horizontally and

03:01:47,200 --> 03:02:04,160
increase the spacing between the buttons

03:02:02,080 --> 03:02:06,319
to add some logic to the buttons let's

03:02:04,160 --> 03:02:08,640
make them checkable and exclusive

03:02:06,319 --> 03:02:10,960
so only one button can be checked at a

03:02:08,640 --> 03:02:10,960
time

03:02:11,279 --> 03:02:14,840
we can have a look at the current state

03:02:12,880 --> 03:02:17,840
of our application by opening the live

03:02:14,840 --> 03:02:17,840
preview

03:02:18,720 --> 03:02:22,479
while the live preview is open changes

03:02:21,120 --> 03:02:31,040
made in the application will be

03:02:22,479 --> 03:02:32,880
reflected directly

03:02:31,040 --> 03:02:34,640
now let's create some additional states

03:02:32,880 --> 03:02:35,920
by the states editor located at the

03:02:34,640 --> 03:02:38,000
bottom

03:02:35,920 --> 03:02:40,240
and connect them to the button's check

03:02:38,000 --> 03:02:41,920
property

03:02:40,240 --> 03:02:43,600
by default you will always have a base

03:02:41,920 --> 03:02:44,640
state containing all the items in the

03:02:43,600 --> 03:02:46,479
scene

03:02:44,640 --> 03:02:58,080
let's modify the additional states so

03:02:46,479 --> 03:03:00,080
they will differ from our base state

03:02:58,080 --> 03:03:02,240
by using the binding editor we can bind

03:03:00,080 --> 03:03:13,840
the check property of our button

03:03:02,240 --> 03:03:13,840
to the when condition of a state

03:03:18,000 --> 03:03:22,960
now the state changes according to the

03:03:19,840 --> 03:03:22,960
currently checked button

03:03:25,120 --> 03:03:30,640
selecting the text editor tab we can see

03:03:27,520 --> 03:03:32,560
all the qml code that was written for us

03:03:30,640 --> 03:03:34,000
there is the root rectangle containing a

03:03:32,560 --> 03:03:36,640
text item

03:03:34,000 --> 03:03:41,840
the row layout containing the buttons

03:03:36,640 --> 03:03:41,840
and our states we've created

03:03:42,399 --> 03:03:47,279
by adding transitions via the transition

03:03:44,640 --> 03:03:49,040
editor also located at the bottom

03:03:47,279 --> 03:03:50,560
we can get rid of the sudden color

03:03:49,040 --> 03:03:52,960
changes when switching between the

03:03:50,560 --> 03:03:52,960
states

03:03:53,120 --> 03:03:56,640
this is already way better

03:04:02,000 --> 03:04:05,840
we can also change the transition

03:04:03,760 --> 03:04:09,840
behavior by adjusting the easing curve

03:04:05,840 --> 03:04:09,840
using our easing curve editor

03:04:30,000 --> 03:04:37,840
next up we add a slider and a rectangle

03:04:41,120 --> 03:04:44,319
let's add a second rectangle as a child

03:04:43,120 --> 03:04:51,840
of the first one

03:04:44,319 --> 03:04:51,840
this will be used as an indicator

03:04:53,920 --> 03:04:58,000
we want to change the scale and rotation

03:04:56,319 --> 03:05:05,840
of the rectangle according to the

03:04:58,000 --> 03:05:05,840
slider's value

03:05:12,319 --> 03:05:16,880
binding the slider value to the scale

03:05:14,399 --> 03:05:19,359
property works perfectly

03:05:16,880 --> 03:05:21,120
but to cover the full rotation from 0 to

03:05:19,359 --> 03:05:22,880
360 degrees

03:05:21,120 --> 03:05:33,840
we need a range mapper as the slider

03:05:22,880 --> 03:05:33,840
value ranges from 0 to 1.

03:05:34,800 --> 03:05:38,720
in order to make this work we need to

03:05:36,640 --> 03:05:39,920
bind the slider value to the input of a

03:05:38,720 --> 03:05:41,680
range mapper

03:05:39,920 --> 03:05:43,120
change the range mapper's input and

03:05:41,680 --> 03:05:44,880
output range

03:05:43,120 --> 03:06:00,800
and then bind the range mapper's output

03:05:44,880 --> 03:06:02,560
to the rectangle's rotation

03:06:00,800 --> 03:06:05,359
let's have a final look on our demo

03:06:02,560 --> 03:06:05,359
we've created

03:06:09,200 --> 03:06:12,880
this short demo is only scratching the

03:06:10,960 --> 03:06:15,840
surface of q design series full

03:06:12,880 --> 03:06:15,840
potential

03:06:16,800 --> 03:06:20,560
more sophisticated examples and

03:06:18,479 --> 03:06:23,120
tutorials can be found on cue design

03:06:20,560 --> 03:06:24,560
studio's welcome page

03:06:23,120 --> 03:06:26,560
to give you a glimpse of what is

03:06:24,560 --> 03:06:28,240
possible with cue design studio

03:06:26,560 --> 03:06:43,840
i'll quickly show you our digital

03:06:28,240 --> 03:06:43,840
cluster demo

03:06:49,520 --> 03:06:52,880
here you can get an impression of a lot

03:06:51,279 --> 03:06:57,040
of the features like

03:06:52,880 --> 03:07:00,640
2d 3d animations transitions

03:06:57,040 --> 03:07:10,960
states bindings and imported assets in a

03:07:00,640 --> 03:07:12,960
proper scenario

03:07:10,960 --> 03:07:14,720
with this demo i want to conclude my

03:07:12,960 --> 03:07:17,120
talk

03:07:14,720 --> 03:07:17,120
thank you

03:07:22,840 --> 03:07:25,840
hello

03:08:07,760 --> 03:08:14,800
hi everyone sorry for the little hiccup

03:08:11,359 --> 03:08:20,319
of technical difficulties um

03:08:14,800 --> 03:08:23,600
i know we are

03:08:20,319 --> 03:08:25,520
we are into carl's time and

03:08:23,600 --> 03:08:29,439
both carl and henning you have the

03:08:25,520 --> 03:08:32,960
ability to update your audio

03:08:29,439 --> 03:08:37,439
um if there's any questions from

03:08:32,960 --> 03:08:41,600
the previous talk this hennig's talk

03:08:37,439 --> 03:08:41,600
please add them in the shared notes

03:08:47,200 --> 03:09:02,720
i hope everyone was able to view the

03:08:49,040 --> 03:09:06,000
video okay

03:09:02,720 --> 03:09:08,960
and if there are no questions

03:09:06,000 --> 03:09:10,160
i'd love to introduce carl schwann from

03:09:08,960 --> 03:09:12,920
kde

03:09:10,160 --> 03:09:14,840
talking about behind kde documentation

03:09:12,920 --> 03:09:17,840
documentation

03:09:14,840 --> 03:09:17,840
tooling

03:09:31,040 --> 03:09:45,840
carl you are muted and we cannot see you

03:09:34,399 --> 03:09:45,840
just a heads up

03:09:46,160 --> 03:09:49,279
yes does it work though

03:09:49,760 --> 03:09:55,680
yes okay thank you

03:09:53,359 --> 03:09:57,680
so hello everyone uh today i will

03:09:55,680 --> 03:10:00,000
present you a bit of

03:09:57,680 --> 03:10:01,359
an overview of your kda documentation

03:10:00,000 --> 03:10:04,560
tooling

03:10:01,359 --> 03:10:04,560
for technical documentation

03:10:05,200 --> 03:10:10,800
but first who i am i'm a cadet developer

03:10:08,160 --> 03:10:13,200
since 2018

03:10:10,800 --> 03:10:14,319
i'm mostly focused on developing

03:10:13,200 --> 03:10:17,760
websites

03:10:14,319 --> 03:10:19,920
uh for example our project

03:10:17,760 --> 03:10:20,960
dot websites or the new one from the

03:10:19,920 --> 03:10:24,160
visa

03:10:20,960 --> 03:10:24,840
website to twitter but i'm also very

03:10:24,160 --> 03:10:27,840
involved

03:10:24,840 --> 03:10:32,319
into my mobile application

03:10:27,840 --> 03:10:36,239
for example youtube mathis clients

03:10:32,319 --> 03:10:40,319
uh mastermind client contrast

03:10:36,239 --> 03:10:43,840
application cocoon imager and

03:10:40,319 --> 03:10:43,840
prolific application

03:10:44,800 --> 03:10:48,560
but first why should we care about

03:10:47,120 --> 03:10:51,760
documentation

03:10:48,560 --> 03:10:55,040
is the popular memes about what

03:10:51,760 --> 03:10:59,200
causes augmentation enough but

03:10:55,040 --> 03:10:59,200
i don't really agree with it because

03:10:59,840 --> 03:11:05,359
it's often not enough and for

03:11:02,960 --> 03:11:09,279
newcomers it's having a good

03:11:05,359 --> 03:11:12,319
documentation is sweet and

03:11:09,279 --> 03:11:14,319
making it easy for her

03:11:12,319 --> 03:11:16,800
to commence get started increase the

03:11:14,319 --> 03:11:18,800
adoption of the library

03:11:16,800 --> 03:11:20,560
but it's also very useful for

03:11:18,800 --> 03:11:24,239
experimenting developers

03:11:20,560 --> 03:11:27,760
because even uh if you work a lot with

03:11:24,239 --> 03:11:32,080
libraries without it necessary no

03:11:27,760 --> 03:11:32,080
everything uh hold it

03:11:34,319 --> 03:11:38,640
so it's documentation is an important

03:11:36,880 --> 03:11:40,880
part of uh

03:11:38,640 --> 03:11:42,479
how to build an app ecosystem and i

03:11:40,880 --> 03:11:43,600
think it's something that we are really

03:11:42,479 --> 03:11:51,520
tested

03:11:43,600 --> 03:11:54,239
at it in last

03:11:51,520 --> 03:11:55,359
the the first tool that we are using in

03:11:54,239 --> 03:11:58,399
kde kde

03:11:55,359 --> 03:12:02,840
is uh copy dots it's

03:11:58,399 --> 03:12:04,080
uh tooling what support uh what progress

03:12:02,840 --> 03:12:08,880
uh

03:12:04,080 --> 03:12:13,359
it's a basically a a p generator

03:12:08,880 --> 03:12:16,880
as a meta rpg editor because it's a

03:12:13,359 --> 03:12:18,319
pre on top of oxygen and another part of

03:12:16,880 --> 03:12:21,520
the kd frameworks

03:12:18,319 --> 03:12:25,120
so it has a stable api and

03:12:21,520 --> 03:12:28,720
often a release of here this sketching

03:12:25,120 --> 03:12:30,960
is it is getting released very often

03:12:28,720 --> 03:12:32,080
but my quality is a sort of hyper on

03:12:30,960 --> 03:12:34,239
that oxygen

03:12:32,080 --> 03:12:35,920
and the reason why we can't use the

03:12:34,239 --> 03:12:40,239
oxygen

03:12:35,920 --> 03:12:44,560
only is because of two major reasons

03:12:40,239 --> 03:12:47,279
the first one is that oxygen is a

03:12:44,560 --> 03:12:48,560
great tool if you have one project and

03:12:47,279 --> 03:12:50,479
you want

03:12:48,560 --> 03:12:52,640
to generate the decoration for it

03:12:50,479 --> 03:12:54,239
because you can just switch oxygen on it

03:12:52,640 --> 03:12:55,920
and create the container uh create the

03:12:54,239 --> 03:13:01,439
configuration file and

03:12:55,920 --> 03:13:03,439
consider uh doxie another on the project

03:13:01,439 --> 03:13:04,960
but it's getting a bit more tricky when

03:13:03,439 --> 03:13:08,000
you have

03:13:04,960 --> 03:13:11,680
one width of celebrities and

03:13:08,000 --> 03:13:14,319
the liquids depend on each other's and

03:13:11,680 --> 03:13:16,720
you want to have a quite leaking linking

03:13:14,319 --> 03:13:18,479
between the

03:13:16,720 --> 03:13:19,840
apis or what the dependencies are

03:13:18,479 --> 03:13:23,359
clearly represented

03:13:19,840 --> 03:13:27,359
on your computations and

03:13:23,359 --> 03:13:30,960
oxygen basically uh capidocs basically

03:13:27,359 --> 03:13:33,900
there was always a manual of work

03:13:30,960 --> 03:13:35,520
for you to generate

03:13:33,900 --> 03:13:38,800
[Music]

03:13:35,520 --> 03:13:40,239
all the linking between the libraries

03:13:38,800 --> 03:13:43,680
together

03:13:40,239 --> 03:13:46,319
and the second reasons why we want to

03:13:43,680 --> 03:13:48,080
to have a wrap around the oxygen is

03:13:46,319 --> 03:13:52,319
because by default toxin

03:13:48,080 --> 03:13:56,479
doesn't really look beautiful

03:13:52,319 --> 03:13:59,120
and so there was a need to create

03:13:56,479 --> 03:13:59,120
a sort of

03:13:59,920 --> 03:14:02,160
more

03:14:03,279 --> 03:14:10,960
modern interface for the api

03:14:07,200 --> 03:14:11,600
documentation um it's also very easy to

03:14:10,960 --> 03:14:15,760
use

03:14:11,600 --> 03:14:18,160
it's a fight and package

03:14:15,760 --> 03:14:18,160
and

03:14:18,800 --> 03:14:26,319
but isn't in popeye but you can just

03:14:22,399 --> 03:14:29,359
start it transfer point you use it

03:14:26,319 --> 03:14:32,399
and then it's just a command you give it

03:14:29,359 --> 03:14:34,800
a folder containing all your

03:14:32,399 --> 03:14:36,800
projects inside it and it regenerates

03:14:34,800 --> 03:14:41,040
documentation for it

03:14:36,800 --> 03:14:44,399
and to also quiet

03:14:41,040 --> 03:14:47,680
uh stuff for it and you are

03:14:44,399 --> 03:14:50,960
also uh adding a support for q

03:14:47,680 --> 03:14:55,359
dot so it's a

03:14:50,960 --> 03:14:59,040
the q is a oxygenative uh

03:14:55,359 --> 03:15:02,560
created for cute but uh

03:14:59,040 --> 03:15:06,160
oxygen is still the main to use

03:15:02,560 --> 03:15:06,640
inside here because it supports cpu

03:15:06,160 --> 03:15:11,920
spruce

03:15:06,640 --> 03:15:13,740
php and oval image and these are

03:15:11,920 --> 03:15:16,080
cappy docks looks like

03:15:13,740 --> 03:15:19,359
[Music]

03:15:16,080 --> 03:15:23,040
with the rp documentation on the left

03:15:19,359 --> 03:15:26,560
is generated but also does a lot of

03:15:23,040 --> 03:15:30,239
listings of all the libraries and

03:15:26,560 --> 03:15:30,239
some sort of home pages

03:15:31,439 --> 03:15:36,560
currently can be really easily reused by

03:15:35,040 --> 03:15:40,000
other projects

03:15:36,560 --> 03:15:41,840
because there's some 3d branding on it

03:15:40,000 --> 03:15:43,439
but it is something that i'm working on

03:15:41,840 --> 03:15:48,000
it to

03:15:43,439 --> 03:15:51,600
make it possible to have skins

03:15:48,000 --> 03:15:53,840
so that you could have a kd skins with

03:15:51,600 --> 03:15:55,520
skinny branding but those more neutral

03:15:53,840 --> 03:15:57,200
skins

03:15:55,520 --> 03:15:59,680
and i'm mostly working on it for

03:15:57,200 --> 03:16:03,120
questions so that because questions

03:15:59,680 --> 03:16:07,439
uh particularly what progress

03:16:03,120 --> 03:16:12,000
your chat um it's not part of kelly

03:16:07,439 --> 03:16:16,000
but i still think it's really useful

03:16:12,000 --> 03:16:19,200
to have to appeal documentation for it

03:16:16,000 --> 03:16:20,800
on the web uh

03:16:19,200 --> 03:16:22,960
the second tool that i want to present

03:16:20,800 --> 03:16:26,560
is devsecurely

03:16:22,960 --> 03:16:29,920
toxic qma was required because

03:16:26,560 --> 03:16:29,920
toxician is a good

03:16:42,840 --> 03:16:48,640
and a lot of plasma is written in

03:16:46,239 --> 03:16:49,520
qml and some with all the plasma mobile

03:16:48,640 --> 03:16:52,080
applications

03:16:49,520 --> 03:16:53,200
with kirigami so we really needed uh

03:16:52,080 --> 03:16:55,840
something that

03:16:53,200 --> 03:16:56,840
works with creamer and it was written by

03:16:55,840 --> 03:16:59,760
origato in

03:16:56,840 --> 03:17:02,800
2012 but

03:16:59,760 --> 03:17:02,800
last year he was

03:17:03,920 --> 03:17:07,840
moved to a capitol organization

03:17:08,080 --> 03:17:15,920
and while happy dogs

03:17:12,080 --> 03:17:17,040
when the cream doxy or qml is available

03:17:15,920 --> 03:17:20,160
we'll use it

03:17:17,040 --> 03:17:22,720
but it can be either used independently

03:17:20,160 --> 03:17:24,960
of clappy dogs so

03:17:22,720 --> 03:17:28,080
that can be a use for every human

03:17:24,960 --> 03:17:30,800
project i plan to use it

03:17:28,080 --> 03:17:32,399
um the last thing is uh i think what

03:17:30,800 --> 03:17:35,279
i've worked on

03:17:32,399 --> 03:17:37,359
last year is a new developer platform

03:17:35,279 --> 03:17:39,760
for kde

03:17:37,359 --> 03:17:41,120
it's something centralized source for

03:17:39,760 --> 03:17:44,960
technical documentation

03:17:41,120 --> 03:17:48,239
because previously in cadi we had

03:17:44,960 --> 03:17:50,160
multiple places where we

03:17:48,239 --> 03:17:52,560
put our technical documentation you've

03:17:50,160 --> 03:17:56,000
got a framework cookbook

03:17:52,560 --> 03:17:59,120
the technology key the community wiki

03:17:56,000 --> 03:18:02,800
um so you know enterprise guidelines

03:17:59,120 --> 03:18:07,359
websites the plus mobile websites

03:18:02,800 --> 03:18:10,399
and the goal was to create some sort of

03:18:07,359 --> 03:18:14,080
surprising source for um moving all

03:18:10,399 --> 03:18:16,640
these uh on one place

03:18:14,080 --> 03:18:17,600
for the moment i really removed two of

03:18:16,640 --> 03:18:20,640
the old players

03:18:17,600 --> 03:18:24,720
and i'm working on

03:18:20,640 --> 03:18:24,720
moving all the urban stuff to

03:18:26,560 --> 03:18:34,640
the developer modules of websites

03:18:29,840 --> 03:18:37,680
it's based on doxy and

03:18:34,640 --> 03:18:42,479
you go by the teams for the competition

03:18:37,680 --> 03:18:46,080
i'm a huge fan of hugo and

03:18:42,479 --> 03:18:48,000
but it's there was a lot of unification

03:18:46,080 --> 03:18:51,359
compared to the ipsy project so for

03:18:48,000 --> 03:18:54,080
example support

03:18:51,359 --> 03:18:55,680
website branding so what you have a

03:18:54,080 --> 03:18:59,040
unified

03:18:55,680 --> 03:19:02,720
style for all of our websites and

03:18:59,040 --> 03:19:04,880
we also added tons of small helpers for

03:19:02,720 --> 03:19:08,560
example for linking

03:19:04,880 --> 03:19:11,920
to class and methods methods from

03:19:08,560 --> 03:19:11,920
the appeal of mutations

03:19:17,200 --> 03:19:20,640
uh on something that i'm still working

03:19:19,760 --> 03:19:23,279
on it's

03:19:20,640 --> 03:19:24,560
adding you know it has indianization

03:19:23,279 --> 03:19:28,479
support

03:19:24,560 --> 03:19:31,040
and we're already having like a

03:19:28,479 --> 03:19:31,600
lot of tooling for transiting websites

03:19:31,040 --> 03:19:34,319
so what

03:19:31,600 --> 03:19:35,760
all our websites are available on

03:19:34,319 --> 03:19:38,080
wikipedia languages

03:19:35,760 --> 03:19:40,319
and it is something that i will probably

03:19:38,080 --> 03:19:43,520
work in the next week's uh

03:19:40,319 --> 03:19:47,120
next few weeks to add the support to

03:19:43,520 --> 03:19:47,120
developer productivity or to

03:19:55,440 --> 03:19:58,489
[Music]

03:19:58,840 --> 03:20:03,279
so

03:20:00,319 --> 03:20:04,239
and i don't think it can really be used

03:20:03,279 --> 03:20:06,399
by your operator

03:20:04,239 --> 03:20:08,080
oh you can just see but it's not

03:20:06,399 --> 03:20:10,560
something that can be

03:20:08,080 --> 03:20:12,560
easier overall okay it's just small

03:20:10,560 --> 03:20:15,680
helpers can be copied

03:20:12,560 --> 03:20:18,720
but otherwise otherwise tons of uh

03:20:15,680 --> 03:20:21,040
project like these like sphinx can be as

03:20:18,720 --> 03:20:21,040
used

03:20:22,080 --> 03:20:29,840
any questions

03:20:44,479 --> 03:20:48,160
okay yeah is it recommendation you get

03:20:46,399 --> 03:20:49,760
it at the same pace as you caught

03:20:48,160 --> 03:20:52,160
against your ease as soon as you

03:20:49,760 --> 03:20:52,160
update

03:20:52,880 --> 03:20:57,920
um so if for uh

03:20:56,239 --> 03:20:59,600
is the documentation plated at the same

03:20:57,920 --> 03:21:00,880
pace or the code gets new released and

03:20:59,600 --> 03:21:03,920
significant updates

03:21:00,880 --> 03:21:06,000
it's command to see many uh considerable

03:21:03,920 --> 03:21:08,080
be projected in newer and newer version

03:21:06,000 --> 03:21:11,600
but the documentation is often

03:21:08,080 --> 03:21:12,880
forgotten so to speak um so for the

03:21:11,600 --> 03:21:16,080
apple documentations

03:21:12,880 --> 03:21:18,479
it's part of your quite lines but

03:21:16,080 --> 03:21:20,319
when you have the new methods or or

03:21:18,479 --> 03:21:25,200
classes we need to write recommendation

03:21:20,319 --> 03:21:27,840
for it

03:21:25,200 --> 03:21:29,520
but for the more high level the

03:21:27,840 --> 03:21:32,560
computation

03:21:29,520 --> 03:21:33,840
this is this isn't real great line of

03:21:32,560 --> 03:21:37,120
requirements

03:21:33,840 --> 03:21:40,640
so um

03:21:37,120 --> 03:21:44,560
it's often getting updated updated

03:21:40,640 --> 03:21:52,399
but recently we are getting better

03:21:44,560 --> 03:21:53,920
at keeping stuff updated

03:21:52,399 --> 03:21:57,200
but at least for the epic communication

03:21:53,920 --> 03:21:57,200
it's always up to that

03:22:01,279 --> 03:22:05,520
uh does the good documentation

03:22:02,560 --> 03:22:07,520
contribute to language uses by rpd

03:22:05,520 --> 03:22:08,640
someone want to contribute to kde apps

03:22:07,520 --> 03:22:12,080
it seems both

03:22:08,640 --> 03:22:12,080
apps are simple spruce

03:22:13,120 --> 03:22:16,160
yeah although currently the

03:22:14,720 --> 03:22:19,279
documentation is only for

03:22:16,160 --> 03:22:21,359
cpus plus projects

03:22:19,279 --> 03:22:22,960
i think we only have one or two

03:22:21,359 --> 03:22:27,040
applications that has written

03:22:22,960 --> 03:22:27,040
fighting um

03:22:29,520 --> 03:22:35,279
probably although we don't really add

03:22:33,439 --> 03:22:36,560
another small tutorial of two-piece

03:22:35,279 --> 03:22:37,120
application if you find them it's

03:22:36,560 --> 03:22:39,600
probably

03:22:37,120 --> 03:22:41,359
something that we should create at some

03:22:39,600 --> 03:22:45,439
point

03:22:41,359 --> 03:22:46,880
but uh but we also don't have a

03:22:45,439 --> 03:22:49,920
balance for all the or libraries

03:22:46,880 --> 03:22:52,000
liberation fights and so

03:22:49,920 --> 03:22:54,160
exhibitors were two key situations that

03:22:52,000 --> 03:22:57,279
we need to improve our

03:22:54,160 --> 03:22:58,160
language providing and the documentation

03:22:57,279 --> 03:23:03,840
rate

03:22:58,160 --> 03:23:03,840
at some point

03:23:04,080 --> 03:23:08,640
uh who did the competition mean for user

03:23:06,479 --> 03:23:11,520
b map you system to game

03:23:08,640 --> 03:23:11,920
sorry to interrupt we actually are out

03:23:11,520 --> 03:23:14,479
of

03:23:11,920 --> 03:23:16,640
time we we are at the 15 minute mark

03:23:14,479 --> 03:23:18,720
from when you started and i'd

03:23:16,640 --> 03:23:20,880
love to invite you to finish answering

03:23:18,720 --> 03:23:24,000
the questions in the chat if you can

03:23:20,880 --> 03:23:26,080
yeah i can do that thank you

03:23:24,000 --> 03:23:27,600
thank you so much for for being here

03:23:26,080 --> 03:23:30,720
with us and

03:23:27,600 --> 03:23:32,960
for presenting yeah thanks for

03:23:30,720 --> 03:23:32,960
you

03:23:34,640 --> 03:23:45,840
okay everyone valentin

03:23:38,399 --> 03:23:45,840
from um who's talking about free desktop

03:23:57,120 --> 03:24:03,439
vanata navida i work at cut think and um

03:24:00,800 --> 03:24:04,800
i also i'm a contributor for fedextap

03:24:03,439 --> 03:24:07,279
sdk

03:24:04,800 --> 03:24:08,640
and recently i think we have been

03:24:07,279 --> 03:24:11,920
looking at the porting

03:24:08,640 --> 03:24:13,520
fidesta sdk to risk five and here is a

03:24:11,920 --> 03:24:17,840
small report of

03:24:13,520 --> 03:24:17,840
where we are where we are at

03:24:18,960 --> 03:24:22,640
so first background what is free desktop

03:24:21,680 --> 03:24:25,359
sdk

03:24:22,640 --> 03:24:26,479
this is the main flashback runtime so

03:24:25,359 --> 03:24:29,520
what do we

03:24:26,479 --> 03:24:33,040
what are we talking about uh about

03:24:29,520 --> 03:24:36,399
runtime is sorry is that

03:24:33,040 --> 03:24:38,840
um flat pack is a is like a

03:24:36,399 --> 03:24:40,479
container system for desktop

03:24:38,840 --> 03:24:42,560
applications and

03:24:40,479 --> 03:24:44,720
uh for every container you need to have

03:24:42,560 --> 03:24:47,760
a better system where you have the

03:24:44,720 --> 03:24:49,040
shared libraries that are needed for for

03:24:47,760 --> 03:24:52,399
the application

03:24:49,040 --> 03:24:54,239
so this is what we provide we also make

03:24:52,399 --> 03:24:56,399
we are also the best to make the run

03:24:54,239 --> 03:24:59,680
times the flat background time for gnome

03:24:56,399 --> 03:25:01,920
and kde and there are also uh

03:24:59,680 --> 03:25:03,920
other applications that other things

03:25:01,920 --> 03:25:06,560
that we do with a freelance stop sdk

03:25:03,920 --> 03:25:07,120
including uh making bootable images for

03:25:06,560 --> 03:25:08,640
numbers

03:25:07,120 --> 03:25:11,200
at least we'll make the best so that we

03:25:08,640 --> 03:25:14,800
can make numbers

03:25:11,200 --> 03:25:17,040
um freelancer sdk

03:25:14,800 --> 03:25:18,960
is not based on any distribution it's

03:25:17,040 --> 03:25:22,319
all built from scratch

03:25:18,960 --> 03:25:26,560
and this is built with bluestream

03:25:22,319 --> 03:25:29,920
just to be clear uh free desktop sdk

03:25:26,560 --> 03:25:31,680
is a part of physics tab but what is in

03:25:29,920 --> 03:25:32,800
further stop sdk is not necessary for

03:25:31,680 --> 03:25:34,880
the stop so there is no

03:25:32,800 --> 03:25:38,399
uh announcement from free desktop when

03:25:34,880 --> 03:25:38,399
there is something in for destiny

03:25:39,920 --> 03:25:44,960
risk five it's a instructional set

03:25:43,439 --> 03:25:49,120
architecture for a cpu

03:25:44,960 --> 03:25:52,479
and and the specification of this uh

03:25:49,120 --> 03:25:52,479
is open source so

03:25:53,120 --> 03:25:56,800
um this is very nice that we are getting

03:25:55,920 --> 03:25:59,439
there where

03:25:56,800 --> 03:26:00,479
uh the hardware start to be open source

03:25:59,439 --> 03:26:01,760
um

03:26:00,479 --> 03:26:03,680
that doesn't mean that the other that

03:26:01,760 --> 03:26:05,359
you will have as risk five is

03:26:03,680 --> 03:26:07,439
necessary open source there would be

03:26:05,359 --> 03:26:08,640
bits that are not but at least the

03:26:07,439 --> 03:26:12,479
specification of

03:26:08,640 --> 03:26:15,760
the how the cpu should uh

03:26:12,479 --> 03:26:19,359
work uh is there are

03:26:15,760 --> 03:26:24,640
risk five there are multiple um

03:26:19,359 --> 03:26:26,399
uh things it can be 32 64 128 bits

03:26:24,640 --> 03:26:28,399
so it's different processors it's a set

03:26:26,399 --> 03:26:31,439
of different processors and for each

03:26:28,399 --> 03:26:33,359
there is extensions for multiple

03:26:31,439 --> 03:26:35,040
different applications for example you

03:26:33,359 --> 03:26:36,640
might want to make a risk five make

03:26:35,040 --> 03:26:38,960
microcontroller for very

03:26:36,640 --> 03:26:40,399
small embedded things but you can also

03:26:38,960 --> 03:26:43,439
maybe make a

03:26:40,399 --> 03:26:46,000
processor for supercomputer so

03:26:43,439 --> 03:26:47,600
it covers lots of applications that need

03:26:46,000 --> 03:26:50,160
a microprocessor

03:26:47,600 --> 03:26:51,520
but that also includes uh desktop so we

03:26:50,160 --> 03:26:54,880
have to escape

03:26:51,520 --> 03:26:57,760
expect that we will see uh some

03:26:54,880 --> 03:26:58,800
uh uh some desktop computer at some

03:26:57,760 --> 03:27:02,880
point that will use the

03:26:58,800 --> 03:27:02,880
prescriber i hope we will get there

03:27:03,520 --> 03:27:07,920
uh it's the right time for us so we want

03:27:06,319 --> 03:27:11,040
to get the free stuff basically

03:27:07,920 --> 03:27:12,640
uh to risk fab because we know that it

03:27:11,040 --> 03:27:13,359
will be used and it's the right time for

03:27:12,640 --> 03:27:16,800
us because

03:27:13,359 --> 03:27:17,760
first the all the main parts of the free

03:27:16,800 --> 03:27:21,600
software

03:27:17,760 --> 03:27:24,800
have been ported uh to risk five

03:27:21,600 --> 03:27:27,200
um and these have started in um

03:27:24,800 --> 03:27:28,800
things started to be merged uh upstream

03:27:27,200 --> 03:27:32,560
in 2017 with

03:27:28,800 --> 03:27:36,000
vintages and gcc and then and then later

03:27:32,560 --> 03:27:38,080
we got everything we needed uh and

03:27:36,000 --> 03:27:39,600
recently the last big piece for us

03:27:38,080 --> 03:27:41,600
friday sk was merged

03:27:39,600 --> 03:27:43,120
which was go it's not part of the flat

03:27:41,600 --> 03:27:44,560
background time but we still depend on

03:27:43,120 --> 03:27:48,399
it for other things

03:27:44,560 --> 03:27:51,439
like for example the gnomos things

03:27:48,399 --> 03:27:55,040
so so pieces are

03:27:51,439 --> 03:27:57,680
here uh and also the second thing that

03:27:55,040 --> 03:27:59,120
there is some experimental hardware that

03:27:57,680 --> 03:28:03,040
is going to be really soon

03:27:59,120 --> 03:28:05,120
and that will be able to uh do have some

03:28:03,040 --> 03:28:07,040
okay experience with a desktop

03:28:05,120 --> 03:28:07,439
application so it's nice to be able to

03:28:07,040 --> 03:28:11,840
test

03:28:07,439 --> 03:28:11,840
as early as possible

03:28:12,319 --> 03:28:19,840
so uh to build it uh first

03:28:15,920 --> 03:28:24,000
we've built we targeted only uh uh one

03:28:19,840 --> 03:28:25,920
kind of risk so the 64 with the main um

03:28:24,000 --> 03:28:27,279
extensions that are expected to be in

03:28:25,920 --> 03:28:30,239
desktop so this is a

03:28:27,279 --> 03:28:32,960
default actually for the 64-bit risk 5

03:28:30,239 --> 03:28:32,960
for gcc

03:28:36,239 --> 03:28:41,200
the the development has not been that

03:28:39,200 --> 03:28:43,520
difficult because

03:28:41,200 --> 03:28:44,960
first of all uh free desktop sdk a

03:28:43,520 --> 03:28:47,279
bootstrap part so the

03:28:44,960 --> 03:28:49,359
when we build the minimal system that

03:28:47,279 --> 03:28:52,399
has for example gcc being your teeth

03:28:49,359 --> 03:28:55,279
gripsy bash mech and things like that

03:28:52,399 --> 03:28:56,160
this part can because cross compiled so

03:28:55,279 --> 03:28:58,239
we can make

03:28:56,160 --> 03:29:01,040
uh a part two new system as long as we

03:28:58,239 --> 03:29:01,040
have the new uh

03:29:01,520 --> 03:29:08,399
all the support in the little gem

03:29:06,239 --> 03:29:09,920
but the rest needs to build on the

03:29:08,399 --> 03:29:11,200
target architecture because there are so

03:29:09,920 --> 03:29:13,680
many projects that

03:29:11,200 --> 03:29:15,680
uh are very difficult to cross compile

03:29:13,680 --> 03:29:17,439
and we need to have so many patches to

03:29:15,680 --> 03:29:18,960
deal with it so we don't cross compile

03:29:17,439 --> 03:29:21,439
the rest that means that we need

03:29:18,960 --> 03:29:23,040
hardware but we don't have hardware yet

03:29:21,439 --> 03:29:24,560
in for desktop sdk

03:29:23,040 --> 03:29:27,279
uh or at least we don't have the

03:29:24,560 --> 03:29:29,680
hardware that is capable of building it

03:29:27,279 --> 03:29:31,760
because we need a lot of memory uh so

03:29:29,680 --> 03:29:34,960
what we have done is using qmu

03:29:31,760 --> 03:29:37,760
for emulation

03:29:34,960 --> 03:29:38,720
uh in qme there's two kind of uh

03:29:37,760 --> 03:29:41,279
emulation that is

03:29:38,720 --> 03:29:42,560
the system uh emulation where you you

03:29:41,279 --> 03:29:44,160
you boot an os

03:29:42,560 --> 03:29:45,760
but there is also the user emulation

03:29:44,160 --> 03:29:47,439
where you can just say i have a binary

03:29:45,760 --> 03:29:49,200
this is for a different architecture but

03:29:47,439 --> 03:29:50,960
i want you to run it on this

03:29:49,200 --> 03:29:52,479
current kernel that i'm running which is

03:29:50,960 --> 03:29:55,840
another architecture and it won't

03:29:52,479 --> 03:29:57,920
translate the system calls to the

03:29:55,840 --> 03:30:00,160
to the current architecture so you can

03:29:57,920 --> 03:30:03,040
just run the binary in your system

03:30:00,160 --> 03:30:03,920
so we went for this user mod where we

03:30:03,040 --> 03:30:05,680
just

03:30:03,920 --> 03:30:07,359
execute the binary because it was better

03:30:05,680 --> 03:30:07,760
for us first we don't have to depend on

03:30:07,359 --> 03:30:09,680
the

03:30:07,760 --> 03:30:11,680
on a distribution that was built for

03:30:09,680 --> 03:30:15,040
risk five so we don't have to

03:30:11,680 --> 03:30:16,880
deal with this uh and um

03:30:15,040 --> 03:30:18,479
we can build everything at once as we

03:30:16,880 --> 03:30:20,479
start to build something that

03:30:18,479 --> 03:30:21,920
uh to the bootstrap that does cost

03:30:20,479 --> 03:30:25,680
compelling and then after we

03:30:21,920 --> 03:30:26,560
just switch uh to uh building on risk

03:30:25,680 --> 03:30:29,200
five

03:30:26,560 --> 03:30:30,960
and everything happens the machine it's

03:30:29,200 --> 03:30:33,279
also a bit faster

03:30:30,960 --> 03:30:34,640
but there was a thing is that we found

03:30:33,279 --> 03:30:37,200
that it hangs sometimes

03:30:34,640 --> 03:30:39,439
and the main problem was cargo from rust

03:30:37,200 --> 03:30:42,560
that was hanging

03:30:39,439 --> 03:30:44,399
we have uh found that with a just a

03:30:42,560 --> 03:30:44,720
simple uh environment variable we could

03:30:44,399 --> 03:30:47,680
just

03:30:44,720 --> 03:30:48,640
walk around uh this uh hopefully one day

03:30:47,680 --> 03:30:50,720
we'll be able to

03:30:48,640 --> 03:30:51,920
fix the bug in qme but it's a very

03:30:50,720 --> 03:30:55,279
difficult bug to

03:30:51,920 --> 03:30:55,279
to fix but that works

03:30:56,840 --> 03:31:00,960
um so most of the upstream thing that

03:31:00,319 --> 03:31:03,200
we're

03:31:00,960 --> 03:31:04,319
concerned by uh supporting risk fives

03:31:03,200 --> 03:31:05,040
that has assembled these things like

03:31:04,319 --> 03:31:07,200
that

03:31:05,040 --> 03:31:09,680
they were already supported in risk five

03:31:07,200 --> 03:31:12,560
and the rest was just minor fixes

03:31:09,680 --> 03:31:13,359
so we didn't we had lots of small fixes

03:31:12,560 --> 03:31:15,040
and lots of

03:31:13,359 --> 03:31:16,880
updates to make sure that we had the

03:31:15,040 --> 03:31:18,640
last upstream version

03:31:16,880 --> 03:31:21,040
there are few things that we didn't get

03:31:18,640 --> 03:31:24,800
to to get and uh

03:31:21,040 --> 03:31:25,520
uh two were for mostly for debugging so

03:31:24,800 --> 03:31:27,680
valgrind

03:31:25,520 --> 03:31:29,439
which is very nice too but it's not yet

03:31:27,680 --> 03:31:32,560
available for risk five

03:31:29,439 --> 03:31:34,399
and liber unwind in practice can be used

03:31:32,560 --> 03:31:36,479
for a lot of a different application but

03:31:34,399 --> 03:31:37,680
uh well in theory it can be useful for a

03:31:36,479 --> 03:31:39,600
lot of application but

03:31:37,680 --> 03:31:40,800
in practice it's been used only for

03:31:39,600 --> 03:31:42,800
debugging

03:31:40,800 --> 03:31:43,920
and we can disable this so we can

03:31:42,800 --> 03:31:46,479
provide a philosophy

03:31:43,920 --> 03:31:47,439
with a liben wine and it's fine another

03:31:46,479 --> 03:31:50,640
thing is that

03:31:47,439 --> 03:31:52,399
the compatible regular expressions

03:31:50,640 --> 03:31:54,479
don't have jit compiler so they might be

03:31:52,399 --> 03:31:56,720
a bit slower but this is a minor thing

03:31:54,479 --> 03:31:58,640
we have also looked at the minimum sdk

03:31:56,720 --> 03:32:00,560
and we have not found anything

03:31:58,640 --> 03:32:02,160
very special there so everything should

03:32:00,560 --> 03:32:06,720
be

03:32:02,160 --> 03:32:09,760
there um

03:32:06,720 --> 03:32:12,479
what if you want to uh build your

03:32:09,760 --> 03:32:14,239
flat pack application to for risk five

03:32:12,479 --> 03:32:17,120
uh well it's possible um

03:32:14,239 --> 03:32:18,640
you probably need to have some uh

03:32:17,120 --> 03:32:21,439
technical background but it will

03:32:18,640 --> 03:32:23,040
be very quick the the the first thing

03:32:21,439 --> 03:32:26,960
you will need is you need to have your

03:32:23,040 --> 03:32:30,880
user on your machine and you will need a

03:32:26,960 --> 03:32:31,439
uh uh for for risk five and you will

03:32:30,880 --> 03:32:34,160
need to

03:32:31,439 --> 03:32:35,920
set up the bin fmt ms so you can run

03:32:34,160 --> 03:32:39,200
directly

03:32:35,920 --> 03:32:41,840
the right uh the qma jack

03:32:39,200 --> 03:32:43,120
when you call any binary that is for rs5

03:32:41,840 --> 03:32:44,640
the second thing is that you will have

03:32:43,120 --> 03:32:47,200
to build free desktop basically

03:32:44,640 --> 03:32:47,680
for the month the first stop basically

03:32:47,200 --> 03:32:50,080
uh

03:32:47,680 --> 03:32:50,960
run times for risk five are not

03:32:50,080 --> 03:32:52,960
published

03:32:50,960 --> 03:32:54,960
yet so you will have to build it on your

03:32:52,960 --> 03:32:56,560
own um

03:32:54,960 --> 03:32:58,239
then after you will get the reboot you

03:32:56,560 --> 03:33:01,520
will have to install it on your

03:32:58,239 --> 03:33:04,239
on your computer and then after

03:33:01,520 --> 03:33:05,840
uh you will probably depending if you

03:33:04,239 --> 03:33:06,319
use rest for example you will probably

03:33:05,840 --> 03:33:09,040
have to

03:33:06,319 --> 03:33:09,520
uh define the same environment variable

03:33:09,040 --> 03:33:12,080
that you

03:33:09,520 --> 03:33:13,600
that we used in your manifest and then

03:33:12,080 --> 03:33:14,160
after you just have to call flat tag

03:33:13,600 --> 03:33:17,200
builder

03:33:14,160 --> 03:33:21,120
uh and just say you want the the right

03:33:17,200 --> 03:33:23,040
uh arch uh architecture

03:33:21,120 --> 03:33:25,680
and then it will build and then after

03:33:23,040 --> 03:33:25,680
you can test

03:33:26,880 --> 03:33:32,160
so uh a few months ago we tested that we

03:33:30,479 --> 03:33:34,319
wanted to be sure that we can

03:33:32,160 --> 03:33:35,200
build a flat application for risk five

03:33:34,319 --> 03:33:37,680
and this is actually

03:33:35,200 --> 03:33:38,479
uh running in the virtual machine the

03:33:37,680 --> 03:33:40,800
result

03:33:38,479 --> 03:33:41,600
this was super tux cart that we took

03:33:40,800 --> 03:33:44,000
from uh

03:33:41,600 --> 03:33:45,439
flat hub and we just adapted few things

03:33:44,000 --> 03:33:46,960
and we build

03:33:45,439 --> 03:33:48,880
we'll build it with the instruction i

03:33:46,960 --> 03:33:50,880
get before and and this is running

03:33:48,880 --> 03:33:53,040
by the way what you see around is that

03:33:50,880 --> 03:33:54,239
just a bootable test image that we have

03:33:53,040 --> 03:33:56,560
in freestyle basically

03:33:54,239 --> 03:33:58,319
that gets a bootable image that has

03:33:56,560 --> 03:33:59,120
western and flat packs so we can test

03:33:58,319 --> 03:34:00,960
flat pack

03:33:59,120 --> 03:34:04,399
by the way flat pack works in rs5 there

03:34:00,960 --> 03:34:04,399
is nothing special about this

03:34:07,600 --> 03:34:13,600
what now we need to publish

03:34:10,880 --> 03:34:15,200
the fitnessa basically for risk five it

03:34:13,600 --> 03:34:16,560
will be published uh in august there

03:34:15,200 --> 03:34:19,920
will be a new release

03:34:16,560 --> 03:34:20,880
and um that would be just for testing we

03:34:19,920 --> 03:34:22,479
don't expect that

03:34:20,880 --> 03:34:24,319
this would be something really used and

03:34:22,479 --> 03:34:26,399
uh this will not be on faf you

03:34:24,319 --> 03:34:28,239
i would love to download it from the

03:34:26,399 --> 03:34:31,520
freestyle sdk uh

03:34:28,239 --> 03:34:32,000
flat pack purpose theory uh we need to

03:34:31,520 --> 03:34:34,720
get

03:34:32,000 --> 03:34:36,800
uh we hope to get hardware soon uh that

03:34:34,720 --> 03:34:39,439
is capable of doing uh

03:34:36,800 --> 03:34:40,479
uh to build in the ci so to have builder

03:34:39,439 --> 03:34:43,520
so you will stop

03:34:40,479 --> 03:34:45,600
using qmu this is a temporary thing

03:34:43,520 --> 03:34:47,359
we also need to prepare the builder

03:34:45,600 --> 03:34:50,000
images because the

03:34:47,359 --> 03:34:50,399
the way the ci works for desktop sdk is

03:34:50,000 --> 03:34:52,000
that

03:34:50,399 --> 03:34:53,520
all the docker images that we use are

03:34:52,000 --> 03:34:56,399
based on free desktop sdk

03:34:53,520 --> 03:34:58,239
so we really do dog fooding and we just

03:34:56,399 --> 03:35:00,080
use fedestar basically everywhere

03:34:58,239 --> 03:35:01,760
so we have to take care of that but it's

03:35:00,080 --> 03:35:04,080
not very much difficult

03:35:01,760 --> 03:35:06,720
we know it it will probably work with we

03:35:04,080 --> 03:35:10,479
have all the pieces there

03:35:06,720 --> 03:35:13,520
and uh well the question is now

03:35:10,479 --> 03:35:16,080
when we will when will we have hardware

03:35:13,520 --> 03:35:16,800
flat that is capable of building a risk

03:35:16,080 --> 03:35:18,399
five

03:35:16,800 --> 03:35:20,640
that's a question that i don't have the

03:35:18,399 --> 03:35:20,640
answer

03:35:22,000 --> 03:35:29,120
um the work that was done uh

03:35:25,279 --> 03:35:32,319
on this uh project uh uh was done by

03:35:29,120 --> 03:35:33,680
a few engineers uh at cutting um a lot

03:35:32,319 --> 03:35:38,720
of comments where it came from

03:35:33,680 --> 03:35:42,880
james um so thank you for him and um

03:35:38,720 --> 03:35:46,080
uh freestyle basically it is not uh

03:35:42,880 --> 03:35:49,840
a cutting project we try to uh

03:35:46,080 --> 03:35:50,880
invest time uh uh in it and getting

03:35:49,840 --> 03:35:53,680
getting it there but there is

03:35:50,880 --> 03:35:57,359
independent there so if you are

03:35:53,680 --> 03:35:59,200
we need we need a community there and we

03:35:57,359 --> 03:36:03,040
need more um

03:35:59,200 --> 03:36:04,880
[Music]

03:36:03,040 --> 03:36:06,960
contributors if you are interested for

03:36:04,880 --> 03:36:09,840
example the in uh contributing in uh

03:36:06,960 --> 03:36:11,520
publishing us the the snap for free

03:36:09,840 --> 03:36:12,479
stuff sdk we are looking for people who

03:36:11,520 --> 03:36:16,479
can do that in the

03:36:12,479 --> 03:36:19,359
in in the community uh come on they are

03:36:16,479 --> 03:36:21,439
channel four code think uh we are hiring

03:36:19,359 --> 03:36:22,319
these days so there's this url uh you

03:36:21,439 --> 03:36:26,000
can follow that

03:36:22,319 --> 03:36:28,000
and uh and and uh all the information is

03:36:26,000 --> 03:36:30,160
there if you want to work at good thing

03:36:28,000 --> 03:36:31,840
uh this is a short talk because we

03:36:30,160 --> 03:36:33,760
didn't know if we would have so much

03:36:31,840 --> 03:36:35,359
material to talk about but there is more

03:36:33,760 --> 03:36:38,239
things that are coming at gwedex so

03:36:35,359 --> 03:36:39,200
see you there are there any questions i

03:36:38,239 --> 03:36:41,520
will go to the share

03:36:39,200 --> 03:36:41,520
notes

03:36:44,720 --> 03:36:50,720
yeah yes so the first was when

03:36:48,160 --> 03:36:51,680
it will be available the bid will be for

03:36:50,720 --> 03:36:53,840
testing in

03:36:51,680 --> 03:36:54,800
august we can you can already it's

03:36:53,840 --> 03:36:56,800
already merged

03:36:54,800 --> 03:36:58,080
so if you check out the master and you

03:36:56,800 --> 03:37:00,840
build that you get it

03:36:58,080 --> 03:37:02,000
and you and it's one like command line

03:37:00,840 --> 03:37:04,560
make

03:37:02,000 --> 03:37:06,319
export with setting the arch to the

03:37:04,560 --> 03:37:09,439
right architecture and it will just

03:37:06,319 --> 03:37:13,040
make your repository

03:37:09,439 --> 03:37:15,520
uh or it's

03:37:13,040 --> 03:37:16,399
what's what's in it for quite think uh

03:37:15,520 --> 03:37:19,520
it's uh

03:37:16,399 --> 03:37:21,760
so we have

03:37:19,520 --> 03:37:23,439
we use this tool called b streams this

03:37:21,760 --> 03:37:26,800
which is also independent is a

03:37:23,439 --> 03:37:30,080
apache project uh but we

03:37:26,800 --> 03:37:31,200
provide um a consultancy in the

03:37:30,080 --> 03:37:33,279
attracting and uh

03:37:31,200 --> 03:37:34,479
and one of the things that we provide is

03:37:33,279 --> 03:37:37,840
consistency on on

03:37:34,479 --> 03:37:41,040
on building things and and and including

03:37:37,840 --> 03:37:45,359
build stream so uh

03:37:41,040 --> 03:37:47,439
free sub sdk is a very good uh case for

03:37:45,359 --> 03:37:49,760
testing bloodstream and making sure that

03:37:47,439 --> 03:37:53,439
it works and

03:37:49,760 --> 03:37:53,439
and yeah that's that's

03:37:54,239 --> 03:38:00,080
that's what it is

03:37:58,000 --> 03:38:01,120
but yeah also blitzing is in the also

03:38:00,080 --> 03:38:03,600
independent but uh

03:38:01,120 --> 03:38:04,560
it's just uh it's just we need we need

03:38:03,600 --> 03:38:08,080
tools

03:38:04,560 --> 03:38:10,239
to provide consistency on just uh if we

03:38:08,080 --> 03:38:14,319
go to customer we need to

03:38:10,239 --> 03:38:27,840
to have some solution on things that we

03:38:14,319 --> 03:38:27,840
yeah that's it

03:38:35,760 --> 03:38:45,120
okay how does the risk 5 relate to arm

03:38:40,960 --> 03:38:45,120
which is currently popular um

03:38:45,279 --> 03:38:49,520
i think i and so i don't know much of

03:38:48,319 --> 03:38:51,920
the assembly part

03:38:49,520 --> 03:38:52,560
i mean how would the technical part of

03:38:51,920 --> 03:38:55,760
of

03:38:52,560 --> 03:38:59,920
of arm i i've i've noticed there is

03:38:55,760 --> 03:39:02,960
some similarity of how things are

03:38:59,920 --> 03:39:03,600
uh of the design um there are there are

03:39:02,960 --> 03:39:07,040
both

03:39:03,600 --> 03:39:07,760
risk kind of uh processors and then they

03:39:07,040 --> 03:39:09,760
have some

03:39:07,760 --> 03:39:11,120
similarities in some of the designs i

03:39:09,760 --> 03:39:12,640
think they're in the addressing for

03:39:11,120 --> 03:39:16,000
example and things like that

03:39:12,640 --> 03:39:19,120
um but i don't know the details

03:39:16,000 --> 03:39:20,080
uh but the open source uh of the

03:39:19,120 --> 03:39:22,880
specification is

03:39:20,080 --> 03:39:24,800
is a good thing because the the arm is

03:39:22,880 --> 03:39:26,640
the company and uh

03:39:24,800 --> 03:39:27,920
and to be able to make an arm processor

03:39:26,640 --> 03:39:30,000
if you if you want to make a system on

03:39:27,920 --> 03:39:32,319
the jeep right

03:39:30,000 --> 03:39:33,120
with some pieces and it has the arm core

03:39:32,319 --> 03:39:36,720
you need

03:39:33,120 --> 03:39:39,840
uh you will need you need to pay uh

03:39:36,720 --> 03:39:44,080
you will need to to to pay uh

03:39:39,840 --> 03:39:47,279
uh um whereas um

03:39:44,080 --> 03:39:47,840
risk five you can choose with either you

03:39:47,279 --> 03:39:50,000
develop

03:39:47,840 --> 03:39:53,840
yourself the core or you find someone

03:39:50,000 --> 03:39:53,840
else will develop a risk 5 core that

03:39:55,279 --> 03:40:01,840
and you can change at any

03:39:59,120 --> 03:40:02,880
time of your design the query and you

03:40:01,840 --> 03:40:06,160
stay on

03:40:02,880 --> 03:40:08,080
the same uh instruction set

03:40:06,160 --> 03:40:09,359
so your banner is stick compatible so i

03:40:08,080 --> 03:40:11,760
think uh i

03:40:09,359 --> 03:40:12,399
i think that the the main uh important

03:40:11,760 --> 03:40:15,680
thing

03:40:12,399 --> 03:40:19,120
and also uh for um i know that

03:40:15,680 --> 03:40:22,560
for example for um

03:40:19,120 --> 03:40:23,680
for for university it's better to work

03:40:22,560 --> 03:40:27,120
on risk five than

03:40:23,680 --> 03:40:33,840
um for the issue of

03:40:27,120 --> 03:40:33,840
licensing with arm

03:40:43,279 --> 03:40:48,080
all right well it looks like that's all

03:40:44,800 --> 03:40:48,080
the questions we have

03:40:50,160 --> 03:40:53,199
looks like that's all the questions we

03:40:51,600 --> 03:40:55,600
have thank you valentin for

03:40:53,199 --> 03:40:56,640
for being here and presenting for us

03:40:55,600 --> 03:40:58,239
today

03:40:56,640 --> 03:41:00,319
hope you get to enjoy the rest of the

03:40:58,239 --> 03:41:01,120
conference and have a nice rest of your

03:41:00,319 --> 03:41:04,800
day too

03:41:01,120 --> 03:41:05,120
bye everybody all right we're gonna take

03:41:04,800 --> 03:41:08,800
a

03:41:05,120 --> 03:41:12,880
brief break and

03:41:08,800 --> 03:41:16,319
in about 10 minutes we'll be back

03:41:12,880 --> 03:41:19,439
with a presentation from our

03:41:16,319 --> 03:41:22,960
sponsor collabora

03:41:19,439 --> 03:41:25,359
in a sponsor's office hour again

03:41:22,960 --> 03:41:26,239
taking a brief break for 10 minutes and

03:41:25,359 --> 03:41:29,840
we'll be back

03:41:26,239 --> 03:41:29,840
with calabra thank you

03:41:51,840 --> 03:41:53,920

YouTube URL: https://www.youtube.com/watch?v=iJeANBfLVHQ


