Title: Linux App Summit 2020 - Thursday 12th November - 08:45 - 11:05
Publication date: 2020-11-14
Playlist: Linux App Summit 2020
Description: 
	
Captions: 
	00:46:47,920 --> 00:46:52,560
okay

00:46:49,119 --> 00:46:52,560
um well

00:46:52,720 --> 00:46:56,160
i'm tempted to say good morning but

00:46:55,520 --> 00:46:58,240
people are

00:46:56,160 --> 00:47:00,880
everywhere in the around the world right

00:46:58,240 --> 00:47:04,319
now so good morning good evening

00:47:00,880 --> 00:47:09,040
good uh night i guess too

00:47:04,319 --> 00:47:11,839
and welcome to uh las 2020

00:47:09,040 --> 00:47:13,200
now if you are here with me you would

00:47:11,839 --> 00:47:15,760
hear clapping

00:47:13,200 --> 00:47:16,800
uh but uh this is also the first

00:47:15,760 --> 00:47:20,319
occasion that we have

00:47:16,800 --> 00:47:22,559
on las online with all of us at home

00:47:20,319 --> 00:47:23,599
because it's 20 20 and it's the kind of

00:47:22,559 --> 00:47:27,280
things we do

00:47:23,599 --> 00:47:27,280
nowadays um

00:47:27,839 --> 00:47:35,119
but uh i think that we'll all

00:47:31,119 --> 00:47:38,480
be happy with what we have prepared

00:47:35,119 --> 00:47:41,680
we we have a very nice program with

00:47:38,480 --> 00:47:42,559
a lot of talks with a breakout and both

00:47:41,680 --> 00:47:45,680
sessions

00:47:42,559 --> 00:47:47,599
for everyone who who is interested in

00:47:45,680 --> 00:47:50,960
linux and

00:47:47,599 --> 00:47:53,839
well free software operating systems

00:47:50,960 --> 00:47:55,280
now uh you will see that uh although our

00:47:53,839 --> 00:47:58,400
talks will be recorded

00:47:55,280 --> 00:48:00,559
um we will

00:47:58,400 --> 00:48:02,319
upload some videos in in the future they

00:48:00,559 --> 00:48:05,520
will be on youtube as well

00:48:02,319 --> 00:48:06,640
um you will you will see a couple of

00:48:05,520 --> 00:48:09,839
social events

00:48:06,640 --> 00:48:11,760
so that since we don't have a hallway or

00:48:09,839 --> 00:48:13,680
a place to have a coffee together we can

00:48:11,760 --> 00:48:17,520
still hang out and do stuff

00:48:13,680 --> 00:48:22,160
you will see the amalfi coast store

00:48:17,520 --> 00:48:28,079
as well as quiz um

00:48:22,160 --> 00:48:28,079
we have a hashtag called lis 2020

00:48:28,480 --> 00:48:34,800
tweet tweet about

00:48:31,680 --> 00:48:35,520
anything you like and well remember to

00:48:34,800 --> 00:48:36,880
uh

00:48:35,520 --> 00:48:38,880
tell the world about the things we are

00:48:36,880 --> 00:48:43,200
doing and the things we are saying

00:48:38,880 --> 00:48:46,400
um we'll have two keynotes uh

00:48:43,200 --> 00:48:49,440
from melissa logan and greg

00:48:46,400 --> 00:48:52,079
harna i think that they're of

00:48:49,440 --> 00:48:53,760
both interesting people coming from our

00:48:52,079 --> 00:48:57,200
communities but also

00:48:53,760 --> 00:49:00,960
from uh spaces that are with well

00:48:57,200 --> 00:49:02,880
very high responsibility and um

00:49:00,960 --> 00:49:04,079
i would very much recommend you to look

00:49:02,880 --> 00:49:05,680
into that as well as

00:49:04,079 --> 00:49:08,319
the panel that we're going to have on on

00:49:05,680 --> 00:49:11,599
saturday um

00:49:08,319 --> 00:49:14,000
very quick reminder of our sponsors uh

00:49:11,599 --> 00:49:14,960
canonical collabora red hat elementary

00:49:14,000 --> 00:49:16,640
and code thing

00:49:14,960 --> 00:49:18,720
thank you very much for supporting

00:49:16,640 --> 00:49:21,839
helias without you this would be

00:49:18,720 --> 00:49:24,240
impossible to have and but last night

00:49:21,839 --> 00:49:27,200
but not least we have a code of conduct

00:49:24,240 --> 00:49:28,079
uh remember that we're all people here

00:49:27,200 --> 00:49:31,599
and well

00:49:28,079 --> 00:49:35,599
still stay still and stay friends um

00:49:31,599 --> 00:49:38,880
it's it's very important and

00:49:35,599 --> 00:49:39,200
without further ado uh well i hope you

00:49:38,880 --> 00:49:42,000
enjoy

00:49:39,200 --> 00:49:44,630
all enjoy uh lis let's start with the

00:49:42,000 --> 00:49:46,559
first presentation

00:49:44,630 --> 00:49:59,839
[Music]

00:49:46,559 --> 00:49:59,839
thank you and welcome to alias

00:50:05,839 --> 00:50:13,680
thank you very much uh hello all

00:50:09,440 --> 00:50:16,480
uh welcome to alias 2020

00:50:13,680 --> 00:50:20,240
again somebody just gave me a uh

00:50:16,480 --> 00:50:20,240
confirmation that i am audible

00:50:20,960 --> 00:50:28,720
uh thanks uh so let's figure it out

00:50:24,800 --> 00:50:30,960
i am a monk uh i am a journalist open

00:50:28,720 --> 00:50:34,400
source software developer

00:50:30,960 --> 00:50:38,079
for a couple of years now uh recently

00:50:34,400 --> 00:50:41,359
uh uh

00:50:38,079 --> 00:50:43,920
i am working on a project called lip

00:50:41,359 --> 00:50:43,920
camera

00:50:44,000 --> 00:50:52,559
i don't think i have camera right now

00:50:48,640 --> 00:50:52,559
that's ironic uh

00:50:52,960 --> 00:50:58,160
uh yeah i i don't have a webcam right

00:50:56,000 --> 00:50:58,160
now

00:50:58,319 --> 00:51:02,880
sorry it's it's i thought it could go

00:51:01,440 --> 00:51:08,880
with presentation and

00:51:02,880 --> 00:51:13,119
audio only uh

00:51:08,880 --> 00:51:13,119
yeah so is that okay

00:51:15,599 --> 00:51:18,400
okay so

00:51:19,599 --> 00:51:25,839
uh okay sure

00:51:22,640 --> 00:51:29,200
thanks uh so let's begin uh

00:51:25,839 --> 00:51:32,800
so i'm uh let's uh uh

00:51:29,200 --> 00:51:36,319
talk about the uh like video capture

00:51:32,800 --> 00:51:40,559
uh linux media uh domain

00:51:36,319 --> 00:51:43,680
for for life what happens is like uh

00:51:40,559 --> 00:51:46,079
like a while ago like

00:51:43,680 --> 00:51:48,079
15 years ago there what the linux media

00:51:46,079 --> 00:51:51,280
and the video capture domain was

00:51:48,079 --> 00:51:52,720
uh quite simple you would have a camera

00:51:51,280 --> 00:51:56,480
sensor at the top

00:51:52,720 --> 00:51:59,680
uh and there uh would be a

00:51:56,480 --> 00:52:01,920
interface csi2 or even parallel and

00:51:59,680 --> 00:52:02,960
you would that would get exposed through

00:52:01,920 --> 00:52:06,319
a video node

00:52:02,960 --> 00:52:07,440
so uh writing applications user space

00:52:06,319 --> 00:52:10,400
applications was

00:52:07,440 --> 00:52:10,880
pretty easy you would have only one

00:52:10,400 --> 00:52:13,920
place

00:52:10,880 --> 00:52:14,640
for uh control one place to look for

00:52:13,920 --> 00:52:18,400
frames

00:52:14,640 --> 00:52:22,319
and just display to your output uh

00:52:18,400 --> 00:52:26,000
window uh so this was uh basically

00:52:22,319 --> 00:52:30,960
a very simple and uh it rare

00:52:26,000 --> 00:52:34,240
like it worked well for a while but then

00:52:30,960 --> 00:52:35,200
uh things get complicated yeah so

00:52:34,240 --> 00:52:38,079
complexity

00:52:35,200 --> 00:52:40,319
increased with the image signal

00:52:38,079 --> 00:52:43,520
processors being introduced

00:52:40,319 --> 00:52:44,319
so let's talk a bit brief about what are

00:52:43,520 --> 00:52:46,400
isps

00:52:44,319 --> 00:52:47,599
or image signal processors they are

00:52:46,400 --> 00:52:49,760
system peripherals

00:52:47,599 --> 00:52:51,920
that means they are operating at very

00:52:49,760 --> 00:52:54,640
high frequency

00:52:51,920 --> 00:52:55,280
uh that operate on a digital images so

00:52:54,640 --> 00:52:59,119
basically

00:52:55,280 --> 00:53:02,960
the raw uh data captured by the sensor

00:52:59,119 --> 00:53:07,520
is then pushed down to isps and they do

00:53:02,960 --> 00:53:10,079
some stuff that we are going to talk

00:53:07,520 --> 00:53:10,720
so basically dma resizing scaling

00:53:10,079 --> 00:53:14,160
cropping

00:53:10,720 --> 00:53:17,040
or pixel format conversation conversion

00:53:14,160 --> 00:53:18,240
some of the things that they would do

00:53:17,040 --> 00:53:21,280
these

00:53:18,240 --> 00:53:22,000
are the basic ones that basically were

00:53:21,280 --> 00:53:25,280
found in

00:53:22,000 --> 00:53:27,920
many but there are other isps

00:53:25,280 --> 00:53:29,440
so isps are basically a group of

00:53:27,920 --> 00:53:32,160
building blocks that

00:53:29,440 --> 00:53:33,200
have some specific operations on the raw

00:53:32,160 --> 00:53:36,079
data that been

00:53:33,200 --> 00:53:37,920
captured so imagine a pipeline or simply

00:53:36,079 --> 00:53:39,680
a gstreamer pipeline you would have

00:53:37,920 --> 00:53:41,359
elements and the data would flow through

00:53:39,680 --> 00:53:44,240
them

00:53:41,359 --> 00:53:45,680
so image uh signal processor work then

00:53:44,240 --> 00:53:47,119
but they are basically system

00:53:45,680 --> 00:53:50,640
peripherals so they were

00:53:47,119 --> 00:53:55,520
uh like embedded on the uh soc

00:53:50,640 --> 00:53:58,319
itself so uh in order to

00:53:55,520 --> 00:53:59,119
manage the data flow through these

00:53:58,319 --> 00:54:03,119
peripherals

00:53:59,119 --> 00:54:06,319
kernel was uh kernel exposed a new api

00:54:03,119 --> 00:54:07,040
named media controller uh before that to

00:54:06,319 --> 00:54:10,559
capture

00:54:07,040 --> 00:54:12,800
uh like the video frames and all the

00:54:10,559 --> 00:54:13,920
there was already an api called v4l

00:54:12,800 --> 00:54:17,920
video for linux

00:54:13,920 --> 00:54:22,240
and v4 l2 uh so that part was sorted but

00:54:17,920 --> 00:54:24,480
the introduction of isps uh

00:54:22,240 --> 00:54:25,599
led to a need to introduce a new api

00:54:24,480 --> 00:54:29,200
called media con

00:54:25,599 --> 00:54:33,200
media controller in the kernel uh

00:54:29,200 --> 00:54:36,880
so looking at high level what exactly

00:54:33,200 --> 00:54:39,839
has happened i cannot see my

00:54:36,880 --> 00:54:39,839
slide

00:54:45,200 --> 00:54:52,480
okay so yeah the hardware topology

00:54:48,559 --> 00:54:55,520
uh got complicated like you can see here

00:54:52,480 --> 00:54:58,799
uh you would have some sensors the red

00:54:55,520 --> 00:55:01,599
boxes are the sensors like two uh

00:54:58,799 --> 00:55:02,799
sensors and the flash maybe the isps

00:55:01,599 --> 00:55:05,839
building blocks are

00:55:02,799 --> 00:55:06,880
denoted in green so you would have some

00:55:05,839 --> 00:55:09,920
sub devs

00:55:06,880 --> 00:55:13,280
or some something uh resizer

00:55:09,920 --> 00:55:15,359
and uh the blue boxes are the api so

00:55:13,280 --> 00:55:18,240
mind you this are the like the video

00:55:15,359 --> 00:55:21,839
notes uh they are also configured

00:55:18,240 --> 00:55:25,599
or they are also interfaced with an api

00:55:21,839 --> 00:55:29,280
maybe before and the the

00:55:25,599 --> 00:55:31,760
uh isps were controlled using

00:55:29,280 --> 00:55:32,880
something we discusses media controllers

00:55:31,760 --> 00:55:36,240
so

00:55:32,880 --> 00:55:40,400
two different apis to manage

00:55:36,240 --> 00:55:40,400
uh the video capture here

00:55:42,000 --> 00:55:45,920
okay so looking at very high level

00:55:44,160 --> 00:55:48,640
foreign camera application

00:55:45,920 --> 00:55:49,599
earlier it was just v4 l2 one place to

00:55:48,640 --> 00:55:52,559
look for frames

00:55:49,599 --> 00:55:53,119
one place to control them and now with

00:55:52,559 --> 00:55:55,599
the

00:55:53,119 --> 00:55:56,880
introduction of complex isps you would

00:55:55,599 --> 00:55:58,880
have v4l2

00:55:56,880 --> 00:56:00,319
you would the camera application would

00:55:58,880 --> 00:56:03,119
also need to know about

00:56:00,319 --> 00:56:03,920
media controller like how media will

00:56:03,119 --> 00:56:07,200
flow through

00:56:03,920 --> 00:56:10,319
through uh the peripherals

00:56:07,200 --> 00:56:13,599
sub div so it became

00:56:10,319 --> 00:56:14,799
a very complex task to write a camera

00:56:13,599 --> 00:56:17,839
application

00:56:14,799 --> 00:56:21,520
without the knowledge of like

00:56:17,839 --> 00:56:25,760
hardware uh complexity you are handling

00:56:21,520 --> 00:56:28,240
and uh being very tight to a hardware

00:56:25,760 --> 00:56:29,440
uh is something which does not scale in

00:56:28,240 --> 00:56:32,880
the long run

00:56:29,440 --> 00:56:33,359
so uh this went for a while in embedded

00:56:32,880 --> 00:56:36,480
and

00:56:33,359 --> 00:56:38,720
like you have seen uh like the mobiles

00:56:36,480 --> 00:56:39,599
and the cell phones had cameras which

00:56:38,720 --> 00:56:42,960
are

00:56:39,599 --> 00:56:46,799
uh which which use basically this

00:56:42,960 --> 00:56:49,839
uh this frame framework or like

00:56:46,799 --> 00:56:53,280
uh practice more as to say

00:56:49,839 --> 00:56:56,400
but uh since last couple of years

00:56:53,280 --> 00:56:58,160
those cameras are slowly uh coming to

00:56:56,400 --> 00:56:59,920
uh the personal computing world the

00:56:58,160 --> 00:57:03,359
laptops and a

00:56:59,920 --> 00:57:06,640
few other uh like uvc

00:57:03,359 --> 00:57:09,920
devices and all so we need to

00:57:06,640 --> 00:57:10,720
address a problem here uh we need a like

00:57:09,920 --> 00:57:12,559
uh

00:57:10,720 --> 00:57:14,799
something which can abstract all this

00:57:12,559 --> 00:57:16,960
complexity and

00:57:14,799 --> 00:57:18,960
let application developers write

00:57:16,960 --> 00:57:22,559
application in such a way that they are

00:57:18,960 --> 00:57:22,960
portable they run uh basically depict

00:57:22,559 --> 00:57:25,599
the

00:57:22,960 --> 00:57:26,799
main business logic of the application

00:57:25,599 --> 00:57:30,240
and being able to

00:57:26,799 --> 00:57:30,960
like uh run on different on and not care

00:57:30,240 --> 00:57:34,160
about the

00:57:30,960 --> 00:57:37,520
platform on there which are running

00:57:34,160 --> 00:57:38,480
so this is the problem statement uh as

00:57:37,520 --> 00:57:40,240
of now uh

00:57:38,480 --> 00:57:42,799
applications are requested to know a lot

00:57:40,240 --> 00:57:46,319
of details of underlying hardware

00:57:42,799 --> 00:57:47,680
and uh capturing frames uh meaning like

00:57:46,319 --> 00:57:50,720
you have to

00:57:47,680 --> 00:57:52,880
uh really know about the what

00:57:50,720 --> 00:57:55,200
peripherals you have on the hardware and

00:57:52,880 --> 00:57:56,880
configuring it before the application

00:57:55,200 --> 00:57:59,920
can even use it

00:57:56,880 --> 00:58:01,119
uh and yeah uh the media graph that i

00:57:59,920 --> 00:58:04,640
showed you earlier

00:58:01,119 --> 00:58:06,960
is from like 20 years back so

00:58:04,640 --> 00:58:08,000
it was already complex 10 years back and

00:58:06,960 --> 00:58:10,079
modern laptops that

00:58:08,000 --> 00:58:12,400
are shipping with powerful isps like

00:58:10,079 --> 00:58:14,160
intel ipo 3 uh i

00:58:12,400 --> 00:58:16,880
rather not show the media graph here

00:58:14,160 --> 00:58:19,920
because it's very complex and i just

00:58:16,880 --> 00:58:20,839
don't want to uh you can look it up

00:58:19,920 --> 00:58:24,160
online uh

00:58:20,839 --> 00:58:26,400
maybe let us know

00:58:24,160 --> 00:58:27,359
and worry worry the details would be

00:58:26,400 --> 00:58:30,480
worried about the

00:58:27,359 --> 00:58:34,240
flip camera developers

00:58:30,480 --> 00:58:37,119
uh so yeah this is a

00:58:34,240 --> 00:58:39,119
reply on a mailing list web camera not

00:58:37,119 --> 00:58:42,319
recognized by a dell attitude

00:58:39,119 --> 00:58:45,839
or this specific model because it was

00:58:42,319 --> 00:58:48,480
shipped with an ipo 3 camera

00:58:45,839 --> 00:58:49,119
the reply was laptops i will just read

00:58:48,480 --> 00:58:51,440
it out

00:58:49,119 --> 00:58:52,160
embeds one of these new complex cameras

00:58:51,440 --> 00:58:55,119
from intel

00:58:52,160 --> 00:58:57,680
they require ipo3 driver though unlike

00:58:55,119 --> 00:58:59,760
traditional webcam you need special user

00:58:57,680 --> 00:59:01,359
user space to use it there is no

00:58:59,760 --> 00:59:05,520
embedded firmware to manage

00:59:01,359 --> 00:59:07,440
focus white balance etc user space code

00:59:05,520 --> 00:59:09,359
need to read the stats and manage that

00:59:07,440 --> 00:59:11,760
as of now there is a no good

00:59:09,359 --> 00:59:13,040
plan on how to support this as your user

00:59:11,760 --> 00:59:16,799
space

00:59:13,040 --> 00:59:18,799
so i i hope you have uh pretty much

00:59:16,799 --> 00:59:22,079
understood what what the what is the

00:59:18,799 --> 00:59:22,079
problem we are dealing with here

00:59:22,319 --> 00:59:25,920
uh so yeah uh that that was the

00:59:24,720 --> 00:59:28,400
motivation

00:59:25,920 --> 00:59:29,440
or the background for which the lip

00:59:28,400 --> 00:59:33,040
camera has been

00:59:29,440 --> 00:59:35,599
started uh it

00:59:33,040 --> 00:59:37,680
is being actively developed by linux

00:59:35,599 --> 00:59:41,359
media folks

00:59:37,680 --> 00:59:44,079
uh and yeah some uh

00:59:41,359 --> 00:59:44,799
other consulting firms as well uh very

00:59:44,079 --> 00:59:48,160
specific

00:59:44,799 --> 00:59:50,319
to related to the needs so

00:59:48,160 --> 00:59:52,640
let's get into that lip camera is a

00:59:50,319 --> 00:59:54,640
complete use based camera stack

00:59:52,640 --> 00:59:56,720
it abstracts away all the complexities

00:59:54,640 --> 00:59:59,040
as we discussed about v4 l2 media

00:59:56,720 --> 01:00:02,000
controller hardware topology

00:59:59,040 --> 01:00:02,960
everything uh it aims to be compatible

01:00:02,000 --> 01:00:06,559
with already

01:00:02,960 --> 01:00:09,520
written media applications uh v4

01:00:06,559 --> 01:00:10,079
2 based application and aims to like

01:00:09,520 --> 01:00:13,760
provide

01:00:10,079 --> 01:00:14,720
a layer so that we can it can be used on

01:00:13,760 --> 01:00:17,839
android and

01:00:14,720 --> 01:00:19,920
chrome os uh

01:00:17,839 --> 01:00:21,040
already we had a good amount of

01:00:19,920 --> 01:00:24,240
documentation

01:00:21,040 --> 01:00:24,720
we have application developer and

01:00:24,240 --> 01:00:27,040
pipeline

01:00:24,720 --> 01:00:27,920
piper handle that we will discuss and

01:00:27,040 --> 01:00:30,319
sap a

01:00:27,920 --> 01:00:31,680
couple of sample applications that we

01:00:30,319 --> 01:00:35,119
use for testing and

01:00:31,680 --> 01:00:38,960
basic dog fooding so you can just uh

01:00:35,119 --> 01:00:42,559
try them out and see for yourself

01:00:38,960 --> 01:00:43,680
uh now let's okay we are mail-based

01:00:42,559 --> 01:00:46,160
development i know

01:00:43,680 --> 01:00:47,680
uh mailing this first pack patchwork

01:00:46,160 --> 01:00:50,960
basically i think uh that's

01:00:47,680 --> 01:00:54,240
the uh workflow the

01:00:50,960 --> 01:00:56,880
linux media remain were

01:00:54,240 --> 01:00:58,720
comfortable so they started with that we

01:00:56,880 --> 01:01:01,359
used my son and ninja

01:00:58,720 --> 01:01:02,960
and it's quite like it might sound

01:01:01,359 --> 01:01:05,760
complex but uh as of

01:01:02,960 --> 01:01:06,960
uh this talk goes you will find uh it's

01:01:05,760 --> 01:01:09,359
it's not a very

01:01:06,960 --> 01:01:10,079
uh like i come from a background where i

01:01:09,359 --> 01:01:12,160
have

01:01:10,079 --> 01:01:14,799
haven't done much linux development

01:01:12,160 --> 01:01:17,920
mostly i was working in user space

01:01:14,799 --> 01:01:21,119
but the community and people are

01:01:17,920 --> 01:01:22,160
very friendly very newcomers friendly so

01:01:21,119 --> 01:01:24,720
i think

01:01:22,160 --> 01:01:27,280
if you plan to contribute please uh

01:01:24,720 --> 01:01:30,799
check check it out

01:01:27,280 --> 01:01:32,640
uh let's talk about uh

01:01:30,799 --> 01:01:34,480
complex cameras debate there are a

01:01:32,640 --> 01:01:37,599
couple of uh if you want to get

01:01:34,480 --> 01:01:39,280
more into the problem space

01:01:37,599 --> 01:01:41,040
specifically the problem space why

01:01:39,280 --> 01:01:43,040
embedded cameras are difficult

01:01:41,040 --> 01:01:45,680
and like complex cameras on linux these

01:01:43,040 --> 01:01:48,720
are the three talks i would recommend

01:01:45,680 --> 01:01:51,440
you can check them out uh simply

01:01:48,720 --> 01:01:52,240
searching for them on the youtube uh

01:01:51,440 --> 01:01:54,079
they are

01:01:52,240 --> 01:01:55,680
a personal favorite of mine and

01:01:54,079 --> 01:01:59,680
basically help this

01:01:55,680 --> 01:01:59,680
talk that i'm delivering right now

01:02:04,839 --> 01:02:07,839
okay

01:02:10,240 --> 01:02:17,599
okay so here is the entire camera stack

01:02:14,559 --> 01:02:18,559
of bird's eye view uh so you can see

01:02:17,599 --> 01:02:20,559
that kernel space

01:02:18,559 --> 01:02:23,119
already has like a media device video

01:02:20,559 --> 01:02:24,960
device uh and v42 sub dev

01:02:23,119 --> 01:02:26,319
the lip camera will interact and

01:02:24,960 --> 01:02:30,720
abstract all of this

01:02:26,319 --> 01:02:33,440
for applications uh we would have uh we

01:02:30,720 --> 01:02:35,839
will we have a v4 i2 compatibility layer

01:02:33,440 --> 01:02:38,400
so existing application can work on it

01:02:35,839 --> 01:02:42,400
we also have g streamer element

01:02:38,400 --> 01:02:44,640
that it can use we as of now don't have

01:02:42,400 --> 01:02:47,680
like language bindings but there is

01:02:44,640 --> 01:02:48,799
a i think a discussion going on and we

01:02:47,680 --> 01:02:50,799
would start with

01:02:48,799 --> 01:02:52,160
python so basically just to mention lip

01:02:50,799 --> 01:02:55,200
camera is being developed

01:02:52,160 --> 01:02:58,480
in c plus plus uh

01:02:55,200 --> 01:03:03,359
yeah uh so i think uh uh

01:02:58,480 --> 01:03:05,920
for now c plus plus uh would be a strong

01:03:03,359 --> 01:03:07,119
association uh if there is any

01:03:05,920 --> 01:03:09,359
application you want to

01:03:07,119 --> 01:03:10,559
any application wants to use it uh but

01:03:09,359 --> 01:03:12,400
yeah shortly

01:03:10,559 --> 01:03:14,559
you should look out there is a plan

01:03:12,400 --> 01:03:18,240
already planned for language

01:03:14,559 --> 01:03:20,720
bindings and we also have a android

01:03:18,240 --> 01:03:21,599
uh camera have a hardware extraction

01:03:20,720 --> 01:03:25,119
layer

01:03:21,599 --> 01:03:28,640
which is uh which sort of decently works

01:03:25,119 --> 01:03:28,640
on the chromium os as well

01:03:28,799 --> 01:03:35,680
so this is the bird's eye view for

01:03:32,160 --> 01:03:36,720
for a lip camera and now i think we will

01:03:35,680 --> 01:03:39,839
go into

01:03:36,720 --> 01:03:43,760
a lip camera or architecture

01:03:39,839 --> 01:03:45,920
so at the top is the public api uh

01:03:43,760 --> 01:03:47,280
which will uh which the applications

01:03:45,920 --> 01:03:49,520
will interact

01:03:47,280 --> 01:03:50,480
at the core lift camera has a device

01:03:49,520 --> 01:03:53,680
manager which

01:03:50,480 --> 01:03:54,240
will uh start and enumerate it will find

01:03:53,680 --> 01:03:56,640
all the

01:03:54,240 --> 01:03:58,799
camera video capture devices attached to

01:03:56,640 --> 01:04:04,000
your systems and expose

01:03:58,799 --> 01:04:07,599
a camera device objects that you can use

01:04:04,000 --> 01:04:10,000
we have state machines so basically to

01:04:07,599 --> 01:04:11,760
track what is the status of the camera

01:04:10,000 --> 01:04:14,160
it's running it's stopped or

01:04:11,760 --> 01:04:15,359
it's in configure state or something

01:04:14,160 --> 01:04:18,079
like that

01:04:15,359 --> 01:04:20,160
uh we have streams what streams are

01:04:18,079 --> 01:04:22,640
supported by the camera

01:04:20,160 --> 01:04:23,440
what role do you want to like you want

01:04:22,640 --> 01:04:26,559
to

01:04:23,440 --> 01:04:28,559
use for video video capture or you want

01:04:26,559 --> 01:04:31,599
to use for a still capture

01:04:28,559 --> 01:04:35,680
so uh depending on that uh the

01:04:31,599 --> 01:04:38,799
the uh device uh the camera device will

01:04:35,680 --> 01:04:42,480
give you uh best suited streams uh

01:04:38,799 --> 01:04:44,720
and at which an associated resolution

01:04:42,480 --> 01:04:45,680
and you of course have access control so

01:04:44,720 --> 01:04:49,039
that

01:04:45,680 --> 01:04:50,160
no two applications simultaneously asks

01:04:49,039 --> 01:04:53,440
for

01:04:50,160 --> 01:04:53,440
uh the camera

01:04:53,520 --> 01:05:00,400
at the same time uh so this part is

01:04:57,119 --> 01:05:01,760
uh device agnostic uh this is uh

01:05:00,400 --> 01:05:04,000
this has nothing to do with the

01:05:01,760 --> 01:05:05,280
underlying hardware and all the device

01:05:04,000 --> 01:05:09,680
specific stuff

01:05:05,280 --> 01:05:12,640
goes into a pipeline handler which will

01:05:09,680 --> 01:05:15,119
do all the things uh video notes media

01:05:12,640 --> 01:05:17,839
controller stuff

01:05:15,119 --> 01:05:18,480
and setup pipeline setup the flow in

01:05:17,839 --> 01:05:21,280
which

01:05:18,480 --> 01:05:22,960
the data data flow was intended to be

01:05:21,280 --> 01:05:24,960
because you have different right

01:05:22,960 --> 01:05:27,280
rockchip would have a different pipeline

01:05:24,960 --> 01:05:28,000
handler and rather than a raspberry pi

01:05:27,280 --> 01:05:30,799
one

01:05:28,000 --> 01:05:32,160
so you will have a raspberry pi pi

01:05:30,799 --> 01:05:35,119
pipeline handler and you

01:05:32,160 --> 01:05:36,400
will have a different rockchip pipeline

01:05:35,119 --> 01:05:41,200
handler so all the def

01:05:36,400 --> 01:05:44,400
uh device specific stuff goes here

01:05:41,200 --> 01:05:46,079
and uh the device manager is smart

01:05:44,400 --> 01:05:47,920
enough to figure out what the platform

01:05:46,079 --> 01:05:50,880
is and use the appropriate

01:05:47,920 --> 01:05:52,160
pipeline handler and mind you like

01:05:50,880 --> 01:05:55,119
pipeline handlers are

01:05:52,160 --> 01:05:56,720
a bit complex in a way like uh camera

01:05:55,119 --> 01:05:57,920
objects can be different but they can

01:05:56,720 --> 01:06:00,960
use the same

01:05:57,920 --> 01:06:04,079
uh isp uh on the hardware

01:06:00,960 --> 01:06:07,280
so uh no

01:06:04,079 --> 01:06:09,440
two cameras uh like uh one uh

01:06:07,280 --> 01:06:10,880
will gain exclusive use of the pipeline

01:06:09,440 --> 01:06:14,720
handlers

01:06:10,880 --> 01:06:17,039
uh another thing is uh image processing

01:06:14,720 --> 01:06:18,240
algorithms which is also very device

01:06:17,039 --> 01:06:21,760
specific

01:06:18,240 --> 01:06:25,119
and this is shown in a blue kind of box

01:06:21,760 --> 01:06:27,599
which is which shows the uh

01:06:25,119 --> 01:06:30,640
sandboxing because image processing

01:06:27,599 --> 01:06:34,319
algorithms or three years as we talked

01:06:30,640 --> 01:06:38,000
are very vendor specific and uh

01:06:34,319 --> 01:06:41,200
vendors might um might

01:06:38,000 --> 01:06:44,960
need to protect that core ip

01:06:41,200 --> 01:06:47,760
uh so lip camera already has uh

01:06:44,960 --> 01:06:49,119
has been developed with that uh frame uh

01:06:47,760 --> 01:06:53,200
in mind

01:06:49,119 --> 01:06:56,480
uh so we are lgbl lip cameras lgpl

01:06:53,200 --> 01:06:59,520
uh so that we don't tie into

01:06:56,480 --> 01:07:03,200
some binary blob uh uh

01:06:59,520 --> 01:07:06,480
in the future uh so it has been designed

01:07:03,200 --> 01:07:08,400
in such a way uh and you have some uh

01:07:06,480 --> 01:07:10,559
helpers and support club buffer

01:07:08,400 --> 01:07:12,799
allocators pipeline runners and

01:07:10,559 --> 01:07:16,319
debugging and login which are

01:07:12,799 --> 01:07:18,720
i think uh if you plan to develop these

01:07:16,319 --> 01:07:21,440
will become obvious if you read uh the

01:07:18,720 --> 01:07:21,440
documentation

01:07:22,400 --> 01:07:28,559
uh uh yeah so platform supported by lip

01:07:26,559 --> 01:07:31,760
camera as of now we have

01:07:28,559 --> 01:07:35,280
uvc like your usb webcams

01:07:31,760 --> 01:07:37,920
ipo 3 is supported rock chip vmc which

01:07:35,280 --> 01:07:39,200
is a test driver and we do a lot of

01:07:37,920 --> 01:07:43,920
testing

01:07:39,200 --> 01:07:45,599
uh like for uh not have not uh

01:07:43,920 --> 01:07:47,330
if we don't have some hardware or

01:07:45,599 --> 01:07:49,280
something uh

01:07:47,330 --> 01:07:53,039
[Music]

01:07:49,280 --> 01:07:56,160
and uh for raspberry pi uh we also

01:07:53,039 --> 01:08:00,480
have uh working with raspberry pi folks

01:07:56,160 --> 01:08:05,280
for the uh for the support

01:08:00,480 --> 01:08:05,280
uh in lip camera uh

01:08:06,000 --> 01:08:09,359
lip camera api so let's talk about uh

01:08:08,720 --> 01:08:12,799
something

01:08:09,359 --> 01:08:15,359
uh which is the core uh

01:08:12,799 --> 01:08:17,520
of this talk uh i want to just give an

01:08:15,359 --> 01:08:19,279
overview how the api and how would uh

01:08:17,520 --> 01:08:21,359
application would interact with lip

01:08:19,279 --> 01:08:24,480
camera so

01:08:21,359 --> 01:08:26,719
basically five things we have camera

01:08:24,480 --> 01:08:28,880
manager we talked about a little bit

01:08:26,719 --> 01:08:30,560
which will do the camera enumeration

01:08:28,880 --> 01:08:31,920
which will find all the devices attached

01:08:30,560 --> 01:08:35,120
to your system

01:08:31,920 --> 01:08:37,440
then we have camera configuration

01:08:35,120 --> 01:08:38,560
which will just set up the camera

01:08:37,440 --> 01:08:41,600
prepare it for

01:08:38,560 --> 01:08:42,560
for the intended use we have config

01:08:41,600 --> 01:08:45,359
validation

01:08:42,560 --> 01:08:46,080
uh like if the application has specific

01:08:45,359 --> 01:08:48,799
requests

01:08:46,080 --> 01:08:50,080
suppose an application wants to capture

01:08:48,799 --> 01:08:52,960
a specific

01:08:50,080 --> 01:08:54,719
format or a specific structure at

01:08:52,960 --> 01:08:56,880
specific resolution

01:08:54,719 --> 01:08:58,799
the application can request it through

01:08:56,880 --> 01:09:01,040
the configuration and

01:08:58,799 --> 01:09:02,560
it will be sent back to the camera for

01:09:01,040 --> 01:09:04,880
that validation

01:09:02,560 --> 01:09:06,319
after that process happens it's just

01:09:04,880 --> 01:09:09,759
allocating same some

01:09:06,319 --> 01:09:12,799
buffers for the data being written and

01:09:09,759 --> 01:09:17,759
finally we have the frame capture so

01:09:12,799 --> 01:09:17,759
let's try to map it out a bit into the

01:09:18,839 --> 01:09:21,839
code

01:09:24,960 --> 01:09:29,920
yeah camera enumeration camera manager

01:09:27,920 --> 01:09:31,359
we have we make a new camera manager we

01:09:29,920 --> 01:09:34,319
start the camera manager

01:09:31,359 --> 01:09:36,080
which will like set up pipelines set up

01:09:34,319 --> 01:09:39,359
find all the devices

01:09:36,080 --> 01:09:42,880
uh and make camera objects

01:09:39,359 --> 01:09:46,080
and you can you can retrieve the camera

01:09:42,880 --> 01:09:48,560
from camera managers with the cameras uh

01:09:46,080 --> 01:09:49,359
api we just iterate over them and we

01:09:48,560 --> 01:09:52,880
just print

01:09:49,359 --> 01:09:56,080
an id so a

01:09:52,880 --> 01:09:56,080
camera animation

01:10:01,120 --> 01:10:05,280
let's talk about camera configuration

01:10:02,719 --> 01:10:08,080
after we have uh got the cameras we

01:10:05,280 --> 01:10:09,920
select the first camera we have so zero

01:10:08,080 --> 01:10:13,199
is the first camera suppose

01:10:09,920 --> 01:10:15,600
uh we get a pointer to it we acquire a

01:10:13,199 --> 01:10:16,400
camera so this is an exclusive log once

01:10:15,600 --> 01:10:19,520
a camera

01:10:16,400 --> 01:10:22,719
has been acquired no other application

01:10:19,520 --> 01:10:26,480
will be granted access to that camera

01:10:22,719 --> 01:10:26,480
for the time until it is released

01:10:26,880 --> 01:10:31,440
so after the camera has been acquired it

01:10:29,280 --> 01:10:33,360
is just um

01:10:31,440 --> 01:10:34,719
we would generate a configuration and

01:10:33,360 --> 01:10:37,520
for the configuration we

01:10:34,719 --> 01:10:38,159
specify a stream role stream role is

01:10:37,520 --> 01:10:41,120
basically

01:10:38,159 --> 01:10:43,600
is what's the intent of the use so

01:10:41,120 --> 01:10:46,480
basically you can

01:10:43,600 --> 01:10:47,120
tell it's a still capture or it's a raw

01:10:46,480 --> 01:10:50,640
capture

01:10:47,120 --> 01:10:51,760
or it's a video capture or something

01:10:50,640 --> 01:10:54,880
else

01:10:51,760 --> 01:10:56,560
uh so accordingly uh the camera will

01:10:54,880 --> 01:11:00,960
generate a configuration

01:10:56,560 --> 01:11:00,960
uh and store it in conflict

01:11:02,960 --> 01:11:06,000
uh now comes the validation part so

01:11:05,520 --> 01:11:08,719
after

01:11:06,000 --> 01:11:09,679
a configuration has been uh camera

01:11:08,719 --> 01:11:12,719
configuration

01:11:09,679 --> 01:11:14,080
has been uh stored so

01:11:12,719 --> 01:11:16,480
what it contains is a stream

01:11:14,080 --> 01:11:17,120
configuration so stream configuration is

01:11:16,480 --> 01:11:20,400
nothing but

01:11:17,120 --> 01:11:22,960
a specific uh configuration for

01:11:20,400 --> 01:11:24,800
each stream load like you can ask for

01:11:22,960 --> 01:11:26,800
multiple stream roles or

01:11:24,800 --> 01:11:29,280
other streamers so each will have a

01:11:26,800 --> 01:11:32,960
specific stream configuration

01:11:29,280 --> 01:11:34,800
and uh you can uh suppose uh this is the

01:11:32,960 --> 01:11:35,840
stream configuration the camera has

01:11:34,800 --> 01:11:38,480
given you

01:11:35,840 --> 01:11:40,159
and default still capture configuration

01:11:38,480 --> 01:11:43,199
so this is the default one so if

01:11:40,159 --> 01:11:46,400
if i print this out you it will tell me

01:11:43,199 --> 01:11:49,520
it will capture at uh 1280

01:11:46,400 --> 01:11:53,120
or 720 the uh

01:11:49,520 --> 01:11:55,840
resolution with the format being mjpeg

01:11:53,120 --> 01:11:57,520
and uh uh let's say i'm not satisfied

01:11:55,840 --> 01:12:00,480
with this configuration so

01:11:57,520 --> 01:12:00,960
i can uh i as an application developer

01:12:00,480 --> 01:12:04,480
can

01:12:00,960 --> 01:12:07,199
write uh let's see uh i will give

01:12:04,480 --> 01:12:08,800
uh i want to capture at width 640 and

01:12:07,199 --> 01:12:12,080
height 480

01:12:08,800 --> 01:12:14,320
so i will just try to amend these two

01:12:12,080 --> 01:12:15,920
parameters and again i will try to

01:12:14,320 --> 01:12:19,840
validate the conflict

01:12:15,920 --> 01:12:21,760
so what happens here is if if

01:12:19,840 --> 01:12:24,159
if the camera can provide this

01:12:21,760 --> 01:12:24,400
resolution it will just simply validate

01:12:24,159 --> 01:12:27,600
it

01:12:24,400 --> 01:12:30,239
if it doesn't uh it

01:12:27,600 --> 01:12:30,880
will give the nearest uh configuration

01:12:30,239 --> 01:12:33,280
so suppose

01:12:30,880 --> 01:12:35,840
if this is not supported here then a

01:12:33,280 --> 01:12:38,960
lower one is supported for

01:12:35,840 --> 01:12:42,080
320 into 180 so it will just try to

01:12:38,960 --> 01:12:44,719
amend this and give you 320 and 180

01:12:42,080 --> 01:12:46,000
or similarly or if you go higher it will

01:12:44,719 --> 01:12:48,880
try to get it but

01:12:46,000 --> 01:12:51,840
if it doesn't have it will just keep it

01:12:48,880 --> 01:12:51,840
as default

01:12:56,000 --> 01:13:01,440
sorry uh after the configuration

01:12:59,520 --> 01:13:03,040
phase has happened we will just allocate

01:13:01,440 --> 01:13:06,880
some buffers

01:13:03,040 --> 01:13:08,800
so you can use your own allocator or lip

01:13:06,880 --> 01:13:10,960
cameras provides one for you

01:13:08,800 --> 01:13:13,840
it's a frame buffer allocator it will

01:13:10,960 --> 01:13:15,600
iterate over the stream configuration

01:13:13,840 --> 01:13:17,280
you can like a camera can ask for

01:13:15,600 --> 01:13:20,320
multiple streams uh as

01:13:17,280 --> 01:13:21,199
we talked about so basically uh i can

01:13:20,320 --> 01:13:24,640
ask for

01:13:21,199 --> 01:13:28,400
a stream where i want to look

01:13:24,640 --> 01:13:29,360
look at the camera is just streaming all

01:13:28,400 --> 01:13:31,760
the frames

01:13:29,360 --> 01:13:33,280
but i want at a click of a button i want

01:13:31,760 --> 01:13:36,320
a frame to be saved to

01:13:33,280 --> 01:13:38,960
a to a disk so camera can ask for

01:13:36,320 --> 01:13:40,400
like something like np12 and mjpeg so

01:13:38,960 --> 01:13:43,199
nv12 will

01:13:40,400 --> 01:13:44,960
just keep the stream going on in my

01:13:43,199 --> 01:13:47,600
application window and when i hit

01:13:44,960 --> 01:13:48,719
like capture uh it will just use the m

01:13:47,600 --> 01:13:50,880
jpeg stream

01:13:48,719 --> 01:13:52,159
and capture that frame in m jpeg and

01:13:50,880 --> 01:13:54,480
save it to the disk

01:13:52,159 --> 01:13:55,360
so you know in a way like application

01:13:54,480 --> 01:13:58,719
can ask

01:13:55,360 --> 01:14:01,679
multiple from the camera itself so for

01:13:58,719 --> 01:14:02,159
each stream you have to allocate buffers

01:14:01,679 --> 01:14:04,719
uh

01:14:02,159 --> 01:14:07,040
so it will we will iterate from the

01:14:04,719 --> 01:14:08,480
configuration we would iterate on each

01:14:07,040 --> 01:14:11,840
stream configuration and

01:14:08,480 --> 01:14:14,800
allocate buffers uh

01:14:11,840 --> 01:14:15,760
it simply allocates uh like required

01:14:14,800 --> 01:14:18,960
number of buffers

01:14:15,760 --> 01:14:22,480
it thinks it can but i am sure you can

01:14:18,960 --> 01:14:22,880
specify your own uh set of requirements

01:14:22,480 --> 01:14:28,239
as well

01:14:22,880 --> 01:14:30,480
for the buffer allocation

01:14:28,239 --> 01:14:32,080
now comes the frame capture part so

01:14:30,480 --> 01:14:35,520
after allocating buffers

01:14:32,080 --> 01:14:36,640
you uh you can create a request to the

01:14:35,520 --> 01:14:40,080
camera

01:14:36,640 --> 01:14:42,400
uh where request is at least one stream

01:14:40,080 --> 01:14:44,400
like one stream from the stream

01:14:42,400 --> 01:14:44,960
configuration and the frame buffer you

01:14:44,400 --> 01:14:47,040
have got

01:14:44,960 --> 01:14:48,880
uh like from the previous slide so

01:14:47,040 --> 01:14:50,960
request is nothing but one stream

01:14:48,880 --> 01:14:52,239
one buffer and you just queue it to the

01:14:50,960 --> 01:14:55,840
camera

01:14:52,239 --> 01:14:56,640
after after the request are queued to

01:14:55,840 --> 01:14:59,679
the camera you

01:14:56,640 --> 01:15:03,440
just run camera start and it will start

01:14:59,679 --> 01:15:06,159
uh writing data to the those buffers

01:15:03,440 --> 01:15:06,560
and after uh like where how do you know

01:15:06,159 --> 01:15:08,640
like

01:15:06,560 --> 01:15:10,960
when the buffer is full because you will

01:15:08,640 --> 01:15:13,120
know when the camera has

01:15:10,960 --> 01:15:14,560
uh emitted the request completed signal

01:15:13,120 --> 01:15:18,480
and thereafter in the

01:15:14,560 --> 01:15:20,159
signal handler you can just go and uh

01:15:18,480 --> 01:15:22,880
take out the buffers from the request

01:15:20,159 --> 01:15:27,199
object and simply you can

01:15:22,880 --> 01:15:29,840
just do like your frame capture is

01:15:27,199 --> 01:15:29,840
then complete

01:15:30,800 --> 01:15:34,640
uh lip camera sample applications we

01:15:33,360 --> 01:15:36,960
have we use a cam

01:15:34,640 --> 01:15:38,480
utility which is a swiss knife it's a

01:15:36,960 --> 01:15:40,159
testing tool it's

01:15:38,480 --> 01:15:42,000
but it's uh it has got all the

01:15:40,159 --> 01:15:45,360
configuration options

01:15:42,000 --> 01:15:48,239
we have qcam qt based queue

01:15:45,360 --> 01:15:50,560
gui application we also have simple cam

01:15:48,239 --> 01:15:52,640
if you just want to read

01:15:50,560 --> 01:15:54,239
like the minimal reference code as we

01:15:52,640 --> 01:15:56,480
did just right now

01:15:54,239 --> 01:15:57,280
so you can just look at the simple cam

01:15:56,480 --> 01:16:00,560
uh and try

01:15:57,280 --> 01:16:01,679
running it and reading it's over

01:16:00,560 --> 01:16:04,560
commented

01:16:01,679 --> 01:16:05,520
so you will have a good grasp on how to

01:16:04,560 --> 01:16:08,719
write a

01:16:05,520 --> 01:16:10,080
application with lip camera there is

01:16:08,719 --> 01:16:12,000
decent documentation

01:16:10,080 --> 01:16:16,239
and app developers guide in the tree

01:16:12,000 --> 01:16:16,239
itself or you can also look into that

01:16:19,120 --> 01:16:23,960
so yeah please join uh lip camera is a

01:16:21,120 --> 01:16:27,520
young project it started around uh

01:16:23,960 --> 01:16:29,920
2018 maybe yeah i'm not trying to put

01:16:27,520 --> 01:16:34,719
yeah some weight around 2018

01:16:29,920 --> 01:16:37,520
uh dogs patches link uh we have of uh

01:16:34,719 --> 01:16:39,199
irc channel lift camera on free node and

01:16:37,520 --> 01:16:41,840
we welcome inputs from

01:16:39,199 --> 01:16:43,280
anyone working with cameras i think

01:16:41,840 --> 01:16:49,840
that's all for me

01:16:43,280 --> 01:16:49,840
and i guess i can take questions now

01:17:26,719 --> 01:17:33,040
hi thank you for your talk we have few

01:17:30,320 --> 01:17:35,440
questions from for you you can check

01:17:33,040 --> 01:17:45,840
those at the shared note

01:17:35,440 --> 01:17:45,840
section here in the big blue button

01:17:46,400 --> 01:17:52,719
yeah i see the questions uh will it be

01:17:49,360 --> 01:17:54,000
possible to use ipo cameras from v4l to

01:17:52,719 --> 01:17:58,160
then

01:17:54,000 --> 01:17:59,840
uh yes i think so it can be used um

01:17:58,160 --> 01:18:02,480
[Music]

01:17:59,840 --> 01:18:02,480
but uh

01:18:03,120 --> 01:18:10,320
i i uh v4 l2 you will have also have to

01:18:07,280 --> 01:18:14,640
tackle the media controller api from the

01:18:10,320 --> 01:18:14,640
kernel itself and

01:18:16,320 --> 01:18:19,679
is it to be done with fallback devices

01:18:18,560 --> 01:18:21,600
i'm not sure

01:18:19,679 --> 01:18:23,679
i understand what you mean by fallback

01:18:21,600 --> 01:18:25,760
devices

01:18:23,679 --> 01:18:29,280
uh doesn't interact with tools like g

01:18:25,760 --> 01:18:29,280
streamer yes we have our

01:18:29,520 --> 01:18:33,600
element g streamer element uh and i

01:18:32,400 --> 01:18:36,719
think uh there's

01:18:33,600 --> 01:18:38,640
uh good support uh because it was

01:18:36,719 --> 01:18:41,760
written by g streamer developers

01:18:38,640 --> 01:18:42,159
so and pipe fire pipe fire i think there

01:18:41,760 --> 01:18:46,080
is

01:18:42,159 --> 01:18:46,080
some work in progress going on

01:18:46,320 --> 01:18:52,560
uh regarding pipe fire so basically

01:18:49,440 --> 01:18:53,280
uh as far as i know pipe wire likes to

01:18:52,560 --> 01:18:56,320
ask

01:18:53,280 --> 01:18:58,880
the system resources up front

01:18:56,320 --> 01:19:00,640
but lip camera what it does it's it's

01:18:58,880 --> 01:19:03,679
allocate resources on the fly

01:19:00,640 --> 01:19:07,520
so there is like a some bit of

01:19:03,679 --> 01:19:10,960
mismatch uh that we don't have

01:19:07,520 --> 01:19:14,320
like a robust support as of now but

01:19:10,960 --> 01:19:15,679
i think uh uh

01:19:14,320 --> 01:19:18,719
there was a discussion on the mailing

01:19:15,679 --> 01:19:22,159
list as far as i know so it's still

01:19:18,719 --> 01:19:24,239
um i think

01:19:22,159 --> 01:19:25,840
some people will bash their heads on it

01:19:24,239 --> 01:19:29,360
as well

01:19:25,840 --> 01:19:32,880
uh will chromium firefox support this

01:19:29,360 --> 01:19:36,480
um i hope so chromium

01:19:32,880 --> 01:19:39,760
we are working with chromium developers

01:19:36,480 --> 01:19:41,740
uh for chromium os so that's the first

01:19:39,760 --> 01:19:43,120
uh uh

01:19:41,740 --> 01:19:46,480
[Music]

01:19:43,120 --> 01:19:49,520
part to make it work there uh

01:19:46,480 --> 01:19:52,480
and i hope uh if if you have like

01:19:49,520 --> 01:19:53,840
in the chromium os there is like a it

01:19:52,480 --> 01:19:57,040
goes into as a

01:19:53,840 --> 01:19:59,600
shared library so if you just replace it

01:19:57,040 --> 01:20:00,159
with with what uh chromium os ships the

01:19:59,600 --> 01:20:02,080
browser

01:20:00,159 --> 01:20:04,719
the native camera app will start using

01:20:02,080 --> 01:20:07,920
the camera so

01:20:04,719 --> 01:20:08,639
yeah i'm not sure of firefox size i have

01:20:07,920 --> 01:20:12,560
not been

01:20:08,639 --> 01:20:19,840
uh actively uh

01:20:12,560 --> 01:20:19,840
engaged in firefox development

01:20:44,480 --> 01:20:48,719
it looks like that's all the questions

01:20:46,239 --> 01:20:49,520
we have um i'd like to thank you very

01:20:48,719 --> 01:20:53,840
much for

01:20:49,520 --> 01:20:56,880
your talk and i hope everyone enjoyed it

01:20:53,840 --> 01:21:00,960
we'll be back in just a few minutes for

01:20:56,880 --> 01:21:04,560
our next talk

01:21:00,960 --> 01:21:04,560
thank you very much and thanks for the

01:21:12,840 --> 01:21:15,840
questions

01:24:42,320 --> 01:24:45,840
hello what's up can you hear me

01:24:59,600 --> 01:25:06,080
i'm checking with our next speaker

01:25:02,639 --> 01:25:08,480
since he had some issues okay

01:25:06,080 --> 01:25:08,480
perfect

01:25:10,400 --> 01:25:13,840
thank you

01:28:10,400 --> 01:28:16,400
can you hear me yes we can

01:28:17,199 --> 01:28:29,679
see me

01:28:28,400 --> 01:28:30,880
are you are you uploading the

01:28:29,679 --> 01:28:33,600
presentation do you have any

01:28:30,880 --> 01:28:37,120
difficulties with that

01:28:33,600 --> 01:28:43,840
uh no but uh now i'm

01:28:37,120 --> 01:28:43,840
trying for camera

01:28:54,840 --> 01:28:57,840
huh

01:29:50,840 --> 01:29:53,840
uh

01:29:58,800 --> 01:30:08,639
no we cannot see you on oh wait sorry

01:30:03,920 --> 01:30:11,280
no i think it's loading yes perfect

01:30:08,639 --> 01:30:11,280
okay thank you

01:30:13,760 --> 01:30:17,760
i will upload the presentation now right

01:30:18,840 --> 01:30:21,840
now

01:31:14,840 --> 01:31:17,840
uh

01:31:28,840 --> 01:31:31,840
uh

01:31:42,840 --> 01:31:45,840
um

01:32:38,840 --> 01:32:41,840
uh

01:32:52,840 --> 01:32:55,840
do

01:34:30,840 --> 01:34:33,840
um

01:34:44,840 --> 01:34:47,840
hello

01:37:18,840 --> 01:37:21,840
oh

01:37:26,080 --> 01:37:32,960
so hello we're back again

01:37:29,280 --> 01:37:36,000
our next presenter for today's

01:37:32,960 --> 01:37:37,360
musta mossab talk about rtl experience

01:37:36,000 --> 01:37:40,080
in linux

01:37:37,360 --> 01:37:40,080
take it away

01:37:43,360 --> 01:37:50,000
good morning everyone i am here

01:37:47,360 --> 01:37:52,639
to talking to you about rtl experience

01:37:50,000 --> 01:37:52,639
and linux

01:37:53,520 --> 01:38:00,560
hello we're back again our

01:37:56,880 --> 01:38:00,560
next presenter for today's

01:38:00,840 --> 01:38:03,840
um

01:38:08,080 --> 01:38:18,400
yes good morning everyone

01:38:13,440 --> 01:38:18,400
i am here to talk to you about rtl

01:38:28,840 --> 01:38:31,840
experience

01:38:33,280 --> 01:38:36,400
okay you heard me

01:38:36,880 --> 01:38:41,440
hi yes we can hear you but if you have

01:38:39,360 --> 01:38:44,400
any other tabs with sound open can you

01:38:41,440 --> 01:38:47,520
please close them

01:38:44,400 --> 01:38:50,480
okay okay

01:38:47,520 --> 01:38:52,880
today we will talking about the right to

01:38:50,480 --> 01:38:56,800
lift experience and linux

01:38:52,880 --> 01:38:59,119
uh right to lift is not just a ui

01:38:56,800 --> 01:39:00,239
or something like that it's just a way

01:38:59,119 --> 01:39:04,080
to think

01:39:00,239 --> 01:39:07,280
a way to use a way to design it's a

01:39:04,080 --> 01:39:12,719
not just like a mirror as we we will see

01:39:07,280 --> 01:39:15,920
after after some time

01:39:12,719 --> 01:39:19,840
and linux the big issue

01:39:15,920 --> 01:39:23,440
is a way of designing and

01:39:19,840 --> 01:39:28,239
programming the ui components

01:39:23,440 --> 01:39:31,520
done by in general by a ltr

01:39:28,239 --> 01:39:34,800
designer so they use uh as

01:39:31,520 --> 01:39:38,480
ltr and they think it's good but

01:39:34,800 --> 01:39:42,239
this issues we we can

01:39:38,480 --> 01:39:46,080
we live with it as a an uh

01:39:42,239 --> 01:39:48,880
as an arabic user of linux so

01:39:46,080 --> 01:39:49,760
uh i will talk about that this and this

01:39:48,880 --> 01:39:53,280
summit

01:39:49,760 --> 01:39:57,760
and i will i hope

01:39:53,280 --> 01:40:00,080
the message will reach to you all of you

01:39:57,760 --> 01:40:00,080
okay

01:40:01,520 --> 01:40:08,480
we will talk about many things in

01:40:04,800 --> 01:40:11,600
this decision we will talk about

01:40:08,480 --> 01:40:14,560
the importance of rtl and

01:40:11,600 --> 01:40:15,119
the directing the directing and shaping

01:40:14,560 --> 01:40:18,000
also

01:40:15,119 --> 01:40:18,800
and some other components the main

01:40:18,000 --> 01:40:23,119
components

01:40:18,800 --> 01:40:25,840
or especially in kde

01:40:23,119 --> 01:40:25,840
and gino

01:40:29,520 --> 01:40:36,560
okay about me i am musad balzawi

01:40:33,360 --> 01:40:38,080
i am software engineer from university

01:40:36,560 --> 01:40:41,119
of brisbane from the

01:40:38,080 --> 01:40:44,719
medina in saudi arabia

01:40:41,119 --> 01:40:48,840
also i studied cyber security as a minor

01:40:44,719 --> 01:40:53,040
i developed in fedora since

01:40:48,840 --> 01:40:56,239
2013 till now and

01:40:53,040 --> 01:40:59,840
i am at the top of uh one

01:40:56,239 --> 01:41:03,040
one percent of the fedora badges ranking

01:40:59,840 --> 01:41:06,800
also i maintain audio os

01:41:03,040 --> 01:41:06,800
and linux arab community

01:41:10,800 --> 01:41:19,360
okay we will start for the importance of

01:41:15,840 --> 01:41:22,480
rtf languages

01:41:19,360 --> 01:41:25,760
in men it's arabic and ordo perchan

01:41:22,480 --> 01:41:28,880
and everyone the

01:41:25,760 --> 01:41:32,320
the importance of rtl

01:41:28,880 --> 01:41:36,480
especially if it's

01:41:32,320 --> 01:41:39,760
it's located in about a quarter of

01:41:36,480 --> 01:41:43,440
the world talking in rtl or needed

01:41:39,760 --> 01:41:46,480
or rtl the they

01:41:43,440 --> 01:41:49,920
they needed it as a muslims they

01:41:46,480 --> 01:41:54,239
need to read the an arabic or use rtl

01:41:49,920 --> 01:41:58,239
and also as i said the

01:41:54,239 --> 01:42:02,159
arabic and persian and hebrew needed it

01:41:58,239 --> 01:42:05,280
so when when we you use

01:42:02,159 --> 01:42:08,719
an uh an rtl session

01:42:05,280 --> 01:42:13,679
we use it as

01:42:08,719 --> 01:42:13,679
as of uh from the right to lift

01:42:16,800 --> 01:42:18,960
so

01:42:19,920 --> 01:42:23,920
if you see the map you can't see the

01:42:21,920 --> 01:42:27,360
importance of

01:42:23,920 --> 01:42:29,840
rtl in programming and you

01:42:27,360 --> 01:42:29,840
and using

01:42:35,360 --> 01:42:44,719
okay now we're talking about

01:42:40,639 --> 01:42:48,159
arabic language and reading and writing

01:42:44,719 --> 01:42:52,719
first of thing or first of all of at all

01:42:48,159 --> 01:42:55,840
the direction direction uh

01:42:52,719 --> 01:42:57,520
as we talking about it's from right to

01:42:55,840 --> 01:43:00,960
left

01:42:57,520 --> 01:43:03,520
but in the in arabic languages or

01:43:00,960 --> 01:43:04,880
right rift languages in general the

01:43:03,520 --> 01:43:10,320
every

01:43:04,880 --> 01:43:10,320
letter doesn't have the same shape

01:43:11,040 --> 01:43:16,960
in the world so when we start it's

01:43:14,159 --> 01:43:18,320
take a shape in the middle also take a

01:43:16,960 --> 01:43:22,880
shape

01:43:18,320 --> 01:43:28,239
and the final also take another shape so

01:43:22,880 --> 01:43:31,520
the shaping the the shaping

01:43:28,239 --> 01:43:35,600
of uh artillery languages as it takes

01:43:31,520 --> 01:43:39,679
uh more complex complicate complex than

01:43:35,600 --> 01:43:42,960
complicated than latin wars or

01:43:39,679 --> 01:43:45,760
left or right languages because we need

01:43:42,960 --> 01:43:49,119
a lot of work here

01:43:45,760 --> 01:43:52,320
the work works started by

01:43:49,119 --> 01:43:55,199
free video and heart buzz libraries

01:43:52,320 --> 01:43:56,320
and continue now with lib brocam

01:43:55,199 --> 01:43:59,920
librecomm is

01:43:56,320 --> 01:44:03,360
the i i think is the most mature

01:43:59,920 --> 01:44:06,639
library in in shaping

01:44:03,360 --> 01:44:09,840
arabic and

01:44:06,639 --> 01:44:13,199
other right-to-left languages as you see

01:44:09,840 --> 01:44:16,880
here the uh

01:44:13,199 --> 01:44:16,880
we can see letter f

01:44:19,040 --> 01:44:24,239
it's uh right it's not as

01:44:25,040 --> 01:44:35,840
as a single uh

01:44:28,159 --> 01:44:35,840
i can't pointer here

01:44:38,239 --> 01:44:40,560
okay

01:44:44,320 --> 01:44:49,840
here as you see

01:44:51,840 --> 01:44:59,920
the first letter of is

01:44:55,600 --> 01:44:59,920
as isolated let's take this

01:45:01,280 --> 01:45:05,199
i'll isolate it as take this shape also

01:45:03,920 --> 01:45:07,679
at the initial of the wall

01:45:05,199 --> 01:45:17,840
at the word let's take the shape and the

01:45:07,679 --> 01:45:17,840
medial and the final as you see

01:45:18,400 --> 01:45:25,280
so the very wrong issue in

01:45:22,239 --> 01:45:28,560
the very wrong

01:45:25,280 --> 01:45:32,159
thinking way and when we designing

01:45:28,560 --> 01:45:35,840
rtl it's not just like a mirror rtl

01:45:32,159 --> 01:45:40,159
more than a mirror is

01:45:35,840 --> 01:45:42,719
a way of thinking so not get

01:45:40,159 --> 01:45:45,840
the bottom from on right not get the

01:45:42,719 --> 01:45:45,840
three on the right not

01:45:46,480 --> 01:45:49,600
get the controller on right or

01:45:48,480 --> 01:45:52,639
components or right

01:45:49,600 --> 01:45:56,080
in general but we need to think as

01:45:52,639 --> 01:45:59,119
rtl so when we put the

01:45:56,080 --> 01:46:02,400
button on right it

01:45:59,119 --> 01:46:07,040
should should

01:46:02,400 --> 01:46:07,679
be as readable from right not only

01:46:07,040 --> 01:46:11,679
mirrored

01:46:07,679 --> 01:46:15,440
it's a it's a common issue we

01:46:11,679 --> 01:46:19,119
we can we we found

01:46:15,440 --> 01:46:22,320
in later time we found the

01:46:19,119 --> 01:46:22,320
embers time so

01:46:22,960 --> 01:46:27,840
the this

01:46:28,159 --> 01:46:34,800
this this point i put it as

01:46:31,520 --> 01:46:41,840
a single point a single

01:46:34,800 --> 01:46:41,840
single slide because it's so important

01:46:43,760 --> 01:46:47,840
okay now the we start with the the

01:46:47,199 --> 01:46:50,880
terminal

01:46:47,840 --> 01:46:51,520
issues three terminal issues is very

01:46:50,880 --> 01:46:56,159
common

01:46:51,520 --> 01:46:56,159
and with uh rtl users

01:46:56,719 --> 01:47:03,440
we have a guinness terminal and

01:46:59,920 --> 01:47:06,840
console terminal being known for

01:47:03,440 --> 01:47:10,080
gnome terminal and gnome and console and

01:47:06,840 --> 01:47:14,480
kde as a gui terminals

01:47:10,080 --> 01:47:19,040
and the console is

01:47:14,480 --> 01:47:23,840
better than in this

01:47:19,040 --> 01:47:23,840
in this issue so

01:47:24,400 --> 01:47:30,719
in call and console it's uh write arabic

01:47:27,520 --> 01:47:34,239
perfectly but

01:47:30,719 --> 01:47:39,040
some a little issues in possession

01:47:34,239 --> 01:47:44,480
positions but in genome terminal

01:47:39,040 --> 01:47:44,480
the situation is more complicated

01:47:44,560 --> 01:47:48,639
just recently you

01:47:48,840 --> 01:47:53,520
implemented in the newer

01:47:50,960 --> 01:47:54,480
version of gnome they implement it and

01:47:53,520 --> 01:47:59,119
it's uh

01:47:54,480 --> 01:48:02,719
it still has a lot of problems

01:47:59,119 --> 01:48:06,000
but also

01:48:02,719 --> 01:48:09,280
the the main issue it's a

01:48:06,000 --> 01:48:13,280
an old old old old bug

01:48:09,280 --> 01:48:17,040
and the continuous uh

01:48:13,280 --> 01:48:20,639
with a lot of generations of linux

01:48:17,040 --> 01:48:22,159
also the main terminal the main terminal

01:48:20,639 --> 01:48:25,360
is

01:48:22,159 --> 01:48:28,560
a good as a

01:48:25,360 --> 01:48:32,320
a good example of failure

01:48:28,560 --> 01:48:34,960
of failure and rtl shaping and as you

01:48:32,320 --> 01:48:36,080
as you can you see now this is the main

01:48:34,960 --> 01:48:40,080
terminal

01:48:36,080 --> 01:48:40,080
it's can't ship and can't

01:48:40,320 --> 01:48:46,719
write the entire direction directed

01:48:43,360 --> 01:48:50,320
and nothing nothing

01:48:46,719 --> 01:48:52,880
done well in this terminal

01:48:50,320 --> 01:48:53,600
i i will show you in the break time

01:48:52,880 --> 01:48:57,679
inshallah

01:48:53,600 --> 01:48:57,679
a practice of uh this

01:48:58,840 --> 01:49:04,000
so

01:49:00,719 --> 01:49:07,119
terminals need a lot of work for

01:49:04,000 --> 01:49:07,119
rtl sessions

01:49:09,520 --> 01:49:15,840
okay in the desktop in general

01:49:16,400 --> 01:49:23,840
designers is more

01:49:20,400 --> 01:49:27,199
more more very more better

01:49:23,840 --> 01:49:30,560
than kde a

01:49:27,199 --> 01:49:31,920
good gnome especially if uh in the

01:49:30,560 --> 01:49:35,880
lattice

01:49:31,920 --> 01:49:39,280
gnome at 3.24

01:49:35,880 --> 01:49:42,639
3.26 also till now

01:49:39,280 --> 01:49:47,920
the rtl is good

01:49:42,639 --> 01:49:51,040
but nkda it's a very very very very

01:49:47,920 --> 01:49:54,159
very worse in kde

01:49:51,040 --> 01:49:57,119
the the the main

01:49:54,159 --> 01:49:58,239
problem is old arcadia is better than a

01:49:57,119 --> 01:50:01,360
new york ada

01:49:58,239 --> 01:50:01,679
in this issues as we will see inshallah

01:50:01,360 --> 01:50:05,119
in

01:50:01,679 --> 01:50:08,960
practice time uh

01:50:05,119 --> 01:50:12,159
but yeah i mean the

01:50:08,960 --> 01:50:13,199
see in the this picture the combination

01:50:12,159 --> 01:50:17,520
of

01:50:13,199 --> 01:50:22,159
uh minimized as an example

01:50:17,520 --> 01:50:25,360
don't don't churn an arabic season

01:50:22,159 --> 01:50:30,400
also a lot of thing

01:50:25,360 --> 01:50:30,400
has a wrong positions in kde sergeants

01:50:31,920 --> 01:50:42,080
as you can see here

01:50:38,000 --> 01:50:45,360
and the next slide loading now

01:50:42,080 --> 01:50:48,639
okay now this is the

01:50:45,360 --> 01:50:52,159
system settings in kde

01:50:48,639 --> 01:50:57,520
we have a main tree and we have a child

01:50:52,159 --> 01:50:57,520
tree as we see the childhood tree

01:50:57,920 --> 01:51:04,400
wrong look wrong located here also

01:51:01,920 --> 01:51:06,159
the sound controllers sound controllers

01:51:04,400 --> 01:51:09,760
filled reversely

01:51:06,159 --> 01:51:10,239
so when it's it's shown as 100 percent

01:51:09,760 --> 01:51:13,840
filled

01:51:10,239 --> 01:51:17,840
when it's at when it's zero it's very

01:51:13,840 --> 01:51:20,020
very this uh disappointing issue

01:51:17,840 --> 01:51:21,440
also the the

01:51:20,020 --> 01:51:26,239
[Music]

01:51:21,440 --> 01:51:29,920
newer and at latest kde about

01:51:26,239 --> 01:51:33,440
two version or three version from now

01:51:29,920 --> 01:51:34,800
we have a lag when we start typing rtl

01:51:33,440 --> 01:51:37,920
when we start

01:51:34,800 --> 01:51:41,280
writing in arabic or in every or on

01:51:37,920 --> 01:51:43,440
any other other rtl languages we have

01:51:41,280 --> 01:51:46,960
lag

01:51:43,440 --> 01:51:47,280
when we use when we open a text editor

01:51:46,960 --> 01:51:50,960
and

01:51:47,280 --> 01:51:54,080
start writing oh you should do it for

01:51:50,960 --> 01:51:54,880
loading what's loading it's a very very

01:51:54,080 --> 01:51:58,639
very big

01:51:54,880 --> 01:52:03,280
issue here we can't uh typing

01:51:58,639 --> 01:52:06,239
after we we have to wait about

01:52:03,280 --> 01:52:07,599
four or five seconds for just start

01:52:06,239 --> 01:52:12,080
typing

01:52:07,599 --> 01:52:12,080
it's very very disappointing

01:52:12,239 --> 01:52:19,520
so the ui and

01:52:16,400 --> 01:52:23,679
kde need to be to

01:52:19,520 --> 01:52:26,800
redesign for rtl uh

01:52:23,679 --> 01:52:30,000
for rtl components or for our

01:52:26,800 --> 01:52:33,199
rtl to

01:52:30,000 --> 01:52:33,199
solve rtl issues

01:52:37,360 --> 01:52:43,920
okay now we have dolphin

01:52:40,719 --> 01:52:47,199
dolphin uh the main browser

01:52:43,920 --> 01:52:50,719
for the main file explorer and

01:52:47,199 --> 01:52:54,400
kd here as we see

01:52:50,719 --> 01:52:58,560
dolphin success in

01:52:54,400 --> 01:53:02,159
the menu

01:52:58,560 --> 01:53:06,480
also success in to show

01:53:02,159 --> 01:53:10,080
the buttons uh on the toolbar

01:53:06,480 --> 01:53:13,679
but in the main button the many tree

01:53:10,080 --> 01:53:16,719
should be located right the main folders

01:53:13,679 --> 01:53:20,560
and the main window for folders

01:53:16,719 --> 01:53:22,880
and files should be start from the right

01:53:20,560 --> 01:53:23,599
not from the left as in that the

01:53:22,880 --> 01:53:26,239
naturals

01:53:23,599 --> 01:53:26,719
as uh this issue isn't fun donald trump

01:53:26,239 --> 01:53:29,840
is good

01:53:26,719 --> 01:53:32,080
in this

01:53:29,840 --> 01:53:34,960
problem we can't find this problem and

01:53:32,080 --> 01:53:34,960
not be lost or

01:53:36,000 --> 01:53:40,480
okay from or from a long time ago but

01:53:39,040 --> 01:53:45,199
not less

01:53:40,480 --> 01:53:47,599
good in this way

01:53:45,199 --> 01:53:47,599
okay

01:53:49,840 --> 01:53:57,199
as we see here it's not

01:53:53,040 --> 01:54:00,639
just only mirroring it's just to think

01:53:57,199 --> 01:54:04,000
uh rtl so the terminal should be

01:54:00,639 --> 01:54:07,199
from the art from ltr not the problem

01:54:04,000 --> 01:54:10,800
no problem for that

01:54:07,199 --> 01:54:22,639
we don't need to mirror everything

01:54:10,800 --> 01:54:26,159
we just need to think as rtn

01:54:22,639 --> 01:54:28,880
okay now for uh

01:54:26,159 --> 01:54:31,280
we should talk about video controller

01:54:28,880 --> 01:54:34,320
the video controller in common

01:54:31,280 --> 01:54:37,760
start uh from left to right with

01:54:34,320 --> 01:54:40,800
a ltr sessions but

01:54:37,760 --> 01:54:43,920
and the rtl sessions should start

01:54:40,800 --> 01:54:46,320
from the right so we

01:54:43,920 --> 01:54:47,760
we have a three condition to make it

01:54:46,320 --> 01:54:50,239
good

01:54:47,760 --> 01:54:50,880
first condition it should start from

01:54:50,239 --> 01:54:54,719
right

01:54:50,880 --> 01:54:57,760
the second condition the

01:54:54,719 --> 01:55:01,360
lift arrow on the keyboard should move

01:54:57,760 --> 01:55:04,400
the video forward between

01:55:01,360 --> 01:55:08,480
whereas the right button will take us

01:55:04,400 --> 01:55:11,599
perversely also

01:55:08,480 --> 01:55:14,639
the third condition the mouse controller

01:55:11,599 --> 01:55:17,440
should be reversed so when i push at the

01:55:14,639 --> 01:55:20,400
end of the bar

01:55:17,440 --> 01:55:21,599
but from the right should taking me to

01:55:20,400 --> 01:55:24,480
the end of the video

01:55:21,599 --> 01:55:26,560
this is a common issues in the video

01:55:24,480 --> 01:55:31,520
controller

01:55:26,560 --> 01:55:35,040
so we as a linux state now

01:55:31,520 --> 01:55:38,159
we in the kingdom users they use

01:55:35,040 --> 01:55:41,840
totem totem is good

01:55:38,159 --> 01:55:44,880
and do the first and

01:55:41,840 --> 01:55:48,560
second conditions but the third is

01:55:44,880 --> 01:55:52,239
not not applied and

01:55:48,560 --> 01:55:56,080
in a totem program

01:55:52,239 --> 01:55:56,639
but we have a lot of issues also on

01:55:56,080 --> 01:56:00,239
dragon

01:55:56,639 --> 01:56:01,520
dragon solved the first condition and do

01:56:00,239 --> 01:56:05,119
the fixed condition

01:56:01,520 --> 01:56:08,320
but the second and third is not uh

01:56:05,119 --> 01:56:11,760
is not solved in it uh

01:56:08,320 --> 01:56:15,119
when we look at the other applications

01:56:11,760 --> 01:56:18,960
or common applications like vlc

01:56:15,119 --> 01:56:23,040
smart player they are good

01:56:18,960 --> 01:56:26,880
just and they are

01:56:23,040 --> 01:56:29,040
they are not good in any condition of it

01:56:26,880 --> 01:56:29,040
they

01:56:40,239 --> 01:56:44,560
wrong pace so

01:56:44,639 --> 01:56:49,760
they start from right and continue as

01:56:47,599 --> 01:56:53,360
that so mouse and keyboard

01:56:49,760 --> 01:56:58,400
controller is good and vlc assembler

01:56:53,360 --> 01:57:03,040
firefox etc but it's wrong way

01:56:58,400 --> 01:57:06,560
from the start it's wrong way but

01:57:03,040 --> 01:57:09,760
youtube also when we use that

01:57:06,560 --> 01:57:11,920
user use it as a web application

01:57:09,760 --> 01:57:12,880
it's also wrong let's start from right

01:57:11,920 --> 01:57:16,080
to left

01:57:12,880 --> 01:57:25,520
and all of these we will

01:57:16,080 --> 01:57:29,679
discuss in practice and break time

01:57:25,520 --> 01:57:32,719
okay uh this is uh an important thing

01:57:29,679 --> 01:57:36,000
the text context arabic

01:57:32,719 --> 01:57:39,679
has two numbers from this we have

01:57:36,000 --> 01:57:41,920
an eastern number eastern arabic

01:57:39,679 --> 01:57:44,000
numbers and western arabic numbers

01:57:41,920 --> 01:57:48,159
eastern arabic numbers were called

01:57:44,000 --> 01:57:52,080
in some systems indian numbers

01:57:48,159 --> 01:57:56,639
these numbers in

01:57:52,080 --> 01:58:00,080
in eastern arab world like

01:57:56,639 --> 01:58:04,080
saudi arabia like united arab emirates

01:58:00,080 --> 01:58:08,239
or syria or an eastern arab

01:58:04,080 --> 01:58:11,520
arab they use the eastern arabic

01:58:08,239 --> 01:58:14,560
they use what's called

01:58:11,520 --> 01:58:16,719
indian numbers so

01:58:14,560 --> 01:58:16,719
in

01:58:17,599 --> 01:58:21,599
this uh when we when you use library

01:58:20,320 --> 01:58:24,719
office and the you

01:58:21,599 --> 01:58:28,159
use that context should

01:58:24,719 --> 01:58:31,440
use the same as a text

01:58:28,159 --> 01:58:34,639
it it's good in that or

01:58:31,440 --> 01:58:38,480
and the doctor halt hosni at

01:58:34,639 --> 01:58:43,920
this i remember when

01:58:38,480 --> 01:58:48,960
he worked about complex writing

01:58:43,920 --> 01:58:48,960
this this should be

01:58:49,760 --> 01:58:55,119
this feature should be in general not

01:58:52,960 --> 01:58:57,440
only in liver office

01:58:55,119 --> 01:58:58,480
should be in general for the whole

01:58:57,440 --> 01:59:02,080
system

01:58:58,480 --> 01:59:05,119
the user should when we

01:59:02,080 --> 01:59:09,199
when he use

01:59:05,119 --> 01:59:13,280
saudi arabia as an example then

01:59:09,199 --> 01:59:16,400
the numbers should be as an ester

01:59:13,280 --> 01:59:20,800
but when he used algeria or morocco

01:59:16,400 --> 01:59:24,320
western arabic so the numbers should be

01:59:20,800 --> 01:59:27,920
as western but the value

01:59:24,320 --> 01:59:31,760
is the this is the issue the value of

01:59:27,920 --> 01:59:34,400
character shouldn't be touched

01:59:31,760 --> 01:59:36,080
the the value it should be the number

01:59:34,400 --> 01:59:41,280
itself

01:59:36,080 --> 01:59:44,480
when we write an ibus or something

01:59:41,280 --> 01:59:48,000
driving method entered

01:59:44,480 --> 01:59:51,440
the western

01:59:48,000 --> 01:59:55,119
western numbers with another goods

01:59:51,440 --> 01:59:58,800
not the not the

01:59:55,119 --> 02:00:02,000
numbers value so it's so important to

01:59:58,800 --> 02:00:06,080
get to fix this

02:00:02,000 --> 02:00:09,520
context in the next releases of gnome

02:00:06,080 --> 02:00:12,320
or kd this will be

02:00:09,520 --> 02:00:13,520
a good and the oceans should be opened

02:00:12,320 --> 02:00:17,520
as in windows

02:00:13,520 --> 02:00:20,719
as opened for uh changing uh to make it

02:00:17,520 --> 02:00:23,199
eastern or western or same the text

02:00:20,719 --> 02:00:23,199
context

02:00:24,800 --> 02:00:32,560
okay now uh other

02:00:28,320 --> 02:00:36,000
apps as we see another examples

02:00:32,560 --> 02:00:39,040
we have here filezilla filezilla

02:00:36,000 --> 02:00:43,119
totally crashed no

02:00:39,040 --> 02:00:46,960
as we see i think it's an adjective

02:00:43,119 --> 02:00:50,960
issue we see here uh

02:00:46,960 --> 02:00:54,080
of all the reviews and nothing shown

02:00:50,960 --> 02:00:57,199
we have here a text

02:00:54,080 --> 02:01:00,560
a text text

02:00:57,199 --> 02:01:04,320
and nothing is shown also

02:01:00,560 --> 02:01:09,360
on java when we see the

02:01:04,320 --> 02:01:14,080
our window this is a java application

02:01:09,360 --> 02:01:18,480
as we see it's shaped well but directed

02:01:14,080 --> 02:01:22,000
fail in direction environment is

02:01:18,480 --> 02:01:25,040
a very a very long history

02:01:22,000 --> 02:01:28,800
with wine and art here

02:01:25,040 --> 02:01:32,000
as we see here the crashing with

02:01:28,800 --> 02:01:35,280
exploring you see here the

02:01:32,000 --> 02:01:38,800
folders duplicated

02:01:35,280 --> 02:01:44,400
or three times copying it's

02:01:38,800 --> 02:01:44,400
crushed not not correct it's not correct

02:01:48,239 --> 02:01:56,560
okay now we will talk about la issue

02:01:52,080 --> 02:01:59,920
uh the button b in the keyboard

02:01:56,560 --> 02:02:03,280
uh in arabic should give la

02:01:59,920 --> 02:02:04,080
la isn't a one word isn't one letter

02:02:03,280 --> 02:02:07,760
it's a it's

02:02:04,080 --> 02:02:11,440
two letters letter

02:02:07,760 --> 02:02:14,400
l a lamb an arabic lamb and

02:02:11,440 --> 02:02:17,040
alif lam alif so it's two letters not

02:02:14,400 --> 02:02:17,040
one letter

02:02:17,199 --> 02:02:25,679
but the x input or them or

02:02:21,360 --> 02:02:29,679
can't handle two letters with one key

02:02:25,679 --> 02:02:32,239
uh so gnome and kde when we enter

02:02:29,679 --> 02:02:32,239
when we

02:02:39,440 --> 02:02:43,119
it's a wrong way it's not one letter

02:02:42,159 --> 02:02:46,960
it's two

02:02:43,119 --> 02:02:49,599
letters we use i was as a workaround but

02:02:46,960 --> 02:02:50,719
not good solution for the oldest because

02:02:49,599 --> 02:02:53,760
it's not different

02:02:50,719 --> 02:02:58,560
not default or something like that

02:02:53,760 --> 02:03:01,599
so it's a very old issue

02:02:58,560 --> 02:03:05,280
and the very old

02:03:01,599 --> 02:03:07,760
reported issue but doesn't solve

02:03:05,280 --> 02:03:07,760
till now

02:03:09,119 --> 02:03:13,599
okay when we see a microsoft visual

02:03:12,639 --> 02:03:16,800
studio

02:03:13,599 --> 02:03:20,400
microsoft visual residue

02:03:16,800 --> 02:03:23,679
they have art right to lift

02:03:20,400 --> 02:03:27,199
argument so it's

02:03:23,679 --> 02:03:28,400
good for the developer and for the

02:03:27,199 --> 02:03:33,760
designer

02:03:28,400 --> 02:03:37,760
to it's good for the designer to use

02:03:33,760 --> 02:03:40,480
when he build a multi-language

02:03:37,760 --> 02:03:40,800
multilingual application it's good to

02:03:40,480 --> 02:03:43,920
him

02:03:40,800 --> 02:03:47,199
to use this way

02:03:43,920 --> 02:03:50,000
so as uh

02:03:47,199 --> 02:03:52,320
approach for a visual studio but an

02:03:50,000 --> 02:03:52,880
acuity designer as an example is we

02:03:52,320 --> 02:03:57,840
don't have

02:03:52,880 --> 02:04:01,119
this uh when we use rtl

02:03:57,840 --> 02:04:06,159
they apply the

02:04:01,119 --> 02:04:06,159
uh the rtl way on it

02:04:06,719 --> 02:04:15,440
finally i

02:04:11,679 --> 02:04:18,560
try to make a message to you

02:04:15,440 --> 02:04:19,440
that don't push any updates without rtl

02:04:18,560 --> 02:04:23,520
test

02:04:19,440 --> 02:04:27,840
because we have a perverse

02:04:23,520 --> 02:04:31,280
versions of kde better than latest

02:04:27,840 --> 02:04:34,480
so don't push any updates without

02:04:31,280 --> 02:04:37,440
rtl test this is

02:04:34,480 --> 02:04:37,440
what i can

02:04:37,679 --> 02:04:44,480
say to you at the at the

02:04:40,719 --> 02:04:44,480
end of this session

02:04:44,560 --> 02:04:53,840
thank you for having me and i'm ready

02:04:47,199 --> 02:04:53,840
for accepting any questions

02:04:56,960 --> 02:05:00,159
great it looks like in the shade next

02:04:59,119 --> 02:05:06,159
question

02:05:00,159 --> 02:05:08,800
i can't wait for you for you okay

02:05:06,159 --> 02:05:10,320
have you considered writing any open qa

02:05:08,800 --> 02:05:13,520
test for fedora

02:05:10,320 --> 02:05:16,560
or open source for some of the layout

02:05:13,520 --> 02:05:19,760
ui for gnome and kde

02:05:16,560 --> 02:05:24,000
or are you familiar with any rtl test

02:05:19,760 --> 02:05:24,000
for the issues commonly experienced

02:05:28,320 --> 02:05:32,719
if i understand you yes i'm familiar

02:05:32,239 --> 02:05:36,880
with the

02:05:32,719 --> 02:05:40,639
qut and gnome

02:05:36,880 --> 02:05:44,400
both kdm and familiar with

02:05:40,639 --> 02:05:49,840
these issues and i living

02:05:44,400 --> 02:05:49,840
with that since 2007.

02:05:53,199 --> 02:06:03,840
okay i see questions and

02:05:56,800 --> 02:06:03,840
chat books

02:06:03,920 --> 02:06:06,960
okay it's uh

02:06:11,199 --> 02:06:18,719
sayed mustafa what about baby many times

02:06:15,040 --> 02:06:22,159
the text the placeholder can contain

02:06:18,719 --> 02:06:26,079
regardless of general the best

02:06:22,159 --> 02:06:29,280
the best way to handle bd

02:06:26,079 --> 02:06:30,400
yes it's solve it but it should be

02:06:29,280 --> 02:06:33,440
general not

02:06:30,400 --> 02:06:35,920
just the at the

02:06:33,440 --> 02:06:36,639
at the time when we use bd it should be

02:06:35,920 --> 02:06:40,639
as a

02:06:36,639 --> 02:06:45,840
user expert experience it should be used

02:06:40,639 --> 02:06:45,840
every time

02:06:56,840 --> 02:07:03,199
okay

02:06:59,520 --> 02:07:07,360
about david uh yes

02:07:03,199 --> 02:07:13,840
the uh the reverse at an arab oxygen

02:07:07,360 --> 02:07:13,840
should be enabled so it's the same issue

02:07:17,199 --> 02:07:24,320
also about weyland if it uses

02:07:20,320 --> 02:07:28,639
ibus yes it will fix the issue only

02:07:24,320 --> 02:07:41,840
but the same for other issues

02:07:28,639 --> 02:07:41,840
they are the same for island or expo x2

02:07:42,560 --> 02:07:47,760
marco i have the for the arrow keys i

02:07:46,239 --> 02:07:51,280
have this issue

02:07:47,760 --> 02:07:54,800
she is used every day so

02:07:51,280 --> 02:07:55,760
now i reprogrammed you to use it from

02:07:54,800 --> 02:08:00,400
left to right

02:07:55,760 --> 02:08:00,400
but that's a wrong not not good

02:08:06,840 --> 02:08:09,840
okay

02:08:15,599 --> 02:08:24,239
i will show uh but marco what

02:08:20,079 --> 02:08:26,639
can you uh but the links for the fixes

02:08:24,239 --> 02:08:26,639
please

02:08:31,360 --> 02:08:38,480
yes inshaallah walker when the break

02:08:34,400 --> 02:08:42,320
we will i will show to you

02:08:38,480 --> 02:08:45,840
all issues that i

02:08:42,320 --> 02:08:45,840
mentioned here

02:08:48,159 --> 02:08:52,560
say no video players shouldn't remain

02:08:51,360 --> 02:08:55,599
left to right it's a

02:08:52,560 --> 02:08:55,599
wrong way not

02:08:56,239 --> 02:09:05,840
the right way or even

02:08:59,679 --> 02:09:05,840
is publicly used

02:09:14,960 --> 02:09:20,880
okay anyone have um like there are some

02:09:18,800 --> 02:09:23,040
questions added to the shared

02:09:20,880 --> 02:09:25,679
notes on the left hand side have you

02:09:23,040 --> 02:09:25,679
seen those

02:09:26,480 --> 02:09:35,679
no but

02:09:32,639 --> 02:09:37,679
great okay um i can i can read

02:09:35,679 --> 02:09:39,840
the next one out for you we still have

02:09:37,679 --> 02:09:43,760
some time for more questions

02:09:39,840 --> 02:09:47,040
the second question is what about uh bd

02:09:43,760 --> 02:09:50,480
how many times the text placeholder

02:09:47,040 --> 02:09:52,239
can retain rtl and ltr regardless of the

02:09:50,480 --> 02:09:55,520
general settings of the app

02:09:52,239 --> 02:09:58,719
what is the best way to handle this

02:09:55,520 --> 02:10:02,320
is the the best way to handle this

02:09:58,719 --> 02:10:03,440
uh read everything every part of the

02:10:02,320 --> 02:10:06,639
text

02:10:03,440 --> 02:10:09,199
as uh as a

02:10:06,639 --> 02:10:09,199
as its

02:10:11,040 --> 02:10:17,840
properties so when i start

02:10:14,239 --> 02:10:21,199
writing from the uh in arabic so

02:10:17,840 --> 02:10:24,800
the the line should start from the right

02:10:21,199 --> 02:10:27,760
but when i

02:10:24,800 --> 02:10:28,960
changed the change the language to

02:10:27,760 --> 02:10:32,480
english

02:10:28,960 --> 02:10:35,920
is the line should still in the right

02:10:32,480 --> 02:10:38,639
not the

02:10:35,920 --> 02:10:39,199
the context should be from the right to

02:10:38,639 --> 02:10:41,760
left not

02:10:39,199 --> 02:10:42,880
from left right the main problems uh

02:10:41,760 --> 02:10:46,079
some when we use

02:10:42,880 --> 02:10:50,000
uh some special characters like

02:10:46,079 --> 02:10:53,760
uh uh

02:10:50,000 --> 02:10:59,119
the like when we use

02:10:53,760 --> 02:10:59,119
the question marks or the something like

02:10:59,679 --> 02:11:07,280
breakouts or the special characters

02:11:03,440 --> 02:11:09,360
especially when the al-aqua in arabic

02:11:07,280 --> 02:11:13,599
but

02:11:09,360 --> 02:11:13,599
i missed the word in english

02:11:14,079 --> 02:11:25,840
i will write it

02:11:28,480 --> 02:11:36,800
okay now i will i will explain

02:11:32,639 --> 02:11:40,000
this text mosfap

02:11:36,800 --> 02:11:44,960
now when i open a brackets like uh

02:11:40,000 --> 02:11:48,400
like this and when

02:11:44,960 --> 02:11:52,800
when i change the language it will be

02:11:48,400 --> 02:11:55,920
reversing this is wrong

02:11:52,800 --> 02:12:07,840
it should continue uh

02:11:55,920 --> 02:12:07,840
as we start

02:12:10,719 --> 02:12:21,840
the mixing arabic with english

02:12:14,000 --> 02:12:21,840
seeing each

02:12:40,639 --> 02:12:49,040
are you ready for the next question yes

02:12:44,159 --> 02:12:52,639
okay when in an rtl app

02:12:49,040 --> 02:12:55,520
there is arabic and latin text mixed

02:12:52,639 --> 02:12:56,079
should the latin text be laid out to the

02:12:55,520 --> 02:12:59,360
left

02:12:56,079 --> 02:13:03,360
or right in general

02:12:59,360 --> 02:13:07,280
no the the latin text

02:13:03,360 --> 02:13:07,280
should be from the right to left but

02:13:08,560 --> 02:13:15,119
the starting the which uh the

02:13:11,679 --> 02:13:18,079
war the war the started war is

02:13:15,119 --> 02:13:19,199
will decide the direction so when we

02:13:18,079 --> 02:13:21,679
start

02:13:19,199 --> 02:13:22,719
an arabic word we will continue from

02:13:21,679 --> 02:13:26,960
right

02:13:22,719 --> 02:13:26,960
but when we write in english

02:13:27,599 --> 02:13:35,040
going from left to right but the context

02:13:31,520 --> 02:13:35,040
as at all from right to left

02:13:37,760 --> 02:13:43,199
okay thank you the next question is

02:13:40,800 --> 02:13:45,920
will it work better with weyland than

02:13:43,199 --> 02:13:45,920
xorg

02:13:46,480 --> 02:13:53,920
yes if we use ibus

02:13:50,320 --> 02:13:56,560
i i answered for

02:13:53,920 --> 02:13:58,000
these questions when we use ibus and

02:13:56,560 --> 02:14:01,360
wayland it's good

02:13:58,000 --> 02:14:03,920
and writing is better than

02:14:01,360 --> 02:14:03,920
example

02:14:06,079 --> 02:14:13,119
but and the in the ui or

02:14:09,199 --> 02:14:16,639
the gi in general is the same

02:14:13,119 --> 02:14:19,280
not there is the no differentiate

02:14:16,639 --> 02:14:19,280
between them

02:14:20,000 --> 02:14:23,920
okay the next question is what about

02:14:22,639 --> 02:14:27,199
some text fields

02:14:23,920 --> 02:14:30,320
which should contain latin numbers some

02:14:27,199 --> 02:14:31,840
apps add persian numbers if app language

02:14:30,320 --> 02:14:37,199
is set to persian

02:14:31,840 --> 02:14:40,800
this made issue for my calendar timing

02:14:37,199 --> 02:14:46,639
yes i i think it should

02:14:40,800 --> 02:14:49,920
be optional from the system settings

02:14:46,639 --> 02:14:49,920
the options should be

02:14:51,679 --> 02:14:59,119
the arabic eastern

02:14:56,800 --> 02:15:00,000
arabic stern numbers and arabic western

02:14:59,119 --> 02:15:03,280
numbers

02:15:00,000 --> 02:15:09,840
so or going

02:15:03,280 --> 02:15:09,840
with that with the context

02:15:11,520 --> 02:15:16,159
great okay our last question before we

02:15:14,960 --> 02:15:19,040
run out of time

02:15:16,159 --> 02:15:20,159
is you said video controller should be

02:15:19,040 --> 02:15:23,040
reversed

02:15:20,159 --> 02:15:24,079
material design guidelines says don't

02:15:23,040 --> 02:15:26,639
reverse

02:15:24,079 --> 02:15:29,599
the logic is that it represents the

02:15:26,639 --> 02:15:29,599
physical divide

02:15:30,800 --> 02:15:37,920
yes so i create a

02:15:34,560 --> 02:15:41,280
thing i always like to think

02:15:37,920 --> 02:15:44,880
as rtl when uh

02:15:41,280 --> 02:15:49,360
when we use rtl uh we do

02:15:44,880 --> 02:15:52,800
we need to think as rtn and video yes

02:15:49,360 --> 02:15:57,119
from youtube start about 2006

02:15:52,800 --> 02:15:59,440
till now yes i i am personally

02:15:57,119 --> 02:16:00,320
programmed to use it from left to right

02:15:59,440 --> 02:16:03,599
but

02:16:00,320 --> 02:16:06,320
it's wrong in totem or in

02:16:03,599 --> 02:16:08,880
dragon players it's right to lift and

02:16:06,320 --> 02:16:08,880
this good

02:16:10,400 --> 02:16:17,199
even it they have

02:16:13,840 --> 02:16:20,239
some issues but in general it's good

02:16:17,199 --> 02:16:23,040
to start from right to left not

02:16:20,239 --> 02:16:23,040
from left to right

02:16:25,280 --> 02:16:30,800
great thank you so much it looks like

02:16:28,000 --> 02:16:32,479
that is all the time we have

02:16:30,800 --> 02:16:34,559
i hope you enjoyed giving your

02:16:32,479 --> 02:16:37,679
presentation as much as everyone seemed

02:16:34,559 --> 02:16:40,800
to enjoy listening to you today

02:16:37,679 --> 02:16:47,519
uh thank you and i'm waiting you uh

02:16:40,800 --> 02:16:50,719
in the break time

02:16:47,519 --> 02:16:53,200
wonderful thank you so much

02:16:50,719 --> 02:16:53,200
welcome

02:16:54,800 --> 02:17:03,120
and thank you for hearing me

02:17:01,439 --> 02:17:04,880
can you please when you didn't turn off

02:17:03,120 --> 02:17:15,840
your camera

02:17:04,880 --> 02:17:15,840
yes sir

02:19:20,639 --> 02:19:23,120
hello

02:19:27,840 --> 02:19:35,840
hello hello

02:23:14,399 --> 02:23:19,840
hello and welcome back everybody

02:23:22,000 --> 02:23:25,280
i'd like to introduce

02:23:25,840 --> 02:23:30,240
david edmondson and benjamin berg who

02:23:28,479 --> 02:23:33,840
will be talking about next generation

02:23:30,240 --> 02:23:33,840
application management

02:23:34,560 --> 02:23:38,560
thank you very much for introduction

02:23:36,560 --> 02:23:41,760
allison could you put

02:23:38,560 --> 02:23:42,960
a slide back on i don't know how to do

02:23:41,760 --> 02:23:46,399
it

02:23:42,960 --> 02:23:48,240
brilliant thank you very much

02:23:46,399 --> 02:23:50,080
oh i have to become a presenter

02:23:48,240 --> 02:23:52,399
brilliant thank you as much

02:23:50,080 --> 02:23:54,399
okay so the title of our talk next

02:23:52,399 --> 02:23:57,600
generation application management

02:23:54,399 --> 02:23:59,200
subtitle system d for your win and

02:23:57,600 --> 02:24:00,720
you might have seen similar talks

02:23:59,200 --> 02:24:02,800
presented at academy

02:24:00,720 --> 02:24:04,880
and guarded but now presenting them

02:24:02,800 --> 02:24:07,760
together so we're joined by

02:24:04,880 --> 02:24:10,000
me david emerson from the kde side and

02:24:07,760 --> 02:24:13,439
benjamin berg

02:24:10,000 --> 02:24:15,040
from the gnome side um yeah yeah so i

02:24:13,439 --> 02:24:17,920
work for blue systems

02:24:15,040 --> 02:24:18,720
ben's working for red hat so opposing

02:24:17,920 --> 02:24:21,680
desktops

02:24:18,720 --> 02:24:23,120
opposing colors a ability to have an eu

02:24:21,680 --> 02:24:25,359
flag in the background

02:24:23,120 --> 02:24:28,240
we've got a lot of operations but we

02:24:25,359 --> 02:24:31,520
also have the same problems

02:24:28,240 --> 02:24:35,200
so as a desktop what we want to do

02:24:31,520 --> 02:24:36,560
is get a user able to control their

02:24:35,200 --> 02:24:37,280
system it's our job as a desktop

02:24:36,560 --> 02:24:39,280
environment

02:24:37,280 --> 02:24:40,560
to put a user to your application so you

02:24:39,280 --> 02:24:42,960
can run your applications

02:24:40,560 --> 02:24:45,840
user applications and most importantly

02:24:42,960 --> 02:24:48,240
manager applications

02:24:45,840 --> 02:24:49,760
so in terms of managing what's going on

02:24:48,240 --> 02:24:52,640
on your own system

02:24:49,760 --> 02:24:53,600
it used to be a case several years ago

02:24:52,640 --> 02:24:55,680
you'd have your

02:24:53,600 --> 02:24:56,960
browser you'd have your instant

02:24:55,680 --> 02:24:59,359
messenger

02:24:56,960 --> 02:25:00,000
and you'd run ps and you would see your

02:24:59,359 --> 02:25:01,840
browser

02:25:00,000 --> 02:25:04,000
and you would see your instant messenger

02:25:01,840 --> 02:25:06,399
and that would be pretty straightforward

02:25:04,000 --> 02:25:07,600
and when i started using livex 10 years

02:25:06,399 --> 02:25:11,040
ago as an idiot

02:25:07,600 --> 02:25:14,080
i could understand it now

02:25:11,040 --> 02:25:16,000
the situation is very different i run

02:25:14,080 --> 02:25:17,840
my browser my instant messaging client

02:25:16,000 --> 02:25:19,680
and this list is truncated because it

02:25:17,840 --> 02:25:22,240
doesn't all fit on one slide

02:25:19,680 --> 02:25:23,359
it's ridiculous and even as i've grown

02:25:22,240 --> 02:25:26,000
as a linux user

02:25:23,359 --> 02:25:27,359
i now no longer know what's going on on

02:25:26,000 --> 02:25:29,200
my own system

02:25:27,359 --> 02:25:30,399
so my instant messaging client here

02:25:29,200 --> 02:25:33,280
discord is

02:25:30,399 --> 02:25:35,280
13 processes and they all have

02:25:33,280 --> 02:25:37,359
ridiculous names that don't make

02:25:35,280 --> 02:25:39,439
any sense to anyone even if you have

02:25:37,359 --> 02:25:42,560
like a phd you still wouldn't know

02:25:39,439 --> 02:25:43,840
what any of this is so

02:25:42,560 --> 02:25:46,479
understanding what's going on is

02:25:43,840 --> 02:25:48,399
difficult just to see everything

02:25:46,479 --> 02:25:51,040
but it also means any aggregated

02:25:48,399 --> 02:25:54,319
resources are effectively meaningless

02:25:51,040 --> 02:25:57,040
if i look at in our power top and see

02:25:54,319 --> 02:25:59,359
which process is draining the cpu oh

02:25:57,040 --> 02:26:02,479
it's not chromium it's a web renderer

02:25:59,359 --> 02:26:04,160
like a sneaky disguise for chromium so

02:26:02,479 --> 02:26:06,640
we can't see what it is

02:26:04,160 --> 02:26:08,160
and the problem is it does fool people

02:26:06,640 --> 02:26:08,960
you can't be in control of your own

02:26:08,160 --> 02:26:11,280
system

02:26:08,960 --> 02:26:13,920
anymore and these stats are effectively

02:26:11,280 --> 02:26:13,920
meaningless

02:26:15,200 --> 02:26:18,240
the other problem we have i mentioned

02:26:16,960 --> 02:26:18,720
previously about instant messaging

02:26:18,240 --> 02:26:22,240
client

02:26:18,720 --> 02:26:25,280
was 13 different processes whereas

02:26:22,240 --> 02:26:26,800
creta just one process so

02:26:25,280 --> 02:26:29,040
you've got some intense graphical

02:26:26,800 --> 02:26:31,920
application and

02:26:29,040 --> 02:26:33,439
all the scheduler is going to see is 14

02:26:31,920 --> 02:26:37,120
processes

02:26:33,439 --> 02:26:39,359
so if it's 14 processes the scheduler

02:26:37,120 --> 02:26:41,680
trying to be fair is going to give each

02:26:39,359 --> 02:26:42,560
of them as much resources as they ask

02:26:41,680 --> 02:26:45,200
for

02:26:42,560 --> 02:26:46,160
evenly but evenly without the context of

02:26:45,200 --> 02:26:49,840
any metadata

02:26:46,160 --> 02:26:49,840
is in this case wrong

02:26:50,479 --> 02:26:53,840
and there's also a situation of being

02:26:52,479 --> 02:26:55,600
fair between users

02:26:53,840 --> 02:26:57,200
because if you're an enterprise setting

02:26:55,600 --> 02:26:58,640
kind of multi-seat environment where you

02:26:57,200 --> 02:27:00,240
have one physical machine and there's

02:26:58,640 --> 02:27:01,840
several users attached

02:27:00,240 --> 02:27:03,680
it doesn't make sense that one person's

02:27:01,840 --> 02:27:05,680
browser experience gets hampered

02:27:03,680 --> 02:27:07,760
because somebody else is running some

02:27:05,680 --> 02:27:09,920
intense matlab operation

02:27:07,760 --> 02:27:11,439
sucking all your cpu away it should be

02:27:09,920 --> 02:27:13,520
fair each user

02:27:11,439 --> 02:27:16,560
gets the same amount if they both try

02:27:13,520 --> 02:27:17,840
and request all of it or a similar

02:27:16,560 --> 02:27:19,680
situation

02:27:17,840 --> 02:27:22,000
your desktop's locking up you know

02:27:19,680 --> 02:27:22,720
something's going wrong ussh in to try

02:27:22,000 --> 02:27:25,040
and fix it

02:27:22,720 --> 02:27:27,040
your ssh terminal is hanging because all

02:27:25,040 --> 02:27:28,399
your cpu is sucked up by a thing you're

02:27:27,040 --> 02:27:30,640
trying to fix

02:27:28,399 --> 02:27:32,240
that's not it's trying to there's no

02:27:30,640 --> 02:27:34,399
concept of fairness

02:27:32,240 --> 02:27:35,280
with a new session now started it should

02:27:34,399 --> 02:27:37,920
have as much as

02:27:35,280 --> 02:27:41,040
resources as this session that's running

02:27:37,920 --> 02:27:41,040
if it tries to get them

02:27:41,840 --> 02:27:46,960
and as well as being fair it's difficult

02:27:45,040 --> 02:27:49,359
to try and

02:27:46,960 --> 02:27:50,399
discriminate things to be unfair to go

02:27:49,359 --> 02:27:53,120
the other way

02:27:50,399 --> 02:27:53,840
so currently we've got background

02:27:53,120 --> 02:27:55,200
services

02:27:53,840 --> 02:27:57,120
hanging in your background with fire

02:27:55,200 --> 02:27:59,359
indexes or backup solutions

02:27:57,120 --> 02:28:00,479
and you can run nice you can kind of

02:27:59,359 --> 02:28:02,640
suppress them down

02:28:00,479 --> 02:28:04,640
to an extent but only if that

02:28:02,640 --> 02:28:05,359
application itself has really opted in

02:28:04,640 --> 02:28:07,760
to do it

02:28:05,359 --> 02:28:09,359
or you go out with manually figuring all

02:28:07,760 --> 02:28:11,200
of the extra steps by hand which doesn't

02:28:09,359 --> 02:28:12,880
really work

02:28:11,200 --> 02:28:14,319
but it's impossible to elevate the

02:28:12,880 --> 02:28:15,600
process and you

02:28:14,319 --> 02:28:17,840
generally especially now of your

02:28:15,600 --> 02:28:19,439
compositors and weyland we want to keep

02:28:17,840 --> 02:28:21,840
your desktop responsive

02:28:19,439 --> 02:28:23,200
it's super important to keep your mouse

02:28:21,840 --> 02:28:24,960
moving smoothly

02:28:23,200 --> 02:28:27,040
and everything even if something else is

02:28:24,960 --> 02:28:29,600
happening on your system

02:28:27,040 --> 02:28:31,680
do you want to boost that but because

02:28:29,600 --> 02:28:35,120
nice is system wide

02:28:31,680 --> 02:28:37,280
you can't you can only drop the niceness

02:28:35,120 --> 02:28:39,120
you can't raise it without additional

02:28:37,280 --> 02:28:40,720
permissions

02:28:39,120 --> 02:28:42,240
because everything is relative to your

02:28:40,720 --> 02:28:43,920
whole system at once and

02:28:42,240 --> 02:28:46,000
you need to have elevated permissions

02:28:43,920 --> 02:28:51,439
which means it's not usable for us

02:28:46,000 --> 02:28:51,439
as a desktop so we need a solution

02:28:51,680 --> 02:28:56,560
and the solution is to use c grips which

02:28:54,560 --> 02:28:58,880
is the kernel level feature to

02:28:56,560 --> 02:29:00,640
group processes together with systemd to

02:28:58,880 --> 02:29:05,200
configure all this stuff

02:29:00,640 --> 02:29:05,680
so cgroups allows us to hierarchically

02:29:05,200 --> 02:29:08,560
order

02:29:05,680 --> 02:29:09,439
processes and allows us to put them into

02:29:08,560 --> 02:29:11,200
groups

02:29:09,439 --> 02:29:13,040
control groups that's where the name

02:29:11,200 --> 02:29:16,640
comes from c group

02:29:13,040 --> 02:29:18,160
and uh then we can all nicely hierarchy

02:29:16,640 --> 02:29:19,520
them and we know what's going on and we

02:29:18,160 --> 02:29:21,200
can actually figure out

02:29:19,520 --> 02:29:23,439
how how to configure it and we can

02:29:21,200 --> 02:29:24,560
configure it so we have lots of confirm

02:29:23,439 --> 02:29:27,680
controls available

02:29:24,560 --> 02:29:28,479
the most important for us are cpu io and

02:29:27,680 --> 02:29:30,800
memory

02:29:28,479 --> 02:29:32,640
but you could also imagine like a

02:29:30,800 --> 02:29:34,399
graphics memory controller later on

02:29:32,640 --> 02:29:37,680
which doesn't exist yet which would be

02:29:34,399 --> 02:29:38,399
very interesting to have and then we

02:29:37,680 --> 02:29:40,319
have systemd

02:29:38,399 --> 02:29:42,240
which hides the details and configures

02:29:40,319 --> 02:29:44,160
it for us so if you look at like a

02:29:42,240 --> 02:29:47,600
hierarchy this is a hierarchy from a

02:29:44,160 --> 02:29:50,560
running gnome session basically

02:29:47,600 --> 02:29:51,359
so what we have is that the system on on

02:29:50,560 --> 02:29:54,399
the system level

02:29:51,359 --> 02:29:56,000
things are split up as like user slice

02:29:54,399 --> 02:29:57,680
that all the user processes in it then

02:29:56,000 --> 02:30:00,240
user 1000 slice that's my

02:29:57,680 --> 02:30:01,040
the process of my user and user 1000

02:30:00,240 --> 02:30:04,240
service

02:30:01,040 --> 02:30:06,240
is the actually systemd service that

02:30:04,240 --> 02:30:07,920
manages all my processes and then

02:30:06,240 --> 02:30:11,280
underneath there

02:30:07,920 --> 02:30:13,120
the session slice contains the important

02:30:11,280 --> 02:30:14,479
session processes and app slice will

02:30:13,120 --> 02:30:16,560
contain the applications

02:30:14,479 --> 02:30:18,240
in this case it's a terminal with a few

02:30:16,560 --> 02:30:19,840
sub-processes and everything

02:30:18,240 --> 02:30:21,600
so you notice for example that gnome

02:30:19,840 --> 02:30:22,240
share well and service is actually gnome

02:30:21,600 --> 02:30:25,200
shell

02:30:22,240 --> 02:30:26,880
it's xylend and then it's also ibis like

02:30:25,200 --> 02:30:28,240
input method stuff all grouped together

02:30:26,880 --> 02:30:32,080
in one group

02:30:28,240 --> 02:30:34,240
um and then the c group controllers

02:30:32,080 --> 02:30:36,319
allows us to get more information and to

02:30:34,240 --> 02:30:36,960
to set things up so the cpu controller

02:30:36,319 --> 02:30:39,600
is

02:30:36,960 --> 02:30:41,600
for cpu resources and it for example

02:30:39,600 --> 02:30:44,080
give you statistics for each c group

02:30:41,600 --> 02:30:45,520
it'll give you pressure information

02:30:44,080 --> 02:30:46,160
pressure stall information that means

02:30:45,520 --> 02:30:48,319
that

02:30:46,160 --> 02:30:49,840
the process is not actually doing

02:30:48,319 --> 02:30:51,840
anything because it's waiting for this

02:30:49,840 --> 02:30:55,439
resource to become available

02:30:51,840 --> 02:30:56,479
so if you have 16 processors running and

02:30:55,439 --> 02:30:58,960
for

02:30:56,479 --> 02:30:59,680
course only then each one will only run

02:30:58,960 --> 02:31:01,840
02:30:59,680 --> 02:31:02,960
of the time at maximum basically and

02:31:01,840 --> 02:31:05,439
you'll see that here that

02:31:02,960 --> 02:31:06,399
the processes are waiting and cpu weight

02:31:05,439 --> 02:31:08,240
allows you to

02:31:06,399 --> 02:31:09,760
configure the weight and prioritize

02:31:08,240 --> 02:31:12,399
parts of the process

02:31:09,760 --> 02:31:15,120
uh these processes configure to other or

02:31:12,399 --> 02:31:17,359
their cpu max configuring maximum

02:31:15,120 --> 02:31:18,479
and a lot more things if you want to

02:31:17,359 --> 02:31:20,800
know the details you

02:31:18,479 --> 02:31:23,840
can look into the c grid v2

02:31:20,800 --> 02:31:26,880
documentation in the kernel

02:31:23,840 --> 02:31:28,319
another important controller is io same

02:31:26,880 --> 02:31:29,840
thing there you get the statistics you

02:31:28,319 --> 02:31:32,000
get the pressure you get the weight

02:31:29,840 --> 02:31:33,520
you also have like a latency flag so the

02:31:32,000 --> 02:31:35,600
kernel tries to guarantee

02:31:33,520 --> 02:31:38,080
low latencies but that's actually not

02:31:35,600 --> 02:31:41,200
non-trivial to use unfortunately

02:31:38,080 --> 02:31:42,880
um also the i o controller while really

02:31:41,200 --> 02:31:43,439
important to keep the desktop smooth

02:31:42,880 --> 02:31:46,720
because

02:31:43,439 --> 02:31:49,439
quite often when the desktop is hanging

02:31:46,720 --> 02:31:50,800
it's waiting on on things to be loaded

02:31:49,439 --> 02:31:53,920
from disk

02:31:50,800 --> 02:31:55,920
so it would be very

02:31:53,920 --> 02:31:58,399
useful to have the i o controller fully

02:31:55,920 --> 02:32:01,359
working unfortunately

02:31:58,399 --> 02:32:02,560
as c groups are primarily developed for

02:32:01,359 --> 02:32:04,960
the

02:32:02,560 --> 02:32:05,760
data center and on top of battery fs

02:32:04,960 --> 02:32:07,840
right now

02:32:05,760 --> 02:32:09,439
to actually use these features you need

02:32:07,840 --> 02:32:11,280
to have a battery fs

02:32:09,439 --> 02:32:12,800
right on a partition on your disk you

02:32:11,280 --> 02:32:14,800
can't have like a looks volume in

02:32:12,800 --> 02:32:17,840
between or something like that

02:32:14,800 --> 02:32:18,720
um but if this works then you should get

02:32:17,840 --> 02:32:21,760
very good

02:32:18,720 --> 02:32:23,200
process separation process isolation uh

02:32:21,760 --> 02:32:24,640
between things

02:32:23,200 --> 02:32:26,399
and then you have also the memory

02:32:24,640 --> 02:32:27,920
controller memory is slightly different

02:32:26,399 --> 02:32:30,800
to others because

02:32:27,920 --> 02:32:32,080
uh you have one huge chunk of memory but

02:32:30,800 --> 02:32:34,720
you can't

02:32:32,080 --> 02:32:36,080
fairly like one process might use a lot

02:32:34,720 --> 02:32:38,240
another process might use little and

02:32:36,080 --> 02:32:39,040
things will change over time so it's a

02:32:38,240 --> 02:32:42,479
different thing to

02:32:39,040 --> 02:32:43,760
to distribute fairly um

02:32:42,479 --> 02:32:45,760
but you also get all the same

02:32:43,760 --> 02:32:47,439
information like the current memory

02:32:45,760 --> 02:32:48,960
consumption the statistics and the

02:32:47,439 --> 02:32:50,640
pressure information how often are you

02:32:48,960 --> 02:32:52,800
waiting for memory

02:32:50,640 --> 02:32:54,800
uh to be swapped in and direct back from

02:32:52,800 --> 02:32:56,359
disk the interesting part and something

02:32:54,800 --> 02:32:57,600
that i would like to point out is that

02:32:56,359 --> 02:33:00,080
memory.current

02:32:57,600 --> 02:33:01,040
so the current memory consumption of a c

02:33:00,080 --> 02:33:04,399
group

02:33:01,040 --> 02:33:07,600
actually contains all the

02:33:04,399 --> 02:33:09,280
uh caches so file caches are part of

02:33:07,600 --> 02:33:11,359
what a process needs to run

02:33:09,280 --> 02:33:13,040
so if you have like a process that i

02:33:11,359 --> 02:33:13,600
don't know reads a two gigabyte file at

02:33:13,040 --> 02:33:15,040
startup

02:33:13,600 --> 02:33:17,040
and that does nothing and just sits

02:33:15,040 --> 02:33:17,680
there and no other process needs the

02:33:17,040 --> 02:33:19,600
memory

02:33:17,680 --> 02:33:20,720
you will actually see memory current for

02:33:19,600 --> 02:33:22,960
this process to be

02:33:20,720 --> 02:33:24,399
above two gigabytes of memory because

02:33:22,960 --> 02:33:26,080
this memory is

02:33:24,399 --> 02:33:28,080
being used for the process right now

02:33:26,080 --> 02:33:31,120
even though it's not needed currently

02:33:28,080 --> 02:33:33,600
it's still there sitting um in case the

02:33:31,120 --> 02:33:36,640
process needs it again

02:33:33,600 --> 02:33:38,399
um this is i'm pointing this out

02:33:36,640 --> 02:33:40,560
primarily because people are getting

02:33:38,399 --> 02:33:40,960
confused because memory is not just the

02:33:40,560 --> 02:33:42,479
heap

02:33:40,960 --> 02:33:45,280
the the allocations that you do but

02:33:42,479 --> 02:33:49,120
memory is everything from

02:33:45,280 --> 02:33:51,280
allocations to executables and libraries

02:33:49,120 --> 02:33:52,319
and also like shared stuff in between

02:33:51,280 --> 02:33:54,000
applications

02:33:52,319 --> 02:33:55,920
and then some of it will be swapped out

02:33:54,000 --> 02:33:57,920
some of what will be read back from disk

02:33:55,920 --> 02:34:00,240
when needed

02:33:57,920 --> 02:34:01,280
um so i was going to like show this a

02:34:00,240 --> 02:34:05,439
little bit

02:34:01,280 --> 02:34:05,439
just with the cpu with the

02:34:05,760 --> 02:34:10,960
entire screen now what's going on now

02:34:11,600 --> 02:34:17,840
this worked before ah there

02:34:25,359 --> 02:34:30,000
there we go so what i have here is

02:34:28,000 --> 02:34:32,000
terminal tabs so

02:34:30,000 --> 02:34:33,760
gnome terminal is already smart enough

02:34:32,000 --> 02:34:36,640
to place each tab

02:34:33,760 --> 02:34:37,920
into into a c group so what i i'm doing

02:34:36,640 --> 02:34:40,960
now is i'm running

02:34:37,920 --> 02:34:44,319
test which is just stress energy

02:34:40,960 --> 02:34:48,319
burning cpu um and

02:34:44,319 --> 02:34:49,600
oops apparently i had it already enabled

02:34:48,319 --> 02:34:51,520
so

02:34:49,600 --> 02:34:53,359
if i do don't do anything what you'll

02:34:51,520 --> 02:34:56,000
see is that i have

02:34:53,359 --> 02:34:58,560
one process running in in one top and

02:34:56,000 --> 02:35:01,680
two processes running in another tab

02:34:58,560 --> 02:35:03,439
so this is type one uh test one is

02:35:01,680 --> 02:35:05,040
the first step the dash two is the

02:35:03,439 --> 02:35:07,439
second and you'll see that all of them

02:35:05,040 --> 02:35:09,359
get one third of a cpu core

02:35:07,439 --> 02:35:12,720
they are all pinned to the same score so

02:35:09,359 --> 02:35:14,720
it's 100 overall

02:35:12,720 --> 02:35:16,240
so even though they are in different c

02:35:14,720 --> 02:35:16,640
groups they are still treated the same

02:35:16,240 --> 02:35:20,000
way

02:35:16,640 --> 02:35:21,600
between applications and now if i enable

02:35:20,000 --> 02:35:24,720
the cpu controller

02:35:21,600 --> 02:35:27,680
so i just enable the cpu controller for

02:35:24,720 --> 02:35:30,479
the subtree of the terminal

02:35:27,680 --> 02:35:32,399
what happens is that each tab will

02:35:30,479 --> 02:35:33,680
receive the same cpu amount as one tab

02:35:32,399 --> 02:35:36,640
is running one process

02:35:33,680 --> 02:35:38,560
this process will receive 50 and as the

02:35:36,640 --> 02:35:41,600
other one is running two processes

02:35:38,560 --> 02:35:43,439
it will each one will get about 25 and

02:35:41,600 --> 02:35:44,560
you can see this here very nicely test

02:35:43,439 --> 02:35:47,600
one

02:35:44,560 --> 02:35:49,120
is getting fifty percent test two is

02:35:47,600 --> 02:35:52,160
getting twenty five percent

02:35:49,120 --> 02:35:54,560
of cpu time and then we could easily

02:35:52,160 --> 02:35:56,319
even go further so if i look at the c

02:35:54,560 --> 02:35:58,720
group

02:35:56,319 --> 02:35:58,720
rock

02:35:59,600 --> 02:36:04,000
um c group so i can i can read the c

02:36:02,479 --> 02:36:05,040
group information for the for the

02:36:04,000 --> 02:36:08,000
process so i know

02:36:05,040 --> 02:36:09,600
in which person in which c group it is

02:36:08,000 --> 02:36:12,000
in which is this scope

02:36:09,600 --> 02:36:13,280
so now what i could do is i could even

02:36:12,000 --> 02:36:16,640
further

02:36:13,280 --> 02:36:19,200
uh prefer the test one process

02:36:16,640 --> 02:36:21,359
the c group in there so what i do is i

02:36:19,200 --> 02:36:22,640
echo 500 to cpu weight the default is

02:36:21,359 --> 02:36:24,960
100 so this

02:36:22,640 --> 02:36:25,680
will now receive five times more cpu

02:36:24,960 --> 02:36:28,000
time than

02:36:25,680 --> 02:36:29,680
the test two processes together and

02:36:28,000 --> 02:36:32,880
you'll see that now it's

02:36:29,680 --> 02:36:34,240
eighty percent for test one and

02:36:32,880 --> 02:36:37,439
around like yeah eight point three

02:36:34,240 --> 02:36:39,040
percent okay this is stop being weird

02:36:37,439 --> 02:36:42,640
so you can see that we can change a lot

02:36:39,040 --> 02:36:45,920
of things and this way

02:36:42,640 --> 02:36:47,439
uh configure what's going on and

02:36:45,920 --> 02:36:51,840
actually distribute

02:36:47,439 --> 02:36:51,840
things in a more fairly manner

02:36:54,240 --> 02:36:58,160
okay so another thing that i wanted to

02:36:56,319 --> 02:36:58,640
mention is that facebook is doing a lot

02:36:58,160 --> 02:37:00,319
of

02:36:58,640 --> 02:37:02,720
development for their service on on the

02:37:00,319 --> 02:37:06,399
c group stuff and they have now released

02:37:02,720 --> 02:37:07,280
a demon's demo demo tool like to test

02:37:06,399 --> 02:37:08,960
all the different features and

02:37:07,280 --> 02:37:12,000
everything and it will make sure that

02:37:08,960 --> 02:37:14,399
your system is configured correctly and

02:37:12,000 --> 02:37:16,560
to try it

02:37:14,399 --> 02:37:18,160
so as they are developing all the kernel

02:37:16,560 --> 02:37:19,920
features they

02:37:18,160 --> 02:37:21,200
also test obviously that it's working

02:37:19,920 --> 02:37:22,800
well and then

02:37:21,200 --> 02:37:24,399
they use it to separate the different

02:37:22,800 --> 02:37:28,000
services running on

02:37:24,399 --> 02:37:29,520
on the same server um and this demo like

02:37:28,000 --> 02:37:30,800
check out the demo if you're really

02:37:29,520 --> 02:37:32,880
interested there's a lot of

02:37:30,800 --> 02:37:33,520
documentation there on how it all works

02:37:32,880 --> 02:37:36,720
and

02:37:33,520 --> 02:37:38,800
why it works so

02:37:36,720 --> 02:37:40,399
if you're interested this is a great way

02:37:38,800 --> 02:37:42,800
to learn more about c grips and how they

02:37:40,399 --> 02:37:42,800
are working

02:37:44,319 --> 02:37:47,920
and then on the systemd side what we

02:37:46,560 --> 02:37:49,680
need is

02:37:47,920 --> 02:37:51,680
it it will manage the c groups for us

02:37:49,680 --> 02:37:52,160
and it will sets all the attributes out

02:37:51,680 --> 02:37:54,560
so

02:37:52,160 --> 02:37:56,240
basically what we do is we simply use

02:37:54,560 --> 02:37:59,120
systemd

02:37:56,240 --> 02:38:00,000
and because it makes sense to do it the

02:37:59,120 --> 02:38:02,479
same way between

02:38:00,000 --> 02:38:04,640
cross desktop we actually created this

02:38:02,479 --> 02:38:06,319
draft specification

02:38:04,640 --> 02:38:07,680
it's still a draft there is probably

02:38:06,319 --> 02:38:10,800
going to be a few changes

02:38:07,680 --> 02:38:12,960
but the major things are scoped out so

02:38:10,800 --> 02:38:14,000
the idea is that we split the session

02:38:12,960 --> 02:38:16,160
into three parts which

02:38:14,000 --> 02:38:18,080
is the session slice the with all the

02:38:16,160 --> 02:38:21,200
very important processes that are

02:38:18,080 --> 02:38:22,800
critical for responsiveness and and

02:38:21,200 --> 02:38:24,240
can't easily be restarted

02:38:22,800 --> 02:38:26,399
app slice which is the bucket where

02:38:24,240 --> 02:38:28,720
everything else will go in by default

02:38:26,399 --> 02:38:31,359
and systemd actually just changed so it

02:38:28,720 --> 02:38:34,479
will actually go in there by default

02:38:31,359 --> 02:38:37,439
and then you have background slice where

02:38:34,479 --> 02:38:38,319
we want all the tasks to go that we can

02:38:37,439 --> 02:38:41,280
slow down

02:38:38,319 --> 02:38:42,000
to like crawling halt if in case this

02:38:41,280 --> 02:38:44,640
rest of the system

02:38:42,000 --> 02:38:45,040
needs resources and an important aspect

02:38:44,640 --> 02:38:48,000
here

02:38:45,040 --> 02:38:48,560
is that we're using systemd and what we

02:38:48,000 --> 02:38:51,120
are doing

02:38:48,560 --> 02:38:52,800
is encoding the application id into the

02:38:51,120 --> 02:38:55,840
system the unit name

02:38:52,800 --> 02:38:56,479
so we can from from the process grab

02:38:55,840 --> 02:38:58,800
wrap the c

02:38:56,479 --> 02:39:00,720
group name and then from that just

02:38:58,800 --> 02:39:01,680
extract the application id and know you

02:39:00,720 --> 02:39:04,560
we know

02:39:01,680 --> 02:39:07,040
which application as something is

02:39:04,560 --> 02:39:10,479
belonging to

02:39:07,040 --> 02:39:12,160
the process so in terms of

02:39:10,479 --> 02:39:14,640
the current state and the role that we

02:39:12,160 --> 02:39:17,840
have within the desktops within gnome

02:39:14,640 --> 02:39:18,800
and within in plasma we're a situation

02:39:17,840 --> 02:39:20,800
where

02:39:18,800 --> 02:39:22,240
every time you launch an application now

02:39:20,800 --> 02:39:23,680
it gets put in scientific group and

02:39:22,240 --> 02:39:25,280
that's something we've had in plasma

02:39:23,680 --> 02:39:27,359
since 5.18

02:39:25,280 --> 02:39:29,200
uh gnome's had it for a while as well

02:39:27,359 --> 02:39:30,160
and then the next step is surfacing this

02:39:29,200 --> 02:39:32,880
to your users

02:39:30,160 --> 02:39:33,520
so right now we're attaching putting

02:39:32,880 --> 02:39:35,680
things in c

02:39:33,520 --> 02:39:37,439
groups a kernel can make use of this

02:39:35,680 --> 02:39:39,040
information and that's already happening

02:39:37,439 --> 02:39:39,600
on your system right now if you're up to

02:39:39,040 --> 02:39:42,319
date

02:39:39,600 --> 02:39:44,560
and you should always be up to date um

02:39:42,319 --> 02:39:46,240
but we're not really exposing everything

02:39:44,560 --> 02:39:49,680
that we can be exposing

02:39:46,240 --> 02:39:51,359
so far so in terms of exposing us

02:39:49,680 --> 02:39:54,240
longest classic example is a system

02:39:51,359 --> 02:39:56,720
monitor so in kde plasma

02:39:54,240 --> 02:39:57,680
we had just a big list and we could turn

02:39:56,720 --> 02:39:59,439
it into a tree view

02:39:57,680 --> 02:40:01,200
but it's still just a tree view of

02:39:59,439 --> 02:40:02,720
processes which loses a bit of

02:40:01,200 --> 02:40:04,960
information

02:40:02,720 --> 02:40:06,640
and it's what we had before and this is

02:40:04,960 --> 02:40:07,280
what we're going to see coming up in the

02:40:06,640 --> 02:40:09,680
future

02:40:07,280 --> 02:40:10,399
where we see an application as one thing

02:40:09,680 --> 02:40:12,160
we can see

02:40:10,399 --> 02:40:13,439
aggregated resources that aggregate the

02:40:12,160 --> 02:40:16,479
memory and cpu

02:40:13,439 --> 02:40:18,560
and disk usage and memory as well um

02:40:16,479 --> 02:40:19,680
but then we can drill down if we find we

02:40:18,560 --> 02:40:22,240
want to further

02:40:19,680 --> 02:40:23,920
so we talk with all this information and

02:40:22,240 --> 02:40:27,279
we can present this in a way that's

02:40:23,920 --> 02:40:30,720
really easy to consume no

02:40:27,279 --> 02:40:32,479
tried then yeah we tried so gnome

02:40:30,720 --> 02:40:34,560
actually had some heuristics like

02:40:32,479 --> 02:40:35,840
looking at the binary name figuring out

02:40:34,560 --> 02:40:36,960
trying to figure out which application

02:40:35,840 --> 02:40:39,359
it belongs to and

02:40:36,960 --> 02:40:41,040
and stuff like that uh but that wasn't

02:40:39,359 --> 02:40:42,800
really quite working if you look at this

02:40:41,040 --> 02:40:45,040
screenshot from before which is like

02:40:42,800 --> 02:40:46,399
system is like the catch all where if it

02:40:45,040 --> 02:40:47,279
can't tell where it belongs to it just

02:40:46,399 --> 02:40:49,840
drops it in there

02:40:47,279 --> 02:40:50,560
you see 3.4 gigabytes and then notice

02:40:49,840 --> 02:40:53,200
web the

02:40:50,560 --> 02:40:54,000
the web browser is using 560 megabytes

02:40:53,200 --> 02:40:56,560
here

02:40:54,000 --> 02:40:58,080
um and then if we look at the next slide

02:40:56,560 --> 02:41:01,359
uh

02:40:58,080 --> 02:41:03,200
david thank you um

02:41:01,359 --> 02:41:04,399
what you'll see is that suddenly system

02:41:03,200 --> 02:41:07,279
is only using

02:41:04,399 --> 02:41:08,880
the 1.8 gigabytes and web is using 2.1

02:41:07,279 --> 02:41:09,439
gigabytes these are the same processes i

02:41:08,880 --> 02:41:11,120
just

02:41:09,439 --> 02:41:13,600
patched like the unpatched version and

02:41:11,120 --> 02:41:17,439
the non the patched version

02:41:13,600 --> 02:41:20,560
and so suddenly gnome is actually

02:41:17,439 --> 02:41:22,800
able to to act to better tell

02:41:20,560 --> 02:41:24,479
which memory what what process what

02:41:22,800 --> 02:41:27,200
application is using the memory

02:41:24,479 --> 02:41:28,880
and all it needs is looking at the bit

02:41:27,200 --> 02:41:30,399
figuring out which c group it belongs to

02:41:28,880 --> 02:41:32,880
and then extracting the name from that

02:41:30,399 --> 02:41:33,680
and using that instead yeah so it

02:41:32,880 --> 02:41:34,960
generally it's

02:41:33,680 --> 02:41:36,720
much more reliable because you're

02:41:34,960 --> 02:41:38,800
sending all your data through your core

02:41:36,720 --> 02:41:40,960
and then we can read it

02:41:38,800 --> 02:41:43,120
so we are now lying to you differently

02:41:40,960 --> 02:41:47,680
but the lies are better

02:41:43,120 --> 02:41:50,160
yeah so the next part of this

02:41:47,680 --> 02:41:52,000
as well as surfacing is in terms of

02:41:50,160 --> 02:41:52,720
viewing a stats we can also control

02:41:52,000 --> 02:41:55,120
things

02:41:52,720 --> 02:41:57,040
so one thing we want to land in plasma

02:41:55,120 --> 02:41:58,240
there's a very universal idea that i'm

02:41:57,040 --> 02:41:59,120
sure we're going to see him known very

02:41:58,240 --> 02:42:02,000
soon as well

02:41:59,120 --> 02:42:02,960
it is concept of a foreground booster so

02:42:02,000 --> 02:42:05,200
typically

02:42:02,960 --> 02:42:07,600
if you are stressed for resources and

02:42:05,200 --> 02:42:10,640
your computer has to make a decision of

02:42:07,600 --> 02:42:13,120
what to prioritize your best thing

02:42:10,640 --> 02:42:14,000
is to prioritize the active application

02:42:13,120 --> 02:42:16,080
because that's where

02:42:14,000 --> 02:42:17,760
the user's looking that's where you're

02:42:16,080 --> 02:42:19,040
going to notice any slowdowns or

02:42:17,760 --> 02:42:21,120
glitches or anything

02:42:19,040 --> 02:42:22,880
and it's clearly where they're trying to

02:42:21,120 --> 02:42:26,160
divert their attention

02:42:22,880 --> 02:42:28,720
so it's become an incredibly tiny simple

02:42:26,160 --> 02:42:31,680
task now we have the c groups

02:42:28,720 --> 02:42:32,800
a tiny demon is literally just 50 lines

02:42:31,680 --> 02:42:34,640
just watching for

02:42:32,800 --> 02:42:37,040
what's active window and when this

02:42:34,640 --> 02:42:39,680
happens we just adjust your weights

02:42:37,040 --> 02:42:41,279
and i said what we can do with c groups

02:42:39,680 --> 02:42:43,760
compared to what we could do of nice

02:42:41,279 --> 02:42:46,160
is we can move things up as well as down

02:42:43,760 --> 02:42:48,080
but that allows us to just boost things

02:42:46,160 --> 02:42:50,960
instead of just suppressing these

02:42:48,080 --> 02:42:50,960
background services

02:42:51,840 --> 02:42:55,439
so we can do a similar thing on on the

02:42:53,840 --> 02:42:55,920
system level for the user we already

02:42:55,439 --> 02:43:00,240
mentioned

02:42:55,920 --> 02:43:01,920
that we want to do uh uh just

02:43:00,240 --> 02:43:03,439
shared between users fairly and stuff

02:43:01,920 --> 02:43:05,920
like that um

02:43:03,439 --> 02:43:08,319
so i looked into your resource d which

02:43:05,920 --> 02:43:10,080
was also the idea of

02:43:08,319 --> 02:43:11,920
keeping your desktop responsive so the

02:43:10,080 --> 02:43:12,640
idea is that we first of all enable all

02:43:11,920 --> 02:43:15,120
the resource

02:43:12,640 --> 02:43:16,800
control features because right now gnome

02:43:15,120 --> 02:43:18,560
currently just

02:43:16,800 --> 02:43:21,439
uses the hierarchy uses c groups but

02:43:18,560 --> 02:43:24,000
doesn't actually enable all the features

02:43:21,439 --> 02:43:25,680
but then furthermore it makes sense to

02:43:24,000 --> 02:43:26,319
prefer the currently active user who has

02:43:25,680 --> 02:43:28,319
a great

02:43:26,319 --> 02:43:29,840
graphical session so if you have a mouse

02:43:28,319 --> 02:43:31,359
moving around it should be smooth all

02:43:29,840 --> 02:43:34,160
the time

02:43:31,359 --> 02:43:35,120
and to that and the idea is that we also

02:43:34,160 --> 02:43:37,120
give

02:43:35,120 --> 02:43:38,240
memory guarantees to this user and

02:43:37,120 --> 02:43:42,160
reduce the important

02:43:38,240 --> 02:43:45,200
session processes so what your

02:43:42,160 --> 02:43:46,880
users d just by simply installing it

02:43:45,200 --> 02:43:48,720
effectively does is that all your

02:43:46,880 --> 02:43:50,640
applications are going to be treated as

02:43:48,720 --> 02:43:54,000
equals because it will just

02:43:50,640 --> 02:43:56,160
enable the the c group controller by

02:43:54,000 --> 02:43:58,479
setting the appropriate system the

02:43:56,160 --> 02:43:59,920
configuration option just using a

02:43:58,479 --> 02:44:01,760
drop-in configuration

02:43:59,920 --> 02:44:03,920
so if you have like a parallel compile

02:44:01,760 --> 02:44:05,840
job in one terminal window and then a

02:44:03,920 --> 02:44:08,720
single browser tab like the

02:44:05,840 --> 02:44:11,359
videos call here the video call will

02:44:08,720 --> 02:44:14,399
still get a lot of cpu time and

02:44:11,359 --> 02:44:17,279
can basically use a full uh

02:44:14,399 --> 02:44:18,720
full cpu core for its purpose and you

02:44:17,279 --> 02:44:21,840
also get like for

02:44:18,720 --> 02:44:24,720
protection effectively

02:44:21,840 --> 02:44:24,960
and so so what we do what your research

02:44:24,720 --> 02:44:27,200
d

02:44:24,960 --> 02:44:28,880
does is a tiny demon that sits in the

02:44:27,200 --> 02:44:31,120
background and all it does is

02:44:28,880 --> 02:44:32,160
look at which user is currently active

02:44:31,120 --> 02:44:35,200
on a graphical

02:44:32,160 --> 02:44:39,279
login and this user

02:44:35,200 --> 02:44:41,439
will then will then receive a share of

02:44:39,279 --> 02:44:42,800
of memory that is guaranteed for it so

02:44:41,439 --> 02:44:44,479
it can actually

02:44:42,800 --> 02:44:46,399
right now it's like 250 megabytes by

02:44:44,479 --> 02:44:46,640
default so 250 megabytes share of memory

02:44:46,399 --> 02:44:48,399
is

02:44:46,640 --> 02:44:50,479
passed to the user and this is then

02:44:48,399 --> 02:44:54,640
passed to the important

02:44:50,479 --> 02:44:55,279
session processes and so if an ssh user

02:44:54,640 --> 02:44:57,359
comes in

02:44:55,279 --> 02:44:59,359
and runs their simulation obviously not

02:44:57,359 --> 02:45:02,640
using matlab but using numpy and

02:44:59,359 --> 02:45:04,240
scipy then it will not slow down the

02:45:02,640 --> 02:45:07,600
rest of the system

02:45:04,240 --> 02:45:10,240
uh and the graphical user

02:45:07,600 --> 02:45:10,960
uh so effectively what we can achieve is

02:45:10,240 --> 02:45:12,720
there's some

02:45:10,960 --> 02:45:14,880
protection of the session from threshing

02:45:12,720 --> 02:45:16,600
because with digital memory guarantees

02:45:14,880 --> 02:45:19,439
it will at least have some

02:45:16,600 --> 02:45:22,240
responsiveness left

02:45:19,439 --> 02:45:24,399
and this compensator receives also a

02:45:22,240 --> 02:45:26,720
greater cpu sharing

02:45:24,399 --> 02:45:28,319
and this way all the important services

02:45:26,720 --> 02:45:30,160
all everything should

02:45:28,319 --> 02:45:32,000
stay reasonably responsive and most

02:45:30,160 --> 02:45:34,319
times

02:45:32,000 --> 02:45:35,439
so it's a very simple piece of code

02:45:34,319 --> 02:45:37,120
really that's a small

02:45:35,439 --> 02:45:38,479
policy daemon and system the unit

02:45:37,120 --> 02:45:40,479
configurations

02:45:38,479 --> 02:45:41,600
we have rolled it out in fedora 33 by

02:45:40,479 --> 02:45:44,880
default now

02:45:41,600 --> 02:45:46,800
so you get it there out of the box and

02:45:44,880 --> 02:45:48,000
elsewhere i'm not sure if anyone else

02:45:46,800 --> 02:45:50,399
has picked it up but

02:45:48,000 --> 02:45:52,560
you can also just check it out on gitlab

02:45:50,399 --> 02:45:57,840
your resource d if you look for it

02:45:52,560 --> 02:45:57,840
under my username

02:45:57,920 --> 02:46:01,520
i'm gonna be presented again so what

02:46:00,160 --> 02:46:03,520
does this mean for you

02:46:01,520 --> 02:46:05,359
as an application developer we're here

02:46:03,520 --> 02:46:08,160
at last

02:46:05,359 --> 02:46:09,680
so most of you hopefully are application

02:46:08,160 --> 02:46:11,359
developers

02:46:09,680 --> 02:46:13,439
trying to make all applications work

02:46:11,359 --> 02:46:15,200
excellently on linux

02:46:13,439 --> 02:46:17,840
so we're talking from a desktop point of

02:46:15,200 --> 02:46:19,279
view and

02:46:17,840 --> 02:46:21,439
generally if you're an application

02:46:19,279 --> 02:46:23,920
developer you don't need to do

02:46:21,439 --> 02:46:24,640
anything because if the application it's

02:46:23,920 --> 02:46:27,840
a desktop

02:46:24,640 --> 02:46:29,840
itself that when you open

02:46:27,840 --> 02:46:32,880
your um an application from the start

02:46:29,840 --> 02:46:35,680
menu or whatever your name equivalent is

02:46:32,880 --> 02:46:38,160
it has a job of putting it in a c group

02:46:35,680 --> 02:46:39,600
adding in metadata typing everything

02:46:38,160 --> 02:46:42,240
so you generally don't need to do

02:46:39,600 --> 02:46:43,120
anything but there is a case where

02:46:42,240 --> 02:46:46,240
applications

02:46:43,120 --> 02:46:46,800
then launch other applications so if you

02:46:46,240 --> 02:46:49,120
open

02:46:46,800 --> 02:46:50,560
a link in your application you're

02:46:49,120 --> 02:46:52,640
opening a link

02:46:50,560 --> 02:46:54,319
or if you're creating your own file

02:46:52,640 --> 02:46:56,160
browser from scratch because you don't

02:46:54,319 --> 02:46:58,800
like the ones we provide

02:46:56,160 --> 02:47:00,319
um then obviously when you click on a

02:46:58,800 --> 02:47:01,840
file it's going to open a whole new

02:47:00,319 --> 02:47:03,760
application

02:47:01,840 --> 02:47:04,880
so from your point of view as an

02:47:03,760 --> 02:47:06,080
application developer

02:47:04,880 --> 02:47:09,120
the important part is to use the

02:47:06,080 --> 02:47:12,319
relevant high level api that we get from

02:47:09,120 --> 02:47:13,040
the performance from the stacks so from

02:47:12,319 --> 02:47:14,960
kde

02:47:13,040 --> 02:47:16,720
that's open url job or application

02:47:14,960 --> 02:47:19,439
launch job and this takes

02:47:16,720 --> 02:47:20,160
care of all of his details under hood

02:47:19,439 --> 02:47:23,359
for no

02:47:20,160 --> 02:47:25,200
that's g app info launcher eyes or this

02:47:23,359 --> 02:47:27,040
other one

02:47:25,200 --> 02:47:29,279
and that will take care of all of the

02:47:27,040 --> 02:47:29,760
details if you're running inside a flat

02:47:29,279 --> 02:47:31,279
pack

02:47:29,760 --> 02:47:33,520
you're going to need to use a relevant

02:47:31,279 --> 02:47:34,880
portal api anyway because otherwise

02:47:33,520 --> 02:47:37,120
nothing's going to work

02:47:34,880 --> 02:47:39,279
and if you use a relevant portal api

02:47:37,120 --> 02:47:41,040
again all of this will be taken care of

02:47:39,279 --> 02:47:42,720
under hood and you won't need to worry

02:47:41,040 --> 02:47:45,680
about it

02:47:42,720 --> 02:47:47,040
it's a dream but you still have all of

02:47:45,680 --> 02:47:48,800
the options available

02:47:47,040 --> 02:47:52,640
so we can capitalize on everything as a

02:47:48,800 --> 02:47:52,640
desktop but you as a service can as well

02:47:53,760 --> 02:47:58,800
right so um let's just give give a few

02:47:57,439 --> 02:48:01,439
simple examples

02:47:58,800 --> 02:48:03,120
and and some views so usually right now

02:48:01,439 --> 02:48:06,240
if you if you have a service that

02:48:03,120 --> 02:48:07,600
starts at login you might ship in xdg

02:48:06,240 --> 02:48:09,840
out to start fire and that's

02:48:07,600 --> 02:48:11,279
actually still fine to do in general but

02:48:09,840 --> 02:48:12,000
if you want to get more control over

02:48:11,279 --> 02:48:14,399
this

02:48:12,000 --> 02:48:15,760
the way to go is to use dbus activation

02:48:14,399 --> 02:48:17,680
probably so

02:48:15,760 --> 02:48:19,359
the best way what you can do is you ship

02:48:17,680 --> 02:48:20,560
a debuff service instead you activate

02:48:19,359 --> 02:48:24,080
that debuff service

02:48:20,560 --> 02:48:27,200
and then dbus uh you can configure it to

02:48:24,080 --> 02:48:29,040
start a systemd service unit uh in order

02:48:27,200 --> 02:48:30,720
to run the debuss service

02:48:29,040 --> 02:48:32,160
so at that point you have a system the

02:48:30,720 --> 02:48:33,040
unit file that you can write and that

02:48:32,160 --> 02:48:34,319
you can provide

02:48:33,040 --> 02:48:36,399
so you can simply dump in all the

02:48:34,319 --> 02:48:38,160
information and you can configure it as

02:48:36,399 --> 02:48:40,160
much as you like

02:48:38,160 --> 02:48:41,920
uh while getting all the different

02:48:40,160 --> 02:48:43,520
features that systemd has that the

02:48:41,920 --> 02:48:45,439
resource configuration has

02:48:43,520 --> 02:48:47,279
and improving your integration into the

02:48:45,439 --> 02:48:50,560
desktop

02:48:47,279 --> 02:48:52,880
so this is like a very good way of

02:48:50,560 --> 02:48:54,560
of being able to leverage the features

02:48:52,880 --> 02:48:55,680
just run everything inside the systemd

02:48:54,560 --> 02:48:57,920
service

02:48:55,680 --> 02:48:58,800
as much as possible and then there you

02:48:57,920 --> 02:49:01,760
can set the

02:48:58,800 --> 02:49:03,439
for example the systemd slice the set

02:49:01,760 --> 02:49:06,080
custom resource limit or

02:49:03,439 --> 02:49:06,880
also restrict access to system resources

02:49:06,080 --> 02:49:08,720
and other things

02:49:06,880 --> 02:49:11,120
like you could prevent your application

02:49:08,720 --> 02:49:14,720
from running fork for example

02:49:11,120 --> 02:49:16,399
so um and simple example might be like a

02:49:14,720 --> 02:49:18,479
backup application which should run in

02:49:16,399 --> 02:49:19,920
the background it should never slow down

02:49:18,479 --> 02:49:22,720
other applications that are running on

02:49:19,920 --> 02:49:24,960
the system so you want to make the

02:49:22,720 --> 02:49:26,319
uh the desktop aware of this background

02:49:24,960 --> 02:49:27,920
service running so

02:49:26,319 --> 02:49:30,319
this is why we want to place it into

02:49:27,920 --> 02:49:31,920
background slice

02:49:30,319 --> 02:49:33,680
and you also want to make sure that it's

02:49:31,920 --> 02:49:36,640
not hitting the disk too much

02:49:33,680 --> 02:49:37,840
or preventing other applications from

02:49:36,640 --> 02:49:39,279
from

02:49:37,840 --> 02:49:41,760
having the files and memory that they

02:49:39,279 --> 02:49:44,080
need so the way to do is

02:49:41,760 --> 02:49:46,000
as i said before you just put create a

02:49:44,080 --> 02:49:47,200
debuff service just only for the backup

02:49:46,000 --> 02:49:49,359
job itself

02:49:47,200 --> 02:49:51,120
and you put it into or you could also

02:49:49,359 --> 02:49:51,840
put it into transient scope which is a

02:49:51,120 --> 02:49:53,680
different way

02:49:51,840 --> 02:49:55,840
which is probably more complicated to do

02:49:53,680 --> 02:49:58,000
really and

02:49:55,840 --> 02:50:00,720
then you configure this service by

02:49:58,000 --> 02:50:04,240
setting the slice to background slice so

02:50:00,720 --> 02:50:07,359
we tell that it's running in the system

02:50:04,240 --> 02:50:08,720
in the background so the norm the the

02:50:07,359 --> 02:50:10,880
shell knows what's going on

02:50:08,720 --> 02:50:12,319
the desktop and then what you would also

02:50:10,880 --> 02:50:14,399
do is set memory high

02:50:12,319 --> 02:50:16,880
to a relatively low value and memory

02:50:14,399 --> 02:50:19,920
high as i explained earlier

02:50:16,880 --> 02:50:23,520
also contains file caches so

02:50:19,920 --> 02:50:25,120
that means you effectively engage the

02:50:23,520 --> 02:50:26,479
process to a pretty small amount of

02:50:25,120 --> 02:50:28,080
memory on the system

02:50:26,479 --> 02:50:30,319
but you also make sure that all the file

02:50:28,080 --> 02:50:34,399
caches that anything else might need

02:50:30,319 --> 02:50:36,000
will remain cached and

02:50:34,399 --> 02:50:37,680
and all the other processes won't be

02:50:36,000 --> 02:50:39,680
inhibited and

02:50:37,680 --> 02:50:41,120
another scenario would be the terminal

02:50:39,680 --> 02:50:44,000
application or also like

02:50:41,120 --> 02:50:46,160
a browser might be similar kind of thing

02:50:44,000 --> 02:50:48,160
where you want each terminal window each

02:50:46,160 --> 02:50:49,439
tab to be treated equally

02:50:48,160 --> 02:50:51,680
and this is this is with the

02:50:49,439 --> 02:50:53,439
demonstration that i did where in gram

02:50:51,680 --> 02:50:55,760
terminal it's already possible to do

02:50:53,439 --> 02:50:57,439
by doing a very simple drop-in

02:50:55,760 --> 02:51:01,279
configuration

02:50:57,439 --> 02:51:02,640
uh so so in that case what you would do

02:51:01,279 --> 02:51:04,560
is you would spawn your

02:51:02,640 --> 02:51:06,640
sub-process and you would create a

02:51:04,560 --> 02:51:08,640
transient scope for

02:51:06,640 --> 02:51:10,960
on systemd so you tell systemd all right

02:51:08,640 --> 02:51:13,920
this this new process is actually

02:51:10,960 --> 02:51:15,200
its own group and you move it over and

02:51:13,920 --> 02:51:18,319
then

02:51:15,200 --> 02:51:20,240
by doing this uh you can also configure

02:51:18,319 --> 02:51:21,840
it using a drop in so the user can say

02:51:20,240 --> 02:51:25,040
tell systemd to configure it

02:51:21,840 --> 02:51:27,680
if they wanted to just by using by

02:51:25,040 --> 02:51:31,040
matching on the name basically so vte

02:51:27,680 --> 02:51:33,359
genome terminal calls it vte-spawn dash

02:51:31,040 --> 02:51:35,040
something and then we can configure

02:51:33,359 --> 02:51:38,399
everything that starts with vte

02:51:35,040 --> 02:51:39,279
spawn dash to uh to change its

02:51:38,399 --> 02:51:41,760
attributes so

02:51:39,279 --> 02:51:42,399
an example might be that you put it into

02:51:41,760 --> 02:51:45,760
slice

02:51:42,399 --> 02:51:46,960
app dash orgmite terminal so app is the

02:51:45,760 --> 02:51:49,359
prefix

02:51:46,960 --> 02:51:50,399
so we order it hierarchically underneath

02:51:49,359 --> 02:51:52,800
app.slice

02:51:50,399 --> 02:51:54,399
this is how systemd does it so the dash

02:51:52,800 --> 02:51:57,359
is actually like the hierarchy

02:51:54,399 --> 02:52:01,680
so you get app and then app app.slice

02:51:57,359 --> 02:52:01,680
and then underneath app.js

02:52:01,920 --> 02:52:05,600
so we have a hierarchy there and we're

02:52:04,319 --> 02:52:07,520
telling the

02:52:05,600 --> 02:52:09,680
desktop that this is actually belonging

02:52:07,520 --> 02:52:11,920
to my terminal

02:52:09,680 --> 02:52:13,439
and then kill mode in this case would

02:52:11,920 --> 02:52:15,680
set process because

02:52:13,439 --> 02:52:17,120
if you close a tab you could you have

02:52:15,680 --> 02:52:18,479
now have the choice do you want to kill

02:52:17,120 --> 02:52:19,120
all the processes that are inside the

02:52:18,479 --> 02:52:21,920
tab

02:52:19,120 --> 02:52:22,720
or do you want to leave the process

02:52:21,920 --> 02:52:24,560
running and just

02:52:22,720 --> 02:52:26,479
kill the main person that you initially

02:52:24,560 --> 02:52:28,080
started and this is what we show you

02:52:26,479 --> 02:52:29,520
issues here is that we only call the

02:52:28,080 --> 02:52:32,000
main process because

02:52:29,520 --> 02:52:33,920
people usually expect expect things like

02:52:32,000 --> 02:52:36,080
screen to keep continue running

02:52:33,920 --> 02:52:37,840
and then if you just enable cpu weight

02:52:36,080 --> 02:52:40,080
and ao weight to 100

02:52:37,840 --> 02:52:42,160
which is the default value you get the

02:52:40,080 --> 02:52:44,000
effect that i showed earlier that

02:52:42,160 --> 02:52:46,720
the resources are distributed evenly

02:52:44,000 --> 02:52:46,720
between the tabs

02:52:48,560 --> 02:52:51,760
so it's quite a lot of extra content i

02:52:50,479 --> 02:52:52,720
can see already seeing the questions

02:52:51,760 --> 02:52:54,319
people are going

02:52:52,720 --> 02:52:56,399
oh what are the specific things i need

02:52:54,319 --> 02:52:58,399
to learn and

02:52:56,399 --> 02:53:01,040
obviously it's quite a lot to say but we

02:52:58,399 --> 02:53:03,520
can just give you links instead for

02:53:01,040 --> 02:53:05,120
easy this so it is a specification this

02:53:03,520 --> 02:53:06,240
is a cross desktop standard that we're

02:53:05,120 --> 02:53:09,359
working on because

02:53:06,240 --> 02:53:11,520
it is important now we all use the same

02:53:09,359 --> 02:53:13,680
naming scheme for our slices and all

02:53:11,520 --> 02:53:15,520
naming scheme for

02:53:13,680 --> 02:53:16,960
how we refer to your different c groups

02:53:15,520 --> 02:53:19,120
particularly if we're trying to retrieve

02:53:16,960 --> 02:53:20,080
information from that so upstream

02:53:19,120 --> 02:53:22,800
specification

02:53:20,080 --> 02:53:25,200
is still a draft but it's mostly what

02:53:22,800 --> 02:53:27,120
you should be working against

02:53:25,200 --> 02:53:29,359
i've also put a comprehensive list of

02:53:27,120 --> 02:53:31,520
code examples of how to

02:53:29,359 --> 02:53:33,200
use that application i mentioned a high

02:53:31,520 --> 02:53:34,640
level api earlier which

02:53:33,200 --> 02:53:37,200
you're probably going to want to use

02:53:34,640 --> 02:53:38,000
anyway but i've also put in low level

02:53:37,200 --> 02:53:40,399
examples that

02:53:38,000 --> 02:53:41,359
work with straight-up c straight-up

02:53:40,399 --> 02:53:43,840
g-lib

02:53:41,359 --> 02:53:44,399
even just a bash version as well or

02:53:43,840 --> 02:53:46,080
basically

02:53:44,399 --> 02:53:47,840
how to approach all your different

02:53:46,080 --> 02:53:50,319
stacked layers of the stack

02:53:47,840 --> 02:53:51,840
and how you can do this obviously this

02:53:50,319 --> 02:53:53,760
isn't the best place for it just being

02:53:51,840 --> 02:53:55,600
on a random

02:53:53,760 --> 02:53:57,840
gist but we need to come up with a way

02:53:55,600 --> 02:54:01,120
of coordinating our documentation

02:53:57,840 --> 02:54:01,920
also as i mentioned it's something we've

02:54:01,120 --> 02:54:04,319
both been doing

02:54:01,920 --> 02:54:05,439
on our different sides uh ben did a talk

02:54:04,319 --> 02:54:07,520
at

02:54:05,439 --> 02:54:09,920
at academy ben also did a talk at linux

02:54:07,520 --> 02:54:12,640
plumbers talking to colonel people about

02:54:09,920 --> 02:54:13,040
how actually using the features they did

02:54:12,640 --> 02:54:15,840
um

02:54:13,040 --> 02:54:17,359
so if you want to see the same talk

02:54:15,840 --> 02:54:20,240
again but with more of a

02:54:17,359 --> 02:54:22,800
twist towards a specific part um there's

02:54:20,240 --> 02:54:24,399
some relevant links here

02:54:22,800 --> 02:54:26,240
so thanks for listening if anyone's got

02:54:24,399 --> 02:54:27,040
any questions and i can see what people

02:54:26,240 --> 02:54:30,399
do

02:54:27,040 --> 02:54:32,000
and we're happy to go through them

02:54:30,399 --> 02:54:34,000
so the first question is if an

02:54:32,000 --> 02:54:36,479
application starts another application

02:54:34,000 --> 02:54:38,080
it should have its own slice properly i

02:54:36,479 --> 02:54:39,279
guess this needs additional work by the

02:54:38,080 --> 02:54:42,080
first application

02:54:39,279 --> 02:54:42,880
so yes this was what we were going into

02:54:42,080 --> 02:54:45,520
earlier

02:54:42,880 --> 02:54:46,800
you in the usual case you just use the

02:54:45,520 --> 02:54:48,720
high level apis and

02:54:46,800 --> 02:54:49,920
the desktop will do the same the right

02:54:48,720 --> 02:54:52,720
thing for you

02:54:49,920 --> 02:54:54,560
with with g-lib and gnome right now the

02:54:52,720 --> 02:54:56,720
patches are currently still pending

02:54:54,560 --> 02:54:58,800
review but um it's going to happen so if

02:54:56,720 --> 02:55:00,800
you use the high-level application

02:54:58,800 --> 02:55:03,200
apis to launch application or to launch

02:55:00,800 --> 02:55:06,560
urls the right thing will happen

02:55:03,200 --> 02:55:07,120
if you spawn like use the low-level apis

02:55:06,560 --> 02:55:10,880
to

02:55:07,120 --> 02:55:12,399
to launch something uh a larger process

02:55:10,880 --> 02:55:13,520
that you want to encapsulate then you'll

02:55:12,399 --> 02:55:15,120
need to do extra work

02:55:13,520 --> 02:55:18,000
and you'll need to do some stuff

02:55:15,120 --> 02:55:19,920
yourself but like one of the tricks that

02:55:18,000 --> 02:55:21,760
to work around this is you use the best

02:55:19,920 --> 02:55:24,080
activation for this part

02:55:21,760 --> 02:55:25,279
um so that's a good way of avoiding

02:55:24,080 --> 02:55:28,479
having to deal with

02:55:25,279 --> 02:55:29,040
the low level stuff and the second

02:55:28,479 --> 02:55:30,560
question

02:55:29,040 --> 02:55:31,840
what indicates counters application

02:55:30,560 --> 02:55:33,040
developers basically the same thing

02:55:31,840 --> 02:55:34,640
again it's

02:55:33,040 --> 02:55:36,319
you want to be using a high level apis

02:55:34,640 --> 02:55:37,600
anyway because it's important details

02:55:36,319 --> 02:55:39,680
like startup ids

02:55:37,600 --> 02:55:41,760
for window management purposes that it's

02:55:39,680 --> 02:55:43,600
best to use regardless

02:55:41,760 --> 02:55:45,279
um is it a timeline for just being

02:55:43,600 --> 02:55:46,880
enabled in norman kde

02:55:45,279 --> 02:55:48,720
as i mentioned before instead of

02:55:46,880 --> 02:55:51,040
actually

02:55:48,720 --> 02:55:52,080
applying the c groups we both have this

02:55:51,040 --> 02:55:54,479
enabled already

02:55:52,080 --> 02:55:56,640
and it's from the outside or kd side it

02:55:54,479 --> 02:55:59,359
just ideally do a silent roll out

02:55:56,640 --> 02:56:00,319
that won't break anything it just tags

02:55:59,359 --> 02:56:02,560
things and

02:56:00,319 --> 02:56:03,920
we've left all your weights the same so

02:56:02,560 --> 02:56:06,720
it'll be some subtle

02:56:03,920 --> 02:56:08,000
uh changes to resource management at a

02:56:06,720 --> 02:56:09,520
kernel level but

02:56:08,000 --> 02:56:11,120
there's nothing that should break a user

02:56:09,520 --> 02:56:13,040
experience and it will just sort

02:56:11,120 --> 02:56:15,920
slowly keep adding a different parts on

02:56:13,040 --> 02:56:20,000
top as we can make more reliance on

02:56:15,920 --> 02:56:21,760
fixing these tiny edge cases from is

02:56:20,000 --> 02:56:23,200
from the fact that not everything is

02:56:21,760 --> 02:56:26,240
being spawned correctly

02:56:23,200 --> 02:56:28,640
with the part above so exactly so

02:56:26,240 --> 02:56:30,560
like for example in genome right now uh

02:56:28,640 --> 02:56:30,880
the fire browser because the g-leap apis

02:56:30,560 --> 02:56:32,319
aren't

02:56:30,880 --> 02:56:35,680
merged yet the fire browser will

02:56:32,319 --> 02:56:38,720
actually not if you if you launch a like

02:56:35,680 --> 02:56:40,479
a pdf viewer in using naturals

02:56:38,720 --> 02:56:42,399
in gnome then it will be accounted to

02:56:40,479 --> 02:56:45,279
naturalist right now

02:56:42,399 --> 02:56:45,600
uh so these kind of things kind of makes

02:56:45,279 --> 02:56:47,680
it

02:56:45,600 --> 02:56:49,600
not sub optimal to enable all the

02:56:47,680 --> 02:56:51,200
features right now we actually

02:56:49,600 --> 02:56:54,160
some sometimes it's enabled like on

02:56:51,200 --> 02:56:56,399
fedora 33 to be enabled

02:56:54,160 --> 02:56:58,160
for gnome for kde not yet because the

02:56:56,399 --> 02:57:01,279
systemd work hasn't been

02:56:58,160 --> 02:57:04,399
there is not there yet in in fedora

02:57:01,279 --> 02:57:05,359
but and on other distributions it will

02:57:04,399 --> 02:57:07,040
not be enabled

02:57:05,359 --> 02:57:09,040
and also there's a lot of ongoing

02:57:07,040 --> 02:57:09,600
development with regard to om killing

02:57:09,040 --> 02:57:11,359
and

02:57:09,600 --> 02:57:13,760
other parts of the resource control

02:57:11,359 --> 02:57:14,479
problem so you'll see a lot of changes

02:57:13,760 --> 02:57:16,720
coming up

02:57:14,479 --> 02:57:18,319
in the next one or two years i would say

02:57:16,720 --> 02:57:18,560
yeah but i don't think it's going to be

02:57:18,319 --> 02:57:21,200
a

02:57:18,560 --> 02:57:22,240
definitive it's on or it's off it'll be

02:57:21,200 --> 02:57:23,920
as gradual

02:57:22,240 --> 02:57:25,680
or we're going to rely on this for this

02:57:23,920 --> 02:57:27,359
feature or it's going to be a fallback

02:57:25,680 --> 02:57:28,080
heuristic for this or it's going to be

02:57:27,359 --> 02:57:29,680
used here

02:57:28,080 --> 02:57:32,000
and we'll just see these tiny little

02:57:29,680 --> 02:57:33,920
parts come over time

02:57:32,000 --> 02:57:35,359
there might also be changes for for

02:57:33,920 --> 02:57:36,160
application developers with like

02:57:35,359 --> 02:57:39,439
systemdo

02:57:36,160 --> 02:57:41,359
md where you can say then say uh if my

02:57:39,439 --> 02:57:44,800
application is waiting a lot for io

02:57:41,359 --> 02:57:47,920
please kill it um

02:57:44,800 --> 02:57:49,920
yeah in terms of phone devices

02:57:47,920 --> 02:57:52,880
it resources are even more strange there

02:57:49,920 --> 02:57:55,200
so this absolutely applies

02:57:52,880 --> 02:57:56,800
basically it's almost more important

02:57:55,200 --> 02:57:58,960
another thing that

02:57:56,800 --> 02:57:59,840
secrets provide uh which was not

02:57:58,960 --> 02:58:02,160
mentioned yet

02:57:59,840 --> 02:58:05,120
is this is another controller called the

02:58:02,160 --> 02:58:07,520
freezer controller um

02:58:05,120 --> 02:58:08,319
which allows you to just stop an entire

02:58:07,520 --> 02:58:11,200
application

02:58:08,319 --> 02:58:11,680
at once and compared with six stop it

02:58:11,200 --> 02:58:14,479
work

02:58:11,680 --> 02:58:15,840
it fixes a couple of bugs up um you just

02:58:14,479 --> 02:58:18,000
can't

02:58:15,840 --> 02:58:18,880
your application is unable to prevent

02:58:18,000 --> 02:58:20,960
being frozen

02:58:18,880 --> 02:58:22,240
the control group can just freeze it so

02:58:20,960 --> 02:58:24,319
it's not something we can use

02:58:22,240 --> 02:58:26,000
right now but it's something that in the

02:58:24,319 --> 02:58:27,520
future could be really really cool and

02:58:26,000 --> 02:58:30,640
really useful for

02:58:27,520 --> 02:58:33,040
for your phone yeah or like

02:58:30,640 --> 02:58:34,560
completely suspending backup tasks while

02:58:33,040 --> 02:58:36,399
background tasks what a

02:58:34,560 --> 02:58:38,399
a game is running or something like that

02:58:36,399 --> 02:58:39,840
which also makes sense

02:58:38,399 --> 02:58:41,920
um ask your comment about existing

02:58:39,840 --> 02:58:43,439
launches as a general point

02:58:41,920 --> 02:58:46,800
yes existing launches will need to be

02:58:43,439 --> 02:58:49,359
changed on a specific point with steam

02:58:46,800 --> 02:58:51,760
um we've been speaking to steam people

02:58:49,359 --> 02:58:53,120
um i can say that they

02:58:51,760 --> 02:58:55,359
were one of the people that pushed

02:58:53,120 --> 02:58:56,000
towards this because having a high frame

02:58:55,359 --> 02:58:58,080
rate of

02:58:56,000 --> 02:59:00,240
your focused application if that's a

02:58:58,080 --> 02:59:02,640
game it's something they care about and

02:59:00,240 --> 02:59:03,520
they've actually reached out um ahead of

02:59:02,640 --> 02:59:06,560
time to

02:59:03,520 --> 02:59:08,319
say this is a goal that we want

02:59:06,560 --> 02:59:11,920
and it's something that they're going to

02:59:08,319 --> 02:59:11,920
be adding at all

02:59:12,840 --> 02:59:15,439
completely

02:59:14,080 --> 02:59:17,279
in terms of how can we help make this

02:59:15,439 --> 02:59:20,399
possible uh one of the

02:59:17,279 --> 02:59:24,240
important points is if you run systemd

02:59:20,399 --> 02:59:27,359
cgls which is equivalent like

02:59:24,240 --> 02:59:29,120
of ps but it shows a high hierarchy uh

02:59:27,359 --> 02:59:31,920
thank you whoever put that in your notes

02:59:29,120 --> 02:59:32,479
um and you can see uh slices and you can

02:59:31,920 --> 02:59:35,120
see

02:59:32,479 --> 02:59:36,319
the hierarchy building up and just run

02:59:35,120 --> 02:59:39,600
that look for anything that

02:59:36,319 --> 02:59:42,800
seems out of place and

02:59:39,600 --> 02:59:44,479
report it fix it yeah

02:59:42,800 --> 02:59:46,240
that would be a good thing um then the

02:59:44,479 --> 02:59:47,840
other thing is uh

02:59:46,240 --> 02:59:49,760
that for example systemd is getting

02:59:47,840 --> 02:59:52,640
systemvo md right now and

02:59:49,760 --> 02:59:53,279
the idea generally would be that rather

02:59:52,640 --> 02:59:55,840
than

02:59:53,279 --> 02:59:58,000
uh that we start using that to kill

02:59:55,840 --> 02:59:59,920
processes so the kernel om killer

02:59:58,000 --> 03:00:01,680
will only kill purses when the system is

02:59:59,920 --> 03:00:03,600
already frozen basically

03:00:01,680 --> 03:00:06,640
and then in fedora we are using earlier

03:00:03,600 --> 03:00:08,880
m now which kills processors when

03:00:06,640 --> 03:00:10,000
let's say when there is not enough

03:00:08,880 --> 03:00:12,880
memory available for

03:00:10,000 --> 03:00:15,279
caches anymore but the general idea

03:00:12,880 --> 03:00:17,279
would be that with systemd omd what we

03:00:15,279 --> 03:00:19,439
do is we kill processors when

03:00:17,279 --> 03:00:21,200
we actually are hitting the disk too

03:00:19,439 --> 03:00:21,920
much and the system is grinding to a

03:00:21,200 --> 03:00:24,319
halt

03:00:21,920 --> 03:00:26,160
so if some people are interested it

03:00:24,319 --> 03:00:27,359
would be really cool if they could grab

03:00:26,160 --> 03:00:29,600
the latest systemd

03:00:27,359 --> 03:00:31,359
which contains systemdomd and start

03:00:29,600 --> 03:00:31,920
playing with the different settings and

03:00:31,359 --> 03:00:34,800
start

03:00:31,920 --> 03:00:36,240
coming up with scenarios on how to test

03:00:34,800 --> 03:00:40,240
whether the desktop

03:00:36,240 --> 03:00:42,479
is remaining responsive um under load

03:00:40,240 --> 03:00:43,680
and one other thing if you really want

03:00:42,479 --> 03:00:45,840
to help a one part

03:00:43,680 --> 03:00:47,520
we've got in plasma at the moment is

03:00:45,840 --> 03:00:50,319
using systemd to manage all of

03:00:47,520 --> 03:00:51,040
our background dungeons and whatnot

03:00:50,319 --> 03:00:52,560
which is

03:00:51,040 --> 03:00:55,040
somewhat separate from the concept of

03:00:52,560 --> 03:00:58,000
managing applications and right now this

03:00:55,040 --> 03:01:00,080
is off by default on plasma but hidden

03:00:58,000 --> 03:01:00,800
behind a config option that we can turn

03:01:00,080 --> 03:01:03,760
on

03:01:00,800 --> 03:01:04,240
and i have a blog post that says where

03:01:03,760 --> 03:01:05,920
that

03:01:04,240 --> 03:01:07,279
config option is if you google for it

03:01:05,920 --> 03:01:09,120
i'm sure it will come up

03:01:07,279 --> 03:01:12,880
or just reach out and ping me if you

03:01:09,120 --> 03:01:12,880
want to enable it and have any questions

03:01:14,800 --> 03:01:17,920
i think we're probably out of time yeah

03:01:17,359 --> 03:01:19,840
yeah

03:01:17,920 --> 03:01:21,680
um actually we technically have five

03:01:19,840 --> 03:01:24,800
more minutes if there are

03:01:21,680 --> 03:01:27,600
questions please answer them

03:01:24,800 --> 03:01:28,399
no i'm not gonna watch anywhere yeah

03:01:27,600 --> 03:01:31,760
that's fine

03:01:28,399 --> 03:01:33,840
one's coming in right now okay

03:01:31,760 --> 03:01:35,600
ben you should read it out in real time

03:01:33,840 --> 03:01:36,880
you mentioned the debuff starting for

03:01:35,600 --> 03:01:40,800
getting into management

03:01:36,880 --> 03:01:43,040
is that only required when you

03:01:40,800 --> 03:01:44,960
okay is that only required when you

03:01:43,040 --> 03:01:47,840
provide arguments or also

03:01:44,960 --> 03:01:49,760
for background processes that use config

03:01:47,840 --> 03:01:53,520
files

03:01:49,760 --> 03:01:56,880
um not sure what config files means here

03:01:53,520 --> 03:01:57,760
uh so i assume if you have your own

03:01:56,880 --> 03:02:01,600
specific

03:01:57,760 --> 03:02:05,840
uh sorry

03:02:01,600 --> 03:02:09,439
yeah you finished okay so

03:02:05,840 --> 03:02:11,680
um in by default dbs will already start

03:02:09,439 --> 03:02:13,439
each application if you use dbus

03:02:11,680 --> 03:02:14,840
activation or something like that then

03:02:13,439 --> 03:02:17,359
it will

03:02:14,840 --> 03:02:18,160
uh we'll start everything in a c group

03:02:17,359 --> 03:02:21,760
already so

03:02:18,160 --> 03:02:21,760
you get all the features or um

03:02:23,439 --> 03:02:25,920
arguments

03:02:27,040 --> 03:02:33,359
i'm not quite sure what

03:02:30,960 --> 03:02:34,720
it makes sense when you actually have

03:02:33,359 --> 03:02:35,279
something that should be an entity of

03:02:34,720 --> 03:02:38,560
its own

03:02:35,279 --> 03:02:39,279
own and and starting using dbus is just

03:02:38,560 --> 03:02:42,399
one method

03:02:39,279 --> 03:02:45,359
of placing the process into a

03:02:42,399 --> 03:02:47,120
its own c group and also being able to

03:02:45,359 --> 03:02:49,840
ship a system deconfiguration

03:02:47,120 --> 03:02:50,240
files uh so that you can configure it

03:02:49,840 --> 03:02:52,160
more

03:02:50,240 --> 03:02:53,680
so you get both out of this right at the

03:02:52,160 --> 03:02:54,560
first step if you just use dbos

03:02:53,680 --> 03:02:57,439
activation

03:02:54,560 --> 03:02:58,319
it's one method of starting a process so

03:02:57,439 --> 03:03:00,479
it will

03:02:58,319 --> 03:03:01,680
end up in a system d unit and then as

03:03:00,479 --> 03:03:03,439
the second step

03:03:01,680 --> 03:03:04,960
you can provide a system d your own

03:03:03,439 --> 03:03:06,800
system d service file

03:03:04,960 --> 03:03:09,120
to provide your own configuration

03:03:06,800 --> 03:03:09,120
options

03:03:10,560 --> 03:03:15,120
i've placed that um paste bin of all the

03:03:13,840 --> 03:03:16,399
different implementations and

03:03:15,120 --> 03:03:18,880
all the different ways you can launch

03:03:16,399 --> 03:03:20,640
the groups um into your sharednotes

03:03:18,880 --> 03:03:23,680
chats because it's easy to click on

03:03:20,640 --> 03:03:26,080
on a presentation and

03:03:23,680 --> 03:03:28,479
that mentions they also mentioned all

03:03:26,080 --> 03:03:30,640
the other different possible ways we can

03:03:28,479 --> 03:03:41,840
you can spawn things in their managed

03:03:30,640 --> 03:03:41,840
secret ways

03:03:45,600 --> 03:03:51,439
okay well now it looks like that is all

03:03:48,560 --> 03:03:55,120
the questions wrapped up

03:03:51,439 --> 03:03:58,160
a very very big thank you to both of you

03:03:55,120 --> 03:03:58,960
um it was a great presentation and i

03:03:58,160 --> 03:04:01,120
hope you

03:03:58,960 --> 03:04:02,560
are sticking around for the rest of the

03:04:01,120 --> 03:04:05,600
conference

03:04:02,560 --> 03:04:09,760
um we will be taking a short

03:04:05,600 --> 03:04:12,880
break for the european afternoon

03:04:09,760 --> 03:04:17,200
and the american morning

03:04:12,880 --> 03:04:21,120
and the rest of the world's evening

03:04:17,200 --> 03:04:24,160
and we will see everyone back here

03:04:21,120 --> 03:04:24,160
in a few hours

03:04:24,240 --> 03:04:37,840
all right thank you thank you very much

03:04:47,120 --> 03:04:50,160
i'd also like to mention that we are

03:04:49,040 --> 03:04:52,240
hosting breakout

03:04:50,160 --> 03:04:53,439
sessions during the break there will be

03:04:52,240 --> 03:04:56,800
two

03:04:53,439 --> 03:04:59,840
one starting at 1 1

03:04:56,800 --> 03:05:03,439
10 p.m utc the other

03:04:59,840 --> 03:05:05,439
at 2 15 p.m utc

03:05:03,439 --> 03:05:08,000
you can find more information on those

03:05:05,439 --> 03:05:10,560
on the schedule

03:05:08,000 --> 03:05:12,880
and they will both be hosted in this

03:05:10,560 --> 03:05:12,880
same

03:05:16,840 --> 03:05:19,840
room

03:06:13,840 --> 03:06:15,920

YouTube URL: https://www.youtube.com/watch?v=JqGxdqb3ujE


