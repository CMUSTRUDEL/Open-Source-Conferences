Title: Linux App Summit 2020 - Friday 13th November - 14:30 - 20:00
Publication date: 2020-11-14
Playlist: Linux App Summit 2020
Description: 
	
Captions: 
	00:00:01,439 --> 00:00:05,199
do we still have george in the room

00:00:09,760 --> 00:00:13,759
hi hello

00:00:14,240 --> 00:00:19,359
all right so our first question is a bit

00:00:18,480 --> 00:00:22,640
of a doozy

00:00:19,359 --> 00:00:24,240
let's read this one i'd say you could

00:00:22,640 --> 00:00:27,840
work very specifically

00:00:24,240 --> 00:00:30,160
about or with streamers yes i know

00:00:27,840 --> 00:00:33,680
there's not many on linux but still

00:00:30,160 --> 00:00:34,800
and gamers in general for me it's been a

00:00:33,680 --> 00:00:38,719
pain to create

00:00:34,800 --> 00:00:39,360
blue back sinks and to grab audio from

00:00:38,719 --> 00:00:42,719
specific

00:00:39,360 --> 00:00:46,000
app streams for live casting

00:00:42,719 --> 00:00:48,239
a play session to youtube or twitch or

00:00:46,000 --> 00:00:50,800
open alternatives

00:00:48,239 --> 00:00:52,079
in question form have you thought about

00:00:50,800 --> 00:00:55,039
the streaming

00:00:52,079 --> 00:00:55,039
use cases

00:00:56,320 --> 00:01:03,910
um well yes um create this

00:01:01,199 --> 00:01:05,199
thing actually

00:01:03,910 --> 00:01:08,479
[Music]

00:01:05,199 --> 00:01:11,600
to grab audio from a certain game to

00:01:08,479 --> 00:01:13,600
create a new sync uh in fact this should

00:01:11,600 --> 00:01:15,680
be easier because you can grab audio

00:01:13,600 --> 00:01:18,000
directly from the application

00:01:15,680 --> 00:01:18,000
um

00:01:18,880 --> 00:01:23,840
there is that uh you may not be able to

00:01:21,680 --> 00:01:25,600
do it with standard pulse audio tools

00:01:23,840 --> 00:01:28,640
like power control that

00:01:25,600 --> 00:01:32,479
they don't fully understand how

00:01:28,640 --> 00:01:35,600
the routing is done but if you use a

00:01:32,479 --> 00:01:38,840
if you use a jack graph

00:01:35,600 --> 00:01:41,439
tool directly you can look any

00:01:38,840 --> 00:01:44,479
applications to any other application

00:01:41,439 --> 00:01:44,960
stream and therefore you can more easily

00:01:44,479 --> 00:01:48,240
grab

00:01:44,960 --> 00:01:51,360
audio from an application

00:01:48,240 --> 00:01:55,840
so yeah i think that where i should

00:01:51,360 --> 00:01:55,840
make this use case easier

00:02:09,520 --> 00:02:15,680
oops okay let's go to the next question

00:02:13,520 --> 00:02:17,280
have you reached out to blackmagic

00:02:15,680 --> 00:02:23,840
they'd probably have

00:02:17,280 --> 00:02:23,840
uh the best or worst test suite for you

00:02:30,640 --> 00:02:38,239
um no i haven't reached black magic

00:02:33,680 --> 00:02:42,959
i am not even sure

00:02:38,239 --> 00:02:42,959
what they they are they offer so um

00:02:48,160 --> 00:02:52,239
now it looks like the last one in here

00:02:50,239 --> 00:02:54,080
there is one more being typed out

00:02:52,239 --> 00:02:55,599
uh but there is a comment that says

00:02:54,080 --> 00:02:58,800
other media creators

00:02:55,599 --> 00:03:02,640
podcasters come to mind with um

00:02:58,800 --> 00:03:04,800
creative jack setups could lend a hand

00:03:02,640 --> 00:03:07,200
again that was only a comment not a

00:03:04,800 --> 00:03:07,200
question

00:03:11,920 --> 00:03:17,120
and uh one last question that just

00:03:15,599 --> 00:03:20,319
popped up

00:03:17,120 --> 00:03:23,440
do you see pipe wire replacing

00:03:20,319 --> 00:03:26,879
gstreamer for things like recording from

00:03:23,440 --> 00:03:26,879
a webcam and such

00:03:27,920 --> 00:03:33,840
um the answer to that is

00:03:45,519 --> 00:03:50,640
while this streamer is a full multimedia

00:03:48,640 --> 00:03:54,959
library that

00:03:50,640 --> 00:03:59,280
enables creating applications as

00:03:54,959 --> 00:04:02,799
uh it has a network stream

00:03:59,280 --> 00:04:05,920
uh and

00:04:02,799 --> 00:04:09,599
many other things that are not

00:04:05,920 --> 00:04:12,879
where is really transporting

00:04:09,599 --> 00:04:15,040
audio or video from one place other

00:04:12,879 --> 00:04:15,040
in

00:04:19,759 --> 00:04:23,199
okay well thank you for answering those

00:04:21,680 --> 00:04:27,440
questions it looks like

00:04:23,199 --> 00:04:30,639
that's all that there was um

00:04:27,440 --> 00:04:34,240
yeah thank you for telling us about

00:04:30,639 --> 00:04:42,560
pipewire and i hope you get to enjoy the

00:04:34,240 --> 00:04:45,520
rest of the conference along with us

00:04:42,560 --> 00:04:45,520
bye thank you

00:04:47,680 --> 00:04:54,000
okay everyone we are going to take a

00:04:50,800 --> 00:04:59,040
short break and return in

00:04:54,000 --> 00:04:59,040
approximately 10 minutes for the next

00:05:08,840 --> 00:05:11,840
talk

00:13:45,680 --> 00:13:49,680
hello everyone now it's time for

00:13:47,760 --> 00:13:50,880
matthias classen and the model in the

00:13:49,680 --> 00:13:55,199
buses talks

00:13:50,880 --> 00:13:55,199
gtk4 is almost here

00:13:56,880 --> 00:14:00,639
yeah hello good morning it's actually

00:13:58,480 --> 00:14:01,600
just going to be me in monorails instead

00:14:00,639 --> 00:14:05,519
giving a talk at

00:14:01,600 --> 00:14:08,720
no major so today it's just me

00:14:05,519 --> 00:14:11,680
and i'll be talking about gdk4

00:14:08,720 --> 00:14:13,360
before i start i want to say that i've

00:14:11,680 --> 00:14:15,040
given a similar talk at guadac a few

00:14:13,360 --> 00:14:17,120
months ago and

00:14:15,040 --> 00:14:18,959
if you've been at that talk uh the first

00:14:17,120 --> 00:14:21,120
half of my presentation will be

00:14:18,959 --> 00:14:23,040
fairly familiar to you but um if you

00:14:21,120 --> 00:14:24,480
hang on uh the demo section will be all

00:14:23,040 --> 00:14:27,839
new and fun

00:14:24,480 --> 00:14:30,160
so uh stay tuned for that um

00:14:27,839 --> 00:14:31,760
yes we've been working on gtk4 for quite

00:14:30,160 --> 00:14:33,440
a while now um

00:14:31,760 --> 00:14:35,959
looking back when preparing for this

00:14:33,440 --> 00:14:39,839
talk um i noticed that we did the

00:14:35,959 --> 00:14:43,600
3.89.1 release which was the first

00:14:39,839 --> 00:14:45,760
in our 4.0 development

00:14:43,600 --> 00:14:47,760
uh that happened in november 2016 so it

00:14:45,760 --> 00:14:49,839
was actually four years ago

00:14:47,760 --> 00:14:51,920
and since then we've racked up almost uh

00:14:49,839 --> 00:14:55,199
18 000 commits

00:14:51,920 --> 00:14:56,519
but now gtk4 is is basically almost here

00:14:55,199 --> 00:14:59,120
we are up to

00:14:56,519 --> 00:15:01,279
3.99.4 and

00:14:59,120 --> 00:15:02,160
we will do the 4.0 release within the

00:15:01,279 --> 00:15:05,600
next i guess

00:15:02,160 --> 00:15:08,720
two or three weeks and it's time to um

00:15:05,600 --> 00:15:11,040
take a look at what we have to offer

00:15:08,720 --> 00:15:11,920
there have been a few um brave early

00:15:11,040 --> 00:15:14,480
adopters uh

00:15:11,920 --> 00:15:15,600
during our four years of unstable

00:15:14,480 --> 00:15:17,760
development

00:15:15,600 --> 00:15:18,959
who have done um test ports of various

00:15:17,760 --> 00:15:20,880
applications

00:15:18,959 --> 00:15:23,680
for example there was a nautilus port

00:15:20,880 --> 00:15:26,560
around our 396 release

00:15:23,680 --> 00:15:27,199
and later on georges spotted gnome to do

00:15:26,560 --> 00:15:30,560
to

00:15:27,199 --> 00:15:32,800
3.98 and we were very lucky to

00:15:30,560 --> 00:15:33,759
observe him trying to use our new drag

00:15:32,800 --> 00:15:37,519
and drop api

00:15:33,759 --> 00:15:39,120
and thanks to that uh our drag and drop

00:15:37,519 --> 00:15:40,000
api ended up looking a bit different

00:15:39,120 --> 00:15:43,040
than we thought

00:15:40,000 --> 00:15:45,360
initially and

00:15:43,040 --> 00:15:46,399
it's much better and since we've started

00:15:45,360 --> 00:15:49,360
doing our

00:15:46,399 --> 00:15:51,759
3.99 uh releases more people have taken

00:15:49,360 --> 00:15:54,959
a look and given us valuable feedback

00:15:51,759 --> 00:15:55,360
and gtk 4 will be much better due to all

00:15:54,959 --> 00:15:58,160
of you

00:15:55,360 --> 00:15:59,600
everybody who um took a look at what we

00:15:58,160 --> 00:16:01,440
had

00:15:59,600 --> 00:16:03,360
what it was still unstable deserves a

00:16:01,440 --> 00:16:07,040
big thank you

00:16:03,360 --> 00:16:09,600
and yeah what i will do in this

00:16:07,040 --> 00:16:11,360
presentation is to highlight some of the

00:16:09,600 --> 00:16:12,320
things that i knew in gtk for and that

00:16:11,360 --> 00:16:15,600
maybe were not

00:16:12,320 --> 00:16:16,000
possible to do in hdk3 but before i do

00:16:15,600 --> 00:16:19,360
that

00:16:16,000 --> 00:16:19,360
um i wanted to

00:16:19,759 --> 00:16:23,519
take a moment and look at the principles

00:16:21,600 --> 00:16:25,199
that have been guiding

00:16:23,519 --> 00:16:26,680
our development and the changes we've

00:16:25,199 --> 00:16:30,240
done so you have some idea

00:16:26,680 --> 00:16:31,839
of why things have changed in the way

00:16:30,240 --> 00:16:36,880
they have

00:16:31,839 --> 00:16:40,079
and see if this works um yes

00:16:36,880 --> 00:16:42,880
so um one of the

00:16:40,079 --> 00:16:44,959
general principles uh general direction

00:16:42,880 --> 00:16:47,600
of our api changes has been to emphasize

00:16:44,959 --> 00:16:50,079
uh delegation over subclassing

00:16:47,600 --> 00:16:52,480
if you want you could call this lessons

00:16:50,079 --> 00:16:53,920
learned from clutter

00:16:52,480 --> 00:16:56,000
one of the motivations for this is to

00:16:53,920 --> 00:16:58,480
make writing your own custom widgets

00:16:56,000 --> 00:17:01,040
easier and less error prone

00:16:58,480 --> 00:17:02,480
and as a consequence of this direction

00:17:01,040 --> 00:17:05,520
you will see a lot more

00:17:02,480 --> 00:17:05,919
auxiliary objects in our apis that take

00:17:05,520 --> 00:17:07,919
over

00:17:05,919 --> 00:17:10,400
certain aspects of functionality from

00:17:07,919 --> 00:17:12,240
the core widget classes

00:17:10,400 --> 00:17:14,160
another consequence is that many of our

00:17:12,240 --> 00:17:15,839
widgets are now final so you cannot

00:17:14,160 --> 00:17:18,079
derive from them anymore

00:17:15,839 --> 00:17:19,280
instead we expect that you will derive

00:17:18,079 --> 00:17:22,240
directly from

00:17:19,280 --> 00:17:25,039
widget which has become a lot easier

00:17:22,240 --> 00:17:27,520
than it was in gtk 3.

00:17:25,039 --> 00:17:29,440
another general trend is that everything

00:17:27,520 --> 00:17:31,760
is a widget

00:17:29,440 --> 00:17:33,520
that has already started in gtk3 many

00:17:31,760 --> 00:17:36,640
years ago we first started

00:17:33,520 --> 00:17:38,240
with introducing css nodes and then we

00:17:36,640 --> 00:17:40,320
introduced gadgets

00:17:38,240 --> 00:17:42,240
as another way of breaking up widgets

00:17:40,320 --> 00:17:45,280
into their components

00:17:42,240 --> 00:17:46,400
and now in gtk4 we have completed this

00:17:45,280 --> 00:17:48,480
transition and

00:17:46,400 --> 00:17:49,919
for example if you look at the gdk scale

00:17:48,480 --> 00:17:52,880
the trough and the slider

00:17:49,919 --> 00:17:54,640
of a scale are fully formed sub-widgets

00:17:52,880 --> 00:17:55,679
which maintain their own style and their

00:17:54,640 --> 00:17:57,440
own state

00:17:55,679 --> 00:18:01,840
and they can receive input like any

00:17:57,440 --> 00:18:01,840
other widget

00:18:04,160 --> 00:18:07,360
a big loser in the gtk 4 transition is

00:18:07,039 --> 00:18:11,039
the

00:18:07,360 --> 00:18:14,080
gtk container base class it has become

00:18:11,039 --> 00:18:16,960
much less important any widget can have

00:18:14,080 --> 00:18:18,640
child widgets now and child properties

00:18:16,960 --> 00:18:19,919
which is something that gtk container

00:18:18,640 --> 00:18:22,000
used to provide

00:18:19,919 --> 00:18:24,000
have been replaced by layout children

00:18:22,000 --> 00:18:26,000
and their properties

00:18:24,000 --> 00:18:28,160
and all the focus handling has been

00:18:26,000 --> 00:18:30,960
moved from gtk container to

00:18:28,160 --> 00:18:31,840
gdk widget so when we were done with all

00:18:30,960 --> 00:18:34,480
of these changes

00:18:31,840 --> 00:18:36,960
uh sdk container did really have no

00:18:34,480 --> 00:18:43,840
functionality left so in fact we just

00:18:36,960 --> 00:18:43,840
removed the class altogether

00:18:46,960 --> 00:18:50,880
yeah another big loser in in these

00:18:49,360 --> 00:18:54,320
changes is gtk window

00:18:50,880 --> 00:18:55,200
in gtk3 all the pop-ups such as entry

00:18:54,320 --> 00:18:58,160
completions

00:18:55,200 --> 00:19:00,080
menus tooltips and things like that

00:18:58,160 --> 00:19:03,679
they're all using a gtk window

00:19:00,080 --> 00:19:04,320
underneath and in gtk4 most of them have

00:19:03,679 --> 00:19:07,360
been

00:19:04,320 --> 00:19:10,559
converted to use pop overs or at least a

00:19:07,360 --> 00:19:12,400
pop-up surface and the popover

00:19:10,559 --> 00:19:12,880
implementation itself has been untangled

00:19:12,400 --> 00:19:16,640
from

00:19:12,880 --> 00:19:20,799
gtk window and made its own freestanding

00:19:16,640 --> 00:19:22,559
widget and in addition many pieces of

00:19:20,799 --> 00:19:24,790
functionality that are specific to top

00:19:22,559 --> 00:19:25,919
level windows such as

00:19:24,790 --> 00:19:28,480
[Music]

00:19:25,919 --> 00:19:30,240
handling of sizes and handling of window

00:19:28,480 --> 00:19:32,400
decorations have been moved out into

00:19:30,240 --> 00:19:35,679
separate interfaces such as

00:19:32,400 --> 00:19:36,480
gtk root or gtk native or into their own

00:19:35,679 --> 00:19:38,640
widgets

00:19:36,480 --> 00:19:41,120
like gtk window handle or gtk window

00:19:38,640 --> 00:19:41,120
controls

00:19:43,520 --> 00:19:48,799
on the gdk level we've moved from

00:19:47,120 --> 00:19:52,080
modeling our abstractions on

00:19:48,799 --> 00:19:53,760
x11 concepts to following weyland as a

00:19:52,080 --> 00:19:56,880
consequence we now have

00:19:53,760 --> 00:19:58,640
surfaces instead of windows and things

00:19:56,880 --> 00:20:00,640
like screens or visuals or

00:19:58,640 --> 00:20:02,080
explicit graphs are all gone from the

00:20:00,640 --> 00:20:04,240
api

00:20:02,080 --> 00:20:05,360
and we're also moving away from the

00:20:04,240 --> 00:20:08,240
complex

00:20:05,360 --> 00:20:08,799
hierarchy of input devices that x input

00:20:08,240 --> 00:20:10,720
has

00:20:08,799 --> 00:20:12,320
and have a much simpler setup for

00:20:10,720 --> 00:20:14,720
devices

00:20:12,320 --> 00:20:15,520
this should not affect applications too

00:20:14,720 --> 00:20:18,159
much

00:20:15,520 --> 00:20:19,600
but it does affect gdk backends and it

00:20:18,159 --> 00:20:21,280
in fact should make it a lot more

00:20:19,600 --> 00:20:24,960
straightforward to write

00:20:21,280 --> 00:20:26,799
gdk back-ends and

00:20:24,960 --> 00:20:29,840
as a sign of things to come in that area

00:20:26,799 --> 00:20:31,600
we do have a new backend for osx

00:20:29,840 --> 00:20:32,880
which still needs some love and

00:20:31,600 --> 00:20:36,320
nurturing but it

00:20:32,880 --> 00:20:36,320
does look like a promising start

00:20:38,240 --> 00:20:42,159
right um moving on from from the

00:20:40,480 --> 00:20:45,600
principles um

00:20:42,159 --> 00:20:47,440
to surprises with every big change and

00:20:45,600 --> 00:20:48,640
the change from gta 3 to gtk gtk4 is

00:20:47,440 --> 00:20:51,200
certainly very big

00:20:48,640 --> 00:20:53,120
there are some surprises and unexpected

00:20:51,200 --> 00:20:54,080
changes that you did not anticipate and

00:20:53,120 --> 00:20:56,159
that

00:20:54,080 --> 00:20:57,360
might hold you up much longer than they

00:20:56,159 --> 00:20:59,280
shot when you

00:20:57,360 --> 00:21:00,880
brought in an application from gtk3 to

00:20:59,280 --> 00:21:03,039
gtk4 so i

00:21:00,880 --> 00:21:04,799
i figured it would be a good idea to um

00:21:03,039 --> 00:21:07,440
point some of these out up front so you

00:21:04,799 --> 00:21:09,360
have you are prepared

00:21:07,440 --> 00:21:12,320
and the first surprise is um that

00:21:09,360 --> 00:21:14,480
widgets are visible by default now

00:21:12,320 --> 00:21:16,799
that's this is one of a number of api

00:21:14,480 --> 00:21:18,799
changes where we've

00:21:16,799 --> 00:21:20,080
made where we just changed defaults that

00:21:18,799 --> 00:21:22,240
were wrong before

00:21:20,080 --> 00:21:24,320
to the expected value if you create a

00:21:22,240 --> 00:21:26,080
new widget

00:21:24,320 --> 00:21:28,320
you typically want it to be visible so

00:21:26,080 --> 00:21:31,760
it makes a lot of sense to have

00:21:28,320 --> 00:21:33,760
the visible property defaulting to true

00:21:31,760 --> 00:21:36,240
but if if one of your ui files

00:21:33,760 --> 00:21:36,799
inexplicably looks different in gtk4

00:21:36,240 --> 00:21:39,039
than it

00:21:36,799 --> 00:21:39,840
used to be in gtk3 then you may want to

00:21:39,039 --> 00:21:42,320
check

00:21:39,840 --> 00:21:44,480
if it contains any widgets that were

00:21:42,320 --> 00:21:46,159
never visible in gtk 3

00:21:44,480 --> 00:21:47,840
because you just forgot to set visible

00:21:46,159 --> 00:21:51,600
to true and gtk4

00:21:47,840 --> 00:21:53,679
all of those will just show up

00:21:51,600 --> 00:21:55,600
surprise number two is that gdk

00:21:53,679 --> 00:21:56,720
container has gone and already mentioned

00:21:55,600 --> 00:21:59,039
that

00:21:56,720 --> 00:22:01,039
this can require some work if you are

00:21:59,039 --> 00:22:02,480
creating your uis manually there's a

00:22:01,039 --> 00:22:04,720
certain style of

00:22:02,480 --> 00:22:06,400
ui creation code where you always call

00:22:04,720 --> 00:22:09,679
gdk container ad

00:22:06,400 --> 00:22:11,600
on boxes windows and similar containers

00:22:09,679 --> 00:22:13,440
and all these calls have to be replaced

00:22:11,600 --> 00:22:16,720
by their respective

00:22:13,440 --> 00:22:18,320
non-generic counterparts for example gdk

00:22:16,720 --> 00:22:21,280
box now has a

00:22:18,320 --> 00:22:22,480
gtk box append function and all the

00:22:21,280 --> 00:22:24,799
widgets which just

00:22:22,480 --> 00:22:26,720
have a single child which is like gtk

00:22:24,799 --> 00:22:30,400
window or gtk frame they

00:22:26,720 --> 00:22:31,600
have a set site api that replaces the

00:22:30,400 --> 00:22:35,120
generic

00:22:31,600 --> 00:22:36,960
uh container ad function

00:22:35,120 --> 00:22:39,280
that's admittedly a change that can be a

00:22:36,960 --> 00:22:42,159
little annoying to deal with

00:22:39,280 --> 00:22:43,440
but the good news is if you're using gtk

00:22:42,159 --> 00:22:44,960
builder for your ui

00:22:43,440 --> 00:22:47,840
you are not affected by that at all

00:22:44,960 --> 00:22:48,480
because the child element in ui files

00:22:47,840 --> 00:22:52,000
works

00:22:48,480 --> 00:22:54,159
just the same as before ptk builder ui

00:22:52,000 --> 00:22:56,240
files are affected by some other changes

00:22:54,159 --> 00:22:58,720
for example that child properties are

00:22:56,240 --> 00:23:01,520
being replaced by layout properties

00:22:58,720 --> 00:23:02,400
but we have a tool called gtk4 builder

00:23:01,520 --> 00:23:06,000
tool that

00:23:02,400 --> 00:23:09,360
can help you adapt to that

00:23:06,000 --> 00:23:11,760
if you um if you

00:23:09,360 --> 00:23:12,880
run the use the simplify command of gtk

00:23:11,760 --> 00:23:16,559
for builder tool and you

00:23:12,880 --> 00:23:18,799
pass the dash three to four option

00:23:16,559 --> 00:23:19,760
uh to this command it'll try to rewrite

00:23:18,799 --> 00:23:22,640
a

00:23:19,760 --> 00:23:23,370
gdk3 ui file to the syntax expected in

00:23:22,640 --> 00:23:24,799
gtk4

00:23:23,370 --> 00:23:26,720
[Music]

00:23:24,799 --> 00:23:29,039
the tool is not perfect and you should

00:23:26,720 --> 00:23:30,559
always verify what it produces and

00:23:29,039 --> 00:23:32,720
pay attention to the warnings that it

00:23:30,559 --> 00:23:35,120
spits out but

00:23:32,720 --> 00:23:37,039
during gtk4 development we've run run

00:23:35,120 --> 00:23:40,000
this over all the ui files in

00:23:37,039 --> 00:23:41,360
jdk several times and it works

00:23:40,000 --> 00:23:43,600
reasonably well

00:23:41,360 --> 00:23:45,360
so that's definitely something you

00:23:43,600 --> 00:23:48,840
should keep in mind if you haven't

00:23:45,360 --> 00:23:50,159
have a gtk3 application that needs

00:23:48,840 --> 00:23:52,480
supporting

00:23:50,159 --> 00:23:53,840
all right um with that i'll change gears

00:23:52,480 --> 00:23:55,919
a little bit and uh

00:23:53,840 --> 00:23:58,320
try to share my screen hope that works

00:23:55,919 --> 00:24:00,720
and i will show uh some demos

00:23:58,320 --> 00:24:02,720
before i do that i wanted to say that uh

00:24:00,720 --> 00:24:05,279
in my quadratic version of this talk i

00:24:02,720 --> 00:24:06,080
i showed minimal test cases as demos

00:24:05,279 --> 00:24:08,720
that

00:24:06,080 --> 00:24:10,320
were showing how you do layout rendering

00:24:08,720 --> 00:24:12,240
and input in gtk4

00:24:10,320 --> 00:24:13,440
and i worked brought you through the

00:24:12,240 --> 00:24:15,120
code

00:24:13,440 --> 00:24:17,039
if you're interested in that thing you

00:24:15,120 --> 00:24:18,799
can find those demos on

00:24:17,039 --> 00:24:21,600
on gitlab or you can just watch the

00:24:18,799 --> 00:24:23,919
recording of that that talk i gave

00:24:21,600 --> 00:24:26,480
but um since then since i gave that talk

00:24:23,919 --> 00:24:29,840
we've worked pretty hard on adding

00:24:26,480 --> 00:24:30,559
nice examples to gdk demo so today i

00:24:29,840 --> 00:24:32,960
want to just

00:24:30,559 --> 00:24:34,159
show some of those those demos to give

00:24:32,960 --> 00:24:37,760
you an impression of

00:24:34,159 --> 00:24:40,559
what gtk4 can do that was not possible

00:24:37,760 --> 00:24:47,840
in gdk3 and with that i

00:24:40,559 --> 00:24:47,840
had to share my screen i hope this works

00:24:55,440 --> 00:24:59,760
okay sorry for that strobe effect i have

00:24:58,159 --> 00:25:00,880
no idea how to avoid that with a big

00:24:59,760 --> 00:25:04,080
blue button but

00:25:00,880 --> 00:25:05,520
i hope you can see um the gdk demo

00:25:04,080 --> 00:25:07,520
window now

00:25:05,520 --> 00:25:08,720
um there's a lot of demos in this and a

00:25:07,520 --> 00:25:10,000
lot of new demos so

00:25:08,720 --> 00:25:11,760
if you think you know what's in here

00:25:10,000 --> 00:25:14,159
it's worth taking another look

00:25:11,760 --> 00:25:16,240
as i said we've worked pretty hard on

00:25:14,159 --> 00:25:17,679
producing some demos that are

00:25:16,240 --> 00:25:21,200
maybe a little more interesting i want

00:25:17,679 --> 00:25:24,320
to start off by showing a few demos

00:25:21,200 --> 00:25:26,080
about layout managers layout managers

00:25:24,320 --> 00:25:27,600
are one of those auxiliary objects that

00:25:26,080 --> 00:25:29,200
i mentioned earlier that we've kind of

00:25:27,600 --> 00:25:32,320
inherited

00:25:29,200 --> 00:25:33,919
from clutter and every widget has a

00:25:32,320 --> 00:25:35,120
layout manager that basically is

00:25:33,919 --> 00:25:37,120
responsible for

00:25:35,120 --> 00:25:39,200
controlling how the child widgets are

00:25:37,120 --> 00:25:42,400
placed on screen

00:25:39,200 --> 00:25:46,240
and yes a simple

00:25:42,400 --> 00:25:48,640
uh layout manager demo it's basically a

00:25:46,240 --> 00:25:49,440
widget that has child widgets that are

00:25:48,640 --> 00:25:52,159
placed in a

00:25:49,440 --> 00:25:53,120
in a grid the layout manager determines

00:25:52,159 --> 00:25:55,520
the positions

00:25:53,120 --> 00:25:57,679
of the chart widgets and they look just

00:25:55,520 --> 00:26:00,320
like color blobs but they're actually

00:25:57,679 --> 00:26:01,760
widgets which have toolkit tooltips um

00:26:00,320 --> 00:26:04,799
as you can see here

00:26:01,760 --> 00:26:06,880
and if i if i click my mouse button here

00:26:04,799 --> 00:26:08,559
you can see that the layout changes and

00:26:06,880 --> 00:26:10,880
the child switches get rearranged in a

00:26:08,559 --> 00:26:12,720
soccer now and i can

00:26:10,880 --> 00:26:15,520
actually undo that and do it again so

00:26:12,720 --> 00:26:17,520
that's fun to play with

00:26:15,520 --> 00:26:19,840
we don't have the full grown animation

00:26:17,520 --> 00:26:22,559
framework in gtk4 yet but

00:26:19,840 --> 00:26:24,480
simple transitions between layouts like

00:26:22,559 --> 00:26:25,679
this are very doable with just a tick

00:26:24,480 --> 00:26:28,320
callback

00:26:25,679 --> 00:26:30,080
as this demo shows um so basically what

00:26:28,320 --> 00:26:32,400
the layout manager here does is

00:26:30,080 --> 00:26:34,080
it computes uh the position of the

00:26:32,400 --> 00:26:35,919
children in both these layouts both for

00:26:34,080 --> 00:26:38,080
the grid and for the circle

00:26:35,919 --> 00:26:39,440
and then we have a tick callback that

00:26:38,080 --> 00:26:42,480
interpolates between

00:26:39,440 --> 00:26:45,679
those two positions for each child and

00:26:42,480 --> 00:26:47,679
um if you have ever played with the

00:26:45,679 --> 00:26:49,039
the clutter demos this may look familiar

00:26:47,679 --> 00:26:50,640
to you this is a pretty direct

00:26:49,039 --> 00:26:53,279
translation of

00:26:50,640 --> 00:26:54,240
the clutter layout manager demo um that

00:26:53,279 --> 00:26:55,600
i did

00:26:54,240 --> 00:26:57,279
and i think it does a good job of

00:26:55,600 --> 00:26:59,840
showing that it's pretty easy to

00:26:57,279 --> 00:27:01,440
position child widgets in a on a 2d

00:26:59,840 --> 00:27:04,080
canvas

00:27:01,440 --> 00:27:05,840
but one of the things that uh that i

00:27:04,080 --> 00:27:06,400
knew in gtk 4 is that we actually have a

00:27:05,840 --> 00:27:09,919
full

00:27:06,400 --> 00:27:12,880
3d scene graph and 3d transformations

00:27:09,919 --> 00:27:15,360
between children so after i've did this

00:27:12,880 --> 00:27:17,760
the translation of this clutter demo i

00:27:15,360 --> 00:27:19,279
thought i wanted to show off

00:27:17,760 --> 00:27:22,080
transformations that are a little less

00:27:19,279 --> 00:27:24,159
trivial than just

00:27:22,080 --> 00:27:25,760
what this demo showed so i i spent a

00:27:24,159 --> 00:27:27,679
weekend writing another

00:27:25,760 --> 00:27:29,039
uh layout manager demo with

00:27:27,679 --> 00:27:31,679
transformations

00:27:29,039 --> 00:27:31,679
it's this one

00:27:32,080 --> 00:27:36,240
again the ingredients are the same here

00:27:34,000 --> 00:27:38,559
this is just a container which

00:27:36,240 --> 00:27:40,559
has a bunch of child widgets um in this

00:27:38,559 --> 00:27:42,559
case they are icons

00:27:40,559 --> 00:27:44,480
and all the magic is in the layout

00:27:42,559 --> 00:27:46,880
manager that computes um

00:27:44,480 --> 00:27:49,360
how to place these stride widgets into

00:27:46,880 --> 00:27:51,360
our theme graph and in this case it

00:27:49,360 --> 00:27:52,640
places them on the surface office here

00:27:51,360 --> 00:27:53,919
and

00:27:52,640 --> 00:27:55,440
i thought i'd make this demo a little

00:27:53,919 --> 00:27:56,159
more interesting by also adding key nav

00:27:55,440 --> 00:27:59,520
so if i

00:27:56,159 --> 00:28:00,720
click the arrow keys here you can move

00:27:59,520 --> 00:28:03,760
things around and

00:28:00,720 --> 00:28:07,360
see that actually reacts

00:28:03,760 --> 00:28:07,360
so that is fun to play with

00:28:07,679 --> 00:28:12,240
and yeah maybe i can do a little

00:28:10,159 --> 00:28:17,840
interaction here i'll bring up

00:28:12,240 --> 00:28:17,840
the um gtk inspector

00:28:18,080 --> 00:28:21,679
because i wanted to quickly show you

00:28:19,760 --> 00:28:24,159
that um

00:28:21,679 --> 00:28:26,480
these are actually uh widgets that are

00:28:24,159 --> 00:28:30,480
responsive to input and um

00:28:26,480 --> 00:28:33,120
it's not just the movie

00:28:30,480 --> 00:28:34,480
and to show that i can turn on a hover

00:28:33,120 --> 00:28:36,559
effect and you can see that

00:28:34,480 --> 00:28:38,399
that all of these widgets actually

00:28:36,559 --> 00:28:40,799
receive input as i move my mouse over

00:28:38,399 --> 00:28:40,799
the window

00:28:40,880 --> 00:28:45,840
they get hovered

00:28:48,960 --> 00:28:53,679
but um maybe that's enough for layout

00:28:52,080 --> 00:28:56,399
managers and i'll move on to the next

00:28:53,679 --> 00:28:59,279
big topic which is um

00:28:56,399 --> 00:29:00,240
another big thing that we added to gdk

00:28:59,279 --> 00:29:03,520
for is uh

00:29:00,240 --> 00:29:06,000
support for model based list widgets

00:29:03,520 --> 00:29:08,159
we eventually want these to replace uh

00:29:06,000 --> 00:29:11,360
gtk treeview and

00:29:08,159 --> 00:29:13,120
and gtk combobox and and select

00:29:11,360 --> 00:29:15,600
we're not quite there yet but um this is

00:29:13,120 --> 00:29:18,559
what we have this is a column view

00:29:15,600 --> 00:29:20,080
um that that shows uh what our list our

00:29:18,559 --> 00:29:21,360
model based list widgets can do the

00:29:20,080 --> 00:29:24,480
model in this case uh

00:29:21,360 --> 00:29:26,240
contains uh the content of the unicode

00:29:24,480 --> 00:29:29,600
character database so that's

00:29:26,240 --> 00:29:31,840
roughly 33 000 items

00:29:29,600 --> 00:29:32,960
and you can you can scroll around here

00:29:31,840 --> 00:29:36,240
and you can

00:29:32,960 --> 00:29:37,840
select things and you can explore

00:29:36,240 --> 00:29:39,520
explore this and find characters you

00:29:37,840 --> 00:29:41,120
never knew existed so that's that's a

00:29:39,520 --> 00:29:43,840
fun thing to do

00:29:41,120 --> 00:29:44,880
and uh as far as the widget is concerned

00:29:43,840 --> 00:29:46,240
you can see that um

00:29:44,880 --> 00:29:48,480
it does have functionality that you

00:29:46,240 --> 00:29:50,799
expect from a from a columned list you

00:29:48,480 --> 00:29:52,840
can like resize the columns and you can

00:29:50,799 --> 00:29:54,480
reorder any columns we also have support

00:29:52,840 --> 00:29:56,799
for

00:29:54,480 --> 00:29:58,240
for sorting by column and for filtering

00:29:56,799 --> 00:30:01,440
that this demo

00:29:58,240 --> 00:30:03,840
does not show yet um so

00:30:01,440 --> 00:30:06,000
you could obviously do exactly the same

00:30:03,840 --> 00:30:07,440
demo with the tree view

00:30:06,000 --> 00:30:09,679
the difference here is that we actually

00:30:07,440 --> 00:30:12,240
use widgets for all the content so

00:30:09,679 --> 00:30:12,799
every cell in this in this grid is a

00:30:12,240 --> 00:30:14,720
label

00:30:12,799 --> 00:30:15,919
and you can use the full power of gtk

00:30:14,720 --> 00:30:18,960
widgets

00:30:15,919 --> 00:30:21,120
to display your data we don't uh

00:30:18,960 --> 00:30:23,279
create widgets uh for the whole model we

00:30:21,120 --> 00:30:24,320
only create widgets for the visible

00:30:23,279 --> 00:30:26,480
range

00:30:24,320 --> 00:30:27,840
and if you scroll around we'll recycle

00:30:26,480 --> 00:30:31,760
the widgets

00:30:27,840 --> 00:30:31,760
so that is all as you would expect

00:30:32,159 --> 00:30:36,159
and you might say 33 000 items that is

00:30:35,279 --> 00:30:38,399
not

00:30:36,159 --> 00:30:40,000
very impressive in terms of model size

00:30:38,399 --> 00:30:43,520
and you would be correct

00:30:40,000 --> 00:30:45,440
um so if you want to like see a bit more

00:30:43,520 --> 00:30:46,799
impressive model sizes we can switch to

00:30:45,440 --> 00:30:49,600
this uh

00:30:46,799 --> 00:30:50,159
example for for grid widget which is

00:30:49,600 --> 00:30:52,559
also

00:30:50,159 --> 00:30:53,679
using a model the same kind of model

00:30:52,559 --> 00:30:57,760
that

00:30:53,679 --> 00:30:59,440
the column list used and we can

00:30:57,760 --> 00:31:01,039
switch the model size to two million

00:30:59,440 --> 00:31:02,840
items so now we have a

00:31:01,039 --> 00:31:06,240
data model that contains two million

00:31:02,840 --> 00:31:09,200
colors and we can still

00:31:06,240 --> 00:31:09,519
use this ui fairly comfortably and one

00:31:09,200 --> 00:31:12,000
thing

00:31:09,519 --> 00:31:13,440
we can do here is we can actually sort

00:31:12,000 --> 00:31:15,120
this and as you can see the sorting

00:31:13,440 --> 00:31:17,600
happens in the background and

00:31:15,120 --> 00:31:18,960
and while it's going on the ui stays

00:31:17,600 --> 00:31:20,399
responsive

00:31:18,960 --> 00:31:22,080
and that's something that we worked

00:31:20,399 --> 00:31:25,120
pretty hard on and that we are

00:31:22,080 --> 00:31:27,200
kind of proud of the same is true for

00:31:25,120 --> 00:31:30,320
filtering you can also filter

00:31:27,200 --> 00:31:32,159
the list base widget in the background

00:31:30,320 --> 00:31:34,240
and the ui will stay responsive as the

00:31:32,159 --> 00:31:36,799
filtering is happening

00:31:34,240 --> 00:31:38,480
although this this demo doesn't show it

00:31:36,799 --> 00:31:39,840
one other thing that this demo shows is

00:31:38,480 --> 00:31:41,840
that we have um

00:31:39,840 --> 00:31:44,080
we have selection as well so you can

00:31:41,840 --> 00:31:47,519
make a rubber event selection here

00:31:44,080 --> 00:31:49,360
and then you can get the data that's

00:31:47,519 --> 00:31:51,760
behind the selection and don't

00:31:49,360 --> 00:31:52,960
do things with it like compute the

00:31:51,760 --> 00:31:54,880
average color

00:31:52,960 --> 00:31:56,240
usually if you if you make a big

00:31:54,880 --> 00:32:00,720
selection you just end up with something

00:31:56,240 --> 00:32:04,159
that is either gray or brown

00:32:00,720 --> 00:32:05,840
so maybe that's um that's enough for

00:32:04,159 --> 00:32:07,679
for list widgets there's more to explore

00:32:05,840 --> 00:32:10,159
here if you if you want to click around

00:32:07,679 --> 00:32:12,240
yourself there's more demos

00:32:10,159 --> 00:32:13,600
uh highlighting various aspects but i

00:32:12,240 --> 00:32:16,720
want to move on um

00:32:13,600 --> 00:32:19,519
and talk a bit about painting

00:32:16,720 --> 00:32:21,519
and um there it is yes traditionally in

00:32:19,519 --> 00:32:22,720
gtk whenever we need it uh we need

00:32:21,519 --> 00:32:25,200
content

00:32:22,720 --> 00:32:26,880
that can be drawn be that an image

00:32:25,200 --> 00:32:29,840
loaded from a file or something

00:32:26,880 --> 00:32:31,679
drawn by code we end up using gdk

00:32:29,840 --> 00:32:33,919
pixbuff

00:32:31,679 --> 00:32:36,320
in gtk4 we've kind of moved away from

00:32:33,919 --> 00:32:38,640
gdk pixma we de-emphasized that

00:32:36,320 --> 00:32:40,880
and introduced a new interface called

00:32:38,640 --> 00:32:44,000
gdk paintable

00:32:40,880 --> 00:32:45,519
when you load an image file into dk4 you

00:32:44,000 --> 00:32:48,320
end up with a

00:32:45,519 --> 00:32:49,840
gdk texture object which implements the

00:32:48,320 --> 00:32:51,840
paintable interface

00:32:49,840 --> 00:32:54,720
and likewise when you load a themed icon

00:32:51,840 --> 00:32:56,640
you also end up with a paintable

00:32:54,720 --> 00:32:57,840
paintables can produce different images

00:32:56,640 --> 00:32:59,760
at different times

00:32:57,840 --> 00:33:02,559
so we can also present animations and

00:32:59,760 --> 00:33:05,279
videos using this interface

00:33:02,559 --> 00:33:06,640
one of the best things about gdk

00:33:05,279 --> 00:33:08,240
printable is that it's a very simple

00:33:06,640 --> 00:33:10,000
interface so it's it's very easy to

00:33:08,240 --> 00:33:12,640
implement yourself it's really just

00:33:10,000 --> 00:33:14,159
two or three functions and so the first

00:33:12,640 --> 00:33:18,080
example i want to show here

00:33:14,159 --> 00:33:21,279
is actually a custom implementation of

00:33:18,080 --> 00:33:23,039
gdk paintable that overlays an emblem on

00:33:21,279 --> 00:33:25,919
top of an existing paintable

00:33:23,039 --> 00:33:27,919
and and then you get something like this

00:33:25,919 --> 00:33:29,919
in gtk3 we used to have um

00:33:27,919 --> 00:33:31,600
support for what we called unblamed

00:33:29,919 --> 00:33:33,440
icons in

00:33:31,600 --> 00:33:35,679
gtk and theme but that was a fairly

00:33:33,440 --> 00:33:37,919
limited thing and we've got rid of it

00:33:35,679 --> 00:33:39,200
and instead we can now can now use

00:33:37,919 --> 00:33:42,159
paintables for this

00:33:39,200 --> 00:33:43,120
and as you can see um since printables

00:33:42,159 --> 00:33:45,200
can be animated

00:33:43,120 --> 00:33:46,559
and we overlay an arbitrary paintable

00:33:45,200 --> 00:33:49,519
here you can now have

00:33:46,559 --> 00:33:51,039
uh animated emblems which is not

00:33:49,519 --> 00:33:53,760
something that would be easy to do in

00:33:51,039 --> 00:33:53,760
gtk3

00:33:54,960 --> 00:34:02,880
the next example of a paintable

00:33:58,000 --> 00:34:06,000
is loading an svg

00:34:02,880 --> 00:34:08,159
and you might say well gdk pixel could

00:34:06,000 --> 00:34:09,119
load svg since forever so why do we need

00:34:08,159 --> 00:34:11,520
this um

00:34:09,119 --> 00:34:13,760
the thing is if you load an svg file

00:34:11,520 --> 00:34:17,119
with gdk pixels you end up

00:34:13,760 --> 00:34:19,280
with a pixbuff which is just a

00:34:17,119 --> 00:34:20,159
fixed number of pixels and if you then

00:34:19,280 --> 00:34:22,000
change your

00:34:20,159 --> 00:34:23,760
your window size um you end up with

00:34:22,000 --> 00:34:27,440
pixelated content because we just

00:34:23,760 --> 00:34:28,960
scale up those pixels which is a bit of

00:34:27,440 --> 00:34:32,639
a bummer considering that the s

00:34:28,960 --> 00:34:34,320
in svg stands for scalable so with a

00:34:32,639 --> 00:34:36,720
paintable wrapper around

00:34:34,320 --> 00:34:38,000
the rsvg handle object we can finally do

00:34:36,720 --> 00:34:40,000
better and as you can see

00:34:38,000 --> 00:34:42,879
as i make this window bigger we actually

00:34:40,000 --> 00:34:46,159
re-render the svg at the right size and

00:34:42,879 --> 00:34:49,520
we get sharp rendering at any size here

00:34:46,159 --> 00:34:51,599
and all of this uh requires just a

00:34:49,520 --> 00:34:55,599
100 lines of code for for a fairly

00:34:51,599 --> 00:34:57,280
trivial implementation of gdk paintable

00:34:55,599 --> 00:34:58,800
but i already mentioned that paintables

00:34:57,280 --> 00:35:01,119
can be animated and

00:34:58,800 --> 00:35:02,000
that that is very nice as we saw in this

00:35:01,119 --> 00:35:05,440
emblem example

00:35:02,000 --> 00:35:08,640
but if you if you want to um

00:35:05,440 --> 00:35:10,960
show uh actual media content such as a

00:35:08,640 --> 00:35:12,560
webm file you typically want some more

00:35:10,960 --> 00:35:15,359
control over things like

00:35:12,560 --> 00:35:16,160
the duration or the volume and for that

00:35:15,359 --> 00:35:18,079
we have a

00:35:16,160 --> 00:35:19,920
separate interface called gtk media

00:35:18,079 --> 00:35:23,680
stream that fills that role

00:35:19,920 --> 00:35:26,400
and we have a gtk video widget

00:35:23,680 --> 00:35:27,119
which adds some of the expected controls

00:35:26,400 --> 00:35:30,240
in the ui

00:35:27,119 --> 00:35:32,320
and i'll show this demo here

00:35:30,240 --> 00:35:33,839
which is uh basically just the window

00:35:32,320 --> 00:35:36,079
wrapped around the gtk video

00:35:33,839 --> 00:35:37,760
which is as you can see there's um

00:35:36,079 --> 00:35:39,680
typical media controls down here a

00:35:37,760 --> 00:35:42,880
volume control and a

00:35:39,680 --> 00:35:44,480
scale that shows you the position

00:35:42,880 --> 00:35:47,839
and that can render simple animations

00:35:44,480 --> 00:35:47,839
but it can also render um

00:35:47,920 --> 00:35:51,920
movies that you might want to show

00:35:52,079 --> 00:35:56,880
and at the core of this gtk video which

00:35:55,280 --> 00:35:58,960
it is just the same machinery that we

00:35:56,880 --> 00:36:00,800
saw earlier it's a gtk picture which is

00:35:58,960 --> 00:36:04,240
displaying a paintable

00:36:00,800 --> 00:36:04,240
that is changing over time

00:36:05,839 --> 00:36:08,960
right um so maybe that's enough for

00:36:08,079 --> 00:36:11,200
paintables

00:36:08,960 --> 00:36:12,800
and if you are still around you're

00:36:11,200 --> 00:36:14,160
probably here because you want to see

00:36:12,800 --> 00:36:18,320
wobbling widgets

00:36:14,160 --> 00:36:21,680
so um that's that's finally go there

00:36:18,320 --> 00:36:22,079
and yeah i'll give a brief introduction

00:36:21,680 --> 00:36:25,440
here

00:36:22,079 --> 00:36:28,400
so in gtk4 we use opengl for rendering

00:36:25,440 --> 00:36:29,599
our ui and in practice that means we are

00:36:28,400 --> 00:36:31,760
using

00:36:29,599 --> 00:36:32,640
shaders for rendering the elements of

00:36:31,760 --> 00:36:35,119
our ui

00:36:32,640 --> 00:36:36,079
like shadows or gradients or whatever we

00:36:35,119 --> 00:36:38,720
need

00:36:36,079 --> 00:36:39,680
to put together widgets and since not

00:36:38,720 --> 00:36:41,760
everybody may be

00:36:39,680 --> 00:36:44,079
familiar with opengl i'll quickly say

00:36:41,760 --> 00:36:46,240
what uh what shaders are

00:36:44,079 --> 00:36:49,359
so traders are small programs written in

00:36:46,240 --> 00:36:51,599
a language uh called glsl

00:36:49,359 --> 00:36:53,760
that get compiled and uploaded to the

00:36:51,599 --> 00:36:55,119
gpu they run on the gpu and basically

00:36:53,760 --> 00:36:57,359
they get run in parallel

00:36:55,119 --> 00:36:58,240
for every pixel that you want to render

00:36:57,359 --> 00:37:02,000
and they can do

00:36:58,240 --> 00:37:03,599
um simple things like just uh

00:37:02,000 --> 00:37:05,760
interpolating between different colors

00:37:03,599 --> 00:37:06,960
or they can do more complicated things

00:37:05,760 --> 00:37:10,400
and

00:37:06,960 --> 00:37:12,880
since we're using shaders for all our ui

00:37:10,400 --> 00:37:14,560
uh elements for gtk itself we figured

00:37:12,880 --> 00:37:16,320
it's also fairly easy for us to allow

00:37:14,560 --> 00:37:18,000
applications to use

00:37:16,320 --> 00:37:19,680
custom shaders and so that's something

00:37:18,000 --> 00:37:23,359
we did within the last

00:37:19,680 --> 00:37:25,200
half year or so and this demo

00:37:23,359 --> 00:37:26,960
uh shows that it's a little ridiculous

00:37:25,200 --> 00:37:29,520
and overcrowded because

00:37:26,960 --> 00:37:30,640
we try to squeeze uh every possible way

00:37:29,520 --> 00:37:34,000
to use system

00:37:30,640 --> 00:37:35,839
shaders in the ui into this one window

00:37:34,000 --> 00:37:37,200
but let's let's walk through that one by

00:37:35,839 --> 00:37:38,800
one

00:37:37,200 --> 00:37:40,400
and see what we have here the those

00:37:38,800 --> 00:37:41,920
colored blobs that you see in the

00:37:40,400 --> 00:37:43,680
background are um

00:37:41,920 --> 00:37:45,599
are rendered with a shader so you can

00:37:43,680 --> 00:37:47,599
just use the shaders and as an animated

00:37:45,599 --> 00:37:50,000
background if you want

00:37:47,599 --> 00:37:51,760
and then the content of the window is

00:37:50,000 --> 00:37:54,800
four stacks

00:37:51,760 --> 00:37:56,720
which are using shaders for their custom

00:37:54,800 --> 00:38:00,560
shaders for their transition between

00:37:56,720 --> 00:38:02,079
the different pages in the stack and

00:38:00,560 --> 00:38:04,240
i'll walk through those in a bit but i

00:38:02,079 --> 00:38:06,480
first wanted to say that um

00:38:04,240 --> 00:38:08,160
the two two stacks here on the right uh

00:38:06,480 --> 00:38:10,400
show actually the widget they show

00:38:08,160 --> 00:38:11,920
currently the current page is um

00:38:10,400 --> 00:38:14,640
astonished with the shader as well

00:38:11,920 --> 00:38:17,599
that's a gtk gl area

00:38:14,640 --> 00:38:20,400
uh showing an example taken from the

00:38:17,599 --> 00:38:23,200
shader toy website

00:38:20,400 --> 00:38:24,720
and as you can see as i as i move the

00:38:23,200 --> 00:38:27,200
mouse over these uh

00:38:24,720 --> 00:38:28,000
widgets because there's another there's

00:38:27,200 --> 00:38:29,839
a wobbly

00:38:28,000 --> 00:38:32,079
rigid effect that is also done with the

00:38:29,839 --> 00:38:34,800
shader on hover

00:38:32,079 --> 00:38:36,400
but now i'll click um i click here to

00:38:34,800 --> 00:38:38,079
actually change the page and you can see

00:38:36,400 --> 00:38:41,119
that there's a

00:38:38,079 --> 00:38:42,560
swipe transition or this is called a

00:38:41,119 --> 00:38:45,359
wind

00:38:42,560 --> 00:38:46,000
this deck has something called radio

00:38:45,359 --> 00:38:48,240
this one

00:38:46,000 --> 00:38:49,520
is doing a crosswalk and this is the

00:38:48,240 --> 00:38:51,040
kaleidoscope

00:38:49,520 --> 00:38:52,800
and all of these effects are not

00:38:51,040 --> 00:38:55,359
something that we invented ourselves

00:38:52,800 --> 00:38:56,960
this side we found that has has a bunch

00:38:55,359 --> 00:38:59,520
of these effects ready made and

00:38:56,960 --> 00:39:00,720
we just copied the shader code from

00:38:59,520 --> 00:39:03,839
there and

00:39:00,720 --> 00:39:06,160
it basically just works

00:39:03,839 --> 00:39:07,200
and all these four stacks contain the

00:39:06,160 --> 00:39:09,440
same

00:39:07,200 --> 00:39:12,320
child widgets and the last one in each

00:39:09,440 --> 00:39:15,680
stack is the source code for the shader

00:39:12,320 --> 00:39:18,320
as you can see here and you can actually

00:39:15,680 --> 00:39:20,320
make a change here and you can uh

00:39:18,320 --> 00:39:22,640
recompile the shader and

00:39:20,320 --> 00:39:24,400
and then use it again and you can see

00:39:22,640 --> 00:39:26,079
the effect has actually changed maybe i

00:39:24,400 --> 00:39:27,040
need to make this a little slower so you

00:39:26,079 --> 00:39:30,160
can

00:39:27,040 --> 00:39:30,160
you can see what's going on

00:39:33,040 --> 00:39:38,079
so um yeah that's uh fun and

00:39:36,560 --> 00:39:40,720
i'm sure people will come up with maybe

00:39:38,079 --> 00:39:43,200
some useful uses for this and a lot of

00:39:40,720 --> 00:39:44,720
silly uses but um the capability is

00:39:43,200 --> 00:39:48,640
there and

00:39:44,720 --> 00:39:48,640
i'm sure you'll have fun exploring that

00:39:48,880 --> 00:39:52,560
yeah i think that's maybe enough demos

00:39:50,720 --> 00:39:53,440
for now um yes there's of course a lot

00:39:52,560 --> 00:39:55,920
more here in

00:39:53,440 --> 00:39:56,720
ngk demo you can see we have quite a few

00:39:55,920 --> 00:39:58,880
demos

00:39:56,720 --> 00:40:11,839
and you can explore that yourself if you

00:39:58,880 --> 00:40:11,839
if you have a build of gtk for

00:41:03,520 --> 00:41:07,839
did my web browser crash while i was

00:41:05,119 --> 00:41:07,839
demoing

00:41:09,200 --> 00:41:14,880
did you guys miss all the demos or did

00:41:10,880 --> 00:41:14,880
you see see a little bit of it

00:41:17,920 --> 00:41:23,839
okay i'm sorry for that i i hope you

00:41:20,960 --> 00:41:26,560
got a little bit out of it and i'll um

00:41:23,839 --> 00:41:30,480
pretend that nothing happens and um

00:41:26,560 --> 00:41:30,480
i'll um let me see if i can actually

00:41:31,760 --> 00:41:36,000
yeah of course i'm not presented now

00:41:33,200 --> 00:41:38,000
anymore so i guess i'll have to be

00:41:36,000 --> 00:41:40,480
made presenter again so i can change the

00:41:38,000 --> 00:41:40,480
slides

00:41:43,200 --> 00:41:50,319
thank you so i

00:41:47,200 --> 00:41:50,319
showed you all of this um

00:41:51,920 --> 00:41:57,599
and most of this and

00:41:54,960 --> 00:41:59,280
before i wrap it up uh i wanted to take

00:41:57,599 --> 00:42:01,200
a brief moment

00:41:59,280 --> 00:42:03,520
to talk a bit about what our plans and

00:42:01,200 --> 00:42:08,160
ideas are for what we'll work on

00:42:03,520 --> 00:42:08,160
once we release gtk 4.0 next month

00:42:10,079 --> 00:42:13,920
so i haven't mentioned accessibility yet

00:42:12,319 --> 00:42:16,640
in this presentation but

00:42:13,920 --> 00:42:17,280
this has been a focus of the gdk team in

00:42:16,640 --> 00:42:19,440
particular

00:42:17,280 --> 00:42:20,640
a focus of emmanuel for the for the past

00:42:19,440 --> 00:42:22,400
year

00:42:20,640 --> 00:42:24,480
we had a hackfest with the members of

00:42:22,400 --> 00:42:25,200
the some members of the accessibility

00:42:24,480 --> 00:42:28,319
community

00:42:25,200 --> 00:42:28,720
in february in brussels that was back

00:42:28,319 --> 00:42:32,240
when

00:42:28,720 --> 00:42:34,880
conferences involved and since then

00:42:32,240 --> 00:42:36,480
we've replaced the aging accessibility

00:42:34,880 --> 00:42:38,640
code in gtk

00:42:36,480 --> 00:42:40,720
with a new implementation that cuts out

00:42:38,640 --> 00:42:41,920
several layers of intermediate code and

00:42:40,720 --> 00:42:44,880
brings us

00:42:41,920 --> 00:42:46,079
much closer to what web browsers and qt

00:42:44,880 --> 00:42:50,319
do in this area

00:42:46,079 --> 00:42:53,440
nowadays so that that was a good step up

00:42:50,319 --> 00:42:55,119
for gtk 4.0 the aim in this area is to

00:42:53,440 --> 00:42:58,079
just have a functional

00:42:55,119 --> 00:43:00,160
atsbi backend that can support using

00:42:58,079 --> 00:43:03,280
gtk4 applications with orca

00:43:00,160 --> 00:43:06,480
the screen reader but the plans for

00:43:03,280 --> 00:43:08,960
after 4.0 include

00:43:06,480 --> 00:43:10,400
writing back-ends for other platforms

00:43:08,960 --> 00:43:11,280
which is something that we've never had

00:43:10,400 --> 00:43:14,880
in gdk

00:43:11,280 --> 00:43:16,800
our accessibility was always linux only

00:43:14,880 --> 00:43:19,200
and with our new with the new code that

00:43:16,800 --> 00:43:20,960
we have in gtk4 now

00:43:19,200 --> 00:43:23,599
it should be a lot easier to write back

00:43:20,960 --> 00:43:25,119
ends for say os x and maybe also on

00:43:23,599 --> 00:43:28,400
windows

00:43:25,119 --> 00:43:29,680
so that is something that will be a

00:43:28,400 --> 00:43:31,200
first for us

00:43:29,680 --> 00:43:32,720
and we're also looking at modernizing

00:43:31,200 --> 00:43:36,240
the 80 sbi

00:43:32,720 --> 00:43:37,680
uh layer on linux so far we are using it

00:43:36,240 --> 00:43:40,240
as is but it really uh

00:43:37,680 --> 00:43:41,680
still smells of corba and it would be

00:43:40,240 --> 00:43:44,480
nice to

00:43:41,680 --> 00:43:44,480
improve on that

00:43:47,040 --> 00:43:51,760
yeah another item uh that's one item

00:43:50,400 --> 00:43:52,960
actually that we had to drop from our

00:43:51,760 --> 00:43:56,240
gtk4 roadmap

00:43:52,960 --> 00:43:57,599
because accessibility was considered

00:43:56,240 --> 00:43:59,680
more important than

00:43:57,599 --> 00:44:01,839
an animation framework but we have not

00:43:59,680 --> 00:44:02,640
given up on on it and we will get back

00:44:01,839 --> 00:44:06,800
to it

00:44:02,640 --> 00:44:06,800
once we have 4.0 done

00:44:07,760 --> 00:44:11,680
yes ui designer everybody loves glade of

00:44:10,079 --> 00:44:13,680
course but um

00:44:11,680 --> 00:44:16,000
it is not quite up to par with what

00:44:13,680 --> 00:44:18,960
other platforms offer in terms of uh

00:44:16,000 --> 00:44:21,359
ui design tools and uh what's worse

00:44:18,960 --> 00:44:22,240
glade does not currently work with gtk4

00:44:21,359 --> 00:44:24,240
because

00:44:22,240 --> 00:44:26,319
there were a number of changes in the ui

00:44:24,240 --> 00:44:29,680
file format and

00:44:26,319 --> 00:44:31,119
glade has not kept up with that we did

00:44:29,680 --> 00:44:33,839
introduce a

00:44:31,119 --> 00:44:34,480
constraint based layout manager in gtk4

00:44:33,839 --> 00:44:37,520
which

00:44:34,480 --> 00:44:39,520
is meant to facilitate writing a more

00:44:37,520 --> 00:44:42,160
modern ui designer but we have not

00:44:39,520 --> 00:44:42,960
actually gotten around to to doing that

00:44:42,160 --> 00:44:44,800
yet

00:44:42,960 --> 00:44:46,640
maybe somebody out there wants to beat

00:44:44,800 --> 00:44:49,839
us to it and show up with a

00:44:46,640 --> 00:44:52,480
with a new ui designer we'd love for

00:44:49,839 --> 00:44:52,480
that to happen

00:44:52,560 --> 00:44:57,280
yes this next item replacing gtk review

00:44:55,440 --> 00:45:00,480
is a bit of a placeholder

00:44:57,280 --> 00:45:02,160
for the incomplete cleanups and api

00:45:00,480 --> 00:45:05,920
modernization tasks that are left

00:45:02,160 --> 00:45:08,000
inside the gtk code base we did add

00:45:05,920 --> 00:45:09,920
the new list and grid widgets that i

00:45:08,000 --> 00:45:11,760
demonstrated a while ago

00:45:09,920 --> 00:45:14,640
and they are meant to eventually replace

00:45:11,760 --> 00:45:16,480
all the cell renderer based widgets

00:45:14,640 --> 00:45:18,400
like the tree view and the combo box and

00:45:16,480 --> 00:45:20,560
the icon view

00:45:18,400 --> 00:45:21,760
but we have not actually removed those

00:45:20,560 --> 00:45:23,440
widgets yet

00:45:21,760 --> 00:45:24,800
one of the reasons for that is that we

00:45:23,440 --> 00:45:27,599
did not want to make

00:45:24,800 --> 00:45:28,000
porting from gtk3 harder than it already

00:45:27,599 --> 00:45:30,400
is

00:45:28,000 --> 00:45:32,079
dealing with all the other changes is is

00:45:30,400 --> 00:45:32,880
enough work and it's much better if you

00:45:32,079 --> 00:45:34,960
can

00:45:32,880 --> 00:45:36,160
first do a gtk4 port and then as a

00:45:34,960 --> 00:45:39,520
second step

00:45:36,160 --> 00:45:39,520
replace uh your main

00:45:40,160 --> 00:45:46,000
widget be that a list or a grid

00:45:43,440 --> 00:45:47,680
and replace that with a model based

00:45:46,000 --> 00:45:49,359
widget

00:45:47,680 --> 00:45:52,079
another reason is that it's it's just a

00:45:49,359 --> 00:45:54,160
lot of work um to replace all these

00:45:52,079 --> 00:45:56,240
gtk combo box itself with the beast air

00:45:54,160 --> 00:45:57,839
gtk trigger itself the beast but uh the

00:45:56,240 --> 00:45:59,280
others like i can view

00:45:57,839 --> 00:46:01,680
and combo box also have a lot of

00:45:59,280 --> 00:46:04,720
features that we kind of need to replace

00:46:01,680 --> 00:46:04,720
before we can drop them

00:46:07,359 --> 00:46:14,160
yeah the last item i have put on this on

00:46:10,319 --> 00:46:16,640
this list of ideas is um

00:46:14,160 --> 00:46:17,280
that it's not just gtk itself that needs

00:46:16,640 --> 00:46:19,520
to

00:46:17,280 --> 00:46:21,040
take advantage of new things that we

00:46:19,520 --> 00:46:23,920
have to offer internally

00:46:21,040 --> 00:46:26,400
there's also a list of other libraries

00:46:23,920 --> 00:46:30,079
that provide more specialized widgets

00:46:26,400 --> 00:46:32,800
such as webkit vta or libg weather

00:46:30,079 --> 00:46:33,440
to name just a few and all those can

00:46:32,800 --> 00:46:36,240
only

00:46:33,440 --> 00:46:37,119
ported need to be ported to gtk4

00:46:36,240 --> 00:46:39,680
thankfully

00:46:37,119 --> 00:46:40,960
a lot of that parting is either done

00:46:39,680 --> 00:46:43,760
already or it's at least

00:46:40,960 --> 00:46:45,680
underway and one of the libraries i

00:46:43,760 --> 00:46:49,040
wanted to mention here specifically is

00:46:45,680 --> 00:46:52,160
lip handy which in recent years has

00:46:49,040 --> 00:46:55,200
served as a useful breeding ground for

00:46:52,160 --> 00:46:56,400
adaptive modern widgets on top of gtk

00:46:55,200 --> 00:46:58,960
iii

00:46:56,400 --> 00:47:01,760
while the gtk team was uh busy working

00:46:58,960 --> 00:47:03,520
on gtk4 so we are very thankful for the

00:47:01,760 --> 00:47:05,760
people working on le pendy that they've

00:47:03,520 --> 00:47:08,480
kept gdk3 alive and

00:47:05,760 --> 00:47:09,680
modern in that way but now that that we

00:47:08,480 --> 00:47:12,240
have gtk for

00:47:09,680 --> 00:47:14,240
uh we kind of need to take a look at

00:47:12,240 --> 00:47:15,839
what the future holds for lip handy and

00:47:14,240 --> 00:47:18,880
similar libraries such as

00:47:15,839 --> 00:47:23,200
elementaries granite

00:47:18,880 --> 00:47:24,400
and um yes so currently this list is not

00:47:23,200 --> 00:47:26,480
really a road map

00:47:24,400 --> 00:47:27,680
it's it's just a grab bag of ideas

00:47:26,480 --> 00:47:30,240
really but we'll have a

00:47:27,680 --> 00:47:31,280
and it's not not exactly clear yet which

00:47:30,240 --> 00:47:34,000
of these we can do

00:47:31,280 --> 00:47:37,119
in gtk 4.x and which of these will have

00:47:34,000 --> 00:47:39,440
to wait for gtk5

00:47:37,119 --> 00:47:40,720
in fact we'll have a planning meeting um

00:47:39,440 --> 00:47:43,040
to discuss this topic

00:47:40,720 --> 00:47:44,559
uh very soon probably next week or the

00:47:43,040 --> 00:47:47,119
week after

00:47:44,559 --> 00:47:48,559
and i'm sure we'll write a rewrite a

00:47:47,119 --> 00:47:52,160
blog post

00:47:48,559 --> 00:47:55,599
with any updates on that

00:47:52,160 --> 00:47:58,160
and that is really um what i had to

00:47:55,599 --> 00:47:59,280
present here today i hope the demos i

00:47:58,160 --> 00:48:01,839
showed um

00:47:59,280 --> 00:48:03,839
give you some idea of what's possible to

00:48:01,839 --> 00:48:06,079
do with gtk4 and make you

00:48:03,839 --> 00:48:06,880
maybe want to try it out and maybe look

00:48:06,079 --> 00:48:09,680
at parting

00:48:06,880 --> 00:48:10,480
some of your applications and with that

00:48:09,680 --> 00:48:19,920
i'll

00:48:10,480 --> 00:48:22,720
probably open it up for questions

00:48:19,920 --> 00:48:24,240
scientifically hearing that but i uh

00:48:22,720 --> 00:48:26,880
understand that you want me to look at

00:48:24,240 --> 00:48:28,960
the shared notes yeah

00:48:26,880 --> 00:48:31,440
okay so um let me let me go there i'll

00:48:28,960 --> 00:48:33,760
just read the questions as i see them

00:48:31,440 --> 00:48:34,800
and we'll try to give you answers all

00:48:33,760 --> 00:48:38,119
right

00:48:34,800 --> 00:48:41,599
first question will gtk4 work on mac os

00:48:38,119 --> 00:48:44,960
11.0.1 that got released today

00:48:41,599 --> 00:48:46,000
um good question um i don't have a mac

00:48:44,960 --> 00:48:47,520
myself

00:48:46,000 --> 00:48:49,839
and as i mentioned earlier in the

00:48:47,520 --> 00:48:51,280
presentation we're having a new mac os

00:48:49,839 --> 00:48:54,240
backend that is being worked on

00:48:51,280 --> 00:48:54,880
which is um not quite complete yet but

00:48:54,240 --> 00:48:56,319
uh

00:48:54,880 --> 00:48:58,160
it's getting there christian herget is

00:48:56,319 --> 00:49:00,720
doing that work because he

00:48:58,160 --> 00:49:02,079
uh has a mac at home and uh was

00:49:00,720 --> 00:49:06,400
interested in taking this

00:49:02,079 --> 00:49:09,440
up i assume that uh once the back end uh

00:49:06,400 --> 00:49:11,359
is uh is functional it'll work on mac os

00:49:09,440 --> 00:49:13,680
11.1 but i

00:49:11,359 --> 00:49:15,119
i can't tell you that anybody has had an

00:49:13,680 --> 00:49:18,640
opportunity to

00:49:15,119 --> 00:49:22,559
to verify that in practice yet

00:49:18,640 --> 00:49:24,400
next question um what conclusions from

00:49:22,559 --> 00:49:26,800
greg's keynote talk would you bring to

00:49:24,400 --> 00:49:28,640
gtk um

00:49:26,800 --> 00:49:30,079
yeah i'm sorry to say i miss black's

00:49:28,640 --> 00:49:31,440
keynote i really

00:49:30,079 --> 00:49:33,760
would have loved to see it but i was

00:49:31,440 --> 00:49:36,079
preparing for my talk so i can't

00:49:33,760 --> 00:49:36,960
can't really answer that i'm sorry i'll

00:49:36,079 --> 00:49:39,119
have to go back and

00:49:36,960 --> 00:49:41,040
and watch the video of that before i can

00:49:39,119 --> 00:49:43,200
say something

00:49:41,040 --> 00:49:45,680
um next question is android finally

00:49:43,200 --> 00:49:49,520
supported for gtk4

00:49:45,680 --> 00:49:53,119
um no not as of today

00:49:49,520 --> 00:49:55,119
what i said in one of the slides is that

00:49:53,119 --> 00:49:57,440
we've simplified our jdk backend

00:49:55,119 --> 00:49:59,280
interface quite a bit so in theory

00:49:57,440 --> 00:50:00,720
it should be easier now to write an

00:49:59,280 --> 00:50:03,280
android backend

00:50:00,720 --> 00:50:04,559
than it was for gtk3 but so far nobody

00:50:03,280 --> 00:50:09,040
has

00:50:04,559 --> 00:50:10,400
started to look at that seriously and

00:50:09,040 --> 00:50:12,000
if anybody's interested in that i don't

00:50:10,400 --> 00:50:13,119
think the gdk team itself has the

00:50:12,000 --> 00:50:15,119
bandwidth

00:50:13,119 --> 00:50:16,800
to take that on we are lucky that we

00:50:15,119 --> 00:50:19,680
have christian herget

00:50:16,800 --> 00:50:20,440
working on a new osx back end but we

00:50:19,680 --> 00:50:21,920
don't really have

00:50:20,440 --> 00:50:24,839
[Music]

00:50:21,920 --> 00:50:26,319
enough people to to produce more back

00:50:24,839 --> 00:50:28,000
ends

00:50:26,319 --> 00:50:30,160
by ourselves i mean if anybody else

00:50:28,000 --> 00:50:34,000
wants to show up we'd be very happy to

00:50:30,160 --> 00:50:34,000
to help out and guide any efforts

00:50:34,160 --> 00:50:38,319
next question will theming change any in

00:50:36,400 --> 00:50:41,839
jdk4

00:50:38,319 --> 00:50:43,839
um not significantly i think our css

00:50:41,839 --> 00:50:47,280
support in gtk3 was already

00:50:43,839 --> 00:50:50,160
um more or less at the same level

00:50:47,280 --> 00:50:52,079
uh than it is now in gtk4 if anything

00:50:50,160 --> 00:50:54,720
we've probably removed a few um

00:50:52,079 --> 00:50:56,400
custom things that um were not necessary

00:50:54,720 --> 00:50:57,760
anymore because we now support more of

00:50:56,400 --> 00:51:01,040
the standard

00:50:57,760 --> 00:51:03,119
the css mechanisms for doing things but

00:51:01,040 --> 00:51:05,520
um basically the theming is all the same

00:51:03,119 --> 00:51:07,359
you have a css style sheet um

00:51:05,520 --> 00:51:08,880
and widgets have element names and can

00:51:07,359 --> 00:51:14,000
have style classes

00:51:08,880 --> 00:51:14,000
and all that is unchanged from gtk 3.

00:51:15,359 --> 00:51:20,640
um next question who are gtk developers

00:51:18,800 --> 00:51:24,240
keen hobbyists paid by red hat

00:51:20,640 --> 00:51:26,319
something else we have both we have

00:51:24,240 --> 00:51:28,400
people who are paid by red hat and are

00:51:26,319 --> 00:51:30,880
paid to work on gtk and we have some

00:51:28,400 --> 00:51:32,640
people who also work at red hat but work

00:51:30,880 --> 00:51:33,680
on gtk is their hobby and we have people

00:51:32,640 --> 00:51:36,480
who do not work at

00:51:33,680 --> 00:51:38,720
red hat for instance in monorail is uh

00:51:36,480 --> 00:51:40,960
employed by the gnome foundation

00:51:38,720 --> 00:51:42,800
as a developer to work on gdk and other

00:51:40,960 --> 00:51:45,760
things

00:51:42,800 --> 00:51:46,240
and yes um so it's a it's a small team

00:51:45,760 --> 00:51:48,480
of

00:51:46,240 --> 00:51:51,200
i would say between five and ten people

00:51:48,480 --> 00:51:55,119
who regularly contribute to

00:51:51,200 --> 00:51:57,599
gtk and a larger group of people who are

00:51:55,119 --> 00:52:00,319
filing issues and sometimes provide

00:51:57,599 --> 00:52:00,319
fixes as well

00:52:00,720 --> 00:52:08,000
next question is there a vulcan backend

00:52:04,079 --> 00:52:09,520
so um yes um maybe i'll

00:52:08,000 --> 00:52:10,720
step back a little bit here to say um

00:52:09,520 --> 00:52:12,000
there's two different things here we

00:52:10,720 --> 00:52:13,839
have um

00:52:12,000 --> 00:52:15,680
gdk has back ends for different

00:52:13,839 --> 00:52:17,440
platforms as i said earlier we have an

00:52:15,680 --> 00:52:19,200
osx backend for

00:52:17,440 --> 00:52:21,359
that's essentially the windowing system

00:52:19,200 --> 00:52:23,040
part of of gtk that um

00:52:21,359 --> 00:52:24,640
where we have uh one backhand for each

00:52:23,040 --> 00:52:27,839
platform there's a windows backend

00:52:24,640 --> 00:52:29,119
there's a an x11 back-end there's a

00:52:27,839 --> 00:52:30,880
wayland back-end

00:52:29,119 --> 00:52:32,640
and we have a back-end for called

00:52:30,880 --> 00:52:37,119
broadway for rendering

00:52:32,640 --> 00:52:38,880
um gtk uis um in a web browser

00:52:37,119 --> 00:52:40,319
and that's the that's the windowing part

00:52:38,880 --> 00:52:42,400
and then there's a

00:52:40,319 --> 00:52:44,000
renderer which is uh basically um

00:52:42,400 --> 00:52:46,880
determines how we render

00:52:44,000 --> 00:52:47,280
and i said we're using opengl now so

00:52:46,880 --> 00:52:50,960
that's

00:52:47,280 --> 00:52:52,800
done by the gl renderer and we do have a

00:52:50,960 --> 00:52:56,240
vulcan renderer as well

00:52:52,800 --> 00:52:58,720
which is um somewhat less complete so

00:52:56,240 --> 00:52:59,280
for 4.0 i think the gl render will be

00:52:58,720 --> 00:53:02,559
our

00:52:59,280 --> 00:53:02,880
primary best supported renderer we do

00:53:02,559 --> 00:53:05,119
have

00:53:02,880 --> 00:53:06,079
a cairo renderer as well which is the

00:53:05,119 --> 00:53:07,839
the

00:53:06,079 --> 00:53:09,760
renderer that gets used as fallback when

00:53:07,839 --> 00:53:11,200
we don't have hardware acceleration

00:53:09,760 --> 00:53:13,680
available

00:53:11,200 --> 00:53:14,319
um yes but the vulcan we can convert a

00:53:13,680 --> 00:53:18,319
little less

00:53:14,319 --> 00:53:19,839
mature maybe than the gl one and um

00:53:18,319 --> 00:53:21,920
part of the problem here is that we as

00:53:19,839 --> 00:53:24,160
gdk developers are not really expert

00:53:21,920 --> 00:53:25,760
experts in using any of these apis so we

00:53:24,160 --> 00:53:28,160
are not game developers who

00:53:25,760 --> 00:53:28,960
who have extensive knowledge in how gl

00:53:28,160 --> 00:53:31,359
works or how

00:53:28,960 --> 00:53:32,000
vulcan works so we are kind of feeling

00:53:31,359 --> 00:53:34,400
our way

00:53:32,000 --> 00:53:35,599
into these apis and and do as best as we

00:53:34,400 --> 00:53:38,880
can

00:53:35,599 --> 00:53:42,079
but vulcan is is not an easy api to

00:53:38,880 --> 00:53:44,640
to handle in this fashion so if anybody

00:53:42,079 --> 00:53:46,559
uh past experience using vulcan and

00:53:44,640 --> 00:53:47,839
doing vulcan development and

00:53:46,559 --> 00:53:50,720
helping out with the vulcan back end

00:53:47,839 --> 00:53:53,680
would be very much appreciated

00:53:50,720 --> 00:53:54,800
all right next question could gtk4 demo

00:53:53,680 --> 00:53:57,040
be added to flatter

00:53:54,800 --> 00:53:58,160
as a flat pick i feel that would build

00:53:57,040 --> 00:54:00,559
hype and let's

00:53:58,160 --> 00:54:01,839
let the developers get hands on it even

00:54:00,559 --> 00:54:03,119
easier

00:54:01,839 --> 00:54:04,880
i think that's a great idea we do

00:54:03,119 --> 00:54:06,960
actually ship

00:54:04,880 --> 00:54:08,240
we do have flatback builds of of our

00:54:06,960 --> 00:54:11,599
demo apps both of

00:54:08,240 --> 00:54:14,280
gtk demo and of widget factory

00:54:11,599 --> 00:54:16,319
they are uh available from from

00:54:14,280 --> 00:54:18,960
gitlab.net

00:54:16,319 --> 00:54:20,319
but uh putting them on on flat up sounds

00:54:18,960 --> 00:54:22,559
like a great idea we should look into

00:54:20,319 --> 00:54:22,559
that

00:54:22,640 --> 00:54:26,319
next question what is the gtk for mm

00:54:25,599 --> 00:54:29,119
status

00:54:26,319 --> 00:54:30,000
um i'll take that question a little more

00:54:29,119 --> 00:54:32,480
generally

00:54:30,000 --> 00:54:34,240
and talk about bindings in general so um

00:54:32,480 --> 00:54:35,440
there's a lot of bindings for gtk that

00:54:34,240 --> 00:54:38,720
has always been

00:54:35,440 --> 00:54:40,240
one of our strengths and the gdk team

00:54:38,720 --> 00:54:40,640
does not have the bandwidth to work on

00:54:40,240 --> 00:54:43,440
them

00:54:40,640 --> 00:54:45,119
ourselves um we can provide the

00:54:43,440 --> 00:54:48,240
introspection data like the

00:54:45,119 --> 00:54:50,160
girl file that um all the g object

00:54:48,240 --> 00:54:52,000
introspection based bindings are using

00:54:50,160 --> 00:54:56,000
and we try to keep those up to date

00:54:52,000 --> 00:54:57,359
and fix any any binding api issues that

00:54:56,000 --> 00:54:58,960
people point out to us

00:54:57,359 --> 00:55:00,400
but we don't really have the bandwidth

00:54:58,960 --> 00:55:02,720
to work on

00:55:00,400 --> 00:55:04,960
on bindings ourselves so i don't

00:55:02,720 --> 00:55:09,359
actually know if anybody is working on

00:55:04,960 --> 00:55:12,799
on porting gtk mm to gtk4

00:55:09,359 --> 00:55:15,200
so i can't can't really answer that

00:55:12,799 --> 00:55:16,640
i don't know that people are um fixing

00:55:15,200 --> 00:55:18,960
up the um

00:55:16,640 --> 00:55:20,640
pi g object bindings there's some

00:55:18,960 --> 00:55:22,079
overrides in there that need adjustments

00:55:20,640 --> 00:55:23,760
for gtk4 and

00:55:22,079 --> 00:55:26,319
i think that's actively being worked on

00:55:23,760 --> 00:55:30,480
and i think you hope to have working

00:55:26,319 --> 00:55:33,520
python bindings at least for 4.0

00:55:30,480 --> 00:55:35,680
next question gtk5 how long is gtk4

00:55:33,520 --> 00:55:38,480
meant to last

00:55:35,680 --> 00:55:40,160
so as i as i alluded to in my

00:55:38,480 --> 00:55:42,240
presentation we will have a

00:55:40,160 --> 00:55:43,200
planning meeting with the core gtk team

00:55:42,240 --> 00:55:45,119
um

00:55:43,200 --> 00:55:46,839
in the next week or two where i guess

00:55:45,119 --> 00:55:49,040
this topic will be

00:55:46,839 --> 00:55:50,880
discussed um so i don't really have a

00:55:49,040 --> 00:55:52,480
firm answer on this yet my own

00:55:50,880 --> 00:55:54,079
my own opinion on this is that we should

00:55:52,480 --> 00:55:55,839
probably aim

00:55:54,079 --> 00:55:58,400
for um what we said when we when we

00:55:55,839 --> 00:56:01,119
started gtk 4 work we said

00:55:58,400 --> 00:56:02,480
we'll have gtk 4 in two years and it

00:56:01,119 --> 00:56:04,799
turned out

00:56:02,480 --> 00:56:07,200
that that estimate was wrong to nobody's

00:56:04,799 --> 00:56:08,720
surprise we took quite twice as long

00:56:07,200 --> 00:56:11,119
it has taken us four years now i think

00:56:08,720 --> 00:56:13,440
that was probably a little bit too long

00:56:11,119 --> 00:56:14,960
in retrospect and i would hope that we

00:56:13,440 --> 00:56:17,760
can do a gtk 5

00:56:14,960 --> 00:56:20,319
a little sooner but it's an estimate so

00:56:17,760 --> 00:56:23,200
you know how to take it

00:56:20,319 --> 00:56:25,280
next question um what's the future of

00:56:23,200 --> 00:56:28,319
cairo

00:56:25,280 --> 00:56:30,240
good question maybe some of you saw saw

00:56:28,319 --> 00:56:32,240
that pop up on hacker news this morning

00:56:30,240 --> 00:56:34,319
i i'm struggling um

00:56:32,240 --> 00:56:36,400
to find somebody to do a cairo release

00:56:34,319 --> 00:56:37,760
that we we kind of need because we want

00:56:36,400 --> 00:56:39,599
some of the

00:56:37,760 --> 00:56:41,440
bug fixes in the front rendering that

00:56:39,599 --> 00:56:43,280
are in cairo master but

00:56:41,440 --> 00:56:44,960
have not seen a release even though they

00:56:43,280 --> 00:56:46,240
have been merged more than way more than

00:56:44,960 --> 00:56:48,799
a year ago

00:56:46,240 --> 00:56:50,640
and um currently still struggling to

00:56:48,799 --> 00:56:51,920
figure out who i can convince to upload

00:56:50,640 --> 00:56:54,319
a cairo table

00:56:51,920 --> 00:56:55,599
so um child development is not entirely

00:56:54,319 --> 00:56:56,799
dead there's people who are committing

00:56:55,599 --> 00:56:58,160
things but i

00:56:56,799 --> 00:57:00,319
am strongly struggling to find a

00:56:58,160 --> 00:57:01,359
maintainer who who can do an actual

00:57:00,319 --> 00:57:03,359
release because

00:57:01,359 --> 00:57:05,760
as things then most linux distributions

00:57:03,359 --> 00:57:08,559
still ship cairo 116

00:57:05,760 --> 00:57:09,520
which is uh almost three years older now

00:57:08,559 --> 00:57:11,480
i think

00:57:09,520 --> 00:57:13,280
and the latest development snapshot

00:57:11,480 --> 00:57:15,440
117.2

00:57:13,280 --> 00:57:16,319
is also one and a half years old now so

00:57:15,440 --> 00:57:17,760
um

00:57:16,319 --> 00:57:21,200
things aren't looking too bright in

00:57:17,760 --> 00:57:23,599
cairo and um

00:57:21,200 --> 00:57:24,799
we'll have to figure out what we can do

00:57:23,599 --> 00:57:27,280
there

00:57:24,799 --> 00:57:28,720
we certainly it's more palatable now

00:57:27,280 --> 00:57:30,319
than than it was in the past to use

00:57:28,720 --> 00:57:33,680
other rendering apis with

00:57:30,319 --> 00:57:35,920
with gtk um we don't

00:57:33,680 --> 00:57:37,200
our our draw callback that we had in

00:57:35,920 --> 00:57:39,040
gdk3 was

00:57:37,200 --> 00:57:40,960
taking a cairo context so basically you

00:57:39,040 --> 00:57:42,960
were forced to use cairo

00:57:40,960 --> 00:57:44,960
and that is no longer the case in gtk4

00:57:42,960 --> 00:57:48,480
we have a

00:57:44,960 --> 00:57:51,040
snapshot refund that replaces the draw

00:57:48,480 --> 00:57:53,359
defunct in gtk3 and that does not take a

00:57:51,040 --> 00:57:55,680
chiral context it takes a

00:57:53,359 --> 00:57:57,680
thing called a gtk snapshot object to

00:57:55,680 --> 00:57:59,280
which you add the render nodes that make

00:57:57,680 --> 00:58:01,440
up your scene graph

00:57:59,280 --> 00:58:03,280
and if you want you can you can create a

00:58:01,440 --> 00:58:03,760
chiral render node which will then give

00:58:03,280 --> 00:58:06,960
you a

00:58:03,760 --> 00:58:11,040
chiral context to do chiral drawing but

00:58:06,960 --> 00:58:14,079
it's no longer um a expected part of the

00:58:11,040 --> 00:58:15,599
of the snapshot api so in in principle

00:58:14,079 --> 00:58:19,200
we are slowly

00:58:15,599 --> 00:58:20,400
uh reducing our dependency on cairo but

00:58:19,200 --> 00:58:21,680
um

00:58:20,400 --> 00:58:23,440
it's certainly still very common to

00:58:21,680 --> 00:58:26,480
render things using cairo

00:58:23,440 --> 00:58:29,440
in gtk applications so we still need

00:58:26,480 --> 00:58:29,440
that chiral release

00:58:29,520 --> 00:58:33,359
next question is it possible to develop

00:58:31,359 --> 00:58:36,480
gtk using other lengths

00:58:33,359 --> 00:58:37,760
like rust or go i think there's

00:58:36,480 --> 00:58:40,160
there's two answers to that the first

00:58:37,760 --> 00:58:42,079
one the the first question here is is it

00:58:40,160 --> 00:58:44,720
possible to write applications uh

00:58:42,079 --> 00:58:45,839
http applications in other languages and

00:58:44,720 --> 00:58:48,480
for that the answer is

00:58:45,839 --> 00:58:50,400
a very definitive yes we have as i said

00:58:48,480 --> 00:58:52,000
a lot of bindings and

00:58:50,400 --> 00:58:54,799
in particular there's rust bindings

00:58:52,000 --> 00:58:55,920
being actively developed currently and

00:58:54,799 --> 00:58:59,119
there's bindings for many other

00:58:55,920 --> 00:59:02,480
languages on the gtk website

00:58:59,119 --> 00:59:02,480
and as those bindings

00:59:02,880 --> 00:59:06,480
get adapted to gtk4 you'll be able to

00:59:04,880 --> 00:59:08,079
write gtk for applications in any of

00:59:06,480 --> 00:59:10,640
those languages

00:59:08,079 --> 00:59:11,920
as to whether you can develop gtk itself

00:59:10,640 --> 00:59:13,599
using other languages

00:59:11,920 --> 00:59:16,160
for that the answer currently is we

00:59:13,599 --> 00:59:16,880
stick to we stick to c because that's

00:59:16,160 --> 00:59:20,559
the

00:59:16,880 --> 00:59:22,480
the universal universal uh language that

00:59:20,559 --> 00:59:25,119
makes binding to any other language

00:59:22,480 --> 00:59:26,720
relatively easy now whether we in the

00:59:25,119 --> 00:59:29,040
future want to consider

00:59:26,720 --> 00:59:31,280
allowing rust code in the gtk code base

00:59:29,040 --> 00:59:34,559
as long as it has a

00:59:31,280 --> 00:59:37,520
c api exported that

00:59:34,559 --> 00:59:40,640
is to be seen i'm sure that people would

00:59:37,520 --> 00:59:40,640
be interested in doing that

00:59:42,160 --> 00:59:46,720
i think that's maybe all the questions

00:59:43,920 --> 00:59:49,359
i've seen here there's no other

00:59:46,720 --> 00:59:51,359
nothing that does seem to be all the

00:59:49,359 --> 00:59:54,799
questions

00:59:51,359 --> 00:59:57,599
thank you you're awful and answering

00:59:54,799 --> 01:00:00,880
those questions in such great depth

00:59:57,599 --> 01:00:03,520
we appreciate it very much

01:00:00,880 --> 01:00:05,280
um we hope uh you also get to enjoy the

01:00:03,520 --> 01:00:07,200
rest of the conference along with us

01:00:05,280 --> 01:00:09,680
so hopefully we get to see you stick

01:00:07,200 --> 01:00:09,680
around

01:00:09,920 --> 01:00:15,680
sure thanks yeah absolutely have a

01:00:12,799 --> 01:00:18,079
wonderful rest of your day or evening

01:00:15,680 --> 01:00:21,200
wherever you are

01:00:18,079 --> 01:00:23,200
and for our lovely audience

01:00:21,200 --> 01:00:25,920
we will be right back in a few minutes

01:00:23,200 --> 01:00:29,839
with alex from kde who will talk to us

01:00:25,920 --> 01:00:29,839
about weyland

01:03:32,480 --> 01:03:37,920
hello alice how are you

01:03:40,559 --> 01:03:45,280
still muted yeah uh i'm great how are

01:03:44,480 --> 01:03:48,079
you alison

01:03:45,280 --> 01:03:50,079
doing great it's good to see you

01:03:48,079 --> 01:03:51,920
everyone please give a warm

01:03:50,079 --> 01:03:53,599
virtual round of applause for alice who

01:03:51,920 --> 01:03:56,319
will be talking to us about weyland for

01:03:53,599 --> 01:03:58,960
app developers

01:03:56,319 --> 01:04:00,720
okay uh thanks thanks everyone for the

01:03:58,960 --> 01:04:04,319
virtual round of applause

01:04:00,720 --> 01:04:08,400
it was virtually great um all right

01:04:04,319 --> 01:04:11,039
so for the talk today i thought that um

01:04:08,400 --> 01:04:12,880
instead of talking about uh things that

01:04:11,039 --> 01:04:15,280
are happening which is what i generally

01:04:12,880 --> 01:04:18,400
talk about because i am a developer

01:04:15,280 --> 01:04:20,480
i thought um well

01:04:18,400 --> 01:04:22,960
what will developers care about when

01:04:20,480 --> 01:04:25,200
they start developing their applications

01:04:22,960 --> 01:04:26,960
in general we are talking about graphics

01:04:25,200 --> 01:04:30,079
or graphical applications

01:04:26,960 --> 01:04:32,240
much like what um

01:04:30,079 --> 01:04:33,280
matthias was just talking to us about

01:04:32,240 --> 01:04:36,559
like all of these

01:04:33,280 --> 01:04:39,280
uh fancy graphic effects and

01:04:36,559 --> 01:04:40,400
stuff and i think that it's important to

01:04:39,280 --> 01:04:43,200
understand

01:04:40,400 --> 01:04:44,000
what is the process for our application

01:04:43,200 --> 01:04:48,079
to go into

01:04:44,000 --> 01:04:50,240
our uh user screens and displays and

01:04:48,079 --> 01:04:51,680
well wherever they use it because this

01:04:50,240 --> 01:04:53,520
changes every day

01:04:51,680 --> 01:04:55,680
so that's why i thought it could make

01:04:53,520 --> 01:04:58,559
sense to

01:04:55,680 --> 01:05:00,079
well talk a little bit about what uh

01:04:58,559 --> 01:05:01,920
waylon is

01:05:00,079 --> 01:05:03,119
i am also talking about whalen

01:05:01,920 --> 01:05:06,079
specifically not

01:05:03,119 --> 01:05:06,880
which is where they're going at least

01:05:06,079 --> 01:05:10,319
for the community

01:05:06,880 --> 01:05:10,640
as a whole some of us are more advanced

01:05:10,319 --> 01:05:13,119
in

01:05:10,640 --> 01:05:13,920
adopting it than others but uh in the

01:05:13,119 --> 01:05:16,960
end

01:05:13,920 --> 01:05:20,079
it's not entirely the status quo yet so

01:05:16,960 --> 01:05:21,599
it's still a technology that

01:05:20,079 --> 01:05:23,440
i am guessing that some of the

01:05:21,599 --> 01:05:26,319
developers need to embrace still

01:05:23,440 --> 01:05:27,839
uh first of all let me ooh the penguins

01:05:26,319 --> 01:05:31,359
look weird this used to be

01:05:27,839 --> 01:05:34,960
uh penguins emoji i think that

01:05:31,359 --> 01:05:37,200
big boboto doesn't like my emojis but

01:05:34,960 --> 01:05:38,160
i mean they were more cute as penguins

01:05:37,200 --> 01:05:41,200
but sorry about that

01:05:38,160 --> 01:05:43,599
who am i uh well my name is alex paul i

01:05:41,200 --> 01:05:44,319
am from barcelona i uh i have been

01:05:43,599 --> 01:05:48,799
developing

01:05:44,319 --> 01:05:52,000
kde software for the last uh 15 years

01:05:48,799 --> 01:05:55,359
maybe more i get old quickly

01:05:52,000 --> 01:05:55,839
um i am the kdp president as well right

01:05:55,359 --> 01:05:57,920
now

01:05:55,839 --> 01:05:59,039
but uh well i'm still a software

01:05:57,920 --> 01:06:01,920
engineer

01:05:59,039 --> 01:06:02,960
and i work for blue systems doing well

01:06:01,920 --> 01:06:06,319
software development

01:06:02,960 --> 01:06:08,559
within kde i've been involved

01:06:06,319 --> 01:06:11,440
both on developing different

01:06:08,559 --> 01:06:14,319
applications within kde edu for example

01:06:11,440 --> 01:06:16,559
okay developer and our id but i've also

01:06:14,319 --> 01:06:19,200
been working as well as

01:06:16,559 --> 01:06:20,640
within plasma doing well our software

01:06:19,200 --> 01:06:24,160
center and more recently

01:06:20,640 --> 01:06:26,400
working on quinn which is our well

01:06:24,160 --> 01:06:27,920
window manager back then and whalen

01:06:26,400 --> 01:06:31,119
compositor nowadays

01:06:27,920 --> 01:06:35,359
uh which is how i got to well

01:06:31,119 --> 01:06:37,680
thinking about this kind of topic now um

01:06:35,359 --> 01:06:39,599
a bit the history for those of you who

01:06:37,680 --> 01:06:41,760
haven't been around forever

01:06:39,599 --> 01:06:42,720
and i'm not gonna even claim that i've

01:06:41,760 --> 01:06:44,880
been around forever

01:06:42,720 --> 01:06:46,880
even if i've been around for 15 years

01:06:44,880 --> 01:06:50,799
because

01:06:46,880 --> 01:06:54,079
in unix time forever takes much longer

01:06:50,799 --> 01:06:56,480
x11 which is what well

01:06:54,079 --> 01:06:58,000
still a lot of people are using nowadays

01:06:56,480 --> 01:07:00,240
was

01:06:58,000 --> 01:07:01,440
a system that was designed in the in the

01:07:00,240 --> 01:07:05,119
80s

01:07:01,440 --> 01:07:08,160
in um in conjunction with

01:07:05,119 --> 01:07:09,839
unix i'm not gonna claim that i know

01:07:08,160 --> 01:07:13,039
what happened because i wasn't born

01:07:09,839 --> 01:07:16,000
even then but i think that uh

01:07:13,039 --> 01:07:17,760
well it shows two very things that are i

01:07:16,000 --> 01:07:19,920
think very important one that

01:07:17,760 --> 01:07:21,680
we've been working on technology that

01:07:19,920 --> 01:07:26,880
has been established over

01:07:21,680 --> 01:07:26,880
a very long time and also that

01:07:26,960 --> 01:07:30,720
there was an intuit for for a change

01:07:29,440 --> 01:07:32,480
because well

01:07:30,720 --> 01:07:33,920
the world has definitely changed since

01:07:32,480 --> 01:07:37,280
back then now

01:07:33,920 --> 01:07:38,880
uh x11 and x3 which was the

01:07:37,280 --> 01:07:41,359
implementation that we

01:07:38,880 --> 01:07:42,240
i guess most of us started using when we

01:07:41,359 --> 01:07:45,920
got introduced

01:07:42,240 --> 01:07:50,000
in in linux

01:07:45,920 --> 01:07:53,119
was developed for a big

01:07:50,000 --> 01:07:56,799
mainframe a computer sorry about that

01:07:53,119 --> 01:07:58,880
big main mainframe computer so that

01:07:56,799 --> 01:07:59,839
they could put it in a university in a

01:07:58,880 --> 01:08:02,880
company and

01:07:59,839 --> 01:08:06,319
everybody would well join and

01:08:02,880 --> 01:08:07,920
uh from their own dumb clients and

01:08:06,319 --> 01:08:11,760
they would get well their own little

01:08:07,920 --> 01:08:14,319
windows and things

01:08:11,760 --> 01:08:16,319
and get their their job done in a big

01:08:14,319 --> 01:08:20,080
computer elsewhere which is actually

01:08:16,319 --> 01:08:23,839
how we don't work nowadays now we still

01:08:20,080 --> 01:08:25,839
do a lot of our work

01:08:23,839 --> 01:08:28,080
on the cloud which we call it nowadays

01:08:25,839 --> 01:08:31,600
back then it wasn't called the cloud

01:08:28,080 --> 01:08:32,400
uh but well the graphical things they

01:08:31,600 --> 01:08:35,839
always happen

01:08:32,400 --> 01:08:40,480
on our computers be it well a desktop

01:08:35,839 --> 01:08:40,480
computer but also a mobile phone

01:08:40,640 --> 01:08:45,120
which is quite telling right like back

01:08:42,319 --> 01:08:45,600
then the graphics part was considered

01:08:45,120 --> 01:08:48,960
something

01:08:45,600 --> 01:08:50,799
hard to do whereas nowadays it's the

01:08:48,960 --> 01:08:52,480
kind of thing that we relegate into

01:08:50,799 --> 01:08:55,679
every device because

01:08:52,480 --> 01:08:58,480
we're good enough at it

01:08:55,679 --> 01:09:00,799
anyway moving into the future uh which

01:08:58,480 --> 01:09:04,080
is actually when i started to

01:09:00,799 --> 01:09:08,000
be part of the community there was this

01:09:04,080 --> 01:09:11,440
xgl project which was all super fancy

01:09:08,000 --> 01:09:14,560
which basically what it was doing was

01:09:11,440 --> 01:09:19,279
to include in the

01:09:14,560 --> 01:09:22,239
linux desktop or yeah the laptop

01:09:19,279 --> 01:09:23,679
technologies that we had been getting

01:09:22,239 --> 01:09:28,319
familiarized with for

01:09:23,679 --> 01:09:32,400
for example games uh like opengl

01:09:28,319 --> 01:09:34,640
so that while our systems would

01:09:32,400 --> 01:09:36,000
be able to use the hardware accelerate

01:09:34,640 --> 01:09:38,960
acceleration that

01:09:36,000 --> 01:09:39,440
that we had available right uh something

01:09:38,960 --> 01:09:41,920
that i

01:09:39,440 --> 01:09:44,080
learned at university and many of you

01:09:41,920 --> 01:09:46,719
will have as well is that

01:09:44,080 --> 01:09:48,000
the universal way of making any program

01:09:46,719 --> 01:09:51,199
run faster is by

01:09:48,000 --> 01:09:53,520
making uh well hardware ad hoc for

01:09:51,199 --> 01:09:55,280
solving that problem right and well

01:09:53,520 --> 01:09:58,640
graphics was a problem back then

01:09:55,280 --> 01:10:02,320
like i said from the from the beginning

01:09:58,640 --> 01:10:03,120
uh and we got eventually harvard to do

01:10:02,320 --> 01:10:06,159
it that

01:10:03,120 --> 01:10:07,760
was uh well by 2006 it was already quite

01:10:06,159 --> 01:10:10,320
fancy

01:10:07,760 --> 01:10:11,760
um there were a lot of well 3d based

01:10:10,320 --> 01:10:15,120
games already that

01:10:11,760 --> 01:10:17,280
people were running even consoles and

01:10:15,120 --> 01:10:18,239
this kind of stuff so it made a lot of

01:10:17,280 --> 01:10:21,520
sense to use it

01:10:18,239 --> 01:10:23,840
on on our desktops now

01:10:21,520 --> 01:10:23,840
um

01:10:25,040 --> 01:10:28,719
this was something that was put on top

01:10:26,880 --> 01:10:31,120
of x11

01:10:28,719 --> 01:10:32,239
because that's what all of our

01:10:31,120 --> 01:10:34,800
applications

01:10:32,239 --> 01:10:36,560
uh understood and it was the only thing

01:10:34,800 --> 01:10:39,840
that we had that could talk to

01:10:36,560 --> 01:10:42,800
our uh graphics cards

01:10:39,840 --> 01:10:44,320
and well it kind of worked and it had a

01:10:42,800 --> 01:10:47,440
very famous demo

01:10:44,320 --> 01:10:49,840
with a cube rotating between the

01:10:47,440 --> 01:10:49,840
different

01:10:50,080 --> 01:10:54,239
the different desktops virtual desktops

01:10:53,040 --> 01:10:58,080
which was

01:10:54,239 --> 01:11:00,400
fancy and i mean today it doesn't sound

01:10:58,080 --> 01:11:01,600
like that impressive but back then it

01:11:00,400 --> 01:11:03,440
was like

01:11:01,600 --> 01:11:05,120
look at what this crazy people are doing

01:11:03,440 --> 01:11:06,400
and by the way this wasn't this didn't

01:11:05,120 --> 01:11:09,520
really happen in a bubble

01:11:06,400 --> 01:11:11,920
this is around this time also microsoft

01:11:09,520 --> 01:11:12,960
started doing that for windows as well

01:11:11,920 --> 01:11:17,600
and so did

01:11:12,960 --> 01:11:20,800
apple for for mac os um

01:11:17,600 --> 01:11:23,520
so this created this super complex

01:11:20,800 --> 01:11:25,440
kind of solution that was not really

01:11:23,520 --> 01:11:28,000
future proof so

01:11:25,440 --> 01:11:29,199
people started working into alternatives

01:11:28,000 --> 01:11:33,120
x11 and

01:11:29,199 --> 01:11:35,600
xorg already back then uh started to

01:11:33,120 --> 01:11:38,159
get adopted into these kind of premises

01:11:35,600 --> 01:11:38,159
and so did

01:11:38,960 --> 01:11:43,040
uh so um we started getting it and if

01:11:41,600 --> 01:11:45,840
you today start using

01:11:43,040 --> 01:11:47,040
an x11 based linux desktop you will see

01:11:45,840 --> 01:11:48,320
a lot of these features already

01:11:47,040 --> 01:11:51,120
available it's not like you need

01:11:48,320 --> 01:11:51,840
weyland to do to do all of this stuff

01:11:51,120 --> 01:11:53,760
but

01:11:51,840 --> 01:11:55,280
eventually in 2013 according to

01:11:53,760 --> 01:11:56,960
wikipedia all of these dates are

01:11:55,280 --> 01:11:58,960
according to wikipedia i'm not a

01:11:56,960 --> 01:12:02,640
historian myself sorry about that

01:11:58,960 --> 01:12:06,480
uh we started uh developing

01:12:02,640 --> 01:12:09,600
uh weyland which is what we are gonna

01:12:06,480 --> 01:12:13,679
cover during this talk today now

01:12:09,600 --> 01:12:16,320
um click

01:12:13,679 --> 01:12:17,600
so why why why did we need uh other

01:12:16,320 --> 01:12:20,000
things what do we

01:12:17,600 --> 01:12:21,040
as application developers now we need to

01:12:20,000 --> 01:12:23,280
think about

01:12:21,040 --> 01:12:26,480
two target platforms in practice rather

01:12:23,280 --> 01:12:26,480
than just the one

01:12:27,360 --> 01:12:31,600
at least for for a transitional time

01:12:31,760 --> 01:12:34,960
well uh for

01:12:35,120 --> 01:12:40,640
for starters we want stability uh

01:12:38,400 --> 01:12:41,920
the development of of xorg and

01:12:40,640 --> 01:12:44,239
compositors on top

01:12:41,920 --> 01:12:45,360
became like it definitely works and it

01:12:44,239 --> 01:12:50,560
worked for

01:12:45,360 --> 01:12:52,320
a good 30 years without uh i would say

01:12:50,560 --> 01:12:55,120
without problems but then it weren't my

01:12:52,320 --> 01:12:58,320
problem so i i know that a lot of people

01:12:55,120 --> 01:12:59,360
uh well sweated a lot uh during the

01:12:58,320 --> 01:13:02,719
process

01:12:59,360 --> 01:13:05,199
and well people eventually wanted to

01:13:02,719 --> 01:13:07,280
have this more simpler solution where

01:13:05,199 --> 01:13:09,920
from a compositor

01:13:07,280 --> 01:13:11,040
you could decide how things work how

01:13:09,920 --> 01:13:13,600
things uh

01:13:11,040 --> 01:13:15,440
communicate between one another and the

01:13:13,600 --> 01:13:17,040
way you have as a maintainer to

01:13:15,440 --> 01:13:19,520
say this is stable this is something

01:13:17,040 --> 01:13:20,239
that i i feel capable of delivering to

01:13:19,520 --> 01:13:23,280
my

01:13:20,239 --> 01:13:24,640
my users is by being able to somewhat

01:13:23,280 --> 01:13:27,679
control and

01:13:24,640 --> 01:13:30,960
uh be able to decide on what the

01:13:27,679 --> 01:13:36,239
stack is um this is something that

01:13:30,960 --> 01:13:36,239
we do get by wayland uh through the

01:13:36,320 --> 01:13:41,840
the newer design we also uh are looking

01:13:39,920 --> 01:13:44,400
towards having performance graphics

01:13:41,840 --> 01:13:46,719
right so

01:13:44,400 --> 01:13:48,800
in the x11 model we were we had the

01:13:46,719 --> 01:13:49,520
applications talking to the server the

01:13:48,800 --> 01:13:52,960
applications

01:13:49,520 --> 01:13:57,760
talking to the desktop uh well the

01:13:52,960 --> 01:13:58,880
compositor and there was a lot of moving

01:13:57,760 --> 01:14:00,640
pieces over there

01:13:58,880 --> 01:14:02,320
what we have right now though with

01:14:00,640 --> 01:14:03,760
weyland is a much simpler

01:14:02,320 --> 01:14:05,360
architecture where all of the

01:14:03,760 --> 01:14:08,480
applications or

01:14:05,360 --> 01:14:10,880
clients like we generally call them

01:14:08,480 --> 01:14:12,480
in weyland talk to the compositor the

01:14:10,880 --> 01:14:15,920
compositor

01:14:12,480 --> 01:14:17,920
is already doing graphics calls

01:14:15,920 --> 01:14:20,880
fairly low level or as low level as it

01:14:17,920 --> 01:14:23,360
wants to uh the

01:14:20,880 --> 01:14:24,560
the graphics card and the graphics card

01:14:23,360 --> 01:14:26,640
does its thing

01:14:24,560 --> 01:14:28,080
now this means that there's a lot of the

01:14:26,640 --> 01:14:30,640
infrastructure that

01:14:28,080 --> 01:14:31,360
x11 was giving us for free that we have

01:14:30,640 --> 01:14:34,480
had to

01:14:31,360 --> 01:14:34,960
to implement but then this also means

01:14:34,480 --> 01:14:38,320
that

01:14:34,960 --> 01:14:41,520
if uh you right now tell

01:14:38,320 --> 01:14:45,120
the maintainer of your system bit

01:14:41,520 --> 01:14:47,120
gnome or plasma or sway or whichever

01:14:45,120 --> 01:14:48,159
that something is not working as it

01:14:47,120 --> 01:14:50,239
should they

01:14:48,159 --> 01:14:51,199
get to give you a proper answer rather

01:14:50,239 --> 01:14:54,000
than saying

01:14:51,199 --> 01:14:57,040
oh yeah you know this is back in x11

01:14:54,000 --> 01:14:59,679
report it to them primed on which is

01:14:57,040 --> 01:15:01,840
something that sadly has happened and it

01:14:59,679 --> 01:15:05,440
has put our

01:15:01,840 --> 01:15:09,040
position as a product uh in jeopardy

01:15:05,440 --> 01:15:10,560
at uh different points in history right

01:15:09,040 --> 01:15:12,880
this is not something that should happen

01:15:10,560 --> 01:15:13,920
we should have the full ownership of

01:15:12,880 --> 01:15:16,880
what we deliver

01:15:13,920 --> 01:15:19,280
to be able to uh well solve all of the

01:15:16,880 --> 01:15:22,840
problems

01:15:19,280 --> 01:15:26,239
and the other very important part is

01:15:22,840 --> 01:15:26,640
um how the components communicate within

01:15:26,239 --> 01:15:29,840
and

01:15:26,640 --> 01:15:33,280
with each other like i said uh

01:15:29,840 --> 01:15:34,880
on on x11 i don't i didn't say it x11

01:15:33,280 --> 01:15:38,239
was like a

01:15:34,880 --> 01:15:39,600
huge observer pattern where every client

01:15:38,239 --> 01:15:41,360
could see everything that has

01:15:39,600 --> 01:15:42,800
that were that was happening there's

01:15:41,360 --> 01:15:45,360
something that has been tried to

01:15:42,800 --> 01:15:46,480
uh address in different ways like for

01:15:45,360 --> 01:15:50,320
example from

01:15:46,480 --> 01:15:52,719
from flat pack but in the end um

01:15:50,320 --> 01:15:53,440
you get uh all of the events that go

01:15:52,719 --> 01:15:55,520
into

01:15:53,440 --> 01:15:57,520
every client and then you decide which

01:15:55,520 --> 01:15:59,679
one you're which ones you want because

01:15:57,520 --> 01:16:02,400
you know who you are yourself right

01:15:59,679 --> 01:16:03,679
but it's in the end possible on x11 as

01:16:02,400 --> 01:16:07,040
is

01:16:03,679 --> 01:16:10,239
to know what things people are typing on

01:16:07,040 --> 01:16:12,560
uh well text fields on another window or

01:16:10,239 --> 01:16:13,840
to place ourselves wherever we want and

01:16:12,560 --> 01:16:15,760
this this kind of stuff

01:16:13,840 --> 01:16:18,840
this is a problem this is a security

01:16:15,760 --> 01:16:22,719
problem for starters because

01:16:18,840 --> 01:16:26,080
um we don't want all of our applications

01:16:22,719 --> 01:16:28,800
uh to know about everything we have not

01:16:26,080 --> 01:16:30,320
had a lot of problems about uh security

01:16:28,800 --> 01:16:33,360
on linux for example

01:16:30,320 --> 01:16:36,640
or at least major ones that we

01:16:33,360 --> 01:16:39,920
know about but it's only been because

01:16:36,640 --> 01:16:41,280
well people have been reasonably good at

01:16:39,920 --> 01:16:43,760
choosing where they get their

01:16:41,280 --> 01:16:45,199
applications from but in the end

01:16:43,760 --> 01:16:46,719
horrible things could have happened and

01:16:45,199 --> 01:16:47,520
i'm pretty sure that horrible things

01:16:46,719 --> 01:16:50,800
have happened

01:16:47,520 --> 01:16:54,400
somewhere because

01:16:50,800 --> 01:16:54,400
this could just happen right

01:16:54,640 --> 01:17:02,480
writing keylogger for x11 as it is

01:16:58,960 --> 01:17:05,760
used nowadays still is trivial and

01:17:02,480 --> 01:17:08,560
everybody can do it but sitting down

01:17:05,760 --> 01:17:10,320
in an afternoon right whereas uh but

01:17:08,560 --> 01:17:14,320
that's not ideal

01:17:10,320 --> 01:17:16,000
um what we do on on well and instead is

01:17:14,320 --> 01:17:17,840
since you only talk to the compositor

01:17:16,000 --> 01:17:18,239
the compositor will only be talking to

01:17:17,840 --> 01:17:20,480
you

01:17:18,239 --> 01:17:23,360
about the the things that you're

01:17:20,480 --> 01:17:23,360
supposed to know about

01:17:23,600 --> 01:17:27,679
this has a another interesting

01:17:25,120 --> 01:17:30,400
ramification which is um

01:17:27,679 --> 01:17:32,000
the state machine that you end up

01:17:30,400 --> 01:17:34,159
getting is much simpler because

01:17:32,000 --> 01:17:36,320
every client is not depending on the

01:17:34,159 --> 01:17:39,360
states of all of the other clients

01:17:36,320 --> 01:17:40,560
but instead that you just have the state

01:17:39,360 --> 01:17:43,040
of

01:17:40,560 --> 01:17:44,719
uh of that is the conclusion of what the

01:17:43,040 --> 01:17:46,400
compositor has been telling you but

01:17:44,719 --> 01:17:48,880
only the compositor and maybe the rest

01:17:46,400 --> 01:17:51,760
of the debug services that you talk to

01:17:48,880 --> 01:17:52,480
and maybe hardware but well not the

01:17:51,760 --> 01:17:54,640
state of

01:17:52,480 --> 01:17:55,760
every other client around you which i

01:17:54,640 --> 01:17:59,840
think that is

01:17:55,760 --> 01:18:03,199
also part of why this is good news

01:17:59,840 --> 01:18:04,960
so how does this work

01:18:03,199 --> 01:18:06,480
i keep talking about the compositor and

01:18:04,960 --> 01:18:08,719
the clients well

01:18:06,480 --> 01:18:10,840
uh let me show you this graph because

01:18:08,719 --> 01:18:12,320
graphs are always better at explaining

01:18:10,840 --> 01:18:15,520
things uh

01:18:12,320 --> 01:18:17,440
here it shows three applications

01:18:15,520 --> 01:18:18,960
the applications have buffers this is

01:18:17,440 --> 01:18:22,159
only the big thing

01:18:18,960 --> 01:18:22,960
how it works for the rendering part but

01:18:22,159 --> 01:18:24,800
i think that it's

01:18:22,960 --> 01:18:27,760
quite explanatory in itself so every

01:18:24,800 --> 01:18:30,400
application we have a set of buffers

01:18:27,760 --> 01:18:32,239
which are well every frame that that you

01:18:30,400 --> 01:18:32,880
want to write and that that you want to

01:18:32,239 --> 01:18:34,320
render on

01:18:32,880 --> 01:18:36,880
on the on the screen for your

01:18:34,320 --> 01:18:36,880
application

01:18:37,120 --> 01:18:40,159
it will will tell the compositor i have

01:18:39,440 --> 01:18:43,280
a new one

01:18:40,159 --> 01:18:46,080
or and you get to present it

01:18:43,280 --> 01:18:46,960
now the compositor will put it however

01:18:46,080 --> 01:18:50,719
they like

01:18:46,960 --> 01:18:54,000
in windows it will it could be on any

01:18:50,719 --> 01:18:55,199
other way as well it could be mosaics it

01:18:54,000 --> 01:18:56,480
could be doing like

01:18:55,199 --> 01:18:58,960
we have different kinds of of

01:18:56,480 --> 01:19:01,520
compositors are well like like sway for

01:18:58,960 --> 01:19:05,600
example which is styling we have

01:19:01,520 --> 01:19:07,840
well the normal window like we do on

01:19:05,600 --> 01:19:09,040
on plasma and they don't in gnome as

01:19:07,840 --> 01:19:10,640
well

01:19:09,040 --> 01:19:12,320
because in the end it's part of a

01:19:10,640 --> 01:19:12,960
compositor's role to decide how these

01:19:12,320 --> 01:19:14,320
things

01:19:12,960 --> 01:19:16,320
should be working and how these things

01:19:14,320 --> 01:19:18,320
are working um

01:19:16,320 --> 01:19:19,360
this graph is is a bit limited though

01:19:18,320 --> 01:19:21,760
because if

01:19:19,360 --> 01:19:23,600
applications could only send things well

01:19:21,760 --> 01:19:24,159
life would be very boring for everyone

01:19:23,600 --> 01:19:28,159
who wasn't

01:19:24,159 --> 01:19:30,080
a video player the compositor is also

01:19:28,159 --> 01:19:33,199
connected to

01:19:30,080 --> 01:19:37,840
other hardware that

01:19:33,199 --> 01:19:37,840
we will be using for input think about

01:19:38,080 --> 01:19:45,199
touch pads mice

01:19:41,120 --> 01:19:48,159
keyboards tablets

01:19:45,199 --> 01:19:49,280
anything really you can also think about

01:19:48,159 --> 01:19:51,360
virtual keyboard

01:19:49,280 --> 01:19:52,719
kind of use case it's not hardware but

01:19:51,360 --> 01:19:54,800
it's something that

01:19:52,719 --> 01:19:56,880
uh it's something that actually the

01:19:54,800 --> 01:19:59,280
compositor understands

01:19:56,880 --> 01:20:01,040
how it needs to be done it will get the

01:19:59,280 --> 01:20:03,199
information and it will be sent to the

01:20:01,040 --> 01:20:07,520
application in the right way

01:20:03,199 --> 01:20:08,480
and the compositor will be sending all

01:20:07,520 --> 01:20:10,560
of this application

01:20:08,480 --> 01:20:12,239
to the applications and the applications

01:20:10,560 --> 01:20:14,480
will be sending back

01:20:12,239 --> 01:20:17,120
new buffers with their updated

01:20:14,480 --> 01:20:19,920
information or whatever they need

01:20:17,120 --> 01:20:21,280
applications could also be talking about

01:20:19,920 --> 01:20:22,080
our stuff it's not like applications can

01:20:21,280 --> 01:20:25,280
only talk about

01:20:22,080 --> 01:20:27,440
well tell about frames but

01:20:25,280 --> 01:20:28,560
it they can tell about anything we will

01:20:27,440 --> 01:20:33,840
see a bit later

01:20:28,560 --> 01:20:33,840
how this all works

01:20:36,080 --> 01:20:43,199
next now

01:20:39,280 --> 01:20:46,080
uh i i would say that

01:20:43,199 --> 01:20:47,679
so far it's quite normal and i would

01:20:46,080 --> 01:20:48,480
even say that's probably what you expect

01:20:47,679 --> 01:20:51,760
to hear

01:20:48,480 --> 01:20:54,000
i am not sure uh but what

01:20:51,760 --> 01:20:54,960
kind of implications does this have

01:20:54,000 --> 01:20:57,840
because in the end

01:20:54,960 --> 01:20:58,560
what i think that we're all seeing is

01:20:57,840 --> 01:21:00,880
that

01:20:58,560 --> 01:21:02,080
applications used to look a certain way

01:21:00,880 --> 01:21:03,920
on x11

01:21:02,080 --> 01:21:05,520
and they actually end up looking exactly

01:21:03,920 --> 01:21:08,320
the same on

01:21:05,520 --> 01:21:08,639
uh on weyland how's that possible why

01:21:08,320 --> 01:21:11,520
does

01:21:08,639 --> 01:21:11,520
this happen and

01:21:11,760 --> 01:21:18,400
why does willa madra after all right

01:21:15,520 --> 01:21:19,840
but uh in the end for for application

01:21:18,400 --> 01:21:21,920
developers

01:21:19,840 --> 01:21:23,840
this shouldn't change that much because

01:21:21,920 --> 01:21:25,440
we're all relying or most of us we're

01:21:23,840 --> 01:21:28,880
relying on

01:21:25,440 --> 01:21:31,360
uh well frameworks to do this kind of

01:21:28,880 --> 01:21:32,960
stuff there is jdk there is q there's

01:21:31,360 --> 01:21:36,320
sdl for example which

01:21:32,960 --> 01:21:40,239
is used more for games

01:21:36,320 --> 01:21:43,199
and these they do support um

01:21:40,239 --> 01:21:44,239
wait that wayland natively or through a

01:21:43,199 --> 01:21:47,520
back end

01:21:44,239 --> 01:21:49,440
so it basically just works and as a

01:21:47,520 --> 01:21:50,560
as an app developer you can mostly

01:21:49,440 --> 01:21:54,000
assume that

01:21:50,560 --> 01:21:57,760
things work normally with an asterisk

01:21:54,000 --> 01:22:01,120
that we will go through later

01:21:57,760 --> 01:22:07,040
but uh but you can focus on making your

01:22:01,120 --> 01:22:07,040
application great and and hope that the

01:22:08,239 --> 01:22:13,040
i hope that the application will work on

01:22:10,080 --> 01:22:13,679
x11 it will work on weyland and possibly

01:22:13,040 --> 01:22:17,199
other

01:22:13,679 --> 01:22:17,920
platforms like windows mac android that

01:22:17,199 --> 01:22:20,480
most of us

01:22:17,920 --> 01:22:22,560
support they should work in general

01:22:20,480 --> 01:22:25,440
right because in the end

01:22:22,560 --> 01:22:27,360
painting into a rectangle is well as

01:22:25,440 --> 01:22:28,639
hard as it can be

01:22:27,360 --> 01:22:31,120
that doesn't mean that all of them

01:22:28,639 --> 01:22:32,800
support them for example electron and

01:22:31,120 --> 01:22:35,760
actually well chromium and

01:22:32,800 --> 01:22:38,159
firefox aren't all that ported yet uh

01:22:35,760 --> 01:22:41,040
firefox you need to enable a

01:22:38,159 --> 01:22:41,840
thing chromium i think that the next

01:22:41,040 --> 01:22:45,360
version is we

01:22:41,840 --> 01:22:48,960
will start shipping it by default

01:22:45,360 --> 01:22:51,920
with an also an opt-in version setting

01:22:48,960 --> 01:22:52,960
an electron being based on chromium is

01:22:51,920 --> 01:22:56,239
also

01:22:52,960 --> 01:22:58,239
lacking there but hopefully soon

01:22:56,239 --> 01:23:00,080
it will start working actually i think

01:22:58,239 --> 01:23:03,520
that the next chromium

01:23:00,080 --> 01:23:04,000
87 which happens in two or three days

01:23:03,520 --> 01:23:05,520
not

01:23:04,000 --> 01:23:07,199
that much longer they will have this

01:23:05,520 --> 01:23:10,000
this option and i'm

01:23:07,199 --> 01:23:12,080
quite excited about that uh also

01:23:10,000 --> 01:23:12,560
something worth considering and keeping

01:23:12,080 --> 01:23:16,560
in mind

01:23:12,560 --> 01:23:18,159
is that while all of these support well

01:23:16,560 --> 01:23:20,639
and natively and properly

01:23:18,159 --> 01:23:21,199
we also have a component called xylene

01:23:20,639 --> 01:23:24,719
which

01:23:21,199 --> 01:23:26,719
uh supports uh x11 applications so if

01:23:24,719 --> 01:23:30,080
your application for any reason

01:23:26,719 --> 01:23:32,800
relies on something specific about x11

01:23:30,080 --> 01:23:33,120
you can have your application go through

01:23:32,800 --> 01:23:36,400
uh

01:23:33,120 --> 01:23:39,120
xylen and this will make

01:23:36,400 --> 01:23:40,000
things work properly as long of course

01:23:39,120 --> 01:23:42,560
as the

01:23:40,000 --> 01:23:44,159
compositor is doing things right so

01:23:42,560 --> 01:23:48,080
today for example if you run

01:23:44,159 --> 01:23:50,400
an electron application from

01:23:48,080 --> 01:23:52,400
as they're meant to be used you will

01:23:50,400 --> 01:23:55,840
have them running

01:23:52,400 --> 01:23:56,560
through xylen as well as the web browser

01:23:55,840 --> 01:23:58,719
for example

01:23:56,560 --> 01:24:00,800
also unless you don't set the

01:23:58,719 --> 01:24:03,679
environment variables

01:24:00,800 --> 01:24:04,400
but it's slowly changing and actually

01:24:03,679 --> 01:24:06,080
was

01:24:04,400 --> 01:24:08,159
more or less everything works as it

01:24:06,080 --> 01:24:12,880
should and you should notice

01:24:08,159 --> 01:24:16,320
there's uh small details like

01:24:12,880 --> 01:24:18,639
uh for example um scaling works a bit

01:24:16,320 --> 01:24:21,040
differently and applications look a bit

01:24:18,639 --> 01:24:23,360
blurrier if you have a

01:24:21,040 --> 01:24:25,440
a scaling system at least for us i think

01:24:23,360 --> 01:24:28,080
that other compositors will have the

01:24:25,440 --> 01:24:28,080
same problem

01:24:28,880 --> 01:24:32,880
also there are patches to solve that so

01:24:30,800 --> 01:24:34,719
in the future it might not end up not

01:24:32,880 --> 01:24:35,199
being the case but this is what you get

01:24:34,719 --> 01:24:37,679
today

01:24:35,199 --> 01:24:38,880
but it's not a big problem like many of

01:24:37,679 --> 01:24:41,600
us have been using

01:24:38,880 --> 01:24:43,040
whalen only for the last few days and

01:24:41,600 --> 01:24:46,320
we've all been able to do

01:24:43,040 --> 01:24:51,440
uh well everything that we used to do on

01:24:46,320 --> 01:24:51,440
on linux without feeling sorrow

01:24:52,719 --> 01:24:57,120
i've been talking a lot about this

01:24:55,199 --> 01:24:58,480
communication between the compositor and

01:24:57,120 --> 01:25:02,000
the client

01:24:58,480 --> 01:25:02,560
what does it look like and it happens

01:25:02,000 --> 01:25:05,040
through

01:25:02,560 --> 01:25:06,560
protocols now uh well when your

01:25:05,040 --> 01:25:08,719
application start

01:25:06,560 --> 01:25:09,600
starts it will it will connect into a

01:25:08,719 --> 01:25:12,080
socket

01:25:09,600 --> 01:25:12,960
and they will start communicating much

01:25:12,080 --> 01:25:15,679
like well

01:25:12,960 --> 01:25:16,400
any communications happens through a

01:25:15,679 --> 01:25:18,000
socket right

01:25:16,400 --> 01:25:19,520
you read things you get the red things

01:25:18,000 --> 01:25:21,440
etc uh

01:25:19,520 --> 01:25:24,239
this is not something that even if you

01:25:21,440 --> 01:25:27,280
wear uh

01:25:24,239 --> 01:25:29,360
toolkit developer you would have to

01:25:27,280 --> 01:25:31,440
care about that much because while on

01:25:29,360 --> 01:25:37,520
one hand there is slip wayland

01:25:31,440 --> 01:25:37,520
and it's tooling that takes care of that

01:25:38,480 --> 01:25:41,840
so well it's already somewhat abstracted

01:25:41,040 --> 01:25:45,600
so that you

01:25:41,840 --> 01:25:48,320
can comfortably have this kind of

01:25:45,600 --> 01:25:48,320
back and forth

01:25:48,719 --> 01:25:53,520
um as soon as you have to

01:25:52,239 --> 01:25:55,840
start looking into one of these

01:25:53,520 --> 01:25:57,760
protocols you will start seeing this xml

01:25:55,840 --> 01:25:59,760
file so i figured it

01:25:57,760 --> 01:26:02,000
would be useful to show a little bit

01:25:59,760 --> 01:26:04,320
about what it looks like

01:26:02,000 --> 01:26:06,560
so i created the most innovative

01:26:04,320 --> 01:26:08,719
protocol called the protocol potato

01:26:06,560 --> 01:26:11,199
which does nothing and it's not supposed

01:26:08,719 --> 01:26:13,840
to work or anything it just

01:26:11,199 --> 01:26:15,199
meant for you to see what kind of things

01:26:13,840 --> 01:26:17,600
it does

01:26:15,199 --> 01:26:18,800
so i mean this is a perfectly valid xml

01:26:17,600 --> 01:26:21,840
file and if you

01:26:18,800 --> 01:26:23,679
pass it to uh well well and tooling it

01:26:21,840 --> 01:26:24,880
won't give you an error it just will be

01:26:23,679 --> 01:26:26,719
useless

01:26:24,880 --> 01:26:29,679
but what you can see is that you have a

01:26:26,719 --> 01:26:31,440
protocol each product will have

01:26:29,679 --> 01:26:32,960
different interfaces that you can could

01:26:31,440 --> 01:26:37,199
see them like as

01:26:32,960 --> 01:26:39,679
objects if you want i guess

01:26:37,199 --> 01:26:42,000
different interfaces will have different

01:26:39,679 --> 01:26:45,120
kind of

01:26:42,000 --> 01:26:46,239
items mostly requests and events and you

01:26:45,120 --> 01:26:50,560
should read these

01:26:46,239 --> 01:26:50,560
protocols as if you were a client so

01:26:50,639 --> 01:26:55,040
in this case a client can request uh to

01:26:53,840 --> 01:26:58,080
get a potato

01:26:55,040 --> 01:27:01,199
and will eventually

01:26:58,080 --> 01:27:04,000
be notified about the cooked event

01:27:01,199 --> 01:27:04,800
right so when you're a client that

01:27:04,000 --> 01:27:09,199
implements this

01:27:04,800 --> 01:27:11,280
um you will have this kind of semantics

01:27:09,199 --> 01:27:13,600
uh allowed you can see also the request

01:27:11,280 --> 01:27:16,960
can have arguments so you can say

01:27:13,600 --> 01:27:19,679
say get the potato for this surface

01:27:16,960 --> 01:27:21,679
i know sorry i hear it's getting a

01:27:19,679 --> 01:27:23,920
potato and it's the

01:27:21,679 --> 01:27:25,760
surface that is returned but you could

01:27:23,920 --> 01:27:26,639
pass things like give me the potato

01:27:25,760 --> 01:27:29,760
number three

01:27:26,639 --> 01:27:32,960
or give me the potato cold banana

01:27:29,760 --> 01:27:35,520
whatever uh and eventually

01:27:32,960 --> 01:27:36,320
it will be again getting a callback that

01:27:35,520 --> 01:27:39,360
is used

01:27:36,320 --> 01:27:40,159
usually like a function pointer or a

01:27:39,360 --> 01:27:44,080
virtual

01:27:40,159 --> 01:27:47,199
function if you use object oriented

01:27:44,080 --> 01:27:48,080
programming that about uh the cooked

01:27:47,199 --> 01:27:51,840
signal

01:27:48,080 --> 01:27:53,840
whenever it's it's emitted um

01:27:51,840 --> 01:27:55,280
if you're a compositor though which none

01:27:53,840 --> 01:27:56,400
of you are because here we are at

01:27:55,280 --> 01:27:58,719
developers right now

01:27:56,400 --> 01:27:59,679
in the context of this talk what you do

01:27:58,719 --> 01:28:02,400
though is

01:27:59,679 --> 01:28:03,199
the get potato is something that you

01:28:02,400 --> 01:28:06,400
never call

01:28:03,199 --> 01:28:09,040
that you're called to offer potato

01:28:06,400 --> 01:28:09,600
and the event is something that you do

01:28:09,040 --> 01:28:12,239
send

01:28:09,600 --> 01:28:13,040
right so eventually when the event

01:28:12,239 --> 01:28:15,920
happens

01:28:13,040 --> 01:28:16,719
you get to uh emitted for your clients

01:28:15,920 --> 01:28:19,840
to know

01:28:16,719 --> 01:28:22,560
and something uh that i think it's

01:28:19,840 --> 01:28:24,480
useful to understand is that when you do

01:28:22,560 --> 01:28:25,360
send these things from the compositor

01:28:24,480 --> 01:28:27,760
you say

01:28:25,360 --> 01:28:29,280
to which client do you want to send it i

01:28:27,760 --> 01:28:32,400
mean it can be to all of them

01:28:29,280 --> 01:28:34,560
but not necessarily and actually usually

01:28:32,400 --> 01:28:35,440
not all of them but whoever you're

01:28:34,560 --> 01:28:40,000
replying to

01:28:35,440 --> 01:28:42,320
or anything in this regard now

01:28:40,000 --> 01:28:44,480
this all sounds very abstract how do we

01:28:42,320 --> 01:28:48,320
turn that into something that

01:28:44,480 --> 01:28:50,800
looks more or less practical well um

01:28:48,320 --> 01:28:52,480
we're gonna go get to that later you can

01:28:50,800 --> 01:28:55,760
see the protocols available

01:28:52,480 --> 01:28:57,120
uh officially in the repository that i

01:28:55,760 --> 01:29:00,080
pasted on this

01:28:57,120 --> 01:29:00,560
um i pasted yeah that you can see over

01:29:00,080 --> 01:29:03,040
here

01:29:00,560 --> 01:29:03,840
maybe somebody can put it on the chat or

01:29:03,040 --> 01:29:06,480
something

01:29:03,840 --> 01:29:07,600
but essentially you will see a bunch of

01:29:06,480 --> 01:29:10,000
them there they are

01:29:07,600 --> 01:29:11,199
split into two big categories stable and

01:29:10,000 --> 01:29:13,440
unstable

01:29:11,199 --> 01:29:15,040
stable what they mean is that they are

01:29:13,440 --> 01:29:15,760
not meant to change in the foreseeable

01:29:15,040 --> 01:29:18,400
future

01:29:15,760 --> 01:29:20,080
unstable is that they might still be

01:29:18,400 --> 01:29:25,120
developed

01:29:20,080 --> 01:29:28,159
all of them they are agreed upon by

01:29:25,120 --> 01:29:30,480
different actors in the in the community

01:29:28,159 --> 01:29:31,840
being the different compositors they

01:29:30,480 --> 01:29:33,760
don't all need to agree

01:29:31,840 --> 01:29:34,880
that they are all useful and to

01:29:33,760 --> 01:29:38,000
implement them

01:29:34,880 --> 01:29:41,280
but at least there needs to be

01:29:38,000 --> 01:29:44,400
a critical mass that is using them and

01:29:41,280 --> 01:29:45,920
implementing them otherwise well it

01:29:44,400 --> 01:29:47,280
would be quite frustrating to say to

01:29:45,920 --> 01:29:47,679
find something over there and say i'm

01:29:47,280 --> 01:29:49,440
gonna

01:29:47,679 --> 01:29:51,520
i'm gonna use this protocol because it's

01:29:49,440 --> 01:29:54,000
exactly what i think uh what i

01:29:51,520 --> 01:29:55,120
need as a as an application developer

01:29:54,000 --> 01:29:58,400
but then

01:29:55,120 --> 01:30:00,719
not find any compositors that that do it

01:29:58,400 --> 01:30:01,760
uh most of the things you will find over

01:30:00,719 --> 01:30:04,800
there

01:30:01,760 --> 01:30:06,000
should be supported i think i mentioned

01:30:04,800 --> 01:30:07,840
there's the stable ones and there's the

01:30:06,000 --> 01:30:10,400
unstable ones in several ones

01:30:07,840 --> 01:30:11,040
they could change over time and kind of

01:30:10,400 --> 01:30:13,520
the idea

01:30:11,040 --> 01:30:14,960
is to polish the unstable ones so that

01:30:13,520 --> 01:30:17,520
they can became

01:30:14,960 --> 01:30:18,080
so that they can become stable over time

01:30:17,520 --> 01:30:21,280
and

01:30:18,080 --> 01:30:25,280
well enjoy life

01:30:21,280 --> 01:30:27,040
now these are the ones that you should

01:30:25,280 --> 01:30:28,480
care the most about as an application

01:30:27,040 --> 01:30:30,800
developer because

01:30:28,480 --> 01:30:32,719
they are the ones that will more or less

01:30:30,800 --> 01:30:36,480
be implemented by

01:30:32,719 --> 01:30:39,520
all compositors um

01:30:36,480 --> 01:30:40,560
but then seeing well creating a desktop

01:30:39,520 --> 01:30:44,400
environment is

01:30:40,560 --> 01:30:47,600
not always the simplest of tasks uh

01:30:44,400 --> 01:30:49,840
we've collectively uh created a myriad

01:30:47,600 --> 01:30:52,560
of different protocols that

01:30:49,840 --> 01:30:54,320
are used for example in plasma we have

01:30:52,560 --> 01:30:57,040
several ones for communicating

01:30:54,320 --> 01:30:59,920
with shell which is a definitely a

01:30:57,040 --> 01:30:59,920
specific kind of

01:31:00,960 --> 01:31:06,880
client that needs to do and to know

01:31:03,679 --> 01:31:08,719
about things that other clients will

01:31:06,880 --> 01:31:10,800
well shouldn't know about or will not

01:31:08,719 --> 01:31:13,920
need it anyway

01:31:10,800 --> 01:31:15,199
things like listing windows this kind of

01:31:13,920 --> 01:31:16,800
stuff you don't want

01:31:15,199 --> 01:31:18,560
or you don't need every application to

01:31:16,800 --> 01:31:21,280
know about this kind of stuff so

01:31:18,560 --> 01:31:21,840
we only said that send that to the to

01:31:21,280 --> 01:31:24,880
the

01:31:21,840 --> 01:31:29,040
privileged kind of uh clients

01:31:24,880 --> 01:31:31,760
uh others also have similar

01:31:29,040 --> 01:31:32,960
things some of them for example also

01:31:31,760 --> 01:31:36,320
extend what the

01:31:32,960 --> 01:31:38,880
standard ones do but in general uh

01:31:36,320 --> 01:31:42,159
these are some that you shouldn't need i

01:31:38,880 --> 01:31:44,880
did place them here though because

01:31:42,159 --> 01:31:46,320
they might be useful for you and as an

01:31:44,880 --> 01:31:48,000
application developer if you

01:31:46,320 --> 01:31:49,679
see that something is super important

01:31:48,000 --> 01:31:52,880
for you you can always

01:31:49,679 --> 01:31:55,920
say how about

01:31:52,880 --> 01:31:57,679
we standardize this one because

01:31:55,920 --> 01:31:58,660
i want to base my application on this

01:31:57,679 --> 01:32:00,400
concept

01:31:58,660 --> 01:32:02,400
[Music]

01:32:00,400 --> 01:32:04,159
and otherwise i cannot i cannot have my

01:32:02,400 --> 01:32:05,280
application to do its own thing

01:32:04,159 --> 01:32:07,360
and this is something that could

01:32:05,280 --> 01:32:09,760
definitely happen uh

01:32:07,360 --> 01:32:10,960
some that we've created in the past has

01:32:09,760 --> 01:32:14,880
been

01:32:10,960 --> 01:32:16,719
uh well shared between different

01:32:14,880 --> 01:32:19,360
projects and i could see them

01:32:16,719 --> 01:32:22,480
moving into more stable spaces

01:32:19,360 --> 01:32:22,480
eventually over time

01:32:22,800 --> 01:32:30,000
now um there was the xml file

01:32:26,880 --> 01:32:30,639
and there was the le vuelen thing i told

01:32:30,000 --> 01:32:33,360
you about

01:32:30,639 --> 01:32:35,920
so how do we mix them in in a way so

01:32:33,360 --> 01:32:38,960
that you don't have to become a weird

01:32:35,920 --> 01:32:41,440
protocol ninja so that

01:32:38,960 --> 01:32:42,159
and that everything reasonably works

01:32:41,440 --> 01:32:45,440
well there's

01:32:42,159 --> 01:32:50,000
these uh tools that you can use

01:32:45,440 --> 01:32:53,040
to generate a code from an xml file

01:32:50,000 --> 01:32:54,000
that will work for your application so

01:32:53,040 --> 01:32:56,880
basically what you do

01:32:54,000 --> 01:32:58,400
as a as an application when you want to

01:32:56,880 --> 01:33:00,080
interact directly with uh with a

01:32:58,400 --> 01:33:00,960
protocol is that you will create a

01:33:00,080 --> 01:33:03,120
registry

01:33:00,960 --> 01:33:04,080
the registry will announce to you all of

01:33:03,120 --> 01:33:07,520
the different

01:33:04,080 --> 01:33:09,840
um interfaces that or yeah

01:33:07,520 --> 01:33:10,880
protocols that are available and then

01:33:09,840 --> 01:33:12,800
you get to say

01:33:10,880 --> 01:33:14,560
all right i am interested on this one

01:33:12,800 --> 01:33:16,719
give me this one and i will

01:33:14,560 --> 01:33:18,080
work with it and what you will do is

01:33:16,719 --> 01:33:20,480
that or you will get

01:33:18,080 --> 01:33:21,199
an instance of a weird object that you

01:33:20,480 --> 01:33:24,400
will get to

01:33:21,199 --> 01:33:27,679
uh pass into one of them

01:33:24,400 --> 01:33:30,239
uh well classes

01:33:27,679 --> 01:33:31,920
generated by these scanner files classes

01:33:30,239 --> 01:33:35,040
or objects depending on

01:33:31,920 --> 01:33:36,800
the kind of of language that you use

01:33:35,040 --> 01:33:37,360
there's a wayland scanner that will

01:33:36,800 --> 01:33:40,639
generate

01:33:37,360 --> 01:33:44,000
see a dot c file and a dot h file

01:33:40,639 --> 01:33:46,080
the qll scanner sameish but

01:33:44,000 --> 01:33:48,159
with c plus plus things there's the

01:33:46,080 --> 01:33:49,679
python scanner which i have never used

01:33:48,159 --> 01:33:53,120
but it

01:33:49,679 --> 01:33:54,800
generates python code uh i guess

01:33:53,120 --> 01:33:56,400
i saw that there were others like for

01:33:54,800 --> 01:33:59,600
frost and this kind of stuff but in

01:33:56,400 --> 01:34:01,520
general the idea is that since it's not

01:33:59,600 --> 01:34:05,199
tied to any language or any technology

01:34:01,520 --> 01:34:07,520
you but you definitely want to uh

01:34:05,199 --> 01:34:09,360
communicate easily with with with a

01:34:07,520 --> 01:34:10,960
protocol and you should be able to do so

01:34:09,360 --> 01:34:14,320
with the semantics that are provided

01:34:10,960 --> 01:34:18,000
from the from the xml file which is

01:34:14,320 --> 01:34:20,480
well what you care about uh

01:34:18,000 --> 01:34:22,000
at that point of course if you ever

01:34:20,480 --> 01:34:23,440
decide to come up with a protocol you

01:34:22,000 --> 01:34:25,920
will have to implement it

01:34:23,440 --> 01:34:27,840
for your client and then for all of the

01:34:25,920 --> 01:34:30,880
pro compositors so

01:34:27,840 --> 01:34:32,880
beware with doing that and well don't

01:34:30,880 --> 01:34:34,000
try to consider this a solution for

01:34:32,880 --> 01:34:37,840
everything

01:34:34,000 --> 01:34:40,239
um there's also the discussion about

01:34:37,840 --> 01:34:41,360
when you should be using whale on

01:34:40,239 --> 01:34:45,199
protocols and when

01:34:41,360 --> 01:34:46,719
you should be using debuffs for example

01:34:45,199 --> 01:34:48,800
there are things that have been using

01:34:46,719 --> 01:34:50,960
the bus that actually

01:34:48,800 --> 01:34:52,880
theoretically and technically could be

01:34:50,960 --> 01:34:55,199
imported into well and protocols but

01:34:52,880 --> 01:34:56,239
there's no good reason to do that and we

01:34:55,199 --> 01:34:58,159
we will never

01:34:56,239 --> 01:35:00,400
probably do it like i don't know i'm

01:34:58,159 --> 01:35:01,520
thinking power management right you have

01:35:00,400 --> 01:35:03,760
a

01:35:01,520 --> 01:35:05,760
diva service that is already doing its

01:35:03,760 --> 01:35:07,360
thing and

01:35:05,760 --> 01:35:10,960
well it doesn't have a big problem with

01:35:07,360 --> 01:35:14,000
that so it could make sense to have uh

01:35:10,960 --> 01:35:17,440
applications not be exposed to to those

01:35:14,000 --> 01:35:19,760
but in general as soon as they see them

01:35:17,440 --> 01:35:22,480
they should be able to continue working

01:35:19,760 --> 01:35:24,560
with these device

01:35:22,480 --> 01:35:27,280
interfaces and that will continue being

01:35:24,560 --> 01:35:27,280
the case right

01:35:27,360 --> 01:35:31,840
so as compositors we have several of

01:35:30,000 --> 01:35:33,280
them already implemented there's weston

01:35:31,840 --> 01:35:36,400
which is kind of the

01:35:33,280 --> 01:35:37,119
reference implementation and it lives

01:35:36,400 --> 01:35:40,639
together in

01:35:37,119 --> 01:35:42,320
free desktop with weyland itself

01:35:40,639 --> 01:35:43,679
there's queen which is the one we've

01:35:42,320 --> 01:35:46,480
been doing for

01:35:43,679 --> 01:35:48,159
plasma there is mother for gnome there's

01:35:46,480 --> 01:35:50,719
wr roots and sway

01:35:48,159 --> 01:35:51,280
the real roots as far as i understood uh

01:35:50,719 --> 01:35:53,440
is a

01:35:51,280 --> 01:35:54,480
framework to create compositors and

01:35:53,440 --> 01:35:56,639
actually there's

01:35:54,480 --> 01:35:58,080
several of them already based on it and

01:35:56,639 --> 01:36:01,040
then there's suey which is

01:35:58,080 --> 01:36:01,360
the one who that was created by the one

01:36:01,040 --> 01:36:03,600
the

01:36:01,360 --> 01:36:05,360
the people who created all your roots

01:36:03,600 --> 01:36:07,520
which is a

01:36:05,360 --> 01:36:10,239
funny looking one and then there's the

01:36:07,520 --> 01:36:13,199
cute whalen compositor which is

01:36:10,239 --> 01:36:14,639
well done by cute for doing more

01:36:13,199 --> 01:36:17,119
embedded kind of things

01:36:14,639 --> 01:36:19,760
although some people are creating uh

01:36:17,119 --> 01:36:22,880
proper desktop environments around it so

01:36:19,760 --> 01:36:22,880
that's kind of interesting

01:36:23,679 --> 01:36:27,760
things to keep in mind as an application

01:36:25,440 --> 01:36:29,199
developer well i think that uh something

01:36:27,760 --> 01:36:31,520
that

01:36:29,199 --> 01:36:32,880
has been a bit of a problem since the

01:36:31,520 --> 01:36:34,480
beginning

01:36:32,880 --> 01:36:36,400
for certain applications has been the

01:36:34,480 --> 01:36:38,880
positioning if your application is

01:36:36,400 --> 01:36:40,080
weird in that it needs to be placed in a

01:36:38,880 --> 01:36:42,480
specific

01:36:40,080 --> 01:36:43,199
region of the window uh you might have

01:36:42,480 --> 01:36:46,880
problems

01:36:43,199 --> 01:36:48,960
doing that uh on x11 you could say

01:36:46,880 --> 01:36:50,400
tell me where i am and it would tell you

01:36:48,960 --> 01:36:53,920
the x and y

01:36:50,400 --> 01:36:55,920
of of the position of your application

01:36:53,920 --> 01:36:57,679
but it would give you like all of the

01:36:55,920 --> 01:36:59,360
dimensions of your windows

01:36:57,679 --> 01:37:01,440
which you still need to know because you

01:36:59,360 --> 01:37:02,239
need to know how much pixels you need to

01:37:01,440 --> 01:37:06,000
render at

01:37:02,239 --> 01:37:10,800
any moment but what we don't know

01:37:06,000 --> 01:37:12,639
is about the the positioning um

01:37:10,800 --> 01:37:14,400
and from that we can derive it's not

01:37:12,639 --> 01:37:16,239
just about the positioning itself it's

01:37:14,400 --> 01:37:19,119
about how the compositor now

01:37:16,239 --> 01:37:20,719
is the one with authority about where

01:37:19,119 --> 01:37:23,360
things are placed

01:37:20,719 --> 01:37:24,320
something that also we sorry something

01:37:23,360 --> 01:37:27,360
that we used to do

01:37:24,320 --> 01:37:28,880
on on x11 was the braces window and a

01:37:27,360 --> 01:37:32,080
window decided to move

01:37:28,880 --> 01:37:32,880
on front and uh well because it thought

01:37:32,080 --> 01:37:34,800
that it was

01:37:32,880 --> 01:37:36,639
very special and important there's

01:37:34,800 --> 01:37:38,560
something that it cannot be

01:37:36,639 --> 01:37:40,159
done right now we're working on it but

01:37:38,560 --> 01:37:43,840
well it's the kind of things that it

01:37:40,159 --> 01:37:47,600
needs to be thought properly

01:37:43,840 --> 01:37:48,800
um another thing that happened is that

01:37:47,600 --> 01:37:52,880
there were a lot of

01:37:48,800 --> 01:37:56,159
processes that uh their function was to

01:37:52,880 --> 01:37:58,480
um well see what others were doing or

01:37:56,159 --> 01:38:00,000
making things happen on other other

01:37:58,480 --> 01:38:02,960
clients for example

01:38:00,000 --> 01:38:04,480
think of a virtual keyboard and x11 you

01:38:02,960 --> 01:38:05,280
could implement that virtual keyboard by

01:38:04,480 --> 01:38:08,960
saying

01:38:05,280 --> 01:38:12,960
and now the x is pressed and now the yx

01:38:08,960 --> 01:38:14,080
is pressed but this is kind of weird

01:38:12,960 --> 01:38:17,199
right you don't want

01:38:14,080 --> 01:38:18,960
a random application to be sending keys

01:38:17,199 --> 01:38:22,080
to another random application

01:38:18,960 --> 01:38:25,199
you can implement um

01:38:22,080 --> 01:38:28,880
virtual keyboards on weyland right now

01:38:25,199 --> 01:38:31,679
and it works fine but

01:38:28,880 --> 01:38:33,520
it needs to be done properly and by

01:38:31,679 --> 01:38:35,199
properly i mean using a specific

01:38:33,520 --> 01:38:37,440
protocol that

01:38:35,199 --> 01:38:39,199
is about that rather than just saying

01:38:37,440 --> 01:38:39,840
this is what people definitely need they

01:38:39,199 --> 01:38:41,440
need

01:38:39,840 --> 01:38:43,360
this event as if it was coming from the

01:38:41,440 --> 01:38:44,880
keyboard which is kind of a weird

01:38:43,360 --> 01:38:48,159
premise

01:38:44,880 --> 01:38:48,560
um if you want to learn further there's

01:38:48,159 --> 01:38:52,480
the

01:38:48,560 --> 01:38:56,000
official documentation which is

01:38:52,480 --> 01:38:57,840
fine uh it's quite extensive

01:38:56,000 --> 01:38:59,040
there's also the whalen book which was

01:38:57,840 --> 01:39:02,159
uh created by

01:38:59,040 --> 01:39:03,040
uh one of the sway or the blitzway

01:39:02,159 --> 01:39:06,159
developer

01:39:03,040 --> 01:39:07,840
i think uh it's pretty good i ended up

01:39:06,159 --> 01:39:10,000
reading things over there when i was

01:39:07,840 --> 01:39:13,040
starting and i needed to understand

01:39:10,000 --> 01:39:14,480
why things were like they are so i

01:39:13,040 --> 01:39:17,679
recommend you to take a look

01:39:14,480 --> 01:39:20,480
and see what's what over there

01:39:17,679 --> 01:39:20,480
other than that

01:39:20,960 --> 01:39:25,600
there's definitely tons of other

01:39:23,040 --> 01:39:27,280
documentation all over the internet

01:39:25,600 --> 01:39:28,880
if there's something specific you need

01:39:27,280 --> 01:39:31,119
i'm sure that

01:39:28,880 --> 01:39:33,199
i or maybe other people will be able to

01:39:31,119 --> 01:39:36,800
help you with that

01:39:33,199 --> 01:39:39,679
but if anyone has any questions

01:39:36,800 --> 01:39:42,400
right now would be the right moment to

01:39:39,679 --> 01:39:42,400
talk about them

01:39:46,320 --> 01:39:49,679
so it looks like we have one question in

01:39:48,159 --> 01:39:52,880
the shared notes um

01:39:49,679 --> 01:39:56,400
it says what do you think about the

01:39:52,880 --> 01:39:56,400
k-win ft fork

01:39:57,920 --> 01:40:02,320
well the queen ft fork is something that

01:40:00,719 --> 01:40:05,360
you can ask the

01:40:02,320 --> 01:40:07,920
main developer he used to work

01:40:05,360 --> 01:40:09,520
with plasma on it he decided that he

01:40:07,920 --> 01:40:11,119
wanted to work alone and he's now

01:40:09,520 --> 01:40:12,000
working alone or i don't know if he's

01:40:11,119 --> 01:40:14,400
working with

01:40:12,000 --> 01:40:15,119
other people but i don't really have i

01:40:14,400 --> 01:40:18,639
don't

01:40:15,119 --> 01:40:18,639
i don't know why it matters

01:40:19,760 --> 01:40:24,000
okay next question is what is the status

01:40:22,159 --> 01:40:27,199
of weyland for

01:40:24,000 --> 01:40:31,520
i'm going to butcher this um

01:40:27,199 --> 01:40:34,880
except x-face and mate or mate

01:40:31,520 --> 01:40:36,960
yeah um well i wouldn't know you would

01:40:34,880 --> 01:40:41,280
have to ask their developers

01:40:36,960 --> 01:40:43,679
which is kind of the thing that you

01:40:41,280 --> 01:40:44,960
have less of a shared infrastructure

01:40:43,679 --> 01:40:47,679
over there

01:40:44,960 --> 01:40:49,040
as far as i know which is not that much

01:40:47,679 --> 01:40:50,560
is that they were using

01:40:49,040 --> 01:40:52,560
known infrastructure for this kind of

01:40:50,560 --> 01:40:53,280
thing so i would expect them to be able

01:40:52,560 --> 01:40:57,040
to use

01:40:53,280 --> 01:40:59,040
matter but i am sure that

01:40:57,040 --> 01:41:01,199
somebody on the chat here will be able

01:40:59,040 --> 01:41:05,840
to give you a better answer than

01:41:01,199 --> 01:41:05,840
i have right now

01:41:10,320 --> 01:41:13,360
it looks like that's all the questions

01:41:11,920 --> 01:41:16,840
we have

01:41:13,360 --> 01:41:18,320
thank you alex as always a wonderful

01:41:16,840 --> 01:41:23,360
presentation

01:41:18,320 --> 01:41:25,040
and we will see you around i suppose

01:41:23,360 --> 01:41:33,840
you'll see me around thank you very much

01:41:25,040 --> 01:41:33,840
everyone for listening

01:41:55,520 --> 01:42:15,840
okay everyone we will be back in just

01:41:58,800 --> 01:42:15,840
under 10 minutes for our next talk

01:48:22,719 --> 01:48:26,000
and the next talk is being held by

01:48:24,800 --> 01:48:28,480
elizabeth

01:48:26,000 --> 01:48:30,560
about linux applications on mainframes

01:48:28,480 --> 01:48:33,840
can your linux application run

01:48:30,560 --> 01:48:33,840
on a mainstream

01:49:43,920 --> 01:49:47,760
all right hello everybody uh so thank

01:49:46,960 --> 01:49:50,080
you for coming

01:49:47,760 --> 01:49:51,520
um this is my first time at the linux

01:49:50,080 --> 01:49:54,960
application summit

01:49:51,520 --> 01:49:55,599
um but uh my background i've i've done a

01:49:54,960 --> 01:49:59,760
lot

01:49:55,599 --> 01:50:02,800
of work in linux application space

01:49:59,760 --> 01:50:06,400
i spent a lot of my career working

01:50:02,800 --> 01:50:09,760
on ubuntu as a as a developer

01:50:06,400 --> 01:50:12,159
and a community outreach person

01:50:09,760 --> 01:50:12,880
and that was of all volunteer work um

01:50:12,159 --> 01:50:16,400
and then i

01:50:12,880 --> 01:50:19,920
moved into other um areas

01:50:16,400 --> 01:50:21,840
of open source um so

01:50:19,920 --> 01:50:23,119
what brings me here today is to talk to

01:50:21,840 --> 01:50:26,080
you about what i do for my

01:50:23,119 --> 01:50:27,360
day job these days um so i work over at

01:50:26,080 --> 01:50:30,480
ibm

01:50:27,360 --> 01:50:31,440
and i was looking for sort of a change

01:50:30,480 --> 01:50:34,239
in my career

01:50:31,440 --> 01:50:35,440
i was really interested in linux desktop

01:50:34,239 --> 01:50:38,000
and then i was working as a linux

01:50:35,440 --> 01:50:40,800
sysadmin for about 15 years

01:50:38,000 --> 01:50:41,440
um but and i'd gotten into the cloud

01:50:40,800 --> 01:50:45,280
world

01:50:41,440 --> 01:50:47,040
um and had been working on openstack and

01:50:45,280 --> 01:50:48,639
containers

01:50:47,040 --> 01:50:50,320
and all kinds of things that we think of

01:50:48,639 --> 01:50:53,920
when we think of the modern

01:50:50,320 --> 01:50:56,239
like devops movement sre um but when i

01:50:53,920 --> 01:50:56,960
about a couple years ago i thought you

01:50:56,239 --> 01:50:58,480
know everyone

01:50:56,960 --> 01:51:00,000
else is going over to kubernetes and

01:50:58,480 --> 01:51:00,560
working on that cool new infrastructure

01:51:00,000 --> 01:51:02,159
thing

01:51:00,560 --> 01:51:04,239
but i was wondering what else was out

01:51:02,159 --> 01:51:07,280
there um so i

01:51:04,239 --> 01:51:09,280
was approached by ibm i said

01:51:07,280 --> 01:51:10,800
do you want to work on mainframes and i

01:51:09,280 --> 01:51:14,080
was like

01:51:10,800 --> 01:51:16,400
no but

01:51:14,080 --> 01:51:18,320
they convinced me i was able to talk to

01:51:16,400 --> 01:51:20,239
a bunch of their technical staff

01:51:18,320 --> 01:51:21,520
i was able to dive into some of the open

01:51:20,239 --> 01:51:22,800
source work that's being done on the

01:51:21,520 --> 01:51:25,520
mainframe

01:51:22,800 --> 01:51:25,920
which i'll talk about in this talk um

01:51:25,520 --> 01:51:27,599
and

01:51:25,920 --> 01:51:29,280
the state of linux on the mainframe

01:51:27,599 --> 01:51:31,199
which it turns out has been around

01:51:29,280 --> 01:51:34,080
for 20 years linux has been running on

01:51:31,199 --> 01:51:35,679
this hardware over 20 years actually

01:51:34,080 --> 01:51:37,280
so that is what i'm here to talk to you

01:51:35,679 --> 01:51:39,440
about and how you can get your

01:51:37,280 --> 01:51:40,560
application to run on it there's a bunch

01:51:39,440 --> 01:51:43,360
of free

01:51:40,560 --> 01:51:45,119
resources out there um that allow you to

01:51:43,360 --> 01:51:49,440
uh

01:51:45,119 --> 01:51:53,360
uh developation on this platform

01:51:49,440 --> 01:51:55,440
all right so the first question i want

01:51:53,360 --> 01:51:56,080
to answer is what exactly a mainframe is

01:51:55,440 --> 01:52:00,400
because

01:51:56,080 --> 01:52:01,679
when i started talking ibm i wasn't sure

01:52:00,400 --> 01:52:03,679
what they were i knew they were big

01:52:01,679 --> 01:52:04,080
computers i know they were they've been

01:52:03,679 --> 01:52:07,360
around

01:52:04,080 --> 01:52:09,920
longer than i have uh but most of what i

01:52:07,360 --> 01:52:12,639
knew about mainframes was kind of like

01:52:09,920 --> 01:52:14,320
they were this vague big computer that

01:52:12,639 --> 01:52:15,440
i've never seen and probably would never

01:52:14,320 --> 01:52:16,560
work on because they're really

01:52:15,440 --> 01:52:19,040
complicated

01:52:16,560 --> 01:52:20,400
um and they you know i didn't think that

01:52:19,040 --> 01:52:21,360
they ran the software that i was

01:52:20,400 --> 01:52:23,119
interested in

01:52:21,360 --> 01:52:24,400
i didn't think they did anything that

01:52:23,119 --> 01:52:26,719
that would have i

01:52:24,400 --> 01:52:28,480
would have ever crossed paths with i

01:52:26,719 --> 01:52:29,199
also didn't realize how pervasive they

01:52:28,480 --> 01:52:33,280
still are

01:52:29,199 --> 01:52:36,400
in the industry this mainframe business

01:52:33,280 --> 01:52:39,199
is a multi-billion dollar industry every

01:52:36,400 --> 01:52:41,920
time you swipe a credit card

01:52:39,199 --> 01:52:43,440
there is a very very very high chance

01:52:41,920 --> 01:52:45,360
that it is going through a mainframe

01:52:43,440 --> 01:52:48,159
somewhere in the world

01:52:45,360 --> 01:52:48,880
um whether it's and and so it's huge in

01:52:48,159 --> 01:52:51,760
finance

01:52:48,880 --> 01:52:53,119
it's huge in health tech um it's huge in

01:52:51,760 --> 01:52:54,639
the insurance agency

01:52:53,119 --> 01:52:56,480
most of the airlines still run on

01:52:54,639 --> 01:52:58,960
mainframes um

01:52:56,480 --> 01:53:00,320
so that's the first thing um and this

01:52:58,960 --> 01:53:02,639
picture here

01:53:00,320 --> 01:53:03,840
is a photograph of a mainframe in a data

01:53:02,639 --> 01:53:06,719
center

01:53:03,840 --> 01:53:07,679
so these days they're they don't take up

01:53:06,719 --> 01:53:10,400
a whole room

01:53:07,679 --> 01:53:10,960
um they each each like section of the

01:53:10,400 --> 01:53:12,320
rack

01:53:10,960 --> 01:53:14,320
there's four of them in this picture

01:53:12,320 --> 01:53:16,320
that have the blue on it

01:53:14,320 --> 01:53:18,239
each section the rack is 19 inches wide

01:53:16,320 --> 01:53:19,520
so they fit into a standard 19-inch rack

01:53:18,239 --> 01:53:20,400
spot you no longer have to have a

01:53:19,520 --> 01:53:23,520
special place

01:53:20,400 --> 01:53:27,119
in your data center for this mainframe

01:53:23,520 --> 01:53:27,599
when you open it up this is what it

01:53:27,119 --> 01:53:30,639
looks like

01:53:27,599 --> 01:53:32,560
inside it's a little hard to see because

01:53:30,639 --> 01:53:33,920
this is so small

01:53:32,560 --> 01:53:36,239
but the main things that i wanted to

01:53:33,920 --> 01:53:38,320
point out was that there is no storage

01:53:36,239 --> 01:53:39,920
inside of a mainframe all the storage is

01:53:38,320 --> 01:53:41,280
going to be external so you attach a

01:53:39,920 --> 01:53:43,280
storage device there's a bunch of

01:53:41,280 --> 01:53:45,440
companies that make them

01:53:43,280 --> 01:53:46,560
and then inside it's pretty much all

01:53:45,440 --> 01:53:49,520
processing power

01:53:46,560 --> 01:53:51,360
so you've got your cpus your memory your

01:53:49,520 --> 01:53:53,920
pcie cards

01:53:51,360 --> 01:53:54,480
um it's like the through the five red

01:53:53,920 --> 01:53:57,440
circle

01:53:54,480 --> 01:53:58,719
red red um boxes in the middle are your

01:53:57,440 --> 01:54:00,639
cpus

01:53:58,719 --> 01:54:02,320
um which i'll talk about in a moment and

01:54:00,639 --> 01:54:04,639
then most of the rest of this

01:54:02,320 --> 01:54:06,320
is all of your like io cards your

01:54:04,639 --> 01:54:08,400
cryptographic cards

01:54:06,320 --> 01:54:10,719
all of the specialized cards that make a

01:54:08,400 --> 01:54:12,639
mainframe really special and very good

01:54:10,719 --> 01:54:14,800
at processing data

01:54:12,639 --> 01:54:15,840
um in the model that was released last

01:54:14,800 --> 01:54:17,679
year

01:54:15,840 --> 01:54:18,960
you have a water cooled option which is

01:54:17,679 --> 01:54:21,199
pretty much the standard

01:54:18,960 --> 01:54:22,719
um for these systems but they also have

01:54:21,199 --> 01:54:25,599
an air cooled version

01:54:22,719 --> 01:54:25,920
and you can get this in either one frame

01:54:25,599 --> 01:54:27,679
two

01:54:25,920 --> 01:54:29,360
three or four frames so if you get the

01:54:27,679 --> 01:54:29,920
four frame one like pictured here that's

01:54:29,360 --> 01:54:32,320
like

01:54:29,920 --> 01:54:33,119
the totally maxed out system that you

01:54:32,320 --> 01:54:34,960
can get

01:54:33,119 --> 01:54:36,560
and you can cluster mainframe so you can

01:54:34,960 --> 01:54:38,560
have multiple

01:54:36,560 --> 01:54:40,880
and so you can scale scale horizontally

01:54:38,560 --> 01:54:40,880
that way

01:54:41,199 --> 01:54:44,560
um yeah so this one actually is the

01:54:43,520 --> 01:54:46,800
water cooled system

01:54:44,560 --> 01:54:46,800
here

01:54:48,159 --> 01:54:54,560
and the cpus so the really

01:54:51,440 --> 01:54:55,199
key thing for this entire talk is that

01:54:54,560 --> 01:54:58,560
they are not

01:54:55,199 --> 01:55:01,440
x86 uh depending on who you talk to

01:54:58,560 --> 01:55:03,119
you'll see people refer to it as ibm z

01:55:01,440 --> 01:55:04,880
um which is probably how i'll refer to

01:55:03,119 --> 01:55:07,920
it in the rest of this talk um

01:55:04,880 --> 01:55:09,599
an s390x is how you might see it if you

01:55:07,920 --> 01:55:11,040
are in the open source world or in the

01:55:09,599 --> 01:55:13,040
linux world

01:55:11,040 --> 01:55:14,239
and are looking for the binaries for

01:55:13,040 --> 01:55:16,480
this architecture

01:55:14,239 --> 01:55:18,000
um if you come from sort of the

01:55:16,480 --> 01:55:20,159
mainframe

01:55:18,000 --> 01:55:21,920
background you might refer to it as the

01:55:20,159 --> 01:55:24,880
architecture

01:55:21,920 --> 01:55:27,280
the cpus themselves if you have a maxed

01:55:24,880 --> 01:55:30,400
out system

01:55:27,280 --> 01:55:31,360
there are 190 of these processors inside

01:55:30,400 --> 01:55:35,280
that four frame

01:55:31,360 --> 01:55:37,599
machine each processor has 12 cores

01:55:35,280 --> 01:55:38,480
and each processor also has really big

01:55:37,599 --> 01:55:39,760
caches

01:55:38,480 --> 01:55:41,760
and that's one of the defining

01:55:39,760 --> 01:55:43,119
characteristics of this architecture is

01:55:41,760 --> 01:55:48,080
that

01:55:43,119 --> 01:55:49,920
these systems were built for um

01:55:48,080 --> 01:55:51,760
processing data so if you think back to

01:55:49,920 --> 01:55:52,320
the 1960s when the first ones were

01:55:51,760 --> 01:55:54,639
released

01:55:52,320 --> 01:55:56,480
the only companies that needed computers

01:55:54,639 --> 01:55:58,480
were ones that were doing

01:55:56,480 --> 01:56:00,000
processing ones that were doing a lot of

01:55:58,480 --> 01:56:02,480
work with data so they were either

01:56:00,000 --> 01:56:04,000
processing data or storing data so as we

01:56:02,480 --> 01:56:05,520
think back to the industries i mentioned

01:56:04,000 --> 01:56:07,119
the beginning we're thinking about banks

01:56:05,520 --> 01:56:10,000
we're thinking about airlines

01:56:07,119 --> 01:56:11,760
and ones who need to have data because

01:56:10,000 --> 01:56:12,880
there was no facebook back then like you

01:56:11,760 --> 01:56:15,119
didn't need to store your

01:56:12,880 --> 01:56:16,960
store random data about people it was

01:56:15,119 --> 01:56:18,080
really industries that were data focused

01:56:16,960 --> 01:56:19,920
back in the day

01:56:18,080 --> 01:56:21,119
and the systems are still geared towards

01:56:19,920 --> 01:56:23,040
data

01:56:21,119 --> 01:56:24,960
um in a fully decked out system you get

01:56:23,040 --> 01:56:28,320
40 terabytes of ram

01:56:24,960 --> 01:56:31,760
i mentioned all those pcie cards

01:56:28,320 --> 01:56:34,080
and so there's 12 drawers of those

01:56:31,760 --> 01:56:35,840
and they there are also these processors

01:56:34,080 --> 01:56:38,800
called saps

01:56:35,840 --> 01:56:42,960
which are dedicated purely to i o so

01:56:38,800 --> 01:56:45,440
when you're doing i o you

01:56:42,960 --> 01:56:47,040
don't have to take away from the like

01:56:45,440 --> 01:56:48,719
the general processing power there are

01:56:47,040 --> 01:56:50,400
specific processors in there that just

01:56:48,719 --> 01:56:53,840
handle i o and again this is because of

01:56:50,400 --> 01:56:53,840
the data focus of the systems

01:56:55,280 --> 01:56:58,400
so there's there's an interesting

01:56:56,239 --> 01:57:00,560
question or comment in the chat and

01:56:58,400 --> 01:57:02,800
someone mentioned that that um she had

01:57:00,560 --> 01:57:03,679
seen s390x while doing some some work on

01:57:02,800 --> 01:57:04,800
suse

01:57:03,679 --> 01:57:06,800
and they didn't know what they what it

01:57:04,800 --> 01:57:09,760
was for months

01:57:06,800 --> 01:57:10,480
yeah so that that is a great segue into

01:57:09,760 --> 01:57:13,360
this slide

01:57:10,480 --> 01:57:14,000
um so i wanted to stop for a moment just

01:57:13,360 --> 01:57:16,400
talk about

01:57:14,000 --> 01:57:17,760
other architectures in general um so the

01:57:16,400 --> 01:57:19,440
kubernetes project

01:57:17,760 --> 01:57:21,199
is just one that i like to bring up as

01:57:19,440 --> 01:57:22,480
an example as an infrastructure person

01:57:21,199 --> 01:57:24,239
myself

01:57:22,480 --> 01:57:25,360
they release binaries for their servers

01:57:24,239 --> 01:57:26,480
and their clients in multiple

01:57:25,360 --> 01:57:29,599
architectures

01:57:26,480 --> 01:57:31,119
um so if you want to go through the list

01:57:29,599 --> 01:57:33,679
of what they release their server

01:57:31,119 --> 01:57:35,360
their kubernetes server has um one of

01:57:33,679 --> 01:57:36,560
them is amd64

01:57:35,360 --> 01:57:40,320
which you're probably familiar with

01:57:36,560 --> 01:57:42,159
that's your standard 64-bit x86 machine

01:57:40,320 --> 01:57:43,520
um that's you know going to be in your

01:57:42,159 --> 01:57:46,880
standard laptop and

01:57:43,520 --> 01:57:49,440
not much longer for apple but

01:57:46,880 --> 01:57:50,239
uh the desktop and server that's that's

01:57:49,440 --> 01:57:52,639
pretty much

01:57:50,239 --> 01:57:55,199
what you're going to get if you you know

01:57:52,639 --> 01:57:58,239
load up any any random system

01:57:55,199 --> 01:57:59,520
and so that is oh

01:57:58,239 --> 01:58:02,320
and if you're interested in like

01:57:59,520 --> 01:58:04,639
architecture history finding out how

01:58:02,320 --> 01:58:06,400
x86 became the dominant architecture in

01:58:04,639 --> 01:58:07,679
the industry is a fascinating story

01:58:06,400 --> 01:58:09,520
and it has very little to do with

01:58:07,679 --> 01:58:10,560
technology there's a lot of politics

01:58:09,520 --> 01:58:13,040
involved in like

01:58:10,560 --> 01:58:14,639
back in the 80 86 days that's way off

01:58:13,040 --> 01:58:16,560
topic

01:58:14,639 --> 01:58:17,920
um another one you might see around his

01:58:16,560 --> 01:58:21,199
arm of course arm

01:58:17,920 --> 01:58:22,960
is an arm hf those are those are what

01:58:21,199 --> 01:58:25,599
are in the older cell phones

01:58:22,960 --> 01:58:28,000
um and also the raspberry pi one and two

01:58:25,599 --> 01:58:30,560
so that's a 32-bit arm

01:58:28,000 --> 01:58:32,320
arm 64 is the more modern version of arm

01:58:30,560 --> 01:58:34,159
again 64-bit

01:58:32,320 --> 01:58:35,440
um that's arm so that's in all the

01:58:34,159 --> 01:58:38,560
modern cell phones both

01:58:35,440 --> 01:58:41,040
android and um uh

01:58:38,560 --> 01:58:42,639
and and the iphones um and that's also

01:58:41,040 --> 01:58:43,920
what's in the raspberry pi three and

01:58:42,639 --> 01:58:45,360
four so if you've ever played around

01:58:43,920 --> 01:58:48,239
with the raspberry pi

01:58:45,360 --> 01:58:49,760
you have gotten your first taste of

01:58:48,239 --> 01:58:51,199
different architectures

01:58:49,760 --> 01:58:54,880
some of the stuff won't run because you

01:58:51,199 --> 01:58:54,880
have to compile it for that architecture

01:58:55,280 --> 01:59:03,360
the ppc64 so that is powerpc 64-bit

01:59:00,960 --> 01:59:05,119
you'll find those in ibm's power series

01:59:03,360 --> 01:59:07,119
of servers so that's the power 9 and the

01:59:05,119 --> 01:59:10,719
power 10 systems

01:59:07,119 --> 01:59:13,840
the 64-bit power pc was also used

01:59:10,719 --> 01:59:15,440
in the wii u system and the ps3 and the

01:59:13,840 --> 01:59:18,480
xbox 360.

01:59:15,440 --> 01:59:19,840
so that like era of of game consoles i

01:59:18,480 --> 01:59:20,719
guess we use a little after the other

01:59:19,840 --> 01:59:23,119
two but

01:59:20,719 --> 01:59:25,119
um there was a lot of power pc in gaming

01:59:23,119 --> 01:59:28,080
consoles for a while there

01:59:25,119 --> 01:59:29,199
um the le that's in parentheses which is

01:59:28,080 --> 01:59:31,199
what kubernetes

01:59:29,199 --> 01:59:32,960
releases as their binaries that stands

01:59:31,199 --> 01:59:35,840
for little endian

01:59:32,960 --> 01:59:38,080
um and that means power pc is typically

01:59:35,840 --> 01:59:40,960
big endian which has to do with um

01:59:38,080 --> 01:59:42,400
how memory is handled in the system but

01:59:40,960 --> 01:59:43,599
the version that is becoming

01:59:42,400 --> 01:59:44,000
increasingly popular it's a little

01:59:43,599 --> 01:59:45,920
endian

01:59:44,000 --> 01:59:47,760
version because every other processor

01:59:45,920 --> 01:59:50,400
i've described on this list

01:59:47,760 --> 01:59:52,560
is a little endian processor and that

01:59:50,400 --> 01:59:55,440
matters when you're porting software

01:59:52,560 --> 01:59:58,000
so powerpc has both versions and then

01:59:55,440 --> 02:00:00,159
coming again to the s390x

01:59:58,000 --> 02:00:01,040
which i'm talking about here that is big

02:00:00,159 --> 02:00:04,480
endian

02:00:01,040 --> 02:00:08,159
so on this list power pc has both s390x

02:00:04,480 --> 02:00:08,159
is big endian the rest are little

02:00:08,480 --> 02:00:12,000
so that is your very quick tour of

02:00:10,320 --> 02:00:13,599
hardware architectures and i had to try

02:00:12,000 --> 02:00:15,520
really hard not to dive too deep into

02:00:13,599 --> 02:00:19,360
this because you can get there's like

02:00:15,520 --> 02:00:19,360
many many talks about this topic

02:00:22,000 --> 02:00:27,920
so mainframes ibm z

02:00:26,239 --> 02:00:30,000
where did these things come from anyway

02:00:27,920 --> 02:00:31,360
um so one of the things that i

02:00:30,000 --> 02:00:33,280
that really pulled me in when i was

02:00:31,360 --> 02:00:34,400
learning about this architecture and

02:00:33,280 --> 02:00:36,320
these systems

02:00:34,400 --> 02:00:38,080
was that they have a really strong open

02:00:36,320 --> 02:00:39,920
source legacy it turns out

02:00:38,080 --> 02:00:41,599
like i was thinking you know ibm

02:00:39,920 --> 02:00:43,679
controls everything and they

02:00:41,599 --> 02:00:44,880
have this proprietary ecosystem and this

02:00:43,679 --> 02:00:47,440
whole thing

02:00:44,880 --> 02:00:48,960
but when i was reading about it it turns

02:00:47,440 --> 02:00:50,480
out that there's this organization

02:00:48,960 --> 02:00:53,840
called share

02:00:50,480 --> 02:00:55,679
it was founded in 1955 and so it is the

02:00:53,840 --> 02:00:59,119
longest continuously running

02:00:55,679 --> 02:01:02,239
open or uh computer user group

02:00:59,119 --> 02:01:03,840
in the world um so

02:01:02,239 --> 02:01:05,840
that's pretty cool they just they just

02:01:03,840 --> 02:01:07,280
celebrated an anniversary this year and

02:01:05,840 --> 02:01:09,360
they had to have a virtual event which

02:01:07,280 --> 02:01:10,639
was sad but next year we'll all get back

02:01:09,360 --> 02:01:13,119
together

02:01:10,639 --> 02:01:16,480
um and one of the key resources back in

02:01:13,119 --> 02:01:18,639
the 1950s was the share library

02:01:16,480 --> 02:01:20,960
and that's a library of software that

02:01:18,639 --> 02:01:22,880
the developers of this these first

02:01:20,960 --> 02:01:23,920
computers um the first commercial

02:01:22,880 --> 02:01:26,400
computers were

02:01:23,920 --> 02:01:27,840
sharing freely among each other um it

02:01:26,400 --> 02:01:29,280
wasn't really open source in the way we

02:01:27,840 --> 02:01:31,520
think of it now

02:01:29,280 --> 02:01:32,320
because there wasn't you know licensing

02:01:31,520 --> 02:01:33,920
and and

02:01:32,320 --> 02:01:35,920
legal stuff getting away it was just

02:01:33,920 --> 02:01:37,679
this was source code was the only way

02:01:35,920 --> 02:01:41,360
people could share code

02:01:37,679 --> 02:01:41,920
um in 1959 the organization came

02:01:41,360 --> 02:01:45,119
together

02:01:41,920 --> 02:01:47,199
and released the first operating system

02:01:45,119 --> 02:01:49,280
that really ever existed that had like

02:01:47,199 --> 02:01:51,360
certain components that you would

02:01:49,280 --> 02:01:53,280
generally call an operating system so

02:01:51,360 --> 02:01:55,119
it's called sos

02:01:53,280 --> 02:01:56,719
and if you go to wikipedia and read

02:01:55,119 --> 02:01:58,560
about sos it

02:01:56,719 --> 02:02:00,560
they they say it's it's one of the the

02:01:58,560 --> 02:02:02,400
first instances of commons based

02:02:00,560 --> 02:02:03,520
peer production now widely used in

02:02:02,400 --> 02:02:04,000
development of free and open source

02:02:03,520 --> 02:02:07,520
software

02:02:04,000 --> 02:02:09,599
such as linux and the gnu project so

02:02:07,520 --> 02:02:11,360
it's it's funny to me because when i

02:02:09,599 --> 02:02:14,080
when i look back at histories

02:02:11,360 --> 02:02:15,679
of open source and histories of of

02:02:14,080 --> 02:02:19,040
things like linux

02:02:15,679 --> 02:02:21,040
unix plays a very very like a starring

02:02:19,040 --> 02:02:23,599
role in all of these stories

02:02:21,040 --> 02:02:25,040
um but unix only dates back to the 1970s

02:02:23,599 --> 02:02:27,520
um here we're looking back all the way

02:02:25,040 --> 02:02:29,599
into the 50s of people sharing software

02:02:27,520 --> 02:02:30,639
so cher is super cool there's lots of

02:02:29,599 --> 02:02:33,040
great people

02:02:30,639 --> 02:02:34,639
who weren't part of this organization

02:02:33,040 --> 02:02:37,920
and it's all focused

02:02:34,639 --> 02:02:38,639
um on mainframe i mentioned at the

02:02:37,920 --> 02:02:41,440
beginning

02:02:38,639 --> 02:02:42,000
uh that linux runs on the mainframe and

02:02:41,440 --> 02:02:45,520
it has

02:02:42,000 --> 02:02:47,920
for over 20 years again like

02:02:45,520 --> 02:02:49,040
with this open source legacy like this

02:02:47,920 --> 02:02:52,320
all started out

02:02:49,040 --> 02:02:54,320
um as a community project as well um if

02:02:52,320 --> 02:02:55,920
anyone was around in the late 90s

02:02:54,320 --> 02:02:56,400
playing around with linux this was the

02:02:55,920 --> 02:02:59,599
era

02:02:56,400 --> 02:03:01,920
of like putting linux on a dead badger

02:02:59,599 --> 02:03:04,320
um that was a series of essays about

02:03:01,920 --> 02:03:05,920
you know um about like funny essays

02:03:04,320 --> 02:03:07,280
about linux and then where it was in the

02:03:05,920 --> 02:03:08,719
late 90s

02:03:07,280 --> 02:03:10,239
so people were just putting linux on

02:03:08,719 --> 02:03:10,880
everything because you could it was open

02:03:10,239 --> 02:03:12,400
source

02:03:10,880 --> 02:03:13,920
it was really lean at the time and

02:03:12,400 --> 02:03:15,199
people were trying to experiment and

02:03:13,920 --> 02:03:16,880
geek out about it

02:03:15,199 --> 02:03:18,719
um if you do go into the history of

02:03:16,880 --> 02:03:21,760
linux it's it's on ibm z

02:03:18,719 --> 02:03:22,400
it's it's really fun because the like if

02:03:21,760 --> 02:03:24,800
you're

02:03:22,400 --> 02:03:27,199
a linux nerd at all you'll totally see

02:03:24,800 --> 02:03:29,920
yourself in their reasons for porting it

02:03:27,199 --> 02:03:31,119
they ported it because it was there like

02:03:29,920 --> 02:03:34,239
it existed it

02:03:31,119 --> 02:03:36,000
seemed fun um they ported it because it

02:03:34,239 --> 02:03:37,840
was an interesting challenge

02:03:36,000 --> 02:03:39,280
um and then if you go down their list

02:03:37,840 --> 02:03:41,199
they're like oh yeah the i o is really

02:03:39,280 --> 02:03:43,119
fast and it does all this great stuff so

02:03:41,199 --> 02:03:44,480
it'd be cool to run linux on it but

02:03:43,119 --> 02:03:47,760
you know at the heart i know it's those

02:03:44,480 --> 02:03:49,199
first few reasons um

02:03:47,760 --> 02:03:51,040
and so there was a community effort

02:03:49,199 --> 02:03:53,360
working on this getting it running

02:03:51,040 --> 02:03:54,880
um and then it turns out ibm was

02:03:53,360 --> 02:03:58,480
simultaneously

02:03:54,880 --> 02:04:00,960
um working on on a linux version

02:03:58,480 --> 02:04:02,560
as well and so they released their first

02:04:00,960 --> 02:04:03,199
series of kernel patches i think it was

02:04:02,560 --> 02:04:06,560
a

02:04:03,199 --> 02:04:08,239
2-2 kernel um in december of 1999.

02:04:06,560 --> 02:04:11,840
these were pretty much just like blobs

02:04:08,239 --> 02:04:11,840
like here this is how to get it to run

02:04:12,079 --> 02:04:18,880
in october 2000 um suse enterprise

02:04:15,679 --> 02:04:21,119
server became the first

02:04:18,880 --> 02:04:22,000
um still in production enterprise linux

02:04:21,119 --> 02:04:25,040
to run on

02:04:22,000 --> 02:04:26,320
s390x architecture um there's an

02:04:25,040 --> 02:04:30,000
interesting story here

02:04:26,320 --> 02:04:33,199
um so i know that it's really just

02:04:30,000 --> 02:04:36,159
um a marketing thing right like when

02:04:33,199 --> 02:04:37,599
when uh suse rebranded to call itself

02:04:36,159 --> 02:04:38,800
enterprise linux server and all this

02:04:37,599 --> 02:04:41,280
stuff but

02:04:38,800 --> 02:04:42,960
the first suse enterprise server was

02:04:41,280 --> 02:04:45,840
called enterprise server

02:04:42,960 --> 02:04:47,599
because it ran on s390x it was

02:04:45,840 --> 02:04:48,719
enterprise because it ran on enterprise

02:04:47,599 --> 02:04:51,040
hardware

02:04:48,719 --> 02:04:51,760
the x86 version of suse enterprise

02:04:51,040 --> 02:04:53,520
server

02:04:51,760 --> 02:04:55,440
actually came a few months after the

02:04:53,520 --> 02:04:57,520
mainframe version

02:04:55,440 --> 02:04:58,960
um which is funny to me because then i

02:04:57,520 --> 02:05:02,320
get to tell people that this

02:04:58,960 --> 02:05:03,199
suse enterprise the x86 version is the

02:05:02,320 --> 02:05:05,440
port

02:05:03,199 --> 02:05:08,320
the mainframe version is the original i

02:05:05,440 --> 02:05:11,360
know it's not true but it's funny anyway

02:05:08,320 --> 02:05:13,199
um so tuesday was the first um red hat

02:05:11,360 --> 02:05:14,480
like just a couple months later they

02:05:13,199 --> 02:05:15,040
followed they were the second one that's

02:05:14,480 --> 02:05:16,800
like

02:05:15,040 --> 02:05:18,159
still an enterprise linux that runs on

02:05:16,800 --> 02:05:21,119
on the mainframe

02:05:18,159 --> 02:05:22,560
um and then and then one you know

02:05:21,119 --> 02:05:26,079
several years afterwards

02:05:22,560 --> 02:05:28,079
late late into 2016 um ubuntu became

02:05:26,079 --> 02:05:29,360
came to support on the platform with

02:05:28,079 --> 02:05:32,960
their uh

02:05:29,360 --> 02:05:34,719
1604 release so when we talk about linux

02:05:32,960 --> 02:05:36,719
on the mainframe it's not some

02:05:34,719 --> 02:05:37,920
special ibm thing it's not some special

02:05:36,719 --> 02:05:40,000
proprietary thing

02:05:37,920 --> 02:05:41,360
it really is like these linuxes that we

02:05:40,000 --> 02:05:43,520
know and love already

02:05:41,360 --> 02:05:44,800
um i also have a slide coming up with

02:05:43,520 --> 02:05:48,400
other distributions the community

02:05:44,800 --> 02:05:51,040
supported ones that are all on there

02:05:48,400 --> 02:05:52,560
um so at the beginning of this deck this

02:05:51,040 --> 02:05:54,239
presentation i showed you

02:05:52,560 --> 02:05:57,199
some mainframes with with a blue cover

02:05:54,239 --> 02:06:00,159
on them the ones with the orange cover

02:05:57,199 --> 02:06:01,599
are called linux one and those only run

02:06:00,159 --> 02:06:03,679
linux

02:06:01,599 --> 02:06:05,599
so there's a bunch of traditional

02:06:03,679 --> 02:06:08,239
mainframe operating systems proprietary

02:06:05,599 --> 02:06:11,280
ones that ibm sells that exist out there

02:06:08,239 --> 02:06:13,679
but the linux one it only runs linux

02:06:11,280 --> 02:06:15,119
the first one from ibm was released in

02:06:13,679 --> 02:06:16,960
02:06:15,119 --> 02:06:19,520
and we called them the emperor and the

02:06:16,960 --> 02:06:22,159
rockhopper named after penguins

02:06:19,520 --> 02:06:23,920
um in 2017 just two years later the

02:06:22,159 --> 02:06:24,880
emperor two and the rockhopper ii came

02:06:23,920 --> 02:06:26,800
out

02:06:24,880 --> 02:06:28,320
and then just last year the linux one

02:06:26,800 --> 02:06:30,239
three came out and they dropped the

02:06:28,320 --> 02:06:33,599
penguin names i don't know why

02:06:30,239 --> 02:06:35,440
i guess the whimsy had run out of ibm

02:06:33,599 --> 02:06:36,880
but we don't use penguins in in the

02:06:35,440 --> 02:06:39,599
marketing anymore which is sad

02:06:36,880 --> 02:06:40,800
but here we are so the point here is

02:06:39,599 --> 02:06:42,560
like i'm not here to sell you one

02:06:40,800 --> 02:06:43,040
because i i'm that's not my job and i

02:06:42,560 --> 02:06:45,360
don't

02:06:43,040 --> 02:06:48,159
know how i don't even how much they cost

02:06:45,360 --> 02:06:49,920
um but

02:06:48,159 --> 02:06:52,159
the interesting thing here is like not

02:06:49,920 --> 02:06:53,199
only has ibm created a linux only

02:06:52,159 --> 02:06:56,159
mainframe

02:06:53,199 --> 02:06:57,440
um they keep creating it every two years

02:06:56,159 --> 02:06:58,800
we've been coming out with a new one

02:06:57,440 --> 02:07:01,520
like

02:06:58,800 --> 02:07:02,480
clearly an audience here and people who

02:07:01,520 --> 02:07:05,360
are using this

02:07:02,480 --> 02:07:06,719
and a real community around this which

02:07:05,360 --> 02:07:08,639
is one of the things that's that's been

02:07:06,719 --> 02:07:09,920
most exciting for me to learn about in

02:07:08,639 --> 02:07:13,119
this role

02:07:09,920 --> 02:07:15,599
working at ibm on open source things

02:07:13,119 --> 02:07:16,639
so this is what we're here to actually

02:07:15,599 --> 02:07:19,840
talk about

02:07:16,639 --> 02:07:22,560
running your application on a mainframe

02:07:19,840 --> 02:07:22,960
so um we just had that wayland talk and

02:07:22,560 --> 02:07:24,560
i know

02:07:22,960 --> 02:07:26,719
a lot of the talks are very geared

02:07:24,560 --> 02:07:27,840
towards graphical applications

02:07:26,719 --> 02:07:29,920
and that is where i'm going to

02:07:27,840 --> 02:07:32,960
disappoint you

02:07:29,920 --> 02:07:34,719
because if you have a graphical

02:07:32,960 --> 02:07:37,199
application it's probably not going to

02:07:34,719 --> 02:07:39,760
run on the mainframe

02:07:37,199 --> 02:07:41,520
i don't know if xserver has actually

02:07:39,760 --> 02:07:43,920
been ported

02:07:41,520 --> 02:07:45,280
but i don't know why anyone would bother

02:07:43,920 --> 02:07:46,560
your interaction with the mainframe is

02:07:45,280 --> 02:07:49,040
really

02:07:46,560 --> 02:07:51,040
text based so you're either using

02:07:49,040 --> 02:07:52,960
something like unix system services or

02:07:51,040 --> 02:07:56,400
you're using linux or directly

02:07:52,960 --> 02:07:57,599
um the way you interact with the systems

02:07:56,400 --> 02:07:59,840
running on it is through something

02:07:57,599 --> 02:08:01,040
called zvm which is a virtualization top

02:07:59,840 --> 02:08:03,599
uh

02:08:01,040 --> 02:08:04,880
technology or you're running it on

02:08:03,599 --> 02:08:07,840
something like kvm

02:08:04,880 --> 02:08:09,040
um which runs a super slim linux like on

02:08:07,840 --> 02:08:12,159
bare metal in the mainframe and then you

02:08:09,040 --> 02:08:15,040
run kvm on top of that

02:08:12,159 --> 02:08:16,239
um so the way you interact with it is

02:08:15,040 --> 02:08:19,920
very

02:08:16,239 --> 02:08:22,000
um not graphical so

02:08:19,920 --> 02:08:23,119
this is the first thing there's there's

02:08:22,000 --> 02:08:25,440
not a lot of there's not really

02:08:23,119 --> 02:08:28,320
graphical apps on the mainframe

02:08:25,440 --> 02:08:29,040
um if you are running something like a

02:08:28,320 --> 02:08:30,719
web app

02:08:29,040 --> 02:08:32,400
um if you're using node.js if you're

02:08:30,719 --> 02:08:34,480
using python frameworks

02:08:32,400 --> 02:08:36,239
this is perfectly fine um node and

02:08:34,480 --> 02:08:39,199
python interpreters have been ported

02:08:36,239 --> 02:08:40,400
to to ibm z they've been around for

02:08:39,199 --> 02:08:42,239
years now

02:08:40,400 --> 02:08:43,679
and so typically if you're running node

02:08:42,239 --> 02:08:46,400
or python or something like it

02:08:43,679 --> 02:08:48,560
it can just run it's fine if you're

02:08:46,400 --> 02:08:50,239
focused on server side apps again like

02:08:48,560 --> 02:08:51,599
this is what these machines were made to

02:08:50,239 --> 02:08:54,560
do um

02:08:51,599 --> 02:08:56,239
if your app is data driven um i've

02:08:54,560 --> 02:08:58,079
talked about this already like seriously

02:08:56,239 --> 02:08:59,599
that is literally what mainframes were

02:08:58,079 --> 02:09:02,079
built to do they were built to

02:08:59,599 --> 02:09:03,520
deal with data and all the engineers

02:09:02,079 --> 02:09:05,040
thousands of engineers who are still

02:09:03,520 --> 02:09:06,079
working on the new processors and the

02:09:05,040 --> 02:09:09,199
new hardware like

02:09:06,079 --> 02:09:10,159
their focus is all about data um which

02:09:09,199 --> 02:09:12,079
is why we

02:09:10,159 --> 02:09:14,079
like one of the big pushes for ibm is

02:09:12,079 --> 02:09:18,000
like the hybrid cloud story

02:09:14,079 --> 02:09:19,679
because the cloud is is like a

02:09:18,000 --> 02:09:21,360
great technology for people to be using

02:09:19,679 --> 02:09:23,119
for their infrastructure um but if

02:09:21,360 --> 02:09:25,280
you're really focused on data data

02:09:23,119 --> 02:09:27,679
transfers are really expensive

02:09:25,280 --> 02:09:28,560
um data storage in the cloud is really

02:09:27,679 --> 02:09:31,679
expensive

02:09:28,560 --> 02:09:33,840
and x86 was not developed for data

02:09:31,679 --> 02:09:34,719
processing like like uh the mainframes

02:09:33,840 --> 02:09:36,560
were

02:09:34,719 --> 02:09:38,239
so if you do have a data driven app i

02:09:36,560 --> 02:09:41,119
highly recommend checking it out

02:09:38,239 --> 02:09:42,880
um also if your application is somehow

02:09:41,119 --> 02:09:44,880
dependent on encryption

02:09:42,880 --> 02:09:47,679
oops i wrote encryption and encryption i

02:09:44,880 --> 02:09:50,000
meant encryption and decryption

02:09:47,679 --> 02:09:51,599
um like the cryptographic hardware in

02:09:50,000 --> 02:09:52,400
these things is one of the most exciting

02:09:51,599 --> 02:09:54,000
things for me

02:09:52,400 --> 02:09:55,520
um when i started learning about this

02:09:54,000 --> 02:09:59,119
because

02:09:55,520 --> 02:10:01,520
um the uh

02:09:59,119 --> 02:10:02,800
there are crypto coprocessors inside of

02:10:01,520 --> 02:10:04,480
every cpu

02:10:02,800 --> 02:10:06,079
and so you don't necessarily have to

02:10:04,480 --> 02:10:07,360
take away from general computing power

02:10:06,079 --> 02:10:08,880
to do crypto

02:10:07,360 --> 02:10:11,440
which means you can encrypt like all of

02:10:08,880 --> 02:10:12,880
your data you can use ipsec to encrypt

02:10:11,440 --> 02:10:15,119
it in flight you can use

02:10:12,880 --> 02:10:16,079
dmcrypt on the kernel level to encrypt

02:10:15,119 --> 02:10:17,599
it on the disk

02:10:16,079 --> 02:10:19,360
and you don't pull away from general

02:10:17,599 --> 02:10:21,760
processing power um

02:10:19,360 --> 02:10:23,920
i have a couple of servers behind me in

02:10:21,760 --> 02:10:25,840
here little x86 ones and

02:10:23,920 --> 02:10:29,119
it like just doing encryption on these

02:10:25,840 --> 02:10:31,679
machines takes like a ton of my cpu

02:10:29,119 --> 02:10:33,199
um so i'm not super thrilled about that

02:10:31,679 --> 02:10:34,560
i should have gotten more powerful cpus

02:10:33,199 --> 02:10:35,119
and these things but encryption really

02:10:34,560 --> 02:10:38,320
does

02:10:35,119 --> 02:10:39,360
chew up your cpu um and one of the

02:10:38,320 --> 02:10:40,880
things that

02:10:39,360 --> 02:10:42,639
you know we've been we've been sort of

02:10:40,880 --> 02:10:44,400
telling people about is that

02:10:42,639 --> 02:10:46,320
blockchain runs really well on a

02:10:44,400 --> 02:10:48,239
mainframe if you were to like purpose

02:10:46,320 --> 02:10:49,679
build a machine for blockchain

02:10:48,239 --> 02:10:51,840
it would probably look a lot like a

02:10:49,679 --> 02:10:53,119
mainframe between the data processing

02:10:51,840 --> 02:10:57,840
and the encryption stuff

02:10:53,119 --> 02:10:57,840
like that is what they're built to do

02:11:00,560 --> 02:11:03,599
so now getting to the question like is

02:11:02,719 --> 02:11:06,639
this some

02:11:03,599 --> 02:11:07,920
strange like side thing um

02:11:06,639 --> 02:11:10,880
a couple people mentioned in the chat

02:11:07,920 --> 02:11:12,480
that fire the firefox is built for s390x

02:11:10,880 --> 02:11:13,520
so hey there's a graphical app that's

02:11:12,480 --> 02:11:15,199
built for it

02:11:13,520 --> 02:11:17,040
um i'm gonna have to play around with

02:11:15,199 --> 02:11:18,880
some graphical apps after this because i

02:11:17,040 --> 02:11:21,280
don't

02:11:18,880 --> 02:11:22,079
yeah if firefox is built for it then

02:11:21,280 --> 02:11:23,440
like

02:11:22,079 --> 02:11:25,679
there's definitely some stuff going on

02:11:23,440 --> 02:11:27,679
there with with x

02:11:25,679 --> 02:11:29,199
um so yeah there's lots of other

02:11:27,679 --> 02:11:31,520
projects out there um

02:11:29,199 --> 02:11:33,119
this one is kind of like our our like

02:11:31,520 --> 02:11:36,719
vanity slide

02:11:33,119 --> 02:11:37,599
um there is not a comprehensive list

02:11:36,719 --> 02:11:39,199
really

02:11:37,599 --> 02:11:40,480
we i'll talk about it later but we do

02:11:39,199 --> 02:11:41,760
have a software search tool that

02:11:40,480 --> 02:11:43,679
searches the

02:11:41,760 --> 02:11:45,599
the three distributions that i mentioned

02:11:43,679 --> 02:11:48,639
um for for packages

02:11:45,599 --> 02:11:50,480
um but this is kind of like

02:11:48,639 --> 02:11:53,440
when people want to see like real

02:11:50,480 --> 02:11:56,960
projects are being ported to this this

02:11:53,440 --> 02:12:00,079
um uh architecture like yes they totally

02:11:56,960 --> 02:12:02,079
are um you'll see also there's community

02:12:00,079 --> 02:12:05,199
versions of linux so debian opens

02:12:02,079 --> 02:12:08,320
a um fedora clef os

02:12:05,199 --> 02:12:11,440
is a version of centos

02:12:08,320 --> 02:12:12,320
that's maintained it's an s390x port um

02:12:11,440 --> 02:12:13,920
and alpine

02:12:12,320 --> 02:12:15,920
the one that's that's commonly used with

02:12:13,920 --> 02:12:17,199
containers um that one's been ported

02:12:15,920 --> 02:12:19,760
that was done by

02:12:17,199 --> 02:12:20,960
um and um i think a mentee at the open

02:12:19,760 --> 02:12:24,079
mainframe project

02:12:20,960 --> 02:12:24,800
ported alpine um and then like all these

02:12:24,079 --> 02:12:26,880
other ones

02:12:24,800 --> 02:12:28,320
um there's a link here that i'll i also

02:12:26,880 --> 02:12:29,440
link to like in the slides this is just

02:12:28,320 --> 02:12:32,639
an image

02:12:29,440 --> 02:12:35,199
um and these ones

02:12:32,639 --> 02:12:37,040
are like the list that like ibm

02:12:35,199 --> 02:12:38,400
maintains concurrency on by working with

02:12:37,040 --> 02:12:39,920
the open source community

02:12:38,400 --> 02:12:42,079
but a bunch of open source communities

02:12:39,920 --> 02:12:43,679
like people just do it on their own like

02:12:42,079 --> 02:12:44,719
they maintain some of the ports

02:12:43,679 --> 02:12:47,280
and i think we have some of the people

02:12:44,719 --> 02:12:50,639
in the audience who have worked on

02:12:47,280 --> 02:12:54,079
this stuff um if you're into

02:12:50,639 --> 02:12:56,639
um containers docker hub

02:12:54,079 --> 02:12:58,480
has a way to search by architecture and

02:12:56,639 --> 02:13:00,880
so there's a there's a bunch of official

02:12:58,480 --> 02:13:04,320
images out there

02:13:00,880 --> 02:13:07,040
for uh s390x as well

02:13:04,320 --> 02:13:08,719
so you don't have to focus just on on

02:13:07,040 --> 02:13:10,079
one side you can look into the container

02:13:08,719 --> 02:13:12,480
world too there's a bunch of stuff you

02:13:10,079 --> 02:13:12,480
can grab

02:13:13,679 --> 02:13:16,719
so the first thing i want to talk about

02:13:16,000 --> 02:13:18,880
is

02:13:16,719 --> 02:13:20,480
with regard to like specifically dealing

02:13:18,880 --> 02:13:22,639
with open source the first thing is

02:13:20,480 --> 02:13:24,000
is like how do you find other software

02:13:22,639 --> 02:13:26,960
projects that are already running

02:13:24,000 --> 02:13:28,000
on s390x so my first recommendation

02:13:26,960 --> 02:13:31,360
would be

02:13:28,000 --> 02:13:32,560
um actually which i didn't list here was

02:13:31,360 --> 02:13:34,560
uh

02:13:32,560 --> 02:13:35,760
search in your own distribution so if

02:13:34,560 --> 02:13:38,960
you've got

02:13:35,760 --> 02:13:39,599
um a vm which which i can tell you how

02:13:38,960 --> 02:13:41,360
to get

02:13:39,599 --> 02:13:43,440
um running on red hat you just do you

02:13:41,360 --> 02:13:44,320
know a yum search and see if see if it's

02:13:43,440 --> 02:13:45,920
already there

02:13:44,320 --> 02:13:47,679
the first thing i did when i got my

02:13:45,920 --> 02:13:50,719
first vm

02:13:47,679 --> 02:13:54,000
on s390x was i installed um erc

02:13:50,719 --> 02:13:56,480
the the irc chat client and screen

02:13:54,000 --> 02:13:57,040
and i hopped on irc and i like piped a

02:13:56,480 --> 02:13:58,560
bunch of

02:13:57,040 --> 02:14:00,400
output to my friends and i'm like look

02:13:58,560 --> 02:14:01,440
i've got a vm on a mainframe how cool is

02:14:00,400 --> 02:14:05,679
that

02:14:01,440 --> 02:14:07,280
um i mean it was cool for me

02:14:05,679 --> 02:14:09,119
my friends seemed to appreciate it but i

02:14:07,280 --> 02:14:11,360
can't imagine that like

02:14:09,119 --> 02:14:13,280
a text based irc client was something

02:14:11,360 --> 02:14:15,360
that someone like

02:14:13,280 --> 02:14:17,119
a customer requested or someone went out

02:14:15,360 --> 02:14:19,520
of their way to create i think it was

02:14:17,119 --> 02:14:21,440
actually just something that

02:14:19,520 --> 02:14:22,800
you know red hat was like let's just

02:14:21,440 --> 02:14:25,199
build everything we can

02:14:22,800 --> 02:14:26,000
and it passed the tests and it worked

02:14:25,199 --> 02:14:28,719
and so they shipped

02:14:26,000 --> 02:14:31,119
it so cool like a lot of the software

02:14:28,719 --> 02:14:34,000
really just builds and works fine

02:14:31,119 --> 02:14:34,800
um if it's not part of your distribution

02:14:34,000 --> 02:14:36,639
um you can go

02:14:34,800 --> 02:14:38,239
direct to the project as you saw the

02:14:36,639 --> 02:14:40,480
kubernetes download page you saw the

02:14:38,239 --> 02:14:43,360
rest 390x binaries

02:14:40,480 --> 02:14:45,040
um you can ask like if you're if you're

02:14:43,360 --> 02:14:47,040
a mainframe customer you typically

02:14:45,040 --> 02:14:48,880
have a vendor who's providing you

02:14:47,040 --> 02:14:51,679
software as well so you can talk about

02:14:48,880 --> 02:14:52,960
talk to the vendor

02:14:51,679 --> 02:14:55,119
there's this really cool website that

02:14:52,960 --> 02:14:56,639
the open mainframe project which is part

02:14:55,119 --> 02:15:00,760
of the linux foundation

02:14:56,639 --> 02:15:01,920
um has put together so they it's called

02:15:00,760 --> 02:15:03,280
landscape.openmainframeproject.org and

02:15:01,920 --> 02:15:04,000
it allows you to scroll through a bunch

02:15:03,280 --> 02:15:06,560
of projects

02:15:04,000 --> 02:15:08,560
kind of like the slides i showed you and

02:15:06,560 --> 02:15:11,599
it's actually an evolution of that

02:15:08,560 --> 02:15:12,880
so we created the slide and the guys at

02:15:11,599 --> 02:15:15,199
the open mainframe project

02:15:12,880 --> 02:15:16,000
were like hey that's really cool we need

02:15:15,199 --> 02:15:19,119
that

02:15:16,000 --> 02:15:20,480
um an interactive version you can click

02:15:19,119 --> 02:15:22,320
through and see what the projects are

02:15:20,480 --> 02:15:24,400
about and the status of the s39 core

02:15:22,320 --> 02:15:27,760
stuff

02:15:24,400 --> 02:15:30,320
um ibm has a list verified software like

02:15:27,760 --> 02:15:30,880
not necessarily that that ibm supports

02:15:30,320 --> 02:15:32,960
but we

02:15:30,880 --> 02:15:34,480
we keep an eye on the ports and make

02:15:32,960 --> 02:15:37,440
sure that they're being updated

02:15:34,480 --> 02:15:38,400
by releases and that there's a specific

02:15:37,440 --> 02:15:40,320
interest in

02:15:38,400 --> 02:15:42,560
i mentioned there's an ibm z search on

02:15:40,320 --> 02:15:44,000
docker hub

02:15:42,560 --> 02:15:45,920
and then a project that i'm working on

02:15:44,000 --> 02:15:48,239
right now

02:15:45,920 --> 02:15:49,760
is the open mainframe project software

02:15:48,239 --> 02:15:53,199
discovery tool

02:15:49,760 --> 02:15:56,159
and that one allows you to search um

02:15:53,199 --> 02:15:56,560
red hat red hat enterprise linux suse

02:15:56,159 --> 02:15:59,679
and

02:15:56,560 --> 02:16:00,800
uh and ubuntu for binaries um so if you

02:15:59,679 --> 02:16:02,800
search for

02:16:00,800 --> 02:16:04,880
whatever software you're looking for you

02:16:02,800 --> 02:16:06,960
can you can find it in that tool

02:16:04,880 --> 02:16:08,960
it's it's very early days we're going to

02:16:06,960 --> 02:16:10,239
add all a bunch of other stuff to it too

02:16:08,960 --> 02:16:11,360
so we don't want to just search linux

02:16:10,239 --> 02:16:13,360
distributions

02:16:11,360 --> 02:16:15,840
we also want to search for z os for

02:16:13,360 --> 02:16:18,800
traditional mainframe operating system

02:16:15,840 --> 02:16:19,679
stuff that's open source and also search

02:16:18,800 --> 02:16:22,400
pretty much

02:16:19,679 --> 02:16:23,920
everything we can get our hands on to

02:16:22,400 --> 02:16:25,119
make sure it's like a comprehensive

02:16:23,920 --> 02:16:28,159
search tool

02:16:25,119 --> 02:16:29,920
so that's finding open source software

02:16:28,159 --> 02:16:31,199
um the next step is if you have open

02:16:29,920 --> 02:16:32,000
source software if you're developing

02:16:31,199 --> 02:16:33,679
open source software

02:16:32,000 --> 02:16:35,599
what can you do to actually port your

02:16:33,679 --> 02:16:38,399
application

02:16:35,599 --> 02:16:39,040
so again open mainframe project like

02:16:38,399 --> 02:16:41,840
this

02:16:39,040 --> 02:16:43,040
is probably the reason i took the job

02:16:41,840 --> 02:16:46,319
with ibm z

02:16:43,040 --> 02:16:47,200
um being able to see a linux foundation

02:16:46,319 --> 02:16:50,319
sponsored

02:16:47,200 --> 02:16:52,240
project that was not controlled by ibm

02:16:50,319 --> 02:16:54,399
that had a bunch of stakeholders like

02:16:52,240 --> 02:16:56,639
their board and their technical board

02:16:54,399 --> 02:16:58,319
they're not even dominated by ibm i

02:16:56,639 --> 02:17:00,080
think has like one seat

02:16:58,319 --> 02:17:02,080
um on these boards but they're a bunch

02:17:00,080 --> 02:17:03,840
of companies that have got together and

02:17:02,080 --> 02:17:06,880
decided that they want to do

02:17:03,840 --> 02:17:08,719
like have a a place

02:17:06,880 --> 02:17:10,240
where they can do all their project

02:17:08,719 --> 02:17:12,080
hosting for like projects that they're

02:17:10,240 --> 02:17:13,760
developing collaboratively

02:17:12,080 --> 02:17:15,519
so the open mainframe project if you

02:17:13,760 --> 02:17:17,840
have a mainframe specific

02:17:15,519 --> 02:17:19,040
application they'll do like your full

02:17:17,840 --> 02:17:20,719
project hosting

02:17:19,040 --> 02:17:22,399
um so that like they'll put in their

02:17:20,719 --> 02:17:25,040
github org they'll give you a mailing

02:17:22,399 --> 02:17:27,120
list at list.openmainframeproject.org

02:17:25,040 --> 02:17:29,040
you'll get a slack channel you can be

02:17:27,120 --> 02:17:30,399
interviewed on their podcasts and post

02:17:29,040 --> 02:17:32,639
on their blog

02:17:30,399 --> 02:17:34,319
um they have forums it's like all the

02:17:32,639 --> 02:17:37,120
resources that you'd expect

02:17:34,319 --> 02:17:38,559
um a ci cd system for the software

02:17:37,120 --> 02:17:39,920
discovery tool they're going to offer us

02:17:38,559 --> 02:17:41,439
web hosting space so we can actually

02:17:39,920 --> 02:17:44,800
host the tool somewhere

02:17:41,439 --> 02:17:44,800
once once it's in that state

02:17:45,200 --> 02:17:49,840
but if you have an application that's

02:17:46,559 --> 02:17:52,479
not specific to the mainframe

02:17:49,840 --> 02:17:53,439
they also provide resources for

02:17:52,479 --> 02:17:55,920
third-party

02:17:53,439 --> 02:17:57,280
open source software projects so um just

02:17:55,920 --> 02:17:58,800
off the top of my head i think debian is

02:17:57,280 --> 02:18:00,800
one of the ones in this

02:17:58,800 --> 02:18:02,319
that gets support from the open

02:18:00,800 --> 02:18:03,599
mainframe project and there's a bunch of

02:18:02,319 --> 02:18:06,639
other ones out there

02:18:03,599 --> 02:18:10,399
um on their website that um

02:18:06,639 --> 02:18:10,719
get vms that are that are like given to

02:18:10,399 --> 02:18:13,840
them

02:18:10,719 --> 02:18:16,000
through the open mainframe project um

02:18:13,840 --> 02:18:17,760
they also have an annual conference um

02:18:16,000 --> 02:18:19,040
it was supposed to be in person this

02:18:17,760 --> 02:18:22,719
year for the first time

02:18:19,040 --> 02:18:24,719
but alas nothing is in person

02:18:22,719 --> 02:18:25,760
um so their their first conference was

02:18:24,719 --> 02:18:27,200
it was in september

02:18:25,760 --> 02:18:29,840
um and it was really cool because you

02:18:27,200 --> 02:18:31,679
got it's just the ecosystem around

02:18:29,840 --> 02:18:33,679
mainframe development and open sources

02:18:31,679 --> 02:18:36,960
is huge and it was really impressive to

02:18:33,679 --> 02:18:36,960
me to see everyone speaking there

02:18:37,439 --> 02:18:42,319
uh so the next one i want to talk about

02:18:38,960 --> 02:18:44,319
is the linux one community cloud

02:18:42,319 --> 02:18:45,519
uh so this is the one that i do most of

02:18:44,319 --> 02:18:49,599
my work on

02:18:45,519 --> 02:18:52,880
um if you go to developer.ibm.com linux1

02:18:49,599 --> 02:18:56,559
um it will give you a form to fill out

02:18:52,880 --> 02:18:59,840
in order to get access to a linux vm

02:18:56,559 --> 02:19:02,719
um that is a vm that's good for 120 days

02:18:59,840 --> 02:19:04,080
um it's actually a really nice vm for a

02:19:02,719 --> 02:19:05,120
free thing that we're giving away to

02:19:04,080 --> 02:19:07,200
people

02:19:05,120 --> 02:19:08,960
it's got a nice chunk of a really big

02:19:07,200 --> 02:19:09,519
chunk around the cpu is really great

02:19:08,960 --> 02:19:12,240
it's just

02:19:09,519 --> 02:19:14,319
it's a really nice machine for for what

02:19:12,240 --> 02:19:18,319
i mean for nothing um

02:19:14,319 --> 02:19:20,319
so this gives you 120 days of access um

02:19:18,319 --> 02:19:21,760
and the secret here is if it expires you

02:19:20,319 --> 02:19:23,679
can you can

02:19:21,760 --> 02:19:24,880
sign up again you have to get a new vm

02:19:23,679 --> 02:19:27,200
but

02:19:24,880 --> 02:19:29,840
um you can you can sign up multiple

02:19:27,200 --> 02:19:32,559
times um

02:19:29,840 --> 02:19:34,160
so that's really cool um and so one of

02:19:32,559 --> 02:19:35,200
the things that we do is we we encourage

02:19:34,160 --> 02:19:37,200
open source projects if they're

02:19:35,200 --> 02:19:38,639
interested in doing this porting work

02:19:37,200 --> 02:19:40,479
is to hop on the linux one community

02:19:38,639 --> 02:19:43,200
cloud first

02:19:40,479 --> 02:19:45,439
see if their application builds and play

02:19:43,200 --> 02:19:47,920
around with it a bit

02:19:45,439 --> 02:19:48,960
and then if they're interested they

02:19:47,920 --> 02:19:51,439
should reach out

02:19:48,960 --> 02:19:52,479
more formally to either the open

02:19:51,439 --> 02:19:55,680
mainframe project

02:19:52,479 --> 02:19:56,399
or ibm i'm usually the contact person

02:19:55,680 --> 02:19:57,600
for this

02:19:56,399 --> 02:19:59,040
but i'm actually about to go on

02:19:57,600 --> 02:20:00,399
maternity leave so i'll be gone for a

02:19:59,040 --> 02:20:02,720
few months

02:20:00,399 --> 02:20:04,240
but there's other folks on my team um

02:20:02,720 --> 02:20:07,200
who you will be directed to

02:20:04,240 --> 02:20:09,040
um to actually talk with ibm and get a

02:20:07,200 --> 02:20:12,560
longer-lived virtual machine

02:20:09,040 --> 02:20:15,920
um so we support i think probably about

02:20:12,560 --> 02:20:16,560
30 projects formally in our open source

02:20:15,920 --> 02:20:18,319
sphere

02:20:16,560 --> 02:20:19,920
and then ibm has business relationships

02:20:18,319 --> 02:20:21,760
with a bunch of other projects so

02:20:19,920 --> 02:20:23,520
if you're if you're a project with red

02:20:21,760 --> 02:20:24,000
hat or microsoft there's probably some

02:20:23,520 --> 02:20:27,040
sort of

02:20:24,000 --> 02:20:28,960
like official arrangement there but if

02:20:27,040 --> 02:20:29,680
you're just like a normal grassroots

02:20:28,960 --> 02:20:31,200
like

02:20:29,680 --> 02:20:32,960
old school kind of open source project

02:20:31,200 --> 02:20:34,399
you'd be working with me because those

02:20:32,960 --> 02:20:36,319
are the ones that i'm supporting because

02:20:34,399 --> 02:20:39,600
i'm like

02:20:36,319 --> 02:20:41,680
part of my job is outreach to um

02:20:39,600 --> 02:20:43,200
the less like the less corporate-backed

02:20:41,680 --> 02:20:45,120
open source projects

02:20:43,200 --> 02:20:47,200
um and then here's a link here for the

02:20:45,120 --> 02:20:49,040
linux one community cloud community

02:20:47,200 --> 02:20:51,200
and that's where that's a forum and a

02:20:49,040 --> 02:20:52,560
blog and like just ways that people are

02:20:51,200 --> 02:20:54,240
collaborating and sharing things on the

02:20:52,560 --> 02:20:54,880
linux one community cloud and we just

02:20:54,240 --> 02:20:56,240
launched that

02:20:54,880 --> 02:20:58,640
so there aren't very many people there

02:20:56,240 --> 02:21:00,479
most of the blog posts are from me

02:20:58,640 --> 02:21:01,600
um but it's one that we're growing

02:21:00,479 --> 02:21:04,560
because we want people to be able to

02:21:01,600 --> 02:21:04,560
share their experience

02:21:05,920 --> 02:21:11,280
um so uh another way

02:21:08,960 --> 02:21:12,240
so my suggestion is to start off on

02:21:11,280 --> 02:21:14,080
something like either

02:21:12,240 --> 02:21:16,399
the open mainframe project offerings or

02:21:14,080 --> 02:21:17,600
the linux one community cloud

02:21:16,399 --> 02:21:20,080
and then once you know that your

02:21:17,600 --> 02:21:20,479
software builds um you can use something

02:21:20,080 --> 02:21:23,680
like

02:21:20,479 --> 02:21:24,800
the ubuntu personal package archive and

02:21:23,680 --> 02:21:27,120
that's on launchpad

02:21:24,800 --> 02:21:28,000
so if you're building uh debian ubuntu

02:21:27,120 --> 02:21:30,240
packages

02:21:28,000 --> 02:21:32,160
this is really where you want to go so

02:21:30,240 --> 02:21:33,760
you can the personal package archives

02:21:32,160 --> 02:21:35,840
allows you to create a dab so you do

02:21:33,760 --> 02:21:37,840
have to know how to create a dev package

02:21:35,840 --> 02:21:39,200
you upload the sources source files for

02:21:37,840 --> 02:21:42,560
your dev package

02:21:39,200 --> 02:21:44,560
and then you can build your um

02:21:42,560 --> 02:21:45,920
your package and then you get like a url

02:21:44,560 --> 02:21:48,560
where people can you know put it in

02:21:45,920 --> 02:21:50,240
their sources.list

02:21:48,560 --> 02:21:52,080
and then you have a way to deliver your

02:21:50,240 --> 02:21:53,600
software as well so by default it builds

02:21:52,080 --> 02:21:55,200
for amd64

02:21:53,600 --> 02:21:57,760
there's a little checkbox that you can

02:21:55,200 --> 02:22:00,720
build for z server s390x

02:21:57,760 --> 02:22:01,359
um i think i think they call it ibm z

02:22:00,720 --> 02:22:03,439
server

02:22:01,359 --> 02:22:04,800
but anyway there's a little checkbox so

02:22:03,439 --> 02:22:07,040
this is just like a simple app that i

02:22:04,800 --> 02:22:09,840
wrote in golang like hello world

02:22:07,040 --> 02:22:10,479
and i packaged it for debian and ubuntu

02:22:09,840 --> 02:22:12,000
and then i

02:22:10,479 --> 02:22:13,920
uploaded the source and it built it for

02:22:12,000 --> 02:22:16,399
me on canonical's mainframe

02:22:13,920 --> 02:22:17,120
it's like cool so that's on the ubuntu

02:22:16,399 --> 02:22:20,399
side

02:22:17,120 --> 02:22:22,240
um if you're using

02:22:20,399 --> 02:22:24,399
so you can also use the opensuse build

02:22:22,240 --> 02:22:27,200
system or build service

02:22:24,399 --> 02:22:28,240
um that that suse hosts um that that

02:22:27,200 --> 02:22:32,880
will also build

02:22:28,240 --> 02:22:34,960
um your package uh for uh s390x

02:22:32,880 --> 02:22:36,000
um i don't i don't remember if you have

02:22:34,960 --> 02:22:38,160
to actually click it or if it'll

02:22:36,000 --> 02:22:40,319
automatically build it for you i think

02:22:38,160 --> 02:22:41,200
it'll automatically build it for you um

02:22:40,319 --> 02:22:43,280
and if it builds

02:22:41,200 --> 02:22:45,160
awesome like you're on your way so

02:22:43,280 --> 02:22:46,479
opensuse build service

02:22:45,160 --> 02:22:47,840
build.opensuse.org

02:22:46,479 --> 02:22:49,600
and that again runs on one of the

02:22:47,840 --> 02:22:53,280
mainframes that the suse

02:22:49,600 --> 02:22:56,399
company has um in this case

02:22:53,280 --> 02:22:58,080
um you do have to have just like with

02:22:56,399 --> 02:22:58,960
with ubuntu ppas you have to know about

02:22:58,080 --> 02:23:00,800
dev packages

02:22:58,960 --> 02:23:03,040
with the opensuse build service you do

02:23:00,800 --> 02:23:05,600
have to know a bit about rpm packaging

02:23:03,040 --> 02:23:07,200
um but i mean i wouldn't say it's easy

02:23:05,600 --> 02:23:08,960
either one they're not easy

02:23:07,200 --> 02:23:11,760
but they are very well documented so

02:23:08,960 --> 02:23:11,760
it's something you can learn

02:23:13,600 --> 02:23:19,040
another way that we have for testing and

02:23:16,720 --> 02:23:20,399
keeping up your your system is uh we've

02:23:19,040 --> 02:23:23,680
partnered with the

02:23:20,399 --> 02:23:24,800
um oregon state open source lab the osu

02:23:23,680 --> 02:23:27,520
osl

02:23:24,800 --> 02:23:28,880
um i love these folks they're they do so

02:23:27,520 --> 02:23:32,479
much great work for the open source

02:23:28,880 --> 02:23:34,880
community in in a very independent way

02:23:32,479 --> 02:23:35,840
but they have jenkins service that they

02:23:34,880 --> 02:23:39,040
run

02:23:35,840 --> 02:23:40,479
that just has s390x builders

02:23:39,040 --> 02:23:42,399
and so you can if you're already using

02:23:40,479 --> 02:23:42,880
jenkins you can add the builders that

02:23:42,399 --> 02:23:46,479
you get

02:23:42,880 --> 02:23:48,399
from the osu osl to your

02:23:46,479 --> 02:23:50,880
jenkins and then you can you can build

02:23:48,399 --> 02:23:52,080
it into your ci cd pipeline

02:23:50,880 --> 02:23:53,520
and this one's great because it's open

02:23:52,080 --> 02:23:55,840
source and it's run by some really great

02:23:53,520 --> 02:23:55,840
people

02:23:57,040 --> 02:24:03,600
sort of sticking with the cicd

02:24:00,479 --> 02:24:05,280
train here um travis which is it is

02:24:03,600 --> 02:24:06,960
proprietary but

02:24:05,280 --> 02:24:08,800
they have a beta trial right now for

02:24:06,960 --> 02:24:10,560
open source projects um

02:24:08,800 --> 02:24:12,160
and so you can build for multiple

02:24:10,560 --> 02:24:14,080
architectures i just put the docs link

02:24:12,160 --> 02:24:16,399
here for multi-cpu architectures because

02:24:14,080 --> 02:24:19,920
they now support

02:24:16,399 --> 02:24:22,479
arm s390x and

02:24:19,920 --> 02:24:23,359
powerpc so they have builders for all

02:24:22,479 --> 02:24:25,840
three of them

02:24:23,359 --> 02:24:27,840
and if you're already using travis it's

02:24:25,840 --> 02:24:30,640
really just a simple edit in your travis

02:24:27,840 --> 02:24:32,240
config to support other architectures

02:24:30,640 --> 02:24:33,840
so again probably make sure your

02:24:32,240 --> 02:24:34,640
software runs first and then and then

02:24:33,840 --> 02:24:36,319
dump it in your

02:24:34,640 --> 02:24:39,200
your travis config and now you have

02:24:36,319 --> 02:24:39,200
builders um

02:24:39,840 --> 02:24:42,960
i think you also have to be have your

02:24:41,120 --> 02:24:44,560
project on github in order to use this

02:24:42,960 --> 02:24:48,000
but you can see in the documentation

02:24:44,560 --> 02:24:48,000
what what requirements are there

02:24:49,359 --> 02:24:53,120
and that is where i'm winding down so

02:24:51,520 --> 02:24:55,680
those are the free resources available

02:24:53,120 --> 02:24:56,479
and how you might go about it um and i

02:24:55,680 --> 02:24:57,840
wanted to

02:24:56,479 --> 02:24:59,680
sort of close out by talking a little

02:24:57,840 --> 02:25:03,200
bit about programming languages here

02:24:59,680 --> 02:25:03,680
um as i mentioned in order to run your

02:25:03,200 --> 02:25:05,520
code

02:25:03,680 --> 02:25:07,280
on an architecture that is not what you

02:25:05,520 --> 02:25:10,720
wrote it for um

02:25:07,280 --> 02:25:14,319
the compiler or interpreter has to run

02:25:10,720 --> 02:25:15,840
on the architecture so if your code is

02:25:14,319 --> 02:25:18,160
compiled something like c or c

02:25:15,840 --> 02:25:19,120
plus plus then the compiler needs to be

02:25:18,160 --> 02:25:21,359
imported

02:25:19,120 --> 02:25:22,880
um if it's interpreted like python or

02:25:21,359 --> 02:25:24,319
node um

02:25:22,880 --> 02:25:26,080
that those interpreters have to be

02:25:24,319 --> 02:25:29,120
written for the architecture

02:25:26,080 --> 02:25:30,880
um in the case of of z like that's

02:25:29,120 --> 02:25:32,160
that's really straightforward most

02:25:30,880 --> 02:25:33,280
programming languages you're going to

02:25:32,160 --> 02:25:37,040
encounter have already been

02:25:33,280 --> 02:25:38,640
ported so that's great um

02:25:37,040 --> 02:25:40,479
but you do need you do need the the

02:25:38,640 --> 02:25:41,439
compiler or interpreter there in order

02:25:40,479 --> 02:25:44,080
for terry ron

02:25:41,439 --> 02:25:45,760
um i also mentioned that it's big endian

02:25:44,080 --> 02:25:48,880
and that gets you

02:25:45,760 --> 02:25:51,760
when you start doing memory specific um

02:25:48,880 --> 02:25:52,080
operations inside of your code um so you

02:25:51,760 --> 02:25:54,000
may

02:25:52,080 --> 02:25:56,720
start running into endian errors which

02:25:54,000 --> 02:25:59,040
is going to be very new for a lot of you

02:25:56,720 --> 02:26:00,560
but i don't see it super often honestly

02:25:59,040 --> 02:26:03,200
unless you're doing really complicated

02:26:00,560 --> 02:26:03,200
data stuff

02:26:04,720 --> 02:26:08,160
but what i will say is that your code

02:26:06,240 --> 02:26:10,240
will probably run um

02:26:08,160 --> 02:26:11,359
like give it a try build it and see if

02:26:10,240 --> 02:26:14,640
it works

02:26:11,359 --> 02:26:16,560
um if not um one of the things that we

02:26:14,640 --> 02:26:18,080
you know that we found because it makes

02:26:16,560 --> 02:26:20,640
sense um is that

02:26:18,080 --> 02:26:22,319
like a higher level language um

02:26:20,640 --> 02:26:24,880
something like node or python

02:26:22,319 --> 02:26:26,479
like those tend to run really well um

02:26:24,880 --> 02:26:27,840
because they don't have as much hardware

02:26:26,479 --> 02:26:29,200
interaction like a lot of that is

02:26:27,840 --> 02:26:31,120
abstracted away

02:26:29,200 --> 02:26:33,040
and that's what it means to be higher

02:26:31,120 --> 02:26:34,960
level um

02:26:33,040 --> 02:26:36,800
uh but lower level languages they do do

02:26:34,960 --> 02:26:37,120
more hardware specific operations so you

02:26:36,800 --> 02:26:38,800
may

02:26:37,120 --> 02:26:40,160
run into some things there with with

02:26:38,800 --> 02:26:41,359
things like the uh

02:26:40,160 --> 02:26:43,280
when you're when you're working with c

02:26:41,359 --> 02:26:45,359
code so it's more likely you'll run

02:26:43,280 --> 02:26:46,960
the endian errors when you're running c

02:26:45,359 --> 02:26:47,520
it's almost unheard of if you're running

02:26:46,960 --> 02:26:50,960
like

02:26:47,520 --> 02:26:52,240
node unless the node app somehow

02:26:50,960 --> 02:26:54,960
interacts with hardware but that's

02:26:52,240 --> 02:26:58,960
incredibly uncommon

02:26:54,960 --> 02:27:01,200
and would be a very specific use case um

02:26:58,960 --> 02:27:02,000
and i like to tell people like when they

02:27:01,200 --> 02:27:03,840
start porting their

02:27:02,000 --> 02:27:05,520
applications when they start moving

02:27:03,840 --> 02:27:06,720
their like node applications over

02:27:05,520 --> 02:27:08,399
they're like oh it's gonna work it's

02:27:06,720 --> 02:27:09,760
gonna be perfect especially people on my

02:27:08,399 --> 02:27:12,000
team who like

02:27:09,760 --> 02:27:12,880
are totally into this and i'm like okay

02:27:12,000 --> 02:27:14,720
in a perfect world

02:27:12,880 --> 02:27:16,800
absolutely yes all these high-level

02:27:14,720 --> 02:27:19,359
language will work flawlessly

02:27:16,800 --> 02:27:20,000
but i will tell you right now that like

02:27:19,359 --> 02:27:22,720
part of

02:27:20,000 --> 02:27:24,319
like a big chunk of the my job when i'm

02:27:22,720 --> 02:27:27,520
working on porting stuff

02:27:24,319 --> 02:27:29,200
is dependencies and what happens here is

02:27:27,520 --> 02:27:30,800
sometimes

02:27:29,200 --> 02:27:32,319
there are dependencies that are outside

02:27:30,800 --> 02:27:33,920
of your control or

02:27:32,319 --> 02:27:36,000
you do have to start building some

02:27:33,920 --> 02:27:38,240
things that haven't been ported yet

02:27:36,000 --> 02:27:39,760
and it's a very good thing i take very

02:27:38,240 --> 02:27:41,439
good notes because i could end up like

02:27:39,760 --> 02:27:43,120
really deep down the rabbit hole like

02:27:41,439 --> 02:27:44,399
why am i building this one thing again

02:27:43,120 --> 02:27:45,359
oh because i need it for this other

02:27:44,399 --> 02:27:46,880
thing so

02:27:45,359 --> 02:27:48,000
that can happen but i said don't let

02:27:46,880 --> 02:27:50,240
that scare you off that's actually kind

02:27:48,000 --> 02:27:52,000
of fun

02:27:50,240 --> 02:27:53,840
and that is where i wanted to conclude

02:27:52,000 --> 02:27:55,520
um so i think we have a couple minutes

02:27:53,840 --> 02:28:00,160
for questions if we have any

02:27:55,520 --> 02:28:00,160
um but thank you so much for coming um

02:28:00,240 --> 02:28:04,000
we have some time for a couple of

02:28:02,000 --> 02:28:07,040
questions the first question

02:28:04,000 --> 02:28:09,040
goes like this at the open source plus

02:28:07,040 --> 02:28:09,520
libreoffice conference there was a talk

02:28:09,040 --> 02:28:13,280
about

02:28:09,520 --> 02:28:16,479
malaysians containers etc youtube link

02:28:13,280 --> 02:28:19,040
one of the points brought up that

02:28:16,479 --> 02:28:19,760
was brought up was about having smaller

02:28:19,040 --> 02:28:23,200
hardware of

02:28:19,760 --> 02:28:25,040
s390 is to run in consideration from ibm

02:28:23,200 --> 02:28:26,960
on lowering the barrier to entry

02:28:25,040 --> 02:28:28,720
alternative to the open main brain

02:28:26,960 --> 02:28:30,399
project

02:28:28,720 --> 02:28:31,920
that is a great question and i don't

02:28:30,399 --> 02:28:34,479
know

02:28:31,920 --> 02:28:35,040
i mean i really wish there was um

02:28:34,479 --> 02:28:37,040
because

02:28:35,040 --> 02:28:38,640
like like we've been talking we talk

02:28:37,040 --> 02:28:40,640
about it like even internally like we

02:28:38,640 --> 02:28:42,000
want a baby mainframe

02:28:40,640 --> 02:28:43,680
we want just like a little tiny

02:28:42,000 --> 02:28:44,399
development box that we can just play

02:28:43,680 --> 02:28:46,000
around with

02:28:44,399 --> 02:28:48,080
and it comes up in the community often

02:28:46,000 --> 02:28:49,920
too but unfortunately that's not

02:28:48,080 --> 02:28:52,080
i don't i don't have insight into any of

02:28:49,920 --> 02:28:52,640
that i don't know um but yeah i really

02:28:52,080 --> 02:28:56,240
wish

02:28:52,640 --> 02:28:56,240
we could just get a baby mainframe

02:28:57,040 --> 02:29:01,680
and the next question is what kinds of

02:28:59,680 --> 02:29:05,280
applications are mainframes

02:29:01,680 --> 02:29:06,960
bad for so

02:29:05,280 --> 02:29:08,880
i mentioned like what they're good for

02:29:06,960 --> 02:29:11,200
is a lot of data driven stuff um

02:29:08,880 --> 02:29:14,080
if you're if your app like if your world

02:29:11,200 --> 02:29:15,439
is just like hosting a web front end

02:29:14,080 --> 02:29:17,920
and you're not dealing with a lot of

02:29:15,439 --> 02:29:19,760
data stuff like if you're really just

02:29:17,920 --> 02:29:20,960
um pulling from different back ends that

02:29:19,760 --> 02:29:22,319
have nothing to do with

02:29:20,960 --> 02:29:23,600
with data if you're showing a lot of

02:29:22,319 --> 02:29:25,280
things like i wouldn't recommend it to

02:29:23,600 --> 02:29:28,000
your standard just like

02:29:25,280 --> 02:29:30,479
app based startup like mainframe is not

02:29:28,000 --> 02:29:32,080
not really appropriate for everyone like

02:29:30,479 --> 02:29:34,000
if you really are doing data and you

02:29:32,080 --> 02:29:35,680
need it to be reliable um like i think

02:29:34,000 --> 02:29:36,000
of social media like youtube went down

02:29:35,680 --> 02:29:38,080
the other

02:29:36,000 --> 02:29:39,760
day like the world is not going to grind

02:29:38,080 --> 02:29:41,439
to a halt

02:29:39,760 --> 02:29:42,880
um and they're not really doing they're

02:29:41,439 --> 02:29:45,600
doing big

02:29:42,880 --> 02:29:46,399
files but not like i mean just because

02:29:45,600 --> 02:29:48,000
of the

02:29:46,399 --> 02:29:49,680
the amount of stuff they're doing it is

02:29:48,000 --> 02:29:50,399
it is actually really like a lot of data

02:29:49,680 --> 02:29:51,680
but

02:29:50,399 --> 02:29:54,479
that's sort of an artifact of what

02:29:51,680 --> 02:29:56,399
they're doing rather than the intent um

02:29:54,479 --> 02:29:57,680
but yeah like if you're just running a

02:29:56,399 --> 02:29:59,120
web app or if you're running an app on

02:29:57,680 --> 02:30:00,560
the phone like for the most part those

02:29:59,120 --> 02:30:02,080
are not gonna be

02:30:00,560 --> 02:30:04,160
great for the platform it's just it's

02:30:02,080 --> 02:30:05,120
gonna be a waste but if you are doing a

02:30:04,160 --> 02:30:08,399
lot of data or

02:30:05,120 --> 02:30:10,160
data crunching yeah

02:30:08,399 --> 02:30:12,240
and that was all the questions we have

02:30:10,160 --> 02:30:14,560
time for you still have two questions

02:30:12,240 --> 02:30:16,960
left in the shared belt so you can

02:30:14,560 --> 02:30:16,960
answer

02:30:17,600 --> 02:30:19,920
thank you

02:30:21,359 --> 02:30:26,560
thank you so very much elizabeth i hope

02:30:24,720 --> 02:30:28,160
everyone enjoyed your presentation as

02:30:26,560 --> 02:30:32,000
much as i have

02:30:28,160 --> 02:30:34,800
um as luna had mentioned there are still

02:30:32,000 --> 02:30:37,280
some questions in the shared notes and

02:30:34,800 --> 02:30:40,319
if you'd like to type in some responses

02:30:37,280 --> 02:30:40,800
please do so in the meantime we are

02:30:40,319 --> 02:30:43,840
taking

02:30:40,800 --> 02:30:47,040
a brief recess and will return

02:30:43,840 --> 02:30:51,920
will return five minutes after the hour

02:30:47,040 --> 02:30:51,920
with app image packaging using app image

02:30:58,840 --> 02:31:01,840
builder

02:38:35,840 --> 02:38:42,399
hello everyone and welcome back

02:38:39,280 --> 02:38:45,840
um our next talk will be about app image

02:38:42,399 --> 02:38:49,520
and i'm pleased to welcome

02:38:45,840 --> 02:38:49,520
sorry if i say your name incorrectly

02:38:51,600 --> 02:38:59,439
alexis to the stage

02:38:57,200 --> 02:39:01,920
hello ellison thank you yes it was

02:38:59,439 --> 02:39:01,920
correctly

02:39:04,720 --> 02:39:09,359
let me share my webcam can you hear me

02:39:07,280 --> 02:39:11,840
properly

02:39:09,359 --> 02:39:11,840
yes

02:39:14,080 --> 02:39:17,280
we can hear you just fine

02:39:22,720 --> 02:39:25,840
hello everyone

02:39:27,280 --> 02:39:31,680
okay let's start hello everyone my name

02:39:31,359 --> 02:39:35,359
is

02:39:31,680 --> 02:39:36,800
lex lopez vieta i work as developer of

02:39:35,359 --> 02:39:40,720
the happy match project

02:39:36,800 --> 02:39:44,560
i've been a contributor for about like

02:39:40,720 --> 02:39:47,680
three years and i will be talking about

02:39:44,560 --> 02:39:51,280
app images in general and how to make

02:39:47,680 --> 02:39:55,280
them using app image build

02:39:51,280 --> 02:39:58,720
uh let's proceed

02:39:55,280 --> 02:39:59,920
appimatch has uh two main design

02:39:58,720 --> 02:40:02,399
premises

02:39:59,920 --> 02:40:04,000
from the user point of view they have to

02:40:02,399 --> 02:40:07,200
be easy to

02:40:04,000 --> 02:40:07,760
that to acquire and to run just like we

02:40:07,200 --> 02:40:11,200
do with

02:40:07,760 --> 02:40:15,040
a windows or a mac application

02:40:11,200 --> 02:40:18,720
and from the developer point of view

02:40:15,040 --> 02:40:22,640
the application should be able to run

02:40:18,720 --> 02:40:25,840
in almost every no linux distribution

02:40:22,640 --> 02:40:30,479
not i'm not having to make a package

02:40:25,840 --> 02:40:34,479
for every single linux distribution

02:40:30,479 --> 02:40:37,760
now an app image has this structure

02:40:34,479 --> 02:40:40,800
it's a a main executable

02:40:37,760 --> 02:40:44,080
and a compressed a

02:40:40,800 --> 02:40:47,680
directory this executable will

02:40:44,080 --> 02:40:51,760
mount the directory is infused

02:40:47,680 --> 02:40:55,279
and we run the app inside this

02:40:51,760 --> 02:40:58,479
the the payload as we call it

02:40:55,279 --> 02:41:01,760
is a red only image containing

02:40:58,479 --> 02:41:04,720
the binaries that are and

02:41:01,760 --> 02:41:07,600
all the other resources that it might

02:41:04,720 --> 02:41:07,600
require to run

02:41:09,600 --> 02:41:14,160
an app image it's all batteries in

02:41:12,399 --> 02:41:17,120
includes all the batteries and

02:41:14,160 --> 02:41:17,760
all that stuff that an application might

02:41:17,120 --> 02:41:20,800
require

02:41:17,760 --> 02:41:23,680
to run it it's has

02:41:20,800 --> 02:41:25,120
very few external dependencies only a

02:41:23,680 --> 02:41:28,960
few graphical

02:41:25,120 --> 02:41:32,399
libraries ssl and other libraries

02:41:28,960 --> 02:41:36,000
that are that might come

02:41:32,399 --> 02:41:39,040
in almost every linux distribution

02:41:36,000 --> 02:41:42,880
some kind of app images

02:41:39,040 --> 02:41:46,160
includes more dependencies than others

02:41:42,880 --> 02:41:49,439
i app image builder is one of

02:41:46,160 --> 02:41:52,640
is one of the tools that include most

02:41:49,439 --> 02:41:54,720
things why we got because we are looking

02:41:52,640 --> 02:41:56,960
for a maximum portability

02:41:54,720 --> 02:41:59,840
and of course no installation would be

02:41:56,960 --> 02:41:59,840
required

02:42:01,279 --> 02:42:06,560
okay excellent okay

02:42:04,399 --> 02:42:08,880
app image builder average builder is a

02:42:06,560 --> 02:42:12,479
new tool for creating app images

02:42:08,880 --> 02:42:16,000
it is based recipient

02:42:12,479 --> 02:42:19,040
has as assisted recipe generation

02:42:16,000 --> 02:42:22,399
is the resulting of images will be

02:42:19,040 --> 02:42:26,479
backward and forward compatible and

02:42:22,399 --> 02:42:27,040
also can be created in modern systems

02:42:26,479 --> 02:42:29,920
unlike

02:42:27,040 --> 02:42:30,960
other existing tools for creating app

02:42:29,920 --> 02:42:33,760
images

02:42:30,960 --> 02:42:34,640
also it has the ability of patching

02:42:33,760 --> 02:42:38,560
fixed

02:42:34,640 --> 02:42:41,120
fixed path at wrong time which means

02:42:38,560 --> 02:42:43,359
as a developer you have control over

02:42:41,120 --> 02:42:45,040
your application but you don't have

02:42:43,359 --> 02:42:46,399
control over your application

02:42:45,040 --> 02:42:49,439
dependencies

02:42:46,399 --> 02:42:50,880
if a dependency has a fixed path that

02:42:49,439 --> 02:42:54,560
cannot

02:42:50,880 --> 02:42:57,520
be changed at wrong time you're

02:42:54,560 --> 02:42:58,080
you will have a hard time like creating

02:42:57,520 --> 02:43:00,720
an

02:42:58,080 --> 02:43:01,359
app image of it now with the image

02:43:00,720 --> 02:43:04,479
builder

02:43:01,359 --> 02:43:04,479
this is solved

02:43:05,200 --> 02:43:12,479
okay next slide

02:43:09,200 --> 02:43:13,120
okay the app image builder has a new

02:43:12,479 --> 02:43:16,319
payload

02:43:13,120 --> 02:43:19,600
structure with it provides a custom

02:43:16,319 --> 02:43:20,319
entry point named abram it embeds let's

02:43:19,600 --> 02:43:23,439
say

02:43:20,319 --> 02:43:27,200
g libsy ld linux

02:43:23,439 --> 02:43:31,279
and also at runtime

02:43:27,200 --> 02:43:34,399
it compares the version of the

02:43:31,279 --> 02:43:36,080
glypc embed in your app image and the

02:43:34,399 --> 02:43:39,680
one running in your system

02:43:36,080 --> 02:43:44,080
and picks the newer one to run the whole

02:43:39,680 --> 02:43:47,359
application also it has run time hacks

02:43:44,080 --> 02:43:50,800
this hux provides the path

02:43:47,359 --> 02:43:54,240
intersection ability and also allows

02:43:50,800 --> 02:43:57,439
to keep the runtime environment

02:43:54,240 --> 02:43:59,279
of your bundle confine it this is not

02:43:57,439 --> 02:44:02,560
sandboxing this is just

02:43:59,279 --> 02:44:05,359
uh for a avoiding

02:44:02,560 --> 02:44:05,840
that the runtime of your bundles get

02:44:05,359 --> 02:44:09,680
mixed

02:44:05,840 --> 02:44:13,200
with your system or another application

02:44:09,680 --> 02:44:16,720
from runtimes and libraries

02:44:13,200 --> 02:44:19,840
okay now let's

02:44:16,720 --> 02:44:20,319
i would like to show you more how to do

02:44:19,840 --> 02:44:23,680
it

02:44:20,319 --> 02:44:26,880
with a a functional example

02:44:23,680 --> 02:44:31,439
in this case i'm going to be packaging

02:44:26,880 --> 02:44:35,600
non calculator and share my screen

02:44:31,439 --> 02:44:35,600
right now okay

02:44:36,640 --> 02:44:42,960
can you see it okay the first thing

02:44:39,680 --> 02:44:49,120
is to of course get the sources i

02:44:42,960 --> 02:44:52,160
will be building non-calculator 3.30.0

02:44:49,120 --> 02:44:52,160
and so

02:44:52,640 --> 02:44:56,399
once you you have the sources you have

02:44:55,600 --> 02:45:00,479
to build it

02:44:56,399 --> 02:45:02,640
and install it to adapter

02:45:00,479 --> 02:45:04,640
the update will be the starting point

02:45:02,640 --> 02:45:07,680
for creating or app image

02:45:04,640 --> 02:45:11,520
and will be what the the

02:45:07,680 --> 02:45:14,880
content of the final bundle first we're

02:45:11,520 --> 02:45:18,080
deploying our application

02:45:14,880 --> 02:45:21,120
uh binaries and resources notice

02:45:18,080 --> 02:45:24,560
that it's important that

02:45:21,120 --> 02:45:28,160
things like the desktop file and

02:45:24,560 --> 02:45:30,960
icons gets deployed into

02:45:28,160 --> 02:45:30,960
the app tier

02:45:34,000 --> 02:45:39,200
like this this desktop file will be used

02:45:37,200 --> 02:45:43,040
by the app image builder

02:45:39,200 --> 02:45:46,640
to properly generate the recipe

02:45:43,040 --> 02:45:50,160
now the second step is to make sure that

02:45:46,640 --> 02:45:53,840
our application runs in the case of

02:45:50,160 --> 02:45:57,600
non calculator it requires it has a

02:45:53,840 --> 02:45:59,840
a glitch schema schemas that need to be

02:45:57,600 --> 02:46:03,439
compiled we're going to do that

02:45:59,840 --> 02:46:06,880
and we are going to try our

02:46:03,439 --> 02:46:10,720
application okay

02:46:06,880 --> 02:46:14,640
now it's running

02:46:10,720 --> 02:46:18,800
let me share it again

02:46:14,640 --> 02:46:18,800
okay okay we have the

02:46:19,120 --> 02:46:25,600
the calculator application running

02:46:22,560 --> 02:46:27,120
once we have the application running in

02:46:25,600 --> 02:46:30,399
our development system

02:46:27,120 --> 02:46:33,279
we proceed to er

02:46:30,399 --> 02:46:34,399
generate the recipe using app image

02:46:33,279 --> 02:46:37,439
builder

02:46:34,399 --> 02:46:39,279
if we use some environment variable

02:46:37,439 --> 02:46:40,960
like to run our application we will have

02:46:39,279 --> 02:46:45,120
to use it also

02:46:40,960 --> 02:46:47,680
with app image builder as it runs

02:46:45,120 --> 02:46:50,399
the application in order to resolve

02:46:47,680 --> 02:46:53,840
dependencies

02:46:50,399 --> 02:46:53,840
we use the generate

02:46:56,399 --> 02:47:04,080
a feature of image builder

02:47:00,240 --> 02:47:04,479
this will look for our desktop entry and

02:47:04,080 --> 02:47:07,040
will

02:47:04,479 --> 02:47:07,600
read the application information from it

02:47:07,040 --> 02:47:11,120
like the

02:47:07,600 --> 02:47:14,960
id application id name icon

02:47:11,120 --> 02:47:18,160
version the main executable

02:47:14,960 --> 02:47:21,840
and arguments that will require also

02:47:18,160 --> 02:47:22,399
it will ask us for the architecture of

02:47:21,840 --> 02:47:25,920
the

02:47:22,399 --> 02:47:25,920
final bundle binary

02:47:26,240 --> 02:47:31,279
the application is now running

02:47:29,359 --> 02:47:33,040
it is important that when the

02:47:31,279 --> 02:47:35,840
application is running

02:47:33,040 --> 02:47:35,840
you

02:47:36,080 --> 02:47:42,080
use almost and try almost every

02:47:39,520 --> 02:47:43,520
feature of the application why this

02:47:42,080 --> 02:47:47,120
application is being

02:47:43,520 --> 02:47:52,319
run with s trays

02:47:47,120 --> 02:47:52,319
and ld the back libs in order to

02:47:52,720 --> 02:47:56,640
discover which binaries and libraries

02:47:55,439 --> 02:47:59,600
and resources

02:47:56,640 --> 02:48:00,720
are being loaded at prone time so if you

02:47:59,600 --> 02:48:03,760
use

02:48:00,720 --> 02:48:06,960
you should like try almost every

02:48:03,760 --> 02:48:09,600
plugin and feature in order

02:48:06,960 --> 02:48:10,880
for them to be loaded in memory and to

02:48:09,600 --> 02:48:14,240
be discovered

02:48:10,880 --> 02:48:17,920
by the generate tool

02:48:14,240 --> 02:48:18,880
in this case uh the calculator

02:48:17,920 --> 02:48:22,080
application is

02:48:18,880 --> 02:48:25,120
quite simple so it's fine

02:48:22,080 --> 02:48:28,840
to do it so far

02:48:25,120 --> 02:48:31,600
okay now let's go back to the

02:48:28,840 --> 02:48:34,720
terminal and

02:48:31,600 --> 02:48:37,840
add a recipe and

02:48:34,720 --> 02:48:42,160
abby mush builder file was

02:48:37,840 --> 02:48:42,160
created let's take a look at it

02:48:42,640 --> 02:48:47,520
in this file we will find all the

02:48:45,600 --> 02:48:49,920
application information that

02:48:47,520 --> 02:48:51,040
we were prompted for the runtime

02:48:49,920 --> 02:48:54,160
configuration

02:48:51,040 --> 02:48:55,040
this is these are the library paths that

02:48:54,160 --> 02:48:58,240
will be

02:48:55,040 --> 02:49:01,760
used by our application and

02:48:58,240 --> 02:49:05,600
will be also information about

02:49:01,760 --> 02:49:09,200
the apt sources configured

02:49:05,600 --> 02:49:12,160
in our system in this case

02:49:09,200 --> 02:49:12,800
for the final recipe i will not need

02:49:12,160 --> 02:49:16,720
another

02:49:12,800 --> 02:49:20,160
docker no yes code

02:49:16,720 --> 02:49:23,200
also i will not need steam

02:49:20,160 --> 02:49:27,040
nor note it is important that

02:49:23,200 --> 02:49:31,359
for the final a recipe you

02:49:27,040 --> 02:49:33,760
remove the although unauthenticated

02:49:31,359 --> 02:49:35,760
sources as this might be like a source

02:49:33,760 --> 02:49:39,520
of or

02:49:35,760 --> 02:49:42,880
but software get into your

02:49:39,520 --> 02:49:46,000
final bundle i'm

02:49:42,880 --> 02:49:49,120
leaving you instead you should like

02:49:46,000 --> 02:49:53,359
add something like

02:49:49,120 --> 02:49:56,640
t url and i put there the

02:49:53,359 --> 02:50:01,120
the your the urls of the different

02:49:56,640 --> 02:50:03,439
repositories so let's

02:50:01,120 --> 02:50:04,800
below you will find a list of the

02:50:03,439 --> 02:50:08,080
dependencies that

02:50:04,800 --> 02:50:11,359
image builder generate found

02:50:08,080 --> 02:50:15,120
basically is because the as i'm running

02:50:11,359 --> 02:50:18,080
kde neon it says that kde conflict

02:50:15,120 --> 02:50:19,120
gtk style is a dependency if you build

02:50:18,080 --> 02:50:22,000
this package

02:50:19,120 --> 02:50:22,800
in uh normally probably this will not be

02:50:22,000 --> 02:50:26,399
part

02:50:22,800 --> 02:50:27,279
of your recipe and you can like safely

02:50:26,399 --> 02:50:30,720
remove it

02:50:27,279 --> 02:50:34,640
in this case i'm leaving it as it pulls

02:50:30,720 --> 02:50:38,319
other dependencies like the gtk

02:50:34,640 --> 02:50:42,960
3 and everything gets pulled from there

02:50:38,319 --> 02:50:46,000
so i'm leaving it there for the moment

02:50:42,960 --> 02:50:48,880
the exclude list can be used like to

02:50:46,000 --> 02:50:52,000
opt out in some packages that you might

02:50:48,880 --> 02:50:55,120
not want in your final bundle

02:50:52,000 --> 02:50:58,160
are also the files and this part

02:50:55,120 --> 02:51:01,760
is one of the most interesting

02:50:58,160 --> 02:51:02,640
app image builder will run the final

02:51:01,760 --> 02:51:05,840
bundle in

02:51:02,640 --> 02:51:09,120
different environments in this case

02:51:05,840 --> 02:51:12,560
you will run it on fedora deviant

02:51:09,120 --> 02:51:13,200
arch sentence and ubuntu this will give

02:51:12,560 --> 02:51:16,960
you

02:51:13,200 --> 02:51:20,319
like a certainty that our final bundle

02:51:16,960 --> 02:51:23,359
will run in those target systems

02:51:20,319 --> 02:51:26,800
it is super important like to

02:51:23,359 --> 02:51:29,840
try as much as you possible as

02:51:26,800 --> 02:51:30,800
because no linux distribution change a

02:51:29,840 --> 02:51:33,680
lot

02:51:30,800 --> 02:51:34,880
library names might change a lot of

02:51:33,680 --> 02:51:37,120
things might change

02:51:34,880 --> 02:51:39,120
from one distribution to another so

02:51:37,120 --> 02:51:42,160
always test

02:51:39,120 --> 02:51:45,439
okay so far this recipe

02:51:42,160 --> 02:51:49,680
should be good to to build so i'm

02:51:45,439 --> 02:51:49,680
saving it and running up image build

02:51:51,600 --> 02:51:54,960
okay the first thing that an image

02:51:54,000 --> 02:51:58,640
builder will do

02:51:54,960 --> 02:52:02,479
is like update the the

02:51:58,640 --> 02:52:06,720
apd sources and then it will

02:52:02,479 --> 02:52:10,319
download all the required packages

02:52:06,720 --> 02:52:12,840
and will deploy them into the app your

02:52:10,319 --> 02:52:15,040
extreme

02:52:12,840 --> 02:52:18,880
scene

02:52:15,040 --> 02:52:21,840
okay let's give it some time

02:52:18,880 --> 02:52:22,880
after the all the binaries are on are

02:52:21,840 --> 02:52:25,920
deployed

02:52:22,880 --> 02:52:28,960
it configures the application runtime

02:52:25,920 --> 02:52:32,720
this is basically it sets

02:52:28,960 --> 02:52:36,960
a custom a

02:52:32,720 --> 02:52:40,720
interpreter path for every

02:52:36,960 --> 02:52:43,840
binary in the in the bundle

02:52:40,720 --> 02:52:47,439
this path will be used to be able to

02:52:43,840 --> 02:52:52,240
switch at runtime which glibc

02:52:47,439 --> 02:52:52,240
and ld linux will be used

02:52:52,720 --> 02:53:00,080
also it sets configuration for qt

02:52:55,840 --> 02:53:03,279
as as we are building in a

02:53:00,080 --> 02:53:04,319
kde based environment some qd might have

02:53:03,279 --> 02:53:07,359
slid

02:53:04,319 --> 02:53:10,800
into the bundle sets the

02:53:07,359 --> 02:53:14,319
jdk configuration and

02:53:10,800 --> 02:53:17,520
other things now it is running

02:53:14,319 --> 02:53:24,399
the the application in

02:53:17,520 --> 02:53:26,800
fedora i will show you

02:53:24,399 --> 02:53:26,800
okay

02:53:28,319 --> 02:53:32,800
this is the application running on a

02:53:30,640 --> 02:53:36,399
docker container

02:53:32,800 --> 02:53:39,120
of fedora i'm going now

02:53:36,399 --> 02:53:39,760
it's it will run it on the next one this

02:53:39,120 --> 02:53:42,479
is

02:53:39,760 --> 02:53:43,600
deviant you might see that the icons and

02:53:42,479 --> 02:53:46,399
the fonts

02:53:43,600 --> 02:53:46,720
may change from one system to other as

02:53:46,399 --> 02:53:50,840
it

02:53:46,720 --> 02:53:53,840
adapts to the system a

02:53:50,840 --> 02:53:53,840
team

02:53:54,000 --> 02:54:03,600
now it's arch knowledge maybe

02:53:58,640 --> 02:54:03,600
arch doesn't have that icon in the team

02:54:04,319 --> 02:54:09,680
and sent us okay

02:54:10,640 --> 02:54:18,640
next and finally event

02:54:14,560 --> 02:54:23,040
okay now we're sure that our application

02:54:18,640 --> 02:54:27,120
runs on all our target systems

02:54:23,040 --> 02:54:31,040
and the the build proceeds to create

02:54:27,120 --> 02:54:34,160
the final bundle

02:54:31,040 --> 02:54:34,160
which will be named

02:54:35,600 --> 02:54:42,399
this bundle is ready to be shipped

02:54:38,800 --> 02:54:45,200
as it is as you may see

02:54:42,399 --> 02:54:47,439
i well you should not see it too much

02:54:45,200 --> 02:54:50,720
there

02:54:47,439 --> 02:54:55,120
okay no you don't now you do

02:54:50,720 --> 02:54:57,600
so this is the our final bundle

02:54:55,120 --> 02:54:57,600
it is

02:54:58,960 --> 02:55:05,600
it is quite big and

02:55:02,160 --> 02:55:05,600
now we will see why

02:55:07,120 --> 02:55:14,080
if we go into the adapter and

02:55:10,399 --> 02:55:17,359
check the font gml file we can see

02:55:14,080 --> 02:55:20,240
which packages ended inside

02:55:17,359 --> 02:55:22,160
the bundle in this case we are bundling

02:55:20,240 --> 02:55:25,200
a whole icon

02:55:22,160 --> 02:55:28,880
out with that with a white chat

02:55:25,200 --> 02:55:32,000
well how do you say that probably can be

02:55:28,880 --> 02:55:35,600
opt out we are also

02:55:32,000 --> 02:55:38,880
oh actually we are bundling three icons

02:55:35,600 --> 02:55:41,520
teams this happened because of the

02:55:38,880 --> 02:55:42,080
apg dependencies all of them are being

02:55:41,520 --> 02:55:44,160
followed

02:55:42,080 --> 02:55:46,399
inside the bundle now you have to like

02:55:44,160 --> 02:55:49,680
to manually opt out

02:55:46,399 --> 02:55:52,880
the things that you consider that can be

02:55:49,680 --> 02:55:59,840
excluded to do the so

02:55:52,880 --> 02:55:59,840
we are going to

02:56:00,560 --> 02:56:05,840
we are going to use the exclude section

02:56:09,760 --> 02:56:12,160
okay

02:56:24,840 --> 02:56:29,040
and the quantity like i'm saying

02:56:30,800 --> 02:56:34,000
okay okay okay

02:56:34,319 --> 02:56:42,560
i probably can't remove the whole

02:56:38,319 --> 02:56:42,560
key f5 stuff on

02:56:42,960 --> 02:56:50,080
on a lot of cutie

02:56:46,479 --> 02:56:52,399
but if i remove this one

02:56:50,080 --> 02:56:54,479
probably if i remove this one from the

02:56:52,399 --> 02:56:58,160
include list

02:56:54,479 --> 02:57:02,080
i will not get the dependencies

02:56:58,160 --> 02:57:06,720
included so i might need to

02:57:02,080 --> 02:57:06,720
do something like this so

02:57:06,960 --> 02:57:14,479
uh okay okay i can't i contend

02:57:11,439 --> 02:57:17,520
um instead of

02:57:14,479 --> 02:57:21,040
like this depends on a lot of

02:57:17,520 --> 02:57:25,120
stuff that's why our bundle is so

02:57:21,040 --> 02:57:28,399
big would probably

02:57:25,120 --> 02:57:31,680
you only probably need this

02:57:28,399 --> 02:57:32,160
section of the dependencies and not the

02:57:31,680 --> 02:57:37,840
whole

02:57:32,160 --> 02:57:37,840
kf5 stuff let's give it a try

02:57:42,240 --> 02:57:47,359
notice that you can like do this in

02:57:45,359 --> 02:57:50,960
order to

02:57:47,359 --> 02:57:54,240
force a given package version so

02:57:50,960 --> 02:57:58,080
those entries are fully passed

02:57:54,240 --> 02:58:00,880
to a to apt installed you can

02:57:58,080 --> 02:58:00,880
also do this

02:58:01,359 --> 02:58:06,160
in order to enforce attackers from a

02:58:04,319 --> 02:58:08,800
different

02:58:06,160 --> 02:58:09,600
architecture to be bundled just make

02:58:08,800 --> 02:58:13,120
sure that you

02:58:09,600 --> 02:58:16,960
allow you add this

02:58:13,120 --> 02:58:16,960
architecture in your source lines

02:58:17,040 --> 02:58:20,399
but in order to make your your recipe

02:58:19,359 --> 02:58:23,520
like more

02:58:20,399 --> 02:58:27,439
versatile or more compatible

02:58:23,520 --> 02:58:27,439
we will not enforcing any

02:58:27,680 --> 02:58:34,640
dependencies okay

02:58:30,800 --> 02:58:37,680
let's sorry let's give it another try

02:58:34,640 --> 02:58:41,680
it is always a good idea to

02:58:37,680 --> 02:58:45,120
start fresh when

02:58:41,680 --> 02:58:48,880
making an image because

02:58:45,120 --> 02:58:51,359
it may affect the execution

02:58:48,880 --> 02:58:53,120
there one previous execution of the

02:58:51,359 --> 02:58:57,279
image builder can affect

02:58:53,120 --> 02:59:00,479
the next one so all this is a good idea

02:58:57,279 --> 02:59:03,520
like to start fresh and to be sure that

02:59:00,479 --> 02:59:07,760
no but no

02:59:03,520 --> 02:59:07,760
things from the previous

02:59:08,000 --> 02:59:17,200
iteration gets into

02:59:11,439 --> 02:59:17,200
no okay my recipe is probably

02:59:18,960 --> 02:59:23,200
it's probably wrong

02:59:24,080 --> 02:59:26,319
okay

02:59:27,520 --> 02:59:31,200
yeah let's see

02:59:33,040 --> 02:59:35,279
okay

02:59:36,160 --> 02:59:38,640
there we go

02:59:39,279 --> 02:59:42,479
now we'll run everything again and it

02:59:41,920 --> 02:59:46,460
should

02:59:42,479 --> 02:59:47,840
opt out the packages with without

02:59:46,460 --> 02:59:51,760
[Applause]

02:59:47,840 --> 02:59:57,840
and the final bundle

02:59:51,760 --> 02:59:57,840
should be smaller

03:00:00,960 --> 03:00:08,319
okay it's against generating everything

03:00:05,600 --> 03:00:09,359
sorry for the time it takes a bit of

03:00:08,319 --> 03:00:12,080
time to build

03:00:09,359 --> 03:00:12,720
even a simple application now it's

03:00:12,080 --> 03:00:15,359
running

03:00:12,720 --> 03:00:15,359
fedora

03:00:17,680 --> 03:00:25,040
all the test cases

03:00:21,040 --> 03:00:27,760
are being run

03:00:25,040 --> 03:00:27,760
i'm getting the

03:00:35,520 --> 03:00:39,840
now the application is being built

03:00:40,880 --> 03:00:47,040
and we remove a few megabytes if

03:00:44,000 --> 03:00:53,840
we can keep doing this process we can

03:00:47,040 --> 03:00:53,840
like remove a lot of more

03:00:54,960 --> 03:01:02,640
a lot more like pocket and

03:00:59,279 --> 03:01:06,000
we are still someone is still pulling

03:01:02,640 --> 03:01:09,200
the kf5 so we will need like

03:01:06,000 --> 03:01:12,800
to do this a few times or more or use

03:01:09,200 --> 03:01:16,720
like a pure like virtual machine

03:01:12,800 --> 03:01:20,080
machine to to get like less dependencies

03:01:16,720 --> 03:01:23,520
bullets by default

03:01:20,080 --> 03:01:25,840
but so far this is uh

03:01:23,520 --> 03:01:28,000
how up image builder creates an app

03:01:25,840 --> 03:01:28,880
image as you can see there is also the

03:01:28,000 --> 03:01:32,160
sources that

03:01:28,880 --> 03:01:34,880
were used to create the bundle so you

03:01:32,160 --> 03:01:38,800
might like try to reproduce

03:01:34,880 --> 03:01:42,080
uh define the final bundle

03:01:38,800 --> 03:01:44,319
and this is also important dependencies

03:01:42,080 --> 03:01:46,000
what are those dependencies those are

03:01:44,319 --> 03:01:48,560
the libraries that

03:01:46,000 --> 03:01:49,680
are required to be installed in a system

03:01:48,560 --> 03:01:52,720
for the

03:01:49,680 --> 03:01:53,680
bundle to run basically you will find

03:01:52,720 --> 03:01:56,800
that

03:01:53,680 --> 03:02:01,680
things like x leave xcv

03:01:56,800 --> 03:02:06,560
and the gl

03:02:01,680 --> 03:02:08,960
dl font config and others liquid

03:02:06,560 --> 03:02:09,760
and others are required those are

03:02:08,960 --> 03:02:13,600
usually in

03:02:09,760 --> 03:02:16,720
every system so er expected to

03:02:13,600 --> 03:02:20,160
to run this kind of bundle

03:02:16,720 --> 03:02:24,880
those include much more

03:02:20,160 --> 03:02:27,120
stuff that traditional bundles

03:02:24,880 --> 03:02:27,120
so

03:02:28,840 --> 03:02:31,840
um

03:02:34,750 --> 03:02:41,120
[Music]

03:02:36,880 --> 03:02:46,080
sorry but what means that some critical

03:02:41,120 --> 03:02:49,680
uh software might slip in to the

03:02:46,080 --> 03:02:50,800
to the application so it's recommended

03:02:49,680 --> 03:02:54,160
for you to

03:02:50,800 --> 03:02:57,040
recreate the the packages and the bundle

03:02:54,160 --> 03:02:58,000
every time like a security patch it's

03:02:57,040 --> 03:03:00,640
release it

03:02:58,000 --> 03:03:02,160
so you will you should publish your

03:03:00,640 --> 03:03:05,200
application

03:03:02,160 --> 03:03:06,240
the first place to go is your web or

03:03:05,200 --> 03:03:09,680
repository

03:03:06,240 --> 03:03:13,600
at github gitlab there's where app image

03:03:09,680 --> 03:03:16,080
file should live also you can like

03:03:13,600 --> 03:03:17,520
add them to to the existing list

03:03:16,080 --> 03:03:21,000
listings

03:03:17,520 --> 03:03:22,720
which are app image hub and

03:03:21,000 --> 03:03:25,520
advanced.github.io

03:03:22,720 --> 03:03:26,080
you can like add your software to those

03:03:25,520 --> 03:03:29,439
listings

03:03:26,080 --> 03:03:33,279
they can be reached and found by

03:03:29,439 --> 03:03:36,399
users okay

03:03:33,279 --> 03:03:39,520
some reference projects that keep get

03:03:36,399 --> 03:03:40,479
can be useful like to check how others

03:03:39,520 --> 03:03:43,840
are using

03:03:40,479 --> 03:03:47,040
this tool and what are they doing

03:03:43,840 --> 03:03:47,680
um this the first reference is the maui

03:03:47,040 --> 03:03:50,800
builds

03:03:47,680 --> 03:03:52,399
project this is super interesting it's

03:03:50,800 --> 03:03:56,319
made on jeep black

03:03:52,399 --> 03:04:00,479
it native emt 64 builds

03:03:56,319 --> 03:04:04,720
it and it also cross compiled for erm 64

03:04:00,479 --> 03:04:08,080
and builds an android ap android apks

03:04:04,720 --> 03:04:11,439
so this is one of the most like complex

03:04:08,080 --> 03:04:14,960
but also powerful configuration for

03:04:11,439 --> 03:04:17,439
like if you're having a project to

03:04:14,960 --> 03:04:19,439
chip it and build it for many different

03:04:17,439 --> 03:04:22,720
platforms

03:04:19,439 --> 03:04:26,000
also there is this mystic

03:04:22,720 --> 03:04:29,359
video converter tool seal is

03:04:26,000 --> 03:04:32,880
also using uh a bimatch builder

03:04:29,359 --> 03:04:33,520
cut there is a k stars pull request for

03:04:32,880 --> 03:04:35,279
using

03:04:33,520 --> 03:04:36,960
for building up image using up image

03:04:35,279 --> 03:04:40,160
builder and a

03:04:36,960 --> 03:04:43,600
g concrete or recipe

03:04:40,160 --> 03:04:46,399
also so

03:04:43,600 --> 03:04:47,920
about the easy issues i was talking

03:04:46,399 --> 03:04:51,439
about

03:04:47,920 --> 03:04:54,800
bundled everything as it said has

03:04:51,439 --> 03:04:57,359
an important security issue

03:04:54,800 --> 03:04:58,080
critical software is false and inside

03:04:57,359 --> 03:05:01,120
the bundle

03:04:58,080 --> 03:05:04,399
that's why you should like

03:05:01,120 --> 03:05:08,240
set up a continuous build environment

03:05:04,399 --> 03:05:08,560
and recreate bundles every certain time

03:05:08,240 --> 03:05:12,319
or

03:05:08,560 --> 03:05:13,040
every time that a library that is

03:05:12,319 --> 03:05:16,240
bundling

03:05:13,040 --> 03:05:19,359
in your in your package

03:05:16,240 --> 03:05:22,399
gets a security update a

03:05:19,359 --> 03:05:22,800
it is isn't up image already support

03:05:22,399 --> 03:05:26,000
like

03:05:22,800 --> 03:05:28,160
delta update so your user will not have

03:05:26,000 --> 03:05:31,520
to download the whole bundle

03:05:28,160 --> 03:05:34,560
only the parts that it

03:05:31,520 --> 03:05:38,080
that change it if it's done well

03:05:34,560 --> 03:05:38,720
extra size uh yes your bundle will be a

03:05:38,080 --> 03:05:42,240
bit

03:05:38,720 --> 03:05:43,040
bigger than it's about 30 megabytes

03:05:42,240 --> 03:05:46,640
bigger

03:05:43,040 --> 03:05:50,319
because of geolipsey is being bundled

03:05:46,640 --> 03:05:53,359
which is this isn't doesn't happens with

03:05:50,319 --> 03:05:56,800
other tools like linux deploy

03:05:53,359 --> 03:06:00,160
uh why are we bundling glc

03:05:56,800 --> 03:06:03,520
basically because we are looking for

03:06:00,160 --> 03:06:07,040
all this allows two things first

03:06:03,520 --> 03:06:10,800
uh portability our

03:06:07,040 --> 03:06:14,000
sys all solution will be able to be used

03:06:10,800 --> 03:06:14,960
in system with another lipstick and the

03:06:14,000 --> 03:06:18,399
one we

03:06:14,960 --> 03:06:19,840
built the application and on system with

03:06:18,399 --> 03:06:21,680
newer let's see

03:06:19,840 --> 03:06:23,359
thanks to the backward compatibility of

03:06:21,680 --> 03:06:26,560
gltc on

03:06:23,359 --> 03:06:30,240
also because

03:06:26,560 --> 03:06:32,800
it allows us to build the bundles in

03:06:30,240 --> 03:06:36,399
newer systems this is not possible

03:06:32,800 --> 03:06:39,120
for a with tools like linux deploy

03:06:36,399 --> 03:06:39,680
where you have to focus on the latest

03:06:39,120 --> 03:06:43,279
stable

03:06:39,680 --> 03:06:46,080
release by example of ubuntu or santos

03:06:43,279 --> 03:06:47,520
uh and this like can become like a

03:06:46,080 --> 03:06:50,880
nightmare if you have

03:06:47,520 --> 03:06:53,200
like if dependencies that are

03:06:50,880 --> 03:06:55,439
too new or or are not compatible or

03:06:53,200 --> 03:06:56,399
require tools for building that are not

03:06:55,439 --> 03:07:00,000
available

03:06:56,399 --> 03:07:03,600
in those system and the final

03:07:00,000 --> 03:07:07,200
issue is never use

03:07:03,600 --> 03:07:09,920
untrusted sources for the bundle

03:07:07,200 --> 03:07:10,319
always go with the official repositories

03:07:09,920 --> 03:07:13,920
to

03:07:10,319 --> 03:07:13,920
create your bundles

03:07:15,359 --> 03:07:20,240
okay where you can learn a bit more

03:07:18,160 --> 03:07:23,680
about image builder we'll check the

03:07:20,240 --> 03:07:26,160
dots of image and the image builder

03:07:23,680 --> 03:07:26,720
documentation you can also check for

03:07:26,160 --> 03:07:29,760
other

03:07:26,720 --> 03:07:31,439
image image projects on awesome happy

03:07:29,760 --> 03:07:35,200
mesh

03:07:31,439 --> 03:07:36,080
and if you have questions go to our irc

03:07:35,200 --> 03:07:41,120
channel or

03:07:36,080 --> 03:07:44,800
ask in stack overflow we will gladly

03:07:41,120 --> 03:07:48,160
answer and be there to support you

03:07:44,800 --> 03:07:48,880
finally this is my wish list for those

03:07:48,160 --> 03:07:52,399
people that

03:07:48,880 --> 03:07:55,600
make desktops and basically

03:07:52,399 --> 03:07:58,880
if we would love from the image

03:07:55,600 --> 03:08:01,520
project to see thumbnails for up image

03:07:58,880 --> 03:08:02,240
like in every file manager we will like

03:08:01,520 --> 03:08:04,800
to

03:08:02,240 --> 03:08:05,439
be able to double click an app image and

03:08:04,800 --> 03:08:07,600
it gets

03:08:05,439 --> 03:08:08,560
executed and you get the execution

03:08:07,600 --> 03:08:11,600
permission

03:08:08,560 --> 03:08:13,680
of course you can all you will always

03:08:11,600 --> 03:08:15,040
like warn the user about the

03:08:13,680 --> 03:08:18,319
implications

03:08:15,040 --> 03:08:20,960
and you will like not

03:08:18,319 --> 03:08:24,399
warn them that don't run software that

03:08:20,960 --> 03:08:28,000
they don't get from a trusted source

03:08:24,399 --> 03:08:31,760
also the crash reporting

03:08:28,000 --> 03:08:34,240
if the application fails to to start

03:08:31,760 --> 03:08:35,120
to notify the user what work when run

03:08:34,240 --> 03:08:39,120
not just

03:08:35,120 --> 03:08:40,160
keep do nothing also we would like to

03:08:39,120 --> 03:08:43,200
see

03:08:40,160 --> 03:08:45,040
integration with the system menus like

03:08:43,200 --> 03:08:46,880
something like maybe in the file manager

03:08:45,040 --> 03:08:50,960
you do right click actually

03:08:46,880 --> 03:08:53,840
menu and that's it for doing this

03:08:50,960 --> 03:08:54,800
we have a little damage that is already

03:08:53,840 --> 03:08:57,120
capable of

03:08:54,800 --> 03:08:58,160
doing all this it just needs to be

03:08:57,120 --> 03:09:02,160
integrated

03:08:58,160 --> 03:09:03,600
so as if the file managers and the

03:09:02,160 --> 03:09:06,720
system menus and the desktop

03:09:03,600 --> 03:09:09,760
environments are not our domain as a

03:09:06,720 --> 03:09:13,200
project we are not capable of

03:09:09,760 --> 03:09:13,680
like pushing those changes a the kde

03:09:13,200 --> 03:09:16,720
project

03:09:13,680 --> 03:09:20,880
has already done a lot of on this

03:09:16,720 --> 03:09:23,920
and that's really great that we you can

03:09:20,880 --> 03:09:25,279
right now you can in kde neon by example

03:09:23,920 --> 03:09:27,760
you will have like

03:09:25,279 --> 03:09:28,560
icons for um thumbnails for your

03:09:27,760 --> 03:09:31,279
application

03:09:28,560 --> 03:09:31,920
app images and you will be able like to

03:09:31,279 --> 03:09:36,800
double click

03:09:31,920 --> 03:09:41,680
and just run it so

03:09:36,800 --> 03:09:45,120
that was my presentation thank you for

03:09:41,680 --> 03:09:49,840
for listening and please if you have

03:09:45,120 --> 03:09:51,520
any questions feel free

03:09:49,840 --> 03:09:53,920
thank you so much for your presentation

03:09:51,520 --> 03:09:56,399
yes there are a few questions

03:09:53,920 --> 03:09:58,080
in the shared notes um let's read them

03:09:56,399 --> 03:10:01,600
out together

03:09:58,080 --> 03:10:04,479
the first question is what does backward

03:10:01,600 --> 03:10:06,000
and forward compatibility mean can i

03:10:04,479 --> 03:10:10,800
build on opensuse

03:10:06,000 --> 03:10:10,800
tumbleweed and run on centos 7.

03:10:10,960 --> 03:10:18,960
okay uh right now app image builder is

03:10:15,680 --> 03:10:21,279
only capable of using apt as

03:10:18,960 --> 03:10:22,000
package manager so you will have to run

03:10:21,279 --> 03:10:25,359
it

03:10:22,000 --> 03:10:28,640
on or on ubuntu or

03:10:25,359 --> 03:10:32,319
debian basic or another system which

03:10:28,640 --> 03:10:35,200
also uses apt so

03:10:32,319 --> 03:10:35,920
you right now you cannot build the app

03:10:35,200 --> 03:10:39,359
image

03:10:35,920 --> 03:10:41,120
on open system with but you can build it

03:10:39,359 --> 03:10:44,239
on ubuntu

03:10:41,120 --> 03:10:47,200
or focus what's the last is

03:10:44,239 --> 03:10:48,720
bionic i forgot the code name for ubuntu

03:10:47,200 --> 03:10:51,920
03:10:48,720 --> 03:10:55,439
2004 but you can build it on

03:10:51,920 --> 03:10:58,800
ubuntu 2004 and it will run on

03:10:55,439 --> 03:11:02,000
previous uh on oldest

03:10:58,800 --> 03:11:05,200
system without issue at all and also

03:11:02,000 --> 03:11:06,160
my run in newer system that came thanks

03:11:05,200 --> 03:11:11,359
that

03:11:06,160 --> 03:11:14,880
geoglypsey is being bundled yep

03:11:11,359 --> 03:11:18,319
great okay the next question is

03:11:14,880 --> 03:11:22,960
can source code or rpms also be used

03:11:18,319 --> 03:11:25,760
as an ingredient instead of deb

03:11:22,960 --> 03:11:26,080
right now uh in the example i'm building

03:11:25,760 --> 03:11:28,399
from

03:11:26,080 --> 03:11:29,600
source code so so you will have like

03:11:28,399 --> 03:11:33,520
manually built

03:11:29,600 --> 03:11:36,800
like every ingredient

03:11:33,520 --> 03:11:37,680
and deployed into the appear as i did

03:11:36,800 --> 03:11:40,960
with the main

03:11:37,680 --> 03:11:44,160
application uh

03:11:40,960 --> 03:11:47,760
main application binaries so yes

03:11:44,160 --> 03:11:49,439
but it's not uh in the way that you will

03:11:47,760 --> 03:11:53,040
do it with flat pack that is

03:11:49,439 --> 03:11:57,520
part of the recipe you can also like

03:11:53,040 --> 03:12:00,720
add the dirt let me show you

03:11:57,520 --> 03:12:04,479
you can do

03:12:00,720 --> 03:12:08,080
something like

03:12:04,479 --> 03:12:12,640
then image builder

03:12:08,080 --> 03:12:18,160
okay i already already have it over here

03:12:12,640 --> 03:12:21,279
you can like create something

03:12:18,160 --> 03:12:24,160
you can add scripts to their recipes so

03:12:21,279 --> 03:12:24,160
you will like

03:12:24,800 --> 03:12:33,840
make install all

03:12:29,840 --> 03:12:35,760
all for audio dependencies are

03:12:33,840 --> 03:12:38,560
ingredients that are built from source

03:12:35,760 --> 03:12:42,239
code make them

03:12:38,560 --> 03:12:42,239
install them to the

03:12:42,720 --> 03:12:46,080
after something like this you can use

03:12:44,960 --> 03:12:48,319
something like this and

03:12:46,080 --> 03:12:49,120
get everything installed before like

03:12:48,319 --> 03:12:52,720
creating

03:12:49,120 --> 03:12:55,200
your final bundle so

03:12:52,720 --> 03:12:55,200
next one

03:12:56,160 --> 03:13:00,640
okay the last question that we have here

03:12:59,120 --> 03:13:04,319
says

03:13:00,640 --> 03:13:07,040
instead of excluding the whole icon set

03:13:04,319 --> 03:13:07,439
could one trace the application to see

03:13:07,040 --> 03:13:13,359
which

03:13:07,439 --> 03:13:13,359
icon files are actually needed

03:13:13,439 --> 03:13:20,239
okay uh

03:13:16,640 --> 03:13:24,000
this is partially due done sorry

03:13:20,239 --> 03:13:27,279
uh not but it's not like complete

03:13:24,000 --> 03:13:30,640
yet uh the outputs or

03:13:27,279 --> 03:13:33,920
s trace can be like checked yes

03:13:30,640 --> 03:13:37,040
so you can like use something like that

03:13:33,920 --> 03:13:41,680
and i guess that that's a good issue

03:13:37,040 --> 03:13:45,200
for our feature request for the project

03:13:41,680 --> 03:13:48,319
yep okay

03:13:45,200 --> 03:13:49,600
awesome thank you so much it looks like

03:13:48,319 --> 03:13:52,479
that's all the questions

03:13:49,600 --> 03:13:54,640
we have uh but we hope that you can hang

03:13:52,479 --> 03:13:58,080
around and enjoy the rest of

03:13:54,640 --> 03:14:01,520
the lineup for today thank you

03:13:58,080 --> 03:14:05,359
yeah i will say thank you for having me

03:14:01,520 --> 03:14:09,120
absolutely very happy to have you here

03:14:05,359 --> 03:14:11,680
on that note speaking of later

03:14:09,120 --> 03:14:12,160
i would just like to let everyone know

03:14:11,680 --> 03:14:14,319
that

03:14:12,160 --> 03:14:14,319
in

03:14:15,520 --> 03:14:21,840
just about an hour and 15 minutes

03:14:18,880 --> 03:14:23,200
we will be having the amalfi coast

03:14:21,840 --> 03:14:26,640
virtual tour

03:14:23,200 --> 03:14:29,040
right here in this room please join

03:14:26,640 --> 03:14:29,840
it's supposed to be wonderful and we get

03:14:29,040 --> 03:14:32,319
to learn

03:14:29,840 --> 03:14:33,520
all sorts of things about the amalfi

03:14:32,319 --> 03:14:36,560
coast

03:14:33,520 --> 03:14:39,840
again thank you alexis for for

03:14:36,560 --> 03:14:42,560
sharing your presentation and i hope to

03:14:39,840 --> 03:14:53,840
see everyone back here in an hour and 15

03:14:42,560 --> 03:14:53,840
for the tour

03:15:24,880 --> 03:15:26,960

YouTube URL: https://www.youtube.com/watch?v=greGUWTJQTY


