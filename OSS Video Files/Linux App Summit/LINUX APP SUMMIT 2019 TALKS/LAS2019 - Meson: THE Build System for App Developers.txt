Title: LAS2019 - Meson: THE Build System for App Developers
Publication date: 2019-12-23
Playlist: LINUX APP SUMMIT 2019 TALKS
Description: 
	Meson: THE Build System for App Developers

Nirbheek Chauhan
Captions: 
	00:00:00,030 --> 00:00:08,880
hello I'm the week I work on Masson and

00:00:05,549 --> 00:00:12,360
genome and I have a particular today I'm

00:00:08,880 --> 00:00:15,330
here to talk to tell you why maison is

00:00:12,360 --> 00:00:17,840
the build system for app developers now

00:00:15,330 --> 00:00:20,520
the first question is what is miss on

00:00:17,840 --> 00:00:23,310
how many people here have heard of

00:00:20,520 --> 00:00:25,859
maison please raise your hands everybody

00:00:23,310 --> 00:00:29,670
great how many people here have built a

00:00:25,859 --> 00:00:31,349
project that uses mace on almost all of

00:00:29,670 --> 00:00:35,250
you and how many people here have

00:00:31,349 --> 00:00:39,239
written Amazon build file pretty good

00:00:35,250 --> 00:00:42,930
number cool that's the question I will

00:00:39,239 --> 00:00:46,590
ask at the end of the talk so what is me

00:00:42,930 --> 00:00:50,219
so on new build system hype no one has

00:00:46,590 --> 00:00:53,280
ever said that ever especially not lost

00:00:50,219 --> 00:00:56,820
distributions I know because I used to

00:00:53,280 --> 00:00:58,649
be one at gen 2 so why is that why are

00:00:56,820 --> 00:01:01,890
people not hyped about new build systems

00:00:58,649 --> 00:01:04,019
a little history lesson for that about

00:01:01,890 --> 00:01:07,020
2006 a bunch of new build system showed

00:01:04,019 --> 00:01:11,250
up we were quite tired of order tools

00:01:07,020 --> 00:01:17,400
and one of them was a sconce lick mean

00:01:11,250 --> 00:01:19,500
by disre devs as is cons the other one

00:01:17,400 --> 00:01:22,409
is called woth also commonly known as

00:01:19,500 --> 00:01:24,210
barf now I don't subscribe to these

00:01:22,409 --> 00:01:26,490
nicknames myself but I know that a lot

00:01:24,210 --> 00:01:28,020
of people worked on these projects but

00:01:26,490 --> 00:01:30,329
fundamentally they were not built with

00:01:28,020 --> 00:01:31,950
enough of the use cases of app and

00:01:30,329 --> 00:01:34,290
library development including deployment

00:01:31,950 --> 00:01:35,579
distribution etc in mind and hence did

00:01:34,290 --> 00:01:37,979
and they weren't interested in these

00:01:35,579 --> 00:01:40,409
alternatives cases and hence people's

00:01:37,979 --> 00:01:41,549
dissatisfaction with them and hence

00:01:40,409 --> 00:01:42,570
there was all of skepticism

00:01:41,549 --> 00:01:44,070
once these bill systems came up they

00:01:42,570 --> 00:01:47,310
were like new things don't actually work

00:01:44,070 --> 00:01:50,759
and there was a depression given back to

00:01:47,310 --> 00:01:52,290
our tools designed to see make kid KDE

00:01:50,759 --> 00:01:53,130
for instance wanted to move from order

00:01:52,290 --> 00:01:55,799
to something else

00:01:53,130 --> 00:01:57,689
they tried s cons with B cases it or not

00:01:55,799 --> 00:01:59,540
to be complete nightmare because the

00:01:57,689 --> 00:02:01,619
upstream wasn't really interested and

00:01:59,540 --> 00:02:03,320
they ended up having to you see make

00:02:01,619 --> 00:02:05,850
which wasn't their first choice and

00:02:03,320 --> 00:02:08,489
other people took the worst possible

00:02:05,850 --> 00:02:08,819
option which was to have custom hand

00:02:08,489 --> 00:02:11,520
written

00:02:08,819 --> 00:02:12,500
configure and make scripts all for

00:02:11,520 --> 00:02:13,680
instance as the pulse

00:02:12,500 --> 00:02:14,939
open is

00:02:13,680 --> 00:02:16,950
cellphone instance has a perl script

00:02:14,939 --> 00:02:19,409
called configure which generates make

00:02:16,950 --> 00:02:22,530
files this is probably like the worst

00:02:19,409 --> 00:02:24,930
thing you can do and then ffmpeg has

00:02:22,530 --> 00:02:28,140
shell scripts for generating configure

00:02:24,930 --> 00:02:29,969
and make files and other projects only

00:02:28,140 --> 00:02:32,760
use auto conf and not automatic is all a

00:02:29,969 --> 00:02:34,889
total mess and either it's one of these

00:02:32,760 --> 00:02:37,379
or your project is not Co super flows at

00:02:34,889 --> 00:02:39,060
all it's using cargo or NPM or whatever

00:02:37,379 --> 00:02:42,480
and you have your own ecosystem around

00:02:39,060 --> 00:02:44,280
it so it was a depression right and the

00:02:42,480 --> 00:02:47,459
reason for that is because Oracle's will

00:02:44,280 --> 00:02:49,549
always be bad for instance this is what

00:02:47,459 --> 00:02:52,169
it looks like to use the Oracles project

00:02:49,549 --> 00:02:53,579
these are all the components that are

00:02:52,169 --> 00:02:55,500
run every time you need to build a

00:02:53,579 --> 00:02:57,750
copper Oracles project and this isn't

00:02:55,500 --> 00:03:00,930
even include the POSIX tools used awk

00:02:57,750 --> 00:03:02,760
said grep TR whatever and it's like 100

00:03:00,930 --> 00:03:05,370
of them and it's really hard to do

00:03:02,760 --> 00:03:08,639
portability with this so it will always

00:03:05,370 --> 00:03:09,870
you bad and but people have kept using

00:03:08,639 --> 00:03:12,540
order tools because they don't like

00:03:09,870 --> 00:03:14,099
anything else and C make is better but

00:03:12,540 --> 00:03:16,260
not much better and it's not going to

00:03:14,099 --> 00:03:18,329
get much better either it is a lot of

00:03:16,260 --> 00:03:19,680
things which are anti patterns and the

00:03:18,329 --> 00:03:22,470
elementary folks have written an

00:03:19,680 --> 00:03:24,780
excellent blog post which explains why

00:03:22,470 --> 00:03:26,760
they move from C make to mess on you can

00:03:24,780 --> 00:03:28,829
check that out if you liked the video

00:03:26,760 --> 00:03:31,049
and folks the people behind VLC are also

00:03:28,829 --> 00:03:32,849
moving to meson so there's a lot of

00:03:31,049 --> 00:03:36,180
momentum behind for that as well but why

00:03:32,849 --> 00:03:38,419
should you trust me son well we've all

00:03:36,180 --> 00:03:42,840
seen this excuse we do comic right

00:03:38,419 --> 00:03:44,909
standards but this is okay actually a

00:03:42,840 --> 00:03:46,949
new standard is good as long as it

00:03:44,909 --> 00:03:48,629
actually does things better and the

00:03:46,949 --> 00:03:49,859
reason why my son does things better is

00:03:48,629 --> 00:03:50,959
because we have learned from other

00:03:49,859 --> 00:03:53,250
people's mistakes

00:03:50,959 --> 00:03:54,959
listen have been built by people who've

00:03:53,250 --> 00:03:56,939
used all the other standards and we know

00:03:54,959 --> 00:04:00,060
what we're doing the best bits of all

00:03:56,939 --> 00:04:03,479
build systems oughta make our tools C

00:04:00,060 --> 00:04:05,009
make jpf and even Visual Studio we are

00:04:03,479 --> 00:04:07,709
an approachable upstream that cares

00:04:05,009 --> 00:04:09,629
about your use cases we never want

00:04:07,709 --> 00:04:12,780
someone to have the experience KDE had

00:04:09,629 --> 00:04:14,489
various cons we have a very diverse set

00:04:12,780 --> 00:04:16,109
of people as part of the development

00:04:14,489 --> 00:04:17,940
team we have destroy maintainer app

00:04:16,109 --> 00:04:20,849
developers just of developers compiler

00:04:17,940 --> 00:04:22,710
people systemd messes or Fortran people

00:04:20,849 --> 00:04:24,659
mobile app developers whole bunch of

00:04:22,710 --> 00:04:26,950
people and meson is designed to

00:04:24,659 --> 00:04:29,170
encourage off stream first

00:04:26,950 --> 00:04:31,240
how's that we have a module system so

00:04:29,170 --> 00:04:32,800
anything that you have a use case it can

00:04:31,240 --> 00:04:35,680
go upstream very easily in

00:04:32,800 --> 00:04:37,810
nationalisation genome jute package

00:04:35,680 --> 00:04:39,040
config windows CUDA as he make even cake

00:04:37,810 --> 00:04:42,280
on fake everything you want and there's

00:04:39,040 --> 00:04:46,030
a lot more Mason also supports all

00:04:42,280 --> 00:04:48,910
platforms the shop linux bsd mac OS

00:04:46,030 --> 00:04:52,060
windows so that is aluminous which is a

00:04:48,910 --> 00:04:55,600
new solaris haiku AIX embedded linux

00:04:52,060 --> 00:04:59,800
server Linux Android iOS hololens magic

00:04:55,600 --> 00:05:03,220
leap everything we support all CPUs that

00:04:59,800 --> 00:05:04,750
I chicken cross compile for we support

00:05:03,220 --> 00:05:05,890
all twill chains there's a whole bunch

00:05:04,750 --> 00:05:07,660
over here which you burn never even

00:05:05,890 --> 00:05:10,180
heard of for instance is Ian script end

00:05:07,660 --> 00:05:11,800
you can compile Bassem if you want all

00:05:10,180 --> 00:05:14,230
the linker supports everything it's a

00:05:11,800 --> 00:05:17,140
bit dizzying honestly and we do all this

00:05:14,230 --> 00:05:19,180
without compromise we have great

00:05:17,140 --> 00:05:21,940
internal abstractions and we have the

00:05:19,180 --> 00:05:24,670
correct amount of fear of reorganizing

00:05:21,940 --> 00:05:26,190
intervals and we have an extensive test

00:05:24,670 --> 00:05:29,530
suite which runs on the CI continuously

00:05:26,190 --> 00:05:32,530
so that's all good it allows us to move

00:05:29,530 --> 00:05:34,990
quickly but the most important thing is

00:05:32,530 --> 00:05:38,250
that the syntax is easy to read and

00:05:34,990 --> 00:05:41,710
write for both the syntax and the intent

00:05:38,250 --> 00:05:43,990
the syntax is inspired by python it's

00:05:41,710 --> 00:05:46,900
purposely not your incomplete because

00:05:43,990 --> 00:05:48,160
it's a bit silly to be inspired from

00:05:46,900 --> 00:05:51,580
jeepers it's a bit sealed because it's a

00:05:48,160 --> 00:05:54,070
bit silly to have programs that run

00:05:51,580 --> 00:05:56,350
programs to build your programs because

00:05:54,070 --> 00:06:00,970
then you just sort of going along with

00:05:56,350 --> 00:06:03,370
this meme or even worse this meme you

00:06:00,970 --> 00:06:03,880
don't want recursion in everywhere in

00:06:03,370 --> 00:06:07,450
your world

00:06:03,880 --> 00:06:09,400
so turing-complete right and the syntax

00:06:07,450 --> 00:06:10,870
is declarative within imperative syntax

00:06:09,400 --> 00:06:13,690
i'll show you what that means later and

00:06:10,870 --> 00:06:15,070
it's implemented in Python but it

00:06:13,690 --> 00:06:17,890
doesn't have to be we are very careful

00:06:15,070 --> 00:06:19,390
to make sure that our specification does

00:06:17,890 --> 00:06:24,190
not rely on Python internals at any

00:06:19,390 --> 00:06:25,870
point so syntax again most important

00:06:24,190 --> 00:06:28,450
thing I another thing which is really

00:06:25,870 --> 00:06:30,280
important for our readability is that we

00:06:28,450 --> 00:06:33,250
have associate types for objects no

00:06:30,280 --> 00:06:35,830
string Li type things

00:06:33,250 --> 00:06:38,050
no quoting mess where you have oh I want

00:06:35,830 --> 00:06:39,980
to add a path or but it's the string or

00:06:38,050 --> 00:06:42,260
the spaces in it now I'm screwed

00:06:39,980 --> 00:06:43,940
never happens in my son dependencies

00:06:42,260 --> 00:06:45,530
must be seeded explicitly unlike order

00:06:43,940 --> 00:06:47,330
tools or Auto make where you have to

00:06:45,530 --> 00:06:48,260
have variables with the correct names so

00:06:47,330 --> 00:06:49,880
that you have the right slotting

00:06:48,260 --> 00:06:52,070
available for everything it's not like

00:06:49,880 --> 00:06:53,780
that and we avoid side effects in global

00:06:52,070 --> 00:06:55,600
state or tools is all about global State

00:06:53,780 --> 00:06:57,950
we try to avoid that as much as possible

00:06:55,600 --> 00:07:00,440
so what does this look like I'll show

00:06:57,950 --> 00:07:02,780
you a snippet if you so this is what

00:07:00,440 --> 00:07:05,930
most Mason build files this chart out

00:07:02,780 --> 00:07:08,030
with the project name the language and

00:07:05,930 --> 00:07:10,070
is like if you add more languages at the

00:07:08,030 --> 00:07:13,280
top and then this is how you look for

00:07:10,070 --> 00:07:15,050
dependencies final library a dependency

00:07:13,280 --> 00:07:18,830
with a package commit file a dependency

00:07:15,050 --> 00:07:21,500
that supports all sorts of ways to find

00:07:18,830 --> 00:07:23,540
them my since queue make Godsey make

00:07:21,500 --> 00:07:25,820
files and also dependencies with a

00:07:23,540 --> 00:07:28,760
fallback what our fall backs we'll talk

00:07:25,820 --> 00:07:31,430
about that in a second so the important

00:07:28,760 --> 00:07:34,670
note here is the second the third one QT

00:07:31,430 --> 00:07:36,500
DEP now that's done with a little bit of

00:07:34,670 --> 00:07:38,480
magic we have dependency abstractions

00:07:36,500 --> 00:07:40,790
that can do arbitrary searching this is

00:07:38,480 --> 00:07:42,910
all upstream it even supports he makes

00:07:40,790 --> 00:07:45,410
fine package or abstraction and

00:07:42,910 --> 00:07:47,000
dependency fall backs are interesting I

00:07:45,410 --> 00:07:49,790
think one of the most important features

00:07:47,000 --> 00:07:51,740
of Maison in that UK amazin projects can

00:07:49,790 --> 00:07:54,170
include other Mason projects as sub

00:07:51,740 --> 00:07:56,240
projects and so in the end you can have

00:07:54,170 --> 00:07:57,920
a single configure and make that builds

00:07:56,240 --> 00:07:58,430
your project and oils dependencies in

00:07:57,920 --> 00:08:00,080
one go

00:07:58,430 --> 00:08:01,640
this allows you to really cool things

00:08:00,080 --> 00:08:04,310
where you have all the dependencies

00:08:01,640 --> 00:08:05,720
included with your app sources and

00:08:04,310 --> 00:08:08,360
building on this on different platforms

00:08:05,720 --> 00:08:11,780
with the same command unlike any other

00:08:08,360 --> 00:08:15,890
builds mironov next let's take a look at

00:08:11,780 --> 00:08:17,510
how it targets look like if you want to

00:08:15,890 --> 00:08:19,190
build libraries or easy cutable so this

00:08:17,510 --> 00:08:21,260
is what it looks like we have some

00:08:19,190 --> 00:08:24,680
sources you can build a library from

00:08:21,260 --> 00:08:26,840
that and it's cutable from that and also

00:08:24,680 --> 00:08:30,640
on a test on that now let's take a look

00:08:26,840 --> 00:08:34,700
at how this leads of dependencies so

00:08:30,640 --> 00:08:38,420
this the sources go there the library

00:08:34,700 --> 00:08:42,229
goes there the tool goes there right you

00:08:38,420 --> 00:08:43,910
see how they're all sort of depending on

00:08:42,229 --> 00:08:46,160
each other and this is how we reduce

00:08:43,910 --> 00:08:48,850
dependencies in meson and it's very

00:08:46,160 --> 00:08:50,900
explicit it's very intuitive as well

00:08:48,850 --> 00:08:52,400
next you want to compile checks right

00:08:50,900 --> 00:08:53,840
everybody has to do compile checks

00:08:52,400 --> 00:08:56,420
unless Devon target only one

00:08:53,840 --> 00:08:58,640
like Google does resistance so if you're

00:08:56,420 --> 00:09:01,280
not Google you need a politics this is

00:08:58,640 --> 00:09:03,920
what it looks like in mess on you can

00:09:01,280 --> 00:09:05,960
you define instigation data object you

00:09:03,920 --> 00:09:07,070
can list it can make a create a list of

00:09:05,960 --> 00:09:09,860
headers for instance you want to search

00:09:07,070 --> 00:09:12,410
for or libraries or symbols or whatever

00:09:09,860 --> 00:09:15,920
else you loop over them you check if it

00:09:12,410 --> 00:09:19,460
exists you set the configuration and

00:09:15,920 --> 00:09:23,180
then you write it out that's it this

00:09:19,460 --> 00:09:25,190
pretty simple straightforward the next

00:09:23,180 --> 00:09:27,740
thing which sets Mason apart is it's

00:09:25,190 --> 00:09:28,310
built to be fast and it's getting faster

00:09:27,740 --> 00:09:30,890
every day

00:09:28,310 --> 00:09:32,420
the default back end is ninja we have

00:09:30,890 --> 00:09:35,060
put a single builder ninja file in the

00:09:32,420 --> 00:09:36,920
bed directory there's no recursive make

00:09:35,060 --> 00:09:39,110
ordinate or whatever else involved

00:09:36,920 --> 00:09:41,330
unlike order tools for instance we also

00:09:39,110 --> 00:09:43,280
have a fast install step unlike Lib tool

00:09:41,330 --> 00:09:44,810
there's no real linking required you are

00:09:43,280 --> 00:09:46,250
so widely linking when your source is

00:09:44,810 --> 00:09:50,300
change unless the symbols have changed

00:09:46,250 --> 00:09:52,030
which is really cool if you have linker

00:09:50,300 --> 00:09:56,210
times PewDiePie realizes they're slow

00:09:52,030 --> 00:09:58,010
you're going to be sad and we also have

00:09:56,210 --> 00:09:59,660
built in supported profiling if you're

00:09:58,010 --> 00:10:01,670
wrong missiles with that command it will

00:09:59,660 --> 00:10:04,220
show you execution time stamps for each

00:10:01,670 --> 00:10:06,140
command for each output and it will

00:10:04,220 --> 00:10:08,270
output a profile data file if Isis need

00:10:06,140 --> 00:10:10,100
a profile format which has been used to

00:10:08,270 --> 00:10:12,770
speed up missile robot in the past a few

00:10:10,100 --> 00:10:14,750
years and we have plans to make little

00:10:12,770 --> 00:10:17,780
make everything even faster we have

00:10:14,750 --> 00:10:19,760
plans to paralyze configure no other

00:10:17,780 --> 00:10:22,130
build system does this how do you do

00:10:19,760 --> 00:10:24,230
this like for instance this right

00:10:22,130 --> 00:10:26,090
we were looping over all the headers and

00:10:24,230 --> 00:10:28,130
doing configure checks you can easily

00:10:26,090 --> 00:10:31,310
paralyze this because each step is

00:10:28,130 --> 00:10:32,350
independent of each other the next

00:10:31,310 --> 00:10:34,520
reason why you trust me as on

00:10:32,350 --> 00:10:36,980
documentation people love our

00:10:34,520 --> 00:10:37,640
documentation its entry and built with

00:10:36,980 --> 00:10:39,920
hot dog

00:10:37,640 --> 00:10:41,600
we have released notes for all features

00:10:39,920 --> 00:10:44,270
and merge requests that introduced

00:10:41,600 --> 00:10:46,550
features are required to have to add the

00:10:44,270 --> 00:10:47,720
documentation for it and we have

00:10:46,550 --> 00:10:49,850
well-organized stable releases

00:10:47,720 --> 00:10:51,590
use github milestones and if you want to

00:10:49,850 --> 00:10:54,440
check what's in a stable release is one

00:10:51,590 --> 00:10:56,630
slick away another reason why people

00:10:54,440 --> 00:10:59,660
like me so it's good defaults unlike for

00:10:56,630 --> 00:11:01,820
instance see make we have written flags

00:10:59,660 --> 00:11:04,400
for installation for instance Lib dir

00:11:01,820 --> 00:11:06,890
prefix which is there a way but Libya

00:11:04,400 --> 00:11:07,640
our sis conf dr olivia VI bindi are all

00:11:06,890 --> 00:11:10,100
of those standards

00:11:07,640 --> 00:11:13,640
which all tools has we also have good

00:11:10,100 --> 00:11:15,170
abstractions for or cross-language and

00:11:13,640 --> 00:11:17,300
cost a tool change for instance we have

00:11:15,170 --> 00:11:18,710
W error running level optimization if

00:11:17,300 --> 00:11:19,910
you said those they'll be applied to all

00:11:18,710 --> 00:11:23,180
the languages and twill jeans that you

00:11:19,910 --> 00:11:25,010
posit uses if you C C++ rust viola all

00:11:23,180 --> 00:11:27,020
at the same time it will be applied to

00:11:25,010 --> 00:11:29,000
awesome correctly we also have good

00:11:27,020 --> 00:11:31,940
build defaults for instance be enabled

00:11:29,000 --> 00:11:33,410
as needed by default you can turn that

00:11:31,940 --> 00:11:36,040
off if you want to but by default is

00:11:33,410 --> 00:11:38,810
their same with undefined symbols and

00:11:36,040 --> 00:11:41,180
it's if we I have taken great care to

00:11:38,810 --> 00:11:43,580
make sure that everything can be turned

00:11:41,180 --> 00:11:45,530
off project wide or per target some

00:11:43,580 --> 00:11:47,060
people require that undefined symbols

00:11:45,530 --> 00:11:47,450
are allowed some targets should need

00:11:47,060 --> 00:11:49,280
that

00:11:47,450 --> 00:11:50,650
so we allowed to do that and we have

00:11:49,280 --> 00:11:53,030
documentation for that as well of course

00:11:50,650 --> 00:11:54,650
next reason which i think is one of the

00:11:53,030 --> 00:11:57,410
more important things is that we have

00:11:54,650 --> 00:12:01,310
good IDE integration we already have we

00:11:57,410 --> 00:12:03,590
have this which a lot of which is pretty

00:12:01,310 --> 00:12:05,570
easy to figure out and then we have this

00:12:03,590 --> 00:12:08,300
which is introspection we allow you to

00:12:05,570 --> 00:12:10,490
introspect which targets mess one has

00:12:08,300 --> 00:12:12,110
built what file is going to install what

00:12:10,490 --> 00:12:14,960
tests are there dependency is everything

00:12:12,110 --> 00:12:16,550
and we even have a sub command to read

00:12:14,960 --> 00:12:18,680
write build or the build files

00:12:16,550 --> 00:12:21,680
programmatically I don't know of any

00:12:18,680 --> 00:12:22,760
other build system notices you only get

00:12:21,680 --> 00:12:24,620
the sort of thing if you use which is

00:12:22,760 --> 00:12:28,160
should you or something which has its

00:12:24,620 --> 00:12:29,900
own file format and we have we have a

00:12:28,160 --> 00:12:32,270
lot of ideas using this stuff we have

00:12:29,900 --> 00:12:34,310
gunam builder we have k develop and we

00:12:32,270 --> 00:12:35,990
have eclipse experimental and everything

00:12:34,310 --> 00:12:39,770
that uses c make can use the c make

00:12:35,990 --> 00:12:43,550
wrapper but it's not you shouldn't rely

00:12:39,770 --> 00:12:45,050
on that for production we also have back

00:12:43,550 --> 00:12:47,180
in support if you use the you should

00:12:45,050 --> 00:12:49,520
your xcode you can output the native

00:12:47,180 --> 00:12:51,110
format for those i des which is really

00:12:49,520 --> 00:12:53,710
important for people who want to be

00:12:51,110 --> 00:12:56,660
comfortable in their environment

00:12:53,710 --> 00:12:58,310
so in my opinion Mason is the best

00:12:56,660 --> 00:13:01,370
general-purpose build system that has

00:12:58,310 --> 00:13:04,610
ever been created and we continuously

00:13:01,370 --> 00:13:06,680
innovating and evolving and there's a

00:13:04,610 --> 00:13:15,800
demo which I will I will explain we are

00:13:06,680 --> 00:13:18,920
sure to explain what I mean so yeah all

00:13:15,800 --> 00:13:21,270
right so we have here Goom recipes which

00:13:18,920 --> 00:13:28,020
is an app and let's say some

00:13:21,270 --> 00:13:29,610
he wants to build it so here we go this

00:13:28,020 --> 00:13:32,220
is what you do you run mitts on and then

00:13:29,610 --> 00:13:35,130
indirectly ability I directly this will

00:13:32,220 --> 00:13:37,410
run configure right oh we are missing a

00:13:35,130 --> 00:13:39,600
dependency oh and other dependencies we

00:13:37,410 --> 00:13:41,970
should missing as well to figure out

00:13:39,600 --> 00:13:44,940
what each of these are from but what if

00:13:41,970 --> 00:13:46,440
instead of having to figure out how to

00:13:44,940 --> 00:13:48,390
provide these and mapping them to

00:13:46,440 --> 00:13:51,840
development packages we could do

00:13:48,390 --> 00:13:56,340
something really cool we could have

00:13:51,840 --> 00:13:57,690
Nissan together out for us okay it's

00:13:56,340 --> 00:13:59,730
telling us we can install the optional

00:13:57,690 --> 00:14:03,950
dependencies oh we can install this okay

00:13:59,730 --> 00:14:03,950
cool yeah please do that for me okay

00:14:08,240 --> 00:14:17,400
and it's what oh we don't have internet

00:14:14,760 --> 00:14:19,740
here but if it we had internet here it

00:14:17,400 --> 00:14:23,010
wouldn't solve it for us and then it

00:14:19,740 --> 00:14:27,840
would work and you can even change this

00:14:23,010 --> 00:14:30,120
to install for us you can just do it can

00:14:27,840 --> 00:14:32,130
do one and then it will tell us exactly

00:14:30,120 --> 00:14:40,700
what's missing it will tell us for

00:14:32,130 --> 00:14:40,700
instance sorry its info

00:14:46,670 --> 00:14:51,290
so it says this is not found but you

00:14:49,550 --> 00:14:53,510
could provide it by installing this

00:14:51,290 --> 00:14:55,160
package this wasn't found but it

00:14:53,510 --> 00:14:56,480
installed by bestowing this package and

00:14:55,160 --> 00:14:59,000
this one

00:14:56,480 --> 00:15:01,580
one of the major headaches like for

00:14:59,000 --> 00:15:03,740
instance the other day they were doing a

00:15:01,580 --> 00:15:05,930
workshop and Russ fest r2 on GStreamer

00:15:03,740 --> 00:15:07,940
and WebRTC and around the bigger mr.

00:15:05,930 --> 00:15:10,190
bigger issues we had was telling

00:15:07,940 --> 00:15:12,590
everybody what packages need to install

00:15:10,190 --> 00:15:15,260
to actually run the examples and this

00:15:12,590 --> 00:15:17,150
uses this I brought up yesterday and it

00:15:15,260 --> 00:15:18,650
uses packaged kit so it will work on

00:15:17,150 --> 00:15:20,240
every distro which supports package kit

00:15:18,650 --> 00:15:21,680
and it is completely so it's completely

00:15:20,240 --> 00:15:24,230
agnostic it will tell you exactly what

00:15:21,680 --> 00:15:25,550
you need to build your application so I

00:15:24,230 --> 00:15:27,050
think this is something which doesn't

00:15:25,550 --> 00:15:29,150
exist right now it's in my personal

00:15:27,050 --> 00:15:31,730
branch but I didn't listen one day and

00:15:29,150 --> 00:15:35,180
so it shows you how extensible flexible

00:15:31,730 --> 00:15:36,860
Maison is this kind of integrations are

00:15:35,180 --> 00:15:39,170
only really possible if you are not

00:15:36,860 --> 00:15:42,440
stream that will listen to you a project

00:15:39,170 --> 00:15:44,720
is approachable and which is which

00:15:42,440 --> 00:15:48,410
actually you can talk to right

00:15:44,720 --> 00:15:50,780
but you you are I see you asking why

00:15:48,410 --> 00:15:52,430
should you care why should Abdullah

00:15:50,780 --> 00:15:55,280
purse care right for that we need to ask

00:15:52,430 --> 00:15:56,870
ourselves one question what do app

00:15:55,280 --> 00:16:00,770
developers want more than anything else

00:15:56,870 --> 00:16:02,630
is it users absolutely not

00:16:00,770 --> 00:16:04,400
we don't want users we want more

00:16:02,630 --> 00:16:07,310
developers that's what everybody wants

00:16:04,400 --> 00:16:09,980
users just like come with complaints

00:16:07,310 --> 00:16:13,070
developers fix things so how do you get

00:16:09,980 --> 00:16:16,640
developers right now for this I there's

00:16:13,070 --> 00:16:18,470
a simple pipeline simplified pipeline so

00:16:16,640 --> 00:16:20,090
we have let's say a user with spare time

00:16:18,470 --> 00:16:22,580
they find a small issue let's say an

00:16:20,090 --> 00:16:24,830
incorrect on session a UI glitch a bug

00:16:22,580 --> 00:16:27,860
whatever else right they go to your

00:16:24,830 --> 00:16:29,450
website they down the source code they

00:16:27,860 --> 00:16:32,000
try to build it this figure how to

00:16:29,450 --> 00:16:34,370
contribute to your project then the

00:16:32,000 --> 00:16:35,450
submitter change upstream right you see

00:16:34,370 --> 00:16:37,370
appreciated for their work they're like

00:16:35,450 --> 00:16:40,640
wow these people actually like what I

00:16:37,370 --> 00:16:43,190
did and then it gets merged and they're

00:16:40,640 --> 00:16:44,780
like wow I'm ho I like this I want to do

00:16:43,190 --> 00:16:46,730
this more and that's how they get hooked

00:16:44,780 --> 00:16:48,460
and this is our evil plan has maintained

00:16:46,730 --> 00:16:50,720
us to get more contributors

00:16:48,460 --> 00:16:52,670
now this is a pipeline right so let's

00:16:50,720 --> 00:16:55,910
think of it like a pipeline you want to

00:16:52,670 --> 00:16:57,800
maximize the input to this pipeline more

00:16:55,910 --> 00:16:59,900
contributors go to minimize flow losses

00:16:57,800 --> 00:17:01,240
you know more than

00:16:59,900 --> 00:17:05,600
you don't wanna turn them away right

00:17:01,240 --> 00:17:09,260
next step is and then profit right well

00:17:05,600 --> 00:17:12,800
this is fast so no profit but but the

00:17:09,260 --> 00:17:14,570
pipeline is still there so now in the in

00:17:12,800 --> 00:17:15,890
these steps notice that the first time

00:17:14,570 --> 00:17:18,050
that somebody is going to account is

00:17:15,890 --> 00:17:21,800
going to interact with your project is

00:17:18,050 --> 00:17:23,360
here the contribution flow is the first

00:17:21,800 --> 00:17:25,400
obstacle that user faces if you turn

00:17:23,360 --> 00:17:27,050
them away here they are gone if they're

00:17:25,400 --> 00:17:29,030
able to make local changes easily if

00:17:27,050 --> 00:17:30,890
they can build your project then they

00:17:29,030 --> 00:17:32,210
will submit those upstream so building

00:17:30,890 --> 00:17:34,070
it building being able to build a

00:17:32,210 --> 00:17:35,390
project is really important and the

00:17:34,070 --> 00:17:36,920
contribution workflow your build system

00:17:35,390 --> 00:17:38,630
must be easier to understand in your

00:17:36,920 --> 00:17:40,640
code the first step is the most

00:17:38,630 --> 00:17:42,650
important one people come and contribute

00:17:40,640 --> 00:17:44,030
if they can't bill your code right and I

00:17:42,650 --> 00:17:45,950
love what flat packing good home builder

00:17:44,030 --> 00:17:47,360
doing about this you can click a button

00:17:45,950 --> 00:17:49,670
in chrome builder and build a project

00:17:47,360 --> 00:17:52,790
it's really cool unfortunately their

00:17:49,670 --> 00:17:55,640
deluxe only and your apps should be

00:17:52,790 --> 00:17:57,250
cross-platform why is that you ask why

00:17:55,640 --> 00:17:59,360
should my aspect our cross platform

00:17:57,250 --> 00:18:01,910
there are a lot of reasons and just a

00:17:59,360 --> 00:18:03,380
whole talk about this right but it all

00:18:01,910 --> 00:18:07,310
boils down to one thing in my opinion

00:18:03,380 --> 00:18:08,690
and that is mind fear mind she is about

00:18:07,310 --> 00:18:10,850
everything is about mind sure these days

00:18:08,690 --> 00:18:14,330
right we want and we want people to know

00:18:10,850 --> 00:18:16,130
what fuss and we want them to see it as

00:18:14,330 --> 00:18:18,560
better than everything else that's our

00:18:16,130 --> 00:18:21,590
goal right so we have to be where they

00:18:18,560 --> 00:18:23,540
are they won't always be on Linux we

00:18:21,590 --> 00:18:26,570
should be everywhere we should be on

00:18:23,540 --> 00:18:28,660
Linux Windows Mac OS if it's possible

00:18:26,570 --> 00:18:31,180
for your application on Android and iOS

00:18:28,660 --> 00:18:33,380
wherever else anyway this is a

00:18:31,180 --> 00:18:36,140
digression let's get back on track like

00:18:33,380 --> 00:18:38,480
what is the path then tell us the

00:18:36,140 --> 00:18:41,330
pipeline tells us that more veteran

00:18:38,480 --> 00:18:43,310
support leads to more contributors the

00:18:41,330 --> 00:18:44,660
more places you are the more likely it

00:18:43,310 --> 00:18:48,110
is somebody will want to hack on your

00:18:44,660 --> 00:18:49,910
application and hence we have to give an

00:18:48,110 --> 00:18:53,330
excellent experience for contributors

00:18:49,910 --> 00:18:56,540
everywhere out-of-the-box and this is

00:18:53,330 --> 00:18:59,480
what my son is for we did this really

00:18:56,540 --> 00:19:01,310
well in gstreamer we have us on metal

00:18:59,480 --> 00:19:04,010
project using missiles our projects

00:19:01,310 --> 00:19:05,600
called ght build and the current steps

00:19:04,010 --> 00:19:07,790
for building it on any platform on

00:19:05,600 --> 00:19:10,850
Windows Mac OS all you nuts are you

00:19:07,790 --> 00:19:12,980
install Python you install git you clone

00:19:10,850 --> 00:19:14,900
the project and you run maysun build

00:19:12,980 --> 00:19:17,600
it and then you don't win jar built

00:19:14,900 --> 00:19:20,720
right that's it and it works really well

00:19:17,600 --> 00:19:21,080
and I think that if every project can do

00:19:20,720 --> 00:19:22,580
this

00:19:21,080 --> 00:19:24,110
they'll make it really easy for people

00:19:22,580 --> 00:19:25,340
to contribute and they'll be able to

00:19:24,110 --> 00:19:27,919
know that if all that exists and they

00:19:25,340 --> 00:19:30,200
can contribute in a project and so this

00:19:27,919 --> 00:19:31,130
is what mission is about all platforms

00:19:30,200 --> 00:19:33,230
all toolchains

00:19:31,130 --> 00:19:34,460
architectures extensible dependency

00:19:33,230 --> 00:19:36,169
abstractions which work on all platforms

00:19:34,460 --> 00:19:38,210
the thing which I showed you earlier

00:19:36,169 --> 00:19:40,250
which works only on Elif right now it

00:19:38,210 --> 00:19:42,410
can be extended to use homebrew on Mac

00:19:40,250 --> 00:19:44,110
OS for instance or chocolaty on Windows

00:19:42,410 --> 00:19:47,179
or whatever else you want

00:19:44,110 --> 00:19:51,559
we have great IDE integration so for

00:19:47,179 --> 00:19:53,120
instance we have groom builder

00:19:51,559 --> 00:19:54,740
integration right at the same time

00:19:53,120 --> 00:19:56,000
across a visual studio integration in

00:19:54,740 --> 00:19:57,530
the sense that you can click on a button

00:19:56,000 --> 00:20:00,530
and all all the dependencies for your

00:19:57,530 --> 00:20:01,669
project is in chocolaty right and we

00:20:00,530 --> 00:20:03,620
have sub projects if you don't want to

00:20:01,669 --> 00:20:05,510
use an IDE and you want to have work on

00:20:03,620 --> 00:20:10,880
the command line that works pretty well

00:20:05,510 --> 00:20:12,440
do so yes Maison is the thing for you to

00:20:10,880 --> 00:20:13,640
use and we should all be excited and we

00:20:12,440 --> 00:20:18,070
should all move to it from everything

00:20:13,640 --> 00:20:18,070
else that's it for me questions

00:20:23,730 --> 00:20:29,600
that's our website run with hot dog

00:20:32,420 --> 00:20:37,290
don't be shy

00:20:33,900 --> 00:20:43,080
you can heckle me too if you want and

00:20:37,290 --> 00:20:48,330
easy make users here I have a question

00:20:43,080 --> 00:20:50,370
yep I hold the mic so you know a lot of

00:20:48,330 --> 00:20:54,360
the new languages had their own build

00:20:50,370 --> 00:20:56,670
system how does how does one incorporate

00:20:54,360 --> 00:20:59,130
so every new language is now

00:20:56,670 --> 00:21:01,910
incorporating that kind of thing so how

00:20:59,130 --> 00:21:04,890
does that work with in relation to music

00:21:01,910 --> 00:21:07,620
so there are levels of integration that

00:21:04,890 --> 00:21:13,290
you can have in a build system the first

00:21:07,620 --> 00:21:14,880
level is okay you offload the work to a

00:21:13,290 --> 00:21:17,040
different tool which then gives you a

00:21:14,880 --> 00:21:19,230
binary output which you can then consume

00:21:17,040 --> 00:21:20,520
which is what you can do in meson which

00:21:19,230 --> 00:21:22,710
you can which is what the default

00:21:20,520 --> 00:21:25,230
integration is in all build systems if

00:21:22,710 --> 00:21:26,580
you use auto tools or C make you will

00:21:25,230 --> 00:21:28,050
call a command it will give you an

00:21:26,580 --> 00:21:31,170
output and you consume that let's say I

00:21:28,050 --> 00:21:34,560
set at ivory lib food got a right and

00:21:31,170 --> 00:21:35,820
that's currently for instance for rust

00:21:34,560 --> 00:21:37,470
integration with cargo integration

00:21:35,820 --> 00:21:39,420
specifically you just you can build rust

00:21:37,470 --> 00:21:40,770
file but if you want to download stuff

00:21:39,420 --> 00:21:42,690
from crates at i/o and then bridge

00:21:40,770 --> 00:21:44,340
everything for doing cargo integration

00:21:42,690 --> 00:21:46,590
currently there are no masks which are

00:21:44,340 --> 00:21:48,660
using this sort of minimal integration

00:21:46,590 --> 00:21:50,160
which is you call an external tool which

00:21:48,660 --> 00:21:53,630
gives you an output which you can do

00:21:50,160 --> 00:21:55,800
with Maison as well custom target right

00:21:53,630 --> 00:21:59,190
but there's a high level of indications

00:21:55,800 --> 00:22:01,830
that you want which is you want to be

00:21:59,190 --> 00:22:04,470
able to control everything about that

00:22:01,830 --> 00:22:06,690
compilation about that build and for

00:22:04,470 --> 00:22:07,860
that it needs a higher tighter amount of

00:22:06,690 --> 00:22:11,460
Education with the build system and for

00:22:07,860 --> 00:22:13,290
that in kako currently it's not just us

00:22:11,460 --> 00:22:14,550
that cares about it other people also

00:22:13,290 --> 00:22:15,600
care about it everybody has their own

00:22:14,550 --> 00:22:18,060
build systems and they want to integrate

00:22:15,600 --> 00:22:20,190
each other so for instance I think it

00:22:18,060 --> 00:22:22,590
was Facebook which I added support to

00:22:20,190 --> 00:22:26,160
cargo for or putting build plans which

00:22:22,590 --> 00:22:28,860
is basically use you call cargo with - Z

00:22:26,160 --> 00:22:30,630
on stable options build plan and then it

00:22:28,860 --> 00:22:32,910
will output a JSON file which tells you

00:22:30,630 --> 00:22:34,950
what the compiler wants what the what

00:22:32,910 --> 00:22:37,480
cargo wants to run all the compiler

00:22:34,950 --> 00:22:39,460
command all the linker commands ever

00:22:37,480 --> 00:22:41,799
and then my son would be able to run

00:22:39,460 --> 00:22:44,320
that and then give Delgado he I did all

00:22:41,799 --> 00:22:46,720
the compilation for you not just output

00:22:44,320 --> 00:22:48,340
I do this if you work on the program or

00:22:46,720 --> 00:22:50,679
the test or whatever else that kind of

00:22:48,340 --> 00:22:52,600
integration also requires this kind of

00:22:50,679 --> 00:22:55,179
work and that needs people do actually

00:22:52,600 --> 00:22:57,820
care about this and work on that so it's

00:22:55,179 --> 00:23:00,580
definitely doable but it needs people to

00:22:57,820 --> 00:23:02,230
care about that and I think the trust

00:23:00,580 --> 00:23:04,840
community is pretty welcoming and so I

00:23:02,230 --> 00:23:08,380
think that that can be done for other

00:23:04,840 --> 00:23:09,929
tool chains it would entirely be on a

00:23:08,380 --> 00:23:14,260
case-to-case basis but like as I said

00:23:09,929 --> 00:23:16,120
the levels of is it called integration

00:23:14,260 --> 00:23:18,130
that you want and you want higher levels

00:23:16,120 --> 00:23:19,600
so that starts from low integration and

00:23:18,130 --> 00:23:20,620
then you spend time on that you will

00:23:19,600 --> 00:23:22,390
care more about they want more

00:23:20,620 --> 00:23:28,630
integration there gets fixed so that's

00:23:22,390 --> 00:23:30,520
how I would say it would happen that's

00:23:28,630 --> 00:23:36,339
it then okay thank you

00:23:30,520 --> 00:23:36,339

YouTube URL: https://www.youtube.com/watch?v=a553IJWm77c


